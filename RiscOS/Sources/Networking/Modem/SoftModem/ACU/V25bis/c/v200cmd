/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             v200cmd.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains the code for the V.25bis commands.
/
/     Product:          ACU core code
/
/     History:          v200cmd.c v3.90
/                       v200cmd.c 3.91
/                       v200cmd.c 3.92
/
/           Created:    11/16/91
/                       1/21/92
/                       1/14/93
/
/           ----------------------------------------------------------
/           -                   Modifications                        -
/           ----------------------------------------------------------
/
/           Author & Date: RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "v25_def.h"
#include "v25_mem.h"
#include "ee_def.h"
#include "acu_pro.h"
#include "mt_pro.h"
#include "v25_pro.h"

ubyte valid_v25_character(ubyte ch);
void v25_CIC(void);
void v25_DIC(void);
void v25_HAY(void);
void v25_PRN(void);
void v25_PRI(void);
void v25_RLN(void);
void v25_RLI(void);
void v25_CRN(void);
void v25_CRI(void);
void v25_CRS(void);
void v25_RLF(void);
void v25_RLD(void);
void per_D(void);
void per_F(void);
void per_V(void);
void v25_clear_call_status(ubyte num);
void init_at_communication(void);


ubyte lsn_array[] = "LSN 00;0000000000000000000000000000000000000000";
ubyte lsd_array[] = "LSD 00;0000000000000000000000000000000000000000";

const uword  v25_tel_num_addr_array[] =  { V25_TELE_NUM_0_ADD,
                  V25_TELE_NUM_1_ADD,
                  V25_TELE_NUM_2_ADD };

               /************
                  V25_TELE_NUM_3_ADD,
                  V25_TELE_NUM_4_ADD,
                  V25_TELE_NUM_5_ADD,
                  V25_TELE_NUM_6_ADD,
                  V25_TELE_NUM_7_ADD,
                  V25_TELE_NUM_8_ADD,
                  V25_TELE_NUM_9_ADD };
               *************/

/*******************************************************************************
/
/   Routine: valid_v25_character
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This routine checks the input character to see if it is a
/            valid V.25bis dial character.
/
/   Input Parameters: ubyte ch - character to validate
/
/   Output Parameters: ubyte TRUE - character is valid
/             FALSE - character is not valid
/
/   Global Variables Changed:  None
/
/   Users: v25_PRN, v25_CRN, v25_CRI
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
ubyte valid_v25_character(ubyte ch)
{
   if ((ch >= '0') && (ch <= '9'))
      return (TRUE);
   if ((ch >= 'A') && (ch <= 'D'))
      return (TRUE);
   switch (ch)
   {
      case '#':
      case '*':
      case 'T':
      case 'P':
      case 'R':
      case ':':
      case '@':
      case '<':
      case '=':
      case '>':
      case '&': return (TRUE);

      default: return (FALSE);
   }
}



/*******************************************************************************
/
/   Routine: v25_CIC
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description: This routine is called during the CMD3 state.  It will
/           execute a 'Connect Incoming Call' command.
/           If there is an incoming call, it is immediately connected.
/           If there is no incoming call, an INV indication is sent.
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type,
/               disregard_incoming_call, cmd_ptr
/
/   Users: v25_CI
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_CIC(void)
{
   ubyte ch;

   ch = get_next_char();
   if (ch != NULL)
   {
      error_occurred = TRUE;
      error_type = PARAMETER_SYNTAX;
      return;
   }

   if (s[1] == 0)         /* No incoming call */
      error_occurred = TRUE;

   else   /* Connect call */
   {
      disregard_incoming_call = FALSE;
      build_event(E_MSG,VAL);
      build_event(E_ANSW,UNUSED);
      cmd_ptr--;
   }
}

/*******************************************************************************
/
/   Routine: v25_DIC
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description: This routine is called during the CMD3 state.  It will
/           execute a 'Disreguard Incoming Call' command.
/           If there is no incoming call, an INV indication is sent.
/           If there is an incoming call, the DIC flag will be set and
/           the call will only be answered if a CIC command is entered.
/           If the call is unanswered, the DIC flag will be reset 8
/           seconds after the line stops ringing.
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type, cmd_ptr,
/               disregard_incoming_call
/
/   Users: v25_DI
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_DIC(void)
{
   ubyte ch;

   ch = get_next_char();
   if (ch != NULL)
   {
      error_occurred = TRUE;
      error_type = PARAMETER_SYNTAX;
      return;
   }
   if (s[1] == 0)             /* No incoming call */
      error_occurred = TRUE;
   else
   {
      disregard_incoming_call = TRUE;
      *cmd_ptr = '\0';
   }
}

/*******************************************************************************
/
/   Routine: v25_hay
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description : This routine will switch from V.25bis mode to AT dialer
/            mode.
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type
/
/   Users: v25_ha
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/
*******************************************************************************/
void v25_HAY(void)
{
   ubyte ch;

   ch = get_next_char();
   if (ch != NULL)
   {
      error_occurred = TRUE;
      error_type = PARAMETER_SYNTAX;
   }

   else if (v25_char_format)
      error_occurred = TRUE;
   else
      init_at_communication();
}

/*******************************************************************************
/
/   Routine: v25_PRN
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description: This routine is called during the CMD3 state.  It will
/           execute a 'PRogram phone Number' command.
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type, cmd_ptr
/
/   Users: v25_PR
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_PRN(void)
{
   ubyte ch;
   ubyte next_ch;
   ubyte *temp_ptr;
   ubyte temp_array[MAX_PHONE_NUM_LEN+1];
   ubyte i;
   ubyte checksum[CHECKSUM_SIZE];
   int addr;

   ubyte eeprom_error;

   ch = get_next_char();
   if (ch == NULL)
   {
      error_occurred = TRUE;
      error_type = PARAMETER_SYNTAX;
      return;
   }
   next_ch = get_next_char();
   if (next_ch == NULL)
   {
      error_occurred = TRUE;
      error_type = PARAMETER_SYNTAX;
      return;
   }
   if (next_ch == ';')
      addr = ch - '0';
   else
   {
      ch = ch - '0';
      next_ch = next_ch - '0';
      addr = ch * 10 + next_ch;
      ch = get_next_char();
      if (ch != ';')
      {
         error_occurred = TRUE;
         error_type = PARAMETER_SYNTAX;
         return;
      }
   }
   if ((addr > STORED_NUM_LOCATIONS-1) || (addr < 0))
   {
      error_occurred = TRUE;
      error_type = PARAMETER_VALUE;
      return;

   }
   temp_ptr = temp_array;
   i = 0;
   while ((ch = get_next_char()) != NULL)
   {

      if (!valid_v25_character(ch))
      {
         error_occurred = TRUE;
         error_type = PARAMETER_VALUE;
         return;
      }
      if (i >= MAX_PHONE_NUM_LEN)
      {
         error_occurred = TRUE;
         error_type = PARAMETER_SYNTAX;
         return;
      }
      *temp_ptr++ = ch;
      i++;
   }
   *temp_ptr = '\0';
   i++;

   /* Point cmd_ptr at NULL character for return to execute_cmd */
   cmd_ptr--;

   eeprom_error = modem_write_data(v25_tel_num_addr_array[addr],i,&temp_array[0]);

   if (eeprom_error == TRUE)
      error_occurred = TRUE;
   else
   {
      /* Recalculate the checksum   */
      checksum[0] = modem_eeprom_checksum();
      modem_write_data(CHECKSUM_ADDR,CHECKSUM_SIZE,(ubyte *)&checksum[0]);
   }

   v25_clear_call_status(addr);
}

/*******************************************************************************
/
/   Routine: v25_PRI
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description: This routine is called during the CMD3 state.  It will
/           execute a 'PRogram Identification number' command.
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type,
/
/   Users: v25_PR
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
/******void v25_PRI(void)
{
   ubyte ch;
   ubyte i;
 *   ubyte *ptr;    *
   ubyte *ident_ptr;
   ubyte ident_array[MAX_IDENT_NUM_LEN+1];
   ubyte checksum[CHECKSUM_SIZE];

   ubyte eeprom_error;

   ident_ptr = ident_array;
   i = 0;
   while ((ch = get_next_char()) != NULL)
   {
      if ( i >= MAX_IDENT_NUM_LEN)
      {
         error_occurred = TRUE;
         error_type = PARAMETER_VALUE;
         return;
      }
      *ident_ptr ++= ch;
      i++;
   }
   *ident_ptr = '\0';
   cmd_ptr--;             * point cmd_ptr at NULL character *
               * for return to execute_cmd    *
   i++;

   eeprom_error = modem_write_data(V25_IDENT_NUM_ADDR,i,(ubyte *)&ident_array[0]);
   if (eeprom_error == TRUE)
      error_occurred = TRUE;
   else
   {
*      Recalculate the checksum        *
      checksum[0] = modem_eeprom_checksum();
      modem_write_data(CHECKSUM_ADDR,CHECKSUM_SIZE,(ubyte *)&checksum[0]);
   }

}
***********/

/*******************************************************************************
/
/   Routine: v25_RLN
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description: This routine is called during the CMD3 state.  It will
/           execute a 'Request List of stored Numbers' command.
/
/           If HDLC or BISYNC character framing is being used, each
/           LSN indication is sent in a separate packet.  The last
/           packet sent in HDLC will have the poll/final bit set.
/           In all others, the bit will be 0.   The last packet sent in
/           BISYNC will end with ETX.   All others will end in ETB.
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type,
/               v25_last_packet_in_block,
/
/   Users: v25_RL
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Descriptions:
/   Reasons:
/
*******************************************************************************/
void v25_RLN(void)
{
   ubyte *ptr;
   ubyte num_array[MAX_PHONE_NUM_LEN+1];
   ubyte temp;
   ubyte i,j;
   ubyte ch;

   ubyte eeprom_error;

   ch = get_next_char();
   if (ch != NULL)
   {
      error_occurred = TRUE;
      error_type = PARAMETER_SYNTAX;
      return;
   }

   v25_last_packt_in_block = FALSE;
   while (v25_sync_tx_timer != 0)
      process_wait();

   v25_output_result(VAL);

   for (i = 0; i<STORED_NUM_LOCATIONS ; i++)
   {
      eeprom_error = modem_read_data(v25_tel_num_addr_array[i],MAX_PHONE_NUM_LEN+1,(ubyte *)&num_array[0]);

      if (eeprom_error)
      {
         error_occurred = TRUE;
         error_type = PARAMETER_VALUE;
         return;
      }

      ptr = (ubyte *)&num_array[0];
      if (i < 10)
      {
         lsn_array[4] = '0';
         lsn_array[5] = i + '0';
      }
      else
      {
         temp = (i / 10);
         lsn_array[4] = temp + '0';
         lsn_array[5] = (i - temp * 10) + '0';
      }
      j = 7;
      while (*ptr != NULL)
         lsn_array[j++] = *ptr++;

      lsn_array[j] = NULL;

/*** With 'If' uncommented, empty locations do not send back an LSN indicaton */
    /***   if (lsn_array[7] != NULL)
      { ***/

                        /* Do not send anything to the terminal if 180/1 mode   */
         if (v25_operating_mode != V25_108_1_MODE)
         {
            while (v25_sync_tx_timer != 0)
               process_wait();

            if (i == (STORED_NUM_LOCATIONS - 1))
               v25_last_packt_in_block = TRUE;

            v25_output_info((ubyte *)&lsn_array[0]);
         }
     /***   } ***/
   }

/********* Used to Print out Final LSN indication with no parameters ********
   lsn_array[4] = NULL;
   v25_last_packt_in_block = TRUE;

 *   Do not send anything to the terminal if 180/1 mode   *
   if (v25_operating_mode != V25_108_1_MODE)
   {
      while (v25_sync_tx_timer != 0)
         process_wait();

      v25_output_info((ubyte *)&lsn_array[0]);
   }
************************************************************/

   send_val = FALSE;
   *cmd_ptr = '\0';

   /* Need to force the code to turn echo back on after the message has been
      sent */
   build_event(E_MSG,NONE);
}


/*******************************************************************************
/
/   Routine: v25_RLI
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description: This routine is called during the CMD3 state.  It will
/           execute a 'Request List of Identification number ' command.
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed:  send_val, cmd_ptr
/
/   Users: v25_RL
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Descriptions:
/   Reasons:
/
*******************************************************************************/
/*******void v25_RLI(void)
{
   ubyte *ptr;
   ubyte ident_array[MAX_IDENT_NUM_LEN+1];
   ubyte j;
   ubyte lsi_array[] = "LSI 000000000000000000000000000000000000";

   j = 4;
   modem_read_data(V25_IDENT_NUM_ADDR,MAX_IDENT_NUM_LEN+1,(ubyte *)&ident_array[0]);
   ptr = (ubyte *)&ident_array[0];
   while (*ptr != NULL)
      lsi_array[j++] = *ptr++;
   lsi_array[j] = NULL;

 *   Do not send anything to the terminal if 180/1 mode   *
   if (v25_operating_mode != V25_108_1_MODE)
      v25_output_info((ubyte *)&lsi_array[0]);

   send_val = FALSE;
   *cmd_ptr = '\0';
}
***********/

/*******************************************************************************
/
/   Routine: v25_CRN
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description: This routine is called during the CMD3 state.  It will
/           execute a 'Call Request with phone Number provided'
/           command.
/
/           If CRN is issued with no phone number, then the last
/           number entered with a CRN command will be dialed.
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed:  send_val, cmd_ptr, error_occurred,
/               error_type, v25_number_called
/
/   Users: v25_CR
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_CRN(void)
{
   ubyte ch;
   ubyte i;
   ubyte *ptr;
   ubyte *last_ptr;

   if (s[1] > 0)            /* Incoming Call */
   {
      build_event(E_MSG,VAL);
      build_event(E_MSG,CFI_CB);
      send_val = FALSE;
      *cmd_ptr = '\0';
      return;
   }

   ptr = (ubyte *)&cmd_line[0];
   last_ptr = (ubyte *)&v25_num_last_dialed[0];
   i = 0;
   while ((ch = get_next_char()) != NULL)
   {
      if (!valid_v25_character(ch))
      {
         error_occurred = TRUE;
         error_type = PARAMETER_VALUE;
         return;
      }
      if (i >= MAX_PHONE_NUM_LEN)
      {
         error_occurred = TRUE;
         error_type = PARAMETER_SYNTAX;
         return;
      }
      switch(ch)   /* Convert special dial chars from V25 to AT */
      {
         case ':' : *ptr++ = 'W';        /* Wait */
               *last_ptr++ = 'W';
               break;

         case '<' : *ptr++ = ',';        /* Pause */
               *last_ptr++ = ',';
               break;

         case '&' : *ptr++ = '!';        /* Flash */
               *last_ptr++ = '!';
               break;

         case '>' :
         case '=' : break;

         default: *ptr++ = ch;
             *last_ptr++ = ch;
      }
      i++;
   }
   if (i == 0)
   {
      if (*last_ptr == NULL)
      {
         send_val = FALSE;
         build_event(E_MSG,VAL);
         build_event(E_MSG,CFI_NS);
         *cmd_ptr = '\0';
         return;
      }
      while ( *last_ptr != NULL )
         *ptr++ = *last_ptr++;
      if (check_delayed_list(STORED_NUM_LOCATIONS))
      {
         *cmd_ptr = '\0';
         return;
      }
   }
   else
   {
      *last_ptr = '\0';
      v25_clear_call_status(STORED_NUM_LOCATIONS);
      v25_number_called = (STORED_NUM_LOCATIONS);
   }

   if (check_forbidden_list(STORED_NUM_LOCATIONS))
   {
      *cmd_ptr = '\0';
      return;
   }

   cmd_ptr = (ubyte *)&cmd_line[0];
   *ptr = '\0';

   if (send_val)
      build_event(E_MSG,VAL);

   build_event(E_ORIG,UNUSED);
}


/*******************************************************************************
/
/   Routine: v25_CRI
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description: This routine is called during the CMD3 state.  It will
/           execute a 'Call Request phone number provided with
/           Identification number' command.
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type,
/               send_val, cmd_ptr
/
/   Users: v25_CR
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
/**void v25_CRI(void)
{
   ubyte ch;
   ubyte i;
   ubyte *ptr;

   if (s[1] > 0)             * Incoming Call *
   {
      build_event(E_MSG,VAL);
      build_event(E_MSG,INC);
      send_val = FALSE;
      *cmd_ptr = '\0';
      return;
   }

   ptr = (ubyte *)&cmd_line[0];
   i = 0;
   while (((ch = get_next_char()) != NULL) && (ch != ';'))
   {
      if (!valid_v25_character(ch))
      {
         error_occurred = TRUE;
         error_type = PARAMETER_VALUE;
         return;
      }
      if (i >= MAX_PHONE_NUM_LEN)
      {
         error_occurred = TRUE;
         error_occurred = PARAMETER_VALUE;
         return;
      }
      switch(ch)    * Convert special dial chars from V25 to AT *
      {
         case ':' : *cmd_ptr++ = 'W';          * Wait *
               break;

         case '<' : *cmd_ptr++ = ',';         * Pause *
               break;

         case '&' : *cmd_ptr++ = '!';         * Flash *
               break;

         case '>' :
         case '=' : break;

         default: *ptr++ = ch;
      }
      i++;
   }
   if (ch == NULL)
   {
      error_occurred = TRUE;
      error_type = PARAMETER_SYNTAX;
      return;
   }

   cmd_ptr = (ubyte *)&cmd_line[0];
   *ptr = '\0';
*******/

    /************** IDENTIFICATION NUMBER IGNORED *****************************/
    /*                                 */
    /*   ptr = (ubyte *)&CRI_ident_num[0];               */
    /*   i = 0;                              */
    /*   while ((ch = get_next_char()) != NULL)                  */
    /*   {                              */
    /*      if ( i   > MAX_IDENT_NUM_LEN)                  */
    /*      {                           */
    /*         error_occurred = TRUE;                  */
    /*         error_type = PARAMETER_VALUE;               */
    /*         return;                      */
    /*      }                           */
    /*      *ptr++ = ch;                        */
    /*      i++;                           */
    /*   }                              */
    /*   *ptr = '\0';                                                          */
    /**************************************************************************/
/*****
   if (send_val)
      build_event(E_MSG,VAL);
   build_event(E_ORIG,UNUSED);
}
******/


/*******************************************************************************
/
/   Routine: v25_CRS
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description: This routine is called during the CMD3 state.  It will
/           execute a 'Call Request with Stored location number provided'
/           command.
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type, send_val,
/               cmd_ptr
/
/   Users: v25_CR
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_CRS(void)
{
   ubyte ch;
   ubyte next_ch;
   ubyte num_array[MAX_PHONE_NUM_LEN+1];
   ubyte *ptr;
   int addr;

   ubyte eeprom_error;

   if (s[1] > 0)            /* Incoming Call */
   {
      build_event(E_MSG,VAL);
      build_event(E_MSG,CFI_CB);
      *cmd_ptr = '\0';
      send_val = FALSE;
      return;
   }

   ch = get_next_char();
   if (ch == NULL)
   {
      error_occurred = TRUE;
      error_type = PARAMETER_SYNTAX;
      return;
   }
   next_ch = get_next_char();
   if (next_ch == NULL)
      addr = ch - '0';
   else
   {
      ch = ch - '0';
      next_ch = next_ch - '0';
      addr = ch * 10 + next_ch;
      ch = get_next_char();
      if (ch !=  NULL)
      {
         error_occurred = TRUE;
         error_type = PARAMETER_VALUE;
         return;
      }
   }
   if ((addr > STORED_NUM_LOCATIONS-1) || (addr < 0))
   {
      error_occurred = TRUE;
      error_type = PARAMETER_VALUE;
      return;
   }

   eeprom_error = modem_read_data(v25_tel_num_addr_array[addr],MAX_PHONE_NUM_LEN+1,(ubyte *)&num_array[0]);

   if (eeprom_error)
   {
      error_occurred = TRUE;
      error_type = PARAMETER_VALUE;
      return;
   }

   ptr = (ubyte *)&num_array[0];

   if (*ptr == NULL)
   {
      send_val = FALSE;
      build_event(E_MSG,VAL);
      build_event(E_MSG,CFI_NS);
      *cmd_ptr = '\0';
      return;
   }

   v25_cvrt_dial_string(ptr);

   if (check_forbidden_list(addr))
      *cmd_ptr = '\0';

   else if (check_delayed_list(addr))
      *cmd_ptr = '\0';

   else
   {
      if (send_val)
         build_event(E_MSG,VAL);
      build_event(E_ORIG,UNUSED);
   }
}


/*******************************************************************************
/
/   Routine: v25_RLF
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description: This routine is called during the CMD3 state.  It will
/           execute a 'Request List of Forbidden numbers' command.
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed:  send_vla, cmd_ptr
/
/   Users: v25_RL
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Descriptions:
/   Reasons:
/
*******************************************************************************/
/****************************
void v25_RLF(void)
{
   ubyte lsf_array[] = "LSF 00;0000000000000000000000000000000000000000";

   lsf_array[4] = NULL;

 *   Do not send anything to the terminal if 180/1 mode   *
   if (v25_operating_mode != V25_108_1_MODE)
      v25_output_info((ubyte *)&lsf_array[0]);


   send_val = FALSE;
   *cmd_ptr = '\0';

}
**********************************/


/*******************************************************************************
/
/   Routine: v25_RLD
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description: This routine is called during the CMD3 state.  It will
/           execute a 'Request List od Delayed numbers' command.
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, error_type, send_val,
/               v25_call_delayed[], cmd_ptr
/
/   Users: v25_RL
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date: RSA 6/10/92 (1)
/   Descriptions: Moved code that checks for v25_last_packt_in_block after
/            the output of the next to last frame.
/   Reasons: After the RLD command, the modem outputs the last two frames as
/       final frames instead of just the last frame.
/
/   Author & Date:   RSA
/   Descriptions:
/   Reasons:
/
*******************************************************************************/
void v25_RLD(void)
{
   ubyte *ptr;
   ubyte num_array[MAX_PHONE_NUM_LEN+1];
   ubyte temp;
   ubyte i,j;
   ubyte ch;

   ubyte eeprom_error;

   ch = get_next_char();
   if (ch != NULL)
   {
      error_occurred = TRUE;
      error_type = PARAMETER_SYNTAX;
      return;
   }

   while (v25_sync_tx_timer != 0)
      process_wait();

   v25_output_result(VAL);

   v25_last_packt_in_block = FALSE;
   for (i = 0; i<STORED_NUM_LOCATIONS ; i++)
   {
/*********** If this 'if' is uncommented, LSD indications are not sent if no calls are delayed!  ****/
     /***   if (v25_call_delayed[i] == TRUE)
      { ***/
         eeprom_error = modem_read_data(v25_tel_num_addr_array[i],MAX_PHONE_NUM_LEN+1,(ubyte *)&num_array[0]);
         if (eeprom_error)
         {
            error_occurred = TRUE;
            error_type = PARAMETER_VALUE;
            return;
         }


         ptr = (ubyte *)&num_array[0];
         if (i < 10)
         {
            lsd_array[4] = '0';
            lsd_array[5] = i + '0';
         }
         else
         {
            temp = (i / 10);
            lsd_array[4] = temp + '0';
            lsd_array[5] = (i - temp * 10) + '0';
         }
         j = 7;
         if (v25_call_delayed[i] == TRUE)
         {
            while (*ptr != NULL)
               lsd_array[j++] = *ptr++;
         }

         lsd_array[j] = NULL;

/*** With 'If' uncommented, empty locations do not send back an LSD indicaton */
         /*** if (lsd_array[7] != NULL)
         { ***/
                                /* Do not send anything to the terminal if 180/1
                                   mode   */
            if (v25_operating_mode != V25_108_1_MODE)
            {
               while (v25_sync_tx_timer != 0)
                  process_wait();

               if (i == (STORED_NUM_LOCATIONS - 1))
                  v25_last_packt_in_block = TRUE;
               v25_output_info((ubyte *)&lsd_array[0]);
            }
         /*** } ***/
      /*** } ***/
   }

/********* Used to Print out Final LSD indication with no parameters ********
   lsd_array[4] = NULL;
   v25_last_packt_in_block = TRUE;

 *   Do not send anything to the terminal if 180/1 mode   *
   if (v25_operating_mode != V25_108_1_MODE)
   {
      while (v25_sync_tx_timer != 0)
         process_wait();

      v25_output_info((ubyte *)&lsd_array[0]);
   }
****************************************/
   send_val = FALSE;
   *cmd_ptr = '\0';

/*   Need to force the code to turn echo back on after the message has been sent   */
   build_event(E_MSG,NONE);
}


/*******************************************************************************
/
/   Routine: per_D
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description: This routine selects the 108 mode to use for V.25bis
/      AT%D  0 - 108/2 mode (default)
/            1 - 108/1 mode
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, v25_operating_mode
/
/   Users: at_per()
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void per_D(void)
{
   ubyte num;

   num = a_to_d();
   if (error_occurred == TRUE)
      return;
   if (num <= 1)
      v25_operating_mode = num;
   else
      error_occurred = TRUE;
}


/*******************************************************************************
/
/   Routine: per_F
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description: This routine selects the V.25bis character framing.
/      AT%F    0 - Asynchronous
/          1 - HDLC
/          2 - BISYNC
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred, v25_char_format, send_ok
/
/   Users: at_per()
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void per_F(void)
{
   ubyte num;

   num = a_to_d();
   if (error_occurred == TRUE)
      return;
   if (num <= 2)
   {
      v25_char_format = num;
      send_ok = TRUE;
   }
   else
      error_occurred = TRUE;
}


/*******************************************************************************
/
/   Routine: per_V
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description: This routine switches from AT command set to V.25bis.
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed:  error_occurred
/
/   Users: at_per()
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void per_V(void)
{
   if ((on_line_command) || (test_in_progress))
   {
      error_occurred = TRUE;
      return;
   }

   init_v25_communication();
   build_event(E_IDLE,UNUSED);
   build_event(E_MSG,VAL);
}


/*******************************************************************************
/
/   Routine: v25_clear_call_status
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description: This routine clears the status of the numbers at the
/           address passed in.
/
/   Input Parameters: ubyte num - address of the number to be cleared
/
/   Output Parameters: none
/
/   Global Variables Changed:  v25_call_delayed[], v25_delay_timer[],
/               v25_sucessive_calls[]
/
/   Users: v25_CRN, v25_PRN
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void v25_clear_call_status(ubyte num)
{
   v25_call_delayed[num] = FALSE;
   v25_delay_timer[num] = 0;
   if (num == STORED_NUM_LOCATIONS)
      v25_successive_calls[num] = 1;
   else
      v25_successive_calls[num] = 0;
}


/*******************************************************************************
/
/   Routine: init_at_communication
/
/   Author : RSA
/
/   Creation Date: 06/17/91
/
/   Description: This routine is called to initialize variables for
/           needed for AT dialer communication.
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed:  st_idle.type, st_idle.state, acu_data_bits
/               acu_parity, acu_stop_bits, char_size
/               v25bis_active
/
/   Users: v25_hay
/
/   -------------------------------------------------------------
/   -         Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void init_at_communication(void)
{
   st_idle.type = AT_OFFLINE;
   st_parse.type = AT_OFFLINE;
   build_event(E_IDLE,UNUSED);
   build_event(E_MSG,OK);

   /* Restore the format of the AT commands */
   acu_data_bits = at_data_bits;
   acu_parity = at_parity;
   acu_stop_bits = at_stop_bits;
   char_size = at_char_size;

   set_parms(acu_data_bits,acu_parity,acu_stop_bits);
   v25bis_active = FALSE;
}

