/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ll00or.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains the control code for the Leased line
/                       state ORIGINATE.
/
/     Product:          ACU core code
/
/     History:          ll00or.c v3.90
/                       ll00or.c v3.91
/                       ll00or.c v3.92
/                       ll00or.c v3.93
/                       ll00or.c v3.94
/
/        Created:       10/7/91
/                       10/17/91
/                       11/16/91
/                       1/21/92
/                       1/12/93
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "ll_mem.h"
#include "ds_def.h"
#include "ds_mem.h"
#include "acu_pro.h"
#include "mt_pro.h"

void proc_orig_ll(void);
void orig_ll_bg(void);
void ll_orig_init_modem(void);


/*******************************************************************************
/
/     Routine:       proc_orig_ll
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will process the event by determining the
/                    next state and the action to be performed for the ORIG
/                    state of type LEASED_LINE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  acu_state, acu_proc
/
/     Users: proc_orig
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void proc_orig_ll(void)
{
   acu_state = st_orig_ll[acu_event->type].new_state;
   acu_proc = st_orig_ll[acu_event->type].fnc_ptr;
}


/*******************************************************************************
/
/     Routine:       orig_ll_bg
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine will process the background functions for
/                    the ORIG state of type LEASED_LINE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: proc_orig
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void orig_ll_bg(void)
{
   switch (st_orig.state)
   {
      case INIT_LEASED_LINE:
         /*   In this state the ACU is being initialized to make a call   */
         orig_init_no_dial();
         break;

      case INIT_MODEM_ORIG:
         /*   In this state the ACU will make function calls to
            set up the modem task to originate a call */
         ll_orig_init_modem();
         break;

      case ORIG_HANDSHAKING:
         /*   In this state the ACU performs handshaking in the
            originate mode. */
         originate_handshaking();
         break;
   }
}

/*******************************************************************************
/
/     Routine:       ll_orig_init_modem
/
/     Author:        RSA
/
/     Creation Date: 09/17/91
/
/     Description:   This Routine will initialize the modem to start a leased
/                    line connection as the originator. It will look for ring
/                    back, answer tone, or busy signals.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  modem_modem, modem_baud, last_async_sync
/               acu_state
/
/     Users: orig_ll_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void ll_orig_init_modem(void)
{
   ubyte temp_tx_level;

   busy_detect = TRUE;

   /* If cellular operation is enabled, Need to force the transmit level to
      be -10 dB. */
   if (prnM || dial_K)
      temp_tx_level = 10;
   else
      temp_tx_level = s[63];

   modem_set_parameters(s[9],s[7],255,v32_retrain,temp_tx_level,
              receive_threshold,s[108]);
   modem_baud = translate_modem_baud();
   modem_mode = translate_modem_mode(modem_baud);

   /* Need to update the modem with the selected baud rates   */
   update_modem_rate_seq();

   /* Reset the system and determine the type of connection to be tried   */
   system_reset();
   system_set_parameters();

   if ((operating_mode == DIRECT) && (init_type == HARDWARE))
      modem_char(last_async_sync,dipsw_char_size,dipsw_overspeed);
   else
      modem_char(last_async_sync,char_size,overspeed);

   st_orig.state = ORIG_HANDSHAKING;

   modem_connect((ubyte)sr14.originate_flag,modem_baud,modem_mode,
      (ubyte)sr27.clock_source,(ubyte)sr27.leased_line,automode,DISABLED,
      DISABLED,DISABLED);

   modem_init_call_progress(OFF_HOOK_DIALED);

   if (modem_dte_CTS_status() == FALSE)
   {
      CTS_up_flag = FALSE;
      CTS_turn_on_flag = TRUE;
   }
   else
   {
      CTS_up_flag = TRUE;
      CTS_turn_on_flag = FALSE;
   }
   cts_timer = 0;
}

