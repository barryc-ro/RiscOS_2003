/****************************************************************************
/
/   Copyright 1988, 1989, 1990, 1991, 1992, 1993, 1994.  All Rights
/   Reserved by:
/   RSA
/   7701 Six Forks Road
/   Suite 120
/   Raleigh, NC  27615
/   (919) 846-7171
/
/   This document contains material confidential to RSA. Its contents
/   must not be revealed, used or disclosed to anyone or company without
/   written permission by RSA. The information contained herein is solely
/   for the use of RSA.
/
/   File:                dte_riscos.c
/
/   Module Version:
/
/   Function:
/
/   Product:
/
/   -----------------------------------------------------------
/   -                       Modifications                     -
/   -----------------------------------------------------------
/
/   Author & Date:     RSA
/   Description:
/   Reason:
/
****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_pro.h"
#include "acu_mem.h"
#include "edf.dce_line"
#include "mt_pro.h"
#include "mt_coext.h" /* for modem_1ms_timer */
#include "dsp_drv.h" /* for MAX_PACKET_SIZE */
#include "tracemac.h"
#include "dosapp.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

#include "../riscos/devicefs.h"

/*** the 2 possible flow control conditions ***/
#define XON_AND_XOFF  0x1
#define RTS_AND_CTS   0x2

/**** defines for dte_mode ****/
#define ACU       1
#define DTE       2
#define FAX       3
#define T_VOICE   4

ubyte idle_flag;
int dte_mode;

#define NO_TRACE     0x00  /* Command Tracing Disabled */
#define TX_TRACE     0x01  /* TX Command Tracing enabled */
#define RX_TRACE     0x02  /* RX Command Tracing enabled */
#define TXRX_TRACE   0x03  /* TX & RX Command Tracing enabled */

#define NUM_CMMD_TRACE  10000

/* Structure declarations */
struct cmd_rec
    {
    int indx;
    int nSource;                  /* Source or direction of transfer */
    unsigned char data[12];
    unsigned long tstamp;
    };

typedef struct cmd_rec cmd_t;

int trace_cnt;
int packet_cnt;
int rx_packet_cnt;
int tx_packet_cnt;
cmd_t cmmd_trace [NUM_CMMD_TRACE];
int TraceEnabled = TXRX_TRACE;
extern unsigned long PIT_int_cnt;

void clearscreen(void)
{
    _swix(OS_WriteI + 12, 0);
}

void cursor(int y, int x)
{
    _swix(OS_WriteI + 31, 0);
    _swix(OS_WriteI + x, 0);
    _swix(OS_WriteI + y, 0);
}

char *GetTraceMode(void)
{
char *trace_mode;

    switch (TraceEnabled)
    {
        case NO_TRACE:
            trace_mode = "DISABLED";
            break;

        case TX_TRACE:
            trace_mode = "TX";
            break;

        case RX_TRACE:
            trace_mode = "RX";
            break;

        case TXRX_TRACE :
            trace_mode = "TX,RX";
            break;

        default:
            trace_mode = "ERROR";
            break;
    }

return (trace_mode);

}

/*--------------------------- init_trace    ------------------------*/
/* This procedure will initialize the DSP trace variables           */
/*------------------------------------------------------------------*/

void init_trace(void)
{
int i;

    trace_cnt = 0;
    packet_cnt = 0;
    tx_packet_cnt = 0;
    rx_packet_cnt = 0;

    for (i=0 ; i< NUM_CMMD_TRACE ; i++)
    {
        cmmd_trace[i].indx = i;
        memset( cmmd_trace[i].data, 0, sizeof(cmmd_trace[i].data) );
    }

}

/*---------------------------- display_cmmd_trace ------------------- */
/* This procedure will display the last N DSP packets which were sent */
/*------------------------------------------------------------------  */

void display_cmmd_trace (void)
{
int i,j;
int display_cnt;
char *direction;
char *trace_mode;
extern char *PktDescr[0xff];

    clearscreen();
    cursor(0,0);
    trace_mode = GetTraceMode();

    printf ("Num: Dir ID   Data                                 (10ms)  Description\n\r");

    if (packet_cnt > NUM_CMMD_TRACE )
        display_cnt = NUM_CMMD_TRACE ;
    else
        display_cnt = trace_cnt;

    /* Display trace buffer in sorted order, because of the wrap around
       buffer the newest packet may be in the front of the buffer. We want
       to display the oldest packets first.
     */

    for (i=trace_cnt ; i< display_cnt; i++)
    {

        direction =  (cmmd_trace[i].nSource == TRACE_TRANSMIT) ? "Tx" : "Rx";

        printf ("%4d %2s %3x  ",cmmd_trace[i].indx,direction,cmmd_trace[i].data[0]);

        for (j=0; j < 12; j++)
        {
            printf ("%3x",cmmd_trace[i].data[j]);
        }
        printf ("   %4lx   %.20s\n\r",cmmd_trace[i].tstamp,PktDescr[cmmd_trace[i].data[0]]);


    }

    for (i=0 ; i< trace_cnt; i++)
    {

        direction =  (cmmd_trace[i].nSource == TRACE_TRANSMIT) ? "Tx" : "Rx";

        printf ("%4d %2s %3x  ",cmmd_trace[i].indx,direction,cmmd_trace[i].data[0]);

        for (j=0; j < 12; j++)
        {
            printf ("%3x",cmmd_trace[i].data[j]);
        }
        printf ("   %4lx   %.20s\n\r",cmmd_trace[i].tstamp,PktDescr[cmmd_trace[i].data[0]]);

    }


    cursor(22,0);

    printf ("Packets  RX=%d,  TX=%d, Command Trace/Capture Mode [%6.8s]",
                rx_packet_cnt,tx_packet_cnt,trace_mode);
    cursor(23,0);
}

/*------------------------ UpdateCommandTrace-----------------------*/
/* This procedure is the interface for the RSA code to call when    */
/* packets are sent to the DSP. See send_pkt_to_dsp()               */
/*------------------------------------------------------------------*/

void UpdateCommandTrace(void *cmmd_packet, uword source)
{
#ifdef TMLDEBUG
  if (source & TraceEnabled)
    {

    int j;
extern char *PktDescr[0xff];

    if (trace_cnt == NUM_CMMD_TRACE ) /* check for wrap around */
        trace_cnt = 0;

    cmmd_trace[trace_cnt].indx = ++packet_cnt;
    cmmd_trace[trace_cnt].tstamp = PIT_int_cnt;
    cmmd_trace[trace_cnt].nSource = source;

    if (source == TRACE_TRANSMIT)
        tx_packet_cnt++;
    else
        rx_packet_cnt++;

    memcpy (cmmd_trace[trace_cnt].data, cmmd_packet, 12);

    if (cmmd_trace[trace_cnt].data[0] != 0x0c)
    {
        Printf("%4d %2s %3x  ", cmmd_trace[trace_cnt].indx,(cmmd_trace[trace_cnt].nSource == TRACE_TRANSMIT) ? "Tx" : "Rx",cmmd_trace[trace_cnt].data[0]);

        for (j=0; j < 12; j++)
        {
            Printf ("%3x",cmmd_trace[trace_cnt].data[j]);
        }
        Printf("   %4x   %s\n",cmmd_trace[trace_cnt].tstamp, PktDescr[cmmd_trace[trace_cnt].data[0]]);
    }

    trace_cnt++;
    }
#else
  if (source & TraceEnabled)
    {

    if (trace_cnt == NUM_CMMD_TRACE ) /* check for wrap around */
        trace_cnt = 0;

    cmmd_trace[trace_cnt].indx = ++packet_cnt;
    cmmd_trace[trace_cnt].tstamp = PIT_int_cnt;
    cmmd_trace[trace_cnt].nSource = source;

    if (source == TRACE_TRANSMIT)
        tx_packet_cnt++;
    else
        rx_packet_cnt++;

    memcpy (cmmd_trace[trace_cnt].data, cmmd_packet, 12);

    trace_cnt++;
    }
#endif
}

void fax_dte_reset(void)
{
}

/*static int pending_char = -1;

uword dte_from_num(void)
{
    int read;

    if (pending_char >= 0)
        return 1;

    _swix(OS_Byte, _INR(0,2)|_OUTR(1,2), 129, 0, 0, &pending_char, &read);

    if (!read && pending_char == 9)
    {
        pending_char = -1;
        system_rcv_escape();
        return 0;
    }

    if (read)
    {
        pending_char = -1;
        return 0;
    }
    else
        return 1;
}


ubyte dte_from_char(void)
{
    int temp = pending_char;

    pending_char = -1;

    return temp;
}
*/

void fax_dte_init(ubyte a, ubyte b, ubyte c)
{
}

/*
uword dte_to_num(void)
{
    return 0;
}

void dte_to_char(ubyte a)
{
    putchar(a);
}


uword dte_to_free(void)
{
    return 256;
}

void dte_to_clear(void)
{
}


void dte_from_clear(void)
{
}

void dte_to_break(ubyte a, ubyte b)
{
}

static ubyte to_block[256];

void dte_from_block_update(uword a)
{
    //if (a > 0) pending_char = -1;
}


ubyte *dte_from_block_pointer(void)
{
    return (ubyte *) &pending_char;
}


uword dte_from_block_num(void)
{
    return pending_char == -1 ? 0 : 1;
}


void dte_to_block_update(uword a)
{
    int i;

    for (i = 0; i < a; i++)
        putchar(to_block[i]);
}


ubyte *dte_to_block_pointer(void)
{
    return to_block;
}


uword dte_to_block_free(void)
{
    return 256;
}
*/

void autobaud_on(void)
{
}


void acu_port_init(void)
{
}


void acu_set_tx_baud(ubyte a)
{
}


void acu_set_parms(ubyte a, ubyte b, ubyte c)
{
}



void dte_enable(void)
{
}


void acu_io_disable(void)
{
}


void acu_reset_port(void)
{
}


void dte_disable(void)
{
}


void acu_io_enable(void)
{
}


void autobaud_off(void)
{
}


ubyte get_autobaud_rate(void)
{
    return BPS115200;
}


void dte_init( ubyte in_baud_rate,
      ubyte in_data_bits,
      ubyte in_stop_bits,
      ubyte in_parity,
      ubyte in_term_to_modem_flow_cntl,
      ubyte in_term_to_modem_xon,
      ubyte in_term_to_modem_xoff,
      ubyte in_modem_to_term_flow_cntl,
      ubyte in_modem_to_term_xon,
      ubyte in_modem_to_term_xoff,
      ubyte in_pass_through_flow_cntl,
      ubyte in_esc_char,
      ubyte in_esc_guard_time,
      ubyte escape_mode)
{
#if 0
   ubyte temp;

   ENTER_CRITICAL_SECTION

/* initialize DTE parameters */
   dte_mode = DTE;

   dte_guard_time = esc_guard_time = in_esc_guard_time;
   temp = escape_mode;
   esc_chr = in_esc_char;
   dte_20_mSec_timer = 2;
   dte_tesc_count = 0;
   dte_lead_guard = FALSE;
   flow_cntl_pass = in_pass_through_flow_cntl;

   dte_rx_break_running = FALSE;
   rx_suspend_pending = FALSE;
   rx_resume_pending = FALSE;
   rx_suspended = FALSE;

   dte_tx_suspended_by_terminal= FALSE;
   tx_suspended_for_break = FALSE;
   dte_tx_interrupt_expected = FALSE;
   dte_tx_break_state = TX_BREAK_STATE_IDLE;

   dte_port_init();

/*    Set flow control variables    */
   modem_to_dte_xoff_char = in_modem_to_term_xoff;
   modem_to_dte_xon_char = in_modem_to_term_xon;
   modem_to_dte_flow_cntl = in_modem_to_term_flow_cntl;

   dte_to_modem_xoff_char = in_term_to_modem_xoff;
   dte_to_modem_xon_char = in_term_to_modem_xon;
   dte_to_modem_flow_cntl = in_term_to_modem_flow_cntl;

   LEAVE_CRITICAL_SECTION

   if (dte_to_modem_flow_cntl & RTS_AND_CTS)
      if(!PCterminal_rts_status())
         dte_tx_suspend();
#endif
}

void dte_reconfigure(ubyte a, ubyte b, ubyte c,
                     ubyte d, ubyte e, ubyte f,
                     ubyte g, ubyte h, ubyte i,
                     ubyte j, ubyte k, ubyte l,
                     ubyte m, ubyte n)
{
}

void acu_halt(void)
{
}

void acu_restart(void)
{
}


/************************************************************************
/
/       Routine: acu_timer
/
/       Author : K J Bracey
/
/       Creation Date:  06/02/97
/
/       Description: Called every 10ms
/
/       Input Parameters: None
/
/       Output Parameters: None
/
/       Global Variables Changed:
/
/       Users:
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:
/       Reason:
/
**********************************************************************/
void acu_timer(void)
{
    modem_timer();
    /*dte_timer();*/
    line_timer();
    #if 0
    vcv_timer();
    #endif

    /* Dial timer is a one millisecond timer. */
    if (dial_timer > 10)
      dial_timer -= 10;
    else
      dial_timer = 0;

    if (modem_1ms_timer > 0)
    {
      if (modem_1ms_timer > 10)
        modem_1ms_timer -= 10;
      else
        modem_1ms_timer = 0;
    }

    acu_10msec_timer++;
    if (! --timer100mS )
    {
        timer100mS = 10;
        acu_100msec_timer++;

        if (! --timer1sec )
        {
            timer1sec = 10;
            acu_1sec_timer++;
            if (! --timer1min )
            {
                timer1min = 60;
                acu_1min_timer++;
            }
        }
    }

}


UART_STATUS uart;

ubyte modem_dte_DTR_status()
{
    return uart.dtr;
}

ubyte modem_dte_RTS_status()
{
    return uart.rts;
}

ubyte modem_dte_CTS_status()
{
    return 1;
}

void modem_dte_cts(ubyte state)
{
}

void modem_dte_dsr(ubyte state)
{
    uart.dsr = state;
    send_riscos_serial_event();
}

void modem_dte_ri(ubyte state)
{
    uart.ring = state;
}

void modem_dte_rlsd(ubyte state)
{
    uart.dcd = state;
    send_riscos_serial_event();
}

