/****************************************************************************
/
/	Copyright, 1988 - 1995.     All Rights Reserved by:
/	    RSA
/	    7701 Six Forks Road
/	    Suite 120
/	    Raleigh, NC  27615
/	    (919) 846-7171
/
/
/	This document contains material confidential to RSA its contents must
/	not be revealed, used or disclosed to anyone or company with out
/	written permission by RSA.  The information contained herein is solely
/	for the use of RSA.
/
/	File:		faxdata.c
/
/	Version: 	1.0
/
/	Function: 	This file contains DCE I/O routines specific to the fax
/		  	data mode protocol.
/
/	Product: 	Fax Line I/O
/
/	Platform:	CP Line I/O for Merlin DSP
/
/	History: 	Developed from faxdata.c
/
/	Created:  	January 30,1995
/
/	---------------------------------------------------------
/	-			Modifications			-
/	---------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/
******************************************************************************/

#include "sys_def.h"			/* system defines 					*/
#include "iohw_equ.h"			/* First Flight hardware defines 	*/
#include "lineequ.h"			/* DCE (line side) defines 			*/
#include "faxequ.h"				/* FAX defines 						*/
#include "faxedf.h"				/* FAX externs defines 				*/
#include "linelink.h"           /* linelink.c prototypes */
/* #include "local.h" */              /* typedefs for DSP drivers */
#include "dsp_drv.h"            /* DSP driver prototypes */




/******************************************************************************
/
/	Procedure: fax_line_from_clear
/
/	Author : RSA
/
/	Creation Date:	January 30,1995
/
/	Description:	This routine will clear all pending received data from
/			the DCE fax buffers
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed: dce_rx_remove, dce_rx_insert, dce_rx_count
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*****************************************************************************/
void fax_line_from_clear(void)
{
   line_disable_interrupts();

/* Reset buffer mechanisms */
   dce_rx_remove = 0;
   dce_rx_insert = 0;
   dce_rx_count = 0;

   line_enable_interrupts();
}


/**************************************************************************
/
/	Routine: fax_line_from_num
/
/	Author : RSA
/
/	Creation Date:	January 30,1995
/
/	Description:  This routine will return the number of characters
/		      contained in the line receive buffer
/
/	Input Parameters: None
/
/	Output Parameters: (uword) number of chars in buffer
/
/	Global Variables Changed:  None
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
************************************************************************/
uword fax_line_from_num(void)
{
   return(dce_rx_count);
}


/******************************************************************************
/
/	Routine: fax_line_from_char
/
/	Author: RSA
/
/	Creation Date:	January 30,1995
/
/	Description:	This routine will remove a character from the current
/			line receive buffer for fax processing
/
/	Input Parameters: None
/
/	Output Parameters:  (ubyte) character from buffer
/
/	Global Variables Changed:  dce_rx_remove, dce_rx_count
/
/	Users:
/
/	*************************************************************
/	*			Modifications			    *
/	*************************************************************
/
/	Author & Date:	RSA
/	Description:
/
*******************************************************************************/
ubyte fax_line_from_char(void)
{
   register ubyte c;

   line_disable_interrupts();

/* Pop char from buffer and bump indicies */
   c = dce_rx_buffer[dce_rx_remove];
   dce_rx_remove++ ;
   dce_rx_count-- ;

/* Reset buffer ptr ? */
   if (dce_rx_remove == DCE_BUFFER_SIZE )
      dce_rx_remove = 0;

   line_enable_interrupts();

   return(c);
}



/******************************************************************************
/
/	Procedure: 	fax_line_to_clear
/
/	Author : 	RSA
/
/	Creation Date:	January 30,1995
/
/	Description:	This routine will clear all pending transmit data from
/			the DCE fax buffers
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  dce_tx_remove, dce_tx_count, dce_tx_insert
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*****************************************************************************/
void fax_line_to_clear(void)
{
   line_disable_interrupts();

/* Reset buffer mechanisms */
   dce_tx_remove = 0;
   dce_tx_insert = 0;
   dce_tx_count = 0;

   line_enable_interrupts();
}



/******************************************************************************
/
/	Routine: fax_line_to_free
/
/	Author: RSA
/
/	Creation Date:	January 30,1995
/
/	Description:	This routine will return the amount of space available
/			in the dce transmit buffer.
/
/	Input Parameters: None
/
/	Output Parameters: (uword) space available
/
/	Global Variables Changed:  None
/
/	Users:
/
/	*************************************************************
/	*			Modifications			    *
/	*************************************************************
/
/	Author & Date:	RSA
/	Description:
/
*******************************************************************************/
uword fax_line_to_free(void)
{
   return( DCE_BUFFER_SIZE - dce_tx_count - 2 );
}


/******************************************************************************
/
/	Procedure: fax_line_to_num
/
/	Author : RSA
/
/	Creation Date:	January 30,1995
/
/	Description:	This routine returns the # of characters awaiting
/			transmission to the terminal, used by the modem code
/			to do an orderly take-over of the dte during AT command
/ 			processing.  If there are no chars in dce buffer, check
/		 	DSP buffer. If not all sent in DSP return 1, (can't get number
/			left in DSP tx buffer).
/
/	Input Parameters: None
/
/	Output Parameters: (uword) char count
/
/	Global Variables Changed: None
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*****************************************************************************/
uword fax_line_to_num(void)
{
   ubyte  tx_status = 0;
   uword num;

/*	Return buffer count unless the buffer is empty */
   if (dce_tx_count)
      num = dce_tx_count;

   /* Need to check DSP to see if any characters left in tx buffer.    */
   /* Can't know how many, if not all sent, return 1 (at least 1 left) */
   else
   {
      dspdrv_ReadCram(TX_STATUS_REG, &tx_status, 1);
      if ((tx_status & BUFFER_EMPTY) ==  BUFFER_EMPTY)
         num = 0;
      else
         num = 1; /* ie at least 1 in DSP internal buffers */
   }
   return(num);
}



/******************************************************************************
/
/	Routine: fax_line_to_char
/
/	Author: RSA
/
/	Creation Date:	January 30,1995
/
/	Description:	This routine will send a character to the DCE
/			with buffering if required.
/
/	Input Parameters: (ubyte) character to be transmitted
/
/	Output Parameters: None
/
/	Global Variables Changed:  dce_tx_buffer, dce_tx_insert, dce_tx_count,
/	 			   dce_tx_interrupt_expected
/
/	Users:
/
/	*************************************************************
/	*			Modifications			    *
/	*************************************************************
/
/	Author & Date:	RSA
/	Description:
/
*******************************************************************************/
void fax_line_to_char(ubyte out_char)
{
   ubyte need_to_kickstart = FALSE;

   line_disable_interrupts();

/*	If buffer has data OR the scc fifo is full, then enque the char */
   if (!dce_tx_count && !dce_tx_interrupt_expected)
   {
      need_to_kickstart = TRUE;
   }

   dce_tx_buffer[dce_tx_insert++] = out_char;
   dce_tx_count++ ;

   /* reset buffer ptr ? */
   if (dce_tx_insert == DCE_BUFFER_SIZE)
      dce_tx_insert = 0;

   if (need_to_kickstart)
   {
      dspdrv_ping_cram_intr();
      dce_tx_interrupt_expected =TRUE;
   }

   line_enable_interrupts();

} /* procedure */


/******************************************************************************
/
/	Routine: fax_data_tx_int
/
/	Author: RSA
/
/	Creation Date:	January 30,1995
/
/	Description:	Transmits the next available tx chars to the line when
/			the SCC is empty
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  dce_tx_interrupt_expected, dce_tx_count,
/				   dce_tx_remove
/
/	Users:
/
/	*************************************************************
/	*			Modifications			    *
/	*************************************************************
/
/	Author & Date:	RSA
/	Description:
/
******************************************************************************/
void fax_data_tx_int(void)
{
   ubyte status; /* status byte of data area semaphore to write */
   ubyte data_count;  /* count of number of data bytes to send to Comm RAM */
#ifdef TEMP_ARM610
	uword address;
#else
   ubyte address; /* address of Comm RAM to write data to */
#endif

/* If we have no data to send, exit */
   if ( dce_tx_count == 0 )
   {
/*	   Set the fifo not busy flag */
      dce_tx_interrupt_expected = FALSE;
      return;
   }

/*	Set the fifo busy flag */
   dce_tx_interrupt_expected = TRUE;

/* init variables */
   address = CP_DSP_DATA_AREA_BASE;
   data_count = 0;

   while (dce_tx_count && (data_count < DATA_AREA_SIZE))
   {
      /* stuff Comm RAM from buffer and bump indicies */
      dspdrv_WriteCram(address, &dce_tx_buffer[dce_tx_remove], 1);

      /* update indexes */
      address += WORD_OR_BYTE_ADD_INC;
      data_count++;
      dce_tx_count--;
      dce_tx_remove++;

/*	   Reset buffer ptr ? */
      if (dce_tx_remove == DCE_BUFFER_SIZE)
         dce_tx_remove = 0;
   }

   /* set semaphore, status then length */
   status = NO_STATUS;
   dspdrv_WriteCram(CP_DSP_DATA_STATUS, &status, 1);
   dspdrv_WriteCram(CP_DSP_DATA_LENGTH, &data_count, 1);

}/* procedure */


/******************************************************************************
/
/	Routine: fax_data_rx_int
/
/	Author: RSA
/
/	Creation Date:	January 30,1995
/
/	Description:	This routine will confirm the reception of a data
/			from the terminal.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  dce_rx_insert, dce_rx_count
/
/	Users:	line_rx_int
/
/	*************************************************************
/	*			Modifications			    *
/	*************************************************************
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
******************************************************************************/
void fax_data_rx_int(void)
{
   ubyte address; /* address in Comm RAM to read from */

   address = DSP_CP_DATA_AREA_BASE;

   while (dce_length_semaphore)
   {

/*	   Buffer the char if there's room */
      if (dce_rx_count < (DCE_BUFFER_SIZE - 2))
      {
/*	      Pop in buffer and bump indicies */

         dspdrv_ReadCram(address, &dce_rx_buffer[dce_rx_insert], 1);
         address += WORD_OR_BYTE_ADD_INC;
         dce_rx_insert++;
         dce_rx_count++;

/*	      Reset buffer ptr ? */
         if (dce_rx_insert == DCE_BUFFER_SIZE)
            dce_rx_insert = 0;

      }/* end if room in buffer */
      else /* no room in dce buffer, lose character */
      {
         fax_lost_chars++;
      }
      dce_length_semaphore--;
   } /* end while */

   /* Clear semaphore status, then length */
   dce_status_semaphore = 0;
   dspdrv_WriteCram(DSP_CP_DATA_STATUS, &dce_status_semaphore, 1);
   dspdrv_WriteCram(DSP_CP_DATA_LENGTH, &dce_length_semaphore, 1);

} /* procedure */











