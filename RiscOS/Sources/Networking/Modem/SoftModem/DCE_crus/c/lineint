/****************************************************************************
/
/    Copyright, 1988 - 1995.     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/
/    This document contains material confidential to RSA its contents must
/    not be revealed, used or disclosed to anyone or company with out
/    written permission by RSA.  The information contained herein is solely
/    for the use of RSA.
/
/    File:          lineint.c
/
/    Version:  1.0
/
/    Function: Serves as an interface between the main ISR and the
/              line interrupts.
/
/    Product:  Line I/O
/
/    Platform: Merlin/Cutlass DSP
/
/    History:  lineint.c
/
/    Created:  October 25, 1994
/
/    ---------------------------------------------------------
/    -              Modifications            -
/    ---------------------------------------------------------
/    Author & Date: RSA
/    Description:
/
*****************************************************************************/

#include "sys_def.h"
#include "lineequ.h"               /* line constant defs */
#include "lineedf.h"               /* line external variable defs */
#include "faxequ.h"                /* fax constant defs */
#include "faxedf.h"                /* fax external variable defs */
#include "iohw_equ.h"              /* first flight hardware defs */
#include "dsp_drv.h"            /* DSP driver prototypes    */
#include "edf.dce_line"
#include "edf.dte"
#include "mt_v8v34.h"
#include "mt_coext.h"
void dce_line_rx_int(void);
void dce_line_tx_int(void);

/********************** external procedures used locally ********************/
extern void fax_hdlc_rx_int(void);
extern void fax_hdlc_tx_int(void);
extern void fax_hdlc_special_int(void);
extern void fax_data_rx_int(void);
extern void fax_data_tx_int(void);
extern void lapm_rx_int(void);
extern void lapm_tx_int(void);
extern void detection_rx_int(void);
extern void detection_tx_int(void);
extern void v8_rx_int(void);
extern void v8_tx_int(void);

/*** Speed matching ISRs ***/
extern void spd_match_rx_int(void);
extern void spd_match_tx_int(void);

/*** MNP Async ISRs ***/
extern void async_rx_int(void);
extern void async_tx_int(void);

/*** MNP Sync ISRs ***/
extern void sync_rx_int(void);
extern void sync_tx_int(void);

/*** VoiceView ISRs ***/
extern void vcv_hdlc_rx_int(void);
extern void vcv_hdlc_tx_int(void);
/* External VoiceView variables */
extern ubyte vcv_dce_enabled;
extern ubyte vcv_dce_mode;

extern void dce_rx_suspend(void);

/* local prototypes */
void line_tx_int(void);
void line_rx_int(void);
void line_int(void);

/* defined by ramn on 10/10/95 */
/* move to suitable header file before finalizing the code */
extern ubyte vce_mode;
extern ubyte dte_mode;
/* #include "dteequ.h" */

/******************************************************************************
/
/    Procedure: line_int
/
/    Author : RSA
/
/    Creation Date: October 25, 1994
/
/    Description:   This routine will pass the generic SCC TX RDY line
/         interrupts off to the correct line ISR. When using with First Flight
/         or other project that uses PCSI dsp_drv.c interrupt handler.  Install
/         this routine as the callback in the interrupt handler.
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed: None
/
/    Users:
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
****************************************************************************/
void line_int(void)
{
   dce_line_rx_int();
   dce_line_tx_int();
}

/****************************************************************************
 *
 *   Routine:           dce_line_rx_int()
 *
 *   Author:            RSA
 *
 *   Creation Data:     8/11/1995
 *
 *   Description:
 *
 *   Input Parameters:  None
 *
 *   Output Parameters: Nothing
 *
 *   Global Variables Changed: None
 *
 *   Users:
 *
 *   -----------------------------------------------------------
 *   -                       Modifications                     -
 *   -----------------------------------------------------------
 *
 *   Author & Date:  RSA
 *   Description:
 *   Reason:
 *
 ****************************************************************************/

void dce_line_rx_int(void)
{
   if (line_io_enabled)
   {
		/* ramn */
		dspdrv_ReadCram(DSP_CP_DATA_LENGTH, &dce_length_semaphore,1);
		dspdrv_ReadCram(DSP_CP_DATA_STATUS, &dce_status_semaphore,1);

	    if(dce_status_semaphore)
		    dspdrv_ReadCram(DSP_CP_DATA_LENGTH, &dce_length_semaphore,1);

	    if ((dce_length_semaphore != 0) || (dce_status_semaphore !=0))
			    line_rx_int();
	}  /* ramn */
}

/****************************************************************************
 *
 *   Routine:           dce_line_tx_int()
 *
 *   Author:            RSA
 *
 *   Creation Data:     8/11/1995
 *
 *   Description:
 *
 *   Input Parameters:  None
 *
 *   Output Parameters: Nothing
 *
 *   Global Variables Changed: None
 *
 *   Users:
 *
 *   -----------------------------------------------------------
 *   -                       Modifications                     -
 *   -----------------------------------------------------------
 *
 *   Author & Date:  RSA
 *   Description:
 *   Reason:
 *
 ****************************************************************************/

void dce_line_tx_int(void)
{
   if (line_io_enabled)
   {
	   dspdrv_ReadCram(CP_DSP_DATA_LENGTH, &dce_length_semaphore,1);
	   dspdrv_ReadCram(CP_DSP_DATA_STATUS, &dce_status_semaphore,1);

      if ((dce_length_semaphore == 0)&& (dce_status_semaphore ==0))
		   line_tx_int();
   }
}

/******************************************************************************
/
/    Procedure: line_tx_int
/
/    Author : RSA
/
/    Creation Date: October 25, 1994
/
/    Description:   This routine will pass the Merlin/Cutlass TX line
/         interrupts off to the correct line ISR.
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed: None
/
/    Users:    line_int
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
****************************************************************************/
void line_tx_int(void)
{
		if ( fax_dce_enabled )
		{
		  if ( fax_dce_mode == 1 ) /* fax_dce_mode[0] == HDLC  */
				fax_hdlc_tx_int();
		  else
				fax_data_tx_int();
		}
		else if ( mnp_sync )
				sync_tx_int();
		else if ( lapm_sync )
				lapm_tx_int();
		else if ( detection_enabled )
				detection_tx_int();
		else if( sp_match )
		{
				spd_match_tx_int();
		}
#if 0
      else if (vcv_dce_enabled)
      {
            if (vcv_dce_mode == 1)
              vcv_hdlc_tx_int();
      }
#endif
		else if ( v8_configured )
				v8_tx_int();
		else
			async_tx_int();
}



/******************************************************************************
/
/    Procedure: line_rx_int
/
/    Author : RSA
/
/    Creation Date: October 25, 1994
/
/    Description:   This routine will pass the Merlin/Cutlass RX line
/         interrupts off to the correct line ISR.
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed: None
/
/    Users:    line_int
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
****************************************************************************/
void line_rx_int(void)
{

		if ( fax_dce_enabled )
		{
			if ( fax_dce_mode == 1 ) /* fax_dce_mode[0] == HDLC */
				fax_hdlc_rx_int();
			else
				fax_data_rx_int();
		}
		else if ( mnp_sync )
				sync_rx_int();
		else if ( lapm_sync )
				lapm_rx_int();
		else if ( detection_enabled )
				detection_rx_int();
		else if ( sp_match )
				spd_match_rx_int();
#if 0
      else if (vcv_dce_enabled)
      {
            if (vcv_dce_mode == 1)
              vcv_hdlc_rx_int();
      }
#endif
		else if ( v8_configured )
				v8_rx_int();
		else
				async_rx_int();

}



/******************************************************************************
/
/    Procedure: line_special_int
/
/    Author : RSA
/
/    Creation Date: January 27, 1995
/
/    Description:   This routine will pass the generic SCC special line
/              interrupts off to the correct line ISR.
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed: None
/
/    Users:    rsa_main_isr
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
****************************************************************************/
void line_special_int(void)
{
	 if ( fax_dce_enabled )
	 {
		  if ( fax_dce_mode == 1 ) /* fax_dce_mode[0] == HDLC  */
			   fax_hdlc_special_int();
		  else
			   return;
	 }
	 else if ( lapm_sync )
		lapm_tx_int();

}/* procedure */


