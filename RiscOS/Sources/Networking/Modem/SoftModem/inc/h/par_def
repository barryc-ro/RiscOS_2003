/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             pr00def.h (copies to "par_def.h")
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains defines relative to the ACU's
/                       stand alone AT command parser.
/
/     Product:          ACU core code
/
/     History:          None.
/
/        Created:       2/01/95
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

/*
 * Defininitions for the Parse Parameter Buffer
 */
#define PARM_BUFF_SIZE     40
typedef union
{
   ubyte bdata[PARM_BUFF_SIZE];    /* byte size AT command data */
   uword wdata[PARM_BUFF_SIZE/2];  /* word size AT command data */
   ulong ldata[PARM_BUFF_SIZE/4];  /* long size AT command data */
} PARSE_PARAM_BUFFER;


/*
 * Structures and defines for the Parse Command Table
 */
typedef const struct
{
   ubyte *AT_string;
   union
   {
       void (*function_ptr)();
       void (*function_p_ptr)(PARSE_PARAM_BUFFER *);
    }u;
    ubyte type;
    ubyte flags;
} PARSE_CMD_TABLE_STRUCT;

#define END_OF_PARSE_TABLE  (ubyte *)"\0",0,0,0

/*
   Command Parameter Types for PARSE_CMD_STRUCT

   These defines determine the type of parameter each AT commands
   accepts.
*/
#define NO_PARAM            0   /* eg: ATA                      */
#define BYTE_NUMERIC        1   /* eg: ATH1                     */
#define WORD_NUMERIC        2   /* eg: AT%B4800                 */
#define LONG_NUMERIC        3   /* for future use               */
#define COMPOUND_BYTE       4   /* eg: AT+FIS=1,2,3,4,5,6       */
#define COMPOUND_WORD       5   /* eg: AT+VBT=300,20            */
#define COMPOUND_LONG       6   /* for future use               */
#define BYTE_HEX            7   /* eg: AT+VTD=FF                */
#define WORD_HEX            8   /* eg: AT+VTD=FFFF              */
#define LONG_HEX            9   /* eg: AT+VEM=FFFFFFF           */
#define COMPOUND_BYTE_HEX   10  /* eg: AT+VTD=FF,3F             */
#define COMPOUND_WORD_HEX   11  /* eg: AT+VTD=FFFF,33FF         */
#define COMPOUND_LONG_HEX   12  /* eg: AT+VEM=FFFFFFF,11112222  */
#define DIAL_STRING         13  /* eg: ATD9,1-919-846-345J      */
#define FORMATTED_STRING    14  /* eg: AT+FPI="LOCAL ID"        */
#define REAL_NUM_STRING     15  /* eg: AT+FCLASS=2.0            */
#define CONST_STRING        16  /* eg: AT+C=lsdf3#$#$cs0df      */
#define STORED_TELE_NUM     17  /* eg: AT&Z=(919)-846-2343jk    */
#define COMPOUND_DTMF       18  /* eg: AT#VTS=2,{2,40},[1000,3000,20] */
#define SIGNED_BYTE         19  /* eg: AT+WBAG=-1               */

/* Bit-mapped Command Parameter Flags for PARSE_CMD_STRUCT */
#define NO_FLAGS           0       /* Cmds requiring no special flags */
#define SEMICOL_END        0x01    /* Cmds that terminate the command line
                                        unless a ';' is present */
#define DUPLICATE_CMD      0x02    /* Cmds shared between modules e.g. +fclass */


/* Valid return values from "at_parser" */
#define PARSER_VALID        0
#define PARSER_ERROR        1
#define PARSER_FINISHED     2

/* Valid values for "parser_state" */
#define PARSE_STATE__IDLE       0
#define PARSE_STATE__FILTER     1
#define PARSE_STATE___EXECUTE   2

/* Valid inputs ot AT_PARSE_TABLES */
#define DISABLE_PARSING    0
#define SUSPEND_PARSING    1
#define RESUME_PARSING     2
#define ENABLE_TABLE       3
#define DISABLE_TABLE      4

/* Return vaules from parse_get_parameter */
#define PARM_OK            0
#define PARM_ERROR         1
#define PARM_IGNORE        2

/* Field defines for param_compound_DTMF() */
#define DTMF_BUF_END       0
#define DTMF_EMPTY         1
#define DTMF_DIGIT         2
#define EMPTY_BRACES       3
#define DTMF_BRACES        4
#define TIME_BRACES        5
#define EMPTY_BRACKET      6
#define FREQ1_BRACKET      7
#define FREQ2_BRACKET      8
#define TIME_BRACKET       9
#define PREMATURE_END      0xFF

/* Misc. defines */
#define STRING_MAX         0xFF
#define MAX_PARSE_TABLES   15


