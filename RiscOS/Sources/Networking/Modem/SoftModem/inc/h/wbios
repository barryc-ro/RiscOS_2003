/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             wbios.h
/
/     Module Version:   1.00
/
/     Function:         External Function Prototypes for Wireless Module.
/
/     Product:          Wireless Modem Module.
/
/     History:
/
/           Created:    10/10/95
/
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
****************************************************************************/


/* WBIOS generic state names */
#define WBIOS_STATE_UNDETERMINED          0x00
#define WBIOS_STATE_READY                 0x01
#define WBIOS_STATE_CONNECTING            0x02
#define WBIOS_STATE_CONNECTED             0x03

/* WBIOS generic event names */
#define WBIOS_EVENT_UNDETERMINED          0x00
#define WBIOS_EVENT_BUSY                  0x01
#define WBIOS_EVENT_READY                 0x02
#define WBIOS_EVENT_RINGING               0x03
#define WBIOS_EVENT_CHAN_CHANGED          0x04
#define WBIOS_EVENT_CHAN_DROPPED          0x05
#define WBIOS_EVENT_CHAN_ESTABLISHED      0x06
#define WBIOS_EVENT_CHAN_ESTABLISHING     0x07

#define MAX_WBIOSDATA_SIZE                  32

/* WBIOS msg type definitions */
#define WL_ENABLE               0x00    /* +ptr (cpinit structure)      */
#define WL_DISABLE              0x01    /* none                         */
#define WL_RSSI_REPORT_PERIOD   0x02    /* +data (100ms granularity)    */
#define WL_DTX_CTRL             0x03    /* +data (On/Off)               */
#define WL_HANDOFF_IND_CTRL     0x04    /* +data (On/Off)               */
#define WL_HANDOFF_RELEASE      0x05    /* none                         */
#define WL_FLASH                0x06    /* +ptr (Dial string)           */
#define WL_ORIGINATE            0x07    /* +ptr (Dial string)           */
#define WL_TERMINATE            0x08    /* none                         */
#define WL_ANSWER               0x09    /* none                         */
#define WL_INIT                 0x0A    /* +PWR_TABLES                  */
#define WL_STATUS               0x0B    /* none                         */
#define WL_CURR_RSSI            0x0C    /* none (RSSI ret'd in data[0]) */

#define NUM_PWR_LVLS     8
#define NUM_CHAN_BANKS   3

typedef struct
{
    unsigned char  sso;                   /*  2-bit serving system option  */
    unsigned char  EXp;                   /*  1-bit extended address opt   */
    unsigned short MIN2p;                 /* 10-bit encoded area code      */
    unsigned long  MIN1p;                 /* 24-bit encoded phone number   */
    unsigned char  SCMp;                  /*  4-bit station class mark     */
    unsigned char  ACCOLCp;               /*  4-bit access overload class  */
    unsigned char  AutoReg;               /*  1-bit auto registration opt  */
    unsigned char  dtx;                   /*  1-bit DTX enable option      */
    unsigned char  HomeOnly;              /*  1-bit home only option       */
    unsigned short SIDp;                  /* 15-bit system id number       */
    unsigned short FIRSTCHPp;             /* 11-bit first paging channel   */
    unsigned short fccsa;                 /* 11-bit first ctrl chan sys A  */
    unsigned short fccsb;                 /* 11-bit first ctrl chan sys B  */
    unsigned short lccsa;                 /* 11-bit last  ctro chan sys A  */
    unsigned short lccsb;                 /* 11-bit last  ctrl chan sys B  */
 } nam_data;

 typedef struct
 {
    nam_data nam;
    ulong    esn;
 } cp_init;

 /* Call Processing State Data */
 typedef struct
 {
   unsigned short  system;             /* SYSTEM_A,SYSTEM_B             */
   unsigned short  channel;            /* channel number                */
   unsigned short  chtype;             /* CONTROL_CHANNEL,VOICE_CHANNEL */
   unsigned short  state;              /* call processing state         */
   unsigned short  roam;               /* TRUE,FALSE                    */
   unsigned short  sys_id;             /* System ID                     */
 } cp_state_data;

typedef struct {

   ubyte dac[NUM_CHAN_BANKS][NUM_PWR_LVLS];
   uword target[NUM_CHAN_BANKS][NUM_PWR_LVLS];

} PWR_TABLES;

/* Users would pass in a pointer to this
structure, where it would be filled internally
with the current info.     */

typedef struct {

   cp_state_data info;             /* AMPS status converted -> WBIOS */
   ubyte         latest_event;     /* AMPS events converted -> WBIOS */
   ubyte         handoff_ind_ctrl; /* AMPS have to wait 4 release?   */

} CELL_INFO;

/*
   Users of WBIOS would fill in this structure and pass
   it in. It would get interpreted therein and acted
   upon.
*/
typedef struct {

   ubyte type;

   union {

      ubyte         data[MAX_WBIOSDATA_SIZE];  /* holder for data           */
      cp_init       cpinit;                    /* pointer to AMPS Init info */
      PWR_TABLES    *tables;                   /* Radio's TX Power Tables   */
      CELL_INFO     status;

   } u;

} WBIOS_CONTROL;

void wbios_bg(void);
void wbios_timer(void);
void wbios_control(WBIOS_CONTROL *);
