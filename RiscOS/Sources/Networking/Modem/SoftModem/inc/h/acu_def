/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00def.h
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains the #defines and structure
/                       definitions for the ACU code.
/
/     Product:          ACU core code
/
/     History:          ac00def.h v4.02
/
/        Created:       10/4/91
/                       10/10/95
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#define CTRL_X                 24
#define VERSION_SIZE           4

#define OFF                    0
#define ON                     1

#define TIME_BETWEEN_CALLS     800   /* Milliseconds */

/*     Values for the variable modem_status  */
#define IDLE_STATUS            0
#define CONNECTING_STATUS      1
#define CONNECTED_STATUS       2
#define RETRAINING_STATUS      3
#define DROPPING_STATUS        4
#define LOCAL_TEST_STATUS      5
#define REMOTE_TEST_STATUS     6
#define FAX_CONNECTED          8

/*     Values for the variables dte_baud and modem_baud  */
#define BPS1200_75             0
#define BPS75_1200             1
#define BPS300                 2
#define BPS1200                3
#define BPS2400                4
#define BPS4800                5
#define BPS7200                6
#define BPS9600                7
#define BPS12000               8
#define BPS14400               9
#define BPS16800               10
#define BPS19200               11
#define BPS38400               12
#define BPS57600               13
#define BPS600                 14
#define BPS115200              15
#define BPS21600               16
#define BPS24000               17
#define BPS26400               18
#define BPS28800               19
#define BPS31200               20
#define BPS33600               21
#define BPS36000               22

/*   Values for sr23.dte_baud_rate   */
#define SREG_38400         7
#define SREG_19200             6
#define SREG_9600              5
#define SREG_7200              4
#define SREG_4800              3
#define SREG_2400              2
#define SREG_1200              1
#define SREG_600               0   /* Baud Rate is 0 to 600 Baud */

/*   Values for sr37 Line Connect Speed */
#define S37_36000_BPS          20
#define S37_33600_BPS          19
#define S37_31200_BPS          18
#define S37_28800_BPS          17
#define S37_26400_BPS          16
#define S37_24000_BPS          15
#define S37_21600_BPS          14
#define S37_19200_BPS          13
#define S37_16800_BPS          12
#define S37_14400_BPS          11
#define S37_12000_BPS          10
#define S37_9600_BPS           9
#define S37_7200_BPS           8
#define S37_4800_BPS           7
#define S37_2400_BPS           6
#define S37_1200_BPS           5
#define S37_600_BPS            4
#define S37_300_BPS            3
#define S37_110_BPS            2
#define S37_75_BPS             1
#define S37_LAST_AUTOBAUD_RATE 0


/***** MNP variables *****/
#define ENABLED            1

/*     Values for the variable autoreliable_flag   */
#define DISABLED           0
#define NO_BUFFERING       1
#define BUFFERING_200      2
#define BOTH               3

/*     Values for the variable break_type  */
#define IGNORE             0
#define EXP_DEST           1
#define EXP_NONDEST        2
#define NONEXP_NONDEST     3

/*     Values for the variable mnp_service_level   */
#define NO_MNP             0
#define MINIMAL_SERV       1
#define STANDARD_SERV      2

/*     Value for the variable mnp_autorel_time   */
#define MAX_AUTOREL_TIME   20

/* The following are legal values for operating_mode:   */
#define NORMAL             0
#define DIRECT             1
#define RELIABLE           2

/*     Values for the variable modem_DTE_flowctrl   */
#define XON_XOFF               1
#define CTS_RTS                2
#define TRANSPARENT_XON_XOFF   5

/*     Values for the variable slV   */
#define ATV_RESULT_CODES       0
#define MODIFIED_RESULT_CODES  1
#define V42_RESULT_CODES       2

/*     Value for the variable modem_DTE_xon_char   */
#define XON_CHAR           0x11

/*     Value for the variable modem_DTE_xoff_char   */
#define XOFF_CHAR          0x13

/*     Value for the variable retry_limit  */
#define MAX_RETRY          12

/*     Values for the variable mnp_service_class   */
#define ILLEGAL            0
#define CREDIT_VAL_1       1
#define FULLDUP_ASYNC      2
#define FULLDUP_SYNC       3


/*   AT Command variables   */

/* The following are legal values for speaker_ctrl:   */
#define ALWAYS_OFF         0
#define ON_UNTIL_CD        1
#define ALWAYS_ON          2
#define OFF_DIALING        3

/*     Size of the factory_defaults[] array  */
#define DEFAULT_SIZE       102

/*     Size of the variable_addr[] array  */
#define NUM_OF_VARIABLES   101

/*   Sizes for the s_range[] array     */
#define NUM_RANGES         3
#define NUM_S_REGS         119

/*     Default values for S-register  */
#define DEFAULT_S3         13
#define DEFAULT_S4         10
#define DEFAULT_S5         8
#define DEFAULT_S32        20

/* The following are legal values for sr27.comm_mode:        */
#define ASYNC              0
#define SYNC_NORMAL        1
#define SYNC_DTR           2
#define SYNC_TALK          3
#define AUTOSYNC           4

/* The following are legal values for sr27.clock_source:     */
#define TO_PIN_15          0
#define TO_PIN_24          1
#define FROM_CD            2

/*     Values for sr23.guard_tone   */
#define GUARD_DISABLE      0
#define GUARD_550          1
#define GUARD_1800         2

/*     Values for the variable test_in_progress */
#define ALB                1
#define LDL                3
#define RDL                6
#define RDL_SELF_TEST      7
#define ALB_SELF_TEST      8
#define ETOE_SELF_TEST     9

/*     Size of cmd_line[] array   */
#define CMD_LINE_SIZE      82
#define MAX_CMD_LINE       80  /* Maximum length of command line */

/*     The following are legal values for "automode" */
#define NO_AUTOMODE_NO_V8      0
#define AUTOMODE_NO_V8         1
#define NO_AUTOMODE_V8         2
#define AUTOMODE_AND_V8        3
#define AUTOMODE_ENABLED_BIT   0x01
#define V8_ENABLED_BIT         0x02

/*     Size of pt[] array   */
#define PT_SIZE        4

/*     Values for the variable acu_state   */
#define S_IDLE                     0
#define S_PARSE                    1
#define S_ORIG                     2
#define S_ANSW                     3
#define S_ONLINE                   4
#define S_HANGUP                   5
#define S_TEST                     6
#define S_RETRAIN                  7

/*   Values for st_parse.state   */
#define CMD1    0
#define CMD2    1
#define CMD3    2
#define CMD4    3
#define CMD5    4
#define CMD6    5
#define CMD7    6

/*   Values for st_orig.state   */
/*   For st_orig.type = PSTN */
#define DELAY_BEFORE_DIALING       0
#define INIT_ACU_DIAL              1
#define INIT_ACU_NO_DIAL           2
#define ORIG_WAIT_FOR_TONE         3
#define ORIG_DIAL                  4
#define INIT_MODEM_ORIG            5
#define DATA_BUTTON_CONNECTION     6
#define ORIG_HANDSHAKING           7
#define PROCESS_DIAL_MOD           8

/*   For st_orig.type = LEASED_LINE   */
#define INIT_LEASED_LINE       8
#define LL_WAIT_FOR_CONNECT    9


/*   Values for st_answ.state   */
#define INIT_ACU_ANSW          0
#define INIT_MODEM_ANSW        1
#define ANSW_HANDSHAKE         2

/*   Values for st_test.state   */
#define TEST_INIT               0x00
#define TEST_DROP_CURRENT       0x01
#define TEST_WAIT_PHYS_CONNECT  0x02
#define TEST_WAIT_LOGI_CONNECT  0x03
#define TEST_WAIT_RDL_RESPONSE  0x04
#define TEST_SETTLING_DELAY     0x05
#define TEST_ONLINE             0x06
#define TEST_RETURN_TO_TEST     0x07
#define TEST_TERMINATE          0x08
#define TEST_TERMINATE_WAIT     0x09
#define TEST_TERMINATE_COMPLETE 0x0A

#define SLFTST_TEST_CHAR        0x55

/*   Values for st_test.type    */
#define AT_TEST            0
#define FP_TEST            1
#define RMT_AT_TEST        2
#define RMT_V25_TEST       3

/* AT&T CMD routines defines (used in ac00cmts.c) */
#define ALB_ORIG           0x00  /* bit 0 = 0 */
#define ALB_ANSW           0x01  /* bit 0 = 1 */
#define ALB_SELFTEST       0x02  /* bit 1 = 1 */


/*   Values for st_idle.type, st_parse.type     */
#define AT_OFFLINE         0
#define AT_ONLINE          1
#define V25BIS             2
#define TEST               3
#define LL_ONLINE          4

#define AT_PSTN_PHONE      0x20
#define AT_WIRELESS_DATA   0x21
#define AT_WIRELESS_FAX    0x22
#define AT_WIRELESS_VOICE  0x23
#define AT_WIRELESS_PHONE  0x24

/*   Values for st_orig.type, st_answ.type, st_online.type    */
/* also st_hangup.type */
#define AT_PSTN                0x04
#define V25_PSTN               0x05
#define LEASED_LINE            0x06
#define FAX_ONLINE             0x07
#define AUTOSYNC_TYPE          0x08
#define VOICE                  0x09
#define VOICE_VIEW             0x0A

#define PSTN_PHONE             0x20
#define WIRELESS_DATA          0x21
#define WIRELESS_FAX_ONLINE    0x22
#define WIRELESS_AUTOSYNC      0x23
#define WIRELESS_VOICE         0x24
#define WIRELESS_VOICE_VIEW    0x25
#define WIRELESS_PHONE         0x26


/*   Values for st_hangup.state */
#define HANGUP_INIT                 0x00
#define HANGUP_LOGICAL_LINK_WAIT    0x01
#define HANGUP_PHYSICAL_INIT        0x02
#define HANGUP_LONG_SPACE_DISC_WAIT 0x03
#define HANGUP_PHYSICAL_LINK        0x04
#define HANGUP_PHYSICAL_WAIT        0x05
#define HANGUP_HOOK                 0x06
#define HANGUP_COMPLETE             0x07
#define HANGUP_FAX_INIT             0x10

/*   Time values used in st_hangup.state   */
#define LOGICAL_HANGUP_DELAY_TIME      300     /* 3 secs */
#define HANGUP_PHYS_TIME__NO_CARRIER   5       /* 50 msecs */
#define HANGUP_PHYS_TIME__CARRIER      1000    /* 10 secs: should be ample
                                                   for a good V.32 cleardown */


#define NUMBER_OF_EVENT_BUFFERS  20   /* Number of event buffers */

/*   Values for event->type   */
#define E_MSG          0
#define E_CHAR_RCVD    1
#define E_ORIG         2
#define E_ANSW         3
#define E_CONNECT      4
#define E_IDLE         5
#define E_RESET        6
#define E_SYS_STAT     7
#define E_RING         8
#define E_DP_CD_OFF    9
#define E_HANGUP       10
#define E_RETRAIN      11
#define E_TEST         12
#define E_PARSE        13
#define E_V24          14
#define E_FP           15
#define E_ESC_RXD      16

#define EVT_MAX        17  /* Maximum number of events */

/*   Generic Values for event->parm            */
#define UNUSED      0

/*   Values for E_IDLE 's event->parm          */
/* #define UNUSED              0x00 */
#define TEST_RESET             0x01
#define MODE_PSTN_MODEM        0x02
#define MODE_WIRELESS_MODEM    0x03
#define MODE_PSTN_PHONE        0x04
#define MODE_WIRELESS_PHONE    0x05
#define MODE_SLEEP             0x06

/*   Values for E_PARSE's event->parm          */
#define PARSE_VOICE            0
#define VOICE_ONLINE_CMD       1
#define VOICE_OFFLINE_CMD      2

/*   Values for E_ORIG's event->parm           */
#define DIAL_NUM0              1
#define NO_DIAL                2

/*   Values for E_CONNECT's event->parm         */
#define CONN_DATA              0
#define CONN_FAX               1
#define CONN_AUTOSYNC          2
#define CONN_VOICE             3
#define CONN_PHONE             4
#define CONN_VOICEVIEW         5


/*   Values for E_TEST's event->parm         */
#define LOCAL_TEST         0
#define RMT_TEST           1
#define TEST_RETURN        2

/*   Values for E_V24's event->parm         */
#define DTR_ON             1
#define DTR_OFF            2
#define RTS_ON             3
#define RTS_OFF            4
#define DTE_116_ON         5
#define DTE_116_OFF        6

/*   Values passed to output_info() for parameter TYPE   */
#define NUMERIC_FORM       0
#define VERBOSE_FORM       1
#define STORED_NUM         2
#define UNFORMATTED        3

/*     Values for the variables make_time and break_time */
#define US_BREAK_TIME      61
#define US_MAKE_TIME       39
#define UK_BREAK_TIME      67
#define UK_MAKE_TIME       33

/*     Values for the variable modifier_type   */
#define WAIT_TONE          0
#define PAUSE              1
#define QUIET_ANSWER       2
#define DIAL_DIGIT_WAIT    3
#define DIAL_FLASH_WAIT    4


/*   System Interface   */
/* The following are legal values for system status:   */
#define V42_HALTED         0
#define V42_CONNECTING     1
#define V42_IDLING         2
#define V42_MNP            3
#define V42_DISCONNECTING  4
#define V42_SPEED          5
#define V42_LAPM           6

#define CHAR_MASK          0x7f    /* Used to mask off the parity bit */
#define PARITY_MASK        0x80    /* Used to detect the type of parity used */

/*     Values for the variables acu_parity and at_parity      */
#define NO_PARITY          0
#define ODD                1
#define EVEN               2

/*     Values for the variable sr23.parity   */
#define SR23_EVEN          0
#define SR23_SPACE         1
#define SR23_ODD           2
#define SR23_MARK          3

/*     Values for the variables char_size and at_char_size     */
#define EIGHT_BITS         0
#define NINE_BITS          1
#define TEN_BITS           2
#define ELEVEN_BITS        3

/*     Values for the variables acu_data_bits and at_data_bits     */
#define SEVEN      0
#define EIGHT      1

/*     Values for the variables acu_stop_bits and at_stop_bits     */
#define ONE        0
#define TWO        1


/*   Number of result code languages */
#define OUTPUT_TABLE_SIZE      124
#define OUTPUT_TABLE_NUM_COL   1

/*     Values for the routine output_result()       */
#define OK                     0
#define CONNECT                1
#define RING                   2
#define NO_CARRIER             3
#define ERROR                  4
#define CONNECT_1200           5
#define NO_DIALTONE            6
#define BUSY                   7
#define NO_ANSWER              8
#define CONNECT_0600           9
#define CONNECT_2400           10
#define CONNECT_4800           11
#define CONNECT_9600           12
#define CONNECT_14400          13
#define CONNECT_19200          14
#define CONNECT_57600          18

#define CONNECT_1200_75        22
#define CONNECT_75_1200        23
#define CONNECT_7200           24
#define CONNECT_12000          25
#define CONNECT_38400          28
#define CONNECT_115200         31
/* The numeric equivalent is "+F4", so the value of the constant is irrelevant */
#define FCERROR                32

#define CARRIER_300            40
#define CARRIER_600            41
#define CARRIER_1200_75        44
#define CARRIER_75_1200        45

#define CARRIER_1200           46
#define CARRIER_2400           47
#define CARRIER_4800           48
#define CARRIER_7200           49
#define CARRIER_9600           50
#define CARRIER_12000          51
#define CARRIER_14400          52
#define CARRIER_16800          53
#define CARRIER_19200          54
#define CARRIER_21600          55
#define CARRIER_24000          56
#define CARRIER_26400          57
#define CARRIER_28800          58
#define CONNECT_16800          59
#define CONNECT_21600          61
#define CONNECT_24000          62
#define CONNECT_26400          63
#define CONNECT_28800          64
#define RING_BACK              65
#define COMPRESSION_MNP5       66
#define COMPRESSION_V42BIS     67
#define COMPRESSION_NONE       69
#define PROTOCOL_NONE          70
#define CONNECT_XXXX           71
#define CARRIER_XXXX           72
#define NONE                   73

#define PROTOCOL_LAP_M         77
#define PROTOCOL_LAP_M__ETC    78
#define PROTOCOL__MNP          80
#define PROTOCOL_MNP2          81
#define PROTOCOL_MNP3          82

#define CPON                   98      /* Call Prog cadence ON  */
#define CPOF                   99      /* Call Prog cadence OFF */
#define DRON                   100     /* Distinctive Ring  ON  */
#define DROF                   101     /* Distinctive Ring  OFF */
#define SHIELDED_RING          102     /* Voice mode Ring message */
#define COMPLEX_PACKET_START   103     /* Voice message start */
#define COMPLEX_PACKET_END     104     /* Voice message end   */

#define WLOCKED_OUT            110
#define WINTERCEPT             111
#define WREORDER               112
#define WDROPPED               113
#define WCALL_TIMEOUT          114
#define WROAM_LOCKOUT          115
#define WNO_SERVICE            116
#define WLOW_RSSI              117
#define WIN_USE                118
#define WBAD_NAM               119

#define CARRIER_31200          120
#define CARRIER_33600          121
#define CONNECT_31200          122
#define CONNECT_33600          123

/* Defines for custom messages. Use message_ptr to locate the text */
#define ACU_MESSAGE_PTR        254     /* Ptr to a string NOT requiring <CR><LF>'s*/
#define ACU_RESULT_PTR         255     /* Ptr to a string requiring <CR><LF>'s*/

#define PROTOCOL_MNP4          2
#define PROTOCOL_MNP10         4

#define ACTIVE_PROFILE         "ACTIVE PROFILE:"
#define STORED_PROFILE_0       "STORED PROFILE 0:"
#define STORED_PROFILE_1       "STORED PROFILE 1:"
#define STORED_PROFILE_2       "STORED PROFILE 2:"
#define TELEPHONE_NUMBERS      "TELEPHONE NUMBERS:"

/*     Values for retrieve_profile() TYPE parameter    */
#define POWERUP        0
#define COMMAND        1
#define AT_Z_COMMAND   2

/*   Return values for translate_retrain_baud();   */
#define RETRAIN_2400   0
#define RETRAIN_4800   1
#define RETRAIN_9600   2

/*   system_start() parameter values */
#define ORIGINATE      0
#define ANSWER         1
#define CONTINUE       2

/*   system_halt() parameter values   */
#define ACU_HALTED     0xFF
#define FALL_TO_SPEED  0

/*   Length of long space disconnect */
#define LONG_SPACE_SEND_TIME   255
#define LONG_SPACE_RCV_TIME    160

/*   modem_init_call_progress() parameter type */
#define ON_HOOK                0
#define OFF_HOOK_NOT_DIALED    1
#define OFF_HOOK_DIALED        2
#define ON_LINE                3
#define ON_HOOK_NO_RIDET       4

/*   modem_call_progress() return values   */
#define UNDETERMINED       0
#define DIALTONE           1
#define RINGON             2
#define BUSY_SIGNAL        3
#define SILENCE            4
#define RINGBACK           5
#define ANSWER_TONE        6
#define RINGOFF            7
#define TONE_DISCONNECT    8
#define LINE_SIGNAL        9
#define NO_ANSWER_TONE     10
#define CALLER_ID          11
#define V8_ANSWER_TONE     12

/*   modem_get_mode() return values    */
#define BELL_103           0
#define BELL_212           1
#define V21                2
#define V21_CHAN2          3
#define V23_ADX            4
#define V23_HDX            5
#define V22                6
#define V22BIS             7
#define V27_SHORT          8
#define V27_LONG           9
#define V27_TER            10
#define V29                11
#define V32                12
#define V32_TCM            13
#define V17                14
#define V33                15
#define V32BIS             16
#define V34                17
#define V34_ASYMETRIC      18

/*   Values for system_info()   */
#define SYSTEM_INFO_SIZE       13 /* Length of string returned from system_info() */

#define OFFSET_ASYNC_SYNC      0
#define OFFSET_COMPRESSION     1
#define OFFSET_BLOCK_SIZE      2
#define OFFSET_RETRY_COUNT     4
#define OFFSET_NUM_PACKETS     5
#define OFFSET_LINE_ERRORS     6
#define OFFSET_OPTIMIZATION    7
#define OFFSET_NEGOT_MNP10     8
#define OFFSET_LINE_BAUD       9
#define OFFSET_DATA_PRESENT    10

/*   Value for parameter passed to modem_line_select()
   Note: the other parameter LEASED is defined as 0 in the leased line code  */
#define PSTN       1

/*   Value for acu_cfg.mode   */
#define CFG_V22BIS 0
#define CFG_V32    1
#define CFG_V32BIS 2
#define CFG_V34    3
#define CFG_V34BIS 4

/*   Defines for update_modem_rate_seq()   */
#define BPS2400_ONLY       0x01
#define BPS4800_ONLY       0x02
#define BPS7200_ONLY       0x04
#define BPS9600_ONLY       0x08
#define BPS12000_ONLY      0x10
#define BPS14400_ONLY      0x20
#define BPS16800_ONLY      0x0040
#define BPS19200_ONLY      0x0080
#define BPS21600_ONLY      0x0100
#define BPS24000_ONLY      0x0200
#define BPS26400_ONLY      0x0400
#define BPS28800_ONLY      0x0800
#define BPS31200_ONLY      0x1000
#define BPS33600_ONLY      0x2000
#define BPS36000_ONLY      0x4000

#define BPS4800_MAX        0x03
#define BPS7200_MAX        0x07
#define BPS9600_MAX        0x0F
#define BPS12000_MAX       0x1F
#define BPS14400_MAX       0x3F
#define BPS2400_MAX        0x01
#define BPS16800_MAX       0x007F
#define BPS19200_MAX       0x00FF
#define BPS21600_MAX       0x01FF
#define BPS24000_MAX       0x03FF
#define BPS26400_MAX       0x07FF
#define BPS28800_MAX       0x0FFF
#define BPS31200_MAX       0x1FFF
#define BPS33600_MAX       0x3FFF
#define BPS36000_MAX       0x7FFF

#define CLEAR_BIT_2400     ~BPS2400_ONLY
#define CLEAR_BIT_4800     ~BPS4800_ONLY
#define CLEAR_BIT_7200     ~BPS7200_ONLY
#define CLEAR_BIT_12000    ~BPS12000_ONLY
#define CLEAR_BIT_14400    ~BPS14400_ONLY
#define CLEAR_BIT_16800    ~BPS16800_ONLY
#define CLEAR_BIT_19200    ~BPS19200_ONLY
#define CLEAR_BIT_21600    ~BPS21600_ONLY
#define CLEAR_BIT_24000    ~BPS24000_ONLY
#define CLEAR_BIT_26400    ~BPS26400_ONLY
#define CLEAR_BIT_28800    ~BPS28800_ONLY
#define CLEAR_BIT_31200    ~BPS31200_ONLY
#define CLEAR_BIT_33600    ~BPS33600_ONLY
#define CLEAR_BIT_36000    ~BPS36000_ONLY

#define ENABLE_4800_9600   0x0A

/* Defines for "get_system_rate_map() */
#define SYSTEM_RATE_MASK_1200_MAX   0x1
#define SYSTEM_RATE_MASK_2400_MAX   0x3
#define SYSTEM_RATE_MASK_4800_MAX   0x7
#define SYSTEM_RATE_MASK_7200_MAX   0xF
#define SYSTEM_RATE_MASK_9600_MAX   0x1F
#define SYSTEM_RATE_MASK_12000_MAX  0x3F

#define SYSTEM_RATE_BIT_1200        0x01
#define SYSTEM_RATE_BIT_2400        0x02

/*   Define for s110 */
#define ENABLE_V32         0
#define ENABLE_V32BIS      1
#define ENABLE_V32BIS_RRN  2
#define ENABLE_V34         3

/*   Defines for and_V() tables   */
#define ANDV_CURRENT_PRO_SIZE      86
#define ANDV_CURRENT_ADD_SIZE      59
#define ANDV_STORED_PRO_SIZE       80
#define ANDV_STORED_ADD_SIZE       54

/*   Define for delay_to_exec */
#define ACU_EXEC_DELAY         13

/*   Defines for connect_type       */
#define CONNECT_DATA_ONLY      0
#define CONNECT_FAX_ONLY       1
#define CONNECT_DATA_FAX       2
#define CONNECT_VOICE_ONLY     3

#define DATA_FDM               "+FDM"
#define DATA_ROCKWELL_VERBOSE  "DATA"
#define DATA_ROCKWELL_NUMERIC  "13"

/* defines for calling initialize_fax */
#define FAX_INIT_POWERUP       0
#define FAX_INIT_AND_F         1
#define FAX_INIT_FIP           2

/*   Define for link_negot */
#define CONNECT_HIGHEST_SPEED  0
#define CONNECT_1200BPS        1
#define CONNECT_4800BPS        2

/*   Define for system_force_rate()   */
#define FALLBACK               0
#define FALLFORWARD            1

/*      Defines for escape types */
#define GUARD_TIME_ESCAPE_ENABLED  1
#define GUARD_TIME_MASK            0x01

/* Defines for the parameter passed to initialize_voice() */
/* #define POWERUP                 0 */ /* Defined for fax (above) */
#define VOICE_INIT_VIP             1
#define VOICE_INIT_ATZ             2
#define VOICE_INIT_INACTIVITY      3
#define VOICE_INIT_CLS_8           4

/* Packet protocol APP ACK/NAK timeout */
#define PP_TIMEOUT     30

/*     Values for Modem Task V.8 interface w*/
/* for modem_v8_configure()... */
#define MODEM_V8_CONF_BUFFER_SIZE  3

#define MODEM_V8_CONF_FUNCTION     0
#define V8_DUPLEX_DATA             0
#define V8_TEXPHONE                1

#define MODEM_V8_CONF_LAPM         1
#define V8_NO_LAPM                 0
#define V8_LAPM                    1

#define MODEM_V8_CONF_CELLULAR     2
#define V8_NO_CELLULAR             0
#define V8_CELLULAR                1

/* for modem_v8_results()... */
#define MODEM_V8_RESULT_BUFFER_SIZE    3

#define MODEM_V8_RESULT_HANDSHAKE      0
#define V8_INCOMPLETE                  0
#define V8_COMPLETE                    1

#define MODEM_V8_RESULT_LAPM           1
/* See MODEM_V8_CONFIGURE() defines    */

#define MODEM_V8_RESULT_CELLULAR       2
/* See MODEM_V8_CONFIGURE() defines    */

/*     Defines for Modem Task V.34 interface  */
/* for modem_v34_info()... */
#define MODEM_V34_CONF_BUFFER_SIZE     7

#define MODEM_V34_CONF_TX_RATE         0
#define MODEM_V34_CONF_RX_RATE         1
/* Use standard BPS defines */

#define MODEM_V34_CONF_TX_SYMBOLS  2
#define MODEM_V34_CONF_RX_SYMBOLS  3
#define V34_SYMBOLS_2400           0x01
#define V34_SYMBOLS_2743           0x02
#define V34_SYMBOLS_2800           0x04
#define V34_SYMBOLS_3000           0x08
#define V34_SYMBOLS_3200           0x10
#define V34_SYMBOLS_3429           0x20

#define MODEM_V34_CONF_TX_CARRIER  4
#define MODEM_V34_CONF_RX_CARRIER  5
#define V34_CARRIER_1600           0
#define V34_CARRIER_1646           1
#define V34_CARRIER_1680           2
#define V34_CARRIER_1800           3
#define V34_CARRIER_1829           4
#define V34_CARRIER_1867           5
#define V34_CARRIER_1920           6
#define V34_CARRIER_1959           7
#define V34_CARRIER_2000           8

#define MODEM_V34_CONF_AUX_CHANNEL 6
/* Use ENABLED/DISALBED */


/* ACU SLEEP mode interface for acu_sleep() used for wireless
   PCCA I/F "AT+WS58=secs" */
#define S_WAKE_UP                0x00
#define S_DONT_SLEEP             0x01
#define S_GOTO_SLEEP             0x02
#define S_MODE_PSTN_MODEM        0x03  /* mode changes... */
#define S_MODE_PSTN_PHONE        0x04
#define S_MODE_WIRELESS_MODEM    0x05
#define S_MODE_WIRELESS_PHONE    0x06


/* Defines returned from "acu_wireless_link_type()" */
#define CELLULAR_PUMP__NONE        0x00
#define CELLULAR_PUMP__ETC         0x01
#define CELLULAR_PUMP__MNP10       0x02
#define CELLULAR_PUMP__TXCELL      0x03
#define LOCAL_WIRELESS_BIT         0x80
#define LOCAL_PSTN_BIT             0x80



/*   Structure Definitions   */
struct atB_struct
{
   ubyte group1;       /* contains values 0 - 9   */
   ubyte group2;       /* contains values 10 - 14   */
   ubyte group3;       /* contains values 15 - 19   */
   ubyte group4;       /* contains values 20 - 29   */
   ubyte group5;       /* contains values 30 - 39   */
   ubyte group6;       /* contains values 40 - 49   */
   ubyte group7;       /* contains values 50 - 59   */
   ubyte group8;       /* contains values 60 - 69   */
   ubyte group9;       /* contains values 70 - 74   */
   ubyte group10;      /* contains values 75 - 99   */
   ubyte group11;      /* contains values 80 - 84    */
   ubyte group12;      /* contains values 85 - 89    */
   ubyte group13;      /* contains values 90 - 94    */
   ubyte group14;      /* contains values 95 - 99    */
   ubyte group15;      /* contains values 100 - 104  */
   ubyte group16;      /* contains values 105 - 109  */
};

struct ACU_state
{
   ubyte type;        /* Type of ACU state   */
   ubyte state;       /* Value of internal state   */
};

struct stateTab_struct
{
   ubyte new_state;        /* Value of the new state of processing */
   void (*fnc_ptr)(void);  /* Action routine to be executed */
};

struct ACU_event
{
   struct ACU_event *next_addr;    /* Next event in que or null    */
   uword type;                     /* See events below!            */
   uword parm;                     /* Associated parameter         */
};

struct ACU_que
{
   struct ACU_event *fill_begin;   /* Pointer to start of que of use buffers   */
   struct ACU_event *fill_end;     /* Pointer to end of que of in use buffers  */
   struct ACU_event *empty_begin;  /* Pointer to start of que of empty buffers */
   struct ACU_event *empty_end;    /* Pointer to end of que of empty buffers   */
};

struct configure
{
   ubyte direct;       /* Indicates if modem has a direct mode or not */
   ubyte hw_echo;      /* Indicates if modem has hardware or software echo */
   ubyte mode;         /* Determines if modem is V.22bis (0) or V.32 (1) or
                           V.32bis or V.34 */
   ubyte fax_class;    /* Determines presence of Class 1,2,2.0,8 or 80 */
   ubyte v23;          /* Determines if V.23 is included   */
   ubyte extended_cmds;/* Determines if \O,\U,\Y,\Z are active */
};

/*   Bit mapped S-register defines
       Bit 0 is first bit defined.
       Structure entries are uwords.
*/
#ifdef __MSDOS__
struct SREG14
{
    uword reserved0:           1;      /* bit 0 */
    uword echo_cmd_flag:       1;      /* bit 1 */
    uword disable_result_code: 1;      /* bit 2 */
    uword verbose_form:        1;      /* bit 3 */
    uword dumb:                1;      /* bit 4 */
    uword pulse:               1;      /* bit 5 */
    uword quiet2:              1;      /* bit 6 */
    uword originate_flag:      1;      /* bit 7 */
};

struct SREG16
{
    uword alb:                 1;      /* bit 0 */
    uword reserved1:           1;      /* bit 1 */
    uword ldl:                 1;      /* bit 2 */
    uword rdl:                 1;      /* bit 3 */
    uword rdl_distant_request: 1;      /* bit 4 */
    uword rdl_self_test:       1;      /* bit 5 */
    uword alb_self_test:       1;      /* bit 6 */
    uword reserved7:           1;      /* bit 7 */
};

struct SREG21
{
    uword auxiliary_relay_ctrl:1;      /* bit 0 */
    uword reserved1:           1;      /* bit 1 */
    uword CTS_on:              1;      /* bit 2 */
    uword DTR_control:         2;      /* bits 4,3 */
    uword RLSD_reflects_CD:    1;      /* bit 5 */
    uword DSR_only_at_handshaking: 1;  /* bit 6 */
    uword long_space_discon:   1;      /* bit 7 */
};

struct SREG22
{
    uword speaker_vol:         2;      /* bits 1,0 */
    uword speaker_ctrl:        2;      /* bits 3,2 */
    uword dialtone_enable:     1;      /* bit 4    */
    uword busy_enable:         1;      /* bit 5    */
    uword enable_result5:      1;      /* bit 6    */
    uword uk_hook:             1;      /* bit 7    */
};

struct SREG23
{
    uword grant_rdl:           1;      /* bit 0      */
    uword dte_baud_rate:       3;      /* bits 1,2,3 */
    uword acu_parity:          2;      /* bit 4,5    */
    uword guard_tone:          2;      /* bit 6,7    */
};

struct SREG27
{
    uword comm_mode:           2;      /* bits 1,0 */
    uword leased_line:         1;      /* bit 2    */
    uword autosync:            1;      /* bit 3    */
    uword clock_source:        2;      /* bits 5,4 */
    uword BELL_mode:           1;      /* bit 6    */
    uword reserved:            1;      /* bit 7    */
};

struct SREG95
{
    uword connect:             1;      /* bit 0 */
    uword arq:                 1;      /* bit 1 */
    uword carrier:             1;      /* bit 2 */
    uword protocol:            1;      /* bit 3 */
    uword reserved_4:          1;      /* bit 4 */
    uword compression:         1;      /* bit 5 */
    uword mnp_level:           1;      /* bit 6 */
    uword reserved_7:          1;      /* bit 7 */
};

struct SREG114 /* V.34 only S-Reg */
{
    uword precoding:           1;      /* bit 0 */
    uword shaping:             1;      /* bit 1 */
    uword preemphasis:         1;      /* bit 2 */
    uword warping:             1;      /* bit 3 */
    uword tx_power_cntrl:      1;      /* bit 4 */
    uword high_carrier:        1;      /* bit 5 */
    uword low_carrier:         1;      /* bit 6 */
    uword reserved_7:          1;      /* bit 7 */
};

struct SREG116 /* V.34 only S-Reg */
{
    uword aux_channel:         1;      /* bit 0 */
    uword asym_rates:          1;      /* bit 1 */
    uword asym_symbols:        1;      /* bit 2 */
    uword half_duplex:         1;      /* bit 3 */
    uword reserved4:           1;      /* bit 4 */
    uword reserved5:           1;      /* bit 5 */
    uword reserved6:           1;      /* bit 6 */
    uword reserved7:           1;      /* bit 7 */
};
#endif

/*   Bit mapped S-register defines for based processors.
       Bit 7 is first bit defined.
       Structure entries are ubytes.
*/
#ifdef _MCC68K
struct SREG14
{
    ubyte originate_flag:      1;      /* bit 7 */
    ubyte quiet2:              1;      /* bit 6 */
    ubyte pulse:               1;      /* bit 5 */
    ubyte dumb:                1;      /* bit 4 */
    ubyte verbose_form:        1;      /* bit 3 */
    ubyte disable_result_code: 1;      /* bit 2 */
    ubyte echo_cmd_flag:       1;      /* bit 1 */
    ubyte reserved0:           1;      /* bit 0 */
};

struct SREG16
{
    ubyte reserved7:           1;      /* bit 7 */
    ubyte alb_self_test:       1;      /* bit 6 */
    ubyte rdl_self_test:       1;      /* bit 5 */
    ubyte rdl_distant_request: 1;      /* bit 4 */
    ubyte rdl:                 1;      /* bit 3 */
    ubyte ldl:                 1;      /* bit 2 */
    ubyte reserved1:           1;      /* bit 1 */
    ubyte alb:                 1;      /* bit 0 */
};

struct SREG21
{
    ubyte long_space_discon:       1;  /* bit 7    */
    ubyte DSR_only_at_handshaking: 1;  /* bit 6    */
    ubyte RLSD_reflects_CD:        1;  /* bit 5    */
    ubyte DTR_control:             2;  /* bits 4,3 */
    ubyte CTS_on:                  1;  /* bit 2    */
    ubyte reserved1:               1;  /* bit 1    */
    ubyte auxiliary_relay_ctrl:    1;  /* bit 0    */
};

struct SREG22
{
    ubyte uk_hook:             1;      /* bit 7    */
    ubyte enable_result5:      1;      /* bit 6    */
    ubyte busy_enable:         1;      /* bit 5    */
    ubyte dialtone_enable:     1;      /* bit 4    */
    ubyte speaker_ctrl:        2;      /* bits 3,2 */
    ubyte speaker_vol:         2;      /* bits 1,0 */
};

struct SREG23
{
    ubyte guard_tone:          2;      /* bit 6,7    */
    ubyte acu_parity:          2;      /* bit 4,5    */
    ubyte dte_baud_rate:       3;      /* bits 1,2,3 */
    ubyte grant_rdl:           1;      /* bit 0      */
};

struct SREG27
{
    ubyte reserved:            1;      /* bit 7    */
    ubyte BELL_mode:           1;      /* bit 6    */
    ubyte clock_source:        2;      /* bits 5,4 */
    ubyte autosync:            1;      /* bit 3    */
    ubyte leased_line:         1;      /* bit 2    */
    ubyte comm_mode:           2;      /* bits 1,0 */
};

struct SREG95
{
    ubyte reserved_7:          1;      /* bit 7 */
    ubyte mnp_level:           1;      /* bit 6 */
    ubyte compression:         1;      /* bit 5 */
    ubyte reserved_4:          1;      /* bit 4 */
    ubyte protocol:            1;      /* bit 3 */
    ubyte carrier:             1;      /* bit 2 */
    ubyte arq:                 1;      /* bit 1 */
    ubyte connect:             1;      /* bit 0 */
};

struct SREG114 /* V.34 only S-Reg */
{
    ubyte reserved_7:          1;      /* bit 7 */
    ubyte low_carrier:         1;      /* bit 6 */
    ubyte high_carrier:        1;      /* bit 5 */
    ubyte tx_power_cntrl:      1;      /* bit 4 */
    ubyte warping:             1;      /* bit 3 */
    ubyte preemphasis:         1;      /* bit 2 */
    ubyte shaping:             1;      /* bit 1 */
    ubyte precoding:           1;      /* bit 0 */
};

struct SREG116 /* V.34 only S-Reg */
{
    ubyte reserved7:           1;      /* bit 7 */
    ubyte reserved6:           1;      /* bit 6 */
    ubyte reserved5:           1;      /* bit 5 */
    ubyte reserved4:           1;      /* bit 4 */
    ubyte half_duplex:         1;      /* bit 3 */
    ubyte asym_symbols:        1;      /* bit 2 */
    ubyte asym_rates:          1;      /* bit 1 */
    ubyte aux_channel:         1;      /* bit 0 */
};
#endif

/*   Bit mapped S-register defines for based processors.
       Bit 7 is first bit defined.
       Structure entries are ubytes.
*/
#ifdef __SH3
struct SREG14
{
    ubyte originate_flag:      1;      /* bit 7 */
    ubyte quiet2:              1;      /* bit 6 */
    ubyte pulse:               1;      /* bit 5 */
    ubyte dumb:                1;      /* bit 4 */
    ubyte verbose_form:        1;      /* bit 3 */
    ubyte disable_result_code: 1;      /* bit 2 */
    ubyte echo_cmd_flag:       1;      /* bit 1 */
    ubyte reserved0:           1;      /* bit 0 */
};

struct SREG16
{
    ubyte reserved7:           1;      /* bit 7 */
    ubyte alb_self_test:       1;      /* bit 6 */
    ubyte rdl_self_test:       1;      /* bit 5 */
    ubyte rdl_distant_request: 1;      /* bit 4 */
    ubyte rdl:                 1;      /* bit 3 */
    ubyte ldl:                 1;      /* bit 2 */
    ubyte reserved1:           1;      /* bit 1 */
    ubyte alb:                 1;      /* bit 0 */
};

struct SREG21
{
    ubyte long_space_discon:       1;  /* bit 7    */
    ubyte DSR_only_at_handshaking: 1;  /* bit 6    */
    ubyte RLSD_reflects_CD:        1;  /* bit 5    */
    ubyte DTR_control:             2;  /* bits 4,3 */
    ubyte CTS_on:                  1;  /* bit 2    */
    ubyte reserved1:               1;  /* bit 1    */
    ubyte auxiliary_relay_ctrl:    1;  /* bit 0    */
};

struct SREG22
{
    ubyte uk_hook:             1;      /* bit 7    */
    ubyte enable_result5:      1;      /* bit 6    */
    ubyte busy_enable:         1;      /* bit 5    */
    ubyte dialtone_enable:     1;      /* bit 4    */
    ubyte speaker_ctrl:        2;      /* bits 3,2 */
    ubyte speaker_vol:         2;      /* bits 1,0 */
};

struct SREG23
{
    ubyte guard_tone:          2;      /* bit 6,7    */
    ubyte acu_parity:          2;      /* bit 4,5    */
    ubyte dte_baud_rate:       3;      /* bits 1,2,3 */
    ubyte grant_rdl:           1;      /* bit 0      */
};

struct SREG27
{
    ubyte reserved:            1;      /* bit 7    */
    ubyte BELL_mode:           1;      /* bit 6    */
    ubyte clock_source:        2;      /* bits 5,4 */
    ubyte autosync:            1;      /* bit 3    */
    ubyte leased_line:         1;      /* bit 2    */
    ubyte comm_mode:           2;      /* bits 1,0 */
};

struct SREG95
{
    ubyte reserved_7:          1;      /* bit 7 */
    ubyte mnp_level:           1;      /* bit 6 */
    ubyte compression:         1;      /* bit 5 */
    ubyte reserved_4:          1;      /* bit 4 */
    ubyte protocol:            1;      /* bit 3 */
    ubyte carrier:             1;      /* bit 2 */
    ubyte arq:                 1;      /* bit 1 */
    ubyte connect:             1;      /* bit 0 */
};

struct SREG114 /* V.34 only S-Reg */
{
    ubyte reserved_7:          1;      /* bit 7 */
    ubyte low_carrier:         1;      /* bit 6 */
    ubyte high_carrier:        1;      /* bit 5 */
    ubyte tx_power_cntrl:      1;      /* bit 4 */
    ubyte warping:             1;      /* bit 3 */
    ubyte preemphasis:         1;      /* bit 2 */
    ubyte shaping:             1;      /* bit 1 */
    ubyte precoding:           1;      /* bit 0 */
};

struct SREG116 /* V.34 only S-Reg */
{
    ubyte reserved7:           1;      /* bit 7 */
    ubyte reserved6:           1;      /* bit 6 */
    ubyte reserved5:           1;      /* bit 5 */
    ubyte reserved4:           1;      /* bit 4 */
    ubyte half_duplex:         1;      /* bit 3 */
    ubyte asym_symbols:        1;      /* bit 2 */
    ubyte asym_rates:          1;      /* bit 1 */
    ubyte aux_channel:         1;      /* bit 0 */
};
#endif

#ifdef __IAR_SYSTEMS_ICC
/* bit mapped s-registers for IAR H8 compiler are in normal bit order
   and are defined as ubytes. */

struct SREG14
{
    ubyte reserved0:           1;      /* bit 0 */
    ubyte echo_cmd_flag:       1;      /* bit 1 */
    ubyte disable_result_code: 1;      /* bit 2 */
    ubyte verbose_form:        1;      /* bit 3 */
    ubyte dumb:                1;      /* bit 4 */
    ubyte pulse:               1;      /* bit 5 */
    ubyte quiet2:              1;      /* bit 6 */
    ubyte originate_flag:      1;      /* bit 7 */
};

struct SREG16
{
    ubyte alb:                 1;      /* bit 0 */
    ubyte reserved1:           1;      /* bit 1 */
    ubyte ldl:                 1;      /* bit 2 */
    ubyte rdl:                 1;      /* bit 3 */
    ubyte rdl_distant_request: 1;      /* bit 4 */
    ubyte rdl_self_test:       1;      /* bit 5 */
    ubyte alb_self_test:       1;      /* bit 6 */
    ubyte reserved7:           1;      /* bit 7 */
};

struct SREG21
{
    ubyte auxiliary_relay_ctrl:1;      /* bit 0    */
    ubyte reserved1:           1;      /* bit 1    */
    ubyte CTS_on:              1;      /* bit 2    */
    ubyte DTR_control:         2;      /* bits 4,3 */
    ubyte RLSD_reflects_CD:    1;      /* bit 5    */
    ubyte DSR_only_at_handshaking:1;   /* bit 6    */
    ubyte long_space_discon:   1;      /* bit 7    */
};

struct SREG22
{
    ubyte speaker_vol:         2;      /* bits 1,0 */
    ubyte speaker_ctrl:        2;      /* bits 3,2 */
    ubyte dialtone_enable:     1;      /* bit 4    */
    ubyte busy_enable:         1;      /* bit 5    */
    ubyte enable_result5:      1;      /* bit 6    */
    ubyte uk_hook:             1;      /* bit 7    */
};

struct SREG23
{
    ubyte grant_rdl:           1;      /* bit 0      */
    ubyte dte_baud_rate:       3;      /* bits 1,2,3 */
    ubyte acu_parity:          2;      /* bit 4,5    */
    ubyte guard_tone:          2;      /* bit 6,7    */
};

struct SREG27
{
    ubyte comm_mode:           2;      /* bits 1,0 */
    ubyte leased_line:         1;      /* bit 2    */
    ubyte autosync:            1;      /* bit 3    */
    ubyte clock_source:        2;      /* bits 5,4 */
    ubyte BELL_mode:           1;      /* bit 6    */
    ubyte reserved:            1;      /* bit 7    */
};

struct SREG95
{
    ubyte connect:             1;      /* bit 0 */
    ubyte arq:                 1;      /* bit 1 */
    ubyte carrier:             1;      /* bit 2 */
    ubyte protocol:            1;      /* bit 3 */
    ubyte reserved_4:          1;      /* bit 4 */
    ubyte compression:         1;      /* bit 5 */
    ubyte mnp_level:           1;      /* bit 6 */
    ubyte reserved_7:          1;      /* bit 7 */
};

struct SREG114 /* V.34 only S-Reg */
{
    ubyte precoding:           1;      /* bit 0 */
    ubyte shaping:             1;      /* bit 1 */
    ubyte preemphasis:         1;      /* bit 2 */
    ubyte warping:             1;      /* bit 3 */
    ubyte tx_power_cntrl:      1;      /* bit 4 */
    ubyte high_carrier:        1;      /* bit 5 */
    ubyte low_carrier:         1;      /* bit 6 */
    ubyte reserved_7:          1;      /* bit 7 */
};

struct SREG116 /* V.34 only S-Reg */
{
    ubyte aux_channel:         1;      /* bit 0 */
    ubyte asym_rates:          1;      /* bit 1 */
    ubyte asym_symbols:        1;      /* bit 2 */
    ubyte half_duplex:         1;      /* bit 3 */
    ubyte reserved4:           1;      /* bit 4 */
    ubyte reserved5:           1;      /* bit 5 */
    ubyte reserved6:           1;      /* bit 6 */
    ubyte reserved7:           1;      /* bit 7 */
};
#endif

#ifdef __arm
struct SREG14
{
    int reserved0:           1;      /* bit 0 */
    int echo_cmd_flag:       1;      /* bit 1 */
    int disable_result_code: 1;      /* bit 2 */
    int verbose_form:        1;      /* bit 3 */
    int dumb:                1;      /* bit 4 */
    int pulse:               1;      /* bit 5 */
    int quiet2:              1;      /* bit 6 */
    int originate_flag:      1;      /* bit 7 */
};

struct SREG16
{
    int alb:                 1;      /* bit 0 */
    int reserved1:           1;      /* bit 1 */
    int ldl:                 1;      /* bit 2 */
    int rdl:                 1;      /* bit 3 */
    int rdl_distant_request: 1;      /* bit 4 */
    int rdl_self_test:       1;      /* bit 5 */
    int alb_self_test:       1;      /* bit 6 */
    int reserved7:           1;      /* bit 7 */
};

struct SREG21
{
    int auxiliary_relay_ctrl:1;      /* bit 0 */
    int reserved1:           1;      /* bit 1 */
    int CTS_on:              1;      /* bit 2 */
    int DTR_control:         2;      /* bits 4,3 */
    int RLSD_reflects_CD:    1;      /* bit 5 */
    int DSR_only_at_handshaking: 1;  /* bit 6 */
    int long_space_discon:   1;      /* bit 7 */
};

struct SREG22
{
    int speaker_vol:         2;      /* bits 1,0 */
    int speaker_ctrl:        2;      /* bits 3,2 */
    int dialtone_enable:     1;      /* bit 4    */
    int busy_enable:         1;      /* bit 5    */
    int enable_result5:      1;      /* bit 6    */
    int uk_hook:             1;      /* bit 7    */
};

struct SREG23
{
    int grant_rdl:           1;      /* bit 0      */
    int dte_baud_rate:       3;      /* bits 1,2,3 */
    int acu_parity:          2;      /* bit 4,5    */
    int guard_tone:          2;      /* bit 6,7    */
};

struct SREG27
{
    int comm_mode:           2;      /* bits 1,0 */
    int leased_line:         1;      /* bit 2    */
    int autosync:            1;      /* bit 3    */
    int clock_source:        2;      /* bits 5,4 */
    int BELL_mode:           1;      /* bit 6    */
    int reserved:            1;      /* bit 7    */
};

struct SREG95
{
    int connect:             1;      /* bit 0 */
    int arq:                 1;      /* bit 1 */
    int carrier:             1;      /* bit 2 */
    int protocol:            1;      /* bit 3 */
    int reserved_4:          1;      /* bit 4 */
    int compression:         1;      /* bit 5 */
    int mnp_level:           1;      /* bit 6 */
    int reserved_7:          1;      /* bit 7 */
};

struct SREG114  /* V.34 only S-Reg */
{
    int precoding:           1;      /* bit 0 */
    int shaping:             1;      /* bit 1 */
    int preemphasis:         1;      /* bit 2 */
    int warping:             1;      /* bit 3 */
    int tx_power_cntrl:      1;      /* bit 4 */
    int high_carrier:        1;      /* bit 5 */
    int low_carrier:         1;      /* bit 6 */
    int reserved_7:          1;      /* bit 7 */
};

struct SREG116 /* V.34 only S-Reg */
{
    int aux_channel:         1;      /* bit 0 */
    int asym_rates:          1;      /* bit 1 */
    int asym_symbols:        1;      /* bit 2 */
    int half_duplex:         1;      /* bit 3 */
    int reserved4:           1;      /* bit 4 */
    int reserved5:           1;      /* bit 5 */
    int reserved6:           1;      /* bit 6 */
    int reserved7:           1;      /* bit 7 */
};
#endif
