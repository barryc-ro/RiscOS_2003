;****************************************************************************
;
;	Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
;  All Rights Reserved by:
;	    RSA
;	    7701 Six Forks Road
;	    Suite 120
;	    Raleigh, NC  27615
;	    (919) 846-7171
;
;
;	This document contains material confidential to RSA its contents must
;	not be revealed, used or disclosed to anyone or company with out
;	written permission by RSA.  The information contained herein is solely
;	for the use of RSA.
;
;	File:		DTEINC.ASM
;
;	Version:	1.07
;
;	Function:	This file contains the DTE equate and macro definitions.
;
;	Product:	68302 IO code
;
;	Platform:	68302 processor
;
;	History:	dteinc.asm ver1.00, v1.01
;
;		Created: 08/05/91
;			 01/22/92
;			 08/19/92
;
;		---------------------------------------------------------
;		-			Modifications			-
;		---------------------------------------------------------
;
;	Author & Date:	RSA
;	Description:
;	Reason:
;
;*****************************************************************************

; Valid bits for "MODEM_TO_DTE_FLOW_CNTL"
XON_XOFF_BIT            EQU     0       ; bit for S/W flow control
RTS_CTS_BIT             EQU     1       ; bit for H/W flow control
TRANS_BIT               EQU     2       ; bit for Transparent flow control

NUM_RX_BDS              EQU     8       ; Number of receive BDs
NUM_TX_BDS              EQU     8       ; Number of transmit BDs

DTE_RX_BUFF_SIZE        EQU     192     ; Set rx buffer size to 192 characters
AS_DTE_RX_BUFF_SIZE     EQU     3       ; Set AutoSync Rx buffer to 3 chars

DTE_TX_BUFF_SIZE        EQU     64      ; Set tx buffer size to 64 characters
TOTAL_RX_BUFFER_SIZE    EQU     1536    ; Total size of the receive buffer (192 * 8)
TOTAL_TX_BUFFER_SIZE    EQU     512     ; Total size of the receive buffer (192 * 8)
DTE_XOFF_BUFFER_LIMIT   EQU     768     ; DTE XOFF buffer limit
DTE_XON_BUFFER_LIMIT    EQU     1152    ; DTE XON buffer limit
BREAK_TIME:             EQU     22      ; BREAK 220 MSEC
TX_BREAK_STATE_IDLE:    EQU     0       ; no <break> in progress
TX_BREAK_STATE_PSN:     EQU     1       ; waiting for correct psn in data stream
TX_BREAK_STATE_START:   EQU     2       ; start sending <break>
TX_BREAK_STATE_TIMING:  EQU     3       ; wait for <break> to end

DTE_NEAR_FULL:          EQU     4       ; when to exert flow control
DTE_NEAR_EMPTY:         EQU     6       ; when to remove flow control

VOICE_DTE_NEAR_EMPTY:   EQU     192     ; bytes to remove flow control
VOICE_DTE_NEAR_FULL:    EQU     320     ; bytes to exert flow control


;	Macro definitions

;********************************************************************
;
;	Macro:	_DI_DTE
;
;	Author: RSA
;
;	Creation Date: 8/5/91
;
;	Description: This macro will disable DTE SCC interrupts.
;
;	Input Parameters: NONE
;
;	Output Parameters: NONE
;
;	Global Variables Changed: SR, IMR
;
;	Users: NONE
;
;	-------------------------
;	-     Modifications	-
;	-------------------------
;
;	Author & Date: RSA
;	Description:
;	Reason:
;
;*******************************************************************/
_DI_DTE MACRO
	NOLIST
	ORI.W	#700H,SR
	BCLR.B	#DTE_INT_BIT,IMR	; Mask off DTE SCC interrupts
	ANDI.W	#0F3FFH,SR
	LIST
	ENDM


;********************************************************************
;
;	Macro:	_EI_DTE
;
;	Author: RSA
;
;	Creation Date: 8/5/91
;
;	Description: This routine will enable DTE SCC interrupts.
;
;	Input Parameters: NONE
;
;	Output Parameters: NONE
;
;	Global Variables Changed: SR, IMR
;
;	Users: NONE
;
;	-------------------------
;	-     Modifications	-
;	-------------------------
;
;	Author & Date: RSA
;	Description:
;	Reason:
;
;*******************************************************************/
_EI_DTE MACRO
	NOLIST
	ORI.W	#700H,SR
	BSET.B	#DTE_INT_BIT,IMR	; Mask on DTE SCC interrupts
	ANDI.W	#0F3FFH,SR
	LIST
	ENDM


;********************************************************************
;
;	Macro: _DI_DTE_TX
;
;	Author: RSA
;
;	Creation Date: 8/5/91
;
;	Description: This macro will disable DTE SCC interrupts.
;
;	Input Parameters: NONE
;
;	Output Parameters: NONE
;
;	Global Variables Changed: SR, DTE_SCCM, IMR
;
;	Users: dte_to_clear, dte_to_free, dte_to_char, dte_to_break,
;	       dte_to_block_free, dte_to_block_pointer, dte_to_block_update
;
;	-------------------------
;	-     Modifications	-
;	-------------------------
;
;	Author & Date: RSA
;	Description:
;	Reason:
;
;*******************************************************************/
_DI_DTE_TX  MACRO
	NOLIST
	ORI.W	#700H,SR
;	BCLR.B	#1,DTE_SCCM		; Mask off Tx interrupts
	BCLR.B	#DTE_INT_BIT,IMR	; Mask off DTE SCC interrupts
	ANDI.W	#0F3FFH,SR
	LIST
	ENDM


;********************************************************************
;
;	Macro: _EI_DTE_TX
;
;	Author: RSA
;
;	Creation Date: 8/5/92
;
;	Description: This macro will enable DTE SCC interrupts.
;
;	Input Parameters: NONE
;
;	Output Parameters: NONE
;
;	Global Variables Changed: SR, DTE_SCCM, IMR
;
;	Users: dte_to_clear, dte_to_free, dte_to_char, dte_to_break,
;	       dte_to_block_free, dte_to_block_pointer, dte_to_block_update
;
;	-------------------------
;	-     Modifications	-
;	-------------------------
;
;	Author & Date: RSA
;	Description:
;	Reason:
;
;*******************************************************************/
_EI_DTE_TX  MACRO
	NOLIST
	ORI.W	#700H,SR
;	BSET.B	#1,DTE_SCCM		; Mask on Tx interrupts
	BSET.B	#DTE_INT_BIT,IMR	; Mask on DTE SCC interrupts
	ANDI.W	#0F3FFH,SR
	LIST
	ENDM


;********************************************************************
;
;	Macro: _DI_DTE_RX
;
;	Author: RSA
;
;	Creation Date: 8/5/92
;
;	Description: This macro will disable DTE SCC interrupts.
;
;	Input Parameters: NONE
;
;	Output Parameters: NONE
;
;	Global Variables Changed: SR, DTE_SCCM, IMR
;
;	Users: dte_from_clear, dte_from_num, dte_from_char,
;	       dte_from_block_num, dte_from_block_pointer, dte_from_block_update
;
;	-------------------------
;	-     Modifications	-
;	-------------------------
;
;	Author & Date: RSA
;	Description:
;	Reason:
;
;*******************************************************************/
_DI_DTE_RX  MACRO
	NOLIST
	ORI.W	#700H,SR
;	BCLR.B	#0,DTE_SCCM		; Mask off Rx interrupts
	BCLR.B	#DTE_INT_BIT,IMR	; Mask off DTE SCC interrupts
	ANDI.W	#0F3FFH,SR
	LIST
	ENDM


;********************************************************************
;
;	Macro: _EI_DTE_RX
;
;	Author: RSA
;
;	Creation Date: 8/5/92
;
;	Description: This macro will enable DTE SCC interrupts.
;
;	Input Parameters: NONE
;
;	Output Parameters: NONE
;
;	Global Variables Changed: SR, DTE_SCCM, IMR
;
;	Users: dte_from_clear, dte_from_num, dte_from_char,
;	       dte_from_block_num, dte_from_block_pointer, dte_from_block_update
;
;	-------------------------
;	-     Modifications	-
;	-------------------------
;
;	Author & Date: RSA
;	Description:
;	Reason:
;
;*******************************************************************/
_EI_DTE_RX  MACRO
	NOLIST
	ORI.W	#700H,SR
;	BSET.B	#0,DTE_SCCM		; Mask on Rx interrupts
	BSET.B	#DTE_INT_BIT,IMR	; Mask on DTE SCC interrupts
	ANDI.W	#0F3FFH,SR
	LIST
	ENDM



;********************************************************************
;
;	Macro: _PUSH
;
;	Author: RSA
;
;	Creation Date: 8/5/92
;
;	Description: Push something on the stack.
;
;	Input Parameters: param: What is to be pushed on the stack.
;
;	Output Parameters: NONE
;
;	Global Variables Changed: SP
;
;	Users: dte_to_char, dte_start_tx_break, dte_init, SAVE_BUFFER_DATA,
;	       SET_IO_PARITY, dte_reconfigure, dte_rx_int, dte_tx_resume
;
;	-------------------------
;	-     Modifications	-
;	-------------------------
;
;	Author & Date: RSA
;	Description:
;	Reason:
;
;*******************************************************************/
_PUSH	MACRO	param
	NOLIST
	MOVE.L	param,-(SP)
	LIST
	ENDM


;********************************************************************
;
;	Macro: _POP
;
;	Author: RSA
;
;	Creation Date: 8/5/92
;
;	Description: Pop something off the stack.
;
;	Input Parameters: None
;
;	Output Parameters: param: What was popped off the stack.
;
;	Global Variables Changed: SP
;
;	Users: dte_to_char, dte_start_tx_break, dte_init, SAVE_BUFFER_DATA,
;	       SET_IO_PARITY, dte_reconfigure, dte_rx_int, dte_tx_resume
;
;	-------------------------
;	-     Modifications	-
;	-------------------------
;
;	Author & Date: RSA
;	Description:
;	Reason:
;
;*******************************************************************/
_POP	MACRO	param
	NOLIST
	MOVE.L	(SP)+,param
	LIST
	ENDM


;********************************************************************
;
;	Macro: _STORE_AND_INC
;
;	Author: RSA
;
;	Creation Date: 8/5/92
;
;	Description: Store a byte of data and store incremented pointer.
;
;	Input Parameters:  SEE GLOBALS
;
;	Output Parameters: SEE GLOBALS
;
;	Global Variables Changed:
;
;	buf_add = Buffer address (LONG)
;	ptr =	pointer to next empty location in the buffer (WORD)
;	data1 = Data register used for offset
;	data2 = Data register holding the data byte
;	add = temporary register
;
;	Users: dte_to_char (dtc_buffer_char)
;
;	-------------------------
;	-     Modifications	-
;	-------------------------
;
;	Author & Date: RSA
;	Description:
;	Reason:
;
;*******************************************************************/
_STORE_AND_INC	MACRO	ptr,buf_add,data1,data2,add
	CLR.L	data1
	MOVE.W	ptr,data1
	MOVEA.L buf_add,add
	MOVE.B	data2,(add,data1)
	ADDQ.W	#1,data1
	MOVE.W	data1,ptr
	ENDM


;********************************************************************
;
;	Macro: _GET_AND_INC
;
;	Author: RSA
;
;	Creation Date: 8/5/92
;
;	Description: Get a byte of data and store incremented pointer.
;
;	Input Parameters:  SEE GLOBALS
;
;	Output Parameters: SEE GLOBALS
;
;	Global Variables Changed:
;
;	buf_add = Buffer address (LONG)
;	ptr =	pointer to next empty location in the buffer (WORD)
;	data1 = Data register used for offset
;	data2 = Data register holding the data byte
;	add = temporary register
;
;	Users: dte_from_char
;
;	-------------------------
;	-     Modifications	-
;	-------------------------
;
;	Author & Date: RSA
;	Description:
;	Reason:
;
;*******************************************************************/
_GET_AND_INC	MACRO	ptr,buf_add,data1,data2,add
	CLR.L	data1
	MOVE.W	ptr,data1
	MOVEA.L buf_add,add
	MOVE.B	(add,data1),data2
	ADDQ.W	#1,data1
	MOVE.W	data1,ptr
	ENDM


;********************************************************************
;
;	Macro: _INC_RX_PTR
;
;	Author: RSA
;
;	Creation Date: 8/5/92
;
;	Description:  Increments pointer to the receive buffer descriptor table.
;
;	Input Parameters:  NONE
;
;	Output Parameters: NONE
;
;	Global Variables Changed:  A0 - Contains the pointer to be incremented.
;
;	Users: dte_from_clear, dte_from_char, dte_rx_int, dte_from_block_update
;
;	-------------------------
;	-     Modifications	-
;	-------------------------
;
;	Author & Date: RSA
;	Description:
;	Reason:
;
;*******************************************************************/
_INC_RX_PTR  MACRO
	LOCAL	PTR_1,PTR_2

	BTST.B	#05,(A0)		; See if wrap bit is set
	BNE	PTR_1			; If set then reset pointer to top of table

	ADDQ.L	#8,A0			; If not set then inc to next buffer
	JMP	PTR_2			; Jump to see if next buffer is ready
PTR_1:
	MOVE.L	#DTE_RBD_TABLE,A0	; Point to top of table
PTR_2:
	ENDM


;********************************************************************
;
;	Macro: _INC_TX_PTR
;
;	Author: RSA
;
;	Creation Date: 8/5/92
;
;	Description:  Increments pointer to the transmit buffer descriptor table.
;
;	Input Parameters:  NONE
;
;	Output Parameters: NONE
;
;	Global Variables Changed:  A0 - Contains the pointer to be incremented.
;
;	Users: dte_to_clear (internal_dte_to_clear), dte_to_free,
;	       dte_to_char (dtc_send_buffer), dte_to_break, dte_tx_int,
;	       dte_to_block_update
;
;	-------------------------
;	-     Modifications	-
;	-------------------------
;
;	Author & Date: RSA
;	Description:
;	Reason:
;
;*******************************************************************/
_INC_TX_PTR  MACRO
	LOCAL	PTR_1,PTR_2

	BTST.B	#05,(A0)		; See if wrap bit is set
	BNE	PTR_1			; If set then reset pointer to top of table

	ADDQ.L	#8,A0			; If not set then inc to next buffer
	JMP	PTR_2			; Jump to see if next buffer is ready
PTR_1:
	MOVE.L	#DTE_TBD_TABLE,A0	; Point to top of table
PTR_2:
	ENDM


