/******************************************************************************
/
/     Copyright, 1988 - 1995. All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Óuite 120
/        Rálåigh, ÎC  27615
/        (919) 846-7171
/
/     Ôhis document contains máterial confidential to RSA.
/     Its contents must not be revealed, used or disclosed to
/     anyone or company with out written permission bù RSA.
/     The information contained herein is solely for the use
/     of RSA.
/
/     File:     MT00HW10.C
/
/     Version:  1.00
/
/     Function: Hardware-specific Supporting Library Routiîeó
/
/     Producô:  Modeí Task Driver for Meòlin Chip Sets
/
/     History:
/
/     Created:  3/01/94
¯
/    ------------------------------------------------------
/    -           Modifications                            -
/     ------------------------------------------------------
/
/     Author & Date:     RSA
/     Description:
/     Reason:
/
*******************************************************************************/

#include "mod_def.h" /* added by ramn on 2/9/96 */
#include  "SYS_DEF.H"
#include  "cp_dsp.h"
#include  "MT_CODEF.H"
#include  "MT_HWDEF.H"
#include  "MT_COPRO.H"
#include  "MT_HWPRO.H"
#include  "MT_COEXT.H"
#include  "mt_macro.h"
#include "tracemac.h"
#if 0
#include "resp_cod.h" /* ramn 1/12/96 */

/* RJM040396 */
/* Removed hard coded PATH, fix in MAKEFILE using '-I' compile flag */
#include "voc_icd.h"
#endif

void set_hook_relay(ubyte);
void line_select(ubyte);
void set_dp_RTS(ubyte);
void set_sync_clocks(ubyte, ubyte);
void set_AA1_relay(ubyte);
void set_td_relay(ubyte);
void set_shrt_relay(ubyte);
void config_serial_direct(ubyte);
void init_default_DAA(void);
ubyte check_for_ring1(void);
void set_volume(ubyte);
void set_speaker(ubyte);
void mt_driver_error_handler(ubyte);
ubyte first_trans;

#define VERBOSE_FORM  1

extern void output_info(ubyte *msg, ubyte type);
ubyte	display_msg_one_time = 0;
extern ubyte *d_to_a(ubyte num);
extern void dspdrv_reset_dsp (void);

/* local variables */
ubyte spkr_volume_level = 0;
ubyte spkr_on = FALSE;

/* RJM040396 */
/* VCV Support */
void set_voice_relay(ubyte);


/*******************************************************************************
/
/                   "capability_descript"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will return a string which contains the
/                   modem capabilities.
/
/    Input Parameters:   None
/
/    Output Parameter:
/
/    Global Variables Changed:     Nïne
/
/    Users: (routines that used this)    modem_capability_description
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Aõthor & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
ubyte *capability_descript(void)

{
   return ( (ubyte *) MODEM_CAPABILITY_DESCRIPT);
}

/* RJM040396 */
/* Moved to MT_VOICE.C as GPIO control for VCV */
#if 0
/*******************************************************************************
/
/                     "set_hook_relay"
/
/    Author:   ÒSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the offhook relay to tèe given state.
/
/    Input Parameters:   state = ON or OFF
/                              This refers to the oæfhook condition,
/                              not the onhook condition.
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)  modem_config_dtmf_dial
/                          modem_hook_relay
/                          hang_up_modem
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_hook_relay(ubyte state)

{
	/* set hook Control byte of packet, then send packet */
	#if 0
	command_packet[4] = state;
	send_pkt_to_dsp(PACKET_MODEM_HOOK_RELAY, 2, ACK_NEEDED);
	#endif
}
#endif

/*******************************************************************************
/
/                   line_select
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   Sets the modem line to reflect the new state.
/
/    Input Parameters:
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void line_select(ubyte state)
{
    /*   to suppress Archimedes compiler warnings   */
    ubyte temp;
    temp = state;
}

/*******************************************************************************
/
/                   set_dp_RTS
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine should set the data pump RTS to follow
/                   DTE RTS. (for direct mode only)
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_dp_RTS(ubyte state)
{
    /* to suppress Archimedes compiler warnings */
    ubyte temp;
    temp = state;
}


/*******************************************************************************
/
/                   set_sync_clocks
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set up the sync clocks.
/
/    Input Parameters:
/         ubyte baud -
/                   0 - BPS_75_600
/              1 - BPS_75_1200
/              2 - BPS_300
/              3 - BPS_1200
/              4 - BPS_2400
/              5 - BPS_4800
/              6 - BPS_7200
/              7 - BPS_9600
/              8 - BPS_12000
/              9 - BPS_14400
/                 10 - BPS_16800
/                 11 - BPS_19200
/                 12 - BPS_38400
/                 13 - BPS_57600
/                 14 - BPS_600
/
/      ubyte clock_source
/               0=TXC from modem
/               1=TXC from DTE, pin 24
/               2=TXC from RXC
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_sync_clocks(ubyte speed, ubyte clock_source)
{
   /*   not used with Merlin   */
}


/*******************************************************************************
/
/                   "set_td_relay"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the td relay to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_td_relay
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_td_relay(ubyte state)
{
    /* to suppress Archimedes compiler warnings */
    ubyte temp;
    temp = state;
}


/*******************************************************************************
/
/                   "set_shrt_relay"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the td relay to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_shrt_relay
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_shrt_relay(ubyte state)
{
    /* to suppress Archimedes compiler warnings */
    ubyte temp;
    temp = state;
}


/*******************************************************************************
/
/                   "config_serial_direct"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the modem line for normal or
/                       direct data connections.
/
/    Input Parameters:   state = 0 for normal
/                                 1 for direct
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)  modem_serial_direct
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void config_serial_direct(ubyte state)

{
	 /*   keep track of whether or not in direct mode   */
	 mt_direct_mode = state;
	 /*   shave to 12/16 stop bit for pseudo-direct mode   */
	 set_data_sync_register(state);
}


/*******************************************************************************
/
/                   "check_for_ring1"
/
/    Author:   RSA
/
/    Creation Date: 8/01/94
/
/    Description:    Checks Port B10 pin for presence of ring
/
/    Input Parameters:       None
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/

ubyte check_for_ring1(void)

{
/* stubbed, isn't used, will remove once detect ring works jeb 3/7/95 */
return TRUE;

}



/*******************************************************************************
/
/    Procedure:     set_volume
/
/    Author:   RSA
/
/    Creation Date: 03/08/94
/
/    Description:   This routine will set the speaker volume
/
/    Input Parameters: None
/
/    Output Parameter: None
/
/    Global Variables Changed: None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/
*******************************************************************************/
void set_volume(ubyte state)

{
	ubyte afe_choice,first_low_byte,first_high_byte; /* ramn */
	ubyte second_low_byte,second_high_byte;

   spkr_volume_level = state;
   if (spkr_on)
   {
	   /* set volume byte of packet and send */

	/*
	current_command [0] = PACKET_MODEM_SPEAKER;
	current_command [1] = 0x00;
	current_command [2] = PACKET_MODEM_SPEAKER_LEN;
	current_command [3] = 0x00;
	current_command [4] = state;
	while (error_occured = cp_dsp());
	while (error_occured = dsp_acknowledge_packet());
	*/

	LOAD_MODEM_SPEAKER
	ack_or_response = ACK;
	send_pkt_to_dsp();

/* the speaker packet is implemented by dsp so work around not needed */
#if 0

/* introduced by ramn on 2/12/96 */
/* this is just a work around till the dsp turns speaker on */
	afe_choice = 0x00;
	first_low_byte = 0xdc;
	second_low_byte = 0x00;
	first_high_byte = 0x33;		/* speaker vol = med
											speaker_on = both Tx and Rx
											recv_gain = +12db */
	switch(state)
	{
		case 0:
		case 1:
			second_high_byte = 0x34;  /* low volume */
		break;
		case 2:
				second_high_byte = 0x38;	/* med volume */
		break;

		case 3:
				second_high_byte = 0x3c;	/* high volume */
		break;

		default:
				second_high_byte = 0x38;
		break;
	}
	LOAD_PACKET_MODEM_VCE_PGC_INIT
	ack_or_response = FALSE;
	send_pkt_to_dsp();
/* till here by ramn */

#endif /* 3/1/96 */

   }
}


/*******************************************************************************
/
/    Procedure:     set_speaker
/
/    Author:   RSA
/
/    Creation Date: 03/08/94
/
/    Description:   This routine will switch the speaker on or off
/
/    Input Parameters: None
/
/    Output Parameter: None
/
/    Global Variables Changed: None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/
*******************************************************************************/
void set_speaker(ubyte state)

{
   ubyte level;

	ubyte afe_choice,first_low_byte,first_high_byte; /* ramn */
	ubyte second_low_byte,second_high_byte;

   if (state)
   {
	 spkr_on = TRUE;
	 state = spkr_volume_level; /* KJB */
   }
   else
   {
	 spkr_on = FALSE;
	 state = 0; /* KJB */
   }

	/*
	current_command [0] = PACKET_MODEM_SPEAKER;
	current_command [1] = 0x00;
	current_command [2] = PACKET_MODEM_SPEAKER_LEN;
	current_command [3] = 0x00;
	current_command [4] = level;
	while (error_occured = cp_dsp());
	while (error_occured = dsp_acknowledge_packet());
	*/

	LOAD_MODEM_SPEAKER
	ack_or_response = ACK;
	send_pkt_to_dsp();

   /* set volume byte of packet and send */


/* the speaker packet is implemented by dsp so work around not needed */
#if 0
/* introduced by ramn on 2/12/96 */
/* this is just a work around till the dsp turns speaker on */
	afe_choice = 0x00;

	if(state == ON)
	{
		first_low_byte = 0xdc;	/* spk vol = med,spk_on = both Tx and Rx
											recv_gain = unchanged */
		second_low_byte = 0x00;	 /* should be 0 */
		first_high_byte = 0x03;
	}
	else
	{
		first_low_byte = 0xdc; /* turn mic off and leave spk setting as is */
		second_low_byte = 0x00;
		first_high_byte = 0x03;
	}


	switch(level)
	{
		case 0:
		case 1:
			second_high_byte = 0x34;  /* low volume */
		break;

		case 2:
				second_high_byte = 0x38;	/* med volume */
		break;

		case 3:
				second_high_byte = 0x3c;	/* high volume */
		break;

		default:
				second_high_byte = 0x38;
		break;
	}
	LOAD_PACKET_MODEM_VCE_PGC_INIT
	ack_or_response = FALSE;
	send_pkt_to_dsp();
/* till here by ramn */
#endif /* ramn 3/1/96 */

}


/*******************************************************************************
/
/                  mt_driver_error_handler
/
/    Author:   RSA
/
/    Creation Date: 02/18/94
/
/    Description:   This is the modem task driver critical error handler
/
/    Input Parameters:
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)   Many places
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
*******************************************************************************/
#define UNFORMATTED 	3
void mt_driver_error_handler(ubyte mt_error_code)
{

	ubyte *string;

	if (display_msg_one_time == 0)
	{
		display_msg_one_time = 1;
		string = (ubyte*) DSP_FAILED;
		output_info(string,VERBOSE_FORM);
		output_info(d_to_a(current_command[0]),UNFORMATTED);
		output_send_cr_lf();

	}
#if defined HOST_BASED

       /* If there is a problem, Musket watchdog
          should kick in to reboot. Thus only DOS
          platform needs this.
       */
       dspdrv_reset_dsp();
       /* exit(0); */

#endif
}

/******************************************************************************
/
/    Procedure: set_data_sync_register
/
/    Author: RSA
/
/    Creation Date:  03/01/95
/
/    Description: This is used with Pseudo Direct mode.  sets either
/                    full stop bit for normal or 12/16 stop bit for direct.
/
/    Input Parameters:
/
/    Output Parameters: none
/
/    Global Variables Changed: none
/
/    Users: config_serial_direct
/
/    -------------------------
/    -     Modifications -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
******************************************************************************/
void set_data_sync_register (ubyte state)
{
  ;
}
/*******************************************************************************
/
/                   "set_AA1_relay"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the Auxiliary relay (A/A1leads)
/                   to the given state.
/
/    Input Parameters:   state = ON
/                                   OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_AA1_relay
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_AA1_relay(ubyte state)
{
    /* to suppress Archimedes compiler warnings */
    ubyte temp;
    temp = state;
}




