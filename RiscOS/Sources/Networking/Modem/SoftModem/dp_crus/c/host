/******************************************************************************
/
/     Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA.
/     Its contents must not be revealed, used or disclosed to
/     anyone or company with out written permission by RSA.
/     The information contained herein is solely for the use
/     of RSA.
/
/     File:           host.c
/
/     Version:
/
/     Function:   ISA / PC Host-specific modem task functions.
/
/     Product:        Musket
/
/     History:
/
/     Created:        10/25/95
/     ------------------------------------------------------
/     -               Modifications             -
/     ------------------------------------------------------
/
/     Author & Date:
/     Description:
/     Reason:
/
*******************************************************************************/

#include "sys_def.h"
#include "cp_dsp.h"
#include "mt_codef.h"
#include "mt_hwdef.h"
#include "mt_copro.h"
#include "mt_hwpro.h"
#include "mt_coext.h"
#include "dsp_drv.h"

#include "mt_macro.h"
#include "tracemac.h"

#include "mt_voice.h"

/* Function prototypes */
ubyte *rom_components(void);
ubyte *capability_descript(void);
ubyte read_dipswitch(void);
ubyte calc_eeprom_checksum(void);
ubyte calc_rom_checksum(void);
void set_hs_led(ubyte);
void set_dte_cts(ubyte);
void set_voice_led(ubyte state);
void set_mr_led(ubyte);
void set_cd_led(ubyte);
void set_aa_led(ubyte);
void set_fax_led(ubyte);
void set_ec_led(ubyte);
void set_ri_led(ubyte);
void set_dc_led(ubyte);
void set_oh_led(ubyte);
void set_tr_led(ubyte);
void set_v32_led(ubyte);
void set_cts_led(ubyte);
void set_v23_led(ubyte);
void set_b2l_led(ubyte);
void set_v21_led(ubyte);
void set_v22_led(ubyte);
void set_v22bis_led(ubyte);
void set_dte_112(ubyte);
void set_dte_117(ubyte);
void set_dte_test(ubyte);
void reset_watchdog(void);
void ram_init(void);
uword get_host_address (uword cp_port);
uword translate_io_address (ubyte addr);
extern void (*CRAM_CallBack)();

void gpio_hook_relay (ubyte state);
void set_dsvd_relay (ubyte state);
void set_cid_relay (ubyte state);
void set_voice_relay (ubyte state);
ubyte check_phone_relay (void);
void set_gpio_reg (uword *gpio_register, ubyte value);
ubyte get_gpio_reg (uword *gpio_register);

/* External function prototypes */
extern void cmd_packet_callback(ubyte id);
extern void io_set_leds (unsigned long value);
#ifndef __riscos
extern unsigned char inp (uword port);
extern void outp (uword port, ubyte data);
#endif
extern void init_ports(void);

/* Global variables */
ubyte CommPort=2;
volatile ubyte dsp_done;
ubyte last_call_progress=RING_OFF;

/* Externally allocated variables */
extern ubyte Cdata[MAX_PACKET_SIZE];
extern ubyte dsp_response_data[15];

/*******************************************************************************
/
/                   modem_product_code
/
/    Author:   RSA
/
/    Creation Date: 03/01/94
/
/    Description:   This routine will return a string which contains the
/                        modem product code.
/
/    Input Parameters:   None
/
/    Output Parameter:   *string
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  at_I
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
ubyte *product_code(void)
{
    return ((ubyte *) MODEM_PRODUCT_CODE);
}


/*******************************************************************************
/
/                    modem_rom_components
/
/    Author:   RSA
/
/    Creation Date: 03/01/94
/
/    Description:   This routine will return a string which contains the
/                   modem part number, revision level, and hardware
/                   location of all ROM components.
/
/    Input Parameters:   None
/
/    Output Parameter:   *string
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  get_rom_components
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
ubyte *rom_components(void)
{
    return ( (ubyte *) MODEM_ROM_COMPONENTS);
}


/*******************************************************************************
/
/                   "read_dipswitch"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will read the dipswitches
/
/    Input Parameters:   None
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_read_dipswitch
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
ubyte read_dipswitch(void)
{
    return 0;
}


/*******************************************************************************
/
/     Routine:     "calc_eeprom_checksum"
/
/     Author:      RSA
/
/     Creation Date:       12/20/92
/
/     Description:  This routine will calculate and return modem EEPROM
/                         pseudo checksum as defined in the ACU code.
/
/     Input Parameters:  none
/
/     Output Parameter:  checksum value
/
/     Global Variables Changed:    None
/
/     Users: (routines that used this)  modem_eeprom_checksum
/
/     *****************************************************************
/     *               Modifications               *
/     *****************************************************************
/
/     Author & Date:
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte calc_eeprom_checksum(void)
{
    /*  If empty eeprom, return a bogus value so the ACU will
        update with factory defaults */
    return(0x55);
}


/*******************************************************************************
/
/                   "calc_rom_checksum"
/
/    Author:   RSA
/
/    Creation Date: 02/07/91
/
/    Description:   This routine will calculate and return the modem ROM
/              checksum.
/
/    Input Parameters:   None
/
/    Output Parameter:   rom_cs value
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_rom_checksum
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason
/
*******************************************************************************/
ubyte calc_rom_checksum(void)
{
    return (0x55);
}


/*******************************************************************************
/
/                   "init_default_DAA"
/
/    Author:   RSA
/
/    Creation Date: 7/01/94
/
/    Description:
/
/    Input Parameters:
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)  mt_init
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void init_default_DAA(void)
{
  /* Initialize the Cutlass External GPIO pins to OFF state. */
  dp_voice_set_gpio (GPIO_INIT_VALUE, GPIO_WRITE_OR_BYTE,
                     GPIO_BANK_EXTERNAL_GPO);
}


/*******************************************************************************
/
/                   "set_hs_led"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   Sets the hs led to the desired state (on or off).
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_hs_led
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_voice_led(ubyte state)
{
   if (state)
     bb_LED_long |= VOICE_LED_POS;
   else
     bb_LED_long &= ~VOICE_LED_POS;

   io_set_leds (bb_LED_long);
}


void set_hs_led(ubyte state)
{
   if (state)
     bb_LED_long |= HS_LED_POS;
   else
     bb_LED_long &= ~HS_LED_POS;

   io_set_leds (bb_LED_long);
}


/*******************************************************************************
/
/                   "set_mr_led"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the MR led to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_mr_led
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_mr_led(ubyte state)
{
   if (state)
     bb_LED_long |= MR_LED_POS;
   else
     bb_LED_long &= ~MR_LED_POS;

   io_set_leds (bb_LED_long);
}


/*******************************************************************************
/
/                   "set_cd_led"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the cd led to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_cd_led
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_cd_led(ubyte state)
{
   if (state)
     bb_LED_long |= CD_LED_POS;
   else
     bb_LED_long &= ~CD_LED_POS;

   io_set_leds (bb_LED_long);
}


/*******************************************************************************
/
/                   "set_aa_led"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the aa led to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_aa_led
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_aa_led(ubyte state)
{
   if (state)
     bb_LED_long |= AA_LED_POS;
   else
     bb_LED_long &= ~AA_LED_POS;

   io_set_leds (bb_LED_long);
}


/*******************************************************************************
/
/                   "set_fax_led"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the FAX led to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  start_fax_conection, fax_hangup
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_fax_led(ubyte state)
{
   if (state)
     bb_LED_long |= FAX_LED_POS;
   else
     bb_LED_long &= ~FAX_LED_POS;

   io_set_leds (bb_LED_long);
}


/*******************************************************************************
/
/                   "set_ec_led"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the ec led to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_ec_led
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_ec_led(ubyte state)
{
   if (state)
     bb_LED_long |= EC_LED_POS;
   else
     bb_LED_long &= ~EC_LED_POS;

   io_set_leds (bb_LED_long);
}


/*******************************************************************************
/
/                   "set_ri_led"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the ri led to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_ri_led
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_ri_led(ubyte state)
{
   if (state)
     bb_LED_long |= RI_LED_POS;
   else
     bb_LED_long &= ~RI_LED_POS;

   io_set_leds (bb_LED_long);
}


/*******************************************************************************
/
/                   "set_dc_led"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the dc led to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_dc_led
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_dc_led(ubyte state)
{
   if (state)
     bb_LED_long |= DC_LED_POS;
   else
     bb_LED_long &= ~DC_LED_POS;

   io_set_leds (bb_LED_long);
}

/*******************************************************************************
/
/                   "set_oh_led"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the oh led to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_oh_led
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_oh_led(ubyte state)

{
   if (state)
     bb_LED_long |= OH_LED_POS;
   else
     bb_LED_long &= ~OH_LED_POS;

   io_set_leds (bb_LED_long);
}


/*******************************************************************************
/
/                   "set_tr_led"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the tr led to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_tr_led
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_tr_led(ubyte state)
{
   if (state)
     bb_LED_long |= TR_LED_POS;
   else
     bb_LED_long &= ~TR_LED_POS;

   io_set_leds (bb_LED_long);
}


/*******************************************************************************
/
/                   "set_v32_led"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the v32 led to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_v32_led
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_v32_led(ubyte state)
{
   if (state)
     bb_LED_long |= V32_LED_POS;
   else
     bb_LED_long &= ~V32_LED_POS;

   io_set_leds (bb_LED_long);
}


/*******************************************************************************
/
/                   set_cts_led
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the cts led to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_cts_led(ubyte state)
{
   if (state)
     bb_LED_long |= CTS_LED_POS;
   else
     bb_LED_long &= ~CTS_LED_POS;

   io_set_leds (bb_LED_long);
}


/*******************************************************************************
/
/                   set_v23_led
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the v23 led to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_v23_led(ubyte state)
{
   if (state)
     bb_LED_long |= V23_LED_POS;
   else
     bb_LED_long &= ~V23_LED_POS;

   io_set_leds (bb_LED_long);
}


/*******************************************************************************
/
/                   set_b2l_led
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the b21 led to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_b2l_led(ubyte state)
{
   if (state)
     bb_LED_long |= B21_LED_POS;
   else
     bb_LED_long &= ~B21_LED_POS;

   io_set_leds (bb_LED_long);
}


/*******************************************************************************
/
/                   set_v21_led
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the v21 led to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_v21_led(ubyte state)
{
   if (state)
     bb_LED_long |= V21_LED_POS;
   else
     bb_LED_long &= ~V21_LED_POS;

   io_set_leds (bb_LED_long);
}


/*******************************************************************************
/
/                   set_v22_led
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the v22 led to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_v22_led(ubyte state)
{
   if (state)
     bb_LED_long |= V22_LED_POS;
   else
     bb_LED_long &= ~V22_LED_POS;

   io_set_leds (bb_LED_long);
}


/*******************************************************************************
/
/                   set_v22bis_led
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the v22bis led to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_v22bis_led(ubyte state)
{
   if (state)
     bb_LED_long |= V22BIS_LED_POS;
   else
     bb_LED_long &= ~V22BIS_LED_POS;

   io_set_leds (bb_LED_long);
}


/*******************************************************************************
/
/                   set_dte_112
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the dte 112 to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_dte_112(ubyte state)
{
    /* Suppress compiler warnings */
    ubyte temp;
    temp = state;
}


/*******************************************************************************
/
/                   set_dte_117
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the dte 117 to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_dte_117(ubyte state)
{
    /* Suppress compiler warnings */
    ubyte temp;
    temp = state;
}


/*******************************************************************************
/
/                   set_dte_test
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the dte circuit 142 to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_dte_test(ubyte state)
{
    /* Suppress compiler warnings */
    ubyte temp;
    temp = state;
}


/*******************************************************************************
/
/                   "reset_watchdog"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine is called to reset the watchdog timer
/                   so that it will not expire
/
/    Input Parameters:   None
/
/    Output Parameter:   0 = Fail
/                        1 = Pass
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_watch_dog
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void reset_watchdog(void)
{
    /* Stubbed */
}


/*******************************************************************************
/
/                   "ram_init"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:
/
/    Input Parameters:
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void ram_init(void)
{
    /* Stubbed */
}


/******************************************************************************
/
/    Procedure: set_echo
/
/    Author: RSA
/
/    Creation Date: 03/01/95
/
/    Description: This routine will turn echo on or off depending on the
/              parameter passed in.
/
/    Input Parameters:  SP + 4 - state of ECHO
/                   0 - Turn echo off
/                   1 - Turn echo on
/
/    Output Parameters: none
/
/    Global Variables Changed: none
/
/    Users: modem_serial_echo
/
/    -------------------------
/    -     Modifications -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
******************************************************************************/
void set_echo(ubyte status)
{
  /* Stubbed */
}


/******************************************************************************
/
/    Procedure: rom_test
/
/    Author: RSA
/
/    Creation Date: 03/01/95
/
/    Description: This routine will calculate the checksum for the entire ROM
/
/    Input Parameters: none
/
/    Output Parameters: 1 if checksum is okay
/                       0 if checksum error occured
/
/    Global Variables Changed: none
/
/    Users: modem_rom_test
/
/    -------------------------
/    -     Modifications -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
******************************************************************************/
ubyte rom_test(void)
{
    return (1);
}


/******************************************************************************
/
/    Procedure: ram_test
/
/    Author: RSA
/
/    Creation Date: 03/01/95
/
/    Description: This routine will test the modem's ram
/
/    Input Parameters: none
/
/    Output Parameters:  = 0 = Fail
/                        = 1 = Pass
/
/    Global Variables Changed: none
/
/    Users: modem_ram_test
/
/    -------------------------
/    -     Modifications -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
******************************************************************************/
ubyte ram_test(void)
{
    return (1);
}


#ifndef __riscos
#define COM1    0x3f8
#define COM2    0x2f8
#define COM3    0x3e8
#define COM4    0x2e8

uword comm_ports[4] = {COM1, COM2, COM3, COM4};
#endif

/*--------------------------- TranslateIOaddr ------------------*/
/* This procedure will map the IO registers to the appropiate   */
/* values based on the hardware used                            */
/*--------------------------------------------------------------*/

uword translate_io_address (ubyte address)
{
#ifdef __riscos
  return address;
#else
  uword regIO=0;
  ubyte *ptr;

  /* While this may seem confusing, the Cutlass IO mapping is relatively simple.
     The address bits A3-A9 are remapped to A10-A14.
     A3-A9 is the comport address being used (com1 = 3f8, com2 = 2f8, etc..). */
  ptr   = (ubyte *)&regIO + 1; /* access upper byte of regIO */
  *ptr  = address;             /* copy to upper byte */
  regIO >>=1;                  /* shift right one bit - A15 is a don't care,
                   A10-A14 are now correct */

  /* Now OR in A0-A2, ANDing off A3-A9. Then OR in real comport. */
  regIO |= address;
  regIO &= ~0x3f8;
  regIO |= comm_ports[CommPort];

  return (regIO);
#endif
}


#ifndef __riscos
uword get_host_address (uword cp_port)
{
   uword low3bitsAddr, high5bitsAddr;
   uword rc;

   low3bitsAddr = cp_port & 0x7;
   high5bitsAddr = ((cp_port & 0xf8)) << 7;

   switch (CommPort)
   {
       case 0:
           rc = (high5bitsAddr | COM1 | low3bitsAddr);
           break;
       case 1:
           rc = (high5bitsAddr | COM2 | low3bitsAddr);
           break;
       case 2:
           rc = (high5bitsAddr | COM3 | low3bitsAddr);
           break;
       case 3:
           rc = (high5bitsAddr | COM4 | low3bitsAddr);
           break;
       default:
           rc = 0;
           break;
   }

   return (rc);
}
#endif


/*
|---------------------------------------------------------------------------
|
| dspdrv_SetCramISRCallBack() - Setup the cram interrupt callback routine
|
|---------------------------------------------------------------------------
| PURPOSE:
|        This routine will set the Comram ISR callback vector
|
*/
void dspdrv_SetCramISRCallBack(void (*callback)() )
{
  CRAM_CallBack = callback;
}


/*
|---------------------------------------------------------------------------
|
| dspdrv_WriteCram() - writes data into CommRam
|
|---------------------------------------------------------------------------
| PURPOSE:
|        Places a packet into the Tx CommRam.
|
*/
void dspdrv_WriteCram(uword addr, ubyte *data, uword len)
{
   while(len--)
   {
       set_register(addr, *data);
       addr++;
       data++;
   }
}


/*
|---------------------------------------------------------------------------
|
| dspdrv_ReadCram() - read data from CommRam
|
|---------------------------------------------------------------------------
| PURPOSE:
|        Gets a packet from Rx CommRam.
|
*/
void dspdrv_ReadCram(uword addr, ubyte *data, uword len)
{
   while(len--)
   {
       *data = get_register(addr);
       addr++;
       data++;
   }
}


// Wait a short time for the Merlin or Cutlass
void my_delay(uword delay_len)
{
  uword i;

  for (i=0; i<=delay_len; i++)
    ;
}



/* RJM040396 */
/* Moved from MT00CUST.C for stand-alone Cutlass support */
/*******************************************************************************
/
/                                  call_progress
/
/       Author:         RSA
/
/       Creation Date:  03/01/94
/
/       Description:    This routine will return the progress of the calling
/                       sequence.  USA only
/
/       Input Parameters:       None
/
/       Output Parameter:       0 - undetermined
/                               1 - dial tone
/                               2 - ring on
/                               3 - busy
/                               4 - silence
/                               5 - ring back
/                               6 - answer tone
/                               7 - ring off
/
/       Global Variables Changed:
/
/       Users: (routines that used this)  modem_call_progress
/
/       *****************************************************************
/       *                         Modifications                         *
/       *****************************************************************
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
ubyte call_progress(void)
{
   ubyte temp;

   temp = read_dsp_call_progress_reg();

   if ((temp == RING_OFF) && (last_call_progress != RING_ON))
      temp = UNDETERMINED;
   last_call_progress = temp;
   return(temp);
}

#if 0
/*******************************************************************************
/
/   Routine: store_hex_byte_to_a (vce_store_hex_byte_to_a)
/
/   Author: RSA
/
/   Creation Date: 10/15/92
/
/   Description: This routine will convert a hex byte to ASCII string.
/
/   Input Parameters: ubyte num - Hex byte to be converted
/                     ubyte **ptr- Pointer to ASCII string
/
/   Global Variables Changed: None.
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void store_hex_byte_to_a (ubyte num, ubyte **ptr)
{
    ubyte temp_char;

    temp_char = (num >> 4) & 0x0F;
    *(*ptr)++ = temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A';
    temp_char = num & 0x0F;
    *(*ptr)++ = temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A';
}


void send_string (char *str)
{
  ubyte str_len, i;

  str_len = string_len ((ubyte *) str);

  for (i=0; i < str_len; i++)
    send_char ((ubyte) str[i]);
}
#endif


#define NUMERIC_FORM             0
#define NUM_VERSION_INFO_BYTES  10

void modem_display_dsp_version (void)
{
  ubyte version_info[10], i;
  ubyte *ptr, display_buffer[80];

  /* Set up display buffer */
  display_buffer[0] = '\0';
  ptr = &display_buffer[0];

  /* Send version info packet to Cutlass DSP */
  current_command[0] = PACKET_MODEM_GET_VERSION;
  current_command[1] = 0;         /* Filler */
  current_command[2] = 0;         /* Packet length */
  current_command[3] = 0;         /* Filler */

  dsp_cp_packet = PACKET_DP_VERSION_INFO;
  ack_or_response = RESPONSE;
  send_pkt_to_dsp();

  /* Copy version information to local storage (for easy debugging) */
  for (i=0; i < NUM_VERSION_INFO_BYTES; i++)
    version_info[i] = Cdata[i + 4];

  send_string ("\r\nCutlass DSP Software Version (hex) : \0");

  /* Display version info bytes with separating spaces and hex prefixes */
  for (i=0; i < NUM_VERSION_INFO_BYTES; i++)
  {
    store_hex_byte_to_a (version_info[i], (ubyte **) &ptr);
    *ptr++ = ' ';
  }

  *(ptr) = '\0';
  output_info (display_buffer, NUMERIC_FORM);         /* Send string to DTE */
}





