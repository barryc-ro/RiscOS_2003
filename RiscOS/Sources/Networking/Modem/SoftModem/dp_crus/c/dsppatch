/****************************************************************************
/
/   Copyright 1988, 1989, 1990, 1991, 1992, 1993, 1994.  All Rights
/   Reserved by:
/   RSA
/   7701 Six Forks Road
/   Suite 120
/   Raleigh, NC  27615
/   (919) 846-7171
/
/   This document contains material confidential to RSA. Its contents
/   must not be revealed, used or disclosed to anyone or company without
/   written permission by RSA. The information contained herein is solely
/   for the use of RSA.
/
/   File:                dsppatch.c
/
/   Module Version:
/
/   Function:
/
/   Product:
/
/   -----------------------------------------------------------
/   -                       Modifications                     -
/   -----------------------------------------------------------
/
/   Author & Date:     RSA
/   Description:
/   Reason:
/
****************************************************************************/

#include "sys_def.h"
#include "mt_pro.h"
#include "cp_dsp.h"
#include "dsp_drv.h"
#include "mt_macro.h"
#include "mt_codef.h"
#include "mt_coext.h"
#include "dsppatch.h"

/* Need to extern the various patch table addresses here */
extern const uword data_patch[];
extern const uword common_patch[];
extern const uword training_patch[];

/* Other externs */
extern void send_pkt_to_dsp(void);

/* Local functions */
void init_downld(void);
void dnld_patch(const uword tbl[]);
void write_to_dsp( uword, uword );

/****************************************************************************
 *
 *   Routine:           dsppatch()
 *
 *   Author:            RSA
 *
 *   Creation Data:     12/8/1996
 *
 *   Description:
 *
 *   Input Parameters:  ubyte type
 *
 *   Output Parameters: Nothing
 *
 *   Global Variables Changed: None
 *
 *   Users:
 *
 *   -----------------------------------------------------------
 *   -                       Modifications                     -
 *   -----------------------------------------------------------
 *
 *   Author & Date:  RSA
 *   Description:
 *   Reason:
 *
 ****************************************************************************/

void dsppatch (ubyte type)
{
   /*
       Since the number of DSP patches is growing, it is necessary to
       dynamically download specific patches only when needed. For
       example, there is a V.29 9600 patch required in Voice View (VCV)
       mode which isn't needed in any other modes. Since the DSP patch
       memory is a precious resource, the patch is only downloaded in
       VCV mode.
   */

   ubyte cam_type; /* 0 = Training, 1 = data */

#if DSP_CODE_INTERNAL
   init_downld();

   switch(type)
   {
       case PATCH_INIT_POWER_ON:
#if !defined HOST_BASED

 		     spkr_phn_dnl = 0;
		     dnld_spkr_phn_code(pwr_on_patch);	/* ramn 4/22/96 */
		     set_7_wait_states();		/* this sets 7 wait states for musket-cp interf*/

#endif
            /* Fall thru on purpose */

       case COMMON_PATCH:
            dnld_patch(common_patch);
            dnld_patch(training_patch);

            cam_type = 0;
            LOAD_DSP_CAMJAM
            ack_or_response = ACK;
            send_pkt_to_dsp();

#if defined HOST_BASED
#if defined A_CHIP

            /* Slow the DSP clock down to <= 44.24MHz */
            set_register(0xFB, 0x30);
#else

            /* Slow the DSP clock down to <= 35.0MHz */
            set_register(0xFB, 0x26);

#endif
#endif
            break;

       case RETRAIN_PATCH:
            cam_type = 0;
            LOAD_DSP_CAMJAM
            ack_or_response = ACK;
            send_pkt_to_dsp();

            dnld_patch(training_patch);
            break;

       case DATA_PATCH:
            cam_type = 1;
            dnld_patch(data_patch);

            LOAD_DSP_CAMJAM
            ack_or_response = ACK;
            send_pkt_to_dsp();
            break;

       case RENEGOTIATING_PATCH:
            cam_type = 0;
            LOAD_DSP_CAMJAM
            ack_or_response = ACK;
            send_pkt_to_dsp();

            dnld_patch(training_patch);
            break;

       default:
            break;
   }

#if DSP_CODE_INTERNAL
    /* Disable DSP internal MCON */
    write_to_dsp( 0x17e4, 0x7C00 );
#else
    /* Disable DSP external MCON */
    write_to_dsp( 0x17e4, 0x7F00 );
#endif

#endif
}

/****************************************************************************
 *
 *   Routine:           init_downld()
 *
 *   Author:            RSA
 *
 *   Creation Data:     8/8/1996
 *
 *   Description:
 *
 *   Input Parameters:  None
 *
 *   Output Parameters: Nothing
 *
 *   Global Variables Changed: None
 *
 *   Users:
 *
 *   -----------------------------------------------------------
 *   -                       Modifications                     -
 *   -----------------------------------------------------------
 *
 *   Author & Date:  RSA
 *   Description:
 *   Reason:
 *
 ****************************************************************************/

void init_downld(void)
{
   /* Nothin special at the moment */
}

/****************************************************************************
 *
 *   Routine:           dnld_patch()
 *
 *   Author:            RSA
 *
 *   Creation Data:     12/8/1996
 *
 *   Description:
 *
 *   Input Parameters:  const uword patch_tbl[]
 *
 *   Output Parameters: Nothing
 *
 *   Global Variables Changed: None
 *
 *   Users:
 *
 *   -----------------------------------------------------------
 *   -                       Modifications                     -
 *   -----------------------------------------------------------
 *
 *   Author & Date:  RSA
 *   Description:
 *   Reason:
 *
 ****************************************************************************/

void dnld_patch(const uword patch_tbl[])
{
    uword length,count,ndx,mem_add,data_val,hi_mcon,lo_mcon;

   /*
       The patch tables are defined as follows:

           patch_tbl[0] = patch type ????
           patch_tbl[1] = number of 16-bit words to download
           patch_tbl[2] = addr in DSP PMEM to write data (patch_tbl[3]) to
           patch_tbl[3] = data word to write (to patch_tbl[2])
           patch_tbl[4,6,8,...] = repeat patch_tbl[2]
           patch_tbl[5,7,9,...] = repeat patch_tbl[3]
   */

	ndx = 1;
	length = patch_tbl [ndx++];

	for (count = 1; count <= length; count++)
	{
		mem_add  = patch_tbl [ndx++];
		data_val = patch_tbl [ndx++];

      write_to_dsp( mem_add, data_val );
	}
}

void write_to_dsp( uword mem_add, uword data_val )
{
   ack_or_response = NO_REPLY;       /* No DSP acks during downloads */

 	current_command [0] = PACKET_DSP_PROGRAM_MEMORY_WRITE;
	current_command [1] = 0x00;
 	current_command [2] = PACKET_DSP_PROGRAM_MEMORY_WRITE_LEN;
 	current_command [3] = 0x00;
 	current_command [4] = mem_add;
 	current_command [5] = (mem_add >> 8);
 	current_command [6] = 0;            /* MCON = 00 */
 	current_command [7] = 0;
 	current_command [8] = data_val;
 	current_command [9] = (data_val >> 8);

 	send_pkt_to_dsp();
}

