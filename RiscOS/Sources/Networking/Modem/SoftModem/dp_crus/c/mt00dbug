/****************************************************************************
/
/   Copyright 1994, 1995, 1996.
/   All Rights Reserved by:
/   RSA
/   7701 Six Forks Road
/   Suite 120
/   Raleigh, NC  27615
/   (919) 846-7171
/
/   This document contains material confidential to RSA. Its contents
/   must not be revealed, used or disclosed to anyone or company without
/   written permission by RSA. The information contained herein is solely
/   for the use of RSA.
/
/   File: mt00dbug.c
/
/   Module Version: 1.00
/
/   Function: Supports peek / poke of DSP program and data memory for
/             Cutlass Data Pump.  Supports other customer AT commands
/             for Cutlass DSP debugging.
/
/   Product: Musket, Andromeda, V.34 WinApp
/
/   -----------------------------------------------------------
/   -                       Modifications                     -
/   -----------------------------------------------------------
/
/   Author & Date:     RSA        12/6/95
/   Description:
/   Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "mt_codef.h"
#include "mt_coext.h"
#include "mt_copro.h"

#include "cp_dsp.h"

//#include "acu_def.h"
#include "acu_pro.h"

/* Constants */
#define DATA    0       /* Peek packet types */
#define PROGRAM 1
#define NUMERIC_FORM 0

/* Externally allocated variables */
extern ubyte dsp_response_data[15];

/* Function prototypes */
void store_hex_byte_to_a(ubyte num, ubyte **ptr);
void store_hex_long_to_a(ulong num, ubyte **ptr);
void acu_to_string (char *str);
void modem_display_dsp_version (void);

/* External function prototypes */
extern void dspdrv_ReadCram (uword addr, ubyte *data, uword len);
extern void output_info (ubyte *, ubyte);
extern ubyte string_len(ubyte *str);
extern void send_char (ubyte ch);
extern void output_send_cr_lf (void);
extern void acu_to_string (char *str);
extern void dspdrv_reset_dsp (void);
extern void dspdrv_run_dsp (void);

typedef ulong addr_t;
typedef ulong data_t;

extern int peekd(addr_t addr, data_t *data, unsigned len);
extern int peekp(addr_t addr, data_t *data, unsigned len);
extern int poked(addr_t addr, data_t *data, unsigned len);
extern int pokep(addr_t addr, data_t *data, unsigned len);
void new_mt_peek (ulong address, ulong num_bytes, byte type);
void display_peek_data (ulong current_address, ubyte *data);
void new_mt_poke (ulong full_address, word data, byte type);



/*******************************************************************************
/
/    Procedure:     mt_peek
/
/    Author:   RSA
/
/    Creation Date: 12/6/95
/
/    Description:   This routine peeks DSP data or program memory.  It sets
/                   up the peek operation, sends a peek packet, and continues
/                   to send peek packets until the required number of bytes
/                   have been received from DSP memory.  (Each peek request
/                   causes the DSP to return 8 bytes of DSP memory.)
/
/    Input Parameters:  word full_address - Starting DSP address
/                       word num_bytes - Number of bytes to read from DSP
/                       ubyte type     - Type of peek required - DATA or PROGRAM
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
void new_mt_peek (ulong address, ulong num_bytes, byte type)
{
  static ubyte buffer[60];
  ulong current_address, end_address;

  current_address = address;
  end_address = address + num_bytes;

  if (type == DATA)
    acu_to_string ("DSP Data RAM\0");
  else
    acu_to_string ("DSP Program RAM\0");

  /* Read 8 words (16 bytes) at a time.  Display each buffer of data
     as it is read. */
  for ( ; current_address < end_address; current_address += 8)
  {
    if (type == DATA)
      peekd (current_address, (ulong *) buffer, 8);
    else
      peekp (current_address, (ulong *) buffer, 8);

    display_peek_data (current_address, buffer);
  }

  /* Send an EOF character to the terminal to indicate end of transmission.
     This allows the V.34 Beta Test application to receive this data as if
     it were an ASCII file terminated by an EOF character. */
  send_char ((ubyte) 0x1A);
}


void display_peek_data (ulong current_address, ubyte *data)
{
  static ubyte str[60];
  ubyte *ptr, i;

  /* Now that the info has been collected, format the data */
  str[0] = '\0';
  ptr = &str[0];

  /* Store word address with colon and spaces */
  store_hex_long_to_a ((ulong) current_address, (ubyte **) &ptr);
  *ptr++ = ':';
  *ptr++ = ' ';
  *ptr++ = ' ';

  /* Display 8 words of DSP data. Reverse order of byte pairs. */
  for (i=0; i < 15; i += 2)
  {
    store_hex_byte_to_a (data[i+1], (ubyte **) &ptr);
    store_hex_byte_to_a (data[i], (ubyte **) &ptr);
    *ptr++ = ' ';
  }
  *ptr++ = '\0';

  /* Send this line of data to the DTE */
  output_info ((ubyte *) str, NUMERIC_FORM);
}


/*******************************************************************************
/
/    Procedure:     mt_poke
/
/    Author:   RSA
/
/    Creation Date: 12/6/95
/
/    Description:   This routine pokes one word of DSP data or program memory.
/
/    Input Parameters:  word full_address - Starting DSP address
/                       word num_bytes - Number of bytes to read from DSP
/                       ubyte type     - Type of peek required - DATA or PROGRAM
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
void new_mt_poke (ulong full_address, word data, byte type)
{
  word buffer[4];

  buffer[0] = data;

  if (type == DATA)
    poked (full_address, (ulong *) buffer, 1);
  else
    pokep (full_address, (ulong *) buffer, 1);
}


/*******************************************************************************
/
/   Routine: store_hex_byte_to_a (vce_store_hex_byte_to_a)
/
/   Author: RSA
/
/   Creation Date: 10/15/92
/
/   Description: This routine will convert a hex byte to ASCII string.
/
/   Input Parameters: ubyte num - Hex byte to be converted
/                     ubyte **ptr- Pointer to ASCII string
/
/   Global Variables Changed: None.
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void store_hex_byte_to_a (ubyte num, ubyte **ptr)
{
    ubyte temp_char;

    temp_char = (num >> 4) & 0x0F;
    *(*ptr)++ = temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A';
    temp_char = num & 0x0F;
    *(*ptr)++ = temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A';
}


/*******************************************************************************
/
/   Routine: store_hex_long_to_a (vce_store_hex_long_to_a)
/
/   Author: RSA
/
/   Creation Date: 10/15/92
/
/   Description: This routine will convert a hex longword to ASCII string.
/
/   Input Parameters: ubyte num - Hex long to be converted
/                     ubyte **ptr- Pointer to ASCII string
/
/   Global Variables Changed: None
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void store_hex_long_to_a(ulong num, ubyte **ptr)
{
    ulong temp_char;

    temp_char = (num >> 28) & 0x0F;
    *(*ptr)++ = (ubyte) (temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A');

    temp_char = (num >> 24) & 0x0F;
    *(*ptr)++ = (ubyte) (temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A');

    temp_char = (num >> 20) & 0x0F;
    *(*ptr)++ = (ubyte) (temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A');

    temp_char = (num >> 16) & 0x0F;
    *(*ptr)++ = (ubyte) (temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A');

    temp_char = (num >> 12) & 0x0F;
    *(*ptr)++ = (ubyte) (temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A');

    temp_char = (num >> 8) & 0x0F;
    *(*ptr)++ = (ubyte) (temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A');

    temp_char = (num >> 4) & 0x0F;
    *(*ptr)++ = (ubyte) (temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A');

    temp_char = num & 0x0F;
    *(*ptr)++ = (ubyte) (temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A');
}



/*******************************************************************************
/
/   Routine: acu_to_string
/
/   Author: RSA
/
/   Creation Date: 12/15/95
/
/   Description: This routine outputs an ASCII string to the terminal by
/                calling send_char() and output_send_cr_lf().
/
/   Input Parameters: char *str - String to be sent to terminal
/
/   Global Variables Changed: None
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void acu_to_string (char *str)
{
  uword str_len, i;

  str_len = string_len ((ubyte *) str);

  output_send_cr_lf ();

  for (i=0; i < str_len; i++)
    send_char ((ubyte) str[i]);

  output_send_cr_lf ();
}


void send_string (char *str)
{
  uword str_len, i;

  str_len = string_len ((ubyte *) str);

  for (i=0; i < str_len; i++)
    send_char ((ubyte) str[i]);
}

