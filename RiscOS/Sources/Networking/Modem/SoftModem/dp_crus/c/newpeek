#include "sys_def.h"
#include "cut_type.h"
#include "icd_msgs.h"

/* Function prototypes */
#ifndef __riscos
void set_register(unsigned char, unsigned char);
unsigned char get_register(unsigned char);
#endif
void send_packet(unsigned char *);
int get_packet(unsigned char *, unsigned use_timeout);
void delay_subroutine (void);
int generic_peek(unsigned char outcmd, unsigned char incmd, addr_t addr,
                 data_t *datat, int len);
void generic_poke(unsigned char outcmd, addr_t addr, data_t *data, int len);

/* External function prototypes */
extern void dspdrv_run_dsp (void);

/* Macros */
#define min(x,y) ((x < y) ? x : y)
#define delay_subroutine()  ;
#define LSB(x)   ((x) & 0xff)
#define MSB(x)   (((x) >> 8) & 0xff)

/* Typedefs */
/* typedef unsigned char ubyte; */

/* Constants */
#define BANK1_START   0x10000

#define  DL_BLOCK_SIZE 0x10      /* download block size */
#define  MAX_MSG_SIZE  (DL_BLOCK_SIZE*4+30)
#define  UL_BLOCK_SIZE 0x08      /* upload block size */
#define  MAX_PEEKP_LEN 0x08      /* packet size for peekp msg */

#define  CMD_PEEKP         PACKET_DSP_PROGRAM_MEMORY_READ
#define  CMD_PEEKDB0       PACKET_DSP_DATA_MEMORY_READ_B0
#define  CMD_PEEKDB1       PACKET_DSP_DATA_MEMORY_READ_B1
#define  CMD_RUN           PACKET_RUN_DSP
#define  CMD_POKEP         PACKET_DSP_PROGRAM_MEMORY_WRITE
#define  CMD_POKEDB0       PACKET_DSP_DATA_MEMORY_WRITE_B0
#define  CMD_POKEDB1       PACKET_DSP_DATA_MEMORY_WRITE_B1
#define  CMD_ENTER_MON     PACKET_ENTER_MON
#define  CMD_PEEKP_RSP     PACKET_PROGRAM_MEMORY_READBACK
#define  CMD_PEEKD_RSP     PACKET_DATA_MEMORY_READBACK
#define  CMD_BREAK_RSP     PACKET_BREAK_RSP

#define  LBYTE_UD_ADD      0xf8   /* low byte of upload/download address reg */
#define  HBYTE_UD_ADD      0xf9   /* high byte of upload/download address reg */
#define  UD_DATA           0xfa   /* upload/download data register */
#define  CP_CONTROL        0xfc   /* Merlin DSP control register */
#define  DSP_RUN           0x01   /* control reg value for run mode */
#define  DSP_RESET         0x02   /* control reg value for reset/tristate mode*/
#define  DSP_CP_SEMAPHORE      0  /* DSP to CP mailbox semaphore addr */
#define  DSP_CP_MAILBOX_SIZE  40  /* DSP/CP mailbox size */
#define  CP_DSP_SEMAPHORE  0x40   /* CP to DSP mailbox semaphore addr */
#define  DSP_INTERRUPT     0xfe   /* DSP interrupt register */
#define  CP_INTERRUPT      0xff   /* CP interrupt register */



/*  PEEKP        Examine program memory. */
int peekp(addr_t addr,     /*  starting address of block */
         data_t *data,     /*  pointer to data buffer */
         int len)          /*  number of words to read */
{
   int retval;
   int pktlen;
   unsigned long msbits;

   /* the poke is broken up into 0x8000 long chunks to ease mcon manipulation */
   for (msbits = (addr & CUT_MCON_PADDR_BITS); len > 0; msbits += 0x8000)
   {
         pktlen = min(len,0x8000-(addr & CUT_LOW_PADDR_MASK));
         retval = generic_peek(CMD_PEEKP, CMD_PEEKP_RSP,
                              (addr & CUT_LOW_PADDR_MASK)+msbits, data, pktlen);
         if (retval)
            return(retval);

         len -= pktlen;
         addr += pktlen;
         data += pktlen;
   }
   return(retval);
}

/*  PEEKD        Examine data memory. (tested) */
int peekd(addr_t addr,       /*  starting address of block (0-7ff) */
          data_t *data,      /*  pointer to data buffer */
          unsigned len)      /*  number of words to read */
{
   int status;
   unsigned b0_len;

   /*  must know about bank boundary */
   if (addr < BANK1_START && addr + len >= BANK1_START)
      {
      b0_len = BANK1_START-addr;
      status = generic_peek(CMD_PEEKDB0, CMD_PEEKD_RSP, addr, data, b0_len);
      if ( status != 0 )
         return( status );
      status = generic_peek(CMD_PEEKDB1, CMD_PEEKD_RSP, BANK1_START,
                            data+b0_len, len-b0_len);
      }
   else
      {
      if (addr < BANK1_START)
         status = generic_peek(CMD_PEEKDB0, CMD_PEEKD_RSP, addr, data, len);
      else
         status = generic_peek(CMD_PEEKDB1, CMD_PEEKD_RSP, addr, data, len);
      }
   return( status );
}


/*  POKEP        Modify program memory.  Not used for program download. */
/*                 This routine uses the resident monitor for download. */
void pokep(addr_t addr,     /*  starting address of block */
      data_t *data,         /*  pointer to data */
      int len)              /*  number of words to write */
{
   int pktlen;
   unsigned long msbits;

   /* the poke is broken up into 0x8000 long chunks to ease mcon manipulation */
   for (msbits = (addr & CUT_MCON_PADDR_BITS); len > 0; msbits += 0x8000)
   {
         /*  pkt len is the distance from here to the 0x8000 boundary. */
         /*  or the remaining len, whichever is smaller */
         pktlen = min(len,0x8000-(addr & CUT_LOW_PADDR_MASK));
         generic_poke(CMD_POKEP, (addr & CUT_LOW_PADDR_MASK)+msbits,
                      data, pktlen);
         len -= pktlen;
         addr += pktlen;
         data += pktlen;
   }
}


/*  POKED        Modify data memory. */
void poked(addr_t addr,       /*  starting address of block */
         data_t *data,        /*  pointer to data */
         unsigned len)        /*  number of words to write */
{
   unsigned b0_len;

   /*  must know about bank boundary */
   if (addr < BANK1_START && addr + len >= BANK1_START)
   {
      b0_len = BANK1_START-addr;

      generic_poke(CMD_POKEDB0, addr, data, b0_len);
      generic_poke(CMD_POKEDB1, BANK1_START, data+b0_len, len - b0_len);
   }
   else
   {
      if (addr < BANK1_START)
         generic_poke(CMD_POKEDB0, addr, data, len);
      else
         generic_poke(CMD_POKEDB1, addr, data, len);
   }
}


int generic_peek(       unsigned char outcmd,
            unsigned char incmd,
            addr_t addr,          /* starting addr of block */
            data_t *datat,        /* pointer to data buffer */
            int len)              /* number of words to read */
{
    int i;          /* a counter variable */
    int retries;    /* number of times to retry peek response */
    unsigned char pckt_data[40] = {0};
    unsigned char temp_data;
    int ok;
    unsigned short *data = (unsigned short *) datat;
    unsigned short *dptr;       /* ptr to message packet */

    /*  flush the input queue */
    {
    unsigned char scrap_data[40] = {0};
    get_packet(scrap_data, 0 /* no timeout */);
    }

    while (len>0)
    {
        retries = 10;
        ok =0;
        while (retries >0)
        {
            /*  set up message to xmit to dsp */
            pckt_data[0] = outcmd;

            if (outcmd == CMD_PEEKP)
                {
                pckt_data[2] = 4;                /*  read packet length */
                pckt_data[6] = LSB((addr & CUT_MCON_PADDR_BITS) >> (15-5));
                pckt_data[7] = MSB((addr & CUT_MCON_PADDR_BITS) >> (15-5));
                if (addr >= CUT_LOW_PADDR_BOUNDARY)
                    {
                    pckt_data[4] = LSB(addr | CUT_USE_MCON_SIGNAL_BIT);
                    pckt_data[5] = MSB(addr | CUT_USE_MCON_SIGNAL_BIT);
                    }
                else
                    {
                    pckt_data[4] = LSB(addr);
                    pckt_data[5] = MSB(addr);
                    }
            }
            else
            {
                pckt_data[2] = 2;                /*  read packet length */
                pckt_data[4] = LSB(addr);
                pckt_data[5] = MSB(addr);
            }

            send_packet(pckt_data);

            /* wait for peek response */
            for (i =0; i<10;i++)
                delay_subroutine();  /*  wait a little */

            if(get_packet(pckt_data, 1 /* timeout */))
            {
                if ((pckt_data[0]) == incmd) /* peek response received */
                {
                      dptr = (unsigned short *) (&pckt_data[4]);
                    for (i=0; i<UL_BLOCK_SIZE && i< len; i++)
                    {
                        *data = *dptr;
                        data++;
                        dptr++;
                    }
                    ok =1;
                    retries = 0;
                }
                else
                {
                    ok=0;
                }
            }
            else
            {
                ok=0;
                retries--;
            }
            retries--;
        }
        if (!ok)
            return (-1); /* error */

        len -=i;
        addr +=i;
    }

    return 0; /* ok */
}



/*  Generic poke routine -- generate message to poke data, program, or regs */
void generic_poke(
        unsigned char outcmd,   /*  outbound command number */
        addr_t addr,            /*  starting address of block */
        data_t *data,           /*  pointer to data */
        int len)                /*  number of words to write */
{
    char command[100];
    register int i, j;
    unsigned char *dptr;
    unsigned char pckt_data[40] = {0};
    unsigned short *temp_data;
    int ptr;

    for ( ; len > 0; len-=UL_BLOCK_SIZE, addr += UL_BLOCK_SIZE)
    {
        ptr = 0;
        pckt_data[0] = outcmd;
        pckt_data[2] = 2 +(2*min(UL_BLOCK_SIZE, len)); /*  read packet length */
        ptr = 4;

        if (outcmd == CMD_POKEP)
        {
            pckt_data[2] += 2;
            if (addr >= CUT_LOW_PADDR_BOUNDARY)
                {
                pckt_data[ptr++] = LSB(addr | CUT_USE_MCON_SIGNAL_BIT);
                pckt_data[ptr++] = MSB(addr | CUT_USE_MCON_SIGNAL_BIT);
                }
            else
                {
                pckt_data[ptr++] = LSB(addr);
                pckt_data[ptr++] = MSB(addr);
                }
            pckt_data[ptr++] = LSB((addr & CUT_MCON_PADDR_BITS) >> (15-5));
            pckt_data[ptr++] = MSB((addr & CUT_MCON_PADDR_BITS) >> (15-5));
        }
        else
        {
            pckt_data[ptr++] = LSB(addr);
            pckt_data[ptr++] = MSB(addr);
        }

        temp_data = (unsigned short *) &pckt_data[ptr];

        for (i = 0; i <min(UL_BLOCK_SIZE, len*2+2); i++)
            *temp_data++ = *data++;
        dptr = (unsigned char *) &pckt_data;
        send_packet(dptr);
    }
}



/* send a packet to cutlass thru mailbox or rs-232 */
void send_packet(unsigned char *pckt)
{
      int length;
      int i;

      /* wait for semaphore to be 0 */
      i = 100; /* timeout */
      while (i--)
         if(get_register(CP_DSP_SEMAPHORE) == 0)
            i =0;
      /* go anyway */

      /*  xfer message except packet ID, if odd# of bytes send another 0 */
      length = (*(pckt+2))+4;/* set length of packet to write */
      if (length & 1)
         length++; /* ensure length is even */

      for (i=1; i<length; i++)
         set_register(CP_DSP_SEMAPHORE+i, *(pckt+i));

      /*  store packet id in the mailbox semaphore */
      set_register(CP_DSP_SEMAPHORE, *pckt);

      /*  interrupt dsp */
      set_register(DSP_INTERRUPT, 1); /*  write any value to interrupt dsp */
}


/* get a packet from cutlass thru mailbox or rs-232 */
/*  returns 0 on no packet, 1 on packet */
int get_packet(unsigned char *data, unsigned use_timeout)
{
      unsigned char addr;
      int len;
      int retval = 0;

         if (get_register(DSP_CP_SEMAPHORE) != 0)
            {
            retval = 1;
            }

      if (!retval) /* timeout */
         return(retval); /* no packet */

      /*  clear interrupt */
      get_register(CP_INTERRUPT);

      /*  read the message from mailbox */
      addr = DSP_CP_SEMAPHORE;
      *data++ = get_register(addr++);/* read in packet id */
      *data++ = get_register(addr++);/* read in filler */
      *data = get_register(addr++);/* read in packet length */
      len = *data++;/* set len equal to packet length */
      if (len >39)
         return 1;

      if (len & 1)
         len ++; /* ensure length equal to 0 */
      *data++ = get_register(addr++);/* read in filler */

      while (len--)
         *data++ = get_register(addr++);

      /*  set mailbox semaphore to 0 */
      set_register(DSP_CP_SEMAPHORE,0);
      return (retval);
}


/*  user accessable function to transmit message to the target */
void send_msg(char *msg, char len)
{
   unsigned char command[0x100] = {0};
   int i;

   command[0] = msg[0];
   command[1] = msg[1];
   command[2] = len;
   command[3] = 0;
   for (i=0; i < len; i++)
      command[i+4] = msg[i+2];

   send_packet(command);
}

/*  user accessable function to get message from the target */
int get_msg(char * command)
{
   return(get_packet((unsigned char *) command, 1 /* timeout */));
}


/*  input -- 16 bit address + MCON register */
/*  output -- 18 bit address */
void adjust_cut_addr_for_mcon(unsigned int *ptr)
{
   if (*ptr & CUT_USE_MCON_SIGNAL_BIT)
   {
      data_t mcon;
      peekp(MCON_REG, &mcon, 1);
      mcon &= 0xe0;               /*  mask off the page bits */
      mcon = mcon >> 5;           /*  move page bits to bit 0-2 */
      *ptr &= CUT_LOW_PADDR_MASK;
      *ptr |= mcon << 15;
   }
}


