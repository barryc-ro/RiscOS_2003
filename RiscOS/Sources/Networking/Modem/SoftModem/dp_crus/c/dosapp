/******************************************************************************
/
/     Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994. All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA.
/     Its contents must not be revealed, used or disclosed to
/     anyone or company with out written permission by RSA.
/     The information contained herein is solely for the use
/     of RSA.
/
/       File:           dosapp.c
/
/       Version:        1.0
/
/       Function:       Application-specific modem task functions
/                       for DOS platform.
/
/       Product:        Musket
/
/       History:
/
/       Created:        10/25/95
/        ------------------------------------------------------
/        -               Modifications             -
/        ------------------------------------------------------
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/

#include "sys_def.h"
#include "cp_dsp.h"
#include "mt_codef.h"
#include "mt_hwdef.h"
#include "mt_copro.h"
#include "mt_hwpro.h"
#include "mt_coext.h"
#include "dsp_drv.h"
#include "dsppatch.h"
#include "mt_macro.h"
#include "mt_voice.h"
#include "tracemac.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "dosapp.h"
#ifdef __riscos
#include "kernel.h"
#endif

/* Function prototypes */
ubyte write_eeprom_data(uword, uword, ubyte *);
ubyte read_eeprom_data(uword, uword, ubyte *);

void process_timers (void);
void cmd_packet_callback( ubyte id );
void io_set_leds (unsigned long value);
void dspdrv_CommRamHandler(void);
void dspdrv_PutCRAM(ubyte *pckt);

void init_ports(void);

/* External function prototypes */
#ifndef __riscos
extern unsigned char inp (uword port);
extern void outp (uword port, ubyte data);
#endif
extern uword get_host_address (uword cp_port);
#ifndef __riscos
extern uword translate_io_address (ubyte addr);
#endif
extern void UpdateCommandTrace (void *cmmd_packet, uword nSource);
void ResetDSP(void);
void RunDSP(void);
void HaltDSP(void);

extern void PCterminal_cts_on(void);
extern void PCterminal_cts_off(void);
extern void PCterminal_dsr_on(void);
extern void PCterminal_dsr_off(void);
extern int  PCterminal_dtr_status(void);
extern int  PCterminal_rts_status(void);

/* Global variables */
GPIO_STATE gpio_state = {UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN, UNKNOWN};
unsigned char fatal_error_occurred = 0;
#ifndef __riscos
ubyte sys_intr_disabled = FALSE;      /* Interrupts Enabled on PowerUP */
#else
extern ubyte sys_intr_disabled;
#endif

/* External variables */
extern ubyte Cdata[MAX_PACKET_SIZE];
extern ubyte dsp_response_data[15];
extern volatile ubyte dsp_done;
extern char *PktDescr[0xff];


/*******************************************************************************
/
/                     "set_hook_relay"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the offhook relay to the given state.
/                   Hook relay is connected to Cutlass internal GPIO pins.
/
/    Input Parameters:   state = ON or OFF
/                              This refers to the offhook condition,
/                              not the onhook condition.
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)  modem_config_dtmf_dial
/                          modem_hook_relay
/                          hang_up_modem
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_hook_relay(ubyte state)
{
  gpio_state.hook_relay = state;

  if (state == ON)                              /* Pins are active LOW */
  {
    dp_voice_set_gpio (~GPIO_OFF_HOOK_RELAY, GPIO_WRITE_AND_BYTE,
                        GPIO_BANK_INTERNAL);
  }
  else
  {
    dp_voice_set_gpio (GPIO_OFF_HOOK_RELAY, GPIO_WRITE_OR_BYTE,
                       GPIO_BANK_INTERNAL);
  }
}


/*******************************************************************************
/
/    Procedure:     set_voice_relay
/
/    Author:   RSA
/
/    Creation Date: 12/11/95
/
/    Description:   This routine sets GPIO bits to change status of voice relay.
/                   Voice relay is connected to Cutlass internal GPIO pins.
/
/    Input Parameters:   ubyte state - ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
void set_voice_relay (ubyte state)
{
  gpio_state.voice_relay = state;

#ifndef __riscos
  if (state == ON)                              /* Pins are active LOW */
  {
    dp_voice_set_gpio (~GPIO_VOICE_RELAY, GPIO_WRITE_AND_BYTE,
                        GPIO_BANK_INTERNAL);
  }
  else
  {
    dp_voice_set_gpio (GPIO_VOICE_RELAY, GPIO_WRITE_OR_BYTE,
                       GPIO_BANK_INTERNAL);
  }
#endif
}


/*******************************************************************************
/
/    Procedure:     set_cid_relay
/
/    Author:   RSA
/
/    Creation Date: 12/11/95
/
/    Description:   This routine sets GPIO bits to change status of
/                   caller ID relay.
/
/    Input Parameters:   ubyte state - ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
void set_cid_relay (ubyte state)
{
  gpio_state.cid_relay = state;

  if (state == ON)                              /* Pins are active LOW */
  {
    dp_voice_set_gpio (~GPIO_CID_RELAY, GPIO_WRITE_AND_BYTE,
#ifdef __riscos
                        GPIO_BANK_INTERNAL);
#else
                        GPIO_BANK_EXTERNAL_GPO);
#endif
  }
  else
  {
    dp_voice_set_gpio (GPIO_CID_RELAY, GPIO_WRITE_OR_BYTE,
#ifdef __riscos
                       GPIO_BANK_INTERNAL);
#else
                       GPIO_BANK_EXTERNAL_GPO);
#endif
  }
}


/*******************************************************************************
/
/    Procedure:     set_dsvd_relay
/
/    Author:   RSA
/
/    Creation Date: 12/11/95
/
/    Description:   This routine sets GPIO bits to change status of DSVD relay.
/
/    Input Parameters:   ubyte state - ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
void set_dsvd_relay (ubyte state)
{
  gpio_state.dsvd_relay = state;

#ifndef __riscos
  if (state == ON)                              /* Pins are active LOW */
  {
    dp_voice_set_gpio (~GPIO_DSVD_RELAY, GPIO_WRITE_AND_BYTE,
                        GPIO_BANK_EXTERNAL_GPO);
  }
  else
  {
    dp_voice_set_gpio (GPIO_DSVD_RELAY, GPIO_WRITE_OR_BYTE,
                       GPIO_BANK_EXTERNAL_GPO);
  }
#endif
}


/*******************************************************************************
/
/    Procedure:     set_spk_hs_relay
/
/    Author:   RSA
/
/    Creation Date: 12/11/95
/
/    Description:   This routine sets GPIO bits to change status of
/                   Speaker / Handset relay.
/
/    Input Parameters:   ubyte state - ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
void set_spk_hs_relay (ubyte state)
{
  gpio_state.spk_hs_relay = state;

  if (state == ON)                              /* Pins are active LOW */
  {
    dp_voice_set_gpio (~GPIO_SPK_HS_RELAY, GPIO_WRITE_AND_BYTE,
#ifdef __riscos
                        GPIO_BANK_INTERNAL);
#else
                        GPIO_BANK_EXTERNAL_GPO);
#endif
  }
  else
  {
    dp_voice_set_gpio (GPIO_SPK_HS_RELAY, GPIO_WRITE_OR_BYTE,
#ifdef __riscos
                       GPIO_BANK_INTERNAL);
#else
                       GPIO_BANK_EXTERNAL_GPO);
#endif
  }
}

ubyte get_hook_relay (void)
{
  ubyte relay_state;

  relay_state = dp_voice_set_gpio (GPIO_OFF_HOOK_RELAY, GPIO_READ_BYTE,
                                   GPIO_BANK_INTERNAL);
  if (relay_state & GPIO_OFF_HOOK_RELAY)        /* Pins are active LOW */
    return (0);
  else
    return (1);
}

ubyte get_voice_relay (void)
{
#ifdef __riscos
  return (0);
#else
  ubyte relay_state;

  relay_state = dp_voice_set_gpio (GPIO_VOICE_RELAY, GPIO_READ_BYTE,
                                   GPIO_BANK_INTERNAL);
  if (relay_state & GPIO_VOICE_RELAY)        /* Pins are active LOW */
    return (0);
  else
    return (1);
#endif
}

ubyte get_cid_relay (void)
{
  ubyte relay_state;

  relay_state = dp_voice_set_gpio (GPIO_CID_RELAY, GPIO_READ_BYTE,
#ifdef __riscos
                                   GPIO_BANK_INTERNAL);
#else
                                   GPIO_BANK_EXTERNAL_GPO);
#endif
  if (relay_state & GPIO_CID_RELAY)        /* Pins are active LOW */
    return (0);
  else
    return (1);
}

ubyte get_dsvd_relay (void)
{
#ifdef __riscos
  return (0);
#else
  ubyte relay_state;

  relay_state = dp_voice_set_gpio (GPIO_DSVD_RELAY, GPIO_READ_BYTE,
                                   GPIO_BANK_EXTERNAL_GPO);
  if (relay_state & GPIO_DSVD_RELAY)        /* Pins are active LOW */
    return (0);
  else
    return (1);
#endif
}

/*******************************************************************************
/
/    Procedure:     get_phone_relay
/
/    Author:   RSA
/
/    Creation Date: 12/11/95
/
/    Description:   This routine returns the status of
/                   Local Phone Off Hook Detect.
/
/    Input Parameters:   None
/
/    Output Parameter:   ubyte - LPOHD state (ON, OFF, UNDETERMINED)
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
ubyte get_phone_relay (void)
{
#ifdef __riscos
  return 0;
#else
  ubyte relay_state;

  relay_state = dp_voice_set_gpio (GPIO_LPOHD_RELAY, GPIO_READ_BYTE,
                                   GPIO_BANK_EXTERNAL_GPI);
  if (relay_state & GPIO_LPOHD_RELAY)        /* Pins are active LOW */
    return (0);
  else
    return (1);
#endif
}


ubyte get_spk_hs_relay (void)
{
  ubyte relay_state;

  relay_state = dp_voice_set_gpio (GPIO_SPK_HS_RELAY, GPIO_READ_BYTE,
#ifdef __riscos
                                   GPIO_BANK_INTERNAL);
#else
                                   GPIO_BANK_EXTERNAL_GPO);
#endif
  if (relay_state & GPIO_SPK_HS_RELAY)        /* Pins are active LOW */
    return (0);
  else
    return (1);
}

/****************************************************************************
 *
 *   Routine:           ResetDSP()
 *
 *   Author:            RSA
 *
 *   Creation Data:     17/12/1996
 *
 *   Description: Beta Card/EEB reset routine for DSP internal code.
 *
 *   Input Parameters:  None
 *
 *   Output Parameters: Nothing
 *
 *   Global Variables Changed: None
 *
 *   Users:
 *
 *   -----------------------------------------------------------
 *   -                       Modifications                     -
 *   -----------------------------------------------------------
 *
 *   Author & Date:  RSA
 *   Description:
 *   Reason:
 *
 ****************************************************************************/

void ResetDSP(void)
{
   #ifdef DEBUG
   extern void dump_svc_stack(void);
   dump_svc_stack();
   #endif
   HaltDSP();

   RunDSP();

   /*  wake up the DSP  */
   LOAD_MODEM_WAKEUP_DSP
        ack_or_response = ACK;
   send_pkt_to_dsp();

   /* Need to download patches again */
   dsppatch(PATCH_INIT_POWER_ON);  /* Download the Cutlass DSP patch file */

        LOAD_MODEM_INIT
        ack_or_response = ACK;
        send_pkt_to_dsp();
}

/****************************************************************************
 *
 *   Routine:           RunDSP()
 *
 *   Author:            RSA
 *
 *   Creation Data:     03/05/1997
 *
 *   Description: Beta Card/EEB routine to take the DSP out of tristate.
 *
 *   Input Parameters:  None
 *
 *   Output Parameters: Nothing
 *
 *   Global Variables Changed: None
 *
 *   Users:
 *
 *   -----------------------------------------------------------
 *   -                       Modifications                     -
 *   -----------------------------------------------------------
 *
 *   Author & Date:  RSA
 *   Description:
 *   Reason:
 *
 ****************************************************************************/

void RunDSP(void)
{
   ulong time;

   set_register(CP_CONTROL, DSP_RUN);

   /* Settling time */
   for( time=0; time<0xFFFFL; time++ );
       /* dum dee dum dum */

}

/****************************************************************************
 *
 *   Routine:           HaltDSP()
 *
 *   Author:            RSA
 *
 *   Creation Data:     03/05/1997
 *
 *   Description: Beta Card/EEB routine to halt the DSP.
 *
 *   Input Parameters:  None
 *
 *   Output Parameters: Nothing
 *
 *   Global Variables Changed: None
 *
 *   Users:
 *
 *   -----------------------------------------------------------
 *   -                       Modifications                     -
 *   -----------------------------------------------------------
 *
 *   Author & Date:  RSA
 *   Description:
 *   Reason:
 *
 ****************************************************************************/

void HaltDSP(void)
{
   ulong time;

   set_register(DSP_CFG_REG, DSP_BOOT_INT_ROM);
   set_register(CP_CONTROL, DSP_RESET);

   /* Settling time */
   for( time=0; time<0xFFFFL; time++ );
       /* dum dee dum dum */

}

#ifndef __riscos

/*******************************************************************************
/
/     Routine:       "write_eeprom_data"
/
/     Author:      RSA
/
/     Creation Date:       06/10/94
/
/     Description:    This routine will store the given string of data in
/                         EEPROM at the given offset.
/
/     Input Parameters:  offset - storage location in EEPROM
/                               length - length of data string
/                               ptr    - pointer to data string to be stored
/
/     Output Parameter:  1 - Read failure occured
/                        0 - Read failure did not occure
/
/     Global Variables Changed:    None
/
/     Users: (routines that used this)  modem_write_data
/
/     *****************************************************************
/     *               Modifications               *
/     *****************************************************************
/
/     Author & Date:
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte write_eeprom_data(uword eeprom_addr, uword byte_count, ubyte *str_ptr)
{
  return(1);
}


/*******************************************************************************
/
/     Routine:       "read_eeprom_data"
/
/     Author:      RSA
/
/     Creation Date:  06/10/94
/
/     Description:    This routine will retrieve a string of data from the
/                         given offset in EEPROM.  The parameter PTR
/                         will contain the data retrieved.
/
/     Input Parameters:  offset - storage location in EEPROM
/                               length - length of data string to retrieve
/                               ptr    - pointer to null data string
/
/     Output Parameter:  1 - Read failure occured
/                        0 - Read failure did not occure
/
/     Global Variables Changed:    None
/
/     Users: (routines that used this)  modem_read_data
/
/     *****************************************************************
/     *               Modifications               *
/     *****************************************************************
/
/     Author & Date:
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte read_eeprom_data(uword eeprom_addr, uword byte_count,ubyte *str_ptr)
{
  return(1);
}

#endif


/*******************************************************************************
/
/                   "init_ports"
/
/    Author:   RSA
/
/    Creation Date: 8/01/94
/
/    Description:    Init port A and port B for DTE controls and ring
/
/    Input Parameters:       None
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void init_ports(void)
{
  uart.dsr = uart.dtr = uart.cts = uart.rts = 1;
  uart.dcd = uart.ring = 0;
}

#ifndef __riscos

/*******************************************************************************
/
/                   "set_dte_cts"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the CTS relay to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_dte_cts
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void set_dte_cts(ubyte state)
{

   if (state)
        PCterminal_cts_on();
    else
        PCterminal_cts_off();

}


/******************************************************************************
/
/    Procedure: set_dte_dsr
/
/    Author: RSA
/
/    Creation Date: 03/01/95
/
/    Description: This routine will raise or lower the DSR line depending
/              on the parameter passed in.
/
/    Input Parameters:
/                   0 - Raise DSR (off)
/                   1 - Lower DSR (on)
/
/    Output Parameters: none
/
/    Global Variables Changed: none
/
/    Users: modem_dte_dsr
/
/    -------------------------
/    -     Modifications -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
******************************************************************************/
void set_dte_dsr(ubyte state)
{

    if (state)
        PCterminal_dsr_on();
    else
        PCterminal_dsr_off();
}


/******************************************************************************
/
/    Procedure: set_dte_ri
/
/    Author: RSA
/
/    Creation Date: 03/01/95
/
/    Description: This routine will raise or lower the RI line depending on
/              the parameter passed in.
/
/    Input Parameters:
/                   0 - Raise RI (off)
/                   1 - Lower RI (on)
/
/    Output Parameters: none
/
/    Global Variables Changed: none
/
/    Users: modem_dte_ri
/
/    -------------------------
/    -     Modifications -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
******************************************************************************/
void set_dte_ri(ubyte state)
{
   uart.ring = state;
}


/******************************************************************************
/
/    Procedure: set_dte_rlsd
/
/    Author: RSA
/
/    Creation Date: 03/01/95
/
/    Description: This routine will raise or lower the RLSD line depending
/              on the parameter passed in.
/
/    Input Parameters:
/                   0 - Raise RLSD (off)
/                   1 - Lower RLSD (on)
/
/    Output Parameters: none
/
/    Global Variables Changed: none
/
/    Users: modem_dte_rlsd
/
/    -------------------------
/    -     Modifications -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
******************************************************************************/
void set_dte_rlsd(ubyte state)
{
   uart.rlsd = state;
}


/******************************************************************************
/
/    Procedure: get_dte_CTS_status
/
/    Author: RSA
/
/    Creation Date: 10/28/91
/
/    Description: This routine will return the status of the CTS pin.
/
/    Input Parameters: none
/
/    Output Parameters:  D0 - Status of CTS pin:
/                   0 - Off
/                   1 - On
/
/    Global Variables Changed: none
/
/    Users: modem_dte_CTS_status
/
/    -------------------------
/    -     Modifications -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
******************************************************************************/
ubyte get_dte_CTS_status()
{
   return uart.cts;
}


/******************************************************************************
/
/    Procedure: get_dte_RTS_status
/
/    Author: RSA
/
/    Creation Date: 03/01/95
/
/    Description: This routine will return the status of the RTS pin.
/
/    Input Parameters: none
/
/    Output Parameters: Status of RTS pin
/                   0 - Off
/                   1 - On
/
/    Global Variables Changed: none
/
/    Users: modem_dte_RTS_status
/
/    -------------------------
/    -     Modifications -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
******************************************************************************/
ubyte get_dte_RTS_status()
{
   uart.rts = PCterminal_rts_status();

   return uart.rts;
}


/******************************************************************************
/
/    Procedure: get_dte_DTR_status
/
/    Author: RSA
/
/    Creation Date: 3/01/95
/
/    Description: This routine will return the status of the DTR pin.
/
/    Input Parameters: none
/
/    Output Parameters:
/                   0 - Off
/                   1 - On
/
/    Global Variables Changed: none
/
/    Users: modem_dte_DTR_status
/
/    -------------------------
/    -     Modifications -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
******************************************************************************/
ubyte get_dte_DTR_status()
{
   uart.dtr = PCterminal_dtr_status();
   return uart.dtr;
}


/* Set a register/memory location in com ram */
void set_register(uword addr, ubyte data)
{
  uword io_address;
  int i;

  /* Disable interrupts */
  i=irqs_off();

  io_address = translate_io_address (addr);
  outp (io_address, data);

  /* Enable interrupts */
  irqs_restore(i);
}


/* Get a register/memory location from com ram */
unsigned char get_register(uword addr)
{
  ubyte data;
  uword io_address;
  int i;

  /* Disable interrupts */
  i=irqs_off();

  io_address = translate_io_address (addr);
  data = inp (io_address);

  /* Enable interrupts */
  irqs_restore(i);

  return (data);
}
#endif


/*************************************
  DSP->CP->DSP Packet Transfer Functions
**************************************/
ubyte cp_dsp(void)
{
   dsp_done = FALSE;

   /* If Tx semaphore clear */
   if ( get_register(CP_DSP_SEMAPHORE) == 0 )
   {
     dspdrv_PutCRAM(current_command);
     return(DSP_DONE);
   }

   return(DSP_WAITING);
}


ubyte dsp_cp(void)
{
   dspdrv_CommRamHandler();

   if (dsp_done == TRUE)
   {
     memcpy ((ubyte*)&dsp_response_data,(ubyte*)&Cdata[4], Cdata[2]);

     return(DSP_DONE);
   }

   return(DSP_WAITING);
}


/*************************************
    Interrupt Routines
**************************************/
#ifndef __riscos
void line_enable_interrupts(void)
{
   irqs_on();
   sys_intr_disabled = FALSE;
}

void line_disable_interrupts(void)
{
   irqs_off();
   sys_intr_disabled = TRUE;
}

/******************************************************************************
/
/    Procedure: disable_int
/
/    Author: RSA
/
/    Creation Date: 10/28/91
/
/    Description: This routine will disable all interrupts.
/
/    Input Parameters: none
/
/    Output Parameters: none
/
/    Global Variables Changed: none
/
/    Users: modem_disable_interrupts
/
/    -------------------------
/    -     Modifications -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
******************************************************************************/
void disable_int(void)
{
  irqs_off();
  sys_intr_disabled = TRUE;
}


/******************************************************************************
/
/    Procedure: enable_int
/
/    Author: RSA
/
/    Creation Date: 10/28/91
/
/    Description: This routine will enable all interrupts.
/
/    Input Parameters: none
/
/    Output Parameters: none
/
/    Global Variables Changed: none
/
/    Users: modem_enable_interrupts
/
/    -------------------------
/    -     Modifications -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
******************************************************************************/
void enable_int(void)
{
  irqs_on();
  sys_intr_disabled = FALSE;
}

#endif

/*************************************
   Fatal Error Handling
**************************************/
void fatal_error( ubyte error )
{
  printf ("Fatal error %d!!\n", error);
  fatal_error_occurred = TRUE;
}


/*************************************
   Timer Support
**************************************/
void process_timers(void)
{
    /* If Interrupts are disabled, as in mt_init() we need to decrement
       the dsp_timer here to prevent lockup if the DSP is non-responsive */

    if (sys_intr_disabled)
    {
        static int step=100;
        if (--step == 0)
        {
            dsp_timer--;
            step=100;
        }
    }

}


/*************************************
   DSP Command Packet Callback
**************************************/
void cmd_packet_callback( ubyte id )
{
  /* No extra Debug checking needed for DOS app, so just set DONE flag. */
   dsp_done = TRUE;
}

/*************************************
   Application-specific functions
**************************************/
void io_set_leds (unsigned long value)
{
   /* Stubbed */
}


/*
 * The following functions are TEMPORARY STUBS for debug output
 * functions used in the Windows debug platform.  These functions
 * will be removed once testing of VoiceView is complete.
 *
*/
void SayCompression (char *szMsg)
{
   /* Stubbed */
}
void SayToneSent (char *szMsg)
{
   /* Stubbed */
}
void SayProtocol (char *szMsg)
{
   /* Stubbed */
}
void SayTDMode (char *szMsg)
{
   /* Stubbed */
}
void SayConfigTone (char *szMsg)
{
   /* Stubbed */
}
void SayHandsetState (char *szMsg)
{
   /* Stubbed */
}
void SayHardwareState (char *szMsg)
{
   /* Stubbed */
}
void SayLocalPhone (char *szMsg)
{
   /* Stubbed */
}
void SayToneDetected (char *szMsg)
{
   /* Stubbed */
}
void Say (char *szMsg)
{
   /* Stubbed */
}
void Beep (void)
{
   /* Stubbed */
}

/*
 * End temporary VoiceView debug stubs
 *
*/
