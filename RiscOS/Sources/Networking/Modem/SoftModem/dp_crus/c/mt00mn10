/******************************************************************************
/
/     Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994. All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to R. Scott Associates.
/     its contents must not be revealed, used or disclosed to anyone or
/     company with out written permission by R. Scott Associates.  the
/     information contained herein is solely for the use of R. Scott
/     Associates.
/
/       File:            mt00mn10.c
/
/       Version:        1.00
/
/       Function:       Main
/
/       Product:        Modem Task Driver for Merlin Chip Sets
/
/       History:
/
/       Created:        3/01/94
/
/        ------------------------------------------------------
/        -               Modifications             -
/        ------------------------------------------------------
/
/
******************************************************************************/

#include  "SYS_DEF.H"
#include  "cp_dsp.h"
#include  "MT_CODEF.H"
#include  "MT_HWDEF.H"
#include  "MT_COPRO.H"
#include  "MT_HWPRO.H"
#include  "MT_V8V34.H"
#include  "MT_COEXT.H"
#include  "mt_macro.h"
#include  "dsppatch.h"
#include  "dsp_drv.h"

void update_modem_status(void);
void mt_bg(void);
void mt_timer(void);
void mt_reset(void);
void mt_drop(ubyte);
void mt_connect(ubyte, ubyte, ubyte, ubyte, ubyte, ubyte, ubyte, ubyte,ubyte);
/**start change for v8/v34 support ***************************************/
/* void mt_set_rate_seq(ubyte);                                          */
void mt_set_rate_seq(uword,uword);
void v8_orig(void);
void v8_answ(void);
void set_v8_tx_msg(void);
/****end change for v8/v34 support ***************************************/
void mt_return_to_idle(void);

/* RJM041796 */
uword get_rate_mask(ubyte);

/*MRM22096*/
/*timer for v32bis timeout when in v34 mode */
uword     v8_timer ;
uword     sq_timer ;
uword cd_timer = 0; /* ramn 3/2/96 */
uword sig_chk_timer = 0; /* ramn 3/5/96 */
extern ubyte spd_of_prv_conn_up; /* ramn 3/16/96 */
extern ubyte spd_of_prv_conn_dn; /* ramn 3/16/96 */
extern ubyte rtr_timer; /* ramn 3/19/96 */
extern ubyte retrain_started;

/* RJM041796 */
#if 0
extern ubyte modem_mode;  /* ramn 3/12/96 */
#endif

/* RJM100196 */
/* Dynamic patch download support */
ubyte last_mdm_status;

/*******************************************************************************
/
/    update_modem_status
/
/    Author:   RSA
/
/    Creation Date: 10/01/94
/
/    Description:   This routine will read modem status from the DSP
/                       and map it from CONNECTED to REMOTE_TEST when
/                       necessary.  It also needs to map RENEGOTIATING
/                       to RETRAIN.
/
/    Input Parameters:   None
/
/    Output Parameter:   None
/
/    Global Variables Changed:   modem_status
/
/    Users: (routines that used this)   mt_bg
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
*******************************************************************************/

#ifdef DEBUG
int drops_due_to_retrain;
#endif

void update_modem_status(void)

{
   ubyte temp_modem_status;

   modem_status = read_dsp_modem_status_reg() & MODEM_STATUS_MASK;

/* RJM100196 */
/* Dynamic patch download support - but not implemented */
   /* Only if DSP state changes */
   if( modem_status != last_mdm_status )
   {
       /*
          Depending upon the current state of the DSP,
          special activities are to done as follows.
       */

       /* Stash away */
       temp_modem_status = last_mdm_status;
       last_mdm_status = modem_status;

       switch( modem_status )
       {
           case RETRAINING:
               modem_state = RETRAIN;
               rtrn_state  = RETRAIN_DP;
               retrain_started = TRUE;
	 	        retrain_timer = 900;

               /* At speeds < V22bis, there isn't RT capability */
               if( line_mode < MT_V22BIS )
               #ifdef DEBUG
               {
                   drops_due_to_retrain++;
                   modem_state = DROP1;
               }
               #else
	                modem_state = DROP1;
	       #endif

               if (temp_modem_status == CONNECTED)
                    dsppatch(RETRAIN_PATCH);
               break;

           case RENEGOTIATING:
               modem_state = RETRAIN;
               rtrn_state  = RETRAIN_DP;
               retrain_started = TRUE;
	 	        retrain_timer = 500;

               if (temp_modem_status == CONNECTED)
                    dsppatch(RENEGOTIATING_PATCH);
               break;

           case CONNECTED:
               dsppatch(DATA_PATCH);
               break;

           default:
               /* Do nothing */
               break;
       }
   }

   /*   map modem status RENEGOTIATING to RETRAINING   */
   if (modem_status == RENEGOTIATING)
   {
	    modem_status = RETRAINING;
   }
   else if ((modem_status == CONNECTED) &&
	    (received_RDL || digital_loopback_on))
   {
	    modem_status = REMOTE_TEST;
   }

   /*   look for case where DP drops   */
   if (modem_status == DROPPING)
	    modem_state = DROP1;
}


/*******************************************************************************
/
/                     mt_bg
/
/    Author:   RSA
/
/    Creation Date: 03/01/94
/
/    Description:   This routine is called by the host to update the modem
/                   task state machine.
/
/    Input Parameters:   None
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)   modem_task
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
*******************************************************************************/
void mt_bg(void)
{
   update_modem_status();

   switch  (modem_state)
   {
	case (IDLE):
	   break;

	case (ORIG):
	  if (!s7_timer)
	   modem_state = DROP1;
	   if (modem_status == CONNECTED)
		modem_state = CON;
	   else if (modem_status == IDLE)
		modem_state = DROP1;
/**start change for v8/v34 support **********/
      if (modem_status != CONNECTED)
      {
         if (v8_configured)
		      v8_orig();
      }
      else
      {
         v8_configured = FALSE;
      }
/**end change for v8/v34 support ************/
	   break;

	case (ANSW):
	  if (!s7_timer)
	   modem_state = DROP1;
	   if (modem_status == CONNECTED)
		modem_state = CON;
	   else if (modem_status == IDLE)
		modem_state = DROP1;
/**start change for v8/v34 support **********/
      if (modem_status != CONNECTED)
      {
	    if (v8_configured)
		   v8_answ();
      }
      else
      {
         v8_configured = FALSE;
      }
/**end change for v8/v34 support ************/
	   break;

	case (CON):
	connect_processor();
	   check_rdl();
	   break;

	case (DROP1):

           #ifdef DEBUG
           *(int *)0x80=23;
           #endif

      /* Reboot the DSP */
      dspdrv_reset_dsp();

	   /*   reset variables   */
	   fall_back_en = TRUE;
	   fall_frwd_en = FALSE;
	   fall_back_attempt = FALSE;
	   fall_frwd_attempt = FALSE;
	   received_RDL = FALSE;
	   digital_loopback_on = FALSE;
	   modem_state = DROP2;
	   drop_flag = FALSE;

/* reset the speed variable used in reneg for next conn */
/* ramn 3/14/96 */
			spd_of_prv_conn_up = 0 ;
			spd_of_prv_conn_dn = 0 ;


	   /*
	   current_command [0] = PACKET_MODEM_INIT;
	   current_command [1] = 0x00;
	   current_command [2] = PACKET_MODEM_INIT_LEN;
	   current_command [3] = 0x00;
	   while (error_occured = cp_dsp());
	   while (error_occured = dsp_acknowledge_packet());
	   */

	   LOAD_MODEM_INIT
	   ack_or_response = ACK;
	   send_pkt_to_dsp();

	   init_call_progress(ON_HOOK);
	   break;

	case (DROP2):
	   if (modem_status == IDLE)
		modem_state = IDLE;
	   break;

	case (RETRAIN):
	   retrain_processor();
	   break;

	case (FAX_ANSW):
	   if (modem_status == FAX_CONNECTED)
		 modem_state = FAX_CON;
	   else if (modem_status == IDLE)
		modem_state = FAX_DROP;
	   break;

	case (FAX_ORIG):
	   if (modem_status == FAX_CONNECTED)
		modem_state = FAX_CON;
	   else if (modem_status == IDLE)
		modem_state = FAX_DROP;
	   break;

	case (FAX_CON):
	   if (modem_status == IDLE)
		modem_state = FAX_DROP;
	   break;

	case (FAX_DROP):
	   if (modem_status == IDLE)
		modem_state = IDLE;
	   break;

	case (FAX_AUTO_ANSWER):
	   if (modem_status == FAX_CONNECTED)
		modem_state = FAX_CON;
	   else if (modem_status == IDLE)
		modem_state = IDLE;
	   break;

	case (VOICE_CON):
	   break;

   }

}

/*******************************************************************************
/
/                      mt_timer
/
/    Author:   RSA
/
/    Creation Date: 03/01/94
/
/    Description:   This routine will update modem task timers.
/                       It should be called every 10 ms.
/                   All timers in the modem task are 10ms timers
/
/    Input Parameters:   None
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)  modem_timer
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
*******************************************************************************/
void mt_timer(void)
{
   /*  These timers count down to one.  Zero is the inactive state  */
   if (mse_poor_timer > 1)
	 mse_poor_timer--;

   if (mse_good_timer > 1)
	 mse_good_timer--;

   if (mse_invalid_timer > 1)
	 mse_invalid_timer--;

   if (retrain_timer > 1)
	 retrain_timer--;

   if (dsp_timer)
	dsp_timer--;

/*MRM22096*/
/*timer for v32bis timeout when in v34 mode */

	if   (v8_timer)
		v8_timer--;

/*MRM22996*/

	if   (sq_timer)
		sq_timer--;

	if(cd_timer)
		cd_timer--; /* ramn 3/2/96 */

	if(sig_chk_timer)     /* ramn 3/5/96 */
		sig_chk_timer--;

    if (mt_cts_timer)
	mt_cts_timer--;

   if (s7_timer)
	s7_timer--;

/**start change for v8/v34 support **********/
   if (CI_silence_timer)
	CI_silence_timer--;
/**end change for v8/v34 support ************/

}

/*******************************************************************************
/
/                   mt_reset
/
/    Author:   RSA
/
/    Creation Date: 03/01/94
/
/    Description:   This routine will terminate all activities and return
/                       the modem to its initial power-up IDLE state.
/
/    Input Parameters:   None
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/                                       dtmf_tone_duration
/                                       dtmf_interdigit_delay
/
/    Users: (routines that used this)  modem_reset
/                                              acu_reset
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void mt_reset(void)
{
   /*   Disconnect modem processing   */
   set_hook_relay(OFF);
   set_speaker(OFF);

   modem_state = IDLE;

   dtmf_tone_duration = default_dtmf_tone_duration;
   dtmf_interdigit_delay = default_dtmf_interdigit_delay;

    /*
    current_command [0] = PACKET_MODEM_INIT;
    current_command [1] = 0x00;
    current_command [2] = PACKET_MODEM_INIT_LEN;
    current_command [3] = 0x00;
    while (error_occured = cp_dsp());
    while (error_occured = dsp_acknowledge_packet());
    */

    LOAD_MODEM_INIT
    ack_or_response = ACK;
    send_pkt_to_dsp();

   init_call_progress(ON_HOOK);

   fall_back_en = TRUE;
   fall_frwd_en = FALSE;
   fall_back_attempt = FALSE;
   fall_frwd_attempt = FALSE;
   received_RDL = FALSE;
   check_RDL_flag = FALSE;
   drop_flag = FALSE;
}


/*******************************************************************************
/
/                     mt_drop
/
/    Author:   RSA
/
/    Creation Date: 03/01/94
/
/    Description:   This routine will force the modem task to DROP1 state.
/
/    Input Parameters:   v32_cleardown_enabled = 0 Disabled
/                                  1 Enabled
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)  modem_drop
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void mt_drop(ubyte v32_cleardown_enable)
{
   if ( (modem_status != IDLE) && (v32_cleardown_enable) &&
	  /*chk_if_v32_line_mode() &&*/ (!drop_flag) )
   {
/**start change for v8/v34 support **********/
/* mt_set_rate_seq(0);                      */
   mt_set_rate_seq(0,0);
/**end change for v8/v34 support ************/

	  bit_rate = 0;

/* RJM041796 */
#if 0
	  dsp_mode = modem_mode;
#endif
	  dsp_mode = mt_conn_mode;

	  current_command[4] = 0;  /* ramn 3/5/96 */
	  current_command[5] = 0;
	  LOAD_MODEM_RENEGOTIATE
	  ack_or_response = ACK;
  	  send_pkt_to_dsp();

	  drop_flag = TRUE;
     modem_state  = RETRAIN;
     rtrn_state   = RETRAIN_DP;
     send_renegot = TRUE;
     retrain_started = TRUE;
     retrain_timer = 500;
   }

   /*   send modem init to drop   */
   else
	  modem_state=DROP1;
}


/*******************************************************************************
/
/                     mt_connect
/
/    Author:   RSA
/
/    Creation Date: 03/01/94
/
/    Description:   This routine will initiate the handshake process.
/              It sets modem_state to either ANS1 or ORG1 state.
/
/
/    Input Parameters:
/         ubyte answer:
/                   0 = answer mode
/                   1 = originate mode
/
/         ubyte (MAX) bit rate:
/                   0 = 75/600 bps
/                   1 = 75/1200 bps
/                   2 = 300 bps
/                   3 = 1200 bps
/                   4 = 2400 bps
/                   5 = 4800 bps
/                   6 = 7200 bps
/                   7 = 9600 bps
/                   8 = 12000 bps
/                   9 = 14400 bps
/                 10 = 16800 bps
/                 11 = 19200 bps
/                 12 = 24000 bps
/                 13 = 28800 bps
/                 14 = reserved
/           15 = reserved
/
/         ubyte configuration mode:
/                   0 = Bell 103
/                   1 = Bell 212A
/                   2 = V.21
/                   3 = V.21 Channel 2
/                   4 = V.23 ADX
/                   5 = V.23 HDX
/                   6 = V.22
/                   7 = V.22bis
/                   8 = V.27 short
/                   9 = V.27 long
/                   10 = V.27 ter
/                   11 = V.29
/                   12 = V.32 bis
/                   13 = V.17 short
/                   14 = V.17 long
/                   15 = voice
/
/         ubyte clock_code:
/                   0 = TXC from modem
/                   1 = TXC from DTE, pin 24
/                   2 = TXC from RXC
/
/         ubyte leased:
/                   0 = PSTN
/                   1 = 2 wire leased
/                   2 = 4 wire leased
/
/         ubyte automode:
/                   0 = off
/                   1 = on
/
/         ubyte fax connection type:
/                   0 = data only
/                   1 = fax only
/                   2 = data and fax
/
/         ubyte call_tone_enabled:
/                   0 = call tone off
/                   1 = call tone on
/
/      fax connection type is not used in this version
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users:    modem_connect()
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
*******************************************************************************/
void mt_connect(ubyte orig, ubyte bit_rate, ubyte mode, ubyte clock_code,
		   ubyte leased, ubyte automode, ubyte fax, ubyte call_tone_enabled,ubyte etc_enabled)
{
    ubyte dsp_mode, trellis;
    ubyte line_select,v25_procedure,etc_mode,v8_mode,v23_mode,modem_b_loop;

    line_select = 0;
    etc_mode = 0;
    v8_mode = 0 ;
    v23_mode = 0;
    modem_b_loop = 0;

/***start change for v8/v34 support ***************/
    /* save connect params for issuing V8 second connect to DSP */
    mt_conn_orig       = orig;
    mt_conn_bit_rate   = bit_rate;
    mt_conn_mode       = mode;
    mt_conn_clock_code = clock_code;
    mt_conn_leased     = leased;

    /* AT&T V34 data pump wont accept V8 on with mod mode != V34 */
    if( mode != MT_V34 )
       automode &= ~V8_ENABLED_BIT;

    /* If V8 is disabled, then don't allow V34 rates */
    if( (mode == MT_V34) && !(automode & V8_ENABLED_BIT) )
    {
       mode = MT_V32BIS;
    }

    /* For Bell connections, turnoff automode */
    if( mode < MT_V22 )
    {
       automode &= ~AUTOMODE_ENABLED_BIT;
    }

    /* if bit rate less than 2400, don't run V.8 */
    if (bit_rate < MT_BPS2400)
    {
      if (automode & V8_ENABLED_BIT)
      {
         automode &= ~V8_ENABLED_BIT;
         v8_configured = FALSE;
      }
    }
    mt_conn_automode   = automode;
    mt_conn_fax        = fax;
    mt_conn_etc_enabled= etc_enabled;
    mt_conn_call_tone_enabled = call_tone_enabled;

/* RJM041796 */
   /*
      Determine the bit mask for the desired bit rate. The mask
      will be used to determine if automode for V.34 should
      be forced ON/OFF depending upon the rate_seq_map passed
      in in the mt_set_rate_seq() call. If only a single rate
      is set, then MIN=MAX and automode should be OFF.

      We need to convert from a bit_rate to a bit mask. For
      example if the mt_conn_bit_rate passed in were BPS28800(19),
      then the bit mask is BPS28800_ONLY(0x0800) which if MIN=MAX,
      then the rate_seq_map passed into mt_set_rate_seq() should
      also be BPS28800_ONLY and automode would be set to OFF.
   */
   mt_req_max_rate_mask = get_rate_mask(bit_rate);

/* RJM041796 */
   /* Limit the bit rate to 14400 on the first connect message
      (pre-V8) to handle the case where the remote modem might be
      a V32bis type. The DSP upon detecting ANSWERTONE, drops out
      of V34 (if configured) into the Lagacy(V32) mode and needs to
      know what the maximim line rate is to be.
   */
   if( v8_state == V8_START )
   {
      if( bit_rate > MT_BPS14400 )
      {
         bit_rate = MT_BPS14400;
      }
   }

/* RJM041796 */
   /* Determine whether to turn on CT on in the DSP
      by the value of calling tone passed in as follows:

      call_tone_enabled = 0, then CT and CI are OFF for ALL modulations
                          1, then CT is ON for ALL modulations
                          2, CI is ON for V34 and CT is on for ALL others.
   */
   v8_ci_enabled = 0;  /* default */
   if( call_tone_enabled == 2 )
   {
      if( mt_conn_mode >= MT_V34 )
      {
         v8_ci_enabled = 1;
         call_tone_enabled = 0;
         mt_conn_call_tone_enabled = 0;
      }
      else
      {
         call_tone_enabled = 1;
         mt_conn_call_tone_enabled = 1;
      }
   }

   /* set modem module word based on connect paramter */
   if (automode)
   {
	 v8_mod_modes = V8_MOD_MODE_DEFAULT;
	 if (mode < MT_V34)
	 {
	    v8_mod_modes &= ~V34FULL_MASK;
	    v8_mod_modes &= ~V34HALF_MASK;
	 }
	 if (mode < MT_V32)
	 {
	    v8_mod_modes &= ~V32_MASK;
	 }
	 if (mode < MT_V29)
	 {
	    v8_mod_modes &= ~V29HALF_MASK;
	 }
	 if (mode < MT_V23_HDX)
	 {
	    v8_mod_modes &= ~V23FULL_MASK;
	    v8_mod_modes &= ~V23HALF_MASK;
	 }
	 if (mode < MT_V21)
	 {
	    v8_mod_modes &= ~V21_MASK;
	 }
   }
   else /* NOT automoding, issue only 1 connect rate */
   {
	 v8_mod_modes = 0;
	 switch (mode)
	 {
	    case (MT_V34):
		  v8_mod_modes |= V34HALF_MASK;
	    break;

	    case (MT_V32):
		  v8_mod_modes |= V32_MASK;
	    break;

	    case (MT_V29):
		  v8_mod_modes |= V29HALF_MASK;
	    break;

	    case (MT_V23_HDX):
		  v8_mod_modes |= V23FULL_MASK;
		  v8_mod_modes |= V23HALF_MASK;
	    break;

	    case (MT_V21):
		  v8_mod_modes |= V21_MASK;
	    break;
	 }
   }

   set_v8_tx_msg();
/***end change for v8/v34 support ***************/

    /*    set modem_state    */
    if ( (fax == 2) && (!orig) )
	 modem_state = FAX_AUTO_ANSWER;
    else if (fax == 1)
    {
	   if (!orig)
		{
	    modem_state=FAX_ANSW;
/*MRM2296 no v8 mode and auto mode in fax mode*/
			v8_configured = FALSE;
			automode = FALSE;
		}
	 else    /* originating */
		{
/*MRM2296 no v8 mode and auto mode in fax mode*/
			modem_state=FAX_ORIG;
			v8_configured = FALSE;
			automode = FALSE;
		}

    }
    else if (fax == 3)
	 {
/*MRM2296 no v8 mode and auto mode in voice mode*/
	modem_state = VOICE_CON;
		v8_configured = FALSE;
		automode = FALSE;
	 }
    /* process answer or originate mode */
    else if (!orig)
    {
	 modem_state=ANSW;
	 if (CM_received)
	    v8_mode = CM_RXD;
    }
    else /*originate*/
    {
	 modem_state=ORIG;
	 if (JM_received)
	    v8_mode = JM_RXD;
    }

/***start change for v8/v34 support *************/
/*   if (mode > MT_V22BIS)                      */
/*     dsp_mode = 0x0C;                         */
/*   else                                       */
/***end change for v8/v34 support ***************/
	  dsp_mode = mode;


   if (mode == MT_V32)
	trellis = 1;
   else
	trellis = 0;


/*mrm31496*/
/*if v23 mode and we are originating*/

   if ((mode == 4) || (mode == 5))

	{
		if(orig)
			v23_mode = 1;
   }
    /*
    current_command [0] = PACKET_MODEM_CONNECT;
    current_command [1] = 0x00;
    current_command [2] = PACKET_MODEM_CONNECT_LEN;
    current_command [3] = 0x00;

   packetize_parameter(bit_rate, CONNECT_BIT_RATE_BYTE, CONNECT_BIT_RATE_START_BIT);
   packetize_parameter(clock_code, CLOCK_SOURCE_BYTE, CLOCK_SOURCE_START_BIT);
   packetize_parameter(dsp_mode, CONFIG_MODE_BYTE, CONFIG_MODE_START_BIT);
   packetize_parameter(line_select, LINE_SELECT_BYTE, LINE_SELECT_START_BIT);
   packetize_parameter(call_tone_enabled, V25_PROCEDURE_BYTE, V25_PROCEDURE_START_BIT);
   packetize_parameter(answer, CHANNEL_BYTE, CHANNEL_START_BIT);
   packetize_parameter(automode, AUTOMODE_V8_BYTE, AUTOMODE_V8_START_BIT);
   packetize_parameter(fax, CONNECTION_TYPE_BYTE, CONNECTION_TYPE_START_BIT);
   packetize_parameter(etc_mode, ENHANCED_THRO_CELL_BYTE, ENHANCED_THRO_CELL_START_BIT);
   packetize_parameter(v8_mode, V8_INFORMATION_BYTE, V8_INFORMATION_START_BIT);
   packetize_parameter(v23_mode, V23_FRWD_BKWD_CH_BYTE, V23_FRWD_BKWD_CH_START_BIT);
   packetize_parameter(mt_retrain_enable, V22SQ_RETRAIN_BYTE, V22SQ_RETRAIN_START_BIT);
   packetize_parameter(modem_b_loop, MODEM_B_LOOP2_BYTE, MODEM_B_LOOP2_START_BIT);
   packetize_parameter(trellis, TRELLIS_BYTE, TRELLIS_DISABLE_START_BIT);
   while (error_occured = cp_dsp());
   while (error_occured = dsp_acknowledge_packet());
   */
   LOAD_MODEM_CONNECT
   ack_or_response = ACK;
   send_pkt_to_dsp();

   /*   set timers inactive   */
   retrain_timer = 0;
   mse_good_timer = 0;
   mse_poor_timer = 0;
   mse_invalid_timer = 0;
   s7_timer = cd_wait_time;

   fall_frwd_en = FALSE;
   fall_back_attempt = FALSE;
   fall_frwd_attempt = FALSE;
   determine_fall_back_en();
}


/*******************************************************************************
/
/                     mt_set_rate_seq
/
/    Author:   RSA
/
/    Creation Date: 03/01/94
/
/    Description:   This routine will inform the modem task the selected
/                        baud rates for the connection
/
/    Input Parameters: ubyte rates - selected baud rates. Values may be added
/                             together to specify several speeds.
/                              When viewed as 8 bit number the value is
/                              bit mapped.
/
/                          Value     Baud Rate
/                              1      reserved
/                              2      4800
/                               4     7200
/                               8     9600
/                              16     12000
/                              32     14400
/                              64     reserved
/                             128     reserved
/
/    Output Parameter:   None
/
/    Global Variables Changed: possible_rates, max_rate
/
/    Users: modem_set_rate_seq()
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
/***start change for v8/v34 support **************/
/* void mt_set_rate_seq(ubyte rates)             */
/* {                                             */
/*    possible_rates = rates;                    */
void mt_set_rate_seq(uword tx_rx,uword rx_only)
{
/* RJM041796 */
   /* Store the rate seq map */
   mt_rate_seq_map = tx_rx;

/***end change for v8/v34 support ***************/

   /*
   current_command [0] = PACKET_MODEM_SET_RATE_SEQ;
   current_command [1] = 0x00;
   current_command [2] = PACKET_MODEM_SET_RATE_SEQ_LEN;
   current_command [3] = 0x00;
   current_command [4] = rates;

   while (error_occured = cp_dsp());
   while (error_occured = dsp_acknowledge_packet());
   */

   LOAD_MODEM_SET_RATE_SEQ
   ack_or_response = ACK;
   send_pkt_to_dsp();

   #if 0
   command_packet[RATE_SEQ_BYTE] = rates;
   send_pkt_to_dsp(PACKET_MODEM_SET_RATE_SEQ, MODEM_SET_RATE_SEQ_LEN, ACK_NEEDED);
   #endif
}

/*******************************************************************************
/
/    Procedure:     mt_return_to_idle
/
/    Author:   RSA
/
/    Creation Date: 03/01/94
/
/    Description:   This routine cause the modem task to return to the
/                       IDLE state.
/
/    Input Parameters:   None
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void mt_return_to_idle(void)
{
    /*
    ubyte error_occured;
    current_command [0] = PACKET_MODEM_INIT;
    current_command [1] = 0x00;
    current_command [2] = PACKET_MODEM_INIT_LEN;
    current_command [3] = 0x00;
    while (error_occured = cp_dsp());
    while (error_occured = dsp_acknowledge_packet());
    */

    LOAD_MODEM_INIT
    ack_or_response = ACK;
    send_pkt_to_dsp();

    /* Return data pump to idle state */
    modem_state = IDLE;
    init_call_progress(ON_HOOK);
}

/****************************************************************************
 *
 *   Routine:           get_rate_mask()
 *
 *   Author:            RSA
 *
 *   Creation Data:     18/4/1996
 *
 *   Description:
 *
 *   Input Parameters:  ubyte bit_rate
 *
 *   Output Parameters: uword
 *
 *   Global Variables Changed: None
 *
 *   Users:
 *
 *   -----------------------------------------------------------
 *   -                       Modifications                     -
 *   -----------------------------------------------------------
 *
 *   Author & Date:  RSA
 *   Description:
 *   Reason:
 *
 ****************************************************************************/

uword get_rate_mask( ubyte bit_rate )
{
   uword mask;

   /*
      Determine the bit mask for the desired bit rate. The mask
      will be used to determine if automode for V.34 should
      be forced ON/OFF depending upon the rate_seq_map passed
      in in the mt_set_rate_seq() call. If only a single rate
      is set, then MIN=MAX and automode should be OFF.

      We need to convert from a bit_rate to a bit mask. For
      example if the mt_conn_bit_rate passed in were BPS28800(19),
      then the bit mask is BPS28800_ONLY(0x0800) which if MIN=MAX,
      then the rate_seq_map passed into mt_set_rate_seq() should
      also be BPS28800_ONLY and automode would be set to OFF.
   */

   switch( bit_rate )
   {
      case MT_BPS2400:
         mask = BPS2400_ONLY;
         break;

      case MT_BPS4800:
         mask = BPS4800_ONLY;
         break;

      case MT_BPS7200:
         mask = BPS7200_ONLY;
         break;

      case MT_BPS9600:
         mask = BPS9600_ONLY;
         break;

      case MT_BPS12000:
         mask = BPS12000_ONLY;
         break;

      case MT_BPS14400:
         mask = BPS14400_ONLY;
         break;

      case MT_BPS16800:
         mask = BPS16800_ONLY;
         break;

      case MT_BPS19200:
         mask = BPS19200_ONLY;
         break;

      case MT_BPS21600:
         mask = BPS21600_ONLY;
         break;

      case MT_BPS24000:
         mask = BPS24000_ONLY;
         break;

      case MT_BPS26400:
         mask = BPS26400_ONLY;
         break;

      case MT_BPS28800:
         mask = BPS28800_ONLY;
         break;

      case MT_BPS31200:
         mask = BPS31200_ONLY;
         break;

      case MT_BPS33600:
         mask = BPS33600_ONLY;
         break;

      case MT_BPS36000:
         mask = BPS36000_ONLY;
         break;

      case MT_BPS600:
      case MT_BPS1200_75:
      case MT_BPS75_1200:
      case MT_BPS300:
      case MT_BPS1200:
      case MT_BPS600_75:
      case MT_BPS75_600:
      case MT_BPS38400:
      case MT_BPS57600:
      case MT_BPS115200:
      default:
         mask = 0x0;
   }

   return( mask );
}
