/*
|----------------------------------------------------------------------------
|
| radio.h
|
|----------------------------------------------------------------------------
| NOTICE:
|	Copyright (C) 1993 by IBM/Pacific Communication Sciences, Inc.
|	All rights reserved.
|
| PURPOSE:
|
|
| MACHINE DEPENDENCE:
|
|
| PRODUCT DEPENDENCE:
|
|
|
| COMPILER:
|	Microtec Version 4.2
|
*/
/*
*       This is the header file which prototypes the radio control
*       routines.
*
*       All routines operate based on:
*
*       Radio Control CCA Interface
*       April 28,1993 Rev. 1.1
*
*       Radio Module Software Interface
*       Description" Rev 1 April 22,1993
*       Rev 1 April 28,1993  No changes to code
*
*       $Log$
;
;     Rev 1.13   01 Jun 1994 13:44:58   RAS
;  Initial Revision After Sharing Modemgr files with Product1
;
;     Rev 1.12   09 May 1994 18:27:38   RAS
;  Added new function (Init_radio_queue), and removed passing
;  queues to other functions.
;
;     Rev 1.11   09 May 1994 18:08:46   RAS
;  Included que.h
;
;     Rev 1.10   09 May 1994 17:56:18   RAS
;  Changed prototypes for various routines (added queues)
;
;     Rev 1.9   16 Mar 1994 09:02:42   jtn
;  Documentation changes only
;
;     Rev 1.8   21 Sep 1993 17:36:48   jtn
;  Added extern for rssi_table[].
*
*       char is 8 bits
*       int is  32 bits
*       short is 16 bits
*/

#include "que.h"
#define RADIO_EE_BLOCK_SIZE 8
#define RADIO_EE_MAX_BLOCK 32

extern unsigned char rssi_table[];
typedef struct {
			   BYTE radio_data [RADIO_EE_BLOCK_SIZE];
			   } radio_EE_block_struct;

typedef struct {
			   radio_EE_block_struct radio_EE_block [RADIO_EE_MAX_BLOCK];
			   } radio_EE_struct;


short Chan_convert(int chan,int *synth_val);
/***********************************************************************
* This function converts the channel number to a physical channel data
* expects the global variable radio_type to be set
* Input : int the channel number
* Output : in the physical channel data
* Function will "EXIT" if an illegal channel number is passed
************************************************************************/


short Read_rssi_dbw(void);
/************************************************************************
* This routine returns rssi in dbw
* RSSI sample always available and updated every 13us.  No need to
* request a sample.
*
* The FPGA returns the 8 msb of the 10 bit A/D.
* RSSI calculations based on CDPD Radio Transceiver Module Specifications
*  Spec.#292s033, Rev. 2, 2/17/93
*
* For RSSI table format and assumptions,
*    REF: Email Yoshiro Fukuoka to Steven Wood 2-23-93 Subj. EEPROM Params
*
* Input : None
* Output : None
* Returns : RSSI in dbw
************************************************************************/


unsigned char Read_rssi(void);
/************************************************************************
* This routine returns the raw rssi value returned from the FPGA
* The FPGA returns the 8 msb of the 10 bit A/D.
* Data is converted from signed to positive.
*
* Input : None
* Output : None
* Returns : 0-255
************************************************************************/

void Enable_synth(void);
/************************************************************************
* Sets the PLLEN level high.
* Input : None
* Output : None
* Returns : None
************************************************************************/

void Disable_synth(void);
/************************************************************************
* Sets the PLLEN line low
* Input : None
* Output : None
* Returns : None
************************************************************************/

void Synth_out(int data,short num_of_bits,char bit_pos);
/************************************************************************
* Writes data serially out to the synthesizer and clocks it in.
* Input : the data up to 32 bits
*         the number of bits to send out
*         the bit position on the port to send the serial data
* Output : none
* Returns : none
*
* Will toggle the clock twice
* Since this uses both edges the routine edge independent
* Sends MSB first
************************************************************************/


void Load_synth (int chan);
/************************************************************************
* Convert "chan" into a physical channel data, and send the data to the
* synthesizer unit.
* The Synthesizer will be enabled.
*
* Input : short chan
* Output : The physical channel data to the serial input of the FPGA
* Returns : None
*
* Uses the global variable of radio_type and expects it to be set.
************************************************************************/


short Check_synth(void);
/************************************************************************
* Checks the lock status of the synthesizer unit.
* Input : None
* Output : None
* Returns : TRUE (1) when the status is locked, FALSE (0) when unlocked
************************************************************************/


short Set_power_dbw (short power_dbw);
/************************************************************************
* Controls the power level of the power amplifier.  It converts
* power_level into D/A data for the PA power level based on the power
* level - D/A data table, and outputs the D/A data to the Tx Power Write
* port of the FPGA
* Input : power level in dbw
* Output : writes the D/A data to the Tx Power Write port
* Returns : the power level number
* only high 6 bits of 10 bit D/A is used        M.M. 4-27-93
* 6 bits aligned to bottom on 8 bit FPGA port   M.D. 4-27-93
************************************************************************/


void Set_power_level (char power_level);
/************************************************************************
* Controls the power level of the power amplifier.  It converts
* EIA power_level (0-10) into D/A data for the PA power level based on
* the power level - D/A data table, and outputs the D/A data to
* The final tx power level will be the one closest but > the standard
* radio levels (approx. 6)
* the Tx Power Write port of the FPGA
* Input : power level in 0 to 10 levels
* Output : writes the D/A data to the Tx Power Write port
* Returns : none
* only high 6 bits of 10 bit D/A is used        M.M. 4-27-93
* 6 bits aligned to bottom on 8 bit FPGA port   M.D. 4-27-93
*
* The EIA levels are in a global table tx_power_level.
* See CDPD spec. 4.2.2.1 table 401-2 V.0.8 March 19, 1993
************************************************************************/


void Adjust_power(BYTE data);
/************************************************************************
* Adjusts the power level of the power amplifier for
* calibration. It outputs data to the Tx Power Write port of the FPGA.
* Input : D/A convert data.
*         Uses only lower 6 bits of 8 bit register.
*         2's complement
* Output : writes the D/A data to the Tx Power Write port
* Returns : none
************************************************************************/


void Carrier_on(void);
/************************************************************************
* Turns the carrier on
* Input : none
* Output : none
* Returns : none
* The power supply to the transmitter section must be turned on and the
* transmitter key of the FPGA must be unlocked to turn the carrier on.
* PA_EN bit must have been set to be valid.
* This function is used for the AMPS and the test operation modes.
************************************************************************/


void Carrier_off(void);
/************************************************************************
* Turns the carrier off
* Input : none
* Output : none
* Returns : none
************************************************************************/


short Check_carrier(void);
/************************************************************************
* Checks the carrier status. Returns TRUE (1) when the carrier is on, and
* returns FALSE (0) when off.
* Input : none
* Output : none
* Returns : 1 or 0
************************************************************************/


void Rxpsc_on();
/************************************************************************
* Turn on the power supply to the reciever
* section of the radio module.
* Also, sends the data for the reference counter to the synthesizer unit.
* Will also enable and tune the synthesizers.
* Input : .
* Output : none
* Returns : none
************************************************************************/


void Rxpsc_off();
/************************************************************************
* Turn off the power supply to the receiver section of the radio module
* This also turns off the power to the synthesizer module.
* Input :
* Output : none
* Returns : none
************************************************************************/


void Txpsc_on();
/************************************************************************
* Turn on the power supply to the transmitter section of the radio module
* Also unlocks the transmitter key of the FPGA so that the DSP is able to
* control the carrier on/off.
* Input :
* Output : none
* Returns : none
************************************************************************/


void Txpsc_off();
/************************************************************************
* Turn off the power supply to the transmitter section of the radio module
* Also, locks the transmitter key of the FPGA
* Input :
* Output : none
* Returns : none
************************************************************************/


void Switch_antenna();
/************************************************************************
* Switch between the main antenna and the sub antenna for the antenna
* diversity control
* Input : none
* Output : none
* Returns : none
************************************************************************/


void Control_analog_switch(unsigned char path);
/************************************************************************
* Controls the analog switches for each operating mode, Idle mode,
* CDPD mode, AMPS Voice mode, AMPS Data mode, PSTN Voice mode, and PSTN
* Data mode.  Each bit of path represents a control of a specific analog
* Switch.
* Input : 8 bit switch control pattern
* Output : none
* Returns : none
************************************************************************/


void Eeprom_out(short data,char num_of_bits,char bit_pos);
/************************************************************************
* Writes data serially out to the eeprom and clocks it in.
* Input : the data up to 16 bits
*         the number of bits to send out
*         the bit position on the port to send the serial data
* Output : none
* Returns : none
*
* Will leave the clock of the eeprom in high state
* Eeprom clocks in on a low to high transition
* Sends MSB first
************************************************************************/


void Read_nvm(
	short addr,
	BYTE *read_data
);
/************************************************************************
* Reads a content of the non-volatile memory (Serial EEPROM) location
* specified by address (physical address of EEPROM)
* The reads are performed in 8 byte blocks
* Input : The block number which will be converted to a physical addr
*         pointer to where the 8 bytes of data should go
* Output : none
* Returns : none
*
* Will write to 8 consecutive 16 bit memory locations pointed to by
*     "*read_data"
************************************************************************/


void Write_nvm(                         /* WRITES 4 WORDS OF THE SERIAL EE NVM */
	short addr,                             /* Starting address in the EEPROM (IN) */
	BYTE *write_data                /* Ptr to block of 8 bytres to write (IN) */
);
/************************************************************************
* Writes data to a location of the non-volatile memory specified by
* address.
* Input : block number, address of data locations to write to
* Output : none
* Returns : none
************************************************************************/


void Load_rssi_table();
/************************************************************************
* Loads the RSSI look up table from serial eeprom
* Will load the table with min rssi in [0]
*    & max rssi in [SIZE_OF_RSSI_TABLE-1]
* The assumed step size of the RSSI is 4 db (see defines)
* Assumed min is -110 dbm -68 dbw (see defines)
* Start of table address is assumed to be 0x00 (see defines)
* REF: Email Yoshiro Fukuoka to Steven Wood 2-23-93
* Input : none
* Output : none
* Returns : none
* Assumes each read of Read_nvm gets 8 bytes
* Assumes rssi table has 21 entries
************************************************************************/


void Init_radio_queue(Queue *que);

void Init_radio(void);
/************************************************************************
* Initialize the radio control of the CCA :
*       1.  Turn PA off
*       2.  Turn Rx power supply off
*       3.  Selects an antenna
*
* Input : none
* Output : none
* Returns : none
************************************************************************/

void Shut_off_radio();
/************************************************************************
* Shut off radio related hardware :
*       1.  Turn off the carrier.
*       2.  Lock the transmitter key.
*       3.  Turn off the receiver power supply.
*       4.  Turn off the transmitter power supply.
*       5.  Turn the modulator off.
*       6.  Output '0' to the power control DAC.
*
* Input : none
* Output : none
* Returns : none
************************************************************************/

void Load_tx_table();
/************************************************************************
* Loads the tx look up table from serial eeprom
* also loads up the radio id.
* transmit levels from 0 to 10
* Input : none
* Output : none
* Returns : none
* Assumes each read of Read_nvm gets 8 bytes
* Assumes tx table has 11 entries
************************************************************************/

unsigned char Instant_rssi(void);
/************************************************************************
* This routine returns the instant raw rssi value returned from the FPGA
* The FPGA returns the 8 msb of the 10 bit A/D.
* The number is converted to positive
*
* Input : None
* Output : RSSI reading 0 to 255
************************************************************************/

short Instant_rssi_dbw(void);
/************************************************************************
* This routine returns rssi in dbw
* RSSI sample always available and updated every 13us.  No need to
* request a sample.
*
* The FPGA returns the 8 msb of the 10 bit A/D.
* RSSI calculations based on serial eeprom calibration tables.
*
* For RSSI table format and assumptions,
*    REF: Email Yoshiro Fukuoka to Steven Wood 2-23-93 Subj. EEPROM Params
*         Serial EEPROM Memory Allocation Document rev 1.0 May 6 93
*
* Input : None
* Output : None
* Returns : RSSI in dbw
************************************************************************/


void Select_antenna_A();
/************************************************************************
* Selects the main antenna
* Input : none
* Output : none
* Returns : none
************************************************************************/

void Select_antenna_B();
/************************************************************************
* Selects the second antenna
* Input : none
* Output : none
* Returns : none
************************************************************************/

short Read_rssi_dbm(void);
/************************************************************************
* This routine returns rssi in dbm
* Input : None
* Output : None
* Returns : RSSI in dbm
************************************************************************/

short Instant_rssi_dbm(void);
/************************************************************************
* This routine returns rssi in dbm.
* Input : None
* Output : None
* Returns : RSSI in dbm
************************************************************************/

short Set_power_dbm (short power_dbm);
/************************************************************************
* Controls the power level of the power amplifierfor CDPD.  It converts
* power_level into D/A data for the PA power level based on the power
* level - D/A data table, and outputs the D/A data to the Tx Power Write
* port of the FPGA
* Input : power level in dbm
* Output : writes the D/A data to the Tx Power Write port
* Returns : the power level number
* only high 6 bits of 10 bit D/A is used        M.M. 4-27-93
* 6 bits aligned to bottom on 8 bit FPGA port   M.D. 4-27-93
************************************************************************/

void Unlock_xmitter (void);
/************************************************************************
* Unlocks the transmitter key in FPGA to gain a control of turning
* the carrier on/off.
* Input : none
* Output : none
* Returns : none
************************************************************************/

void Lock_xmitter (void);
/************************************************************************
* Locks the transmitter key in FPGA to disable a control of turning
* the carrier on/off.
* Input : none
* Output : none
* Returns : none
************************************************************************/

