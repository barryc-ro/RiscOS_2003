/*
|----------------------------------------------------------------------------
|
| ee_struc.h - defines structure of data section of parallel EEPROM
|
|----------------------------------------------------------------------------
| NOTICE:
|       Copyright (C) 1993-1994 by IBM/PCSI.
|       All rights reserved.
|
| PURPOSE:
|       Gives structure and layout of the parallel EEPROM data zone in the
|       Product 1 Subscriber Unit.
|
| MACHINE DEPENDENCE:
|       None.
|
| PRODUCT DEPENDENCE:
|       Product 1 Subscriber Unit.
|
| COMPILER:
|       Microtec Research Inc. (MRI) MCC68K V4.3+
|
| REVISION HISTORY:
|       $Log$
;
;     Rev 1.24   01 Jun 1994 15:17:06   RAS
;  Added some cdpd sacred parameters to be compabile with product 1
;
;     Rev 1.23   01 Jun 1994 13:45:00   RAS
;  Initial Revision After Sharing Modemgr files with Product1
;
;     Rev 1.22   09 May 1994 18:01:44   RAS
;  Added include for que.h
;
;     Rev 1.21   19 Apr 1994 21:29:34   spb
;  Encryption
;
;     Rev 1.20   13 Mar 1994 13:22:14   ww
;  Add gateway string in eeprom area
;
;     Rev 1.19   08 Mar 1994 12:16:10   dbc
;  Put back a 4-byte dummy array where the subnetmask used to be in the
;  sacred region.
;
;     Rev 1.18   02 Mar 1994 09:12:34   ww
;  Remove subnetmask from EEprom area
;
;     Rev 1.17   12 Jan 1994 15:19:36   dbc
;  Added CDPD authentication parameters to sacred zone
;
;     Rev 1.16   29 Dec 1993 09:35:28   ww
;  Add one field sregs_CRC for CDPD S regs CRC only
;
;     Rev 1.15   28 Dec 1993 15:28:44   dbc
;  Changed copyright string to say 1992-1994.  Happy new near!
;
;     Rev 1.14   01 Dec 1993 18:44:52   JJM
;  Moved Burnin Results Parameters from mmgrParams to Sacred space.
;
;     Rev 1.13   29 Nov 1993 17:23:00   dbc
;  Removed eid, eid length, cdpdAddress, and subnetmask from CDPD area since
;  they're now stored in sacred region
;
;     Rev 1.12   19 Nov 1993 14:58:18   JJM
;  San Diego Version, overwrite Vegas Version
;
;     Rev 1.12   10 Nov 1993 13:09:50   JJM
;  Added a field to count the number of complete passes thru the DIAGs the
;  burni code has completed.
;
;     Rev 1.11   29 Oct 1993 18:43:36   dbc
;  added COPYRIGHT_STRING for ATI4 output
;
;     Rev 1.10   28 Oct 1993 21:47:00   JJM
;  Expanded the mode manager parameters area to 64 bytes, and included 32
;  bytes for burnin diagnostic results
;
;     Rev 1.9   22 Oct 1993 07:51:08   dbc
;  Added new protected/sacred parameters region, total is now 512 bytes.
;
;     Rev 1.8   18 Oct 1993 13:11:40   ww
;  Added fields  eid_length, subnetmask in CDPD eeprom area
;
;     Rev 1.7   01 Oct 1993 11:29:30   dbc
;  Added # of retried EE write bytes to bootmon params
;
;     Rev 1.6   21 Sep 1993 14:37:24   ww
;  Added dial string storage in eeprom
;
;     Rev 1.5   20 Sep 1993 15:58:12   ww
;  Added cdpd equipment ID and CRC for CDPD zone
;
;     Rev 1.4   12 Sep 1993 22:31:14   dbc
;  added missing radio params ptr typedef, removed a couple of unused macros
;
;     Rev 1.3   08 Sep 1993 18:02:58   dbc
;  removed dummy radio params struct, now include radio.h
;
;     Rev 1.2   03 Sep 1993 16:54:38   dbc
;  Added LSAI and SPNI buffers in CDPD struct
;
;     Rev 1.1   25 Aug 1993 20:11:50   dbc
;  Large revision to give every mode a fixed block, added radio parameters, put
;  modemgr, bootmon and CDPD params inside uniform unions.
;
;     Rev 1.0   22 Aug 1993 10:50:34   dbc
;  Initial revision.
|
*/

/* Protect vs multiple inclusion */
#ifndef __EE_STRUC_H
#define __EE_STRUC_H


#include "local.h"
#include "hwconfig.h"           /* defines EEPROM_DATA base */
#include "cdpdsreg.h"           /* S-register structs for CDPD mode */
#include "que.h"
#include "radio.h"                      /* Radio/NAM parameter zone */

/*
| Product-wide, unchanging strings
*/

/* OEM_STRING is the product identifier given by ATI4. */
/* If this ever changes, the ThinkPad flash diagnostics must change too! */

#define OEM_STRING         "IBM/PCSI Comm Module"
#define COPYRIGHT_STRING   "Copyright (C) 1992-1994 PCSI and IBM.  All rights reserved."

/*
|--------------------------------------
| Structs of PCSI-defined EE parameters
|--------------------------------------
*/

/*
|----------------------------
| NON-RADIO SACRED PARAMETERS
|----------------------------
| These items constitute the unit's identity and must not be overwritten
|       even by EE update downloads.
*/

#define NUMBER_OF_BURNIN_TESTS 32       /* number of diags to run during burnin */

typedef struct {
/*
| CDPD IP address and EID parameters
*/
	BYTE cdpdAddress[4];                            /* IP addr of CDPD unit         */
	BYTE equipment_id[6];                           /* CDPD equipment ID field      */
	BYTE eid_length;                                        /* EID length                           */
	BYTE dummy[4];                                          /* used to be subnetmask        */

/*
| Burn-in parameters
*/
	BYTE  burninDiagRslts[NUMBER_OF_BURNIN_TESTS];  /* burnin Diag results are kept here */
	USHORT  diagRepCount;                           /* number of reps thru all Diags */
/*
| CDPD authentication parameters
*/
	BYTE cdpd_asn[2];                                       /* authentication sequence number */
	BYTE cdpd_arn[8];                                       /* authentication random number */
   BYTE cdpd_reg_count;                                    /* registration count */
	BYTE cdpd_oasn[2];             /* old authentication sequence number */
	BYTE cdpd_oarn[8];             /* old authentication random number */
} sacred_EE_struct;


#define SACRED_PARAM_SIZE               256
typedef union {
	BYTE foo[SACRED_PARAM_SIZE];            /* fix the size of the block */
	sacred_EE_struct sacredParams;          /* the actual struct */
} EE_sacred_params;
typedef sacred_EE_struct *EE_sacred_ptr;

/*
|----------------------
| RADIO/AMPS PARAMETERS
|----------------------
| These parameters are also "sacred" and are not overwritten by EE updates.
*/

#define EE_RADIO_PARAM_SIZE     256             /* 32 8-byte blocks */
typedef union {
	BYTE    foo[EE_RADIO_PARAM_SIZE];       /* fix the size of the block */
	radio_EE_struct radioParams;            /* the actual struct */
} EE_radio_params;
typedef radio_EE_struct *EE_radio_ptr;

/*
|------------------------
| BOOT MONITOR PARAMETERS
|------------------------
*/

#define EE_BOOTMON_PARAM_SIZE   32      /* max size of bootmon params, bytes */

/* Word full of misc flag bits for Boot Monitor */
typedef struct {
	BYTE    debugMsgsOn                     :1;             /* 1 => enables bootmon debug msgs */
	BYTE    noRAMStart                      :1;             /* 1 => bootmon won't launch RAM code */
	BYTE    noRAMStart1Time         :1;             /* one-trip version of noRAMStart */
} SU_flagByte_1;

typedef struct {
	USHORT                          EE_dataCRC;             /* CRC of data zone */
	SU_flagByte_1           EE_flags_1;             /* misc boot flags */
	BYTE                            filler1;                /* force even size */
	USHORT                          EE_retries;             /* how many bytes needed > 1 hit on last eeupdate */
} bootmon_EE_struct;

typedef union {
	BYTE foo[EE_BOOTMON_PARAM_SIZE];        /* fix the size of the block */
	bootmon_EE_struct bootParams;           /* the parameters */
} EE_bootmon_params;

/*
|------------------------
| MODE MANAGER PARAMETERS
|------------------------
*/
#define EE_MMGR_PARAM_SIZE              62              /* max size of mode mgr params */

typedef struct {
	BYTE    mgr_default_mode;                       /* modeMgr default mode */
	BYTE    filler1;                                        /* force even size */
} mmgr_EE_struct;

typedef union {
	BYTE foo[EE_MMGR_PARAM_SIZE];           /* fix the size of the block */
	mmgr_EE_struct  mmgrParams;                     /* the parameters */
} EE_mmgr_params;

/*
| CDPD MODE PARAMETERS
*/

#define EE_CDPD_PARAM_SIZE              300             /* max size of CDPD sregs in bytes */
#define MAX_REMOTE_HOSTS                4               /* how many remote IP hosts in CDPD */

typedef struct {
	REMOTE_HOST_STRUCT CDPD_remote_hosts[MAX_REMOTE_HOSTS]; /* rmt host addrs */
	CDPDSREGS sregs;                                        /* S-register storage */
	LSAIBUFF lsai_buff;                                     /* LSAI buffer */
	SPNIBUFF spni_buff;                                     /* SPNI buffer */
	DIAL_STR dial_str[4];                           /* dial string */
	GATE_STR gate_str[3];
	USHORT cdpd_param_CRC;                          /* CRC of this struct */
	USHORT sregs_CRC;                                       /* CRC for CDPD S regs only */
} CDPD_EE_struct;

typedef union{
	BYTE foo[EE_CDPD_PARAM_SIZE];           /* fix the size of CDPD sregs */
	CDPD_EE_struct cdpd;                            /* the parameters */
} EE_CDPD_params;

/*
|------------------------------------------------------
| STRUCT ACCUMULATING BOOTMON, MODEMGR AND CDPD EE DATA
|------------------------------------------------------
*/

typedef struct {
	EE_bootmon_params       EE_boot;                /* boot monitor union */
	EE_mmgr_params          EE_mmgr;                /* mode manager union */
	EE_CDPD_params          EE_cdpd;                /* CDPD parameter union */
} EE_param_blk;
typedef EE_param_blk *EE_param_ptr;


/*
| POINTERS TO VARIOUS PARAMETER BLOCKS IN THE EE DATA
|
|  EE_SACRED_PARAMS     points to Non-radio protected parameter block
|  EE_RADIO_PARAMS      points to AMPS/Radio protected parameter block
|  EE_SU_PARAMS         points to SU's main EEPROM data (for bmon, mmgr, cdpd)
|  PSTN_E2_BASE         points to the RSA PSTN EEPROM data zone
|
| They can be used as follows:
|               foo = EE_SU_PARAMS->EE_flags_1.noRAMStart;
|               foo = EE_SU_PARAMS->EE_cdpd.cdpd.sregs.s14.online_mode;
*/
#define EE_SACRED_PARAMS ((EE_sacred_ptr)EEPROM_DATA)

#define EE_RADIO_PARAMS ((EE_radio_ptr)(EEPROM_DATA + \
	sizeof(EE_sacred_params)))

#define EE_SU_PARAMS    ((EE_param_ptr)(EEPROM_DATA + \
	sizeof(EE_sacred_params) + \
	sizeof(EE_radio_params)))

#define PSTN_E2_BASE (BYTE *)(EEPROM_DATA + \
	sizeof(EE_sacred_params) + \
	sizeof(EE_radio_params) + \
	sizeof(EE_param_blk) )


#endif
