/****************************************************************************
/
/       Copyright 1988,1989,1990,1991,1992,1993,1994. All Rights Reserved by:
/           RSA
/           7701 Six Forks Road
/           Suite 120
/           Raleigh, NC  27615
/           (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/   File:  acio.c
/
/       Module Version: ACU 4.02
/
/   Function:  This file contains the routines for the ACU I/O code.
/
/       Product:  ACU
/
/       History:
/
/       Created:  6/09/95
/
/               ---------------------------------------------------------
/               -                       Modifications                   -
/               ---------------------------------------------------------
/
/               Author & Date:  RSA
/               Description:
/               Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "sys_def.h"
#include "acuiomem.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "dteequ.h"
#include "mt_coext.h"       /* For modem_1ms_timer */

ubyte acu_enabled;
ubyte acu_tx_intr_expected; /* SCC transmit busy flag */
ubyte bAcuTxRunning=0;

void acu_start_clamp(void);
void acu_end_clamp(void);
ubyte autobaud_control;

extern void PCterminal_to_char(unsigned char);
extern int  PCterminal_to_free(void);

void hardware_init(void)
{}

void acu_port_init(void)
{
   dte_port_init();        /* call common routine */
   dte_mode = ACU;
   acu_installed = TRUE;   /* set flag indicating acu interrupts installed */
   acu_status = 0x10;      /* transmmit disabled */
   autobaud_control = 0;
}


uword acu_from_num(void)
{
   if (dte_mode == ACU)
      return(dte_rx_count);
   else
      return(0);
}


void acu_set_parms(ubyte a,ubyte b,ubyte c)
{
    a = b = c;
}


void autobaud_on(void)
{
  autobaud_control = 1;
}

void autobaud_off(void)
{
  autobaud_control = 0;
}

void acu_set_tx_baud(ubyte a)
{
    a = 0;
}


/******************************************************************************
/
/            get_autobaud_rate
/
/   Author:    RSA
/
/   Creation Date:   01/24/91
/
/   Description:   This routine will take the SCON value programmed
/                       by autobaud and compare it with the calculated values
/                       in the autobaud table to determine the dte baud rate.
/
/   Input Parameters: None
/
/   Output Parameters: D0 - baud rate (bps)
/                 1 - 110
/                 2 - 300
/                 3 - 1200
/                 4 - 2400
/                 5 - 4800
/                 6 - 7200
/                 7 - 9600
/                 8 - 12000
/                 9 - 14400
/                10 - 16800
/                11 - 19200
/                12 - 38400
/                13 - 57600
/                14 - 600
/                15 - 115200
/
/   Global Variables Changed:  None
/
/   Users:   get_rx_baud_rate
/
/       -----------------------------------------------------------------
/   -         Modifications                 -
/   -----------------------------------------------------------------
/
/
/   Author & Date:   RSA
/   Description:
/
************************************************************************/
ubyte get_autobaud_rate(void)
{
   ubyte rate;
   extern ulong BaudRate;

   switch( BaudRate )
   {
      case 2400:
         rate = 4;
         break;

      case 4800:
         rate = 5;
         break;

      case 9600:
         rate = 7;
         break;

      case 19200:
         rate = 11;
         break;

      case 38400:
         rate = 12;
         break;

      case 57600:
         rate = 13;
         break;

      case 115200:
      default:
         rate = 15;
   }

   return(rate);
}

/******************************************************************************
/
/            check_all_sent
/
/   Author:    RSA
/
/   Creation Date:   01/24/91
/
/   Description:   This routine will return the value of the all sent flag
/         flag is set to FALSE when ACU_TO_NUM determines that
/         there are no more buffers to send. It is set to TRUE
/         when a transmit interrupt occurs.                /
/
/   Input Parameters: None
/
/   Output Parameters: ubyte - Status of all sent flag
/
/
/
/   Global Variables Changed:  None
/
/   Users:   auto_dialer, check_for_ring, build_cmd_line, at_O
/      disable_acu_on_terminal, output_test_messge
/
/       -----------------------------------------------------------------
/   -         Modifications                 -
/   -----------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
************************************************************************/
ubyte check_all_sent(void)
{
  if ( ! acu_to_num() )
	   return(TRUE);
  else
	   return(FALSE);
}


/************************************************************************
/
/            acu_restart
/
/   Author:    RSA
/
/   Creation Date:   12/19/94
/
/   Description:   This routine will restart the acu interrupt
/         processing.
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:   at_plus()
/
/       -----------------------------------------------------------------
/   -         Modifications                 -
/   -----------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/
************************************************************************/
void acu_restart(void)
{
/* enable tx and rx interrupts */
   acu_halted = FALSE;
   acu_port_init();
   pp_control(ON);      /* how do we know "ON?" */
}


void acu_reset_port(void)
{
}

/******************************************************************************
/
/            acu_halt
/
/   Author:    RSA
/
/   Creation Date:   12/19/94
/
/   Description:   This routine will stop all acu interrupts.
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:   at_plus()
/
/       -----------------------------------------------------------------
/   -         Modifications                 -
/   -----------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/
************************************************************************/
void acu_halt(void)
{
/* shut down tx and rx interrupts */
   acu_halted = TRUE;
   pp_control(OFF);
}


/************************************************************************
/
/       Routine: acu_timer
/
/       Author : RSA
/
/       Creation Date:  04/04/92
/
/       Description:
/
/       Input Parameters: None
/
/       Output Parameters: None
/
/       Global Variables Changed:
/
/       Users:
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:
/       Reason:
/
**********************************************************************/
void acu_timer(void)
{
    modem_timer();
    dte_timer();
    line_timer();

#if 0
    vcv_timer();
#endif

    /* Dial timer is a one millisecond timer. */
    if (dial_timer > 10)
      dial_timer -= 10;
    else
      dial_timer = 0;

    if (modem_1ms_timer > 0)
    {
      if (modem_1ms_timer > 10)
        modem_1ms_timer -= 10;
      else
        modem_1ms_timer = 0;
    }

    acu_10msec_timer++;
    if (! --timer100mS )
    {
	     timer100mS = 10;
	     acu_100msec_timer++;

	     if (! --timer1sec )
	     {
	      timer1sec = 10;
	      acu_1sec_timer++;
	      if (! --timer1min )
	      {
		     timer1min = 60;
		     acu_1min_timer++;
	      }
      }
    }

}/* end procedure */


/************************************************************************
/
/            acu_io_enable
/
/   Author:    RSA (drc)
/
/   Creation Date:   12/09/94
/
/   Description:   This routine will set the I/O mode to route the
/         data through the ACU code
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  Reinitialize buffer descriptor tables
/               ACU_STATUS, DTE_STATUS
/
/   Users:   enable_acu_on_terminal
/
/   -----------------------------------------------------------------
/   -         Modifications                                         -
/   -----------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/
************************************************************************/
void acu_io_enable(void)
{
   dte_mode = ACU;
   acu_installed = TRUE;
}

/************************************************************************
/
/            acu_io_disable
/
/   Author:    RSA
/
/   Creation Date:   01/24/91
/
/   Description:   This routine will switch the I/O ports to route the
/         data through the DTE code
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  Reinitialize buffer descriptor tables
/               Reset acu SCC interrupt vector
/               ACU_STATUS, DTE_STATUS
/
/   Users:   disable_acu_on_terminal
/
/       ------------------------------------------------------------
/   -         Modifications                 -
/   -----------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
************************************************************************/
void acu_io_disable(void)
{
   dte_mode = DTE;
   acu_installed = FALSE;
}

/******************************************************************************
/
/       Procedure: acu_tx_int
/
/       Author : RSA
/
/       Creation Date:  02/28/92
/
/       Description:    Called when the SCC TX FIFO is empty, this routine will
/                       fill the FIFO with the next available data for terminal
/
/       Input Parameters: None
/
/       Output Parameters: None
/
/       Global Variables Changed:  acu_tx_insert, acu_tx_count
/
/       Users:  rsa_main_isr()
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:
/       Reason:
/
***************************************************************************/
void acu_tx_int(void)
{
  register fifo_count;

  // Since this isn't really reentrant, if we are currently in the
  // process of running this code, DON'T reenter it!
  if (bAcuTxRunning)
  {
    return;
  }

  bAcuTxRunning = 1;

	 /* If there is no data to send, exit */
	 if ( ! acu_tx_count )
	 {
     acu_tx_intr_expected = FALSE;
     bAcuTxRunning = 0;
     return;
	 }

     /* while chars to send  */
     fifo_count = PCterminal_to_free();

     while ( acu_tx_count && fifo_count )
  {
	   /* stuff FIFO from buffer and bump indices */

       PCterminal_to_char(acu_tx_buffer[acu_tx_remove]);

       acu_tx_remove++;
	   acu_tx_count--;
	   fifo_count--;

	   /* reset buffer ptr ? */
	   if ( acu_tx_remove == ACU_BUFFER_SIZE )
	     acu_tx_remove = 0;
  }

  if (acu_tx_count > 0)                 // If not all chars were sent
    acu_tx_intr_expected = TRUE;
  else
    acu_tx_intr_expected = FALSE;

  // Clear status that says we're in the ACU TX INT
  bAcuTxRunning = 0;

}/* end procedure */



/* Stubs for Cirrus ACU */
/* data variables */

ubyte quarter_msec;
ubyte one_msec_timer;

void process_one_msec(void)
{}
void Install_Int(void)
{}
void dte_tx_interrupt(void)
{}
