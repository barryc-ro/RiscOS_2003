/* filename: serialio.c
   purpose:  To illustrate programming the serial port in ms-dos
	     this version was developed on an ibm pc-at with an ibm
	     serial adapter.
	     memory model = large
	     compile options /al /gs

*/
			   /* include files */
#include <stdio.h>
#include <ctype.h>
#include <dos.h>
#include <bios.h>
#include <conio.h>
#include <stdlib.h>
#include "sys_def.h"
#include "serialio.h"
#include "dosapp.h"
#include "dteequ.h"
#include "dteedf.h"
#include "dte.edf"

			   /* Constants */
#define TRUE         1
#define FALSE        0
#define EOS       '\0'
#define XON_XOFF     1

			  /* macros */

#define CONTROL(x) (x-0x40)
#define ESC_KEY   CONTROL('[')

/* Define communications parameters */

#define COM_PARAMS (_COM_CHR8 | _COM_STOP1 | _COM_NOPARITY | _COM_9600)

/* definitions for the 8259 programmable interrupt controller */

#define P8259_0 0x20   /* interrupt control register */
#define P8259_1 0x21   /* interrupt mask register */
#define END_OF_INT 0x20  /* non-specific eof of interrupt */

/* define xon xoff ascii codes */

#define XON (0x11)                  /* control-Q */
#define XOFF (0x13)                 /* control-S */

#define BIOS_DATA  0x400000L        /* 0x00400000 */

/* the address of the comm port is the short integer 'comport'
   this variable is initialized by reading from the BIOS data area at segment
   0x40. This data (BIOS DATA) is written during POST.
   Absolute addr = segment * 0x10 + offset = 0x40 * 0x10 + 0 = 0x400
   However,
   Microsoft's C requires 32-bit pointers to have the segment's
   base address in the left 16 bits and offset in the right.

   Absolute addr = 0x0040:0000 = 0x400000L.   ( 32 - bits )
*/
#define THRE (comport)      /* transmit holding register  */
#define IER (comport + 1)   /* interrupt enable register */
#define IIR (comport + 2)   /* interrupt identification 8250 Read-Only */
#define LCR (comport + 3)   /* line control register */
#define MCR (comport + 4)   /* modem control register */
#define LSR (comport + 5)   /* line status register */
#define MSR (comport + 6)   /* modem status register */
#define FCR (IIR)           /* Fifo control register 16550 (write only) */

#define UART_8250  1
#define UART_16450 2
#define UART_16550 3

/* codes to enable individual interrupts */

#define RDAINT  1   /* priority 1, Recieve data availiable */
#define THREINT 2   /* priority 2, Transmit holding register empty */
#define RLSINT  4   /* priority 3, Recieve line status */
#define MSINT   8   /* priority 4, Modem status */

#define FCR_ENABLE   0x01 /* Enable  Fifo  */
#define FCR_DISABLE  0x00 /* Disable Fifo  */
#define FCR_RESET_RX 0x02 /* Clear Rx fifo */
#define FCR_RESET_TX 0x03 /* Clear Tx Fifo */


#define LCR_STOP_1    0x00
#define LCR_DATA_8    0x03
#define LCR_PARITY_N  0x00
#define LCR_BREAK     0x40
#define LCR_DLAB      0x80
#define LCR_LINK  (LCR_DATA_8 | LCR_PARITY_N  | LCR_STOP_1)


#define MSR_CTS	      0x10
#define MSR_DSR	      0x20
#define MSR_RING      0x40

#define LSR_RDR       0x01  /* Receive data ready */
#define LSR_OVERRUN   0x02  /* Rx overrun error */
#define LSR_PARITY    0x04  /* Rx Parity Error */
#define LSR_FRAME     0x08  /* Rx Framing error */
#define LSR_BREAK     0x10  /* Break Detected */
#define LSR_THRE      0x20  /* Tx Holding Reg Empty */
#define LSR_TXEMPTY   0x40  /* Tx empty */

/*  Smart Modem Connections and States

Without DTR asserted, Modems are disabled
Upon sucessful carrier linkage, the modem will assert DCD


      on-line   ------------> Dialing
      command  \              /   |
        ^        \          /     |
        |          \      /       |
        |         / idle          |
        |       /        \        |
        |     /            \      |
        v   /                \    v
       On-Line-------------->Handshaking
       (Data)
*/


/* modem control Registers values */


#define MCROFF         0x0              /* everything off */
#define MCR_DTR_ENABLE 0x01             /* Enable DTR  */
#define MCR_RTS_ENABLE 0x02             /* Enable RTS  */
#define MCR_GP0_ENABLE 0x04             /* Enable GP 0 */
#define MCR_GP1_ENABLE 0x08             /* Enable GP 1 */

#define MCRALL  (MCR_DTR_ENABLE | MCR_RTS_ENABLE |\
                 MCR_GP1_ENABLE)

/* interrupt enable register value to turn on/off int */

#define IERALL (RDAINT| THREINT| RLSINT )

#define IEROFF 0

/* some masks for turning interrupts off */
#define THREOFF 0xfd

/* interrupt indentification numbers */
#define MDMSTATUS   0
#define TXREGEMPTY  2
#define RXDATAREADY 4
#define RLINESTATUS 6

/* flags for xon/offf flow control */
#define XON_RCVD 1
#define XOFF_RCVD 0
#define XON_SENT 1
#define XOFF_SENT 0

/* Hi and low precentages of xon-xoff trigger */

#define HI_TRIGGER(x) (3*x/4)
#define LO_TRIGGER(x) (x/4)



/* macro to turn on interrupt whose "interrupt enable number" is
   'i', in case it has been disabled. for example, the THRE
   interrupt is disabled when XOFF is recieved from the romote system.
*/
#define turnon_int(i,j) if (((j=inp(IER))&i)==0)outp(IER,(j|i))

#define report_error(s) printf(s)


typedef struct QTYPE    /* data structure for queue */
{
  int count;
  int front;
  int rear;
  int maxsize;
  char *data;
} QTYPE;

unsigned char rxbuf[RXQSIZE], txbuf[TXQSIZE];

QTYPE rcvq ={0,-1, -1, RXQSIZE, rxbuf},
      trmq ={0,-1, -1, TXQSIZE, txbuf};

/* global indicators */

int ModemStatus, LineStatus;

QTYPE *txq = &trmq, *rxq=&rcvq;  /* pointers to queue */

short comport=0,
	     enable_xonxoff = 0,
	     rcvd_xonxoff = XON_RCVD,
	     sent_xonxoff = XON_SENT,
	     send_xon     = FALSE,
	     send_xoff    = FALSE,
	     int_number   = 12,
	     int_enable_mask = 0xef,
	     int_disable_mask = 0x10;

/* externals */
extern unsigned char rx_resume_pending;
extern unsigned char rx_suspend_pending;
extern unsigned char rx_suspended;
extern unsigned char dte_to_modem_flow_cntl;
extern unsigned char modem_to_dte_flow_cntl;
extern UART_STATUS uart;
extern ubyte system_rcv_terminal_break(ubyte,uword);

/* function prototypes */

int SendCommChar(unsigned char);
int ReceiveCommChar(unsigned char *ch);
int CommSetup(short port_number, unsigned long baud);
int CommRestore(void);
int serialbypassmode ;
int q_getfrom (QTYPE *, unsigned char *);
int q_puton (QTYPE *, unsigned char );

void _interrupt _far CommIntrHandler(void);
void (_interrupt _far *old_handler)();

int PCSerialInit(int port_number, unsigned long baud_rate);
void Control_fifo(int fifo_control);
int get_uart_type (void);
char *uart_type;
int tx_empty;
void process_rx_int(void);
void process_tx_int(void);
void softFlowControl (int cntrl);
int received_xoff(void);

int PCterminal_rts_status(void);
int PCterminal_dtr_status(void);

void PCterminal_cts_on(void);
void PCterminal_cts_off(void);
void PCterminal_dsr_on(void);
void PCterminal_dsr_off(void);
void PCterminal_to_break(void);
void PCterminal_to_break_end(void);

int PCSerialInit(int port_number, unsigned long baud_rate)

{
int uart_used;

    serialbypassmode = TRUE;
    uart_used = get_uart_type ();

    switch (uart_used)
        {

        case UART_16450  :
            uart_type = "16450";
            break;

        case UART_16550  :
            uart_type = "16550";
            break;

        default :
            uart_type = "8250";
            break;

        }

    if (!CommSetup(port_number,baud_rate))
        {
        return (FALSE);
        }

    printf("\n\rDTE data redirected at %lu,8,N,1 to (%s) COM%d\n\n\r",
           baud_rate,uart_type,port_number+1);

    if (enable_xonxoff)
    	printf ("\n\rSoftware flow control enabled\n\r");

    return (TRUE);
}

int get_uart_type (void)
{
register int int_id;
int retval = UART_8250;

    Control_fifo(FCR_ENABLE | FCR_RESET_TX | FCR_RESET_RX);

    int_id= inp(FCR);

    if ( bit6(int_id) || bit7(int_id) )
        {
        if ( bit6(int_id) &&  bit7(int_id) )
            {
            retval = UART_16550;
            }
        retval = UART_16450;
        }

return (retval);
}

void Control_fifo(int fifo_control)
{
/*
   FCR_ENABLE, FCR_ENABLE are valid parameters
   To reset fifo's FCR_RESET_<TX,RX> fifo_control should be
   OR'ed
*/

outp (FCR,fifo_control);

}

/*--------------------------------------------------------
  | CommSetup will setup the serial port on the pc.	 |
  --------------------------------------------------------
*/
int CommSetup(short port_number, unsigned long baud)
{
   int intmask;
   long divisor;
   unsigned char *ptr;



   switch ((short)port_number)
   {
        case 0:               /* Using com1 IRQ4 */
            comport = COM1;
            int_enable_mask  = 0xef;
            int_disable_mask = 0x10;
            int_number = 12;
            break;

        case 2:             /* Using com3 IRQ4 */
            comport = COM3;
            int_enable_mask  = 0xef;
            int_disable_mask = 0x10;
            int_number = 12;

            break;

       case 1:                /* Using com2 IRQ3 */
            comport = COM2;
            int_enable_mask  = 0xf7;
            int_disable_mask = 0x08;
            int_number = 11;
            break;

       case 3:              /* Using com4 IRQ3 */
            comport = COM4;
            int_enable_mask  = 0xf7;
            int_disable_mask = 0x08;
            int_number = 11;
            break;

      default:
           break;

   }

   old_handler = _dos_getvect(int_number);

   _disable();			  /* disable interrupts */

   _dos_setvect(int_number,CommIntrHandler);   /* set new int vector */

   outp(MCR,MCROFF);
   outp(IER,IEROFF);

   divisor = 1843200 / (16 * baud);   /* set up baud rate */

   outp(LCR,LCR_DLAB | LCR_LINK);

   ptr = (unsigned char*)&divisor;

   outp(THRE,*ptr++);     /* LSB */
   outp(IER,*ptr);        /* MSB */

   outp(LCR,LCR_LINK);           /* disable DLAB , set parmaters */

   outp(MCR,MCRALL);
   outp(IER,IERALL);
   inp(MSR);                   /* clear modem status */

   intmask = inp(P8259_1) & int_enable_mask;
   outp(P8259_1,intmask);
   _enable();			   /* enable interrupts */
   return(TRUE);

}
/*--------------------------------------------------------
  | CommIntrHandler is the serial interrupt handler. It will  |
  | process all interrupts from the UART.		 |
  --------------------------------------------------------
*/

void _interrupt _far CommIntrHandler(void)
{
int int_id, intmask;

 tx_empty = FALSE;

  _enable();

  for(;;)
  {
    int_id= inp(IIR);		   /* Any interrupts pending? */

    if (bit0(int_id) ==1)
    {
        if (tx_empty == FALSE)
            turnon_int(THREINT,intmask);

        outp(P8259_0,END_OF_INT);   /* return if all done */
        return;
    }


				      /* process interrupt */
    switch(int_id)
    {				       /* Modem Status */
        case MDMSTATUS :

        /* clear modem status */

             ModemStatus = inp(MSR);
             break;
				       /* Transmit Holding Empty */
        case TXREGEMPTY:

             process_tx_int();
             break;

        case RXDATAREADY:    /* receive data ready, send to DTE Layer */

             if ( dte_rx_break_running == TRUE )
             {
                 inp(THRE);  /* Clear out NULL char */
                 dte_rx_break_running = FALSE;

                 /* Use a "canned" timeout */
                 system_rcv_terminal_break(BREAK_TIME, dte_rx_count);
                 break;
             }

             dte_to_terminal ((unsigned char)inp(THRE));

             break;
					  /* Line/Parity error */
        case RLINESTATUS:
             LineStatus = inp(LSR);

             if (LineStatus & LSR_BREAK)
             {
                if ( dte_rx_break_running != TRUE )
                {
                    dte_rx_break_running = TRUE;
                    dte_rx_break_timer= 0;
                }
             }
             break;

        default:
            break;

     }
   }
}

void process_tx_int(void)
{
   unsigned char comChar;
   int intmask;
   extern ubyte dte_tx_interrupt_expected;

   dte_tx_interrupt_expected = FALSE;

   if (modem_to_dte_flow_cntl & XON_XOFF)          /* software flow control */
   {
	   if (rx_suspended && rx_suspend_pending)
	   {
		   rx_suspend_pending = FALSE;
         dte_tx_interrupt_expected = TRUE;
		   outp (THRE, XOFF);
		   return;
	   }

	   if (rx_suspended && rx_resume_pending)
	   {
         rx_suspended = FALSE;
		   rx_resume_pending = FALSE;
         dte_tx_interrupt_expected = TRUE;
		   outp (THRE, XON);
		   return;
	   }
   }

   if (q_getfrom(txq,&comChar) == TRUE)
   {
      dte_tx_interrupt_expected = TRUE;
	   outp(THRE,comChar);
   }
   else
   {
      intmask = inp(IER);
      if (intmask & THREINT)
         outp(IER,intmask & THREOFF);
      tx_empty = TRUE;
   }
}

void terminal_tx_enable(void)
{
int intmask;

turnon_int(THREINT,intmask);
}



void process_rx_int(void)
{
int intmask;
unsigned char comChar;

	intmask = inp(LSR);
	comChar = (unsigned char)inp(THRE);
	if (enable_xonxoff)
	{
		if (comChar == XON)
		{
		    rcvd_xonxoff = XON_RCVD;
		    turnon_int (THREINT, intmask);
		    return;
		}

		if (comChar == XOFF)
		{
		    rcvd_xonxoff = XOFF_RCVD;
		    intmask = inp(IER);

		    if (intmask & THREINT)
            	outp(IER,intmask & THREOFF);
            return;
		}
	}

	q_puton(rxq,comChar);

	if (enable_xonxoff)
	{
		if (rxq->count >=HI_TRIGGER(RXQSIZE) &&
		    sent_xonxoff != XOFF_SENT)
		{

			send_xoff = TRUE;
		    turnon_int (THREINT, intmask);
		}
	}
}

int CommRestore(void)
{
  int intmask;
  _disable();
  outp(IER,IEROFF);
  outp(MCR,MCROFF);
  intmask = inp(P8259_1) | int_disable_mask;
  outp(P8259_1,intmask);
  _dos_setvect(int_number,old_handler);
  _enable();
  return(0);

}

/*--------------------------------------------------------
  | SendCommChar                                           |
  | puts a character into transmit queue. return 1 if    |
  | successful, else 0.                                  |
  --------------------------------------------------------
*/
int SendCommChar(unsigned char chr)
{
   int retval, intmask;

   retval = q_puton(txq,chr);

   turnon_int(THREINT,intmask);

   return(retval);

}  /* end SendCommChar */

int PCterminal_to_free(void)
{
int to_free;

/* Get number of free bytes in the transmit queue */

to_free =  txq->maxsize - txq->count;

return (to_free);

}

/*--------------------------------------------------------
  |  ReceiveCommChar                                           |
  | returns a character from the receive queue.          |
  | returns 0, if queue is empty                        |
  --------------------------------------------------------
*/
int ReceiveCommChar(unsigned char *ch)
{
   int intmask;
   /* if XOFF  sent earlier, we might have to send an XON */

   if (enable_xonxoff)
   {
      if (rxq->count <=LO_TRIGGER(RXQSIZE) && sent_xonxoff!=XON_SENT)
      {
	  send_xon = TRUE;
	  turnon_int(THREINT, intmask);  /* xmit holding empty */
      }
   }

   if (q_getfrom(rxq,(unsigned char *)ch) == FALSE)
   {
      return(0);   /* receive queue empty */
   }
   else
   {
      return(1);
   }

}   /* end ReceiveCommChar */

/*--------------------------------------------------------
  | the following routines, q_getform, q_puton are called|
  | by the interrupt service routine with sp		 |
  | indeterminate and must have stack checking turned off|
  --------------------------------------------------------
*/

/*--------------------------------------------------------
  | q_getfrom                                            |
  | copy next data element in queue to specified location|
  | also return a pointer to this element.               |
  --------------------------------------------------------
*/
int q_getfrom(QTYPE *queue,unsigned char *data)

{
int retval=FALSE;
unsigned char *ch;


    ENTER_CRITICAL_SECTION

    /* check if queue is empty */

    if (queue->count != 0)
    {
        retval = TRUE;

    	ch = &(queue->data[queue->front]);
    	*data = *ch;

    	queue->count--;     /* decrement queue count */

     /* the queue is empty reset front,rear,and count */

    	if (queue->count == 0)
    	{
        	queue->front = queue->rear = -1;

    	}
        else
        {

   /* Increment front index and check for wraparound */

   			if (queue->front == queue->maxsize-1)
      			queue->front = 0;
   			else
      			queue->front++;
      	}
   	}

   LEAVE_CRITICAL_SECTION

   return (retval);

} /* end q_getfrom */
/*--------------------------------------------------------
  | q_puton                                              |
  | puta a data element in the queue                     |
  --------------------------------------------------------

*/
int q_puton(QTYPE *queue, unsigned char data)
{

int retval = FALSE;

   	ENTER_CRITICAL_SECTION

   	if (queue->count < queue->maxsize)
   	{

   /* else, adjust rear and check for wrap-around */

   		if (queue->rear == queue->maxsize-1)
      		queue->rear = 0;
   		else
      		queue->rear++;
			/* save the character in the queue */

   		queue->data[queue->rear] = data;
   		queue->count++;

   		if (queue->front == -1)
      		queue->front = 0;

   		retval = TRUE;

   }

   LEAVE_CRITICAL_SECTION

   return(retval);   /* successful */

}  /* end q_puton */

void softFlowControl (int cntrl)
{
enable_xonxoff = cntrl;
}

int received_xoff(void)
{
 if (rcvd_xonxoff == XOFF_RCVD)
     return(TRUE);
 else
     return(FALSE);
}


/*.Implementation_Details----------------------------------------------*/
/* The PCterminal_xxx functions are from the prospective of the        */
/* Datapump's ISC, in bypass mode the ISC is the PC's uart.            */
/*                                                                     */
/*      External PC         PC Modem                                   */
/*      DTR ->              DSR                                        */
/*      RTS ->              CTS                                        */
/*      TXD ->              RXD                                        */
/*      DSR <-              DTR                                        */
/*      CTS <-              RTS                                        */
/*      RXD <-              TXD                                        */
/*---------------------------------------------------------------------*/

int PCterminal_rts_status(void)
{

unsigned char mcrStatus;
int retval;

/* if were not in bypass mode then ignore rts */

	if (!serialbypassmode)
    	return (TRUE);

	mcrStatus = inp(MSR);

	if (mcrStatus & MSR_CTS)
   		retval = TRUE;
	else
   	retval = FALSE;

	return (retval);

}

int PCterminal_dtr_status(void)
{

unsigned char mcrStatus;
int retval;

/* if were not in bypass mode then ignore rts */

	if (!serialbypassmode)
    	return (TRUE);

	mcrStatus = inp(MSR);

	if (mcrStatus & MSR_DSR)
   		retval = TRUE;
	else
   	    retval = FALSE;

	return (retval);

}


void PCterminal_cts_on(void)
{
unsigned char mcrStatus;

	if (!serialbypassmode)
    	return ;

	mcrStatus = inp(MCR);
	outp(MCR,mcrStatus | MCR_RTS_ENABLE);

    uart.cts = 1;

}


void PCterminal_cts_off(void)
{
unsigned char mcrStatus;

	if (!serialbypassmode)
    	return;

	mcrStatus = inp(MCR);

	outp(MCR, mcrStatus & ~MCR_RTS_ENABLE);

    uart.cts = 0;

}


void PCterminal_dsr_on(void)
{
unsigned char mcrStatus;

	if (!serialbypassmode)
    	return ;

	mcrStatus = inp(MCR);
	outp(MCR,mcrStatus | MCR_DTR_ENABLE);

    uart.dsr = 1;

}

void PCterminal_dsr_off(void)
{
unsigned char mcrStatus;

	if (!serialbypassmode)
    	return ;

	mcrStatus = inp(MCR);
	outp(MCR,mcrStatus & ~MCR_DTR_ENABLE);

    uart.dsr = 0;

}

void PCterminal_to_break(void)
{
unsigned char lcrStatus;

	if (!serialbypassmode)
    	return ;

	lcrStatus = inp(LCR);
	outp(LCR,lcrStatus | LCR_BREAK);

}
void PCterminal_to_break_end(void)
{
unsigned char lcrStatus;

	if (!serialbypassmode)
    	return ;

	lcrStatus = inp(LCR);
	outp(LCR,lcrStatus & ~LCR_BREAK);

}
