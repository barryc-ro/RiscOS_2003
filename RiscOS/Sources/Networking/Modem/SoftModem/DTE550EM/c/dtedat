/****************************************************************************
/
/	Copyright, 1988 - 1991.     All Rights Reserved by:
/	    RSA
/	    7701 Six Forks Road
/	    Suite 120
/	    Raleigh, NC  27615
/	    (919) 846-7171
/
/
/	This document contains material confidential to RSA its contents must
/	not be revealed, used or disclosed to anyone or company with out
/	written permission by RSA.  The information contained herein is solely
/	for the use of RSA.
/
/	File:		dtedat.c
/
/	Version:	1.0
/
/	Function:	This file contains the varriable definitions for the
/			DTE I/O code
/
/	Product:	'C' DTE I/O code
/
/	Platform:	LSI Logic LR33000 processor
/			Signetics sc26c562 CDUSCC
/
/	History:	dte.asm (z180)
/
/	Created: 08/06/92
/
/	---------------------------------------------------------
/	-			Modifications			-
/	---------------------------------------------------------
/
/
/	Author & Date:	RSA  6/21/91
/	Description:
/
******************************************************************************/

#include "sys_def.h"		/* system constant definitions */
#include "dteequ.h"		/* dte constant definitions */

/************************* dte global variables *****************************/
ubyte ESC_RXD=0; 			/* TRUE if tesc found, FALSE otherwise */
ubyte idle_flag=0;		   /* Indicates whether V.42 is in IDLE mode and
			 	             *  to ignore any data received from the DTE
				             */

// S. Deans - 2/14/95 - These variables are also defined
// in v42_dat.c
// ubyte v42_got_dte_break=0; /* notify v42 of break from terminal*/
// ubyte v42_dte_break_time=0;

ubyte acu_status;
ubyte acu_halted;
ubyte acu_installed;

	/*** dte escape sequence variables ***/
ubyte esc_chr=0; 			    /* escape character storage */
uword esc_guard_time=0;		 /* ESCAPE GUARD TIME (20 mSec units) */
ubyte dte_guard_time=0;		 /* TIME VARIABLE FOR ESCAPE */
uword dte_tesc_count=0;		 /* count of escape chars received */
uword dte_lead_guard=0;		 /* LEAD TIME FLAG */
uword dte_20_mSec_timer=0;	 /* breaks timed to 20 mSec intervals */

	/*** dte buffer variables ***/
ubyte rx_char;
ubyte dte_rx_buffer[DTE_BUFFER_SIZE];   /* data from terminal*/
uword dte_rx_remove=0;			/* buffer remove pointer */
uword dte_rx_insert=0;			/* buffer insert pointer */
uword dte_rx_count=0;			/* # of chars in buffer */

ubyte dte_tx_buffer[DTE_BUFFER_SIZE];   /* data to terminal*/
uword dte_tx_remove=0;			/* buffer remove pointer */
uword dte_tx_insert=0;			/* buffer insert pointer */
uword dte_tx_count=0;			/* # of chars in buffer */

	/*** dte flow control variables ***/
ubyte flow_cntl_pass=0;			      /* Pass flow cntl chars over the line */
ubyte dte_to_modem_flow_cntl=0;		   /* Dte-to-modem flow control :
					                      *    bit 0 = XON/XOFF (software)
					                      *    bit 1 = RTS/CTS (hardware)
					                      */
ubyte modem_to_dte_flow_cntl=0;		   /* Modem-to-dte flow control :
					                      *    bit 0 = XON/XOFF (software)
					                      *    bit 1 = RTS/CTS (hardware)
					                      */
ubyte modem_to_dte_xon_char=0;		   /* modem-to-dte XON char storage */
ubyte modem_to_dte_xoff_char=0;		   /* modem-to-dte XOFF char storage */
ubyte dte_to_modem_xon_char=0;		   /* dte-to-modem XON char storage */
ubyte dte_to_modem_xoff_char=0;		   /* dte-to-modem XOFF char storage */


	/*** dte break variables ***/
uword dte_tx_break_psn=0;		     /* Position of break in tx data buffer */
uword dte_tx_break_count=0;    	  /* Break duration counter in 0.1 sec units */
ubyte dte_tx_break_state=0;	     /* One of 4 possible break conditions :
											*    0 = no <break> in progress
											*    1 = waiting for break position in buffer
											*    2 = start sending <break>
											*    3 = wait for <break> to end
											*/

ubyte dte_rx_break_running=0;	  /* timing rx break, if TRUE */
ubyte dte_rx_break_timer=0;	     /* RX break duration (in 10 mSec intervals) */

	/*** dte status variables ***/
ubyte rx_suspended=0;
ubyte rx_suspend_pending=0;
ubyte rx_resume_pending=0;
ubyte dte_tx_interrupt_expected=0;
ubyte dte_tx_suspended_by_terminal=0;
ubyte tx_suspended_for_break=0;
ubyte dte_mode;


