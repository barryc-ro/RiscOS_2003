#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "swis.h"

unsigned mem[256*1024];

typedef struct
{
    char *name;
    unsigned int addr;
    unsigned int end;
    unsigned int count;
} modinfo;

modinfo modules[230];
modinfo softmod;

typedef struct
{
    char *name;
    unsigned addr;
    unsigned count;
} syminfo;

syminfo symbols[4000];

int compaddr(const void *a1, const void *a2)
{
    return ((const modinfo *)a1)->addr - ((const modinfo *)a2)->addr;
}

int compsymaddr(const void *a1, const void *a2)
{
    const syminfo *s1 = (const syminfo *) a1;
    const syminfo *s2 = (const syminfo *) a2;

    if (s1->addr > s2->addr) return 1;
    if (s1->addr < s2->addr) return -1;
    return 0;
}

int compcount(const void *a1, const void *a2)
{
    return ((const modinfo *)a2)->count - ((const modinfo *)a1)->count;
}

int compsymcount(const void *a1, const void *a2)
{
    return ((const syminfo *)a2)->count - ((const syminfo *)a1)->count;
}

int checkifin(const void *key, const void *memb)
{
    unsigned int addr = (unsigned int) key;
    const modinfo *mod = (const modinfo *)memb;
    if (addr >= mod->end) return 1;
    if (addr < mod->addr) return -1;
    return 0;
}

int findsym(const void *key, const void *memb)
{
    unsigned int addr = (unsigned int) key;
    const syminfo *mod = (const syminfo *)memb;
    if (addr < mod->addr) return -1;
    if (addr >= (mod+1)->addr) return 1;
    return 0;
}

int main()
{
    int i,j;
    int modno, nonmod=0, symno, nonsym=0;
    _kernel_oserror *e;
    FILE *f;

    _swi(OS_File, _INR(0,3), 255, "ProfilDump", mem, 0);

    for (i=0; i<256*1024-2; i++)
        mem[i] &= ~0xFC000003;

    _swi(OS_HeapSort, _INR(0,2), 256*1024-2, mem, 0);

    for (i=0; i<230; i++)
    {
       e=_swix(OS_Module, _INR(0,2)|_OUT(3), 12, i, 0, &modules[i].addr);
       if (e)
       {
           modno = i;
           break;
       }
       modules[i].end = modules[i].addr + ((unsigned int *)modules[i].addr)[-1];
       modules[i].name = (char *)modules[i].addr + ((int *)modules[i].addr)[4];
       if (strcmp(modules[i].name, "SoftModemCLMD3450")==0)
           softmod = modules[i];
    }

    modules[modno].name = "Kernel";
    modules[modno].addr = 0x03800000u;
    modules[modno].end = modules[0].addr;
    modno++;

    modules[modno].name = "KernelRAM";
    modules[modno].addr = 0x01f00000;
    modules[modno].end  = 0x01f08000;
    modno++;

    modules[modno].name = "ZeroPage";
    modules[modno].addr = 0x00000000;
    modules[modno].end = 0x00008000;
    modno++;

    modules[modno].name = "Application";
    modules[modno].addr = 0x00008000;
    modules[modno].end = 0x02100000;
    modno++;

    qsort(modules, modno, sizeof(modinfo), compaddr);

    for (i=0; i < 256*1024-2; i++)
    {
        modinfo *inmod;

        if (mem[i]==0)
            continue;

        inmod = (modinfo *) bsearch((const void *)mem[i], modules, modno, sizeof(modinfo), checkifin);
        if (inmod)
            inmod->count++;
        else
        {
            //printf("Unknown: %x\n", mem[i]);
            nonmod++;
        }
    }

    qsort(modules, modno, sizeof(modinfo), compcount);

    for (i=0; i < modno; i++)
    {
        if (modules[i].count)
            printf("%s: %u\n", modules[i].name,modules[i].count);
        else
            break;
    }

    printf("Non module: %u\n", nonmod);

    if (softmod.name==0)
        return 0;

    f = fopen("Syms", "r");
    if (!f)
    {
        printf("Couldn't open Syms\n");
        return 1;
    }

    for (i=0; i < 3; i++)
    {
        while (fgetc(f) != '\n')
            continue;
    }

    for (i=0 ; i < 4000; i++)
    {
        char fname[50];
        unsigned int addr;
        int ret;

        if (fscanf(f, "%s %x", fname, &addr) == EOF)
            break;

        if (strchr(fname, '$')
        {
            i--;
            continue;
        }
        symbols[i].name = malloc(strlen(fname)+1);
        if (!symbols[i].name)
        {
            printf("Out of memory\n");
            return 1;
        }
        strcpy(symbols[i].name, fname);
        symbols[i].addr = softmod.addr + addr - 0x8000;
    }

    symno = i;

    qsort(symbols, symno, sizeof(syminfo), compsymaddr);

    for (i=0; i < 256*1024-2; i++)
    {
        if (mem[i] >= softmod.addr && mem[i] < softmod.end)
        {
            syminfo *sym;

            sym = bsearch((const void *)mem[i], symbols, symno, sizeof(syminfo), findsym);
            if (sym)
            {
                //printf("Found in %s: %x (base+%x)\n", sym->name, mem[i], mem[i] - softmod.addr);
                sym->count++;
            }
            else
            {
                printf("Unknown: %x (base+%x)\n", mem[i], mem[i] - softmod.addr);
                nonsym++;
            }
        }
    }

    qsort(symbols, symno, sizeof(syminfo), compsymcount);

    for (i=0; i < symno; i++)
    {
        if (symbols[i].count)
            printf("%s: %u\n", symbols[i].name,symbols[i].count);
        else
            break;
    }

    printf("Non symbolled: %u\n", nonsym);

    return 0;
}
