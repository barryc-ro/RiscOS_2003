/*********************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC 27615
/               (919) 846-7171
/
/       This document contains material confidential to RSA.
/       Its contents must not be revealed, used or disclosed to
/       anyone or company with out written permission by RSA.
/       The information contained herein is solely for the use of RSA.
/
/       File:           BTLAPM.C
/
/       Module Version: 4.02
/
/       Function:       LAPM Controller for the V.42bis (BTLZ) code.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/12/92
/                       11/1/94 (V4.01) - Add ETC and MNP10 updates
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "btlz_ede.h"
#include "lapm_ede.h"
#include "edf.lapm_que"
#include "edf.btdecode"
#include "edf.btencode"
#include "edf.dte"

void LAPM_BTLZ_balance(void);
void LAPM_BTDecode_driver(void);
void LAPM_BTEncode_driver(void);

/********************************************************************
/
/	Procedure:  LAPM_BTLZ_Balance
/
/	Author: RSA
/
/	Creation Date: 8/12/92
/
/	Description:  Uses lapmtx_data_ptr and LAPMdeliver_cont to
/		      determine if a frame needs to be transmitted
/		      or has been received.  Uses V42bis_P0 to determine
/		      if compression is used and if so in what direction.
/
/	Input Parameters:  NONE
/
/	Output Parameters: NONE
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------
/	-     Modifications	-
/	-------------------------
/
/	Author & Date: RSA
/	Description:
/	Reason:
/
********************************************************************/
void LAPM_BTLZ_balance(void)
{
	need_tx_frame = ((lapm_get_ack_num() < k) && (lapm_send_que.empty_begin));

	mmu_open_btlz_win

	do
	{
		tx_ready = rx_needed = FALSE;

		if (V42bis_P0 & 1)
		{
			if (lapmtx_data_ptr)
			{
				if ((lapmtx_data_ptr->cmd != UI) &&
				    (dte_from_block_num()))
					tx_ready = TRUE;
			}
			else
			{
				if ((need_tx_frame) && (dte_from_num()))
					break;
			}
		}

		if ((dte_to_free() > V42bis_P2 + 2) && (LAPMdeliver_cont) &&
		    (V42bis_P0 & 2))
			rx_needed = TRUE;

		if (rx_needed)
			LAPM_BTDecode_driver();

		if (tx_ready)
			LAPM_BTEncode_driver();

/*		if (process_dce_bg_flag)*/ /* Needed with sofware UARTs */
/*			break;		*/
/*			lapm_line_bg(); */

	}
	while ((tx_ready) || (rx_needed));

	mmu_close_btlz_win
}


/********************************************************************
/
/	Procedure:  LAPM_BTDecode_driver
/
/	Author: RSA
/
/	Creation Date: 8/12/92
/
/	Description:
/
/	Input Parameters:  NONE
/
/	Output Parameters: NONE
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------
/	-     Modifications	-
/	-------------------------
/
/	Author & Date: RSA
/	Description:
/	Reason:
/
********************************************************************/
void LAPM_BTDecode_driver(void)
{
	dte_to_block_free_count = dte_to_block_free();
	if (dte_to_block_free_count > 255)
		dte_to_block_free_count = 255;

	dte_tx_block_pointer = dte_to_block_pointer();

	dte_to_block_update_count = 0;

	BTDecode();

	dte_to_block_update(dte_to_block_update_count);

	if ((btlzrx_done) && (!reenter_decode))
	{
		mmu_close_btlz_win
		next_to_deliver = ((cont_frame->cmd >> 1 ) + 1) & 0x7f;
		LAPMdeliver_cont =  FALSE;
		lapm_put_empty(cont_frame);
		mmu_open_btlz_win
	}
}


/********************************************************************
/
/	Procedure:  LAPM_BTEncode_driver
/
/	Author: RSA
/
/	Creation Date:	8/12/92
/
/	Description:
/
/	Input Parameters:  NONE
/
/	Output Parameters: NONE
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------
/	-     Modifications	-
/	-------------------------
/
/	Author & Date: RSA
/	Description:
/	Reason:
/
********************************************************************/
void LAPM_BTEncode_driver(void)
{
    /* Reduce max for files that cause BTLZ to switch between compression
        and noncompression */
    index_max = neg_parms.TN401 - 7;

    dte_from_block_num_count = dte_from_block_num();

    if (LAPMbrkpend)
        if ((rcv_char_count) && (dte_from_block_num_count > rcv_char_count))
            dte_from_block_num_count = rcv_char_count;

/*  If the file is highly compressible, then allow the encoder
    to use full lapm frames. With 3.68:1 ratio 441 bytes of data
    can be compress into a lapm frame. (remove the following 255 compare code) */
    if (dte_from_block_num_count > 255)
        dte_from_block_num_count = 255;

    dte_from_block_update_count = 0;
    dte_rx_block_pointer = dte_from_block_pointer();

    BTEncode();

    if (LAPMbrkpend)
    {
        rcv_char_count -= dte_from_block_update_count;
        if (!rcv_char_count)
        {
            BTFlush();
            btlztx_done = TRUE;
        }
    }

    lapmtx_data_ptr->len = index + 2;
    char_in_buffer = TRUE;

    dte_from_block_update(dte_from_block_update_count);

    if (btlztx_done)
    {
        lapmtx_data_ptr->status = FULL;
        mmu_close_btlz_win
        dq_lapm((struct lapm_que_struct *)&lapm_send_que);
        lapm_put_tx(lapmtx_data_ptr);
        lapmtx_data_ptr = 0;
        mmu_open_btlz_win
    }
}

