/*********************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC 27615
/               (919) 846-7171
/
/       This document contains material confidential to RSA.
/       Its contents must not be revealed, used or disclosed to
/       anyone or company with out written permission by RSA.
/       The information contained herein is solely for the use of RSA.
/
/       File:           BTINIT.C
/
/       Module Version: 4.02
/
/       Function:       This file contains the V.42bis initialization routines.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/12/92
/                       11/1/94 (V4.01) - Add ETC and MNP10 updates
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "btlz_ede.h"
#include "lapm_ede.h"
#include "edf.BTEncode"
#include "edf.BTDecode"

ubyte BTInit(ubyte,word,ubyte);
void dict_init(word);
void BTInitDe(void);
void BTInitEn(void);

/********************************************************************
/
/	Procedure:  BTInit
/
/	Author: RSA
/
/	Creation Date:	8/12/92
/
/	Description:  Initializes the V.42bis data compression system,
/		      including both encoder & decoder.  Called at
/		      link establishment even if P0 == 0.
/
/	Input Parameters:
/		P0 - V.42bis encoding direction code:
/			0 = none,
/			1 = encode,
/			2 = decode
/			3 = both
/		P1 - V.42bis dictionary size
/		P2 - V.42bis maximum string length
/
/	Output Parameters:  TRUE - BTLZ can be negotiated.
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------
/	-     Modifications	-
/	-------------------------
/
/	Author & Date: RSA
/	Description:
/	Reason:
/
********************************************************************/
ubyte BTInit(ubyte P0,word P1, ubyte P2)
{
    word i = 512;	/* temp to compute N_1 = log(2) N_2 */

    /* Check bounds for Dictionary size */
    if ((P0 == 3) && (P1 > MAX_P1_TWO_DIR))
        return (FALSE);
    else if (P1 > MAX_P1_ONE_DIR)
        return (FALSE);

    mmu_open_btlz_win

    V42bis_P0 = P0;
    V42bis_P1 = V42bis_N_2 = P1;
    V42bis_P2 = V42bis_N_7 = P2;

    ob = bt_m = bitbuff = V42bis_dbase = 0;
    bt_k = 0;

    /* Find maximum codeword size needed to represent N_2 */
    V42bis_N_1 = 9;
    while (V42bis_N_2 > i)
    {
        i *= 2;
        V42bis_N_1++;
    }

    if(P0 == 3)		/* if two-way encoding ... */
        V42bis_dbase = V42bis_P1; /* decode in 2nd half */

    BTInitEn();
    BTInitDe();

    mmu_close_btlz_win
    return(TRUE);
}



/*****************************************************************************
/
/	ROUTINE: dict_init
/
/	Initializes the V.42bis data compression dictionary, for either
/	encoder or decoder.
/
/	PARAMETERS IN:
/		d - pointer to dictionary to initialize
/
/	PARAMETERS OUT:
/		None
/
*****************************************************************************/
void dict_init(word d)		/* (re)-initialise dictionary */
{
word p,i;

	for (i=0; i < V42bis_N_2;i++) /* to mark as empty */
		parent[d+i] = deplist[d+i]= NULL;

	p = (d+V42bis_N_6);	/* dictionary proper starts from N_6th entry */

	for (i=0; i<V42bis_N_4;)  /* initialise first N_4 entries */
	{
		right[p] = deplist[p] = NULL;
		symbol[p++] = i++;
	}
}


/*****************************************************************************
/
/	ROUTINE: BTInitDe
/
/	Initializes the decoder dictionary
/
/	PARAMETERS IN:
/		none
/
/	PARAMETERS OUT:
/		none
/
*****************************************************************************/
void BTInitDe(void)
{
    top = &buff[V42bis_N_7 - 1];        /* top of stack for decode */

    /* escape char not last char received */
    /* flag to indicate last string maximum size */
    /* dictionary initially empty */
    /* Hayes debug variable */
    De_esc_mode = De_bf_full = De_dictfull = mode_sw = FALSE;

    /* pointer to string being decoded */
    /* search pointer */
    /* pointer to last created entry */
    De_c_ptr = De_s_ptr = De_last_C1 = NULL;

    /* first empty entry */
    De_C_1 = (V42bis_dbase + V42bis_N_4 + V42bis_N_6);
    De_C_2 = V42bis_N_3 + 1;            /* initial character size */
    De_transparent = TRUE;              /* initially transparent */
    De_esc_char = 0;                    /* initial value of escape character */
    reenter_decode = FALSE;             /* Reset Renetry flag */

	dict_init(V42bis_dbase);             /* initialize the decoder dictionary */
}


/*****************************************************************************
/
/	ROUTINE: BTInitEn
/
/	Initializes the BTLZ encoder control variables and dictionary.
/
/	PARAMETERS IN:
/		None
/
/	PARAMETERS OUT:
/		None
/
*****************************************************************************/
void BTInitEn(void)
{
	/* InitBTEn: initialize BTLZ encoder control variables & dictionary */

	transparent = TRUE;		 /* initially in transparent mode */
	tcount = 0;			 /* character count for anti-exp */
	comp_bits = 0;			 /* compressed bit count for anti-exp */
	C_1 = (V42bis_N_4 + V42bis_N_6); /* first new entry */
	last_C1 = NULL; 		 /* no new entry created yet */
	C_2 = V42bis_N_3 + 1;		 /* initial codeword size */
	C_3 = V42bis_N_4 * 2;		 /* and threshold size */
	s_ptr = NULL;			 /* no strings matched yet */
	axf_delay = AXF_MIN;		 /* initial delay setting */
	dictfull = FALSE;		 /* dictionary empty */
	esc_char = 0;			 /* escape character initially zero */
	flushed = FALSE;		 /* not in flush mode */
	dict_init(0);			 /* initialize the encoder dictionary */
}
