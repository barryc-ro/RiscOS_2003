/****************************************************************************
/
/       Copyright 1988,1989,1990,1991,1992,1993,1994.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           MNP_AF.C
/
/       Module Version: 4.01
/
/       Function:       MNP AF routines.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    3/19/92
/                       11/1/94 (V4.01) - Add ETC and MNP10 updates
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/
#include "sys_def.h"

void ad_frq_tx_init(void);
void ad_frq_rx_init(void);
ubyte ad_frq_init(void);
void div_freq_table(void);
void sort_freq_table(void);
void desort_freq_table(void);
void ad_frq_encode(void);
void ad_token_store(void);
void ad_token_flush(void);
void ad_frq_decode(void);
void run_length_decode(void);
ubyte run_length_encoding(void);
ubyte run_length_flush(void);
void ad_frq_xmt(void);
word ad_frq_rcv(void);
void empty_lt_continue(void);
void empty_lt(void);
void build_lt(void);
void init_tx_frame(void);

#include "EDF.MNP_LIB"
#include "EDF.DTE"
#include "MNP_DEF.H"
#include "MNP_STRU.H"
#include "MNP_EDE.H"
#include "CL5_EDE.H"

extern ubyte *btlzrxdataptr;
extern ubyte btlzrx_done;
extern uword btlz_empty_count;
extern ubyte V42bis_P0;

#define  MNP10_RETR_INIT__RETRAIN   0
#define  MNP10_RETR_INIT__DISCONN   0

/*                                                                          */
/*  Table containing tokens to replace the characters in a lt_data frame    */
/*  format: msbyte- Header	         lsbyte: Body  (left justified)          */
/*                                                                          */
#define token_table_max 512

const ubyte token_table[token_table_max] = {
	00	,	 00	 ,
	00	,	 0x80	 ,
	01	,	 00	 ,
	01	,	 0x80	 ,
	02	,	 00	 ,
	02	,	 0x40	 ,
	02	,	 0x80	 ,
	02	,	 0xC0	 ,
	03	,	 00	 ,
	03	,	 0x20	 ,
	03	,	 0x40	 ,
	03	,	 0x60	 ,
	03	,	 0x80	 ,
	03	,	 0xA0	 ,
	03	,	 0xC0	 ,
	03	,	 0xE0	 ,
	04	,	 00	 ,
	04	,	 0x10	 ,
	04	,	 0x20	 ,
	04	,	 0x30	 ,
	04	,	 0x40	 ,
	04	,	 0x50	 ,
	04	,	 0x60	 ,
	04	,	 0x70	 ,
	04	,	 0x80	 ,
	04	,	 0x90	 ,
	04	,	 0xA0	 ,
	04	,	 0xB0	 ,
	04	,	 0xC0	 ,
	04	,	 0xD0	 ,
	04	,	 0xE0	 ,
	04	,	 0xF0	 ,
	05	,	 00	 ,
	05	,	 0x8	 ,
	05	,	 0x10	 ,
	05	,	 0x18	 ,
	05	,	 0x20	 ,
	05	,	 0x28	 ,
	05	,	 0x30	 ,
	05	,	 0x38	 ,
	05	,	 0x40	 ,
	05	,	 0x48	 ,
	05	,	 0x50	 ,
	05	,	 0x58	 ,
	05	,	 0x60	 ,
	05	,	 0x68	 ,
	05	,	 0x70	 ,
	05	,	 0x78	 ,
	05	,	 0x80	 ,
	05	,	 0x88	 ,
	05	,	 0x90	 ,
	05	,	 0x98	 ,
	05	,	 0xA0	 ,
	05	,	 0xA8	 ,
	05	,	 0xB0	 ,
	05	,	 0xB8	 ,
	05	,	 0xC0	 ,
	05	,	 0xC8	 ,
	05	,	 0xD0	 ,
	05	,	 0xD8	 ,
	05	,	 0xE0	 ,
	05	,	 0xE8	 ,
	05	,	 0xF0	 ,
	05	,	 0xF8	 ,
	06	,	 00	 ,
	06	,	 04	 ,
	06	,	 0x8	 ,
	06	,	 0xC	 ,
	06	,	 0x10	 ,
	06	,	 0x14	 ,
	06	,	 0x18	 ,
	06	,	 0x1C	 ,
	06	,	 0x20	 ,
	06	,	 0x24	 ,
	06	,	 0x28	 ,
	06	,	 0x2C	 ,
	06	,	 0x30	 ,
	06	,	 0x34	 ,
	06	,	 0x38	 ,
	06	,	 0x3C	 ,
	06	,	 0x40	 ,
	06	,	 0x44	 ,
	06	,	 0x48	 ,
	06	,	 0x4C	 ,
	06	,	 0x50	 ,
	06	,	 0x54	 ,
	06	,	 0x58	 ,
	06	,	 0x5C	 ,
	06	,	 0x60	 ,
	06	,	 0x64	 ,
	06	,	 0x68	 ,
	06	,	 0x6C	 ,
	06	,	 0x70	 ,
	06	,	 0x74	 ,
	06	,	 0x78	 ,
	06	,	 0x7C	 ,
	06	,	 0x80	 ,
	06	,	 0x84	 ,
	06	,	 0x88	 ,
	06	,	 0x8C	 ,
	06	,	 0x90	 ,
	06	,	 0x94	 ,
	06	,	 0x98	 ,
	06	,	 0x9C	 ,
	06	,	 0xA0	 ,
	06	,	 0xA4	 ,
	06	,	 0xA8	 ,
	06	,	 0xAC	 ,
	06	,	 0xB0	 ,
	06	,	 0xB4	 ,
	06	,	 0xB8	 ,
	06	,	 0xBC	 ,
	06	,	 0xC0	 ,
	06	,	 0xC4	 ,
	06	,	 0xC8	 ,
	06	,	 0xCC	 ,
	06	,	 0xD0	 ,
	06	,	 0xD4	 ,
	06	,	 0xD8	 ,
	06	,	 0xDC	 ,
	06	,	 0xE0	 ,
	06	,	 0xE4	 ,
	06	,	 0xE8	 ,
	06	,	 0xEC	 ,
	06	,	 0xF0	 ,
	06	,	 0xF4	 ,
	06	,	 0xF8	 ,
	06	,	 0xFC	 ,
	07	,	 00	 ,
	07	,	 02	 ,
	07	,	 04	 ,
	07	,	 06	 ,
	07	,	 0x8	 ,
	07	,	 0xA	 ,
	07	,	 0xC	 ,
	07	,	 0xE	 ,
	07	,	 0x10	 ,
	07	,	 0x12	 ,
	07	,	 0x14	 ,
	07	,	 0x16	 ,
	07	,	 0x18	 ,
	07	,	 0x1A	 ,
	07	,	 0x1C	 ,
	07	,	 0x1E	 ,
	07	,	 0x20	 ,
	07	,	 0x22	 ,
	07	,	 0x24	 ,
	07	,	 0x26	 ,
	07	,	 0x28	 ,
	07	,	 0x2A	 ,
	07	,	 0x2C	 ,
	07	,	 0x2E	 ,
	07	,	 0x30	 ,
	07	,	 0x32	 ,
	07	,	 0x34	 ,
	07	,	 0x36	 ,
	07	,	 0x38	 ,
	07	,	 0x3A	 ,
	07	,	 0x3C	 ,
	07	,	 0x3E	 ,
	07	,	 0x40	 ,
	07	,	 0x42	 ,
	07	,	 0x44	 ,
	07	,	 0x46	 ,
	07	,	 0x48	 ,
	07	,	 0x4A	 ,
	07	,	 0x4C	 ,
	07	,	 0x4E	 ,
	07	,	 0x50	 ,
	07	,	 0x52	 ,
	07	,	 0x54	 ,
	07	,	 0x56	 ,
	07	,	 0x58	 ,
	07	,	 0x5A	 ,
	07	,	 0x5C	 ,
	07	,	 0x5E	 ,
	07	,	 0x60	 ,
	07	,	 0x62	 ,
	07	,	 0x64	 ,
	07	,	 0x66	 ,
	07	,	 0x68	 ,
	07	,	 0x6A	 ,
	07	,	 0x6C	 ,
	07	,	 0x6E	 ,
	07	,	 0x70	 ,
	07	,	 0x72	 ,
	07	,	 0x74	 ,
	07	,	 0x76	 ,
	07	,	 0x78	 ,
	07	,	 0x7A	 ,
	07	,	 0x7C	 ,
	07	,	 0x7E	 ,
	07	,	 0x80	 ,
	07	,	 0x82	 ,
	07	,	 0x84	 ,
	07	,	 0x86	 ,
	07	,	 0x88	 ,
	07	,	 0x8A	 ,
	07	,	 0x8C	 ,
	07	,	 0x8E	 ,
	07	,	 0x90	 ,
	07	,	 0x92	 ,
	07	,	 0x94	 ,
	07	,	 0x96	 ,
	07	,	 0x98	 ,
	07	,	 0x9A	 ,
	07	,	 0x9C	 ,
	07	,	 0x9E	 ,
	07	,	 0xA0	 ,
	07	,	 0xA2	 ,
	07	,	 0xA4	 ,
	07	,	 0xA6	 ,
	07	,	 0xA8	 ,
	07	,	 0xAA	 ,
	07	,	 0xAC	 ,
	07	,	 0xAE	 ,
	07	,	 0xB0	 ,
	07	,	 0xB2	 ,
	07	,	 0xB4	 ,
	07	,	 0xB6	 ,
	07	,	 0xB8	 ,
	07	,	 0xBA	 ,
	07	,	 0xBC	 ,
	07	,	 0xBE	 ,
	07	,	 0xC0	 ,
	07	,	 0xC2	 ,
	07	,	 0xC4	 ,
	07	,	 0xC6	 ,
	07	,	 0xC8	 ,
	07	,	 0xCA	 ,
	07	,	 0xCC	 ,
	07	,	 0xCE	 ,
	07	,	 0xD0	 ,
	07	,	 0xD2	 ,
	07	,	 0xD4	 ,
	07	,	 0xD6	 ,
	07	,	 0xD8	 ,
	07	,	 0xDA	 ,
	07	,	 0xDC	 ,
	07	,	 0xDE	 ,
	07	,	 0xE0	 ,
	07	,	 0xE2	 ,
	07	,	 0xE4	 ,
	07	,	 0xE6	 ,
	07	,	 0xE8	 ,
	07	,	 0xEA	 ,
	07	,	 0xEC	 ,
	07	,	 0xEE	 ,
	07	,	 0xF0	 ,
	07	,	 0xF2	 ,
	07	,	 0xF4	 ,
	07	,	 0xF6	 ,
	07	,	 0xF8	 ,
	07	,	 0xFA	 ,
	07	,	 0xFC	 ,
	07	,	 0xFE	 ,
};


void ad_frq_tx_init(void)
{
#ifdef __arm
    int i,j;
#else
    word i,j;
#endif

    j = 0;

    for (i=0; i<256; i++)
    {
   	char_table[i] = i;
        tx_freq_table[j] = rx_freq_table[j] = 00;
        j++;
        tx_freq_table[j] = rx_freq_table[j] = i;
        j++;
    }

    run_length_match_char = 00;
    run_length_count = 03;
    run_length_repeat_count = 00;
    run_length_flag = 00;
    repeat_count = 00;
    bitpos = 0x80;
    tx_token_byte = 0;
}


void ad_frq_rx_init(void)
{
    rx_loop_count = 00; 	     /* initialize rx external data  */
    rx_match_char = 00;
    rx_run_length_count = 03;
    shift_pos = 0x80;
    rx_head_hold = 0;
    rx_head_pos = 0x04;
} /* end ad_frq_rx_init */


/*****************************************************************************/
/*  ADAPTIVE_FREQUENCY_ENCODING INITIALIZE				     */
/*									     */
/*  Routine to initialize the frequency table by clearing the accumulated    */
/*  frequency counts and placing the character offsets into ascending order. */
/*  Reorders the Character table into ascending order			     */
/*****************************************************************************/
ubyte ad_frq_init(void)
{
    mmu_open_cl5_win
    ad_frq_tx_init();
    ad_frq_rx_init();
    mmu_close_cl5_win
    return(TRUE);
}


/******************************************************************************/
/*  ADAPTIVE FREQUENCY ENCODING 					      */
/*									      */
/*  A routine to scale down the frequency counts by 2, when a frequency of    */
/*  any character equals 255.						      */
/*  Passed pointer to appropriate frequency table.			      */
/******************************************************************************/
void div_freq_table(void)
{
    for (div_hold1 = 0; div_hold1 < 256; div_hold1++)
    {
   	*fptr = *fptr / 2;
   	fptr += 2;
   	if (*fptr == 0)
		return;
    }
}


/***************************************************************************/
/* ADAPTIVE_FREQUENCY_ENCODING		FREQUENCY SORT ROUTINE		   */
/*									   */
/* Routine to sort the frequency table into descending order.		   */
/* Have freq_offset which points to the current record in the accumulator. */
/*									   */
/***************************************************************************/
void sort_freq_table(void)
{
    char_hold1 = *fptr;
    char_hold2 = *(fptr+1);

    tokptr = fptr - 2;

    while ( (char_hold1 > *tokptr) && (token_offset != 0))
    {
        *(fptr+1) = *(tokptr+1);	     /* contents of ptr -1)		  */
        char_table[*(fptr + 1)] ++;
        *fptr = *tokptr;	     /* contents of ptr -2)		  */
        fptr = tokptr;
        tokptr -= 2;
        token_offset--;
    }

    *fptr = char_hold1;
    fptr++;
    *fptr = char_hold2;
    char_table[char_hold2] = token_offset;		    /* get pointer to character table	 */
}


/*****************************************************************************/
/*  ADAPTIVE_FREQUENCY_DECODING     FREQUENCY SORT ROUTINE		    */
/*									    */
/*  Routine to sort the frequency table into descending order.		    */
/*  Have freq_offset which points to the current record in the accumulator. */
/*									    */
/****************************************************************************/
void desort_freq_table(void)
{
    char_hold1 = *fptr;
    char_hold2 = *(fptr+1);
    tokptr = fptr - 2;

    while ( (char_hold1 > *tokptr) && (tokptr >= &rx_freq_table[0])) {
        *(fptr+1) = *(tokptr+1);	     /* contents of ptr -1)	  */
        *fptr = *tokptr;	     /* contents of ptr -2)		  */

        fptr = tokptr;
        tokptr -= 2;
    }
    *fptr = char_hold1;
    fptr++;
    *fptr = char_hold2;
}


/***************************************************************************/
/*  ADAPTIVE_FREQUENCY_ENCODING 					   */
/*									   */
/*  Routine to input a data character and translate it into a token	   */
/*  according to the scheme specified by Microcom in their MNP		   */
/*  Update no. 6 (March 30, 1987)					   */
/***************************************************************************/
void ad_frq_encode(void)
{
    if (repeat_count != 00)		/* if char is a repeat count		*/
    {
        tok_hdr = token_table[tx_inchar * 2];
        tok_body = token_table[(tx_inchar * 2) + 1];
        repeat_count = 0;
        return;
    }

    token_offset = char_table[tx_inchar];

    tok_hdr = token_table[token_offset * 2];	     /* header of token		 */
    tok_body = token_table[(token_offset * 2) + 1]; /* body of token		 */

    fptr = &tx_freq_table[token_offset * 2];
    *fptr = *fptr + 1;			   /* B.010 */

    if (token_offset != 00)
        sort_freq_table();	    /* uses token offset	      */

    if (tx_freq_table[0] == 0xff)
    {
        fptr = &tx_freq_table[0];
        div_freq_table(); 	   /* scale down freq table by 2)    */
    }

}


/***************************************************************************/
/*  ADAPTIVE FREQUENCY ENCODING 	  TOKEN COMPRESS SHIFT ROUTINE	   */
/*  Transmitter 							   */
/*									   */
/*  Input: Token in Acc 						   */
/*	   shift count							   */
/*									   */
/*  Output:  # of output bytes 1					   */
/***************************************************************************/
void ad_token_store(void)
{
   start_ad_token_store:

   token_hold_save = token_hold;

   switch (bitpos) {
      case (0x80):
         bits_left_in_byte = 8;
         token_hold_shift = 8;
         break;
      case (0x40):
         bits_left_in_byte = 7;
         token_hold_shift = 9;
         break;
      case (0x20):
         bits_left_in_byte = 6;
         token_hold_shift = 10;
         break;
      case (0x10):
         bits_left_in_byte = 5;
         token_hold_shift = 11;
         break;
      case (0x08):
         bits_left_in_byte = 4;
         token_hold_shift = 12;
         break;
      case (0x04):
         bits_left_in_byte = 3;
         token_hold_shift = 13;
         break;
      case (0x02):
         bits_left_in_byte = 2;
         token_hold_shift = 14;
         break;
      case (0x01):
         bits_left_in_byte = 1;
         token_hold_shift = 15;
         break;
      }

      if (token_count > bits_left_in_byte) {
         tx_token_byte |= (ubyte) (token_hold >> token_hold_shift);

         bitpos = 0x80;
         max_chars--;
         *tx_data_ptr++ = tx_token_byte;
         i_count++;
         tx_token_byte = 0;

         token_hold = token_hold_save << bits_left_in_byte;
         token_count -= bits_left_in_byte;
         goto start_ad_token_store;
      }

      else if (token_count < bits_left_in_byte) {
         tx_token_byte |= (ubyte) (token_hold >> token_hold_shift);
         bitpos >>= token_count;
      }

      else {

         tx_token_byte |= (ubyte) (token_hold >> token_hold_shift);
         bitpos = 0x80;
         max_chars--;
         *tx_data_ptr++ = tx_token_byte;
         i_count++;
         tx_token_byte = 0;
      }
}

/**************************************************************************/
/* ADAPTIVE FREQUENCY ENCODING		 TOKEN COMPRESS FLUSH ROUTINE	  */
/*   Transmitter							  */
/*									  */
/*   Input: None							  */
/*									  */
/*   Output:  # of output bytes (max 3) 				  */
/**************************************************************************/
void ad_token_flush(void)
{
    if (bitpos != 0x80)
    {
        token_count = 11;
        token_hold = 0xffff;
        ad_token_store();

        if (bitpos != 0x80) {
            *tx_data_ptr ++ = 0xff;
            i_count ++;
            tx_token_byte = 0;
            bitpos = 0x80;
        }
        run_length_count = 03;
    }
}


/******************************************************************************/
/*  ADAPTIVE_FREQUENCY_DECODING 					      */
/*									      */
/*    Routine to input a token and translate it into a data character	      */
/*    according to the scheme specified by Microcom in their MNP	      */
/*    Update no. 6 (March 30, 1987)					      */
/*									      */
/*    Character returned in R1						      */
/******************************************************************************/
void ad_frq_decode(void)
{

#ifdef __arm
   /* KJB: This code does the same job more efficiently on the ARM */
   if (rx_head_hold == 0)
        rx_save = rx_body_hold >> 7;
   else if (rx_head_hold < 8)
        rx_save = (rx_body_hold >> (8-rx_head_hold)) + (1 << rx_head_hold);
#else
   switch (rx_head_hold)
    {
  	case (0):
	    rx_save = (rx_body_hold >> 7) + 0;
	    break;
	case (1):
	    rx_save = (rx_body_hold >> 7) + 2;
	    break;
	case (2):
	    rx_save = (rx_body_hold >> 6) + 4;
	    break;
	case (3):
	    rx_save = (rx_body_hold >> 5) + 8;
	    break;
	case (4):
	    rx_save = (rx_body_hold >> 4) + 16;
	    break;
	case (5):
	    rx_save = (rx_body_hold >> 3) + 32;
	    break;
	case (6):
	    rx_save = (rx_body_hold >> 2) + 64;
	    break;
	case (7):
	    rx_save = (rx_body_hold >> 1) + 128;
	    break;
    }
#endif

    if (rx_run_length_count == 0)	 /* if this char meant to be a repeat */
        return; 			 /* count, then use offset as char    */

    fptr = &rx_freq_table[rx_save * 2] + 1;
    rx_save = *fptr;

    fptr--;
    *fptr = *fptr + 1;				/* increment the frequency	 */
    if (*fptr != 00)
        desort_freq_table();

    if (rx_freq_table[0] == 0xff) {
        fptr = &rx_freq_table[0];
        div_freq_table();	     /* scale down freq table by 2)    */
    }
}


void run_length_decode(void)
{
    if (rx_run_length_count == 3) {
        rx_match_char = repeat_character = rx_save;
        rx_run_length_count--;
        rx_loop_count = 1;
    }
    else {
        if (rx_run_length_count == 0) {  /* passed char = repeat count	 */
            rx_run_length_count = 3;
            rx_loop_count = rx_save;
            repeat_character = rx_match_char;
        }
        else {
            if (rx_save == rx_match_char) {
                rx_run_length_count--;
                rx_loop_count = 1;
                repeat_character = rx_save;
            }
            else {
                rx_run_length_count = 2;
                rx_loop_count = 1;
                rx_match_char = repeat_character =  rx_save;
            }
        }
    }
}



ubyte run_length_encoding(void)   /* return flag if char avail */
{
    run_length_return = char_hold1;
    if (run_length_count == 3) {
        run_length_count--;
        run_length_repeat_count = 0;
        run_length_match_char = char_hold1;
        return(CHAR_AVAIL);
    }
    else
        if (char_hold1 == run_length_match_char)
        {
            if (run_length_count != 0)
            {
                run_length_count--;
                return(CHAR_AVAIL);
            }
        else
        {
            run_length_repeat_count++;
            if (run_length_repeat_count == 250)
            {
                repeat_count = TRUE;				     /* A.016 */
                run_length_count = 3;
                run_length_return = 250;
                return(CHAR_AVAIL);		 /* max repeat count */
            }
            return(CHAR_NOT_AVAIL);
        }
    }
    else				 /* chars do not match */
        if (run_length_count == 0) {
            run_length_flag = TRUE;
            repeat_count = TRUE;
            run_length_match_char = char_hold1;
            run_length_count = 2;
            run_length_return = run_length_repeat_count;
            run_length_repeat_count = 0;
            return(CHAR_AVAIL);
        }
        else {
            run_length_count = 2;
            run_length_match_char = char_hold1;
            return(CHAR_AVAIL);
        }
}


ubyte run_length_flush(void)
{
    if (run_length_count == 0) {
        run_length_flag = FALSE;
        run_length_count= 3;
        run_length_return = run_length_repeat_count;
        run_length_repeat_count = 0;
        repeat_count = TRUE;	       /*  mark char as repeat count */
        return(CHAR_AVAIL);
    }
    else
        return(CHAR_NOT_AVAIL);
}


/****************************************************************************/
/* Adaptive Frequency Encoding						    */
/*   Transmitter							    */
/*   Input: character to be tokenized					    */
/*   Output:  # of output bytes (max 2) 				    */
/****************************************************************************/
void ad_frq_xmt(void)
{
    ad_frq_encode();		/* get token header in tok hdr	   */

    token_count = tok_hdr;	       /* count in r0 = header token	  */

    if ( tok_hdr == 00)
        token_count = 4;
    else if ((tok_hdr == 07) && (tok_body == 0xfe))
        token_count = 11;
    else
        token_count += 3;

    token_hold = (uword) ( ((uword) tok_hdr << 13) + ((uword) tok_body << 5)) ;
    ad_token_store();
}


/***************************************************************************/
/*  ADAPTIVE FREQUENCY DECODING 					   */
/*  Receiver								   */
/*									   */
/*  Inputs:  a byte from the compressed data stream   (in acc)		   */
/*									   */
/*  Outputs: a de-compressed, de-tokenized data character		   */
/*									   */
/***************************************************************************/
word ad_frq_rcv(void)
{
    void ad_frq_decode();

    while (rx_head_pos != 0)
    {
        if ((rx_intoken & shift_pos) == shift_pos)
            rx_head_hold = rx_head_hold + rx_head_pos;
        shift_pos = shift_pos >> 1;
        rx_head_pos = rx_head_pos >> 1;
        if (rx_head_pos == 0)
        {
            rx_body_hold = rx_body_count = 0;
            rx_body_pos = 0x80;
            rx_body_max = rx_head_hold;
            if (rx_body_max == 0)
                rx_body_max = 1;
            else
                if (rx_body_max == 7)
                rx_body_max++;
        }

        if (shift_pos == 0)
        {
            shift_pos = 0x80;
            return(CHAR_NOT_AVAIL);
        }
    }

    while ((rx_body_count < rx_body_max) && (shift_pos != 0))
    {
        if ((rx_intoken & shift_pos) == shift_pos)
            rx_body_hold = rx_body_hold + rx_body_pos;
        else
            if (rx_body_max == 8)
                rx_body_max = 7;

        rx_body_pos = rx_body_pos >> 1;
        shift_pos = shift_pos >> 1;

        rx_body_count++;
    }

    if (shift_pos == 0)
    {
        shift_pos = 0x80;
        if (rx_body_count < rx_body_max)
            return(CHAR_NOT_AVAIL);
    }

    if (rx_body_hold == 0xff)
    {
        rx_head_hold = 0;
        rx_head_pos = 0x4;
        shift_pos = 0x80;
        rx_run_length_count = 3;
        return(CHAR_NOT_AVAIL);
    }

    ad_frq_decode();

    rx_head_hold = 0;
    rx_head_pos = 0x4;

    return(CHAR_AVAIL);
}


void empty_lt_continue(void)
{
    if (V42bis_P0 & 2)
        return;

    tx_free_hold = dte_to_free();

    if (negot_data_compression)
    {
        mmu_open_cl5_win

        while (empty_lt_count != 0)
        {
            if (process_dce_bg_flag != FALSE)
            {
                mmu_close_cl5_win
                mnp_line_bg();
                mmu_open_cl5_win
            }

            if ((tx_holding == 0) && (send_credits != 0)
                && (tx_send_pointer != tx_input_pointer))
            {
                empty_lt_in_progress = TRUE;
                mmu_close_cl5_win
                return;
            }

elc1:
            if (tx_free_hold >= 10)
            {
                if (rx_loop_count != 0)
                {
                    dte_to_char(repeat_character);
                    tx_free_hold--;
                    rx_loop_count--;
                    goto elc1;
                }

                if ((empty_lt_count != 0) || (shift_pos != 0x80))
                {
                    if (shift_pos == 0x80)
                    {
                        rx_intoken = *rx_data_ptr ++;
                        empty_lt_count--;
                    }

                    if (ad_frq_rcv()==CHAR_AVAIL)
                    {
                        run_length_decode();
                        goto elc1;
                    }
                }
            }
            else
            {
                empty_lt_in_progress = TRUE;
                mmu_close_cl5_win
                return;
            }
        }
        mmu_close_cl5_win
    }
    else
    {
        while (empty_lt_count != 0) {
            if ((tx_holding == 0) && (send_credits != 0)
                && (tx_send_pointer != tx_input_pointer))
            {
                empty_lt_in_progress = TRUE;
                return;
            }
            if (tx_free_hold >= 10) {
                tx_free_hold--;
                dte_to_char(*rx_data_ptr ++);
                empty_lt_count--;
            }
            else
            {
                empty_lt_in_progress = TRUE;
                return;
            }
        }
    }
    *empty_lt_status_holder = MNP_BUFFER_EMPTY;
    empty_lt_in_progress = FALSE;
}


void empty_lt(void)
{
    uword *int_ptr;

    rx_data_ptr = (ubyte *)rx_buf_ptr;
    rx_data_ptr++;
    empty_lt_status_holder = rx_data_ptr;
    rx_data_ptr++;

    int_ptr = (uword *) rx_data_ptr;
    empty_lt_count = *int_ptr;

    if (negot_data_optimization)
    {
        empty_lt_count -= 3;
        rx_data_ptr += 5;
    }
    else
    {
        empty_lt_count -= 5;
        rx_data_ptr += 7;
    }

    if (V42bis_P0 & 2)
    {
        if (!empty_lt_count)
        {
            rx_data_ptr = NUL;
            *empty_lt_status_holder = MNP_BUFFER_EMPTY;
            empty_lt_in_progress = FALSE;
            return;
        }

        /* set up */
        btlz_empty_count = empty_lt_count;
        btlzrxdataptr = rx_data_ptr;
        btlzrx_done = FALSE;
        empty_lt_in_progress = TRUE;
        return;
    }

    empty_lt_continue();
}


void build_lt(void)
{
    if (V42bis_P0 & 1)
    {
        if ((tx_buffer_available() == OK) && (!tx_attention_mode_flag) &&
            (!clear_transmit_buffers_flag))
        {
            if ((!lna_delayed_flag) || (lna_delay_count))
                mnp10_build_v42bis();
        }
        return;
    }

    init_tx_frame();

    tx_input_pointer = inc_ring_ptr(tx_input_pointer);

    if (negot_data_compression)
    {
        mmu_open_cl5_win
        loop_control = TRUE;
        while (loop_control)
        {
            if (process_dce_bg_flag != FALSE)
            {
                mmu_close_cl5_win
                mnp_line_bg();
                mmu_open_cl5_win
            }

            while (run_length_flag)
            {
                run_length_flag = FALSE;
                tx_inchar = run_length_match_char;
                ad_frq_xmt();
            }

            if ((max_chars >= 5) && (max_send_chars != 0))
            {
                char_hold1 = dte_from_char();
                if (run_length_encoding() == CHAR_AVAIL)
                {
                    tx_inchar = run_length_return;
                    ad_frq_xmt();
                }
                max_send_chars--;

                if (lna_delay_count != 0)
                    if (--lna_delay_count == 0)
                    {
                        max_send_chars = 0;
                    }
            }
            else
                loop_control = FALSE;
        }

        if (run_length_flush() == CHAR_AVAIL)
        {
            tx_inchar = run_length_return;
            ad_frq_xmt();
        }
        ad_token_flush();
        mmu_close_cl5_win
    }
    else
    {
        while ((max_send_chars != 0) && (max_chars != 0))
        {
            *tx_data_ptr ++ = dte_from_char();
            i_count++;
            max_send_chars -= 1;
            max_chars -= 1;
            if (lna_delay_count != 0)
                if (--lna_delay_count == 0)
                    break;
        }
    }
    transmit_buffer[(uword)transmit_working_frame].pdu_length = i_count;
}


void init_tx_frame(void)
{
    mnp10_test_APS();
    transmit_working_frame = tx_input_pointer;

    tx_packet_to_finish = FALSE;

    send_sequence_number++;

    tx_data_ptr = (ubyte *) &(transmit_buffer[(uword)transmit_working_frame]);

    *tx_data_ptr++ = 0;
    *tx_data_ptr = 0;

    tx_data_ptr += 3;

    if (negot_data_optimization)
    {
        *tx_data_ptr ++ = 2;
        *tx_data_ptr ++ = PDU_TYPE_LT;
        *tx_data_ptr ++ = send_sequence_number;
        i_count = 3;
    }
    else
    {
        *tx_data_ptr ++ = 4;
        *tx_data_ptr ++ = PDU_TYPE_LT;
        *tx_data_ptr ++ = 1;
        *tx_data_ptr ++ = 1;
        *tx_data_ptr ++ = send_sequence_number;
        i_count = 5;
    }

    max_send_chars = dte_from_num();
    max_chars = dynamic_txmax;
}
