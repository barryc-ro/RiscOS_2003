/****************************************************************************
/
/       Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           MNP_NO5.C
/
/       Module Version: 4.02
/
/       Function:       MNP without CLASS 5 routines.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    3/19/92
/                       11/1/94 (V4.01) - Add ETC and MNP10 updates
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/
#include "sys_def.h"

ubyte ad_frq_init(void);
void empty_lt_continue(void);
void empty_lt(void);
void build_lt(void);
void init_tx_frame(void);

#include "MNP_LIB.EDF"
#include "DTE.EDF"
#include "MNP_DEF.H"
#include "MNP_STRU.H"
#include "MNP_EDE.H"
#include "M10_IF.EDF"

extern ubyte *btlzrxdataptr;
extern ubyte btlzrx_done;
extern uword btlz_empty_count;
extern ubyte V42bis_P0;

#define  MNP10_RETR_INIT__RETRAIN   0
#define  MNP10_RETR_INIT__DISCONN   0

ubyte ad_frq_init(void)
{
   return(FALSE);
}


void empty_lt_continue(void)
{
   if (V42bis_P0 & 2)
      return;

   tx_free_hold = dte_to_free();

   while (empty_lt_count != 0) {
      if ((tx_holding == 0) && (send_credits != 0)
         && (tx_send_pointer != tx_input_pointer))
      {
         empty_lt_in_progress = TRUE;
         return;
      }

      if (tx_free_hold >= 10) {
         tx_free_hold--;
         dte_to_char(*rx_data_ptr ++);
         empty_lt_count--;
      }
      else
      {
         empty_lt_in_progress = TRUE;
         return;
      }
   }
   *empty_lt_status_holder = MNP_BUFFER_EMPTY;
   empty_lt_in_progress = FALSE;
}


void empty_lt(void)
{
   uword *int_ptr;

   rx_data_ptr = (ubyte *)rx_buf_ptr;

   rx_data_ptr++;
	empty_lt_status_holder = rx_data_ptr;
	rx_data_ptr++;

	int_ptr = (uword *) rx_data_ptr;
	empty_lt_count = *int_ptr;

	if (negot_data_optimization)
	{
		empty_lt_count -= 3;
		rx_data_ptr += 5;
	}
	else
	{
		empty_lt_count -= 5;
		rx_data_ptr += 7;
	}

        if (V42bis_P0 & 2)
	{
		/* set up */
		btlz_empty_count = empty_lt_count;
		btlzrxdataptr = rx_data_ptr;
		btlzrx_done = FALSE;
		empty_lt_in_progress = TRUE;
		return;
	}

	empty_lt_continue();
}


void build_lt(void)
{
   if (V42bis_P0 & 1)
   {
      if ((tx_buffer_available() == OK) && (!tx_attention_flag) &&
         (!clear_transmit_buffers_flag))
      {
         mnp10_build_v42bis();
      }
      return;
   }

   init_tx_frame();

   tx_input_pointer = inc_ring_ptr(tx_input_pointer);

   while ((max_send_chars != 0) && (max_chars != 0)) {
      *tx_data_ptr ++ = dte_from_char();
      i_count++;
      max_send_chars -= 1;
      max_chars -= 1;
      if (lna_delay_count != 0)
         if (--lna_delay_count == 0)
            break;
   }
   transmit_buffer[(uword)transmit_working_frame].pdu_length = i_count;
}


void init_tx_frame(void)
{
   mnp10_test_APS();
   transmit_working_frame = tx_input_pointer;
   tx_packet_to_finish = FALSE;
   send_sequence_number++;
   tx_data_ptr = (ubyte *) &(transmit_buffer[(uword)transmit_working_frame]);
   *tx_data_ptr++ = 0;
   *tx_data_ptr = 0;
   tx_data_ptr += 3;

   if (negot_data_optimization)
   {
      *tx_data_ptr ++ = 2;
      *tx_data_ptr ++ = PDU_TYPE_LT;
      *tx_data_ptr ++ = send_sequence_number;
      i_count = 3;
   }
   else
   {
      *tx_data_ptr ++ = 4;
      *tx_data_ptr ++ = PDU_TYPE_LT;
      *tx_data_ptr ++ = 1;
      *tx_data_ptr ++ = 1;
      *tx_data_ptr ++ = send_sequence_number;
      i_count = 5;
   }
   max_send_chars = dte_from_num();
   max_chars = dynamic_txmax;
}
