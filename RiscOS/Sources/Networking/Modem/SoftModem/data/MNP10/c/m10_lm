/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           M10_LM.C
/
/       Module Version: 4.02
/
/       Function:       This file contains the MNP 10 code that processes the
/                       LM packet.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:
/                       11/1/94 (V4.01) - Add ETC and MNP10 updates
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "mnp_if.edf"
#include "mnp_def.h"
#include "mnp_stru.h"
#include "m10_fnc.edf"
#include "m10_def.h"

extern struct extra_short_buffer_entry lm_send_segment;
extern struct buffer_entry receive_buffer [NUMBER_OF_MNP_BUFFERS];
extern ubyte *transmit_active_frame;	/* PTR TO FRAME CURRENTLY BEING XMITED*/
extern ubyte rcv_working_frame_ptr;	/*PTR TO FRAME REFERENCED BY PDU UTILS*/
extern ubyte mnp10_LMI_send_seq_num;
extern ubyte mnp10_LMI_recv_seq_num;
extern ubyte mnp10_neg_cellular;
extern ubyte mnp10_AGC10_value;
extern ubyte mnp10_EQM10_value;
extern ubyte mnp10_LMI_nak_confirm;
extern ubyte mnp10_LMI_nak_request;
extern ubyte mnp10_LMI_RCV_nak_confirm;
extern ubyte mnp10_LMI_RCV_nak_request;
extern ubyte mnp10_lm_recv_type;
extern ubyte mnp10_LMI_RCV_send_seq_num;
extern ubyte mnp10_LMI_RCV_recv_seq_num;
extern ubyte mnp10_RCV_AGC10_value;
extern ubyte mnp10_RCV_EQM10_value;
extern ubyte *tx_current;

/*******************************************************************************
/
/	Routine: mnp10_build_lm
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will build the LM packet
/
/	Input Parameters: ubyte lm_type - Type of LM packet to be built
/				2  = LM TYPE CODE fallback command
/				3  = LM TYPE CODE fallback acknowedge
/				4  = LM TYPE CODE fallforward command
/				5  = LM TYPE CODE fallforward ack
/				8  = LM TYPE CODE signal quality
/				9  = LM TYPE CODE fallforward neg ack
/				10 = LM TYPE CODE idle
/
/	Output Parameters: None
/
/	Global Variables Changed:  lm_send_segment, mnp10_LMI_send_seq_num
/
/	Users: transmit_background(), mnp10_bg(), mnp10_retrain_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp10_build_lm(ubyte lm_type)
{
    lm_send_segment.io_status = 0;
    lm_send_segment.user_flag = 0;
    lm_send_segment.pdu_type = PDU_TYPE_LM;
    lm_send_segment.pdu_data[0] = lm_type;

    if (lm_type == LM_TYPE__IDLE)
    {
        lm_send_segment.pdu_data[1] = mnp10_LMI_send_seq_num | mnp10_LMI_nak_confirm;
        mnp10_LMI_send_seq_num = (mnp10_LMI_send_seq_num + 1) & 0x07f;
        lm_send_segment.pdu_data[2] = mnp10_LMI_recv_seq_num | mnp10_LMI_nak_request;

        if (mnp10_neg_cellular == TRUE)
        {
            lm_send_segment.pdu_data[3] = mnp10_AGC10_value;
            lm_send_segment.pdu_data[4] = mnp10_EQM10_value;

            lm_send_segment.pdu_length = 7;
            lm_send_segment.header_length = 6;
        }
        else
        {
            lm_send_segment.pdu_length = 5;
            lm_send_segment.header_length = 4;
        }
    }
    else
    {
        lm_send_segment.pdu_length = 3;
        lm_send_segment.header_length = 2;
    }
}


/*******************************************************************************
/
/	Routine: mnp10_send_lm
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will send the LM packet.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  transmit_active_frame
/
/	Users: transmit_background(), mnp10_bg(), mnp10_retrain_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp10_send_lm(void)
{
    M10_calc_BLER();
    transmit_active_frame = &lm_send_segment.io_status;
    mpg_start_tx();
}

/*******************************************************************************
/
/	Routine: mnp10_empty_lm
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will process the received LM packet
/
/	Input Parameters: None
/
/	Output Parameters: ubyte process status
/				0    = Process completed OK
/				0xe5 =	Bad count in parm option
/
/	Global Variables Changed:  mnp10_lmi_recv_type,mnp10_LMI_RCV_send_seq_num,
/				   mnp10_LMI_RCV_nak_confirm,
/				   mnp10_LMI_RCV_recv_seq_num,
/				   mnp10_LMI_RCV_nak_request,
/				   mnp10_RCV_AGC10_value,
/				   mnp10_RCV_EQM10_value
/
/	Users: mnp_rx_fg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte mnp10_empty_lm(void)
{
    uword packet_count;
    ubyte i;

    mnp10_lm_recv_type = receive_buffer[rcv_working_frame_ptr].pdu_data[0];
    packet_count = receive_buffer[rcv_working_frame_ptr].header_length;

    if (mnp10_lm_recv_type == LM_TYPE__IDLE)
    {
        if (packet_count >= 4)
        {
            i = receive_buffer[rcv_working_frame_ptr].pdu_data[1];
            mnp10_LMI_RCV_send_seq_num = i & 0x07f;
            mnp10_LMI_RCV_nak_confirm  = i & 0x080;

            i = receive_buffer[rcv_working_frame_ptr].pdu_data[2];
            mnp10_LMI_RCV_recv_seq_num = i & 0x07f;
            mnp10_LMI_RCV_nak_request  = i & 0x080;

            /* Get remote's current AGC10 and EQM10 values in cellular mode */
            if (mnp10_neg_cellular)
            {
                /* If there in the data frame.. */
                if (packet_count >= 6)
                {
                    mnp10_RCV_AGC10_value =
                        receive_buffer[rcv_working_frame_ptr].pdu_data[3];
                    mnp10_RCV_EQM10_value =
                        receive_buffer[rcv_working_frame_ptr].pdu_data[4];
                }
                else
                {
                    mnp10_RCV_AGC10_value =
                        mnp10_RCV_EQM10_value = LMI_RCV__UNAVAILABLE;
                }
            }
        }
        else
        {
            return(EMPTY_PDU_PARM_COUNT);
        }
    }
    return(OK);
}


/*******************************************************************************
/
/	Routine: mnp10_clear_to_build_lm
/
/	Author : RSA
/
/	Creation Date: 12/21/93
/
/	Description : This Routine will test if an LM is current buffered for
/           sending.
/
/	Input Parameters: None
/
/	Output Parameters: ubyte clear_to_send
/				0 (FALSE) = Not clear to build an LM frame.
/				otherwise = Clear to build an LM frame.
/
/	Global Variables Changed: None.
/
/	Users:   proc_mnp10_bg(), M10_check_lmi_seq_num(), proc_mnp10_retrain_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte mnp10_clear_to_build_lm(void)
{
    /* If the current frame is an LM, don't allow a new one to be build
        in place of the current LM frame */
    if (tx_current == &lm_send_segment.io_status)
        return FALSE;
    else
        return TRUE;
}

