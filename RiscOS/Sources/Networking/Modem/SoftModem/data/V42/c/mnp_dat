/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           MNP_DAT.C
/
/       Module Version: 4.02
/
/       Function:       Variable definitions for MNP.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/21/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "mnp_def.h"
#include "mnp_stru.h"

struct buffer_entry transmit_buffer [NUMBER_OF_MNP_BUFFERS];
struct buffer_entry receive_buffer [NUMBER_OF_MNP_BUFFERS];

ubyte timer_tick_counter;
ubyte received_disconnect_reason;	/* DISCONNECT CODE RCVD FROM LINK */
ubyte received_user_disconnect_reas;
ubyte mnp_disconnect_code;	 /* MNP DISCONNECT CODE 	       */
					 /* ( SET BY MNP UPON TERMINATION )    */
					 /* THESE ARE THE SAME CODES AS SENT   */
					 /* TO THE OTHER PEER MODEM IN THE     */
					 /* DISCONNECT MESSAGE		       */
					 /* 0 = NO REASON		       */
					 /* 1 = OTHER THAN LR RECEIVED	       */
					 /* 2 = INCOMPATIBLE PROTOCOL LEVEL    */
					 /* 3 = INCOMPATIBLE OR UNKNOWN        */
					 /* 4 = RETRY LIMIT REACHED	       */
					 /* 5 = INACTIVITY TIMER EXPIRED       */

ubyte mnp_user_disconnect_code;  /* USER DISCONNECT CODE PASSED DOWN   */
					 /* TO MNP TO SEND (IF DISCONNECT      */
					 /* CODE IS USER REQUESTED)	       */
					 /* 254 = PROTOCOL ERROR	       */
					 /* 255 = USER REQUESTED DISCONNECT    */

uword timer_inactivity;
ubyte disconnect_flag;		 /* SIGNALS BACKGROUND TO DISCONNECT   */
ubyte buffering_enabled_flag;
ubyte frame_received_flag;
ubyte tx_attention_flag;
ubyte tx_attention_mode_flag;
ubyte send_acknowledge_flag;
ubyte send_sel_recover_rqst_flag;
ubyte receive_attention_flag;
ubyte clear_receive_buffers_flag;
ubyte clear_transmit_buffers_flag;
ubyte send_attention_flag;
ubyte missing_frame_flag;
ubyte peer_missing_frame_flag;
ubyte char_hold1;
ubyte char_hold2;
ubyte lna_delayed_flag;
uword  lna_delay_count;
uword  i_count;
ubyte dce_delayed_flag;
uword  dce_delay_count;
ubyte timer_transmit_delay;	/* LINE SETTLING DELAY TIMER	      */
ubyte mnp_send_dte_brk;
ubyte la_received_flag;
ubyte re_send_flag;
ubyte la_credit_amount;
ubyte negot_data_optimization;
ubyte negot_data_compression;
uword  mnp_max_tx_size;
uword  dynamic_txmax;		  /* class 4 max LT data size		*/
					 /* 260 = the initialized value        */
					 /* 2	= size decrease factor	       */
					 /* 4	= size increase factor	       */

ubyte *tx_current;		 /* PTR TO FRAME ACTUALLY BEING XMITED */
ubyte *tx_holding;		 /* PTR TO NEXT FRAME TO BE XMITED     */
ubyte *tx_data_holding; 	 /* PTR TO NEXT DATA FRAME TO BE XMITED*/
ubyte tx_oldest_pointer;	 /* buffer # of oldest tx fifo member  */
ubyte tx_input_pointer; 	 /* buf # of next avail. tx fifo member*/
ubyte tx_send_pointer;		 /*buf # of next tx fifo member to send*/
ubyte bad_lt_frame_flag;
ubyte tx_busy_flag;
ubyte sel_max_retries;		 /* SELECTIVE RETRANSMIT MAX RETRIES.  */
ubyte mnp_request_service;	 /* MNP SERVICE LEVEL SELECTION        */
ubyte mnp_length_tbrk;
ubyte mnp_length_lbrk;
ubyte mnp_attention_length;	 /* MNP ATTN LENGTH			 */
ubyte mnp_attention_process;
uword mnp_inactivity_limit;	  /* MNP INACTIVITY TIME LIMIT		*/
					 /*  LOW, HIGH BYTE IN SECONDS	       */
					 /*  0 = DISABLED		       */

ubyte mnp_max_retries;		 /* MAXIMUM NUMBER OF RETRIES	       */
ubyte mnp_startup_mode; 	 /* MIRROR OF ACCUMULATOR ON STARTUP   */
					 /* 0 = originate		       */
					 /* 1 = answer			       */
					 /* 2 = continue from idle	       */

ubyte mnp_negotiated_service;	 /* MNP ACTUAL SERVICE LEVEL	       */
ubyte mnp_negotiated_class;	 /* MNP ACTUAL CLASS DURING RUN-TIME   */
ubyte negot_selective_retransmit;/* ACTUAL RETRANSMIT SELECTION.     */
ubyte mnp_status;		 /* CURRENT STATUS, MAINTAINED BY MNP  */
					 /* 0 halted			       */
					 /* 1 connecting		       */
					 /* 2 idling			       */
					 /* 3 running			       */
					 /* 4 disconnecting		       */
					 /* 5 speed matching		       */

ubyte mnp_state;		 /* CURRENT MNP STATE		       */
					 /* 0  = ORIGINATE INITIAL	       */
					 /* 1  = ORIGINATE WAIT FOR LR	       */
					 /* 2  = ORIGINATE SEND LA	       */
					 /* 3  = ANSWER INITIAL 	       */
					 /* 4  = ANSWER WAIT FOR LA	       */
					 /* 5  = DATA INITIAL		       */
					 /* 6  = DATA WAIT FOR SYNC MODE       */
					 /* 7  = DATA STATE		       */
					 /* 8  = DISCONNECT SEND MESSAGE       */
					 /* 9  = DISC. WAIT FOR MESSAGE SEND   */
					 /* 10 = DISCONNECT SHUTDOWN	       */
					 /* 11 = BUFFERING INITIAL	       */
					 /* 12 = BUFFERING DATA 	       */
					 /* 13 = HALTED STATE		       */

ubyte receive_sequence_number;	 /*LAST SEQUENCE # RECEIVED IN LA OR LT*/
ubyte timer_recovery;		 /* RECOVERY TIMER		       */
ubyte ld_reason_code;
ubyte ld_user_reason;
ubyte ack_rcv_sequence_number;	 /* LAST RECEIVE SEQUENCE # ACKED      */
ubyte empty_sequence_number;	 /* sequence #of last emptied frame    */
ubyte last_la_receive_sequence;  /* LAST RECEIVED LA NUMBER	       */
ubyte last_la_credits;		 /* last received credits in la        */
ubyte la_receive_sequence;
ubyte peer_missing_frame_sequence;
ubyte empty_lt_in_progress;
ubyte autoreliable_timed_out;
ubyte la_window;		 /* ACTUAL WINDOW COUNT 	       */
ubyte last_la_window;
ubyte lrr_receive_sequence;
ubyte lt_send_sequence;
ubyte ln_send_sequence;
ubyte ln_attention_type;
ubyte lna_receive_sequence;
ubyte ln_receive_sequence;
ubyte send_sequence_number;	 /* NEXT SEQUENCE NUMBER IN SEND LT    */
ubyte send_attn_sequence_no;	 /* NEXT SEQUENCE NUMBER IN SEND LN    */
ubyte baud_rate;		 /* BAUD RATE ENCODING TABLE FOR TIMER */
					 /* 0 =  110 BPS		       */
					 /* 1 =  150 BPS		       */
					 /* 2 =  300 BPS		       */
					 /* 3 =  600 BPS		       */
					 /* 4 = 1200 BPS		       */
					 /* 5 = 2400 BPS		       */
					 /* 6 = 4800 BPS		       */
					 /* 7 = 9600 BPS		       */
uword mnp_autoreliable_time;	 /* MNP AUTORELIABLE MAX TIME LIMIT    */
ubyte mnp_fallback_flag;
ubyte mnp_fallback_char;
ubyte mnp_fallback_active;
ubyte missing_frame_sequence;
struct buffer_entry *emptied_que[NUMBER_OF_MNP_BUFFERS+1];
ubyte emptied_que__in;
ubyte emptied_que__out;
struct buffer_entry *received_que[NUMBER_OF_MNP_BUFFERS+1];
ubyte received_que__in;
ubyte received_que__out;
struct buffer_entry *process_que[NUMBER_OF_MNP_BUFFERS+1];
ubyte process_que__in;
ubyte process_que__out;
ubyte *rx_current;		/* PTR TO FRAME ACTUALLY BEING RECVED */
struct buffer_entry *rx_buf_ptr;
uword max_chars;
struct extra_short_buffer_entry la_send_segment;
struct short_buffer_entry lr_send_segment;
struct extra_short_buffer_entry lrr_send_segment;
ubyte lrr_parm_flags;
ubyte lr_protocol_level;
ubyte lr_serial_number [6];
ubyte lr_service_class;
ubyte lr_credit_allocation;
uword  lr_max_data_size;
ubyte lr_selective_retransmit;
ubyte lr_data_optimization;
ubyte lr_data_compression;
ubyte lr_parm_flags;
struct extra_short_buffer_entry ln_send_segment;
ubyte ln_parm_flags;
struct extra_short_buffer_entry ld_send_segment;
ubyte ld_parm_flags;
struct extra_short_buffer_entry lna_send_segment;
ubyte lna_parm_flags;
ubyte *transmit_active_frame;	 /* PTR TO FRAME CURRENTLY BEING XMITED*/
ubyte data_frame_sent;
ubyte mnp_retry_limit;		 /* MNP BLOCK RETRY LIMIT	       */

uword tx_free_hold;
uword empty_lt_count;
ubyte send_credits;		/* # OF BUFFERS THAT CAN BE SENT      */
ubyte *empty_lt_status_holder;
ubyte transmit_working_frame;	 /* PTR FOR CURRENTLY MODIFIED FRAME   */
ubyte rcv_working_frame_ptr;	 /*PTR TO FRAME REFERENCED BY PDU UTILS*/
ubyte lt_parm_flags;
ubyte timer_timeout;		/* RESPONSE TIMEOUT TIMER	      */
ubyte timer_window;		/* WINDOW RESPONSE TIMER	      */
ubyte timer_acknowledge;	/* WAIT FOR ACKNOWLEDGEMENT TIMER     */
ubyte timer_attn_timeout;	/* ATTENTION TIMEOUT TIMER	      */
ubyte max_window;		/* MAXIMUM WINDOW COUNT 	      */
ubyte attention_retry_count;	/* RETRY CNTR FOR ATTENTION RESPONSE  */
uword  max_send_chars;
ubyte loop_control;
ubyte la_parm_flags;
ubyte tx_packet_to_finish;
ubyte *rx_data_ptr;
ubyte *tx_data_ptr;

ubyte mnp10_v32bis;
ubyte mnp10_LT_acked;
ubyte mnp10_status;
ubyte mnp10_frame_rcvd;
ubyte mnp10_rcv_lm__fb_cmd;
ubyte mnp10_rcv_lm__fb_ack;
ubyte mnp10_rcv_lm__ff_cmd;
ubyte mnp10_rcv_lm__ff_ack;
ubyte mnp10_rcvd_non_lm__ff_ack;
ubyte mnp10_rcv_lm__sig_ql;
ubyte mnp10_rcv_lm__ff_nak;
uword mnp10_possible_rates;
ubyte mnp10_neg_cellular;
ubyte mnp10_ff_negot;
uword mnp10_cd_wait_time;
ubyte mnp10_resend_packet_count;
uword mnp10_carrier_loss_delay;
uword mnp10_cd_qualify_time;
ubyte mnp10_EQM10_value;
ubyte mnp10_AGC10_value;
ubyte mnp10_fb_negot;
ubyte mnp10_enabled;
ubyte mnp10_lmi_rcvd;
ubyte mnp10_got_BLER;
ubyte mnp10_lr_dss_basic_features;
ubyte mnp10_lr_dss_v32_v32bis;
ubyte mnp10_lmi_timer;
ubyte mnp10_lm_recv_type;
ubyte mnp10_LMI_RCV_send_seq_num;
ubyte mnp10_LMI_RCV_recv_seq_num;
ubyte mnp10_LMI_send_seq_num;
ubyte mnp10_LMI_recv_seq_num;
ubyte mnp10_LMI_RCV_nak_confirm;
ubyte mnp10_LMI_RCV_nak_request;
ubyte mnp10_LMI_nak_confirm;
ubyte mnp10_LMI_nak_request;
ubyte mnp10_RCV_AGC10_value;
ubyte mnp10_RCV_EQM10_value;

ubyte negot_v42bis;
uword negot_v42bis_dict_size;
ubyte negot_v42bis_str_len;
ubyte lr_v42bis_direction;
uword lr_v42bis_dict_size;
ubyte lr_v42bis_str_len;
ubyte lr_serial_num_flag;

ubyte bad_lt_done;

