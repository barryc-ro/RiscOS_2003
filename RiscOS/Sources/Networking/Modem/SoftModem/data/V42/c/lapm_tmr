/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           LAPM_TMR.C
/
/       Module Version: 4.02
/
/       Function:       Contains LAPM timer code.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/10/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "lapm_ede.h"
#include "edf.lapm_etc"     /* Get LAPM ETC Driver prototypes */


# define max_baud 12


const word T401_time[max_baud+1] = {

	    840,			      /* 1200(tx)/75(rx) */
	    840,			      /* 75(tx)/1200(rx) */
	    300,			      /* 300  */
	    170,			      /* 1200 */
	     90,			      /* 2400 */
	     60,			      /* 4800 */
	     60,			      /* 7200	 */
	     40,			      /* 9600	 */
	     30,			      /* 12000	 */
	     30,			      /* 14400	 */
	     30,			      /* 16800	 */
	     30,			      /* 19200	 */
	     30,			      /* 38400	 */
	 };

const ubyte T401_disc_time[max_baud+1] = {

	    140,			      /* 1200(tx)/75(rx) */
	    140,			      /* 75(tx)/1200(rx) */
	     50,			      /* 300  */
	     20,			      /* 1200 */
	     20,			      /* 2400 */
	     20,			      /* 4800 */
	     20,			      /* 7200	 */
	     10,			      /* 9600	 */
	     10,			      /* 12000	 */
	     10,			      /* 14400	 */
	     10,			      /* 16800	 */
	     10,			      /* 19200	 */
	     10,			      /* 38400	 */
	 };

const word T403_time[max_baud+1] = {

	    560,			      /* 1200(tx)/75(rx) */
	    560,			      /* 75(tx)/1200(rx) */
	    200,			      /* 300  */
	     60,			      /* 1200 */
	     40,			      /* 2400 */
	     40,			      /* 4800 */
	     40,			      /* 7200	 */
	     40,			      /* 9600	 */
	     30,			      /* 12000	 */
	     30,			      /* 14400	 */
	     20,			      /* 16800	 */
	     20,			      /* 19200	 */
	     20,			      /* 38400	 */
	 };


void lapm_reset_inactivity_timer(void);
void initialize_T401(void);
void initialize_poll_T401(void);
void initialize_disc_T401(void);
void initialize_TInit(void);
void initialize_T403(void);

/*******************************************************************************
/									       /
/	 ROUTINE: lapm_reset_inactivity_timer				       /
/									       /
/	 This routine restarts or cancels the inactivity timer		       /
/	 based on the value passed in lapm_init or lapm_reconfigure	       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void lapm_reset_inactivity_timer(void)
{
    if (valueINACTIVITY == 0)
        timer(TIMCancel,INACTIVITY);
    else
        timer(TIMRestart,INACTIVITY);
}


/*******************************************************************************
/									       /
/	 ROUTINE: initialize_T401					       /
/									       /
/	 This routine initializes the retry timer			       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void initialize_T401(void)
{
    /* If ETC is running, set T401 per ETC spec. */
    /* Else set T401 per V.42 spec... */
    if (lapm_ETC_enabled)
        valueT401 = lapm_ETC_get_t401();
    else if (valueBAUD_RATE < max_baud)
        valueT401 = T401_time[valueBAUD_RATE];
    else
        valueT401 = T401_time[max_baud];
}


/*******************************************************************************
/									       /
/	 ROUTINE: initialize_poll_T401					       /
/									       /
/	 This routine initializes the retry timer for polled processes	       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void initialize_poll_T401(void)
{
    initialize_T401();
}


void initialize_disc_T401(void)
{
    if (valueBAUD_RATE < max_baud)
        valueT401 = T401_disc_time[valueBAUD_RATE];
    else
        valueT401 = T401_disc_time[max_baud];
}

/*******************************************************************************
/									       /
/	 ROUTINE: initialize_T403					       /
/									       /
/	 This routine initializes the acknowledgment timer		       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void initialize_T403(void)
{
    /* If ETC is running, set T403 per ETC spec. */
    /* Else set T401 per V.42... */
    if (lapm_ETC_enabled)
        valueT403 = lapm_ETC_get_t403();
    else if (valueBAUD_RATE < max_baud)
        valueT403 = T403_time[valueBAUD_RATE];
    else
        valueT403 = T403_time[max_baud];
}


/*******************************************************************************
/									       /
/	 ROUTINE: initialize_ITnit					       /
/									       /
/	 This routine initializes the line initialization timer 	       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void initialize_TInit(void)
{
    valueTInit = 4; 	/* set to one second */
}
