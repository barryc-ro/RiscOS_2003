/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           LAPM_REJ.C
/
/       Module Version: 4.02
/
/       Function:       Contains LAPM reject code.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/11/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "lapm_ede.h"
#include "edf.lapm_que"
#include "edf.lapm_ctl"
#include "edf.dce_line"

void frame_reject(void);
void rexmit(void);
/*void resend(void);*/
void rexmit_srej(void);
void process_NS(ubyte, struct lapm_receive_struct *);

/*******************************************************************************
/									       /
/	 ROUTINE: frame_reject						       /
/									       /
/	 This routine builds the information field of the FRMR frame.	       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void frame_reject(void)
{
	FRMRfield[0] = event_frame->cmd;

	/* If the frame is an information or supervisory frame then this field contains the */
	/*  second octet of the command field						    */
	if ((event_frame->cmd & UNUMcmd) != UNUMcmd)
		FRMRfield[1] = event_frame->data[0];
	else
		FRMRfield[1] = 0;

	if ((LAPMsrej_que__in == LAPMsrej_que__out) &&
	   ((LAPMtx_que__in == LAPMtx_que__out) || (lapm_get_ack_num() >= k)) ||
	   (LAPMtx_que[LAPMtx_que__out]->cmd == UI))
		FRMRfield[2] = locVS << 1;
	else
		FRMRfield[2] = (LAPMtx_que[LAPMtx_que__out]->cmd & 0xfe);

	FRMRfield[3] = locVR << 1;
	if (event_frame->addr == rmtAddr)
		FRMRfield[3] |= FRMRcr;
	FRMRfield[4] = event_frame->error;
}

/*******************************************************************************
/									       /
/	 ROUTINE: rexmit						       /
/									       /
/	 This routine sets the send counter and takes the unacknowledged       /
/	   frames off the ack que and places them on the send que for	       /
/	   retransmission.						       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void rexmit(void)
{
	line_disable_interrupts();
	LAPMtx_que__ackin = LAPMtx_que__out = LAPMtx_que__ackout;
	LAPMsrej_que__out = LAPMsrej_que__in;
	line_enable_interrupts();
}

/*******************************************************************************
/									       /
/	 ROUTINE: rexmit_srej						       /
/									       /
/	 This routine will take the selected frame off the acknowledgement     /
/	 que and put it on front of the send que to be retransmitted.	       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void rexmit_srej(void)
{
	ubyte frame;
	struct lapm_send_struct *addr;

	rmtNR = (local_event.buffer->data[0] >> 1) & 0x7f;

	frame = LAPMtx_que__ackout;
	addr = LAPMtx_que[frame];

	while (frame != LAPMtx_que__ackin)
	{
		/* Find the lost frame and place it on the send que */
		if (((addr->cmd >> 1) & 0x7f) == rmtNR)
		{
			lapm_put_srej(addr);
			break;
		}
		else
		{
			LAPM_inc_tx(frame);
			addr = LAPMtx_que[frame];
		}
	}
}


/*******************************************************************************
/									       /
/	 ROUTINE: process_NS						       /
/									       /
/	 This routine builds the selective reject frame and tries to send it.  /
/									       /
/	 PARAMETERS IN: 						       /
/		 polld - Value of the poll/final bit			       /
/		 (byte)      0 : Bit cleared				       /
/			     1 : Bit set				       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void process_NS( ubyte poll,
		 struct lapm_receive_struct *tmp_frame )
{
	struct lapm_control_struct *send_frame;
	struct lapm_dummy_struct *hold_buf;
	ubyte i;
	ubyte que_num;

	rmtNS = (tmp_frame->cmd >> 1) & 0x7f;		    /* The send sequence number of the frame */
	qq_lapm((struct lapm_que_struct *)&lapm_temp_rcv_que,(struct lapm_dummy_struct *)tmp_frame);

	if (!LAPMrej)
	{
		i = locVR;

		que_num = 0;
		/* Build SREJ frames for all lost frames */
		while (i != rmtNS)
		{
			hold_buf = (struct lapm_dummy_struct *)lapm_receive_que.fill_begin;
			while (hold_buf != 0)
			{
				if (i == ((hold_buf->cmd >> 1) & 0x7f))
				{
					i = (i + 1) & SEQMOD-1;
					goto out_loop;
				}
				else
					hold_buf = hold_buf->next_addr;
			}

			send_frame = (struct lapm_control_struct *)aq_lapm((struct lapm_que_struct *)&lapm_control_que);

			if (send_frame != NULL)
			{
				send_frame->cmd = SREJ;
				send_frame->addr = rmtAddr;
				send_frame->len = CNUMsize;
				send_frame->data[0] = poll | (i << 1);
				qqdeep_lapm((struct lapm_que_struct *)&lapm_control_que,(struct lapm_dummy_struct *)send_frame,que_num);
				que_num++;
				i = (i + 1) & SEQMOD-1;
				LAPMrej = TRUE;
			}
			else
				break;
out_loop:
		que_num = que_num;
		}

		send_control();
	}
}
