/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           MNP_LD.C
/
/       Module Version: 4.02
/
/       Function:       MNP LD frames routines.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    3/19/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "EDF.MNP_LIB"
#include "MNP_DEF.H"
#include "MNP_STRU.H"
#include "MNP_EDE.H"

void build_packet(ubyte*,ubyte,ubyte);

struct empty_packet_struct
{
    ubyte* addr1;
    ubyte  value1;
    ubyte* addr2;
    ubyte  value2;
    ubyte* addr3;
    ubyte  value3;
};

void empty_packet(ubyte,ubyte*,struct empty_packet_struct *);


void build_ld(void)
{
    if (mnp_disconnect_code != 0)
        buffering_enabled_flag = FALSE;

    build_packet((ubyte *)&ld_send_segment,PDU_TYPE_LD,mnp_disconnect_code);

    if (mnp_disconnect_code == 255) {
	ld_send_segment.pdu_data[3] = 2;
	ld_send_segment.pdu_data[4] = 1;
	ld_send_segment.pdu_data[5] = mnp_user_disconnect_code;
	ld_send_segment.pdu_length = 8;
	ld_send_segment.header_length = 7;
    }
}


void send_ld(void)
{
    transmit_active_frame = &ld_send_segment.io_status;
    start_tx();
}


ubyte empty_ld(void)
{
    struct empty_packet_struct temp_ptr;


    temp_ptr.addr1 = (ubyte *)&ld_reason_code;
    temp_ptr.value1 = 1;
    temp_ptr.addr2 = (ubyte *)&ld_user_reason;
    temp_ptr.value2 = 2;
    temp_ptr.addr3 = 0;

    ld_reason_code = 0xff;

    empty_packet(PDU_TYPE_LD,(ubyte *)&receive_buffer[rcv_working_frame_ptr],&temp_ptr);

    if (ld_reason_code != 0)
    {
	buffering_enabled_flag = FALSE;
    }

    return(OK);
}

