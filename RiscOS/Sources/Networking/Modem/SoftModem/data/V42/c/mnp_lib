/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           MNP_LIB.C
/
/       Module Version: 4.02
/
/       Function:       Miscellanous MNP "library" routines.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/25/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"

ubyte update_tx_buffers(ubyte);
void start_receive(void);
void start_tx(void);
void restart_tx(void);
void restart_receive(void);
ubyte inc_ring_ptr(ubyte);
ubyte inc_seq_ptr(ubyte);
void clear_receive_buffers(void);
void clear_transmit_buffers(void);
ubyte get_send_entry(void);
ubyte scan_transmit_buffer(ubyte);
ubyte tx_buffer_available(void);
void reset_transmit_delay(ubyte);
void reset_timeout_timer(void);
void reset_recovery_timer(void);
void reset_window_retry_timer(void);
void reset_acknowledge_timer(void);
void reset_attn_timeout_timer(void);
void reset_inactivity_timer(void);
void reset_retries(void);
void turnoff_autoreliable(void);
void turnon_autoreliable(void);
ubyte negotiate_parameters(void);
void mnp_line_bg(void);

#include "EDF.V42"
#include "EDF.MNP_BG"
#include "EDF.MNP_AF"
#include "EDF.MNP_LA"
#include "EDF.MNP_LD"
#include "EDF.MNP_LN"
#include "EDF.MNP_LNA"
#include "EDF.MNP_LR"
#include "EDF.MNP_QUE"
#include "EDF.MNP_LRR"
#include "EDF.MNP_LT"
#include "EDF.DCE_LINE"
#include "EDF.DTE"
#include "MNP_DEF.H"
#include "MNP_STRU.H"
#include "EDF.MNP_COMM"
#include "EDF.M10_IF"
#include "MNP_EDE.H"

const ubyte reset_timeout_time[max_baud+1] = {

	    57, 			     /* 1200(tx)/75(rx) */
	    57, 			     /* 75(tx)/1200(rx) */
	    21, 			     /* 300  */
	    10, 			     /* 1200 */
	     4, 			     /* 2400 */
	     4, 			     /* 4800 */
	     4, 			     /* 7200	*/
	     4, 			     /* 9600	*/
	     3, 			     /* 12000	*/
	     3, 			     /* 14400	*/
	     2, 			     /* 16800	*/
	     2, 			     /* 19200	*/
	     2, 			     /* 38400	*/
	 };

const ubyte reset_recovery_time[max_baud+1] = {

	    57, 			     /* 1200(tx)/75(rx) */
	    57, 			     /* 75(tx)/1200(rx) */
	    21, 			     /* 300  */
	     6, 			     /* 1200 */
	     4, 			     /* 2400 */
	     4, 			     /* 4800 */
	     4, 			     /* 7200	*/
	     4, 			     /* 9600	*/
	     3, 			     /* 12000	*/
	     3, 			     /* 14400	*/
	     2, 			     /* 16800	*/
	     2, 			     /* 19200	*/
	     2, 			     /* 38400	*/
	 };

const ubyte reset_window_time[max_baud+1] = {

	    57, 			     /* 1200(tx)/75(rx) */
	    57, 			     /* 75(tx)/1200(rx) */
	    21, 			     /* 300  */
	     6, 			     /* 1200 */
	     4, 			     /* 2400 */
	     4, 			     /* 4800 */
	     4, 			     /* 7200	*/
	     4, 			     /* 9600	*/
	     3, 			     /* 12000	*/
	     3, 			     /* 14400	*/
	     2, 			     /* 16800	*/
	     2, 			     /* 19200	*/
	     2, 			     /* 38400	*/
	 };

const ubyte reset_acknowledge_time[max_baud+1] = {

	    57, 			     /* 1200(tx)/75(rx) */
	    57, 			     /* 75(tx)/1200(rx) */
	    21, 			     /* 300  */
	     6, 			     /* 1200 */
	     4, 			     /* 2400 */
	     4, 			     /* 4800 */
	     4, 			     /* 7200	*/
	     4, 			     /* 9600	*/
	     3, 			     /* 12000	*/
	     3, 			     /* 14400	*/
	     2, 			     /* 16800	*/
	     2, 			     /* 19200	*/
	     2, 			     /* 38400	*/
	 };

const ubyte reset_attn_timeout_time[max_baud+1] = {

	    57, 			     /* 1200(tx)/75(rx) */
	    57, 			     /* 75(tx)/1200(rx) */
	    21, 			     /* 300  */
	     6, 			     /* 1200 */
	     4, 			     /* 2400 */
	     4, 			     /* 4800 */
	     4, 			     /* 7200	*/
	     4, 			     /* 9600	*/
	     3, 			     /* 12000	*/
	     3, 			     /* 14400	*/
	     2, 			     /* 16800	*/
	     2, 			     /* 19200	*/
	     2, 			     /* 38400	*/
	 };


extern uword mnp_inactivity_limit;	 /* MNP INACTIVITY TIME LIMIT	       */
						/*  LOW, HIGH BYTE IN SECONDS	      */
						/*  0 = DISABLED		      */

extern ubyte mnp_max_retries;		/* MAXIMUM NUMBER OF RETRIES	      */
extern ubyte mnp_retry_limit;		/* MNP BLOCK RETRY LIMIT	      */
extern ubyte mnp_negotiated_service;	/* MNP ACTUAL SERVICE LEVEL	      */
extern ubyte mnp_negotiated_class;	/* MNP ACTUAL CLASS DURING RUN-TIME   */
extern ubyte negot_selective_retransmit;/* ACTUAL RETRANSMIT SELECTION.     */
extern uword dynamic_txmax;		/* class 4 max LT data size	      */
						/* 260 = the initialized value	      */
						/* 2   = size decrease factor	      */
						/* 4   = size increase factor	      */

extern uword mnp_max_tx_size;
extern ubyte mnp_fallback_char;
extern ubyte mnp_state; 		/* CURRENT MNP STATE		      */
						/* 0  = ORIGINATE INITIAL	      */
						/* 1  = ORIGINATE WAIT FOR LR	      */
						/* 2  = ORIGINATE SEND LA	      */
						/* 3  = ANSWER INITIAL		      */
						/* 4  = ANSWER WAIT FOR LA	      */
						/* 5  = DATA INITIAL		      */
						/* 6  = DATA WAIT FOR SYNC MODE       */
						/* 7  = DATA STATE		      */
						/* 8  = DISCONNECT SEND MESSAGE       */
						/* 9  = DISC. WAIT FOR MESSAGE SEND   */
						/* 10 = DISCONNECT SHUTDOWN	      */
						/* 11 = BUFFERING INITIAL	      */
						/* 12 = BUFFERING DATA		      */
						/* 13 = HALTED STATE		      */

extern ubyte lr_parm_flags;
extern ubyte send_credits;	       /* # OF BUFFERS THAT CAN BE SENT      */
					       /* BEFORE LA NEEDED		     */


ubyte inc_ring_ptr(ubyte offset_ptr)
{
    return(((ubyte)(offset_ptr+1) == NUMBER_OF_MNP_BUFFERS) ? 0 : offset_ptr+1);
}


ubyte inc_seq_ptr(ubyte offset_ptr)
{
    return(((ubyte)(offset_ptr) == 255) ? 0 : offset_ptr+1);
}


ubyte trans_int(ubyte q_ptr)
{
	line_disable_interrupts();
	if (((ubyte *)&transmit_buffer[(uword) q_ptr] == tx_current) ||
	    ((ubyte *)&transmit_buffer[(uword) q_ptr] == tx_holding) ||
	    ((ubyte *)&transmit_buffer[(uword) q_ptr] == tx_data_holding))
	{
		q_ptr = TRANSMIT_SCAN_NOT_FOUND;
	}

	line_enable_interrupts();
	return(q_ptr);
}


ubyte scan_transmit_buffer(ubyte scan_match)
{
    ubyte seq_ptr;
    if (tx_input_pointer == tx_oldest_pointer)
	return(TRANSMIT_BUFFER_EMPTY);
    seq_ptr = tx_oldest_pointer;
    while (TRUE) {
	if (negot_data_optimization) {
	    if ((transmit_buffer[(uword)seq_ptr].pdu_type == PDU_TYPE_LT) &&
		(transmit_buffer[(uword)seq_ptr].pdu_data[0] == scan_match))
		return(trans_int(seq_ptr));
	}
	else {
	    if ((transmit_buffer[(uword)seq_ptr].pdu_type == PDU_TYPE_LT) &&
		(transmit_buffer[(uword)seq_ptr].pdu_data[2] == scan_match))
		return(trans_int(seq_ptr));
	}
	if (seq_ptr == tx_input_pointer)
	    return(TRANSMIT_SCAN_NOT_FOUND);
	seq_ptr = inc_ring_ptr(seq_ptr);
    }
}


ubyte update_tx_buffers(ubyte scan_match)
{
    ubyte scan_return;

    if (((scan_return = scan_transmit_buffer(scan_match)) & 0x80) != OK)
	return(scan_return);
    tx_oldest_pointer = inc_ring_ptr(scan_return);
    return(OK);
}


void start_receive(void)
{
    rx_current = get_empty();

    if (rx_current != NULL)
	line_rx_block(rx_current);

    frame_received_flag = FALSE;
}


void restart_receive(void)
{
	start_receive();
}


void start_tx(void)
{
    tx_busy_flag = TRUE;
    tx_holding = transmit_active_frame;

    if (tx_current == 0)
    {
	tx_current = transmit_active_frame;
	tx_holding = 0;
	line_tx_block(tx_current);
    }
}


void restart_tx(void)
{
    start_tx();
}


void clear_receive_buffers()
{
	ubyte *locadd;

	while ((locadd = get_process()) != 0)
		put_empty(locadd);
        rx_data_ptr = NULL;
}


void clear_transmit_buffers(void)
{
    tx_data_holding=0;
    tx_holding=0;
    tx_oldest_pointer = tx_send_pointer = tx_input_pointer;
    tx_data_ptr = NULL;
}


ubyte get_send_entry(void)
{
    ubyte temp_pointer;
    if (tx_input_pointer == tx_send_pointer)
	return(NO_BUFFERS_READY);
    temp_pointer = tx_send_pointer;
    tx_send_pointer = inc_ring_ptr(tx_send_pointer);
    return(temp_pointer);
}


ubyte tx_buffer_available(void)
{

    if (inc_ring_ptr(tx_input_pointer) == tx_oldest_pointer)
	return(!OK); /* NO BUFFER AVAILABLE */
    return(OK);
}


void reset_transmit_delay(ubyte time_delay)
{
    timer_transmit_delay = time_delay;
}


void reset_timeout_timer(void)
{
    if (baud_rate < max_baud)
		 timer_timeout = reset_timeout_time[baud_rate];
    else
	 timer_timeout = reset_timeout_time[max_baud];
}


void reset_recovery_timer(void)
{
    if (baud_rate < max_baud)
		 timer_recovery = reset_recovery_time[baud_rate];
    else
	 timer_recovery = reset_recovery_time[max_baud];
}


void reset_window_retry_timer(void)
{
    if (baud_rate < max_baud)
		 timer_window = reset_window_time[baud_rate];
    else
	 timer_window = reset_window_time[max_baud];
}


void reset_acknowledge_timer(void)
{
    if (baud_rate < max_baud)
		 timer_acknowledge = reset_acknowledge_time[baud_rate];
    else
	 timer_acknowledge = reset_acknowledge_time[max_baud];
}


void reset_attn_timeout_timer(void)
{
    if (baud_rate < max_baud)
		 timer_attn_timeout = reset_attn_timeout_time[baud_rate];
    else
	 timer_attn_timeout = reset_attn_timeout_time[max_baud];
}


void reset_inactivity_timer(void)
{
    timer_inactivity = mnp_inactivity_limit;
}


void reset_retries(void)
{
	if (mnp10_enabled == 0)
		mnp_retry_limit = mnp_max_retries;
	else
		mnp_retry_limit = 16;
}


void turnoff_autoreliable(void)
{
	line_autoreliable_fallback(0,0,0,0);
	mnp_fallback_active = FALSE;
}


void turnon_autoreliable(void)
{
     ubyte control_flag;
     ubyte buffer_200_flag;

     control_flag = 0;

     if ( mnp_autoreliable_time != 0 )
	{
	control_flag = control_flag | 1;
	mnp_fallback_active = TRUE;
	} /* autoreliable timer enabled */

     if ( (mnp_fallback_flag & 1) == 1 )
	{
	control_flag = control_flag | 2;
	mnp_fallback_active = TRUE;
	} /* autoreliable character detection enabled */

     buffer_200_flag = 0;
     if ( (mnp_fallback_flag & 2) == 2 )
	{
	buffer_200_flag = buffer_200_flag | 1;
	mnp_fallback_active = TRUE;
	} /* autoreliable 200 character buffer enabled */

     autoreliable_timed_out = FALSE;

     line_autoreliable_fallback ( control_flag, mnp_autoreliable_time, mnp_fallback_char, buffer_200_flag );

}


/*******************************************************************************
/
/	Routine: negot_mnp_parms
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will negotiate the parameters passed in the
/		      LR packet.
/
/	Input Parameters: None
/
/	Output Parameters: ubyte status of the parameter negotiation.
/				0 = Negotiation OK
/				0xD1 = Bad protocol level in orig mode
/				0xD2 = Not orig_wait_lr or answ_initial
/				0xD3 = No serial number received
/				0xD5 = Bad class level in orig mode
/
/	Global Variables Changed: mnp_negotiated_service,mnp_negotiated_class
/				  lr_credit_allocation, send_credits,max_window
/				  mnp_max_tx_size, negot_data_optimization
/				  negot_data_compression,negot_selective_retransmit
/
/	Users: negotiate_parameters(), empty_lapm_mnp_lr()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte negot_mnp_parms(void)
{
    if (lr_protocol_level <= mnp_negotiated_service)
    {
	mnp_negotiated_service = lr_protocol_level;
    }
    else if (mnp_state == BGND_STATE_ORIG_WAIT_LR)
    {
	return(NEGOTIATE_PROTOCOL_LEVEL);
    }
    else if (mnp_state != BGND_STATE_ANSW_INITIAL)
    {
	return(NEGOTIATE_BAD_MNP_STATE);
    }

    if (lr_serial_num_flag == 0)
	return(NEGOTIATE_NO_SERIAL_NO);

    if (lr_service_class <= mnp_negotiated_class)
    {
	mnp_negotiated_class = lr_service_class;
    }
    else if (mnp_state == BGND_STATE_ORIG_WAIT_LR)
    {
	return(NEGOTIATE_CLASS_LEVEL);
    }
    else if (mnp_state != BGND_STATE_ANSW_INITIAL)
    {
	return(NEGOTIATE_BAD_MNP_STATE);
    }

    if (lr_credit_allocation > MNP_INITIAL_CREDITS)
    {
	lr_credit_allocation = MNP_INITIAL_CREDITS;
    }

    send_credits = lr_credit_allocation;

    max_window = (lr_credit_allocation + 1) / 2;

    if ((lr_data_optimization & LR_OPT_PARM__256) == 0)
    {
	if (mnp_max_tx_size > 64)
		mnp_max_tx_size = 64;
    }

    if ((lr_data_optimization & LR_OPT_PARM__FIX_FLD) == 0)
    {
	negot_data_optimization = 0;
    }

    mnp10_negot_parms();

    if (((lr_data_compression & LR_COMP_PARM__CLASS_5) != 0)
	&& (negot_data_compression != 0) )
    {
	ad_frq_init();
	compression_used(1);
    }
    else
    {
	negot_data_compression = 0;
	if (negot_v42bis == 0)
		compression_used(0);
    }

/*
 *  if (lr_selective_retransmit == 0)
 *	negot_selective_retransmit = 0;
 */
/* Currently disable selective retransmission if running MNP10 */

    if ((!lr_selective_retransmit) || (mnp10_enabled))
	negot_selective_retransmit = 0;

    return(OK);
}


ubyte negotiate_parameters()
{
    ubyte return_code;

    lr_v42bis_direction = MNP_V42BIS_P0_DEFAULT;
    lr_v42bis_dict_size = MNP_V42BIS_P1_DEFAULT;
    lr_v42bis_str_len  = MNP_V42BIS_P2_DEFAULT;

    if ((return_code = empty_lr()) != OK)
    {
	return(return_code);
    }

    return (negot_mnp_parms());
}


void mnp_line_bg(void)
{
	line_bg();
	mnp_rx_fg();
}

