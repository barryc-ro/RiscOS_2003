/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           LAPM_QUE.C
/
/       Module Version: 4.02
/
/       Function:       Contains queueing routines for LAPM.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/25/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "lapm_ede.h"
#include "edf.dce_line"

void lapm_rx_que_init(void);
struct lapm_receive_struct *lapm_get_empty(void);
void lapm_put_empty(struct lapm_receive_struct *);
struct lapm_receive_struct *lapm_get_received(void);
void lapm_put_received(struct lapm_receive_struct *);
ubyte *lapm_rx_next_address(void);

void lapm_tx_que_init(void);
void lapm_srej_que_init(void);
void lapm_put_tx(struct lapm_send_struct *);
void lapm_put_srej(struct lapm_send_struct *);
struct lapm_send_struct *lapm_get_tx(void);
struct lapm_send_struct *lapm_get_srej(void);
ubyte lapm_get_ack_num(void);

void iq_lapm_receive_que(void);
void iq_lapm_control_que(void);
void iq_lapm_send_que(void);
void iq_lapm_ack_que(void);
void iq_lapm_event_que(void);
struct lapm_dummy_struct *aq_lapm(struct lapm_que_struct *);
void qq_lapm(struct lapm_que_struct *,struct lapm_dummy_struct *);
void qq1_lapm(struct lapm_que_struct *,struct lapm_dummy_struct *);
void qqdeep_lapm(struct lapm_que_struct *,struct lapm_dummy_struct *,ubyte);
struct lapm_dummy_struct *dq_lapm(struct lapm_que_struct *);
struct lapm_dummy_struct *dqdeep_lapm(struct lapm_que_struct *,ubyte);
void fq_lapm(struct lapm_que_struct *,struct lapm_dummy_struct *);

extern ubyte index;

/*******************************************************************************
/									       /
/	 ROUTINE: iq_lapm_receive_que					       /
/									       /
/	 This routine initializes the fill que begin and end pointers to       /
/	     null. The empty que begin pointer is set to the first buffer      /
/	     location and the end pointer to the last buffer location.	       /
/	     The buffers are linked together by initializing the next	       /
/	     address variables. 					       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void iq_lapm_receive_que(void)
{
	ubyte temp;

	lapm_rx_hold_que.fill_begin = NULL;
	lapm_rx_hold_que.fill_end = NULL;
	lapm_rx_hold_que.empty_begin = NULL;
	lapm_rx_hold_que.empty_end = NULL;
	lapm_temp_rcv_que.fill_begin = NULL;
	lapm_temp_rcv_que.fill_end = NULL;
	lapm_temp_rcv_que.empty_begin = NULL;
	lapm_temp_rcv_que.empty_end = NULL;

	lapm_receive_que.fill_begin = NULL;
	lapm_receive_que.fill_end = NULL;

	lapm_rx_que_init();

	for (temp=0; temp<number_of_lapm_receive_buffers; temp++)
	{
		lapm_receive_buffer[temp].next_addr = NULL;
		LAPMemptied_que[temp] = &lapm_receive_buffer[temp];
	}

}


/*******************************************************************************
/									       /
/	 ROUTINE: iq_lapm_control_que					       /
/									       /
/	 This routine initializes the fill que begin and end pointers to null. /
/	     The empty que begin pointer is set to the first buffer location   /
/	     and the end pointer to the last buffer location.  The buffers     /
/	     are linked together by initializing the next address variables.   /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void iq_lapm_control_que(void)
{
	word i;

	lapm_control_que.fill_begin = NULL;
	lapm_control_que.fill_end = NULL;

	lapm_control_que.empty_begin = (struct lapm_dummy_struct *)&lapm_control_buffer[0];
	lapm_control_que.empty_end = (struct lapm_dummy_struct *)&lapm_control_buffer[number_of_lapm_control_buffers - 1];

	for (i=0;i<(number_of_lapm_control_buffers-1);i++)
		lapm_control_buffer[i].next_addr = (struct lapm_control_struct *)&lapm_control_buffer[i+1];
	lapm_control_buffer[number_of_lapm_control_buffers-1].next_addr = NULL;

}




/*******************************************************************************
/									       /
/	 ROUTINE: iq_lapm_send_que					       /
/									       /
/	 This routine initializes the fill que begin and end pointers to       /
/	     null. The empty que begin pointer is set to the first buffer      /
/	     location and the end pointer to the last buffer location.	       /
/	     The buffers are linked together by initializing the next	       /
/	     address variables. 					       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void iq_lapm_send_que(void)
{
	word i;

	index = 1;

	lapm_send_que.fill_begin = NULL;
	lapm_send_que.fill_end = NULL;

	lapm_send_que.empty_begin = (struct lapm_dummy_struct *)&lapm_send_buffer[0];
	lapm_send_que.empty_end = (struct lapm_dummy_struct *)&lapm_send_buffer[number_of_lapm_send_buffers - 1];

	for (i=0;i<(number_of_lapm_send_buffers-1);i++)
	{
		lapm_send_buffer[i].next_addr = &lapm_send_buffer[i+1];
		lapm_send_buffer[i].status = EMPTY;
	}
	lapm_send_buffer[number_of_lapm_send_buffers-1].next_addr = NULL;

	lapm_tx_que_init();
	lapm_srej_que_init();

}



/*******************************************************************************
/									       /
/	 ROUTINE: iq_lapm_ack_que					       /
/									       /
/	 This routine initializes the fill que begin and end pointers to       /
/	     null. The empty que begin pointer is set to the first buffer      /
/	     location and the end pointer to the last buffer location.	       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void iq_lapm_ack_que(void)
{
	lapm_ack_que.fill_begin = NULL;
	lapm_ack_que.fill_end = NULL;
	lapm_ack_que.empty_begin = NULL;
	lapm_ack_que.empty_end = NULL;
}




/*******************************************************************************
/									       /
/	 ROUTINE: iq_lapm_event_que					       /
/									       /
/	 This routine initializes the fill que begin and end pointers to       /
/	     null. The empty que begin pointer is set to the first buffer      /
/	     location and the end pointer to the last buffer location.	       /
/	     The buffers are linked together by initializing the next	       /
/	     address variables. 					       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void iq_lapm_event_que(void)
{
	word i;

	lapm_event_que.fill_begin = NULL;
	lapm_event_que.fill_end = NULL;

	lapm_event_que.empty_begin = (struct lapm_dummy_struct *)&lapm_event_buffer[0];
	lapm_event_que.empty_end = (struct lapm_dummy_struct *)&lapm_event_buffer[number_of_lapm_event_buffers - 1];

	for (i=0;i<(number_of_lapm_event_buffers-1);i++)
		lapm_event_buffer[i].next_addr = (struct lapm_event_struct *)&lapm_event_buffer[i+1];
	lapm_event_buffer[number_of_lapm_event_buffers-1].next_addr = NULL;

}




/*******************************************************************************
/									       /
/	 ROUTINE: aq_lapm						       /
/									       /
/	 This routine returns the first empty buffer location on the	       /
/	    specified que. The buffer is then removed from the empty que.      /
/									       /
/	 PARAMETERS IN: 						       /
/		 type - Type of que structure buffer to be allocated	       /
/		 (word)      Send					       /
/			     Control					       /
/			     Receive					       /
/			     Event					       /
/									       /
/	 PARAMETERS OUT:						       /
/		 add - Pointer to the buffer allocated			       /
/		 (word) 						       /
/									       /
*******************************************************************************/
struct lapm_dummy_struct *aq_lapm( struct lapm_que_struct *type )
{
      struct lapm_dummy_struct *add;

      if (type->empty_begin == NULL)
		return (NULL);
      add = type->empty_begin;

      type->empty_begin = add->next_addr;
      if (type->empty_begin == NULL)
	      type->empty_end = NULL;

      add->next_addr = NULL;

     return (add);

}




/*******************************************************************************
/									       /
/	 ROUTINE: qq_lapm						       /
/									       /
/	 This routine ques the buffer on to the end of the specified que.      /
/									       /
/	 PARAMETERS IN: 						       /
/		 type - Type of que structure buffer to be allocated	       /
/		 (word)      Send					       /
/			     Control					       /
/			     Receive					       /
/			     Event					       /
/			     Acknowledgment				       /
/									       /
/		 add - Pointer to the buffer allocated			       /
/		 (word) 						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void qq_lapm(	struct lapm_que_struct *type,
		struct lapm_dummy_struct *add  )
{
	if (add == NULL)
		return;

	add->next_addr = NULL;

	if (type->fill_end != NULL)
		type->fill_end->next_addr  = add;

	if (type->fill_begin == NULL)
		type->fill_begin = add;

	type->fill_end = add;

}




/*******************************************************************************
/									       /
/	 ROUTINE: qq1_lapm						       /
/									       /
/	 This routine ques the buffer on to the beginning of the	       /
/	    specified que.						       /
/									       /
/	 PARAMETERS IN: 						       /
/		 type - Type of que structure buffer to be allocated	       /
/		 (word)      Send					       /
/			     Control					       /
/			     Receive					       /
/			     Event					       /
/			     Acknowledgment				       /
/									       /
/		 add - Pointer to the buffer allocated			       /
/		 (word) 						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void qq1_lapm(	struct lapm_que_struct *type,
		struct lapm_dummy_struct *add  )
{
	if (add == NULL)
		return;

	add->next_addr = type->fill_begin;

	if (type->fill_begin == NULL)
		type->fill_end = add;

	type->fill_begin = add;
}




/*******************************************************************************
/									       /
/	 ROUTINE: qqdeep_lapm						       /
/									       /
/	 This routine returns the address of the buffer located "num"          /
/	     places in to the que. The address is then removed from	       /
/	     the fill que.						       /
/									       /
/	 PARAMETERS IN: 						       /
/		 type - Type of que structure buffer to be allocated	       /
/		 (word)      Send					       /
/			     Control					       /
/			     Receive					       /
/			     Event					       /
/			     Acknowledgment				       /
/									       /
/		 add - Pointer to the buffer allocated			       /
/		 (word) 						       /
/									       /
/		 num  - Value of how deep into the que the buffer is	       /
/		 (byte) 						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void qqdeep_lapm( struct lapm_que_struct *type,
		  struct lapm_dummy_struct *add,
		  ubyte num  )
{
	ubyte i;
	struct lapm_dummy_struct *prev;
	struct lapm_dummy_struct *hold_addr;

	if (add == NULL)
		return;

	if (type->fill_begin != NULL)
	{

		if (num == 0)
		{
			add->next_addr = type->fill_begin;
			type->fill_begin = add;
		}
		else
		{
			 hold_addr = type->fill_begin;
			 for (i=1; i<num; i++)
			 {
				 if (hold_addr == NULL)
					return;
				 hold_addr = hold_addr->next_addr;
			 }
			 prev = hold_addr->next_addr;
			 hold_addr->next_addr = add;
			 add->next_addr = prev;
			 if (type->fill_end == hold_addr)
				type->fill_end = add;
		}
	}
	else
	{
		add->next_addr = NULL;
		type->fill_begin = add;
		type->fill_end = add;
	}
}



/*******************************************************************************
/									       /
/	 ROUTINE: dq_lapm						       /
/									       /
/	 This routine returns the address of the first buffer location on      /
/	    the specified que. This address is then removed from the fill que. /
/									       /
/	 PARAMETERS IN: 						       /
/		 type - Type of que structure buffer to be allocated	       /
/		 (word)      Send					       /
/			     Control					       /
/			     Receive					       /
/			     Event					       /
/			     Acknowledgment				       /
/									       /
/	 PARAMETERS OUT:						       /
/		 add - Pointer to the buffer allocated			       /
/		 (word) 						       /
/									       /
*******************************************************************************/
struct lapm_dummy_struct *dq_lapm( struct lapm_que_struct *type )
{
	struct lapm_dummy_struct *add;

	if (type->fill_begin == NULL)
	{
		type->fill_end = NULL;
		add = NULL;
	}
	else
	{
		add = type->fill_begin;
		type->fill_begin = add->next_addr;
		add->next_addr = NULL;

		if (type->fill_begin == NULL)
			type->fill_end = NULL;
	}

	return (add);
}




/*******************************************************************************
/									       /
/	 ROUTINE: dqdeep_lapm						       /
/									       /
/	 This routine returns the address of the buffer located "num"          /
/	    places in to the que. The address is then removed from the	       /
/	    fill que.							       /
/									       /
/	 PARAMETERS IN: 						       /
/		 type - Type of que structure buffer to be allocated	       /
/		 (word)      Send					       /
/			     Control					       /
/			     Receive					       /
/			     Event					       /
/			     Acknowledgment				       /
/									       /
/		num  - Value of how deep into the que the buffer is	       /
/		(byte)							       /
/									       /
/	 PARAMETERS OUT:						       /
/		 hold_add - Pointer to the buffer allocated		       /
/		 (word) 						       /
/									       /
*******************************************************************************/
struct lapm_dummy_struct *dqdeep_lapm ( struct lapm_que_struct *type,
					ubyte num  )
{
	ubyte i;
	struct lapm_dummy_struct *hold_addr;
	struct lapm_dummy_struct *prev;

	if (type->fill_begin != NULL)
	{
		hold_addr = type->fill_begin;

		if (num == 1)
		{
			type->fill_begin = hold_addr->next_addr;
			hold_addr->next_addr = NULL;
			if (type->fill_begin == NULL)
				type->fill_end = NULL;
		}
		else
		{
			 for (i=1; i<num; i++)
			 {
				 prev = hold_addr;
				 hold_addr = hold_addr->next_addr;
				 if (hold_addr == NULL)
					 return (NULL);
			 }
			if (hold_addr == type->fill_end)
				type->fill_end = prev;
			prev->next_addr = hold_addr->next_addr;
			hold_addr->next_addr = NULL;
		}
	}
	else
	{
		return (NULL);
	}
	return (hold_addr);
}


/*******************************************************************************
/									       /
/	 ROUTINE: fq_lapm						       /
/									       /
/	 This routine places the address back on to the end of the empty       /
/	     que which opens it up for use.				       /
/									       /
/	 PARAMETERS IN: 						       /
/		 type - Type of que structure buffer to be allocated	       /
/		 (word)      Send					       /
/			     Control					       /
/			     Receive					       /
/			     Event					       /
/									       /
/		 add - Pointer to the buffer allocated			       /
/		 (word) 						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void fq_lapm(	struct lapm_que_struct *type,
		struct lapm_dummy_struct *add  )
{

	if (add == NULL)
		return;

	if (type->empty_begin == NULL)
		type->empty_begin = add;

	add->next_addr = NULL;
	if (type->empty_end != NULL)
		type->empty_end->next_addr = add;
	type->empty_end = add;
}



void lapm_rx_que_init(void)
{
	LAPMemptied_que__in = number_of_lapm_receive_buffers;
	LAPMemptied_que__out = 0;
	LAPMrx_que__in = LAPMrx_que__out = 0;
}


void lapm_tx_que_init(void)
{
	LAPMtx_que__in = 0;
	LAPMtx_que__out = 0;
	LAPMtx_que__ackin = LAPMtx_que__ackout = 0;
}


void lapm_srej_que_init(void)
{
	LAPMsrej_que__in = 0;
	LAPMsrej_que__out = 0;
}

struct lapm_receive_struct *lapm_get_empty(void)
{
	struct lapm_receive_struct *addr;

	if (LAPMemptied_que__in != LAPMemptied_que__out)
	{
		addr = LAPMemptied_que[LAPMemptied_que__out];
		LAPM_inc(LAPMemptied_que__out);
		addr->next_addr = NULL;
	}
	else
		addr = NULL;

	return(addr);
}

void lapm_put_empty( struct lapm_receive_struct *addr )
{
	addr->next_addr = NULL;
	LAPMemptied_que[LAPMemptied_que__in] = addr;
	LAPM_inc(LAPMemptied_que__in);
}

struct lapm_receive_struct *lapm_get_received(void)
{
	struct lapm_receive_struct *addr;

	if (LAPMrx_que__in != LAPMrx_que__out)
	{
		addr = LAPMrx_que[LAPMrx_que__out];
		LAPM_inc(LAPMrx_que__out);
		addr->next_addr = NULL;
	}
	else
		addr = NULL;

	return(addr);
}

void lapm_put_received( struct lapm_receive_struct *addr )
{
	addr->next_addr = NULL;
	LAPMrx_que[LAPMrx_que__in] = addr;
	LAPM_inc(LAPMrx_que__in);
}

void lapm_put_tx( struct lapm_send_struct *addr )
{
	addr->next_addr = NULL; 	   /* May not be needed.  */
	LAPMtx_que[LAPMtx_que__in] = addr;
	LAPM_inc_tx(LAPMtx_que__in);
}

struct lapm_send_struct *lapm_get_tx(void)
{
	struct lapm_send_struct *addr;

	line_disable_interrupts();

	if (LAPMtx_que__in != LAPMtx_que__out)
	{
		addr = LAPMtx_que[LAPMtx_que__out];
		LAPM_inc_tx(LAPMtx_que__out);
	}
	else
		addr = NULL;

	line_enable_interrupts();

	return(addr);
}

struct lapm_send_struct *lapm_get_srej(void)
{
	struct lapm_send_struct *addr;

	line_disable_interrupts();
	if (LAPMsrej_que__in != LAPMsrej_que__out)
	{
		addr = LAPMsrej_que[LAPMsrej_que__out];
		LAPM_inc_tx(LAPMsrej_que__out);
	}
	else
		addr = NULL;

	line_enable_interrupts();
	return(addr);
}

void lapm_put_srej( struct lapm_send_struct *addr )
{
	addr->next_addr = NULL; 	     /* May not be needed.  */
	LAPMsrej_que[LAPMsrej_que__in] = addr;
	LAPM_inc_tx(LAPMsrej_que__in);
}

ubyte lapm_get_ack_num(void)
{
	if (LAPMtx_que__ackout > LAPMtx_que__ackin)
		return (1 + number_of_lapm_send_buffers + LAPMtx_que__ackin - LAPMtx_que__ackout);
	else
		return (LAPMtx_que__ackin - LAPMtx_que__ackout);
}

ubyte *lapm_rx_next_address(void)
{
	lapm_put_received(receive_active_frame);
	receive_active_frame = lapm_get_empty();
	return((ubyte *)receive_active_frame);
}

