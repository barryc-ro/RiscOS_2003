/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           LAPM_XID.C
/
/       Module Version: 4.02
/
/       Function:       Contains XID code.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/11/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "lapm_ede.h"

#include "edf.lapm_que"
#include "edf.v42"
#include "edf.btinit"

void build_xid(struct parms_struct,ubyte,ubyte);
ubyte build_xid_parameter(ubyte *, ubyte, unsigned long);
void process_xid(void);


/*******************************************************************************
/									       /
/	 ROUTINE: build_xid						       /
/									       /
/	 This routine builds the information fields of the XID frame	       /
/	 used in parameter negotiation. 				       /
/									       /
/	 PARAMETERS IN: 						       /
/		 parms - Type of parameter values to be negotiated	       /
/			     neg_parms : The final negotiated parameters       /
/						used for response frame        /
/			     req_parms : The parameters being requested        /
/						used for command frames        /
/									       /
/		 poll  - Value of the Poll/Final bit			       /
/		 (byte)      0 : Bit cleared				       /
/			     1 : Bit set				       /
/									       /
/		 addr  - Address to be placed into the frame		       /
/		 (byte)      if Originator				       /
/				      1 : Local address 		       /
/				      3 : Remote address		       /
/			     if Answerer				       /
/				      3 : Local address 		       /
/				      1 : Remote address		       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/

ubyte build_xid_parameter(ubyte *ptr,ubyte parm_id,ulong parm_val)
{
	ubyte count,parm_length,flag;
	ubyte *hold_ptr;
	unsigned long temp;

	*ptr++ = parm_id;
	hold_ptr = ptr;
	ptr++;

	parm_length = 0;
	flag = FALSE;
	count = 0;

	while (count < 4)
	{
		temp = parm_val & 0xff000000;

		if ((temp != 0) || flag)
		{
			flag = TRUE;
			*ptr++ = (ubyte) (temp >> 24);
			parm_length += 1;
		}

		count += 1;
		parm_val = parm_val << 8;
	}

	xid_length += parm_length;
	*hold_ptr = parm_length;

	return(parm_length+2);
}



void build_xid(struct parms_struct parms,ubyte poll,ubyte addr)
{
	ubyte  j;
	word comp_length;

	lapm_xid_buffer.cmd = XID | poll;
	lapm_xid_buffer.addr = addr;

	lapm_xid_buffer.data[0] = XIDfid;			     /* Frame identification */
	lapm_xid_buffer.data[1] = XIDgid;			     /* Group identification */
	lapm_xid_buffer.data[4] = XIDopt;			     /* Optional functions */
	lapm_xid_buffer.data[5] = 3;

	if (parms.supSREJ)
		lapm_xid_buffer.data[6] = XIDsupt3 | XIDsrej;
	else
		lapm_xid_buffer.data[6] = XIDsupt3;

	if (parms.supTEST)
		lapm_xid_buffer.data[7] = XIDsupt2 | XIDtest;
	else
		lapm_xid_buffer.data[7] = XIDsupt2;

	lapm_xid_buffer.data[8] = 0;

	xid_length = XIDglen + 3;

	j = 9;

	j += build_xid_parameter((ubyte *)&lapm_xid_buffer.data[j],XIDtn401,(unsigned long) parms.TN401*8);
	j += build_xid_parameter((ubyte *)&lapm_xid_buffer.data[j],XIDrn401,(unsigned long) parms.RN401*8);
	j += build_xid_parameter((ubyte *)&lapm_xid_buffer.data[j],XIDtk,(unsigned long) parms.TK);
	j += build_xid_parameter((ubyte *)&lapm_xid_buffer.data[j],XIDrk,(unsigned long) parms.RK);

	lapm_xid_buffer.data[2] = (ubyte) (xid_length >> 8);
	lapm_xid_buffer.data[3] = (ubyte) xid_length;

	/* Negotiation for Data Compression */
	comp_length = 0;

	if ((LAPMxid == TRUE) || (include_BTLZ_resp == TRUE))
	{
	       include_BTLZ_resp = FALSE;

	       comp_length = COMPsize + 15;

	       lapm_xid_buffer.data[j++] = COMPgid;
	       lapm_xid_buffer.data[j++] = 0;
	       lapm_xid_buffer.data[j++] = 15;
	       lapm_xid_buffer.data[j++] = COMPsid;
	       lapm_xid_buffer.data[j++] = COMPslen;

	       lapm_xid_buffer.data[j++] = 'V';
	       lapm_xid_buffer.data[j++] = '4';
	       lapm_xid_buffer.data[j++] = '2';

	       lapm_xid_buffer.data[j++] = COMPp0id;
	       lapm_xid_buffer.data[j++] = 1;
	       lapm_xid_buffer.data[j++] = parms.P0;

	       lapm_xid_buffer.data[j++] = COMPp1id;
	       lapm_xid_buffer.data[j++] = 2;
	       lapm_xid_buffer.data[j++] = (ubyte) (parms.P1 >> 8);
	       lapm_xid_buffer.data[j++] = (ubyte) parms.P1;

	       lapm_xid_buffer.data[j++] = COMPp2id;
	       lapm_xid_buffer.data[j++] = 1;
	       lapm_xid_buffer.data[j++] = parms.P2;
	}

	if ((LAPMmnpreferred) && (LAPMview == ORIG))
	{
		lapm_xid_buffer.data[j++] = 0xff;
		lapm_xid_buffer.data[j++] = 0xff;

		comp_length += 2;
		comp_length += v42_build_mnp_xid((ubyte *)&lapm_xid_buffer.data[j]);
	}

	lapm_xid_buffer.len = XIDsize + xid_length + comp_length;
	qq_lapm((struct lapm_que_struct *)&lapm_control_que,(struct lapm_dummy_struct *)&lapm_xid_buffer);
}

/*******************************************************************************
/									       /
/	ROUTINE: process_xid						       /
/									       /
/	Author : RSA							       /
/									       /
/	Creation Date: 05/07/91 					       /
/									       /
/	Description : This routine takes the parameter values out of the       /
/		      information fields of the XID frame received during      /
/		      parameter negotiation. It will compare these values with /
/		      the requested parameters and place the smallest value in /
/		      the negotiated parameter list.			       /
/									       /
/	PARAMETERS IN: none						       /
/									       /
/	PARAMETERS OUT: none						       /
/									       /
/	Global Variables Changed:  neg_parms				       /
/									       /
/	Users:	STATE_CXID, STRD_RXID, SETUP_RXID, B_RXID		       /
/									       /
/	-------------------------------------------------------------	       /
/	-			Modifications			    -	       /
/	-------------------------------------------------------------	       /
/									       /
/	Author & Date:	RSA      					       /
/	Description:                                                           /
/									       /
*******************************************************************************/
void process_xid(void)
{
	ubyte i, j, k,l, hold_p0;
	unsigned long total;
	ubyte tmp_byte;

	i = 0;
	if ((event_frame->data[0] == XIDfid) && (event_frame->data[1] == XIDgid))
	{
		i = 4;
		k = 4 + event_frame->data[3];

		while (i != k)
		{
			total = 0;
			switch (event_frame->data[i++])
			{
				case XIDopt:
					i++;
					neg_parms.supSREJ = req_parms.supSREJ & ((event_frame->data[i++] & XIDsrej) == XIDsrej);
					neg_parms.supTEST = req_parms.supTEST & ((event_frame->data[i++] & XIDtest) == XIDtest);
					i ++;
					break;

				case XIDtn401:
					j = event_frame->data[i++];

					while (j != 0)
					{
						total = (total << 8) + event_frame->data[i++];
						j--;
					}

					total = total >> 3;

					if (total < req_parms.RN401)
						neg_parms.RN401 = (word) total;
					else
						neg_parms.RN401 = req_parms.RN401;

					break;

				case XIDrn401:
					j = event_frame->data[i++];

					while (j != 0)
					{
						total = (total << 8) + event_frame->data[i++];
						j--;
					}

					total = total >> 3;

					if (total < req_parms.TN401)
						neg_parms.TN401 = (word) total;
					else
						neg_parms.TN401 = req_parms.TN401;

					block_size_used(neg_parms.TN401);
					break;

				case XIDtk:
					j = event_frame->data[i++];

					while (j != 0)					      {
						total = (total << 8) + event_frame->data[i++];
						j--;
					}

					if (total < req_parms.RK)
						neg_parms.RK = (word) total;
					else
						neg_parms.RK = req_parms.RK;

					break;

				case XIDrk:
					j = event_frame->data[i++];

					while (j != 0)
					{
						total = (total << 8) + event_frame->data[i++];
						j--;
					}

					if (total < req_parms.TK)
						neg_parms.TK = (word) total;
					else
						neg_parms.TK = req_parms.TK;

					break;
			}
		}
	}

	if ((LAPMstatus != UP) && (LAPMstatus != IDLE))
	{
		neg_parms.P0 = hold_p0 = 0;

		if (event_frame->data[i] == COMPgid)
		{
			hold_p0 = req_parms.P0;
			if (LAPMview != ORIG)
			{
				if (hold_p0 == 1)
					hold_p0 = 2;
				else if (hold_p0 == 2)
					hold_p0 = 1;
			}

			i += 3;
			if (event_frame->data[i++] == COMPsid)
			{
				i ++;
				if ((event_frame->data[i++] == 'V') && (event_frame->data[i++] == '4')
				     && (event_frame->data[i++] == '2'))
				{
					if (LAPMstatus == UP)
						include_BTLZ_resp = TRUE;
					if (event_frame->data[i] == COMPp0id)
					{
						i++;
						include_BTLZ_resp = TRUE;
						if (event_frame->data[i] != 0)
						{
						       i++;
						       neg_parms.P0 = hold_p0 = hold_p0 & event_frame->data[i];
						       if (LAPMview != ORIG)
						       {
								if (hold_p0 == 1)
									hold_p0 = 2;
								else if (hold_p0 == 2)
									hold_p0 = 1;
						       }
						}
						i++;
					}
					if (event_frame->data[i] == COMPp1id)
					{
						i++;
						if (event_frame->data[i++] != 0)
						{
							total = (event_frame->data[i++] << 8) & 0xff00;
							total = total + (event_frame->data[i] & 0x00ff);
							if (total >= MinP1)
							{
								if (total < req_parms.P1)
									neg_parms.P1 = (word) total;
								else
									neg_parms.P1 = req_parms.P1;
							}
							else
							{
								event->type = E_DISC;
								return;
							}
						}
						i++;
					}
					if (event_frame->data[i++] == COMPp2id)
					{
						if (event_frame->data[i++] != 0)
						{
							total = event_frame->data[i++] & 0x00ff;
							if ((total >= MinP2) && (total <= MaxP2))
							{
								if (total < req_parms.P2)
									neg_parms.P2 = (word) total;
								else
									neg_parms.P2 = req_parms.P2;
							}
							else
								event->type = E_DISC;
						}
					}
				}
			}
		}

		if ((LAPMmnpreferred) && (event_frame->data[i] == 0xff) && (event_frame->data[i+1] == 0xff))
		{
			i += 2;
			j = event_frame->data[i++];

			l = 0;
			while ( (j != 0) && ( (j & 0x80) == 0) )
			{
				switch(event_frame->data[i++])
				{
					case (1):
						l += 1;
						break;

					case (8):
						l += 2;
						break;

					default:
						break;
				}
				k = event_frame->data[i++];
				j -= k + 2;
				i += k;
			}

			if (l == 3)
			{
				lapm_mnp_rcv_frame = (ubyte *)event_frame;
				lapm_fallback_to_MNP = TRUE;
				return;
			}
		}

		tmp_byte = BTInit(hold_p0,neg_parms.P1,neg_parms.P2);

		if (hold_p0 != 0)
			hold_p0 |= 0x80;

		compression_used(hold_p0);
	}
}

