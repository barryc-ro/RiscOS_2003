/****************************************************************************
/
/	    Copyright 1993,1994,1995.
/      All Rights Reserved by:
/	    RSA
/	    7701 Six Forks Road
/	    Suite 120
/	    Raleigh, NC  27615
/	    (919) 846-7171
/
/
/	This document contains material confidential to RSA its contents must
/	not be revealed, used or disclosed to anyone or company with out
/	written permission by RSA.  The information contained herein is solely
/	for the use of RSA.
/
/	File:		         pp00hdx.c
/
/	Module Version:	5.00 (1.02)
/
/	Function:	      This file contains the control code for Packet Protocol.
/
/	Product:	         PP core code
/
/	History:          03/08/93 (1.01)
/
/  Created:          10/10/1995.
/
/               ---------------------------------------------------------
/               -        Differences from core code.                    -
/               ---------------------------------------------------------
/
/               Author & Date:  RSA
/               Description:
/
/		---------------------------------------------------------
/		-			Modifications			-
/		---------------------------------------------------------
/
/		Author & Date:	RSA
/		Description:
/		Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "pp_def.h"
#include "pp_mem.h"

extern void dte_pp_io_abort(void);
extern void dte_pp_control(ubyte,ubyte const *);
extern void dte_pp_tx_block(ubyte const *);
extern void dte_pp_disable_int(void);
extern void dte_pp_enable_int(void);

void pp_send_length(void);
void pp_put_char(ubyte);
void pp_bg(void);
void pp_timer(void);
void pp_control(ubyte);
void pp_init(ubyte,uword);
void pp_to_char(ubyte);
void pp_to_clear(void);
uword pp_to_free(void);
ubyte *pp_tx(void);
ubyte pp_rx(ubyte *,ubyte *);
uword pp_to_num(void);

const ubyte ETB_frame [2] = {1,ETB};
const ubyte SOH_frame [2] = {1,SOH};
const ubyte pp_control_char [4] = {3,ACK,NAK,ENQ};

/*******************************************************************************
/
/	Routine: pp_control
/
/	Author : RSA
/
/	Creation Date: 03/08/93
/
/	Description : This Routine will call DTE_PP_CONTROL to start or
/                     stop Packet Protocol operation.
/
/	Input Parameters:
/                         ubyte         : 0 = stop PP operation
/                                       : 1 = start PP operation
/
/	Output Parameters: none
/
/	Global Variables Changed:  pp_state
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void pp_control(ubyte on_off)
{
    pp_to_clear();
    pp_ctl_chr = NULL;
    pp_state = PP_STATE__IDLE;

    dte_pp_control((pp_mode_on & on_off),&pp_control_char[0]);
}

/*******************************************************************************
/
/	Routine: pp_init
/
/	Author : RSA
/
/	Creation Date: 03/08/93
/
/	Description : This Routine will configure variables used by Packet
/                     Protocol.
/
/	Input Parameters:
/                         ubyte         : 0 = disable Packet Protocol
/                                       : 1 = Half-duplex packet protocol operation
/                                       : 2 - 255 = Reserved
/                         uword         : timer value in 1/10th of seconds
/
/	Output Parameters: none
/
/	Global Variables Changed:  pp_ctl_char, pp_state, pp_timer_value
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void pp_init(ubyte mode,uword time)
{
    if (mode == 1)    /* enable packet protocol but do not start it */
    {
        pp_mode_on = TRUE;
        pp_timer_value = time;
        PP_LENGTH_BLOCK[0] = 1;      /* length of this frame is always 1 */
        pp_state = PP_STATE__IDLE;
    }
    else
    {
        pp_mode_on = FALSE;
        dte_pp_control(0,&pp_control_char[0]);
    }
}

/*******************************************************************************
/
/	Routine: pp_to_free
/
/	Author : RSA
/
/	Creation Date: 03/08/93
/
/	Description : This routine will return the number of spaces available
/		      in the transmit buffer
/
/	Input Parameters: none
/
/	Output Parameters: ubyte - number of free spaces
/
/	Global Variables Changed:  none
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
uword pp_to_free(void)
{
    ubyte temp;
    uword pp_tx_free;

    pp_bg();

    if (pp_insert_index == pp_remove_index)
    {
        if (PP_TX_BUFFER[pp_remove_index].pp_frame_length)
            return(0);
        else
            return(PP_MAX_LENGTH/2);
    }

    temp = (pp_insert_index + 1) & PP_WRAP_AROUND_CONST;  /* wrap ptr around */
    if (pp_remove_index != temp)
        return(PP_MAX_LENGTH/2);

    pp_tx_free = PP_MAX_LENGTH - pp_data_index;

    /* need to have at least 2 free bytes for special char shielding */
    if (pp_tx_free >= 2)
        return(pp_tx_free/2);

    return(0);
}

/*******************************************************************************
/
/	Routine: pp_to_char
/
/	Author : RSA
/
/	Creation Date: 03/08/93
/
/	Description : This routine will place a character into the transmit
/		      buffer to be sent to the terminal
/
/	Input Parameters: ubyte - character to be transmitted
/
/	Output Parameters: none
/
/	Global Variables Changed:  none
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void pp_to_char(ubyte chr)
{
    switch (chr)
    {
        case ETB:
            pp_put_char(DLE);                       /* shield ETB with DLE 'W' */
            pp_put_char(ETB_SHLD);
            break;

        case SOH:
            pp_put_char(DLE);                       /* shield SOH with DLE 'A' */
            pp_put_char(SOH_SHLD);
            break;

        default:
            pp_put_char(chr);
            break;
    }

    pp_bg();
}

/*******************************************************************************
/
/	Routine: pp_to_clear
/
/	Author : RSA
/
/	Creation Date: 03/08/93
/
/	Description : This routine will clear out all pending data to be
/		      transmitted to the terminal
/
/	Input Parameters: none
/
/	Output Parameters: none
/
/	Global Variables Changed:  pp_remove_index, pp_insert_index,
/                                  pp_data_index
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void pp_to_clear(void)
{
    ubyte i;

    dte_pp_disable_int();

    if (pp_state == PP_STATE__IDLE)
    {
        pp_remove_index = 0;
        pp_insert_index = 0;
        pp_data_index = 0;
        for (i=0; i<PP_TX_NUM_BUFFERS; i++)
            PP_TX_BUFFER[i].pp_frame_length = 0;
    }
    else if (pp_state == PP_STATE__SENT_SOH)
    {
        pp_insert_index = (pp_remove_index + 2) & PP_WRAP_AROUND_CONST;
        pp_data_index = 0;
        for (i=0; i<(PP_TX_NUM_BUFFERS-2); i++)
            PP_TX_BUFFER[i+pp_insert_index].pp_frame_length = 0;
    }
    else
    {
        pp_insert_index = (pp_remove_index + 1) & PP_WRAP_AROUND_CONST;
        pp_data_index = 0;
        for (i=0; i<(PP_TX_NUM_BUFFERS-1); i++)
            PP_TX_BUFFER[i+pp_insert_index].pp_frame_length = 0;
    }

    dte_pp_enable_int();
}

/*******************************************************************************
/
/	Routine: pp_to_num
/
/	Author : RSA
/
/	Creation Date: 03/08/93
/
/	Description : This routine will return the number of characters
/		      left to send to the terminal
/
/	Input Parameters: none
/
/	Output Parameters: uword - number of transmit characters
/
/	Global Variables Changed:  none
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
uword pp_to_num(void)
{
    pp_bg();
    return((uword)PP_TX_BUFFER[pp_remove_index].pp_frame_length);
}

/*******************************************************************************
/
/	Routine: pp_tx
/
/	Author : RSA
/
/	Creation Date: 03/08/93
/
/	Description : this routine will determine whether to send an ETB or
/		      SOH character to the terminal.
/
/	Input Parameters: none
/
/	Output Parameters: ubyte * - points to the next block of data to send
/
/	Global Variables Changed:  pp_state
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte *pp_tx(void)
{
    ubyte temp;

    if (pp_state == PP_STATE__SEND_DATA)
    {
        pp_ctl_chr = NULL;

        /* Need to start the retransmit timer;  Since we are in "SEND_DATA"
            state the timer is not running so it is safe for us to adjust
            timer in this routine.  If the timer was running we would need
            to disable interrupts in the "pp_timer" routine.                */
        pp_timer_tick = pp_timer_value;

        temp = (pp_remove_index + 1) & PP_WRAP_AROUND_CONST;
        if (PP_TX_BUFFER[pp_remove_index].pp_frame_length ==
            PP_TX_BUFFER[temp].pp_frame_length)
        {
            /* send SOH if the next frame to be sent has the same length */
            pp_state = PP_STATE__SENT_SOH;
            return (&SOH_frame[0]);
        }
        else
        {
            /* send ETB if the next frame to be sent has the different length */
            pp_state = PP_STATE__SENT_ETB;
            return (&ETB_frame[0]);
        }
    }
    else
        return (NULL);                              /* clear tx-int now */
}

/*******************************************************************************
/
/	Routine: pp_rx
/
/	Author : RSA
/
/	Creation Date: 03/08/93
/
/	Description : this routine will scan and strip the PP control characters
/                     from the receive buffer.
/
/	Input Parameters: Counte
/
/	Output Parameters: register C - indicate whether to append a DLE infront
/                                       of the received data stream.
/	Global Variables Changed:  none
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte pp_rx(ubyte *frame_ptr, ubyte *count_ptr)
{
    ubyte chr;

    chr = *(frame_ptr + (*count_ptr-1));   /* retrieve last char in frame */

    if ((chr == NAK) || (chr == ACK) || (chr == ENQ))
    {
        pp_ctl_chr = chr;
        *count_ptr -= 1;                   /* update frame count */
    }

    return(DONT_APPEND_DLE);
}

/*******************************************************************************
/
/	Routine: pp_bg
/
/	Author : RSA
/
/	Creation Date: 03/08/93
/
/	Description : This Routine is called to process the PP background
/		      functions.
/
/	Input Parameters: none
/
/	Output Parameters: none
/
/	Global Variables Changed:  pp_state, pp_timer_tick, pp_ctl_chr,
/                                  pp_insert_index, pp_remove_index,
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void pp_bg(void)
{
    switch (pp_state)
    {
        case PP_STATE__IDLE:
            if ((PP_TX_BUFFER[pp_remove_index].pp_frame_length) ||
                (pp_data_index))
            {
                pp_ctl_chr = NULL;
                pp_send_length();
            }
        break;

        case PP_STATE__SENT_LENGTH:
            if (pp_ctl_chr == ACK)
            {
                pp_ctl_chr = NULL;
                pp_timer_tick = 0;
                pp_state = PP_STATE__SEND_DATA;
                dte_pp_tx_block(&PP_TX_BUFFER[pp_remove_index].pp_frame_length);
            }
            else
            {
                if (pp_timer_tick == 0)
                {
                    pp_timer_tick = pp_timer_value;
                    dte_pp_tx_block(&PP_LENGTH_BLOCK[0]);   /* resend length-block */
                }
            }
        break;

        case PP_STATE__SEND_DATA:
            if (pp_ctl_chr == ENQ)
            {
                pp_ctl_chr = NULL;
                dte_pp_io_abort();
            }
        break;

        case PP_STATE__SENT_ETB:
            if (pp_ctl_chr == ACK)
            {
                pp_ctl_chr = NULL;

                /* release the acknowledged frame */
                PP_TX_BUFFER[pp_remove_index].pp_frame_length = 0;
                pp_remove_index = (pp_remove_index + 1) & PP_WRAP_AROUND_CONST;

                if ((PP_TX_BUFFER[pp_remove_index].pp_frame_length) ||
                   (pp_data_index))
                {
                    pp_send_length();
                }
                else
                {
                    pp_state = PP_STATE__IDLE;
                    pp_timer_tick = 0;
                }
            }
            else if (pp_ctl_chr == NAK)
            {
                /* resend the rejected frame */
                pp_ctl_chr = NULL;
                pp_timer_tick = 0;
                pp_state = PP_STATE__SEND_DATA;
                dte_pp_tx_block(&PP_TX_BUFFER[pp_remove_index].pp_frame_length);
            }
            else
            {
                if (pp_timer_tick == 0)
                {
                    pp_timer_tick = pp_timer_value;
                    dte_pp_tx_block(&ETB_frame[0]);     /* resend ETB */
                }
            }
        break;

        case PP_STATE__SENT_SOH:
            if (pp_ctl_chr == ACK)
            {
                pp_ctl_chr = NULL;
                PP_TX_BUFFER[pp_remove_index].pp_frame_length = 0;
                pp_remove_index = (pp_remove_index + 1) & PP_WRAP_AROUND_CONST;
                pp_timer_tick = 0;
                pp_state = PP_STATE__SEND_DATA;
                dte_pp_tx_block(&PP_TX_BUFFER[pp_remove_index].pp_frame_length);
            }
            else if (pp_ctl_chr == NAK)
            {
                pp_ctl_chr = NULL;
                pp_timer_tick = 0;
                pp_state = PP_STATE__SEND_DATA;
                dte_pp_tx_block(&PP_TX_BUFFER[pp_remove_index].pp_frame_length);
            }
            else
            {
                if (pp_timer_tick == 0)
                {
                    pp_timer_tick = pp_timer_value;
                    dte_pp_tx_block(&SOH_frame[0]);         /* resend SOH */
                }
            }
        break;
    }
}

/*******************************************************************************
/
/	Routine: pp_timer
/
/	Author : RSA
/
/	Creation Date: 03/08/93
/
/	Description : This routine will decrement the 100ms PP timer ticks.
/
/	Input Parameters: none
/
/	Output Parameters: none
/
/	Global Variables Changed: pp_timer_tick
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void pp_timer(void)
{
    if (pp_timer_tick)
        pp_timer_tick--;
}

/*******************************************************************************
/
/	Routine: pp_put_char
/
/	Author : RSA
/
/	Creation Date: 03/08/93
/
/	Description : This routine will place a character into the transmit
/		      buffer to be sent to the terminal
/
/	Input Parameters: ubyte data - character to be transmitted
/
/	Output Parameters: none
/
/	Global Variables Changed:  pp_insert_index, pp_data_index
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void pp_put_char(ubyte data)
{
    PP_TX_BUFFER[pp_insert_index].pp_data[pp_data_index++] = data;
    if (pp_data_index == PP_MAX_LENGTH)
    {
        /* update frame length */
        PP_TX_BUFFER[pp_insert_index].pp_frame_length = pp_data_index;
        pp_data_index = 0;
        pp_insert_index = (pp_insert_index + 1) & PP_WRAP_AROUND_CONST;
    }

}

/*******************************************************************************
/
/	Routine: pp_send_length
/
/	Author : RSA
/
/	Creation Date: 03/08/93
/
/	Description : this routine will send out the length parameter of the
/		      packet.
/
/	Input Parameters: none
/
/	Output Parameters: none
/
/	Global Variables Changed:  pp_state, pp_timer_tick, pp_insert_index,
/                                  pp_data_index
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void pp_send_length(void)
{
    pp_state = PP_STATE__SENT_LENGTH;
    pp_timer_tick = pp_timer_value;

    /* move pointers to the next available input buffer */

    if (pp_insert_index == pp_remove_index)
    {
        /* update frame length */

        PP_TX_BUFFER[pp_insert_index].pp_frame_length = pp_data_index;
        pp_data_index = 0;
        pp_insert_index = (pp_insert_index + 1) & PP_WRAP_AROUND_CONST;
    }

    PP_LENGTH_BLOCK[1] = PP_TX_BUFFER[pp_remove_index].pp_frame_length;
    dte_pp_tx_block(&PP_LENGTH_BLOCK[0]);
}
