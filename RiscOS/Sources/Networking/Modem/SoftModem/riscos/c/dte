
enum { ACU, DTE, FAX } dte_mode = ACU;
ubyte esc_chr;                   /* Escape character storage */
int esc_guard_time;              /* Escape guard time (20 mSec units) */
ubyte dte_guard time;		 /* Time variable for escape */
int dte_tesc_count;              /* Count of escape chars received */
int dte_lead_guard;              /* Lead time flag */
int dte_20_mSec_timer;           /* Breaks timed to 20 mSec intervals */

UART_STATUS uart;

/*
 * dte_init: Called by the ACU to initialize the DTE I/O module. This routine
 * should not be called while on line (this routine will purge buffers)
 */
void dte_init( ubyte in_baud_rate,
               ubyte in_data_bits,
               ubyte in_stop_bits,
               ubyte in_parity,
               ubyte in_term_to_modem_flow_cntl,
               ubyte in_term_to_modem_xon,
               ubyte in_term_to_modem_xoff,
               ubyte in_modem_to_term_flow_cntl,
               ubyte in_modem_to_term_xon,
               ubyte in_modem_to_term_xoff,
               ubyte in_pass_through_flow_cntl,
               ubyte in_esc_char,
               ubyte in_esc_guard_time,
               ubyte escape_mode)
{
    esc_guard_time = in_esc_guard_time;
    esc_chr = in_esc_char;
    dte_20_mSec_timer = 2;
    dte_tesc_count = 0;

    dte_to_clear();
    dte_from_clear();
}

/*
 * dte_reconfigure: Called by the ACU to reconfigure the DTE I/O. This routine
 * can be called while on line. This routine works the same as dte_init(),
 * except it does not purge buffers.
 */
void dte_reconfigure( ubyte in_baud_rate,
		      ubyte in_data_bits,
		      ubyte in_stop_bits,
		      ubyte in_parity,
		      ubyte in_term_to_modem_flow_cntl,
		      ubyte in_term_to_modem_xon,
		      ubyte in_term_to_modem_xoff,
		      ubyte in_modem_to_term_flow_cntl,
		      ubyte in_modem_to_term_xon,
		      ubyte in_modem_to_term_xoff,
		      ubyte in_pass_through_flow_cntl,
		      ubyte in_esc_char,
		      ubyte in_esc_guard_time,
		      ubyte in_esc_mode)
{
    esc_guard_time = in_esc_guard_time;
    esc_chr = in_esc_char;
    dte_20_mSec_timer = 2;
    dte_tesc_count = 0;
}

/*
 * dte_timer: Called by the ACU every 10 milliseconds
 */
void dte_timer(void)
{
    dte_20_mSec_timer--;

    /* Escape timing */

    if (dte_20_mSec_timer == 0)
    {
        dte_20_mSec_timer = 2;

        /* If timer already 0 do nothing */
        if (dte_guard_time != 0)
        {
            dte_guard_time--;
            if (dte_guard_time == 0)
            {
                if (dte_lead_guard == FALSE)
                    dte_lead_guard = TRUE;
                else
                {
                    if (dte_tesc_count == 3)
                    {
                        dte_tesc_count = 0;
                        dte_lead_guard = FALSE;
                        dte_guard_time = esc_guard_time;
                        system_rcv_escape();
                    }
                }
            }
        }
    }
}

/*
 * dte_from_clear is called to clear the receive buffer.
 */
void dte_from_clear(void)
{
    if (dte_mode == DTE || dte_mode == FAX)
    {
        dte_20_mSec_timer = 2;
        dte_tesc_count = 0;
        dte_lead_guard = FALSE;
        dte_guard_time = esc_guard_time;
    }

    riscos_from_clear();
}

