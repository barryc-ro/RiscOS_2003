#include <stddef.h>
#include <string.h>
#include <stdio.h>

#include "kernel.h"
#include "swis.h"

#include "Podule.h"

#include "sys_def.h"
#include "devicefs.h"
#include "modulehdr.h"

#define Service_PreReset         0x45
#define Service_DeviceFSStarting 0x70

void *private_word;
extern void ac00tab1_init_statics(void);
extern void ac00tab2_init_statics(void);
extern void podule_int_veneer(void);
extern void enable_iomd_interrupts(void);

#ifdef PODULEBASED
#define IOC   ((volatile unsigned char *)0x03200000)
#define ECTCR 0xC8 /* I/O expansion card timing control */
#endif

#define IrqV 2

static const char one = 1;

_kernel_oserror *module_initialise(char *cmd_tail, int podule_base, void *pw)
{
    _kernel_oserror *e;

    private_word = pw;

#ifdef NO_STATIC_INIT
    ac00tab1_init_statics();
    ac00tab2_init_statics();
#endif

#ifdef PODULEBASED
    /*
     * Can't use this because it's not a legal podule...
     *
    e = _swix(Podule_SetSpeed, _IN(0)|_IN(3), Podule_Speed_TypeC, 0);
    if (e) return e;
     */
    IOC[ECTCR] |= 0x01;
#endif

    e = register_with_devicefs();
    if (e) return e;

#ifdef USE_IRQV
    e = _swix(OS_Claim, _INR(0,2), IrqV, podule_int_veneer, pw);
#else
    e = _swix(OS_ClaimDeviceVector, _INR(0,4), 13, podule_int_veneer, pw, &one, 1);
#endif
    if (e)
        deregister_from_devicefs();

    enable_iomd_interrupts();

    return e;
}

_kernel_oserror *module_finalise(int fatal, int podule, void *pw)
{
#ifdef USE_IRQV
    _swix(OS_Release, _INR(0,2), IrqV, podule_int_veneer, pw);
#else
    _swix(OS_ReleaseDeviceVector, _INR(0,4), 13, podule_int_veneer, pw, &one, 1);
#endif

    deregister_from_devicefs();

    return NULL;
}

extern void ResetDSP(void), HaltDSP(void);

void module_service(int service_number, _kernel_swi_regs *r, void *pw)
{
    switch (service_number)
    {
      case Service_PreReset:
        HaltDSP();
        break;
      case Service_DeviceFSStarting:
        register_with_devicefs();
        break;
    }
}


/*
 * EEPROM stuff...
 */
#define EEPROM_size 1024

ubyte EEPROM[EEPROM_size];

_kernel_oserror *eeprom_init(void)
{
    return _swix(OS_File, _INR(0,3), 255, "EEPROM", EEPROM, 0);
}

_kernel_oserror *eeprom_final(void)
{
    return _swix(OS_File, _INR(0,2)|_INR(4,5), 10, "EEPROM", 0xFFD, EEPROM, EEPROM + EEPROM_size);
}

ubyte read_eeprom_data(uword eeprom_addr, uword byte_count, ubyte *str_ptr)
{
    if (eeprom_addr + byte_count > EEPROM_size)
        return 1;

    memcpy(str_ptr, EEPROM + eeprom_addr, byte_count);

    return 0;
}

ubyte write_eeprom_data(uword eeprom_addr, uword byte_count, ubyte *str_ptr)
{
    if (eeprom_addr + byte_count > EEPROM_size)
        return 1;

    memcpy(EEPROM + eeprom_addr, str_ptr, byte_count);

    return 0;
}

#ifdef DEBUG
unsigned int svc_stack_dump[0x0800];
unsigned int stack_ptr;

void dump_svc_stack(void)
{
    int dummy;
    memcpy(svc_stack_dump, (void *)0x01c00000, 0x2000);
    stack_ptr = (unsigned int) &dummy;
}
#endif

_kernel_oserror *module_command(char *arg_string, int argc, int cmd_no, void *pw)
{
    extern unsigned int total_irq_count, rx_irq_count, tx_irq_count, callbacks;
    extern unsigned int drops_due_to_retrain, last_funny_border;
    extern uword *sig_quality;
    extern int modem_baud;
    unsigned int i,j;
    static const char bps[23][8] = { "1200/75", "75/1200", "300", "1200", "2400",
                                     "4800", "7200", "9600", "12000", "14400", "16800",
                                     "19200", "38400", "57600", "600", "115200",
                                     "21600", "24000", "26400", "28800", "31200",
                                     "33600", "36000" };

    switch (cmd_no)
    {
      case CMD_PktTrace:
        display_cmmd_trace();
        break;

      case CMD_ModemStats:
        printf("Total IRQs: %u\n"
               "   Rx IRQs: %u\n"
               "   Tx IRQs: %u\n"
               " Callbacks: %u\n",
               total_irq_count, rx_irq_count, tx_irq_count, callbacks);
        printf("Drops due to retrain: %u\n", drops_due_to_retrain);
        printf("Last funny border:    %u\n", last_funny_border);
        printf("Modem speed:          %sbps\n", bps[modem_baud]);
        printf("Signal quality:      &%x\n", *sig_quality);
        break;

      case CMD_StackDump:
        printf("sp=%08x\n\n", stack_ptr);
        for (j=0,i=((stack_ptr - 0x01c00000)>>2)&~3; i < 0x800; i += 4, j++)
        {
            printf("%08x: %08x %08x %08x %08x\n", 0x01c00000 + (i<<2), svc_stack_dump[i], svc_stack_dump[i+1], svc_stack_dump[i+2], svc_stack_dump[i+2]);

        }
        break;
    }

    return NULL;
}
