#include <stddef.h>

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "edf.dce_line"
#include "../dp_crus/dsp_drv.h"
#include "../DCE_crus/iohw_equ.h"
#include "mt_pro.h"

#include "kernel.h"
#include "swis.h"

#include "devicefs.h"
#include "svcprint.h"

#ifndef PollPeriod
#define PollPeriod 3 /* centiseconds */
#endif

#define ControlLine_DTR     (1u<<0)
#define ControlLine_RTS     (1u<<1)   /* Not implemented - read as 0 */
#define ControlLine_CTS     (1u<<16)  /* Not implemented - read as 0 */
#define ControlLine_DSR     (1u<<17)
#define ControlLine_RI      (1u<<18)
#define ControlLine_DCD     (1u<<19)
#define ControlLine_FifosOn (1u<<20)  /* Not implemented - read as 1 */

extern void acu_timer(void);
extern void ACU_Main(void);
extern void eeprom_init(void), eeprom_final(void);
extern void master_init(void);
extern void ResetDSP(void), HaltDSP(void);
extern void InitPktDescriptors(void);
extern void init_trace(void);

extern void devicefs_entry(void);
extern void tickerv_veneer(void);
extern void tickerv_veneer2(void);
extern void callevery_veneer(void);
extern void maincallback_veneer(void);

extern void *private_word;

#define TickerV 0x1C

static int device_handle;
static void (*BuffManService)(void);
static void *BuffManWS;

static volatile int devicefs_handler_threaded;

ubyte sys_intr_disabled = TRUE;

extern unsigned int call_buffermanager(_kernel_swi_regs *r, void (*addr)(void), void *pw);

#define CallBufMan(r) call_buffermanager(r, BuffManService, BuffManWS)

typedef struct ioctl_t
{
    unsigned int reason   : 16;
    unsigned int group    : 8;
    unsigned int          : 6;
    unsigned int read     : 1;
    unsigned int write    : 1;
    unsigned int data;
} ioctl_t;

/*
 * The structure describing our special field
 */
typedef struct sfblock
{
    unsigned int size;
    unsigned int thresh;
} sfblock;

/*
 * State information for each stream
 */
typedef struct Stream
{
    unsigned int devicefs_stream;
    unsigned int buffersize;
    unsigned int bufferthreshold;
    unsigned int buffer;
    unsigned int buffer_privid;
} Stream;

static Stream InputStream, OutputStream;
static int active_streams;

/*
 * Parameters for device_create_[tx|rx]_buffer
 */
typedef struct bufparams
{
    Stream *stream;
    int flags;
    int size;
    int handle;
    int threshold;
} bufparams;

static _kernel_oserror *device_initialise(int stream, int flags, sfblock *specialfield, int *ourstream);
static _kernel_oserror *device_finalise(Stream *stream, void *pw);
static _kernel_oserror *device_wakeupfortx(Stream *stream, void *pw);
static _kernel_oserror *device_create_tx_buffer(bufparams *params);
static _kernel_oserror *device_create_rx_buffer(bufparams *params);
static _kernel_oserror *device_halt(Stream *stream);
static _kernel_oserror *device_resume(Stream *stream);
static _kernel_oserror *device_stream_created(Stream *stream, int buffer, void *pw);
static _kernel_oserror *device_ioctl(Stream *stream, ioctl_t *param);
static _kernel_oserror *riscos_start_polling(void *pw);
static void riscos_stop_polling(void *pw);
static int podule_rx_int(void), podule_tx_int(void);

#if PollPeriod == 1
int callevery_handler(_kernel_swi_regs *r, void *pw);
#else
_kernel_oserror *callevery_handler(_kernel_swi_regs *r, void *pw);
#endif

#define BM_InsertByte      0
#define BM_InsertBlock     1
#define BM_RemoveByte      2
#define BM_RemoveBlock     3
#define BM_ExamineByte     4
#define BM_ExamineBlock    5
#define BM_UsedSpace       6
#define BM_FreeSpace       7
#define BM_PurgeBuffer     8
#define BM_NextFilledBlock 9

_kernel_oserror *register_with_devicefs(void)
{
    typedef struct device
    {
        ptrdiff_t name;
        int flags;
        int rxflags, rxsize;
        int txflags, txsize;
        int reserved;
    } device;
    static struct
    {
        device device1;
        int end;
    }
    device_list =
    {
        {
            0,
            1,              /* Buffered, no "SoftModem$Path" */
            0, 256,
            0, 256,
            0
        },
        0
    };

    /* This is an offset, not an address (yuck)! */
    device_list.device1.name = "SoftModem" - (char *) &device_list.device1;

    return _swix(DeviceFS_Register, _INR(0,7)|_OUT(0),
                                    2, /* Full duplex character device */
                                    &device_list,
                                    devicefs_entry,
                                    0,
                                    private_word,
                                    "size/Nthresh/N",
                                    1, /* 1 input stream */
                                    1, /* 1 output stream */
                                    &device_handle);
}

_kernel_oserror *deregister_from_devicefs(void)
{
    return _swix(DeviceFS_Deregister, _IN(0), device_handle);
}

_kernel_oserror *devicefs_handler(_kernel_swi_regs *r, void *pw)
{
#ifdef TMLDEBUG
    Printf("\021\006devicefs_handler: r0=%d\021\007\n", r->r[0]);
#endif

    switch (r->r[0])
    {
      case 0:
        return device_initialise(r->r[2], r->r[3], (sfblock *)r->r[6], &r->r[2]);
      case 1:
        return device_finalise((Stream *)r->r[2], pw);
      case 2:
        return device_wakeupfortx((Stream *)r->r[2], pw);
      case 3: /* Wake up for RX */
      case 4: /* Sleep RX */
      case 5: /* EnumDir */
        return NULL;
      case 6:
        return device_create_tx_buffer((bufparams *)&r->r[2]);
      case 7:
        return device_create_rx_buffer((bufparams *)&r->r[2]);
      case 8:
        return device_halt((Stream *)r->r[2]);
      case 9:
        return device_resume((Stream *)r->r[2]);
      case 10:
        return NULL;
      case 11:
        return device_stream_created((Stream *)r->r[2], r->r[3], pw);
      case 14:
        return device_ioctl((Stream *)r->r[2], (ioctl_t *)r->r[3]);
      default:
        return (_kernel_oserror *) "\0\0\0\0Bad devicefs call"; /* /* Fix this */
    }
}

/*
 * DeviceDriver_Entry 0 : Initialise
 *
 * In: stream       = DeviceFS stream handle
 *     flags        = flags for opening the stream (bit 0 -> TX/~RX)
 *     specialfield = pointer to special field control block (PRM 2-422)
 *
 * Out: ourstream = our internal stream handle
 *
 * This routine is called as a stream is being opened onto the device by
 * DeviceFS. It must store the relevant handles and setup the device.
 *
 * The special field control block will consist of a number of words each
 * corresponding to the field in the device open string.
 */
_kernel_oserror *device_initialise(int devicefs_stream, int flags, sfblock *specialfield, int *ourstream)
{
    Stream *stream = (flags & 1) ? &OutputStream : &InputStream;

    *ourstream = (int) stream;

    devicefs_handler_threaded = 1;

    stream->devicefs_stream = devicefs_stream;

    if (specialfield->size != 0xDEADDEAD)
        stream->buffersize = specialfield->size;

    if (specialfield->thresh != 0xDEADDEAD)
        stream->bufferthreshold = specialfield->thresh;

    devicefs_handler_threaded = 0;

    return NULL;
}

/*
 * DeviceDriver_Entry 1 : Finalise
 *
 * In: stream       = internal stream handle (or 0 for all)
 *
 * This routine is called when a stream is being closed by DeviceFS. When
 * received then we should halt the relevant transmission type until the stream
 * is re-opened.
 */
static _kernel_oserror *device_finalise(Stream *stream, void *pw)
{
    if (stream == NULL)
    {
        device_finalise(&InputStream, pw);
        device_finalise(&OutputStream, pw);
    }
    else
    {
        if (stream->devicefs_stream == 0)
            return NULL;

        devicefs_handler_threaded = 1;

        stream->devicefs_stream=0;
        stream->buffer=0;
        stream->buffer_privid=-1;

        /* If this is the last stream, shut down the hardware */
        if (--active_streams == 0)
        {
            modem_disable_interrupts();

            riscos_stop_polling(pw);

            HaltDSP();

            hard_reset();

            eeprom_final();
        }

        devicefs_handler_threaded = 0;
    }

    return NULL;
}

static _kernel_oserror *device_wakeupfortx(Stream *stream, void *pw)
{
    /* Cause an extra call to the central loop for rapid response */
    //callevery_handler(0, pw);

    return NULL;
}

/*
 * DeviceDriver_Entry 6 : Create buffer for TX
 *
 * In: stream       = internal stream handle
 *     flags        = suggested flags for buffer being created
 *     size         = suggested size for buffer
 *     handle       = suggested buffer handle (-1 for unique generated one)
 *     threshold    = suggested threshold for buffer
 *
 * Out: flags, size, handle, threshold modified as required
 *
 * This routine is called before the buffer is actually created, it allows the
 * device to change the values and then return.
 */
static _kernel_oserror *device_create_tx_buffer(bufparams *params)
{
    if (OutputStream.buffersize)
        params->size = OutputStream.buffersize;
    else
        OutputStream.buffersize = params->size;

    if (OutputStream.bufferthreshold)
        params->threshold = OutputStream.bufferthreshold;
    else
        OutputStream.bufferthreshold = params->threshold;

    return NULL;
}

/*
 * DeviceDriver_Entry 7 : Create buffer for RX
 *
 * In: stream       = internal stream handle
 *     flags        = suggested flags for buffer being created
 *     size         = suggested size for buffer
 *     handle       = suggested buffer handle (-1 for unique generated one)
 *     threshold    = suggested threshold for buffer
 *
 * Out: flags, size, handle, threshold modified as required
 *
 * This routine is called before the buffer is actually created, it allows the
 * device to change the values and then return.
 */
_kernel_oserror *device_create_rx_buffer(bufparams *params)
{
    if (InputStream.buffersize)
        params->size = InputStream.buffersize;
    else
        InputStream.buffersize = params->size;

    if (InputStream.bufferthreshold)
        params->threshold = InputStream.bufferthreshold;
    else
        InputStream.bufferthreshold = params->threshold;

    return NULL;
}

static _kernel_oserror *device_halt(Stream *stream)
{
    return NULL;
}

static _kernel_oserror *device_resume(Stream *stream)
{
    return NULL;
}

/*
 * DeviceDriver_Entry 11 : Stream created
 *
 * In: stream       = internal stream handle
 *     handle       = buffer handle (-1 if none)
 *     threshold    = suggested threshold for buffer
 *
 * This routine is called after the stream has been created, it gives me a chance
 * to setup the device correctly and start transmission etc, etc...
 */
static _kernel_oserror *device_stream_created(Stream *stream, int buffer, void *pw)
{
    _kernel_oserror *e;

    e = _swix(Buffer_InternalInfo, _IN(0)|_OUTR(0,2), buffer,
                                                      &stream->buffer_privid,
                                                      &BuffManService,
                                                      &BuffManWS
             );
    if (e) return e;

    /* If this is the first stream, lets kick the thing into life */
    if (active_streams++ == 0)
    {
        InitPktDescriptors();

        init_trace();

        eeprom_init();

#ifdef TMLDEBUG
        Printf("eeprom_init called\n");
#endif

        e = riscos_start_polling(pw);
        if (e) return e;

#ifdef TMLDEBUG
        Printf("riscos_start_polling called\n");
#endif
    }


    return NULL;
}

/*
 * DeviceDriver_Entry 14 : IOCtl
 *
 * In: stream       = internal stream handle
 *     param        = IOCtl parameter block as passed in R2 of OS_Args call
 *
 * This call is dispatched to the underlying device driver whenever the OS_Args IOCtl SWI is
 * called or the SWI DeviceFS_CallDevice (14) is called.
 */
static _kernel_oserror *device_ioctl(Stream *stream, ioctl_t *param)
{
    switch (param->group)
    {
      case 0:
        switch (param->reason)
        {
          case 6:
            return ioctl_control_lines(param);
        }
    }
    return NULL;
}

static ioctl_control_lines(ioctl_t *param)
{
    if (param->write)
    {
        uart.dtr = param->data & ControlLine_DTR;
    }
    if (param->read)
    {
        unsigned int out = ControlLine_RTS | ControlLine_FifosOn;

        if (uart.dtr)
            out |= ControlLine_DTR;

        if (uart.dcd)
            out |= ControlLine_DCD;

        if (uart.ring)
            out |= ControlLine_RI;

        param->data = out;

    }
}

/*
 * This section deals with the main background polling needed. There are
 * two basic jobs:
 *
 * 1) Calling acu_timer every centisecond. This hooked directly onto
 *    TickerV.
 * 2) Calling ACU_Main periodically. This is called as a transient
 *    callback triggered every "PollPeriod" centiseconds using
 *    OS_CallEvery.
 */

static _kernel_oserror *riscos_start_polling(void *pw)
{
    _kernel_oserror *e;

    #if PollPeriod == 1
    e=_swix(OS_Claim, _INR(0,2), TickerV, tickerv_veneer2, pw);
    #else
    e=_swix(OS_CallEvery, _INR(0,2), PollPeriod-1, callevery_veneer, pw);
    #endif

    return e;
}

static void riscos_stop_polling(void *pw)
{
    _swix(OS_Release, _INR(0,2), TickerV, tickerv_veneer, pw);

    #if PollPeriod == 1
    _swix(OS_Release, _INR(0,2), TickerV, tickerv_veneer2, pw);
    #else
    _swix(OS_RemoveTickerEvent, _INR(0,1), callevery_veneer, pw);
    #endif

    //_swix(OS_RemoveCallBack, _INR(0,1), maincallback_veneer, pw);
}

static int maincallback_pending;
static volatile int poll_loop_threaded;
static volatile int interrupt_handler_threaded;
unsigned int callbacks = 0;

#if PollPeriod == 1
int callevery_handler(_kernel_swi_regs *r, void *pw)
#else
_kernel_oserror *callevery_handler(_kernel_swi_regs *r, void *pw)
#endif
{
#if 0
    _kernel_oserror *e;

    if (!maincallback_pending)
    {
        e=_swix(OS_AddCallBack, _INR(0,1), maincallback_veneer, pw);

        if (!e)
            maincallback_pending=1;
    }
#else
    if (!poll_loop_threaded && !interrupt_handler_threaded && !devicefs_handler_threaded)
    {
        poll_loop_threaded = 1;
        _kernel_irqs_on();
        callbacks++;

        if (!acu_loop)
            master_init();

        if (acu_loop)
            ACU_Main();

        poll_loop_threaded = 0;
    }

#endif

#if PollPeriod == 1
    return 1;
#else
    return NULL;
#endif
}

#if 0

_kernel_oserror *maincallback_handler(_kernel_swi_regs *r, void *pw)
{
    maincallback_pending=0;
    callbacks++;

    if (!acu_loop)
        master_init();

    if (acu_loop)
        ACU_Main();

    return NULL;
}

#endif

unsigned long PIT_int_cnt;

int tickerv_handler(_kernel_swi_regs *r, void *pw)
{
    PIT_int_cnt++;

    acu_timer();

    return 1;
}

#ifdef PODULEBASED

extern void line_tx_int(void), line_rx_int(void);
extern void enable_iomd_interrupts(void);
extern ubyte line_io_enabled;
extern ubyte dce_length_semaphore, dce_status_semaphore;

static ubyte line_ints_enabled;

void line_enable_interrupts(void)
{
    line_ints_enabled = TRUE;
    enable_iomd_interrupts();
}

void line_disable_interrupts(void)
{
    line_ints_enabled = FALSE;
    disable_iomd_interrupts();
}

void enable_int(void)
{
    sys_intr_disabled = FALSE;
    _swix(OS_Claim, _INR(0,2), TickerV, tickerv_veneer, private_word);
#ifdef TMLDEBUG
    Printf("enabled_ints\n");
#endif
}

void disable_int(void)
{
    sys_intr_disabled = TRUE;
    _swix(OS_Release, _INR(0,2), TickerV, tickerv_veneer, private_word);
#ifdef TMLDEBUG
    Printf("disabled_ints\n");
#endif
}

volatile unsigned int total_irq_count, rx_irq_count, tx_irq_count;

/*
 * These functions deal with interrupts from the DSP. Need to be careful with
 * reentrancy.
 *
 * podule_[rt]x_int are adapted from dce_line_[rt]x_int in DCE_crus.c.lineint
 */
static int podule_rx_int(void)
{
    dce_length_semaphore = get_register(DSP_CP_DATA_LENGTH);
    dce_status_semaphore = get_register(DSP_CP_DATA_STATUS);

    if (dce_status_semaphore)
        dce_length_semaphore = get_register(DSP_CP_DATA_LENGTH);

    if (dce_length_semaphore || dce_status_semaphore)
    {
        /*Printf("\021\002R\021\007");*/
        if (line_io_enabled && line_ints_enabled && !sys_intr_disabled)
        {
            rx_irq_count++;
            line_rx_int();
        }
        return 1;
    }

    return 0;
}

static int podule_tx_int(void)
{
   dce_length_semaphore = get_register(CP_DSP_DATA_LENGTH);
   dce_status_semaphore = get_register(CP_DSP_DATA_STATUS);

   if (dce_length_semaphore == 0 && dce_status_semaphore == 0)
   {
       /*Printf("\021\001T\021\007");*/
       if (line_io_enabled && line_ints_enabled && !sys_intr_disabled)
       {
            tx_irq_count++;
           line_tx_int();
       }
       return 1;
   }

   return 0;
}


#ifdef USE_IRQV
int podule_int_handler(_kernel_swi_regs *r, void *pw)
#else
_kernel_oserror *podule_int_handler(_kernel_swi_regs *r, void *pw)
#endif
{
    interrupt_handler_threaded=1;
#ifdef USE_IRQV
    /*
     * Call podule_rx_int, then podule_tx_int, and if either of them
     * does something, claim IrqV
     */
    /*Printf("\021\003IRQ:");*/

    /* clear DSP interrupt */
    get_register(CP_INTERRUPT);

    if (line_ints_enabled)
        dspdrv_CommRamHandler();

    interrupt_handler_threaded=0;

    return (podule_rx_int() | podule_tx_int()) ? 0 : (/*Printf("\021\007??\n"),*/ 1);
#else
    total_irq_count++;

    /* clear DSP interrupt */
    get_register(CP_INTERRUPT);

    if (line_ints_enabled)
        dspdrv_CommRamHandler();

    podule_rx_int();
    podule_tx_int();

    //callevery_handler(0, pw);

    interrupt_handler_threaded=0;

    return NULL;
#endif
}
#endif

/*
 * The following routines deal with I/O - they provide the required hooks for the I/O
 * via the buffer manager. Note that all the comments below are from the point of view
 * of the modem -> data is transmitted _to_ and received _from_ the computer. See
 * "SCC/SIO DTE Software Overview" for details.
 */

/*
 * dte_to_clear is called to clear the transmit buffer.
 */
void dte_to_clear(void)
{
    _kernel_swi_regs r;

    if (InputStream.buffer_privid == -1)
        return;

    r.r[0] = BM_PurgeBuffer;
    r.r[1] = InputStream.buffer_privid;
    CallBufMan(&r);
}

/*
 * dte_to_free is called to determine the amount of free space in the transmit buffer.
 */
uword dte_to_free(void)
{
    _kernel_swi_regs r;

    if (InputStream.buffer_privid == -1)
        return 0;

    r.r[0] = BM_FreeSpace;
    r.r[1] = InputStream.buffer_privid;
    CallBufMan(&r);

    return r.r[2];
}

/*
 * dte_to_num is called to determine the number of characters waiting to be transmitted
 * to the terminal, used by the modem code to do an orderly take-over of the DTE during
 * AT command processing.
 *
 * This is not really necessary under RISC OS, as effectively all characters are
 * transmitted immediately to the terminal.
 */
uword dte_to_num(void)
{
    return 0;
}

ubyte check_all_sent(void)
{
    return 1;
}

/*
 * dte_to_char is called to send a character to the DTE.  The character to transmit is
 * the argument to this procedure.  Before calling dte_to_char, dte_to_free should
 * be called to make sure that there is space in the transmit buffer.
 */
void dte_to_char(ubyte ch)
{
    _kernel_swi_regs r;

    r.r[0] = BM_InsertByte;
    r.r[1] = InputStream.buffer_privid;
    r.r[2] = ch;
    CallBufMan(&r);
}

/*
 * dte_to_break is called to send a break to the DTE.  The type and length of the break are
 * arguments to this procedure.
 */
void dte_to_break(ubyte break_type, ubyte break_length)
{
    /* Does this need to do anything? */
}

/*
 * riscos_from_clear is called to clear the receive buffer.
 */
void dte_from_clear(void)
{
    _kernel_swi_regs r;

    if (OutputStream.buffer_privid == -1)
        return;

    r.r[0] = BM_PurgeBuffer;
    r.r[1] = OutputStream.buffer_privid;
    CallBufMan(&r);
}

/*
 * dte_from_char is called to retrieve a character from the receive buffer.  The character
 * removed from the buffer is passed back to the calling routine.
 */
ubyte dte_from_char(void)
{
    _kernel_swi_regs r;

    r.r[0] = BM_RemoveByte;
    r.r[1] = OutputStream.buffer_privid;
    CallBufMan(&r);

    return r.r[2];
}

/*
 * dte_from_num is called to determine the number of characters in the receive buffer. The
 * number of characters is passed back to the calling routine
 */
uword dte_from_num(void)
{
    _kernel_swi_regs r;

    if (OutputStream.buffer_privid == -1)
        return 0;

    r.r[0] = BM_UsedSpace;
    r.r[1] = OutputStream.buffer_privid;
    CallBufMan(&r);

    return r.r[2];
}

static ubyte to_block[128];

/*
 * dte_to_block_free is called to request the number of characters the DTE transmit queue
 * can accept before the end of the buffer is reached.
 */
uword dte_to_block_free(void)
{
    _kernel_swi_regs r;

    if (InputStream.buffer_privid == -1)
        return 0;

    r.r[0] = BM_FreeSpace;
    r.r[1] = InputStream.buffer_privid;
    CallBufMan(&r);

    if (r.r[2] < sizeof to_block)
        return r.r[2];
    else
        return sizeof to_block;
}

/*
 * dte_to_block_pointer is called to get a pointer to the next available free space in
 * the DTE transmit queue
 */
ubyte *dte_to_block_pointer(void)
{
    return to_block;
}

/*
 * dte_to_block_update is called to indicate to the DTE code the number of characters
 * added to the transmit queue
 */
void dte_to_block_update(uword n)
{
    _kernel_swi_regs r;

    r.r[0] = BM_InsertBlock;
    r.r[1] = InputStream.buffer_privid;
    r.r[2] = (int) to_block;
    r.r[3] = n;
    CallBufMan(&r);
}

/*
 * dte_from_block_num is called to request the number of characters in the DTE
 * receive queue from the last character removed to the end of the queue.
 */
uword dte_from_block_num(void)
{
    _kernel_swi_regs r;

    if (OutputStream.buffer_privid == -1)
        return 0;

    r.r[0] = BM_NextFilledBlock;
    r.r[1] = OutputStream.buffer_privid;
    r.r[3] = 0;
    CallBufMan(&r);

    return r.r[3];
}

/*
 * dte_from_block_pointer is called to get a pointer to the next available
 * character in the DTE receive queue.
 */
ubyte *dte_from_block_pointer(void)
{
    _kernel_swi_regs r;

    r.r[0] = BM_NextFilledBlock;
    r.r[1] = OutputStream.buffer_privid;
    r.r[3] = 0;
    CallBufMan(&r);

    return (ubyte *) r.r[2];
}

/*
 * dte_from_block_update is called to indicate to the DTE code the number of
 * characters removed from the receive queue.
 */
void dte_from_block_update(uword n)
{
    _kernel_swi_regs r;

    r.r[0] = BM_NextFilledBlock;
    r.r[1] = OutputStream.buffer_privid;
    r.r[3] = n;
    CallBufMan(&r);
}
