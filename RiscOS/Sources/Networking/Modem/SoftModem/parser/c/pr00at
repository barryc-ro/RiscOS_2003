/****************************************************************************
/
/     Copyright 1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             pr00at.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains the main code of the ACU's
/                       stand alone AT command parser.
/
/     Product:          ACU core code
/
/     History:          None.
/
/        Created:       2/01/95
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "par_def.h"
#include "par_mem.h"

/* Local prototypes */
void parser_init(void);
void parser_reset(ubyte *);
void parser_tables(ubyte type,PARSE_CMD_TABLE_STRUCT *);
ubyte parser_execute(void);
PARSE_CMD_TABLE_STRUCT *parser_get_next_table_ptr(void);
void parser_filter_cmd_line(void);
ubyte parser_test_flags(void);
ubyte parser_search_tables(void);
ubyte parser_compare(ubyte *,ubyte *,ubyte);
ubyte parser_get_parameter(void);

/* External prototypes (routines in pr00lib.c) */
extern ubyte string_len(ubyte *);
extern ubyte toupper(ubyte);
extern void parse_strip_spaces(void);
extern void parse_make_upper_case(void);
extern ubyte parameter_a_to_d(ubyte);
extern ubyte param_compound_numeric(ubyte);
extern ubyte parameter_a_to_h(ubyte);
extern ubyte param_compound_hex(ubyte);
extern ubyte param_compound_dtmf(void);


/*******************************************************************************
/
/     Routine:       parser_init
/
/     Author:        RSA
/
/     Creation Date: 02/01/95
/
/     Description:   This Routine serves as an interface to the ACU's
/                    AT command parser, it will initialize parameters and
/                    flags used by the AT parser.  This routine may be called
/                    at any time, but must be called at least once at power up.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void parser_init(void)
{
   ubyte i;

   /* Clear out entire Parameter Buffer */
   for (i = 0; i < PARM_BUFF_SIZE; i++)
      parse_p_buffer.bdata[i] = 0;

   /* Initialize the available command tables to none. */
   parser_tables(DISABLE_PARSING,NULL);
   parse_tbls_susp_cnt = 0;

   /* Reset dynamic vars.  Assign the command ptr to the parameter buffer
      so no ptrs dangle. */
   parser_reset((ubyte *)&parse_p_buffer);
}

/*******************************************************************************
/
/     Routine:       parser_reset
/
/     Author:        RSA
/
/     Creation Date: 02/01/95
/
/     Description:   This routine is called by the ACU to configure the AT
/                    Parser to begin parsing of a command line.
/                    The command line should begin with the first character
/                    following the 'AT' of the AT command.   This routine must
/                    be called every time a new command line will be parsed.
/
/     Input Parameters:   ptr - Pointer to begining of command string (or buffer).
/
/     Output Parameters:  None
/
/     Global Variables Changed: None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void parser_reset(ubyte *ptr)
{
   /* Save command line pointer */
   parse_cmd_ptr = ptr;

   /* Reset command parse vars */
   parse_p_buffer.ldata[0] = 0;         /* Reset Parameter Buffer       */
   parse_state = PARSE_STATE__FILTER;     /* Reset AT parser state        */
   parse_current_table = 0;               /* Reset current command table  */

   /* Get first AT Command Table to parse against */
   parse_table_ptr = parser_get_next_table_ptr();
}


/*******************************************************************************
/
/     Routine:       parser_tables
/
/     Author:        RSA
/
/     Creation Date: 02/01/95
/
/     Description:   This routine is called by the ACU to activate and
/                    deactivate the available parse tables.
/                    This routine can be called at any time to add
/                    or subtract parse tables (i.e.: don't allow fax commands
/                    in data mode). This routine must be at least once enabling
/                    one available parse mode as all modes are initially disabled.
/
/     Input Parameters:
/           type = Type of set modem command:
/               0  - DISABLE_PARSING - Clear currently available modes.
/               1  - SUSPEND_PARSING - Disable until resume is called.
/               2  - RESUME_PARSING  - Resume from a suspend
/               3  - ENABLE_TABLE    - Enable the parse table in the following
/                                       parameter.
/               4  - DISABLE_TABLE   - Disable the parse table in the following
/                                       parameter.
/
/           table_addr = Address of PARSE_CMD_TABLE_STRUCT to be added or
/                       subtracted from the avaiable tables to parse.
/
/     Output Parameters:  None
/
/     Global Variables Changed: None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void parser_tables(ubyte type,PARSE_CMD_TABLE_STRUCT *table)
{
   ubyte i,j;

   switch (type)
   {
      case DISABLE_PARSING:
         parse_tbls_count = 0;
         break;

      case SUSPEND_PARSING:
         parse_tbls_susp_cnt = parse_tbls_count;
         parse_tbls_count = 0;
         for (i=0; i<MAX_PARSE_TABLES; i++)
            parse_tbls_suspended[i] = parse_tbls_array[i];
         break;

      case RESUME_PARSING:
         if (parse_tbls_susp_cnt)
         {
            parse_tbls_count = parse_tbls_susp_cnt;
            for (i=0; i<MAX_PARSE_TABLES; i++)
               parse_tbls_array[i] = parse_tbls_suspended[i];
         }
         break;

      case ENABLE_TABLE:
         if (!table)
            break; /* Must have a table to enter */

         /* Verify the new table is not already present */
         for (i = 0; i<parse_tbls_count; i++)
            if (parse_tbls_array[i] == table)
               return; /* Already available, exit */

         /* Add another table */
         parse_tbls_count++;

         /* Move existing tables to the back of the list */
         for (i=parse_tbls_count; i>0; i--)
            parse_tbls_array[i] = parse_tbls_array[i-1];

         /* Add new table to top of list */
         parse_tbls_array[0] = table;

         /* New EndOfTable */
         parse_tbls_array[parse_tbls_count] = 0;
         break;

      case DISABLE_TABLE:
         if (!table)
            break; /* Must have a table to delete */

         /* Check each available table */
         for (i = 0; i < parse_tbls_count; i++)
         {
            /* If a match */
            if (parse_tbls_array[i] == table)
            {
               /* Move other entries up */
               for (j = i; j < parse_tbls_count; j++)
                  parse_tbls_array[j] = parse_tbls_array[j+1];

               /* One less table, and clear last table entry */
               parse_tbls_array[--parse_tbls_count] = 0;
               return; /* Table has been removed */
            }
         }
         break;

      default:
         break;
   } /* swtich */
}


/*******************************************************************************
/
/     Routine:       parser_get_next_table_ptr
/
/     Author:        RSA
/
/     Creation Date: 02/01/95
/
/     Description:   This routine returns a pointer to a parse command table
/                    defined else where in ROM.  Typically there is one command
/                    table for each modem mode (i.e. fax, voice, data...).
/                    This routine keeps track of what tables have alreay been
/                    parsed for each command line.
/
/     Input Parameters:   None
/
/     Output Parameters:  ptr = 0 - no table avaiable to parse,
/                               otherwiese a PARSE_CMD_TABLE_STRUCT in ROM
/
/     Global Variables Changed: None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
PARSE_CMD_TABLE_STRUCT *parser_get_next_table_ptr(void)
{
   PARSE_CMD_TABLE_STRUCT *ptr;

   ptr = parse_tbls_array[parse_current_table];

   /* If a Command Table was available, advance the current table ptr */
   if (ptr)
      parse_current_table++;

   return (ptr);
}

/*******************************************************************************
/
/     Routine:       parser_execute
/
/     Author:        RSA
/
/     Creation Date: 02/01/95
/
/     Description:   This routine is called by the ACU to parse one 'AT'
/                    command from the preset command line, and execute a
/                    routine to act on the command if a valid command
/                    is found.
/
/     Input Parameters:   None
/
/     Output Parameters:  return code - 0 = A single VALID command was parsed.
/                                       1 = An ERROR occured during parsing.
/                                       2 = Command parsing is COMPLETED.
/
/     Global Variables Changed: None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte parser_execute(void)
{
   ubyte result_code = NULL;

   switch (parse_state)
   {
      case PARSE_STATE__IDLE:
         break;

      case PARSE_STATE__FILTER:
         /* Filter the command line before looking for commands */
         parser_filter_cmd_line();
         parse_state = PARSE_STATE___EXECUTE;

         /* Intentionally fall through */

      case PARSE_STATE___EXECUTE:
         result_code = parser_search_tables();
         break;
   }

   return (result_code);
}


/*******************************************************************************
/
/     Routine:       parser_filter_cmd_line
/
/     Author:        RSA
/
/     Creation Date: 02/01/95
/
/     Description:   This routine fitlers the command line passed in from the
/                    ACU.  It's purpose is to force the command line to a
/                    standard format (ie: all capitals, no spaces,...).
/                    This routine is usually only called once, at the start
/                    of command line parsing.
/
/     Input Parameters:   None
/
/     Output Parameters:  None.
/
/     Global Variables Changed: None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void parser_filter_cmd_line(void)
{
   parse_strip_spaces();
   parse_make_upper_case();
}


/*******************************************************************************
/
/     Routine:       parser_test_flags
/
/     Author:        RSA
/
/     Creation Date: 02/01/95
/
/     Description:   This routine tests commands for any special conditions
/                    predetermined by the FLAG parameter in the AT command
/                    table.
/
/     Input Parameters:   None
/
/     Output Parameters:  test - 0 (PARSER_VALID) = test passed
/                              1 (PARSER_ERROR) = test failed
/
/     Global Variables Changed: None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte parser_test_flags(void)
{
   ubyte result;
   ubyte flags;

   result = PARSER_VALID;
   flags = parse_table_ptr->flags;

   /* Test all flags set in the table */
   while (flags)
   {
      /* Test if the last command should terminate the command line unless
         a semicolon exists between the commands */
      if (flags & SEMICOL_END)
      {
         /* Clear this test */
         flags &= ~SEMICOL_END;

         /* Skip the ';' if present */
         if (*parse_cmd_ptr == ';')
            parse_cmd_ptr++;
         /* Else we must be at the end of the command line */
         else if (*parse_cmd_ptr != '\0')
            result = PARSER_ERROR;
      }
   }
   return (result);
}

/*******************************************************************************
/
/     Routine:       parser_search_tables
/
/     Author:        RSA
/
/     Creation Date: 02/01/95
/
/     Description:   This routine performs the actual parsing.  Testing all
/                    entries in all command tables against the command line
/                    and executing the action routine based on the AT command.
/
/     Input Parameters:   None
/
/     Output Parameters:  test - 0 (PARSER_VALID) = successful parse
/                              1 (PARSER_ERROR) = unsuccessful parse
/                              2 (PARSER_FINISHED) = no more commands to parse
/
/     Global Variables Changed: None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte parser_search_tables(void)
{
   ubyte command_line_len,table_entry_len,return_code;

   /* Determine the length of what's left in the command buffer */
   command_line_len = string_len(parse_cmd_ptr);

   /* If the command buffer is empty, were done parsing */
   if (!command_line_len)
      return (PARSER_FINISHED);

   /* Loop until the command buffer matches a command table entry */
   while (TRUE)
   {
      /* While there's a look-up table and it contains possible commands */
      while (parse_table_ptr && *(parse_table_ptr->AT_string))
      {
         /* Get length of command in table */
         table_entry_len = string_len(parse_table_ptr->AT_string);

         /* Only compare table commands that fit in existing command line */
         if (table_entry_len <= command_line_len)
         {
            /* Compare the table entry to the command string */
            if (parser_compare(parse_cmd_ptr, parse_table_ptr->AT_string,
               table_entry_len))
            {
               /* Advance command pointer past the current command */
               parse_cmd_ptr += table_entry_len;

               /* Get the command's parameter */
               switch (parser_get_parameter())
               {
                  case PARM_OK: /* Valid Parameter case */
                     /* Execute the function found in the table, pass
                        the parameter buffer to the routine */
                     /* Void function? */
                     if (parse_table_ptr->type == NO_PARAM)
                        (*parse_table_ptr->u.function_ptr)();
                     else
                        (*parse_table_ptr->u.function_p_ptr)(&parse_p_buffer);

                     /* Exit this routine after a successful parse */
                     /* Test special command flags */
                     if (parser_test_flags())
                        return_code = PARSER_ERROR;
                     else
                        return_code = PARSER_VALID;
                     break;

                  case PARM_ERROR: /* Error in Parameter case */
                     /* Exit this routine after a unsuccessful parse */
                     return_code = PARSER_ERROR;
                     break;

                  case PARM_IGNORE: /* Ignore Command case */
                  default:
                     /* Exit this routine after a successful parse */
                     return_code = PARSER_VALID;
                     break;
               }

               /* Reset to the first command table for the next in-line
                  command, unless the command may be found again */
               if (!(parse_table_ptr->flags & DUPLICATE_CMD))
               {
                  parse_current_table = 0;
                  parse_table_ptr = 0;
               }
               return (return_code);
            }
         }
         parse_table_ptr++;  /* Get next command in the table */
      } /* while */

      /* If the table's non-existant or empty get a new one */
      if (!parse_table_ptr || !(*(parse_table_ptr->AT_string)))
      {
         parse_table_ptr = parser_get_next_table_ptr();

         /* If we've parsed all available commands, what's left
            in the command buffer must be in error */
         if (!parse_table_ptr)
         {
            return (PARSER_ERROR);
         }
      }
   }  /* Loop forever */
}


/*******************************************************************************
/
/     Routine:       parser_compare
/
/     Author:        RSA
/
/     Creation Date: 02/01/95
/
/     Description:   This routine performs the actual parsing - simple string
/                    compare of the command line to the string contained in the
/                    AT Command Table.
/
/     Input Parameters:   None
/
/     Output Parameters:  match_found - 1 (TRUE)  = successful parse
/                                     0 (FALSE) = unsuccessful parse
/
/     Global Variables Changed: None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte parser_compare(ubyte *str1, ubyte *str2, ubyte len)
{
   ubyte match_found = TRUE;
   ubyte i;

   /* Compare both strings for the max length */
   for (i=0; i < len; i++)
   {
      /* If either string runs out, the test fails */
      if ((*str1 == 0) || (*str2 == 0))
      {
         match_found = FALSE;
         break;  /* Break from for loop */
      }

      /* If the strings are unequal, the test fails */
      if (toupper(*str1++) != toupper(*str2++))
      {
         match_found = FALSE;
         break;  /* Break from for loop */
      }
   }
   return (match_found);
}


/*******************************************************************************
/
/     Routine:       parser_get_parameter
/
/     Author:        RSA
/
/     Creation Date: 02/01/95
/
/     Description:   This routine extracts the AT command's parameter (if
/                    available) from the command line, formats the parameter,
/                    and places the formatted parameter into the parsers
/                    Parse Parameter Buffer.
/
/                   The currently execpted parameters (contained in the AT
/                       command Table are:
/                   0  - (NO_PARAM)         eg: ATA
/                   1  - (BYTE_NUMERIC)     eg: ATH1
/                   2  - (WORD_NUMERIC)     eg: AT%B4800
/                   3  - (LONG_NUMERIC)     (for future use)
/                   4  - (COMPOUND_BYTE)    eg: AT+FIS=1,2,3,4,5,6
/                   5  - (COMPOUND_WORD)    eg: AT+VBT=300,20
/                   6  - (COMPOUND_LONG)    for future use
/                   7  - (BYTE_HEX)         eg: AT+VTD=FF
/                   8  - (WORD_HEX)         eg: AT+VTD=FFFF
/                   9  - (LONG_HEX)         eg: AT+VEM=FFFFFFF
/                   10 - (COMPOUND_BYTE_HEX) eg: AT+VTD=FF,3F
/                   11 - (COMPOUND_WORD_HEX) eg: AT+VTD=FFFF,33FF
/                   12 - (COMPOUND_LONG_HEX) eg: AT+VEM=FFFFFFF,11112222
/                   13 - (DIAL_STRING)      eg: ATD9,1-919-846-345J
/                   14 - (FORMATTED_STRING) eg: AT+FPI="LOCAL
/                   15 - (REAL_NUM_STRNG)   eg: AT+FCLASS=2.0
/                   16 - (CONST_STRING)     any string input
/                   17 - (STORED_TELE_NUM)  eg: AT&Z=(919)-846-2343jk
/
/
/     Input Parameters:   None
/
/     Output Parameters:  match_found - 1 (TRUE)  = successful parse
/                                     0 (FALSE) = unsuccessful parse
/
/     Global Variables Changed: None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte parser_get_parameter(void)
{
   ubyte *buff_ptr,done,error;

   done = FALSE;
   error = FALSE;

   /* Reset the Command Parameter Buffer for every command */
   parse_p_cnt=0;              /* Nothing in the Parameter Buffer */
   parse_p_buffer.ldata[0]=0;  /* (again) */
   buff_ptr =(ubyte *)&parse_p_buffer; /* local ptr for ubyte action */

   /* The AT command Table contains the commands parameter type */
   switch (parse_table_ptr->type)
   {
      default:
      case NO_PARAM:
         break;

      case BYTE_NUMERIC:
      case WORD_NUMERIC:
      case LONG_NUMERIC:
         error = parameter_a_to_d(parse_table_ptr->type);
         break;

      case COMPOUND_BYTE:
         error = param_compound_numeric(BYTE_NUMERIC);
         break;

      case COMPOUND_WORD:
         error = param_compound_numeric(WORD_NUMERIC);
         break;

      case COMPOUND_LONG:
         error = param_compound_numeric(LONG_NUMERIC);
         break;

      case BYTE_HEX:
      case WORD_HEX:
      case LONG_HEX:
         error = parameter_a_to_h(parse_table_ptr->type);
         break;

      case COMPOUND_BYTE_HEX:
         error = param_compound_hex(BYTE_HEX);
         break;

      case COMPOUND_WORD_HEX:
         error = param_compound_hex(WORD_HEX);
         break;

      case COMPOUND_LONG_HEX:
         error = param_compound_hex(LONG_HEX);
         break;

      case DIAL_STRING:
         /* Dial String ends on, but includes a ';' (return to idle) */
         while (*parse_cmd_ptr != NULL)
         {
            /* Copy vaild chars from Cmd Line Buffer to the Param Buffer */
            *buff_ptr++ = *parse_cmd_ptr++;

            /* Dial commands take the entire command string unless a
               ';' is present */
            if (*(parse_cmd_ptr-1) == ';')
               break;
         }
         /* Force EndOfString */
         *buff_ptr = 0;
         break;

      case FORMATTED_STRING:
         error = TRUE;       /* Default parameter in ERROR */
         /* Test for first \" */
         if (*parse_cmd_ptr == '"')
         {
            do {
               /* Copy data from Cmd Line Buffer to the Parameter Buffer */
               *buff_ptr++ = *parse_cmd_ptr++;

               /* Test for last \" */
               if (*parse_cmd_ptr == '"')
               {
                  error = FALSE;
                  *buff_ptr++ = *parse_cmd_ptr++;
                  break; /* Break from while loop */
               }

            /* Test for EndOfCommandLine */
            } while (*parse_cmd_ptr != 0);
         }
         /* Force EndOfString */
         *buff_ptr = '\0';
         break;

      case REAL_NUM_STRING:
         while (!done)
         {
            switch (*parse_cmd_ptr)
            {
               case '.':
               case '0':
               case '1':
               case '2':
               case '3':
               case '4':
               case '5':
               case '6':
               case '7':
               case '8':
               case '9':
                  *buff_ptr++ = *parse_cmd_ptr++;
                  *buff_ptr = 0;
                  break;

               default:
                  done = TRUE;
                  if (buff_ptr == (ubyte *)&parse_p_buffer)
                     error = TRUE;
                  break;
            }
         }
         break;

      case CONST_STRING:
         /* Copy vaild chars from Cmd Line Buffer to the Param Buffer */
         while (*parse_cmd_ptr != NULL)
            *buff_ptr++ = *parse_cmd_ptr++;
         *buff_ptr = 0;
         break;

      case STORED_TELE_NUM:
         while (!done)
         {
            switch (*parse_cmd_ptr)
            {
               case '(':
               case ')':
               case '-':
                  parse_cmd_ptr++;
                  break;

               case '!':
               case '#':
               case '*':
               case ',':
               case '0':
               case '1':
               case '2':
               case '3':
               case '4':
               case '5':
               case '6':
               case '7':
               case '8':
               case '9':
               case ';':
               case '=':
               case '@':
               case 'A':
               case 'B':
               case 'C':
               case 'D':
               case 'P':
               case 'R':
               case 'T':
               case 'W':
                  *buff_ptr++ = *parse_cmd_ptr++;
                  break;

               default:
                  error = TRUE;
                  /* Fall through */

               case 0:
                  *buff_ptr = 0;
                  done = TRUE;
                  break;
            }
         }
         *buff_ptr = 0;
         break;

      case COMPOUND_DTMF:
         error = param_compound_dtmf();
         break;

      case SIGNED_BYTE:
         /* If negative input */
         if (*parse_cmd_ptr == '-')
         {
            parse_cmd_ptr++;
            error = parameter_a_to_d(BYTE_NUMERIC);

            /* Input too big? */
            if (*buff_ptr & 0x80)
               error = TRUE;

            /* Make result negative */
            *buff_ptr *= -1;
         }
         /* Else positive */
         else
         {
            if (*parse_cmd_ptr == '+')
               parse_cmd_ptr++;

            error = parameter_a_to_d(BYTE_NUMERIC);

            /* Input too big? */
            if (*buff_ptr & 0x80)
               error = TRUE;
         }
         break;
   } /* switch */

   return (error);
}







