/******************************************************************************
/
/   Copyright, 1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 201
/        Raleigh, NC  27615
/        (919) 846-7171
/
/    This document contains material confidential to RSA. Its contents
/    must not be revealed, used or disclosed to anyone or company without
/    written permission by RSA. The information contained herein is solely
/    for the use of RSA.
/
/        File     : f2x00etx.c
/
/        Module Version: 4.04
/
/        Function : Transmit ECM Buffer Manager Driver
/
/        Product  : Class 2/2.0 ECM Submodule.
/
/        History  : 4.03
/
/        Created :
/
/        -----------------------------------------------------------
/        -                       Modifications                     -
/        -----------------------------------------------------------
/
/        Author & Date :
/        Description   :
/        Reason        :
/
******************************************************************************/
#include "sys_def.h"
#include "f2x_def.h"
#include "f2x_pro.h"
#include "f2x_mem.h"
#include "f2x_bmd.h"
#include "f2x_ecd.h"
#include "f2x_ecp.h"
#include "f2x_emm.h"

/*******************************************************************************
/
/	Routine: fax2_ECM_tx_size
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Used to query the size of the ECM transmit buffer (i.e,
/                    how many bytes can the transmit ECM buffer driver store
/                    for transmission).
/
/	Input Parameters: None
/
/	Output Parameters: return_value ->  ECM TX buffer size in bytes.
/
/	Global Variables Changed:
/
/	Users: An example use -- Class 2.0 <DLE><?> Check Buffer Credits
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
uword fax2_ECM_tx_size(void)
{
    /* return (fax2_ECM_max_frameID+1) * 256 if framesize is 256 */
    /* return (fax2_ECM_max_frameID+1) * 64 if framesize is 64 */
    return ((uword) fax2_ECM_maxframeID+1) <<
        ((fax2_ECM_fsize_less1 == FRAMESIZE64) ? 6 : 8);
}

/*******************************************************************************
/
/	Routine: fax2_ECM_tx_count
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Used to determine how many bytes are currently
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users: An example use -- Class 2.0 <DLE><?> Check Buffer Credits
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
/* returns how many bytes are currently stored in the ECM transmit buffer
truncated to a multiple of either 256 bytes or 64 bytes */
uword fax2_ECM_tx_count(void)
{
    /* return (fax2_ECM_fifotail.framenum) * 256 if framesize is 256 */
    /* return (fax2_ECM_fifotail.framenum) * 64 if framesize is 64 */
    return ((uword) fax2_ECM_fifotail.framenum) <<
        ((fax2_ECM_fsize_less1 == FRAMESIZE64) ? 6 : 8);
}

/*******************************************************************************
/
/	Routine: fax2_ECM_tx_configure
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Informs the Transmit ECM Buffer Manager Driver of
/                    necessary "configuration" parameters (specified in the
/                    argument list).
/
/	Input Parameters: f_size_less1  ->  bytes/ECM frame "less 1"
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_tx_configure(ubyte f_size_less1)
{
    /* For transmitting, it is understood that the buffer manager can
       store the full 256 frames with the configured frame size. Thus,
       the ECM transmit buffering scheme is very straightforward.
       There is a one-to-one correspondence between frame numbers and
       frame IDs (i.e., frame numbers equal frame IDs ) */

    /* For receiving, it is understood that the buffer manager may not
       be able to store the full 256 frames with the configured frame size.
       The ECM receive buffer scheme maintains a relationship between
       frame numbers and frame IDs.  Some frame numbers do not have a related
       frame ID */
    fax2_ECM_fsize_less1 = f_size_less1;

    /* store the maximum frame ID */
    /* Maintain a number of the free buffers available */
    fax2_ECM_maxframeID = fax2_ECM_bm_maxnum_frames_less1(fax2_ECM_fsize_less1);

    /* tell buffer manager how how many bytes per frame */
    fax2_ECM_bm_configure(fax2_ECM_fsize_less1);
}

/*******************************************************************************
/
/	Routine: fax2_ECM_tx_init
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Initializes the fax2_ECM_rx_pp_bg task to begin
/                    transmitting a partial page.
/
/	Input Parameters: tx_mode
/                           0   start to transmit a new partial page
/                           1   start to retransmit frames requested by
/                               receiver of current partial page
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_tx_init(ubyte tx_mode, ubyte trainmode)
{
    ubyte j;

    /* this is initialized to 0xFF because it will be "incremented to zero"
    upon the first frame transmission */
    fax2_ECM_numxmitdframesless1 = 0xFF;

    fax2_ECM_tx_mode = tx_mode;

    fax2_ECM_tx_trainmode = trainmode;

    /* The ECM buffer is not filled */
    fax2_ECM_ecmbuffersfilled = FALSE;

    fax2_ECM_tx_state = ECTX_INITIALIZE;

    fax2_ECM_linebufhead = 0;
    fax2_ECM_linebuftail = 0;
    fax2_ECM_linestat = EC_LINE_IDLE;

    /* Initialize all Line Buffer Statuses to free */
    for (j = 0;j <= (MAX_EC_LINE_BUFFERS-1);j++)
        fax2_ECM_linebufstat[j] = ECM_LINEBUFF_FREE;

    if (fax2_ECM_tx_mode == REXMIT_PP_MODE)
    {

        /* Note: ecm_PPR_FIF contains the 32 byte FIF of the PPR post message
        command */

        fax2_ECM_rexmitframe.framenum = 0;
        /* if retransmitting a partial page, no further initialization
           is necessary */
        return;
    }

    fax2_ECM_fifohead.framenum = 0;
    fax2_ECM_fifohead.index = 0;

    fax2_ECM_fifotail.framenum = 0;
    fax2_ECM_fifotail.index = 0;

    fax2_ECM_flush_pp_to_line = FALSE;
}

/*******************************************************************************
/
/	Routine: fax2_ECM_tx
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Called by the line I/O when transmitting ECM SDLC frames;
/                    indicates transmission of SDLC frame and expects a pointer
/                    to the next SDLC buffer to be transmitted
/                    (a NULL pointer indicates that there is no next
/                    SDLC frame to be transmitted).
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte *fax2_ECM_tx(void)
{
    /* indicate that the current buffer has been transmitted */
    fax2_ECM_linebufstat[fax2_ECM_linebufhead] = ECM_LINEBUFF_FREE;

    /* update head pointer for next line buffer transmission */
    if (++fax2_ECM_linebufhead > (MAX_EC_LINE_BUFFERS - 1))
        fax2_ECM_linebufhead = 0;

    if (fax2_ECM_linebufstat[fax2_ECM_linebufhead] != ECM_LINEBUFF_PENDINGXMISSION)
    {
        /* there are no other line buffers ready to be transmitted */
        fax2_ECM_linestat = EC_LINE_IDLE;
        return(NULL);
    }

    /* Give address of current line buffer to be transmitted */
    return ( (ubyte *) &fax2_ECM_line_buffer[fax2_ECM_linebufhead]);
}

/*******************************************************************************
/
/	Routine: fax2_ECM_tx_sent_RCP_frame
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Attempts to queue an RCP frame for the line IO to transmit.
/
/	Input Parameters: None
/
/	Output Parameters: return_code
/                           TRUE    ->  RCP frame successfully queued
/                           FALSE   ->  RCP frame not queued (no room in line
/                                       transmit buffers).
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte fax2_ECM_tx_sent_RCP_frame(void)
{
    ecmhdlc_line_buffer_type *ecmbuffptr;

    if (fax2_ECM_linebufstat[fax2_ECM_linebuftail] == ECM_LINEBUFF_PENDINGXMISSION)
        /* current line buffer is still not free'd up; so ... */
        return(FALSE);

    /* prepare RCP frame for transmission  */
    ecmbuffptr = &(fax2_ECM_line_buffer[fax2_ECM_linebuftail]);

    ecmbuffptr->count = (uword) NUM_EC_RCP_HDR_FIELDS;

    ecmbuffptr->data[ECMT4_AF] = ECM_ADDRESS_VALUE;
    ecmbuffptr->data[ECMT4_CF] = ECM_CTL_RCP_VALUE;
    ecmbuffptr->data[ECMT4_FCF] = ECM_FCF_RCP_VALUE;

    /* Indicate that this newly built line buffer is
        pending transmission */
    fax2_ECM_linebufstat[fax2_ECM_linebuftail] = ECM_LINEBUFF_PENDINGXMISSION;

    if (fax2_ECM_linebuftail == MAX_EC_LINE_BUFFERS - 1)
        fax2_ECM_linebuftail = 0;
    else
        ++fax2_ECM_linebuftail;

    /* Start transmission of frame if xmitter is idle;
       Otherwise, transmitter is already active and FAX LINE I/O
       will pick it up*/
    if (fax2_ECM_linestat == EC_LINE_IDLE)
    {
        fax_line_tx_block( (ubyte *) ecmbuffptr );
        fax2_ECM_linestat = EC_LINE_XMITING;
    }

    return(TRUE);
}

/*******************************************************************************
/
/	Routine: fax2_ECM_tx_fcd_frame
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Attempts to queue the specified frame number for
/                    transmission by the LINE IO code.
/
/	Input Parameters: framenumber      -> ECM frame to be queued for
/                                             transmission by the LINE I/O
/                         framelengthless1 -> length of frame (in bytes)
/                                             minus 1 to be xmitted
/
/
/	Output Parameters: return_code
/                           TRUE    ->  frame sucessfully queue for LINE IO
/                                       transmission
/                           FALSE   ->  frame not queued (no room in LINE IO
/                                       buffers to queue frame).
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte fax2_ECM_tx_fcd_frame(ubyte framenumber, ubyte framelengthless1)
{
    ecmhdlc_line_buffer_type *ecmbuffptr;

     /* if current "tail" line buffer in tx line buffer array is
        still pending transmission, just wait */
    if (fax2_ECM_linebufstat[fax2_ECM_linebuftail] == ECM_LINEBUFF_PENDINGXMISSION)
        return(FALSE);

    /* prepare frame for transmission  */
    ecmbuffptr = &(fax2_ECM_line_buffer[fax2_ECM_linebuftail]);

    ecmbuffptr->count = ((uword) framelengthless1) + 1 +
                        NUM_EC_FCD_HDR_FIELDS;

    ecmbuffptr->data[ECMT4_AF] = ECM_ADDRESS_VALUE;
    ecmbuffptr->data[ECMT4_CF] = ECM_CTL_FCD_VALUE;
    ecmbuffptr->data[ECMT4_FCF] = ECM_FCF_FCD_VALUE;
    ecmbuffptr->data[ECMT4_FIF1] = framenumber;

    /* copy data from ECM buffer to be transmitted to the line */
    fax2_ECM_bm_from_buff(&(ecmbuffptr->data[ECMT4_FIF2]),
                      framenumber,
                      framelengthless1);

    /* Indicate that this newly built line buffer is
        pending transmission */
    fax2_ECM_linebufstat[fax2_ECM_linebuftail] = ECM_LINEBUFF_PENDINGXMISSION;

    if (fax2_ECM_linebuftail == MAX_EC_LINE_BUFFERS - 1)
        fax2_ECM_linebuftail = 0;
    else
        ++fax2_ECM_linebuftail;

    /* Start transmission of frame if xmitter is idle;
       Otherwise, transmitter is already active and FAX LINE I/O
       will pick it up*/
    if (fax2_ECM_linestat == EC_LINE_IDLE)
    {
        fax_line_tx_block( (ubyte *) ecmbuffptr );
        fax2_ECM_linestat = EC_LINE_XMITING;
    }
    return(TRUE);
}

/*******************************************************************************
/
/	Routine: fax2_ECM_tx_configured_tx_pp
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Used to determine if the fax2_ECM_tx_pp_bg has already
/                    configured the datapump to transmit Phase C carrier
/
/	Input Parameters: None
/
/	Output Parameters: return_value
/                           TRUE    ->  datapump has been configured to
/                                       xmit Phase C high speed carrier
/                           FALSE   ->  otherwise
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte fax2_ECM_tx_configured_tx_pp(void)
{
    return fax2_ECM_tx_state > ECTX_WAIT_FOR_DP_CTS;
}

/*******************************************************************************
/
/	Routine: fax2_ECM_tx_flush_pp_to_line
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Used to command the fax2_ECM_tx_pp_bg task to flush
/                    the current partial page to the line.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_tx_flush_pp_to_line(void)
{
    fax2_ECM_flush_pp_to_line = TRUE;
}

/*******************************************************************************
/
/	Routine: fax2_ECM_tx_pp_transmitted
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Used to determine if the current ECM partial page
/                    has been transmitted.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte fax2_ECM_tx_pp_transmitted(void)
{
    return(fax2_ECM_tx_state == ECTX_PP_XMITED);
}

/*******************************************************************************
/
/	Routine: fax2_ECM_frame_to_be_rexmitted
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Determines if the specified frame has been requested for
/                    retransmission by a PPR post message response.
/
/	Input Parameters: fn    ->  framenumber
/
/	Output Parameters: return_value
/                           TRUE    ->  specified frame has been requested
/                                       for retransmission
/                           FALSE   ->  otherwise
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
/* this function actually implemented by a macro! */

/* upper 5 bits indexes into fax2_ECM_PPR_FIF array to get a byte */
/* lower 3 bits determine which bit of indexed byte should be returned */
/* fn = frame number */
#define fax2_ECM_frame_to_be_rexmitted(fn) (\
        ( fax2_ECM_PPR_FIF[(fn)>>3] >> ((fn)&0x07) ) & 0x01\
        )

/*******************************************************************************
/
/	Routine: fax2_ECM_gotframetorxmit
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Searches 32-byte FIF of received PPR to see if there is
/                    a next frame to be retransmitted.
/
/	Input Parameters: *framenum  -> framenumber where search is to start;
/                                       AND changed by function to reflect next
/                                       found framenumber to be retransmitted
/                                       if return value is TRUE
/                         *framelength->framelength of framenumber to be
/                                       retransmitted if return value is TRUE
/
/	Output Parameters: return_value
/                           TRUE    ->  next framenumber to be retransmitted
/                                       has been found; *framenum and
/                                       *framelength have been updated
/                                       appropriately.
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte fax2_ECM_gotframetorxmit(ubyte *framenum, ubyte *framelength)
{
    ubyte return_code;

    return_code = NOTSET;
    while (return_code == NOTSET)
    {
        if (fax2_ECM_frame_to_be_rexmitted(*framenum))
        {
            return_code = TRUE;

            *framelength = (*framenum == fax2_ECM_lastframe.framenum) ?
                 fax2_ECM_lastframe.framelengthless1 : fax2_ECM_fsize_less1;
        }
        else
        {
            if (*framenum == fax2_ECM_lastframe.framenum)
            /* we have just checked that the last frame of the ECM partial
            page was not requested to be retransmitted; so, return FALSE */
                return_code = FALSE;
            else
                ++(*framenum);
        }
    }
    return (return_code);
}

/*******************************************************************************
/
/	Routine: fax2_ECM_tx_pp_bg
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Task which transmits ECM partial pages to the line IO
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_tx_pp_bg(void)
{
    /* For transmitting, it is understood that the ECM buffer manager is
       capable of completely storing 256 ECM frames. */
    switch(fax2_ECM_tx_state)
    {
        case ECTX_INITIALIZE:
            /* allow the remote time to configure */
            fax2_ECM_tx_state = ECTX_WAIT_TO_CFG;
            fax2_utility_timer = DELAY_TO_CFG_TX;
            break;
        case ECTX_WAIT_TO_CFG:
            /* wait until delay is complete */
            if (fax2_utility_timer)
                break;

            fax2_line_configured = TRUE;
            modem_fax_configure(fax2_determine_mod_page(fax2_ECM_tx_trainmode), TX_MODE);
            fax_line_init(HDLC_MODE, TX_MODE, (uword) fax2_ECM_fsize_less1 +
                          NUM_EC_FCD_HDR_FIELDS + CRC_BYTES + 1);

            fax2_ECM_tx_state = ECTX_WAIT_FOR_DP_CTS;
            break;
        case ECTX_WAIT_FOR_DP_CTS:
            if (modem_dp_CTS_status())
            {
                fax2_ECM_tx_state = ECTX_SYNCHRONIZATION;
                fax2_utility_timer = ECM_SYNCHRONIZATION_DELAY;
            }
            break;
        case ECTX_SYNCHRONIZATION:
            /* Transmit T.4 synchronization sequence per new transmission */
            if (!fax2_utility_timer)
                fax2_ECM_tx_state = fax2_ECM_tx_mode ? ECTX_GET_FRAME_TO_REXMIT :
                                   ECTX_XMITING_ECM_FRAME;
            break;
        case ECTX_XMITING_ECM_FRAME:
            if (fax2_ECM_ecmbuffersfilled ||
                fax2_ECM_fifohead.framenum != fax2_ECM_fifotail.framenum)
            {
            /* If fax2_ECM_fifohead.framenum != fax2_ECM_fifotail.framenum
            or pp is completely filled (fax2_ECM_ecmbuffersfilled ==
            TRUE and fax2_ECM_fifohead.framenum == fax2_ECM_fifotail.framenum),
            there is a complete ECM frame to transmit. So, try to transmit
            an ECM frame */
                if (fax2_ECM_tx_fcd_frame(fax2_ECM_fifohead.framenum,
                                     fax2_ECM_fsize_less1))
                {
                    fax2_ECM_numxmitdframesless1 =
                        (fax2_ECM_numxmitdframesless1 == 0xFF) ?
                        0 : fax2_ECM_numxmitdframesless1 + 1;

                    if (fax2_ECM_fifohead.framenum != fax2_ECM_maxframeID)
                        ++fax2_ECM_fifohead.framenum;
                    else
                    {
                        /* The last 256th frame has just been transmitted to the
                        line; ready to send the 3 RCP frames */
                        fax2_ECM_tx_state = ECTX_TX_1ST_RCP_FRAME;
                        /* save last frame information for possible
                        re-transmission; we observe that all 256 frames in
                        ECM block are full !*/
                        fax2_ECM_lastframe.framenum = fax2_ECM_maxframeID;
                        fax2_ECM_lastframe.framelengthless1 = fax2_ECM_fsize_less1;
                    }
                }
            }
            else if (fax2_ECM_flush_pp_to_line)
            {
                /* There are no remaining complete frames to be transmitted and
                a flush line command has been issued.  This implies
                fax2_ECM_fifotail.framenum == fax2_ECM_fifohead.framenum.
                Check to see if there is a need to transmit a partial frame
                (i.e., fax2_ECM_fifohead.index != 0 implies a pending
                 partially filled ECM frame )*/
                if (fax2_ECM_fifotail.index)
                {
                    if (fax2_ECM_tx_fcd_frame(fax2_ECM_fifotail.framenum,
                                         fax2_ECM_fifotail.index - 1))
                    {
                        fax2_ECM_numxmitdframesless1 =
                            (fax2_ECM_numxmitdframesless1 == 0xFF) ?
                            0 : fax2_ECM_numxmitdframesless1 + 1;

                        fax2_ECM_tx_state = ECTX_TX_1ST_RCP_FRAME;
                        /* save last frame information for possible
                        re-transmission; we note not all 256 frames of ECM
                        block are filled */
                        fax2_ECM_lastframe.framenum = fax2_ECM_fifotail.framenum;
                        fax2_ECM_lastframe.framelengthless1 =
                            fax2_ECM_fifotail.index - 1;
                    }
                }
                else
                {
                    /* flush line command received and there is a pending
                    partial frame of length 0 */
                    fax2_ECM_tx_state = ECTX_TX_1ST_RCP_FRAME;
                    /* save last frame information for possible
                    re-transmission; we note not all 256 frames of ECM block
                    are filled */
                    fax2_ECM_lastframe.framenum = fax2_ECM_fifotail.framenum - 1;
                    fax2_ECM_lastframe.framelengthless1 = fax2_ECM_fsize_less1;
                }
            }
            break;
        case ECTX_TX_1ST_RCP_FRAME:
        case ECTX_TX_2ND_RCP_FRAME:
        case ECTX_TX_3RD_RCP_FRAME:
            if (fax2_ECM_tx_sent_RCP_frame())
                fax2_ECM_tx_state++;
            break;
        case ECTX_WAITLINEBUFFSXMIT:
            if (fax2_ECM_linebuftail == fax2_ECM_linebufhead &&
                fax2_ECM_linebufstat[fax2_ECM_linebuftail] == ECM_LINEBUFF_FREE)
            {
                fax2_ECM_tx_state = ECTX_WAIT_TO_TERMINATE;
                fax2_utility_timer = ECTXDELAY_DATA_PROPAGATE;
            }
            break;
        case ECTX_WAIT_TO_TERMINATE:
            if (!fax2_utility_timer)
            {
                fax2_cleanup_page();
                fax2_ECM_tx_state = ECTX_PP_XMITED;
            }
            break;
        case ECTX_PP_XMITED: /* pp has been transmitted */
            break;
        case ECTX_GET_FRAME_TO_REXMIT:
            /* Sequentially go through the "list" specified in the FIF
            of the PPR post message response of frames to retransmit */
            if (!fax2_ECM_gotframetorxmit(&fax2_ECM_rexmitframe.framenum,
                                         &fax2_ECM_rexmitframe.framelengthless1))
            {
                /* There are no more frames to be retransmitted; end ECM HDLC
                message transmission */
                fax2_ECM_tx_state = ECTX_FINISH_REXMIT_PP;
                break;
            }
            /* break intentionally omitted */
        case ECTX_REXMIT_PP: /* retransmit requested frames of a partial page */
            if (fax2_ECM_tx_fcd_frame(fax2_ECM_rexmitframe.framenum,
                                     fax2_ECM_rexmitframe.framelengthless1))
            {
                fax2_ECM_numxmitdframesless1 =
                    (fax2_ECM_numxmitdframesless1 == 0xFF) ?
                    0 : fax2_ECM_numxmitdframesless1 + 1;

                if (fax2_ECM_rexmitframe.framenum == fax2_ECM_lastframe.framenum)
                /* we have just re-transmitted a requested frame that was
                the last frame of the ECM partial page; end ECM HDLC message */
                {
                    fax2_ECM_tx_state = ECTX_FINISH_REXMIT_PP;
                }
                else
                {
                    /* get ready to check if there are more requested frames
                    to be retransmitted */
                    ++fax2_ECM_rexmitframe.framenum;
                    fax2_ECM_tx_state = ECTX_GET_FRAME_TO_REXMIT;
                }
            }
            break;
        case ECTX_FINISH_REXMIT_PP:
            fax2_ECM_tx_state = ECTX_TX_1ST_RCP_FRAME;
            break;
    }
}

/*******************************************************************************
/
/	Routine: fax2_ECM_tx_pp_complete
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Determines if current partial page has been "filled up"
/                    (i.e., whether or not the transmit ECM buffer manager
/                    can accept another character via fax2_ECM_tx_to_char).
/
/	Input Parameters: None
/
/	Output Parameters: return_value
/                           TRUE    ->  the current partial page (ECM buffer)
/                                       has accepted a complete partial page
/                           FALSE   ->  otherwise
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte fax2_ECM_tx_pp_complete(void)
{
    return(fax2_ECM_ecmbuffersfilled);
}

/*******************************************************************************
/
/	Routine: fax2_ECM_increment_pointer
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Attempts to advance the specified ECM buffer pointer
/                    to the "next character" if not already pointing to
/                    the last character.
/
/	Input Parameters: *fifoptr  ->  ECM buffer pointer to be advanced
/
/	Output Parameters: return_value
/                           TRUE    ->  ECM buffer pointer was advanced
/                           FALSE   ->  ECM buffer pointer was not advanced
/                                       (pointer was already pointing to last
/                                       character)
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte fax2_ECM_increment_pointer(ECMfifoindex_type *fifoptr)
{
    if (fifoptr->framenum == fax2_ECM_maxframeID
        && fifoptr->index == fax2_ECM_fsize_less1)
        /* pointer is already pointing to last character */
        return(FALSE);

    if (fifoptr->index == fax2_ECM_fsize_less1)
    {
        fifoptr->index = 0;
        ++(fifoptr->framenum);
    }
    else
        ++(fifoptr->index);

   return(TRUE);
}

/*******************************************************************************
/
/	Routine: fax2_ECM_tx_to_char
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Places a single character in the current ECM partial page
/                    for transmission.  fax2_ECM_to_space_available() should
/                    be called beforehand to ensure ECM buffer manager can
/                    accept another character.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_tx_to_char(ubyte c)
{
    fax2_ECM_bm_to_buff_char(fax2_ECM_fifotail.framenum,fax2_ECM_fifotail.index,c);
    if (!fax2_ECM_increment_pointer(&fax2_ECM_fifotail))
        /* if pointer cannot be advanced any further, set the flag ... */
        fax2_ECM_ecmbuffersfilled = TRUE;

}

/*******************************************************************************
/
/	Routine: fax2_ECM_framesless1xmitted
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Returns the number of frames being transmitted in the
/                    current partial page.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users: Example use -- the frame count contained in the PPS-Q post
/              message command.
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte fax2_ECM_framesless1xmitted(void)
{
    /* if the last frame was empty (i.e., index == 0), then subtract one
    before returning frame count from the framenum*/
    return fax2_ECM_numxmitdframesless1;
}

