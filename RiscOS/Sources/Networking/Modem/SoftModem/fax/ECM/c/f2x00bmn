/******************************************************************************
/
/   Copyright, 1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 201
/        Raleigh, NC  27615
/        (919) 846-7171
/
/    This document contains material confidential to RSA. Its contents
/    must not be revealed, used or disclosed to anyone or company without
/    written permission by RSA. The information contained herein is solely
/    for the use of RSA.
/
/        File     : f2x00bmn.c
/
/        Module Version: 4.04
/
/        Function : ECM Buffer Manager. Provides a way of storing/retrieving
/                   ECM frames to/from memory.
/
/        Product  : Class 2/2.0 ECM Submodule.
/
/        History  : 4.03
/
/        Created  : 9/23/93
/
/            -----------------------------------------------------------
/            -                       Modifications                     -
/            -----------------------------------------------------------
/
/            Author & Date :
/            Description   :
/            Reason        :
/
******************************************************************************/
#include "sys_def.h"
#include "f2x_ecd.h"
#include "f2x_bmd.h"
#include "f2x_emm.h"
#include "f2x_ecp.h"

/*******************************************************************************
/
/	Routine: fax2_ECM_bm_configure
/
/	Author : RSA
/
/	Creation Date: 9/23/93
/
/	Description : Configures buffer manager to allocate so many bytes per
/                     frame.  Should be called before actual BM routines are
/                     used to store/retrieve frame characters.
/
/	Input Parameters: f_size_less1      0-255
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_bm_configure(ubyte f_size_less1)
{
    fax2_ECM_bm_framesizeless1 = f_size_less1;

    fax2_ECM_bm_numframesless1 = (f_size_less1 == FRAME_SIZE64) ?
        NUM_FRAMESLESS1_SIZE64 : NUM_FRAMESLESS1_SIZE256;
}

/*******************************************************************************
/
/	Routine: fax2_ECM_bm_maxnum_frames_less1
/
/	Author : RSA
/
/	Creation Date: 9/23/93
/
/	Description : Returns number of available buffers given a
/                     configuration of so many bytes per frame (or buffers).
/                     Used to query BM of its storage capabilities.
/
/	Input Parameters: f_size_less1  0-255
/
/	Output Parameters: return_code  0-255
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte fax2_ECM_bm_maxnum_frames_less1(ubyte f_size_less1)
{
    return (f_size_less1 == FRAME_SIZE64) ? NUM_FRAMESLESS1_SIZE64 :
           NUM_FRAMESLESS1_SIZE256;
}

/*******************************************************************************
/
/	Routine: fax2_ECM_bm_bufferoffset
/
/	Author : RSA
/
/	Creation Date: 9/23/93
/
/	Description : Returns a logical byte offset (0-65535) given a frame
/                     id (0-255) and an offset (0-255) into a frame.
/
/	Input Parameters: frame id      0-255
/                         frame offset  0-255
/
/	Output Parameters: logical byte offset  0-65535
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
/* Note: This function is actually a macro! */
#define fax2_ECM_bm_bufferoffset(frame_id,frameoffset) (\
        (frame_id) * (fax2_ECM_bm_framesizeless1+1) + (frameoffset)\
        )

/*******************************************************************************
/
/	Routine: fax2_ECM_bm_get_buffer_addr
/
/	Author : RSA
/
/	Creation Date: 9/23/93
/
/	Description : Returns an actual memory address given a frame id and
/                     frame offset. It is understood that bytes of a
/                     particular frame are adjacent in memory (i.e., the frame
/                     as unit is not broken up).
/
/	Input Parameters: frame id      0-255
/                         frame offset  0-255
/
/	Output Parameters: Memory address corresponding to frame id and frame
/                          offset.
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte *fax2_ECM_bm_get_buffer_addr(ubyte frame_id, ubyte frameoffset)
{
    ubyte *return_code;

    switch (frame_id >> FRAMEID_PAGE_SHIFT)
    {
        case BUFF_PG0:
            return_code =
                &fax2_ECM_bm_buffer0[fax2_ECM_bm_bufferoffset(frame_id & FRAMEID_ARRAY_OFFSET,frameoffset)];
            break;
        case BUFF_PG1:
            return_code =
                &fax2_ECM_bm_buffer1[fax2_ECM_bm_bufferoffset(frame_id & FRAMEID_ARRAY_OFFSET,frameoffset)];
            break;
        case BUFF_PG2:
            return_code =
                &fax2_ECM_bm_buffer2[fax2_ECM_bm_bufferoffset(frame_id & FRAMEID_ARRAY_OFFSET,frameoffset)];
            break;
        case BUFF_PG3:
            return_code =
                &fax2_ECM_bm_buffer3[fax2_ECM_bm_bufferoffset(frame_id & FRAMEID_ARRAY_OFFSET,frameoffset)];
            break;
    }
    return return_code;
}

/*******************************************************************************
/
/	Routine: fax2_ECM_bm_to_buff
/
/	Author : RSA
/
/	Creation Date: 9/23/93
/
/	Description : Copies a "frame" of data into BM memory.
/
/	Input Parameters: origination address   memory pointer from where frame
/                                               data is copied
/                                               data to be copied from
/                         frame id              0-255, specifies what frame id
/                                               BM is to copy data
/                         byte count less 1     0-255, how many bytes of frame
/                                               BM is to store
/
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_bm_to_buff(ubyte *orig_addr, ubyte frame_id, ubyte byte_count_less1)
{
    ubyte *dest_addr;

    dest_addr = fax2_ECM_bm_get_buffer_addr(frame_id,0);

    (*fax2_ECM_bm_open_buff_page[frame_id >> FRAMEID_PAGE_SHIFT])();

    *dest_addr = *orig_addr;

    while (byte_count_less1)
    {
        *++dest_addr = *++orig_addr;
        --byte_count_less1;
    }

    /*
    fax2_ECM_bm_blockcopy(
                   orig_addr,
                   fax2_ECM_bm_get_buffer_addr(frame_id,0),
                   byte_count_less1
                     );
*/

    mmu_restore_stored_pg
}

/*******************************************************************************
/
/	Routine: fax2_ECM_bm_from_buff
/
/	Author : RSA
/
/	Creation Date: 9/23/93
/
/	Description : Copies a "frame" of data from BM memory.
/
/	Input Parameters: destination address   memory pointer to where frame
/                                               data is copied
/                         frame id              0-255, specifies what frame id
/                                               BM is to copy data
/                         byte count less 1     0-255, how many bytes of frame
/                                               BM is to store
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_bm_from_buff(ubyte *dest_addr, ubyte frame_id, ubyte byte_count_less1)
{
    ubyte *orig_addr;

    orig_addr = fax2_ECM_bm_get_buffer_addr(frame_id,0);

    (*fax2_ECM_bm_open_buff_page[frame_id >> FRAMEID_PAGE_SHIFT])();

    *dest_addr = *orig_addr;

    while (byte_count_less1)
    {
        *++dest_addr = *++orig_addr;
        --byte_count_less1;
    }
/*
    fax2_ECM_bm_blockcopy(fax2_ECM_bm_get_buffer_addr(frame_id, 0),
                      dest_addr,
                      byte_count_less1);
*/

    mmu_restore_stored_pg
}

/*******************************************************************************
/
/	Routine: fax2_ECM_bm_from_buff_char
/
/	Author : RSA
/
/	Creation Date: 9/23/93
/
/	Description : Retrieves a single character from BM memory, given a
/                     frame id and index into frame
/
/	Input Parameters: frame id          0-255
/                         index into frame  0-255
/
/	Output Parameters: Character from BM memory, 0-255
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte fax2_ECM_bm_from_buff_char(ubyte frame_id, ubyte index_into_frame)
{
    ubyte c;

    (*fax2_ECM_bm_open_buff_page[frame_id >> FRAMEID_PAGE_SHIFT])();
    c = *fax2_ECM_bm_get_buffer_addr(frame_id, index_into_frame);
    mmu_restore_stored_pg
    return(c);
}

/*******************************************************************************
/
/	Routine: fax2_ECM_bm_to_buff_char
/
/	Author : RSA
/
/	Creation Date: 9/23/93
/
/	Description : Copies a single character to BM memory, given
/                     a frame id and index into frame
/
/	Input Parameters: frame id          0-255
/                         index into frame  0-255
/                         character         0-255
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_bm_to_buff_char(ubyte frame_id, ubyte index_into_frame, ubyte c)
{
    (*fax2_ECM_bm_open_buff_page[frame_id >> FRAMEID_PAGE_SHIFT])();
    *fax2_ECM_bm_get_buffer_addr(frame_id, index_into_frame) = c;
    mmu_restore_stored_pg
}

/*******************************************************************************
/
/	Routine: open_fax_ECM_bm0_page
/
/	Author : RSA
/
/	Creation Date: 12/3/93
/
/	Description : Opens ECM RAM page 0
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void open_fax_ECM_bm0_page(void)
{
    mmu_open_fax_ECM_bm0_pg
}

/*******************************************************************************
/
/	Routine: open_fax_ECM_bm1_page
/
/	Author : RSA
/
/	Creation Date: 12/3/93
/
/	Description : Opens ECM RAM page 1
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void open_fax_ECM_bm1_page(void)
{
    mmu_open_fax_ECM_bm1_pg
}

/*******************************************************************************
/
/	Routine: open_fax_ECM_bm2_page
/
/	Author : RSA
/
/	Creation Date: 12/3/93
/
/	Description : Opens ECM RAM page 2
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void open_fax_ECM_bm2_page(void)
{
    mmu_open_fax_ECM_bm2_pg
}

/*******************************************************************************
/
/	Routine: open_fax_ECM_bm3_page
/
/	Author : RSA
/
/	Creation Date: 12/3/93
/
/	Description : Opens ECM RAM page 3
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void open_fax_ECM_bm3_page(void)
{
    mmu_open_fax_ECM_bm3_pg
}

