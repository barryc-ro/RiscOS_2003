/******************************************************************************
/
/   Copyright, 1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 201
/        Raleigh, NC  27615
/        (919) 846-7171
/
/    This document contains material confidential to RSA. Its contents
/    must not be revealed, used or disclosed to anyone or company without
/    written permission by RSA. The information contained herein is solely
/    for the use of RSA.
/
/        File     : f2x00elb.c
/
/        Module Version: 4.04
/
/        Function : Library Routines for ECM Submodule
/
/        Product  : Class 2/2.0 ECM Submodule.
/
/        History  : 4.03
/
/        Created :
/
/            -----------------------------------------------------------
/            -                       Modifications                     -
/            -----------------------------------------------------------
/
/            Author & Date :
/            Description   :
/            Reason        :
/
******************************************************************************/

#include "sys_def.h"
#include "f2x_def.h"
#include "f2x_mem.h"
#include "f2x_ecd.h"
#include "f2x_bmd.h"
#include "f2x_ecp.h"
#include "f2x_emm.h"
#include "f2x_pro.h"

/*******************************************************************************
/
/	Routine: fax2_ECM_process_xmit_char
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Attempts to include passed character in current ECM partial
/                    page. If unsuccessful, saves character in
/                    fax2_ECM_ungetchar structure for next partial page.
/
/	Input Parameters: tx_char
/
/	Output Parameters: return_code  TRUE    -> character included in current
/                                                  ECM partial page
/                                       FALSE   -> otherwise
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte fax2_ECM_process_xmit_char(ubyte tx_char)
{
    ubyte return_code;

    if (!fax2_ECM_tx_pp_complete()) /* ECM can accept this character */
    {
        fax2_ECM_tx_to_char(tx_char);
        return_code = TRUE;
    }
    else
    {
        /* ECM cannot accept this character; so save it for the
        next partial page (i.e., "unget" this character) */
        fax2_ECM_ungetchar.ungetchar[fax2_ECM_ungetchar.count++] = tx_char;
        return_code = FALSE;
    }
    return return_code;
}

/*******************************************************************************
/
/	Routine: fax2_ECM_ppcfrompacket
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Given a 8-bit or 16-bit FCF (opcode2 can be "UNUSED")
/                    post message command, returns a corresponding post message
/                    command value (e.g., as used in fax2_pp_command).
/
/	Input Parameters: opcode1 -> 1st FCF byte
/                         opcode2 -> 2nd FCF byte (optional; may be UNUSED)
/
/	Output Parameters: return_code -> post message command value
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte fax2_ECM_ppcfrompacket(ubyte opcode1, ubyte opcode2)
{
    ubyte i;
    ubyte found_pmc;

    i = 0 ;
    found_pmc = NOTSET;

    while (found_pmc == NOTSET)
    {
        if (opcode1 == fax2_ECM_pmcfcftable[i][0])
        {
            if (i > (NUM_ECM_PMCS_WITH2OPCODES - 1))
                /* sufficient to check only 1 opcode */
                found_pmc = TRUE;
            else if (opcode2 == fax2_ECM_pmcfcftable[i][1])
                /* 2 opcodes must be checked */
                found_pmc = TRUE;
        }
        if (found_pmc != TRUE)
        {
            if (i != (NUM_ECM_PMCS - 1))
                ++i;
            else
                found_pmc = FALSE;
        }
    }
    return found_pmc ? i : UNRECOGNIZED_ECMPPC;
}

/*******************************************************************************
/
/	Routine: fax2_ECM_accept_PPR
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Saves the 32-byte FIF of a PPR frame in order to
/                    determine which frames of the current partial page are
/                    to be re-transmitted.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_accept_PPR(void)
{
    ubyte *copy_from;
    ubyte *copy_to;
    ubyte i;

    /* fax2_buffer_ptr still points to the PPR just received */
    /* save frames to be re-transmitted */
    copy_from = &(fax2_buffer_ptr->data[FIF_1]);
    copy_to = fax2_ECM_PPR_FIF;
    for (i = 1; i <= PPR_FIF_SIZE; ++i)
        *(copy_to++) = *(copy_from++);
}

/*******************************************************************************
/
/	Routine: fax2_ECM_rx_pmr_ok
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Examines if the received post message response opcode is
/                    a valid response to the post message command just
/                    transmitted. If valid, assigns fax2_pp_response an
/                    appropriate value and returns TRUE. Otherwise, returns
/                    FALSE.
/
/	Input Parameters: None
/
/	Output Parameters: return_code  TRUE    ->  valid post message response
/                                       FALSE   ->  invalid pmr
/
/	Global Variables Changed: fax2_pp_response
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte fax2_ECM_rx_pmr_ok(void)
{
    ubyte return_code;

    return_code = TRUE; /* Assume response is valid */

    /* translate the pp response into class 2 terminology */
    switch (fax2_packet_opcode)
    {
        case MCF_PACKET:
            /* MCF only valid after PPS-XXX post page commands! */
            if (fax2_pp_command <= PPS_Q_MAX_INDEX)
                fax2_pp_response = MCF_PPR;
            else
                return_code = FALSE;
            break;
        case PPR_PACKET:
            /* PPR only valid after PPS-XXX post page commands! */
            if (fax2_pp_command <= PPS_Q_MAX_INDEX)
                fax2_pp_response = PPR_PPR;
            else
                return_code = FALSE;
            break;
        case RNR_PACKET: /* valid under any circumstances */
            fax2_pp_response = RNR_PPR;
            break;
        case ERR_PACKET:
            if (fax2_pp_command >= EOR_Q_MIN_INDEX &&
                fax2_pp_command <= EOR_Q_MAX_INDEX)
                /* ERR only valid after EOR-XXX post page commands! */
                fax2_pp_response = ERR_PPR;
            else
                return_code = FALSE;
            break;
        case PIP_PACKET:
            if (fax2_pp_command != PPS_NULL_PPC &&
                fax2_pp_command <= PPS_Q_MAX_INDEX )
                /* PIP only valid after non NULL PPS-XXX post page commands!
                   (i.e., on fax page boundaries!) */
                fax2_pp_response = PIP_PPR;
            else
                return_code = FALSE;
            break;
        case PIN_PACKET:
            if (fax2_pp_command != PPS_NULL_PPC &&
                fax2_pp_command != EOR_NULL_PPC)
                /* PIN only valid after non XXX-NULL post page commands!
                   (i.e., on fax page boundaries!) */
                fax2_pp_response = PIN_PPR;
            else
                return_code = FALSE;
            break;
        case CTR_PACKET:
            if (fax2_pp_command == CTC_PPC)
                fax2_pp_response = CTR_PPR;
            else
                return_code = FALSE;
            break;

        default: /* not a proper response */
            return_code = FALSE;
            break;
    }
    return (return_code);
}

/*******************************************************************************
/
/	Routine: fax2_ECM_rcv_RR_response
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Used when transmitting in phase D; waits and processes
/                    the receiver's post message response after we, the
/                    transmitter, transmits a RR post message command.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users: fax2_sub_state
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_rcv_RR_response(void)
{
    /* Check if T5 timer has expired */
    if (!fax2_T5_timer)
    {
        fax2_state = PHASE_E;
        fax2_sub_state = SCHEDULE_DCN_PACKET;
        fax2_hangup_status = TX_D_UNSPECIFIED_ERROR;
        return;
    }
    switch (fax2_response_receive_page())
    {
        case PROCESSING: /* looking for a packet */
            break;
        case RECEIVED_RESPONSE: /* non-optional packet received */
            fax2_tries = 3; /* reset the number of tries */
            /* if it was a valid non-RNR response, then we can continue.
            Otherwise, we have to remain in this state and continue to check
            the T5 timer */
            if (fax2_ECM_rx_pmr_ok())
                if (fax2_pp_response != RNR_PPR)
                    /* Response is a valid non-RNR response; so, we can go to
                    interpret the non-RNR post page response    */
                    fax2_sub_state = ECM_PROCESS_PPR;
                else
                    /* RNR response, transmit another RNR and keep checking
                    if the T5 timer expired */
                    fax2_sub_state = ECM_SCHEDULE_TX_RR;
            else
            {
                /* not a proper response */
                fax2_state = PHASE_E;
                fax2_sub_state = SCHEDULE_DCN_PACKET;
                /* the hangup status depends on the ORIGINAL PP command */
                fax2_hangup_status =
                fax2_ECM_phaseD_bad_resp_tbl[fax2_pp_command];
            }
            break;
        case NO_RESPONSE: /* T4 timeout or flags w/o proper packet */
            if (--fax2_tries) /* check number of attempts */
                /* no response, transmit another RNR and keep checking
                if the T5 timer expired */
                fax2_sub_state = ECM_SCHEDULE_TX_RR;
            else
            {
                /* tried three times with no response */
                fax2_state = PHASE_E;
                fax2_sub_state = SCHEDULE_DCN_PACKET;
                fax2_hangup_status =
                    fax2_ECM_phaseD_no_response_tbl[RR_PPC];
            }
            break;
        case TRANSMIT_DCN: /* packet larger than 3 sec */
            fax2_state = PHASE_E;
            fax2_sub_state = SCHEDULE_DCN_PACKET;
            fax2_hangup_status = TX_D_RSPREC_ERROR;
            break;
        case TERMINATE_SESSION: /* DCN received, terminate w/o DCN */
            fax2_state = PHASE_E;
            fax2_sub_state = TERMINATE;
            fax2_hangup_status = TX_D_RSPREC_ERROR;
            break;
    }
}

/*******************************************************************************
/
/	Routine: fax2_ECM_rx_pmr
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Receives the post message response, examines if it is
/                    valid, and takes appropriate action.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed: fax2_sub_state
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_rx_pmr(void)
{
    switch (fax2_response_receive_page())
    {
        case PROCESSING: /* looking for a packet */
            break;
        case RECEIVED_RESPONSE: /* non-optional packet received */
            fax2_tries = 3; /* reset the number of tries */
            if (fax2_ECM_rx_pmr_ok())
            {
                /* act on the partial page response */
                fax2_sub_state = ECM_PROCESS_PPR;

                /* only want to issue a transmit +FPTS response when in
                Class 2, and partial page response is MCF, PIN, PIP, or ERR */
                if (fax2_class == STANDARD_2388 &&
                    fax2_ECM_fpts_respond[fax2_pp_response] &&
                    fax2_pp_command != PPS_NULL_PPC &&
                    fax2_pp_command != EOR_NULL_PPC)
                    fax2_response_page(FPTS_RESPONSE, NULL);
            }
            else
            {
                /* not a proper response */
                fax2_state = PHASE_E;
                fax2_sub_state = SCHEDULE_DCN_PACKET;
                /* the hangup status depends on the PP command */
                fax2_hangup_status =
                fax2_ECM_phaseD_bad_resp_tbl[fax2_pp_command];
            }
            break;
        case NO_RESPONSE: /* T4 timeout or flags w/o proper packet */
            if (--fax2_tries) /* check number of attempts */
                fax2_sub_state = ECM_SCHEDULE_TX_PMC;
            else
            {
                /* tried three times with no response */
                fax2_state = PHASE_E;
                fax2_sub_state = SCHEDULE_DCN_PACKET;
                /* the hangup status depends on the PP command */
                fax2_hangup_status =
                fax2_ECM_phaseD_no_response_tbl[fax2_pp_command];
            }
            break;
        case TRANSMIT_DCN: /* packet larger than 3 sec */
            fax2_state = PHASE_E;
            fax2_sub_state = SCHEDULE_DCN_PACKET;
            fax2_hangup_status = TX_D_RSPREC_ERROR;
            break;
        case TERMINATE_SESSION: /* DCN received, terminate w/o DCN */
            fax2_state = PHASE_E;
            fax2_sub_state = TERMINATE;
            fax2_hangup_status = TX_D_RSPREC_ERROR;
            break;
    }
}

/*******************************************************************************
/
/	Routine: fax2_ECM_tx_pp
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Called during phase C, transmit to transmit an ECM partial
/                    page. Accepts characters from the APP until the current
/                    partial page is complete.  Handles data stream termination
/                    character pairs like <DLE><ETX> (Class 2), <DLE><.>
/                    (Class 2.0)
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_tx_pp(void)
{
    ubyte iteration_num;

    fax2_ECM_tx_pp_bg(); /* Give ECM TX processing power */

    /* set a limit on the maximum number of consecutive iterations,
    so that other background tasks have an opportunity to
    execute (e.g., fax2_ECM_tx_pp_bg [called above] has a chance to process
    data given to it via fax2_ECM_tx_char) */
    iteration_num = MAX_ITERATIONS;

    /* while data in DTE buffer and not exceeded the maximum
        consecutive iterations */
    while (fax_dte_from_num() && iteration_num)
    {
        --iteration_num;

        /* get char from DTE buffer WITHOUT first checking if
        ECM can accept another character (i.e.,
        fax2_ECM_tx_pp_complete()) to cover the case of a DLE ETX
        sequence immediately following a partial page boundary! Otherwise,
        the next partial page would have a length of zero! ) */

        fax2_dte_char = fax_dte_from_char();

        /* check bit ordering if direct then don't change */
        /* if reverse, translate data for reverse bit ordering */
        fax2_line_char = (fax2_data_bit_ordering == DIRECT) ?
                fax2_dte_char : fax2_ECM_reverse_table[fax2_dte_char];

        if (fax2_last_data_dle) /* if last data was DLE */
        {
            fax2_last_data_dle = FALSE; /* last data not DLE */
            switch (fax2_dte_char)
            {
                case DLE: /* Class 1,2; DLE DLE -> send one DLE */
                    if (!fax2_ECM_process_xmit_char(fax2_line_char))
                    {
                        fax2_sub_state = ECM_FLUSH_LINE_PPS_NULL;
                        iteration_num = 0; /* force while loop to terminate */
                    }
                    break;
                case ETX: /* Class 2; end of data from APP */
                    if (fax2_class != STANDARD_2388)
                        break;
                    /* if end of data from APP */
                    if (fax2_negotiated.BF)
                        /* If we have negotiated BFT, we do not want to send out
                           RTC */
                        fax2_sub_state = ECM_FLUSH_LINE_NON_PPS_NULL;
                    else
                    {
                        fax2_sub_state = ECM_SEND_RTC;
                        fax2_ECM_RTC_ptr = fax2_ECM_RTC_array;
                    }
                    iteration_num = 0; /* force while loop to terminate */
                    break;
                case SUB: /* Class 2.0; DLE SUB -> send DLE DLE */
                    if (fax2_class == STANDARD_592)
                    {
                        /* Don't bother checking if there is room for first DLE
                        if there is not enough room, there is a mechanism
                        (i.e.,fax2_ECM_ungetchar) to store up to two characters
                        if partial page is already full*/
                        fax2_ECM_process_xmit_char(fax2_line_char);
                        /* Now, check if the second DLE causes the partial page
                        to be full! */
                        if (!fax2_ECM_process_xmit_char(fax2_line_char))
                        {
                            fax2_sub_state = ECM_FLUSH_LINE_PPS_NULL;
                            iteration_num = 0; /* force terminate while loop */
                        }
                    }
                    break;
                case '!': /* Class 2.0; PRI */
                    if (fax2_class == STANDARD_592)
                        fax2_local_generated_interrupt = TRUE;
                    break;
                case ',': /* Class 2.0; MPS, APP has more pages to send */
                    if (fax2_class == STANDARD_592)
                        fax2_pp_command = PPS_MPS_PPC;
                    break;
                case ';': /* Class 2.0; EOM, APP has more documents to send */
                    if (fax2_class == STANDARD_592)
                        fax2_pp_command = PPS_EOM_PPC;
                    break;
                case '.': /* Class 2.0; EOP, APP is finished transmitting */
                    if (fax2_class == STANDARD_592)
                        fax2_pp_command = PPS_EOP_PPC;
                    break;
                case '?': /* Class 2.0, credit status request */
                    if (fax2_class == STANDARD_592)
                    {
                        /* The ECM buffer will tell approximately how bytes
                        remain in the "overall" transmit buffer (i.e., we
                        ignore the DTE and LINE buffers) */
                        fax2_respond_hex_word_page(fax2_ECM_tx_size() -
                            fax2_ECM_tx_count());
                        fax_dte_to_char(CR);
                    }
                    break;
                default:
                    /* ignore invalid DLE-XXX sequence */
                    break;
            }
            if (fax2_pp_command != NO_PPC)
            {
                /* In Class 2.0 only, it is possible for the fax2_pp_command to
                to be set without first going into "parse" mode (e.g., <DLE><.>)
                Thus, it is understood that fax2_class == 20 if this block is entered.
                If a post message command has been received, end partial page */
                fax2_ECM_tx_flush_pp_to_line(); /* Close partial page */
                fax2_sub_state = ECM_FLUSH_LINE_NON_PPS_NULL;
                iteration_num = 0; /* force while loop to terminate */
            }
        }
        else if (fax2_dte_char == DLE) /* if DLE then wait for next char */
            fax2_last_data_dle = TRUE;
        else /* plain char, just send */
        {
            if (!fax2_ECM_process_xmit_char(fax2_line_char))
            {
                fax2_sub_state = ECM_FLUSH_LINE_PPS_NULL;
                iteration_num = 0; /* force while loop to terminate */
            }
        }
    } /* while */
}

