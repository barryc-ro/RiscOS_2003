/******************************************************************************
/
/   Copyright, 1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 201
/        Raleigh, NC  27615
/        (919) 846-7171
/
/    This document contains material confidential to RSA. Its contents
/    must not be revealed, used or disclosed to anyone or company without
/    written permission by RSA. The information contained herein is solely
/    for the use of RSA.
/
/        File     : f2x00erd.c
/
/        Module Version: 4.04
/
/        Function : "Concurrent" DTE task that is active when ECM submodule is
/                   receiving and sending ECM Phase C page data to the APP.
/
/        Product  : Class 2/2.0 ECM Submodule.
/
/        History  : 4.03
/
/        Created :
/
/        -----------------------------------------------------------
/        -                       Modifications                     -
/        -----------------------------------------------------------
/
/        Author & Date :
/        Description   :
/        Reason        :
/
******************************************************************************/
#include "sys_def.h"
#include "f2x_def.h"
#include "f2x_pro.h"
#include "f2x_mem.h"
#include "f2x_ecd.h"
#include "f2x_bmd.h"
#include "f2x_emm.h"
#include "f2x_ecp.h"


/*******************************************************************************
/
/	Routine: fax2_ECM_dte_bg_run
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Called to start the fax2_ECM_dte_bg task to start
/                    sending ECM Phase C data to the APP.
/
/	Input Parameters: execute_type
/                           0           wait for DC2 before proceeding
/                           1           proceed immediately
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_dte_bg_run(ubyte execute_type)
{
    if (execute_type == EXECUTE_AFTER_FOUND_DC2)
        fax2_ECM_dte_bg_state = ECDTEBG_WAIT_FOR_DC2;
    else if (execute_type == EXECUTE_IMMEDIATELY)
        fax2_ECM_dte_bg_state = ECDTEBG_EXECUTING;
}

/*******************************************************************************
/
/	Routine: fax2_ECM_dte_bg_init
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Called to place the fax2_ECM_dte_bg task in an idle
/                    mode.  Should be called at power-up initialization.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_dte_bg_init(void)
{
    fax2_ECM_dte_bg_state = ECDTEBG_IDLE;
    fax2_ECM_dte_receiving_afaxpage = FALSE;
}

/*******************************************************************************
/
/	Routine: fax2_ECM_dte_bg
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/       Description: "Concurrent" DTE task that is active when ECM submodule is
/                     sending received ECM Phase C page data to the APP.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users: Should be called if receive ECM has been negotiated.
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/       Author & Date: RSA
/       Descritpion:
/       Reason:
/
*******************************************************************************/
void fax2_ECM_dte_bg(void)
{
    ubyte iteration_num;
    ubyte rx_char_stat;
    ubyte tmp;
    ubyte rcv_char;

    if (fax2_received_command == EMPTY_COMMAND ||
        (fax2_state != PHASE_B_RECEIVE && fax2_state != PHASE_C_RECEIVE &&
         fax2_state != PHASE_D_RECEIVE))
        /* at any time, if FAX does not have control of the DTE port (i.e., parsing),
        ensure this task is IDLE if not already OR if we are not in PHASE B,C,D,
        receive also go to idle (e.g., fax_hangup is called to terminate connection) */
    {
        if (fax2_ECM_dte_bg_state != ECDTEBG_IDLE)
            fax2_ECM_dte_bg_state = ECDTEBG_IDLE;
        return;
    }

    switch (fax2_ECM_dte_bg_state)
    {
        case ECDTEBG_IDLE:
            break;
        case ECDTEBG_WAIT_FOR_DC2:
        case ECDTEBG_EXECUTING:
            while (fax_dte_from_num())
            {
                rcv_char = fax_dte_from_char();
                if (fax2_ECM_dte_bg_state == ECDTEBG_WAIT_FOR_DC2)
                {
/* During 2388 (class 2) receive, accept the DC1 character
   in addition to the DC2 character from the APP to begin
   the receive process after the DCE's CONNECT message.
   It has been pointed out that several APPs (NET-FAX and FlexFax)
   send DC1 instead of DC2 to begin the receive process
*/
                    if (rcv_char == DC2 ||
                        (rcv_char == DC1 && fax2_class == STANDARD_2388))
                        fax2_ECM_dte_bg_state = ECDTEBG_EXECUTING;
                }
                else if (rcv_char == '?' && fax2_class == STANDARD_592)
                {
                    while (fax_dte_to_free() < 2) ; /* wait for enough room  */
                    /* Note: By calculating how many of the ECM buffers are filled,
                    we give a good approximation of the total buffer contents */
                    fax_dte_to_char(DLE);
                    tmp = (fax2_ECM_maxframeID - fax2_ECM_freeframeid.index) /
                        (fax2_ECM_maxframeID / 10);
                    tmp = (tmp == 10) ? 9 : tmp; /* make sure tmp <= 9 */
                    fax_dte_to_char( tmp + '0');
                }
                else if (rcv_char == CAN)
                {
                    /* at this point, we know we are receiving AND ECM has
                    been negotiated AND the FAX has the DTE port and is passing
                    received page data to the APP */
                    if (fax2_line_configured)
                        fax2_cleanup_page(); /* terminate modulation if nec. */
                    fax2_ECM_dte_send_DLE_ETX();
                    fax2_ECM_dte_bg_state = ECDTEBG_IDLE;
                    fax2_state = PHASE_E; /* send a DCN, then hangup */
                    fax2_sub_state = SCHEDULE_DCN_PACKET;
                    fax2_hangup_status = FKS_ABORTED_CONNECTION;
                    return; /* return from function */
                }
            } /* while */

            /* Stop if still waiting for DC2 */
            if (fax2_ECM_dte_bg_state == ECDTEBG_WAIT_FOR_DC2)
                break;

            /* Set flag indicating it is necessary to send DLE ETX */
            fax2_ECM_dte_receiving_afaxpage = TRUE;

            /* set a limit on the maximum number of consecutive iterations,
            so that other background tasks have an opportunity to
            execute (e.g., fax2_ECM_rx_pp_bg [called above] has a chance to
            process new received frames from the line) */

            iteration_num = MAX_ITERATIONS;

            /* while characters in ECM buffer, room in DTE TX buffer (with
            DLE shielding, and not exceeded max iterations ... */
            do
            {
                /* need room in DTE TX buffer with DLE shielding */
                if (fax_dte_to_free() < 2)
                    break; /* do while loop */

                /* See if there is an available character */
                rx_char_stat = fax2_ECM_rx_from_char(&fax2_line_char);

                if (rx_char_stat == ECRXFRCHAR_CHAR_AVAIL)
                {
                    /* In class 2, this is a Sierra problem that we're
                    stuck with if normal mode reverse the bits if
                    reverse then don't reverse */
                    /* In class 2.0, we follow the 592 spec. */

                    fax2_dte_char = (fax2_data_bit_ordering ==
                      ((fax2_class == STANDARD_2388) ? DIRECT : REVERSE ) ) ?
                      fax2_ECM_reverse_table[fax2_line_char] : fax2_line_char;
                    fax_dte_to_char(fax2_dte_char); /* send to APP */
                    if (fax2_dte_char == DLE) /* if DLE */
                        fax_dte_to_char(DLE); /* then shield the DLE */
                }
                else if (rx_char_stat == ECRXFRCHAR_PP_PASSED_UP)
                {
                    /* there are no more characters in the partial page to
                    be passed to the DTE */
                    fax2_ECM_dte_bg_state = ECDTEBG_IDLE;
                }
              --iteration_num;
            } while (iteration_num && rx_char_stat == ECRXFRCHAR_CHAR_AVAIL);

            if (fax2_class == STANDARD_592 &&
                fax2_ECM_freeframeid.index == fax2_ECM_maxframeID &&
                fax2_ECM_linebufstat[fax2_ECM_linebufhead] != ECM_LINEBUFF_RECEIVED &&
                fax_dte_to_num() < EMPTY_BUFFERS_COUNT &&
                fax_dte_flowed_on())
            {
                /* We have to be in Class 2.0, have no data in the ECM buffers,
                no pending receive data in LINE I/O, and have a number of
                characters below a certain min. in the DTE xmit buffer and
                meet the 592 requirements to xmit a DLE DC2 pair */
/*                fax_dte_to_char(DLE);
                fax_dte_to_char(DC2);
*/
            }

            break;
    }
}

/*******************************************************************************
/
/	Routine: fax2_ECM_dte_pp_sent
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Determines if the current partial page has been completely
/                    sent to the DTE by the fax2_ECM_dte_bg task.
/
/	Input Parameters: None
/
/	Output Parameters: return_code
/                           TRUE        current partial page has been completely
/                                       sent to the DTE.
/                           FALSE       otherwise.
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte fax2_ECM_dte_pp_sent(void)
{
    return fax2_ECM_dte_bg_state == ECDTEBG_IDLE;
}

/*******************************************************************************
/
/	Routine: fax2_ECM_dte_send_DLE_ETX
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Terminates any page data fax2_ECM_dte_bg has been sending
/                    to the APP with a <DLE><ETX> pair if appropriate.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_dte_send_DLE_ETX(void)
{
    /* If we are not in the middle of sending "Phase C" data to the APP,
    there is no need to send DLE ETX */
    if (!fax2_ECM_dte_receiving_afaxpage)
        return;

    fax2_ECM_dte_receiving_afaxpage = FALSE;
    while (fax_dte_to_free() < 2) ; /* Wait for room for DLE ETX */
    fax_dte_to_char(DLE); /* send page terminating sequence */
    fax_dte_to_char(ETX);
}
