/******************************************************************************
/
/   Copyright, 1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 201
/        Raleigh, NC  27615
/        (919) 846-7171
/
/    This document contains material confidential to RSA. Its contents
/    must not be revealed, used or disclosed to anyone or company without
/    written permission by RSA. The information contained herein is solely
/    for the use of RSA.
/
/        File     : f2x00erx.c
/
/        Module Version: 4.04
/
/        Function : Receive ECM Buffer Manager Driver
/
/        Product  : Class 2/2.0 ECM Submodule.
/
/        History  : 4.03
/
/        Created :
/
/        -----------------------------------------------------------
/        -                       Modifications                     -
/        -----------------------------------------------------------
/
/        Author & Date :
/        Description   :
/        Reason        :
/
******************************************************************************/
#include "sys_def.h"
#include "f2x_def.h"
#include "f2x_mem.h"
#include "f2x_pro.h"
#include "f2x_ecd.h"
#include "f2x_bmd.h"
#include "f2x_emm.h"
#include "f2x_ecp.h"

/*******************************************************************************
/
/	Routine: fax2_ECM_rx_configure
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Informs the Receive ECM Buffer Manager Driver of
/                    necesssary "configuration" parameters (specified
/                    in the argument list).
/
/	Input Parameters: f_size_less1      bytes/ECM frame "less 1" (0-255)
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_rx_configure(ubyte f_size_less1)
{
    fax2_ECM_fsize_less1 = f_size_less1;

    /* store the maximum frame ID */
    /* Maintain a number of the free buffers available */
    fax2_ECM_maxframeID = fax2_ECM_bm_maxnum_frames_less1(fax2_ECM_fsize_less1);

    /* tell buffer manager how how many bytes per frame */
    fax2_ECM_bm_configure(fax2_ECM_fsize_less1);
}

/*******************************************************************************
/
/	Routine: fax2_ECM_rx_init
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Used to initialize the fax2_ECM_rx_pp_bg task to begin
/                    receiving a partial page.
/
/	Input Parameters: rx_mode
/                          0        receive a new partial page
/                          1        re-receive a partial page that contained
/                                   corrupted frames
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_rx_init(ubyte rx_mode)
{
    ubyte j;
    ubyte *tmp_ptr;
    ubyte *tmp_ptr0;

    /* Because the line I/O has already been configured to DATA_MODE, RX_MODE,
    kill the line configuration ... */
    fax_line_reset();       /* terminate the DCE I/O, don't clear rx buffer */

    if (rx_mode == RX_NEW_PP_MODE)
    {
        /* assume PP will be 256 frames (until PPS-Q is received) */
        fax2_ECM_lastframe.framenum = ECM_PP_MAX_FRAME_NUM;

        /* assume last frame will have 256 or 64 bytes until we receive it */
        fax2_ECM_lastframe.framelengthless1 = fax2_ECM_fsize_less1;

        fax2_ECM_rx_fromchar_state = ECRXFRCH_WAITING_FOR_FRAME;

        /* Initialize PPR to request ALL frames */

        tmp_ptr0 = &fax2_ECM_PPR_FIF[PPR_FIF_SIZE-1];
        tmp_ptr = fax2_ECM_PPR_FIF;
        while (tmp_ptr != tmp_ptr0)
            *(tmp_ptr++) = 0xFF;
        *tmp_ptr = 0xFF;

        fax2_ECM_rx_ptr.framenum = 0;
        fax2_ECM_rx_ptr.index = 0;

        /* Initialize FILO (First In Last Out) List (stack) containing available
        free frame ids */

        tmp_ptr0 = &fax2_ECM_freeframeidlist[fax2_ECM_maxframeID];
        tmp_ptr = fax2_ECM_freeframeidlist;
        j = 0;
        while (tmp_ptr != tmp_ptr0)
            *(tmp_ptr++) = j++;
        *tmp_ptr = j;

        /* All frames ids are initially free */
        fax2_ECM_freeframeid.index = fax2_ECM_maxframeID;
        fax2_ECM_freeframeid.available = TRUE;

    }
    /* reset receive line I/O buffer mechanisms */

    fax2_ECM_linestat = EC_LINE_RX_NULLSTATUS;

    fax2_ECM_linebufhead = 0;
    fax2_ECM_linebuftail = 0;

    /* Initialize all Line Buffer Statuses to empty*/
    for (j = 0;j <= (MAX_EC_LINE_BUFFERS-1); j++)
        fax2_ECM_linebufstat[j] = ECM_LINEBUFF_FREE;

    fax_line_init(HDLC_MODE, RX_MODE, (uword) fax2_ECM_fsize_less1 +
                  NUM_EC_FCD_HDR_FIELDS + CRC_BYTES + 1);

    fax_line_rx_block( (ubyte *) &fax2_ECM_line_buffer[fax2_ECM_linebuftail]);
}

/*******************************************************************************
/
/	Routine: fax2_ECM_rx_frame_marked_unrcvd
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Indicates whether or not a specified ECM pp frame has been
/                    successfully received.
/
/	Input Parameters: None
/
/	Output Parameters: return_code
/                           TRUE    specified frame has not been received
/                           FALSE   specified frame has been received
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
/* function is actually a macro! */
#define fax2_ECM_rx_frame_marked_unrcvd(framenum) (\
(fax2_ECM_PPR_FIF[(framenum) >> 3] >> ((framenum) & 0x07)) & 0x01\
)

/*******************************************************************************
/
/	Routine: fax2_ECM_rx_mark_frame_rcvd
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Marks specified ECM partial page frame as having been
/                    successfully received.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
/* function is actually a macro! */
#define fax2_ECM_rx_mark_frame_rcvd(framenum) (\
fax2_ECM_PPR_FIF[(framenum) >> 3 ]\
&= ~((ubyte) (0x01 << ((framenum) & 0x07)))\
)

/*******************************************************************************
/
/	Routine: fax2_ECM_rx_from_char
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Attempts to sequentially retrieve next character of
/                    current partial page.
/
/	Input Parameters: None
/
/	Output Parameters: return_code
/                           0   No character available
/                           1   Character available
/                           2   All characters current partial page have been
/                               passed up (no character available)
/
/                           *from_char
/                             pointer to where character is placed only if
/                             return_code == 1
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte fax2_ECM_rx_from_char(ubyte *from_char)
{
    ubyte return_code;

    switch(fax2_ECM_rx_fromchar_state)
    {
        case ECRXFRCH_WAITING_FOR_FRAME:
            if (fax2_ECM_rx_ptr.framenum > fax2_ECM_lastframe.framenum)
            {
                /* We have just realized that that the partial page has
                been completely passed up.  Thus ... */
                return_code = ECRXFRCHAR_PP_PASSED_UP;
                fax2_ECM_rx_fromchar_state = ECRXFRCH_REPORT_PP_PASSSED_UP;
                break;
            }
            if (fax2_ECM_rx_frame_marked_unrcvd(fax2_ECM_rx_ptr.framenum))
            {
                return_code = ECRXFRCHAR_NO_CHAR_AVAIL;
                break;
            }
            /* got a new frame to send to the PC */
            fax2_ECM_rx_fromchar_state = ECRXFRCH_PASSUP_FRAME_TO_DTE;
            /* break intentionally omitted */
        case ECRXFRCH_PASSUP_FRAME_TO_DTE:
            return_code = ECRXFRCHAR_CHAR_AVAIL;
            *from_char = fax2_ECM_bm_from_buff_char(
                fax2_ECM_fIDfromfnumber[fax2_ECM_rx_ptr.framenum],
                fax2_ECM_rx_ptr.index);
            /* now decide if to check if need to go to next character of same
            frame or go to next frame */
            if (fax2_ECM_rx_ptr.index ==
                ((fax2_ECM_rx_ptr.framenum == fax2_ECM_lastframe.framenum) ?
                 fax2_ECM_lastframe.framelengthless1 : fax2_ECM_fsize_less1))
            {
                /* Current frame has been entirely passed up. Deallocate the
                frame id for future use */
                if (!fax2_ECM_freeframeid.available)
                    /* fax2_ECM_frameframeid.index is still 0, but indicate
                    is free */
                    fax2_ECM_freeframeid.available = TRUE;
                else /* else ok to bump up index */
                    ++fax2_ECM_freeframeid.index;

                /* Add frame id back to the LIFO (Last In First Out) Stack */
                fax2_ECM_freeframeidlist[fax2_ECM_freeframeid.index] =
                    fax2_ECM_fIDfromfnumber[fax2_ECM_rx_ptr.framenum];

                fax2_ECM_rx_ptr.index = 0;

                /* Advance pointer to next frame to be passed to DTE */
                if (fax2_ECM_rx_ptr.framenum == fax2_ECM_lastframe.framenum)
                {
                    /* we are about to pass up the last character of the last frame of
                    partial page; so schedule reporting that the partial
                    page has been completely been passed up*/
                    fax2_ECM_rx_fromchar_state = ECRXFRCH_REPORT_PP_PASSSED_UP;
                }
                else
                {
                    ++fax2_ECM_rx_ptr.framenum;
                    fax2_ECM_rx_fromchar_state = ECRXFRCH_WAITING_FOR_FRAME;
                }
            }
            else
                ++fax2_ECM_rx_ptr.index;  /* same frame, next character */
            break;
        case ECRXFRCH_REPORT_PP_PASSSED_UP:
            return_code = ECRXFRCHAR_PP_PASSED_UP;
            break;
    }  /* switch */
    return(return_code);
}

/*******************************************************************************
/
/	Routine: fax2_ECM_deallocate_line_buffer
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Deallocate (free up) line buffer pointed to by
/                    fax2_ECM_linebufhead for further SDLC frame receptions and
/                    restarts reception of ECM SDLC frames from line if
/                    necessary
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_deallocate_line_buffer(void)
{
    /* Deallocate (free up) line buffer pointed to by fax2_ECM_linebufhead
    for further SDLC frame receptions */
    fax2_ECM_linebufstat[fax2_ECM_linebufhead] = ECM_LINEBUFF_FREE;

    if (++fax2_ECM_linebufhead > (MAX_EC_LINE_BUFFERS - 1) )
        fax2_ECM_linebufhead = 0;

    /* Determine if SDLC receiver must be restarted (i.e., if a NULL pointer
    has been returned by fax_ECM_line_rx() */
    if (fax2_ECM_linestat == EC_LINE_RX_OVERRUN)
    {
        /* Reset overrun condition */
        fax2_ECM_linestat = EC_LINE_RX_NULLSTATUS;

        /* restart receive process (at this point,
            fax2_ECM_linebufstat[fax2_ECM_linebuftail] == ECM_LINEBUFF_FREE) */
        fax_line_rx_block( (ubyte *) &fax2_ECM_line_buffer[fax2_ECM_linebuftail]);
    }
}

/*******************************************************************************
/
/	Routine: fax2_ECM_rx_pp_bg
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Task which receives and processes ECM SDLC frames from
/                    the line I/O
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte fax2_ECM_rx_pp_bg(void)
{
    ecmhdlc_line_buffer_type *buffer_ptr;
    uword tmp;

    /* For receiving, it is understood that the buffer manager may not
       have a complete storage capacity of 256 frames.
       The ECM receive buffer manager scheme maintains a relationship between
       ECM "frame numbers" and ECM buffer "frame IDs".  Some frame numbers may not
       be received because there is not a free frame ID available */

    /* if not already deconfigured line I/O and lost carrier, deconfigure! */
    if (fax2_line_configured && !modem_check_CD())
        fax2_cleanup_page();

    if (fax2_ECM_linebufstat[fax2_ECM_linebufhead] != ECM_LINEBUFF_RECEIVED)
    {
        if (!modem_check_CD())
            /* only report CD loss after made sure there are no unprocessed
            frames from LINE */
            return(ECRXSTAT_CD_DROP);
        else
            return(ECRXSTAT_RECEIVING);
    }

    /* We have just received a SDLC frame */
    buffer_ptr = &fax2_ECM_line_buffer[fax2_ECM_linebufhead];

    /* If it is in error, deallocate and do nothing */
    if (buffer_ptr->status)
    {
        fax2_ECM_deallocate_line_buffer();
        return(ECRXSTAT_RECEIVING);
    }

    if (buffer_ptr->data[ECMT4_FCF]  == ECM_FCF_RCP_VALUE )
    {
        fax2_ECM_deallocate_line_buffer();
        fax2_cleanup_page();
        return(ECRXSTAT_RCP_RECEIVED);
    }

    /* Ignore line frame if not a count is invalid or if already received
        this frame (Remember to consider the CRC bytes!) or not an RCP frame*/
    if (buffer_ptr->data[ECMT4_FCF] != ECM_FCF_FCD_VALUE ||
        buffer_ptr->count >
        (uword) fax2_ECM_fsize_less1 + 1 + NUM_EC_FCD_HDR_FIELDS + CRC_BYTES ||
        !fax2_ECM_rx_frame_marked_unrcvd(buffer_ptr->data[ECMT4_FIF1]))
    {
        fax2_ECM_deallocate_line_buffer();
        return(ECRXSTAT_RECEIVING);
    }

    /* if we have no free frame ids to store this frame, just wait */
    if (!fax2_ECM_freeframeid.available)
        return(ECRXSTAT_RECEIVING);

    /* Finally! We have a FCD frame, with good CRC, of valid length,
    that we have not yet received, and we a have a free frame id to
    store it! */

    /* Mark frame id as being received */
    fax2_ECM_rx_mark_frame_rcvd(buffer_ptr->data[ECMT4_FIF1]);

    fax2_ECM_numxmitdframesless1 = buffer_ptr->data[ECMT4_FIF1]; /* LCD debug code */

    /* Copy FCD FIF into a free frame id */
    fax2_ECM_bm_to_buff(&(buffer_ptr->data[ECMT4_FIF2]),
                    fax2_ECM_fIDfromfnumber[buffer_ptr->data[ECMT4_FIF1]] =
                    fax2_ECM_freeframeidlist[fax2_ECM_freeframeid.index],
       (ubyte) ((uword) (buffer_ptr->count) - (NUM_EC_FCD_HDR_FIELDS + CRC_BYTES + 1) ) );

    /* Only the last frame should be less than 64 or 256 bytes! Thus, */
    tmp = buffer_ptr->count - (NUM_EC_FCD_HDR_FIELDS + CRC_BYTES + 1);
    if (tmp < ((uword) fax2_ECM_fsize_less1))
    {
        fax2_ECM_lastframe.framelengthless1 = tmp;
        fax2_ECM_lastframe.framenum = buffer_ptr->data[ECMT4_FIF1];
    }

    /* Update free id list */
    if (fax2_ECM_freeframeid.index == 0)
        fax2_ECM_freeframeid.available = FALSE;
    else
        --fax2_ECM_freeframeid.index;

    fax2_ECM_deallocate_line_buffer();
    return(ECRXSTAT_RECEIVING);
}

/*******************************************************************************
/
/	Routine: fax2_ECM_rx
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Called by the line I/O when receiving ECM SDLC frames;
/                    indicates reception of SDLC frame and expects a pointer
/                    to the next SDLC buffer to placed the next received frame
/                    (a NULL pointer indicates that there are no available
/                    SDLC buffers for the line I/O).
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte *fax2_ECM_rx(void)
{
/* NOTE: Before modifying, note that there are no potential problems with both
asynchronous read/write operations of variables being performed in this routine
and fax_ECM_rx_pp_bg() */

    /* If already in an "overrun" state, return NULL */
    if (fax2_ECM_linestat == EC_LINE_RX_OVERRUN)
        return(NULL);

    /* indicate that the current buffer has been received */
    fax2_ECM_linebufstat[fax2_ECM_linebuftail] = ECM_LINEBUFF_RECEIVED;

    /* update tail pointer for next line buffer reception */
    if (++fax2_ECM_linebuftail > MAX_EC_LINE_BUFFERS - 1)
        fax2_ECM_linebuftail = 0;

    if (fax2_ECM_linebufstat[fax2_ECM_linebuftail] != ECM_LINEBUFF_FREE)
    {
        /* there are no other line buffers ready to be transmitted */
        fax2_ECM_linestat = EC_LINE_RX_OVERRUN;
        return(NULL);
    }

    /* Give address of current line buffer to be transmitted */
    return ( (ubyte *) &fax2_ECM_line_buffer[fax2_ECM_linebuftail]);
}

/*******************************************************************************
/
/	Routine: fax2_ECM_rx_framecount
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Called when the framecount of the current partial page
/                    has been determined by the frame count contained
/                    in a received PPS-Q post message command.
/
/	Input Parameters: framecountless1
/                           (0-255) the framecount contained in the received
/                           PPS-Q message
/
/	Output Parameters: None
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void fax2_ECM_rx_framecount(ubyte framecountless1)
{
    fax2_ECM_lastframe.framenum = framecountless1;
}

/*******************************************************************************
/
/	Routine: fax2_ECM_rx_cq_ok
/
/	Author: RSA
/
/	Creation Date: 9/23/93
/
/	Description: Determines if the frames of an ECM partial page were
/                    received correctly.
/
/	Input Parameters: None
/
/	Output Parameters: return_code
/                           TRUE  frames in partial page were received
/                                 correctly (i.e., T.30 "copy quality" is okay)
/                           FALSE otherwise
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte fax2_ECM_rx_cq_ok(void)
{
    ubyte j;
    ubyte k;

    j = 0;
    k = fax2_ECM_lastframe.framenum >> 3;

    while (j < k)
    {
        if (fax2_ECM_PPR_FIF[j])
            return(FALSE);          /* found some nonzero flags! */
        ++j;
    }
    /* Archimedes compiler seems to be having problem if expression is not
       assigned to the temporary variable j (even though the assignment is
       not algorithmically necessary */
    if ( j =
        (fax2_ECM_PPR_FIF[k] << (7 - (fax2_ECM_lastframe.framenum & 0x03) )) )
        return(FALSE);

    return(TRUE);
}

