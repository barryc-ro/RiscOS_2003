/****************************************************************************
/
/   Copyright, 1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.  The information contained herein is solely
/   for the use of RSA.
/
/   File: f2x00pcr.c
/
/   Module Version: 4.04
/
/   Function: This file contains routines which implement the receive phase C
/             T30 protocol needed for fax class 2/2.0.
/
/   Product: FAX class 2 core code
/
/   History: f2x00pc.c 4.02
/            fx00cl2.c 3.99
/            f20x00cl.c 4.00
/                       4.03
/
/   Created: 9/21/92
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
****************************************************************************/
#include "sys_def.h"
#include "f2x_def.h"
#include "f2x_mem.h"
#include "f2x_pro.h"

ubyte fax2_phaseC_receive(void);
ubyte fax2_phaseC_transmit(void);

/******************************************************************************
/
/   Routine: fax2_phaseC_receive
/
/   Author: RSA
/
/   Creation Date: 09/21/92
/
/   Description: This routine will implement the class 2/2.0 T.30 phase C
/                functions.
/
/   Input Parameters: none
/
/   Output Parameters: ubyte    return code
/                      0        Stay online
/                      1        Stay in the parse state
/                      2        Go to parse and respond with
/                               OK message.
/                      3        Go to parse and respond with
/                               NO CARRIER message.
/                      4        Go to parse and respond with
/                               ERROR message.
/                      5        Go to hangup connection
/                      6        Go to online
/                      7        Go to parse and respond with
/                               FCERROR message.
/
/   Global Variables Changed: None
/
/   Users: fax2_bg()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax2_phaseC_receive(void)
{
    ubyte return_code;
    uword tx_size, tx_count, rx_size, rx_count, hold_size, hold_count;

    return_code = STAY_ONLINE;

    switch (fax2_sub_state)
    {
        case WAIT_FOR_DC2:
            /* wait for an indication form the APP to start receiving */
            while (fax_dte_from_num()) /* if there's a char from the APP */
            {
                fax2_dte_char = fax_dte_from_char();
                /* is it a go ahead and receive */
                if (fax2_dte_char == DC1 || fax2_dte_char == DC2)
                {
                    /* default the post page response and stats */
                    fax2_pp_response = MCF_PPR;
                    fax2_stats.LC = 0;
                    fax2_stats.BLC = 0;
                    fax2_stats.CBLC = 0;
                    fax2_stats.LBC = 0;
                    fax2_sub_state = RX_FIRST_DATA_BYTE;
                }
                if (fax2_dte_char == CAN) /* abort the mission */
                {
                    fax2_cleanup_page(); /* deconfigure */
                    fax2_hangup_status = FKS_ABORTED_CONNECTION;
                    fax2_sub_state = EXECUTE_CAN;
                }
            }
            break;

        case RX_FIRST_DATA_BYTE:
            /* look for the first non 0xFF character, this is the start EOL */
            fax2_line_char = 0xFF; /* incase a character wasn't read */
            /* while carrier, data in DCE, room in DTE, and character read 0xFF */
            while (modem_check_CD() && fax_line_from_num() &&
                   fax_dte_to_free() > 1 &&
                   (fax2_line_char = fax_line_from_char()) == 0xFF);/* do nothing */

            /* if a character with a zero bit was read */
            if (fax2_line_char != 0xFF)
            {
                /* if bit ordering is to be reversed */
                fax2_dte_char = fax2_data_bit_ordering ==
                                (fax2_class == STANDARD_592 ? REVERSE : DIRECT)
                                ? fax2_pc_reverse_table[fax2_line_char]
                                : fax2_line_char;

                /* write the character to the DTE transmit */
                fax_dte_to_char(fax2_dte_char);
                /* if DLE send a second DLE */
                if (fax2_dte_char == DLE)
                    fax_dte_to_char(DLE);

                /* if quality checking is active initialize the module */
                if (fax2_qc_rx)
                {
                    fax2_qc_init(fax2_line_char, fax2_negotiated.DF,
                                 fax2_5sec_byte_table[fax2_negotiated.BR > BR_14400 ?
                                 fax2_negotiated.BR-4 : fax2_negotiated.BR],
                                 fax2_scan_length_table[fax2_negotiated.WD]);
                    /* count every two character pairs */
                    fax2_second_char = 0;
                }

                /* start receiving the data to the APP */
                fax2_sub_state = RX_DATA;
            }
            else if (!modem_check_CD()) /* if carrier is lost */
            {
                fax2_cleanup_page(); /* terminate line side configurations */
                /* terminate the receive data stream */
                fax_dte_to_char(DLE);
                fax_dte_to_char(ETX);
                /* indicate default response and stats */
                fax2_response_page(PPR_RESPONSE, NULL);
                /* go to phase B state F */
                fax2_state = PHASE_B_RECEIVE;
                fax2_sub_state = RX_COMMAND_OR_DATA;
            }
            break;

        case RX_DATA:
            while (fax_line_from_num() && modem_check_CD())
            {
                if (fax_dte_to_free() > fax_line_from_num())
                    rx_count = fax_line_from_num();
                else
                    rx_count = fax_dte_to_free();

                /* while data in the DCE buffer and room in the DTE buffer */
                while (rx_count > 1)
                {
                    /* if quality checking and its the second char in the pair */
                    if (fax2_qc_rx && ++fax2_second_char == 2)
                    {
                        /* read the second character */
                        fax2_second_char = fax_line_from_char();
                        /* call quality checking with both data characters */
                        if (fax2_qc_process(fax2_line_char, fax2_second_char))
                        {
                            /* abort FAX if a five second scan was detected */
                            fax2_cleanup_page(); /* terminate line side configurations */
                            fax2_hangup_status = RX_C_5_SECOND_SCAN_ERROR;
                            fax2_sub_state = EXECUTE_CAN;
                            return(STAY_ONLINE);
                        }
                        /* assign the new char to be sent to the APP */
                        fax2_line_char = fax2_second_char;
                        /* reset the character pair count */
                        fax2_second_char = 0;
                    }
                    else
                        /* no quality checking or its the first byte in the pair */
                        fax2_line_char = fax_line_from_char();

                    /* if bit ordering is to be reversed */
                    fax2_dte_char = fax2_data_bit_ordering ==
                                    (fax2_class == STANDARD_592 ? REVERSE : DIRECT)
                                    ? fax2_pc_reverse_table[fax2_line_char]
                                    : fax2_line_char;

                    /* send the char to the APP */
                    fax_dte_to_char(fax2_dte_char);
                    rx_count--;
                    /* if its a DLE send another DLE */
                    if (fax2_dte_char == DLE)
                    {
                        fax_dte_to_char(DLE);
                        rx_count--;
                    }
                }
            }
            /* look for a command character from the APP */
            while (fax_dte_from_num()) /* look for a char from the APP */
            {
                fax2_dte_char = fax_dte_from_char();
                if (fax2_dte_char == CAN) /* abort the mission */
                {
                    fax2_cleanup_page();
                    fax2_hangup_status = FKS_ABORTED_CONNECTION;
                    fax2_sub_state = EXECUTE_CAN;
                    return(STAY_ONLINE);
                }
                /* if credit request and class 2.0 */
                else if (fax2_dte_char == '?' && fax2_class == STANDARD_592)
                {
                    /* get DTE buffer info */
                    fax_dte_info(&tx_size, &tx_count, &rx_size, &rx_count);
                    hold_size = tx_size;
                    hold_count = tx_count;
                    /* get DCE buffer info */
                    fax_line_info(&tx_size, &tx_count, &rx_size, &rx_count);
                    hold_size += rx_size;
                    hold_count += rx_count;
                    /* figure out percentage utilization */
                    hold_size = hold_count / (hold_size / 10);
                    hold_size = hold_size > 9 ? 9 : hold_size;
                    while (fax_dte_to_free() < 2);
                    /* indicate response to the APP */
                    fax_dte_to_char(DLE);
                    fax_dte_to_char(hold_size + '0');
                }
            }

            /* if the DTE and DCE buffers are empty, indicate to the APP */
            if (fax2_class == STANDARD_592 &&
                (fax_line_from_num() + fax_dte_to_num())
                < EMPTY_BUFFERS_COUNT && fax_dte_flowed_on())
            {
                fax_dte_to_char(DLE);
                fax_dte_to_char(DC2);
            }

            /* if carrier is lost */
            if (!modem_check_CD()) /* is carrier lost */
            {
                fax2_cleanup_page(); /* cleanup line configurations */
                fax2_sub_state = FLUSH_LINE; /* get all data from DCE buffers */
            }
            break;

        case FLUSH_LINE:
            /* while data in the DCE buffer and room in the DTE buffer */
            while (fax_line_from_num() && fax_dte_to_free() > 1)
            {
                /* if quality checking and its the second char in the pair */
                if (fax2_qc_rx && ++fax2_second_char == 2)
                {
                    /* read the second character */
                    fax2_second_char = fax_line_from_char();
                    /* call quality checking with both data characters */
                    if (fax2_qc_process(fax2_line_char, fax2_second_char))
                    {
                        /* abort FAX if a five second scan was detected */
                        fax2_cleanup_page(); /* terminate line side configurations */
                        fax2_hangup_status = RX_C_5_SECOND_SCAN_ERROR;
                        fax2_sub_state = EXECUTE_CAN;
                        return(STAY_ONLINE);
                    }
                    /* assign the new char to be sent to the APP */
                    fax2_line_char = fax2_second_char;
                    /* reset the character pair count */
                    fax2_second_char = 0;
                }
                else
                    /* no quality checking or its the first byte in the pair */
                    fax2_line_char = fax_line_from_char();

                /* if bit ordering is to be reversed */
                fax2_dte_char = fax2_data_bit_ordering ==
                                (fax2_class == STANDARD_592 ? REVERSE : DIRECT)
                                ? fax2_pc_reverse_table[fax2_line_char]
                                : fax2_line_char;

                /* send the char to the APP */
                fax_dte_to_char(fax2_dte_char);
                /* if its a DLE send another DLE */
                if (fax2_dte_char == DLE)
                    fax_dte_to_char(DLE);
            }

            /* look for a command character from the APP */
            while (fax_dte_from_num())
            {
                fax2_dte_char = fax_dte_from_char();
                if (fax2_dte_char == CAN) /* abort the mission */
                {
                    fax2_hangup_status = FKS_ABORTED_CONNECTION;
                    fax2_sub_state = EXECUTE_CAN;
                    return(STAY_ONLINE);
                }
            }

            /* if the DCE buffer is empty and there's some room in the DTE */
            if (!fax_line_from_num() && fax_dte_to_free() > 2)
            {
                /* terminate the data stream */
                fax_dte_to_char(DLE);
                fax_dte_to_char(ETX);

                /* if quality checking active */
                if (fax2_qc_rx)
                {
                    /* if incomplete pair */
                    if (fax2_second_char == 1)
                        /* 0xFF will create a bad scan line that wont be counted */
                        fax2_qc_process(fax2_line_char, 0xFF);

                    /* get the accumulated stats */
                    fax2_qc_terminate(&fax2_stats.LC, &fax2_stats.BLC,
                                      &fax2_stats.CBLC);
                    /* get the number of lost chars due to overrun */
                    fax2_stats.LBC = fax_line_lost_chars();

                    /* calculate the percentage of good lines */
                    hold_count = ((ulong)100 * ((ulong)fax2_stats.LC -
                                 (ulong)fax2_stats.BLC)) / (ulong)fax2_stats.LC;
                    /* if APP configured quality checking parameters */
                    if (fax2_class == STANDARD_592 &&
                        (fax2_qt_pgl || fax2_qt_cbl))
                    {
                        /* if less than the acceptable % of good lines */
                        if (fax2_qt_pgl > hold_count)
                            /* retransmit page after retraining */
                            fax2_pp_response = RTN_PPR;
                        /* if # consecutive bad lines is above threshold */
                        else if (fax2_qt_cbl < fax2_stats.CBLC)
                            /* retransmit page after retraining */
                            fax2_pp_response = RTN_PPR;
                    }
                    else /* APP did not configure quality threshold parameters */
                    {
                        /* if less than the acceptable % of good lines */
                        if (QT_GOOD_LINES_PERCENT > hold_count)
                            /* retransmit page after retraining */
                            fax2_pp_response = RTN_PPR;
                        /* if # consecutive bad lines is above threshold */
                        else if (QT_BAD_LINE_CONSEC < fax2_stats.CBLC)
                            /* retransmit page after retraining */
                            fax2_pp_response = RTN_PPR;
                        /* if # bad lines is above threshold */
                        else if (QT_BAD_LINES < fax2_stats.BLC)
                            /* accept page but retrain before next page */
                            fax2_pp_response = RTP_PPR;
                    }
                }

                /* indicate PPR and stats to the APP */
                fax2_response_page(PPR_RESPONSE, NULL);
                /* go to phase B state F */
                fax2_state = PHASE_B_RECEIVE;
                fax2_sub_state = RX_COMMAND_OR_DATA;
            }
            break;

        case EXECUTE_CAN:
            /* complete the reception as quick as possible */
            /* can't clear the dte tx buffer because a DLE DLE might be split */
            /* terminate the data stream */
            fax_dte_to_char(DLE);
            fax_dte_to_char(ETX);
            /* send a DCN and terminate the connection */
            fax2_state = PHASE_E;
            fax2_sub_state = SCHEDULE_DCN_PACKET;
            break;
    }
    return(return_code);
}

