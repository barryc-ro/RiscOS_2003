/****************************************************************************
/
/   Copyright, 1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.  The information contained herein is solely
/   for the use of RSA.
/
/   File: f2x00pct.c
/
/   Module Version: 4.04
/
/   Function: This file contains routines which implement the receive phase C
/             T30 protocol needed for fax class 2/2.0.
/
/   Product: FAX class 2 core code
/
/   History: f2x00pc.c  4.02
/            fx00cl2.c  3.99
/            f20x00cl.c 4.00
/                       4.03
/
/   Created: 9/21/92
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
****************************************************************************/
#include "sys_def.h"
#include "f2x_def.h"
#include "f2x_mem.h"
#include "f2x_pro.h"

ubyte fax2_phaseC_transmit(void);
ubyte fax2_find_EOL(ubyte, uword *);

/******************************************************************************
/
/   Routine: fax2_phaseC_transmit
/
/   Author: RSA
/
/   Creation Date: 09/21/92
/
/   Description: This routine will implement the class 2/2.0 T.30 phase C
/                transmit functions.
/
/   Input Parameters: none
/
/   Output Parameters: ubyte    return code
/                      0        Stay online
/                      1        Stay in the parse state
/                      2        Go to parse and respond with
/                               OK message.
/                      3        Go to parse and respond with
/                               NO CARRIER message.
/                      4        Go to parse and respond with
/                               ERROR message.
/                      5        Go to hangup connection
/                      6        Go to online
/                      7        Go to parse and respond with
/                               FCERROR message.
/
/   Global Variables Changed: None
/
/   Users: fax2_bg()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax2_phaseC_transmit(void)
{
    ubyte return_code;
    uword tx_size, tx_count, rx_size, rx_count, hold_size, hold_count;

    return_code = STAY_ONLINE;

    switch (fax2_sub_state)
    {
        case CONFIGURE_TX_DATA:
            if (fax2_configure_tx_data_page()) /* configure line side for transmission */
            {
                /* indicate readiness to transmit data */
                fax2_response_page(CONNECT_RESPONSE, NULL);
                /* wait until the complete response has been sent */
                while (fax_dte_to_num());
                /* turn off packet protocol */
                fax_dte_packet_protocol(OFF);
                fax_dte_to_char(XON);
                fax2_last_data_dle = FALSE; /* reset DLE indication */
                /* reset procedure interrupt request from the APP */
                fax2_local_generated_interrupt = FALSE;
                /* start the first scan line at position 0 */
                fax2_scan_index = 0;
                /* the EOL for the first scan line has not been located */
                fax2_found_EOL = FALSE;
                /* no EOL zero bits at the start */
                fax2_EOL_zero_count = 0;
                /* the APP has not terminated the current page */
                fax2_pp_command = NO_PPC;
                /* start out by buffering the first scan line */
                fax2_sub_state = TX_DATA_FILL_SCAN;
            }
            break;

        case TX_DATA_FILL_SCAN:
            /* while data in DTE buffer and EOL not found */
            while (fax_dte_from_num() && !fax2_found_EOL)
            {
                /* get char from DTE buffer */
                fax2_dte_char = fax_dte_from_char();
                /* check bit ordering */
                if (fax2_data_bit_ordering == DIRECT)
                    /* if direct then don't change */
                    fax2_line_char = fax2_dte_char;
                else
                    /* if reverse, translate data for reverse bit ordering */
                    fax2_line_char = fax2_reverse_table[fax2_dte_char];

                if (fax2_last_data_dle) /* if last data was DLE */
                {
                    fax2_last_data_dle = FALSE; /* last data not DLE */
                    switch (fax2_dte_char)
                    {
                        case DLE: /* if DLE DLE send just one DLE */
                            /* look for the EOL */
                            fax2_found_EOL = fax2_find_EOL(fax2_line_char, &fax2_EOL_zero_count);
                            /* if an EOL was detected then send the scan line */
                            if (fax2_found_EOL)
                                /* save the EOL until the next scan is buffered */
                                fax2_last_EOL_byte = fax2_line_char;
                            else
                                /* store the scan line character */
                                fax2_scan_array[fax2_scan_index++] = fax2_line_char;
                            break;
                        case SUB: /* if DLE SUB send DLE DLE */
                            /* get the valid line data */
                            if (fax2_data_bit_ordering == DIRECT)
                                fax2_line_char = DLE;
                            else
                                fax2_line_char = fax2_reverse_table[DLE];

                            /* look for the EOL */
                            fax2_found_EOL = fax2_find_EOL(fax2_line_char, &fax2_EOL_zero_count);
                            /* if an EOL was detected then send the scan line */
                            if (fax2_found_EOL)
                            {
                                /* save the EOL until the next scan is buffered */
                                fax2_last_EOL_byte = fax2_line_char;
                                /* the first byte after the EOL is a DLE */
                                fax2_last_data_dle = TRUE;
                            }
                            else
                            {
                                /* store the DLE scan line character */
                                fax2_scan_array[fax2_scan_index++] = fax2_line_char;
                                /* a DLE after a DLE will not find an EOL */
                                /* the zero count for the second DLE will be */
                                /* the same so don't call fax2_find_EOL() */
                                /* store the second DLE scan line character */
                                fax2_scan_array[fax2_scan_index++] = fax2_line_char;
                            }
                            break;
                        case '!': /* DLE ! the APP requests procedure interrupt */
                            fax2_local_generated_interrupt = TRUE;
                            break;
                        case ',': /* DLE , the APP has more pages to send */
                            fax2_pp_command = MPS_PPC;
                            break;
                        case ';': /* DLE ; the APP has more documents to send */
                            fax2_pp_command = EOM_PPC;
                            break;
                        case '.': /* DLE . the APP is finished transmitting */
                        case ETX: /* DLE ETX the APP is finished transmitting */
                            fax2_pp_command = EOP_PPC;
                            break;
                        case '?': /* credit status request */
                            /* get the DTE receive buffer size and count */
                            fax_dte_info(&tx_size, &tx_count, &rx_size,&rx_count);
                            hold_size = rx_size;
                            hold_count = rx_count;
                            /* get the DCE transmit buffer size and count */
                            fax_line_info(&tx_size, &tx_count, &rx_size, &rx_count);
                            hold_size += tx_size;
                            hold_count += tx_count;
                            /* calculate available data byte locations */
                            hold_size = hold_size - hold_count;
                            /* respond to the APP */
                            fax2_respond_hex_word_page(hold_size);
                            fax_dte_to_char(CR);
                            break;
                        default: /* DLE pair not implemented, discard */
                            break;
                    }
                }
                /* if DLE then setup to receive the command */
                else if (fax2_dte_char == DLE)
                    fax2_last_data_dle = TRUE;
                else /* just a regular piece of data */
                {
                    /* look for the EOL */
                    fax2_found_EOL = fax2_find_EOL(fax2_line_char, &fax2_EOL_zero_count);
                    /* if an EOL was detected then send the scan line */
                    if (fax2_found_EOL)
                        /* save the EOL until the next scan is buffered */
                        fax2_last_EOL_byte = fax2_line_char;
                    else
                        /* store the scan line character */
                        fax2_scan_array[fax2_scan_index++] = fax2_line_char;
                }
            } /* end while */

            /* if the APP finished sending the page */
            if (fax2_pp_command != NO_PPC)
            {
                /* the last piece sent is the RTC which doesn't need minimum */
                /* scan time requirements */
                /* initialize the index to run through the scan line */
                fax2_flush_scan_index = 0;
                /* flush the scan line to the DCE buffer */
                fax2_sub_state = TX_DATA_FLUSH_SCAN;
            }

            /* if the zero fill position in the scan line has been found */
            if (fax2_found_EOL)
            {
                /* the EOL for the next scan line has not been located */
                fax2_found_EOL = FALSE;
                /* look to see if there was an EOL without a scan run or fill */
                /* if so, don't fill in for minimum scan time requirements */
                /* this check will not work as well with 2-D due to the tag bit */
                if (fax2_scan_index == 1 || (fax2_scan_index == 2 && !fax2_scan_array[1]))
                {
                    /* initialize the index to run through the scan line */
                    fax2_flush_scan_index = 0;
                    /* flush the scan line to the DCE buffer */
                    fax2_sub_state = TX_DATA_FLUSH_SCAN;
                }
                else
                {
                    /* lookup the minmum data bytes needed in the scan line */
                    fax2_minimum_scan_length = fax2_minimum_scan_table
                        [fax2_negotiated.BR > BR_14400 ?
                        fax2_negotiated.BR - 4 : fax2_negotiated.BR]
                        [fax2_negotiated.ST ? (fax2_negotiated.ST >> 1) + 1 : 0];
                    /* make sure the minimum scan time is met */
                    fax2_sub_state = FULFILL_MINIMUM_SCAN;
                }
            }
            break;

        case FULFILL_MINIMUM_SCAN:
            /* the scan length should not include the first byte in the buffer */
            /* this byte includes part of the previous scan EOL */
            /* zero byte fill the scan line until the minimun is reached */
            while (fax2_scan_index - 1 < fax2_minimum_scan_length)
                fax2_scan_array[fax2_scan_index++] = 0;

            /* initialize the index to run through the scan line */
            fax2_flush_scan_index = 0;
            /* flush the scan line to the DCE buffer */
            fax2_sub_state = TX_DATA_FLUSH_SCAN;
            break;
        case TX_DATA_FLUSH_SCAN:
            /* while more data in the scan buffer and room in the DCE buffer */
            while (fax2_flush_scan_index < fax2_scan_index && fax_line_to_free())
                fax_line_to_char(fax2_scan_array[fax2_flush_scan_index++]);

            /* if the scan line buffer has been emptied */
            if (fax2_flush_scan_index == fax2_scan_index)
            {
                /* save the byte containing the end of the EOL */
                fax2_scan_array[0] = fax2_last_EOL_byte;
                /* fill the scan starting at the next location */
                fax2_scan_index = 1;
                /* if the EOL was found on a DLE SUB command */
                if (fax2_last_data_dle)
                {
                    fax2_last_data_dle = FALSE;
                    /* store the second DLE byte */
                    fax2_scan_array[1] = fax2_last_EOL_byte;
                    fax2_scan_index = 2;
                }

                /* if the end of the page was not reached */
                if (fax2_pp_command == NO_PPC)
                    /* repeate the scan line buffering process */
                    fax2_sub_state = TX_DATA_FILL_SCAN;
                else
                {
                    /* if class 2 send the RTC */
                    if (fax2_class == STANDARD_2388)
                        fax2_send_RTC_page(); /* send the RTC sequence (6 EOL) */
                    /* the end of the present page was reached */
                    fax2_sub_state = FLUSH_LINE;
                }
            }
            break;

        case FLUSH_LINE:
            /* if the DCE buffer has been emptied */
            if (!fax_line_to_num())
            {
                /* allow time for the data to propegate before dropping carrier */
                fax2_utility_timer = DELAY_DATA_PROPAGATE;
                fax2_sub_state = WAIT_TO_TERMINATE;
            }
            break;

        case WAIT_TO_TERMINATE:
            /* if the propegate timer has expired */
            if (!fax2_utility_timer)
            {
                /* wait until the complete response has been sent */
                while (fax_dte_to_num());
                /* turn off packet protocol */
                fax_dte_packet_protocol(ON);
                /* terminate the line side configurations */
                fax2_cleanup_page();
                /* if class 2 send the RTC */
                if (fax2_class == STANDARD_2388)
                {
                    /* setup a timeout for receiveing the +FET command */
                    fax2_interaction_timer = fax2_timeout * TENTHS_SECOND;
                    /* setup command flag indication */
                    fax2_received_command = EMPTY_COMMAND;
                    fax2_sub_state = WAIT_FOR_FET;
                    /* respond with OK to indicate completion of transmit data */
                    return_code = GOTO_PARSE_OK;
                }
                else
                {
                    /* if the APP asked for a procedure interrupt */
                    if (fax2_local_generated_interrupt)
                        /* indicate this in the post page command */
                        fax2_pp_command += 3;
                    /* transition to phase D to receive the post page response */
                    fax2_state = PHASE_D_TRANSMIT;
                    fax2_sub_state = SCHEDULE_PP_COMMAND;
                }
            }
            break;

        case WAIT_FOR_FET:
            if (fax2_received_command == FET_COMMAND)
            {
                /* post page response has been assigned by the +FET command */
                fax2_state = PHASE_D_TRANSMIT;
                fax2_sub_state = SCHEDULE_PP_COMMAND;
                /* the +FET command toke us online, and we need to stay there */
            }
            else if (!fax2_interaction_timer) /* have we timedout on the +FET ? */
            {
                /* if timedout send an end of procedure post page command */
                fax2_pp_command = EOP_PPC;
                /* transission to T.30 phase D */
                fax2_state = PHASE_D_TRANSMIT;
                fax2_sub_state = SCHEDULE_PP_COMMAND;
                fax2_configure_dte = NO_FLOW;
                /* put the ACU back online since we gave up on the command */
                /* and we need the DTE port to continue the connection */
                return_code = GOTO_ONLINE_BG;
            }
            else
                return_code = STAY_PARSE;

            break;
    }
    return(return_code);
}

/******************************************************************************
/
/   Routine: fax2_find_EOL
/
/   Author: RSA
/
/   Creation Date: 01/26/93
/
/   Description: This routine will detect the presence of EOL's in the data
/                path.
/
/   Input Parameters: ubyte     data
/                               T.4 data byte being transfered
/                     ubyte *   zero_count_ptr
/                               address of a variable containing the current
/                               consecutive zero bit count
/
/   Output Parameters: ubyte    found_EOL
/                      FALSE    EOL not found
/                      TRUE     EOL completed in the data byte
/
/   Global Variables Changed: None
/
/   Users: fax2_phaseC_transmit_quality()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax2_find_EOL(ubyte data, uword *zero_count_ptr)
{
    ubyte found_EOL;

    /* assume no EOL yet ... */
    found_EOL = FALSE;

    /* count the next collection of zero bits in the byte */
    /* don't overflow the zero count. 11 zero's or more are sufficient for EOL */
    if (*zero_count_ptr < 11)
        /* add the number of leading zero's in the data byte to the current count */
        *zero_count_ptr += fax2_leading_zeros_table[data];

    /* look for EOL :  EOL1 = 0000000000011  EOL2 = 0000000000010 */
    /* if the data byte has a 1 bit, then there's the possibility of an EOL */
    if (data)
    {
        /* if 11 or more zero's have been counted, then we've found an EOL */
        if (*zero_count_ptr >= 11)
            found_EOL = TRUE;

        /* since a 1 bit was present in the data, the zero count needs to be */
        /* restarted with the number of trailing zero bits in the data */
        /* this is independent of whether an EOL was detected */
        *zero_count_ptr = fax2_trailing_zeros_table[data];
    }

    return(found_EOL);
}


