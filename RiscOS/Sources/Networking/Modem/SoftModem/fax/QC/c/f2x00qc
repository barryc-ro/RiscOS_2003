/****************************************************************************
/
/   Copyright, 1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.  The information contained herein is solely
/   for the use of RSA.
/
/   File: f2x00qc.c
/
/   Module Version: 4.04
/
/   Function: This file contains routines which implement T.4 image quality
/             checking needed for fax class 2 (TIA/EIA PS-2388 and 592).
/
/   Product: Class 2 FAX Module.
/
/   History: 4.03
/
/   Created: 2/4/93
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
****************************************************************************/

#include "sys_def.h"

#include "f2x_def.h"
#include "f2x_mem.h"
#include "f2x_pro.h"

ubyte fax2_qc_installed(void);
void fax2_qc_init(ubyte, ubyte, uword, uword);
void fax2_qc_terminate(uword *, uword *, uword *);
void fax2_replenish_cw(ubyte);
ubyte fax2_qc_process(ubyte, ubyte);

/******************************************************************************
/
/   Routine: fax2_qc_installed
/
/   Author: RSA
/
/   Creation Date: 6/24/93
/
/   Description: This routine will indicate the presence of quality checking.
/
/   Input Parameters: None
/
/   Output Parameters: ubyte    TRUE
/
/   Global Variables Changed: None
/
/   Users: fax2_execute_command(), fax20_execute_command(), fax2_init()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax2_qc_installed(void)
{
    return(TRUE);
}

/******************************************************************************
/
/   Routine: fax2_qc_init
/
/   Author: RSA
/
/   Creation Date: 2/4/93
/
/   Description: This routine will initialize the quality checking variables.
/                The first data pattern is also accepted.
/
/   Input Parameters: ubyte     initial image data
/                               the leading one bits should be discarded
/                     ubyte     encoding scheme
/                     0         1-D
/                     1         2-D
/                     2         uncompressed
/                     uword     maximum scan byte count
/                     uword     negotiated scan length
/
/   Output Parameters: none
/
/   Global Variables Changed: Class 2 FAX quality check variables
/
/   Users: fax2_phaseC_receive_quality()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
void fax2_qc_init(ubyte first_data_byte, ubyte encoding_scheme,
                  uword max_scan_byte_count, uword negotiated_scan_length)
{
/*    fax2_qc_generate_tables();  */

    /* save the encoding scheme negotiated by T.30 */
    fax2_encoding_scheme = encoding_scheme;
    /* the first piece of data received that has a zero bit */
    /* this supposably is the first zero bit in the leading EOL */
    fax2_cw_data = first_data_byte;
    fax2_cw_count = 8;
    /* remove all the leading one bits in front of the first zero bit */
    for ( ; fax2_cw_data & 1 ; fax2_cw_data >>= 1, fax2_cw_count++);
    /* the buffer code word is empty at this time */
    fax2_bcw_count = 0;
    /* if the page is encoded properly, the leading EOL will */
    /* be detected before any 1-D encoding */
    fax2_qc_state = ONE_D_DECODE;
    /* set the good encode found flag */
    /* make sure first EOL does not indicate a line in error */
    fax2_found_encode = TRUE;
    /* this indicates the 11 zero's have not been detected */
    fax2_qc_EOL_state = EOL_NOT_LOOKING;
    /* 1-D encoding starts with a white run */
    fax2_cl_table = (ubyte *)fax2_white_cl_table;
    fax2_rl_table = (ubyte *)fax2_white_rl_table;
    /* start out with a new scan line */
    fax2_scan_byte_count = 0;
    /* maximum number of bytes allowed in a scan line */
    fax2_max_scan_byte_count = max_scan_byte_count;
    /* negtiated scan line length */
    fax2_negotiated_scan_length = negotiated_scan_length;
    /* make sure the initial EOL is detected as a good scan line */
    fax2_rl_count = negotiated_scan_length;
    /* initialize the line counters to zero */
    fax2_line_count = 0;
    fax2_bad_line_count = 0;
    fax2_consec_bad_line_count = 0;
    fax2_max_consec_bad_line_count = 0;
}

/******************************************************************************
/
/   Routine: fax2_qc_terminate
/
/   Author: RSA
/
/   Creation Date: 2/4/93
/
/   Description: This routine will complete the quality checking algorithm
/                returning image statistics collected.
/
/   Input Parameters: uword *   pointer to line count variable
/                     uword *   pointer to bad line count variable
/                     uword *   pointer to consecutive bad line count variable
/
/   Output Parameters: The collected values returned in the input parameters
/
/   Global Variables Changed: none
/
/   Users: fax2_phaseC_receive_quality()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
void fax2_qc_terminate(uword *lc_ptr, uword *blc_ptr, uword *cblc_ptr)
{
    /* subtract the first leading EOL */
    *lc_ptr = fax2_line_count - 1;
    /* the data received after the RTC hopefully did not include an EOL */
    *blc_ptr = fax2_bad_line_count;
    /* the longest stretch of bad lines */
    *cblc_ptr = fax2_max_consec_bad_line_count;
}

/******************************************************************************
/
/   Routine: fax2_replenish_cw
/
/   Author: RSA
/
/   Creation Date: 2/4/93
/
/   Description: This routine will update the missing bits in the working
/                code word variable with bits from the buffer code word
/                variable.
/
/   Input Parameters: ubyte     number of bits to be replenished
/
/   Output Parameters: none
/
/   Global Variables Changed: fax2_cw_data, fax2_bcw_data, fax2_cw_count
/                             fax2_bcw_count
/
/   Users: fax2_qc_process()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
void fax2_replenish_cw(ubyte cw_bit_count)
{
    /* align the buffer bits and OR them in */
    fax2_cw_data = fax2_cw_data | (fax2_bcw_data << (16 - cw_bit_count));

    /* if there's enough buffer bits to fill the code word data variable */
    if (cw_bit_count < fax2_bcw_count)
    {
        /* shift out the used bit out of the buffer code word */
        fax2_bcw_data >>= cw_bit_count;
        /* keep track of the valid bits in the buffer code word */
        fax2_bcw_count -= cw_bit_count;
        /* the code word data doesn't have any missing bits */
        fax2_cw_count = 0;
    }
    else /* not enough bits in the buffer to replenish all the missing bits */
    {
        /* the missing bit count is the outstanding bits minus the */
        /* that were replenished */
        fax2_cw_count = cw_bit_count - fax2_bcw_count;
        /* the buffer code word is now empty */
        fax2_bcw_count = 0;
        fax2_bcw_data = 0;
    }
}

/******************************************************************************
/
/   Routine: fax2_qc_process
/
/   Author: RSA
/
/   Creation Date: 2/4/93
/
/   Description: This routine will receive two new image data byte to check
/                It will append them to the previously remaining image data
/                and check image code words until the image data remaining
/                is less the 16 bits in length.
/                This routine supports 1-D, 2-D and uncompressed encoding
/                schemes. It will collect line statistics required by
/                the class 2.0 (TIA/EIA 592) specification.
/
/   Input Parameters: ubyte     first image data byte
/                     ubyte     second image data byte
/
/   Output Parameters: ubyte    FALSE not over five second scan line
/                               TRUE over five second scan line
/
/   Global Variables Changed: Class 2 FAX quality check variables
/
/   Users: fax2_phaseC_receive_quality()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax2_qc_process(ubyte first_data_byte, ubyte second_data_byte)
{
    ubyte i, code_length, run_length, temp_cw_data, over_five_second_scan;
    uword cw_bit_mask;

    /* store the two data bytes in the buffer code word */
    /* this variable must have been empty to exit this function */
    fax2_bcw_data = second_data_byte;
    fax2_bcw_data = (fax2_bcw_data << 8) | first_data_byte;
    fax2_bcw_count = 16;
    /* update the working code word */
    fax2_replenish_cw(fax2_cw_count);

    /* a scan line longer than 5 seconds has not been detected */
    over_five_second_scan = FALSE;
    /* count the number of bytes in a scan line */
    /* this will determine if a scan line is longer than 5 seconds */
    fax2_scan_byte_count += 2;

    /* while the working code word is full (i.e. 16 bits of undecoded data) */
    while (!fax2_cw_count)
    {
        /* if scan line not in error and is longer than 5 seconds */
        if (fax2_qc_EOL_state < EOL_ZEROS_BAD &&
            fax2_scan_byte_count > fax2_max_scan_byte_count)
        {
            /* indicate the error indication in the return code */
            over_five_second_scan = TRUE;
            /* bad scan line, start searching for the EOL */
            fax2_qc_EOL_state = fax2_qc_EOL_state == EOL_NOT_LOOKING ?
                                EOL_NO_ZEROS_BAD : EOL_ZEROS_BAD;
            /* clear the scan count incase FAX decides to continue receiving */
            fax2_scan_byte_count = 0;
        }
        /* if a bad line detected and 11 zeros not yet detected */
        if (fax2_qc_EOL_state == EOL_NO_ZEROS_BAD)
        {
            /* look for 11 consecutive zeros in the code word */
            for (i = 0 ; i < 6 && fax2_cw_data & 0x7FF ; fax2_cw_data >>= 1, i++);

            /* if 11 zero's were found */
            if (i < 6)
            {
                /* 11 zeros detected for the bad scan line */
                fax2_qc_EOL_state = EOL_ZEROS_BAD;
                fax2_cw_data >>= 11;
                i += 11;
            }

            /* update the working code word with new data bits */
            fax2_replenish_cw(i);
            /* skip to the end of the while loop */
            continue;
        }

        /* if 11 zeros are detected or where detected */
        if (!(fax2_cw_data & 0x7FF) || fax2_qc_EOL_state != EOL_NOT_LOOKING)
        {
            /* look for a one bit in all the code word except for the last bit */
            /* this will be needed to determine the tag bit in 2-D */
            cw_bit_mask = 0x7FFF;
            /* if 11 zeros where not previously detected */
            if (fax2_qc_EOL_state == EOL_NOT_LOOKING)
            {
                /* looking for a termination of an EOL for a good scan line */
                fax2_qc_EOL_state = EOL_ZEROS_GOOD;
                /* loss the 11 zero bits */
                fax2_cw_data >>= 11;
                fax2_cw_count = 11;
                /* 11 bits are gone, 5 left, so 4 can be used to look for a one bit */
                cw_bit_mask = 0x000F;
            }
            /* if there is a one bit in the code word */
            if (fax2_cw_data & cw_bit_mask)
            {
                /* find the one bit */
                for ( ; !(fax2_cw_data & 1) ; fax2_cw_data >>= 1, fax2_cw_count++);
                /* get rid of the one bit */
                fax2_cw_data >>= 1;
                fax2_cw_count++;

                /* setup the white decode tables */
                fax2_cl_table = (ubyte *)fax2_white_cl_table;
                fax2_rl_table = (ubyte *)fax2_white_rl_table;

                /* if a bad scan line or a plain EOL was detected */
                if (fax2_qc_EOL_state == EOL_ZEROS_BAD || !fax2_found_encode ||
                    (fax2_qc_state == ONE_D_DECODE &&
                    fax2_rl_count != fax2_negotiated_scan_length))
                    /* an illegal scan line was detected */
                    fax2_consec_bad_line_count++;
                /* if a good scan line was detected */
                else
                {
                    /* bad lines are only counted if a good line is detected after them */

                    /* add the number of bad lines since the last good line */
                    /* to the over all bad line count */
                    fax2_bad_line_count += fax2_consec_bad_line_count;

                    /* add the number of bad lines since the last good line */
                    /* plus the current good line to the over all line count */
                    fax2_line_count+= fax2_consec_bad_line_count+ 1;

                    /* if the latest consecutive bad line count is */
                    /* larger than the maximum recorded */
                    if (fax2_consec_bad_line_count > fax2_max_consec_bad_line_count)
                        /* update the maximum bad line count */
                        fax2_max_consec_bad_line_count = fax2_consec_bad_line_count;

                    /* a good line was found, the current consec bad is zero */
                    fax2_consec_bad_line_count = 0;
                }

                /* are we decoding 1-D */
                if (fax2_encoding_scheme == DF_MH)
                {
                    /* setup the next state */
                    fax2_qc_state = ONE_D_DECODE;
                }
                else /* 2-D or uncompressed decoding */
                {
                    /* the tag bit of the EOL indicates the next line encoding */
                    fax2_qc_state = fax2_cw_data & 1 ? ONE_D_DECODE : TWO_D_DECODE;
                    /* get rid of the tag bit */
                    fax2_cw_data >>= 1;
                    fax2_cw_count++;
                    /* scan lines always start with a white run */
                    fax2_mm_flag = WHITE;
                }

                /* start out with a new scan line */
                fax2_scan_byte_count = 0;
                fax2_rl_count = 0;
                /* reset the good encode found flag */
                fax2_found_encode = FALSE;
                /* we are no longer searching for a EOL */
                fax2_qc_EOL_state = EOL_NOT_LOOKING;
                /* refill the used up code word bits */
                fax2_replenish_cw(fax2_cw_count);
            }
            else
            {
                /* the fax2_bcw_data must have less than 16 bits */
                /* this is an indirect premise of this function */
                /* this insures room for the unused working code word bit */
                /* keep track of the last unused data bit in the code word */
                if (fax2_cw_data & (cw_bit_mask << 1))
                    /* OR in a one if its a one */
                    fax2_cw_data = (fax2_bcw_data << 1) | 1;
                else
                    /* leave it if its a zero */
                    fax2_cw_data = fax2_bcw_data << 1;
                /* there were 15 bit to be refilled */
                fax2_cw_count = 15 - fax2_bcw_count;
                /* there are no more buffer code word bits */
                fax2_bcw_data = 0;
                fax2_bcw_count = 0;
            }
        }
        else /* we are decoding a scan line */
            switch (fax2_qc_state)
            {
                case ONE_D_DECODE: /* 1-D scan line */
                case TWO_D_MM_DECODE: /* 2-D horizontal scan */
                    /* get the code length */
                    code_length = fax2_cl_table[(fax2_cw_data >> 1) & 0xFFF];
                    code_length = (ubyte)fax2_cw_data & 1 ? code_length >> 4 :
                                                           code_length & 0x0F;
                    /* if the code word is valid */
                    if (code_length < 14)
                    {
                        /* indicate a good encoding was detected */
                        fax2_found_encode = TRUE;
                        /* get the run length (number of pixels represented) */
                        run_length = fax2_rl_table[fax2_cw_data & 0x1FFF];
                        /* we are allowing back to back makeup codes */
                        /* if it wasn't a makeup code word */
                        if (run_length < 64) /* 63 == longest non-makeup encode */
                        {
                            /* increment the scan length */
                            fax2_rl_count += run_length;

                            /* if 2-D horizontal and the count is done */
                            if (fax2_qc_state == TWO_D_MM_DECODE && !--fax2_mm_count)
                                /* go back to 2-D decoding */
                                fax2_qc_state = TWO_D_DECODE;
                            /* toggle the code length and makeup tables */
                            if (fax2_cl_table == fax2_white_cl_table)
                            {
                                fax2_cl_table = (ubyte *)fax2_black_cl_table;
                                fax2_rl_table = (ubyte *)fax2_black_rl_table;
                            }
                            else
                            {
                                fax2_cl_table = (ubyte *)fax2_white_cl_table;
                                fax2_rl_table = (ubyte *)fax2_white_rl_table;
                            }
                        }
                        else
                        /* makeup code */
                        {
                            /* make up codes start at 64 run length */
                            /* and increase in multiples of 64 */
                            /* makeup run length = Nth makeup code * 64 */
                            fax2_rl_count += ((word)run_length - 63) << 6;
                        }

                        /* shift out the used code word bits */
                        fax2_cw_data >>= code_length;
                        /* replenish the used bits */
                        fax2_replenish_cw(code_length);
                    }
                    /* if the code word was in error */
                    /* look to see if its an uncompressed entrance code */
                    else if (fax2_encoding_scheme == DF_UM &&
                             (fax2_cw_data & 0xFFF) == 0xF00)
                    {
                        /* switch to uncompressed decoding */
                        fax2_qc_state = UNCOMPRESSED_DECODE;
                        /* when done, return to 1-D decoding */
                        fax2_qc_return_state = ONE_D_DECODE;
                        /* get rid of the used code word bits */
                        fax2_cw_data >>= 12;
                        /* replenish the code word bits */
                        fax2_replenish_cw(12);
                    }
                    else /* a bad code word was detected, look for an EOL */
                        fax2_qc_EOL_state = EOL_NO_ZEROS_BAD;
                    break;

                case TWO_D_DECODE: /* 2-D scan line */
                    /* if V(0) */
                    if ((ubyte)fax2_cw_data & 0x01)
                        fax2_cw_count = 1;
                    /* if H, Vr(1), Vl(1) */
                    else if ((ubyte)fax2_cw_data & 0x07)
                        fax2_cw_count = 3;
                    /* if P */
                    else if ((ubyte)fax2_cw_data & 0x8)
                        fax2_cw_count = 4;
                    /* if Vr(2), Vr(3), Vl(2), Vl(3) */
                    else if (temp_cw_data = (ubyte)fax2_cw_data & 0x30)
                        fax2_cw_count = temp_cw_data == 0x20 ? 7 : 6;
                    /* if uncompressed entrance code */
                    else if (fax2_encoding_scheme == DF_UM &&
                             (fax2_cw_data & 0x03C0) == 0x03C0)
                    {
                        fax2_cw_count = 10;
                        /* go to uncompressed decoding */
                        fax2_qc_state = UNCOMPRESSED_DECODE;
                        /* when done return to 2-D decoding */
                        fax2_qc_return_state = TWO_D_DECODE;
                    }
                    else /* undetected code word, bad scan line */
                    {
                        /* discard the scan line by looking for its EOL */
                        fax2_qc_EOL_state = EOL_NO_ZEROS_BAD;
                        /* the present code word is not an EOL */
                        /* get rid of one bit */
                        fax2_cw_count = 1;
                    }

                    /* if the code word was Pass, don't toggle the color */
                    if (fax2_cw_count == 4)
                        ;
                    /* if the code word was Horizontal go to 1-D decode */
                    else if (((ubyte)fax2_cw_data & 0x07) == 0x04)
                    {
                        fax2_qc_state = TWO_D_MM_DECODE;
                        /* look for two color runs */
                        fax2_mm_count = 2;
                        /* the color will be the same when the two runs are */
                        /* complete, so don't update fax_mm_flag */
                        /* setup the appropriate code length tables */
                        if (fax2_mm_flag == WHITE)
                        {
                            fax2_cl_table = (ubyte *)fax2_white_cl_table;
                            fax2_rl_table = (ubyte *)fax2_white_rl_table;
                        }
                        else
                        {
                            fax2_cl_table = (ubyte *)fax2_black_cl_table;
                            fax2_rl_table = (ubyte *)fax2_black_rl_table;
                        }
                    }
                    else /* toggle the color incase of a Horizontal code word */
                        fax2_mm_flag = fax2_mm_flag == WHITE ? BLACK : WHITE;

                    /* if not looking for EOL, a good encode was found */
                    if (fax2_qc_EOL_state == EOL_NOT_LOOKING)
                        /* indicate a good encoding was detected */
                        fax2_found_encode = TRUE;

                    /* shift out the used code word bits */
                    fax2_cw_data >>= fax2_cw_count;
                    /* replenish them */
                    fax2_replenish_cw(fax2_cw_count);
                    break;

                case UNCOMPRESSED_DECODE: /* uncompressed partial scan */
                    /* if exit from uncompressed code word */
                    if (((ubyte)fax2_cw_data & 0x7F) == 0x40)
                    {
                        /* go back to the previous decode mode */
                        fax2_qc_state = fax2_qc_return_state;
                        /* setup the color according to the tag bit */
                        /* 1 = black, 0 = white */
                        /* setup for both 1-D and 2-D */
                        if ((ubyte)fax2_cw_data & 0x80)
                        {
                            fax2_cl_table = (ubyte *)fax2_black_cl_table;
                            fax2_rl_table = (ubyte *)fax2_black_rl_table;
                            fax2_mm_flag = BLACK;
                        }
                        else
                        {
                            fax2_cl_table = (ubyte *)fax2_white_cl_table;
                            fax2_rl_table = (ubyte *)fax2_white_rl_table;
                            fax2_mm_flag = WHITE;
                        }

                        /* shift out the used code word bits */
                        fax2_cw_data >>= 8;
                        /* replenish them */
                        fax2_replenish_cw(8);
                    }
                    else /* still in uncompressed mode */
                    {
                        /* shift out the used code word bits */
                        fax2_cw_data >>= 1;
                        /* replenish them */
                        fax2_replenish_cw(1);
                    }
                    break;
            } /* switch */
    } /* while */
    /* indicate if the scan line is longer than 5 seconds */
    return(over_five_second_scan);

}

