/*###########################################################################*
*                                                                            *
* FILE:    filegen.c                                                         *
*                                                                            *
* PROJECT: NCDialCtrl module - Funai                                         *
*                                                                            *
* PURPOSE: Supporting source for 'module.c' (generate dialler files from     *
*                                            smartcard data)                 *
*                                                                            *
* VERSION: Version 1.12, Steve Revill 30th/June/1998                         *
*                                                                            *
*###########################################################################*/

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "defs.h"
#include "module.h"
#include "filegen.h"
#include "swis.h"
#include "sys/types.h"
#include "netinet/in.h"
#include "arpa/inet.h"

#include "debuglib/debuglib.h"

#define NCDIAL_POP_ENV_VAR "NCDial$TelephoneNumber"

#ifdef FUNAI8
  #define DEFAULT_DIAL_SCRIPT		"\nATZ\n" "OK\nATS7=60\n" "OK\nATB0&C1&D2&K3W2\n" "OK\nATDT\n" "CONNECT\n\n" "\n\n"
#elif defined LAZARUS
  #define DEFAULT_DIAL_SCRIPT           "\nATZ\n" "OK\nAT&C1&D2&K3W2\n" "OK\nCTRYCFG\n" "OK\nATDT\n" "CONNECT\n\n" "\n\n"
#else
  #define DEFAULT_DIAL_SCRIPT		"\nATZ\n" "OK\nAT&C1&D2&K3W2\n" "OK\nATDT\n" "CONNECT\n\n" "\n\n"
#endif /* FUNAI8 */

#define SIZEOF_DEFAULT_DIAL_SCRIPT	sizeof(DEFAULT_DIAL_SCRIPT)

#define unsilent(u) if (debug) { _swix(NCDialUI_Debug, _INR(0, 1), 0, u); \
                                   fprintf(stderr, "%s\n", u); }

ErrorPtr err;

extern BOOL debug;
extern void osmodfree(char *);
extern char *osmodget(int);
extern char *cmos_number(   void);
extern int  MAM_Enq(char *, void *, int);
extern void oscli(  char *);

_kernel_oserror *set_env_var( char *,     char *);
char *quote(char *in, char *out);
BOOL create_diallerB_script(  int size,    FILE *out);
void debug_out(   char *text, long number, char *string);
char *get_string( char *ptr,  char *script);

typedef struct
{
  unsigned int cntrl;
  char *string;
  void *next;
} script_list;

/***************
*
* FUNCTION: quote
*
* PURPOSE:  Replace certain chars with some text string
*
*/
char *quote(char *in, char *out)
{
  if ((in) && (out))
  {
    char c;
    int inl = 0, outl = 0;

    do
    {
      c = in[inl];
      switch (c)
      {
        case '<':
        {
          inl++;
          out[outl++] = '&';
          out[outl++] = 'l';
          out[outl++] = 't';
          out[outl++] = ';';
          break;
        }
        case '>':
        {
          inl++;
          out[outl++] = '&';
          out[outl++] = 'g';
          out[outl++] = 't';
          out[outl++] = ';';
          break;
        }
        case '&':
        {
          inl++;
          out[outl++] = '&';
          out[outl++] = 'a';
          out[outl++] = 'm';
          out[outl++] = 'p';
          out[outl++] = ';';
          break;
        }
        case '"':
        {
          inl++;
          out[outl++] = '&';
          out[outl++] = 'q';
          out[outl++] = 'u';
          out[outl++] = 'o';
          out[outl++] = 't';
          out[outl++] = ';';
          break;
        }
        default:
        {
          out[outl++] = in[inl++];
          break;
        }
      }
    } while (c);
  }
  return(out);
}

/***************
*
* FUNCTION: set_env_var
*
* PURPOSE:  Set an environment (system) variable
*
*/
_kernel_oserror *set_env_var(char *name, char *value)
{
  _kernel_swi_regs r;

  r.r[0] = (int)name;
  r.r[1] = (int)value;
  r.r[2] = strlen(value);
  r.r[3] = 0;
  r.r[4] = 0;
  return( _kernel_swi(OS_SetVarVal, &r, &r) );
}

/***************
*
* FUNCTION: get_string
*
* PURPOSE:  Extract a line from the script (upto a \n) and replace \n with zero
*
* NOTES:    Returns the new position in the script
*
*/
char *get_string(char *ptr, char *script)
{
  while (*script != asc_lnfd)
  {
    *ptr = *script;
    ptr++;
    script++;
  }
  *ptr = asc_zero;
  script++;

  return(script);
}

/***************
*
* FUNCTION: create_diallerB_script
*
* PURPOSE:  Generate the DaillerB script file from the smart card data
*
* NOTES:    Returns TRUE if an error occurs
*
*/
BOOL create_diallerB_script(int size, FILE *out)
{
  char *script;          /* pointer to (a position in) the smartcard script */
  char expect[80] = "";  /* expect field */
  char send[80]   = "";  /* send field   */

  /* Hack to put some essential lines at the start of the DiallerB script */
  fprintf(out, abort_0);
  fprintf(out, abort_1);
  fprintf(out, abort_2);
  fprintf(out, abort_3);
  fprintf(out, timeout);

  if (size > 0)
  {
    /* Check that the buffer is big enough */
    script = osmodget(size + 10);
    if (NULL == script)
    {
      fclose(out);
      return(TRUE);
    }

    /* SJM: 23Nov98: If MA lookup fails then use the default script */
    if (MAM_Enq("SEND_EXPECT", script, size + 10) < 0)
      strcpy(script, DEFAULT_DIAL_SCRIPT);

    /* Loop through the script data, extracting the fields to a file */
    while (*script)
    {
      if (strchr(script, asc_lnfd))
      {
        /* Extract the (LF terminated) expect string into a zero-terminated string */
        script = get_string(expect, script);

        /* Extract the (LF terminated) send string into a zero-terminated string */
        script = get_string(send, script);

        /* Write the expect string to the script file (or a special 'empty field' char sequence) */
        if (expect[0])
        {
          /* This is a hack to get smart card script 'OK's into a diallerB format */
          if (('O' == expect[0]) && ('K' == expect[1]))
          {
            strcpy(expect, new_ok);
          }
          else
          {
            /* Another hack to get DiallerB to change it's status after dialling */
            if (0 == strcmp(expect, "CONNECT"))
            {
              /* Insert the line '"" ATDT' because we had a semicolon after the phone number */

              /* '\r\nOK\r\n \c'  */
              fputs(new_ok, out);
              fputs(post_ok, out);
              /* 'STATUS Dialled' */
              fputs(stat_dl, out);
              /* '"" ATDT'        */
              fputs(null_atdt, out);

            }
          }

          fputs(expect, out);
          fputc(' ', out);
        }
        else
        {
          fputs(asc_noxp, out);
        }

        /* Write the send string to the script file (or a special 'empty field' char sequence) */
        if (send[0])
        {
          /* Expand some info like 'send_user' and 'send_pass' with data from the smart card/CMOS */
          fputs(expand_special(send), out);
          fputc(asc_lnfd, out);
        }
        else
        {
          fputs(asc_nosd, out);
        }

      }/*if*/
    }/*while*/
    osmodfree(script);
  }

  return(FALSE);
}


/***************
*
* FUNCTION: strip_char
*
* PURPOSE:  Strips a character from a string.
*
*/
static void strip_char (char *str, char c)
{
  char *s, *d;

  s = d = str;

  while (*s)
  {
    if (*s != c)
    {
      if (s != d)
        *d = *s;
      d++;
    }
    s++;
  };
  *d = '\0';
}


/***************
*
* FUNCTION: CreateFiles
*
* PURPOSE:  Create all the files initially needed by the dialler
*
*/
BOOL CreateFiles(carddata *scard)
{
  BOOL exitstat = FALSE;
  FILE *out;
  char *ht_id = NULL;
  char *ht_pw = NULL;
  char buffer[512];
  char *ht_num = NULL;
  int  byte;
  int  failed;
  int  length;
  int  big;
  struct in_addr ina;

  /* Create some directories (if not there already) */
  if (_swix(OS_File, _INR(0, 1) | _IN(4), 8, "<Wimp$ScrapDir>", 75))
  {
    unsilent("No Wimp$ScrapDir set!");
    return(FALSE);
  }

  if (_swix(OS_File, _INR(0, 1) | _IN(4), 8, scrap_dial_dir, 75)) return(FALSE);
  if (_swix(OS_File, _INR(0, 1) | _IN(4), 8, scrap_file_dir, 75)) return(FALSE);
  if (_swix(OS_File, _INR(0, 1) | _IN(4), 8, scrap_ppp_dir,  75)) return(FALSE);

  /* Read info from the smart card into the 'card' struct */
  if (scard->loginid)
  {
    free(scard->loginid);
    scard->loginid = NULL;
  }

  length = MAM_Enq("LOGIN_ID", scard->loginid, 0);
  if (length > 0)
  {
    scard->loginid = malloc(length + 4);
  }
  if ((length <= 0) || (NULL == scard->loginid)) goto genexit;

  MAM_Enq("LOGIN_ID", scard->loginid, length + 2);
  ht_id = malloc(3 * length + 4);
  if (NULL == ht_id) goto genexit;

  quote(scard->loginid, ht_id);
  DEBUG_TOPM((stderr, "loginid %s", ht_id));
  DEBUG_ECHO("login stuff...\n");
  if (scard->loginsecret)
  {
    free(scard->loginsecret);
    scard->loginsecret = NULL;
  }
  length = MAM_Enq("LOGIN_SECRET", scard->loginsecret, 0);
  if (length > 0) scard->loginsecret = malloc(length + 4);
  if ((length <= 0) || (NULL == scard->loginsecret)) goto genexit;

  MAM_Enq("LOGIN_SECRET", scard->loginsecret, length + 2);
  ht_pw = malloc(3 * length + 4);
  if (NULL == ht_pw) goto genexit;

  quote(scard->loginsecret, ht_pw);
  DEBUG_PRINTM((stderr, "loginsecret %s", ht_pw));

  if (scard->pstnnum)
  {
    free(scard->pstnnum);
    scard->pstnnum = NULL;
  }
  length = MAM_Enq("PSTN_NUM", scard->pstnnum, 0);
  scard->pstnnum = malloc(length + 4);
  if ((length <= 0) || (NULL == scard->pstnnum)) goto genexit;

  MAM_Enq("PSTN_NUM", scard->pstnnum, length + 2);
  strip_char (scard->pstnnum, ' ');
  if (length > 0) ht_num = malloc(3 * length + 4);
  if (NULL == ht_num) goto genexit;

  quote(scard->pstnnum, ht_num);
  DEBUG_PRINTM((stderr, "pstnnum %s", ht_num));

  /* Set a system variable to reflect the phone number being dialled (for the UI) */
  set_env_var(NCDIAL_POP_ENV_VAR, scard->pstnnum);

  /* Create the PPP options file */
  DEBUG_PRINT("Creating the PPP options file %s\n", scrap_ppp_opts);
  out = fopen(scrap_ppp_opts, "w");
    if (NULL == out)
    {
      DEBUG_PRINT("  WARNING: failed\n");
      goto genexit;
    }
    if (0 > fprintf(out, "%s\n", device_name))         goto genexit;
    if (0 > fprintf(out, "%d\n", dial_speed))          goto genexit;
    if (0 > fprintf(out, "name %s\n", scard->loginid)) goto genexit;
    if (0 > fprintf(out, "noipdefault\n"))             goto genexit;
    if (0 > fprintf(out, "diallerb\n"))                goto genexit;
    if (MAM_Enq("STATIC_IP", &ina.s_addr, 16) > 0)
    {
      if (0 != ina.s_addr)
      {
        fprintf(out, "%s:\n", inet_ntoa(ina));
      }
    }
    if (0 > fprintf(out, "defaultroute\n")) goto genexit;
    if (0 > fprintf(out, "modem\n"))        goto genexit;
    if (0 > fprintf(out, "crtscts\n"))      goto genexit;
    if (0 > fprintf(out, "asyncmap 0\n"))   goto genexit;
    _swix(NVRAM_Read, _INR(0, 2) | _OUT(0), "ModemTimeout", &byte, 0, &failed);
    if (failed >= 0 && (byte & 0x3F))
    {
      fprintf(out, "idle-disconnect %d\n", (byte & 0x3F) * 60);
    }
  fclose(out);

  DEBUG_PRINT("Generating the script to file %s...\n", scrap_dial_scr);

  /* Create the dialler script file (from the smart card) */
  out = fopen(scrap_dial_scr, "w");
  if (NULL == out) goto genexit;
    big = MAM_Enq("SEND_EXPECT", buffer, 0);
    /* SJM: 23Nov98: If MA lookup fails then use the size of the default script */
    if (big < 0)
      big = SIZEOF_DEFAULT_DIAL_SCRIPT;
    if (create_diallerB_script(big, out))
    {
      DEBUG_PRINT("  WARNING: create_diallerB_script() returned with an error\n");
      goto genexit;
    }
  fclose(out);

  /* Create the PAP secrets file */
  DEBUG_PRINTM((stderr, "Creating the PAP secrets file %s\n",scrap_pap));
  DEBUG_ECHO("Create PAP secrets file\n");
  out = fopen(scrap_pap, "w");
    if (NULL == out)
    {
      DEBUG_PRINT("  WARNING: failed");
      goto genexit;
    }
    if (0 > fprintf(out, "\"%s\" * \"%s\"\n", scard->loginid, scard->loginsecret)) goto genexit;
  fclose(out);

  /* Create the CHAP secrets file */
  DEBUG_PRINTM((stderr, "Creating the CHAP secrets file %s\n",scrap_chap));
  DEBUG_ECHO("Create CHAP secrets file\n");
  out = fopen(scrap_chap, "w");
    if (NULL == out)
    {
      DEBUG_PRINT("  WARNING: failed");
      goto genexit;
    }
    if (0 > fprintf(out, "\"%s\" * \"%s\"\n", scard->loginid, scard->loginsecret)) goto genexit;
  fclose(out);
  exitstat = TRUE;

genexit:
  if (ht_id)  free(ht_id);
  if (ht_pw)  free(ht_pw);
  if (ht_num) free(ht_num);

  return(exitstat);
}
