/* File:    dialler.c
 * Purpose: Core Dialler routines
 * Author:  DN Walker, Ben Laughton
 * History:
 *
 * 1996-12-18: BAL
 * Inherited.
 *
 * 1997-02-24: BAL
 * Merged Dialler and Script files (now just Dialler).
 * Doesn't execute scripts until client goes inactive.
 *
 * 1997-03-20: BAL
 * Added new flags in minor status byte: connection changing.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

/* OSLib - used for definitions only */
#include "OS:osfind.h"

/* Dialler */
#include "bool.h"
#include "chat.h"
#include "dialler.h"
#include "error.h"
#include "flags.h"
#include "handlers.h"
#include "header.h"
#include "ioctl.h"
#include "log.h"
#include "module.h"
#include "script.h"
#include "serial.h"
#include "status.h"
#include "timeout.h"
#include "utils.h"

#ifdef BLOCKDRIVERS
  #include "driver.h"
#endif

/* Miscellaneous */
/* #include "MemCheck:MemCheck.h" */




/* =============================================================================
 * Define contants
 */

#define Script_RunFromFile 0x8

enum
{
    ExecuteState_Setup,
    ExecuteState_Wait,
    ExecuteState_Execute
};

enum
{
    Client_RequestingAccess,
    Client_RelinquishingAccess
};

#ifdef BLOCKDRIVERS
#define AccessGranted 0
#else
#define AccessGranted 1
#endif

#define AccessDenied_ActiveClient 64
#define AccessDenied_NotConnected 65




/* =============================================================================
 * Define types
 */

typedef enum
{
    Unset,
    InFile,
    InMemory
} ScriptLocation;




/* =============================================================================
 * Declare global variables
 */

int dialler_client_active = false;
unsigned int connect_time = 0;     /* monotonic time when connection was made */

static int execute_state = ExecuteState_Setup;

static char *dial_script   = NULL;    /* pointer to dial script or filename   */
static char *hangup_script = NULL;    /* pointer to hangup script or filename */
static char *answer_script = NULL;    /* pointer to answer script or filename */

static char           *current_script = NULL;
static ScriptLocation  current_script_location = Unset;
static ScriptType      current_script_type = Script_TypeUnset;
static int             current_file_ptr = NULL;




/* =============================================================================
 * Declare function prototypes
 */

static _kernel_oserror *script_close (const bool reset_modem);

static _kernel_oserror *dial_setup (_kernel_swi_regs *r,
                                    int *const internal_error);

static _kernel_oserror *answer_setup (_kernel_swi_regs *r,
                                      int *const internal_error);

static _kernel_oserror *hangup_setup (_kernel_swi_regs *r,
                                      int *const internal_error);

static _kernel_oserror *hangup_start (void);

static _kernel_oserror *get_script (unsigned int flags_word,
                                    char *const user_script,
                                    char **script,
                                    unsigned int user_memory_script_flag,
                                    unsigned int dialler_own_script_flag,
                                    unsigned int dialler_file_script_flag);

static _kernel_oserror *setup_script_vars (
                            const ScriptType script_type,
                            char *const script,
                            unsigned int dialler_file_script_flag);




/* =============================================================================
 * Define functions
 */

/* -----------------------------------------------------------------------------
+
   dialler_execute_script

   Setup the dialler to execute a script

   Inputs
   script_type: the type of script to be executed
                Script_Dial, Script_Answer, Script_Hangup
   r:           pointer to register block

   Returns
   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror *dialler_execute_script (const ScriptType script_type,
                                                _kernel_swi_regs *const r)
{
    int internal_error;
    _kernel_oserror *e = NULL;

    while (1)
    {
        switch (execute_state)
        {
            case ExecuteState_Setup:
            {
                unsigned int general_info;

                /* Don't allow a dial or answer script to be executed if
                 * a script (of any type) is already being executed.
                 */
                general_info = status & Dialler_GeneralInfoMask;
                if (general_info == Dialler_ExecutingScript_Dial ||
                    general_info == Dialler_ExecutingScript_Hangup ||
                    general_info == Dialler_ExecutingScript_Answer)
                {
                    if (script_type == Script_Hangup)
                    {
                        script_close (false);
#if 0
                        dialler_disconnect (true);
#endif
                    }
                    else
                    {
                        return AlreadyExecutingScript;
                    }
                }

                /* Do as much general initialisation as possible before the
                 * script specific initialisation is done so that default
                 * actions can be overidden.
                 */

                status &= ~Dialler_GeneralInfoMask;

/* 1998-03-16: BAL */
#if 0
                status_changed ();
#endif
                /* Do script-specific initialisation */
                switch (script_type)
                {
                    case Script_Dial:
                        e = dial_setup (r, &internal_error);
                        if (e == NULL && !internal_error)
                            e = setup_script_vars (
                                    script_type, dial_script,
                                    Flags_UseFileDial);
                        break;

                    case Script_Hangup:
                        e = hangup_setup (r, &internal_error);
                        if (e == NULL && !internal_error)
                            e = setup_script_vars (
                                    script_type, hangup_script,
                                    Flags_UseFileHangup);
                        break;

                    case Script_Answer:
                        e = answer_setup (r, &internal_error);
                        if (e == NULL && !internal_error)
                            e = setup_script_vars (
                                    script_type, answer_script,
                                    Flags_UseFileAnswer);
                        break;
                }

                if (internal_error)
                {
                    return NULL;
                }

                M_e_check_jump (e);

                M_debug (("Setting up script: speed = %u", speed));

                if (chat_initialise ())
                {
                    e = NoMemory;
                    goto error;
                }

                status &= ~Dialler_ConnectedFlagsMask;
                M_status_set (Dialler_ConnectionChanging);

                /* Client must be inactive before execution can continue */
                if (dialler_client_active)
                {
                    M_debug (("dialler client active.  enter wait state"));
                    execute_state = ExecuteState_Wait;
                    return NULL;
                }
                else
                {
                    execute_state = ExecuteState_Execute;
                }

                break;
            }

            case ExecuteState_Wait:
                M_debug (("in wait state.  dialler client active = %d",
                          dialler_client_active));
                if (!dialler_client_active)
                    execute_state = ExecuteState_Execute;
                else
                    execute_state = ExecuteState_Wait;

                break;

            case ExecuteState_Execute:
                M_debug (("Executing script: script_type = %d", script_type));
                if ((status & Dialler_GeneralInfoMask) ==
                    Dialler_ExecutingScript_Hangup)
                {
                    e = hangup_start ();
                    M_e_check_jump (e);
                }

                serial_flush ();

                /* Get RISC OS to call chat_do_script sometime  */
                e = handlers_add_callback ();
                M_e_check_jump (e);
                execute_state = ExecuteState_Setup;
                return NULL;
        }
    }


error:
    script_abort (true);
    return e;
}




/* -----------------------------------------------------------------------------
+
   script_completed

   Called when a script has been executed successfully

   Returns
   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror *script_completed (void)
{
    _kernel_oserror *e;


    status = 0;    /* Reset status to ensure no abort bits are set */

    switch (current_script_type)
    {
        case Script_Dial:
            status &= ~Dialler_ConnectedFlagsMask;
            status |= Dialler_ConnectedOutgoing;
            status_changed ();
            e = connection_timeout_start ();
            break;

        case Script_Hangup:
            /* handlers_release_hangup_handler (); */
            M_status_clear (Dialler_ConnectedFlagsMask);
            break;

        case Script_Answer:
            status &= ~Dialler_ConnectedFlagsMask;
            status |= Dialler_ConnectedIncoming;
            status_changed ();
            break;

        default:
            break;
    }

    e = script_close (true);
    M_e_check_return (e);

    return NULL;
}





/* -----------------------------------------------------------------------------
+
   script_abort

   Abort the execution of a script

   Returns
   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror *script_abort (const bool reset_modem)
{
    int script_type = current_script_type;
    _kernel_oserror *e = NULL;


    /* Shutdown the currently executing script */
    e = script_close (reset_modem);

    if (script_type == Script_Dial || script_type == Script_Answer)
        dialler_disconnect (reset_modem);

    return e;
}




/* -----------------------------------------------------------------------------
+
   script_close

   Finish the execution of a script and clean up

   Returns
   success: NULL
   failure: pointer to error block
-
 */

static _kernel_oserror *script_close (const bool reset_modem)
{
    _kernel_oserror *e;


    chat_finalise ();

/*     status &= ~Dialler_ConnectionChanging; */
/* can't do this 'cos screw up connected outgoing / incoming state  */

    switch (current_script_type)
    {
        case Script_Dial:
            M_status_clear (Dialler_ExecutingScript_Dial);
            break;

        case Script_Hangup:
            M_status_clear (Dialler_ExecutingScript_Hangup);
            dialler_disconnect (reset_modem);
            e = serial_close ();
            break;

        case Script_Answer:
            M_status_clear (Dialler_ExecutingScript_Answer);
            break;

        default:
            break;
    }

    e = handlers_release_data_handler ();
    e = timeout_cancel ();

    if (current_script_location == InFile)
        e = _swix (OS_Find, _INR (0, 1), OSFind_Close, current_file_ptr);

/*     MemCheck_OutputBlocksInfo (); */

    current_script = NULL;
    current_script_location = Unset;
    current_script_type = Script_TypeUnset;
    current_file_ptr = NULL;

    return NULL;
}




/* -----------------------------------------------------------------------------
+
   dialler_config

   Do Dialler_Configure SWI

   Inputs
   r:           pointer to register block

   Returns
   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror *dialler_config (_kernel_swi_regs *const r)
{
    _kernel_oserror *e;


  #ifdef BLOCKDRIVERS
    e = serial_set_vars ((unsigned int) r->r[0], (char *) r->r[1],
                         r->r[4], r->r[5]);
  #else
    e = serial_set_vars ((unsigned int) r->r[0], (char *) r->r[1],
                         r->r[4], r->r[5], r->r[6]);
  #endif
    M_e_check_return (e);

    /* Configure the dial script */
    e = get_script ((unsigned int) r->r[0],
                    (char *) r->r[2],
                    &dial_script,
                    Dialler_Flags_DialScriptInMemory,
                    Flags_MyDial,
                    Flags_UseFileDial);
    M_e_check_return (e);

    /* Configure the hangup script */
    e = get_script ((unsigned int) r->r[0],
                    (char *) r->r[3],
                    &hangup_script,
                    Dialler_Flags_HangupScriptInMemory,
                    Flags_MyHangup,
                    Flags_UseFileHangup);
    M_e_check_return (e);

    return NULL;
}




/* -----------------------------------------------------------------------------
+
   dial_setup

   Inputs
   r:              pointer to register block
   internal_error: pointer to internal error flag

   Returns:
   success: NULL
   failure: pointer to error block
-
 */

static _kernel_oserror *dial_setup (_kernel_swi_regs *r,
                                    int *const internal_error)
{
    int reset;
    _kernel_oserror *e;


    syslog ("\n");
    syslog ("Doing dial script");
    syslog ("");
    status = Dialler_Disconnected;
    *internal_error = false;

    /* ensure existing serial file handles are closed and internal copies
     * destroyed
     */
    serial_close ();
#if 0
    e = get_script ((unsigned int) r->r[0],
                    (char *) r->r[2],
                    &dial_script,
                    Dialler_Flags_DialScriptInMemory,
                    Flags_MyDial,
                    Flags_UseFileDial);
    M_e_check_return (e);

    e = get_script ((unsigned int) r->r[0],
                    (char *) r->r[3],
                    &hangup_script,
                    Dialler_Flags_HangupScriptInMemory,
                    Flags_MyHangup,
                    Flags_UseFileHangup);
    M_e_check_return (e);
#endif
    e = dialler_config (r);
    M_e_check_return (e);

    if (dial_script == NULL || hangup_script == NULL)
    {
        if (dial_script == NULL)
            syslog ("Need dial script to do dial\n");
        else
            syslog ("Need hangup script to do dial\n");

        *internal_error = true;
        return NULL;
    }

#ifndef BLOCKDRIVERS
    e = serial_open ();    /* open serial port input and output streams */
    M_e_check_return (e);
#endif

    if ((r->r[0] & Dialler_Flags_NoInitialisationReset))
        reset = 0;
    else
        reset = 1;


    e = serial_initialise (reset);
    M_e_check_return (e);

    M_flags_clear (Flags_Answer);

    M_status_set (Dialler_ExecutingScript_Dial);

    e = handlers_attach ();
    M_e_check_return (e);

    return NULL;
}




/* -----------------------------------------------------------------------------
+
   answer_setup

   Inputs
   r:              pointer to register block
   internal_error: pointer to internal error flag

   Returns:
   success: NULL
   failure: pointer to error block
-
 */

static _kernel_oserror *answer_setup (_kernel_swi_regs *const r,
                                      int *const internal_error)
{
    int reset;
    _kernel_oserror *e;


    syslog ("\n");
    syslog ("Doing answer script");
    syslog ("");
    *internal_error = false;

    /* ensure existing serial file handles are closed and internal copies
     * destroyed
     */
    serial_close ();
  #ifdef BLOCKDRIVERS
    e = serial_set_vars ((unsigned int) r->r[0], (char *) r->r[1],
                         r->r[4], r->r[5]);
  #else
    e = serial_set_vars ((unsigned int) r->r[0], (char *) r->r[1],
                         r->r[4], r->r[5], r->r[6]);
  #endif
    M_e_check_return (e);


    e = get_script ((unsigned int) r->r[0],
                    (char *) r->r[2],
                    &answer_script,
                    Dialler_Flags_AnswerScriptInMemory,
                    Flags_MyAnswer,
                    Flags_UseFileAnswer);
    M_e_check_return (e);

    e = get_script ((unsigned int) r->r[0],
                    (char *) r->r[3],
                    &hangup_script,
                    Dialler_Flags_HangupScriptInMemory,
                    Flags_MyHangup,
                    Flags_UseFileHangup);
    M_e_check_return (e);

    if (answer_script == NULL || hangup_script == NULL)
    {
        if (answer_script == NULL)
            syslog ("Need answer script to do answer\n");
        else
            syslog ("Need hangup script to do answer\n");

        *internal_error = true;
        return NULL;
    }

#ifndef BLOCKDRIVERS
    e = serial_open ();    /* open serial port input and output streams */
    M_e_check_return (e);
#endif

    if ((r->r[0] & Dialler_Flags_NoInitialisationReset))
        reset = 0;
    else
        reset = 1;

    e = serial_initialise (reset);
    M_e_check_return (e);

    M_flags_set (Flags_Answer);
    M_status_set (Dialler_ExecutingScript_Answer);

    e = handlers_attach ();
    M_e_check_return (e);

    return NULL;
}




/* -----------------------------------------------------------------------------
+
   hangup_setup

   Inputs
   r:              pointer to register block
   internal_error: pointer to internal error flag

   Returns:
   success: NULL
   failure: pointer to error block
-
 */

static _kernel_oserror *hangup_setup (_kernel_swi_regs *const r,
                                      int *const internal_error)
{
    unsigned int status_bits;

    M_unused (r);

    syslog ("\n");
    syslog ("Doing hangup script");
    syslog ("");
    *internal_error = false;

    if (hangup_script == NULL)
    {
        syslog ("Need hangup script to do hangup\n");
        *internal_error = true;
        return NULL;
    }

  #ifndef BLOCKDRIVERS
    if (serial_in == 0 || serial_out == 0)
        return SerialStreamsClosed;
  #endif

    connection_timeout_cancel ();

    M_flags_clear (Flags_Answer);

    status_bits = Dialler_ExecutingScript_Hangup;
    if (dialler_client_active)
    {
        M_debug (("dialler client active - wait for inactive before hangup"));
        status_bits |= Dialler_RelinquishAccess;
    }

    status_change (StatusOp_Set, status_bits);

    return NULL;
}




/* -----------------------------------------------------------------------------
+
   hangup_start

   Returns:
   success: NULL
   failure: pointer to error block
-
 */

static _kernel_oserror *hangup_start (void)
{
    _kernel_oserror *e = NULL;


#if 0
#ifndef BLOCKDRIVERS
    e = serial_open ();    /* open serial port input and output streams */
    M_e_check_return (e);
#endif
#endif

    /* Only attach the data handler, not the hangup handler - don't want to
     * trigger a 'line drop' when _WE_ drop the line.
     */
    e = handlers_attach_data_handler ();
    M_e_check_return (e);

    e = handlers_release_hangup_handler ();
    M_e_check_return (e);

    return NULL;
}




/* -----------------------------------------------------------------------------
+
   get_script

   Get a hook to a script.  The script could already be in memory, could
   be a in a file that must be loaded or could be run directly from a file.

   Inputs
   flags_word              : flags word passed in R0 to Dialler_Dial or
                             Dialler_Configure
   user_script             : client's reference to the script, one of:
                                 * pointer to script in memory
                                 * pointer to script filename
                                 * NULL (use previous)
   script                  : pointer to pointer to script
   user_memory_script_flag : flag in flags_word that indicates user_script is a
                             pointer to a script, not a filename
   dialler_own_script_flag : internal dialler flag indicating script is stored
                             and executed from Dialler's workspace
   dialler_file_script_flag: internal dialler flag indicating script is being
                             executed directly from file

   Outputs
   script: pointer to pointer to script

   Returns
   success: NULL
   failure: pointer to a standard error block
-
 */

static _kernel_oserror *get_script (unsigned int flags_word,
                                    char *const user_script,
                                    char **script,
                                    unsigned int user_memory_script_flag,
                                    unsigned int dialler_own_script_flag,
                                    unsigned int dialler_file_script_flag)
{
    char *temp;
    _kernel_oserror *e;

    /* Check if client wants to use previous script */
    if (user_script == NULL)
        return NULL;

    /* If the previous script was stored in the dialler's memory then this
     * memory needs to be freed.  If it was executed from a file then the memory
     * used to store the filename needs to be freed.
     */
    if (*script != NULL &&
        M_flags_is_set (dialler_own_script_flag | dialler_file_script_flag))
    {
        free (*script);
        *script = NULL;
    }

    /* Find out whether the script needs to be copied into Dialler's
     * workspace.
     */
    if (flags_word & Dialler_Flags_UseScriptsInSitu)
    {
        M_debug (("script will be executed in situ"));
        M_flags_clear (dialler_own_script_flag);

        if (flags_word & user_memory_script_flag)
        {
            /* Script will be executed from client's memory: must be in RMA
             * or dynamic area, but Dialler doesn't check this as anything else
             * is forbidden in the documentation.
             */
            M_debug (("script will be executed from client's workspace"));
            *script = user_script;
            M_flags_clear (dialler_file_script_flag);
        }
        else
        {
            /* The script can be used from a file without having to load it
             * into memory, so just record the filename.
             */
            M_debug (("script will be executed from file"));

            /* Make local copy of filename */
            temp = str_dup (user_script);
            if (temp == NULL)
                return NoMemory;

            *script = temp;
            M_flags_set (dialler_file_script_flag);
        }
    }
    else
    {
        M_debug (("script will be copied into dialler's workspace"));
        M_flags_set (dialler_own_script_flag);
        M_flags_clear (dialler_file_script_flag);

        if (flags_word & user_memory_script_flag)
        {
            temp =  str_dup (user_script);
            if (temp == NULL)
                return NoMemory;

            *script = temp;
        }
        else
        {
            M_debug (("script will be read from file"));
            e = file_load (user_script, &temp);
            if (e != NULL)
            {
                syslog ("SysError: get_script %s\n", e->errmess);
                return e;
            }

            *script = temp;
            M_flags_clear (dialler_file_script_flag);
        }
    }

    return NULL;
}




/* -----------------------------------------------------------------------------
+
   setup_script_vars

   Setup the 'current_*' variables ready for script execution.  If the script
   is being executed from a file then open the file.

   Inputs
   script_type:              type of script (dial, hangup or answer)
   script:                   pointer to script or filename of script
   dialler_file_script_flag: internal dialler flag indicating script is being
                             executed directly from file

   Returns
   success: NULL
   failure: pointer to error block
-
 */

static _kernel_oserror *setup_script_vars (
                            const ScriptType  script_type,
                            char *const       script,
                            unsigned int      dialler_file_script_flag)
{
    int file_handle;
    _kernel_oserror *e;

    current_script_type = script_type;
    if (script != NULL && !M_flags_is_set (dialler_file_script_flag))
    {
        /* use memory */
        current_script = script;
        current_script_location = InMemory;
    }
    else
    {
        /* use file - open file */
        e = _swix (OS_Find,
                   _INR (0, 1) | _OUT (0),

                   0x4f,
                   script,

                   &file_handle);

        M_e_check_return (e);

        if (file_handle == 0)
            return CantOpenFile;

        current_file_ptr = file_handle;

        current_script_location = InFile;
    }

    return NULL;
}




/* -----------------------------------------------------------------------------
+
   script_get_next_line

   Read the next line from the script.  Input lines are terminated by '\n',
   output lines by '\0'.

   Inputs
   buffer: pointer to buffer to read data into
   length: maximum size of input

   Returns
   success: NULL
   failure: pointer to error block
-
 */

extern char *script_get_next_line (char *buffer, const int max_length)
{
    char *line_end;
    char c;
    unsigned int processor_flags = 0;
    int line_length = 0;
    _kernel_oserror *e;


    M_debug (("max_length: %d", max_length));
    if (current_script_location == InMemory)
    {
        /* Find the first newline in the script  */
        if ((line_end = strchr (current_script, '\n')) == NULL)
        {
            /* If last line of script is not '\n' terminated then it will be
             * '\0' terminated.
             */

            if (*current_script == '\0' ||
                (line_end = strchr (current_script, '\0')) == NULL)
            {
                /* End of script */
                return NULL;
            }
        }

        /* Find the line's length excluding terminating '\n' */
        line_length = (int) line_end - (int) current_script;
        M_debug (("line_length: %d", line_length));

        /* Allow for the '\0' being appended */
        if (line_length >= max_length)
        {
            line_length = max_length - 1;
        }

        memcpy (buffer, current_script, line_length);

        /* Update current_script to point to the next line of the script.
         * The + 1 allows for the terminating '\n' on the current line. */
        current_script = current_script + line_length + 1;
        *(buffer + line_length) = '\0';

        return buffer;
    }


    /* Script is in file */
    line_end = buffer;

    /* Read a line of data from the script file.  A line end is signified by
     * a newline ('\n') or nul character ('\0').  Reading is aborted if there
     * is an error or EOF occurs.
     */
    while ((e = _swix (OS_BGet, _IN (1) | _OUT (0) | _OUT (_FLAGS),
                       current_file_ptr, &c, &processor_flags)) == NULL)
    {
        /* Carry flag set if no data */

        if (!(processor_flags & _C))
        {
            /* Carry flag clear, so check if the character is a line ending */
            if (c == '\n' || c == '\0')
            {
                *line_end = '\0';
                break;    /* End of line so breakout from loop */
            }

            else
            {
                *line_end = c;
            }
        }

        else
        {
            /* Carry flag set - no more data so breakout from loop */
            break;
        }

        if (++line_length == max_length)
        {
            /* Line length reached maximum allowed size.  Overwrite last
             * character with a '\0' terminator and break from loop.
             */
            *line_end = '\0';
            break;
        }

        ++line_end;
    }


    /* Determine what state the read finished in.  Do any additional tidying
     * required and return data / error code.
     */

    if (e)
    {
        syslog ("SysError: get_next_line_from_script: %s\n",  e->errmess);
        return NULL;     /* error indicator */
    }

    if ((processor_flags & _C))    /* EOF occurred */
    {
        if (line_length == 0)
        {
            /* No data was read */
            return NULL;    /* error indicator */
        }

        else
        {
            /* At least 1 byte was read so ensure data is '\0' terminated */
            *(buffer + line_length) = '\0';
        }
    }

    return buffer;
}




/* -----------------------------------------------------------------------------
+
   dialler_arbitrate

   Control client access to serial port I/O streams

   Inputs
   r: pointer to register block

   Returns
   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror *dialler_arbitrate (_kernel_swi_regs *const r)
{
    switch (r->r[0])
    {
        case Client_RequestingAccess:
            M_debug (("client requesting access"));

#ifndef BLOCKDRIVERS
            /* Don't allow access if Dialler hasn't got serial file handles */
            if (serial_in == 0 || serial_out == 0)
            {
                r->r[0] = AccessDenied_NotConnected;
                break;
            }
#endif

            /* Don't allow access if there is already an active client */
            if (dialler_client_active)
            {
                r->r[0] = AccessDenied_ActiveClient;
                break;
            }


            dialler_client_active = true;
            r->r[0] = AccessGranted;
#ifdef BLOCKDRIVERS
            r->r[1] = r->r[2] = 0;
            r->r[3] = (int) driver.data;
#else
            r->r[1] = serial_in;
            r->r[2] = serial_out;
            r->r[3] = 0;
            M_debug (("Dialler_Arbitrate: %d %d %d\n",
                      r->r[0], r->r[1], r->r[2]));
#endif
            break;

        case Client_RelinquishingAccess:
            M_debug (("client relinquishing access"));
            if (dialler_client_active)
            {
                M_debug (("relinquishing access"));
                dialler_client_active = false;
                if (serial_close_pending)
                    serial_close ();
                M_status_clear (Dialler_RelinquishAccess);

                if (execute_state == ExecuteState_Wait)
                    dialler_execute_script (Script_TypeUnset, NULL);
            }
            break;

        default:
            return BadReasonCode;
            break;
    }

    return NULL;
}




/* -----------------------------------------------------------------------------
+
   dialler_disconnect

   Terminate a connection.  Called when a hangup or line drop occurs.

   Inputs
   r: pointer to register block

   Returns
   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror *dialler_disconnect (const bool reset_modem)
{
    /* Release all handlers */
    timeout_cancel ();
    connection_timeout_cancel ();
    handlers_release ();

    if (reset_modem)
        serial_force_hangup ();

    /* status |= Dialler_LineDropped; */
    if (dialler_client_active)
        status |= Dialler_RelinquishAccess;
    status &= ~Dialler_ConnectedFlagsMask;

    status_changed ();

    /* serial close not done here anymore.  moved out to give 'finer' control */
/*     serial_close (); */

    return NULL;
}




/* -----------------------------------------------------------------------------
+
   script_display_scripts

   Display all the scripts on the screen (if the scripts are in a file then
   displays the filename).  Doesn't put them through clean(), so
   what you see may not be quite what you get.
-
 */

extern void script_display_scripts (void)
{
    if (dial_script)
    {
        printf ("Dial script\n"
                "===========\n"
                "%s\n\n",
                dial_script);
    }

    if (answer_script)
    {
        printf ("Answer script\n"
                "=============\n"
                "%s\n\n",
                answer_script);
    }

    if (hangup_script)
    {
        printf ("Hangup script\n"
                "=============\n"
                "%s\n\n",
                hangup_script);
    }
}
