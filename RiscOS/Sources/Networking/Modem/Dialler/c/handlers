/* File:    handlers.c
 * Purpose: Callback, event, callfter etc. handlers and mangement
 * Author:  DN Walker, Ben Laughton
 * History:
 *
 * 1996-12-18: BAL
 * Inherited.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"
#include <stdbool.h>
#include <stddef.h>
#include <stdio.h>
#include "swis.h"

#include "DebugLib/DebugLib.h"

/* Dialler */
#include "asmutils.h"
#include "chat.h"
#include "defs.h"
#include "dialler.h"
#include "error.h"
#include "flags.h"
#include "handlers.h"
#include "header.h"
#include "log.h"
#include "module.h"
#include "script.h"
#include "serial.h"
#include "status.h"
#include "timeout.h"

#ifdef BLOCKDRIVERS
  #include "driver.h"
#else
  #include "ioctl.h"
#endif




/* =============================================================================
 * Define constants
 */

#define SerialEvent_DCD     0x02
#define SerialEvent_DSR     0x04
#define SerialEvent_Framing 0x08
#define SerialEvent_Overrun 0x10
#define SerialEvent_Parity  0x20

#define Event_RS423Error                        0x7
#define osbyte_DISABLE_EVENT                    0xDu
#define osbyte_ENABLE_EVENT                     0xEu





/* =============================================================================
 * Declare global variables
 */

int need_rx_data_present = false;
int line_drop_pending = false;
static int callafter_pending = false;
static int data_handler_attached = false;
static int hangup_handler_attached = false;




/* =============================================================================
 * Define functions
 */

/* -----------------------------------------------------------------------------
   handlers_attach

   Attach the data handlers and hangup check handlers

   Returns
   success: NULL
   failure: pointer to error block
 */

extern _kernel_oserror *handlers_attach (void)
{
    _kernel_oserror *e = NULL;


    e = handlers_attach_data_handler ();

    if (!e)
    {
        e = handlers_attach_hangup_handler ();
    }

    return e;
}




/* -----------------------------------------------------------------------------
   handlers_release

   Release the data handlers and hangup check handlers

   Returns
   success: NULL
   failure: pointer to error block
 */

extern _kernel_oserror *handlers_release (void)
{
    _kernel_oserror *e = NULL;


    e = handlers_release_data_handler ();

    if (!e)
    {
        e = handlers_release_hangup_handler ();
    }

    return e;
}




/* -----------------------------------------------------------------------------
   handlers_attach_data_handler

   Attatch handlers to:
   EventV so that the dialler is notified when the serial line changes state
   UpCallV so that the dialler is notified when the serial input buffer is no
   longer empty.

   Returns
   success: NULL
   failure: pointer to error block
 */

#ifdef BLOCKDRIVERS

extern _kernel_oserror *handlers_attach_data_handler (void)
{
    _kernel_oserror *e = NULL;


    if (!data_handler_attached)
    {
        unsigned int  irqs;

        need_rx_data_present = false;

        /* Turn IRQs off so that the data check cannot be called before
         * data_handler_attached is set.
         */
        irqs = irqs_off ();

        /* Attach handler to TickerV to poll for data */
        e = _swix (OS_Claim, _INR (0, 2), TickerV, poll_handler_entry, pword);

        data_handler_attached = true;

        irqs_restore (irqs);
    }

    return e;
}

#else

extern _kernel_oserror *handlers_attach_data_handler (void)
{
    _kernel_oserror *e = NULL;


    if (!data_handler_attached)
    {
        unsigned int  irqs;

        need_rx_data_present = false;

        /* Turn IRQs off so that the data check cannot be called before
         * data_handler_attached is set.
         */
        irqs = irqs_off ();

        /* Attach handler to UpCallV */
        e = _swix (OS_Claim, _INR (0, 2), UpCallV, upcall_entry, pword);
        data_handler_attached = true;

        irqs_restore (irqs);
    }

    return e;
}

#endif




/* -----------------------------------------------------------------------------
   handlers_attach_hangup_handler

   Returns
   success: NULL
   failure: pointer to error block
 */

#ifdef BLOCKDRIVERS

extern _kernel_oserror *handlers_attach_hangup_handler (void)
{
    _kernel_oserror *e = NULL;


    if (!hangup_handler_attached)
    {
        unsigned int  irqs;

        /* Turn IRQs off so that the hangup check cannot be called before
         * hangup_handler_attached is set.
         */
        irqs = irqs_off ();

        hangup_check (NULL, NULL);    /* reset hangup check */

        /* Call hangup_check every second */
        e = _swix (OS_CallEvery, _INR (0, 2), 99, hangup_check_entry, pword);

        hangup_handler_attached = true;

        irqs_restore (irqs);
    }

    return e;
}

#else

extern _kernel_oserror *handlers_attach_hangup_handler (void)
{
    _kernel_oserror *e = NULL;


    if (!hangup_handler_attached)
    {
        unsigned int  irqs;

        /* Turn IRQs off so that the hangup check cannot be called before
         * hangup_handler_attached is set.
         */
        irqs = irqs_off ();

        /* Attach handler to EventV */
        e = _swix (OS_Claim, _INR (0, 2), EventV, rs423_event_entry, pword);

        hangup_handler_attached = true;

        if (!e)
        {
            /* Enable RS423 error event */
            e = _swix (OS_Byte, _INR (0, 1),
                       osbyte_ENABLE_EVENT, Event_RS423Error);
        }

        irqs_restore (irqs);
    }

    return e;
}

#endif




#ifdef BLOCKDRIVERS

/* -----------------------------------------------------------------------------
   handlers_release_data_handler

   Returns
   success: NULL
   failure: pointer to error block
 */

extern _kernel_oserror *handlers_release_data_handler (void)
{
    unsigned int  irqs;
    _kernel_oserror *e = NULL;


    irqs = irqs_off ();

    if (data_handler_attached)
    {
        /* Release TickerV handler */
        e = _swix (OS_Release, _INR (0, 2), TickerV, poll_handler_entry, pword);

        data_handler_attached = false;
        need_rx_data_present = false;
    }

    handlers_remove_queued_callback ();

    irqs_restore (irqs);
    return e;
}

#else

extern _kernel_oserror *handlers_release_data_handler (void)
{
    unsigned int  irqs;
    _kernel_oserror *e = NULL;


    irqs = irqs_off ();

    if (data_handler_attached)
    {
        /* Release UpCallV handler */
        e = _swix (OS_Release, _INR (0, 2), UpCallV, upcall_entry, pword);

        data_handler_attached = false;
        need_rx_data_present = false;
    }

    handlers_remove_queued_callback ();

    irqs_restore (irqs);
    return e;
}

#endif




#ifdef BLOCKDRIVERS

/* -----------------------------------------------------------------------------
   handlers_release_hangup_handler

   Returns
   success: NULL
   failure: pointer to error block
 */

extern _kernel_oserror *handlers_release_hangup_handler (void)
{
    _kernel_oserror *e = NULL;


    if (hangup_handler_attached)
    {
        /* Remove hangup_check handler */
        e = _swix (OS_RemoveTickerEvent, _INR (0, 1),
                   hangup_check_entry, pword);

        hangup_handler_attached = false;
    }

    return e;
}

#else

extern _kernel_oserror *handlers_release_hangup_handler (void)
{
    _kernel_oserror *e = NULL;


    if (hangup_handler_attached)
    {
        /* Disable RS423 error event */
        e = _swix (OS_Byte, _INR (0, 1),
                   osbyte_DISABLE_EVENT, Event_RS423Error);

        /* Release EventV handler */
        e = _swix (OS_Release, _INR (0, 2), EventV, rs423_event_entry, pword);

        hangup_handler_attached = false;
    }

    return e;
}

#endif




#ifdef BLOCKDRIVERS
/* -----------------------------------------------------------------------------
   poll_handler

   Check if dialler is expecting more incoming data.

   Inputs
   r  : pointer to register block
   pw :

   Returns
   to pass on the vector   : 0
   to intercept the vector : 1
 */


extern int poll_handler (_kernel_swi_regs *r, void *pw)
{
    if (need_rx_data_present && !chat_do_script_pending &&
        driver_checkrx () > 0)
    {
/*         dprintf (("", "adding callback\n")); */
        need_rx_data_present = false;
        handlers_add_callback ();
    }

    return 0;

    M_unused (r);
    M_unused (pw);
}

#else

/* -----------------------------------------------------------------------------
   upcall_handler

   Deal with Device_RxDataPresent upcalls (data has entered a previouly empty
   input buffer).  If the dialler is waiting to get more data then add a
   transient callback to call the data reading routine.

   Inputs
   r  : pointer to register block
   pw : Dialler module's private workspace pointer

   Returns
   to pass on the vector   : 1
   to intercept the vector : 0
 */

extern int upcall_handler (_kernel_swi_regs *r, void *pw)
{
    /* Only interested in Upcall_DeviceRxDataPresent */
    if (r->r[0] != 15)
        return 1;    /* pass on vector call */

    if (r->r[1] != serial_in)
        return 1;    /* pass on vector call */

    if (need_rx_data_present && !chat_do_script_pending)
    {
        /* Get RISC OS to call chat_do_script sometime  */
        handlers_add_callback ();
        need_rx_data_present = false;
    }

    return 0;    /* intercept vector call */

    M_unused (pw);
}

extern int file_modified_upcall_handler (_kernel_swi_regs *r, void *pw)
{
    if (r->r[0] != 3)    /* only interested in Upcall_FileModified */
        return 1;    /* pass on vector call */

    if (r->r[9] == 259)    /* closing file */
    {
        unsigned int general_info;

        /* One of the Dialler's serial streams has been
         * closed underneath it.  Flag this by setting the closed
         * stream handle to 0 and closing the other stream (if
         * open).
         *
         * This will then be detected by other parts of the
         * Dialler that use these streams, which will fail gracefully.
         */

        if (r->r[1] == serial_in)
            serial_in = 0;
        else if (r->r[1] == serial_out)
            serial_out = 0;
        else
            return 1;    /* pass on vector call */

        general_info = (status & Dialler_GeneralInfoMask);
        if (general_info == Dialler_ExecutingScript_Dial ||
            general_info == Dialler_ExecutingScript_Answer ||
            general_info == Dialler_ExecutingScript_Hangup)
        {
            script_abort (false);
        }
        else
            serial_close ();
    }


    return 1;    /* pass on vector call */

    M_unused (pw);
}



#endif




#ifdef BLOCKDRIVERS

extern _kernel_oserror *hangup_check (_kernel_swi_regs *r, void *pw)
{
    static int old_dcd;
    int dcd;


    M_unused (pw);


    if (r == NULL)    /* used to reset to known state */
    {
        old_dcd = (driver_modemcontrol () & 0x8) >> 3;
    }

    dcd = (driver_modemcontrol () & 0x8) >> 3;

    /* Check for hangup ie. DCD has been dropped */
    if (dcd == 0 && old_dcd == 1)
    {
        _swix (OS_AddCallBack, _INR (0, 1), line_dropped_entry, pw);
    }

    /* Check for going online ie. DCD has gone high */
    else if (dcd == 1 && old_dcd == 0)
    {
        _swix (OS_ReadMonotonicTime, _OUT (0), &connect_time);
    }


    old_dcd = dcd;

    return NULL;
}

#else

/* -----------------------------------------------------------------------------
   rs423_event_handler

   Deal with an RS423 error event.
 */

extern int rs423_event_handler (_kernel_swi_regs *r, void *pw)
{
    /* Check that this event is on our input stream */
    if (r->r[2] != serial_in)
        return 1;

    /* Check for SerialEvent_DCD (ie. line has changed state) */
    if ((r->r[1] & SerialEvent_DCD) == SerialEvent_DCD)
    {
        unsigned int control_lines;


        /* Read control lines */
        xosargs_ioctl (serial_in, 0, IOCtl_control_lines, IOCtl_read,
                       0, &control_lines);

        if ((control_lines & IOCtl_control_line_DCD) == 0)
        {
            /* DCD has dropped - other end has dropped line */
            dprintf (("", "DCD dropped\n"));
            _swix (OS_AddCallBack, _INR (0, 1), line_dropped_entry, pw);
        }

        else
        {
            /* DCD has risen - online */
            _swix (OS_ReadMonotonicTime, _OUT (0), &connect_time);
        }

        return 0;    /* claim the event */
    }

    return 1;    /* don't claim the event */
}

#endif




/* -----------------------------------------------------------------------------
   handlers_add_callback

   Add a callback to chat_do_script if there isn't already one pending.

   Returns
   success: NULL
   failure: pointer to error block
 */

extern _kernel_oserror *handlers_add_callback (void)
{
    _kernel_oserror *e = NULL;


    if (!chat_do_script_pending)
    {
        dprintf (("", "adding callback\n"));
        e = _swix (OS_AddCallBack, _INR (0, 1), chat_do_script_entry, pword);
        chat_do_script_pending = true;
    }

    return e;
}




/* -----------------------------------------------------------------------------
   handlers_add_callafter

   Add a callafter to a callback to chat_do_script.

   Inputs
   t: time to callafter

   Returns
   success: NULL
   failure: pointer to error block
 */

extern _kernel_oserror *handlers_add_callafter (const unsigned int t)
{
    _kernel_oserror *e = NULL;


    if (!callafter_pending)
    {
        e = _swix (OS_CallAfter, _INR (0, 2), t, callafter_entry, pword);
        callafter_pending = true;
    }
    return e;
}




/* -----------------------------------------------------------------------------
   handlers_remove_queued_callback

   Check if there is a callback to chat_do_script waiting, and if so remove it.

   Returns
   success: NULL
   failuer: pointer to error block
 */

extern _kernel_oserror *handlers_remove_queued_callback (void)
{
    _kernel_oserror *e = NULL;


    if (chat_do_script_pending)
    {
        e = _swix (OS_RemoveCallBack, _INR (0, 1), chat_do_script_entry, pword);
        chat_do_script_pending = false;
    }

    return e;
}




/* -----------------------------------------------------------------------------
   handlers_remove_queued_callafter

   Check if there is a callafter waiting, and if so remove it.

   Returns
   success: NULL
   failuer: pointer to error block
 */

extern _kernel_oserror *handlers_remove_queued_callafter (void)
{
    unsigned int  irqs;
    _kernel_oserror *e = NULL;

    irqs = irqs_off ();
    if (callafter_pending)
    {
        e = _swix (OS_RemoveTickerEvent, _INR (0, 1), callafter_entry, pword);
        callafter_pending = false;
    }
    irqs_restore (irqs);

    return e;
}




/* -----------------------------------------------------------------------------
   line_dropped

   Inform clients that the line has dropped.  Also tell active client that it
   should relinquish its serial I/O access rights.

   Returns
   NULL
 */

extern _kernel_oserror *line_dropped (_kernel_swi_regs *r, void *pw)
{
    unsigned int general_info = (status & Dialler_GeneralInfoMask);

    M_unused (r);
    M_unused (pw);

    if ((status & Dialler_Connected) == Dialler_Connected)
    {
        status |= Dialler_LineDropped;
        status |= Dialler_RemoteDroppedLine;
    }


    /* Need to call script_abort if we're executing a script */
    if (general_info == Dialler_ExecutingScript_Dial ||
        general_info == Dialler_ExecutingScript_Answer ||
        general_info == Dialler_ExecutingScript_Hangup)
    {
        status_changed ();
        script_abort (true);
    }
    else
    {
        /* If we're not executing a script then there may be a client active. */

        if (dialler_client_active)
        {
            status |= Dialler_RelinquishAccess;
            line_drop_pending = true;
            status_changed ();
        }
        else
        {
            status_changed ();

            /* Close down immediately.  No need to force a hangup because
             * the line has already dropped.
             */
            dialler_disconnect (false);
        }
    }

    return NULL;
}




/* -----------------------------------------------------------------------------
   callafter_handler

   Add a callback to chat_do_script

   Returns
   NULL
 */

extern _kernel_oserror *callafter_handler (_kernel_swi_regs *r, void *pw)
{
    M_unused (r);
    M_unused (pw);

    callafter_pending = false;
    handlers_add_callback ();
    return NULL;
}
