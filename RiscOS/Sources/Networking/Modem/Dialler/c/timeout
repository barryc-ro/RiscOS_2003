/* File:    timeout.c
 * Purpose: Handle timeouts
 * Author:  Ben Laughton
 * History:
 *
 * 1997-01-06: BAL
 * Created.
 *
 * 1997-03-20: BAL
 * Fixed bug in connection timeout.  If connection timeout was disabled in
 * script and SWI Dialler_Timeout was called later then timeout was not being
 * started.
 *
 * 1997-08-12: BAL
 * Fixed cancelling of connection timeout.
 *
 * 1998-02-13: BAL
 * Changed call to Dialler_HangUp so that Dialler and DiallerB can be built
 * from the same sources.
 *
 * 1998-10-04: SR
 * Removed the M_status_set(Dialler_AbortedScript_Timeout) from
 * timeout_timedout() because in some cases this is not a fatal error.
 * Delegated responsibility for setting this status to the chat.c code.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"
#include <stddef.h>
#include <stdio.h>
#include "swis.h"

/* Dialler */
#include "bool.h"
#include "chat.h"
#include "dialler.h"
#include "error.h"
#include "flags.h"
#include "handlers.h"
#include "header.h"
#include "interrupts.h"
#include "log.h"
#include "module.h"
#include "status.h"
#include "swidefs.h"
#include "timeout.h"



/* =============================================================================
 * Define constants
 */

#define CONNECTION_TIMEOUT_DEFAULT 0




/* =============================================================================
 * Declare global variables
 */

int timeout_running  = false;
int timed_out        = false;
int timeout_duration = DEFAULT_CHAT_TIMEOUT;

static int connection_timeout = CONNECTION_TIMEOUT_DEFAULT;
static int connection_counter;
static int connection_timeout_running;




/* =============================================================================
 * Define functions
 */

/* -----------------------------------------------------------------------------
+
   timeout_activate

   Activate the timeout: if the script timesout then timeout_timedout is called

   Returns
   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror *timeout_activate (void)
{
    unsigned int  irqs;
    _kernel_oserror *e;


    irqs = irqs_off ();

    if (!timeout_running)
    {
        if (timeout_duration > 0)
        {
            e = _swix (OS_CallAfter, _INR (0, 2),
                       timeout_duration * 100, timeout_timedout_entry, pword);
            M_e_check_return (e);

            timeout_running = true;
            M_debug (("Timeout activated"));
        }
        else
            timeout_running = false;
    }

    irqs_restore (irqs);

    return NULL;
}




/* -----------------------------------------------------------------------------
+
   timeout_timedout

   Called when a script timeout occurs

   Inputs
   r : pointer to register block
   pw: r12

   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror *timeout_timedout (_kernel_swi_regs *r, void *pw)
{
    M_unused (r);
    M_unused (pw);

    timed_out = true;
    timeout_running = false;

    handlers_add_callback ();

/*  SR:    This status change is now handled by the chat.c code, which
 *         has the option of swallowing the error.
 *
 *  M_status_set (Dialler_AbortedScript_Timeout);
 */
    return NULL;
}




/* -----------------------------------------------------------------------------
+
   timeout_cancel

   Cancel a script timeout if there is one running

   Returns
   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror *timeout_cancel (void)
{
    unsigned int  irqs;
    _kernel_oserror *e = NULL;


    irqs = irqs_off ();

    timed_out = false;

    if (timeout_running)
    {
        e = _swix (OS_RemoveTickerEvent, _INR (0, 1),
                   timeout_timedout_entry, pword);

        timeout_running = false;
        M_debug (("Timeout cancelled"));
    }

    irqs_restore (irqs);

    return e;
}




/* -----------------------------------------------------------------------------
+
    connection_timeout_set

    Set the length of the connection timeout

    Inputs
    r: pointer to register block
       r->r[1]: timeout length (-ve to read)

    Outputs
    r: pointer to register block

    Returns
    success: NULL
    failure: pointer to error block
-
 */

extern _kernel_oserror *connection_timeout_set (_kernel_swi_regs *const r)
{
    _kernel_oserror *e = NULL;

    if (r->r[1] > 0)
    {
        connection_timeout = r->r[1];
        M_debug (("connection_timeout = %d", connection_timeout));

        connection_timeout_reset ();

        /* start connection timeout if not already started */
        e = connection_timeout_start ();
    }

    else if (r->r[1] == 0)
        e = connection_timeout_cancel ();

    r->r[0] = connection_timeout;

    return e;
}




/* -----------------------------------------------------------------------------
+
   connection_timeout_reset

   Reset the connection timeout counter
-
 */

extern void connection_timeout_reset (void)
{
    unsigned int  irqs;

    /* Interrputs must be off otherwise a timeout could occur while the
     * counter is being reset
     */

    irqs = irqs_off ();

    connection_counter = connection_timeout;

    irqs_restore (irqs);
}




/* -----------------------------------------------------------------------------
+
   connection_timeout_start

   Setup the routine to decrement the connection timeout counter once every
   second

   Returns
   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror *connection_timeout_start (void)
{
    _kernel_oserror *e = NULL;


    if (!connection_timeout_running && connection_timeout > 0)
    {
        unsigned int  irqs;

        connection_counter = connection_timeout;

        irqs = irqs_off ();

        /* Time supplied to call every is no. centiseconds - 1 */
        e = _swix (OS_CallEvery, _INR (0, 2),
                   99, connection_timeout_dec_entry, pword);

        connection_timeout_running = true;

        irqs_restore (irqs);
    }

    return e;
}




/* -----------------------------------------------------------------------------
+
   connection_timeout_cancel

   Cancel a connection timeout if there is one running

   Returns
   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror *connection_timeout_cancel (void)
{
    unsigned int  irqs;
    _kernel_oserror *e = NULL;


    irqs = irqs_off ();

    if (connection_timeout_running)
    {
        connection_timeout_running = false;

        /* Remove the CallAfter routine */
        e = _swix (OS_RemoveTickerEvent, _INR (0, 1),
                   connection_timeout_dec_entry, pword);

        connection_counter = connection_timeout;
    }

    irqs_restore (irqs);

    return e;
}




/* -----------------------------------------------------------------------------
+
   connection_timeout_decrement

   Decrement the connection timeout counter

   Inputs
   r : pointer to register block
   pw: r12

   Returns
   NULL
-
 */

extern _kernel_oserror *connection_timeout_dec (_kernel_swi_regs *r, void *pw)
{
    M_unused (r);

    if (connection_counter-- == 0)
    {
        /* Setup a transient callback to remove the ticker event and
         * execute the hangup script
         */
        _swix (OS_AddCallBack, _INR (0, 1), connection_timedout_entry, pw);
    }

    return NULL;
}




/* -----------------------------------------------------------------------------
+
   connection_timedout

   Called when a connection has timed-out (ie. when connection_counter < 0)

   Inputs
   r : pointer to register block
   pw: r12

   Returns
   NULL
-
 */

extern _kernel_oserror *connection_timedout (_kernel_swi_regs *r, void *pw)
{
    M_unused (r);
    M_unused (pw);


    /* Remove the CallEvery routine */
    connection_timeout_cancel ();

    /* Execute the HangUp script */
    _swix (ThisDialler_HangUp, 0);

    return NULL;
}
