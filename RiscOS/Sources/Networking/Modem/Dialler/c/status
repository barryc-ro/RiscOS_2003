/* File:    status.c
 * Purpose: Status flags word routines
 * Author:  Ben Laughton
 * History:
 *
 * 1997-01-13: BAL
 * Created.
 *
 * 1998-02-13: BAL
 * Dialler and DiallerB can be built from same source.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

/* Dialler */
#include "dialler.h"
#include "flags.h"
#include "log.h"
#include "script.h"
#include "status.h"
#include "utils.h"




/* =============================================================================
 * Define contants
 */

#define Dialler_StateChangeMask 0x000007ff
#define Dialler_LineDroppedMask 0x00000800



/* =============================================================================
 * Declare global variables
 */

unsigned int status = Dialler_Disconnected;
unsigned int poll_word = 0;
static char *status_string = NULL;




/* =============================================================================
 * Define functions
 */

/* -----------------------------------------------------------------------------
+
   status_changd

   Clear / set  bits in the status word.  If this changes the status word then
   Service_DiallerStatus service call should be issued.  The major reason code
   is not considered: any operation on it is reported as a status change.
-
 */

extern void status_change (StatusOp op, unsigned int bit_mask)
{
    unsigned int new_status_value, old_status_value;
    unsigned int new_status_flags, old_status_flags;
    int old_status = status;


    new_status_value = bit_mask & Dialler_GeneralInfoMask;
    new_status_flags = bit_mask & ~Dialler_GeneralInfoMask;

    old_status_value = status & Dialler_GeneralInfoMask;
    old_status_flags = status & ~Dialler_GeneralInfoMask;

    /* The general status in the LSB of the status word stores mutually exlusive
     * values.  If this value is being cleared then only really clear it if it
     * currently contains the same value that we've been told to clear
     * eg. if told to clear 'Dialler_ExecutingScript_Dial' then only do so if
     * the current general info is 'Dialler_ExecutingScript_Dial'
     *
     * Setting the general status always overwrites the current contents.
     */

    switch (op)
    {
        case StatusOp_Clear:
            if (new_status_value == old_status_value)
                status &= ~Dialler_GeneralInfoMask;

            status &= ~new_status_flags;
            break;

        case StatusOp_Set:
            if (new_status_value > 0)
            {
                status &= ~Dialler_GeneralInfoMask;
                status |= new_status_value;
            }

            status |= new_status_flags;
            break;

        default:
            return;
    }


    if (status != old_status || (bit_mask & Dialler_MajorReasonCodeMask) != 0)
        status_changed ();
}




/* -----------------------------------------------------------------------------
+
   status_changed

   Despatches the dialler's service call when the status changes.
-
 */

extern void status_changed (void)
{
    /* Send the Service_DiallerStatus service call to indicate that the
     * dialler has changed state (eg. script has started or hangup occurred)
     */
#ifdef OLD_DIALLER
    _swix (OS_ServiceCall, _INR (0, 1), status, Service_DiallerStatus);
#else
    _swix (OS_ServiceCall, _INR (0, 1), status, Service_DiallerBStatus);
#endif

/*     syslog ("status = %08x", status); */
    M_debug (("sent service call: status = %08x", status));


    /* Set the pollword to the status */
    poll_word = status;
}




/* -----------------------------------------------------------------------------
+
   status_update_string

   Change the status string

   Inputs
   string: new status string
   len:    length of new status string

   Returns
   success: 0
   failure: 1
-
 */

extern int status_change_string (const char *const string, const int len)
{
    if (status_string != NULL)
    {
        free (status_string);
        status_string = NULL;
    }

    if (string != NULL)
    {
        if ((status_string = malloc (len + 1)) == NULL)
        {
            syslog ("System error: Out of memory");
            return 1;
        }

        strncpy (status_string, string, len);
        status_string[len] = '\0';
    }

    status_change (StatusOp_Set, Dialler_StatusStringChanged);

    return 0;
}




/* -----------------------------------------------------------------------------
+
   get_status

   Dialler_Status SWI handler

   Input
   r: pointer to register block

   Returns
   success: NULL
   failure: pointer to error block
*/

extern _kernel_oserror *get_status (_kernel_swi_regs *r)
{
    _kernel_oserror *e = NULL;
    unsigned int return_status = status;

    switch (r->r[0])
    {
        case Dialler_Status_ConnectTime:
            r->r[1] = (int) connect_time;
            break;

        case Dialler_Status_String:
            _kernel_irqs_off ();
            if (r->r[1] == 0)    /* return buffer size needed to store string */
            {
                if (status_string == NULL)
                    r->r[2] = 1;
                else
                    r->r[2] = strlen (status_string) + 1;
            }

            else
            {
                if (status_string == NULL)
                    * (char *) r->r[1] = '\0';
                else
                {
                    char *buffer = (char *) r->r[1];
                    int len = strlen (status_string);

                    len = M_min (r->r[2] - 1, len);
                    strncpy (buffer, status_string, len);
                    buffer[len] = '\0';
                    r->r[2] = len;
                }
                status &= ~Dialler_StatusStringChanged;
            }
            _kernel_irqs_on ();
            break;

        default:
            /* error */
            break;
    }

    r->r[0] = (int) return_status;

    return e;
}
