/* File:    log.c
 * Purpose: Dialler log
 * Author:  DN Walker, Ben Laughton
 * History:
 *
 * 1996-12-18: BAL
 * Inherited.
 *
 * 1997-02-28: BAL
 * Added suport for TML debugging fixed buffer overrun problem in logf.
 *
 * 1997-03-04: BAL
 * Added indentation to trace.
 *
 * 1998-02-06: BAL
 * Fixed embarassing memory leak in syslog().  Wasn't freeing time_format.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include <time.h>

/* Dialler */
#include "flags.h"
#include "log.h"

/* Unix libraries */
/* #include "sys/param.h" */
#define MAXPATHLEN 256




/* =============================================================================
 * Define contants
 */

#define Message_Max (50)
#define Message_Buf (2048)

#ifdef DEBUG
  #if defined DEBUG_TML
    #define Debug_Routine vPrintf
  #elif defined DEBUG_FILE
    #define Debug_Routine log_write_to_file
  #elif defined DEBUG_PRINTF
    #define Debug_Routine vprintf
  #elif defined PDebug_DEBUG
    #define Debug_Routine PDebug_VPrintf
  #endif
#endif




/* =============================================================================
 * Declare global variables
 */

char logfile_name[MAXPATHLEN];

static int message__last;
static int message__next;
static int message__head;
static int message__tail=Message_Buf;
static int message__ptr[Message_Max];
static char message__buf[Message_Buf];
#if defined Trace_TRACE || defined DEBUG
  static int trace_level = 0;
#endif




/* =============================================================================
 * Declare function prototypes
 */

static int message_num (void);
static const char *message_str (int age);
static void message_add (const char *str);
#ifdef DEBUG_FILE
  static void log_write_to_file (char *format, ...);
#endif




/* =============================================================================
 * Define functions
 */

extern void logf (const char *const str)
{
    static char line[256] = "";
    int line_len = strlen (line);
    int str_len = strlen (str);

    if (line_len + str_len >= sizeof (line))
    {
        syslog ("%s", line);
        line_len = 0;
    }

    strcpy (line + line_len, str);

    if (str[str_len - 1] == '\n')
    {
        line[line_len + str_len - 1] = '\0';
        syslog ("%s", line);
        line[0] = '\0';
    }
}




/* -----------------------------------------------------------------------------
+
   syslog
-
 */

extern void syslog (const char *format, ...)
{
    va_list args;
    char *buffer = NULL;


    buffer = malloc (Message_Buf);
    if (buffer == NULL)
    {
        message_add ("Low on memory, can't write log output");
        M_debug (("Low on memory, can't write log output"));
    }

    else
    {
        char *time_format;
        time_t t;
        struct tm t_struct;
        struct tm *pt_struct;

#ifdef Daytona
        time_format = malloc (strlen (format) + 13);
#else
        time_format = malloc (strlen (format) + 10);
#endif

        if (time_format == NULL)
        {
            message_add ("Low on memory, can't write log output");
            M_debug (("Low on memory, can't write log output"));
        }
        else
        {
#ifdef Daytona
            char time_string[9];

            time (&t);
            pt_struct = localtime (&t);
            memcpy (&t_struct, pt_struct, sizeof (t_struct));
            strftime (time_string, 9, "%H:%M:%S", &t_struct);
            sprintf (time_format, "%s.%02d %s",
                     time_string, clock () % 100, format);

#else

            time (&t);
            pt_struct = localtime (&t);
            memcpy (&t_struct, pt_struct, sizeof (t_struct));
            strftime (time_format, 10, "%H:%M:%S ", &t_struct);
            strcat (time_format, format);
#endif

            va_start (args, format);
            vsprintf (buffer, time_format, args);
            message_add (buffer);
            M_debug ((buffer));
            va_end (args);
            free (time_format);
        }

        free (buffer);
    }
}




/* -----------------------------------------------------------------------------
+
   printlog
-
 */

extern void printlog (void)
{
    int i;

    for (i = message_num (); i >= 0; i--)
    {
        puts (message_str (i));
    }
}



/*
 * Second try for the "message" handling routines.
 *
 * Each call to "message_add (s)" will add a new "most recent" message
 * to the "message recall list", using the contents of the string "s".
 *
 * The messages will be stored in such a way as to maximize "efficiency",
 * that is, the number of sequential messages that can be retrieved, given
 * a limited amount of space in which to store them.
 *
 * We keep a buffer of chars to hold the "text" of the messages, not
 * necessarily in "order", and an array of offsets into that buffer,
 * representing the actual messages.  This is made more complicated
 * by the fact that both the array of indexes, and the buffer itself,
 * are both treated as "circular arrays" for efficiency purposes, but
 * the strings may not be "broken" across the ends of the array.
 */




/* -----------------------------------------------------------------------------
+
   syslogflush
-
 */

extern void syslogflush (void)
{
    message__last = 0;
    message__next = 0;
    message__head = 0;
    message__tail = Message_Buf;
}




/* -----------------------------------------------------------------------------
+
   message_num

   How many messages are "available"?
-
 */

static int message_num (void)
{
    int last, next, n;

    /* Extract the indexes */
    last = message__last;
    next = message__next;

    /* Handle "wrap" */
    if (next < last)
    {
        next += Message_Max;
    }

    /* Extract the space */
    n = (next - last);

    /* Return the result */
    return n;
}



/* -----------------------------------------------------------------------------
+
   message_str

   Recall the "text" of a saved message
-
 */

static const char *message_str (int age)
{
    int x;
    int o;
    const char *s;

    /* Forgotten messages have no text */
    if ((age < 0) || (age >= message_num ()))
    {
        return "";
    }

    /* Acquire the "logical" index */
    x = (message__next - 1) - age;

    /* Handle wrap */
    if (x < 0)
    {
        x += Message_Max;
    }

    /* Get the "offset" for the message */
    o = message__ptr[x];

    /* Access the message text */
    s = &message__buf[o];

    /* Return the message text */
    return s;
}




/* -----------------------------------------------------------------------------
+
   message_add

   Add a new message, with great efficiency
-
 */

static void message_add (const char *str)
{
    int i, k, x, n;


    /*** Step 1 -- Analyze the message ***/

    /* Hack -- Ignore "non-messages" */
    if (!str)
    {
        return;
    }

    /* Message length */
    n = strlen (str);

    /* Important Hack -- Ignore "long" messages */
    if (n >= Message_Buf / 4)
    {
        return;
    }


    /*** Step 2 -- Attempt to optimize ***/

    /* Limit number of messages to check */
    k = message_num () / 2;

    /* Limit number of messages to check */
    if (k > Message_Max / 10)
    {
        k = Message_Max / 10;
    }

    /* Check the last few messages (if any to count) */
    for (i = message__next; k; k--)
    {
        int q;
        const char *old;


        /* Back up and wrap if needed */
        if (i-- == 0)
        {
            i = Message_Max - 1;
        }

        /* Stop before oldest message */
        if (i == message__last)
        {
            break;
        }

        /* Extract "distance" from "head" */
        q = (message__head - message__ptr[i]);

        /* Handle "wrapping" */
        if (q < 0)
        {
            q += Message_Buf;
        }

        /* Do not optimize over large distance */
        if (q > Message_Buf / 2)
        {
            continue;
        }

        /* Access the old string */
        old = &message__buf[message__ptr[i]];

        /* Compare */
        if (strcmp (old, str))
        {
            continue;
        }

        /* Get the next message index, advance */
        x = message__next++;

        /* Handle wrap */
        if (message__next == Message_Max)
        {
            message__next = 0;
        }

        /* Kill last message if needed */
        if (message__next == message__last)
        {
            message__last++;
        }

        /* Handle wrap */
        if (message__last == Message_Max)
        {
            message__last = 0;
        }

        /* Assign the starting address */
        message__ptr[x] = message__ptr[i];

        /* Success */
        return;
    }


    /*** Step 3 -- Ensure space before end of buffer ***/

    /* Kill messages and Wrap if needed */
    if (message__head + n + 1 >= Message_Buf)
    {
        /* Kill all "dead" messages */
        for (i = message__last; ; i++)
        {
            /* Wrap if needed */
            if (i == Message_Max)
            {
                i = 0;
            }

            /* Stop before the new message */
            if (i == message__next)
            {
                break;
            }

            /* Kill "dead" messages */
            if (message__ptr[i] >= message__head)
            {
                /* Track oldest message */
                message__last = i + 1;
            }
        }

        /* Wrap "tail" if needed */
        if (message__tail >= message__head) message__tail = 0;

        /* Start over */
        message__head = 0;
    }


    /*** Step 4 -- Ensure space before next message ***/

    /* Kill messages if needed */
    if (message__head + n + 1 > message__tail)
    {
        /* Grab new "tail" */
        message__tail = message__head + n + 1;

        /* Advance tail while possible past first "nul" */
        while (message__buf[message__tail-1])
        {
            message__tail++;
        }

        /* Kill all "dead" messages */
        for (i = message__last; ; i++)
        {
            /* Wrap if needed */
            if (i == Message_Max)
            {
                i = 0;
            }

            /* Stop before the new message */
            if (i == message__next)
            {
                break;
            }

            /* Kill "dead" messages */
            if ((message__ptr[i] >= message__head) &&
                (message__ptr[i] < message__tail))
            {
                /* Track oldest message */
                message__last = i + 1;
            }
        }
    }


    /*** Step 5 -- Grab a new message index ***/

    /* Get the next message index, advance */
    x = message__next++;

    /* Handle wrap */
    if (message__next == Message_Max)
    {
        message__next = 0;
    }

    /* Kill last message if needed */
    if (message__next == message__last)
    {
        message__last++;
    }

    /* Handle wrap */
    if (message__last == Message_Max)
    {
        message__last = 0;
    }



    /*** Step 6 -- Insert the message text ***/

    /* Assign the starting address */
    message__ptr[x] = message__head;

    /* Append the new part of the message */
    for (i = 0; i < n; i++)
    {
        /* Copy the message */
        message__buf[message__head + i] = str[i];
    }

    /* Terminate */
    message__buf[message__head + i] = '\0';

    /* Advance the "head" pointer */
    message__head += n + 1;
}




#if defined Trace_TRACE || defined DEBUG

extern void log_output (char *format, ...)
{
    va_list args;
    char *newline_format = NULL;


    newline_format = malloc (strlen (format) + 2);
    if (newline_format == NULL)
       return;

    strcpy (newline_format, format);
    strcat (newline_format, "\n");

    va_start (args, format);
    Debug_Routine (newline_format, args);
    va_end (args);

    free (newline_format);
}



#ifdef DEBUG_FILE
static void log_write_to_file (char *format, ...)
{
    char t_str[15];
    time_t t;
    struct tm t_struct;
    struct tm *pt_struct;
    va_list args;
    FILE *logfile;

    if ((logfile = fopen (logfile_name, "a+")) != NULL)
    {
        time (&t);
        pt_struct = localtime (&t);
        memcpy (&t_struct, pt_struct, sizeof (t_struct));
        strftime (t_str, 11, "%H:%M:%S", &t_struct);
        fprintf (logfile, "%s ", t_str);

        va_start (args, format);
        vfprintf (logfile, format, args);
        va_end (args);

        fflush (logfile);
        fclose (logfile);
    }
}
#endif



#ifdef Trace_TRACE
static void trace_indent (void)
{
    int i;

    for (i = 0; i < trace_level; i++)
        Printf (" |");
}


extern void log_trace_enter (const char *fn)
{
    Printf ("Dialler");
    trace_indent ();
    log_output (" %s", fn);
    ++trace_level;
}

extern void log_trace_exit (const char *fn)
{

    if (--trace_level < 0)
        trace_level = 0;

    Printf ("Dialler");
    trace_indent ();
    log_output ("~%s", fn);
}
#endif

#endif
