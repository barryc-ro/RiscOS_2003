/* File:    serial.c
 * Purpose: Routines to control the serial port
 * Author:  DN Walker, Ben Laughton
 * History:
 *
 * 1996-12-17: BAL
 * Inherited.
 *
 * 1997-02-28: BAL
 * Re-added buffer flushing code.
 *
 * 1998-02-26: BAL
 * Dual serial buffer flushing doesn't throw error because some older
 * dual-serial style device drivers don't support the buffer flushing IOCtl.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

#include "DebugLib/DebugLib.h"

/* Dialler */
#include "defs.h"
#include "dialler.h"
#include "error.h"
#include "flags.h"
#include "header.h"
#include "log.h"
#include "module.h"
#include "script.h"
#include "serial.h"
#include "utils.h"

#ifdef BLOCKDRIVERS
  #include "driver.h"
#else
  #include "ioctl.h"
#endif

#ifdef Daytona
#include "DaytonaHW.h"
#endif




/* =============================================================================
 * Define constants
 */

#define MAXPATHLEN 256

#ifndef OSFile_SyncOnLoad
#define OSFile_SyncOnLoad 0x80000000
#endif

#define Serial_InputThresh 32
#define Serial_OutputThresh 32




/* =============================================================================
 * Declare global variables
 */

unsigned int speed = 0;
int serial_close_pending = false;

#ifdef BLOCKDRIVERS
driver_t  driver = { NULL };
int portnumber = 0;
#else
char *serial_device = NULL;
int serial_in = 0, serial_out = 0;
static bool file_modified_upcall_attached = false;
#endif




/* =============================================================================
 * Define functions
 */

/* -----------------------------------------------------------------------------
+
   serial_initialise

   Initialise the serial device

   Returns
   success: NULL
   failure: pointer to error block
-
 */

#ifdef BLOCKDRIVERS

extern _kernel_oserror *serial_initialise (int reset)
{
    char *error;


    /* Ensure that a blockdriver has been loaded */
    if (driver.data == NULL)
        return NoBlockdriver;

    /* Initialise the blockdriver */
    dprintf (("", "initialising the blockdriver\n"));
    error = (char *) driver_initialise ();
    if (error)
    {
        dprintf (("", "initialisation failed\n"));
        return Blockdriver;
    }
    dprintf (("", "initialised blockdriver\n"));


    /* Set the computer <--> modem speed */
    if (speed != 0)
    {
        driver_rxspeed (speed);
        driver_txspeed (speed);

        dprintf (("", "set speed\n"));
    }


    /* Set the data format to 8n1 */
    driver_wordformat (0);


    /* Set the handshaking to RTS/CTS */
    driver_flowcontrol (1);

    if (reset)
        serial_force_hangup ();

    return NULL;
}

#else

extern _kernel_oserror *serial_initialise (int reset)
{
    unsigned int data_format;
    _kernel_oserror* e;


    /* Set the computer <--> modem speed */
    if (speed != 0)
    {
        e = xosargs_ioctl (serial_out, 0, IOCtl_baud_rate, IOCtl_write,
                           speed, NULL);
        M_e_check_return (e);
        dprintf (("", "set speed\n"));
    }


    /* Set the data format to 8n1 */
    data_format = (IOCtl_data_length_8 | IOCtl_stop_bits_1 | IOCtl_no_parity);
    e = xosargs_ioctl (serial_out, 0, IOCtl_data_format, IOCtl_write,
                       data_format, NULL);
    M_e_check_return (e);


    /* Set the handshaking to RTS/CTS */
    e = xosargs_ioctl (serial_in, 0, IOCtl_handshaking, IOCtl_write,
                       IOCtl_rts_cts_handshake, NULL);
    M_e_check_return (e);

    /* Set the buffer thresholds: dual serial module does not set default output
     * threshold properly.
     */
    e = xosargs_ioctl (serial_in, 0, IOCtl_buffer_threshold, IOCtl_write,
                       Serial_InputThresh, NULL);
    M_e_check_return (e);

    e = xosargs_ioctl (serial_out, 0, IOCtl_buffer_threshold, IOCtl_write,
                       Serial_OutputThresh, NULL);
    M_e_check_return (e);

    if (reset)
    {
        e = serial_force_hangup ();
        M_e_check_return (e);
    }

    return NULL;
}

#endif





/* -----------------------------------------------------------------------------
+
   serial_flush

   Flush the serial streams.
-
 */

#ifdef BLOCKDRIVERS

extern void serial_flush (void)
{
    driver_flushrx ();
    driver_flushtx ();
}

#else

extern void serial_flush (void)
{
    xosargs_ioctl (serial_in, 0, IOCtl_flush_stream, IOCtl_write, 0, NULL);
    xosargs_ioctl (serial_out, 0, IOCtl_flush_stream, IOCtl_write, 0, NULL);
}

#endif




#ifndef BLOCKDRIVERS

/* -----------------------------------------------------------------------------
+
   serial_open

   Open the serial input and output streams.  If we are using client-supplied
   handles then we don't need to do anything (in this case the handles are set
   in serial_setup_vars); otherwise we open the handles using the specified
   serial device.

   Returns:
   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror *serial_open (void)
{
    _kernel_oserror *e;


    if (!M_flags_is_set (Flags_OwnSerialHandles))
    {
        if (file_modified_upcall_attached == false)
        {
            _swix (OS_Claim, _INR (0, 2),

                   UpCallV,
                   file_modified_upcall_entry,
                   pword);
            file_modified_upcall_attached = true;
        }

        return NULL;
    }

    if (serial_device == NULL)
        return NoSerialDevice;

    if (serial_in == 0)
    {
        char *command = "serialclose";

        _swix (OS_CLI, _IN (0), command);

        dprintf (("", "opening serial input stream\n"));
        e = _swix (OS_Find, _INR (0, 2) | _OUT (0), 0x4f, serial_device, NULL,
                   &serial_in);
        M_e_check_return (e);
    }


    if (serial_out == 0)
    {
        dprintf (("", "opening serial output stream\n"));
        e = _swix (OS_Find,
                   _INR (0, 2) | _OUT (0),

                   0xcf,
                   serial_device,
                   NULL,

                   &serial_out);
        M_e_check_return (e);
    }

    if (file_modified_upcall_attached == false)
    {
        _swix (OS_Claim,
               _INR (0, 2),

               UpCallV,
               file_modified_upcall_entry,
               pword);

        file_modified_upcall_attached = true;
    }

    return NULL;
}

#endif




#ifdef BLOCKDRIVERS

/* -----------------------------------------------------------------------------
+
   serial_close

   Close the serial blockdriver

   Returns:
   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror *serial_close (void)
{
    if (driver.data)
        driver_closedown ();
    return NULL;
}

#else

/* -----------------------------------------------------------------------------
+
   serial_close

   Close the serial input and output streams.  If we don't own the handles
   then under no circumstances should we try to close them.

   Restriction
   serial_close must only be called after a hangup script has finished or if a
   script is being aborted so that a new script can start *immediately*.

   Returns:
   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror *serial_close (void)
{
    _kernel_oserror *e = NULL;


    dprintf (("", "Client active: %d\n", dialler_client_active));
    if (dialler_client_active)
        serial_close_pending = true;

    else
    {
        /* char *command = "serialoutput"; */

        if (file_modified_upcall_attached == true)
        {
            _swix (OS_Release, _INR (0, 2), UpCallV,
                   file_modified_upcall_entry, pword);
            file_modified_upcall_attached = false;
        }

        if (serial_in != 0)
        {
            if (M_flags_is_set (Flags_OwnSerialHandles))
                e = _swix (OS_Find, _INR (0, 1), OSFind_Close, serial_in);
            serial_in = 0;
        }


        if (serial_out != 0)
        {
            if (M_flags_is_set (Flags_OwnSerialHandles))
                e = _swix (OS_Find, _INR (0, 1), OSFind_Close, serial_out);
            serial_out = 0;
        }

        /* _swix (OS_CLI, _IN (0), command); */


        serial_close_pending = false;
    }

    return e;
}

#endif




/* -----------------------------------------------------------------------------
+
   serial_set_vars

   Set variables used for the serial device (device name and speed)

   Inputs
   device: pointer to device name
   speed:  speed

   Returns
   success: NULL
   failure: pointer to error block
-
 */

#ifdef BLOCKDRIVERS

extern _kernel_oserror *serial_set_vars (unsigned int flags_word,
                                         const char *const new_serial_device,
                                         const int new_speed,
                                         const int port)
{
    _kernel_oserror *e = NULL;


    if (flags_word & Dialler_Flags_Portnumber)
        portnumber = port;
    else
        portnumber = 0;

    /* Check if the client specified a new serial device */
    if (new_serial_device != NULL)
    {
        /* If there is already a blockdriver loaded then free the memory
         * used to store it
         */

        dprintf (("", "driver.data = %p\n", driver.data));

        if (driver.data != NULL && M_flags_is_set (Flags_MyBlockdriver))
        {
            dprintf (("", "freeing previously loaded blockdriver\n"));
            free (driver.data);
            driver.data = NULL;
        }

        if ((flags_word & 0x1) == 0)
        {
            char *filename;
            int size;


            filename = malloc (MAXPATHLEN);
            if (filename == NULL)
                return NoMemory;

            sprintf (filename,
                     "SerialDev:Modules.%s.Driver",
                     new_serial_device);

            dprintf (("", "loading new blockdriver: %s\n", filename));

            size = file_size (filename);
            if (size == -1)
            {
                free (filename);
                return CantOpenFile;
            }

            driver.data = malloc (size);
            if (driver.data == NULL)
            {
                free (filename);
                return NoMemory;
            }

            e = _swix (OS_File,
                       _INR (0, 3),

                       OSFile_LoadStampedNoPath,
                       filename,
                       driver.data,
                       OSFile_SyncOnLoad);

            free (filename);

            /* The next line generates a warning but it's alright */
/*             driver = (int (*) (int, ...)) driver_block; */

            M_flags_set (Flags_MyBlockdriver);
            dprintf (("", "loaded blockdriver\n"));
        }

        else
        {
            driver.data = (int *) new_serial_device;
            M_flags_clear (Flags_MyBlockdriver);
        }
    }

    dprintf (("", "using blockdriver at location %p\n", driver.data));

    /* Check if the client specified a new serial port speed */
    if (new_speed != 0)
        speed = new_speed;

    return e;
}

#else

extern _kernel_oserror *serial_set_vars (unsigned int flags_word,
                                         const char *const new_serial_device,
                                         const int new_speed,
                                         const int serial_input_handle,
                                         const int serial_output_handle)
{
    if (flags_word & Dialler_Flags_UseGivenHandles)
    {
        M_flags_clear (Flags_OwnSerialHandles);
        serial_in = serial_input_handle;
        serial_out = serial_output_handle;
    }
    else
    {
        M_flags_set (Flags_OwnSerialHandles);

        /* Check if the client specified a new serial device */
        if (new_serial_device != NULL)
        {
            int len = strlen (new_serial_device) + 1;

            /* The variable serial_device is intialised to NULL.  This means
             * that in the first call to this function realloc will behave like
             * malloc.
             */
            serial_device = realloc (serial_device, len);
            if (serial_device == NULL)
                return NoMemory;

            strcpy (serial_device, new_serial_device);
        }
    }


    /* Check if the client specified a new serial port speed */
    if (new_speed != 0)
        speed = new_speed;

    return NULL;
}

#endif




#ifdef BLOCKDRIVERS

extern _kernel_oserror *serial_force_hangup (void)
{
    unsigned int control_lines;


    /* DTR down to reset modem.  Wait for one second then set DTR */

    /* Read current state of control lines */
    control_lines = driver_controllines (-1);
    dprintf (("", "control lines: &%x\n", control_lines));

    /* Pull DTR low for one second to reset modem  */
    control_lines &= ~1;
    control_lines = driver_controllines (control_lines);
    dprintf (("", "control lines: &%x\n", control_lines));

    M_sleep (1);

    /* Pull DTR high again (leaving other lines in same state) */
    control_lines |= 1;
    control_lines = driver_controllines (control_lines);
    dprintf (("", "control lines: &%x\n", control_lines));

    return NULL;
}

#else

#ifdef Daytona

/* This bit is vile: if we are on Daytona then assume that the Dialler module
 * (as opposed to DiallerB) handles the remote modem and DiallerB handles the
 * local modem.
 */

#ifdef OLD_DIALLER

extern _kernel_oserror *serial_force_hangup (void)
{
    _swix (DaytonaHW_ResetModem,
           _INR (0, 2),

           DaytonaHW_ResetModem_PIOReg,
           DaytonaHW_ResetModem_External,
           serial_out);

    return NULL;
}

#else

extern _kernel_oserror *serial_force_hangup (void)
{
    dprintf (("", "Dialler calling HW with %d %d %d\n\n",
              DaytonaHW_ResetModem_PIOReg,
              DaytonaHW_ResetModem_Local,
              serial_out));

    _swix (DaytonaHW_ResetModem,
           _INR (0, 2),

           DaytonaHW_ResetModem_PIOReg,
           DaytonaHW_ResetModem_Local,
           serial_out);

    return NULL;
}

#endif


#else

extern _kernel_oserror *serial_force_hangup (void)
{
    unsigned int control_lines;
    _kernel_oserror *e = NULL;


    /* DTR down to reset modem.  Wait for DSR then set DTR */

    /* Read current state of control lines */
    e = xosargs_ioctl (serial_in,
                       0,
                       IOCtl_control_lines,
                       IOCtl_read,
                       0,
                       &control_lines);
    M_e_check_return (e);
    dprintf (("", "control lines: &%x\n", control_lines));

    /* Pull DTR low for one second to reset modem */
    control_lines &= (~IOCtl_control_line_DTR);
    e = xosargs_ioctl (serial_in,
                       0,
                       IOCtl_control_lines,
                       IOCtl_read | IOCtl_write,
                       control_lines & IOCtl_control_lines_writable,
                       &control_lines);
    M_e_check_return (e);
    dprintf (("", "control lines: &%x\n", control_lines));

    M_sleep (1);

    /* Pull DTR high again (leaving other lines in same state) */
    control_lines |= IOCtl_control_line_DTR;
    e = xosargs_ioctl (serial_in,
                       0,
                       IOCtl_control_lines,
                       IOCtl_read | IOCtl_write,
                       control_lines & IOCtl_control_lines_writable,
                       &control_lines);
    M_e_check_return (e);
    dprintf (("", "control lines: &%x\n", control_lines));

    return e;
}

#endif

#endif
