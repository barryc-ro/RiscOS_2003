/* File:    utils.c
 * Purpose: Miscellaneous useful routines
 * Author:  Ben Laughton
 * History:
 *
 * 1997-01-22: BAL
 * Created to combine the small files in the dialler.
 *
 * 1997-04-29: BAL
 * Added IOCtl group parameter to xosargs_ioctl.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

/* OSLib - used for definitions only */
#include "OS:fileswitch.h"
#include "OS:osfile.h"

/* Dialler */
#include "error.h"
#include "handlers.h"
#include "ioctl.h"
#include "log.h"
#include "utils.h"




/* =============================================================================
 * Define functions
 */

/* -----------------------------------------------------------------------------
+
   dup_mem

   Duplicate a block of memory and return a pointer to it.  Client is
   responsible for freeing memory.

   Inputs
   s: pointer to block of memory to duplicate
   n: size of block of memory to duplicate

   Returns
   success: pointer to duplicated block of memory
   failure: NULL
-
 */

extern void *mem_dup (void *s, size_t n)
{
    void *p = malloc (n);


    if (p)
        memcpy (p, s, n);

    return p;
}




/* -----------------------------------------------------------------------------
+
   str_dup

   Duplicate a string and return a pointer to it.  Client is responsible fo
   freeing memory.

   Inputs
   s: pointer to string to duplicate

   Returns
   success: pointer to duplicated string
   failure: NULL
-
 */

extern char *str_dup (const char *const s)
{
    size_t len = strlen (s) + 1;
    char *p = malloc (len);


    if (p)
        memcpy (p, s, len);

    return p;
}




/* -----------------------------------------------------------------------------
+
   sleepcs

   Do a non-multitasking sleep for a number of centiseconds

   centiseconds: number of centiseconds to sleep for
-
 */

extern void sleepcs (const unsigned int centiseconds)
{
    unsigned int end_t, t;


    _swix (OS_ReadMonotonicTime, _OUT (0), &end_t);
    end_t += centiseconds;

    while (_swix (OS_ReadMonotonicTime, _OUT (0), &t), t < end_t);
}




/* -----------------------------------------------------------------------------
+
   xosargs_ioctl

   Simplified interface to OS_Args 9 SWI (IOCtl)

   Inputs
   file     : file handle
   group    : IOCtl group
   reason   : IOCtl reason code
   wr_flags : IOCtl read / write as defined in IOCtl.h (can be both)
   data_in  : value to write (ignored if write flag not set)

   Outputs
   data_out : pointer to value read (specify NULL if not interested)

   Returns
   success  : NULL
   failure  : pointer to error block
-
 */

extern _kernel_oserror* xosargs_ioctl (const int file,
                                       const int group,
                                       const int reason,
                                       const int wr_flags,
                                       const unsigned int data_in,
                                       unsigned int *const data_out)
{
    _kernel_oserror* e = NULL;
    ioctl_t ioctl;

    ioctl.reason = reason;
    ioctl.group = group;
    ioctl.reserved = 0;
    ioctl.read = (wr_flags & IOCtl_read) ? 1 : 0;
    ioctl.write = (wr_flags & IOCtl_write) ? 1 : 0;
    ioctl.data = data_in;

    e = _swix (OS_Args, _INR (0, 2), OSArgs_IOCtl, file, &ioctl);
    if (e == NULL && data_out != NULL && (wr_flags & IOCtl_read))
        *data_out = ioctl.data;

    return e;
}




/* -----------------------------------------------------------------------------
+
   file_size

   Determine the size of a file in bytes

   Inputs
   filename: pointer to name of file

   Outputs
   size: size of file (-1 if error)

   Returns
   success: size of file in bytes
   failure: -1
-
 */

extern int file_size (const char *const filename)
{
    int object_size;
    int object_type;


    /* Read information about the object */
    _swix (OS_File, _INR (0, 1) | _OUT (0) | _OUT (4),
           OSFile_ReadStampedNoPath, filename, &object_type, &object_size);

    if (object_type != osfile_IS_FILE)
    {
        object_size = -1;
    }

    return object_size;
}




/* -----------------------------------------------------------------------------
+
   file_load

   Load a file into memory

   Checks the file to see what size it is, allocates the appropriate amount of
   memory for it and loads it into the address.

   Inputs
   filename: pointer to name of file to load

   Outputs
   location: pointer to address of memory where file was loaded

   Returns
   success: NULL
   failure: pointer to error block
-
 */

extern _kernel_oserror* file_load (const char *const  filename,
                                   char **const       location)
{
    int size;
    _kernel_oserror *e = NULL;


    size = file_size (filename);
    if (size == -1)
        return CantOpenFile;

    M_debug (("loading file %s (%d bytes)\n", filename, size));

    /* Allocate memory to store the file */
    *location = calloc (size + 1, sizeof (char));
    if (*location == NULL)
        return NoMemory;

    M_debug (("allocated memory for file"));


    /* Load the file at address given in r2 */
    e = _swix (OS_File,
               _INR (0, 3),

               OSFile_LoadStampedNoPath,
               filename,
               *location,
               0);

    if (e)
    {
        free (*location);
        *location = NULL;
        return e;
    }

    M_debug (("file loaded"));

    return NULL;
}
