/* File:    .c
 * Purpose:
 * Author:  Ben Laughton
 * History: 1997-07-: BAL: created
 */





/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

/* Toolbox */
#include "tboxlibs/event.h"
#include "tboxlibs/quit.h"
#include "tboxlibs/toolbox.h"
#include "tboxlibs/wimp.h"
#include "tboxlibs/wimplib.h"

/* Misc */
#include "dialler.h"

/* Dialstat */
#include "error.h"
#include "global.h"




/* =============================================================================
 * Define contants
 */

#define Wimp_Version 310
#define App_Dir      "<DialStat$Dir>"

#define Message_Service 0x4d300
#define TaskModule_RegisterService 0x4d302
#define TaskModule_DeRegisterService 0x4d303

/* Component IDs for status window */
#define StatusCode 0xa
#define ConnectionState 0x1
#define LineDroppedFrame 0x2
#define LineDroppedDialler 0x3
#define LineDroppedRemote 0x4
#define GeneralStatus 0x5
#define StatusString 0x8




/* =============================================================================
 * Declare global variables
 */

MessagesFD g_messages;

static ObjectId window_id;
static IdBlock id_block;

static int g_task_handle;
static int quit = 0;




/* =============================================================================
 * Declare function prototypes
 */

static void shutdown (void);

static void update_status_display (ObjectId id, unsigned int status);

static int get_status (int event_code, ToolboxEvent *event,
                       IdBlock *id_block, void *handle);

static int dialler_service (WimpMessage *message, void *handle);

static int quit_message_handler (WimpMessage *message, void *handle);

static int ibarmenu_quit_handler (int event_code, ToolboxEvent *event,
                                  IdBlock *id_block, void *handle);




/* =============================================================================
 * Define functions
 */

int main (void)
{
    char c[256];
    static int toolbox_events[] = {0};     /* All events */
    static int wimp_messages[] = {Message_Service, 0};
    _kernel_oserror *e;

    atexit (shutdown);

    e = toolbox_initialise (
            0, Wimp_Version, wimp_messages, toolbox_events, App_Dir,
            &g_messages, &id_block, NULL, &g_task_handle, NULL);
    M_e_check_abort (e);

    sprintf (c, "set test$th %x", g_task_handle);
    system (c);

    /* Get the TaskModule to inform us of Dialler status changes by converting
     * the Dialler's service call into a Wimp message.
     */
    e = _swix (TaskModule_RegisterService,
               _INR (0, 2),
               0x1,
               Service_DiallerBStatus,
               g_task_handle);
    M_e_check_abort (e);

    e = event_initialise (&id_block);
    M_e_check_abort (e);

    e = event_register_message_handler (Wimp_MQuit, quit_message_handler, NULL);
    M_e_check_abort (e);

    e = event_register_message_handler (Message_Service, dialler_service, NULL);
    M_e_check_abort (e);

    e = event_register_toolbox_handler (NULL_ComponentId, Quit_Quit,
                                        ibarmenu_quit_handler, NULL);
    M_e_check_abort (e);

    e = event_register_toolbox_handler (
            NULL_ComponentId, Window_AboutToBeShown, get_status, NULL);

    while (!quit)
        event_poll (NULL, NULL, NULL);

    exit (EXIT_SUCCESS);
}




static void shutdown (void)
{
    _swix (TaskModule_DeRegisterService, _INR (0, 2), 0, Service_DiallerBStatus, g_task_handle);
}




static void update_status_display (ObjectId id, unsigned int status)
{
    char status_string[32];
    int flags;

    sprintf (status_string, "%x", status);
    displayfield_set_value (0, id, StatusCode, status_string);

    switch (status & Dialler_ConnectedFlagsMask)
    {
        case Dialler_Disconnected:
            displayfield_set_value (0, id, ConnectionState, "disconnected");
            break;

        case Dialler_ConnectionChanging:
            displayfield_set_value (0, id, ConnectionState, "changing");
            break;

        case Dialler_ConnectedOutgoing:
            displayfield_set_value (0, id, ConnectionState, "connected outgoing");
            break;

        case Dialler_ConnectedIncoming:
            displayfield_set_value (0, id, ConnectionState, "connected incoming");
            break;

        default:
            break;
    }

    button_get_flags (0, id, LineDroppedDialler, &flags);
    if ((status & Dialler_LineDropped) &&
        (status & Dialler_RemoteDroppedLine) == 0)
        flags = WimpIcon_Selected;
    else
        flags = 0;
    button_set_flags (0, id, LineDroppedDialler, WimpIcon_Selected, flags);

    button_get_flags (0, id, LineDroppedRemote, &flags);
    if ((status & Dialler_LineDropped) && (status & Dialler_RemoteDroppedLine))
        flags = WimpIcon_Selected;
    else
        flags = 0;
    button_set_flags (0, id, LineDroppedRemote, WimpIcon_Selected, flags);

    switch (status & Dialler_GeneralInfoMask)
    {
        case Dialler_ExecutingScript_Dial:
            strcpy (status_string, "executing dial script");
            break;

        case Dialler_ExecutingScript_Hangup:
            strcpy (status_string, "executing hangup script");
            break;

        case Dialler_ExecutingScript_Answer:
            strcpy (status_string, "executing answer script");
            break;

        case Dialler_AbortedScript_Syntax:
            strcpy (status_string, "aborted script (syntax error)");
            break;

        case Dialler_AbortedScript_Timeout:
            strcpy (status_string, "aborted script (timeout)");
            break;

        case Dialler_AbortedScript_NoCarrier:
            strcpy (status_string, "aborted script (no carrier)");
            break;

        case Dialler_AbortedScript_Error:
            strcpy (status_string, "aborted script (error)");
            break;

        case Dialler_AbortedScript_NoDialtone:
            strcpy (status_string, "aborted script (no dialtone)");
            break;

        case Dialler_AbortedScript_Busy:
            strcpy (status_string, "aborted script (busy)");
            break;

        case Dialler_AbortedScript_NoAnswer:
            strcpy (status_string, "aborted script (no answer)");
            break;

        default:
            sprintf (status_string, "unknown %d", status & Dialler_GeneralInfoMask);
            break;
    }

    displayfield_set_value (0, id, GeneralStatus, status_string);

    _swix (DiallerB_Status, _INR (0, 2), Dialler_Status_String, status_string,
           sizeof (status_string));

     displayfield_set_value (0, id, StatusString, status_string);
}




static int get_status (int event_code, ToolboxEvent *event,
                       IdBlock *id_block, void *handle)
{
    unsigned int status;

    window_id = id_block->self_id;
    _swix (DiallerB_Status, _OUT (0), &status);
    update_status_display (window_id, status);

    return 1;    /* claim toolbox event */
}




static int dialler_service (WimpMessage *message, void *handle)
{
    _kernel_swi_regs *r = (_kernel_swi_regs *) &message->data;

    if (r->r[1] == Service_DiallerBStatus)
    {
        update_status_display (window_id, (unsigned) r->r[0]);
    }

    return 0;
}





static int quit_message_handler (WimpMessage *message, void *handle)
{
    quit = 1;
    return 1;    /* claim Wimp message event */
}




static int ibarmenu_quit_handler (int event_code, ToolboxEvent *event,
                                  IdBlock *id_block, void *handle)
{
    quit = 1;
    return 1;    /* claim toolbox event */
}
