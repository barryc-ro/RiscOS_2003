/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00tsa2.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains action routines for the AT command
/                       loopback test modes.
/
/     Product:          ACU core code
/
/     History:          ac00tsa2.c v3.90
/                       ac00tsa2.c v3.91
/                       ac00tsa2.c v3.92
/
/        Created:       11/16/91
/                       1/21/92
/                       1/12/93
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "ds_def.h"
#include "ds_mem.h"
#include "v25_def.h"
#include "v25_mem.h"
#include "acu_pro.h"
#include "mt_pro.h"
#include "edf.v42"
#include "edf.dte"
#include "edf.dce_line"

/* Local prototypes */
void test_cd_off(void);
void test_online_idle(void);
void test_idle(void);
void test_hangup(void);
void test_reset(void);
void parse_test_idle(void);
void terminate_test(void);
void terminate_RDL_test(void);
void terminate_ALB_test(void);
void self_test_init(void);
void self_test_ready(void);
void start_test_timer(void);
void output_test_message(ubyte);
void test_retrain(void);
void test_DTR_off(void);
void idle_test_DTR_off(void);
void test_key_press(void);
void test_hangup_line(ubyte);

/*******************************************************************************
/
/     Routine:       test_cd_off
/
/     Author:        RSA
/
/     Creation Date: 07/12/91
/
/     Description:   This Routine will process the event of carrier dropping
/                    during the TEST state.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: st_parse_test[], st_idle_test[], st_test_tab[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void test_cd_off(void)
{
   /* Need carrier for RDL tests */
   if ((test_in_progress == RDL_SELF_TEST) || (test_in_progress == RDL))
   {
      /* Hangup the TEST */
      build_event(E_HANGUP,NONE);

      /* Hangup the LINK */
      build_event(E_HANGUP,NO_CARRIER);
   }
}


/*******************************************************************************
/
/     Routine:       test_online_idle
/
/     Author:        RSA
/
/     Creation Date: 07/12/91
/
/     Description:   This Routine will change the state from TEST to IDLE
/                    TEST.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  st_idle.state, state_type[S_IDLE]
/
/     Users: st_test_tab[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void test_online_idle(void)
{
   /* Switch the DTE interrupts back to the ACU */
   modem_serial_direct(NORMAL);
   enable_acu_on_terminal();
   st_idle.state = S_IDLE;
   state_type[S_IDLE] = TEST;

   /* Need to return the Speed matching code to an idle state */
   system_idle();
   system_bg();

   build_event(E_MSG,OK);
}


/*******************************************************************************
/
/     Routine:       test_idle
/
/     Author:        RSA
/
/     Creation Date: 07/12/91
/
/     Description:   This Routine will change the state to TEST
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:   state_type[S_IDLE]
/
/     Users: st_test_tab[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void test_idle(void)
{
   if (acu_event->parm == TEST_RESET)
   {
      state_type[S_IDLE] = previous_idle_type;
      state_type[S_PARSE] = previous_idle_type;
   }
   else
      state_type[S_IDLE] = TEST;

   enable_acu_on_terminal();

   /* Don't autobaud during self tests. Some platforms have problems
      full duplex on the DCE I/O, and Autobauding on the DTE I/O (68302) */
   if ((test_in_progress == ALB_SELF_TEST) ||
      (test_in_progress == RDL_SELF_TEST))
   {
      dont_autobaud = TRUE;
   }
   else
   {
      dont_autobaud = FALSE;
      autobaud_on();
   }

	/*if (sr14.echo_cmd_flag)
		modem_serial_echo(ON);*/ /* ramn 9/20/96 */
}


/*******************************************************************************
/
/     Routine:       test_hangup
/
/     Author:        RSA
/
/     Creation Date: 07/15/91
/
/     Description:   This Routine will terminate the test in progress and
/                    return the dialer back to the state it was in before the
/                    test was initiated.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  state_type[S_IDLE],
/
/     Users: st_idle_test[], st_parse_test[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void test_hangup(void)
{
   /* Save message for later */
   test_hangup_msg = (ubyte)acu_event->parm;

   /* If second hangup request occurs during test termination,
      hangup-the-line is implied. */
   if ((st_test.state == TEST_TERMINATE) ||
      (st_test.state == TEST_TERMINATE_WAIT) ||
      (st_test.state == TEST_TERMINATE_COMPLETE))
   {
      /* Hangup link from idle mode */
      test_hangup_line(test_hangup_msg);
   }
   else
   {
      /* Terminate TEST from TEST mode */
      terminate_test();
   }
}


/*******************************************************************************
/
/     Routine:       test_reset
/
/     Author:        RSA
/
/     Creation Date: 07/16/91
/
/     Description:   This Routine will reset the dialer back to the state it
/                    was in before a test was attempted. This is called if
/                    the request for remote loopback was denied by the peer
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  state_type[S_IDLE], state_type[S_PARSE], test_in_progress
/               sr16.rdl, sr16.rdl_self_test
/
/     Users: st_test_tab[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void test_reset(void)
{
   /* Reset the IDLE state */
   state_type[S_IDLE] = previous_idle_type;
   state_type[S_PARSE] = previous_idle_type;

   /* Reset test flags */
   test_in_progress = FALSE;
   sr16.rdl = DISABLED;
   sr16.rdl_self_test = DISABLED;
   sr16.alb = DISABLED;
   sr16.alb_self_test = DISABLED;
}

/*******************************************************************************
/
/     Routine:       parse_test_idle
/
/     Author:        RSA
/
/     Creation Date: 07/15/91
/
/     Description:   This Routine handle the transition from PARSE state to
/                    the IDLE state with type TEST.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  st_idle.state, state_type[S_IDLE]
/
/     Users: st_parse_test[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void parse_test_idle(void)
{
   st_idle.state = S_IDLE;
   state_type[S_IDLE] = TEST;

   /* Clear DTE buffer to end parse */
   acu_from_clear();

   /* Don't autobaud if we're parsing during a self test.
      Some platforms (68302) can't autobaud if running FDPLX data on
      the DCE port */
   if ((test_in_progress == ALB_SELF_TEST) ||
      (test_in_progress == RDL_SELF_TEST))
      dont_autobaud = TRUE;
   else
      autobaud_on();

    /*if (sr14.echo_cmd_flag)
        modem_serial_echo(ON);*/ /* ramn 9/20/96 */
}

/*******************************************************************************
/
/     Routine:       terminate_test
/
/     Author:        RSA
/
/     Creation Date: 05/08/91
/
/     Description:   This Routine will terminate a test command
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  sr16, on_line_command, test_in_progress
/               timer_activated, error_occurred
/
/     Users:   at_H, and_T, at_Z
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void terminate_test(void)
{
   switch (test_in_progress)
   {
      case ALB:
         sr16.alb = DISABLED;
         terminate_ALB_test();
         break;

      case LDL:
         sr16.ldl = DISABLED;
         modem_digital_loopback(OFF);

         /* Need to turn DSR back on */
         modem_dte_dsr(ON);
         on_line_command = TRUE;

         st_test.state = TEST_TERMINATE_COMPLETE;
         test_hangup_msg = OK;
         break;

      case RDL:
         sr16.rdl = DISABLED;
         terminate_RDL_test();
         break;

      case RDL_SELF_TEST:
         sr16.rdl_self_test = DISABLED;
         terminate_RDL_test();
         break;

      case ALB_SELF_TEST:
         sr16.alb_self_test = DISABLED;
         terminate_ALB_test();
         break;

      default:
         error_occurred = TRUE;
         break;
   }
}

/*******************************************************************************
/
/     Routine:       terminate_RDL_test
/
/     Author:        RSA
/
/     Creation Date: 05/08/91
/
/     Description:   This Routine will terminate a Remote Digital Loopback
/                    test.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  on_line_command, send_ok
/
/     Users:   terminate_test
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void terminate_RDL_test(void)
{
   /* Only send RDL release if carrier is present */
   if (modem_check_CD())
      modem_send_rdl_release();

   on_line_command = TRUE;

   /* Need to reset the DTE and LINE parameters back to the values
      they were before the loopback test */
   if (operating_mode == NORMAL)
   {
      dte_reconfigure(dte_init_baud,acu_data_bits,acu_stop_bits,acu_parity,terminal_DTE_flowctrl,
         terminal_DTE_xon_char,terminal_DTE_xoff_char,
         modem_DTE_flowctrl,modem_DTE_xon_char,modem_DTE_xoff_char,
         pass_flowctrl,s[2],s[12],escape_mode);

      line_configure(modem_baud,acu_data_bits,acu_stop_bits,acu_parity,
         pass_flowctrl,DCE_flowctrl);
   }
   /* Else direct mode */
   else
   {
      /* Need to terminate the v.42 link under DIRECT mode */
      system_halt(ACU_HALTED);

      /* Need to reset to NORMAL because system_halt will reset LINE SCC */
      modem_serial_direct(NORMAL);
   }

   /* Need to turn DSR back on */
   modem_dte_dsr(ON);

   /* Start timer to time-out if modem does release from RDL */
   timer1 = 250; /* 2.5 secs to wait on drop */
   st_test.state = TEST_TERMINATE_WAIT;
}


/*******************************************************************************
/
/     Routine:       terminate_ALB_test
/
/     Author:        RSA
/
/     Creation Date: 05/08/91
/
/     Description:   This Routine will terminate a Local Anolog Loopback
/                    test.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:   terminate_test
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void terminate_ALB_test(void)
{
   /* Need to reset Speed matching code */
   system_reset();

   /* Drop connection w/out V.32 clear down sequence for ALB */
   modem_drop(DISABLED);

   timer1 = 100;  /* 100 * 10 msec == 1 sec to wait on hangup */
   st_test.state = TEST_TERMINATE_WAIT;
}


/*******************************************************************************
/
/     Routine:       self_test_init
/
/     Author:        RSA
/
/     Creation Date: 05/08/91
/
/     Description:   This Routine initializes the ACU to perform the self
/                    test.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:   terminate_test
/
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
/
*******************************************************************************/
void self_test_init(void)
{
   /* Init self test parameters */
   self_test_error_count = 0;  /* Reset current error count */
   self_test_char_rx = FALSE;  /* self test character rx flag */

   /* Provide a wait time to allow for the line to settle before
      sending the test pattern */
   timer1 = 100;               /* 100 * 10 msec == 1 sec */
   st_test.state = TEST_SETTLING_DELAY;
}


/*******************************************************************************
/
/     Routine:       self_test_ready
/
/     Author:        RSA
/
/     Creation Date: 01/24/95
/
/     Description:   This Routine is called when conditions are ready for the
/                    self test to begin.  This routine will initiate the self
/                    test.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: test_at_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void self_test_ready(void)
{
   switch (test_in_progress)
   {
      case ALB_SELF_TEST:
         /* Tests are performed from IDLE mode: must be able to take
            AT commands to cancel the test */
         build_event(E_IDLE,UNUSED);
         build_event(E_MSG,OK);
         break;

      case RDL_SELF_TEST:
      default:
         /* Tests are performed from IDLE mode: must be able to take
            AT commands to cancel the test */
         build_event(E_IDLE,UNUSED);
         build_event(E_MSG,OK);

         /* If RDL, set DCE character size and disable DIRECT hardware
            muxes to process the test data */
         if ((sr27.comm_mode != ASYNC) || (init_type == HARDWARE))
            modem_char(ASYNC,char_size,overspeed);
         modem_serial_direct(NORMAL);
         break;
   }  /* switch */

   /* Clear out DCE buffers before begining test data transfer */
   line_to_clear();
   line_from_clear();

   /* Load Test timer (S-Register) */
   start_test_timer();
}


/*******************************************************************************
/
/     Routine:       start_test_timer
/
/     Author:        RSA
/
/     Creation Date: 01/24/95
/
/     Description:   This Routine is called to start the self test timer.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: test_at_bg
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void start_test_timer(void)
{
   /* Load Test timer (S-Register 18 in seconds) */
   if (s[18] > 0)
   {
      timer_activated = TRUE;
      timer2 = s[18] * 100;
   }
}


/*******************************************************************************
/
/     Routine:       output_test_message
/
/     Author:        RSA
/
/     Creation Date: 05/08/91
/
/     Description:   This Routine will send the error count message to the
/                    terminal
/
/     Input Parameters: count - Number of errors encountered during the test
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:   terminate_test
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void output_test_message(ubyte count)
{
   ubyte *string;

   string = d_to_a(count);

   autobaud_off();
   acu_set_tx_baud(dte_baud);

   output_info(string,(ubyte)sr14.verbose_form);
   while (acu_to_num() > 0)
      ;
   while (!check_all_sent())
      ;
   autobaud_on();
}

/*******************************************************************************
/
/     Routine:       test_retrain
/
/     Author:        RSA
/
/     Creation Date: 12/09/91
/
/     Description:   This Routine will process the event of a retrain
/                    during the TEST state.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  RETRAIN_WHILE_ON_TEST
/
/     Users:   st_test_at[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void test_retrain(void)
{
   if ((test_in_progress == RDL_SELF_TEST) ||
      (test_in_progress == ETOE_SELF_TEST))
   {
      line_to_clear();

      st_retrain.state = S_RETRAIN; /* Allow the retrain background to */
                                    /* tell us when the retrain is done */
   }
}

/*******************************************************************************
/
/     Routine:       test_at_DTR
/
/     Author:        RSA
/
/     Creation Date: 03/16/93
/
/     Description:   This Routine will process the event of DTR dropping while
/                    in the TEST state of type AT_PSTN.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: st_test_at[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void test_DTR_off(void)
{
   if (dtr_timer1sec == 0)
   {
      /* if &d0 selected, ignore the DTR transition */
      /* if &d1 selected, enter escape mode from the online test */
      if ((sr21.DTR_control == 1) && ((comm_mode == ASYNC) || (comm_mode == SYNC_NORMAL)))
      {
         build_event(E_ESC_RXD,UNUSED);
         return;
      }

      /* if &d2 selected, exit executing test and disconnect link */
      if ((sr21.DTR_control == 2) || ((comm_mode == SYNC_DTR) ||
         (comm_mode == SYNC_TALK)) ||
         ((sr21.DTR_control == 0) && (comm_mode == SYNC_NORMAL)))
      {
         /* Hangup current test */
         build_event(E_HANGUP,OK);

         /* If RDL, hangup the link too... */
         if (test_in_progress == RDL)
            test_hangup_line(OK);

         return;
      }

      /* if &d3 selected, exit executing test, reset and disconnect link */
      if (sr21.DTR_control == 3)
      {
         build_event(E_RESET,UNUSED);
         return;
      }
   }
}

/*******************************************************************************
/
/     Routine:       idle_test_DTR_off
/
/     Author:        RSA
/
/     Creation Date: 03/17/93
/
/     Description:   This Routine will process the event of DTR dropping while
/                    in the IDLE state of type TEST.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: st_idle_at[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void idle_test_DTR_off(void)
{
   if (dtr_timer1sec == 0)
   {
      /* if &d2 selected, exit the selftest and disconnect */
      if ((sr21.DTR_control == 2) || ((comm_mode == SYNC_DTR) ||
         (comm_mode == SYNC_TALK)) || ((sr21.DTR_control == 0) &&
         (comm_mode == SYNC_NORMAL)))
      {
         /* Halt TEST */
         build_event(E_HANGUP,OK);

         /* If RDL, hangup the link too... */
         if (test_in_progress == RDL_SELF_TEST)
         {
            /* Already IDLE, so build another hangup event */
            build_event(E_HANGUP,OK);
         }
         return;
      }

      /* if &d3 selected, exit self test, reset and disconnect link */
      if (sr21.DTR_control == 3)
      {
         build_event(E_RESET,UNUSED);
         return;
      }
   }
}


/*******************************************************************************
/
/     Routine:       test_key_press
/
/     Author:        RSA
/
/     Creation Date: 01/20/95
/
/     Description:   This Routine will abort a test in progress due to a key
/                    board press.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: none.
/
/     Users: st_test_at[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void test_key_press(void)
{
   /* Abort the ALB connect sequence */
   if ((test_in_progress == ALB_SELF_TEST) || (test_in_progress == ALB))
   {
      switch (st_test.state)
      {
         case TEST_INIT:
         case TEST_DROP_CURRENT:
         case TEST_WAIT_PHYS_CONNECT:
            build_event(E_HANGUP,NO_CARRIER);
            break;
      }
   }
}


/*******************************************************************************
/
/     Routine:       test_hangup_line
/
/     Author:        RSA
/
/     Creation Date: 01/20/95
/
/     Description:   This Routine will hangup the modem from the line, and abort
/                    the test in progress.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: none.
/
/     Users: test_hangup, test_DTR_off
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void test_hangup_line(ubyte result_msg)
{
   /* Hangup the link from IDLE */
   build_event(E_IDLE,TEST_RESET);
   build_event(E_HANGUP,result_msg);

   /* Reset modem TEST config. */
   test_reset();
}
