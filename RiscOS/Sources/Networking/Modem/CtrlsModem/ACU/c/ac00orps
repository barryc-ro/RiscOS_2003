/****************************************************************************
/
/   Copyright 1988,1989,1990,1991,1992,1993,1994. All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.  The information contained herein is solely
/   for the use of RSA.
/
/       File:           ac00orps.c
/
/       Module Version: ACU 4.02
/
/       Function:       This file contains the action Routines for the ORIG
/                       state of type AT_PSTN.
/
/       Product:        ACU core code
/
/       History:        ac00orps.c v3.90
/                       ac00orps.c v3.92
/                       ac00orps.c v3.93
/                       ac00orps.c v3.94
/                       ac00orps.c v3.95
/                       ac00orps.c v3.96
/
/           Created:    10/7/91
/                       10/8/91
/                       12/04/91
/                       1/21/92
/                       3/6/92
/                       1/12/93
/
/           ---------------------------------------------------------
/           -                 Modifications                         -
/           ---------------------------------------------------------
/
/           Author & Date: RSA/keh 7/1/94
/           Description: Add interface to signal an ETC physical handshake
/           Reason: Add ETC support to core ACU
/
/           Author & Date:    RSA
/           Description:
/           Reason:
/
*****************************************************************************/
#include "../sys_def.h"
#include "../acu_def.h"
#include "../acu_mem.h"
#include "../v25_def.h"
#include "../v25_mem.h"
#include "../ds_def.h"
#include "../ds_mem.h"
#include "../acu_pro.h"
#include "../mt_pro.h"
#include "ptt.h"
/*MRM32996*/

#include "fab.h"
/* start change keh 7/1/94 => Add ETC interface */
#include "../acu_epro.h"           /* ACU ETC Driver interface routines */
/* end change keh 7/1/94 => Add ETC interface */


#include "../mt_ctls1/mt_macro.h" /* ramn 6/25/96 */
#include "acu_vcv.h"		/* ramn 10/25/96 */


void orig_pstn_bg(void);
void orig_init(void);
void orig_init_dial(void);
void orig_init_no_dial(void);
void orig_init_modem(void);
void originate_handshaking(void);
void acu_connect(void);

/*mrm3996*/

extern void dte_check_parity_bit(void);

/*mrm32896*/
/*V329poke*/
/*for version 3.29 dsp code the Tx level is reduced to meet the Fcc requirements*/

extern void send_pkt_to_dsp(void);
extern ubyte ms_mode;
/*SLei added */
extern void  InitiateDelayTimer(void);
extern void  BlackListInsert(void);
extern void  BlackListDelete(void);
extern void	 InitToneModeDetection(void);
extern ubyte ToneResult;
extern ToneModeEntry Tone[3];
extern ToneModeSwitch;
extern void InitiateToneATaps(void);
extern void InitiateDTMFLevel(void);
extern void InitiateTransmitLevel(void);
extern ubyte ErrorCode;



/* ramn 6/25/96 */
extern ubyte dsp_cp(void);
extern ubyte dsp_cp_packet;
extern ubyte ack_or_response;
extern void send_pkt_to_dsp(void);
#define  PACKET_MODEM_INIT       96
#define  PACKET_MODEM_INIT_LEN   0
#define ACK 0
extern ubyte vce_mode;	 /* this is online command */

ubyte	do_it_once = FALSE;		/* ramn 7/9/96 */
extern struct SREG22 s22orig;	/*SLei*/
extern ubyte CountryInfo;

ubyte handset_offhook_flag = 0; /* ramn 10/25/96 */

/*******************************************************************************
/
/    Routine: orig_pstn_bg
/
/    Author : RSA
/
/    Creation Date: 06/17/91
/
/    Description : This Routine will process the background functions for
/               the ORIG state of type AT_PSNT and V25_PSTN.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:  st_orig.state
/
/    Users: proc_orig
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void orig_pstn_bg(void)
{
    switch (st_orig.state)
    {
	   case INIT_ACU_DIAL:

		  /* In this state the ACU is being initialized to dial a
			 number.
		  */
		  orig_init_dial();
		  break;

	   case INIT_ACU_NO_DIAL:

		  /* In this state the ACU is being initialized to make a
			 connection.
		  */
		  orig_init_no_dial();
		  break;

	   case ORIG_WAIT_FOR_TONE:

		  /* In this state the ACU is waiting for dialtone detection,
			 if enabled.
		  */
		  orig_wait_for_dialtone();
		  break;

	   case ORIG_DIAL:

		  /* In this state the ACU is processing the dial command
			 */
		  originate_dial();
		  break;

	   case INIT_MODEM_ORIG:

		  /* In this state the ACU will make function calls to
			 set up the modem task to originate a call
		  */
		  orig_init_modem();
		  break;

	   case ORIG_HANDSHAKING:

		  /* In this state the ACU performs handshaking in the
			 originate mode.
		  */
		  originate_handshaking();
		  break;

	   case PROCESS_DIAL_MOD:

		  /* In this state the ACU will process any dial modifiers
			 that takes any length of time
		  */
		  process_modifiers();
		  break;
    }
}


/*******************************************************************************
/
/    Routine: orig_init
/
/    Author : RSA
/
/    Creation Date: 06/18/91
/
/    Description : This Routine is called to setup the ORIG state to make
/               a connection.
/
/    Input Parameters: none
/
/    Output Parameters: none
/
/    Global Variables Changed:  sr14.originate_flag
/
/    Users:    init_orig_dial, init_orig_no_dial
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/       Author & Date: RSA
/       Description:
/       Reason:
/
*******************************************************************************/
void orig_init(void)
{
    sr14.originate_flag = TRUE;

    if (!v25bis_active)
    {
	   /* CTS pin */
	   if ((comm_mode == SYNC_DTR) || (comm_mode == SYNC_TALK))
		  modem_dte_cts(OFF);

	   if (comm_mode == ASYNC)
		  modem_dte_cts(ON);
    }
    /*modem_serial_echo(OFF);*/ /* ramn 9/20/96 */


    /* Turn off RI indications incase ATD in the middle of a RING */
    /*modem_ri_led(OFF);*/ /* ramn 9/20/96 */
    modem_dte_ri(OFF);


	 /* ramn 10/25/96 */
/* this is done because in voice view mode if handset is off hook
	then the cid relay is also on. with the cid relay on and off hook
	relay on there is no way to bias the local phone hence we will
	never know if the handset is off hook once the off hook relay is
	on. hence we need to set the flag here.

	this flag is cleared in ac00orvv.c @ orig_vv_parse

*/
	 if(fax_class == 80)
	 {
	 	if (acu_get_handset_status() == HANDSET_OFF_HOOK)
			handset_offhook_flag = TRUE;
		else
			handset_offhook_flag = FALSE;
	 }

    off_hook();
#if 0
    if (sr21.auxiliary_relay_ctrl == 1)
	   modem_AA1_relay(ON);
    modem_td_relay(ON);
#endif /* ramn 1/17/96 */

}


/*******************************************************************************
/
/    Routine: orig_init_dial
/
/    Author : RSA
/
/    Creation Date: 05/07/91
/
/    Description : This Routine is called to initialize the ORIG state
/               to dial a number.
/
/    Input Parameters: none
/
/    Output Parameters: none
/
/    Global Variables Changed:  st_orig.state, timer1, error_flag
/                      timer2, timer3, send_ok, valid_char,
/
/    Users:    orig_pstn_bg();
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/       Author & Date: RSA/keh 4/6/95
/       Description: remove 3/18/94 jws fix., added setting of SR14 in
/          idle_at_orig (where the orig event is handled).
/       Reason: ATDT123;dt123 failed looking for dialtone
/
/       Author & Date:  RSA 3-18-94 jws
/       Description:    Removed check of on-hook status
/       Reason:         Fixes answering instead of originating when S14 =
/                       answer, then ATH1, then ATD
/
*******************************************************************************/

extern uword vce_send_tone_timer; /* ramn 7/9/96 */
void orig_init_dial(void)
{
	ubyte ch ;	/* ramn 6/25/96 */
	ubyte *tmp_dial_string_ptr;


   send_ok = FALSE;
   valid_char = TRUE;
   error_flag = FALSE;

   BlackListInsert(); /*SLei added black list*/
	if (ErrorCode){
		build_event(E_HANGUP,DELAYED_CALL);
		return;
		}

	if((fax_class == 8) && ((on_line_command) || (vce_mode == 1) ||(vce_mode == 0))) /* ramn 6/25/96 */
	{
		dsp_cp_packet = 0xC4;
		ch = dsp_cp();

		LOAD_MODEM_INIT
		ack_or_response = ACK;
		send_pkt_to_dsp();

		modem_speaker(ON);
		modem_init_call_progress(OFF_HOOK_DIALED);

#if 0 /* ramn 9/21/96 */
		if(do_it_once == FALSE)	/* ramn 7/9/96 */
		{
			vce_send_tone_timer = 100;
			while(vce_send_tone_timer)
			{
				process_wait();
			}
			do_it_once = TRUE;
		}
#endif

	}	 /* ramn 6/25/96 */


	InitToneModeDetection(); /*SLei added for tone mode detection*/
   /* Don't go off hook during a ring */
   if (modem_call_progress() != RINGON)
   {
/* start change (1/3) keh 4/5/95 >> atdt1;dt1 fails with 3/18/94 fix */
	  if (hook /*|| (fax_class ==8)*/) /* ramn 6/25/96 */
	  {
#if 0
/* start change 3-18-94 jws */
/*      if (hook) */
/*   { */
#endif
/* end change (1/3) keh 4/5/95 >> atdt1;dt1 fails with 3/18/94 fix */

		 orig_init();
		 /* If wait-for-dialtone is enabled, wait 5 seconds
			for 1 continuous second of dialtone */


#if 0
		if((fax_class == 8) && !hook)	/* ramn 6/25/96 */
		{
			modem_speaker(ON);
			modem_init_call_progress(OFF_HOOK_DIALED);
			timer3 = s[6] * 100;
		}
		else
#endif
if ((sr22.dialtone_enable) && (st_orig.type != PSTN_PHONE))
		{
			/* Set up the following timers:
			 * timer1: 5 second wait-for-dialtone
			 * timer2: 1 second of dialtone required
			*/
			timer1 = dialtone_wait_limit;
			timer2 = length_of_dialtone;

			modem_init_call_progress(OFF_HOOK_NOT_DIALED);

			st_orig.state = ORIG_WAIT_FOR_TONE;
			return;
		 }
		 /* Else set up the blind dialing (timer3): The greater
			of (s[6] * 100) and 2, in seconds */
		 else
		 {
			timer3 = s[6] * 100;
			if(fax_class == 80)		/* ramn 10/25/96 */
				modem_init_call_progress(OFF_HOOK_NOT_DIALED);
		 }
/* start change (2/3) keh 4/5/95 >> atdt1;dt1 fails with 3/18/94 fix */
#if 0
/*   } */
/* end change 3-18-94 jws */
#endif
	  }
/* end change (2/3) keh 4/5/95 >> atdt1;dt1 fails with 3/18/94 fix */

	  modem_config_dtmf_dial(s[11],s[11]);

/*mrm121696*/

#if 0
	  InitiateDTMFLevel(); /* SLei added for international DTMF Level*/
#endif

	  st_orig.state = ORIG_DIAL;

	  if(fax_class ==  8)			 /*ramn 6/25/96 */
	  {
	  		st_orig.type = VOICE;


		/* check if there is valid dtmf after atdt if yes wait till dial tone
			if not do not wait
			ramn 9/27/96 */

			tmp_dial_string_ptr = acu_dial_string_ptr;
			tmp_dial_string_ptr++;

			ch = *tmp_dial_string_ptr;

			if(do_it_once == FALSE)	/* ramn 7/9/96 */
			{
				if(check_dtmf(ch))
					timer3 =s[6] * 100;
				else
					timer3 = 10; /* ramn 9/21/96 */
				do_it_once = TRUE;	/* ramn 10/23/96 */
			}
			else
				timer3 = 10; /* ramn 9/21/96 */
	  }


   }
}

/*******************************************************************************
/
/    Routine: orig_init_no_dial
/
/    Author : RSA
/
/    Creation Date: 06/18/91
/
/    Description : This Routine is called to initialize the ORIG state
/               and skip the dialing process.
/
/    Input Parameters: none
/
/    Output Parameters: none
/
/    Global Variables Changed:  st_orig.state
/
/    Users:    orig_pstn_bg();
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description :
/    Reason:
/
/       Author & Date:  RSA 3-18-94 jws
/       Description:    Removed check of on-hook status
/       Reason:         Fixes answering instead of originating when S14 =
/                       answer, then ATH1, then ATD
/
*******************************************************************************/
void orig_init_no_dial(void)
{
/* start change (1/3) keh 4/5/95 >> atdt1;dt1 fails w/3/18/94 fix */
#if 0
/* start change 3-18-94 jws */
/*   if (hook) */
	   orig_init();
/* end change 3-18-94 jws */
#endif
   /* If on hook, initialize originating flags */
   if (hook)
	  orig_init();
/* end change (1/3) keh 4/5/95 >> atdt1;dt1 fails w/3/18/94 fix */

   /* Next step is to configuring the data pump */
   st_orig.state = INIT_MODEM_ORIG;

/* start change 4/10/95 keh => add phone mode */
   /* PSTN Phone mode uses this data orig routines to save code space:
	  No Data pump action for phone mode! */
   if (st_orig.type == PSTN_PHONE)
	  build_event(E_CONNECT,UNUSED);
/* end change 4/10/95 keh => add phone mode */
}


/*******************************************************************************
/
/    Routine: orig_init_modem
/
/    Author : RSA
/
/    Creation Date: 05/07/91
/
/    Description : This Routine will initialize the modem to start a
/               connection as the originator. It will look for ring back,
/               answer tone, or busy signals.
/
/    Input Parameters: none
/
/    Output Parameters: none
/
/    Global Variables Changed:  modem_modem, modem_baud, last_async_sync
/                      acu_state
/
/    Users:    orig_pstn_bg
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA/keh 8/14/95
/    Description: Add v.34/v.8 calls
/    Reason: ACU support for v.34
/
/    Author & Date: RSA/keh 11/1/94
/    Description: Add "etc_enabled" into modem_connect() call
/    Reason: ACU support for ETC.
/
/    Author & Date: RSA/keh 7/1/94
/ Description: Add "acu_ETC_init_modem()" call for ETC connections
/    Reason: ACU support for ETC.
/
*******************************************************************************/
void orig_init_modem(void)
{

/*MRM22096*/
/*temp variable for v32bis fix*/

    ubyte tmp, temp_tx_level,modem_baud1;


/*mrm32896*/
/*V329poke*/
/*for version 3.29 dsp code the Tx level is reduced to meet the Fcc requirements*/

	 ubyte *temp,baud2,automode1;


    busy_detect = TRUE;

/* start change keh 8/14/95 => add v.34 for acu */
   /* Configure datapump for V.34 */
   modem_v34_configure(sr116.asym_rates,sr116.asym_symbols,sr116.aux_channel,
				   s[115],s[115],*(ubyte *)&sr114);

   /* Configure datapump for V.8: V8 enabled? */
   if (automode & V8_ENABLED_BIT)
   {
	  if ((slN > 2) && !hyK)
		 tmp = TRUE;
	  else
		 tmp = FALSE;

	  modem_v8_configure(V8_DUPLEX_DATA,tmp,V8_NO_CELLULAR);
   }
/* start change keh 8/14/95 => add v.34 for acu */

    /* If cellular operation is enabled, Need to force the transmit level to
	   be -10 dB. */
    if ((prnM || dial_K) && (dial_J || (link_negot == CONNECT_1200BPS)))
	   temp_tx_level = 10;
    else
	   temp_tx_level = s[91];

    modem_set_parameters(s[9],s[7],s[10],v32_retrain,temp_tx_level,
					receive_threshold,s[108]);

    modem_baud = translate_modem_baud();
    modem_mode = translate_modem_mode(modem_baud);

/*MRM22096*/
/*temp variable for v32bis fix*/

	if (((s[37]== 0) || (s[37] >= 12)) && 	((ms_mode == V34) || (ms_mode == V34S)))

	{
	 	modem_baud1 = BPS14400;
	}
	else
 	{
		modem_baud1 = modem_baud;
	}

	baud2 = get_autobaud_rate();

		automode1 = automode;

 	if (baud2 == 3)
	{
	 	modem_baud1 = BPS1200;
		modem_mode = V22;
		automode1=1;
	}

    if (dial_J || (link_negot == CONNECT_1200BPS))
    {
	   dial_J = FALSE;
	   modem_baud = BPS1200;
	   modem_mode = V22;
    }

    /* Need to update the modem with the selected baud rates     */
    update_modem_rate_seq();

    /* Reset the system and determine the type of connection to be tried   */
    system_reset();
    system_set_parameters();
    modem_init_call_progress(OFF_HOOK_DIALED);

    if ((operating_mode == DIRECT) && (init_type == HARDWARE))
	   modem_char(last_async_sync,dipsw_char_size,dipsw_overspeed);
    else
	   modem_char(last_async_sync,char_size,overspeed);

    st_orig.state = ORIG_HANDSHAKING;

/*MRM32996*/

#if CUTLASS_C6 == 1

/*mrm32896*/
/*V329poke*/
/*for version 3.29 dsp code the Tx level is reduced to meet the Fcc requirements*/

	if ((ms_mode == V34) || (ms_mode == V34S) )
	{
     current_command [0] = 0x0c;
     current_command [1] = 0x00;
  	  current_command [2] = 0x06;
     current_command [3] = 0x00;
     current_command [4] = 0x5F;
     current_command [5] = 0x16;
     current_command [6] = 0x00;
     current_command [7] = 0x00;
	  current_command [8] = 0x84;
     current_command [9] = 0x1e;


	  temp = (ubyte *)(COM_RAM);
	  *temp = 0x0c0;

     ack_or_response = 0;
     send_pkt_to_dsp();

	}
#endif

    		tmp = calling_tone;

/*MRM32196*/

	 if ((calling_tone == 2) && (modem_mode >= V34S))
    		tmp = 0;

	 if ((calling_tone == 2) && (modem_mode <= V32BIS))
    		tmp = 1;

/*SLei61396*/
	InitiateToneATaps(); /* SLei added */

/*MRM22096*/
/*temp variable for v32bis fix*/

    modem_connect((ubyte)sr14.originate_flag,modem_baud1,modem_mode,
			 (ubyte)sr27.clock_source,(ubyte)sr27.leased_line,automode1,
/* start change keh 11/94 => Change ETC interface */
/*              (ubyte)(fax_class ? 1:0) ,tmp); */
			 (ubyte)(fax_class ? 1:0) ,tmp,
		   (acu_ETC_enabled() && !fax_class));
/* end change keh 11/94 => Change ETC interface */

/* start change keh 7/1/94 => Add ETC interface */
    /* If ETC and no FAX, signal the modem task to make an ETC connection */
    if (acu_ETC_enabled() && (fax_class == 0))
	   acu_ETC_init_modem();
/* end change keh 7/1/94 => Add ETC interface */

/*SLei added*/
	InitiateTransmitLevel();
}

/*******************************************************************************
/
/    Routine: originate_handshaking
/
/    Author : RSA
/
/    Creation Date: 05/07/91
/
/    Description : This Routine is performs the handshaking for the ORIG state.
/               It is waiting for carrier in order to proceed to the
/               ONLINE state.
/
/    Input Parameters: none
/
/    Output Parameters: none
/
/    Global Variables Changed:  busy_detect
/
/    Users:    orig_pstn_bg
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void originate_handshaking(void)
{
    ubyte call_prog_status;
	ubyte *string;/*SLei added*/

    if (modem_status != IDLE_STATUS)
    {
	   if (modem_check_dsr())
		  if ((DSR_only_at_handshaking) || (comm_mode != ASYNC))
			 modem_dte_dsr(ON);


	   call_prog_status = modem_call_progress();

	   if (call_prog_status == ANSWER_TONE)
	   {
		  busy_detect = FALSE;
	   }

	   if (/*call_prog_status*/ ToneResult == RINGBACK) { /* Slei added*/
		  if ((voice_dist_ring_active & 0x02) == 0x02) {
		 	  string = (ubyte*) RINGBACKSTRING;
			  output_info(string,STORED_NUM);
			  ToneResult = FALSE;
			}
			  busy_detect = FALSE;
			}

	   if ((busy_detect == TRUE) && ((sr22.busy_enable)
		  && (/*call_prog_status*/ ToneResult == BUSY_SIGNAL))) /*SLei added*/
	   {
		  ToneModeSwitch = ToneModeIdle;
		  build_event(E_HANGUP,BUSY);
		  InitiateDelayTimer();
		  return;
	   }

	   if (modem_status == FAX_CONNECTED)
	   {
		  ToneModeSwitch = ToneModeIdle;
		  BlackListDelete();
		  start_fax_connection();
	   }
	   else if (modem_status == CONNECTED_STATUS)
	   {
		  BlackListDelete();
		  acu_connect();
	   }
    }
    else {
 		ToneModeSwitch = ToneModeIdle; /*SLei added*/
		InitiateDelayTimer();
	   build_event(E_HANGUP,NO_CARRIER);
		}
}


/*******************************************************************************
/
/    Routine: acu_connect
/
/    Author : RSA
/
/    Creation Date: 05/07/91
/
/    Description : This Routine is called to start the data phase after
/               carrier is present.
/
/    Input Parameters: none
/
/    Output Parameters: none
/
/    Global Variables Changed:  modem_baud, last_status, dtr_timer1sec,
/                      CTS_up_flag, CTS_turn_on_flag, acu_state
/                      cts_timer
/
/    Users:    answ_handshaking, originate_handshaking
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/       Description:
/       Reason:
/
*******************************************************************************/
void acu_connect(void)
{
    ubyte tmp;

	ToneModeSwitch = ToneModeIdle; /*SLei added*/
	if (CountryInfo == German) {
		sr22 = s22orig;
		}

    if ((sr22.speaker_ctrl == ON_UNTIL_CD) ||
	   (sr22.speaker_ctrl == OFF_DIALING))
	   modem_speaker(OFF);


/*mrm3996*/

/*check the parity prior to going online*/
	dte_check_parity_bit();

    get_modem_baud_and_mode();

/*mrm9296*/
/*mct*/

	 if (((ms_mode == V34)|| (ms_mode == V34S)) && (N == 0) )
	 {
				  if (modem_mode < V34S)
	   		  {
						build_event(E_HANGUP,NO_CARRIER);
						return;
				  }

	 }

/*mrm111996*/
/*dsp reported a none valid bit rate tx=1200\rx=1200 in v34 mode*/
  /*	 if ((ms_mode == V34)|| (ms_mode == V34S))*/
	 if ((modem_mode == V34)|| (modem_mode == V34S) ||
		  (modem_mode == V34_ASYMETRIC))	/* ramn 11/21/96 */
	 {
				  if (modem_baud <= BPS1200)
	   		  {
						build_event(E_HANGUP,NO_CARRIER);
						return;
				  }

	 }


    /* Added to have the HS LED reflect the line speed while connected */
/* changed by ramn on 8/1/96 */
/*    if (modem_baud >= BPS2400 && modem_baud <= BPS57600)*/
	 if (modem_baud >= BPS2400 && modem_baud != BPS600)
		   modem_hs_led(modem_baud);
    else
	   modem_hs_led(OFF);

    /*modem_dte_112(ON);*/  /* ramn 9/20/96 */

    /*fp_mode_led_on();*/ /* ramn 9/20/96 */

    modem_init_call_progress(ON_LINE);

#if 0
	 modem_dte_rlsd(ON);	/* added based on mrm's reco, ramn 9/20/96 */
#endif

    if (comm_mode == AUTOSYNC)
    {
	   build_event(E_CONNECT,CONN_AUTOSYNC);
	   build_event(E_MSG,CONNECT_XXXX);
	   return;
    }

    /* Cannot change line speed if running asynchronous direct or \J1      */
    tmp = ((((operating_mode != DIRECT) && (!bps_adjust)) ||
	   (comm_mode != ASYNC)) && (autofallback));

    modem_retrain_enable(perE,s[110],tmp);

    /* Output carrier message */

/*MRM22096*/

/*
    build_event(E_MSG,CARRIER_XXXX);
*/
    build_event(E_CONNECT,CONN_DATA);

    /* Need to initialize the system for a connection  */
    system_init();

    if (operating_mode == DIRECT)
    {
	   if (comm_mode != ASYNC)
		  modem_char(SYNC_NORMAL,char_size,overspeed);

	   build_event(E_MSG,CONNECT_XXXX);
    }
    else
    {
	   /* Temp solution PDS 9/13/90, disable TX A/S converter */
/*        modem_char(0X02,char_size,overspeed);*/
	   modem_serial_direct(NORMAL);

	   if (sr14.originate_flag == TRUE)
		  system_start(ORIGINATE);
	   else
		  system_start(ANSWER);
	   last_status = 0xff;
    }
}

