/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00cmex.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains the code for the Microcom extended
/                       command set.
/
/     Product:          ACU core code
/
/     History:          ac00cmex.c v3.90
/                       ac00cmex.c v3.91
/                       ac00cmex.c v3.92
/                       ac00cmex.c v3.93
/                       ac00cmex.c v3.95
/                       ac00cmex.c v3.96
/                       ac00cmex.c v4.02
/
/        Created:       9/16/91
/                       10/17/91
/                       11/16/91
/                       1/21/92
/                       3/10/92
/                       1/12/93
/                       12/12/94
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "ll_pro.h"
#include "v25_pro.h"
#include "mt_pro.h"

void sl_A(ubyte *);
void per_A(ubyte *);
void sl_B(ubyte *);
void sl_C(ubyte *);
void per_C(ubyte *);
void per_E(ubyte *);
void per_G(ubyte *);
void sl_G(ubyte *);
void sl_I(ubyte *);
void sl_J(ubyte *);
void sl_K(ubyte *);
void sl_L(ubyte *);
void sl_N(ubyte *);
void sl_O(void);
void sl_Q(ubyte *);
void sl_T(ubyte *);
void sl_U(void);
void sl_V(ubyte *);
void sl_X(ubyte *);
void sl_Y(void);
void sl_Z(void);
void hy_J(ubyte *);
void hy_B(void);
void hy_C(ubyte *);
void hy_K(ubyte *);
void hy_Q(ubyte *);
void hy_U(void);
void hy_V(void);
void qu_H(ubyte *);
void qu_M(ubyte *);
void qu_N(uword *);
void qu_O(ubyte *);
void per_T(ubyte *);
void ast_H(ubyte *);
void prn_M(ubyte *);


/*******************************************************************************
/
/     Routine:       sl_A
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine selects the maximum MNP block size
/
/                    AT\A  0 - Set block size max 64 characters
/                          1 - Set block size max 128 characters
/                          2 - Set block size max 192 characters
/                          3 - Set block size max 256 characters
/                          4 - Set block size max 32 characters
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, slA, reconfigure
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void sl_A(ubyte *param_ptr)
{
   if (*param_ptr <= 4)
   {
      slA = *param_ptr;
      reconfigure = TRUE;
   }
   else
      error_occurred = TRUE;
}

/*******************************************************************************
/
/     Routine:       per_A
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine sets the autoreliable fallback character
/        
/                    AT%A 0-127 ASCII character
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, perA
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void per_A(ubyte *param_ptr)
{
   if (*param_ptr <= 127)
      perA = *param_ptr;
   else
      error_occurred = TRUE;
}



/*******************************************************************************
/
/     Routine:       sl_B
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine causes b break to be transmitted
/        
/                    AT\B  1-9 length of break
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  break_length
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void sl_B(ubyte *param_ptr)
{
   /* Return indication of NO CARRIER if the modem is not connected */
   if (!on_line_command)
   {
      build_event(E_IDLE,UNUSED);
      build_event(E_MSG,NO_CARRIER);
      return;
   }

   if (*param_ptr <= 9)
   {
      break_length = *param_ptr * 10;
      system_send_break(break_length);
   }
   else
      error_occurred = TRUE;
}

/*******************************************************************************
/
/     Routine:       sl_C
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine selects the auto-reliable fallback option
/
/                    AT\C  0 - Does not buffer data
/                          1 - Buffers data for 4 sec, until 200 characters
/                              have been buffered.
/                          2 - Does not buffer data. Switches to normal upon
/                              receipt of character defined by the %A command.
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, slC
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void sl_C(ubyte *param_ptr)
{
   if (*param_ptr <= 2)
      slC = *param_ptr;
   else
      error_occurred = TRUE;
}

/*******************************************************************************
/
/     Routine:       per_C
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine selects the MNP data compression option
/
/                    AT%C  0 - Class 5 disabled
/                          1 - Class 5 enabled
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, perC
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void per_C(ubyte *param_ptr)
{
   if (*param_ptr <= 1)
      perC = *param_ptr;
   else
      error_occurred = TRUE;
}


/*******************************************************************************
/
/     Routine:       per_E
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine selects auto-retrain option
/
/                    AT%E  0 - Auto-retrain disabled
/                          1 - Auto-retrain enabled
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, perE
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void per_E(ubyte *param_ptr)
{
   if (*param_ptr <= 1)
      perE = *param_ptr;
   else
      error_occurred = TRUE;
}


/*******************************************************************************
/
/     Routine:       per_G
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine selects the auto-fallback option
/
/                    AT%G  0 - Auto-fallback disabled
/                          1 - Auto-fallback enabled
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, autofallback
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void per_G(ubyte *param_ptr)
{
   if (*param_ptr <= 1)
      autofallback = *param_ptr;
   else
      error_occurred = TRUE;
}

/*******************************************************************************
/
/     Routine:       sl_G
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine will set modem port flow control
/
/                    AT\G  0 - Disables modem port flow control
/                          1 - Enables modem port flow control
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, slG
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void sl_G(ubyte *param_ptr)
{
   if (*param_ptr <= 1)
   {
      slG = *param_ptr;
      reconfigure = TRUE;
   }
   else
      error_occurred = TRUE;
}


/*******************************************************************************
/
/     Routine:       sl_J
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine selects BPS adjust option
/
/                    AT\J  0 - Disable BPS adjust
/                          1 - Enable BPS adjust
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, bps_adjust
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void sl_J(ubyte *param_ptr)
{
   if (*param_ptr <= 1)
      bps_adjust = *param_ptr;
   else
      error_occurred = TRUE;
}    


/*******************************************************************************
/
/     Routine:       sl_K
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine selects break control
/
/           (In connect state, if reliable mode then transmit break to remote)
/              0,2,4:   Enter command state but do not send a break
/              1:       Destructive/Expedited
/              3:       Non-destructive/Expedited
/              5:       Non-destructive/Non-expedited
/              
/           (In command state, if reliable mode then transmit break to remote)
/              0,1:     Destructive/Expedited
/              2,3:     Non-destructive/Expedited
/              4,5:     Non-destructive/Non-expedited
/              
/           (In connect state, if direct mode then receive break at serial port)
/              0,2,4:   Immediately send break and enter command state
/              1,3,5:   Immediately send break through
/              
/           (In connect state, receive break at modem port, send to serial port)
/              0,1:     Destructive/Expedited
/              2,3:     Non-destructive/Expedited
/              4,5:     Non-destructive/Non-expedited
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, slK, reconfigure
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void sl_K(ubyte *param_ptr)
{
   if (*param_ptr <= 5)
   {
      slK = *param_ptr;
      reconfigure = TRUE;
      system_reconfigure();
   }
   else
      error_occurred = TRUE;
}

/*******************************************************************************
/
/     Routine:       sl_L
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine selects MNP link type
/
/                    AT\L  0 - Initiates stream link
/                          1 - Initiates block link
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, slL
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void sl_L(ubyte *param_ptr)
{
   /* 0 - Is the only supported command */
   if (*param_ptr == 0)
      slL = 0;
   else
      error_occurred = TRUE;
}

/*******************************************************************************
/
/     Routine:       sl_N
/
/     Author:        RSA
/
/     Creation Date: 06/13/91
/
/     Description:   This routine selects the Protocol Operating mode.
/
/                    AT\N  0 - Normal mode
/                          1 - Direct mode
/                          2 - Auto-reliable MNP mode
/                          3 - Auto-reliable V.42 mode
/                          4 - Reliable V.42 mode
/                          5 - LAP-M Reliable mode (LAP-M or disconnect)
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, slN
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void sl_N(ubyte *param_ptr)
{

/* DEBUG ONLY */
extern void V80_conf_inband_detc(ubyte);

   /* Can't change Error Correction while connected */
   if (on_line_command == TRUE)
   {
      error_occurred = TRUE;
      return;
   }

   if (*param_ptr <= 6)
   {
       /* The modem must support direct mode to accept this command */
       if ((*param_ptr == DIRECT) && !acu_cfg.direct)
           error_occurred = TRUE;
       else
       {
           slN = *param_ptr;

        if (*param_ptr == DIRECT)
             slN = NORMAL;

           switch (slN)
           {
               case (0):
                   aorig_rqst = 1;
                   aorig_fbk  = 0;
                   aans_fbk   = 1;
               break;

               case (1):
                   aorig_rqst = 0;
                   aorig_fbk  = 1;
                   aans_fbk   = 0;
               break;

               case (2):
                   aorig_rqst = 4;
                   aorig_fbk  = 4;
                   aans_fbk   = 6;
               break;

               case (3):
                   aorig_rqst = 3;
                   aorig_fbk  = 0;
                   aans_fbk   = 2;
               break;

               case (4):

                   if (hyJ)
                       aorig_rqst = 3;
                   else
                       aorig_rqst = 2;

                   aorig_fbk  = 2;
                   aans_fbk   = 4;

               break;

               case (5):
                   aorig_rqst = 2;
                   aorig_fbk  = 3;
                   aans_fbk   = 5;
               break;

               case (6):
                   aorig_rqst = 6;
                   aans_fbk   = 8;
/* DEBUG ONLY */
                   /* configure the V.80 Module to detect in-band commands */
                   V80_conf_inband_detc(TRUE);

               break;

               default:
               break;
           }
       }
   }
   else
      error_occurred = TRUE;
}


/*******************************************************************************
/
/     Routine:       sl_O
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine causes the modem to originate a MNP link from
/                    a normal or direct connection.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, slO, send_ok, on_line_command
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void sl_O(void)
{
   /* Return ERROR if the modem has been configured not to perform this command */
   if (!acu_cfg.extended_cmds)
   {
      error_occurred = TRUE;
      return;
   }

   if (hook)
   {
      build_event(E_IDLE,UNUSED);
      build_event(E_MSG,NO_CARRIER);
      return;
   }

   if ((operating_mode == RELIABLE) || (sr27.comm_mode != ASYNC))
   {
      error_occurred = TRUE;
      return;
   }

   if (operating_mode == DIRECT)
      modem_serial_direct(NORMAL);

   slO = TRUE;
   system_reset();
   system_init();
   system_start(ORIGINATE);
   build_event(E_CONNECT,UNUSED);
   send_ok = FALSE;
   on_line_command = FALSE;
}


/*******************************************************************************
/
/     Routine:       sl_Q
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine selects the serial port flow control
/
/                    AT\Q  0 - Disables flow control
/                          1 - Sets flow control to XON/XOFF
/                          2 - Enables unidirectional hardware flow control
/                          3 - Enables bidirectional hardware flow control
/                          9 - Enables transparent flow control. This value
/                                will return error at this time because the
/                                current I/O code does not support this flow
/                                control method.
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, slQ, reconfigure
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void sl_Q(ubyte *param_ptr)
{
   ubyte num;

   /* Get parameter from parser */
   num = *param_ptr;
   if (num <= 3)
   {
      reconfigure = TRUE;
      slQ = num;
      andK = num;

      /* Other effects of the DATA flow control command... */
      switch (num)
      {
         case 3:
         case 2:
            alt_fax_flow_control = CTS_RTS;
            break;

         case 1:
            andK = 4;
         
            /* Intentionally Fall through */

         case 0:
            alt_fax_flow_control = XON_XOFF;
            break;
      }
   }
   else
   {
      error_occurred = TRUE;
   }
}


/*******************************************************************************
/
/     Routine:       sl_T
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine selectes the inactivity timer limit.
/
/                    AT\T  0 - 90 minutes
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, s[3], reconfigure
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void sl_T(ubyte *param_ptr)
{
   if (*param_ptr <= 90)
   {
      s[30] = *param_ptr;
        if(*param_ptr)             
            reconfigure = TRUE;
        else
            reconfigure = FALSE;
   }
   else
      error_occurred = TRUE;
}


/*******************************************************************************
/
/     Routine:       sl_U
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine causes the modem to wait in online command
/                    state to accept a MNP link.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, slU, on_line_command, send_ok
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void sl_U(void)
{
   /* Return ERROR if the modem has been configured not to perform this command */
   if (!acu_cfg.extended_cmds)
   {
      error_occurred = TRUE;
      return;
   }

   if (hook)
   {
      build_event(E_IDLE,UNUSED);
      build_event(E_MSG,NO_CARRIER);
      return;
   }

   if ((operating_mode == RELIABLE) || (sr27.comm_mode != ASYNC))
   {
      error_occurred = TRUE;
      return;
   }

   if (operating_mode == DIRECT)
      modem_serial_direct(NORMAL);

   slU = TRUE;
   system_reset();
   system_init();
   system_start(ANSWER);
   build_event(E_CONNECT,UNUSED);
   send_ok = FALSE;
   on_line_command = FALSE;
}

/*******************************************************************************
/
/     Routine:       sl_V
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine selects the modified result code form
/
/                    AT\V  0 - Enable result codes defined by ATV command
/                          1 - Enable modified MNP result codes
/                          2 - Enable modified V.42 result codec
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, 
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void sl_V(ubyte *param_ptr)
{
   if ((*param_ptr != 0) && (*param_ptr != 1))
      error_occurred = TRUE;
}

/*******************************************************************************
/
/     Routine:       sl_X
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine selects the pass through flow control option
/
/                    AT\X  0 - Processes XON/XOFF flow control characters
/                          1 - Processes XON/XOFF flow control characters and
/                             passes them through to the local or remote system
/                             so that they can also process the characters
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, slX, reconfigure
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void sl_X(ubyte *param_ptr)
{
   if (*param_ptr <= 1)
   {
      slX = *param_ptr;
      reconfigure = TRUE;
   }
   else
      error_occurred = TRUE;
}


/*******************************************************************************
/
/     Routine:       sl_Y
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine causes the modem to switch from a normal or
/                    direct connection to a MNP connection. Originate or answer
/                    is determined by the last connect type.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, slY, on_line_command, send_ok
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void sl_Y(void)
{
   /* Return ERROR if the modem has been configured not to perform this command */
   if (!acu_cfg.extended_cmds)
   {
      error_occurred = TRUE;
      return;
   }

   if (hook)
   {
      build_event(E_IDLE,UNUSED);
      build_event(E_MSG,NO_CARRIER);
      return;
   }

   if ((operating_mode == RELIABLE) || (sr27.comm_mode != ASYNC))
   {
      error_occurred = TRUE;
      return;
   }

   if (operating_mode == DIRECT)
      modem_serial_direct(NORMAL);

   slY = TRUE;
   system_reset();
   system_init();

   if (sr14.originate_flag)
      system_start(ORIGINATE);
   else
      system_start(ANSWER);

   build_event(E_CONNECT,UNUSED);
   send_ok = FALSE;
   on_line_command = FALSE;
}

/*******************************************************************************
/
/     Routine:       sl_Z
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine causes the modem to switch from a MNP
/                    connection to a normal connection.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, slU, slZ, operating_mode,
/               send_ok, on_line_command
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void sl_Z(void)
{
   /* Return ERROR if the modem has been configured not to perform this command */
   if (!acu_cfg.extended_cmds)
   {
      error_occurred = TRUE;
      return;
   }

   if (hook)
   {
      build_event(E_IDLE,UNUSED);
      build_event(E_MSG,NO_CARRIER);
      return;
   }

   if ((slU == TRUE) || (operating_mode == RELIABLE))
   {
      slU = FALSE;
      slZ = TRUE;
      operating_mode = RELIABLE;
      system_halt(FALL_TO_SPEED);
      build_event(E_CONNECT,UNUSED);
      send_ok = FALSE;
      on_line_command = FALSE;
   }
   else
      error_occurred = TRUE;
}


/*******************************************************************************
/
/     Routine:       hy_J
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine selects the detection option.
/
/                    AT-J  0 - Disables detection
/                          1 - Enables detection
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, hyJ
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void hy_J(ubyte *param_ptr)
{
   if (*param_ptr <= 1)
      hyJ = *param_ptr;
   else
      error_occurred = TRUE;
}


/*******************************************************************************
/
/     Routine:       hy_C
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine enable/disable calling tone.
/
/                    AT-C  0 - Disables calling tone
/                          1 - Enables calling tone
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, calling_tone
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/

void hy_C(ubyte *param_ptr)
{
   /*
      CONFIG_MODE == 2 for V.34 and AT-C2 is intended
      for V.34 V.8 CI control, so we're lucky.
   */
   if (*param_ptr <= CONFIG_MODE)
      calling_tone = *param_ptr;
   else
      error_occurred = TRUE;
}

/*******************************************************************************
/
/     Routine:       hy_V
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine will display the firmware version number.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void hy_V(void)
{
   output_info((ubyte *)VERSION_MSG,(ubyte)sr14.verbose_form);
}


/*******************************************************************************
/
/     Routine:       qu_H
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine selects the V.42bis compression type.
/
/                    AT"H  0 - Disables compression
/                          1 - Enable V.42bis in transmit direction only
/                          2 - Enable V.42bis in receive direction only
/                          3 - Enable V.42bis in both directions
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, quH
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void qu_H(ubyte *param_ptr)
{
   if (*param_ptr <= 3)
      quH = *param_ptr;
   else
      error_occurred = TRUE;
}


/*******************************************************************************
/
/     Routine:       qu_N
/
/     Author:        RSA
/
/     Creation Date: 1/6/1993
/
/     Description:   This Routine sets the V.42bis dictionary size.
/
/                    AT"N  512+
/
/     Input Parameters: pointer to the word numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, btlz_dict_size
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void qu_N(uword *param_ptr)
{
   if ((*param_ptr >= 512) && (*param_ptr <= DSIZE))
      btlz_dict_size = *param_ptr;
   else
      error_occurred = TRUE;
}


/*******************************************************************************
/
/     Routine:       qu_O
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine sets the V.42bis string length
/
/                    AT"O  6 - 250 characters
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, quO
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void qu_O(ubyte *param_ptr)
{
   if ((*param_ptr >= 6) && (*param_ptr <= 250))
      quO = *param_ptr;
   else
      error_occurred = TRUE;
}


/*******************************************************************************
/
/     Routine:       per_T
/
/     Author:        RSA
/
/     Creation Date: 11/04/91
/
/     Description:   This routine enables SN tone disconnection
/
/                    AT%T  0 - Enable SN tone disconnection
/                          1 - Disable SN tone disconnection
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, detect_400hz_enabled
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void per_T(ubyte *param_ptr)
{
   switch (*param_ptr)
   {
      case 0:
         detect_disconnect_tone = TRUE;
         break;

      case 1:
         detect_disconnect_tone = FALSE;
         break;

      default:
         error_occurred = TRUE;
         break;
   }
}


/* MNP 10 EXTENDED COMMANDS */

#if (CONFIG_MNP10 == 1)

/*******************************************************************************
/
/     Routine:       hy_B
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine will force a speed downshift during MNP 10
/                    operation.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: error_occurred
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void hy_B(void)
{
   /* Return ERROR if MNP 10 has not been negotiated with the peer */
   if (system_force_rate(FALLBACK))
      error_occurred = TRUE;
}


/*******************************************************************************
/
/     Routine:       hy_K
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine will enable/disable MNP extended services
/                    for MNP 10 operation.
/
/                    AT-K  0 - Disables MNP extended services
/                          1 - Enables MNP extended services
/                          2 - Enables MNP extended services without MNP
/                                indication during the answer detect phase
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed: error_occurred, hyK
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void hy_K(ubyte *param_ptr)
{
   if (*param_ptr <= 2)
      hyK = *param_ptr;
   else
      error_occurred = TRUE;
}


/*******************************************************************************
/
/     Routine:       hy_Q
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine will enable/disable fallback to 2400 and
/                    1200 bps in MNP10 operation.
/
/                    AT-Q  0 - Disables fallback to 2400 and 1200 bps
/                          1 - Enables fallback to 2400 bps
/                          2 - Enables fallback to 2400 or 1200 bps
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed: error_occurred, hyQ
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void hy_Q(ubyte *param_ptr)
{
   if (*param_ptr <= 2)
      hyQ = *param_ptr;
   else
      error_occurred = TRUE;
}


/*******************************************************************************
/
/     Routine:       hy_U
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine will request a speed upshift during MNP 10
/                    operation.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: error_occurred
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void hy_U(void)
{
   /*   Return ERROR if MNP 10 has not been negotiated with the peer */
   if (system_force_rate(FALLFORWARD))
        error_occurred = TRUE;
}


/*******************************************************************************
/
/     Routine:       qu_M
/
/     Author:        RSA
/
/     Creation Date: 1/6/1993
/
/     Description:   This Routine enables/disables MNP 10.
/
/                    AT"M  0 - Disables MNP 10
/                          1 - Enables MNP 10
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, quM
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void qu_M(ubyte *param_ptr)
{
   if (*param_ptr <= 1)
      quM = *param_ptr;
   else
      error_occurred = TRUE;
}


/*******************************************************************************
/
/     Routine:       ast_H
/
/     Author:        RSA
/
/     Creation Date: 5/27/92
/
/     Description:   This routine selects the initial link speed.
/
/                    AT*H  0 - Link negotiation occurs at highest supported
/                                speed.
/                          1 - Link negotiation occurs at 1200 bps
/                          2 - Link negotiation occurs at 4800 bps
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, link_negot
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void ast_H(ubyte *param_ptr)
{
   if (*param_ptr <= 2)
      link_negot = *param_ptr;
   else
      error_occurred=TRUE;
}


/*******************************************************************************
/
/     Routine:       prn_M
/
/     Author:        RSA
/
/     Creation Date: 5/27/92
/
/     Description:   This routine enables/disables cellular operation.
/
/                    AT)M  0 - For central site modems: Auto-adjustment
/                             (adjusts power level if remote modem is set
/                             to )M1)
/                          1 - For cellular site modems: Forces adjustment of
/                             power level
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, prnM
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/     Reason:
/
*******************************************************************************/
void prn_M(ubyte *param_ptr)
{
   if (*param_ptr <= 1)
      prnM = *param_ptr;
   else
      error_occurred=TRUE;
}

#endif
