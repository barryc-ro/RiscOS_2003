/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00slep.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains the control code for generic sleep
/                       operation for the modem.
/
/     Product:          ACU core code
/
/     History:
/
/        Created:       8/2/95
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_pro.h"
#include "acu_def.h"
#include "acu_mem.h"

#include "wl_def.h"
#include "wl_mem.h"
#include "wl_pro.h"


/* Internal routines */
void acu_sleep(ubyte sleepEvent);
void acu_process_sleep_timer(void);
void acu_reset_sleep_timer(void);
void acu_set_sleep_timer(uword time_in_secs);
void sleep_hardware_control(ubyte,ubyte);

/* valid defines for sleep_hardware_control(sleep_status,) */
#define AWAKE_STATUS       0x00
#define ASLEEP_STATUS      0x01
#define UNUSED_STATUS      0x02

/* valid defines for sleep_hardware_control(,which_part) */
#define DATA_PUMP          0x01
#define CPU                0x02
#define CELLULAR_RADIO     0x03
#define AUDIO_PROCESSOR    0x04


/* Internal variables */
uword acu_sleep_timer;
uword acu_sleep_time;
ubyte acu_sleeping;


/*******************************************************************************
/
/   Routine:           acu_sleep
/
/   Author:            RSA
/
/   Creation Date:     08/2/95
/
/   Description:       This Routine is called to force a Sleep event.
/
/   Input Parameters:  sleepEvent -
/                          0x00  - S_WAKE_UP
/                          0x01  - S_DONT_SLEEP
/                          0x02  - S_GOTO_SLEEP
/                          0x03  - S_MODE_PSTN_MODEM
/                          0x04  - S_MODE_PSTN_PHONE
/                          0x05  - S_MODE_WIRELESS_MODEM
/                          0x06  - S_MODE_WIRELESS_PHONE
/
/   Output Parameters: None
/
/   Global Variables Changed:
/
/   Users:
/
/   -------------------------------------------------------------
/   -                      Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void acu_sleep(ubyte sleepEvent)
{
   /* Field the event type */
   switch (sleepEvent)
   {
       case S_MODE_PSTN_MODEM:
           /* Wake-up CPU and data pump */
           sleep_hardware_control(AWAKE_STATUS,CPU);
           sleep_hardware_control(AWAKE_STATUS,DATA_PUMP);

           /* Kill cell radio and APROC */
           sleep_hardware_control(UNUSED_STATUS,AUDIO_PROCESSOR);
           sleep_hardware_control(UNUSED_STATUS,CELLULAR_RADIO);

           acu_sleeping = FALSE;
           break;

       case S_MODE_PSTN_PHONE:
           /* Wake-up CPU and data pump and APROC */
           sleep_hardware_control(AWAKE_STATUS,CPU);
           sleep_hardware_control(AWAKE_STATUS,DATA_PUMP);
           sleep_hardware_control(AWAKE_STATUS,AUDIO_PROCESSOR);

           /* Kill cell radio */
           sleep_hardware_control(UNUSED_STATUS,CELLULAR_RADIO);

           acu_sleeping = FALSE;
           break;

       case S_MODE_WIRELESS_MODEM:
           /* Everyone's AWAKE */
           sleep_hardware_control(AWAKE_STATUS,CPU);
           sleep_hardware_control(AWAKE_STATUS,DATA_PUMP);
           sleep_hardware_control(AWAKE_STATUS,CELLULAR_RADIO);
           sleep_hardware_control(AWAKE_STATUS,AUDIO_PROCESSOR);

           acu_sleeping = FALSE;
           break;

       case S_MODE_WIRELESS_PHONE:
           /* Wake-up CPU, Cell radio and APROC */
           sleep_hardware_control(AWAKE_STATUS,CPU);
           sleep_hardware_control(AWAKE_STATUS,CELLULAR_RADIO);
           sleep_hardware_control(AWAKE_STATUS,AUDIO_PROCESSOR);

           /* Kill pump */
           sleep_hardware_control(UNUSED_STATUS,DATA_PUMP);

           acu_sleeping = FALSE;
           break;

       case S_DONT_SLEEP:
           acu_reset_sleep_timer();

           if (acu_sleeping)
               acu_sleep(S_WAKE_UP);
           break;

       case S_GOTO_SLEEP:

           acu_sleeping = TRUE;

           /* Only work on active parts based on current operating mode */
           switch (CellCmds.mode)
           {
               case MODE_PSTN | MODE_PHONE:

                   /* Power down APROC */
                   sleep_hardware_control(ASLEEP_STATUS,AUDIO_PROCESSOR);

                   /* Intentionally fall through */

               case MODE_PSTN | MODE_DATA:

                   /* Power down pump */
                   sleep_hardware_control(ASLEEP_STATUS,DATA_PUMP);

                   /* Power down CPU in PSTN modes */
                   sleep_hardware_control(ASLEEP_STATUS,CPU);

                   /* Wake up all after CPU wakes */
                   acu_sleep(S_WAKE_UP);
                   break;


               case MODE_WIRELESS | MODE_DATA:

                   /* Power down pump */
                   sleep_hardware_control(ASLEEP_STATUS,DATA_PUMP);

                   /* Intentionally fall through */

               case MODE_WIRELESS | MODE_PHONE:

                   /* Power down APROC */
                   sleep_hardware_control(ASLEEP_STATUS,AUDIO_PROCESSOR);

                   /* Power down radio */
                   /* Need to detect ring! */
/*                   sleep_hardware_control(ASLEEP_STATUS,CELLULAR_RADIO); */
                   break;
           }

           break;

       case S_WAKE_UP:

           /* Keep CPU running */
           sleep_hardware_control(AWAKE_STATUS,CPU);

           acu_sleeping = FALSE;

           switch (CellCmds.mode)
           {
               case MODE_PSTN | MODE_PHONE:

                   /* APROC running */
                   sleep_hardware_control(AWAKE_STATUS,AUDIO_PROCESSOR);

                   /* Intentionally fall through */

               case MODE_PSTN | MODE_DATA:

                   /* Keep pump running */
                   sleep_hardware_control(AWAKE_STATUS,DATA_PUMP);
                   break;

               case MODE_WIRELESS | MODE_DATA:

                   /* Keep pump running */
                   sleep_hardware_control(AWAKE_STATUS,DATA_PUMP);

                   /* Intentionally fall through */

               case MODE_WIRELESS | MODE_PHONE:

                   /* Keep radio running */
/*                   sleep_hardware_control(AWAKE_STATUS,CELLULAR_RADIO); */

                   /* Keep APROC */
                   sleep_hardware_control(AWAKE_STATUS,AUDIO_PROCESSOR);
                   break;
           }
           break;
   }
}




/*******************************************************************************
/
/   Routine:           acu_process_sleep_timer
/
/   Author:            RSA
/
/   Creation Date:     08/2/95
/
/   Description:       This Routine is called every second to driver the
/                      time to Sleep event.
/
/   Input Parameters:  None
/
/   Output Parameters: None
/
/   Global Variables Changed:
/
/   Users:
/
/   -------------------------------------------------------------
/   -                      Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void acu_process_sleep_timer(void)
{
   /* Have the ACU build the sleep event on time-out if the timer is
       running */
   if (acu_sleep_timer && !--acu_sleep_timer)
       build_event(E_IDLE,MODE_SLEEP);
}


/*******************************************************************************
/
/   Routine:           acu_reset_sleep_timer
/
/   Author:            RSA
/
/   Creation Date:     08/2/95
/
/   Description:       This Routine is called to reprogram the sleep timer.
/
/   Input Parameters:  None
/
/   Output Parameters: None
/
/   Global Variables Changed:
/
/   Users:
/
/   -------------------------------------------------------------
/   -                      Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void acu_reset_sleep_timer(void)
{
   acu_sleep_timer = acu_sleep_time;
}


/*******************************************************************************
/
/   Routine:           acu_set_sleep_timer
/
/   Author:            RSA
/
/   Creation Date:     08/2/95
/
/   Description:       This Routine is called to initialize and initiate
/                      the sleep timer.
/
/   Input Parameters:  None
/
/   Output Parameters: None
/
/   Global Variables Changed:
/
/   Users:
/
/   -------------------------------------------------------------
/   -                      Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void acu_set_sleep_timer(uword time_in_secs)
{
   acu_sleep_time = time_in_secs;
   acu_reset_sleep_timer();
}



/*******************************************************************************
/
/   Routine:           sleep_hardware_control
/
/   Author:            RSA
/
/   Creation Date:     08/2/95
/
/   Description:       This Routine is called to manipulate the platforms
/                      hardware into sleep modes.
/
/   Input Parameters:  sleep_status
/                              0x00 - AWAKE_STATUS
/                              0x01 - ASLEEP_STATUS
/                              0x02 - UNUSED_STATUS
/
/                      which_part
/                              0x01 - DATA_PUMP
/                              0x02 - CPU
/                              0x03 - CELLULAR_RADIO
/                              0x04 - AUDIO_PROCESSOR
/
/   Output Parameters: None
/
/   Global Variables Changed:
/
/   Users:
/
/   -------------------------------------------------------------
/   -                      Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void sleep_hardware_control(ubyte sleep_status, ubyte which_part)
{

   sleep_status = which_part =0;

#if 0 /* Example code */

   AUDIO_CONTROL audio;

   switch (which_part)
   {
       case DATA_PUMP:

           switch (sleep_status)
           {
               case AWAKE_STATUS:

                   /* Expecting wake by ring, got write */
                   if (sleep_pump_isr_state == WAITING_ON_RING)
                   {
                       /*
                        * In this case we were awaken by a host write
                        * not a remote ring so we have to manually wakeup
                        * the pump.  This involves reset sleep bit and set
                        * newc.  However some workarounds must be performed
                        * after pump wakeup (resetting LL bit), so we need
                        * to use the H8 PUMP ISR to notify us when the pump
                        * is alive to do the newc for workarounds. - keh
                        */
                       sleep_pump_isr_state = GOT_HOST_WRITE;

                       /* Clear PUMP INT bit */
                       ISR &= DP_IRQ_MASK;

                       /* New pump config: Not sleeping */
                       DATA_PUMP_SLEEP_REG &= ~SLEEP_BIT;
                       DATA_PUMP_NEWS_REG = NEWC_BIT;

                       /* Use ISR to move pump to normal mode after wakeup */
                       /* Enable PUMP INTERRUPT bit */
                       IER |= DP_INT_ENABLE;
                   }
                   break;

               case ASLEEP_STATUS:
               case UNUSED_STATUS:

                   disable_int();
                   /*
                    *  Config pump to wake on ring/write.
                    */
                   DATA_PUMP_FIFO_REG = FIFO_INTS_DISABLE;
                   DATA_PUMP_NEWS_REG |= NCIE_BIT;

                   /*  Set pump sleep and wake bits */
                   DATA_PUMP_SLEEP_REG |= SLEEP_BITS;
                   DATA_PUMP_NEWS_REG |= NEWC_BIT;

                   /*
                    *  Update H8 pump interrupts for sleep
                    */
                   /*  Save orignial ISR and replace w/sleep ISR */
                   dp_int_vect = EXT_IRQ4_VECT;
                   EXT_IRQ4_VECT = ((ulong)dp_wakeup_int | H8_JMP_OPCODE);

                   /* Clear then enable PUMP INTERRUPT bit */
                   ISR &= DP_IRQ_MASK;
                   IER |= DP_INT_ENABLE;

                   /* Expect a wakeup by RING */
                   sleep_pump_isr_state = WAITING_ON_RING;

                   enable_int();
                   break;
           }
           break;


       case CPU:
           switch (sleep_status)
           {
               case AWAKE_STATUS:
                   /* do nothing (must be awake to execute this call) */
                   break;

               case ASLEEP_STATUS:
               case UNUSED_STATUS:

                   autobaud_on();
                   cpu_sleep();
                   break;
           }
           break;


       case CELLULAR_RADIO:

           switch (sleep_status)
           {
               case AWAKE_STATUS:

                   wireless_enable();
                   break;

               case ASLEEP_STATUS:

                   /* Do nothing (must detect ring!) */
                   break;

               case UNUSED_STATUS:
                   wireless_disable();
                   wireless_bg();
                   break;
           }
           break;


       case AUDIO_PROCESSOR:

           /* Set Audio message */
           audio.type = AUDIO_SLEEP;
           switch (sleep_status)
           {
               case AWAKE_STATUS:
                   audio.data = WAKE_UP;
                   break;

               case ASLEEP_STATUS:
                   audio.data = GOTO_SLEEP;
                   break;

               case UNUSED_STATUS:
                   audio.data = UNUSED_SLEEP;
                   break;
           }

           /* Send it out */
           audio_control(&audio);
           break;

   }
#endif /* Example code */
}


