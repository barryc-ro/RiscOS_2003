/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/     Cirrus Logic, Inc.
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "v25_def.h"
#include "v25_mem.h"
#include "acu_pro.h"
#include "mt_pro.h"
#include "ll_pro.h"
#include "v25_pro.h"
#include "fp_pro.h"
#include "ds_pro.h"
#include "ee_def.h"
#include "ptt.h"
#include "v80_pro.h"
#include "dsppatch.h"
#include "bldflags.h"
#include "v34_rate.h"
#include "acu_epro.h"
#include "homolig1.h"
#include "hmg_mem1.h"

void  auto_config_ms(void);
extern void send_pkt_to_dsp(void);
int main(void);
void master_init(void);
void ACU_Main(void);
void acu_bg(void);
void master_bg(void);
void build_event(ubyte,ubyte);
extern void process_one_msec(void);
#define B5CF_MappedTo_CS3	       0x00C0
extern ubyte ext_DspMemErrorFlag;

extern ubyte st_crnt_boost1;

extern const uword x2_page_array[];
extern void acu_phbk_init(void);
extern void disable_int(void);
extern void enable_int(void);
extern ubyte one_hundred_microsec;
extern void acu_timer(void);
extern ubyte dte_mode;
extern void Install_Int(void);
extern ubyte count_for_msec_timer;
extern void dce_line_tx_int(void);
extern void dce_line_rx_int(void);
/*flag to display the dsp not responding mrm2896*/
extern ubyte display_msg_one_time;
extern ubyte CountryInfo;
/* These variables are for debug */
ubyte last_event,last_built;
void outchar(ubyte);
extern void do_modem_config_patch1(ubyte dmy_cam_type1);
extern void BlackListInit(void);
#ifdef DEBUG_PORT
extern ubyte DebugPortOutput;
#endif

extern ubyte ms_mode, v34_bis_mode, N, automode, ms_min_rate;
extern uword ms_min_speed;
extern ubyte s[];

extern void CheckAndDownload32k_DSP_SRAM(void);
extern void relay_init(void);
void plus_VDTMF_exec(ubyte *);
extern Cntry_List_Tag  cntry_list[];

/****************************************************************************
 *
 *   Routine:           MAIN()
 *
 *   Author:            RSA
 *
 *   Creation Data:     12/4/1996
 *
 *   Description: Customer main entry point. Macro MAIN in sys_def.h
 *                resolves to main if required.
 *
 *   Input Parameters:  None
 *
 *   Output Parameters: Nothing
 *
 *   Global Variables Changed: None
 *
 *   Users:
 *
 *   -----------------------------------------------------------
 *   -                       Modifications                     -
 *   -----------------------------------------------------------
 *
 *   Author & Date:  RSA
 *   Description:
 *   Reason:
 *
 ****************************************************************************/

#ifndef __riscos
int MAIN(void)
{
#ifdef DEBUG_PORT
   InitDebugPort();
   DebugPortOutput = TRUE;
   TraceInit();
#endif

#if (PATCHLESS_EXTERNAL == 1)
   ext_DspMemErrorFlag = 0;
#else
   ext_DspMemErrorFlag = 0xFF;
#endif

   BlackListInit();
   while (1)
   {
      #if DNLD_X2_FROM_HOST == 0
      CheckAndDownload32k_DSP_SRAM();
      #endif
      master_init();

/* 9/9/97 shujin,  if ext dsp ram not exist, autoconfig at+ms paras */
      auto_config_ms();
      while (acu_loop == TRUE)
         ACU_Main();
   }
   return(0);
}
#endif

/*******************************************************************************
/
/     Routine:       ACU_Main
/
/     Author:        RSA
/
/     Creation Date: 06/13/91
/
/     Description:   This Routine is the main controlling code for this
/                    system.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void ACU_Main(void)
{
   mmu_force_acu_pg

   if (acu_10msec_timer != 0)   process_acu_timer();

#if INTERNATIONAL_CODE == 1
#endif


   /* Process background functions   */
   mmu_force_acu_pg

   if ( (operating_mode != DIRECT) && (!test_in_progress) )
   {
        if     (slN != 6)      system_bg();
        else if(slN == 6)      V80_process_bg();
   }

#if 0
      for (dce_flag_count=0; dce_flag_count<255; dce_flag_count++)
         V80_process_bg();
      for (dte_flag_count=0; dte_flag_count<255; dte_flag_count++)
         V80_process_bg();

      for (dte_flag_count=0; dte_flag_count<255; dte_flag_count+=2)
      {
         dce_flag_count++;
         V80_process_bg();
      }
#endif

/* 9/9/97 shujin
   process_fax_bg();
   process_voice_bg();
*/
   if( fax_class == 1 || fax_class == 8 )   process_fax_bg();

   if( fax_class == 8 )   process_voice_bg();

   /* Need to prevent the modem_task from being called if
      MNP 10 is running .   All data pump operations should
      be handled by the MNP 10 code. */

   if (!v42_running_mnp10)      modem_task();

  /*wireless_bg();*/ /* ramn 9/26/96 */
   acu_bg();

   master_bg();
  /*frontpanel_bg();*/		/* ramn 9/26/96 */

/* 9/9/97 shujin
   acu_customer_bg();
*/
   process_customer_timer();

}

/*******************************************************************************
/
/     Routine:       master_init
/
/     Author:        RSA
/
/     Creation Date: 06/13/91
/
/     Description:   This Routine is called to initialize the modules needed
/                    in this system.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  acu_loop
/
/     Users:   main
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void master_init(void)
{
	ubyte eeprom_error;

   mmu_pg_init




#ifdef __riscos
   hardware_init();
   acu_loop = TRUE;
	Install_Int();

	dsppatch(PATCH_INIT_POWER_ON);
#else
   acu_loop = TRUE;


	Install_Int();
/* RJM101096 */
/* Dynamic patch download support */
	dsppatch(PATCH_INIT_POWER_ON);
#endif

/*flag to display the dsp not responding*/
/*mrm2896*/

   s[3] = DEFAULT_S3;
   s[4] = DEFAULT_S4;

    /* initialize the acu and modem, and reset v42 */
    system_reset();

/*mrm2896*/
/*moved the interrupt disable after acu_init*/

   /* modem_disable_interrupts();*/
    /*modem_ram_init();*/ /* ramn 9/20/96 */

   modem_init();

/* Initialize counrty information from EEPROM*/
/* Shiang Lei */
	if (Default_Country == 0xFF) {
		eeprom_error = 0;
		eeprom_error = modem_read_data(COUNTRY_CODE,COUNTRY_CODE_SIZE,&CountryInfo);
		if (eeprom_error != 0 || CountryInfo > MAX_COUNTRY_CODE) {
			CountryInfo = 0;
			}
		}
	else {
			CountryInfo = Default_Country;
		}

	country_area_code1 = cntry_list[CountryInfo].cntry_areacode2;
    acu_init();

/*mrm2896*/

    modem_disable_interrupts();

   mmu_force_parse_pg
   init_event_que();

   initialize_voice(POWERUP);

   initialize_vcv();

   /*acu_phbk_init();*/		/* ramn 9/26/96 */

   /* Included if there is a front pannel   */
   mmu_force_acu_pg
    /*frontpanel_init();*/		/* ramn 9/26/96 */

   /* Included if V25bis code is included   */
    /*v25bis_init();    */    /* ramn 9/27/96 */

   /* Included if Leased line code is included     */
   /*   mmu_force_acu_pg   not needed, done above for frontpanel */
    /*ll_init();*/  /* ramn 9/23/96 */

   /* Included if ETC code is included   */
   acu_ETC_init();

   /* initialize the ACU io code */
   acu_port_init();

   V80_init();

   mmu_force_parse_pg
   initialize_fax(FAX_INIT_POWERUP);

   /* give control of the terminal to the acu */
   mmu_force_acu_pg
   enable_acu_on_terminal();

   /* start the system running */
   modem_enable_interrupts();

    /*modem_mr_led(ON);*/ /* ramn 9/20/96 */

   mmu_force_parse_pg
   if (init_dipswitch_parms() == 0)
   {
/*      mmu_force_parse_pg       Not Needed, Done above for init_dipswitch_parms */
      acu_reset();

      if (sr27.leased_line)
      {
         if (sr14.originate_flag)
            build_event(E_ORIG,UNUSED);
         else
            build_event(E_ANSW,UNUSED);
         return;
      }
      else
         modem_line_select(PSTN);

 	   /* if (v25bis_active)
		  init_v25_communication();     */    /* ramn 9/27/96 */
   }

   if (!v25bis_active)
   {
      autobaud_on();
 	   /*if (sr14.echo_cmd_flag)
		  modem_serial_echo(ON);
	   else
		  modem_serial_echo(OFF);*/ /* ramn 9/20/96 */
   }

   /* If ignore DTR is selected, turn the TR LED on   */
     /* if ((sr27.comm_mode == ASYNC) && (sr21.DTR_control == 0))
	   modem_tr_led(ON);*/ /* ramn 9/20/96 */
/*flag to display the dsp not responding*/
/*mrm2896*/

			display_msg_one_time = 0;

   if(ext_DspMemErrorFlag == 0)   /* 32k SRAM exists, x2 mode */
     do_modem_config_patch1(0x04);
   else                           /* v34 mode */
     do_modem_config_patch1(0x00);
	 relay_init();
}


/*******************************************************************************
/
/     Routine:       acu_bg
/
/     Author:        RSA
/
/     Creation Date: 06/13/91
/
/     Description:   This Routine is called to process the ACU background
/                    functions.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:   main
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_bg(void)
{
#if 0
   static void *curr_bg = NULL;
#endif

   current_bg = table_bg[state_type[acu_state]][acu_state].rtn;

#if 0
   if( curr_bg != (void *)current_bg )
   {
       curr_bg = (void *)current_bg;
       outchar( *(ubyte*)&current_bg );
       outchar( *(((ubyte*)&current_bg)+1) );
       outchar( *(((ubyte*)&current_bg)+2) );
       outchar( *(((ubyte*)&current_bg)+3) );
   }

   if( current_bg == NULL )
   {
       outchar( 'b' );
       outchar( 'g' );
       outchar( ' ' );
       outchar( 'N' );
       outchar( 'U' );
       outchar( 'L' );
       outchar( 'L' );
       outchar( '!' );
       outchar( '!' );
   }
#endif

   (*current_bg)();
}

/*******************************************************************************
/
/     Routine:       master_bg
/
/     Author:        RSA
/
/     Creation Date: 09/16/91
/
/     Description:   This Routine is called to process the core code for the
/                    autodialer.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  acu_event
/
/     Users:   main
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void master_bg(void)
{

#if 0
   static void *curr_proc = NULL;
#endif

/*******************************************************************************/
static struct stateTab_struct * table;
static struct stateTab_struct * temp;
/*******************************************************************************/
   mmu_force_acu_pg
   check_char_rcvd();

   /* This Routine needs the ACU page to be open */
   check_V24_transition();

   /* This Routine needs the ACU page to be open */
   check_modem_status();

   /* See if there are events to be processed */
   if ((struct ACU_event *)event_que.fill_begin != NULL)
   {
      /* Remove event from the queue   */
      acu_event = dq_event();

      /* Process all events that are on the queue   */
      while (acu_event != NULL)
      {
#if 0
         /* This code is used for DEBUG   */
         if (last_event != acu_event->type)
         {
            last_event = (ubyte)acu_event->type;
            outchar( '"' );
            outchar( acu_event->type );
            outchar( ',' );
            outchar( acu_state );
            outchar( '"' );
         }
#endif
        temp = (struct stateTab_struct *)table_events[state_type[acu_state]][acu_state];
        if (temp != 0)
           {
           table = temp;
           acu_state = (table+(acu_event->type))->new_state;
           acu_proc  = (table+(acu_event->type))->fnc_ptr;
           }
#if 0
   if( curr_proc != (void *)acu_proc )
   {
       if( (acu_proc != ignore) && (acu_proc !=idle_at_v24) )
       {
           curr_proc = (void *)acu_proc;
           outchar( *(ubyte*)&acu_proc );
           outchar( *(((ubyte*)&acu_proc)+1) );
           outchar( *(((ubyte*)&acu_proc)+2) );
           outchar( *(((ubyte*)&acu_proc)+3) );
       }
   }
#endif

#if 0
   if( acu_proc == NULL )
   {
       outchar( 'p' );
       outchar( 'r' );
       outchar( 'o' );
       outchar( 'c' );
       outchar( ' ' );
       outchar( 'N' );
       outchar( 'U' );
       outchar( 'L' );
       outchar( 'L' );
       outchar( '!' );
       outchar( '!' );
   }
#endif
        (*acu_proc)();

         /* Place the event buffer back onto the empty queue   */
         fq_event(acu_event);

         /* See if there is another event to process   */
         acu_event = dq_event();
      }
   }
}



/*******************************************************************************
/
/     Routine:       build_event
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine is called allocate an event buffer, set
/                    the event and parameter fields, and queue it to be
/                    processed later.
/
/     Input Parameters:
/                    ubyte type - type of event to be built
/                    ubyte parm - parameter to be placed in the event buffer
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void build_event(ubyte type, ubyte parm)
{
   struct ACU_event *add;

   /* Get event buffer address   */
   add = aq_event();

   /* Build event if there is an event buffer available   */
   if (add != NULL)
   {
      /* This code is used for DEBUG   */
      last_built = type;

      add->type = type;
      add->parm = parm;

      qq_event(add);
   }
}

/* shujin 9/9/97, automatic config = at+ms=v34b,1,0,0 if not x2 mode */
void auto_config_ms(void)
{
      if(ext_DspMemErrorFlag != 0 )
      {
         ms_mode = V34;
         v34_bis_mode = 1;
         N = 1;
         automode = 3;
         ms_min_rate = BPS300;
         ms_min_speed = BPS2400MIN;

         s[37] = 0;
      }
      plus_VDTMF_exec(&vdtmf);
}


