/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00que.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains the code which manages the event
/                       queue.
/
/     Product:          ACU core code
/
/     History:          ac00que.c v3.90
/
/        Created:       10/7/91
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"


void init_event_que(void);
struct ACU_event *aq_event(void);
void qq_event(struct ACU_event *);
struct ACU_event *dq_event(void);
void fq_event(struct ACU_event *add);

/*******************************************************************************
/
/     Routine:       init_event_que
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This routine is called to initialize the event queue.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  event_que
/
/     Users:   main
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void init_event_que(void)
{
   word i;

   event_que.fill_begin = NULL;
   event_que.fill_end = NULL;

   event_que.empty_begin = (struct ACU_event *)&event_buffer[0];
   event_que.empty_end = (struct ACU_event *)&event_buffer[NUMBER_OF_EVENT_BUFFERS - 1];

   for (i=0;i<(NUMBER_OF_EVENT_BUFFERS-1);i++)
      event_buffer[i].next_addr = (struct ACU_event *)&event_buffer[i+1];
   event_buffer[NUMBER_OF_EVENT_BUFFERS-1].next_addr = NULL;
}


/*******************************************************************************
/
/     Routine:       aq_event
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This routine is called to get the address of the first
/                    empty buffer on the event queue.
/
/     Input Parameters: None
/
/     Output Parameters: struct ACU_event *add - pointer to the buffer
/                        allocated.
/
/     Global Variables Changed:  None
/
/     Users: build_event()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
struct ACU_event *aq_event(void)
{
   struct ACU_event *add;

   if (event_que.empty_begin == NULL)
      return (NULL);
   add = event_que.empty_begin;

   event_que.empty_begin = add->next_addr;
   if (event_que.empty_begin == NULL)
      event_que.empty_end = NULL;

   add->next_addr = NULL;

   return (add);
}


/*******************************************************************************
/
/     Routine:       qq_event
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This routine is called to place an event buffer on to
/                    the end of the queue where it will wait to be processed.
/
/     Input Parameters: struct ACU_event *add - pointer of buffer to be
/                       queued.
/
/     Output Parameters: None
/
/     Global Variables Changed:  event_que
/
/     Users: build_event()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void qq_event(struct ACU_event *add)
{
   if (add == NULL)
      return;

   add->next_addr = NULL;

   if (event_que.fill_end != NULL)
      event_que.fill_end->next_addr  = add;

   if (event_que.fill_begin == NULL)
      event_que.fill_begin = add;

   event_que.fill_end = add;
}


/*******************************************************************************
/
/     Routine:       dq_event
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This routine is called to get the address of the first
/                    event buffer waiting to be processed.
/
/     Input Parameters: None
/
/     Output Parameters: struct ACU_event *add - pointer to the next buffer
/                        to be processed
/
/     Global Variables Changed:  None
/
/     Users: master_bg()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
struct ACU_event *dq_event(void)
{
   struct ACU_event *add;

   if (event_que.fill_begin == NULL)
   {
      event_que.fill_end = NULL;
      add = NULL;
   }
   else
   {
      add = event_que.fill_begin;
      event_que.fill_begin = add->next_addr;
      add->next_addr = NULL;

      if (event_que.fill_begin == NULL)
         event_que.fill_end = NULL;
   }

   return (add);
}


/*******************************************************************************
/
/     Routine:       fq_event
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This routine is called to place the buffer back on to
/                    the empty queue.
/
/     Input Parameters: struct ACU_event *add - pointer to buffer to be placed
/                    on the queue.
/
/     Output Parameters: None
/
/     Global Variables Changed:  None
/
/     Users: master_bg()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void fq_event(struct ACU_event *add)
{
   if (add == NULL)
      return;

   if (event_que.empty_begin == NULL)
      event_que.empty_begin = add;

   add->next_addr = NULL;
   if (event_que.empty_end != NULL)
      event_que.empty_end->next_addr = add;
   event_que.empty_end = add;
}

