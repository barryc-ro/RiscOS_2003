/****************************************************************************
/
/	Copyright 1988,1989,1990,1991,1992,1993,1994. All Rights Reserved by:
/	    RSA
/	    7701 Six Forks Road
/	    Suite 120
/	    Raleigh, NC  27615
/	    (919) 846-7171
/
/
/	This document contains material confidential to RSA its contents must
/	not be revealed, used or disclosed to anyone or company with out
/	written permission by RSA.  The information contained herein is solely
/	for the use of RSA.
/
/	File:		ac00lib1.c
/
/	Module Version: ACU 4.02
/
/	Function:	This file contains misc routines for the ACU code.
/
/	Product:	ACU core code
/
/	History:	ac00lib1.c v3.90
/			ac00lib1.c v3.91
/			ac00lib1.c v3.92
/			ac00lib1.c v3.94
/			ac00lib1.c v3.96
/
/		Created: 10/7/91
/			10/18/91
/			12/04/91
/			3/10/92
/                       1/12/93
/
/		---------------------------------------------------------
/		-			Modifications			-
/		---------------------------------------------------------
/
/               Author & Date: RSA
/               Description:
/               Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "ds_def.h"
#include "ds_mem.h"
#include "ee_def.h"
#include "acu_pro.h"
#include "mt_pro.h"

/* start change keh 8/4/95 => unused w/ new parser */
#if 0
ubyte get_next_char(void);
#endif
/* start change keh 8/4/95 => unused w/ new parser */
void output_info(ubyte *, ubyte);
void output_send_cr_lf(void);
void set_parms(ubyte, ubyte, ubyte);
ubyte translate_modem_baud(void);
ubyte get_s37_baud(void);
void get_modem_baud_and_mode(void);
void update_modem_rate_seq(void);
uword str_len(ubyte *);
void on_hook(void);
void off_hook(void);
void hangup_connection(ubyte);

/*MRM22796*/
extern ubyte ms_min_rate;
extern uword ms_min_speed;

extern ubyte ms_mode;					



#define   CID_RELAY_OFF  0x0200 			/* ramn 12/19/96 */
extern void	set_callerid_relay( uword);	/* ramn 12/19/96 */


/*mrm31496*/
extern ubyte v34_bis_mode;

/* start change keh 8/4/95 => unused w/ new parser */
#if 0
void unget_char(ubyte);
#endif
/* start change keh 8/4/95 => unused w/ new parser */

/* start change keh 8/4/95 => unused w/ new parser */
#if 0
*/*******************************************************************************
*/
*/	Routine: get_next_char
*/
*/	Author : RSA
*/
*/	Creation Date: 05/07/91
*/
*/	Description : This Routine returns the next character in the command
*/		      buffer. It will also convert any lower case characters
*/		      to uppercase.
*/
*/	Input Parameters: None
*/
*/	Output Parameters: ubyte ch - byte from buffer
*/
*/	Global Variables Changed:  cmd_ptr
*/
*/	Users:	All command line parse Routines
*/
*/	-------------------------------------------------------------
*/	-			Modifications			    -
*/	-------------------------------------------------------------
*/
*/	Author & Date: RSA
*/	Description:
*/	Reason:
*/
********************************************************************************/
*ubyte get_next_char(void)
*{
*   ubyte ch;
*
*   /* Need to ignore all spaces. Loop until a character other than a space
*       is found */
*   do
*   {
*       ch = *cmd_ptr++;
*   }while (ch == ' ');
*
*   if (((ubyte)(ch - 'a')) <= (ubyte)25)
*       ch = ch & 0xDF; /* toupper(ch) fails in ver 2.2 of Archimedes */
*
*	return(ch);
*}
*
#endif 
/* end change keh 8/4/95 => unused w/ new parser */


/*******************************************************************************
/
/	Routine: output_info
/
/	Author : RSA
/
/	Creation Date: 05/07/91
/
/	Description : This Routine is called to send information text to the
/		      terminal.
/
/	Input Parameters: ubyte *msg - pointer to the character string
/			  ubyte type - type of out put format
/				   0 - Numeric form
/				   1 - Verbose form
/				   2 - Stored number
/
/	Output Parameters: none
/
/	Global Variables Changed:  result_message_sent, send_ok
/
/	Users:	and_V, at_I, get_rom_components, at_quest, output_test_message,
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date: RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void output_info(ubyte *msg, ubyte type)
{
	/*modem_serial_echo(OFF);*/ /* ramn 9/20/96 */
	set_parms(acu_data_bits,acu_parity,acu_stop_bits);

	result_message_sent = TRUE;
	if (type == NUMERIC_FORM)
	{
		while (*msg != NULL)
		{
			process_wait();
			if (acu_to_free() >= 6)
				acu_to_char(*msg++);
		}

		output_send_cr_lf();
	}
	else if (type == VERBOSE_FORM)
	{
		output_send_cr_lf();

		while (*msg != NULL)
		{
			process_wait();
			if (acu_to_free() >= 6)
				acu_to_char(*msg++);
		}

		output_send_cr_lf();
	}
	else if (type == STORED_NUM)
	{
		output_send_cr_lf();
		while (*msg != NULL)
		{
			process_wait();
			if (acu_to_free() >= 6)
				acu_to_char(*msg++);
		}
	}
	else if (type == UNFORMATTED)
	{
		while (*msg != NULL)
		{
			process_wait();
			if (acu_to_free() >= 6)
				acu_to_char(*msg++);
		}
	}
}


/*******************************************************************************
/
/       Routine: output_send_cr_lf
/
/       Author : RSA
/
/       Creation Date: 4/27/1993
/
/       Description : This Routine is called to send a carriage return and  
/                     line feed to the terminal. This routine is used to
/                     save bytes.  
/
/       Input Parameters: none
/
/       Output Parameters: none
/
/       Global Variables Changed:  none
/
/       Users:  output_info
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:
/       Reason:
/
*******************************************************************************/
void output_send_cr_lf(void)
{
   if (s[3] != NULL)
       acu_to_char(s[3]);
   if (s[4] != NULL)
       acu_to_char(s[4]);
}

/*******************************************************************************
/
/	Routine: set_parms
/
/	Author : RSA
/
/	Creation Date: 05/07/91
/
/	Description : This Routine will set the parity, data bits, stop bits,
/		      and baud rate for transmitting to the DTE.
/
/	Input Parameters: ubyte data - Number of data bits
/			  ubyte par - Type of parity
/			  ubyte stop - Number of stop bits
/
/	Output Parameters: None
/
/	Global Variables Changed:  None
/
/	Users:	build_cmd_line, and_V, at_I, at_quest, v25_RLN, v25_RLF, v25_RLI
/		v25_RLD, init_at_communications, dial_stored_num, output_results
/		check_forbidden_list, check_delayed_lists, v25_init_communications
/		v25_output_results
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA 
/	Description: 
/	Reason: 
/
*******************************************************************************/
void set_parms(ubyte data, ubyte par, ubyte stop)
{
        /* Make sure all data has been sent before reconfiguring the port */
        while (acu_to_num())
                ;
        while (!check_all_sent())
                process_wait();

	acu_set_parms(data,par,stop);
	acu_set_tx_baud(dte_baud);
}



/*******************************************************************************
/
/    Routine:          translate_modem_baud
/
/    Author:           RSA
/
/    Creation Date:    05/07/91
/
/    Description:      This Routine is called to translate the current AT speed
/                      and other relevent AT commands into the suggested line
/                      modulation and speed for modem_connect().
/
/    Input Parameters: None
/
/    Output Parameters: ubyte tmp_baud - baud rate of connection to be made
/                          0  = 75/600 bps
/                          1  = 75/1200 bps
/                          2  = 300 bps
/                          3  = 1200 bps
/                          4  = 2400 bps
/                          5  = 4800 bps
/                          6  = 7200 bps
/                          7  = 9600 bps
/                          8  = 12000 bps
/                          9  = 14400 bps
/                          10-13 = Reserved
/                          14 = 600 bps
/                          15 = Reserved
/                          16 = 21600 bps
/                          17 = 24000 bps
/                          18 = 26400 bps
/                          19 = 28800 bps
/                          20 = 31200 bps
/                          21 = 33600 bps
/                          22 = 36000 bps
/
/    Global Variables Changed:  none
/
/    Users: answ_init_modem, orig_init_modem
/
/    -------------------------------------------------------------
/    -                       Modifications                       -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA  8/14/95 r
/    Description:    rewrite routine for V.34
/    Reason:  
/
*******************************************************************************/
ubyte translate_modem_baud(void)
{
   ubyte tmp_baud;

   /* Get user requested link speed */
   tmp_baud = get_s37_baud();

   /* Over ride with MNP10 link command (AT*H) */
   if (link_negot == CONNECT_4800BPS)
       tmp_baud = BPS4800;

   /* Force MAX line rates based on the modem's configuration */
   switch (acu_cfg.mode)
   {
       case CFG_V22BIS:
           if ((tmp_baud > BPS2400) && (tmp_baud != BPS600))
               tmp_baud = BPS2400;
           break;

       case CFG_V32BIS:
           if (s[110] != ENABLE_V32)
           {
               if ((tmp_baud > BPS14400) && (tmp_baud != BPS600))
                   tmp_baud = BPS14400;

               break;  /* Don't fall through for V.32bis configs */
           }

           /* Else user requested V.32 configuration. Intentionally
               fall through to V.32 type... */

       case CFG_V32:
           if ((tmp_baud > BPS9600) && (tmp_baud != BPS600))
               tmp_baud = BPS9600;
           else if (tmp_baud == BPS7200)
               tmp_baud = BPS4800;
           break;


       case CFG_V34:

           if (tmp_baud == BPS31200)
               tmp_baud = BPS31200;

           else if (tmp_baud == BPS33600)
               tmp_baud = BPS33600;


           else if ((tmp_baud == BPS57600) || (tmp_baud == BPS115200) || (tmp_baud == BPS38400))
			  {			


/*mrm31296*/
/* Fix the problem with at+ms so we can do alb at 14400 instead of 12000 */



   				if ((ms_mode == V34S) || (ms_mode == V34))
					{

						if (v34_bis_mode == 1)
						  	tmp_baud = BPS33600;
						else
						  	tmp_baud = BPS28800;
							
					}
   				else if (ms_mode == V32BIS) 
	            	tmp_baud = BPS14400;
					else if  (ms_mode == V32)	
	            	tmp_baud = BPS9600;
					else if  (ms_mode == V22BIS)	
	            	tmp_baud = BPS2400;
					else if  (ms_mode == V22)	
	            	tmp_baud = BPS1200;
					else	 if  (ms_mode == V21)	
	            	tmp_baud = BPS300;
					else		
	            	tmp_baud = BPS1200;


			  }	
           break;
   }

   /* Check for V.23... */
   if (tmp_baud == BPS1200)
   {
       switch (atB.group1)
       {
           case 2:
               if (sr14.originate_flag)
                   /* Select Tx 75 / Rx 1200 */
/*mrm31396*/
#if 0

                   tmp_baud = BPS1200;
#endif
                   tmp_baud = BPS1200;
							

               else
                   /* Select Rx 75 / Tx 1200  */
                   tmp_baud = BPS1200;
               break;

           case 3:
               if (sr14.originate_flag)
                   /* Select Rx 75 / Tx 1200  */
                   tmp_baud = BPS1200;
               else
                   /* Select Tx 75 / Rx 1200 */
/*mrm31396*/
#if 0

                   tmp_baud = BPS75_1200;
#endif


                   tmp_baud = BPS1200;

       }
   } /* if (tmp_baud == BPS1200) */

   return (tmp_baud);
}


/*******************************************************************************
/
/    Routine: get_s37_baud
/
/    Author : RSA
/
/    Creation Date: 06/14/91
/
/    Description : This Routine is called to translate the value in s37
/              to a value which translate_modem_baud can use.
/
/    Input Parameters: None
/
/    Output Parameters: ubyte tmp_baud - baud rate determined by s37
/              2  = 300 bps
/              3  = 1200 bps
/              4  = 2400 bps
/              5  = 4800 bps
/              6  = 7200 bps
/              7  = 9600 bps
/              8  = 12000 bps
/              9  = 14400 bps
/              10-13 = Reserved
/              14  = 600 bps
/              15 = Reserved
/              16 = 21600 bps
/              17 = 24000 bps
/              18 = 26400 bps
/              19 = 28800 bps
/              20 = 31200 bps
/              21 = 33600 bps
/              22 = 36000 bps
/
/    Global Variables Changed:  none
/
/    Users:    translate_modem_baud
/
/    -------------------------------------------------------------
/    -            Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA  8/14/95
/    Description:    Add V.34 states
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
ubyte get_s37_baud(void)
{
	ubyte tmp_baud;

	switch(s[37])
	{
		case S37_75_BPS: /* Baud Rates not used */
		case S37_110_BPS:
		case S37_LAST_AUTOBAUD_RATE:

/*mrm8896*/
/* dte speed changes we should connect accordingly*/

		/*	ms_mode = V34;*/
			tmp_baud = dte_baud;
			tmp_baud = dte_baud;
			break;

		case S37_300_BPS:
			tmp_baud = BPS300;
			break;

		case S37_600_BPS:
			tmp_baud = BPS600;
			break;

		case S37_1200_BPS:
			tmp_baud = BPS1200;
			break;

		case S37_2400_BPS:
			tmp_baud = BPS2400;
			break;

		case S37_4800_BPS:
			tmp_baud = BPS4800;
			break;

		case S37_7200_BPS:
			tmp_baud = BPS7200;
			break;

		case S37_9600_BPS:
			tmp_baud = BPS9600;
			break;

		case S37_12000_BPS:
			tmp_baud = BPS12000;
			break;

		case S37_14400_BPS:
			tmp_baud = BPS14400;
			break;

/* start change keh 8/14/95 => add v.34 states */

       case S37_16800_BPS:
           tmp_baud = BPS16800;
           break;

       case S37_19200_BPS:
           tmp_baud = BPS19200;
           break;

       case S37_21600_BPS:
           tmp_baud = BPS21600;
           break;

       case S37_24000_BPS:
           tmp_baud = BPS24000;
           break;

       case S37_26400_BPS:
           tmp_baud = BPS26400;
           break;

       case S37_28800_BPS:
           tmp_baud = BPS28800;
           break;


       case S37_31200_BPS:
           tmp_baud = BPS31200;
           break;
 
       case S37_33600_BPS:
           tmp_baud = BPS33600;
           break;


/* end change keh 8/14/95 => add v.34 states */
	}
	return (tmp_baud);
}


/*******************************************************************************
/
/	Routine: get_modem_baud_and_mode
/
/	Author : RSA
/
/	Creation Date: 05/30/91
/
/	Description : This Routine is called to translate the baud rate of
/		      the established connection to the values needed by
/		      the system code. And to determine the mode of the
/		      connection.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  modem_baud, modem_mode
/
/	Users:	at_O, acu_connect, wait_for_test_connection,
/		wait_for_test_retrain
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void get_modem_baud_and_mode(void)
{
   /* Get current mode and rate from data pump */
   modem_mode = modem_get_mode();
	modem_baud = modem_get_baud_rate();

   /* If connected at V.23 and Tx is 1200 bps need to translate the value
       returned by the modem into one the system code can understand. */
   if (modem_baud == BPS1200)
       if (modem_mode == V23_ADX)
           modem_baud = BPS1200_75;
   
   /* Set V.32bis enable flag according to the mode determined during the
       handshake. */
   if (modem_mode == V32BIS)
       v32bis_enable = TRUE;
   else
       v32bis_enable = FALSE;
}

/*******************************************************************************
/
/	Routine: update_modem_rate_seq
/
/	Author : RSA
/
/	Creation Date: 10/18/91
/
/	Description : This Routine is called to update the modem with the
/		      baud rates selected by s109.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  None
/
/	Users:	at_equal()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA 8/14/95
/	Description: Rewrite routine for V.34
/	Reason:
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void update_modem_rate_seq(void)
{
   
/* start change keh 8/14/95 => add v.34 */
#if 0
*	ubyte rate,fixed_rate,mask,speed;
*
*   /* If this is a V.32 modem then cannot use s109 but need to enable 4800
*       and 9600 bps */
*   if (acu_cfg.mode != CFG_V32BIS)
*       rate = ENABLE_4800_9600;
*   else
*       rate = s[109];
*
*	mask = 0;
*
*        /* If automode is disabled or the modem is online and running DIRECT,
*	   bps_adjust, or autofallback is disabled then only set the bit corresponding
*	   to the baud rate determined by translate_modem_baud(). This is the value
*	   passed into modem_connect() and returned by get_modem_baud_and_mode(). */
*	if ((!automode) || (test_in_progress) || (((slN == DIRECT) ||
*	    (bps_adjust) || ((!v32bis_enable) && (!autofallback))) && (modem_status == CONNECTED_STATUS)))
*	{
*		speed = modem_baud;
*		fixed_rate = TRUE;
*	}
*
*        /* Else, need to determine the speeds enabled by s109 and s37 */
*	else
*	{
*		speed = translate_modem_baud();
*		fixed_rate = FALSE;
*	}
*
*        /* Determine the fixed baud rate or clear bits higher than the max rate	*/
*	switch (speed)
*	{
*		case BPS4800:
*			if (fixed_rate)
*				rate = BPS4800_ONLY;
*			else
*				rate &= BPS4800_MAX;
*			break;
*
*		case BPS7200:
*			if (fixed_rate)
*				rate = BPS7200_ONLY;
*			else
*				rate &= BPS7200_MAX;
*			break;
*
*		case BPS9600:
*			if (fixed_rate)
*				rate = BPS9600_ONLY;
*			else
*				rate &= BPS9600_MAX;
*			break;
*
*		case BPS12000:
*			if (fixed_rate)
*				rate = BPS12000_ONLY;
*			else
*				rate &= BPS12000_MAX;
*			break;
*
*		case BPS14400:
*			if (fixed_rate)
*				rate = BPS14400_ONLY;
*			else
*				rate &= BPS14400_MAX;
*			break;
*	}
*
*        /* If V.32 is enabled then need to force 7200 to 4800 and 12000 and 14400
*	   to 9600 */
*	if (!v32bis_enable)
*	{
*		if (rate & BPS7200_ONLY)
*			rate |= BPS4800_ONLY;
*			rate &= CLEAR_BIT_7200;
*
*		if ((rate & BPS12000_ONLY) || (rate & BPS14400_ONLY))
*			rate |= BPS9600_ONLY;
*			rate &= CLEAR_BIT_12000;
*			rate &= CLEAR_BIT_14400;
*	}
*
*        /* Determine the possible baud rates, and pass this value to the modem
*           task	*/
*	modem_set_rate_seq(rate);
#endif /* orig */


/*mrm22796*/
#if 0

   /* If this is a V.32 modem then cannot use s109 but need to enable 4800
       and 9600 bps */
   if ((acu_cfg.mode == CFG_V32) ||
		((acu_cfg.mode == CFG_V32BIS) && (v32bis_enable == ENABLE_V32)))
       rate_map = ENABLE_4800_9600;
   else if (acu_cfg.mode == CFG_V32BIS)
       rate_map = s[109];
/*
   else /* (acu_cfg.mode == CFG_V34 */
       rate_map = s[109] | (s[113]<<8);


   /* If automode is disabled or the modem is online and running DIRECT,
       bps_adjust, or autofallback is disabled then only set the bit
       corresponding to the baud rate determined by translate_modem_baud().
       This is the value passed into modem_connect() and returned by
       get_modem_baud_and_mode(). */
   if ((!automode) || (test_in_progress) || (((slN == DIRECT) ||
       (bps_adjust) || ((!v32bis_enable) && (!autofallback))) &&
       (modem_status == CONNECTED_STATUS)))
   {
       speed = modem_baud;
       fixed_rate = TRUE;
   }
   /* Else, need to determine the speeds enabled by s109 and s37 */
   else
   {
       speed = translate_modem_baud();
       fixed_rate = FALSE;
   }
#endif

	ubyte fixed_rate,speed;
   uword rate_map,asymetric_rate_map;


       speed = translate_modem_baud();

/*MRM22796*/

		 if(speed == ms_min_rate)
			fixed_rate = TRUE;
		 else
       	fixed_rate = FALSE;

   /* Determine the fixed baud rate or clear bits higher than the max rate */
   switch (speed)
   {


   	case BPS2400:
           if (fixed_rate)
               rate_map = BPS2400_ONLY;
           else
               rate_map = ms_min_speed & BPS2400_MAX;
           break;

       case BPS4800:
           if (fixed_rate)
               rate_map = BPS4800_ONLY;
           else
               rate_map = ms_min_speed & BPS4800_MAX;
           break;

       case BPS7200:
           if (fixed_rate)
               rate_map = BPS7200_ONLY;
           else
               rate_map = ms_min_speed & BPS7200_MAX;
           break;

       case BPS9600:
           if (fixed_rate)
               rate_map = BPS9600_ONLY;
           else
               rate_map = ms_min_speed & BPS9600_MAX;
           break;

       case BPS12000:
           if (fixed_rate)
               rate_map = BPS12000_ONLY;
           else
               rate_map = ms_min_speed & BPS12000_MAX;
           break;

       case BPS14400:
           if (fixed_rate)
               rate_map = BPS14400_ONLY;
           else
               rate_map = ms_min_speed & BPS14400_MAX;
           break;

       case BPS16800:
           if (fixed_rate)
               rate_map = BPS16800_ONLY;
           else
               rate_map = ms_min_speed & BPS16800_MAX;
           break;

       case BPS19200:
           if (fixed_rate)
               rate_map = BPS19200_ONLY;
           else
               rate_map = ms_min_speed & BPS19200_MAX;
           break;

       case BPS21600:
           if (fixed_rate)
               rate_map = BPS21600_ONLY;
           else
               rate_map = ms_min_speed & BPS21600_MAX;
           break;

       case BPS24000:
           if (fixed_rate)
               rate_map = BPS24000_ONLY;
           else
               rate_map = ms_min_speed & BPS24000_MAX;
           break;

       case BPS26400:
           if (fixed_rate)
               rate_map = BPS26400_ONLY;
           else
               rate_map = ms_min_speed & BPS26400_MAX;
           break;

       case BPS28800:
           if (fixed_rate)
               rate_map = BPS28800_ONLY;
           else
               rate_map = ms_min_speed & BPS28800_MAX;
           break;

       case BPS31200:
           if (fixed_rate)
               rate_map = BPS31200_ONLY;
           else
               rate_map = ms_min_speed & BPS31200_MAX;
           break;

        case BPS33600:
           if (fixed_rate)
               rate_map = BPS33600_ONLY;
           else
               rate_map = ms_min_speed & BPS33600_MAX;
           break;
 
    }

   /* Pass Rate Word configuration to the modem task */
   asymetric_rate_map = DISABLED;
   modem_set_rate_seq(rate_map,asymetric_rate_map);

/* end change keh 8/14/95 => add v.34 */
}



/*******************************************************************************
/
/	Routine: str_len
/
/	Author : RSA
/
/	Creation Date: 05/07/91
/
/	Description : This Routine calculates the length of a character string.
/
/	Input Parameters: ubyte *str - character length
/
/	Output Parameters: uword num - calculated length
/
/	Global Variables Changed:  none
/
/	Users:	build_cmd_line, and_Z, v25_build_cmd_line, v25_build_sync_cmd_line
/		dial_stored_num
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
uword str_len(ubyte *str)
{
	uword num;
	ubyte *ptr;

	ptr = str;
	num = 0;
	while (*ptr != '\0')
	{
		num++;
		ptr++;
	}
	return (num);
}



/*******************************************************************************
/
/	Routine: on_hook
/
/	Author : RSA
/
/	Creation Date: 05/07/91
/
/	Description : This Routine calls modem_hook_relay() to disconnect the
/		      modem from the telephone line.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  hook
/
/	Users:	init_ALB_test, pulse_char, flash, hang_up, ll_hang_up
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void on_hook(void)
{
	if (!hook)
	{
		hook = TRUE;
		modem_hook_relay(ON_HOOK);
		modem_speaker(OFF);
		/*modem_oh_led(OFF);*/ /* ramn 9/20/96 */
	}
	/*
		when hanging up make sure that the callerid relay is also off
		This may be needed if +VCID=1 and some how call answered on first
		ring
	*/
	set_callerid_relay( CID_RELAY_OFF);	/* ramn 12/19/96 */

}


/*******************************************************************************
/
/	Routine: off_hook
/
/	Author : RSA
/
/	Creation Date: 05/07/91
/
/	Description : This Routine calls modem_hook_relay90 to connect the
/		      modem to the telephone line.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  hook
/
/	Users:	at_H, pulse_char, flash, orig_init, acu_answ
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void off_hook(void)
{
	if (hook)
	{
		hook = FALSE;
		modem_hook_relay(OFF_HOOK_NOT_DIALED);

		if ((sr22.speaker_ctrl == ALWAYS_ON) || (sr22.speaker_ctrl == ON_UNTIL_CD))
			modem_speaker(ON);
		/*modem_oh_led(ON);*/ /* ramn 9/20/96 */
	}
}


/*******************************************************************************
/
/	Routine: hangup_connection
/
/	Author : RSA
/
/	Creation Date: 05/07/91
/
/	Description : This Routine is called either halt the V.42 code or cause
/		      the ACU to hangup immediately if in DIRECT mode.
/
/	Input Parameters: ubyte type - type of result code to be sent to the terminal
/
/	Output Parameters: None
/
/	Global Variables Changed:  delay_before_hangup
/
/	Users:	idle_online_DTR_off, at_H, online_at_fp_data, online_v25_DTR_off,
/		online_v25_fp_data
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date: RSA
/       Description:
/       Reason:
/
*******************************************************************************/
void hangup_connection(ubyte type)
{
   if (comm_mode == ASYNC)
   {
	/* delay only in reliable mode */
       if (operating_mode != DIRECT)	/* ramn 6/10/96 */
		 /*if (operating_mode == RELIABLE)*/ 	/* ramn 6/10/96 */
       {
           system_halt(ACU_HALTED);
           delay_before_hangup = TRUE;
       }
   }
   build_event(E_HANGUP,type);
}


/* start change keh 8/4/95 => unused w/ new parser */
#if 0
/*******************************************************************************
/
/	Routine: unget_char
/
/	Author : RSA
/
/	Creation Date: 01/28/92
/
/	Description : This Routine will move the command pointer back the
/		      indicated number of characters.
/
/	Input Parameters: ubyte num - number of times to decrement the command
/					pointer.
/
/	Output Parameters: None
/
/	Global Variables Changed:  cmd_ptr
/
/	Users:	at_plus
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void unget_char(ubyte num)
{
	cmd_ptr -= num;
}
#endif
/* end change keh 8/4/95 => unused w/ new parser */

