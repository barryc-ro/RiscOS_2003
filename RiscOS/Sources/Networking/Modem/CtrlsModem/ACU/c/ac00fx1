/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00fx1.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains ACU specific interface routines
/                       for FAX.
/
/     Product:          ACU FAX Driver code
/
/     History:
/
/        Created:       
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "acu_fax.h"
#include "fax_pro.h"
#include "mt_pro.h"

/* List of functions in this file. Some compilers need it. */
void process_fax_bg(void);
void process_fax_hangup(ubyte);
void start_fax_connection(void);
void idle_fax_v24(void);
void online_fax_v24(void);
void proc_idle_fax_on(void);
void fax_continue_online(void);
void proc_online_fax(void);
void online_fax_to_idle(void);
void proc_at_fax_hangup(void);

const struct stateTab_struct st_online_fax[EVT_MAX+1] =
{
/* MSG        */  {S_ONLINE,  ignore},
/* CHAR_RCVD  */  {S_ONLINE,  ignore},
/* ORIG       */  {S_ONLINE,  ignore},
/* ANSW       */  {S_ONLINE,  ignore},
/* CONNECT    */  {S_ONLINE,  ignore},
/* IDLE       */  {S_IDLE,    online_fax_to_idle},
/* RESET      */  {S_IDLE,    hard_reset},
/* SYS_STAT   */  {S_ONLINE,  ignore},
/* RING       */  {S_ONLINE,  ignore},
/* DP_CD_OFF  */  {S_ONLINE,  ignore},
/* HANGUP     */  {S_HANGUP,  proc_at_fax_hangup},
/* RETRAIN    */  {S_ONLINE,  ignore},
/* TEST       */  {S_ONLINE,  ignore},
/* PARSE      */  {S_ONLINE,  ignore},
/* V24        */  {S_ONLINE,  online_fax_v24},
/* FP         */  {S_ONLINE,  ignore},
/* ESC_RXD    */  {S_ONLINE,  ignore},
};

const struct stateTab_struct st_idle_fax_on[EVT_MAX+1] =
{
/* MSG        */  {S_IDLE,    idle_at_msg},
/* CHAR_RCVD  */  {S_IDLE,    idle_chk_char},
/* ORIG       */  {S_IDLE,    ignore},
/* ANSW       */  {S_IDLE,    ignore},
/* CONNECT    */  {S_ONLINE,  at_pstn_online},
/* IDLE       */  {S_IDLE,    ignore},
/* RESET      */  {S_IDLE,    hard_reset},
/* SYS_STAT   */  {S_IDLE,    ignore},
/* RING       */  {S_IDLE,    ignore},
/* DP_CD_OFF  */  {S_IDLE,    ignore},
/* HANGUP     */  {S_HANGUP,  proc_at_fax_hangup},
/* RETRAIN    */  {S_IDLE,    ignore},
/* TEST       */  {S_TEST,    ignore},
/* PARSE      */  {S_PARSE,   idle_to_parse},
/* V24        */  {S_IDLE,    idle_fax_v24},
/* FP         */  {S_IDLE,    ignore},
/* ESC_RXD    */  {S_IDLE,    ignore},
};


/*******************************************************************************
/
/     Routine:       process_fax_bg
/
/     Author:        RSA
/
/     Creation Date: 01/27/92
/
/     Description:   This Routine will call on FAX background processing.
/                    It will process the FAX background response codes.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: main() (Master background loop which calls all modules).
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void process_fax_bg(void)
{
   ubyte response_code;

/* don't waist CPU time if FAX not active */

/* shujin 9/9/97, move into acu_main
   if (!fax_class || fax_class==80) 
      return;
*/

/*mrm41796*/

    if  ( (andK == 4) || (slQ == 1) )
        alt_fax_flow_control = 1;



   /* setup the FAX environment */
   fax_configure(fax_class, (ubyte)sr14.verbose_form, dte_baud,
                  fax_class > 2 ? fax_flow_control : alt_fax_flow_control);

   /* perform FAX background processing */
   response_code = fax_bg();

   switch (response_code)
   {
      case FAX_STAY_ONLINE: /* nothing requested. No transitions */
         /* if the fax_timer routine is called from background due to */
         /* an ISR incremented timer counter, the counter should be set */
         /* to 1 if greater than 1. This prevents the fax_timer routine */
         /* from being called repeatedly due to unserviced timer tickes */
         modem_disable_interrupts();
         if (acu_10msec_timer > 1)
            acu_10msec_timer = 1;
         if (acu_100msec_timer > 1)
            acu_100msec_timer = 1;
         if (acu_1sec_timer > 1)
            acu_1sec_timer = 1;
         if (acu_1min_timer > 1)
            acu_1min_timer = 1;
         modem_enable_interrupts();
         break;

      case FAX_STAY_PARSE:
         break;
      
      case FAX_GOTO_PARSE_OK: /* take back port, OK, look for AT*/
         acu_restart(); /* configure DTE port with previous parms */
         /* set_parms also configures the baud rate with date_baud variable*/
         set_parms(acu_data_bits, acu_parity, acu_stop_bits);
         build_event(E_IDLE, UNUSED); /* go to parse state before responding*/
         build_event(E_MSG, OK); /* this assures not missing the AT */
         break;

      case FAX_GOTO_PARSE_NO_CARRIER:
         acu_restart();
         set_parms(acu_data_bits, acu_parity, acu_stop_bits);
         build_event(E_IDLE, UNUSED);
         build_event(E_MSG, NO_CARRIER);
         break;

      case FAX_GOTO_PARSE_ERROR:
         acu_restart();
         set_parms(acu_data_bits, acu_parity, acu_stop_bits);
         build_event(E_IDLE, UNUSED);
         build_event(E_MSG, ERROR);
         break;

      case FAX_GOTO_PARSE_FCERROR: /* only used by class 1 */
         acu_restart();
         set_parms(acu_data_bits, acu_parity, acu_stop_bits);
         build_event(E_IDLE, UNUSED);
         /* respond with +FCERROR or +F4 */
         build_event(E_MSG, FCERROR);
         break;

      case FAX_GOTO_HANGUP: /* go from FAX online to hangup state */
         acu_restart();
         set_parms(acu_data_bits, acu_parity, acu_stop_bits);

         /* Allow for Voice call discrimination */
         if (acu_cntrld_hangup)
            acu_hangup_line = FALSE;

         build_event(E_HANGUP,OK);
         break;

      case FAX_GOTO_ONLINE: /* transition from parse to FAX online */
         /* This allows FAX to terminate the connection properly */
         autobaud_off(); /* turn off autobaud hardware */
         acu_halt(); /* release the DTE port */
         build_event(E_CONNECT, CONN_FAX);
         break;

      default:
         break;
   }
}

/*******************************************************************************
/
/     Routine:       process_fax_hangup
/
/     Author:        RSA
/
/     Creation Date: 03/03/92
/
/     Description:   This Routine will reset any FAX specific ACU modes,
/                    and call fax_hangup to allow a proper FAX termination.
/
/     Input Parameters: ubyte at_command
/                       TRUE  - hangup initiated by an AT command (ATH0, ATZ)
/                       FALSE - hangup initiated by modem processing
/
/     Output Parameters: none
/
/     Global Variables Changed: None
/
/     Users: hang_up() (ACU main hangup procedure)
/          answ_handshaking() (ACU answer call establishment. +FAA=1 DATA found)
/          ATA, ATD, ATH0, ATZ
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void process_fax_hangup(ubyte at_command)
{
   if (at_command)                     /* if hangup due to AT command */
   {
      while (acu_to_num());           /* make sure all the outgoing data */
      while (!check_all_sent());      /* is flushed */
      acu_packet_protocol(OFF, PP_TIMEOUT); /* end packet protocol now */
   }
   else                                /* else wait untill response sent */
   {
      terminate_packet_protocol = TRUE;
   }

   fax_class = 0;                      /* reset to data mode EIA/TIA-592 */
   dont_autobaud = FALSE;              /* +FPR not active if +FCLASS=0 */
   voice_port_rate = 0;                /* +VPR or #BDR not active upon reset event */
   dont_echo = FALSE;                  /* +FPP not active if +FCLASS=0 */
   delay_to_exec = ACU_EXEC_DELAY;     /* AT delay to execute command 125 ms */
   fax_connected = FALSE;              /* no fax connection */
   on_line_command = FALSE;            /* allow commands when not connected */

     /*modem_fax_led(OFF);*/ /* ramn 9/20/96 */                         /* turn off the fax LED */
   if (sr21.RLSD_reflects_CD)          /* if &C == 1 RLSD follows ON/OFF hook */
      modem_dte_rlsd(OFF);             /* turn off carrier detect DTE signal */

   /* setup the FAX environment */
   fax_configure(fax_class, (ubyte)sr14.verbose_form, dte_baud,
      fax_class > 2 ? fax_flow_control : alt_fax_flow_control);

   fax_hangup();                       /* terminate any existing connection */
     /*modem_fax_led(OFF);*/ /* ramn 9/20/96 */                         /* turn off the fax LED */
}

/*******************************************************************************
/
/     Routine:       start_fax_connection
/
/     Author:        RSA
/
/     Creation Date: 01/27/92
/
/     Description:   This Routine is called once Phase A has been established.
/                    It will perform some ACU tasks, call on FAX to take over
/                    the connection, and put the ACU in online FAX state.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: None
/
/     Users: originate_handshaking(), answ_handshaking()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void start_fax_connection(void)
{
   /* If +FCLASS= 1 or 2 stop autobauding, and use the last DTE baudrate. */
   /* Class 1 and 2 apps packages send AT commands before the completion of */
   /* the response from the previous AT command. This causes most autobaud */
   /* schemes to malfunction. Apps packages do not switch baudrates after */
   /* establishing the connection. TIA/EIA-592 introduced the +FPR=0 command */
   /* which specifies the modem should autobaud. We hope the Apps people */
   /* adhere to it and allow the modem enough time to setup for autobaud. */
   if (fax_class <= 2)
      dont_autobaud = TRUE;

   /* Class 1 has very serious timing problems. A normal 125 ms delay before*/
   /* execution is unfeasible. We found a 20 ms delay to be sufficient at */
   /* the higher FAX dte baudrates. */
   delay_to_exec = FAX_EXEC_DELAY;

   /* Turn off the speaker if configured so */
   if ((sr22.speaker_ctrl == ON_UNTIL_CD) || (sr22.speaker_ctrl == OFF_DIALING))
      modem_speaker(OFF);

   /* If adaptive answering was active and fclass=1 or 2 respond FAX */
   /* This is a Rockwell implementation which the market adopted */
   if (!sr14.originate_flag && connect_type == CONNECT_DATA_FAX &&
      fax_class <= 2)
   {
      /* adaptive answering packages will not always set +FCLASS */
      /* we'll assume they intended class 2 */
      if (!fax_class)
         fax_class = 2;
      /* respond "FAX" to the APP */
      if (sr14.verbose_form)
         output_info((ubyte *)FAX_ROCKWELL_VERBOSE, VERBOSE_FORM);
      else
         output_info((ubyte *)FAX_ROCKWELL_NUMERIC, VERBOSE_FORM);
   }

    /*modem_cd_led(ON);*/ /* ramn 9/20/96 */ /* turn carrier detect led on */
   if (sr21.RLSD_reflects_CD) /* if &C == 1 RLSD follows ON/OFF hook */
      modem_dte_rlsd(ON); /* assert carrier detect DTE signal */
    /*modem_serial_echo(OFF); */ /* ramn 9/20/96 *//* turn off hardware echo */
   modem_char(SYNC_NORMAL,char_size,overspeed); /* configure DP for sync mode */

   /* Make sure the response is sent before giving up the port */
   while (acu_to_num());
   while (!check_all_sent());
   acu_halt(); /* turn of SCC interrupts */

   /* setup the FAX environment */
   fax_configure(fax_class, (ubyte)sr14.verbose_form, dte_baud,
      fax_class > 2 ? fax_flow_control : alt_fax_flow_control);

   /* Start a FAX connection */
   fax_connect((ubyte)sr14.originate_flag);
     /*modem_fax_led(ON);*/ /* ramn 9/20/96 */

   fax_connected = TRUE; /* help the ACU know when there's a fax connection*/
   on_line_command = TRUE; /* do not allow specific commands during fax */

   /* take the ACU to FAX online state */
   build_event(E_CONNECT, CONN_FAX);
}

/*******************************************************************************
/
/     Routine:       idle_fax_v24
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will process V24 signal changes.
/                    DTR drop is the only event processed.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: None
/
/     Users: st_idle_fax_on[], st_parse_fax_on[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void idle_fax_v24(void)
{
   if (acu_event->parm == DTR_OFF)
   {
      if (sr21.DTR_control == 1 || sr21.DTR_control == 2)
         build_event(E_HANGUP, OK);
   }
}

/*******************************************************************************
/
/     Routine:       online_fax_v24
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will process V24 signal changes in fax online
/                    state. DTR drop is the only event processed.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: None
/
/     Users: st_online_fax[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void online_fax_v24(void)
{
   if (acu_event->parm == DTR_OFF)
   {
      if (sr21.DTR_control == 1 || sr21.DTR_control == 2)
      {
         fax_hangup(); /* terminate any existing connection */
            /*modem_fax_led(OFF); */ /* ramn 9/20/96 */     /* turn off the fax LED */
         acu_restart(); /* take back the DTE port */
         set_parms(acu_data_bits, acu_parity, acu_stop_bits);
         build_event(E_HANGUP, OK); /* respond OK after hanging up */
      }
   }
}

/*******************************************************************************
/
/     Routine:       proc_idle_fax_on
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will process the event by determining the
/                    next state and the action to be performed for the IDLE
/                    state of type FAX_ONLINE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: acu_state, acu_proc
/
/     Users: proc_idle
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
#if 0
void proc_idle_fax_on(void)
{
   acu_state = st_idle_fax_on[acu_event->type].new_state;
   acu_proc = st_idle_fax_on[acu_event->type].fnc_ptr;
}
#endif

/*******************************************************************************
/
/     Routine:       fax_continue_online
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will continue a FAX connection after a
/                    procedure interrupt.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: None
/
/     Users: st_parse_fax_on[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void fax_continue_online(void)
{
   start_fax_connection();
}

/*******************************************************************************
/
/     Routine:       proc_online_fax
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will process the event by determining the
/                    next state and the action to be performed for the ONLINE
/                    state of type FAX.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: acu_state, acu_proc
/
/     Users: proc_idle
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
#if 0
void proc_online_fax(void)
{
   acu_state = st_online_fax[acu_event->type].new_state;
   acu_proc = st_online_fax[acu_event->type].fnc_ptr;
}
#endif

/*******************************************************************************
/
/     Routine:       online_fax_to_idle
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will specify the idle state to be of type FAX.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: None
/
/     Users: st_online_fax[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void online_fax_to_idle(void)
{
   state_type[S_IDLE] = FAX_ONLINE;
}

/*******************************************************************************
/
/     Routine:       proc_at_fax_hangup
/
/     Author:        RSA
/
/     Creation Date: 01/17/95
/
/     Description:   This Routine will specify the hangup state to be of
/                    type FAX.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: None
/
/     Users: st_online_fax[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void proc_at_fax_hangup(void)
{
   /* Call the standard AT_PSTN hangup routine, but force the hangup
      sub-state to fax */
   proc_at_hangup();
   st_hangup.state = HANGUP_FAX_INIT;
}


