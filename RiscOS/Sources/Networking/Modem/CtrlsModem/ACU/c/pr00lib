/****************************************************************************
/
/   Copyright 1988,1989,1990,1991,1992,1993,1994.
/   All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.  The information contained herein is solely
/   for the use of RSA.
/
/   File:           pr00lib.c
/
/   Module Version: ACU 4.02
/
/   Function:       This file contains the libaray and misc. routines for the
/                   ACU's stand alone AT command parser.
/
/   Product:        ACU core code
/
/   History:        None.
/
/       Created:    2/01/95
/
/       ---------------------------------------------------------
/       -                   Modifications                       -
/       ---------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:
/       Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "par_def.h"
#include "par_mem.h"

/* Locals */
ubyte string_len(ubyte *);
ubyte toupper(ubyte);
void parse_strip_spaces(void);
void parse_make_upper_case(void);
ubyte parameter_a_to_d(ubyte);
ubyte param_compound_numeric(ubyte);
ubyte parameter_a_to_h(ubyte);
ubyte param_compound_hex(ubyte);
void end_parameter_buffer(ubyte);


/*******************************************************************************
/
/   Routine:        string_len
/
/   Author:         RSA
/
/   Creation Date:  02/01/95
/
/   Description:    This Routine computes the length of 'C' string (i.e. ends
/                   in zero - 0x00).
/
/   Input Parameters:   str - Pointer to a string < 255 chars
/
/   Output Parameters:  size of string
/
/   Global Variables Changed: None
/
/   Users:
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
ubyte string_len(ubyte *str)
{
   ubyte i;

   for (i = 0; i < STRING_MAX; i++,str++)
       if (*str == 0)
           break;
   return (i);
}


#ifndef __riscos
/*******************************************************************************
/
/   Routine:        toupper
/
/   Author:         RSA
/
/   Creation Date:  02/01/95
/
/   Description:    This Routine returns the Capitalized version of an
/                   alphabetic character.  If no change is made if the input
/                   is not alphabetic.
/
/   Input Parameters:   ch - Character to make upper case.
/
/   Output Parameters:  ch - Upper case version of character if it was
/                               alphabetic.
/
/   Global Variables Changed: None
/
/   Users:
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
ubyte toupper(ubyte ch)
{
   if ((ch >= 'a') && (ch <= 'z'))
       return (ch - 0x20);
   else
       return (ch);
}
#endif


/*******************************************************************************
/
/   Routine:        parse_strip_spaces
/
/   Author:         RSA
/
/   Creation Date:  02/01/95
/
/   Description:    This Routine strips spaces from the command line buffer.
/
/   Input Parameters:   None
/
/   Output Parameters:  None.
/
/   Global Variables Changed: None
/
/   Users:
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void parse_strip_spaces(void)
{
/* start change keh 8/15/95 => unused var */
/*   ubyte *nextchar,*lastchar,len; */
   ubyte *nextchar,*lastchar;
/* end change keh 8/15/95 => unused var */
/* start change keh 9/29/95 => dont strip spaces w/in quotes */
   ubyte dont_strip = FALSE;
/* end change keh 9/29/95 => dont strip spaces w/in quotes */

   /* Strip spaces from command line */
   nextchar = lastchar = parse_cmd_ptr;

   /* While not end of command line */
   while (*lastchar != '\0')
   {
/* start change keh 9/29/95 => dont strip spaces w/in quotes */
/*       if ((*nextchar != ' ') */

       if (*nextchar == '"')
           dont_strip = ~dont_strip;

       if ((*nextchar != ' ') || dont_strip)
/* end change keh 9/29/95 => dont strip spaces w/in quotes */
       {
           if (nextchar == lastchar)
           {
               lastchar++;
           }
           else
           {
               *lastchar = *nextchar;
               lastchar++;
           }
       }
       nextchar++;
   }
}



/*******************************************************************************
/
/   Routine:        parse_make_upper_case
/
/   Author:         RSA
/
/   Creation Date:  02/01/95
/
/   Description:    This Routine will make all alphabetic characters in the
/                   command line uppercase (if appropriate).
/
/   Input Parameters:   None
/
/   Output Parameters:  None.
/
/   Global Variables Changed: None
/
/   Users:
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void parse_make_upper_case(void)
{
   ubyte *char_ptr,got_string;

   /* Start at the begining of the command line */
   char_ptr = parse_cmd_ptr;
   got_string = FALSE;

   /* While not end of command line */
   while (*char_ptr != '\0')
   {
       /* Data in Formatted Strings shouldn't be forced upper case */
       if (*char_ptr == '"')
           got_string = ~got_string;

       /* Force uppercase if not in double quotes */
       if (!got_string)
           *char_ptr = toupper(*char_ptr);

       /* Next char */
       char_ptr++;
   }
}


/*******************************************************************************
/
/   Routine:        end_parameter_buffer
/
/   Author:         RSA
/
/   Creation Date:  02/27/95
/
/   Description:    This Routine will put an End Of Buffer sequence (NULL) on
/                   the parameter buffer .
/
/   Input Parameters:   buffer size -
/                       1 (BYTE_NUMERIC) = 0x00 - 0xFF
/                       2 (WORD_NUMERIC) = 0x00 - 0xFFFF
/                       3 (LONG_NUMERIC) = 0x00 - 0xFFFF.FFFF
/
/   Output Parameters:  none.
/
/   Global Variables Changed: None
/
/   Users:
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void end_parameter_buffer(ubyte size)
{
   switch (size)
   {
       case BYTE_NUMERIC:
       case BYTE_HEX:
           parse_p_buffer.bdata[parse_p_cnt] = 0;
           break;

       case WORD_NUMERIC:
       case WORD_HEX:
           parse_p_buffer.wdata[parse_p_cnt] = 0;
           break;

       case LONG_NUMERIC:
       case LONG_HEX:
           parse_p_buffer.ldata[parse_p_cnt] = 0;
           break;
    }
}

/*******************************************************************************
/
/   Routine:        parameter_a_to_d
/
/   Author:         RSA
/
/   Creation Date:  02/01/95
/
/   Description:    This Routine will extract ASCII data from the command line,
/                   format it to decimal intergers, and put the data in the AT
/                   Parameter Buffer.
/
/   Input Parameters:   size -
/                       1 (BYTE_NUMERIC) = 0x00 - 0xFF
/                       2 (WORD_NUMERIC) = 0x00 - 0xFFFF
/                       3 (LONG_NUMERIC) = 0x00 - 0xFFFF.FFFF
/
/   Output Parameters:  error - 0 (PARSER_VALID) = numeric put in parameter
                                                    buffer
/                               1 (PARSER_ERROR) = Invalid ASCII data
/
/   Global Variables Changed: None
/
/   Users:
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
ubyte parameter_a_to_d(ubyte max_size)
{
   ulong temp, ltemp;

   /* No numer is the same as zero */
   temp = 0;
   ltemp = 0;

   /* Convert consecutive ASCII command line digits into an integer */
   while (*parse_cmd_ptr != NULL)
   {
       /* Only take digits */
       if ((*parse_cmd_ptr >= '0') && (*parse_cmd_ptr <= '9'))
       {
           /* ASCII to decimal conversion */
           temp = (temp * 10) + (ulong)(*parse_cmd_ptr++ - '0');
           switch (max_size)
           {
               /* Test value for 8bit bounds */
               case BYTE_NUMERIC:
                   if (temp > 0xFF)
                       return PARSER_ERROR;
                   break;

               /* Test value for 16bit bounds */
               case WORD_NUMERIC:
                   if (temp > 0xFFFF)
                       return PARSER_ERROR;
                   break;

               /* Test value for 32bit bounds */
               case LONG_NUMERIC:
                   /* Test ahead for long word overrun */
                   if (temp & 0x80000000)
                   {
                       ltemp = (temp * 10) + (ulong)(*parse_cmd_ptr - '0');
                       if (!(ltemp & 0x80000000))
                           return PARSER_ERROR;
                   }
                   break;
           }
       }
       else
           break; /* break from while when non digit is found */
   }

   /* Save the number in the parameter array */
   if (max_size == BYTE_NUMERIC)
       parse_p_buffer.bdata[parse_p_cnt++] = (ubyte)temp;
   else if (max_size == WORD_NUMERIC)
       parse_p_buffer.wdata[parse_p_cnt++] = (uword)temp;
   else /* (max_size == LONG_NUMERIC) */
       parse_p_buffer.ldata[parse_p_cnt++] = temp;

   end_parameter_buffer(max_size);

   return PARSER_VALID;
}



/*******************************************************************************
/
/   Routine:        param_compound_numeric
/
/   Author:         RSA
/
/   Creation Date:  02/01/95
/
/   Description:    This Routine will extract ASCII data from the command line,
/                   and format it to compound intergers.
/
/                   Compound parameters (as defined by TIA/EIA 592) have
/                   the following form:
/                       AT+F=1,2,3,4,5
/
/                   This parameter has the following format in the Parse
/                   Parameter Buffer:
/                       [f,p,f,p,...0] (f=field, p=parameter value, 0 is
/                                       end of parameters)
/                       Examples:
/                       AT+F=5,6,7   => [0x1,0x5, 0x2,0x6, 0x3,0x7, 0x00]
/                       AT+F=,6,,8   => [0x2,0x6, 0x4,0x8, 0x00]
/                       AT+F=0       => [0x1,0x0, 0x00]
/                       AT+F=        => [0x00]
/                       AT+F=300,600 => [0x001,0x012C, 0x002,0x0258, 0x0000]
/
/   Input Parameters:   size -
/                       1 (BYTE_NUMERIC) = 0x00 - 0xFF
/                       2 (WORD_NUMERIC) = 0x00 - 0xFFFF
/                       3 (LONG_NUMERIC) = 0x00 - 0xFFFF.FFFF
/
/   Output Parameters:  error - 0 (PARSER_VALID) = numeric put in parameter
/                                                    buffer
/                               1 (PARSER_ERROR) = Invalid ASCII data
/
/   Global Variables Changed: None
/
/   Users:
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
ubyte param_compound_numeric(ubyte size_type)
{
   ubyte num   = 0;
   ubyte index = 1;
   ubyte error = FALSE;

   /*
    *  Parameter structure for AT command's w/ compound byte values
    *   [f,p,f,p,...0] (f=field, p=parameter value, 0 is end of parameters)
    *
    *  Examples:
    *      AT+F=5,6,7,8 => [0x1,0x5, 0x2,0x6, 0x3,0x7, 0x4,0x8, 0x00]
    *      AT+F=,6,,8   => [0x2,0x6, 0x4,0x8, 0x00]
    *      AT+F=0       => [0x1,0x0, 0x00]
    *      AT+F=        => [0x00]
    */
   while ((*parse_cmd_ptr != 0) && !error)
   {
       num = *parse_cmd_ptr;
       if (num == ',')
       {
           parse_cmd_ptr++;
           index++;
       }
       else if ((num >= '0') && (num <= '9'))
       {
           if (size_type == BYTE_NUMERIC)
               parse_p_buffer.bdata[parse_p_cnt++] = index;
           else if (size_type == WORD_NUMERIC)
               parse_p_buffer.wdata[parse_p_cnt++] = index;
           else if (size_type == LONG_NUMERIC)
               parse_p_buffer.ldata[parse_p_cnt++] = index;
           else
               return (TRUE); /* Error condition */

           /* Add cmd line parameter to parameter buffer */
           error = parameter_a_to_d(size_type);
       }
       else
       {
           /* a non numeric character was encountered */
           break;
       }
   }

   /* Set End of Buffer */
   if (!error)
       end_parameter_buffer(size_type);

   return error;
}


/*******************************************************************************
/
/   Routine:        parameter_a_to_h
/
/   Author:         RSA
/
/   Creation Date:  02/01/95
/
/   Description:    This Routine will extract ASCII data from the command line,
/                   format it to hex intergers, and put the data in the AT
/                   Parameter Buffer.
/
/   Input Parameters:   size -
/                       1 (BYTE_NUMERIC) = 0x00 - 0xFF
/                       2 (WORD_NUMERIC) = 0x00 - 0xFFFF
/                       3 (LONG_NUMERIC) = 0x00 - 0xFFFF.FFFF
/
/   Output Parameters:  error - 0 (PARSER_VALID) = numeric put in parameter
                                                    buffer
/                               1 (PARSER_ERROR) = Invalid ASCII data
/
/   Global Variables Changed: None
/
/   Users:
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA/keh 6/26/95
/   Description: add code to ignore leading zeros and test for overrun
/   Reason: bugs found w/ fax 2.0 testing
/
*******************************************************************************/
ubyte parameter_a_to_h(ubyte parm_type)
{
   ulong data = 0;
   ubyte i,size;

   /* Set number of ASCIIs required for hex conversion */
   if (parm_type == BYTE_HEX)
       size = 2;
   else if (parm_type == WORD_HEX)
       size = 4;
   else if (parm_type == LONG_HEX)
       size = 8;
   else
       return PARSER_ERROR;

   /* Has to be 2 ASCII chars for 32bit Hex Mask */
   for (i = 0; i < size; i++)
   {
/* start change keh 6/26/95 => ignore leading zeros */
       /* Ignore leading zeros */
       while ((i==0) && (*parse_cmd_ptr == '0'))
           parse_cmd_ptr++;
/* end change keh 6/26/95 => ignore leading zeros */

       /* if 0-9 then subtract from 0 to get the offset */
       if ((*parse_cmd_ptr >= '0') && (*parse_cmd_ptr <='9'))
       {
           data <<= 4; /* make room for new char */
           data |= (ulong)(*parse_cmd_ptr++ - '0');
       }
       /* if A-F then subtract from A to get the offset */
       else if ((*parse_cmd_ptr >= 'A') && (*parse_cmd_ptr <='F'))
       {
           data <<= 4; /* make room for new char */
           data |= (ulong)(*parse_cmd_ptr++ - 'A') + 10;
       }
       else
           break;  /* Done early */
   }

/* start change keh 6/26/95 => test for overrun */
   /* Test for overrun for all parameter sizes */
   if ((*parse_cmd_ptr >= '0') && (*parse_cmd_ptr <='9') ||
       (*parse_cmd_ptr >= 'A') && (*parse_cmd_ptr <='F'))
       return PARSER_ERROR;
/* end change keh 6/26/95 => test for overrun */

   /* Write map data to Parameter Buffer.  Use castings on multi-purpose
       buffer */
   if (parm_type == BYTE_HEX)
       parse_p_buffer.bdata[parse_p_cnt++] = (ubyte)data;
   else if (parm_type == WORD_HEX)
       parse_p_buffer.wdata[parse_p_cnt++] = (uword)data;
   else /* (parm_type == LONG_HEX) */
       parse_p_buffer.ldata[parse_p_cnt++] = data;

   end_parameter_buffer(parm_type);
   return PARSER_VALID;
}

/*******************************************************************************
/
/   Routine:        param_compound_hex
/
/   Author:         RSA
/
/   Creation Date:  02/01/95
/
/   Description:    This Routine will extract ASCII data from the command line,
/                   and format it to compound hexidecimal intergers.
/
/                   Compound parameters (as defined by TIA/EIA 592) have
/                   the following form:
/                       AT+F=1,2,3,4F,5F,AB
/
/                   This parameter has the following format in the Parse
/                   Parameter Buffer:
/                       [f,p,f,p,...0] (f=field, p=parameter value, 0 is
/                                       end of parameters)
/                       Examples:
/                       AT+F=5,6,7F   => [0x1,0x5, 0x2,0x6, 0x3,0x7F, 0x00]
/                       AT+F=,6,,A8   => [0x2,0x6, 0x4,0xA8, 0x00]
/                       AT+F=0        => [0x1,0x0, 0x00]
/                       AT+F=         => [0x00]
/                       AT+F=30F,E650 => [0x001,0x030F, 0x002,0x0E650, 0x0000]
/
/   Input Parameters:   size -
/                       1 (BYTE_NUMERIC) = 0x00 - 0xFF
/                       2 (WORD_NUMERIC) = 0x00 - 0xFFFF
/                       3 (LONG_NUMERIC) = 0x00 - 0xFFFF.FFFF
/
/   Output Parameters:  error - 0 (PARSER_VALID) = numeric put in parameter
/                                                    buffer
/                               1 (PARSER_ERROR) = Invalid ASCII data
/
/   Global Variables Changed: None
/
/   Users:
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
ubyte param_compound_hex(ubyte size_type)
{
   ubyte num   = 0;
   ubyte index = 1;
   ubyte error = FALSE;

   /*
    *  Parameter structure for AT command's w/ compound byte values
    *   [f,p,f,p,...0] (f=field, p=parameter value, 0 is end of parameters)
    *
    *  Examples:
    *      AT+F=9,AA,7,8F => [0x1,0x5, 0x2,0xAA, 0x3,0x7, 0x4,0x8F, 0x00]
    *      AT+F=,BB,,8   => [0x2,0xBB, 0x4,0x8, 0x00]
    *      AT+F=0       => [0x1,0x0, 0x00]
    *      AT+F=        => [0x00]
    */
   while ((*parse_cmd_ptr != 0) && !error)
   {
       num = *parse_cmd_ptr;
       if (num == ',')
       {
           parse_cmd_ptr++;
           index++;
       }
       else if (((num >= '0') && (num <= '9')) ||
           ((num >= 'A') && (num <= 'F')))
       {
           /* Load index # into param buffer */
           if (size_type == BYTE_HEX)
               parse_p_buffer.bdata[parse_p_cnt++] = index;
           else if (size_type == WORD_HEX)
               parse_p_buffer.wdata[parse_p_cnt++] = index;
           else /* if (size_type == LONG_HEX) */
               parse_p_buffer.ldata[parse_p_cnt++] = index;

           /* Load hexidecimal parameter into param buffer */
           error = parameter_a_to_h(size_type);
       }
       else
       {
           /* a non "hex" character was encountered */
           break;
       }
   }

   /* Set End of Buffer */
   if (!error)
       end_parameter_buffer(size_type);

   return error;
}


/*******************************************************************************
/
/   Routine:        check_dtmf
/
/   Author:         RSA
/
/   Creation Date:  02/28/95
/
/   Description:    This Routine will determine if a character is valid for
/                   DTMF.
/
/   Input Parameters:   ch - character to test
/
/   Output Parameters:  0 = Invalild DTMF, otherwise valid DTMF.
/
/   Global Variables Changed: None
/
/   Users:
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
ubyte check_dtmf(ubyte ch)
{
   if (
		 (ch == '#') || (ch == '*') ||
		 (ch == '!') ||						/* ramn 6/28/96 */
       ((ch >= '0') && (ch <= '9')) ||
       ((ch >= 'A') && (ch <= 'D'))
		)
       return TRUE;
   else
       return FALSE;
}

/*******************************************************************************
/
/   Routine:        param_compound_dtmf
/
/   Author:         RSA
/
/   Creation Date:  02/28/95
/
/   Description:    This Routine will format the parameter buffer with
/                   a parameter from an AT command of type compound DTMF.
/
/                   Compound parameters (as defined by TIA IS 101) have
/                   the following form:
/                       AT+VTS=,D1,{},{D2,t2},[],[F1,F2,t3]
/
/                   This parameter has the following format in the Parse
/                    Parameter Buffer:
/                      Buffer field #       AT Parmater
/                     0 (DTMF_BUF_END)  -   END of Buffer
/                     1 (DTMF_EMPTY)    -   ,   empty field
/                     2 (DTMF_DIGIT)    -   D1  DTMF digit
/                     3 (EMPTY_BRACES)  -   {}  empty braces
/                     4 (DTMF_BRACES)   -   D2  DTMF digit
/                     5 (TIME_BRACES)   -   t2  DTMF time
/                     6 (EMPTY_BRACKET) -   []  empty brackets
/                     7 (FREQ1_BRACKET) -   F1  frequency1
/                     8 (FREQ2_BRACKET) -   F2  frequency2
/                     9 (TIME_BRACKET)  -   t3  freq. time
/                  0xFF (PREMATURE_END) -   Premature end of mulit parameter
/                                            field
/
/               Examples:
/               AT+F=5,,{2,4}  => [0x2,0x5, 0x1, 0x4,0x4, 0x5,0x04, 0x00]
/               AT+F=[f1,f2,t] => [0x7,0xf1, 0x8,0xf2, 0x9,t, 0x00]
/               AT+F=0         => [0x1,0x0, 0x00]
/               AT+F=          => [0x00]
/               AT+F=[F],{D}   => [0x7,F, 0xFF, 0x4,D, 0xFF,0x00]
/
/   Input Parameters:   size -
/                       1 (BYTE_NUMERIC) = 0x00 - 0xFF
/                       2 (WORD_NUMERIC) = 0x00 - 0xFFFF
/                       3 (LONG_NUMERIC) = 0x00 - 0xFFFF.FFFF
/
/   Output Parameters:  error - 0 (PARSER_VALID) = numeric put in parameter
/                                                    buffer
/                               1 (PARSER_ERROR) = Invalid ASCII data
/
/   Global Variables Changed: None
/
/   Users:
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
ubyte param_compound_dtmf(void)
{
/* start change keh 8/15/95 => unused var */
/*   uword freq; */
/* end change keh 8/15/95 => unused var */
   ulong temp;
   ubyte num;

   while (*parse_cmd_ptr != NULL)
   {
       /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        *
        *      Timed Dual Tone group
        *
        * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
       if (*parse_cmd_ptr == '[')
       {
           /* Get char following '{' */
           parse_cmd_ptr++;

           /* 6 pcs to parse:
               0x01 : F1
               0x02 : ','
               0x04 : F2
               0x08 : ','
               0x10 : T,
               0x20 = ']'
           */
           pcs_parsed = 0;
           /* while end of group has not been parsed */
           while (!(pcs_parsed & 0x20))
           {
               /* What is currently at the command line? */
               num = *parse_cmd_ptr;
               if (num == ']')
               {
                   parse_cmd_ptr++;    /* Done with ']' */

                   /* Set end of group (or not) */
                   switch (pcs_parsed)
                   {
                       case 0x00:   /* [] */
                       case 0x0A:   /* [,,] */
                           parse_p_buffer.wdata[parse_p_cnt++] = EMPTY_BRACES;
                           break;

                       case 0x01:   /* [F1] */
                       case 0x06:   /* [,F2] */
                       case 0x07:   /* [F1,F2] */
                       case 0x0B:   /* [F1,,] */
                       case 0x0E:   /* [,F2,] */
                       case 0x0F:   /* [F1,F2,] */
                           parse_p_buffer.wdata[parse_p_cnt++] = PREMATURE_END;
                           break;

                       case 0x02:   /* [,] */
                       case 0x03:   /* [F1,] */
                           return PARSER_ERROR;

#if 0  /* IMPOSSIBLE... */
                       case 0x04:   /* [??F2]      */
                       case 0x05:   /* [F1F2]      */
                       case 0x08:   /* [????,]     */
                       case 0x09:   /* [F1??,]     */
                       case 0x0C:   /* [???F2,]    */
                       case 0x0D:   /* [F1F2,]     */
                       case 0x10:   /* [????T]     */
                       case 0x11:   /* [F1???T]    */
                       case 0x12:   /* [????,T]    */
                       case 0x13:   /* [F1??,T]    */
                       case 0x14:   /* [???F2T]    */
                       case 0x15:   /* [F1F2T]     */
                       case 0x16:   /* [,F2T]      */
                       case 0x17:   /* [F1,F2T]    */
                       case 0x18:   /* [?????,T]   */
                       case 0x19:   /* [F1???,T]   */
                       case 0x1C:   /* [???F2,T]   */
                       case 0x1D:   /* [F1?F2,T]   */

                           return PARSER_ERROR;
                           break;
#endif

                       case 0x1A:   /* [,,T] */
                       case 0x1B:   /* [F1,,T] */
                       case 0x1E:   /* [,F2,T] */
                       case 0x1F:   /* [F1,F2,T] */
                           /* PROPER END */
                           break;
                   }
                   pcs_parsed |= 0x20;
               }
               else if (num == ',')
               {
                   /* Skip the ',' */
                   parse_cmd_ptr++;

                   /* If no commas, it must be the 1st */
                   if (!(pcs_parsed & 0x02))
                       pcs_parsed |= 0x02;
                   /* Else if 2nd comma */
                   else if (!(pcs_parsed & 0x08))
                       pcs_parsed |= 0x08;
                   /* Else 3 commas are an error */
                   else
                       return PARSER_ERROR;
               }
               /* Is it a numeric digit? */
               else if ((num >= '0') && (num <= '9'))
               {
                   /* If it's a number do ASCII->Integer conversion */
                   temp = 0;
                   while (*parse_cmd_ptr != NULL)
                   {
                       /* Only take digits */
                       if ((*parse_cmd_ptr >= '0') && (*parse_cmd_ptr <= '9'))
                       {
                           /* ASCII to decimal conversion */
                           temp = (temp * 10) + (ulong)(*parse_cmd_ptr++ - '0');
                           /* Test value for 16bit bounds */
                           if (temp > 0xFFFF)
                               return PARSER_ERROR;
                       }
                       else
                           break; /* break from while when non digit is found */
                   }

                   /* Move field ID into buffer */
                   /* If !F1 and !1st comma */
                   if ( (pcs_parsed & (0x1 | 0x2))==0 )
                   {
                       pcs_parsed |= 0x1;
                       parse_p_buffer.wdata[parse_p_cnt++] = FREQ1_BRACKET;
                   }
                    /* Else if !F2 and !2nd comma */
                   else if ( (pcs_parsed & (0x4 | 0x8))==0 )
                   {
                       pcs_parsed |= 0x4;
                       parse_p_buffer.wdata[parse_p_cnt++] = FREQ2_BRACKET;
                   }
                   /* Else if !T */
                   else if ((pcs_parsed & 0x10)==0)
                   {
                       pcs_parsed |= 0x10;
                       parse_p_buffer.wdata[parse_p_cnt++] = TIME_BRACKET;
                   }
                   else
                   {
                       return PARSER_ERROR;
                   }
                   /* Move parameter into buffer */
                   parse_p_buffer.wdata[parse_p_cnt++] = (uword)temp;
               }
               else
               {
                   return PARSER_ERROR;
               }
           } /* while */
       } /* if '[' */

       /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        *
        *      Timed DTMF digit
        *
        * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
       else if (*parse_cmd_ptr == '{')
       {
           /* Get char following '{' */
           parse_cmd_ptr++;

           /* 4 pcs to parse: 0x1 = 'D1', 0x2 = ',', 0x4 = t1, 0x8 = '}' */
           pcs_parsed = 0;

           while (!(pcs_parsed & 0x8))
           {
               /* What is currently at the command line? */
               num = *parse_cmd_ptr;

               if (num == '}')
               {
                   switch (pcs_parsed)
                   {
                       case 0x0:   /* {} */
                       case 0x2:   /* {,} */
                           parse_p_buffer.wdata[parse_p_cnt++] = EMPTY_BRACES;
                           break;

                       case 0x1:   /* {D} */
                       case 0x3:   /* {D,} */
                       case 0x4:   /* {t} == {D} */
                           parse_p_buffer.wdata[parse_p_cnt++] = PREMATURE_END;
                           break;

                       /* case 0x5:  {Dt} Can Never Occur */

                       case 0x6:  /* {,t} */
                       case 0x7:   /* {D,t} */
                           break;
                   }

                   pcs_parsed |= 0x8;
                   parse_cmd_ptr++;
               }
               else if (num == ',')
               {
                   /* 2 back-to-back commas? */
                   if (pcs_parsed & 0x2)
                       return PARSER_ERROR;

                   /* Skip the ',' */
                   parse_cmd_ptr++;

                   /* Parsed ',' */
                   pcs_parsed |= 0x2;

               }
               /* Is it a DTMF digit? */
               else if (((pcs_parsed & 0x3) == 0) && check_dtmf(num))
               {
                   parse_p_buffer.wdata[parse_p_cnt++] = DTMF_BRACES;
                   parse_p_buffer.wdata[parse_p_cnt++] = (uword)num;

                   parse_cmd_ptr++;    /* Next Command line entry */
                   pcs_parsed |= 0x1;  /* DTMF digit has been parsed */
               }
               /* Need a comma to get the time */
               else if (((pcs_parsed & 0x6) == 0x2) &&
                       ((num >= '0') && (num <= '9')))
               {
                   /* If it's a number, do the ascii to integer conversion */
                   temp = 0;
                   while (*parse_cmd_ptr != NULL)
                   {
                       /* Only take digits */
                       if ((*parse_cmd_ptr >= '0') && (*parse_cmd_ptr <= '9'))
                       {
                           /* ASCII to decimal conversion */
                           temp = (temp * 10) + (ulong)(*parse_cmd_ptr++ - '0');
                           /* Test value for 16bit bounds */
                           if (temp > 0xFFFF)
                               return PARSER_ERROR;
                       }
                       else
                           break; /* break from while when non digit is found */
                   }

                   /* Move field id and parameter into buffer */
                   parse_p_buffer.wdata[parse_p_cnt++] = TIME_BRACES;
                   parse_p_buffer.wdata[parse_p_cnt++] = (uword)temp;

                   pcs_parsed |= 0x4;  /* Time parameter has been parsed */
               }
               else
               {
                   return PARSER_ERROR;
               }
           } /* while */
       } /* if '{' */

       /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        *
        *   Single DTMF digit
        *
        * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
       else if (check_dtmf(*parse_cmd_ptr))
       {
           parse_p_buffer.wdata[parse_p_cnt++] = DTMF_DIGIT;
           parse_p_buffer.wdata[parse_p_cnt++] = *parse_cmd_ptr++;
           pcs_parsed = TRUE;
       }

       /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        *
        *      NULL entry, or inter group separator
        *
        * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
       else if (*parse_cmd_ptr == ',')
       {
           /* Inter-group separator */
           if (pcs_parsed)
               pcs_parsed = 0;

           /* Else NULL entry */
           else
               parse_p_buffer.wdata[parse_p_cnt++] = DTMF_EMPTY;

           /* Next char on command line */
           parse_cmd_ptr++;
       }

       /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        *
        *   Else not '[' nor '{' nor DTMF digit
        *
        * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
       else
       {
           return PARSER_ERROR;
       }
   } /* While not EOS */

   parse_p_buffer.wdata[parse_p_cnt] = 0;
   return PARSER_VALID;
}

