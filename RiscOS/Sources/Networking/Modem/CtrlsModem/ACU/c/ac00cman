/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00cman.c
/
/     Module Version:   ACU 5.01
/
/     Function:         This file contains action routines for the AT commands
/                       beginning with '&'.
/
/     Product:          ACU core code
/
/     History:          ac00cman.c v3.90
/                       ac00cman.c v3.91
/                       ac00cman.c v3.92
/                       ac00cman.c v3.94
/                       ac00cman.c v3.96
/                       ac00cman.c v4.03
/                       ac00cman.c v5.00
/
/        Created:       10/7/91
/                       10/17/91
/                       12/04/91
/                       3/10/92
/                       1/12/93
/                       10/5/95
/            01/24/97
/
/     ----------------------------------------------------------
/     -                   Modifications                        -
/     ----------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "ee_def.h"
#include "acu_pro.h"
#include "mt_pro.h"
#include "v25_pro.h"
#include "ll_pro.h"
#include "ptt.h"
#include "acu_vce.h"
#include "acu_epro.h"       /* ACU ETC Driver interface prototypes */

/* Local Prototypes */
void and_B(ubyte *);
void and_C(ubyte *);
void and_D(ubyte *);
void and_F(ubyte *);
void and_G(ubyte *);
void and_J(ubyte *);
void and_K(ubyte *);
void and_M(ubyte *);
void and_P(ubyte *);
void and_Q(ubyte *);
void and_R(ubyte *);
void and_S(ubyte *);
void and_U(ubyte *);
extern country_Make_Break_Time PTT_MakeBreak_Time[7];
extern ubyte CountryInfo;


/*******************************************************************************
/
/     Routine:       and_B
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This routine selects the V.32 carrier detection method.
/
/                    AT&B  0 - Hang up if bad EQM
/                          1 - Retrain if failure in S7 then hang up
/                          2 - Do not hangup, do not retrain
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, v32_retrain
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_B(ubyte *param_ptr)
{
   /* If this software is for a V.22bis modem this command is not allowed */
   /*  or the command is out of bounds */
   if (acu_cfg.mode == CFG_V22BIS || *param_ptr > 2)
   {
       error_occurred = TRUE;
   }
   else
   {
       /* Assign command input */
       v32_retrain = *param_ptr;
   }
}


/*******************************************************************************
/
/     Routine:       and_C
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This routine selects the data carrier detect option
/
/                    AT&C  0 - RLSD circuit is always on
/                          1 - RLSD circuit reflects the state of the carrier
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, sr21.RLSD_reflects_CD,
/               RLSD_reflects_CD_temp
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_C(ubyte *param_ptr)
{
   switch (*param_ptr)
   {
       case 0:
           if (on_line_command == FALSE)
           {
               sr21.RLSD_reflects_CD = FALSE;
               RLSD_reflects_CD_temp = FALSE;
           }
           else
           {
               RLSD_reflects_CD_temp = FALSE;
           }
           break;

       case 1:
           if (on_line_command == FALSE)
           {
               sr21.RLSD_reflects_CD = TRUE;
               RLSD_reflects_CD_temp = TRUE;
           }
           else
           {
               RLSD_reflects_CD_temp = TRUE;
           }
           break;

       default:
           error_occurred = TRUE;
           return;
   }
}


/*******************************************************************************
/
/     Routine:       and_D
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This routine determines how the modem is to respond to DTR.
/                    (This command is dependant upon the selected &Q command.)
/
/                    Coresponding Table:
/                            &D0    &D1   &D2   &D3
/                       &Q0   0      2     3     4
/
/                       &Q1   1      2     3     4
/
/                       &Q2   3      3     3     4
/
/                       &Q3   3      3     3     4
/
/                       &Q4   1      2     3     4
/
/                    Coresponding Events:
/                       0) DTR is ignored
/                       1) Go to hangup with OK result
/                       2) Go to on-line command (if on-line) and send OK
/                       3) Go to hangup with OK result, auto answer is disabled
/                          while DTR is off.
/                       4) Hard reset
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, sr21.DTR_control
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_D(ubyte *param_ptr)
{
   /* Verify bounds */
   switch(*param_ptr)
   {
       case 1:
           /* This command is not valid in voice mode */
           if (voice_cmd_set == TIA_IS_101)
           {
               error_occurred = TRUE;
               break;
           }

           /* Intentionally fall through */

       case 0:
       case 2:
       case 3:
           sr21.DTR_control = *param_ptr;
           break;

       default:
           error_occurred = TRUE;
           break;
   }

}


/*******************************************************************************
/
/     Routine:       and_F
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This routine is called to load the factory defaults.
/
/                    AT&F  0 - load standard factory defaults.
/                          5 -   standard and ETC Mobile factory defaults*
/                          6 - load standard and ETC PSTN factory defaults*
/
/                    *Enhanced Throughput Cellular (ETC) module is required.
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, andF
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_F(ubyte *param_ptr)
{
   /* Can't all change parameters during a call */
   if (on_line_command)
   {
       error_occurred = TRUE;
       return;
   }

    voice_caller_id = 0;        /* ramn 1/2/97 */

   /* Test bounds */
   switch (*param_ptr)
   {
       case 0:
           break;

       case 5:
       case 6:
           /* ETC (MNP-10) AT&F5,6 command */
           if (acu_ETC_installed())
               break;

           /* Intentionally fall through if not ETC */

       default:
           error_occurred = TRUE;
           return;
   }

   /* AT command variable */
   andF = *param_ptr;

   /* Load factory defaults */
   acu_load_defaults(COMMAND);

   /* Load ETC defaults last to overwrite standard data defaults */
   if (acu_ETC_installed())
      acu_ETC_and_F(*param_ptr);

    voice_caller_id = 0;        /* ramn 1/2/97 */

}


/*******************************************************************************
/
/     Routine:       and_G
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This routine selects the the guard tone that the modem
/                    is to send.
/
/                    AT&G  0 - Guard tone disabled
/                          1 - 550 Hz guard tone enabled
/                          3 - 1800 Hz guard tone enabled
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, sr23.guard_tone
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_G(ubyte *param_ptr)
{
   switch (*param_ptr)
   {
       case 0:
           sr23.guard_tone = GUARD_DISABLE;
           break;

       case 1:
           sr23.guard_tone = GUARD_550;
           break;

       case 2:
           sr23.guard_tone = GUARD_1800;
           break;

       default:
           error_occurred = TRUE;
           return;
   }
}

/* ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !*
/
/
/      NOTE: AT&I is reserved for ETC 
/
/
 * ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !*/


/*******************************************************************************
/
/     Routine:       and_J
/
/     Author :       RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This routine selects the auxiliary relay control
/
/                    AT&J  0 - Relay is never operated
/                          1 - The A lead is connected to the A1 lead while
/                              modem is off hook.
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, sr21.auxiliary_relay_ctrl
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_J(ubyte *param_ptr)
{
   /* Test bounds */
   if (*param_ptr == 0)
       sr21.auxiliary_relay_ctrl = 0;
   else if (*param_ptr == 1)
       sr21.auxiliary_relay_ctrl = 1;
   else
       error_occurred = TRUE;
}


/*******************************************************************************
/
/     Routine:       and_K
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This routine selects the 'Hayes' style flow control
/                    implementation.
/
/                    AT&K  0 - No flow control
/                          1 - Reserved
/                          2 - Reserved
/                          3 - Hardware FC (default)
/                          4 - software FC
/                          5 - transparent software FC
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, slQ, reconfigure
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_K(ubyte *param_ptr)
{
   switch (*param_ptr)
   {
       /* DISABLE Flow control */
       case 0:
           andK = 0;
           slQ = 0;
           break;

       /* Enable Hardware flow control (RTS/CTS) */
       case 3:
           andK = 3;
           slQ = 3;
           break;

       /* Enable Software flow control (XON/XOFF) */
       case 4:
           andK = 4;
           slQ = 1;
           break;

       /* Transparent flow control */
       case 5:
           /* Force ERROR if transparent flow control is selected.
               Most of the I/O code does not support transparent
               flow control. */
           /* slQ = 9;*/
           /* break;*/

           /* Intentionally fall through */

       default:
           error_occurred = TRUE;
           return;
   }

   /* Alternate flow control for FAX modems */
   if (*param_ptr == 2 || *param_ptr == 3)
       alt_fax_flow_control = CTS_RTS;
   else
       alt_fax_flow_control = XON_XOFF;

   reconfigure = TRUE;
}


/*******************************************************************************
/
/     Routine:       and_M
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This routine selects the communication mode.  This command
/                    is obsolete, but is still usable (see &Q command).
/                  
/                    AT&M  0 - Asynchronous in idle and on-line
/                          1 - Asynchronous in idle state, Synchronous in
/                              on-line state
/                          2 - Synchronous only: dials first stored
/                              number when DTR=1, hangs up when DTR=0.
/                          3 - Synchronous only: manual dial, Talk/data to
/                              go on-line
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, sr27.comm_mode
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_M(ubyte *param_ptr)
{
/* ciy 5/2/96 10:23AM, take out, to compatable with TIES */
#if 0
   /* Can't select comm mode when online */
   if (on_line_command == TRUE)
   {
       error_occurred = TRUE;
       return;
   }
#endif

   /* Check bounds */
   switch (*param_ptr)
   {
       case 0:
           sr27.comm_mode = ASYNC;
           break;

/* 4/03/96 shujin, we only suport async mode */
#if 0
       case 1:
           sr27.comm_mode = SYNC_NORMAL;
           break;

       case 2:
           sr27.comm_mode = SYNC_DTR;
           break;

       case 3:
           sr27.comm_mode = SYNC_TALK;
           break;
#endif

       default:
           error_occurred = TRUE;
           return;
   }

   /* Disable autosync */
   sr27.autosync = 0;
}


/*******************************************************************************
/
/     Routine:       and_P
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This routine selects the dial pulse ratio.
/
/                    AT&C  0 - Make = 39%, Break = 61%
/                          1 - Make = 33%, Break = 67%
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, make_time, break_time
/               sr22.uk_hook
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_P(ubyte *param_ptr)
{
   switch(*param_ptr)
   {
       case 0:
/*SLei added*/
           make_time  = PTT_MakeBreak_Time[CountryInfo].P0_make_time;
           break_time = PTT_MakeBreak_Time[CountryInfo].P0_break_time;
           sr22.uk_hook = FALSE;
           break;

       case 1:
           make_time  = PTT_MakeBreak_Time[CountryInfo].P1_make_time;
           break_time = PTT_MakeBreak_Time[CountryInfo].P1_break_time;
           sr22.uk_hook = TRUE;
           break;

/*SLei added*/
      case 2:
    if (CountryInfo == Japan) {
        make_time  = PTT_MakeBreak_Time[CountryInfo].P0_make_time;
        make_time /= 2;
       break_time = PTT_MakeBreak_Time[CountryInfo].P0_break_time;
    break_time /= 2;
    }
    else {
            error_occurred = TRUE;
         return ;
         }
         break;
      case 3:
       if (CountryInfo == Japan) {
       make_time  = PTT_MakeBreak_Time[CountryInfo].P1_make_time;
       make_time /= 2;
          break_time = PTT_MakeBreak_Time[CountryInfo].P1_break_time;
       break_time /= 2;
       }
       else {
              error_occurred = TRUE;
        return ;
        }
        break;
      default:
    error_occurred = TRUE;
           return;
   }
}

/*******************************************************************************
/
/     Routine:       and_Q
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This routine selects the communication mode.
/
/                    AT&Q  0 - Normal in idle state, Asynchronous in on-line
/                          1 - Normal in idle state, Synchronous in on-line
/                          2 - Synchronous only: Dial with DTR=1, Hang up 
/                              when DTR=0
/                          3 - Synchronous only: manual dial, Talk/data to
/                              go on-line
/                          4 - Hayes AutoSync (Optional for RSA modems).
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, sr27.comm_mode
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_Q(ubyte *param_ptr)
{
/* ciy 5/2/96 10:23AM, take out, to compatable with TIES */
   /* Can't select comm mode when online */
/*   if (on_line_command == TRUE)
 
*  {
*      error_occurred = TRUE;
*       return;
*   }
*------------------------------------------------------*/

   /* Reset current &Q setting */
   sr27.comm_mode = sr27.autosync = 0;

   switch (*param_ptr)
   {
       case 0:
           sr27.comm_mode = ASYNC;
           break;

/* 4/03/96 shujin, we only suport async mode */
#if 0
       case 1:
           sr27.comm_mode = SYNC_NORMAL;
           break;

       case 2:
           sr27.comm_mode = SYNC_DTR;
           break;
        
       case 3:
           sr27.comm_mode = SYNC_TALK;
           break;

       case 4:
/* #if 0 */
           /* Really need to add some type of #define for AUTOSYNC */
           sr27.autosync = 1;
           break;
#endif

       default:
           error_occurred = TRUE;
           return;
   }
}


/*******************************************************************************
/
/     Routine:       and_R
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This routine selects relationship of CTS to RTS.
/
/                    AT&R  0 - CTS tracks RTS while on-line and &Q1-&Q3
/                          1 - RTS is ignored. CTS on while modem is on-line
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, sr21.CTS_on
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_R(ubyte *param_ptr)
{
   switch (*param_ptr)
   {
       case 0:
           sr21.CTS_on = FALSE;
           break;

       case 1:
           sr21.CTS_on = TRUE;
           break;

       default:
           error_occurred = TRUE;
           return;
   }
}


/*******************************************************************************
/
/     Routine:       and_S
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This routine selects the use of DSR
/
/                    AT&S  0 - DSR always on
/                          1 - DSR on at start of handshake and off in test
/                              and idle state. DSR off when carrier is lost.
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, sr21.DSR_only_at_handshaking
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_S(ubyte *param_ptr)
{
   switch (*param_ptr)
   {
      case 0:
         sr21.DSR_only_at_handshaking = FALSE;
         break;

      case 1:
         sr21.DSR_only_at_handshaking = TRUE;
         break;
      
      default:
         error_occurred = TRUE;
         return;
   }
}


/*******************************************************************************
/
/     Routine:       and_U
/
/     Author:        RSA
/
/     Creation Date: 10/17/91
/
/     Description:   This routine will enable/disable V.32 trellis coding
/
/                    AT&U  1 - Disable
/                          0 - Enable
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: None
/
/     Global Variables Changed: error_occurred, andU
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_U(ubyte *param_ptr)
{
    if ((*param_ptr == 0) || (*param_ptr == 1))  /* MH 021197 */
        trellis = *param_ptr;
    else
        error_occurred = TRUE;
}
