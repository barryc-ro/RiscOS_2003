/****************************************************************************
/
/   Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/   All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.  The information contained herein is solely
/   for the use of RSA.
/
/   File:           ac00idvv.c 
/
/   Module Version: ACU 4.??
/
/   Function:       This file contains the action routines for VOICE VIEW
/                   processing in the basic ACU states.
/
/   Product:        ACU core code
/
/   History:        ac00vv2.c
/
/       Created:    8/21/95
/
/       ---------------------------------------------------------
/       -                   Modifications                       -
/       ---------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:
/       Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "acu_vcv.h"
#include "mt_pro.h"

/* Local Prototypes */
void proc_idle_vv(void);
void idle_vv_bg(void);
void idle_vv_offline_bg(void);
void idle_vv_voice_bg(void);
void idle_vv_autoattend_bg(void);
void idle_vv_hangup(void);
void idle_vv_chk_char(void);
void idle_vv_conn(void);
void idle_vv_orig(void);
void idle_vv_answ(void);
void idle_vv_msg(void);
ubyte vv_check_intactivity(void);
void vv_reset_intactivity(void);
void idle_vv_test(void);


/*    State tables for PSTN VoiceView IDLE states    */

const struct stateTab_struct st_idle_vv_off[EVT_MAX+1] =
{
/* MSG        */   {S_IDLE,    idle_at_msg},
/* CHAR_RCVD  */   {S_IDLE,    idle_chk_char},
/* ORIG       */   {S_ORIG,    idle_vv_orig},
/* ANSW       */   {S_ANSW,    idle_vv_answ},
/* CONNECT    */   {S_IDLE,    ignore},
/* IDLE       */   {S_IDLE,    idle_to_idle},
/* RESET      */   {S_IDLE,    hard_reset},
/* SYS_STAT   */   {S_IDLE,    ignore},
/* RING       */   {S_IDLE,    idle_at_ring},
/* DP_CD_OFF  */   {S_IDLE,    ignore},
/* HANGUP     */   {S_HANGUP,  idle_vv_hangup}, 
/* RETRAIN    */   {S_IDLE,    ignore},
/* TEST       */   {S_IDLE,    idle_vv_test},
/* PARSE      */   {S_PARSE,   idle_to_parse},
/* V24        */   {S_IDLE,    idle_at_v24},
/* FP         */   {S_IDLE,    ignore},
/* ESC_RXD    */   {S_IDLE,    ignore},
};


const struct stateTab_struct st_idle_vv_on[EVT_MAX+1] =
{
/* MSG        */   {S_IDLE,    idle_at_msg},
/* CHAR_RCVD  */   {S_IDLE,    idle_vv_chk_char},
/* ORIG       */   {S_IDLE,    ignore},
/* ANSW       */   {S_IDLE,    ignore},
/* CONNECT    */   {S_ONLINE,  idle_vv_conn},
/* IDLE       */   {S_IDLE,    idle_to_idle},
/* RESET      */   {S_IDLE,    hard_reset},
/* SYS_STAT   */   {S_IDLE,    ignore},
/* RING       */   {S_IDLE,    ignore},
/* DP_CD_OFF  */   {S_IDLE,    ignore},
/* HANGUP     */   {S_HANGUP,  idle_vv_hangup},
/* RETRAIN    */   {S_IDLE,    ignore},
/* TEST       */   {S_IDLE,    ignore},
/* PARSE      */   {S_PARSE,   idle_to_parse},
/* V24        */   {S_IDLE,    idle_on_v24},
/* FP         */   {S_IDLE,    ignore},
/* ESC_RXD    */   {S_IDLE,    ignore},
};



/*******************************************************************************
/
/   Routine:        proc_idle_vv
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will process events by determining the
/                   next state and the action to be performed for
/                   the IDLE state of type VOICE_VIEW.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: acu_state, acu_proc
/
/   Users: proc_idle
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
#if 0
void proc_idle_vv(void)
{
   /* Process different substates of IDLE */
   switch (st_idle.state)
   {
       case VV_IDLE_OFFLINE:
           acu_state = st_idle_vv_off[acu_event->type].new_state;
           acu_proc = st_idle_vv_off[acu_event->type].fnc_ptr;
           break;

       case VV_IDLE_VOICE_MODE:
       case VV_IDLE_AUTO_ATTENDANT:
           acu_state = st_idle_vv_on[acu_event->type].new_state;
           acu_proc = st_idle_vv_on[acu_event->type].fnc_ptr;
           break;
   }
}
#endif

/*******************************************************************************
/
/   Routine:        idle_vv_bg
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will process the background functions for
/                   the IDLE state of type VOICE_VIEW.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: None
/
/   Users: idle_bg
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void idle_vv_bg(void)
{
   /* Run different substates of VoiceView IDLE background */
   switch (st_idle.state)
   {
       case VV_IDLE_OFFLINE:
           /* Modem is in VoiceView mode (+fclass=80) while on hook */
           idle_vv_offline_bg();
           break;

       case VV_IDLE_VOICE_MODE:
           /* Modem is in VoiceView mode (+fclass=80) while off hook */
           idle_vv_voice_bg();
           break;

       case VV_IDLE_AUTO_ATTENDANT:
           /* Modem is in VoiceView Autoattendant mode (+fclass=80)
               while off hook */
           idle_vv_autoattend_bg();
           break;
   }
}


/*******************************************************************************
/
/   Routine:        idle_vv_offline_bg
/
/   Author:         RSA
/
/   Creation Date:  09/27/95
/
/   Description:    This Routine will handle the VoiceView Idle Mode
/                   background processing.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: st_idle
/
/   Users: idle_vv_bg
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void idle_vv_offline_bg(void)
{
   /* Use PSTN data offline bg */
   idle_offline_bg();

   /* Detect Ring if ON HOOK */
   if (acu_get_handset_status() != HANDSET_OFF_HOOK)
   {
       switch (modem_call_progress())
       {
           case RINGON:
               /* Ring is posted in the voice driver under voice mode */
               build_event(E_RING,RINGON);
               break;

           case RINGOFF:
               build_event(E_RING,RINGOFF);
               break;
                   
           default:
               break;
       }
   }
   else
   {
       st_idle.state = VV_IDLE_VOICE_MODE;
   }
}


/*******************************************************************************
/
/   Routine:        idle_vv_voice_bg
/
/   Author:         RSA
/
/   Creation Date:  09/27/95
/
/   Description:    This Routine handles the VoiceView Voice Mode
/                   background processing.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: None
/
/   Users: idle_vv_bg
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void idle_vv_voice_bg(void)
{
   if (acu_get_handset_status() == HANDSET_ON_HOOK) 
       build_event(E_HANGUP,NONE);          /* SD - 2/5/96 */

   /* Run VoiceView module */
   process_vcv_bg();
}


/*******************************************************************************
/
/   Routine:        idle_vv_autoattend
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine handles the VoiceView Auto Attendant
/                   background processing.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: None
/
/   Users: idle_vv_bg
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void idle_vv_autoattend_bg(void)
{
   /* VV 1.11 Sec. 5.4.10:
       1) Monitor S30 for time-out and report ERROR
   */
   if (vv_check_intactivity())
   {
       build_event(E_HANGUP,ERROR);
   }

   idle_vv_voice_bg();
}



/*******************************************************************************
/
/   Routine:        idle_vv_hangup
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will process the HANGUP events for
/                   the IDLE state of type VOICE_VIEW.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: st_hangup,hangup_result_type,st_idle
/
/   Users: st_idle_vv_on
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void idle_vv_hangup(void)
{
   /* Set hangup states */ 
   state_type[S_HANGUP] = VOICE_VIEW;
   st_hangup.state = HANGUP_PHYSICAL_LINK;
   hangup_result_type = acu_event->parm;

   if (at_z_command)
       state_type[S_IDLE] = AT_OFFLINE;
   st_idle.state = VV_IDLE_OFFLINE;
}


/*******************************************************************************
/
/   Routine:        idle_vv_chk_char
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will process the CHAR_RX events for
/                   the IDLE state of type VOICE_VIEW.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: None
/
/   Users: st_idle_vv_off,st_idle_vv_on
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void idle_vv_chk_char(void)
{
   build_event(E_PARSE,UNUSED);
}


/*******************************************************************************
/
/   Routine:        idle_vv_conn
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will process the CONNECT events for
/                   the IDLE state of type VOICE_VIEW.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: st_online
/
/   Users: st_idle_vv_off,st_idle_vv_on
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void idle_vv_conn(void)
{
   modem_dte_rlsd(ON);
   /*modem_cd_led(ON);*/ /* ramn 9/20/96 */

   state_type[S_ONLINE] = VOICE_VIEW;
   st_online.state = acu_event->parm;
}


/*******************************************************************************
/
/   Routine:        idle_vv_orig
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will service the ORIG events in
/                   the IDLE state of type VOICE_VIEW.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: st_orig
/
/   Users: st_idle_vv_off
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void idle_vv_orig(void)
{
   /* Use standard PSTN routine... */
   idle_at_orig();

   /* ...But set Wireless type */
   state_type[S_ORIG] = VOICE_VIEW;
}

/*******************************************************************************
/
/   Routine:        idle_vv_answ
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will service the ANSW events in
/                   the IDLE state of type VOICE_VIEW.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: st_answ, send_ok, last_async_sync
/
/   Users: st_idle_vv_off
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void idle_vv_answ(void)
{
   /* Config ACU for VV answer */
   state_type[S_ANSW] = VOICE_VIEW;
   st_answ.state = INIT_ACU_ANSW;
   send_ok = FALSE;

   /* Per VV 1.11, Sec. 5.5.2: ATA is ERROR if already off hook */
   if (!hook || (acu_get_handset_status() == HANDSET_OFF_HOOK))
   {
       build_event(E_MSG,ERROR);
       st_idle.state = VV_IDLE_VOICE_MODE;
   }
   /* Else setup variables needed for an AT PSTN connection */
   else
   {
       /* Use PSTN data routine */
       init_at_connection();
       modem_dte_cts(ON);

       /* Freeze DTE speed until IDLE state is entered, and set the DTE speed
           to the value found during autobaud    */
       autobaud_off();
       acu_set_tx_baud(dte_baud);
       last_async_sync = ASYNC;
   }
}


/*******************************************************************************
/
/   Routine:        vv_check_intactivity
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will verify that the inactivity timer for
/                   VoiceView auto answer mode has expired.
/
/   Input Parameters:   None
/
/   Output Parameters:  0 (FALSE)        - no time-out
/                       otherwise (TRUE) - time-out occured
/
/   Global Variables Changed: None
/
/   Users: answ_vv_auto_attendant
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
ubyte vv_check_intactivity(void)
{
   /* If we auto answered, */
   if (s[0] && s[1] == s[0])
       /* And the S30 time has expired, then we're inactive */
       if (!timer2)
           return TRUE;

   /* Active */
   return FALSE;
}

/*******************************************************************************
/
/   Routine:        vv_reset_intactivity
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine is called to reset the VoiceView inactivity
/                   timer after any active event.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: timer2
/
/   Users: answ_vv_auto_attendant, answ_wait_for_vv_atone
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void vv_reset_intactivity(void)
{
   timer2 = s[30] * 100;
}



/*******************************************************************************
/
/   Routine:        idle_vv_test
/
/   Author:         RSA
/
/   Creation Date:  01/23/96
/
/   Description:    This Routine is called to start a Hayes data mode
/                   test during voice view parsing.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: 
/
/   Users: voice view idle state tables
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void idle_vv_test(void)
{
   build_event(E_MSG,ERROR);
}

