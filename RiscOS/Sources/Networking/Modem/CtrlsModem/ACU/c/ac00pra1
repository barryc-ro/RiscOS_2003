/****************************************************************************
/
/	Copyright 1988,1989,1990,1991,1992,1993,1994. All Rights Reserved by:
/	    RSA
/	    7701 Six Forks Road
/	    Suite 120
/	    Raleigh, NC  27615
/	    (919) 846-7171
/
/
/	This document contains material confidential to RSA its contents must
/	not be revealed, used or disclosed to anyone or company with out
/	written permission by RSA.  The information contained herein is solely
/	for the use of RSA.
/
/	File:		ac00pra1.c
/
/	Module Version: ACU 4.02
/
/	Function:	This file contains the action routine for the PARSE
/			state of type AT_OFFLINE and AT_ONLINE.
/
/	Product:	ACU core code
/
/	History:	ac00pra1.c v3.90
/			ac00pra1.c v3.91
/			ac00pra1.c v3.93
/			ac00pra1.c v3.94
/			ac00pra1.c v3.96
/
/		Created: 10/2/91
/			11/18/91
/			1/21/92
/			3/10/92
/                       1/12/93
/
/		---------------------------------------------------------
/		-			Modifications			-
/		---------------------------------------------------------
/
/		Author & Date:	RSA
/		Description:
/		Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "mt_pro.h"
/* start TIA change 04/06/94 */
#include "acu_vce.h"
/* end TIA change 04/06/94 */
/* start change keh 12/94 => new parser */
#include "par_def.h"
#include "par_pro.h"
/* end change keh 12/94 => new parser */

void proc_parse_offline(void);
void proc_parse_online(void);
void proc_parse_test(void);
void parse_at_bg(void);
void cont_cmd_seq(void);
void build_cmd_line(void);
void execute_cmd(void);
void end_cmd_exec(void);
void at_plus(void);
void find_parity(ubyte);
void get_rx_baud_rate(void);
/* start change 1/18/94 keh => no stalled loops for OS support */
void parse_to_online_wait(void);
void parse_return_online(void);
/* end change 1/18/94 keh => no stalled loops for OS support */
/* start change keh 1/20/95 => allow AT&T1 to return to the test */
void parse_online_test(void);
/* end change keh 1/20/95 => allow AT&T1 to return to the test */

/*mrm31396*/
extern void dte_check_parity_bit(void);

/*mrm82296*/
extern ubyte delay_auto_baud_enable;

/*******************************************************************************
/
/	Routine: proc_parse_offline
/
/	Author : RSA
/
/	Creation Date: 07/17/91
/
/	Description : This Routine will process the event by determining the
/		      next state and the action to be performed for the PARSE
/		      state of type AT_OFFLINE.
/
/	Input Parameters: None
/
/	Output Parameters: none
/
/	Global Variables Changed:  acu_state, acu_proc
/
/	Users: proc_parse
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void proc_parse_offline(void)
{
   acu_state = st_parse_at[acu_event->type].new_state;
   acu_proc = st_parse_at[acu_event->type].fnc_ptr;
}


/*******************************************************************************
/
/	Routine: proc_parse_online
/
/	Author : RSA
/
/	Creation Date: 07/17/91
/
/	Description : This Routine will process the event by determining the
/		      next state and the action to be performed for the PARSE
/		      state of type AT_ONLINE.
/
/	Input Parameters: None
/
/	Output Parameters: none
/
/	Global Variables Changed:  acu_state, acu_proc
/
/	Users: proc_parse
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void proc_parse_online(void)
{
	acu_state = st_parse_online[acu_event->type].new_state;
	acu_proc = st_parse_online[acu_event->type].fnc_ptr;
}


/*******************************************************************************
/
/	Routine: proc_parse_test
/
/	Author : RSA
/
/	Creation Date: 07/17/91
/
/	Description : This Routine will process the event by determining the
/		      next state and the action to be performed for the PARSE
/		      state of type TEST.
/
/	Input Parameters: None
/
/	Output Parameters: none
/
/	Global Variables Changed:  acu_state, acu_proc
/
/	Users: proc_parse
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void proc_parse_test(void)
{
	acu_state = st_parse_test[acu_event->type].new_state;
	acu_proc = st_parse_test[acu_event->type].fnc_ptr;
}


/*******************************************************************************
/
/	Routine: parse_at_bg
/
/	Author : RSA
/
/	Creation Date: 06/17/91
/
/	Description : This Routine will process the background functions for
/		      the PARSE state of type AT_OFFLINE and AT_ONLINE.
/
/	Input Parameters: None
/
/	Output Parameters: none
/
/	Global Variables Changed:  s[1]
/
/	Users: proc_parse
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void parse_at_bg(void)
{
   /* Check to see if time between rings has expired	*/
   if (timer2 == 0)
       s[1] = 0;

/* start change keh 4/18/95 => add 2nd command line for TEMIC */
   /* If an external command line has been established, move
       directlty to the Command Parse state */
   if (acu_external_cmd_ptr)
       st_parse.state = INIT_PARSER;
/* end change keh 4/18/95 => add 2nd command line for TEMIC */

   switch (st_parse.state)
   {
/* start change keh 12/94 => new parser */
#if 0  /* original code: */
*        case CMD1:
*            /* In this state the ACU is waiting for a 'T', 't',
*                or '/' to continue the command process.	*/
*            cont_cmd_seq();
*            break;
*
*        case CMD2:
*            /*	In this state the ACU receives characters from
*                the DTE and places them in to the command line
*                buffer.	*/
*            build_cmd_line();
*            break;
*
*        case CMD3:
*            /*	In this state the ACU parses the command line
*                buffer and executes the entered commands. */
*            execute_cmd();
*            break;
*
*        case CMD4:
*            /* In this state the ACU will exit the parse state
*                due to either encountering an error or end of
*                command line */
*            end_cmd_exec();
*            break;
#endif

       case WAIT_FOR_AT:
           /* In this state the ACU is waiting for a 'T', 't',
               or '/' to continue the command process.	*/
           cont_cmd_seq();
           break;

       case BUILD_CMD_LINE:
           /*	In this state the ACU receives characters from
               the DTE and places them in to the command line
               buffer.	*/
           build_cmd_line();
           break;

       case INIT_PARSER:
           /*	In this state the ACU initializes the command parser to
               parse from it's command line.  This must be done once
               for every command line to parse. */
/* start change keh 4/18/95 => add 2nd command line for TEMIC */
/*               at_parser_reset(cmd_ptr); */

           /* If an external command line has been established,
               parse that one */
           if (acu_external_cmd_ptr)
           {
               /* Set the AT command Parser to the 2nd command line */
               at_parser_reset(acu_external_cmd_ptr);
               acu_external_cmd_ptr = NULL;
           }
           /* Else Parse the standard ACU command line (from the V.24 port) */
           else
           {
               /* Set the AT command Parser to the standard command line */
               at_parser_reset(cmd_ptr);
           }
/* end change keh 4/18/95 => add 2nd command line for TEMIC */

           /* Next state */
           st_parse.state = PARSE_COMMANDS;

           /* Intentionally fall through */

       case PARSE_COMMANDS:
           /*	In this state the ACU parses the command line
               buffer and executes the entered commands. */
           execute_cmd();
           break;

       case END_PARSING:
           /* In this state the ACU will exit the parse state
               due to either encountering an error or end of
               command line */
           end_cmd_exec();
           break;

/* start change 1/18/94 keh => no stalled loops for OS support */
       case PARSE_CMD_DELAY:
           /* In this state the ACU will wait in the parse state for
               the specified delay time (ATD,) */
           if (!timer1)
               st_parse.state = PARSE_COMMANDS;
           break;

       case PARSE_TO_ONLINE_RETRAIN:
           /* In this state the ACU will wait in the parse state for
               the modem to return online with a retrain (ATO1) */
           parse_to_online_wait();
           break;
/* end change 1/18/94 keh => no stalled loops for OS support */
/* end change keh 12/94 => new parser */
    }
}


/*******************************************************************************
/
/	Routine: cont_cmd_seq
/
/	Author : RSA
/
/	Creation Date: 06/17/91
/
/	Description : This Routine is waiting to receive a 't' or 'T' from
/		      the terminal.
/
/	Input Parameters: None
/
/	Output Parameters: none
/
/	Global Variables Changed:  timer1, cmd_ptr, st_parse.state, idle_char
/
/	Users: parse_at_bg
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date: RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void cont_cmd_seq(void)
{
    ubyte ch,match_found;

    match_found = TRUE;
    if (acu_from_num())
    {
        ch = acu_from_char();
        switch (ch & CHAR_MASK)
        {
            case 'T':
                if ((idle_char & CHAR_MASK) == 'A')
                {
                    find_parity(ch);
/*mrm31396*/
/*check parity in parallel mode*/
						  dte_check_parity_bit();

                    cmd_ptr = (ubyte *)&cmd_line[0];
/* start change keh 12/94 => new parser */
/*                    st_parse.state = CMD2; */
                    st_parse.state = BUILD_CMD_LINE;
/* end change keh 12/94 => new parser */
                }
                else
					 {	
                    match_found = FALSE;
					 }	
                break;

            case 't':
                if ((idle_char & CHAR_MASK) == 'a')
                {
                    find_parity(ch);

/*mrm31396*/
/*check parity in parallel mode*/
						  dte_check_parity_bit();

                    cmd_ptr = (ubyte *)&cmd_line[0];
/* start change keh 12/94 => new parser */
/*                    st_parse.state = CMD2; */
                    st_parse.state = BUILD_CMD_LINE;
/* end change keh 12/94 => new parser */
                }
                else
					 {	
                    match_found = FALSE;
					 }	
                break;

            case '/':
                if (((idle_char & CHAR_MASK) == 'A') ||
                    ((idle_char & CHAR_MASK) == 'a'))
                {
                    timer1 = 0;
                    cmd_ptr = (ubyte *)&cmd_line[0];
                    send_ok = TRUE;
                    error_occurred = FALSE;
/* start change keh 12/94 => new parser */
/*                    st_parse.state = CMD3; *//* execute the command */
                    st_parse.state = INIT_PARSER;
/* end change keh 12/94 => new parser */
                }
                else
					 {
                    match_found = FALSE;
					 }

                break;

            case 'A':
            case 'a':
                idle_char = ch;
                break;

            default:
                match_found = FALSE;
                break;
        }

        if (acu_cfg.hw_echo == FALSE)
            if (sr14.echo_cmd_flag && !dont_echo)
                acu_to_char(ch);
    }

    if (match_found == FALSE)
    {
        /* If autobaud is disabled then do not turn it back on */
        if (!dont_autobaud)
        {
/*mrm82296*/
				delay_auto_baud_enable = TRUE;
			   autobaud_on();
		  }

        build_event(E_IDLE,UNUSED);
    }

    /* Determine the baud rate calculated by autobaud	*/
    get_rx_baud_rate();

    if ((dte_baud >= BPS2400 && dte_baud <= BPS57600) ||
        dte_baud == BPS115200)
        modem_hs_led(dte_baud);
    else
        modem_hs_led(OFF);
}


/*******************************************************************************
/
/	Routine: build_cmd_line
/
/	Author : RSA
/
/	Creation Date: 05/07/91
/
/	Description : This Routine is called during the CMD2 state. Characters
/		      are retrieved from the terminal and placed into the
/		      command line bufer until a <CR>is receive.
/
/	Input Parameters: none
/
/	Output Parameters: none
/
/	Global Variables Changed:  st_parse.state, cmd_ptr, cmd_line, timer1
/
/	Users:	parse_at_bg
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date: RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void build_cmd_line(void)
{
    ubyte ch;

    if (acu_from_num())
    {
        /* Get character from terminal	*/
        ch = acu_from_char();

        if (acu_cfg.hw_echo == FALSE)
            if (sr14.echo_cmd_flag && !dont_echo)
                acu_to_char(ch);

        /* Mask off parity bit	*/
        ch &= CHAR_MASK;

        /* Look for backspace character	*/
        if ((ch == s[5]) && (ch != s[3]))
        {
            if (sr14.echo_cmd_flag)
            {
                /*modem_serial_echo(OFF);*/ /* ramn 9/20/96 */
                set_parms(acu_data_bits,acu_parity,acu_stop_bits);

                if (cmd_ptr == (ubyte *)&cmd_line[0])
                {
                    acu_to_char('T');
                }
                else
                {
                    cmd_ptr--;
                    acu_to_char(' ');
                    acu_to_char(s[5]);
                }
                while (acu_to_num() > 0)
                    ;
                while (!check_all_sent())
					;

                /* Reset UART back to 8 none so the characters
                    are sent back exactly as they are received   */
                acu_reset_port();
                /*modem_serial_echo(ON);*/ /* ramn 9/20/96 */
            }
            else
            {
                if (cmd_ptr > (ubyte *)&cmd_line[0])
                    cmd_ptr--;
            }
        }
        else if (ch == CTRL_X)
        {
            build_event(E_IDLE,UNUSED);
            build_event(E_MSG,OK);
        }
        else if (ch == s[3])	     /* carriage return */
        {
			*cmd_ptr = '\0';
			cmd_ptr = (ubyte *)&cmd_line[0];


            /* Setup delay before executing command */
            timer1 = delay_to_exec;
/* start change keh 12/94 => new parser */
/*          st_parse.state = CMD3; */
            st_parse.state = INIT_PARSER;
/* end change keh 12/94 => new parser */
            send_ok = TRUE;
            error_occurred = FALSE;
        }
        /* If character entered is not valid then need to toss it so it
            will not terminate the command line */
        else if ((ch >= 32) && (ch <= 126))
        {
            *cmd_ptr++ = ch;
            *cmd_ptr = '\0';
            if (str_len((ubyte *)&cmd_line[0]) > MAX_CMD_LINE)
            {
                build_event(E_IDLE,UNUSED);
                build_event(E_MSG,ERROR);
            }
        }
    }
}


/*******************************************************************************
/
/	Routine: execute_cmd
/
/	Author : RSA
/
/	Creation Date: 06/17/91
/
/	Description : This Routine will parse and execute the commands
/		      received from the terminal.
/
/	Input Parameters: None
/
/	Output Parameters: none
/
/	Global Variables Changed:  error_occurred
/
/	Users: parse_at_bg
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date: RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void execute_cmd(void)
{
/* start change keh 12/94 => new parser */
#if 0 /* origial routine */
*    ubyte end_execution;
*
*    /* Wait for delay to execute to expire	*/
*    if (timer1 != 0 )
*    {
*        /* Need to clear out the receive buffer until the delay to
*            execute has expired	*/
*        if (acu_from_num())
*            acu_from_clear();
*        return;
*    }
*
*    end_execution = FALSE;
*    switch (get_next_char())
*    {
*/* start TIA change 04/06/94 */
*        case 'A':
*            if ((fax_class == 8) && (voice_cmd_set == TIA_IS_101))
*            {
*                error_occurred = TRUE;
*                break;
*            }
*/* end TIA change 04/06/94 */
*            else if (fax_connected ||
*                (((sr27.comm_mode == ASYNC) || (sr27.comm_mode == SYNC_NORMAL))
*                && (!test_in_progress) && !on_line_command))
*            {
*                build_event(E_ANSW,UNUSED);
*            }
*            else
*                error_occurred = TRUE;
*            break;
*
*		case 'B': at_B();
*			  break;
*
*		case 'C': at_C();
*			  break;
*
*		case 'D': if (fax_connected ||
*                              (((sr27.comm_mode == ASYNC) || (sr27.comm_mode == SYNC_NORMAL))
*			      && (!test_in_progress) && !on_line_command))
*			  {
*			      build_event(E_ORIG,UNUSED);
*			  }
*			  else
*			      error_occurred = TRUE;
*			  break;
*
*		case 'E': at_E();
*			  break;
*
*		case 'F': at_F();
*			  break;
*
*		case 'H': at_H();
*			  break;
*
*		case 'I': at_I();
*			  break;
*
*		case 'L': at_L();
*			  break;
*
*		case 'M': at_M();
*			  break;
*
*		case 'N': at_N();
*			  break;
*
*		case 'O': at_O();
*			  break;
*
*		case 'P': at_P();
*			  break;
*
*		case 'Q': at_Q();
*			  break;
*
*		case 'S': at_S();
*			  break;
*
*		case 'T': at_T();
*			  break;
*
*		case '=': at_equal();
*			  break;
*
*		case '?': at_quest();
*			  break;
*
*		case 'V': at_V();
*			  break;
*
*		case 'W': at_W();
*			  break;
*
*		case 'X': at_X();
*			  break;
*
*		case 'Y': at_Y();
*			  break;
*
*		case 'Z': at_Z();
*			  break;
*
*		case '&': at_and();
*			  break;
*
*		case '\\': at_sl();
*			   break;
*
*		case '%': at_per();
*			  break;
*
*		case ',': at_comma();
*			  break;
*
*		case '-': at_hy();
*			  break;
*
*		case '"': at_qu();
*			  break;
*
*		case '*': at_ast();
*			  break;
*
*		case '+': at_plus();
*			  break;
*
*		case ')': at_prn();
*			  break;
*
*		case '#': at_pnd();
*			  break;
*
*                /* If space or carrage return then ignore	*/
*		case ' ':
*		case 13 : break;
*
*		case '\0': end_execution = TRUE;
*			   break;
*
*		default: error_occurred = TRUE;
*	}
*
*    if ((error_occurred == TRUE) || (end_execution == TRUE))
*        st_parse.state = CMD4;
*
#endif

    /* Wait for delay to execute to expire	*/
    if (timer1)
    {
        /* Need to clear out the receive buffer until the delay to
            execute has expired */
        if (acu_from_num())
            acu_from_clear();
    }
    /* Else OK to execute commands */
    else
    {
        switch (at_command_parser())
        {
            case PARSER_VALID:
                /* The parser found no error w/the command, but the
                    command itself may have (eg: some fax commands only work
                    while online */
                if (error_occurred == TRUE)
                    st_parse.state = END_PARSING;
                break;

            case PARSER_ERROR:
                error_occurred = TRUE;

                /* Intentionally fall through to "finished" */

            case PARSER_FINISHED:
                st_parse.state = END_PARSING;
                break;
        }
    }
/* end change keh 12/94 => new parser */
}



/*******************************************************************************
/
/	Routine: end_cmd_exec
/
/	Author : RSA
/
/	Creation Date: 06/17/91
/
/	Description : This Routine will determine the action to be taken
/		      when terminating command execution.
/
/	Input Parameters: None
/
/	Output Parameters: none
/
/	Global Variables Changed:  None
/
/	Users: parse_at_bg
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA 
/	Description: 
/	Reason: 
/
*******************************************************************************/
void end_cmd_exec(void)
{
    if (error_occurred)
        build_event(E_MSG,ERROR);
    else if (send_ok)
		build_event(E_MSG,OK);

    if (switch_to_leased_line)
    {
        switch_to_leased_line = FALSE;
        build_event(E_ORIG,UNUSED);
    }
    else
        build_event(E_IDLE,UNUSED);
}

/* start change keh 12/94 => new parser */
#if 0 /* Remove unused routines for new parser */
*/*******************************************************************************
*/
*/	Routine: at_plus
*/
*/	Author : RSA
*/
*/	Creation Date: 07/17/91
*/
*/	Description: This routine is called during the CMD3 state. It will call
*/		     the routine needed to perform a command beginning with '+'
*/
*/	Input Parameters: none
*/
*/	Output Parameters: none
*/
*/	Global Variables Changed: error_occurred
*/
*/	Users: execute_cmd()
*/
*/	-------------------------------------------------------------
*/	-			Modifications			    -
*/	-------------------------------------------------------------
*/
*/	Author & Date:	RSA
*/	Description:
*/	Reason:
*/
********************************************************************************/
*void at_plus(void)
*{
*	switch (get_next_char())
*	{
*		case 'F': at_plusf();
*			  break;
*
*/* JAY - TIA Conversion Start 11/19/1993 */
*                case 'V': at_plusv();
*                          break;
*/* JAY - TIA Conversion End 11/19/1993 */
*
*		default: error_occurred = TRUE;
*	}
*}
#endif /* new parser keh */
/* end change keh 12/94 => new parser */

/*******************************************************************************
/
/	Routine: find_parity
/
/	Author : RSA
/
/	Creation Date: 06/17/91
/
/	Description : This Routine will determine the parity, number of stop bits
/		      and number of data bits from the 'AT'
/
/	Input Parameters: ubyte ch - character used to determine parity ('t' or 'T')
/
/	Output Parameters: none
/
/	Global Variables Changed:  None
/
/	Users: cont_cmd_seq
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void find_parity(ubyte ch)
{
	ubyte char_parity;
	ubyte idle_parity;

	char_parity = ch & PARITY_MASK;
	idle_parity = idle_char & PARITY_MASK;

	if (char_parity == idle_parity)
	{
		if (char_parity)
		{
			sr23.acu_parity = SR23_MARK;

			acu_parity = NO_PARITY;
			acu_data_bits = SEVEN;
			acu_stop_bits = TWO;

			char_size = TEN_BITS;
		}
		else
		{
			sr23.acu_parity = SR23_SPACE;

			acu_parity = NO_PARITY;
			acu_data_bits = EIGHT;
			acu_stop_bits = ONE;

			char_size = TEN_BITS;
		}
	}
	else
	{
		acu_data_bits = SEVEN;
		acu_stop_bits = ONE;

		char_size = TEN_BITS;

		if (idle_parity)
			if ((idle_char & CHAR_MASK) == 'A')
			{
				sr23.acu_parity = SR23_ODD;
				acu_parity = ODD;
			}
			else
			{
				sr23.acu_parity = SR23_EVEN;
				acu_parity = EVEN;
			}
		else
			if (idle_char == 'A')
			{
				sr23.acu_parity = SR23_EVEN;
				acu_parity = EVEN;
			}
			else
			{
				sr23.acu_parity = SR23_ODD;
				acu_parity = ODD;
			}
	}
}


/*******************************************************************************
/
/	Routine: get_rx_baud_rate
/
/	Author : RSA
/
/	Creation Date: 06/17/91
/
/	Description : This Routine will get the baud rate determined by the
/		      autobaud Routine and translate it into the encoded values
/		      for sr23.dte_baud_rate.
/
/	Input Parameters: None
/
/	Output Parameters: none
/
/	Global Variables Changed:  None
/
/	Users: cont_cmd_seq
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date: RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void get_rx_baud_rate(void)
{
        /* If the terminal speed is fixed then do not get the autobaud rate.
           The fixed rate may not be the same as the last auotbauded rate.
        */
        if (!dont_autobaud)
    	        dte_baud = get_autobaud_rate();

	switch (dte_baud)
	{
		case BPS38400:
			sr23.dte_baud_rate = SREG_38400;
			break;

		case BPS19200:
			sr23.dte_baud_rate = SREG_19200;
			break;

		case BPS9600:
			sr23.dte_baud_rate = SREG_9600;
			break;

		case BPS7200:
			sr23.dte_baud_rate = SREG_7200;
			break;

		case BPS4800:
			sr23.dte_baud_rate = SREG_4800;
			break;

		case BPS2400:
			sr23.dte_baud_rate = SREG_2400;
			break;

		case BPS1200:
			sr23.dte_baud_rate = SREG_1200;
			break;

		case BPS300:
		case BPS600:
			sr23.dte_baud_rate = SREG_600;
			break;
	}
}

/* start change 1/18/95 keh => no stalled loops for OS support */
/*******************************************************************************
/
/	Routine: parse_to_online_wait
/
/	Author : RSA
/
/	Creation Date: 01/18/95
/
/	Description : Used to execute the ATO1 and ATO3 commands (return online
/              with retrain), this Routine will wait for either the retrain
/              to complete or a time-out before proceding to the on-line
/              state.
/
/	Input Parameters: None
/
/	Output Parameters: none
/
/	Global Variables Changed:  None
/
/	Users: parse_at_bg
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date: RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void parse_to_online_wait(void)
{
    /* If the retain to online watchdog timer expires OR the retrain fails */
    if (!timer1 || (modem_status == IDLE_STATUS))
    {
        /* If retrain failed then disconnect */
        build_event(E_HANGUP,NO_CARRIER);
    }
    /* Else waiting on retrain to complete */
    else
    {
        /* Act if the retrain is complete */
        if (modem_status != RETRAINING_STATUS)
        {
            /* Build CONNECT event and cleanup after parse state */
            parse_return_online();
        }
    }
}

/*******************************************************************************
/
/	Routine: parse_return_online
/
/	Author : RSA
/
/	Creation Date: 01/18/95
/
/	Description:  This routine will return the modem online after a parsed
/                  AT command.  This routine reconfigures link data that
/                  may be changed by dynamic AT commands (DTE speed,break
/                  control...)
/
/	Input Parameters: None
/
/	Output Parameters: none
/
/	Global Variables Changed:  send_ok,on_line_command 
/
/	Users: parse_at_bg
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date: RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void parse_return_online(void)
{
    ubyte last_rate;

    /* Save last modem rate before going from ONLINE to PARSE, and
        get current modem rate */
    last_rate = modem_baud;
    get_modem_baud_and_mode();

    /* Reset line baud rate if new speed or V.23 mode */
    if ((modem_baud!=last_rate) || (modem_mode==V23_ADX) || (modem_mode==V23_HDX))
        system_set_line_baud();

    /* Move from PARSE state to ONLINE */
    build_event(E_CONNECT,UNUSED);

    /* Restart the V.42 code if running */
    if ((comm_mode == ASYNC) && (operating_mode != DIRECT))
        system_start(CONTINUE);
    else
        build_event(E_MSG,CONNECT_XXXX);

    /* Set High Speed LED based on new line rate */
/* changed by ramn on 8/1/96 */
/*    if (modem_baud >= BPS2400 && modem_baud <= BPS57600)*/
	 if (modem_baud >= BPS2400 && modem_baud != BPS600)
         modem_hs_led(modem_baud);
    else
        modem_hs_led(OFF);

    /* Cleanup Parse vars and reconfigure the system */
    send_ok = FALSE;
    on_line_command = FALSE;
    system_reconfigure();
    autobaud_off();
}
/* end change 1/18/95 keh => no stalled loops for OS support */

/* start change keh 1/20/95 => allow AT&T1 to return to the test */
/*******************************************************************************
/
/	Routine: parse_online_test
/
/	Author : RSA
/
/	Creation Date: 01/20/95
/
/	Description:  This routine will process TEST events durring the
/                  state of type AT_TEST.
/                  There are only 2 events to process: ATO (return to the test),
/                  and AT&T0 (terminate the test).
/
/	Input Parameters: None
/
/	Output Parameters: none
/
/	Global Variables Changed:  st_test.state
/
/	Users: st_parse_test[]
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date: RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void parse_online_test(void)
{
    /* Process Parse test events while a test is in progress.
        There are only 2: ATO (return to the test), and
                          AT&T (terminate the test) */
    /* ATO: set test sub-state to return to the test */
    if (acu_event->parm == TEST_RETURN)
        st_test.state = TEST_RETURN_TO_TEST;
    /* AT&T0: set test sub-state to terminate to the test */
    else
        st_test.state = TEST_TERMINATE;
}
/* end change keh 1/20/95 => allow AT&T1 to return to the test */

