/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00cmts.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains the code for the AT test command.
/
/     Product:          ACU core code
/
/     History:          ac00cmts.c v3.90
/                       ac00cmts.c v3.91
/                       ac00cmts.c v4.02
/
/        Created:       11/16/91
/                       1/12/93
/                       12/12/94
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "mt_pro.h"
#include "dsppatch.h"
/* ramn 2/18/97 */
extern void dsppatch(ubyte);
extern ubyte dsp_cp(void);
extern ubyte dsp_cp_packet;
extern ubyte ack_or_response;
extern void send_pkt_to_dsp(void);
#define  PACKET_MODEM_INIT       96 
#define  PACKET_MODEM_INIT_LEN   0 
#define ACK 0


void acu_start_ALB_test(ubyte which_test);
ubyte allow_test_command(void);
void and_T1A(void);
void and_T1O(void);
void and_T8A(void);
void and_T8O(void);
void and_T(ubyte *);




/*******************************************************************************
/
/     Routine:       allow_test_command
/
/     Author:        RSA
/
/     Creation Date: 03/23/95
/
/     Description:   This routine will verify proper modem conditions for
/                    allowing the Hayes diagnostic test commands.
/
/     Input Parameters:   none
/
/     Output Parameters:   0 (FALSE) = command is NOT allowed
/                          Otherwise = command is allowed
/
/     Global Variables Changed: none.
/
/     Users: and_T1A,and_T1O,and_T8A,and_T8O,and_T
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte allow_test_command(void)
{
   /* All Hayes dianostic AT&T tests require:
      1) No current test in progress, and
      2) an ASYNC terminal, and
      3) non-error corrected links
   */
   if (test_in_progress || (sr27.comm_mode != ASYNC) ||
      ((on_line_command == TRUE) && (operating_mode == RELIABLE)) )
      return FALSE;
   else
      return TRUE;
}


/*******************************************************************************
/
/     Routine:       acu_start_ALB_test
/
/     Author:        RSA
/
/     Creation Date: 03/23/95
/
/     Description:   This routine will configure the ACU to iniate an Analog
/                   Loop Back (ALB) diagnostic test after testing for
/                   proper conditions.
/
/     Input Parameters: which_test - 0 = ALB originate mode
/                                  1 = ALB answer mode 
/                                  2 = ALB originate mode w/self test
/                                  3 = ALB answer mode w/self test
/     Output Parameters:  none
/
/     Global Variables Changed: send_ok,sr14,sr16,test_in_progress,
/           error_occurred
/
/     Users: and_T1A,and_T1O,and_T8A,and_T8O
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_start_ALB_test(ubyte which_test)
{
   /* Local Analog Loopback requires:
      1) Not on-line, and
      2) Not configured for V.21/Bell 103 (300BPS), or V.23.
   */
   if (allow_test_command() && !on_line_command && (dte_baud != BPS300) &&
      !((dte_baud == BPS1200) && ((atB.group1 == 2) || (atB.group1 == 3))))
   {
      /* Set Orig/Answer parameters */
      if (which_test & ALB_ANSW)
         sr14.originate_flag = FALSE;
      else
         sr14.originate_flag = TRUE;

      /* Set Selftest parameters */
      if (which_test & ALB_SELFTEST)
      {
         sr16.alb = DISABLED;
         sr16.alb_self_test = ENABLED;
         test_in_progress = ALB_SELF_TEST;
      }
      /* Else NO Selftest */
      else
      {
         sr16.alb = ENABLED;
         sr16.alb_self_test = DISABLED;
         test_in_progress = ALB;
      }

      /* Instruct ACU to start the TEST */
      build_event(E_TEST,ACU_LOCAL_TEST);
   }
   else
   {
      error_occurred = TRUE;
   }
}

/*******************************************************************************
/
/     Routine:       and_T1A
/
/     Author:        RSA
/
/     Creation Date: 03/23/95
/
/     Description:   This routine is called when the AT command "AT&T1A"
/                    is parsed.
/
/     Input Parameters:  none
/
/     Output Parameters:  none
/
/     Global Variables Changed: none.
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_T1A(void)
{
   /* Start the ALB */
   acu_start_ALB_test(ALB_ANSW);
}

/*******************************************************************************
/
/     Routine:       and_T1O
/
/     Author:        RSA
/
/     Creation Date: 03/23/95
/
/     Description:   This routine is called when the AT command "AT&T1O"
/                    is parsed.
/
/     Input Parameters:  none
/
/     Output Parameters:  none
/
/     Global Variables Changed: none.
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_T1O(void)
{
   /* Start the ALB */
   acu_start_ALB_test(ALB_ORIG);
}


/*******************************************************************************
/
/     Routine:       and_T8A
/
/     Author:        RSA
/
/     Creation Date: 03/23/95
/
/     Description:   This routine is called when the AT command "AT&T8A"
/                    is parsed.
/
/     Input Parameters:  none
/
/     Output Parameters:  none
/
/     Global Variables Changed: none.
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_T8A(void)
{
   /* Start the ALB w/self test */
   acu_start_ALB_test(ALB_ANSW + ALB_SELFTEST);
}


/*******************************************************************************
/
/     Routine:       and_T8O
/
/     Author:        RSA
/
/     Creation Date: 03/23/95
/
/     Description:   This routine is called when the AT command "AT&T8O"
/                    is parsed.
/
/     Input Parameters:  none
/
/     Output Parameters:  none
/
/     Global Variables Changed: none.
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_T8O(void)
{
   /* Start the ALB w/self test */
   acu_start_ALB_test(ALB_ORIG + ALB_SELFTEST);
}


/*******************************************************************************
/
/     Routine:       and_T
/
/     Author:        RSA
/
/     Creation Date: 03/23/95
/
/     Description:   This routine is called when the AT command "AT&T"  
/                    is parsed.
/
/                    NOTE: This command does not handle the ALB commands
/                    which call for Orig or Answer mode in the command,
/                    e.g. at&t1o, at&t1a, at&t8o, at&t8a.
/
/     Input Parameters: ptr to numeric byte parsed command parameter
/
/     Output Parameters:  none
/
/     Global Variables Changed: sr16,sr23,test_in_progress,send_ok,
/                    error_occurred
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_T(ubyte *param_ptr)
{
   /* Test the command parameter.  No entry is the same as zero */
   switch (*param_ptr)
   {
      case 0: /* Terminate any test that is running */
         if (test_in_progress)
            build_event(E_HANGUP,OK);
         break;

      case 1: /* ALB default is Originate */

         dsppatch(COMMON_PATCH);
/*
         modem_init_call_progress(ON_HOOK);
            LOAD_MODEM_INIT
            ack_or_response = ACK;
            send_pkt_to_dsp();
*/
         acu_start_ALB_test(ALB_ORIG);
         break;
      
      case 3: /* LDL */
         /* The LDL test is only valid while on-line */
         if (allow_test_command() && on_line_command)
         {
            sr16.ldl = ENABLED;
            test_in_progress = LDL;

            /* Force OK now, indicating command accepted */
            build_event(E_MSG,OK);
            build_event(E_TEST,ACU_LOCAL_TEST);
         }
         else
         {
            error_occurred = TRUE;
         }
         break;

      case 4: /* RDL response enable */
         /* Must be off-line to set RDL grant privledge */
         if (allow_test_command() && !on_line_command)
         {
            modem_rdl_enable(ENABLED);
            sr23.grant_rdl = ENABLED;
            send_ok = TRUE;
         }
         else
         {
            error_occurred = TRUE;
         }
         break;

      case 5: /* RDL response disable */
         /* Can be in any state to disable RDL grant privledge */
         if (allow_test_command())
         {
            modem_rdl_enable(DISABLED);
            sr23.grant_rdl = DISABLED;
            send_ok = TRUE;
         }
         else
         {
            error_occurred = TRUE;
         }
         break;

      case 6: /* RDL */
         /* RDLs require a connection above 300 BPS (non-ASYNC DCE) */
         if (allow_test_command() && on_line_command && (modem_baud > BPS300))
         {
            test_in_progress = RDL;
            sr16.rdl = ENABLED;
            build_event(E_TEST,ACU_LOCAL_TEST);
         }
         else
         {
            error_occurred = TRUE;
         }
         break;

      case 7: /* RDL selftest */
         /* RDLs require a connection above 300 BPS (non-ASYNC DCE) */
         if (allow_test_command() && on_line_command && (modem_baud > BPS300))
         {
            test_in_progress = RDL_SELF_TEST;
            sr16.rdl = DISABLED;
            sr16.rdl_self_test = ENABLED;

            build_event(E_TEST,ACU_LOCAL_TEST);
         }
         else
         {
            error_occurred = TRUE;
         }
         break;

      case 8: /* Default ALB with selftest */
         acu_start_ALB_test(ALB_ORIG + ALB_SELFTEST);
         break;

      default:
         error_occurred = TRUE;
         break;
   } /* switch (param_ptr) */
}
