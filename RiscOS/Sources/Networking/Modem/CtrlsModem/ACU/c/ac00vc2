/****************************************************************************
/
/	Copyright 1988,1989,1990,1991,1992,1993. All Rights Reserved by:
/	RSA
/	7701 Six Forks Road
/	Suite 120
/	Raleigh, NC  27615
/	(919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.	The information contained herein is solely
/   for the use of RSA.
/
/   File:	ac00vc2.c
/
/   Module Version: 4.01
/
/   Function: This file contains ACU specific interface routines to Voice.
/
/   Product:	ACU core code
/
/   History:
/
/	Created:
/
/	---------------------------------------------------------
/	-	     Modifications	      -
/	---------------------------------------------------------
/
/	Author & Date:	  RSA
/	Description:
/	Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "acu_vce.h"
#include "vce_pro.h"
#include "mt_pro.h"
#include "fp_pro.h"

#include "../mt_ctls1/mt_macro.h" /* ramn 3/11/96 */
#include "dsppatch.h"


void initialize_voice(ubyte);
void proc_parse_voice(void);


/* ramn 3/18/96 */
extern ubyte dsp_cp(void);
extern ubyte dsp_cp_packet;
extern ubyte ack_or_response;
extern void send_pkt_to_dsp(void);
#define  PACKET_MODEM_INIT       96
#define  PACKET_MODEM_INIT_LEN   0
#define ACK 0

extern void modem_return_to_idle(void);
#define VOICE_STATUS	12  /* ramn 6/10/96 */

/* ramn 6/25/96 */
extern ubyte was_in_spkr_phn_mode;
extern void set_7_wait_states(void);
extern ubyte spkr_phn_dnl;
extern void dnld_patch(void);
extern void dnld_spkr_phn_code(uword *);
extern uword pwr_on_patch[500];
extern void dsppatch(ubyte);

extern ubyte voice_patch_dnlded; /* ramn 11/26/96 */


/*******************************************************************************
/
/   Routine:  initialize_voice
/
/   Author: RSA
/
/   Creation Date: 10/26/92
/
/   Description: This routine will initialize the voice code
/
/   Input Parameters: ubyte type - source of initialization
/                       0 - powerup initialization
/                       1 - AT&F or ATZ initialization
/                       2 - AT+VIP initialization
/
/   Output Parameters: none
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -			Modifications			    -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
/       Author & Date: RSA 8/9/1994.
/       Description: Added new variables to be initialized.
/       Reason: Needed for the proper initization of voice.
/
/  Author & Date: RSA 5/26/1995.
/  Description: Removed the initialization of the voice_flow_control parameter.
/  Reason: We now use a single flow control param... fax_flow_control.
/
*******************************************************************************/
extern ubyte numeric_response; /* 1/16/96 ramn defined in voice */
void initialize_voice(ubyte type)
{
	ubyte ch ;
   ubyte cam_type;  /* for LOAD_DSP_CAMJAM */

   /* If did not enter +VIP, reset command the resets the class */
   if (type != VOICE_INIT_VIP)
   {
/* added by ramn on 6/10/96 */
/*
	send the modem init here only if in voice mode or idle
	if inline do not send this as this is screw up the clear down
*/
		if((modem_status == IDLE_STATUS) || (modem_status == VOICE_STATUS)) /* ramn 5/22/96 */
		{
			dsp_cp_packet = 0xC4;
			ch = dsp_cp();

			LOAD_MODEM_INIT
			ack_or_response = ACK;
			send_pkt_to_dsp();
/*added the modem_return_to_idle to generate a modem init*/
			if(was_in_spkr_phn_mode)  /* ramn 6/25/96 */
			{
				was_in_spkr_phn_mode = FALSE;	/* set in vc00ex.c */
				spkr_phn_dnl = 0;
				dnld_spkr_phn_code(pwr_on_patch);	/* ramn 4/22/96 */
				set_7_wait_states();		/* this sets 7 wait states for musket-cp interf*/
				/*dnld_patch();*/
            dsppatch(COMMON_PATCH);  /* jlin, for dynamic patch 10/31/96 */

				LOAD_MODEM_INIT
				ack_or_response = ACK;
				send_pkt_to_dsp();
			}
         else
         {
            cam_type = 0;
            LOAD_DSP_CAMJAM              /* jlin, for dynamic patch, 10/31/96 */
         }



#if 0
				if(voice_patch_dnlded) 	/* ramn 11/26/96 */
				{
					dsppatch();

					LOAD_MODEM_INIT
					ack_or_response = ACK;
					send_pkt_to_dsp();

					voice_patch_dnlded = FALSE;
				}
#endif
         was_in_spkr_phn_mode = FALSE;	/* set in vc00ex.c */
			modem_init_call_progress(ON_HOOK); /* ramn 4/17/96 */

		/*resotore the acu execution delay when leaving voice mode */
			delay_to_exec = ACU_EXEC_DELAY; /* ramn 3/11/96 */

/*	   	st_idle.type = AT_OFFLINE;
   		st_parse.type = AT_OFFLINE;
*/
			on_line_command = FALSE;
		}
/* till here ramn on 3/18/96 */

   	 numeric_response = TRUE; /* 1/1/6/96 ramn */
	    fax_class = 0;          /* default data mode */
       voice_cmd_set = NO_VOICE;

/* start change keh 2/13/95 => add VOICE to new parser */
       /* Enable Parsing of all VOICE ACU commands Disable Parsing of
           all VOICE online commands */
       set_voice_acu_at_cmds(ON);
       set_voice_tia_at_cmds(OFF);
#if 0
       set_voice_rock_at_cmds(OFF);
#endif /* ramn 11/29/95 */
/* end change keh 2/13/95 => add VOICE to new parser */

/* start change keh 3/27/95 => at&f does not reset to idle.non_voice */
       /* Reset to DATA mode (at&f should reset to idle.non_voice) */
       if (type == VOICE_INIT_AT_F)	/* added by ramn on 6/10/96 */
           build_event(E_PARSE,CONN_DATA);
/* end change keh 3/27/95 => at&f does not reset to idle.non_voice */
   }



/* end change keh 3/27/95 => +vip does not set #cls=0 */
   voice_port_rate = 0;
   voice_caller_id = 0;
   hook_control = FALSE;
   dont_autobaud = FALSE;
   new_dte_baud = 0;

/* JAY - TIA Conversion Start 12/1/1993 */
   voice_inactivity_timer_on = FALSE;
/* JAY - TIA Conversion End 12/1/1993 */
/* DRC - TIA Conversion Start 4/11/1994 */

/* Start Change 5/26/1995. */
/*   voice_flow_control = XON_XOFF; */
   fax_flow_control = XON_XOFF;
/* End Change 5/26/1995. */

/* Start Change 8/9/1994. */
   voice_dist_ring_active = FALSE;
   voice_dist_ring_sent = FALSE;

/* start change keh 4/27/95 => only one ring timer required */
/*    voice_ring_off_timer = 0; */
/*    voice_ring_on_timer = 0; */
   voice_ring_timer =0;
   voice_dist_ring_intvl = 0;
/* end change keh 4/27/95 => only one ring timer required */
   voice_dist_ctl_active = FALSE;
   voice_dist_ctl_sent = FALSE;
/* End Change 8/9/1994. */

   /* Initialize voice module */
   if (type != POWERUP)
	{
       voice_init(type);
	 	 delay_to_exec = VOICE_EXEC_DELAY; /* ramn 3/11/96 */
	}

/* transferred here by ramn on 1/16/96 */
/* start change keh >> redo VNH */
#if 0
   voice_VNH_active = FALSE;
#endif
   acu_cntrld_hangup = FALSE;
/* end change keh >> redo VNH */



}


/*******************************************************************************
/
/	State Table:        st_parse_voice
/
/	Author : RSA
/
/	Creation Date: 06/17/94
/
/	Description : This table contains the action routines for Voice mode
/                  PARSE states.
/
/	Users:
/
/	-------------------------------------------------------------
/	-                       Modifications                       -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
const struct stateTab_struct st_parse_voice[EVT_MAX+1] =
{
/* MSG	      */    {S_PARSE,	    parse_at_msg},
/* CHAR_RCVD  */    {S_PARSE,	    ignore},
/* ORIG       */    {S_ORIG,	    parse_orig_voice},
/* ANSW       */    {S_IDLE,	    parse_answ_voice},
/* CONNECT    */    {S_ONLINE,	    parse_connect_voice},
/* IDLE       */    {S_IDLE,	    ignore},
/* RESET      */    {S_IDLE,	    hard_reset},
/* SYS_STAT   */    {S_PARSE,	    ignore},
/* RING       */    {S_PARSE,	    idle_at_ring},
/* DP_CD_OFF  */    {S_PARSE,	    ignore},
/* HANGUP     */    {S_IDLE,	    online_hangup_voice},
/* RETRAIN    */    {S_PARSE,	    ignore},
/* TEST       */    {S_PARSE,	    ignore},
/* PARSE      */    {S_PARSE,	    parse_voice},
/* V24	      */    {S_PARSE,	    idle_at_v24},
/* FP	      */    /*{S_PARSE,	    proc_fp},*/		/* ramn 9/26/96 */
/* FP	      */    {S_PARSE,	    ignore},		/* ramn 9/26/96 */
/* ESC_RXD    */    {S_PARSE,	    ignore},
};


/*******************************************************************************
/
/   Routine: proc_parse_voice
/
/   Author: RSA
/
/   Creation Date: 10/26/92
/
/   Description : This Routine will process the event by determining the
/		  next state and the action to be performed for the PARSE
/		  state of type VOICE.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -			Modifications			    -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void proc_parse_voice(void)
{
	acu_state = st_parse_voice[acu_event->type].new_state;
	acu_proc = st_parse_voice[acu_event->type].fnc_ptr;
}


/* start change keh 8/15/95 => more voice parser changes */
/*******************************************************************************
/
/   Routine: acu_voice_cmd_init
/
/   Author: RSA
/
/   Creation Date: 8/15/95
/
/   Description : This Routine will process the event by determining the
/		            initialize the voice code to the selected voice type
/                  (IS 101 or Rockwell).  It will also enable the parsing
/                  the respective voice AT commands.
/
/   Input Parameters: type -   0 (NO_VOICE)
/                              1 (TIA_IS_101)
/                              2 (ROCKWELL)
/
/   Output Parameters: none
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -			Modifications			    -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void acu_voice_cmd_init(ubyte type)
{
   switch (type)
   {
       case TIA_IS_101:
           set_voice_tia_at_cmds(ON);
#if 0
           set_voice_rock_at_cmds(OFF);
#endif /* ramn 11/29/95 */
           break;

       case ROCKWELL:
           set_voice_tia_at_cmds(OFF);
#if 0
           set_voice_rock_at_cmds(OFF);
#endif /* ramn 11/29/95 */
           break;

       default:
           type = NO_VOICE;
           set_voice_tia_at_cmds(OFF);
#if 0
           set_voice_rock_at_cmds(OFF);
#endif /* ramn 11/29/95 */
			/* voice acu cmds have to be enabled all the time so do not
				disable them */
           /* set_voice_acu_at_cmds(OFF); */ /* ramn 10/10/95 */
           break;
   }

   voice_cmd_set = type;

   /* Pass command to Voice module */
/*   voice_command_init(type); */ /* commented by ramn on 10/10/95 */
	voice_command_init(); /* changed by ramn on 10/10/95 */
}
/* end change keh 8/15/95 => more voice parser changes */


