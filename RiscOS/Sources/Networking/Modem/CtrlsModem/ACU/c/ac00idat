/****************************************************************************
/
/    Copyright 1988,1989,1990,1991,1992,1993,1994. All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/
/    This document contains material confidential to RSA its contents must
/    not be revealed, used or disclosed to anyone or company with out
/    written permission by RSA.  The information contained herein is solely
/    for the use of RSA.
/
/    File:          ac00idat.c
/
/    Module Version: ACU 4.02
/
/    Function: This file contains action routines contained in the
/              st_idle_online[] and st_idle_at[] tables. They are
/              performed when the ACU is in online command mode.
/
/    Product:  ACU core code
/
/    History:  ac00idat.c v3.90
/              ac00idat.c v3.91
/              ac00idat.c v3.94
/              ac00idat.c v3.96
/
/         Created: 10/7/91
/              12/04/91
/              1/21/92
/              1/12/93
/
/         ---------------------------------------------------------
/         -              Modifications            -
/         ---------------------------------------------------------
/
/               Author & Date: RSA
/               Description:
/               Reason:
/
*****************************************************************************/
#include "mod_def.h" /* mrm5896 */
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "mt_pro.h"
#include "v25_pro.h"
#include "ll_pro.h"
#include "vce_pro.h"
#include "acu_vce.h"
/* start change keh 8/3/95 => add sleep mode for temic */
#include "wl_pro.h"
#include "sleep_if.h"

void idle_sleep_event(void);
/* end change keh 8/3/95 => add sleep mode for temic */
void idle_offline_bg(void);
void proc_idle_offline(void);
void proc_idle_online(void);
void idle_chk_char(void);
void idle_at_orig(void);
void idle_at_answ(void);
void idle_at_DTR_on(void);
void idle_at_DTR_off(void);
void idle_at_ring(void);
void idle_to_parse(void);
void idle_online_DTR_off(void);
void proc_cd_off(void);
void init_at_connection(void);
void parse_to_idle(void);
void hard_reset(void);
void idle_at_msg(void);
void parse_at_msg(void);
void parse_at_parse(void);

/*mrm82296*/
extern ubyte delay_auto_baud_enable;



/*******************************************************************************
/
/    Routine: idle_offline_bg
/
/    Author : RSA
/
/    Creation Date: 06/17/91
/
/    Description : This Routine will process the background function for
/               the IDLE state type AT_OFFLINE.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:  s[1]
/
/    Users: idle_bg
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/       Description:
/       Reason:
/
*******************************************************************************/
void idle_offline_bg(void)
{
    if ((!sr21.DSR_only_at_handshaking) && (sr27.comm_mode == ASYNC))
	   modem_dte_dsr(ON);
    else
	   modem_dte_dsr(OFF);

    if ((!sr21.RLSD_reflects_CD) && (sr27.comm_mode == ASYNC)
	   && (!sr27.autosync) )
	   modem_dte_rlsd(ON);
    else
	   modem_dte_rlsd(OFF);

    /* Check to see if time between rings has expired  */
    if ((timer2 == 0) && (s[1] != 0))
	   s[1] = 0;

    modem_dte_cts(ON);
}


/*******************************************************************************
/
/    Routine: proc_idle_offline
/
/    Author : RSA
/
/    Creation Date: 07/17/91
/
/    Description : This Routine will process the event by determining the
/               next state and the action to be performed for the IDLE
/               state of type AT_OFFLINE.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:  acu_state, acu_proc
/
/    Users: proc_idle
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void proc_idle_offline(void)
{
    acu_state = st_idle_at[acu_event->type].new_state;
    acu_proc = st_idle_at[acu_event->type].fnc_ptr;
}


/*******************************************************************************
/
/    Routine: proc_idle_online
/
/    Author : RSA
/
/    Creation Date: 07/17/91
/
/    Description : This Routine will process the event by determining the
/               next state and the action to be performed for the IDLE
/               state of type AT_ONLINE.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:  acu_state, acu_proc
/
/    Users: proc_idle
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void proc_idle_online(void)
{
    acu_state = st_idle_online[acu_event->type].new_state;
    acu_proc = st_idle_online[acu_event->type].fnc_ptr;
}


/*******************************************************************************
/
/    Routine: idle_chk_char
/
/    Author : RSA
/
/    Creation Date: 06/17/91
/
/    Description : This Routine will check to see if an 'a' or 'A' has
/               been received from the terminal.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:  idle_char
/
/    Users: st_idle_at[], st_idle_online[]
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/         Description:
/    Reason:
/
*******************************************************************************/
void idle_chk_char(void)
{
   if (acu_from_num() != 0)
   {
	  idle_char = acu_from_char();


#if PARALLEL_MODE == 1

	  if (acu_cfg.hw_echo == FALSE)
		 if (sr14.echo_cmd_flag && !dont_echo)
			acu_to_char(idle_char);

	  if (((idle_char & CHAR_MASK) == 'A') ||
		 ((idle_char & CHAR_MASK) == 'a'))
		 build_event(E_PARSE,UNUSED);
	  else
		 /* If autobaud is disabled then do not turn it back on */
		 if (!dont_autobaud)
			autobaud_on();
#endif

#if SERIAL_MODE == 1

	 /*
	  if (acu_cfg.hw_echo == FALSE)
		 if (sr14.echo_cmd_flag && !dont_echo)
			acu_to_char(idle_char);
	 */

	  if (((idle_char & CHAR_MASK) == 'A') ||
		  ((idle_char & CHAR_MASK) == 'a'))
	  {
		 	build_event(E_PARSE,UNUSED);

		/*mrm5996*/
/* if condition added by ramn 8/1/96 */
		 if (sr14.echo_cmd_flag && !dont_echo)
			acu_to_char(idle_char);
	  }
	  else
	  {

		 /* If autobaud is disabled then do not turn it back on */
		 if (!dont_autobaud)
		 {

/*mrm82296*/
			delay_auto_baud_enable = TRUE;
			autobaud_on();
		 }

	  }
#endif



  #ifndef __riscos
/* start change keh 8/3/95 => add sleep mode for temic */
	  /* Don't goto sleep - were rx'ing DTE data */
	  sleep_event(S_DONT_SLEEP);
/* end change keh 8/3/95 => add sleep mode for temic */
  #endif
    }
}


/*******************************************************************************
/
/    Routine: idle_at_orig
/
/    Author : RSA
/
/    Creation Date: 06/17/91
/
/    Description : This Routine will setup the ACU state of ORIG with either
/               type AT_PSTN or LEASED_LINE.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:  st_orig.state, st_orig.state, cmd_line[],
/                      cmd_ptr
/
/    Users: st_idle_at[]
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/       Author & Date: RSA/keh 4/6/95
/       Description: remove 3/18/94 jws fix., added setting of SR14 at
/              orig event time
/       Reason: ATDT123;dt123 failed looking for dialtone

/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void idle_at_orig(void)
{
/* start change (1/3) keh 4/5/95 >> atdt1;dt1 fails w/3/18/94 fix */
   sr14.originate_flag = TRUE;
/* end change (1/3) keh 4/5/95 >> atdt1;dt1 fails w/3/18/94 fix */

   /* Need to determine if V.32bis is enabled in by s110.  This variable
	  needs to be set before translate_modem_baud() or
	  update_modem_rate_seq() is called */
   v32bis_enable = s[110];

   if (sr27.leased_line == TRUE)
   {
	  st_orig.type = LEASED_LINE;
	  st_orig.state = INIT_LEASED_LINE;
	  /*init_ll_connection();*/  /* ramn 9/23/96 */
   }
   else
   {
	  st_orig.type = AT_PSTN;

	  switch (acu_event->parm)
	  {
		 /* Setup the command line to not dial any number */
		 case NO_DIAL:
			st_orig.state = INIT_ACU_NO_DIAL;
			break;

		 /* Setup the command line to number stored at location 0 */
		 case DIAL_NUM0:
			cmd_line[0] = 'S';
			cmd_line[1] = '\0';
			cmd_ptr = (ubyte *)&cmd_line[0];
/* start change 2/7/95 keh => Add new parser */
			/* Load Dial String ptr to cmd line w/S0 */
			acu_dial_string_ptr = cmd_ptr;
/* end change 2/7/95 keh => Add new parser */
			st_orig.state = INIT_ACU_DIAL;
			break;

		 default:
			st_orig.state = INIT_ACU_DIAL;
			break;
	  }
	  /* Setup variables needed for an AT PSTN connection */
	  init_at_connection();
   }

   /* Freeze speed until IDLE state is entered */
   autobaud_off();

   /* Set the DTE speed to the value found during autobaud  */
   acu_set_tx_baud(dte_baud);
   last_async_sync = ASYNC;
}


/*******************************************************************************
/
/    Routine: idle_at_answ
/
/    Author : RSA
/
/    Creation Date: 06/17/91
/
/    Description : This Routine will setup the ACU state of ANSW with type
/               AT_PSTN.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:  st_answ.state, st_answ.state, timer1
/
/    Users: st_idle_at[]
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
/  Author & Date: RSA 6/2/1995.
/  Description: Added the assignment to a local (TEMP) before the
/               conditional is checked.
/  Reason: Compiler problems (again)
/
*******************************************************************************/
void idle_at_answ(void)
{
   ubyte temp;

	   /* Need to determine if V.32bis is enabled in by s110.  This variable
		 needs to be set before translate_modem_baud() or update_modem_rate_seq()
		 is called */
	v32bis_enable = s[110];

/* Start Change 6/2/1995. */
	temp = (ubyte)sr27.leased_line;
	if (temp)
	{
		st_answ.type = LEASED_LINE;
		st_answ.state = INIT_LEASED_LINE;

		/*init_ll_connection();*/  /* ramn 9/23/96 */
	}
/* End Change 6/2/1995. */
	else
	{
		st_answ.type = AT_PSTN;
		st_answ.state = INIT_ACU_ANSW;

			 /* Setup variables needed for an AT PSTN connection */
		init_at_connection();
	}

	if ((sr27.comm_mode == SYNC_DTR) || (sr27.comm_mode == SYNC_TALK))
		modem_dte_cts(OFF);

	if (sr27.comm_mode == ASYNC)
		modem_dte_cts(ON);

	   /* Freeze speed until IDLE state is entered */
	autobaud_off();

	   /* Set the DTE speed to the value found during autobaud  */
	acu_set_tx_baud(dte_baud);
	last_async_sync = ASYNC;
}

/*******************************************************************************
/
/    Routine: idle_at_DTR_on
/
/    Author : RSA
/
/    Creation Date: 06/17/91
/
/    Description : This Routine handle an off to on transition of DTR.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:  None
/
/    Users: st_idle_at[]
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void idle_at_DTR_on(void)
{
    /* If &D is a 2 or 3 and DTR goes from low to high then originate
	   a connetion. */
    if ((sr27.comm_mode == SYNC_DTR) && (s[1] == 0))
	   build_event(E_ORIG,DIAL_NUM0);

    else if ((sr27.comm_mode == SYNC_TALK) && (s[1] == 0))
	   build_event(E_ORIG,NO_DIAL);
}


/*******************************************************************************
/
/    Routine: idle_at_DTR_off
/
/    Author : RSA
/
/    Creation Date: 06/17/91
/
/    Description : This Routine handle an on to off transition of DTR.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:  None
/
/    Users: st_idle_at[]
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:
/       Reason:
/
/       Author & Date: RSA 5/25/1994.
/       Description: Added code to cover the reset event when a dropping
/                    of DTR happens when &D is set to 2.
/       Reason: Needed for the voice mode when dtr is dropped.
/
*******************************************************************************/
void idle_at_DTR_off(void)
{
/* Start Change 5/25/1994. */
   /* No voice hangups when DTR is lost */
   if (sr21.DTR_control == 2)
/* start change keh 3/31/95 >> redo VNH */
#if 0
	  voice_VNH_active = FALSE;
#endif
	  acu_cntrld_hangup = FALSE;
/* end change keh 3/31/95 >> redo VNH */
/* End Change 5/25/1994. */

   if (sr21.DTR_control == 3)
	  build_event(E_RESET,UNUSED);
}


/*******************************************************************************
/
/    Routine: idle_at_ring
/
/    Author : RSA
/
/    Creation Date: 06/17/91
/
/    Description : This Routine perform any action needed due to a RING
/               being detected on the line.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:  s[1], timer2
/
/    Users: st_idle_at[], st_parse_at[]
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
/       Author & Date: RSA 5/17/1994.
/       Description: Added code to handle <DLE>R for IS101 ring events.
/       Reason: The code needs to return <DLE>R when in the voice mode
/               and a complete ring cadence is encountered.
/
*******************************************************************************/
/* start change keh 3/23/95 => move voice results locally to voice driver */
#if 0 /* Original Routine */
*void idle_at_ring(void)
*{
*    if (acu_event->parm == RINGON)
*    {
*         modem_ri_led(ON);
*         modem_dte_ri(ON);
*
*/* Start Change 4/29/1994. */
*                if ((voice_dist_ring_active) && (!voice_dist_ring_sent))
*                {
*                   voice_dist_ring_sent = TRUE;
*                   voice_dist_ring_time = VOICE_RING_OFF_MAX_TIME -
*                                                voice_ring_off_timer;
*                   voice_ring_on_timer = VOICE_RING_ON_MAX_TIME;
*/* Start Change 7/29/1994. */
*/*                   temp_array[0] = 'D';
**                   temp_array[1] = 'R';
**                   temp_array[2] = 'O';
**                   temp_array[3] = 'F';
**                   temp_array[4] = '=';
**                   temp_array[5] = '\0';
**                   output_info(temp_array,UNFORMATTED);
**                   output_info(d_to_a(voice_dist_ring_time),NUMERIC_FORM);
**/
*/* End Change 7/29/1994. */
*                   if (voice_cmd_set == TIA_IS_101)
*                        build_event(E_MSG,COMPLEX_PACKET_START);
*                   build_event(E_MSG,DROF);
*                   voice_ring_rpt_timer = voice_dist_ring_intvl;
*                }
*/* End Change 4/29/1994. */
*
*    }
*
*    else if (acu_event->parm == RINGOFF)
*    {
*         modem_ri_led(OFF);
*         modem_dte_ri(OFF);
*
*/* Start Change 4/29/1994. */
*                if (voice_dist_ring_active)
*                {
*                   voice_dist_ring_sent = FALSE;
*                   voice_dist_ring_time = VOICE_RING_ON_MAX_TIME -
*                                                voice_ring_on_timer;
*                   voice_ring_off_timer = VOICE_RING_OFF_MAX_TIME;
*
*/* Start Change 7/29/1994. */
*/*                   temp_array[0] = 'D';
**                    temp_array[1] = 'R';
**                    temp_array[2] = 'O';
**                    temp_array[3] = 'N';
**                    temp_array[4] = '=';
**                    temp_array[5] = '\0';
**                    output_info(temp_array,UNFORMATTED);
**                    output_info(d_to_a(voice_dist_ring_time),NUMERIC_FORM);
**/
*/* End Change 7/29/1994. */
*                   build_event(E_MSG,DRON);
*                  }
*/* End Change 4/29/1994. */
*
*                /* Queue event to send the RING message back to the terminal */
*
*/* Start Change 5/17/1994. */
*                if ((voice_cmd_set == TIA_IS_101) && (!voice_dist_ring_active))
*                {
*/* Start Change 7/29/1994. */
*/*                   temp_array[0] = 0x10;
**                   temp_array[1] = 'R';
**                   temp_array[2] = '\0';
**                   output_info(temp_array,UNFORMATTED);
**/
*                   build_event(E_MSG,SHIELDED_RING);
*/* End Change 7/29/1994. */
*                }
*                else
*                {
*                   build_event(E_MSG,RING);
*
*/* start change 08/05/94 */
*/*                 if (voice_cmd_set = TIA_IS_101) */
*                   if (voice_cmd_set == TIA_IS_101)
*/* end change 08/05/94 */
*
*                        build_event(E_MSG,COMPLEX_PACKET_END);
*                }
*/* End Change 5/17/1994. */
*
*                /* Increment ring count and reset maximum time between rings */
*         s[1]++;
*         timer2 = time_between_rings;
*
*                /* See if Auto-answer is enabled */
*         if (s[0] > 0)
*         {
*
*                        /* See if the correct number of rings have been received */
*              if (s[1] >= s[0])
*              {
*                   if ((sr27.comm_mode == ASYNC) ||
*                       (sr27.comm_mode == SYNC_NORMAL))
*                   {
*                        if ((sr21.DTR_control != 2) ||
*                            (DTR_valid_up_flag == TRUE))
*                        {
*                             build_event(E_ANSW,UNUSED);
*
*                                                /* If auto-answer and &Q1 is in
*                                                   effect then turn off CTS */
*                             if (sr27.comm_mode == SYNC_NORMAL)
*                                  modem_dte_cts(OFF);
*                        }
*                   }
*
*                   if (((sr27.comm_mode == SYNC_DTR) ||
*                        (sr27.comm_mode == SYNC_TALK))
*                       && (DTR_valid_up_flag == TRUE))
*                   {
*                        build_event(E_ANSW,UNUSED);
*                   }
*              }
*         }
*    }
*}
#endif /* original routine */

extern ubyte voice_caller_id;
extern void  init_varibles(void);

void idle_at_ring(void)
{
   if (acu_event->parm == RINGON)
   {
	  /*modem_ri_led(ON);*/ /* ramn 9/20/96 */
	  modem_dte_ri(ON);

  #ifndef __riscos
/* start change keh 8/3/95 => add sleep mode for temic */
	  /* Don't goto sleep - were rx'ing DCE data (a ring) */
	  sleep_event(S_DONT_SLEEP);
/* end change keh 8/3/95 => add sleep mode for temic */
  #endif

/* see ringint.c */
	  if (voice_dist_ring_active && (!voice_dist_ring_sent))
	  {
		 voice_dist_ring_sent = TRUE;
/*22296shujin */
	  }
   }

   else if (acu_event->parm == RINGOFF)
   {
	  /*modem_ri_led(OFF);*/ /* ramn 9/20/96 */
	  modem_dte_ri(OFF);

	  /* Send Ring message to terminal */
	  /* If Distinctive Ring Report delay, wait to send RING message */
	  if (voice_dist_ring_active && voice_dist_ring_intvl)
	  {
		 voice_ring_rpt_timer = voice_dist_ring_intvl;
	  }
	  /* Else send RING Now */
	  else
	  {
		 /* Send standard RING message to terminal */
/* shujin, 3/27/96, following IS-101 standard */
           if(voice_dist_ring_active == 1 && voice_dist_ring_intvl == 0)  ;
           else          build_event(E_MSG,RING);
	  }

	  /* Increment ring count and reset maximum time between rings */
	  s[1]++;
	  timer2 = time_between_rings;

	  /* See if Auto-answer is enabled */
	  if (s[0] > 0)
	  {
		 /* See if the correct number of rings have been received */
		 if (s[1] >= s[0])
		 {
/*3/11/96, to block off-hook after 1st ring if callerid active */

                   if( voice_caller_id !=0 && s[1]==1 ) ; /* bypass */
                   else
                   {

/*22296shujin, see ringint.c */
			init_varibles();

			if ((sr27.comm_mode == ASYNC) ||
			    (sr27.comm_mode == SYNC_NORMAL))
			{
			    if ((sr21.DTR_control != 2) ||
				   (DTR_valid_up_flag == TRUE))
			    {
				   build_event(E_ANSW,UNUSED);

/* If auto-answer and &Q1 is in effect then  turn off CTS */
				   if (sr27.comm_mode == SYNC_NORMAL)
					  modem_dte_cts(OFF);
			    }
			}

	   		if (((sr27.comm_mode == SYNC_DTR) ||
			    (sr27.comm_mode == SYNC_TALK))
			    && (DTR_valid_up_flag == TRUE))
			{
			    build_event(E_ANSW,UNUSED);
			}
                   }  /* else,voice_caller_id !=0 && s[1]==1 */
		 }
	  }
   }
}


/*******************************************************************************
/
/    Routine: idle_to_parse
/
/    Author : RSA
/
/    Creation Date: 06/17/91
/
/    Description : This Routine will set ACU state to PARSE.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:  st_parse.state, st_parse.type
/
/    Users: st_idle_at[]
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void idle_to_parse(void)
{
/* start change keh 12/94 => new parser */
/*    st_parse.state = CMD1; */
   st_parse.state = WAIT_FOR_AT;
/* end change keh 12/94 => new parser */
   st_parse.type = st_idle.type;
}



/*******************************************************************************
/
/    Routine: idle_online_DTR_off
/
/    Author : RSA
/
/    Creation Date: 06/17/91
/
/    Description : This Routine will process the on to off transition of
/               DTR.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:  None
/
/    Users: st_idle_online[]
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void idle_online_DTR_off(void)
{
    if ((sr21.DTR_control == 2) || ((sr27.comm_mode == SYNC_DTR) || (sr27.comm_mode == SYNC_TALK))
	   || ((sr21.DTR_control == 0) && (sr27.comm_mode == SYNC_NORMAL)))
	   hangup_connection(OK);
}


/*******************************************************************************
/
/    Routine: proc_cd_off
/
/    Author : RSA
/
/    Creation Date: 06/17/91
/
/    Description : This Routine will process the loss of carrier event.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:  None
/
/    Users: st_idle_online[]
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void proc_cd_off(void)
{
    build_event(E_HANGUP,NO_CARRIER);
}


/*******************************************************************************
/
/    Routine: init_at_connection
/
/    Author : RSA
/
/    Creation Date: 06/17/91
/
/    Description : This Routine will initialize parameters needed to make a
/               connection.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:  comm_mode, dial_pause_time, acu_parity,
/                      acu_data_bits, acu_stop_bits, char_size
/
/    Users: idle_at_orig, idle_at_answ
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/       Description:
/       Reason:
/
*******************************************************************************/
void init_at_connection(void)
{
    /* Setup the communication mode to be used during the connection  */
    comm_mode = (ubyte)(sr27.comm_mode + 4*sr27.autosync);

    DSR_only_at_handshaking = (ubyte)sr21.DSR_only_at_handshaking;
    dial_pause_time = s[8];
}


/*******************************************************************************
/
/    Routine: parse_to_idle
/
/    Author : RSA
/
/    Creation Date: 07/17/91
/
/    Description : This Routine will change the state from PARSE to IDLE.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:  st_idle.state, st_idle.type
/
/    Users: st_parse_at[], st_parse_online[]
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void parse_to_idle(void)
{
   switch (acu_event->parm)
   {
	  case MODE_PSTN_MODEM:
	  case MODE_WIRELESS_MODEM:
	  case MODE_PSTN_PHONE:
	  case MODE_WIRELESS_PHONE:
		 /*wireless_mode_event(acu_event->parm); */ /* ramn 9/26/96 */
		 build_event(E_MSG,OK);
		 break;

	  case MODE_SLEEP:
		 idle_sleep_event();
		 break;

	  default:
		 st_idle.state = S_IDLE;
		 st_idle.type = st_parse.type;
		 break;
   }
}



/*******************************************************************************
/
/    Routine: hard_reset
/
/    Author : RSA
/
/    Creation Date: 05/07/91
/
/    Description : This Routine is called to cause the ACU to do a hard
/               reset.  It will palse the modem into it's power up state.
/
/    Input Parameters: none
/
/    Output Parameters: none
/
/    Global Variables Changed:  acu_loop
/
/    Users:    st_idle_v25[], st_orig_at[], st_idle_at, st_idle_online[],
/         st_parse_at[], st_parse_online[], st_parse_v25[], st_orig_v25[]
/         st_answ_v25[], st_retrain_pstn[], st_online_at[], st_online_v25[]
/         st_online_ll[], st_hangup_v25[], st_hangup_at[], st_test_tab[]
/         st_idle_test[], st_parse_test[]
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void hard_reset(void)
{
    acu_loop = FALSE;

    /* Release the line  */
    modem_drop(DISABLED);
}

/*******************************************************************************
/
/    Routine: idle_at_msg
/
/    Author : RSA
/
/    Creation Date: 06/17/91
/
/    Description : This Routine will output a message to the terminal
/               while in the IDLE state with type AT_ONLINE or
/               AT_OFFLINE.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:  result_message_sent
/
/    Users: st_idle_at[]
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/       Author & Date: RSA
/       Description:
/       Reason:
/
*******************************************************************************/
void idle_at_msg(void)
{
    autobaud_off();

    output_result((ubyte)acu_event->parm);

    if (result_message_sent == TRUE)
    {
	   result_message_sent = FALSE;
	   while (acu_to_num() > 0)
		  ;
	   while (!check_all_sent())
		  ;
    }

    /* If a command was issued to fix the baud rate then set the terminal
	   speed to the new value. */
    if (new_dte_baud)
    {
	   dte_baud = new_dte_baud;
	   new_dte_baud = 0;
	   acu_set_tx_baud(dte_baud);
	   acu_from_clear();
    }

    if (terminate_packet_protocol)
    {
	   terminate_packet_protocol = FALSE;
	   acu_packet_protocol(OFF, PP_TIMEOUT);
    }

    if (dont_autobaud == FALSE)
    {
	   acu_from_clear();
	   autobaud_on();
    }

    /*if (sr14.echo_cmd_flag && !dont_echo)
	   modem_serial_echo(ON);*/ /* ramn 9/20/96 */
}

/*******************************************************************************
/
/       Routine: parse_at_msg
/
/       Author : RSA
/
/       Creation Date: 10/03/91
/
/       Description : This Routine will output a message to the terminal
/                     while in the PARSE state with type AT_ONLINE or
/                     AT_OFFLINE.
/
/       Input Parameters: None
/
/       Output Parameters: none
/
/       Global Variables Changed:  result_message_sent
/
/       Users: st_parse_at[]
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date: RSA
/       Description:
/       Reason:
/
*******************************************************************************/
void parse_at_msg(void)
{
    autobaud_off();

    output_result((ubyte)acu_event->parm);

    if (result_message_sent == TRUE)
    {
	   result_message_sent = FALSE;
	   while (acu_to_num() > 0)
			;
	   while (!check_all_sent())
		  ;
    }




    /* If a command was issued to fix the baud rate then set the terminal
	   speed to the new value. */
    if (new_dte_baud)
    {
	   dte_baud = new_dte_baud;
	   new_dte_baud = 0;
	   acu_set_tx_baud(dte_baud);
	   acu_from_clear();
    }

    if (terminate_packet_protocol)
    {
	   terminate_packet_protocol = FALSE;
	   acu_packet_protocol(OFF, PP_TIMEOUT);
    }

    if (dont_autobaud == FALSE)
    {
	   acu_from_clear();
	   autobaud_on();
    }

    /*if (sr14.echo_cmd_flag && !dont_echo)
	   modem_serial_echo(ON);*/ /* ramn 9/20/96 */
}

/*******************************************************************************
/
/   Routine: parse_at_parse
/
/   Author: RSA
/
/   Creation Date: 3/24/1993
/
/   Description: This routine will process the code for the E_PARSE event
/                in the st_parse_at[] table.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -               Modifications                -
/   -------------------------------------------------------------
/    Author & Date: RSA/keh 11/1/94
/    Description: Add "etc_enabled" into modem_connect call
/    Reason: ACU support for ETC.
/
/   Author & Date:  RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void parse_at_parse(void)
{
/* start change keh 1/25/94 => add AMPS */
#if 0 /* original code: */
*    if (acu_event->parm == CONN_VOICE)
*    {
*        /* Inform the modem task that voice is connected */
*/* start change keh 11/94 => Change ETC interface */
*/*                modem_connect(0,0,0,0,0,0,CONNECT_VOICE_ONLY,0); */
*        modem_connect(0,0,0,0,0,0,CONNECT_VOICE_ONLY,0,DISABLED);
*/* end change keh 11/94 => Change ETC interface */
*
*        /* Start up the voice code */
*        voice_init(POWERUP);
*        voice_start();
*
*        st_parse.type = VOICE;
*        st_idle.type = VOICE;
*    }
#endif /* orig: */

   switch (acu_event->parm)
   {
	  case CONN_VOICE:

		 /* Inform the modem task that voice is connected */
/* start change keh 11/94 => Change ETC interface */
/*                modem_connect(0,0,0,0,0,0,CONNECT_VOICE_ONLY,0); */
		 modem_connect(0,0,0,0,0,0,CONNECT_VOICE_ONLY,0,DISABLED);
/* end change keh 11/94 => Change ETC interface */

		 /* Start up the voice code */
		 voice_init(POWERUP);
		 voice_start();

		 st_parse.type = VOICE;
		 st_idle.type = VOICE;
		 break;

/* start change keh 8/21/95 => Add VV to ACU */
	  case CONN_VOICEVIEW:
		 /* Start parsing in VV mode */
		 st_parse.type = st_idle.type = VOICE_VIEW;
		 break;
/* end change keh 8/21/95 => Add VV to ACU */

	  default:
		 break;
   }
/* start change keh 1/25/94 => add AMPS */
}



/* start change keh 4/11/95 => Add mode events for phone & wireless */
/*******************************************************************************
/
/   Routine: idle_to_idle
/
/   Author: RSA
/
/   Creation Date: 3/24/1993
/
/   Description: This routine will process the IDLE events during the
/                IDLE state.  Currently MODE changes and SLEEP events
/                occurr while the modem is in idle mode.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  None
/
/   Users:
/
/   ------------------------------------------------------------
/   -                           Modifications                           -
/   ------------------------------------------------------------
/
/   Author & Date:  RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void idle_to_idle(void)
{
   /* Mode changes are only used by wireless modems */
   switch (acu_event->parm)
   {
	  case MODE_PSTN_MODEM:
	  case MODE_WIRELESS_MODEM:
	  case MODE_PSTN_PHONE:
	  case MODE_WIRELESS_PHONE:
		 /*wireless_mode_event(acu_event->parm); */ /* ramn 9/26/96 */
		 break;

	  case MODE_SLEEP:
		 idle_sleep_event();
		 break;

	  default:
		 /* do nothing */
		 break;
   }
}


/*******************************************************************************
/
/   Routine: idle_sleep_event
/
/   Author: RSA
/
/   Creation Date: 8/3/1995
/
/   Description: This routine will process the IDLE event of parameter
/                  MODE_SLEEP during the IDLE state.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  None
/
/   Users:
/
/   ------------------------------------------------------------
/   -                           Modifications                           -
/   ------------------------------------------------------------
/
/   Author & Date:  RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void idle_sleep_event(void)
{
  #ifndef __riscos
   /* Send sleep message to terminal */
   output_info((ubyte *)"SLEEPING",VERBOSE_FORM);
   while (acu_from_num());
   while (!check_all_sent());

   sleep_event(S_GOTO_SLEEP);
  #endif
}
