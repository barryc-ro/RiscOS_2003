/****************************************************************************
/
/     Copyright 1995,1996.
/     All Rights Reserved by:
/        RSA
/        110 Horizon Drive
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             acuv8v80.c
/
/     Module Version:   ACU 5.00
/
/     Function:         Contains ACU submodule.
/
/     Product:          ACU Core Code
/
/     History:
/
/
/     Created:       7/21/96.
/
/     ---------------------------------------------------------
/     -                   Modifications                       -
/     ---------------------------------------------------------
/
/     Author & Date:  RSA
/     Description:
/     Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "acuv8v80.h"
#include "mt_pro.h"

#include "par_def.h"
#include "par_pro.h"

/* START CHANGE - mlc */
#include "v80_pro.h"
#include "wl_pro.h"
/* END CHANGE - mlc */

extern void set_v80_at_cmds(ubyte);

extern void plus_ES_e(ubyte *);
extern void plus_ES_q(void);
extern void plus_ES_eq(void);
extern void plus_ESA_e(ubyte *);
extern void plus_ESA_q(void);
extern void plus_ESA_eq(void);
extern void plus_A8E_e(ubyte *);
extern void plus_A8E_q(void);
extern void plus_A8E_eq(void);
extern void plus_A8M_e(ubyte *);

extern void plus_ITF_eq(void);
extern void plus_ITF_e(uword *);
extern void plus_ITF_q(void);

extern void acu_v8_indicate(ubyte,ubyte *);
extern void dte_info(uword*,uword*,uword*,uword*,uword*,uword*,uword*,uword*); 
extern void dte_conf_ITF_flow(uword,uword);

extern void PrintIt(byte *);

/************************************************************************
/
/   Parser Command Table for V.8/V.80
/
************************************************************************/
PARSE_CMD_TABLE_STRUCT v80_commands []=
{
    (ubyte *) "+ES=?",  plus_ES_eq,     NO_PARAM,       SEMICOL_END,
    (ubyte *) "+ES=",   plus_ES_e,      COMPOUND_BYTE,  SEMICOL_END,
    (ubyte *) "+ES?",   plus_ES_q,      NO_PARAM,       SEMICOL_END,
    (ubyte *) "+ESA=?", plus_ESA_eq,    NO_PARAM,       SEMICOL_END,
    (ubyte *) "+ESA=",  plus_ESA_e,     COMPOUND_BYTE,  SEMICOL_END,
    (ubyte *) "+ESA?",  plus_ESA_q,     NO_PARAM,       SEMICOL_END,
    (ubyte *) "+ITF=?", plus_ITF_eq,    NO_PARAM,       SEMICOL_END, 
    (ubyte *) "+ITF=",  plus_ITF_e,     COMPOUND_WORD,  SEMICOL_END,
    (ubyte *) "+ITF?",  plus_ITF_q,     NO_PARAM,       SEMICOL_END,
    (ubyte *) "+A8E=?", plus_A8E_eq,    NO_PARAM,       SEMICOL_END,
    (ubyte *) "+A8E=",  plus_A8E_e,     COMPOUND_BYTE_HEX, SEMICOL_END,
    (ubyte *) "+A8E?",  plus_A8E_q,     NO_PARAM,       SEMICOL_END,
    (ubyte *) "+A8M",   plus_A8M_e,     COMPOUND_BYTE,  SEMICOL_END,
    END_OF_PARSE_TABLE
};

/************************************************************************
/
/   Parser Routines for V.8 and V.80
/
************************************************************************/
/******************************************************************************
/
/     Routine:       plus_ES_e
/
/     Author:        RSA
/
/     Creation Date: 7/18/1996.
/
/     Description:   This routine is called to implement the "AT+ES="
/                    command.
/
/     Input Parameters: cmd_param_ptr - Pointer to the AT command's parameter:
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: 
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_ES_e(ubyte *cmd_param_ptr)
{
   ubyte field,value;

/* START CHANGE - 08/23/96 - mlc */
/* AT+ES ALWAYS STORES ALL PARAMETERS EVEN WHEN "ERROR" IS RETURNED */
   ubyte tmp_aorig_rqst=aorig_rqst;
   ubyte tmp_aorig_fbk=aorig_fbk;
   ubyte tmp_aans_fbk=aans_fbk;
/* AT+ES ALWAYS STORES ALL PARAMETERS EVEN WHEN "ERROR" IS RETURNED */
/* START CHANGE - 08/23/96 - mlc */

   field = *cmd_param_ptr++;
   value = *cmd_param_ptr++;

   while ((field)&&(!error_occurred))
   {
      switch (field)
      {
         case 0:
            break;

         case 1:
            if ((value <= 6)&&(value != 0)&&(value != 5))
               tmp_aorig_rqst = value;
            else
               error_occurred = TRUE;
            break;

         case 2:
            if ((value <= 4)&&(value != 1))
               tmp_aorig_fbk  = value;
            else
               error_occurred = TRUE;
            break;

         case 3:
            if ((value <= 8)&&(value != 3)&&(value != 7)&&(value != 0))
               tmp_aans_fbk   = value;
            else
               error_occurred = TRUE;
            break;

         default:
            error_occurred = TRUE;
            break;
      }
      field = *cmd_param_ptr++;
      value = *cmd_param_ptr++;
   }

   if ((tmp_aorig_rqst == 1) && (tmp_aorig_fbk == 0) && (tmp_aans_fbk == 1))
   {
       slN = 0;
   }

/* START CHANGE - 08/23/96 - mlc */
#if 0
   else if ((aorig_rqst == 0) && (aorig_fbk == 1) && (aans_fbk == 0))
#endif
   else if ((tmp_aorig_rqst == 0) && (tmp_aorig_fbk == 1) &&
            (tmp_aans_fbk == 0) && (CONFIG_DIRECT != FALSE))
/* END CHANGE - 08/23/96 - mlc */
   {
       slN = 1;
   }
   else if ((tmp_aorig_rqst == 4) && (tmp_aorig_fbk == 4) &&
            (tmp_aans_fbk == 6))
   {
       slN = 2;
   }
   else if ((tmp_aorig_rqst == 3) && (tmp_aorig_fbk <= 1) &&
            (tmp_aans_fbk == 2))
   {
       slN = 3;
   }
   else if (((tmp_aorig_rqst == 2)||(tmp_aorig_rqst==3)) &&
             (tmp_aorig_fbk == 2) && (tmp_aans_fbk == 4))
   {
       slN = 4;
       if (tmp_aorig_rqst == 2)
           hyJ = 0;
       else
           hyJ = 1;
   }
   else if ((tmp_aorig_rqst == 2) && (tmp_aorig_fbk == 3) &&
            (tmp_aans_fbk == 5))
   {
       slN = 5;
   }
   else if ((tmp_aorig_rqst == 6) && (tmp_aans_fbk == 8))
   {
       slN = 6;
/* RJM111396 */
/* Force V.8 CF -> 0x21 */
#if 1
       av8cf = 0x21;
#endif
   }
   else
   {
       error_occurred = TRUE; /* illegal combination */
   }
   
   if (!error_occurred)
   {

/* START CHANGE - 08/23/96 - mlc */
/* AT+ES ALWAYS STORES ALL PARAMETERS EVEN WHEN "ERROR" IS RETURNED */
      /* store the valid parameter values */
      aorig_rqst = tmp_aorig_rqst;
      aorig_fbk = tmp_aorig_fbk;
      aans_fbk = tmp_aans_fbk;
/* AT+ES ALWAYS STORES ALL PARAMETERS EVEN WHEN "ERROR" IS RETURNED */
/* END CHANGE - 08/23/96 - mlc */

      /* configure the V.80 Module to detect in-band commands */
      V80_conf_inband_detc(TRUE);
   }
}

/******************************************************************************
/
/     Routine:       plus_ES_q
/
/     Author:        RSA
/
/     Creation Date: 7/18/1996.
/
/     Description:   This routine is called to implement the "AT+ES?"
/                    command.
/
/     Input Parameters: cmd_param_ptr - Pointer to the AT command's parameter:
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: 
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_ES_q(void)
{
   output_info((ubyte *)"+ES: ",STORED_NUM);
   output_info(d_to_a(aorig_rqst),UNFORMATTED);
   output_info((ubyte *)",",UNFORMATTED);
   output_info(d_to_a(aorig_fbk),UNFORMATTED);
   output_info((ubyte *)",",UNFORMATTED);
   output_info(d_to_a(aans_fbk),NUMERIC_FORM);
}

/******************************************************************************
/
/     Routine:       plus_ES_eq
/
/     Author:        RSA
/
/     Creation Date: 7/18/1996.
/
/     Description:   This routine is called to implement the "AT+ES=?"
/                    command.
/
/     Input Parameters: cmd_param_ptr - Pointer to the AT command's parameter:
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: 
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_ES_eq(void)
{
   output_info((ubyte *)"+ES: (1-4,6),(0,2-4),(1,2,4-6,8)",VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       plus_ESA_e
/
/     Author:        RSA
/
/     Creation Date: 7/18/1996.
/
/     Description:   This routine is called to implement the "AT+ESA="
/                    command.
/
/     Input Parameters: cmd_param_ptr - Pointer to the AT command's parameter:
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: 
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_ESA_e(ubyte *cmd_param_ptr)
{
   ubyte field,value;

   field = *cmd_param_ptr++;
   value = *cmd_param_ptr++;

   while ((field)&&(!error_occurred))
   {
      switch (field)
      {
         case 0:
            break;

         case 1:
            if (value == 0)
               atrans_idle = value;
            else
               error_occurred=TRUE;
            break;

         case 2:
            if (value <= 1)
               aframed_idle = value;
            else
               error_occurred=TRUE;
            break;

         case 3:
            if (value <= 1)
               aframed_un_ov = value;
            else
               error_occurred=TRUE;
            break;

         case 4:
            error_occurred=TRUE; /* should not accept ANY value */
            break;

         case 5:
            if (value == 0)
               acrc_type = value;
            else
               error_occurred=TRUE;
            break;

         case 6:
            if (value == 0)
               anrzi_en = value;
            else
               error_occurred=TRUE;
            break;

         case 7:
            asyn1 = value;
            break;

         case 8:
            asyn2 = value;
            break;

         default:
            error_occurred = TRUE;
            break;
      }
      field = *cmd_param_ptr++;
      value = *cmd_param_ptr++;
   }

   if (!error_occurred)
       V80_configure(atrans_idle,aframed_idle,aframed_un_ov,ahd_auto,
           acrc_type,anrzi_en,asyn1,asyn2);
}


/******************************************************************************
/
/     Routine:       plus_ESA_q
/
/     Author:        RSA
/
/     Creation Date: 7/18/1996.
/
/     Description:   This routine is called to implement the "AT+ESA?"
/                    command.
/
/     Input Parameters: cmd_param_ptr - Pointer to the AT command's parameter:
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: 
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_ESA_q(void)
{
   output_info((ubyte *)"+ESA: ",STORED_NUM);
   output_info(d_to_a(atrans_idle),UNFORMATTED);
   output_info((ubyte *)",",UNFORMATTED);
   output_info(d_to_a(aframed_idle),UNFORMATTED);
   output_info((ubyte *)",",UNFORMATTED);
   output_info(d_to_a(aframed_un_ov),UNFORMATTED);
   output_info((ubyte *)",",UNFORMATTED);
   output_info((ubyte *)",",UNFORMATTED);
   output_info(d_to_a(acrc_type),UNFORMATTED);
   output_info((ubyte *)",",UNFORMATTED);
   output_info(d_to_a(anrzi_en),UNFORMATTED);
   output_info((ubyte *)",",UNFORMATTED);
   output_info(d_to_a(asyn1),UNFORMATTED);
   output_info((ubyte *)",",UNFORMATTED);
}

/******************************************************************************
/
/     Routine:       plus_ESA_eq
/
/     Author:        RSA
/
/     Creation Date: 7/18/1996.
/
/     Description:   This routine is called to implement the "AT+ESA=?"
/                    command.
/
/     Input Parameters: cmd_param_ptr - Pointer to the AT command's parameter:
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: 
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_ESA_eq(void)
{
   output_info((ubyte *)"+ESA: (0),(0-1),(0-1),,(0),(0),(0-255),",VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       plus_ITF_q
/
/     Author:        RSA
/
/     Creation Date: 08/18/96
/
/     Description:   This routine is called to implement the "AT+ITF?"
/                    command.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: 
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_ITF_q(void)
{
   ubyte ptr[5];

   /* get dte flow control values */
   dte_info(&itf_buffer_size,&itf_xoff_val,&itf_xon_val,&itf_xoff_min,
            &itf_xoff_max,&itf_xon_min,&itf_xon_max,&itf_buffer_count);

   output_info((ubyte*)"+ITF: ",STORED_NUM);
   word_to_a(itf_xoff_val,(ubyte*)&ptr[0]);
   output_info((ubyte*)&ptr[0],UNFORMATTED);
   output_info((ubyte*)",",UNFORMATTED);
   word_to_a(itf_xon_val,(ubyte*)&ptr[0]);
   output_info((ubyte*)&ptr[0],UNFORMATTED);
   output_info((ubyte*)",000",UNFORMATTED);
}

/******************************************************************************
/
/     Routine:       plus_ITF_eq
/
/     Author:        RSA
/
/     Creation Date: 7/11/1996.
/
/     Description:   This routine is called to implement the 
/                   "AT+ITF=?"
/
/     Input Parameters: cmd_param_ptr - Pointer to the AT command's parameter:
/
/     Output Parameters: none
/
/     Global Variables Changed: 
/
/     Users: PARSE_CMD_TABLE_STRUCT phonebook_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_ITF_eq(void)
{

/* START CHANGE - 09/04/96 - mlc */
   ubyte ptr[5];

   /* get dte flow control values */
   dte_info(&itf_buffer_size,&itf_xoff_val,&itf_xon_val,&itf_xoff_min,
            &itf_xoff_max,&itf_xon_min,&itf_xon_max,&itf_buffer_count);

   output_info((ubyte*)"+ITF: (",STORED_NUM);
   word_to_a(itf_xoff_min,(ubyte*)&ptr[0]);
   output_info((ubyte*)&ptr[0],UNFORMATTED);
   output_info((ubyte*)"-",UNFORMATTED);
   word_to_a(itf_xoff_max,(ubyte*)&ptr[0]);
   output_info((ubyte*)&ptr[0],UNFORMATTED);
   output_info((ubyte*)"),(",UNFORMATTED);
   word_to_a(itf_xon_min,(ubyte*)&ptr[0]);
   output_info((ubyte*)&ptr[0],UNFORMATTED);
   output_info((ubyte*)"-",UNFORMATTED);
   word_to_a(itf_xon_max,(ubyte*)&ptr[0]);
   output_info((ubyte*)&ptr[0],UNFORMATTED);
   output_info((ubyte*)"),(000)",UNFORMATTED);
/* END CHANGE - 09/04/96 - mlc */

}


/******************************************************************************
/
/     Routine:       plus_ITF_e
/
/     Author:        RSA
/
/     Creation Date: 7/11/1996.
/
/     Description:   This routine is called to implement the "AT+ITF="
/                    command.
/
/     Input Parameters: cmd_param_ptr - Pointer to the AT command's parameter:
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: PARSE_CMD_TABLE_STRUCT phonebook_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_ITF_e(uword *cmd_param_ptr)
{
   ubyte field;
   uword value;

   /* Get previous values in case param skipped on command line */
   /* Max and min values are thresholds for the buffer skid settings */
   dte_info(&itf_buffer_size,&itf_xoff_val,&itf_xon_val,&itf_xoff_min,
            &itf_xoff_max,&itf_xon_min,&itf_xon_max,&itf_buffer_count);

   /* Process input parameters */
   do
   {
      /* Get field and value from Parser */
      field = (ubyte)*cmd_param_ptr++;
      value = *cmd_param_ptr++;

      switch (field)
      {
         case 0: /* END: no more fields */
            break;

         case 1: /* XOFF value for +ITF= */
            if ((value >= itf_xoff_min) && (value <= itf_xoff_max))
               itf_xoff_val = value;
            else
            {
               error_occurred = TRUE;
               return;
            }
            break;

         case 2: /* XON value for +ITF= */
            if ((value >= itf_xon_min) && (value <= itf_xon_max))
               itf_xon_val = value;
            else
            {
               error_occurred = TRUE;
               return;
            }
            break;

         case 3: /* Reporting period value for +ITF= must be disabled */
            if (!value)
               break;

            /*intentionally fall thru */

         default:
            error_occurred = TRUE;
            return;
      }
      
   } while (field);

   /* Check for threshold errors */
   if (itf_xoff_val <= itf_xon_val) 
      error_occurred = TRUE;
   else
      dte_conf_ITF_flow(itf_xoff_val,itf_xon_val);
}

/******************************************************************************
/
/     Routine:       plus_A8E_e
/
/     Author:        RSA
/
/     Creation Date: 7/18/1996.
/
/     Description:   This routine is called to implement the "AT+A8E="
/                    command.
/
/     Input Parameters: cmd_param_ptr - Pointer to the AT command's parameter:
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: 
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_A8E_e(ubyte *cmd_param_ptr)
{
   ubyte field,value;
   ubyte i,lapm_en;

   field = *cmd_param_ptr++;
   value = *cmd_param_ptr++;

   while ((field)&&(!error_occurred))
   {
      switch (field)
      {
         case 0:
            break;

         case 1:
            if (value==DISAB_V8_ORIG)
            {
               av8o = value;
               automode &= ~V8_ORIG_ENABLED;
            }
            else if ((value==EN_V8_ORIG_DCE) || value==EN_V8_ORIG_DCE_IND)
            {
               av8o = value;
               automode |= V8_ORIG_ENABLED;
            }
            else
               error_occurred = TRUE;
            break;

         case 2:
            if (value==DISAB_V8_ANSW)
            {
               av8a = value;
               automode &= ~V8_ANSW_ENABLED;
            }
            else if ((value==EN_V8_ANSW_DCE) || (value == EN_V8_ANSW_DCE_IND))
            {
               av8a = value;
               automode |= V8_ANSW_ENABLED;
            }
            else
               error_occurred = TRUE;

            /*
             * If there is no error and V.8 answer is not set
             * to DCE controlled with indications, set the
             * preferred call function to full duplex data, the
             * preferred protocol to LAPM and set the call
             * function array to invalid values.
             */
            if ((!error_occurred) && (value != EN_V8_ANSW_DCE_IND))
            {
               av8cf = MT_CF_FULL_DUPLEX;
            }
            break;

         case 3:
            if ((value == 0x21) || (value == 0xC1))
               av8cf = value;
            else
               error_occurred = TRUE;
            
            break;

         case 4:
            if (value == 0)
               av8b = value;
            else
               error_occurred = TRUE;
            break;

         case 5:
               error_occurred = TRUE;
            break;

         case 6:
               error_occurred = TRUE;
            break;
      }
      field = *cmd_param_ptr++;
      value = *cmd_param_ptr++;
   }

   if (slN == 6)
       lapm_en = av8lapm_en;
   else if ((slN > 2) && !hyK)
       lapm_en = TRUE;
   else
       lapm_en = FALSE;

   modem_v8_configure(av8o,av8a,av8cf,av8b,lapm_en,wireless_in_use(),
                         NULL,NULL);
   if (hook == OFF)
       modem_renegotiate();
}

/******************************************************************************
/
/     Routine:       plus_A8E_q
/
/     Author:        RSA
/
/     Creation Date: 7/18/1996.
/
/     Description:   This routine is called to implement the "AT+A8E?"
/                    command.
/
/     Input Parameters: cmd_param_ptr - Pointer to the AT command's parameter:
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: 
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_A8E_q(void)
{
   output_info((ubyte *)"+A8E: ",STORED_NUM);
   output_info(d_to_a(av8o),UNFORMATTED);
   output_info((ubyte *)",",UNFORMATTED);
   output_info(d_to_a(av8a),UNFORMATTED);
   output_info((ubyte *)",",UNFORMATTED);
   output_info(h_to_a(av8cf),UNFORMATTED); /* format as hex */
   output_info((ubyte *)",",UNFORMATTED);
   output_info(d_to_a(av8b),UNFORMATTED);
   output_info((ubyte *)",",UNFORMATTED);
   output_info((ubyte *)",",UNFORMATTED);
}

/******************************************************************************
/
/     Routine:       plus_A8E_eq
/
/     Author:        RSA
/
/     Creation Date: 7/18/1996.
/
/     Description:   This routine is called to implement the "AT+A8E=?"
/                    command.
/
/     Input Parameters: cmd_param_ptr - Pointer to the AT command's parameter:
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: 
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_A8E_eq(void)
{
   output_info((ubyte *)"+A8E: (0,1,6),(0,1,5),(21,C1),(0),,",VERBOSE_FORM);
}

/******************************************************************************
/
/     Routine:       plus_A8M_e
/
/     Author:        RSA
/
/     Creation Date: 7/18/1996.
/
/     Description:   This routine is called to implement the "AT+A8M="
/                    command.
/
/     Input Parameters: cmd_param_ptr - Pointer to the AT command's parameter:
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: 
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plus_A8M_e(ubyte *cmd_param_ptr)
{
   ubyte *temp_byte_ptr;
   temp_byte_ptr = cmd_param_ptr;

   /* take action:*/
}

/*
 *  START CHANGE - 09/04/96 - mlc
 *  TAKE OUT THE -SSE COMMANDS
 */
/*******************************************************************************
/                                                                   
/     Routine:       set_v80_at_cmds
/
/     Author:        RSA
/
/     Creation Date: 7/2/96
/
/     Description:   This Routine enables parsing of DSVD AT commands.
/
/     Input Parameters:   state - OFF (0) to disable, ON (otherwise) to enable.
/
/     Output Parameters: None
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void set_v80_at_cmds(ubyte state)
{
   if (state == OFF)
      at_parser_tables(DISABLE_TABLE,v80_commands);
   else
      at_parser_tables(ENABLE_TABLE,v80_commands);
}

/*******************************************************************************
/                                                                   
/     Routine:       acu_v8_indicate
/
/     Author:        RSA
/
/     Creation Date: 8/2/96
/
/     Description:   This Routine enables parsing of DSVD AT commands.
/
/     Input Parameters:
/
/     Output Parameters: None
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_v8_indicate(ubyte type,ubyte * data_ptr)
{
   if (sr14.verbose_form)
   {
       switch (type)
       {
           case (IND_CI_RXD):
               if (av8a == EN_V8_ANSW_DCE_IND)
               {
                   output_info((ubyte *)"+A8I: ",STORED_NUM);
                   output_info(h_to_a(*data_ptr),NUMERIC_FORM);
               }
           break;

           case (IND_CT_RXD):
               if (av8a == EN_V8_ANSW_DCE_IND)
               {
                   output_info((ubyte *)"+A8C: ",STORED_NUM);
                   output_info(d_to_a(*data_ptr),NUMERIC_FORM);
               }
           break;

           case (IND_ANS_RXD):
               if (av8o == EN_V8_ORIG_DCE_IND) 
               {
                   output_info((ubyte *)"+A8A: ",STORED_NUM);
                   output_info(h_to_a(*data_ptr),NUMERIC_FORM);
               } 
           break;
       
           case (IND_CM_OR_JM_RXD):
               if (((sr14.originate_flag == TRUE)&&(av8o==6))
                   ||((sr14.originate_flag != TRUE)&&(av8a==5)))
               {
                   output_info((ubyte *)"+A8M: ",STORED_NUM);
                   while (*data_ptr !=0)
                       output_info(h_to_a(*data_ptr++),UNFORMATTED);
                   output_info((ubyte*)"",NUMERIC_FORM);
               }
           break;

           case (IND_CJ_DONE):
               if (((sr14.originate_flag == TRUE)&&(av8o==6))
                   ||((sr14.originate_flag != TRUE)&&(av8a==5)))
               {
                   output_info((ubyte *)"+A8J: ",STORED_NUM);
                   output_info(d_to_a(*data_ptr),NUMERIC_FORM);
               }
           break;

           default:
           break;
       }
   }
}

/*******************************************************************************
/                                                                   
/     Routine:       acu_v80_hangup
/
/     Author:        RSA
/
/     Creation Date: 8/20/96
/
/     Description:   This Routine acts as an interface to the V80 module
/                    when an inline hangup command is received
/
/     Input Parameters:
/
/     Output Parameters: None
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_v80_hangup(void)
{
PrintIt( "acu_v80_hangup" );
   hangup_connection(NO_CARRIER);
}
/*******************************************************************************
/                                                                   
/     Routine:       acu_v80_init
/
/     Author:        RSA
/
/     Creation Date: 9/25/96
/
/     Description:   This Routine initializes v80 variables
/
/     Input Parameters:
/
/     Output Parameters: None
/
/     Global Variables Changed:  None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_v80_init(void)
{
   /* V.80 SAM defaults */
   aorig_rqst = 3;
   aorig_fbk = 0;
   aans_fbk = 2;

   av8o = 1;
   av8a = 1;
   av8cf = MT_CF_FULL_DUPLEX;
   
   itf_xoff_val = 320;
   itf_xon_val  = 192;
   dte_conf_ITF_flow(itf_xoff_val,itf_xon_val);

   atrans_idle = 0;
   aframed_idle = 0;
   aframed_un_ov = 1;
   ahd_auto = 0;
   acrc_type = 0;
   anrzi_en = 0;
   asyn1 = 126;
   asyn2 = 126;

   if( slN == 6 )
      V80_configure(atrans_idle,aframed_idle,aframed_un_ov,ahd_auto,
           acrc_type,anrzi_en,asyn1,asyn2);
}


