/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "ds_def.h"
#include "ds_mem.h"
#include "ee_def.h"
#include "acu_pro.h"
#include "mt_pro.h"
#include "v25_pro.h"
#include "ll_pro.h"
#include "acu_vce.h"
#include "acu_epro.h"       /* ACU ETC Driver interface prototypes */
#include "wl_pro.h"
#include "par_def.h"
#include "par_pro.h"
#include "ptt.h"
#include "v34_rate.h" /* 9/9/97 shujin, for autoconfig at+ms if no DSP sram */
#include "mod_def.h" /* jlin 09/11/97 for shujin */
#include "bldflags.h"
#include "hmg_mem1.h"
#include "homolig1.h"

void acu_init(void);
void acu_reset_eeprom(void);
void acu_reset(void);
void retrieve_profile(ubyte,ubyte);
void led_init(void);
void v24_init(void);
void store_profile(ubyte);
void acu_load_defaults(ubyte);
void  init_varibles(void);

/*mrm22596*/
extern ubyte ms_mode;
extern uword ms_min_speed;
extern ubyte ms_min_rate;
extern ubyte v34_bis_mode;
extern ubyte eight_seven_bit;
extern ubyte Parity_e_o;
extern ubyte parity_enabled;
extern ubyte bit_mask;        /* for impro throughput, shujin 9/9/97 */

/* shd 5/1/96 */
extern ubyte sleep_timer_val;
/* SLei added */
extern ubyte CountryInfo;
extern void  InitiateCountryDependSReg(ubyte);
extern country_Make_Break_Time PTT_MakeBreak_Time[];
extern const uword PTT_DialToneTimeOut[];
extern const uword PTT_HookFlash[];
#ifndef __riscos
#define HOST_INTERFACE_STATUS_REG  0xFFC570 /* ramn 8/14/96 */
#endif
#define   CID_RELAY_OFF  0x0200 			/* ramn 12/19/96 */

extern void	set_callerid_relay( uword);	/* ramn 12/19/96 */
extern   ubyte voice_caller_id;
extern   ubyte ext_DspMemErrorFlag;          /* shujin 9/9/97 */
void acu_v80_init(void);
extern ubyte delay_ring_report_flag1; // for all countries

/*******************************************************************************
/
/     Routine:       acu_init
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine is called to initialize parameters and
/                    flags used in the ACU code.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  All flags that need to be initialized
/
/     Users:   master_init
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_init(void)
{
#if INTERNATIONAL_CODE == 1
	delay_ring_report_flag1 = 0; // for all countries
	homg_var1.Forced_sreg0_max1 = 0;	//to disable Per_TTNR_eq.
	homg_var1.disable_blacklist = 0;
	homg_var1.Display_Rng_T = 0;
#endif
   system_status = V42_HALTED;

   acu_state = S_IDLE;
   st_idle.state = S_IDLE;
   state_type[S_IDLE] = AT_OFFLINE;
   st_retrain.state = S_IDLE;

   /* Initialize the ACU features   */
   acu_cfg.direct = CONFIG_DIRECT;
   acu_cfg.hw_echo = CONFIG_ECHO;
   acu_cfg.mode = CONFIG_MODE;
   acu_cfg.fax_class = CONFIG_FAX_CLASS;
   acu_cfg.v23 = CONFIG_V23;
   acu_cfg.extended_cmds = CONFIG_EXT_CMDS;

   overspeed = DISABLED;
   last_status = 0xff;
   last_async_sync = ASYNC;

   /* Turn off all LEDs and DTE signals */
   led_init();
   v24_init();

   /* Null out the command line incase first thing entered is A/ */
   cmd_line[0] = '\0';

   /* Initialize the Parser */
   at_parser_init();
   /* Enable basic and DATA AT commands */
   set_acu_at_cmds(ON);
   set_acu_data_cmds(ON);
   /*set_acu_phbk_cmds(OFF);*/	/* ramn (/26/96 */
   set_v80_at_cmds(ON);

   /* Load the dial string pointer to the NULL command line */
   acu_dial_string_ptr = (ubyte *)&cmd_line[0];
   error_flag = FALSE;
   error_occurred = FALSE;
   valid_char = TRUE;
   on_line_command = FALSE;
   return_to_idle = FALSE;
   reconfigure = FALSE;
   send_ok = FALSE;
   current_register = 0;
   R_mode = FALSE;
   hook = TRUE;
   result_message_sent = FALSE;
   long_space_disconnect = FALSE;
   user_initiated_hangup = FALSE;
   delay_before_hangup = FALSE;
   at_h_command = FALSE;
   at_z_command = FALSE;
   acu_hangup_line = TRUE;

   test_in_progress = FALSE;
   timer_activated = FALSE;

   dtr_timer = 0;
   dtr_timer1sec = 0;
   timer1 = 0;
   timer2 = 0;
   timer3 = 0;
   timer100mS = 9;
   timer1sec = 9;
   timer1min = 9;
   acu_1sec_timer = 0;
   acu_100msec_timer = 0;
   acu_10msec_timer = 0;
   acu_1min_timer = 0;

#ifndef __riscos
   sleep_timer_val = 0;       /* for sleep mode 5/1/96 shujin */
#endif

   /* Initialize timer values */
   delay_to_exec = ACU_EXEC_DELAY; /* Delay from <CR> until command execution */

/*   dialtone_wait_limit = 500;*/      /* Length of time to wait for dialtone */
/*SLei added*/
   dialtone_wait_limit = PTT_DialToneTimeOut[CountryInfo];      /* Length of time to wait for dialtone */
/* KJB 980818 - changed to get Sweden to pass all Scandinavia */
if(country_area_code1 == Denmark_a_code1 || country_area_code1 == Sweden_a_code1)
   length_of_dialtone = 124;       /* Length of dialtone needed to be detected */
else
   length_of_dialtone = 100;       /* Length of dialtone needed to be detected */

/*   inter_digit_delay = 75;*/         /* Delay between pulsed characters */
/*SLei added*/
//   inter_digit_delay = PTT_PulseStop[CountryInfo];         /* Delay between pulsed characters */
/*   flash_time = 50;*/                /* Length of on hook and off hook periods */
/*SLei added*/
   flash_time = PTT_HookFlash[CountryInfo];                /* Length of on hook and off hook periods */
   mod_dialtone_length = 300;      /* Length of dialtone to detect in dial modifier W */
   mod_quiet_answ_length = 500;    /* Length of quiet answer to detect in dial modifier @ */
   answ_tone_delay = 200;          /* Delay before sending answer tone */
#if INTERNATIONAL_CODE == 1
   time_between_rings = 1000;    /* 10 seconds for international code */
#else
   time_between_rings = TIME_BETWEEN_CALLS;    /* Max time allowed between rings */
#endif
   long_space_send_time = 255;     /* Length of the break for long space disconnect  */
   RDL_response_time = 300;        /* Time ACU will wait for a RDL response from the remote modem   */
   ALB_response_time = 12000;      /* Time ACU will wait for a carrier to be present during ALB tests (2 min)*/
   /*     slU_exec_time = 1200;*/
   receive_threshold = 10;

   /* DTE defaults */
   escape_received = FALSE;
   DTR_always_on = FALSE;
   RTS_always_on = FALSE;

   /* Get current DTR status */
   if (modem_dte_DTR_status() == TRUE)
   {
      dte_DTR_flag = TRUE;
      DTR_valid_up_flag = TRUE;
      look_for_DTR_high_to_low = TRUE;
      look_for_DTR_low_to_high = FALSE;
	  /*modem_tr_led(ON);*/ /* ramn 9/20/96 */
   }
   else
   {
      dte_DTR_flag = FALSE;
      DTR_valid_up_flag = FALSE;
      look_for_DTR_high_to_low = FALSE;
      look_for_DTR_low_to_high = TRUE;
	  /*modem_tr_led(OFF);*/ /* ramn 9/20/96 */
   }
   DTR_high_to_low = FALSE;
   DTR_low_to_high = FALSE;
   RLSD_reflects_CD_temp = FALSE;

   slO = FALSE;
   slU = FALSE;
   slY = FALSE;
   slZ = FALSE;
   mnp_advanced_commands = FALSE;
   operating_mode = NORMAL;

   /* Initialize S registers that are not stored in EEprom */
   s[1] = 0;
   s[3] = DEFAULT_S3;
   s[4] = DEFAULT_S4;
   s[5] = DEFAULT_S5;
   escape_mode = GUARD_TIME_ESCAPE_ENABLED;
   detect_disconnect_tone = FALSE;
   tone_disconnect = FALSE;
   switch_to_leased_line = FALSE;

   modem_init_call_progress(ON_HOOK);
   modem_serial_direct(NORMAL);
   /*modem_serial_echo(OFF);*/ /* ramn 9/20/96 */
   modem_speaker(OFF);
   modem_hook_relay( ON_HOOK);

   connect_type = CONNECT_DATA_ONLY;

   v42_running_mnp10 = FALSE;
   dial_J = FALSE;
   dial_K = FALSE;
   btlz_dict_size = DSIZE;

   voice_cmd_set = NO_VOICE;
   voice_dist_ring_active = FALSE;
   voice_dist_ring_sent = FALSE;
   voice_ring_timer =0;
   voice_dist_ring_intvl = 0;
   voice_dist_ctl_active = FALSE;
   voice_dist_ctl_sent = FALSE;

   /* Init the ACU cellular mode driver if available */
   /*wireless_init();		*/ /* ramn 9/26/96 */

   /* Init customer AT commands and flags */
   acu_customer_init();


/*mrm22596*/

	s[37] = 0;

#if MODEM_X2_MODE == 1

/* shujin 9/9/97, for at&f still work if no DSP sram
  	ms_mode = VX2;
*/
   if(ext_DspMemErrorFlag == 0 )
   {
#if MODEM_V90_MODE == 1
       ms_mode = V90;
#else
#if (DSP_SERIES == 700)
      ms_mode = V34;
#else
      ms_mode = VX2;
#endif
#endif
   }
   else
   {
      ms_mode = V34;
   }

#else
	ms_mode = V34;
#endif

	automode = 1;	/* MH ???? 3 in 326 */
	ms_min_speed =0x3fff;

/*MRM3796*/
	ms_min_rate = BPS300;
  	eight_seven_bit = 8;
#ifndef __riscos
  	Parity_e_o = 0;
	parity_enabled = FALSE;
#endif

/*MRM31496*/
	v34_bis_mode = 1;/* was 0 ramn changed on 5/30/96 */

/* shujin 9/10/97 */
#if PARALLEL_MODE == 1
   bit_mask = 0xff;
#endif

}


/*******************************************************************************
/
/     Routine:       acu_reset_eeprom
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine is called to reinitialize the ACU's eeprom
/                    locations.
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users:   acu_reset
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_reset_eeprom(void)
{
   ubyte i,value,cksum;
   uword val;
   ubyte eeprom_error;
   ubyte version_num_hld;

   /* Load eeprom defaults first */
   acu_load_defaults(POWERUP);

   /* Store the factory defaults and the power up profile   */
   for (i=0; i<NUMBER_OF_PROFILES;i++)
      store_profile(i);

   /* write the new version number */
   version_num_hld = version_num;
   eeprom_error = modem_write_data(VERSION_ADDR, 1, &version_num_hld);

   /* Set Power up Profile to Profile 0 */
   temp_array[0] = 0;
   eeprom_error = modem_write_data(POWER_UP_PROFILE,POWER_UP_SIZE,(ubyte *)&temp_array[0]);

   /* Clear out the stored telephone numbers */
   temp_array[0] = '\0';
   modem_write_data(TELE_NUMBER_0_ADD,1,(ubyte *)&temp_array[0]);
   modem_write_data(TELE_NUMBER_1_ADD,1,(ubyte *)&temp_array[0]);
   modem_write_data(TELE_NUMBER_2_ADD,1,(ubyte *)&temp_array[0]);
   modem_write_data(TELE_NUMBER_3_ADD,1,(ubyte *)&temp_array[0]);

   cksum = CHECKSUM_ADDR;
   val = modem_eeprom_checksum();
   value = val;
   modem_write_data(cksum,CHECKSUM_SIZE,&value);
   cksum = CHECKSUM_ADDR +1;
   value = val >> 8;
   modem_write_data(cksum,CHECKSUM_SIZE,&value);
}


/*******************************************************************************
/
/     Routine:       acu_reset
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine is called to reinitialize the ACU on power
/                    up or hard reset.
/
/     Input Parameters: None
/
/     Output Parameters: None
/
/     Global Variables Changed:  init_type, DTR_always_on, RTS_always_on
/
/     Users:   master_init
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/

void acu_reset(void)
{
   ubyte eeprom_error;
   ubyte checksum_read,checksum_read_l,checksum_read_h, checksum_cal;
	uword val,value_cksum_read;
    ubyte eeprom_version_num;

   init_varibles();  /* for ringint.c */

   /* Initialize the modem using stored EEprom values */
   init_type = SOFTWARE;
   DTR_always_on = FALSE;
   RTS_always_on = FALSE;

   /* Intialize v80 variables */
   acu_v80_init();

  eeprom_error=modem_read_data(VERSION_ADDR, 1, &eeprom_version_num);

/*wake up the serial eeprom, may read a 0xff, need to read twice after powerup */
  eeprom_error=modem_read_data(CHECKSUM_ADDR,CHECKSUM_SIZE,&checksum_read_l);

/* Recall last saved EEPROM checksum from EEPROM */
   eeprom_error=modem_read_data(CHECKSUM_ADDR+1,CHECKSUM_SIZE,&checksum_read_h);

	val = checksum_read_h << 8;

	val |= checksum_read_l;

/*for blank eepro, all location should be 0 , 2/25/96 shujin*/
   if(checksum_read == 0)
   {
/* then read s[11] in offset 7, should not be 0 except for blank eeprom */
      eeprom_error=modem_read_data((PROFILE_0_ADD+7),1,&checksum_cal);
      if(checksum_cal == 0)
      {
        acu_reset_eeprom();
   	 return;
      }
   }
  value_cksum_read = modem_eeprom_checksum();

  if (value_cksum_read == val)
  {
    #ifdef DEBUG_PORT
    PrintMsg("EEPROM Checksum OK!");
    #endif
    modem_read_data(POWER_UP_PROFILE,POWER_UP_SIZE,(ubyte *)&temp_array[0]);
    retrieve_profile(temp_array[0],POWERUP);
  }
  else
  {
    #ifdef DEBUG_PORT
    PrintMsg("EEPROM Checksum Invalid - Resetting EEPROM");
    #endif
    acu_reset_eeprom();
  }

   /* The structure of the EEPROM has changed and needs to be reloaded */
   #ifdef DEBUG_PORT
   PrintMsg("EEPROM Version Number Test");
   outhex(eeprom_version_num);
   outchar(' ');
   outhex(version_num);
   outchar(0x0a);
   outchar(0x0d);
   #endif

   if (version_num != eeprom_version_num)
   {
      #ifdef DEBUG_PORT
      PrintMsg("Version Numbers do not match - Resetting EEPROM!");
      #endif
      acu_reset_eeprom();
   }
}

/*******************************************************************************
/
/     Routine:       retrieve_profile
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine is called to retrieve the selected profile
/                    from the EEprom.
/
/     Input Parameters:
/                    ubyte num - location of profile
/                    ubyte type - Tells if this Routine has been called during
/                                powerup or from a command.
/
/     Output Parameters: None
/
/     Global Variables Changed:  all AT command variables
/
/     Users:   at_Z, acu_reset
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void retrieve_profile(ubyte num,ubyte type)
{
   ubyte *string,i;
   ubyte temp_parity,temp_data,temp_stop,temp_baud;
   uword address;
   ubyte eeprom_error;

   switch (num)
   {
      case 0: address = PROFILE_0_ADD;
         break;

      case 1: address = PROFILE_1_ADD;
         break;

      case 2: address = PROFILE_2_ADD;
         break;
   }

   eeprom_error = modem_read_data(address,PROFILE_SIZE,(ubyte *)&temp_array[0]);

   /* If the EEPROM failed, the do not change the profile */
   if (eeprom_error == TRUE)
   {
      error_occurred = TRUE;
      return;
   }

   string = (ubyte *)&temp_array[0];

   /* save sr23.acu_parity incase this Routine is called from ATZ command */
   temp_parity = (ubyte)sr23.acu_parity;

   /* Need to save these variables in case this has not been called on power up */
   temp_data = acu_data_bits;
   temp_stop = acu_stop_bits;
   temp_baud = dte_baud;

   for (i = 0; i <= PROFILE_SIZE-1; i++)
      *variable_addr[i] = *string++;

   /* If not retrieving profile during powerup, we do not want to reset the
      baud rate, parity, stop bits, and data bits. */
   if (type != POWERUP)
   {
      acu_data_bits = temp_data;
      acu_stop_bits = temp_stop;
      dte_baud = temp_baud;
      sr23.acu_parity = temp_parity;
   }

   /* Determine character size for modem_char() */
   switch (acu_data_bits)
   {
      case SEVEN:
      case EIGHT:
         char_size = TEN_BITS;
         break;
   }

   /* Determine the value of &K based upon the stored value of \Q */
   andK = slQ;
   if (andK == 1)
      andK = 4;

   switch (sr23.acu_parity)
   {
      case SR23_MARK:
      case SR23_SPACE:
         acu_parity = NO_PARITY;
         break;

      case SR23_ODD:
         acu_parity = ODD;
         break;

      case SR23_EVEN:
         acu_parity = EVEN;
         break;
   }

   if ((dte_baud >= BPS2400 && dte_baud <= BPS57600) ||
      dte_baud == BPS115200)
      modem_hs_led(dte_baud);
   else
      modem_hs_led(OFF);

   dial_pause_time = s[8];

   RLSD_reflects_CD_temp = (ubyte)sr21.RLSD_reflects_CD;

   modem_speaker_vol((ubyte)sr22.speaker_vol);
   modem_rdl_enable((ubyte)sr23.grant_rdl);

   switch (sr22.uk_hook)
   {
		     case 0:
/* SLei added*/
       make_time  = PTT_MakeBreak_Time[CountryInfo].P0_make_time;
       break_time = PTT_MakeBreak_Time[CountryInfo].P0_break_time;

#if 0
		 make_time = US_MAKE_TIME;
		 break_time = US_BREAK_TIME;
#endif
		 break;
	  case 1:
/* SLei added*/
       make_time  = PTT_MakeBreak_Time[CountryInfo].P1_make_time;
       break_time = PTT_MakeBreak_Time[CountryInfo].P1_break_time;

#if 0
		 make_time = UK_MAKE_TIME;
		 break_time = UK_BREAK_TIME;
#endif
		 break;

/*SLei added*/
		  case 2:
         	make_time  = PTT_MakeBreak_Time[CountryInfo].P0_make_time;
				make_time /= 2;
         	break_time = PTT_MakeBreak_Time[CountryInfo].P0_break_time;
				break_time /= 2;
    			break;
		  case 3:
	         make_time  = PTT_MakeBreak_Time[CountryInfo].P1_make_time;
				make_time /= 2;
   	      break_time = PTT_MakeBreak_Time[CountryInfo].P1_break_time;
				break_time /= 2;
				break;

#if 0
	  case 0:
         make_time = US_MAKE_TIME;
         break_time = US_BREAK_TIME;
         break;

      case 1:
         make_time = UK_MAKE_TIME;
         break_time = UK_BREAK_TIME;
         break;
#endif
   }

   /* Need to turn on or turn off the auto-answer LED depending upon the
      value of s[0]. */
   if (s[0] > 0)
      modem_aa_led(ON);
   else
      modem_aa_led(OFF);

   /* Retrieve the V.25bis stored values */
   /*v25_retrieve_profile(num);    */    /* ramn 9/27/96 */

   /* Retrieve the leased line stored values */
   /*ll_retrieve_profile(num);*/  /* ramn 9/23/96 */

/* start change keh 4/5/95 >> add amps */
   /* Retrieve the Wireless stored values */
   /*wireless_retrieve_profile(num);*/ /* ramn 9/26/96 */

}


/*******************************************************************************
/
/     Routine:       led_init
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine is called to initialize all LEDs to OFF.
/
/     Input Parameters: None
/
/     Output Parameters: None
/
/     Global Variables Changed:  mr_on_flag
/
/     Users:   acu_init
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void led_init(void)
{


 /*  modem_dc_led(OFF);  */ /* ramn 9/20/96 */
   modem_aa_led(OFF);
   modem_ec_led(OFF);
   /*modem_v32_led(OFF);*/
   /*modem_v23_led(OFF);*/ /* ramn 9/20/96 */
   /*modem_oh_led(OFF);*/ /* ramn 9/20/96 */
   modem_hs_led(OFF);
   /*modem_tr_led(OFF);*/ /* ramn 9/20/96 */
   /*modem_cd_led(OFF);*/ /* ramn 9/20/96 */
   mr_on_flag = FALSE;
   /*modem_mr_led(OFF);*/ /* ramn 9/20/96 */
  /* modem_fax_led(OFF);*/
 }

/*******************************************************************************
/
/     Routine:       v24_init
/
/     Author:        RSA
/
/     Creation Date: 09/09/91
/
/     Description:   This Routine is called to initialize all V.24 signals
/
/     Input Parameters: None
/
/     Output Parameters: None
/
/     Global Variables Changed:  None
/
/     Users:   acu_init
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void v24_init(void)
{

#if 0 /* ramn 9/20/96 */
   modem_dte_112(ON);
   modem_dte_117(OFF);
#endif

   modem_dte_rlsd(OFF);
   modem_dte_dsr(OFF);
   modem_dte_cts(OFF);
   /*modem_cts_led(OFF);*/ /* ramn 9/20/96 */
   /*modem_ri_led(OFF);*/ /* ramn 9/20/96 */
   modem_dte_ri(OFF);

#if 0 /* ramn 9/20/96 */
   /* Turn off Circuit 142 - DTE TEST */
   modem_dte_test(OFF);
#endif
}

/*******************************************************************************
/
/     Routine:       store_profile
/
/     Author:        RSA
/
/     Creation Date: 05/07/91
/
/     Description:   This Routine is called to store the current profile
/                    in eeprom at the location specified.
/
/     Input Parameters: num  (byte)  - location to store profile
/
/     Output Parameters: none
/
/     Global Variables Changed:  none
/
/     Users:   acu_reset_eeprom, and_W
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void store_profile(ubyte num)
{
	ubyte *string,eeprom_error,i,value,cksum;
   uword address,val;

   string = (ubyte *)&temp_array[0];
   for (i = 0; i <= PROFILE_SIZE-1; i++)
      *string++ = *variable_addr[i];

   switch (num)
   {
      case 0:
         address = PROFILE_0_ADD;
         break;

      case 1:
         address = PROFILE_1_ADD;
         break;

      case 2:
         address = PROFILE_2_ADD;
         break;
   }

   eeprom_error = modem_write_data(address,PROFILE_SIZE,(ubyte *)&temp_array[0]);

   /* If a EEPROM write error occurred, display error and return */
   if (eeprom_error == TRUE)
   {
      error_occurred = TRUE;
      return;
   }

/*SLei added*/
	eeprom_error = modem_write_data(COUNTRY_CODE,COUNTRY_CODE_SIZE,(ubyte *)&CountryInfo);

				cksum = CHECKSUM_ADDR;
            val = modem_eeprom_checksum();
				value = val;
            modem_write_data(cksum,CHECKSUM_SIZE,&value);

				cksum = CHECKSUM_ADDR +1;
				value = val >> 8;
            modem_write_data(cksum,CHECKSUM_SIZE,&value);



   /* Store the V.25bis values */
   /*v25_store_profile(num);     */    /* ramn 9/27/96 */

   /* Store the Leased line values */
   /*ll_store_profile(num);*/  /* ramn 9/23/96 */

/* start change keh 4/5/95 >> add amps */
   /* Store the Wireless values */
   /*wireless_store_profile(num); */ /* ramn 9/26/96 */
/* end change keh 4/5/95 >> add amps */


}


/*******************************************************************************
/
/     Routine:       acu_load_defaults
/
/     Author:        RSA
/
/     Creation Date: 12/15/94
/
/     Description:   This Routine will configure the ACU to it's factory default
/                    condition.
/
/     Input Parameters: type - POWER_UP (0) or COMMAND (1,2).  Commands to
/                          restore defaults must not configure DTE port data.
/
/     Output Parameters: none.
/
/     Global Variables Changed: all ACU AT command variables,
/                    acu_data_bits, acu_stop_bits, dte_baud, acu_parity,
/                    char_size, sr23 dial_pause_time, RLSD_reflects_CD_temp,
/
/     Users: and_F, and_Z
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_load_defaults(ubyte type)
{
   ubyte *string,i;
   ubyte temp_parity,temp_data,temp_stop,temp_baud,temp_char;
   ubyte temp_sr23_parity;
   ubyte status;

   /* Save current terminal configuration if not power case */
   if (type != POWERUP)
   {
       temp_data = acu_data_bits;
       temp_stop = acu_stop_bits;
       temp_baud = dte_baud;
       temp_parity = acu_parity;
       temp_sr23_parity = (ubyte)sr23.acu_parity;
       temp_char = char_size;
   }
	s[37] = 0;

#if MODEM_X2_MODE == 1
   if(ext_DspMemErrorFlag == 0 )
   {
#if MODEM_V90_MODE == 1
      ms_mode = V90;
#else

#if (DSP_SERIES == 700)
      ms_mode = V34;
#else
      ms_mode = VX2;
#endif

#endif
   }
   else
      ms_mode = V34;
#else
   ms_mode = V34;
#endif

	automode = 1;			/* MH ???? is 3 */
	ms_min_speed =0x3fff;

  /*MRM3796*/
	ms_min_rate = BPS300;

  	eight_seven_bit = 8;
  	Parity_e_o = 0;
	parity_enabled = FALSE;

  /*MRM31496*/
	v34_bis_mode = 1;	/* was 0 ramn changed on 5/30/96 */

   /* Get factory defaults from ROM */
   string = (ubyte *)&factory_defaults[0];

   /* Store factory defaults into their RAM variables */
   for (i = 0; i <= DEFAULT_SIZE-2; i++)
   {
      /* exclude s91 and s92 */
      if ((i != 21) && (i != 51))
         *variable_addr[i] = *string++;
      else
         string++;
   }
#ifndef __riscos
	string = ( ubyte *)HOST_INTERFACE_STATUS_REG;
	status = *string;

/* zero out all other bits except bit 0 this is PCMCIA bit */
	status = (status & 0x01);
#endif
   	s[33] = 10;		/* default for s33 */

   /* If this is not being called during powerup, then reset baud rate,
      data bits, parity, and stop bits to their current values */
   if (type != POWERUP)
   {
      /* Set baud rate parameters */
      acu_data_bits = temp_data;
      acu_stop_bits = temp_stop;
      dte_baud = temp_baud;
      acu_parity = temp_parity;
      char_size = temp_char;
      sr23.acu_parity = temp_sr23_parity;
   }

  /* High speed LED */
   if ((dte_baud >= BPS2400 && dte_baud <= BPS57600) ||
      dte_baud == BPS115200)
      modem_hs_led(dte_baud);

   dial_pause_time = s[8];
   modem_speaker_vol((ubyte)sr22.speaker_vol);
   modem_rdl_enable((ubyte)sr23.grant_rdl);
   dial_pause_time = s[8];

   if (s[0])
      modem_aa_led(ON);
   else
      modem_aa_led(OFF);

   RLSD_reflects_CD_temp = (ubyte)sr21.RLSD_reflects_CD;

   initialize_fax(type);

   /* Configure ETC Driver from ACU factory defaults list */
   if (type == POWERUP)
      acu_ETC_reset();

   initialize_voice(type);

   /* VoiceView default interface */
	if(fax_class == 80)
     	initialize_vcv();

   acu_customer_load_defaults(type);
   if (type == POWERUP)
      InitiateCountryDependSReg(0);		/* +MH ??? */
   else
      InitiateCountryDependSReg(1);		/* +MH ??? */

	/*
		when hanging up make sure that the callerid relay is also off
		This may be needed if +VCID=1 and some how call answered on first
		ring
	*/
   init_varibles();  /* for ringint.c */
	set_callerid_relay( CID_RELAY_OFF);	/* ramn 12/19/96 */
	voice_caller_id = 0;
}

/*******************************************************************************
/
/	Routine:        acu_wireless_link_type
/
/	Author:         RSA
/
/	Creation Date:  12/8/95
/
/	Description:    This Routine will return a code used for physical
/                  configuration of the data pump, based on user's link
/                  configuration.
/
/	Input Parameters: none
/
/	Output Parameters: wireless link type:
/
/                      0x00 - NO cellular link
/                      0x01 - ETC: local is PSTN
/                      0x81 - ETC: local is Wireless
/                      0x02 - MNP10: local is PSTN
/                      0x82 - MNP10: local is Wireless
/                      0x03 - TX-CELL: local is PSTN
/                      0x83 - TX-CELL: local is Wireless
/
/
/	-------------------------------------------------------------
/	-			            Modifications			            -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte acu_wireless_link_type(void)
{
   ubyte return_code;

   /* Get link status from wireless layer */
   if (wireless_in_use())
       return_code = LOCAL_WIRELESS_BIT;
   else
       return_code = CELLULAR_PUMP__NONE;

   /* ETC active? (ETC is not spec'ed for FAX) */
   /* Note ETC disables MNP10 */
   if (acu_ETC_enabled() && !fax_class)
   {
       return_code |= CELLULAR_PUMP__ETC;
   }

   /* MNP10 cellular active? */
   if ((prnM || dial_K) && !fax_class)
   {
       return_code |= CELLULAR_PUMP__MNP10;
   }

   /* TX-CELL runs regardless of fax class */
   if (return_code & LOCAL_WIRELESS_BIT || prnM || dial_K)
   {
       return_code |= CELLULAR_PUMP__TXCELL;
   }

   return (return_code);
}


