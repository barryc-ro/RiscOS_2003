
/****************************************************************************
/
/    Copyright 1988,1989,1990,1991,1992,1993,1994. All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/
/    This document contains material confidential to RSA its contents must
/    not be revealed, used or disclosed to anyone or company with out
/    written permission by RSA.  The information contained herein is solely
/    for the use of RSA.
/
/    File:          ac00lib3.c
/
/    Module Version: ACU 4.02
/
/    Function: This file contains misc Routines for the ACU code.
/
/    Product:  ACU core code
/
/    History:  ac00lib3.c v3.90
/              ac00lib3.c v3.91
/              ac00lib3.c v3.94
/              ac00lib3.c v3.95
/              ac00lib3.c v3.96
/
/         Created: 10/7/91
/              12/04/91
/              1/21/92
/              3/10/92
/              1/12/93
/
/         ---------------------------------------------------------
/         -              Modifications            -
/         ---------------------------------------------------------
/
/         Author & Date: RSA/keh 7/1/94
/         Description: Add ETC driver interface prototypes.
/         Reason: Add ETC support to core ACU
/
/         Author & Date: RSA 
/         Description: 
/         Reason: 
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "ds_def.h"
#include "ds_mem.h"
#include "ee_def.h"
#include "acu_pro.h"
#include "mt_pro.h"
#include "v25_pro.h"
#include "ll_pro.h"
#include "acu_vce.h"
/* start change keh 7/1/94 => Add ETC interface */
#include "acu_epro.h"       /* ACU ETC Driver interface prototypes */
/* end change keh 7/1/94 => Add ETC interface */
/* start change keh 4/5/95 >> add amps */
#include "wl_pro.h"
/* end change keh 4/5/95 >> add amps */
/* start change 2/7/95 keh => Add new parser */
#include "par_def.h"
#include "par_pro.h"
#include "ptt.h"
#include "..\mt_ctls1\mt_macro.h" /* ramn 12/11/96 */

void acu_init(void);
void acu_reset_eeprom(void);
void acu_reset(void);
void retrieve_profile(ubyte, ubyte);
void led_init(void);
void v24_init(void);
void store_profile(ubyte);
ubyte a_to_d(void);
uword word_a_to_d(void);

/*mrm22596*/
extern ubyte ms_mode;
extern uword ms_min_speed;
extern ubyte ms_min_rate;
extern ubyte v34_bis_mode;

extern ubyte eight_seven_bit;
extern ubyte Parity_e_o;
extern ubyte parity_enabled;

/* shd 5/1/96 */
extern ubyte sleep_timer_val;
/* SLei added */
extern ubyte CountryInfo;
extern void  InitiateCountryDependSReg(void);
extern country_Make_Break_Time PTT_MakeBreak_Time[7];
extern PTT_DialToneTimeOut[8]; 
extern PTT_HookFlash[8];
extern PTT_PulseStop[8];

#define HOST_INTERFACE_STATUS_REG  0xFFC570 /* ramn 8/14/96 */


#define   CID_RELAY_OFF  0x0200 			/* ramn 12/19/96 */
extern void	set_callerid_relay( uword);	/* ramn 12/19/96 */
extern   ubyte voice_caller_id;




/*******************************************************************************
/
/    Routine: acu_init
/
/    Author : RSA
/
/    Creation Date: 05/07/91
/
/    Description : This Routine is called to initialize parameters and
/               flags used in the ACU code.
/
/    Input Parameters: none
/
/    Output Parameters: none
/
/    Global Variables Changed:  All flags that need to be initialized
/
/    Users:    master_init
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/       Author & Date: RSA
/       Description:
/       Reason:
/
/       Author & Date: RSA 5/12/1994.
/       Description: Added the initialization of the variables for the
/                    distinctive ring and the distinctive tone reporting.
/       Reason: Needed for the +VDR and +VDT.
/
/       Author & Date: RSA 7/7/1994.
/       Description: Added the initialization of the voice_flow_control var.
/       Reason: Needed for the +FLO command for voice mode.
/
/  Author & Date: RSA 5/26/1995.
/  Description: Removed the voice_flow_control initializtion.
/  Reason: We now use the fax_flow_control parameter.
/
*******************************************************************************/
void acu_init(void)
{
   system_status = V42_HALTED;

   acu_state = S_IDLE;
   st_idle.state = S_IDLE;
   st_idle.type = AT_OFFLINE;
   st_retrain.state = S_IDLE;

   /* Initialize the ACU features  */
   acu_cfg.direct = CONFIG_DIRECT;
   acu_cfg.hw_echo = CONFIG_ECHO;
   acu_cfg.mode = CONFIG_MODE;
   acu_cfg.fax_class = CONFIG_FAX_CLASS;
   acu_cfg.v23 = CONFIG_V23;
   acu_cfg.extended_cmds = CONFIG_EXT_CMDS;

   overspeed = DISABLED;
   last_status = 0xff;
/* start change 12/10/94 rjm */
/*   last_async_sync = 0xff; */
   last_async_sync = ASYNC;
/* end change 12/10/94 rjm */

   /* Turn off all LEDs and DTE signals */
   led_init();
   v24_init();

   /* Null out the command line incase first thing entered is A/ */
   cmd_line[0] = '\0';

/* start change 2/7/95 keh => Add new parser */
   /* Initialize the Parser */
   at_parser_init();

   /* Enable basic and DATA AT commands */
   set_acu_at_cmds(ON);
   set_acu_data_cmds(ON);

/* Start Change PHONEBOOK SUBMODULE 9/1/1995. */
   /*set_acu_phbk_cmds(OFF);*/	/* ramn (/26/96 */
/* End Change  PHONEBOOK SUBMODULE 9/1/1995. */

   /* Load the dial string pointer to the NULL command line */
   acu_dial_string_ptr = (ubyte *)&cmd_line[0];

   acu_external_cmd_ptr = NULL; /* Command line pointer for AT commands from
							a remotes source (i.e. a handset for cellular
							phone-modems */
/* end change 2/7/95 keh => Add new parser */

   error_flag = FALSE;
   error_occurred = FALSE;
   valid_char = TRUE;
   on_line_command = FALSE;
   return_to_idle = FALSE;
   reconfigure = FALSE;
   send_ok = FALSE;
   current_register = 0;
   R_mode = FALSE;
   return_to_idle = FALSE;
   hook = TRUE;
   result_message_sent = FALSE;
   long_space_disconnect = FALSE;
   user_initiated_hangup = FALSE;
   delay_before_hangup = FALSE;
   at_h_command = FALSE;
   at_z_command = FALSE;
/* start change keh 3/31/95 >> redo VNH */
   acu_hangup_line = TRUE;
/* end change keh 3/31/95 >> redo VNH */

   test_in_progress = FALSE;
   timer_activated = FALSE;

   dtr_timer = 0;
   dtr_timer1sec = 0;
   timer1 = 0;
   timer2 = 0;
   timer3 = 0;
   timer100mS = 9;
   timer1sec = 9;
   acu_1sec_timer = 0;
   acu_100msec_timer = 0;
   acu_10msec_timer = 0;
   acu_1min_timer = 0;

   sleep_timer_val = 0;       /* for sleep mode 5/1/96 shujin */

   /* Initialize timer values */
   delay_to_exec = ACU_EXEC_DELAY; /* Delay from <CR> until command execution */
/*   dialtone_wait_limit = 500;*/      /* Length of time to wait for dialtone */
/*SLei added*/
   dialtone_wait_limit = PTT_DialToneTimeOut[CountryInfo];      /* Length of time to wait for dialtone */
   length_of_dialtone = 100;       /* Length of dialtone needed to be detected */
/*   inter_digit_delay = 75;*/         /* Delay between pulsed characters */
/*SLei added*/
   inter_digit_delay = PTT_PulseStop[CountryInfo];         /* Delay between pulsed characters */
/*   flash_time = 50;*/                /* Length of on hook and off hook periods */
/*SLei added*/
   flash_time = PTT_HookFlash[CountryInfo];                /* Length of on hook and off hook periods */
   mod_dialtone_length = 300;      /* Length of dialtone to detect in dial modifier W */
   mod_quiet_answ_length = 500;    /* Length of quiet answer to detect in dial modifier @ */
   answ_tone_delay = 200;          /* Delay before sending answer tone */
   time_between_rings = TIME_BETWEEN_CALLS;    /* Max time allowed between rings */
   long_space_send_time = 255;     /* Length of the break for long space disconnect  */
   RDL_response_time = 300;        /* Time ACU will wait for a RDL response from the remote modem   */
   ALB_response_time = 12000;      /* Time ACU will wait for a carrier to be present during ALB tests (2 min)*/
   /*     slU_exec_time = 1200;*/
   receive_threshold = 10;

   /* DTE defaults */
   escape_received = FALSE;
   DTR_always_on = FALSE;
   RTS_always_on = FALSE;

   /* Get current DTR status */
   if (modem_dte_DTR_status() == TRUE)
   {
	  dte_DTR_flag = TRUE;
	  DTR_valid_up_flag = TRUE;
	  look_for_DTR_high_to_low = TRUE;
	  look_for_DTR_low_to_high = FALSE;
	  /*modem_tr_led(ON);*/ /* ramn 9/20/96 */
   }
   else
   {
	  dte_DTR_flag = FALSE;
	  DTR_valid_up_flag = FALSE;
	  look_for_DTR_high_to_low = FALSE;
	  look_for_DTR_low_to_high = TRUE;
	  /*modem_tr_led(OFF);*/ /* ramn 9/20/96 */
   }
   DTR_high_to_low = FALSE;
   DTR_low_to_high = FALSE;
   RLSD_reflects_CD_temp = FALSE;

   slO = FALSE;
   slU = FALSE;
   slY = FALSE;
   slZ = FALSE;
   mnp_advanced_commands = FALSE;
   operating_mode = NORMAL;

   /* Initialize S registers that are not stored in EEprom */
   s[1] = 0;
   s[3] = DEFAULT_S3;
   s[4] = DEFAULT_S4;
   s[5] = DEFAULT_S5;
   escape_mode = GUARD_TIME_ESCAPE_ENABLED;
   detect_disconnect_tone = FALSE;
   tone_disconnect = FALSE;
   switch_to_leased_line = FALSE;

   modem_init_call_progress(ON_HOOK);
   modem_serial_direct(NORMAL);
   /*modem_serial_echo(OFF);*/ /* ramn 9/20/96 */
   modem_speaker(OFF);
   modem_hook_relay( ON_HOOK);
   connect_type = CONNECT_DATA_ONLY;

   v42_running_mnp10 = FALSE;
   dial_J = FALSE;
   dial_K = FALSE;
   btlz_dict_size = DSIZE;

/* JAY - TIA Conversion Start 1/20/1994 */
   voice_cmd_set = NO_VOICE;
/* JAY - TIA Conversion End 1/20/1994 */

/* Start Change 4/29/1994. */
   voice_dist_ring_active = FALSE;
   voice_dist_ring_sent = FALSE;
/* start change keh 4/27/95 => only one ring timer required */
/*    voice_ring_off_timer = 0; */
/*    voice_ring_on_timer = 0; */
   voice_ring_timer =0;
   voice_dist_ring_intvl = 0;
/* end change keh 4/27/95 => only one ring timer required */
   voice_dist_ring_intvl = 0;
   voice_dist_ctl_active = FALSE;
   voice_dist_ctl_sent = FALSE;
/* End Change 4/29/1994. */

/* Start Change 5/26/1995. */
/* Start Change 7/7/1994. */
/*   voice_flow_control = XON_XOFF; */
/* End Change 7/7/1994. */
/* End Change 5/26/1995. */

/* start change keh 1/25/94 => add amps */
   /* Init the ACU cellular mode driver if available */

   /*wireless_init();		*/ /* ramn 9/26/96 */

/* end change keh 1/25/94 => add amps */

/* start change keh 10/5//95 => add customer files for temic/musket */
   /* Init customer AT commands and flags */
   acu_customer_init();
/* end change keh 10/5//95 => add customer files for temic/musket */

/*mrm22596*/

	s[37] = 0;
	ms_mode = V34;	
	automode = 3;
	ms_min_speed =0x3fff;

/*MRM3796*/
	ms_min_rate = BPS300;
  	eight_seven_bit = 8;
  	Parity_e_o = 0;
	parity_enabled = FALSE;

/*MRM31496*/  
	v34_bis_mode = 1;/* was 0 ramn changed on 5/30/96 */



}


/*******************************************************************************
/
/    Routine: acu_reset_eeprom
/
/    Author : RSA
/
/    Creation Date: 05/07/91
/
/    Description : This Routine is called to reinitialize the ACU's eeprom
/               locations.
/
/    Input Parameters: none
/
/    Output Parameters: none
/
/    Global Variables Changed:  None
/
/    Users:    acu_reset
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/

void acu_reset_eeprom(void)
{
   ubyte i;

/* start change keh 12/94 => add new parser */
/*    and_F(POWERUP); */
   acu_load_defaults(POWERUP);
/* end change keh 12/94 => add new parser  */

   /* Store the factory defaults and the power up profile   */
   for (i=0; i<NUMBER_OF_PROFILES;i++)
	  store_profile(i);

   /* Set Power up Profile to Profile 0 */
   temp_array[0] = 0;
   modem_write_data(POWER_UP_PROFILE,POWER_UP_SIZE,(ubyte *)&temp_array[0]);

   /* Clear out the stored telephone numbers */
   temp_array[0] = '\0';
   modem_write_data(TELE_NUMBER_0_ADD,1,(ubyte *)&temp_array[0]);
   modem_write_data(TELE_NUMBER_1_ADD,1,(ubyte *)&temp_array[0]);
   modem_write_data(TELE_NUMBER_2_ADD,1,(ubyte *)&temp_array[0]);
   modem_write_data(TELE_NUMBER_3_ADD,1,(ubyte *)&temp_array[0]);

   /* If V25bis is included need to clear out it's eeprom locations   */
   /*v25_clear_stored_num();  */    /* ramn 9/27/96 */

   /* Store the new version number */
   /* Need to move the contents of the const version_num[] into the
	  variable temp_array[].  Version_num[] may be relocated to the page
	  that contains the file ac00tab1.c. Therefore this location cannot
	  be accessed by the modem task page. */

/* 22296 shujin */

   /* Recalculate the checksum */
   i = modem_eeprom_checksum();
   modem_write_data(CHECKSUM_ADDR,CHECKSUM_SIZE,&i);
}


/*******************************************************************************
/
/    Routine: acu_reset
/
/    Author : RSA
/
/    Creation Date: 05/07/91
/
/    Description : This Routine is called to reinitialize the ACU on power
/               up or hard reset.
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed:  init_type, DTR_always_on, RTS_always_on
/
/    Users:    master_init
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA/keh 7/1/94
/    Description:  Add "acu_ETC_reset()" call when profile is recalled from
/               EEPROM to reset the ETC Driver with it's stored parmeters.
/ Reason: Add ETC support to core ACU
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/

/* 2/23/96 shujin, */
extern void  init_varibles(void);

void acu_reset(void)
{
   ubyte eeprom_error;
   ubyte checksum_write, checksum_read, checksum_cal;

   init_varibles();  /* for ringint.c */

   /* Initialize the modem using stored EEprom values */
   init_type = SOFTWARE;
   DTR_always_on = FALSE;
   RTS_always_on = FALSE;

#if 0
   acu_customer_reset();
   wireless_reset();
/*22296 deleted version_addr related things*/
#endif

/*testing 
        acu_reset_eeprom();
   	 return;	
*/

/*wake up the serial eeprom, may read a 0xff, need to read twice after powerup */
  eeprom_error=modem_read_data(CHECKSUM_ADDR,CHECKSUM_SIZE,&checksum_read);

/* Recall last saved EEPROM checksum from EEPROM */
   eeprom_error=modem_read_data(CHECKSUM_ADDR,CHECKSUM_SIZE,&checksum_read);

/*for blank eepro, all location should be 0 , 2/25/96 shujin*/
   if(checksum_read == 0)
   {
/* then read s[11] in offset 7, should not be 0 except for blank eeprom */
      eeprom_error=modem_read_data((PROFILE_0_ADD+7),1,&checksum_cal);
      if(checksum_cal == 0)
      {
        acu_reset_eeprom();
   	 return;	
      }
   }
	 
/* If matches the calculated checksum, read the	stored profile */
  checksum_cal= modem_eeprom_checksum();
  if (checksum_read == checksum_cal)
  {
    modem_read_data(POWER_UP_PROFILE,POWER_UP_SIZE,(ubyte *)&temp_array[0]);
    retrieve_profile(temp_array[0],POWERUP);
  }
  else
  {
    acu_reset_eeprom();
/* Need to reset ACU eeprom locations */
  }

}


/*******************************************************************************
/
/    Routine: retrieve_profile
/
/    Author : RSA
/
/    Creation Date: 05/07/91
/
/    Description : This Routine is called to retrieve the selected profile
/               from the EEprom.
/
/    Input Parameters: ubyte num - location of profile
/                ubyte type - Tells if this Routine has been called during
/                          powerup or from a command.
/
/    Output Parameters: None
/
/    Global Variables Changed:  all AT command variables
/
/    Users:    at_Z, acu_reset
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void retrieve_profile(ubyte num,ubyte type)
{
   ubyte *string,i;
   ubyte temp_parity,temp_data,temp_stop,temp_baud;
   uword address;
   ubyte eeprom_error;

   switch (num)
   {
	  case 0: address = PROFILE_0_ADD;
		 break;

	  case 1: address = PROFILE_1_ADD;
	  break;

   }

   eeprom_error = modem_read_data(address,PROFILE_SIZE,(ubyte *)&temp_array[0]);

   /* If the EEPROM failed, the do not change the profile */
   if (eeprom_error == TRUE)
   {
	  error_occurred = TRUE;
	  return;
   }

   string = (ubyte *)&temp_array[0];

   /* save sr23.acu_parity incase this Routine is called from ATZ command */
   temp_parity = (ubyte)sr23.acu_parity;

   /* Need to save these variables in case this has not been called on power up */
   temp_data = acu_data_bits;
   temp_stop = acu_stop_bits;
   temp_baud = dte_baud;

   for (i = 0; i <= PROFILE_SIZE-1; i++)
	  *variable_addr[i] = *string++;

   /* If not retrieving profile during powerup, we do not want to reset the
	  baud rate, parity, stop bits, and data bits. */
   if (type != POWERUP)
   {
	  acu_data_bits = temp_data;
	  acu_stop_bits = temp_stop;
	  dte_baud = temp_baud;
	  sr23.acu_parity = temp_parity;
   }

   /* Determine character size for modem_char() */
   switch (acu_data_bits)
   {
	  case SEVEN:
	  case EIGHT:
		 char_size = TEN_BITS;
		 break;
   }

   /* Determine the value of &K based upon the stored value of \Q */
   andK = slQ;
   if (andK == 1)
	  andK = 4;

   switch (sr23.acu_parity)
   {
	  case SR23_MARK:
	  case SR23_SPACE:
		 acu_parity = NO_PARITY;
		 break;

	  case SR23_ODD:
		 acu_parity = ODD;
		 break;

	  case SR23_EVEN:
		 acu_parity = EVEN;
		 break;
   }

   if ((dte_baud >= BPS2400 && dte_baud <= BPS57600) ||
	  dte_baud == BPS115200)
	  modem_hs_led(dte_baud);
   else
	  modem_hs_led(OFF);

   dial_pause_time = s[8];

   RLSD_reflects_CD_temp = (ubyte)sr21.RLSD_reflects_CD;

   modem_speaker_vol((ubyte)sr22.speaker_vol);
   modem_rdl_enable((ubyte)sr23.grant_rdl);

   switch (sr22.uk_hook)
   {
     case 0:
/* SLei added*/
       make_time  = PTT_MakeBreak_Time[CountryInfo].P0_make_time;
       break_time = PTT_MakeBreak_Time[CountryInfo].P0_break_time;
#if 0
		 make_time = US_MAKE_TIME;
		 break_time = US_BREAK_TIME;
#endif
		 break;
	  case 1: 
/* SLei added*/
       make_time  = PTT_MakeBreak_Time[CountryInfo].P1_make_time;
       break_time = PTT_MakeBreak_Time[CountryInfo].P1_break_time;
#if 0
		 make_time = UK_MAKE_TIME;
		 break_time = UK_BREAK_TIME;
#endif
		 break;

/*SLei added*/
		  case 2:
         	make_time  = PTT_MakeBreak_Time[CountryInfo].P0_make_time;
				make_time /= 2;
         	break_time = PTT_MakeBreak_Time[CountryInfo].P0_break_time;
				break_time /= 2;
    			break;
		  case 3:
	         make_time  = PTT_MakeBreak_Time[CountryInfo].P1_make_time;
				make_time /= 2;
   	      break_time = PTT_MakeBreak_Time[CountryInfo].P1_break_time;
				break_time /= 2;
				break;
   }

   /* Need to turn on or turn off the auto-answer LED depending upon the
	  value of s[0]. */
   if (s[0] > 0)
	  modem_aa_led(ON);
   else
	  modem_aa_led(OFF);

   /* Retrieve the V.25bis stored values */
   /*v25_retrieve_profile(num);    */    /* ramn 9/27/96 */

   /* Retrieve the leased line stored values */
   /*ll_retrieve_profile(num);*/  /* ramn 9/23/96 */

/* start change keh 4/5/95 >> add amps */
   /* Retrieve the Wireless stored values */
   /*wireless_retrieve_profile(num);*/ /* ramn 9/26/96 */

/* end change keh 4/5/95 >> add amps */
}


/*******************************************************************************
/
/    Routine: led_init
/
/    Author : RSA
/
/    Creation Date: 05/07/91
/
/    Description : This Routine is called to initialize all LEDs to OFF.
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed:  mr_on_flag
/
/    Users:    acu_init
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void led_init(void)
{
 /*  modem_dc_led(OFF);  */ /* ramn 9/20/96 */
   modem_aa_led(OFF);
   modem_ec_led(OFF);
   /*modem_v32_led(OFF);*/
   /*modem_v23_led(OFF);*/ /* ramn 9/20/96 */
   /*modem_oh_led(OFF);*/ /* ramn 9/20/96 */
   modem_hs_led(OFF);
   /*modem_tr_led(OFF);*/ /* ramn 9/20/96 */
   /*modem_cd_led(OFF);*/ /* ramn 9/20/96 */
   mr_on_flag = FALSE;
   /*modem_mr_led(OFF);*/ /* ramn 9/20/96 */
 }

/*******************************************************************************
/
/    Routine: v24_init
/
/    Author : RSA
/
/    Creation Date: 09/09/91
/
/    Description : This Routine is called to initialize all V.24 signals
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed:  None
/
/    Users:    acu_init
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void v24_init(void)
{
#if 0 /* ramn 9/20/96 */
   modem_dte_112(ON);
   modem_dte_117(OFF);
#endif

   modem_dte_rlsd(OFF);
   modem_dte_dsr(OFF);
   modem_dte_cts(OFF);
   /*modem_cts_led(OFF);*/ /* ramn 9/20/96 */
   /*modem_ri_led(OFF);*/ /* ramn 9/20/96 */
   modem_dte_ri(OFF);

#if 0 /* ramn 9/20/96 */
   /* Turn off Circuit 142 - DTE TEST */
   modem_dte_test(OFF);
#endif
}

/*******************************************************************************
/
/    Routine: store_profile
/
/    Author : RSA
/
/    Creation Date: 05/07/91
/
/    Description : This Routine is called to store the current profile
/               in eeprom at the location specified.
/
/    Input Parameters: num  (byte)  - location to store profile
/
/    Output Parameters: none
/
/    Global Variables Changed:  none
/
/    Users:    acu_reset_eeprom, and_W
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void store_profile(ubyte num)
{
   ubyte *string,eeprom_error,i,checksum_write;
   uword address;

   string = (ubyte *)&temp_array[0];
   for (i = 0; i <= PROFILE_SIZE-1; i++)
	  *string++ = *variable_addr[i];

   switch (num)
   {
	  case 0: address = PROFILE_0_ADD;
		 break;

	  case 1: address = PROFILE_1_ADD;
		 break;

   }

   eeprom_error = modem_write_data(address,PROFILE_SIZE,(ubyte *)&temp_array[0]);

   /* If a EEPROM write error occurred, display error and return */
   if (eeprom_error == TRUE)
   {
	  error_occurred = TRUE;
	  return;
   }
/*SLei added*/
	eeprom_error = modem_write_data(COUNTRY_CODE,COUNTRY_CODE_SIZE,(ubyte *)&CountryInfo);

   /* If a EEPROM write error occurred, display error and return */
   if (eeprom_error == TRUE)
   {
	  error_occurred = TRUE;
	  return;
   }

   checksum_write = modem_eeprom_checksum();
   modem_write_data(CHECKSUM_ADDR,CHECKSUM_SIZE,&checksum_write);

   /* Store the V.25bis values */
   /*v25_store_profile(num);     */    /* ramn 9/27/96 */

   /* Store the Leased line values */
   /*ll_store_profile(num);*/  /* ramn 9/23/96 */

/* start change keh 4/5/95 >> add amps */
   /* Store the Wireless values */
   /*wireless_store_profile(num); */ /* ramn 9/26/96 */
/* end change keh 4/5/95 >> add amps */
}


/* start change keh 8/14/95 => remove code unused by new AT Parser */
#if 0
/*******************************************************************************
/
/    Routine: a_to_d
/
/    Author : RSA
/
/    Creation Date: 05/07/91
/
/    Description : This Routine converts an ASCII character to it's
/               decimal value.
/
/    Input Parameters: None
/
/    Output Parameters: ubyte temp - decimal value
/
/    Global Variables Changed:  cmd_ptr
/
/    Users:    All command line parse Routines
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
ubyte a_to_d(void)
{
   uword temp = 0;
   ubyte num;
   ubyte ch;

   while ((ch = get_next_char()) != NULL)
   {
	  num = ch - '0';
	  if ((num >= 0) && (num <= 9))
	  {
		 temp = (temp * 10) + num;
		 if (temp > 255)
		 {
			error_occurred = TRUE;
			return ((ubyte)temp);
		 }
	  }
	  else
	  {
		 cmd_ptr--;
		 return ((ubyte)temp);
	  }
   }
   cmd_ptr--;
   return ((ubyte)temp);
}

/*******************************************************************************
/
/    Routine: word_a_to_d
/
/    Author : RSA
/
/    Creation Date: 10/05/92
/
/    Description : This Routine converts an ASCII character to it's
/               decimal value.
/
/    Input Parameters: None
/
/    Output Parameters: uword temp - decimal value
/
/    Global Variables Changed:  cmd_ptr
/
/    Users:    All command line parse Routines
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
uword word_a_to_d(void)
{
   uword temp = 0;
   ubyte num;
   ubyte ch;

   while (ch = get_next_char())
   {
	  num = ch - '0';
	  if ((num >= 0) && (num <= 9))
	  {
		 temp = (temp * 10) + num;
		 if (temp > 0xFFFF)
		 {
			error_occurred = TRUE;
			return ((uword)temp);
		 }
	  }
	  else
	  {
		 cmd_ptr--;
		 return ((uword)temp);
	  }
   }
   cmd_ptr--;
   return ((uword)temp);
}
#endif 
/* end change keh 8/14/95 => remove code unused by new AT Parser */

/* start change keh 12/15/94 => new Parser */
/*******************************************************************************
/
/    Routine: acu_load_defaults
/
/    Author : RSA
/
/    Creation Date: 12/15/94
/
/    Description : This Routine will configure the ACU to it's factory default
/                  condition.
/
/    Input Parameters: type - POWER_UP (0) or COMMAND (1,2).  Commands to
/                      restore defaults must not configure DTE port data.
/
/    Output Parameters: none.
/
/    Global Variables Changed: all ACU AT command variables,
/      acu_data_bits, acu_stop_bits, dte_baud, acu_parity,
/      char_size, sr23 dial_pause_time, RLSD_reflects_CD_temp,
/
/    Users:
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
/  Author & Date: RSA 5/30/1995.
/  Description: Made the parameter calling into initialize_fax the passed in
/               routine value.
/  Reason: The reset events were incorrectly using the wrong parameters.
/
/  Author & Date: RSA 5/30/1995.
/  Description: Changed the parameter when calling the fax_init() command.
/  Reason: Necessary for the execution of the proper reset events.
/
*******************************************************************************/
void acu_load_defaults(ubyte type)
{
   ubyte *string,i;
   ubyte temp_parity,temp_data,temp_stop,temp_baud,temp_char;
   ubyte temp_sr23_parity;
	ubyte status;

   /* Save current terminal configuration if not power case */
   if (type != POWERUP)
   {
	  temp_data = acu_data_bits;
	  temp_stop = acu_stop_bits;
	  temp_baud = dte_baud;
	  temp_parity = acu_parity;
	  temp_sr23_parity = (ubyte)sr23.acu_parity;
	  temp_char = char_size;
   }

/*mrm22596*/

	s[37] = 0;
	ms_mode = V34;	
	automode = 3;
	ms_min_speed =0x3fff;

  /*MRM3796*/
	ms_min_rate = BPS300;

  	eight_seven_bit = 8;
  	Parity_e_o = 0;
	parity_enabled = FALSE;

  /*MRM31496*/
	v34_bis_mode = 1;	/* was 0 ramn changed on 5/30/96 */


   /* Get factory defaults in ROM */
   string = (ubyte *)&factory_defaults[0];

   /* Store factory defaults into their RAM variables */
   for (i = 0; i <= DEFAULT_SIZE-2; i++)
	  *variable_addr[i] = *string++;


/************/
/* added by ramn 8/14/96 
	if in pcmcia mode then set s33 to 10
	if not set s33 = 0
*/

	string = ( ubyte *)HOST_INTERFACE_STATUS_REG;
	status = *string;

/* zero out all other bits except bit 0 this is PCMCIA bit */
	status = (status & 0x01);	
	if(status == 0)	/* PCMCIA mode */
		s[33] = 10;		/* default for s33 whenin PCMCIA mode */

/***** till here by ramn ******/




#if0  /* 2/23/96 shujin */
   /* Save factory's power-up-profile */
   temp_array[0] = *string++;
   modem_write_data(POWER_UP_PROFILE,1,(ubyte *)&temp_array[0]);

   /* Recalculate and save checksum */
   checksum_write = modem_eeprom_checksum();
   modem_write_data(CHECKSUM_ADDR,CHECKSUM_SIZE,&checksum_write);
#endif

   /* If this is not being called during powerup, then reset baud rate,
	  data bits, parity, and stop bits to their current values */
   if (type != POWERUP)
   {
	  /* Set baud rate parameters */
	  acu_data_bits = temp_data;
	  acu_stop_bits = temp_stop;
	  dte_baud = temp_baud;
	  acu_parity = temp_parity;
	  char_size = temp_char;
	  sr23.acu_parity = temp_sr23_parity;
   }

   /* High speed LED */
   if ((dte_baud >= BPS2400 && dte_baud <= BPS57600) ||
	  dte_baud == BPS115200)
	  modem_hs_led(dte_baud);

   /* Volume */
   modem_speaker_vol((ubyte)sr22.speaker_vol);

   /* Remote digital Loopback */
   modem_rdl_enable((ubyte)sr23.grant_rdl);

   dial_pause_time = s[8];

   /* V.25bis and Leased Line default interface */
   /*v25_set_defaults();    */    /* ramn 9/27/96 */
   /*ll_set_defaults();*/  /* ramn 9/23/96 */

   /* Auto answer LED */
   if (s[0])
	  modem_aa_led(ON);
   else
	  modem_aa_led(OFF);

   RLSD_reflects_CD_temp = (ubyte)sr21.RLSD_reflects_CD;

   /* Fax default interface */
/* Start Change 5/30/1995. jay  */
/*   initialize_fax(FAX_INIT_AND_F); */
   initialize_fax(type);
/* End Change 5/30/1995. jay */

/* start change keh 12/15/94 => new Parser */
/* start change keh 7/1/94 => Add ETC AT&F parser */
   /* Configure ETC Driver from ACU factory defaults list */
   if (type == POWERUP)
	  acu_ETC_reset();
/* end change keh 7/1/94 => Add ETC AT&F parser */

/* start change keh 3/22/95 => D-15: #vbt beep tone timer operates in no vx */
   /* Voice default interface */
/*   initialize_voice(VOICE_INIT_ATZ);*/
   initialize_voice(type);		/* cahnged by ramn on 6/10/96 */

/* end change keh 3/22/95 => D-15: #vbt beep tone timer operates in no vx */


/* start change keh 8/25/95 => add VV to ACU */
   /* Voice default interface */

/*mrm82696*/
/*can not init the overlay data array when in data mode online v42 connection*/

	if(fax_class == 80)		  
   	initialize_vcv();

/* end change keh 8/25/95 => add VV to ACU */

/* start change keh 10/5//95 => add customer files for temic/musket */
   /* Load customer defaults */
   acu_customer_load_defaults(type);
	InitiateCountryDependSReg();

		 /*
			now we are reentering data mode check if the legacy patch was 
			dnlded if yes check if we are in v34 mode if yes we need to 
			dnld the v34 patch again.

			ramn 12/11/96
		 */
			if((voice_patch_dnlded) && 
				((ms_mode == V34) || (ms_mode == V34S))
			  ) 
			{
				dsppatch();		/* ramn 12/11/96 */

				LOAD_MODEM_INIT
				ack_or_response = ACK;
				send_pkt_to_dsp();
				voice_patch_dnlded = FALSE;

				modem_init_call_progress(ON_HOOK); /* ramn 4/5/96 */
			}

/* end change keh 10/5//95 => add customer files for temic/musket */


	/*
		when hanging up make sure that the callerid relay is also off
		This may be needed if +VCID=1 and some how call answered on first
		ring
	*/
   init_varibles();  /* for ringint.c */
	set_callerid_relay( CID_RELAY_OFF);	/* ramn 12/19/96 */
	voice_caller_id = 0;
}
/* end change keh 12/15/94 => new Parser */
