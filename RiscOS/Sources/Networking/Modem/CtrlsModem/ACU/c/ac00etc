/****************************************************************************
/
/     Copyright 1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00etc.c
/
/     Module Version:   ACU 5.00
/
/     Function:         ACU ETC Driver routines (ACU ETC Interface).
/
/     Product:          ACU ETC Driver.
/
/     History:          V1.00 (7/1/94)  - Initial shippment
/                           V1.01 (11/2/94) - Initial release.
/
/        Created:       7/1/94
/
/     ----------------------------------------------------------
/     -                   Modifications                        -
/     ----------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*****************************************************************************/

#include "sys_def.h"        /* Global system defines */
#include "acu_edef.h"       /* ACU ETC defines */
#include "acu_emem.h"       /* ACU ETC Driver variable prototypes */

#include "acu_def.h"        /* ACU global defines */
#include "acu_mem.h"        /* ACU variable prototypes */
#include "mt_pro.h"         /* Modem Task prototypes */

/* Local Prototypes  */
ubyte acu_ETC_installed(void);
void acu_ETC_init(void);
void acu_ETC_reset(void);
ubyte acu_ETC_enabled(void);
void acu_ETC_init_modem(void);
void acu_ETC_and_F(ubyte);
void etc_set_tx_level(ubyte);
void etc_set_max_rate(ubyte);
void etc_set_autorate(ubyte);
void etc_set_hardware_type(ubyte);

/* External prototypes (file ac00elib.c) */
extern void acu_set_etc_commands(ubyte);
extern void etc_config_acu_parms(void);
extern void etc_set_max_DCE_rate(void);


/****************************************************************************
/
/       Routine:            acu_ETC_installed
/
/       Author:             RSA
/
/       Creation Date:             
/
/       Description:        This function is called by the ACU to verify that
/                           ETC is installed in the modem.
/
/       Input Parameters:   None
/
/       Output Parameters:  ubyte ETC installed
/                   0 (FALSE)   = ETC is NOT installed
/                   1 (TRUE)    = ETC is installed
/
/       Global Variables Changed:  None
/
/       Users:                     
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:        
/       Reason:         
/
*****************************************************************************/
ubyte acu_ETC_installed(void)
{
    return(TRUE);
}


/****************************************************************************
/
/       Routine:            acu_ETC_init
/
/       Author:             RSA
/
/       Creation Date:             
/
/       Description:        This routine is called to initialize the ACU ETC
/                           Driver.  It resets and disables ETC for any future
/                           modem calls.  This routine must be called at
/                           powerup, but may be called at any time to reset the
/                           ACU ETC Driver.
/
/       Input Parameters:   None
/
/       Output Parameters:  None
/
/       Global Variables Changed:  None
/
/       Users:                     
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:        
/       Reason:         
/
*****************************************************************************/
void acu_ETC_init(void)
{
   andF = ETC_MODE__DISABLE;
   perB = ETC_MAXRATE_DEFAULT;
   astA = AUTORATE_MAX;
   etc_set_hardware_type(ETC_HW__UNKNOWN); /* attempt to query the h/w type */
   acu_set_etc_commands(ON);
}

/****************************************************************************
/
/       Routine:            acu_ETC_reset
/
/       Author:             RSA
/
/       Creation Date:             
/
/       Description:        This routine is called to reset the ACU ETC Driver.
/                           This routine must be called at powerup, to allow
/                           the ETC Driver access to the Command defaults (or
/                           Command values saved to EEPROM).
/
/       Input Parameters:   None
/
/       Output Parameters:  None
/
/       Global Variables Changed:  None
/
/       Users:                     
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:        
/       Reason:         
/
*****************************************************************************/
void acu_ETC_reset(void)
{
   ubyte tx_level;

   /* This routine is called to notify the ETC Driver that any or all of
      the ETC AT commands have been changed by some method other than
      the Parser.  For example: Power condition, Hardware Reset,
      Software Reset, or EEPROM Profile Recollection */

   /* Configure the ACU ETC Driver */
   etc_set_autorate(astA);
   etc_set_max_rate(perB);
   /* Note: etc_set_hardware_type() configures the TX level, so save the
      current tx level (andI) and use it later */
   tx_level = andI;
   etc_set_hardware_type(astB);
   etc_set_tx_level(tx_level);
}

/****************************************************************************
/
/       Routine:            acu_ETC_enabled
/
/       Author:             RSA
/
/       Creation Date:             
/
/       Description:        This routine is called to verify that ETC is
/                           running (enabled for the current call).  
/
/       Input Parameters:   None
/
/       Output Parameters:  ubyte ETC enabled
/                   0 (FALSE)   = ETC is NOT enabled
/                   1 (TRUE)    = ETC is enabled
/
/       Global Variables Changed:  None
/
/       Users:                     
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:        
/       Reason:         
/
*****************************************************************************/
ubyte acu_ETC_enabled(void)
{
   if (andF == ETC_MODE__MOBILE || andF == ETC_MODE__PSTN)
      return(TRUE);
   else
      return(FALSE);
}

/****************************************************************************
/
/       Routine:            acu_ETC_init_modem
/
/       Author:             RSA
/
/       Creation Date:             
/
/       Description:        This routine serves as an accessory to the standard
/                           modem task initialization interface.  It's two
/                           functions are to act as the stimulus that the
/                           physical link should be performed per the ETC
/                           specification, and to initialize the Modem Task with
/                           the current ETC specific parameters.
/           
/                           This routine does not consider any standard physical
/                           link parameters such as call direction, DCE rates,
/                           timing values, and clocking. 
/
/       Input Parameters:   None
/
/       Output Parameters:  None
/
/       Global Variables Changed:  None
/
/       Users:                     
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:        
/       Reason:         
/
*****************************************************************************/
void acu_ETC_init_modem(void)
{
   /* Pass in ETC parameters to the modem task thereby requesting the
      physical handshake be done per ETC. */
   modem_ETC_connect(acu_etc_tx_level,
      acu_etc_hw_type,
      acu_etc_tx_adjust,
      astA,
      modem_mode,
      calling_tone,
      (ubyte)sr14.originate_flag,
      automode,
      s[7]*100,
      s[9],
      s[10]);
}

/****************************************************************************
/
/       Routine:            acu_ETC_and_F
/
/       Author:             RSA
/
/       Creation Date:             
/
/       Description:        Called by the ACU to take action after a parsed
/                           "AT&F" command.
/
/                           The ETC "AT&F" command is used to enable and
/                           disable ETC.
/
/       Input Parameters:   ubyte AT&F parameter
/                   0 = Disable ETC
/                   5 = Enable Mobile ETC
/                   6 = Enable PSTN ETC
/
/       Output Parameters:  None
/
/       Global Variables Changed:  None
/
/       Users:                     
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:        
/       Reason:         
/
*****************************************************************************/
void acu_ETC_and_F(ubyte parm)
{
   switch (parm)
   {
      case 0:
      default:
         /* Disable ETC and EXIT routine */
         andF = ETC_MODE__DISABLE;
         return;

      case 5:
         /* ETC is Enabled! */
         andF = ETC_MODE__MOBILE;

         /* Configure the ETC Cellular hardware (and therefore power levels)
            for an ETC-Mobile modem.  Per ETC, mobile default is Motorola
            RJ11 adapter box.  But we should run the auto-hardware detect
            mechanism, IMHO.*/
         etc_set_hardware_type(ETC_HW__MOTO_RJ11);

         /* Mobiles modems run ETC Autorating strapped to start at 9600 */
         etc_set_autorate(AUTORATE_9600);
         break;
      
      case 6:
         /* ETC is Enabled! */
         andF = ETC_MODE__PSTN;

         /* Configure the ETC hardware (and therefore power levels)
            for ETC-PSTN */
         etc_set_hardware_type(ETC_HW__PSTN);

         /* PSTN modems run ETC Autorating strapped to start at MAX rate */
         etc_set_autorate(AUTORATE_MAX);
         break;
   }

   /* Configure additional ETC parameters for ETC enabled... */

   /* Use all available DCE speeds */
   etc_set_max_rate(ETC_MAXRATE_DEFAULT);

   /* Configure non-ACU-ETC parameters for ETC (ie. S-Registers, V.42 data) */
   etc_config_acu_parms();
}

/****************************************************************************
/
/       Routine:            etc_set_tx_level
/
/       Author:             RSA
/
/       Creation Date:             
/
/       Description:        Called by the ACU to take action after a parsed
/                           "AT&I" command.
/
/                           The ETC "AT&I" command is used to set the modem's
/                           transmit level.
/
/       Input Parameters:   ubyte AT&I parameter
/                10-25 = Set Transmit Level in -dBm
/                99 = Enable Auto Transmit Level algorithm
/
/       Output Parameters:  None
/
/       Global Variables Changed:  None
/
/       Users:                     
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:        
/       Reason:         
/
*****************************************************************************/
void etc_set_tx_level(ubyte parm)
{
   /* Configure the AT&I command with the power level (for AT&V visial
      dispaly) */
   andI = parm;

   if ((parm >= 10) && (parm <= 25))
   {
      acu_etc_tx_adjust = FALSE;
      acu_etc_tx_level = parm;
   }
   else if (parm == 99)
   {
      acu_etc_tx_adjust = TRUE;
      acu_etc_tx_level = ETC_TXLVL__PSTN_DEFAULT;
   }
}

/****************************************************************************
/
/       Routine:            etc_set_max_rate
/
/       Author:             RSA
/
/       Creation Date:             
/
/       Description:        Called by the ACU to take action after a parsed
/                           "AT%B" command.
/
/                           The "AT%B" command is used to set the modem's
/                           maximum V.32bis DCE rate.
/
/       Input Parameters:   ubyte max speed
/                                   5 (BPS4800)  = 4800
/                                   6 (BPS7200)  = 7200
/                                   7 (BPS9600)  = 9600
/                                   8 (BPS12000) = 12000
/                                   9 (BPS14400) = 14400
/
/       Output Parameters:  None
/
/       Global Variables Changed:  None
/
/       Users:                     
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:        
/       Reason:         
/
*****************************************************************************/
void etc_set_max_rate(ubyte parm)
{
   switch (parm)
   {
      case BPS4800:
         perB = BPS4800;
         break;

      case BPS7200:
         perB = BPS7200;
         break;

      case BPS9600:
         perB = BPS9600;
         break;

      case BPS12000:
         perB = BPS12000;
         break;

      default:
      case BPS14400:
         perB = BPS14400;
         break;
   }

   /* NOTE: This command maps to Hayes compatible S-register 37 for max DCE
      rate selection */
   etc_set_max_DCE_rate();
}

/****************************************************************************
/
/       Routine:            etc_set_autorate
/
/       Author:             RSA
/
/       Creation Date:             
/
/       Description:        Called by the ACU to take action after a parsed
/                           "AT*A" command.
/
/                           The "AT*A" command is used to set the modem's
/                           ETC V.32bis Autorate level.
/
/       Input Parameters:   ubyte AT*A parameter
/                             0 = Disable ETC Autorate
/                             1 = Enable ETC Autorating, start at max DCE Speed
/                             2 = Enable ETC Autorating, start at 4800 BPS
/                             3 = Enable ETC Autorating, start at 9600 BPS
/
/       Output Parameters:  None
/
/       Global Variables Changed:  None
/
/       Users:                     
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:        
/       Reason:         
/
*****************************************************************************/
void etc_set_autorate(ubyte parm)
{
   /* Autorate is a parameter passed to the modem task */
   /* Bounds checking was already done by the parser */
   switch (parm)
   {
      case 0:
         astA = AUTORATE_DISABLE;
         break;

      case 1:
      default:
         astA = AUTORATE_MAX;
         break;

      case 2:
         astA = AUTORATE_9600;
         break;

      case 3:
         astA = AUTORATE_4800;
         break;
   }
}

/****************************************************************************
/
/       Routine:            etc_set_hardware_type
/
/       Author:             RSA
/
/       Creation Date:             
/
/       Description:        Called by the ACU to take action after a parsed
/                           "AT*B" command.
/
/                           The "AT*B" command is used to set the modem's
/                           ETC hardware configuration.
/
/       Input Parameters:   ubyte AT*B parameter
/                0 = PSTN modem (default)
/                1 = Unknown (run auto-detect if available)
/
/                5 = Direct connect: AT&T 3610
/                6 = Direct connect: AT&T 3760
/                7 = Direct connect: AT&T 3730
/                8 = Direct connect: Nokia 12/PT128
/                9 = Direct connect: Technophone PC415
/               10 = Direct connect: NEC P110/P120
/               11 = Direct connect: OKI 1150
/               12 = Direct connect: OKI 900
/               13 = Direct connect: Ericsson/GE
/            14-19 = Direct connect: Reserved for future types
/
/               20 = RJ11 Adapter: Motorola Cellular Connection
/               21 = RJ11 Adapter: Spectrum Cellular AXCELL
/            22-29 = RJ11 Adapter: Reserved for future types
/
/               30 = Modem Pool: Ericsson base equipment
/               31 = Modem Pool: Motorola base equipment
/               32 = Modem Pool: AT&T base equipment
/            33-39 = Modem Pool: Reserved for future types
/
/       Output Parameters:  None
/
/       Global Variables Changed:  None
/
/       Users:                     
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:        
/       Reason:         
/
*****************************************************************************/
void etc_set_hardware_type(ubyte parm)
{
   /* This routine configures ETC, but it doesn't enable it */
   astB = parm;

   /* If user seleceted auto detect, run the auto detect function */
   if (parm == ETC_HW__UNKNOWN)
   {
      astB = modem_get_cellular_hardware();

      /* If the cellular hardware is STILL unknown, use ETC mobile default
         of Motorola RJ11 adapter box (per ETC) */
      if (astB == ETC_HW__UNKNOWN)
         astB = ETC_HW__MOTO_RJ11;
   }

   /* First check the PSTN modem */
   if (astB == ETC_HW__PSTN)
   {
      /* Set the hardware type */
      acu_etc_hw_type = ETC_MT__PSTN;
   
      /* Run Cellular Transmit Level Autoadjust for PSTN modems */
      etc_set_tx_level(ETC_TXLVL__AUTO);
      return;
   }

   /* Now check the Mobile modems... */

   /* Get propper TX level per ETC */
   switch (astB)
   {
      case ETC_HW__ATT_3610:          /* Direct connect: AT&T 3610 */
         acu_etc_hw_type = ETC_MT__DIRECT;
         acu_etc_tx_level = ETC_TXLVL__20DBM;
         break;

      case ETC_HW__ATT_3760:          /* Direct connect: AT&T 3760 */
         acu_etc_hw_type = ETC_MT__DIRECT;
         acu_etc_tx_level = ETC_TXLVL__13DBM;
         break;

      case ETC_HW__ATT_3730:          /* Direct connect: AT&T 3730 */
         acu_etc_hw_type = ETC_MT__DIRECT;
         acu_etc_tx_level = ETC_TXLVL__8DBM;
         break;

      case ETC_HW__NOKIA12_PT128:     /* Direct connect: Nokia 12/PT128 */
      case ETC_HW__TECH_PC415:        /* Direct connect: Technophone PC415 */
         acu_etc_hw_type = ETC_MT__DIRECT;
         acu_etc_tx_level = ETC_TXLVL__3DBM;
         break;

      case ETC_HW__NEC_P110_P120:     /* Direct connect: NEC P110/P120 */
         acu_etc_hw_type = ETC_MT__DIRECT;
         acu_etc_tx_level = ETC_TXLVL__20DBM;
         break;

      case ETC_HW__OKI1150:           /* Direct connect: OKI 1150 */
         acu_etc_hw_type = ETC_MT__DIRECT;
         acu_etc_tx_level = ETC_TXLVL__13DBM;
         break;

      case ETC_HW__OKI900:            /* Direct connect: OKI 900 */
         acu_etc_hw_type = ETC_MT__DIRECT;
         acu_etc_tx_level = ETC_TXLVL__8DBM;
         break;

      case ETC_HW__ERICSSON_GE:       /* Direct connect: Ericsson/GE */
         acu_etc_hw_type = ETC_MT__DIRECT;
         acu_etc_tx_level = ETC_TXLVL__10DBM;
         break;

      default: /* Per ETC default mobile modem is the Motorola RJ11 adapter */
      case ETC_HW__MOTO_RJ11: /* RJ11 Adapter: Motorola Cellular Connection */
         acu_etc_hw_type = ETC_MT__RJ11;
         acu_etc_tx_level = ETC_TXLVL__16DBM;
         break;

      case ETC_HW__AXCELL_RJ11: /* RJ11 Adapter: Spectrum Cellular AXCELL */
         acu_etc_hw_type = ETC_MT__RJ11;
         acu_etc_tx_level = ETC_TXLVL__10DBM;
         break;

      case ETC_HW__ERICSSON_POOL: /* Modem Pool: Ericsson base equipment */
      case ETC_HW__MOTO_POOL:     /* Modem Pool: Motorola base equipment */
         acu_etc_hw_type = ETC_MT__MODEM_POOL;
         acu_etc_tx_level = ETC_TXLVL__23DBM;
         break;

      case ETC_HW__ATT_POOL:      /* Modem Pool: AT&T base equipment */
         acu_etc_hw_type = ETC_MT__MODEM_POOL;
         acu_etc_tx_level = ETC_TXLVL__20DBM;
         break;
   } /* switch */

   /* Mobiles run with fixed TX levels.  Configure the &I command with the
      fixed power level (for AT&V visial dispaly) */
   acu_etc_tx_adjust = FALSE;
   andI = acu_etc_tx_level;
}

