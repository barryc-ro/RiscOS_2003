/****************************************************************************
/
/   Copyright 1988,1989,1990,1991,1992,1993,1994. All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.  The information contained herein is solely
/   for the use of RSA.
/
/       File:           ac00tab1.c
/
/       Module Version: ACU 4.02
/
/       Function:       This file contains initialization tables for the ACU
/                       code.
/
/       Product:        ACU core code. V.32 modem with software echo and no
/                       DIRECT mode.
/
/       History:        ac00tab.c v3.90
/                       ac00tab.c v3.91
/                       ac00tab.c v3.92
/                       ac00tab.c v3.93
/                       ac00tab.c v3.95
/                       ac00tab.c v3.96
/
/   	  Created:        10/8/91
/                       12/04/91
/                       1/21/92
/                       3/10/92
/                       1/12/93
/
/       ---------------------------------------------------------
/       -                   Modifications                       -
/       ---------------------------------------------------------
/
/       Author & Date:	RSA
/       Description:
/       Reason:
/
/       Author & Date:  RSA/keh 7/1/94
/       Description:    Add support for ETC commands in factory default list
/                       and AT&V display lists.
/       Reason:         Add ETC support to core ACU.
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
/* start change 7/1/94 keh => add ACU ETC driver variable prototypes */
#include "acu_edef.h"       /* ACU ETC defines */
/* end change 7/1/94 keh => add ACU ETC driver variable prototypes */

/*	Code version number. Needs to be changed if the order of the variables
	stored to EEprom change.
*/

/* This array is accessed by the modem task; Keep its contants in RAM instead */
/* of the PARSE page so it can be accessed directly */
ubyte const version_num = 13;

ubyte * const srptr[NUM_S_REGS] = {
		&s[0],			&s[1],
		&s[2],			&s[3],
		&s[4],			&s[5],
		&s[6],			&s[7],
		&s[8],			&s[9],
		&s[10], 		&s[11],
		&s[12], 		&s[13],
		(ubyte *)&sr14, &s[15],
		(ubyte *)&sr16, &s[17],
		&s[18], 		&s[19],
		&s[20], 		(ubyte *)&sr21,
		(ubyte *)&sr22, (ubyte *)&sr23,
		&s[24], 		&s[25],
		&s[26], 		(ubyte *)&sr27,
		&s[28], 		&s[29],
		&s[30], 		&s[31],
		&s[32], 		&s[33],
		&s[34], 		&s[35],
		&s[36], 		&s[37],
		&s[38], 		&s[39],
		&s[40], 		&s[41],
		&s[42], 		&s[43],
		&s[44], 		&s[45],
		&s[46], 		&s[47],
		&s[48], 		&s[49],
		&s[50], 		&s[51],
		&s[52], 		&s[53],
		&s[54], 		&s[55],
		&s[56], 		&s[57],
		&s[58], 		&s[59],
		&s[60], 		&s[61],
		&s[62], 		&s[63],
		&s[64], 		&s[65],
		&s[66], 		&s[67],
		&s[68], 		&s[69],
		&s[70], 		&s[71],
		&s[72], 		&s[73],
		&s[74], 		&s[75],
		&s[76], 		&s[77],
		&s[78], 		&s[79],
		&s[80], 		&s[81],
		&s[82], 		&s[83],
		&s[84], 		&s[85],
		&s[86], 		&s[87],
		&s[88], 		&s[89],
		&s[90], 		&s[91],
		&s[92], 		&s[93],
		&s[94], 		&s[95],
		&s[96], 		&s[97],
		&s[98], 		&s[99],
		&s[100],		&s[101],
		&s[102],		&s[103],
		&s[104],		&s[105],
		&s[106],		&s[107],
		&s[108],		&s[109],
		&s[110],		&s[111],
		&s[112],
/* start change 5/15/95 keh => add V.34 */
		&s[113],        (ubyte *)&sr114,
		&s[115],        (ubyte *)&sr116,
		&s[117],        &s[118]
/* end change 5/15/95 keh => add V.34 */
		};

/*	Array of pointers to variables accessed in the routines and_F(),
        store_profile(), and retrieve_profile().  If the variable is to be
        stored in the EEprom be sure to change the define PROFILE_SIZE located
        in the file EExxDEF.H.  May need to change the define VERSION_NUM so
        the EEprom will be updated on powerup. This define is aslo found in
        EExxDEF.H.
*/

ubyte * const variable_addr[NUM_OF_VARIABLES] =
	{
    &s[0],      &s[2],              /* temp_array[0], temp_array[1] */
    &s[6],      &s[7],              /* temp_array[2], temp_array[3] */
    &s[8],      &s[9],              /* temp_array[4], temp_array[5] */
    &s[10],     &s[11],             /* temp_array[6], temp_array[7] */
    &s[12],     (ubyte *)&sr14,     /* temp_array[8], temp_array[9] */
    (ubyte *)&sr16, &s[18],         /* temp_array[10],temp_array[11] */
    (ubyte *)&sr21, (ubyte *)&sr22, /* temp_array[12],temp_array[13] */
    (ubyte *)&sr23, &s[25],         /* temp_array[14],temp_array[15] */
    &calling_tone, (ubyte *)&sr27,  /* -C0, temp_array[16],temp_array[17] */
    &s[30],     &s[37],             /* temp_array[18],temp_array[19] */
/* 22296 shujin */
    &s[33],     &s[91],             /* temp_array[20],temp_array[21] */

    (ubyte *)&char_size, &autofallback,  /* temp_array[22],temp_array[23],%G1 */

/* 22296 shujin */
    &atB.group1,    &s[110],            /* temp_array[24],temp_array[25] */
    &trellis,    &atW,        /* temp_array[26],&U0; w0,temp_array[27] */

    &valueX,    &slA,        /* temp_array[28],x4; temp_array[29],\A3 */
    &perA,	  &slC,          /* temp_array[30],%A013; temp_array[31],\C0 */
    &perC,	  &perE,         /* temp_array[32],%C1;   temp_array[33],%E1 */
    &slG,       &vdtmf,        /* temp_array[34],temp_array[35] */
    &bps_adjust,	&slK,      /* temp_array[36],\J0;temp_array[37],\K5 */
    &slL,       &slN,               /* temp_array[38],temp_array[39] */
    &slQ,	      &slX,              /* temp_array[40],temp_array[41] */

/*MRM22696*/
/*N command is only for automode enable diable*/

    &acu_parity,       &N,    /* temp_array[42],\V0;temp_array[43],N */
    &hyJ,       &quH,               /* temp_array[44],temp_array[45] */
    &quO,       &acu_data_bits,     /* temp_array[46],temp_array[47] */
    &acu_stop_bits, &dte_baud,      /* temp_array[48],temp_array[49] */


/* 22296 shujin */
    &s[98],                                     /*  temp_array[50] */
    &s[92],                          /* temp_array[51] */
    &v32_retrain, &s[108],       /* temp_array[52],&B1;temp_array[53], */
    &s[112],   &andK,      		/* temp_array[54],temp_array[55] */
    &s[109], &atB.group2,       /* temp_array[56],temp_array[57] */

    &atB.group3, &atB.group4,       /* temp_array[58],temp_array[59] */
    &atB.group5, &atB.group6,       /* temp_array[60],temp_array[61] */
    &atB.group7, &atB.group8,       /* temp_array[62],temp_array[63] */
    &atB.group9, &atB.group10,      /* temp_array[64],temp_array[65] */
/* start change keh 5/15/95 => add v.34,v.8 */
    &atB.group11, &atB.group12,     /* temp_array[66],temp_array[67] */
    &atB.group13, &atB.group14,     /* temp_array[68],temp_array[69] */
    &atB.group15, &atB.group16,     /* temp_array[70],temp_array[71] */
/* end   change keh 5/15/95 => add v.34,v.8 */
/*    &trellis,   &break_length,       temp_array[70],temp_array[71] */

    &hyC,                  /* temp_array[72]	*/
    &detect_disconnect_tone,        /* temp_array[73]	*/
    &link_negot, &prnM,             /* temp_array[74],temp_array[75] */
    &hyK,       &hyQ,               /* temp_array[76],temp_array[77] */

/*22296 */
    &quM,       &break_length,      /* temp_array[78],temp_array[79] */

/* start change 7/1/94 keh => add ETC to the list */
    &andF,      /* temp_array[80] */
    &andI,      /* temp_array[81] */
    &perB,      /* temp_array[82] */
    &astA,      /* temp_array[83] */
    &astB,      /* temp_array[84] */
/* end change 7/1/94 keh => add ETC to the list */
/* start change 5/15/95 keh => add V.34 */
	 &s[113],        (ubyte *)&sr114,   /* temp_array[85] temp_array[86] */
	 &s[115],        (ubyte *)&sr116,   /* temp_array[87] temp_array[88] */
	 &s[117],        &s[118],           /* temp_array[89] temp_array[90] */
/* end change 5/15/95 keh => add V.34 */

/*	Start of variables that have defaults but are not stored in the EEprom	*/
/* start change 7/1/94 keh => add advance temp array[#]s for ETC addtions */
    &s[1],      &s[3],              /* temp_array[91],temp_array[92] */
    &s[4],      &s[5],              /* temp_array[93],temp_array[94] */
    &make_time, &break_time,        /* temp_array[95],temp_array[96] */
    &operating_mode,                /* temp_array[97]	 */
    &current_register,              /* temp_array[98]	 */
    &s[19],     &s[20],              /* temp_array[99],temp_array[100] */
    &s[95]							/* temp_array[101] */
/* end change 7/1/94 keh => add advance temp array[#]s for ETC addtions */

	};

/*	Table of ranges for the S registers;
	1st value defines the number of ranges associated with each register,
	After that are the ranges defined for each register.
*/
/*	S-register values for V.22bis modem.	*/
#if CONFIG_MODE == 0
#define MAX_S37     6
#define MIN_S108    2
#define MAX_S108    2
#define MIN_S109    0
#define MAX_S109    0
#define MIN_S110    0
#define MAX_S110    0
/* start change keh 5/15/95 => add v.34,v.8 */
#endif

/*	S-register values for V.32 modem.	*/
#if CONFIG_MODE == 1
#define MAX_S37     9
#define MIN_S108    2
#define MAX_S108    2
#define MIN_S109    10
#define MAX_S109    10
#define MIN_S110    0
#define MAX_S110    0
#endif

/*	S-register values for V.32bis modem.	*/
#if CONFIG_MODE == 2
#define MAX_S37     11
#define MIN_S108    0
#define MAX_S108    3
#define MIN_S109    0
#define MAX_S109    255
#define MIN_S110    0
#define MAX_S110    2
#endif

/* start change keh 5/15/95 => add v.34,v.8 */
/*	S-register values for V.34 modem.	*/
#if CONFIG_MODE == CFG_V34 || CONFIG_MODE == CFG_VX2
/*mrm3796*/
#if 0
#define MAX_S37     S37_28800_BPS
#endif
#if MODEM_X2_MODE == 1
#define MAX_S37     S37_57333_BPS
#else
#define MAX_S37     S37_33600_BPS
#endif
#define MIN_S108    0
#define MAX_S108    3
#define MIN_S109    0
#define MAX_S109    255
#define MIN_S110    0
#define MAX_S110    2
#endif
/* end change keh 5/15/95 => add v.34,v.8 */

const ubyte s_range[][NUM_RANGES] =
		       {{1,0,255}, {1,0,255}, {1,0,255},	  /* s0-s2 */
		       {1,0,127}, {1,0,127}, {1,0,127}, 	/* s3-s5 */
		       {1,2,255}, {1,1,255}, {1,0,255}, 	/* s6-s8 */
		       {1,1,255}, {1,1,255}, {1,50,255},	/* s9-s11*/
		       {1,0,255}, {1,0,0},   {0,0,0},		/* s12-s14*/
		       {1,0,0},   {0,0,0},   {1,0,0},		/* s15-s17*/
		       {1,0,255}, {1,0,255},   {1,0,255},	/* s18-s20*/
		       {0,0,0},   {0,0,0},   {0,0,0},		/* s21-s23*/
		       {1,0,0},   {1,0,255}, {1,0,255}, 	/* s24-s26*/
		       {0,0,0},   {1,0,0},   {1,0,0},		/* s27-s29*/
		       {1,0,90},  {1,0,0},   {1,0,0},		/* s30-s32*/
		       {1,0,90},   {1,0,0},   {1,0,0},	/* s33-s35, 2/23/96 shujin*/
		       {1,0,0},   {1,0,MAX_S37},   {1,0,0},	/* s36-s38*/
		       {1,0,0},   {1,0,0},   {1,0,0},		/* s39-s41*/
		       {1,0,0},   {1,0,0},   {1,0,0},		/* s42-s44*/
		       {1,0,0},   {1,0,0},   {1,0,0},		/* s45-s47*/
		       {1,0,0},   {1,0,0},   {1,0,0},		/* s48-s50*/
		       {1,0,0},   {1,0,0},   {1,0,0},		/* s51-s53*/
		       {1,0,0},   {1,0,0},   {1,0,0},		/* s54-s56*/
		       {1,0,0},   {1,0,0},   {1,0,0},		/* s57-s59*/
		       {1,0,0},   {1,0,0},   {1,0,0},		/* s60-s62*/
		       {1,0,15},  {1,0,0},   {1,0,0},		/* s63-s65*/
		       {1,0,0},   {1,0,0},   {1,0,0},		/* s66-s68*/
		       {1,0,0},   {1,0,0},   {1,0,0},		/* s69-s71*/
		       {1,0,0},   {1,0,0},   {1,0,0},		/* s72-s74*/
		       {1,0,0},   {1,0,0},   {1,0,0},		/* s75-s77*/
		       {1,0,0},   {1,0,0},   {1,0,0},		/* s78-s80*/
		       {1,0,0},   {1,0,0},   {1,0,0},		/* s81-s83*/
		       {1,0,0},   {1,0,0},   {1,0,0},		/* s84-s86*/
		       {1,0,0},   {1,0,0},   {1,0,0},		/* s87-s89*/
/*22296 shujin*/
		       {1,0,255},   {1,0,15},  {1,0,0},		/* s90-s92*/

		       {1,0,0},   {1,0,0},   {1,0,255}, 	/* s93-s95*/
		       {1,0,0},   {1,0,0},   {1,0,255}, 	/* s96-s98*/
		       {1,0,0},   {1,0,0},   {1,0,255}, 	/* s99-s101*/
		       {1,0,0},   {1,0,0},   {1,0,255}, 	/* s102-s104*/
		       {1,0,0},   {1,0,0},   {1,0,255}, 	/* s105-s107*/
		       {1,MIN_S108,MAX_S108},			    /* s108     */
		       {1,MIN_S109,MAX_S109},			    /* s109     */
		       {1,MIN_S110,MAX_S110},			    /* s110     */
		       {1,0,0},   {1,0,14},			        /* s111-s112*/
/* start change keh 5/8/95 => add v.34,v.8 */
		       {1,0,0x0F}, {1,0,0xEF}, {1,0,0x3F}, 	/* s113-s115*/
		       {1,0,0x0F}, {1,0,0xFF}, {1,0,0x0F} 	/* s116-s118*/
/* end change keh 5/8/95 => add v.34,v.8 */
		     };


/*	Factory default values for V.22bis modem */
#if CONFIG_MODE == 0
#define DEFAULT_S108	2
#define DEFAULT_S109	0
#define DEFAULT_S110	0
#define DEFAULT_V32_RET 0
#define DEFAULT_G6	0
#define DEFAULT_G7	0
#define DEFAULT_G8	0
#define DEFAULT_G9	0
#define DEFAULT_G10	0
/* start change keh 5/15/95 => add v.34,v.8 */
#define DEFAULT_G11        0
#define DEFAULT_G12        0
#define DEFAULT_G13        0
#define DEFAULT_G14        0
#define DEFAULT_G15        0
#define DEFAULT_G16        0

/* start change 7/17/95 - mlc+ */
#define DEFAULT_AUTOFB     0       /* Autofall back disabled */
/* start change 7/17/95 - mlc- */
#define DEFAULT_AUTOMODE   AUTOMODE_NO_V8

/* V.34 specific S-Regs */
#define DEFAULT_S113       0x00
#define DEFAULT_S114       0x00
#define DEFAULT_S115       0x00
#define DEFAULT_S115       0x00
#define DEFAULT_S116       0x00
#define DEFAULT_S117       0x00
#define DEFAULT_S118       0x00
/* end change keh 5/15/95 => add v.34,v.8 */
#endif

/*	Factory default values for V.32 modem */
#if CONFIG_MODE == 1
#define DEFAULT_S108	2
#define DEFAULT_S109	0
#define DEFAULT_S110	0
#define DEFAULT_V32_RET 1
#define DEFAULT_G6	41
#define DEFAULT_G7	0
#define DEFAULT_G8	60
#define DEFAULT_G9	0
#define DEFAULT_G10	0
/* start change keh 5/15/95 => add v.34,v.8 */
#define DEFAULT_G11        0
#define DEFAULT_G12        0
#define DEFAULT_G13        0
#define DEFAULT_G14        0
#define DEFAULT_G15        0
#define DEFAULT_G16        0

/* start change 7/17/95 - mlc+ */
#define DEFAULT_AUTOFB     0       /* Autofall back disabled */
/* start change 7/17/95 - mlc- */
#define DEFAULT_AUTOMODE   AUTOMODE_NO_V8

/* V.34 specific S-Regs */
#define DEFAULT_S113       0x00
#define DEFAULT_S114       0x00
#define DEFAULT_S115       0x00
#define DEFAULT_S115       0x00
#define DEFAULT_S116       0x00
#define DEFAULT_S117       0x00
#define DEFAULT_S118       0x00
/* end change keh 5/15/95 => add v.34,v.8 */
#endif


/*	Factory default values for V.32bis modem */
#if CONFIG_MODE == 2
#define DEFAULT_S108	1
#define DEFAULT_S109	62
#define DEFAULT_S110	2
#define DEFAULT_V32_RET 1
#define DEFAULT_G6	41
#define DEFAULT_G7	52
#define DEFAULT_G8	60
#define DEFAULT_G9	70
#define DEFAULT_G10	75
/* start change keh 5/15/95 => add v.34,v.8 */
#define DEFAULT_G11        0
#define DEFAULT_G12        0
#define DEFAULT_G13        0
#define DEFAULT_G14        0
#define DEFAULT_G15        0
#define DEFAULT_G16        0

/* start change 7/17/95 - mlc+ */
#define DEFAULT_AUTOFB     0       /* Autofall back disabled */
/* start change 7/17/95 - mlc- */
#define DEFAULT_AUTOMODE   AUTOMODE_NO_V8

/* V.34 specific S-Regs */
#define DEFAULT_S113       0x00
#define DEFAULT_S114       0x00
#define DEFAULT_S115       0x00
#define DEFAULT_S115       0x00
#define DEFAULT_S116       0x00
#define DEFAULT_S117       0x00
#define DEFAULT_S118       0x00
/* end change keh 5/15/95 => add v.34,v.8 */

#endif
/* start change keh 5/15/95 => add v.34,v.8 */
/*	Factory default values for V.34 modem */
#if CONFIG_MODE == CFG_V34 || CONFIG_MODE == CFG_VX2
#define DEFAULT_S108       2
#define DEFAULT_S109       255
#define DEFAULT_S110       2
#define DEFAULT_V32_RET    1
#define DEFAULT_G6         41
#define DEFAULT_G7         52
#define DEFAULT_G8         60
#define DEFAULT_G9         70
#define DEFAULT_G10        75

/* start change 7/17/95 - mlc+ */
#define DEFAULT_AUTOFB     1       /* Autofall back enabled */
/* start change 7/17/95 - mlc- */
#define DEFAULT_AUTOMODE   AUTOMODE_NO_V8

/* ATB groups */
#define DEFAULT_G11        80
#define DEFAULT_G12        85
#define DEFAULT_G13        90
#define DEFAULT_G14        95
#define DEFAULT_G15        100
#define DEFAULT_G16        105

/* V.34 specific S-Regs */
#define DEFAULT_S113       0x0F
#define DEFAULT_S114       0x7F
#define DEFAULT_S115       0x3F
#define DEFAULT_S115       0x3F
#define DEFAULT_S116       0x00
#define DEFAULT_S117       0xFF
#define DEFAULT_S118       0x0F
#endif
/* end change keh 5/15/95 => add v.34,v.8 */

#if CONFIG_MNP10 == 1 || CONFIG_MODE == 1 || CONFIG_MODE == 2
#define DEFAULT_S7	90
#else
#define DEFAULT_S7	60	/*mrm 2/12/96*/
#endif

#if CONFIG_MNP10 == 1
#define DEFAULT_MNP10	1
#else
#define DEFAULT_MNP10	0
#endif

const ubyte factory_defaults[DEFAULT_SIZE] = {
   0,                  /*	s[0]	*/
   43,                 /*	s[2]	*/
   2,                  /*	s[6]	*/
   DEFAULT_S7,         /*	s[7]	*/
   2,                  /*	s[8]	*/
   6,                  /*	s[9]	*/
   14,                 /*	s[10]	*/
   70,                 /*	s[11]	*/	 /* 2/23/96 shujin */
   50,                 /*	s[12]	*/
/*mrm81496*/
/*change the default to tone dial*/

/* 0xaa,*/             /*  *srptr[14]	*/
   0x8a,               /*  *srptr[14]	*/
   0x00,               /*  *srptr[16]	*/
   0,                  /*	s[18]	*/
   0x30,               /*  *srptr[21]	*/
   0x76,               /*  *srptr[22]	*/
   0x0F,               /*  *srptr[23]	*/
   5,                  /*	s[25]	*/
/*mrm81496*/
/*calling tone disabled as default*/
/*mrm32196*/
/*calling tone enabled as default*/
   0,                  /*	calling_tone,2/23/96 shujin */
   0x40,               /*  *srptr[27]	*/
   0,                  /*	s[30]	*/
   0,                  /*	s[37]	*/

/* 5/1/96 shd, old 10 */
	0,                  /*	s[33]	*/

   9,                  /*	s[91]	*/
   2,                  /* char_size	*/
   DEFAULT_AUTOFB,     /*    perG/autofallback */
   1,                  /* ATB group 1	 */

   DEFAULT_S110,       /*	s[110]	*/

/* 22296 shujin */
   0,                  /*	trellis	*/

   0,                  /*	atW	    */
   4,                  /*  valueX	*/
   3,                  /*	slA	    */
   13,                 /*	perA	*/
   0,                  /*	slC	    */
   1,                  /*	perC	*/
   1,                  /*	perE	*/
   0,                  /*	slG	    */
   1,                  /*	vdtmf   */
   0,                  /* bps_adjust	*/
   5,                  /*	slK	    */
   0,                  /*	slL	    */
   3,                  /*	slN	    */
   3,                  /*	slQ	    */
   0,                  /*	slX	    */
/*22296 shujin */
   2,                  /* acu_parity	*/


/*MRM22696*/
/*N command is only for auto mode enable and disable*/

/*V8 mode automaticly gets disabled when not in v34 mode*/

/* DEFAULT_AUTOMODE,*/ /* =1, automode	+ V.8 */


   1, 					  /* N, automode */

/* end change keh 5/15/95 => add v.34,v.8 */
   1,                  /*	hyJ	    */
   3,                  /*	quH	    */
   32,                 /*	quO	    */
   0,                  /* acu_data_bits*/
   0,                  /* acu_stop_bits*/
   12,                 /* dte_baud	*/

/* 22296 shujin */
   0,                  /*     */
   0x00,               /*  *srptr[95]	*/
   DEFAULT_V32_RET,    /* v32_retrain	*/
   DEFAULT_S108,       /*	s[108]	*/
   0,                  /* s[112] */
   3,                  /* andK, old break_length */
   DEFAULT_S109,       /*	s[109]	*/
   0,                  /* ATB group 2	*/
   16,                 /* ATB group 3	 */
   0,                  /* ATB group 4	*/
   30,                 /* ATB group 5	*/
   DEFAULT_G6,         /* ATB group 6	*/
   DEFAULT_G7,         /* ATB group 7	*/
   DEFAULT_G8,         /* ATB group 8	*/
   DEFAULT_G9,         /* ATB group 9	*/
   DEFAULT_G10,        /* ATB group 10 */
/* start change keh 5/15/95 => add v.34,v.8 */
   DEFAULT_G11,       /* ATB group 11 */
   DEFAULT_G12,       /* ATB group 12 */
   DEFAULT_G13,       /* ATB group 13 */
   DEFAULT_G14,       /* ATB group 14 */
   DEFAULT_G15,       /* ATB group 15 */
   DEFAULT_G16,       /* ATB group 16 */
/* end change keh 5/15/95 => add v.34,v.8 */

/*mrm32196*/
/*calling tone enabled as default*/

   1,                  /* hyC */
   1,                  /* detect_disconnect_tone	*/
   0,                  /* link_negot	 */
   0,                  /* prnM     */
   DEFAULT_MNP10,      /* hyK	    */
   2,                  /* hyQ	    */
   DEFAULT_MNP10,      /* quM	    */
   5,                  /* break_length, old andK     */
/* start change 7/1/94 keh => add ETC to the list */
   ETC_MODE__DISABLE,  /* andF (etc mode) == DISABLED */
   ETC_TXLVL__AUTO,    /* andI (etc power level) == Auto Adjust */
   ETC_MAXRATE_DEFAULT, /* perB (etc max DCE rate) */
   AUTORATE_MAX,       /* astA (etc Autorate) == Enabled, start at MAX */
   ETC_HW__UNKNOWN,    /* astB (etc hardware) == unkown */
/* end change 7/1/94 keh => add ETC to the list */
/* start change keh 5/15/95 => add v.34,v.8 */
   DEFAULT_S113,       /* V.34 SReg 113 */
   DEFAULT_S114,       /* V.34 SReg 114 */
   DEFAULT_S115,       /* V.34 SReg 115 */
   DEFAULT_S116,       /* V.34 SReg 116 */
   DEFAULT_S117,       /* V.34 SReg 117 */
   DEFAULT_S118,       /* V.34 SReg 118 */
/* end change keh 5/15/95 => add v.34,v.8 */
   0,                  /*	s[1]	*/
   13,                 /*	s[3]	*/
   10,                 /*	s[4]	*/
   8,                  /*	s[5]	*/
   US_MAKE_TIME,       /* make_time    */
   US_BREAK_TIME,	    /* break_time	*/
   2,                  /* operating_mode */
   0,                  /* current_register */
   0,                  /* s[19] */
   0,                  /* s[20] */
  10,			 	   /* s[92] */
   0	                /* power up profile */
};

/* Arrays used for the &V command.  The information in the arrays indicate to
   send_andV_string() how the display should look.  They are encoded as follows:
	0 - Exit routine
	1 - will retrieve a value from the address array and sent 1 ASCII
	    character to the terminal.
	2 - will retrieve a value from the address array and send 2 ASCII
	    characters to the terminal.
	3 - will retrieve a value from the address array and send 3 ASCII
	    characters to the terminal.
	4 - will send CR(s[3]) and LF(s[4]) to the terminal.
	5 - will check sr14.pulse to determine if a 'P' or 'T' should be sent to
	    the terminal.
	6 - will indicate that the value to be sent back is located in a bit
	    mapped register, therefore it needs to be translated into a byte
	    value. This is followed by the following values:
		14 - indicates S14
		21 - indicates S21
		22 - indicates S22
		23 - indicates S23
		27 - indicates S27
		95 - indicates S95
	7 - End of current string. Increment profile pointer.
	8 - Command entry absent from display. Increment profile pointer and
	    address array offset.
	ASCII character - Send to the terminal.
** start change keh 7/1/94 => add new type for ETC **
	9 - Verbose baud rate from ACU single char baud rate type.
      Will send a V.32bis rate in ASCII characters to the terminal.  This is
      used for the AT%B command which sets the max V.32bis DCE rate, and has
      the form: AT%B7200
** end change keh 7/1/94 => add new type for ETC **
*/

const ubyte E_ptr[]    = {'E',6,14,1,' ',7};
const ubyte L_ptr[]    = {'L',6,22,0,' ',7};
const ubyte M_ptr[]    = {'M',6,22,2,' ',7};
const ubyte N_ptr[]    = {'N',1,' ',7};
const ubyte P_ptr[]    = {5,' ',7};
const ubyte Q_ptr[]    = {'Q',6,14,2,' ',7};
const ubyte V_ptr[]    = {'V',6,14,3,' ',7};
const ubyte W_ptr[]    = {'W',1,' ',7};
const ubyte X_ptr[]    = {'X',1,' ',7};
const ubyte Y_ptr[]    = {'Y',6,21,7,' ',7};
const ubyte ANDC_ptr[] = {'&','C',6,21,5,' ',7};
const ubyte ANDD_ptr[] = {'&','D',6,21,3,' ',7};
const ubyte ANDG_ptr[] = {'&','G',6,23,6,' ',7};
const ubyte ANDJ_ptr[] = {'&','J',6,21,0,' ',7};
const ubyte ANDK_ptr[] = {'&','K',1,' ',7};
const ubyte ANDL_ptr[] = {'&','L',6,27,2,' ',7};
const ubyte ANDP_ptr[] = {'&','P',6,22,7,' ',7};
const ubyte ANDQ_ptr[] = {'&','Q',6,27,0,' ',7};
const ubyte ANDR_ptr[] = {'&','R',6,21,2,' ',7};
const ubyte ANDS_ptr[] = {'&','S',6,21,6,' ',7};

const ubyte ANDX_ptr[] = {'&','X',6,27,4,' ',7};
/*2-20-96 for not display &X0, just delete andx_ptr in pro_addr[] */

const ubyte ANDY_ptr[] = {'&','Y',1,' ',7};
const ubyte SLA_ptr[]  = {'\\','A',1,' ',7};
const ubyte PERA_ptr[] = {'%','A',3,' ',7};
const ubyte SLC_ptr[]  = {'\\','C',1,' ',7};
const ubyte PERC_ptr[] = {'%','C',1,' ',7};
const ubyte PERE_ptr[] = {'%','E',1,' ',7};
const ubyte SLG_ptr[]  = {'\\','G',1,' ',7};
const ubyte PERG_ptr[] = {'%','G',1,' ',7};
const ubyte SLJ_ptr[]  = {'\\','J',1,' ',7};
const ubyte SLK_ptr[]  = {'\\','K',1,' ',7};
const ubyte SLN_ptr[]  = {'\\','N',1,' ',7};
const ubyte SLQ_ptr[]  = {'\\','Q',1,' ',7};
const ubyte SLT_ptr[]  = {'\\','T',3,' ',7};
const ubyte SLV_ptr[]  = {'\\','V',6,95,1,' ',7};
const ubyte SLX_ptr[]  = {'\\','X',1,' ',7};
const ubyte HYC_ptr[]  = {'-','C',1,' ',7};	/* 2/23/96 shujin */
const ubyte HYJ_ptr[]  = {'-','J',1,' ',7};
const ubyte QUH_ptr[]  = {'\"','H',1,' ',7};
const ubyte QUO_ptr[]  = {'\"','O',3,' ',7};
const ubyte B1_ptr[]   = {'B',1,' ',7};

/* 22296 shujin
const ubyte B3_ptr[]   = {'B',2,' ',7};
const ubyte B5_ptr[]   = {'B',2,' ',7};
*/

/* Array definitions for a V.22bis modem */
#if CONFIG_MODE == 0
const ubyte B3_ptr[]   = {'B',2,' ',7};
const ubyte B5_ptr[]   = {'B',2,' ',7};
const ubyte B6_ptr[]   = {8};
const ubyte B8_ptr[]   = {8};
const ubyte ANDB_ptr[] = {8};
const ubyte ANDU_ptr[] = {8};
/* start change 5/15/95 keh => add V.34 */
const ubyte B7_ptr[]   = {8};
const ubyte B9_ptr[]   = {8};
const ubyte B10_ptr[]  = {8};
/* #else */
#elif (CONFIG_MODE == CFG_V32 || CONFIG_MODE == CFG_V32BIS)
/* end change 5/15/95 keh => add V.34 */

/* Array definitions for a V.32bis or V.32 modem */
const ubyte B3_ptr[]   = {'B',2,' ',7};
const ubyte B5_ptr[]   = {'B',2,' ',7};
const ubyte B6_ptr[]   = {'B',2,' ',7};
const ubyte B8_ptr[]   = {'B',2,' ',7};
const ubyte ANDB_ptr[] = {'&','B',1,' ',7};
const ubyte ANDU_ptr[] = {'&','U',1,' ',7};
/* start change 5/15/95 keh => add V.34 */
const ubyte B7_ptr[]   = {8};
const ubyte B9_ptr[]   = {8};
const ubyte B10_ptr[]  = {8};

#else /* CONFIG_MODE == CFG_V34 */
const ubyte ANDB_ptr[] = {'&','B',1,' ',7};
const ubyte ANDU_ptr[] = {'&','U',1,' ',7};
/* end change 5/15/95 keh => add V.34 */

/* 22296 shujin */
const ubyte B3_ptr[]   = {'B',2,' ',7};
const ubyte B5_ptr[]   = {'B',2,' ',7};
const ubyte B6_ptr[]   = {'B',2,' ',7};
const ubyte B7_ptr[]   = {'B',2,' ',7};
const ubyte B8_ptr[]   = {'B',2,' ',7};
const ubyte B9_ptr[]   = {'B',2,' ',7};
const ubyte B10_ptr[]  = {'B',2,' ',7};
const ubyte B11_ptr[]   = {'B',2,' ',7};
const ubyte B12_ptr[]   = {'B',2,' ',7};
const ubyte B13_ptr[]   = {'B',2,' ',7};
const ubyte B14_ptr[]   = {'B',2,' ',7};
const ubyte B15_ptr[]   = {'B',3,' ',7};
const ubyte B16_ptr[]   = {'B',3,' ',7};

#endif

#if CONFIG_MNP10 == 1
const ubyte HYK_ptr[]  = {'-','K',1,' ',7};
const ubyte HYQ_ptr[]  = {'-','Q',1,' ',7};
const ubyte QUM_ptr[]  = {'\"','M',1,' ',7};
const ubyte ASTH_ptr[] = {'*','H',1,' ',7};
const ubyte PRNM_ptr[] = {')','M',1,' ',7};
#else
const ubyte HYK_ptr[]  = {8};
const ubyte HYQ_ptr[]  = {8};
const ubyte QUM_ptr[]  = {8};
const ubyte ASTH_ptr[] = {8};
const ubyte PRNM_ptr[] = {8};
#endif

const ubyte S0_ptr[]   = {'S','0','0',':',3,' ',7};
const ubyte S1_ptr[]   = {'S','0','1',':',3,' ',7};
const ubyte S2_ptr[]   = {'S','0','2',':',3,' ',7};
const ubyte S3_ptr[]   = {'S','0','3',':',3,' ',7};
const ubyte S4_ptr[]   = {'S','0','4',':',3,' ',7};
const ubyte S5_ptr[]   = {'S','0','5',':',3,' ',7};
const ubyte S6_ptr[]   = {'S','0','6',':',3,' ',7};
const ubyte S7_ptr[]   = {'S','0','7',':',3,' ',7};
const ubyte S8_ptr[]   = {'S','0','8',':',3,' ',7};
const ubyte S9_ptr[]   = {'S','0','9',':',3,' ',7};
const ubyte S10_ptr[]  = {'S','1','0',':',3,' ',7};
const ubyte S11_ptr[]  = {'S','1','1',':',3,' ',7};
const ubyte S12_ptr[]  = {'S','1','2',':',3,' ',7};
const ubyte S18_ptr[]  = {'S','1','8',':',3,' ',7};
const ubyte S25_ptr[]  = {'S','2','5',':',3,' ',7};
const ubyte S26_ptr[]  = {'S','2','6',':',3,' ',7};
const ubyte S37_ptr[]  = {'S','3','7',':',3,' ',7};
const ubyte S112_ptr[] = {'S','1','1','2',':',3,' ',7};
/* 22296 shujin*/
const ubyte S30_ptr[]  = {'S','3','0',':',3,' ',7};
const ubyte S33_ptr[]  = {'S','3','3',':',3,' ',7};

/* start change 7/1/94 keh => add ETC to the list AT&V list */

/*	 22296 shujin
const ubyte ANDF_ptr[] = {'&','F',1,' ',7};
const ubyte ANDI_ptr[] = {'&','I',2,' ',7};
const ubyte ASTA_ptr[] = {'*','A',1,' ',7};
const ubyte ASTB_ptr[] = {'*','B',2,' ',7};
const ubyte PERB_ptr[] = {'%','B',9,' ',7};
*/
const ubyte ANDF_ptr[] = {8};
const ubyte ANDI_ptr[] = {8};
const ubyte ASTA_ptr[] = {8};
const ubyte ASTB_ptr[] = {8};
const ubyte PERB_ptr[] = {8};

/* end change 7/1/94 keh => add ETC to the list AT&V list */

const ubyte CRLF_ptr[] = {4,7};
const ubyte END_ptr[]  = {0,7};

const ubyte * const cr_lf_string[2] = {CRLF_ptr, END_ptr};

const ubyte * const current_profile[ANDV_CURRENT_PRO_SIZE] =  {
	B1_ptr,
/*22296 shujin
   B3_ptr,
   B5_ptr,     B6_ptr,
   B7_ptr,     B8_ptr,
   B9_ptr,     B10_ptr,
   B11_ptr,     B12_ptr,
   B13_ptr,     B14_ptr,
   B15_ptr,     B16_ptr,
*/
   E_ptr,
   L_ptr,      M_ptr,
   N_ptr,      P_ptr,
   Q_ptr,      V_ptr,
   W_ptr,      X_ptr,
   Y_ptr,
    ANDC_ptr,   ANDD_ptr,
    ANDF_ptr,   ANDG_ptr,
    ANDI_ptr,   ANDJ_ptr,
    ANDP_ptr,   ANDQ_ptr,
    ANDS_ptr,
    ANDU_ptr,
    ANDY_ptr,

    CRLF_ptr,
    PERA_ptr,   PERB_ptr,
    PERC_ptr,   PERE_ptr,
    PERG_ptr,
    SLA_ptr,    SLC_ptr,
    SLG_ptr,    SLJ_ptr,
    SLK_ptr,    SLN_ptr,
    SLQ_ptr,    SLT_ptr,
    SLX_ptr,
   HYC_ptr,					/* -C0, 2/23/95 shujin */
	HYJ_ptr,    HYK_ptr,
    HYQ_ptr,    QUH_ptr,
    QUM_ptr,    QUO_ptr,
    ASTA_ptr,   ASTB_ptr,
    ASTH_ptr,   PRNM_ptr,

    CRLF_ptr,
    S0_ptr,     S1_ptr,
    S2_ptr,     S3_ptr,
    S4_ptr,     S5_ptr,
    S6_ptr,     S7_ptr,
    S8_ptr,

    CRLF_ptr,
    S9_ptr,
    S10_ptr,    S11_ptr,
    S12_ptr,    S18_ptr,
    S25_ptr,

	 S30_ptr,	 /*2-20-96*/
	 S33_ptr,	 /*2-20-96*/
    S37_ptr,   /*2-20-96 S112_ptr,	*/
    CRLF_ptr,   CRLF_ptr,
    END_ptr
};


ubyte * const current_pro_addr[ANDV_CURRENT_ADD_SIZE] = {
    &atB.group1,

/*22296 shujin */
/* 					&atB.group3,
    &atB.group5,    &atB.group6,
    &atB.group7,   &atB.group8,
    &atB.group9,   &atB.group10,
    &atB.group11,   &atB.group12,
    &atB.group13,   &atB.group14,
    &atB.group15,   &atB.group16,
*/


/*MRM22696*/
/*N command is only for auto mode enable and disable*/

/*V8 mode automaticly gets disabled when not in v34 mode*/



    &N,
    &atW,           &valueX,
    &andF,  &andI,
    & trellis,       &temp_array[0],  /* and_U, and_Y	*/

    &perA,          /* &perC, */
    &perB,&perC,
    &perE,          &autofallback,
    &slA,           &slC,
    &slG,           &bps_adjust,
    &slK,           &slN,
    &slQ,           &s[30],
    &slX,           &calling_tone,		/* 2/23/96 shujin */
    &hyJ,
    &hyK,           &hyQ,
    &quH,           &quM,
    &quO,                     /* &link_negot, */
    &astA,
    &astB,
    &link_negot,
    &prnM,

    &s[0],
    &s[1],          &s[2],
    &s[3],          &s[4],
    &s[5],          &s[6],
    &s[7],          &s[8],
    &s[9],          &s[10],
    &s[11],         &s[12],
    &s[18],         &s[25],
    &s[30],	/*22296 shujin*/
    &s[33],   /*2/23/96 shujin*/
    &s[37]
   };

const ubyte * const stored_profile[ANDV_STORED_PRO_SIZE] =  {
    B1_ptr,

/*        B3_ptr,
    B5_ptr,         B6_ptr,
    B7_ptr,        B8_ptr,
    B9_ptr,        B10_ptr,
   B11_ptr,     B12_ptr,
   B13_ptr,     B14_ptr,
   B15_ptr,     B16_ptr,
*/

	E_ptr,
    L_ptr,          M_ptr,
    N_ptr,          P_ptr,
    Q_ptr,          V_ptr,
    W_ptr,          X_ptr,
    Y_ptr,
    ANDC_ptr,       ANDD_ptr,
    ANDF_ptr,       ANDG_ptr,
    ANDI_ptr,       ANDJ_ptr,

    ANDP_ptr,       ANDQ_ptr,
    ANDS_ptr,
    ANDU_ptr,

   CRLF_ptr,
    PERA_ptr,       PERB_ptr,
    PERC_ptr,
    PERE_ptr,       PERG_ptr,
    SLA_ptr,        SLC_ptr,
    SLG_ptr,        SLJ_ptr,
    SLK_ptr,        SLN_ptr,
    SLQ_ptr,        SLT_ptr,
    SLX_ptr,

   HYC_ptr,					/* -C0, 2/23/95 shujin */
	HYJ_ptr,        HYK_ptr,
    HYQ_ptr,        QUH_ptr,
    QUM_ptr,        QUO_ptr,
    ASTA_ptr,       ASTB_ptr,

    ASTH_ptr,       PRNM_ptr,
    CRLF_ptr,
    S0_ptr,         S2_ptr,
    S6_ptr,         S7_ptr,
    S8_ptr,         S9_ptr,
    S10_ptr,

    CRLF_ptr,
	 S11_ptr,
    S12_ptr,        S18_ptr,
    S25_ptr,

    S30_ptr,      /* 2-20-96 */
    S33_ptr,      /* 2-23-96 */
    S37_ptr,      /* 2-23-96 */

    CRLF_ptr,       CRLF_ptr,
    END_ptr};


ubyte * const stored_pro_addr[ANDV_STORED_ADD_SIZE] = {
    &temp_array[24],	 	                 /*22296 shujin */

    &temp_array[43],                      /* automode */
    &temp_array[27],    &temp_array[28],  /* atW,        valueX	  */
    &temp_array[80],                      /* v32_retrain, acu_etc.mode */
    &temp_array[81],   	                  /* acu_etc.andI */

    &temp_array[26],    &temp_array[30],    /* trellis,    perA	  */
    &temp_array[82],                        /* acu_etc.maxrate      */

    &temp_array[32],    &temp_array[33],    /* perC,       perE	  */
    &temp_array[23],    &temp_array[29],    /* autofallback(%G1),  slA	  */
    &temp_array[31],    &temp_array[34],    /* slC,        slG	  */
    &temp_array[36],    &temp_array[37],    /* bps_adjust, slK	  */
    &temp_array[39],    &temp_array[40],    /* slN,        slQ	  */
    &temp_array[18],    &temp_array[41],    /* s[30],      slX	  */
	 &temp_array[16],								  /* calling_tone,-C, 2/23/96 shujin */
    &temp_array[44],    &temp_array[76],    /* hyJ,        hyK	  */
    &temp_array[79],    &temp_array[45],    /* hyQ,        quH	  */
    &temp_array[78],    &temp_array[46],    /* quM,        quO	  */

    &temp_array[83],    &temp_array[84],    /* acu_etc.autorate,.hardware */
    &temp_array[74],    &temp_array[75],    /* link_negot, prnM	  */

    &temp_array[0],     &temp_array[1],     /* s[0],       s[2]	  */
    &temp_array[2],     &temp_array[3],     /* s[6],       s[7]	  */
    &temp_array[4],     &temp_array[5],     /* s[8],       s[9]	  */
    &temp_array[6],     &temp_array[7],     /* s[10],      s[11]	  */
    &temp_array[8],     &temp_array[11],    /* s[12],      s[18]	  */
    &temp_array[15],    					    /* s[25],      	  */
    &temp_array[18],    						  /* 22296 shujin, s[30]   */
    &temp_array[20],    &temp_array[19]    /* s[33], s[37] */
   };


