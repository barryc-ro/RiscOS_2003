/****************************************************************************
/
/    Copyright 1988,1989,1990,1991,1992,1993,1994. All Rights Reserved by:
/    RSA
/    7701 Six Forks Road
/    Suite 120
/    Raleigh, NC  27615
/    (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.    The information contained herein is solely
/   for the use of RSA.
/
/   File:    ac00vc1.c
/
/   Module Version: ACU 4.02
/
/   Function: This file contains ACU specific interface routines to Voice.
/
/   Product:    ACU core code
/
/   History:
/
/    Created:
/
/    ---------------------------------------------------------
/    -         Modifications          -
/    ---------------------------------------------------------
/
/    Author & Date:      RSA
/    Description:
/    Reason:
/
/       Author & Date: RSA 5/25/1994.
/       Description: Added two new routines.
/       Reason: Needed for hangup when the DTR (&D2) is Dropped.
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "acu_vce.h"
#include "vce_pro.h"
#include "fp_pro.h"
#include "mt_pro.h"

void vce_mode_hangup(void);
void process_voice_bg(void);
void orig_voice_bg(void);
void proc_idle_voice(void);
void proc_orig_voice(void);
void proc_online_voice(void);
void parse_voice(void);
void parse_answ_voice(void);
void parse_orig_voice(void);
void orig_voice_hangup(void);
void parse_connect_voice(void);
void online_hangup_voice(void);
/* Start Change 5/25/1994. */
void idle_voice_v24(void);
void online_voice_v24(void);
/* End Change 5/25/1994. */
/* start change keh 3/29/95 => Remove voice only messages from acu */
void orig_voice_msg(void);
void idle_voice_ring(void);
/* start change keh 3/23/95 => move voice results locally */
void output_voice_result(ubyte type);
void idle_voice_msg(void);

const ubyte *voice_result_code_table[] =
{
    (ubyte *) "\x10R", /* msg type: 102 Voice mode Ring message */
    (ubyte *) "\x10X", /* msg type: 103 Voice message start */
    (ubyte *) "\x10.", /* msg type: 104 Voice message end */
};
/* end change keh 3/23/95 => move voice results locally */

/* start change keh 2/13/95 => add VOICE to new parser */
/* #include "par_def.h" */
/* #include "par_pro.h" */
#if 0
extern void set_voice_tia_at_cmds(ubyte);
extern void set_voice_rock_at_cmds(ubyte);
#endif
/* end change keh 2/13/95 => add VOICE to new parser */

extern ubyte dte_mode; /* ramn 10/10/95 */
extern ubyte ring_was_on_before; /* ramn 2/20/96 */

/*******************************************************************************
/
/   Routine: process_voice_bg
/
/   Author: RSA
/
/   Creation Date: 10/26/92
/
/   Description: This routine will process the voice code.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                -
/   -------------------------------------------------------------
/
/   Author & Date: RSA 10/15/93
/   Description: Reset the voice background timers if in STAY_ONLINE
/   Reason: If the voice is not allowing the ACU background to run,
/           the timers will be artificially set.
/
/   Author & Date: RSA drc 3/15/93
/   Description: Added call to autobaud_off() in process_voice_bg()
/   Reason: To allow for key aborts in voice mode.
/
/       Author & Date: RSA 3/29/1994.
/       Description: Added the new state GOTO_IDLE_INACTIVITY.
/       Reason: Needed to reset the voice code if the timer expires.
/
/
/       Author & Date: RSA 8/1/1994.
/       Description: Added new states for the RINGBACK and BUSY.
/       Reason: Needed for the cadence reporting for +VDT.
/
*******************************************************************************/
void process_voice_bg(void)
{
   ubyte status;

   /* Only call Voice code if it has been selected */
/* shujin 9/9/97, move it into acu_main
   if (fax_class != 8)
       return;

*/


/*    process_wait(); */
   status = voice_bg(&message_ptr);
   switch (status)
   {
       case STAY_PARSE:
           break;

       case GOTO_IDLE_NONE:
           acu_restart();
           set_parms(acu_data_bits,acu_parity,acu_stop_bits);
           build_event(E_IDLE,UNUSED);
           build_event(E_MSG,NONE);
           break;

       case GOTO_IDLE_OK:
           acu_restart();
           set_parms(acu_data_bits,acu_parity,acu_stop_bits);
           build_event(E_IDLE,UNUSED);
           build_event(E_MSG,OK);
           break;

       case RING_ON_DETECTED:
#if 0    /* ramn 4/5/96 */
           build_event(E_RING,RINGON);
#endif
             ring_was_on_before = TRUE;  /* ramn 2/20/96 */

           break;

       case RING_OFF_DETECTED:
            if(ring_was_on_before == TRUE) /* ramn 2/20/96 */
#if 0    /* ramn 4/5/96 */
           build_event(E_RING,RINGOFF);
#endif
             s[1]++;
             ring_was_on_before = FALSE;  /* ramn 2/20/96 */
       break;

       case STAY_ONLINE:
/* Start change 10/15/93 */
           if (acu_10msec_timer > 1)
               acu_10msec_timer = 1;
           if (acu_100msec_timer > 1)
               acu_100msec_timer = 1;
           if (acu_1sec_timer > 1)
               acu_1sec_timer = 1;
           if (acu_1min_timer > 1)
               acu_1min_timer = 1;
/* End change 10/15/93 */
           break;

/* Start Change 3/29/1994. */
       case GOTO_IDLE_INACTIVITY:
           acu_restart();
           set_parms(acu_data_bits,acu_parity,acu_stop_bits);
           build_event(E_IDLE,UNUSED);
           online_hangup_voice();
           break;
/* End Change 3/29/1994. */

/* Start Change 8/1/1994. */
       case RINGBACK_DETECTED:
#if 0    /* ramn 2/27/96 */
           if (voice_dist_ctl_active)
           {
               voice_rpt_ctl_cadence(RINGBACK_DETECTED,
                   &voice_ctl_tone_on,&voice_ctl_tone_off);
               if ((fax_class == 8) && (voice_cmd_set == TIA_IS_101))
               {
                   build_event(E_MSG,COMPLEX_PACKET_START);
                   build_event(E_MSG,CPOF);
                   build_event(E_MSG,CPON);
                   build_event(E_MSG,COMPLEX_PACKET_END);
               }
               else
               {
                   build_event(E_MSG,CPOF);
                   build_event(E_MSG,CPON);
               }
           }
#endif
           break;

       case BUSY_DETECTED:
#if 0
           if (voice_dist_ctl_active)
           {
               voice_rpt_ctl_cadence(BUSY_DETECTED,
                   &voice_ctl_tone_on,&voice_ctl_tone_off);
               if ((fax_class == 8) && (voice_cmd_set == TIA_IS_101))
               {
                   build_event(E_MSG,COMPLEX_PACKET_START);
                   build_event(E_MSG,CPOF);
                   build_event(E_MSG,CPON);
                   build_event(E_MSG,COMPLEX_PACKET_END);
               }
               else
               {
                   build_event(E_MSG,CPOF);
                   build_event(E_MSG,CPON);
               }
           }
#endif  /* ramn 2/27/96 */
           break;
/* End Change 8/1/1994. */
   }

   /* Return any information to the terminal from the voice code. Need to wait
       until the message has been totally sent then turn echo back on */
   if (*message_ptr != NULL)
   {
/* start change 03/02/94    */
       autobaud_off();
/* end change 03/02/94        */

/* save dte_mode because enable_acu_on_terminal will set it to acu mode
   and it may not get restored correctly after disable_acu_on_terminal
*/
            status = dte_mode;           /* ramn 10/10/95 */
         enable_acu_on_terminal();      /* ramn 10/10/95*/
/*                output_info(message_ptr, UNFORMATTED);*/      /* ramn 1/16/96 */
                output_info(message_ptr, (ubyte)sr14.verbose_form);      /* ramn 1/16/96 */

       while (acu_to_num())
           ;
       while (!check_all_sent())
           ;
          disable_acu_on_terminal(); /* ramn 10/10/95*/
            dte_mode = status;          /* ramn 10/10/95 */


       /*if (sr14.echo_cmd_flag)
           modem_serial_echo(ON);*/ /* ramn 9/20/96 */
   }
}


/*******************************************************************************
/
/    Routine: orig_voice_bg
/
/    Author : RSA
/
/    Creation Date: 06/17/91
/
/    Description : This Routine will process the background functions for
/              the ORIG state of type VOICE.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:  st_orig.state
/
/    Users: proc_orig
/
/    -------------------------------------------------------------
/    -            Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void orig_voice_bg(void)
{
    switch (st_orig.state)
    {
        case ORIG_DIAL:
            /* In this state the ACU is processing the dial command */
            originate_dial();
            break;

        case INIT_MODEM_ORIG:
            /* Force the voice code in to the online command state */
            voice_connect(ORIGINATE);
            timer2 = s[7] * 100;
            st_orig.state = ORIG_HANDSHAKING;
            break;

        case ORIG_HANDSHAKING:
            /* Wait until the voice mode indicates it has detected the remote
               off hook by detecting ringback. If not detected before s7 timer
               expires then abort call */
            if (!timer2)
            {
/*                build_event(E_HANGUP,NONE);
                build_event(E_MSG,NO_ANSWER);

*/
                    voice_connect(VOICE_DIAL_HANGUP); /* ramn 6/26/96 */
            }
            break;

        case PROCESS_DIAL_MOD:
            /* In this state the ACU will process any dial modifiers that takes
               any length of time */
            process_modifiers();
            break;
    }
}

/*******************************************************************************
/
/    State Table:        st_idle_voice
/
/    Author : RSA
/
/    Creation Date: 06/17/94
/
/    Description : This table contains the action routines for Voice in IDLE mode.
/
/    Users: proc_orig
/
/    -------------------------------------------------------------
/    -                       Modifications                       -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
const struct stateTab_struct st_idle_voice[EVT_MAX+1] =
{
/* start change keh 3/23/95 => move voice results locally */
/* MSG          *//***{S_IDLE,        idle_at_msg},**/
/* MSG          */    {S_IDLE,        idle_voice_msg},
/* end change keh 3/23/95 => move voice results locally */
/* CHAR_RCVD  */    {S_IDLE,        idle_chk_char},
/* ORIG       */    {S_ORIG,        parse_orig_voice},
/* ANSW       */    {S_IDLE,        parse_answ_voice},
/* CONNECT    */    {S_IDLE,        ignore},
/* IDLE       */    {S_IDLE,        ignore},
/* RESET      */    {S_IDLE,        hard_reset},
/* SYS_STAT   */    {S_IDLE,        ignore},
/* start change keh 3/27/95 => No autoanswer for voice */
/* RING       *//***{S_IDLE,        idle_at_ring},***/
/* RING       */ /****   {S_IDLE,        idle_voice_ring},****/
                            {S_IDLE,        ignore},

/* end change keh 3/27/95 => No autoanswer for voice */
/* DP_CD_OFF  */    {S_IDLE,        ignore},
/* Start Change 5/25/1994. */
/* HANGUP     */    {S_IDLE,        orig_voice_hangup},
/* End Change 5/25/1994. */
/* RETRAIN    */    {S_IDLE,        ignore},
/* TEST       */    {S_IDLE,        ignore},
/* PARSE      */    {S_PARSE,        idle_to_parse},
/* Start Change 5/25/1994. */
/* V24          */    {S_IDLE,        idle_voice_v24},
/* End Change 5/25/1994. */
/* FP          */    /*{S_IDLE,        proc_fp},*/        /* ramn 9/26/96 */
/* FP          */    {S_IDLE,        ignore},        /* ramn 9/26/96 */
/* ESC_RXD    */    {S_IDLE,        ignore},
};


/*******************************************************************************
/
/   Routine: proc_idle_voice
/
/   Author: RSA
/
/   Creation Date: 10/26/92
/
/   Description : This Routine will process the event by determining the
/          next state and the action to be performed for the IDLE
/          state of type VOICE.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
#if 0
void proc_idle_voice(void)
{
    acu_state = st_idle_voice[acu_event->type].new_state;
    acu_proc = st_idle_voice[acu_event->type].fnc_ptr;
}
#endif


/*******************************************************************************
/
/    State Table:        st_orig_voice
/
/    Author : RSA
/
/    Creation Date: 06/17/94
/
/    Description : This table contains the action routines for Voice in ORIG mode.
/
/    Users: proc_orig
/
/    -------------------------------------------------------------
/    -                       Modifications                       -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
const struct stateTab_struct st_orig_voice[EVT_MAX+1] =
{
/* start change keh 3/29/95 => Remove voice only messages from acu */
/* MSG          *//***{S_ORIG,        orig_at_msg},***/
/* MSG          */    {S_ORIG,        orig_voice_msg},
/* end change keh 3/29/95 => Remove voice only messages from acu */
/* CHAR_RCVD  */    {S_ORIG,        kb_abort},
/* ORIG       */    {S_ORIG,        ignore},
/* ANSW       */    {S_IDLE,        parse_answ_voice},
/* CONNECT    */    {S_ORIG,        ignore},
/* IDLE       */    {S_IDLE,        ignore},
/* RESET      */    {S_IDLE,        hard_reset},
/* SYS_STAT   */    {S_ORIG,        ignore},
/* RING       */    {S_ORIG,        ignore},
/* DP_CD_OFF  */    {S_ORIG,        ignore},
/* HANGUP     */    {S_IDLE,        orig_voice_hangup},
/* RETRAIN    */    {S_ORIG,        ignore},
/* TEST       */    {S_ORIG,        ignore},
/* PARSE      */    {S_PARSE,        orig_at_parse},
/* V24          */    {S_ORIG,        pstn_at_v24},
/* FP          */    /*{S_ORIG,        proc_fp},*/    /* ramn 9/26/96 */
/* FP          */    {S_ORIG,        ignore},            /* ramn 9/26/96 */
/* ESC_RXD    */    {S_ORIG,        ignore},
};


/*******************************************************************************
/
/   Routine: proc_orig_voice
/
/   Author: RSA
/
/   Creation Date: 10/26/92
/
/   Description : This Routine will process the event by determining the
/          next state and the action to be performed for the ORIG
/          state of type VOICE.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
#if 0
void proc_orig_voice(void)
{
    acu_state = st_orig_voice[acu_event->type].new_state;
    acu_proc = st_orig_voice[acu_event->type].fnc_ptr;
}
#endif

/*******************************************************************************
/
/    State Table:        st_online_voice
/
/    Author : RSA
/
/    Creation Date: 06/17/94
/
/    Description : This table contains the action routines for Voice in
/                  ONLINE mode.
/
/    Users:
/
/    -------------------------------------------------------------
/    -                       Modifications                       -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
const struct stateTab_struct st_online_voice[EVT_MAX+1] =
{
/* MSG          */    {S_ONLINE,        ignore},
/* CHAR_RCVD  */    {S_ONLINE,        ignore},
/* ORIG       */    {S_ONLINE,        ignore},
/* ANSW       */    {S_ONLINE,        ignore},
/* CONNECT    */    {S_ONLINE,        ignore},
/* IDLE       */    {S_IDLE,        ignore},
/* RESET      */    {S_IDLE,        hard_reset},
/* SYS_STAT   */    {S_ONLINE,        ignore},
/* RING       */    {S_ONLINE,        ignore},
/* DP_CD_OFF  */    {S_ONLINE,        ignore},
/* HANGUP     */    {S_IDLE,        online_hangup_voice},
/* RETRAIN    */    {S_ONLINE,        ignore},
/* TEST       */    {S_ONLINE,        ignore},
/* PARSE      */    {S_ONLINE,        ignore},
/* Start Change 5/25/1994. */
/* V24          */    {S_IDLE,        online_voice_v24},
/* End Change 5/25/1994. */
/* FP          */    /*{S_ONLINE,        proc_fp},*/        /* ramn 9/26/96 */
/* FP          */    {S_ONLINE,        ignore},        /* ramn 9/26/96 */
/* ESC_RXD    */    {S_ONLINE,        ignore},
};


/*******************************************************************************
/
/   Routine: proc_online_voice
/
/   Author: RSA
/
/   Creation Date: 10/26/92
/
/   Description : This Routine will process the event by determining the
/          next state and the action to be performed for the ONLINE
/          state of type VOICE.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
#if 0
void proc_online_voice(void)
{
    acu_state = st_online_voice[acu_event->type].new_state;
    acu_proc = st_online_voice[acu_event->type].fnc_ptr;
}
#endif


/*******************************************************************************
/
/   Routine: parse_voice
/
/   Author: RSA
/
/   Creation Date: 10/26/94
/
/   Description : This Routine will process the event by determining the
/          next state and the action to be performed for the PARSE
/          state of type VOICE.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void parse_voice(void)
{
    if (acu_event->parm == CONN_DATA || acu_event->parm == CONN_FAX ||
       acu_event->parm == CONN_VOICEVIEW)
    {
        /* Place the modem and voice code into idle states */
        modem_return_to_idle();

        /* Force the voice code in to the online command state */
        voice_reset();


       if (acu_event->parm == CONN_VOICEVIEW)
       {
           state_type[S_IDLE] = VOICE_VIEW;
           state_type[S_PARSE] = VOICE_VIEW;
       }
       else
       {
           state_type[S_IDLE] = AT_OFFLINE;
           state_type[S_PARSE] = AT_OFFLINE;
       }
    }
}


/*******************************************************************************
/
/   Routine: parse_answ_voice
/
/   Author: RSA
/
/   Creation Date: 10/26/94
/
/   Description : This Routine will process the event by determining the
/          next state and the action to be performed for the ANSWER
/          state of type VOICE.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void parse_answ_voice(void)
{
    on_line_command = TRUE;

    /* Force the voice code in to the online command state */
    voice_connect(ANSWER);
}

/*******************************************************************************
/
/    Routine: parse_orig_voice
/
/    Author : RSA
/
/    Creation Date: 06/17/91
/
/    Description : This Routine will setup the ACU state of ORIG with type
/                     VOICE
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:  st_orig.state, st_orig.state, cmd_line[],
/                   cmd_ptr
/
/    Users: st_idle_voice[], st_parse_voice[]
/
/    -------------------------------------------------------------
/    -            Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void parse_orig_voice(void)
{
    state_type[S_ORIG] = VOICE;
    /* Inform the voice code that the modem is originating a call but has not
       dialed.  The voice code is responsible for going off hook if selected */
    voice_connect(ORIG_NOT_DIALED);

    send_ok = FALSE;
    valid_char = TRUE;
    error_flag = FALSE;
    modem_dte_cts(ON);
    /*modem_serial_echo(OFF);*/ /* ramn 9/20/96 */
    /* modem_td_relay(ON);*/    /* ramn 1/17/96 */
    modem_config_dtmf_dial(s[11],s[11]);

    /* Setup blind dial timer */
    timer3 = s[6] * 100;

    switch (acu_event->parm)
    {
        /* Setup the command line to not dial any number */
        case NO_DIAL:
            st_orig.state = INIT_MODEM_ORIG;
            break;

        /* Setup the command line to number stored at location 0 */
        case DIAL_NUM0:
            cmd_line[0] = 'S';
            cmd_line[1] = '\0';
            cmd_ptr = (ubyte *)&cmd_line[0];
            st_orig.state = ORIG_DIAL;
            break;

        default:
            st_orig.state = ORIG_DIAL;
            break;
    }
}

/*******************************************************************************
/
/    Routine: orig_voice_hangup
/
/    Author : RSA
/
/    Creation Date: 06/17/91
/
/   Description : This Routine will process hangup events to be performed for
/                  the ORIG state of type VOICE.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:
/
/    Users: st_orig_voice[],
/
/    -------------------------------------------------------------
/    -            Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void orig_voice_hangup(void)
{
   /* Hang up the voice code */
   voice_hangup();

/* Start Change 5/25/1994. */
   /* Reset voice variables */
   fax_class = 0;
   voice_cmd_set = NONE;
   set_voice_tia_at_cmds(OFF);

   hook_control = FALSE;
    hook = TRUE; /* ramn 2/26/96 */

    /*resotore the acu execution delay when leaving voice mode */
    delay_to_exec = ACU_EXEC_DELAY; /* ramn 3/11/96 */

   dont_autobaud = 0;
   voice_port_rate = 0;
   on_line_command = FALSE;
   voice_inactivity_timer_on = FALSE;
/* start change keh 3/31/95 >> redo VNH */
#if 0
   voice_VNH_active = FALSE;
#endif
   acu_cntrld_hangup = FALSE;
/* end change keh 3/31/95 >> redo VNH */

/* Start Change 5/25/1994. */
   /* Reset the ACU back in to AT mode */
   state_type[S_IDLE] = AT_OFFLINE;
   state_type[S_PARSE] = AT_OFFLINE;
/* End Change 5/25/1994. */

/* start change keh 3/27/95 => No online VX commands after hangup */
   /* Disable Parsing of all VOICE online commands */

#if 0
    set_voice_rock_at_cmds(OFF);
#endif  /* ramn 11/29/95 */

/* end change keh 3/27/95 => No online VX commands after hangup */
}


/***************************
this routine written by ramn on 2/27/96
in this rouitne we hangup but still remain in voice mode

**************/

void vce_mode_hangup(void)
{
   /* Hang up the voice code */
/*   voice_hangup();*/ /* ramn 3/1/96 */

   hook_control = FALSE;
    hook = TRUE; /* ramn 2/26/96 */
   dont_autobaud = 0;
   voice_port_rate = 0;
   on_line_command = FALSE;
   voice_inactivity_timer_on = FALSE;
   acu_cntrld_hangup = FALSE;

   /* Reset the ACU back in to AT mode */
   state_type[S_IDLE] = AT_OFFLINE;
   state_type[S_PARSE] = AT_OFFLINE;
}





/*******************************************************************************
/
/    Routine: parse_connect_voice
/
/    Author : RSA
/
/    Creation Date: 06/17/91
/
/   Description : This Routine will process CONNECT events performed for
/                  the PARE state of type VOICE.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:
/
/    Users: st_orig_voice[],
/
/    -------------------------------------------------------------
/    -            Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void parse_connect_voice(void)
{
   state_type[S_ONLINE] = VOICE;

/* start change keh 5/19/95 => add new parser to voice */
   /* Wait for any messages to go to termial */
   while (acu_to_num());
   while (!check_all_sent());
/* end  change keh 5/19/95 => add new parser to voice */
}


/*******************************************************************************
/
/    Routine: online_hangup_voice
/
/    Author : RSA
/
/    Creation Date: 06/17/91
/
/   Description : This Routine will process HANGUP events performed for
/                  the ONLINE state of type VOICE.
/
/    Input Parameters: None
/
/    Output Parameters: none
/
/    Global Variables Changed:
/
/    Users: st_orig_voice[],
/
/    -------------------------------------------------------------
/    -            Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void online_hangup_voice(void)
{
   /* Place the modem task back in to the idle state */
   modem_return_to_idle();

   /* Reset voice variables */
   fax_class = 0;

    /*resotore the acu execution delay when leaving voice mode */
    delay_to_exec = ACU_EXEC_DELAY; /* ramn 3/11/96 */

   voice_cmd_set = NONE;
   hook_control = FALSE;
   dont_autobaud = 0;
   voice_port_rate = 0;
   on_line_command = FALSE;

   /* Reset the ACU back in to AT mode */
   state_type[S_IDLE] = AT_OFFLINE;
   state_type[S_PARSE] = AT_OFFLINE;

   /* Force the modem out of voice mode */
   voice_reset();

/* Start Change 3/29/1994. */
   voice_inactivity_timer_on = FALSE;
/* End Change 3/29/1994. */

/* start change keh 3/31/95 >> redo VNH */
#if 0
/* Start Change 4/11/1994. */
   voice_VNH_active = FALSE;
/* End Change 4/11/1994. */
#endif
   acu_cntrld_hangup = FALSE;
/* end change keh 3/31/95 >> redo VNH */

   at_h_command = FALSE;
   build_event(E_MSG,OK);
}


/*******************************************************************************
/
/   Routine: idle_voice_v24
/
/   Author: RSA
/
/   Creation Date: 5/24/1994.
/
/   Description: This Routine will process V24 signal changes.
/                DTR drop is the only event processed.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed: None
/
/   Users: st_idle_voice_on[], st_parse_voice_on[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
/* Start Change 5/25/1994. */
void idle_voice_v24(void)
{
   if (acu_event->parm == DTR_OFF)
   {
       if (sr21.DTR_control == 2)
           build_event(E_HANGUP,OK);
   }
}
/* End Change 5/25/1994. */

/*******************************************************************************
/
/   Routine: online_voice_v24
/
/   Author: RSA
/
/   Creation Date: 5/24/1994.
/
/   Description: This Routine will process V24 signal changes in voice online
/                state. DTR drop is the only event processed.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed: None
/
/   Users: st_online_voice[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
/* Start Change 5/25/1994. */
void online_voice_v24(void)
{
   if (acu_event->parm == DTR_OFF)
   {
       if (sr21.DTR_control == 2)
       {
           voice_hangup(); /* terminate any existing connection */
           acu_restart(); /* take back the DTE port */
           set_parms(acu_data_bits, acu_parity, acu_stop_bits);
           build_event(E_HANGUP, OK); /* respond OK after hanging up */
       }
   }
}
/* End Change 5/25/1994. */


/* start change keh 3/23/95 => move voice results locally */
/*******************************************************************************
/
/   Routine: idle_voice_msg
/
/   Author: RSA
/
/   Creation Date: 03/23/95.
/
/   Description: This Routine will process Message events during the IDLE
/                state of type VOICE.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed: None
/
/   Users: st_idle_voice[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void idle_voice_msg(void)
{
   ubyte msg_type;

   msg_type = (ubyte)acu_event->parm;

   /* Test for messages exclusive to voice */
   if ((msg_type >= SHIELDED_RING) && (msg_type <= COMPLEX_PACKET_END))
   {
       /* Turn off Autobaud to send message! */
       autobaud_off();

       /* Send message to the terminal... */
       output_voice_result(msg_type);

       /* Wait for message to arrive at terminal */
       if (result_message_sent == TRUE)
       {
           result_message_sent = FALSE;
           while (acu_to_num() > 0)
               ;
           while (!check_all_sent())
               ;
       }
       /* Reconfigure port after message */
       if (dont_autobaud == FALSE)
       {
           acu_from_clear();
           autobaud_on();
       }
       /*if (sr14.echo_cmd_flag && !dont_echo)
           modem_serial_echo(ON);*/ /* ramn 9/20/96 */
   }
   /* Else pass to standard data mode messaging */
   else
   {
       idle_at_msg();
   }
}

/*******************************************************************************
/
/   Routine: output_voice_result
/
/   Author: RSA
/
/   Creation Date: 03/23/95.
/
/   Description: This Routine will output messages to the terminal in states
/                of type VOICE.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed: None
/
/   Users: st_idle_voice[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void output_voice_result(ubyte type)
{
   ubyte *msg;

   /* If special voice message... */
   if ((type >= SHIELDED_RING) && (type <= COMPLEX_PACKET_END))
   {
       /* Configure DTE port for message */
       modem_serial_direct(NORMAL);
       /*modem_serial_echo(OFF);*/ /* ramn 9/20/96 */
       set_parms(acu_data_bits,acu_parity,acu_stop_bits);

       /* Wait for the buffer to free up 10 chars */
       while (acu_to_free() < 10)
           ;
       result_message_sent = TRUE;

       /* Get and send canned message to termanal */
       msg = (ubyte *)voice_result_code_table[type-SHIELDED_RING];
       while (*msg != NULL)
           acu_to_char(*msg++);

       if (type != SHIELDED_RING)
           output_send_cr_lf();
       result_message_sent = TRUE;
   }
}
/* end change keh 3/23/95 => move voice results locally */


/* start change keh 3/27/95 => No autoanswer for voice */
/*******************************************************************************
/
/   Routine: idle_voice_ring
/
/   Author: RSA
/
/   Creation Date: 03/23/95.
/
/   Description: This Routine will process RING events during the IDLE
/                state of type VOICE.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed: None
/
/   Users: st_idle_voice[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
#if 0
void idle_voice_ring(void)
{
   if (acu_event->parm == RINGON)
   {
       /*modem_ri_led(ON);*/ /* ramn 9/20/96 */
       modem_dte_ri(ON);
       if ((voice_dist_ring_active) && (!voice_dist_ring_sent))
       {
           voice_dist_ring_sent = TRUE;
           voice_dist_ring_time = voice_ring_timer;
           voice_ring_timer = 0;

#if 0 /* 3/27/96 shujin */
           /* Send DROF (Ring-OFF cadence) to terminal */
           if ((voice_cmd_set == TIA_IS_101) && !voice_ring_rpt_timer)
               build_event(E_MSG,COMPLEX_PACKET_START);
           voice_ring_rpt_timer = 0;

           build_event(E_MSG,DROF);
#endif
       }
   }
   else if (acu_event->parm == RINGOFF)
   {
       /*modem_ri_led(OFF);*/ /* ramn 9/20/96 */
       modem_dte_ri(OFF);
       if (voice_dist_ring_active)
       {
           voice_dist_ring_sent = FALSE;
           voice_dist_ring_time = voice_ring_timer;
           voice_ring_timer = 0;

#if 0 /* 3/27/96 shujin */
           /* Send DRON (Ring-ON cadence) to terminal */
           build_event(E_MSG,DRON);
#endif
       }

       /* Queue event to send the RING message back to the terminal */
       if ((voice_cmd_set == TIA_IS_101) && (!voice_dist_ring_active))
       {
           /* Send Voice Ring message (DLE+r) to terminal */
           build_event(E_MSG,SHIELDED_RING);
       }
       else
       {
           /* Send Ring message to terminal */
           /* If Distinctive Ring Report delay, wait to send RING message */
           if (voice_dist_ring_active && voice_dist_ring_intvl)
           {
               voice_ring_rpt_timer = voice_dist_ring_intvl;
           }
           /* Else send RING Now */
           else
           {
               /* Send standard RING message to terminal */
               build_event(E_MSG,RING);
               /* Complex message END for Voice Mode only */
               if (voice_cmd_set == TIA_IS_101)
                   build_event(E_MSG,COMPLEX_PACKET_END);
           }
       }
   }
}
#endif
/* end change keh 3/27/95 => No autoanswer for voice */

/* start change keh 3/29/95 => Remove voice only messages from acu */
/*******************************************************************************
/
/   Routine: orig_voice_msg
/
/   Author: RSA
/
/   Creation Date: 03/29/95.
/
/   Description: This Routine will process Message events during the ORIG
/                state of type VOICE.
/
/   Input Parameters: None
/
/   Output Parameters: none
/
/   Global Variables Changed: None
/
/   Users: st_idle_voice[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void orig_voice_msg(void)
{
   ubyte msg_type;
   msg_type = (ubyte)acu_event->parm;

   /* Test for messages exclusive to voice */
   if ((msg_type >= SHIELDED_RING) && (msg_type <= COMPLEX_PACKET_END))
   {
       /* Send message to the terminal... */
       output_voice_result(msg_type);

       /* Wait for message to arrive at terminal */
       if (result_message_sent == TRUE)
       {
           result_message_sent = FALSE;
           while (acu_to_num() > 0)
               ;
           while (!check_all_sent())
               ;
       }
   }
   /* Else pass to standard DATA mode messaging */
   else
   {
       orig_at_msg();
   }
}
/* end change keh 3/29/95 => Remove voice only messages from acu */

