/****************************************************************************
/
/   Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/   All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.  The information contained herein is solely
/   for the use of RSA.
/
/   File:           ac00orvv.c
/
/   Module Version: ACU 4.??
/
/   Function:       This file contains the action routines for VOICE VIEW
/                   ACU processing in the ORIG states.
/
/   Product:        ACU core code
/
/   History:        ac00vv2.c
/
/       Created:    8/21/95
/
/       ---------------------------------------------------------
/       -                   Modifications                       -
/       ---------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:
/       Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "acu_vcv.h"
#include "mt_pro.h"

/* Local routines */
void proc_orig_vv(void);
void orig_vv_bg(void);
void vv_kb_abort(void);
void orig_vv_hangup(void);
void orig_vv_connect(void);
void orig_vv_idle(void);
void orig_vv_parse(void);
void vv_reset_autoattend_timeout(void);
ubyte vv_autoattend_timeout(void);
void orig_vv_init_modem(void);
void orig_auto_attendant(void);

/*    State table for VoiceView PSTN ORIG state    */

const struct stateTab_struct st_orig_vv[EVT_MAX+1] =
{
/* MSG        */   {S_ORIG,    orig_at_msg},
/* CHAR_RCVD  */   {S_ORIG,    vv_kb_abort},
/* ORIG       */   {S_ORIG,    ignore},
/* ANSW       */   {S_ORIG,    ignore},
/* CONNECT    */   {S_ONLINE,  orig_vv_connect},
/* IDLE       */   {S_IDLE,    orig_vv_idle},
/* RESET      */   {S_IDLE,    hard_reset},
/* SYS_STAT   */   {S_ORIG,    ignore},
/* RING       */   {S_ORIG,    ignore},
/* DP_CD_OFF  */   {S_ORIG,    ignore},
/* HANGUP     */   {S_HANGUP,  orig_vv_hangup},
/* RETRAIN    */   {S_ORIG,    ignore},
/* TEST       */   {S_ORIG,    ignore},
/* PARSE      */   {S_PARSE,   orig_vv_parse},
/* V24        */   {S_ORIG,    pstn_at_v24},
/* FP         */   {S_ORIG,    ignore},
/* ESC_RXD    */   {S_ORIG,    ignore},
};


/*******************************************************************************
/
/   Routine:        proc_orig_vv
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will process events by determining the
/                   next state and the action to be performed for
/                   the ORIG state of type VOICE_VIEW.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: acu_state, acu_proc
/
/   Users: proc_orig
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
#if 0
void proc_orig_vv(void)
{
   acu_state = st_orig_vv[acu_event->type].new_state;
   acu_proc = st_orig_vv[acu_event->type].fnc_ptr;
}
#endif

/*******************************************************************************
/
/   Routine:        orig_vv_bg
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will process the background functions for
/                   the ORIG state of type VOICE_VIEW.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: None
/
/   Users: orig_bg
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void orig_vv_bg(void)
{
   /* Run different substates of VoiceView ORIG background */
   switch (st_orig.state)
   {
       case INIT_ACU_DIAL:
           /*	In this state the ACU is being initialized to dial a number.
           */

           modem_vcv_td_relay(DCE_TO_TELCO);

           /* Use standard PSTN DATA routine */
           orig_init_dial();
           break;

       case INIT_ACU_NO_DIAL:
           /*	In this state the ACU is being initialized to make a
               connection.
           */
           /* Use standard PSTN DATA routine */
           orig_init_no_dial();
           break;

       case ORIG_WAIT_FOR_TONE:
           /*	In this state the ACU is waiting for dialtone detection,
               if enabled.
           */
           /* Use standard PSTN DATA routine */
           orig_wait_for_dialtone();
           break;


        case ORIG_DIAL:
           /*	In this state the ACU is processing the dial command
           */
           /* Use standard PSTN DATA routine */
           originate_dial();
           break;

        case INIT_MODEM_ORIG:
           /*	In this state the ACU initializes the data pump for VoiceView
           */
           orig_vv_init_modem();
           break;


       case PROCESS_DIAL_MOD:
           /*	In this state the ACU will process any dial modifiers
               that takes any length of time
           */
           /* Use standard PSTN DATA routine */
           process_modifiers();
           break;


       case VV_ORIG_AUTO_ATTENDANT:
           /* Run the originate autoattendant operations */
           orig_auto_attendant();
           break;
   }
}


/*******************************************************************************
/
/   Routine:        vv_kb_abort
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will process the keyboard received event
/                   during the ORIG state of type VOICE_VIEW.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: None
/
/   Users: st_orig_vv,st_answ_vv,st_online_vv
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void vv_kb_abort(void)
{
   /* VV 1.11 Sec. 5.4.10: Report NO CARRIER for keyboard abort
       and return to voice mode. */
   if (acu_get_handset_status() == HANDSET_ON_HOOK)
   {
       user_initiated_hangup = TRUE;
       build_event(E_HANGUP,NO_CARRIER);
   }
   else
   {
       build_event(E_MSG,NO_CARRIER);
       build_event(E_IDLE,VV_IDLE_VOICE_MODE);
       acu_from_clear();

       /* Reset VoiceView module */
       process_vcv_reset();
   }

}

/*******************************************************************************
/
/   Routine:        orig_vv_hangup
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will process the hangup events
/                   during the ORIG state of type VOICE_VIEW.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: st_hangup,hangup_result_type
/
/   Users: st_orig_vv
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void orig_vv_hangup(void)
{
   /* Set hangup state parameters */
   state_type[S_HANGUP] = VOICE_VIEW;
   st_hangup.state = HANGUP_PHYSICAL_LINK;
   hangup_result_type = acu_event->parm;
}


/*******************************************************************************
/
/   Routine:        orig_vv_connect
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will process the connect events
/                   during the ORIG state of type VOICE_VIEW.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: st_online
/
/   Users: st_orig_vv
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void orig_vv_connect(void)
{
   /* Goto VV Auto Attendant mode */
   state_type[S_ONLINE] = VOICE_VIEW;
   st_online.state = VV_ONLINE_VV_DATA;

   /* Start wait for carrier timer */
   vv_reset_autoattend_timeout();
}


/*******************************************************************************
/
/   Routine:        orig_vv_idle
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will process the IDLE events
/                   during the ORIG state of type VOICE_VIEW.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: st_idle
/
/   Users:
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void orig_vv_idle(void)
{
   state_type[S_IDLE] = VOICE_VIEW;
   st_idle.state = acu_event->parm;

   /* Can't go to voice mode if onhook */
   if ((acu_event->parm == VV_IDLE_VOICE_MODE) &&
       (acu_get_handset_status() == HANDSET_ON_HOOK))
       build_event(E_HANGUP,NO_CARRIER);

   /* Reset VoiceView */
   process_vcv_reset();
}


/*******************************************************************************
/
/   Routine:        orig_vv_parse
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will process the PARSE events
/                   during the ORIG state of type VOICE_VIEW.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: st_idle
/
/   Users:
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void orig_vv_parse(void)
{
   if (acu_get_handset_status() != HANDSET_ON_HOOK)
   {
       st_idle.state = VV_IDLE_AUTO_ATTENDANT;
       build_event(E_MSG,OK);
       build_event(E_IDLE,VV_IDLE_AUTO_ATTENDANT);
   }
   else
   {
       build_event(E_IDLE,VV_IDLE_VOICE_MODE);
       build_event(E_MSG,ERROR);
   }
}

/*******************************************************************************
/
/   Routine:        vv_reset_autoattend_timeout
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will reset the VoiceView auto attendant
/                   timer.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: timer1
/
/   Users:
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void vv_reset_autoattend_timeout(void)
{
   timer1 = s[7]*100;
}


/*******************************************************************************
/                                                       7
/   Routine:        vv_autoattend_timeout
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will test if the VoiceView auto attendant
/                   has timed-out.
/
/   Input Parameters:  None
/
/   Output Parameters: 0 (FALSE) - No time-out.
/                      otherwise (TRUE) - Time-out.
/
/   Global Variables Changed: timer1
/
/   Users:
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
ubyte vv_autoattend_timeout(void)
{
   /* Wait on the timer to expire */
   if (!timer1)
       return TRUE;
   else
       return FALSE;
}


/*******************************************************************************
/
/   Routine:        orig_vv_init_modem
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will initialize the modem task for VoiceView
/                   originate mode.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: st_orig
/
/   Users: orig_vv_bg
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void orig_vv_init_modem(void)
{
   /* Set state (no data modulations) */
   modem_set_parameters(s[9],s[7],s[10],v32_retrain,s[91],receive_threshold,s[108]);
   modem_connect(0,0,0,0,0,0,CONNECT_VOICE_ONLY,0,DISABLED);

   /* Prep data pump for busy detection */
   modem_init_call_progress(OFF_HOOK_DIALED);

   /* Prep data pump for VV answer tone detection */
   modem_init_vcv_call_progress(OFF_HOOK_DIALED);

   /* Move to VV auto attendant mode */
   st_orig.state = VV_ORIG_AUTO_ATTENDANT;
   vv_reset_autoattend_timeout();
}


/*******************************************************************************
/
/   Routine:       orig_auto_attendant
/
/   Author:        RSA
/
/   Creation Date:  08/21/95
/
/   Description:   This Routine will process the originate actions for
/                  VoiceView auto attendant mode.
/
/   Input Parameters:  None
/
/   Output Parameters: None
/
/   Global Variables Changed: voice_dist_ctl_sent
/
/   Users: orig_vv_bg
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void orig_auto_attendant(void)
{
   /* VV 1.11 Sec. 5.4.10:
       1) Report CP tones and enter VV Auto-attendant.
       2) Report CONNECT,OK if VVANSW tone detected.
       3) Report NO CARRIER if no ringback and S7 times out.
       4) Report NO CARRIER if local hanset goes off hook before CONNECT.
       5) Report NO CARRIER for keyboard abort and return to voice mode.
   */

   /* 3) If session time out, or 4) local handset is picked up */

   /* SD - 2/8/96 - changed acu_get_handset_status() to modem_handset_hook() */
   if (vv_autoattend_timeout() || (modem_handset_hook() == HANDSET_OFF_HOOK))
   {
       build_event(E_MSG,NO_CARRIER);
       build_event(E_IDLE,VV_IDLE_VOICE_MODE);
   }

   /* 1) Report standard call progress tones */
   switch (modem_call_progress())
   {
       case LINE_SIGNAL:
           vv_reset_autoattend_timeout();

           /* Fall through */

       case UNDETERMINED:
       case SILENCE:
           voice_dist_ctl_sent = FALSE;
           break;

       case RINGBACK:
           vv_reset_autoattend_timeout();
           if (!voice_dist_ctl_sent)
           {
               voice_dist_ctl_sent = TRUE;
               build_event(E_MSG,RING_BACK);
           }
           break;

       case BUSY_SIGNAL:
           if (!voice_dist_ctl_sent)
           {
               voice_dist_ctl_sent = TRUE;
               if (acu_get_handset_status() == HANDSET_ON_HOOK)
                   build_event(E_HANGUP,BUSY);
               else
                   build_event(E_MSG,BUSY);
           }
           break;
   }

   /* 2) Report CONNECT,OK if VVANSW tone detected. */
   if (modem_vcv_call_progress() == ANSWER_TONE)
   {
       /* Move modem task CP to online */
       modem_init_call_progress(ON_LINE);
       modem_init_vcv_call_progress(ON_LINE);

       /* Move ACU to VV IDLE auto attendant mode */
       build_event(E_IDLE,VV_IDLE_AUTO_ATTENDANT);
       build_event(E_MSG,CONNECT);
       build_event(E_MSG,OK);
   }
}



