/****************************************************************************
/
/   Copyright 1988,1989,1990,1991,1992,1993,1994. All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.  The information contained herein is solely
/   for the use of RSA.
/
/   File:               ac00sys1.c
/
/   Module Version:     ACU 4.02
/
/   Function:           This file contains the system interface to the V.42
/                       code.
/
/   Product:            ACU core code
/
/   History:            ac00sys.c v3.90
/                       ac00sys.c v3.91
/                       ac00sys.c v3.94
/                       ac00sys.c v3.95
/
/		Created:         11/16/91
/                       12/04/91
/                       1/21/92
/                       1/12/93
/
/		---------------------------------------------------------
/		-			Modifications			-
/		---------------------------------------------------------
/
/		Author & Date:	RSA/keh 8/19/94
/		Description: Create and utilize routine "get_system_rate_map()"
/           for MNP10 available rates.
/		Reason: The DB4000 would connect at 14.4k in MNP10 even if the modem
/           was configured for V.32 only or the DTE rate was < 14.4k
/           
/		Author & Date: RSA/keh 7/1/94
/		Description: Implement configurations for ETC:
/               slA = 4 (32 byte frame length), and
/               slN = 5 (LAPM reliable mode)
/		Reason: Add ETC support to core ACU
/
/		Author & Date:	RSA 
/		Description: 
/		Reason: 
/
*****************************************************************************/
#include "sys_def.h"

#include "acu_def.h"
#include "acu_mem.h"

void system_set_parameters(void);
void reconfigure_system_parameters(void);
/* start change keh 8/19/94 => modify available rates for MNP10 */
uword get_system_rate_map(void);
/* end change keh 8/19/94 => modify available rates for MNP10 */


/*******************************************************************************
/
/	Routine: system_set_parameters
/
/	Author : RSA
/
/	Creation Date: 05/07/91
/
/	Description : This Routine is called to set up the initialization
/		      parameters based on the selected AT commands.
/
/	Input Parameters: none
/
/	Output Parameters: none
/
/	Global Variables Changed:  all variables needed for initialization
/				   interface Routines.
/
/	Users:	system_init
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/ Author & Date:	RSA/keh 8/19/94
/ Description: Utilize routine "get_system_rate_map()" for MNP10 rates.
/ Reason: The DB4000 would connect at 14.4k in MNP10 even if the modem
/           was configured for V.32 only or the DTE rate was < 14.4k
/
/ Author & Date: RSA/keh 7/1/94
/	Description: Implement new AT command configuration for ETC:
/               slN = 5 (LAPM reliable mode).
/	Reason: Add ETC support to core ACU
/
/	Author & Date:	RSA  
/	Description:	
/	Reason: 
/
*******************************************************************************/
void system_set_parameters(void)
{
/* start change keh 8/19/94 => modify available rates for MNP10 */
/*        ubyte temp; */ /* unused */
/* end change keh 8/19/94 => modify available rates for MNP10 */

/*	Set hardcoded values that do not correspond to any AT commands	*/
	acu_mnp_service_class = FULLDUP_SYNC;
	mnp_autorel_time = MAX_AUTOREL_TIME;
	mnp_optimization = ENABLED;

	acu_autoreliable_char = perA;
	mnp_compression = perC;

/*	If modem is answerer, detection is always enabled for \N3 and \N4	*/
	if (sr14.originate_flag == FALSE)
            detection_enable = ENABLED;
	else
            detection_enable = hyJ;

	acu_mnp_service_type = slL;
	btlz_comp_control = quH;
	btlz_string_len = quO;
	acu_32bit_crc_enab = FALSE;
	acu_mnp10_enab = quM;

	if (dial_K || prnM)
	{
		acu_cellular_enab = TRUE;
		dial_K = FALSE;
	}
	else
		acu_cellular_enab = FALSE;

	acu_fallforward_enab = TRUE;
	acu_fallback_enab = TRUE;
	acu_wait_for_cd_time = s[7] * 10;	/* Convert s7 to msecs	*/
	acu_cd_recov_time  = s[9];
	acu_cd_loss_time  = s[10];

/* start change keh 8/19/94 => modify available rates for MNP10 */
/* Original code: (IF-DEFed out to retain comments) */
#if 0 
   /* Determine the possible rates from s109 and -Q command	*/
        system_set_rates();
	acu_mnp10_rates = s[109] << 1;

        switch (hyQ)
        {
                case 0: temp = 0;
                        break;

                case 1: temp = 2;
                        break;

                case 2: temp = 3;
                        break;
        }
       
        acu_mnp10_rates |= temp;
#endif

/* New code: */
        acu_mnp10_rates = get_system_rate_map();
/* end change keh 8/19/94 => modify available rates for MNP10 */

	reconfigure_system_parameters();

/*	Initialize the V42 parameters according to the autodialer profile	*/
	switch (slC)
	{
		case 0: acu_autoreliable_flag = DISABLED;
			break;

		case 1: acu_autoreliable_flag = BUFFERING_200;
			break;

		case 2: acu_autoreliable_flag = NO_BUFFERING;

	}

	switch (slN)
	{

/* NORMAL MODE */
		case 0: speed_matching = ENABLED;
			mnp_service_level = NO_MNP;
			acu_autoreliable_flag = DISABLED;
			mnp_preferred = DISABLED;
			operating_mode = NORMAL;
			v42_enable = DISABLED;
			detection_enable = FALSE;
			break;

/* DIRECT MODE */
		case 1:
			operating_mode = DIRECT;
			break;

/* MNP RELIABLE MODE */
		case 2: speed_matching = DISABLED;
			mnp_service_level = STANDARD_SERV;
			mnp_preferred = ENABLED;
			acu_autoreliable_flag = DISABLED;
			v42_enable = DISABLED;
			operating_mode = RELIABLE;
			detection_enable = FALSE;

                        /* if the line connection is 300 bps the modem cannot
                           perform any synchronous operations, if a reliable
                           connection is requested it must be MNP async	*/

			if (modem_baud > BPS300)
				acu_mnp_service_class = FULLDUP_SYNC;
			else
                        {
                                acu_mnp10_enab = FALSE;
				acu_mnp_service_class = FULLDUP_ASYNC;
                        }
			break;

/* V.42 AUTORELIABLE MODE */
		case 3:	mnp_service_level = STANDARD_SERV;
                        speed_matching = ENABLED;

                        /* if the line connection is 300 bps the modem cannot
                           perform any synchronous operations, if a reliable
                           connection is requested it must be MNP async	*/

/*mrm72096*/
/*in v21 and v23 mode v42 and v42bis will not do the nego.*/

			/*if (modem_baud > BPS300)*/

			if ((modem_baud > BPS300) && (modem_mode != V23_ADX) && (modem_mode != V23_ADX) )

			{
				v42_enable = ENABLED;
				mnp_preferred = hyK;
			}
			else
			{
				v42_enable = DISABLED;
				mnp_preferred = ENABLED;
				acu_mnp_service_class = FULLDUP_ASYNC;
            acu_mnp10_enab = FALSE;

/*in v21 and v23 mode v42 and v42bis will not do the nego.*/
/*mrm72096*/
/*change*/

		 		speed_matching = ENABLED;
				mnp_service_level = NO_MNP;
				acu_autoreliable_flag = DISABLED;
				mnp_preferred = DISABLED;
				operating_mode = NORMAL;
				v42_enable = DISABLED;
				detection_enable = FALSE;

			}
			operating_mode = RELIABLE;
			break;

/* V.42 RELIABLE MODE */
		case 4: mnp_service_level = STANDARD_SERV;
			speed_matching = DISABLED;

                        /* if the line connection is 300 bps the modem cannot
                           perform any synchronous operations, if a reliable
                           connection is requested it must be MNP async	*/

			if (modem_baud > BPS300)
			{
				v42_enable = ENABLED;
				mnp_preferred = DISABLED;
			}
			else
			{
				v42_enable = DISABLED;
				mnp_preferred = ENABLED;
				acu_mnp_service_class = FULLDUP_ASYNC;
              acu_mnp10_enab = FALSE;
			}
			acu_autoreliable_flag = DISABLED;
			operating_mode = RELIABLE;
			break;

/* start change keh 7/1/94 => Add LAPM reliable mode for ETC */
/* LAPM RELIABLE MODE (LAP-M or disconnect) */
        case 5:
            /* Configure V.42 for LAPM only mode */
            speed_matching = DISABLED;

            /* If the line connection is 300 bps the modem cannot
                perform any synchronous operations, if a reliable
                connection is requested it must be MNP async	*/
            if (modem_baud > BPS300)
            {
                mnp_service_level = NO_MNP;
                v42_enable = ENABLED;
                mnp_preferred = DISABLED;
            }
            else
            {
			      mnp_service_level = STANDARD_SERV;
                v42_enable = DISABLED;
                mnp_preferred = ENABLED;
                acu_mnp_service_class = FULLDUP_ASYNC;
                acu_mnp10_enab = FALSE;
            }
            acu_autoreliable_flag = DISABLED;
            operating_mode = RELIABLE;
            break;
/* end change keh 7/1/94 => Add LAPM reliable mode for ETC */

	}

	if ((slO) || (slY))
	{
		slO = FALSE;
		slU = FALSE;
		slY = FALSE;
		speed_matching = ENABLED;
		mnp_service_level = STANDARD_SERV;
		mnp_preferred = hyK;
		v42_enable = DISABLED;
		inactivity_timer = DISABLED;
		retry_limit = 2;
		acu_autoreliable_flag = DISABLED;
		mnp_autorel_time = DISABLED;
		operating_mode = RELIABLE;
		mnp_advanced_commands = TRUE;
		detection_enable = FALSE;
	}

	if (slU)
	{
		speed_matching = ENABLED;
		mnp_service_level = STANDARD_SERV;
		mnp_autorel_time = DISABLED;
		mnp_preferred = hyK;
		v42_enable = DISABLED;
		acu_autoreliable_flag = DISABLED;
		operating_mode = RELIABLE;
		mnp_advanced_commands = TRUE;
		acu_got_dte_break = FALSE;
		detection_enable = FALSE;
	}

	if (slZ)
	{
		slZ = FALSE;
		speed_matching = ENABLED;
		operating_mode = NORMAL;
		mnp_service_level = NO_MNP;
		acu_autoreliable_flag = DISABLED;
		mnp_preferred = DISABLED;
		v42_enable = DISABLED;
		mnp_advanced_commands = TRUE;
		detection_enable = FALSE;
	}

/*	If leased line operations are enabled then the v42 parameters need to
	be altered.
*/
	if (sr27.leased_line == TRUE)
	{
		detection_enable = FALSE;
		acu_mnp_service_class = FULLDUP_ASYNC;
		retry_limit = DISABLED;
		mnp_autorel_time = DISABLED;
	}

/*	If the modem is operating in direct mode the DTE needs to be initailized
	for escape sequence and break detection.
*/
	if (operating_mode == DIRECT)
	{
		dte_init_baud = modem_baud;
		terminal_DTE_flowctrl = DISABLED;
		modem_DTE_flowctrl = DISABLED;
		pass_flowctrl = DISABLED;
		DCE_flowctrl = DISABLED;
	}
}


/*******************************************************************************
/
/	Routine: reconfigure_system_parameters
/
/	Author : RSA
/
/	Creation Date: 05/07/91
/
/	Description : This Routine is called to set up the parameters to be
/		      reconfigured on the selected AT commands.
/
/	Input Parameters: none
/
/	Output Parameters: none
/
/	Global Variables Changed:  all variables allowed to be reconfigured
/
/	Users:	system_reconfigure
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/ Author & Date: RSA/keh 7/1/94
/	Description: Implement new AT command configuration for ETC:
/               slA = 4 (32 byte frame length).
/	Reason: Add ETC support to core ACU
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void reconfigure_system_parameters(void)
{
/*	Determine the DTE speed based upon s112 */
	if (s[112] == 0)
		dte_init_baud = dte_baud;
	else
		dte_init_baud = s[112];

	terminal_DTE_xon_char = XON_CHAR;
	terminal_DTE_xoff_char = XOFF_CHAR;
	modem_DTE_xoff_char = XOFF_CHAR;
	modem_DTE_xon_char = XON_CHAR;
	pass_flowctrl = slX;
	DCE_flowctrl = slG;

	retry_limit = MAX_RETRY;
	loopback_test = ENABLED;
	selective_retrans = ENABLED;
	inactivity_timer = s[30] * 60;

	switch (slA)
	{
		case 0: mnp_stream_size = 64;
			stream_size_256 = 0;
			break;

		case 1: mnp_stream_size = 128;
			stream_size_256 = 1;
			break;

		case 2: mnp_stream_size = 192;
			stream_size_256 = 1;
			break;

		case 3: mnp_stream_size = 256;
			stream_size_256 = 1;
			break;

/* start change keh 7/1/94 => Add 32-byte frames for ETC */
		case 4:
            /* Configure v42 for 32b-byte frame size */
            mnp_stream_size = 32;
            stream_size_256 = 0;
            break;
/* end change keh 7/1/94 => Add 32-byte frames for ETC */
	}

	switch (slK)
	{
/* start change 07/15/94 drc */
		case 0: bypass_break = TRUE;
				  break_type = EXP_DEST;
			break;

		case 1: bypass_break = FALSE;
		        break_type = EXP_DEST;
			break;

		case 2: bypass_break = TRUE;
				  break_type = EXP_NONDEST;
			break;

		case 3: bypass_break = FALSE;
				  break_type = EXP_NONDEST;
			break;

		case 4: bypass_break = TRUE;
				  break_type = NONEXP_NONDEST;
			break;

		case 5: bypass_break = FALSE;
				  break_type = NONEXP_NONDEST;
			break;
/* end change 07/15/94 drc */
	}

	switch (slQ)
	{
		case 0: terminal_DTE_flowctrl =  DISABLED;
			modem_DTE_flowctrl = DISABLED;
			break;

		case 1: terminal_DTE_flowctrl =  XON_XOFF;
			modem_DTE_flowctrl = XON_XOFF;
			break;

		case 2: terminal_DTE_flowctrl =  DISABLED;
			modem_DTE_flowctrl = CTS_RTS;
			break;

		case 3: if (RTS_always_on)
				terminal_DTE_flowctrl =  DISABLED;
			else
				terminal_DTE_flowctrl =  CTS_RTS;
			modem_DTE_flowctrl = CTS_RTS;
			break;

		case 9: terminal_DTE_flowctrl =  TRANSPARENT_XON_XOFF;
			modem_DTE_flowctrl = TRANSPARENT_XON_XOFF;
			pass_flowctrl = DISABLED;
			break;
	}

/*	If the modem is operating in direct mode the DTE needs to be initailized
	for escape sequence and break detection.
*/
	if (operating_mode == DIRECT)
	{
		dte_init_baud = modem_baud;
		terminal_DTE_flowctrl = DISABLED;
		modem_DTE_flowctrl = DISABLED;
		pass_flowctrl = DISABLED;
		DCE_flowctrl = DISABLED;
	}
}


/* start change keh 8/19/94 => New routine for available MNP10 rates */
/*******************************************************************************
/
/	Routine: get_system_rate_map
/
/	Author : RSA
/
/	Creation Date: 8/19/94
/
/	Description :   This routine will return the bit-mapped rates available
/                  to V.42 (actually MNP10) for the current configuration.
/
/	Input Parameters: None
/
/	Output Parameters: uword available rates (bit-mapped)
/                   bit 0 = 1200 BPS (V.22)
/                   bit 1 = 1200 BPS (V.22bis)
/                   bit 2 = 4800 BPS (V.32/bis)
/                   bit 3 = 7200 BPS (V.32bis)
/                   bit 4 = 9600 BPS (V.32/bis)
/                   bit 5 = 12000 BPS (V.32bis)
/                   bit 6 = 14400 BPS (V.32bis)
/                   bit 7-15 = Reserved
/
/	Global Variables Changed: None
/
/	Users:	system_reconfigure
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
uword get_system_rate_map(void)
{
    uword available_rates;

    /* Determine possible V.32/bis rates from s109 (v.32/bis rate map) */
    available_rates = s[109];

    /* Mask off V.32bis rates if we're V.32 only */
    if (s[110] == ENABLE_V32)
        available_rates &= ENABLE_4800_9600;

    /* Shift V.32/bis rates to make room for V.22/bis */
    available_rates <<= 1;

    /* Determine V.22/bis rates from -Q command */
    switch (hyQ)
    {
        case 0: /* V.22bis and V.22 are not available */
            break;

        case 1: /* V.22bis only is available */
            available_rates |= SYSTEM_RATE_BIT_2400;
            break;
        
        case 2: /* V.22bis and V.22 are available */
            available_rates |= SYSTEM_RATE_BIT_2400 | SYSTEM_RATE_BIT_1200;
            break;
    }

    /* Kill rates higher than the DTE speed */
    switch (dte_baud)
    {
        case BPS300:
        case BPS600:
        case BPS1200:
            /* 1200 is the lowest speed supported for MNP10 speed shifts */
            available_rates &= SYSTEM_RATE_MASK_1200_MAX;
            break;

        case BPS2400:
            available_rates &= SYSTEM_RATE_MASK_2400_MAX;
            break;

        case BPS4800:
            available_rates &= SYSTEM_RATE_MASK_4800_MAX;
            break;

        case BPS7200:
            available_rates &= SYSTEM_RATE_MASK_7200_MAX;
            break;

        case BPS9600:
            available_rates &= SYSTEM_RATE_MASK_9600_MAX;
            break;

        case BPS12000:
            available_rates &= SYSTEM_RATE_MASK_12000_MAX;
            break;

        case BPS14400:
        default: /* 14.4k is the highest supported so far */
            break;
    }

    return (available_rates);
}
/* end change keh 8/19/94 => New routine for available MNP10 rates */


