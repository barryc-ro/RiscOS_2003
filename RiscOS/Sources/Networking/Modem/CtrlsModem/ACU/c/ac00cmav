/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00cmav.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains code for the AT&V command.
/
/     Product:          ACU core code
/
/     History:          ac00cmav.c v3.90
/                       ac00cmav.c v3.91
/                       ac00cmav.c v3.94
/                       ac00cmav.c v3.95
/                       ac00cmav.c v4.02
/
/        Created:       10/8/91
/                       12/04/91
/                       1/21/92
/                       1/12/93
/                       7/1/94
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "ee_def.h"
#include "acu_pro.h"
#include "mt_pro.h"

void and_V(ubyte *);
void send_andV_string(ubyte const ** , ubyte * const []);
void output_telephone_num(ubyte, ubyte *);
void send_char(ubyte);
ubyte translate_sreg(ubyte, ubyte);

/*******************************************************************************
/
/     Routine:       and_V
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine will process the ATV command.
/
/                     AT&V  0 - View active configuration and stored profile 0
/                           1 - View active configuration and stores profile 1
/                           2 - View active configuration and stores profile 2
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_V(ubyte *param_ptr)
{
   ubyte num;
   uword addr;
   ubyte eeprom_error;

   /* Get input parameter local */
   num = *param_ptr;

   if (num >= NUMBER_OF_PROFILES)
   {
      error_occurred = TRUE;
      return;
   }

    /*modem_serial_echo(OFF);*/ /* ramn 9/20/96 */
   set_parms(acu_data_bits,acu_parity,acu_stop_bits);

   /* Send CR LF to the DTE   */
   send_andV_string((ubyte const **)&cr_lf_string[0],current_pro_addr);
   send_andV_string((ubyte const **)&cr_lf_string[0],current_pro_addr);

   output_info((ubyte *)ACTIVE_PROFILE,NUMERIC_FORM);

   /* Read Power up profile value from the EEprom   */
   eeprom_error = modem_read_data(POWER_UP_PROFILE,1,(ubyte *)&temp_array[0]);

   /*   If an EEPROM read error occurs, display &Y = 0 */
   if (eeprom_error == TRUE)
      temp_array[0] = 0;

   sr14_ptr = (struct SREG14 *)&sr14;
   sr16_ptr = (struct SREG16 *)&sr16;
   sr21_ptr = (struct SREG21 *)&sr21;
   sr22_ptr = (struct SREG22 *)&sr22;
   sr23_ptr = (struct SREG23 *)&sr23;
   sr27_ptr = (struct SREG27 *)&sr27;

   /* Send current profile to the DTE */
   send_andV_string((ubyte const **)&current_profile[0],current_pro_addr);

   switch (num)
   {
      case 0:
         addr = PROFILE_0_ADD;
         output_info((ubyte *)STORED_PROFILE_0,NUMERIC_FORM);
         break;

      case 1:
         addr = PROFILE_1_ADD;
         output_info((ubyte *)STORED_PROFILE_1,NUMERIC_FORM);
         break;
        
      case 2:
         addr = PROFILE_2_ADD;
         output_info((ubyte *)STORED_PROFILE_2,NUMERIC_FORM);
         break;
   }
   eeprom_error = modem_read_data(addr,PROFILE_SIZE,(ubyte *)&temp_array[0]);

   /*   If an EEPROM read error occurs, return error */
   if (eeprom_error == TRUE)
   {
      error_occurred = TRUE;
      return;
   }

   sr14_ptr = (struct SREG14 *)&temp_array[9];
   sr16_ptr = (struct SREG16 *)&temp_array[10];
   sr21_ptr = (struct SREG21 *)&temp_array[12];
   sr22_ptr = (struct SREG22 *)&temp_array[13];
   sr23_ptr = (struct SREG23 *)&temp_array[14];
   sr27_ptr = (struct SREG27 *)&temp_array[17];

   /* Send stored profile to the DTE */
   send_andV_string((ubyte const **)&stored_profile[0],stored_pro_addr);

   output_info((ubyte *)TELEPHONE_NUMBERS,NUMERIC_FORM);

   /* Send stored telephone numbers to the DTE   */
   addr = TELE_NUMBER_0_ADD;

   for (num=0; num<NUM_TELE_NUMBERS; num++)
   {
      eeprom_error = modem_read_data(addr,TELE_NUMBER_SIZE,(ubyte *)&temp_array[0]);
      if (eeprom_error == TRUE)
         temp_array[0] = 0;

      output_telephone_num(num,(ubyte *)&temp_array[0]);
      addr = addr + TELE_NUMBER_SIZE;
   }
}

/*******************************************************************************
/
/     Routine:       send_and_V_string
/
/     Author:        RSA
/
/     Creation Date: 11/17/91
/
/     Description:   This will parse the parameters passed in and send the
/                    selected characters to the DTE.
/
/     Input Parameters:
/              string - pointer string of characters to be sent to the DTE.
/                        The functions are encoded as follows:
/                           0 - Exit routine
/                           1 - will retrieve a value from the
/                              address array and send 1 ASCII
/                              character to the DTE.
/                           2 - will retrieve a value from the
/                              address array and send 2 ASCII
/                              characters to the DTE.
/                           3 - will retrieve a value from the
/                              address array and send 3 ASCII
/                              characters to the DTE.
/                           4 - will send CR(s[3]) and LF(s[4])
/                              to the DTE.
/                           5 - will check sr14.pulse to determine
/                              if a 'P' or 'T' should be sent to
/                              the DTE.
/                           6 - will indicate that the value to
/                              be sent back is located in a bit
/                              mapped register, therefore it
/                              needs to be translated into a byte
/                              value. This is followed by the following
/                              values:
/                              14 - indicates S14
/                              21 - indicates S21
/                              22 - indicates S22
/                              23 - indicates S23
/                              27 - indicates S27
/                           7 - End of current string.
/                           8 - Command entry absent from display
/                           9 - will indicate that the value to
/                              be sent back is a numeric baud rate
/                              
/           addr_array - Array of addresses of the variables to be displayed.
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: and_V()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void send_andV_string(ubyte const ** string, ubyte * const addr_array[])
{
   ubyte *ptr,offset,num,*ptr2;

   offset = 0;

   ptr2 = (ubyte *)*string;
   while (-1)
   {
      switch (*ptr2)
      {
         case 0:
            /*   End of string   */
            return;

         case 1:
            /*   Send one character to the DTE   */
            send_char((ubyte)(*addr_array[offset++] + '0'));
            ptr2++;
            break;

         case 2:
            /*   Send two characters to the DTE    */
            ptr = d_to_a(*addr_array[offset++]);
            ptr++;
            send_char(*ptr++);
            send_char(*ptr++);
            ptr2++;
            break;

         case 3:
            /*   Send three characters to the DTE   */
            ptr = d_to_a(*addr_array[offset++]);
            send_char(*ptr++);
            send_char(*ptr++);
            send_char(*ptr++);
            ptr2++;
            break;

         case 4:
            /*   Send CR LF to the DTE   */
            send_char(s[3]);
            send_char(s[4]);
            ptr2++;
            break;

         case 5:
            /*   Determine if 'P' or 'T' should be sent to the DTE       */
            if (sr14_ptr->pulse == 0)
               send_char('T');
            else
               send_char('P');
            ptr2++;
            break;

         case 6:
            /*   Get value from bit mapped register */
            ptr2++;
            num = *ptr2++;
            num = translate_sreg(num,*ptr2);
            send_char((ubyte)(num + '0'));
            ptr2++;
            break;

         case 8:
            offset++;

            /* Intentionally fall through */

         case 7:
            string++;
            ptr2 = (ubyte *)*string;
            break;


         case 9:
            /* 9 - Output Decimal baud rate from rate variable ('7200' from
               BPS7200).  Will send a V.32bis rate in ASCII characters to the
               terminal.  This is used for the AT%B command which sets the
               DCE rate, and has parameters of the form: AT%B7200
            */
            /* Send baudrate to terminal */
            switch (*addr_array[offset++])
            {
               case BPS4800:
                  send_char('4');
                  send_char('8');
                  break;

               case BPS7200:
                  send_char('7');
                  send_char('2');
                  break;

               case BPS9600:
                  send_char('9');
                  send_char('6');
                  break;

               case BPS12000:
                  send_char('1');
                  send_char('2');
                  send_char('0');
                  break;

               case BPS14400:
                  send_char('1');
                  send_char('4');
                  send_char('4');
                  break;

               default:
                  send_char('0');
                  send_char('0');
                  break;
            }

            send_char('0');
            send_char('0');
            ptr2++;
            break;

         default:
            /* Send ASCII character   */
            send_char(*ptr2++);
            break;
      }
   }
}

/*******************************************************************************
/
/     Routine:       output_telephone_num
/
/     Author:        RSA
/
/     Creation Date: 11/17/91
/
/     Description:   This will display the selected stored telephone number
/                    to the DTE.
/
/     Input Parameters:
/           num - Value indicating which stored number to display.
/           num_ptr - Pointer to the telephone number to be displayed.
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: and_V()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void output_telephone_num(ubyte num, ubyte *num_ptr)
{
   ubyte pad;

   pad = 0;

   /* Send the "&Z=" string to the DTE   */
   send_char('&');
   send_char('Z');
   send_char((ubyte)(num + '0'));
   send_char(' ');
   send_char('=');

   /* Send the telephone number to the DTE   */
   while (*num_ptr != NULL)
   {
      send_char(*num_ptr++);
      pad++;
   }

   /* If the last telephone number on the line the send back CR LF   */


/* shujin 3/16/96 */      
        send_char(s[3]);
        send_char(s[4]);

#if 0
    if ((num == 1) || (num == 3))
    {
        send_char(s[3]);
        send_char(s[4]);
    }


/* Else need to pad spaces to the location where the next number 
   is to be displayed      */
    else
    {
        pad = (TELE_NUMBER_SIZE - pad) + 5;
        while (pad != 0)
        {
            send_char(' ');
            pad--;
        }
    }
#endif

}

/*******************************************************************************
/
/     Routine:       send_char
/
/     Author:        RSA
/
/     Creation Date: 11/17/91
/
/     Description:   This will send the character passed in to the DTE.
/
/     Input Parameters: ubyte ch - character to be sent to the DTE
/
/     Output Parameters: none
/
/     Global Variables Changed:  None
/
/     Users: send_andV_string(), output_telephone_num()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void send_char(ubyte ch)
{
   while (acu_to_free() < 5)
      ;
   acu_to_char(ch);
}

/*******************************************************************************
/
/     Routine:       translate_sreg
/
/     Author:        RSA
/
/     Creation Date: 11/17/91
/
/     Description:   This will determine the byte value of the selected bit
/            mapped entry.
/
/     Input Parameters: ubyte sreg - Selected bit mapped register.
/                                      14 - indicates S14
/                                      21 - indicates S21
/                                      22 - indicates S22
/                                      23 - indicates S23
/                                      27 - indicates S27
/                       ubyte offset - Selected bit mapped entry
/
/     Output Parameters: ubyte - byte value of bit mapped entry
/
/     Global Variables Changed:  None
/
/     Users: send_andV_string()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
*******************************************************************************/
ubyte translate_sreg(ubyte sreg, ubyte offset)
{
   switch (sreg)
   {
      case 14:
         switch (offset)
         {
            case 1: return((ubyte)sr14_ptr->echo_cmd_flag);
            case 2: return((ubyte)sr14_ptr->disable_result_code);
            case 3: return((ubyte)sr14_ptr->verbose_form);
            case 5: return((ubyte)sr14_ptr->pulse);

            default: error_occurred = TRUE;
         }
         break;

      case 21:
         switch (offset)
         {
            case 0: return((ubyte)sr21_ptr->auxiliary_relay_ctrl);
            case 2: return((ubyte)sr21_ptr->CTS_on);
            case 3: return((ubyte)sr21_ptr->DTR_control);
            case 5: return((ubyte)sr21_ptr->RLSD_reflects_CD);
            case 6: return((ubyte)sr21_ptr->DSR_only_at_handshaking);
            case 7: return((ubyte)sr21_ptr->long_space_discon);

            default: error_occurred = TRUE;
         }
         break;

      case 22:
         switch (offset)
         {
            case 0: return((ubyte)sr22_ptr->speaker_vol);
            case 2: return((ubyte)sr22_ptr->speaker_ctrl);
            case 7: return((ubyte)sr22_ptr->uk_hook);

            default: error_occurred = TRUE;
         }
         break;

      case 23:
         switch (offset)
         {
            case 6: return((ubyte)sr23_ptr->guard_tone);
         
            default: error_occurred = TRUE;
         }
         break;

      case 27:
         switch (offset)
         {
            case 0: return((ubyte) (sr27_ptr->comm_mode +
                                         4*sr27_ptr->autosync));
            case 2: return((ubyte)sr27_ptr->leased_line);
            case 4: return((ubyte)sr27_ptr->clock_source);

            default: error_occurred = TRUE;
         }
         break;
   }
   return (0);
}

