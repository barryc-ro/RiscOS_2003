/****************************************************************************
/
/      Copyright 1988,1989,1990,1991,1992,1993,1994.
/      All Rights Reserved by:
/          RSA
/          7701 Six Forks Road
/          Suite 120
/          Raleigh, NC  27615
/          (919) 846-7171
/
/      This document contains material confidential to RSA its contents must
/      not be revealed, used or disclosed to anyone or company with out
/      written permission by RSA.  The information contained herein is solely
/      for the use of RSA.
/
/      File:           ac00cmvc.c
/
/      Module Version: ACU 4.??
/
/      Function:       This file contains driver routines for the Voice AT
/                      commands.  The Voice AT commands listed in this file
/                      are either supported by Modules other than Voice 
/                      (i.e. FAX), or have functional demands that fall 
/                      under ACU control (i.e. RING control).
/
/      Product:        ACU core code
/
/      History:        ac00cp.c V4.02
/
/          Created:    2/9/95
/
/          ---------------------------------------------------------
/          -                   Modifications                       -
/          ---------------------------------------------------------
/
/          Author & Date:  RSA
/          Description:
/          Reason:
/
/          Author & Date: RSA 3/22/1994.
/          Description: Added the new plusv_VIP routine.
/          Reason: Needed to reset the voice_VNH_active flag. We could not
/               reset the flag in its current scenario without violating
/               the ACU - Voice interface, so the parsing and function call
/               is now done here.        
/
/  Author & Date: RSA 5/26/1995.
/  Description: Changed the param for fax/voice _flow_control.
/  Reason: The parameter is defined by 592 and will one single fax variable
/          instead of a voice and fax variable to keep track of.
/
/  Author & Date: RSA 6/2/1995. => 8/15/95 removed. executer in "vce_pro.h"/keh
/  Description: Added .h header dependency.
/  Reason: Needed for the new voice parsing and execution.
/
/  Author & Date: RSA 6/14/1995.
/  Description: Added the functions for Voice/Packet Protocol Parsing.
/  Reason: Needed for the IS 101 spec for voice (+VPP).
/
*****************************************************************************/
/*#include "mod_def.h"*/ /* added by ramn on 2/9/96 */
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "acu_vce.h"
#include "vce_pro.h"
#include "mt_pro.h"
#include "fp_pro.h"
#include "par_def.h"
#include "par_pro.h"
#include "resp_cod.h" /* ramn 1/12/96 */

/* Local voice routines */
void set_voice_acu_at_cmds(ubyte state);
void acu_vce_command(uword which_command,ubyte *param_ptr);
void acu_vce_query(uword which_command);
void acu_vce_command_error(void);
void acu_config_voice(void);
void voice_plus_FMR(void);
void plus_VIP_eq(void);
void plus_VIP_e(void);
void plus_VNH_eq(void);
void plus_VNH_e(ubyte *parm_ptr);
void plus_VNH_q(void);
void plus_VCID_eq(void);
void plus_VCID_e(ubyte *parm_ptr);
void plus_VCID_q(void);
void plus_VDR_eq(void);
void plus_VDR_e(ubyte *parm_ptr);

#if 0   /* ramn 8/19/96 */
void plus_VPR_eq(void);
void plus_VPR_e(ubyte *parm_ptr);
void plus_VPR_q(void);
void plus_VDT_eq(void);
void plus_VDT_e(ubyte *parm_ptr);
void plus_VDT_q(void);
void plus_VPP_eq(void);
void plus_VPP_e(ubyte *parm_ptr);
void plus_VPP_q(void);
#endif

#if 0	 /* ramn 11/29/95 */
void pnd_BDR_eq(void);
void pnd_BDR_e(ubyte *parm_ptr);
void pnd_BDR_q(void);
void pnd_CID_eq(void);
void pnd_CID_q(void);
void pnd_CID_e(ubyte *parm_ptr);
void pnd_CLS_eq(void);
void pnd_CLS_q(void);
void pnd_CLS_e(ubyte *parm_ptr);
void pnd_MDL_q(void);
void pnd_MFR_q(void);
void pnd_REV_q(void);
extern void set_voice_rock_at_cmds(ubyte);
#endif /* ramn 11/29/95 */

/* External Routines used locally */
extern void set_voice_tia_at_cmds(ubyte);

void plus_VDR_q(void);


/******************************************************************************
/
/                  Parser Structure for TIA Voice commands 
/
/  -------------------------------------------------------------
/  -                       Modifications                       -
/  -------------------------------------------------------------
/
/  Author & Date: RSA
/  Description:
/  Reason:
/
*******************************************************************************/
PARSE_CMD_TABLE_STRUCT voice_acu_commands []=
{
/* Fax commands defined by TIA IS-101 (Requires the
  ACU FAX AT Command Driver (ac00cmfx.c) */
/*  "+FCLASS=?",   plus_FCLASS_eq, NO_PARAM,           SEMICOL_END,
 *  "+FCLASS=",    plus_FCLASS_e,  REAL_NUM_STRING,    SEMICOL_END,
 *  "+FCLASS?",    plus_FCLASS_q,  NO_PARAM,           SEMICOL_END,
 *  "+FMI?",       plus_FMI,       NO_PARAM,           SEMICOL_END, 
 *  "+FMM?",       plus_FMM,       NO_PARAM,           SEMICOL_END, 
 *  "+FLO=?",      plus_FLO_eq,    NO_PARAM,           SEMICOL_END, 
 *  "+FLO=",       plus_FLO_e,     BYTE_NUMERIC,       SEMICOL_END, 
 *  "+FLO?",       plus_FLO_q,     NO_PARAM,           SEMICOL_END,
 */
/* TIA Voice AT Commands that specify ACU funcitons */
    (ubyte *) "+FMR?",   voice_plus_FMR,NO_PARAM,       SEMICOL_END,
/* 4/15/96 shujin */
    (ubyte *) "+GMR?",   voice_plus_FMR,NO_PARAM,       SEMICOL_END,
    (ubyte *) "+FREV?",   voice_plus_FMR,NO_PARAM,       SEMICOL_END,


#if 0	/* ramn 8/19/96 */
    (ubyte *) "+VPR=?",  plus_VPR_eq,   NO_PARAM,       SEMICOL_END, 
    (ubyte *) "+VPR=",   plus_VPR_e,    BYTE_NUMERIC,   SEMICOL_END, 
    (ubyte *) "+VPR?",   plus_VPR_q,    NO_PARAM,       SEMICOL_END,
#endif

/*    (ubyte *) "+VIP=?",  plus_VIP_eq,   NO_PARAM,       SEMICOL_END, *//* ramn 10/10/95 */
    (ubyte *) "+VIP",    plus_VIP_e,    NO_PARAM,       SEMICOL_END,

    (ubyte *) "+VNH=?",  plus_VNH_eq,   NO_PARAM,       SEMICOL_END, 
    (ubyte *) "+VNH=",   plus_VNH_e,    BYTE_NUMERIC,   SEMICOL_END, 
    (ubyte *) "+VNH?",   plus_VNH_q,    NO_PARAM,       SEMICOL_END,

    (ubyte *) "+VCID=?", plus_VCID_eq,  NO_PARAM,       SEMICOL_END, 
    (ubyte *) "+VCID=",  plus_VCID_e,   BYTE_NUMERIC,   SEMICOL_END, 
    (ubyte *) "+VCID?",  plus_VCID_q,   NO_PARAM,       SEMICOL_END,

    (ubyte *) "+VDR=?",  plus_VDR_eq,   NO_PARAM,       SEMICOL_END, 
    (ubyte *) "+VDR=",   plus_VDR_e,    COMPOUND_BYTE,  SEMICOL_END,
    (ubyte *) "+VDR?",   plus_VDR_q,    NO_PARAM,       SEMICOL_END, /* ramn 10/10/95 */

#if 0
    (ubyte *) "+VDT=?",  plus_VDT_eq,   NO_PARAM,       SEMICOL_END, 
    (ubyte *) "+VDT=",   plus_VDT_e,    COMPOUND_BYTE,  SEMICOL_END,
    (ubyte *) "+VDT?",   plus_VDT_q,    NO_PARAM,       SEMICOL_END,  /* ramn 10/10/95 */
#endif /* ramn2/27/96 */

/*    (ubyte *) "+VPP=?",  plus_VPP_eq,   NO_PARAM,       SEMICOL_END, 
*    (ubyte *) "+VPP=",   plus_VPP_e,    BYTE_NUMERIC,   SEMICOL_END, 
*    (ubyte *) "+VPP?",   plus_VPP_q,    NO_PARAM,       SEMICOL_END,
*/ /* commented by ramn on 10/10/95 */

/* TIA IS 101 Voice commands not supported... 
 *  "+VDID=?",          plus_VDID_eq,   NO_PARAM,       SEMICOL_END, 
 *  "+VDID=",           plus_VDID_e,    BYTE_NUMERIC,   SEMICOL_END, 
 *  "+VDID?",           plus_VDID_q,    NO_PARAM,       SEMICOL_END,
 */

/* Rockwell Voice AT Commands that specify ACU funcitons */
/*
 *   (ubyte *) "#BDR=?",  pnd_BDR_eq,    NO_PARAM,       SEMICOL_END, 
 *   (ubyte *) "#BDR=",   pnd_BDR_e,     BYTE_NUMERIC,   SEMICOL_END, 
 *   (ubyte *) "#BDR?",   pnd_BDR_q,     NO_PARAM,       SEMICOL_END,
 *   (ubyte *) "#CID=?",  pnd_CID_eq,    NO_PARAM,       SEMICOL_END, 
 *   (ubyte *) "#CID=",   pnd_CID_e,     BYTE_NUMERIC,   SEMICOL_END, 
 *   (ubyte *) "#CID?",   pnd_CID_q,     NO_PARAM,       SEMICOL_END,
 *   (ubyte *) "#CLS=?",  pnd_CLS_eq,    NO_PARAM,       SEMICOL_END, 
 *   (ubyte *) "#CLS=",   pnd_CLS_e,     BYTE_NUMERIC,   SEMICOL_END, 
 *   (ubyte *) "#CLS?",   pnd_CLS_q,     NO_PARAM,       SEMICOL_END,
 *   (ubyte *) "#MDL?",   pnd_MDL_q,     NO_PARAM,       SEMICOL_END,
 *   (ubyte *) "#MFR?",   pnd_MFR_q,     NO_PARAM,       SEMICOL_END,
 *   (ubyte *) "#REV?",   pnd_REV_q,     NO_PARAM,       SEMICOL_END,
*/  /* ramn 11/29/95 */
    END_OF_PARSE_TABLE
};



/*******************************************************************************
/
/      Routine:        set_voice_acu_at_cmds
/
/      Author:         RSA
/
/      Creation Date:  12/16/94
/
/      Description:    This Routine enables parsing of ACU VOICE AT commands.
/                      These are commands defined by voice specifications
/                      which are implemented by the ACU.
/
/      Input Parameters:   state - OFF (0) to disable, ON (otherwise) to enable.
/
/      Output Parameters: None
/
/      Global Variables Changed:  None
/
/      Users:
/
/      -------------------------------------------------------------
/      -                        Modifications                        -
/      -------------------------------------------------------------
/
/      Author & Date:    RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void set_voice_acu_at_cmds(ubyte state)
{
   if (state == OFF)
       at_parser_tables(DISABLE_TABLE,voice_acu_commands);
   else
       at_parser_tables(ENABLE_TABLE,voice_acu_commands);
}




/*******************************************************************************
/
/   Routine:        acu_vce_command_error
/
/   Author:         RSA
/
/   Creation Date:  01/16/95
/
/   Description:    This is called when any VOICE command has been found to
/                   be in error.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: error_occurred
/
/   Users: All VOICE AT command action routines
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void acu_vce_command_error(void)
{
    error_occurred = TRUE;
}

/*******************************************************************************
/
/      Routine:        acu_config_voice
/
/      Author:         RSA
/
/      Creation Date:  12/16/94
/
/      Description:    This Routine configures the VOICE module with
/                      the current ACU parameters.  It is typically called
/                      before voice command executions to update voice to
/                      the current non-voice specific conditions of the ACU.
/
/      Input Parameters:   None.
/
/      Output Parameters:  None
/
/      Global Variables Changed:  None.
/
/      Users:
/
/      -------------------------------------------------------------
/      -                        Modifications                        -
/      -------------------------------------------------------------
/
/      Author & Date:    RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void acu_config_voice(void)
{
/* start change keh 4/13/95 => prototype mismatch */
/*    voice_configure(dte_baud,voice_cmd_set,sr22.speaker_vol); */
/* Start Change 5/26/1995. */
   voice_configure(dte_baud,voice_cmd_set,sr22.speaker_vol,fax_flow_control, voice_caller_id);
/*                        voice_flow_control, voice_caller_id); */
/* End Change 5/26/1995. */
/* end change keh 4/13/95 => prototype mismatch */
}


/******************************************************************************
/
/   Routine:        voice_plus_FMR
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the TIA Voice command:
/                   "AT_FMR?"
/                   The +FRM? command is used to report the Manufacture Revision
/                       string.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                   (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_tia_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void voice_plus_FMR(void)
{
#if 0
    output_info(VOICE_FMR_IDENTIFICATION,(ubyte)sr14.verbose_form);  /* ramn 1/16/96 */
#endif
			mm_dsp_version();
			output_send_cr_lf(); /*ramn 2/24/96 */
}

/******************************************************************************
/
/   Routine:        plus_VPR_eq
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the TIA Voice command:
/                   "AT+VPR=?"
/                   The +VPR command is used to set DTE Rate.
/                   This routine responds to the terminal with
/                   the vaild command input.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_tia_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
#if 0   /* ramn 8/19/96 */
void plus_VPR_eq(void)
{
    output_info((ubyte *)PLUS_VPR_QUERY_INFO,(ubyte)sr14.verbose_form);   /* ramn 1/16/96 */
}
#endif

/******************************************************************************
/
/   Routine:        plus_VPR_e
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the TIA Voice command:
/                   "AT+VPR="
/                   The +VPR command is used to set DTE Rate.
/                   This routine will set DTE Rate.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_tia_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
#if 0    /* ramn 8/19/96 */
void plus_VPR_e(ubyte *parm_ptr)
{
    ubyte rate = 0;

    /* Which rate was requested? */
    switch (*parm_ptr)
    {
        case 0: dont_autobaud = FALSE;
            break;
        case 1: rate = BPS2400;
            break;
        case 2: rate = BPS4800;
            break;
        case 3: rate = BPS7200;
            break;
        case 4: rate = BPS9600;
            break;
        case 5: rate = BPS12000;
            break;
        case 6: rate = BPS14400;
            break;
        case 7: rate = BPS16800;
            break;
        case 8: rate = BPS19200;
            break;
        case 16: rate = BPS38400;
            break;
        case 24: rate = BPS57600;
            break;
        case 48: rate = BPS115200;
            break;

        default:
            acu_vce_command_error();
            return; /* Don't fall through! */
    }

    /* If we've gotten this far, its a vaild command, so */
    /* Set command variable, and corresponding ACU Baud value */
    voice_port_rate = *parm_ptr;
    new_dte_baud = rate;

    /* If a rate has been set... */
    if (rate)
    {
        dont_autobaud = TRUE;       /* Force the ACU to remain at the new rate */
        voice_inactivity_timer_on = TRUE;   /* Start deadman timer */
/* Start Change 3/29/1994. */
        voice_enable_inact_timer();
/* End Change 3/29/1994. */
    }
}
#endif

/******************************************************************************
/
/   Routine:        plus_VPR_q
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the TIA Voice command:
/                   "AT+VPR?"
/                   The +VPR command is used to set DTE Rate.
/                   This routine responds to the terminal with
/                   the current command value.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_tia_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
#if 0   /* ramn 8/19/96 */
void plus_VPR_q(void)
{
    output_info(d_to_a(voice_port_rate), (ubyte)sr14.verbose_form);   /* ramn 1/16/96 */
}
#endif

/******************************************************************************
/
/   Routine:        plus_VIP_eq
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the TIA Voice command:
/                   "AT+VIP=?"
/                   The +VIP command is used to initialize Voice Parameters.
/                   This routine responds to the terminal with
/                   the vaild command input.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_tia_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_VIP_eq(void)
{
    /* Only output OK, verifing command support */
}   

/******************************************************************************
/
/   Routine:        pnd_VIP_e
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the TIA Voice command:
/                   "AT+VIP="
/                   The +VIP command is used to initialize Voice Parameters.
/                   This routine will initialize Voice Parameters.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_tia_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_VIP_e(void)
{
/* start change keh >> redo VNH */
/* done in init_voice() */
/*    voice_VNH_active = FALSE; */
/* end change keh >> redo VNH */

/*    voice_command_init(voice_cmd_set); */  /* commented by ramn on 10/10/95 */
	voice_command_init(); /* changed by ramn on 10/10/95 */

/* Start Change 3/29/1994. */
    initialize_voice(VOICE_INIT_VIP);
/* End Change 3/29/1994. */
}



/******************************************************************************
/
/   Routine:        plus_VNH_eq
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the TIA Voice command:
/                   "AT+VNH=?"
/                   The +VNH command is used to set the Hangup condition.
/                   This routine responds to the terminal with
/                   the vaild command input.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_tia_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_VNH_eq(void)		/* ramn 10/10/95 */
{
    output_info((ubyte *)PLUS_VNH_QUERY_INFO,(ubyte)sr14.verbose_form);   /* ramn 1/16/96 */
}

/******************************************************************************
/
/   Routine:        plus_VNH_e
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the TIA Voice command:
/                   "AT+VNH="
/                   The +VNH command is used to set the Hangup condition.
/                   This routine will set the Hangup condition.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_tia_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_VNH_e(ubyte *parm_ptr)
{
    if ((*parm_ptr >= 0) && (*parm_ptr <= 2))  /* ramn 10/10/95 */
/* start change keh 3/31/95 >> redo VNH */
#if 0   
        voice_VNH_active = *parm_ptr;
#endif  
        acu_cntrld_hangup = *parm_ptr;
/* end change keh 3/31/95 >> redo VNH */
    else
        acu_vce_command_error();
}

/******************************************************************************
/
/   Routine:        plus_VNH_q
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the TIA Voice command:
/                   "AT+VNH?"
/                   The +VNH command is used to set the Hangup condition.
/                   This routine responds to the terminal with
/                   the current command value.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_tia_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_VNH_q(void)
{
/* start change keh 3/31/95 >> redo VNH */
#if 0   
    output_info(d_to_a(voice_VNH_active), (ubyte)sr14.verbose_form);   /* ramn 1/16/96 */
#endif  
    output_info(d_to_a(acu_cntrld_hangup), (ubyte)sr14.verbose_form);   /* ramn 1/16/96 */
/* end change keh 3/31/95 >> redo VNH */
}



/******************************************************************************
/
/   Routine:        plus_VCID_eq
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the TIA Voice command:
/                   "AT+VCID=?"
/                   The +VCID command is used to configure voice Caller ID.
/                   This routine responds to the terminal with
/                   the vaild command input.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_tia_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_VCID_eq(void)
{
/*    output_info((ubyte *)PND_CID_QUERY,(ubyte)sr14.verbose_form); */ /* ramn 10/10/95 */
    output_info((ubyte *)PLUS_VCID_QUERY_INFO,(ubyte)sr14.verbose_form); /* ramn 1/16/96 */
}

/******************************************************************************
/
/   Routine:        plus_VCID_e
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the TIA Voice command:
/                   "AT+VCID="
/                   The +VCID command is used to configure voice Caller ID.
/                   This routine will configure voice Caller ID.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_tia_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_VCID_e(ubyte *parm_ptr)
{
/* start change keh 8/15/95 => ubytes are never  < 0 */
/*    if ((*parm_ptr >= 0) && (*parm_ptr <= 2)) */
    if (*parm_ptr <= 2)
/* end change keh 8/15/95 => ubytes are never < 0 */
	 {
        voice_caller_id = *parm_ptr;
	 }
    else
        acu_vce_command_error();
}

/******************************************************************************
/
/   Routine:        plus_VCID_q
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the TIA Voice command:
/                   "AT+VCID?"
/                   The +VCID command is used to configure voice Caller ID.
/                   This routine responds to the terminal with
/                   the current command value.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_tia_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_VCID_q(void)
{
    output_info(d_to_a(voice_caller_id), (ubyte)sr14.verbose_form);   /* ramn 1/16/96 */
}


/******************************************************************************
/
/   Routine:        plus_VDR_eq
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the TIA Voice command:
/                   "AT+VDR=?"
/                   The +VDR command is used to set the Distinctive Ring report.
/                   This routine responds to the terminal with
/                   the vaild command input.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_tia_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_VDR_eq(void)
{	/* changed by ramn on 10/10/95 */
    output_info((ubyte *)PLUS_VDR_QUERY_INFO,(ubyte)sr14.verbose_form); 
}

/******************************************************************************
/
/   Routine:        plus_VDR_e
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the TIA Voice command:
/                   "AT+VDR="
/                   The +VDR command is used to set the Distinctive Ring report.
/                   This routine will set the Distinctive Ring reporting.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/       Parameter structure for AT command's w/ compound byte values
/        [f,p,f,p,...0] (f=field, p=parameter value, 0 is end of parameters)
/       Example:
/           AT+F=5,6,7,8 => [0x1,0x5, 0x2,0x6, 0x3,0x7, 0x4,0x8, 0x00] 
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_tia_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_VDR_e(ubyte *parm_ptr)
{
    ubyte field,value,i;

    /* Command format: at+vdr=e,r
        where field 1 (e) = enable, and field 2 (r) = report.
        if e = 0, r is N/A,
        if e = 1 and r = 0, reporting of DRON/DROFF is enabled.
        if e = 1 and r != 0, r == reserved (report error)
        */
    /* 3 fields to parse, Enable,Report, and END */
    for (i=0; i<3; i++)
    {
        field = *parm_ptr++;
        value = *parm_ptr++;
        switch (field)
        {
            case 0:
                /* If no fields are present (i==0 and AT+VDR=<CR>) set
                    the defaults, otherwise its the endof parameter array */
                if (i==0)
                {
                    voice_dist_ring_active = FALSE;
                    voice_dist_ring_intvl = 0;
                }
                return;

            case 1:
                /* If field 1 (ENABLE) is present, check it's value. */
                /* 0 == Disabled (AT+VDR=0) */
                if (value == 0)
                {
                    voice_dist_ring_active = FALSE;

                    /* Any other values are N/A, so return */
                    return;
                }
                /* 1 == Enable */
                else if (value == 1)
                {
                    /* AT+VDR=1 */
                    voice_dist_ring_active = TRUE;
                }
                /* Else out of bounds */
                else
                {
						/* SLei added for International test*/
							if ((value&0x02) || (value&0x01) || (value&0x04))
						  		voice_dist_ring_active = value; 
                    acu_vce_command_error();
                    return;
                }
                break;

            case 2:
                /* If field 2 (REPORT) is present all values are spec'ed. */
					 if(value <= 35)  /* ramn 10/10/95 */
					 {	
                	voice_dist_ring_intvl = value;
					 }
					 else
					 {
						acu_vce_command_error();
						return;
					 }
                break;

            default:
                acu_vce_command_error();
                return;
        }  /* switch on parameter field */
    } /* for */

    /* If we exit the FOR loop there were more than 2 parameters for
        the command... */
    acu_vce_command_error();
}
/***************************************************************************
*
* added by ramn on 10/10/95
*
****************************************************************************/
void plus_VDR_q(void)
{
	ubyte *ptr1;
	
	ptr1 = (ubyte *)&pt[0];
#if 0 
	*ptr1++ = 0x0d; /* CR */
	*ptr1++ = 0x0a; /* LF */
#endif	  /* ramn */
	vce_store_b_to_a(voice_dist_ring_active,&ptr1);
	*ptr1++ = ',';
	vce_store_b_to_a(voice_dist_ring_intvl,&ptr1);
	*ptr1= '\0';
	output_info((ubyte *)&pt[0],(ubyte)sr14.verbose_form);	/* ramn 1/16/96 */

}

#if 0	 /* ramn 8/19/96 */
void plus_VDT_q(void)
{
	ubyte *ptr1;

	ptr1 = (ubyte *)&pt[0];
#if 0
	*ptr1++ = 0x0d; /* CR */
	*ptr1++ = 0x0a; /* LF */
#endif     /* ramn */
	vce_store_b_to_a(voice_dist_ctl_active,&ptr1);
	*ptr1++ = ',';
	vce_store_b_to_a(voice_dist_ctl_intvl,&ptr1);
	*ptr1= '\0';
	output_info((ubyte *)&pt[0],(ubyte)sr14.verbose_form);  /* ramn 1/16/96 */
}
#endif 

/*********** till here by ramn 10/10/95 ************************************/


/******************************************************************************
/
/   Routine:        plus_VDT_eq
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the TIA Voice command:
/                   "AT+VDT=?"
/                   The +VDT command is used to set Callback Cadence reporting.
/                   This routine responds to the terminal with
/                   the vaild command input.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_tia_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
#if 0   /* ramn 8/19/96 */
void plus_VDT_eq(void)
{
	/* changed by ramn on 10/10/95 */
    output_info((ubyte *)PLUS_VDT_QUERY_INFO,(ubyte)sr14.verbose_form);		/* ramn 1/16/96 */
}
#endif

/******************************************************************************
/
/   Routine:        plus_VDT_e
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the TIA Voice command:
/                   "AT+VDT="
/                   The +VDT command is used to set Callback Cadence reporting.
/                   This routine will set Callback Cadence reporting.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/       Parameter structure for AT command's w/ compound byte values
/        [f,p,f,p,...0] (f=field, p=parameter value, 0 is end of parameters)
/       Example:
/           AT+F=5,6,7,8 => [0x1,0x5, 0x2,0x6, 0x3,0x7, 0x4,0x8, 0x00] 
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_tia_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
#if 0 		/* ramn 8/19/96 */
void plus_VDT_e(ubyte *parm_ptr)
{
    ubyte field,value,i;

    /* Command format: at+vdt=e,r
        where field 1 (e) = enable, and field 2 (r) = report.
        if e = 0, r is N/A,
        if e = 1 and r = 0, reporting of CPON,OFF is enabled.
        if e = 1 and r != 0, reserved (report error)
        */
    /* 3 fields to parse, Enable,Report, and END */
    for (i=0; i<3; i++)
    {
        field = *parm_ptr++;
        value = *parm_ptr++;
        switch (field)
        {
            case 0:
                /* If no fields are present (AT+VDT=<CR>) set the defaults,
                    otherwise its the endof parameter array */
                if (i==0)
                {
                    /* Defaults */
                    voice_dist_ctl_active = FALSE;
                    voice_dist_ctl_intvl = 0;
                    voice_enable_cadence_rpt(voice_dist_ctl_active,
                        voice_dist_ctl_intvl);
                }
                return;

            case 1:
                /* If field 1 (ENABLE) is present, check it's value. */
                /* 0 == Disabled (AT+VDT=0) */
                if (value == 0)
                {
                    voice_dist_ctl_active = FALSE;
                    voice_enable_cadence_rpt(voice_dist_ctl_active,0);

                    /* Any other values are N/A, so return */
                    return;
                }
                /* 1 == Enabled (AT+VDT=1) */
                else if (value == 1)
                {
                    voice_dist_ctl_active = TRUE;
                    voice_enable_cadence_rpt(voice_dist_ctl_active,
                        voice_dist_ctl_intvl);
                }
                /* Else out of bounds */
                else
                {
                    acu_vce_command_error();
                    return;
                }
                break;

            case 2:
                /* Test Enable parameter: 0 = disabled (AT+VDT=0) */
                if (value == 0)
                {
                    voice_dist_ctl_intvl = 0;
                    voice_enable_cadence_rpt(voice_dist_ctl_active,
                        voice_dist_ctl_intvl);
                }
                /* Non-zero is reserved for further study */
                else
                {
                    acu_vce_command_error();
                    return;
                }
                break;

            default:
                acu_vce_command_error();
                return;

        }  /* switch on parameter field */
    } /* for */

    /* If we exit the FOR loop there were more than 2 parameters for
        a 2 parameter only command */
    acu_vce_command_error();
}
#endif

/* Start Change 6/14/1995. */
/******************************************************************************
/
/   Routine:        plus_VPP_eq
/
/   Author:         RSA
/
/   Creation Date:  12/16/95
/
/   Description:    This routine is called to implement the VOICE command:
/                    "AT+VPP=?"
/                   The +VPP command is used to set the Packet Protocol Parm.
/                   This routine will output an ASCII string representing
/                       the allowed values for the "AT+VPP=<value>" command.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                (unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax20_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
#if 0	 /* ramn 8/19/96 */
void plus_VPP_eq(void)
{
    /* Respond to dte with capability */
    output_info((ubyte *)FAX_FPP_QUERY, (ubyte)sr14.verbose_form);		/* ramn 1/16/96 */
}
#endif 


/******************************************************************************
/
/   Routine:        plus_VPP_e
/
/   Author:         RSA
/
/   Creation Date:  12/16/95
/
/   Description:    This routine is called to implement the FAX command:
/                    "AT+VPP=<value>"
/                   The +VPP command is used to set the Packet Protocol Parm.
/                   This action routine will set the Packet Protocol Parameter.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                <value> is an 8 bit integer.
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax20_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
#if 0    /* ramn 8/19/96 */
void plus_VPP_e(ubyte *parm_ptr)
{
    ubyte num;

    /* Get AT command parameter locally */
    num = *parm_ptr;

    /* Only 1 and 0 are valid AT command parms for +VPP */
/* start change keh 8/15/95 => ubytes are never  < 0 */
/*    if (num >= 0 && num <= 1) */
    if (num <= 1)
/* end change keh 8/15/95 => ubytes are never < 0 */
    {
        /* if the value changed, and fax is active, reconfigure the I/O */
        if (fax_packet_protocol != num && fax_class)
        {
            while (acu_to_num());          /* make sure all the outgoing data */
            while (!check_all_sent());     /* is flushed */
            if (num)
            {
                acu_packet_protocol(ON, PP_TIMEOUT);
                dont_echo = TRUE;
            }
            else
            {
                acu_packet_protocol(OFF, PP_TIMEOUT);
                dont_echo = FALSE;
            }
        }

        fax_packet_protocol = num;  /* assign new value */
    }
    else
    {
        acu_vce_command_error();
    }

}
#endif

/******************************************************************************
/
/   Routine:        plus_VPP_q
/
/   Author:         RSA
/
/   Creation Date:  12/16/95
/
/   Description:    This routine is called to implement the FAX command:
/                    "AT+VPP?"
/                   The +VPP command is used to set the Packet Protocol Parm.
/                   This routine will output an ASCII string representing
/                       the current Packet Protocol Parameter.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                (unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax20_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
#if 0	/* ramn 8/19/96 */
void plus_VPP_q(void)
{
    output_info(d_to_a(fax_packet_protocol), (ubyte)sr14.verbose_form);   /* ramn 1/16/96 */
}
#endif
/* End Change 6/14/1995. */

/******************************************************************************
/
/   Routine:        pnd_BDR_eq
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the Rockwell Voice
/                    command: "AT#BDR=?"
/                   The #BDR command is used to set DTE Rate.
/                   This routine responds to the terminal with
/                   the vaild command input.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_rockwell_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
#if 0
void pnd_BDR_eq(void)
{
    output_info((ubyte *)PND_BDR_QUERY,VERBOSE_FORM);
}

/******************************************************************************
/
/   Routine:        pnd_BDR_e
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the Rockwell Voice
/                    command: "AT#BDR="
/                   The #BDR command is used to set DTE Rate.
/                   This routine will set DTE Rate.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_rockwell_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void pnd_BDR_e(ubyte *parm_ptr)
{
    ubyte ch;

    ch = *parm_ptr;

    /* Parameter out-of-bounds checking */
/* start change keh 8/15/95 => ubytes are never  < 0 */
/*
    if (!(((ch >= 0) && (ch <= 8)) || (ch == 16) || (ch == 24)
        || (ch == 48)))
*/
    if (! ((ch <= 8) || (ch == 16) || (ch == 24) || (ch == 48)))
/* end change keh 8/15/95 => ubytes are never < 0 */
    {
        acu_vce_command_error();
    }
    /* Else parameter is in bounds */
    else
    {
        voice_port_rate = ch;

        /* Determine what the new baud rate should be */
        /* Zero is autobaud */
        if (ch == 0)
        {
            dont_autobaud = FALSE;
            new_dte_baud = 0;
        }
        else
        {
/* Start Change 6/13/1995. */
            voice_inactivity_timer_on = TRUE;   /* Start deadman timer */
            voice_enable_inact_timer();
/* End Change 6/13/1995. */

            dont_autobaud = TRUE;
            switch (ch)
            {
                case 1: new_dte_baud = BPS2400;
                    break;
                case 2: new_dte_baud = BPS4800;
                    break;
                case 3: new_dte_baud = BPS7200;
                    break;
                case 4: new_dte_baud = BPS9600;
                    break;
                case 5: new_dte_baud = BPS12000;
                    break;
                case 6: new_dte_baud = BPS14400;
                    break;
                case 7: new_dte_baud = BPS16800;
                    break;
                case 8: new_dte_baud = BPS19200;
                    break;
                case 16: new_dte_baud = BPS38400;
                    break;
                case 24: new_dte_baud = BPS57600;
                    break;
                case 48: new_dte_baud = BPS115200;
                    break;
           }
        }
    }
}

/******************************************************************************
/
/   Routine:        pnd_BDR_q
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the Rockwell Voice
/                    command: "AT#BDR?"
/                   The #BDR command is used to set DTE Rate.
/                   This routine responds to the terminal with
/                   the current command value.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_rockwell_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void pnd_BDR_q(void)
{
    output_info(d_to_a(voice_port_rate), VERBOSE_FORM);
}


/******************************************************************************
/
/   Routine:        pnd_CID_eq
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the Rockwell Voice
/                    command: "AT#CID=?"
/                   The #CID command is used to set Caller ID options.
/                   This routine responds to the terminal with
/                   the vaild command input.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_rockwell_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void pnd_CID_eq(void)
{
    output_info((ubyte *)PND_CID_QUERY,VERBOSE_FORM);
}

/******************************************************************************
/
/   Routine:        pnd_CID_q
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the Rockwell Voice
/                    command: "AT#CID?"
/                   The #CID command is used to set Caller ID options.
/                   This routine responds to the terminal with
/                   the current command value.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_rockwell_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void pnd_CID_q(void)
{
    output_info(d_to_a(voice_caller_id), VERBOSE_FORM);   
}

/******************************************************************************
/
/   Routine:        pnd_CID_e
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the Rockwell Voice
/                    command: "AT#CID="
/                   The #CID command is used to set Caller ID options.
/                   This routine will set Caller ID options.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_rockwell_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void pnd_CID_e(ubyte *parm_ptr)
{
/* start change keh 8/15/95 => ubytes are never  < 0 */
/*     if ((*parm_ptr >= 0) && (*parm_ptr <= 2)) */
    if (*parm_ptr <= 2)
/* end change keh 8/15/95 => ubytes are never < 0 */
        voice_caller_id = *parm_ptr;
    else
        acu_vce_command_error();
}


/******************************************************************************
/
/   Routine:        pnd_CLS_eq
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the Rockwell Voice
/                    command: "AT#CLS=?"
/                   The #CLS command is used to set Rockwell voice mode.
/                   This routine responds to the terminal with
/                   the vaild command input.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_rockwell_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void pnd_CLS_eq(void)
{
    output_info((ubyte *)PND_CLS_QUERY,VERBOSE_FORM);
}


/******************************************************************************
/
/   Routine:        pnd_CLS_q
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the Rockwell Voice
/                    command: "AT#CLS?"
/                   The #CLS command is used to set Rockwell voice mode.
/                   This routine responds to the terminal with
/                   the current command value.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_rockwell_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void pnd_CLS_q(void)
{
    output_info(d_to_a(fax_class), VERBOSE_FORM);   
}

/******************************************************************************
/
/   Routine:        pnd_CLS_e
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the Rockwell Voice
/                    command: "AT#CLS="
/                   The #CLS command is used to set Rockwell voice mode.
/                   This routine will set Rockwell voice mode.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_rockwell_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void pnd_CLS_e(ubyte *parm_ptr)
{
/* start change keh 8/15/95 => ubytes are never  < 0 */
/*    if (*parm_ptr >= 0 && *parm_ptr <= 2) */
    if (*parm_ptr <= 2)
/* end change keh 8/15/95 => ubytes are never < 0 */
    {
        on_line_command = FALSE;
        voice_cmd_set = NONE;
        fax_class = *parm_ptr;
        hook_control = TRUE;
        build_event(E_PARSE,CONN_DATA);


       set_voice_rock_at_cmds(OFF);
    }
    else if (*parm_ptr == 8)
    {
        voice_cmd_set = ROCKWELL;
        fax_class = *parm_ptr;
        hook_control = TRUE;
/*        voice_command_init(ROCKWELL);*/    /* commented by ramn on 10/10/95 */
	voice_command_init(); /* changed by ramn on 10/10/95 */


        /* If voice is selected the place the ACU into a voice
            processing state */
        build_event(E_PARSE,CONN_VOICE);

        /* Enable Rockwell "#V" commands */
       set_voice_rock_at_cmds(OFF);

        /* Disable TIA "+V" commands */
       set_voice_tia_at_cmds(OFF);
    }
    else
    {
        acu_vce_command_error();
    }
}

/******************************************************************************
/
/   Routine:        pnd_MDL_q
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the Rockwell Voice
/                    command: "AT#MDL?"
/                   This routine responds to the terminal with
/                   the Manufactureer Model Number.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_rockwell_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void pnd_MDL_q(void)
{
    output_info((ubyte *)MDL_REQUEST,VERBOSE_FORM);
}

/******************************************************************************
/
/   Routine:        pnd_MFR_q
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the Rockwell Voice
/                    command: "AT#MFR?"
/                   This routine responds to the terminal with
/                   the Manufactureer ID.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_rockwell_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void pnd_MFR_q(void)
{
    output_info(VOICE_MFR_IDENTIFICATION,VERBOSE_FORM);
}

/******************************************************************************
/
/   Routine:        pnd_REV_q
/
/   Author:         RSA
/
/   Creation Date:  2/16/95
/
/   Description:    This routine is called to implement the Rockwell Voice
/                    command: "AT#REV?"
/                   This routine responds to the terminal with
/                   the Firmware Revision Number.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                 (Unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT voice_rockwell_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void pnd_REV_q(void)
{
    output_info((ubyte *)REV_REQUEST,VERBOSE_FORM);
}
#endif /* ramn 11/29/95 */


