/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00cmaw.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains the code to process the AT&W, &X,
/                       &Y, and &Z commands.
/
/     Product:          ACU core code
/
/     History:          ac00cmaw.c v3.90
/                       ac00cmaw.c v3.90
/
/        Created:       11/17/91
/                       12/12/94
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "ee_def.h"
#include "acu_pro.h"
#include "mt_pro.h"

void and_W(ubyte *);
void and_X(ubyte *);
void and_Y(ubyte *);
void and_Z(ubyte *);
ubyte valid_character(ubyte ch);


/*******************************************************************************
/
/     Routine:       and_W
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine will store the active profile
/
/                    AT&W  0 - Store profile in location 0
/                          1 - Store profile in location 1
/                          2 - Store profile in location 2
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_W(ubyte *param_ptr)
{
   if (*param_ptr < NUMBER_OF_PROFILES)
      store_profile(*param_ptr);
   else
      error_occurred = TRUE;
}


/*******************************************************************************
/
/     Routine:       and_X
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine will select the synchronous data clock source.
/
/                    AT&X  0 - Modem genetates the transmit clock and applies
/                                it to pin 15
/                          1 - The DTE generates the clock on pin 24 and the
/                                modem applies this clock to pin 15
/                          2 - The modem derives the transmit clock from the
/                                receive carrier signal and applies it to pin 15
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, sr27.clock_source
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_X(ubyte *param_ptr)
{
   switch (*param_ptr)
   {
      case 0:
         sr27.clock_source = TO_PIN_15;
         break;

      case 1:
         sr27.clock_source = TO_PIN_24;
         break;
      
      case 2:
         sr27.clock_source = FROM_CD;
         break;

      default:
         error_occurred = TRUE;
         return;
   }
}


/*******************************************************************************
/
/     Routine:       and_Y
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine will select the stored profile to be used
/                    on power up.
/
/                    AT&Y  0 - Select stored profile 0 on power up
/                          1 - Select stored profile 1 on power up
/                          2 - Select stored profile 2 on power up
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_Y(ubyte *param_ptr)
{
/*mrm22897*/
/*changed the check sum to 16 bit*/

    ubyte eeprom_error,cksum;
    uword  val;

   if (*param_ptr < NUMBER_OF_PROFILES)
   {
      temp_array[0] = *param_ptr;
      eeprom_error = modem_write_data(POWER_UP_PROFILE,1,
         (ubyte *)&temp_array[0]);
      if (eeprom_error == TRUE)
      {
         error_occurred = TRUE;
      }
      else
      {
/*mrm22897*/
/*changed the check sum to 16 bit*/
#if 0
            temp_array[0] = modem_eeprom_checksum();
#endif
                cksum = CHECKSUM_ADDR;
            val = modem_eeprom_checksum();

            temp_array[0] = val;

            modem_write_data(cksum,CHECKSUM_SIZE,
                (ubyte *)&temp_array[0]);

                cksum = CHECKSUM_ADDR + 1;
            temp_array[0] = val >> 8;

            modem_write_data(cksum,CHECKSUM_SIZE,
                (ubyte *)&temp_array[0]);


      }
   }
   else
      error_occurred = TRUE;
}


/*******************************************************************************
/
/     Routine:       and_Z
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine will store the entered telephone number
/
/                    AT&Z  0 - Store number in location 0
/                          1 - Store number in location 1
/                          2 - Store number in location 2
/                          3 - Store number in location 3
/
/     Input Parameters: pointer to the byte numeric value of the AT comand.
/
/     Output Parameters: none
/
/     Global Variables Changed:  error_occurred, cmd_ptr
/
/     Users: PARSE_CMD_TABLE_STRUCT data_commands[]
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void and_Z(ubyte *param_ptr)
{
/*mrm22897*/
/*changed the check sum to 16 bit*/
    uword num_size,val;
    ubyte *ptr;
    uword address;
    ubyte eeprom_error,cksum;



   switch (*param_ptr)
   {
      /* According to Hayes, if the delimiter '=' is not present,
         the characters following the &Z are treated as phone
         numbers for storage # zero.   Non-storable characters
         should be ignored */

      /* AT&Z0, AT&Z=, AT&Z all imply AT&Z0 */
      case '0':   /* AT&Z0??? */
      case '=':   /* AT&Z=??? */
         param_ptr++;

         /* Intentionally fall through */

      case '\0':   /* AT&Z<CR> */
      default:    /* AT&Z??? */
         address = TELE_NUMBER_0_ADD;
         break;

      case '1':
         address = TELE_NUMBER_1_ADD;
         param_ptr++;
         break;

      case '2':
         address = TELE_NUMBER_2_ADD;
         param_ptr++;
         break;

      case '3':
         address = TELE_NUMBER_3_ADD;
         param_ptr++;
         break;
   }

   /* Verify input */
   ptr = (ubyte *)&temp_array[0];
   while (*param_ptr != NULL)
   {
      if (valid_character(*param_ptr))
         *ptr++ = *param_ptr++;
      else
         param_ptr++;
   }
   *ptr = '\0';

   if ((num_size = str_len((ubyte *)&temp_array[0])) > 30)
   {
      error_occurred = TRUE;
      return;
   }

   eeprom_error = modem_write_data(address,num_size+1,(ubyte *)&temp_array[0]);
   if (eeprom_error == TRUE)
   {
      error_occurred = TRUE;
   }
   else
   {



/*mrm22897*/
/*changed the check sum to 16 bit*/
#if 0
        temp_array[0] = modem_eeprom_checksum();
        modem_write_data(CHECKSUM_ADDR,CHECKSUM_SIZE,(ubyte *)&temp_array[0]);
#endif


                cksum = CHECKSUM_ADDR;
            val = modem_eeprom_checksum();
                temp_array[0] = val;

            modem_write_data(cksum,CHECKSUM_SIZE,
                (ubyte *)&temp_array[0]);

                cksum = CHECKSUM_ADDR + 1;
            temp_array[0] = val >> 8;

            modem_write_data(cksum,CHECKSUM_SIZE,
                (ubyte *)&temp_array[0]);



   }
}


/*******************************************************************************
/
/     Routine:       valid_character
/
/     Author:        RSA
/
/     Creation Date: 06/17/91
/
/     Description:   This Routine determines if the character in the telephone
/                    number is valid for the dial string.
/
/     Input Parameters: ubyte ch - character to be validated
/
/     Output Parameters:   TRUE  - if character is valid
/                          FALSE - if character is not valid
/
/     Global Variables Changed:  none
/
/     Users: and_Z
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date:   RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte valid_character(ubyte ch)
{
   if ((ch >= '0') && (ch <= '9'))
      return (TRUE);
   if ((ch >= 'A') && (ch <= 'D'))
      return (TRUE);
   switch (ch)
   {
      case '#':
      case '*':
      case 'T':
      case 'P':
      case 'R':
      case 'W':
      case '@':
      case ',':
      case '!':
      case ';':
         return (TRUE);

      default:
         return (FALSE);
   }
}

