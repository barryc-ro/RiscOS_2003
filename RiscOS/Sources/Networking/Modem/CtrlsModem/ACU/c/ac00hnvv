/****************************************************************************
/
/   Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/   All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.  The information contained herein is solely
/   for the use of RSA.
/
/   File:           ac00hnvv.c 
/
/   Module Version: ACU 4.??
/
/   Function:       This file contains the action routines for VOICE VIEW
/                   ACU processing in the HANGUP state.
/
/   Product:        ACU core code
/
/   History:        ac00vv2.c
/
/       Created:    8/21/95
/
/       ---------------------------------------------------------
/       -                   Modifications                       -
/       ---------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:
/       Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "acu_vcv.h"
#include "mt_pro.h"

/* Local Prototypes */
void hangup_vv_parse(void);
void hangup_vv_idle(void);
void vv_hangup_at_complete(void);

extern ubyte get_phone_relay (void);

/*    State table for VoiceView HANGUP state      */

const struct stateTab_struct st_hangup_vv[EVT_MAX+1] =
{
/* MSG        */   {S_HANGUP,  ignore},
/* CHAR_RCVD  */   {S_HANGUP,  ignore},
/* ORIG       */   {S_HANGUP,  ignore},
/* ANSW       */   {S_HANGUP,  ignore},
/* CONNECT    */   {S_HANGUP,  ignore},
/* IDLE       */   {S_IDLE,    hangup_vv_idle},
/* RESET      */   {S_IDLE,    hard_reset},
/* SYS_STAT   */   {S_HANGUP,  pstn_status_check},
/* RING       */   {S_HANGUP,  ignore},
/* DP_CD_OFF  */   {S_HANGUP,  ignore},
/* HANGUP     */   {S_HANGUP,  ignore},
/* RETRAIN    */   {S_HANGUP,  ignore},
/* TEST       */   {S_HANGUP,  ignore},
/* PARSE      */   {S_PARSE,   hangup_vv_parse},
/* V24        */   {S_HANGUP,  ignore},
/* FP         */   {S_HANGUP,  ignore},
/* ESC_RXD    */   {S_HANGUP,  ignore},
};




/*******************************************************************************
/
/   Routine:        proc_hangup_vv
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will process events by determining the
/                   next state and the action to be performed for
/                   the HANGUP state of type VOICE_VIEW.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: acu_state, acu_proc
/
/   Users: proc_hangup
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void proc_hangup_vv(void)
{
   acu_state = st_hangup_vv[acu_event->type].new_state;
   acu_proc = st_hangup_vv[acu_event->type].fnc_ptr;
}


/*******************************************************************************
/
/   Routine:        hangup_vv_bg
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will process the background functions for
/                   the HANGUP state of type VOICE_VIEW.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: st_hangup
/
/   Users: hangup_bg
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void hangup_vv_bg(void)
{
   /* Run different substates of VoiceView HANGUP background */
   switch (st_hangup.state)
   {
       default:
       case HANGUP_PHYSICAL_LINK:
           /*	Release the line with or w/out a V.32 cleardown */
           modem_drop(FALSE);

           /* Change states to drop the physical link */
           st_hangup.state = HANGUP_HOOK;
           break;

       case HANGUP_HOOK:

           hangup_at_hook();

           /* Set idle sub-state (VV 1.1 section 5.5.3) */
           if ( get_phone_relay() == 1)
               st_idle.state = VV_IDLE_VOICE_MODE;
           else
               st_idle.state = VV_IDLE_OFFLINE;
           break;

       case HANGUP_COMPLETE:
           vv_hangup_at_complete();
           break;
    }
}


/*******************************************************************************
/
/   Routine:        vv_hangup_at_complete
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine will clean up the ACU after the VoiceView
/                   hangup process.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: s[1],at_z_command,on_line_command,
/                      delay_before_hangup,acu_hangup_line,at_h_command 
/
/   Users: hangup_vv_bg
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void vv_hangup_at_complete(void)
{
   if (!DSR_only_at_handshaking)
       modem_dte_dsr(ON);
   else
       modem_dte_dsr(OFF);

   /* Drop RLSD when off line? */
   if (sr21.RLSD_reflects_CD)
   {
       modem_dte_rlsd(OFF);
       /*modem_cd_led(OFF);*/ /* ramn 9/20/96 */
   }
   /*modem_ri_led(OFF);*/ /* ramn 9/20/96 */
   modem_dte_ri(OFF);

   /* Misc ACU online parameters */
   s[1] = 0;
   at_z_command = FALSE;
   on_line_command = FALSE;
   delay_before_hangup = FALSE;
   acu_hangup_line = TRUE;

   /* SD - 2/13/96 */
   initialize_vcv();

   /*	If ATH was entered then return back to parse the rest of the command */
   if (at_h_command == TRUE)
   {
       at_h_command = FALSE;
       build_event(E_PARSE,UNUSED);
   }
   /*	Else need to return to IDLE and return result message to the user */
   else
   {
       build_event(E_IDLE,UNUSED);
       enable_acu_on_terminal();
       build_event(E_MSG,hangup_result_type);
   }
}


/*******************************************************************************
/
/   Routine:        hangup_vv_idle
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine process IDLE events durring the HANGUP state
/                   of type VOICE_VIEW.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: st_idle
/
/   Users: hangup_vv_bg
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void hangup_vv_idle(void)
{
   st_idle.state = S_IDLE;
   st_idle.type = VOICE_VIEW;    /* RJM - 2/6/96 - for monitoring handset */
}


/*******************************************************************************
/
/   Routine:        hangup_vv_parse
/
/   Author:         RSA
/
/   Creation Date:  08/21/95
/
/   Description:    This Routine process PARSE events durring the HANGUP state
/                   of type VOICE_VIEW.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: st_parse
/
/   Users: hangup_vv_bg
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void hangup_vv_parse(void)
{
   st_parse.type = VOICE_VIEW;
}


