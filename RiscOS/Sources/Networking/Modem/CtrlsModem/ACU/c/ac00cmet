/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00cmet.c
/
/     Module Version:   ACU 5.00
/
/     Function:         ETC AT Command interface for ACU.
/
/     Product:          ACU ETC driver.
/
/     History:          V1.00 - Initial release
/
/        Created:       7/1/94
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/

#include "sys_def.h"        /* Global system defines */
#include "acu_def.h"        /* ACU defines */
#include "acu_mem.h"        /* ACU Driver variable prototypes */
#include "acu_edef.h"       /* ACU ETC defines */
#include "acu_emem.h"       /* ACU ETC Driver variable prototypes */
#include "par_def.h"        /* AT comand parser defines */
#include "par_pro.h"        /* AT command parser prototypes */

/* ACU ETC AT command (local prototypes) */
void and_I(ubyte *);
void per_B(uword *);
void ast_A(ubyte *);
void ast_B(ubyte *);

/* External prototypes (file ac00elib.c) */
extern void etc_set_tx_level(ubyte);
extern void etc_set_max_rate(ubyte);
extern void etc_set_autorate(ubyte);
extern void etc_set_hardware_type(ubyte);


/******************************************************************************
/
/                  Parser Structure for ETC AT Commands
/
/  -------------------------------------------------------------
/  -                       Modifications                       -
/  -------------------------------------------------------------
/
/  Author & Date: RSA
/  Description:
/  Reason:
/
*******************************************************************************/
PARSE_CMD_TABLE_STRUCT etc_commands []=
{
/*  &F is parsed by stnd ACU code... 
    "&F5",  per_B,      NO_PARAM,       NO_FLAGS,
    "&F6",  per_B,      NO_PARAM,       NO_FLAGS,
*/
    (ubyte *)"&I",  and_I,  BYTE_NUMERIC,   NO_FLAGS,
    (ubyte *)"%B",  per_B,  WORD_NUMERIC,   NO_FLAGS,
    (ubyte *)"*A",  ast_A,  BYTE_NUMERIC,   NO_FLAGS,
    (ubyte *)"*B",  ast_B,  BYTE_NUMERIC,   NO_FLAGS,
    END_OF_PARSE_TABLE
};

/****************************************************************************
/
/       Routine:            etc_set_acu_at_commands
/
/       Author:             RSA
/
/       Creation Date:      2/25/95            
/
/       Description:        Called by the ETC to enable it's at commands at
/                           the Parse.
/
/       Input Parameters:   None
/
/       Output Parameters:  None
/
/       Global Variables Changed:  None
/
/       Users:  acu_ETC_init
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:        
/       Reason:         
/
*****************************************************************************/
void acu_set_etc_commands(ubyte state)
{
   if (state == ON)
      at_parser_tables(ENABLE_TABLE, etc_commands);
   else
      at_parser_tables(DISABLE_TABLE, etc_commands);
}


/****************************************************************************
/
/       Routine:            and_I
/
/       Author:             RSA
/
/       Creation Date:      2/25/95            
/
/       Description:        Called by the AT command parser to take action
/                           after "AT&I" command is found.
/
/                           The ETC "AT&I" command is used to set the modem's
/                           transmit level.
/
/       Input Parameters:   parm_ptr - pointer to a ubyte, command parameter
/                10-25 = Set Transmit Level in -dBm
/                99 = Enable Auto Transmit Level algorithm
/
/       Output Parameters:  None
/
/       Global Variables Changed:  None
/
/       Users:                     
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:        
/       Reason:         
/
*****************************************************************************/
void and_I(ubyte *parm_ptr)
{
   ubyte num;

   /* Test bounds then pass value to ETC lib. */
   num = *parm_ptr;
   if (((num >= ETC_TXLVL__MIN) && (num <= ETC_TXLVL__MAX)) ||
      (num == ETC_TXLVL__AUTO))
      etc_set_tx_level(num);
   else
      error_occurred = TRUE;
}

/****************************************************************************
/
/       Routine:            per_B
/
/       Author:             RSA
/
/       Creation Date:      2/25/95            
/
/       Description:        Called by the ACU AT Command Parser to take action
/                           after a parsed "AT%B" command.
/
/                           "AT%B" is an ETC command, and is used to set the
/                           modem's maximum V.32bis rate.
/
/                           NOTE: This AT Command maps to S-register 37 (max
/                                 DCE connect rate)
/
/       Input Parameters:   parm_ptr - pointer to a uword, command parameter
/                   4800    = 4800BPS
/                   7200    = 7200BPS
/                   9600    = 9600BPS
/                   12000   = 12000BPS
/                   14400   = 14400BPS
/
/       Output Parameters:  None
/
/       Global Variables Changed:  None
/
/       Users:                     
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:        
/       Reason:         
/
*****************************************************************************/
void per_B(uword *parm_ptr)
{
   ubyte speed;

   /* Check bounds of AT command, then convert word inputs to ACU defines */
   switch (*parm_ptr)
   {
      case 4800:
         speed = BPS4800;
         break;

      case 7200:
         speed = BPS7200;
         break;

      case 9600:
         speed = BPS9600;
         break;

      case 12000:
         speed = BPS12000;
         break;

      case 14400:
         speed = BPS14400;
         break;

      default:
         error_occurred = TRUE;
         return; /* Exit on error */
   }

   etc_set_max_rate(speed);
}


/****************************************************************************
/
/       Routine:            ast_A
/
/       Author:             RSA
/
/       Creation Date:      2/25/95            
/
/       Description:        Called by the ACU to take action after a parsed
/                           "AT*A" command.
/
/                           The "AT*A" command is used to set the modem's
/                           ETC V.32bis Autorate level.
/
/       Input Parameters:   parm_ptr - pointer to a ubyte, command parameter
/                       0 = Disable ETC Autorate
/                       1 = Enable ETC Autorating, start at max DCE Speed
/                       2 = Enable ETC Autorating, start at 4800 BPS
/                       3 = Enable ETC Autorating, start at 9600 BPS
/
/       Output Parameters:  None
/
/       Global Variables Changed:  None
/
/       Users:                     
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:        
/       Reason:         
/
*****************************************************************************/
void ast_A(ubyte *parm_ptr)
{
   if (*parm_ptr <= AUTORATE_4800)
      etc_set_autorate(*parm_ptr);
   else
      error_occurred = TRUE;
}

/****************************************************************************
/
/       Routine:            ast_B
/
/       Author:             RSA
/
/       Creation Date:      2/25/95            
/
/       Description:        Called by the ACU to take action after a parsed
/                           "AT*B" command.
/
/                           The "AT*B" command is used to set the modem's
/                           ETC hardware configuration.
/
/                       Note: This routine configures ETC but it doesn't
/                       enable it
/
/       Input Parameters:   parm_ptr - pointer to a ubyte, command parameter
/                0 = PSTN modem (default)
/                1 = Unknown (run auto-detect if available)
/
/                5 = Direct connect: AT&T 3610
/                6 = Direct connect: AT&T 3760
/                7 = Direct connect: AT&T 3730
/                8 = Direct connect: Nokia 12/PT128
/                9 = Direct connect: Technophone PC415
/               10 = Direct connect: NEC P110/P120
/               11 = Direct connect: OKI 1150
/               12 = Direct connect: OKI 900
/               13 = Direct connect: Ericsson/GE
/            14-19 = Direct connect: Reserved for future types
/
/               20 = RJ11 Adapter: Motorola Cellular Connection
/               21 = RJ11 Adapter: Spectrum Cellular AXCELL
/            22-29 = RJ11 Adapter: Reserved for future types
/
/               30 = Modem Pool: Ericsson base equipment
/               31 = Modem Pool: Motorola base equipment
/               32 = Modem Pool: AT&T base equipment
/            33-39 = Modem Pool: Reserved for future types
/
/       Output Parameters:  None
/
/       Global Variables Changed:  None
/
/       Users:                     
/
/       -------------------------------------------------------------
/       -                       Modifications                       -
/       -------------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:        
/       Reason:         
/
*****************************************************************************/
void ast_B(ubyte *parm_ptr)
{
   /* Command bounds checking */
   switch (*parm_ptr)
   {
      case ETC_HW__UNKNOWN:
      case ETC_HW__PSTN:
      case ETC_HW__ATT_3610:
      case ETC_HW__ATT_3760:
      case ETC_HW__ATT_3730:
      case ETC_HW__NOKIA12_PT128:
      case ETC_HW__TECH_PC415:
      case ETC_HW__NEC_P110_P120:
      case ETC_HW__OKI1150:
      case ETC_HW__OKI900:
      case ETC_HW__ERICSSON_GE:
      case ETC_HW__MOTO_RJ11:
      case ETC_HW__AXCELL_RJ11:
      case ETC_HW__ERICSSON_POOL:
      case ETC_HW__MOTO_POOL:
      case ETC_HW__ATT_POOL:
         etc_set_hardware_type(*parm_ptr);
         break;

      default:
         error_occurred = TRUE;
         break;
   } /* switch */
}
