/****************************************************************************
/
/     Copyright 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA its contents must
/     not be revealed, used or disclosed to anyone or company with out
/     written permission by RSA.  The information contained herein is solely
/     for the use of RSA.
/
/     File:             ac00fx2.c
/
/     Module Version:   ACU 5.00
/
/     Function:         This file contains ACU specific interface routines
/                       for FAX.
/
/     Product:          ACU FAX Driver code
/
/     History:
/
/        Created:
/
/        ---------------------------------------------------------
/        -                   Modifications                       -
/        ---------------------------------------------------------
/
/        Author & Date:  RSA
/        Description:
/        Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "acu_fax.h"
#include "fax_pro.h"
#include "mt_pro.h"

/* List of functions in this file. Some compilers need it. */
void acu_connect_fax(void);
void acu_config_fax(void);
ubyte translate_port_rate(ubyte);
void plusf_d_to_a(ubyte);
void initialize_fax(ubyte);
void proc_parse_fax_on(void);
void process_fax_timer(void);


const struct stateTab_struct st_parse_fax_on[EVT_MAX+1] =
{
   /* MSG        */  {S_PARSE,   parse_at_msg},
   /* CHAR_RCVD  */  {S_PARSE,   ignore},
   /* ORIG       */  {S_PARSE,   fax_continue_online},
   /* ANSW       */  {S_PARSE,   fax_continue_online},
   /* CONNECT    */  {S_ONLINE,  ignore},
   /* IDLE       */  {S_IDLE,    parse_to_idle},
   /* RESET      */  {S_IDLE,    hard_reset},
   /* SYS_STAT   */  {S_PARSE,   ignore},
   /* RING       */  {S_PARSE,   ignore},
   /* DP_CD_OFF  */  {S_PARSE,   ignore},
   /* HANGUP     */  {S_HANGUP,  proc_at_fax_hangup},
   /* RETRAIN    */  {S_PARSE,   ignore},
   /* TEST       */  {S_PARSE,   ignore},
   /* PARSE      */  {S_PARSE,   ignore},
   /* V24        */  {S_PARSE,   idle_fax_v24},
   /* FP         */  {S_PARSE,   ignore},
   /* ESC_RXD    */  {S_PARSE,   ignore},
};


/*******************************************************************************
/
/     Routine:       acu_connect_fax
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This routine is called when a fax AT command has caused a
/                    fax connection.  This routine move the ACU to an ONLINE
/                    state.
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: None
/
/     Users: plus_FRH_e,plus_FTH_e,plus_FRM_e,plus_FTM_e,
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_connect_fax(void)
{
   /*
    *   Move FAX to online
    */
   /* No hardware echo */
    /*modem_serial_echo(OFF);*/ /* ramn 9/20/96 */

   /* Make sure all ACU data is sent before giving up the DTE port */
   while (acu_to_num());
   while (!check_all_sent());

   /* Give up the DTE port */
   acu_halt();

   build_event(E_CONNECT, CONN_FAX);
}


/*******************************************************************************
/
/     Routine:       acu_config_fax
/
/     Author:        RSA
/
/     Creation Date: 01/16/95
/
/     Description:   This routine is called to configure the FAX module with
/                    current ACU configuration information relevent to FAX.
/                    This may include:
/                       Fax Class (setting of AT+FCLASS= command),
/                       AT Command Result Form (numeric or verbose),
/                       DTE Port Rate, and
/                       DTE Flow Control Setting (RTS/CTS or XON/XOFF).
/
/     Input Parameters:   None
/
/     Output Parameters:  None
/
/     Global Variables Changed: None
/
/     Users:
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void acu_config_fax(void)
{
   /* Setup the FAX environment */
   fax_configure(fax_class, (ubyte)sr14.verbose_form, dte_baud,
      fax_class > 2 ? fax_flow_control : alt_fax_flow_control);
}    

/******************************************************************************
/
/     Routine:       translate_port_rate
/
/     Author:        RSA
/
/     Creation Date: 10/14/92
/
/     Description:   This routine translates the port rate parameter into its
/                    equivelant I/O baud rate value.
/                
/     Input Parameters: ubyte port rate parameter
/
/     Output Parameters: ubyte I/O buadrate value
/
/     Global Variables Changed: none
/
/     Users: plusf_FCLASS(), plusf_FPR()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
ubyte translate_port_rate(ubyte port_rate)
{
   ubyte return_code;

   switch (port_rate)
   {
      case 0:
         return_code = 0;
         break;
      case 1:     /*  2400 */
      case 2:     /*  4800 */
      case 3:     /*  7200 */
      case 4:     /*  9600 */
      case 5:     /* 12000 */
      case 6:     /* 14400 */
      case 7:     /* 16800 */
      case 8:     /* 19200 */
         return_code = port_rate + 3;
         break;
      case 16:    /* 38400 */
         return_code = 12;
         break;
      case 24:    /* 57600 */
         return_code = 13;
         break;
      case 48:    /*115200 */
         return_code = 15;
         break;
      default:    /* should never happen. set to 19200 */
         return_code = 11;
         break;
   }

   return(return_code);
}

/******************************************************************************
/
/     Routine:       plusf_d_to_a
/
/     Author:        RSA
/
/     Creation Date: 10/14/92
/
/     Description:   This routine converts a decimal number into its ASCII
/                    representation.
/                
/     Input Parameters: ubyte number to convert
/
/     Output Parameters: Null terminated ASCII string in temp_array
/
/     Global Variables Changed: temp_array
/
/     Users: plusf_FCLASS(), plusf_FAA(), plusf_FLO(), plusf_FPP(), plusf_FPR()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void plusf_d_to_a(ubyte num)
{
   if (num > 9)    /* this assumes the value is less than 100 */
   {
      temp_array[0] = (num / 10) + '0';   /* upper digit */
      temp_array[1] = num % 10 + '0';     /* lower digit */
      temp_array[2] = '\0';               /* NULL terminate string */
   }
   else
   {
      temp_array[0] = num + '0'; /* ASCII decimal characters are consacative*/
      temp_array[1] = '\0';       /* NULL terminate string */
   }
}

/******************************************************************************
/
/     Routine:       initialize_fax
/
/     Author:        RSA
/
/     Creation Date: 01/27/92
/
/     Description:   This Routine will initialize any FAX specific ACU items.
/                    It will call on fax_init to allow the FAX software
/                    to initialize.
/
/     Input Parameters: ubyte     init_type
/                     0         powerup initialization
/                     1         AT&F or ATZ initialization
/                     2         AT+FIP initialization
/
/     Output Parameters: none
/
/     Global Variables Changed: ACU managed fax variables.
/
/     Users: master_init(), plusf_FIP(), and_F() (NOTE: at_Z() calls and_F())
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void initialize_fax(ubyte init_type)
{
   if (init_type != FAX_INIT_FIP)
   {
      /* +FCLASS is not changed by +FIP */
      /* the &F command should not be allowed in online state */
      fax_class = 0;                      /* default data mode */

      /* +FIP does not change the \Q and \K flow control setting */
      alt_fax_flow_control = XON_XOFF;    /* default XON/XOFF FAX flow control */
   }

   /* +FAA is initialized in all cases except +FCLASS=2.0 and &F */
   if (!(fax_class == 20 && init_type == FAX_INIT_AND_F))
      fax_adaptive_answer = 0;            /* default adaptive answer off */

   /* initialize 2.0 variables on POWERUP and +FIP but not &F */
   if (init_type != FAX_INIT_AND_F)
   {
      fax_flow_control = XON_XOFF;        /* default XON/XOFF FAX flow control */
      fax_port_rate = 0;                  /* default autobaud on DTE port */
      fax_packet_protocol = OFF;          /* default packet protocol off */
      fax_connected = FALSE;              /* fax connection not established */
      while (acu_to_num());               /* make sure all the outgoing data */
      while (!check_all_sent());          /* is flushed */
      acu_packet_protocol(OFF, PP_TIMEOUT); /* turn off packet protocol */
      terminate_packet_protocol = FALSE;  /* default to keeping the PP setting */
      dont_autobaud = FALSE;              /* default ACU to autobaud */
      dont_echo = FALSE;                  /* default ACU to allow command echo */
      new_dte_baud = 0;                   /* Initialize to a known state */
   }

   /* update the fax_class setting so class 2.0 does not reset */
   /* its parameters on &F */
   fax_configure(fax_class, (ubyte)sr14.verbose_form, dte_baud,
      fax_class > 2 ? fax_flow_control : alt_fax_flow_control);

   /* Initialize all FAX modules */
   fax_init(init_type);

   /* Enable fax AT command parsing if available */
   acu_set_acu_fax_commands(ON);

#if (FCLASS_1)
   acu_set_fax1_commands(ON);
#endif

#if (FCLASS_2)
   acu_set_fax2_commands(ON);
#endif

#if (FCLASS_20)
   acu_set_fax20_commands(ON);
#endif
}

/*******************************************************************************
/
/     Routine:       proc_parse_fax_on
/
/     Author:        RSA
/
/     Creation Date: 07/17/91
/
/     Description:   This Routine will process the event by determining the
/                    next state and the action to be performed for the PARSE
/                    state of type FAX_ONLINE.
/
/     Input Parameters: None
/
/     Output Parameters: none
/
/     Global Variables Changed: acu_state, acu_proc
/
/     Users: proc_idle
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
#if 0
void proc_parse_fax_on(void)
{
   acu_state = st_parse_fax_on[acu_event->type].new_state;
   acu_proc = st_parse_fax_on[acu_event->type].fnc_ptr;
}
#endif

/******************************************************************************
/
/     Routine:       process_fax_timer
/
/     Author:        RSA
/
/     Creation Date: 10/10/95
/
/     Description:   This Routine provide a 10msec timer tick to the FAX
/                    software.  Note that this is not a real time tick, but
/                    a background driven timer tick (see process_acu_timer()).
/
/     Input Parameters: none
/
/     Output Parameters: none
/
/     Global Variables Changed: none
/
/     Users: process_acu_timer()
/
/     -------------------------------------------------------------
/     -                       Modifications                       -
/     -------------------------------------------------------------
/
/     Author & Date: RSA
/     Description:
/     Reason:
/
*******************************************************************************/
void process_fax_timer(void)
{
   /* Shield FAX module from core ACU */
   fax_timer();
}


