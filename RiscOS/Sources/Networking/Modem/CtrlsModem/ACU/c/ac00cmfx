/****************************************************************************
/
/   Copyright 1988,1989,1990,1991,1992,1993,1994.
/   All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.  The information contained herein is solely
/   for the use of RSA.
/
/   File:           ac00cmfx.c
/
/   Module Version: ACU 4.??
/
/   Function:       This file contains the action routines for the basic
/                   FAX AT commands.  These FAX AT commands are used
/                   by all fax classes and other modules (Voice).
/
/   Product:        ACU core code
/
/   History:        Based on ac00f1x.c
/
/       Created:    12/16/95
/
/       ---------------------------------------------------------
/       -                   Modifications                       -
/       ---------------------------------------------------------
/
/       Author & Date:  RSA
/       Description:
/       Reason:
/
*****************************************************************************/

/*#include "mod_def.h"*/ /* added by ramn on 2/9/96 */
#include "sys_def.h"
#include "acu_def.h"
#include "acu_fax.h"
#include "acu_mem.h"
#include "acu_pro.h"
#include "acu_vce.h"
#include "acu_vcv.h"
#include "mt_pro.h"
#include "fp_pro.h"
#include "fax_pro.h"
#include "par_def.h"
#include "par_pro.h"
#include "resp_cod.h" /* ramn 1/12/96 */

#include "..\mt_ctls1\mt_macro.h" /* ramn 3/11/96 */

/* Local Prototypes */
void acu_fax_command(ubyte *, uword );
void acu_fax_query(uword);
void acu_fax_command_error(void);
void plus_FCLASS_eq(void);
void plus_FCLASS_q(void);
void plus_FCLASS_e(ubyte *);
void plus_FCLASS_e(ubyte *);
void plus_FAA_q(void);
void plus_FAA_eq(void);
void plus_FAA_e(ubyte *);
void plus_FIP_eq(void);
void plus_FIP(void);
void plus_FPR_eq(void);
void plus_FPR_q(void);
void plus_FPR_e(ubyte *);
void plus_FLO_eq(void);
void plus_FLO_e(ubyte *);
void plus_FLO_q(void);
void plus_FPP_eq(void);
void plus_FPP_e(ubyte *);
void plus_FPP_q(void);
void plus_FMM(void);
void plus_FMI(void);

/* ACU fax driver routines */
extern void acu_connect_fax(void);
extern void acu_config_fax(void);
extern ubyte translate_port_rate(ubyte port_rate);
extern void plusf_d_to_a(ubyte num);
extern void initialize_fax(ubyte init_type);

/* FAX AT command routines used by the +FCLASS command */
extern void set_voice_tia_at_cmds(ubyte state);
extern void set_voice_rock_at_cmds(ubyte state);

extern ubyte vce_state; /* ramn 2/20/96 */


/* ramn 3/11/96 */
extern void voice_init(ubyte);
extern void modem_init(void);
extern ubyte dsp_cp(void);
extern ubyte dsp_cp_packet;
extern ubyte ack_or_response;
extern void send_pkt_to_dsp(void);
extern ubyte delay_before_hangup;


/* ramn 6/25/96 */
extern ubyte was_in_spkr_phn_mode;	
extern void set_7_wait_states(void);
extern ubyte spkr_phn_dnl;
extern void dnld_patch(void); 
extern void dnld_spkr_phn_code(uword *);	
extern uword pwr_on_patch[500];
extern void set_voice_relay(ubyte);


/* ramn 11/18/96 */
extern const uword vcepatch[];
extern void voice_dnld_patch(const uword tbl[]);
extern const uword vcepatch[];

extern void dsppatch(void);
ubyte voice_patch_dnlded =0;	/* ramn 11/26/96 */

/******************************************************************************
/
/                  Parser Structure for ACU FAX AT Commands
/
/      These commands are defined in the FAX (and other) specs.
/      but perform operations within the scope of the ACU.
/
/  -------------------------------------------------------------
/  -                       Modifications                       -
/  -------------------------------------------------------------
/
/  Author & Date: RSA
/  Description:
/  Reason:
/
*******************************************************************************/
PARSE_CMD_TABLE_STRUCT fax_acu_commands []=
{
    (ubyte *)"+FCLASS=?",plus_FCLASS_eq,  NO_PARAM,      SEMICOL_END,
    (ubyte *)"+FCLASS=", plus_FCLASS_e,   REAL_NUM_STRING,SEMICOL_END,
    (ubyte *)"+FCLASS?", plus_FCLASS_q,   NO_PARAM,      SEMICOL_END,
    (ubyte *)"+FIP=?",   plus_FIP_eq,     NO_PARAM,      SEMICOL_END, 
    (ubyte *)"+FIP",     plus_FIP,        NO_PARAM,      SEMICOL_END, 
    (ubyte *)"+FAA=?",   plus_FAA_eq,     NO_PARAM,      SEMICOL_END, 
    (ubyte *)"+FAA=",    plus_FAA_e,      BYTE_NUMERIC,  SEMICOL_END, 
    (ubyte *)"+FAA?",    plus_FAA_q,      NO_PARAM,      SEMICOL_END, 
    (ubyte *)"+FPR=?",   plus_FPR_eq,     NO_PARAM,      SEMICOL_END, 
    (ubyte *)"+FPR=",    plus_FPR_e,      BYTE_NUMERIC,  SEMICOL_END, 
    (ubyte *)"+FPR?",    plus_FPR_q,      NO_PARAM,      SEMICOL_END, 
    (ubyte *)"+FLO=?",   plus_FLO_eq,     NO_PARAM,      SEMICOL_END, 
    (ubyte *)"+FLO=",    plus_FLO_e,      BYTE_NUMERIC,  SEMICOL_END, 
    (ubyte *)"+FLO?",    plus_FLO_q,      NO_PARAM,      SEMICOL_END, 
    (ubyte *)"+FPP=?",   plus_FPP_eq,     NO_PARAM,      SEMICOL_END, 
    (ubyte *)"+FPP=",    plus_FPP_e,      BYTE_NUMERIC,  SEMICOL_END, 
    (ubyte *)"+FPP?",    plus_FPP_q,      NO_PARAM,      SEMICOL_END,
    (ubyte *)"+FMM?",    plus_FMM,        NO_PARAM,      SEMICOL_END, 
    (ubyte *)"+FMI?",    plus_FMI,        NO_PARAM,      SEMICOL_END, 
/* 4/03/96 shujin */
    (ubyte *)"+FMFR?",    plus_FMI,        NO_PARAM,      SEMICOL_END, 
    (ubyte *)"+GMI?",    plus_FMI,        NO_PARAM,      SEMICOL_END, 
    (ubyte *)"+FMDL?",    plus_FMM,        NO_PARAM,      SEMICOL_END, 
    (ubyte *)"+GMM?",    plus_FMM,        NO_PARAM,      SEMICOL_END, 

    END_OF_PARSE_TABLE
};


/*******************************************************************************
/
/      Routine:        acu_set_acu_fax_commands
/
/      Author:         RSA
/
/      Creation Date:  04/07/95
/
/      Description:    This Routine enables/disables parsing of ACU FAX
/                      commands.  Thes commands are defined by the fax
/                      (and other) specs which perform operations specific
/                      to the ACU, i.e. set the DTE baud rate.
/
/      Input Parameters:   state - OFF (0) to disable, ON (otherwise) to enable.
/
/      Output Parameters: None
/
/      Global Variables Changed:  None
/
/      Users:
/
/      -------------------------------------------------------------
/      -                        Modifications                        -
/      -------------------------------------------------------------
/
/      Author & Date:    RSA
/      Description:
/      Reason:
/
*******************************************************************************/
void acu_set_acu_fax_commands(ubyte state)
{
   ubyte type;

   if (state == ON)
	  type = ENABLE_TABLE;
   else
	  type = DISABLE_TABLE;

   at_parser_tables(type,fax_acu_commands);
}


/******************************************************************************
/
/   Routine:        acu_fax_command
/
/   Author:         RSA
/
/   Creation Date:  12/16/95
/
/   Description:    This routine is called to exercise FAX AT commands parsed
/                   by the ACU.  This routine serves as the ACU to FAX
/                   interface for executable FAX commands.
/
/   Input Parameters: which_command - Which FAX command to execute
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: All commands in this file.
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void acu_fax_command(ubyte *param_ptr, uword which_command)
{
   ubyte *response_ptr,result;

   response_ptr = 0;
   result = 0;

   /* Update fax w/the latest configuration before every command */
   acu_config_fax();

   /* Pass the command up to fax */
   result = fax_execute_command(which_command, param_ptr, &response_ptr);

   /* Display any command result */
   if (result == FAX_ERROR)
	  acu_fax_command_error();
   else if (result == FAX_GO_ONLINE)
	  acu_connect_fax();
   else if (response_ptr)
	  output_info(response_ptr, UNFORMATTED);
}


/******************************************************************************
/
/   Routine:        acu_fax_query
/
/   Author:         RSA
/
/   Creation Date:  12/16/95
/
/   Description:    This routine is called to exercise FAX AT Request commands
/                   parsed by the ACU.  This routine serves as the ACU to FAX
/                   interface for FAX request commands.
/
/   Input Parameters: which_query - Which FAX command to query 
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: All commands in this file.
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void acu_fax_query(uword which_query)
{
   ubyte *response_ptr,result;

   response_ptr = 0;
   result = 0;

   /* Update fax w/the latest configuration before every command */
   acu_config_fax();

   /* Pass the command up to fax */
   result = fax_execute_command(which_query, UNUSED, &response_ptr);

   /* Display any command result */
   if (result == FAX_ERROR)
	  acu_fax_command_error();
   else
	  output_info(response_ptr, UNFORMATTED);
}


/*******************************************************************************
/
/   Routine:        acu_fax_command_error
/
/   Author:         RSA
/
/   Creation Date:  01/16/95
/
/   Description:    This is called when any fax command has been found to
/                   be in error.
/
/   Input Parameters:   None
/
/   Output Parameters:  None
/
/   Global Variables Changed: error_occurred
/
/   Users: All fax AT command action routines
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date:  RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void acu_fax_command_error(void)
{
   error_occurred = TRUE;
}

/******************************************************************************
/
/   Routine:        plus_FCLASS_eq
/
/   Author:         RSA
/
/   Creation Date:  10/14/92
/
/   Description:    This routine is called to implement the FAX command:
/                   "AT+FCLASS=?"
/                   This routine returns the possible values for the command.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                (unused)
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax2_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_FCLASS_eq(void)
{
   ubyte index;

   temp_array[0] = '0';        /* we can always do data mode */
   index = 1;

   /* is class 1 configured */
   if (acu_cfg.fax_class & CLASS1_ENABLED_MASK)
   {
	  temp_array[index++] = ',';
	  temp_array[index++] = '1';
   }

#if 0	/* ramn 2/24/96 */
   /* is class 2 configured */
   if (acu_cfg.fax_class & CLASS2_ENABLED_MASK)
   {
	  temp_array[index++] = ',';
	  temp_array[index++] = '2';
   }
   /* is class 2.0 configured */
   if (acu_cfg.fax_class & CLASS20_ENABLED_MASK)
   {
	  temp_array[index++] = ',';
	  temp_array[index++] = '2';
	  temp_array[index++] = '.';
	  temp_array[index++] = '0';
   }
#endif	/* ramn 2/24/96 */

/* JAY - TIA Conversion Start */
   if (acu_cfg.fax_class & CLASS8_ENABLED_MASK)
   {
	  temp_array[index++] = ',';
	  temp_array[index++] = '8';
   }
/* JAY - TIA Conversion End */

/* RJM040396 */
   if (acu_cfg.fax_class & CLASS80_ENABLED_MASK)
   {
	  temp_array[index++] = ',';
	  temp_array[index++] = '8';
	  temp_array[index++] = '0';
   }

   temp_array[index] = '\0';   /* NULL terminate the response string */
   output_info(temp_array, (ubyte)sr14.verbose_form); /* send out the response */
										/* ramn 1/16/96 */
}



/******************************************************************************
/
/   Routine:        plus_FCLASS_q
/
/   Author:         RSA
/
/   Creation Date:  10/14/92
/
/   Description:    This routine is called to implement the FAX command:
/                   "AT+FCLASS?"
/                   This command returns the current value of the +FCLASS
/                   setting.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                (unused)
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax2_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_FCLASS_q(void)
{
   /* Process class indication */
   if (fax_class > 9)  /* if two digit then indicate the decimal point */
   {
	  temp_array[0] = (fax_class / 10) + '0';
	  temp_array[1] = '.';
	  temp_array[2] = (fax_class % 10) + '0';
	  temp_array[3] = '\0'; /* NULL terminate string */
   }
   else
	  plusf_d_to_a(fax_class);    /* get the ASCII value */

/* RAK start 5/18/95 - VoiceView support */
   if (fax_class==80) {
	  temp_array[0] = '8';
	  temp_array[1] = '0';
	  temp_array[2] = '\0'; /* NULL terminate string */
   }
/* RAK end 5/18/95 - VoiceView support */

   output_info(temp_array, (ubyte)sr14.verbose_form);  /*ramn 1/16/96 */ /* send information to DTE */
}


/******************************************************************************
/
/   Routine:        plus_FCLASS_e
/
/   Author:         RSA
/
/   Creation Date:  10/14/92
/
/   Description:    This routine is called to implement the FAX command:
/                   "AT+FCLASS=<value>"
/                   This command configures the modem's fax mode/class.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                <value> is an an ASCII string.
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax2_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_FCLASS_e(ubyte *param_ptr)
{
   ubyte error, hold_class, ch;

   /* Save current setting of +FCLASS command */
   hold_class = fax_class;

   /* Command default - error in command line */
   error = TRUE;
	
	/* if the previous mode was voice then read the dtmf_digit packet
		from the dsp and tehn take the dsp out of voice mode */
	if((hold_class == 8) && (*param_ptr != '8')) /* ramn 3/11/96 */
	{
		dsp_cp_packet = 0xC4;          
		ch = dsp_cp();

		/*	modem_init();	 */
		LOAD_MODEM_INIT
		ack_or_response = ACK;
		send_pkt_to_dsp();

		/*resotore the acu execution delay when leaving voice mode */
		delay_to_exec = ACU_EXEC_DELAY; /* ramn 3/11/96 */

	   	st_idle.type = AT_OFFLINE;
   		st_parse.type = AT_OFFLINE;
			
			if(voice_patch_dnlded) 	/* ramn 11/26/96 */
			{
				dsppatch();

				LOAD_MODEM_INIT
				ack_or_response = ACK;
				send_pkt_to_dsp();
				voice_patch_dnlded = FALSE;
			}
	

#if 0
	  	if(was_in_spkr_phn_mode)  /* ramn 6/25/96 */
		{
			was_in_spkr_phn_mode = FALSE;	/* set in vc00ex.c */
			spkr_phn_dnl = 0;
			dnld_spkr_phn_code(pwr_on_patch);	/* ramn 4/22/96 */
			set_7_wait_states();		/* this sets 7 wait states for musket-cp interf*/
			dnld_patch();

			LOAD_MODEM_INIT
			ack_or_response = ACK;
			send_pkt_to_dsp();
		}
#endif
		was_in_spkr_phn_mode = FALSE;	/* set in vc00ex.c */

		/* ramn 3/13/96 */
		if(!hook)	
		{

/*
	 ramn 9/13/96, in voice mode voice relayis turned on if hook relay is on
						switch it off when changing modes
*/
			set_voice_relay(OFF);	 
			if ((sr22.speaker_ctrl == ALWAYS_ON) || (sr22.speaker_ctrl == ON_UNTIL_CD))
				modem_speaker(ON);
			modem_init_call_progress(OFF_HOOK_NOT_DIALED); /* ramn 4/5/96 */
		}	
		else
			modem_init_call_progress(ON_HOOK); /* ramn 4/5/96 */

		on_line_command = FALSE;


	}

   /*  Currently available fax class modes:
    *      AT+FCLASS=0   - data
    *      AT+FCLASS=1   - Fax Class 1   (EIA/TIA-578)
    *      AT+FCLASS=2   - Fax Class 2   (EIA SP-2388)
    *      AT+FCLASS=2.0 - Fax Class 2.0 (EIA/TIA-592)
    *      AT+FCLASS=8   - Digital Voice (EIA/TIA-IS101)
    *      AT+FCLASS=80  - Radish VoiceView 
    */
   switch (*param_ptr)
   {
	  case '0':    /* Fax Class 0 == Data Mode */

		 /* We can't change to data if currently receiving a fax */
		 if (fax_connected)
			break;  /* Exit with error condition preset */

		/* start change keh 8/15/95 => more voice parser changes */
#if 0
		 voice_cmd_set = NO_VOICE;   /* Take ACU out of voice mode */
#endif 

		 /* Take ACU out of voice view mode */
		 if(fax_class == 80)
			 acu_vv_cmd_init(OFF);

		 fax_class = 0;              /* Take ACU out of fax mode */

		 /* Take ACU out of voice mode */
		 acu_voice_cmd_init(NO_VOICE);

/* end change keh 8/15/95 => more voice parser changes */

/* start change 3/21/94 */
		 /* Return ACU to only Data */
		 build_event(E_PARSE, CONN_DATA);
/* end change 3/21/94 */

		 /* Enable parsing of all fax commands in data mode.  This is
			in violation of the FAX specs, but all fax applications
			ignore this */
		 if (acu_cfg.fax_class & CLASS1_ENABLED_MASK)
			acu_set_fax1_commands(ON);
		 if (acu_cfg.fax_class & CLASS2_ENABLED_MASK)
			acu_set_fax2_commands(ON);
		 if (acu_cfg.fax_class & CLASS20_ENABLED_MASK)
			acu_set_fax20_commands(ON);

		 error = FALSE;              /* Clear the default error condition */


		 /*
			now we are reentering data mode check if the legacy patch was 
			dnlded if yes check if we are in v34 mode if yes we need to 
			dnld the v34 patch again.

			ramn 12/11/96
		 */
			if((voice_patch_dnlded) && 
				((ms_mode == V34) || (ms_mode == V34S))
			  ) 
			{
				dsppatch();		/* ramn 12/11/96 */

				LOAD_MODEM_INIT
				ack_or_response = ACK;
				send_pkt_to_dsp();
				voice_patch_dnlded = FALSE;

				if(!hook)	
					modem_init_call_progress(OFF_HOOK_NOT_DIALED); 
				else
					modem_init_call_progress(ON_HOOK); 
			}

	  break;

	  case '1':   /* AT+FCLASS=1  - Fax Class 1 (EIA/TIA-578) */

		 /* Set Class 1 if supported by the modem */
		 /* The modem must be configured to support Class 1 */
		 if (acu_cfg.fax_class & CLASS1_ENABLED_MASK)
		 {
			/* Verify +FCLASS=1<CR> only */
			if (*(param_ptr+1) != '\0')
			    break;
			
			if(fax_class == 80)
				acu_vv_cmd_init(OFF);           /* Voice View */
				

			fax_class = 1;

			/* Enable FAX 1 commands */
			acu_set_fax1_commands(ON);

			/* Disable other +FCLASS= modules AT commands */
			acu_voice_cmd_init(NO_VOICE);   /* Voice */

			acu_set_fax2_commands(OFF);     /* Fax Class 2 */
			acu_set_fax20_commands(OFF);    /* Fax Class 2.0 */
			error = FALSE;

			/*
				this is the dnld of the legacy patch in fax mode for v17
				short train
				ramn 12/11/96 
			*/
		   voice_dnld_patch(vcepatch);
			voice_patch_dnlded = TRUE;		/* ramn 12/11/96 */


		 }
		 break;
#if 0	/* ramn 2/24/96 */

	  case '2':   /* Either AT+FCLASS=2   - Fax Class 2 (EIA SP-2388), or
					    AT+FCLASS=2.0 - Fax Class 2.0 (EIA/TIA-592)   */
		 /* Test parameter for Class 2.0 */
		 if ((*(param_ptr+1) == '.') && (*(param_ptr+2) == '0'))
		 {
			/* The modem must be configured to support Class 2.0 */
			if (acu_cfg.fax_class & CLASS20_ENABLED_MASK)
			{
				if(fax_class == 80)
				    acu_vv_cmd_init(OFF);           /* Voice View */
	
			    fax_class = 20;
			    /* Enable Class 2.0 commands */
			    acu_set_fax20_commands(ON);

			    /* Disable other +FCLASS= modules AT commands */
			    acu_voice_cmd_init(NO_VOICE);   /* Voice */
			    acu_set_fax1_commands(OFF);     /* Fax Class 1 */
			    acu_set_fax2_commands(OFF);     /* Fax Class 2 */
			    
			    error = FALSE;
			}
		 }
		 /* Else if not "2." then try only "2", but the modem must be
			configured to support Class 2 */
		 if ((*(param_ptr+1) == '\0') &&
			(acu_cfg.fax_class & CLASS2_ENABLED_MASK))
		 {
			if(fax_class == 80)
				acu_vv_cmd_init(OFF);           /* Voice View */
			 
			fax_class = 2;
			/* Enable Class 2 commands */
			acu_set_fax2_commands(ON);
		 
			/* Disable other +FCLASS= modules AT commands */
			acu_voice_cmd_init(NO_VOICE);   /* Voice */
			acu_set_fax1_commands(OFF);     /* Fax Class 1 */
			acu_set_fax20_commands(OFF);    /* Fax Class 2.0 */

			error = FALSE;
		 }
		 break;
#endif /* ramn 2/24/96 */

	  case '8':   /* AT+FCLASS=8  - Digital Voice (TIA voice mode), or
				  AT+FCLASS=80 - VoiceView */
/* RAK start 5/18/95 - VoiceView support */
		 if ((acu_cfg.fax_class & CLASS8_ENABLED_MASK) && (*(param_ptr+1) != '0'))
/* RAK end 5/18/95 - VoiceView support */
		 {
/* JAY - TIA Conversion Start 11/23/1993 */
/* start change keh 8/15/95 => more voice parser changes */
/*                voice_cmd_set = TIA_IS_101; */
/* end change keh 8/15/95 => more voice parser changes */

			/* Disable other +FCLASS= modules AT commands */

			if(fax_class == 80)
				acu_vv_cmd_init(OFF);           /* Voice View */
	
			fax_class = 8;
			hook_control = TRUE;
			
			vce_state = 1; /* ramn 2/20/96 */


			/* Enable TIA IS101 commands */
			acu_voice_cmd_init(TIA_IS_101);

			acu_set_fax1_commands(OFF);     /* Fax Class 1 */
			acu_set_fax2_commands(OFF);     /* Fax Class 2 */
			acu_set_fax20_commands(OFF);    /* Fax Class 2.0 */

		   voice_dnld_patch(vcepatch);
			voice_patch_dnlded = TRUE;		/* ramn 11/26/96 */

			voice_init(VOICE_INIT_VIP); /* ramn 2/29/96 */

			/* If voice is selected the place the ACU into a voice
			    processing state */
         /*	  build_event(E_PARSE,CONN_VOICE); */ /* commented by ramn on 10/10/95 */
 			   build_event(E_PARSE,PARSE_VOICE); /* added by ramn on 10/10/95 */
 
			error = FALSE;
		 }

/* RJM040396 */
		 /* Test parameter for Class 80 VoiceView */
		 if ((acu_cfg.fax_class & CLASS80_ENABLED_MASK) && (*(param_ptr+1) == '0'))
		 {
			/* Enable Voice View and VV AT commands */
			acu_vv_cmd_init(ON);            /* Voice View */

			/* Disable other +FCLASS AT commands */
			acu_voice_cmd_init(NO_VOICE);   /* IS-101 */
			acu_set_fax1_commands(OFF);     /* Fax Class 1 */
			acu_set_fax2_commands(OFF);     /* Fax Class 2 */
			acu_set_fax20_commands(OFF);    /* Fax Class 2.0 */

/* start change keh 8/21/95 => Add VV to ACU */
			/* When VoiceView is selected the place the ACU into a
			    VoiceView processing state */
			build_event(E_PARSE,CONN_VOICEVIEW);
/* end change keh 8/21/95 => Add VV to ACU */

			error = FALSE;
			fax_class=80;
		 }
		 break;
   } /* switch */

   /* If a change in fclass that involved zero (data mode) packet protocol
	  and DTE port rate setting need to change */
   if (fax_class != hold_class && (!fax_class || !hold_class))
   {
	  /* If packet protocol and port rate setting need to change */
	  if (fax_packet_protocol && fax_class)
	  {
		 /* Turn on packet protocol, and don't echo AT commands */
		 acu_packet_protocol(ON, PP_TIMEOUT);
		 dont_echo = TRUE;
	  }

	  /* If a fax DTE rate is required then fix the dte port baudrate */
	  if (fax_port_rate && fax_class)
	  {
		 /* Translate +FPR setting to I/O baudrate configuration parameter */
		 /* The rate does not take effect until after the final command
			response (eg: OK) */
		 new_dte_baud = translate_port_rate(fax_port_rate);
		 dont_autobaud = TRUE;   /* don't autobaud */
	  }

	  /* if +FCLASS=0 turn off fax environment */
	  if (!fax_class)
	  {
		 if (fax_packet_protocol)
		 {
			while (acu_to_num());       /* make sure all the outgoing data */
			while (!check_all_sent());  /* is flushed */
			acu_packet_protocol(OFF, PP_TIMEOUT); /* end packet protocol now */
			dont_echo = FALSE;          /* +FPP not active if +FCLASS=0 */
		 }

/* start change keh 12/94 => new parser */
		  /* Allow autobauding when ever fclass == 0 */
/*            if (fax_port_rate) */
/* end change keh 12/94 => new parser */
		 dont_autobaud = FALSE;      /* +FPR not active if +FCLASS=0 */
	  }
   }

   /* Proclaim error if a problem w/the command */
   if (error)
	  acu_fax_command_error();
}


/******************************************************************************
/
/   Routine: plusf_FAA_q
/
/   Author: RSA
/
/   Creation Date: 10/14/92
/
/   Description:    This routine is called to implement the FAX command:
/                   "AT+FAA?"
/                   This AT command returns the current status of the
/                   +FAA setting.  +FAA allows the modem to automatically
/                   determine if the incomming call is DATA or FAX and act
/                   appropriately.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                (unused)
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax2_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_FAA_q(void)
{
   plusf_d_to_a(fax_adaptive_answer);      /* translate value to ASCII */
   output_info(temp_array, VERBOSE_FORM);   /* respond value to dte */
}


/******************************************************************************
/
/   Routine:        plusf_FAA_eq
/
/   Author:         RSA
/
/   Creation Date:  10/14/92
/
/   Description:    This routine is called to implement the FAX command:
/                   "AT+FAA=?"
/                   This AT command returns the possible settings for the
/                   +FAA command. +FAA allows the modem to automatically
/                   determine if the incomming call is DATA or FAX and act
/                   appropriately. 
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                (unused)
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax2_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_FAA_eq(void)
{
   output_info((ubyte *)FAX_FAA_QUERY, VERBOSE_FORM);
}


/******************************************************************************
/
/   Routine:        plusf_FAA_e
/
/   Author:         RSA
/
/   Creation Date:  10/14/92
/
/   Description:    This routine is called to implement the FAX command:
/                   "AT+FAA=<value>"
/                   This AT command configures the +FAA setting.
/                   +FAA allows the modem to automatically determine if the
/                   incomming call is DATA or FAX and act appropriately. 
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                <value> is an 8 bit integer.
/
/   Output Parameters: none
/
/   Global Variables Changed: fax_adaptive_answer
/
/   Users: PARSE_CMD_TABLE_STRUCT fax2_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_FAA_e(ubyte *parm_ptr)
{
   /* Only +FAA=0 or +FAA=1 are allowed */
   switch (*parm_ptr)
   {
	  case 0:
	  case 1:
		 fax_adaptive_answer = *parm_ptr;
		 break;

	  default:
		 acu_fax_command_error();
		 break;
    }
}


/******************************************************************************
/
/   Routine:        plus_FIP_eq
/
/   Author:         RSA
/
/   Creation Date:  10/14/92
/
/   Description:    This routine is called to implement the FAX command:
/                   "AT+FIP=?"
/                   This AT command verifies the "AT+FIP" command impelmentaion
/                   by responding with OK (and not ERROR).
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                (unused)
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax2_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_FIP_eq(void)
{
   send_ok = TRUE;
}

/******************************************************************************
/
/   Routine:        plus_FIP
/
/   Author:         RSA
/
/   Creation Date:  10/14/92
/
/   Description:    This routine is called to implement the FAX command:
/                   "AT+FIP"
/                   This command will will reinitialize all FAX parameters.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                (unused)
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax2_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_FIP(void)
{
   /* Initialize parameters from +FIP */
   initialize_fax(FAX_INIT_FIP);
}

/******************************************************************************
/
/   Routine:        plus_FPR_eq
/
/   Author:         RSA
/
/   Creation Date:  10/14/92
/
/   Description:    This routine implements the "AT+FPR=?" FAX port rate
/                   AT command.
/                   This routine will return the allowable settings for
/                   the "AT+FPR=<value>" command.
/                   The +FPR command is used to set the DTE port rate.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                (unused)
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax2_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_FPR_eq(void)
{
   /* Send capability string to the DTE */
   output_info((ubyte *)FAX_FPR_QUERY, VERBOSE_FORM);
}

/******************************************************************************
/
/   Routine:        plus_FPR_q
/
/   Author:         RSA
/
/   Creation Date:  10/14/92
/
/   Description:    This routine implements the "AT+FPR?" FAX port rate
/                   AT command.
/                   This routine will return the current setting of
/                   the "AT+FPR=<value>" command.
/                   The +FPR command is used to set the DTE port rate.
/                   This routine will return the command's .
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                (unused)
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax2_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_FPR_q(void)
{
   plusf_d_to_a(fax_port_rate);            /* Convert current value to ASCII */
   output_info(temp_array, VERBOSE_FORM);  /* Display it to the dte */
}


/******************************************************************************
/
/   Routine:        plus_FPR_e
/
/   Author:         RSA
/
/   Creation Date:  10/14/92
/
/   Description:    This routine implements the "AT+FPR=<value>" FAX port rate
/                   AT command.
/                   The +FPR command is used to set the DTE port rate.
/                   This routine will set the port rate speed, and accepts
/                   the following inputs:
/                       0-8,16,24,48.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                <value> is an 8 bit integer.
/
/   Output Parameters: none
/
/   Global Variables Changed: fax_port_rate
/
/   Users: PARSE_CMD_TABLE_STRUCT fax2_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_FPR_e(ubyte *parm_ptr)
{
   ubyte num, hold_port_rate;

   hold_port_rate = fax_port_rate;     /* Save old value for comparison */

   /* Get command parameter from the parser (8 bit integer) */
   num = *parm_ptr;

    /* Test command bounds */
/* start change keh 8/15/95 => ubytes are never  < 0 */
/*    if (num == 16 || num == 24 || num == 48 || (num >= 0 && num <= 8)) */
   if (num == 16 || num == 24 || num == 48 || num <= 8)
/* end change keh 8/15/95 => ubytes are never  < 0 */
   {
	  fax_port_rate = num;    /* save new setting for valid inputs */
   }
   else
   {
	  acu_fax_command_error();
	  return;
   }

   /* If a new value is assigned and +FCLASS!=0 */
   if (fax_port_rate != hold_port_rate && fax_class)
   {
	  /* If the port rate is set */
	  if (fax_port_rate)
	  {
		 /* Turn off autobaud and setup new port rate for after last
			response */
		 new_dte_baud = translate_port_rate(fax_port_rate);
		 dont_autobaud = TRUE;
	  }
	  /* Else the port rate setting is disabled - allow for autobauding */
	  else
	  {
		 dont_autobaud = FALSE;
	  }
   }
}


/******************************************************************************
/
/   Routine:        plus_FLO_eq
/
/   Author:         RSA
/
/   Creation Date:  12/16/95
/
/   Description:    This routine is called to implement the FAX command:
/                    "AT+FLO=?"
/                   The +FLO command is used to set the DTE Flow Control Parm.
/                   This routine will output an ASCII string representing
/                       the allowed values for the "AT+FLO=<value>" command.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                (unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax20_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_FLO_eq(void)
{
   /* Respond with capabilities */
   output_info((ubyte *)FAX_FLO_QUERY, (ubyte)sr14.verbose_form);  /*ramn 1/16/96 */
}


/******************************************************************************
/
/   Routine:        plus_FLO_e
/
/   Author:         RSA
/
/   Creation Date:  12/16/95
/
/   Description:    This routine is called to implement the FAX command:
/                    "AT+FLO=<value>"
/                   The +FLO command is used to set the DTE Flow Control Parm.
/                   This action routine will set the DTE Flow Control Parameter.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                <value> is an 8 bit integer.
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax20_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_FLO_e(ubyte *parm_ptr)
{
   /* Only 0 - 2 are valid AT command parms for +FPP */
/* start change keh 8/15/95 => ubytes are never  < 0 */
/*    if (*parm_ptr >= 0 && *parm_ptr <= 2) */
   if (*parm_ptr <= 2)
/* end change keh 8/15/95 => ubytes are never  < 0 */
	  fax_flow_control = *parm_ptr;
   else
	  acu_fax_command_error();
}


/******************************************************************************
/
/   Routine:        plus_FLO_q
/
/   Author:         RSA
/
/   Creation Date:  12/16/95
/
/   Description:    This routine is called to implement the FAX command:
/                    "AT+FLO?"
/                   The +FLO command is used to set the DTE Flow Control Parm.
/                   This routine will output an ASCII string representing
/                       the current DTE Flow Control Paramter
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                (unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax20_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_FLO_q(void)
{
   plusf_d_to_a(fax_flow_control);         /* get the decimal value */
   output_info(temp_array, (ubyte)sr14.verbose_form);  /*ramn 1/16/96 */   /* respond value to dte */
}


/******************************************************************************
/
/   Routine:        plus_FPP_eq
/
/   Author:         RSA
/
/   Creation Date:  12/16/95
/
/   Description:    This routine is called to implement the FAX command:
/                    "AT+FPP=?"
/                   The +FPP command is used to set the Packet Protocol Parm.
/                   This routine will output an ASCII string representing
/                       the allowed values for the "AT+FPP=<value>" command.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                (unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax20_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_FPP_eq(void)
{
   /* Respond to dte with capability */
   output_info((ubyte *)FAX_FPP_QUERY, VERBOSE_FORM);
}


/******************************************************************************
/
/   Routine:        plus_FPP_e
/
/   Author:         RSA
/
/   Creation Date:  12/16/95
/
/   Description:    This routine is called to implement the FAX command:
/                    "AT+FPP=<value>"
/                   The +FPP command is used to set the Packet Protocol Parm.
/                   This action routine will set the Packet Protocol Parameter.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                <value> is an 8 bit integer.
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax20_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_FPP_e(ubyte *parm_ptr)
{
   ubyte num;

   /* Get AT command parameter locally */
   num = *parm_ptr;

   /* Only 1 and 0 are valid AT command parms for +FPP */
/* start change keh 8/15/95 => ubytes are never  < 0 */
/*    if (num >= 0 && num <= 1) */
   if (num <= 1)
/* end change keh 8/15/95 => ubytes are never  < 0 */
   {
	  /* if the value changed, and fax is active, reconfigure the I/O */
	  if (fax_packet_protocol != num && fax_class)
	  {
		 while (acu_to_num());          /* make sure all the outgoing data */
		 while (!check_all_sent());     /* is flushed */
		 if (num)
		 {
			acu_packet_protocol(ON, PP_TIMEOUT);
			dont_echo = TRUE;
		 }
		 else
		 {
			acu_packet_protocol(OFF, PP_TIMEOUT);
			dont_echo = FALSE;
		 }
	  }
	  fax_packet_protocol = num;  /* assign new value */
   }
   else
   {
	  acu_fax_command_error();
   }
}

/******************************************************************************
/
/   Routine:        plus_FPP_q
/
/   Author:         RSA
/
/   Creation Date:  12/16/95
/
/   Description:    This routine is called to implement the FAX command:
/                    "AT+FPP?"
/                   The +FPP command is used to set the Packet Protocol Parm.
/                   This routine will output an ASCII string representing
/                       the current Packet Protocol Parameter.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                (unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax20_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_FPP_q(void)
{
   plusf_d_to_a(fax_packet_protocol);      /* convert setting to ASCII */
   output_info(temp_array, VERBOSE_FORM);  /* respond value to dte */
}


/******************************************************************************
/
/   Routine:        plus_FMI
/
/   Author:         RSA
/
/   Creation Date:  12/16/95
/
/   Description:    This routine is called to implement the FAX command:
/                       "AT+FMI?"
/                   The +FMI command is used to Request the DCE Manufacturer.
/                   This routine will output an ASCII string representing
/                       the DCE Manufacturer.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                (unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax20_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_FMI(void)
{
   /* This Result string is stored in "sys_def.h" for easy configuration */
   /* acu_fax_query(parm_ptr,FAX20_FMI_REQUEST); */
   output_info((ubyte *)FAX20_FMI_IDENTIFICATION,(ubyte)sr14.verbose_form);  /*ramn 1/16/96 */
}

/******************************************************************************
/
/   Routine:        plus_FMM
/
/   Author:         RSA
/
/   Creation Date:  12/16/95
/
/   Description:    This routine is called to implement the FAX command:
/                       "AT+FMM?"
/                   The +FMM command is used to Request the DCE Model.
/                   This routine will output an ASCII string representing
/                       the DCE Model.
/
/   Input Parameters: parm_ptr - Pointer to the AT command's parameter:
/                                (unused).
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: PARSE_CMD_TABLE_STRUCT fax20_commands[]
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void plus_FMM(void)
{
   /* AT+FMFR command (FAX class 2 & 2.0) */

/* changed by ramn on 1/12/96. for cirrus +FMM is same as ATI3 */
/* MODEM_CHIPSET_NAME found in resp_cod.h */
   /*output_info((ubyte *)FAX2_FMFR_IDENTIFICATION,VERBOSE_FORM);*/
	output_info((ubyte *)MODEM_CHIPSET_NAME,(ubyte)sr14.verbose_form);  /*ramn 1/16/96 */
}


