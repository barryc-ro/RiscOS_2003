/****************************************************************************
/
/       Copyright 1988, 1989, 1990, 1991, 1992, 1993, 1994.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           dp00hd06.h (Copies to "hw10_def.h")
/
/       Module Version: 4.01
/
/       Function:       Hardware Specific Defines and Constants for 
/                       MNP10 data pump code.
/
/       Product:        MNP10 Data Pump Driver for an 
/                       Rockwell R144DPL based modem running on a 
/                       RSA's DB4000 (68302) platform.
/       History:            
/
/           Created:        10/12/93
/                            3/14/95 (V4.01) - Add ETC and MNP10 updates
/
/           -----------------------------------------------------------
/           -                       Modifications                     -
/           -----------------------------------------------------------
/
/           Author & Date:     RSA
/           Description:       
/           Reason:            
/
*******************************************************************************/
#define MODULE_ADDR     0x600000    /* Rockwell Card base address (DB4000) */
#define REG_SEPARATION  1           /* Difference between pump registers  */

/* Macros for reading and writing to the data pump */
#define pump_write(x,y)  (*((ubyte *)x) = y)
#define pump_read(x)     (*((ubyte *)x))
#define pump_and(x,y)    (*((ubyte *)x) &= y)
#define pump_or(x,y)     (*((ubyte *)x) |= y)

/*-------------------------------------------------------------
    R144DPL pump interface registers and bits
---------------------------------------------------------------*/
#define ARC_OFFSET        ((0x03 * REG_SEPARATION) + MODULE_ADDR)
#define ARC_BIT             0x08
#define ARC_MASK            0xf7

#define ATV25_OFFSET      ((0x0b * REG_SEPARATION) + MODULE_ADDR)
#define ATV25_BIT           0x10

#define ATBEL_OFFSET      ((0x0b * REG_SEPARATION) + MODULE_ADDR)
#define ATBEL_BIT           0x08

#define AUTO_OFFSET       ((0x15 * REG_SEPARATION) + MODULE_ADDR)
#define AUTO_BIT            0x08
#define AUTO_MASK           0xf7

#define CONF_OFFSET       ((0x12 * REG_SEPARATION) + MODULE_ADDR)
#define CONF_V22_1200       0x52
#define CONF_V22_600        0x51
#define CONF_V22BIS_2400    0x84
#define CONF_V22BIS_1200    0x82
#define CONF_V32_4800       0x71
#define CONF_V32_9600       0x75
#define CONF_V32T_9600      0x74
#define CONF_V32BIS_7200    0x78
#define CONF_V32BIS_12000   0x72
#define CONF_V32BIS_14400   0x76

#define CONF_CLEAR_DOWN     0x70
#define CONF_SINGLE_TONE    0x80

#define CTS_OFFSET        ((0x0f * REG_SEPARATION) + MODULE_ADDR)
#define CTS_BIT             0x20     
#define CTS_MASK            0xdf

#define DATA_OFFSET       ((0x09 * REG_SEPARATION) + MODULE_ADDR)
#define DATA_BIT            0x04
#define DATA_MASK           0xfb

#define DSR_OFFSET        ((0x0f * REG_SEPARATION) + MODULE_ADDR)
#define DSR_BIT             0x10

#define DTDET_OFFSET      ((0x1b * REG_SEPARATION) + MODULE_ADDR)
#define DTDET_BIT           0x40

#define DTR_OFFSET        ((0x09 * REG_SEPARATION) + MODULE_ADDR)
#define DTR_BIT             0x01
#define DTR_MASK            0xfe

#define MEACC_OFFSET      ((0x1d * REG_SEPARATION) + MODULE_ADDR)
#define MEACC_BIT           0x80

#define MEADDH_OFFSET     ((0x1d * REG_SEPARATION) + MODULE_ADDR)
#define MEADDH_MASK         0xf0

#define MEADDL_OFFSET     ((0x1c * REG_SEPARATION) + MODULE_ADDR)
#define MEADDL_MASK         0x00

#define MEDAL_OFFSET      ((0x18 * REG_SEPARATION) + MODULE_ADDR)
#define MEDAM_OFFSET      ((0x19 * REG_SEPARATION) + MODULE_ADDR) 

#define MEMW_OFFSET       ((0x1d * REG_SEPARATION) + MODULE_ADDR)
#define MEMW_BIT            0x20
#define MEMW_MASK           0xdf

#define NEWC_OFFSET       ((0x1f * REG_SEPARATION) + MODULE_ADDR)
#define NEWC_BIT            0x01
#define NEWC_MASK           0xfe

#define NV25_OFFSET       ((0x09 * REG_SEPARATION) + MODULE_ADDR)
#define NV25_BIT            0x80
#define NV25_MASK           0x7f

#define ORG_OFFSET        ((0x09 * REG_SEPARATION) + MODULE_ADDR)
#define ORG_BIT             0x10
#define ORG_MASK            0xef

#define RLSD_OFFSET       ((0x0f * REG_SEPARATION) + MODULE_ADDR)
#define RLSD_BIT            0x80

#define RREDT_OFFSET      ((0x0E * REG_SEPARATION) + MODULE_ADDR)
#define RREDT_BIT           0x20
#define RREDT_MASK          0xdf

#define RREN_OFFSET       ((0x15 * REG_SEPARATION) + MODULE_ADDR)
#define RREN_BIT            0x04

#define RSEQ_OFFSET       ((0x0c * REG_SEPARATION) + MODULE_ADDR)
#define RSEQ_BIT            0x01
#define RSEQ_MASK           0xfe

#define RTDET_OFFSET      ((0x0e * REG_SEPARATION) + MODULE_ADDR)
#define RTDET_BIT           0x80

#define RTRN_OFFSET       ((0x08 * REG_SEPARATION) + MODULE_ADDR)
#define RTRN_BIT            0x02     

#define RTS_OFFSET        ((0x08 * REG_SEPARATION) + MODULE_ADDR)
#define RTS_BIT             0x01     
#define RTS_MASK            0xfe

#define SPEED_OFFSET      ((0x0e * REG_SEPARATION) + MODULE_ADDR)
#define SPEED_BITS          0x0f
#define SPEED_MASK          0xf0

#define TLVL_OFFSET       ((0x13 * REG_SEPARATION) + MODULE_ADDR)
#define TLVL_BITS           0xf0
#define TLVL_MASK           0x0f

#define TDE_OFFSET        ((0x02 * REG_SEPARATION) + MODULE_ADDR)
#define TDE_BIT             0x80

#define TXSQ_OFFSET       ((0x05 * REG_SEPARATION) + MODULE_ADDR)
#define TXSQ_BIT            0x10
#define TXSQ_MASK           0xef

#define V32BS_OFFSET      ((0x04 * REG_SEPARATION) + MODULE_ADDR)
#define V32BS_BIT           0x20

#define V32BDT_OFFSET     ((0x0e * REG_SEPARATION) + MODULE_ADDR)
#define V32BDT_BIT          0x10
           
/*-------------------------------------------------------------
    R144DPL internal pump RAM addresses and values 
---------------------------------------------------------------*/
#define DUAL_TONE_1_POWER_LEVEL 0x0284
#define DUAL_TONE_1_FREQ        0x0280
#define EQM_ADDR                0x020c
#define AGC_GAIN_WORD           0x0a00
#define TRANSMITTED_R           0x204
#define R1_MASK                 0x2C0   /* and 0x2C1*/
#define R2_MASK                 0x2C2   /* and 0x2C3 */
#define R4_MASK                 0x2C4   /* and 0x2C5 */
#define R5_MASK                 0x2C6   /* and 0x2C7 */

/* Pump RAM Tone frequency defines */
#define TONE1_2100HZ    0x4aab
#define TONE1_LVL_10DB  0x4c6a

/* Pump RAM rate sequence word defines */
#define CLEAR_DOWN_SEQUENCE 0x0111
#define V32_4800_BIT        0x0400
#define V32_4800_MASK       0xFBFF
#define V32_9600_BIT        0x0200
#define V32_9600_MASK       0xFDFF
#define V32T_9600_BIT       0x0280
#define V32T_9600_MASK      0xFD7F
#define V32BIS_7200_BIT     0x08C0
#define V32BIS_12000_BIT    0x08A0
#define V32BIS_14400_BIT    0x0888
#define V32_TRELLIS_BIT     0x0080
#define V32BIS_BIT          0x0800
#define TRELLIS_BIT         0x0080
#define NO_SPEED            0x0000
#define MIN_7200_MASK       0x0268	 /* Selects 14400, 12000, 9600, 7200   */
#define MIN_9600_MASK       0x0200	 /* Selects 9600   */
#define MIN_9600B_MASK      0x0228	 /* Selects 14400, 12000, 9600	 */
#define MIN_12000_MASK      0x0028	 /* Selects 14400, 12000   */
#define MIN_14400_MASK      0x0008	 /* Selects 14400   */

/* Upper byte of EQM RAM for line quaility */
#define QUAL_1200_VERY_GOOD     0x08
#define QUAL_1200_BAD           0x35
#define QUAL_1200_VERY_BAD      0x70

#define QUAL_2400_VERY_GOOD     0x15
#define QUAL_2400_BAD           0x2f 
#define QUAL_2400_VERY_BAD      0x70

#define QUAL_4800_VERY_GOOD     0x0E
#define QUAL_4800_BAD           0x28 
#define QUAL_4800_VERY_BAD      0x70

#define QUAL_7200_VERY_GOOD     0x0E
#define QUAL_7200_BAD           0x1d 
#define QUAL_7200_VERY_BAD      0x70

#define QUAL_9600_VERY_GOOD     0x0E
#define QUAL_9600_BAD           0x1a 
#define QUAL_9600_VERY_BAD      0x70

#define QUAL_12000_VERY_GOOD    0x0E
#define QUAL_12000_BAD          0x1a 
#define QUAL_12000_VERY_BAD     0x70

#define QUAL_14000_VERY_GOOD    0x0E
#define QUAL_14400_BAD          0x2b 
#define QUAL_14400_VERY_BAD     0x70
    
/* MSByte of EQM defines for measurements at 4800, for initial-upshifting to 
    higher speeds. Used by "dp10_get_v32_upshift_speed() */
#define QUAL_MAX_UPSHIFT_4800   0x14 
#define QUAL_MAX_UPSHIFT_7200   0x10 
#define QUAL_MAX_UPSHIFT_9600   0x08
#define QUAL_MAX_UPSHIFT_12000  0x05 


/* DP10 transmit level defines */
#define PUMP_MAX_TX_LEVEL           0  /* MAX Tx Level for R144DPL (0 dB)   */
#define PUMP_MIN_TX_LEVEL           15 /* MIN Tx Level for R144DPL (-15 dB) */

/* Initial PSTN transmit level for cellular calls for this platform */
#define DP10_DEFAULT_PSTN_TX_LVL    PUMP_MIN_TX_LEVEL

/* RAM access methods for dp10_pump_read_ram, dp10_pump_write_ram */
#define METHOD1        1
#define METHOD2        2
#define METHOD3        3
#define METHOD4        4

/* extra defines for "dp10_handshake_state" */
#define WAIT_ANSWER_TONE_GONE       32 

/* Bit and Mask defines for "possible_rates" */
/* keh - should be in dp10_def.h */
#define BPS1200_BIT	0x01		
#define BPS2400_BIT	0x02	      
#define BPS4800_BIT	0x04	      
#define BPS7200_BIT	0x08	       
#define BPS9600_BIT	0x10	       
#define BPS12000_BIT	0x20	      
#define BPS14400_BIT	0x40	      

#define MAX_1200BPS	0x01
#define MAX_2400BPS	0x03
#define MAX_4800BPS	0x07
#define MAX_7200BPS	0x0F
#define MAX_9600BPS	0x1F
#define MAX_12000BPS	0x3F
#define MAX_14400BPS	0x7F

