/****************************************************************************
/
/   Copyright, 1991,1992,1993,1994.       All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.  The information contained herein is solely
/   for the use of RSA.
/
/   File: f2x00def.h
/
/   Module Version: 4.03
/
/   Function: This file contains constants and definitions for the class 2 FAX.
/
/   Product: FAX class 2 core code
/
/   History:
/
/   Created: 1/29/92
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
****************************************************************************/

/* Defines for the command parameter passed to fax2_execute_cmd() */
#define FAX2_FBADLIN_COMMAND 100
#define FAX2_FBADMUL_COMMAND 101
#define FAX2_FBOR_COMMAND   102
#define FAX2_FBUG_COMMAND   103
#define FAX2_FCQ_COMMAND    104
#define FAX2_FCR_COMMAND    105
#define FAX2_FCTCRTY_COMMAND 106
#define FAX2_FDCC_COMMAND   107
#define FAX2_FDFFC_COMMAND  108
#define FAX2_FDIS_COMMAND   109
#define FAX2_FDR_COMMAND    110
#define FAX2_FDT_COMMAND    111
#define FAX2_FECM_COMMAND   112
#define FAX2_FET_COMMAND    113
#define FAX2_FK_COMMAND     114
#define FAX2_FLID_COMMAND   115
#define FAX2_FLNFC_COMMAND  116
#define FAX2_FLPL_COMMAND   117
#define FAX2_FMINSP_COMMAND 118
#define FAX2_FPHCTO_COMMAND 119
#define FAX2_FPTS_COMMAND   120
#define FAX2_FRBC_COMMAND   121
#define FAX2_FREL_COMMAND   122
#define FAX2_FSPL_COMMAND   123
#define FAX2_FTBC_COMMAND   124
#define FAX2_FVRFC_COMMAND  125
#define FAX2_FWDFC_COMMAND  126
#define FAX2_FAXERR_REQUEST 127
#define FAX2_FBADLIN_REQUEST 128
#define FAX2_FBADMUL_REQUEST 129
#define FAX2_FBOR_REQUEST   130
#define FAX2_FBUF_REQUEST   131
#define FAX2_FBUG_REQUEST   132
#define FAX2_FCQ_REQUEST    133
#define FAX2_FCR_REQUEST    134
#define FAX2_FCTCRTY_REQUEST 135
#define FAX2_FDCC_REQUEST   136
#define FAX2_FDCS_REQUEST   137
#define FAX2_FDFFC_REQUEST  138
#define FAX2_FDIS_REQUEST   139
#define FAX2_FECM_REQUEST   140
#define FAX2_FET_REQUEST    141
#define FAX2_FLID_REQUEST   142
#define FAX2_FLNFC_REQUEST  143
#define FAX2_FLPL_REQUEST   144
#define FAX2_FMDL_REQUEST   145
#define FAX2_FMFR_REQUEST   146
#define FAX2_FREV_REQUEST   147
#define FAX2_FMINSP_REQUEST 148
#define FAX2_FPHCTO_REQUEST 149
#define FAX2_FPTS_REQUEST   150
#define FAX2_FRBC_REQUEST   151
#define FAX2_FREL_REQUEST   152
#define FAX2_FSPL_REQUEST   153
#define FAX2_FTBC_REQUEST   154
#define FAX2_FVRFC_REQUEST  155
#define FAX2_FWDFC_REQUEST  156
#define FAX2_FAXERR_QUERY   157
#define FAX2_FBADLIN_QUERY  158
#define FAX2_FBADMUL_QUERY  159
#define FAX2_FBOR_QUERY     160
#define FAX2_FBUG_QUERY     161
#define FAX2_FCQ_QUERY      162
#define FAX2_FCR_QUERY      163
#define FAX2_FCTCRTY_QUERY  164
#define FAX2_FDCC_QUERY     165
#define FAX2_FDCS_QUERY     166
#define FAX2_FDFFC_QUERY    167
#define FAX2_FDIS_QUERY     168
#define FAX2_FDR_QUERY      169
#define FAX2_FDT_QUERY      170
#define FAX2_FECM_QUERY     171
#define FAX2_FET_QUERY      172
#define FAX2_FK_QUERY       173
#define FAX2_FLID_QUERY     174
#define FAX2_FLNFC_QUERY    175
#define FAX2_FLPL_QUERY     176
#define FAX2_FMINSP_QUERY   177
#define FAX2_FPHCTO_QUERY   178
#define FAX2_FPTS_QUERY     179
#define FAX2_FRBC_QUERY     180
#define FAX2_FREL_QUERY     181
#define FAX2_FSPL_QUERY     182
#define FAX2_FTBC_QUERY     183
#define FAX2_FVRFC_QUERY    184
#define FAX2_FWDFC_QUERY    185

/* Defines for the command parameter passed to fax20_execute_cmd() */
#define FAX20_FBO_COMMAND   200
#define FAX20_FBU_COMMAND   201
#define FAX20_FCC_COMMAND   202
#define FAX20_FCQ_COMMAND   203
#define FAX20_FCR_COMMAND   204
#define FAX20_FCT_COMMAND   205
#define FAX20_FDR_COMMAND   206
#define FAX20_FDT_COMMAND   207
#define FAX20_FEA_COMMAND   208
#define FAX20_FFC_COMMAND   209
#define FAX20_FIE_COMMAND   210
#define FAX20_FIS_COMMAND   211
#define FAX20_FKS_COMMAND   212
#define FAX20_FLI_COMMAND   213
#define FAX20_FLP_COMMAND   214
#define FAX20_FMS_COMMAND   215
#define FAX20_FNR_COMMAND   216
#define FAX20_FNS_COMMAND   217
#define FAX20_FPI_COMMAND   218
#define FAX20_FPS_COMMAND   219
#define FAX20_FRQ_COMMAND   220
#define FAX20_FRY_COMMAND   221
#define FAX20_FSP_COMMAND   222
#define FAX20_FBS_REQUEST   223
#define FAX20_FBO_REQUEST   224
#define FAX20_FBU_REQUEST   225
#define FAX20_FCC_REQUEST   226
#define FAX20_FCQ_REQUEST   227
#define FAX20_FCR_REQUEST   228
#define FAX20_FCS_REQUEST   229
#define FAX20_FCT_REQUEST   230
#define FAX20_FEA_REQUEST   231
#define FAX20_FFC_REQUEST   232
#define FAX20_FHS_REQUEST   233
#define FAX20_FIE_REQUEST   234
#define FAX20_FIS_REQUEST   235
#define FAX20_FLI_REQUEST   236
#define FAX20_FLP_REQUEST   237
#define FAX20_FMI_REQUEST   238
#define FAX20_FMM_REQUEST   239
#define FAX20_FMR_REQUEST   240
#define FAX20_FMS_REQUEST   241
#define FAX20_FNR_REQUEST   242
#define FAX20_FNS_REQUEST   243
#define FAX20_FPI_REQUEST   244
#define FAX20_FPS_REQUEST   245
#define FAX20_FRQ_REQUEST   246
#define FAX20_FRY_REQUEST   247
#define FAX20_FSP_REQUEST   248
#define FAX20_FBO_QUERY     249
#define FAX20_FBU_QUERY     250
#define FAX20_FCC_QUERY     251
#define FAX20_FCQ_QUERY     252
#define FAX20_FCR_QUERY     253
#define FAX20_FCT_QUERY     254
#define FAX20_FDR_QUERY     255
#define FAX20_FDT_QUERY     256
#define FAX20_FEA_QUERY     257
#define FAX20_FFC_QUERY     258
#define FAX20_FIE_QUERY     259
#define FAX20_FIS_QUERY     260
#define FAX20_FKS_QUERY     261
#define FAX20_FLI_QUERY     262
#define FAX20_FLP_QUERY     263
#define FAX20_FMS_QUERY     264
#define FAX20_FNR_QUERY     265
#define FAX20_FNS_QUERY     266
#define FAX20_FPI_QUERY     267
#define FAX20_FPS_QUERY     268
#define FAX20_FRQ_QUERY     269
#define FAX20_FRY_QUERY     270
#define FAX20_FSP_QUERY     271

/* dumby constant for an unused parameter */
#define UNUSED              0

/* modulation/speed configuration defines passed in to the Modem Task */
#define MOD_V21_300         3       /* V.21 ch.2    300   */
#define MOD_V27_2400        24      /* V.27 ter     2400  */
#define MOD_V27_4800        48      /* V.27 ter     4800  */
#define MOD_V29_7200        72      /* V.29         7200  */
#define MOD_V17_7200        73      /* V.17         7200  */
#define MOD_V17ST_7200      74      /* V.17 w/st    7200  */
#define MOD_V29_9600        96      /* V.29         9600  */
#define MOD_V17_9600        97      /* V.17         9600  */
#define MOD_V17ST_9600      98      /* V.17 w/st    9600  */
#define MOD_V17_12000       121     /* V.17         12000 */
#define MOD_V17ST_12000     122     /* V.17 w/st    12000 */
#define MOD_V17_14400       145     /* V.17         14400 */
#define MOD_V17ST_14400     146     /* V.17 w/st    14400 */

/* defines for fax2_init() passed in parameter */
#define INIT_POWERUP        0       /* called from powerup */
#define INIT_AND_F          1       /* called from AT&F or ATZ command */
#define INIT_FIP            2       /* called from AT+FIP command */

#define AF                  0       /* T.30 HDLC address field */
#define CF                  1       /* T.30 HDLC control field */
#define FCF                 2       /* T.30 HDLC facsimile control field */
#define FIF_1               3       /* T.30 HDLC facsimile information field */
#define FIF_2               4       /* T.30 HDLC facsimile information field */
#define FIF_3               5       /* T.30 HDLC facsimile information field */
#define FIF_4               6       /* T.30 HDLC facsimile information field */
#define FIF_5               7       /* T.30 HDLC facsimile information field */
#define FIF_6               8       /* T.30 HDLC facsimile information field */
#define FIF_7               9       /* T.30 HDLC facsimile information field */

#define DLE                 0x10    /* DLE shielding character */
#define ETX                 0x03    /* end of data control character */
#define SUB                 0x1A    /* <DLE><SUB> == <DLE><DLE> <DLE><DLE> */
#define CR                  0x0D    /* carage return control character */
#define LF                  0x0A    /* line field control character */
#define DC2                 0x12    /* used by the APP to indicate readiness */
#define DC1                 0x11    /* used by the APP to indicate readiness */
#define CAN                 0x18    /* used by the APP and modem to abort */
#define XON                 0x11    /* indicates readiness for transmit to the APP */

#define BASE_COUNT          3       /* at least 3 bytes in a T.30 HDLC packet */
#define ADDRESS_VALUE       0xFF    /* FAX uses the broadcast address */
#define CONTROL_VALUE       0x03    /* indicates more packets in sream */
#define FINAL_FRAME_MASK    0x10    /* indicates last packet when ORed w/ CONTROL_VALUE */
#define ID_LENGTH           20      /* all FIF ID fields are of this length */
#define NSF_LENGTH          180     /* FIF for all non-standard facilities packets */
#define INFO_LENGTH         70      /* command response text information size */
/* This array has to hold the maximum size scan line plus the last EOL byte of */
/* the previous scan line plus the first byte of the EOL for the presently */
/* buffered scan line. that involves a 2432 pixel 1-D scan line with alternating */
/* white and black pixels. a white one pixel run is represented with 6 bits. */
/* a black one pixel run is represented with 3 bits. this incorporates the */
/* following formula: ((((2432 / 2) * 6) + ((2432 / 2) * 3)) / 8) + 2 */
#define MAX_SCAN_LENGTH     1370    /* Size of the longest expected scan line */

#define QT_GOOD_LINES_PERCENT 95    /* % < good lines for a retrain negative */
#define QT_BAD_LINE_CONSEC  15      /* # consec bad lines for a retrain negative */
#define QT_BAD_LINES        4       /* # bad lines for a retrain positive */

#define VD_MASK             0xFE    /* ANDed to FCF to mask the valid DIS received bit */
#define DIS_DTC_MASK        0x0E    /* if any of these bits are set, the VD bit is valid */

#define RX_MODE             0       /* configure for receive operations */
#define TX_MODE             1       /* configure for transmit operations */

#define DATA_MODE           0       /* configure for generic sync data mode */
#define HDLC_MODE           1       /* configure for HDLC control and ECM mode */

/* assignment of 0 and 1 is important for an algorithm */
#define DIRECT              0       /* direct bit ordering */
#define REVERSE             1       /* reverse bit ordering */

#define SHORT_TRAIN         0       /* used in V.33 and V.17 page data trasmission */
#define LONG_TRAIN          1       /* used in V.33 and V.17 TCF transmission */

#define NO_CARRIER          0       /* Modem Task has not detected a carrier */
#define CONFIGURED_CARRIER  1       /* Modem Task has detected the configured carrier */
#define V21_CARRIER         2       /* Modem Task detected a V.21 ch2 carrier */

#define OFF                 0       /* turn off capability */
#define ON                  1       /* turn on capability */

#define ANSWER              0       /* answer connection establishment */
#define ORIGINATE           1       /* originate connection establishment */

#define NUMERIC             0       /* numeric response format */
#define VERBOSE             1       /* verbose response format */

#define NO_FLOW_CONTROL     0       /* configure I/O for no flow control */

#define NO_FLOW             1       /* do not configure for flow control */
#define MODEM_TO_APP_FLOW   2       /* configure flow control modem to APP */
#define APP_TO_MODEM_FLOW   3       /* configure flow control APP to modem */

#define HDLC_BUFFER_COUNT   5       /* number of allocated control HDLC buffers */

#define EMPTY_BUFFERS_COUNT 10      /* number of chars left in the I/O buffers */
                                    /* during reception to indicate empty */

#define DATA_CHARS_IN_DCE   2       /* # of chars allowed in DCE buffer while */
                                    /* waiting to detect carrier */

#define UNACCEPTABLE_BAD_COUNT 100  /* large # of non NULL chars to force an FTT */

#define STANDARD_2388       2       /* +FCLASS setting for TIA/EIA PN2388 */
#define STANDARD_592        20      /* +FCLASS setting for TIA/EIA-592 */

#define NULLS_BEFORE_TCF    20      /* # of NULLs to indicate a clean TCF start */

#define MAX_RESPONSE_LENGTH 50      /* longest possible response to the APP */

/* values assigned to fax2_received_command */
#define EMPTY_COMMAND       0
#define FDR_COMMAND         1
#define FDT_COMMAND         2
#define FET_COMMAND         3

/* fax2_execute_command() return codes */
#define GOTO_ONLINE         0
#define CONTINUE_PARSING    1
#define TERMINATE_WITH_ERROR 2
#define NOTA_COMMAND        3

/* fax2_bg() return codes */
#define STAY_ONLINE         0
#define STAY_PARSE          1
#define GOTO_PARSE_OK       2
#define GOTO_PARSE_NO_CARRIER 3
#define GOTO_PARSE_ERROR    4
#define GOTO_HANGUP         5
#define GOTO_ONLINE_BG      6
#define GOTO_PARSE_FCERROR  7

/* fax2 state definitions */
#define IDLE                0
#define PHASE_B_RECEIVE     1
#define PHASE_C_RECEIVE     2
#define PHASE_D_RECEIVE     3
#define PHASE_B_TRANSMIT    4
#define PHASE_C_TRANSMIT    5
#define PHASE_D_TRANSMIT    6
#define PHASE_E             7

/* fax2 sub state definitions */
#define INITIALIZE          0
#define SCHEDULE_DIS_BLOCK  1
#define SCHEDULE_DTC_BLOCK  2
#define TX_DIS_DTC_BLOCK    3
#define RX_DCS_DTC_BLOCK    4
#define RX_COMMAND_OR_DATA  5
#define CONFIGURE_RX_DATA   6
#define RX_COMMAND          7
#define ROUTE_COMMAND       8
#define RX_TCF              9
#define WAIT_FOR_FDR        10
#define CHECK_TCF           11
#define TX_TCF_RESPONSE     12
#define WAIT_FOR_DC2        13
#define RX_DATA             14
#define FLUSH_LINE          15
#define EXECUTE_CAN         16
#define SCHEDULE_PP_RESPONSE 17
#define TX_PP_RESPONSE      18
#define PROCESS_COMMAND     19
#define WAIT_FOR_FDT_FDR    20
#define SCHEDULE_DCS_BLOCK  21
#define TX_DCS_BLOCK        22
#define TX_TCF              23
#define RX_TCF_RESPONSE     24
#define ROUTE_RESPONSE      25
#define CONFIGURE_TX_DATA   26
#define TX_DATA             27
#define WAIT_TO_TERMINATE   28
#define WAIT_FOR_FET        29
#define SCHEDULE_PP_COMMAND 30
#define TX_PP_COMMAND       31
#define RX_PP_RESPONSE      32
#define PROCESS_PP_RESPONSE 33
#define SCHEDULE_PRIQ       34
#define TX_PRIQ             35
#define WAIT_FOR_FDT        36
#define SCHEDULE_DCN_PACKET 37
#define TX_DCN_PACKET       38
#define TERMINATE           39
#define TX_DATA_FILL_SCAN   40
#define TX_DATA_FLUSH_SCAN  41
#define FULFILL_MINIMUM_SCAN 42
#define RX_FIRST_DATA_BYTE  43

/* fax2 utility state definitions */
/* #define INITIALIZE          0 */
#define WAIT_TO_CONFIGURE   1
#define WAIT_FOR_CTS        2
#define TRANSMIT_TCF        3
#define WAIT_FOR_CD         4
#define LOOK_FOR_NULLS      5
#define RECEIVE_TCF         6
#define WAIT_CD_LOSS        7
#define WAIT_FOR_FLAG       8
#define WAIT_FOR_PACKET     9
#define WAIT_TX_COMPLETE    10
/* #define WAIT_TO_TERMINATE   28 */

/* fax2_configure_rx_data(), fax2_command_receive() parameter constants */
#define EXECUTE             0
#define ABORT               1

/* fax2_configure_rx_data() return codes */
#define DETECTED_DATA       0
#define DETECTED_COMMAND    1
#define STILL_LOOKING       2

/* fax2_response_receive() and fax2_command_receive() return codes */
#define NO_RESPONSE         0
#define TRANSMIT_DCN        1
#define PROCESSING          2
#define TERMINATE_SESSION   3
#define RECEIVED_RESPONSE   4
#define RECEIVED_COMMAND    5
#define NO_COMMAND          6

/* hangup status codes */

/* call placement and termination */
#define PROPER_END_OF_CONNECTION    0x00
#define FKS_ABORTED_CONNECTION      0x02

/* transmit phase A and miscellaneous errors */
#define TX_A_T1_TIMEOUT_ERROR               0x11

/* transmit phase B hangup codes */
#define TX_B_UNSPECIFIED_ERROR              0x20
#define TX_B_NO_TX_RX_ERROR                 0x21
#define TX_B_COMREC_ERROR                   0x22
#define TX_B_COMREC_INVALID_COMMAND_ERROR   0x23
#define TX_B_RSPREC_ERROR                   0x24
#define TX_B_3DCS_NO_RESPONSE_ERROR         0x25
#define TX_B_3DIS_DTC_NO_DCS_ERROR          0x26
#define TX_B_FAILURE_TO_TRAIN_ERROR         0x27
#define TX_B_RSPREC_INVALID_RESPONSE_ERROR  0x28

/* transmit phase C hangup codes */
#define TX_C_UNSPECIFIED_ERROR              0x40

/* transmit phase D hangup codes */
#define TX_D_UNSPECIFIED_ERROR              0x50
#define TX_D_RSPREC_ERROR                   0x51
#define TX_D_NO_RESPONSE_MPS_ERROR          0x52
#define TX_D_INVALID_RESPONSE_MPS_ERROR     0x53
#define TX_D_NO_RESPONSE_EOP_ERROR          0x54
#define TX_D_INVALID_RESPONSE_EOP_ERROR     0x55
#define TX_D_NO_RESPONSE_EOM_ERROR          0x56
#define TX_D_INVALID_RESPONSE_EOM_ERROR     0x57
#define TX_D_UNABLE_PIP_PIN_ERROR           0x58

/* receive phase B hangup codes */
#define RX_B_RSPREC_ERROR                   0x71
#define RX_B_COMREC_ERROR                   0x72
#define RX_B_T2_TIMEOUT_ERROR               0x73
#define RX_B_T1_TIMEOUT_ERROR               0x74
#define RX_C_GENERAL_ERROR                  0x90
#define RX_C_5_SECOND_SCAN_ERROR            0x91
#define RX_D_RSPREC_ERROR                   0xA1
#define RX_D_UNABLE_PIP_PIN_ERROR           0xA3

/* fax2_response() parameter to indicated the type of response requested */
#define DIS_RESPONSE        0
#define DTC_RESPONSE        1
#define DCS_RESPONSE        2
#define CSI_RESPONSE        3
#define TSI_RESPONSE        4
#define CIG_RESPONSE        5
#define NSF_RESPONSE        6
#define NSS_RESPONSE        7
#define NSC_RESPONSE        8
#define PPR_RESPONSE        9
#define PPC_RESPONSE        10
#define VOICE_RESPONSE      11
#define FCON_RESPONSE       12
#define CONNECT_RESPONSE    13
#define HANGUP_RESPONSE     14
#define POLL_RESPONSE       15
#define FPTS_RESPONSE       16
#define CFR_RESPONSE        17

/* class 2 post page response codes */
#define MCF_PPR             1
#define RTN_PPR             2
#define RTP_PPR             3
#define PIN_PPR             4
#define PIP_PPR             5

/* class 2 post page response codes which are only valid when in ECM */
#define PPR_PPR             6  /* partial page request */
#define RNR_PPR             7  /* receiver not ready */
#define ERR_PPR             8  /* end of retransmission response */
#define CTR_PPR             9  /* continue to correct response */

/* class 2 post page command codes */
#define MPS_PPC             0
#define EOM_PPC             1
#define EOP_PPC             2
#define PRI_MPS_PPC         3
#define PRI_EOM_PPC         4
#define PRI_EOP_PPC         5
#define NO_PPC              0xFF

/* class 2 post page command codes which are only valid when in ECM*/
/* see array fax2_ecm_pri_initiated[] when modifying the following constants */
/* Note: the ordering of the following constants is important (i.e., the code
relies on the following constants being in a certain order for range testing,
(PPS-Q commands fall between 0 and 6, inclusive for example
PPS -> EOR mapping, etc.)*/

#define PPS_MPS_PPC         0
#define PPS_EOM_PPC         1
#define PPS_EOP_PPC         2
#define PPS_PRI_MPS_PPC     3
#define PPS_PRI_EOM_PPC     4
#define PPS_PRI_EOP_PPC     5
#define PPS_NULL_PPC        6
#define EOR_MPS_PPC         7
#define EOR_EOM_PPC         8
#define EOR_EOP_PPC         9
#define EOR_PRI_MPS_PPC     10
#define EOR_PRI_EOM_PPC     11
#define EOR_PRI_EOP_PPC     12
#define EOR_NULL_PPC        13
#define CTC_PPC             14
#define RR_PPC              15
#define UNRECOGNIZED_ECMPPC 0xFF

/* adding this number translates a PPS_Q to EOR_Q */
#define PPS_Q_TO_EOR_Q      EOR_MPS_PPC

/* subtracting this number translates a PPS_PRI_Q to/from a PPS_Q */
#define PRI_Q_TO_PPS_Q      3
#define PPS_Q_TO_PRI_Q      3

/* subtracting this number translates a EOR_PRI_Q to EOR_Q */
#define EOR_PRI_Q_TO_EOR_Q  3

/* this number gives the upper range of PPS-Q, PPS-PRI-Q PMCs */
#define PPS_Q_MAX_INDEX     PPS_NULL_PPC

/* define the lower/upper range of EOR-Q, EOR-PRI-Q PMCs */
#define EOR_Q_MIN_INDEX     EOR_MPS_PPC
#define EOR_Q_MAX_INDEX     EOR_NULL_PPC

/* define the lower/upper range of PPS-PRI-Q PMCs */
#define PPS_PRI_Q_MIN_INDEX PPS_PRI_MPS_PPC
#define PPS_PRI_Q_MAX_INDEX PPS_PRI_EOP_PPC

/* define the lower/upper range of EOR-PRI-Q PMCs */
#define EOR_PRI_Q_MIN_INDEX EOR_PRI_MPS_PPC
#define EOR_PRI_Q_MAX_INDEX EOR_PRI_EOP_PPC

/* T.30 facsimile control field codes */
#define DIS_PACKET          0x80
#define CSI_PACKET          0x40
#define NSF_PACKET          0x20
#define DTC_PACKET          0x81
#define CIG_PACKET          0x41
#define NSC_PACKET          0x21
#define DCS_PACKET          0x82
#define TSI_PACKET          0x42
#define NSS_PACKET          0x22
#define CFR_PACKET          0x84
#define FTT_PACKET          0x44
#define EOM_PACKET          0x8E
#define MPS_PACKET          0x4E
#define EOP_PACKET          0x2E
#define PRI_EOM_PACKET      0x9E
#define PRI_MPS_PACKET      0x5E
#define PRI_EOP_PACKET      0x3E
#define MCF_PACKET          0x8C
#define RTP_PACKET          0xCC
#define RTN_PACKET          0x4C
#define PIP_PACKET          0xAC
#define PIN_PACKET          0x2C
#define DCN_PACKET          0xFA
#define CRP_PACKET          0x1A

/* T.30 facsimile control field codes for ECM */
/* defines for 16-bit FCF for PPS-XXX and EOR-XXXX */

#define CTC_PACKET         0x12
#define CTR_PACKET         0xC4

#define PPS_FCF1_PACKET    0xBE  /* FCF1 for PPS-XXX */
#define EOR_FCF1_PACKET    0xCE  /* FCF1 for EOR-XXX */

#define MPS_FCF2_PACKET    0x4F  /* FCF2 for XXX-MPS */
#define EOM_FCF2_PACKET    0x8F  /* FCF2 for XXX-EOM */
#define EOP_FCF2_PACKET    0x2F  /* FCF2 for XXX-EOP */
#define NULL_FCF2_PACKET   0x00  /* FCF2 for XXX-NULL */
#define PRI_MPS_FCF2_PACKET    0x5F  /* FCF2 for XXX-PRI-MPS */
#define PRI_EOM_FCF2_PACKET    0x9F  /* FCF2 for XXX-PRI-EOM */
#define PRI_EOP_FCF2_PACKET    0x3F  /* FCF2 for XXX-PRI-EOP */

#define RR_PACKET              0x6E

#define PPR_PACKET             0xBC
#define RNR_PACKET             0xEC
#define ERR_PACKET             0x1C

/* number of characters transmitted during one second at the specified speed */
#define TCF_2400_COUNT      300
#define TCF_4800_COUNT      600
#define TCF_7200_COUNT      900
#define TCF_9600_COUNT      1200
#define TCF_12000_COUNT     1500
#define TCF_14400_COUNT     1800

/* maximum number of non NULL characters acceptable at the specified speed */
#define BAD_2400_COUNT      0
#define BAD_4800_COUNT      0
#define BAD_7200_COUNT      6
#define BAD_9600_COUNT      12
#define BAD_12000_COUNT     18
#define BAD_14400_COUNT     22

/* fax2 timing constants */
/* start change 2/23/95 rjm */
#define DELAY_HDLC_PROPAGATE 8     /* data pump propagation at V.21 ch2 */
/* end change 2/23/95 rjm */

#define DELAY_DATA_PROPAGATE 5      /* data pump propagation at high speeds */
#define DELAY_TO_CONFIGURE_TX 20    /* time for remote to configure to receive */
#define DELAY_1SECOND_FLAGS 100     /* idle flags in V.21 ch2 for remote PLL */
#define T1_TIMEOUT          3500    /* T.30 T1 timeout */
#define T2_TIMEOUT          600     /* T.30 T2 timeout */
#define T3_TIMEOUT          1000    /* T.30 T3 timeout */
#define T4_TIMEOUT          300     /* T.30 T4 timeout */
#define T5_TIMEOUT          6000    /* T.30 T5 timeout */
#define THREE_SECONDS       300     /* three second timer */
#define TENTHS_SECOND       10      /* 100 MS timer */
#define NO_TCF_TIMEOUT      350     /* timeout waiting for TCF carrier */
#define TCF_RECEIVE_TIMEOUT 200     /* timeout not receiving a complete TCF */
#define TCF_TRANSMIT_TIMEOUT 150    /* length of a TCF transmission */

/* response prefix strings class 2.0 */
#define CONNECT_592         "CONNECT"
#define CSI_592             "+FCI:\""
#define FCON_592            "+FCO"
#define DCS_592             "+FCS:"
#define PPC_592             "+FET:"
#define HANGUP_592          "+FHS:"
#define FHR_592             "+FHR:"
#define FHT_592             "+FHT:"
#define DIS_592             "+FIS:"
#define NSC_592             "+FNC:"
#define NSF_592             "+FNF:"
#define NSS_592             "+FNS:"
#define CIG_592             "+FPI:\""
#define POLL_592            "+FPO"
#define PPR_592             "+FPS:"
#define DTC_592             "+FTC:"
#define TSI_592             "+FTI:\""
#define VOICE_592           "+FVO"

/* response prefix strings class 2 */
#define CSI_2388            "+FCSI:\""
#define FCON_2388           "+FCON"
#define DCS_2388            "+FDCS:"
#define PPC_2388            "+FET:"
#define HANGUP_2388         "+FHNG:"
#define DIS_2388            "+FDIS:"
#define NSC_2388            "+FNSC:"
#define NSF_2388            "+FNSF:"
#define NSS_2388            "+FNSS:"
#define CIG_2388            "+FCIG:\""
#define POLL_2388           "+FPOLL"
#define PPR_2388            "+FPTS:"
#define DTC_2388            "+FDTC:"
#define TSI_2388            "+FTSI:\""
#define VOICE_2388          "+FVOICE"
#define CFR_2388            "+FCFR"

/* T.30 DIS and DTC bit configuration assignments */
#define DIS_TRANSMIT        0x01
#define DIS_RECEIVE         0x02

#define DIS_BR_V27_FALL_BACK 0x00
#define DIS_BR_V27          0x08
#define DIS_BR_V27_V29      0x0C
#define DIS_BR_V27_V29_V17  0x2C

#define DIS_VR              0x40
#define DIS_DF_MR           0x80

#define DIS_WD_1728         0x00
#define DIS_WD_1728_2048    0x01
#define DIS_WD_1728_2048_2432 0x02

#define DIS_LN_297          0x00
#define DIS_LN_297_364      0x04
#define DIS_LN_297_364_UNL  0x08

#define DIS_ST_0            0x70
#define DIS_ST_5_5          0x10
#define DIS_ST_10_5         0x60
#define DIS_ST_10_10        0x20
#define DIS_ST_20_10        0x30
#define DIS_ST_20_20        0x00
#define DIS_ST_40_20        0x50
#define DIS_ST_40_40        0x40

#define EXTEND_FIELD        0x80
#define DIS_DF_UM           0x02
#define DIS_ECM             0x04
#define DIS_DF_MMR          0x40

#define DIS_WD_FBI          0x01
#define DIS_WD_1216         0x02
#define DIS_WD_864          0x04

#define DIS_BF              0x10

/* T.30 DCS bit configuration assignments */
#define DCS_RECEIVE         0x02

#define DCS_BR_V27_2400     0x00
#define DCS_BR_V27_4800     0x08
#define DCS_BR_V29_7200     0x0C
#define DCS_BR_V29_9600     0x04
#define DCS_BR_V33_12000    0x18
#define DCS_BR_V33_14400    0x10
#define DCS_BR_V17_7200     0x2C
#define DCS_BR_V17_9600     0x24
#define DCS_BR_V17_12000    0x28
#define DCS_BR_V17_14400    0x20

#define DCS_VR              0x40
#define DCS_DF_MR           0x80

#define DCS_WD_1728         0x00
#define DCS_WD_2048         0x01
#define DCS_WD_2432         0x02

#define DCS_LN_297          0x00
#define DCS_LN_364          0x04
#define DCS_LN_UNL          0x08

#define DCS_ST_0            0x70
#define DCS_ST_5            0x10
#define DCS_ST_10           0x20
#define DCS_ST_20           0x00
#define DCS_ST_40           0x40

#define DCS_DF_UM           0x02
#define DCS_ECM             0x04
#define DCS_ECM_FS64        0x08
#define DCS_DF_MMR          0x40

#define DCS_WD_FBI          0x01
#define DCS_WD_1216         0x02
#define DCS_WD_864          0x04

#define DCS_BF              0x10

/* T.30 DIS DTC and DCS field manipulation constants */
#define TRANSMIT_MASK       0x01
#define RECEIVE_MASK        0x02
#define BR_MASK             0x3C
#define BR_FLUSH            2
#define VR_MASK             0x40
#define TWO_D_MASK          0x80
#define WD_MASK             0x03
#define LN_MASK             0x0C
#define LN_FLUSH            2
#define ST_MASK             0x70
#define ST_FLUSH            4
#define UNCOMPRESSED_MASK   0x02
#define ECM_MASK            0x04
#define ECM_64FS_MASK       0x08
#define T6_MASK             0x40
#define WD_FBI_MASK         0x01
#define WD_1216_MASK        0x02
#define WD_864_MASK         0x04
#define BF_MASK             0x10

/* class 2 T.30 parameter constants */
#define BR_2400             0
#define BR_4800             1
#define BR_7200             2
#define BR_9600             3
#define BR_12000            4
#define BR_14400            5
#define BR_V7200            6
#define BR_V9600            7
#define BR_V12000           8
#define BR_V14400           9

#define WD_1728             0
#define WD_2048             1
#define WD_2432             2
#define WD_1216             3
#define WD_864              4

#define LN_297              0
#define LN_364              1
#define LN_UNL              2

#define ST_0                0
#define ST_5_5              1
#define ST_10_5             2
#define ST_10_10            3
#define ST_20_10            4
#define ST_20_20            5
#define ST_40_20            6
#define ST_40_40            7

#define DF_MH               0
#define DF_MR               1
#define DF_UM               2
#define DF_MMR              3

/* Quality Checking constants */
#define ONE_D_DECODE        0   /* one dimensional decoding state */
#define TWO_D_DECODE        1   /* two dimensional decoding state */
#define TWO_D_MM_DECODE     2   /* 2-D horizontal, which is two 1-D runs */
#define UNCOMPRESSED_DECODE 3   /* uncompressed decoding state */

#define EOL_NOT_LOOKING     0   /* EOL processing not in progress */
#define EOL_ZEROS_GOOD      1   /* 11 zero's detected for a good line */
#define EOL_ZEROS_BAD       2   /* 11 zero's detected for a bad line */
#define EOL_NO_ZEROS_BAD    3   /* bad line detected, search for 11 zero's */

#define WHITE               0   /* white image run processing */
#define BLACK               1   /* black image run processing */

#define CODE_LENGTH_TABLE_SIZE  0x1000  /* code length table size */
#define RUN_LENGTH_TABLE_SIZE   0x2000  /* run length table size */

/* fax2 structure definitions */

#define CONTROL_PACKET_SIZE 100     /* control packet size (1 sec at V.21 ch2) */

/* RTC sequence is made up of 6 EOL's*/
/* eleven 0's and one 1 makes up an EOL */
#define RTC_BYTE1   0x00
#define RTC_BYTE2   0x08
#define RTC_BYTE3   0x80

typedef struct hdlc_buffer_struct
    {
        ubyte status;   /* used in receive mode to indicate error in reception */
        ubyte dummy;    /* unused byte embedded for alignment */
        uword count;    /* number of bytes in the packet */
        ubyte data[CONTROL_PACKET_SIZE];    /* array holding packet contants */
    } hdlc_buffer_type;

typedef struct T30_parms_struct
    {
        ubyte VR;       /* vertical resolution */
        ubyte BR;       /* bit rate */
        ubyte WD;       /* page width */
        ubyte LN;       /* page length */
        ubyte DF;       /* data format (encoding scheme) */
        ubyte EC;       /* error correction mode */
        ubyte BF;       /* binary file transfer */
        ubyte ST;       /* scan time */
    } T30_parms_type;

typedef struct T4_stats_struct
    {
        uword LC;       /* line count */
        uword BLC;      /* bad line count */
        uword CBLC;     /* maximum consecutive bad line count */
        uword LBC;      /* lost byte count */
    } T4_stats_type;

typedef struct message_reporting_struct
    {
        ubyte RPR;      /* receiver parameters reported */
        ubyte TPR;      /* transmitter parameters reported */
        ubyte IDR;      /* ID strings reported */
        ubyte NSR;      /* non-standared frames reported */
    } message_reporting_type;

