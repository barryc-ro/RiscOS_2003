/****************************************************************************
/
/   Copyright 1988,1989,1990,1991,1992,1993,1994. All Rights Reserved by:
/	    RSA
/	    7701 Six Forks Road
/	    Suite 120
/	    Raleigh, NC  27615
/	    (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.  The information contained herein is solely
/   for the use of RSA.
/
/       File:           ac00mem.h
/
/       Module Version: ACU 4.02
/
/       Function:	      This file contains external memory definitions for the
/                       ACU code.
/
/       Product:        ACU core code
/
/       History:        ac00mem.h v3.90
/			              ac00mem.h v3.91
/			              ac00mem.h v3.92
/			              ac00mem.h v3.94
/			              ac00mem.h v3.95
/			              ac00mem.h v3.96
/
/           Created:    10/7/91
/			              10/8/91
/			              12/04/91
/			              1/21/92
/			              3/6/92
/                       1/12/93
/
/           ---------------------------------------------------------
/           -                   Modifications			              -
/           ---------------------------------------------------------
/
/           Author & Date:  RSA/keh 7/1/94
/           Description:    Add the following variables for ETC AT commands:
/                               andF,andI,perB,astA,astB.
/           Reason:         Add ETC support to core ACU.
/
/           Author & Date: RSA 5/12/1994.
/           Description: Added new variables for +VDR and +VDT.
/           Reason: These commands are now handled by the acu.
/
/           Author & Date: RSA
/           Description:
/           Reason:
/
*****************************************************************************/
extern ubyte modem_status;		/* Status of the modem_task	*/
extern ubyte last_modem_status; 	/* Contains the value of the last status from the modem */

extern ubyte ESC_RXD;			/* Flags escape sequence */
extern ubyte dte_DTR_flag;		/* Indicates status of DTR pin */

extern ubyte modem_baud;		/* Value of the modem baud rate */
extern ubyte modem_mode;		/* Value of the modem connect mode */
extern ubyte dte_baud;			/* Value of the DTE baud rate */

/*MRM22696*/
extern ubyte N;


extern ubyte overspeed; 		/* Determines if overspeed is selected or not	*/
extern ubyte dte_init_baud;		/* Value of baud rate to inititlize the DTE with */
extern ubyte DTR_valid_up_flag; 	/* Set when DTR goes off. Reset by ACU when it is seen */
extern ubyte look_for_DTR_high_to_low;	/* Set to look for an on to off transition of DTR */
extern ubyte DTR_high_to_low;		/* Flags when transition occurred	*/
extern ubyte look_for_DTR_low_to_high;	/* Set to look for an off to on transition of DTR */
extern ubyte DTR_low_to_high;		/* Flags when transition occurred	*/
extern ubyte CTS_turn_on_flag;		/* Set to look for transition of CTS */
extern ubyte CTS_up_flag;		/* Flags state of CTS */
extern ubyte mr_on_flag;		/* Flag which denotes the state of the MR led	*/
extern ubyte acu_got_dte_break; 	/* Flags when a break is received from the terminal */


	/***** MNP variables *****/
extern ubyte slA;
extern uword mnp_stream_size;		/* MNP block size - \A */
extern ubyte stream_size_256;		/* Enabled block size of 256 - \A */
extern ubyte perA;
extern ubyte acu_autoreliable_char;	/* Auto-reliable fallback character - %A */
extern ubyte slC;
extern ubyte acu_autoreliable_flag;	/* Set auto-reliable buffer - \C */
extern ubyte break_length;		/* Length of break - \B*/
extern ubyte slG;
extern ubyte DCE_flowctrl;		/* Set modem to modem flow control - \G */
extern ubyte bps_adjust;		/* Denotes if serial port bps rate is adjusted to line rate - \J */
extern ubyte slK;
extern ubyte break_type;		/* Type of break processing - \K */
extern ubyte slL;
extern ubyte acu_mnp_service_type;	/* MNP is either in stream or block mode - \L */
extern ubyte mnp_service_level; 	/* Type of MNP service - \N */
extern ubyte speed_matching;		/* Enables speed matching - \N */
extern ubyte mnp_autorel_time;		/* Length of time to detect auto-reliable connection - \N */
extern ubyte slN;
extern ubyte operating_mode;		/* Type of operating mode used in connected state - \N */
extern ubyte slQ;
extern ubyte terminal_DTE_flowctrl;	/* Type of terminal to modem flow control - \Q */
extern ubyte modem_DTE_flowctrl;	/* Type of modem to terminal flow control - \Q */
extern ubyte slT;
extern uword inactivity_timer;		/* Length of the inactivity timer - \T */
extern ubyte slV;			/* Flags if modified result codes are sent to DTE - \V */
extern ubyte slX;			/* Set xon/xoff pass through - \X */
extern ubyte pass_flowctrl;		/* Parameter passed to v42 to set xon/xoff pass through - \X */
extern ubyte reconfigure;		/* Flag to reconfigure system */
extern ubyte selective_retrans; 	/* Indicates if selective retransmission option is enabled */
extern ubyte loopback_test;		/* Indicates if loop back test option is enabled */
extern ubyte v42_enable;		/* Indicates if loop back test option is enabled */
extern ubyte hyC;			/* data modem calling tone, -C0, 2/23/96 shujin */
extern ubyte hyJ;			/* Set detection enable/disable - -H */
extern ubyte detection_enable;		/* Indicates if the detection process is enabled */
extern ubyte mnp_preferred;		/* Indicates if mnp preferred option is enabled */
extern ubyte quH;			/* Set V42bis compression control - "H */
extern ubyte btlz_comp_control; 	/* Parameter passed to v42 to set V42 compression type */
extern ubyte quO;			/* Set V42bis compression string length - "O */
extern ubyte btlz_string_len;		/* Parameter passed to v42,btlz compression string length */
extern uword  btlz_dict_size;		 /* Parameter passed to v42, btlz compression dictionary size */

extern ubyte terminal_DTE_xoff_char;	/* Value of the XOFF character from terminal to modem */
extern ubyte terminal_DTE_xon_char;	/* Value of the XON character from terminal to modem */
extern ubyte modem_DTE_xoff_char;	/* Value of the XOFF character from modem to terminal */
extern ubyte modem_DTE_xon_char;	/* Value of the XON character from modem to terminal */
extern ubyte retry_limit;		/* Number of times to retransmit something - \O */
extern ubyte acu_mnp_service_class;
extern ubyte mnp_optimization;
extern ubyte perC;
extern ubyte mnp_compression;

/*	AT Command variables	*/

extern const ubyte factory_defaults[DEFAULT_SIZE]; /* Table of values for factory defaults */
extern const ubyte version_num[VERSION_SIZE];
extern ubyte * const variable_addr[NUM_OF_VARIABLES];

extern const ubyte s_range[NUM_S_REGS][NUM_RANGES]; /* Table of ranges for the S registers  */
extern ubyte current_register;		/* Current index of the array of registers - Sn */

extern ubyte RLSD_reflects_CD_temp;	/* temporary variable */
extern ubyte v32_retrain;		/* Carrier detection method for V.32	*/
extern ubyte receive_threshold; 	/* Receive threshold passed to modem_set_parameters	   */

extern ubyte DSR_only_at_handshaking;	/* Type of DSR control while connected	*/
extern ubyte dial_pause_time;		/* Time used for the pause (,) dial modifier	*/
extern ubyte comm_mode; 		/* Type of communication mode selected	*/

extern struct atB_struct atB;		/* Value of ATB command */

extern ubyte mnp_advanced_commands;
extern ubyte automode,autofallback;
extern ubyte valueX,slD,slI,perE,slO,slU,slY,slZ,atW;

	/***** FLAGS *****/
extern ubyte error_occurred;		/* Indicates if error occured during command execution */
extern ubyte error_flag;		/* Indicates if error occured during dialing */
extern ubyte valid_char;		/* Indicates if a character in the command buffer is valid or not */
extern ubyte send_ok;			/* Indicates if OK result code should be sent to DTE */
extern ubyte on_line_command;		/* Indicates if ACU is in on line command mode */
extern ubyte busy_detect;		/* Flags if busy is detected during originate */
extern ubyte hook;			/* Flags if modem is on hook or not */
extern ubyte DTR_always_on;		/* DTR line is ignored and always assumed to be high */
extern ubyte RTS_always_on;		/* DTR line is ignored and always assumed to be high */

extern ubyte timer_activated;		/* Flags if timer is used to terminate test */

extern ubyte self_test_error_count;	/* Number of errors received during self test */

extern ubyte test_in_progress;		/* Flags if test is in progress */

extern ubyte cmd_line[CMD_LINE_SIZE];	/* Buffer for the entered commands */
extern ubyte pt[PT_SIZE];
extern ubyte temp_array[DEFAULT_SIZE];	/* Array used in reading and writing eeprom	*/

/* start change 2/7/95 keh => Add new parser */
extern ubyte *acu_dial_string_ptr;     /* Points to the current dial string */
/* end change 2/7/95 keh => Add new parser */
extern ubyte *cmd_ptr;			/* Pointer used to add and delete characters in command line buffer */
extern ubyte idle_char; 		/* Character received in IDLE state, needs to be an A or a to change states */
extern ubyte R_mode;			/* Flags if the R modifier is encountered */
extern ubyte return_to_idle;		/* Flags if the ; modifier is encountered */
extern ubyte result_message_sent;	/* Flags if a result message is sent to the DTE */
extern ubyte bypass_break;		/* Tells the DTE if it can send the break or not, \K command */
extern ubyte long_space_disconnect;	/* Tells if ACU should disconnect because of long space disconnect detection */
extern ubyte trellis;			/* Tells if V.32 trellis coding is enabled or disabled */

extern struct ACU_state st_idle, st_parse, st_orig, st_answ, st_online,
			st_hangup, st_test, st_retrain;

extern void (*acu_proc)(void);		/* Pointer to the routine to be performed */

extern ubyte acu_state; 		/* State of the ACU control code	*/
extern ubyte previous_acu_state;	/* Stores ACU_STATE during self-test */
extern ubyte previous_idle_type;	/* Stores st_idle.type during self-test */

extern struct ACU_event event_buffer[NUMBER_OF_EVENT_BUFFERS];
extern struct ACU_event *acu_event;	/* Pointer to event structure	*/
extern struct ACU_que event_que;

extern uword acu_10msec_timer;		/* ACU background 10 msec timer tick	*/
extern uword acu_100msec_timer; 	/* ACU background 100 msec timer tick	*/
extern uword acu_1sec_timer;		/* ACU background 1 sec timer tick	*/
extern uword acu_1min_timer;		/* ACU background 1 min timer tick	*/
extern uword timer1;			/* ACU Program timer */
extern uword timer2;			/* ACU Program timer */
extern uword timer3;			/* Modem Program timer */
extern uword timer5;			/* Modem Program timer */
extern ubyte timer100mS;		/* ACU interrupt 100 msec timer tick	  */
extern ubyte timer1sec; 		/* ACU interrupt 1 sec timer tick      */
extern ubyte timer1min; 		/* ACU interrupt 1 min timer tick      */
extern ubyte dtr_timer1sec;		/* DTR one second timer*/
extern ubyte dtr_timer; 		/* DTR 10ms timer */
extern ubyte cts_timer; 		/* CTS 10ms timer */
extern ubyte dial_timer;		/* Pulse and tone dialing 1ms timer */

extern uword delay_to_exec;		/* Delay from <CR> until command execution */
extern uword dialtone_wait_limit;	/* Length of time to wait for dialtone */
extern uword length_of_dialtone;	/* Length of dialtone needed to be detected */
extern uword inter_digit_delay; 	/* Delay between pulsed characters	*/
extern uword flash_time;		/* Length of on hook and off hook periods */
extern uword mod_dialtone_length;	/* Length of dialtone to detect in dial modifier W */
extern uword mod_quiet_answ_length;	/* Length of quiet answer to detect in dial modifier @ */
extern uword answ_tone_delay;		/* Delay before sending answer tone */
extern uword time_between_rings;	/* Max time allowed between rings */
extern ubyte long_space_send_time;	/* Length of the break for long space disconnect	*/
extern uword RDL_response_time; 	/* Time ACU will wait for a RDL response from the remote modem	*/
extern uword ALB_response_time; 	/* Time ACU will wait for carrier to be present during ALB tests*/

extern ubyte make_time; 		/* pulse time */
extern ubyte break_time;		/* interpulse time */

extern ubyte look_for_signal;		/* flag used in quiet_answer and wait_for_dial_tone*/
extern ubyte line_signal_seen;          /* Indicates if line energy has been detected on the line */
extern ubyte modifier_type;		/* Type of dial modifier for process_modifier() */

/*	System Interface	*/
extern ubyte last_async_sync;		/* Last status returned by system_info*/
extern ubyte system_status;		/* Status returned by system_bg*/
extern ubyte last_status;		/* Last status returned by system_bg*/
extern ubyte acu_parity;		/* Used to initialize DTE and LINE  */
extern ubyte char_size; 		/* Size of data character passed to modem	*/
extern ubyte acu_data_bits;		/* Number of data bits for acu*/
extern ubyte acu_stop_bits;		/* Number of stop bits */
extern ubyte at_parity; 		/* Parity determined by AT */
extern ubyte at_char_size;		/* Character size passed to modem task	*/
extern ubyte at_data_bits;		/* Number of data bits determined by AT */
extern ubyte at_stop_bits;		/* Number of stop bits determined by AT*/

extern ubyte switch_to_leased_line;
extern ubyte user_initiated_hangup;	/* Flags if ATH was entered or hang up due to DTR dropping */
extern ubyte delay_before_hangup;       /* Waiting for the protocol to disconnect */
extern ubyte at_h_command;		/* Flags if hang up due to ATH */
extern ubyte at_z_command;		/* Flags if hang up due to ATZ */

extern ubyte acu_loop;			/* Flag for control loop */

/* Table of result codes	*/
extern byte * const out_put[OUTPUT_TABLE_SIZE][OUTPUT_TABLE_NUM_COL];

extern ubyte hangup_result_type;	/* Type of result code passed to hang_up(); */
					/* enabled so the state can be set appropiately */
extern ubyte detect_disconnect_tone;	/* Flags if 400hz tone detection is enabled or disabled */
extern ubyte tone_disconnect;		/* Indicates modem hung up due to 400hz tone	*/

/* Calling Tone variable */
extern ubyte calling_tone;		/* Used to enable or disable V25 calling tone */

/*extern ubyte out_put_col;	*/	/* Used to select the language to be used of result codes      */

extern ubyte self_test_char_rx; 	/* Flags if characters were receivecd during self test */

extern struct configure acu_cfg;
extern ubyte connect_type;		/* Parameter passed to modem_connect indicating
					   the type of connection to attempt	*/
extern ubyte fax_class; 		/* Class of Fax selected	*/

extern ubyte fax_adaptive_answer;       /* Value of +FAA command        */
extern ubyte fax_port_rate;             /* fixed dte port rate while fax_class == 2.0 */
extern ubyte fax_packet_protocol;       /* packet protocol enabled/disabled via +FPP */
extern ubyte fax_connected;             /* Indicates an active fax connection */
extern ubyte fax_command_hangup;        /* Indicates fax hangup with an ATH/ATZ command */
extern ubyte terminate_packet_protocol; /* turn off packet protocol at end of response*/
extern ubyte dont_echo;                 /* Prevent echoing of AT commands */
extern ubyte alt_fax_flow_control; 	/* Flow control type for a fax connection set by \Q and &K	*/
extern ubyte dont_autobaud; 	        /* Prevents autobaud from being turned on during */
extern ubyte new_dte_baud;              /* Temporary variable for the dte baud rate */
extern ubyte fax_flow_control;		/* Flow control type for a fax connection	*/

extern ubyte v32bis_enable;		/* Reflects the offline value of s110	*/
extern ubyte andK;			/* value of &K	*/
extern ubyte acu_32bit_crc_enab;       /* Enables/disables V.42 32-bit CRC     */
extern ubyte acu_mnp10_enab;		/* Indicates if MNP 10 operation is selected	*/
extern ubyte acu_cellular_enab; 	/* Indicates if MNP 10 cellular operation is selected	*/
extern ubyte acu_fallforward_enab;	/* Indicates if MNP 10 fallforward operation is selected   */
extern ubyte acu_fallback_enab; 	/* Indicates if MNP 10 fallback operation is selected	*/
extern uword acu_wait_for_cd_time;	/* Value of s7 in 10 msecs	*/
extern uword acu_cd_recov_time; 	/* Value of s9 in 10 msecs	*/
extern uword acu_cd_loss_time;		/* Value of s10 in 10 msecs	 */
extern uword acu_mnp10_rates;		/* Indicates MNP 10 possible line rates */
extern ubyte v42_running_mnp10; 	/* Indicates if MNP 10 is currently running	*/
extern ubyte prnM;			/* Indicates value of the )M command	*/
extern ubyte hyK;			/* Indicates value of the -K command	*/
extern ubyte hyQ;			/* Indicates value of the -Q command	*/
extern ubyte link_negot;		/* Indicates the initial connect speed *H command	*/
extern ubyte dial_J;			/* Indicates value of the J dial modifier      */
extern ubyte dial_K;			/* Indicates value of the K dial modifier	*/
extern ubyte quM;                       /* Indicates value of the "M command */

/* start change keh 8/14/95 => del BE vars */
extern ubyte escape_mode;
#if 0
/****** BREAK ESC VARIABLES *******/
extern ubyte perO;
extern ubyte escape_mode;
extern ubyte ties_esc_on_board;
extern ubyte acu_escape_timer;
extern ubyte first_esc_break_rcvd;
extern uword acu_buffer_counter;
extern ubyte acu_escape_timer;

extern const struct stateTab_struct st_parse_break[EVT_MAX+1];
extern const struct stateTab_struct st_idle_break[EVT_MAX+1];

extern ubyte break_escape_goto_idle;
extern ubyte break_escape_return_online;
#endif
/* end change keh 8/14/95 => del BE vars */
/**********************************/

extern ubyte voice_port_rate;           /* Value of the forced baud rate by the voice commands */

/* JAY - TIA Conversion Start 12/1/1993 */
extern ubyte voice_inactivity_timer_on;
/* JAY - TIA Conversion End 12/1/1993 */

/* Start Change 5/12/1994. */
extern ubyte voice_dist_ring_active;
extern ubyte voice_dist_ring_time;
extern ubyte voice_dist_ring_intvl;
/* start change keh 4/27/95 => only one ring timer required */
/* extern ubyte voice_ring_on_timer; */
/* extern ubyte voice_ring_off_timer; */
extern ubyte voice_ring_timer;
/* end change keh 4/27/95 => only one ring timer required */
extern ubyte voice_dist_ring_sent;
extern ubyte voice_ring_rpt_timer;
extern ubyte voice_ctl_tone_on;
extern ubyte voice_ctl_tone_off;
extern ubyte voice_dist_ctl_active;
extern ubyte voice_dist_ctl_intvl;
extern ubyte voice_dist_ctl_sent;
/* End Change 5/12/1994. */

extern ubyte voice_caller_id;           /* Value of the caller ID command */
extern ubyte hook_control;              /* Indicates the operation to be performed when
                                          the selected connection fails */
extern ubyte voice_cmd_set;             /* Type of voice command set selected */
extern ubyte *message_ptr;              /* Pointer used to return information to the terminal
                                           from another module */

/* Start Change 7/7/1994. */
extern ubyte voice_flow_control;
/* End Change 7/7/1994. */

extern ubyte s[NUM_S_REGS];
extern struct SREG14 sr14,*sr14_ptr;
extern struct SREG16 sr16,*sr16_ptr;
extern struct SREG21 sr21,*sr21_ptr;
extern struct SREG22 sr22,*sr22_ptr;
extern struct SREG23 sr23,*sr23_ptr;
extern struct SREG27 sr27,*sr27_ptr;
extern struct SREG95 sr95,*sr95_ptr;
/* start change keh 8/14/95 => add v.34 sregs */
extern struct SREG114 sr114,*sr114_ptr;
extern struct SREG116 sr116,*sr116_ptr;
/* end change keh 8/14/95 => add v.34 sregs */
extern ubyte * const srptr[NUM_S_REGS];

extern const ubyte * const current_profile[ANDV_CURRENT_PRO_SIZE];
extern ubyte * const current_pro_addr[ANDV_CURRENT_ADD_SIZE];
extern const ubyte * const stored_profile[ANDV_STORED_PRO_SIZE];
extern ubyte * const stored_pro_addr[ANDV_STORED_ADD_SIZE];
extern const ubyte * const cr_lf_string[2];

extern const struct stateTab_struct st_idle_at[EVT_MAX+1];
extern const struct stateTab_struct st_idle_online[EVT_MAX+1];
extern const struct stateTab_struct st_idle_test[EVT_MAX+1];
extern const struct stateTab_struct st_parse_at[EVT_MAX+1];
extern const struct stateTab_struct st_parse_online[EVT_MAX+1];
extern const struct stateTab_struct st_parse_test[EVT_MAX+1];
extern const struct stateTab_struct st_orig_at[EVT_MAX+1];
extern const struct stateTab_struct st_answ_at[EVT_MAX+1];
extern const struct stateTab_struct st_online_at[EVT_MAX+1];
extern const struct stateTab_struct st_hangup_at[EVT_MAX+1];
extern const struct stateTab_struct st_test_at[EVT_MAX+1];
extern const struct stateTab_struct st_test_rmt_at[EVT_MAX+1];

extern ubyte escape_received;
/* start change keh >> redo VNH */
#if 0 /* orig code */
/* JAY - TIA Conversion Start 11/29/1993 */
extern ubyte voice_VNH_active;
extern uword voice_VNH_upper_word;
/* JAY - TIA Conversion End 11/29/1993 */
#endif
extern ubyte acu_cntrld_hangup;          /* If the hangup is controled by another module */
extern ubyte acu_hangup_line;            /* go on hook, or not during hangup phase */
/* end change keh >> redo VNH */

/* start change 7/1/94 keh => add ETC AT command vars */
extern ubyte astA,astB,andF,andI,perB;
/* end change 7/1/94 keh => add ETC AT command vars */

/* start change 1/16/94 keh => no stalled loops for OS support */
extern ubyte number_of_pulses;        /* Pulse count for Pulse dialing */
extern ubyte dial_flag;               /* Pulse/Tone dialing misc. flag */
extern ubyte test_hangup_msg;
/* end change 1/16/94 keh => no stalled loops for OS support */

/* start change keh 4/18/95 => add 2nd command line for TEMIC */
extern ubyte *acu_external_cmd_ptr;
/* end change keh 4/18/95 => add 2nd command line for TEMIC */

/* start change drc 7/20/95 => add buffer for EE commands for TEMIC */
extern ubyte ee_array[48];           /* data area for EEPROM commands */
/* end change drc 7/20/95 => add buffer for EE commands for TEMIC */

