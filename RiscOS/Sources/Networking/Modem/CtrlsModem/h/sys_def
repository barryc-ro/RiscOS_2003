/****************************************************************************
/
/   Copyright 1997. All Rights Reserved by:
/   Cirrus Logic, Inc.
/
*****************************************************************************/

#if !defined(_SYS_DEF_)

    #define _SYS_DEF_

    #define PROCESSOR_Z180           0
    #define PROCESSOR_ARM7           1
    #define COMPILER_ARCH            0

    #define COMPILER_MICROTEC        0
    #define COMPILER_MSC             0
    #define COMPILER_MIPS            0
    #define COMPILER_IAR             0
    #define COMPILER_ARM7            1

    #define EI
    #define DI
     #define MUSKET

    #define PACKED __packed
    #define MAIN main

    /* AT-V command response */
    #define VERSION_MSG   "Modem Firmware Version 2.00"

    /*   Defines for ACU_CFG structure   */

    #define CONFIG_DIRECT            2    /* 0 - No direct mode         */
                                                          /* 1 - Hardware Direct mode   */
                                                          /* 2 - Pseudo direct mode     */
    #define CONFIG_ECHO              0    /* 0 - Software echo          */
                                                          /* 1 - Hardware echo          */
#define MODEM_X2_MODE                        1
/* used in conjunction with MODEM_X2_MODE for now until code is  */
/* completely separated */
#define MODEM_V90_MODE                        0  

#if MODEM_X2_MODE == 1
     #define CONFIG_MODE                       5
#else
    #define CONFIG_MODE              3        /* 0 - V.22bis modem          */
                                                          /* 1 - V.32 modem             */
                                                         /* 2 - V.32bis modem          */
                                          /* 3 - V.34 modem                */
                                                        /* 4 - V56K modem        ?????        */
#endif
   
   #define CUTLASS_J5  1
   #define CUTLASS_C6  0

   /* Define all product FCLASS features indivually */
   #define FCLASS_1            1
   #define FCLASS_2            0
   #define FCLASS_20           0
   #define FCLASS_8            1
   #define FCLASS_80           0


   #define PROD_OPTS   (FCLASS_1|(FCLASS_2<<1)|(FCLASS_20<<2)| \
                       (FCLASS_8<<3)|(FCLASS_80<<4))

   #define CONFIG_FAX_CLASS    PROD_OPTS   /* Bit 0 - Class 1      */
                                           /* Bit 1 - Class 2      */
                                           /* Bit 2 - Class 2.0    */
                                           /* Bit 3 - Class 8      */
                                           /* Bit 4 - Class 80     */


    #define CONFIG_V23               1    /* 0 - No V.23 support        */
                                                          /* 1 - V.23 support           */
    #define CONFIG_MNP10             0    /* 0 - MNP 10 not included    */
                                                          /* 1 - MNP 10 included        */

    #define CONFIG_EXT_CMDS          1
                                                         /* 0 - /O,/U,/Y,and/Z return ERROR */
                                                          /* 1 - /O,/U,/Y,and/Z are executed */

    #define TIES_HAYES_ESCAPE       1               /* ciy021596  0 - Hayes escape sequence */
                                                    /* ciy021596  1 - TIES escape sequence  */

    #define STATIC
    #define FALSE  0
    #define TRUE   1

    #ifndef NULL
     #define NULL   0
    #endif

    /* V.42bis dictionary size */
    #if PROCESSOR_Z180 == 1 || PROCESSOR_ARM7 == 1
     #define DSIZE   1024

     /* Max bounds for dictionary size */
     #define MAX_P1_ONE_DIR 2048
     #define MAX_P1_TWO_DIR 1024
    #else
     #define DSIZE   2048

     /* Max bounds for dictionary size */
     #define MAX_P1_ONE_DIR 4096
     #define MAX_P1_TWO_DIR 2048
    #endif

   /* Most of the following really shouldn't be in here as they are H/W
       specific and are localized to the low level. TBD */

   /*CP->DSP H/W defines*/
   #define  COM_RAM                   0x90000  /*COM_RAM ADD. IN ARM 610 MOD*/
   #define  CP_DSP_CMD_START          0x40     /*BEG. ADD. FOR CP->DSP COMMANDS*/
   #define  DSP_CP_CMD_START          0x00     /*BEG. ADD. FOR DSP->CP COMMANDS*/

   /*This val should be changed to 1 for MUSKET*/

   #define  WORD_OR_BYTE_ADD_INC      1        /* = 4 Word incr. H/W dep.*/
                                                               /* = 1 Byte incr. H/W dep.*/

   #define  CP_DSP_INT                0x0FE   /*WRITE A DUMMY VAL. TO NOTIFY
                                                                THE DSP OF NEW CONFIG.
                                                                */

    #if COMPILER_ARCH == 1
     typedef unsigned char ubyte;
     typedef char byte;
     typedef unsigned int uword;
     typedef int word;
     typedef unsigned long ulong;

    #elif COMPILER_MICROTEC == 1 || COMPILER_MIPS == 1 || COMPILER_MSC == 1 || COMPILER_IAR == 1 || COMPILER_ARM7 == 1
     typedef unsigned char ubyte;
     typedef char byte;
     typedef unsigned short uword;
     typedef short word;
     typedef unsigned long ulong;
    #endif

    #if COMPILER_MIPS == 1
     #define const
    #endif

    #if PROCESSOR_Z180 == 1
     extern void mmu_open_lapm_page(void);
     extern void mmu_open_mnp_page(void);
     extern void mmu_open_io_mnp_page(void);
     extern void mmu_open_io_lapm_page(void);
     extern void mmu_force_lapm_page(void);
     extern void mmu_force_mnp_page(void);
     extern void mmu_open_fax_page(void);
     extern void mmu_open_faxp_page(void);
     extern void mmu_open_faxq_page(void);
     extern void mmu_open_faxecm_page(void);
     extern void mmu_open_fax_ECM_bm0_page(void);
     extern void mmu_open_fax_ECM_bm1_page(void);
     extern void mmu_open_fax_ECM_bm2_page(void);
     extern void mmu_open_fax_ECM_bm3_page(void);

     extern void mmu_open_acu_page(void);
     extern void mmu_open_v42_page(void);
     extern void mmu_force_acu_page(void);
     extern void mmu_force_parse_page(void);
     extern void mmu_force_v42_page(void);
     extern void mmu_restore_stored_page(void);
     extern void mmu_page_init(void);
     extern void mmu_open_modem_task_page(void);
     extern void mmu_open_autosync_page(void);
     extern void mmu_open_btlz_window(void);
     extern void mmu_close_btlz_window(void);
     extern void mmu_open_mnp10_page(void);
     extern void mmu_open_cl5_window(void);
     extern void mmu_close_cl5_window(void);
     extern void mmu_open_voice_page(void);

     #define mmu_open_lapm_pg   mmu_open_lapm_page();
     #define mmu_open_mnp_pg    mmu_open_mnp_page();
     #define mmu_open_io_mnp_pg   mmu_open_io_mnp_page();
     #define mmu_open_io_lapm_pg   mmu_open_io_lapm_page();
     #define mmu_force_lapm_pg   mmu_force_lapm_page();
     #define mmu_force_mnp_pg   mmu_force_mnp_page();
     #define mmu_open_fax_pg    mmu_open_fax_page();
     #define mmu_open_faxp_pg    mmu_open_faxp_page();
     #define mmu_open_faxq_pg    mmu_open_faxq_page();
     #define mmu_open_faxecm_pg      mmu_open_faxecm_page();
     #define mmu_open_fax_ECM_bm0_pg mmu_open_fax_ECM_bm0_page();
     #define mmu_open_fax_ECM_bm1_pg mmu_open_fax_ECM_bm1_page();
     #define mmu_open_fax_ECM_bm2_pg mmu_open_fax_ECM_bm2_page();
     #define mmu_open_fax_ECM_bm3_pg mmu_open_fax_ECM_bm3_page();
     #define mmu_open_acu_pg    mmu_open_acu_page();
     #define mmu_open_v42_pg    mmu_open_v42_page();
     #define mmu_force_acu_pg   mmu_force_acu_page();
     #define mmu_force_parse_pg   mmu_force_parse_page();
     #define mmu_force_v42_pg   mmu_force_v42_page();
     #define mmu_restore_stored_pg   mmu_restore_stored_page();
     #define mmu_pg_init      mmu_page_init();
     #define mmu_open_modem_task_pg   mmu_open_modem_task_page();
     #define mmu_open_btlz_win        mmu_open_btlz_window();
     #define mmu_close_btlz_win        mmu_close_btlz_window();
     #define mmu_open_mnp10_pg    mmu_open_mnp10_page();
     #define mmu_open_cl5_win        mmu_open_cl5_window();
     #define mmu_close_cl5_win        mmu_close_cl5_window();
     #define mmu_open_voice_pg       mmu_open_voice_page();
     #define mmu_open_autosync_pg  mmu_open_autosync_page();

    #else
     #define mmu_open_lapm_pg
     #define mmu_open_mnp_pg
     #define mmu_open_io_mnp_pg
     #define mmu_open_io_lapm_pg
     #define mmu_force_lapm_pg
     #define mmu_force_mnp_pg
     #define mmu_open_fax_pg
     #define mmu_open_faxp_pg
     #define mmu_open_faxq_pg
     #define mmu_open_faxecm_pg
     #define mmu_open_fax_ECM_bm0_pg
     #define mmu_open_fax_ECM_bm1_pg
     #define mmu_open_fax_ECM_bm2_pg
     #define mmu_open_fax_ECM_bm3_pg
     #define mmu_open_acu_pg
     #define mmu_open_v42_pg
     #define mmu_force_acu_pg
     #define mmu_force_parse_pg
     #define mmu_force_v42_pg
     #define mmu_restore_stored_pg
     #define mmu_pg_init
     #define mmu_open_modem_task_pg
     #define mmu_open_btlz_win
     #define mmu_close_btlz_win
     #define mmu_open_mnp10_pg
     #define mmu_open_cl5_win
     #define mmu_close_cl5_win
     #define mmu_open_voice_pg
     #define mmu_open_autosync_pg
     #define mmu_open_vparse_pg
   #endif

   /***  ACU I/O routines redirected to unified DTE I/O routines  ***/
   #define acu_from_char(void) dte_from_char(void)
   #define acu_from_clear(void) dte_from_clear(void)
   #define acu_to_clear(void) dte_to_clear(void)

   #define acu_to_num(void) dte_to_num(void)
   #define acu_to_char(ubyte) dte_to_char(ubyte)

   /***  FAX I/O routines redirected to unified DTE I/O routines  ***/
   #define fax_dte_from_num(void) dte_from_num(void)
   #define fax_dte_from_char(void) dte_from_char(void)
   #define fax_dte_to_char(ubyte) dte_to_char(ubyte)
   #define fax_dte_to_num(void) dte_to_num(void)
   #define fax_dte_to_free(void) dte_to_free(void)
   #define fax_dte_packet_protocol(ubyte) pp_control(ubyte)

   /**  VOICE I/O routines redirected to unified DTE I/O routines  **/
   #define voice_dte_from_num(void) dte_from_num(void)
   #define voice_dte_from_char(void) dte_from_char(void)
   #define voice_dte_from_clear(void) dte_from_clear(void)
   #define voice_dte_to_num(void) dte_to_num(void)
   #define voice_dte_to_free(void) dte_to_free(void)
   #define voice_dte_to_char(ubyte) dte_to_char(ubyte)
   #define CTSoff(void) dte_cts_off(void)
   #define CTSon(void) dte_cts_on(void)
   #define dp_vce_disable_interrupts(void) disable_int(void)
   #define dp_vce_enable_interrupts(void) enable_int(void)
   #define dp_vce_dte_DTR_status(void) get_dte_DTR_status(void)

   /***  FAX I/O routines redirected to unified DTE I/O routines  ***/
   #define vcv_dte_from_num() dte_from_num()
   #define vcv_dte_from_char() dte_from_char()
   #define vcv_dte_to_char(ubyte) dte_to_char(ubyte)
   #define vcv_dte_to_num() dte_to_num()
   #define vcv_dte_to_free() dte_to_free()

#define  modem_task  mt_bg
#define modem_timer mt_timer
#define modem_init mt_init
#define modem_watchdog reset_watchdog
#define modem_enable_interrupts enable_int
#define modem_disable_interrupts disable_int
#define modem_rdl_enable  rdl_enable
#define modem_send_rdl_request send_rdl_request
#define modem_send_rdl_release send_rdl_release
#define modem_call_progress  call_progress
#define modem_init_call_progress init_call_progress
#define modem_tone_on tone_on
#define modem_reset mt_reset
#define modem_speaker_vol set_volume
#define modem_speaker  set_speaker
#define modem_serial_direct config_serial_direct
#define modem_get_baud_rate get_receiver_speed
#define modem_get_mode get_receiver_mode
#define  modem_drop mt_drop
#define modem_guard_tone set_guard_tone
#define modem_retrain mt_retrain
#define modem_renegotiate mt_renegotiate
#define modem_set_rate_seq  mt_set_rate_seq
#define modem_digital_loopback set_digital_loopback
#define modem_ram_init ram_init
#define modem_rom_checksum  calc_rom_checksum
#define modem_rom_test rom_test
#define modem_check_CD check_CD
#define modem_received_RDL check_received_RDL
#define modem_check_dsr handshake_started
#define modem_hs_led set_hs_led
#define modem_cd_led set_cd_led
#define modem_mr_led set_mr_led
#define modem_ri_led set_ri_led
#define modem_oh_led set_oh_led
#define modem_dc_led set_dc_led
#define modem_v32_led set_v32_led
#define modem_aa_led set_aa_led
#define modem_fax_led set_fax_led
#define  modem_ec_led set_ec_led
#define  modem_tr_led set_tr_led
#define modem_v23_led set_v23_led
#define modem_v21_led set_v21_led
#define modem_v22_led set_v22_led
#define modem_v22bis_led set_v22bis_led
#define modem_cts_led set_cts_led
#define modem_b2l_led set_b2l_led
#define modem_AA1_relay set_AA1_relay
#define modem_dte_cts set_dte_cts
#define modem_dp_RTS set_dp_RTS
#define modem_dp_CTS_status get_cts
#define modem_start_selftest dp_start_selftest
#define modem_stop_selftest dp_stop_selftest
#define modem_dte_DTR_status get_dte_DTR_status
#define modem_dte_dsr set_dte_dsr
#define modem_dte_ri  set_dte_ri
#define modem_dte_rlsd set_dte_rlsd
#define modem_dte_RTS_status  get_dte_RTS_status
#define modem_dte_CTS_status  get_dte_CTS_status
#define modem_terminate_link mt_terminate_link
#define modem_fax_capability  mt_fax_capability
#define  modem_return_to_idle mt_return_to_idle
#define modem_connect mt_connect
#define modem_fax_configure mt_fax_configure
#define modem_alb alb
#define modem_retrain_enable set_retrain_enable
#define  modem_set_parameters set_cd_parameters
#define modem_config_dtmf_dial config_dtmf_dial
#define modem_char config_char
#define modem_product_code  product_code
#define modem_rom_components rom_components
#define modem_capability_descript  capability_descript
#define modem_v8_configure mt_v8_configure
#define modem_v34_configure mt_v34_configure

#define modem_hook_relay   set_hook_relay
#define modem_td_relay     set_td_relay
#define modem_shrt_relay              set_shrt_relay

#endif

/* Indicates if we will include tracing/dlm */
void PrintMsg(char *);
void PrintOutChars(char *);
void outchar(unsigned char);
void outhex(unsigned char);
void outhex_cr_lf( unsigned char data );

#if 0
#define DEBUG_PORT   1
#define PRINT_TIMER  0  /* change to 1 to enable timer printout */
void TraceInit(void);
void InitDebugPort(void);
#define BUILD_DLM   1
#endif

#if 0
#define LOOP_BACK_BUILD    1
#endif

/* for toggling relay */
#define ACTIVATE        0
#define DEACTIVATE      1


#define CUSTOMER35      FALSE
#define INTERNATIONAL_CODE   1   // 1 for homoligation, 0 for US.
