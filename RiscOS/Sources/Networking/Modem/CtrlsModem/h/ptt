/****************************************************************************
/
/   Copyright 1988,1989,1990,1991,1992,1993. All Rights Reserved by:
/       Cirrus Logic, Inc.
/       3100 West Warren Avenue
/       Fremont, CA 94538
/       (510) 623-8300
/
/
/   This document contains material confidential to Cirrus Logic its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by Cirrus Logic.  The information contained herein is solely
/   for the use of RSA.
/
/   File: ptt00def.h
/
/   Module Version:
/
/   Function:
/
/   Product:
/
/   History:
/
/   Created:
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: Cirrus Logic
/   Description:
/   Reason:
/
****************************************************************************/

#define WINDOWS FALSE
#if WINDOWS == TRUE
#define uword	unsigned short int
#define ubyte  unsigned char
#endif

/* -----------------5/3/96 2:01PM--------------------
 * Country Information
 * --------------------------------------------------*/
#define NUM_OF_COUNTRIES_SUPPORTED      7
#define MAX_COUNTRY_CODE		  		6
#define  Default_Country  4    /* if FF then the country code is in the NVRAM */
                               /*  0 for USA            */
                               /*  1 for Japan          */
                               /*  2 for United Kingdom */
                               /*  3 for Germany        */
                               /*  4 for France         */
                               /*  5 for Netherland     */
                               /*  6 for Generic_Country    */

/*  Black List Constant */
#define BLACKLIST_MAX_CELL_NUM  12     /* maximum number of cells */
#define BLACKLIST_MAX_CELL_SIZE 30     /* maximum number of digits per cell */
#define RedListNo               1
#define BlackListNo             2
#define DelayedCall             3

#define RINGBACKSTRING     "RING BACK "
/*  Tone Mode Detection Constant */
#define ToneModeIdle  0
#define ToneModeStart 1

#ifndef __riscos
#define PBA     			0xFFC000			/* Musket Peripheral Base Address*/
#define GPCR1    			(PBA + 0x214)  /* GPIO Configuration Register */
#define GPR1    			(PBA + 0x208)  /* GPIO Register */
#endif
#define PULSE_DIAL_MASK  0x0020
#define PULSE_DIAL_MAKE  0x0000
#define PULSE_DIAL_BREAK 0x0002
#define NoOfTonesPerCountry 6
/* -----------------5/3/96 2:01PM--------------------
 * Structure Definition
 * --------------------------------------------------*/

typedef struct {
   ubyte RetryTimes;		/* Retry times used to address the delay time*/
   ubyte status;			/* Black List or Red List*/
	uword DelayTimer;		/* Retry Delay Timer fetch from the ptt's table*/
   uword RedListTimer;
   ubyte PhoneCell[30];	/* Telephone Numer grab from dial string*/
	} BlackList;


typedef struct {
	ubyte status;
	ubyte tonetype; /* Tone type 1: continuous signal; 2: Segmented signal*/
	uword ontime;
	uword offtime;
	uword ontimemax;
	uword ontimemin;
	uword offtimemax;
	uword offtimemin;
	ubyte tonecode;
	} ToneModeEntry;


struct PTT_tone_table {
	ubyte tonetype;
	ubyte dummy1; 		/* alignment purpose */
	uword ontimemax;
	uword ontimemin;
	uword offtimemax;
	uword offtimemin;
	ubyte tonecode;
	ubyte dummy2; 		/* alignment purpose */
	};


typedef const struct {
	ubyte MaxRetry;
	ubyte MaxPhoneCell; 	/* How many telephone number can the black List stored */
	uword CycleTime;		/* Second */
	ubyte DelayTimer[12];/* Second */
	} country_black_list_table;


typedef const struct {
	struct PTT_tone_table _tonex[NoOfTonesPerCountry]; //dial;
//	struct PTT_tone_table busy1;
//	struct PTT_tone_table busy2;
//	struct PTT_tone_table congest1;
//	struct PTT_tone_table congest2;
//	struct PTT_tone_table ringback;
	} country_tone_table;


/* ******************************************
  1/20/98
  Ring int, silent, on and off time in mSec
******************************************* */
typedef const struct {
	uword    Int_period_min;		/* Min Ring Interrupt Period */
	uword    Int_period_max; 		/* Max Ring Interrupt Period */
	uword    Silent_time_min;		/* Min silent time */
	uword    Silent_time_max;		/* Max silent time */
	uword    Ringon_time_min; 		/* Min Ring On time */
	uword    Ringon_time_max; 		/* Max Ring On time */
	uword    Ringoff_time_min; 	/* Min Ring Off time */
	uword    Ringoff_time_max;    /* Max Ring Off time */
	} country_ring_table;



/*************************************/
/*      Definition for Tone taps     */
/*************************************/

typedef struct two_byte {
    ubyte        b0;
    ubyte        b1;
	} TWO_BYTE;

typedef union one_word {
    int w;
    TWO_BYTE    b;
	} ONE_WORD;
typedef const struct {
	uword dbmonthr;
	uword dbmoffthr;
	} country_dbmthr;
/***************************************************/
/* MH021798  Tone threshold levels                 */
/***************************************************/

typedef const struct {
	ubyte	dial_thr;
	ubyte	busy1_thr;
	ubyte	busy2_thr;
	ubyte	conj1_thr;
	ubyte	conj2_thr;
	ubyte	rinbk_thr;
	} Country_Valid_dbmthr_Level;

typedef const struct {
	uword b12;
	uword b11;
	uword b10;
	uword a12;
	uword a11;
	uword b22;
	uword b21;
	uword b20;
	uword a22;
	uword a21;
	} country_filter_taps;



/*************************************/
/*      International S register     */
/*************************************/
typedef struct {
   ubyte DefaultValue;
	ubyte min;
	ubyte max;
	ubyte dummy;	/* for alignment purpose */
	} S_Register;


typedef const struct {
	S_Register S0;
	S_Register S6;
	S_Register S7;
	S_Register S8;
	S_Register S10;
	S_Register S11;
	S_Register S22;
	S_Register S23;
	S_Register S27;
	S_Register S30;
	S_Register S91;
	} country_depend_S_registers;

/*************************************/
/* International DTMF Level  			 */
/*************************************/

typedef const struct {
	ubyte	n0;	/* 0   */
	ubyte	n1;	/*	8   */
	ubyte	n2;	/* 18  */
	ubyte	n3;	/* 28  */
	ubyte	n4;	/* 38  */
	ubyte	n5;  	/* 48  */
	ubyte	n6;	/* 58  */
	ubyte	n7;	/* 68  */
	ubyte	n8;	/* 78  */
	ubyte	n9;	/* 88  */
	ubyte	n10;	/* 98  */
	ubyte	n11;	/* 108 */
	ubyte	n12;	/* 119 */
	ubyte	n13;	/* 129 */
	ubyte	n14;	/* 139 */
	ubyte	n15;	/* 149 */
	ubyte	n16;	/* 159 */
	ubyte	n17;	/* 169 */
	ubyte	n18;	/* 179 */
	ubyte	n19;	/* 189 */
	ubyte	n20;	/* 199 */
	ubyte	n21;	/* 209 */
	ubyte	n22;	/* 219 */
	ubyte	n23;	/* 229 */
	ubyte	n24;	/* 239 */
	ubyte	n25;	/* 249 */
	} DTMF_Single_Level;


typedef struct {
	ubyte level1;
	ubyte level2;
	uword dummy;
	} DTMF_Level;


typedef const struct {
	DTMF_Level DTMF_Level;
	} country_DTMF_Level;




/*************************************/
/* International Dial Tone Time Out  */
/*************************************/
/* Unit in 10ms 							 */

typedef const struct {
	uword TimeOut;
	uword dummy;
	} country_Dial_Tone_TimeOut;

/*************************************/
/* International Hook Flash Time     */
/*************************************/
/* Unit in 10ms 							 */

typedef const struct {
	uword FlashTime;
	} country_Hook_Flash_Time;


/*************************************/
/* International Pulse Stop Time     */
/*************************************/
/* Unit in 10ms 							 */

typedef const struct {
	uword StopTime;
	} country_Pulse_Stop_Time;


/*************************************/
/*  Data/Fax Transmitt Level  		 */
/*************************************/

typedef const struct {
	uword Data_Level;
	uword	Fax_Level;
	} country_transmit_level;

/*************************************/
/*  S91 Transmitt Level  Table		 */
/*************************************/
typedef const struct {
	uword Xmit_level;
	} S91_transmit_level;


/*************************************/
/*  Pulse Make/Break Time Table		 */
/*************************************/

typedef const struct {
	ubyte	P0_break_time;
	ubyte P0_make_time;
	ubyte	P1_break_time;
	ubyte P1_make_time;
	} country_Make_Break_Time;

/*************************************/
/* Nominal ON_OFF time for ring back */
/*************************************/

typedef const struct {
	uword OnTime;
	uword OffTime;
	} country_Nominal_RingBack_Cadence;



typedef const struct
{
	uword sh_delay1;
	uword sh_delay2;
} Shunt_Delay_Tag;


typedef const struct
{
    ubyte disable_pulse_dial;
    ubyte disable_dtmf_dial;
    ubyte no_pulse_dial_after_dtmf;
    ubyte no_dtmf_dial_after_pulse;
    ubyte ath1_timer_disabled;
} PTT_General_Flags_Tag1;

typedef const struct
{
	char  cntry_n[4];  // three characters for country name
	ulong cntry_areacode2;
} Cntry_List_Tag;


#if INTERNATIONAL_CODE == 1
struct Homg_var1_Tag
{
	ubyte Forced_sreg0_min1;
	ubyte Forced_sreg0_max1;
	ubyte Display_Rng_T;
	ubyte disable_blacklist;
	ubyte rng_maxT;
	ubyte rng_minT;
};

struct Homg_var2_Tag
{
	ubyte max_message_len1;
	ubyte max_message_len1_enable;
};
#endif


//struct Homg_var3_Tag
//{
//	ubyte homg_gen_st1;
//};







