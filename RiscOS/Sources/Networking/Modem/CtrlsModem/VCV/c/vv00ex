/****************************************************************************
/
/   Copyright 1988,1989,1990,1991,1992,1993,1994, 1995.
/        All Rights Reserved by:
/     RSA
/     7701 Six Forks Road
/     Suite 120
/     Raleigh, NC  27615
/     (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.    The information contained herein is solely
/   for the use of RSA.
/
/   File:    vv00ex.c
/
/   Version:    1.00
/
/   Function:    This file contains the code to execute the VoiceView
/               commands.
/
/   Product:    
/
/   History:
/
/    Created:
/
/    ---------------------------------------------------------
/    -         Modifications          -
/    ---------------------------------------------------------
/
/
/       Author & Date: RSA 
/       Description: 
/       Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "vcv_def.h"
#include "vcv_mem.h"
#include "vcv_cpro.h"
#include "tracemac.h"

#if defined(WeWantTrace)
  #include <stdio.h>
  #include <string.h>

  static ubyte TraceLevel = 0;
  static byte  *MyName = "vv00ex";
  static byte  tracebuf[80];
#endif

/* Local Prototypes */
ubyte vcv_execute_command(uword,ubyte *,ubyte **);
void vcv_ssp_query(void);
void vcv_scd_query(void);
void vcv_ssr_query(void);
ubyte vcv_sip_command(void);
ubyte vcv_sic_command(void);
ubyte vcv_ssp_command(ubyte *);
ubyte vcv_scd_command(ubyte *);
ubyte vcv_sqr_command(ubyte *);
void vcv_sqr_query(void);
extern void vcv_dte_init(ubyte, ubyte);

/*******************************************************************************
/
/   Routine:  vcv_execute_command
/
/   Author : RSA
/
/   Creation Date: 10/4/92
/
/   Description : This routine will execute VoiceView commands and queries
/
/   Input Parameters: uword cmd - Command to be executed
/
/                       ubyte *param_ptr - Pointer to the parameter passed in
/
/                      ubyte **msg_ptr
/                               Pointer to information string to be sent to the 
/                               terminal.
/
/   Output Parameters:  ubyte   function return code
/                           0       Go to online
/                           1       Continue parsing
/                           2       Discard rest of command line
/                                   and respond with ERROR message
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                -
/   -------------------------------------------------------------
/
/       Author & Date: RSA 
/       Description: 
/       Reason:
/
*******************************************************************************/
ubyte vcv_execute_command(uword cmd, ubyte *param_ptr, ubyte **msg_ptr)
{
    ubyte return_code;

    /*  Load the address of vcv_array in to the input pointer.  Any info
     *  that needs to be returned to the terminal should be placed into 
     *  vcv_array[].
     */
    vcv_array[0] = '\0';
    *msg_ptr = (ubyte *)vcv_array;

    return_code = CONTINUE_PARSING;
    switch (cmd)
    {
        case VCV_SVV_COMMAND: {
            vcv_state=VV_TX_STARTSEQ;
            vcv_data_mode=VCV_VOICEVIEW_MODE;
            return_code = GOTO_ONLINE;

            acu_halt();

            /* Take the DTE port for data mode */
            vcv_dte_init(0,vcv_dte_flow_control);
            break;
        }
        case VCV_SER_QUERY: {
           /* Get the value of last error that occurred.  */
           vcv_store_hex_byte(vcv_error(REQUEST,0), &vcv_array[0]);
           vcv_array[2] = '\0'; /* end of 2 char string */
           break;
        }
        case VCV_SIP_COMMAND: {
            /* Initialize! */
            vcv_sip_command();
            break;
        }
        case VCV_SIC_COMMAND: {
            /* Initialize! */
            vcv_sic_command();
            break;
        }
        case VCV_SFX_COMMAND: {
            vcv_state=VV_TX_STARTSEQ;
            vcv_data_mode=VCV_FAX_MODE;
            return_code = GOTO_ONLINE;
            break;
        }
        case VCV_SSQ_COMMAND: {
            vcv_state=VV_TX_CAPQUERY;
            return_code = GOTO_ONLINE;
            break;
        }
       case VCV_SDA_COMMAND: {
            vcv_state=VV_TX_STARTSEQ;
            vcv_data_mode=VCV_MODEM_MODE;
            return_code = GOTO_ONLINE;
             break;
        }
        case VCV_SAC_COMMAND: {
           if (vcv_state!=VV_RX_DATA)
           {
               return_code = TERMINATE_WITH_ERROR;
           }
           else
           {
               vcv_state=VV_SAC_STATE;
               return_code = GOTO_ONLINE;

               acu_halt();

               /* Take the DTE port for data mode */
               vcv_dte_init(vcv_dte_flow_control,0);
           }
           break;
        }

        case VCV_SSP_QUERY: {
            vcv_ssp_query();
            break;
        }

        case VCV_SSP_COMMAND: {
            return_code = vcv_ssp_command(param_ptr);
            break;
        }
        case VCV_SSR_COMMAND: {

           /* Test input bounds */
           if (*param_ptr > 1)
               return_code = TERMINATE_WITH_ERROR;
           else
               vcv_dash_ssr_enabled=*param_ptr;
            break;
        }
        case VCV_SSR_QUERY: {
            vcv_ssr_query();
            break;
        }
        case  VCV_SCD_COMMAND: {
            return_code = vcv_scd_command(param_ptr);
            if (return_code == CONTINUE_PARSING) {
               vcv_update_options();
            }
            break;
        }
        case VCV_SCD_QUERY: {
            vcv_scd_query();
            break;
        }

        case VCV_SQR_COMMAND: {
           return_code = vcv_sqr_command(param_ptr);
            break;
        }
        case VCV_SQR_QUERY: {
            vcv_sqr_query();
            break;
        }

    default:{
            return_code = TERMINATE_WITH_ERROR;
        break;
        }
    }
    return (return_code);
}




/*******************************************************************************
/
/   Routine: vcv_ssp_query
/
/   Author: RSA
/
/   Creation Date:
/
/   Description: Reports currently set transmission speeds.
/
/   Input Parameters: None
/
/   Output Parameters:
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                    -
/   -------------------------------------------------------------
/
/
/       Author & Date: 
/       Description: 
/       Reason:
/
*******************************************************************************/
void vcv_ssp_query(void)
{
    ubyte index,val,i;

    index=0;

    for (i=0;i<3;i++) {
        switch(vcv_data_rate[i]) {
            case V21CH2: {
                val=0;
                break;
            }
            case V27TER_4800: {
                val=1;
                break;
            }
            case V29_9600: {
                val=2;
                break;
            }
            case V29_4800: {
                val=3;
                break;
            }
            case V17_7200: {
                val=4;
                break;
            }
            case V17_9600: {
                val=5;
                break;
            }
            case V17_12000: {
                val=6;
                break;
            }

            case V17_14400: {
                val=7;
                break;
            }
            default: {
                val=0x00;
                break;
            }
        }
        vcv_array[index++]=val+0x30;
        vcv_array[index++]=',';
    }
    vcv_array[--index]='\0';
}
/*******************************************************************************
/
/   Routine: vcv_scd_query
/
/   Author: RSA
/
/   Creation Date:
/
/   Description: Reports currently set capabilities
/
/   Input Parameters: None
/
/   Output Parameters:
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                    -
/   -------------------------------------------------------------
/
/
/       Author & Date: 
/       Description: 
/       Reason:
/
*******************************************************************************/
void vcv_scd_query(void)
{
    ubyte i,index;
    ubyte last_location;

    last_location=0;
    index=0;

    /* Find the number of elements in current capabilities struct */
    last_location=vcv_num_capabilities;
    vcv_array[index++] = '"';
    for (i=0; i<last_location; i++) {
        vcv_store_hex_byte(vcv_cap_struct[i], &vcv_array[index++]);
        index++;
        vcv_array[index++]=' ';
    }
    if (last_location!=0) {
        index--;
    }
    vcv_array[index++]='"';
    vcv_array[index]='\0';

}


/*******************************************************************************
/
/   Routine: vcv_ssr_query
/
/   Author: RSA
/
/   Creation Date:
/
/   Description: Reports currently set start sequence response control setting
/
/   Input Parameters: None
/
/   Output Parameters:
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                    -
/   -------------------------------------------------------------
/
/
/       Author & Date: 
/       Description: 
/       Reason:
/
*******************************************************************************/
void vcv_ssr_query(void)
{
   if (vcv_dash_ssr_enabled==TRUE)
       vcv_array[0] = '1';
   else
       vcv_array[0] = '0';

   vcv_array[1]='\0'; /* end of string */
}

/*******************************************************************************
/
/   Routine: vcv_sip_command
/
/   Author: RSA
/
/   Creation Date:
/
/   Description: Initializes VoiceView parms
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  vcv_data_rate[], vcv_prop_rate[],
/                           vcv_hookswitch_monitor, vcv_sqr_switch,
/                           vcv_dash_ssr_enabled
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                    -
/   -------------------------------------------------------------
/
/
/       Author & Date: 
/       Description: 
/       Reason:
/
*******************************************************************************/
ubyte vcv_sip_command(void)
{
    vcv_error_recov_cond=FALSE;
   vcv_sic_command();
    vcv_hookswitch_monitor=FALSE;
    vcv_sqr_switch=FALSE;
    vcv_dash_ssr_enabled=TRUE;
    return(CONTINUE_PARSING);
}



/*******************************************************************************
/
/   Routine: vcv_sic_command
/
/   Author: RSA
/
/   Creation Date:
/
/   Description: Initializes VoiceView capabilities
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  vcv_data_rate[], vcv_prop_rate[]
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                    -
/   -------------------------------------------------------------
/
/
/       Author & Date: 
/       Description: 
/       Reason:
/
*******************************************************************************/
ubyte vcv_sic_command(void)
{
    /* Initialize capabilities data struct */
    vcv_cap_struct[0]=0x41;
    vcv_cap_struct[1]=0x01;
    vcv_cap_struct[2]=0x42;
    vcv_cap_struct[3]=0x00;
    vcv_cap_struct[4]=0x44;
    vcv_cap_struct[5]=0x45;
    vcv_num_capabilities=6;

    /* Update the capabilities options */
    vcv_update_options();

    vcv_data_rate[BURST_RATE]=vcv_speed_array[0].config_val;
    vcv_prop_rate[BURST_RATE]=vcv_speed_array[0].propogation_delay;
    vcv_data_rate[RECOVERY_RATE]=vcv_speed_array[1].config_val;
    vcv_prop_rate[RECOVERY_RATE]=vcv_speed_array[1].propogation_delay;
    vcv_data_rate[PRIORITY_RATE]=vcv_speed_array[2].config_val;
    vcv_prop_rate[PRIORITY_RATE]=vcv_speed_array[2].propogation_delay;
    return(CONTINUE_PARSING);
}


/*******************************************************************************
/
/   Routine: vcv_ssp_command
/
/   Author: RSA
/
/   Creation Date:
/
/   Description: Updates VoiceView transmission speeds
/
/   Input Parameters: pointer to ACU parsed paramter 
/
/   Output Parameters: 1 (CONTINUE_PARSING) = valid command
/                      2 (TERMINATE_WITH_ERROR) = bad command input
/
/   Global Variables Changed:  vcv_data_rate[], vcv_prop_rate[]
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                    -
/   -------------------------------------------------------------
/
/
/       Author & Date: 
/       Description: 
/       Reason:
/
*******************************************************************************/
ubyte vcv_ssp_command(ubyte *param_ptr)
{
   ubyte field,value;

   /* Get AT <compound value> command data from ACU parser */
   do {
       field = *param_ptr++; /* which compound position */
       value = *param_ptr++; /* the compound value */

       /* Check range of all paramters */
       if ((field!=0) && (value > 8))
           return TERMINATE_WITH_ERROR;

       switch (field)
       {
           case 0: /* End of Parsed Parameters */
                break;

            case 1:  
            case 2:  
            case 3:
                vcv_data_rate[field-1]=vcv_speed_array[value].config_val;
                vcv_prop_rate[field-1]=vcv_speed_array[value].propogation_delay;
                break;
                        
            default:   /* field out of bounds */
                return TERMINATE_WITH_ERROR;
        } /* switch */
    } while (field);

   return CONTINUE_PARSING;
}
/*******************************************************************************
/
/   Routine: vcv_scd_command
/
/   Author: RSA
/
/   Creation Date:
/
/   Description: Updates VoiceView capabilities description
/
/   Input Parameters: None
/
/   Output Parameters:
/
/   Global Variables Changed:  vcv_cap_struct[], vcv_num_capabilities
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                    -
/   -------------------------------------------------------------
/
/
/       Author & Date: 
/       Description: 
/       Reason:
/
*******************************************************************************/
ubyte vcv_scd_command(ubyte *param_ptr)
{
    ubyte temp;
    ubyte index,continue_flag,last_location;
    ubyte data,i,j;
    ubyte data_byte;
    ubyte *temp_ptr;

    index=0;
    continue_flag=TRUE;

   /* Look for the opening ", error if none found */
   while (*param_ptr++!=0x22) {
      if (*param_ptr=='\0') {
         return TERMINATE_WITH_ERROR;
      }
   }

   data=*param_ptr++;

   /* Check for a "" condition, reset capabilites to NULL */
   if (data==0x22) {
      vcv_cap_struct[0]='\0';
      vcv_num_capabilities=0;
      return CONTINUE_PARSING;
   }

   /* Make sure that all data is in range before parsing */
   temp_ptr = param_ptr;
   do {
     if (!((*temp_ptr >= '0' && *temp_ptr <= '9') ||
          (*temp_ptr >= 'A' && *temp_ptr <= 'F') ||
          (*temp_ptr == 0x22) || (*temp_ptr == '\0') ||
          (*temp_ptr == 0x20) )) 
        return TERMINATE_WITH_ERROR;
   }   
   while (*temp_ptr++ != 0);

   /* Get all of the capabilities */
   while (continue_flag==TRUE) {

         data_byte=0;

        if ((data!= 0x22) && (data != '\0')) {
          /*while a character is in range */
          while ((data >= '0' && data <= '9') || (data >= 'A' && data <= 'F'))
          {
              data_byte <<= 4; /* multiply by a magnitude */
              /* translate and add new value */
              data_byte |= (data >= '0' && data <= '9') ? data - '0' : data - 'A' + 10;
      
              data = *param_ptr++; /* get next character */
          }
          vcv_temp_array[index++]=data_byte;
          param_ptr--;
          /* Strip out the spaces */
          while(*param_ptr++ == ' '){}
          *param_ptr--;
          data=*param_ptr;
        } else {
            continue_flag=FALSE;
        }
    }

   /* If cap structure is empty, just copy in new elements */
   if (vcv_num_capabilities==0) {
      for (i=0;i<index;i++) {
         vcv_cap_struct[i]=vcv_temp_array[i];
      }
      vcv_num_capabilities=index;
      return CONTINUE_PARSING;
   }

    /* Find the number of elements in current capabilities struct */
    last_location=vcv_num_capabilities;

    /* Search for duplicates, ignore proprietary 0xFF capabilities */
    for (i=0; i<index; i++) {
        if (vcv_temp_array[i]!=0xff) {
            for (j=0; j<last_location; j++) {
                if (vcv_cap_struct[j]==0xff) {
                    j=j+vcv_cap_struct[j+1]+2;
                }
                if (vcv_temp_array[i]==vcv_cap_struct[j]) {
                   return TERMINATE_WITH_ERROR;
                }
            }
            vcv_cap_struct[last_location++]=vcv_temp_array[i];
        } else {
            for (temp=i; temp<=(i+vcv_temp_array[i+1]+1); temp++) {
                vcv_cap_struct[last_location++]=vcv_temp_array[temp];
            }
            vcv_cap_struct[last_location]='\0';
            i=i+vcv_temp_array[i+1]+1;
        }
    }
    vcv_num_capabilities=last_location;

   return CONTINUE_PARSING;
}
/*******************************************************************************
/
/   Routine: vcv_sqr_command
/
/   Author: RSA
/
/   Creation Date:
/
/   Description: Updates VoiceView Capabilities response switch.
/
/   Input Parameters: None
/
/   Output Parameters:
/
/   Global Variables Changed:  vcv_sqr_switch
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                    -
/   -------------------------------------------------------------
/
/
/       Author & Date: 
/       Description: 
/       Reason:
/
*******************************************************************************/
ubyte vcv_sqr_command(ubyte *param_ptr)
{
   /* Test input bounds */
   if (*param_ptr > 1)
       return TERMINATE_WITH_ERROR;

   /* Assign input value */
   if (*param_ptr==1)
       vcv_sqr_switch=TRUE;
   else
       vcv_sqr_switch=FALSE;

   return CONTINUE_PARSING;
}

/*******************************************************************************
/
/   Routine: vcv_sqr_query
/
/   Author: RSA
/
/   Creation Date:
/
/   Description: Updates VoiceView Capabilities response switch.
/
/   Input Parameters: None
/
/   Output Parameters:
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                    -
/   -------------------------------------------------------------
/
/
/       Author & Date: 
/       Description: 
/       Reason:
/
*******************************************************************************/
void vcv_sqr_query(void)
{
   if (vcv_sqr_switch==TRUE) {
       vcv_array[0] = '1';
   } else {
       vcv_array[0] = '0';
   }

   vcv_array[1]='\0'; /* end of string */
}

