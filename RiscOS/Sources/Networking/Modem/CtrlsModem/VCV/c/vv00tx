/**************************************************************************
/
/   Copyright 1988,1989,1990,1991,1992,1993,1994, 1995.
/        All Rights Reserved by:
/	 RSA
/	 7701 Six Forks Road
/	 Suite 120
/	 Raleigh, NC  27615
/	 (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.	The information contained herein is solely
/   for the use of RSA.
/
/   File:	vv00tx.c
/
/   Version:	1.00
/
/   Function:	VoiceView Data mode transmit state machines
/
/   Product:	
/
/   History:
/
/	Created:
/
/	---------------------------------------------------------
/	-	     Modifications	                        -
/	---------------------------------------------------------
/
/
/       Author & Date: RSA 
/       Description: 
/       Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "vcv_def.h"
#include "vcv_mem.h"
#include "vcv_cpro.h"
#include "assert.h"
#include "tracemac.h"
#include <acuiomem.h>

#if defined(WeWantTrace)
  #include <stdio.h>
  #include <string.h>

  static ubyte TraceLevel = 0;
  static byte  *MyName = "vv00tx";
  static byte  tracebuf[80];
#endif

void vcv_rnr_state(void);
ubyte vcv_control_tx(void);
ubyte vcv_check_ack(void);
ubyte vcv_get_one_frame(void);
uword vcv_package_frame(ubyte);
ubyte vcv_rejection_state(void);

extern void vcv_line_init(ubyte, ubyte, uword);
extern void vcv_dte_init(ubyte, ubyte);
extern void vcv_line_rx_block(ubyte *);
extern void vcv_line_tx_block(ubyte *);
extern ubyte dte_from_char(void);
extern uword dte_from_num(void);
extern void dte_to_char(ubyte);
extern uword dte_to_num(void);
extern uword tx_char_count;
extern void acu_halt(void);

ubyte vcv_tx_return;
struct vcv_hdlc_packet *vcv_tx_fill_ptr;

/*******************************************************************************
/
/   Routine: vcv_control_tx
/
/   Author: RSA
/
/   Creation Date: 1995
/
/   Description: Controls flow of VoiceView data mode transmission.
/
/   Input Parameters: None
/
/   Output Parameters:
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -			Modifications			        -
/   -------------------------------------------------------------
/
/
/       Author & Date: 
/       Description: 
/       Reason:
/
*******************************************************************************/
ubyte vcv_control_tx()
{
   ubyte rc;
   ubyte data[4];
   ubyte comp_val;
   ubyte temp;

   switch (vcv_tx_state)
   {
        case INITIALIZE:
            /* init to no error */
            vcv_tx_return=VCV_OK;

            if (vcv_switch_flag==FALSE)
            {
               vcv_init_statevars();
            }

            vcv_current_hispeed=vcv_data_rate[PRIORITY_RATE];
            vcv_prop_delay=vcv_prop_rate[PRIORITY_RATE];
            vcv_utility_timer=5;
            vcv_starting_data_block=TRUE;
            vcv_tx_status=FALSE;
            vcv_retx_flag=FALSE;
            vcv_error_recov_cond=FALSE;
            vcv_retx_count=0;
            
            /* to support <dle><etx> */
            if (vcv_switch_flag==TRUE)
            {
                vcv_switch_flag=FALSE;
                vcv_set_statevars(TX, RESTORE);
                vcv_tx_state=CONFIG_MODE_INDICATOR;

                vcv_dte_init(0, vcv_dte_flow_control);
            }
            else
            {
                vcv_tx_state=WAITING;
                vcv_tx_status=FALSE; 
            }
            break;

        case CONFIG_MODE_INDICATOR:
            /*
               Ensure at least 75 +/- 20 ms has elapsed
               before sending the mode indicator.
            */
            modem_vcv_transmitter(OFF);
            modem_vcv_timer_delay(85);

            modem_config_vcv(TRANSMIT_MODE, V21CH2);
            vcv_line_init(HDLC_MODE, TRANSMIT_MODE, VCV_HDLC_MAX_FRAME_SIZE+5);
            vcv_get_mi_string(vcv_current_hispeed, data);
            vcv_schedule_tx_packet(MODE_INDICATOR_FRAME, data,0);
            vcv_utility_timer=10;
            vcv_tx_state=MI_FLAG_DELAY;
            break;

        case MI_FLAG_DELAY:
            if (vcv_utility_timer==0)
            {
                vcv_tx_status=TRUE;
                vcv_line_tx_block((ubyte *)&vcv_buffer_array[vcv_tail_index]);

                vcv_tx_state=WAITING;
                vcv_utility_timer=0;
            }
            break;

        case WAITING:
            if (vcv_utility_timer)
            {
                break;
            }

            if( vcv_tx_status )
            {
               break;
            }

            modem_vcv_timer_delay(vcv_prop_rate[BURST_RATE]); 
            modem_vcv_transmitter(OFF);
            modem_vcv_timer_delay(55);

            modem_config_vcv(TRANSMIT_MODE, vcv_current_hispeed);
            vcv_line_init(HDLC_MODE, TRANSMIT_MODE, VCV_HDLC_MAX_FRAME_SIZE+5);

            if (vcv_retx_flag==TRUE)
            {
               /* Scan the buffer looking for the correct Ns frame
                  to send. Validate the control frame as well so
                  not to mix it up incoming I frames. Then scan forward
                  looking for the final frame in the block.
               */
               Nr <<= 1;  /* move into bit 1 */
               for( temp=0; temp<VCV_HDLC_BUFFER_COUNT; temp++ )
               {
                  if( (vcv_buffer_array[temp].data[1] == Nr) &&
                      (vcv_buffer_array[temp].data[0] == (0x01|vcv_control_flag)) )
                  {
                     /* OK we have found the correct starting frame to send, stash
                        the staring index.
                     */
                     vcv_tail_index=temp;
                     vcv_head_index=temp;
                     break;
                  }
               }
               Nr >>= 1;  /* move bask into bit 0 */

               temp =0;
               while( temp < VCV_HDLC_BUFFER_COUNT )
               {
                  if( vcv_buffer_array[vcv_head_index].data[2] & 0x01 )
                  {
                     /* OK we have found the last frame in the window,
                        mask head index point 1 buffer past this one
                     */
                     if (++vcv_head_index == VCV_HDLC_BUFFER_COUNT)
                        vcv_head_index = 0;

                     break; /* All done */
                  }

                  /* Handle wrap around */
                  if (++vcv_head_index == VCV_HDLC_BUFFER_COUNT)
                     vcv_head_index = 0;

                  /* Up limit count */
                  temp++;
               }

               vcv_retx_flag=FALSE;
               vcv_tx_state=SEND_ONE_WINDOW;
               vcv_utility_timer=50;/**50**/
            }
            else
            {
                vcv_tx_state=GET_ONE_WINDOW;
                /* Timer to spec=1500, but would not pass cert. tests
                 *  unless set to 1400. L3TM1, L3TM2
                 */
                vcv_utility_timer=1400; /*T303*/
                vcv_frame_count=0;
                break;
            }
            break;

        case GET_ONE_WINDOW:
            rc=vcv_get_one_frame();
            switch(rc)
            {
                case VCV_OK:
                    vcv_tx_state=SEND_ONE_WINDOW;
                    vcv_utility_timer=0;
                    break;

                case VCV_EMPTY:
                    if (vcv_utility_timer==0)
                    {
                        /* Timer 303 expired */
                        vcv_error(ADD,0x29);
                        vcv_tx_state=REJECTION_STATE;
                    }
                    else
                    {
                        vcv_tx_state=GET_ONE_WINDOW;
                    }
                    break;

                default :
                  /* Shouldn't occur */
                  while(1);
            }
            break;

        case SEND_ONE_WINDOW:
            if (vcv_utility_timer!=0)
            {
                break;
            }

            vcv_tx_status=TRUE;
            vcv_line_tx_block((ubyte *)&vcv_buffer_array[vcv_tail_index]);

            /* Wait for IO code to TX entire Frame including CRC */
            while(vcv_tx_status);

            /* Add some propogation delay */
            modem_vcv_timer_delay(vcv_prop_delay);

            modem_vcv_transmitter(OFF);
            modem_config_vcv(RECEIVE_MODE, vcv_data_rate[BURST_RATE]);
            vcv_line_init(HDLC_MODE, RECEIVE_MODE, VCV_HDLC_MAX_FRAME_SIZE+5);
            vcv_line_rx_block((ubyte *)&vcv_buffer_array[vcv_head_index]);
            vcv_tx_state=WAIT_TX_DONE;
            break;

        case WAIT_TX_DONE:
            vcv_tx_state=WAIT_ACK;
            vcv_utility_timer=800; /*VV_TIMER_T200*/
            break;

        case WAIT_ACK:
            rc=vcv_check_ack();
            switch(rc)
            {
                case NO_ACK:
                    if (vcv_utility_timer)
                    {
                        /* Timer still running, do nothing */
                    }
                    else
                    {
                        /* Timer expired */
                        if (vcv_starting_data_block==TRUE)
                        {
                            /* Send <dle><can> to DTE */
                            vcv_tx_state=REJECTION_STATE;
                            vcv_error(ADD,0x27);
                            break;
                        }
                        else
                        {
                            vcv_tx_state=ADJUST_TO_RETX;
                        }
                    }
                    break;
                
                case ACK_DISC:
                    if (vcv_starting_data_block==TRUE)
                    {
                        /* Send <dle><can> to DTE */
                        vcv_tx_state=REJECTION_STATE;
                        vcv_error(ADD,0x43); /*L2DISC2*/
                    }
                    else
                    {
                        /* Return to the voice conversation state */
                        vcv_return_to_voice();
                        vcv_tx_state=INITIALIZE;
                        vcv_error(ADD,0x43);
                        return(VCV_ERROR);
                    }
                    break;   

                case ACK_RNR:
                    vcv_starting_data_block=FALSE;
                    vcv_tx_state=RNR_STATE;
                    vcv_tx_rnr_state=IDLETX;
                    vcv_peer_recov_cond = FALSE;
                    break;

                case ACK_RR:
                    /*moved to RR state-->vcv_starting_data_block=FALSE;*/
                    vcv_tx_state=RR_STATE;
                    break;

                case ACK_UA:
                    vcv_tx_state=ADJUST_TO_RETX;
                    break;

                case ACK_BAD:
                    /* Got an invalid frame, send DISC & goto voice */
                    /* (L2RR1) Might just want to timeout and ignore the bad ack  */
                    vcv_tx_return=VCV_ERROR;
                    vcv_tx_state= SEND_DISC_GOTO_VOICE;
                    break;

                default:
                    /*  Shouldn't occur  */
                   while(1);
            }
            break;

        case RNR_STATE:
            /* Call the RNR state machine */
            vcv_rnr_state();
            break;

        case RR_STATE:
            if (Va+9 >= 128)
            {
                comp_val=0;
            }
            else
            {
                comp_val=Va;
            }

            if (Nr>=comp_val)
            {
                vcv_utility_timer=VV_TIMER_T200;
                Va=Nr;
                Vr=Nr;

                if (Va == Vs)
                {
                    if (vcv_dle_state==DLE_EOT)
                    {
                        vcv_tx_state=SEND_DISC_GOTO_VOICE;
                        break;
                    }

                    if (vcv_dle_state==DLE_ETX)
                    {
                        vcv_dle_state=DLE_NONE;
                        /* Reset this state machine */
                        vcv_tx_state=INITIALIZE;
                        /* Let vcv_bg know that we need to switch to rx */
                        return(VCV_SWITCH_TO_RX);
                    }

                    vcv_retx_flag=FALSE;
                    vcv_error_recov_cond=FALSE;
                    vcv_starting_data_block=FALSE;
                    vcv_tx_state=CONFIG_MODE_INDICATOR;
                }
                else
                {
                   /*L2RR4,L2RX2*/
                   if ((vcv_starting_data_block==TRUE) && (Va>Vs))
                   {
                       vcv_error(ADD,0x42);
                       vcv_tx_return=VCV_ERROR;
                       vcv_tx_state=SEND_DISC_GOTO_VOICE;
                   }
                   else
                   {
                       vcv_tx_state=ADJUST_TO_RETX;
                   }
                }
            }
            else
            {
                vcv_tx_return=VCV_ERROR;
                vcv_tx_state=SEND_DISC_GOTO_VOICE;
            }
            break;

        case ADJUST_TO_RETX:
            /* Check to see if we previously retransmitted */
            if (vcv_error_recov_cond == TRUE)
            {
                /* Check for max number of retries */

                if (vcv_retx_count > VCV_N200)
                {
                    /* Set state to disconnect */
                    vcv_tx_return=VCV_ERROR;
                    vcv_tx_state=SEND_DISC_GOTO_VOICE;
                    break;
                }
                else
                {
                    /* Increment retransmit count */
                    vcv_retx_count++;

                    /* Step down in transmission speed */
                    vcv_current_hispeed=vcv_data_rate[RECOVERY_RATE];
                    vcv_prop_delay=vcv_prop_rate[RECOVERY_RATE];

                    /* Adjust transmission window */
                    vcv_retx_flag=TRUE;
                    Vr=Nr;

                    /* Set state to transmit another window */
                    vcv_tx_state=CONFIG_MODE_INDICATOR;
                }
            }
            else
            {
                vcv_error_recov_cond=TRUE;

                /* This is 1st time that we're retransmitting */
                vcv_retx_count = 1;
                vcv_utility_timer = VV_TIMER_T200;

                /* Adjust transmission window */
                vcv_retx_flag=TRUE;
                Vr=Nr;

                /* Set state to transmit another window */
                vcv_tx_state=CONFIG_MODE_INDICATOR;
            }
            break;

        case SEND_DISC_GOTO_VOICE:
            modem_vcv_timer_delay(60);
            modem_config_vcv(TRANSMIT_MODE, vcv_data_rate[BURST_RATE] );
            vcv_line_init(HDLC_MODE, TRANSMIT_MODE, VCV_HDLC_MAX_FRAME_SIZE+5);

            /* transmit DISC message */
            modem_vcv_timer_delay(55);
            rc=vcv_send_supervisory(DISC, P_ZERO, 0);

            if (vcv_tx_return==VCV_ERROR)
            {
               vcv_tx_state=REJECTION_STATE;
            }
            else
            {
               /* Return to the voice conversation state */
               vcv_tx_state=WAIT_TO_VOICE;
            }
            break;

        case REJECTION_STATE:
            rc=vcv_rejection_state();
            switch(rc)
            {
                case VCV_STAY:
                    break;

                case VCV_OK:
                    vcv_tx_state=INITIALIZE;
                    return(VCV_ERROR);

                default:
                    break;
            }
            break;

        case WAIT_TO_VOICE:
            rc=vcv_return_to_voice();
            switch(rc)
            {
                case VCV_STAY:
                    break;

                case VCV_OK:
                    vcv_tx_state=INITIALIZE;
                    return(vcv_tx_return);

                default:
                    break;
            }
            break;

        default:
            /*  Shouldn't happen  */
            while(1);
    }

    return(VCV_STAY);
}

/*******************************************************************************
/
/   Routine: vcv_package_frame
/
/   Author: RSA
/
/   Creation Date:
/
/   Description: Gets 1 frame worth of data from DTE and packages the
/                frame in format ready for transmission.
/
/   Input Parameters: None
/
/   Output Parameters: ubyte tx_count - # chars packaged in frame
/
/   Global Variables Changed:  vcv_dle_state, vcv_dte_last_char
/
/   Users:
/
/   -------------------------------------------------------------
/   -			Modifications			        -
/   -------------------------------------------------------------
/
/
/       Author & Date: 
/       Description: 
/       Reason:
/
*******************************************************************************/
uword vcv_package_frame(ubyte pf_bit)
{

    uword tx_count;
    struct vcv_hdlc_packet *temp_packet;
    ubyte data_byte,tmp_byte;
    ubyte return_code;

    return_code=VCV_EMPTY;

    /* If chars available to send, get packet ready to send */
    /* Make sure that we can at least check the DLE sequence */
    if (vcv_dte_from_num()!=0)
    {
         if( vcv_tx_fill_ptr != NULL )
         {
            temp_packet = vcv_tx_fill_ptr;
            tx_count    = temp_packet->count;
         }
         else
         {
            vcv_tx_fill_ptr=&vcv_buffer_array[vcv_head_index];
            vcv_head_index++;

            /* Handler buffer wrap */
            if (vcv_head_index==VCV_HDLC_BUFFER_COUNT)
                  vcv_head_index=0;

            temp_packet=vcv_tx_fill_ptr;

            /* Init buffer */
            temp_packet->data[0]=0x01 | vcv_control_flag; /**0x01; for rx 0x03tx**/         /*C/R is bit 2, must be set when tx*/
            temp_packet->data[1]=(Ns<<1);
            temp_packet->data[2]=((Nr <<1) | pf_bit);

            /* Initialize tx_count to no characters AND header is in */
            tx_count = 3;
         }

        /*
         *  Keep putting characters in frame until MAX_CHARS reached or the
         *  the DTE has no more characters available.
         */
        while( vcv_dte_from_num() )
        {
            /* Get character from DTE */
            data_byte=vcv_dte_from_char();
            tmp_byte=data_byte;

            if (vcv_dte_last_char == DLE)
            {
                switch (data_byte)
                {
                    case CAN:
                    case EOT:
                        temp_packet->data[2] |= 0x01;
                        temp_packet->data[tx_count]=data_byte;
                        tx_count++;
                        temp_packet->count=tx_count;
                        vcv_dte_last_char=0x00;
                        vcv_dle_state=DLE_EOT;
                        vcv_tx_fill_ptr = NULL;
                        return(VCV_OK);

                    case ETB:
                    case ETX:
                        temp_packet->data[2] |= 0x01;
                        temp_packet->data[tx_count]=data_byte;
                        tx_count++;
                        temp_packet->count=tx_count;
                        vcv_dte_last_char=0x00;
                        vcv_dle_state=DLE_ETX;
                        vcv_tx_fill_ptr = NULL;
                        return(VCV_OK);

                    case DLE:
                        tmp_byte = 0x00;
                        break;

                    default: 
                        /* do nothing */
                        break;
                }
            }

            /* Cache last char */
            vcv_dte_last_char=tmp_byte;

            /* Add byte to packet */
            temp_packet->data[tx_count]=data_byte;

            /* Data len = 256 + 3 byte frame overhead */
            if( ++tx_count == 259 )
            {
               vcv_tx_fill_ptr = NULL;
               return_code = VCV_FULL;
               break;
            }
        }
    
        temp_packet->count=tx_count;
    }
    vcv_dle_state=DLE_NONE;

    /* Return number of characters in packet */
    return(return_code);
}


/*******************************************************************************

/   Routine: vcv_get_one_frame
/
/   Author: RSA
/
/   Creation Date:
/
/   Description: Transmits one window of frames
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -			Modifications			        -
/   -------------------------------------------------------------
/
/
/       Author & Date: 
/       Description: 
/       Reason:
/
*******************************************************************************/
ubyte vcv_get_one_frame()
{
    ubyte first_frame_flag;
    ubyte return_code;
    ubyte pf_bit;
    uword rc;
    pf_bit=0;

    return_code=VCV_EMPTY;
    first_frame_flag=TRUE;

    if (vcv_dte_from_num())
    {
        Ns=Vs;
        Nr=Vr;

        if (vcv_frame_count==8)
            pf_bit=1;

        /* Get the next frame to transmit */
        rc=vcv_package_frame(pf_bit);

        switch( rc )
        {
            case VCV_FULL:
               /* Check for window limit and fall through */
               if( ++vcv_frame_count == 9 )
                  rc = VCV_OK;
               else
                  rc = VCV_EMPTY;  /* Tell caller we're not done yet! */

            case VCV_OK:
               vcv_utility_timer=1500; /*T303*/

               /* Packet ID is modulo 128 */
               if(++Vs == 128)
                  Vs=0;

               break;

            case VCV_EMPTY:
               break;

            default:
               while(1);
        }
        return_code = rc;
    }
    return(return_code);
}

/*******************************************************************************
/
/   Routine: vcv_check_ack
/
/   Author: RSA
/
/   Creation Date:
/
/   Description: Waits for acknowledgement
/
/   Input Parameters: None
/
/   Output Parameters: Returns type of ack received
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -			Modifications			        -
/   -------------------------------------------------------------
/
/
/       Author & Date: 
/       Description: 
/       Reason:
/
*******************************************************************************/
ubyte vcv_check_ack()
{
    ubyte *data_ptr;
    ubyte index;
    ubyte control;
    struct vcv_hdlc_packet *temp_packet;
    ubyte tmp;

    /* Return immediately if no frame received */
    if (vcv_tail_index==vcv_head_index)
        return(NO_ACK);

    /* Get a pointer to the packet */
    temp_packet=(struct vcv_hdlc_packet *)&vcv_buffer_array[vcv_tail_index];

    vcv_tail_index++;

    /* Check for queue wraparound */
    if (vcv_tail_index == VCV_HDLC_BUFFER_COUNT)
        vcv_tail_index=0;

    /* IF Line Io had a problem - ignore frame */
    if( temp_packet->status != 0 )
        return(NO_ACK);

    /* Point to the data portion of packet */
    data_ptr=temp_packet->data;

    index=0;
    tmp=data_ptr[0]; /*index++];*/

    /* Examine Address */
    if (tmp!=(0x01|vcv_control_flag) )
    {
      /*Bad frame*/
      return(ACK_BAD);
    }

    /* Extract the control field */
    control = data_ptr[1];

    /* Check for Disconnect */
    if (control == VCV_CONTROL_DISC)
    {
        return(ACK_DISC);
    }

    /* Check for RNR response */
    if (control == VCV_CONTROL_RNR)
    {
        /* Extract the N(R) from the RNR response. Strip off last bit */
        Nr = (data_ptr[2] & 0xFE) >> 1;
        return(ACK_RNR);
    }

    /* Check for RR response */
    if (control == VCV_CONTROL_RR)
    {
        /* Extract the N(R) from the RR response. Strip off last bit */
        Nr = (data_ptr[2] & 0xFE) >> 1;
        return(ACK_RR);
    }

    /* Check for UA response */
    if (control == VCV_CONTROL_UA)
    {
        return(ACK_UA);
    }

    /* Control field was unsupported */
    return (ACK_BAD);
}

/*******************************************************************************
/
/   Routine: vcv_rnr_state
/
/   Author: RSA
/
/   Creation Date:
/
/   Description: State machine for RNR replies
/
/   Input Parameters: None
/
/   Output Parameters:
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -			Modifications			        -
/   -------------------------------------------------------------
/
/
/       Author & Date: 
/       Description: 
/       Reason:
/
*******************************************************************************/
void vcv_rnr_state()
{

    ubyte rc;

    switch(vcv_tx_rnr_state)
    {
       case IDLETX:
            if (vcv_peer_recov_cond)
            {
                vcv_retx_count++;
                if (vcv_retx_count > VCV_N200)
                {
                    vcv_retx_count=0;
                    vcv_tx_return=VCV_ERROR;
                    vcv_tx_state= SEND_DISC_GOTO_VOICE;
                    break;
                }

                modem_config_vcv(TRANSMIT_MODE, vcv_data_rate[BURST_RATE] );
                vcv_line_init(HDLC_MODE, TRANSMIT_MODE, VCV_HDLC_MAX_FRAME_SIZE+5);

                modem_vcv_timer_delay(55); /** 10 for 9600, 70 for 4800 **/

                /* Poll the receiver to see if it is ready to receive yet */
                rc=vcv_send_supervisory(RR, P_ONE, Nr);

                modem_config_vcv(RECEIVE_MODE, vcv_data_rate[BURST_RATE] );
                vcv_line_init(HDLC_MODE, RECEIVE_MODE, VCV_HDLC_MAX_FRAME_SIZE+5);
                vcv_line_rx_block((ubyte *)&vcv_buffer_array[vcv_head_index]);

                vcv_utility_timer=VV_TIMER_T200;
                vcv_tx_rnr_state=WAITING;
            }
            else
            {
                vcv_peer_recov_cond = TRUE;
                vcv_retx_count=0;
                Va=Nr;
                vcv_tx_rnr_state=WAITING;

                /* Restart T200 */
                vcv_utility_timer = VV_TIMER_T200;
            }
            /* No break, purposely fall through */

        case WAITING:
            rc=vcv_check_ack();
            switch(rc)
            {
                case NO_ACK:
                    if (vcv_utility_timer)
                    {
                        /* Timer still running, do nothing */
                    }
                    else
                    {
                        /* Timer expired - reset this state machine */
                        vcv_tx_rnr_state=IDLETX;
                    }
                    break;
                
                case ACK_DISC:
                    /* Return to the voice conversation state */
                    vcv_return_to_voice(); /*Reset state machs here? */

                    vcv_peer_recov_cond = FALSE;
                    vcv_retx_count=0;

                    vcv_tx_rnr_state=IDLETX;
                    break;

                case ACK_RNR:
                    /* Reset T200  */
                    vcv_utility_timer = VV_TIMER_T200;
                    break;

                case ACK_RR:
                     /* Receiver now ready, exit the RNR state machine */
                     vcv_peer_recov_cond = FALSE;
                     vcv_retx_count=0;
                     vcv_tx_rnr_state=IDLETX;
                     vcv_tx_state=RR_STATE;

                     modem_vcv_timer_delay(1000); /** 10 for 9600, 70 for 4800 **/
                     break;

                case ACK_UA:
                    /* Do nothing, wait for T200 to expire */
                    break;

                case ACK_BAD:
                    /* Got an invalid frame, send DISC & goto voice */
                    vcv_tx_return=VCV_ERROR;
                    vcv_tx_state= SEND_DISC_GOTO_VOICE;
                    vcv_retx_count=0;
                    vcv_tx_rnr_state=IDLETX;
                    break;

                default:
                  /*  Shouldn't occur  */
                  while(1);
            }
            break;

        default:
            while(1);
    }
}

/*******************************************************************************
/
/   Routine: vcv_rejection_state
/
/   Author: RSA
/
/   Creation Date: 1995
/
/   Description: This state is called if the starting data block was
/                not acknowledged.  We must send a <dle><can> up to the
/                DTE, unless your receive buffer already has the <dle>
/                <eot> termination.
/
/   Input Parameters: None
/
/   Output Parameters: VCV_STAY - continue waiting
/                      VCV_OK   - got chars
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -			Modifications			        -
/   -------------------------------------------------------------
/
/
/       Author & Date: 
/       Description: 
/       Reason:
/
*******************************************************************************/
ubyte vcv_rejection_state(void)
{
    ubyte data_byte;
    ubyte local_counter;

    local_counter=0;
    if (vcv_dte_from_num()==0)
    {
        /* Send <dle><can> to host */
        vcv_dte_to_char(0x10);
        vcv_dte_to_char(0x18);
            
        while(vcv_dte_to_num()!=0);
        return(VCV_OK);
    }

    while(vcv_dte_from_num()!=0)
    {
        if (vcv_dte_from_num()==0)
        {
            return(VCV_STAY);
        }

        data_byte=vcv_dte_from_char();
        if (vcv_dte_last_char == DLE)
        {
            if (data_byte == EOT)
            {
               /* Send <dle><can> to host */
               vcv_dte_to_char(0x10);
               vcv_dte_to_char(0x18);

               return(VCV_OK);
            }
        }

        vcv_dte_last_char=data_byte;
    }

    return(VCV_STAY);
}
