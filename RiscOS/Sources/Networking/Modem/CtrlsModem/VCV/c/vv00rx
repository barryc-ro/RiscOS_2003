/****************************************************************************
/
/   Copyright 1988,1989,1990,1991,1992,1993,1994, 1995.
/        All Rights Reserved by:
/	 RSA
/	 7701 Six Forks Road
/	 Suite 120
/	 Raleigh, NC  27615
/	 (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.	The information contained herein is solely
/   for the use of RSA.
/
/   File:	vv00rx.c
/
/   Version:	1.00
/
/   Function:	VoiceView Data mode receive state machines
/
/   Product:
/
/   History:
/
/   Created: 01/30/95
/
/	---------------------------------------------------------
/	-	     Modifications	                        -
/	---------------------------------------------------------
/
/
/       Author & Date: RSA
/       Description:
/       Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "vcv_def.h"
#include "vcv_mem.h"
#include "vcv_cpro.h"

void  vcv_rx_mi(void);
ubyte vcv_return_to_voice(void);
ubyte vcv_send_frames_dte(void);
ubyte vcv_out_queue(struct vcv_hdlc_packet *);
ubyte vcv_get_iframe(void);
ubyte vcv_send_supervisory(ubyte, ubyte, ubyte);
ubyte vcv_dte_check_cancel(void);

extern void disable_acu_on_terminal(void);
extern void vcv_line_init(ubyte, ubyte, uword);
extern void vcv_dte_init(ubyte, ubyte);
extern void vcv_line_tx_block(ubyte *);
extern void vcv_line_rx_block(ubyte *);
extern uword dte_to_free(void);

extern ubyte dte_to_char();
extern uword dte_to_num();
extern ubyte dte_from_char();
extern uword dte_from_num();

uword vcv_cd_drop_time;
ubyte vcv_recv_dle_eot;

#include "assert.h"
#include "tracemac.h"

#if defined(WeWantTrace)
  #include <stdio.h>
  #include <string.h>

  static ubyte TraceLevel = 0;
  static byte  *MyName = "vv00rx";
  static byte  tracebuf[80];
#endif
extern void modem_fix_dsp(void);

/*******************************************************************************
/
/   Routine: vcv_control_rx
/
/   Author: RSA
/
/   Creation Date: 01/30/95
/
/   Description: Main state machine to control a VoiceView data mode
/                receive session.
/
/   Input Parameters: None
/
/   Output Parameters: status of state machine.
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -			Modifications			        -
/   -------------------------------------------------------------
/
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
ubyte vcv_control_rx()
{
    ubyte rc;
    ubyte return_code;

    return_code =VCV_STAY;

    /* Set the DTE for VCV data mode */
    if (vcv_config_dte)
       vcv_config_dte=FALSE;

    /* send frames to DTE as often as possible */
    if (vcv_time_critical==FALSE)
    {
       vcv_send_frames_dte();
    }

    switch (vcv_dle_state)
    {
        case DLE_NONE:
            break;

        case DLE_CAN:
            vcv_dle_state=DLE_NONE;
            vcv_rx_state=CANCEL_RECEIVE;
            vcv_utility_timer=20;
            break;

        default:
            break;
    }

    switch (vcv_rx_state)
    {
        case INITIALIZE:
            /*  1st time through, we already got the mode indicator from
             *  the main start sequence state machine, no need to look
             *  for it here.
             *
             *  Have to make sure that we setup the current_hispeed in
             *  the main state machine so that it can be used here.
             *
             */

            vcv_outq_head=0;
            vcv_outq_tail=0;
            vcv_buffers_left=VCV_HDLC_BUFFER_COUNT;
            vcv_rx_busy_cond=FALSE;
            vcv_time_critical=FALSE;
            vcv_rx_status=VCV_OK;
            vcv_recv_dle_eot = FALSE;

            if (vcv_switch_flag==TRUE)
            {
               vcv_set_statevars(RX, RESTORE);
               vcv_rx_state=RECEIVE_MI;
               vcv_utility_timer=0;
               vcv_dte_init(vcv_dte_flow_control, 0);
            }
            else
            {
               vcv_first_window_condition = TRUE;
               vcv_init_statevars();
               vcv_rx_state=CONFIG_TO_RX;
            }
            break;

        case RECEIVE_MI:
            /* Call receive mode indicator state machine */
            vcv_rx_mi();
            break;

        case CONFIG_TO_RX:
            vcv_utility_timer=1500; /* T310 */
            modem_config_vcv(RECEIVE_MODE, vcv_current_hispeed);
            vcv_line_init(HDLC_MODE, RECEIVE_MODE, VV_HDLC_DATA_SIZE);

            /* kick start the DCE by giving it the first receive buffer */
            vcv_line_rx_block((ubyte *)&vcv_buffer_array[vcv_head_index]);

/* RJM041996 */
            modem_fix_dsp();

            vcv_rx_state=RX_FRAME;
            vcv_cd_drop_time = 0;
            while( !modem_vcv_check_CD() );  /* Wait for CD from remote */

            /* Purposely fall through */

        case RX_FRAME:
            if (vcv_utility_timer!=0)
            {
                vcv_time_critical=FALSE;
                vcv_p_bit_status=FALSE;
                rc=vcv_get_iframe();

                /* Check if remote is still transmitting */
                if( !modem_vcv_check_CD() )
                {
                  if (!vcv_cd_drop_time)
                    vcv_cd_drop_time = vcv_utility_timer;
                  else if ((vcv_cd_drop_time - 10) > vcv_utility_timer)
                     vcv_rx_state=CHECK_BUSY_RCVR;
                }
            }
            else
            {
                /* Timer has expired */
                if (vcv_accept_vcv_request==FALSE)
                {
                    /* Timer T310 expired (AT-SAC expected, not received */
                    vcv_rx_status=VCV_ERROR;
                    vcv_error(ADD,0x2b);
                    vcv_rx_state=RETURN_TO_VOICE;
                    break;
                }
                else
                {
                    /*L2TM4 */
                    vcv_dte_to_char(DLE);
                    vcv_dte_to_char(CAN);
                    vcv_rx_status=VCV_ERROR;
                    vcv_error(ADD,0x23);
                    vcv_rx_state=SEND_DISC_GOTO_VOICE;
                    break;
                }
            }

            switch (rc)
            {
                case NO_FRAME:
                    break;

                case P_BIT_SET:
                    vcv_time_critical=TRUE;
                    vcv_rx_state=CHECK_WINDOW_END;
                    vcv_p_bit_status=TRUE;
                    break;

                case IFRAME_OK:
                    vcv_rx_state=CHECK_WINDOW_END;
                    break;

               /*L2IF1 fix*/
                case BAD_FRAME:
                   vcv_dte_to_char(DLE);
                   vcv_dte_to_char(CAN);
                   vcv_rx_status=VCV_ERROR;
                   vcv_error(ADD,0x45);
                   vcv_rx_state=SEND_DISC_GOTO_VOICE;
                   break;

                default:
                    /* Shouldn't get here */
                   while(1);
            }
            break;


        case CHECK_WINDOW_END:
            if (vcv_accept_vcv_request==FALSE)
            {
                if (vcv_utility_timer)
                {
                    break;    /* Timer active, do nothing */
                }
                else
                {
                    /* Timer has expired */
                    if (vcv_accept_vcv_request==FALSE)
                    {
                        vcv_rx_status=VCV_TIMEOUT;
                        vcv_rx_state=RETURN_TO_VOICE;
                        break;
                    }
                }
            }

            if (vcv_p_bit_status == TRUE)
            {
                /* This is the last frame of the window */
                if (vcv_dash_ssr_enabled)
                {
                    if (vcv_first_window_condition)
                    {
                        /*LMIF3 vcv_first_window_condition=FALSE;*/
                        if (Vr==0)
                        {
                            vcv_rx_state=SEND_UA;
                        }
                        else
                        {
                           /**LMIF3**/
                           vcv_first_window_condition=FALSE;
                           vcv_rx_state=CHECK_BUSY_RCVR;
                        }
                    }
                    else
                    {
                        vcv_rx_state=CHECK_BUSY_RCVR;
                    }
                }
                else
                {
                    /* -SSR was not enabled, go back to voice */
                    vcv_rx_state=RETURN_TO_VOICE;
                }
            }
            else
            {
                /* P-Bit was not set, another frame expected */
                vcv_rx_state=RX_FRAME;
            }
            break;

        case SEND_UA:
            modem_vcv_timer_delay(55);
            modem_config_vcv(TRANSMIT_MODE, vcv_data_rate[BURST_RATE]);
            vcv_line_init(HDLC_MODE, TRANSMIT_MODE, VV_HDLC_DATA_SIZE);
            rc=vcv_send_supervisory(UA, 0, Vr);
            vcv_rx_state=WAIT_ACK_COMPLETE;
            vcv_time_critical=FALSE;
            break;

        case CHECK_BUSY_RCVR:
            modem_vcv_timer_delay(100);

            modem_config_vcv(TRANSMIT_MODE, vcv_data_rate[BURST_RATE]);
            vcv_line_init(HDLC_MODE, TRANSMIT_MODE, VV_HDLC_DATA_SIZE);
            vcv_time_critical=FALSE;

            if (vcv_buffers_left < 9)
            {
                rc=vcv_send_supervisory(RNR, vcv_p_bit_status, Vr);
                vcv_send_frames_dte();
                vcv_rx_state=WAIT_ACK_COMPLETE;
            }
            else
            {
                rc=vcv_send_supervisory(RR, vcv_p_bit_status, Vr);
                vcv_rx_state=WAIT_ACK_COMPLETE;
            }
            break;

        case WAIT_ACK_COMPLETE:
               vcv_rx_state=RECEIVE_MI;

               if (vcv_dle_state==DLE_ETX)
               {
                  while (vcv_send_frames_dte()==TRUE);
                  while( vcv_dte_to_num() != 0 );

                  vcv_dte_init(0, vcv_dte_flow_control);

                  vcv_rx_state=INITIALIZE;
                  return(VCV_SWITCH_TO_TX);
               }
            break;

        case RETURN_TO_VOICE:
            vcv_time_critical=FALSE;
            rc=vcv_return_to_voice();
            if (rc==VCV_STAY)
            {
                break;
            }
            else
            {
                return_code=vcv_rx_status;
            }
            break;

        case CANCEL_RECEIVE:
            if (vcv_utility_timer)
            {
                break;
            }

            if (vcv_dte_to_num()==0)
            {
                vcv_dte_to_char(DLE);
                vcv_dte_to_char(EOT);
                vcv_rx_state=RETURN_TO_VOICE;
            }
            break;

        case SEND_DISC_GOTO_VOICE:
            modem_vcv_timer_delay(55);
            modem_config_vcv(TRANSMIT_MODE, vcv_data_rate[BURST_RATE]);
            vcv_line_init(HDLC_MODE, TRANSMIT_MODE, VV_HDLC_DATA_SIZE);

            rc=vcv_send_supervisory(DISC, 0, 0);
            vcv_rx_state=RETURN_TO_VOICE;
            break;

        default:
         /* Shouldn't get here */
         while(1);
    }

    return(return_code);
}

/*******************************************************************************
/
/   Routine: vcv_rx_mi
/
/   Author: RSA
/
/   Creation Date: 01/30/95
/
/   Description: State machine to control the reception of the Mode Indicator.
/                Checks for compatability of mode requested and also handle
/                DISC requests.
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -			Modifications			        -
/   -------------------------------------------------------------
/
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
void vcv_rx_mi()
{
    struct vcv_hdlc_packet *frame_addr;
    ubyte frame_type;

    switch(vcv_rx_window_state)
    {
        case INITIALIZE:
            if (vcv_switch_flag==TRUE )
            {
               vcv_switch_flag=FALSE;
            }
            else
            {
               modem_config_vcv(RECEIVE_MODE, V21CH2);
               vcv_line_init(HDLC_MODE, RECEIVE_MODE, VV_HDLC_DATA_SIZE);

               /* kick start the DCE by giving it the first receive buffer */
               vcv_line_rx_block((ubyte *)&vcv_buffer_array[vcv_head_index]);

/* RJM041996 */
               modem_fix_dsp();
            }

            /*L2TM5 fix */
            vcv_utility_timer=1500;
            vcv_rx_window_state=WAIT_MI;
            break;

        case WAIT_MI:
            while(vcv_tail_index==vcv_head_index)
            {
                if (vcv_tail_index==vcv_head_index )
                {
                    /* Check timer status */
                    if (vcv_utility_timer!=0)
                    {
                        /* Timer still running, do nothing */
                        process_wait();
                    }
                    else
                    {
                        /* Timer expired */
                        vcv_rx_window_state=INITIALIZE;
                        vcv_rx_state=RETURN_TO_VOICE;
                        vcv_error(ADD, 0x23);
                        break;
                    }
                }
            }

            /* Frame is present, get the frame type */
            frame_addr=&vcv_buffer_array[vcv_tail_index++];

            /* Check for queue wraparound */
            if (vcv_tail_index == VCV_HDLC_BUFFER_COUNT)
                vcv_tail_index=0;

            /* If IO had not problems process frame */
            if( frame_addr->status == 0 )
            {
               frame_type=frame_addr->data[0];
               switch(frame_type)
               {
                  case 0x10:
                     /* we got a modem or fax data request, reject */
                     vcv_rx_state=SEND_DISC_GOTO_VOICE;
                     vcv_rx_window_state=INITIALIZE;
                     vcv_rx_status=VCV_ERROR;
                     vcv_error(ADD,0xa1);
                     vcv_dte_to_char(DLE);
                     vcv_dte_to_char(CAN);
                     break;

                  case 0x02:
                     if (vcv_check_options(VCV_VOICEVIEW_MODE,
                                 frame_addr->data[1])==COMPATIBLE)
                     {
                           switch(frame_addr->data[1])
                           {
                              case 0x01:
                                 vcv_current_hispeed=V27TER_4800;
                                 break;

                              case 0x02:
                                 vcv_current_hispeed=V29_9600;
                                 break;

                              case 0x03:
                                 vcv_current_hispeed=V29_4800;
                                 break;

                              case 0x04:
                                 vcv_current_hispeed=V17_7200;
                                 break;

                              case 0x05:
                                 vcv_current_hispeed=V17_9600;
                                 break;

                              case 0x06:
                                 vcv_current_hispeed=V17_12000;
                                 break;

                              case 0x07:
                                 vcv_current_hispeed=V17_14400;
                                 break;

                              default:
                                 while(1);
                           }
                     }
                     else
                     {
                           vcv_rx_state=SEND_DISC_GOTO_VOICE;
                           vcv_rx_window_state=INITIALIZE;
                           break;
                     }

                     modem_config_vcv(RECEIVE_MODE, vcv_current_hispeed);
                     vcv_line_init(HDLC_MODE, RECEIVE_MODE, VV_HDLC_DATA_SIZE);

                     /* kick start the DCE by giving it the first receive buffer */
                     vcv_line_rx_block((ubyte *)&vcv_buffer_array[vcv_head_index]);

/* RJM041996 */
                     modem_fix_dsp();

                     vcv_rx_state=RX_FRAME;
                     vcv_cd_drop_time = 0;

                     while( !modem_vcv_check_CD() );  /* Wait for CD from remote */

                     vcv_utility_timer=VV_TIMER_T310;
                     vcv_rx_window_state=INITIALIZE;
                     break;

                  case 0x01:
                  case 0x03:
                     switch(frame_addr->data[1])
                     {
                           case 0x43:  /*DISC*/
                              /*L2IF3*/

                              if (vcv_recv_dle_eot == FALSE)
                              {
                                 vcv_dte_to_char(DLE);
                                 vcv_dte_to_char(CAN);
                              }

                              if (vcv_first_window_condition)  /*L2IF9A*/
                              {
                                 vcv_rx_status=VCV_ERROR;
                                 vcv_error(ADD,0x43);
                              }

                              vcv_rx_window_state=INITIALIZE;
                              vcv_rx_state=RETURN_TO_VOICE;
                              break;

                           case 0x01:
                              if (frame_addr->data[2]==0x01)
                              {
                                 /* RR Poll */
                                 vcv_rx_window_state=INITIALIZE;
                                 vcv_rx_state=CHECK_BUSY_RCVR;
                                 break;
                              }

                           default:
                              /*  Shouldn't get here  */
                              vcv_rx_status=VCV_ERROR;
                              vcv_error(ADD,0x23);
                              vcv_dte_to_char(DLE);
                              vcv_dte_to_char(CAN);
                              vcv_rx_state=SEND_DISC_GOTO_VOICE;
                              vcv_rx_window_state=INITIALIZE;
                              break;
                     }
                     break;

                  default:
                     vcv_rx_status=VCV_ERROR;
                     vcv_error(ADD,0x23);
                     vcv_dte_to_char(DLE);
                     vcv_dte_to_char(CAN);

                     /* we got a bad indicator or garbage */
                     vcv_rx_state=SEND_DISC_GOTO_VOICE;
                     vcv_rx_window_state=INITIALIZE;
                     break;
               }
            }
            break;

        default:
            /*  Shouldn't get here  */
            vcv_rx_status=VCV_ERROR;
            vcv_error(ADD,0x23);
            vcv_dte_to_char(DLE);
            vcv_dte_to_char(CAN);
            vcv_rx_state=SEND_DISC_GOTO_VOICE;
            vcv_rx_window_state=INITIALIZE;
            break;
    }
}

/*******************************************************************************
/
/   Routine: vcv_send_supervisory
/
/   Author: RSA
/
/   Creation Date: 01/30/95
/
/   Description: Builds & sends a supervisory frame
/
/   Input Parameters: None
/
/   Output Parameters: PACKET_SENT - packet was assembled and queued to tx.
/                      PACKET_NOT_SENT - no space in queue for packet to be
/                                        sent.
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -			Modifications			        -
/   -------------------------------------------------------------
/
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
ubyte vcv_send_supervisory(ubyte type, ubyte pfbit, ubyte nr_value)
{
    struct vcv_hdlc_packet *temp_packet;
    ubyte value;
    ubyte pf_mask;
    uword index=0;

    temp_packet = (struct vcv_hdlc_packet *)&vcv_buffer_array[vcv_head_index++];

    /* Check for queue wraparound */
    if (vcv_head_index == VCV_HDLC_BUFFER_COUNT)
        vcv_head_index=0;

    if (vcv_dte_check_cancel()==DLE_CAN)
    {
        type=DISC;
        vcv_dle_state=DLE_CAN;
    }

    if (temp_packet != NULL)
    {
        switch(type)
        {
            case RR:
                index=3;
                value=0x01;
                pf_mask = 0x01;
                break;

            case RNR:
                index=3;
                value=0x05;
                pf_mask = 0x01;
                break;

            case DISC:
                index=2;
                value=0x43;
                pf_mask = 0x10;
                break;

            case UA:
                index=2;
                value=0x63;
                pf_mask = 0x10;
                break;

            case UI:
                index=2;
                value=0x03;
                pf_mask = 0x10;
                break;

            default:
                /*  Shouldn't get here  */
                while(1);
        }

        /* Assemble Packet */
        temp_packet->count               = index;
        temp_packet->data[0]             = 0x01 | vcv_control_flag;
        temp_packet->data[1]             = value;
        temp_packet->data[2]             = nr_value<<1;

        switch (pfbit)
        {
            case P_ONE:
                temp_packet->data[index-1] |= pf_mask;
                break;

            case P_ZERO:
            default:
                /* Bits not set, do nothing */
                break;
        }

        /*
         * This code added because some 'spurious' frames seemed to
         * arrive when switching from V29 9600 to V21Ch2.  This could
         * be a DP problem or just the test modem sending some extra
         * garbage after the last frame flags.  At any rate, this
         * will discard any 'garbage' in the receive buffers and just
         * send the supervisory frame for the good frames.
         */
        if (vcv_head_index==0)
        {
            vcv_tail_index=VCV_HDLC_BUFFER_COUNT-1;
        }
        else
        {
            vcv_tail_index=vcv_head_index-1;
        }


        modem_vcv_timer_delay(70);
        vcv_tx_status=TRUE;

        /* Send the frame */
        vcv_line_tx_block((ubyte *)&vcv_buffer_array[vcv_tail_index]);

        /* Wait for IO code to TX entire Frame including CRC */
        while(vcv_tx_status);

        /* Add some propogation delay?? */
        modem_vcv_timer_delay(70);
        modem_vcv_transmitter(OFF);

        return(PACKET_SENT);
    }

    return(PACKET_NOT_SENT);
}

/*******************************************************************************
/
/   Routine: vcv_get_iframe
/
/   Author: RSA
/
/   Creation Date: 01/30/95
/
/   Description: Validates an I frame, sends to host
/
/   Input Parameters: None
/
/   Output Parameters: NO_FRAME  - no frame received.
/                      P_BIT_SET - frame has P-Bit set.
/                      IFRAME_OK - normal frame received.
/
/   Global Variables Changed:  vcv_rx_busy_cond
/
/   Users:
/
/   -------------------------------------------------------------
/   -			Modifications			        -
/   -------------------------------------------------------------
/
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
ubyte vcv_get_iframe()
{
    ubyte return_code;
    ubyte rc;
    ubyte last_Ns;
    ubyte temp;

    struct vcv_hdlc_packet *frame;

    return_code=IFRAME_OK;

    if (vcv_head_index==vcv_tail_index)
        return(NO_FRAME);

    /* There is a frame available */
    frame = &vcv_buffer_array[vcv_tail_index++];

    /* if at the end of the ring list then rotate to the top */
    if (vcv_tail_index == VCV_HDLC_BUFFER_COUNT)
        vcv_tail_index = 0;

    /* IF Line Io had a problem - ignore frame */
    if (frame->status != 0x00)
        return(NO_FRAME);

    /*L2IF1*/
    if (frame->count > 261)
      return(BAD_FRAME);

    /*L2IF2*/
    if (frame->count < 5)
      return(P_BIT_SET);

    /*L2IF3*/
    /* Check for a valid control field */
    temp=frame->data[0];
    if ((temp>3) || (temp ==0))
      return(P_BIT_SET);

#if 0
   LOOK INTO THIS FURTHER, NEEDED FOR CERTIFICATION?
    /* Make sure C/R bit is set */
    if ((temp & 0x02) != 0x02)
      return(P_BIT_SET);
#endif

    /* Check for P-Bit set */
    temp=frame->data[2];
    if ((temp & 0x01) == 0x01)
        return_code=P_BIT_SET;

    /* Save the Ns value */
    last_Ns = Ns;

    /* Extract the Ns */
    Ns = (frame->data[1] >> 1);

    /* If this is the frame we were expecting, queue it up if room */
    if (Ns == Vr)
    {
        if (vcv_rx_busy_cond==FALSE)
        {
            /* We're still accepting frames in this window */
            rc=vcv_out_queue(frame);
            if (rc==QUEUE_FULL)
            {
                /* No room to queue, reset index */
                vcv_rx_busy_cond=TRUE;
                vcv_tail_index--;
                Ns=last_Ns;
            }
            else
            {
                /* Frame put on queue */
                Vr=Vr+1;
                if (Vr==128)
                    Vr=0;
            }
        }
        else
        {
            /* No room to queue, reset index */
            vcv_tail_index--;
            Ns=last_Ns;
        }
    }
    return(return_code);
}


/*******************************************************************************
/
/   Routine: vcv_out_queue
/
/   Author: RSA
/
/   Creation Date: 01/30/95
/
/   Description: Puts an I frame on Queue to send to host
/
/   Input Parameters: None
/
/   Output Parameters: 0 - queue not full.
/                      QUEUE_FULL - queue is full.
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -			Modifications			        -
/   -------------------------------------------------------------
/
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
ubyte vcv_out_queue(struct vcv_hdlc_packet *frame)
{
    uword i;

    /* Check to see if there is room left for frame to go to DTE */
    if (vcv_buffers_left == 0)
        return(QUEUE_FULL);

    vcv_outq_head++;
    if (vcv_outq_head == VCV_HDLC_BUFFER_COUNT)
        vcv_outq_head=0;

    /* Copy frame contents into outgoing queue */
    vcv_outq_array[vcv_outq_head].status=frame->status;
    vcv_outq_array[vcv_outq_head].count=frame->count;

    for (i=0; i<frame->count; i++)
    {
        vcv_outq_array[vcv_outq_head].data[i]=frame->data[i];
    }

    vcv_buffers_left--;
    return(0);
}

/*******************************************************************************
/
/   Routine: vcv_send_frames_dte
/
/   Author: RSA
/
/   Creation Date: 01/30/95
/
/   Description: Takes frames off of outqueue
/
/   Input Parameters: None
/
/   Output Parameters:
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -			Modifications			        -
/   -------------------------------------------------------------
/
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
ubyte vcv_send_frames_dte()
{

    uword i,size;
    uword available;
    ubyte next;

    /* Dont send to dte if dte has not accepted the VoiceView request */
    if (vcv_accept_vcv_request==FALSE)
        return(FALSE);

    /* Do nothing if no data to send to DTE */
    if (vcv_outq_head==vcv_outq_tail)
        return(FALSE);

    next=vcv_outq_tail+1;
    if (next == VCV_HDLC_BUFFER_COUNT)
        next=0;

    /* Empty as much as possible, 1 frame at a time */
    while (vcv_outq_tail != vcv_outq_head)
    {
        available = vcv_dte_to_free();
        size = vcv_outq_array[next].count;

        if (size <=available)
        {
            /* Increment queue index */
            vcv_outq_tail++;

            /* Check for wrap */
            if (vcv_outq_tail == VCV_HDLC_BUFFER_COUNT)
                vcv_outq_tail=0;

            /* Send information contents (no CRC) to DTE */
            for (i=3; i<size-2; i++)
            {
                vcv_dte_to_char(vcv_outq_array[vcv_outq_tail].data[i]);
                if (vcv_dce_last_char==DLE)
                {
                    if( (vcv_outq_array[vcv_outq_tail].data[i]==ETX) ||
                        (vcv_outq_array[vcv_outq_tail].data[i]==ETB) )
                    {
                        vcv_dle_state=DLE_ETX;
                    }
                    else if (vcv_outq_array[vcv_outq_tail].data[i]==EOT)
                    {
                       vcv_recv_dle_eot = TRUE;
                    }

                    if (vcv_outq_array[vcv_outq_tail].data[i]==DLE)
                    {
                        vcv_outq_array[vcv_outq_tail].data[i]=0x00;
                    }
                }

                vcv_dce_last_char=vcv_outq_array[vcv_outq_tail].data[i];
            }

            /* Increment # of available queue slots */
            vcv_buffers_left++;
            vcv_rx_busy_cond = FALSE;
        }
        else
        {
            return(TRUE);
        }

        next=vcv_outq_tail+1;
        if (next == VCV_HDLC_BUFFER_COUNT)
           next=0;
    }

    return(TRUE);
}

/*******************************************************************************
/
/   Routine: vcv_return_to_voice
/
/   Author: RSA
/
/   Creation Date: 01/30/95
/
/   Description: Returns status of current transmission.
/
/   Input Parameters: None
/
/   Output Parameters: VCV_OK - transmission finsished.
/                      VCV_STAY - transmission still in progress.
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -			Modifications			        -
/   -------------------------------------------------------------
/
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
ubyte vcv_return_to_voice()
{
   uword num;

    num=vcv_dte_to_num();
    if ((vcv_head_index!=vcv_tail_index) || (vcv_tx_status==TRUE) || (num!=0))
    {
        return(VCV_STAY);
    }

    modem_vcv_timer_delay(500);

    return(VCV_OK);
}

/*******************************************************************************
/
/   Routine: vcv_dte_check_cancel
/
/   Author: RSA
/
/   Creation Date: 01/30/95
/
/   Description: Checks for host cancellation of data reception
/
/   Input Parameters: None
/
/   Output Parameters:
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -			Modifications			        -
/   -------------------------------------------------------------
/
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
ubyte vcv_dte_check_cancel()
{
    ubyte data_byte;

    /* Look for <DLE><CAN> from the DTE. Ignore <DLE><DLE> sequences */
    if (vcv_dte_from_num()!=0)
    {
        data_byte=vcv_dte_from_char();

        if (vcv_dte_last_char==DLE)
        {
            if (data_byte == CAN)
            {
                /* <DLE><CAN> sequence received */
                return(DLE_CAN);
            }

            if (data_byte == DLE)
            {
                /* <DLE><DLE> sequence, reset vcv_dte_last_char so that
                 * if a <CAN> is received, it will be ignored.
                 */
                vcv_dte_last_char=0x00;
                return(DLE_NONE);
            }
        }

        vcv_dte_last_char=data_byte;
    }
    return(DLE_NONE);
}

