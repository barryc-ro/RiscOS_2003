/****************************************************************************
/
/     Copyright 1996.
/     All Rights Reserved by:
/     RSA
/     110 Horizon Drive
/     Raleigh, NC  27615
/     (919) 846-7171
/
/
/  This document contains material confidential to RSA its contents must
/  not be revealed, used or disclosed to anyone or company with out
/  written permission by RSA.  The information contained herein is solely
/  for the use of RSA.
/
/  File:             v80_mn.c
/
/  Module Version:   1.00
/
/  Function:         This file contains the control code for V.80
/
/
/  Product:          Core 4.3
/
/
/  History:
/
/  Created:          07/31/1996
/
/      ---------------------------------------------------------
/      -         Modifications         -
/      ---------------------------------------------------------
/
/      Author & Date:   RSA
/      Description:
/      Reason:
/
*****************************************************************************/

extern void acu_v80_hangup(void);
extern void system_rcv_escape(void);


#include "v80_def.h"
#include "v80_pro.h"
#include "edf.dce_line"
#include "edf.dte"
#include "v80_mem.h"
#include "mt_def.h"
#include "acuiomem.h"

#if (FCLASS_80 == 1)

void V80_dte_to_indicate(ubyte);

void PrintMsg(char *);
void outchar(unsigned char);
void outhex( unsigned char data );
extern ubyte dce_tx_buffer[];
extern uword dce_tx_remove;
extern uword dce_tx_insert;

extern uword line_to_free(void);
extern uword dce_tx_count;
extern void  line_send();


#define TBUF_SIZE 0x2800


void buffer_dump(void)
{
}


void dump_dte_rx(void)
{
}

/******************************************************************************
/
/   Routine: V80_configure
/
/   Author : RSA
/
/   Creation Date: 07/31/1996
/
/   Description : this routine provides an interface used by the ACU to
/                input the +ESA parameters for V.80. V80 maintains the params
/                and provides them to the line upon detection of <EM> <MARK>
/                in the data stream.
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed:
/
/   Users:
/
/   -------------------------------------------------------------
/   -                 Modifications             -
/   -------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/   Reason:
/
******************************************************************************/

void V80_configure(ubyte trans_idle, ubyte framed_idle, ubyte framed_un_ov, \
    ubyte hd_auto, ubyte crc_type, ubyte nrzi_en, ubyte syn1, ubyte syn2)
{
    V80_trans_idle = trans_idle;
    V80_framed_idle = framed_idle;
    V80_framed_un_ov = framed_un_ov;
    V80_hd_auto = hd_auto;
    V80_crc_type = crc_type;
    V80_nrzi_en = nrzi_en;
    V80_syn1 = syn1;
    V80_syn2 = syn2;
    line_v80_configure(trans_idle, framed_idle, framed_un_ov, hd_auto, \
        crc_type, nrzi_en, syn1, syn2);

    dte_v80_configure(framed_un_ov);

}

/*******************************************************************************
/
/   Routine: V80_process_bg
/
/   Author : RSA
/
/   Creation Date: 07/31/1996
/
/   Description : this routine will perform the main background processing
/                for V.80. it is called by the master ACU tasking function.
/                this routine checks for in-band commands and control chars
/                in the data stream.
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/    Global Variables Changed:
/
/    Users:
/
/    -------------------------------------------------------------
/    -            Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void V80_process_bg(void)
{
   extern ubyte dce_flag_count;
   extern ubyte dte_flag_count;

   ubyte skip_dte = FALSE;
   ubyte skip_dce = FALSE;

   if (!V80_idle)
   {
      if (!v80_tx_timer)
      {
         V80_tx_frm_spacing_complete = TRUE;
      }

      V80_DCE_ch();
      V80_DTE_ch();

      if (V80_modem_status == RETRAINING || V80_modem_status == RENEGOTIATING)
      {
         if (!local_rtn_request && !remote_rtn_request)
         {
            remote_rtn_request = TRUE;
            if (V80_modem_status == RETRAINING)
            {
               V80_dte_to_indicate(EM_DTE_RTN);
            }
            else
            {
               V80_dte_to_indicate(EM_DTE_RRN);
            }
         }

      }

   }
}


/*******************************************************************************
/
/    Routine: V80_DTE_ch
/
/    Author : RSA
/
/    Creation Date: 07/31/1996
/
/    Description : process DTE char applying V80 requirements to data
/
/
/    Input Parameters: none
/
/    Output Parameters: none
/
/    Global Variables Changed:
/
/    Users:
/
/    -------------------------------------------------------------
/    -            Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void V80_DTE_ch(void)
{
   uword temp_word;

   uword xfer_cnt = 0;
   ubyte done = FALSE;
   extern ubyte dte_flag_count;

    ubyte temp_array[3];
    extern void line_to_block(ubyte*,ubyte);

   /*
    * while DTE has data for DCE and
    * DCE has room for this char
   */

   if (V80_flag_hunt == TRUE)
   {
      temp_word = line_get_flag_count();

      if ( temp_word != V80_flag_count )     /* flags received! */
      {
         line_hunt_complete();               /* inform line that flags have been detected */
         V80_flag_hunt = FALSE;
         V80_sub_mode = FSM;

      }
      return;
   }

    /* for MARK, FLAG, or EOT, wait for DCE buffer to send everything */
    if ( V80_wait_DCE_empty && v80_line_clear )
    {
         V80_wait_DCE_empty = FALSE;
        if ( !line_to_num() )               /* if DCE buffer is empty */
        {
            switch (V80_ch)
            {
                case (EM_DTE_MARK):
PrintMsg( "V80_DTE_MARK" );
                    V80_DTE_mark();
                    break;
                case (EM_DTE_FLAG):
PrintMsg( "DTE_FLAG" );
                    V80_DTE_flag();
                    break;
                case (EM_DTE_EOT):
PrintMsg( "V80_DTE_EOT" );
                    acu_v80_hangup();
                    break;
                case (EM_DTE_HUNT):
PrintMsg( "V80_DTE_HUNT" );
                    if (V80_sub_mode == FSM)
                    {
                        line_enter_hunt_mode();
                        line_from_clear();
                        dte_to_clear();
                        V80_flag_count = line_get_flag_count();
                        V80_flag_hunt = TRUE;
                    }
                    break;
                default:
                    /* big time error here */
                    break;
            }
        }

        /* exit now; do not transfer data */
        return;
    }

    if( V80_idle )
    {
      PrintMsg( "V80_idle = TRUE?" );
      return;
    }

    /* If no room to do anything, get out */
    if( line_to_free() <= V80_MAX_DCE_XLATE_BUF )
      return;

    if( !dte_from_num() )   /* TSM or FSM with no dte data */
    {
       dte_flag_count = 0;
    }

    if( V80_sub_mode == FSM )
    {
      /* If there is not enough to do for now, get out */
      if( (dte_flag_count == 0) && (dte_from_num() < 100) && (line_to_num() > 100) )
         return;

    }
    else /* handle TSM below */
    {
    }

    xfer_cnt = dte_from_num();
    temp_word = 0;

    while( xfer_cnt && !done )
    {
        {
            /* process each character from the DTE buffer */
            V80_ch = dte_from_char();
            xfer_cnt--;
            temp_word++;

            /* if last char was em and this is not flag we're in tsm */

            if ((V80_rcvd_EM_DTE == TRUE) &&  (V80_sub_mode == TSM))
            {
               switch ( V80_ch )
               {
                  case EM_DTE_FLAG:
                      if (line_to_num() != 0)
                      {
PrintMsg("tSm ");
                        PrintMsg( "WAITING" );
                        v80_purge_line();
                        v80_line_clear = FALSE;
                        return;
                      }
                      else
                      {
PrintMsg("TsM ");
                        V80_DTE_flag();

                        dte_flag_count--;
                        done = TRUE;
                        V80_rcvd_EM_DTE = FALSE;
                      }
                      return;
                  case EM_DTE_MARK:
                        break;


                  default:
PrintMsg("tsm and em_dte ");
                  }
               return;
            }

            /* end special case TSM processing */

            /* if this char is EM and
             * previous char was not EM set flag
            */
            if (( EM == ( V80_ch & V80_7BIT_MASK )) && ( V80_rcvd_EM_DTE == FALSE ))
            {
               V80_rcvd_EM_DTE = TRUE;
            }
            else
            {
               /* toggle flag back off */
               if (V80_flag_detected && V80_rcvd_EM_DTE && (V80_ch == EM_DTE_FLAG))
                  V80_flag_detected = TRUE;
               else
                  V80_flag_detected = FALSE;

               /* last char was EM, check this char
               * for valid V80 command.
               */
               if ( V80_rcvd_EM_DTE == TRUE )
               {
                V80_rcvd_EM_DTE = FALSE;

                switch ( V80_ch )
                {
                    case (EM_DTE_MARK):             /* begin TSM, when DCE buf is empty */
PrintMsg( "EM_DTE_MARK" );
                        if (line_to_num() != 0)
                        {
PrintMsg("wait dce");
                           v80_line_clear = FALSE;
                           v80_purge_line();
                        }
                        else
                        {
                           V80_DTE_mark();
                        }
                        return;

                    case (EM_DTE_FLAG):
                        if (V80_sub_mode == TSM)
                        {
                           PrintMsg( "Exiting TSM" );
                           if (line_to_num() != 0)
                           {
                              PrintMsg( "Wait!!!" );
                              v80_line_clear = FALSE;
                              v80_purge_line();
                              return;
                           }
                           else
                           {
                              V80_DTE_flag();

                              dte_flag_count--;
                              done = TRUE;
                           }
                        }
                        else  /* FSM processing for flags */
                        {
                           /* insert the FLAG into user data */
                           V80_DTE_flag();
                           dte_flag_count--;
                           done = TRUE;
                        }
                        break;

                    case (EM_DTE_ERR):              /* send abort */
PrintMsg( "EM_DTE_ERR" );
                        if ( V80_sub_mode == FSM )
                        {
                            temp_array[0] = EM;
                            temp_array[1] = ABORT;
                            line_to_block(&temp_array[0],2);
                        }
                        break;

                    case (EM_DTE_HUNT):             /* enter hunt mode */
PrintMsg( "EM_DTE_HUNT" );
                        if (line_to_num() != 0)
                        {
                           v80_line_clear = FALSE;
                           v80_purge_line();
                        }
                        else
                        {
                           if (V80_sub_mode == FSM)
                           {
                              line_enter_hunt_mode();
                              line_from_clear();
                              dte_to_clear();
                              V80_flag_count = line_get_flag_count();
                              V80_flag_hunt = TRUE;
                           }
                        }
                        break;

                    case (EM_DTE_RESUME):     /*  should never see this */
PrintMsg( "EM_DTE_RESUME" );
                        line_tx_resume();
                        break;


                    case (EM_DTE_EOT):        /* hang up when DCE buf is empty */
PrintMsg( "EM_DTE_EOT" );
                        acu_v80_hangup();

                        break;

                    case (EM_DTE_ECS):        /* goto online cmd state */
PrintMsg( "EM_DTE_ESC" );
                        V80_idle = TRUE;      /* stop v80 cmd processing */
                        system_rcv_escape();
                        break;

                    case (EM_DTE_RRN):        /* req. rate reneg */
PrintMsg( "EM_DTE_RRN" );
                        modem_renegotiate();
                        local_rtn_request = TRUE;
                        break;

                    case (EM_DTE_RTN):        /* req. retrain */
PrintMsg( "EM_DTE_RTN" );
                        modem_retrain();
                        local_rtn_request = TRUE;
                        break;

                    case (EM_DTE_RATE):       /* set max tx, rx rate */
PrintMsg( "EM_DTE_RATE" );
                        V80_inband_rate_chg = TRUE;
                        V80_rate = 0;
                        break;

                    /*
                     * unsupported half duplex V34 commands
                    */

                    case (EM_DTE_CTL):        /* go to ctl chan not supported */
                    case (EM_DTE_RTNC):       /* ctl chan retrain unsupported */
PrintMsg( "EM_DTE_CTL/RTNC" );

                        break;

                    case (EM_99):
                    case (EM):                /* this is <em> <em> sequence which is invalid */
                        return;               /* eat one, leaving the em detected flag set */

                    default:                  /* tx isr handles <em> <char> so send it on to dce tx buf */
						      temp_array[0] = EM;
						      temp_array[1] = V80_ch;
      						line_to_block(&temp_array[0],2);
                        break;
                }
               }
               else
               {
                if ( V80_inband_rate_chg )    /* this ch is max tx or rx rate */
                {
                    if ( V80_rate == 0 )      /*  tx / rx rate data now avail.*/
                        V80_rate = V80_ch;

                    else
                    {
                        /* take the lowest of max rates for tx and rx */
                        if ( V80_rate > V80_ch )
                            V80_rate = V80_ch;

                        V80_inband_rate_chg = FALSE;
                        V80_rate &= V80_RATE_MASK;
#if MODEM_X2_MODE == 1
                        modem_set_rate_seq( ( 1 << V80_rate ) - 1, FALSE,FALSE);
#else
                        modem_set_rate_seq( ( 1 << V80_rate ) - 1, FALSE);
#endif
                    }
                }
                else                          /* not cmd or rate */
					 {
						  temp_array[0] = V80_ch;
						  line_to_block(&temp_array[0],1);
					 }
               }
            }

            if( !xfer_cnt )
               done = TRUE;

            if( line_to_free() <= V80_MAX_DCE_XLATE_BUF )
               done = TRUE;
        }

    }

}


/*******************************************************************************
/
/	Routine: V80_DCE_ch
/
/    Author : RSA
/
/    Creation Date: 07/31/1996
/
/    Description : process DTE char applying V80 requirements to data
/
/
/    Input Parameters: none
/
/    Output Parameters: none
/
/    Global Variables Changed:
/
/    Users:
/
/    -------------------------------------------------------------
/    -            Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void V80_DCE_ch(void)
{
   ubyte ch;
   uword i, temp_word = 0;
   uword xfer_cnt = 0;

   ubyte done = FALSE;
   extern ubyte dce_flag_count;

   /* if retrain or renegotiation just ended,
    * send <EM><rate> indication
   */

   if ((dte_to_free() > V80_RATE_DATA_SPACE_REQD) &&
       (V80_new_rate_data_valid != FALSE))
   {
PrintMsg( "DTE RATE" );

      dte_to_char(EM);
      dte_to_char(EM_DTE_RATE);
      dte_to_char(V80_tx_rate);
      dte_to_char(V80_rx_rate);
      V80_new_rate_data_valid = FALSE;
      local_rtn_request = FALSE;
      remote_rtn_request = FALSE;
   }


    if( V80_idle )
    {
      PrintMsg( "V80_idle = TRUE??" );
      return;
    }

    /* If no room to do anything, get out */
    if( dte_to_free() <= V80_MAX_DTE_XLATE_BUF )
      return;

    if( V80_sub_mode == FSM )
    {
        /* If there is not enough to do for now, get out */
        if( (dce_flag_count == 0) && (line_from_num() < 100) && (dte_to_num() > 100) )
         {
            return;
         }
    }
    else
    {
        /* IF there is no data in TSM, get out */
        if( !line_from_num() )
            return;
    }

    temp_word = 0;
    xfer_cnt = line_from_num();   /* we should exit because of flag received, rather than max data xfer */

    while( xfer_cnt && !done )
    {
        /* process each character from the DCE buffer */

        ch = line_from_char();
        xfer_cnt--;
        temp_word++;

        dte_to_char(ch);        /* send the character */

        if( V80_sub_mode == FSM )
        {
            if( ch == EM )
            {
               /* process each character from the DCE buffer */
               ch = line_from_char();
               xfer_cnt--;
               temp_word++;

               /* send the character */
               dte_to_char(ch);

               if( ch == FLAG )
               {
                  done = TRUE;
                  if (dce_flag_count == 0)
                  {
                     PrintMsg("cnt=0 ");
                     outhex(temp_word >> 8);
                     outhex(temp_word);
                  }
                  else
                  {
                     dce_flag_count--;
                  }
               }
            }

            if( xfer_cnt == 0 ) /* ending flag not received yet */
            {
               done = TRUE;
            }
        }
        else      /* TSM */
        {
            if( !line_from_num() )
               done = TRUE;
        }


        if( dte_to_free() <= V80_MAX_DTE_XLATE_BUF )
        {
            done = TRUE;
        }
    }
}



/*******************************************************************************
/
/    Routine: V80_init
/
/	Author : RSA
/
/	Creation Date: 07/31/1996
/
/	Description : entry point used by the ACU module to initialize the V.80
/
/
/	Input Parameters: none
/
/	Output Parameters: none
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void V80_init(void)
{
int i;

/* test dte_rx_int ch sniff buffer */
/* initialize the buffer */

   tbuf_in = 0;

   tbuf_ch = 0;
   tbuf[i] = tbuf_ch;

   for (i = 0; i < TBUF_SIZE; i++)
   {
      tbuf[tbuf_in] = 0;

      tbuf_in++;
      if (tbuf_in == TBUF_SIZE)
         tbuf_in = 0;
   }
    V80_sub_mode = TSM;
    V80_inband_detc = TRUE;
    V80_rcvd_EM_DTE = FALSE;
    V80_rcvd_EM_DCE = FALSE;
    V80_tx_rate = 0;
    V80_rx_rate = 0;
    V80_new_rate_data_valid = FALSE;

    V80_flag_hunt = 0;
    V80_flag_count = 0;

    V80_flag_detected = FALSE;
    V80_first_frame = FALSE;
    local_rtn_request = FALSE;
    remote_rtn_request = FALSE;

    /* set to idle, let v80_resume() call enable */
    V80_idle = TRUE; /* on training V8 uses this buffer, ACU will enable us */

    V80_modem_status = 0;

    line_from_clear();  /* ensure V8 data is expunged */
}


/*******************************************************************************
/
/	Routine: V80_modem_state_ind
/
/	Author : RSA
/
/	Creation Date: 07/31/1996
/
/	Description : interface routine used by Modem Task
/                    to provide retrain info
/
/
/	Input Parameters: type
/
/	Output Parameters: none
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void V80_modem_state_ind(ubyte type, ubyte tx, ubyte rx)
{

   /* Unless we're active, we don't care */
   if( V80_idle )
      return;

   switch (type)
   {
      case CONNECTED:

         /* if the DSP is currently retraining */
         if (V80_modem_status == RETRAINING)
         {
            V80_modem_status = CONNECTED;
            V80_new_rate_data_valid = RETRAINING;
         }
         /* if the DSP is currently renegotiating */
         else if (V80_modem_status == RENEGOTIATING)
         {
            V80_modem_status = CONNECTED;
            V80_new_rate_data_valid = RENEGOTIATING;
         }

         /* update the connected speed */
        if ( tx <= MT_BPS2400 )
        {
            V80_tx_rate = MT_BPS2400 + V80_XLATE_RATE1;
            V80_rx_rate = V80_tx_rate;
        }
        else if (tx <= MT_BPS19200 )
        {
            V80_tx_rate = tx + V80_XLATE_RATE1;
            V80_rx_rate = V80_tx_rate;
        }
        else
        {
            V80_tx_rate = tx + V80_XLATE_RATE2;
            V80_rx_rate = V80_tx_rate;
        }

        break;

      case IDLE:
         /* if the setting is not cleared after a cleardown */
         if (V80_new_rate_data_valid != FALSE)
            V80_new_rate_data_valid = FALSE;
         V80_modem_status = type;
         break;

      case RETRAINING:
      case RENEGOTIATING:
      default:
         V80_modem_status = type;
         break;
   }
}




/*******************************************************************************
/
/	Routine: V80_dte_send_EM
/
/	Author : RSA
/
/	Creation Date: 07/31/1996
/
/	Description :
/
/
/	Input Parameters: hi_bit_flag determines if 0x99 or 0x19 is DM char
/
/	Output Parameters: none
/
/	Global Variables Changed:
/
/   ASSUMES: room is available in destination
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void V80_dte_send_EM( ubyte hi_bit_flag )
{
    if ( hi_bit_flag == V80_EM_99 )       /* send 0x99 as DM char */
	    dte_to_char(EM | HI_BIT);
    else
	    dte_to_char(EM);                  /* send 0x19 as DM char */

}



/*******************************************************************************
/
/	Routine: V80_dce_send_EM
/
/	Author : RSA
/
/	Creation Date: 07/31/1996
/
/	Description :
/
/
/	Input Parameters: hi_bit_flag determines if 0x99 or 0x19 is DM char
/
/	Output Parameters: none
/
/	Global Variables Changed:
/
/   ASSUMES: room is a
/	Input Parameters: hi_bit_flag determines if 0x99 or 0x19 is DM char
/
/	Output Parameters: none
/
/	Global Variables Changed:
/
/   ASSUMES: room is available in destination
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void V80_dce_send_EM( ubyte hi_bit_flag )
{
    ubyte temp_array[2];
    extern void line_to_block(ubyte*,ubyte);

    if ( hi_bit_flag == V80_EM_99 )
		 temp_array[0] = (EM | HI_BIT);
    else
		 temp_array[0] = EM;

    line_to_block(&temp_array[0],1);
}


/*******************************************************************************
/
/	Routine: V80_conf_inband_detc
/
/	Author : RSA
/
/	Creation Date: 07/31/1996
/
/	Description : entry point used by ACU parser to enable and disable the
/                   processing if in-band commands when entering SAM using
/                   +ES= command.
/
/
/	Input Parameters: none
/
/	Output Parameters: none
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void V80_conf_inband_detc(ubyte condition)
{
    if (condition == FALSE)
        V80_inband_detc = FALSE;
    else
        V80_inband_detc = TRUE;
    V80_init();
}


/*******************************************************************************
/
/	Routine: V80_idle_state
/
/	Author : RSA
/
/	Creation Date: 08/18/1996
/
/	Description : used to set the V.80 module to an idle state while
/                in online command mode
/
/	Input Parameters: none
/
/	Output Parameters: none
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void V80_resume(void)
{
   V80_idle = FALSE;
}


/*******************************************************************************
/
/	Routine: V80_DTE_mark
/
/	Author : RSA
/
/	Creation Date: 08/18/1996
/
/	Description : mark detected in data stream, DCE buffer is empty
/                in online command mode
/
/	Input Parameters: none
/
/	Output Parameters: none
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void V80_DTE_mark(void)
{
    ubyte temp_array[3];
    extern void line_to_block(ubyte*,ubyte);

    if ( V80_sub_mode == FSM )
    {
        V80_sub_mode = TSM;
        line_enter_sub_mode(TSM);
        dte_set_sub_mode(TSM);
    }

   if (V80_sub_mode == TSM)
   {
      temp_array[0] = EM;
      temp_array[1] = MARK;
      line_to_block(&temp_array[0],2);
   }
}


/*******************************************************************************
/
/	Routine: V80_DTE_flag
/
/	Author : RSA
/
/	Creation Date: 08/18/1996
/
/	Description : flag detected in data stream, DCE buffer is empty
/
/
/	Input Parameters: none
/
/	Output Parameters: none
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void V80_DTE_flag(void)
{
    ubyte temp_array[3];
    extern void line_to_block(ubyte*,ubyte);

    if (V80_sub_mode == TSM)
    {
        line_enter_sub_mode(FSM);
        dte_set_sub_mode(FSM);
        V80_flag_count = line_get_flag_count();
        V80_flag_hunt = TRUE;
    }
    else
    {
      /* discard back-to-back <EM><FLAG>s */
      if (V80_first_frame == FALSE)
      {
         /* discard the opening flag of the first frame */
         V80_first_frame = TRUE;
         V80_flag_detected = FALSE;
      }
      if (V80_flag_detected == FALSE)
      {

         temp_array[0] = EM;
         temp_array[1] = FLAG;
         line_to_block(&temp_array[0],2);

         V80_flag_detected = TRUE;
      }
    }
}


/*******************************************************************************
/
/	Routine: V80_rcv_escape
/
/	Author : RSA
/
/	Creation Date: 08/18/1996
/
/	Description : flag detected in data stream, DCE buffer is empty
/
/
/	Input Parameters: none
/
/	Output Parameters: none
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void V80_rcv_escape(void)
{
}

/*******************************************************************************
/
/	Routine: V80_start_hunt
/
/	Author : RSA
/
/	Creation Date: 11/07/1996
/
/	Description : Abort received from line, enter hunt mode, but don't
/                trash the data already in transit to the DTE; there's
/                probably an abort (<EM><mark>) on the end of it.
/
/
/	Input Parameters: none
/
/	Output Parameters: none
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void V80_start_hunt(void)
{
   V80_flag_count = line_get_flag_count();
   V80_flag_hunt = TRUE;
}

/*******************************************************************************
/
/	Routine: V80_dte_to_indicate
/
/	Author : RSA
/
/	Creation Date: 11/07/1996
/
/	Description : Indicate to the DTE that the remote has requested a RTN/RRN
/
/
/	Input Parameters: none
/
/	Output Parameters: none
/
/	Global Variables Changed:
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void V80_dte_to_indicate(ubyte type)
{
   int i;
   dte_to_char(EM);
   dte_to_char(type);

   PrintMsg( "V80_dte_to_indicate()" );
}


#else

void V80_conf_inband_detc(ubyte condition)
{
}

void V80_process_bg(void)
{
}

void V80_init(void)
{
}

void V80_configure(ubyte trans_idle, ubyte framed_idle, ubyte framed_un_ov, \
    ubyte hd_auto, ubyte crc_type, ubyte nrzi_en, ubyte syn1, ubyte syn2)
{
}

void V80_modem_state_ind(ubyte type, ubyte tx, ubyte rx)
{
}

void V80_idle_state(ubyte idle_en)
{
}

void V80_resume(void)
{
}

#endif
