/****************************************************************************
/
/   Copyright, 1991,1992,1993,1994.       All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.  The information contained herein is solely
/   for the use of RSA.
/
/   File: f1x00cl.c
/
/   Module Version: 4.03
/
/   Function: This file contains the command execution code for the
/             FAX class 1 (TIA/EIA 578).
/
/   Product: Class 1 FAX Module
/
/   History: fx00cl1.c 3.98
/
/   Created: 2/11/93
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
****************************************************************************/
#include "sys_def.h"

#include "f1x_def.h"
#include "f1x_mem.h"
#include "f1x_pro.h"

ubyte fax1_bg(void);
ubyte fax1_configure_ftm(void);
ubyte fax1_execute_ftm(void);
ubyte fax1_complete_ftm(void);
ubyte fax1_configure_frm(void);
ubyte fax1_execute_frm(void);
ubyte fax1_complete_frm(void);
ubyte fax1_configure_fth(void);
ubyte fax1_execute_fth(void);
ubyte fax1_complete_fth(void);
ubyte fax1_configure_frh(void);
ubyte fax1_execute_frh(void);
ubyte fax1_complete_frh(void);

/******************************************************************************
/
/   Routine: fax1_bg
/
/   Author: RSA
/
/   Creation Date: 01/13/92
/
/   Description: This routine will process the FAX class 1 background functions.
/
/   Input Parameters: none
/
/   Output Parameters: ubyte    return code
/                      0        Stay online
/                      1        Stay in the parse state
/                      2        Go to parse and respond with
/                               OK message.
/                      3        Go to parse and respond with
/                               NO CARRIER message.
/                      4        Go to parse and respond with
/                               ERROR message.
/                      5        Go to hangup connection
/                      6        Go to online
/                      7        Go to parse and respond with
/                               FCERROR message.
/
/   Global Variables Changed: none
/
/   Users: fax_bg()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax1_bg(void)
{
    ubyte    return_code;

     /* if +FXX command transitioned to online */
    if (fax1_configure_dte)
    {
        /* chack the flow control direction */
        switch (fax1_configure_dte)
        {
            case MODEM_TO_APP_FLOW:
                fax_dte_init(fax1_dte_baud, NO_FLOW_CONTROL, fax1_flow_control);
                break;
            case APP_TO_MODEM_FLOW:
                fax_dte_init(fax1_dte_baud, fax1_flow_control, NO_FLOW_CONTROL);
                break;
        }
        /* keep track of the DTE port configuration */
        fax1_dte_configured = TRUE;
        /* clear the configuration flag */
        fax1_configure_dte = FALSE;
    }

    switch (fax1_state)
    {



        case IDLE:
            return_code = STAY_PARSE;
            break;

        case CONFIGURE_FTM:
            return_code = fax1_configure_ftm();
            break;

        case EXECUTE_FTM:
            return_code = fax1_execute_ftm();
            break;

        case COMPLETE_FTM:
            return_code = fax1_complete_ftm();
            break;

        case CONFIGURE_FRM:
            return_code = fax1_configure_frm();
            break;

        case EXECUTE_FRM:
            return_code = fax1_execute_frm();
            break;

        case COMPLETE_FRM:
            return_code = fax1_complete_frm();
            break;

        case CONFIGURE_FTH:
            return_code = fax1_configure_fth();
            break;

        case EXECUTE_FTH:
            return_code = fax1_execute_fth();
            break;

        case COMPLETE_FTH:
            return_code = fax1_complete_fth();
            break;

        case CONFIGURE_FRH:
            return_code = fax1_configure_frh();
            break;

        case EXECUTE_FRH:
            return_code = fax1_execute_frh();
            break;

        case COMPLETE_FRH:
            return_code = fax1_complete_frh();
            break;
    }

    return (return_code);
}

/******************************************************************************
/
/   Routine: fax1_configure_ftm
/
/   Author: RSA
/
/   Creation Date: 01/13/92
/
/   Description: This routine will configure the modem for fax data
/                transmit processing.
/
/   Input Parameters: none
/
/   Output Parameters: ubyte    return code
/                      0        Stay online
/                      1        Stay in the parse state
/                      2        Go to parse and respond with
/                               OK message.
/                      3        Go to parse and respond with
/                               NO CARRIER message.
/                      4        Go to parse and respond with
/                               ERROR message.
/                      5        Go to hangup connection
/                      6        Go to online
/                      7        Go to parse and respond with
/                               FCERROR message.
/
/   Global Variables Changed: fax1_sub_state, fax1_last_data_null,
/                             fax1_received_dte_data, fax1_last_data_dle,
/                             fax1_msec1_timer, fax1_sub_state, fax1_state
/
/   Users: fax1_bg()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax1_configure_ftm(void)
{

    switch (fax1_sub_state)
    {
        case INITIALIZE:
            /* if +FRH was active */
            if (fax1_line_configured)
            {
                /* terminate line side configurations */
                modem_terminate_link();
                fax_line_reset();
                /* line side not configured */
                fax1_line_configured = FALSE;
            }
            /* reset data orianted flags */
            fax1_last_data_null = FALSE;
            fax1_received_dte_data = FALSE;
            fax1_last_data_dle = FALSE;
            /* delay before transmission to allow the remote side to configure */
            fax1_msec1_timer = DELAY_TO_CONFIGURE_TX;
            fax1_sub_state = WAIT_TO_CONFIGURE;
            break;

        case WAIT_TO_CONFIGURE:
            /* if delay complete */
            if (!fax1_msec1_timer)
            {
                /* respond CONNECT to the APP before configuring the line */
                fax1_respond_string(fax1_response_mode == NUMERIC ?
                                    (ubyte *)NUMERIC_CONNECT_STRING :
                                    (ubyte *)VERBOSE_CONNECT_STRING);
                /* configure the line I/O to transmit page data */
                fax_line_init(DATA_MODE, TX_MODE, CONTROL_PACKET_SIZE);
                /* configure the data pump for the correct transmit modulation */
                modem_fax_configure(fax1_mod, TX_MODE);
                /* keep track of the line configuration */
                fax1_line_configured = TRUE;
                fax1_sub_state = WAIT_FOR_CTS;
            }
            break;

        case WAIT_FOR_CTS:
            /* if data pump completed training sequence & ready for data */
            if (modem_dp_CTS_status())
                fax1_state = EXECUTE_FTM;
            break;
    }

    return(STAY_ONLINE);
}

/******************************************************************************
/
/   Routine: fax1_execute_ftm
/
/   Author: RSA
/
/   Creation Date: 01/13/92
/
/   Description: This routine will transmit fax data to the
/                DCE.  It will filter the data stream from the DTE, and
/                remove all character pairs beginning with DLE.    It will
/                recognize DLE ETX as the stream terminator and reinsert
/                a single DLE when DLE DLE character pair is recognized.
/                If the transmit buffers are empty and the last
/                character transmitted is a NULL, this routine will
/                continue to transmit NULLs until the DTE sends more
/                data or 5 seconds elapses.  Fax data transmission is
/                terminated when DLE ETX is received or when the
/                transmit buffers are empty and last char was NOT
/                a NULL.
/
/   Input Parameters: none
/
/   Output Parameters: ubyte    return code
/                      0        Stay online
/                      1        Stay in the parse state
/                      2        Go to parse and respond with
/                               OK message.
/                      3        Go to parse and respond with
/                               NO CARRIER message.
/                      4        Go to parse and respond with
/                               ERROR message.
/                      5        Go to hangup connection
/                      6        Go to online
/                      7        Go to parse and respond with
/                               FCERROR message.
/
/   Global Variables Changed: fax1_received_dte_data, fax1_msec1_timer,
/                             fax1_last_data_dle, fax1_state, fax1_sub_state,
/                             fax1_last_data_null, fax1_msec2_timer,
/                             fax1_dte_configured
/
/   Users: fax1_bg()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax1_execute_ftm(void)
{
    ubyte    ch;

    /* while data from the APP and room in the DCE buffer */
    while (fax_dte_from_num() && fax_line_to_free())
    {
        /* data received from the APP, allow for timeout */
        fax1_received_dte_data = TRUE;
        /* delay allowed for the APP to underrun before command termination */
        fax1_msec1_timer = DELAY_BETWEEN_DTE_CHARS;
        /* get a character from the DTE I/O */
        ch = fax_dte_from_char();

        /* if the last DTE character was a DLE, check the command */
        if (fax1_last_data_dle)
        {
            /* last character received is no longer a DLE */
            fax1_last_data_dle = FALSE;

            /* if command is terminate complete data transmission */
            if (ch==ETX)
            {
                /* setup to complete transmission of the DCE I/O data */
                fax1_state = COMPLETE_FTM;
                fax1_sub_state = FLUSH_LINE;
                return(STAY_ONLINE);
            }
            /* if DLE DLE */
            else  if (ch == DLE)
                 /* send only one DLE */
                fax_line_to_char(ch);
        }
        /* if DLE character */
        else  if (ch == DLE)
        {
            /* setup to interpret the next character as a command */
            fax1_last_data_dle = TRUE;
            fax1_last_data_null = FALSE;
        }
        /* if the character is a zero */
        else if (ch == NULL)
        {
            /* setup to allow for up to 5 seconds of APP underrun */
            /* the DCE I/O will idle the line with NULL characters upon underrun */
            fax1_last_data_null = TRUE;
            fax1_msec2_timer = DELAY_5SECOND_DTE;
            /* the NULL character is sent as normal data */
            fax_line_to_char(ch);
        }
        /* just a normal character */
        else
        {
            /* reset the NULL indication flag */
            fax1_last_data_null = FALSE;
            /* send the character */
            fax_line_to_char(ch);
        }
    }

    /* if the last character received from the APP was a NULL */
    if (fax1_last_data_null)
    {
        /* if the 5 second timer has not expired */
        if (fax1_msec2_timer)
            /* return from function and stay in command execution */
            return(STAY_ONLINE);
        else
        {
            /* the 5 second timer has expired, so terminate the command */
            /* clean up the line configurations */
            modem_terminate_link();
            fax_line_reset();
            /* keep track of the line configuration */
            fax1_line_configured = FALSE;
            /* release the DTE port */
            fax_dte_reset();
            /* keep track of the DTE port configuration */
            fax1_dte_configured = FALSE;
            /* the FAX will idle waitting for the next command */
            fax1_state = IDLE;
            /* the 5 second NULL underrun is considered an error */
            return(GOTO_PARSE_ERROR);
        }
    }

    /* if data has been received from the APP and it has underrun and */
    /* the DCE I/O buffer has emptied */
    if (fax1_received_dte_data && !fax1_msec1_timer && !fax_line_to_num())
    {
        /* setup to allow the data to propagate through the link */
        /* before terminating the modulation */
        fax1_msec1_timer = DELAY_DATA_PROPAGATE;
        fax1_state = COMPLETE_FTM;
        fax1_sub_state = COMPLETE;
    }

    return(STAY_ONLINE);
}

/******************************************************************************
/
/   Routine: fax1_complete_ftm
/
/   Author: RSA
/
/   Creation Date: 01/13/92
/
/   Description: This routine will assure the complete transmission
/                of data in the line I/O buffer and terminate the
/                transmit data mode.
/
/   Input Parameters: none
/
/   Output Parameters: ubyte    return code
/                      0        Stay online
/                      1        Stay in the parse state
/                      2        Go to parse and respond with
/                               OK message.
/                      3        Go to parse and respond with
/                               NO CARRIER message.
/                      4        Go to parse and respond with
/                               ERROR message.
/                      5        Go to hangup connection
/                      6        Go to online
/                      7        Go to parse and respond with
/                               FCERROR message.
/
/   Global Variables Changed: fax1_msec1_timer, fax1_sub_state, fax1_state,
/                             fax1_dte_configured
/
/   Users: fax1_bg()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax1_complete_ftm(void)
{
    switch (fax1_sub_state)
    {
        case FLUSH_LINE:
            /* if the DCE buffer is empty */
            if (!fax_line_to_num())
            {
                /* setup to allow the data to propagate through the link */
                /* before terminating the modulation */
                fax1_msec1_timer = DELAY_DATA_PROPAGATE;
                fax1_sub_state = COMPLETE;
            }
            break;

        case COMPLETE:
            /* if the propagation time has expired */
            if (!fax1_msec1_timer)
            {
                /* clean up the line configurations */
                modem_terminate_link();
                fax_line_reset();
                /* keep track of the line configuration */
                fax1_line_configured = FALSE;
                /* release the DTE port */
                fax_dte_reset();
                /* keep track of the DTE port configuration */
                fax1_dte_configured = FALSE;
                /* the FAX will idle waitting for the next command */
                fax1_state = IDLE;
                /* respond OK to the APP and wait for the next command */
                return(GOTO_PARSE_OK);
            }
            break;
    }

    return(STAY_ONLINE);
}

/******************************************************************************
/
/   Routine: fax1_configure_frm
/
/   Author: RSA
/
/   Creation Date: 01/13/92
/
/   Description: This routine will configure the modem for fax data
/                receive processing.
/
/   Input Parameters: none
/
/   Output Parameters: ubyte    return code
/                      0        Stay online
/                      1        Stay in the parse state
/                      2        Go to parse and respond with
/                               OK message.
/                      3        Go to parse and respond with
/                               NO CARRIER message.
/                      4        Go to parse and respond with
/                               ERROR message.
/                      5        Go to hangup connection
/                      6        Go to online
/                      7        Go to parse and respond with
/                               FCERROR message.
/
/   Global Variables Changed: fax1_sub_state, fax1_sub_state, fax1_state,
/                             fax1_dte_configured
/
/   Users: fax1_bg()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax1_configure_frm(void)
{
    ubyte    ch;

    switch (fax1_sub_state)
    {
        case INITIALIZE:
            /* if the +FRH command was active */
            if (fax1_line_configured)
            {
                /* clean up the line configurations */
                modem_terminate_link();
                fax_line_reset();
                /* keep track of the line configuration */
                fax1_line_configured = FALSE;
            }
            /* configure the I/O to receive the page data */
            fax_line_init(DATA_MODE, RX_MODE, CONTROL_PACKET_SIZE);
            /* configure the data pump for the proper receive modulation */
            modem_fax_configure(fax1_mod, RX_MODE);
            /* keep track of the line configuration */
            fax1_line_configured = TRUE;
            /* wait for the data pump to indicate carrier reception */
            fax1_sub_state = WAIT_FOR_CD;
            break;

        case WAIT_FOR_CD:
            /* if carrier is detected */
            if (ch = modem_check_CD())
            {
                /* if V.21 ch2 detected */
                if (ch == 2)
                {
                    /* clean up the line configurations */
                    modem_terminate_link();
                    fax_line_reset();
                    /* keep track of the line configuration */
                    fax1_line_configured = FALSE;
                    /* release the DTE port */
                    fax_dte_reset();
                    /* keep track of the DTE port configuration */
                    fax1_dte_configured = FALSE;
                    /* the FAX will idle waitting for the next command */
                    fax1_state = IDLE;
                    /* respond FCERROR to the APP and wait for the next command */
                    return(GOTO_PARSE_FCERROR);
                }

                /* respond CONNECT to the APP */
                fax1_respond_string(fax1_response_mode == NUMERIC ?
                                    (ubyte *)NUMERIC_CONNECT_STRING :
                                    (ubyte *)VERBOSE_CONNECT_STRING);
                fax1_state = EXECUTE_FRM;
            }
            /* carrier not detected */
            else
            {
                /* remove any extraneous character collected due to DP clocks */
                while (fax_line_from_num() > DATA_CHARS_IN_DCE)
                    fax_line_from_char();
                /* look for an abort character from the APP */
                while (fax_dte_from_num())
                {
                    /* get the character */
                    ch = fax_dte_from_char();
                    /* if it's not a flow control character */
                    if (ch != DC1 && ch != DC3)
                    {
                        /* clean up the line configurations */
                        modem_terminate_link();
                        fax_line_reset();
                        /* keep track of the line configuration */
                        fax1_line_configured = FALSE;
                        /* release the DTE port */
                        fax_dte_reset();
                        /* keep track of the DTE port configuration */
                        fax1_dte_configured = FALSE;
                        /* the FAX will idle waitting for the next command */
                        fax1_state = IDLE;
                        /* respond OK to the APP and wait for the next command */
                        return(GOTO_PARSE_OK);
                    }
                }
            }
            break;
    }

    return(STAY_ONLINE);
}

/******************************************************************************
/
/   Routine: fax1_execute_frm
/
/   Author: RSA
/
/   Creation Date: 01/13/92
/
/   Description: This routine will receive fax data from the
/                DCE and route it to the DTE. This will occure until
/                the data pump carrier detect is lost. Any non flow
/                control characters from the DTE will cause a
/                termination of the receive mode.
/
/   Input Parameters: none
/
/   Output Parameters: ubyte    return code
/                      0        Stay online
/                      1        Stay in the parse state
/                      2        Go to parse and respond with
/                               OK message.
/                      3        Go to parse and respond with
/                               NO CARRIER message.
/                      4        Go to parse and respond with
/                               ERROR message.
/                      5        Go to hangup connection
/                      6        Go to online
/                      7        Go to parse and respond with
/                               FCERROR message.
/
/   Global Variables Changed: fax1_state, fax1_sub_state, fax1_dte_configured,
/                             fax1_dte_configured
/
/   Users: fax1_bg()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax1_execute_frm(void)
{
    ubyte ch;

    /* while carrier is still being detected, data in the line receive buffer */
    /* and room for two characters in the DTE transmit buffer */
    while (modem_check_CD() && fax_line_from_num() && fax_dte_to_free() > 1)
    {
        /* get a character from the DCE buffer */
        ch = fax_line_from_char();
        /* send it to the APP */
        fax_dte_to_char(ch);
        /* if it was a DLE */
        if (ch == DLE)
            /* send another DLE */
            fax_dte_to_char(ch);

        /* look for an abort character from the APP */
        while (fax_dte_from_num())
        {
            ch = fax_dte_from_char();
            /* flow control characters don't count */
            if (ch != DC1 && ch != DC3)
            {
                /* terminate the line side configurations */
                modem_terminate_link();
                fax_line_reset();
                /* keep track of the configuration state */
                fax1_line_configured = FALSE;
                /* terminate the DTE port */
                fax_dte_reset();
                fax1_dte_configured = FALSE;
                /* sit in idle waitting for the next command */
                fax1_state = IDLE;
                /* respond with OK and wait for the next command */
                return(GOTO_PARSE_OK);
            }
        }
    }

    /* look for an abort character from the APP */
    while (fax_dte_from_num())
    {
        ch = fax_dte_from_char();
        /* flow control characters don't count */
        if (ch != DC1 && ch != DC3)
        {
            /* terminate the line side configurations */
            modem_terminate_link();
            fax_line_reset();
            /* keep track of the configuration state */
            fax1_line_configured = FALSE;
            /* terminate the DTE port */
            fax_dte_reset();
            fax1_dte_configured = FALSE;
            /* sit in idle waitting for the next command */
            fax1_state = IDLE;
            /* respond with OK and wait for the next command */
            return(GOTO_PARSE_OK);
        }
    }

    /* has the carrier been lost */
    if (!modem_check_CD())
    {
        /* terminate the line side configurations */
        modem_terminate_link();
        fax_line_reset();
        /* keep track of the configuration state */
        fax1_line_configured = FALSE;
        /* finish routing the presently received data */
        fax1_state = COMPLETE_FRM;
        fax1_sub_state = FLUSH_LINE;
    }

    return(STAY_ONLINE);
}

/******************************************************************************
/
/   Routine: fax1_complete_frm
/
/   Author: RSA
/
/   Creation Date: 01/13/92
/
/   Description: This routine will complete the transmission of the
/                received data to the DTE, and then append it with a DLE ETX.
/
/   Input Parameters: none
/
/   Output Parameters: ubyte    return code
/                      0        Stay online
/                      1        Stay in the parse state
/                      2        Go to parse and respond with
/                               OK message.
/                      3        Go to parse and respond with
/                               NO CARRIER message.
/                      4        Go to parse and respond with
/                               ERROR message.
/                      5        Go to hangup connection
/                      6        Go to online
/                      7        Go to parse and respond with
/                               FCERROR message.
/
/   Global Variables Changed: fax1_state, fax1_sub_state, fax1_dte_configured
/
/   Users: fax1_bg()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax1_complete_frm(void)
{
    ubyte    ch;

    switch (fax1_sub_state)
    {
        case FLUSH_LINE:
            /* while there's still data in the DCE buffer and root in the DTE */
            while (fax_line_from_num() && fax_dte_to_free() > 1)
            {
                /* get a character from the DCE buffer */
                ch = fax_line_from_char();
                /* send it to the DTE buffer */
                fax_dte_to_char(ch);
                /* if the character was a DLE */
                if ( ch == DLE )
                    /* send another one */
                    fax_dte_to_char(ch);

                /* look for an abort character from the APP */
                while (fax_dte_from_num())
                {
                    ch = fax_dte_from_char();
                    /* flow control characters don't count */
                    if (ch != DC1 && ch != DC3)
                    {
                        /* the line side has already been terminated */
                        /* release the DTE port */
                        fax_dte_reset();
                        fax1_dte_configured = FALSE;
                        /* respond OK and wait for the next command */
                        fax1_state = IDLE;
                        return(GOTO_PARSE_OK);
                    }
                }
            }

            /* look for an abort character */
            while (fax_dte_from_num())
            {
                ch = fax_dte_from_char();
                /* flow control characters don't count */
                if (ch != DC1 && ch != DC3)
                {
                    /* the line side has already been terminated */
                    /* release the DTE port */
                    fax_dte_reset();
                    fax1_dte_configured = FALSE;
                    /* respond OK and wait for the next command */
                    fax1_state = IDLE;
                    return(GOTO_PARSE_OK);
                }
            }

            /* if the DCE buffer has been emptied */
            if (!fax_line_from_num())
                /* wait for room in the DTE buffer to send the DLE ETX */
                fax1_sub_state = WAIT_DLE_ETX;
            break;

        case WAIT_DLE_ETX:
            /* if there's room for two characters */
            if (fax_dte_to_free() > 1)
            {
                /* terminate the data streem with DLE ETX */
                fax_dte_to_char(DLE);
                fax_dte_to_char(ETX);
                /* move to a state waitting for the DTE buffer to be emptied */
                fax1_sub_state = FLUSH_DTE;
            }

            /* look for an abort character from the APP */
            while (fax_dte_from_num())
            {
                ch = fax_dte_from_char();
                /* flow control characters don't cause an abort */
                if (ch != DC1 && ch != DC3)
                {
                    /* release the DTE port */
                    fax_dte_reset();
                    fax1_dte_configured = FALSE;
                    /* respond with OK and wait for the next command */
                    fax1_state = IDLE;
                    return(GOTO_PARSE_OK);
                }
            }
            break;

        case FLUSH_DTE:
            /* if all the characters have cleared the DTE port */
            if (!fax_dte_to_num())
            {
                /* release the DTE port */
                fax_dte_reset();
                fax1_dte_configured = FALSE;
                fax1_state = IDLE;
                return(GOTO_PARSE_NO_CARRIER);
            }

            /* look for an abort character */
            while (fax_dte_from_num())
            {
                ch = fax_dte_from_char();
                /* flow control characters don't count */
                if (ch != DC1 && ch != DC3)
                {
                    /* release the DTE port */
                    fax_dte_reset();
                    fax1_dte_configured = FALSE;
                    /* respond with OK and wait for the next AT command */
                    fax1_state = IDLE;
                    return(GOTO_PARSE_OK);
                }
            }
            break;
    }

    return(STAY_ONLINE);
}

/******************************************************************************
/
/   Routine: fax1_configure_fth
/
/   Author: RSA
/
/   Creation Date: 01/13/92
/
/   Description: This routine will configure the modem for fax HDLC
/                transmit processing.
/
/   Input Parameters: none
/
/   Output Parameters: ubyte    return code
/                      0        Stay online
/                      1        Stay in the parse state
/                      2        Go to parse and respond with
/                               OK message.
/                      3        Go to parse and respond with
/                               NO CARRIER message.
/                      4        Go to parse and respond with
/                               ERROR message.
/                      5        Go to hangup connection
/                      6        Go to online
/                      7        Go to parse and respond with
/                               FCERROR message.
/
/   Global Variables Changed: fax1_buffer_ptr, fax1_buffer_ptr->count,
/                             fax1_data_ptr, fax1_received_dte_data,
/                             fax1_last_data_dle, fax1_msec1_timer,
/                             fax1_sub_state, fax1_state
/
/   Users: fax1_bg()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax1_configure_fth(void)
{

    switch (fax1_sub_state)
    {
        case INITIALIZE:
            /* if the +FRH command is active */
            if (fax1_line_configured)
            {
                /* terminate the configurations */
                modem_terminate_link();
                fax_line_reset();
                fax1_line_configured = FALSE;
            }

            /* get the address of a buffer for transmission */
            fax1_buffer_ptr = &fax1_buffer_array[0];
            /* reset the count to zero */
            fax1_buffer_ptr->count = 0;
            /* get a pointer the data area */
            fax1_data_ptr = fax1_buffer_ptr->data;
            /* setup a flag indicating no data received */
            fax1_received_dte_data = FALSE;
            /* no DLE received from the APP */
            fax1_last_data_dle = FALSE;
            /* delay before configuring to transmit to allow remote to setup */
            fax1_msec1_timer = DELAY_TO_CONFIGURE_TX;
            fax1_sub_state = WAIT_TO_CONFIGURE;
            break;

        case WAIT_TO_CONFIGURE:
            /* has the delay to configure timer expired */
            if (!fax1_msec1_timer)
            {
                /* configure the line side with the commanded modulation */
                modem_fax_configure(fax1_mod, TX_MODE);
                fax_line_init(HDLC_MODE, TX_MODE, CONTROL_PACKET_SIZE);
                /* keep track of the configuration */
                fax1_line_configured = TRUE;
                /* wait for the data pump to indicate its readiness to transmit */
                fax1_sub_state = WAIT_FOR_CTS;
            }
            break;

        case WAIT_FOR_CTS:
            /* has the data pump completed its training sequence */
            if (modem_dp_CTS_status())
            {
                /* respond to the APP with CONNECT */
                fax1_respond_string(fax1_response_mode == NUMERIC ?
                                    (ubyte *)NUMERIC_CONNECT_STRING :
                                    (ubyte *)VERBOSE_CONNECT_STRING);
                /* timeout not receiving any data in 5 seconds */
                fax1_msec2_timer = DELAY_5SECOND_DTE;
                /* make sure to send 1 second of flags before the packet */
                fax1_msec3_timer = DELAY_1SECOND_FLAGS;
                fax1_state = EXECUTE_FTH;
            }
            break;
    }

    return(STAY_ONLINE);
}

/******************************************************************************
/
/   Routine: fax1_execute_fth
/
/   Author: RSA
/
/   Creation Date: 01/13/92
/
/   Description: This routine will transmit HDLC data frames to the
/                DCE.  It will filter the data stream from the DTE,
/                and remove all character pairs beginning with DLE.
/                It will recognize DLE ETX as the stream terminator
/                and reinsert a single DLE when DLE DLE character pairs
/                are recognized.  When the DTE transmit buffer is empty
/                or a DLE ETX is received, this routine will send the
/                HDLC frame to the DCE.
/
/   Input Parameters: none
/
/   Output Parameters: ubyte    return code
/                      0        Stay online
/                      1        Stay in the parse state
/                      2        Go to parse and respond with
/                               OK message.
/                      3        Go to parse and respond with
/                               NO CARRIER message.
/                      4        Go to parse and respond with
/                               ERROR message.
/                      5        Go to hangup connection
/                      6        Go to online
/                      7        Go to parse and respond with
/                               FCERROR message.
/
/   Global Variables Changed: fax1_msec1_timer, fax1_last_data_dle,
/                             fax1_state, fax1_sub_state, fax1_data_ptr,
/                             fax1_buffer_ptr->count, fax1_received_dte_data
/
/   Users: fax1_bg()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax1_execute_fth(void)
{
    ubyte    ch;

    /* while there are characters in the DTE buffer */
    while (fax_dte_from_num())
    {
        /* delay allowed for the APP to underrun before command termination */
        fax1_msec1_timer = DELAY_BETWEEN_DTE_CHARS;
        /* get a character from the DTE buffer */
        ch = fax_dte_from_char();

        /* if the last character read was a DLE */
        if (fax1_last_data_dle)
        {
            /* indicate DLE command not active */
            fax1_last_data_dle = FALSE;

            /* if DLE ETX sequence */
            if (ch == ETX)
            {
                /* if data was not received from the APP */
                if (!fax1_received_dte_data)
                {
                    /* make sure the previous packet propagate accross the link */
                    fax1_msec1_timer = DELAY_HDLC_PROPAGATE;
                    fax1_state = COMPLETE_FTH;
                    fax1_sub_state = COMPLETE;
                    /* bypass the upcomming code */
                    return(STAY_ONLINE);
                }

                /* make sure 1 second of flags has been sent */
                fax1_state = COMPLETE_FTH;
                fax1_sub_state = WAIT_FOR_FLAGS;
                return(STAY_ONLINE);
            }
            /* if DLE DLE */
            else  if (ch == DLE)
            {
                /* put only one DLE in the buffer */
                *fax1_data_ptr++ = ch;
                /* add 1 to the count */
                fax1_buffer_ptr->count++;
                /* data for the current packet has been received */
                fax1_received_dte_data = TRUE;
            }
        }
        /* if DLE character */
        else  if (ch == DLE)
            /* setup to receive the DLE command sequence */
            fax1_last_data_dle = TRUE;
        /* this is just a plain character */
        else
        {
            /* put the character in the packet */
            *fax1_data_ptr++ = ch;
            /* add 1 to the count */
            fax1_buffer_ptr->count++;
            /* data for the current packet has been received */
            fax1_received_dte_data = TRUE;
        }
    }

    /* if the 5 second timer expired and no data was received */
    if (!fax1_msec2_timer && !fax1_received_dte_data)
    {
        /* terminate line side configurations */
        modem_terminate_link();
        fax_line_reset();
        /* keep track of configuration */
        fax1_line_configured = FALSE;
        /* release the DTE port */
        fax_dte_reset();
        /* keep track of DTE port configuration */
        fax1_dte_configured = FALSE;
        /* respond with ERROR and wait for the next AT command */
        fax1_state = IDLE;
        return(GOTO_PARSE_ERROR);
    }

    /* if the APP has underrun and data was received */
    if (!fax1_msec1_timer && fax1_received_dte_data)
    {
        /* make sure 1 second of flags has been sent before the packet */
        fax1_state = COMPLETE_FTH;
        fax1_sub_state = WAIT_FOR_FLAGS;
    }

    return(STAY_ONLINE);
}

/******************************************************************************
/
/   Routine: fax1_complete_fth
/
/   Author: RSA
/
/   Creation Date: 01/13/92
/
/   Description: This routine will allow the minimum number of flags
/                to be transmitted. It will then initiate the
/                transmission of the HDLC packet with CRC. If this is
/                a final frame, then a delay period of time is allowed
/                for the data to propagate before terminatting the
/                connection. This is followed with a return to idle
/                with OK. If it is not a final, then the code is
/                reconfigured for another packet and a CONNECT message
/                is returned.
/
/   Input Parameters: none
/
/   Output Parameters: ubyte    return code
/                      0        Stay online
/                      1        Stay in the parse state
/                      2        Go to parse and respond with
/                               OK message.
/                      3        Go to parse and respond with
/                               NO CARRIER message.
/                      4        Go to parse and respond with
/                               ERROR message.
/                      5        Go to hangup connection
/                      6        Go to online
/                      7        Go to parse and respond with
/                               FCERROR message.
/
/   Global Variables Changed: fax1_final_frame, fax1_tx_complete,
/                             fax1_sub_state, fax1_msec1_timer, fax1_buffer_ptr,
/                             fax1_buffer_ptr->count, fax1_data_ptr,
/                             fax1_received_dte_data, fax1_last_data_dle,
/                             fax1_msec2_timer, fax1_msec3_timer, fax1_state
/
/   Users: fax1_bg()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax1_complete_fth(void)
{
    switch (fax1_sub_state)
    {
        case WAIT_FOR_FLAGS:
            /* has the 1 second timer elapsed */
            if (!fax1_msec3_timer)
            {
                /* is the packet the last in the current transfer */
                fax1_final_frame = fax1_buffer_ptr->data[1] & FINAL_FRAME_MASK ?
                                   TRUE : FALSE;
                /* reset the completion flag */
                fax1_tx_complete = FALSE;
                /* call th DCE I/O to transmit the packet */
                fax_line_tx_block((ubyte *)fax1_buffer_ptr);
                fax1_sub_state = WAIT_TX_COMPLETE;
            }
            break;

        case WAIT_TX_COMPLETE:
            /* if the transmission is complete */
            if (fax1_tx_complete)
                /* if it was the final packet */
                if (fax1_final_frame)
                {
                    /* setup timer to allow for the packet to propagate */
                    fax1_msec1_timer = DELAY_HDLC_PROPAGATE;
                    fax1_sub_state = COMPLETE;
                }
                else
                {
                    /* get a empty packet for the next transmission */
                    fax1_buffer_ptr = &fax1_buffer_array[0];
                    /* reset the character count */
                    fax1_buffer_ptr->count = 0;
                    /* get a pointer to the first data location */
                    fax1_data_ptr = fax1_buffer_ptr->data;
                    /* no data has been received from the APP as of yet */
                    fax1_received_dte_data = FALSE;
                    /* reset the DLE indication flag */
                    fax1_last_data_dle = FALSE;
                    /* respond CONNECT to the APP */
                    fax1_respond_string(fax1_response_mode == NUMERIC ?
                                        (ubyte *)NUMERIC_CONNECT_STRING :
                                        (ubyte *)VERBOSE_CONNECT_STRING);
                    /* allow 5 seconds for the first data byte before timeout */
                    fax1_msec2_timer = DELAY_5SECOND_DTE;
                    /* setup to transmit another HDLC packet */
                    fax1_state = EXECUTE_FTH;
                }
            break;

        case COMPLETE:
            /* if the propagate timer has expired */
            if (!fax1_msec1_timer)
            {
                /* terminate the line side configurations */
                modem_terminate_link();
                fax_line_reset();
                fax1_line_configured = FALSE;
                /* release the DTE port */
                fax_dte_reset();
                fax1_dte_configured = FALSE;
                /* respond OK and wait for the next AT command */
                fax1_state = IDLE ;
                return(GOTO_PARSE_OK);
            }
            break;
    }

    return(STAY_ONLINE);
}

/******************************************************************************
/
/   Routine: fax1_configure_frh
/
/   Author: RSA
/
/   Creation Date: 01/13/92
/
/   Description: This routine will configure the modem for fax HDLC
/                receive processing.
/
/   Input Parameters: none
/
/   Output Parameters: ubyte    return code
/                      0        Stay online
/                      1        Stay in the parse state
/                      2        Go to parse and respond with
/                               OK message.
/                      3        Go to parse and respond with
/                               NO CARRIER message.
/                      4        Go to parse and respond with
/                               ERROR message.
/                      5        Go to hangup connection
/                      6        Go to online
/                      7        Go to parse and respond with
/                               FCERROR message.
/
/   Global Variables Changed: fax1_sub_state, fax1_state, fax1_head_index,
/                             fax_tail_index, fax1_sub_state
/
/   Users: fax1_bg()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax1_configure_frh(void)
{
    ubyte    ch;

    switch (fax1_sub_state)
    {
        case INITIALIZE:
            /* if already executing the +FRH command */
            if (fax1_line_configured)
            {
                /* if no packets received since last +FRH command, and */
                /* data carrier has not been lost */
                if (fax1_head_index == fax1_tail_index && !modem_check_CD())
                {
                    /* no more packets to be received, terminate +FRH config. */
                    /* terminate line side */
                    modem_terminate_link();
                    fax_line_reset();
                    fax1_line_configured = FALSE;
                    /* terminate DTE side */
                    fax_dte_reset();
                    fax1_dte_configured = FALSE;
                    fax1_state = IDLE;
                    /* respond NO CARRIER since carrier was lost */
                    return(GOTO_PARSE_NO_CARRIER);
                }
                /* packet was received since last +FRH */
                else
                {
                    /* indicate CONNECT to the APP */
                    fax1_respond_string(fax1_response_mode == NUMERIC ?
                                        (ubyte *)NUMERIC_CONNECT_STRING :
                                        (ubyte *)VERBOSE_CONNECT_STRING);
                    /* setup to route the received packet to the APP */
                    fax1_state = EXECUTE_FRH;
                }
            }
            /* new execution of a +FRH command */
            else
            {
                /* configure the data pump after the I/O is ready */
                modem_fax_configure(fax1_mod, RX_MODE);
                /* configure the line side to receive an HDLC packet */
                fax_line_init(HDLC_MODE, RX_MODE, CONTROL_PACKET_SIZE);
                /* reset the buffer pool indexes */
                fax1_head_index = 0;
                fax1_tail_index = 0;
                /* kick start the DCE by giving it the first receive buffer */
                fax_line_rx_block((ubyte *)&fax1_buffer_array[0]);
                /* set the flag indication of the setup */
                fax1_line_configured = TRUE;
                /* wait for carrier and firt flag */
                fax1_sub_state = WAIT_FOR_CD;
            }
            break;

        case WAIT_FOR_CD:
            if (modem_check_CD() && fax_line_flag())
            {
                /* carrier has not been lost */
                fax1_lost_CD = FALSE;
                /* respond CONNECT to the APP */
                fax1_respond_string(fax1_response_mode == NUMERIC ?
                                    (ubyte *)NUMERIC_CONNECT_STRING :
                                    (ubyte *)VERBOSE_CONNECT_STRING);
                /* transition to receiving an HDLC packet */
                fax1_state = EXECUTE_FRH;
            }
            else
            {
                /* look for an abort character from the APP */
                while (fax_dte_from_num())
                {
                    ch = fax_dte_from_char();
                    /* flow control characters don't abort */
                    if (ch != DC1 && ch != DC3)
                    {
                        /* terminate the line side configurations */
                        modem_terminate_link();
                        fax_line_reset();
                        fax1_line_configured = FALSE;
                        /* release the DTE port */
                        fax_dte_reset();
                        fax1_dte_configured = FALSE;
                        fax1_state = IDLE;
                        /* respond with OK to the APP */
                        return(GOTO_PARSE_OK);
                    }
                }
            }
            break;
    }

    return(STAY_ONLINE);
}

/******************************************************************************
/
/   Routine: fax1_execute_frh
/
/   Author: RSA
/
/   Creation Date: 01/13/92
/
/   Description: This routine will receive fax HDLC packets from the
/                DCE. Once a packet is found, a new state will be
/                entered which will route the packet to the DTE.
/                Any non flow control characters from the DTE or a
/                loss of carrier will cause a termination of the
/                receive mode.
/
/   Input Parameters: none
/
/   Output Parameters: ubyte    return code
/                      0        Stay online
/                      1        Stay in the parse state
/                      2        Go to parse and respond with
/                               OK message.
/                      3        Go to parse and respond with
/                               NO CARRIER message.
/                      4        Go to parse and respond with
/                               ERROR message.
/                      5        Go to hangup connection
/                      6        Go to online
/                      7        Go to parse and respond with
/                               FCERROR message.
/
/   Global Variables Changed: fax1_buffer_ptr, fax1_head_index, fax1_data_ptr,
/                             fax1_sub_state, fax1_state, fax1_sub_state
/
/   Users: fax1_bg()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax1_execute_frh(void)
{
    ubyte ch;

    /* if a packet has been received */
    if (fax1_head_index != fax1_tail_index)
    {
        /* get the address of the received packet */
        fax1_buffer_ptr = &fax1_buffer_array[fax1_head_index++];
        /* if the last packet in the pool, reset the index */
        if (fax1_head_index == HDLC_BUFFER_COUNT)
            fax1_head_index = 0;
        /* get a pointer to the data area */
        fax1_data_ptr = fax1_buffer_ptr->data;
        /* transition to sending the packet to the APP */
        fax1_state = COMPLETE_FRH;
        fax1_sub_state = FLUSH_LINE;
        return(STAY_ONLINE);
    }

    /* look for an abort packet from the APP */
    while (fax_dte_from_num())
    {
        ch = fax_dte_from_char();
        if (ch != DC1 && ch != DC3)
        {
            /* terminate the line side */
            modem_terminate_link();
            fax_line_reset();
            fax1_line_configured = FALSE;
            /* terminate dte side */
            fax_dte_reset();
            fax1_dte_configured = FALSE;
            fax1_state = IDLE;
            /* respond OK to the APP */
            return(GOTO_PARSE_OK);
        }
    }

    /* if carrier is lost */
    if (!modem_check_CD())
    {
        /* if first indication of lost carrier */
        if (!fax1_lost_CD)
        {
            /* indicate detection of lost carrier */
            fax1_lost_CD = TRUE;
            /* allow time for the I/O to process the received packet */
            fax1_msec1_timer = DELAY_IO_PROPEGATE;
        }
        /* if timer has expired */
        else if (!fax1_msec1_timer)
        {
            /* no packet being processed, so terminate */
            modem_terminate_link();
            fax_line_reset();
            fax1_line_configured = FALSE;
            fax_dte_reset();
            fax1_dte_configured = FALSE;
            fax1_state = IDLE;
            /* respond NO CARRIER to the APP and wait for the next AT command */
            return(GOTO_PARSE_NO_CARRIER);
        }
    }
    else
        /* reset indication of lost carrier */
        fax1_lost_CD = FALSE;

    return(STAY_ONLINE);
}

/******************************************************************************
/
/   Routine: fax1_complete_frh
/
/   Author: RSA
/
/   Creation Date: 01/13/92
/
/   Description: This routine will transmit the received HDLC packet
/                to the DTE, append it with a DLE ETX. If there were
/                any I/O errors incountered in the packet reception,
/                an ERROR response is sent to the DTE. Otherwise, an
/                OK response is sent.
/
/   Input Parameters: none
/
/   Output Parameters: ubyte    return code
/                      0        Stay online
/                      1        Stay in the parse state
/                      2        Go to parse and respond with
/                               OK message.
/                      3        Go to parse and respond with
/                               NO CARRIER message.
/                      4        Go to parse and respond with
/                               ERROR message.
/                      5        Go to hangup connection
/                      6        Go to online
/                      7        Go to parse and respond with
/                               FCERROR message.
/
/   Global Variables Changed: fax1_buffer_ptr->count, fax1_data_ptr
/                             fax1_sub_state, fax1_state, fax1_sub_state
/
/   Users: fax1_bg()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax1_complete_frh(void)
{
    ubyte    ch;

    switch (fax1_sub_state)
    {
        case FLUSH_LINE:
            /* while there's more data in the packet and room in the DTE buffer */
            while (fax1_buffer_ptr->count && fax_dte_to_free() > 1)
            {
                /* decrement the packet character count */
                fax1_buffer_ptr->count--;
                /* get the next data character */
                ch = *fax1_data_ptr++;
                /* send it to the APP */
                fax_dte_to_char(ch);
                /* if its a DLE */
                if (ch == DLE)
                    /* send another DLE */
                    fax_dte_to_char(ch);

                /* look for an abort from the APP */
                while (fax_dte_from_num())
                {
                    ch = fax_dte_from_char();
                    if (ch != DC1 && ch != DC3)
                    {
                        /* terminate the line configurations */
                        modem_terminate_link();
                        fax_line_reset();
                        fax1_line_configured = FALSE;
                        /* release the DTE port */
                        fax_dte_reset();
                        fax1_dte_configured = FALSE;
                        fax1_state = IDLE;
                        /* respond OK to the APP */
                        return(GOTO_PARSE_OK);
                    }
                }

            }

            /* look for an abort from the APP */
            while (fax_dte_from_num())
            {
                ch = fax_dte_from_char();
                if (ch != DC1 && ch != DC3)
                {
                    /* terminate the line configurations */
                    modem_terminate_link();
                    fax_line_reset();
                    fax1_line_configured = FALSE;
                    /* release the DTE port */
                    fax_dte_reset();
                    fax1_dte_configured = FALSE;
                    fax1_state = IDLE;
                    /* respond OK to the APP */
                    return(GOTO_PARSE_OK);
                }
            }

            /* if no more data in the packet to send */
            if (!fax1_buffer_ptr->count)
                fax1_sub_state = WAIT_DLE_ETX;

            break;

        case WAIT_DLE_ETX:
            /* if there's room in the DTE buffer */
            if (fax_dte_to_free() > 1)
            {
                /* terminate the data streem with DLE ETX */
                fax_dte_to_char(DLE);
                fax_dte_to_char(ETX);
                /* make sure all the data in the DTE I/O is sent */
                fax1_sub_state = FLUSH_DTE;
            }

            /* look for an abort character from the APP */
            while (fax_dte_from_num())
            {
                ch = fax_dte_from_char();
                /* flow control characters cann't abort */
                if (ch != DC1 && ch != DC3)
                {
                    /* terminate line side configurations */
                    modem_terminate_link();
                    fax_line_reset();
                    fax1_line_configured = FALSE;
                    /* give up the DTE port */
                    fax_dte_reset();
                    fax1_dte_configured = FALSE;
                    fax1_state = IDLE;
                    /* send an OK to the APP and wait for the next AT command */
                    return(GOTO_PARSE_OK);
                }
            }
            break;

        case FLUSH_DTE:
            /* if all the data has cleared the DTE port */
            if (!fax_dte_to_num())
            {
                /* release the DTE port */
                fax_dte_reset();
                fax1_dte_configured = FALSE;
                fax1_state = IDLE;
                /* if the packet status is non-zero the respond with ERROR */
                if (fax1_buffer_ptr->status)
                    return(GOTO_PARSE_ERROR);
                else
                    /* resepond with OK (i.e. packet received correctly) */
                    return(GOTO_PARSE_OK);
            }

            /* look for an abort */
            while (fax_dte_from_num())
            {
                /* get possible abort character */
                ch = fax_dte_from_char();
                /* if not a flow control character */
                if (ch != DC1 && ch != DC3)
                {
                    /* terminate the line side */
                    modem_terminate_link();
                    fax_line_reset();
                    fax1_line_configured = FALSE;
                    /* release the DTE port */
                    fax_dte_reset();
                    fax1_dte_configured = FALSE;
                    fax1_state = IDLE;
                    /* respond with OK */
                    return(GOTO_PARSE_OK);
                }
            }
            break;
    }

    return(STAY_ONLINE);
}

