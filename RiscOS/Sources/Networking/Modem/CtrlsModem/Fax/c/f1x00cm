/****************************************************************************
/
/   Copyright, 1991,1992,1993,1994.       All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.  The information contained herein is solely
/   for the use of RSA.
/
/   File: f1x00cm.c
/
/   Module Version: 4.03
/
/   Function: This file contains the command execution code for the
/             FAX class 1 (TIA/EIA 578).
/
/   Product: Class 1 FAX Module
/
/   History: fx00cmd1.c 3.98
/
/   Created: 2/11/93
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
****************************************************************************/
#include "sys_def.h"

#include "f1x_def.h"
#include "f1x_mem.h"
#include "f1x_pro.h"

#define FAX1_FTS_CAPABILITY     "\r\n0-255\r\n"
#define FAX1_FRS_CAPABILITY     "\r\n0-255\r\n"
#define FAX1_FTM96_CAPABILITY   "\r\n24,48,72,96\r\n"
#define FAX1_FTM144_CAPABILITY  "\r\n24,48,72,73,74,96,97,98,121,122,145,146\r\n"
#define FAX1_FRM96_CAPABILITY   "\r\n24,48,72,96\r\n"
#define FAX1_FRM144_CAPABILITY  "\r\n24,48,72,73,74,96,97,98,121,122,145,146\r\n"
#define FAX1_FTH_CAPABILITY     "\r\n3\r\n"
#define FAX1_FRH_CAPABILITY     "\r\n3\r\n"

ubyte fax1_execute_command(uword, ubyte *, ubyte **);
void fax1_store_string(ubyte *, ubyte **);

/******************************************************************************
/
/   Routine: fax1_execute_command
/
/   Author: RSA
/
/   Creation Date: 2/12/93
/
/   Description: This routine is called from the FAX parser to execute
/                a FAX class 1 578 command.
/
/   Input Parameters: uword     command
/                               FAX1_FTS_COMMAND        1
/                               FAX1_FRS_COMMAND        2
/                               FAX1_FTM_COMMAND        3
/                               FAX1_FRM_COMMAND        4
/                               FAX1_FTH_COMMAND        5
/                               FAX1_FRH_COMMAND        6
/                               FAX1_FTM_QUERY          7
/                               FAX1_FRM_QUERY          8
/                               FAX1_FTH_QUERY          9
/                               FAX1_FRH_QUERY          10
/
/                     ubyte     *command_parm_ptr
/                               Pointer to single parameter or pointer to a
/                               list of parameters with the first byte
/                               indicating the parameter count. In the list
/                               format, a parameter with a value of -1 indicates
/                               no change from the previous value. This does not
/                               apply to the last parameter in the list.
/
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                      0        Go to online
/                      1        Continue parsing
/                      2        Discard rest of command line
/                               and respond with ERROR message
/
/   Global Variables Changed: FAX parameter variables
/
/   Users: fax1_parse()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax1_execute_command(uword command, ubyte *command_parm_ptr, ubyte **response_ptr_ptr)
{
    ubyte return_code, *info_ptr;

    /* default to continue parsing */
    return_code = CONTINUE_PARSING;

    /* initialize the information response string to no information */
    fax1_info_array[0] = '\0';
    /* assign the first location of the string to the ACU pointer */
    *response_ptr_ptr = (ubyte *)fax1_info_array;
    /* initialize a working pointer to load in the data */
    info_ptr = (ubyte *)fax1_info_array;

    switch (command)
    {
        case FAX1_FTS_COMMAND:
            /* All the class 1 commands return ERROR if not connected */
            if (!fax1_connected)
                return(TERMINATE_WITH_ERROR);

            fax1_msec1_timer = *command_parm_ptr;
            /* delay the time specified by the command */
            while (fax1_msec1_timer)
                /* allow background timer routines to be executed */
                process_wait();
            break;

        case FAX1_FRS_COMMAND:
            /* All the class 1 commands return ERROR if not connected */
            if (!fax1_connected)
                return(TERMINATE_WITH_ERROR);

            fax1_msec1_timer = *command_parm_ptr;

            /* while not a time specified period of continuous silence */
            while (fax1_msec1_timer)
            {
                /* if non-silence is found on the line */
                if (modem_call_progress() != SILENCE)
                  {
                    /* restart the timing */
                    fax1_msec1_timer = *command_parm_ptr;
                  }

/* start change 01/19/95 rjm */
                /* any NEW characters from the HOST will abort the command */
                if( (uword)acu_from_num() )
                  {
                    /* allow an exit */
                    fax1_msec1_timer = 0;
                  }
/* end change 01/19/95 rjm */

                /* allow background timer routines to be executed */
                process_wait();
            }
            break;

        case FAX1_FTM_QUERY:
            /* if capable of V.17 */
            if (modem_fax_capability() == 5)
                fax1_store_string((ubyte *)FAX1_FTM144_CAPABILITY, &info_ptr);
            else
                fax1_store_string((ubyte *)FAX1_FTM96_CAPABILITY, &info_ptr);
            break;

        case FAX1_FTM_COMMAND:
            /* All the class 1 commands return ERROR if not connected */
            if (!fax1_connected)
                return(TERMINATE_WITH_ERROR);

            /* get the requested modulation */
            fax1_mod = *command_parm_ptr;
            /* make sure it's an acceptable modulation */
            if (fax1_mod == 3 || (modem_fax_capability() != 5 && (fax1_mod == 73 ||
                fax1_mod == 74 || (fax1_mod >= 97 && fax1_mod <= 146))))
                /* not capable of specified modulation */
                return_code = TERMINATE_WITH_ERROR;
            else
            {
                /* setup for background to execute the command */
                fax1_state = CONFIGURE_FTM;
                fax1_sub_state = INITIALIZE;
                /* configure for modem to APP flow control */
                fax1_configure_dte = MODEM_TO_APP_FLOW;
                return_code = GOTO_ONLINE;
            }
            break;

        case FAX1_FRM_QUERY:
            /* if capable of V.17 */
            if (modem_fax_capability() == 5)
                fax1_store_string((ubyte *)FAX1_FRM144_CAPABILITY, &info_ptr);
            else
                fax1_store_string((ubyte *)FAX1_FRM96_CAPABILITY, &info_ptr);
            break;

        case FAX1_FRM_COMMAND:
            /* All the class 1 commands return ERROR if not connected */
            if (!fax1_connected)
                return(TERMINATE_WITH_ERROR);

            /* get the requested modulation */
            fax1_mod = *command_parm_ptr;
            /* make sure it's an acceptable modulation */
            if (fax1_mod == 3 || (modem_fax_capability() != 5 && (fax1_mod == 73 ||
                fax1_mod == 74 || (fax1_mod >= 97 && fax1_mod <= 146))))
                /* not capable of specified modulation */
                return_code = TERMINATE_WITH_ERROR;
            else
            {
                /* setup for background to execute the command */
                fax1_state = CONFIGURE_FRM;
                fax1_sub_state = INITIALIZE;
                /* configure for APP to modem flow control */
                fax1_configure_dte = APP_TO_MODEM_FLOW;
                return_code = GOTO_ONLINE;
            }
            break;

        case FAX1_FTH_QUERY:
            /* respond with possible FTH modulation capabilities */
            fax1_store_string((ubyte *)FAX1_FTH_CAPABILITY, &info_ptr);
            break;

        case FAX1_FTH_COMMAND:
            /* All the class 1 commands return ERROR if not connected */
            if (!fax1_connected)
                return(TERMINATE_WITH_ERROR);

            /* get the requested modulation */
            fax1_mod = *command_parm_ptr;
            /* make sure it's an acceptable modulation */
            if (fax1_mod != 3)
                /* not capable of specified modulation */
                return_code = TERMINATE_WITH_ERROR;
            else
            {
                /* setup for background to execute the command */
                fax1_state = CONFIGURE_FTH;
                fax1_sub_state = INITIALIZE;
                /* configure for modem to APP flow control */
                fax1_configure_dte = MODEM_TO_APP_FLOW;
                return_code = GOTO_ONLINE;
            }
            break;

        case FAX1_FRH_QUERY:
            /* respond with possible FRH modulation capabilities */
            fax1_store_string((ubyte *)FAX1_FRH_CAPABILITY, &info_ptr);
            break;

        case FAX1_FRH_COMMAND:
            /* All the class 1 commands return ERROR if not connected */
            if (!fax1_connected)
                return(TERMINATE_WITH_ERROR);

            /* get the requested modulation */
            fax1_mod = *command_parm_ptr;
            /* make sure it's an acceptable modulation */
            if (fax1_mod != 3)
                /* not capable of specified modulation */
                return_code = TERMINATE_WITH_ERROR;
            else
            {
                /* setup for background to execute the command */
                fax1_state = CONFIGURE_FRH;
                fax1_sub_state = INITIALIZE;
                /* configure for APP to modem flow control */
                fax1_configure_dte = APP_TO_MODEM_FLOW;
                return_code = GOTO_ONLINE;
            }
            break;
    }

    /* terminate the response string */
    *info_ptr = '\0';

    return (return_code);
}

/******************************************************************************
/
/   Routine: fax1_store_string
/
/   Author: RSA
/
/   Creation Date: 2/17/93
/
/   Description: This routine copys a string.
/
/   Input Parameters: ubyte *   pointer to string (NULL terminated)
/                     ubyte **  string_ptr_ptr
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: fax1_execute_command, fax1_configure_ftm, fax1_configure_frm,
/          fax1_configure_fth, fax1_configure_frh
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
void fax1_store_string(ubyte *string_ptr, ubyte **string_ptr_ptr)
{
    while (*string_ptr) /* copy all characters until a NULL is reached */
        *(*string_ptr_ptr)++ = *string_ptr++;
    *(*string_ptr_ptr)++ = '\0';
}


