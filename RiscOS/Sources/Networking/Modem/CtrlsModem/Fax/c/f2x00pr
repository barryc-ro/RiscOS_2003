/****************************************************************************
/
/   Copyright, 1991,1992,1993,1994.       All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.  The information contained herein is solely
/   for the use of RSA.
/
/   File: f2x00pr.c
/
/   Module Version: 4.03
/
/   Function: This file contains AT commands for the Class 2 2388 FAX Module
/
/   Product: Class 2 FAX Module.
/
/   History: fx00cmd2.c 1.00
/
/   Created: 9/19/92
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
****************************************************************************/
#include "sys_def.h"

/*    Defines for parser response code    */
#define SYNTAX_ERROR            2
#define NOTA_COMMAND            3
#define UNUSED                  0

/* Defines for the command parameter passed to fax2_execute_cmd() */
#define FAX2_FBADLIN_COMMAND    100
#define FAX2_FBADMUL_COMMAND    101
#define FAX2_FBOR_COMMAND       102
#define FAX2_FBUG_COMMAND       103
#define FAX2_FCQ_COMMAND        104
#define FAX2_FCR_COMMAND        105
#define FAX2_FCTCRTY_COMMAND    106
#define FAX2_FDCC_COMMAND       107
#define FAX2_FDFFC_COMMAND      108
#define FAX2_FDIS_COMMAND       109
#define FAX2_FDR_COMMAND        110
#define FAX2_FDT_COMMAND        111
#define FAX2_FECM_COMMAND       112
#define FAX2_FET_COMMAND        113
#define FAX2_FK_COMMAND         114
#define FAX2_FLID_COMMAND       115
#define FAX2_FLNFC_COMMAND      116
#define FAX2_FLPL_COMMAND       117
#define FAX2_FMINSP_COMMAND     118
#define FAX2_FPHCTO_COMMAND     119
#define FAX2_FPTS_COMMAND       120
#define FAX2_FRBC_COMMAND       121
#define FAX2_FREL_COMMAND       122
#define FAX2_FSPL_COMMAND       123
#define FAX2_FTBC_COMMAND       124
#define FAX2_FVRFC_COMMAND      125
#define FAX2_FWDFC_COMMAND      126
#define FAX2_FAXERR_REQUEST     127
#define FAX2_FBADLIN_REQUEST    128
#define FAX2_FBADMUL_REQUEST    129
#define FAX2_FBOR_REQUEST       130
#define FAX2_FBUF_REQUEST       131
#define FAX2_FBUG_REQUEST       132
#define FAX2_FCQ_REQUEST        133
#define FAX2_FCR_REQUEST        134
#define FAX2_FCTCRTY_REQUEST    135
#define FAX2_FDCC_REQUEST       136
#define FAX2_FDCS_REQUEST       137
#define FAX2_FDFFC_REQUEST      138
#define FAX2_FDIS_REQUEST       139
#define FAX2_FECM_REQUEST       140
#define FAX2_FET_REQUEST        141
#define FAX2_FLID_REQUEST       142
#define FAX2_FLNFC_REQUEST      143
#define FAX2_FLPL_REQUEST       144
#define FAX2_FMDL_REQUEST       145
#define FAX2_FMFR_REQUEST       146
#define FAX2_FREV_REQUEST       147
#define FAX2_FMINSP_REQUEST     148
#define FAX2_FPHCTO_REQUEST     149
#define FAX2_FPTS_REQUEST       150
#define FAX2_FRBC_REQUEST       151
#define FAX2_FREL_REQUEST       152
#define FAX2_FSPL_REQUEST       153
#define FAX2_FTBC_REQUEST       154
#define FAX2_FVRFC_REQUEST      155
#define FAX2_FWDFC_REQUEST      156
#define FAX2_FAXERR_QUERY       157
#define FAX2_FBADLIN_QUERY      158
#define FAX2_FBADMUL_QUERY      159
#define FAX2_FBOR_QUERY         160
#define FAX2_FBUG_QUERY         161
#define FAX2_FCQ_QUERY          162
#define FAX2_FCR_QUERY          163
#define FAX2_FCTCRTY_QUERY      164
#define FAX2_FDCC_QUERY         165
#define FAX2_FDCS_QUERY         166
#define FAX2_FDFFC_QUERY        167
#define FAX2_FDIS_QUERY         168
#define FAX2_FDR_QUERY          169
#define FAX2_FDT_QUERY          170
#define FAX2_FECM_QUERY         171
#define FAX2_FET_QUERY          172
#define FAX2_FK_QUERY           173
#define FAX2_FLID_QUERY         174
#define FAX2_FLNFC_QUERY        175
#define FAX2_FLPL_QUERY         176
#define FAX2_FMINSP_QUERY       177
#define FAX2_FPHCTO_QUERY       178
#define FAX2_FPTS_QUERY         179
#define FAX2_FRBC_QUERY         180
#define FAX2_FREL_QUERY         181
#define FAX2_FSPL_QUERY         182
#define FAX2_FTBC_QUERY         183
#define FAX2_FVRFC_QUERY        184
#define FAX2_FWDFC_QUERY        185

/* FAX class 2 parser memory allocation */
static ubyte fax2_error_occurred;
static ubyte fax2_parms_array[21]; /* largest list is +FLID */
static const ubyte fax2_T30_range_array[] = {1, 5, 4, 2, 3, 1, 1, 7};

extern ubyte fax_execute_command(uword, ubyte *, ubyte **);

ubyte fax2_parse(ubyte **, ubyte **);
static ubyte fax2_FAXERR(ubyte **, ubyte **);
static ubyte fax2_FBADLIN(ubyte **, ubyte **);
static ubyte fax2_FBADMUL(ubyte **, ubyte **);
static ubyte fax2_FBOR(ubyte **, ubyte **);
static ubyte fax2_FBUF(ubyte **, ubyte **);
static ubyte fax2_FBUG(ubyte **, ubyte **);
static ubyte fax2_FCQ(ubyte **, ubyte **);
static ubyte fax2_FCR(ubyte **, ubyte **);
static ubyte fax2_FCTCRTY(ubyte **, ubyte **);
static ubyte fax2_FDCC(ubyte **, ubyte **);
static ubyte fax2_FDCS(ubyte **, ubyte **);
static ubyte fax2_FDFFC(ubyte **, ubyte **);
static ubyte fax2_FDIS(ubyte **, ubyte **);
static ubyte fax2_FDR(ubyte **, ubyte **);
static ubyte fax2_FDT(ubyte **, ubyte **);
static ubyte fax2_FECM(ubyte **, ubyte **);
static ubyte fax2_FET(ubyte **, ubyte **);
static ubyte fax2_FK(ubyte **, ubyte **);
static ubyte fax2_FLID(ubyte **, ubyte **);
static ubyte fax2_FLNFC(ubyte **, ubyte **);
static ubyte fax2_FLPL(ubyte **, ubyte **);
static ubyte fax2_FMDL(ubyte **, ubyte **);
static ubyte fax2_FMFR(ubyte **, ubyte **);
static ubyte fax2_FMINSP(ubyte **, ubyte **);
static ubyte fax2_FPHCTO(ubyte **, ubyte **);
static ubyte fax2_FPTS(ubyte **, ubyte **);
static ubyte fax2_FRBC(ubyte **, ubyte **);
static ubyte fax2_FREL(ubyte **, ubyte **);
static ubyte fax2_FREV(ubyte **, ubyte **);
static ubyte fax2_FSPL(ubyte **, ubyte **);
static ubyte fax2_FTBC(ubyte **, ubyte **);
static ubyte fax2_FVRFC(ubyte **, ubyte **);
static ubyte fax2_FWDFC(ubyte **, ubyte **);
static ubyte fax2_parse_parms(ubyte **, ubyte *, ubyte);
static ubyte fax2_parse_a_to_d(ubyte **);
static ubyte fax2_get_next_char(ubyte **);
static void fax2_unget_char(ubyte **, ubyte);

/******************************************************************************
/
/   Routine: fax2_parse
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine will parse the Class 2 2388 FAX commands.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                               The command line pointer should be pointing to
/                               the next character to parse after the "+F".
/                               When fax_parse returns, the command line pointer
/                               well have been updated to point to the next
/                               character passed the FAX command.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed:  None
/
/   Users: fax_parse()
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte fax2_parse(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte return_code;

    switch (fax2_get_next_char(command_ptr_ptr))
    {
        case 'A':                           /* '+FA' */
            switch (fax2_get_next_char(command_ptr_ptr))
            {
                case 'X':                   /* '+FAXERR' */
                    return_code = fax2_FAXERR(command_ptr_ptr, response_ptr_ptr);
                    break;
                default:
                    return_code = NOTA_COMMAND;
                    break;
            }
            break;
        case 'B':                           /* '+FB' */
            switch (fax2_get_next_char(command_ptr_ptr))
            {
                case 'A':                   /* '+FBAD' */
                    if (fax2_get_next_char(command_ptr_ptr) == 'D')
                    {
                        switch (fax2_get_next_char(command_ptr_ptr))
                        {
                            case 'L':
                                return_code = fax2_FBADLIN(command_ptr_ptr, response_ptr_ptr);
                                break;
                            case 'M':
                                return_code = fax2_FBADMUL(command_ptr_ptr, response_ptr_ptr);
                                break;
                            default:
                                return_code = NOTA_COMMAND;
                                break;
                        }
                    }
                    else
                        return_code = NOTA_COMMAND;
                    break;
                case 'O':
                    return_code = fax2_FBOR(command_ptr_ptr, response_ptr_ptr);
                    break;
                case 'U':
                    switch (fax2_get_next_char(command_ptr_ptr))
                    {
                        case 'F':
                            return_code = fax2_FBUF(command_ptr_ptr, response_ptr_ptr);
                            break;
                        case 'G':
                            return_code = fax2_FBUG(command_ptr_ptr, response_ptr_ptr);
                            break;
                        default:
                            return_code = NOTA_COMMAND;
                            break;
                    }
                    break;
                default:
                    return_code = NOTA_COMMAND;
                    break;
            }
            break;
        case 'C':                           /* '+FC' */
            switch (fax2_get_next_char(command_ptr_ptr))
            {
                case 'Q':
                    return_code = fax2_FCQ(command_ptr_ptr, response_ptr_ptr);
                    break;
                case 'R':
                    return_code = fax2_FCR(command_ptr_ptr, response_ptr_ptr);
                    break;
                case 'T':
                    return_code = fax2_FCTCRTY(command_ptr_ptr, response_ptr_ptr);
                    break;
                default:
                    return_code = NOTA_COMMAND;
                    break;
            }
            break;
        case 'D':                           /* '+FD' */
            switch (fax2_get_next_char(command_ptr_ptr))
            {
                case 'C':
                    switch (fax2_get_next_char(command_ptr_ptr))
                    {
                        case 'C':
                            return_code = fax2_FDCC(command_ptr_ptr, response_ptr_ptr);
                            break;
                        case 'S':
                            return_code = fax2_FDCS(command_ptr_ptr, response_ptr_ptr);
                            break;
                        default:
                            return_code = NOTA_COMMAND;
                            break;
                    }
                    break;
                case 'F':
                    return_code = fax2_FDFFC(command_ptr_ptr, response_ptr_ptr);
                    break;
                case 'I':
                    return_code = fax2_FDIS(command_ptr_ptr, response_ptr_ptr);
                    break;
                case 'R':
                    return_code = fax2_FDR(command_ptr_ptr, response_ptr_ptr);
                    break;
                case 'T':
                    return_code = fax2_FDT(command_ptr_ptr, response_ptr_ptr);
                    break;
                default:
                    return_code = NOTA_COMMAND;
                    break;
            }
            break;
        case 'E':                           /* '+FE' */
            switch (fax2_get_next_char(command_ptr_ptr))
            {
                case 'C':
                    return_code = fax2_FECM(command_ptr_ptr, response_ptr_ptr);
                    break;
                case 'T':
                    return_code = fax2_FET(command_ptr_ptr, response_ptr_ptr);
                    break;
                default:
                    return_code = NOTA_COMMAND;
                    break;
            }
            break;
        case 'K':                           /* '+FK' */
            return_code = fax2_FK(command_ptr_ptr, response_ptr_ptr);
            break;
        case 'L':                           /* '+FL' */
            switch (fax2_get_next_char(command_ptr_ptr))
            {
                case 'I':
                    return_code = fax2_FLID(command_ptr_ptr, response_ptr_ptr);
                    break;
                case 'N':
                    return_code = fax2_FLNFC(command_ptr_ptr, response_ptr_ptr);
                    break;
                case 'P':
                    return_code = fax2_FLPL(command_ptr_ptr, response_ptr_ptr);
                    break;
                default:
                    return_code = NOTA_COMMAND;
                    break;
            }
            break;
        case 'M':                           /* '+FM' */
            switch (fax2_get_next_char(command_ptr_ptr))
            {
                case 'D':
                    return_code = fax2_FMDL(command_ptr_ptr, response_ptr_ptr);
                    break;
                case 'F':
                    return_code = fax2_FMFR(command_ptr_ptr, response_ptr_ptr);
                    break;
                case 'I':
                    return_code = fax2_FMINSP(command_ptr_ptr, response_ptr_ptr);
                    break;
                default:
                    return_code = NOTA_COMMAND;
                    break;
            }
            break;
        case 'P':                           /* '+FP' */
            switch (fax2_get_next_char(command_ptr_ptr))
            {
                case 'H':
                    return_code = fax2_FPHCTO(command_ptr_ptr, response_ptr_ptr);
                    break;
                case 'T':
                    return_code = fax2_FPTS(command_ptr_ptr, response_ptr_ptr);
                    break;
                default:
                    return_code = NOTA_COMMAND;
                    break;
            }
            break;
        case 'R':                           /* '+FR' */
            switch (fax2_get_next_char(command_ptr_ptr))
            {
                case 'B':
                    return_code = fax2_FRBC(command_ptr_ptr, response_ptr_ptr);
                    break;
                case 'E':
                    switch (fax2_get_next_char(command_ptr_ptr))
                    {
                        case 'L':
                            return_code = fax2_FREL(command_ptr_ptr, response_ptr_ptr);
                            break;
                        case 'V':
                            return_code = fax2_FREV(command_ptr_ptr, response_ptr_ptr);
                            break;
                        default:
                            return_code = NOTA_COMMAND;
                            break;
                    }
                    break;
                default:
                    return_code = NOTA_COMMAND;
                    break;
            }
            break;
        case 'S':
            return_code = fax2_FSPL(command_ptr_ptr, response_ptr_ptr);
            break;
        case 'T':
            return_code = fax2_FTBC(command_ptr_ptr, response_ptr_ptr);
            break;
        case 'V':
            return_code = fax2_FVRFC(command_ptr_ptr, response_ptr_ptr);
            break;
        case 'W':
            return_code = fax2_FWDFC(command_ptr_ptr, response_ptr_ptr);
            break;
        default:
            return_code = NOTA_COMMAND;
            break;
    }
    return(return_code);
}

/******************************************************************************
/
/   Routine: fax2_FAXERR
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FAXERR command.
/                It will return the cause of hangup.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FAXERR(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte ch;

    if (fax2_get_next_char(command_ptr_ptr) != 'E')
        return(NOTA_COMMAND);
    if (fax2_get_next_char(command_ptr_ptr) != 'R')
        return(NOTA_COMMAND);
    if (fax2_get_next_char(command_ptr_ptr) != 'R')
        return(NOTA_COMMAND);

    ch = fax2_get_next_char(command_ptr_ptr);

    if (ch == '?')
        return(fax_execute_command(FAX2_FAXERR_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=' && fax2_get_next_char(command_ptr_ptr) == '?')
        return(fax_execute_command(FAX2_FAXERR_QUERY, UNUSED, response_ptr_ptr));
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FBADLIN
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FBADLIN command.
/                It will return and set the maximum number of
/                consequtive bad lines accepted before the page
/                is judged to be bad.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FBADLIN(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    if (fax2_get_next_char(command_ptr_ptr) != 'I')
        return(NOTA_COMMAND);
    if (fax2_get_next_char(command_ptr_ptr) != 'N')
        return(NOTA_COMMAND);

    ch = fax2_get_next_char(command_ptr_ptr);

    if (ch == '?')
        return(fax_execute_command(FAX2_FBADLIN_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FBADLIN_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (!fax2_error_occurred)
            return(fax_execute_command(FAX2_FBADLIN_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FBADMUL
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FBADMUL command.
/                It will return and set the error rate multiplier.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FBADMUL(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    if (fax2_get_next_char(command_ptr_ptr) != 'U')
        return(NOTA_COMMAND);
    if (fax2_get_next_char(command_ptr_ptr) != 'L')
        return(NOTA_COMMAND);

    ch = fax2_get_next_char(command_ptr_ptr);
    if (ch == '?')
        return(fax_execute_command(FAX2_FBADMUL_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FBADMUL_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (!fax2_error_occurred)
            return(fax_execute_command(FAX2_FBADMUL_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FBOR
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FBOR command.
/                It will set the BIT ORDER variable.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FBOR(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    if (fax2_get_next_char(command_ptr_ptr) != 'R')
        return(NOTA_COMMAND);

    ch = fax2_get_next_char(command_ptr_ptr);
    if (ch == '?')
        return(fax_execute_command(FAX2_FBOR_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FBOR_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (num >= 0 && num <= 3 && !fax2_error_occurred)
            return(fax_execute_command(FAX2_FBOR_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FBUF
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FBUF command.
/                It will return the DTE/DCE I/O status.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FBUF(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    if (fax2_get_next_char(command_ptr_ptr) == '?')
        return(fax_execute_command(FAX2_FBUF_REQUEST, UNUSED, response_ptr_ptr));
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FBUG
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FBUG command.
/                It will enable/disable HDLC frame display.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FBUG(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    ch = fax2_get_next_char(command_ptr_ptr);

    if (ch == '?')
        return(fax_execute_command(FAX2_FBUG_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FBUG_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (num >= 0 && num <= 1 && !fax2_error_occurred)
            return(fax_execute_command(FAX2_FBUG_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FCQ
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/    Description: This routine implements the +FCQ command.
/                 It will set the copy quality parameter.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FCQ(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte ch;
    ubyte num;

    ch = fax2_get_next_char(command_ptr_ptr);

    if (ch == '?')
        return(fax_execute_command(FAX2_FCQ_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FCQ_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (num >= 0 && num <= 2 && !fax2_error_occurred)
            return(fax_execute_command(FAX2_FCQ_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FCR
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/    Description: This routine implements the +FCR command.
/                 It will enable/disable FAX reception.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FCR(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    ch = fax2_get_next_char(command_ptr_ptr);

    if (ch == '?')
        return(fax_execute_command(FAX2_FCR_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FCR_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if ((num >= 0 && num <= 1) && !fax2_error_occurred)
            return(fax_execute_command(FAX2_FCR_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FCTCRTY
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FCTCRTY command.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FCTCRTY(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    if (fax2_get_next_char(command_ptr_ptr) != 'C')
        return(NOTA_COMMAND);
    if (fax2_get_next_char(command_ptr_ptr) != 'R')
        return(NOTA_COMMAND);
    if (fax2_get_next_char(command_ptr_ptr) != 'T')
        return(NOTA_COMMAND);
    if (fax2_get_next_char(command_ptr_ptr) != 'Y')
        return(NOTA_COMMAND);

    ch = fax2_get_next_char(command_ptr_ptr);
    if (ch == '?')
        return(fax_execute_command(FAX2_FCTCRTY_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FCTCRTY_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (!fax2_error_occurred)
            return(fax_execute_command(FAX2_FCTCRTY_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FDCC
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FDCC command.
/                It will set the parameters used to control
/                the modem's T.30 capability. This sets the
/                modem's overall capabilities, not the session
/                capabilities.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FDCC(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte ch;

    ch = fax2_get_next_char(command_ptr_ptr);

    if (ch == '?')
        return(fax_execute_command(FAX2_FDCC_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        ch = fax2_get_next_char(command_ptr_ptr);
        if (ch == '?')
            return(fax_execute_command(FAX2_FDCC_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        if (fax2_parse_parms(command_ptr_ptr, (ubyte *)fax2_T30_range_array, 8))
            return(fax_execute_command(FAX2_FDCC_COMMAND, fax2_parms_array, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FDCS
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FDCS command.
/                It will set the parameters used to control
/                the modem's current T.30 session parameters.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FDCS(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    if (fax2_get_next_char(command_ptr_ptr) == '?')
        return(fax_execute_command(FAX2_FDCS_REQUEST, UNUSED, response_ptr_ptr));

    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FDFFC
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FDFFC command.
/                NOTE: This routine currently only supports the
/                mandatory value of 0 since this code does
/                note support multiple compression modes.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FDFFC(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    if (fax2_get_next_char(command_ptr_ptr) != 'F')
        return(NOTA_COMMAND);
    if (fax2_get_next_char(command_ptr_ptr) != 'C')
        return(NOTA_COMMAND);

    ch = fax2_get_next_char(command_ptr_ptr);
    if (ch == '?')
        return(fax_execute_command(FAX2_FDFFC_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FDFFC_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (num >= 0 && num <= 2 && !fax2_error_occurred)
            return(fax_execute_command(FAX2_FDFFC_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FDIS
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FDIS command.
/                It will set the parameters used to control
/                the modem's T.30 session. This sets the
/                session capabilities.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FDIS(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte ch;

    if (fax2_get_next_char(command_ptr_ptr) != 'S')
        return(NOTA_COMMAND);

    ch = fax2_get_next_char(command_ptr_ptr);
    if (ch == '?')
        return(fax_execute_command(FAX2_FDIS_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        ch = fax2_get_next_char(command_ptr_ptr);
        if (ch == '?')
            return(fax_execute_command(FAX2_FDIS_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        if (fax2_parse_parms(command_ptr_ptr, (ubyte *)fax2_T30_range_array, 8))
            return(fax_execute_command(FAX2_FDIS_COMMAND, fax2_parms_array, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
 }

/******************************************************************************
/
/   Routine: fax2_FDR
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FDR command.
/                It will initiate FAX reception.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FDR(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    if (fax2_get_next_char(command_ptr_ptr) == '=')
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FDR_QUERY, UNUSED, response_ptr_ptr));
        else
            return(SYNTAX_ERROR);
    else
        return(fax_execute_command(FAX2_FDR_COMMAND, UNUSED, response_ptr_ptr));
}

/******************************************************************************
/
/   Routine: fax2_FDT
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FDT command.
/                It will initiate FAX transmission.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FDT(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    if (fax2_get_next_char(command_ptr_ptr) == '=')
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FDT_QUERY, UNUSED, response_ptr_ptr));
        else
            return(SYNTAX_ERROR);
    else
        return(fax_execute_command(FAX2_FDT_COMMAND, UNUSED, response_ptr_ptr));
}

/******************************************************************************
/
/   Routine: fax2_FECM
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FECM command.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FECM(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    if (fax2_get_next_char(command_ptr_ptr) != 'M')
        return(NOTA_COMMAND);

    ch = fax2_get_next_char(command_ptr_ptr);
    if (ch == '?')
        return(fax_execute_command(FAX2_FECM_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FECM_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (num >= 0 && num <= 2 && !fax2_error_occurred)
            return(fax_execute_command(FAX2_FECM_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FET
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FET command.
/                It will set the Post Page Message.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FET(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    ch = fax2_get_next_char(command_ptr_ptr);

    if (ch == '?')
        return(fax_execute_command(FAX2_FET_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FET_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (num >= 0 && num <= 15 && !fax2_error_occurred)
            return(fax_execute_command(FAX2_FET_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FK
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FK command.
/                It will abort the current FAX session in
/                an orderly fashion.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FK(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte ch;

    ch = fax2_get_next_char(command_ptr_ptr);
    if (ch == '=')
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FK_QUERY, UNUSED, response_ptr_ptr));
        else
            return(SYNTAX_ERROR);
    /* if the command is not terminated properly allow looking for */
    /* +FKS in the class 2.0 592 parser */
    else if (ch != ';' && ch != NULL)
    {
        fax2_unget_char(command_ptr_ptr, 1);
        return(NOTA_COMMAND);
    }
    else
    {
        fax2_unget_char(command_ptr_ptr, 1);
        return(fax_execute_command(FAX2_FK_COMMAND, UNUSED, response_ptr_ptr));
    }
}

/******************************************************************************
/
/   Routine: fax2_FLID
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FLID command.
/                It will set the local fax2_ ID. This ID will
/                be sent out in all CSI and TSI T.30 packets.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FLID(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    word count;
    ubyte ch;

    if (fax2_get_next_char(command_ptr_ptr) != 'D')
        return(NOTA_COMMAND);

    ch = fax2_get_next_char(command_ptr_ptr);
    if (ch == '?')
        return(fax_execute_command(FAX2_FLID_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        ch = fax2_get_next_char(command_ptr_ptr);
        if (ch == '?')
            return(fax_execute_command(FAX2_FLID_QUERY, UNUSED, response_ptr_ptr));

        if (ch == '"')
        {
            count = 0;
            while (count <= 20 && (ch = *(*command_ptr_ptr)++) != '"')
            {
                fax2_parms_array[count + 1] = ch;
                count++;
            }
            if (ch == '"')
            {
                fax2_parms_array[0] = count;
                return(fax_execute_command(FAX2_FLID_COMMAND, fax2_parms_array, response_ptr_ptr));
            }
        }
        else
        {
            fax2_unget_char(command_ptr_ptr, 1);
            fax2_parms_array[0] = 0;
            return(fax_execute_command(FAX2_FLID_COMMAND, fax2_parms_array, response_ptr_ptr));
        }
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FLNFC
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FLNFC command.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FLNFC(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    if (fax2_get_next_char(command_ptr_ptr) != 'F')
        return(NOTA_COMMAND);
    if (fax2_get_next_char(command_ptr_ptr) != 'C')
        return(NOTA_COMMAND);

    ch = fax2_get_next_char(command_ptr_ptr);
    if (ch == '?')
        return(fax_execute_command(FAX2_FLNFC_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FLNFC_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (num >= 0 && num <= 3 && !fax2_error_occurred)
            return(fax_execute_command(FAX2_FLNFC_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FLPL
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FLPL command.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FLPL(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    if (fax2_get_next_char(command_ptr_ptr) != 'L')
        return(NOTA_COMMAND);

    ch = fax2_get_next_char(command_ptr_ptr);
    if (ch == '?')
        return(fax_execute_command(FAX2_FLPL_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FLPL_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (num >= 0 && num <= 1 && !fax2_error_occurred)
            return(fax_execute_command(FAX2_FLPL_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FMDL
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FMDL command.
/                NOTE: This routine returns the modem model name.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FMDL(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    if (fax2_get_next_char(command_ptr_ptr) != 'L')
        return(NOTA_COMMAND);

    if (fax2_get_next_char(command_ptr_ptr) == '?')
        return(fax_execute_command(FAX2_FMDL_REQUEST, UNUSED, response_ptr_ptr));
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FMFR
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FMFR command.
/                NOTE: This routine returns the modem manufacturer.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FMFR(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    if (fax2_get_next_char(command_ptr_ptr) != 'R')
        return(NOTA_COMMAND);

    if (fax2_get_next_char(command_ptr_ptr) == '?')
        return(fax_execute_command(FAX2_FMFR_REQUEST, UNUSED, response_ptr_ptr));
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FMINSP
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FMINSP command.
/                It will set the minimum speed that the modem
/                will be allowed to connect at.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FMINSP(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    if (fax2_get_next_char(command_ptr_ptr) != 'N')
        return(NOTA_COMMAND);
    if (fax2_get_next_char(command_ptr_ptr) != 'S')
        return(NOTA_COMMAND);
    if (fax2_get_next_char(command_ptr_ptr) != 'P')
        return(NOTA_COMMAND);

    ch = fax2_get_next_char(command_ptr_ptr);

    if (ch == '?')
        return(fax_execute_command(FAX2_FMINSP_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FMINSP_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (num >= 0 && num <= 5 && !fax2_error_occurred)
            return(fax_execute_command(FAX2_FMINSP_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FPHCTO
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FPHCTO command.
/                It will return and set the maximum number of
/                100 millisecond unit the modem will wait for a
/                command after receiving the last byte of Phase C
/                data.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FPHCTO(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    if (fax2_get_next_char(command_ptr_ptr) != 'C')
        return(NOTA_COMMAND);
    if (fax2_get_next_char(command_ptr_ptr) != 'T')
        return(NOTA_COMMAND);
    if (fax2_get_next_char(command_ptr_ptr) != 'O')
        return(NOTA_COMMAND);

    ch = fax2_get_next_char(command_ptr_ptr);

    if (ch == '?')
        return(fax_execute_command(FAX2_FPHCTO_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FPHCTO_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (!fax2_error_occurred)
            return(fax_execute_command(FAX2_FPHCTO_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FPTS
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FPTS command.
/                It change the Page Transfer Status (we use
/                the Post Page Message variable) before it
/                is returned to the sending fax.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FPTS(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    if (fax2_get_next_char(command_ptr_ptr) != 'S')
        return(NOTA_COMMAND);

    ch = fax2_get_next_char(command_ptr_ptr);

    if (ch == '?')
        return(fax_execute_command(FAX2_FPTS_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FPTS_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (num >= 0 && num <= 5 && !fax2_error_occurred)
            return(fax_execute_command(FAX2_FPTS_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FREV
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FREV command.
/                NOTE: This routine returns the modem firmware
/                revision level.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FREV(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    if (fax2_get_next_char(command_ptr_ptr) == '?')
        return(fax_execute_command(FAX2_FREV_REQUEST, UNUSED, response_ptr_ptr));
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FRBC
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FRBC command.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FRBC(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    if (fax2_get_next_char(command_ptr_ptr) != 'C')
        return(NOTA_COMMAND);

    ch = fax2_get_next_char(command_ptr_ptr);
    if (ch == '?')
        return(fax_execute_command(FAX2_FRBC_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FRBC_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (!fax2_error_occurred)
            return(fax_execute_command(FAX2_FRBC_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FREL
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FREL command.
/                It determines whether or not EOL are byte
/                aligned in receive data.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FREL(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    ch = fax2_get_next_char(command_ptr_ptr);

    if (ch == '?')
        return(fax_execute_command(FAX2_FREL_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FREL_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (num >= 0 && num <= 1 && !fax2_error_occurred)
            return(fax_execute_command(FAX2_FREL_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FSPL
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description:    This routine implements the +FSPL command.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FSPL(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    if (fax2_get_next_char(command_ptr_ptr) != 'P')
        return(NOTA_COMMAND);
    if (fax2_get_next_char(command_ptr_ptr) != 'L')
        return(NOTA_COMMAND);

    ch = fax2_get_next_char(command_ptr_ptr);
    if (ch == '?')
        return(fax_execute_command(FAX2_FSPL_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FSPL_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (num >= 0 && num <= 1 && !fax2_error_occurred)
            return(fax_execute_command(FAX2_FSPL_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
 }

/******************************************************************************
/
/   Routine: fax2_FTBC
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FTBC command.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FTBC(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    if (fax2_get_next_char(command_ptr_ptr) != 'B')
        return(NOTA_COMMAND);
    if (fax2_get_next_char(command_ptr_ptr) != 'C')
        return(NOTA_COMMAND);

    ch = fax2_get_next_char(command_ptr_ptr);
    if (ch == '?')
        return(fax_execute_command(FAX2_FTBC_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FTBC_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (!fax2_error_occurred)
            return(fax_execute_command(FAX2_FTBC_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FVRFC
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FVRFC command.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FVRFC(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    if (fax2_get_next_char(command_ptr_ptr) != 'R')
        return(NOTA_COMMAND);
    if (fax2_get_next_char(command_ptr_ptr) != 'F')
        return(NOTA_COMMAND);
    if (fax2_get_next_char(command_ptr_ptr) != 'C')
        return(NOTA_COMMAND);

    ch = fax2_get_next_char(command_ptr_ptr);
    if (ch == '?')
        return(fax_execute_command(FAX2_FVRFC_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FVRFC_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (num >= 0 && num <= 3 && !fax2_error_occurred)
            return(fax_execute_command(FAX2_FVRFC_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_FWDFC
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine implements the +FWDFC command.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     **response_ptr_ptr
/                               A pointer to a location where the address of
/                               the response string should be placed.
/
/   Output Parameters: ubyte    function return code
/                               0   Fax, go to online
/                               1   Fax, continue parsing
/                               2   Fax/parser, discard rest of command
/                                   line and respond with ERROR message
/                               3   Parser, not a command
/
/   Global Variables Changed: None
/
/   Users: fax2_parse
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_FWDFC(ubyte **command_ptr_ptr, ubyte **response_ptr_ptr)
{
    ubyte num;
    ubyte ch;

    if (fax2_get_next_char(command_ptr_ptr) != 'D')
        return(NOTA_COMMAND);
    if (fax2_get_next_char(command_ptr_ptr) != 'F')
        return(NOTA_COMMAND);
    if (fax2_get_next_char(command_ptr_ptr) != 'C')
        return(NOTA_COMMAND);

    ch = fax2_get_next_char(command_ptr_ptr);
    if (ch == '?')
        return(fax_execute_command(FAX2_FWDFC_REQUEST, UNUSED, response_ptr_ptr));

    if (ch == '=')
    {
        if (fax2_get_next_char(command_ptr_ptr) == '?')
            return(fax_execute_command(FAX2_FWDFC_QUERY, UNUSED, response_ptr_ptr));

        fax2_unget_char(command_ptr_ptr, 1);
        num = fax2_parse_a_to_d(command_ptr_ptr);

        if (num >= 0 && num <= 2 && !fax2_error_occurred)
            return(fax_execute_command(FAX2_FWDFC_COMMAND, &num, response_ptr_ptr));
    }
    return(SYNTAX_ERROR);
}

/******************************************************************************
/
/   Routine: fax2_parse_parms
/
/   Author: RSA
/
/   Creation Date: 09/19/92
/
/   Description: This routine parses the string in the command buffer
/                according to the upper limit parms array and the maximum
/                number of parameters expected.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte *   array of upper limits for the parameters
/                     ubyte     maximum number of parameters
/
/   Output Parameters: ubyte    TRUE/FALSE
/                               success or failure of parsing
/
/   Global Variables Changed: None
/
/   Users: fax2_parse sub functions
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_parse_parms(ubyte **command_ptr_ptr, ubyte *parms_range_array, ubyte max_parms)
{
    ubyte i;
    ubyte num;
    ubyte ch;

    fax2_parms_array[0] = 0;    /* zero parameters parsed */
    i = 0;  /* initialize parameter count */

    while (TRUE) /* parse for as many parameters as possible */
    {
        ch = fax2_get_next_char(command_ptr_ptr); /* get a char */
        if (ch != ',' && (ch < '0' || ch > '9')) /* if end of command line */
        {
            fax2_unget_char(command_ptr_ptr, 1); /* put back the char for the main parser */
            return(TRUE);
        }

        if (ch == ',')  /* is the parameter left unchanged */
        {
            if (i == max_parms - 1) /*if looking for last parm and found a ","*/
            {
                fax2_unget_char(command_ptr_ptr, 1); /* put back the char for the main parser */
                return(TRUE); /* the last parameter can not be defaulted */
            }
            fax2_parms_array[i+1] = -1; /* indicate the value stays the same */
            fax2_parms_array[0] += 1;   /* add one to the parameter count */
        }
        else
        {
            fax2_unget_char(command_ptr_ptr, 1); /* put back the "," */
            num = fax2_parse_a_to_d(command_ptr_ptr);  /* translate number to decimal */
            /* if number within range */
            if (num >= 0 && num <= parms_range_array[i] && !fax2_error_occurred)
            {
                fax2_parms_array[i+1] = num;    /* save value in list */
                fax2_parms_array[0] += 1;   /* add one to the parameter count */
            }
            else
                return(FALSE);  /* parameter out of range */

            if (i == max_parms - 1) /* if last parameter */
                return(TRUE);
            else if (fax2_get_next_char(command_ptr_ptr) != ',') /* if no comma then done */
            {
                fax2_unget_char(command_ptr_ptr, 1); /* put back the character */
                return(TRUE);
            }
        }
        i++; /* increment the parameter count */
    }
}

/******************************************************************************
/
/   Routine: fax2_parse_a_to_d
/
/   Author: RSA
/
/   Creation Date: 09/22/92
/
/   Description: This Routine converts an ASCII characters to their
/                decimal value.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/
/   Output Parameters: ubyte    decimal value
/
/   Global Variables Changed: None
/
/   Users: fax2_parse sub functions
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_parse_a_to_d(ubyte **command_ptr_ptr)
{
    uword data_byte;
    ubyte ch;

    fax2_error_occurred = FALSE;
    data_byte = 0;  /* initialize return value */
    ch = fax2_get_next_char(command_ptr_ptr); /* get the first char */
    while (ch >= '0' && ch <= '9')  /* is it in range */
    {
        data_byte = (data_byte * 10) + (ch - '0'); /* translate and add */

        if (data_byte > 255) /* have we overrun */
        {
            fax2_error_occurred = TRUE; /* error indication */
            return((ubyte)data_byte); /* return unused value */
        }
        ch = fax2_get_next_char(command_ptr_ptr); /* get next char */
    }

    fax2_unget_char(command_ptr_ptr, 1);   /* return unused character */
    return((ubyte)data_byte);   /* respond with converted value */
}

/******************************************************************************
/
/   Routine: fax2_get_next_char
/
/   Author: RSA
/
/   Creation Date: 1/4/93
/
/   Description: This Routine returns the next character in the command
/                buffer. It will also convert any lower case characters
/                to uppercase.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/
/   Output Parameters: ubyte    character pointed to by the command_ptr_ptr
/
/   Global Variables Changed: command_ptr_ptr
/
/   Users: fax2_parse sub functions
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static ubyte fax2_get_next_char(ubyte **command_ptr_ptr)
{
    if (**command_ptr_ptr >= 'a' && **command_ptr_ptr <= 'z')
        return(*(*command_ptr_ptr)++ - 'a' + 'A');
    else
        return(*(*command_ptr_ptr)++);
}

/******************************************************************************
/
/   Routine: fax2_unget_char
/
/   Author: RSA
/
/   Creation Date: 1/4/93
/
/   Description: This Routine will move the command pointer back the
/                indicated number of characters.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     num
/                               number of times to decrement the command pointer.
/
/   Output Parameters: ubyte    character pointed to by the command_ptr_ptr
/
/   Global Variables Changed: command_ptr_ptr
/
/   Users: fax2_parse sub functions
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
static void fax2_unget_char(ubyte **command_ptr_ptr, ubyte num)
{
    *command_ptr_ptr -= num;
}

