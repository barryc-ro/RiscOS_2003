/******************************************************************************
/
/   Copyright, 1991,1992,1993,1994.       All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 201
/        Raleigh, NC  27615
/        (919) 846-7171
/
/    This document contains material confidential to RSA. Its contents
/    must not be revealed, used or disclosed to anyone or company without
/    written permission by RSA. The information contained herein is solely
/    for the use of RSA.
/
/        File     : f2x00ecd.h
/
/        Module Version: 4.03
/
/        Function : C definitions and constants used within main ECM submodule.
/
/        Product  : Class 2/2.0 ECM Submodule.
/
/        History  : 
/
/        Created : 9/23/93
/
/            -----------------------------------------------------------
/            -                       Modifications                     -
/            -----------------------------------------------------------
/
/            Author & Date :
/            Description   :
/            Reason        :
******************************************************************************/

/* Valid values for state variable fax2_ECM_tx_state */
#define ECTX_INITIALIZE                0   
#define ECTX_WAIT_TO_CONFIGURE         1
#define ECTX_WAIT_FOR_DP_CTS           2
#define ECTX_SYNCHRONIZATION           3
#define ECTX_XMITING_ECM_FRAME         4
#define ECTX_TX_FRAME                  5
#define ECTX_TX_1ST_RCP_FRAME          6
#define ECTX_TX_2ND_RCP_FRAME          7
#define ECTX_TX_3RD_RCP_FRAME          8
#define ECTX_WAITLINEBUFFSXMIT         9
#define ECTX_WAIT_TO_TERMINATE         10
#define ECTX_PP_XMITED                 11
#define ECTX_GET_FRAME_TO_REXMIT       12
#define ECTX_REXMIT_PP                 13
#define ECTX_FINISH_REXMIT_PP          14 

/* T.4 Annex A ECM says maximum of 50ms of trailing flags of an ECM 
partial page */
#define ECTXDELAY_DATA_PROPAGATE       5

/* Number of bytes in the FIF field of an ECM PPR post message response */
#define PPR_FIF_SIZE      32

/* A PPR frame size consists of 1 HDLC Address byte + 1 HDLC Control Byte
   + 1 FCF byte + 32 FIF bytes (256 bits) = 35 bytes */
#define PPR_FRAME_SIZE    (PPR_FIF_SIZE + BASE_COUNT)

/* Each T.4 ECM SDLC frame should be preceded by 200 + 100 ms worth of flags
per T.4 */
#define ECM_SYNCHRONIZATION_DELAY   25

#define ECM_FPS_DELAY               10

/* frames size references are usually "less 1." (i.e., 0-255 represents 
1-256 bytes accordingly */
#define FRAMESIZE64       63
#define FRAMESIZE256      255
#define NUMFRAMES256      255

/* Valid states for fax2_sub_state while in ECM */
/* phase C transmit */
#define ECM_CONFIGURE_TX_NEW_FAX_DOCUMENT        44 
#define ECM_CONFIGURE_TX_NEW_FAX_PAGE            45
#define ECM_CONFIGURE_TX_NEW_ECM_PARTIAL_PAGE    46
#define ECM_WAIT_CONFIGURE_TX_PP                 47
#define ECM_TX_PP                                48
#define ECM_SEND_RTC                             49
#define ECM_FLUSH_LINE_PPS_NULL                  50
#define ECM_FLUSH_LINE_NON_PPS_NULL              51
#define ECM_WAIT_FOR_FET                         52
#define ECM_RXMIT_CONFIGURE_TX_ECM_PARTIAL_PAGE  53
#define ECM_RXMIT_PP                             54

/* Valid states for fax2_sub_state while in ECM */
/* phase D transmit */
#define ECM_SCHEDULE_TX_PMC                      55
#define ECM_TX_PMC                               56
#define ECM_RX_PMR                               57
#define ECM_PROCESS_PPR                          58
#define ECM_WAIT_FOR_FDT                         59
#define ECM_SCHEDULE_TX_RR                       60
#define ECM_TX_RR                                61 
#define ECM_RX_RR_RESPONSE                       62
#define ECM_SCHEDULE_PRIQ                        63
#define ECM_TX_PRIQ                              64

/* Valid states for fax2_sub_state while in ECM */
/* phase C receive */
#define ECM_RX_ROUTER                            65
#define ECM_CONFIGURE_RX_NEW_FAX_DOCUMENT        66
#define ECM_CONFIGURE_RX_NEW_FAX_PAGE            67
#define ECM_CONFIGURE_RX_NEW_ECM_PARTIAL_PAGE    68
#define ECM_RX_WAIT_FOR_DC2                      69
#define ECM_RX_DATA                              70
#define ECMRX_CONFIGURE_RE_RECV_ECMPP            71

/* Valid states for fax2_sub_state while in ECM */
/* phase D receive */
#define ECM_RX_ROUTE_COMMAND                     72
#define ECM_RX_PROCESS_PPC                       73
#define ECM_RX_WAIT_FOR_FDR                      74
#define ECM_RX_SCHEDULE_PMR                      75
#define ECM_RX_XMIT_PMR                          76
#define ECM_RX_DELAY_RESPONSE                    77

/* The following ungetchar_struct structure provides a mechanism to "unget" 
characters from the DTE.  A use to "unget" a charaacter is when a Class 2.0
<DLE><SUB> results in a <10h><10h> data expansion which cannot be fit into
the current partial page being transmitted.  See useage for more clarification. */
#define UNGETCHAR_ARRAY_LENGTH 2
typedef struct ungetchar_struct
    {
        /* indicates whether there is a "unget" char available */
        ubyte count;    
        /* the actual "unget" char if available */
        ubyte ungetchar[UNGETCHAR_ARRAY_LENGTH];    
    } ungetchar_type;

/* Valid argument types for tx_mode argument in fax2_ECM_tx_init */
#define TX_NEW_PP_MODE     0
#define REXMIT_PP_MODE     1

/* Valid argument types for rx_mode argument in fax2_ECM_rx_init */ 
#define RX_NEW_PP_MODE     0
#define RE_RX_PP_MODE      1

/* Maximum number of ECM frames in a PP (partial page) */
#define ECM_PP_MAX_FRAMES 256 
#define ECM_PP_MAX_FRAME_NUM 255

/* Number of "header" bytes per ECM T.4 FCD SDLC frame */
/*    1 HDLC Address Field
    + 1 HDLC Control Field
    + 1 Facsimile Control Field
    + 1 Facsimile Frame Number = 4 header fields for FCD (facsimile
      coded data) */
#define NUM_EC_FCD_HDR_FIELDS 4

/* Number of "header" bytes per ECM T.4 RCD SDLC frame */
/*    1 HDLC Address Field
    + 1 HDLC Control Field
    + 1 Facsimile Control Field = 3 header fields for FCD (facsimile
      coded data) */
#define NUM_EC_RCP_HDR_FIELDS 3

/* Number of SDLC LINE IO buffers */
#define MAX_EC_LINE_BUFFERS 4

/* Indices into an ECM T.4 SDLC "IO" frame */
#define ECMT4_AF   0  /* T.4 ECM address field */
#define ECMT4_CF   1  /* T.4 ECM control field */
#define ECMT4_FCF  2  /* T.4 ECM facsimile control field */
#define ECMT4_FIF1 3  /* 1st byte of T.4 ECM facsimile information field */
#define ECMT4_FIF2 4  /* 2nd byte of T.4 ECM facsimile information field */

/* Values used in ECM T.4 FCD/RCP frames */
#define ECM_ADDRESS_VALUE   0xFF    /* ECM uses broadcast address */
#define ECM_CTL_FCD_VALUE  0x03    /* ECM FCD (facsimile coded data) frame 
                                       for SDLC control field */
#define ECM_CTL_RCP_VALUE  0x03    /* ECM RCP (return to control for partial
                                       page) frame for SDLC control field*/ 
#define ECM_FCF_FCD_VALUE   0x06    /* ECM FCD frame for FIF field */
#define ECM_FCF_RCP_VALUE   0x86    /* ECM RCP frame for FIF field */

/* Values for fax2_ECM_linebufstat */
#define ECM_LINEBUFF_FREE             0
#define ECM_LINEBUFF_PENDINGXMISSION  1
#define ECM_LINEBUFF_RECEIVED          2

/* Values for fax2_ECM_linestat */
#define EC_LINE_IDLE           0
#define EC_LINE_XMITING        1
#define EC_LINE_RX_NULLSTATUS  2
#define EC_LINE_RX_OVERRUN     3

/* Number of CRC bytes in ECM T.4 SDLC FCD/RCP frames */
#define CRC_BYTES 2

#define MAX_EC_FIF_HDLC_FRAME_SIZE 256

/* Typedef defining T.4 ECM SDLC frames */
typedef struct 
{
    ubyte status;   /* used in receive mode to indicate error in reception */
    ubyte dummy;    /* unused byte embedded for alignment */
    uword count;    /* number of bytes in the packet */

     /* array holding packet contants */
    ubyte data[MAX_EC_FIF_HDLC_FRAME_SIZE + NUM_EC_FCD_HDR_FIELDS + CRC_BYTES];   
} ecmhdlc_line_buffer_type;

/* Value for "unset" variable */
#define NOTSET  2

/* typedef to maintain a frame length of a given frame */
typedef struct
{
    ubyte framenum;
    ubyte framelengthless1;
} frameinfo_type;

/* Valid frame sizes (lengths minus 1) */
#define FRAME_SIZE64   63
#define FRAME_SIZE256  255

/* max iterations before per background call when fax2_state = PHASE_C,
fax2_sub_state = ECM_TX_PP_2388. */ 
#define MAX_ITERATIONS 64

/* typedef to maintain the status of free frame id's available from the BM 
(buffer manager) */
typedef struct
{
    ubyte index;
    ubyte available;
} free_frameid_type;

/* typedef used to logically "point" to a certain byte (0-255) of a certain
ECM frame (0-255) */
typedef struct
    {
        ubyte framenum;
        ubyte index;
    } ECMfifoindex_type;

#define NUM_ECM_PMRS    9       /* number of ECM post message responses */
#define NUM_ECM_PMCS    16      /* number of ECM post message commands */
#define NUM_ECM_PMCS_WITH2OPCODES 14 /* number of ECM PMCS with 2 opcodes */
#define NUM_MAX_OPCODES 2 /* maximum number of opcodes per ECM PMC */

/* Valid return codes for fax2_ECM_rx_pp_bg */
#define ECRXSTAT_RECEIVING      0
#define ECRXSTAT_CD_DROP        1
#define ECRXSTAT_RCP_RECEIVED   2

/* Valid return codes for fax2_ECM_rx_from_char() */
#define ECRXFRCHAR_NO_CHAR_AVAIL   0
#define ECRXFRCHAR_CHAR_AVAIL      1
#define ECRXFRCHAR_PP_PASSED_UP    2

/* valid states for fax2_ECM_dte_bg_state */
#define ECDTEBG_IDLE                    0
#define ECDTEBG_EXECUTING               1
#define ECDTEBG_WAIT_FOR_DC2            2
#define ECDTEBG_PP_SENT_TO_DTE          3

/* valid states for fax2_ECM_rx_fromchar_state */
#define ECRXFRCH_WAITING_FOR_FRAME          0
#define ECRXFRCH_PASSINGUP_FRAMEDATA_TO_DTE 1
#define ECRXFRCH_REPORT_PP_PASSSED_UP       2

/* valid arguments for fax2_ECM_dte_bg_run() */
#define EXECUTE_AFTER_FOUND_DC2             0
#define EXECUTE_IMMEDIATELY                 1
