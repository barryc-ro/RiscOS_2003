/****************************************************************************
/
/   Copyright 1994, 1995
/   All Rights Reserved by:
/     RSA
/     7701 Six Forks Road
/     Suite 120
/     Raleigh, NC  27615
/     (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.    The information contained herein is solely
/   for the use of RSA.
/
/   File:    vc00prlb.c
/
/   Version:    1.00
/
/   Function:    This file contains the misc routines for the voice parse code.
/
/   Product  : Voice Core Code
/
/   History:
/
/   Created: 1/14/94
/
/   ---------------------------------------------------------
/   -         Modifications          -
/   ---------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "vce_def.h"
#include "vce_mem.h"
#include "vce_cpro.h"
#include "func_mac.h"

#if 0
ubyte vce_a_to_d(ubyte **);
ubyte vce_get_next_char(ubyte **);
void vce_unget_char(ubyte **, ubyte);
ubyte parse_hex_byte(ubyte **);
ubyte check_DTMF(ubyte);
#endif

/******************************************************************************
/
/   Routine: vce_a_to_d
/
/   Author: RSA
/
/   Creation Date: 09/22/92
/
/   Description: This Routine converts an ASCII characters to their
/                decimal value.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/
/   Output Parameters: ubyte    decimal value
/
/   Global Variables Changed: None
/
/   Users: voice_parse sub functions
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/

#if 0 /* ramn 9/13/96, nobody uses this routine so comment out to save space */
ubyte vce_a_to_d(ubyte **command_ptr_ptr)
{
    uword data_byte;
    ubyte ch;

    vce_error_occurred = FALSE;

    data_byte = 0;
    ch = vce_get_next_char(command_ptr_ptr);

    while (ch >= '0' && ch <= '9')  /* is it in range */
    {
        data_byte = (data_byte * 10) + (ch - '0');

        if (data_byte > 255) 
        {
            /* If the value is greater then 255 flag an error */
            vce_error_occurred = TRUE;
            return((ubyte)data_byte); 
        }
        ch = vce_get_next_char(command_ptr_ptr); 
    }

    /* Set pointer back to the unused character */
    vce_unget_char(command_ptr_ptr, 1);

    /* Return the converted value */
    return((ubyte)data_byte);   
}
#endif

/******************************************************************************
/
/   Routine: vce_get_next_char
/
/   Author: RSA
/
/   Creation Date: 1/4/93
/
/   Description: This Routine returns the next character in the command
/                buffer. It will also convert any lower case characters
/                to uppercase.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/
/   Output Parameters: ubyte    character pointed to by the command_ptr_ptr
/
/   Global Variables Changed: command_ptr_ptr
/
/   Users: vce_parse sub functions
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/

#if 0 /* ramn 9/13/96, nobody uses this routine so comment out to save space */
ubyte vce_get_next_char(ubyte **command_ptr_ptr)
{
    if (**command_ptr_ptr >= 'a' && **command_ptr_ptr <= 'z')
        return(*(*command_ptr_ptr)++ - 'a' + 'A');
    else
        return(*(*command_ptr_ptr)++);
}
#endif

/******************************************************************************
/
/   Routine: vce_unget_char
/
/   Author: RSA
/
/   Creation Date: 1/4/93
/
/   Description: This Routine will move the command pointer back the
/                indicated number of characters.
/
/   Input Parameters: ubyte     **command_ptr_ptr
/                               A pointer to to a command line pointer.
/                     ubyte     num
/                               number of times to decrement the command pointer.
/
/   Output Parameters: ubyte    character pointed to by the command_ptr_ptr
/
/   Global Variables Changed: command_ptr_ptr
/
/   Users: vce_parse sub functions
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/

#if 0 /* ramn 9/13/96, nobody uses this routine so comment out to save space */
void vce_unget_char(ubyte **command_ptr_ptr, ubyte num)
{
    *command_ptr_ptr -= num;
}
#endif

/*******************************************************************************
/
/   Routine: parse_hex_byte
/
/   Author: RSA
/
/   Creation Date: 10/14/92
/
/   Description: This routine will parse the command buffer and return a hex
/                byte.
/
/   Input Parameters: None
/
/   Output Parameters: ubyte data_byte - Hex byte
/
/   Global Variables Changed:  None
/
/   Users: pnd_VDT()
/
/   -------------------------------------------------------------
/   -            Modifications                -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/

#if 0 /* ramn 9/13/96, nobody uses this routine so comment out to save space */
ubyte parse_hex_byte(ubyte **command_ptr_ptr)
{
    ubyte i, data_byte,ch;

    data_byte = 0;

    for (i = 0 ; i < 2 ; i++)
    {
        ch = vce_get_next_char(command_ptr_ptr);

        data_byte <<= 4;
        if ((ch >= '0') && (ch <='9'))
            data_byte |= ch - '0';
        else
            data_byte |= ch - 'A' + 10;
    }
    return(data_byte);
}
#endif

/*******************************************************************************
/
/    Routine: check_DTMF
/
/    Author : RSA
/
/    Creation Date: 05/07/91
/
/    Description : This Routine will determine if the selected character
/              is a valid for DTMF tone generation.
/
/    Input Parameters: ubyte ch - Possible DTMF character.
/
/    Output Parameters: ubyte - Indication of valid character
/
/    Global Variables Changed:  None
/
/    Users:    voice_execute_command()
/
/    -------------------------------------------------------------
/    -            Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/

#if 0 /* ramn 9/13/96, nobody uses this routine so comment out to save space */
ubyte check_DTMF(ubyte ch)
{
    if ((ch >= 'a') && (ch <= 'z'))
        ch = ch & 0xDF; 

        if ( ((ch >= '0') && (ch <= '9')) || (ch == '#') || (ch == '*')
             || ((ch >= 'A') && (ch <= 'D')) )
                return (TRUE);

    return(FALSE);
}  
#endif
