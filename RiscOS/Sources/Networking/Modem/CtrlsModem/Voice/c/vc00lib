/****************************************************************************
/
/   Copyright 1994, 1995
/   All Rights Reserved by:
/	 RSA
/	 7701 Six Forks Road
/	 Suite 120
/	 Raleigh, NC  27615
/	 (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.	The information contained herein is solely
/   for the use of RSA.
/
/   File:	vc00lib.c
/
/   Version:	1.00
/
/   Function:	This file contains the misc routines for the voice code.
/
/   Product  : Voice Core Code
/
/   History:
/
/   Created:    1/14/93
/
/   ---------------------------------------------------------
/   -		 Modifications		  -
/   ---------------------------------------------------------
/
/
/       Author & Date: 
/       Description: 
/       Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "vce_def.h"
#include "vce_mem.h"
#include "vce_cpro.h"
#include "func_mac.h"

void vce_store_string(ubyte *, ubyte **);
uword vce_a_to_word(void);
void vce_store_string_null(ubyte *, ubyte *);
ubyte vce_isnum(ubyte ch);
ulong vce_parse_a_to_d(void);
ubyte vce_parse_hex_a_to_d(void);
void vce_b_to_a_resp(ubyte);
void vce_store_b_to_a(ubyte, ubyte **);
void vce_store_long_to_a(ulong, ubyte **);
void vce_store_word_to_a(uword, ubyte **);
void vce_store_hex_byte_to_a(ubyte, ubyte **);
void vce_store_hex_long_to_a(ulong, ubyte **);
ubyte vce_call_progress(ubyte **);
ulong vce_a_to_h_long(void);

#if 0
ubyte vce_TIA_to_rw_event_format(ulong);
ulong vce_rw_to_TIA_event_mask(ubyte,ulong);
ulong vce_TIA_event_format(ulong);
#endif /* ramn 2/29/96 */

/* routines added by ramn 10/10/95 */
void vce_b_to_a_null(ubyte); 
void vce_store_word_to_a_null(uword, ubyte **);

extern ubyte s[1];
extern uword timer2; /*ramn 4/5/96 */
/*******************************************************************************
/
/   Routine: vce_store_string
/
/   Author : RSA
/
/   Creation Date: 05/07/91
/
/   Description : This Routine will place the characters contained in the input
/                 string starting at the pointer passed in.  
/
/   Input Parameters: ubyte *from_ptr - pointer to the string of characters
/
/                     ubyte **to_ptr - pointer to the location to store the string 
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users: voice_output()
/
/   -------------------------------------------------------------
/   -		 Modifications		      -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void vce_store_string(ubyte *from_ptr, ubyte **to_ptr)
{
    
    while (*from_ptr != NULL)
	*(*to_ptr)++ = *from_ptr++;
}

/*******************************************************************************
/
/   Routine: vce_store_string_null
/
/   Author : RSA
/
/   Creation Date: 05/07/91
/
/   Description : This Routine will place the characters contained in the input
/                 string starting at the pointer passed in. The string is also
/                 terminated with a NULL character.
/
/   Input Parameters: ubyte *from_ptr - pointer to the string of characters
/
/                     ubyte *to_ptr - pointer to the location to store the string 
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users: voice_output()
/
/   -------------------------------------------------------------
/   -		 Modifications		      -
/   -------------------------------------------------------------
/
/   Author & Date:    RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void vce_store_string_null(ubyte *from_ptr, ubyte *to_ptr)
{
    while (*from_ptr)
        *to_ptr++ = *from_ptr++;
    *to_ptr = '\0';
}

/*******************************************************************************
/
/   Routine: vce_rw_to_TIA_event_mask
/
/   Author: RSA
/
/   Creation Date: 10/14/92
/
/   Description: This routine will produce a mask in the TIA format that
/		 selects events based upon the Rockwell format.
/
/   Input Parameters: ubyte num1 - Bit encoded value of the selected events in
/				   Rockwell spec form.
/		      ulong num2 - Bit encoded value of the allowed events in
/				   TIA spec form.
/
/   Output Parameters: ulong i - Mask in TIA form.
/
/   Global Variables Changed:  None
/
/   Users: voice_execute_command()
/
/   -------------------------------------------------------------
/   -			Modifications			    -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
#if 0
ulong vce_rw_to_TIA_event_mask(ubyte num,ulong pos_events)
{
    ulong i=0;

    if (num & RW_EVENT_DTMF)
	i |= EVENT_DTMF;
    if (num & RW_EVENT_1300HZ)
	i |= EVENT_1300HZ;
    if (num & RW_EVENT_1100HZ)
	i |= EVENT_1100HZ;
    if (num & RW_EVENT_2100HZ)
	i |= EVENT_2100HZ;
    if (num & RW_EVENT_2225HZ)
	i |= EVENT_2225HZ;

    /* If the call progress bit is set then we need to determine which call progress
       events are allowed for this platform */
    if (num & RW_EVENT_CALL_PROG)
    {
        if (pos_events & EVENT_RINGBACK)
	    i |= EVENT_RINGBACK;
        if (pos_events & EVENT_BUSY)
	    i |= EVENT_BUSY;
        if (pos_events & EVENT_DIALTONE)
	    i |= EVENT_DIALTONE;
    }

    return (i);
}
#endif /* ramn 2/29/96 */


/*******************************************************************************
/
/   Routine: vce_TIA_event_format
/
/   Author: RSA
/
/   Creation Date: 10/14/92
/
/   Description: This routine will take the TIA event format and produce a byte
/		 which indocates the selected events in the Rockwell format.
/
/   Input Parameters: ulong num - Contains the selected events in the TIA format
/
/   Output Parameters: ubyte i - Contains the selected events in the Rockwell
/				 format.
/
/   Global Variables Changed:  None
/
/   Users: voice_execute_command()
/
/   -------------------------------------------------------------
/   -			Modifications			    -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
#if 0
ulong vce_TIA_event_format(ulong num)
{
    ulong i=0;

    if (num & EVENT_DTMF)
	i |= RW_EVENT_DTMF;
    if (num & EVENT_1300HZ)
	i |= RW_EVENT_1300HZ;
    if (num & EVENT_1100HZ)
	i |= RW_EVENT_1100HZ;
    if (num & EVENT_2100HZ)
	i |= RW_EVENT_2100HZ;
    if (num & EVENT_2225HZ)
	i |= RW_EVENT_2225HZ;
    if ((num & EVENT_RINGBACK) || (num & EVENT_BUSY) || (num & EVENT_DIALTONE))
	i |= RW_EVENT_CALL_PROG;

    return (i);
}
#endif /* ramn 2/29/96 */


/*******************************************************************************
/
/   Routine: vce_a_to_word
/
/   Author: RSA
/
/   Creation Date: 10/14/92
/
/   Description: This routine will convert an ASCII string in to a decimal word.
/
/   Input Parameters: ubyte *ptr - Pointer to the ASCII string
/
/   Output Parameters: uword num - Decimal word value
/
/   Global Variables Changed:  None
/
/   Users: voice_execute_command()
/
/   -------------------------------------------------------------
/   -			Modifications			    -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
uword vce_a_to_word(void)
{
    ulong num=0;

    while ((*vce_cmd_ptr >= '0') && (*vce_cmd_ptr <= '9'))
    {
	num = (num * 10) + (*vce_cmd_ptr++ - '0');

	/* Need to force the return value to be a word */
	if (num > 0xFFFF)
	    return (0xFFFF);
    }

    return ((uword)num);
}

/*******************************************************************************
/
/   Routine: vce_parse_a_to_d
/
/   Author: RSA
/
/   Creation Date: 10/14/92
/
/   Description:  This routine will parse the vce_cmd_ptr to convert the
/		  ASCII string to a decimal word value.  It will start with
/		  the 1st character and parse until a ',', ']', or '}' is
/		  encountered.
/
/   Input Parameters: None
/
/   Output Parameters: ulong num - Decimal value.
/
/   Global Variables Changed:  vce_cmd_ptr
/
/   Users: voice_execute_command()
/
/   -------------------------------------------------------------
/   -			Modifications			    -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
ulong vce_parse_a_to_d(void)
{
    ulong num=0;

    while ((*vce_cmd_ptr != ',') && (*vce_cmd_ptr != ']') &&
           (*vce_cmd_ptr != '}') && (*vce_cmd_ptr != NULL) &&
            (*vce_cmd_ptr != ' ') && (*vce_cmd_ptr != ';'))
    {
        num = (num * 10) + (*vce_cmd_ptr++ - '0');
    }
    return (num);
}

/******************************************************************************
/
/   Routine: vce_hex_a_to_d
/
/   Author: RSA
/
/   Creation Date: 09/21/92
/
/   Description: This routine receives a pointer to a two character ASCII
/                hex string. It will be converted to decimal and return.
/
/   Input Parameters: none
/
/   Output Parameters: none
/
/   Global Variables Changed: none
/
/   Users: 
/
/   -------------------------------------------------------------
/   -                       Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Descritpion:
/   Reason:
/
*******************************************************************************/
ubyte vce_parse_hex_a_to_d(void)
{
    ubyte data_byte=0;

    while ((*vce_cmd_ptr != ',') && (*vce_cmd_ptr != ']') && (*vce_cmd_ptr != '}')
          && (*vce_cmd_ptr != NULL) && (*vce_cmd_ptr != ' '))
    {
        data_byte <<= 4;
        /* if 0-9 then subtract from 0 to get the offset */
        if (*vce_cmd_ptr >= '0' && *vce_cmd_ptr <='9')
            data_byte |= *vce_cmd_ptr - '0';
        else
            /* else subtract from A to get the offset and add 10 (e.g B == 11) */
            data_byte |= *vce_cmd_ptr - 'A' + 10;

        /* point to the next ASCII character */
        vce_cmd_ptr++; 
    }
    return(data_byte); 
}


/*******************************************************************************
/
/   Routine: vce_b_to_a_resp
/
/   Author : RSA
/
/   Creation Date: 10/14/92
/
/   Description : This Routine converts the input byte value to it's ASCII
/                 value.  It will also format the return string by adding CR
/                 LF where needed.
/
/   Input Parameters: ubyte num - number to be converted
/
/   Output Parameters: None
/
/   Global Variables Changed: vce_array[]
/
/   Users: voice_execute_command()
/
/   -------------------------------------------------------------
/   -			Modifications			    -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void vce_b_to_a_resp(ubyte num)
{
    ubyte i,pt[4],*ptr,*loc_ptr;

    loc_ptr = (ubyte *)&pt[0];
    for (i=0; i<3; i++)
    {
	*loc_ptr++ = (num % 10) + '0';
	num = num / 10;
    }

    /* Remove all leading 0's */
    for (i=3; i>0; i--)
    {
	if (*--loc_ptr != '0')
	    break;
    }

    /* Point to the beginning of vce_array.  Need to produce the formatted
       ASCII string to be sent to the terminal */
    ptr = (ubyte *)&vce_array[0];
/*    *ptr++ = CR; 
    *ptr++ = LF;
*/
    if (!i)
	*ptr++ = '0';

    while (i>0)
    {
	*ptr++ = *loc_ptr--;
        i--;
    }

/*    *ptr++ = CR; 
    *ptr++ = LF;*/
    *ptr = '\0';
}

/*******************************************************************************
/
/   Routine: vce_store_b_to_a
/
/   Author : RSA
/
/   Creation Date: 10/14/92
/
/   Description : This Routine converts the input byte value to it's ASCII
/                 value.  It will also format the return string by adding CR
/                 LF where needed.
/
/   Input Parameters: ubyte num - number to be converted
/
/   Output Parameters: None
/
/   Global Variables Changed: vce_array[]
/
/   Users: voice_execute_command()
/
/   -------------------------------------------------------------
/   -			Modifications			    -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void vce_store_b_to_a(ubyte num, ubyte **ptr)
{
    ubyte i,pt[4],*loc_ptr;

    loc_ptr = (ubyte *)&pt[0];
    for (i=0; i<3; i++)
    {
	*loc_ptr++ = (num % 10) + '0';
	num = num / 10;
    }

    /* Remove all leading 0's */
    for (i=3; i>0; i--)
    {
	if (*--loc_ptr != '0')
	    break;
    }

    if (!i)
	*(*ptr)++ = '0';

    while (i>0)
    {
	*(*ptr)++ = *loc_ptr--;
        i--;
    }
}


/*******************************************************************************
/
/   Routine: vce_store_long_to_a
/
/   Author : RSA
/
/   Creation Date: 09/15/92
/
/   Description : This Routine converts a longword value to an ASCII string.
/
/   Input Parameters: ulong num - number to be converted
/
/   Output Parameters: ubyte *vce_array - Pointer to ASCII string
/
/   Global Variables Changed:  vce_array[]
/
/   Users: voice_execute_command()
/
/   -------------------------------------------------------------
/   -			Modifications			    -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void vce_store_long_to_a(ulong num, ubyte **ptr)
{
    ubyte i,pt[10],*loc_ptr;

    loc_ptr = (ubyte *)&pt[0];
    for (i=0; i<9; i++)
    {
	*loc_ptr++ = (num % 10) + '0';
	num = num / 10;
    }

/* Remove all leading 0's */
    for (i=9; i>0; i--)
    {
	if (*--loc_ptr != '0')
	    break;
    }

    if (!i)
	*(*ptr)++ = '0';

    while (i>0)
    {
	*(*ptr)++ = *loc_ptr--;
        i--;
    }
}

/*******************************************************************************
/
/   Routine: vce_word_to_a
/
/   Author : RSA
/
/   Creation Date: 10/14/92
/
/   Description : This Routine converts a word value to an ASCII string.
/
/   Input Parameters: uword num - number to be converted
/
/   Output Parameters: ubyte *vce_array - Pointer to ASCII string
/
/   Global Variables Changed:  vce_array[]
/
/   Users: voice_execute_command()
/
/   -------------------------------------------------------------
/   -			Modifications			    -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void vce_store_word_to_a(uword num, ubyte **ptr)
{
    ubyte i,pt[6],*loc_ptr;

    loc_ptr = (ubyte *)&pt[0];
    for (i=0; i<5; i++)
    {
	*loc_ptr++ = (num % 10) + '0';
	num = num / 10;
    }

    /* Remove all leading 0's */
    for (i=5; i>0; i--)
    {
	if (*--loc_ptr != '0')
	    break;
    }

    if (!i)
	*(*ptr)++ = '0';

    while (i>0)
    {
	*(*ptr)++ = *loc_ptr--;
        i--;
    }
}

/*******************************************************************************
/
/   Routine: vce_hex_byte_to_a
/
/   Author: RSA
/
/   Creation Date: 10/15/92
/
/   Description: This routine will convert a hex byte to ASCII string.
/
/   Input Parameters: ubyte num - Hex byte to be converted
/
/   Output Parameters: ubyte *vce_array - Pointer to ASCII string
/
/   Global Variables Changed: vce_array[]
/
/   Users: voice_execute_command()
/
/   -------------------------------------------------------------
/   -			Modifications			    -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void vce_store_hex_byte_to_a(ubyte num, ubyte **ptr)
{
    ubyte temp_char;

    temp_char = (num >> 4) & 0x0F;
    *(*ptr)++ = temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A';
    temp_char = num & 0x0F;
    *(*ptr)++ = temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A';
}

/*******************************************************************************
/
/   Routine: vce_store_hex_long_to_a
/
/   Author: RSA
/
/   Creation Date: 10/15/92
/
/   Description: This routine will convert a hex longword to ASCII string.
/
/   Input Parameters: ubyte num - Hex long to be converted
/
/   Output Parameters: ubyte *vce_array - Pointer to ASCII string
/
/   Global Variables Changed: vce_array[]
/
/   Users: voice_execute_command()
/
/   -------------------------------------------------------------
/   -			Modifications			    -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void vce_store_hex_long_to_a(ulong num, ubyte **ptr)
{
    ulong temp_char;

    temp_char = (num >> 28) & 0x0F;
    *(*ptr)++ = temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A';

    temp_char = (num >> 24) & 0x0F;
    *(*ptr)++ = temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A';
    
    temp_char = (num >> 20) & 0x0F;
    *(*ptr)++ = temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A';

    temp_char = (num >> 16) & 0x0F;
    *(*ptr)++ = temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A';

    temp_char = (num >> 12) & 0x0F;
    *(*ptr)++ = temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A';

    temp_char = (num >> 8) & 0x0F;
    *(*ptr)++ = temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A';

    temp_char = (num >> 4) & 0x0F;
    *(*ptr)++ = temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A';

    temp_char = num & 0x0F;
    *(*ptr)++ = temp_char < 10 ? temp_char + '0' : (temp_char - 10) + 'A';
}

/*******************************************************************************
/
/   Routine: vce_call_progress
/
/   Author: RSA
/
/   Creation Date: 09/15/93
/
/   Description: 
/
/   Input Parameters:
/
/   Output Parameters: 
/
/   Global Variables Changed: 
/
/   Users: 
/
/   -------------------------------------------------------------
/   -			Modifications			    -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
ubyte vce_call_progress(ubyte **msg)
{
    ubyte type,i,index=4;	/* ramn 2/21/96 */
	ubyte *info_ptr;
#if 0
    ulong voice_event_rept; */ /* 1/15/96 */

    /* Determine the events enabled by the user for the specified mode */
    if (vce_mode == ONLINE_COMMAND || vce_mode == OFFLINE_COMMAND)
        voice_event_rept = vce_idl_events;
    if (vce_mode == RECEIVE_MODE)
        voice_event_rept = vce_rx_events;
    if (vce_mode == TRANSMIT_MODE)
        voice_event_rept = vce_tx_events;
#endif

	 if(!timer2 && s[1]) /* ramn 4/5/96 */
		s[1] = 0;

    if ((type = dp_vce_call_progress()) != NOTHING_DETECTED)
    {
	 	switch (type)
      {
#if 0
     	   case DETECTED_DTMF_SHIELD:
				 if((voice_event_rept & EVENT_DTMF) && !vce_dtmf_report_delay)
   	          i = '/';
             break;

         case DETECTED_DTMF_END:
				 if((voice_event_rept & EVENT_DTMF) && !vce_dtmf_report_delay)	
	             i = '~';
             break;
#endif

		   case DETECTED_DTMF_0:
		   case DETECTED_DTMF_1:
		   case DETECTED_DTMF_2:
		   case DETECTED_DTMF_3:
		   case DETECTED_DTMF_4:
		   case DETECTED_DTMF_5:
		   case DETECTED_DTMF_6:
		   case DETECTED_DTMF_7:
		   case DETECTED_DTMF_8:
		   case DETECTED_DTMF_9:
		   case DETECTED_DTMF_A:
		   case DETECTED_DTMF_B:
		   case DETECTED_DTMF_C:
		   case DETECTED_DTMF_D:
				  if((voice_event_rept & EVENT_DTMF) /*&& !vce_dtmf_report_delay*/)	
	 		       i = type;
		       break;

		   case DETECTED_DTMF_AST:
				 if((voice_event_rept & EVENT_DTMF) /*&& !vce_dtmf_report_delay*/)
			       i = '*';
		       break;
  	
		   case DETECTED_DTMF_PND:
				 if((voice_event_rept & EVENT_DTMF) /*&& !vce_dtmf_report_delay*/)
			       i = '#';
		       break;

		  	case DETECTED_2100HZ:
        		if ((voice_event_rept & EVENT_2100HZ) && !vce_2100hz_msg_delay)
         	{
         		i = 'a';
         		vce_2100hz_msg_delay = DELAY_FOR_2100HZ_MSG;
         	}
         	else
         		return (FALSE);
			break;

			case DETECTED_BUSY:
				if (voice_event_rept & EVENT_BUSY) 
         	{
#if 0 /* ramn 2/27/96 */
         		if (vce_ctl_tone_rpt_active)
         		{
             		return (type);
         		}
         		else if (!vce_busy_msg_delay)
#endif
					if (!vce_busy_msg_delay)
         		{
             		i = 'b';
             		vce_busy_msg_delay = DELAY_FOR_BUSY_MSG;
         		}
         		else
          			return (FALSE);
         	}
         	else
          		return (FALSE);
			break;

        	case DETECTED_1100HZ:
         	if ((voice_event_rept & EVENT_1100HZ) && !vce_1100hz_msg_delay)
         	{
          		i = 'c';
          		vce_1100hz_msg_delay = DELAY_FOR_1100HZ_MSG;
         	}
         	else
          		return (FALSE);
			break;

			case DETECTED_DSP_PACKT_DTONE:
        	case DETECTED_DIALTONE:
         	if ((voice_event_rept & EVENT_DIALTONE) && !vce_dialtone_msg_delay)
         	{
          		i = 'd';
          		vce_dialtone_msg_delay = DELAY_FOR_DIALTONE_MSG;
         	}
         	else
          	return (FALSE);
			break;

        	case DETECTED_1300HZ:
         	if ((voice_event_rept & EVENT_1300HZ) && !vce_1300hz_msg_delay)
         	{
          		i = 'e';
          		vce_1300hz_msg_delay = DELAY_FOR_1300HZ_MSG;
         	}
         	else
          		return (FALSE);
			break;

        	case DETECTED_2225HZ:
         	if ((voice_event_rept & EVENT_2225HZ) && !vce_2225hz_msg_delay)
         	{
          		i = 'f';
          		vce_2225hz_msg_delay = DELAY_FOR_2225HZ_MSG;
         	}
         	else
          		return (FALSE);
			break;

        	case DETECTED_RING_ON:
         	if (voice_event_rept & EVENT_RING)
         	{
#if 0 /* ramn 4/5/96 */
					if(vce_mode == OFFLINE_COMMAND)
   	       		return (type);
					else
					{
 				   	ring_was_on_before = TRUE;  /* ramn 2/24/96 */
						return(type);
					}
#endif
					ring_was_on_before = TRUE;  /* ramn 4/5/96 */
					return(type);

         	}
         	else
          		return (FALSE);
			break;

        	case DETECTED_RING_OFF:
         	if (voice_event_rept & EVENT_RING)
         	{
#if 0 /* ramn 4/5/96 */
					if(vce_mode == OFFLINE_COMMAND)
         			return (type);
					else
					{
						if(ring_was_on_before == TRUE) /* ramn 2/24/96 */
						{
							i = 'R';
						 	timer2 = 800; /* this is the time to reset s1 */
							s[1]++;
						}
			 			ring_was_on_before = FALSE;  /* ramn 2/24/96 */
					}
#endif
					if(ring_was_on_before == TRUE) /* ramn 4/5/96 */
					{
						i = 'R';
					 	timer2 = 800; /* this is the time to reset s1 */
						s[1]++;
					}
				 	ring_was_on_before = FALSE;  /* ramn 4/5/96 */

         	}
         	else
         		return (FALSE);
			break;

        	case DETECTED_RINGBACK:
         	if (voice_event_rept & EVENT_RINGBACK) 
         	{

					i = 'r'; /* ramn 2/2/6/96 */
	            vce_rb_away_timer = vce_rb_away_time; /* ramn 2/26/96 */


/*          		if ((vce_cmd_set == TIA_IS_101) && (!vce_ctl_tone_rpt_active))
            		  i = 'r';
          		else
            		  return (type);
*/ /* ramn 2/26/96 */
         	}
         	else
          		return (FALSE);
		  	break;


		/* ramn 3/11/96 */
			case 'q':  /* 3/16/96 */
			case SILENCE:
				if(vce_mode == RECEIVE_MODE)
				{
					if(vce_silence_detc_timer) /* ramn 2/23/96 */
						i = 's';
					else
    					i = 'q';
				}
				else
					return(FALSE);

			break;

			
			default:
				return(FALSE);
		}	/* switch */
		/* If currently sending or receiving data then place the call progress
     information into the voice DTE buffers. Else the info goes back 
     through the ACU */
	  if (vce_mode == TRANSMIT_MODE || vce_mode == RECEIVE_MODE)
	  {
   	   while (voice_dte_to_free() < 2)
      	    ;
        if ((type >= DETECTED_DTMF_0 && type <= DETECTED_DTMF_D) ||
		            (type == DETECTED_DTMF_AST) || (type == DETECTED_DTMF_PND))
 		  {	
		  		if(vce_mode == RECEIVE_MODE)  /* ramn 2/21/96 */
				{
					voice_dte_to_char(DLE);	/* added by ramn on 1/15/96 */
					voice_dte_to_char(ASCII_SLASH); /* DLE</> before reporting DTMF and 
											DLE <~> after reporting DTMF to compily
											with IS-101. the DP does not at this time
											send us the start and end of DTMF */
				}
   	   	voice_dte_to_char(DLE);
      		voice_dte_to_char(i);
				voice_dte_to_char(DLE);
				voice_dte_to_char(ASCII_TILDA);	/* ~ */
		  }
		  else
		  {
   	   	voice_dte_to_char(DLE);
      		voice_dte_to_char(i);
		  }				
	  }
	  else
	  {
/* added by ramn on 1/15/96 */
/* for cirrus implementation we send DLE</> before reporting DTMF and 
	DLE <~> after reporting DTMF to compily with IS-101. the DP does not at this time
	send us the start and end of DTMF */
			
        if ((type >= DETECTED_DTMF_0 && type <= DETECTED_DTMF_D) ||
		            (type == DETECTED_DTMF_AST) || (type == DETECTED_DTMF_PND))
 		  {	
	        	vce_array[0] = DLE;
   	     	vce_array[1] = i;
      	  	vce_array[2] = DLE;
        		vce_array[3] = ASCII_TILDA;	/* ~ */
				vce_array[index] = '\0';
				
		  }
		  else
		  {
	        	vce_array[0] = DLE;
   	     	vce_array[1] = i;
      	  	vce_array[2] = '\0';
				if((type == DETECTED_RINGBACK) || (type == DETECTED_BUSY))
					return(type);		/* ramn 2/26/96 */
				
		  }		
				/* ramn 2/27/96 */
          /**msg = (ubyte *)&vce_array[0]; */
				info_ptr = (ubyte *)&vce_array[0];
				output_info(info_ptr,UNFORMATTED); 
				vce_array[0] = '\0';
			
     }
    /*    return (type);*/
    }
    return (FALSE);
}


#if 0
/**************** from here by ramn 10/10/95 *******************************/
/* commented by ramn on 10/10/95 */
ubyte vce_call_progress(ubyte **msg)
{
    ubyte type,i,index=2;
    ulong event;

    /* Determine the events enabled by the user for the specified mode */
    if (vce_mode == ONLINE_COMMAND || vce_mode == OFFLINE_COMMAND)
        event = vce_idl_events;
    if (vce_mode == RECEIVE_MODE)
        event = vce_rx_events;
    if (vce_mode == TRANSMIT_MODE)
        event = vce_tx_events;

    if ((type = dp_vce_call_progress()) != NOTHING_DETECTED)
    {
        if ((type >= DETECTED_DTMF_0 && type <= DETECTED_DTMF_D) ||
            (type == DETECTED_DTMF_END) || (type == DETECTED_DTMF_SHIELD))
        {
            if ((event & EVENT_DTMF) &&(!vce_dtmf_report_delay)) /* ramn 10/10/95 */
            {
                switch (type)
                {
                  case DETECTED_DTMF_SHIELD:
                      i = '/';
                      break;

                  case DETECTED_DTMF_END:
                      i = '~';
                      break;

		            case DETECTED_DTMF_0:
		            case DETECTED_DTMF_1:
		            case DETECTED_DTMF_2:
		            case DETECTED_DTMF_3:
		            case DETECTED_DTMF_4:
		            case DETECTED_DTMF_5:
		            case DETECTED_DTMF_6:
		            case DETECTED_DTMF_7:
		            case DETECTED_DTMF_8:
		            case DETECTED_DTMF_9:
		                i = type + '0';
		                break;

		            case DETECTED_DTMF_AST:
		                i = '*';
		                break;
  	
		            case DETECTED_DTMF_PND:
		                i = '#';
		                break;

		            case DETECTED_DTMF_A:
		                i = 'A';
		                break;

		            case DETECTED_DTMF_B:
		                i = 'B';
		                break;
  	
		            case DETECTED_DTMF_C:
		                i = 'C';
		                break;

		            case DETECTED_DTMF_D:
		                i = 'D';
  	                   break;
                }
            }
            else
                return (FALSE);
        }

        if (type == DETECTED_2100HZ)
        {
            if ((event & EVENT_2100HZ) && !vce_2100hz_msg_delay)
            {
                i = 'a';
                vce_2100hz_msg_delay = DELAY_FOR_2100HZ_MSG;
            }
            else
                return (FALSE);
        }

        if (type == DETECTED_BUSY) 
        {
            if (event & EVENT_BUSY) 
            {
               if (vce_ctl_tone_rpt_active)
               {
                   return (type);
               }
               else if (!vce_busy_msg_delay)
               {
                   i = 'b';
                   vce_busy_msg_delay = DELAY_FOR_BUSY_MSG;
               }
               else
                return (FALSE);
            }
            else
                return (FALSE);
        }

        if (type == DETECTED_1100HZ)
        {
            if ((event & EVENT_1100HZ) && !vce_1100hz_msg_delay)
            {
                i = 'c';
                vce_1100hz_msg_delay = DELAY_FOR_1100HZ_MSG;
            }
            else
                return (FALSE);
        }

        if (type == DETECTED_DIALTONE)
        {
            if ((event & EVENT_DIALTONE) && !vce_dialtone_msg_delay)
            {
                i = 'd';
                vce_dialtone_msg_delay = DELAY_FOR_DIALTONE_MSG;
            }
            else
                return (FALSE);
        }

        if (type == DETECTED_1300HZ)
        {
            if ((event & EVENT_1300HZ) && !vce_1300hz_msg_delay)
            {
                i = 'e';
                vce_1300hz_msg_delay = DELAY_FOR_1300HZ_MSG;
            }
            else
                return (FALSE);
        }

        if (type == DETECTED_2225HZ)
        {
            if ((event & EVENT_2225HZ) && !vce_2225hz_msg_delay)
            {
                i = 'f';
                vce_2225hz_msg_delay = DELAY_FOR_2225HZ_MSG;
            }
            else
                return (FALSE);
        }

        if (type == DETECTED_RING_ON)
        {
            if (event & EVENT_RING)
            {
                return (type);
            }
            else
                return (FALSE);
        }

        if (type == DETECTED_RING_OFF)
        {
            if (event & EVENT_RING)
            {
                return (type);
            }
            else
                return (FALSE);
        }

        if (type == DETECTED_RINGBACK)
        {
            if (event & EVENT_RINGBACK) 
            {
                if ((vce_cmd_set == TIA_IS_101) && (!vce_ctl_tone_rpt_active))
                    i = 'r';
                else
                    return (type);
            }
            else
                return (FALSE);
        }

        /* If currently sending or receiving data then place the call progress
           information into the voice DTE buffers. Else the info goes back 
           through the ACU */
        if (vce_mode == TRANSMIT_MODE || vce_mode == RECEIVE_MODE)
        {
            while (voice_dte_to_free() < 2)
                ;
            voice_dte_to_char(DLE);
            voice_dte_to_char(i);
        }
        else
        {
            vce_array[0] = DLE;
            vce_array[1] = i;
            vce_array[index] = '\0';
            *msg = (ubyte *)&vce_array[0];
        }
        return (type);
    }
    return (FALSE);
}
#endif
/****************tilll here by ramn 10/10/95 *******************************/

/*******************************************************************************
/
/   Routine: vce_isnum
/
/   Author: RSA
/
/   Creation Date: 12/14/1993.
/
/   Description: This routine will determine if the char passed in is a 
/                digit or not.
/
/   Input Parameters: ubyte ch
/
/   Output Parameters: ubyte flag
/
/   Global Variables Changed:  None
/
/   Users: vc00pr.c
/
/   -------------------------------------------------------------
/   -			Modifications			    -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
ubyte vce_isnum(ubyte ch)
{
    if ((ch >= '0') && (ch <= '9'))
        return(TRUE);
    else
        return(FALSE);
}

/*******************************************************************************
/
/   Routine: vce_TIA_to_rw_event_format
/
/   Author: RSA
/
/   Creation Date: 10/14/92
/
/   Description: This routine will take the TIA event format and produce a byte
/		 which indocates the selected events in the Rockwell format.
/
/   Input Parameters: ulong num - Contains the selected events in the TIA format
/
/   Output Parameters: ubyte i - Contains the selected events in the Rockwell
/				 format.
/
/   Global Variables Changed:  None
/
/   Users: voice_execute_command()
/
/   -------------------------------------------------------------
/   -			Modifications			    -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
#if 0
ubyte vce_TIA_to_rw_event_format(ulong num)
{
    ubyte i=0;

    if (num & EVENT_DTMF)
	i |= RW_EVENT_DTMF;
    if (num & EVENT_1300HZ)
	i |= RW_EVENT_1300HZ;
    if (num & EVENT_1100HZ)
	i |= RW_EVENT_1100HZ;
    if (num & EVENT_2100HZ)
	i |= RW_EVENT_2100HZ;
    if (num & EVENT_2225HZ)
	i |= RW_EVENT_2225HZ;
    if ((num & EVENT_RINGBACK) || (num & EVENT_BUSY) || (num & EVENT_DIALTONE))
	i |= RW_EVENT_CALL_PROG;

    return (i);
}
#endif /* ramn 2/29/96 */


/*******************************************************************************
/
/   Routine: vce_a_to_h_long
/
/   Author: RSA
/
/   Creation Date: 10/27/1993.
/
/   Description: This routine will parse the command buffer and return a hex
/                long.
/
/   Input Parameters: None
/
/   Output Parameters: ulong data_byte - Hex longword
/
/   Global Variables Changed:  None
/
/   Users: pnd_VEM()
/
/   -------------------------------------------------------------
/   -			Modifications			    -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
ulong vce_a_to_h_long(void)
{
    ulong data_long = 0;
    ubyte i;

    vce_long_error_occurred = FALSE;

    for (i = 0; i <= 7; i++)
    {
        /* if 0-9 then subtract from 0 to get the offset */
        data_long <<= 4;
        if ((*vce_cmd_ptr >= '0') && (*vce_cmd_ptr <='9'))
            data_long |= *vce_cmd_ptr - '0';
        /* if A-F then subtract from A to get the offset */
        else if ((*vce_cmd_ptr >= 'A') && (*vce_cmd_ptr <='F'))
            data_long |= *vce_cmd_ptr - 'A' + 10;
        /* if a-f then subtract from a and subtract from A to get the offset */
        else if ((*vce_cmd_ptr >= 'a') && (*vce_cmd_ptr <= 'f'))
            data_long |= *vce_cmd_ptr - 'a' + 10;
        else
            vce_long_error_occurred = TRUE;
        vce_cmd_ptr++; 
    }
    if ((*vce_cmd_ptr != NULL) && (*vce_cmd_ptr != ' ') && (*vce_cmd_ptr != ';'))
            vce_long_error_occurred = TRUE;

    return(data_long);
}
/*****************************************************************************
*
* routines added by ramn 
*
*
*****************************************************************************/
/*******************************************************************************
/
/   Routine: vce_b_to_a_null
/
/   Author : Ramn
/
/   Creation Date: 10/10/95
/
/   Description : This Routine converts the input byte value to it's ASCII
/                 value. and put a null at the end and no CRLF
/
/   Input Parameters: ubyte num - number to be converted
/
/   Output Parameters: None
/
/   Global Variables Changed: vce_array[]
/
/   Users: voice_execute_command()
/
/   -------------------------------------------------------------
/   -			Modifications			    -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void vce_b_to_a_null(ubyte num)
{
    ubyte i,pt[4],*ptr,*loc_ptr;

    loc_ptr = (ubyte *)&pt[0];
    for (i=0; i<3; i++)
    {
		*loc_ptr++ = (num % 10) + '0';
		num = num / 10;
    }

    /* Remove all leading 0's */
    for (i=3; i>0; i--)
    {
		if (*--loc_ptr != '0')
	   	break;
    }

    /* Point to the beginning of vce_array.  Need to produce the formatted
       ASCII string to be sent to the terminal */
    ptr = (ubyte *)&vce_array[0];

    if (!i)
		*ptr++ = '0';

    while (i>0)
    {
		*ptr++ = *loc_ptr--;
        i--;
    }

    *ptr = '\0';
}

/*******************************************************************************
/
/   Routine: vce_word_to_a_null
/
/   Author : RAMN
/
/   Creation Date: 10/10/95
/
/   Description : This Routine converts a word value to an ASCII string.
/
/   Input Parameters: uword num - number to be converted
/
/   Output Parameters: ubyte *vce_array - Pointer to ASCII string
/
/   Global Variables Changed:  vce_array[]
/
/   Users: voice_execute_command()
/
/   -------------------------------------------------------------
/   -			Modifications			    -
/   -------------------------------------------------------------
/
/   Author & Date:	RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void vce_store_word_to_a_null(uword num, ubyte **ptr)
{
	ubyte i,pt[6],*loc_ptr;

   loc_ptr = (ubyte *)&pt[0];
   for (i=0; i<5; i++)
   {
		*loc_ptr++ = (num % 10) + '0';
		num = num / 10;
   }

   /* Remove all leading 0's */
   for (i=5; i>0; i--)
   {
		if (*--loc_ptr != '0')
	   break;
   }

   if (!i)
		*(*ptr)++ = '0';

   while (i>0)
   {
		*(*ptr)++ = *loc_ptr--;
      i--;
   }
	
	*(*ptr) = '\0';
}




