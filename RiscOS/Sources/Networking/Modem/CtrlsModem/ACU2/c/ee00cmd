/****************************************************************************
/
/      Copyright 1995. All Rights Reserved by:
/          RSA
/          7701 Six Forks Road
/          Suite 120
/          Raleigh, NC  27615
/          (919) 846-7171
/
/      This document contains material confidential to RSA its contents must
/      not be revealed, used or disclosed to anyone or company with out
/      written permission by RSA.  The information contained herein is solely
/      for the use of RSA.
/
/      File:           ee00cmd.c
/
/      Module Version: ACU 4.??
/
/      Function:       This file contains code reading and writing to the
/                      EEPROM.
/
/      Product:        ACU core code
/
/      History:        Original version (4.??)
/
/          Created:    07/19/95
/
/          ---------------------------------------------------------
/          -                   Modifications                       -
/          ---------------------------------------------------------
/
/          Author & Date:  RSA
/          Description:
/          Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "acu_def.h"
#include "acu_pro.h"
#include "acu_mem.h"
#include "ee_def.h"
#include "mt_pro.h"

#if 0 /* ramn 9/11/96 */
/* prototypes for eeprom commands */
void bang_EE_e(ubyte *cmd_param_ptr);
void bang_EE_q(ubyte *cmd_param_ptr);
#endif



/*******************************************************************************
/
/      Routine:        bang_EE_e
/
/      Author:         RSA
/
/      Creation Date:  07/19/95
/
/      Description:    performs writes to the EEPROM
/
/      Input Parameters: *cmd_param_ptr - pointer to the command's parameters
/                      (a compound ubyte)
/
/      Output Parameters: None
/
/      Global Variables Changed:  None
/
/      Users:
/
/      -------------------------------------------------------------
/      -                        Modifications                        -
/      -------------------------------------------------------------
/
/      Author & Date:    RSA
/      Description:
/      Reason:
/
*******************************************************************************/
#if 0 /* ramn 9/11/96 */
void bang_EE_e(ubyte *cmd_param_ptr)
{
   ubyte field;
   ubyte value;
   uword address;
   ubyte eeprom_error;

   field = *cmd_param_ptr;

   if (!field)
      error_occurred = TRUE;

   do
   {
      field = *cmd_param_ptr++;
      value = *cmd_param_ptr++;

      switch (field)
      {
         case 0: /* data */
            if (error_occurred)
               break;
            /* write data to eeprom */
            eeprom_error = modem_write_data(address,1,(ubyte *)&temp_array[0]);
            if (eeprom_error == TRUE)
               error_occurred = TRUE;
            else
            {
               temp_array[0] = modem_eeprom_checksum();
               modem_write_data(CHECKSUM_ADDR,CHECKSUM_SIZE,(ubyte *)&temp_array[0]);
            }
            break;

         case 1: /* address */
            address = ((ubyte)value & 0x00ff);
            if (address > (MFG_PAD_SIZE-1))
               error_occurred = TRUE;
            address += MFG_PAD_BASE;
            break;

         case 2:
            temp_array[0] = value; /* conversion already done by parser */
            break;

         default:
            error_occurred = TRUE;
            break;

      } /*switch*/
   }
   while(field);
}
#endif

/*******************************************************************************
/
/      Routine:        bang_EE_q
/
/      Author:         RSA
/
/      Creation Date:  07/19/95
/
/      Description:    performs reads from the EEPROM
/
/      Input Parameters: *cmd_param_ptr - pointer to the command's parameter
/                      (a compound ubyte)
/
/      Output Parameters: None
/
/      Global Variables Changed:  None
/
/      Users:
/
/      -------------------------------------------------------------
/      -                        Modifications                        -
/      -------------------------------------------------------------
/
/      Author & Date:    RSA
/      Description:
/      Reason:
/
*******************************************************************************/
#if 0 /* ramn 9/11/96 */
void bang_EE_q(ubyte *cmd_param_ptr)
{
   ubyte field;
   ubyte value;
   uword address;
   uword length = 0;
   ubyte eeprom_error;
   ubyte *ptr;
   ubyte i;
   ubyte j;

   field = *cmd_param_ptr;

   if (!field)
      error_occurred = TRUE;

   ptr = (ubyte *)&ee_array[0];

   do
   {
      field = *cmd_param_ptr++;
      value = *cmd_param_ptr++;

      switch (field)
      {

         case 0: /* end of command buffer */
            if (error_occurred)
               break;
            if (length == 0x00) /* default length */
               length = 1;
            /* don't allow length to run over pad size */
            if ((address + length) > (MFG_PAD_BASE + MFG_PAD_SIZE - 1))
               length = (MFG_PAD_BASE + MFG_PAD_SIZE - address);
            eeprom_error = modem_read_data(address,length,(ubyte *)&temp_array[0]);
            if (eeprom_error == TRUE)
               error_occurred = TRUE;
            else
            {
               /* convert bytes to two ASCII chars */
               for (i=0; i<length; i++)
               {
                  j = (3*i);
                  ee_array[j] = (((temp_array[i] >> 4) & 0x0f) | 0x30);
                  if (ee_array[j] > 0x39)
                     ee_array[j] += 0x07;
                  ee_array[j+1] = ((temp_array[i] & 0x0f) | 0x30);
                  if (ee_array[j+1] > 0x39)
                     ee_array[j+1] += 0x07;
                  if (i != (length-1))
                     ee_array[j+2] = 0x2c;
                  else
                     ee_array[j+2] = 0x00;
               }
               output_send_cr_lf();
               output_info((ubyte *)&ee_array,(ubyte)sr14.verbose_form);
            }
            break;

         case 1:  /* first field is address */
            address = ((ubyte)value & 0x00ff);
            if (address > (MFG_PAD_SIZE-1))
            {
               error_occurred = TRUE;
               break;
            }
            address += MFG_PAD_BASE;
            break;

         case 2:  /* second (optional) field is length */
            length =((ubyte)value & 0x00ff);
            if (length > 0x10)
            {
               error_occurred = TRUE;
               break;
            }
            break;

         default:
            error_occurred = TRUE;
            break;

      } /*switch*/
   }
   while(field);
}
#endif
