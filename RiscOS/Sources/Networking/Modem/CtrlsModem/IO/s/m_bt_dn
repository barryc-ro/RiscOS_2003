;
;	given below is the register requirements for the donwloding
;	of the cutlass boot code.
;
;	r0 = start address of the boot code in the musket flash
;	r1 = addr offset of the boot code in the musket flash
;	r2 = length of the boot code
;	r3 = address of where the boot code is in the cutlass
;	r4 = actual op-code of the boot code to be loaded in the cutlass.
;	r5 = maskedout upper byte of opcode
; 	r6 = address of com ram as mapped in the musket

;
;	constants defined for this download.
;
;	START_OF_BOOT_CODE - this is where the boot resides in the musket
;			     flash
;	UPLD_DNLD_REGIS_F8 - com ram address F8h
;	UPLD_DNLD_REGIS_F9 - com ram address F9h
;	UPLD_DNLD_DATA_REGIS - comram address FAh
;	CP_CONTROL_REGISTER - comram address FCh
;	CP_DNLD_ENABLE_FLAG - value to program the CP control regis to enable
;			    - download
;	CP_RESET_AND_RUN_BOOT_CODE - value to write to the CP control regis
;				   - to start the boot code execution

                
        AREA |m_bt_dn|, CODE, READONLY

                INCLUDE     m_bt_dn.h        
		EXPORT	    Start_dnld
	
                KEEP


Start_dnld
	ldr 	r0,=BOOT_CODE_INFO
	ldr 	r3,[r0] 		; load start address of boot code
					; in cutlass into r3
	ldr 	r2,[r0,#4]		;load length of boot code in r2
	mov 	r1,#0			;clear the count to 0
	ldr 	r0,=START_OF_BOOT_CODE	; this is where the actual boot code
					; starts

;
; need to reset the dsp and make dsp_cfg = 1 beforegoing forward
;


	ldr 	r6,=COM_RAM
	ldr	r3,=INT_RESET_VECTOR
	ldr 	r4,[r0,r1]		; load the actual cutlass opcode in r4

;write addr to cp for 16-bit cutlass RESET VECTOR in r4.0 - r4.15
    	mov	r5,r3
	mov	r5,r5,lsr #8 	; move upper byte to lower 8 bits
	mov	r7,r3
	strb 	r5,[r6,#UPLD_DNLD_REGIS_F9] ; write high byte of addr to F9h 
					 ; of comram 
	strb 	r7,[r6,#UPLD_DNLD_REGIS_F8] ; write low byte of addr to F8h

;write data to cp for 16-bit cutlass RESET_VECTOR in r4.0 - r4.15
	strb 	r4,[r6,#UPLD_DNLD_DATA_REGIS] ; write low byte of data to Fah 
					 ; of comram 
	mov	r4,r4,lsr #8
	strb 	r4,[r6,#UPLD_DNLD_DATA_REGIS] ; write high byte of data to Fah

;write addr to cp for 16-bit cutlass word in r4.16 - r4.31
	ldr 	r0,=BOOT_CODE_INFO
	ldr 	r3,[r0] 		; load start address of boot code
					; in cutlass into r3
	ldr 	r0,=START_OF_BOOT_CODE	; this is where the actual boot code

    	mov	r5,r3
	mov	r5,r5,lsr #8 	; move upper byte to lower 8 bits
	mov	r7,r3
	strb 	r5,[r6,#UPLD_DNLD_REGIS_F9] ; write high byte of addr to F9h 
					 ; of comram 
	strb 	r7,[r6,#UPLD_DNLD_REGIS_F8] ; write low byte of addr to F8h

;write addr to cp for 16-bit cutlass word in r4.16 - r4.31
	mov	r4,r4,lsr #8
	strb 	r4,[r6,#UPLD_DNLD_DATA_REGIS] ; write low byte of data to Fah 
					 ; of comram 
	mov	r4,r4,lsr #8
	strb 	r4,[r6,#UPLD_DNLD_DATA_REGIS] ; write high byte of data to Fah

	add	r3,r3,#&1
	add	r1,r1,#WORD_INC_OFFSET; inc the count of opcodes dnlded by 1	

Cont_dnlding
	ldr 	r4,[r0,r1]		; load the actual cutlass opcode in r4

;write data to cp for 16-bit cutlass word in r4.0 - r4.15
	strb 	r4,[r6,#UPLD_DNLD_DATA_REGIS] ; write low byte of data to Fah 
					 ; of comram 
	mov	r4,r4,lsr #8
	strb 	r4,[r6,#UPLD_DNLD_DATA_REGIS] ; write high byte of data to Fah
	mov	r4,r4,lsr #8
	strb 	r4,[r6,#UPLD_DNLD_DATA_REGIS] ; write high byte of data to Fah
	mov	r4,r4,lsr #8
	strb 	r4,[r6,#UPLD_DNLD_DATA_REGIS] ; write high byte of data to Fah

	add	r1,r1,#WORD_INC_OFFSET; inc the count of opcodes dnlded by 1	
	cmp	r2,r1			; see if count = length, 
					; if yes then only the reset vector left to be dnlded
	bne	Cont_dnlding	    

Dnld_done_now_verify
	mov	r1,#&0	      		; reset the count to zero

	mov	r3,#INT_RESET_VECTOR

	mov	r5,r3
	mov	r7,r3
	mov	r5,r5,lsr #8
	strb 	r7,[r6,#UPLD_DNLD_REGIS_F8] ; write low byte of addr to F8h
					 ; of comram 
	strb 	r5,[r6,#UPLD_DNLD_REGIS_F9] ; write high byte of addr to F9h 

	ldrb 	r4,[r6,#UPLD_DNLD_DATA_REGIS] ; read low byte of data to Fah
	ldrb 	r5,[r6,#UPLD_DNLD_DATA_REGIS] ; read high byte of data to Fah 
					 ; of comram 
	mov	r8,#0
	mov	r5,r5,lsl #8   	; mov the uper byte to the correct location
	orr 	r8,r8,r5	; mask out the lower byte of opcode
	orr 	r8,r8,r4	; opcode read is in r5

	ldr	r0,=BOOT_CODE_INFO
	ldr	r3,[r0]      		; get the start address boot code in ctl
	ldr 	r0,=START_OF_BOOT_CODE	; this is where the actual boot code

	mov	r5,r3
	mov	r7,r3
	mov	r5,r5,lsr #8
	strb 	r7,[r6,#UPLD_DNLD_REGIS_F8] ; write low byte of addr to F8h
					 ; of comram 
	strb 	r5,[r6,#UPLD_DNLD_REGIS_F9] ; write high byte of addr to F9h 

	ldrb 	r4,[r6,#UPLD_DNLD_DATA_REGIS] ; read low byte of data to Fah
	ldrb 	r5,[r6,#UPLD_DNLD_DATA_REGIS] ; read high byte of data to Fah 
					 ; of comram 
	mov	r5,r5,lsl #24  	; mov the uper byte of second opcode
				; to the correct location
	mov	r4,r4,lsl #16	; same for the lower byte
	orr 	r8,r8,r5
	orr 	r8,r8,r4	; opcode read is in r8

	ldr 	r4,[r0,r1]	; load the actual cutlass opcode in r4

	cmp	r4,r8
	bne	Start_dnld	; opcode does not match restart dnld again

	add	r3,r3,#&1
	add	r1,r1,#WORD_INC_OFFSET	; inc the count of opcodes dnlded by 1	

Cont_verifying
	ldrb 	r4,[r6,#UPLD_DNLD_DATA_REGIS] ; read low byte of data to Fah
	ldrb 	r5,[r6,#UPLD_DNLD_DATA_REGIS] ; read high byte of data to Fah 
					 ; of comram 
	mov	r8,#0
	mov	r5,r5,lsl #8   	; mov the uper byte to the correct location
	orr 	r8,r8,r5	; mask out the lower byte of opcode
	orr 	r8,r8,r4	; opcode read is in r5

	ldrb 	r4,[r6,#UPLD_DNLD_DATA_REGIS] ; read low byte of data to Fah
	ldrb 	r5,[r6,#UPLD_DNLD_DATA_REGIS] ; read high byte of data to Fah 
					 ; of comram 
	mov	r5,r5,lsl #24	       	; mov the uper byte of second opcode
				; to the correct location
	mov	r4,r4,lsl #16		; same for the lower byte
	orr 	r8,r8,r5	
	orr 	r8,r8,r4	; opcode read is in r8

	ldr 	r4,[r0,r1]	; load the actual cutlass opcode in r4

	cmp	r4,r8
	bne	Start_dnld	; opcode does not match restart dnld again
	add	r1,r1,#WORD_INC_OFFSET	; inc the count of opcodes dnlded by 1	
	cmp	r2,r1		; see if count = length, 
				; if yes then only the reset vector left to be dnlded
	bne	Cont_verifying	    

Verify_ok_reset_dsp

; here need to first set dsp_cfg=0 before going on

;	ldr    r4,=CP_DNLD_ENABLE_FLAG
;	strb   r4,[r6,#CP_CONTROL_REGISTER]  
;	ldr    r4,=CP_RESET_AND_RUN_BOOT_CODE
;	strb   r4,[r6,#CP_CONTROL_REGISTER]  
	mov    pc,r14

;:::::;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; 
; this is where we download the actual dsp code
;
; the usage of registers is the same as the download of the boot code
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	END







