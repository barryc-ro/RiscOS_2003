;/***************************************************************************
;/
;/    Copyright 1995. All Rights Reserved by:
;/    
;/        CIRRUS LOGIC Inc
;/        3100 West Warren Ave
;/        Fremont, CA. 94538
;/        (510) 623-8300
;/
;/
;/    This document contains material confidential to CIRRUS LOGIC its 
;/    contents must not be revealed, used or disclosed to anyone or 
;/    company with out written permission by CIRRUS LOGIC.  
;/    The information contained herein is solely for the use of CIRRUS LOGIC.
;/
;/    File:  parallel.s
;/
;/    Module Version: ACU 1.00
;/
;/    Function:  This file contains the power up and stack initialization 
;/               routine for the ARM Risk Machine.
;/
;/    Product:  ACU 
;/
;/    History:
;/
;/         Created:  06/20/95
;/
;/         ---------------------------------------------------------
;/         -              Modifications            -
;/         ---------------------------------------------------------
;/
;/         Author & Date: CIRRUS LOGIC
;/         Description:
;/         Reason:
;/
;/****************************************************************************
			 
			 
			 
			 KEEP

	   AREA |Aparallel|, CODE, READONLY

		INCLUDE     PARALLEL.H        
		INCLUDE     POWERUP.H





	   EXPORT  Install_Int
	   EXPORT  load_interrupts_vectors
	   EXPORT  enable_int
	   EXPORT  disable_int
	   IMPORT  process_acu_timer
	   IMPORT  dte_interrupt_rx
	   IMPORT  dte_interrupt_tx
	   IMPORT  dte_mode
	   IMPORT  slN
	   IMPORT  dce_line_tx_int
	   IMPORT  dce_line_rx_int
	   EXPORT  line_disable_interrupts
	   EXPORT  line_enable_interrupts
	   EXPORT  ParallelSerialIrqInt
	   EXPORT  load_eetimer
	   EXPORT  reload_fifo_timer
	   EXPORT  reload_no_fifo_timer
	   EXPORT  reload_no_fifo_fax_timer
	   EXPORT  parity
	   IMPORT  Tx_char
	   IMPORT  Parity_e_o
	   IMPORT  poll_mode_enable
	   EXPORT  install_poll_dte_interrupt
	   EXPORT  install_poll_voice_dte_interrupt
	   EXPORT  install_interrupt_dte_rx 
	   EXPORT  start_fifo_timer
	   EXPORT  stop_fifo_timer
	   EXPORT  reload_voice_fifo_timer_fast   ;ramn 8/29/96
	   EXPORT  reload_voice_fifo_timer_slow
	   IMPORT  vce_mode
	   EXPORT  install_dte_poll_no_flow

;mrm102696
	   IMPORT  edge_cycle
	   IMPORT  dte_check_parity_bit	   	
	
Install_Int
 
				
			LDR     r1, =ParUartStartLocation 
			 
			;OE=PE=FE=BI=0
			MOV     r0, #HlsrDefaultValue           
			STRB    r0, [r1, #HLSR]                  

			 
			;RI =LO & DCD = DSR = CTS = HI
			MOV     r0, #&b0
			STRB    r0, [r1, #HMSR]


;mrm4696
;clear the all timer control registers

		LDR       R0, =TimerControlReg0
		LDR	  R1,[R0]
		AND	  R1,R1,#&00		
		STR       R1,[R0]
	
		LDR       R0, =TimerControlReg1
		LDR	  R1,[R0]
		AND	  R1,R1,#&00		
		STR       R1,[R0]
	
		LDR       R0, =TimerControlReg2
		LDR	  R1,[R0]
		AND	  R1,R1,#&00		
		STR       R1,[R0]
	
		;set timer3 in repeat mode
		LDR       R0, =TimerControlReg3        
		MOV       R1,#&00                  ;REP. MODE + RELOAD
		STR       R1,[R0]


;mrm8796
;sw flow cntl data mode only fix





		LDR     R0,=ParallelFiqVecPoll
		LDR     R2,=Timer3IntLocation  
		LDR     R1,[R0]  
		SUB     R1,R1,#FiqLocation + 8  
		MOV     R1,R1,LSR #2    
		ORR     r1, r1, #&ea000000   
		STR     R1,[R2]            

 	
		LDR       R0, =TimerPreScalarReg3         
		;MOV       R1,#&20                    ;LOAD PRE SCALE TIMER
		;MOV       R1,#&1d                    ;LOAD PRE SCALE TIMER
;mrm82296
		MOV       R1,#&8                  ;LOAD TIMER DIV.
		STR       R1,[R0]
		    
		LDR       R0, =TimerDividerReg3         
		;MOV       R1,#&74                    ;LOAD PRE SCALE TIMER
		;MOV       R1,#&8                  ;LOAD TIMER DIV.
;mrm82296
		;MOV       R1,#&1d0                    ;LOAD PRE SCALE TIMER
		MOV       R1,#&1d                    ;LOAD PRE SCALE TIMER
		STR       R1,[R0]
	
		;set timer3 in repeat mode
		LDR       R0, =TimerControlReg3        
		MOV       R1,#&00                  ;REP. MODE + RELOAD
		STR       R1,[R0]



;mrm4696
;connect the timer0 to irq interrupt
		
		LDR       R0, =InterruptSourceReg                   
		LDR       R1,[R0]
		LDR	  R2,=IS_tmr0_irq	
		AND       R1,R1,R2            		
		STR       R1,[R0]
	

;mrm62796
		LDR       R0, =InterruptSourceReg                   
		LDR       R1,[R0]
		LDR	  R2,=IS_tmr2_irq	
		AND       R1,R1,R2            		
		STR       R1,[R0]
		

;Write the value in R1 to the FIQ (0x1C)           


		LDR     R0,=ParallelUartVecFiq
		LDR     R2,=TxBufferNotEmptyLocation  
		LDR     R1,[R0]  
		SUB     R1,R1,#FiqLocation + 8  
		MOV     R1,R1,LSR #2    
		ORR     r1, r1, #&ea000000   
		STR     R1,[R2]            


;Write the value in R1 to the IRQ (0x18)           


		LDR     R0,=ParallelUartVecIrq
		LDR     R2,=Timer0IntLocation  
		LDR     R1,[R0]  
;mrm4696
		SUB     R1,R1,#IrqLocation + 8  
		MOV     R1,R1,LSR #2    
		ORR     r1, r1, #&ea000000
		STR     R1,[R2]            


		LDR     R0,=ParallelTxVecFiq
		LDR     R2,=Timer2IntLocation  
		LDR     R1,[R0]  
		SUB     R1,R1,#IrqLocation + 8  
		MOV     R1,R1,LSR #2    
		ORR     r1, r1, #&ea000000
		STR     R1,[R2]            




;Install the Branch instruction from IRQ interrupt location 0x18 to
;Serial or Parallel mode Interrupt routines.   

		

	    
		LDR       R0, =InterruptEnableReg                   
		LDR       R1,[R0]
		LDR	    R2,=IE_tmr2+IE_tmr1+IE_tmr0+IE_ptxne+IE_PnP	
		ORR       R1,R1,R2            		;ENABLE INTERRUPS   
		STR       R1,[R0]
	    
	    
				


;Set polling rate for timer0 is 500 micro sec.


		LDR       R0, =TimerBaseClockReg               
		MOV       R1,#&8                   ;LOAD PRE SCALE TIMER
		STR       R1,[R0]

;mrm62796
 		LDR       R0, =TimerPreScalarReg0         
		;MOV       R1,#&29                    ;LOAD PRE SCALE TIMER
		MOV       R1,#&4D                    ;LOAD PRE SCALE TIMER
		STR       R1,[R0]
		    
		LDR       R0, =TimerDividerReg0         
		MOV       R1,#&49                  ;LOAD TIMER DIV.
		STR       R1,[R0]
		
 		LDR       R0, =TimerPreScalarReg2         
		MOV       R1,#&19                   ;LOAD PRE SCALE TIMER
		STR       R1,[R0]
		    
;mrm62796
		LDR       R0, =TimerDividerReg2         
;		MOV       R1,#&52                  ;LOAD TIMER DIV.
		MOV       R1,#&56                  ;LOAD TIMER DIV.
		STR       R1,[R0]
	
load_interrupts_vectors



;mrm4696
		LDR       R0, =TimerControlReg1
		LDR	  R1,[R0]
		AND	  R1,R1,#&00		
		STR       R1,[R0]
	
		
		LDR       R0,=TimerVecIrq
		LDR       R2,=Timer1IntLocation  
		LDR       R1,[R0]  
		SUB       R1,R1,#FiqLocation + 8  
		MOV       R1,R1,LSR #2    
		ORR       R1, R1, #&ea000000   
		STR       R1,[R2]            



		LDR       R0, =TimerPreScalarReg1         
		MOV       R1,#&14                  ;LOAD PRE SCALE TIMER
		STR       R1,[R0]
		    
		LDR       R0, =TimerDividerReg1         
		MOV       R1,#&48                  ;LOAD TIMER DIV.
		STR       R1,[R0]
		

		

		;set timer0 in repeat mode
		LDR       R0, =TimerControlReg0        
		MOV       R1,#&07                  ;STRT + REP. MODE + RELOAD 
		STR       R1,[R0]


		;set timer2 in repeat mode
		LDR       R0, =TimerControlReg2        
		MOV       R1,#&07                  ;STRT + REP. MODE + RELOAD 
		STR       R1,[R0]

		;set timer1 in repeat mode
		LDR       R0, =TimerControlReg1        
		MOV       R1,#&07                  ;REP. MODE + RELOAD
		STR       R1,[R0]

;mrm8796
;sw flow cntl data mode only fix

		;set timer3 in repeat mode
		LDR       R0, =TimerControlReg3        
		MOV       R1,#&07                  ;REP. MODE + RELOAD
		STR       R1,[R0]



		MOV       R15,R14






reload_fifo_timer

 		LDR       R0, =TimerPreScalarReg2         
		;MOV       R1,#&1b                   ;LOAD PRE SCALE TIMER
		MOV       R1,#&2D                   ;LOAD PRE SCALE TIMER
		STR       R1,[R0]
		MOV       R15,R14
		
;ramn 8/29/96
reload_voice_fifo_timer_fast

 		LDR       R0, =TimerPreScalarReg2         
		MOV       R1,#&20                   ;LOAD PRE SCALE TIMER
		STR       R1,[R0]
		MOV       R15,R14

reload_voice_fifo_timer_slow

 		LDR       R0, =TimerPreScalarReg2         
		MOV       R1,#&e0                   ;LOAD PRE SCALE TIMER
		STR       R1,[R0]
		MOV       R15,R14
		


	   
reload_no_fifo_timer

 		LDR       R0, =TimerPreScalarReg2         
		MOV       R1,#&03                   ;LOAD PRE SCALE TIMER
		STR       R1,[R0]
		MOV       R15,R14
	
reload_no_fifo_fax_timer

 		LDR       R0, =TimerPreScalarReg2         
		MOV       R1,#&19                   ;LOAD PRE SCALE TIMER
		STR       R1,[R0]
		MOV       R15,R14
	

load_eetimer
		LDR       R0, =TimerControlReg0
		LDR	  R1,[R0]
		AND	  R1,R1,#&00		
		STR       R1,[R0]
	
		LDR       R0, =TimerControlReg1        
		LDR	  R1,[R0]
		AND	  R1,R1,#&00		
		STR       R1,[R0]

		LDR       R0, =TimerControlReg2        
		LDR	  R1,[R0]
		AND	  R1,R1,#&00		
		STR       R1,[R0]

;mrm8796
;sw flow cntl data mode only fix

		LDR       R0, =TimerControlReg3
		LDR	  R1,[R0]
		AND	  R1,R1,#&00		
		STR       R1,[R0]


		


		LDR     R0,=EEupdatetimervec
	        LDR     R2,=Timer1IntLocation  
		LDR     R1,[R0]  
		SUB     R1,R1,#FiqLocation + 8  
		MOV     R1,R1,LSR #2    
		ORR     r1, r1, #&ea000000   
		STR     R1,[R2]



		LDR       R0, =edge_cycle        
		MOV	  R1,#00	
		STRB      R1,[R0]
		


		LDR       R0, =TimerBaseClockReg               
		MOV       R1,#&8                   ;LOAD PRE SCALE TIMER
		STR       R1,[R0]


;3/16/96, shujin, old 18*10=180, new 4*8=32, need 2.7 mS for pnp 4 bytes access. 		    
;shujin testing, old 18*10=180, new 3*8=24, need 2.4mS for pnp 4 bytes access. 		    
;time cont  worked (new musket)                         failed
;----------------------------------------------------------------------
;3* 6= 18                                               eewrite
;3* 7= 21    eewrite, beta, EEB, pnp                         
;3* 8= 24    eewrite, beta, EEB, pnp
;3*10= 30    eewrite, beta, EEB, pnp

;4* 5= 20                                               powerup
;4* 6= 24    eewrite, beta, EEB, pnp
;4* 8= 32    eewrite, beta, EEB                         pnp
;
		LDR       R0, =TimerPreScalarReg1         
		MOV       R1,#4         ;old &12 LOAD PRE SCALE TIMER
		STR       R1,[R0]
		    
		LDR       R0, =TimerDividerReg1         
		MOV       R1,#6        ;old &0a LOAD TIMER DIV.
		STR       R1,[R0]


		;set timer1 in repeat mode
		LDR       R0, =TimerControlReg1        
		MOV       R1,#&07                  ;STRT + REP. MODE + RELOAD 
		STR       R1,[R0]
	

		MOV       R15,R14





EEupdatetimer

;MRM4696
;added the interrup clr for the new musket


		LDR       R8, =InterruptClearReg                   
		LDR       R9,[R8]
		MOV	  R9,#IC_tmr1
		STR       R9,[R8]

		LDR       R8, =edge_cycle        
		LDRB 	  R9,[R8]
		CMP	  R9,#01
		BEQ	  set_edge_to_zero

		MOV	  R9,#01		
		STRB      R9,[R8]

                LDR       R8,=GPR0
                MOV       R9,#&44      
                STR       R9,[R8]     
                
		B         Exit_Int



set_edge_to_zero

		MOV       R9,#00
                STRB      R9,[R8]

                LDR       R8,=GPR0
                MOV       R9,#&40      
                STRB      R9,[R8]     

;RETRUN     

Exit_Int
 
		SUBS     R15,R14,#&4                     
	     	

; -----------------------------------------
; This is the serial port interrupt handler
; -----------------------------------------
; an IT from the serial port has been detected.
; At this time we do not have the interrupt enabled 
; the interrupt is connected to the H/W timer which upon 
; timeout we also service this routine

ParallelSerialIrqInt


			STMDB   R13!, {R0-R12,R14}
;MRM4696
;added the interrup clr for the new musket


			LDR       R0, =InterruptClearReg                   
			LDR       R1,[R0]
			MOV	  R1,#IC_tmr0	
			STR       R1,[R0]

			BL        dce_line_tx_int
			BL        dce_line_rx_int

	  	 	LDR       R0, =ParUartStartLocation 
			LDR	  R1,[R0,#HLSR]
			AND	  R1,R1,#&60
			CMP	  R1,#&20
			BEQ	  Set_Temt_bit		
			B	  Exit_int	

Set_Temt_bit		


;mrm41796 
;donot perform read modify write of HLSR

			ORR	  R1,R1,#&40
			STRB      R1, [R0, #HLSR]                  

Exit_int                
			LDMIA    R13!, {R0-R12,R14}             ; get R14 back from stack                
			SUBS     R15,R14,#&4                     
 


TimerIrq

;mrm102696

			STMDB   R13!, {R0-R7,R14}
;MRM4696
;added the interrup clr for the new musket


			LDR       R8, =InterruptClearReg                   
			LDR       R9,[R8]
			MOV	  R9,#IC_tmr1	
			STR       R9,[R8]

;mrm102696
			BL	  dte_check_parity_bit
			
			LDR       R8,=one_hundred_microsec
			LDRB      R9,[R8]
			ADD       R9,R9,#1
			STRB      R9,[R8]
			 
			LDR       R8,=count_for_msec_timer
			LDRB      R9,[R8]
			ADD       R9,R9,#1
			STRB      R9,[R8]

			LDMIA    R13!, {R0-R7,R14}             ; get R14 back from stack                
			SUBS     R15,R14,#&4                     
 





ParallelSerialFiqInt


			STMDB    R13!, {R0-R7,R14}
;MRM4696
;added the interrup clr for the new musket


			LDR       R8, =InterruptClearReg                   
			LDR       R9,[R8]
			MOV	  R9,#IC_ptxne	
			STR       R9,[R8]

			BL       dte_interrupt_rx
			LDMIA    R13!, {R0-R7,R14}             ; get R14 back from stack                
			SUBS     R15,R14,#&4                     



ParallelTxSerialFiqInt


;mrm62796
			;STMDB    R13!, {R0-R7,R14}
			STMDB   R13!, {R0-R12,R14}
;MRM4696
;added the interrup clr for the new musket


			LDR       R8, =InterruptClearReg                   
			LDR       R9,[R8]
			MOV	  R9,#IC_tmr2	
			STR       R9,[R8]

			BL	 dte_interrupt_tx
			;LDMIA    R13!, {R0-R7,R14}             ; get R14 back from stack                
			LDMIA    R13!, {R0-R12,R14}             ; get R14 back from stack                
			SUBS     R15,R14,#&4                     



;mrm calculate the parity for parallel mode
;routine gets called from acu.c file

parity

	stmdb   r13!, {r0-r5}

	ldr	r0,=Tx_char
	ldrb	r1,[r0]
	mov	r4,r1
	mov	r3,r1,lsr#4
	and	r1,r1,#&0f
	eor	r2,r3,r1
	mov	r3,r2,lsr#2
	and	r2,r2,#&03
	eor	r1,r3,r2
	mov	r3,r1,lsr#1
	and	r1,r1,#&01
	eor	r2,r3,r1
	mov	r2,r2,lsl#7


;find out if even or odd parity

	ldr	r5,=Parity_e_o
	ldrb	r1,[r5]
	eor	r1,r1,r2
	orr	r4,r4,r1
	strb	r4,[r0]

	ldmia   r13!, {r0-r5}                  
	mov	pc,r14





; ---------------------------------------
; Disable and Enable timer interrupt
; ---------------------------------------



line_disable_interrupts
disable_int                


			LDR       R0, =InterruptEnableReg                   
			LDR       R1,[R0]
 			AND       R1,R1,#IE_ext0 +IE_PnP    
			STR       R1,[R0]

			MOV       R15, R14          ; returns from enable int.



;mrm8796
;sw flow cntl data mode only fix
	
	
line_enable_interrupts
enable_int

			LDR       R0, =poll_mode_enable
			LDRB      R1,[R0]
			AND	  R1,R1,#&01
			CMP	  R1,#1
			BEQ	  Poll_Mode		  	



			LDR       R0, =InterruptEnableReg                   
			LDR       R1,[R0]

	                LDR       R2,=IE_tmr2+IE_tmr1+IE_tmr0+IE_ptxne+IE_ring+IE_PnP 	
			ORR       R1,R1,R2              			
			STR       R1,[R0]
			B	  Exit_Int_Enable

Poll_Mode

			LDR       R0, =InterruptEnableReg                   
			LDR       R1,[R0]

	                LDR       R2,=IE_tmr3+IE_tmr2+IE_tmr1+IE_tmr0+IE_ring+IE_PnP 	
			ORR       R1,R1,R2              			
			STR       R1,[R0]


Exit_Int_Enable

			MOV       R15, R14       ; returns from enable int.





;			LDR       R0, =InterruptEnableReg                   
;			LDR       R1,[R0]
;
;	               LDR       R2,=IE_tmr2+IE_tmr1+IE_tmr0+IE_ptxne+IE_ring+IE_PnP 	
;			ORR       R1,R1,R2              			
;			STR       R1,[R0]
;
;			MOV       R15, R14       ; returns from enable int.
;



	
;mrm8796
;sw flow cntl data mode only fix




install_interrupt_dte_rx 



 		LDR       R0, =TimerControlReg3        
		MOV       R1,#&00                  ;REP. MODE + RELOAD
		STR       R1,[R0]

	 	LDR       R0, =InterruptClearReg                   

		LDR       R1,[R0]
		MOV	  R1,#IC_tmr3
		STR       R1,[R0]

		MOV       R15,R14


;mrm8796
;sw flow cntl data mode only fix

install_poll_dte_interrupt

		LDR       R0, =TimerDividerReg3         
		;MOV       R1,#&1d                    ;LOAD PRE SCALE TIMER
		MOV       R1,#&1c                    ;LOAD PRE SCALE TIMER
		STR       R1,[R0]
	
		LDR       R8, =InterruptClearReg                   
		LDR       R9,[R8]
		MOV	  R9,#IC_ptxne	
		STR       R9,[R8]

		;set timer3 in repeat mode
		LDR       R0, =TimerControlReg3        
		MOV       R1,#&07                  ;REP. MODE + RELOAD
		STR       R1,[R0]

		MOV       R15,R14


install_dte_poll_no_flow

		LDR       R0, =TimerDividerReg3         
		;MOV       R1,#&200                    ;LOAD PRE SCALE TIMER
		MOV       R1,#&6a                    ;LOAD PRE SCALE TIMER
		STR       R1,[R0]
	
		LDR       R8, =InterruptClearReg                   
		LDR       R9,[R8]
		MOV	  R9,#IC_ptxne	
		STR       R9,[R8]

		;set timer3 in repeat mode
		LDR       R0, =TimerControlReg3        
		MOV       R1,#&07                  ;REP. MODE + RELOAD
		STR       R1,[R0]

		MOV       R15,R14




; ramn 8/22/96
install_poll_voice_dte_interrupt


		LDR       R0, =vce_mode
		LDRB      R1,[R0]
		CMP	  R1,#3
		BEQ	  fast_timer		



		LDR       R0, =TimerDividerReg3         
		MOV       R1,#&200                    ;LOAD PRE SCALE TIMER
		STR       R1,[R0]
	
		b 	exit_voice

fast_timer

		LDR       R0, =TimerDividerReg3         
		MOV       R1,#&22                    ;LOAD PRE SCALE TIMER
		STR       R1,[R0]
	

exit_voice
		;set timer3 in repeat mode
		LDR       R0, =TimerControlReg3        
		MOV       R1,#&07                  ;REP. MODE + RELOAD
		STR       R1,[R0]


		MOV       R15,R14



;mrm8796
;sw flow cntl data mode only fix

ParallelFiqPoll


			STMDB    R13!, {R0-R7,R14}


			LDR       R0, =InterruptClearReg                   
			LDR       R1,[R0]
			MOV	  R1,#IC_tmr3
			STR       R1,[R0]

			BL       dte_interrupt_rx
			LDMIA    R13!, {R0-R7,R14}             ; get R14 back from stack                
			SUBS     R15,R14,#&4                     






stop_fifo_timer

;stop timer1 


		LDR       R0, =TimerControlReg3
		LDR	  R1,[R0]
		AND	  R1,R1,#&05		
		STR       R1,[R0]
		MOV       R15,R14


start_fifo_timer

;start timer1 

		LDR       R0, =TimerControlReg3        
		LDR	  R1,[R0]
		ORR	  R1,R1,#&02
		STR       R1,[R0]
		MOV       R15,R14




;The data area 


	   AREA |C$$data|,DATA

|x$dataseg|

	   AREA |C$$zidata|,NOINIT

;Timer interrupt gobal variables
	   
;mrm102696
;	   EXPORT edge_cycle
	   EXPORT one_hundred_microsec
	   EXPORT dte_poll
	   EXPORT count_for_msec_timer


;mrm102696
;edge_cycle
;		% 1

one_hundred_microsec

		% 1
dte_poll 
		% 1
count_for_msec_timer
		% 1




	  END

