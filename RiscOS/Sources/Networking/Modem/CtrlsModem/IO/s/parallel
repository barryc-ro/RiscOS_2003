;/***************************************************************************
;/
;/    File:  parallel.s
;/
;/    Copyright 1995. All Rights Reserved by CIRRUS LOGIC Inc
;/
;/    Function:  This file contains Interrupt Service Routines
;/
;/         Created:  06/20/95
;/         Modified: 11/15/97
;/
;/***************************************************************************
             
             
             KEEP

       AREA |Aparallel|, CODE, READONLY

        INCLUDE     PARALLEL.H        
        INCLUDE     POWERUP.H


       EXPORT  Install_Int
       EXPORT  load_interrupts_vectors
       EXPORT  enable_int
       EXPORT  disable_int

       IMPORT  dte_interrupt_rx
       IMPORT  dte_interrupt_tx
       IMPORT  dce_line_tx_int
       IMPORT  dce_line_rx_int

       EXPORT  line_disable_interrupts
       EXPORT  line_enable_interrupts
       EXPORT  ParallelSerialIrqInt
       EXPORT  load_eetimer
       EXPORT  reload_fifo_timer
       EXPORT  reload_no_fifo_timer
       EXPORT  parity

       IMPORT  edge_cycle
       IMPORT  Tx_char
       IMPORT  Parity_e_o


Install_Int
        LDR     r1, =ParUartStartLocation 
             
;OE=PE=FE=BI=0
        MOV     r0, #HlsrDefaultValue           
        STRB    r0, [r1, #HLSR]                  

             
;RI =LO & DCD = DSR = CTS = HI
        MOV     r0, #&b0
        STRB    r0, [r1, #HMSR]


;clear the all timer control registers

        LDR       R0, =TimerControlReg0
        LDR       R1,[R0]
        AND       R1,R1,#&00        
        STR       R1,[R0]
    
        LDR       R0, =TimerControlReg1
        LDR       R1,[R0]
        AND       R1,R1,#&00        
        STR       R1,[R0]
    
        LDR       R0, =TimerControlReg2
        LDR       R1,[R0]
        AND       R1,R1,#&00        
        STR       R1,[R0]
    
        LDR       R0, =TimerControlReg3        
        MOV       R1,#&00                  ;REP. MODE + RELOAD
        STR       R1,[R0]


;timer 3     
;        LDR       R0, =TimerPreScalarReg3         
;        MOV       R1,#120                   ;for 16 char/1.2 mSec
;        STR       R1,[R0]

;        LDR       R0, =TimerDividerReg3         
;        MOV       R1,#29              ;old &1d=29 make timer3  0.080mSec 
;        STR       R1,[R0]
    
;        LDR       R0, =TimerControlReg3        
;        MOV       R1,#&00                  ;REP. MODE + RELOAD
;        STR       R1,[R0]


;if timer3 be set to irq
;        LDR       R0, =InterruptSourceReg                   
;        LDR       R1,[R0]
;        LDR       R2,=IS_tmr3_irq    
;        AND       R1,R1,R2                    
;        STR       R1,[R0]
    

        LDR       R0, =InterruptSourceReg                   
        LDR       R1,[R0]
        LDR      R2,=IS_tmr0_irq    
        AND       R1,R1,R2                    
        STR       R1,[R0]
    

        LDR       R0, =InterruptSourceReg                   
        LDR       R1,[R0]
        LDR       R2,=IS_tmr2_irq    
        AND       R1,R1,R2                    
        STR       R1,[R0]
        
;uartint
        LDR       R0, =InterruptSourceReg                   
        LDR       R1,[R0]
        LDR      R2,=IS_ptxne_irq
        AND       R1,R1,R2                    
        STR       R1,[R0]

;Write the value in R1 to the IRQ (0x18)           
;load Int vec table
;timer0
        LDR     R0,=ParallelUartVecIrq
        LDR     R2,=Timer0IntLocation  
        LDR     R1,[R0]  
        SUB     R1,R1,#IrqLocation + 8  
        MOV     R1,R1,LSR #2    
        ORR     r1, r1, #&ea000000
        STR     R1,[R2]            

;timer2
        LDR     R0,=ParallelTxVecFiq
        LDR     R1,[R0] 
 
        LDR     R1,=ISR_CHAR_TO_DTE
        LDR     R2,=Timer2IntLocation  

        SUB     R1,R1,#IrqLocation + 8  
;        SUB     R1,R1,#FiqLocation + 8  

        MOV     R1,R1,LSR #2    
        ORR     r1, r1, #&ea000000
        STR     R1,[R2]            



;timer3
;        LDR     R1,=ISR_CHAR_FROM_DTE
;        LDR     R2,=Timer3IntLocation  
;;        SUB     R1,R1,#FiqLocation + 8  
;        SUB     R1,R1,#IrqLocation + 8  

;        MOV     R1,R1,LSR #2    
;        ORR     r1, r1, #&ea000000   
;        STR     R1,[R2]            



;8/18/97, Uart Int
        LDR    R2,=TxBufferNotEmptyLocation  ;ff83c0
        LDR    R1,=UART_TO_MUSKET_IRQ

;   SUB    R1,R1,#FiqLocation + 8  
        SUB    R1,R1,#IrqLocation + 8  

        MOV    R1,R1,LSR #2    
        ORR    r1, r1, #&ea000000   
        STR    R1,[R2]            

;***************



;Install the Branch instruction from IRQ interrupt location 0x18 to
        LDR       R0, =InterruptEnableReg                   
        LDR       R1,[R0]


;testing 
;        LDR     R2,=IE_tmr3 + IE_tmr2+IE_tmr1+IE_tmr0+IE_PnP    
        LDR     R2,=IE_ptxne +IE_tmr2+IE_tmr1+IE_tmr0+IE_PnP    

        ORR       R1,R1,R2                    ;ENABLE INTERRUPS   
        STR       R1,[R0]
        

        LDR       R0, =TimerBaseClockReg               
        MOV       R1,#&8                   ;LOAD PRE SCALE TIMER
        STR       R1,[R0]

        LDR       R0, =TimerPreScalarReg0         
        MOV       R1,#&4D                    ;LOAD PRE SCALE TIMER
        STR       R1,[R0]
            
        LDR       R0, =TimerDividerReg0         
        MOV       R1,#&49                  ;LOAD TIMER DIV.
        STR       R1,[R0]

        LDR       R0, =TimerPreScalarReg2
        MOV       R1,#45                 ;be changed if no fifo mode        
        STR       R1,[R0]

        LDR       R0, =TimerDividerReg2         
        MOV       R1,#86        
        STR       R1,[R0]
    

load_interrupts_vectors
        LDR       R0, =TimerControlReg1
        LDR       R1,[R0]
        AND       R1,R1,#&00        
        STR       R1,[R0]
    
        
        LDR       R0,=TimerVecIrq
        LDR       R2,=Timer1IntLocation  
        LDR       R1,[R0]  
        SUB       R1,R1,#FiqLocation + 8  
        MOV       R1,R1,LSR #2    
        ORR       R1, R1, #&ea000000   
        STR       R1,[R2]            

        LDR       R0, =TimerPreScalarReg1         
        MOV       R1,#40                  ;LOAD PRE SCALE TIMER
        STR       R1,[R0]
        LDR       R0, =TimerDividerReg1         
        MOV       R1,#&48                  ;LOAD TIMER DIV.
        STR       R1,[R0]
        

;set timer0 in repeat mode
        LDR       R0, =TimerControlReg0        
        MOV       R1,#&07                  ;STRT + REP. MODE + RELOAD 
        STR       R1,[R0]

;set timer1 in repeat mode
        LDR       R0, =TimerControlReg1        
        MOV       R1,#&07                  ;REP. MODE + RELOAD
        STR       R1,[R0]


;set timer2 in repeat mode
        LDR       R0, =TimerControlReg2        
        MOV       R1,#&07                  ;STRT + REP. MODE + RELOAD 
        STR       R1,[R0]

;timer3 
;        LDR       R0, =TimerControlReg3        
;        MOV       R1,#&07                  ;REP. MODE + RELOAD
;        STR       R1,[R0]
        
        MOV       R15,R14


reload_fifo_timer
;testing, 
        MOV       R1,#44
        LDR       R0, =TimerPreScalarReg2         
        STR       R1,[R0]

;        LDR       R0, =TimerPreScalarReg3         
;        MOV       R1,#120        
;        STR       R1,[R0]

        MOV       R15,R14

       
reload_no_fifo_timer
        LDR       R0, =TimerPreScalarReg2         
        MOV       R1,#3                   
        STR       R1,[R0]

;        LDR       R0, =TimerPreScalarReg3         
;        MOV       R1,#8        
;        STR       R1,[R0]

        MOV       R15,R14


load_eetimer
        LDR       R0, =TimerControlReg0
        LDR       R1,[R0]
        AND       R1,R1,#&00        
        STR       R1,[R0]
    
        LDR       R0, =TimerControlReg1        
        LDR       R1,[R0]
        AND       R1,R1,#&00        
        STR       R1,[R0]

        LDR       R0, =TimerControlReg2        
        LDR       R1,[R0]
        AND       R1,R1,#&00        
        STR       R1,[R0]

;mrm8796
;sw flow cntl data mode only fix
;timer3
;      LDR       R0, =TimerControlReg3
;      LDR       R1,[R0]
;      AND       R1,R1,#&00        
;      STR       R1,[R0]


        LDR     R0,=EEupdatetimervec
        LDR     R2,=Timer1IntLocation  
        LDR     R1,[R0]  
        SUB     R1,R1,#FiqLocation + 8  
        MOV     R1,R1,LSR #2    
        ORR     r1, r1, #&ea000000   
        STR     R1,[R2]

        LDR       R0, =edge_cycle        
        MOV       R1,#00    
        STRB      R1,[R0]
        
        LDR       R0, =TimerBaseClockReg               
        MOV       R1,#&8                   ;LOAD PRE SCALE TIMER
        STR       R1,[R0]


;4* 6= 24  works for all of eewrite, beta, EEB, pnp
        LDR       R0, =TimerPreScalarReg1         
        MOV       R1,#4         
        STR       R1,[R0]
            
        LDR       R0, =TimerDividerReg1         
        MOV       R1,#6        
        STR       R1,[R0]


;set timer1 in repeat mode
        LDR       R0, =TimerControlReg1        
        MOV       R1,#&07                  ;STRT + REP. MODE + RELOAD 
        STR       R1,[R0]
        MOV       R15,R14


EEupdatetimer
;MRM4696
;added the interrup clr for the new musket

        LDR       R8, =InterruptClearReg                   
        LDR       R9,[R8]
        MOV       R9,#IC_tmr1
        STR       R9,[R8]

        LDR       R8, =edge_cycle        
        LDRB      R9,[R8]
        CMP       R9,#01
        BEQ       set_edge_to_zero

        MOV       R9,#01        
        STRB      R9,[R8]

        LDR       R8,=GPR0
        MOV       R9,#&44      
        STR       R9,[R8]     
                
        B         Exit_Int

set_edge_to_zero
        MOV       R9,#00
        STRB      R9,[R8]

        LDR       R8,=GPR0
        MOV       R9,#&40      
        STRB      R9,[R8]     

Exit_Int
        SUBS     R15,R14,#&4                     
             

ParallelSerialIrqInt
            STMDB   R13!, {R0-R12,R14}
            LDR       R0, =InterruptClearReg                   
            LDR       R1,[R0]
            MOV       R1,#IC_tmr0    
            STR       R1,[R0]

            BL        dce_line_tx_int
            BL        dce_line_rx_int

            LDR      R0, =ParUartStartLocation 
            LDR      R1,[R0,#HLSR]
            AND      R1,R1,#&60
            CMP      R1,#&20
            BEQ      Set_Temt_bit        
            B      Exit_int    

Set_Temt_bit        


;mrm41796 
;donot perform read modify write of HLSR

            ORR      R1,R1,#&40
            STRB     R1, [R0, #HLSR]                  

Exit_int                
            LDMIA    R13!, {R0-R12,R14}             ; get R14 back from stack                
            SUBS     R15,R14,#&4                     

TimerIrq
            STMDB    R13!, {R0-R7,R14}

            LDR      R8, =InterruptClearReg                   
            LDR      R9,[R8]
            MOV      R9,#IC_tmr1    
            STR      R9,[R8]

            LDR      R8,=one_hundred_microsec
            LDRB     R9,[R8]
            ADD      R9,R9,#1
            STRB     R9,[R8]
             
            LDR      R8,=count_for_msec_timer
            LDRB     R9,[R8]
            ADD      R9,R9,#1
            STRB     R9,[R8]

            LDMIA    R13!, {R0-R7,R14}             ; get R14 back from stack                
            SUBS     R15,R14,#&4                     
 

ParallelSerialFiqInt
UART_TO_MUSKET_IRQ
            STMDB    R13!, {R0-R12,R14}
            LDR      R0, =InterruptClearReg                   
            MOV      R1,#IC_ptxne    
            STR      R1,[R0]

            BL       dte_interrupt_rx
            LDMIA    R13!, {R0-R12,R14}         ; get R14 back from stack                
            SUBS     R15,R14,#&4                     




ParallelTxSerialFiqInt
ISR_CHAR_TO_DTE
;   STMDB    R13!, {R0-R7,R14}
            STMDB   R13!, {R0-R12,R14}

            LDR      R8, =InterruptClearReg                   
            LDR      R9,[R8]
            MOV      R9,#IC_tmr2    
            STR      R9,[R8]

            BL       dte_interrupt_tx
;   LDMIA    R13!, {R0-R7,R14}
            LDMIA    R13!, {R0-R12,R14}             ; get R14 back from stack                
            SUBS     R15,R14,#&4                     



;mrm calculate the parity for parallel mode
;routine gets called from acu.c file

parity
    stmdb   r13!, {r0-r5}

    ldr    r0,=Tx_char
    ldrb   r1,[r0]
    mov    r4,r1
    mov    r3,r1,lsr#4
    and    r1,r1,#&0f
    eor    r2,r3,r1
    mov    r3,r2,lsr#2
    and    r2,r2,#&03
    eor    r1,r3,r2
    mov    r3,r1,lsr#1
    and    r1,r1,#&01
    eor    r2,r3,r1
    mov    r2,r2,lsl#7


;find out if even or odd parity

    ldr    r5,=Parity_e_o
    ldrb   r1,[r5]
    eor    r1,r1,r2
    orr    r4,r4,r1
    strb   r4,[r0]

    ldmia  r13!, {r0-r5}                  
    mov    pc,r14



line_disable_interrupts
disable_int                
            LDR       R0, =InterruptEnableReg                   
            LDR       R1,[R0]
            AND       R1,R1,#IE_ext0 +IE_PnP    
            STR       R1,[R0]
            MOV       R15, R14          ; returns from enable int.

    
line_enable_interrupts
enable_int
            LDR       R0, =InterruptEnableReg                   
            LDR       R1,[R0]

;testing 
;       LDR       R2,=IE_tmr3 +IE_tmr2+IE_tmr1+IE_tmr0+IE_ring+IE_PnP     

; for ISA card, use Uart Int ie_ptxne
        LDR       R2,=IE_ptxne+IE_tmr2+IE_tmr1+IE_tmr0+IE_ring+IE_PnP     


            ORR       R1,R1,R2                          
            STR       R1,[R0]

Exit_Int_Enable
            MOV       R15, R14       ; returns from enable int.


ParallelFiqPoll
ISR_CHAR_FROM_DTE

;timer3 int isr
;;   STMDB    R13!, {R0-R7,R14}
;        STMDB    R13!, {R0-R12,R14}        ;r0-r12 for irq
;
;        LDR       R0, =InterruptClearReg                   
;        LDR       R1,[R0]
;        MOV       R1,#IC_tmr3
;        STR       R1,[R0]
       
;        BL       dte_interrupt_rx

;;   LDMIA    R13!, {R0-R7,R14}             ; get R14 back from stack                
;        LDMIA    R13!, {R0-R12,R14}             ; for irq

;        SUBS     R15,R14,#&4                     



;The data area 
       AREA |C$$data|,DATA

|x$dataseg|

       AREA |C$$zidata|,NOINIT

;Timer interrupt gobal variables
       EXPORT one_hundred_microsec  ;this is a 1 misec count 
       EXPORT count_for_msec_timer

one_hundred_microsec
        % 1
count_for_msec_timer
        % 1


      END
