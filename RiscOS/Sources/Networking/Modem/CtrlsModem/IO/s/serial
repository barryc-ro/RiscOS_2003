;/****************************************************************************
;/
;/    Copyright 1995. All Rights Reserved by:
;/
;/        CIRRUS LOGIC Inc
;/        3100 West Warren Ave
;/        Fremont, CA. 94538
;/        (510) 623-8300
;/
;/
;/    This document contains material confidential to CIRRUS LOGIC its
;/    contents must not be revealed, used or disclosed to anyone or
;/    company with out written permission by CIRRUS LOGIC.
;/    The information contained herein is solely for the use of CIRRUS LOGIC.
;/
;/    File:  parallel.s
;/
;/    Module Version: ACU 1.00
;/
;/    Function:  This file contains the power up and stack initialization
;/               routine for the ARM Risk Machine.
;/
;/    Product:  ACU
;/
;/    History:
;/
;/         Created:  06/20/95
;/
;/         ---------------------------------------------------------
;/         -              Modifications            -
;/         ---------------------------------------------------------
;/
;/         Author & Date: CIRRUS LOGIC
;/         Description:
;/         Reason:
;/
;/****************************************************************************




	   AREA |C$$code|, CODE, READONLY

|x$codeseg|

		INCLUDE     SERIAL.H
		INCLUDE     POWERUP.H




			 KEEP

	   EXPORT  Install_Int
	   EXPORT  load_interrupts_vectors
	   EXPORT  enable_int
	   EXPORT  disable_int
	   IMPORT  process_acu_timer
	   IMPORT  dte_interrupt_rx
	   IMPORT  dte_interrupt_tx
	   IMPORT  dte_mode
	   IMPORT  slN
	   IMPORT  dce_line_tx_int
	   IMPORT  dce_line_rx_int
	   EXPORT  line_disable_interrupts
	   EXPORT  line_enable_interrupts
	   EXPORT  ParallelSerialIrqInt
	   EXPORT  load_eetimer
	   EXPORT  parity
;	   EXPORT  install_poll_dte_interrupt
;9/10/97
;	   EXPORT  install_poll_voice_dte_interrupt  ; ramn 8/22/96
;	   EXPORT  install_interrupt_dte_rx
;	   EXPORT  start_fifo_timer
 ;	   EXPORT  stop_fifo_timer
;	   EXPORT  install_dte_poll_no_flow
;mrm102696
	   IMPORT  edge_cycle

Install_Int




                LDR     r1, =SerUartStartLocation
                MOV     r0, #0
                STRB    r0, [r1, #SIER]          ; disable ITs

                ; enable Divisor Latch Access

                MOV     r0, #SBRRvalue
                STRB    r0, [r1, #SBRR]

                ; configures the Line Control Register

                MOV     r0, #LCRvalue
                STRB    r0, [r1, #SLCR]

                ;set the pre divisor register

                MOV     r0, #SPDRvalue
                STRB    r0, [r1, #SPDR]

		;enable the serial interrupt

		MOV	R0,#1
                STRB    r0, [r1, #SIER]          ;enable ITs



;Write the value in R1 to the FIQ (0x1C)


		LDR     R0,=SerialUartVecFiq
		LDR     R2,=SerialIntLocation
		LDR     R1,[R0]
		SUB     R1,R1,#FiqLocation + 8
		MOV     R1,R1,LSR #2
		ORR     r1, r1, #&ea000000
		STR     R1,[R2]



;Write the value in R1 to the IRQ (0x18)

		LDR       R0, =InterruptSourceReg
		LDR       R1,[R0]
		LDR	  R2,=IS_tmr0_irq
		AND       R1,R1,R2
		STR       R1,[R0]

;mrm62796
		;LDR       R0, =InterruptSourceReg
		;LDR       R1,[R0]
		;LDR	  R2,=IS_tmr2_irq
		;AND       R1,R1,R2
		;STR       R1,[R0]

		LDR       R0,=SerialUartVecIrq
		LDR       R2,=Timer0IntLocation
		LDR       R1,[R0]
		SUB       R1,R1,#IrqLocation + 8
		MOV       R1,R1,LSR #2
		ORR       R1, R1, #&ea000000
		STR       R1,[R2]

		LDR       R0,=SerialTxVecIrq
		LDR       R2,=Timer2IntLocation
		LDR       R1,[R0]
		SUB       R1,R1,#FiqLocation + 8
		MOV       R1,R1,LSR #2
		ORR       r1, r1, #&ea000000
		STR       R1,[R2]






;Install the Branch instruction from IRQ interrupt location 0x18 to
;Serial or Parallel mode Interrupt routines.




		LDR       R0, =InterruptEnableReg
		LDR       R1,[R0]
		LDR	  R2,=IE_ring+IE_tmr2+IE_tmr1+IE_tmr0+IE_stxne	;&0222
		ORR       R1,R1,R2            		;ENABLE TIMER INTERRUPS
		STR       R1,[R0]







;Set polling rate for timer0 is 500 micro sec.


		LDR       R0, =TimerBaseClockReg
		MOV       R1,#&8                   ;LOAD PRE SCALE TIMER
		STR       R1,[R0]
;mrm62796

 		LDR       R0, =TimerPreScalarReg0
		MOV       R1,#&4d                   ;LOAD PRE SCALE TIMER
		STR       R1,[R0]

		LDR       R0, =TimerDividerReg0
		MOV       R1,#&49                  ;LOAD TIMER DIV.
		STR       R1,[R0]

		LDR       R0, =TimerPreScalarReg2
		MOV       R1,#&4                   ;LOAD PRE SCALE TIMER
		STR       R1,[R0]

		LDR       R0, =TimerDividerReg2
		MOV       R1,#&3F                  ;LOAD TIMER DIV.
		STR       R1,[R0]


load_interrupts_vectors

		;mrm4696
		LDR       R0, =TimerControlReg1
		LDR	  R1,[R0]
		AND	  R1,R1,#&00
		STR       R1,[R0]


		LDR       R0,=TimerVecIrq
		LDR       R2,=Timer1IntLocation
		LDR       R1,[R0]
		SUB       R1,R1,#FiqLocation + 8
		MOV       R1,R1,LSR #2
		ORR       R1, R1, #&ea000000
		STR       R1,[R2]



		LDR       R0, =TimerPreScalarReg1
;shujin 9/9/97 tmr1 500uS => 1mS
;;		MOV       R1,#&14               ;=#20
		MOV       R1,#40                  ;LOAD PRE SCALE TIMER

		STR       R1,[R0]

		LDR       R0, =TimerDividerReg1
		MOV       R1,#&48                  ;LOAD TIMER DIV.
		STR       R1,[R0]




		;set timer0 in repeat mode
		LDR       R0, =TimerControlReg0
		MOV       R1,#&07                  ;STRT + REP. MODE + RELOAD
		STR       R1,[R0]


		;set timer2 in repeat mode
		LDR       R0, =TimerControlReg2
		MOV       R1,#&07                  ;STRT + REP. MODE + RELOAD
		STR       R1,[R0]

		;set timer1 in repeat mode
		LDR       R0, =TimerControlReg1
		MOV       R1,#&07                  ;REP. MODE + RELOAD
		STR       R1,[R0]

		MOV       R15,R14



load_eetimer

		LDR       R0, =TimerControlReg1
		LDR	  R1,[R0]
		AND	  R1,R1,#&00
		STR       R1,[R0]

		LDR       R0, =TimerControlReg2
		LDR	  R1,[R0]
		AND	  R1,R1,#&00
		STR       R1,[R0]


		LDR     R0,=EEupdatetimervec
		LDR     R2,=Timer1IntLocation
		LDR     R1,[R0]
		SUB     R1,R1,#FiqLocation + 8
		MOV     R1,R1,LSR #2
		ORR     r1, r1, #&ea000000
		STR     R1,[R2]

		LDR       R0, =edge_cycle
		MOV	  R1,#00
		STRB      R1,[R0]


		LDR       R0, =TimerBaseClockReg
		MOV       R1,#&8                   ;LOAD PRE SCALE TIMER
		STR       R1,[R0]

;testing
		LDR       R0, =TimerPreScalarReg1
		MOV       R1,#4      ;&12                  ;LOAD PRE SCALE TIMER
		STR       R1,[R0]

		LDR       R0, =TimerDividerReg1
		MOV       R1,#6      ;&0a                  ;LOAD TIMER DIV.
		STR       R1,[R0]

		;set timer1 in repeat mode
		LDR       R0, =TimerControlReg1
		MOV       R1,#&07                  ;STRT + REP. MODE + RELOAD
		STR       R1,[R0]


		;stop timer zero for now

		LDR       R0, =TimerControlReg0
		LDR	  R1,[R0]
		AND	  R1,R1,#&00
		STR       R1,[R0]



		MOV       R15,R14





EEupdatetimer

;MRM4696
;added the interrup clr for the new musket


		LDR       R8, =InterruptClearReg
		LDR       R9,[R8]
		MOV	  R9,#IC_tmr1
		STR       R9,[R8]

		LDR       R8, =edge_cycle
		LDRB 	  R9,[R8]
		CMP	  R9,#01
		BEQ	  set_edge_to_zero

		MOV	  R9,#01
		STRB      R9,[R8]

                LDR       R8,=GPR0
                MOV       R9,#&44
                STR       R9,[R8]

		B         Exit_Int



set_edge_to_zero

		MOV       R9,#00
                STRB      R9,[R8]

                LDR       R8,=GPR0
                MOV       R9,#&40
                STRB      R9,[R8]

;RETRUN

Exit_Int

		SUBS     R15,R14,#&4


; -----------------------------------------
; This is the serial port interrupt handler
; -----------------------------------------
; an IT from the serial port has been detected.
; At this time we do not have the interrupt enabled
; the interrupt is connected to the H/W timer which upon
; timeout we also service this routine

ParallelSerialIrqInt




			STMDB   R13!, {R0-R12,R14}

;MRM4696
;added the interrup clr for the new musket


			LDR       R8, =InterruptClearReg
			LDR       R9,[R8]
			MOV	  R9,#IC_tmr0
			STR       R9,[R8]

			BL      dce_line_rx_int
			BL      dce_line_tx_int


			LDMIA    R13!, {R0-R12,R14}             ; get R14 back from stack
			SUBS     R15,R14,#&4



ParallelSerialFiqInt

			STMDB    R13!, {R0-R7,R14}




;MRM4696
;added the interrup clr for the new musket


			LDR       R8, =InterruptClearReg
			LDR       R9,[R8]
			MOV	  R9,#IC_stxne
			STR       R9,[R8]


			BL       dte_interrupt_rx
			LDMIA    R13!, {R0-R7,R14}             ; get R14 back from stack
			SUBS     R15,R14,#&4







ParallelTxSerialIrqInt


		        ;STMDB    R13!, {R0-R12,R14}
		        STMDB    R13!, {R0-R7,R14}
;mrm62796


;MRM4696
;added the interrup clr for the new musket

			LDR       R0, =InterruptClearReg
			LDR       R1,[R0]
			MOV	  R1,#IC_tmr2
			STR       R1,[R0]
			LDR       R1, =SerUartStartLocation
		        LDRB      R0,[R1,#SLSR]
                	AND	  R0,R0,#&20
			CMP	  R0,#&20
			BLEQ	 dte_interrupt_tx
			LDMIA    R13!, {R0-R7,R14}             ; get R14 back from stack
			SUBS     R15,R14,#&4



TimerIrq

;
;MRM4696
;added the interrup clr for the new musket


			LDR       R8, =InterruptClearReg
			LDR       R9,[R8]
			MOV	  R9,#IC_tmr1
			STR       R9,[R8]

			LDR       R8,=one_hundred_microsec
			LDRB      R9,[R8]
			ADD       R9,R9,#1
			STRB      R9,[R8]

			LDR       R8,=count_for_msec_timer
			LDRB      R9,[R8]
			ADD       R9,R9,#1
			STRB      R9,[R8]

			SUBS     R15,R14,#&4

;mrm31096

parity

	mov	pc,r14





; ---------------------------------------
; Disable and Enable timer interrupt
; ---------------------------------------



line_disable_interrupts
disable_int
;mnp_disable_int


			LDR       R0, =InterruptEnableReg
			LDR       R1,[R0]
 			AND       R1,R1,#IE_ext0    ;&0080
			STR       R1,[R0]

			MOV       R15, R14          ; returns from enable int.








line_enable_interrupts
enable_int
;mnp_enable_int

			LDR       R0, =InterruptEnableReg
			LDR       R1,[R0]
;22296shujin
			LDR	  R2,=IE_tmr2+IE_tmr1+IE_tmr0+IE_stxne+IE_ring ;&0222
			ORR       R1,R1,R2                     ;ENABLE TIMER INTERRUPS
			STR       R1,[R0]

			MOV       R15, R14                ; returns from enable int.




;install_interrupt_dte_rx
 ;		MOV       R15,R14

;mrm8796
;install_poll_dte_interrupt
 ;		MOV       R15,R14

;start_fifo_timer
 ;		MOV       R15,R14



;Install_dte_poll_no_flow
;		MOV       R15,R14

;mrm8796

;stop_fifo_timer
 ;		MOV       R15,R14

;install_poll_voice_dte_interrupt
 ;		MOV       R15,R14


;The data area

	   AREA |C$$data|,DATA

|x$dataseg|

	   AREA |C$$zidata|,NOINIT

;Timer interrupt gobal variables

;mrm102696
;	   EXPORT edge_cycle
	   EXPORT one_hundred_microsec
	   EXPORT dte_poll
	   EXPORT count_for_msec_timer


;mrm102696
;edge_cycle
;		% 1

one_hundred_microsec

		% 1
dte_poll
		% 1
count_for_msec_timer
		% 1


	  END

