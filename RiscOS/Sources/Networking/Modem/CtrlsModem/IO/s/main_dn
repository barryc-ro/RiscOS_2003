;
;    Donwloading cutlass main code    12-20-95
;
;    r0 = start address of the main code in the musket flash
;    r1 = addr offset of the main code in the musket flash
;    r2 = length of the main code
;    r3 = address of where the main code is in the cutlass

;    r4 = actual op-code of the main code to be loaded in the cutlass.
;    r5 = maskedout upper byte of opcode

;     r6 = address of com ram as mapped in the musket
;
;
;    constants defined for this download.
;
;    START_OF_MAIN_CODE - where the main resides in the musket flash
;    CP_DNLD_ENABLE_FLAG - value to program the CP control regis to enable
;                - download
;    CP_RESET_AND_RUN_BOOT_CODE - value to write to the CP control regis
;                   - to start the boot code execution

                KEEP
                
                INCLUDE     main_dn.h        
        EXPORT        Start_main_dnld_beg    

            AREA |main_dn|, CODE, READONLY
        

Start_main_dnld_beg

    mov    r11,r14  ; this is to save the return addr 



Start_main_dnld


; here need to first set dsp_cfg=0 before going on

    ldr    r4,=CP_DNLD_ENABLE_FLAG
    strb   r4,[r6,#CP_CONTROL_REGISTER]  
    ldr    r4,=CP_RESET_AND_RUN_BOOT_CODE
    strb   r4,[r6,#CP_CONTROL_REGISTER]  
    MOV    r4,#SELECT_PLL_CLK_VAL
    strb   r4,[r6,#SELECT_PLL_CLK_LOC]  
    

    

    ldr     r0,=MAIN_CODE_INFO
    ldr     r5,[r0,#4]        ;load length of main code in r2
    mov     r1,#0            ;clear the count to 0

    ldr    r0,=BOOT_CODE_INFO
    ldr    R2,[R0,#4]
    ldr     r0,=START_OF_BOOT_CODE 

;new for download main
    add    r0,r0,r2        ;add boot code length 
                    ;this is where the main code starts
    mov    r2,r5
    ldr     r6,=COM_RAM        ;addr of com_ram for musket 
;
; make sure that the cutlass is running the internal code before proceeding
;
;
    ldr    r3,=EXT_RESET_VECTOR
;for write addr to comram for 16-bit cutlass RESET VECTOR in r4.0 - r4.15

    ldr     r4,[r0,r1]    ; load the actual cutlass opcode in r4 (32bits)
;[r0+r1] is the addr, load 16 bits twice into r4 to form the 32 bit data

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; added by ramn on 1/17/96
; this code set the com ram for the correct page
; the boot code writes this page inof to the MCON register
; dsp addr is in r3. now that it is incremented check to see a15,a16,a17
    mov    r10,#1
    strb    r10,[r6,#DOWNLOAD_REG_E8]
    mov    r10,#0
    strb    r10,[r6,#DOWNLOAD_REG_E9]
;;;;;;;;; till here by ramn 1/17/96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    bl    Dnld_word_to_cutlass
    b    Now_dnld_rest_of_code

Dnld_word_to_cutlass
        mov    r5,r3
    ldr    r7,=EXT_RESET_VECTOR
    cmp    r5,r7
    ble    Cont_dnld_as_usual
    ldr    r7,=PAGING_MASK
    orr    r5,r5,r7
Cont_dnld_as_usual
    mov    r5,r5,lsr #8     ; move upper byte to lower 8 bits
    mov    r7,r3
    strb     r5,[r6,#DOWNLOAD_REG_EB] ;write high byte addr to EBh of comram 
    strb     r7,[r6,#DOWNLOAD_REG_EA] ;write low  byte of addr to EAh

;write data to comram for 16-bit cutlass RESET_VECTOR in r4.0 - r4.15
    strb     r4,[r6,#DOWNLOAD_REG_EC] ; write low byte of data to ECh
    mov    r4,r4,lsr #8
    strb     r4,[r6,#DOWNLOAD_REG_ED] ; write high byte of data to EDh

    ldr    r5,=DNLD_WORD_READY
    strb    r5,[r6,#DOWNLOAD_REG_EE]      ;char x into comram EEh
    mov    r5,r5,lsr #8
    strb    r5,[r6,#DOWNLOAD_REG_EF]

Read_flag_again
    ldrb     r7,[r6,#DOWNLOAD_REG_EE] ; read low byte of data from EEh
    ldrb     r5,[r6,#DOWNLOAD_REG_EF] ; read high byte of data from EFh

    mov    r8,#0 
    mov    r5,r5,lsl #8       ; mov the uper byte to the correct location
    orr     r8,r8,r5    ; mask out the lower byte of opcode
    orr     r8,r8,r7    ; r8 should be 00aah

    cmp    r8,#CUTLASS_DONE
    bne    Read_flag_again        ;loop again

    mov    pc,r14            ;return from subroutine    

Now_dnld_rest_of_code    
;write addr to comram for 16-bit cutlass word in r4.16 - r4.31
    ldr     r0,=MAIN_CODE_INFO
    ldr     r3,[r0]         ; load start addr of main code
                    ; in cutlass RAM into r3

    ldr    r2,[r0,#4]
    ldr    r0,=BOOT_CODE_INFO
    ldr    r5,[r0,#4]
    ldr    r0,=START_OF_BOOT_CODE
    add    r0,r0,r5        ;add boot code length 
                    ;this is where the main code starts
    mov    r4,r4,lsr #8
    bl    Dnld_word_to_cutlass


    add    r3,r3,#&1
    add    r1,r1,#WORD_INC_OFFSET; inc the count by 4    

Cont_dnlding_main
    ldr     r4,[r0,r1]        ; load the actual cutlass opcode in r4
    
    ldr    r5,=EXT_RESET_VECTOR
    cmp    r3,r5
    beq    Bypass_dnld1
    bl    Dnld_word_to_cutlass
    b    Jmp_ahead2
Bypass_dnld1
    mov    r4,r4,lsr #8
Jmp_ahead2
    mov    r4,r4,lsr #8
    add    r3,r3,#&1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; added by ramn on 1/17/96
; this code set the com ram for the correct page
; the boot code writes this page inof to the MCON register
; dsp addr is in r3. now that it is incremented check to see a15,a16,a17
    mov    r10,r3
    mov    r10,r10,lsr #15
    cmp    r10,#2
    blt    Dont_update_page_val
    strb    r10,[r6,#DOWNLOAD_REG_E8]
    mov    r10,r10,lsr #8
    strb    r10,[r6,#DOWNLOAD_REG_E9]
Dont_update_page_val
;;;;;;;;; till here by ramn 1/17/96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ldr    r5,=EXT_RESET_VECTOR
    cmp    r3,r5
    beq    Bypass_dnld
    bl    Dnld_word_to_cutlass
    b    Jmp_ahead
Bypass_dnld
    mov    r4,r4,lsr #8
    mov    r4,r4,lsr #8
Jmp_ahead
    add    r3,r3,#&1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; added by ramn on 1/17/96
; this code set the com ram for the correct page
; the boot code writes this page inof to the MCON register
; dsp addr is in r3. now that it is incremented check to see a15,a16,a17
    mov    r10,r3
    mov    r10,r10,lsr #15
    cmp    r10,#2
    blt    Dont_update_page_val2
    strb    r10,[r6,#DOWNLOAD_REG_E8]
    mov    r10,r10,lsr #8
    strb    r10,[r6,#DOWNLOAD_REG_E9]
Dont_update_page_val2
;;;;;;;;; till here by ramn 1/17/96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    add    r1,r1,#WORD_INC_OFFSET; inc the count of opcodes dnlded by 1    

    cmp    r2,r1            ; see if count = length, 
                ; if yes then only the reset vector left to be dnlded
    bgt    Cont_dnlding_main ; ramn 2/19/96
    
Dnld_done_now_verify_main
    ldr     r0,=MAIN_CODE_INFO
    ldr     r2,[r0,#4]        ;load length of main code in r2

    ldr     r0,=BOOT_CODE_INFO
    ldr     r5,[r0,#4]        ;load length of main code in r2

    mov     r1,#0            ;clear the count to 0
    ldr     r0,=START_OF_BOOT_CODE 
    add    r0,r0,r5        ;add boot code length 
                    ;this is where the main code starts


;
; make sure that the cutlass is running the internal code before proceeding
;
;
    ldr    r3,=EXT_RESET_VECTOR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; added by ramn on 1/17/96
; this code set the com ram for the correct page
; the boot code writes this page inof to the MCON register
; dsp addr is in r3. now that it is incremented check to see a15,a16,a17
    mov    r10,#1
    strb    r10,[r6,#DOWNLOAD_REG_E8]
    mov    r10,#0
    strb    r10,[r6,#DOWNLOAD_REG_E9]
;;;;;;;;; till here by ramn 1/17/96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    bl    Read_word_from_cutlass
    ldr     r4,[r0,r1]    ; load the actual cutlass opcode in r4
    ldr    r5,=&0000ffff
    and    r4,r4,r5
    cmp    r4,r8
    bne    Start_main_dnld
    b    Now_verify_rest_of_code

Read_word_from_cutlass
;write addr to cp for 16-bit cutlass RESET VECTOR in r4.0 - r4.15
        mov    r5,r3
    ldr    r7,=EXT_RESET_VECTOR
    cmp    r5,r7
    ble    Cont_dnld_as_usual1
    ldr    r7,=PAGING_MASK
    orr    r5,r5,r7
Cont_dnld_as_usual1
    mov    r5,r5,lsr #8     ; move upper byte to lower 8 bits
    mov    r7,r3
    strb     r5,[r6,#DOWNLOAD_REG_EB] ; write high byte of addr to F9h 
                     ; of comram 
    strb     r7,[r6,#DOWNLOAD_REG_EA] ; write low byte of addr to F8h

    ldr    r5,=VERIFY_ADDR_READY
    strb    r5,[r6,#DOWNLOAD_REG_EE]
    mov    r5,r5,lsr #8
    strb    r5,[r6,#DOWNLOAD_REG_EF]

Read_CTLS_flag_again

    nop
    nop
    nop
    nop
    nop

    ldrb     r5,[r6,#DOWNLOAD_REG_EF] ; read high byte of data to Fah 
    ldrb     r7,[r6,#DOWNLOAD_REG_EE] ; read low byte of data to Fah

    mov    r8,#0
    mov    r5,r5,lsl #8       ; mov the uper byte to the correct location
    orr     r8,r8,r5    ; mask out the lower byte of opcode
    orr     r8,r8,r7    ; opcode read is in r5

    cmp    r8,#CUTLASS_DONE
    bne    Read_CTLS_flag_again

;write data to cp for 16-bit cutlass RESET_VECTOR in r4.0 - r4.15


    nop
    nop
    nop
    nop
    nop

    ldrb     r5,[r6,#DOWNLOAD_REG_ED] ; write high byte of data to Fah
    ldrb     r7,[r6,#DOWNLOAD_REG_EC] ; write low byte of data to Fah 
                     ; of comram 

    mov    r8,#0
    mov    r5,r5,lsl #8       ; mov the uper byte to the correct location
    orr     r8,r8,r5    ; mask out the lower byte of opcode
    orr     r8,r8,r7    ; opcode read is in r5

    mov    pc,r14            ;return from subroutine    

Now_verify_rest_of_code    
;write addr to cp for 16-bit cutlass word in r4.16 - r4.31
    ldr     r0,=MAIN_CODE_INFO
    ldr     r3,[r0]         ; load start address of boot code
                    ; in cutlass into r3
    ldr    r2,[r0,#4]

    ldr    r0,=BOOT_CODE_INFO
    ldr    r5,[r0,#4]
    ldr     r0,=START_OF_BOOT_CODE 
    add    r0,r0,r5        ;add boot code length 
                    ;this is where the main code starts
    bl    Read_word_from_cutlass
    ldr    r4,[r0,r1]
    mov    r4,r4,lsr #16
    cmp    r4,r8
    bne    Start_main_dnld

    add    r3,r3,#&1
    add    r1,r1,#WORD_INC_OFFSET; inc the count of opcodes dnlded by 1    
Cont_verifying_main
    mov    r9,#0

    ldr    r5,=EXT_RESET_VECTOR
    cmp    r3,r5
    beq    Dont_get_reset_vector
    bl    Read_word_from_cutlass
    mov    r9,r8

Dont_get_reset_vector
    add    r3,r3,#&1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; added by ramn on 1/17/96
; this code set the com ram for the correct page
; the boot code writes this page inof to the MCON register
; dsp addr is in r3. now that it is incremented check to see a15,a16,a17
    mov    r10,r3
    mov    r10,r10,lsr #15
    cmp    r10,#2
    blt    Dont_update_page_val3
    strb    r10,[r6,#DOWNLOAD_REG_E8]
    mov    r10,r10,lsr #8
    strb    r10,[r6,#DOWNLOAD_REG_E9]
Dont_update_page_val3
;;;;;;;;; till here by ramn 1/17/96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    bl    Read_word_from_cutlass
    mov    r8,r8,lsl #16
    orr    r9,r9,r8


    ldr     r4,[r0,r1]        ; load the actual cutlass opcode in r4
    cmp    r4,r9
    bne    Start_main_dnld

    add    r3,r3,#&1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; added by ramn on 1/17/96
; this code set the com ram for the correct page
; the boot code writes this page inof to the MCON register
; dsp addr is in r3. now that it is incremented check to see a15,a16,a17
    mov    r10,r3
    mov    r10,r10,lsr #15
    cmp    r10,#2
    blt    Dont_update_page_val4
    strb    r10,[r6,#DOWNLOAD_REG_E8]
    mov    r10,r10,lsr #8
    strb    r10,[r6,#DOWNLOAD_REG_E9]
Dont_update_page_val4
;;;;;;;;; till here by ramn 1/17/96 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    add    r1,r1,#WORD_INC_OFFSET; inc the count of opcodes dnlded by 1    
    cmp    r2,r1            ; see if count = length, 
                    ; if yes then only the reset vector left to be dnlded
    bgt    Cont_verifying_main ;ramn 2/19/96

Verify_main_ok_reset_dsp
;
;    ask mohammad how to read and write to GPIO
;

    ldr    r4,=CP_DNLD_ENABLE_FLAG
    strb   r4,[r6,#CP_CONTROL_REGISTER]  
    ldr    r4,=CP_RESET_AND_RUN_BOOT_CODE
    strb   r4,[r6,#CP_CONTROL_REGISTER]  
 

    mov    r14,r11            ;restore the return addr
    mov    pc,r14
        
    END
