;  r0 = start address of the main code in flash
;  r1 = content of flash
;  r2 = counter for flash
;  r3 = start address of the main code in ram
;  r4 = content of ram
;  r5 = counter for ram
;       r6 = end address of them main code in ram

		KEEP
		AREA |zserial|, CODE, READONLY

		INCLUDE    serialnb.h
		EXPORT     write_serial_number

write_serial_number

         	LDR     R2,=&FFc000

 		mov 	r1,#&00
		strb	r1,[r2,#&308]

 		mov 	r1,#&00
		strb	r1,[r2,#&308]

 		mov 	r1,#&00
		strb	r1,[r2,#&30c]

 		mov 	r1,#&00
		strb	r1,[r2,#&310]

 		mov 	r1,#&00
		strb	r1,[r2,#&318]

 		mov 	r1,#&bb
		strb	r1,[r2,#&31c]

 		mov 	r1,#&8
		strb	r1,[r2,#&320]

 		mov 	r1,#&19
		strb	r1,[r2,#&324]

           	LDR     R1,=&FFc158
          	LDR     R2,=&FFc100
          	MOV     R3,#0000000

RamInit_not_done_zero_3
          	STR     R3,[R2]
          	ADD     R2,R2,#4
          	CMP     R1,R2
          	BNE	RamInit_not_done_zero_3

         	LDR     R1,=&FF2B00
          	LDR     R2,=&FF0100		;;for store serial number
          	MOV     R3,#00

RamInit_not_done_zero_4
                STRB    R3,[R2]
         	ADD     R2,R2,#1
 	        CMP     R1,R2
         	BNE	RamInit_not_done_zero_4

	        ldr     r0,=write_dnld_flash_begin      ;assign flash and ram begin address
                ldr  	r3,=&FF1000							 ;START_ADDRESS_OF_RAM
	        ldr     r6,=write_dnld_flash_end


;continue_download
01
		ldr     r1,[r0]                 ;save content of flash
		cmp     r1,r6                           ;check if no more download code
		beq     %F09							;branch_to_ram
		str     r1,[r3]                 ;store it into ram

		add     r0,r0,#&4                  ;point to next flash location
		add     r3,r3,#&4                       ;point to next ram location

		b   	%B01							;continue_download

09
        	LDR    	R0, =&FFFF30	 ;CacheConfigurationReg
                MOV    	R1,#&00
       	        STR     R1,[R0]

        	LDR    	R0, =&FFC000	 ;Disable interrupt
                MOV    	R1,#&00
       	        STR    	R1,[R0]

        	LDR    	R0, =&FFFF04	 ;set 16bits data
                LDR    	R1,=&1F0025
       	        STR    	R1,[R0]

		b	WRITE_ADDRESS_OF_RAM

write_dnld_flash_begin
		nop
		nop
		nop
		nop
48 		LDRB    r5, [r0, #&1C]	 	; LSR
		AND	r5,r5,#&01	 	; wait for transmit side ready
		CMP	r5,#0x01							;
      	        BEQ     %B48							;
		mov	r3,#&0a
		strb    r3, [r0,#&00]          	; store char in R3

45 		LDRB    r5, [r0, #&1C]	 	; LSR
		AND	r5,r5,#&01	 	; wait for transmit side ready
		CMP	r5,#0x01							;
      	        BEQ     %B45							;
		mov	r3,#&0d
		strb    r3, [r0,#&00]          	; store char in R3

46		LDRB    r5, [r0, #&1C]	 	; LSR
        	AND	r5,r5,#&01	 	; wait for a character arrives
		CMP	r5,#0x01
      	        BEQ     %B46							; GetByteLoop: wait until IT
		mov	r3,#&4f
		strb    r3, [r0,#&00]          	; get char in R3

47 		LDRB    r5, [r0, #&1C]	 	; LSR
		AND	r5,r5,#&01	 	; wait for a character arrives
		CMP	r5,#0x01
      	        BEQ     %B47							; GetByteLoop: wait until IT
		mov	r3,#&4b
		strb    r3, [r0,#&00]          	; get char in R3


;                mov     r11,#&e7
;                mov     r12,#&03
;                orr     r11,r11,r12,lsl#8
;;
;                mov     r10,#&0
;11
;                bl      %F100
;                add     r10,r10,#&1
;                cmp     r10,r12
;                bne     %B11

;here
;first word
                bl      %F100

                mov     r10,#&00
                mov     r11,#&00
                mov     r12,#&00

		;mov	r0,#&03
		mov	r0,#&07
		mov	r1,#&00
		orr     r0,r0,r1,lsl#8
		mov	r2,#&00				;data low 16 bits
		mov     r3,#&FE
		orr     r2,r2,r3,lsl#8
		orr     r10,r2,r0,lsl#16			;r0 = flash location


		mov	r1,#&00				;r1 = ram location
		mov	r2,#&2C
		orr     r1,r1,r2,lsl#8
		mov     r3,#&FF
		orr     r11,r1,r3,lsl#16			;r0 = ram location
                mov     r4,#&00
12
		ldr	r2,[r11]
		str	r2,[r10]
                bl      %F101

                add     r10,r10,#&2
                add     r11,r11,#&2
                add     r12,r12,#&2
                cmp     r12,#0x200
                bne     %B12


;******************************************************************

;-------- print >>> to screen ------------------
		mov	r0,#&00		 	;data low 16 bits
		mov     r5,#&C4
		orr     r0,r0,r5,lsl#8
		mov	r5,#&FF
		orr	r0,r0,r5,lsl#16


		mov	r3,#&0a
                bl      %F48
		mov	r3,#&0d
                bl      %F48
		mov	r3,#&04f
                bl      %F48
		mov	r3,#&04b
                bl      %F48
		mov	r3,#&0a
                bl      %F48
		mov	r3,#&0d
                bl      %F48




;set it back to 32bits
		mov	r0,#&04
		mov	r1,#&FF
		orr	r0,r0,r1,lsl#8

		mov	r1,#&FF
		orr	r0,r0,r1,lsl#16

		mov	r1,#&21
		mov	r2,#&00
		orr	r1,r1,r2,lsl#8

		mov	r2,#&1F
		orr	r1,r1,r2,lsl#16
       	        str    	r1,[r0]

		nop
		mov	pc,#&0
		nop



100
;erase a sector and begin download
                mov	r0,#&aa			;data low 16 bits
                mov     r3,#&aa
                orr     r0,r0,r3,lsl#8
                mov	r1,#&AA			;address 5555
                mov	r3,#&AA
                orr	r1,r1,r3,lsl#8
                str	r0,[r1]

 ;load data 55 to address 2aaa
 		mov	r0,#&55		    ;data low 16 bits
 		mov     r3,#&55
 		orr     r0,r0,r3,lsl#8
 		mov	r1,#&54		    ;address 2AAA
		mov	r3,#&55
		orr     r1,r1,r3,lsl#8
		str	r0,[r1]

;load data 90 to address 5555
		mov     r0,#&A0						 ;data low 16 bits
		mov     r3,#&A0
		orr     r0,r0,r3,lsl#8
		mov	r1,#&AA						;address 5555
		mov	r3,#&AA
		orr     r1,r1,r3,lsl#8
		str	r0,[r1]

                mov     r1,#&0
;delay loop
10
		add	r1,r1,#&2
		cmp	r1,#0x60000
		blt	%B10


		mov	pc,r14

;**************************************************************
101
	       	mov	r1,#&0

;delay loop
42
	        add	r1,r1,#&2
	        cmp	r1,#0x100
	        blt	%B42
	        mov	pc,r14


48 		LDRB    r5, [r0, #&1C]	 	; LSR
		AND	r5,r5,#&01	 	; wait for transmit side ready
		CMP	r5,#0x01							;
      	        BEQ     %B48							;
		strb    r3, [r0,#&00]          	; store char in R3
                mov     pc,r14

write_dnld_flash_end

	END
