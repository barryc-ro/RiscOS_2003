;*********************** AMD 29F002 ******************************

;  r0 = start address of the main code in flash
;  r1 = content of flash
;  r2 = counter for flash
;  r3 = start address of the main code in ram
;  r4 = content of ram
;  r5 = counter for ram
;       r6 = end address of them main code in ram

        KEEP
        AREA |zdlatmel|, CODE, READONLY
        
        INCLUDE     dlatmel.h        
         EXPORT     main_dnld_flash_atmel
 [ SERIAL_ON = 1
main_dnld_flash_atmel
;Raminit
;Raminit
;mrm

               LDR     R1,=&FFc158
              LDR     R2,=&FFc100
              MOV     R3,#0000000

RamInit_not_done_zero_1          
              STR     R3,[R2]
              ADD     R2,R2,#4
              CMP     R1,R2     
              BNE    RamInit_not_done_zero_1


             LDR     R2,=&FFc000

         mov     r1,#&00
        strb    r1,[r2,#&308]

         mov     r1,#&00
        strb    r1,[r2,#&308]

         mov     r1,#&00
        strb    r1,[r2,#&30c]

         mov     r1,#&00
        strb    r1,[r2,#&310]

         mov     r1,#&00
        strb    r1,[r2,#&318]

         mov     r1,#&bb
        strb    r1,[r2,#&31c]

         mov     r1,#&8
        strb    r1,[r2,#&320]

         mov     r1,#&19
        strb    r1,[r2,#&324]

             LDR     R1,=&FF8000
              LDR     R2,=&FF0000
              MOV     R3,#00

RamInit_not_done_zero_2          
              STRB    R3,[R2]
              ADD     R2,R2,#1
              CMP     R1,R2     
              BNE    RamInit_not_done_zero_2

            ldr     r0,=start_dnld_flash_begin      ;assign flash and ram begin address
           ldr        r3,=&FF1000                             ;START_ADDRESS_OF_RAM
            ldr     r6,=start_dnld_flash_end


;continue_download
01
            ldr     r1,[r0]                 ;save content of flash
            cmp     r1,r6                           ;check if no more download code
            beq     %F03                            ;branch_to_ram
            str     r1,[r3]                 ;store it into ram
            
            add     r0,r0,#&4                  ;point to next flash location
            add     r3,r3,#&4                       ;point to next ram location

            b       %B01                            ;continue_download

03
            ldr     r0,=interrupt_handler_begin     ;assign flash and ram begin address
           ldr        r3,=&FF0900                             ;START_ADDRESS_OF_RAM
            ldr     r6,=interrupt_handler_end

04
            ldr     r1,[r0]                             ;save content of flash
            cmp     r1,r6                            ;check if no more download code
            beq     %F02                                    ;branch_to_ram
            str     r1,[r3]                             ;store it into ram

            
            add     r0,r0,#&4                          ;point to next flash location
            add     r3,r3,#&4                      ;point to next ram location

            b       %B04                                        ;continue_download

02            ;branch_to_ram
        
            LDR        R0, =&FFFF30            ;CacheConfigurationReg
         MOV        R1,#&00
           STR        R1,[R0]

            LDR        R0, =&FFC000            ;Disable interrupt
         MOV        R1,#&00
           STR        R1,[R0]

            LDR        R0, =&FFFF04            ;set 16bits data
         LDR        R1,=&1F0025
           STR        R1,[R0]

            b        START_ADDRESS_OF_RAM


start_dnld_flash_begin
            nop
            nop
            nop
            nop


            mov          r0,#&00                        ;data low 16 bits
            mov         r5,#&C0
            orr         r0,r0,r5,lsl#8
            mov        r5,#&FF
            orr        r0,r0,r5,lsl#16

50         ldrb        r1, [r0, #&314]                ; LSR
            and        r1,r1,#&20                    ; wait for transmit side ready
            tst        r1,#0x20                        ;
          beq         %B50                            ; 
            mov        r1,#&3e
            strb        r1,[r0,#&300]

51         ldrb        r1, [r0, #&314]                ; LSR
            and        r1,r1,#&20                    ; wait for transmit side ready
            tst        r1,#0x20                        ;
          beq         %B51                            ; 
            mov        r1,#&3e
            strb        r1,[r0,#&300]

52         ldrb        r1, [r0, #&314]                ; LSR
            and        r1,r1,#&20                    ; wait for transmit side ready
            tst        r1,#0x20                        ;
          beq         %B52                            ; 
            mov        r1,#&3e
            strb        r1,[r0,#&300]

;******************************************************************
            ;SerUartStartLocation
            mov        r1,#&00
            mov        r4,#&C0
            orr        r1,r1,r4,lsl#8
            mov        r0,#&FF
            orr        r0,r1,r0,lsl#16

            ;disable ITs
         mov         r1, #&0
         strb        r1, [r0,#&308]                ;#SIER      ; disable ITs

;mrm
;disable the autobaud
            mov         r1,#&00
            strb        r1,[r0,#&318]                ;SBRR = 0X20

;mrm
;set speed to 115200
            ;mov         r1,#&10
            mov         r1,#&8
            strb        r1,[r0,#&320]                ;SBRR = 0X20

;mrm32197
;set div. to 19h
;            mov         r1,#&19
;            strb        r1,[r0,#&324]                ;SBRR = 0X20


         ; configures the Line Control Register
         mov         r1, #&03                        ;#LCRvalue
         strb        r1, [r0,#&310 ]                ;#SLCR

         ;set the pre divisor register
;         mov         r1, #&25                     ;#SPDRvalue
         mov         r1, #&19                     ;#SPDRvalue
         strb        r1, [r0, #&324]                ;#SPDR

            ;enable the serial interrupt
            mov        r1,#1    
         strb        r1, [r0, #&308]                ;#SIER      ;enable ITs


            ;SerialIntLocation  = 0xFF83c4
            mov        r4,#&C4
            mov        r3,#&83
            orr        r4,r4,r3,lsl#8
            mov        r1,#&FF
            orr        r1,r4,r1,lsl#16

            ;interrupt_handler_address = 0xFF0900
            mov        r4,#&c2
            mov        r3,#&37
            orr        r3,r3,r4,lsl#8
            mov        r5,#&ea
            mov        r4,#&3f
            orr        r4,r4,r5,lsl#8
            orr        r4,r3,r4,lsl#16
            str         r4,[r1]

;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;

;-----------------------------------------------------------------
;Software product identification entry
;load data AA to address 5555
;            mov          r4,#&AA                         ;data low 16 bits
;            mov         r6,#&AA
;            orr         r4,r4,r6,lsl#8
;            mov        r5,#&AA                        ;address 5555
;            mov        r6,#&AA
;            orr        r5,r5,r6,lsl#8
;            str        r4,[r5]

;load data 55 to address 2aaa
;            mov          r4,#&55                         ;data low 16 bits
;            mov         r6,#&55
;            orr         r4,r4,r6,lsl#8
;            mov        r5,#&54                        ;address 2AAA
;            mov        r6,#&55
;            orr         r5,r5,r6,lsl#8
;            str        r4,[r5]

;load data 90 to address 5555
;            mov          r4,#&90                         ;data low 16 bits
;            mov         r6,#&90
;            orr         r4,r4,r6,lsl#8
;            mov        r5,#&AA                        ;address 5555
;            mov        r6,#&AA
;            orr         r5,r5,r6,lsl#8
;            str        r4,[r5]

;read device code of atmel
;            mov        r4,#&03                        ;addres of device code 
;            mov        r5,#&00
;            orr         r4,r4,r5,lsl#8            
;            ldr        r3,[r4]
;            and        r3,r3,#&ff
;            cmp        r3,#&d5                        ;da for 2M, d5 for 1M
;            beq        %F06
            ldr        r2,=&200                        ;ATMEL 256 BYTES
;            b            %F07
;06
;            ldr        r2,=&100                        ;ATMEL 128 BYTES    
;07

;************************************************************************
;Software product identification exit
;load data AA to address 5555
;            mov          r4,#&AA                         ;data low 16 bits
;            mov         r6,#&AA
;            orr         r4,r4,r6,lsl#8
;            mov        r5,#&AA                        ;address 5555
;            mov        r6,#&AA
;            orr        r5,r5,r6,lsl#8
;            str        r4,[r5]

;load data 55 to address 2aaa
;            mov          r4,#&55                         ;data low 16 bits
;            mov         r6,#&55
;            orr         r4,r4,r6,lsl#8
;            mov        r5,#&54                        ;address 2AAA
;            mov        r6,#&55
;            orr         r5,r5,r6,lsl#8
;            str        r4,[r5]

;load data 90 to address 5555
;            mov          r4,#&F0                         ;data low 16 bits
;            mov         r6,#&F0
;            orr         r4,r4,r6,lsl#8
;            mov        r5,#&AA                        ;address 5555
;            mov        r6,#&AA
;            orr         r5,r5,r6,lsl#8
;            str        r4,[r5]

;            ldr        r2,=&200                        ;ATMEL 256 BYTES

; r2     = flash size
; r8     = start address of flash
; r9  = 
; r10 = test contidition for time out
; r11 = time out
; r12 = print dot to screen 
; r13 = ff0000 (begin address of buffer)
;store data into buffer
;-----------------------------------------------------------------
            ;enable global interrupt
            mov        r0,#&00
            mov        r1,#&C0
            orr        r1,r0,r1,lsl#8
            mov        r3,#&FF
            orr        r3,r1,r3,lsl#16
            mov          r9,#&02
            str      r9,[r3,#&00]

            ;address of counter 
            mov        r0,#&00
            mov        r1,#&08
            orr        r1,r0,r1,lsl#8
            mov        r3,#&FF
            orr        r3,r1,r3,lsl#16

            ;store begin address of buffer (0xff0000) in 0xff0800 location
            mov        r0,#&00
            mov        r1,#&00
            orr        r1,r0,r1,lsl#8
            mov        r0,#&FF
            orr        r0,r1,r0,lsl#16
            str        r0,[r3]

            mov        r3,#&00                    
            mov        r8,#&00
            mov        r7,#&00
            mov        r11,#&00                    ;delay loop
            mov        r10,#&00                    ;r10 test condition for time out
                                                    ;if r10==1 then data else nothign
05                                
            mov        r4,#&0                            ;flash size
            ;check if 512 bytes
            mov        r0,#&00                    ;address of counter 
            mov        r1,#&08
            orr        r1,r0,r1,lsl#8
            mov        r0,#&FF
            orr        r0,r1,r0,lsl#16
            
;if buffer > 512 bytes
;-------------------------------------------------------------------
15
            add        r11,r11,#&1                        ;if less than 512 bytes
            cmp        r11,#0x800000                    ;or time out
            bge        %F22
            ldrb        r1,[r0]
            ldrb        r3,[r0,#&1]
            orr        r1,r1,r3,lsl#8
            cmp        r1,r2                                ;#0x200
            blt        %B15

            cmp        r10,#&01
            beq        %F23
            mov        r0,#&00                    ;address of counter 
            mov        r1,#&00
            orr        r1,r0,r1,lsl#8
            mov        r0,#&FF
            orr        r0,r1,r0,lsl#16
            ldrb        r3,[r0]
            cmp        r3,#0x06
            beq        %F19
            cmp        r3,#0x0b
            bne        %F40

19            
            ldrb        r3,[r0,#&3]
            cmp        r3,#0xEA
            bne        %F40

;;;;;;;;;;;;;;;;;;
;erase the whole chip
;load AAAA to 5555
            mov          r0,#&AA                         ;data low 16 bits
            mov         r3,#&AA
            orr         r0,r0,r3,lsl#8
            mov        r1,#&AA                        ;address 5555
            mov        r3,#&AA
            orr        r1,r1,r3,lsl#8
            str        r0,[r1]

;load data 5555 to address 2AAAA
            mov          r0,#&55                         ;data low 16 bits
            mov         r3,#&55
            orr         r0,r0,r3,lsl#8
            mov        r1,#&54                        ;address 2AAA
            mov        r3,#&55
            orr         r1,r1,r3,lsl#8
            str        r0,[r1]

;load data 80 to address 5555
            mov          r0,#&80                         ;data low 16 bits
            mov         r3,#&80
            orr         r0,r0,r3,lsl#8
            mov        r1,#&AA                        ;address 5555
            mov        r3,#&AA
            orr         r1,r1,r3,lsl#8
            str        r0,[r1]

;load data AA to address 5555
            mov          r0,#&AA                         ;data low 16 bits
            mov         r3,#&AA
            orr         r0,r0,r3,lsl#8
            mov        r1,#&AA                        ;address 2AAA
            mov        r3,#&AA
            orr         r1,r1,r3,lsl#8
            str        r0,[r1]

;load data 5555 to address 2555
            mov          r0,#&55                         ;data low 16 bits
            mov         r3,#&55
            orr         r0,r0,r3,lsl#8
            mov        r1,#&54                        ;address 5555
            mov        r3,#&55
            orr         r1,r1,r3,lsl#8
            str        r0,[r1]

;load data 1010 to address 5555
            mov          r0,#&10                         ;data low 16 bits
            mov         r3,#&10
            orr         r0,r0,r3,lsl#8
            mov        r1,#&AA                        ;address 2AAA
            mov        r3,#&AA
            orr         r1,r1,r3,lsl#8
            str        r0,[r1]

            mov        r1,#&00
11
            add        r1,r1,#&2
            cmp        r1,#0x800000
            blt        %B11

;;;;;;;;;;;;;;;;;;
23
            ldr        r11,=&700000
            mov        r10,#&1

;-----------------------------------------------------------------
;erase a sector and begin download
;            mov          r0,#&aa                         ;data low 16 bits
;            mov         r3,#&aa
;            orr         r0,r0,r3,lsl#8
;            mov        r1,#&AA                        ;address 5555
;            mov        r3,#&AA
;            orr        r1,r1,r3,lsl#8
;            str        r0,[r1]

;load data 55 to address 2aaa
;            mov          r0,#&55                         ;data low 16 bits
;            mov         r3,#&55
;            orr         r0,r0,r3,lsl#8
;            mov        r1,#&54                        ;address 2AAA
;            mov        r3,#&55
;            orr         r1,r1,r3,lsl#8
;            str        r0,[r1]

;load data 90 to address 5555
;            mov          r0,#&A0                         ;data low 16 bits
;            mov         r3,#&A0
;            orr         r0,r0,r3,lsl#8
;            mov        r1,#&AA                        ;address 5555
;            mov        r3,#&AA
;            orr         r1,r1,r3,lsl#8
;            str        r0,[r1]

;write to flash 
;---------------------------------------------------------------
            ;reset pointer to begin of buffer
            mov        r0,#&00
            mov        r9,#&00
            mov        r1,#&00
            orr        r1,r0,r1,lsl#8
            mov        r13,#&FF
            orr        r13,r1,r13,lsl#16
            mov        r3,#&0
16
;load data AAAA to 55555
            mov          r0,#&AA                         ;data low 16 bits
            mov         r3,#&AA
            orr         r0,r0,r3,lsl#8
            mov        r1,#&AA                        ;address 5555
            mov        r3,#&AA
            orr        r1,r1,r3,lsl#8
            str        r0,[r1]

;load data 5555 to address 2aaa
            mov          r0,#&55                         ;data low 16 bits
            mov         r3,#&55
            orr         r0,r0,r3,lsl#8
            mov        r1,#&54                        ;address 2AAA
            mov        r3,#&55
            orr         r1,r1,r3,lsl#8
            str        r0,[r1]

;load data A0A0 to address 5555
            mov          r0,#&A0                         ;data low 16 bits
            mov         r3,#&A0
            orr         r0,r0,r3,lsl#8
            mov        r1,#&AA                        ;address 5555
            mov        r3,#&AA
            orr         r1,r1,r3,lsl#8
            str        r0,[r1]

            ldrb        r0,[r13]
            add        r13,r13,#&1
            ldrb        r4,[r13]
            orr         r0,r0,r4,lsl#8
            add        r13,r13,#&1

            ;dload_begin
            str          r0,[r8]
            add          r8,r8,#&2
            add        r9,r9,#&2
            cmp          r9,r2
            bge          %F17        ;beq      dload_end
;09
            mov        r1,#&0
;delay loop
10
            add        r1,r1,#&2
            cmp        r1,#0x100
            blt        %B10

            b              %B16

17
            mov        r7,#&00

;reset pointer to begin of buffer
;buffer  = buffer + count
;--------------------------------------------------------------------
            ;address of counter 
            mov        r0,#&00
            mov        r1,#&08
            orr        r1,r0,r1,lsl#8
            mov        r4,#&FF
            orr        r4,r1,r4,lsl#16

            ;store begin address of buffer (0xff0000+count) in 0xff0800 location
            ldr        r3,[r4]
            sub        r3,r3,r2                        ;#&200
            str        r3,[r4]

;copy overrun data to begin buffer
;--------------------------------------------------------
            and        r3,r3,#&ff

            mov        r0,#&00
            mov        r1,#&00
            orr        r1,r0,r1,lsl#8
            mov        r0,#&FF
            orr        r0,r1,r0,lsl#16

            mov        r4,#&00
            mov        r1,#&02
            orr        r1,r4,r1,lsl#8
            mov        r4,#&FF
            orr        r4,r1,r4,lsl#16
        
21
            ldrb        r1,[r4]
            strb        r1,[r0]                
            sub        r3,r3,#&1                
            add        r0,r0,#&1
            add        r4,r4,#&1
            cmp        r3,#0x00
            bgt        %B21

;turn flow control on 
;--------------------------------------------------------
            ;turn on CTS
            mov        r0,#&00
            mov        r1,#&C0
            orr        r1,r0,r1,lsl#8
            mov        r0,#&FF
            orr        r0,r1,r0,lsl#16
            ldrb        r1,[r0,#&31C]
            orr        r1,r1,#&13
            strb        r1,[r0,#&31C]


            b            %B05

;if data less than or equal to 512 bytes
;-------------------------------------------------------------
22
            cmp        r10,#0x1
            blt        %F08

;erase a sector and begin download
;            mov          r0,#&aa                         ;data low 16 bits
;            mov         r3,#&aa
;            orr         r0,r0,r3,lsl#8
;            mov        r1,#&AA                        ;address 5555
;            mov        r3,#&AA
;            orr        r1,r1,r3,lsl#8
;            str        r0,[r1]

;load data 55 to address 2aaa
;            mov          r0,#&55                         ;data low 16 bits
;            mov         r3,#&55
;            orr         r0,r0,r3,lsl#8
;            mov        r1,#&54                        ;address 2AAA
;            mov        r3,#&55
;            orr         r1,r1,r3,lsl#8
;            str        r0,[r1]

;load data 90 to address 5555
;            mov          r0,#&A0                         ;data low 16 bits
;            mov         r3,#&A0
;            orr         r0,r0,r3,lsl#8
;            mov        r1,#&AA                        ;address 5555
;            mov        r3,#&AA
;            orr         r1,r1,r3,lsl#8
;            str        r0,[r1]
;load data AAAA to 55555
            mov          r0,#&AA                         ;data low 16 bits
            mov         r3,#&AA
            orr         r0,r0,r3,lsl#8
            mov        r1,#&AA                        ;address 5555
            mov        r3,#&AA
            orr        r1,r1,r3,lsl#8
            str        r0,[r1]

;load data 5555 to address 2aaa
            mov          r0,#&55                         ;data low 16 bits
            mov         r3,#&55
            orr         r0,r0,r3,lsl#8
            mov        r1,#&54                        ;address 2AAA
            mov        r3,#&55
            orr         r1,r1,r3,lsl#8
            str        r0,[r1]

;load data A0A0 to address 5555
            mov          r0,#&A0                         ;data low 16 bits
            mov         r3,#&A0
            orr         r0,r0,r3,lsl#8
            mov        r1,#&AA                        ;address 5555
            mov        r3,#&AA
            orr         r1,r1,r3,lsl#8
            str        r0,[r1]

;write to flash
;--------------------------------------------------------
            ;reset pointer to begin of buffer
            mov        r0,#&00
            mov        r1,#&00
            mov        r9,#&00
            orr        r1,r0,r1,lsl#8
            mov        r13,#&FF
            orr        r13,r1,r13,lsl#16
            mov        r3,#&0
26
            ldrb        r0,[r13]
            add        r13,r13,#&1
            ldrb        r4,[r13]
            orr         r0,r0,r4,lsl#8
            add        r13,r13,#&1

            ;dload_begin
            str          r0,[r8]
            add          r8,r8,#&2
            add        r9,r9,#&2
            cmp          r9,r2
            bge          %F29        ;beq      dload_end

            mov        r1,#&0
;delay loop
35
            add        r1,r1,#&2
            cmp        r1,#0x100
            blt        %B35

            b              %B26
29
            nop
;************************************************************************
08
;            LDR        r0,=&FFC400                    ;=ParallelPortBase
            mov          r0,#&00                        ;data low 16 bits
            mov         r5,#&C0
            orr         r0,r0,r5,lsl#8
            mov        r5,#&FF
            orr        r0,r0,r5,lsl#16

30         ldrb        r1, [r0, #&314]                ; LSR
            and        r1,r1,#&20                    ; wait for transmit side ready
            tst        r1,#0x20                        ;
          beq         %B30                            ; 
            mov        r1,#&45
            strb        r1,[r0,#&300]

31         ldrb        r1, [r0, #&314]                ; LSR
            and        r1,r1,#&20                    ; wait for transmit side ready
            tst        r1,#0x20                        ;
          beq         %B31                            ; 
            mov        r1,#&4E
            strb        r1,[r0,#&300]

32            ldrb        r1, [r0, #&314]                ; LSR
            and        r1,r1,#&20                    ; wait for transmit side ready
            tst        r1,#0x20                        ;
          beq         %B32                            ; 
            mov        r1,#&44
            strb        r1,[r0,#&300]

33            ldrb        r1, [r0, #&314]                ; LSR
            and        r1,r1,#&20                    ; wait for transmit side ready
            tst        r1,#0x20                        ;
          beq         %B33                            ; 
            mov        r1,#&a
            strb        r1,[r0,#&300]

34            ldrb        r1, [r0, #&314]                ; LSR
            and        r1,r1,#&20                    ; wait for transmit side ready
            tst        r1,#0x20                        ;
          beq         %B34                            ; 
            mov        r1,#&d
            strb        r1,[r0,#&300]
;*********************************************
            B            %F48
40
            mov          r0,#&00                        ;data low 16 bits
            mov         r5,#&C0
            orr         r0,r0,r5,lsl#8
            mov        r5,#&FF
            orr        r0,r0,r5,lsl#16

41         ldrb        r1, [r0, #&314]                ; LSR
            and        r1,r1,#&20                    ; wait for transmit side ready
            tst        r1,#0x20                        ;
          beq         %B41                            ; 
            mov        r1,#&45
            strb        r1,[r0,#&300]

42         ldrb        r1, [r0, #&314]                ; LSR
            and        r1,r1,#&20                    ; wait for transmit side ready
            tst        r1,#0x20                        ;
          beq         %B42                            ; 
            mov        r1,#&52
            strb        r1,[r0,#&300]

43            ldrb        r1, [r0, #&314]                ; LSR
            and        r1,r1,#&20                    ; wait for transmit side ready
            tst        r1,#0x20                        ;
          beq         %B43                            ; 
            mov        r1,#&52
            strb        r1,[r0,#&300]

44            ldrb        r1, [r0, #&314]                ; LSR
            and        r1,r1,#&20                    ; wait for transmit side ready
            tst        r1,#0x20                        ;
          beq         %B44                            ; 
            mov        r1,#&4F
            strb        r1,[r0,#&300]

45            ldrb        r1, [r0, #&314]                ; LSR
            and        r1,r1,#&20                    ; wait for transmit side ready
            tst        r1,#0x20                        ;
          beq         %B45                            ; 
            mov        r1,#&52
            strb        r1,[r0,#&300]
            mov        r1,#&0

;delay loop
46
            add        r1,r1,#&2
            cmp        r1,#0x80000
            blt        %B46



;*********************************************

48
;set it back to 32bits
            mov        r0,#&04
            mov        r1,#&FF
            orr        r0,r0,r1,lsl#8
            mov        r1,#&FF
            orr        r0,r0,r1,lsl#16

            mov        r1,#&71
            mov        r4,#&00
            orr        r1,r1,r4,lsl#8

            mov        r4,#&1F
            orr        r1,r1,r4,lsl#16
           str        r1,[r0]

            nop
            mov        pc,#&0
            nop
            
start_dnld_flash_end
            nop

interrupt_handler_begin
            ; =InterruptClearReg                   
            mov        r8,#&00
            mov        r9,#&C0
            orr        r9,r8,r9,lsl#8
            mov        r8,#&FF
            orr        r8,r9,r8,lsl#16
            mov          r9,#&02
            str      r9,[r8,#&04]

            ;check if characters available
13
             ldrb        r9, [r8, #&314]            ; slsr
            and        r9,r9,#&01                    ; wait for a character arrives
            cmp        r9,#0x01
          bne         %B13                            
            ldrb        r10, [r8,#&304]              ; store char in R3

            ;load counter back
            mov        r8,#&00
            mov        r9,#&08
            orr        r9,r8,r9,lsl#8
            mov        r8,#&FF
            orr        r8,r9,r8,lsl#16
            ldr        r9,[r8]
            strb        r10,[r9]

            add        r9,r9,#&1
            str       r9,[r8]

            and      r9,r9,#&200
            cmp        r9,#0x0
            beq        %F18

;turn CTS flow control off
;-----------------------------------------------------------
            ;buffer has 512 bytes if get to here
            ;turn off CTS
            mov        r8,#&00
            mov        r9,#&C0
            orr        r9,r8,r9,lsl#8
            mov        r8,#&FF
            orr        r8,r9,r8,lsl#16
            ldrb        r9,[r8,#&31C]
            orr        r9,r9,#&12
            and        r9,r9,#&fe
            strb        r9,[r8,#&31C]

            mov        r8,#&00
            mov        r9,#&C0
            orr        r9,r8,r9,lsl#8
            mov        r8,#&FF
            orr        r8,r9,r8,lsl#16

44         ldrb        r9, [r8, #&314]                ; LSR
            and        r9,r9,#&20                    ; wait for transmit side ready
            tst        r9,#0x20                        ;
          beq         %B44                            ; 

            ;send . to screen
            mov        r9,#&2E
            strb        r9,[r8,#&300]
18
            subs     r15,r14,#&4                     

            NOP
interrupt_handler_end


 ]

 [ SERIAL_ON = 0
main_dnld_flash_atmel

               LDR     R1,=&FFc158
              LDR     R2,=&FFc100
              MOV     R3,#0000000

RamInit_not_done_zero_1          
              STR     R3,[R2]
              ADD     R2,R2,#4
              CMP     R1,R2     
              BNE    RamInit_not_done_zero_1

             LDR     R1,=&FF8000
              LDR     R2,=&FF0000
              MOV     R3,#00

RamInit_not_done_zero_2          
              STRB    R3,[R2]
              ADD     R2,R2,#1
              CMP     R1,R2     
              BNE    RamInit_not_done_zero_2


            ldr     r0,=start_dnld_flash_begin      ;assign flash and ram begin address
           ldr        r3,=&FF1000                             ;START_ADDRESS_OF_RAM
            ldr     r6,=start_dnld_flash_end


;continue_download
01
            ldr     r1,[r0]                 ;save content of flash
            cmp     r1,r6                           ;check if no more download code
            beq     %F09                            ;branch_to_ram
            str     r1,[r3]                 ;store it into ram
            
            add     r0,r0,#&4                  ;point to next flash location
            add     r3,r3,#&4                       ;point to next ram location

            b       %B01                            ;continue_download

09
            LDR        R0, =&FFFF30            ;CacheConfigurationReg
         MOV        R1,#&00
           STR        R1,[R0]

            LDR        R0, =&FFC000            ;Disable interrupt
         MOV        R1,#&00
           STR        R1,[R0]

            LDR        R0, =&FFFF04            ;set 16bits data
         LDR        R1,=&1F0025
           STR        R1,[R0]

            b        START_ADDRESS_OF_RAM

start_dnld_flash_begin
            nop
            nop
            nop
            nop
;-------- print >>> to screen ------------------
            mov          r0,#&00                        ;data low 16 bits
            mov         r5,#&C4
            orr         r0,r0,r5,lsl#8
            mov        r5,#&FF
            orr        r0,r0,r5,lsl#16

45         LDRB        r5, [r0, #&1C]                ; LSR
            AND        r5,r5,#&01                    ; wait for transmit side ready
            CMP        r5,#0x01                            ;
          BEQ         %B45                            ; 
            mov        r3,#&3e
            strb        r3, [r0,#&00]              ; store char in R3

46            LDRB        r5, [r0, #&1C]                ; LSR
            AND        r5,r5,#&01                    ; wait for a character arrives
            CMP        r5,#0x01
          BEQ         %B46                            ; GetByteLoop: wait until IT
            strb        r3, [r0,#&00]              ; get char in R3

47         LDRB        r5, [r0, #&1C]                ; LSR
            AND        r5,r5,#&01                    ; wait for a character arrives
            CMP        r5,#0x01
          BEQ         %B47                            ; GetByteLoop: wait until IT
            mov        r3,#&3e
            strb        r3, [r0,#&00]              ; get char in R3

;*********************************************************************
;Software product identification entry
;load data AA to address 5555
;            mov          r4,#&AA                         ;data low 16 bits
;            mov         r6,#&AA
;            orr         r4,r4,r6,lsl#8
;            mov        r5,#&AA                        ;address 5555
;            mov        r6,#&AA
;            orr        r5,r5,r6,lsl#8
;            str        r4,[r5]

;load data 55 to address 2aaa
;            mov          r4,#&55                         ;data low 16 bits
;            mov         r6,#&55
;            orr         r4,r4,r6,lsl#8
;            mov        r5,#&54                        ;address 2AAA
;            mov        r6,#&55
;            orr         r5,r5,r6,lsl#8
;            str        r4,[r5]

;load data 90 to address 5555
;            mov          r4,#&90                         ;data low 16 bits
;            mov         r6,#&90
;            orr         r4,r4,r6,lsl#8
;            mov        r5,#&AA                        ;address 5555
;            mov        r6,#&AA
;            orr         r5,r5,r6,lsl#8
;            str        r4,[r5]

;read device code of atmel
;            mov        r4,#&03                        ;addres of device code 
;            mov        r5,#&00
;            orr         r4,r4,r5,lsl#8            

;            ldr        r3,[r4]
;            and        r3,r3,#&ff
;            cmp        r3,#&d5                        ;da for 2M, d5 for 1M
;            beq        %F06
            ldr        r2,=&200                        ;ATMEL 256 BYTES
;            b            %F07
;06
;            ldr        r2,=&100                        ;ATMEL 128 BYTES    
;07

;************************************************************************
;Software product identification exit
;load data AA to address 5555
;            mov          r4,#&AA                         ;data low 16 bits
;            mov         r6,#&AA
;            orr         r4,r4,r6,lsl#8
;            mov        r5,#&AA                        ;address 5555
;            mov        r6,#&AA
;            orr        r5,r5,r6,lsl#8
;            str        r4,[r5]

;load data 55 to address 2aaa
;            mov          r4,#&55                         ;data low 16 bits
;            mov         r6,#&55
;            orr         r4,r4,r6,lsl#8
;            mov        r5,#&54                        ;address 2AAA
;            mov        r6,#&55
;            orr         r5,r5,r6,lsl#8
;            str        r4,[r5]

;load data 90 to address 5555
;            mov          r4,#&F0                         ;data low 16 bits
;            mov         r6,#&F0
;            orr         r4,r4,r6,lsl#8
;            mov        r5,#&AA                        ;address 5555
;            mov        r6,#&AA
;            orr         r5,r5,r6,lsl#8
;            str        r4,[r5]

            ldr          r8,=&00                        ;address of begin flash
            ldr        r11,=&0
            ldr        r9,=&00
            ldr        r7,=&00
            mov        r10,#&0

;download subroutine
;********************************************************************
10
;;;;
            mov        r4,#&00
            mov        r5,#&00
            orr        r4,r4,r5,lsl#8
            mov        r13,#&FF                                ;temp storage
            orr        r13,r4,r13,lsl#16
            mov        r12,#&0

;read 512 bytes from host and stores it in location FF0000
;**********************************************************************
            LDR        r0,=&FFC400                    ;=ParallelPortBase
            mov          r0,#&00                        ;data low 16 bits
            mov         r5,#&C4
            orr         r0,r0,r5,lsl#8
            mov        r5,#&FF
            orr        r0,r0,r5,lsl#16


36         LDRB        r5, [r0, #&1C]                ; LSR
            ADD        R7,R7,#&1
            CMP        R7,#0x800000      ;R10
            BLT        %F41

            B            %F08
41
            AND        r5,r5,#&60                    ; wait for a character arrives
            TST        r5,#0x60
          BNE         %B36                            ; 
            ldrb        r3, [r0,#&04]              ; get char in R0

            strb        r3,[r13]            
    
            add        r12,r12,#&1
            mov        r13,#&FF
            orr        r13,r12,r13,lsl#16

            ldr        r7,=&700000
            cmp        r12,r2
            bne        %B36

            cmp        r11,#&00
            bne        %F23
            
;;----------------------------------
;;;;;erase the whole chip
;            ldr        r3,=&0
;            mov        r4,#&00
;            mov        r5,#&00
;            orr        r4,r4,r5,lsl#8
;            mov        r13,#&FF
;            orr        r13,r4,r13,lsl#16
;            mov        r12,#&0
;load AAAA to 5555
            mov          r0,#&AA                         ;data low 16 bits
            mov         r3,#&AA
            orr         r0,r0,r3,lsl#8
            mov        r1,#&AA                        ;address 5555
            mov        r3,#&AA
            orr        r1,r1,r3,lsl#8
            str        r0,[r1]

;load data 5555 to address 2AAAA
            mov          r0,#&55                         ;data low 16 bits
            mov         r3,#&55
            orr         r0,r0,r3,lsl#8
            mov        r1,#&54                        ;address 2AAA
            mov        r3,#&55
            orr         r1,r1,r3,lsl#8
            str        r0,[r1]

;load data 80 to address 5555
            mov          r0,#&80                         ;data low 16 bits
            mov         r3,#&80
            orr         r0,r0,r3,lsl#8
            mov        r1,#&AA                        ;address 5555
            mov        r3,#&AA
            orr         r1,r1,r3,lsl#8
            str        r0,[r1]

;load data AA to address 5555
            mov          r0,#&AA                         ;data low 16 bits
            mov         r3,#&AA
            orr         r0,r0,r3,lsl#8
            mov        r1,#&AA                        ;address 2AAA
            mov        r3,#&AA
            orr         r1,r1,r3,lsl#8
            str        r0,[r1]

;load data 5555 to address 2555
            mov          r0,#&55                         ;data low 16 bits
            mov         r3,#&55
            orr         r0,r0,r3,lsl#8
            mov        r1,#&54                        ;address 5555
            mov        r3,#&55
            orr         r1,r1,r3,lsl#8
            str        r0,[r1]

;load data 1010 to address 5555
            mov          r0,#&10                         ;data low 16 bits
            mov         r3,#&10
            orr         r0,r0,r3,lsl#8
            mov        r1,#&AA                        ;address 2AAA
            mov        r3,#&AA
            orr         r1,r1,r3,lsl#8
            str        r0,[r1]

            mov        r1,#&0
11
            add        r1,r1,#&2
            cmp        r1,#0x800000
            blt        %B11
;;---------------------------------


23
            mov        r11,#&01



;**********************************************************************
;;;;;erase a sector and begin download
;load aa to 5555
;            mov          r0,#&aa                         ;data low 16 bits
;            mov         r3,#&aa
;            orr         r0,r0,r3,lsl#8
;            mov        r1,#&AA                        ;address 5555
;            mov        r3,#&AA
;            orr        r1,r1,r3,lsl#8
;            str        r0,[r1]

;load data 55 to address 2aaa
;            mov          r0,#&55                         ;data low 16 bits
;            mov         r3,#&55
;            orr         r0,r0,r3,lsl#8
;            mov        r1,#&54                        ;address 2AAA
;            mov        r3,#&55
;            orr         r1,r1,r3,lsl#8
;            str        r0,[r1]

;load data 90 to address 5555
;            mov          r0,#&A0                         ;data low 16 bits
;            mov         r3,#&A0
;            orr         r0,r0,r3,lsl#8
;            mov        r1,#&AA                        ;address 5555
;            mov        r3,#&AA
;            orr         r1,r1,r3,lsl#8
;            str        r0,[r1]

;***********************************************************************
;write a block of memory to flash
            mov        r9,#&00
            ldr        r3,=&0
            mov        r4,#&00
            mov        r5,#&00
            orr        r4,r4,r5,lsl#8
            mov        r13,#&FF
            orr        r13,r4,r13,lsl#16
            mov        r12,#&0

03
;load data AAAA to 55555
            mov          r0,#&AA                         ;data low 16 bits
            mov         r3,#&AA
            orr         r0,r0,r3,lsl#8
            mov        r1,#&AA                        ;address 5555
            mov        r3,#&AA
            orr        r1,r1,r3,lsl#8
            str        r0,[r1]

;load data 5555 to address 2aaa
            mov          r0,#&55                         ;data low 16 bits
            mov         r3,#&55
            orr         r0,r0,r3,lsl#8
            mov        r1,#&54                        ;address 2AAA
            mov        r3,#&55
            orr         r1,r1,r3,lsl#8
            str        r0,[r1]

;load data A0A0 to address 5555
            mov          r0,#&A0                         ;data low 16 bits
            mov         r3,#&A0
            orr         r0,r0,r3,lsl#8
            mov        r1,#&AA                        ;address 5555
            mov        r3,#&AA
            orr         r1,r1,r3,lsl#8
            str        r0,[r1]

            ldrb        r0,[r13]
            add        r13,r13,#&1
            ldrb        r4,[r13]
            orr         r0,r0,r4,lsl#8
            add        r13,r13,#&1

            ;dload_begin
            str          r0,[r8]
            add          r8,r8,#&2
            add        r9,r9,#&2
            cmp          r9,r2
            bge          %F43        ;beq      dload_end

            mov        r1,#&0

;delay loop
40
            add        r1,r1,#&2
            cmp        r1,#0x100
            blt        %B40

            b              %B03

43    

;            add        r10,r10,#1
;            cmp        r10,#0x20
;            blt        %F43

;            LDR        r0,=&FFC400                    ;=ParallelPortBase
            mov          r0,#&00                        ;data low 16 bits
            mov         r5,#&C4
            orr         r0,r0,r5,lsl#8
            mov        r5,#&FF
            orr        r0,r0,r5,lsl#16

42         LDRB        r5, [r0, #&1C]                ; LSR
            AND        r5,r5,#&01                    ; wait for transmit side ready
            CMP        r5,#0x01                            ;
          BEQ         %B42                            ; 
            mov        r3,#&2E
            strb        r3, [r0,#&00]              ; store char in R3
            mov        r10,#&00



            b            %B10

;************************************************************************
08
            cmp        r11,#0x00
            beq        %F60

            mov        r9,#&00
            ldr        r3,=&0
            mov        r4,#&00
            mov        r5,#&00
            orr        r4,r4,r5,lsl#8
            mov        r13,#&FF
            orr        r13,r4,r13,lsl#16
            mov        r12,#&0

63
;load data AAAA to 55555
            mov          r0,#&AA                         ;data low 16 bits
            mov         r3,#&AA
            orr         r0,r0,r3,lsl#8
            mov        r1,#&AA                        ;address 5555
            mov        r3,#&AA
            orr        r1,r1,r3,lsl#8
            str        r0,[r1]

;load data 5555 to address 2aaa
            mov          r0,#&55                         ;data low 16 bits
            mov         r3,#&55
            orr         r0,r0,r3,lsl#8
            mov        r1,#&54                        ;address 2AAA
            mov        r3,#&55
            orr         r1,r1,r3,lsl#8
            str        r0,[r1]

;load data A0A0 to address 5555
            mov          r0,#&A0                         ;data low 16 bits
            mov         r3,#&A0
            orr         r0,r0,r3,lsl#8
            mov        r1,#&AA                        ;address 5555
            mov        r3,#&AA
            orr         r1,r1,r3,lsl#8
            str        r0,[r1]

            ldrb        r0,[r13]
            add        r13,r13,#&1
            ldrb        r4,[r13]
            orr         r0,r0,r4,lsl#8
            add        r13,r13,#&1

            ;dload_begin
            str          r0,[r8]
            add          r8,r8,#&2
            add        r9,r9,#&2
            cmp          r9,r2
            bge          %F62        ;beq      dload_end

            mov        r1,#&0

;delay loop
61
            add        r1,r1,#&2
            cmp        r1,#0x100
            blt        %B61

            b              %B63

60
            mov          r0,#&00                        ;data low 16 bits
            mov         r5,#&C4
            orr         r0,r0,r5,lsl#8
            mov        r5,#&FF
            orr        r0,r0,r5,lsl#16

50         LDRB        r5, [r0, #&1C]                ; LSR
            AND        r5,r5,#&01                    ; wait for transmit side ready
            CMP        r5,#0x01                            ;
          BEQ         %B50                            ; 
            mov        r3,#&45
            strb        r3, [r0,#&00]              ; store char in R3

51            LDRB        r5, [r0, #&1C]                ; LSR
            AND        r5,r5,#&01                    ; wait for a character arrives
            CMP        r5,#0x01
          BEQ         %B51                            ; GetByteLoop: wait until IT
            mov        r3,#&52
            strb        r3, [r0,#&00]              ; get char in R3

52         LDRB        r5, [r0, #&1C]                ; LSR
            AND        r5,r5,#&01                    ; wait for a character arrives
            CMP        r5,#0x01
             BEQ         %B52                            ; GetByteLoop: wait until IT
            mov        r3,#&52
            strb        r3, [r0,#&00]              ; get char in R3

53         LDRB        r5, [r0, #&1C]                ; LSR
            AND        r5,r5,#&01                    ; wait for a character arrives
            CMP        r5,#0x01
             BEQ         %B53                            ; GetByteLoop: wait until IT
            mov        r3,#&4f
            strb        r3, [r0,#&00]              ; get char in R3
54         LDRB        r5, [r0, #&1C]                ; LSR
            AND        r5,r5,#&01                    ; wait for a character arrives
            CMP        r5,#0x01
             BEQ         %B54                            ; GetByteLoop: wait until IT
            mov        r3,#&52
            strb        r3, [r0,#&00]              ; get char in R3

            b            %F33

62
;            LDR        r0,=&FFC400                    ;=ParallelPortBase
            mov          r0,#&00                        ;data low 16 bits
            mov         r5,#&C4
            orr         r0,r0,r5,lsl#8
            mov        r5,#&FF
            orr        r0,r0,r5,lsl#16

30         LDRB        r5, [r0, #&1C]                ; LSR
            AND        r5,r5,#&01                    ; wait for transmit side ready
            CMP        r5,#0x01                            ;
          BEQ         %B30                            ; 
            mov        r3,#&45
            strb        r3, [r0,#&00]              ; store char in R3

31            LDRB        r5, [r0, #&1C]                ; LSR
            AND        r5,r5,#&01                    ; wait for a character arrives
            CMP        r5,#0x01
          BEQ         %B31                            ; GetByteLoop: wait until IT
            mov        r3,#&4E
            strb        r3, [r0,#&00]              ; get char in R3

32         LDRB        r5, [r0, #&1C]                ; LSR
            AND        r5,r5,#&01                    ; wait for a character arrives
            CMP        r5,#0x01
          BEQ         %B32                            ; GetByteLoop: wait until IT
            mov        r3,#&44
            strb        r3, [r0,#&00]              ; get char in R3

33         LDRB        r5, [r0, #&1C]                ; LSR
            AND        r5,r5,#&01                    ; wait for a character arrives
            CMP        r5,#0x01
          BEQ         %B33                            ; GetByteLoop: wait until IT
            mov        r3,#&a
            strb        r3, [r0,#&00]              ; get char in R3

34         LDRB        r5, [r0, #&1C]                ; LSR
            AND        r5,r5,#&01                    ; wait for a character arrives
            CMP        r5,#0x01
          BEQ         %B34                            ; GetByteLoop: wait until IT
            mov        r3,#&d
            strb        r3, [r0,#&00]              ; get char in R3

48
;set it back to 32bits
            mov        r0,#&04
            mov        r1,#&FF
            orr        r0,r0,r1,lsl#8

            mov        r1,#&FF
            orr        r0,r0,r1,lsl#16

            mov        r1,#&71
            mov        r2,#&00
            orr        r1,r1,r2,lsl#8

            mov        r2,#&1F
            orr        r1,r1,r2,lsl#16
           STR        R1,[R0]
            nop
            mov        pc,#&0
            nop
            
start_dnld_flash_end


 ]
    END
