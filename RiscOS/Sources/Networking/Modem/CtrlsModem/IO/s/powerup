;/
;/    Copyright 1995. All Rights Reserved by:
;/    
;/        CIRRUS LOGIC Inc
;/        3100 West Warren Ave
;/        Fremont, CA. 94538
;/        (510) 623-8300
;/
;/
;/    This document contains material confidential to CIRRUS LOGIC its 
;/    contents must not be revealed, used or disclosed to anyone or 
;/    company with out written permission by CIRRUS LOGIC.  
;/    The information contained herein is solely for the use of CIRRUS LOGIC.
;/
;/    File:  powerup.s
;/
;/    Module Version: ACU 1.00
;/
;/    Function:  This file contains the power up and stack initialization 
;/               routine for the ARM Risk Machine.
;/
;/    Product:  ACU 
;/
;/    History:
;/
;/         Created:  06/20/95
;/
;/         ---------------------------------------------------------
;/         -              Modifications            -
;/         ---------------------------------------------------------
;/
;/         Author & Date: CIRRUS LOGIC
;/         Description:
;/         Reason:
;/
;/****************************************************************************
        
        KEEP
        
        INCLUDE powerup.h
             INCLUDE pnp.h

        ;IMPORT  super_mode

        EXPORT set_7_wait_states
        EXPORT goto_sleep_and_wakeup
        EXPORT ROMReset
        EXPORT InitDebugPort
            
                
        IMPORT ParallelSerialIrqInt
       IMPORT  validate_ring   ;22296shujin           

      IMPORT  pnp_ram_dnld
      IMPORT  pnp_status              ;flag used in pnp.s and here
      IMPORT  pcmcia_code

        IMPORT |__main|
    
        ;IMPORT Start_dnld         ;comment out for EEB execution
        ;IMPORT Start_main_dnld_beg;comment out for EEB execution    
        IMPORT PTTBlackLst
        IMPORT pnp_rds_start
        IMPORT START_OF_CIS
              
    
        
        AREA |!powerup|, CODE, READONLY


        ENTRY




        B    ROMReset     
        B    ROMReset     
        B    ROMReset     
        B    ROMReset     

        B    ROMReset     
        B    ROMReset     
        B    ParallelSerialIrqInt
        B    ParallelSerialIrqInt

DEFAULT_COUNTRY         EQU     &FF

        DCD  DEFAULT_COUNTRY    
        DCD  PTTBlackLst        
        DCD  START_OF_CIS
        DCD  pnp_rds_start        
        DCB  "5.40"        ;VERSION_NUMBER for Configuration Utility


ROMReset
        
;CONFIGURE THE CHIP SELECTS

;Configure the CSCR1 Program Memory for proper wait state 

;if 16 bit mode the WS should be 3

;if 8  bit mode the WS should be 1


        LDR    R0,=ChipSelectconfigurationRegOne
        LDR    R1,[R0]
        LDR    R3,=MaskChipWaitMode
        AND    R1,R1,R3
        LDR    R3,=MaskChipOperMode
        AND    R3,R1,R3
        CMP    R3,#1
        BEQ    Mode16bit                
;8 bit mode
        ORR        R1,R1,#ChipsSelOneMaskOneWait
        STR     R1,[R0]
        B    DoneWithChipSelect
            
;16 bit mode
Mode16bit                
        ORR        R1,R1,#ChipsSelOneMaskThreeWait
        STR     R1,[R0]
DoneWithChipSelect

;CONFIGURE CSCR2 @0X90000 FOR DSP

        LDR     R0,=ChipSelectconfigurationRegTwo
        LDR     R2,=ChipSelectconfigurationRegTwoVal   
        STR     R2,[R0]

;CONFIGURE CSCR3 @0XFF0000 FOR DATA MEMORY
                    
        LDR     R0, =ChipSelectconfigurationRegThree    
        LDR     R2, =ChipSelectconfigurationRegThreeVal      
        STR     R2,[R0]
        
;CONFIGURE CSCR4 @0XA0000 FOR EXTERNAL GPIO
;                     
;        LDR     R0, =ChipSelectconfigurationRegFour
;        LDR     R2, =ChipSelectconfigurationRegFourVal       
;        STR     R2,[R0]



;mrm7996
;disable the wait signal

                LDR     R0, =&ffc200
        MOV    R1, #20    
        STR     R1,[R0]


;mrm51496
;modification needed for the new debugger 
;

        LDR       R0, =TimerControlReg0
        LDR      R1,[R0]
        AND      R1,R1,#&00        
        STR       R1,[R0]
    
        LDR       R0, =TimerControlReg1        
        LDR      R1,[R0]
        AND      R1,R1,#&00        
        STR       R1,[R0]

        LDR       R0, =TimerControlReg2        
        LDR      R1,[R0]
        AND      R1,R1,#&00        
        STR       R1,[R0]



        LDR       R0, =InterruptEnableReg                   
        LDR       R1,[R0]
         AND       R1,R1,#IE_ext0    ;&0080    
        STR       R1,[R0]


;clr all the interrupts except the debugger interrupt
 

        LDR       R0, =InterruptClearReg                   
        LDR       R1,[R0]
        LDR      R1,=&FF7F    
        STR       R1,[R0]






;The return value get asserted for interrupt enable/disable
        
;Dummy return in UNUSED interrupt 1 

         LDR     R0,=Unused1
         LDR     R1,=DummyRet  
         STR    R1,[R0]            

;Place a Branch to itself to all interrupts except unused1 and ext0 interrupt


         LDR    R2,=Unused1
         LDR    R3,=Ext0IntLocation        
         LDR    R0,=TxBufferNotEmptyLocation 

InterruptInitContinue

         LDR     R1, =BranchToSelf       
         STR     R1,[R0]
         ADD    R0,R0,#4
         CMP    R0,R3
         ADDEQ    R0,R0,#4
         CMP    R0,R2            
         BNE    InterruptInitContinue


;disable the cache          

              LDR        R0, =CacheConfigurationReg
            MOV        R1,#&00
               STR        R1,[R0]


;prepare to clear Tag rams

        MOV     R0,#00000000
      MOV     R1,#00000000
        MOV     R2,#00000000
        MOV     R3,#00000000
        MOV     R4,#00000000
        MOV     R5,#00000000
        MOV     R6,#00000000
        MOV     R7,#00000000
        
        LDR     R9,=&FFB400
        LDR     R10,=&FFB000

;clear the Tag rams
not_done          
            STMIA   R10!,{R0-R7}
            CMP     R10,R9     
            BNE     not_done

;enable the cache          

            LDR     R0, =CacheConfigurationReg
            LDR     R1,[R0]
            ORR     R1,R1,#BothCacheRamsAsCache 
            STR     R1,[R0]


;disable the write buffer

;            LDR       R0, =BusControlAndStatusReg
;            LDR       R1,[R0]
;              and       R1,R1,#0
;              STR       R1,[R0]
;


;GPIO CONFIGURATION REG.


;GP0

;BIT
;0    DATA NVRAM         I/O
;1    NVRAM CHIP SELECT    O
;2    NVRAM SERIAL CLOCK    O
;3    OFFHOOK REL.        O
;4    VOICE REL.        O
;5    CALLER ID REL.        O
;6    DSVD            O
;7    LOCAL OFFHOOK        I


                LDR     R0, =GPCR0         
        LDR    R1, =Gp0_Init_Val    
        STR     R1,[R0]
        

;GP1

;BIT
;0    SPK/HS            O
;1    PULSE            O
;2    TINKLE            O
;3    DSP OFFHOOK        I    
;4    DSP VOICE        I
;5    AA LED            O ; ramn 7/16/96
;6    HS LED            O ; ramn 7/16/96
;7      NOT USED        O

    
        LDR     R0, =GPCR1
        LDR    R1, =Gp1_Init_Val    
        STR     R1,[R0]
        

;GP2

;BIT
;0    DSP CFG        O
;1    DSP RESET    O
;2    NOT USED        I
;3    NOT USED        I    
;4    EC LED        O        ; ramn 7/16/96
;5    NOT USED        I
;6    NOT USED        I
;7    NOT USED        I



        LDR     R0, =GPCR2 
        LDR    R1, =Gp2_Init_Val    
        STR     R1,[R0]





; ramn 3/21/96 
        ;LDR    R0, =GPR2 
        ;MOV    R1, #&0010      ;DSP CFG to zero ext. code access & exe. boot int.
        ;STR    R1,[R0]
;************************************** 
         
 
        MRS    R14, CPSR
        BIC    R14, R14, #Mask32Mode
        ORR     R14, R14, #NoInt + SVC32Mode
        MSR     CPSR, R14
        
        
;Allocate stack space for all the exceptions           

        MRS     R0, CPSR
        BIC     R0, R0, #NoInt | ModeMask
;Disable the F & I interrups          

        ORR     R1, R0, #NoInt | FIQ32Mode

;set the mode to FIQ mode          

        MSR     CPSR, R1
        MSR     SPSR, #User32Mode
        LDR     sp, =FIQStackBase                

;;Define FIQ starting sp location           
;        
        ORR     R1,R0, #NoInt | IRQ32Mode
        MSR     CPSR, R1
        MSR     SPSR, #User32Mode
        LDR     sp, =IRQStackBase                

;;Define IRQ starting sp location                     
        
        ORR     R1, R0, #NoInt | SVC32Mode
        MSR     CPSR, R1
        MSR     SPSR, #User32Mode
        LDR     sp, =SVCStackBase                
;;Define SUPERVISORY starting sp location                     


;Change the mode from Supervisory to Usermode          
        
        MSR     CPSR, #User32Mode


;pnp code ******************************************************* 
;testing 

        ldr     sp, =&ff8260
;;       LDR     sp, =UserStack          ;r13, ff8000, stack pointer

       MOV     ip,sp                   ;r12,
       MOV     fp,#0                   ;r11        , frame pointer
       SUB     sl,sp,#Defaultstacksize ;r10, 0x1000, stack limit
;config user stack fully

      
;init the global variable used in eeread.c
       ldr     r0,=pnp_status
       mov     r1,#0
       strb    r1,[r0]
;
;check if in pnp mode
       ldr    r0,=HostIntfaceStatusReg    ;ffc570
         ldrb    r1,[r0]                ;read the byte
;
       and    r1,r1,#&0f
        cmp    r1,#&09                ;is it in pnp mode?
        bne    not_pnp_mode            ;if not, don't set pnp Int
;
      bl      pnp_ram_dnld
;
not_pnp_mode        
;pnp code ************************************************************* 

;testing, check if in pcmcia mode
       ldr    r0,=HostIntfaceStatusReg    ;ffc570
         ldrb    r1,[r0]                ;read the byte
       and    r1,r1,#&01
;
        cmp    r1,#&00                ;is it in pnp mode?
        bne    not_pcmcia_mode            ;if not, don't set pnp Int
;
      bl      pcmcia_code
;
not_pcmcia_mode        
;pcmcia code ******************************

        
;comment out for EEB execution ramn 1/122/96         
;
;*************************************************************************
        ;ldr    r0,=BOOT_CODE_INFO      ; added by ramn on 1/29/96
        ;ldr    r1,[r0]            ; to differentiate eeb from beta brd
        ;ldr    r0,=BETA_BRD_FLAG1
        ;cmp    r0,r1
        ;bne    Not_Beta_Brd

        ;ldr    r0,=BOOT_CODE_INFO_MINUS1
        ;ldr    r1,[r0]
        ;ldr    r0,=BETA_BRD_FLAG2
        ;cmp    r0,r1
        ;bne    Not_Beta_Brd

        ;LDR    R0, =GPR2 
        ;MOV    R1, #&0020        ;DSP Reset release
        ;STR    R1,[R0]
 
        ;BL      Start_dnld        ;DN BOOT CODE
        
        ;LDR    R0, =GPR2 
        ;MOV    R1, #&0010      ;DSP CFG to zero ext. code access & exe. boot int.
        ;STR    R1,[R0]
 
        ;BL      Start_main_dnld_beg    ;DN MAIN CODE    
           
;
; ramn 3/11/96
;
; NOt_beta_Brd lable moved here because the half card and others do not 
; have the system reset going to the cutlass hence the cutlass has to be
;reset by musket

Not_Beta_Brd
        LDR    R0, =GPR2 
        MOV    R1, #&0022        ;DSP Reset 
        STR    R1,[R0]


        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
         NOP
        NOP
        NOP
        NOP
         NOP
        NOP
        NOP
        NOP
         NOP
        NOP
        NOP
        NOP
         NOP
        NOP
        NOP
        NOP
  
         LDR    R0, =GPR2 
        MOV    R1, #&0020        ;DSP Reset release
        STR    R1,[R0]
         
;Not_Beta_Brd

; for the J5 parts the codec interface pins are tri-stated onpowerup
; writing 0 to CP_CONTROL_REGISTER will make the pins active again
; ramn 3/11/96

        ldr     r0,=COM_RAM
        ldr     r1,=RESET_THRU_CP
        strb    r1,[r0,#CP_CONTROL_REGISTER]

        ldr     r0,=COM_RAM
        ldr     r1,=CLEAR_RESET_THRU_CP
        strb    r1,[r0,#CP_CONTROL_REGISTER]

; ramn 3/21/96 
        LDR    R0, =GPR2 
        MOV    R1, #&0010      ;DSP CFG to zero ext. code access & exe. boot int.
        STR    R1,[R0]
 

;*************************************************************************
 
;testing
;;              LDR     R1,=&FF7100     ;for pnp, 4/15/96 shujin

;Raminit
;;             LDR     R1,=&FF7000
        
        LDR    R1,=PNP_RDS_ADDR    ;see pnp.h, ff7E00

              LDR     R2,=&FF0000
              MOV     R3,#00

RamInit_not_done_zero          
              STRB    R3,[R2]
              ADD     R2,R2,#1
              CMP     R1,R2     
              BNE    RamInit_not_done_zero


;****************************************************************************
;22296shujin, for distinctive ring
        LDR     R1,=RingFiqInt
        LDR     R2,=RingIntLocation           ;addr, in powerup.h
        SUB     R1,R1,#FiqLocation + 8      ;2 word prefetch effect
        MOV     R1,R1,LSR #2                 ;shift right 2 when branch
        ORR     r1, r1, #&ea000000             ;unconditional branch
        STR     R1,[R2]                      ;store to vector table

;set ring int mode
        ldr    r0,=InterruptModeReg
        ldr    r1,[r0]
;;        orr    r1,r1,#&0100        ;-edge
;
; 5/16/96 shd, set both edge, worked with software debounce in ringint.c 
        orr    r1,r1,#&0200        ;both edges int
;
        str    r1,[r0]

;**********************************************

; Call the main routine in the RTSTAND module

        BL      |__main|


RingFiqInt
            STMDB    R13!, {R0-R7,R14}
;MRM4696 added the interrup clr for the new musket
            LDR       R8, =InterruptClearReg                   
            LDR       R9,[R8]
            MOV      R9,#IC_ring    
            STR       R9,[R8]
;    
            BL       validate_ring
            LDMIA    R13!, {R0-R7,R14}     ; get R14 back from stack                
            SUBS     R15,R14,#&4                     

;*****************************************    

;ramn 4/22/96 
; to set the cp interface to 7 wait states
; if in C6 mode and executing form the on Chip ROM
set_7_wait_states

        LDR     R0,=ChipSelectconfigurationRegTwo
        LDR     R2,=CSCR2_Val_7_wait   
        STR     R2,[R0]
        mov    pc,r14 


;ramn 7/29/96
; this function only executes 5 NOPs so that the pipe of Musket is clean
; this is used after wake up from sleep

goto_sleep_and_wakeup

        STMDB   R13!, {R0-R9}

;disable cache before going to low power state
              LDR        R0, =CacheConfigurationReg
            MOV        R1,#&00
               STR        R1,[R0]

;prepare to clear Tag rams
        MOV     R0,#00000000
        MOV     R1,#00000000
        MOV     R2,#00000000
        MOV     R3,#00000000
        MOV     R4,#00000000
        MOV     R5,#00000000
        MOV     R6,#00000000
        MOV     R7,#00000000
        
        LDR     R9,=&FFB400
        LDR     R8,=&FFB000
        
;clear the Tag rams
clr_not_done          
            STMIA   R8!,{R0-R7}
            CMP     R8,R9     
            BNE     clr_not_done

;load 0 to lpramem, take rams to low power state
        ;ldr    r0,=LPRAMEN
        ;mov    r1,#0
        ;strb    r1,[r0]        

;load 3 to power_manag_reg, this will put the dsp to sleep
        ldr    r0,=POWER_MANAG_REG
        mov    r1,#03
        strb    r1,[r0]        
;nops should be the first instructions after waking up
; teh code will be here till wake up
               nop
               nop
               nop
               nop
               nop
               nop

        ldr    r0,=POWER_MANAG_REG
        mov    r1,#00
        strb    r1,[r0]        


;put the rams back in high power mode
        ;ldr    r0,=LPRAMEN
        ;mov    r1,#01
        ;strb    r1,[r0]

;enable the cache          
            LDR     R0, =CacheConfigurationReg
            LDR     R1,[R0]
            ORR     R1,R1,#BothCacheRamsAsCache 
            STR     R1,[R0]
        nop
        nop
        nop
        nop
        nop
        nop
;
; reset dsp here 
        ldr    r0,=GPR2 
        mov    r1,#&0022        ;DSP Reset 
        str    r1,[r0]

        nop
        nop
        nop
        nop
        nop

        LDMIA    R13!, {R0-R9}             ; get registers from stack                

        mov    pc,r14



InitDebugPort
;CONFIGURE CSCR4 @0XA0000 FOR EXTERNAL GPIO
;                     
        LDR     R0, =ChipSelectconfigurationRegFive
        LDR     R2, =ChipSelectconfigurationRegFiveVal       
        STR     R2,[R0]

        mov     pc,r14


    END
