/****************************************************************************
/
/   Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994. All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.  The information contained herein is solely
/   for the use of RSA.
/
/   File:      ACUIOMEM.C
/
/   Version:   1.00
/
/   Function:   This file contains the DTE/ACU I/O memory data variables.
/
/   Product:   TEMIC / H8 IO code
/
/   Platform:   H8/3002 processor
/
/   History:   
/
/      Created: 10/27/94
/
/      ---------------------------------------------------------
/      -         Modifications         -
/      ---------------------------------------------------------
/
/      Author & Date:   RSA
/      Description:
/      Reason:
/
************************************************************************/

#include "sys_def.h"
#include "dteequ.h"

ubyte dte_rx_buffer[DTE_BUFFER_SIZE];      /* Receive buffer */
ubyte dte_tx_buffer[DTE_BUFFER_SIZE];      /* Transmit buffer */
uword dte_rx_remove;
uword dte_rx_insert;
uword dte_rx_count;
uword dte_tx_remove;
uword dte_tx_insert;
uword dte_tx_count;
ubyte acu_status;
ubyte pcmcia_initialized;
ubyte acu_installed;
ubyte acu_1ms_tick;
ubyte dte_poll_tick;
ubyte dte_mode;
   /*** dte escape sequence varriables ***/
ubyte esc_chr;                /* escape character storage */
uword esc_guard_time;         /* ESCAPE GUARD TIME (20 mSec units) */
ubyte dte_guard_time;         /* TIME VARIABLE FOR ESCAPE */
uword dte_tesc_count;         /* count of escape chars received */
uword dte_lead_guard;         /* LEAD TIME FLAG */
uword dte_20_mSec_timer;      /* breaks timed to 20 mSec intervals */
ubyte acu_halted;             /* set when acu_halt() called */

   /*** dte break varriables ***/
uword dte_tx_break_psn;       /* position of break in tx data buffer */
uword dte_tx_break_count;     /* break duration counter in 0.1 sec units */
ubyte dte_tx_break_state;     /* one of 4 possible break conditions :
             *    0 = no <break> in progress
             *    1 = waiting for break position in buffer
             *    2 = start sending <break>
             *    3 = wait for <break> to end 
             */

ubyte dte_rx_break_running;   /* timing rx break, if TRUE */
ubyte dte_rx_break_timer;     /* RX break duration (in 10 mSec intervals) */
ubyte idle_flag;              /* v42 idle flag */
ubyte rx_suspended;
ubyte dte_tx_interrupt_expected;
ubyte rx_resume_pending;
ubyte rx_suspend_pending;
ubyte tx_suspended_for_break;
ubyte dte_tx_suspended_by_terminal;

ubyte modem_to_dte_flow_cntl;
ubyte modem_to_dte_xon_char;
ubyte modem_to_dte_xoff_char;
ubyte dte_to_modem_flow_cntl;
ubyte dte_to_modem_xon_char;
ubyte dte_to_modem_xoff_char;
ubyte flow_cntl_pass;

ubyte pp_tx_count;
ubyte *pp_tx_remove;
ubyte pp_rx_buffer[256];
ubyte rx_char;
ubyte atb_rx_char;
ubyte atb_rx_bypass;

