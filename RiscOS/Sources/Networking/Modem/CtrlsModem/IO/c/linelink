/*********************************************************************
/
/    Copyright, 1988,1989,1990,1991,1992,1993,1994.  All Rights Reserved by:
/         RSA
/         7701 Six Forks Road
/         Suite 120
/         Raleigh, NC 27615
/         (919) 846-7171
/
/    This document contains material confidential to RSA.
/    Its contents must not be revealed, used or disclosed to
/    anyone or company with out written permession by RSA.
/    The information contained herein is solely for the use of RSA.
/
/    File:          linelink.c
/
/    Version:  1.0
/
/    Function:      This file contains the DCE I/O routines which are
/              relevent to all line protocols.
/
/    Product:  CP Line I/O for Merlin DSP
/
/    History:       Modified from LINELINK.C
/
/    Created:  October 29, 1994
/
/    ----------------------------
/    -    Modifications     -
/    ----------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************/

#include "sys_def.h"
#include "iohw_equ.h"              /* first flight hardware defs */
#include "lineequ.h"               /* line constant defs */
#include "lineedf.h"               /* line external variable defs */
#include "dsp_drv.h"               /* first flight dsp drivers */
#include "mt_macro.h"
#include "mt_codef.h"
#include "mt_coext.h"
#include "cp_dsp.h"
#include "mt_v8v34.h"
#include "linev80.h"
#include "edf.dce_line"


/***************** external procedures used locally *************************/
extern void line_type( ubyte );
extern ubyte set_cntl_parity( ubyte,ubyte);
extern enable_processor_interrupts(void);
extern disable_processor_interrupts(void);
extern void sync_tx_int(void);
extern void lapm_tx_int(void);
extern void v42_detection_results( ubyte, ubyte);
extern void v42_falling_back_to_speed(void);
extern void reset_autoreliable_fallback(void);
extern void send_pkt_to_dsp(void);
extern ubyte current_command[];
extern ubyte ack_or_response;


/***************************** local functions *****************************/
void line_init( ubyte );
void line_port_init( ubyte );
void line_set_baud(void);
void dce_set_baud(void);
void line_set_parms( ubyte, ubyte, ubyte, ubyte, ubyte );
void line_setup_speed(void);
void dce_fallback_to_speed_matching(void);
void line_configure( ubyte, ubyte, ubyte, ubyte, ubyte, ubyte );
void line_reconfigure( ubyte, ubyte, ubyte, ubyte, ubyte, ubyte);
void line_bg(void);
void line_tx_block( ubyte * ptr );
void line_rx_block( ubyte * ptr );

/*mrm9195*/
/*moved to serial.s*/
extern void line_disable_interrupts(void);
extern void line_enable_interrupts(void);

void do_modem_config_patch1(ubyte);

void line_reset(void);
void line_setup_v23(void);
void line_reset_v23(void);

/****************** for Queueing mechanisms *****************************/
/*extern ubyte command_packet[CMD_PACKET_LN];*/
/*extern ubyte response_packet[CMD_PACKET_LN];*/

extern void modem_v8_configure(
                            ubyte call_function,
                            ubyte lamp_en,
                            ubyte cellular_en
                            );

/***************************** local variables ****************************/
ubyte process_dce_bg_flag;
ubyte wait_for_new_frame;

/* void PrintIt(char *); */
void outchar(unsigned char);
extern ubyte	test_in_progress;

/*****************************************************************************
/
/    Procedure: line_init
/
/    Author: RSA
/
/    Creation Date: October 12, 1994
/
/    Description: This routine is called by V42 to initialize the DCE I/O
/              - initialize background variables
/              - reset and enable the SCC channel B
/              - enable interrupts for the SCC channel B
/
/    Input Parameters:  (ubyte) type of operation :
/                   0 = async mnp operations
/                   1 = sync mnp operations
/                   2 = async speed matching operations
/                   3 = sync lapm operations
/
/    Output Parameters:  None
/
/    Global Variables Changed: process_dce_bg_flag, auto_fallback_flag,
/         sp_match, mnp_sync, detection_enabled, lapm_sync, tx_char_count,
/         mnp_tx_packet_ptr, mnp_tx_data_ptr, tx_state, tx_crc
/
/    Users:    v42_init
/
/    -------------------------
/    -     Modifications -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
********************************************************************/
void line_init( ubyte init_type )
{
    ubyte modem_x2_status;
    line_disable_interrupts();

    dce_length_semaphore = 0;
    dce_status_semaphore = 0;

/*   Init mutual DCE varriables */
    process_dce_bg_flag = FALSE;
    auto_fallback_flag = FALSE;
    detection_enabled = FALSE;
    detection_turnoff_flag = FALSE;
    tx_char_count = 0;
    rx_char_count = 0;
    rx_extra_chars = 0;
    line_bg_error_flags = 0;
    line_hdlc_waiting_CRC_sent = FALSE;
    dce_tx_enabled = FALSE;

    switch ( init_type ) {

    /* MNP ASYNC operation */
        case INIT_MNP_ASYNC:
/*                  Notify v42 of mnp async operations */
                line_type( 0 );

                /* Set mnp async flag */
                sp_match = FALSE;
                mnp_sync = FALSE;
                lapm_sync = FALSE;

    /*              Setup MNP Async packet vars */
                mnp_tx_packet_ptr = 0;
                mnp_tx_data_ptr = 0;
                tx_state = TXA_SYN_C;
                rx_state = RXA_SYN_C;
                tx_crc = 0;
                rx_crc = 0;

    /*              If a vaild RX packet is ready, init it now */
                if ( mnp_rx_packet_ptr )
                {
                    mnp_rx_packet_ptr->status = 0;
                    mnp_rx_packet_ptr->count = 0;
                    mnp_rx_data_ptr = mnp_rx_packet_ptr->data;
                }

                line_enable_interrupts();

/*                  Set up SCC for 8N1                */
                line_port_init( ASYNC_PORT );

/*                  Set the SCC rx and tx baud rates  */
/*                  Don't need for Merlin       */

                break;

        /* MNP SYNC operation */
        case INIT_MNP_SYNC:
/*        Notify v42 of sync operations */
                line_type( 1 );

                /* Set mnp sync flag */
                mnp_sync = TRUE;
                sp_match = FALSE;
                lapm_sync = FALSE;

/*                  Setup MNP Sync packet vars */
                mnp_tx_packet_ptr = 0;
                mnp_tx_data_ptr = 0;
                mnp_rx_packet_ptr = 0;
                mnp_rx_data_ptr = 0;

                line_enable_interrupts();

/*                  Set up SCC for 8N1 */
                line_port_init( SYNC_PORT );

                break;

        /* LAPM operation */
        case INIT_LAPM:
/*                  Notify v42 of sync operations */
                line_type( 1 );

/*                  Setup LAPM variables */
                lapm_sync = TRUE;
                sp_match = FALSE;
                mnp_sync = FALSE;

                lapm_tx_packet_ptr = 0;
                lapm_tx_data_ptr = 0;
                lapm_rx_packet_ptr = 0;
                lapm_rx_data_ptr = 0;

                line_enable_interrupts();

/*                  Set up SCC for 8N1 */
                line_port_init( SYNC_PORT );

                break;

       case INIT_V80_SAM:
           /* set V.80 SAM flag */
           v80_sam = TRUE;
           sp_match = FALSE;
           mnp_sync = FALSE;
           lapm_sync = FALSE;

           /* Initialize the dce status variables */
           dce_tx_interrupt_expected = FALSE;
           dce_tx_break_pending = FALSE;
           dce_tx_count = 0;
           dce_tx_remove = 0;
           dce_tx_insert = 0;
           dce_rx_suspended = FALSE;
           dce_rx_break_running = FALSE;

           /* flush the receive data buffer */
           line_from_clear();

           line_enable_interrupts();

#if 1 /* line_v80_configure() already initializes this */
           /* save the current sub mode */
           current_sub_mode = TRANSPARENT_SUB_MODE;

           /* configure DSP as a transparent sychronous controller */
           line_port_init(BIT_SYNC_PORT);


#endif

/* DEBUG ONLY - mlc */
#if 0
           /* always insert <EM><UNDER> into the rx data stream */
           dce_rx_buffer[dce_rx_insert++] = EM_CODE;
           dce_rx_buffer[dce_rx_insert++] = UNDER_CODE;
           dce_rx_count += 2;
#endif
/* DEBUG ONLY - mlc */

           /* Fake TX IE */
           dce_tx_enabled = TRUE;
           break;

        /* async SPEED MATCHING operation */
        case INIT_SP_MATCHING:
        default:
/*                  Notify v42 of async operations */
                line_type( ASYNC_PORT );

                /* Set speed matching flag */
                sp_match = TRUE;
                mnp_sync = FALSE;
                lapm_sync = FALSE;

/*                  Initialize the dce status variables */
                dce_tx_interrupt_expected = FALSE;
             dce_tx_break_pending = FALSE;
                dce_tx_count = 0;
                dce_tx_remove = 0;
                dce_tx_insert = 0;
                dce_rx_suspended = FALSE;
                dce_rx_break_running = FALSE;
                /* flush the receive data buffer */
                line_from_clear();
                dce_rx_count = 0;
                dce_rx_remove = 0;
                dce_rx_insert = 0;

                line_enable_interrupts();

/*                  Init the SCC for async, 8N1 */

                line_port_init( ASYNC_PORT );


/*                  Set the SCC rx and tx baud rates */
                break;
    } /* switch */



   if(!test_in_progress)
	{

        #if MODEM_X2_MODE == 1
		dspdrv_ReadCram(ANALOG_STATUS_REG, &modem_x2_status, 1);
    	modem_x2_status &= 0x01;
    	#else
    	modem_x2_status = 0;
    	#endif

    	if (!modem_x2_status)
    	{
      	if (init_type == INIT_V80_SAM)
         	do_modem_config_patch1(1);
      	else
         	do_modem_config_patch1(2);
    	}

	}

	/* Enable line_int() to call tx interrupts */
   line_disable_interrupts();
   line_io_enabled = TRUE;
    dspdrv_ping_cram_intr();  /* kick start Merlin */
   line_enable_interrupts();


} /* procedure */



/***********************************************************************
/
/    Routine: line_port_init
/
/    Author : RSA
/
/    Creation Date: October 12, 1994
/
/    Description:   This will reset the SCC to receive and transmit in
/         8N1, as well as clearing status regs, and enable interrupts.
/
/    Input Parameters: (ubyte) port type :
/                   0 = ASYNC
/                   1 = SYNC
/
/    Output Parameters: None
/
/    Global Variables Changed: None
/
/    Users: line_init
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
************************************************************************/
void line_port_init( ubyte comm_type )
{
    ubyte usart_data_type;
    ubyte temp_byte;
    ubyte buffer_type;

    switch (comm_type)
    {
        case ASYNC_PORT:
            usart_data_type = 0;
            break;

        case BIT_SYNC_PORT:
            usart_data_type = 1;
            break;

        case SYNC_PORT:

			wait_for_new_frame = FALSE ; /*Safe place to clear flag*/
#if 0
/* TRACE */
				outchar(trans_idle);
				outchar(framed_idle);
				outchar(framed_un_ov);
				outchar(hd_auto);
				outchar(crc_type);
				outchar(nrzi_en);
				outchar(syn1);
				outchar(syn2);
/* TRACE */
#endif
				usart_data_type = 2;
            break;

        case DETECT_PORT:
            usart_data_type = 4;
            break;
    } /* end switch */

    LOAD_MODEM_INIT_USART
    ack_or_response = FALSE;

   /* if using V80 SAM operation, set COMM-RAM V.80 extensions */
   if(v80_sam && ((comm_type == BIT_SYNC_PORT) || (comm_type == SYNC_PORT)))
   {
       /* adjust the command length */
       current_command[2] = 4;

       /* setup 8/16-bit SYN and NRZI */
       temp_byte = 0;
       if (nrzi_en)
           temp_byte |= NRZI_EN_BIT;
       if (trans_idle == TIDLE_HUNT_SYN16)
           temp_byte |= (TIDLE_HUNT_SYN16 + 1);
       else if (trans_idle == TIDLE_HUNT_SYN8)
           temp_byte |= (TIDLE_HUNT_SYN8 + 1);
       else
           temp_byte |= (TIDLE_NO_HUNT + 1);

       current_command[5] = temp_byte;

       /* if using TSM operation */
       if (current_sub_mode == TRANSPARENT_SUB_MODE)
       {
           /* set programmable SYN1 underrun character */
           current_command[6] = syn1;
       }
       /* else if using FSM operation */
       else
       {
           /* if configured to tx FLAGS upon FSM tx underrun */
           if (framed_idle == FIDLE_TX_FLAGS)
           {
               /* set programmable underrun character to FLAGS */
               current_command[6] = 0x7E;
           }
           /* else if configured to tx MARKS upon FSM tx underrun */
           else
           {
               /* set programmable underrun character to MARKS */
               current_command[6] = 0xFF;
           }

           /* Reset */
           v80_frame_count = 0;
       }

       /* SYN2 CHARACTER NOT SUPPORTED IN THE V.80 CP CODE */
       current_command[7] = syn2;
   }

   send_pkt_to_dsp();

  buffer_type = 1;   /* Clear RX buffer */
  LOAD_MODEM_CLEAR_DATA_BUFFER
  ack_or_response = ACK;
  send_pkt_to_dsp();

  buffer_type = 0;   /* Clear TX buffer */
  LOAD_MODEM_CLEAR_DATA_BUFFER
  ack_or_response = ACK;
  send_pkt_to_dsp();

} /* end procedure */


/***********************************************************************
/
/   Routine: line_port_reinit
/
/   Author : RSA
/
/   Creation Date: October 12, 1994
/
/   Description:    This will reset the SCC to receive and transmit in
/       8N1, as well as clearing status regs, and enable interrupts.
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed: None
/
/   Users: line_init
/
/   -------------------------------------------------------------
/   -           Modifications               -
/   -------------------------------------------------------------
/
/   Author & Date:  RSA
/   Description:
/   Reason:
/
************************************************************************/
void line_port_reinit(void)
{
   if (v80_sam)
   {
      /* always use Trans. Sub-Mode operation after connection */
      line_port_init(BIT_SYNC_PORT);
   }
   else if (mnp_sync || lapm_sync)
      line_port_init(SYNC_PORT);
   else
      line_port_init(ASYNC_PORT);

   line_disable_interrupts();
   line_io_enabled = TRUE;
   dce_tx_enabled = TRUE;
   dspdrv_ping_cram_intr();
   line_enable_interrupts();

} /* end procedure */


/*************************************************************************
/
/    Routine: line_set_tx_baud
/
/    Author : RSA
/
/    Creation Date: October 12, 1994
/
/    Description:   This routine will set the SCC async baud rates
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed:  None
/
/    Users:    v42_init
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*********************************************************************/
void line_set_tx_baud(void)
{
    line_disable_interrupts();

    dce_set_baud();

    line_enable_interrupts();

} /* procedure */



/*************************************************************************
/
/    Routine: dce_set_baud
/
/    Author : RSA
/
/    Creation Date: July 30, 1992
/
/    Description:   This routine will set the SCC async baud rates
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed:  None
/
/    Users:    line_set_tx_baud, line_init
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*********************************************************************/
void dce_set_baud(void)
{
    return;/* don't need this for Merlin , so stub */
} /* procedure */



/******************************************************************************
/
/    Routine: line_set_parms
/
/    Author : RSA
/
/    Creation Date: October 12, 1994
/
/    Description:   This procedure sets the DCE I/O varriables according
/         to V42 specification.
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed:  dce_baud_rate, dce_pass_through_flow_cntl,
/         modem_to_modem_flow_cntl, modem_to_modem_xon_char,
/         modem_to_modem_xoff_char
/
/    Users:    v42_set_parms
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date:
/    Description:
/    Reason:
/
***************************************************************************/
void line_set_parms( ubyte in_baud_rate,
            ubyte in_data_bits,
            ubyte in_parity,
            ubyte in_pass_through_flow_cntl,
            ubyte in_modem_port_flow_cntl
            )
{
     ubyte flow_enab,flow_on,flow_off;

     line_disable_interrupts();

    dce_baud_rate = in_baud_rate;
    dce_pass_through_flow_cntl = in_pass_through_flow_cntl;
    modem_to_modem_flow_cntl = in_modem_port_flow_cntl;

/* The following may not be applicable to the Cutlass platform */
#if 0
/*  Set parity for modem to modem flow control chars if not 8 data bits */
    if ( ! in_data_bits )
    {
        modem_to_modem_xon_char =  set_cntl_parity( XON_CHAR, in_parity );
        modem_to_modem_xoff_char = set_cntl_parity( XOFF_CHAR, in_parity );
    }
    else
    {
        modem_to_modem_xon_char = XON_CHAR;
        modem_to_modem_xoff_char = XOFF_CHAR;
    }
#endif
    modem_to_modem_xon_char = XON_CHAR;
    modem_to_modem_xoff_char = XOFF_CHAR;


    /* Send init flow control packet to DSP */
    if (modem_to_modem_flow_cntl)

        flow_enab = 1;
    else
        flow_enab = 0;

    flow_on = modem_to_modem_xon_char;
    flow_off = modem_to_modem_xoff_char;

    line_enable_interrupts();

    LOAD_MODEM_INIT_RX_FLOW_CTL
    ack_or_response = FALSE;
    send_pkt_to_dsp();

} /* end procedure */



/************************************************************************
/
/    Routine: line_setup_speed
/
/    Author : RSA
/
/    Creation Date: October 12, 1994
/
/    Description:   Resets the line for speed matching operations.
/              Data buffered during detection phase will be preserved.
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed: dce_rx_count, dce_rx_insert
/
/    Users:
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
**********************************************************************/
void line_setup_speed(void)
{
    uword temp_count, temp_insert;

    line_disable_interrupts();

    temp_count = dce_rx_count;      /* save buffered fallback */
    temp_insert = dce_rx_insert;

    dce_fallback_to_speed_matching();

    dce_rx_count = temp_count;      /* recover buffered data */
    dce_rx_insert = temp_insert;

    v42_falling_back_to_speed();  /* inform V42 of fallback */

    line_enable_interrupts();

} /* procedure */



/************************************************************************
/
/    Routine: dce_fallback_to_speed_matching
/
/    Author : RSA
/
/    Creation Date: October 12, 1994
/
/    Description: Reset line mechanisms to speed matching due to an
/         autoreliable fallback condition.
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed: mnp_sync, detection_enabled, lapm_sync,
/         sp_match, dce_tx_break_state, dce_tx_interrupt_expected
/
/    Users:
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
**********************************************************************/
void dce_fallback_to_speed_matching(void)
{
/*   Set V42 line variables to Speed Matching */
    mnp_sync = FALSE;
    detection_enabled = FALSE;
    lapm_sync = FALSE;
    sp_match = TRUE;

/*   Reset Speed Matching Break variables */
    dce_tx_break_pending = FALSE;
   dce_rx_break_running = FALSE;

/*   Reset SCC tx busy */
    dce_tx_interrupt_expected = FALSE;

} /* procedure */


/************************************************************************
/
/    Routine: line_configure
/
/    Author : RSA
/
/    Creation Date: October 12, 1994
/
/    Description:  Configures the DCE I/O for Pass through flow control,
/         Modem port flow control, Baud Rate, Number of data bits,
/         Number of stop bits, Parity type
/
/    Input Parameters: (all ubytes)
/          Baud Rate
/                   0 = 1200 tx/ 75 rx
/                   1 = 1200 rx/ 75 tx
/                   2 = 300
/                   3 = 1200
/                   4 = 2400
/                   5 = 4800
/                   6 = 7200
/                   7 = 9600
/                   8 = 12000
/                   9 = 14400
/                   10 = 16800
/                   11 = 19200
/                   12 = 38400
/
/          Number of data bits
/                   0 = 7 bits
/                   1 = 8 bits
/
/          Number of stop bits
/                   0 = 1 bits
/                   1 = 2 bits
/
/          Parity type
/                   0 = None
/                   1 = Odd
/                   2 = Even
/
/          Pass through flow control
/                   0 = Disabled
/                   1 = Enabled
/
/          Modem port flow control
/                   0 = Disabled
/
/    Output Parameters: None
/
/    Global Variables Changed: None
/
/    Users:
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
**********************************************************************/
void line_configure( ubyte new_baud_rate,
            ubyte new_data_bits,
            ubyte new_stop_bits,
            ubyte new_parity,
            ubyte new_pass_through_flow_cntl,
            ubyte new_modem_port_flow_cntl
            )

{

     line_set_parms( new_baud_rate, new_data_bits, new_parity,
          new_pass_through_flow_cntl, new_modem_port_flow_cntl);


} /* procedure */



/************************************************************************
/
/    Routine: line_reconfigure
/
/    Author : RSA
/
/    Creation Date: October 12, 1994
/
/    Description:  Reconfigures the DCE I/O for Pass through flow control,
/         Modem port flow control, Baud Rate, Number of data bits,
/         Number of stop bits, Parity type
/
/
/    Input Parameters: (all ubytes)
/          Baud Rate
/                   0 = 1200 tx/ 75 rx
/                   1 = 1200 rx/ 75 tx
/                   2 = 300
/                   3 = 1200
/                   4 = 2400
/                   5 = 4800
/                   6 = 7200
/                   7 = 9600
/                   8 = 12000
/                   9 = 14400
/                   10 = 16800
/                   11 = 19200
/                   12 = 38400
/
/          Number of data bits
/                   0 = 7 bits
/                   1 = 8 bits
/
/          Number of stop bits
/                   0 = 1 bits
/                   1 = 2 bits
/
/          Parity type
/                   0 = None
/                   1 = Odd
/                   2 = Even
/
/          Pass through flow control
/                   0 = Disabled
/                   1 = Enabled
/
/          Modem port flow control
/                   0 = Disabled
/                   1 = Enabled
/
/    Output Parameters: None
/
/    Global Variables Changed:
/
/    Users:
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
**********************************************************************/
void line_reconfigure( ubyte in_baud_rate,
                ubyte in_data_bits,
                ubyte in_stop_bits,
            ubyte in_parity,
                ubyte in_pass_through_flow_cntl,
                ubyte in_modem_port_flow_cntl
            )

{
    line_disable_interrupts();

    line_set_parms( in_baud_rate, in_data_bits, in_parity,
          in_pass_through_flow_cntl, in_modem_port_flow_cntl);

    if ( ! detection_enabled )
        if ( ! lapm_sync )
            if ( ! mnp_sync )
                if ( sp_match == TRUE )
                {
/*                       Reset the SCC to 8-N-1 */
                    line_port_init( ASYNC_PORT );
                }


    line_enable_interrupts();

} /* procedure */



/************************************************************************
/
/    Routine: line_bg
/
/    Author : RSA
/
/    Creation Date: October 12, 1994
/
/    Description:   Called in the v42 background loop, it searches for the
/         autoreliable conditions
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed: process_dce_bg_flag, auto_fallback_flag
/
/    Users:
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
**********************************************************************/
void line_bg(void)
{
    uword temp_count, temp_insert;

    process_dce_bg_flag = FALSE;

    if ( auto_fallback_flag )
    {
        auto_fallback_flag--;

        temp_count = dce_rx_count;
        temp_insert = dce_rx_insert;

        reset_autoreliable_fallback();
        dce_fallback_to_speed_matching();

        dce_rx_count = temp_count;
        dce_rx_insert = temp_insert;

        v42_falling_back_to_speed();
    }
   /* DO we need to take USART out of detection mode? */
   if (detection_turnoff_flag)
   {
       v42_detection_results( detection_result_flag, detection_result_code);
      detection_turnoff_flag = FALSE;
        line_port_reinit();
   }

} /* procedure */
#if 0
/************************************************************************
/
/    Routine: line_disable_interrupts
/
/    Author : RSA
/
/    Creation Date: October 12, 1994
/
/    Description:   Disable line interrupts
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed: None
/
/    Users: DCE I/O
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
**********************************************************************/
void line_disable_interrupts(void)
{
    disable_processor_interrupts();

}  /* procedure */



/*******************************************************************************
/
/    Routine: line_enable_interrupts
/
/    Author : RSA
/
/    Creation Date: October 12, 1994
/
/    Description:   Enable line interrupts
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed: None
/
/    Users: DCE I/O
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
**********************************************************************/
void line_enable_interrupts(void)
{
    enable_processor_interrupts();

}  /* procedure */

#endif
/************************************************************************
/
/    Routine: line_tx_block
/
/    Author : RSA
/
/    Creation Date: October 12, 1994
/
/    Description: Start transmission of an MNP or LAPM block over the line.
/
/    Input Parameters: (ubyte *) address of mnp control block
/
/    Output Parameters: None
/
/    Global Variables Changed:
/
/    Users: V42 code
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
**********************************************************************/
void line_tx_block( ubyte *ptr )
{
    line_disable_interrupts();

    if ( lapm_sync == TRUE )
    {
        lapm_tx_packet_ptr = (LAPM_PACKET_TYPE *)ptr ;
        lapm_tx_data_ptr = lapm_tx_packet_ptr->data;
        tx_char_count = lapm_tx_packet_ptr->count;
    }
    else if ( mnp_sync == TRUE )
    {
        mnp_tx_packet_ptr = (MNP_PACKET_TYPE *)ptr ;
        mnp_tx_data_ptr = mnp_tx_packet_ptr->data;
        tx_char_count = mnp_tx_packet_ptr->count;

    }
    else /* mnp async packet */
    {
        mnp_tx_packet_ptr = (MNP_PACKET_TYPE *)ptr ;
        tx_state = TXA_SYN_C;    /* Next mnp async state */
    }

    dce_tx_enabled = TRUE;    /* Fake TX IE */

    dspdrv_ping_cram_intr();  /* kick start Merlin */
    line_enable_interrupts();
}



/************************************************************************
/
/    Routine: line_rx_block
/
/    Author : RSA
/
/    Creation Date: October 12, 1994
/
/    Description:  Start receiving an MNP or LAPM block over the line
/
/    Input Parameters:  (ubyte *) address of mnp control block
/
/    Output Parameters: None
/
/    Global Variables Changed: None
/
/    Users: V42 code
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
**********************************************************************/
void line_rx_block( ubyte *ptr )
{
    PrintMsg("LineRxBlock Called");
    line_disable_interrupts();

/*   No chars or errors so far */
    rx_char_count = 0;
    rx_extra_chars = 0;
    line_bg_error_flags = 0;

    if ( lapm_sync == TRUE )
    {
        lapm_rx_packet_ptr = (LAPM_PACKET_TYPE *)ptr ;
        if ( lapm_rx_packet_ptr )
        {
            lapm_rx_packet_ptr->count = 0;
            lapm_rx_packet_ptr->error = 0;
            lapm_rx_data_ptr = lapm_rx_packet_ptr->data;
        }
    }
    else if ( mnp_sync == TRUE )
    {
        mnp_rx_packet_ptr = (MNP_PACKET_TYPE *)ptr ;
        if ( mnp_rx_packet_ptr )
        {
            mnp_rx_packet_ptr->status = 0;
            mnp_rx_packet_ptr->count = 0;
            mnp_rx_data_ptr = mnp_rx_packet_ptr->data;
        }
    }
    else /* mnp async packet */
    {
        rx_state = 0;

        mnp_rx_packet_ptr = (MNP_PACKET_TYPE *)ptr ;
        if ( mnp_rx_packet_ptr )
        {
            mnp_rx_packet_ptr->status = 0;
            mnp_rx_packet_ptr->count = 0;
            mnp_rx_data_ptr = mnp_rx_packet_ptr->data;
        }
    }

    line_enable_interrupts();

} /* procedure */



/************************************************************************
/
/    Routine: line_reset
/
/    Author : RSA
/
/    Creation Date: October 29, 1994
/
/    Description:  This routine disables the DCE side of the SCC
/
/    Input Parameters:  None
/
/    Output Parameters: None
/
/    Global Variables Changed: None
/
/    Users:  v42 code
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
**********************************************************************/
void line_reset( void )
{
/* With Merlin/Hook don't need to reset/disable UART.*/
/* but this will now disable line_int() from calling tx interrupts */

   line_disable_interrupts();
/***start change for v8/v34 support******************/
   if (!v8_configured)
/***start change for v8/v34 support******************/
      line_io_enabled = FALSE;
   line_enable_interrupts();

} /* procedure */


/**********************************************************************
/
/   V.23 specific procedures
/
***********************************************************************/
void line_setup_v23(void) { }
void line_reset_v23(void) { }



/************************************************************************
/
/    Routine: line_send_data
/
/    Author : RSA
/
/    Creation Date: October 17, 1994
/
/    Description:  This routine sends data to the DSP by filling the
/              Comm RAM data area and then setting the status byte and
/              the length byte semaphore.
/
/    Input Parameters:  None
/
/    Output Parameters: None
/
/    Global Variables Changed: None
/
/    Users:  line I/O code
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
**********************************************************************/
void line_send_data(ubyte *ptr, ubyte length, ubyte status)
{
    dspdrv_WriteCram(CP_DSP_DATA_AREA_BASE, ptr, (uword) length);
    dspdrv_WriteCram(CP_DSP_DATA_STATUS, &status, 1);
    dspdrv_WriteCram(CP_DSP_DATA_LENGTH, &length, 1);
}

/************************************************************************
/
/    Routine: line_get_data
/
/    Author : RSA
/
/    Creation Date: October 17, 1994
/
/    Description:  This routine gets data from the DSP by reading the
/              Comm RAM data area and then clearing the status byte and
/              the length byte semaphore.
/
/    Input Parameters:  None
/
/    Output Parameters: None
/
/    Global Variables Changed: None
/
/    Users:  line I/O code
/
/    -------------------------------------------------------------
/    -              Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
**********************************************************************/
void line_get_data(ubyte *data_ptr, ubyte *length, ubyte *status)
{
    ubyte clear;

    dspdrv_ReadCram(DSP_CP_DATA_LENGTH, length, 1);
    dspdrv_ReadCram(DSP_CP_DATA_STATUS, status, 1);
    dspdrv_ReadCram(DSP_CP_DATA_AREA_BASE, data_ptr, (uword) *length);

    clear = 0;
    dspdrv_WriteCram(DSP_CP_DATA_STATUS, &clear, 1);
    dspdrv_WriteCram(DSP_CP_DATA_LENGTH, &clear, 1);

    /* Check value of length variable */

    if (*length > DATA_AREA_SIZE)
        *length = 0;
}
void line_get_data_buffer(ubyte *data_ptr, ubyte *length, ubyte *status)
{
   #if 0
    ubyte clear;

    dspdrv_ReadCram(DSP_CP_DATA_LENGTH, length, 1);
    dspdrv_ReadCram(DSP_CP_DATA_STATUS, status, 1);
    dspdrv_ReadCram_buffer(DSP_CP_DATA_AREA_BASE, data_ptr, (uword) *length);

    clear = 0;
    dspdrv_WriteCram(DSP_CP_DATA_STATUS, &clear, 1);
    dspdrv_WriteCram(DSP_CP_DATA_LENGTH, &clear, 1);

    /* Check value of length variable */

    if (*length > DATA_AREA_SIZE)
        *length = 0;
   #endif
}
