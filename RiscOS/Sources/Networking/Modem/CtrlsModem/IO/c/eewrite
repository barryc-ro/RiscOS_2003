
/*******************************************************************************
/
/                          "eewrite.c"
/
/        CIRRUS LOGIC Inc
/        3100 West Warren Ave
/        Fremont, CA. 94538
/        (510) 623-8300
/
/    Creation Date: 06/22/95
/
/    Description:   This routine will store the given string of data in
/              EEPROM at the given offset.
/
/    Input Parameters:   offset - storage location in EEPROM
/                   length - length of data string
/                   ptr    - pointer to data string to be stored
/
/    Output Parameter:   0 - write succeded
/                   1 - Write failed
/
/    Global Variables Changed:     eeprom memory
/
/    Users: (routines that used this)  Many places
/
/   Writting to EEPROM (93C56) with ORG tied to GND for 8 bits operation.
/   In-order to write to the eeprom certain events has to happen.
/
/		0) config GPIO0 as output pin			1-2-96
/
/     1) Chip sel. active
/
/     2) SK enable the serial clock to the eeprom
/
/     3) Write enable the EEProm, By writting the EWEN sequence serialy.
/
/     4) Write sequence;
/        For the write sequence the the following informations are assembled
/        together and then written out bit by bit.
/
/        WRITE  | OFFSET | DATA
/        0+3bits|9 bits  |8 bits
/
/     5)All the data that is going to be written to the EEProm have to placed
/       on the MSB of the variable and then by masking out all the bit except
/       the 32nd bit we can write the desired bit to the EEProm.
/       After every write of the bit we perform a shift left by one to get the
/       next bit in the sequence ready for write to the EEprom.
/
******/

#include "eeprom.h"
#include "sys_def.h"

#include "acu_pro.h"
#include "ee_def.h"

extern ubyte   error_occurred;

/*mrm102696*/
volatile unsigned char   edge_cycle;

extern void load_eetimer (void);
extern void load_interrupts_vectors (void);

ubyte  eewrite_enable(void);
ubyte  eewrite_disable(void);
ubyte  reading_status(void);

ubyte  modem_write_data(uword offset, uword length, ubyte *ptr);

ubyte  modem_erase_data(uword offset, uword length);
ubyte  modem_write_all(ulong);
ubyte  modem_erase_all(void);

#if 0
ubyte modem_write_data(uword offset, uword length, ubyte *ptr)
{}
#endif


ubyte modem_write_data(uword offset, uword length, ubyte *ptr)
{
     ubyte  i, n, *source_ptr;
     ubyte *gpr0_addr, *gpcr0_addr;
     ulong  data, ee_offset;

     source_ptr = ptr;
     ee_offset = offset;

     gpr0_addr = (ubyte *) GPR0;
     gpcr0_addr = (ubyte *) GPCR0;

     *gpr0_addr = (ubyte) CS_LO;
     *gpcr0_addr = (ubyte) DATA_OUT;   /* as output */
     *gpr0_addr = (ubyte) DO_LO;      /* init a low */

     load_eetimer();

     eewrite_enable();


/*Write bits into the EEProm */


  for (n = 0 ; n <= length ; n++)
  {
     ulong shifted_offset, shifted_data;

     *gpr0_addr = (ubyte) CS_LO;
     *gpcr0_addr = (ubyte) DATA_OUT; 	/* config gpio0 data bit as output */
     *gpr0_addr  = (ubyte) DO_LO;      /* output high */

     shifted_offset = ee_offset << SHIFT_OFFSET_L_VAL;

     shifted_data   = *source_ptr;
     shifted_data   = shifted_data << SHIFT_DATA_L_VAL;

     data = WRITE | shifted_offset | shifted_data;


     *gpr0_addr = (ubyte) CS_HI;

/*mrm102696*/
     while( edge_cycle == 1)    ;
     while( edge_cycle == 0)    ;


     for (i = 0; i < WRITE_NO_OF_BITS; i++)
     {
         if(data & MASK_bit_31)
         {
            while( edge_cycle == 1)   ;

            *gpr0_addr = (ubyte) DO_HI;
         }
         else
         {
            while( edge_cycle == 1)   ;

            *gpr0_addr = (ubyte) DO_LO;
         }
         data = data << 1 ;
         while( edge_cycle == 0)   ;
     }

     if(n==0 ) ; /* 1st writing is easy failed */
     else
     {
        ee_offset ++;
        source_ptr ++;
     }


/*
        ee_offset ++;
        source_ptr ++;
*/

     *gpcr0_addr = (ubyte) DATA_IN; 	/* config gpio0 data bit as input */

     while( edge_cycle == 1)   ;

     *gpr0_addr = (ubyte) CS_LO;

     while( edge_cycle == 0) ;
     while( edge_cycle == 1) ;

     *gpr0_addr = (ubyte) CS_HI;

     while( edge_cycle == 0) ;
     while( edge_cycle == 1) ;

     while ( ! reading_status() );

/* keep low max 10 msec, until ready to send the next bit. */

     *gpr0_addr = (ubyte) CS_LO;
     *gpcr0_addr = (ubyte) DATA_OUT;   /* as output */
     *gpr0_addr = (ubyte) DO_LO;      /* init a low */
  }

   eewrite_disable();

   load_interrupts_vectors ();

   *gpr0_addr = (ubyte) CS_LO;

   *gpcr0_addr = (ubyte) DATA_OUT;   /* as output */
   *gpr0_addr = (ubyte) DO_LO;      /* init a low */

   return (0);
}



ubyte eewrite_enable(void)
{
     ubyte   i;
     ubyte   *gpcr0_addr, *gpr0_addr;
     ulong   data;

     gpcr0_addr = (ubyte *) GPCR0;
     gpr0_addr = (ubyte *) GPR0;

     data = EWEN;

     *gpr0_addr = (ubyte) CS_LO;

     *gpcr0_addr = (ubyte) DATA_OUT; 	/* config gpio0 data bit as output */
     *gpr0_addr  = (ubyte) DO_LO;      /* output high */

     *gpr0_addr = (ubyte) CS_HI;

     while( edge_cycle == 1)  ;
     while( edge_cycle == 0)  ;

     for (i = 0; i < SER_COUNT_EN_DS; i++)
     {
        if(data & MASK_bit_31)
        {
           while( edge_cycle == 1)   ;

           *gpr0_addr = (ubyte) DO_HI;
        }
        else
        {
           while( edge_cycle == 1)   ;

           *gpr0_addr = (ubyte) DO_LO;
        }
        data = data << 1 ;
        while( edge_cycle == 0)   ;
    }

    *gpr0_addr = (ubyte) CS_LO;

   *gpcr0_addr = (ubyte) DATA_OUT;   /* as output */
   *gpr0_addr = (ubyte) DO_LO;      /* init a low */

    return(0);
}


ubyte eewrite_disable(void)
{
     ubyte   i;
     ubyte   *gpcr0_addr, *gpr0_addr;
     ulong   data;

     gpr0_addr = (ubyte *) GPR0;
     gpcr0_addr = (ubyte *) GPCR0;

     *gpr0_addr = (ubyte) CS_LO;

     *gpcr0_addr = (ubyte) DATA_OUT; 	/* config gpio0 data bit as output */
     *gpr0_addr  = (ubyte) DO_LO;      /* output high */

     while( edge_cycle == 1)   ;
     while( edge_cycle == 0)  ;

     data = EWDS;

     *gpr0_addr = (ubyte) CS_HI;

     while( edge_cycle == 1)   ;
     while( edge_cycle == 0)  ;

     for (i = 0; i < SER_COUNT_EN_DS; i++)
     {
        if(data & MASK_bit_31)
        {
           while( edge_cycle == 1)   ;

          *gpr0_addr = (ubyte) DO_HI;
        }
        else
        {
           while( edge_cycle == 1)   ;

          *gpr0_addr = (ubyte) DO_LO;
        }

        data = data << 1 ;
        while( edge_cycle == 0)   ;
     }

     *gpr0_addr = (ubyte) CS_LO;
     *gpcr0_addr = (ubyte) DATA_OUT;   /* as output */
     *gpr0_addr = (ubyte) DO_LO;      /* init a low */

     return(0);
}

ubyte reading_status(void)
{
     ubyte data_bit;
     ubyte *gpr0_addr;

     gpr0_addr = (ubyte *) GPR0;

     data_bit = *gpr0_addr & DO_MASK;  /* 0x01 */

     return(data_bit);
}
#if 0


ubyte  modem_erase_data(uword offset, uword length)
{
     ubyte  i, n;
     ubyte *gpr0_addr, *gpcr0_addr;
     uword  ee_offset;
     ulong  data, command;

     command = ERASE;
     ee_offset = offset;

     gpr0_addr = (ubyte *) GPR0;
     gpcr0_addr = (ubyte *) GPCR0;

     *gpr0_addr = (ubyte) CS_LO;

     load_eetimer();

     eewrite_enable();

/*Write bits into the EEProm */

  for (n = 0 ; n < length ; n++)
  {
     ulong shifted_offset;
     *gpr0_addr = (ubyte) CS_LO;

     shifted_offset = ee_offset;
     shifted_offset = shifted_offset << SHIFT_OFFSET_L_VAL;

     data = command | shifted_offset;

     *gpcr0_addr = (ubyte) DATA_OUT; 	/* config gpio0 data bit as output */
     *gpr0_addr  = (ubyte) DO_LO;      /* output high */

     *gpr0_addr = (ubyte) CS_HI;

     while( edge_cycle == 1)    ;
     while( edge_cycle == 0)    ;


     for (i = 0; i < SER_COUNT_EN_DS; i++)
     {
         if(data & MASK_bit_31)
         {
            while( edge_cycle == 1)   ;
            *gpr0_addr = (ubyte) DO_HI;
         }
         else
         {
            while( edge_cycle == 1)   ;
            *gpr0_addr = (ubyte) DO_LO;
         }
         data = data << 1 ;
         while( edge_cycle == 0)   ;
     }
     ee_offset ++;
     while( edge_cycle == 1)   ;

     *gpcr0_addr = (ubyte) DATA_IN; 	/* config gpio0 data bit as input */

     *gpr0_addr = (ubyte) CS_LO;

     while( edge_cycle == 0)   ;
     while( edge_cycle == 1)   ;

     *gpr0_addr = (ubyte) CS_HI;

     while( edge_cycle == 0) ;
     while( edge_cycle == 1) ;

     while ( ! reading_status() );
/* keep low max 10 msec, until ready to send the next bit. */

     *gpr0_addr = (ubyte) CS_LO;
     *gpcr0_addr = (ubyte) DATA_OUT; 	/* config gpio0 data bit as output */
     *gpr0_addr  = (ubyte) DO_LO;      /* output high */
  }

   eewrite_disable();

   load_interrupts_vectors ();

  *gpr0_addr = (ubyte) CS_LO;
   *gpcr0_addr = (ubyte) DATA_OUT;   /* as output */
   *gpr0_addr = (ubyte) DO_LO;      /* init a low */

   return (0);
}


ubyte  modem_write_all(ulong value)
{
     ubyte  i;
     ubyte *gpr0_addr, *gpcr0_addr;
     ulong  data;

     gpr0_addr = (ubyte *) GPR0;
     gpcr0_addr = (ubyte *) GPCR0;

     data = WRAL;
     data = data | (value << SHIFT_DATA_L_VAL );

     *gpr0_addr = (ubyte) CS_LO;

     load_eetimer();

     eewrite_enable();

/*Write bits into the EEProm */
     *gpr0_addr = (ubyte) CS_LO;

     *gpcr0_addr = (ubyte) DATA_OUT; 	/* config gpio0 data bit as output */
     *gpr0_addr  = (ubyte) DO_LO;      /* output high */

     *gpr0_addr = (ubyte) CS_HI;

     while( edge_cycle == 1)    ;
     while( edge_cycle == 0)    ;


     for (i = 0; i < WRITE_NO_OF_BITS; i++)
     {
         if(data & MASK_bit_31)
         {
            while( edge_cycle == 1)   ;
            *gpr0_addr = (ubyte) DO_HI;
         }
         else
         {
            while( edge_cycle == 1)   ;
            *gpr0_addr = (ubyte) DO_LO;
         }

         while( edge_cycle == 0)   ;
         data = data << 1 ;
     }
     while( edge_cycle == 1)   ;

     *gpr0_addr = (ubyte) CS_LO;

     *gpr0_addr = (ubyte) DO_LO;

     while( edge_cycle == 0)   ;
     while( edge_cycle == 1)   ;
     while( edge_cycle == 0)   ;
     while( edge_cycle == 1)   ;

     *gpcr0_addr = (ubyte) DATA_IN; 	/* config gpio0 data bit as input */

     *gpr0_addr = (ubyte) CS_HI;

     while( edge_cycle == 0) ;
     while( edge_cycle == 1) ;
     while( edge_cycle == 0) ;
     while( edge_cycle == 1) ;

     while ( ! reading_status() );
/* keep low max 10 msec, until ready to send the next bit. */



   eewrite_disable();

   load_interrupts_vectors ();

  *gpr0_addr = (ubyte) CS_LO;

  *gpcr0_addr = (ubyte) DATA_OUT;   /* as output */
  *gpr0_addr = (ubyte) DO_LO;      /* init a low */

   return (0);
}


ubyte  modem_erase_all(void)
{
     ubyte  i;
     ubyte *gpr0_addr, *gpcr0_addr;
     ulong  data;

     gpr0_addr = (ubyte *) GPR0;
     gpcr0_addr = (ubyte *) GPCR0;

     data = ERAL;


     *gpr0_addr = (ubyte) CS_LO;

     load_eetimer();

     eewrite_enable();

/*Write bits into the EEProm */
     *gpr0_addr = (ubyte) CS_LO;

     *gpcr0_addr = (ubyte) DATA_OUT; 	/* config gpio0 data bit as output */
     *gpr0_addr  = (ubyte) DO_LO;      /* output high */

     *gpr0_addr = (ubyte) CS_HI;

     while( edge_cycle == 1)    ;
     while( edge_cycle == 0)    ;


     for (i = 0; i < SER_COUNT_EN_DS; i++)
     {
         if(data & MASK_bit_31)
         {
            while( edge_cycle == 1)   ;
            *gpr0_addr = (ubyte) DO_HI;
         }
         else
         {
            while( edge_cycle == 1)   ;
            *gpr0_addr = (ubyte) DO_LO;
         }

         while( edge_cycle == 0)   ;
         data = data << 1 ;
     }
     while( edge_cycle == 1)   ;

     *gpr0_addr = (ubyte) CS_LO;

     *gpr0_addr = (ubyte) DO_LO;

     while( edge_cycle == 0)   ;
     while( edge_cycle == 1)   ;
     while( edge_cycle == 0)   ;
     while( edge_cycle == 1)   ;

     *gpcr0_addr = (ubyte) DATA_IN; 	/* config gpio0 data bit as input */

     *gpr0_addr = (ubyte) CS_HI;

     while( edge_cycle == 0) ;
     while( edge_cycle == 1) ;
     while( edge_cycle == 0) ;
     while( edge_cycle == 1) ;

     while ( ! reading_status() );
/* keep low max 10 msec, until ready to send the next bit. */



     eewrite_disable();

     load_interrupts_vectors ();

     *gpr0_addr = (ubyte) CS_LO;

     *gpcr0_addr = (ubyte) DATA_OUT;   /* as output */
     *gpr0_addr = (ubyte) DO_LO;      /* init a low */

     return (0);
}



/*******
/      File:           ee00cmd.c
/      Function:       read, write, erase, erase all, write all to EEprom
/
/      Author & Date:  shujin Ding, 3/22/96
/
********************************************************************/
/* prototypes for eeprom commands */

#include "acu_def.h"
#include "acu_mem.h"
#include "mt_pro.h"

void bang_E2_eq(void);
void bang_E2_q(ubyte *);
void  d_to_asc_hex(ubyte,ubyte buf1[], ubyte buf2[]);


void bang_E2_eq(void)
{
    output_info((ubyte *)BANG_E2_QUERY_INFO,(ubyte)sr14.verbose_form);

}

/*******************************************************************************
/
/      Routine:        bang_E2_eq
/
/      Misellanious Programmer Utility  Command
/
/      Format: (0-?),(0-255),(0-255)
/
/      Command: 1st field, 2nd, 3rd, 4th
/--------------------------------------------------------------
/
/      Null:    display all EEprom mem content in Hex Ascii format
/
/      read:           0, location, length.
/              read from EE location to location + length
/              and display to DTE with HEX vals;
/
/      write:          1, location, val.
/
/      erase:          2, location, length.
/
/      erase all:      3.
/
/      write all:      4, val.
/
/      DATA pin:       5, in/out, low/high.
/
/      CS   pin:       6, in/out, low/high.
/
/      SK   pin:       7, in/out, low/high.
/
/      static_offset:  8; static uword static_offset =0
*******************************************************************************/


void bang_E2_e(ubyte *parm_ptr)
{
   ubyte  i,field, value, chardata;
   uword  offset, len, mask_bit, val_bit;
   ubyte *gpr0_addr, *gpcr0_addr;
   ubyte buf1[81], buf2[161];

   static   uword static_offset=0;

     gpr0_addr = (ubyte *) GPR0;
     gpcr0_addr = (ubyte *) GPCR0;


   field = *parm_ptr++;
   value = *parm_ptr++;

   if (field==0)
   {
      modem_read_data(static_offset,64,(ubyte *)&buf1[0]);
      d_to_asc_hex(64, buf1, buf2);
      output_info(buf2,(ubyte)sr14.verbose_form);
      static_offset = static_offset+64;

      return ;
   }
   else if(field==1)
   {
     switch(value)
     {
       case 0:

         field = *parm_ptr++;
         value = *parm_ptr++;

         if(field == 0) { error_occurred = TRUE; return; }
         else          offset = value;

         field = *parm_ptr++;
         value = *parm_ptr++;

         if(field ==0) len=1;
         else          len = value;

         if( len > 80) { error_occurred = TRUE; return; }

         modem_read_data(offset,len,(ubyte *)&buf1[0]);

         d_to_asc_hex(len, buf1, buf2);

         output_info(buf2,(ubyte)sr14.verbose_form);

         return ;

     case 1:
         field = *parm_ptr++;
         value = *parm_ptr++;

         if(field == 0) { error_occurred = TRUE; return; }
         else          offset = value;

         field = *parm_ptr++;
         value = *parm_ptr++;

         if(field == 0) { error_occurred = TRUE; return; }
         chardata = value;

         field = *parm_ptr++;
         value = *parm_ptr++;

         if(field ==0)  len = 1;
         else   len = value;

         for(i=0; i<len; i++)
         {
             modem_write_data(offset,1,(ubyte *)&chardata);
             offset++;
         }

         return ;

       case 2:
         field = *parm_ptr++;
         value = *parm_ptr++;

         if(field == 0) { error_occurred = TRUE; return; }
         else          offset = value;

         field = *parm_ptr++;
         value = *parm_ptr++;

         if(field == 0)  len = 1;
         else  len = value;

         modem_erase_data(offset,len);

         return ;

       case 3:
         modem_erase_all();

         return ;

       case 4:
         field = *parm_ptr++;
         value = *parm_ptr++;

         if(field == 0) value=0;

         modem_write_all(value);

         return ;

       case 5:     /* for cs */
         mask_bit = 0x0020;
         break;

       case 6:                  /* data */
         mask_bit = 0x0010;
         break;

       case 7:                  /* sk */
         mask_bit = 0x0040;
         break;

       case 8:                  /* sk */
         static_offset = 0;
         return;


       default:
             error_occurred = TRUE;
             return;

     }      /* swith */

     field = *parm_ptr++;
     value = *parm_ptr++;

     if(field==0)    return;
     else
     {
          if(value ==0)
          {
             *gpcr0_addr = mask_bit;  /* config as input */
              return;
          }
          else if(value == 1)
          {
             val_bit = mask_bit >> 4;
             *gpcr0_addr = mask_bit | val_bit;  /* config as ooutput */

              field = *parm_ptr++;
              value = *parm_ptr++;

              if(field ==0)  return;
              else
              {
                 if(value == 0)
                 {
                     *gpr0_addr = mask_bit;  /* output a low */
                      return;
                 }
                 else if( value ==1)
                 {
                     val_bit = mask_bit >> 4;
                     *gpr0_addr = mask_bit | val_bit;  /* output a low */
                      return;
                 }
                 else {error_occurred = TRUE; return; }
              }
          }
          else { error_occurred = TRUE; return; }
     }


   } /* if else */
   else { error_occurred =TRUE;  return ; }
}


void  d_to_asc_hex(ubyte len, ubyte buf1[], ubyte buf2[])
{
       uword i, j, k;
       ubyte temp;

       for(i=0, j=0, k=0; i<len ; i++,k++)
       {
           if(k==8)
           {
               k=0;
               buf2[j]=0x20;  /* SP */
               j++;
               buf2[j]=0x20;
               j++;
           }

           if(i==32)
           {
               buf2[j]=0x0a;  /* LF */
               j++;
               buf2[j]=0x0d;  /* CR */
               j++;
           }

           temp = buf1[i];
           temp = (temp & 0xf0) >> 4;

           if(temp <= 9 ) buf2[j] = temp + 48;
           else           buf2[j] = temp + 55;

           j++;

           temp = buf1[i];
           temp = temp & 0x0f;

           if(temp <= 9 ) buf2[j] = temp + 48;
           else           buf2[j] = temp + 55;

           j++;

       }
       buf2[j]=0;
}


#endif

ubyte  modem_write_all(ulong value)
{
   return (0);
}
ubyte  modem_erase_data(uword offset, uword length)
{
   return (0);
}

void  d_to_asc_hex(ubyte len, ubyte buf1[], ubyte buf2[])
{ }

#if 0 /* ramn 9/11/96 */
void bang_E2_e(ubyte *parm_ptr)
{ }

void bang_E2_eq(void);

void bang_E2_eq(void)
{

}
#endif


#if 0
/* shujin 9/9/97 */
#define UARTBASE     0x000B0000L
#define VERBOSE_FORM      1
void bang_r_e(ubyte *parm_ptr);
void bang_w_e(ubyte *parm_ptr);

/* in ac00cmdt.c
    (ubyte *)"!r=", bang_r_e, COMPOUND_BYTE_HEX, SEMICOL_END,
    (ubyte *)"!w=", bang_w_e, COMPOUND_BYTE_HEX, SEMICOL_END,
*/

ubyte buf[12], displaying = 0;

void bang_r_e(ubyte *parm_ptr)
{
   ubyte  i, field, value, val, val1;
   ulong  addr_val;

   addr_val = 0;



/* for displaying in dte_interrupt_rx, dte_interrupt_tx in acu.c
*/
   parm_ptr ++;

   if( *parm_ptr == 0x0d )
   {
      displaying = 1;
      return;
   }
   else if( *parm_ptr == 0x0e )
   {
      displaying = 2;
      return;
   }
   else displaying = 0;

   parm_ptr --;


      for(i=0; i<6; i++) {
         field = *parm_ptr++;
         value = *parm_ptr++;

         if(field == 0)  {
           error_occurred = TRUE;
           return;
         }

         if( value < 10)    buf[i] = (value + 48);  /* 1-9 */
         else              buf[i] = (value + 55);  /* A-F */

         addr_val |=  value;
         if( i != 5 )  addr_val = addr_val << 4;
      }
      buf[i++] = '=';

      val = *(ubyte *) addr_val;      /* read the mem */

      val1 = val >> 4;
      if( val1 < 10)    buf[i++] = (val1 + 48);  /* 1-9 */
      else              buf[i++] = (val1 + 55);

      val1 = val & 0x0f;
      if( val1 < 10)    buf[i++] = (val1 + 48);  /* 1-9 */
      else              buf[i++] = (val1 + 55);

      buf[i] = 0;
      output_info(buf,VERBOSE_FORM);
}


void bang_w_e(ubyte *parm_ptr)
{
   ubyte  i, field, value, val, val1;
   ulong  addr_val;

   addr_val = 0;

      for(i=0; i<6; i++) {

         field = *parm_ptr++;
         value = *parm_ptr++;

         if(field == 0)  {
           error_occurred = TRUE;
           return;
         }

         if( value < 10)    buf[i] = (value + 48);  /* 1-9 */
         else              buf[i] = (value + 55);  /* A-F */

         addr_val |=  value;
         if( i != 5 )  addr_val = addr_val << 4;
      }

         field = *parm_ptr++;
         value = *parm_ptr++;

         val = value << 4;


         field = *parm_ptr++;
         value = *parm_ptr++;

         if( field == 0)  {
           error_occurred = TRUE;
           return;
         }

         val |= value;

 /* write the mem with the value */
      *(ubyte *)addr_val =  val;

      buf[i++] = '=';

      val = *(ubyte *) addr_val;      /* read the mem */

      val1 = (val >> 4);
      if( val1 < 10)    buf[i++] = (val1 + 48);  /* 1-9 */
      else              buf[i++] = (val1 + 55);

      val1 = val & 0x0f;
      if( val1 < 10)    buf[i++] = (val1 + 48);  /* 1-9 */
      else              buf[i++] = (val1 + 55);

      buf[i] = 0;
      output_info(buf,VERBOSE_FORM);
}

#endif
