 

/* eeread.c, 3-20-96 */

#include "eeprom.h"

#include "sys_def.h"

#include "ee_def.h"


ubyte  pnp_status;  /* borrow for pnp */

extern    ubyte    error_occured;

/*mrm102696*/
extern volatile unsigned char   edge_cycle;

extern    void load_eetimer (void);
extern    void load_interrupts_vectors (void);

ubyte modem_read_data( uword offset, uword length, ubyte *ptr);

#if 0
ubyte modem_read_data( uword offset, uword length, ubyte *ptr)
{}
#endif

ubyte modem_read_data( uword offset, uword length, ubyte *ptr)
{
     ubyte  i, j, temp_data, *dest_ptr;
     ubyte  *gpr0_addr, *gpcr0_addr;
     ulong  data, ee_offset;

     dest_ptr = ptr;
     ee_offset = offset;

     gpr0_addr = (ubyte *) GPR0;
     gpcr0_addr = (ubyte *)GPCR0;

     *gpr0_addr = (ubyte) CS_LO;
     *gpcr0_addr = (ubyte) DATA_OUT;   /* as output */
      *gpr0_addr = (ubyte) DO_LO;      /* init a low */

     load_eetimer();


/*read bit from the EEProm */                                          
          
          for (i = 0 ; i <= length ; i++) 
          {
             ulong shifted_offset;

             shifted_offset = ee_offset << SHIFT_OFFSET_L_VAL;

             data =  READ | shifted_offset ;

            *gpcr0_addr = (ubyte) DATA_OUT;
             *gpr0_addr = (ubyte) DO_LO;
               
             *gpr0_addr = (ubyte) CS_HI;

/*mrm102696*/
             while( edge_cycle == 1)   ;
             while( edge_cycle == 0)  ;
     
             for (j = 0; j < WRITE_THE_READ_SEQ ; j++)
             {     
                 if (data & MASK_bit_31)
                 {
/*mrm102696*/
                    while( edge_cycle == 1) ;

                     *gpr0_addr = (ubyte) DO_HI;
                 }
                 else
                 {
/*mrm102696*/
                     while( edge_cycle == 1)   ;

                     *gpr0_addr = (ubyte) DO_LO;
                 }
                 data = data << 1 ;
/*mrm102696*/
                 while( edge_cycle == 0)  ;
                                                  
            }

            *gpcr0_addr = (ubyte) DATA_IN;  /* as input */
                    
/*mrm102696*/
            while( edge_cycle == 1)    ;

            for (j = 0; j < READ_NO_BITS ; j++)                    
            {
               ubyte gpr0_val;

/*mrm102696*/
               while( edge_cycle == 0) ;
               while( edge_cycle == 1) ;

/* eeprom release data at ricing edge, so we fetch data at falling edge */
               gpr0_val = *gpr0_addr & DO_MASK;   /* read data and mask it */
               temp_data =  (temp_data << 1 ) | gpr0_val;
            }
            *gpr0_addr = (ubyte) CS_LO;  /* need disable in time! */

              if(i==0)   ;
              else {           
                 *dest_ptr = temp_data;
                 dest_ptr ++;
                 ee_offset ++;
              }


/* must have the following */

            *gpcr0_addr = (ubyte) DATA_OUT;   /* as output */
            *gpr0_addr = (ubyte) DO_LO;      /* init a low */
         }
     
         *dest_ptr = 0x00;

/* pnp is working, see powerup.s */
         if( pnp_status == 0x88)  ;
         else  load_interrupts_vectors ();
              
         *gpr0_addr = (ubyte) CS_LO;

         *gpcr0_addr = (ubyte) DATA_OUT;   /* as output */
         *gpr0_addr = (ubyte) DO_LO;      /* init a low */

         return (0);
}

ulong serial_id;

ulong get_bytes_from_nvram(void);

ulong get_bytes_from_nvram(void)
{

/* read once for remove some ayn signal caused by hardware reset */

   serial_id = 0;
   modem_read_data( PNP_SERIAL_ID_ADDR, 4,(ubyte *) &serial_id);
   return(serial_id);
}
