/*********************************************************************
/
/	Copyright, 1988 - 1995.  All Rights Reserved by:
/		RSA
/		7701 Six Forks Road
/		Suite 120
/		Raleigh, NC 27615
/		(919) 846-7171
/
/	This document contains material confidential to RSA.
/	Its contents must not be revealed, used or disclosed to
/	anyone or company with out written permission by RSA.
/	The information contained herein is solely for the use of RSA.
/
/	File:  		lineasyn.c
/
/	Version:  	1.0
/
/	Function:	This file contains procedures for MNP2 
/
/	Product:	First Flight Line I/O 
/  
/  History:  Modified from LINEASYN.C
/
/	Created:  January 30, 1995
/
/	----------------------------
/	-	Modifications	   -
/	----------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
******************************************************************************/

#include "sys_def.h"
#include "lineequ.h"            /* DCE constant defs */
#include "lineedf.h"  		     /* DCE external variable defs */
#include "iohw_equ.h"            /* hardware equates for CRAM etc */
#include "linelink.h"            /* function prototypes in linelink.c */
#include "local.h"              /* typedefs for DSP drivers */
#include "dsp_drv.h"             /* DSP driver header file */

/***************** external procedures used locally *************************/

/*** from file linecrc.c ***/
extern uword build_crc_16( ubyte , uword );

/*** from file linedetc.c ***/
extern void got_mnp_during_detc(void);

/*** from file mnp.c ***/
extern ubyte *mnp_tx(void);

/*** from file mnp_que.c ***/
extern ubyte *mnp_rx(void);


/***************************** local functions *****************************/
void async_tx_int(void);
void async_rx_int(void);
void rx_bg_async_char( ubyte );
void async_external_int(void);
void async_special_int(void);
void line_autoreliable_fallback ( ubyte, uword, ubyte, ubyte );
void reset_autoreliable_fallback(void);
void got_auto_fallback( ubyte );

/***************************** local variables ****************************/
ubyte buffering_200_chars;	/* T/F buffering the 1st 200 chars flag */
ubyte wait_for_fall_char;	/* TRUE if waiting for a fallback character  */
ubyte auto_fallback_char;	/* fallback character (from v42) */
ubyte data_packet[4];/* temp packet to send ctl char's (DLE,etc.) */


/*****************************************************************************
/
/	Procedure:  async_tx_int
/
/	Author: RSA
/
/	Creation Date:   January 30, 1995
/
/	Description: This routine handles the TX READY interrupts from the
/               Merlin
/			
/	Input Parameters:  None
/
/	Output Parameters:  None
/
/	Global Variables Changed:  tx_state, mnp_tx_data_ptr, tx_char_count, 
/		tx_crc 
/
/	Users:	
/
/	-------------------------
/	-     Modifications	-
/	-------------------------
/
/	Author & Date: RSA
/	Description:
/	Reason:
/
********************************************************************/
void async_tx_int(void)
{
   ubyte commram_count = DATA_AREA_SIZE;
#ifdef TEMP_ARM610
	uword address;
#else
   ubyte address; /* address in Comm RAM to write to */
#endif
   ubyte tx_status_reg;

   if (mnp_tx_packet_ptr == 0)
      return;

   address = CP_DSP_DATA_AREA_BASE;
   switch ( tx_state ){

      case TXA_SYN_C :
            data_packet[0] = SYN_CHAR;

      /* case TXA_SYNDLE_C :  */
            data_packet[1] = DLE_CHAR;

      /* case TXA_STX_C :     */
            data_packet[2] = STX_CHAR;
            dspdrv_WriteCram(address, data_packet, 3);
				
            commram_count -= 3;	/* decrement count for last 3 char */
            /* increment address for last 3 chars */
            address += 3 * WORD_OR_BYTE_ADD_INC;  

/*          Set up ptrs and counts */
            mnp_tx_data_ptr = mnp_tx_packet_ptr->data;
            tx_char_count = mnp_tx_packet_ptr->count;

/*          Reset CRC and tx state */
            tx_crc = 0;
            tx_state = TXA_DATA_C;
/*          no break - continue thru */

      case TXA_DATA_C :

/*          While data is available and room in tx fifo */
            while (tx_char_count && commram_count)
            {
/*             If data is a DLE char, send 2 DLE's but CRC only one */
               if (*mnp_tx_data_ptr == DLE_CHAR)
               {
/*                Check for FIFO overflow on 2 chars */
                  if (commram_count >=2)
                  {
                     data_packet[0] = DLE_CHAR;
                     dspdrv_WriteCram(address, data_packet, 1);
                     address += WORD_OR_BYTE_ADD_INC;
                     commram_count--;
                  }
                  else
                  {
                     break; /* wait 'til next time to send DLE */
                  }
               }

/*             Send char and update CRC */
               dspdrv_WriteCram(address, mnp_tx_data_ptr, 1);
               tx_crc = build_crc_16(*mnp_tx_data_ptr, tx_crc);

/*             Next char and fifo location */
               mnp_tx_data_ptr++;
               tx_char_count--;
               address += WORD_OR_BYTE_ADD_INC;
               commram_count--;
            }


            if (tx_char_count == 0)
            {
               tx_state = TXA_DLE_ETX_C;
            }
            break; /* out of TXA_DATA_C */


      case TXA_DLE_ETX_C:
            data_packet[0] = DLE_CHAR;
            data_packet[1] = ETX_CHAR;

            tx_crc = build_crc_16(ETX_CHAR, tx_crc );


      /* case TXA_CRC_C: */
/*          Send out Low byte, then the High byte */
            data_packet[2] = (ubyte)tx_crc;
            data_packet[3] = (ubyte)(tx_crc >> 8);

            dspdrv_WriteCram(address, data_packet, 4);
            address += 4 * WORD_OR_BYTE_ADD_INC;
            commram_count -=4;
            tx_state = TXA_DONE_C;
            break;
  

      case TXA_DONE_C:

            mnp_tx_packet_ptr = (MNP_PACKET_TYPE *)mnp_tx();
				tx_state = TXA_SYN_C;
            dspdrv_ping_cram_intr();  /* kick start Merlin */
            return;


            
/*          if DSP buffer not empty, tell DSP to give us another tx int */   
/*          and wait til then to check for buffer empty                 */

            dspdrv_ReadCram(TX_STATUS_REG, &tx_status_reg, 1);
            if ((tx_status_reg & BUFFER_EMPTY) != BUFFER_EMPTY)
            {	
               dspdrv_ping_cram_intr();  /* kick start Merlin */
            }
/*          else, DSP buffer empty, get next packet to send from V42    */
            else
            {
               mnp_tx_packet_ptr = (MNP_PACKET_TYPE *)mnp_tx();
				   tx_state = TXA_SYN_C;
            }
            return; /* don't do semaphore setting's below */
            break;

		default :
            return;
            break; /* do nothing */

   } /* switch */

/* set semaphores, use data packet for temp status and length variable */
   data_packet[0] = 0; /* status */
   dspdrv_WriteCram(CP_DSP_DATA_STATUS, data_packet, 1);
   data_packet[0] = DATA_AREA_SIZE-commram_count; /* length */
   dspdrv_WriteCram(CP_DSP_DATA_LENGTH, data_packet, 1);  /* sets semaphore */

} /* procedure */


/*****************************************************************************
/
/	Procedure:  async_rx_int
/
/	Author: RSA
/
/	Creation Date: January 30, 1995
/
/	Description: This routine will handle the RX READY interrupts from the
/		Merlin.
/
/	Input Parameters:  None
/
/	Output Parameters:  None
/
/	Global Variables Changed:  
/
/	Users:	
/
/	-------------------------
/	-     Modifications	-
/	-------------------------
/
/	Author & Date: RSA
/	Description:
/	Reason:
/
****************************************************************************/
void async_rx_int(void)
{
	ubyte temp;
	ubyte address = DSP_CP_DATA_AREA_BASE;

	if (dce_status_semaphore == RX_OVERRUN)
		line_bg_error_flags = 1;

	/*  WHILE chars in RxFIFO pluck them out */
	while (dce_length_semaphore) 
	{
		dspdrv_ReadCram(address, &temp, 1);
		rx_bg_async_char(temp);
		address += WORD_OR_BYTE_ADD_INC;
		dce_length_semaphore--;	
	} 

	dce_status_semaphore = 0;

	/* clear semaphores */
	dspdrv_WriteCram(DSP_CP_DATA_LENGTH, &dce_length_semaphore, 1);
	dspdrv_WriteCram(DSP_CP_DATA_STATUS, &dce_status_semaphore, 1);

}/* procedure */


/*****************************************************************************
/
/	Procedure:  rx_bg_async_char
/
/	Author: RSA
/
/	Creation Date: January 30, 1995
/
/	Description: This routine buffer the async data received for MNP async
/		and for detection mode.
/
/	Input Parameters:  None
/
/	Output Parameters:  None
/
/	Global Variables Changed:  
/
/	Users:	async_rx_int, detection_rx_int	
/
/	-------------------------
/	-     Modifications	-
/	-------------------------
/
/	Author & Date: RSA
/	Description:
/	Reason:
/
********************************************************************/
void rx_bg_async_char( ubyte in_char )
{
/*	If were buffering for autoreliable */
	if ( buffering_200_chars )
	{
		dce_rx_buffer[dce_rx_insert] = in_char;
		dce_rx_insert++;
		dce_rx_count++;

/*		reset buffer ptr ? */
		if ( dce_rx_insert == DCE_BUFFER_SIZE )
			dce_rx_insert = 0;

		if (  dce_rx_count == 200 )
		{
			got_auto_fallback(FALLBACK_OVERFLOW);/*0x2*/
			return;
		}
	}

/*	If were waiting for the fallback char, and not yet in MNP2 check the 
 *	new char with the auto fallback char 
 */
	if ( wait_for_fall_char && (rx_state <= RXA_STX_C) )
		if ( (in_char & 0x7f) ==  auto_fallback_char )
		{	
			got_auto_fallback(RXED_FALLBACK_CHAR);/*0x1*/
			return;
		}

/*	Else not auto buffering data so packetize it */
	switch ( rx_state )
	{
		case RXA_SYN_C :
				if ( in_char == SYN_CHAR )
					rx_state = RXA_SYNDLE_C;
				break;

		case RXA_SYNDLE_C :
				if ( in_char == DLE_CHAR )
					rx_state = RXA_STX_C;
				else if ( in_char == SYN_CHAR )
					; /* wait here for the DLE */
				else 
					rx_state = RXA_SYN_C;
				break;

		case RXA_STX_C :
/*				If correct order of control chars */
				if ( in_char == STX_CHAR )
				{

/*					If no packet buffer is available, exit */
					if ( mnp_rx_packet_ptr == 0 )
					{
						rx_state = RXA_SYN_C;
						return;
					}

/*					Else ready to fill valid buffer w/ data */
					rx_state = RXA_DATA_C;

/*					Reset status, count and data_ptr to the rx packet */
					mnp_rx_packet_ptr->status = 0;
					mnp_rx_packet_ptr->count = 0;
					mnp_rx_data_ptr = mnp_rx_packet_ptr->data;
					rx_char_count = 0;
					rx_crc = 0;
				}
/*				Else INCORRECT order of control chars */
				else
				{
				if ( in_char == SYN_CHAR )
					rx_state = RXA_SYNDLE_C;
				else
					rx_state = RXA_SYN_C;
				}
				break;

		case RXA_DATA_C :
				if ( in_char == DLE_CHAR )
				{
					rx_state = RXA_DLEDATA_C;
				}
/*				If problems w/ packet, set error flag */
				else if (!mnp_rx_data_ptr || rx_char_count>MNP_MAX_FRAME_SIZE) 
				{
					line_bg_error_flags = 1;
				}
				else /* no problems, buffer char and build crc */
				{
					*mnp_rx_data_ptr++ = in_char ;
					rx_char_count++;
					rx_crc = build_crc_16(in_char, rx_crc );
				}
		 
				break;
		
		case RXA_DLEDATA_C :
				if ( in_char == DLE_CHAR )
					rx_state = RXA_DATA_C;
				else if ( in_char == ETX_CHAR )
					rx_state = RXA_CRC_C_LOW;
				else if ( in_char == SYN_CHAR )
				{
					rx_state = RXA_SYNDLE_C;
					return;
				}
				else 
				{
					rx_state = RXA_SYN_C;
					return;
				}

/*				If no packet available or over ran the packet, set error */
				if ( mnp_rx_data_ptr == 0 || 
					rx_char_count > MNP_MAX_FRAME_SIZE ) 
				{ 
					line_bg_error_flags = 1;
				}
				else /* no problems, buffer the char */
				{
					*mnp_rx_data_ptr++ = in_char ;
					rx_char_count++;
					rx_crc = build_crc_16(in_char, rx_crc );
				}
		 
				break;
		
		case RXA_CRC_C_LOW:


/*rjm81996*/

				/* run low byte of crc through crc generator */
				rx_crc = build_crc_16(in_char, rx_crc );
				rx_state = RXA_CRC_C_HIGH;
				break;

		case RXA_CRC_C_HIGH:

				/* run high byte of crc through crc generator */
				rx_crc = build_crc_16(in_char, rx_crc );

				if (detection_enabled == TRUE )	/* ramn 1/2/97 */
					got_mnp_during_detc();

				

/*				Delete the ETX from the packet */
				mnp_rx_data_ptr-- ;
				rx_char_count--;

/*				Save the count */
				mnp_rx_packet_ptr->count = rx_char_count;

/*				Tag frame as bad on back ground error or CRC error */
				if ( rx_crc || line_bg_error_flags )
				{
					mnp_rx_packet_ptr->status = BAD_BLOCK;
					line_bg_error_flags = 0; /* reset error flag */
				}

/*				Get next mnp rx packet */
				mnp_rx_packet_ptr = (MNP_PACKET_TYPE *) mnp_rx();


/*				If a new rx buffer is ready, clear status bytes */
				if ( mnp_rx_packet_ptr )
				{
					mnp_rx_packet_ptr->status = 0;
					mnp_rx_packet_ptr->count = 0;
					mnp_rx_data_ptr = mnp_rx_packet_ptr->data;
				}
	
/*				Reset state */
				rx_state = RXA_SYN_C;

				break;
	}/* switch */

} /* procedure */



/*****************************************************************************
/
/	Procedure:  line_autoreliable_fallback
/
/	Author: RSA
/
/	Creation Date: January 30, 1995
/
/	Description: This routine is called by V42 to set up the autoreliable
/			variables
/
/	Input Parameters:  None
/			   
/	Output Parameters:  None
/
/	Global Variables Changed:  auto_fallback_char, wait_for_fall_char,
/			auto_fallback_timer, auto_seconds, buffering_200_chars
/	Users:	
/
/	-------------------------
/	-     Modifications	-
/	-------------------------
/
/	Author & Date: RSA
/	Description:
/	Reason:
/
********************************************************************/
void line_autoreliable_fallback ( ubyte in_control_flag,
				  uword in_auto_time,
				  ubyte in_auto_char,
				  ubyte in_buffer_flag
 				 )
{
/*	Reset autoreliable variables */
	reset_autoreliable_fallback();

/*	Set up for auto fallback char detection ? */
	if ( in_control_flag & ENABLE_AUTO_CHAR_DETECT ) 
	{
		auto_fallback_char = in_auto_char;
		wait_for_fall_char = TRUE;
	}

/*	Set up for auto fallback timing ? */
	if ( in_control_flag & ENABLE_AUTO_TIMER ) 
	{
if ( in_auto_time )
		  {
/*			   Setup autoreliable timer mechanisms */
			   auto_fallback_timer = in_auto_time;
			   auto_seconds = 100;
		  }
	 }
	
/*	 Set up for auto fallback character buffering ? */
	 if ( in_buffer_flag )
		  buffering_200_chars = TRUE;
	
}/* procedure */



/*****************************************************************************
/
/	Procedure:  reset_autoreliable_fallback
/
/	Author: RSA
/
/	Creation Date: September 15, 1992
/
/	Description: This routine will clear the disable the autoreliable mode
/
/	Input Parameters:  None
/
/	Output Parameters:  None
/
/	Global Variables Changed:  dce_rx_count, dce_rx_insert, dce_rx_remove,
/			auto_fallback_timer, auto_seconds, wait_for_fall_char,
/			buffering_200_chars 
/
/	Users:	
/
/	-------------------------
/	-     Modifications	-
/	-------------------------
/
/	Author & Date: RSA
/	Description:
/	Reason:
/
********************************************************************/
void reset_autoreliable_fallback(void)
{
/*	 Reset autoreliable buffer */
	 dce_rx_count = 0;
	 dce_rx_insert = 0;
	 dce_rx_remove = 0;
	 buffering_200_chars = 0;

/*	 Reset autoreliable timer */
	 auto_fallback_timer = 0;
	 auto_seconds = 0;

/*	 Reset autoreliable fallback character */
	 wait_for_fall_char = 0;

} /* procedure */
	

/*****************************************************************************
/
/	Procedure:  got_auto_fallback
/
/	Author: RSA
/
/	Creation Date: 
/
/	Description: This routine will transform the auto_fallback_flag into
/		an "auto fallback variable" which is passed to 
/		"v42_falling_back_to_speed()".
/
/	Input Parameters:  None
/
/	Output Parameters:  None
/
/	Global Variables Changed:  
/
/	Users:	
/
/	-------------------------
/	-     Modifications	-
/	-------------------------
/
/	Author & Date: RSA
/	Description:
/	Reason:
/
********************************************************************/
void got_auto_fallback( ubyte in_fallback_flag )
{
	 auto_fallback_flag = in_fallback_flag + 1;

} /* procedure */



