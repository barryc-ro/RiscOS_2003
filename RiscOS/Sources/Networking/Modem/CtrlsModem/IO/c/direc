/************************************************************************
/
/   Copyright 1994, 1995. All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/
/   This document contains material confidential to RSA its contents must
/   not be revealed, used or disclosed to anyone or company with out
/   written permission by RSA.  The information contained herein is solely
/   for the use of RSA.
/
/   File:      ACU.C
/
/   Version:   1.00
/
/   Function:  This file contains the ACU IO code
/
/   Product:   H8/3002 IO code
/
/   Platform:  H8/3002 + TI 16PC564 PCMCIA UART (TIPU)
/
/   History:   acu.c v1.00
/
/   Created:   10/27/94
/
/       -----------------------------------------------------------------
/   -         Modifications                 -
/   -----------------------------------------------------------------
/
/   Author & Date:   RSA 
/   Description: 
/   Reason:
/
************************************************************************/
#include "sys_def.h"
#include "acuiomem.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "dteequ.h"
#include "dsp_drv.h"            /* DSP driver prototypes    */
#include "dce_line.edf"
#include "dte.edf"
#include "iohw_equ.h"              /* first flight hardware defs */



ubyte direct_mode_array[20];
ubyte direct_mode_tx_count = 0;
ubyte got_new_data = 0;
ubyte direct_data_count = 0;
int  data_from = 0; 
extern ubyte slN;
extern void   PutByte (char ch); 
ubyte process_direct_data = 0;

void dte_rx_interrupt(void);
void dte_tx_interrupt(void);

extern ubyte dte_data_ready(void);
extern ubyte dte_transmit_empty(void);
extern ubyte dte_read_char_from_uart(void);
extern void dte_write_char_to_uart(ubyte);




/************************************************************************
/
/            dte_tx_int
/
/   Author:    RSA
/
/   Creation Date:   01/24/91
/
/   Description:   This routine will confirm the transmission of a data
/         buffer to the terminal
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  ACU_NTS, ACU_NTF, ACU_TX_COUNT, ACU_TX_INSERT
/               ACU_TX_BUFFER, ACU_STATUS
/
/   Users:   None
/
/       -----------------------------------------------------------------
/   -         Modifications                 -
/   -----------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/
************************************************************************/
void dte_tx_interrupt(void)
{
   ubyte tx_char;

   if (!(dte_mode == ACU))
   
   {
        
        
          ubyte *data_packet; /* Comm RAM data area */
          ubyte data_count,clear,length;  /* counter for data packet */
          uword address;
          ubyte *length_semaphore;
          ubyte *status_semaphore;
     
          address = DSP_CP_DATA_AREA_BASE;     
     
          data_count = 1;
          length_semaphore = (ubyte *)(COM_RAM + DSP_CP_DATA_LENGTH ); 
          status_semaphore = (ubyte *)(COM_RAM + DSP_CP_DATA_STATUS );      
          length = *length_semaphore;
     
          if(*length_semaphore)          
          {
               while (length)
               {

                    data_packet =(ubyte *)(COM_RAM + address);
                    PutByte (*data_packet);
                    address+=4;
                    length--;
                    if(length == 0)
                         data_count = 0;

               } /* end while */
               if (data_count == 0) 
               {
                    clear = 0;
                    status_semaphore = (ubyte *)(COM_RAM + DSP_CP_DATA_STATUS );      
                    *status_semaphore = 0;
                    length_semaphore = (ubyte *)(COM_RAM + DSP_CP_DATA_LENGTH ); 
                    *length_semaphore = 0;
               }
          } 
   }
}

/************************************************************************
/
/            dte_rx_int
/
/   Author:    RSA
/
/   Creation Date:   01/24/91
/
/   Description:   This routine will confirm the reception of a data
/         buffer from the terminal
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  ACU_RX_COUNT, ACU_RX_INSERT, ACU_RX_BUFFER
/
/   Users:   None
/
/       -----------------------------------------------------------------
/   -         Modifications                 -
/   -----------------------------------------------------------------
/
/   Author & Date:   RSA
/   Description:
/
************************************************************************/
void dte_rx_interrupt(void)
{
     
          ubyte status,length; /* status byte of data area semaphore to write */
          ubyte data_count,*data; /* count of number of data bytes to send to Comm RAM */
          uword address;
          ubyte i;
          ubyte *length_semaphore;
          ubyte *status_semaphore; 
     
    if(dte_data_ready())
    {
          rx_char = dte_read_char_from_uart();
          process_direct_data = 1;
          got_new_data = 1;

    }
    else
    {
        got_new_data = 0;
    }

   if ((dte_mode == DTE) && (process_direct_data == 1))
   {
         /* Check for escape characters */
         
         if ( rx_char == esc_chr )
         {
            /* Increment the no. of escape chars rx'ed by one */
            dte_tesc_count++;
   
            /* Switch on the no. of escape chars rx'ed so far */
            switch ( dte_tesc_count ) 
            {
                  case 1 : /* one escape char received */
                        if(dte_lead_guard == 0)
                           
                           dte_tesc_count = 0;
                        
                        break;
   
                  case 2 : /* two or three escapes received */
                  case 3 : 
                        if( dte_guard_time == 0)
                        {
                           
                           dte_lead_guard = 0;
                           dte_tesc_count = 0;
                        
                        }
                        break;
   
                  case 4 : /* four escape chars received */
                  default:
                        dte_lead_guard = 0;
                        dte_tesc_count = 0;
                        break;
   
            }
   
            /* reload guard timer from dte_timer() variable */
            /*mrm8895*/
            
            dte_guard_time = esc_guard_time;
            process_direct_data = 0;
         
         } /* if esc_chr */
         /* Else it's a regular char so reset the escape detection */
         else   
         {     
            dte_lead_guard = 0;
            dte_tesc_count = 0;
            dte_guard_time = esc_guard_time;
         }
          
          if(got_new_data)
          {
               direct_mode_array[direct_mode_tx_count] = rx_char;
               direct_mode_tx_count++;
               direct_data_count++;
          }          
          if(direct_data_count == 0)
                    return;          
          
          length_semaphore = (ubyte *)(COM_RAM + CP_DSP_DATA_LENGTH ); 

          if (!(*length_semaphore))           
          {
          
               process_direct_data = 0;
               
               
               address = CP_DSP_DATA_AREA_BASE;
          
             
               for (i =0 ;i < direct_data_count ;i++)
               {
                    data = (ubyte *)(COM_RAM + address);      
                    *data = direct_mode_array[i];
                    address +=4;
               }
               
               /* set semaphore, status then length */
               status = 0;
               length = direct_data_count;
          

               status_semaphore = (ubyte *)(COM_RAM + CP_DSP_DATA_STATUS );      
               *status_semaphore = status;         
          
               length_semaphore = (ubyte *)(COM_RAM + CP_DSP_DATA_LENGTH ); 
               *length_semaphore = length;          
               direct_mode_tx_count = 0;     
               direct_data_count = 0 ;
          }
   
   
     } /* if dte_mode == DTE */
   
}




