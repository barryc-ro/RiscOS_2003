/*******************************************************************************
/
/                     			"Patch dsp memory "
/
/
/        CIRRUS LOGIC Inc
/        3100 West Warren Ave
/        Fremont, CA. 94538
/        (510) 623-8300
/
/
/    This document contains material confidential to CIRRUS LOGIC its 
/    contents must not be revealed, used or disclosed to anyone or 
/    company with out written permission by CIRRUS LOGIC.  
/    The information contained herein is solely for the use of CIRRUS LOGIC.
/
/
/    Creation Date: 03/22/96
/
/    Description:   Patch using poke command to modify the program memory
/ 						  in the dsp.
/ 							
/
/
/
/
/
/    Input Parameters:  none 
/                        
/                        
/
/    Output Parameter:  
/                        
/
/    Global Variables Changed:     current_command[]
/
/    Users: 
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date: 
/    Description: 
/    Reason: 
/
*******************************************************************************/


#include "sys_def.h"
#include "mt_pro.h" 
#include "cp_dsp.h"
#include "fab.h" 	/* ramn 4/22/96 */
#include "dsp_cod.h" /* ramn 5/7/96 */
#include "mt_macro.h" /* ramn 4/22/96 */
#include "mt_codef.h" /* ramn 4/22/96 */


#define ACK    0

extern const uword patch[];
extern void  send_pkt_to_dsp(void);
extern ubyte dsp_response_data[15]; /* ramn 4/18/96 */
extern ubyte dsp_cp_packet;


void dsppatch (void);
void dsp_poke(uword, uword);

/* ramn 4/22/96 */
extern void dnld_spkr_phn_code(uword *);	
extern uword pwr_on_patch[500];
extern ubyte count_for_msec_timer;

extern void set_7_wait_states(void);
extern ubyte spkr_phn_dnl;
void dnld_patch(void); 	/* ramn 6/18/96 */

/* ramn 11/18/96 */
void voice_dnld_patch(const uword tbl[]);
void write_to_dsp( uword, uword );
extern const uword vcepatch[];
uword dsp_peek(uword addr);


/* till here ramn */
void dsppatch (void)
{
		uword length,count,address,data,add,data_byte,hi_mcon,lo_mcon ;
		ubyte *temp;

		ubyte mcon_lo, mcon_hi, pram_addr_lo, pram_addr_hi;

/*#if 0*/ /* if main */

#if DSP_CODE_INTERNAL == 1
		spkr_phn_dnl = 0;
		dnld_spkr_phn_code(pwr_on_patch);	/* ramn 4/22/96 */
		set_7_wait_states();		/* this sets 7 wait states for musket-cp interf*/
/**************
moved the poke of BCON and MCON shadow register to the spkr_phn_dnl func
as these pokes are also needed when the actual spkr phn code is downloaded

ramn 6/13/96
************/

	  	dnld_patch();
#endif

#if 0
		if (patch[0] != 1)
				return;
#endif


}

/* ramn 6/18/96 */
void dnld_patch(void)
{
		uword length,count,address,data,add,data_byte,hi_mcon,lo_mcon ;
		ubyte *temp;

		address = 2;
		data = 3;
		
		length  = patch [1];

		hi_mcon = 0;
		lo_mcon = 0;

		for (count = 1; count <= length; count++)
		{
			add = patch [address];
			data_byte = patch [data];

    		current_command [0] = PACKET_DSP_PROGRAM_MEMORY_WRITE;
			current_command [1] = 0x00;
    		current_command [2] = PACKET_DSP_PROGRAM_MEMORY_WRITE_LEN;
    		current_command [3] = 0x00;
    		current_command [4] = add;
    		current_command [5] = add>>8;
    		current_command [6] = lo_mcon;
    		current_command [7] = hi_mcon;
    		current_command [8] = data_byte;
    		current_command [9] = data_byte>>8;

 	  		temp = (ubyte *)(COM_RAM); 
	  		*temp = 0x0c0;
			
   		ack_or_response = ACK;
    		send_pkt_to_dsp();
 
			address += 2;
			data +=2;
		}
}






void dsp_poke(uword data, uword addr)
{
	ubyte mcon = 0;
	ubyte *temp;

	current_command [0] = PACKET_DSP_PROGRAM_MEMORY_WRITE;
	current_command [1] = 0x00;
   current_command [2] = PACKET_DSP_PROGRAM_MEMORY_WRITE_LEN;
   current_command [3] = 0x00;
   current_command [4] = addr;
   current_command [5] = addr>>8;
   current_command [6] = mcon;
   current_command [7] = mcon>>8;
   current_command [8] = data;
   current_command [9] = data>>8;

 	temp = (ubyte *)(COM_RAM); 
	*temp = 0x0c0;
	
   ack_or_response = ACK;
   send_pkt_to_dsp();

}




/****************************************************************************
 *
 *   Routine:           dnld_patch()
 *
 *   Author:            RSA
 *
 *   Creation Data:     12/8/1996
 *
 *   Description:
 *
 *   Input Parameters:  const uword patch_tbl[]
 *
 *   Output Parameters: Nothing
 *
 *   Global Variables Changed: None
 *
 *   Users:
 *
 *   -----------------------------------------------------------
 *   -                       Modifications                     -
 *   -----------------------------------------------------------
 *
 *   Author & Date:  RSA
 *   Description:
 *   Reason:
 *
 ****************************************************************************/

void voice_dnld_patch(const uword patch_tbl[])
{
   uword length,count,ndx,mem_add,data_val,hi_mcon,lo_mcon;
   ubyte data_tmp1;
		
   data_tmp1 = dsp_peek(0X0013);
   data_tmp1 = data_tmp1 & 0xbfff;     /* set mcon bit 14 to zero */
	dsp_poke(data_tmp1, 0x0013);


   /*
       The patch tables are defined as follows:

           patch_tbl[0] = patch type ????
           patch_tbl[1] = number of 16-bit words to download
           patch_tbl[2] = addr in DSP PMEM to write data (patch_tbl[3]) to
           patch_tbl[3] = data word to write (to patch_tbl[2])
           patch_tbl[4,6,8,...] = repeat patch_tbl[2]
           patch_tbl[5,7,9,...] = repeat patch_tbl[3]
   */

	ndx = 1;
	length = patch_tbl [ndx++];
   ack_or_response = NO_REPLY;       /* No DSP acks during downloads */

	for (count = 1; count <= length; count++)
	{
		mem_add  = patch_tbl [ndx++];
		data_val = patch_tbl [ndx++];

      write_to_dsp( mem_add, data_val );
	}


	data_tmp1 = dsp_peek(0X0013);  
   data_tmp1 = data_tmp1 | 0x4000;     /* set mcon bit 14 to 1 */
   dsp_poke(data_tmp1, 0x0013);


}


uword dsp_peek(uword addr)
{
 ubyte mcon_lo;
 ubyte mcon_hi;
 ubyte pram_addr_lo;
 ubyte pram_addr_hi;
 uword data_byte;

			mcon_lo = 0;  /* should they be 0 all the time? */
			mcon_hi = 0;
			pram_addr_lo = addr & 0x00FF;
			pram_addr_hi = (addr >> 8) & 0x00FF;
		
		 	LOAD_DSP_PROGRAM_MEMORY_READ

			dsp_cp_packet = PACKET_PROGRAM_MEM_READBACK;
		   ack_or_response = RESPONSE;
   		send_pkt_to_dsp();

			data_byte = (dsp_response_data[6] << 8);
			data_byte |= dsp_response_data[7];

			data_byte = (data_byte | 8000); 

         return(data_byte);

}




void write_to_dsp( uword mem_add, uword data_val )
{
   ack_or_response = NO_REPLY;       /* No DSP acks during downloads */

 	current_command [0] = PACKET_DSP_PROGRAM_MEMORY_WRITE;
	current_command [1] = 0x00;
 	current_command [2] = PACKET_DSP_PROGRAM_MEMORY_WRITE_LEN;
 	current_command [3] = 0x00;
 	current_command [4] = mem_add;
 	current_command [5] = (mem_add >> 8);
 	current_command [6] = 0;            /* MCON = 00 */
 	current_command [7] = 0;
 	current_command [8] = data_val;
 	current_command [9] = (data_val >> 8);

 	send_pkt_to_dsp();
}


