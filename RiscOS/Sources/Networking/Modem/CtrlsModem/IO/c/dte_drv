/*******************************************************************************
/
/                          "dte_drv.c"
/
/        CIRRUS LOGIC Inc
/        3100 West Warren Ave
/        Fremont, CA. 94538
/        (510) 623-8300
/
/
/    This document contains material confidential to CIRRUS LOGIC its
/    contents must not be revealed, used or disclosed to anyone or
/    company with out written permission by CIRRUS LOGIC.
/    The information contained herein is solely for the use of CIRRUS LOGIC.
/
/	  This file contains the routines for the serial Uart and parallel 16550.
/
/
/
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/

#include "mod_def.h" /* added by ramn on 2/5/96 */

#include "sys_def.h"
#include "dte_drv.h"
#include "dteequ.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "acuiomem.h"

#ifdef __riscos
ubyte delay_auto_baud_enable = FALSE;
ubyte Parity_e_o;
ubyte parity_enabled;
ubyte eight_seven_bit;

ubyte dte_transmit_empty(void)
{
    return 1;
}

void autobaud_on(void)
{
}

void autobaud_off(void)
{
}

void dte_check_parity_bit(void)
{
    Parity_e_o = 0;
    parity_enabled = FALSE;
}

ubyte modem_control_reg_rts(void)
{
    return 1;
}
#else

#if PARALLEL_MODE == 1

ubyte dte_data_ready(void);
ubyte dte_transmit_empty(void);
ubyte dte_read_char_from_uart(void);
void dte_write_char_to_uart(ubyte);
ubyte modem_control_reg_rts(void);
void dte_cts_off(void);
void dte_cts_on(void);
ubyte fifo_not_full(void);
void time_out_on_fifo(void);
void autobaud_off(void);
void autobaud_on(void);
extern ubyte fax_class;
ubyte uart_fifo_enable = FALSE;

/*mrm3896*/
ubyte Tx_char;
extern void parity(void);
ubyte eight_seven_bit;
ubyte Parity_e_o;
ubyte	parity_enabled;
ubyte delay_auto_baud_enable = FALSE;


/************************************************************************
/
/   Routine: dte_check_parity_bit
/
/   Author: CRUS
/
/   Creation Date:
/
/   Description:
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:
/   Description:
/
************************************************************************/


void dte_check_parity_bit(void)
{
	ubyte *temp,par_check,char_len;


	temp = (ubyte *)(PARALLEL_16550_LOCATION + HLCR);

	par_check = *temp & UART_PARITY_MASK;
	par_check >>= 3;
	 switch (par_check)
	 {


	  	case  1:		Parity_e_o = 0X80;
						parity_enabled = TRUE;
						sr23.acu_parity = SR23_ODD;

						break;

	  	case  3:		Parity_e_o = 0x00;
						parity_enabled = TRUE;
						sr23.acu_parity = SR23_EVEN;

						break;

	  	default:		parity_enabled = FALSE;
						sr23.acu_parity = SR23_SPACE;
	    				break;

	 }


	char_len = *temp & CHAR_LENGHT_MASK;

	 switch	(char_len)
	 {

			case  0:		eight_seven_bit = 0x5;
					  		break;

	  		case  1:		eight_seven_bit = 0x6;
							break;

			case  2:		eight_seven_bit = 0x7;
							break;

	  		case  3:
	  		default:		eight_seven_bit = 0x8;
	    					break;


	  }



}

/************************************************************************
/
/   Routine: dte_transmit_empty
/
/   Author: CRUS
/
/   Creation Date:
/
/   Description:
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:
/   Description:
/
************************************************************************/


ubyte dte_transmit_empty(void)
{
	ubyte *temp,dr_bit;

	temp = (ubyte *)(PARALLEL_16550_LOCATION + HLSR);
	dr_bit = *temp;
	dr_bit &= DATA_READY_MASK;

 return(!dr_bit);

}

/************************************************************************
/
/   Routine: dte_data_ready
/
/   Author: CRUS
/
/   Creation Date:
/
/   Description:
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:
/   Description:
/
************************************************************************/


ubyte dte_data_ready(void)
{
	ubyte *temp,tr_ready;

	temp = (ubyte *)(PARALLEL_16550_LOCATION + HLSR);
	tr_ready = *temp;
	tr_ready &= TRANSMIT_EMPTY_MASK;

 return(!tr_ready);

}
/************************************************************************
/
/   Routine: fifo_not_full
/
/   Author: CRUS
/
/   Creation Date:
/
/   Description:
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:
/   Description:
/
************************************************************************/



ubyte fifo_not_full(void)

{
	ubyte *temp,rx_fifo_not_full,fifo_enable;

	temp = (ubyte *)(PARALLEL_16550_LOCATION + HIIR);
	fifo_enable  = *temp;
	fifo_enable	&= FIFO_ENABLED;

	if(fifo_enable)

	{
	temp = (ubyte *)(PARALLEL_16550_LOCATION + CR550);
	rx_fifo_not_full = *temp;
	rx_fifo_not_full &= RECEIVE_FIFO_NOT_FULL;
	uart_fifo_enable = TRUE;
	return(!rx_fifo_not_full);
	}
	else
	uart_fifo_enable =FALSE;
	return(0);

}
/************************************************************************
/
/   Routine: time_out_on_fifo
/
/   Author: CRUS
/
/   Creation Date:
/
/   Description:
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:
/   Description:
/
************************************************************************/



void time_out_on_fifo(void)
{

	ubyte *temp;

	temp = (ubyte *)(PARALLEL_16550_LOCATION + CR550);
	*temp |=  FIFO_TIME_OUT;
}

/************************************************************************
/
/   Routine: dte_read_char_from_uart
/
/   Author: CRUS
/
/   Creation Date:
/
/   Description:
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:
/   Description:
/
************************************************************************/


ubyte dte_read_char_from_uart(void)
{


	ubyte *temp;

   temp = (ubyte *)(PARALLEL_16550_LOCATION + HTHR);

	return(*temp);

}
/************************************************************************
/
/   Routine: dte_write_char_to_uart
/
/   Author: CRUS
/
/   Creation Date:
/
/   Description:
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:
/   Description:
/
************************************************************************/



void dte_write_char_to_uart(ubyte ch)
{

	ubyte *temp;

	temp = (ubyte *)(PARALLEL_16550_LOCATION + HRHR);

	if (eight_seven_bit == 8)
		*temp = ch;
	else
		*temp = ch & 0x7f;
}
/************************************************************************
/
/   Routine: modem_control_reg_rts
/
/   Author: CRUS
/
/   Creation Date:
/
/   Description:
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:
/   Description:
/
************************************************************************/


ubyte modem_control_reg_rts(void)
{
	ubyte *temp,rts;

	temp = (ubyte *)(PARALLEL_16550_LOCATION + HMCR);
	rts  =  *temp;
	rts &= RTS_BAR_MASK;

 return(rts);
}

/************************************************************************
/
/   Routine: dte_cts_on
/
/   Author: RSA
/
/   Creation Date:   10/28/94
/
/   Description:   This routine will assert CTS to the DTE
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:   dte_rx_suspend, dte_rx_resume
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:   RSA
/   Description:
/
************************************************************************/
void dte_cts_on(void)
{
/*mrm22096*/
/*
 	if ((fax_class == 0) || (fax_class == 8))
	{
*/
		ubyte *temp;
		temp = (ubyte *)(PARALLEL_16550_LOCATION + HMSR);
		*temp |=  CTS_ON;
/*
	}
*/
}

/************************************************************************
/
/   Routine: dte_cts_off
/
/   Author: RSA
/
/   Creation Date:   10/28/94
/
/   Description:   This routine will deassert CTS to the DTE
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:   dte_rx_suspend, dte_rx_resume
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:   RSA
/   Description:
/
************************************************************************/
void dte_cts_off(void)
{

/*mrm22096*/
/*
	if ((fax_class == 0)|| (fax_class == 8))
	{
*/
		ubyte *temp;
		temp = (ubyte *)(PARALLEL_16550_LOCATION + HMSR);
		*temp &=  CTS_OFF;
/*
	}
*/
}



/****************************************************************************
 *
 *   Routine:           autobaud_on()
 *
 *   Author:            CIRRUS
 *
 *   Creation Data:     1/8/1996
 *
 *   Description: Enables Auto Baud for Musket
 *
 *   Input Parameters:  None
 *
 *   Output Parameters: Nothing
 *
 *   Global Variables Changed: None
 *
 *   Users:
 *
 *   -----------------------------------------------------------
 *   -                       Modifications                     -
 *   -----------------------------------------------------------
 *
 *   Author & Date:  RSA
 *   Description:
 *   Reason:
 *
 ****************************************************************************/

void autobaud_on(void)
{

}

/****************************************************************************
 *
 *   Routine:           autobaud_off()
 *
 *   Author:            RSA
 *
 *   Creation Data:     25/4/1995
 *
 *   Description: Disables IRQ5 on the H8
 *
 *   Input Parameters:  None
 *
 *   Output Parameters: Nothing
 *
 *   Global Variables Changed: None
 *
 *   Users:
 *
 *   -----------------------------------------------------------
 *   -                       Modifications                     -
 *   -----------------------------------------------------------
 *
 *   Author & Date:  RSA
 *   Description:
 *   Reason:
 *
 ****************************************************************************/

void autobaud_off(void)
{

/*auto baud bit will trun off automatically */

}

#endif

#if SERIAL_MODE == 1

ubyte dte_data_ready(void);
ubyte dte_transmit_empty(void);
ubyte dte_read_char_from_uart(void);
void dte_write_char_to_uart(ubyte);
ubyte modem_control_reg_rts(void);
void dte_cts_off(void);
void dte_cts_on(void);
void autobaud_off(void);
void autobaud_on(void);

/*mrm41796*/

void time_out_on_fifo(void);
ubyte fifo_not_full(void);


/*mrm31096*/
ubyte Tx_char;
extern void parity(void);
ubyte eight_seven_bit;
ubyte Parity_e_o;
ubyte	parity_enabled;
ubyte match_char = FALSE;
extern void	disable_int(void);
extern void	enable_int(void);
ubyte delay_auto_baud_enable = FALSE;

/************************************************************************
/
/   Routine: dte_transmit_empty
/
/   Author: CRUS
/
/   Creation Date:
/
/   Description:
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:
/   Description:
/
************************************************************************/


ubyte dte_transmit_empty(void)
{
	ubyte *temp,dr_bit;

	temp = (ubyte *)(SERIAL_UART_LOCATION + SLSR);
	dr_bit = *temp;

/* RJM050196 */
/* Make sure the shift register is empty also */
   if(	(dr_bit & TRANSMIT_ALL_EMPTY_MASK) == TRANSMIT_ALL_EMPTY_MASK )
       return(1);
   else
       return(0);
}

/************************************************************************
/
/   Routine:
/
/   Author: CRUS
/
/   Creation Date:
/
/   Description:
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:
/   Description:
/
************************************************************************/


ubyte dte_data_ready(void)
{
	ubyte *temp,tr_ready;

	temp = (ubyte *)(SERIAL_UART_LOCATION + SLSR);
	tr_ready = *temp;
	tr_ready &=	DATA_READY_MASK;

 return(tr_ready);

}


/************************************************************************
/
/   Routine: dte_read_char_from_uart
/
/   Author: CRUS
/
/   Creation Date:
/
/   Description:
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:
/   Description:
/
************************************************************************/


ubyte dte_read_char_from_uart(void)
{


	ubyte *temp;

   temp = (ubyte *)(SERIAL_UART_LOCATION + STHR);

	return(*temp);

}

/************************************************************************
/
/   Routine: dte_write_char_to_uart
/
/   Author: CRUS
/
/   Creation Date:
/
/   Description:
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:
/   Description:
/
************************************************************************/


void dte_write_char_to_uart(ubyte ch)
{

ubyte *temp;

	temp = (ubyte *)(SERIAL_UART_LOCATION + SRHR);
	*temp = ch;
}
/************************************************************************
/
/   Routine: modem_control_reg_rts
/
/   Author: CRUS
/
/   Creation Date:
/
/   Description:
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:
/   Description:
/
************************************************************************/



ubyte modem_control_reg_rts(void)
{
	ubyte *temp,rts;

	temp = (ubyte *)(SERIAL_UART_LOCATION + SECR);
	rts  =  *temp;
	rts &= RTS_BAR_MASK;

 return(rts);
}
/************************************************************************
/
/   Routine: dte_cts_on
/
/   Author: RSA
/
/   Creation Date:   10/28/94
/
/   Description:   This routine will assert CTS to the DTE
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:   dte_rx_suspend, dte_rx_resume
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:   RSA
/   Description:
/
************************************************************************/
void dte_cts_on(void)
{

	ubyte *temp;
	temp = (ubyte *)(SERIAL_UART_LOCATION + SMSR);
	*temp =  CTS_ON;
}

/************************************************************************
/
/   Routine: dte_cts_off
/
/   Author: RSA
/
/   Creation Date:   10/28/94
/
/   Description:   This routine will deassert CTS to the DTE
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:   dte_rx_suspend, dte_rx_resume
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:   RSA
/   Description:
/
************************************************************************/
void dte_cts_off(void)
{

	ubyte *temp;
	temp = (ubyte *)(SERIAL_UART_LOCATION + SMSR);
	*temp =  CTS_OFF;
}



/****************************************************************************
 *
 *   Routine:           autobaud_on()
 *
 *   Author:            CIRRUS
 *
 *   Creation Data:     1/8/1996
 *
 *   Description: Enables Auto Baud for Musket
 *
 *   Input Parameters:  None
 *
 *   Output Parameters: Nothing
 *
 *   Global Variables Changed: None
 *
 *   Users:
 *
 *   -----------------------------------------------------------
 *   -                       Modifications                     -
 *   -----------------------------------------------------------
 *
 *   Author & Date:  RSA
 *   Description:
 *   Reason:
 *
 ****************************************************************************/

#define AUTO_BAUD_TIMEOUT 120000;

void autobaud_on(void)
{


	ubyte *temp;
	ulong auto_baud_timer;

   /* VCV will reset  dte_mode when transfer is complete */
   if( dte_mode == VCV )
      return;




/*mrm5896*/

/* changed the autobaud routine to fix a hardware problem.
The problem happened occured when sending lots of char. during autobaud
enable
The s/w timer delay is long enough to prevent the dte lockup from 115200
to 1200 bps
*/


	if (delay_auto_baud_enable == TRUE)
 	{
	delay_auto_baud_enable = FALSE;
   auto_baud_timer = AUTO_BAUD_TIMEOUT;


	temp = (ubyte *)(SERIAL_UART_LOCATION + SECR);
	 *temp = 00;

   while ( auto_baud_timer )
   {
	  auto_baud_timer --;

   }


	temp = (ubyte *)(SERIAL_UART_LOCATION + SECR);

	*temp |=  AUTO_BAUD_ENABLE;

	temp = (ubyte *)(SERIAL_UART_LOCATION + SECR);

	*temp =  0;


	}

	temp = (ubyte *)(SERIAL_UART_LOCATION + SECR);

	*temp |=  AUTO_BAUD_ENABLE;

}

/****************************************************************************
 *
 *   Routine:           autobaud_off()
 *
 *   Author:            RSA
 *
 *   Creation Data:     25/4/1995
 *
 *   Description: Disables IRQ5 on the H8
 *
 *   Input Parameters:  None
 *
 *   Output Parameters: Nothing
 *
 *   Global Variables Changed: None
 *
 *   Users:
 *
 *   -----------------------------------------------------------
 *   -                       Modifications                     -
 *   -----------------------------------------------------------
 *
 *   Author & Date:  RSA
 *   Description:
 *   Reason:
 *
 ****************************************************************************/

void autobaud_off(void)
{

/*mrm52296*/
/*disable the autobaud*/

	ubyte *temp;
	temp = (ubyte *)(SERIAL_UART_LOCATION + SECR);
	*temp &=  AUTO_BAUD_DISABLE;

}


/************************************************************************
/
/   Routine: dte_check_parity_bit
/
/   Author: CRUS
/
/   Creation Date:
/
/   Description:
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:
/   Description:
/
************************************************************************/


void dte_check_parity_bit(void)
{

		Parity_e_o = 0;
		parity_enabled = FALSE;


}

/************************************************************************
/
/   Routine: fifo_not_full
/
/   Author: CRUS
/
/   Creation Date:
/
/   Description:
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:
/   Description:
/
************************************************************************/



ubyte fifo_not_full(void)

{

/*no fifo in serial mode*/
	return(0);

}
/************************************************************************
/
/   Routine: time_out_on_fifo
/
/   Author: CRUS
/
/   Creation Date:
/
/   Description:
/
/   Input Parameters: None
/
/   Output Parameters: None

/
/   Global Variables Changed:  None
/
/   Users:
/
/   *************************************************************
/   *         Modifications             *
/   *************************************************************
/
/   Author & Date:
/   Description:
/
************************************************************************/



void time_out_on_fifo(void)
{

/*no fifo in serial mode*/

}


#endif

#endif
