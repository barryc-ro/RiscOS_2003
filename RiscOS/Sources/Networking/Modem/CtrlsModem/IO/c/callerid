/* caller ID code, 2-26-96 */

#include    "callerid.h"
#include    "sys_def.h"
#include    "acu_def.h"
#include    "iohw_equ.h"  /* for dsp_cp_data_length on so on */
#include    "mt_macro.h"

ubyte  cid_state, cid_result, cidbuf_ptr;

extern ubyte  date[8], time[8], nmbr[16], name[16], mesg[80];

extern   ubyte s[];
extern   ubyte    cidbuf[];

extern ubyte ack_or_response;
extern ubyte state;
extern ubyte voice_caller_id;
extern ubyte dsp_timer;

extern ubyte current_command[];

/*final byte is crc */
extern void dspdrv_ReadCram(int, ubyte *, int);
extern void dspdrv_WriteCram(int, ubyte *, int);

extern  void  send_pkt_to_dsp(void);
extern ubyte line_io_enabled;

void   set_callerid_relay(uword status);
void   set_dsp_cid(ubyte);
void   init_cid(void);

ubyte  get_cid_data(ubyte buf[]);
ubyte  check_cid_crc(ubyte *buf);
ubyte  callerid_msg_seg(ubyte *buf);
ubyte  hex_display(ubyte *buf);

/*MRM8896*/

ubyte  caller_id_end =0;

void  set_callerid_relay(uword status)
{
    uword *gpio;


    gpio = (uword *) GPR0 ;   
   *gpio = CID_MASK_BIT | status;  

/* config CID bit as input for prevent misoperation from other codes*/
}

/* segment CID info in the buffer,      
   SDMF: Single  Data Message Format;
   MDMF: Mutiple Data Message Format;
   sent the info to DTE, formatted reporting or unformatted reporting
*/

ubyte callerid_msg_seg(ubyte buf[])
{
   ubyte  totallen=0, typelen=0, type=0;
   ubyte i=0, j=0;

   switch(voice_caller_id)            /*see ar+vcid=?, saved in s32 bit6,7 ? */
   {
      case 0:
        cid_result = OK;
        break;      /* don't implement caller id */
          
      case 1:                         /* formatted reporting, check crc */

        if( check_cid_crc(buf) == CID_ERROR)       /* CID Checksum CID_ERROR */
              {  cid_result=CID_ERROR;   break;  }
/* checksum ok */
        i=0;
        if(buf[i] == 0x80 )  /* MDMF */
        {  i++;
           totallen = buf[i];
           i++;
           for( ;i<totallen; )
           {
              type = buf[i];  i++;
              typelen  = buf[i];  i++;

             switch(type)
             {
               case 1:
                  if( typelen==8 )
                  {
                     for(j=0; j<4; j++)
                             date[j] = buf[j+i];
                     date[j]=0;                       /* as terminator */
                     i = i+j; 
                     for(j=0; j<4; j++)
                              time[j] = buf[j+i];
                     time[j]=0;
                     i = i+j;       
                     break;
                  }    
                  else   return(CID_ERROR);

               case 2:
                  if( typelen<=15 )
                  {
                     for(j=0; j<typelen; j++)
                         nmbr[j] = buf[j+i];
                     nmbr[j] = 0;
                     i = i+j;       
                     break;
                  }  
                  else if(typelen==0)  break;     
                  else   return(CID_ERROR);

               case 4:
                  if( typelen<=15 )
                  {
                     for(j=0; j<typelen; j++)
                         nmbr[j] = buf[j+i];
                     nmbr[j] = 0;
                     i = i+j;       
                     break;
                  }      
                  else   return(CID_ERROR);

               case 7:
                  if( typelen<=15 )
                  {
                     for(j=0; j<typelen; j++)
                         name[j] = buf[j+i];
                     name[j] = 0;
                     i = i+j;       
                     break;
                  }
                  else   return(CID_ERROR);


                  default:
                     if( typelen<=32 )
                     {
                         for(j=0; j<typelen; j++)
                             mesg[j] = buf[j+i];
                         mesg[j] = 0;
                         return(OK);
                     }
                     else   return(CID_ERROR);

               }       /* switch type */
           }      /* for(; i<=totallen ;) */

           cid_result = OK;
           break;        /* to return */

       }  
       else if (buf[i] == 4 ) /*buf[0] SDMF */
       {
            totallen = buf[1];
            i=2; 

            for(j=0; j<4; j++)
                date[j] = buf[j+i];
            date[j] = 0;
            i = i+j;       

            for(j=0; j<4; j++)
                time[j] = buf[j+i];
            time[j] = 0;
            i = i+j;       

            if(buf[i] == 'P' || buf[i]=='O')
            {
                nmbr[0]=buf[i];
                nmbr[1] = 0;
                i++;
            }   
            else 
            {
                for(j=0; j<10; j++)
                    nmbr[j] = buf[j+i];
                nmbr[j] = 0;       
                i = i+j;       
            }

/* SDMF has no name or mesg message */      
            if( i < totallen )
            {
               for(j=0; j<15 && i<totallen; j++)
                   name[j] = buf[j+i];
               name[j] = 0;
               i = i+j;       
            }
            else ;

            cid_result = OK;
            break;
       }
       else { cid_result=CID_ERROR;  break; } 

       case 2:                /* unformatted reporting, don't check crc */
           cid_result = hex_display(buf);
           break;

      default:                                /* should not come to here */
          cid_result = CID_ERROR; 
          break;
   }  
   return (cid_result);      
} /* end */      
                                                



/* ramn 7/9/96 */
extern ubyte dsp_cp(void);
extern ubyte dsp_cp_packet;
extern ubyte fax_class;

void  set_dsp_cid(ubyte flag)
{
	ubyte ch;	/* ramn 7/9/96 */

       state = flag;

/* to fix the bug which block next callerid info come */

/*MRM8896*/

	if (flag == 1)
  		caller_id_end =0;


/* do dummy read of voice call progress packet so that the semaphore is cleared */
	if(fax_class == 8)		/* ramn 7/9/96 */
	{
		dsp_cp_packet = 0xC4;          
		ch = dsp_cp();
	}

	LOAD_MODEM_CID
	ack_or_response = ACK;
	send_pkt_to_dsp();     
}

ubyte check_cid_crc (ubyte* buf)
{
    ubyte i, byte, mesglen;

    i=0;
    byte=0;
    mesglen = buf[1];
    
    while( i<BUFLEN && i<=mesglen+2)  /* len + type, len and crc bytes */
    {
       byte +=buf[i];
       i++;
    }

    if( byte== 0)   return(OK);
    else  return(CID_ERROR);
}


/* move cid data from comram to cidbuf */
ubyte  get_cid_data(ubyte buf[])
{
     ubyte length_and_status;

     switch( cid_state )      /* init as 0 */
     {
/* dsp has no cid data at all */
       case 0:
         dspdrv_ReadCram(DSP_CP_DATA_LENGTH, &length_and_status, 1);
           
         if(length_and_status == 0)    
         {
            cid_state = 3;
            return(NO_CID_INFO);
         }
         else
         {
           dspdrv_ReadCram(DSP_CP_DATA_AREA_BASE, buf, length_and_status);
           cidbuf_ptr = length_and_status;

           cid_state =1;
           length_and_status=0;
           dspdrv_WriteCram(DSP_CP_DATA_LENGTH, &length_and_status, 1);
           dspdrv_WriteCram(DSP_CP_DATA_STATUS, &length_and_status, 1);
           return(OK);
         }
/* dsp has data to read */
       case 1: 
           dspdrv_ReadCram(DSP_CP_DATA_LENGTH, &length_and_status, 1);

           if(length_and_status ==0)
           {
              cid_state = 3;
              return(OK); 
           }
           else 
           {
              if(cidbuf_ptr > BUFLEN)
              {
                 cid_state =3;
                 return(CID_ERROR);
              }
              dspdrv_ReadCram(DSP_CP_DATA_AREA_BASE, (buf+cidbuf_ptr),
                           length_and_status);
              cidbuf_ptr += length_and_status;

              cid_state =1;
              
              length_and_status=0;
              dspdrv_WriteCram(DSP_CP_DATA_LENGTH, &length_and_status, 1);
              dspdrv_WriteCram(DSP_CP_DATA_STATUS, &length_and_status, 1);

              return(OK);
           }
        
       case 2:
         cid_state = 2;
         return(CID_ERROR);
/* cid data in dsp has been read to the end */
       default:
         return (cid_result);
     }
}


void init_cid()
{ 
   date[0]=0;
   time[0]=0;
   nmbr[0]=0;
   name[0]=0;
   mesg[0]=0;
   cid_state=0;
   cid_result=NO_CID_INFO;
}

ubyte hex_display(ubyte *buf)
{
  ubyte len, i,j;

  j=0; i=0;
  len = buf[1];      
            
  if(len <= BUFLEN) 
  {
     for( ; i < len+2 ; ) /*not include crc byte */
     {
         mesg[j]= ( buf[i] & 0xf0) >> 4;  /* high nipple */
         if(mesg[j] < 10)  mesg[j]= mesg[j]+ 48;
         else  mesg[j] = mesg[j] + 55;   /* for  A B C D E F */

         j++;

         mesg[j]= buf[i] & 0x0f;        /* low  nipple */
         if(mesg[j] < 10)  mesg[j]= mesg[j]+ 48;
         else  mesg[j] = mesg[j] + 55;   /* for  A B C D E F */

         j++; i++;
     }
     mesg[j]= 0;
     return(OK);
  }
  else  return(CID_ERROR);
}
