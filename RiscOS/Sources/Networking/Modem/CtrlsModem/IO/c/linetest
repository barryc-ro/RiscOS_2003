/****************************************************************************
/
/    Copyright, 1988 - 1991.     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/
/    This document contains material confidential to RSA its contents must
/    not be revealed, used or disclosed to anyone or company with out
/    written permission by RSA.  The information contained herein is solely
/    for the use of RSA.
/
/    File:          linematc.c
/
/    Version:  1.0
/
/    Function:      This file contains the DCE I/O routines specific to the
/              speed matching protocol.
/
/    Product:  CP Line I/O for Merlin DSP
/
/    Platform: First Flight -- Merlin/Cutlass DSP
/
/    History:       developed from LINELMATC.C
/
/    Created:  October 25, 1994
/
/    ---------------------------------------------------------
/    -              Modifications            -
/    ---------------------------------------------------------
/
/    Author & Date: RSA
/    Description:
/
*****************************************************************************/

#include "sys_def.h"
#include "lineequ.h"            /* line constant defs */
#include "lineedf.h"            /* line external variable defs */
#include "iohw_equ.h"           /* first flight hardware defs */
#include "linelink.h"           /* linelink.c prototypes */
#include "dsp_drv.h"            /* first flight dsp drivers */
#include "cp_dsp.h"
/* Will be changed later */
#include "mt_codef.h"



/************************** local procedures *******************************/
void spd_match_tx_test_int(void);
void spd_match_rx_test_int(void);


extern void dspdrv_WriteCram(int addr, ubyte *, int len);

extern void dspdrv_ReadCram(int addr, ubyte *, int len);

extern ubyte *dce_to_block_pointer(void);
extern void dce_to_block_update(ubyte);
extern void dspdrv_ReadCram_buffer(int addr, ubyte *data, int len);
void dce_line_rx_test_int(void);
void dce_line_tx_test_int(void);


void dce_line_rx_test_int(void)
{

     ubyte length_semaphore;
     ubyte status_semaphore;

     dspdrv_ReadCram(DSP_CP_DATA_LENGTH, &length_semaphore,1);
     dspdrv_ReadCram(DSP_CP_DATA_STATUS, &status_semaphore,1);

   if ((length_semaphore != 0) || (status_semaphore !=0))

          spd_match_rx_test_int();

}

void dce_line_tx_test_int(void)
{
     ubyte length_semaphore;

     dspdrv_ReadCram(0x1d0 * WORD_OR_BYTE_ADD_INC, &length_semaphore,1);

        if (length_semaphore == 0)
             spd_match_tx_test_int();



}



/******************************************************************************
/
/    Routine: spd_match_tx_int
/
/    Author: RSA
/
/    Creation Date: October 25, 1994
/
/    Description:   This routine will handles the SCC special interrupts
/         durring the speed matching protocol.
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed:  dce_tx_interrupt_expected, dce_tx_buffer,
/                        dce_tx_remove, dce_tx_count
/
/    Users:    line_tx_int
/
/    *************************************************************
/    *              Modifications                *
/    *************************************************************
/
/    Author & Date: RSA
/    Description:
/
*****************************************************************************/
void spd_match_tx_test_int(void)
{
     ubyte status; /* status byte of data area semaphore to write */
     ubyte data_count;  /* count of number of data bytes to send to Comm RAM */
     /*mrm81695*/
     /*uword size*/
     /*ubyte address;*/ /* address of Comm RAM to write data to */

     uword address;

/*   If we're waiting on a buffered break & it's arrived, start the break */

     if (dce_tx_count == 0)
          return;

     dce_tx_interrupt_expected = TRUE;

     /* init variables */
     address = CP_DSP_DATA_AREA_BASE;
     data_count = 0;

     while (dce_tx_count && (data_count < DATA_AREA_SIZE))
     {
          if (dce_tx_break_pending == TRUE && dce_tx_remove == dce_tx_break_psn)
               break;

          dspdrv_WriteCram(address, &dce_tx_buffer[dce_tx_remove], 1);

          /* update indexes */
          /*mrm83095*/
          /*word boundry in the arm610 */
          /*
          address ++;
          */
          address+=4;
          data_count++;
          dce_tx_count--;
          dce_tx_remove++;
/*        Reset buffer ptr ? */
          if (dce_tx_remove == DCE_BUFFER_SIZE)
               dce_tx_remove = 0;
     }

     /* set semaphore, status then length */
     status = NO_STATUS;
     dspdrv_WriteCram(CP_DSP_DATA_STATUS, &status, 1);
     dspdrv_WriteCram(CP_DSP_DATA_LENGTH, &data_count, 1);

     return;

}/* procedure */




/******************************************************************************
/
/    Routine: spd_match_rx_int
/
/    Author: RSA
/
/    Creation Date: October 25, 1994
/
/    Description:   This routine will handles the SCC RX READY interrupts
/         durring the speed matching protocol.
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed:
/
/    Users:    line_rx_int
/
/    *************************************************************
/    *              Modifications                *
/    *************************************************************
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*****************************************************************************/
void spd_match_rx_test_int(void)
{
     ubyte status; /* status byte of data area semaphore to write */
     ubyte length; /* length data packet rx'd from Comm RAM */
     /*ubyte data_packet[DATA_AREA_SIZE];*/ /* Comm RAM data area */
     /*ubyte data_count;*/  /* counter for data packet */
     ubyte do_not_buffer, clear; /* flag, for pass thru flow control */
     ubyte *temp;

          temp = dce_to_block_pointer();

          line_get_data_buffer(temp, & length, & status);

          dce_to_block_update(length);


} /* procedure */
