/****************************************************************************
/
/   Copyright 1988, 1989, 1990, 1991, 1992, 1993, 1994.  All Rights 
/   Reserved by: 
/   RSA 
/   7701 Six Forks Road 
/   Suite 120 
/   Raleigh, NC  27615 
/   (919) 846-7171 
/
/   This document contains material confidential to RSA. Its contents 
/   must not be revealed, used or disclosed to anyone or company without 
/   written permission by RSA. The information contained herein is solely 
/   for the use of RSA. 
/
/   File:                sleep.c
/
/   Module Version: 
/
/   Function: 
/
/   Product: 
/
/   -----------------------------------------------------------
/   -                       Modifications                     -
/   -----------------------------------------------------------
/
/   Author & Date:     RSA 
/   Description: 
/   Reason: 
/
****************************************************************************/

#include "sys_def.h"
#include "acu_pro.h"
#include "acu_def.h"
#include "acu_mem.h"

/* Internal routines */
void  sleep_event(ubyte);
void  process_sleep_timer(void);
extern void SetDSPReset(ubyte);

/* 05/01/96 shd, */
#include "..\acu\sleep_if.h"
ubyte     sleep_timer_val;
ubyte     dsp_sleep = 0;
extern    ubyte s[];
extern uword dsp_stop[8];
extern void dnld_spkr_phn_code(uword *);	
extern ubyte spkr_phn_dnl;
extern uword dsp_start[8];

extern void modem_init(void);
extern void dsp_reset(ubyte); /* ramn 3/20/96 */
extern void dsp_cfg(ubyte);
extern void dsppatch(void);
extern void goto_sleep_and_wakeup(void);	/* ramn 7/29/96 */




#define UPLD_DNLD_ADDR_LOW 			0xf8	/* ramn 3/20/96 */
#define UPLD_DNLD_ADDR_HIGH 			0xf9
#define UPLD_DNLD_DATA_REGIS			0xfa
#define CP_CONTROL_REGISTER 			0xfc
#define INTERNAL_RST_VECTOR			0x800

extern void	wakeup_from_sleep_in_voice(void);	/* ramn 12/3/96 */


/*******************************************************************************
/
/   Routine:           sleep_event
/
/   Author:            RSA
/
/   Creation Date:     08/2/95
/
/   Description:       This Routine is called to force a Sleep event.
/
/   Input Parameters:  sleepEvent -
/                              0x00 - S_MODE_CHNG_PSTN_MODEM
/                              0x01 - S_MODE_CHNG_PSTN_PHONE
/                              0x02 - S_MODE_CHNG_WIRELESS_MODEM
/                              0x03 - S_MODE_CHNG_WIRELESS_PHONE
/                              0x04 - S_DONT_SLEEP
/                              0x05 - S_GOTO_SLEEP
/                              0x06 - S_WAKE_UP
/
/   Output Parameters: None
/
/   Global Variables Changed:
/
/   Users:
/
/   -------------------------------------------------------------
/   -                      Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: RSA
/   Description:
/   Reason:
/
*******************************************************************************/
void sleep_event(ubyte sleepEvent)
{
   sleepEvent = sleepEvent;
}


/*******************************************************************************
/
/   Routine:           process_sleep_timer
/
/   Author:            RSA
/
/   Creation Date:     08/2/95
/
/   Description:       This Routine is called every second to driver the
/                      time to Sleep Mode.
/
/   Input Parameters:  None
/
/   Output Parameters: None
/
/   Global Variables Changed:  sleep_timer_val
/
/   Users:                     ac00lib4.c
/
/   -------------------------------------------------------------
/   -                      Modifications                       -
/   -------------------------------------------------------------
/
/   Author & Date: CIRRUS LOGIC, 05/01/96
/   Description:
/   Reason:
/
*******************************************************************************/

extern void output_info(ubyte *, ubyte);
extern ubyte *d_to_a(ubyte);
extern void wait_a_while(void);
extern uword pwr_on_patch[500];


/* 05/01/96 shd, to implement sleep mode */
void process_sleep_timer(void)
{
   ubyte *reg_addr;
	ubyte *string,j,*temp;
	uword temp1;

   
/* s[33]=0 means sleep ft is disabled */

   if( s[33] == 0) 
		return;              
   else  if( s[33] <= sleep_timer_val )
   {

#if 0
      while (acu_from_num());
      while (!check_all_sent());
#endif

		if(!dsp_sleep)
		{
/*		   string = d_to_a(5);
    		output_info(string,1);
*/

			dsp_sleep = 1;
			spkr_phn_dnl = 2;
			dnld_spkr_phn_code(dsp_stop);
  
/*		   string = d_to_a(7);
    		output_info(string,1);
*/

		}

#if 0
/* for new musket sleep mode bug 
*/
      reg_addr   = (ubyte *) LPRAMEN;
      *reg_addr = 0x00;          

/* set MCLK and timer bits to sleep musket as well as cutlass */ 
      reg_addr  = (ubyte *) POWER_MANAG_REG;
      *reg_addr = 0x03;            

/* now both musket and cutlass are asleep */

/* here, musket have been waked up automatically,*/

/* for new musket sleep mode bug 
*/

		dsp_reset(ON);	/* set dsp_reset and dsp_cfg to 1 */	

      reg_addr  = (ubyte *) LPRAMEN;
      reg_addr  = (ubyte *) LPRAMEN;
      *reg_addr = 0x01;

      sleep_timer_val = 0;       /* init the variable */

      reg_addr  = (ubyte *) POWER_MANAG_REG;
      *reg_addr = 0x00;     /* timer bit must be reset */            
      sleep_timer_val = 0;       /* init the variable */

#endif


/* 
	this is an assembly routine that will put musket to sleep and wake it up
	ramn 7/29/96 
*/		
      sleep_timer_val = 0;       /* init the variable */
	  	goto_sleep_and_wakeup();	 
      sleep_timer_val = 0;       /* init the variable */

		dial_timer = 250; 	/* was 250 ms */
		while(dial_timer)
		{
			process_wait();
		}		
		if (dsp_sleep)			/* ramn 7/25/96 */
		{
		  	dsppatch();
			if(fax_class == 8)	/* ramn 12/3/96 */
			{
				wakeup_from_sleep_in_voice();		
			}
			else
			{
				modem_init();
			}
			dsp_sleep = 0;
		}


#if 0
      reg_addr  = (ubyte *) GPR2;
      *reg_addr = 0x22;          /* DSP reset bit, high active */

/* following codes are for reset holding */
      sleep_timer_val = 0;       /* init the variable */
      sleep_timer_val = 0;       /* init the variable */
      sleep_timer_val = 0;       /* init the variable */

      *reg_addr = 0x20;          /* DSP reset release */
#endif

   }
	else
	   sleep_timer_val++;
}





                            
