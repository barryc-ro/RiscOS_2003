/****************************************************************************
/
/   Copyright 1988, 1989, 1990, 1991, 1992, 1993, 1994.  All Rights
/   Reserved by:
/   RSA
/   7701 Six Forks Road
/   Suite 120
/   Raleigh, NC  27615
/   (919) 846-7171
/
/   This document contains material confidential to RSA. Its contents
/   must not be revealed, used or disclosed to anyone or company without
/   written permission by RSA. The information contained herein is solely
/   for the use of RSA.
/
/   File:                dte_v80.c
/
/   Module Version:
/
/   Function:
/
/   Product:
/
/   -----------------------------------------------------------
/   -                       Modifications                     -
/   -----------------------------------------------------------
/
/   Author & Date:     RSA
/   Description:
/   Reason:
/
****************************************************************************/

#include "sys_def.h"
#include "acuiomem.h"
#include "acu_def.h"
#include "acu_mem.h"
#include "dteequ.h"
#include "edf.dte"
#include "v80_pro.h"

extern void enable_int(void);
extern void disable_int(void);

ubyte dte_flag_count;

#if (FCLASS_80 == 1)

/************************************************************************
/
/  Routine:          v80_dte_init
/
/  Author:           RSA
/
/  Creation Date:    08/14/96
/
/  Description:      This routine initializes the DTE IO code
/                    for V.80 operation.
/
/  Input Parameters: None
/
/  Output Parameters: None
/
/  Global Variables Changed:
/
/  Users:
/
/  -------------------------------
/  -        Modifications        -
/  -------------------------------
/
/  Author & Date: RSA
/  Description:
/  Reason:
/
************************************************************************/
void v80_dte_init(ubyte in_baud_rate,ubyte in_dte_to_modem_flow_cntl,
                  ubyte in_modem_to_dte_flow_cntl )
{
   disable_int();

PrintMsg( "v80_dte_init()" );
#if 1
   dte_mode = DTE_V80_SAM;
#else
   dte_mode = DTE;                     /* this doesn't quite work */
#endif
   dte_sub_mode = TRANSPARENT_SUB_MODE;
   dte_v80_rx_state = V80_RX_START;

   /* S/W flow control chars */
   modem_to_dte_xoff_char = XOFF_CHAR;
   dte_to_modem_xoff_char = XOFF_CHAR;
   modem_to_dte_xon_char = XON_CHAR;
   dte_to_modem_xon_char = XON_CHAR;

   modem_to_dte_flow_cntl = in_modem_to_dte_flow_cntl;
   dte_to_modem_flow_cntl = in_dte_to_modem_flow_cntl;

   /* Init status vars */
   rx_suspended = FALSE;
   rx_suspend_pending = FALSE;
   rx_resume_pending = FALSE;
   dte_tx_interrupt_expected = FALSE;
   dte_tx_suspended_by_terminal= FALSE;
   tx_suspended_for_break = FALSE;
   dte_tx_underrun = FALSE;
   dte_tx_overrun = FALSE;

   dte_flag_count = 0;

   dte_port_init();

#if 0
   /* Run DTE in Polled mode */
	install_poll_dte_interrupt();
#endif


   enable_int();
}


/************************************************************************
/
/  Routine:          dte_conf_ITF_flow
/
/  Author:           RSA
/
/  Creation Date:    08/14/96
/
/  Description:      Sets new XON and XOFF buffer threshold values.
/                    This values are set by the +ITF command.
/
/  Input Parameters:
/
/     uword xoff_value:
/        0x0000 - 0xFFFF
/
/     uword xon_value:
/        0x0000 - 0xFFFF
/
/  Output Parameters: None
/
/  Global Variables Changed: None
/
/  Users:
/
/  ----------------------------
/  -       Modificatons       -
/  ----------------------------
/
/  Author & Date:
/  Descrition:
/  Reason:
/
*************************************************************************/
void dte_conf_ITF_flow(uword xoff_value,uword xon_value)
{
   dte_xoff_threshold = xoff_value;
   dte_xon_threshold = xon_value;
}

/************************************************************************
/
/  Routine:          dte_process_unum
/
/  Author:           RSA
/
/  Creation Date:    08/14/96
/
/  Description:      Used to immediately indicate that a transmit
/                    underrun occurred in the DCE I/O while during
/                    V.80 Framed Sub-Mode in mid-frame.
/
/  Input Parameters: ubyte character
/
/  Output Parameters: None
/
/  Global Variables Changed: None
/
/  Users:
/
/  ----------------------------
/  -       Modificatons       -
/  ----------------------------
/
/  Author & Date:
/  Descrition:
/  Reason:
/
*************************************************************************/
void dte_process_unum(void)
{

#if 1
   outchar( '-');
/*
   outchar(dte_tx_count);
   outchar(dte_tx_unum_pending);
   outchar(dte_tx_underrun);
*/

#endif

#if 1
   /* if no data to transmit, send <EM><UNDER> code now */
/*   if ((dte_tx_count == 0) && (last_pc_tx_byte != EM_CODE) && */
   if ((last_pc_tx_byte != EM_CODE) &&
       (dte_tx_underrun == FALSE) && (dte_tx_unum_pending == FALSE))
   {
PrintMsg( "dpu!" );

      /* transmit the <EM><UNDER> code now */
      dte_to_char(EM_CODE);
      dte_to_char(UNDER_CODE);
      discard_byte_count = 0;
      dte_tx_underrun = TRUE;
   }
   else if ((dte_tx_underrun == FALSE) && (dte_tx_unum_pending == FALSE))
   {
PrintMsg( "dpu-" );

      discard_byte_count = 0;
      dte_tx_underrun = TRUE;
      dte_tunder_pending = TRUE;
   }
   else
PrintMsg( "dpu?" );

#endif
}

/************************************************************************
/
/  Routine:          dte_sub_mode
/
/  Author:           RSA
/
/  Creation Date:    08/18/96
/
/  Description:      Used to notify the DTE I/O of the current
/                    V.80 SAM Sub-Mode.  This is necessary to know
/                    what action to take upon TX_OVERRUN.
/
/  Input Parameters: ubyte character
/
/  Output Parameters: None
/
/  Global Variables Changed: None
/
/  Users:
/
/  ----------------------------
/  -       Modificatons       -
/  ----------------------------
/
/  Author & Date:
/  Descrition:
/  Reason:
/
*************************************************************************/
void dte_set_sub_mode(ubyte sub_mode)
{
   dte_sub_mode = sub_mode;
}


/************************************************************************
/
/  Routine:          dte_v80_configure
/
/  Author:           RSA
/
/  Creation Date:    08/18/96
/
/  Description:      Used to notify the DTE I/O of the current
/                    +ESA command settings.  This is necessary to
/                    know what action to take upon TX_OVERRUN.
/
/  Input Parameters: ubyte character
/
/  Output Parameters: None
/
/  Global Variables Changed: None
/
/  Users:
/
/  ----------------------------
/  -       Modificatons       -
/  ----------------------------
/
/  Author & Date:
/  Descrition:
/  Reason:
/
*************************************************************************/
void dte_v80_configure(ubyte framed_un_ov)
{
   dte_framed_un_ov = framed_un_ov;
}


/************************************************************************
/
/  Routine:          dte_v80_rx
/
/  Author:           RSA
/
/  Creation Date:    08/14/96
/
/  Description:      Uses the passed character to update the
/                    DTE V80 state machine.
/
/  Input Parameters: ubyte character
/
/  Output Parameters: None
/
/  Global Variables Changed: None
/
/  Users:
/
/  ----------------------------
/  -       Modificatons       -
/  ----------------------------
/
/  Author & Date:
/  Descrition:
/  Reason:
/
*************************************************************************/
void dte_v80_rx(ubyte ch)
{

#if 0
   outchar(ch);
#endif


#if 1
   switch (dte_v80_rx_state)
   {
      case V80_RX_START:
      default:
         if (ch == EM_CODE)
         {
            /* goto next state and do not store the byte */
            dte_v80_rx_state = V80_RX_FOUND_EM;
         }
         else
         {
            /* store the received byte */
            if ((dte_tx_overrun || dte_tx_underrun) && (dte_mode != ACU))
            {
if (dte_tx_overrun)
   PrintMsg( "dte_tx_overrun" );
if (dte_tx_underrun)
   PrintMsg( "TU" );

               /* increment the UNUM discard count */
               discard_byte_count++;
            }
            else
            {
               dte_rx_buffer[dte_rx_insert++] = ch;
               dte_rx_insert &= BUFFER_POINTER_MASK;
               dte_rx_count++;
            }
         }
         break;

      case V80_RX_FOUND_EM:
         switch (ch)
         {
            case FLAG_CODE:
               dte_flag_count++; /* Fall through */
#if 0
outchar('!');
outchar(dte_flag_count);
#endif

#if 0
/* outchar('!'); */
outchar(dte_flag_count);
#endif


            default:
               if ((dte_tx_overrun || dte_tx_underrun) && (dte_mode != ACU))
               {
if (dte_tx_overrun)
PrintMsg( "dte_tx_overrun1" );
if (dte_tx_underrun)
PrintMsg( "dte_tx_underrun1" );

                  /* increment the UNUM discard count by two */
                  discard_byte_count += 2;
               }
               else
               {
#if 0
outchar(';');
#endif
                  dte_rx_buffer[dte_rx_insert++] = EM_CODE;
                  dte_rx_insert &= BUFFER_POINTER_MASK;
                  dte_rx_count++;
                  dte_rx_buffer[dte_rx_insert++] = ch;
                  dte_rx_insert &= BUFFER_POINTER_MASK;
                  dte_rx_count++;
               }
               break;
            case RESUME_CODE:
               /* clear all flags after resume detected */
#if 0
outchar(';');
#endif
               dte_tx_overrun = FALSE;
               dte_tover_pending = FALSE;
               dte_tx_underrun = FALSE;
               dte_tunder_pending = FALSE;

/* START CHANGE - 09/03/96 - mlc */
               /* pass the <EM><RESUME> code to the V.80 Module */
               dte_rx_buffer[dte_rx_insert++] = EM_CODE;
               dte_rx_insert &= BUFFER_POINTER_MASK;
               dte_rx_count++;
               dte_rx_buffer[dte_rx_insert++] = RESUME_CODE;
               dte_rx_insert &= BUFFER_POINTER_MASK;
               dte_rx_count++;
/* END CHANGE - 09/03/96 - mlc */

               if ((dte_tx_count == 0) && (last_pc_tx_byte != EM_CODE))
               {
PrintMsg( "dte_process_unum_now1" );
                  dte_to_char(EM_CODE);
                  dte_to_char(UNUM_CODE);
                  dte_to_char((ubyte)(discard_byte_count<<1 & 0x00FE) );
                  dte_to_char((ubyte)((discard_byte_count>>7) & 0x00FE));
                  discard_byte_count = 0;
               }
               else
               {
                  dte_tx_unum_pending = TRUE;
               }
               break;

         }
         dte_v80_rx_state = V80_RX_START;
         break;
   }
#endif
}

/************************************************************************
/
/  Routine:          dte_v80_tx
/
/  Author:           RSA
/
/  Creation Date:    08/14/96
/
/  Description:      Inserts <EM> character code in-band with the
/                    DTE I/O transmit data.
/
/  Input Parameters: ubyte character
/
/  Output Parameters: None
/
/  Global Variables Changed: None
/
/  Users:
/
/  ----------------------------
/  -       Modificatons       -
/  ----------------------------
/
/  Author & Date:
/  Descrition:
/  Reason:
/
*************************************************************************/
void dte_v80_tx(void)
{
#if 1
   if ((dte_tover_pending == TRUE) && (last_pc_tx_byte != EM_CODE) &&
       (dte_to_free() >= 3))
   {
      PrintMsg( "DTE TX_OVERRUN" );

      dte_to_char(EM_CODE);
      dte_to_char(TOVER_CODE);
      dte_tover_pending = FALSE;

/* DEBUG ONLY - mlc+ */
/* INSERT LATER WHEN PATCHES ARE FINISHED */
#if 1
      /* insert the appropriate <EM> command to the V.80 module */
      if (dte_sub_mode == FRAMED_SUB_MODE)
      {
         dte_rx_buffer[dte_rx_insert++] = EM_CODE;
         dte_rx_insert &= BUFFER_POINTER_MASK;
         dte_rx_count++;

         /* insert an ABORT or FLAG into the rx data stream */
         if (dte_framed_un_ov == 0)
         {
PrintMsg( "dte_tx_ABORT" );
            dte_rx_buffer[dte_rx_insert++] = ERR_CODE;
            dte_rx_insert &= BUFFER_POINTER_MASK;
            dte_rx_count++;
         }
         else
         {
PrintMsg( "dte_tx_FLAG" );
            dte_rx_buffer[dte_rx_insert++] = FLAG_CODE;
            dte_rx_insert &= BUFFER_POINTER_MASK;
            dte_rx_count++;
         }
      }
#endif
/* INSERT LATER WHEN PATCHES ARE FINISHED */
/* DEBUG ONLY - mlc- */

   }

   else if ((dte_tx_unum_pending == TRUE) && (last_pc_tx_byte != EM_CODE) &&
            (dte_to_free() >= 5))
   {
PrintMsg( "dte_tx_unnum2" );
      dte_to_char(EM_CODE);
      dte_to_char(UNUM_CODE);
      dte_to_char((ubyte)(discard_byte_count<<1 & 0x00FE) );
      dte_to_char((ubyte)((discard_byte_count>>7) & 0x00FE));
      dte_tx_unum_pending = FALSE;
      discard_byte_count = 0;
   }
   else if ((dte_tunder_pending == TRUE) && (last_pc_tx_byte != EM_CODE) &&
            (dte_to_free() >= 3))
   {
PrintMsg( "dte_tx_under" );
      dte_to_char(EM_CODE);
      dte_to_char(UNDER_CODE);
      dte_tunder_pending = FALSE;
   }

	if( dte_tx_count )
   {
       /* transmit the buffered byte */
       last_pc_tx_byte=dte_tx_buffer[dte_tx_remove];
       dte_tx_count--;
       dte_tx_remove++;

/* shujin 9/29/97 for zmode uploading, data mem not enough */
       dte_tx_remove &= BUFFER_POINTER_MASK_TX;

	    /* Finally put char in UART */
       dte_write_char_to_uart(last_pc_tx_byte);
   }

#endif
}

#else

void v80_dte_init(ubyte in_baud_rate,ubyte in_dte_to_modem_flow_cntl,
                  ubyte in_modem_to_dte_flow_cntl )
{
}

void dte_conf_ITF_flow(uword xoff_value,uword xon_value)
{
}

#endif
