/*********************************************************************
/
/    Copyright, 1988 - 1995.  All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC 27615
/        (919) 846-7171
/
/    This document contains material confidential to RSA.
/    Its contents must not be revealed, used or disclosed to
/    anyone or company with out written permission by RSA.
/    The information contained herein is solely for the use of RSA.
/
/    File:          faxhdlc.c
/
/    Version:     1.0
/
/    Function:     This file contains Fax HDLC protocol routines
/
/    Product:     'C' fax DCE I/O
/
/    History:      Modified from fax_int.asm
/
/    Created:     January 30, 1995
/
/    ----------------------------
/    -    Modifications       -
/    ----------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*******************************************************************************/

#include "sys_def.h"            /* system defines                     */
#include "iohw_equ.h"            /* First Flight hardware defines     */
#include "lineequ.h"            /* DCE (line side) defines             */
#include "faxequ.h"                /* FAX defines                         */
#include "faxedf.h"                /* FAX externs defines                 */
#include "linelink.h"           /* linelink.c prototypes */
#include "local.h"              /* typedefs for DSP drivers */
#include "dsp_drv.h"            /* DSP driver prototypes */


/***************** external procedures used locally *********************/

/*** from file fx00if.c ***/
extern ubyte *fax_tx(void);
extern ubyte *fax_rx(void);

/************** local functions *************************/
void fax_line_tx_block( ubyte *ptr );
void fax_line_rx_block( ubyte *ptr );
void fax_hdlc_tx_int(void);
void fax_hdlc_rx_int(void);
void fax_hdlc_special_int(void);

/******************************************************************************
/
/    Routine:     fax_line_tx_block
/
/    Author :     RSA
/
/    Creation Date:    January 30, 1995
/
/    Description:     Start transmission of an fax hdlc block over the line.
/
/    Input Parameters: (ubyte *) address of hdlc block
/
/    Output Parameters: None 
/
/    Global Variables Changed: fax_tx_packet_ptr, fax_tx_data_ptr,
/                  tx_char_count
/
/    Users: 
/
/    -------------------------------------------------------------
/    -            Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
******************************************************************************/
void fax_line_tx_block( ubyte *ptr ) 
{
    line_disable_interrupts();

   /*    Setup I/O buffer */
    fax_tx_packet_ptr = (FAX_HDLC_PACKET_TYPE *)ptr ;
    fax_tx_data_ptr = fax_tx_packet_ptr->data;
    tx_char_count = fax_tx_packet_ptr->count;

   dce_tx_enabled = TRUE;    /* Fake TX IE */

    dspdrv_ping_cram_intr();  /* kick start Merlin */
    line_enable_interrupts();
}


/************************************************************************
/
/    Routine:     fax_line_rx_block
/
/    Author :     RSA
/
/    Creation Date:    January 30, 1995
/
/    Description:      This routine will set up an I/O buffer for receiving 
/            a fax hdlc block over the line
/
/    Input Parameters:  (ubyte *) address of hdlc control block
/
/    Output Parameters: None
/
/    Global Variables Changed: rx_char_count, line_bg_error_flags,
/                  fax_rx_packet_ptr, fax_rx_data_ptr 
/
/    Users: 
/
/    -------------------------------------------------------------
/    -            Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
***********************************************************************/
void fax_line_rx_block( ubyte *ptr ) 
{
    line_disable_interrupts();
    
    rx_char_count = 0;
    line_bg_error_flags = 0;

    fax_rx_packet_ptr = (FAX_HDLC_PACKET_TYPE *)ptr ;

   /*    If a valid ptr, set up the rx packet */
    if ( fax_rx_packet_ptr )
    {
        fax_rx_packet_ptr->status = 0;
        fax_rx_packet_ptr->count = 0;
        fax_rx_data_ptr = fax_rx_packet_ptr->data;
    }
    
    line_enable_interrupts();
}


/*****************************************************************************
/
/    Procedure:      fax_hdlc_tx_int
/
/    Author:     RSA
/
/    Creation Date:    January 30, 1995
/
/    Description:     This routine will handle a SCC tx ready interrupt while
/            in fax HDLC protocol
/
/    Input Parameters:  None
/
/    Output Parameters:  None
/
/    Global Variables Changed: fax_tx_data_ptr, fax_tx_packet_ptr,
/                  tx_char_count 
/
/    Users:    
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
********************************************************************/
void fax_hdlc_tx_int(void)
{
    ubyte length;
    ubyte tx_data_status = 0;
    ubyte tx_status_reg;

   /* If "spoofed" TX IE is false, the obey */
    if (dce_tx_enabled == FALSE) 
        return;

    if (tx_char_count != 0)
    {

        dspdrv_ReadCram(TX_STATUS_REG, &tx_status_reg, 1);
        if ((tx_status_reg & BUFFER_EMPTY) == BUFFER_EMPTY)
        {
            tx_char_count = fax_tx_packet_ptr->count;
            fax_tx_data_ptr = fax_tx_packet_ptr->data;
            tx_data_status = NO_STATUS;
        }
    }
     
   /*    If we're done w/ the current packet, get another */
    if ( tx_char_count == 0 )
    {
    
        /* if DSP xmit buffer not empty, exit, wait for special int */
        dspdrv_ReadCram(TX_STATUS_REG, &tx_status_reg, 1);
        if ((tx_status_reg & BUFFER_EMPTY) != BUFFER_EMPTY)
        {    
            line_hdlc_waiting_CRC_sent = TRUE;
            return; 
        }
        line_hdlc_waiting_CRC_sent = FALSE;

      /* Get next tx packet from fax */
        fax_tx_packet_ptr = (FAX_HDLC_PACKET_TYPE *)fax_tx();

        /* If a valid packet, set up the buffer */
        if ( fax_tx_packet_ptr )
        {
            fax_tx_data_ptr = fax_tx_packet_ptr->data;
            tx_char_count = fax_tx_packet_ptr->count;
            tx_data_status = NO_STATUS;
        }
        else
        {
           /* Else no more packets to send */
         dce_tx_enabled = FALSE;
            return;
        }
    }

   /*    Determine length of data to send, (size of data area vs. count) */
    if (tx_char_count > DATA_AREA_SIZE)
        length = DATA_AREA_SIZE;
    else
    {
        length = (ubyte)tx_char_count;
        tx_data_status = TX_EOF;
    }


   /*    Send one packet of data through Comm RAM data area */
    line_send_data(fax_tx_data_ptr, length, tx_data_status);

   /*    Decrement count, pointer */
    tx_char_count -= length;
    fax_tx_data_ptr += length;
}


/*****************************************************************************
/
/    Procedure:      fax_hdlc_rx_int   
/
/    Author:     RSA
/
/    Creation Date:    January 30, 1995
/
/    Description:     This routine will service an SCC rx ready interrupt
/
/    Input Parameters:  None
/
/    Output Parameters:  None
/
/    Global Variables Changed:  
/
/    Users:    
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void fax_hdlc_rx_int(void)
{
   ubyte length_and_status ;

   /* If rx overrun, set flag */
   if (dce_status_semaphore == RX_OVERRUN)
   {
     line_bg_error_flags = 1;
   }
  
   /* If abort received, reset to receive new packet and return */
   if (dce_status_semaphore == RX_HDLC_ABORT)
   {
       rx_char_count = 0;

       if ( fax_rx_packet_ptr )
       {
          fax_rx_packet_ptr->count = 0;
          fax_rx_packet_ptr->status = 0;
          fax_rx_data_ptr = fax_rx_packet_ptr->data;
       }
       length_and_status = 0;
       dspdrv_WriteCram(DSP_CP_DATA_LENGTH, &length_and_status, 1);
       dspdrv_WriteCram(DSP_CP_DATA_STATUS, &length_and_status, 1);
   }
    else
    {
       if (fax_rx_packet_ptr != NULL)
       {
         /*
            Verify that the amount of data in COMRAM wont
            blow away our receive frame boundary. This problem
            can occur when line gets dropped by remote end in V.34,
            and a we train on our own TX data, fooling us into
            detecting unbounded fake data.
         */
         if( (rx_char_count + dce_length_semaphore) > FAX_HDLC_MAX_FRAME_SIZE )
         {
               dce_status_semaphore = EOF_CRC_BAD;  /* Get rid of it */
         }
         else
         {
               dspdrv_ReadCram(DSP_CP_DATA_AREA_BASE, fax_rx_data_ptr, dce_length_semaphore);
               fax_rx_data_ptr += dce_length_semaphore;
               rx_char_count += dce_length_semaphore;
         }

            length_and_status = 0;
            dspdrv_WriteCram(DSP_CP_DATA_LENGTH, &length_and_status, 1);
            dspdrv_WriteCram(DSP_CP_DATA_STATUS, &length_and_status, 1);
    
        /* Check to see if end of frame rx'd */
           if ((dce_status_semaphore == EOF_CRC_GOOD) ||
                 (dce_status_semaphore == EOF_CRC_BAD))
           {
              /* check length, must be greater than 2 so fax can strip CRC */
                if (rx_char_count < 3)
                {
                    rx_char_count = 3;
                    line_bg_error_flags = 1;
                }
                fax_rx_packet_ptr->count = rx_char_count;

                /* Check to see if CRC error rx'd */
                if (dce_status_semaphore == EOF_CRC_BAD)
                {
                   line_bg_error_flags = 1;
                }
                
                /* if any errors, set status of FAX packet */
                if (line_bg_error_flags)
                {
                    fax_rx_packet_ptr->status = BAD_BLOCK;
                    line_bg_error_flags = 0;
                }
    
                /* Get next rx packet from V42 */
                fax_rx_packet_ptr = (FAX_HDLC_PACKET_TYPE *)fax_rx();
                
                /* If a new packet is ready, set up it's pointers */
                if ( fax_rx_packet_ptr )
                {
                   rx_char_count = 0;
                   fax_rx_packet_ptr->status = 0;
                   fax_rx_packet_ptr->count = 0;
                   fax_rx_data_ptr = fax_rx_packet_ptr->data;
                 }
           } /* end if EOF */
        } /* end fax_rx_packet_ptr != NULL */
        else
        {
            line_bg_error_flags = 1;
            length_and_status = 0;
            dspdrv_WriteCram(DSP_CP_DATA_LENGTH, &length_and_status, 1);
            dspdrv_WriteCram(DSP_CP_DATA_STATUS, &length_and_status, 1);
        }
    } /* end else not Abort */

    dce_status_semaphore = 0;
    dce_length_semaphore = 0;

} /* procedure */


/*****************************************************************************
/
/    Procedure:      fax_hdlc_special_int   
/
/    Author:     RSA
/
/    Creation Date:    January 24, 1995
/
/    Description:     This routine will service an SCC rx ready interrupt
/
/    Input Parameters:  None
/
/    Output Parameters:  None
/
/    Global Variables Changed:  
/
/    Users:    
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void fax_hdlc_special_int(void)
{
    ubyte tx_status_reg;

    dspdrv_ReadCram(TX_STATUS_REG, &tx_status_reg, 1);
    if ((tx_status_reg & BUFFER_EMPTY) == BUFFER_EMPTY)
        fax_hdlc_tx_int();
    return;
}

