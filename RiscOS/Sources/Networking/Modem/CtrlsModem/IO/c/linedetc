/*********************************************************************
/
/    Copyright, 1988 - 1995.  All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC 27615
/        (919) 846-7171
/
/    This document contains material confidential to RSA.
/    Its contents must not be revealed, used or disclosed to
/    anyone or company with out written permission by RSA.
/    The information contained herein is solely for the use of RSA.
/
/    File:          linedetc.c
/
/    Version:      1.0
/
/    Function:     This file contains all I/O procedures relavent to the 
/            detection phase of the V.42 protocols. 
/
/    Product:    First Flight
/
/    History:      Modified from linedetc.c
/
/    Created:     January 30, 1995
/
/    ----------------------------
/    -    Modifications       -
/    ----------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
******************************************************************************/

/****************************************************************************** 
/
/    FILE NOTES:
/ 
/   The detection phase is a part of the V42 protocol that may be used            
/    immediately after a physical connection.  The purpose of the detection     
/    phase is to determine which mode of operation that the V42 will            
/    operate in (ie: LAPM, MNP or SPEED MATCHING).                    
/                                            
/   The detection phase is an asynchronous operation and therefore can only run
/    during speed matching or MNP async modes. The detection phase must         
/    constantly be processing data for either speed match or MNP async and      
/    the detection phase can be turned on at any time an will get turned off    
/    internally by the timer or an event.  The events that will turn off the    
/    detection phase are as follows:                            
/        a. Timer timeout (as stated above)                    
/        b. receiving four SYNC flags                        
/        c. receiving an MNP packet                        
/        d. successfully completing the detection phase                
/                                            
/   a. The length of time the detection phase has before it is considered       
/    timed out is passed to the line code in "line_detection" (see           
/    "line_detection" for ordering).   The timer is updated in "detection_   
/    timer" which is called by "line_timer" when the detection phase has     
/    been enabled.  When the detection phase timer expires then V42 must     
/    be notified that the detection phase was not successful and the         
/    reason it was not successful by calling "v42_detection_results" (see    
/    "v42_detection_results" for ordering).                                  
/                                            
/   b. The detection phase can also be canceled if the line detects synchronous
/    then V42 must be notified that the detection phase was not successful   
/    and the reason it was not successful by calling "v42_detection_results" 
/    (see "v42_detection_results" for ordering).                             
/                                            
/   c. The detection phase can also be canceled if the line detects that an    
/    MNP packet has being received.    If the line does receive an MNP packet  
/    then V42 must be notified that the detection phase was not successful   
/    and the reason it was not successful by calling "v42_detection_results" 
/    (see "v42_detection_results" for ordering).                             
/                                            
/   d. The detection phase is split into two cases the originate and the        
/    answer:                                     
/           In the originate mode the Originate Detection Pattern (ODP)      
/        is sent continuously until an Answer Detection Pattern (ADP)    
/        is received.  When the ADP is received then V42 must be         
/        notified that the detection phase was successful and the code   
/        for the ADP that was received by calling "v42_detection_results 
/        (see "v42_detection_results" for ordering).                     
/                                            
/           In the answer mode the nothing is sent until an ODP is received. 
/        When an ODP is received then the answer mode must send ten      
/        ADPs.  When the ADP has been sent then V42 must be notified    
/        that the detection phase was not successful and the code for   
/        the ADP that was sent by calling "v42_detection_results"      
/        (see "v42_detection_results" for ordering).                    
/                                           
/   Note:  According to the V42 spec, there are to be eight to sixteen stop 
/       bits between characters that are sent out.  Since we are using an SCC
/       an it is impossible to count the number of stop bits a timer is     
/       used to transmit characters.  Therefore when we get a transmitter   
/       interrupt the character is not sent out until the timer interrupt    
/       routine when the transmit timer has expired.                
/
/    ====================   MNP Extended Services   ========================
/       MNP Extended Services (MNP10 Secification Annex E), also know as 
/       MNP Preferred, defines a method for modems to negotiate MNP links 
/       during the V.42 detection phase.
/
/    MNP Extended Services Originator Actions:
/       The originator sends ODPs per V.42 but monitors any response for two 
/       adjacent MNP detection patterns (MDP) as well as the standard Answer 
/       Detection Pattern (ADP).   The MDP is defined as the async character 
/       pair "EM".  If MDP the is detected, the originator enters the protcol 
/       phase with MNP active by sending an LR to initate the MNP link.  Else
/       if the MDP is not detected and if the ADP is detected, then the 
/       originator enters the protocol phase with LAPM active by sending HDLC
/       flags.
/
/    MNP Extended Services Answer Actions:
/       After detecting the ODP per V.42, the answer sends 5 iterations of the
/       MNP detection pattern (MDP) followed by the ADP per V.42.  The MDP is 
/       defined as the async character pair "EM".   After sending the MDP and 
/       the ADP, the Answer waits for a response from the Origniator.  
/       If HDLC flags are detected, then LAPM is to be used, else if an LR 
/       is received, then MNP is to be active.
/
*****************************************************************************/

#include "sys_def.h"
#include "lineequ.h"            /* line constant defs */
#include "lineedf.h"               /* line external variable defs */
#include "iohw_equ.h"            /* hardware equates, CRAM etc */
#include "local.h"              /* typedefs for DSP drivers */
#include "dsp_drv.h"             /* DSP driver header file */
#include "icd_msgs.h"
#include "mt_codef.h"

/***************** external procedures used locally *************************/

/*** from file lineasyn.c ***/
extern void rx_bg_async_char( ubyte );

/*** from file linelink.c ***/
extern void line_port_init( ubyte );

/*** from file v42.c ***/
extern void v42_detection_results( ubyte, ubyte);

/***************************** local functions *****************************/
void line_detection ( ubyte, ubyte, uword );
void detection_tx_int( void );
void setup_detection_tx_timer( void );
void send_odp_to_dsp(void);
void send_adp_to_dsp(void);
void detection_rx_int( void );
void detection_special_int( void );
void detection_timer( void );
void detection_turnoff( void );
void got_mnp_during_detc(void);
extern void outchar(unsigned char);
extern void PrintMsg(char *);


/*****************************************************************************
/
/    Procedure:  line_detection
/
/    Author: RSA
/
/    Creation Date: October 12, 1994
/
/    Description: This routine will initialize the detection phase variables
/
/    Input Parameters:  None
/
/    Output Parameters:  None
/
/    Global Variables Changed:  detection_time, detection_adp_code,
/        detection_enabled, detection_start_code, detection_tx_char,
/        last_adp_rx, next_adp_flag, odp_rx_flag, last_odp_rx,
/        odp_rx_count, detection_lapm_flag_count 
/
/    Users:    v42_init
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
****************************************************************************/
void line_detection ( ubyte in_start_code, ubyte in_adp_code, 
            uword in_detect_time )
{             
    detection_time = in_detect_time;
   detection_adp_code = in_adp_code;
   detection_tx_enabled = TRUE;
   detection_turnoff_flag = FALSE;

   if (detection_adp_code == 1)
   {
      detection_mnp_extend = TRUE;
   }
    if (in_start_code == STATUS_DETECTION_TURNOFF)
    {
        detection_enabled = FALSE;
    }
    else /* not TURNOFF */
    {
      line_port_init(DETECT_PORT);
        detection_start_code = in_start_code;

        if (detection_start_code == DETECTION_ORIG)
        {
            detection_tx_char = 0x11;
            dspdrv_ping_cram_intr();        /* ping DSP to generate tx interrupt */
            last_adp_rx = 0xff;
            next_adp_flag = 0;
        }
        else
        {
            odp_rx_flag = FALSE;
            last_odp_rx = 0x11;
            odp_rx_count = 4;
        }
        detection_lapm_flag_count = 4;
        detection_enabled = TRUE;
    }/* not TURNOFF */
}/* procedure */


/*****************************************************************************
/
/    Procedure:  detection_tx_int
/
/    Author: RSA
/
/    Creation Date: October 12, 1994 
/
/    Description: This routine will handle the TX Ready interrupt from the
/            SCC durring the detection phase
/
/    Input Parameters:  None
/
/    Output Parameters:  None
/
/    Global Variables Changed: detection_result_code, detection_result_flag,
/
/    Users: main isr
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
****************************************************************************/
void detection_tx_int( void )
{
   if (detection_tx_enabled)
   {
       if ( detection_start_code == DETECTION_ORIG )
       {
           send_odp_to_dsp();
       }
       else
       {
           if ( odp_rx_flag == TRUE )
           {
               if ( adp_send_count == 0 )
               {
               if (detection_adp_code == 1)
               {
                  detection_adp_code = 0;
                  adp_send_count = 10;
               }
               else if (!detection_mnp_extend)
               {
                      /* Done w/ answer detection */
                      detection_result_code = detection_adp_code;
                      detection_result_flag = 0;
                      detection_turnoff();
               }
               } 
               else
               {
               send_adp_to_dsp();
               }
           }
       }
      detection_tx_enabled = FALSE;
      setup_detection_tx_timer();
   }
}/* procedure */


/*****************************************************************************
/
/    Procedure:  setup_detection_tx_timer
/
/    Author: RSA
/
/    Creation Date: July 30, 1992
/
/    Description: This routine will adjust the transmit detection based on 
/        the line speed.
/
/    Input Parameters:  None
/
/    Output Parameters:  None
/
/    Global Variables Changed:  detection_tx_timer, detection_tx_enabled 
/
/    Users:    
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
****************************************************************************/
void setup_detection_tx_timer( void )
{
     switch ( dce_baud_rate )
     {
          case 0 : /* 1200 bps (tx) 75 bps (rx) */
          case 3 : /* 1200 bps */
               detection_tx_timer = 4;
               break;
        
          case 1 : /* 75 bps (tx) 1200 bps (rx) */
               detection_tx_timer = 64;
               break;

          case 2 : /* 300 bps */
               detection_tx_timer = 12;
               break;

          default :
               detection_tx_timer = 2;
               break;
     }/* switch */
}/* procedure */


/*****************************************************************************
/
/    Procedure:  send_odp_to_dsp
/
/    Author: RSA
/
/    Creation Date: October 12, 1994
/
/    Description: This routine will send the ODP pattern to the DSP. 
/        The DSP will then handle timing between charaters.
/
/    Input Parameters:  None
/
/    Output Parameters:  None
/
/    Global Variables Changed:    detection_tx_char   
/
/    Users:    
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
****************************************************************************/
void send_odp_to_dsp( void )
{
    ubyte tx_count;
    ubyte status = 0;

    tx_count = 0;

    while (tx_count < (DATA_AREA_SIZE-30))
    {
        dspdrv_WriteCram(CP_DSP_DATA_AREA_BASE + tx_count,
                                        &detection_tx_char, 1);
        detection_tx_char += 0x80;
        tx_count += WORD_OR_BYTE_ADD_INC;
    }/* end while */

    /* set semaphores to send data */

    /* set status */
    dspdrv_WriteCram(CP_DSP_DATA_STATUS, &status, 1);

    tx_count /= WORD_OR_BYTE_ADD_INC;

    /* set length */
    dspdrv_WriteCram(CP_DSP_DATA_LENGTH, &tx_count, 1);
}/* procedure */


/*****************************************************************************
/
/    Procedure:  send_adp_to_dsp
/
/    Author: RSA
/
/    Creation Date: October 12, 1994
/
/    Description: This routine will send the ADP pattern to the DSP. 
/        The DSP will then handle timing between charaters.
/
/    Input Parameters:  None
/
/    Output Parameters:  None
/
/    Global Variables Changed:    detection_tx_char,adp_send_count   
/
/    Users:    
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
****************************************************************************/
void send_adp_to_dsp( void )
{
    ubyte tx_count;
    ubyte status = 0;

    tx_count = 0;

    while (tx_count < DATA_AREA_SIZE && adp_send_count > 0)
    {
        detection_tx_char = 'E';
        dspdrv_WriteCram(CP_DSP_DATA_AREA_BASE+tx_count, &detection_tx_char, 1);
        tx_count += WORD_OR_BYTE_ADD_INC;
        switch(detection_adp_code)
        {
            case 0:
                detection_tx_char = 'C';
                break;

            case 1:
                detection_tx_char = 'M';
                break;
               
            case 2:
                detection_tx_char = 0;
                break;
        }
        dspdrv_WriteCram(CP_DSP_DATA_AREA_BASE+tx_count, &detection_tx_char, 1);
        tx_count += WORD_OR_BYTE_ADD_INC;
        adp_send_count--;

    }/* end while */

    /* set semaphores to send data */

    /* set status */
    dspdrv_WriteCram(CP_DSP_DATA_STATUS, &status, 1);

    tx_count /= WORD_OR_BYTE_ADD_INC;

    /* set length */
    dspdrv_WriteCram(CP_DSP_DATA_LENGTH, &tx_count, 1);

}/* procedure */


/*****************************************************************************
/
/    Procedure:  detection_rx_int
/
/    Author: RSA
/
/    Creation Date: January 30, 1995
/
/    Description: This routine will handle the SCC receiver ready interrupts
/        during the detection phase.
/
/    Input Parameters:  None
/
/    Output Parameters:  None
/
/    Global Variables Changed:  rx_state 
/
/    Users:    
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
****************************************************************************/
void detection_rx_int( void )
{
    ubyte new_char;
    ubyte rx_count;    
    ubyte length;
    ubyte status;

    /* read length and status from Comm RAM data area */
    dspdrv_ReadCram(DSP_CP_DATA_LENGTH, &length, 1);
    dspdrv_ReadCram(DSP_CP_DATA_STATUS, &status, 1);
    rx_count = 0;

    if (status == RX_OVERRUN)
        line_bg_error_flags = 1;

    if (status == RX_BREAK)
        rx_state = RXA_SYN_C;

/*  While chars are available in the rx fifo */
    while (length)
    {
        /* read new_char in from Comm RAM data area */
        dspdrv_ReadCram(DSP_CP_DATA_AREA_BASE+rx_count, &new_char, 1);
        rx_count += WORD_OR_BYTE_ADD_INC;
        length--;

   PrintMsg( "RxDetc" );

        outchar(new_char);

/*        Check for sync flag possible combinations */
        if ( new_char == 0x7e || new_char == 0xbf || new_char == 0x3f )
        {
/*        Got a lapm flag */
            detection_lapm_flag_count--;

            if ( detection_lapm_flag_count == 0 )
            {
/*                If rx'ed 4 lapm flags, set results to LAPM */
                detection_result_code = 0xff;
                detection_result_flag = 2;
                detection_turnoff();
            }
        }    
        else
        {
            detection_lapm_flag_count = 4;
            if ( detection_start_code == DETECTION_ORIG )
            {
                if ( next_adp_flag == 0)  
                {
                    if ( new_char == 'E' )
                    {
                        next_adp_flag = 1;   
                    }
                    else 
                    {
                        last_adp_rx = 0xff;
                        next_adp_flag = 0;   
                    }
                }
                else
                {
                    if ( last_adp_rx == new_char )
                    {
                        switch (last_adp_rx )
                        {
                            case 'C':
                                detection_result_code = 0;
                                break;

                            case 'M':
                        if (detection_mnp_extend == TRUE)
                        {
                                   detection_result_code = 1;
                                }
                        break;
                                    
                            case 0 :
                                detection_result_code = 2;
                                break;

                            default :
                                detection_result_code =0xff;
                                break;
                        }/* switch */

                        detection_result_flag = 0;
                        detection_turnoff();
                        length =0;
                        status =0;
                        dspdrv_WriteCram(DSP_CP_DATA_STATUS, &status, 1);
                        dspdrv_WriteCram(DSP_CP_DATA_LENGTH, &length, 1);
                        
                        return;
                    }
                    else /* != last_rx'ed */
                    {
                        last_adp_rx = new_char;
                        next_adp_flag = 0;
                    }
                }
            } /* end if originate */
               else /* answering */
               {
                   if ( odp_rx_flag != TRUE )
                   {
                       if ( last_odp_rx == new_char )
                       {
                           last_odp_rx += 0x80;
                           odp_rx_count--;    
                           if ( odp_rx_count == 0 )
                           {
                        if (detection_mnp_extend == TRUE)
                           adp_send_count = 5;
                        else

/*
mrm12697 changed the adp_send_count from 10 to 20 to work with USR
connection at 2400 and 1200
*/
                                  adp_send_count = 20;
                               detection_tx_char = 'E';
                               odp_rx_flag = TRUE;
         
                           }
                       }/* end if */
                       else
                       {
                           odp_rx_count = 4;
                       }

                   } /* if (odp_rx_flag != TRUE) */

               }/* end else answering */

        }/* else */

/*        Hand new char off to MNP2 receiver */
        rx_bg_async_char( new_char );    

    } /* while */

    length =0;
    status =0;
    dspdrv_WriteCram(DSP_CP_DATA_STATUS, &status, 1);
    dspdrv_WriteCram(DSP_CP_DATA_LENGTH, &length, 1);

}/* procedure */



/*****************************************************************************
/
/    Procedure:  detection_timer 
/
/    Author: RSA
/
/    Creation Date: January 30, 1995
/
/    Description: This routine updates the detection time-relavant variables,
/            and ends the detection phase on time-out.
/
/    Input Parameters:  None
/
/    Output Parameters:  None
/
/    Global Variables Changed:  detection_time, detection_result_code,
/    detection_result_flag 
/
/    Users:    
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
****************************************************************************/
void detection_timer( void )
{
/*    If detection has timed out */
    if ( detection_time == 0 )
    {
        if (detection_start_code == DETECTION_ORIG || odp_rx_flag == FALSE )
        {
            detection_result_code = 0xff;
            detection_result_flag = 1;
            detection_turnoff();
            return;
        }
    }
    else
    {
/*        Tick the timer */
        detection_time--;
    }
   /* Run detections transmitter timer? */
   if (detection_tx_timer)
   {
      detection_tx_timer--;
      if(detection_tx_timer == 0)
      {
         detection_tx_enabled = TRUE;
         dspdrv_ping_cram_intr();
      }
   }
} /* procedure */


/*****************************************************************************
/
/    Procedure:  detection_turnoff
/
/    Author: RSA
/
/    Creation Date: January 30, 1995
/
/    Description: This routine will end the detection phase and clean up 
/        the detection variables and the SCC.
/
/    Input Parameters:  None
/
/    Output Parameters:  None
/
/    Global Variables Changed:  detection_enabled, detection_tx_enabled 
/
/    Users:    
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
****************************************************************************/
void detection_turnoff( void )
{
    detection_enabled = FALSE;
    detection_tx_enabled = FALSE;  

   /* Set flag so line_bg re-inits usart to async mode */
   detection_turnoff_flag = TRUE;
}/* procedure */


/*****************************************************************************
/
/    Procedure:  got_mnp_during_detc
/
/    Author: RSA
/
/    Creation Date: January 30, 1995
/
/    Description: This routine will cancel the detection phase, and notify 
/        V.42 that an MNP frame was received.
/
/    Input Parameters:  None
/
/    Output Parameters:  None
/
/    Global Variables Changed: detection_result_code, detection_result_flag
/
/    Users: rx_bg_async_char()    
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
****************************************************************************/
void got_mnp_during_detc(void)
{
    detection_result_code = 0xff;
    detection_result_flag = 3;
    detection_turnoff();

} /* procedure */

