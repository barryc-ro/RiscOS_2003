/*********************************************************************
/
/    Copyright, 1988 - 1995.  All Rights Reserved by:
/         RSA
/         7701 Six Forks Road
/         Suite 120
/         Raleigh, NC 27615
/         (919) 846-7171
/
/    This document contains material confidential to RSA.
/    Its contents must not be revealed, used or disclosed to
/    anyone or company with out written permission by RSA.
/    The information contained herein is solely for the use of RSA.
/
/    File:          linelapm.c
/
/    Version:       1.0
/
/    Function:      This file contains the linelapm I/O routines
/
/    Product:     Merlin/Cutlass Line I/O
/
/    History:       Modified from linelapm.c
/
/    Created:  January 30, 1995
/
/    ----------------------------
/    -    Modifications     -
/    ----------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*****************************************************************************/

#include "sys_def.h"             /* system definitions */
#include "iohw_equ.h"            /* First Flight hardware defs */
#include "lineequ.h"             /* line constant defs */
#include "lineedf.h"                /* line external variable defs */
#include "linelink.h"            /* linelink.c prototypes */
#include "local.h"               /* typedefs for DSP drivers */
#include "dsp_drv.h"             /* DSP driver prototypes */

/***************** external procedures used locally *************************/
/*** from file lapm_int.c ***/
extern ubyte *lapm_rx(void);
extern ubyte *lapm_tx(void);
extern void line_write_exit(ubyte,ubyte,ubyte);

extern ubyte wait_for_new_frame;
#ifdef DEBUG_PORT 
extern void PrintMsg(char *);
#endif

#ifdef BUILD_DLM
extern void PrintLapm(ubyte Type, ubyte *Error, ubyte *Len, ubyte *Data);
#endif

void enable_int(void);
/*****************************************************************************
/
/    Procedure:  lapm_tx_int
/
/    Author: RSA
/
/    Creation Date: January 30, 1995
/
/    Description: This routine will handle the TX READY interrupts for 
/         the SCC
/
/    Input Parameters:  None
/
/    Output Parameters:  None
/
/    Global Variables Changed:  lapm_tx_data_ptr, tx_char_count 
/
/    Users:    line_tx_int
/
/    -------------------------
/    -     Modifications -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
********************************************************************/
void lapm_tx_int(void)
{
/*mrm62796*/
    ubyte status;       /* status byte of data area semaphore to write */
    ubyte data_count;   /* number of tx data bytes */
   ubyte length,*temp;
   ubyte tx_data_status = 0;
   ubyte tx_status_reg;

   /* If "spoofed" TX IE is false, the obey */
    if (dce_tx_enabled == FALSE) 
        return;

   /* if TX_UNDERRUN indicated from the DSP */
   if ((tx_char_count) && (dce_tx_resumed == TRUE))
   {
      /* set packet length and status */
      status = TX_IDLE;
      data_count = 0xFF;
      line_write_exit(status,data_count,1);
      dce_tx_resumed = FALSE;
      return;
   }
   
   if (tx_char_count != 0)
   {
       dspdrv_ReadCram(TX_STATUS_REG, &tx_status_reg, 1);
       if ((tx_status_reg & BUFFER_EMPTY) == BUFFER_EMPTY)
       {
          tx_char_count = lapm_tx_packet_ptr->count;
          lapm_tx_data_ptr = lapm_tx_packet_ptr->data;
          tx_data_status = NO_STATUS;
       }
   }
     
     
   /* If we're done w/ the current packet, get another */
   if ( tx_char_count == 0 )
   {
        line_hdlc_waiting_CRC_sent = FALSE;

      /* Get next tx packet from lapm */
#ifdef BUILD_DLM
        PrintLapm(1, (ubyte*)&lapm_tx_packet_ptr->error, (ubyte*)&lapm_tx_packet_ptr->count, (ubyte*)&lapm_tx_packet_ptr->data);
#endif
       enable_int();
       lapm_tx_packet_ptr = (LAPM_PACKET_TYPE *)lapm_tx();

      /*    If a valid packet, set up the buffer */
       if ( lapm_tx_packet_ptr )
       {
          lapm_tx_data_ptr = lapm_tx_packet_ptr->data;
          tx_char_count = lapm_tx_packet_ptr->count;
          tx_data_status = NO_STATUS;
       }
       else
       {
         /* Else no more packets to send */
         dce_tx_enabled = FALSE;
          return;
       }
   }

   /* Determine length of data to send, (size of data area vs. count) */
   if (tx_char_count > DATA_AREA_SIZE)
       length = DATA_AREA_SIZE;
   else
   {
       length = (ubyte)tx_char_count;
       tx_data_status = TX_EOF;
   }

   /* Send one packet of data through Comm RAM data area */

/*
   line_send_data(lapm_tx_data_ptr, length, tx_data_status);
*/

/*mrm62796*/

    dspdrv_WriteCram(CP_DSP_DATA_AREA_BASE,lapm_tx_data_ptr,length);
  
     temp =(ubyte *) COM_RAM + CP_DSP_DATA_STATUS;
     *temp = tx_data_status;  

     temp =(ubyte *) COM_RAM + CP_DSP_DATA_LENGTH;
     *temp = length;  





   /* Decrement count, pointer */
   tx_char_count -= length;
   lapm_tx_data_ptr += length;
}


/*****************************************************************************
/
/    Procedure:  lapm_rx_int
/
/    Author: RSA
/
/    Creation Date: January 30, 1995
/
/    Description: This routine will handle the RX READY interrupts for 
/         the SCC
/
/    Input Parameters:  None
/
/    Output Parameters:  None
/
/    Global Variables Changed:  lapm_rx_packet_ptr, lapm_rx_data_ptr,
/         rx_char_count, line_bg_error_flags
/
/    Users:    
/
/    -------------------------
/    -     Modifications -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*****************************************************************************/
void lapm_rx_int(void)
{
   ubyte length_and_status,*temp ;

   if (dce_status_semaphore == TX_UNDERRUN)
   {
 
#ifdef DEBUG_PORT 
       PrintMsg( "TxUr" );
#endif
       line_bg_error_flags = 1;

     /* reset the semaphore */
     /* dce_status_semaphore = 0; */

       /* dce_tx_interrupt_expected = FALSE; */

      /* always force the DSP to enter TX_IDLE state */
      dce_tx_resumed = TRUE;

      /* indicate mid-frame tx underrun to the DTE I/O */
      /* dce_tx_underrun = TRUE; */

      /* clear the DSP semaphores */
      length_and_status = 0;
      dspdrv_WriteCram(DSP_CP_DATA_LENGTH, &length_and_status, 1);
      dspdrv_WriteCram(DSP_CP_DATA_STATUS, &length_and_status, 1);

      /* clear the semaphore values */
      dce_length_semaphore = 0;
      dce_status_semaphore = 0;

      /* RETURN IMMEDIATELY, THERE IS NO DATA, STATUS ONLY */
      return;
   }


   /* If rx overrun, set flag */
   if (dce_status_semaphore == RX_OVERRUN)
   {
#ifdef DEBUG_PORT 
       PrintMsg( "RxOr" );
#endif
     line_bg_error_flags = 1;
   }

  
  /* If abort received, reset to receive new packet and return */
   if (dce_status_semaphore == RX_HDLC_ABORT)
   {
#ifdef DEBUG_PORT 
       PrintMsg( "RxAb" );
#endif
     rx_char_count = 0;

     if ( lapm_rx_packet_ptr )
     {
        lapm_rx_packet_ptr->count = 0;
        lapm_rx_packet_ptr->error = 0;
        lapm_rx_data_ptr = lapm_rx_packet_ptr->data;
     }
     length_and_status = 0;
     dspdrv_WriteCram(DSP_CP_DATA_LENGTH, &length_and_status, 1);
     dspdrv_WriteCram(DSP_CP_DATA_STATUS, &length_and_status, 1);

    /* OK to put next I/C data into buffer */
    wait_for_new_frame = FALSE;

   }
   else
   {
       if (lapm_rx_packet_ptr != NULL)
       {
         /*
            Verify that the amount of data in COMRAM wont
            blow away our receive frame boundary. This problem
            can occur when line gets dropped by remote end in V.34,
            and a we train on our own TX data, fooling us into
            detecting unbounded fake data.

            LAPM_FULL_PACKET is defined to be larger than the data[]
            portion of the received frame because we start putting data
            into the addr field + cmd field + data[] fields.

            By going through the motions of letting LAPM know about the
            RX problem, he tracks all errors of which are polled by the
            MT\ACU in an attempt to know when to issue a RRN\RT in cases
            where the DSP thinks the SQ is good.
         */
         if( (rx_char_count + dce_length_semaphore) > LAPM_FULL_PACKET )
         {
               dce_status_semaphore = EOF_CRC_BAD;  /* Get rid of it */
         }
         else
         {
            if( wait_for_new_frame )
            {  
            }
            else
            {
                  dspdrv_ReadCram(DSP_CP_DATA_AREA_BASE, lapm_rx_data_ptr, dce_length_semaphore);
                  lapm_rx_data_ptr += dce_length_semaphore;
                  rx_char_count += dce_length_semaphore;
            }
         }


/*
            length_and_status = 0;
            dspdrv_WriteCram(DSP_CP_DATA_LENGTH, &length_and_status, 1);
            dspdrv_WriteCram(DSP_CP_DATA_STATUS, &length_and_status, 1);
*/
/*mrm62796*/

         /* Clear out COMMRAM semaphores */
            temp =(ubyte *) COM_RAM + DSP_CP_DATA_LENGTH;
            *temp = 0;  
            temp =(ubyte *) COM_RAM + DSP_CP_DATA_STATUS;
            *temp = 0;  

            /* Check to see if end of frame rx'd */
            if ((dce_status_semaphore == EOF_CRC_GOOD) ||
              (dce_status_semaphore == EOF_CRC_BAD))
            {
             /* OK to put next I/C data into buffer */
            wait_for_new_frame = FALSE;

                rx_char_count -= 2;
                lapm_rx_packet_ptr->count = rx_char_count;
                
                /* Check to see if CRC error rx'd */
                if (dce_status_semaphore == EOF_CRC_BAD)
                {
#ifdef DEBUG_PORT 
                   PrintMsg( "RxBc" );
#endif
                    line_bg_error_flags = 1;
                }
        
                /* if any errors, set status of LAPM packet */
                if (line_bg_error_flags )
                {
                    lapm_rx_packet_ptr->error = BAD_BLOCK;
                    line_bg_error_flags = 0;
                }
                
                /* Get next rx packet from V42 */

#ifdef BUILD_DLM
                PrintLapm(0, (ubyte*)&lapm_rx_packet_ptr->error, (ubyte*)&lapm_rx_packet_ptr->count, (ubyte*)&lapm_rx_packet_ptr->data);
#endif
       enable_int();
                lapm_rx_packet_ptr = (LAPM_PACKET_TYPE *)lapm_rx();
        
                /* If a new packet is ready, set up it's pointers */
                if ( lapm_rx_packet_ptr )
                {
                    rx_char_count = 0;
                    lapm_rx_packet_ptr->error = 0;
                    lapm_rx_packet_ptr->count = 0;
                    lapm_rx_data_ptr = lapm_rx_packet_ptr->data;
                }
            } /* end if EOF */
       
       } /* end lapm_rx_packet_ptr != NULL */
       else
       {
            if ((dce_status_semaphore == EOF_CRC_GOOD) ||
              (dce_status_semaphore == EOF_CRC_BAD))
            {
             /* OK to put next I/C data into buffer */
            wait_for_new_frame = FALSE;
                line_bg_error_flags = 0;
         }
         else
         {
            /* Need to wait until the EOF before putting data into new frame */
            if (wait_for_new_frame != TRUE)
            {
#ifdef DEBUG_PORT 
                   PrintMsg( "RxBf" );
#endif
            }


            wait_for_new_frame = TRUE;
                line_bg_error_flags = 1;
         }

            length_and_status = 0;
            dspdrv_WriteCram(DSP_CP_DATA_LENGTH, &length_and_status, 1);
            dspdrv_WriteCram(DSP_CP_DATA_STATUS, &length_and_status, 1);
            
       }
   } /* end else not Abort */

    dce_status_semaphore = 0;
    dce_length_semaphore = 0;
    
    /* clear semaphores */

} /* procedure */
