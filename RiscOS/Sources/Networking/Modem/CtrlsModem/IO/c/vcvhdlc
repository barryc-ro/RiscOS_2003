/*********************************************************************
/
/    Copyright, 1988,1989,1990,1991,1992,1993,1994,1995.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC 27615
/        (919) 846-7171
/
/    This document contains material confidential to RSA.
/    Its contents must not be revealed, used or disclosed to
/    anyone or company with out written permission by RSA.
/    The information contained herein is solely for the use of RSA.
/
/    File:          vcvhdlc.c
/
/    Version:     1.0
/
/    Function:     This file contains VoiceView HDLC protocol routines
/
/    Product:     'C' vcv DCE I/O
/
/    History:      Modified from vcv_int.asm
/
/    Created:     7/21/95 from fax 7/19/95 code
/
/    ----------------------------
/    -    Modifications       -
/    ----------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
******************************************************************************/

#include "sys_def.h"            /* system defines                     */
#include "iohw_equ.h"            /* First Flight hardware defines     */
#include "lineequ.h"            /* DCE (line side) defines             */
#include "vcv_def.h"
#include "vcvedf.h"            /* VCV externs defines                 */
#include "linelink.h"          /* linelink.c prototypes */
#include "local.h"             /* typedefs for DSP drivers */
#include "dsp_drv.h"           /* DSP driver prototypes */


/***************** external procedures used locally *********************/
extern ubyte *vcv_tx(void);
extern ubyte *vcv_rx(void);

/************** local functions *************************/
void vcv_line_tx_block( ubyte *ptr );
void vcv_line_rx_block( ubyte *ptr );
void vcv_hdlc_tx_int(void);
void vcv_hdlc_rx_int(void);
void vcv_hdlc_special_int(void);


/*** local variables *******/
ubyte vcv_hdlc_tx_active = FALSE;

/*  Uncomment this for debug port trace messages */
/*#define VVHDLC_TRACE */

#if defined (VVHDLC_TRACE) 
extern void outchar(ubyte);
#endif

/******************************************************************************
/
/    Routine:     vcv_line_tx_block
/
/    Author :     RSA
/
/    Creation Date:    12/15/1994.
/
/    Description:     Start transmission of an vcv hdlc block over the line.
/
/    Input Parameters: (ubyte *) address of hdlc block
/
/    Output Parameters: None 
/
/    Global Variables Changed: vcv_tx_packet_ptr, vcv_tx_data_ptr,
/                  tx_char_count
/
/    Users: 
/
/    -------------------------------------------------------------
/    -            Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
*****************************************************************************/
void vcv_line_tx_block(ubyte *ptr) 
{
#if 0
    line_disable_interrupts();
#else
   line_io_enabled=0;
#endif

   /*    Setup I/O buffer */
    vcv_tx_packet_ptr = (VCV_HDLC_PACKET_TYPE *)ptr ;
    vcv_tx_data_ptr = vcv_tx_packet_ptr->data;
    tx_char_count = vcv_tx_packet_ptr->count;

#if defined (VVHDLC_TRACE) 
outchar( ':' );
outchar( vcv_tx_packet_ptr->junk );
outchar( ',' );
outchar( vcv_tx_packet_ptr->data[0] );
outchar( vcv_tx_packet_ptr->data[1] );
outchar( vcv_tx_packet_ptr->data[2] );
outchar( ':' );
#endif

    /* enable vcv hdlc tx interrupt */
    vcv_hdlc_tx_active = TRUE;

    dspdrv_ping_cram_intr();  /* kick start DSP */

#if 0
    line_enable_interrupts();
#else
   line_io_enabled=1;
#endif
}

/************************************************************************
/
/    Routine:     vcv_line_rx_block
/
/    Author :     RSA
/
/    Creation Date:    12/15/1994.
/
/    Description:      This routine will set up an I/O buffer for receiving 
/            a vcv hdlc block over the line
/
/    Input Parameters:  (ubyte *) address of hdlc control block
/
/    Output Parameters: None
/
/    Global Variables Changed: rx_char_count, line_bg_error_flags,
/                  vcv_rx_packet_ptr, vcv_rx_data_ptr 
/
/    Users: 
/
/    -------------------------------------------------------------
/    -            Modifications                -
/    -------------------------------------------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
**********************************************************************/
void vcv_line_rx_block(ubyte *ptr) 
{
#if 0
    line_disable_interrupts();
#else
   line_io_enabled=0;
#endif
    
    rx_char_count = 0;
    line_bg_error_flags = 0;

    vcv_rx_packet_ptr = (VCV_HDLC_PACKET_TYPE *)ptr ;

   /*    If a valid ptr, set up the rx packet */
    if ( vcv_rx_packet_ptr )
    {
#if defined (VVHDLC_TRACE) 
outchar( '$' );
outchar( vcv_rx_packet_ptr->junk );
outchar( '$' );
#endif
        vcv_rx_packet_ptr->status = 0;
        vcv_rx_packet_ptr->count = 0;
        vcv_rx_data_ptr = vcv_rx_packet_ptr->data;
    }
    
#if 0
    line_enable_interrupts();
#else
   line_io_enabled=1;
#endif
}

/*****************************************************************************
/
/    Procedure:      vcv_hdlc_tx_int
/
/    Author:     RSA
/
/    Creation Date:    12/15/1994.
/
/    Description:     This routine will handle a tx ready interrupt while
/            in vcv HDLC protocol
/
/    Input Parameters:  None
/
/    Output Parameters:  None
/
/    Global Variables Changed: vcv_tx_data_ptr, vcv_tx_packet_ptr,
/                  tx_char_count 
/
/    Users:    
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
********************************************************************/
void vcv_hdlc_tx_int(void)
{
    ubyte length;
    ubyte tx_data_status = 0;
    ubyte tx_status_reg;

    if (vcv_hdlc_tx_active == FALSE) 
        return;

   /*    If in middle of a frame, Check for transmit underrun to Merlin, 
    if so Merlin will abort    and we must resend    */

    if (tx_char_count != 0)
    {
        dspdrv_ReadCram(TX_STATUS_REG, &tx_status_reg, 1);
        if ((tx_status_reg & BUFFER_EMPTY) == BUFFER_EMPTY)
        {
            tx_char_count = vcv_tx_packet_ptr->count;
            vcv_tx_data_ptr = vcv_tx_packet_ptr->data;
            tx_data_status = NO_STATUS;
        }
    }
   /*    If we're done w/ the current packet, get another */
   else if ( tx_char_count == 0 )
    {
    
        /* if DSP xmit buffer not empty, exit, wait for special int */
        dspdrv_ReadCram(TX_STATUS_REG, &tx_status_reg, 1);
        if ((tx_status_reg & BUFFER_EMPTY) != BUFFER_EMPTY)
        {    
            line_hdlc_waiting_CRC_sent = TRUE;
            return; 
        }
        line_hdlc_waiting_CRC_sent = FALSE;

        /* Get next tx packet from vcv */
        vcv_tx_packet_ptr = (VCV_HDLC_PACKET_TYPE *)vcv_tx();

        /* If a valid packet, set up the buffer */
        if ( vcv_tx_packet_ptr )
        {
#if defined (VVHDLC_TRACE) 
outchar( '#' );
outchar( vcv_tx_packet_ptr->junk );
outchar( ',' );
outchar( vcv_tx_packet_ptr->data[0] );
outchar( vcv_tx_packet_ptr->data[1] );
outchar( vcv_tx_packet_ptr->data[2] );
outchar( '#' );
#endif
            vcv_tx_data_ptr = vcv_tx_packet_ptr->data;
            tx_char_count = vcv_tx_packet_ptr->count;
            tx_data_status = NO_STATUS;
        }
        /* Else no more packets to send */
        else
        {
            vcv_hdlc_tx_active = FALSE;
            return;
        }
    }

   /*    Determine length of data to send, (size of data area vs. count) */
    if (tx_char_count > DATA_AREA_SIZE)
        length = DATA_AREA_SIZE;
    else
    {
        length = (ubyte)tx_char_count;
        tx_data_status = TX_EOF;
    }


   /*    Send one packet of data through Comm RAM data area */
    line_send_data(vcv_tx_data_ptr, length, tx_data_status);

   /*    Decrement count, pointer */
    tx_char_count -= length;
    vcv_tx_data_ptr += length;
}

/*****************************************************************************
/
/    Procedure:      vcv_hdlc_rx_int   
/
/    Author:     RSA
/
/    Creation Date:    12/15/1994.
/
/    Description:     This routine will service an rx ready interrupt
/
/    Input Parameters:  None
/
/    Output Parameters:  None
/
/    Global Variables Changed:  
/
/    Users:    
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
******************************************************************************/
void vcv_hdlc_rx_int(void)
{
   /* If rx overrun, set flag */
   if (dce_status_semaphore == RX_OVERRUN)
   {
        line_bg_error_flags = 1;
#if defined (VVHDLC_TRACE) 
outchar( 'R' );
outchar( 'x' );
outchar( '_' );
outchar( 'O' );
outchar( 'v' );
outchar( 'e' );
outchar( 'r' );
#endif
}
  
   /* If abort received, reset to receive new packet and return */
   if (dce_status_semaphore == RX_HDLC_ABORT)
   {
         rx_char_count = 0;
        if ( vcv_rx_packet_ptr )
         {
            vcv_rx_packet_ptr->count = 0;
            vcv_rx_packet_ptr->status = 0;
            vcv_rx_data_ptr = vcv_rx_packet_ptr->data;
        }
   }
    else
    {
       if (vcv_rx_packet_ptr != NULL)
       {
            if( (rx_char_count + dce_length_semaphore) > VCV_HDLC_MAX_FRAME_SIZE )
            {
                  /* Don't blow away buffer */
                  dce_length_semaphore = VCV_HDLC_MAX_FRAME_SIZE - rx_char_count;
            }

               dspdrv_ReadCram(DSP_CP_DATA_AREA_BASE, vcv_rx_data_ptr, dce_length_semaphore);

               vcv_rx_data_ptr += dce_length_semaphore;
               rx_char_count += dce_length_semaphore;

              /* Check to see if end of frame rx'd */
              if ((dce_status_semaphore == EOF_CRC_GOOD) ||
                  (dce_status_semaphore == EOF_CRC_BAD) )
              {
               /* check length, must be greater than 2 so vcv can strip CRC */
                   if (rx_char_count < 3)
                   {
                       rx_char_count = 3;
                       line_bg_error_flags = 1;
                   }

                   vcv_rx_packet_ptr->count = rx_char_count;

                   /* Check to see if CRC error rx'd */
                   if (dce_status_semaphore == EOF_CRC_BAD)
                   {
                      line_bg_error_flags = 1;
                   }
                
                   /* if any errors, set status of VCV packet */
                   if (line_bg_error_flags)
                   {
                       vcv_rx_packet_ptr->status = BAD_BLOCK;
                       line_bg_error_flags = 0;
#if defined (VVHDLC_TRACE) 
outchar( 'B' );
outchar( 'a' );
outchar( 'a' );
outchar( 'a' );
outchar( 'a' );
outchar( 'd' );
outchar( '!' );
#endif
                  }
#if defined (VVHDLC_TRACE) 
outchar( '!' );
outchar( vcv_rx_packet_ptr->junk );
outchar( ',' );
outchar( vcv_rx_packet_ptr->data[0] );
outchar( vcv_rx_packet_ptr->data[1] );
outchar( vcv_rx_packet_ptr->data[2] );
outchar( '!' );
#endif    
                   /* Get next rx packet from V42 */
                   vcv_rx_packet_ptr = (VCV_HDLC_PACKET_TYPE *)vcv_rx();
                
                   /* If a new packet is ready, set up it's pointers */
                   if ( vcv_rx_packet_ptr )
                   {
                         rx_char_count = 0;
                         vcv_rx_packet_ptr->status = 0;
                         vcv_rx_packet_ptr->count = 0;
                         vcv_rx_data_ptr = vcv_rx_packet_ptr->data;
                    }
           }
        }
        else
        {
            line_bg_error_flags = 1;
        }
    }

    dce_status_semaphore = 0;
    dce_length_semaphore = 0;
    
    /* clear semaphores */
    dspdrv_WriteCram(DSP_CP_DATA_LENGTH, &dce_length_semaphore, 1);
    dspdrv_WriteCram(DSP_CP_DATA_STATUS, &dce_status_semaphore, 1);
}

/******************************************************************************
/
/    Routine:    vcv_data_special_int
/
/    Author:     RSA
/
/    Creation Date:    December 14, 1994
/
/    Description:    Service a special condition interrupt for vcv
/
/    Input Parameters: None
/
/    Output Parameters: None
/
/    Global Variables Changed:  None
/
/    Users:    line_special_int
/
/    *************************************************************
/    *            Modifications                *
/    *************************************************************
/
/    Author & Date:    RSA
/    Description:
/
*****************************************************************************/
void vcv_data_special_int(void)
{
   /*     No special interrupts for vcv data protocol */
} 


