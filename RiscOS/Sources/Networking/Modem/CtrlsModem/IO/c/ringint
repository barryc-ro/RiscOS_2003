/* ringint.c 1-24-96 */


#include   "sys_def.h"
#include   "acu_def.h"
#include    "callerid.h"
#include   "acu_mem.h"  /* for st_orig */
#include    "ptt.h"
#include    "homolig1.h"
#include 	"hmg_mem1.h"

extern ubyte CountryInfo;
extern country_ring_table  PTT_Ring[];
extern struct Homg_var1_Tag	homg_var1;

extern ubyte  sleep_timer_val;       /* for sleep mode */
extern ubyte line_io_enabled;
extern void  output_info(ubyte *,ubyte);
extern char *strcpy(char *, const char *);
extern char *strcat(char *, const char *);
#define RING_START1					1
#define RNGS_TO_BE_SKIPPED					2

ubyte    tembuf[4];
ubyte    ring_toggle, old_value=0;

uword    msec_counter = 0;
uword    ringon_time = 0;

ubyte    cidbuf[BUFLEN];
ubyte    ring_pattern[8];
ubyte    seq = 0;
ubyte    calling  = FALSE;
ubyte    pattern_start = FALSE;
ubyte    osilating = FALSE;
ubyte    ring_on = FALSE;
ubyte    first_on = TRUE;

ubyte  date[8], timebuf[8], nmbr[16], name[16], mesg[81];
ubyte	intT_count1;
uword	NoBreak_ringon_time;
uword	rng_segment_B;	//debug ring1


extern  ubyte cid_result;
extern  ubyte fax_class;
extern  ubyte voice_dist_ring_time;
extern  ubyte voice_dist_ring_active;


extern   ubyte s[];
extern   ubyte voice_caller_id;

extern   void  set_callerid_relay(uword);
extern   ubyte callerid_msg_seg(ubyte*);
extern   void  set_dsp_cid(ubyte);
extern   void  output_send_cr_lf(void);
extern   void  init_cid(void);
extern   ubyte get_cid_data(ubyte buf[]);

/*mrm8896*/
extern   ubyte  caller_id_end ;

void    init_varibles(void);
void    validate_ring(void);
void    process_cadence(void);
void    d_to_a2(ubyte val, ubyte buf[]);
void 	d_to_a4(uword val, ubyte buf[]);

/*
extern void  modem_dte_ri(ubyte);
extern void  dte_ri(ubyte);
*/
extern ubyte vce_mode;
extern void outchar(unsigned char);

#define	TRANSMIT_MODE	2
#define	RECEIVE_MODE	3

void  init_varibles()
{
  msec_counter = 0;

  ringon_time = 0;
  seq = 0;
  calling = FALSE;

  pattern_start = FALSE;

/* shujin 8/15/97 for enable RI in HMSR
  dte_ri(OFF);
*/

  osilating = FALSE;
  ring_on = FALSE;
  first_on = TRUE;
#ifndef __riscos
  sleep_timer_val = 0;       /* for sleep mode */
#endif
  ring_toggle =0;
  old_value=0;
  intT_count1 = 0;
  NoBreak_ringon_time = 0;
	homg_var1.rng_minT = 255;	 //debug ring1
	homg_var1.rng_maxT = 0;   //debug ring1
}

/****************************************************************************
/
/    Routine: validate_ring
/
/    Author : CIRRUS LOGIC
/
/    Creation Date: 01/24/96
/
/    Description : This Routine is called when a ring Interrupt happen
/                  to sum all ring on time
/
/    Users: coming ring
/
/       Reason: Needed for the +VDR and +VDT.
/
/
****************************************************************************/
void  validate_ring()
{
	ubyte i;

	uword  min_int_period,  max_int_period;
	uword  min_ringon_time;
	uword  min_ringoff_time;


/* for hardware Int bug, each int comes with 10-20 redudant ints */
	if(msec_counter <= 2 )  return;


	if(( st_orig.state == ORIG_DIAL) || ( st_orig.state == PROCESS_DIAL_MOD))
	   return;  /* Don't process Ring while pulse dialing */



	min_int_period     = PTT_Ring[CountryInfo].Int_period_min;
	max_int_period     = PTT_Ring[CountryInfo].Int_period_max;
	min_ringon_time    = PTT_Ring[CountryInfo].Ringon_time_min;
	min_ringoff_time   = PTT_Ring[CountryInfo].Ringoff_time_min;


	if(pattern_start == TRUE )
	{

		if(osilating == TRUE)
		{
/* stardard ring frq 15.3 - 68, i.e. period 65.4 - 14.7 mSec */
/* test ring frq     14.0 - 75 Hz,   period 71   - 13.3 */
/* validate ring from period */

/* to prevent first several invalid osilation */

       	if (!ring_toggle)
       	{
          	ring_toggle=1;
           	old_value = msec_counter;
   #ifdef DEBUG_PORT
   outhex_cr_lf(0xfd);
	PrintMsg("H=");
//  		 outchar('H=');
//       outhex_cr_lf(msec_counter);
   outhex(msec_counter);
   outchar(' ');
   #endif

#if 0
               for (i=0 ; i< BUFLEN; i++)
                 	cidbuf[i] = 0x00;

					for (i=0 ; i<4 ; i++)
                 	tembuf[i] = 0;
					voice_dist_ring_time = msec_counter;
              	d_to_a2(voice_dist_ring_time,tembuf);
               strcpy((char *)cidbuf,(char *)tembuf);
              	strcat((char *)cidbuf,"=H");
					output_info(cidbuf,VERBOSE_FORM);
#endif
        	}
         else 	 //(ring_toggle == 1)
         {
   #ifdef DEBUG_PORT
//   PrintMsg("L=");
//  	 outchar('L=');
//     outhex_cr_lf(msec_counter);
   outhex(msec_counter);
   outchar(' ');
   #endif
           	ring_toggle=0;
				rng_segment_B = msec_counter;	//debug ring1
           	msec_counter +=old_value;
           	outchar(msec_counter);

/*
//            if(ringon_time<220 && ( msec_counter < 16 || msec_counter > 48) )
//               ;
*/
		   //	if(ringon_time <  min_ringon_time &&
		   //	msec_counter < min_int_period || msec_counter > max_int_period))
		   //	;
         //	else
         //   	ringon_time = ringon_time + msec_counter;

		   //	if(msec_counter > PTT_Ring[CountryInfo].Silent_time_min)
				if(msec_counter > 100)
//					|| (msec_counter < 5))
				{;}
				else
				{
					intT_count1++;
   #ifdef DEBUG_PORT
//   PrintMsg("intT_count1=");
//  		 outchar('S=');
//       outhex_cr_lf(intT_count1 );
   outhex(msec_counter);
   outchar('=');
  	outchar('S');
   outchar(' ');

  	outchar('C');
	outchar('=');
	outhex(intT_count1);
   outchar(' ');
	outchar(' ');
   #endif
					if(intT_count1 > RNGS_TO_BE_SKIPPED) // discard the first T, 2nd T
					{
						NoBreak_ringon_time += msec_counter;
						if(homg_var1.rng_minT > msec_counter)
							homg_var1.rng_minT = msec_counter;
						if(homg_var1.rng_maxT < msec_counter)
							homg_var1.rng_maxT = msec_counter;
					}

					if(homg_var1.Display_Rng_T > 1)
					{
 // display T, segmament A, segment B; where T = A+B
               	for (i=0 ; i< BUFLEN; i++)
                 		cidbuf[i] = 0x00;
						for (i=0 ; i<4 ; i++)
                 		tembuf[i] = 0;
						voice_dist_ring_time = msec_counter;
              		d_to_a2(voice_dist_ring_time,tembuf);
              		strcpy((char *)cidbuf,"T=");
               	strcat((char *)cidbuf,(char *)tembuf);

						for (i=0 ; i<4 ; i++)
                 		tembuf[i] = 0;
						voice_dist_ring_time = old_value;
              		d_to_a2(voice_dist_ring_time,tembuf);
              		strcat((char *)cidbuf," H=");
               	strcat((char *)cidbuf,(char *)tembuf);

						for (i=0 ; i<4 ; i++)
                 		tembuf[i] = 0;
						voice_dist_ring_time = rng_segment_B;
              		d_to_a2(voice_dist_ring_time,tembuf);
              		strcat((char *)cidbuf," L=");
               	strcat((char *)cidbuf,(char *)tembuf);

						for (i=0 ; i<4 ; i++)
                 		tembuf[i] = 0;
						voice_dist_ring_time = intT_count1;
              		d_to_a2(voice_dist_ring_time,tembuf);
              		strcat((char *)cidbuf," C=");
               	strcat((char *)cidbuf,(char *)tembuf);

						output_info(cidbuf,VERBOSE_FORM);
					}//if(homg_var1.Display_Rng_T > 1)
				}
				rng_segment_B = msec_counter;
         	ringon_time = ringon_time + msec_counter;
         }
      }
      else   /* osilating == FALSE */
      {

/* in USA, ring frequency is about 20Hz (50mSec), do related adjustment */
        	ring_pattern[seq] = (msec_counter-25+50)/100; /* 0.1s unit */

        	if(voice_dist_ring_active)
        	{
           	voice_dist_ring_time  = ring_pattern[seq];
           	d_to_a2(voice_dist_ring_time,tembuf);
/*mrm21897*/
            for (i=0 ; i< BUFLEN; i++)
            {
             	cidbuf[i] = 0;
            }

           	strcpy((char *)cidbuf,"DROF=");
           	strcat((char *)cidbuf,(char *)tembuf);

           	output_info(cidbuf,NUMERIC_FORM);  /* CR, LF after */
				for (i=0 ; i< BUFLEN; i++)
            {
             	cidbuf[i] = 0;
            }
/* ring off time, but not the final */
        	}
      }  /* osilating == FALSE */
  	}
  	else  /* pattern_start == FALSE */
  	{
    	if(seq != 0)
    	{
/* for preventing wrong int

//        if(msec_counter < 1000)   return;
8/29/97
*/
        	if ( msec_counter < min_ringoff_time )   return;


/* ring off time, final */
        	ring_pattern[seq] = (msec_counter-25+50)/100;

        	if(voice_dist_ring_active)
        	{
           	voice_dist_ring_time  = ring_pattern[seq];
           	d_to_a2(voice_dist_ring_time,tembuf);
           	for (i=0 ; i< BUFLEN; i++)
           	{
             	cidbuf[i] = 0;
           	}
           	strcpy((char *)cidbuf,"DROF=");
           	strcat((char *)cidbuf,(char *)tembuf);

           	if( fax_class == 8 ) strcat((char *)cidbuf,"\x0d\x0a\x10.");

           	output_info(cidbuf,NUMERIC_FORM);  /* CR, LF after */

				for (i=0 ; i< BUFLEN; i++)
            {
              	cidbuf[i] = 0;
            }
/* <DLE><.>, Voice message end   */
        	}  //if(voice_dist_ring_active)

        	seq++;
        	ring_pattern[seq] = 0xff;
        	seq = 0;
        	first_on = TRUE;

        	if( voice_caller_id !=0 && s[1]==1 && msec_counter >= 1000 &&
          	((vce_mode != TRANSMIT_MODE) && (vce_mode != RECEIVE_MODE)))
/* ramn 4/5/96 */
        	{
           	set_dsp_cid(0);
           	set_callerid_relay( CID_RELAY_OFF);
        	}
     	}  //if(seq != 0)

   	ring_toggle = RING_START1;  //
     	calling = TRUE;
     	ringon_time = 0;
     	pattern_start = TRUE;
   /* shujin 8/15/97 for enable RI in HMSR
//     dte_ri(ON);
       */
  	} /* pattern_start == FALSE */

  	osilating = TRUE;
  	msec_counter = 0;
} /* end */


/*******************************************************************************
/
/    Routine: process_cadence
/
/    Author : CIRRUS LOGIC
/
/    Creation Date: 01/24/96
/
/    Description : This Routine is called every 10msec
/                  caculate the time passed, save it into ring_pattern[seq]
/             to get cadence, ex: 4 2 4 20
/
/    Users: acu_timer() in acu.c
/
/    Reason: Needed for the +VDR and +VDT.
/
/
*************************************************************************/

void    process_cadence()  /* be called every 10 msec */
{
	ubyte i;
	ubyte avg_T;

	uword   min_silent_time;
//	uword	max_silent_time;
	uword   min_ringon_time, max_ringon_time;
	uword   max_ringoff_time;


	min_silent_time     = PTT_Ring[CountryInfo].Silent_time_min;
//	max_silent_time     = PTT_Ring[CountryInfo].Silent_time_max;
	min_ringon_time     = PTT_Ring[CountryInfo].Ringon_time_min;
	max_ringon_time     = PTT_Ring[CountryInfo].Ringon_time_max;
	max_ringoff_time   = PTT_Ring[CountryInfo].Ringoff_time_max;


	if(calling == TRUE)
	{
    	if(osilating == TRUE)
    	{
/*consider minimum fr 15Hz, 15% error, period~=75 msec */
/* silent time 125 - 490 msec
//         if( msec_counter > 80 && msec_counter < 120)    {
*/
			if( msec_counter > 80 && msec_counter < min_silent_time)
			{
    			if( voice_caller_id !=0 && s[1]==1 &&
       			((vce_mode != TRANSMIT_MODE) &&
       			(vce_mode != RECEIVE_MODE) )    )  /* ramn 4/5/96 */
    			{
        			cid_result = get_cid_data(cidbuf);
    			}
			}
/* move data from comram into cidbuf[] */
/* this code is in 10msec background, will be called 5 times; */

/* m sec
//       else if( msec_counter > 120)    {
8/29/97
*/
        	else if( msec_counter > min_silent_time)
        	{

/* min and max duration
//              if(ringon_time > 220 && ringon_time < 4450 )     {
8/29/97
*/
				/* first ring for Norway is looser */
				/* sl_code, March 26 1998, for Sweden: ringon_time >= 150 ... */
           	if( (ringon_time >= min_ringon_time && ringon_time <= max_ringon_time) ||
					 ((ringon_time >= 150  && ringon_time <= 2300 ) && (s[1] == 0) &&
					 (country_area_code1 == Norway_a_code1))
				  )
            {
/*ring on time, .1s*/
              	if(intT_count1 > (RNGS_TO_BE_SKIPPED+1))
					{
              		NoBreak_ringon_time-= rng_segment_B;// discard the last ring.
						// discard the first and last ring for averaging
              		avg_T = (NoBreak_ringon_time/(intT_count1 - (RNGS_TO_BE_SKIPPED + 1)) );
					}


              	if(	((avg_T >= PTT_Ring[CountryInfo].Int_period_min) &&
                 		 (avg_T <= PTT_Ring[CountryInfo].Int_period_max))
						|| ((avg_T >= 17) && (avg_T <= 22) && (country_area_code1 == Sweden_a_code1))
					  )
					{
              		ring_pattern[seq] = (ringon_time+25+50)/100;

//            	SHOW_VAR1234
					if(homg_var1.Display_Rng_T > 0)
					{
               	for (i=0 ; i< BUFLEN; i++)
                 		cidbuf[i] = 0x00;

						for (i=0 ; i<4 ; i++)
                 		tembuf[i] = 0;
						voice_dist_ring_time = homg_var1.rng_maxT;
              		d_to_a2(voice_dist_ring_time,tembuf);
              		strcpy((char *)cidbuf,"M=");
               	strcat((char *)cidbuf,(char *)tembuf);

						for (i=0 ; i<4 ; i++)
                 		tembuf[i] = 0;
						voice_dist_ring_time = homg_var1.rng_minT;
              		d_to_a2(voice_dist_ring_time,tembuf);
              		strcat((char *)cidbuf," m=");
               	strcat((char *)cidbuf,(char *)tembuf);

						for (i=0 ; i<4 ; i++)
                 		tembuf[i] = 0;
						voice_dist_ring_time = avg_T;
              		d_to_a2(voice_dist_ring_time,tembuf);
              		strcat((char *)cidbuf," A=");
               	strcat((char *)cidbuf,(char *)tembuf);

						for (i=0 ; i<4 ; i++)
                 	tembuf[i] = 0;
						voice_dist_ring_time = intT_count1;
              		d_to_a2(voice_dist_ring_time,tembuf);
              		strcat((char *)cidbuf," C=");
               	strcat((char *)cidbuf,(char *)tembuf);

						for (i=0 ; i<4 ; i++)
                 	tembuf[i] = 0;
						voice_dist_ring_time = ringon_time;
              		d_to_a4(voice_dist_ring_time,tembuf);
              		strcat((char *)cidbuf," ON=");
               	strcat((char *)cidbuf,(char *)tembuf);

						output_info(cidbuf,VERBOSE_FORM);
#ifdef DEBUG_PORT
//   PrintMsg("intT_count1=");
				      outhex_cr_lf(0xfe);

				  		outchar('M');
						outchar('=');
					   outhex(homg_var1.rng_maxT);
						outchar('  ');

				  		outchar('m');
						outchar('=');
					   outhex(homg_var1.rng_minT);
						outchar('  ');

				  		outchar('A');
						outchar('=');
					   outhex(avg_T);
						outchar('  ');

				  		outchar('C');
						outchar('=');
					   outhex(intT_count1);
						outchar('  ');
//       outhex_cr_lf(intT_count1 );
//   outhex();
					   outchar('  ');
#endif
						homg_var1.rng_minT = 255;
						homg_var1.rng_maxT = 0;
              	} //if(homg_var1.Display_Rng_T > 0)
// end        	SHOW_VAR1234

/*mrm8896*/

              		if( voice_caller_id !=0 && s[1]==1 && (caller_id_end == 0) &&
                 	( (vce_mode != TRANSMIT_MODE) &&
                 	(vce_mode != RECEIVE_MODE) )     )  /* ramn 4/5/96 */
              		{
              			if(cid_result == OK)
              				cid_result = callerid_msg_seg(cidbuf);
/* move data from cidbuf[] into date[], time[], nmbr[], name[], mesg[] */
/*mrm21897*/
/*clear the cidbuf to make strcat function work*/
                  	for (i=0 ; i< BUFLEN; i++)
                  	{
                  		cidbuf[i] = 0;
                  	}
                  	if(voice_caller_id == 1 && cid_result == OK)
                  	{
                  		if( fax_class == 8 )
									/* ramn 6/28/96 */
                    			strcpy((char*)cidbuf,"\x10X\x0d\x0a");

                  		if( fax_class ==8 ) strcat((char *)cidbuf,"DATE=");
                  		else                strcpy((char *)cidbuf,"DATE=");

                  		strcat((char *)cidbuf,(char *)date);

                  		strcat((char *)cidbuf,"\x0d\x0aTIME=");	/* ramn 6/28/96 */
                  		strcat((char *)cidbuf,(char *)timebuf);

                  		strcat((char *)cidbuf,"\x0d\x0aNMBR=");	/* ramn 6/28/96 */
                  		strcat((char *)cidbuf,(char *)nmbr);


                  		if(name[0] != 0)
                  		{
                     		strcat((char *)cidbuf,"\x0d\x0aNAME=");	/* ramn 6/28/96 */
                     		strcat((char *)cidbuf,(char *)name);
                     	}
                     	if(mesg[0] != 0)
                     	{
                     		strcat((char *)cidbuf,"\x0d\x0aMESG=");	/* ramn 6/28/96 */
                     		strcat((char *)cidbuf,(char *)mesg);
                     	}
                     	if( fax_class ==8 )
                     		strcat((char *)cidbuf,"\x0d\x0a\x10.");	/* ramn 6/28/96 */

                     	output_info(cidbuf,VERBOSE_FORM);

								for (i=0 ; i< BUFLEN; i++)
                     	{
                     		cidbuf[i] = 0;
                     	}
/*mrm8896*/
                  		caller_id_end = 1;
	               	}/* if(voice_caller_id == 1 && cid_result == OK)    */
                  	else if(voice_caller_id == 2 && cid_result == OK)
                  	{
/*mrm21897*/
                  		for (i=0 ; i< BUFLEN; i++)
                  		{
                    			cidbuf[i] = 0;
                  		}

                  		if( fax_class ==8 )
                  		{
                    			strcpy((char *)cidbuf,"\x10X\x0d\x0a");	/* ramn 6/28/96 */
                    			strcat((char *)cidbuf,"MESG=");
                  		}
                  		else
                  			strcpy((char *)cidbuf,"MESG=");

                  		strcat((char *)cidbuf,(char *)mesg);

                  		if( fax_class ==8 )
                    		strcat((char *)cidbuf,"\x0d\x0a\x10.");	/* ramn 6/28/96 */

                  		output_info(cidbuf,VERBOSE_FORM);
/*mrm8896*/


   							for (i=0 ; i< BUFLEN; i++)
                  		{
                    			cidbuf[i] = 0;
                  		}

								caller_id_end = 1;
                  	}//else if(voice_caller_id == 2 && cid_result == OK)
                     else if(voice_caller_id !=0 && cid_result == CID_ERROR)
                     {
/*mrm21897*/
                     	for (i=0 ; i< BUFLEN; i++)
                     	{
                     		cidbuf[i] = 0;
                     	}
                     	if( fax_class ==8 )
                     	{
                     		strcpy((char *)cidbuf,"\x10X\x0d\x0a");	/* ramn 6/28/96 */
                     		strcat((char *)cidbuf,"ERRM=ICLID_202");
                     	}
                     	else
                     		strcpy((char *)cidbuf,"ERRM=ICLID_202");

                     	if( fax_class ==8 )
                     		strcat((char *)cidbuf,"\x0d\x0a\x10.");	/* ramn 6/28/96 */

                     	output_info(cidbuf,VERBOSE_FORM);

								for (i=0 ; i< BUFLEN; i++)
                     	{
                     		cidbuf[i] = 0;
                     	}
                     }//else if(voice_caller_id !=0 && cid_result == CID_ERROR)
                     else   ;

/* to prevent repeat drof info, because cidbuf is shared by cid and vdr */
                 	}//if( voice_caller_id !=0 && s[1]==1 && (caller_id_end == 0) &&
					 	//  ( (vce_mode != TRANSMIT_MODE) &&
					 	//  (vce_mode != RECEIVE_MODE) )     )  /* ramn 4/5/96 */

                 	if(voice_dist_ring_active)
                 	{
							for (i=0 ; i<4 ; i++)
                     {
                     	tembuf[i] = 0;
                     }

                    	voice_dist_ring_time  = ring_pattern[seq];
                    	d_to_a2(voice_dist_ring_time,tembuf);
                    	/*mrm21897*/
                     for (i=0 ; i< BUFLEN; i++)
                     {
                     	cidbuf[i] = 0x00;
                     }


                    	if( fax_class == 8 && first_on != FALSE)
                    	{
                     	strcpy((char *)cidbuf,"\x10X\x0d\x0a");	/* ramn 6/28/96 */
                     	strcat((char *)cidbuf,"DRON=");
                    	}
                    	else
              				strcpy((char *)cidbuf,"DRON=");

                    	strcat((char *)cidbuf,(char *)tembuf);

                    	output_info(cidbuf,VERBOSE_FORM);
 							for (i=0 ; i< BUFLEN; i++)
                     {
                     	cidbuf[i] = 0;
                     }

/*VERVOSE_FORM => CR,LF before & after */

                    		first_on = FALSE;
                 	}//if(voice_dist_ring_active)
                 	ringon_time = 0;
                 	osilating = FALSE;  /* no osilating on the line */
                 	seq++;              /* ring on time */
                 	ring_on = TRUE;
           		 //	ring_toggle= RING_START1;  //jj99
						NoBreak_ringon_time = 0;
						intT_count1 = 0;
					}//if((avg_T > min_int_period) && (avg_T < max_int_period))
               else
             		init_varibles();

            }//if(ringon_time > min_ringon_time && ringon_time < max_ringon_time)
				 /* if(ringon_time > 220 && ringon_time < 4450 ) */
             else // out of ringon_time range
             		init_varibles();
         }  // else if( msec_counter > min_silent_time)
         	else ;
      } //if(osilating == TRUE)
      else ///* osilating == FALSE */
      {
/*max ring off time is 4450
//       if( msec_counter > 5000  )     {
8/29/97
*/
        	if( msec_counter > max_ringoff_time)
        	{

           	if( voice_caller_id !=0 &&
            ( (vce_mode != TRANSMIT_MODE) &&
            ( vce_mode != RECEIVE_MODE ) )    )  /* ramn 4/5/96 */
           	{
              	set_dsp_cid(0);
              	set_callerid_relay( CID_RELAY_OFF);
           	}
           	ring_pattern[seq] = (max_ringoff_time+50)/100;   /* 0.1 sec as unit */
/* ring off time, end */


           	if(voice_dist_ring_active)
           	{
					for (i=0 ; i<4 ; i++)
               {
                 	tembuf[i] = 0;
               }

           		voice_dist_ring_time  = ring_pattern[seq];
           		d_to_a2(voice_dist_ring_time,tembuf);

               /*mrm21897*/
               for (i=0 ; i< BUFLEN; i++)
               {
                  cidbuf[i] = 0;
               }

           		strcpy((char *)cidbuf,"DROF=");
          		strcat((char *)cidbuf,(char *)tembuf);
           		if( fax_class == 8 )
          			strcat((char *)cidbuf,"\x0d\x0a\x10.");		/* ramn 6/28/96 */
           		output_info(cidbuf,VERBOSE_FORM);  /* CR, LF after */
					for (i=0 ; i< BUFLEN; i++)
               {
                 	cidbuf[i] = 0;
               }
            }//if(voice_dist_ring_active)

            seq++;
            ring_pattern[seq] = 0xff;   /* end indicator */
            init_varibles();
        	}//if( msec_counter > max_ringoff_time)

/* max case, 490 msec */
#if INTERNATIONAL_CODE == 1
        	else if(msec_counter > (min_silent_time + 50)  && ring_on == TRUE )
#else
        	else if(msec_counter > REPORT  && ring_on == TRUE )
#endif
        	{

/* shujin 8/15/97, generates lots of RI off if without ring_on == TRUE
//          dte_ri(OFF);
*/
/* 2-26-96 shujin, for callerid */
           	if( voice_caller_id !=0 && s[1] == 0 &&
	         (vce_mode != TRANSMIT_MODE) &&
            (vce_mode != RECEIVE_MODE)       )  /* ramn 4/5/96 */
           	{
            	set_callerid_relay( CID_RELAY_ON);
            	init_cid();
/* for prevent DCE stealing info from COMRAM, no callerid info available */
            	line_io_enabled = FALSE;
            	set_dsp_cid(1);
           	}
           	ring_on = FALSE;
           	pattern_start = FALSE;
#ifndef __riscos
           	sleep_timer_val = 0;       /* init the variable */
#endif

        	} //else if(msec_counter > REPORT  && ring_on == TRUE )
     	} /* else ( osilating == FALSE */
  	} /*  if(calling == TRUE) */
}           /* end */


void d_to_a2(ubyte val, ubyte buf[])
{
  ubyte tem2,tem1, i;

  i=0;
  tem1 = val % 10;
  tem2 = val / 10;
  tem2 = tem2 % 10;

  if(tem2 == 0) buf[i++] = tem1 + '0';
  else  { buf[i++]=tem2+'0'; buf[i++]=tem1+'0'; }

  buf[i] = 0;
}


void d_to_a4(uword val, ubyte buf[])
{
  ubyte tem2,tem1, i;
  ubyte tem4,tem3;

  i=0;
  tem1 = val % 10;
  val  = val / 10;
  tem2 = val % 10;

  val  = val / 10;
  tem3 = val % 10;

  val  = val / 10;
  tem4 = val % 10;



//  if(tem2 == 0) buf[i++] = tem1 + '0';
//  else  { buf[i++]=tem2+'0'; buf[i++]=tem1+'0'; }

buf[i++]=tem4+'0';
buf[i++]=tem3+'0';
buf[i++]=tem2+'0';
buf[i++]=tem1+'0';

  buf[i] = 0;
}
