#
#     Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994. 
#     All Rights Reserved by:
#        RSA
#        7701 Six Forks Road
#        Suite 201
#        Raleigh, NC  27615
#        (919) 846-7171
#
#    This document contains material confidential to RSA. Its contents
#    must not be revealed, used or disclosed to anyone or company without
#    written permission by RSA. The information contained herein is solely
#    for the use of RSA.
#
#	EXAMPLE MAKE FILE FOR RSA 68302 V.42 SYSTEM
#
#	(Using OPUS MAKE and Microtec Research Inc. Software Development Tools)
#
#       USEAGE: 
#       To compile:
#       'makel -f v42.mkf <make list>' to create the V.42 code module and it's 
#           sub-modules, where <make list> can be any combination of the 
#           following:
#               v42code    - Standard V.42 code
#               btlzcode   - V.42bis code
#               btlzstub   - V.42bis stubbed
#               cl5code    - MNP Class 5 code
#               cl5stub    - MNP Class 5 stubbed
#               m10code    - MNP Class 10 code
#               m10stub    - MNP Class 10 stubbed
#               attff	   - MNP10 AT&T Data pump driver code
#               dpstub     - MNP10 Data pump driver stubbed
#               iocode	   - DTE and DCE I/O code
#               iostub     - DTE and DCE I/O stubbed
#               etccode    - V42 ETC code
#               etcstub    - V42 ETC stubbed
#
#       To compile and link:
#       'makel -f v42.mkf link <make list> sys' 
#           where:
#               link    - to add linker requirements 
#               sys     - to link the ACU with external system routines stubbed.
#

#
# V.42 Submodules
#
V42 = v42.obj v42_dat.obj lapm_act.obj lapm_bg.obj lapm_brk.obj lapm_ctl.obj \
      lapm_fnc.obj lapm_int.obj lapm_lib.obj lapm_que.obj lapm_rej.obj \
      lapm_rx.obj lapm_sta.obj lapm_tab.obj lapm_tmr.obj lapm_tst.obj lapm_fg.obj \
      lapm_tx.obj lapm_xid.obj lapm_dat.obj mnp.obj mnp_la.obj \
      mnp_pack.obj mnp_lib.obj mnp_ln.obj mnp_lna.obj mnp_lr.obj mnp_lrr.obj \
      mnp_que.obj mnp_comm.obj mnp_bg.obj mnp_lt.obj mnp_dat.obj mnp_ld.obj 

BTLZ = btlapm.obj btdecode.obj btencode.obj btinit.obj btlz_dat.obj btdict.obj

BTLZSTUB = btstub.obj

CL5 =	cl5_dat.obj mnp_af.obj

CL5STUB =   mnp_no5.obj

M10 =	m10_fnc.obj m10_fffb.obj m10_lm.obj m10_lk.obj m10_pref.obj\
	m10_lib.obj m10_dat.obj m10_btlz.obj m10_if.obj mnp_if.obj

M10STUB = m10_stub.obj

ATTFF = dp00mn05.obj dp00cd05.obj dp00gp05.obj dp00as05.obj

DPSTUB	= dp_stub.obj

IO =	dte.obj linecrc.obj linelink.obj iomem.obj \
	lineasyn.obj linedetc.obj linelapm.obj linematc.obj linesync.obj

IOSTUB = dte_stub.obj dce_stub.obj

ETC = v42_etc.obj lapm_etc.obj

ETCSTUB = v42_estb.obj

OTHER = acu_stub.obj

#
# Tools 
#
AFLAGS =  -fg,case
CSFLAGS = -c -C -Fsm -Mca -nQ -Ob -Og
CFLAGS = -c -C -Fsm -Mca -nQ -Ob -Og -Os
LFLAGS = -fx
CC = mcc68k
AS = asm68k
LK = lnk68k

#
# Help
#
useage:
                @@ echo 
                @@ echo To compile V.42 and any V.42 sub-modules:
                @@ echo 'makel -f v42.mkf [sub-module] [sub-module]...'
                @@ echo     Argument [sub-module]:
                @@ echo         v42code    - Standard V.42 code
                @@ echo         btlzcode   - V.42bis code
                @@ echo         btlzstub   - V.42bis stubbed
                @@ echo         cl5code    - MNP Class 5 code
                @@ echo         cl5stub    - MNP Class 5 stubbed
                @@ echo         m10code    - MNP Class 10 code
                @@ echo         m10stub    - MNP Class 10 stubbed
                @@ echo         attff	   - MNP10 AT&T Data pump driver code
                @@ echo         dpstub     - MNP10 Data pump driver stubbed
                @@ echo         iocode	   - DTE and DCE I/O code
                @@ echo         iostub     - DTE and DCE I/O stubbed
                @@ echo         etccode    - V42 ETC code
                @@ echo         etcstub    - V42 ETC stubbed
                @@ echo 
                @@ echo To compile and link V.42 and any sub-modules:
                @@ echo 'makel -f v42.mkf link [sub-module]...[sub-module] sys' 
                @@ echo    where:
                @@ echo         LINK       - add linker requirements 
                @@ echo         SYS        - add external system stubs

#
# V.42 Compile Submodules
#
v42code:    $(V42)  
            @@ echo $(V42:S/.*/LOAD &$(RETURN)/) >> link.cmd

btlzcode:   $(BTLZ)
            @@ echo $(BTLZ:S/.*/LOAD &$(RETURN)/) >> link.cmd

btlzstub:   $(BTLZSTUB)
            @@ echo $(BTLZSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd

cl5code:    $(CL5)
            @@ echo $(CL5:S/.*/LOAD &$(RETURN)/) >> link.cmd

cl5stub:    $(CL5STUB)
            @@ echo $(CL5STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd

m10code:    $(M10)
            @@ echo $(M10:S/.*/LOAD &$(RETURN)/) >> link.cmd

m10stub:    $(M10STUB)
            @@ echo $(M10STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd

attff:	    $(ATTFF)
            @@ echo $(ATTFF:S/.*/LOAD &$(RETURN)/) >> link.cmd

dpstub:     $(DPSTUB)
            @@ echo $(DPSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd

iocode:	    $(IO)
            @@ echo $(IO:S/.*/LOAD &$(RETURN)/) >> link.cmd

iostub:     $(IOSTUB)
            @@ echo $(IOSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd

etccode:    $(ETC)
            @@ echo $(ETC:S/.*/LOAD &$(RETURN)/) >> link.cmd

etcstub:    $(ETCSTUB)
            @@ echo $(ETCSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd

#
# V.42 Link Submodules
#
SYS:        
sys:        $(OTHER)
            @@ echo $(OTHER:S/.*/LOAD &$(RETURN)/) >> link.cmd
            @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
            @@ echo END >> link.cmd
  	    $(LK)  -c link.cmd $(LFLAGS) -m > link.map

link:
LINK:
            @@ echo CHIP 68000 > link.cmd
            @@ echo LISTABS >> link.cmd
            @@ echo SECT zerovars=$$800 >> link.cmd
            @@ echo SECT startcode=$$400 >> link.cmd
            @@ echo SECT code=$$400500 >> link.cmd
            @@ echo SECT reset=$$000000 >> link.cmd
            @@ echo public ????STACKTOP=$$0fffe >> link.cmd
            @@ echo ORDER code,literals,strings,const,vars >> link.cmd

#
# V.42 Compile and Link Submodules
#
v42+btlz+cl5+m10+ff+io: $(V42) $(BTLZ) $(CL5) $(M10) $(ATTFF) $(IO) $(OTHER) link
                    @@ echo $(BTLZ:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(CL5:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(M10:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(ATTFF:S/.*/LOAD &$(RETURN)/) >>  link.cmd
                    @@ echo $(IO:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                    @@ echo END >> link.cmd
                    $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+btlz+cl5+m10+io: $(V42) $(BTLZ) $(CL5) $(M10) $(DPSTUB) $(IO) $(OTHER) link
                    @@ echo $(BTLZ:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(CL5:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(M10:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(DPSTUB:S/.*/LOAD &$(RETURN)/) >>  link.cmd
                    @@ echo $(IO:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                    @@ echo END >> link.cmd
                    $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+btlz+cl5+io:    $(V42) $(BTLZ) $(CL5) $(M10STUB) $(IO) $(OTHER) link
                    @@ echo $(BTLZ:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(CL5:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(M10STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(IO:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                    @@ echo END >> link.cmd
                    $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+btlz+m10+ff+io: $(V42) $(BTLZ) $(CL5STUB) $(M10) $(ATTFF) $(IO) $(OTHER) link
                    @@ echo $(BTLZ:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(CL5STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(M10:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(ATTFF:S/.*/LOAD &$(RETURN)/) >>  link.cmd
                    @@ echo $(IO:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                    @@ echo END >> link.cmd
                    $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+cl5+m10+ff+io:  $(V42) $(BTLZSTUB) $(CL5) $(M10) $(ATTFF) $(IO) $(OTHER) link
                    @@ echo $(BTLZSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(CL5:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(M10:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(ATTFF:S/.*/LOAD &$(RETURN)/) >>  link.cmd
                    @@ echo $(IO:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                    @@ echo END >> link.cmd
                    $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+m10+ff+io:	    $(V42) $(BTLZSTUB) $(CL5STUB) $(M10) $(ATTFF) $(IO) $(OTHER) link
                    @@ echo $(BTLZSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(CL5STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(M10:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(ATTFF:S/.*/LOAD &$(RETURN)/) >>  link.cmd
                    @@ echo $(IO:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                    @@ echo END >> link.cmd
                    $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+cl5+io:	    $(V42) $(BTLZSTUB) $(CL5) $(M10STUB) $(IO) $(OTHER) link
                    @@ echo $(BTLZSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(CL5:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(M10STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(IO:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                    @@ echo END >> link.cmd
                    $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+cl5+m10+io:     $(V42) $(BTLZSTUB) $(CL5) $(M10) $(DPSTUB) $(IO) $(OTHER) link
                    @@ echo $(BTLZSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(CL5:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(M10:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(DPSTUB:S/.*/LOAD &$(RETURN)/) >>  link.cmd
                    @@ echo $(IO:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                    @@ echo END >> link.cmd
                    $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+btlz+io:	    $(V42) $(BTLZ) $(CL5STUB) $(M10STUB) $(IO) $(OTHER) link
                    @@ echo $(BTLZ:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(CL5STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(M10STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(IO:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                    @@ echo END >> link.cmd
                    $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+btlz+m10+io:    $(V42) $(BTLZ) $(CL5STUB) $(M10) $(DPSTUB) $(IO) $(OTHER) link
                    @@ echo $(BTLZ:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(CL5STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(M10:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(DPSTUB:S/.*/LOAD &$(RETURN)/) >>  link.cmd
                    @@ echo $(IO:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                    @@ echo END >> link.cmd
                    $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+io: 	    $(V42) $(BTLZSTUB) $(CL5STUB) $(M10STUB) $(IO) $(OTHER) link
                    @@ echo $(BTLZSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(CL5STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(M10STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(IO:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                    @@ echo END >> link.cmd
                    $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+m10+io:	    $(V42) $(BTLZSTUB) $(CL5STUB) $(M10) $(DPSTUB) $(IO) $(OTHER) link
                    @@ echo $(BTLZSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(CL5STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(M10:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo $(DPSTUB:S/.*/LOAD &$(RETURN)/) >>  link.cmd
                    @@ echo $(IO:S/.*/LOAD &$(RETURN)/) >> link.cmd
                    @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                    @@ echo END >> link.cmd
                    $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+btlz+cl5+m10+ff: $(V42) $(BTLZ) $(CL5) $(M10) $(ATTFF) $(IOSTUB) $(OTHER) link
                     @@ echo $(BTLZ:S/.*/LOAD &$(RETURN)/) >> link.cmd
                     @@ echo $(CL5:S/.*/LOAD &$(RETURN)/) >> link.cmd
                     @@ echo $(M10:S/.*/LOAD &$(RETURN)/) >> link.cmd
                     @@ echo $(ATTFF:S/.*/LOAD &$(RETURN)/) >>  link.cmd
                     @@ echo $(IOSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                     @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                     @@ echo END >> link.cmd
                     $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+btlz+cl5+m10: $(V42) $(BTLZ) $(CL5) $(M10) $(DPSTUB) $(IOSTUB) $(OTHER) link
                  @@ echo $(BTLZ:S/.*/LOAD &$(RETURN)/) >> link.cmd
                  @@ echo $(CL5:S/.*/LOAD &$(RETURN)/) >> link.cmd
                  @@ echo $(M10:S/.*/LOAD &$(RETURN)/) >> link.cmd
                  @@ echo $(DPSTUB:S/.*/LOAD &$(RETURN)/) >>  link.cmd
                  @@ echo $(IOSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                  @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                  @@ echo END >> link.cmd
                  $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+btlz+cl5:	 $(V42) $(BTLZ) $(CL5) $(M10STUB) $(IOSTUB) $(OTHER) link
                 @@ echo $(BTLZ:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(CL5:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(M10STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(IOSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                 @@ echo END >> link.cmd
                 $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+btlz+m10+ff: $(V42) $(BTLZ) $(CL5STUB) $(M10) $(ATTFF) $(IOSTUB) $(OTHER) link
                 @@ echo $(BTLZ:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(CL5STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(M10:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(ATTFF:S/.*/LOAD &$(RETURN)/) >>  link.cmd
                 @@ echo $(IOSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                 @@ echo END >> link.cmd
                 $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+cl5+m10+ff:  $(V42) $(BTLZSTUB) $(CL5) $(M10) $(ATTFF) $(IOSTUB) $(OTHER) link
                 @@ echo $(BTLZSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(CL5:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(M10:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(ATTFF:S/.*/LOAD &$(RETURN)/) >>  link.cmd
                 @@ echo $(IOSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                 @@ echo END >> link.cmd
                 $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+m10+ff:	 $(V42) $(BTLZSTUB) $(CL5STUB) $(M10) $(ATTFF) $(IOSTUB) $(OTHER) link
                 @@ echo $(BTLZSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(CL5STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(M10:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(ATTFF:S/.*/LOAD &$(RETURN)/) >>  link.cmd
                 @@ echo $(IOSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                 @@ echo END >> link.cmd
                 $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+cl5:	 $(V42) $(BTLZSTUB) $(CL5) $(M10STUB) $(IOSTUB) $(OTHER) link
                 @@ echo $(BTLZSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(CL5:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(M10STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(IOSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                 @@ echo END >> link.cmd
                 $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+cl5+m10:	 $(V42) $(BTLZSTUB) $(CL5) $(M10) $(DPSTUB) $(IOSTUB) $(OTHER) link
                 @@ echo $(BTLZSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(CL5:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(M10:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(DPSTUB:S/.*/LOAD &$(RETURN)/) >>  link.cmd
                 @@ echo $(IOSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                 @@ echo END >> link.cmd
  	         $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+btlz:	 $(V42) $(BTLZ) $(CL5STUB) $(M10STUB) $(IOSTUB) $(OTHER) link
                 @@ echo $(BTLZ:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(CL5STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(M10STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(IOSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                 @@ echo END >> link.cmd
                 $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+btlz+m10:	 $(V42) $(BTLZ) $(CL5STUB) $(M10) $(DPSTUB) $(IOSTUB) $(OTHER) link
                 @@ echo $(BTLZ:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(CL5STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(M10:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(DPSTUB:S/.*/LOAD &$(RETURN)/) >>  link.cmd
                 @@ echo $(IOSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                 @@ echo END >> link.cmd
                 $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42:		 $(V42) $(BTLZSTUB) $(CL5STUB) $(M10STUB) $(IOSTUB) $(OTHER) link
                 @@ echo $(BTLZSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(CL5STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(M10STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(IOSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                 @@ echo END >> link.cmd
                 $(LK)  -c link.cmd $(LFLAGS) -m > link.map

v42+m10:	 $(V42) $(BTLZSTUB) $(CL5STUB) $(M10) $(DPSTUB) $(IOSTUB) $(OTHER) link
                 @@ echo $(BTLZSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(CL5STUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(M10:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo $(DPSTUB:S/.*/LOAD &$(RETURN)/) >>  link.cmd
                 @@ echo $(IOSTUB:S/.*/LOAD &$(RETURN)/) >> link.cmd
                 @@ echo LOAD C:\mcc68k\68000\mcc68kab.lib >> link.cmd
                 @@ echo END >> link.cmd
                 $(LK)  -c link.cmd $(LFLAGS) -m > link.map


#
#	System Dependent Modules
#
#
#	IO modules
#
linecrc.obj :	linecrc.asm a68302.h lineequ.asm linedat.asm linemac.asm
		$(AS) $(AFLAGS) linecrc.asm

linelink.obj :	linelink.asm a68302.h lineequ.asm linedat.asm linemac.asm
		$(AS) $(AFLAGS) linelink.asm

lineasyn.obj :	lineasyn.asm a68302.h lineequ.asm linedat.asm linemac.asm
		$(AS) $(AFLAGS) lineasyn.asm

linedetc.obj :	linedetc.asm a68302.h lineequ.asm linedat.asm linemac.asm
		$(AS) $(AFLAGS) linedetc.asm

linelapm.obj :	linelapm.asm a68302.h lineequ.asm linedat.asm linemac.asm
		$(AS) $(AFLAGS) linelapm.asm

linematc.obj :	linematc.asm a68302.h lineequ.asm linedat.asm linemac.asm
		$(AS) $(AFLAGS) linematc.asm

linesync.obj :	linesync.asm a68302.h lineequ.asm linedat.asm linemac.asm
		$(AS) $(AFLAGS) linesync.asm

dte.obj :	dte.asm a68302.h dteinc.asm
		$(AS) $(AFLAGS) dte.asm

iomem.obj :	iomem.asm
		$(AS) $(AFLAGS) iomem.asm

#
#	V.42/MNP Dependent Modules
#
v42.obj:	v42.c  sys_def.h mnp.edf mnp_bg.edf dce_line.edf m10_if.edf \
		m10_def.h lapm_ede.h lapm_que.edf lapm_tx.edf v42_etc.edf
		$(CC) $(CFLAGS) v42.c 

mnp.obj:	mnp.c sys_def.h v42.edf mnp_que.edf mnp_lib.edf mnp_af.edf \
		dce_line.edf dte.edf mnp_def.h mnp_stru.h btinit.edf \
		m10_def.h mnp_ede.h m10_if.edf mnp_comm.edf
		$(CC) $(CFLAGS) mnp.c 

mnp_bg.obj:	mnp_bg.c sys_def.h v42.edf mnp.edf mnp_lib.edf mnp_af.edf \
		mnp_la.edf mnp_ld.edf mnp_ln.edf mnp_lna.edf mnp_lr.edf \
		mnp_que.edf mnp_lrr.edf mnp_lt.edf dce_line.edf dte.edf \
		mnp_def.h mnp_stru.h btinit.edf m10_def.h
		$(CC) $(CFLAGS) mnp_bg.c 

mnp_la.obj:	mnp_la.c sys_def.h mnp_lib.edf mnp_def.h mnp_stru.h \
		m10_def.h mnp_que.edf mnp_ede.h
		$(CC) $(CFLAGS) mnp_la.c 

mnp_ld.obj:	mnp_ld.c sys_def.h mnp_lib.edf mnp_def.h mnp_stru.h mnp_ede.h
		$(CC) $(CFLAGS) mnp_ld.c 

mnp_lib.obj:	mnp_lib.c  sys_def.h v42.edf mnp_bg.edf mnp_af.edf \
		mnp_la.edf mnp_ld.edf mnp_ln.edf mnp_lna.edf mnp_lr.edf \
		mnp_que.edf mnp_lrr.edf mnp_lt.edf dce_line.edf dte.edf \
		mnp_def.h mnp_stru.h mnp_comm.edf m10_def.h m10_if.edf \
		mnp_ede.h
		$(CC) $(CFLAGS) mnp_lib.c 

mnp_ln.obj:	mnp_ln.c  sys_def.h mnp_lib.edf mnp_def.h mnp_stru.h mnp_ede.h
		$(CC) $(CFLAGS) mnp_ln.c 

mnp_pack.obj:	mnp_pack.c sys_def.h
		$(CC) $(CFLAGS) mnp_pack.c 

mnp_lna.obj:	mnp_lna.c  sys_def.h mnp_lib.edf mnp_def.h mnp_stru.h mnp_ede.h
		$(CC) $(CFLAGS) mnp_lna.c 

mnp_lr.obj:	mnp_lr.c  sys_def.h mnp_lib.edf mnp_def.h mnp_stru.h \
		m10_def.h mnp_ede.h m10_if.edf mnp_comm.edf
		$(CC) $(CFLAGS) mnp_lr.c 

mnp_lrr.obj:	mnp_lrr.c  sys_def.h mnp_lib.edf mnp_def.h mnp_stru.h mnp_ede.h
		$(CC) $(CFLAGS) mnp_lrr.c 

mnp_lt.obj:	mnp_lt.c  sys_def.h mnp_lib.edf mnp_af.edf dte.edf mnp_def.h \
		mnp_stru.h m10_if.edf mnp_ede.h
		$(CC) $(CFLAGS) mnp_lt.c 

mnp_af.obj:	mnp_af.c sys_def.h mnp_lib.edf dte.edf mnp_def.h mnp_stru.h \
                mnp_ede.h cl5_ede.h 
		$(CC) $(CFLAGS) mnp_af.c

mnp_no5.obj:	mnp_no5.c sys_def.h mnp_lib.edf dte.edf mnp_def.h mnp_stru.h \
		mnp_ede.h m10_if.edf
		$(CC) $(CFLAGS) mnp_no5.c 

mnp_que.obj:	mnp_que.c  sys_def.h v42.edf mnp_lib.edf mnp_bg.edf mnp_af.edf \
		mnp_la.edf mnp_ld.edf mnp_ln.edf mnp_lna.edf mnp_lr.edf \
		mnp_lrr.edf mnp_lt.edf dce_line.edf dte.edf m10_if.edf \
		mnp_def.h mnp_stru.h m10_def.h mnp_ede.h
		$(CC) $(CFLAGS) mnp_que.c 

mnp_comm.obj:	mnp_comm.c sys_def.h mnp_def.h mnp_stru.h mnp_ede.h
		$(CC) $(CFLAGS) mnp_comm.c 

mnp_dat.obj:	mnp_dat.c sys_def.h mnp_def.h mnp_stru.h
		$(CC) $(CFLAGS) mnp_dat.c 

v42_dat.obj:	v42_dat.c sys_def.h
		$(CC) $(CFLAGS) v42_dat.c 

cl5_dat.obj:	cl5_dat.c sys_def.h
		$(CC) $(CFLAGS) cl5_dat.c 

lapm_act.obj:	lapm_act.c lapm_ede.h lapm_que.edf lapm_sta.edf lapm_ctl.edf \
		lapm_lib.edf lapm_rej.edf lapm_rx.edf lapm_tx.edf lapm_tmr.edf \
		lapm_xid.edf lapm_brk.edf lapm_fnc.edf dte.edf dce_line.edf \
                v42.edf sys_def.h 
		$(CC) $(CFLAGS) lapm_act.c 

lapm_bg.obj:	lapm_bg.c  sys_def.h lapm_ede.h lapm_que.edf lapm_sta.edf \
		lapm_ctl.edf lapm_rx.edf lapm_tx.edf lapm_tmr.edf lapm_lib.edf \
		lapm_fg.edf dce_line.edf v42.edf dte.edf btlapm.edf
		$(CC) $(CFLAGS) lapm_bg.c 

lapm_fg.obj:	lapm_fg.c sys_def.h lapm_ede.h lapm_que.edf lapm_tmr.edf \
		lapm_brk.edf lapm_lib.edf lapm_tx.edf dce_line.edf v42.edf \
		dte.edf lapm_ctl.edf lapm_rej.edf
		$(CC) $(CFLAGS) lapm_fg.c 

lapm_brk.obj:	lapm_brk.c  sys_def.h lapm_ede.h lapm_que.edf lapm_ctl.edf \
		lapm_lib.edf dte.edf
		$(CC) $(CFLAGS) lapm_brk.c 

lapm_ctl.obj:	lapm_ctl.c  sys_def.h lapm_ede.h lapm_que.edf lapm_lib.edf \
		lapm_tmr.edf lapm_xid.edf
		$(CC) $(CFLAGS)  lapm_ctl.c 

lapm_fnc.obj:	lapm_fnc.c  sys_def.h lapm_ede.h lapm_que.edf \
		lapm_sta.edf lapm_ctl.edf lapm_brk.edf lapm_tst.edf \
		lapm_lib.edf lapm_tmr.edf lapm_tx.edf dte.edf dce_line.edf \
		v42.edf btencode.edf btinit.edf lapm_etc.edf
		$(CC) $(CFLAGS) lapm_fnc.c 

lapm_int.obj:	lapm_int.c sys_def.h lapm_ede.h lapm_que.edf
		$(CC) $(CFLAGS) lapm_int.c

lapm_lib.obj:	lapm_lib.c sys_def.h lapm_ede.h lapm_que.edf lapm_ctl.edf \
		lapm_tmr.edf dce_line.edf dte.edf btinit.edf lapm_fg.edf
		$(CC) $(CFLAGS) lapm_lib.c 

lapm_que.obj:	lapm_que.c sys_def.h lapm_ede.h dce_line.edf
		$(CC) $(CFLAGS) lapm_que.c 

lapm_rej.obj:	lapm_rej.c sys_def.h lapm_ede.h lapm_que.edf lapm_ctl.edf \
		dce_line.edf
		$(CC) $(CFLAGS) lapm_rej.c 

lapm_rx.obj:	lapm_rx.c  sys_def.h lapm_ede.h lapm_que.edf \
		dce_line.edf lapm_brk.edf dte.edf lapm_lib.edf
		$(CC) $(CFLAGS) lapm_rx.c 

lapm_sta.obj:	lapm_sta.c sys_def.h lapm_ede.h lapm_act.edf
		$(CC) $(CFLAGS) lapm_sta.c 

lapm_tab.obj:	lapm_tab.c sys_def.h lapm_ede.h lapm_act.edf
		$(CC) $(CFLAGS) lapm_tab.c 

lapm_tmr.obj:	lapm_tmr.c sys_def.h lapm_ede.h lapm_etc.edf
		$(CC) $(CFLAGS) lapm_tmr.c 

lapm_tst.obj:	lapm_tst.c sys_def.h lapm_ede.h lapm_que.edf lapm_ctl.edf
		$(CC) $(CFLAGS) lapm_tst.c 

lapm_tx.obj:	lapm_tx.c sys_def.h lapm_ede.h lapm_que.edf \
		lapm_ctl.edf lapm_tmr.edf lapm_lib.edf dce_line.edf dte.edf \
		btencode.edf
		$(CC) $(CFLAGS) lapm_tx.c 

lapm_xid.obj:	lapm_xid.c sys_def.h lapm_ede.h lapm_que.edf v42.edf btinit.edf
		$(CC) $(CFLAGS) lapm_xid.c 

btlapm.obj:	btlapm.c sys_def.h lapm_ede.h lapm_que.edf \
		btdecode.edf btencode.edf dte.edf
		$(CC) $(CFLAGS) btlapm.c 

lapm_dat.obj:	lapm_dat.c sys_def.h
		$(CC) $(CFLAGS) lapm_dat.c 

#
#	BTLZ
#
btlz_dat.obj:	btlz_dat.c sys_def.h
		$(CC) $(CFLAGS) btlz_dat.c 

btdict.obj:	btdict.c sys_def.h
		$(CC) $(CFLAGS) btdict.c 

btinit.obj:	btinit.c sys_def.h btlz_ede.h btencode.edf btdecode.edf \
		lapm_ede.h
		$(CC) $(CFLAGS) btinit.c 

btdecode.obj:	btdecode.asm
		$(AS) $(AFLAGS) btdecode.asm

btencode.obj:	btencode.asm
		$(AS) $(AFLAGS) btencode.asm

btstub.obj:	btstub.c sys_def.h
		$(CC) $(CFLAGS) btstub.c 


#
#	MNP10
#
m10_stub.obj:	m10_stub.c sys_def.h v42.edf mnp_que.edf m10_def.h mnp_def.h
		$(CC) $(CFLAGS) m10_stub.c 

m10_btlz.obj:	m10_btlz.c  sys_def.h btdecode.edf btencode.edf \
			    dte.edf mnp_if.edf mnp_def.h mnp_stru.h
		$(CC) $(CFLAGS) m10_btlz.c 

m10_if.obj:	m10_if.c sys_def.h m10_fnc.edf m10_btlz.edf m10_lk.edf \
		m10_pref.edf
		$(CC) $(CFLAGS) m10_if.c 

mnp_if.obj:	mnp_if.c sys_def.h mnp_lib.edf mnp_la.edf mnp_lr.edf \
		mnp_lrr.edf mnp_lt.edf mnp_que.edf mnp_comm.edf mnp.edf \
		mnp_af.edf
		$(CC) $(CFLAGS) mnp_if.c 

m10_dat.obj:	m10_dat.c sys_def.h mnp_stru.h
		$(CC) $(CFLAGS) m10_dat.c 

m10_fnc.obj:	m10_fnc.c sys_def.h m10_def.h m10_lm.edf m10_fffb.edf \
		dp10.edf mnp_def.h v42.edf mnp_if.edf m10_lk.edf m10_lib.edf \
		btinit.edf
		$(CC) $(CFLAGS) m10_fnc.c 

m10_fffb.obj:	m10_fffb.c sys_def.h m10_def.h dp10.edf v42.edf mnp_if.edf \
		m10_lib.edf m10_lm.edf
		$(CC) $(CFLAGS) m10_fffb.c 

m10_lm.obj:	m10_lm.c sys_def.h m10_def.h mnp_def.h mnp_stru.h mnp_if.edf \
		m10_fnc.edf
		$(CC) $(CFLAGS) m10_lm.c 

m10_lk.obj:	m10_lk.c sys_def.h mnp_def.h mnp_stru.h mnp_if.edf
		$(CC) $(CFLAGS) m10_lk.c 

m10_lib.obj:	m10_lib.c sys_def.h dp10.edf m10_def.h m10_lm.edf m10_fffb.edf \
		mnp_if.edf
		$(CC) $(CFLAGS) m10_lib.c 

m10_pref.obj:	m10_pref.c sys_def.h mnp_def.h m10_def.h mnp_stru.h mnp_ede.h \
		m10_fnc.edf mnp_if.edf dce_line.edf dte.edf
		$(CC) $(CFLAGS) m10_pref.c 

dp00mn05.obj:	dp00mn05.c sys_def.h hw10_def.h dp10_def.h
		$(CC) $(CFLAGS) dp00mn05.c 

dp00gp05.obj:	dp00gp05.c sys_def.h hw10_def.h dp10_def.h
		$(CC) $(CFLAGS) dp00gp05.c 

dp00cd05.obj:	dp00cd05.c sys_def.h dp10_def.h hw10_def.h
		$(CC) $(CFLAGS) dp00cd05.c 

dp00as05.obj:	dp00as05.asm
		$(AS) $(AFLAGS) dp00as05.asm

dp_stub.obj:	dp_stub.c sys_def.h
		$(CC) $(CFLAGS) dp_stub.c 

acu_stub.obj:	acu_stub.asm
		$(AS) $(AFLAGS) acu_stub.asm

dte_stub.obj:	dte_stub.c sys_def.h
		$(CC) $(CFLAGS) dte_stub.c 

dce_stub.obj:	dce_stub.c sys_def.h
		$(CC) $(CFLAGS) dce_stub.c 

pag_stub.obj:	pag_stub.c sys_def.h
		$(CC) $(CFLAGS) pag_stub.c

#
#       ETC
#
v42_etc.obj:	v42_etc.c v42_etc.h sys_def.h
		$(CC) $(CFLAGS) v42_etc.c

lapm_etc.obj:	lapm_etc.c lapm_etc.h sys_def.h lapm_ede.h
		$(CC) $(CFLAGS) lapm_etc.c

v42_estb.obj:	v42_estb.c sys_def.h
		$(CC) $(CFLAGS) v42_estb.c

#
#	Include file dependents
#
sys_def.h:   sys01def.h
	     copy sys01def.h sys_def.h

hw10_def.h:   dp01hd05.h
	      copy dp01hd05.h hw10_def.h

