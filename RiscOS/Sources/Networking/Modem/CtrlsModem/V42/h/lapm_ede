/****************************************************************************
/
/       Copyright 1988, 1989, 1990, 1991, 1992, 1993, 1994.    
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           LAPM_EDE.H
/
/       Module Version: 4.01
/
/       Function:       Include file for V.42 (LAPM)
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/11/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:    RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#define SEQMOD    128    /* Modulus of the sequence numbers */


/*********************************************************
/                             /
/        LAPM address parameters          /
/                             /
*********************************************************/

extern ubyte LAPMview;                       /* Originator or answerer */

#define ORIG     0                    /* the appropiate address            */
#define ANSW     1                    /* Used in initialization routine to assign */
#define CONTINUE 2                    /* Indicates that LAPM is returning from an idle state */

#define ORIGaddr 0x1                    /* Address of the originator */
#define ANSWaddr 0x3                    /* Address of the answerer */

#define RMTADDR  FALSE                    /* Used in the command table to determine the correct event */
#define LOCADDR  TRUE                    /* by the expected address in the frame */

extern ubyte locAddr;                       /* Our address for commands     */
extern ubyte rmtAddr;                       /* Remote's address for commands */



/*********************************************************
/                             /
/         Structure declarations for ques         /
/                             /
*********************************************************/

extern struct lapm_dummy_struct                    /* Allows the queing routines to be used for all structures */
{
    struct lapm_dummy_struct *next_addr;        /* Pointer to the next buffer in the que */
    word len;                    /* Length of the frame */
    ubyte error;                /* Error type if needed */
    ubyte status;                /* Status of the buffer location */
    ubyte addr;                /* Local or Remote */
    ubyte cmd;                /* Frame command */
    ubyte cmd2;                /* Second octet of command if needed */
    ubyte brktype;                /* Break type */
}*LAPMtx_holding, *LAPMtx_data_holding, *LAPMtx_current,
 *LAPMtx_buffers_sent, *LAPMtx_buffers_sent2, *LAPMtx_buffers_sent3,
 *LAPMrx_next_receive, *LAPMrx_next_receive2, *LAPMrx_next_receive3;
                            /* Contains the address of the frame to be */
                            /* transmitted in the transmit interrupt routine */


extern struct lapm_que_struct
{
    struct lapm_dummy_struct *fill_begin;        /* Pointer to the beginning of the que which contains the in use buffers */
    struct lapm_dummy_struct *fill_end;        /* Pointer to the end of the que which contains the in use buffers */
    struct lapm_dummy_struct *empty_begin;        /* Pointer to the beginning of the que which contains the empty buffers */
    struct lapm_dummy_struct *empty_end;        /* Pointer to the end of the que which contains the empty buffers */
} lapm_control_que,lapm_send_que,lapm_ack_que,lapm_event_que,lapm_receive_que,lapm_rx_hold_que,lapm_temp_rcv_que;


/*********************************************************
/                             /
/        Receive buffer parameters         /
/                             /
*********************************************************/

#define max_receive_data    128             /* Maximim size of the info field */
#define number_of_lapm_receive_buffers    16        /* Number of receive buffers */

#define RCV_BUFF_FULL    3
#define RCV_BUFF_EMPTY    9
extern struct lapm_receive_struct
{
    struct lapm_dummy_struct *next_addr;
    word len;
    ubyte error;
    ubyte status;
    ubyte addr;
    ubyte cmd;
    ubyte data[128+4];            /* Information field */
 }lapm_receive_buffer[number_of_lapm_receive_buffers],
 *event_frame,                           /* The frame associated with the present event */
 *cont_frame;                           /* Partially delivered frame */

extern struct lapm_receive_struct *receive_active_frame;       /* Pointer to a receive buffer passed to the line */

#define cmd_table_size 34

PACKED struct    CmdTabEntry
{
    ubyte  mask;            /* Used to mask out the command */
    ubyte  cmd;            /* Associated command */
    ubyte  view;            /* Address of the frame */
    ubyte pollmask;         /* Used to mask out the P/F bit */
    ubyte poll;            /* Value of the P/F bit */
    ubyte  event;            /* Event associated with the command */
};


/*********************************************************
/                             /
/        Structure for the event que         /
/                             /
*********************************************************/

#define number_of_lapm_event_buffers  20        /* Number of event buffers */

extern struct lapm_event_struct
{
    struct lapm_event_struct *next_addr;        /* Next event in que or null */
    uword type;                 /* See events below! */
    struct lapm_receive_struct *buffer;        /* Associated frame, if any */
} lapm_event_buffer[number_of_lapm_event_buffers],
  local_event;

extern struct lapm_event_struct
  *event;                        /* Pointer to the event structure */

/*********************************************************
/                             /
/        Control que parameters             /
/                             /
*********************************************************/

#define number_of_lapm_control_buffers    15        /* Number of control buffers */
#define max_control_data   5                /* Maximum number of info bytes in control buffer */

extern struct lapm_control_struct
{
    struct lapm_control_struct *next_addr;
    word len;
    ubyte error;
    ubyte status;
    ubyte addr;
    ubyte cmd;
    ubyte data[max_control_data+3];     /* Information field */
} lapm_control_buffer[number_of_lapm_control_buffers];



/*********************************************************
/                             /
/        Information que parameters         /
/                             /
*********************************************************/

#define max_info_data     128                /* Maximim size of the info field */
#define number_of_lapm_send_buffers 15            /* Number of send buffers */

#define FULL  1                     /* Flags for filling information frames */
#define EMPTY 0

extern ubyte resend_num;            /* Number of packets to be resent */
extern ubyte srej_num;                /* Number of packets to be selectively retransmitted */

extern struct lapm_send_struct
{
    struct lapm_send_struct *next_addr;
    word len;
    ubyte error;
    ubyte status;
    ubyte addr;
    ubyte cmd;
    ubyte data[max_info_data+4];        /* Information field */
} lapm_send_buffer[number_of_lapm_send_buffers];


/*********************************************************
/                             /
/        General parameters             /
/                             /
*********************************************************/


extern word n400_cnt;                           /* Timeout/recovery max counter */
extern word valueN400;                           /* Maximum number of retransmissions */
extern word valueBAUD_RATE;                       /* Value of the baud rate of the line */
extern word k;                               /* No. outstanding frames <mod*/

extern ubyte locVR;                       /* Next seq no to receive       */
extern ubyte next_to_deliver;                   /* Next seq no to deliver to the DTE */
extern ubyte rmtNR;                       /* Remotes next seq no to receive */
extern ubyte locVS;                       /* Next seq no to xmit           */
extern ubyte rmtNS;                       /* Remotes xmit seq number      */
extern ubyte in_seq;                       /* Remotes xmit seq number      */
extern ubyte locVA;                       /* Next ack we expect to rcv    */



/*********************************************************
/                             /
/        Statistics                 /
/                             /
*********************************************************/

extern long   rcv_frame_count;                       /* Number of received frames */
extern long   rcv_frame_long_count;                   /* Number of incorrectly received frames due to them being too long */
extern long   rcv_frame_bad_count;                   /* Number of incorrectly received frames  */
extern long   rcv_frame_short_count;                   /* Number of incorrectly received frames due to them being too short */



/*********************************************************
/                             /
/        Event Definitions             /
/                             /
*********************************************************/

#define E_IGNORE    0                /* Not a real event */
#define E_PSABME    1                /* Polled SABME frame */
#define E_SABME     2                /* SABME command frame */
#define E_FDM        3                /* Disconnect Mode response frame */
#define E_DM        4                /* Disconnect Mode frame  */
#define E_PDISC     5                /* Polled Disconnect frame */
#define E_DISC        6                /* Disconnect command frame */
#define E_FUA        7                /* Unumbered Acknowledgement frame */
#define E_UA        8                /* Unumbered Acknowledgement frame */
#define E_FRMR        9                /* Frame Reject frame */
#define E_PIFRM     10                /* Polled Information frame */
#define E_IFRM        11                /* Information frame */
#define E_PCRR        12                /* Polled Receive Ready command frame */
#define E_CRR        13                /* Receive Ready command frame */
#define E_PCRNR     14                /* Polled Receive Not Ready command frame */
#define E_CRNR        15                /* Receive Not Ready command frame */
#define E_PCREJ     16                /* Polled Reject command frame */
#define E_CREJ        17                /* Reject command frame */
#define E_CSREJ     18                /* Selective Reject command frame */
#define E_FRRR        19                /* Receive Ready response frame with final set to 1 */
#define E_RRR        20                /* Receive Ready response frame with final set to 0 */
#define E_FRRNR     21                /* Receive Not Ready response frame with final set to 1 */
#define E_RRNR        22                /* Receive Ready response frame with final set to 0 */
#define E_FRREJ     23                /* Reject response frame with final set to 1 */
#define E_RREJ        24                /* Reject response frame with final set to 0 */
#define E_RSREJ     25                /* Selective Reject response frame */
#define E_PBREAK    26                /* Polled Break frame */
#define E_BREAK     27                /* Break frame */
#define E_BRKACK    28                /* Break Acknowledgement frame */
#define E_BADPNS    29                /* Polled frame with bad send sequence number */
#define E_BADNS     30                /* Frame with bad send sequence number */
#define E_REJNS     31                /* Frame with bad send sequence number (selective reject) */
#define E_PBADFRM    32                /* Polled frame that is bad */
#define E_BADFRM    33                /* Frame that is bad */
#define E_TIMR401    34                /* T401 expired */
#define E_TIMR403    35                /* T403 expired */
#define E_N400        36                /* Retransmission limit has been reached */
#define E_LOCBUSY    37                /* Local is busy */
#define E_LOCLEAR    38                /* Local is not busy */
#define E_ORIG        39                /* Start LAPM as originator */
#define E_ANSW        40                /* Start LAPM as answerer */
#define E_STOP        41                /* Stop LAPM */
#define E_SXID        42                /* Send an XID frame */
#define E_CXID        43                /* Received an XID command */
#define E_RXID        44                /* Received an XID response */
#define E_TEST        45                /* Loop-back test requested */
#define E_RTEST     46                /* Loop-back test response */

#define EVT_MAX     46                /* Maximum number of events */

#define  DO_NOT_QUE    0XFF



/*********************************************************
/                             /
/        Structure for the action state table     /
/                             /
*********************************************************/

PACKED struct stateTab_struct
{
    ubyte new_state;            /* Value of the new state of processing */
    void (*fnc_ptr)();                 /* Action routine to be executed */
};

extern struct state_struct
{
    ubyte new_state;
    ubyte cur_state;
    ubyte last_state;
    ubyte cur_evt_type;
    ubyte last_evt_type;
}state;                         /* Debug structure */

extern void (*proc)(void);                /* Pointer to the routine to be performed */

#define S_DOWN        0
#define S_STRTD     1
#define S_SETUP     2
#define S_DISC        3
#define S_INFO        4
#define S_POLLD     5
#define S_BUSY        6
#define S_RBUSY     7
#define S_BBUSY     8
#define S_POLLB     9
#define S_POLLRB    10
#define S_POLLBB    11
#define S_PLBXID    12
#define S_PPBXID    13

#define STATE_MAX    13                /* Maximum number of states */


/*********************************************************
/                             /
/        Command field definitions         /
/                             /
*********************************************************/

#define CNUMsize    3                /* Size of information and supervisory format header fields */
                            /*  (address,control) */
#define CUNMsize    2                /* Size of unnumbered format header field (address,control) */

#define UNUMcmd    0x03                 /* Control field mask for unnumbered format */

#define UNMPOLL    0x10                 /* Poll bit mask for unnumbered frame */
#define UNMFINAL   0x10                 /* Final bit mask for unnumbered frame */
#define PFCLR       0x00                 /* Poll/final bit clear mask */

#define NUMPOLL    0x01                 /* Poll bit mask for information and supervisory frame */
#define NUMFINAL   0x01                 /* Final bit mask for information and supervisory frame */

#define IFRM_MASK  0x01                 /* Mask to check if command is an IFRM */



/*********************************************************
/                             /
/    Control field masks for corresponding commands     /
/                             /
*********************************************************/

#define IFRM      0x00
#define SABME      0x6f
#define SABME_P   0X7f
#define DM      0x0f
#define DM_F      0X1f
#define DISC      0x43
#define DISC_P      0X53
#define UA      0x63
#define UA_F      0X73
#define FRMR      0x87
#define FRMR_P      0X97
#define FRMR_F      0X97
#define UI      0x03
#define UI_P      0X13
#define UI_F      0X13
#define RR      0x01
#define RNR      0x05
#define REJ      0x09
#define SREJ      0x0d
#define XID      0x0af
#define TEST      0x0e3



/*********************************************************
/                             /
/        Definition of frame reject parameters     /
/                             /
*********************************************************/

#define FRMRsize  7                    /* Frame Reject frame size */

extern ubyte FRMRfield[5];                   /* FRMR error field */

#define FRMRw    0x01                    /* Control field was undefined or not implemented */
#define FRMRx    0x02                    /* Control field considered invalid because the frame contained */
                            /*   an info field or it is a supervisory or unnumbered frame with */
                            /*   incorrect length */
#define FRMRy    0x04                    /* Information field exceeded the maximum info-field length */
#define FRMRz    0x08                    /* Control field contains an invalid NR value */
#define FRMRcr    0x10                    /* 1 - frame was a response ; 0 - frame was a command */


/*********************************************************
/                             /
/        Definition of break parameters         /
/                             /
*********************************************************/

#define max_break_data      3                /* Maximim size of the info field */
extern uword rcv_char_count;        /* Number of characters in DTE_FI_FO when Non-Dest/Non-Exp break is
sent */

extern struct lapm_break_struct
{
    struct lapm_break_struct *next_addr;
    word len;
    ubyte error;
    ubyte status;
    ubyte addr;
    ubyte cmd;
    ubyte data[max_break_data];        /* Information field */
} lapm_break_buffer;

extern ubyte locVSB;                       /* Break send sequence variable */
extern ubyte locVRB;                       /* Break receive sequence variable */
extern ubyte rmtVRB;                       /* Remote's break receive sequence variable */

extern ubyte LAPMsend_dte_break;
extern ubyte LAPMrx_brk_type;
extern ubyte LAPMrx_brk_len;


extern ubyte LAPMbrktype;                   /* Type of break handling option expected */
extern ubyte LAPMbrklen;                   /* Length of break */
extern ubyte LAPMbrklen_init;                   /* Initialized length of break */

#define Ignore          0                 /* Ignore the break */
#define DestExp       1                 /* Destructive/Expedited */
#define NonDestExp    2                 /* Non-Destructive/Expedited */
#define NonDestNonExp 3                 /* Non-Destructive/Non-expedited */

#define BREAKsize  5                    /* Size of break frame */
#define BRKACKsize 3                    /* Size of break acknowledgement frame */

#define CMD      0                    /* Send a break command */
#define RSP      1                    /* Send a break response */

#define BREAK     0x40                    /* Mask for a break command */
#define BRKack     0x60                    /* Mask for a break ack command */
#define BRKnsb     0x80                    /* Break send sequence number */
#define BRKnrb     0x80                    /* Break receive sequence number */
#define BREAKs     0x40                    /* Mask for Expedited or Non-Expedited option */
#define BREAKd     0x80                    /* Mask for Destructive or Non-Destructive option */



#define LAPM_SYNC      3       /* Flag to sent to line to request a LAPM DCE */


/*********************************************************
/                             /
/        Definition of XID frame parameters         /
/                             /
*********************************************************/

#define max_xid_data    75                /* Maximim size of the info field */

extern struct lapm_xid_struct
{
    struct lapm_xid_struct *next_addr;
    word len;
    ubyte error;
    ubyte status;
    ubyte addr;
    ubyte cmd;
    ubyte data[max_xid_data];           /* Information field */
} lapm_xid_buffer;

#define XIDsize  6                    /* header of 6 bytes */
#define XIDfid     0x82                    /* Value of the Format Identifier Field */
#define XIDgid     0x80                    /* Value of the Group Identifier */
#define XIDglen  10                    /* Group Length minimum of 10 bytes */
#define XIDopt     0x03                    /* Paremeter Identification for the HDLC optional functions field */
#define XIDsupt2 0x89                    /* Mask for bits to be set in conformance to standards */
#define XIDtest  0x20                    /* Bit encoding for Loop Back Test option */
#define XIDsupt3 0x8A                    /* Mask for bits to be set in conformance to standards */
#define XIDsrej  0x04                    /* Bit encoding for Selective Reject option */
#define XIDtn401 0x05                    /* Parameter identification for transmit N401 */
#define XIDrn401 0x06                    /* Parameter identification for receive N401 */
#define XIDtk     0x07                    /* Parameter identification for transmit K */
#define XIDrk     0x08                    /* Parameter identification for receive K */


#define COMPsize 0x03                    /* Compression group header size */
#define COMPgid  0xf0                    /* Compression group ID */
#define COMPsid  0x00                    /* Compression set ID */
#define COMPslen 0x03                    /* Compression set length */
#define COMPp0id 0x01                    /* Parameter P0 ID */
#define COMPp1id 0x02                    /* Parameter P1 ID */
#define COMPp2id 0x03                    /* Parameter P2 ID */
#define BTLZrcv  0x02                    /* Compression transmit mask */
#define BTLZtran 0x01                    /* Compression receive mask */

#define MinP1     512                    /* Minimum value for Parameter P1 */
#define MinP2     6                    /* Minimum value for Parameter P2 */
#define MaxP2     250                    /* Maximum value for Parameter P2 */

extern word xid_length;                 /* Contains the length of the xid frame */
extern ubyte include_BTLZ_resp;                /* Flag to include compression in XID */

extern struct parms_struct                       /* Structure of the negotiation parameters and procedures */
{
    uword TK;                 /* Transmiter's maximum number of outstanding information frames */
    uword RK;                 /* Receiver's maximum number of outstanding information frames */
    uword TN401;                 /* Transmiter's maximum information field size */
    uword RN401;                 /* Receiver's maximum information field size */
    ubyte supTEST;                /* Value tells if selective reject is supported or not */
    ubyte supSREJ;                /* Value tells if loop-back test is supported or not */
    ubyte P0;                /* Direction of data compression */
    uword P1;                 /* Number of code words  */
    ubyte P2;                /* Max string length */
}neg_parms,                        /* Final negotiated parameter values */
 req_parms;                        /* Requested parameter values */

#define DEFAULT_N401    128                /* Default for retry limit */
#define DEFAULT_TK    15                /* Default for number of outstanding information frames */
#define DEFAULT_RK    15                /* Default for number of outstanding information frames */
#define DEFAULT_K_RANGE number_of_lapm_receive_buffers

#define DEFAULT_P1    512                /* Default for number of outstanding information frames */
#define DEFAULT_P2    6                /* Default for number of outstanding information frames */


/*********************************************************
/                             /
/         Definition of TEST frame parameters     /
/                             /
*********************************************************/

#define max_test_data     128                 /* Maximim size of the info field */

extern struct lapm_test_struct
{
    struct lapm_test_struct *next_addr;
    word len;
    ubyte error;
    ubyte status;
    ubyte addr;
    ubyte cmd;
    ubyte data[max_test_data];        /* Information field */
} lapm_test_buffer;

extern uword LAPMtest_status;                /* Test status parameter */

#define TEST_WAITING       0xffff            /* Waiting for TEST frame to be sent */
#define TEST_COMPLETE       0                /* Test processing is complete */
#define TEST_ERROR       1                /* Error in TEST response */
#define TEST_TIMEOUT       2                /* Peer has not responded to TEST command frame */
#define TEST_NOT_PROCESSED 4                /* Not able to send TEST frame */


/*********************************************************
/                             /
/        Definitions of timers             /
/                             /
*********************************************************/

#define number_of_timers 5                /* Number of timers */
#define RESET_VALUE  -1                 /* Timer reset value */

extern word time_array[number_of_timers];        /* Array of timers */

#define TIMRestart     0                /* Signifies the restarting of specified timer */
#define TIMCancel     RESET_VALUE            /* Signifies the canceling of specified timer */
#define timer(op,id)     time_array[id] = op

#define INITTIMER  0                    /* Initialization timer */
#define T401       1                    /* Retry timer */
#define T403       2                    /* Acknowledgment timer */
#define INACTIVITY 3                    /* Inactivity timer */
#define TESTTIMER  4                    /* Inactivity timer */

extern ubyte lapm_ONEsecond_count;        /* Allows counter to increment in seconds */
extern ubyte lapm_timer_tick;

extern word valueT401;                    /* Length of T401 timeout      */
/*mrm9296*/
extern uword valueINACTIVITY;                /* Length of Inactivity timeout     */
extern word valueT403;                    /* Length of T403 timeout      */
extern word valueTInit;                 /* Lenght of the initialization timer */

extern word LAPM_autoreliable;

/*********************************************************
/                             /
/         Definitions of takedown reasons         /
/                             /
*********************************************************/

extern ubyte LAPMreason;                   /* Reason variable */

#define PEER           255                /* Peer initiated takedown */
#define CANNOT_CONNECT       1                /* Cannot connect */
#define CONTROLLER       255                /* Controller initiated takedown */
#define PROTOCOL_ERROR       254                /* Incorrect frame received */
#define BTLZ_ERROR       250                /* Error occured in LAPM compression */
#define INACTIVE_TIMEOUT   5                /* Inactivity timer expired */
#define RETRY_TIMEOUT       4                /* Retry limit has been reached */



/*********************************************************
/                             /
/         Definitions of error byte values         /
/                             /
*********************************************************/

#define CRC       1                    /* Error value for bad CRC */
#define OVERFLOW   2                    /* Error value for overflow */


/*********************************************************
/                             /
/        LAPM status definitions          /
/                             /
*********************************************************/

#define DOWN    0                    /* LAPM is disconnected */
#define STARTED 1                    /* LAPM establishing connection */
#define IDLE    2                    /* LPAM is idle */
#define STOPPED 4                    /* LAPM is disconnecting */
#define UP    6                    /* LAPM is connected */
#define REESTABLISH 0x80                  /* LAPM has reestablished the connection */
#define MNP_NEGOT   7                      /* LAPM has found a MNP preferred XID */


/*********************************************************
/                             /
/        LAPM status flags             /
/                             /
*********************************************************/

extern ubyte idle_flag;                    /* DTE idle flag */
extern ubyte LAPMidle;                       /* LAPM idle flag */
extern ubyte LAPMbreak;                    /* A break has been sent */
extern ubyte LAPMtest;                       /* A test frame has been sent */
extern ubyte LAPMbrkpend;                   /* A break is pending */
extern ubyte LAPMxid;                       /* XID flag */
extern ubyte LAPMpoll;                       /* Poll flag */
extern ubyte LAPMrej;                       /* Reject flag */
extern ubyte LAPMstatus;                   /* Status of LAPM */
extern ubyte LAPMbusy;                       /* Flags if LAPM is busy */
extern ubyte LAPMmnpreferred;                   /* MNP preferred selected */
extern ubyte LAPMdeliver_cont;                   /* Flag for continuing frame delivery */
extern ubyte LAPMflush;                    /* Flag to flush out the compression buffer */
extern ubyte LAPMreconfigure;                   /* Flag when LAPM is to be reconfigured */
extern ubyte LAPMreestablish;                   /* Flag when LAPM is to reestablish the link */
extern ubyte LAPMdeliver_cnt;                   /* Number of characters bein delivered to the DTE */
extern ubyte *LAPMdeliver_ptr;                   /* Pointer to the characters in the data frame */

extern ubyte RMTbusy;                       /* Flag when the remote is busy */

extern ubyte que_send_frame;                   /* Flag for queing send buffers if compression */


extern struct lapm_receive_struct *LAPMemptied_que[number_of_lapm_receive_buffers+1];
extern ubyte LAPMemptied_que__in;
extern ubyte LAPMemptied_que__out;
extern struct lapm_receive_struct *LAPMrx_que[number_of_lapm_receive_buffers+1];
extern ubyte LAPMrx_que__in;
extern ubyte LAPMrx_que__out;

#define LAPM_inc(ptr) ((ptr < number_of_lapm_receive_buffers) ? (ptr++) : (ptr=0))

extern struct lapm_send_struct *LAPMtx_que[number_of_lapm_send_buffers+1];
extern ubyte LAPMtx_que__in;
extern ubyte LAPMtx_que__out;
extern ubyte LAPMtx_que__ackin;
extern ubyte LAPMtx_que__ackout;
extern struct lapm_send_struct *LAPMsrej_que[number_of_lapm_send_buffers+1];
extern ubyte LAPMsrej_que__in;
extern ubyte LAPMsrej_que__out;

#define LAPM_inc_tx(ptr) ((ptr < number_of_lapm_send_buffers) ? (ptr++) : (ptr=0))


extern struct lapm_send_struct *lapmtx_data_ptr;

extern uword dte_num_hold;

extern ubyte process_dce_bg_flag;
extern ubyte LAPMrcv_IFRM_tossed;

extern ubyte char_in_buffer;

extern ubyte *lapm_mnp_rcv_frame;
extern ubyte lapm_fallback_to_MNP;
extern ubyte lapm_32bit_crc;

extern ubyte LAPM_rcvd_UP_frame;

extern ubyte lapm_ETC_enabled;      /* ETC enabled global */

