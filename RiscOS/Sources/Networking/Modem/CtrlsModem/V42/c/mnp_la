/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           MNP_LA.C
/
/       Module Version: 4.02
/
/       Function:       Routines for MNP LA frames.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/10/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/
#include "sys_def.h"

void build_la(void);
void build_la_init(void);
void send_la(void);
ubyte empty_la(void);

#include "M10_DEF.H"
#include "EDF.MNP_LIB"
#include "EDF.MNP_QUE"
#include "MNP_DEF.H"
#include "MNP_STRU.H"
#include "MNP_EDE.H"

void build_packet(ubyte*,ubyte,ubyte);
void all_la_s(ubyte);


struct empty_packet_struct
{
    ubyte* addr1;
    ubyte  value1;
    ubyte* addr2;
    ubyte  value2;
    ubyte* addr3;
    ubyte  value3;
};

void empty_packet(ubyte,ubyte*,struct empty_packet_struct *);


void all_la_s(ubyte credits)
{
	ack_rcv_sequence_number = receive_sequence_number;

	build_packet((ubyte *)&la_send_segment,PDU_TYPE_LA,ack_rcv_sequence_number);

	if (negot_data_optimization != 0 ) {
	    la_send_segment.pdu_length = 4;
	    la_send_segment.header_length = 3;
	    la_send_segment.pdu_data[0] = ack_rcv_sequence_number;
	    la_send_segment.pdu_data[1] = credits;
	}
	else {
	    la_send_segment.pdu_length = 8;
	    la_send_segment.header_length = 7;
	    la_send_segment.pdu_data[3] = 2;
	    la_send_segment.pdu_data[4] = 1;
	    la_send_segment.pdu_data[5] = credits;
	}
}


void build_la(void)
{

	/*						       */
	/* tx credits = # of buffers - buffers in use	   */
	/*						       */
    if (mnp_negotiated_class == MNP_SERVICE_CLASS_1_CREDIT)
    {
	if (process_que__in != process_que__out)
	{
		la_window = 0;
	}
	else
	{
		la_window = 1;
	}
    }
    else
    {
	la_window = NUMBER_OF_AVAILABLE_MNP_BUFFERS - get_process_number();

	if (la_window > lr_credit_allocation)
		la_window = lr_credit_allocation;
    }

    if (mnp10_status == MNP10_BG__FF_INIT)
	la_window = 0;

    all_la_s(la_window);
}


void build_la_init(void)
{
    all_la_s(0);
}


void send_la(void)
{
    transmit_active_frame = &la_send_segment.io_status;
    start_tx();
}


ubyte empty_la(void)
{
    struct empty_packet_struct temp_ptr;


    if (receive_buffer[rcv_working_frame_ptr].pdu_type != PDU_TYPE_LA)
	return(EMPTY_PDU_BAD_TYPE);

    if (negot_data_optimization != 0) {
	la_receive_sequence = receive_buffer[rcv_working_frame_ptr].pdu_data[0];
	la_credit_amount = receive_buffer[rcv_working_frame_ptr].pdu_data[1];
    }
    else
    {
	temp_ptr.addr1 = (ubyte *)&la_receive_sequence;
	temp_ptr.value1 = 1;
	temp_ptr.addr2 = (ubyte *)&la_credit_amount;
	temp_ptr.value2 = 2;
	temp_ptr.addr3 = 0;

	empty_packet(PDU_TYPE_LA,(ubyte *)&receive_buffer[rcv_working_frame_ptr],&temp_ptr);
    }
    return(OK);
}

