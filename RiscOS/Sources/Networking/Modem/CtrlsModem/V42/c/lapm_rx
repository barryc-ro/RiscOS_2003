/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           LAPM_RX.C
/
/       Module Version: 4.02
/
/       Function:       LAPM receive data packet processing routines.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/14/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "lapm_ede.h"
#include "edf.lapm_que"
#include "edf.lapm_lib"
#include "edf.dce_line"
#include "edf.lapm_brk"
#include "edf.dte"
#include "edf.btdecode"           /* BTLZ decode prototypes */

void deliver_data(void);
ubyte check_delivery(void);
ubyte num_of_receive_buf(void);

extern ubyte btlzrx_done, *btlzrxdataptr;
extern ubyte V42bis_P0;

/*******************************************************************************
/									       /
/	 ROUTINE: num_of_receive_buf					       /
/									       /
/	 This routine checks to see the number of receive buffers on the       /
/	 receive queue. 						       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT:   R3 = 					       /
/		 number of queued frames				       /
/									       /
*******************************************************************************/
ubyte num_of_receive_buf(void)
{
       ubyte num = 0;
       ubyte hold = LAPMemptied_que__out;

       while (LAPMemptied_que__in != hold)
       {
	       num++;
	       LAPM_inc(hold);
       }
       return (num);
}

/*******************************************************************************
/									       /
/	 ROUTINE: deliver_data						       /
/									       /
/	 This routine checks to see if there are any qued information frames,  /
/	 to be sent to the DTE. 					       /
/									       /
/	 PARAMETERS IN:  none						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void deliver_data(void)
{

  ubyte num;
  struct lapm_receive_struct *frame;
  struct lapm_receive_struct *free_frame;

	if (LAPMdeliver_cont)
	      return;

	/* If the frame is found on the que then send it to the DTE */
	frame = (struct lapm_receive_struct *)lapm_receive_que.fill_begin;

	num = 1;

	while (frame)
	{
		if (frame->cmd == UI)
		{
			deliver_break(frame);
			frame = (struct lapm_receive_struct *)
				 dq_lapm((struct lapm_que_struct *)&lapm_receive_que);
			lapm_put_empty(frame);
			return;
		}
		if (((frame->cmd >> 1 ) & 0x7f) == next_to_deliver)
		{
			if( V42bis_P0 & 2 )
			{  /* BTLZ decoding active */

				cont_frame = (struct lapm_receive_struct *)
					       dqdeep_lapm((struct lapm_que_struct *)&lapm_receive_que,num);

				btlz_empty_count = frame->len - CNUMsize;

				if (!btlz_empty_count)
				{
					next_to_deliver = ((cont_frame->cmd >> 1 ) + 1) & 0x7f;
					LAPMdeliver_cont =  FALSE;
					lapm_put_empty(cont_frame);
					return;
				}

				LAPMdeliver_cont = TRUE;
				/* decode set up */
				btlzrxdataptr = (ubyte *)&cont_frame->data[1];
				btlzrx_done = FALSE;
				return;
			}
			      /* V42 processing */
			if (dte_to_free() > frame->len - 3)
			{
				LAPMdeliver_cnt = frame->len-CNUMsize;
				LAPMdeliver_ptr = &frame->data[1];
				while (LAPMdeliver_cnt)
				{
					LAPMdeliver_cnt--;
					dte_to_char(*LAPMdeliver_ptr++);
				}

				next_to_deliver = (next_to_deliver + 1) & 0x7f;
				free_frame = (struct lapm_receive_struct *)
					      dqdeep_lapm((struct lapm_que_struct *)&lapm_receive_que,num);
				lapm_put_empty(free_frame);
				return;
			}
			else
			  return;
		}
		else
		{
			frame = (struct lapm_receive_struct *)frame->next_addr;
			num++;
		}
	}
}


/*******************************************************************************
/									       /
/	 ROUTINE: check_delivery					       /
/									       /
/	 This routine checks to see if the DTE can accept more data,	       /
/	 if so then it is clear, else it is busy.			       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT:						       /
/		 TRUE - 1						       /
/		 FALSE - 0						       /
/									       /
*******************************************************************************/
ubyte check_delivery(void)
{
	if (LAPMidle || LAPMxid)
	{
		event->type = E_LOCBUSY;
		LAPMbusy = TRUE;
		return(FALSE);
	}

	if (LAPMbusy == FALSE)
	{
		if (num_of_receive_buf() <= RCV_BUFF_FULL)
		{
			 event->type = E_LOCBUSY;
			 LAPMbusy = TRUE;
			 return (FALSE);
		}
		else
		{
			 event->type = E_LOCLEAR;
			 LAPMbusy = FALSE;
			 return (TRUE);
		}
	}
	else
	{
		if (num_of_receive_buf() >= RCV_BUFF_EMPTY)
		{
			 event->type = E_LOCLEAR;
			 LAPMbusy = FALSE;
			 return (TRUE);
		}
		else
		{
			 event->type = E_LOCBUSY;
			 LAPMbusy = TRUE;
			 return (FALSE);
		}
	}
}

