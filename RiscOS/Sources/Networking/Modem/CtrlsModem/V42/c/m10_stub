/****************************************************************************
/
/       Copyright 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           M10_STUB.C
/
/       Module Version: 4.02
/
/       Function:       This file contains the stub routines for the
/                       MNP 10 code.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:
/                       11/1/94 (V4.01) - Add ETC and MNP10 updates
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "edf.v42"
#include "edf.mnp_que"
#include "m10_def.h"
#include "mnp_def.h"
#include "edf.btinit"


void mnp10_init(void);
void mnp10_reset(void);
void mnp10_timer(void);
ubyte mnp10_bg(void);
ubyte mnp10_retrain_init(ubyte);
void mnp10_retrain_bg(void);
void mnp10_test_APS(void);
void mnp10_build_lk(void);
void mnp10_send_lk(void);
void mnp10_proc_rcv_frame(ubyte);
void mnp10_init_vars(void);
void mnp10_calc_BLER(void);
ubyte mnp10_force_rate_change(ubyte);
ubyte mnp10_build_xid(ubyte *, uword, ubyte, ubyte, ubyte,
			   ubyte, ubyte, ubyte, uword, ubyte,
			   ubyte, uword, ubyte, ubyte);
void mnp10_go_now(ubyte *, ubyte, ubyte);
void mnp_empty_v42bis(void);
void mnp10_build_v42bis(void);
void mnp_build_mnp10_lr(ubyte []);
void mnp10_call_err(uword);
void mnp10_negot_parms(void);
ubyte mnp10_check_v42bis_flush(void);
ubyte mnp10_check_lmi_seq_num(void);
void mnp10_init_upshift(void);
void mnp10_BTLZ_Balance(void);
ubyte mnp10_proc_retry_limit(void);

extern ubyte negot_v42bis;
extern ubyte mnp10_enabled;
extern ubyte mnp10_status;
extern ubyte mnp10_lmi_rcvd;

/*******************************************************************************
/
/	Routine: mnp10_init
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will initialize all variables needed for
/		      MNP 10 operation.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  mnp10_enabled, negot_v32bis, mnp10_status,
/				   mnp10_lmi_rcvd
/
/	Users: mnp_init()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp10_init(void)
{
    BTInit(0,1024,32);

    negot_v42bis = 0;
    mnp10_enabled = FALSE;
    mnp10_status = 0;
    mnp10_lmi_rcvd = FALSE;
}

/*******************************************************************************
/
/	Routine: mnp10_reset
/
/	Author : RSA
/
/	Creation Date: 07/17/92
/
/	Description : This Routine will reset any variables used during
/		      MNP 10 operation.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  None
/
/	Users: mnp_reset()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp10_reset(void)
{
}


/*******************************************************************************
/
/	Routine: mnp10_timer
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will process the MNP 10 timer variables.
/		      It is called every 100 mseconds.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  None
/
/	Users: mnp_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp10_timer(void)
{
}


/*******************************************************************************
/
/	Routine: mnp10_bg
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine is the background processing for the MNP 10
/		      code.
/
/	Input Parameters: None
/
/	Output Parameters: ubyte mnp 10 status
/				2  -  Continue processing background
/
/	Global Variables Changed: None
/
/	Users: mnp_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte mnp10_bg(void)
{
    return (CONTINUE);
}

/*******************************************************************************
/
/	Routine: mnp10_retrain_init
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will initialize the MNP 10 code to start
/		       retrain, fallback, or fallforward procedures.
/
/	Input Parameters: ubyte type - Type of procedure to start
/				0  -  Initialize to start retrain procedures
/				1  -  Initiate fallback procedures
/				2  -  Initiate fallforward procedures
/				3  -  Initiate initial upshift procedures
/
/	Output Parameters: ubyte initialization status
/				1  -  Initialization denied
/
/	Global Variables Changed: None
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte mnp10_retrain_init(ubyte type)
{
    type=0;

    /*	Indicate to MNP that the initialization has failed	*/
    return (MNP10_RETR_INIT__FAILED);
}


/*******************************************************************************
/
/	Routine: mnp10_retrain_bg
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine perform the background processing for the
/		      MNP 10 retrain, fallback, or fallforward procedures.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed: None
/
/	Users: mnp_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp10_retrain_bg(void)
{
}

/*******************************************************************************
/
/	Routine: mnp10_test_APS
/
/	Author : RSA
/
/	Creation Date: 04/03/92
/
/	Description : This Routine perform the background process to determine
/		      in MNP 10 if the APS value is less than 16 for more than
/		      8 LT frames.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed: None
/
/	Users: build_lt()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp10_test_APS(void)
{
}

/*******************************************************************************
/
/	Routine: mnp10_build_lk
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will build the LM packet
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  None
/
/	Users: transmit_background(), mnp10_bg(), mnp10_retrain_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp10_build_lk(void)
{
}

/*******************************************************************************
/
/	Routine: mnp10_send_lk
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will send the LK packet.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  None
/
/	Users: transmit_background()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp10_send_lk(void)
{
}

/*******************************************************************************
/
/	Routine: mnp10_proc_rcv_frame
/
/	Author : RSA
/
/	Creation Date: 07/31/92
/
/	Description : This Routine will process the received MNP 10 frames.
/
/	Input Parameters: ubyte type - Type of frame received
/				8  = LRR frame
/				9  = LK frame
/				88 = LRR_10 frame
/
/	Output Parameters: None
/
/	Global Variables Changed: mnp10_rcvd_non_lm__ff_ack,
/				  mnp10_rcv_lm__fb_cmd,
/				  mnp10_rcv_lm__fb_ack,
/				  mnp10_rcv_lm__ff_cmd,
/				  mnp10_rcv_lm__ff_ack,
/				  mnp10_rcv_lm__sig_ql,
/				  mnp10_rcv_lm__ff_nak,
/				  mnp10_lmi_rcvd,
/				  mnp10_LMI_recv_seq_num,
/				  mnp10_LMI_nak_request,
/				  peer_missing_frame_flag,
/				  peer_missing_frame_sequence
/
/	Users: mnp_rx_fg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp10_proc_rcv_frame(ubyte type)
{
    type=0;
}

/*******************************************************************************
/
/	Routine: mnp10_init_vars
/
/	Author : RSA
/
/	Creation Date: 07/31/92
/
/	Description : This Routine will reset MNP 10 variables.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed: mnp10_frame_rcvd,
/				  mnp10_rcv_lm__ff_cmd,
/				  mnp10_rcv_lm__ff_ack,
/				  mnp10_rcv_lm__ff_nak,
/				  mnp10_rcv_lm__fb_cmd,
/				  mnp10_rcv_lm__fb_ack,
/				  mnp10_rcv_lm__sig_ql,
/				  mnp10_rcvd_non_lm__ff_ack,
/				  mnp10_LT_acked,
/
/	Users: mnp_init(), mnp_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp10_init_vars(void)
{
    init_dynamic_tx();
}

/*******************************************************************************
/
/	Routine: mnp10_calc_BLER
/
/	Author : RSA
/
/	Creation Date: 07/31/92
/
/	Description : This Routine will calculate the Block Error Rate.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed: mnp10_got_BLER,
/
/	Users: send_lt(),  mnp_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp10_calc_BLER(void)
{
}

/*******************************************************************************
/
/	Routine: mnp10_force_rate_change
/
/	Author : RSA
/
/	Creation Date: 08/14/92
/
/	Description : This Routine will force a speed change.
/
/	Input Parameters: ubyte type - Direction of speed change.
/				0 = Fallback
/				1 = Fallforward
/
/	Output Parameters: ubyte status of function call
/				2 - MNP 10 is not available
/
/	Global Variables Changed: mnp_state
/
/	Users: mnp_force_rate_change()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte mnp10_force_rate_change(ubyte type)
{
    type=0;
    return (MNP10_NOT_AVAIL);
}

/*******************************************************************************
/
/	Routine: mnp10_build_xid
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will produce an LR packet that will be
/		      appended to the end of the XID packet during mnp preferred
/		      operation.
/
/	Input Parameters: ubyte *ptr - Pointer to the beginning of the LR data.
/			  uword v_max_data  - Maximum data packet size
/			  ubyte v_mnp10_ena - Indicates if MNP 10 operation is
/					      to be negotiated
/			  ubyte v_data_comp - Indicates if MNP class 5 is to
/					      be negotiated
/			  ubyte v_opt	    - Indicates if MNP class 4 is to
/					      be negotiated
/			  ubyte v_cellular  - Indicates if MNP 10 cellular operation
/					      is to be negotiated
/			  ubyte v_FF	    - Indicates if MNP 10 fallforward operation
/					      is to be negotiated
/			  ubyte v_FB	    - Indicates if MNP 10 fallback operation
/					      is to be negotiated
/			  uword v_rates     - MNP 10 possible rates
/			  ubyte v_srej	    - Indicates if MNP selective retransmission
/					      is to be negotiated
/
/	Output Parameters: ubyte *(orig_ptr + 1) - Size of the LR data
/
/	Global Variables Changed:  None
/
/	Users: v42_build_mnp_xid()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte mnp10_build_xid(ubyte *ptr, uword val1, ubyte val2, ubyte val3, ubyte val4,
			   ubyte val5, ubyte val6, ubyte val7, uword val8, ubyte val9,
			   ubyte val10, uword val11, ubyte val12, ubyte val13)
{
    ubyte *tmp_ptr, tmp_byte;

    tmp_ptr = ptr;
    tmp_byte = (ubyte)val1;
    tmp_byte = val2;
    tmp_byte = val3;
    tmp_byte = val4;
    tmp_byte = val5;
    tmp_byte = val6;
    tmp_byte = val7;
    tmp_byte = val8;
    tmp_byte = val9;
    tmp_byte = val10;
    tmp_byte = val11;
    tmp_byte = val12;
    tmp_byte = val13;

    return (0);
}

/*******************************************************************************
/
/	Routine: mnp10_go_now
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will allows a MNP link to startup from the
/		      LAPM negotiaton. MNP preferred operation.
/
/	Input Parameters: ubyte *ptr - Pointer to the beginning of the LR data.
/			  ubyte ptr_cnt - Size of the LR packet
/			  ubyte answ - Indicates role during the connection
/				0 - Originate
/				1 - Answer
/
/	Output Parameters: None
/
/	Global Variables Changed:  None
/
/	Users: v42_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp10_go_now(ubyte *ptr, ubyte ptr_cnt, ubyte answ)
{
    ubyte tmp_byte, *tmp_ptr;

    tmp_ptr = ptr;
    tmp_byte = ptr_cnt;
    tmp_byte = answ;
}

/*******************************************************************************
/
/	Routine: mnp_empty_v42bis
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will decode the V.42bis compressed LT data.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  None
/
/	Users: empty_lt_continue()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp_empty_v42bis(void)
{
}

/*******************************************************************************
/
/	Routine: mnp10_build_v42bis
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will encode the V.42bis compressed LT data.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  None
/
/	Users: build_lt()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp10_build_v42bis(void)
{
}

/*******************************************************************************
/
/	Routine: mnp_build_mnp10_lr
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will determine the value of the MNP 10
/		      LR parameters.
/
/	Input Parameters: ubyte loc_array[] - Contains the MNP 10 parameters.
/
/	Output Parameters: None
/
/	Global Variables Changed:  None
/
/	Users: build_lr(), build_lapm_mnp_lr()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp_build_mnp10_lr(ubyte loc_array[])
{
    loc_array[6] = 0;
    loc_array[7] = 0;
    loc_array[8] = 0;
    loc_array[11] = 0;
}

/*******************************************************************************
/
/	Routine: mnp10_call_err
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine is called if V.42bis has detected an error
/		      during decoding.
/
/	Input Parameters: uword disc_val - Character that caused the error.
/
/	Output Parameters: None
/
/	Global Variables Changed:  None
/
/	Users: v42_call_err()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp10_call_err(uword disc_val)
{
    disc_val=0;
}

/*******************************************************************************
/
/	Routine: mnp10_negot_parms
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will negotiate the MNP 10 parameters found
/		      in the received LR packet.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  None
/
/	Users: negot_mnp_parms()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp10_negot_parms(void)
{
    mnp10_enabled = 0;
    negotiate_mnp10(0);
    negot_v42bis = 0;
}

/*******************************************************************************
/
/	Routine: mnp10_check_v42bis_flush
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will determine if the current LT packet
/		      should be sent and the V.42bis dictionary flushed.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  None
/
/	Users: mnp_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte mnp10_check_v42bis_flush(void)
{
    return(0);
}


/*******************************************************************************
/
/	Routine: mnp10_check_lmi_seq_num
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will determine if the number of unacknowledged
/		      LMI frames will force a fallback on the line.
/
/	Input Parameters: None
/
/	Output Parameters: ubyte status - Indicates mnp_bg()'s next action.
/				2 - Continue processing background
/
/	Global Variables Changed:  None
/
/	Users: mnp_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte mnp10_check_lmi_seq_num(void)
{
    return (CONTINUE);
}

/*******************************************************************************
/
/	Routine: mnp10_init_upshift
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will setup MNP 10 to perform an initial
/		      speed upshift.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  None
/
/	Users: mnp_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp10_init_upshift(void)
{
}


/*****************************************************************************
/									     /
/	ROUTINE: mnp10_BTLZ_balance					     /
/									     /
/	PARAMETERS IN:	none						     /
/									     /
/	PARAMETERS OUT: none						     /
/									     /
*****************************************************************************/
void mnp10_BTLZ_Balance(void)
{
}


/*****************************************************************************
/									     /
/	ROUTINE: mnp10_proc_retry_limit 				     /
/									     /
/	PARAMETERS IN:	none						     /
/									     /
/	PARAMETERS OUT: none						     /
/									     /
*****************************************************************************/
ubyte mnp10_proc_retry_limit(void)
{
    return(0);
}

