/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           MNP_LR.C
/
/       Module Version: 4.02
/
/       Function:       Routines for MNP LR frames.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/24/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"

void common_build_lr(ubyte,ubyte);
void build_lr(void);
void send_lr(void);
ubyte empty_lr(void);

#include "EDF.MNP_LIB"
#include "MNP_DEF.H"
#include "MNP_STRU.H"
#include "MNP_EDE.H"
#include "EDF.M10_IF"
#include "EDF.MNP_COMM"

void common_build_lr(ubyte negot_class, ubyte string)
{
    ubyte loc_array[16];

    lr_send_segment.io_status = 0;
    lr_send_segment.user_flag = 0;

    lr_send_segment.pdu_type = PDU_TYPE_LR;
    lr_send_segment.pdu_data[0] = mnp_negotiated_service;

    loc_array[0] = 0;
    loc_array[1] = negot_class;
    loc_array[2] = lr_credit_allocation;
    loc_array[3] = string;
    loc_array[4] = 0;

    if (mnp_max_tx_size > 64)
	loc_array[4] = LR_OPT_PARM__256;
    if (negot_data_optimization != 0 )
	loc_array[4] += LR_OPT_PARM__FIX_FLD;
    if (mnp10_enabled == TRUE)
	loc_array[4] += LR_OPT_PARM__MNP10;

/*	Set the echo detection bit if initiator of the LR	*/
    if (!mnp_startup_mode)
	loc_array[4] |= 0x80;

    loc_array[5] = negot_data_compression;

    mnp_build_mnp10_lr(loc_array);

    loc_array[15] = negot_selective_retransmit;

    lr_send_segment.header_length = mnp_build_lr_packet(&lr_send_segment.pdu_data[1],&loc_array[0]) + 2;
    lr_send_segment.pdu_length = lr_send_segment.header_length + 1;
}


void build_lr(void)
{
	common_build_lr(mnp_negotiated_class,1);
}


void send_lr(void)
{
    transmit_active_frame = &lr_send_segment.io_status;
    start_tx();
}


ubyte empty_lr(void)
{
    lr_protocol_level = rx_buf_ptr->pdu_data[0];
    return(mnp_empty_lr_packet(&rx_buf_ptr->pdu_data[1],rx_buf_ptr->header_length - 2));
}

