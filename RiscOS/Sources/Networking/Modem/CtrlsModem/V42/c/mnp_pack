/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           MNP_PACK.C
/
/       Module Version: 4.02
/
/       Function:       MNP packet routines.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    3/19/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"

void build_packet(ubyte *, ubyte, ubyte);

struct mnp_base_struct
{
	ubyte io_stat;
	ubyte mnp_res;
	uword  mnp_cnt;
};

void build_packet( ubyte *ptr,
		   ubyte type,
		   ubyte first_param  )
{
	struct mnp_base_struct *dummy_ptr;

	dummy_ptr = (struct mnp_base_struct *) ptr;
	dummy_ptr->mnp_cnt = 5;

	*ptr++ = 0;			/* store zero in 'io_status'         */
	*ptr++ = 0;			/* store zero in 'user_flag'         */
	*ptr++; 			/* store five in 'pdu_length' (low)  */
	*ptr++; 			/* store zero in 'pdu_length' (high) */
	*ptr++ = 4;			/* store four in 'header_length'     */
	*ptr++ = type;			/* store type in 'pdu_type'          */
	*ptr++ = 1;			/* store one  in 'pdu_data[0]'       */
	*ptr++ = 1;			/* store one  in 'pdu_data[1]'       */
	*ptr++ = first_param;		/* store first_param in 'pdu_data[2]'*/
}


struct empty_packet_struct
{
    ubyte* addr1;
    ubyte  value1;
    ubyte* addr2;
    ubyte  value2;
    ubyte* addr3;
    ubyte  value3;
};

struct dummy_packet_struct
{
    ubyte* addr1;
    ubyte  value1;
/*  ubyte* addr2;
    ubyte  value2;
    ubyte* addr3;
    ubyte  value3;		*/
};

void empty_packet(ubyte,ubyte*,struct empty_packet_struct *);


void empty_packet(ubyte pdu_type,
		  ubyte *packet_ptr,
		  struct empty_packet_struct *array_ptr  )
{
	ubyte counter,check_value,save_counter,temp;
	ubyte *store_addr,*save_packet_ptr;
	struct dummy_packet_struct *dummy_array_ptr;
	struct mnp_base_struct *dummy_ptr;

	dummy_ptr = (struct mnp_base_struct *) packet_ptr;

	counter = (dummy_ptr->mnp_cnt) - 2;

	packet_ptr = packet_ptr + 5;

	if (*packet_ptr++ != pdu_type)
		return;

	save_packet_ptr = packet_ptr;
	save_counter = counter;
	dummy_array_ptr = (struct dummy_packet_struct *)array_ptr;

	do
	{
		store_addr = (ubyte *)dummy_array_ptr->addr1;
		check_value = dummy_array_ptr->value1;
		dummy_array_ptr++;

		while ((counter != 0) && ((counter & 0x80) != 0x80))
		{
			counter--;
			if (check_value == *packet_ptr++)
			{
				if (1 == *packet_ptr++)
					*store_addr = *packet_ptr++;

				break;
			}
			else
			{
				counter--;
				temp = *packet_ptr++;

				while (temp != 0)
				{
					counter--;
					packet_ptr++;
					temp--;
				}
			}
		}

		packet_ptr = save_packet_ptr;
		counter = save_counter;
	}
	while (dummy_array_ptr->addr1 != 0);
}
