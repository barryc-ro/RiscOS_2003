/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           LAPM_TAB.C
/
/       Module Version: 4.02
/
/       Function:       Routines for LAPM state table processing.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/11/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "lapm_ede.h"
#include "edf.lapm_act"

void lapm_state_table(ubyte, ubyte);

extern const struct stateTab_struct st_down[EVT_MAX+1];
extern const struct stateTab_struct st_strtd[EVT_MAX+1];
extern const struct stateTab_struct st_setup[EVT_MAX+1];
extern const struct stateTab_struct st_disc[EVT_MAX+1];
extern const struct stateTab_struct st_info[EVT_MAX+1];
extern const struct stateTab_struct st_polld[EVT_MAX+1];
extern const struct stateTab_struct st_busy[EVT_MAX+1];
extern const struct stateTab_struct st_rbusy[EVT_MAX+1];
extern const struct stateTab_struct st_bbusy[EVT_MAX+1];
extern const struct stateTab_struct st_pollb[EVT_MAX+1];
extern const struct stateTab_struct st_pollrb[EVT_MAX+1];
extern const struct stateTab_struct st_pollbb[EVT_MAX+1];
extern const struct stateTab_struct st_plbxid[EVT_MAX+1];
extern const struct stateTab_struct st_ppbxid[EVT_MAX+1];

/******************************************************************************************************************
/														  /
/	 ROUTINE: lapm_state_table										  /
/														  /
/	 This routine takes the event being processed and looks up the action routine that needs to be		  /
/	 performed in the current state table.									  /
/														  /
/	 PARAMETERS:												  /
/		 cur_state - The state table currently being used						  /
/		 evt_type  - Type of event that is being processed						  /
/														  /
******************************************************************************************************************/
void lapm_state_table(ubyte cur_state, ubyte evt_type)
{

	if (evt_type > EVT_MAX)
	{
		state.new_state = S_DOWN;
		proc = DOWN_IGNORE;
		return;
	}

	switch (cur_state)
	{
		case (S_DOWN):
			state.new_state = st_down[evt_type].new_state;
			proc = st_down[evt_type].fnc_ptr;
			break;

		case (S_STRTD):
			state.new_state = st_strtd[evt_type].new_state;
			proc = st_strtd[evt_type].fnc_ptr;
			break;

		case (S_SETUP):
			state.new_state = st_setup[evt_type].new_state;
			proc = st_setup[evt_type].fnc_ptr;
			break;

		case (S_DISC):
			state.new_state = st_disc[evt_type].new_state;
			proc = st_disc[evt_type].fnc_ptr;
			break;

		case (S_INFO):
			state.new_state = st_info[evt_type].new_state;
			proc = st_info[evt_type].fnc_ptr;
			break;

		case (S_POLLD):
			state.new_state = st_polld[evt_type].new_state;
			proc = st_polld[evt_type].fnc_ptr;
			break;

		case (S_BUSY):
			state.new_state = st_busy[evt_type].new_state;
			proc = st_busy[evt_type].fnc_ptr;
			break;

		case (S_RBUSY):
			state.new_state = st_rbusy[evt_type].new_state;
			proc = st_rbusy[evt_type].fnc_ptr;
			break;

		case (S_BBUSY):
			state.new_state = st_bbusy[evt_type].new_state;
			proc = st_bbusy[evt_type].fnc_ptr;
			break;

		case (S_POLLB):
			state.new_state = st_pollb[evt_type].new_state;
			proc = st_pollb[evt_type].fnc_ptr;
			break;

		case (S_POLLRB):
			state.new_state = st_pollrb[evt_type].new_state;
			proc = st_pollrb[evt_type].fnc_ptr;
			break;

		case (S_POLLBB):
			state.new_state = st_pollbb[evt_type].new_state;
			proc = st_pollbb[evt_type].fnc_ptr;
			break;

		case (S_PLBXID):
			state.new_state = st_plbxid[evt_type].new_state;
			proc = st_plbxid[evt_type].fnc_ptr;
			break;

		case (S_PPBXID):
			state.new_state = st_ppbxid[evt_type].new_state;
			proc = st_ppbxid[evt_type].fnc_ptr;
			break;

		default:
			state.new_state = S_DOWN;
			proc = DOWN_IGNORE;
			break;
	}
}
