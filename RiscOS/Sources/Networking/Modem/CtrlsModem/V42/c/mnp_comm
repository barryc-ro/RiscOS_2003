/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           MNP_COMM.C
/
/       Module Version: 4.02
/
/       Function:       MNP common LR processing routines.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/25/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"

ubyte mnp_build_lr_packet(ubyte *, ubyte *);
ubyte mnp_empty_lr_packet(ubyte *,ubyte);

#include "MNP_DEF.H"
#include "MNP_STRU.H"
#include "MNP_EDE.H"

/*****************************************************************************/
/* array[0] =>	0 = normal LR parameter string	 1 = XID LR parameter string */
/* array[1] =>	non 0 = class 1,2,3 to send				     */
/* array[2] =>	non 0 = credit allocation				     */
/* array[3] =>	non 0 = string/block parameter (string ONLY)		     */
/* array[4] =>	non 0 = optimization & MNP10 parameter			     */
/* array[5] =>	non 0 = class 5 to send 				     */
/* array[6 & 7] =>  non 0 = mnp10 parameters				     */
/* array[8 => 9 & 10] =>  non 0 = put AGC EQM in LR			     */
/* array[11 & 12-13 & 14] =>  non 0 = v42bis parameters 		     */
/* array[15] =>  non 0 = RSA selective retransmit parameters		     */
/*****************************************************************************/
ubyte mnp_build_lr_packet(ptr,array)
ubyte *ptr;
ubyte *array;
{
    ubyte count;

/* array[0] =>	0 = normal LR parameter string	 1 = XID LR parameter string */
    if (*array == 0)
    {
	count = 8;

	*ptr++ = 1;
	*ptr++ = 6;
	*ptr++ = 1;
	*ptr++ = 0;
	*ptr++ = 0;
	*ptr++ = 0;
	*ptr++ = 0;
	*ptr++ = 255;
    }
    else
    {
	count = 5;

	*ptr++ = 1;
	*ptr++ = 3;
	*ptr++ = 'R';
	*ptr++ = 'S';
	*ptr++ = 'A';
    }

/* array[1] =>	non 0 = class 1,2,3 to send */
    if (*++array != 0)
    {
	*ptr++ = 2;
	*ptr++ = 1;
	*ptr++ = *array;

	count += 3;
    }

/* array[2] =>	non 0 = credit allocation */
    if (*++array != 0)
    {
	*ptr++ = 3;
	*ptr++ = 1;
	*ptr++ = *array;

	count += 3;
    }

/* array[3] =>	non 0 = string/block parameter (string ONLY) */
    if (*++array != 0)
    {
	*ptr++ = 4;
	*ptr++ = 2;
	*ptr++ = 0x40;
	*ptr++ = 0x00;

	count += 4;
    }

/* array[4] =>	non 0 = optimization & MNP10 parameter */
    *ptr++ = 8;
    *ptr++ = 1;
    *ptr++ = *++array;

    count += 3;

/* array[5] =>	non 0 = class 5 to send */
    if (*++array != 0)
    {
	*ptr++ = 9;
	*ptr++ = 1;
	*ptr++ = *array;

	count += 3;
    }

/* array[6 & 7] =>  non 0 = mnp10 parameters */
    if (*++array != 0)
    {
	*ptr++ = 12;
	*ptr++ = 2;
	*ptr++ = *array;
	*ptr++ = *++array;
	count += 4;
    }
    else
    {
	array++;
    }


/* array[8] =>	non 0 = put AGC EQM in LR */
    if (*++array != 0)
    {
	*ptr++ = 13;
	*ptr++ = 2;
	*ptr++ = *++array;
	*ptr++ = *++array;

	count += 4;
    }
    else
    {
	array += 2;
    }

/* array[11] =>  non 0 = v42bis parameters */
    if (*++array != 0) {
	*ptr++ = 14;
	*ptr++ = 4;
	*ptr++ = *array;
	*ptr++ = *++array;
	*ptr++ = *++array;
	*ptr++ = *++array;

	count += 6;
    }
    else
    {
	array += 3;
    }

/* array[15] =>  non 0 = RSA selective retransmit parameters */
    if (*++array != 0)
    {
	*ptr++ = 196;
	*ptr++ = 1;
	*ptr++ = *array;

	count += 3;
    }

    return (count);
}


ubyte mnp_empty_lr_packet(ubyte *ptr,ubyte count)
{
    ubyte    j;

    lr_serial_num_flag = 0;
    lr_service_class = MNP_SERVICE_CLASS_DEFAULT;
    lr_credit_allocation = MNP_CREDIT_ALLOWCATION_DEFAULT;
    lr_data_optimization = MNP_DATA_OPT_DEFAULT;
    lr_data_compression = MNP_CL5_DEFAULT;
    mnp10_lr_dss_basic_features = MNP_BASIC_FEATURES_DEFAULT;
    mnp10_lr_dss_v32_v32bis = MNP_V32_V32BIS_DEFAULT;
    mnp10_RCV_AGC10_value = MNP_AGC10_DEFAULT;
    mnp10_RCV_EQM10_value = MNP_EQM10_DEFAULT;
    lr_selective_retransmit = MNP_SREJ_DEFAULT;

    while ((count != 0) && ((count & 128) == 0))
    {
	switch (*ptr)
	{
	case(1): /* serial number */
		j = *++ptr;
		count = count - (j + 2);
		ptr += j;
		lr_serial_num_flag = 1;
		break;

	case(2):
		if (*++ptr != 1)
			return(EMPTY_PDU_PARM_COUNT);
		count -= 3;
		lr_service_class = *++ptr;
		break;

	case(3): /* credit allocation (optional) */
		if (*++ptr != 1)
			return(EMPTY_PDU_PARM_COUNT);
		count -= 3;
		lr_credit_allocation = *++ptr;
		break;

	case(8): /* data optimization request (optional) */
		if (*++ptr != 1)
			return(EMPTY_PDU_PARM_COUNT);
		count -= 3;
		lr_data_optimization = *++ptr;
		break;

	case(9): /* data compression request (optional) */
		if (*++ptr != 1)
			return(EMPTY_PDU_PARM_COUNT);
		count -= 3;
		lr_data_compression = *++ptr;
		break;

	case(12):
		j = *++ptr;
		if (j == 0)
		    return(EMPTY_PDU_PARM_COUNT);

		count -= 3;
		mnp10_lr_dss_basic_features = *++ptr;

		if (j >= 2)
		{
		    count -= 1;
		    mnp10_lr_dss_v32_v32bis = *++ptr;
		}
		break;

	case(13):
		j = *++ptr;
		if (j == 0)
		    return(EMPTY_PDU_PARM_COUNT);

		count -= 3;
		mnp10_RCV_AGC10_value = *++ptr;

		if (j >= 2)
		{
		    count -= 1;
		    mnp10_RCV_EQM10_value = *++ptr;
		}
		break;

	case(14):
		j = *++ptr;
		if (j == 0)
			return(EMPTY_PDU_PARM_COUNT);

		count -= 3;
		lr_v42bis_direction = *++ptr;

		if (j >= 3)
		{
		    count -= 2;
		    lr_v42bis_dict_size = (uword) (((uword)*++ptr) * 256);
		    lr_v42bis_dict_size += (uword) *++ptr;

		    if (lr_v42bis_dict_size < MNP_V42BIS_DICT_SIZE__MIN)
			    return(EMPTY_PDU_BAD_PARM);
		}

		if (j >= 4)
		{
		    count -= 1;
		    lr_v42bis_str_len = *++ptr;
		    if (lr_v42bis_str_len < MNP_V42BIS_STR_LEN__MIN)
			    return(EMPTY_PDU_BAD_PARM);
		}
		break;

	case(196): /* selective retransmit request (optional) */
		if (*++ptr != 1)
		    return(EMPTY_PDU_PARM_COUNT);
		count -=3;
		lr_selective_retransmit = *++ptr;
		break;

	default:
		j = *++ptr;
		count = count - (j + 2);
		ptr += j;
		break;
	}
	ptr++;
    }
    return(OK);
}
