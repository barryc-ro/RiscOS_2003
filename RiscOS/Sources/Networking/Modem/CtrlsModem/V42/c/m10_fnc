/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           M10_FNC.C
/
/       Module Version: 4.02
/
/       Function:       This file contains the MNP 10 code.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:
/                       11/1/94 (V4.01) - Add ETC and MNP10 updates
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "m10_def.h"
#include "mnp_def.h"

#include "v42.edf"
#include "mnp_if.edf"
#include "m10_lm.edf"
#include "m10_lk.edf"
#include "m10_fffb.edf"
#include "m10_lib.edf"
#include "dp10.edf"
#include "btinit.edf"

void M10_init(void);
void M10_reset(void);
void M10_timer(void);
ubyte M10_retrain_init(ubyte);
void M10_test_APS(void);
void M10_proc_rcv_frame(ubyte);
void M10_init_vars(void);
void M10_calc_BLER(void);
ubyte mnp10_get_AGC10_value(void);
ubyte mnp10_get_EQM10_value(void);
ubyte M10_force_rate_change(ubyte);
void M10_negot_parms(void);
ubyte M10_check_lmi_seq_num(void);
void M10_retrain_bg(void);
void M10_init_upshift(void);
ubyte M10_bg(void);
ubyte M10_proc_retry_limit(void);

extern ubyte mnp10_enabled;
extern ubyte mnp10_status;
extern ubyte mnp10_rcv_lm__sig_ql;
extern ubyte mnp10_lmi_rcvd;
extern ubyte mnp10_LMI_recv_seq_num;
extern ubyte mnp10_LMI_nak_request;
extern ubyte mnp10_LMI_nak_confirm;
extern ubyte mnp10_LMI_RCV_nak_confirm;
extern ubyte mnp10_LMI_RCV_nak_request;
extern ubyte mnp10_LMI_RCV_send_seq_num;
extern ubyte mnp10_LMI_RCV_recv_seq_num;
extern ubyte mnp10_LMI_send_seq_num;
extern ubyte mnp10_RCV_EQM10_value;
extern ubyte mnp10_RCV_AGC10_value;
extern ubyte mnp10_last_RCV_EQM10_value;
extern ubyte mnp10_last_RCV_AGC10_value;
extern ubyte mnp10_last_tx_level;
extern ubyte mnp10_initial_tx_level;
extern ubyte mnp10_lm_recv_type;
extern ubyte mnp10_frame_rcvd;
extern ubyte mnp10_fb_retry_count;
extern ubyte mnp10_rcv_lm__ff_cmd;
extern ubyte mnp10_rcv_lm__ff_ack;
extern ubyte mnp10_rcv_lm__fb_ack;
extern ubyte mnp10_rcv_lm__fb_cmd;
extern ubyte mnp10_rcvd_non_lm__ff_ack;
extern ubyte mnp10_rcv_lm__ff_nak;
extern ubyte mnp10_failed_upshift;
extern ubyte mnp10_orig_speed;
extern ubyte mnp10_initial_upshift;
extern ubyte mnp10_resend_packet_count;
extern ubyte mnp10_number_of_retrains;
extern ubyte mnp10_BLER;
extern ubyte mnp10_got_BLER;
extern uword FBI_timer;
extern uword FFI_timer;
extern uword FFI_default_time;
extern uword shift_timer;
extern ubyte mnp10_EQM_timer;

extern ubyte mnp10_current_speed;
extern uword mnp10_possible_rates;
extern ubyte mnp10_v32bis;
extern ubyte mnp10_EQM10_value;
extern ubyte mnp10_AGC10_value;
extern ubyte mnp10_retrain_state;
extern ubyte mnp10_fffb_state;
extern ubyte mnp10_failed_fallforward;
extern uword mnp10_carrier_loss_delay;
extern ubyte mnp10_initiator;
extern ubyte mnp10_neg_cellular;
extern uword mnp10_100ms_timer;
extern uword mnp10_answ_timer;
extern uword mnp10_cd_qualify_time;
extern uword mnp10_cd_wait_time;
extern ubyte mnp10_LT_acked;
extern ubyte mnp10_carrier_loss;
extern ubyte mnp10_startup_mode;
extern ubyte mnp10_ff_negot;
extern ubyte mnp10_fb_negot;
extern ubyte mnp10_tx_level;
extern ubyte mnp10_fallback_APS_count;
extern ubyte mnp10_BLER_timer_started;
extern uword mnp10_BLER_timer;
extern ubyte mnp10_enabled;
extern ubyte mnp10_lmi_timer;

extern ubyte peer_missing_frame_flag;
extern ubyte peer_missing_frame_sequence;
extern ubyte lrr_receive_sequence;
extern ubyte *tx_holding;
extern ubyte tx_busy_flag;
extern ubyte mnp_startup_mode;
extern ubyte baud_rate;
extern uword dynamic_txmax;
extern ubyte mnp_state;
extern ubyte mnp_disconnect_code;
extern ubyte disconnect_flag;
extern ubyte tx_input_pointer;
extern ubyte tx_send_pointer;
extern ubyte send_credits;
extern ubyte tx_oldest_pointer;
extern ubyte buffering_enabled_flag;
extern ubyte lr_data_optimization;
extern ubyte lr_data_compression;
extern ubyte lr_v42bis_direction;
extern uword lr_v42bis_dict_size;
extern ubyte lr_v42bis_str_len;
extern ubyte mnp10_lr_dss_basic_features;
extern ubyte mnp10_lr_dss_v32_v32bis;
extern ubyte negot_v42bis;
extern uword negot_v42bis_dict_size;
extern ubyte negot_v42bis_str_len;
extern ubyte negot_data_compression;
extern ubyte idle_flag;
extern ubyte mnp_status;


/*******************************************************************************
/
/	Routine: M10_init
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will initialize all variables needed for
/		      MNP 10 operation.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  None
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void M10_init(void)
{
    mnp10_carrier_loss = FALSE;
    mnp10_failed_upshift = FALSE;
    mnp10_resend_packet_count = 0;
    mnp10_number_of_retrains = 0;
    FBI_timer = SEC_1 * 10;
    shift_timer = 0;
    FFI_timer = FFI_default_time = MIN_1;
    mnp10_fallback_APS_count = APS_FALLBACK_COUNT;
    mnp10_current_speed = baud_rate;
    mnp10_BLER_timer_started = FALSE;
    mnp10_BLER_timer = 0;
    mnp10_status = 0;
    mnp10_lmi_rcvd = 0;
    mnp10_LMI_send_seq_num = 0;
    mnp10_LMI_recv_seq_num = 0;
    mnp10_LMI_nak_confirm = 0;
    mnp10_LMI_nak_request = 0;
    mnp10_LMI_RCV_send_seq_num = 0;
    mnp10_LMI_RCV_nak_confirm  = 0;
    mnp10_LMI_RCV_recv_seq_num = 0;
    mnp10_LMI_RCV_nak_request  = 0;
    mnp10_RCV_AGC10_value =
        mnp10_last_RCV_AGC10_value = LMI_RCV__UNAVAILABLE;
    mnp10_RCV_EQM10_value = 0;
    mnp10_last_RCV_EQM10_value = LMI_RCV__UNAVAILABLE;

    /* Per MNP10 the initial modulation handshake is preformed at -10 dBm */
    mnp10_tx_level = TX_LEVEL_10DB;
    mnp10_last_tx_level = MNP10_TX_LVL_IGNORE;
    mnp10_initial_tx_level = TRUE;      /* Use default tx level */

    /*	Initialize the MNP 10 data pump code	*/
    dp10_init(mnp10_possible_rates,mnp10_current_speed,mnp10_v32bis,
        mnp10_cd_wait_time,mnp10_cd_qualify_time);

   /* Don't force pump speeds until we're certain of an MNP10 connection */
   /* dp10_set_line_speed(mnp10_current_speed); */

    /*	Set EQM and AGC values for the LR packet	*/
    mnp10_EQM10_value = dp10_get_EQM10_value();
    mnp10_AGC10_value = dp10_get_AGC10_value();

    /* If V.42bis is unavailable, don't negotiate with V.42bis enabled */
    if (!BTInit(negot_v42bis, negot_v42bis_dict_size, negot_v42bis_str_len))
        negot_v42bis = 0;
}

/*******************************************************************************
/
/	Routine: M10_reset
/
/	Author : RSA
/
/	Creation Date: 07/17/92
/
/	Description : This Routine will reset any variables used during
/		      MNP 10 operation.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  None
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA/keh 7/26/96
/	Description: change routine to reset the logical tx level rather
/          than the physcial level.
/	Reason: 1) Online AT commands such as AT\Y indirectly call this
/      routine which should not change the physical level durring a
/      non-mnp10 link.  2) some DP10 drivers require the timer to be
/      running for pump writes and this routine may be called from
/      an interrupt (GOT_AUTO_FALLBACK()).
/
*******************************************************************************/
void M10_reset(void)
{
    /*	Reset the transmit level back to -10dB */
/* start change 7/26/96 => don't change physical levels on "reset" */
/*    dp10_set_tx_level(TX_LEVEL_10DB); */
    mnp10_tx_level = TX_LEVEL_10DB;
    mnp10_last_tx_level = MNP10_TX_LVL_IGNORE;
    mnp10_initial_tx_level = TRUE;      /* Use default tx level */
/* end change 7/26/96 => don't change physical levels on "reset" */

    /* Notify data pump driver that MNP10 is NOT running */
    dp10_start(MNP10_DISABLED);
}


/*******************************************************************************
/
/	Routine: M10_timer
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will process the MNP 10 timer variables.
/		      It is called every 100 mseconds.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  None
/
/	Users: mnp_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void M10_timer(void)
{
    if (mnp10_100ms_timer)
        mnp10_100ms_timer--;

    if (mnp10_BLER_timer)
        mnp10_BLER_timer--;

    if (mnp10_answ_timer)
        mnp10_answ_timer--;

    if (FBI_timer)
        FBI_timer--;

    if (FFI_timer)
        FFI_timer--;

    if (shift_timer)
        shift_timer--;

    if (mnp10_lmi_timer)
        mnp10_lmi_timer--;

    if (mnp10_EQM_timer)
        mnp10_EQM_timer--;

    /*	Process MNP 10 data pump code timers */
    dp10_timer();
}


/*******************************************************************************
/
/	Routine: M10_retrain_init
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will initialize the MNP 10 code to start
/		       retrain, fallback, or fallforward procedures.
/
/	Input Parameters: ubyte type - Type of procedure to start
/				0  -  Initialize to start retrain procedures
/				1  -  Initiate fallback procedures
/				2  -  Initiate fallforward procedures
/				3  -  Initiate initial upshift procedures
/
/	Output Parameters: ubyte initialization status
/				0  -  Disconnect link (send LD packet)
/				1  -  Initialization denied
/				2  -  Initialization complete
/				3  -  Halt link (Dont send LD packet)
/
/	Global Variables Changed: mnp10_retrain_state, mnp10_number_of_retrains
/
/	Users:
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte M10_retrain_init(ubyte type)
{
    ubyte speed;

    switch (type)
    {
        case MNP10_RETR_INIT__FB:
            if (!FBI_timer)
            {
                if (fallback_allowed())
                {
                    mnp10_retrain_state = INITIATE_FALLBACK;
                    return (MNP10_RETR_INIT__OK);
                }
                else
                    return (MNP10_RETR_INIT__DISCONN);
            }
            else
                return (MNP10_RETR_INIT__FAILED);

        case MNP10_RETR_INIT__RETRAIN:
            /* If the current line speed is 1200 bps then do not try to
                retrain */
            if (mnp10_current_speed <= BPS1200)
                return (MNP10_RETR_INIT__DISCONN);

            /*	If this is the 2nd attempt to retrain due to unacknowledged
                frames try to fallback if allowed */
            if (mnp10_LT_acked == FALSE)
            {
                if (fallback_allowed())
                {
                    mnp10_retrain_state = INITIATE_FALLBACK;
                    return (MNP10_RETR_INIT__OK);
                }
                else
                    return (MNP10_RETR_INIT__DISCONN);
            }
            mnp10_retrain_state = INIT_RETRAIN;
            mnp10_number_of_retrains = 0;
            return (MNP10_RETR_INIT__OK);

        case MNP10_RETR_INIT__UPSHIFT_INIT:
            speed = highest_negot_speed();
            if (mnp10_current_speed < speed)
            {
                /*	If running cellular and V.32 and/or V.32bis speeds are
                    available then need to upshift 1st to 4800, but not
                    if we're at 4800 (at*H2 case) */
                if (mnp10_neg_cellular && (speed > BPS4800)
                    && (mnp10_current_speed != BPS4800))
                {
                    speed = BPS4800;
                }
                mnp10_100ms_timer = 0;
                mnp10_orig_speed = mnp10_current_speed;
                mnp10_current_speed = speed;
                mnp10_retrain_state = FF_DETERMINE_TYPE;

                /*	If originator of connection then we are the initiator of
                    the upshift	*/
                if (!mnp_startup_mode)
                    mnp10_initiator = TRUE;
                else
                    mnp10_initiator = FALSE;

                mnp10_initial_upshift = TRUE;
                return (MNP10_RETR_INIT__OK);
            }
            return (MNP10_RETR_INIT__FAILED);

        case MNP10_RETR_INIT__FORCE_FB:
            if (fallback_allowed())
            {
                mnp10_retrain_state = INITIATE_FALLBACK;
                return (MNP10_RETR_INIT__OK);
            }
            else
                return (MNP10_RETR_INIT__HALT);

        case MNP10_RETR_INIT__FORCE_FF:
            if (higher_speed_avail() && mnp10_ff_negot)
            {
                /*	Reset fallforward enabling conditions so speed shift
                    can be executed	*/
                dynamic_txmax = 256;
                mnp10_retrain_state = INITIATE_FALLFORWARD;
                return (MNP10_RETR_INIT__OK);
            }
            else
                return (MNP10_RETR_INIT__FAILED);

        default:
			return (MNP10_RETR_INIT__FAILED);
    }
}


/*******************************************************************************
/
/	Routine: M10_test_APS
/
/	Author : RSA
/
/	Creation Date: 04/03/92
/
/	Description : This Routine perform the background process to determine
/		      in MNP 10 if the APS value is less than 16 for more than
/		      8 LT frames.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed: mnp10_fallback_APS_count
/
/	Users: build_lt()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void M10_test_APS(void)
{
    if (mnp10_enabled != 0)
    {
        if (dynamic_txmax < APS_FALLBACK_MIN)
        {
            if (mnp10_fallback_APS_count != 0)
            {
                mnp10_fallback_APS_count--;
            }
        }
        else
        {
            mnp10_fallback_APS_count = APS_FALLBACK_COUNT;
        }
    }
}

/*******************************************************************************
/
/	Routine: M10_proc_rcv_frame
/
/	Author : RSA
/
/	Creation Date: 07/31/92
/
/	Description : This Routine will process the received MNP 10 frames.
/
/	Input Parameters: ubyte type - Type of frame received
/				8  = LRR frame
/				9  = LK frame
/				88 = LRR_10 frame
/
/	Output Parameters: None
/
/	Global Variables Changed: mnp10_rcvd_non_lm__ff_ack,
/				  mnp10_rcv_lm__fb_cmd,
/				  mnp10_rcv_lm__fb_ack,
/				  mnp10_rcv_lm__ff_cmd,
/				  mnp10_rcv_lm__ff_ack,
/				  mnp10_rcv_lm__sig_ql,
/				  mnp10_rcv_lm__ff_nak,
/				  mnp10_lmi_rcvd,
/				  mnp10_LMI_recv_seq_num,
/				  mnp10_LMI_nak_request,
/				  peer_missing_frame_flag,
/				  peer_missing_frame_sequence
/
/	Users: mnp_rx_fg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void M10_proc_rcv_frame(ubyte type)
{
    switch (type)
    {
        case(PDU_TYPE_LRR):
            if (mnp10_empty_lm() == 0)
            {
                if (mnp10_lm_recv_type != LM_TYPE__FF_ACK)
                {
                    mnp10_rcvd_non_lm__ff_ack = TRUE;
                }

                switch (mnp10_lm_recv_type)
                {
                    case (LM_TYPE__FB_CMD):
                        mnp10_rcv_lm__fb_cmd = TRUE;
                        break;

                    case (LM_TYPE__FB_ACK):
                        mnp10_rcv_lm__fb_ack = TRUE;
                        break;

                    case (LM_TYPE__FF_CMD):
                        mnp10_rcv_lm__ff_cmd = TRUE;

                        /* Any data rx'ed after FF CMD, should abort the FF */
                        mnp10_frame_rcvd = FALSE;
                        break;

                    case (LM_TYPE__FF_ACK):
                        mnp10_rcv_lm__ff_ack++;

                        /* FF_ACKs don't qualify for FF verification */
                        if ((mnp10_retrain_state == WAIT_COMPLETE_ACK) ||
                            (mnp10_retrain_state == COMPLETE_ACCEPT_FALLFORWARD))
                        {
                            mnp10_frame_rcvd = FALSE;
                        }
                        break;

                    case (LM_TYPE__SIG_QL):
                        mnp10_rcv_lm__sig_ql = TRUE;
                        break;

                    case (LM_TYPE__FF_NAK):
                        mnp10_rcv_lm__ff_nak = TRUE;
                        break;

                    case (LM_TYPE__IDLE):
                        mnp10_lmi_rcvd = TRUE;

                        /* Parse LMI_SSN */
                        if (mnp10_LMI_RCV_nak_confirm == mnp10_LMI_nak_request)
                        {
                            if (mnp10_LMI_RCV_send_seq_num == mnp10_LMI_recv_seq_num)
                            {
                                mnp10_LMI_recv_seq_num = (mnp10_LMI_recv_seq_num + 1) & 0x7F;
                            }
                            else
                            {
                                if (mnp10_LMI_nak_request)
                                {
                                    mnp10_LMI_nak_request = 0x00;
                                }
                                else
                                {
                                    mnp10_LMI_nak_request = 0x80;
                                }
                            }
                        }

                        check_lmi_rcv();  /* Parse LMI_SSN */
                        break;

                    default:
                        break;
                }
            }
            break;

        case(PDU_TYPE_LK):
            if (mnp10_empty_lk() == 0)
            {
                check_lmi_rcv();
                mpg_got_la_info();
            }
            break;

        case(PDU_TYPE_LRR_10):
            mpg_empty_lrr();
            peer_missing_frame_flag = TRUE;
            peer_missing_frame_sequence = lrr_receive_sequence;
            break;

        default:
            break;
    }
}

/*******************************************************************************
/
/	Routine: M10_init_vars
/
/	Author : RSA
/
/	Creation Date: 07/31/92
/
/	Description : This Routine will reset MNP 10 variables.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed: mnp10_frame_rcvd,
/				  mnp10_rcv_lm__ff_cmd,
/				  mnp10_rcv_lm__ff_ack,
/				  mnp10_rcv_lm__ff_nak,
/				  mnp10_rcv_lm__fb_cmd,
/				  mnp10_rcv_lm__fb_ack,
/				  mnp10_rcv_lm__sig_ql,
/				  mnp10_rcvd_non_lm__ff_ack,
/				  mnp10_LT_acked,
/
/	Users: mnp_init(), mnp_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void M10_init_vars(void)
{
    mpg_init_dynamic_tx();
    mpg_reset_retries();
    mnp10_frame_rcvd = FALSE;
    mnp10_rcv_lm__ff_cmd = FALSE;
    mnp10_rcv_lm__ff_ack = FALSE;
    mnp10_rcv_lm__ff_nak = FALSE;
    mnp10_rcv_lm__fb_cmd = FALSE;
    mnp10_rcv_lm__fb_ack = FALSE;
    mnp10_rcv_lm__sig_ql = FALSE;
    mnp10_rcvd_non_lm__ff_ack = FALSE;
    mnp10_LT_acked = FALSE;
    mnp10_BLER = 0;
    mnp10_got_BLER = 0;
}

/*******************************************************************************
/
/	Routine: M10_calc_BLER
/
/	Author : RSA
/
/	Creation Date: 07/31/92
/
/	Description : This Routine will calculate the Block Error Rate.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed: mnp10_got_BLER,
/				  mnp10_BLER
/
/	Users: send_lt(),  mnp_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void M10_calc_BLER(void)
{
    word i;

    i = mnp10_BLER * 150;
    i /= 16;

    if (mnp10_got_BLER != 0)
    {
        mnp10_got_BLER = 0;
        i += 67;
    }
    i /= 10;

    mnp10_BLER = (ubyte) i;
}

/*******************************************************************************
/
/	Routine: mnp10_get_AGC10_value
/
/	Author : RSA
/
/	Creation Date: 08/14/92
/
/	Description : This Routine will return the AGC10 value.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed: None
/
/	Users: mnp_build_xid()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte mnp10_get_AGC10_value(void)
{
    return (dp10_get_AGC10_value());
}

/*******************************************************************************
/
/	Routine: mnp10_get_EQM10_value
/
/	Author : RSA
/
/	Creation Date: 08/14/92
/
/	Description : This Routine will return the EQM10 value.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed: None
/
/	Users: mnp_build_xid()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte mnp10_get_EQM10_value(void)
{
    return (dp10_get_EQM10_value());
}


/*******************************************************************************
/
/	Routine: M10_force_rate_change
/
/	Author : RSA
/
/	Creation Date: 08/14/92
/
/	Description : This Routine will force a speed change.
/
/	Input Parameters: ubyte type - Direction of speed change.
/				0 = Fallback
/				0 = Fallforward
/
/	Output Parameters: ubyte status - status of the function call
/				0 - OK
/				1 - MNP 10 not negotiated
/
/	Global Variables Changed: mnp_state
/
/	Users: mnp_force_rate_change()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte M10_force_rate_change(ubyte type)
{
    ubyte status;

    if (!mnp10_enabled)
        return (MNP10_NOT_NEGOT);

    if (!type)
        status = M10_retrain_init(MNP10_RETR_INIT__FORCE_FB);
    else
        status = M10_retrain_init(MNP10_RETR_INIT__FORCE_FF);

    if (status == MNP10_RETR_INIT__OK)
        mnp_state = BGND_STATE_RETRAIN_INIT;
    else if (status == MNP10_RETR_INIT__HALT)
        mnp_state = BGND_STATE_HALTED;

    return (OK);
}

/*******************************************************************************
/
/	Routine: M10_negot_parms
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will negotiate the MNP 10 parameters found
/		      in the received LR packet.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  mnp10_enabled,lr_v42bis_direction,
/				   lr_v42bis_str_len,lr_v42bis_dict_size,
/				   negot_v42bis,negot_v42bis_dict_size,
/				   negot_v42bis_str_len,mnp10_fb_negot,
/				   mnp10_ff_negot,mnp10_possible_rates,
/				   mnp10_neg_cellular
/
/	Users: negot_mnp_parms()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void M10_negot_parms(void)
{
   ubyte hold_p0, tmp_byte;

   /* Remote can't do mnp10, and therefore EC */
   if ((lr_data_optimization & LR_OPT_PARM__MNP10) == 0)
   {
       mnp10_enabled = 0;
       /* mnp10ec_mode = 0; */
   }

   /* No mnp10 or mnp10 ec */
   if ((lr_data_optimization & LR_OPT_PARM__MNP10EC) == 0)
   {
     /* mnp10ec_mode = 0; */
   }

   if ((lr_data_compression & LR_COMP_PARM__V42BIS_MASK) != 0)
   {
       lr_v42bis_direction = 3;
       lr_v42bis_str_len = 32;

       if ((lr_data_compression & LR_COMP_PARM__V42BIS_2048) != 0)
           lr_v42bis_dict_size = 2048;
       else if ((lr_data_compression & LR_COMP_PARM__V42BIS_1024) != 0)
           lr_v42bis_dict_size = 1024;
       else if ((lr_data_compression & LR_COMP_PARM__V42BIS_512) != 0)
           lr_v42bis_dict_size = 512;
   }

   lr_v42bis_direction &= 3;
   hold_p0 = negot_v42bis;

   if (mnp_state == BGND_STATE_ANSW_INITIAL)
   {
       if (hold_p0 == 1)
           hold_p0 = 2;
       else if (hold_p0 == 2)
           hold_p0 = 1;
   }

   negot_v42bis = hold_p0 &= lr_v42bis_direction;

   /* flip it back for BTINIT */
   if (mnp_state == BGND_STATE_ANSW_INITIAL)
   {
       if (hold_p0 == 1)
           hold_p0 = 2;
       else if (hold_p0 == 2)
           hold_p0 = 1;
   }

   if (negot_v42bis)
   {
       if (lr_v42bis_dict_size < negot_v42bis_dict_size)
           negot_v42bis_dict_size = lr_v42bis_dict_size;

       if (lr_v42bis_str_len < negot_v42bis_str_len)
           negot_v42bis_str_len = lr_v42bis_str_len;

       negot_data_compression = 0;
       compression_used(hold_p0 | 0x80);
   }

   tmp_byte = BTInit(hold_p0,negot_v42bis_dict_size,negot_v42bis_str_len);

   if (mnp10_enabled == TRUE)
   {
       if ((mnp10_lr_dss_basic_features & LR_DSS__FALLBACK) == 0)
           mnp10_fb_negot = 0;
       if ((mnp10_lr_dss_basic_features & LR_DSS__FALLFORWARD) == 0)
           mnp10_ff_negot = 0;
       if ((mnp10_lr_dss_basic_features & LR_DSS__V22) == 0)
           mnp10_possible_rates &= ~BPS1200_BIT;
       if ((mnp10_lr_dss_basic_features & LR_DSS__V22BIS) == 0)
           mnp10_possible_rates &= ~BPS2400_BIT;
       if ((mnp10_lr_dss_basic_features & LR_DSS__CELLULAR) != 0)
           mnp10_neg_cellular = 1; 	/* cellular is negot if only one side needs it */
       if ((mnp10_lr_dss_v32_v32bis & LR_DSS__9600TRL) == 0)
           mnp10_possible_rates &= ~BPS9600_BIT;
       if ((mnp10_lr_dss_v32_v32bis & LR_DSS__4800) == 0)
           mnp10_possible_rates &= ~BPS4800_BIT;
       if ((mnp10_lr_dss_v32_v32bis & LR_DSS__12000TRL) == 0)
           mnp10_possible_rates &= ~BPS12000_BIT;
       if ((mnp10_lr_dss_v32_v32bis & LR_DSS__7200TRL) == 0)
           mnp10_possible_rates &= ~BPS7200_BIT;
       if ((mnp10_lr_dss_v32_v32bis & LR_DSS__14400TRL) == 0)
           mnp10_possible_rates &= ~BPS14400_BIT;
   }

   /* Notify the data pump driver if we'll be running mnp10 on this link */
   dp10_start(mnp10_enabled);

   /* We don't need the standard cellular mode if we're running
       enhanced cellular mode */
   /*
   if (mnp10ec_mode)
       mnp10_neg_cellular = FALSE;
   */

   /* Add 'MNP10 CELLULAR' and 'MNP10 EC' to connect message */
   tmp_byte = 0;
   if (mnp10_enabled)
   {
       tmp_byte=1;             /* MNP10 enabled */

       /* When EC is added it's type=3 */

       if (mnp10_neg_cellular)
           tmp_byte=2;         /* MNP10/CELLULAR */

   }
   negotiate_mnp10(tmp_byte);

}


/*******************************************************************************
/
/	Routine: M10_check_lmi_seq_num
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will determine if the number of unacknowledged
/		      LMI frames will force a fallback on the line.
/
/	Input Parameters: None
/
/	Output Parameters: ubyte status - Indicates mnp_bg()'s next action.
/				0 - OK
/				2 - Continue processing background
/				4 - Disconnect due to retry limit reached
/
/	Global Variables Changed:  None
/
/	Users: mnp_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte M10_check_lmi_seq_num(void)
{
    ubyte stat_hold;

    mnp10_lmi_timer = LMI_TIMER_INIT_VALUE;

    stat_hold = mnp10_LMI_send_seq_num - mnp10_LMI_RCV_recv_seq_num;
    if ((stat_hold & 127) == 127)
    {
        stat_hold = M10_retrain_init(MNP10_RETR_INIT__FB);
        if (stat_hold == MNP10_RETR_INIT__DISCONN)
        {
            mnp_disconnect_code = DISCONNECT_CODE_RETRY_LIMIT_X;
            disconnect_flag = TRUE;
            return (DISCONNECT_CODE_RETRY_LIMIT_X);
        }
        else if (stat_hold == MNP10_RETR_INIT__OK)
        {
            mnp_state = BGND_STATE_RETRAIN_INIT;
            return (OK);
        }
    }

    /* Send an LM-I if we're idle or busy */
    if ((tx_send_pointer == tx_input_pointer) || (send_credits == 0))
    {
        /* If an LM-I is already buffered don't build a new one */
        if (mnp10_clear_to_build_lm())
        {
            mnp10_lmi_rcvd = FALSE;
            mnp10_build_lm(LM_TYPE__IDLE);
            mnp10_send_lm();
            return(OK);
        }
    }
    return (CONTINUE);
}


/*******************************************************************************
/
/	Routine: M10_retrain_bg
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine perform the background processing for the
/		      MNP 10 retrain, fallback, or fallforward procedures.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed: mnp_state
/
/	Users: mnp_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void M10_retrain_bg(void)
{
    ubyte t_b_status;

    t_b_status = proc_mnp10_retrain_bg();
    if (t_b_status != MNP10_RETRAIN__IN_PROG)
    {
        if (t_b_status == MNP10_RETRAIN__DISCONN)
        {
            mnp_state = BGND_STATE_DISCONNECT_SEND;
            buffering_enabled_flag = FALSE;
        }
        else if (t_b_status == MNP10_RETRAIN__HALT)
        {
            mnp_state = BGND_STATE_HALTED;
        }
        else
        {
            /* We initiate speed changes by sending LA credits of zero so
                mnp10_state so correct LA credits can be built */
            mnp10_status = MNP10_BG__IDLE;

            if (t_b_status != MNP10_RETRAIN__FF_FAIL)
            {
                M10_init_vars();
            }
            mnp_state = BGND_STATE_DATA_STATE;

            /* Wait on speed change to complete before notifying the ACU.
                This code handles the "AT-BO<CR>" command string */
            if (!idle_flag)
                mnp_status = MNP_STATUS_RUNNING;
        }
    }
}


/*******************************************************************************
/
/	Routine: M10_init_upshift
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will setup MNP 10 to perform an initial
/		      speed upshift.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed:  mnp_state
/
/	Users: mnp_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void M10_init_upshift(void)
{
    ubyte t_b_status;

    t_b_status = proc_mnp10_retrain_bg();
    if (t_b_status != MNP10_RETRAIN__IN_PROG)
    {
        if ((t_b_status == MNP10_RETRAIN__FF_OK) ||
            (t_b_status == MNP10_RETRAIN__FB_OK))
        {
            mnp_state = BGND_STATE_DATA_WAIT_SYNC;
        }
        else if (t_b_status == MNP10_RETRAIN__DISCONN)
        {
            mnp_state = BGND_STATE_DISCONNECT_SEND;
            buffering_enabled_flag = FALSE;
        }
        else if (t_b_status == MNP10_RETRAIN__HALT)
        {
            mnp_state = BGND_STATE_HALTED;
        }
    }
}


/*******************************************************************************
/
/	Routine: M10_bg
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine is the background processing for the MNP 10
/		      code.
/
/	Input Parameters: None
/
/	Output Parameters: ubyte mnp 10 status
/				0  -  Exit from the backgroung routine
/				2  -  Continue processing
/
/	Global Variables Changed: mnp10_number_of_retrains, mnp10_retrain_state,
/				  mnp10_initiator, mnp10_rcv_lm__fb_cmd,
/				  mnp10_rcv_lm__ff_cmd
/
/	Users: mnp_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte M10_bg(void)
{
    mnp10_status = proc_mnp10_bg();
    if (mnp10_status != MNP10_BG__IDLE)
    {
        if (mnp10_status == MNP10_BG__HALT)
        {
            mnp_state = BGND_STATE_HALTED;
            return(OK);
        }
        /* Else start the speed change procedure.  Execpt if its a
            fallforward -- in that case wait for all outstanding
            data to be acknowledged before changing state to fallforward */
        else if ((mnp10_status != MNP10_BG__FF_INIT)
            || (tx_input_pointer == tx_oldest_pointer))
        {
            mnp_state = BGND_STATE_RETRAIN_INIT;
            return(OK);
        }
    }
    return (CONTINUE);
}

/*******************************************************************************
/
/	Routine: M10_proc_retry_limit
/
/	Author : RSA
/
/	Creation Date: 09/24/92
/
/	Description : This Routine will determine the action to be taken due to
/		      the retry limit being reached.
/
/	Input Parameters: None
/
/	Output Parameters: ubyte mnp 10 status
/				0  -  OK status
/				4  -  Disconnect due to retry limit reached
/
/	Global Variables Changed: mnp10_state, mnp_disconnect_code, mnp10_LT_acked
/
/	Users: transmit_background(), resend_oldest_lt()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte M10_proc_retry_limit(void)
{
    if (MNP10_RETR_INIT__DISCONN == M10_retrain_init(MNP10_RETR_INIT__RETRAIN))
    {
        mnp_disconnect_code = DISCONNECT_CODE_RETRY_LIMIT_X;
        return (DISCONNECT_CODE_RETRY_LIMIT_X);
    }
    else
    {
        mnp_state = BGND_STATE_RETRAIN_INIT;
        mnp10_LT_acked = FALSE;
        return (OK);
    }
}
