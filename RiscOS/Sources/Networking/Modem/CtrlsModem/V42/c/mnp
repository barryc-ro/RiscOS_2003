/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           MNP.C
/
/       Module Version: 4.02
/
/       Function:       MNP interface functions to V42.C
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/25/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "EDF.MNP_QUE"
#include "EDF.MNP_LIB"
#include "EDF.MNP_AF"
#include "EDF.DCE_LINE"
#include "EDF.DTE"
#include "EDF.BTINIT"
#include "EDF.V42"
#include "MNP_DEF.H"
#include "MNP_STRU.H"
#include "MNP_EDE.H"
#include "EDF.M10_IF"
#include "EDF.MNP_COMM"

ubyte mnp_idle (void);
void mnp_reset (void);
void mnp_halt (ubyte );
ubyte mnp_tbrk (ubyte, uword);
void falling_back_to_speed (ubyte);
ubyte mnp_lbrk (ubyte, uword);
ubyte mnp_reason (void);
void mnp_timer (void);
void mnp_reconfigure (ubyte,
		      ubyte,
		      uword,
		      ubyte,
		      uword,
		      ubyte );
ubyte mnp_force_rate_change(ubyte);

void mnp_init (ubyte,
	       ubyte,
	       ubyte,
	       ubyte,
	       ubyte,
	       uword,
	       uword,
	       ubyte,
	       ubyte,
	       ubyte,
	       ubyte,
	       ubyte,
	       ubyte,
	       ubyte,
	       uword,
	       ubyte,
	       ubyte,
	       ubyte,
	       uword,
	       ubyte,
	       ubyte,
	       ubyte,
	       ubyte,
	       ubyte,
	       uword,
	       uword,
	       uword,
	       uword,
	       ubyte );

void mnp_start ( ubyte );

extern struct buffer_entry receive_buffer [NUMBER_OF_MNP_BUFFERS];

extern ubyte tx_packet_to_finish;

extern ubyte mnp_disconnect_code;	/* MNP DISCONNECT CODE		      */
						/* ( SET BY MNP UPON TERMINATION )    */
						/* THESE ARE THE SAME CODES AS SENT   */
						/* TO THE OTHER PEER MODEM IN THE     */
						/* DISCONNECT MESSAGE		      */
						/* 0 = NO REASON		      */
						/* 1 = OTHER THAN LR RECEIVED	      */
						/* 2 = INCOMPATIBLE PROTOCOL LEVEL    */
						/* 3 = INCOMPATIBLE OR UNKNOWN	      */
						/* 4 = RETRY LIMIT REACHED	      */
						/* 5 = INACTIVITY TIMER EXPIRED       */


/****************************************************************************/
/*		       PROCEDURAL DESCRIPTION FOR MNP			    */
/****************************************************************************/
/*									    */
/*   INITIALIZE - INPUT PARAMETERS ARE: 				    */
/*		      SERVICE LEVEL					    */
/*			  0=NO MNP					    */
/*			  1=MINIMAL SERVICE				    */
/*			  2=STANDARD SERVICE				    */
/*		      SERVICE CLASS					    */
/*			  0=ILLEGAL					    */
/*			  1=CREDIT VALUE OF 1				    */
/*			  2=FULL DUPLEX ASYNC				    */
/*			  3=FULL DUPLEX SYNC				    */
/*		      BLOCK/STREAM MODE (SERVICE TYPE)			    */
/*			  0=STREAM					    */
/*			  1=BLOCK					    */
/*		      ATTENTION PROCESSING				    */
/*			  0=IGNORE					    */
/*			  1=EXPEDITED/DESTRUCTIVE			    */
/*			  2=EXPEDITED/NON-DESTRUCTIVE			    */
/*			  3=NON-EXPEDITED/NON-DESTRUCTIVE		    */
/*		      RETRY LIMIT					    */
/*			  0=DISABLED					    */
/*			  NON 0=RETRY LIMIT				    */
/*		      INACTIVITY TIME LIMIT				    */
/*			  0=DISABLED					    */
/*			  NON 0=TIME LIMIT				    */
/*		      AUTORELIABLE TIME LIMIT				    */
/*			  0=DISABLED					    */
/*			  NON 0=MNP CONNECT TIME LIMIT			    */
/*		      BUFFERING ENABLED 				    */
/*			  0=NO						    */
/*			  1=YES 					    */
/*		      SELECTIVE RETRANSMISSION				    */
/*			  0=NO						    */
/*			  1=YES 					    */
/*		      DATA OPTIMIZATION 		 CLASS 4	    */
/*			  0=NO						    */
/*			  1=YES 					    */
/*		      STREAM SIZE 256			 CLASS 4	    */
/*			  0=NO						    */
/*			  1=YES 					    */
/*		      DATA COMPRESSION			 CLASS 5	    */
/*			  0=NO						    */
/*			  1=YES 					    */
/*									    */
/*	  INITIALIZE MEMORY						    */
/*		  SETUP BUFFER PER MAX BLOCK SIZE			    */
/*		      FOR SIMPLICITY SHOULD BUILD 1 SIZE BUFFER 	    */
/*		      THAT IS LARGE ENOUGH FOR MAX FRAME TO FIT INTO	    */
/*		      THAT WAY OUR ADDRESS LOOK UP ROUTINES ONLY NEED	    */
/*		      TO USE 1 ADDRESS CALCULATION ROUTINE AND THE MAX	    */
/*		      BUFFER NUMBER WILL BE A CONSTANT			    */
/*	  INITIALIZE HARDWARE						    */
/*	  SET INITIAL MNP STATE 					    */
/*	      MNP INITIAL STATE = HALTED				    */
/*	      SET MNP STATUS = HALTED					    */
/*	      RESET IDLE FLAG						    */
/*	  EXIT								    */
/****************************************************************************/

ubyte mnp_idle(void)
{
    if ((mnp_state == BGND_STATE_DATA_STATE) ||
        (mnp_state == BGND_STATE_BUFFERING_DATA)) {
        idle_flag = TRUE;
        mnp_status = MNP_STATUS_IDLING;
        return (OK);
    }
    return (IDLE_BAD_ENTRY_STATE);
}

void mnp_reset(void)
{
    /*                                                          */
    /*	      CAUSE IMMEDIATE SHUTDOWN OF ALL MNP FUNCTIONS	     */
    /*                                                          */
    mnp_status = MNP_STATUS_HALTED;
    mnp_state = BGND_STATE_HALTED;

/*  Indicate to V.42 that MNP 10 is no longer running	    */
    negotiate_mnp10(0);

/*  Reset the MNP 10 code   */
    mnp10_reset();
    mnp10_enabled = FALSE;

    idle_flag = FALSE;
    line_reset();
}


void mnp_halt( ubyte disconnect_reason )
{
    if ((mnp_state >= BGND_STATE_DATA_STATE) &&
        (mnp_state <= BGND_STATE_DISCONNECT_SHUT)) {
        mnp_user_disconnect_code = disconnect_reason;

        if (disconnect_reason != 0)
            buffering_enabled_flag = FALSE;
        else
            buffering_enabled_flag = TRUE;

        mnp_disconnect_code = disconnect_reason;     /* DISCONNECT_CODE_USER_REQUEST */
        disconnect_flag = TRUE;
        mnp_status = MNP_STATUS_DISCONNECTING;
        return;
    }
    else
        mnp_reset();
}


ubyte mnp_tbrk( ubyte m_length_tbrk, uword m_char_recvd )
{
    ubyte ret_val = 0;

    reset_inactivity_timer();
    if (mnp_negotiated_service != MNP_SERVICE_MINIMAL)
    {
        if (m_length_tbrk == 0)
            mnp_length_lbrk = mnp_attention_length;
        else
            mnp_length_lbrk = m_length_tbrk;

        if (mnp_state != BGND_STATE_BUFFERING_DATA)
        {
            if ((tx_attention_mode_flag == FALSE) && (tx_attention_flag == FALSE))
            {
                if (mnp_attention_process == MNP_ATTEN_EXP_DEST)
                {
                    ret_val = 1;
                    lna_delayed_flag = FALSE;
                }
                else if (mnp_attention_process == MNP_ATTEN_EXP_NON_D)
                {
                    lna_delayed_flag = FALSE;
                }
                else if (mnp_attention_process == MNP_ATTEN_NON_E_NON_D)
                {
                    lna_delayed_flag = TRUE;
                    lna_delay_count = m_char_recvd;
                }
                tx_attention_flag = TRUE;
            }
        }
        else
        {
            switch (mnp_attention_process)
            {
                case(MNP_ATTEN_EXP_DEST):
                    ret_val = 1;

                case(MNP_ATTEN_EXP_NON_D):
                    lna_delayed_flag = FALSE;
                    tx_attention_flag = TRUE;
                    break;

                case(MNP_ATTEN_NON_E_NON_D):
                    lna_delayed_flag = TRUE;
                    lna_delay_count = m_char_recvd;
                    break;
            }
        }
    }
    return(ret_val);
}


void falling_back_to_speed( ubyte fallback_reason )
{
    fallback_reason = fallback_reason;
    tx_busy_flag = FALSE;
    if (buffering_enabled_flag == TRUE)
    {
        mnp_state = BGND_STATE_BUFFERING_DATA;
        mnp_status = MNP_STATUS_MATCHING;

        reset_inactivity_timer();
    }
    else
    {
        mnp_state = BGND_STATE_HALTED;
    }

    /* Indicate to V.42 that MNP 10 is no longer running */
    negotiate_mnp10(0);
}


ubyte mnp_lbrk( ubyte m_length_lbrk, uword m_char_recvd )
{
    ubyte ret_val = 0;

    reset_inactivity_timer();
    if (m_length_lbrk == 0)
        mnp_length_tbrk = mnp_attention_length;
    else
        mnp_length_tbrk = m_length_lbrk;

    switch (mnp_attention_process)
    {
        case(MNP_ATTEN_EXP_DEST):
            ret_val = 1;

        case(MNP_ATTEN_EXP_NON_D):
            dce_delayed_flag = FALSE;
            receive_attention_flag = TRUE;
            break;

        case(MNP_ATTEN_NON_E_NON_D):
            dce_delayed_flag = TRUE;
            dce_delay_count = m_char_recvd;
            break;
    }
    return(ret_val);
}


ubyte mnp_reason(void)
{
    return(mnp_disconnect_code);
}


void mnp_timer(void)
{
    timer_tick++;
}


ubyte *mnp_tx(void)
{
    if (mnp10_enabled)
    {
        if (mnp10_resend_packet_count != 0)
        {
            mnp10_resend_packet_count--;
            return(tx_current);
        }
    }

    if (tx_holding != 0)
    {
        tx_current = tx_holding;
        tx_holding = 0;
        return (tx_current);
    }
    else
    {
        if (tx_data_holding != 0)
        {
            tx_current = tx_data_holding;
            tx_data_holding = 0;
            return (tx_current);
        }

        tx_current = 0;
        tx_busy_flag = FALSE;
        return(NUL);
    }
}


void mnp_reconfigure(	ubyte  r_attention_process,
			ubyte r_attention_length,
			uword r_inactivity_limit,
			ubyte r_max_retries,
			uword r_max_data_size,
			ubyte r_baud_rate )
{
    mnp_attention_process = r_attention_process;
    mnp_attention_length = r_attention_length;
    mnp_inactivity_limit = r_inactivity_limit;
    sel_max_retries = r_max_retries;
    mnp_max_retries = r_max_retries;
    mnp_max_tx_size = r_max_data_size;
    baud_rate = r_baud_rate;

    if (mnp_max_tx_size > 256)
        mnp_max_tx_size = 256;

    if (mnp_max_tx_size < 8)
        mnp_max_tx_size = 8;

    reset_inactivity_timer();
}


/*******************************************************************************
/
/	Routine: mnp_init
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will initialize variables used by the MNP
/		      code.
/
/	Input Parameters:
/	    ubyte p_request_service = 0 : no MNP
/				      1 : minimal service
/				      2 : standard service
/
/	    ubyte p_service_class  = 0 : reserved
/				     1 : ASYNC half duplex
/				     2 : ASYNC full duplex
/				     3 : SYNC full duplex
/
/	    ubyte p_service_type   = 0 : stream format
/				     1 : block format
/
/	    ubyte p_attention_process = 0 : ignore attention
/					1 : destructive/expidited
/					2 : nondestructive/expidited
/					3 : nondestructive/nonexpidited
/
/	    ubyte p_max_retries    = 0	   : no limit for retries
/				     non 0 : number of retries
/
/	    uword p_inactivity_limit = 0     : inactivity timer no used
/				       non 0 : number of inactivity seconds
/
/	    uword p_autoreliable_time = 0     : no autoreliable timer
/					non 0 : number of autoreliable seconds
/
/	    ubyte p_buffering_enabled = 0 : disabled
/					1 : enabled
/
/	    ubyte p_selective_enable  = 0 : no selective rejects
/					1 : selective rejects requested
/
/	    ubyte p_data_optimization = 0 : no optimization
/					1 : optimization requested
/
/	    ubyte p_stream_256	   = 0 : disable (size 64)
/				     1 : enabled (size can be greater than 64)
/
/	    ubyte p_data_compression = 0 : disable
/				       1 : enable
/
/	    ubyte p_baud_rate	   = see "baud_rate" definition
/
/	    ubyte p_attention_length = 0 : no length specified (use default)
/				       1 to 254 : length of break in 1/100 sec
/
/	    uword p_max_data_size  = < 64 : max data size will be 64
/				     = 64 : normal
/				     > 256: max data size will be 256
/
/	    ubyte p_fallback_flag  = 0 : disabled
/				     1 : enabled - no characters buffered
/				     2 : reserved
/				     3 : enabled - 200 characters buffered
/
/	    ubyte p_fallback_char  = autoreliable fallback flag
/
/	    ubyte p_v42bis	   = 0 : disable
/				     1 : transmit only
/				     2 : receive only
/				     3 : both directions
/
/	    uword p_v42bis_size    = 512 - 40960 : Normal operation
/
/	    ubyte p_v42bis_len	   = 6 to 250  : maximum string length
/
/	    ubyte p_mnp10_en	   = 0 : MNP 10 disabled
/				     1 : MNP 10 enabled
/
/	    ubyte p_cellular	   = 0 : MNP 10 cellular operation disabled
/				     1 : MNP 10 cellular operation enabled
/
/	    ubyte p_fallforward      = 0 : MNP 10 fallforward disabled
/				       1 : MNP 10 fallforward enabled
/
/	    ubyte p_fallback	     = 0 : MNP 10 fallback disabeld
/				       1 : MNP 10 fallback enabled
/
/	    uword p_wait_for_cd_time = Wait for carrier detection
/				       0 - 255 : in 100 msecs
/
/	    uword p_cd_recovery_time = Carrier recovery time
/				       0 - 255 : in 100 msecs
/
/	    uword p_cd_loss_time     = Carrier loss time
/				       0 - 255 : in 100 msecs
/
/	    uword p_mnp10_rates      = MNP 10 possible line speeds (bit mapped)
/				       bit 0 : 1200 bps
/				       bit 1 : 2400 bps
/				       bit 2 : 4800 bps
/				       bit 3 : 7200 bps
/				       bit 4 : 9600 bps
/				       bit 5 : 12000 bps
/				       bit 6 : 14400 bps
/				       bits 7 - 15 : reserved
/
/	    uword p_v32bis_enab      = 0 : Non V.32bis modem
/				       1 : V.32bis modem
/
/	Output Parameters: None
/
/	Global Variables Changed: mnp_state, mnp_status,tx_data_ptr,
/				  mnp_disconnect_code, tx_packet_to_finish,
/				  mnp_fallback_active, missing_frame_flag,
/				  peer_missing_frame_flag, baud_rate,
/				  send_sel_recover_rqst_flag,last_la_window,
/				  lr_credit_allocation, negot_v42bis,
/				  negot_v42bis_dict_size,negot_v42bis_str_len,
/				  mnp_max_tx_size, mnp10_enabled,mnp10_v32bis,
/				  mnp10_neg_cellular, mnp10_ff_negot,mnp10_fb_negot,
/				  mnp10_possible_rates,mnp10_carrier_loss_delay,
/				  mnp10_cd_qualify_time, mnp10_cd_wait_time,
/				  negot_data_optimization,negot_data_compression,
/				  timer_transmit_delay,mnp_send_dte_brk,
/				  tx_current, tx_holding,tx_data_holding,
/				  timer_inactivity, bad_lt_frame_flag,
/				  receive_attention_flag,tx_attention_mode_flag,
/				  send_sel_recover_rqst_flag, disconnect_flag,
/				  re_send_flag, empty_lt_in_progress,
/				  mnp_attention_length, mnp_fallback_flag
/				  mnp_fallback_char, send_attention_flag
/				  tx_attention_flag, receive_sequence_number
/				  ack_rcv_sequence_number,empty_sequence_number
/				  tx_input_pointer, dce_delayed_flag
/				  clear_receive_buffers_flag,clear_transmit_buffers_flag
/				  send_sequence_number, send_attn_sequence_no
/				  ln_receive_sequence, mnp_negotiated_service
/				  mnp_negotiated_class, buffering_enabled_flag
/				  negot_selective_retransmit,last_la_receive_sequence
/				  sel_max_retries, mnp_attention_process
/				  mnp_max_retries,mnp_inactivity_limit
/				  mnp_autoreliable_time, timer_tick
/				  negot_data_compression, idle_flag
/
/	Users: v42_i_mnp(), v42_start_detection(), v42_init_speed()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp_init(	ubyte p_request_service,
		ubyte p_service_class,
		ubyte p_service_type,
		ubyte p_attention_process,
		ubyte p_max_retries,
		uword p_inactivity_limit,
		uword p_autoreliable_time,
		ubyte p_buffering_enabled,
		ubyte p_selective_enable,
		ubyte p_data_optimization,
		ubyte p_stream_256,
		ubyte p_data_compression,
		ubyte p_baud_rate,
		ubyte p_attention_length,
		uword p_max_data_size,
		ubyte p_fallback_flag,
		ubyte p_fallback_char,
		ubyte p_v42bis,
		uword p_v42bis_size,
		ubyte p_v42bis_len,
		ubyte p_mnp10_en,
		ubyte p_cellular,
		ubyte p_fallforward,
		ubyte p_fallback,
		uword p_wait_for_cd_time,
		uword p_cd_recovery_time,
		uword p_cd_loss_time,
		uword p_mnp10_rates,
		ubyte p_v32bis_enab)
{
    ubyte tmp_byte;

    /*	Load unused parameters into temporary variable	*/
    tmp_byte = p_service_type;
    tmp_byte = p_stream_256;

    mnp_state = BGND_STATE_HALTED;
    mnp_status = MNP_STATUS_HALTED;
    tx_data_ptr = NUL;
    rx_data_ptr = NUL;
    mnp_disconnect_code = 0;
    rx_que_init();
    tx_packet_to_finish = FALSE;
    mnp_fallback_active = FALSE;
    missing_frame_flag = FALSE;
    peer_missing_frame_flag = FALSE;
    send_sel_recover_rqst_flag = FALSE;
    last_la_window = 0;
    dce_delayed_flag = 0;
    lr_credit_allocation = MNP_INITIAL_CREDITS;
    lr_v42bis_direction = MNP_V42BIS_P0_DEFAULT;

    negot_v42bis = p_v42bis;
    negot_v42bis_dict_size = p_v42bis_size;
    negot_v42bis_str_len = p_v42bis_len;

    /* Force P1 and P2 to legitimate values. */
    if (negot_v42bis_dict_size > DSIZE)
        negot_v42bis_dict_size = DSIZE;
    else if (negot_v42bis_dict_size < 512)
        negot_v42bis_dict_size = 512;

    if (negot_v42bis_str_len > 250)
        negot_v42bis_str_len = 250;
    else if (negot_v42bis_str_len < 6)
        negot_v42bis_str_len = 6;

    mnp_max_tx_size = p_max_data_size;

    if (mnp_max_tx_size > 256)
        mnp_max_tx_size = 256;

    if (mnp_max_tx_size < 8)
        mnp_max_tx_size = 8;

    mnp10_enabled = p_mnp10_en;
    mnp10_v32bis = p_v32bis_enab;
    mnp10_neg_cellular = p_cellular;
    mnp10_ff_negot = p_fallforward;
    mnp10_fb_negot = p_fallback;
    mnp10_possible_rates = p_mnp10_rates;
    mnp10_carrier_loss_delay = p_cd_loss_time;
    mnp10_cd_qualify_time = p_cd_recovery_time;
    mnp10_cd_wait_time = p_wait_for_cd_time;

    baud_rate = p_baud_rate;

    negot_data_optimization = p_data_optimization;
    negot_data_compression  = p_data_compression;

    timer_transmit_delay = 0;
    mnp_send_dte_brk = FALSE;
    tx_current = 0;
    tx_holding = 0;
    tx_data_holding = 0;
    timer_inactivity = 0;
    bad_lt_frame_flag = FALSE;
    receive_attention_flag = FALSE;
    tx_attention_mode_flag = FALSE;
    send_sel_recover_rqst_flag = FALSE;
    disconnect_flag = FALSE;
    re_send_flag = FALSE;
    empty_lt_in_progress = FALSE;

    mnp_attention_length = p_attention_length;
    mnp_fallback_flag = p_fallback_flag;
    mnp_fallback_char = p_fallback_char;

    send_attention_flag = FALSE;
    tx_attention_flag = FALSE;

    receive_sequence_number   =
        ack_rcv_sequence_number =
        empty_sequence_number   = 0;

    tx_input_pointer = 0;

    dce_delayed_flag = 0;

    clear_receive_buffers();
    clear_transmit_buffers();
    clear_receive_buffers_flag = FALSE;
    clear_transmit_buffers_flag = FALSE;

    send_sequence_number = 0;
    send_attn_sequence_no = 0;

    ln_receive_sequence = 0xff; 	/* set "ln_receive_sequence" to highest value */
    lna_delayed_flag = FALSE;

    if (p_request_service > MNP_SERVICE_STANDARD)
        return;

    mnp_negotiated_service = p_request_service;

    if (p_service_class > MNP_SERVICE_CLASS_FULL_D_SYNC)
        return;

    mnp_negotiated_class = p_service_class;

    if (p_buffering_enabled == TRUE)
        buffering_enabled_flag = TRUE;
    else
        buffering_enabled_flag = FALSE;

    if (p_selective_enable == 0)
        negot_selective_retransmit = 0;
    else
        negot_selective_retransmit = 1;

    last_la_receive_sequence = 0xFF;
    sel_max_retries = p_max_retries;
    mnp_attention_process = p_attention_process;
    mnp_max_retries = p_max_retries;
    mnp_inactivity_limit = p_inactivity_limit;
    mnp_autoreliable_time = p_autoreliable_time;

    timer_tick = 0;

    negot_data_compression  = p_data_compression;

    if (negot_data_compression)
        if (!ad_frq_init())
            negot_data_compression = 0;

    idle_flag = FALSE;

    /*	Initialize MNP 10 code	*/
    mnp10_init_vars();
    mnp10_init();

    bad_lt_done = FALSE;
}


/**************************************************************************/
/* STARTUP  --- INPUT PARAMETERS ARE:					  */
/*		STARTUP MODE TYPE  0=ORIGIONATE, 1=ANSWER, 2=CONTINUE	  */
/*		RETURN CODE  0=OK, NON 0=ERROR				  */
/**************************************************************************/

void mnp_start(ubyte startup_code)
{
    if (startup_code == MNP_STARTUP_MODE_CONTINUE)
    {
        if (idle_flag)
        {
            idle_flag = FALSE;
            if (mnp_state == BGND_STATE_DATA_STATE)
            {
                send_acknowledge_flag = TRUE;
                mnp_status = MNP_STATUS_RUNNING;
            }
            else if (mnp_state == BGND_STATE_BUFFERING_DATA)
            {
                mnp_status = MNP_STATUS_MATCHING;
            }
        }
    }
    else if (mnp_negotiated_service != MNP_SERVICE_SPEED_MATCHING)
    {
        mnp_startup_mode = startup_code;
        if (mnp_state == BGND_STATE_HALTED)
        {
            line_init(LINK_MNP_ASYNC);
            start_receive();
            turnon_autoreliable();
            mnp_status = MNP_STATUS_CONNECTING;

            if (startup_code == MNP_STARTUP_MODE_ORIGINATE)
            {
                /* FSK lines require a little longer to
                   settle, else the LR frame will get
                   corrupted, and a re-transmission will
                   kick in. However, the autoreliable timer
                   may expire 1st, sooo lets give the lower
                   speeds a little more time to settle.
                */
                if( baud_rate == BAUD_300 )
                   reset_transmit_delay(TRANSMIT_DELAY_INIT_LTIME);
                else
                   reset_transmit_delay(TRANSMIT_DELAY_INIT_TIME);

                mnp_state = BGND_STATE_ORIG_INITIAL;
            }
            else if (startup_code == MNP_STARTUP_MODE_ANSWER)
            {
                mnp_state = BGND_STATE_ANSW_INITIAL;
            }
        }
    }
    else	      /* MNP NOT ENABLED */
    {
        mnp_startup_mode = startup_code;
        if (buffering_enabled_flag)
        {
            mnp_state = BGND_STATE_BUFFERING_INIT;
        }
    }
}


ubyte mnp_force_rate_change(ubyte type)
{
    return (mnp10_force_rate_change(type));
}

