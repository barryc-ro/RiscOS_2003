/*********************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC 27615
/               (919) 846-7171
/
/       This document contains material confidential to RSA.
/       Its contents must not be revealed, used or disclosed to
/       anyone or company with out written permission by RSA.
/       The information contained herein is solely for the use of RSA.
/
/       File:           BTLZ_DAT.C
/
/       Module Version: 4.02
/
/       Function:       This file contains BTLZ variable definitions.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/10/92
/                       11/1/94 (V4.01) - Add ETC and MNP10 updates
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"

ubyte V42bis_P0;       /* Encoding direction: 0=none, 1=encode, 2=decode, 3=both */
word V42bis_P1;        /* Dictionary size (number of nodes) */
ubyte V42bis_P2;       /* Maximum string length */
ubyte V42bis_N_1;      /* Number of bits in final codeword */
word V42bis_dbase;     /* Offset for decoder dictionary */
word V42bis_N_2;       /* Number of codewords (dictionary size) */
word V42bis_N_7;       /* Maximum string length to be learned */

ubyte De_transparent, De_bf_full, De_dictfull, De_esc_mode, mode_sw;

uword De_s_ptr, De_c_ptr, De_C_1, De_last_C1;
ubyte buff[256], *top, De_esc_char, De_stleng, De_C_2;

uword s_ptr, last_C1;
uword comp_bits;
uword C_1;                  /* Next empty dictionary entry (encoder) */
uword C_2;                  /* current codeword size (encoder)*/
uword C_3;                  /* Threshold for codeword changes (encoder)*/
uword tcount;               /* Encoder Character count */
ubyte axf_delay;            /* anti-expansion character count */
ubyte esc_char, stleng;
ubyte transparent, dictfull, flushed;

uword ob;	                /* bit buffer retained between calls (encode) */
uword bt_m;	                /* number of bits in bit buffer (encode) */

ubyte bt_k;	                /* #bits in bit buffer (decode) */
uword bitbuff;	            /* bit buffer (decode) */
ubyte reenter_decode;       /* decoder re-entry flag */

ubyte index;                /* current index into lapm frame data */
ubyte index_max;            /* maximum data index for lapm frame */

ubyte need_tx_frame, tx_ready, rx_needed; /* balance flags */

ubyte btlzrx_done, btlztx_done;     /* encoder/decoder done flags */

uword dte_to_block_free_count;      /* number of bytes free in dte tx buffer */
ubyte *dte_tx_block_pointer;        /* pointer to dte tx data */
uword dte_to_block_update_count;    /* Number of bytes decoded */

ubyte *dte_rx_block_pointer;        /* pointer to dte rx data */
uword dte_from_block_update_count;  /* Number of bytes encoded */
uword dte_from_block_num_count;     /* Number of bytes awaiting encoding */

word  encode_i_ptr, encode_c_ptr, encode_p;
ubyte encode_found, encode_inhibit, encode_in_val;
ubyte *btlzrxdataptr;

ubyte decode_found, decode_inhibit;
ubyte decode_bf_inh, decode_firstchar, *decode_sp;
word decode_in_val;
uword decode_i_ptr, decode_l_ptr, decode_p, decode_in_word;

/* LAPM specific BTLZ vars */
ubyte *btlzdataptr;
uword btlz_empty_count;


