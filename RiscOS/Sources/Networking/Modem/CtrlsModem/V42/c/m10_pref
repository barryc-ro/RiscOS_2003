/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           M10_PREF.C
/
/       Module Version: 4.02
/
/       Function:       Routines which perform MNP preferred operations.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:  9/24/92
/                       11/1/94 (V4.01) - Add ETC and MNP10 updates
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "mnp_def.h"
#include "mnp_stru.h"
#include "mnp_ede.h"
#include "m10_def.h"
#include "m10_ede.h"
#include "m10_fnc.edf"
#include "mnp_if.edf"
#include "dce_line.edf"
#include "dte.edf"

void M10_go_now(ubyte *,ubyte,ubyte);
ubyte M10_build_xid(ubyte *, uword, ubyte, ubyte, ubyte,
			   ubyte, ubyte, ubyte, uword, ubyte,
			   ubyte, uword, ubyte, ubyte);
ubyte empty_lapm_mnp_lr(ubyte *,ubyte);
void build_lapm_mnp_lr(void);
void mnp_build_M10_lr(ubyte []);
void M10_call_err(uword);

/*******************************************************************************
/
/	Routine: M10_build_xid
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will produce an LR packet that will be
/		      appended to the end of the XID packet during mnp preferred
/		      operation.
/
/	Input Parameters: ubyte *ptr - Pointer to the beginning of the LR data.
/			  uword v_max_data  - Maximum data packet size
/			  ubyte v_mnp10_ena - Indicates if MNP 10 operation is
/					      to be negotiated
/			  ubyte v_data_comp - Indicates if MNP class 5 is to
/					      be negotiated
/			  ubyte v_opt	    - Indicates if MNP class 4 is to
/					      be negotiated
/			  ubyte v_cellular  - Indicates if MNP 10 cellular operation
/					      is to be negotiated
/			  ubyte v_FF	    - Indicates if MNP 10 fallforward operation
/					      is to be negotiated
/			  ubyte v_FB	    - Indicates if MNP 10 fallback operation
/					      is to be negotiated
/			  uword v_rates     - MNP 10 possible rates
/			  ubyte v_srej	    - Indicates if MNP selective retransmission
/					      is to be negotiated
/
/	Output Parameters: ubyte *(orig_ptr + 1) - Size of the LR data
/
/	Global Variables Changed:  None
/
/	Users: v42_build_mnp_xid()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte M10_build_xid(ubyte *ptr, uword v_max_data,
		     ubyte v_mnp10_ena, ubyte v_data_comp,
		     ubyte v_opt, ubyte v_cellular, ubyte v_FF,
		     ubyte v_FB, uword v_rates, ubyte v_srej,
		     ubyte v_btlz_req, uword v_btlz_dict_size,
		     ubyte v_btlz_str_len, ubyte v_strt_code)
{
    ubyte loc_array[16];
    ubyte *orig_ptr;

    orig_ptr = ptr;
    ptr++;

    loc_array[0] = 1;
    loc_array[1] = 0;
    loc_array[2] = 8;
    loc_array[3] = 0;
    loc_array[4] = 0;

    if (v_max_data > 64)
	loc_array[4] = LR_OPT_PARM__256;
    if (v_opt == TRUE)
	loc_array[4] += LR_OPT_PARM__FIX_FLD;

    if (v_mnp10_ena == TRUE)
	loc_array[4] += LR_OPT_PARM__MNP10;

/*	Set the echo detection bit if initiator of the LR	*/
    if (!v_strt_code)
	loc_array[4] |= 0x80;

    loc_array[5] = v_data_comp;

    loc_array[6] = 0;
    loc_array[7] = 0;
    loc_array[8] = 0;
    if (v_mnp10_ena == TRUE)
    {
	if (v_FB != FALSE)
		loc_array[6] = LR_DSS__FALLBACK;
	if (v_FF != FALSE)
		loc_array[6] += LR_DSS__FALLFORWARD;
	if (v_rates & BPS1200_BIT)
		loc_array[6] += LR_DSS__V22;
	if (v_rates & BPS2400_BIT)
		loc_array[6] += LR_DSS__V22BIS;
	if (v_cellular != FALSE)
		loc_array[6] += LR_DSS__CELLULAR;

/*	loc_array[7] = 0;	*/

	if (v_rates & BPS9600_BIT)
		loc_array[7] += LR_DSS__9600TRL;
	if (v_rates & BPS4800_BIT)
		loc_array[7] += LR_DSS__4800;
	if (v_rates & BPS12000_BIT)
		loc_array[7] += LR_DSS__12000TRL;
	if (v_rates & BPS7200_BIT)
		loc_array[7] += LR_DSS__7200TRL;
	if (v_rates & BPS14400_BIT)
		loc_array[7] += LR_DSS__14400TRL;

	loc_array[8] = v_cellular;

	loc_array[9] = mnp10_get_AGC10_value();
	loc_array[10] = mnp10_get_EQM10_value();
    }

/*	Determine if parameter 9 or 14 should be used for V.42bis negotiation	*/
    if ((v_btlz_req == 3) && (v_btlz_str_len == 32) &&
	( (v_btlz_dict_size == 512) || (v_btlz_dict_size == 1024)
	|| (v_btlz_dict_size == 2048)) )
    {
	loc_array[11] = 0;

	if (v_btlz_dict_size == 2048)
		loc_array[5] |= LR_COMP_PARM__V42BIS_2048;
	else if (v_btlz_dict_size == 1024)
		loc_array[5] |= LR_COMP_PARM__V42BIS_1024;
	else if (v_btlz_dict_size == 512)
		loc_array[5] |= LR_COMP_PARM__V42BIS_512;
    }
    else
    {
	loc_array[11] = v_btlz_req;
	loc_array[12] = (ubyte) (v_btlz_dict_size >> 8);
	loc_array[13] = (ubyte) v_btlz_dict_size;
	loc_array[14] = v_btlz_str_len;
    }

    loc_array[15] = v_srej;

    *orig_ptr = mpg_mnp_build_lr_packet(ptr,&loc_array[0]);
    return( *orig_ptr + 1 );
}


/*******************************************************************************
/
/	Routine: M10_go_now
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will allows a MNP link to startup from the
/		      LAPM negotiaton. MNP preferred operation.
/
/	Input Parameters: ubyte *ptr - Pointer to the beginning of the LR data.
/			  ubyte ptr_cnt - Size of the LR packet
/			  ubyte answ - Indicates role during the connection
/				0 - Originate
/				1 - Answer
/
/	Output Parameters: None
/
/	Global Variables Changed: lr_v42bis_direction,lr_v42bis_dict_size,
/				  lr_v42bis_str_len, mnp_state,
/				  mnp_autoreliable_time,autoreliable_timed_out,
/				  mnp_fallback_active
/
/	Users: v42_bg()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void M10_go_now(ubyte *ptr, ubyte ptr_cnt, ubyte answ)
{
	line_init(LINK_MNP_SYNC);
	mpg_start_receive();

	mnp_startup_mode = answ;

	if (answ == 1)
	{
		lr_v42bis_direction = MNP_V42BIS_P0_DEFAULT;
		lr_v42bis_dict_size = MNP_V42BIS_P1_DEFAULT;
		lr_v42bis_str_len  = MNP_V42BIS_P2_DEFAULT;

		while (((*ptr != 0xff) || (*(ptr+1) != 0xff)) && (ptr_cnt != 0))
		{
			if ((*ptr == 0xf0) && (*(ptr+1) == 0))
			{
			    if ((*(ptr+5) == 'V') && (*(ptr+6) == '4') && (*(ptr+7) == '2'))
			    {
				ptr_cnt -= 8;
				ptr += 8;
				if (*ptr == 1)
				{
					lr_v42bis_direction = *(ptr + 2);
					ptr += 3;
					ptr_cnt -= 3;
				}

				if (*ptr == 2)
				{
					lr_v42bis_dict_size = (uword) *(ptr+2) << 8;
					lr_v42bis_dict_size += (uword) *(ptr+3);
					ptr += 4;
					ptr_cnt -= 4;
				}

				if (*ptr == 3)
				{
					lr_v42bis_str_len = *(ptr + 2);
					ptr += 3;
					ptr_cnt -= 3;
				}
				ptr--;
			    }
			    else
			    {
				ptr_cnt -= *(ptr + 2) + 2;
				ptr += *(ptr + 2) + 2;
			    }
			}

			ptr++;
			ptr_cnt--;
		}

		if (empty_lapm_mnp_lr(ptr+3,*(ptr+2)) == OK)
		{
			build_lapm_mnp_lr();
			mpg_send_lr();
			mnp_state = BGND_STATE_LAPM_ANSW_INITIAL;
		}
		else
		{
			mnp_state = BGND_STATE_HALTED;
		}
	}
	else
	{
/*		if (empty_lapm_mnp_lr(ptr+9,*(ptr+6)) == OK)*/
		if (empty_lapm_mnp_lr(ptr+3,*(ptr)) == OK)
		{
			mpg_build_la_init();
			mpg_send_la();
			mpg_reset_timeout_timer();
			mpg_reset_retries();
			mpg_clear_receive_buffers();
			mpg_clear_transmit_buffers();
			mnp_state = BGND_STATE_ORIG_SEND_LA;
		}
		else
		{
			mnp_state = BGND_STATE_HALTED;
		}
		mnp_autoreliable_time = 0;
	}
	autoreliable_timed_out = FALSE;
	if ( mnp_autoreliable_time != 0 )
	{
		mnp_fallback_active = TRUE;
		line_autoreliable_fallback ( 1, mnp_autoreliable_time, 0, 0);
	}
	else
	{
		mpg_turnoff_autoreliable();
	}

	mnp_status = MNP_STATUS_CONNECTING;
}


/*******************************************************************************
/
/	Routine: empty_lapm_mnp_lr
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine is called to empty the LR parameters found
/		      in the LAPM XID packet during MNP preferred operations.
/
/	Input Parameters: ubyte *ptr - Pointer to the beginning of the LR data.
/			  ubyte ptr_cnt - Size of the LR packet
/
/	Output Parameters: value returned from mnp_empty_lr_packet() or
/			   negot_mnp_parms().
/
/	Global Variables Changed: lr_protocol_level, lr_service_class
/
/	Users: M10_go_now()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
ubyte empty_lapm_mnp_lr(ubyte *ptr,ubyte count)
{
    ubyte return_code;

    if ((return_code = mpg_mnp_empty_lr_packet(ptr,count-2)) != OK)
    {
	return(return_code);
    }

    lr_protocol_level = mnp_negotiated_service;
    lr_service_class = mnp_negotiated_class;

    return(mpg_negot_mnp_parms());
}


/*******************************************************************************
/
/	Routine: build_lapm_mnp_lr
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine is called to build the LR parameters found
/		      in the LAPM XID packet during MNP preferred operations.
/
/	Input Parameters: None
/
/	Output Parameters: None
/
/	Global Variables Changed: lr_send_segement
/
/	Users: M10_go_now()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void build_lapm_mnp_lr()
{
	mpg_common_build_lr(0,0);
}


/*******************************************************************************
/
/	Routine: mnp_build_M10_lr
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine will determine the value of the MNP 10
/		      LR parameters.
/
/	Input Parameters: ubyte loc_array[] - Contains the MNP 10 parameters.
/
/	Output Parameters: None
/
/	Global Variables Changed:  None
/
/	Users: build_lr(), build_lapm_mnp_lr()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void mnp_build_M10_lr(ubyte loc_array[])
{
    loc_array[6] = 0;
    loc_array[7] = 0;
    loc_array[8] = 0;

    if (mnp10_enabled == TRUE)
    {
	if (mnp10_fb_negot == TRUE)
		loc_array[6] = LR_DSS__FALLBACK;
	if (mnp10_ff_negot == TRUE)
		loc_array[6] += LR_DSS__FALLFORWARD;
	if (mnp10_possible_rates & BPS1200_BIT)
		loc_array[6] += LR_DSS__V22;
	if (mnp10_possible_rates & BPS2400_BIT)
		loc_array[6] += LR_DSS__V22BIS;
	if (mnp10_neg_cellular == TRUE)
		loc_array[6] += LR_DSS__CELLULAR;

/*	loc_array[7] = 0;	*/

	if (mnp10_possible_rates & BPS9600_BIT)
		loc_array[7] += LR_DSS__9600TRL;
	if (mnp10_possible_rates & BPS4800_BIT)
		loc_array[7] += LR_DSS__4800;
	if (mnp10_possible_rates & BPS12000_BIT)
		loc_array[7] += LR_DSS__12000TRL;
	if (mnp10_possible_rates & BPS7200_BIT)
		loc_array[7] += LR_DSS__7200TRL;
	if (mnp10_possible_rates & BPS14400_BIT)
		loc_array[7] += LR_DSS__14400TRL;

	loc_array[8] = mnp10_neg_cellular;

	loc_array[9] = mnp10_AGC10_value;
	loc_array[10] = mnp10_EQM10_value;
    }

/* Determine if parameter 9 or 14 should be used for V.42bis negotiation   */

/*
 *  Send parameter 9
 */
    if ((negot_v42bis == 3) && (negot_v42bis_str_len == 32) &&
	( (negot_v42bis_dict_size == 512) || (negot_v42bis_dict_size == 1024)
	|| (negot_v42bis_dict_size == 2048)) )
    {
	loc_array[11] = 0;

	if (negot_v42bis_dict_size == 2048)
		loc_array[5] |= LR_COMP_PARM__V42BIS_2048;
	else if (negot_v42bis_dict_size == 1024)
		loc_array[5] |= LR_COMP_PARM__V42BIS_1024;
	else if (negot_v42bis_dict_size == 512)
		loc_array[5] |= LR_COMP_PARM__V42BIS_512;
    }
    else  /* send parameter 14 */
    {
	loc_array[11] = negot_v42bis;
	loc_array[12] = (ubyte) (negot_v42bis_dict_size >> 8);
	loc_array[13] = (ubyte) negot_v42bis_dict_size;
	loc_array[14] = negot_v42bis_str_len;
    }
}


/*******************************************************************************
/
/	Routine: M10_call_err
/
/	Author : RSA
/
/	Creation Date: 03/13/92
/
/	Description : This Routine is called if V.42bis has detected an error
/		      during decoding.
/
/	Input Parameters: uword disc_val - Character that caused the error.
/
/	Output Parameters: None
/
/	Global Variables Changed: mnp_status, mnp_user_disconnect_code,
/				  mnp_disconnect_code, disconnect_flag
/
/	Users: v42_call_err()
/
/	-------------------------------------------------------------
/	-			Modifications			    -
/	-------------------------------------------------------------
/
/	Author & Date:	RSA
/	Description:
/	Reason:
/
*******************************************************************************/
void M10_call_err(uword disc_val)
{
	ubyte disconnect_reason;

    disconnect_reason = (ubyte) disc_val;
    if ((mnp_state >= BGND_STATE_DATA_STATE) &&
	(mnp_state <= BGND_STATE_DISCONNECT_SHUT))
    {
	mnp_user_disconnect_code = MNP_BTLZ_ERROR;
	mnp_disconnect_code = MNP_BTLZ_ERROR;	  /* DISCONNECT_CODE_USER_REQUEST */
	disconnect_flag = TRUE;
	mnp_status = MNP_STATUS_DISCONNECTING;
    }
    else
    {
	mpg_mnp_reset();
    }
}

