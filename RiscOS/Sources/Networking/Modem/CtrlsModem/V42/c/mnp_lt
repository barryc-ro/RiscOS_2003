/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           MNP_LT.C
/
/       Module Version: 4.02
/
/       Function:       Routines for MNP LT processing.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/24/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"

/*
 *	empty_lt_continue, empty_lt, init_tx_frame, and build_lt can
 *	be found in mnp_af.c/mnp_af.asm.  This was done for easy
 *	portability between the C and Z180 ASM versions.
 */

void send_lt(void);
ubyte resend_oldest_lt(void);
ubyte empty_lt_parms(void);

#include "EDF.MNP_LIB"
#include "EDF.MNP_AF"
#include "EDF.DTE"
#include "EDF.M10_IF"
#include "MNP_DEF.H"
#include "MNP_STRU.H"
#include "MNP_EDE.H"


void send_lt()
{
    mnp10_calc_BLER();
    transmit_active_frame = (ubyte *)&transmit_buffer[get_send_entry()].io_status;
    start_tx();
    data_frame_sent = TRUE;
}


ubyte resend_oldest_lt(void)
{
    if (mnp_max_retries != 0)
    {
	if (mnp_retry_limit == 0)
	{
	    if (mnp10_enabled != 0)
	    {
		return (mnp10_proc_retry_limit());
	    }
	    else
	    {
		mnp_disconnect_code = DISCONNECT_CODE_RETRY_LIMIT_X;
                disconnect_flag = TRUE;
		return (DISCONNECT_CODE_RETRY_LIMIT_X);
	    }
	}
	else
	{
	    if (data_frame_sent == TRUE)
	    {
		mnp_retry_limit--;
		data_frame_sent = FALSE;
	    }
	}
    }
    tx_send_pointer = tx_oldest_pointer;
    return (OK);
}


ubyte empty_lt_parms(void)
{
    ubyte count, i;

    if (rx_buf_ptr->pdu_type != PDU_TYPE_LT)
	return(EMPTY_PDU_BAD_TYPE);
    count = rx_buf_ptr->header_length - 2;
    if (negot_data_optimization)
	lt_send_sequence = rx_buf_ptr->pdu_data[0];
    else {
	i = 0;
	lt_parm_flags = 0;
	while ((count != 0) && ((count & 128) == 0)) {
	    switch (rx_buf_ptr->pdu_data[i]) {

		case(1): /* send sequence */
		if (rx_buf_ptr->pdu_data[++i] != 1)
		    return(EMPTY_PDU_PARM_COUNT);
		count -= 3;
		lt_send_sequence = rx_buf_ptr->pdu_data[++i];
		lt_parm_flags |= 2;
		break;

	    default:
		count -= (rx_buf_ptr->pdu_data[++i] + 2);
		i += rx_buf_ptr->pdu_data[i];
		break;
	    }
	    i += 1;
	}
	if ((lt_parm_flags & LT_PARMS_REQUIRED ^ LT_PARMS_REQUIRED) != 0)
	    return(EMPTY_PDU_NOT_ALL_PARMS);
    }
    return(OK);
}

