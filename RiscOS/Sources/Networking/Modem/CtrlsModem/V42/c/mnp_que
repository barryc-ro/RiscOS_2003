/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           MNP_QUE.C
/
/       Module Version: 4.02
/
/       Function:       MNP queueing/buffer control routines.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/25/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"

void init_dynamic_tx(void);
void do_inc_dynamic_tx(ubyte);
void inc_dynamic_tx(void);
void do_dec_dynamic_tx(ubyte);
void dec_dynamic_tx(void);
void div_dynamic_tx(void);
void got_la_info(void);
void rx_que_init(void);
ubyte *get_empty(void);
ubyte *get_process(void);
ubyte get_process_number(void);
ubyte get_rx_offset_num(ubyte *);
void put_empty(ubyte *);
void mnp_rx_fg(void);


#include "EDF.V42"
#include "EDF.MNP_LIB"
#include "EDF.MNP_BG"
#include "EDF.MNP_AF"
#include "EDF.MNP_LA"
#include "EDF.MNP_LD"
#include "EDF.MNP_LN"
#include "EDF.MNP_LNA"
#include "EDF.MNP_LR"
#include "EDF.MNP_LRR"
#include "EDF.MNP_LT"
#include "EDF.DCE_LINE"
#include "EDF.DTE"
#include "EDF.M10_IF"
#include "MNP_DEF.H"
#include "MNP_STRU.H"
#include "MNP_EDE.H"
#include "EDF.BTINIT"

extern ubyte V42bis_P0;

#define inc(ptr) ((ptr < NUMBER_OF_MNP_BUFFERS) ? (ptr++) : (ptr=0))

void init_dynamic_tx(void)
{
    if (mnp10_enabled != 0)
    {
	dynamic_txmax = 32;
    }
    else
    {
	dynamic_txmax = 256;
    }
    block_size_used(dynamic_txmax);
}


void do_inc_dynamic_tx(ubyte incr)
{
	dynamic_txmax += (uword) incr;

	if (dynamic_txmax > 256)
		dynamic_txmax = 256;

	if (dynamic_txmax > mnp_max_tx_size)
		dynamic_txmax = mnp_max_tx_size;

	block_size_used(dynamic_txmax);
}


void inc_dynamic_tx(void)
{
    word i;

    if (mnp10_enabled != 0)
    {
	i = (256 - dynamic_txmax) * 4;
	i /= 256;
    }
    else
    {
	i = dynamic_txmax / 4;
    }

    if (i < 1)
	i = 1;

    do_inc_dynamic_tx((ubyte)i);
}


void do_dec_dynamic_tx(ubyte decr)
{
	dynamic_txmax -= decr;

	if (dynamic_txmax < 8)
		dynamic_txmax = 8;

	block_size_used(dynamic_txmax);
}


void dec_dynamic_tx(void)
{
    word i;
    if (mnp10_enabled != 0)
    {
	i = dynamic_txmax * 45;
	i /= 256;
    }
    else
    {
	i = dynamic_txmax / 2;
    }

	do_dec_dynamic_tx((ubyte) i);
}


void div_dynamic_tx(void)
{
	do_dec_dynamic_tx(dynamic_txmax / 2);
}


ubyte get_rx_offset_num(ubyte *addr)
{
	ubyte i;

	i = 0;
	while ((addr != (ubyte *)&receive_buffer[i]) && (i != NUMBER_OF_MNP_BUFFERS-1))
		i++;
	return (i);
}


void rx_que_init(void)
{
	ubyte temp;
	for (temp=0; temp<NUMBER_OF_MNP_BUFFERS; temp++)
		emptied_que[temp] = &receive_buffer[temp];

	emptied_que__in = NUMBER_OF_MNP_BUFFERS;
	emptied_que__out = 0;
	received_que__in = received_que__out = 0;
	process_que__in = process_que__out = 0;
}


ubyte *get_empty(void)
{
	ubyte *addr;

	if (emptied_que__in != emptied_que__out)
	{
		addr = (ubyte *)emptied_que[emptied_que__out];
		inc(emptied_que__out);
	}
	else
		addr = NULL;

	return(addr);
}


void put_empty(ubyte *addr)
{
	emptied_que[emptied_que__in] = (struct buffer_entry *)addr;
	inc(emptied_que__in);
}


ubyte *get_received(void)
{
	ubyte *addr;

	if (received_que__in != received_que__out)
	{
		addr = (ubyte *)received_que[received_que__out];
		inc(received_que__out);
	}
	else
		addr = NULL;

	return(addr);
}


void put_received(ubyte *addr)
{
	received_que[received_que__in] = (struct buffer_entry *)addr;
	inc(received_que__in);
}


ubyte get_process_number(void)
{
	ubyte num;
	ubyte hold;

	num = 0;
	hold = process_que__out;
	while (process_que__in != hold)
	{
		num++;
		inc(hold);
	}
	return(num);
}


ubyte *get_process(void)
{
	ubyte *addr;

	if (process_que__in != process_que__out)
	{
		addr = (ubyte *)process_que[process_que__out];
		inc(process_que__out);
	}
	else
		addr = NULL;

	return(addr);
}


void got_la_info(void)
{
	la_received_flag = TRUE;
	if ((la_credit_amount != last_la_credits) || (la_receive_sequence != last_la_receive_sequence))
	{
	    last_la_credits = la_credit_amount;
	    if (last_la_receive_sequence != la_receive_sequence)
	    {
		reset_retries();
		last_la_receive_sequence = la_receive_sequence;
		mnp10_LT_acked = TRUE;
	    }

	    inc_dynamic_tx();
	}
	else if (tx_send_pointer != tx_oldest_pointer)
	{
	    if ((last_la_credits != 0) && (la_credit_amount != 0))
	    {
		last_la_credits = 0xff; 	/* set to invalid # so it will
						   show up as duplicate la. */
		re_send_flag = TRUE;
		dec_dynamic_tx();
	    }
	}
}


void put_process(ubyte *addr)
{
	process_que[process_que__in] = (struct buffer_entry *)addr;
	inc(process_que__in);
}


ubyte *mnp_rx_next_address(void)
{
	put_received(rx_current);
	rx_current = get_empty();
	return(rx_current);
}


void mnp_rx_fg(void)
{
    ubyte seq_val;

    rx_buf_ptr = (struct buffer_entry *)get_received();
    while (rx_buf_ptr != NULL)
    {
	rcv_working_frame_ptr = get_rx_offset_num((ubyte *)rx_buf_ptr);
	if (rx_buf_ptr->io_status != OK)
	{
	    proclaim_error();
	    line_buffer_rcvd_error();
	    mnp10_got_BLER = 1;
	    put_empty((ubyte *)rx_buf_ptr);
	}
	else
	{
		line_buffer_rcvd_ok();
		rx_buf_ptr->user_flag = 0;
		if ((((mnp_state - BGND_STATE_DATA_INITIAL) & 128) != 0)
		      || (mnp_state == BGND_STATE_LAPM_ANSW_INITIAL))
		{
		    frame_received_flag = TRUE;
		    put_process((ubyte *)rx_buf_ptr);
		}
		else
		{
		mnp10_frame_rcvd = TRUE;

		if (mnp10_enabled)
		{
			if (rx_buf_ptr->pdu_type != PDU_TYPE_LM)
			{
				mnp10_rcvd_non_lm__ff_ack = TRUE;
			}
		}

		switch (rx_buf_ptr->pdu_type) {
		    case(PDU_TYPE_LD):
		    empty_ld();
		    if (disconnect_flag != TRUE)
		    {
			disconnect_flag = TRUE;
			mnp_user_disconnect_code = ld_user_reason;
			mnp_disconnect_code = ld_reason_code;
		    }
		    if ((received_disconnect_reason = ld_reason_code) == DISCONNECT_CODE_USER_REQUEST)
			received_user_disconnect_reas = ld_user_reason;
		    put_empty((ubyte *)rx_buf_ptr);
		    break;

		    case(PDU_TYPE_LA):
		    empty_la();
		    got_la_info();
		    put_empty((ubyte *)rx_buf_ptr);
		    break;


		    case(PDU_TYPE_LRR):
			if (mnp10_enabled == 0)
			{
				empty_lrr();
				peer_missing_frame_flag = TRUE;
				peer_missing_frame_sequence = lrr_receive_sequence;
			}
			else
			{
				mnp10_proc_rcv_frame(rx_buf_ptr->pdu_type);
			}
			put_empty((ubyte *)rx_buf_ptr);
			break;

		    case(PDU_TYPE_LK):
			if (mnp10_enabled != 0)
			{
				mnp10_proc_rcv_frame(rx_buf_ptr->pdu_type);
			}
			put_empty((ubyte *)rx_buf_ptr);
			break;

		    case(PDU_TYPE_LRR_10):
			if (mnp10_enabled != 0)
			{
				mnp10_proc_rcv_frame(rx_buf_ptr->pdu_type);
			}
			put_empty((ubyte *)rx_buf_ptr);
			break;

		    case(PDU_TYPE_LT):
		    empty_lt_parms();
		    if (negot_selective_retransmit == 0) {
			/*						     */
			/* Selective Retransmit Disabled		     */
			/*						     */
			if ((seq_val = (inc_seq_ptr(receive_sequence_number) - lt_send_sequence)) == 0) {
			    receive_sequence_number = lt_send_sequence;
			    if (la_window != 0)
				la_window--;
			    bad_lt_done = FALSE;  /* 6.1.2 other enhancements */
			    put_process((ubyte *)rx_buf_ptr);
			    break;
			}
			else
			    put_empty((ubyte *)rx_buf_ptr);
			    if (((seq_val & 128) & 128) == 0)
				break;
			else {
			    proclaim_error();
			    bad_lt_frame_flag = TRUE;
			    break;
			}
		    }
		    else
		/*						*/
		/* Selective Transmit Enabled			*/
		/*						*/
		if (send_sel_recover_rqst_flag != FALSE)
		{
		    if (missing_frame_sequence == lt_send_sequence)
		    {
				bad_lt_done = FALSE;  /* other enhancements */
				put_process((ubyte *)rx_buf_ptr);
				send_sel_recover_rqst_flag = FALSE;
				break;
		    }
		}
		if ((seq_val = inc_seq_ptr(receive_sequence_number)) == lt_send_sequence)
		{
			receive_sequence_number = lt_send_sequence;
			if (la_window != 0)
			    la_window--;
			bad_lt_done = FALSE;  /* 6.1.2 other enhancements */
			put_process((ubyte *)rx_buf_ptr);
			break;
		}
		{	/* 6.1.1 other enhancements */
			if (!((inc_seq_ptr(receive_sequence_number) - lt_send_sequence) & 128))
			{
			    put_empty((ubyte *)rx_buf_ptr);
			    break;
			}

			proclaim_error();
			if (send_sel_recover_rqst_flag)
			{
				bad_lt_frame_flag = TRUE;
				put_empty((ubyte *)rx_buf_ptr);
				break;
			}

			if (inc_seq_ptr(seq_val) == lt_send_sequence)
			{
				missing_frame_sequence = seq_val;
				send_sel_recover_rqst_flag = TRUE;
				timer_recovery = 0;
				sel_max_retries = mnp_max_retries;
				receive_sequence_number = lt_send_sequence;
				put_process((ubyte *)rx_buf_ptr);
				break;
			}
			else
			{
				bad_lt_frame_flag = TRUE;
				put_empty((ubyte *)rx_buf_ptr);
			}
		}
		    break;

		    case(PDU_TYPE_LNA):
		    empty_lna();
		    if (lna_receive_sequence == send_attn_sequence_no)
		    {
			tx_attention_mode_flag = FALSE;
		    }
		    put_empty((ubyte *)rx_buf_ptr);
		    break;

		    case(PDU_TYPE_LN):
		    receive_attention_flag = TRUE;
		    empty_ln();
		    if (ln_receive_sequence == ln_send_sequence)
		    {
			put_empty((ubyte *)rx_buf_ptr);
			break;
		    }

		    ln_receive_sequence = ln_send_sequence;
		    switch (ln_attention_type) {
			case(MNP_ATTEN_IGNORE):
			    put_empty((ubyte *)rx_buf_ptr);
			    break;

			case(MNP_ATTEN_EXP_DEST):
			    lna_delay_count = 0;

			    if (negot_data_compression)
				ad_frq_init();
			    if (V42bis_P0)
				BTInit(V42bis_P0,negot_v42bis_dict_size,negot_v42bis_str_len);

			    clear_receive_buffers();
			    clear_transmit_buffers();
			    receive_sequence_number =
				    ack_rcv_sequence_number =
				    empty_sequence_number = 0;
			    empty_lt_in_progress = FALSE;
			    send_sequence_number = 0;

			case(MNP_ATTEN_EXP_NON_D):
			    mnp_send_dte_brk = TRUE;
			    put_empty((ubyte *)rx_buf_ptr);
			    break;

			case(MNP_ATTEN_NON_E_NON_D):
		    default:
			put_process((ubyte *)rx_buf_ptr);
			break;
		    }
		    break;

		default:
		    put_empty((ubyte *)rx_buf_ptr);
		    break;
		    }
		}
	}
	rx_buf_ptr = (struct buffer_entry *)get_received();
    }
    if (rx_current == NULL)
	restart_receive();
}


ubyte *mnp_rx(void)
{
	return (mnp_rx_next_address());
}

