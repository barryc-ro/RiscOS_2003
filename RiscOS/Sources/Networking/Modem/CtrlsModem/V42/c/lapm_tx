/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           LAPM_TX.C
/
/       Module Version: 4.02
/
/       Function:       LAPM transmit data packet processing routines.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/11/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "lapm_ede.h"
#include "edf.lapm_que"
#include "edf.lapm_ctl"
#include "edf.lapm_tmr"
#include "edf.lapm_lib"
#include "edf.dce_line"
#include "edf.dte"
#include "edf.btencode"

void process_data(void);
void send_data(ubyte);
void process_ack(struct lapm_receive_struct *);

extern ubyte index, btlztx_done;
extern ubyte V42bis_P0;

/*******************************************************************************
/									       /
/	 ROUTINE: process_data						       /
/									       /
/	 This routine takes the available data from the DTE and builds	       /
/	 information frames.						       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
/	*****************************************************************      /
/	*			  Modifications 			*      /
/	*****************************************************************      /
/									       /
/	Author & Date:	RSA						       /
/	Description:							       /
/									       /
*******************************************************************************/
void process_data(void)
{
	if ((lapmtx_data_ptr) && (V42bis_P0 & 1) && (!LAPMbrkpend))
		return;

	if ((!LAPMbreak) && ((dte_from_num()) || (char_in_buffer) || (LAPMbrkpend)))
	{
		lapmtx_data_ptr = (struct lapm_send_struct *)lapm_send_que.fill_end;

		if (lapmtx_data_ptr)
		{
			if (lapmtx_data_ptr->cmd == UI)
			       return;
		}
		else
		{
			lapmtx_data_ptr = (struct lapm_send_struct *)
			       aq_lapm((struct lapm_que_struct *)&lapm_send_que);

			if (lapmtx_data_ptr == NULL)
				return;

			qq_lapm((struct lapm_que_struct *)
					 &lapm_send_que,(struct lapm_dummy_struct *)lapmtx_data_ptr);

			lapmtx_data_ptr->status = EMPTY;
			index = 1;
			lapmtx_data_ptr->addr = rmtAddr;
			lapmtx_data_ptr->cmd = locVS << 1 | IFRM;
			locVS = (locVS + 1) & (SEQMOD-1);
		}

		btlzdataptr = (ubyte *)&lapmtx_data_ptr->data[index];

		if (LAPMbrkpend && (rcv_char_count == 0))
		{
			/* add end break here */

			if((V42bis_P0 & 1) && (char_in_buffer))
			{
				/* BTLZ encoder active */
				BTFlush();
				char_in_buffer = FALSE;
			}

			lapmtx_data_ptr->len = index+2;
			lapmtx_data_ptr->status = FULL;

			(void) dq_lapm((struct lapm_que_struct *)&lapm_send_que);
			if (index != 1)
				lapm_put_tx(lapmtx_data_ptr); /* only one thing queued */
			else
			{
				fq_lapm((struct lapm_que_struct *)&lapm_send_que, (struct lapm_dummy_struct *)lapmtx_data_ptr);
				locVS = (locVS - 1) & (SEQMOD-1);   /* we did not send the packet - resequence number */
			}

			lapmtx_data_ptr = NULL;
			LAPMbrkpend = FALSE;
			qq_lapm((struct lapm_que_struct *)
				&lapm_send_que,(struct lapm_dummy_struct *)&lapm_break_buffer);
			return;
		}

		if (V42bis_P0 & 1)		/* BTLZ frames */
		{
			/* set up */
			btlztx_done = FALSE;
			index = 1;
			btlzdataptr = (ubyte *)&lapmtx_data_ptr->data[1];
		}
		else				/*    non-BTLZ frames	*/
		{
			while ((dte_from_num()) && (lapmtx_data_ptr->status != FULL))
			{
				*btlzdataptr++ = dte_from_char();
				index++;

				if (process_dce_bg_flag)
					lapm_line_bg();

				if (LAPMbrkpend)
				{
					if (--rcv_char_count == 0)
						lapmtx_data_ptr->status = FULL;
				}

				if (index >= (neg_parms.TN401)+1)
				{
					lapmtx_data_ptr->status = FULL;
				}
			}
		}
		lapmtx_data_ptr->len = index+2;

		if (lapmtx_data_ptr->status == FULL)
		{
			(void) dq_lapm((struct lapm_que_struct *)&lapm_send_que);
			lapm_put_tx(lapmtx_data_ptr);	/* only one thing queued */
		}
	}
}



/*******************************************************************************
/									       /
/	 ROUTINE: send_data						       /
/									       /
/	 This routine allocates and ques an information frame. Information     /
/	 frames are built if there is data available from the DTE. An	       /
/	 attempt is made to send information frames out, if they are sent      /
/	 then the frame is placed on the acknowledgement que.		       /
/									       /
/	 PARAMETERS IN: 						       /
/		 polld - Value of the poll/final bit			       /
/		 (byte)      0 : Bit cleared				       /
/			     1 : Bit set				       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
/	*****************************************************************      /
/	*			  Modifications 			*      /
/	*****************************************************************      /
/									       /
/	Author & Date:	RSA						       /
/	Description:							       /
/									       /
*******************************************************************************/
void send_data(ubyte polld)
{
	struct lapm_send_struct *frame_add;
	ubyte data0;

	if (((LAPMtx_current) && (LAPMtx_holding)) || (LAPMbreak))
		return;

	if (k == 0)
	{
		if (time_array[T401] == RESET_VALUE)
		{
			timer(TIMRestart,T401);
			timer(TIMCancel,T403);
		}
		return;
	}

	data0 = locVR << 1 | polld;

	frame_add = (struct lapm_send_struct *)lapm_get_srej();

	if (frame_add)
	{
		(void)send_lapm_frame((struct lapm_dummy_struct *)frame_add,rmtAddr,data0);

		if (time_array[T401] == RESET_VALUE)
		{
			timer(TIMRestart,T401);
			timer(TIMCancel,T403);
		}
		lapm_reset_inactivity_timer();
		return;
	}
	else
	{
		if (lapm_get_ack_num() >= k)
			return;

		if (LAPMtx_que__out == LAPMtx_que__in)
		{
			frame_add = (struct lapm_send_struct *)lapm_send_que.fill_end;

			if (frame_add == NULL)
				return;

			if (frame_add->cmd == UI)
			{
				if (locVS != locVA)
					return;
				else
				{
					(void) dq_lapm((struct lapm_que_struct *)&lapm_send_que);
					qq_lapm((struct lapm_que_struct *)&lapm_control_que,(struct lapm_dummy_struct *)frame_add);
					send_control();
					lapmtx_data_ptr = 0;
					LAPMbreak = TRUE;
					if (time_array[T401] == RESET_VALUE)
					{
						timer(TIMRestart,T401);
						timer(TIMCancel,T403);
					}
					lapm_reset_inactivity_timer();

					N400_init();
					return;
				}
			}

			if (dte_from_num())
				return;

			/*
			 * Queue if and only if it hasn't been Queue by
			 * "process_data" just above.
			 */
			if ((V42bis_P0 & 1) && (char_in_buffer))
			{
				BTFlush();
				char_in_buffer = FALSE;
				frame_add->len = index + 2;
			}

			if (frame_add->len <= 3)
				return;

			frame_add->status = FULL;
			(void)dq_lapm((struct lapm_que_struct *)&lapm_send_que);
			lapm_put_tx(frame_add);
			lapmtx_data_ptr = 0;
		}

		line_disable_interrupts();

		if (LAPMtx_que__in == LAPMtx_que__out)
		{
			line_enable_interrupts();
			return;
		}

		frame_add = LAPMtx_que[LAPMtx_que__out];
		LAPM_inc_tx(LAPMtx_que__out);
		LAPM_inc_tx(LAPMtx_que__ackin);

		frame_add->addr = rmtAddr;
		frame_add->data[0] = data0;

		if (LAPMtx_current)
			LAPMtx_holding = (struct lapm_dummy_struct *)frame_add;

		line_enable_interrupts();

		(void)send_lapm_frame((struct lapm_dummy_struct *)frame_add,rmtAddr,data0);

		if (time_array[T401] == RESET_VALUE)
		{
			timer(TIMRestart,T401);
			timer(TIMCancel,T403);
		}
		lapm_reset_inactivity_timer();
	}
}

/*******************************************************************************
/									       /
/	 ROUTINE: process_ack						       /
/									       /
/	 This routine processes the acknowledgement of outstanding	       /
/	 information frames.						       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void process_ack(struct lapm_receive_struct *add)
{
	struct lapm_send_struct *ack_frame;
	ubyte ack_num;

	rmtNR = (add->data[0] >> 1) & 0x7f;
	ack_num = LAPMtx_que__ackout;

	while ((LAPMtx_que__ackin != ack_num) && (locVA != rmtNR))
	{
		ack_frame = LAPMtx_que[ack_num];

		if (((ack_frame->cmd >> 1) & 0x07f) == locVA)
		{
			if ((ack_frame == (struct lapm_send_struct *)LAPMtx_holding)
			  || (ack_frame == (struct lapm_send_struct *)LAPMtx_current))
				break;

			LAPM_inc_tx(LAPMtx_que__ackout);
			ack_num = LAPMtx_que__ackout;
			fq_lapm((struct lapm_que_struct *)&lapm_send_que,(struct lapm_dummy_struct *)ack_frame);

			locVA = (locVA + 1) & SEQMOD-1;
			exception_turnoff();
			N400_init();
		}
		else
		{
			LAPM_inc_tx(ack_num);
		}
	}
}

