/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           LAPM_ACT.C
/
/       Module Version: 4.02
/
/       Function:       LAPM action routines.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/11/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "lapm_ede.h"
#include "edf.lapm_que"
#include "edf.lapm_sta"
#include "edf.lapm_ctl"
#include "edf.lapm_lib"
#include "edf.lapm_rej"
#include "edf.lapm_rx"
#include "edf.lapm_tx"
#include "edf.lapm_tmr"
#include "edf.lapm_xid"
#include "edf.lapm_brk"
#include "edf.lapm_fnc"
#include "edf.dte"
#include "edf.dce_line"
#include "edf.v42"


void IGNORE(void);
void DOWN_IGNORE(void);
void DOWN_PDISC(void);
void DOWN_DISC(void);
void STATE_SXID(void);
void STATE_CXID(void);
void DOWN_START(void);
void STATE_SABME(ubyte);
void STRD_PSABME(void);
void STRD_SABME(void);
void STRD_DM(void);
void STRD_RXID(void);
void STRD_STOP(void);
void SETUP_RXID(void);
void SETUP_T401(void);
void SETUP_N400(void);
void SETUP_STOP(void);
void SETUP_UA(void);
void SETUP_PSABME(void);
void SETUP_SABME(void);
void DISC_PSABME(void);
void DISC_SABME(void);
void STATE_DISC(ubyte);
void DISC_PDISC(void);
void DISC_DISC(void);
void DISC_UA(void);
void DISC_UA_N400(void);
void DISC_T401(void);
void INFO_PSABME(void);
void INFO_SABME(void);
void INFO_PDISC(void);
void INFO_DISC(void);
void INFO_BADFRM(void);
void INFO_REJNS(void);
void INFO_T403(void);
void INFO_SXID(void);
void INFO_PIFRM(void);
void INFO_IFRM(void);
void INFO_PRR(void);
void INFO_PREJ(void);
void INFO_SREJ(void);
void INFO_REJ(void);
void INFO_PRNR(void);
void INFO_RNR(void);
void INFO_RR(void);
void INFO_RSREJ(void);
void INFO_BADPNS(void);
void INFO_BADNS(void);
void INFO_T401(void);
void INFO_PBREAK(void);
void INFO_BREAK(void);
void INFO_BRKACK(void);
void P_PRR(void);
void P_RR(void);
void P_SREJ(void);
void P_PRNR(void);
void P_RNR(void);
void P_FRRR(void);
void P_FRREJ(void);
void P_FRRNR(void);
void P_T401(void);
void B_IGNORE(void);
void B_IFRM(void);
void B_PIFRM(void);
void B_BADPNS(void);
void B_BADNS(void);
void B_T401(void);
void B_RXID(void);
void RB_IFRM(void);
void RB_PRNR(void);
void RB_RNR(void);
void BB_BADPNS(void);
void BB_BADNS(void);
void PLX_FRRR(void);
void PLX_FREJ(void);
void PLX_PREJ(void);
void PLX_PRR(void);
void LOOP_CTEST(void);
void LOOP_RTEST(void);
void QUE_SXID(void);
void ERROR(void);
void inc_chk_n400(void);

void IGNORE(void)
{
}

void LOOP_RTEST(void)
{
	word i;

	if (LAPMtest)
	{
		LAPMtest = FALSE;
		timer(TIMCancel,TESTTIMER);

		if (lapm_test_buffer.len != event->buffer->len)
		{
			LAPMtest_status = TEST_ERROR;
			return;
		}

		for (i=0; i<event->buffer->len-2; i++)
		{
			if (lapm_test_buffer.data[i] != event->buffer->data[i])
			{
				LAPMtest_status = TEST_ERROR;
				return;
			}
		}
		LAPMtest_status = TEST_COMPLETE;
	}
}

void LOOP_CTEST(void)
{
	if (neg_parms.supTEST == TRUE)
	{
		qq_lapm((struct lapm_que_struct *)&lapm_control_que,(struct lapm_dummy_struct *)event->buffer);
		event_frame = NULL;
	}
}

/****************************************************************************
/									    /
/			S_DOWN Routines 				    /
/									    /
/	Performed when lapm is disconnected and stopped 		    /
/									    /
****************************************************************************/

void DOWN_IGNORE(void)
{
	LAPMstatus = DOWN;
}

void DOWN_PDISC(void)
{
	LAPMreason = PEER;
	send_rsp(UNMFINAL,DM);
}

void DOWN_DISC(void)
{
	LAPMstatus = DOWN;
	LAPMreason = PEER;
	send_rsp(PFCLR,DM);
}

void DOWN_START(void)
{
	LAPMstatus = STARTED;
	STATE_SXID();
}

void STATE_SXID(void)
{
	k = 0;
	LAPMxid = TRUE;
	send_cmd(PFCLR,XID);
	timer(TIMRestart,T401);
	N400_init();
}

void STATE_CXID(void)
{
	process_xid();

	if (lapm_fallback_to_MNP == FALSE)
	{
		send_rsp(PFCLR,XID);
	}
}





/****************************************************************************
/									    /
/			 S_STRTD Routines				    /
/									    /
/	 Performed when LAPM is disconnected but started		    /
/									    /
****************************************************************************/
void STATE_SABME(ubyte type)
{
	timer(TIMCancel,T401);
	initialize_T401();
	N400_init();
	bring_up();
	send_rsp(type,UA);
}

void STRD_SABME(void)
{
	STATE_SABME(PFCLR);
}


void STRD_PSABME(void)
{
	STATE_SABME(UNMFINAL);
}

void STRD_DM(void)
{
	line_autoreliable_fallback(0,0,0,0);	/* TURN OFF AUTORELIABLE FALLBACK */
	LAPMreason = PEER;
	LAPMstatus = DOWN;
	timer(TIMCancel,T401);
	timer(TIMCancel,T403);
}


void STRD_RXID(void)
{
	LAPMxid = FALSE;
	process_xid();
}


void STRD_STOP(void)
{
	LAPMstatus = STOPPED;
/*	LAPMreason = CONTROLLER;*/

	send_rsp(UNMFINAL,DM);
	if (!LAPMxid)
		timer(TIMCancel,T401);
	timer(TIMCancel,T403);
}


/****************************************************************************
/									    /
/			 S_SETUP Routines				    /
/									    /
/	 Performed when SABME has been sent but lapm is waiting for	    /
/	 link up.							    /
/									    /
****************************************************************************/

void SETUP_RXID(void)
{
	LAPMxid = FALSE;
	process_xid();

	if (lapm_fallback_to_MNP == FALSE)
	{
		send_cmd(UNMPOLL,SABME);
		N400_init();
		timer(TIMRestart,T401);
	}
}


void SETUP_T401(void)
{
	timer(TIMRestart,T401);
	inc_chk_n400();
	if (!exception_timeout())
		send_cmd(UNMPOLL,SABME);
}

void SETUP_N400(void)
{
	LAPMreason = RETRY_TIMEOUT;
	event->type = E_IGNORE;
}

void SETUP_STOP(void)
{
/*	LAPMreason = CONTROLLER;*/
	send_cmd(UNMPOLL,DISC);
	N400_init();
	timer(TIMCancel,T403);
	timer(TIMRestart,T401);
}

void SETUP_UA(void)
{
	timer(TIMCancel,T401);
	initialize_T401();
	bring_up();
}

void SETUP_PSABME(void)
{
	send_rsp(UNMFINAL,UA);
}

void SETUP_SABME(void)
{
	send_rsp(PFCLR,UA);
}

/***************************************************************************
/									   /
/			 S_DISC Routines				   /
/									   /
/	 Performed when a disconnect frame has been sent		   /
/									   /
***************************************************************************/
void STATE_DISC(ubyte type)
{
	send_rsp(type,DM);
	timer(TIMCancel,T401);
	timer(TIMCancel,T403);
}

void DISC_SABME(void)
{
	LAPMreason = PROTOCOL_ERROR;
	STATE_DISC(PFCLR);
}

void DISC_PSABME(void)
{
	LAPMreason = PROTOCOL_ERROR;
	STATE_DISC(NUMFINAL);
}

void DISC_PDISC(void)
{
	send_rsp(UNMFINAL,UA);
}

void DISC_DISC(void)
{
	send_rsp(PFCLR,UA);
}


void DISC_UA(void)
{
	timer(TIMCancel,T401);
	timer(TIMCancel,T403);
}

void DISC_UA_N400(void)
{
	LAPMreason = RETRY_TIMEOUT;
	timer(TIMCancel,T401);
	timer(TIMCancel,T403);
	event->type = E_IGNORE;
}


void DISC_T401(void)
{
	inc_chk_n400();
	if (!exception_timeout())
		send_cmd(UNMPOLL,DISC);
	timer(TIMRestart,T401);
	initialize_poll_T401();
}

/****************************************************************************
/									    /
/			 S_INFO Routines				    /
/									    /
/		 Information transfer routines				    /
/		     Control command frames				    /
/									    /
****************************************************************************/
void INFO_PSABME(void)
{
	if (LAPM_rcvd_UP_frame)
	{
		send_rsp(UNMFINAL,DM);
		event->type = E_DM;
	}
	else
		STATE_SABME(UNMFINAL);
}

void INFO_SABME(void)
{
	if (LAPM_rcvd_UP_frame)
	{
		send_rsp(PFCLR,DM);
		event->type = E_DM;
	}
	else
		STATE_SABME(PFCLR);
}

void INFO_PDISC(void)
{
	LAPMreason = PEER;
	LAPMstatus = STOPPED;
	event->type = E_IGNORE;
	send_rsp(UNMFINAL,UA);
	LAPMstatus = STOPPED;
	timer(TIMRestart,T401);
	timer(TIMCancel,T403);
	initialize_disc_T401();
}

void INFO_DISC(void)
{
	LAPMreason = PEER;
	LAPMstatus = STOPPED;
	event->type = E_IGNORE;
	send_rsp(PFCLR,UA);
	LAPMstatus = STOPPED;
	timer(TIMRestart,T401);
	timer(TIMCancel,T403);
	initialize_disc_T401();
}

void INFO_BADFRM(void)
{
	LAPMstatus = STOPPED;
	frame_reject();
	send_rsp(PFCLR,FRMR);
	send_cmd(UNMPOLL,DISC);
	LAPMstatus = STOPPED;
	timer(TIMRestart,T401);
	initialize_disc_T401();
	timer(TIMCancel,T403);
}

void INFO_T403(void)
{
	if (check_delivery())
		send_cmd(NUMPOLL,RR);
	else
	{
		send_cmd(NUMPOLL,RNR);
	}

	N400_init();
	timer(TIMCancel,T403);
	timer(TIMRestart,T401);
	initialize_poll_T401();
	LAPMpoll = TRUE;
}


void INFO_SXID(void)
{
	send_cmd(NUMPOLL,RNR);
	N400_init();
	timer(TIMRestart,T401);
	LAPMbusy = TRUE;
}


/****************************************************************************
/									    /
/			 S_INFO Routines				    /
/									    /
/		 Information transfer routines				    /
/	 Information and flow control command frames			    /
/									    /
****************************************************************************/

void INFO_PIFRM(void)
{
	k = neg_parms.TK;
	if (check_delivery())
		send_rsp(NUMFINAL,RR);
	else
		send_rsp(NUMFINAL,RNR);
}

void INFO_IFRM(void)
{
	if (check_delivery())
	{
		if ((LAPMsrej_que__in == LAPMsrej_que__out) &&
		   ((LAPMtx_que__in == LAPMtx_que__out) || (lapm_get_ack_num() >= k)))
		   if (!dte_from_num())
			send_rsp(PFCLR,RR);
	}
	else
		send_rsp(PFCLR,RNR);
}

void INFO_PRR(void)
{
	k = neg_parms.TK;
	RMTbusy = FALSE;
	if (check_delivery())
		send_rsp(NUMFINAL,RR);
	else
	{
		send_rsp(NUMFINAL,RNR);
	}
}


void INFO_PREJ(void)
{
	k = neg_parms.TK;
	rexmit();
	if (check_delivery())
		send_rsp(NUMFINAL,RR);
	else
	{
		send_rsp(NUMFINAL,RNR);
	}
	RMTbusy = FALSE;
}

void INFO_REJ(void)
{
	k = neg_parms.TK;
	rexmit();
	RMTbusy = FALSE;
}

void INFO_SREJ(void)
{
	rexmit_srej();
}

void INFO_PRNR(void)
{
	k = 0;
	if (check_delivery())
		send_rsp(NUMFINAL,RR);
	else
	{
		send_rsp(NUMFINAL,RNR);
	}
	RMTbusy = TRUE;
	N400_init();
	timer(TIMRestart,T401);
	initialize_poll_T401();
	timer(TIMCancel,T403);
}


void INFO_RNR(void)
{
	k = 0;
	RMTbusy = TRUE;
	N400_init();
	timer(TIMRestart,T401);
	initialize_poll_T401();
	timer(TIMCancel,T403);
}

void INFO_RR(void)
{
	k = neg_parms.TK;
	RMTbusy = FALSE;
}


void INFO_BADPNS(void)
{
	send_rsp(NUMFINAL,REJ);
}

void INFO_BADNS(void)
{
	if (LAPMrej == FALSE)
	{
		LAPMrej = TRUE;
		send_rsp(PFCLR,REJ);
	}
	else
	{
		if (check_delivery() == TRUE)
			send_rsp(PFCLR,RR);
		else
		{
			send_rsp(PFCLR,RNR);
		}
	}
}


void INFO_REJNS(void)
{
/*
	process_NS(PFCLR);
*/
}

void INFO_T401(void)
{
	if ((exception_timeout()) || (LAPMtx_que__ackin != LAPMtx_que__ackout))
		inc_chk_n400();

	send_cmd(NUMPOLL,RR);
	LAPMpoll = TRUE;
	k = 0;
	timer(TIMRestart,T401);
	initialize_poll_T401();
	timer(TIMCancel,T403);
}

void INFO_PBREAK(void)
{
/*	deliver_break();*/
}

void INFO_BREAK(void)
{
/*	deliver_break();*/
}


void INFO_BRKACK(void)
{
	LAPMbreak = FALSE;
	exception_turnoff();
	N400_init();
}


/****************************************************************************
/									    /
/			 S_POLLD Routines				    /
/									    /
/	 Performed when an information frame has been received		    /
/	 with a poll.							    /
/									    /
****************************************************************************/

void P_PRR(void)
{
	if (check_delivery())
		send_rsp(NUMFINAL,RR);
	else
	{
		send_rsp(NUMFINAL,RNR);
	}
	RMTbusy = FALSE;
}

void P_RR(void)
{
	RMTbusy = FALSE;
}

void P_SREJ(void)
{
	rexmit_srej();
}

void P_FRRR(void)
{
	LAPMpoll = FALSE;
	RMTbusy = FALSE;
	k = neg_parms.TK;
	rexmit();
	exception_turnoff();
	initialize_T401();
}


void P_FRREJ(void)
{
	LAPMpoll = FALSE;
	RMTbusy = FALSE;
	rexmit();
	exception_turnoff();
	initialize_T401();
	k = neg_parms.TK;
}

void P_PRNR(void)
{
	k = 0;
	RMTbusy = TRUE;
	N400_init();
	if (check_delivery())
		send_rsp(NUMFINAL,RR);
	else
	{
		send_rsp(NUMFINAL,RNR);
	}
}

void P_RNR(void)
{
	RMTbusy = TRUE;
	k = 0;
	N400_init();
}

void P_FRRNR(void)
{
	RMTbusy = TRUE;
	LAPMpoll = FALSE;
	k = 0;
	N400_init();
	timer(TIMRestart,T401);
	initialize_poll_T401();
	timer(TIMCancel,T403);
	rexmit();
	N400_init();
}


void P_T401(void)
{
	if (!exception_timeout())
	{
		if (check_delivery())
			send_cmd(NUMPOLL,RR);
		else
		{
			send_cmd(NUMPOLL,RNR);
		}
	}
	inc_chk_n400();
	timer(TIMRestart,T401);
	initialize_poll_T401();
	timer(TIMCancel,T403);
}

/****************************************************************************
/									    /
/			 S_BUSY Routines				    /
/									    /
/	 Performed when local has sent a RNR frame			    /
/									    /
****************************************************************************/

void B_IGNORE(void)
{
	if (check_delivery())
	{
		if (LAPMrcv_IFRM_tossed == TRUE)
		{
			LAPMrcv_IFRM_tossed = FALSE;
			if (LAPMrej == FALSE)
			{
				LAPMrej = TRUE;
				send_cmd(PFCLR,REJ);
			}
		}
		else
		{
			send_cmd(PFCLR,RR);
		}
	}
}

void B_PIFRM(void)
{
	k = neg_parms.TK;
	if (check_delivery())
	{
		if (LAPMrcv_IFRM_tossed == TRUE)
		{
			LAPMrcv_IFRM_tossed = FALSE;

			if (LAPMrej == FALSE)
			{
				LAPMrej = TRUE;
				send_rsp(NUMFINAL,REJ);
			}
		}
		else
		{
				send_rsp(NUMFINAL,RR);
		}
	}
	else
	{
		send_rsp(NUMFINAL,RNR);
	}
}

void B_IFRM(void)
{
	if (check_delivery())
	{
		if (LAPMrcv_IFRM_tossed == TRUE)
		{
			LAPMrcv_IFRM_tossed = FALSE;

			if (LAPMrej == FALSE)
			{
				LAPMrej = TRUE;
				send_rsp(PFCLR,REJ);
			}
		}
		else
		{
			send_rsp(PFCLR,RR);
		}
	}
	else
	{
		send_rsp(PFCLR,RNR);
	}
}

void B_BADPNS(void)
{
	send_rsp(NUMFINAL,RNR);
}

void B_BADNS(void)
{
	if ((LAPMsrej_que__in == LAPMsrej_que__out) &&
	   ((LAPMtx_que__in == LAPMtx_que__out) || (lapm_get_ack_num() >= k)))
		send_rsp(PFCLR,RNR);
}

void B_T401(void)
{
	if ((exception_timeout()) || (LAPMtx_que__ackin != LAPMtx_que__ackout))
		inc_chk_n400();

	send_cmd(NUMPOLL,RNR);
	LAPMpoll = TRUE;
	k = 0;
	timer(TIMRestart,T401);
	initialize_poll_T401();
	timer(TIMCancel,T403);
}


void B_RXID(void)
{
	LAPMxid = FALSE;
	process_xid();
	exception_turnoff();
	N400_init();
	initialize_poll_T401();
	send_cmd(NUMPOLL,RR);
	LAPMpoll = TRUE;
}


/****************************************************************************
/									    /
/			 S_RBUSY Routines				    /
/									    /
/	 Performed when the remote is busy				    /
/									    /
****************************************************************************/

void RB_IFRM(void)
{
	if (check_delivery())
		send_rsp(PFCLR,RR);
	else
		send_rsp(PFCLR,RNR);
}

void RB_PRNR(void)
{
	k = 0;
	if (check_delivery())
		send_rsp(NUMFINAL,RR);
	else
	{
		send_rsp(NUMFINAL,RNR);
	}
	RMTbusy = TRUE;
	N400_init();
	if (time_array[T401] == RESET_VALUE)
	{
		timer(TIMRestart,T401);
		initialize_poll_T401();
		timer(TIMCancel,T403);
	}
}


void RB_RNR(void)
{
	k = 0;
	RMTbusy = TRUE;
	N400_init();
	if (time_array[T401] == RESET_VALUE)
	{
		timer(TIMRestart,T401);
		initialize_poll_T401();
		timer(TIMCancel,T403);
	}
}

/****************************************************************************
/									    /
/			 S_BBUSY Routines				    /
/									    /
/	 Performed when both local and remote are busy			    /
/									    /
****************************************************************************/

void BB_BADPNS(void)
{
	send_rsp(NUMFINAL,RNR);
}

void BB_BADNS(void)
{
	send_rsp(PFCLR,RNR);
}

/****************************************************************************
/									    /
/			 S_PLBXID Routines				    /
/									    /
/		      Xid polled busy routines. 			    /
/									    /
****************************************************************************/

void PLX_FRRR(void)
{
	LAPMxid = TRUE;
	send_cmd(PFCLR,XID);
	timer(TIMRestart,T401);
	initialize_poll_T401();
	timer(TIMCancel,T403);
	N400_init();
}


void PLX_FREJ(void)
{
	rexmit();
	LAPMxid = TRUE;
	send_cmd(PFCLR,XID);
	timer(TIMRestart,T401);
	initialize_poll_T401();
	timer(TIMCancel,T403);
	N400_init();
}

void PLX_PREJ(void)
{
	rexmit();
	send_rsp(NUMFINAL,RNR);
}

void PLX_PRR(void)
{
	send_rsp(NUMFINAL,RNR);
}

void QUE_SXID(void)
{
	que_event(E_SXID);
}

void ERROR(void)
{
	proclaim_error();
}


void inc_chk_n400(void)
{
    /* Notify V42 every time LAPM resends a frame */
    v42_frame_retry_update(1);  /* One (1) frame was retransmitted */

    n400_cnt += 1;

    /* check retries for zero */
    if ((n400_cnt == valueN400) && (valueN400 != 0))
        event->type = E_N400;
}
