/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           LAPM_BRK.C
/
/       Module Version: 4.02
/
/       Function:       Contains BREAK code for V.42 (LAPM)
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/24/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "lapm_ede.h"
#include "edf.lapm_que"
#include "edf.lapm_ctl"
#include "edf.lapm_lib"
#include "edf.lapm_tmr"
#include "edf.dte"

ubyte send_break(ubyte,ubyte);
void deliver_break(struct lapm_receive_struct *);

/*******************************************************************************
/									       /
/	 ROUTINE: send_break						       /
/									       /
/	 This routine builds the break in a command buffer and ques it in to   /
/	 the internal command que for transmission.			       /
/									       /
/	 PARAMETERS IN: 						       /
/		 view - Type of break frame sent			       /
/		 (byte)      0 : Send a break command			       /
/			     1 : Send a break response			       /
/									       /
/		 poll - Value of the poll/final bit			       /
/		 (byte)      0 : Bit cleared				       /
/			     1 : Bit set				       /
/									       /
/	 PARAMETERS OUT:						       /
/		 TRUE - 1						       /
/		 FALSE - 0						       /
/									       /
/		---------------------------------------------------------      /
/		-			Modifications			-      /
/		---------------------------------------------------------      /
/                                                                              /
/		Author & Date:	RSA                                            /
/		Description:                                                   /
/		Reason:                                                        /
/                                                                              /
*******************************************************************************/
ubyte send_break(ubyte view, ubyte poll)
{
	struct lapm_control_struct *frame_add;


	if (view == CMD)
	{
		lapm_break_buffer.cmd = poll | UI;
		if (LAPMbrklen != 0)
			lapm_break_buffer.len = BREAKsize;
		else
			lapm_break_buffer.len = BREAKsize-1;
		lapm_break_buffer.addr = rmtAddr;
		lapm_break_buffer.data[0] = BREAK | locVSB;
		locVRB = locVSB;
		locVSB = locVSB ^ BRKnsb;
		lapm_break_buffer.data[2] = LAPMbrklen;

		switch (LAPMbrktype)
		{
			/* Destructive and expedited */
			case DestExp:
				LAPMbreak = TRUE;
				lapm_break_buffer.data[1] = BREAKd | BREAKs;
				break;

			/* Non-Destructive and expedited */
			case NonDestExp:
				LAPMbreak = TRUE;
				lapm_break_buffer.data[1] =BREAKs;
				break;

			/* Non-Destructive and non-expedited */
			case NonDestNonExp:
				lapm_break_buffer.data[1] = 0;
    				LAPMbrkpend = TRUE;
				break;

			 case Ignore:
			 default:
				 break;
		}
		if (!LAPMbrkpend)
		{
			lapm_reset_inactivity_timer();
			N400_init();
			qq1_lapm((struct lapm_que_struct *)&lapm_control_que,(struct lapm_dummy_struct *)&lapm_break_buffer);
		}
	}

	/* Build a break acknowledgement frame */
	else
	{
		frame_add = (struct lapm_control_struct *)aq_lapm((struct lapm_que_struct *)&lapm_control_que);
		if (frame_add == NULL)
			return (FALSE);

		frame_add->cmd = poll | UI;
		frame_add->len = BRKACKsize;
		frame_add->addr = locAddr;
		rmtVRB = rmtVRB ^ BRKnrb;
		frame_add->data[0] = BRKack | rmtVRB;

		qq_lapm((struct lapm_que_struct *)&lapm_control_que,(struct lapm_dummy_struct *)frame_add);
	}
	return(TRUE);
}

/*******************************************************************************
/									       /
/	 ROUTINE: deliver_break 					       /
/									       /
/	 This routine delivers the received break to the DTE.		       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void deliver_break( struct lapm_receive_struct *add )
{
	 if (add->len == BREAKsize-1)
		add->data[2] = 0;

	 dte_to_break(NonDestNonExp,add->data[2]);
}

