/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           M10_IF.C
/
/       Module Version: 4.02
/
/       Function:       This file contains the MNP to MNP 10 interface code.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created: RSA 09/28/92
/                       11/1/94 (V4.01) - Add ETC and MNP10 updates
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/
#include "sys_def.h"
#include "m10_fnc.edf"
#include "m10_btlz.edf"
#include "m10_lk.edf"
#include "m10_pref.edf"

void mnp10_BTLZ_Balance(void);
void mnp10_build_v42bis(void);
ubyte mnp10_check_v42bis_flush(void);
void mnp10_init(void);
void mnp10_reset(void);
void mnp10_timer(void);
ubyte mnp10_bg(void);
ubyte mnp10_retrain_init(ubyte);
void mnp10_retrain_bg(void);

void mnp10_test_APS(void);
void mnp10_init_vars(void);
void mnp10_calc_BLER(void);
ubyte mnp10_force_rate_change(ubyte);
void mnp10_negot_parms(void);
ubyte mnp10_check_lmi_seq_num(void);
void mnp10_init_upshift(void);
ubyte mnp10_proc_retry_limit(void);
void mnp10_proc_rcv_frame(ubyte);
void mnp10_build_lk(void);
void mnp10_send_lk(void);
void mnp_build_mnp10_lr(ubyte []);
void mnp10_go_now(ubyte *,ubyte,ubyte);
ubyte mnp_build_xid(ubyte *, uword, ubyte, ubyte, ubyte,
			   ubyte, ubyte, ubyte, uword, ubyte,
			   ubyte, uword, ubyte, ubyte);
void mnp10_call_err(uword);


void mnp10_BTLZ_Balance(void)
{
	mmu_open_mnp10_pg
	M10_BTLZ_Balance();
	mmu_restore_stored_pg
}

void mnp10_build_v42bis(void)
{
	mmu_open_mnp10_pg
	M10_build_v42bis();
	mmu_restore_stored_pg
}

ubyte mnp10_check_v42bis_flush(void)
{
	ubyte ret_val;

	mmu_open_mnp10_pg
	ret_val = M10_check_v42bis_flush();
	mmu_restore_stored_pg
	return(ret_val);
}


void mnp10_init(void)
{
	mmu_open_mnp10_pg
	M10_init();
	mmu_restore_stored_pg
}


void mnp10_reset(void)
{
	mmu_open_mnp10_pg
	M10_reset();
	mmu_restore_stored_pg
}


void mnp10_timer(void)
{
	mmu_open_mnp10_pg
	M10_timer();
	mmu_restore_stored_pg
}


ubyte mnp10_bg(void)
{
	ubyte ret_val;

	mmu_open_mnp10_pg
	ret_val = M10_bg();
	mmu_restore_stored_pg
	return(ret_val);
}


ubyte mnp10_retrain_init(ubyte input_val)
{
	ubyte ret_val;

	mmu_open_mnp10_pg
	ret_val = M10_retrain_init(input_val);
	mmu_restore_stored_pg
	return(ret_val);
}


void mnp10_retrain_bg(void)
{
	mmu_open_mnp10_pg
	M10_retrain_bg();
	mmu_restore_stored_pg
}


void mnp10_test_APS(void)
{
	mmu_open_mnp10_pg
	M10_test_APS();
	mmu_restore_stored_pg
}


void mnp10_init_vars(void)
{
	mmu_open_mnp10_pg
	M10_init_vars();
	mmu_restore_stored_pg
}


void mnp10_calc_BLER(void)
{
	mmu_open_mnp10_pg
	M10_calc_BLER();
	mmu_restore_stored_pg
}


ubyte mnp10_force_rate_change(ubyte input_val)
{
	ubyte ret_val;

	mmu_open_mnp10_pg
	ret_val = M10_force_rate_change(input_val);
	mmu_restore_stored_pg
	return(ret_val);
}


void mnp10_negot_parms(void)
{
	mmu_open_mnp10_pg
	M10_negot_parms();
	mmu_restore_stored_pg
}


ubyte mnp10_check_lmi_seq_num(void)
{
	ubyte ret_val;

	mmu_open_mnp10_pg
	ret_val = M10_check_lmi_seq_num();
	mmu_restore_stored_pg
	return(ret_val);
}


void mnp10_init_upshift(void)
{
	mmu_open_mnp10_pg
	M10_init_upshift();
	mmu_restore_stored_pg
}


ubyte mnp10_proc_retry_limit(void)
{
	ubyte ret_val;

	mmu_open_mnp10_pg
	ret_val = M10_proc_retry_limit();
	mmu_restore_stored_pg
	return(ret_val);
}


void mnp10_proc_rcv_frame(ubyte input_val)
{
	mmu_open_mnp10_pg
	M10_proc_rcv_frame(input_val);
	mmu_restore_stored_pg
}


void mnp10_build_lk(void)
{
	mmu_open_mnp10_pg
	M10_build_lk();
	mmu_restore_stored_pg
}


void mnp10_send_lk(void)
{
	mmu_open_mnp10_pg
	M10_send_lk();
	mmu_restore_stored_pg
}


void mnp_build_mnp10_lr(ubyte *array_1)
{
	mmu_open_mnp10_pg
	mnp_build_M10_lr(array_1);
	mmu_restore_stored_pg
}


void mnp10_go_now(ubyte *ptr, ubyte val1, ubyte val2)
{
	mmu_open_mnp10_pg
	M10_go_now(ptr, val1, val2);
	mmu_restore_stored_pg
}

ubyte mnp10_build_xid(ubyte *ptr, uword val1, ubyte val2, ubyte val3, ubyte val4,
			   ubyte val5, ubyte val6, ubyte val7, uword val8, ubyte val9,
			   ubyte val10, uword val11, ubyte val12, ubyte val13)
{
	ubyte ret_val;

	mmu_open_mnp10_pg
	ret_val = M10_build_xid(ptr, val1, val2, val3, val4, val5, val6, val7,
		  val8, val9, val10, val11, val12, val13);
	mmu_restore_stored_pg
	return(ret_val);
}


void mnp10_call_err(uword val1)
{
	mmu_open_mnp10_pg
	M10_call_err(val1);
	mmu_restore_stored_pg
}

