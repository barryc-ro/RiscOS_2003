/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           LAPM_BG.C
/
/       Module Version: 4.02
/
/       Function:       Contains LAPM background code.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/14/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "lapm_ede.h"

#define DEBUG_CODE 1

#include "edf.lapm_que"
#include "edf.lapm_sta"
#include "edf.lapm_ctl"
#include "edf.lapm_rx"
#include "edf.lapm_tx"
#include "edf.lapm_tmr"
#include "edf.lapm_lib"
#include "edf.lapm_fg"
#include "edf.dce_line"
#include "edf.v42"
#include "edf.dte"
#include "edf.btlapm"


void process_state(void);

ubyte lapm_bg(void);
extern void lapm_state_table(ubyte, ubyte);


#ifdef DEBUG_CODE

void bad_event_procedure(void);
void bad_state_procedure(void);

void bad_event_procedure(void)
{
}

void bad_state_procedure(void)
{
}
#endif

/*******************************************************************************
/									       /
/	 ROUTINE: process_state 					       /
/									       /
/	 This routine performs all of the debug code and processes the	       /
/	    state changes due to events. It also gets the routine that is to   /
/	    be performed.						       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void process_state(void)
{

#ifdef DEBUG_CODE
/*	state.last_evt_type = state.cur_evt_type;	*/
/*	state.cur_evt_type = event->type;		*/

	if (event->type > EVT_MAX)
		proc = bad_event_procedure;
	else
		if (state.cur_state > STATE_MAX)
			proc = bad_state_procedure;
		else
		{
			lapm_state_table(state.cur_state,event->type);
			if (state.cur_state != state.new_state)
				state.last_state = state.cur_state;
			if (state.cur_evt_type != event->type)
			{
				state.last_evt_type = state.cur_evt_type;
				state.cur_evt_type = event->type;
			}
			state.cur_state = state.new_state;
		}
#else

	lapm_state_table(state.cur_state,event->type);
	state.cur_state = state.new_state;

#endif
}


/*******************************************************************************
/									       /
/	 ROUTINE: lapm_bg						       /
/									       /
/	 Called by the Control Function to keep LAPM going		       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT:						       /
/		 LAPMstatus - Status of LAPM				       /
/		 (byte)      0 : LAPM is disconnected			       /
/			     1 : LAPM establishing connection		       /
/			     2 : LPAM is idle				       /
/			     4 : LAPM is disconnecting			       /
/			     6 : LAPM is connected			       /
/									       /
*******************************************************************************/
ubyte lapm_bg(void)
{
	ubyte cur_event_type;
	ubyte num,i,j;
	struct lapm_dummy_struct *add;

	void lapm_timer(void);
	void tx_clear_buffer_check(struct lapm_dummy_struct *);

	if (lapm_fallback_to_MNP)
	{
		return(MNP_NEGOT);
	}

	while (lapm_timer_tick != 0)
	{
		lapm_timer_tick--;
		lapm_timer();
	}

	lapm_line_bg();

    /* remove all temporary receive frames from the temp_rcv_que */
    /*	also remove all frames that are out of range		 */
	num = 1;
	add = (struct lapm_dummy_struct *)lapm_temp_rcv_que.fill_begin;
	while (add != NULL)
	{
		j = add->cmd >> 1;
		i = next_to_deliver + DEFAULT_K_RANGE;
		if (j == locVR)
		{
			locVR = (locVR + 1) & SEQMOD-1;
			add = (struct lapm_dummy_struct *)dqdeep_lapm((struct lapm_que_struct *)&lapm_temp_rcv_que,num);
			qq_lapm((struct lapm_que_struct *)&lapm_receive_que,(struct lapm_dummy_struct *)add);
			num = 1;
			add = (struct lapm_dummy_struct *)lapm_temp_rcv_que.fill_begin;
		}
		else
		{
			if (j < next_to_deliver)
				j += SEQMOD;
			if (i < j)
			{
				add = (struct lapm_dummy_struct *)dqdeep_lapm((struct lapm_que_struct *)&lapm_temp_rcv_que,num);
				lapm_put_empty((struct lapm_receive_struct *)add);
				num = 1;
				add = (struct lapm_dummy_struct *)lapm_temp_rcv_que.fill_begin;
			}
			else
			{
				num++;
				add = add->next_addr;
			}
		}
	}


	if (LAPMtx_buffers_sent != NULL)
	{
		line_disable_interrupts();
		tx_clear_buffer_check(LAPMtx_buffers_sent);
		LAPMtx_buffers_sent = NULL;
		line_enable_interrupts();
	}

	if (LAPMtx_buffers_sent2 != NULL)
	{
		line_disable_interrupts();
		tx_clear_buffer_check(LAPMtx_buffers_sent2);
		LAPMtx_buffers_sent2 = NULL;
		line_enable_interrupts();
	}

	if (LAPMtx_buffers_sent3 != NULL)
	{
		line_disable_interrupts();
		tx_clear_buffer_check(LAPMtx_buffers_sent3);
		LAPMtx_buffers_sent3 = NULL;
		line_enable_interrupts();
	}


	if (receive_active_frame == NULL)
	{
		line_disable_interrupts();
		receive_active_frame = (struct lapm_receive_struct *)lapm_get_empty();
		line_enable_interrupts();

		if (receive_active_frame != NULL)
			line_rx_block( (ubyte *) receive_active_frame);
	}

    /* clear all receive frames that are out of range */
	num = 1;
	add = (struct lapm_dummy_struct *)lapm_receive_que.fill_begin;
	while (add != NULL)
	{
		j = add->cmd >> 1;
		i = next_to_deliver + DEFAULT_K_RANGE;
		if (j < next_to_deliver)
			j += SEQMOD;

		if ((add->cmd != UI) && (i < j))
		{
			add = (struct lapm_dummy_struct *)dqdeep_lapm((struct lapm_que_struct *)&lapm_receive_que,num);
			lapm_put_empty((struct lapm_receive_struct *)add);
			num = 1;
			add = (struct lapm_dummy_struct *)lapm_receive_que.fill_begin;
		}
		else
		{
			num++;
			add = add->next_addr;
		}
	}

	event = NULL;

	if ((time_array[INITTIMER] != RESET_VALUE) && (time_array[INITTIMER] >= valueTInit))
	{
		timer(TIMCancel,INITTIMER);
		event = (struct lapm_event_struct *)aq_lapm((struct lapm_que_struct *)&lapm_event_que);
		if (event != NULL)
		{
			 event->type = E_ORIG;
			 event->buffer = NULL;
		}
	}

	if ((time_array[INACTIVITY] != RESET_VALUE) && (time_array[INACTIVITY] >= valueINACTIVITY))
	{
	    if (event == NULL)
	    {
		timer(TIMCancel,INACTIVITY);
		event = (struct lapm_event_struct *)aq_lapm((struct lapm_que_struct *)&lapm_event_que);
		if (event != NULL)
		{
			 LAPMreason = INACTIVE_TIMEOUT;
			 event->type = E_STOP;
			 event->buffer = NULL;
		}
	    }
	}

	if ((time_array[T401] != RESET_VALUE) && (time_array[T401] >= valueT401))
	{
	    if (event == NULL)
	    {
		time_array[T401] = time_array[T401] - valueT401;
		event = (struct lapm_event_struct *)aq_lapm((struct lapm_que_struct *)&lapm_event_que);
		if (event != NULL)
		{
			 event->buffer = NULL;
			 event->type = E_TIMR401;
		}
	    }
	}

	if ((time_array[T403] != RESET_VALUE) && (time_array[T403] >= valueT403))
	{
	    if (event == NULL)
	    {
		time_array[T403] = time_array[T403] - valueT403;
		event = (struct lapm_event_struct *)aq_lapm((struct lapm_que_struct *)&lapm_event_que);
		if (event != NULL)
		{
			 event->type = E_TIMR403;
			 event->buffer = NULL;
		}
	    }
	}

	if (LAPMidle)
	{
	  if (event == NULL)
	  {
		num = 1;
		event = (struct lapm_event_struct *)lapm_event_que.fill_begin;
		while (event != NULL)
		{
		    if ((event->buffer != NULL) && (((event->buffer->cmd & IFRM_MASK) == IFRM)
		       || ((event->buffer->cmd == UI) && ((event->buffer->data[0] & 0x7f) == BREAK))))
		    {
			num++;
			event = event->next_addr;
		    }
		    else
		    {
			event = (struct lapm_event_struct *)dqdeep_lapm((struct lapm_que_struct *)&lapm_event_que,num);
			break;
		    }
		}

		if (event == NULL)
		{
		   event = (struct lapm_event_struct *)aq_lapm((struct lapm_que_struct *)&lapm_event_que);
		   if (event != NULL)
		   {
			event->type = E_LOCBUSY;
			LAPMbusy = TRUE;
			event->buffer = NULL;
		   }
		}
	  }
	}
	else
	{
		 if (LAPMreconfigure == TRUE)
		 {
			if (lapm_send_que.fill_begin == NULL)
			{
				event = (struct lapm_event_struct *)aq_lapm((struct lapm_que_struct *)&lapm_event_que);
				if (event != NULL)
				{
					LAPMreconfigure = FALSE;
					event->type = E_SXID;
					event->buffer = NULL;
				}
			}
		 }

		 if (LAPMsend_dte_break == TRUE)
		 {
			LAPMsend_dte_break = FALSE;
			dte_to_break(LAPMrx_brk_type,LAPMrx_brk_len);
		 }

		 /* If the timers have not ran out then take an event off the que */
		 if (event == NULL)
		 {
			event = (struct lapm_event_struct *)dq_lapm((struct lapm_que_struct *)&lapm_event_que);
			if ((event == NULL) && (LAPMbusy))
			{
				event = (struct lapm_event_struct *)aq_lapm((struct lapm_que_struct *)&lapm_event_que);
				if (event != NULL)
				{
					event->type = E_IGNORE;
					event->buffer = NULL;
				}
			}
		 }
	}

	while (event != NULL)
	{
		event_frame = event->buffer;
		cur_event_type = DO_NOT_QUE;

		while (event->type != cur_event_type)
		{
			cur_event_type = event->type;
			process_state();
			(*proc)();
		}
		if (event_frame != NULL)
			lapm_put_empty(event_frame);
		fq_lapm((struct lapm_que_struct *)&lapm_event_que,(struct lapm_dummy_struct *)event);

		event = (struct lapm_event_struct *)dq_lapm((struct lapm_que_struct *)&lapm_event_que);
	}

	if (state.cur_state == S_DOWN)
		LAPMstatus = DOWN;
	if (state.cur_state == S_DISC)
		LAPMstatus = STOPPED;

	send_control();

	if (((LAPMstatus == UP) || (LAPMstatus == IDLE)) && (!LAPMxid))
	{
		deliver_data();
		process_data();
		LAPM_BTLZ_balance();
		send_data(PFCLR);
	}

	if (LAPMreestablish == TRUE)
	{
		if (LAPMstatus == UP)
			LAPMreestablish = FALSE;
		return (REESTABLISH);
	}

#ifdef SEQ_DISCON
	if (LAPMstatus == DOWN)
	{
		if (lapm_receive_que.fill_begin != NULL)
		{
			return (STOPPED);	/* deliver all frames received */
		}
	}
#endif

	return (LAPMstatus);
}

