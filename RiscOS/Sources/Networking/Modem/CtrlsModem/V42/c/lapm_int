/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           LAPM_INT.C
/
/       Module Version: 4.02
/
/       Function:       Contains LAPM interrupt code.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    3/5/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "lapm_ede.h"
#include "edf.lapm_que"

struct lapm_dummy_struct *lapm_tx(void);
ubyte *lapm_rx(void);

/*******************************************************************************
/									       /
/	 ROUTINE: lapm_tx						       /
/									       /
/	 This routine is used to transmit frames			       /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT:						       /
/		 tx_current - Pointer to the next address to be transmitted    /
/		 (word) 						       /
/									       /
*******************************************************************************/
struct lapm_dummy_struct *lapm_tx(void)
{
	ubyte num;

	if (LAPMtx_current->cmd & 0x01)
	{
		if (LAPMtx_buffers_sent == NULL)
			LAPMtx_buffers_sent = LAPMtx_current;
		else if (LAPMtx_buffers_sent2 == NULL)
			LAPMtx_buffers_sent2 = LAPMtx_current;
		else
			LAPMtx_buffers_sent3 = LAPMtx_current;
	}

	LAPMtx_current = LAPMtx_holding;

	LAPMtx_holding = NULL;

	if (LAPMtx_current == NULL)
	{
		if ((lapm_control_que.fill_begin == NULL) && (k != 0) && (!LAPMbreak))
		{
			if (LAPMsrej_que__in != LAPMsrej_que__out)
			{
				LAPMtx_current = (struct lapm_dummy_struct *)LAPMsrej_que[LAPMsrej_que__out];
				LAPM_inc_tx(LAPMsrej_que__out);
			}
			else
			{
				if (LAPMtx_que__ackout > LAPMtx_que__ackin)
					num = 1 + number_of_lapm_send_buffers + LAPMtx_que__ackin - LAPMtx_que__ackout;
				else
					num = LAPMtx_que__ackin - LAPMtx_que__ackout;

				if (num < k)
				{
					if (LAPMtx_que__in != LAPMtx_que__out)
					{
						LAPMtx_current = (struct lapm_dummy_struct *)LAPMtx_que[LAPMtx_que__out];
						LAPM_inc_tx(LAPMtx_que__out);
						LAPM_inc_tx(LAPMtx_que__ackin);
					}
				}
			}

			if (LAPMtx_current != NULL)
			{
				LAPMtx_current->cmd2 = (locVR << 1) | (LAPMtx_current->cmd2 & 0x01);
			}
		}
	}
	return (LAPMtx_current);
}


ubyte *lapm_rx(void)
{
	return ( (ubyte*) lapm_rx_next_address());
}

