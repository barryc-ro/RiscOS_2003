/****************************************************************************
/
/       Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995.
/       All Rights Reserved by:
/               RSA
/               7701 Six Forks Road
/               Suite 120
/               Raleigh, NC  27615
/               (919) 846-7171
/
/
/       This document contains material confidential to RSA its contents must
/       not be revealed, used or disclosed to anyone or company with out
/       written permission by RSA.  The information contained herein is solely
/       for the use of RSA.
/
/       File:           LAPM_CTL.C
/
/       Module Version: 4.02
/
/       Function:       LAPM control packet routines.
/
/       Product:        V.42/V.42bis
/
/       History:
/
/           Created:    8/10/92
/                       11/1/94 (V4.01) - Add ETC and update MNP10
/
/           ---------------------------------------------------------
/           -                   Modifications                       -
/           ---------------------------------------------------------
/
/           Author & Date:	RSA
/           Description:
/           Reason:
/
*****************************************************************************/

#include "sys_def.h"
#include "lapm_ede.h"

#include "edf.lapm_que"
#include "edf.lapm_lib"
#include "edf.lapm_tmr"
#include "edf.lapm_xid"

void send_cmd(ubyte,ubyte);
void send_rsp(ubyte,ubyte);
void que_control(ubyte,ubyte,ubyte);
ubyte send_control(void);

/*******************************************************************************
/									       /
/	 ROUTINE: send_control						       /
/									       /
/	 This routine completes the command field and calls send_lapm_frame.   /
/									       /
/	 PARAMETERS IN: none						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
ubyte send_control(void)
{

	struct lapm_control_struct *control_add;
	ubyte data0;

	control_add = (struct lapm_control_struct *)lapm_control_que.fill_begin;

	if (control_add != NULL)
	{
		switch (control_add->cmd)
		{
			/* If supervisory format then place the correct value in the second octet of the command field */
			case RR:
			case RNR:
			case REJ:
				data0 = (control_add->data[0] & 0x01) | (locVR << 1);
				break;

			case SREJ:
			/* If unnumbered then there is no second octet */
			default:
				data0 = control_add->data[0];
		};

		if ((LAPMbreak == TRUE) && (control_add->cmd != UI))
			return(TRUE);

		if (send_lapm_frame((struct lapm_dummy_struct *)control_add,control_add->addr,data0))
		{
			if (control_add->cmd == UI)
				if ((control_add->data[0] & 0x7f) == BREAK)
				{
					timer(TIMRestart,T401);
				}
			control_add = (struct lapm_control_struct *)dq_lapm((struct lapm_que_struct *)&lapm_control_que);
		}
		return(TRUE);
	}
	return (FALSE);
}




/*******************************************************************************
/									       /
/	 ROUTINE: que_control						       /
/									       /
/	 This routine allocates a control buffer, assigns it the correct       /
/	 command field and address field then ques it on the control que.      /
/									       /
/	 PARAMETERS IN: 						       /
/		 addr - Value of the address byte in the frame		       /
/		 (byte)      if Originator				       /
/				      1 : Local address 		       /
/				      3 : Remote address		       /
/			     if Answerer				       /
/				      3 : Local address 		       /
/				      1 : Remote address		       /
/									       /
/		 poll - Value of the poll bit				       /
/		 (byte)      0 : Bit cleared				       /
/			     1 : Bit set				       /
/									       /
/		 cmd - Frame command					       /
/		 (byte) 						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void que_control( ubyte addr, ubyte poll, ubyte cmd )
{

	struct lapm_control_struct *buffer_add; 		/* Address of the allocated buffer */

	buffer_add = (struct lapm_control_struct *)aq_lapm((struct lapm_que_struct *)&lapm_control_que);

	if (buffer_add != NULL)
	{
		buffer_add->cmd = cmd;
		buffer_add->addr = addr;

		if ((cmd & UNUMcmd) == UNUMcmd) 		/* If the command is unnumbered */
		{
			buffer_add->len = CUNMsize;
			buffer_add->cmd = cmd | poll;
		}
		else						/* else it is either a information or */
								/* supervisory frame */
		{
			buffer_add->len = CNUMsize;
			buffer_add->data[0] = poll;
		}
		switch (cmd)
		{
		case FRMR:
			buffer_add->len = FRMRsize;
			buffer_add->data[0] = FRMRfield[0];
			buffer_add->data[1] = FRMRfield[1];
			buffer_add->data[2] = FRMRfield[2];
			buffer_add->data[3] = FRMRfield[3];
			buffer_add->data[4] = FRMRfield[4];
			break;

		case XID:
			fq_lapm((struct lapm_que_struct *)&lapm_control_que,(struct lapm_dummy_struct *)buffer_add);
			if (addr == rmtAddr)
				build_xid(req_parms,poll,addr);
			else
				build_xid(neg_parms,poll,addr);
			break;
		};
		if (cmd != XID)
			qq_lapm((struct lapm_que_struct *)&lapm_control_que,(struct lapm_dummy_struct *)buffer_add);

		send_control();
	}
}





/*******************************************************************************
/									       /
/	 ROUTINE: send_cmd						       /
/									       /
/	 This routine calls the control frame queing routines which initiates  /
/	 the transmission of the command frame. 			       /
/									       /
/	 PARAMETERS IN: 						       /
/		 poll - Value of the poll bit				       /
/		 (byte)      0 : Bit cleared				       /
/			     1 : Bit set				       /
/									       /
/		 cmd - Frame command					       /
/		 (byte) 						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void send_cmd( ubyte poll, ubyte cmd )
{
	que_control(rmtAddr,poll,cmd);
}




/*******************************************************************************
/									       /
/	 ROUTINE: send_rsp						       /
/									       /
/	 This routine calls the control frame queing routines which initiates  /
/	 the transmission of the response frame.			       /
/									       /
/	 PARAMETERS IN: 						       /
/		 poll - Value of the poll bit				       /
/		 (byte)      0 : Bit cleared				       /
/			     1 : Bit set				       /
/									       /
/		 cmd - Frame command					       /
/		 (byte) 						       /
/									       /
/	 PARAMETERS OUT: none						       /
/									       /
*******************************************************************************/
void send_rsp( ubyte poll, ubyte cmd )
{
	que_control(locAddr,poll,cmd);
}

