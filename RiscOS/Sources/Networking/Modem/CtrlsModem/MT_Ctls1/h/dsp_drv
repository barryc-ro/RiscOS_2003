/* DSPDRV.H */

/* the packet length does not include the semaphore and length */
#define PKT_OVERHEAD     4

#define CP_CONTROL_DSP_RUN    0x1
#define CP_CONTROL_DSP_RESET  0x2
#define CP_CONTROL_DSP_HALT   0x3


#define  CRAM_MEMORY_OK       0
#define  CRAM_MEMORY_ERROR    1
#define  DSP_TIMEOUT_ERROR    2


#define   TEST_FAIL 0x00
#define   TEST_PASS 0x01


/* Other defines */

#define FAIL        -1

#define MAX_RING_BUFFER_SIZE  10   /* 10 entry buffer  */
#define MAX_PACKET_SIZE            0x40 /* 64 byte buffer  */
#define MAX_PKT_DATA_SIZE          (0x40-4)  /* total size - header */

/* Status bits for RingBuffers */

#define RB_OVERFLOW      0x01
#define RB_UNDERFLOW     0x02


/* Define the ring buffer. ALL ring buffers insert into head and remove */
/* from tail. When head or tail hits the end they wrap to start */

/* RJM040396 */
/* V34 Beta App support */
#define COMMRAM_TX  ((BYTE *)(ASIC_BASE+0x81))
#define COMMRAM_RX  ((BYTE *)(ASIC_BASE+0x01))

#define     DSP_CFG_REG         0xf6    /*DSP configuration register              */
#define         DSP_BOOT_INT_ROM    0x01
#define     LBYTE_UD_ADD        0xf8    /*low byte of upload/download address reg */
#define     HBYTE_UD_ADD        0xf9    /*high byte of upload/download address reg */
#define     UD_DATA             0xfa    /*upload/download data register              */
#define     CP_CONTROL          0xfc    /*Merlin DSP control register              */
#define     DSP_RUN             0x01    /*control reg value for run mode          */
#define     DSP_RESET           0x02    /*control reg value for reset/tristate mode    */
#define     DSP_HALT            0x03    /*control reg value for halt              */
#define     CP_CTL_RESET        0x01
#define     CP_CTL_CFG          0x08

#define     ISA_IF_ADDR         0x350   /*ISA bus interface address register     */
#define     ISA_IF_DATA         0x351   /*ISA bus interface data register         */

#define     DSP_CP_SEMAPHORE    0       /*DSP to CP mailbox semaphore addr         */
#define     DSP_CP_MAILBOX_SIZE 40      /*DSP/CP mailbox size                     */
#define     CP_DSP_SEMAPHORE    0x40    /*CP to DSP mailbox semaphore addr         */

#define     DSP_INTERRUPT       0xfe    /*DSP interrupt register                 */
#define     CP_INTERRUPT        0xff    /*CP interrupt register                     */


#define     LSB(x)    (x & 0xff)
#define     MSB(x)    ((x >> 8) & 0xff)

/* Define the ring buffer. ALL ring buffers insert into head and remove */
/* from tail. When head or tail hits the end they wrap to start */

typedef  struct PacketData {
            ubyte  pkt_id;
            ubyte  pkt_len;
                ubyte  pkt_data[MAX_PACKET_SIZE];
} PacketData;


typedef    struct RingBuffer {

                unsigned         status;
                PacketData       *start;
                PacketData       *end;
                PacketData       *head;
                PacketData       *tail;
                PacketData       data[MAX_RING_BUFFER_SIZE];

} RingBuffer;



/* Function prototypes for dspdrv.c function calls */

extern void dspdrv_ping_cram_intr(void);

void  dspdrv_ReadCram(uword addr, ubyte *data, uword len);
void  dspdrv_WriteCram(uword addr, ubyte *data,  uword len);

void  dspdrv_reset_dsp(void);
void  dspdrv_halt_dsp(void);
void  dspdrv_run_dsp(void);

/* RJM040396 */
/* V34 Beta App support */
void  dspdrv_dl_to_DSP(char *data, ulong addr, ulong len);
void  dspdrv_ul_from_DSP(void);
uword dspdrv_dspram_test(void);
uword dspdrv_cram_test(void);
uword dspdrv_cram_coop_test(void);
void  dspdrv_InitBuffer(RingBuffer *RB);
uword dspdrv_GetData(RingBuffer *RB, PacketData *p);
uword dspdrv_PutData(RingBuffer *RB, PacketData *p);
uword dspdrv_Empty(RingBuffer *RB);
uword dspdrv_SpaceAvail(RingBuffer *RB);
void  dspdrv_install_cram_isr(void);
uword dspdrv_GetMessage(char *data);
uword dspdrv_PutMessage(char *data);
void  set_register(uword, ubyte);
ubyte get_register(uword);


