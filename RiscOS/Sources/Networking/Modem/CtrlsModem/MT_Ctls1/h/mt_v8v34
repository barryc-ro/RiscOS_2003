/******************************************************************************
/
/     Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994. All Rights Reserved by:
/           RSA
/           7701 Six Forks Road
/           Suite 120
/           Raleigh, NC  27615
/           (919) 846-7171
/
/     This document contains material confidential to R. Scott Associates.
/     its contents must not be revealed, used or disclosed to anyone or
/     company with out written permission by R. Scott Associates.  the
/     information contained herein is solely for the use of R. Scott
/     Associates.
/
/       File:           mt_v8v34.h
/
/       Version:        1.00
/
/       Function:       structures 
/
/       Product:        Modem Task Driver for Merlin Chip Set
/
/       History:    
/
/       Created:        7/21/95
/           ------------------------------------------------------
/           -                Modifications                       -
/           ------------------------------------------------------
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
#include "sys_def.h"


#define V8_MOD_MODE_DEFAULT 0x0B05  /* see structure below */
//#define V8_MOD_MODE_DEFAULT 0x0305  /* V34 not enabled */

#define V21_MASK     0x0001
#define V23HALF_MASK 0x0002
#define V23FULL_MASK 0x0004
#define V26BIS_MASK  0x0008
#define V26TER_MASK  0x0010
#define V27TER_MASK  0x0020
#define V29HALF_MASK 0x0040
#define V17_MASK     0x0080
#define V22_MASK     0x0100
#define V32_MASK     0x0200
#define V34HALF_MASK 0x0400
#define V34FULL_MASK 0x0800

#define ALL_SENT_BIT 0x40

#define ONE_SECOND          200
#define V8_BUFF_SIZE        32
#define MAX_V8_SIZE         8

/********ACU conversions***********************************/
#define NO_TONES 0x00  /* values are shifted to reflect postion in packet */
#define CNG_ANS  0x40
#define CT_ANS   0x80
#define CI_ANS   0xC0 
/********ACU conversions***********************************/

/********DSP conversions***********************************/
#define JM_RXD          1
#define CM_RXD          2
#define ANSWERTONE 		6 /*mrm22096*/
#define ANSAM           0x1f  /* modem call progress */
#define ANSAM_PR        0x20  /* ANSam w/ phase reversal */
#define V8_PRE_ANSAM    0x22  /* DSP detects ANS but searching for ANSam */
/*********************************************************/

/************************************************************/
/********CM message format***********************************/
/* indexes */
#define PREAMBLE_IDX  0x00
#define CM_SEQ_IDX    0x01
#define CALLF_IDX     0x02
#define MOD_MODE0_IDX 0x03
#define MOD_MODE1_IDX 0x04
#define MOD_MODE2_IDX 0x05
#define PROTOCOL_IDX  0x06
#define GSTN_IDX      0x07

/* values */
#define PREAMBLE    0xFF
#define CI_SEQ      0x00
#define CJ_SEQ      0x00
#define CM_SEQ      0xE0
#define JM_SEQ      0xE0
#define CALLFUNC    0x01
#define MOD_MODE0   0x05
#define MOD_MODEn   0x10
#define PROTOCOL    0x0A
#define GSTN_ACCESS 0x0D
            

/* bit mapped */            
#define MT_FULL_DUPLEX  0xC0
#define MT_TEXTPHONE    0x40 /* call function */

#define V34_HALF_DUPLEX 0x80
#define V34_FULL_DUPLEX 0x40 /* modulation mode 0 */

#define V27_TER         0x80
#define V29_HALF_DUPLEX 0x40 /* modulation mode 1 */
#define V17             0x04
#define V22_BIS         0x02
#define V32_BIS         0x01

#define V21             0x80
#define V23_HALF_DUPLEX 0x40 /* modulation mode 2 */
#define V23_FULL_DUPLEX 0x04
#define V26_BIS         0x02
#define V26_TER         0x01

#define LAPM_ENABLE     0x20
/********************************/

/********************************/
/* V8 state machine */
#define V8_START            0                             
#define XMIT_CI             1
#define WAIT_ANSam_OR_SENT  2
#define WAIT_FOR_JMS        3
#define WAIT_FOR_CJ         4
/*MRM22096*/
/*added another state to V8 answer */

#define V8_START_ANSWER     5                             
#define V8_DONE             6
/********************************/                    

/* LINE_V8 RX state machine */
extern ubyte v8_status;
extern ubyte jm_seq_match;
#define WAITING_FOR_CM_SEQ    0
#define SAVING_CM_SEQ         1
#define COMPARE_CM_SEQ        2
#define CM_SEQ_FOUND          3
#define WAITING_FOR_CJ_SEQ    4
#define V8_RX_IDLE            9

/****************ELEMENTS*******************************************************/
#if0
typedef union 
{
        struct
        {
        int asym_bit_rate:    1;      /* bit 0  */
        int asym_symb_rate:   1;      /* bit 1  */
        int aux_chan_en:      1;      /* bit 2  */
        int reserved:         5;      /* bit 3-7*/
        } bits;
        ubyte bytetype;
} V34_CONFIG;

typedef union 
{
        struct
        {
        int tx_carrier:       4;      /* bit 0-3  */
        int rx_carrier:       4;      /* bit 4-7  */
        } bits;
        ubyte bytetype;
} CARRIER_FREQ_TYPE;

typedef union 
{
        struct
        {
        int aux_chan:         1;      /* bit 0  */
        int reserved:         7;      /* bit 1-7  */
        } bits;
        ubyte bytetype;
} AUX_CHAN_TYPE;



typedef union
{
    struct
    {
    int reserved :         6;      /* bit 0-5  */    
    int all_sent :         1;      /* bit  6 */
    int reserved2:         1;      /* bit  7 */    
    } bits;
    ubyte bytetype;
} XMIT_STAT_REG_TYPE;

typedef struct
{
    ubyte preamble;
    ubyte sync;
    struct
    { 
        int callfuncat  : 3;
        int octect      : 5; /* always 00001 */
    } callf0;
    struct
    {
        int v34_halfdup : 1;
        int v34_fulldup : 1;
        int octect      : 6; /* always 000101 */
    } modn0;
    struct
    {
        int v27_ter     : 1;
        int v29_halfdup : 1;
        int octect      : 3; /* always 010 */
        int v17         : 1;
        int v22_bis     : 1;
        int v32_bis     : 1;
    } modn1;
    struct
    {
        int v21         : 1;
        int v23_halfdup : 1;
        int octect      : 3; /* always 010 */
        int v23_fulldup : 1;
        int v26_bis     : 1;
        int v26_ter     : 1;
    } modn2;
    struct
    {
        int LAPM        : 2; /* 00=LAPM, 11=extension ocect */
        int octect      : 6; /* always 101010 */
    } prot0;
    struct
    {             
        int b7          : 1; /* always 0 */
        int cell_answer : 1;
        int cell_caller : 1;        
        int octect      : 5; /* always 01010 */
    } gstna;
} V8_MSG;
#endif
