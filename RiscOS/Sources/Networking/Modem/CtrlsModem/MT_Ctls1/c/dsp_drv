/******************************************************************************
/
/     Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994. All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA.
/     Its contents must not be revealed, used or disclosed to
/     anyone or company with out written permission by RSA.
/     The information contained herein is solely for the use
/     of RSA.
/
/       File:           dsp_drv.c
/
/       Version:
/
/       Function:       Cutlass I CommRAM I/F
/
/       Product:        Musket
/
/       History:
/
/       Created:        10/25/95
/        ------------------------------------------------------
/        -               Modifications             -
/        ------------------------------------------------------
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/

#include "sys_def.h"
#include "dsp_drv.h"

/* RJM040396 */
#include "mt_coext.h"
#include "mt_codef.h"
#include "mt_copro.h"

#define  SET_CRAM_REG(addr, data)     /* not needed for know */
void dspdrv_clear_dsp_interrupt (void);

#if !defined(MUSKET)

   #undef SET_CRAM_REG
   #define SET_CRAM_REG(addr,data)      (set_register(addr,data))

   /* Cutlass include files and additions */
   /* Cutlass include files and additions */
   #include "local.h"
   #include "icd_msgs.h"
   #ifndef __riscos
   #include "vbdtregs.h"
   #endif
   #include "mt_codef.h"

   /* Global variables */
   ubyte  Cdata[MAX_PACKET_SIZE];
   ubyte delay_len = 0;

   /* Function prototypes */
   void delay_subroutine(void);
   void (*CRAM_CallBack)(void);

   void dspdrv_reset_dsp (void);
   void dspdrv_run_dsp (void);
   void dspdrv_halt_dsp (void);
   void dspdrv_CommRamHandler (void);

   /* External function prototypes */
   extern void cmd_packet_callback( ubyte id );

   /*
   |---------------------------------------------------------------------------
   |
   | dspdrv_reset_dsp() - Puts the DSP in reset state.
   |
   |---------------------------------------------------------------------------
   | PURPOSE:
   |        Puts the DSP in reset state.
   |
   | PARAMETERS:
   |   <or INPUTS>
   |
   | RETURN VALUE:
   |   <or OUTPUTS UPON EXIT>
   |
   | NOTES:
   |   <indicate any restrictions or dependencies>
   |
   |
   |
   */
   void    dspdrv_reset_dsp()
   {
    #ifdef __riscos
       #ifdef DEBUG
       extern void dump_svc_stack(void);
       dump_svc_stack();
       #endif
       dspdrv_halt_dsp();

       dspdrv_run_dsp();

       #if 0

       /*  wake up the DSP  */
       LOAD_MODEM_WAKEUP_DSP
            ack_or_response = ACK;
       send_pkt_to_dsp();

       /* Need to download patches again */
       dsppatch(PATCH_INIT_POWER_ON);  /* Download the Cutlass DSP patch file */

            LOAD_MODEM_INIT
            ack_or_response = ACK;
            send_pkt_to_dsp();
       #endif
    #else
       ubyte scrap;

       scrap = get_register(REG2);
       set_register(REG2, (scrap | 0x80) & 0xFD); /* reset DSP, set to RAM operation */
    #endif
   }

   /*
   |---------------------------------------------------------------------------
   |
   | dspdrv_halt_dsp() - Puts the DSP in halt state
   |
   |---------------------------------------------------------------------------
   | PURPOSE:
   |        Puts the DSP in halt state.
   |
   | PARAMETERS:
   |   <or INPUTS>
   |
   | RETURN VALUE:
   |   <or OUTPUTS UPON EXIT>
   |
   | NOTES:
   |   <indicate any restrictions or dependencies>
   |
   |
   |
   */
   void    dspdrv_halt_dsp()
   {
  #ifdef __riscos
   ulong time;

   set_register(DSP_CFG_REG, DSP_BOOT_INT_ROM);
   set_register(CP_CONTROL, DSP_RESET);

   /* Settling time */
   for( time=0; time<0xFFFFL; time++ );
       /* dum dee dum dum */

  #else
     current_command[0] = PACKET_ENTER_MON;
     current_command[1] = 0;
     current_command[2] = 0;
     current_command[3] = 0;

     ack_or_response = ACK;
     send_pkt_to_dsp ();
   #endif
   }

   /*
   |---------------------------------------------------------------------------
   |
   | dspdrv_run_dsp() - Releases the DSP from HALT or RESET states.
   |
   |---------------------------------------------------------------------------
   | PURPOSE:
   |        Puts the DSP in run state.
   |
   | PARAMETERS:
   |   <or INPUTS>
   |
   | RETURN VALUE:
   |   <or OUTPUTS UPON EXIT>
   |
   | NOTES:
   |   <indicate any restrictions or dependencies>
   |
   |
   |
   */
   void    dspdrv_run_dsp()
   {
     #ifdef __riscos
       ulong time;

       set_register(CP_CONTROL, DSP_RUN);

       /* Settling time */
       for( time=0; time<0xFFFFL; time++ );
           /* dum dee dum dum */
     #else
       ubyte scrap;

       dspdrv_reset_dsp ();

       scrap = get_register(REG2);
       set_register(REG2, scrap & 0x7F);           /* execute program */
     #endif
   }


   /*
   |---------------------------------------------------------------------------
   |
   | dspdrv_dl_to_DSP() - Downloads to DSP memory.
   |
   |---------------------------------------------------------------------------
   | PURPOSE:
   |        Downloads *data to DSP address start with length len.
   |
   | PARAMETERS:
   |   <or INPUTS>
   |
   | RETURN VALUE:
   |   <or OUTPUTS UPON EXIT>
   |
   | NOTES:
   |   <indicate any restrictions or dependencies>
   |
   |
   |
   */
   void dspdrv_dl_to_DSP(char *data, ulong addr, ulong len)
   {
       ubyte *dptr = (unsigned char *) data;
       ubyte templ, temph;    //temporary variables for fix

       // convert to chars
       len = len << 1; // multiply len by 2 (2 bytes per word)

       SET_CRAM_REG(HBYTE_UD_ADD, MSB(addr));// set high byte of dnld addr
       SET_CRAM_REG(LBYTE_UD_ADD, LSB(addr));// set    low byte of dnld addr

       // loop while there is data, inserting data
       while (len)
       {
           templ = *dptr++;
           temph = *dptr++;

           SET_CRAM_REG(UD_DATA, templ);
           SET_CRAM_REG(UD_DATA, temph);
           len = len-2;
       }
   }



   // upload   Upload program memory.  Used for program upload.
   //               This routine resets the DSP.
   //                returns: # of words read, -1 if error
   //***********************************************************
   //  routine modified by RSA 7/6/94
   //***********************************************************
   int upload_dsp(uword addr,      // starting address of block
           ubyte *data,            // pointer to data buffer
           uword limit)                 // max size of buffer
   {
       ubyte buffer[100+1];
       register uword i = 0;
       ubyte templ, temph;
       uword tempw;

       // use download mechanism to get code
       dspdrv_reset_dsp();

       // tell it the start address
       SET_CRAM_REG(LBYTE_UD_ADD, LSB(addr));
       SET_CRAM_REG(HBYTE_UD_ADD, MSB(addr));

       while(limit--)
       {
           templ = get_register(UD_DATA);
           temph = get_register(UD_DATA);
           tempw = (templ | (temph << 8));
           *data++ = tempw;
           i++;
       }

       return(i);
   }

   /*
   |---------------------------------------------------------------------------
   |
   | dspdrv_enable_cram() - Enables CommRam interrupt
   |
   |---------------------------------------------------------------------------
   | PURPOSE:
   |        Enables CommRam interrupt
   |
   | PARAMETERS:
   |   <or INPUTS>
   |
   | RETURN VALUE:
   |   <or OUTPUTS UPON EXIT>
   |
   | NOTES:
   |   <indicate any restrictions or dependencies>
   |
   |
   |
   */

   void  dspdrv_enable_cram()
   {
      // stubbed, may need to replace with something - jeb
   }

   /*
   |---------------------------------------------------------------------------
   |
   | dspdrv_disable_cram() - Disables CommRam interrupt
   |
   |---------------------------------------------------------------------------
   | PURPOSE:
   |        Disables CommRam interrupt
   |
   | PARAMETERS:
   |   <or INPUTS>
   |
   | RETURN VALUE:
   |   <or OUTPUTS UPON EXIT>
   |
   | NOTES:
   |   <indicate any restrictions or dependencies>
   |
   |
   |
   */

   void  dspdrv_disable_cram()
   {
       // stubbed, may need to replace with something - jeb
   }


   /*
   |---------------------------------------------------------------------------
   |
   | dspdrv_PutCRAM() - Puts data into CommRam
   |
   |---------------------------------------------------------------------------
   | PURPOSE:
   |        Places a packet into the Tx CommRam.
   |
   | PARAMETERS:
   |   <or INPUTS>
   |
   | RETURN VALUE:
   |   <or OUTPUTS UPON EXIT>
   |
   | NOTES:
   |   <indicate any restrictions or dependencies>
   |
   |
   |
   */
   // modified by RSA, converted to PC/ ISA Bus.
   // Code was used from icd1st.c, routine: send_packet()
   // jeb - 9/9/94
   void  dspdrv_PutCRAM(ubyte *pckt)
   {
       ubyte  i;
       ubyte  length;

       // xfer message except packet ID, if odd# of bytes send another 0
       length = (*(pckt+2))+4;//set length of packet to write
       if (length & 1)
           length++; //ensure length is even

       for (i=1; i<length; i++)
           SET_CRAM_REG((CP_DSP_SEMAPHORE+i), *(pckt+i));

       /* set Tx semaphore */
       SET_CRAM_REG(CP_DSP_SEMAPHORE, *pckt);

       /* ping DSP interrupt line any write will do it */
       SET_CRAM_REG(DSP_INTERRUPT, 1); // write any value to interrupt dsp
   }


   /*
   |---------------------------------------------------------------------------
   |
   | dspdrv_GetCRAM() - Gets data from CommRam
   |
   |---------------------------------------------------------------------------
   | PURPOSE:
   |        Gets a packet from Rx CommRam.
   |
   | PARAMETERS:
   |   <or INPUTS>
   |
   | RETURN VALUE:
   |   <or OUTPUTS UPON EXIT>
   |
   | NOTES:
   |   <indicate any restrictions or dependencies>
   |
   |
   |
   */
   // modified by RSA, converted to PC/ ISA Bus.
   // Code was used from icd1st.c, routine: get_packet()
   // jeb - 9/9/94
   ubyte  dspdrv_GetCRAM(ubyte *data)
   {
       ubyte  len;
       ubyte  id;
       ubyte  addr;

       addr = DSP_CP_SEMAPHORE;
       *data   = get_register(addr++);    /* pkt ID */
       id      = *data++;
       *data++ = get_register(addr++);    /* spacer */
       *data   = get_register(addr++);    /* pkt len */
       len     = *data++;
       *data++ = get_register(addr++);    /* spacer */

       if ( len > MAX_PKT_DATA_SIZE)
           len = MAX_PKT_DATA_SIZE;

       while (len--)
           *data++ = get_register(addr++);

       /* clear Rx semaphore */
       // set mailbox semaphore to 0
       SET_CRAM_REG(DSP_CP_SEMAPHORE, 0);

       /* ping DSP interrupt line any write will do it */
       SET_CRAM_REG(DSP_INTERRUPT, 1); // write any value to interrupt dsp

       /* return the packet ID */
       return id;
   }


   /*
   |---------------------------------------------------------------------------
   |
   | dspdrv_CommRamHandler() - Processes CommRam
   |
   |---------------------------------------------------------------------------
   | PURPOSE:
   |        This routine manages the CommRam. If the Rx semaphor is set then it
   |        gets the data and puts it in the DSPin buffer. If the Tx semaphore is
   |        clear and there DSPout buffer is not empty then it transmits the next
   |        packet in the DSPout buffer.
   |
   | PARAMETERS:
   |   <or INPUTS>
   |
   | RETURN VALUE:
   |   <or OUTPUTS UPON EXIT>
   |
   | NOTES:
   |   <indicate any restrictions or dependencies>
   |
   |
   |
   */
   // modified by RSA, converted to PC/ ISA Bus.
   // jeb - 9/9/94
   void    dspdrv_CommRamHandler()
   {
       ubyte id;

       line_disable_interrupts();

       /* if Rx semaphone set then service it */
       if (get_register(DSP_CP_SEMAPHORE) != 0)
       {
           id = dspdrv_GetCRAM(Cdata);
           cmd_packet_callback (id);
       }

       line_enable_interrupts();
   }


   /*
   |---------------------------------------------------------------------------
   |
   | dspdrv_CommRamISR() - Interrupt service for CommRam
   |
   |---------------------------------------------------------------------------
   | PURPOSE:
   |        This ISR calls the CommRam handler and clears the INTR.
   |
   | PARAMETERS:
   |   <or INPUTS>
   |
   | RETURN VALUE:
   |   <or OUTPUTS UPON EXIT>
   |
   | NOTES:
   |   <indicate any restrictions or dependencies>
   |
   |
   |
   */
   // This may need to be replaced w/ something for PC platform
   void dspdrv_CommRamISR()
   {
       /* clear DSP interrupt */
       get_register(CP_INTERRUPT);

       dspdrv_CommRamHandler();

       /* Call ISR callback routine */
       if (CRAM_CallBack!=NULL)
           CRAM_CallBack();
   }



   /*
   |---------------------------------------------------------------------------
   |
   | dspdrv_install_cram_isr() - Install CommRam interrupt service routine
   |
   |---------------------------------------------------------------------------
   | PURPOSE:
   |        It defines the    CommRam ISR vector.
   |
   | PARAMETERS:
   |   <or INPUTS>
   |
   | RETURN VALUE:
   |   <or OUTPUTS UPON EXIT>
   |
   | NOTES:
   |   <indicate any restrictions or dependencies>
   |
   |
   |
   */
   void    dspdrv_install_cram_isr()
   {
   }

   void dspdrv_clear_dsp_interrupt (void)
   {
      /* clear DSP interrupt */
      get_register(CP_INTERRUPT);
   }

#endif

   /*
   |---------------------------------------------------------------------------
   |
   | dspdrv_ping_cram_intr() - Activate the cram interrupt line
   |
   |---------------------------------------------------------------------------
   | PURPOSE:
   |
   | PARAMETERS:
   |   <or INPUTS>
   |
   | RETURN VALUE:
   |   <or OUTPUTS UPON EXIT>
   |
   | NOTES:
   |   <indicate any restrictions or dependencies>
   |
   |
   |
   */
   void    dspdrv_ping_cram_intr()
   {
       /* ping DSP interrupt line any write will do it */
       SET_CRAM_REG(DSP_INTERRUPT,0);
   }


