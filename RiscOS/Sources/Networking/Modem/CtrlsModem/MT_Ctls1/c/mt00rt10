/******************************************************************************
/
/     Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994. All Rights Reserved by:
/           RSA
/           7701 Six Forks Road
/           Suite 120
/           Raleigh, NC  27615
/           (919) 846-7171
/
/     This document contains material confidential to R. Scott Associates.
/     its contents must not be revealed, used or disclosed to anyone or
/     company with out written permission by R. Scott Associates.  the
/     information contained herein is solely for the use of R. Scott
/     Associates.
/
/       File:           mt00rt10.c
/
/       Version:        1.00
/
/       Function:       Supporting Library Routines for Retraining and
/                       Rate Renegotioation
/
/       Product:        Modem Task Driver for Merlin Chip Sets
/
/       History: 
/
/       Created:        3/01/94
/
/               ------------------------------------------------------
/               -                Modifications                       -
/               ------------------------------------------------------
/
/               Author & Date:
/               Description:
/               Reason:
/
******************************************************************************/

#include  "SYS_DEF.H"
#include  "cp_dsp.h"
#include  "MT_COPRO.H"
#include  "MT_CODEF.H"
#include  "MT_COEXT.H"
#include  "MT_HWDEF.H"
#include  "MT_HWPRO.H"
#include  "mt_macro.h"

void mt_retrain(void);
void mt_renegotiate(void);
void connect_processor(void);
void test_line_quality(void);
void tlq_mse_poor_invalid(void);
ubyte chk_if_v32_line_mode(void);
void rrs_set_acu_online(void);
void determine_fall_back_en(void);
void retrain_processor(void);

/* RJM111296 */
/* V80 support */
/* Extern prototypes */
extern V80_modem_state_ind(ubyte,ubyte,ubyte);

/* ramn 3/5/96 */
extern uword sig_chk_timer;
extern uword *sig_quality;
extern uword *sync_loss; 
extern ubyte modem_mode;
extern ubyte ms_min_rate;
extern ubyte mt_retrain_enable;
extern ubyte retrain_started;
extern ubyte get_s37_baud(void);
extern uword acu_cd_loss_time;


#define 	NORMALIZED_NOMINAL_LEVEL	0xE00
#define	NORMALIZED_LOW_LEVEL			0x2800
#define	NORMALIZED_HIGH_LEVEL 		0xA00
#define	NO_RETRAIN_HANGUP_TIME		1000
#define	TIME_FOR_RETRAIN				1500
#define	RETRAIN_ENABLE_LEVEL			0x4800
ubyte spd_of_prv_conn_up = 0; /* ramn 3/14/96 */
ubyte spd_of_prv_conn_dn = 0;
extern uword sq_timer;	/* ramn 3/19/96 */


extern ubyte callch;	 /* ramn 11/21/96 */
extern ubyte answerch;


extern void PrintIt( byte * );

/*******************************************************************************
/
/                                 mt_retrain
/
/       Author:         RSA
/
/       Creation Date:  03/01/94
/
/       Description:    This routine will cause the modem to retrain at the
/                       given rate.  Update the modem_state to RETRAIN.
/
/       Input Parameter: None
/
/       Output Parameter: None
/
/       Global Variables Changed:
/
/       Users: modem_retrain
/
/       *****************************************************************
/       *                         Modifications                         *
/       *****************************************************************
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
void mt_retrain(void)
{ /* ramn 3/5/96 */

#if 0
   /*   set up state machine for retrain   */
   /*   modem_status will be set by DP   */
   modem_state  = RETRAIN;
   rtrn_state   = INITIATE;
   send_renegot = FALSE;
#endif

	ubyte *temp;

   /*   set up state machine for retrain   */
   /*   modem_status will be set by DP   */
   modem_state  = RETRAIN;
   rtrn_state   = RETRAIN_DP;
   send_renegot = FALSE;

	retrain_started = 1;
	LOAD_MODEM_RETRAIN
	ack_or_response = ACK;
	send_pkt_to_dsp();

/* RJM040396 */
/* Not needed and won't work anyhow for Host based */
#if 0
	temp = (ubyte *)(COM_RAM); 
	*temp = 0x00;
#endif
	
	retrain_timer = TIME_FOR_RETRAIN;

/* RJM111296 */
/* V80 support */
   V80_modem_state_ind(RETRAINING,line_bit_rate,line_bit_rate);
}


/*******************************************************************************
/
/                                 mt_renegotiate
/
/       Author:         RSA
/
/       Creation Date:  03/01/94
/
/       Description:    This routine will cause the modem to issue a rate
/                       renegotiation.
/
/       Input Parameters:   None
/
/       Output Parameter:   None
/
/       Global Variables Changed:       None
/
/       Users: modem_renegotiate
/
/       *****************************************************************
/       *                         Modifications                         *
/       *****************************************************************
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
void mt_renegotiate(void)

{
#if 0
   /*   modem_status will be set by DP   */
   modem_state  = RETRAIN;
   rtrn_state   = INITIATE;
   send_renegot = TRUE;
#endif
/* ramn 3/5/96 */
   /*   modem_status will be set by DP   */
   modem_state  = RETRAIN;
   rtrn_state   = RETRAIN_DP;
   send_renegot = TRUE;

/* RJM111296 */
/* V80 support */
   V80_modem_state_ind(13,line_bit_rate,line_bit_rate);
}



/*******************************************************************************
/
/                               connect_processor
/
/       Author:         RSA
/
/       Creation Date:  09/01/94
/
/       Description:    This routine will check the quality of signal and
/                       status of carrier detect during the connected state
/                       (CON).
/
/       Input Parameters:       None
/
/       Output Parameter:       None
/
/       Global Variables Changed:
/                                       poor_mse_timer
/                                       good_mse_timer
/                                       invalid_mse_timer
/                                       mse_timer
/
/       Users: (routines that used this)  modem_task
/
/       *****************************************************************
/       *                         Modifications                         *
/       *****************************************************************
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
void connect_processor(void)

{
   /*   do not check quality of line if in local test or already retraining  */
   if ((modem_status != LOCAL_TEST) && (modem_status != RETRAINING))
	 test_line_quality();

}



/*******************************************************************************
/
/                            test_line_quality
/
/       Author:         RSA
/
/       Creation Date:  09/01/94
/
/       Description:    This routine will determine if the line signal
/                       has become bad enough to need to retrain.
/
/       PARAMETERS IN:  None
/
/       PARAMETERS OUT:
/
/       Global Variables Changed:   retrain_timer
/                                   mse_poor_timer
/                                   mse_good_timer
/                                   mse_invalid_timer
/                                   mse_fair_timer
/
/       Users: connect_processor()
/
/       *****************************************************************
/       *                         Modifications                         *
/       *****************************************************************
/
*******************************************************************************/
void test_line_quality(void)
{

	 ubyte temp, curr_line_speed, max_conn_speed;
	 

	 /*   exit if %E0 and %G0    */
	 if ((mt_retrain_enable == 0) && (mt_fffb == 0))
	    return;

	 /*   return if %E0 and in DIRECT mode    */
	 if ((mt_retrain_enable == 0) && (mt_direct_mode == 1))
	    return;

	 /*   return if not V32.  DSP handles V22 mode   */
/*	 if (!chk_if_v32_line_mode())
	    return;
*/ /* ramn 3/5/96 */


	/* if the timer has not expired then do not check the signal quality*/
	 if(!sig_chk_timer)
	 {
		sig_chk_timer = 50; 		/* timer is for 500ms */
	 	temp = sample_quality();
	 }
	 else
		return;

	 if ((line_mode == 17) || (line_mode == 18 ))
	 {
		if(*sync_loss >= 5)
			temp =TLQ_MSE_POOR;	
		else if((mt_fffb == 0) && (mt_retrain_enable == 1) && (*sig_quality >= RETRAIN_ENABLE_LEVEL))
			temp = TLQ_MSE_POOR;
		else if (*sig_quality >= NORMALIZED_LOW_LEVEL)
			temp = TLQ_MSE_POOR;
		else if (*sig_quality <= NORMALIZED_HIGH_LEVEL)
			temp = TLQ_MSE_GOOD;
		else
			temp = TLQ_MSE_FAIR;
	 }

	 /*   based retrain decision on mean square error   */
	 switch(temp)
	 {

	    case (TLQ_MSE_GOOD):
	    {
		  /*   set mse poor timer and mse invalid timer inactive   */
		  mse_poor_timer = 0;
		  mse_invalid_timer = 0;

/*		  if ((mt_fffb == 0) || (fall_frwd_en == 0))*/

		  /*   return if %G0 */
		  if(mt_fffb == 0)
		  	return;

/*mrm31096*/

		  if((mse_good_timer == 1) && (!fall_frwd_attempt))
		  {
	 			if ((line_mode == 17) || (line_mode == 18 ))
	 			{

					/*   	Retain the current line rate    */
		   		curr_line_speed = get_receiver_speed();
					if(mt_conn_orig)		/* ramn 11/21/96 */
						curr_line_speed = answerch;
					else
						curr_line_speed = callch;
	


					/* this the speed of this connection is same as the last
						do not reneg. the remote may be clamped.

						if not the same reneg but remember the previous speed  
						ramn 3/14/96 */
					if(curr_line_speed == spd_of_prv_conn_up)
						return;
					else
						spd_of_prv_conn_up = curr_line_speed;

					max_conn_speed = get_s37_baud();	/* set default at v32bis ie 14.4 */
					if((max_conn_speed == MT_BPS57600) ||
            	(max_conn_speed == MT_BPS115200) ||
            	(max_conn_speed == MT_BPS38400))
               max_conn_speed = MT_BPS28800;

					/* line speed was 19.2 then bump up 21.6 */
					if((curr_line_speed < max_conn_speed) && (curr_line_speed == MT_BPS19200))
						bit_rate = curr_line_speed + 5;
					else if(curr_line_speed < max_conn_speed)
						bit_rate = curr_line_speed + 1;		
					else
						return;
			
					dsp_mode = modem_mode;

					current_command[4] = 0;  /* ramn 3/5/96 */
					current_command[5] = 0;
					LOAD_MODEM_RENEGOTIATE
					ack_or_response = ACK;
		  			send_pkt_to_dsp();
     PrintIt( "RENEG in test_line_quality()" );

					fall_frwd_attempt = TRUE;			/* ramn 3/14/96 */
						/*   INIT RATE RENEGOTIATE STATE HERE   */
					mt_renegotiate();
						}
				else
				{
 		   		retrain_timer = V32BIS_RETRAIN_TIME_LIMIT;
					fall_frwd_attempt = TRUE;

					/*   INIT RATE RENEGOTIATE STATE HERE   */
					mt_renegotiate();
				}

			return;
		  }

		  /*   initialize mse_good_timer with threshold   */
		  if (mse_good_timer == 0)
			mse_good_timer = MSE_GOOD_TIME_FAST_THRESH;

		  /*   return if good timer is active but not expired   */
		  return;
	    }


	    case (TLQ_MSE_FAIR):
	    {
		  /*   put all timers in their inactive state   */
		  mse_good_timer = 0;
		  mse_poor_timer = 0;
		  mse_invalid_timer = 0;
		  return;
	    }

	    case (TLQ_MSE_POOR):
	    {
		  mse_good_timer = 0;
		  mse_invalid_timer = 0;

#if 0
		  /*   check for mse_poor_timer and retrain/renegotiate  */
		  if((mt_fffb == 0) && (mt_retrain_enable == 1) && (!retrain_started))
		  {	
			 if((*sync_loss >= 5) || (*sig_quality >= RETRAIN_ENABLE_LEVEL))
			 {
	   		 if (mse_poor_timer == 0)
				 {
				 	 /* if retrain & reneg is disabled timer for 10s */
					 mse_poor_timer = MSE_POOR_TIME_THRESH;
					 return;
				 }	
	   		 else if (mse_poor_timer == 1)
				 	tlq_mse_poor_invalid();
			 }
			 else
				mse_poor_timer = 0; /* reset poor timer */
		  }
		  else
#endif
	  	  	tlq_mse_poor_invalid();
		

		  return;
	    }

	/* right now this is done only for v32 */
	    case (TLQ_MSE_INVALID):
	    {
		  /*   branch if %E0  (Treat as if MSE poor)   */
		  if (mt_retrain_enable == 0)
		  {
			tlq_mse_poor_invalid();
			return;
		  }

		  /*   set mse_good_timer to its inactive state   */
		  mse_good_timer = 0;

		  /*   retrain if mse has been invalid long enough   */
		  if (mse_invalid_timer == 1)
		  {
			mt_retrain();
			return;
		  }

		  /*   initialize mse invalid timer   */
		  if (mse_invalid_timer == 0)
			mse_invalid_timer = MSE_INVALID_TIME_THRESH;
			/*   now go look at poor timer   */

		  /*   treat as poor if invalid timer is active but not expired   */
		  tlq_mse_poor_invalid();
		  return;

	    }
	 }

}



/*******************************************************************************
/
/    Procedure:     tlq_mse_poor_invalid
/
/    Author:   RSA
/
/    Creation Date: 09/01/94
/
/    Description:   This routine checks the poor timer and
/                       retrains/renegotiates if timed out
/
/    Input Parameters: None
/
/    Output Parameter: None
/
/    Global Variables Changed: None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/

void tlq_mse_poor_invalid(void)

{
	ubyte *temp,curr_line_speed;

   /*   branch if mse has been bad long enough   */
	curr_line_speed = get_receiver_speed();

	if(mt_conn_orig)		/* ramn 11/21/96 */
		curr_line_speed = answerch;
	else
		curr_line_speed = callch;
	


   if (mse_poor_timer == 1)
   {
		 /*   branch if %G0 (%En must be 1)   */
		 /*   if direct, cannot change speeds; retrain   */
		 /* if line speed already at minimum then retrain */
		 if ((mt_fffb == 0) || (mt_direct_mode) || (curr_line_speed == ms_min_rate))
		 {
			 if(retrain_started)
				return;

			 /* drop if retrain and reneg were disabled and not direct mode */
			 else if ((mt_retrain_enable == 0) && (!mt_direct_mode) && (mt_fffb == 0))
			 {
PrintIt( "DROP1" );
				mt_drop(1);
				return;	
			 }	
			 else
			 {
#if 0
				 retrain_started = 1;
				 LOAD_MODEM_RETRAIN
				 ack_or_response = ACK;
				 send_pkt_to_dsp();
				 temp = (ubyte *)(COM_RAM); 
				 *temp = 0x00;
				 retrain_timer = TIME_FOR_RETRAIN;
#endif			 
			    mt_retrain();
			    return;
			 }
		 }
	
#if 0
		 /*   return if fall back is disabled   */
		 if (fall_back_en == 0)
		    return;
	
		 /*   cannot fall back if less than 7200   */
			 get_receiver_speed();
		 if (line_bit_rate < MT_BPS7200)
		    return;
	
#endif		 /* ramn 3/5/96 */
	
		if(fall_back_attempt)
			return;
		else
		{

			/* this the speed of this connection is same as the last
				do not reneg. the remote may be clamped 
				if not the same reneg but remember the previous speed  
				ramn 3/14/96 */
			if(curr_line_speed == spd_of_prv_conn_dn)
				return;
			else
				spd_of_prv_conn_dn = curr_line_speed;


			/* line speed was 21.6 then bump down to 19.2 */
			if(curr_line_speed == MT_BPS21600) 			
				bit_rate = curr_line_speed - 5;
			else if(curr_line_speed > ms_min_rate)     
				bit_rate = curr_line_speed - 1;		
			else
				return;
			
			dsp_mode = modem_mode;
	
	
			current_command[4] = 0;  /* ramn 3/5/96 */
			current_command[5] = 0;
			LOAD_MODEM_RENEGOTIATE
			ack_or_response = ACK;
			send_pkt_to_dsp();
     PrintIt( "RENEG in tlq_mse_poor_invalid()" );
	
			 /*   indicate that a fall back attempt is under way   */
	
			 fall_back_attempt = TRUE;
			 mt_renegotiate();
		    retrain_timer = V32BIS_RETRAIN_TIME_LIMIT;

		}	
   }

   /*   set timer to threshold    */
   else if (mse_poor_timer == 0)
	{
	  /* if retrain & reneg is disabled timer for 10s */
		if ((mt_retrain == 0) && (mt_fffb == 0))	
			mse_poor_timer = NO_RETRAIN_HANGUP_TIME;
		else								  /* if not timer for 5 sec */
		 mse_poor_timer = MSE_POOR_TIME_THRESH;
	}

   return;

}



/*******************************************************************************
/
/    Procedure:     chk_if_v32_line_mode
/
/    Author:   RSA
/
/    Creation Date: 05/03/93
/
/    Description:   This routine checks the conditional to determine
/              if the variable line_mode is equal to V.32bis.
/
/    Input Parameters: None
/
/    Output Parameter: None
/
/    Global Variables Changed: None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
ubyte chk_if_v32_line_mode(void)
{
    /*   MERLIN only returns V32_BIS for all "V32s"   */
    if (line_mode == MT_V32BIS)
	  return(TRUE);
    else
	  return(FALSE);
}




/*******************************************************************************
/
/    Procedure:     rrs_set_acu_online
/
/    Author:   RSA
/
/    Creation Date: 09/10/94
/
/    Description:   This routine resets fallforward attempt and
/                       fall back attempt.
/
/    Input Parameters: None
/
/    Output Parameter: None
/
/    Global Variables Changed: None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/

void rrs_set_acu_online(void)

{
   /*   reset fall forwards attempt bits for next retrain attempt   */
   fall_frwd_attempt = FALSE;
   fall_back_attempt = FALSE;

   /*   exit to online  */
   modem_state = CON;

}



/*******************************************************************************
/
/    Procedure:     determine_fall_back_en
/
/    Author:   RSA
/
/    Creation Date: 09/10/94
/
/    Description:   This routine will determine if fall back will
/                       be allowed.  If at lowest possible speed already,
/                       it will not.
/
/    Input Parameters: None
/
/    Output Parameter: None
/
/    Global Variables Changed: None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/

void determine_fall_back_en(void)

{
   ubyte min_rate;

   /*   find minimum rate allowed for renegotiating   */
   if (possible_rates & POSS_48_BIT)
	 min_rate = MT_BPS4800;

   else if (possible_rates & POSS_72_BIT)
	 min_rate = MT_BPS7200;

   else if (possible_rates & POSS_96_BIT)
	 min_rate = MT_BPS9600;

   else if (possible_rates & POSS_120_BIT)
	 min_rate = MT_BPS12000;

   else
	 min_rate = MT_BPS14400;

   /*   compare new line rate with min line rate   */
   if (min_rate == line_bit_rate)
	 /*   no longer attempt to fall back   */
	 fall_back_en = FALSE;
   else
	 fall_back_en = TRUE;

}


/*******************************************************************************
/
/                           retrain_processor
/
/       Author:         RSA
/
/       Creation Date:  09/01/94
/
/       Description:    This routine will process the retrain state machine.
/                       It is called during the RETRAIN state and returns
/                       non-zero values when state transitions are required.
/
/       Input Parameters:       None
/
/       Output Parameter:       None
/
/       Global Variables Changed:       retrain_timer
/
/       Users: (routines that used this)   modem_task
/
/       *****************************************************************
/       *                         Modifications                         *
/       *****************************************************************
/
*******************************************************************************/
void retrain_processor(void)
{
	ubyte *temp;

   switch (rtrn_state)
   {

	 case (INITIATE):          /*   initialize retraining processing   */

	    break;

	 case (RETRAIN_DP):
	    /*   check for expired retrain timer   */
	    if (retrain_timer == 1)
	    {
			/* if s10 not disabled drop line */
			if((retrain_started) && (acu_cd_loss_time != 0xFF)) 
			{
PrintIt( "DROP2" );
			  mt_drop(1);
			  return;
			}
			else if ((fall_back_attempt) || (fall_frwd_attempt)) /* reneg failed then retrain */
			{
#if 0
				 retrain_started = 1;
				 LOAD_MODEM_RETRAIN
				 ack_or_response = ACK;
				 send_pkt_to_dsp();
				 temp = (ubyte *)(COM_RAM); 
				 *temp = 0x00;
				 retrain_timer = V32BIS_RETRAIN_TIME_LIMIT;
#endif	  
				 /*sq_timer = 1600;*/
			    mt_retrain();
			    return;
			}
	    }

	    /*   return if still retraining   */
	    else if (modem_status == RETRAINING)
		  return;

	    else if ((drop_flag == TRUE) && (modem_status == IDLE)) /* ramn 3/16/96 */
	    {
		  /*mt_drop(0);*/
			modem_state = DROP1;
		  return;
	    }


	    else if ((modem_status == CONNECTED) || (modem_status == REMOTE_TEST))
		  	rtrn_state = RATE_RENEG_FINISHED;
	    return;
	    break;

	 case (RATE_RENEG_FINISHED):

	    /*   set all timers to inactive   */
	    mse_good_timer = 0;
	    mse_poor_timer = 0;
	    mse_invalid_timer = 0;

		 retrain_started = FALSE;
		 retrain_timer = 0;

	    /*   can line rate change:   */
	    /*   ACU does check for bps adjust and in direct mode   */

	    rrs_set_acu_online();

/* RJM111296 */
/* V80 support */
       V80_modem_state_ind(modem_status,line_bit_rate,line_bit_rate);
   }
}



#if 0 /* ramn 3/5/96 */
   ubyte max_rate;

   switch (rtrn_state)
   {

	 case (INITIATE):          /*   initialize retraining processing   */

	    /*   Retain the current line rate    */
	    get_receiver_speed();
	    curr_line_speed = line_bit_rate;

	    if (send_renegot)
	    {
		  /*   initialize retrain timer with renegotiate limit  */
		  retrain_timer = RATE_RENEG_TIME_LIMIT;
		  /*
		  current_command [0] = PACKET_MODEM_RENEGOTIATE;
		  current_command [1] = 0x00;
		  current_command [2] = PACKET_MODEM_RENEGOTIATE_LEN;
		  current_command [3] = 0x00;
		  while (error_occured = cp_dsp());
		  while (error_occured = dsp_acknowledge_packet());     
		  */
		  
		  LOAD_MODEM_RENEGOTIATE
		  ack_or_response = ACK;
		  send_pkt_to_dsp();

	    }
	    else
	    {
		  /*   Initialize retrain timer   */
		  retrain_timer = V32BIS_RETRAIN_TIME_LIMIT;
		  
		  /*
		  current_command [0] = PACKET_MODEM_RETRAIN;
		  current_command [1] = 0x00;
		  current_command [2] = PACKET_MODEM_RETRAIN_LEN;
		  current_command [3] = 0x00;
		  while (error_occured = cp_dsp());
		  while (error_occured = dsp_acknowledge_packet());     
		  */

		  LOAD_MODEM_RETRAIN
		  ack_or_response = ACK;
		  send_pkt_to_dsp();

	    }

	    rtrn_state = RETRAIN_DP;

	    break;


	 case (RETRAIN_DP):

	    /*   check for expired retrain timer   */
	    if (retrain_timer == 1)
	    {
PrintIt( "DROP3" );
		  mt_drop(1);
		  return;
	    }

	    /*   return if still retraining   */
	    else if (modem_status == RETRAINING)
		  return;

	    else if (modem_status == IDLE)
	    {
PrintIt( "DROP4" );
		  mt_drop(0);
		  return;
	    }

	    else if ((modem_status == CONNECTED) || (modem_status == REMOTE_TEST))
		  rtrn_state = RATE_RENEG_FINISHED;

	    return;
	    break;

	 case (RATE_RENEG_FINISHED):

	    /*   set all timers to inactive   */
	    mse_good_timer = 0;
	    mse_poor_timer = 0;
	    mse_invalid_timer = 0;

	    get_receiver_speed();

	    /*   compare old line rate with new line rate   */
	    if (curr_line_speed == line_bit_rate)
	    {
		  /*   line rate same   */
		  /*   see if fall frwd was attempted   */
		  if (fall_frwd_attempt)
			/*   clear fall_frwd_en so that fall forwards will not be attempted   */
			fall_frwd_en = FALSE;
		  
		  /*   see if fall back was attempted   */
		  else if (fall_back_attempt)
			/*   clear bit so that fall back will not be attempted   */
			fall_back_en = FALSE;

	    }    /*   line rate changed   */
	    else if (line_bit_rate < curr_line_speed)
	    {
		  /*   rate changed down.  see if originated locally   */
		  if (fall_back_attempt)
			/*   enabled fall forward   */
			fall_frwd_en = TRUE;
		  else
			/*   disable forward (peer trained us down)   */
			fall_frwd_en = FALSE;

		  determine_fall_back_en();

	    }

	    else
		  /*   rate changed up   */
	    {
		  /*   set fall_back_en so fall back can be attempted if %G1   */
		  fall_back_en = TRUE;

		  /*   find maximum rate allowed for renegotiating   */
		  if (possible_rates & POSS_144_BIT)
			max_rate = MT_BPS14400;

		  else if (possible_rates & POSS_120_BIT)
			max_rate = MT_BPS12000;

		  else if (possible_rates & POSS_96_BIT)
			max_rate = MT_BPS9600;

		  else if (possible_rates & POSS_72_BIT)
			max_rate = MT_BPS7200;

		  else
			max_rate = MT_BPS4800;

		  /*   compare new line rate with max line rate   */
		  if (max_rate == line_bit_rate)
			/*   no longer attempt to fall forward   */
			fall_frwd_en = FALSE;

	    }

	    /*   can line rate change:   */
	    /*   ACU does check for bps adjust and in direct mode   */

	    rrs_set_acu_online();

   }
}

#endif
