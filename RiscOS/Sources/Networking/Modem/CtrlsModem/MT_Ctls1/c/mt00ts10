/******************************************************************************
/
/     Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994. All Rights Reserved by:
/           RSA
/           7701 Six Forks Road
/           Suite 120
/           Raleigh, NC  27615
/           (919) 846-7171
/
/       This document contains material confidential to RSA.
/       Its contents must not be revealed, used or disclosed to
/       anyone or company with out written permission by RSA.
/       The information contained herein is solely for the use
/       of RSA.
/
/       File:           mt00ts10.c
/
/       Version:        1.00
/
/       Function:       Supporting Library Routines for Test Loops
/
/       Product:        Modem Task Driver for the Merlin Chip Sets
/
/       History:        mt00ts08.c v1.00
/
/       Created: 3/01/94
/
/           ------------------------------------------------------
/           -                Modifications                       -
/           ------------------------------------------------------
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/

#include  "SYS_DEF.H"
#include  "cp_dsp.h"
#include  "MT_CODEF.H"
#include  "MT_HWDEF.H"
#include  "MT_COPRO.H"
#include  "MT_HWPRO.H"
#include  "MT_COEXT.H"
#include  "mt_macro.h"

void rdl_enable(ubyte);
void send_rdl_request(void);
ubyte check_received_RDL(void);
void set_digital_loopback(ubyte);
void send_rdl_release(void);
void alb(ubyte,ubyte,ubyte);
void check_rdl(void);
void dp_start_selftest(void);
ubyte dp_stop_selftest(void);
void check_rdl(void);


/*******************************************************************************
/
/                                  rdl_enable
/
/       Author:         RSA
/
/       Creation Date:  03/01/94
/
/       Description:    This routine will allow the modem to respond to a
/                       Remote Digital Loopback request signal.
/
/       Input Parameters:       state = 1 - allow RDL request
/                                       0 - ignore RDL req
/
/       Output Parameter:       None
/
/       Global Variables Changed:
/
/       Users: (routines that used this)  modem_rdl_enable
/
/       *****************************************************************
/       *                         Modifications                         *
/       *****************************************************************
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/

void rdl_enable(ubyte state)

{
   /*
   ubyte error_occured;
   current_command [0] = PACKET_MODEM_RDL_ENABLE;
   current_command [1] = 0x00;
   current_command [2] = PACKET_MODEM_RDL_ENABLE_LEN;
   current_command [3] = 0x00;
   current_command [4] = state;
   while (error_occured = cp_dsp());
   while (error_occured = dsp_acknowledge_packet());
   */
   LOAD_MODEM_RDL_ENABLE
   ack_or_response = ACK;
   send_pkt_to_dsp();


}



/*******************************************************************************
/
/                                 send_rdl_request
/
/       Author:         RSA
/
/       Creation Date:  03/01/94
/
/       Description:    This routine will request the modem to send the Remote
/                       Digital Loopback request signal.
/
/       Input Parameters:       None
/
/       Output Parameter:       None
/
/       Global Variables Changed:
/
/       Users: (routines that used this)  modem_send_rdl_request
/
/       *****************************************************************
/       *                         Modifications                         *
/       *****************************************************************
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
void send_rdl_request(void)
{
   /*
   ubyte error_occured;
   current_command [0] = PACKET_MODEM_SEND_RDL_REQUEST;
   current_command [1] = 0x00;
   current_command [2] = PACKET_MODEM_SEND_RDL_REQUEST_LEN;
   current_command [3] = 0x00;
   while (error_occured = cp_dsp());
   while (error_occured = dsp_acknowledge_packet());
   */

   /* needs to be tested */
   /*mrm101295*/
   #if 0
   LOAD_MODEM_SEND_RDL_REQUEST
   ack_or_response = ACK;
   send_pkt_to_dsp();

   check_RDL_flag=TRUE;

   #endif
}


/*******************************************************************************
/
/                               check_received_RDL
/
/       Author:         RSA
/
/       Creation Date:  03/01/94
/
/       Description:    This routine will return the current state of Remote
/                       Digital Loopback.
/
/       Input Parameters:       None
/
/       Output Parameter:       0 = RDL not received
/                               1 = RDL received
/
/       Global Variables Changed:       None
/
/       Users: (routines that used this)   modem_received_RDL
/
/       *****************************************************************
/       *                         Modifications                         *
/       *****************************************************************
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
ubyte check_received_RDL(void)
{
   return(received_RDL);
}


/*******************************************************************************
/
/                           set_digital_loopback
/
/       Author:         RSA
/
/       Creation Date:  03/01/94
/
/       Description:    This routine will set the DP's locally activated
/                       remote digital loopback ON or OFF.
/
/       Input Parameters:       ON
/                               OFF
/
/       Output Parameter:       None
/
/       Global Variables Changed:
/
/       Users: (routines that used this)    modem_digital_loopback
/                                           check_rdldet
/
/       *****************************************************************
/       *                         Modifications                         *
/       *****************************************************************
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
void set_digital_loopback(ubyte state)
{
   /*
   ubyte error_occured;
   digital_loopback_on = state;
   current_command [0] = PACKET_MODEM_DIGITAL_LOOPBACK;
   current_command [1] = 0x00;
   current_command [2] = PACKET_MODEM_DIGITAL_LOOPBACK_LEN;
   current_command [3] = 0x00;
   current_command [4] = state;
   while (error_occured = cp_dsp());
   while (error_occured = dsp_acknowledge_packet());
   */

   digital_loopback_on = state;

   /* needs to be tested */
   /*mrm101295*/

   #if 0
   LOAD_MODEM_DIGITAL_LOOPBACK
   ack_or_response = ACK;
   send_pkt_to_dsp();
   #endif


}


/*******************************************************************************
/
/                           send_rdl_release
/
/       Author:         RSA
/
/       Creation Date:  03/01/94
/
/       Description:    This routine will send a release signal to the modem
/                       to terminate remote digital loopback test.
/
/       Input Parameters:       None
/
/       Output Parameter:       None
/
/       Global Variables Changed:       modem_status
/
/       Users: (routines that used this)   paged_modem_send_rdl_release
/                                          paged_modem_send_rdl_request
/
/       *****************************************************************
/       *                         Modifications                         *
/       *****************************************************************
/
/       Author & Date:
/       Description:
/       Reason:
*******************************************************************************/
void send_rdl_release(void)
{
   /*
   ubyte error_occured;
   current_command [0] = PACKET_MODEM_SEND_RDL_RELEASE;
   current_command [1] = 0x00;
   current_command [2] = PACKET_MODEM_SEND_RDL_RELEASE_LEN;
   current_command [3] = 0x00;
   while (error_occured = cp_dsp());
   while (error_occured = dsp_acknowledge_packet());
   */

   /* needs to be tested */
   /*mrm101295*/
   #if 0

   LOAD_MODEM_SEND_RDL_RELEASE
   ack_or_response = ACK;
   send_pkt_to_dsp();

   #endif

   check_RDL_flag=FALSE;


}


/*******************************************************************************
/
/                                alb
/
/       Author:         RSA
/
/       Creation Date:  03/01/94
/
/       Description:    This routine will configure the modem to execute an
/                       Analog Loopback test. It will update modem_state to CON.
/                       Note: This procedure will not work if in ONLINE
/                       command mode.
/
/       Input Parameters:       ao = 0 - answer mode
/                                    1 - originate mode
/
/                     bit rate: 0 = 75/600 bps
/                               1 = 75/1200 bps
/                               2 = 300 bps
/                               3 = 1200 bps
/                               4 = 2400 bps
/                               5 = 4800 bps
/                               6 = 7200 bps
/                               7 = 9600 bps
/                               8 = 12000 bps
/                               9 = 14400 bps
/                              10 = 16800 bps
/                              11 = 19200 bps
/                              12 = 38400 bps
/                              13 = 57600 bps
/                              14 = 600 bps
/
/           configuration mode: 0 = Bell 103
/                               1 = Bell 212A
/                               2 = V.21
/                               3 = V.21 Channel 2
/                               4 = V.23 ADX
/                               5 = V.23 HDX
/                               6 = V.22
/                               7 = V.22bis
/                               8 = V.27 short
/                               9 = V.27 long
/                               10 = V.27 ter
/                               11 = V.29
/                               12 = V.32
/                               13 = V.32 TMC
/                               14 = V.17
/                               15 = V.33
/                               16 = V.32bis
/
/       Output Parameter:       None
/
/       Global Variables Changed:       modem_status
/
/       Users: (routines that used this) modem_alb
/
/       *****************************************************************
/       *                         Modifications                         *
/       *****************************************************************
/
*******************************************************************************/
void alb(ubyte ao, ubyte bit_rate, ubyte config_mode)
{

    ubyte dsp_mode, trellis;


/*mrm22096*/

/*donot force the ALB to v32bis mode*/

#if 0
   if (config_mode > MT_V22BIS)
      dsp_mode = 0x0C;
   else
      dsp_mode = config_mode;
#endif

/*mrm3196*/
      dsp_mode = config_mode;



   if (config_mode == MT_V32)
      trellis = 1;
   else
      trellis = 0;

   /*
   current_command [0] = PACKET_MODEM_ALB;
   current_command [1] = 0x00;
   current_command [2] = PACKET_MODEM_ALB_LEN;
   current_command [3] = 0x00;
   current_command [4] = bit_rate;
   current_command [5] = dsp_mode;
   current_command [6] = ao << 2;
   while (error_occured = cp_dsp());
   while (error_occured = dsp_acknowledge_packet());
   */

   LOAD_MODEM_ALB
   ack_or_response = ACK;
   send_pkt_to_dsp();

   modem_state = CON;


   #if 0
   packetize_parameter(bit_rate, CONNECT_BIT_RATE_BYTE, CONNECT_BIT_RATE_START_BIT);
   packetize_parameter(dsp_mode, CONFIG_MODE_BYTE, CONFIG_MODE_START_BIT);

   packetize_parameter(0, CLOCK_SOURCE_BYTE, CLOCK_SOURCE_START_BIT);
   packetize_parameter(0, CHANNEL_BYTE, CHANNEL_START_BIT);
   packetize_parameter(0, AUTOMODE_BYTE, AUTOMODE_START_BIT);
   packetize_parameter(0, FAX_CONN_TYPE_BYTE, FAX_CONN_START_BIT);

   packetize_parameter(0, V22SQ_RETRAIN_BYTE, V22SQ_RETRAIN_START_BIT);

   packetize_parameter(trellis, TRELLIS_BYTE, TRELLIS_DISABLE_START_BIT);
   packetize_parameter(0, CALLING_TONE_BYTE, CALLING_TONE_START_BIT);
   #endif



}



/*******************************************************************************
/
/                                dp_start_selftest
/
/       Author:         RSA
/
/       Creation Date:  03/01/94
/
/       Description:
/
/       Input Parameters:
/
/       Output Parameter:
/
/       Global Variables Changed:
/
/       Users: (routines that used this)
/
/       *****************************************************************
/       *                         Modifications                         *
/       *****************************************************************
/
*******************************************************************************/
void dp_start_selftest(void)
{

}


/*******************************************************************************
/
/                                dp_stop_selftest
/
/       Author:         RSA
/
/       Creation Date:  03/01/94
/
/       Description:
/
/       Input Parameters:
/       Output Parameter:
/
/       Global Variables Changed:
/
/       Users: (routines that used this)
/
/       *****************************************************************
/       *                         Modifications                         *
/       *****************************************************************
/
*******************************************************************************/
ubyte dp_stop_selftest(void)
{
   return (0);
}

/*******************************************************************************
/
/       check_rdl
/
/       Author:         RSA
/
/       Creation Date:  10/01/94
/
/       Description:   checks rdl bit from DSP when necessary
/
/       Input Parameters:   None
/
/       Output Parameter:   None
/
/       Global Variables Changed:
/
/       Users: (routines that used this)
/
/       *****************************************************************
/       *                         Modifications                         *
/       *****************************************************************
/
*******************************************************************************/

void check_rdl(void)

{

   if ((check_RDL_flag) && (read_dsp_modem_status_reg() & RECEIVED_RDL_MASK))
      received_RDL=TRUE;
   else
      received_RDL=FALSE;

}
