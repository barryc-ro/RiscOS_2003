/******************************************************************************
/
/     Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994. All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to RSA.
/     Its contents must not be revealed, used or disclosed to
/     anyone or company with out written permission by RSA.
/     The information contained herein is solely for the use
/     of RSA.
/
/       File:           mt00io10.c
/
/       Version:        1.00
/
/       Function:       Read/Write Routines to Data Pump
/
/       Product:        Modem Task Driver for the Merlin Chipset
/
/       History:
/
/       Created:        3/01/94
/        ------------------------------------------------------
/        -               Modifications             -
/        ------------------------------------------------------
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/

#include  "SYS_DEF.H"
#include  "cp_dsp.h"
#include  "MT_CODEF.H"
#include  "MT_HWDEF.H"
#include  "MT_COPRO.H"
#include  "MT_HWPRO.H"
#include  "MT_COEXT.H"
#include  "DSP_DRV.H"
#include "mt_macro.h" /* ramn 3/5/96 */
ubyte read_dsp_xmit_status_reg(void);	/*SLei added*/
ubyte read_dsp_modem_status_reg(void);
ubyte read_dsp_call_progress_reg(void);
void packetize_parameter(ubyte, ubyte, ubyte);
ubyte sample_quality(void);

/* RJM040396 */
/* Workaround for Direct COMRAM access */
uword syncloss, sqword;
extern ubyte dsp_response_data[15];

uword *sig_quality,*sync_loss; /* ramn 3/5/96 */
extern uword acu_cd_loss_time;

extern void PrintMsg( byte * );

/*******************************************************************************
/
/                 read_dsp_modem_status_reg
/
/    Author:   RSA
/
/    Creation Date: 02/18/94
/
/    Description:   This routine will read the modem status register
/
/    Input Parameters:
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)   Many places
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
*******************************************************************************/

#ifdef DEBUG
unsigned int last_funny_border;

#define VIDC ((volatile unsigned int *)0x03500000)

void set_border(unsigned int c)
{
    *VIDC = 0x40000000 | c;
    //*VIDC = 0x10000000;
    //*VIDC = c & 0xFFFFFF;
}
#endif

ubyte read_dsp_modem_status_reg(void)
{
   ubyte tmp;

   dspdrv_ReadCram(MODEM_STATUS_REG, &tmp, 1);

   #ifdef DEBUG
   switch (tmp & MODEM_STATUS_MASK)
   {
       extern void set_border(unsigned int c);

       case 0:            set_border(0x000000); break; /* Black */
       case CONNECTING:   set_border(0x00ffff); break; /* Yellow */
       case CONNECTED:    set_border(0x00ff00); break; /* Green */
       case RETRAINING:   set_border(0xffff00); break; /* Cyan */
       case DROPPING:     set_border(0x0000ff); break; /* Red */
       case LOCAL_TEST:   set_border(0xff0000); break; /* Blue */
       case REMOTE_TEST:  set_border(0xff00ff); break; /* Magenta */
       case RENEGOTIATING:set_border(0x80bf00); break; /* Turquoise */
       case FAX_CONNECTING:set_border(0x00bfff); break; /* Orange */
       case FAX_CONNECTED:set_border(0x00a000); break; /* Dark green */
       case VOICE_CONNECTED:set_border(0xffffff); break; /* White */
       default:           last_funny_border = tmp & MODEM_STATUS_MASK;
                          set_border(0x808080); break; /* Grey */
   }
   #endif

   return (tmp);
}


/*******************************************************************************
/
/                 read_dsp_call_progress_reg
/
/    Author:   RSA
/
/    Creation Date: 02/18/94
/
/    Description:   This routine will read the call progress register
/
/    Input Parameters:
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)   Many places
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
*******************************************************************************/

ubyte read_dsp_call_progress_reg(void)
{
   dspdrv_ReadCram(CALL_PROGRESS_REG, &mt_call_progress, 1);
   return (mt_call_progress);
}

/*******************************************************************************
/
/                 read_dsp_xmit_status_reg
/
/    Author:   RSA
/
/    Creation Date: 07/8/95
/
/    Description:   This routine will read the xmit status register
/
/    Input Parameters:
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)   mt00v8v34.c
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
*******************************************************************************/

ubyte read_dsp_xmit_status_reg(void)
{
   ubyte tmp;
   dspdrv_ReadCram(TRANSMIT_STATUS_REG, &tmp, 1);
   return (tmp);
}



/*******************************************************************************
/
/                 packetize_parameter
/
/    Author:   RSA
/
/    Creation Date: 02/18/94
/
/    Description:   This routine will move the parameter data to the
/                 appropriate bit location by shifting left.
/
/    Input Parameters:
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)   Many places
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
*******************************************************************************/
void packetize_parameter(ubyte parameter, ubyte starting_byte, ubyte starting_bit)

{

   /*  Shift parameter to appropriate bit position and OR with any current data  */
   current_command[starting_byte] |= (parameter << starting_bit);

}


/*******************************************************************************
/
/                   sample_quality
/
/    Author:   RSA
/
/    Creation Date: 09/01/94
/
/    Description:   This routine will return the line signal quality.
/
/    Input Parameters: None
/
/    Output Parameter: ubyte MSE - value of the receive mean square error.
/
/                               0 = good
/                               1 = fair
/                               2 = poor
/                               3 = invalid
/
/    Global Variables Changed: None
/
/    Users: test_line_quality()
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
ubyte sample_quality(void)
{
	/* v34 mode chk added by ramn 3/5/96 */
	if ((line_mode == 17) || (line_mode == 18 ))
	{

		LOAD_MODEM_GET_V34_INFO
		dsp_cp_packet = PACKET_DP_V34_INFO;
		ack_or_response = RESPONSE;
		send_pkt_to_dsp();

/* RJM040396 */
/* Direct COMRAM access will not work in Host Based */
#if 0
		sig_quality = (uword * ) V34_SQ_WORD;

		sync_loss = (uword * ) V34_SYNC_WORD;
#else
      /* Convert byte array to platform specific uword format */
		sqword    = (dsp_response_data[3] << 8);
		sqword   |= dsp_response_data[2];
		syncloss  = (dsp_response_data[5] << 8);
		syncloss |= dsp_response_data[4];

      /* Global; vars now point to internally formatted uword data */
		sig_quality = &sqword;
      sync_loss = &syncloss;
#endif

		ack_or_response = ACK;
		return(1);
	}
	else
	{
	/* this if statement added by ramn 8/1/96 */
		if(modem_status == RETRAINING)
		{
			if(retrain_timer == 0)
			{
			 	retrain_timer = V32BIS_RETRAIN_TIME_LIMIT;
				return(TLQ_MSE_FAIR);
			}
			else if(retrain_timer == 1)
			{
				if(acu_cd_loss_time != 0xFF)
				{
PrintMsg( "DROP5" );
				  mt_drop(0);
				}
				return(TLQ_MSE_FAIR);
			}
			else
				return(TLQ_MSE_FAIR);

		}
		else
		{
		   dspdrv_ReadCram(SIGNAL_QUALITY_REG, &mt_quality, 1);
		  	mt_quality = ((mt_quality & TLQ_MSE_MASK) >> 3);
	   	return (mt_quality);
		}
	}
}





