/*********************************************************************
/
/    Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC 27615
/        (919) 846-7171
/
/    This document contains material confidential to RSA.
/    Its contents must not be revealed, used or disclosed to
/    anyone or company with out written permession by RSA.
/    The information contained herein is solely for the use of RSA.
/
/    File: mt00vv10.c
/
/    Version:  1.00
/
/    Function: Modem Task VoiceView routines
/
/    Product:  Cutlass / Musket
/
/    History:
/
/        Created: 12/11/95
/
/        ----------------------------
/        -    Modifications       -
/        ----------------------------
/
/        Author & Date: RSA
/        Description:
/        Reason:
/
*********************************************************************/

#include "SYS_DEF.H"
#include "MT_CODEF.H"
#include "MT_COEXT.H"
#include "MT_COPRO.H"
#include "vcv_def.h"
#include "vcv_mem.h"
#include "acu_vcv.h"
#include "mt_voice.h"
#include "dsp_drv.h"
#include "cp_dsp.h"
#include "mt_macro.h"

/* Constants */
#define WAITING_FOR_ANSWER_START    1
#define WAITING_FOR_ANSWER_STOP     2
#define ANSWER_TONE_FOUND           3

/* Local Prototypes */
void modem_vcv_config_starttone(void);
void modem_vcv_config_adsicas(void);
void modem_vcv_configure_tone_rx(ubyte tone);
void modem_config_vcv(ubyte mode, ubyte speed);
void modem_init_vcv_call_progress(ubyte type);
void modem_voiceview_answtone(ubyte state);
void modem_vcv_transmitter(ubyte state);
void modem_vcv_timer_delay(uword delay_time);
void modem_isolate_handset(ubyte state);
void modem_vcv_td_relay(ubyte type);

ubyte modem_vcv_check_CD();
ubyte modem_vcv_call_progress(void);
ubyte modem_handset_hook(void);
ubyte read_tone_detection_reg (void);
void set_rts (ubyte state);
void check_tone_state (void);
void fax_rts_off (void);

/* External function prototypes */
extern void dp_send_dual_tone (uword frequency1, uword frequency2, ubyte state);
extern void dp_set_dtmf_levels (ubyte level1, ubyte level2);
extern void dp_monitor_vcv_answ_tone (void);
extern void vcv_tone_handler (void);


extern void init_call_progress(ubyte);



/* Global variables */
uword vv_atone_detc;        /* Detector debounce control */
ubyte mt_vv_cp_state;
ubyte last_tone_state = 0;
ubyte tone_configured = NO_TONE;
ubyte current_tone_state = 0;
ubyte last_phone_state = 0;

/* External variables */
extern uword modem_1ms_timer;
extern ubyte current_hardware_state;

extern ubyte vcv_current_hispeed;
extern ubyte mt_major_dsp_ver;

/*******************************************************************************
/
/   Routine: modem_config_vcv
/
/   Author: RSA
/
/   Creation Date: 10/12/94
/
/   Description: Configures data pump for tx or rx.
/
/   Input Parameters: ubyte mode - TRANSMIT_MODE (1) or RECEIVE_MODE (0)
/                     ubyte speed
/
/   Output Parameters: none
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                    -
/   -------------------------------------------------------------
/
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
void modem_config_vcv(ubyte direction, ubyte speed)
{
   ubyte modulation;

   /* Since VCV protocol assumes Rockwell data pump,
      convert speed parameter to modulation value expected by Cutlass DSP. */
   switch (speed)
   {
     /* VCV constant */  /* Cutlass parameter */
     case V21CH2:        modulation=3;      break;
     case V27TER_4800:   modulation=48;     break;
     case V29_9600:      modulation=96;     break;
     case V29_4800:      modulation=96;     break;  /* No MT Match! */
     case V17_7200:      modulation=73;     break;
     case V17_9600:      modulation=97;     break;
     case V17_12000:     modulation=121;    break;

     case V17_14400:
     default:            modulation=145;    break;
   }

   mt_fax_configure(modulation, direction);

/* RJM042696 */
   modem_state = VOICE_CON;

   if( direction == 1 )
      while( get_cts() == OFF )
         process_timers();
}


/*******************************************************************************
/
/    ROUTINE:  modem_vcv_configure_tone_rx
/
/    This routine will configure the data pump for answer mode.
/
/    PARAMETERS IN: none
/
/    PARAMETERS OUT: none
/
/        ----------------------------
/        -    Modifications       -
/        ----------------------------
/
/        Author & Date: RSA
/        Description:
/        Reason:
/
*******************************************************************************/
void modem_vcv_configure_tone_rx(ubyte tone)
{
  last_tone_state = 0;      /* Set last state as SILENCE */

   switch (tone) {
       case STARTTONE: {
           /* Send voice init mode packet to tell DSP to configure
              its filters for Start Tone.   */
           dp_voice_init_mode (MODE_VCV_PHONE_MONITOR_START);
           tone_configured = STARTTONE;
           break;
       }

       case ADSI_CAS: {
           /* Send voice init mode packet to tell DSP to configure
              its filters for ADSI CAS Tone AND V.21 data. */
           dp_voice_init_mode (MODE_VCV_PHONE_DATA_XFER);
           tone_configured = ADSI_CAS;
           break;
       }

       case VCV_ANSWERTONE: {
           /* Send voice init mode packet to tell DSP to configure
              its filters for VoiceView Answer Tone */
           dp_monitor_vcv_answ_tone ();
           tone_configured = VCV_ANSWERTONE;
           break;
       }

       case NO_TONE:
       default: {
           tone_configured = NO_TONE;
           break;
       }
   }
}


/********************************************************************
/
/    Procedure:      modem_init_vcv_call_progress
/
/    Author:         RSA
/
/    Creation Date:  10/3/95
/
/    Description:    This routine is called by the host to initialize the
/                    VoiceView call progress state machine.
/
/    Input Parameters: (same as standard call_progress())
/                  0 - ON_HOOK
/                  1 - OFF_HOOK_NOT_DIALED
/                  2 - OFF_HOOK_DIALED
/                  3 - ON_LINE
/                  4 - ON_HOOK_NO_RIDET
/
/    Global Variables Changed: mt_vv_cp_state
/
/    Users:
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
********************************************************************/
void modem_init_vcv_call_progress(ubyte type)
{
   vv_atone_detc=0;

   switch (type)
   {
       case OFF_HOOK_DIALED:
           mt_vv_cp_state = 1;
           modem_vcv_configure_tone_rx(VCV_ANSWERTONE);
           break;

       case ON_LINE:
           mt_vv_cp_state = 0;

           /* No need to tell Cutlass to stop monitoring Answer Tone.
              The filters will be reprogrammed when they are needed next. */
           modem_vcv_configure_tone_rx(NO_TONE);
           break;

       /* SD - 2/13/96 - To detect VCV answer tone if telephone dials */
       case OFF_HOOK_NOT_DIALED:
           modem_vcv_configure_tone_rx(STARTTONE);
           break;

       case ON_HOOK:
           modem_vcv_configure_tone_rx(STARTTONE);
           break;

       case ON_HOOK_NO_RIDET:
       default:
           mt_vv_cp_state = 0;
           break;
   }
}


/********************************************************************
/
/    Procedure:      modem_vcv_call_progress
/
/    Author:         RSA
/
/    Creation Date:  10/3/95
/
/    Description:    This routine is called by the host to determine the
/                    call progress status specific to VoiceView
/
/    Input Parameters: None
/
/    Output Parameters: 6 (ANSWER_TONE) - VoiceView Answertone detected
/
/    Global Variables Changed: mt_vv_cp_state,vv_atone_detc
/
/    Users:
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
********************************************************************/
ubyte modem_vcv_call_progress(void)
{
  ubyte tone_status;

  tone_status = read_tone_detection_reg();

   switch (mt_vv_cp_state)
   {
       /* Waiting for (and Debouncing VVAtone) */
       case WAITING_FOR_ANSWER_START:
           if (tone_status & DETECT_BIT_VCV_ANSWER)
           {
               vv_atone_detc++;
           }
           else
               vv_atone_detc=0;

           /* VoiceView spec allows 2-4 SECONDS of VCV Answer Tone.
              Wait for at least 2 seconds. */
           /* if (vv_atone_detc > 200) */
           if (vv_atone_detc > 100)
               mt_vv_cp_state=WAITING_FOR_ANSWER_STOP;
           break;


       /* Waiting for VVAtone to finish */
       case WAITING_FOR_ANSWER_STOP:
           if (tone_status & DETECT_BIT_VCV_ANSWER)
               vv_atone_detc = 0x2;
           else
               vv_atone_detc--;

           if (vv_atone_detc)       /* ??? */
               break;

           mt_vv_cp_state=ANSWER_TONE_FOUND;

           /* Intentionally fall through */

       case ANSWER_TONE_FOUND:
           return ANSWER_TONE;

       /* Doing nothing (idle) */
       case 0:
       default:
           break;
   }

   return UNDETERMINED;
}


/*******************************************************************************
/
/   Routine: modem_vcv_check_CD
/
/   Author: RSA
/
/   Creation Date: 1995
/
/   Description: Checks status of carrier
/
/   Input Parameters: None
/
/   Output Parameters: TRUE - carrier present
/                      FALSE- carrier gone
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                    -
/   -------------------------------------------------------------
/
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
ubyte modem_vcv_check_CD()
{
   /* Read DSP's Carrier Detect bit in the Modem status register. */
   if ( (read_dsp_modem_status_reg() & CHECK_CD_MASK))
   {
     return (1);
   }
   else
   {
     return (0);
   }
}


/*******************************************************************************
/
/   Routine: modem_vcv_timer_delay
/
/   Author: RSA
/
/   Creation Date: 1995
/
/   Description: Waits for a specified time (1ms units), then returns
/
/   Input Parameters: delay_time
/
/   Output Parameters: none
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                    -
/   -------------------------------------------------------------
/
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
void modem_vcv_timer_delay(uword delay_time)
{
   modem_1ms_timer=delay_time;

   while (modem_1ms_timer)
     process_wait ();
}


/********************************************************************
/
/    Procedure:      modem_handset_hook
/
/    Author:         RSA
/
/    Creation Date:  10/3/95
/
/    Description:    This routine is called by the host to determine the
/                    state of the handset hook relay.
/
/    Input Parameters: type:
/                      1 (TRUE)  - ON HOOK
/                      0 (FALSE) - OFF HOOK
/                      0xFF      - Unknown
/
/    Output Parameters: none
/
/    Global Variables Changed: none
/
/    Users:
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
********************************************************************/
ubyte modem_handset_hook(void)
{
  ubyte current_phone_state;

  current_phone_state = get_phone_relay();

  if (current_phone_state != last_phone_state)
  {
    switch (current_hardware_state)
    {
      case MODE_INITIALIZE:
           if (current_phone_state == 1)
             dp_set_hardware_state (MODE_VCV_PHONE_MONITOR_START);
             break;

      case MODE_VCV_HEADSET_MONITOR_START:
           if (current_phone_state == 1)
             dp_set_hardware_state (MODE_VCV_PHONE_MONITOR_START);
           break;

      case MODE_VCV_PHONE_MONITOR_START:
           if (current_phone_state == 0)
             dp_set_hardware_state (MODE_INITIALIZE);
           break;

      default:
           break;
    }

    last_phone_state = current_phone_state;
  }

  return (! current_phone_state);
}


/********************************************************************
/
/    Procedure:      modem_vcv_td_relay
/
/    Author:         RSA
/
/    Creation Date:  10/3/95
/
/    Description:    This routine is called by the host to configure the
/                    Telco relay interface for VoiceView operation
/
/    Input Parameters: type:
/                      0x00 - HANDSET_TO_TELCO
/                      0x01 - DCE_TO_TELCO
/                      0x02 - DCE_AND_HANDSET_TO_TELCO
/
/    Output Parameters: none
/
/    Global Variables Changed: none
/
/    Users:
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
********************************************************************/
void modem_vcv_td_relay(ubyte type)
{
  switch (type)
  {
    /* Telephone emulation mode - data pump not involved */
    case HANDSET_TO_TELCO:
      break;

    /* Data pump to line - downline phone not involved */
    case DCE_TO_TELCO:
      break;

    /* Both downline phone and data pump connected to line.  In
       this case, the user carries on a normal conversation using
       the downline phone, while the data pump listens in for
       start tone.  Receiving a valid start sequence triggers the ACU
       to change to the DCE_TO_TELCO state for data transfer mode. */
    case DCE_AND_HANDSET_TO_TELCO:
      break;
  }
}


/********************************************************************
/
/    Procedure:      modem_isolate_handset
/
/    Author:         RSA
/
/    Creation Date:  10/3/95
/
/    Description:    This routine is called by the host to isolate the
/                    handset from the modem during data links.
/                    Optionally play a "pleasing tone" to the handset.
/
/    Input Parameters: type:
/                      1 (TRUE)  - Isolate
/                      0 (FALSE) - Don't Isolate
/
/    Output Parameters: none
/
/    Global Variables Changed: none
/
/    Users:
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
********************************************************************/
void modem_isolate_handset(ubyte state)
{
  /* Stubbed */
}


/*******************************************************************************
/
/    ROUTINE:  modem_vcv_config_starttone
/
/    This routine sets up the data pump to send a VoiceView start tone.
/
/    PARAMETERS IN: none
/
/    PARAMETERS OUT: none
/
*******************************************************************************/
void modem_vcv_config_starttone(void)
{
   set_rts(OFF);
   dp_send_dual_tone (TONE_START_LOW, TONE_START_HIGH, TONE_START);
}


/*******************************************************************************
/
/    ROUTINE:  modem_vcv_config_adsicas
/
/    This routine sets up the data pump to send an ADSI CAS
/
/    PARAMETERS IN: none
/
/    PARAMETERS OUT: none
/
*******************************************************************************/
void modem_vcv_config_adsicas(void)
{
   set_rts(OFF);
   dp_send_dual_tone (TONE_ADSICAS_LOW, TONE_ADSICAS_HIGH, TONE_START);
   modem_vcv_configure_tone_rx (NO_TONE);
}


/********************************************************************
/
/    Procedure:      modem_voiceview_answtone
/
/    Author:         RSA
/
/    Creation Date:  10/3/95
/
/    Description:    This routine is called by the host to generate/stop
/                    VoiceView answer tone.
/
/    Input Parameters: state - 1 == on
/                              0 ==  off
/
/    Output Parameters: none
/
/    Global Variables Changed: none
/
/    Users:
/
/    -------------------------
/    -     Modifications    -
/    -------------------------
/
/    Author & Date:    RSA
/    Description:
/    Reason:
/
********************************************************************/
void modem_voiceview_answtone(ubyte state)
{
   if (state == ON)
   {
      /* Stop any current tone generation */
      dp_send_dual_tone (TONE_NONE, TONE_NONE, TONE_STOP);
      /* Set up to transmit 628Hz VoiceView answer tone */
      dp_send_dual_tone (TONE_VVANSWER, TONE_NONE, TONE_START);

      /* Make sure that DTMF levels are set to normal */
      set_rts(ON);
   }
   else
   {
      /* Stop tone generation */
      dp_voice_send_tone (TONE_NONE, TONE_NONE, TONE_STOP);
      modem_vcv_configure_tone_rx(STARTTONE);
   }
}


/*******************************************************************************
/
/   Routine: modem_vcv_transmitter
/
/   Author: RSA
/
/   Creation Date: 10/6/94
/
/   Description: This routine will turn on tone transmission
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:
/
/   -------------------------------------------------------------
/   -            Modifications                    -
/   -------------------------------------------------------------
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
void modem_vcv_transmitter(ubyte state)
{
  set_rts (state);

  if (state == OFF)
    fax_rts_off ();
}


/****************************************************************************
 *
 *   Routine:           set_rts()
 *
 *   Author:            RSA
 *
 *   Creation Data:     25/6/1996
 *
 *   Description:
 *
 *   Input Parameters:  ubyte state
 *
 *   Output Parameters: Nothing
 *
 *   Global Variables Changed: None
 *
 *   Users:
 *
 *   -----------------------------------------------------------
 *   -                       Modifications                     -
 *   -----------------------------------------------------------
 *
 *   Author & Date:  RSA
 *   Description:
 *   Reason:
 *
 ****************************************************************************/

void set_rts (ubyte state)
{
  if (state == ON)
  {
	init_call_progress(OFF_HOOK_NOT_DIALED);
    /* Set DTMF levels to the default setting */
    dp_set_dtmf_levels (DTMF_LEVEL_DEFAULT, DTMF_LEVEL_DEFAULT);
  }
  else
  {
    /* Turn off DTMF levels */
	init_call_progress(OFF_HOOK_NOT_DIALED);
    dp_set_dtmf_levels (DTMF_LEVEL_OFF, DTMF_LEVEL_OFF);

    /* Stop any current tone generation */
    dp_send_dual_tone (TONE_NONE, TONE_NONE, TONE_STOP);
  }
}


/*******************************************************************************
/
/                 read_dsp_call_progress_reg
/
/    Author:   RSA
/
/    Creation Date: 02/18/94
/
/    Description:   This routine will read the call progress register
/
/    Input Parameters:   None
/
/    Output Parameter:   ubyte - Current status of tone detect register
/
/    Global Variables Changed:  None
/
/    Users:  modem_vcv_call_progress
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
*******************************************************************************/
ubyte read_tone_detection_reg (void)
{
   ubyte tone_status;

   dspdrv_ReadCram (TONE_DETECT_REG, &tone_status, 1);
   return (tone_status);
}


/*******************************************************************************
/
/   Routine: check_tone_state
/
/   Author: RSA
/
/   Creation Date: 1/16/96
/
/   Description: Checks tone status register to see if status
/                has changed.  This is polled to emulate the Rockwell
/                data pump's NEWS interrupt for tone detection.
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users:  vcv_bg
/
/   -------------------------------------------------------------
/   -            Modifications                    -
/   -------------------------------------------------------------
/
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
#define TONE_DETECT_BITMASK    0x3

void check_tone_state (void)
{
  /* If not configured for tone detection, just exit */
  if (tone_configured == NO_TONE)
    return;

  /* Read DSP Tone Detect register - lower 2 bits report high/low frequencies */
  current_tone_state = read_tone_detection_reg() & TONE_DETECT_BITMASK;

  /* Check for dual tones or silence to prevent false alarms */
  if (current_tone_state != 0)
  {
    if ((tone_configured == STARTTONE) || (tone_configured == ADSI_CAS))
    {
      if (current_tone_state != 3)    /* Are both tones being heard? */
        return;
    }
    else if (tone_configured == VCV_ANSWERTONE)
    {
      if (current_tone_state != 1)    /* Is only the low tone being heard? */
        return;
    }
  }

  /* The VoiceView protocol code expects some form of interrupt
     (from the Rockwell data pump) when a tone begins or ends.
     The change in tone causes a NEWS interrupt, which checks to
     see if the tone state has changed.  If so, it calls the
     vcv_tone_handler() function to start/end timing of the tone
     and update internal status variables. Emulate that here. */
  if (current_tone_state != last_tone_state)
  {
    last_tone_state = current_tone_state;
    vcv_tone_handler();
  }
}


/*******************************************************************************
/
/   Routine: fax_rts_off
/
/   Author: RSA
/
/   Creation Date: 1/20/96
/
/   Description: Turns off Fax transmitter
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users: modem_vcv_transmitter
/
/   -------------------------------------------------------------
/   -            Modifications                    -
/   -------------------------------------------------------------
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
void fax_rts_off (void)
{
  ubyte buffer_type = 1;   /* Clear RX buffer */

  LOAD_MODEM_FAX_RTS_OFF
  ack_or_response = ACK;
  send_pkt_to_dsp();

/* RJM052196 */
  /*
      Since the DSP loops the TX data back onto the Cutlass Rcvr,
      and the Rcvr doesn't know anything about Half Duplex, the Rcvr
      is decoding the incoming data and creating an Eye pattern. However
      due to the latency of data delivery from the Cutlass -> CP, data
      is left in the RX FIFO. Thus when we enable the CP Rcvr, we get
      the wrong data initially. Issue a CLEAR RX data buffer packet to
      the DSP which clears the entire RX chain.
  */
  LOAD_MODEM_CLEAR_DATA_BUFFER
  ack_or_response = ACK;
  send_pkt_to_dsp();
}

/*******************************************************************************
/
/   Routine: modem_fix_dsp
/
/   Author: RSA
/
/   Creation Date: 1/20/96
/
/   Description: Workaround for short v.29 frame
/
/   Input Parameters: None
/
/   Output Parameters: None
/
/   Global Variables Changed:  None
/
/   Users: modem_vcv_transmitter
/
/   -------------------------------------------------------------
/   -            Modifications                    -
/   -------------------------------------------------------------
/
/       Author & Date:
/       Description:
/       Reason:
/
*******************************************************************************/
void modem_fix_dsp(void)
{
   if ((vcv_current_hispeed==0x14) && (mt_major_dsp_ver == 0x04))
   {
      modem_state = VCV_WAIT_RDATA;
   }
}

