/******************************************************************************
/
/     Copyright, 1988 - 1995. All Rights Reserved by:
/        Cirrus Logic
*******************************************************************************/

#include  "SYS_DEF.H"
#include  "cp_dsp.h"
#include  "MT_CODEF.H"
#include  "MT_HWDEF.H"
#include  "MT_COPRO.H"
#include  "MT_HWPRO.H"
#include  "MT_COEXT.H"
#include  "mt_macro.h"
#include "tracemac.h"
#include "bldflags.h"
#include "resp_cod.h" /* ramn 1/12/96 */
#include "dsppatch.h"
#include "voc_icd.h"

void set_hook_relay(ubyte);
void line_select(ubyte);
void set_dp_RTS(ubyte);
void set_sync_clocks(ubyte, ubyte);
void set_AA1_relay(ubyte);
void set_td_relay(ubyte);
void set_shrt_relay(ubyte);
void config_serial_direct(ubyte);
void init_default_DAA(void);
ubyte check_for_ring1(void);
void set_volume(ubyte);
void set_speaker(ubyte);
void mt_driver_error_handler(ubyte);
ubyte first_trans;
extern ubyte dsp_packet_id_msg [];
void modem_init(void);

#define VERBOSE_FORM  1
#define UNFORMATTED   3

extern void output_info(ubyte *msg, ubyte type);
ubyte	display_msg_one_time = 0;
extern ubyte *d_to_a(ubyte num);

/* local variables */
ubyte spkr_volume_level = 0;
ubyte spkr_on = FALSE;

/* RJM040396 */
/* VCV Support */
void set_voice_relay(ubyte);

/*MRM5397 */
void	hard_reset(void);
void ROMReset(void);

/*******************************************************************************
/
/                   "capability_descript"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will return a string which contains the
/                   modem capabilities.
/
/    Input Parameters:   None
/
/    Output Parameter:
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)    modem_capability_description
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
ubyte *capability_descript(void)
{
   return ( (ubyte *) MODEM_CAPABILITY_DESCRIPT);
}

/*******************************************************************************
/
/                   line_select
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   Sets the modem line to reflect the new state.
/
/    Input Parameters:
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void line_select(ubyte state)
{
    ubyte temp;
    temp = state;
}

/*******************************************************************************
/
/                   set_dp_RTS
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine should set the data pump RTS to follow
/                   DTE RTS. (for direct mode only)
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_dp_RTS(ubyte state)
{
    ubyte temp;
    temp = state;
}

/*******************************************************************************
/
/                   set_sync_clocks
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set up the sync clocks.
/
/    Input Parameters:
/         ubyte baud -
/                   0 - BPS_75_600
/              1 - BPS_75_1200
/              2 - BPS_300
/              3 - BPS_1200
/              4 - BPS_2400
/              5 - BPS_4800
/              6 - BPS_7200
/              7 - BPS_9600
/              8 - BPS_12000
/              9 - BPS_14400
/                 10 - BPS_16800
/                 11 - BPS_19200
/                 12 - BPS_38400
/                 13 - BPS_57600
/                 14 - BPS_600
/
/      ubyte clock_source
/               0=TXC from modem
/               1=TXC from DTE, pin 24
/               2=TXC from RXC
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_sync_clocks(ubyte speed, ubyte clock_source)
{
}

/*******************************************************************************
/
/                   "set_td_relay"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the td relay to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_td_relay
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_td_relay(ubyte state)
{
    ubyte temp;
    temp = state;
}

/*******************************************************************************
/
/                   "set_shrt_relay"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the td relay to the given state.
/
/    Input Parameters:   ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_shrt_relay
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_shrt_relay(ubyte state)
{
    ubyte temp;
    temp = state;
}

/*******************************************************************************
/
/                   "config_serial_direct"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the modem line for normal or
/                       direct data connections.
/
/    Input Parameters:   state = 0 for normal
/                                 1 for direct
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)  modem_serial_direct
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
void config_serial_direct(ubyte state)
{
	 /*   keep track of whether or not in direct mode   */
	 mt_direct_mode = state;
	 /*   shave to 12/16 stop bit for pseudo-direct mode   */
	 set_data_sync_register(state);
}

/*******************************************************************************
/
/                   "check_for_ring1"
/
/    Author:   RSA
/
/    Creation Date: 8/01/94
/
/    Description:    Checks Port B10 pin for presence of ring
/
/    Input Parameters:       None
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
*******************************************************************************/
ubyte check_for_ring1(void)
{
   /* stubbed, isn't used, will remove once detect ring works jeb 3/7/95 */
   return TRUE;
}

/*******************************************************************************
/
/    Procedure:     set_volume
/
/    Author:   RSA
/
/    Creation Date: 03/08/94
/
/    Description:   This routine will set the speaker volume
/
/    Input Parameters: None
/
/    Output Parameter: None
/
/    Global Variables Changed: None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/
*******************************************************************************/
void set_volume(ubyte state)
{
	ubyte low_location,high_location, peek_value;
	ubyte *temp;

   spkr_volume_level = state;

   if (spkr_on)
   {
	   /* set volume byte of packet and send */
		LOAD_MODEM_SPEAKER
		ack_or_response = ACK;
		send_pkt_to_dsp();
#if (DSP_SERIES == 408)
		/* first peek the loc 33 of DM bank 0 */
		low_location = 0x33;
		high_location = 0x00;

		LOAD_MODEM_READ_DSP_PACKET_BANK0

		dsp_cp_packet = 0x15;      /*PACKET_DATA_MEM_READBACK*/
		ack_or_response = RESPONSE;
		send_pkt_to_dsp();

		/* or the current vol with the lower nibble */
		peek_value = dsp_response_data[1];
		peek_value = (peek_value & 0xc3);		 /* zero out the vol level and vol control */

		switch(spkr_volume_level)
		{
			case 0:
			case 1:
				peek_value = (peek_value | 0x34);    /* low volume */
			break;

			case 2:
				peek_value = (peek_value | 0x38);	 /* med volume */
			break;

			case 3:
				peek_value = (peek_value | 0x3c);	 /* high volume */
			break;

			default:
				peek_value = (peek_value | 0x38);
			break;
		}

		current_command[0] = 0xd;		/* spkr control bits in DSP */
		current_command[1] = 0x00;
		current_command[2] = 0x04;
		current_command[3] = 0x00;
		current_command[4] = 0x33;
		current_command[5] = 0x0;
		current_command[6] = 0x0;
		current_command[7] = peek_value;
		current_command[11] = 0;

		/* need to do this because the poke commands donot send ack packet C0 */
		temp = (ubyte *)(COM_RAM);
		*temp = 0x0c0;

		ack_or_response = 0;
		send_pkt_to_dsp();
#endif
   }
}

/*******************************************************************************
/
/    Procedure:     set_speaker
/
/    Author:   RSA
/
/    Creation Date: 03/08/94
/
/    Description:   This routine will switch the speaker on or off
/
/    Input Parameters: None
/
/    Output Parameter: None
/
/    Global Variables Changed: None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/
*******************************************************************************/
void set_speaker(ubyte state)
{
	ubyte low_location,high_location, peek_value;
	ubyte *temp;

   if (state)
   {
		spkr_on = TRUE;
		state = spkr_volume_level;
   }
   else
   {
		spkr_on = FALSE;
		state = 0;
   }

	LOAD_MODEM_SPEAKER
	ack_or_response = ACK;
	send_pkt_to_dsp();

#if (DSP_SERIES == 408)
 	/* first peek the loc 33 of DM bank 0 */
	low_location = 0x33;
	high_location = 0x00;

	LOAD_MODEM_READ_DSP_PACKET_BANK0

	dsp_cp_packet = 0x15;      /*PACKET_DATA_MEM_READBACK*/
	ack_or_response = RESPONSE;
	send_pkt_to_dsp();

/* ramn 9/23/96 */
	/* or the current vol with the lower nibble */
	peek_value = dsp_response_data[1];
	peek_value = (peek_value & 0xc3);	/* zero out the vol level and vol control */

	if(spkr_on == TRUE)
	{
		switch(spkr_volume_level)
		{
			case 0:
			case 1:
				peek_value = (peek_value | 0x34);    /* low volume */
			break;

			case 2:
				peek_value = (peek_value | 0x38);	 /* med volume */
			break;

			case 3:
				peek_value = (peek_value | 0x3c);	 /* high volume */
			break;

			default:
				peek_value = (peek_value | 0x38);
			break;
		}
	 }
	 else
		peek_value = (peek_value | 0x30);

	current_command[0] = 0xd;		/* spkr control bits in DSP */
	current_command[1] = 0x00;
	current_command[2] = 0x04;
	current_command[3] = 0x00;
	current_command[4] = 0x33;
	current_command[5] = 0x0;
	current_command[6] = 0x0;
	current_command[7] = peek_value;
	current_command[11] = 0x0;

	/* need to do this because the poke commands donot send ack packet C0 */
	temp = (ubyte *)(COM_RAM);
	*temp = 0x0c0;

	ack_or_response = 0;
	send_pkt_to_dsp();
#endif
}

/*******************************************************************************
/
/                  mt_driver_error_handler
/
/    Author:   RSA
/
/    Creation Date: 02/18/94
/
/    Description:   This is the modem task driver critical error handler
/
*******************************************************************************/
void mt_driver_error_handler(ubyte mt_error_code)
{
   PrintMsg( "MT_DRIVER_ERROR_HANDLER" );
   if (current_command[0] > 0x60)
      dsp_packet_id_msg [0] = current_command[0];
#ifndef __riscos
  ROMReset();
#endif
  hard_reset();
  dsppatch(PATCH_INIT_POWER_ON);
  modem_init();
}

/******************************************************************************
/
/    Procedure: set_data_sync_register
/
/    Author: RSA
/
/    Creation Date:  03/01/95
/
/    Description: This is used with Pseudo Direct mode.  sets either
/                    full stop bit for normal or 12/16 stop bit for direct.
/
/    Input Parameters:
/
/    Output Parameters: none
/
/    Global Variables Changed: none
/
/    Users: config_serial_direct
/
/    -------------------------
/    -     Modifications -
/    -------------------------
/
/    Author & Date: RSA
/    Description:
/    Reason:
/
******************************************************************************/
void set_data_sync_register (ubyte state)
{
}

/*******************************************************************************
/
/                   "set_AA1_relay"
/
/    Author:   RSA
/
/    Creation Date: 3/01/94
/
/    Description:   This routine will set the Auxiliary relay (A/A1leads)
/                   to the given state.
/
/    Input Parameters:   state = ON
/                                   OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_AA1_relay
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_AA1_relay(ubyte state)
{
    ubyte temp;
    temp = state;
}

