/******************************************************************************
/
/     Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994. All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/     This document contains material confidential to R. Scott Associates.
/     its contents must not be revealed, used or disclosed to anyone or
/     company with out written permission by R. Scott Associates.  the
/     information contained herein is solely for the use of R. Scott
/     Associates.
/
/       File:       mt00v834.c
/
/       Version:        1.00
/
/       Function:       v8,v34 routines
/
/       Product:        Modem Task Driver for Merlin Chip Sets
/
/       History:
/
/       Created:        7/20/95
/
/       ------------------------------------------------------
/       -            Modifications           -
/       ------------------------------------------------------
/
/
******************************************************************************/

#include  "SYS_DEF.H"
#include  "MT_MACROS.H"
#include  "MT_COPRO.H"
#include  "MT_CODEF.H"
#include  "MT_HWDEF.H"
#include  "MT_HWPRO.H"
#include  "CP_DSP.H"
#include  "MT_V8V34.H"
#include  "MT_COEXT.H"
#include  "LOCAL.H"
#include  "IOHW_EQU.H"
#include  "lineequ.h"
#include  "lineedf.h"
#include "..\acu\acuv8v80.h"
#include "dsp_drv.h"

ubyte search_JM_or_CM(void);
void process_JM_CM(void);
void set_v8_tx_msg(void);

/*mrm22096*/
extern  uword    v8_timer ;

/*mrm3996*/

extern  ubyte  ms_mode;
extern  ubyte  modem_baud;
extern  ubyte  ext_DspMemErrorFlag;
/*mrm32196*/

extern  ubyte  calling_tone;

/*mrm32796*/
extern  ubyte  translate_modem_baud(void);
extern  ubyte  ms_min_rate;
extern  ubyte  N;
extern  ubyte  automode;

void do_modem_config_patch1(ubyte dmy_cam_type1);
extern ubyte fax_class;
/*******************************************************************************
/
/   mt_v34_configure
/
/   Author:     RSA
/
/   Creation Date:  07/21/95
/
/   Description:    This routine will configure the modem
/                   with V34 parameters.
/
/
/   Input Parameters:   asym_rates,
/                       asym_symbols,
/                       aux_channel_en,
/                       symbol_map,
/                       rx_symbol_map,
/                       option_map
/
/   Output Parameter:   None
/
/   Global Variables Changed:   modem_status
/
/   Users: (routines that used this)   mt_bg
/
/   *****************************************************************
/   *             Modifications             *
/   *****************************************************************
/
*******************************************************************************/
void mt_v34_configure(ubyte asym_rates,ubyte asym_symbols,ubyte aux_channel_en,
                      ubyte symbol_map,ubyte rx_symbol_map,ubyte option_map)
{
/*V34_CONFIG v34_config;

      v34_config.bits.asym_bit_rate = asym_rates;
      v34_config.bits.asym_symb_rate = asym_symbols;
      v34_config.bits.aux_chan_en = aux_channel_en;
      command_packet[BIT_SYM_CHAN] = v34_config.bytetype;
      command_packet[MOD_SYM_MAP] = symbol_map;
      command_packet[V34_OPTION] = option_map;
      send_pkt_to_dsp(PACKET_MODEM_V34_CONFIGURE,MODEM_V34_CONFIGURE_LEN,ACK_NEEDED);
*/
}


/*******************************************************************************
/
/   mt_v34_info
/
/   Author:     RSA
/
/   Creation Date:  07/21/95
/
/   Description:    This routine will configure the modem
/
/
/   Input Parameters:
/
/   Output Parameter:   None
/
/   Global Variables Changed:   modem_status
/
/   Users: (routines that used this)   mt_bg
/
/   *****************************************************************
/   *             Modifications             *
/   *****************************************************************
/
*******************************************************************************/
void mt_v34_info(ubyte *buffer_ptr)
{
/*
      send_pkt_to_dsp(PACKET_MODEM_V34_INFO,MODEM_V34_INFO_LEN,NO_ACK);

      *buffer_ptr++ = tx_bit_symb_info.bytetype;
      *buffer_ptr++ = rx_bit_symb_info.bytetype;
      *buffer_ptr++ = carrier_freq.bytetype;
      *buffer_ptr++ = aux_chan.bytetype;
*/
}

/*******************************************************************************
/
/   mt_v8_configure
/
/   Author:     RSA
/
/   Creation Date:  07/21/95
/
/   Description:    This routine will configure the modem
/                   with V8 parameters.
/
/
/   Input Parameters:   call_function, 0=Duplex data
/                                      1=textphone
/                       lapm_en,
/                       cellular_en
/
/   Output Parameter:   None
/
/   Global Variables Changed:
/
/   Users: (routines that used this)
/
/   *****************************************************************
/   *             Modifications             *
/   *****************************************************************
/
*******************************************************************************/
void mt_v8_configure(ubyte v8o, ubyte v8a, ubyte call_function, ubyte v8b,
                     ubyte lapm_en, ubyte cellular_en,
                     ubyte* cfrange,ubyte* protrange)
{
    ubyte *temp_byte_ptr;

    temp_byte_ptr = cfrange;
    temp_byte_ptr = protrange;

    V8_tx_msg_size   = 6;
    v8_call_function = call_function;
    v8_lapm_en       = lapm_en;
    v8_cellular_en   = cellular_en;
    v8_orig_en       = v8o;
    v8_answ_en       = v8a;
    v8bis_en         = v8b;

    CJ_received = 0;
    CM_received = FALSE;
    JM_received = 0;
    sending_CM  = 0;
    sending_JM  = 0;
    JM_count    = 0;
    CM_count    = 0;
    CI_silence_timer =0;

    v8_rx_insert = v8_rx_remove = v8_rx_count =0;

    v8_configured  = TRUE;
    line_io_enabled= TRUE;
    v8_status      = V8_RX_IDLE;          /* Disable LINE_V8 RX code */
    v8_state       = V8_START;
    v8_mod_modes   = V8_MOD_MODE_DEFAULT;

/*mrm13096*/
/*need to clear the flags before entering the v8 state*/
    v80_sam   = FALSE;
     sp_match  = FALSE;
     mnp_sync  = FALSE;
     lapm_sync = FALSE;

/* RJM111296 */
/* V80 support */
    v80_sam   = FALSE;

/* MRM22797 */
   if ((!v8_orig_en) && (!v8_answ_en) && (!v8bis_en))
      v8_configured  = FALSE;

  if(fax_class == 1)  /* by jlin 06/18/97 */
  {
  }
  else
  {
   if ((ext_DspMemErrorFlag == 0)&& (ms_mode == MT_VX2))
     /* set value for data */
     do_modem_config_patch1(4);
   else
     /* set value for training */
     do_modem_config_patch1(0);
  }
}

/*******************************************************************************
/
/   set_v8_tx_msg
/
/   Author:     RSA
/
/   Creation Date:  09/22/95
/
/   Description:    This routine will configure the modem
/                   with V8 parameters.
/
/
/   Input Parameters:MT_BELL_103  0
/                    MT_BELL_212  1
/                    MT_V21       2
/                    MT_V21_CHAN2 3
/                    MT_V23_ADX   4
/                    MT_V23_HDX   5
/                    MT_V22       6
/                    MT_V22BIS    7
/                    MT_V27_SHORT 8
/                    MT_V27_LONG  9
/                    MT_V27_TER   10
/                    MT_V29       11
/                    MT_V32       12
/                    MT_V32_TCM   13
/                    MT_V17       14
/                    MT_V32       15
/                    MT_V32BIS    16
/                    MT_V34       17
/                    MT_V34_ASYMETRIC  18
/                    call_function, 0=Duplex data
/                                      1=textphone
/                       lapm_en,
/                       cellular_en
/
/   Output Parameter:   None
/
/   Global Variables Changed:
/
/   Users: (routines that used this)
/
/   *****************************************************************
/   *             Modifications             *
/   *****************************************************************
/
*******************************************************************************/

void set_v8_tx_msg()
{
   ubyte i;
   
    i = 0; /* PREAMBLE_INDX */
    V8_tx_msg[i] = PREAMBLE;
    
    i++; /* CM_SEQ_IDX */
    V8_tx_msg[i] = CM_SEQ;   
   
    i++; /* CALL FUNCTION */
    V8_tx_msg[i] = (v8_call_function | 1);

    i++; /* MOD_MODE0_IDX */
    V8_tx_msg[i] = MOD_MODE0; 

    if (v8_mod_modes & V34FULL_MASK)
       V8_tx_msg[i] |= V34_FULL_DUPLEX;
    if (v8_mod_modes & V34HALF_MASK)
       V8_tx_msg[i] |= V34_HALF_DUPLEX;

    i++;   /* MOD_MODE1_IDX */
    V8_tx_msg[i] = MOD_MODEn;
    if (v8_mod_modes & V27TER_MASK)
       V8_tx_msg[i] |= V27_TER;
    if (v8_mod_modes & V29HALF_MASK)
       V8_tx_msg[i] |= V29_HALF_DUPLEX;
    if (v8_mod_modes & V17_MASK)
       V8_tx_msg[i] |= V17;
    if (v8_mod_modes & V22_MASK)
       V8_tx_msg[i] |= V22_BIS;
    if (v8_mod_modes & V32_MASK)
       V8_tx_msg[i] |= V32_BIS;

    i++;   /* MOD_MODE2_IDX */
    V8_tx_msg[i] = MOD_MODEn;
    if (v8_mod_modes & V21_MASK)
       V8_tx_msg[i] |= V21;
    if (v8_mod_modes & V23HALF_MASK)
       V8_tx_msg[i] |= V23_HALF_DUPLEX;
    if (v8_mod_modes & V23FULL_MASK)
       V8_tx_msg[i] |= V23_FULL_DUPLEX;
    if (v8_mod_modes & V26BIS_MASK)
       V8_tx_msg[i] |= V26_BIS;
    if (v8_mod_modes & V26TER_MASK)
       V8_tx_msg[i] |= V26_TER;

#if (MODEM_V90_MODE == 1)
    if (ms_mode == MT_V90)
    {  
       i++;   /* V.PCM AVAILABILITY */
       V8_tx_msg[i] = V90;
       V8_tx_msg_size++;
    }   
#endif    
  
    if (v8_lapm_en)
    {
       i++;   /* PROTOCOL INDEX */
       V8_tx_msg[i] = PROTOCOL | LAPM_ENABLE;
       V8_tx_msg_size++;
    }

    i++;   /* GSTN INDEX */
    V8_tx_msg[i] = GSTN_ACCESS;   // if (v8_cellular_en)
    V8_tx_msg_size++;
}

/*******************************************************************************
/
/   mt_v8_results
/
/   Author:     RSA
/
/   Creation Date:  07/24/95
/
/   Description:    This routine will return the far end modem parameters
/
/
/   Input Parameters:   * buffer ptr
/
/   Output Parameter:   None
/
/   Global Variables Changed:
/
/   Users: (routines that used this)
/
/   *****************************************************************
/   *             Modifications             *
/   *****************************************************************
/
*******************************************************************************/
void mt_v8_results(ubyte *buffer_ptr)
{
/* RJM100896 */
/* V.80 support */
   ubyte *temp_byte_ptr;
   temp_byte_ptr = buffer_ptr;
}

/*******************************************************************************
/
/   v8_answ
/
/   Author:     RSA
/
/   Creation Date:  07/26/95
/
/   Description:
/
/
/   Input Parameters:
/
/   Output Parameter:   None
/
/   Global Variables Changed:
/
/   Users: (routines that used this)
/
/   *****************************************************************
/   *             Modifications             *
/   *****************************************************************
/
*******************************************************************************/
void v8_answ(void)
{
   ubyte i,length,status,speed;
   ubyte temp,modem_x2_status2 = 0;


  switch (v8_state)
     {
/*mrm22096*/
/*added this state to setup the 2 sec timer for V8 routine*/
       case (V8_START):
/*mrm13197*/

                /*v8_timer = 1000;*/ /*changed due to long timeout value for legacy mode*/
                v8_timer = 500;
               v8_state  = V8_START_ANSWER;
                break;

       case (V8_START_ANSWER):

           /* If LINE_V8 RX code is disabled, enable now */
           line_io_enabled = TRUE;
           if( v8_status == V8_RX_IDLE )
           {
               jm_seq_match = FALSE;
               v8_status = WAITING_FOR_CM_SEQ;
           }

            if (v8_timer == 0 )
           {
               v8_state = V8_DONE;
               temp = NO_CT;
               acu_v8_indicate(IND_CT_RXD,&temp);
            }

           if (jm_seq_match)
           {
               acu_v8_indicate(IND_CI_RXD,&V8_rx_msg[1]);
               acu_v8_indicate(IND_CM_OR_JM_RXD,&V8_rx_msg[0]);
               CM_received = TRUE;
               process_JM_CM();

/*MRM32096*/
/*per wess request if automode is disabled and min and max speed are not
  equal we set the automode to 1
*/
                 if (( N == 0) && (automode == 2))
                 {
                 speed = translate_modem_baud();
                   if(speed != ms_min_rate)
                        mt_conn_automode = 3;
                  else
                        mt_conn_automode = 2;

                 }


                 if (( N == 1) && (automode == 3))
                 {
                 speed = translate_modem_baud();
                   if(speed == ms_min_rate)
                        mt_conn_automode = 2;
                  else
                        mt_conn_automode = 3;

                 }


#if MODEM_X2_MODE == 1

/*        modem_x2_status2 = read_dsp_modem_status_reg() & 0x80; */

      dspdrv_ReadCram(ANALOG_STATUS_REG, &modem_x2_status2, 1);
      modem_x2_status2 &= 0x01;

        if (!(modem_x2_status2 ))
        {
            if (ms_mode == MT_VX2) 
            {
                dsp_mode = MT_V34_ASYM;
                bit_rate = MT_BPS33600;
            do_modem_config_patch1(0x00); /* 0x00 for training, jlin 04/19/97 */
            }
        }
#endif
            /* issue connect w/ CM rx'd */
              modem_connect(mt_conn_orig,bit_rate,dsp_mode,mt_conn_clock_code,
                          mt_conn_leased,mt_conn_automode,mt_conn_fax,
                          mt_conn_call_tone_enabled,mt_conn_etc_enabled);

              /* put a JM in CommRAM */
              for (i=0; i<=V8_tx_msg_size; i++)
                  v8_tx_buffer[i] = V8_tx_msg[i];

              /* set semaphores, use data packet for temp status and length variable */
              length = V8_tx_msg_size;
              dspdrv_WriteCram(CP_DSP_DATA_AREA_BASE, &v8_tx_buffer[0], length);  /* sets semaphore */
              status = 0; /* status */
              dspdrv_WriteCram(CP_DSP_DATA_STATUS, &status, 1);  /* sets semaphore */
              dspdrv_WriteCram(CP_DSP_DATA_LENGTH, &length, 1);  /* sets semaphore */

              sending_JM = TRUE;   /* use this variable in IRQ handler to insert data */
              CJ_received=0;
              v8_status = WAITING_FOR_CJ_SEQ;
              v8_state  = WAIT_FOR_CJ;
        }
        break;

        case (WAIT_FOR_CJ):
            if (CJ_received == 3)
            {
               /*donot send any seq. */
               sending_JM = FALSE;
               sending_CM = FALSE;
               v8_state = V8_DONE;
               v8_configured = FALSE;
               temp = TRUE;
               acu_v8_indicate(IND_CJ_DONE,&temp);
            }
        break;

        case (V8_DONE):
/*mrm22096*/
/*added this state to setup the 2 sec timer for V8 routine*/
           sending_JM = FALSE;
           sending_CM = FALSE;
           v8_state = V8_DONE;
           v8_configured = FALSE;
           break;

        default:
           break;
     }
}


/*******************************************************************************
/
/   v8_orig
/
/   Author:     RSA
/
/   Creation Date:  07/26/95
/
/   Description:
/
/
/   Input Parameters:
/
/   Output Parameter:   None
/
/   Global Variables Changed:
/
/   Users: (routines that used this)
/
/   *****************************************************************
/   *             Modifications             *
/   *****************************************************************
/
*******************************************************************************/
void v8_orig(void)
{
   ubyte i,length,status;
   ubyte *v8_tx_buff_ptr;
   ubyte *V8_tx_ptr;
   ubyte speed;
   ubyte temp,modem_x2_status2 = 0;

  switch (v8_state)
    {
    case (V8_START):
        v8_state = XMIT_CI;
        break;

    case (XMIT_CI):
/*mrm32196*/
            if (calling_tone == 2)
            {
                /* send 1.0 sec worth (@300 baud = 10) of CIs to DSP (10CIs*3bytes = 30 bytes */
                v8_tx_buff_ptr = &v8_tx_buffer[0];
                for (i=0; i<=9; i++)
               {
                    *v8_tx_buff_ptr++ = PREAMBLE;
                    *v8_tx_buff_ptr++ = CI_SEQ;
                    *v8_tx_buff_ptr++ = V8_tx_msg[CALLF_IDX];
               }

                /* set semaphores, use data packet for temp status and length variable */
                length =30;  /* 10 CI messages * 3 bytes each */
                dspdrv_WriteCram(CP_DSP_DATA_AREA_BASE, &v8_tx_buffer[0], length);  /* sets semaphore */
                status = 0; /* status */
                dspdrv_WriteCram(CP_DSP_DATA_STATUS, &status, 1);  /* sets semaphore */
                dspdrv_WriteCram(CP_DSP_DATA_LENGTH, &length, 1);  /* sets semaphore */
             }
            v8_state = WAIT_ANSam_OR_SENT;

        break;

    case (WAIT_ANSam_OR_SENT):
        if ((mt_call_progress == ANSAM)||(mt_call_progress == ANSAM_PR)) /* if (ANSam_detected) */
        {
            /* put a single CM msg into CommRAM */
            V8_tx_ptr      = &V8_tx_msg[0];
            v8_tx_buff_ptr = &v8_tx_buffer[0];

            for (i=0; i<=V8_tx_msg_size-1; i++)
               *v8_tx_buff_ptr++ = *V8_tx_ptr++;

            sending_CM = TRUE;

            /* set semaphores, use data packet for temp status and length variable */
            length = V8_tx_msg_size;
            dspdrv_WriteCram(CP_DSP_DATA_AREA_BASE, &v8_tx_buffer[0], length);  /* sets semaphore */
            status = 0; /* status */
            dspdrv_WriteCram(CP_DSP_DATA_STATUS, &status, 1);  /* sets semaphore */
            dspdrv_WriteCram(CP_DSP_DATA_LENGTH, &length, 1);  /* sets semaphore */

            /* Enable LINE_V8 RX code now */
            jm_seq_match = FALSE;
            v8_status    = WAITING_FOR_CM_SEQ;
            v8_state     = WAIT_FOR_JMS;
            temp = ANSAM_RXD;
            acu_v8_indicate(IND_ANS_RXD,&temp);
        }
        else if (mt_call_progress == V8_PRE_ANSAM)
        {
               CI_silence_timer = 0; /* disable CI xmission */
        }

/*MRM22096*/
/*timeout for v32BIS mode*/
/*500 ms after the answer tone is detected*/
          else if ((mt_call_progress != ANSWERTONE) && (v8_timer == 0))
           {
                v8_timer = 50;
          }
        else
        {
            /*
            xmit_stat_reg = read_dsp_xmit_status_reg();
            if (xmit_stat_reg & ALL_SENT_BIT == TRUE)
            {
            */
               if (CI_silence_timer == 0)       /* timer not running */
                  /*CI_silence_timer = ONE_SECOND; mrm110795*/
                  CI_silence_timer = 200;
               else if (CI_silence_timer <= 2)  /* timer timed out */
                  {
                     CI_silence_timer = 0;
                     v8_state = XMIT_CI;
                  }
            /*
            }
            */
        }

/*MRM22096*/
/*timeout for v32BIS mode*/
/*500 ms after the answer tone is detected*/
/*we should be in v32bis mode*/

          if (mt_call_progress == ANSWERTONE)
          {
            if (v8_timer == 0)
            {
               v8_state = V8_DONE;
               temp = V25_ANS_RXD;
               acu_v8_indicate(IND_ANS_RXD,&temp);
            }
          }

      break;

    case (WAIT_FOR_JMS):
        line_io_enabled = TRUE;

           if (jm_seq_match)
           {
              acu_v8_indicate(IND_CM_OR_JM_RXD,&V8_rx_msg[0]);

              JM_received = TRUE;
              sending_CM = FALSE;      /* turn off CM transmitter */
              /* insert 3 CJs into CommRAM */
              v8_tx_buff_ptr = &v8_tx_buffer[0];
              *v8_tx_buff_ptr++ = CJ_SEQ;
              *v8_tx_buff_ptr++ = CJ_SEQ;
              *v8_tx_buff_ptr++ = CJ_SEQ;

              length = 3;
              dspdrv_WriteCram(CP_DSP_DATA_AREA_BASE, &v8_tx_buffer[0], length);
              status = 0; /* status */
              dspdrv_WriteCram(CP_DSP_DATA_STATUS, &status, 1);  /* sets semaphore */
              dspdrv_WriteCram(CP_DSP_DATA_LENGTH, &length, 1);  /* sets semaphore */

              process_JM_CM();

/*MRM32096*/
/*per wess request if automode is disabled and min and max speed are not
  equal we set the automode to 1
*/
                 if (( N == 0) && (automode == 2))
                 {
                 speed = translate_modem_baud();
                   if(speed != ms_min_rate)
                        mt_conn_automode = 3;
                  else
                        mt_conn_automode = 2;

                 }


                 if (( N == 1) && (automode == 3))
                 {
                 speed = translate_modem_baud();
                   if(speed == ms_min_rate)
                        mt_conn_automode = 2;
                  else
                        mt_conn_automode = 3;

                 }

              /* issue 2nd CONNECT packet  w/ JM rx'd   */

#if MODEM_X2_MODE == 1
/*
        modem_x2_status2 = 0x80;

        modem_x2_status2 = read_dsp_modem_status_reg() & 0x80;
*/
      dspdrv_ReadCram(ANALOG_STATUS_REG, &modem_x2_status2, 1);
      modem_x2_status2 &= 0x01;

        if (!(modem_x2_status2 ))
        {
            if (ms_mode == MT_VX2)
            {
                dsp_mode = MT_V34_ASYM;
                bit_rate = MT_BPS33600;
                do_modem_config_patch1(0x00); /* 0x00 for training, jlin 04/19/97 */
            }
        }

#endif
              modem_connect(mt_conn_orig,bit_rate,dsp_mode,mt_conn_clock_code,
                            mt_conn_leased,mt_conn_automode,mt_conn_fax,
                            mt_conn_call_tone_enabled,mt_conn_etc_enabled);



              v8_state = V8_DONE;
              v8_configured = FALSE;
              temp = TRUE;
              acu_v8_indicate(IND_CJ_DONE,&temp);
           }
      break;

     case (V8_DONE):
/*MRM22096*/
       v8_configured = FALSE;
       break;
   }
}

#if 0
/*******************************************************************************
/
/   search_JM_or_CM
/
/   Author:     RSA
/
/   Creation Date:  08/31/95
/
/   Description:    This routine will check for 2 consectutive, identical
/                   JM messages from the far end modem.
/
/
/   Input Parameters:
/
/   Output Parameter:   None
/
/   Global Variables Changed:
/
/   Users: (routines that used this)
/
/   *****************************************************************
/   *             Modifications             *
/   *****************************************************************
/
*******************************************************************************/

ubyte search_JM_or_CM(void)
{
ubyte i,save_count,length;
ubyte match=FALSE;
/* ubyte temp[V8_BUFF_SIZE]; */
int index1=-1;
int index2=-1;

   length = save_count = v8_rx_count;
   while (length)
   {
      if (dce_rx_buffer[v8_rx_remove] == JM_SEQ)  /* JM seq = CM_SEQ */
      {
         if (index1 == -1 )
            index1 = v8_rx_remove;
         else if (index2 == -1)
         {
            index2 = v8_rx_remove;
            match = TRUE;
            V8_rx_msg_size = (index2-index1);     /* check len of msgs */
            for (i=0; i<=V8_rx_msg_size-1; i++)
               if (dce_rx_buffer[index1+i] != dce_rx_buffer[index2+i])
                  match = FALSE;
            if (match)
            {
               JM_received = TRUE;
               for (i=0; i<=V8_rx_msg_size-1; i++)
                  V8_rx_msg[i] = dce_rx_buffer[index1+i];
            }
         }
      }
      v8_rx_remove++;
      length--;
   }
   v8_rx_count -= save_count;
   return(match);
}
#endif

/*******************************************************************************
/
/   process_JM_CM
/
/   Author:     RSA
/
/   Creation Date:  08/31/95
/
/   Description:    This routine will process the valid JM msg
/
/
/   Input Parameters:
/
/   Output Parameter:   None
/
/   Global Variables Changed:
/
/   Users: (routines that used this)
/
/   *****************************************************************
/   *             Modifications             *
/   *****************************************************************
/
*******************************************************************************/

void process_JM_CM(void)
{
   ubyte i, pcm;
   ubyte category,info;

   pcm = 0;
   
   dsp_mode=bit_rate=0;
   /* use JM data to determine connect packet */
   for (i=1; i<=V8_rx_msg_size-1; i++)  /* byte 0 is JM header; so skip */
   {
      category = V8_rx_msg[i]&0x1F;
      info     = V8_rx_msg[i]&0xE0;

      switch(category)
      {
         case (CALLFUNC):
            if (info != (v8_call_function & 0xE0))
            {
               V8_tx_msg[CALLF_IDX] = v8_call_function;
               /* CLEAR PROTOCOL BYTES!?!?!?!?! ASK RJM */
            }
            break;

         case (MOD_MODE0):
            V8_tx_msg[MOD_MODE0_IDX] &= V8_rx_msg[i];
            info = V8_tx_msg[MOD_MODE0_IDX] & 0xE0;

            if (info == V34_FULL_DUPLEX)
            {
/*mrm3996*/
               dsp_mode = ms_mode;
               bit_rate = modem_baud;

#if 0
               dsp_mode = MT_V34_ASYM;
               bit_rate = MT_BPS28800;
#endif
            }

        /* if more message and 'extension' bit set, then more mod modes */
            if ((i+1<=V8_rx_msg_size) && (V8_rx_msg[i+1]&MOD_MODEn))
            {
               i++;
               V8_tx_msg[MOD_MODE1_IDX] &= V8_rx_msg[i];
               info = V8_tx_msg[MOD_MODE1_IDX]&0xC0;
               if ((info&V27_TER) && (dsp_mode ==0))
               {
                  dsp_mode = MT_V27_TER;
                  bit_rate = MT_BPS4800;
               }
               else /* check rest of byte */
               {
                  info = V8_tx_msg[MOD_MODE1_IDX]&0x07;
                  if ((info&V17) && (dsp_mode ==0))
                  {
                     dsp_mode = MT_V17;
                     bit_rate = MT_BPS14400;
                  }
                  else if ((info&V32_BIS) && (dsp_mode ==0))
                  {
                     dsp_mode = MT_V32BIS;
                     bit_rate = MT_BPS14400;
                  }
                  else if ((info&V22_BIS) && (dsp_mode ==0))
                  {
                     dsp_mode = MT_V22BIS;
                     bit_rate = MT_BPS2400;
                  }
               }
            }

            if ((i+1<=V8_rx_msg_size) && (V8_rx_msg[i+1]&MOD_MODEn))
            {
               i++;
               V8_tx_msg[MOD_MODE2_IDX] &= V8_rx_msg[i];
               info = V8_tx_msg[i]&0xC0;
               if ((info&V21)&&(dsp_mode==0))
               {
                  dsp_mode = MT_V21;
                  bit_rate = MT_BPS300;
               }
               else /* check rest of byte */
               {
                  info = V8_tx_msg[i]&0x07;
                  if ((info&V23_FULL_DUPLEX) && (dsp_mode==0))
                  {
                     dsp_mode = MT_V23_ADX;
                     bit_rate = MT_BPS1200_75;
                  }
               }
            }
            break;
            
#if (MODEM_V90_MODE == 1)            
         case (V90_AVAIL):
            V8_tx_msg[6] &= V8_rx_msg[i];
            pcm = 1;

            dsp_mode = ms_mode;
            bit_rate = modem_baud;
            break;
#endif

         case (PROTOCOL):
            V8_tx_msg[PROTOCOL_IDX+pcm] &= V8_rx_msg[i];
            break;

         case (GSTN_ACCESS):
            V8_tx_msg[GSTN_IDX+pcm] &= V8_rx_msg[i];
            break;

         default:
            break;
      }
   }
   V8_tx_msg_size = i+1;
}
