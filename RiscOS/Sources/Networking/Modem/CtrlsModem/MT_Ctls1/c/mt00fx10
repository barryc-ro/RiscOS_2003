/******************************************************************************
/
/     Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994. All Rights Reserved by:
/       RSA
/       7701 Six Forks Road
/       Suite 120
/       Raleigh, NC  27615
/       (919) 846-7171
/
/     This document contains material confidential to R. Scott Associates.
/     its contents must not be revealed, used or disclosed to anyone or
/     company with out written permission by R. Scott Associates.  the
/     information contained herein is solely for the use of R. Scott
/     Associates.
/
/     File:           mt00fx10.c
/
/     Version:        1.00
/
/     Function:       Supporting Library Routines for Fax
/
/     Product:        Modem Task Driver for Merlin Chip Sets
/
/     History:   
/
/     Created:        03/01/94
/
/       ------------------------------------------------------
/       -           Modifications             -
/       ------------------------------------------------------
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
#include  "SYS_DEF.H"
#include  "cp_dsp.h"
#include  "MT_COPRO.H"
#include  "MT_CODEF.H"
#include  "MT_COEXT.H"
#include  "MT_HWPRO.H"
#include  "MT_HWDEF.H"
#include  "mt_macro.h"

#define DP_IDLE 0
#define DP_RECEIVE 1
#define DP_TRANSMIT 2

void mt_fax_configure(ubyte,ubyte);
ubyte mt_fax_capability(void);
void mt_terminate_link(void);

ubyte data_pump_fax_status = DP_IDLE;


/*******************************************************************************
/
/    ROUTINE:  mt_fax_configure
/
/    This routine configures the data pump to the given modulation for
/    transmit or receive data.  When receive data is specified, DTR status
/    is set on and RTS status is set off.  When transmit data is specified,
/    DTR and RTS status is set on and the code waits for CTS status to be
/    set.
/
/    Input Parameters:   ubyte     mod_speed
/                        3    V.21 ch.2 300
/                        24   V.27 ter  2400
/                        48   V.27 ter  4800
/                        72   V.29      7200
/                        73   V.17      7200
/                        74   V.17 w/st 7200
/                        96   V.29      9600
/                        97   V.17      9600
/                        98   V.17 w/st 9600
/                        121  V.17      12000
/                        122  V.17 w/st 12000
/                        145  V.17      14400
/                        146  V.17 w/st 14400
/
/                direction: 1 = transmit data
/                     0 = receive data
/
/    PARAMETERS OUT: none
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
*******************************************************************************/
void mt_fax_configure(ubyte modulation, ubyte direction)

{
   ubyte dsp_modulation;
   ubyte dsp_direction;
   ubyte echo_protect;
    
   
   /* need to do a modem init get dsp to work */
   if (modulation == 3)
    if (direction == 1)
    {      
        /*
        current_command [0] = PACKET_MODEM_INIT;
        current_command [1] = 0x00;
        current_command [2] = PACKET_MODEM_INIT_LEN;
        current_command [3] = 0x00;
        while (error_occured = cp_dsp());
        while (error_occured = dsp_acknowledge_packet());     
        */
        
        LOAD_MODEM_INIT
        ack_or_response = ACK;
        send_pkt_to_dsp();
    }   
   
     
   
   if (data_pump_fax_status == DP_TRANSMIT)
     {   
     
        /*
        current_command [0] = PACKET_MODEM_FAX_RTS_OFF;
        current_command [1] = 0x00;
        current_command [2] = PACKET_MODEM_FAX_RTS_OFF_LEN;
        current_command [3] = 0x00;
        while (error_occured = cp_dsp());
        while (error_occured = dsp_acknowledge_packet());     
        */
     
     LOAD_MODEM_FAX_RTS_OFF
     ack_or_response = ACK;
     send_pkt_to_dsp();

     data_pump_fax_status = IDLE;
     
     }
   


   switch (modulation) {
     case (3):
        dsp_modulation = 0x32;
        echo_protect = OFF;
        mt_cts_timer = 0;
        break;
     case (24):
        dsp_modulation = 0xA4;

/*mrm31396*/
        /*echo_protect = OFF;*/
        echo_protect = ON;
        mt_cts_timer = 95; /* 943 ms */
        break;
     case (48):
        dsp_modulation = 0xA5;

/*mrm31396*/
        /*echo_protect = OFF;*/
        echo_protect = ON;
        mt_cts_timer = 71; /* 708 ms */          

/* RJM061996 */
        mt_cts_timer = 86; /* 860 ms */

        #if 0
        mt_cts_timer = 710; /* 708 ms */
        #endif

        break;
     case (72):
        dsp_modulation = 0xB6;

/*mrm31396*/
        /*echo_protect = ON;*/
        echo_protect = OFF;
        mt_cts_timer = 26; /* 253 ms */
        break;
     case (73):
        dsp_modulation = 0xE6;
        echo_protect = ON;
        mt_cts_timer = 140;  /* 1393 ms */
        break;
     case (74):
        dsp_modulation = 0xD6;
        echo_protect = ON;
        mt_cts_timer = 15;    /* 142 ms */
        break;
     case (96):
        dsp_modulation = 0xB7;

/*mrm31396*/
        /*echo_protect = ON;*/
        echo_protect = OFF;
        mt_cts_timer = 26; /* 253 ms */
        break;
     case (97):
        dsp_modulation = 0xE7;
        echo_protect = ON;
        mt_cts_timer = 140;  /* 1393 ms */
        break;
     case (98):
        dsp_modulation = 0xD7;
        echo_protect = ON;
        mt_cts_timer = 15;    /* 142 ms */
        break;
     case (121):
        dsp_modulation = 0xE8;
        echo_protect = ON;
        mt_cts_timer = 140;  /* 1393 ms */
        break;
     case (122):
        dsp_modulation = 0xD8;
        echo_protect = ON;
        mt_cts_timer = 15;    /* 142 ms */
        break;
     case (145):
        dsp_modulation = 0xE9;
        echo_protect = ON;
        mt_cts_timer = 140;  /* 1393 ms */
        break;
     case (146):
        dsp_modulation = 0xD9;
        echo_protect = ON;
        mt_cts_timer = 15;    /* 142 ms */
        break;
     default:
        dsp_modulation = 0x32;
/*mrm31396*/
        /*echo_protect = ON;*/
        echo_protect = OFF;
        mt_cts_timer = 0;
        break;
     }

   
   
   if( direction)
   {
    dsp_direction = 0;
   }
   else
   {
    dsp_direction = 1;
   }



        /*
        current_command [0] = PACKET_MODEM_FAX_CONFIGURE;
        current_command [1] = 0x00;
        current_command [2] = PACKET_MODEM_FAX_CONFIGURE_LEN;
        current_command [3] = 0x00;
        current_command[SPEED_MODULATION_BYTE] = dsp_modulation;
        packetize_parameter(dsp_direction, HALF_DUPLEX_DIR_BYTE, HALF_DUPLEX_DIR_START_BIT);
        packetize_parameter(1, DATA_FAX_MODE_BYTE, DATA_FAX_MODE_START_BIT);
        packetize_parameter(echo_protect, ECHO_PROTECT_BYTE, ECHO_PROTECT_START_BIT);
        while (error_occured = cp_dsp());
        while (error_occured = dsp_acknowledge_packet());     
        */

    LOAD_MODEM_FAX_CONFIGURE 
    ack_or_response = ACK;
    send_pkt_to_dsp();

   

   if (direction ==1)
     {      
        /*
        current_command [0] = PACKET_MODEM_FAX_RTS_ON;
        current_command [1] = 0x00;
        current_command [2] = PACKET_MODEM_FAX_RTS_ON_LEN;
        current_command [3] = 0x00;
        while (error_occured = cp_dsp());
        while (error_occured = dsp_acknowledge_packet());     
        */
     
     LOAD_MODEM_FAX_RTS_ON
     ack_or_response = ACK;
     send_pkt_to_dsp();          
     

     data_pump_fax_status = DP_TRANSMIT;
     }
   else
     {  
     data_pump_fax_status = DP_RECEIVE;
     }

/* RJM040396 */
/* VCV supported but not 100% really
   needed. Code added but commented out until
   clarification */
#if 0
   /* Send data timeout value packet */
   current_command[0] = PACKET_MODEM_SET_DATA_TIMEOUT_VAL;
   current_command[1] = 0;
   current_command[2] = 1;
   current_command[3] = 0;
   current_command[4] = 2;
   current_command[5] = 0;

   ack_or_response = ACK;
   send_pkt_to_dsp();
#endif

   }

/*******************************************************************************
/
/    Procedure:     mt_fax_capability
/
/    Author:   RSA
/
/    Creation Date: 03/01/94
/
/    Description:      This routine the Data Pumps FAX modulation capabilities
/
/    Input Parameters:   None
/
/    Output Parameter:   Highest modulation/speed capability
/                               0   V.27/2400
/                               1   V.27/4800
/                               2   V.29/7200
/                               3   V.29/9600
/                               4   V.17/12000
/                               5   V.17/14400
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
*******************************************************************************/
ubyte mt_fax_capability(void)
{
    return(FAX_CAPABILITY);
}

/*******************************************************************************
/
/    Procedure:     mt_terminate_link
/
/    Author:   RSA
/
/    Creation Date: 03/01/94
/
/    Description:   This routine cause the data pump to return to the
/                       IDLE state.
/
/    Input Parameters:   None
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void mt_terminate_link(void)
{
   
   if (data_pump_fax_status == DP_TRANSMIT)
     {   
        /*
        current_command [0] = PACKET_MODEM_FAX_RTS_OFF;
        current_command [1] = 0x00;
        current_command [2] = PACKET_MODEM_FAX_RTS_OFF_LEN;
        current_command [3] = 0x00;
        while (error_occured = cp_dsp());
        while (error_occured = dsp_acknowledge_packet());     
        */
     
     LOAD_MODEM_FAX_RTS_OFF
     ack_or_response = ACK;
     send_pkt_to_dsp();
     
     data_pump_fax_status = IDLE;

     }
   
   return;
}
