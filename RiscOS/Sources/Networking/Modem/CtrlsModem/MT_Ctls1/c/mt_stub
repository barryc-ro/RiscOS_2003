/******************************************************************************
/
/    Copyright 1988,1989,1990,1991,1992,1993,1994. All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to R. Scott Associates.
/     its contents must not be revealed, used or disclosed to anyone or
/     company with out written permission by R. Scott Associates.  the
/     information contained herein is solely for the use of R. Scott
/     Associates.
/
/    File:          mt00stub.c
/
/       Module Version: ACU 4.02
/
/    Function: Stub file for the Modem Task code
/
/    Product:  
/
/    History:
/
/         Created: 
/
/         ------------------------------------------------------
/         -          Modifications                -
/         ------------------------------------------------------
/
/         Author & Date:
/         Description:
/         Reason:
******************************************************************************/
#include  "SYS_DEF.H"
#include  "ee_def.h"
#include  "cp_dsp.h"
#include  "mt_pro.h"
#include  "mt_macro.h" 

#define GPR0 0x0ffc204
#define GPR1 0x0ffc208
#define VOC_RELAY_OFF_HOOK			0x1000
#define VOC_RELAY_ON_HOOK 			0x1100
#define OH_RELAY_OFF_HOOK			0x0080
#define OH_RELAY_ON_HOOK			0x0088
#define SPK_HS_RELAY_OFF_HOOK		0x0010 /* in gpr1 */
#define SPK_HS_RELAY_ON_HOOK	  	0x0011
#define LOCAL_PHONE_OFF_HOOK_MASK	0x0800

#undef modem_td_relay
#undef modem_shrt_relay
#undef modem_eeprom_checksum
#undef modem_hook_relay


uword local_phone_on_hook(void);
void modem_spk_hs_relay( ubyte state);


extern ubyte modem_read_data( uword offset, uword length, ubyte *ptr);
extern ubyte temp_array[DEFAULT_SIZE];  /* Array used in reading and writing eeprom  */
extern ubyte cp_dsp(void);
extern ubyte dsp_acknowledge_packet(void);     



/*******************************************************************************
/
/                     modem_ctl_tone_energy
/
/    Author:   RSA
/
/    Creation Date: 05/12/94
/
/    ROUTINE:  mt_ctl_tone_energy
/
/    This routine is used to report energy cadence from the call progress
/  routine.
/
/    Input Parameters:   cp_energy_on, cp_energy_off
/
/    Output Parameter:   none
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void modem_ctl_tone_energy(ubyte *cp_energy_on, ubyte *cp_energy_off)
{
}

/*******************************************************************************
/
/                   modem_hook_relay
/
/    Author:   RSA
/
/    Creation Date: 02/07/91
/
/    Description:   This routine will set the Off hook relay to the given
/              state.
/
/    Input Parameters:   state = 1 = ON
/                         = 0 = OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  on_hook
/                          off_hook
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void modem_hook_relay( ubyte state)
{
/* RJM040396 */
/* USe GPIO I/F which handles Host Based */
#if 0
	ubyte gpo_value;
	ubyte *temp;
	uword  *gpo_add_pointer ;
	gpo_add_pointer = (uword *) GPR0 ;
	/*temp = (ubyte *) gpo_add_pointer ;*/
	
	if(state)
	{
		/*
		gpo_value = OH_LO ;
		*temp = *temp & gpo_value ;
		*/
		*gpo_add_pointer=0x0f80;
	}
	else
	{
		/*
		gpo_value = OH_HI ;
		*temp = *temp | gpo_value ;
		*/
 		*gpo_add_pointer=0x0f88;

	}
#endif

   set_hook_relay( state );
}



/*******************************************************************************
/
/                    modem_shrt_relay
/
/    Author:   RSA
/
/    Creation Date: 02/07/91
/
/    Description:   This routine will set the short out (line hold
/              circuit) relay to the given state.
/
/    Input Parameters:   state = ON
/                         = OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  close_shrt_relay
/                          open_shrt_relay
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void modem_shrt_relay( ubyte state)
{
/* RJM040396 */
/* USe GPIO I/F which handles Host Based */
#if 0
    ubyte temp;
    temp = state;
#endif

   set_shrt_relay( state );
}


/*******************************************************************************
/
/                     modem_td_relay
/
/    Author:   RSA
/
/    Creation Date: 02/07/91
/
/    Description:   This routine will set the telephone/line relay to the
/              given state.
/
/    Input Parameters:   state = ON
/                         = OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  at_H
/                          acu_answers
/                          acu_originate
/                          hang_up
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void modem_td_relay( ubyte state)
{
/* RJM040396 */
/* USe GPIO I/F which handles Host Based */
#if 0
/* modified by ramn on 1/8/96 */
	uword  *gpo_add_pointer ;
	gpo_add_pointer = (uword *) GPR0 ;
	
	if(state)
	{
		*gpo_add_pointer= VOC_RELAY_OFF_HOOK;
	}
	else
	{
 		*gpo_add_pointer=VOC_RELAY_ON_HOOK;
	}
#endif

   set_voice_relay( state ); /* was set_td_relay changed by ramn 4/16/96 */
}

/*******************************************************************************
/
/                     "modem_eeprom_checksum"
/
/    Author:   RSA
/
/    Creation Date: 02/07/91
/
/    Description:   This routine will calculate and return the modem
/              eeprom checksum.
/
/    Input Parameters:   None
/
/    Output Parameter:   eeprom checksum value
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  and_F
/                          and_Y
/                          and_Z
/                          store_profile
/                          acu_reset
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
/* 2/23/96 shujin */
ubyte modem_eeprom_checksum(void)
{    
	uword     location;
	
	ubyte     check_sum, temp;
	
	check_sum = 0;
	
	for (location = 1; location < EEPROM_SIZE ; location ++)
	{
		modem_read_data(location,1,&temp);

/*mrm111996*/
/*if location 1 is a 0xff the the eeprom is blank */

		 if (location == 1)
		 {
			if (temp == 0xff)
				return (00);
		 }

		check_sum = check_sum + temp;
	}

/*mrm102696*/

    return ((~check_sum) + 1);
}

#if 0
/**************************************************************************/
 routines added by ramn for voice GPIO control
	date 1/23/96 
/**************************************************************************/
#endif
void modem_spk_hs_relay( ubyte state)
{
/* modified by ramn on 1/23/96 */
/* THIS RELAY IN V34 EEB IS GPIO8 */

#if 0
	uword  *gpo_add_pointer ;
	gpo_add_pointer = (uword *) GPR1 ;
	
	if(state)
	{
		*gpo_add_pointer = SPK_HS_RELAY_OFF_HOOK;
	}
	else
	{
 		*gpo_add_pointer = SPK_HS_RELAY_ON_HOOK;
	}
#endif //* ramn 4/16/96 */
	set_spk_hs_relay(state); /* ramn 4/16/96 */
}

uword local_phone_on_hook(void)
{
	uword status;
	uword  *gpo_add_pointer ;
	gpo_add_pointer = (uword *) GPR0 ;
	
	status = *gpo_add_pointer;
	status = (status & LOCAL_PHONE_OFF_HOOK_MASK);
	return(status);
}







/***************** till here by ramn *************************/


