/****************************************************************************
/   Copyright 1988, 1989, 1990, 1991, 1992, 1993, 1994.  All Rights
/   Reserved by:
/   Cirrus Logic, Inc.
****************************************************************************/

#include "sys_def.h"
#include "mt_pro.h"
#include "cp_dsp.h"
#include "dsp_drv.h"
#include "mt_macro.h"
#include "mt_codef.h"
#include "mt_coext.h"
#include "dsppatch.h"
#include "bldflags.h"

/* Need to extern the various patch table addresses here */
extern ubyte spkr_phn_dnl;
extern uword pwr_on_patch[];
extern const uword data_patch[];
extern const uword common_patch[];
extern const uword training_patch[];
extern const uword patch[];
extern const uword voice_patch[];
extern void send_pkt_to_dsp(void);
extern void dnld_spkr_phn_code(uword *);
extern void set_7_wait_states(void);
extern ubyte spkr_phn_dnl;
extern ubyte dial_timer;
extern ubyte fax_class;       /* Class of Fax selected   */
extern ubyte ext_DspMemErrorFlag;

/* Local functions */
void dnld_patch(const uword tbl[]);
void dnld_patch2(const uword tbl[]);
void write_to_dsp( uword, uword );
extern void dsp_poke(uword, uword);
extern uword dsp_peek(uword);

void PrintMsg(char *);
void outchar(unsigned char);

uword dsp_peek(uword addr);
void dsp_poke(uword, uword);
void do_modem_config_patch1(ubyte dmy_cam_type1);

/* SLei added*/
const unsigned short dsp_stop[]={
 0x0002,		/* identify dsp file format */
 0x0007,    /* DSP code size per 16 bits word  */
 0x0801,    /* starting address */
 0x3120,    /* ,0801 */
 0x0800,
 0x0800,
 0x0800,
 0x0800,
 0x0800,
};

const unsigned short dsp_start[]={
 0x0002,		/* identify dsp file format */
 0x0007,    /* DSP code size per 16 bits word  */
 0x0801,    /* starting address */
 0x10c1,    /* 0801 should be same as pwr_on_patch[3]*/
 0x33fa,    /* 0802 */
 0x1401,    /* 0803 */
 0x0000,    /* 0804 */
 0x10c1,    /* 0805 */
 0x33fa,    /* 0806 */
};

/****************************************************************************
 *
 *   Routine:           dsppatch()
 *
 *   Author:            RSA
 *
 *   Creation Data:     12/8/1996
 *
 *   Description:
 *
 *   Input Parameters:  ubyte type
 *
 *   Output Parameters: Nothing
 *
 *   Global Variables Changed: None
 *
 *   Users:
 *
 *   -----------------------------------------------------------
 *   -                       Modifications                     -
 *   -----------------------------------------------------------
 *
 *   Author & Date:  RSA
 *   Description:
 *   Reason:
 *
 ****************************************************************************/

void dsppatch (ubyte type)
{
#if (PATCHLESS_EXTERNAL == 1)
         /* Disable DSP external MCON */
         write_to_dsp( 0x17e4, 0x7F00 );
         /* Fall through */
#endif


#if (PATCHLESS_EXTERNAL == 0)
   ubyte modem_x2_status1 = 0;
   ubyte cam_type; /* 0 = Training, 1 = data */

   switch(type)
   {
      case PATCH_INIT_POWER_ON:
         #if (PATCHLESS_EXTERNAL == 0)
         /* Disable DSP internal MCON */
         write_to_dsp( 0x17e4, 0x7C00 );

         #if !defined __MSDOS__
 		 spkr_phn_dnl = 0;
         PrintMsg( "PATCH:POWER ON" );
		 dnld_spkr_phn_code(pwr_on_patch);
		 set_7_wait_states();		/* this sets 7 wait states for musket-cp interf*/
         #endif

         #else
         /* Disable DSP external MCON */
         write_to_dsp( 0x17e4, 0x7F00 );
         /* Fall through */
         #endif

      case COMMON_PATCH:
         PrintMsg( "PATCH:COMMON" );
         dnld_patch(common_patch);

         PrintMsg( "PATCH:TRAINING" );
         dnld_patch(training_patch);

         cam_type = 0;
         LOAD_DSP_CAMJAM
         ack_or_response = ACK;
         send_pkt_to_dsp();

         #if defined __MSDOS__
         #if defined J5_CHIP
         /* Slow the DSP clock down to <= 34.1MHz */
         set_register(0xFB, 0x25);
         #endif
         #endif
         break;

      case RETRAIN_PATCH:
         #if MODEM_X2_MODE == 1
         dspdrv_ReadCram(ANALOG_STATUS_REG, &modem_x2_status1, 1);
         modem_x2_status1 &= 0x01;
         #endif

         if (!(modem_x2_status1 ))  /* download patch only for V34 */
         {
            cam_type = 0;
            LOAD_DSP_CAMJAM
            ack_or_response = ACK;
            send_pkt_to_dsp();

            PrintMsg( "PATCH:TRAINING" );
            dnld_patch(training_patch);
         }
         break;

      case DATA_PATCH:
         #if MODEM_X2_MODE == 1
         dspdrv_ReadCram(ANALOG_STATUS_REG, &modem_x2_status1, 1);
         modem_x2_status1 &= 0x01;
         #endif

         if (!(modem_x2_status1 ))  /* download patch only for V34 */
         {
            cam_type = 2;
            PrintMsg( "PATCH:DATA" );
            dnld_patch(data_patch);

            LOAD_DSP_CAMJAM
            ack_or_response = ACK;
            send_pkt_to_dsp();
         }
         break;

      case RENEGOTIATING_PATCH:
         #if MODEM_X2_MODE == 1
         dspdrv_ReadCram(ANALOG_STATUS_REG, &modem_x2_status1, 1);
         modem_x2_status1 &= 0x01;
         #endif

         if (!(modem_x2_status1 ))  /* download patch only for V34 */
         {
            cam_type = 0;
            LOAD_DSP_CAMJAM
            ack_or_response = ACK;
            send_pkt_to_dsp();

            PrintMsg( "PATCH:TRAINING" );
            dnld_patch(training_patch);
         }
         break;

      case VOICE_PATCH:
         if ((fax_class == 1 ) || (fax_class == 8))
         {
            PrintMsg( "PATCH:VOICE" );
            dnld_patch(voice_patch);
            cam_type = 3;
            LOAD_DSP_CAMJAM
            ack_or_response = ACK;
            send_pkt_to_dsp();
         }
         break;

       default:
          PrintMsg( "PATCH:INVALID!" );
          break;
   }
#endif
}

/****************************************************************************
 *
 *   Routine:           dnld_patch()
 *
 *   Author:            RSA
 *
 *   Creation Data:     12/8/1996
 *
 *   Description:
 *
 *   Input Parameters:  const uword patch_tbl[]
 *
 *   Output Parameters: Nothing
 *
 *   Global Variables Changed: None
 *
 *   Users:
 *
 *   -----------------------------------------------------------
 *   -                       Modifications                     -
 *   -----------------------------------------------------------
 *
 *   Author & Date:  RSA
 *   Description:
 *   Reason:
 *
 ****************************************************************************/

void dnld_patch(const uword patch_tbl[])
{
#if (PATCHLESS_EXTERNAL == 0)
   uword length, nblocks, i, j, index, mem_addr;

   /* read out the number of patch sections */
   index = 0;
   nblocks = patch_tbl[index++];

   for (i=0; i<nblocks; i++)
   {
      /* get the length of the section and the
	    starting address   */
      length   = patch_tbl[index++];
      mem_addr = patch_tbl[index++];

      ack_or_response = NO_REPLY;

      for (j=0; j<length; j++)
         write_to_dsp(mem_addr++, patch_tbl[index++]);
   }
#endif
}

void write_to_dsp( uword mem_add, uword data_val )
{
   ack_or_response = NO_REPLY;       /* No DSP acks during downloads */

 	current_command [0] = PACKET_DSP_PROGRAM_MEMORY_WRITE;
	current_command [1] = 0x00;
 	current_command [2] = PACKET_DSP_PROGRAM_MEMORY_WRITE_LEN;
 	current_command [3] = 0x00;
 	current_command [4] = mem_add;
 	current_command [5] = (mem_add >> 8);
 	current_command [6] = 0;            /* MCON = 00 */
 	current_command [7] = 0;
 	current_command [8] = data_val;
 	current_command [9] = (data_val >> 8);

 	send_pkt_to_dsp();
}


void dsp_poke(uword data, uword addr)
{
	ubyte mcon = 0;
	ubyte *temp;

	current_command [0] = PACKET_DSP_PROGRAM_MEMORY_WRITE;
	current_command [1] = 0x00;
   current_command [2] = PACKET_DSP_PROGRAM_MEMORY_WRITE_LEN;
   current_command [3] = 0x00;
   current_command [4] = addr;
   current_command [5] = addr>>8;
   current_command [6] = mcon;
   current_command [7] = mcon>>8;
   current_command [8] = data;
   current_command [9] = data>>8;

 	temp = (ubyte *)(COM_RAM);
	*temp = 0x0c0;

   ack_or_response = ACK;
   send_pkt_to_dsp();

}

uword dsp_peek(uword addr)
{
 ubyte mcon_lo;
 ubyte mcon_hi;
 ubyte pram_addr_lo;
 ubyte pram_addr_hi;
 uword data_byte;

			mcon_lo = 0;  /* should they be 0 all the time? */
			mcon_hi = 0;
			pram_addr_lo = addr & 0x00FF;
			pram_addr_hi = (addr >> 8) & 0x00FF;

		 	LOAD_DSP_PROGRAM_MEMORY_READ

			dsp_cp_packet = PACKET_PROGRAM_MEM_READBACK;
		   ack_or_response = RESPONSE;
   		send_pkt_to_dsp();

			data_byte = (dsp_response_data[6] << 8);
			data_byte |= dsp_response_data[7];

			data_byte = (data_byte | 8000);

         return(data_byte);

}

void do_modem_config_patch1(ubyte dmy_cam_type1)
{
#if (PATCHLESS_EXTERNAL == 0)
   ubyte cam_type;

   cam_type = dmy_cam_type1;
   LOAD_MODEM_CONFIG_PATCHES
   ack_or_response = ACK;
   send_pkt_to_dsp();
#endif
}
