/*                                             */
/*   Cirrus Logic, Inc.  Company Confidential  */
/*   Patch L to C Conversion Utility           */
/*                                             */

#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <dos.h>
#include <stdlib.h>
#include <alloc.h>
#include    <process.h>
#include <ctype.h>
#include <conio.h>

#define  DSP_SIZE    256L*1024L
#define  BLOCK_SIZE  2048

typedef struct begin_address
        {    long    address;
            long    length;
        } b_address;
int   ishex(char *);


FILE  *dspfp=NULL;
FILE  *dumpfp=stderr;
char  buffer[256],buffer_last[256],buffer_15[256];
FILE  *binfp=NULL;
FILE  *dsporig=NULL;
FILE  *special=NULL;
FILE  *regular=NULL;

void printmarker(long counter);

main(int argc, char *argv[])
{
   char               dspfile[80];
   char               c_file[80];
   char               array_name[50];
   char               szbuf[80];
   char               *ptstring;
   char               *adrptr1,*adrptr2;
   char               *adrptr1_last,*adrptr2_last;
   long               cur_addr;
   long               cur_addr_last,count=0;
   int                nPatchLength = 0,i,j;
   int                length=0;
   b_address        address_length[200];
   int             num_of_15=0,found_15=0;

   fprintf(dumpfp, "PAT2C  Version 2.00   Copyright (C) 1997 Cirrus Logic, Inc.\n");
   fprintf(dumpfp, "PATCH L-TO-C CONVERSION UTILITY \n");

   if ((argc < 2) || strcmpi(strrchr(argv[1], '.'), ".l")) {
       fprintf(dumpfp, "Usage: pat2c  patch_filename.l [array_name]\n");
       return 1;
      }

   strcpy(dspfile,argv[1]);

   sprintf(array_name,"patch");
   if (3==argc)
      strcpy(array_name,argv[2]);


   if ((dsporig = (FILE *)fopen(dspfile, "r")) == NULL)
   {
       fprintf(dumpfp, "cannot open %s, errno = %d\n", dspfile, errno);
       return 2;
   }

   if ((regular = (FILE *)fopen("fregular", "w+")) == NULL)
   {
       fprintf(dumpfp, "cannot open %s, errno = %d\n", dspfile, errno);
       return 2;
   }

   if ((special = (FILE *)fopen("fspecial", "w+")) == NULL)
   {
       fprintf(dumpfp, "cannot open %s, errno = %d\n", dspfile, errno);
       return 2;
   }

   strcpy(c_file,argv[1]);
   ptstring = strchr(c_file,'.');
   if (ptstring)
      *ptstring = 0x00;
   strcat(c_file,".c");

   while (fgets(buffer_last, sizeof(buffer_last), dsporig))
   {
        strcpy(buffer_15,buffer_last);
        adrptr1_last = strtok(buffer_last, " \t\n");
        adrptr2_last = strtok(NULL, " \t\n");
        if ((!ishex(adrptr1_last + 2)) || (!ishex(adrptr2_last + 2)))
            continue;
        if (!strcmp(adrptr1_last,"'H0015"))
        {
            if (num_of_15 == 0)
                 fprintf(regular,"%s",buffer_15);
            else
            {    found_15=1;
                 fprintf(special,"%s",buffer_15);
                 fgets(buffer_last, sizeof(buffer_last), dsporig);
                 fprintf(special,"%s",buffer_last);
            }
            num_of_15++;
        }
        else
             fprintf(regular,"%s",buffer_15);

    }
   fclose(dsporig);
   fclose(regular);
   fclose(special);

   system("type fregular > nregular");

   if (found_15)
   {
        if ((dspfp = (FILE *)fopen("nregular", "a+")) == NULL)
        {
            fprintf(dumpfp, "cannot open %s, errno = %d\n", dspfile, errno);
            return 2;
        }
        if ((special = (FILE *)fopen("fspecial", "r")) == NULL)
        {
            fprintf(dumpfp, "cannot open %s, errno = %d\n", dspfile, errno);
            return 2;
        }
        while (fgets(buffer_last, sizeof(buffer_last), special))
        {
            fprintf(dspfp,"%s",buffer_last);
        }
   }
   fclose(dspfp);
   fclose(special);

   if ((dspfp = (FILE *)fopen("nregular", "r")) == NULL)
   {
        fprintf(dumpfp, "cannot open %s, errno = %d\n", dspfile, errno);
        return 2;
   }

   for (i=0;i<100;i++)
      {
       address_length[i].address = 0L;
       address_length[i].length = 0L;
      }

    if ((binfp = (FILE *)fopen(c_file,"w+t")) == NULL)
    {
        fprintf(dumpfp,"cannot open %s, errno = %d\n",c_file,errno);
        return 2;
    }

      while (fgets(buffer_last, sizeof(buffer_last), dspfp))
      {
        adrptr1_last = strtok(buffer_last, " \t\n");
        adrptr2_last = strtok(NULL, " \t\n");
        if ((!ishex(adrptr1_last + 2)) || (!ishex(adrptr2_last + 2)))
            continue;
        else break;
      }
      sscanf(adrptr1_last + 2, "%lx",&cur_addr_last);

    while (fgets(buffer, sizeof(buffer), dspfp))
    {
        adrptr1 = strtok(buffer, " \t\n");
        adrptr2 = strtok(NULL, " \t\n");

        if ((!ishex(adrptr1 + 2)) || (!ishex(adrptr2 + 2)))
            continue;

        sscanf(adrptr1 + 2, "%lx",&cur_addr);

        if (cur_addr > 0xffff)
        {
            fprintf(dumpfp," warning : address is out of range 0x%lx \n",cur_addr);
            continue;   // high limit for now
        }

        if ((cur_addr_last + 1) == cur_addr)
        {
            strcpy(buffer_last,buffer);
            cur_addr_last = cur_addr;
            nPatchLength++;
        }
        else
        {
            address_length[length].address = cur_addr_last;
            address_length[length].length  = nPatchLength+1;
            length++;
            nPatchLength = 0;
            strcpy(buffer_last,buffer);
            cur_addr_last = cur_addr;
        }
    }

    sscanf(adrptr1 + 2, "%lx",&cur_addr);
    printmarker(count);
    count++;
    if ((cur_addr_last + 1) == cur_addr)
    {
        address_length[length].address = cur_addr_last;
        address_length[length].length  = nPatchLength+1;
    }
    else
    {
        address_length[length].address = cur_addr_last;
        address_length[length].length  = nPatchLength+1;
    }

    sprintf(szbuf,"const unsigned short %s[]={\n",array_name);
    fprintf(binfp,szbuf);

    rewind(dspfp);
    count=0;
    fprintf(binfp," 0x%04x, /* Number of block */\n", length+1);
    for (i=0;i<length+1;i++)
    {
        fprintf(binfp," 0x%04x, /* length */\n", address_length[i].length);
        fprintf(binfp," 0x%04x, /* address */\n", address_length[i].address - (address_length[i].length - 1));
        for (j = 0;j < address_length[i].length;j++)
            {   fgets(buffer, sizeof(buffer), dspfp);
                adrptr1 = strtok(buffer, " \t\n");
                adrptr2 = strtok(NULL, " \t\n");

                if ((!ishex(adrptr1 + 2)) || (!ishex(adrptr2 + 2)))
                    continue;
                printmarker(count);
                count++;

                sscanf(adrptr2 + 2, "%lx",&cur_addr);
                if (address_length[i+1].length == 0 && (j == (address_length[i].length-1)))
                   {
                    fprintf(binfp," 0x%04x",cur_addr);
                   }
                else
                   fprintf(binfp," 0x%04x,\n",cur_addr);
            }
    }
   fprintf(binfp," \n};\n");    // end of this file
   system("del fregular");
   system("del fspecial");
   system("del nregular");

   fclose(dspfp);
   fclose(binfp);
   return 0;

}

void printmarker(long counter)
{
     gotoxy(wherex(), wherey());
     switch (counter % 4L) {
         case 0:
             fprintf(stdout, "|");
             break;
         case 1:
             fprintf(stdout, "/");
             break;
         case 2:
             fprintf(stdout, "-");
             break;
         case 3:
             fprintf(stdout, "\\");
             break;
     }
     gotoxy(wherex() - 1, wherey());
}

ishex(char *ptr)
{

    if(!(*ptr))
        return(0);
    while (*ptr)  {
    if (isxdigit(*ptr))
            ptr++;
        else
            return(0);
    }

    return(1);
}


