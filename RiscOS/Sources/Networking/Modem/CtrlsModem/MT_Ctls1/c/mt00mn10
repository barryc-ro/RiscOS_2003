/******************************************************************************
/
/     Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994. All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to R. Scott Associates.
/     its contents must not be revealed, used or disclosed to anyone or
/     company with out written permission by R. Scott Associates.  the
/     information contained herein is solely for the use of R. Scott
/     Associates.
/
/       File:            mt00mn10.c
/
/       Version:        1.01
/
/       Function:       Main
/
/       Product:        Modem Task Driver for Merlin Chip Sets
/
/       History:        mt00mn10.c v1.00
/
/       Created:        3/01/94
/                       1/28/96
/
/        ------------------------------------------------------
/        -               Modifications             -
/        ------------------------------------------------------
/
/
******************************************************************************/

#include  "SYS_DEF.H"
#include  "cp_dsp.h"
#include  "MT_CODEF.H"
#include  "MT_HWDEF.H"
#include  "MT_COPRO.H"
#include  "MT_HWPRO.H"
#include  "MT_V8V34.H"
#include  "MT_COEXT.H"
#include  "mt_macro.h"
#include  "ptt.h"

/* RJM040396 */
/* VCV support */
#include "vcv_def.h"
#include "vcv_cpro.h"

/* RJM100196 */
/* Dynamic patch download support */
#include "mt_def.h"
#include "dsppatch.h"
#include "homolig1.h"

void update_modem_status(void);
void mt_bg(void);
void mt_timer(void);
void mt_reset(void);
void mt_drop(ubyte);
void mt_connect(ubyte, ubyte, ubyte, ubyte, ubyte, ubyte, ubyte, ubyte,ubyte);
/**start change for v8/v34 support ***************************************/
/* void mt_set_rate_seq(ubyte);                                          */
#if MODEM_X2_MODE == 1
void mt_set_rate_seq(uword,uword,uword);
#else
void mt_set_rate_seq(uword,uword);
#endif
void v8_orig(void);
void v8_answ(void);
void set_v8_tx_msg(void);
/****end change for v8/v34 support ***************************************/
void mt_return_to_idle(void);

/* RJM111296 */
/* V80 suipport */
extern V80_modem_state_ind(ubyte,ubyte,ubyte);
/*MRM22096*/
/*timer for v32bis timeout when in v34 mode */

uword     v8_timer ;
uword     sq_timer ;
uword cd_timer = 0; /* ramn 3/2/96 */
uword sig_chk_timer = 0; /* ramn 3/5/96 */
extern ubyte spd_of_prv_conn_up; /* ramn 3/16/96 */
extern ubyte spd_of_prv_conn_dn; /* ramn 3/16/96 */
extern ubyte rtr_timer; /* ramn 3/19/96 */
extern ubyte retrain_started; /* rjm 111296 */
extern ubyte modem_mode;  /* ramn 3/12/96 */

extern ubyte dsp_response_data[15]; /* ramn 4/18/96 */
extern uword rtrn_timer_set; /* ramn 11/21/96 */

/* RJM100196 */
/* Dynamic patch download support */
ubyte last_mdm_status;

void PrintMsg(char *);
void outchar(unsigned char);
extern ubyte test_in_progress;
extern ubyte hook;         /* Flags if modem is on hook or not */
#if INTERNATIONAL_CODE == 1
extern void shunt_ath1_task(void);
extern ubyte Tone_signal_level_lo;
#endif
/*******************************************************************************
/
/    update_modem_status
/
/    Author:   RSA
/
/    Creation Date: 10/01/94
/
/    Description:   This routine will read modem status from the DSP
/                       and map it from CONNECTED to REMOTE_TEST when
/                       necessary.  It also needs to map RENEGOTIATING
/                       to RETRAIN.
/
/    Input Parameters:   None
/
/    Output Parameter:   None
/
/    Global Variables Changed:   modem_status
/
/    Users: (routines that used this)   mt_bg
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
*******************************************************************************/

void update_modem_status(void)
{
    ubyte temp_modem_status;

    modem_status = read_dsp_modem_status_reg() & MODEM_STATUS_MASK;

    if( modem_status != last_mdm_status )
    {
        temp_modem_status = last_mdm_status;
        last_mdm_status = modem_status;

        switch( modem_status )
        {
          case RETRAINING:
            PrintMsg( "MdmStat:ReTrn" );
            retrain_timer = 2500;
            V80_modem_state_ind(RETRAINING,line_bit_rate,line_bit_rate);

            modem_state = RETRAIN;
            rtrn_state  = RETRAIN_DP;
            retrain_started = TRUE;
            if (temp_modem_status == CONNECTED)
                dsppatch(RETRAIN_PATCH);
            break;

          case RENEGOTIATING:
            PrintMsg( "MdmStat:ReNeg" );
            V80_modem_state_ind(RENEGOTIATING,line_bit_rate,line_bit_rate);
            retrain_timer = 500;
            modem_status = RETRAINING;

            modem_state = RETRAIN;
            rtrn_state  = RETRAIN_DP;
            retrain_started = TRUE;
            if (temp_modem_status == CONNECTED)
                dsppatch(RENEGOTIATING_PATCH);
            break;

          case CONNECTED:
            PrintMsg( "MdmStat:Conn" );
            if((!test_in_progress) && (hook == FALSE))
            {
                dsppatch(DATA_PATCH);
            }
            break;

          default:
            break;
        }
    }

    if ((modem_status == CONNECTED) &&
        (received_RDL || digital_loopback_on))
    {
        PrintMsg( "MdmStat:RmTst" );
        modem_status = REMOTE_TEST;
    }

    if (modem_status == DROPPING)
    {
        PrintMsg( "MdmStat:Drop" );
        modem_state = DROP1;
    }
}


/*******************************************************************************
/
/                     mt_bg
/
/    Author:   RSA
/
/    Creation Date: 03/01/94
/
/    Description:   This routine is called by the host to update the modem
/                   task state machine.
/
/    Input Parameters:   None
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)   modem_task
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
*******************************************************************************/
void mt_bg(void)
{
   ubyte *string; //debug2
    update_modem_status();

    switch  (modem_state)
    {
      case (IDLE):
#if INTERNATIONAL_CODE == 1
		/* MH120397 ath1_problem ... */
		shunt_ath1_task();
//		string = (ubyte *)"h1";	  // debug2
//	    output_info(string,(ubyte)sr14.verbose_form); // debug1
		/* end of changes ... */
#endif
        break;

      case (ORIG):
        if (!s7_timer)
            modem_state = DROP1;

        if (modem_status == CONNECTED)
            modem_state = CON;
        else if (modem_status == IDLE)
            modem_state = DROP1;

        if (v8_configured)
            v8_orig();
        break;

      case (ANSW):
        if (!s7_timer)
            modem_state = DROP1;

        if (modem_status == CONNECTED)
            modem_state = CON;
        else if (modem_status == IDLE)
            modem_state = DROP1;

        if (v8_configured)
            v8_answ();
        break;

      case (CON):
        connect_processor();
        check_rdl();
        break;

      case (DROP1):
        fall_back_en = TRUE;
        fall_frwd_en = FALSE;
        fall_back_attempt = FALSE;
        fall_frwd_attempt = FALSE;
        received_RDL = FALSE;
        digital_loopback_on = FALSE;
        modem_state = DROP2;
        drop_flag = FALSE;
        rtrn_timer_set = FALSE;
        spd_of_prv_conn_up = 0 ;
        spd_of_prv_conn_dn = 0 ;
        LOAD_MODEM_INIT
        ack_or_response = ACK;
        send_pkt_to_dsp();

/* GPIO 9 MH092397  on-hook */
#if INTERNATIONAL_CODE == 1
      set_loc_line_relay(ON_HOOK);
      set_safe1_en_relay(ACTIVATE);	/* JL112697 output = HI */
//	   set_shunt_relay(ACTIVATE); /* MH112697 */
      Tone_signal_level_lo = 0;
#else
      set_safe1_en_relay(ACTIVATE);	/* JL112697 output = HI */
#endif

        init_call_progress(ON_HOOK);
        break;

      case (DROP2):
        rtrn_timer_set = FALSE;
        if (modem_status == IDLE)
        {
            modem_state = IDLE;
        }
        break;

      case (RETRAIN):
        retrain_processor();
        break;

      case (FAX_ANSW):
        if (modem_status == FAX_CONNECTED)
            modem_state = FAX_CON;
        else if (modem_status == IDLE)
            modem_state = FAX_DROP;
        break;

      case (FAX_ORIG):
        if (modem_status == FAX_CONNECTED)
            modem_state = FAX_CON;
        else if (modem_status == IDLE)
            modem_state = FAX_DROP;
        break;

      case (FAX_CON):
        if (modem_status == IDLE)
            modem_state = FAX_DROP;
        break;

      case (FAX_DROP):
        if (modem_status == IDLE)
            modem_state = IDLE;
        break;

      case (FAX_AUTO_ANSWER):
        if (modem_status == FAX_CONNECTED)
            modem_state = FAX_CON;
        else if (modem_status == IDLE)
            modem_state = IDLE;
        break;

      case (VOICE_CON):
        break;

      case VCV_WAIT_RDATA:
        low_location = 0x2d;
        high_location = 0x00;
        LOAD_MODEM_READ_DSP_PACKET_BANK0

        dsp_cp_packet = 0x15;
        ack_or_response = RESPONSE;
        send_pkt_to_dsp();

        switch( dsp_response_data[0] )
        {
          case 0x0E:  /* RDATA1 */
          case 0x0F:  /* RDATA2 */
            low_value=0x10;
            high_value=0x00;
            LOAD_MODEM_WRITE_DSP_PACKET_BANK0

            ack_or_response = NO_REPLY;
            send_pkt_to_dsp();
            break;

          case 0x10:  /* RDATA3 */
            modem_state = VCV_WAIT_ETIMER_DEC;
            break;

          default:
            break;
        }
        break;

      case VCV_WAIT_ETIMER_DEC:
        low_location = 0xdd;
        high_location = 0x00;
        LOAD_MODEM_READ_DSP_PACKET_BANK0
        dsp_cp_packet = 0x15;
        ack_or_response = RESPONSE;
        send_pkt_to_dsp();

        if( dsp_response_data[0] < 4 )
        {
            low_value=0x20;
            high_value=0x00;
            LOAD_MODEM_WRITE_DSP_PACKET_BANK0
            ack_or_response = NO_REPLY;
            send_pkt_to_dsp();
            modem_state = VOICE_CON;
        }
        break;
    }
}


/*******************************************************************************
/
/                      mt_timer
/
/    Author:   RSA
/
/    Creation Date: 03/01/94
/
/    Description:   This routine will update modem task timers.
/                       It should be called every 10 ms.
/                   All timers in the modem task are 10ms timers
/
/    Input Parameters:   None
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)  modem_timer
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
*******************************************************************************/
void mt_timer(void)
{
    /*  These timers count down to one.
         Zero is the inactive state  */

    if(mse_poor_timer)
        mse_poor_timer--;
    if(mse_good_timer)
        mse_good_timer--;
    if(mse_invalid_timer)
        mse_invalid_timer--;
    if(retrain_timer)
        retrain_timer--;
    if(phone_relay_timer)
        phone_relay_timer--;
    if(dsp_timer)
        dsp_timer--;
    if(v8_timer)
        v8_timer--;
    if(sq_timer)
        sq_timer--;
    if(cd_timer)
        cd_timer--;
    if(sig_chk_timer)
        sig_chk_timer--;
    if(mt_cts_timer)
        mt_cts_timer--;
    if(s7_timer)
        s7_timer--;
    if(CI_silence_timer)
        CI_silence_timer--;
}

/*******************************************************************************
/
/                   mt_reset
/
/    Author:   RSA
/
/    Creation Date: 03/01/94
/
/    Description:   This routine will terminate all activities and return
/                       the modem to its initial power-up IDLE state.
/
/    Input Parameters:   None
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/                                       dtmf_tone_duration
/                                       dtmf_interdigit_delay
/
/    Users: (routines that used this)  modem_reset
/                                              acu_reset
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void mt_reset(void)
{
   /*   Disconnect modem processing   */

#if INTERNATIONAL_CODE == 1
        set_loc_line_relay(OFF);	/* MH092397 */
        set_safe1_en_relay(ACTIVATE);	/* JL112697 output = HI */
        set_shunt_relay(ACTIVATE);	/* MH112697 */
        Tone_signal_level_lo = 0;
#else
        set_safe1_en_relay(ACTIVATE);	/* JL112697 output = HI */
#endif
   set_hook_relay(OFF);
   set_speaker(OFF);

   modem_state = IDLE;

   dtmf_tone_duration = default_dtmf_tone_duration;
   dtmf_interdigit_delay = default_dtmf_interdigit_delay;

   LOAD_MODEM_INIT
   ack_or_response = ACK;
   send_pkt_to_dsp();

   init_call_progress(ON_HOOK);

   fall_back_en = TRUE;
   fall_frwd_en = FALSE;
   fall_back_attempt = FALSE;
   fall_frwd_attempt = FALSE;
   received_RDL = FALSE;
   check_RDL_flag = FALSE;
   drop_flag = FALSE;
   rtrn_timer_set = FALSE;
}


/*******************************************************************************
/
/                     mt_drop
/
/    Author:   RSA
/
/    Creation Date: 03/01/94
/
/    Description:   This routine will force the modem task to DROP1 state.
/
/    Input Parameters:   v32_cleardown_enabled = 0 Disabled
/                                  1 Enabled
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)  modem_drop
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void mt_drop(ubyte v32_cleardown_enable)
{
    if ((modem_status != IDLE) && (v32_cleardown_enable) && (!drop_flag))
    {
        #if MODEM_X2_MODE == 1
        mt_set_rate_seq(0,0,0);
        #else
        mt_set_rate_seq(0,0);
        #endif

        bit_rate = 0;
        dsp_mode = modem_mode;
        current_command[4] = 0;  /* ramn 3/5/96 */
        current_command[5] = 0;
        LOAD_MODEM_RENEGOTIATE
        ack_or_response = ACK;
        send_pkt_to_dsp();
        PrintMsg( "RENEG in mt_drop()" );
        drop_flag = TRUE;
        modem_state  = RETRAIN;
        rtrn_state   = RETRAIN_DP;
        send_renegot = TRUE;
        retrain_started = TRUE;
        retrain_timer = 500;
    }
    else
    {
        modem_state=DROP1;
    }
}


/*******************************************************************************
/
/                     mt_connect
/
/    Author:   RSA
/
/    Creation Date: 03/01/94
/
/    Description:   This routine will initiate the handshake process.
/              It sets modem_state to either ANS1 or ORG1 state.
/
/
/    Input Parameters:
/         ubyte answer:
/                   0 = answer mode
/                   1 = originate mode
/
/         ubyte bit rate:
/                   0 = 75/600 bps
/                   1 = 75/1200 bps
/                   2 = 300 bps
/                   3 = 1200 bps
/                   4 = 2400 bps
/                   5 = 4800 bps
/                   6 = 7200 bps
/                   7 = 9600 bps
/                   8 = 12000 bps
/                   9 = 14400 bps
/                 10 = 16800 bps
/                 11 = 19200 bps
/                 12 = 24000 bps
/                 13 = 28800 bps
/                 14 = reserved
/           15 = reserved
/
/         ubyte configuration mode:
/                   0 = Bell 103
/                   1 = Bell 212A
/                   2 = V.21
/                   3 = V.21 Channel 2
/                   4 = V.23 ADX
/                   5 = V.23 HDX
/                   6 = V.22
/                   7 = V.22bis
/                   8 = V.27 short
/                   9 = V.27 long
/                   10 = V.27 ter
/                   11 = V.29
/                   12 = V.32 bis
/                   13 = V.17 short
/                   14 = V.17 long
/                   15 = voice
/
/         ubyte clock_code:
/                   0 = TXC from modem
/                   1 = TXC from DTE, pin 24
/                   2 = TXC from RXC
/
/         ubyte leased:
/                   0 = PSTN
/                   1 = 2 wire leased
/                   2 = 4 wire leased
/
/         ubyte automode:
/                   0 = off
/                   1 = on
/
/         ubyte fax connection type:
/                   0 = data only
/                   1 = fax only
/                   2 = data and fax
/
/         ubyte call_tone_enabled:
/                   0 = call tone off
/                   1 = call tone on
/
/      fax connection type is not used in this version
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users:    modem_connect()
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
*******************************************************************************/
void mt_connect(ubyte orig, ubyte bit_rate, ubyte mode, ubyte clock_code,
		   ubyte leased, ubyte automode, ubyte fax, ubyte call_tone_enabled,ubyte etc_enabled)
{
    ubyte dsp_mode, trellis;
    ubyte line_select,etc_mode,v8_mode,v23_mode,modem_b_loop;

    line_select = 0;
    etc_mode = 0;
    v8_mode = 0 ;
    v23_mode = 0;
    modem_b_loop = 0;

    /* save connect params for issuing V8 second connect to DSP */
    mt_conn_orig       = orig;
    mt_conn_bit_rate   = bit_rate;
    mt_conn_mode       = mode;
    mt_conn_clock_code = clock_code;
    mt_conn_leased     = leased;
    mt_conn_automode   = automode;
    mt_conn_fax        = fax;
    mt_conn_etc_enabled= etc_enabled;
    mt_conn_call_tone_enabled = call_tone_enabled;

    /* set modem module word based on connect paramter */
    if (automode)
    {
        v8_mod_modes = V8_MOD_MODE_DEFAULT;

#if (MODEM_V90_MODE == 1)
        if (mode < MT_V90)
            v8_mod_modes &= ~V90_MASK;
#endif

        if (mode < MT_V34)
        {
            v8_mod_modes &= ~V34FULL_MASK;
            v8_mod_modes &= ~V34HALF_MASK;
        }
        if (mode < MT_V32)
        {
            v8_mod_modes &= ~V32_MASK;
        }
        if (mode < MT_V29)
        {
            v8_mod_modes &= ~V29HALF_MASK;
        }
        if (mode < MT_V23_HDX)
        {
            v8_mod_modes &= ~V23FULL_MASK;
            v8_mod_modes &= ~V23HALF_MASK;
        }
        if (mode < MT_V21)
        {
            v8_mod_modes &= ~V21_MASK;
        }
    }
    else /* NOT automoding, issue only 1 connect rate */
    {
        v8_mod_modes = 0;
        switch (mode)
        {
        #if (MODEM_V90_MODE == 1)
          case (MT_V90):
            v8_mod_modes |= V90_MASK;
            break;
        #endif

          case (MT_V34):
            v8_mod_modes |= V34HALF_MASK;
            break;

          case (MT_V32):
            v8_mod_modes |= V32_MASK;
            break;

          case (MT_V29):
            v8_mod_modes |= V29HALF_MASK;
            break;

          case (MT_V23_HDX):
            v8_mod_modes |= V23FULL_MASK;
            v8_mod_modes |= V23HALF_MASK;
            break;

          case (MT_V21):
            v8_mod_modes |= V21_MASK;
            break;
        }
    }
    set_v8_tx_msg();

    if ( (fax == 2) && (!orig) )
        modem_state = FAX_AUTO_ANSWER;
    else if (fax == 1)
    {
        if (!orig)
        {
            modem_state=FAX_ANSW;
        }
        else
        {
            modem_state=FAX_ORIG;
        }
        v8_configured = FALSE;
        automode = FALSE;
    }
    else if (fax == 3)
    {
        modem_state = VOICE_CON;
        v8_configured = FALSE;
        automode = FALSE;
    }
    else if (!orig)
    {
        modem_state=ANSW;
        if (CM_received)
            v8_mode = CM_RXD;
    }
    else
    {
        modem_state=ORIG;
        if (JM_received)
            v8_mode = JM_RXD;
    }
    dsp_mode = mode;


    if (mode == MT_V32)
        trellis = 1;
    else
        trellis = 0;

    if ((mode == 4) || (mode == 5))
    {
        if(orig)
            v23_mode = 1;
    }

    if (!fax)
    {
        if ((orig) && (v8_orig_en))
            automode|=2;
        else if ((!orig) && (v8_answ_en))
            automode|=2;
    }

    #ifdef DEBUG_PORT
       outhex_cr_lf(dsp_mode);
    #endif

    LOAD_MODEM_CONNECT
    ack_or_response = ACK;
    send_pkt_to_dsp();
    retrain_timer = 0;
    mse_good_timer = 0;
    mse_poor_timer = 0;
    mse_invalid_timer = 0;
    s7_timer = cd_wait_time;
    fall_frwd_en = FALSE;
    fall_back_attempt = FALSE;
    fall_frwd_attempt = FALSE;
    determine_fall_back_en();
}



/*******************************************************************************
/
/                     mt_set_rate_seq
/
/    Author:   RSA
/
/    Creation Date: 03/01/94
/
/    Description:   This routine will inform the modem task the selected
/                        baud rates for the connection
/
/    Input Parameters: ubyte rates - selected baud rates. Values may be added
/                             together to specify several speeds.
/                              When viewed as 8 bit number the value is
/                              bit mapped.
/
/                          Value     Baud Rate
/                              1      reserved
/                              2      4800
/                               4     7200
/                               8     9600
/                              16     12000
/                              32     14400
/                              64     reserved
/                             128     reserved
/
/    Output Parameter:   None
/
/    Global Variables Changed: possible_rates, max_rate
/
/    Users: modem_set_rate_seq()
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
/***start change for v8/v34 support **************/
/* void mt_set_rate_seq(ubyte rates)             */
/* {                                             */
/*    possible_rates = rates;                    */
#if MODEM_X2_MODE == 1
void mt_set_rate_seq(uword tx_rx,uword rx_only,uword xl_rx)
#else
void mt_set_rate_seq(uword tx_rx,uword rx_only)
#endif
{
/***end change for v8/v34 support ***************/
   LOAD_MODEM_SET_RATE_SEQ
   ack_or_response = ACK;
   send_pkt_to_dsp();
}

/*******************************************************************************
/
/    Procedure:     mt_return_to_idle
/
/    Author:   RSA
/
/    Creation Date: 03/01/94
/
/    Description:   This routine cause the modem task to return to the
/                       IDLE state.
/
/    Input Parameters:   None
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void mt_return_to_idle(void)
{
    LOAD_MODEM_INIT
    ack_or_response = ACK;
    send_pkt_to_dsp();
    drop_flag = FALSE;
    modem_state = IDLE;
    retrain_started = FALSE;

#if INTERNATIONAL_CODE == 1
    set_loc_line_relay(ON_HOOK);		/* MH100397 */
    set_safe1_en_relay(ACTIVATE);	/* JL112697 output = HI */
//    set_shunt_relay(ACTIVATE); /* MH112697 */
#else
    set_safe1_en_relay(ACTIVATE);	/* JL112697 output = HI */
#endif
    init_call_progress(ON_HOOK);
}



