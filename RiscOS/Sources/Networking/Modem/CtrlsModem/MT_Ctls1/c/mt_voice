/*********************************************************************
/
/    Copyright, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996.
/     All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 120
/        Raleigh, NC 27615
/        (919) 846-7171
/
/    This document contains material confidential to RSA.
/    Its contents must not be revealed, used or disclosed to
/    anyone or company with out written permession by RSA.
/    The information contained herein is solely for the use of RSA.
/
/    File: mt_voice.c
/
/    Version:  1.00
/
/    Function: Cutlass voice packet, GPIO, AFE hardware interface routines.
/
/    Product:  Cutlass / Musket
/    History:
/
/        Created: 12/11/95
/
/        ----------------------------
/        -    Modifications       -
/        ----------------------------
/
/        Author & Date: RSA
/        Description:
/        Reason:
/
*********************************************************************/

#include "SYS_DEF.H"
#include "MT_CODEF.H"
#include "MT_COEXT.H"
#include "MT_COPRO.H"

#include "audio_if.h"
#include "cp_dsp.h"
/*
#include "icd_msgs.h"
*/
#include "mt_voice.h"   /* Include after VoiceView include files */

#include "audio_if.h"

/* Constants */
#define NUM_HARDWARE_CONFIGS    22
#define HW_OFF                   0
#define HW_TX                    1
#define HW_RX                    2
#define HW_TXRX                  3

/* Function prototypes */
void dp_enable_mic (ubyte state, ubyte afe);
void dp_speaker_mode (ubyte state, ubyte afe);
void dp_speaker_level (ubyte level, ubyte afe);
void dp_receiver_gain (ubyte gain, ubyte afe);
void dp_set_hardware_state (ubyte state_parm);
void dp_audio_path (ubyte path);
void dp_send_dual_tone (uword frequency1, uword frequency2, ubyte state);
void dp_set_dtmf_levels (ubyte level1, ubyte level2);
void dp_monitor_vcv_answ_tone (void);
void dp_init_audio (void);
void dp_init_gpio (void);
ubyte dp_get_hardware_state (void);

/* External function prototypes */
extern void set_hook_relay (ubyte);

/* Global variables */
ubyte current_speaker_mode[2] = {3, 3};
AFE_STATE afe_state = {0, 0, 0, 0};
ubyte current_hardware_state = 0;

const HARDWARE_SETUP hardware_table[NUM_HARDWARE_CONFIGS] =
{
                          /* AFE1              AFE2   */
      /* Hook VCE  CID DSVD  A/D (mic) SPKR    A/D (mic) SPKR  SPK/HS */
/* 0 */ {OFF, OFF, OFF, OFF, HW_RX, HW_TXRX,   OFF,      OFF,   1}, /* Init mode */
/* 1 */ { ON, OFF, OFF, OFF, HW_RX, HW_TXRX,   OFF,      OFF,   1},
/* 2 */ {OFF,  ON, OFF, OFF, HW_RX,     OFF,   OFF,      OFF,   1},
/* 3 */ {OFF,  ON, OFF, OFF, OFF,       OFF,   OFF,      OFF,   1},
/* 4 */ { ON,  ON, OFF, OFF, HW_RX,   HW_RX,   OFF,      OFF,   1},

/* 5 */ { ON,  ON, OFF, OFF, OFF,   HW_TXRX,   OFF,      OFF,   1},
/* 6 */ {OFF,  ON, OFF, OFF, MIC,       OFF,   OFF,      OFF,   1},
/* 7 */ {OFF,  ON, OFF, OFF, OFF,     HW_TX,   OFF,      OFF,   1},
/* 8 */ {OFF, OFF, OFF, OFF, OFF,     HW_TX,   OFF,      OFF,   0},

/* 9 */ { ON, OFF, OFF, OFF, MIC,     HW_RX,   OFF,      OFF,   0},
/*10 */ {OFF, OFF,  ON, OFF, HW_RX,     OFF,   OFF,      OFF,   1},
/*11 */ {OFF, OFF,  ON, OFF, HW_RX,     OFF,   OFF,      OFF,   1},
/*12 */ { ON,  ON, OFF, OFF, HW_RX,     OFF,   OFF,      OFF,   1},

/* AFE2 Required for states 13-21 */
/*13 */ { ON,  ON, OFF, OFF, HW_RX,     OFF,   MIC,    HW_TX,   1},
/*14 */ { ON,  ON, OFF, OFF, HW_RX,     OFF,   OFF,      OFF,   1},
/*15 */ { ON,  ON, OFF, OFF, HW_RX,     OFF,   MIC,    HW_TX,   0},
/*16 */ { ON,  ON, OFF, OFF, HW_RX,     OFF,   OFF,      OFF,   0},
/*17 */ { ON,  ON, OFF,  ON, HW_RX,     OFF, HW_RX,      OFF,   1},
/*18 */ { ON,  ON, OFF,  ON, HW_RX,     OFF,   MIC,    HW_TX,   1},
/*19 */ { ON,  ON, OFF,  ON, HW_RX,     OFF,   MIC,    HW_TX,   0},
/*20 */ { ON,  ON, OFF, OFF, MIC,     HW_RX,   MIC,    HW_TX,   1},
/*21 */ { ON,  ON, OFF, OFF, MIC,     HW_RX,   MIC,    HW_TX,   1},

};


/* Externally allocated variables */
extern ubyte dsp_response_data[];


/*******************************************************************************
/
/    Procedure:     dp_voice_init_mode
/
/    Author:   RSA
/
/    Creation Date: 12/11/95
/
/    Description:   This routine forms and sends the Voice Mode Init
/                   packet to the Cutlass DSP.
/
/    Input Parameters:   ubyte mode - (1-21) See ICD document for modes.
/                        (Range from MODE_DATA_FAX to MODE_SPKRPHONE_HEADSET)
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
void dp_voice_init_mode (ubyte mode)
{
  current_command[0] = PACKET_MODEM_VCE_MODE_INIT;
  current_command[1] = 0;
  current_command[2] = 1;
  current_command[3] = 0;
  current_command[4] = mode;
  current_command[5] = 0;

  ack_or_response = ACK;
  send_pkt_to_dsp ();
}

/*******************************************************************************
/
/    Procedure:     dp_voice_send_tone
/
/    Author:   RSA
/
/    Creation Date: 12/11/95
/
/    Description:   This routine forms and sends the Voice Tx Tone
/                   packet to the Cutlass DSP.
/
/    Input Parameters:   uword frequency1 -  Low frequency of dual tone
/                        uword frequency2 - High frequency of dual tone
/                        ubyte duration - Duration in milliseconds (0 - FF)
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
void dp_voice_send_tone (uword frequency1, uword frequency2, ubyte duration)
{
  current_command[0] = PACKET_MODEM_VCE_TX_TONE;
  current_command[1] = 0;
  current_command[2] = 5;
  current_command[3] = 0;
  current_command[4] = (ubyte) (frequency1 & 0x00FF);
  current_command[5] = (ubyte) (frequency1 >> 8);
  current_command[6] = (ubyte) (frequency2 & 0x00FF);
  current_command[7] = (ubyte) (frequency2 >> 8);
  current_command[8] = duration;
  current_command[9] = 0;

  ack_or_response = ACK;
  send_pkt_to_dsp ();
}

/*******************************************************************************
/
/    Procedure:     dp_voice_send_dual_tone
/
/    Author:   RSA
/
/    Creation Date: 12/11/95
/
/    Description:   This routine tells the Cutlass DSP to send a dual tone.
/
/    Input Parameters:   uword frequency1 -  Low frequency of dual tone
/                        uword frequency2 - High frequency of dual tone
/                        ubyte state - TONE_ON (1) or TONE_OFF (0)
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
#define FREQUENCY_MULTIPLIER  68265L   /* (32767 / 4800) * 10000 */

void dp_send_dual_tone (uword frequency1, uword frequency2, ubyte state)
{
  uword f1, f2;   /* Modified frequency values */

  /*
     Convert frequencies to values expected by DSP, where the
     FREQUENCY_MULTIPLIER constant equals 32767 / 4800. Need
     to perform the calculation using integer math as floats
     are uncommon in embedded system. '10000' gives 4 decimal
     place accuracy. Using ulong's ensure no truncation, and for
     standard audio tones (<4KHz), we don't exceed 32 bits.
  */
  f1 = (uword) ( ((ulong)frequency1 * FREQUENCY_MULTIPLIER) / 10000 );
  f2 = (uword) ( ((ulong)frequency2 * FREQUENCY_MULTIPLIER) / 10000 );

  current_command[0] = PACKET_MODEM_SEND_TONE;
  current_command[1] = 0;
  current_command[2] = 5;
  current_command[3] = 0;
  current_command[4] = (ubyte) (f1 & 0x00FF);
  current_command[5] = (ubyte) (f1 >> 8);
  current_command[6] = (ubyte) (f2 & 0x00FF);
  current_command[7] = (ubyte) (f2 >> 8);
  current_command[8] = state;               /* TONE_ON (1) or TONE_OFF (0) */

  ack_or_response = ACK;
  send_pkt_to_dsp ();
}


/*******************************************************************************
/
/    Procedure:     dp_voice_set_dtmf_levels
/
/    Author:   RSA
/
/    Creation Date: 1/2/96
/
/    Description:   This routine sets the DTMF audio levels.
/
/    Input Parameters:   ubyte level1 - (0 - 254, 255)
/                        ubyte level2 - (0 - 254, 255)
/                   Values are specified as -dBm in increments of 0.1 dBm.
/                   (Ex: -10 dBm is specified as 100.)
/                   A value of 255 turns the DTMF level off.
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
void dp_set_dtmf_levels (ubyte level1, ubyte level2)
{
  current_command[0] = PACKET_MODEM_SET_DTMF_LEVELS;
  current_command[1] = 0;
  current_command[2] = 2;
  current_command[3] = 0;
  current_command[4] = level1;
  current_command[5] = level2;

  ack_or_response = ACK;
  send_pkt_to_dsp ();
}


/*******************************************************************************
/
/    Procedure:     dp_voice_pgc_init
/
/    Author:   RSA
/
/    Creation Date: 12/11/95
/
/    Description:   This routine forms and sends the Voice PGC Init
/                   packet to the Cutlass DSP to program the
/                   Programmable Gain Control circuit.
/                   The PGC is used to set speaker mode, speaker level,
/                   receiver gain, and microphone status (on/off).
/
/    Input Parameters:   uword ctid_AND - Value to AND with current PGC word
/                        uword ctid_OR  - Value to OR with current PGC word
/                        ubyte afe_id   - AFE to change (AFE1 or AFE2)
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
void dp_voice_pgc_init (uword ctid_AND, uword ctid_OR, ubyte afe_id)
{
  current_command[0] = PACKET_MODEM_VCE_PGC_INIT;
  current_command[1] = 0;
  current_command[2] = 5;
  current_command[3] = 0;
  current_command[4] = (ubyte) ctid_AND & 0x3F;   /* Low byte */
  current_command[5] = (ubyte) ctid_AND >> 8;     /* High byte */
  current_command[6] = (ubyte) ctid_OR & 0x3F;    /* Low byte */
  current_command[7] = (ubyte) ctid_OR >> 8;      /* High byte */
  current_command[8] = afe_id;
  current_command[9] = 0;

  ack_or_response = ACK;
  send_pkt_to_dsp ();
}


/*******************************************************************************
/
/    Procedure:     dp_voice_set_gpio
/
/    Author:   RSA
/
/    Creation Date: 12/11/95
/
/    Description:   This routine forms and sends the Voice GPIO Operation
/                   packet to the Cutlass DSP to program the
/                   General Purpose Input Output registers.
/                   The GPIO packet is used to set the status of these relays:
/                       - Hook   - Voice   - Caller ID   - DSVD  - SPK_HS
/                   It can also be used to return the status of:
/                       - Local Phone Off Hook Detect
/
/    Input Parameters:   ubyte gpio - Byte to write to GPIO
/                        ubyte direction - Whether to read or write to GPIO
/                               -  0 - GPIO_READ
/                               -  1 - GPIO_WRITE_OR_BYTE  - OR in the value
/                               -  2 - GPIO_WRITE_AND_BYTE - AND in the value
/
/    Output Parameter:   ubyte - Returns GPIO byte if GPIO_READ is selected.
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
ubyte dp_voice_set_gpio (ubyte gpio, ubyte direction, ubyte bank)
{
  current_command[0] = PACKET_MODEM_VCE_GPIO_OPERATION;
  current_command[1] = 0;
  current_command[2] = 3;
  current_command[3] = 0;
  current_command[4] = gpio;
  current_command[5] = direction;
  current_command[6] = bank;
  current_command[7] = 0;

  dsp_cp_packet = PACKET_DP_VCE_GPIO_STATUS;
  ack_or_response = RESPONSE;
  send_pkt_to_dsp ();

  /* If the direction is READ, then return the GPIO byte returned
     from the DSP. */
  if (direction == GPIO_READ_BYTE)
    return (ubyte) dsp_response_data[0];
  else
    return 0;
}


/*******************************************************************************
/
/    Procedure:     dp_enable_mic
/
/    Author:   RSA
/
/    Creation Date: 12/11/95
/
/    Description:   This routine sets PGC bits to change microphone state.
/
/    Input Parameters:   ubyte state - ON or OFF
/                        ubyte afe   - AFE to change (AFE1 or AFE2)
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
void dp_enable_mic (ubyte state, ubyte afe)
{
  /* Mic enable goes in bottom nibble of low byte (xxxx xxxx xxxx 11xx) */
  /* To enable mic, set bits 2 and 3 (set both ALLb and DLLb) */
  if (state == ON)
    dp_voice_pgc_init (MASK_PGC_MIC_ON_AND, MASK_PGC_MIC_ON_OR, afe);
  else
    dp_voice_pgc_init (MASK_PGC_MIC_OFF_AND, MASK_PGC_MIC_OFF_OR, afe);

  /* Record current state for debugging */
  if (afe == AFE1)
    afe_state.afe1_mic = state;
  else
    afe_state.afe2_mic = state;
}


/*******************************************************************************
/
/    Procedure:     dp_speaker_mode
/
/    Author:   RSA
/
/    Creation Date: 12/11/95
/
/    Description:   This routine sets PGC bits to change speaker mode.
/
/    Input Parameters:   ubyte mode - Speaker mode
/                               - 0 - MODE_SPEAKER_OFF
/                               - 1 - MODE_SPEAKER_TX
/                               - 2 - MODE_SPEAKER_RX
/                               - 3 - MODE_SPEAKER_TX_RX
/
/                        ubyte afe   - AFE to change (AFE1 or AFE2)
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
void dp_speaker_mode (ubyte mode, ubyte afe)
{
  /* Speaker mode goes in top nibble of high byte (xx11 xxxx xxxx xxxx) */
  uword mode_word = mode << 12;    /* Shift into position */

  /* Speaker mode range (0 to 3): Off, Tx, Rx, Tx+Rx */
  dp_voice_pgc_init (MASK_PGC_SPEAKER_MODE, mode_word, afe);

  /* Record current state for debugging */
  if (afe == AFE1)
    afe_state.afe1_speaker = mode;
  else
    afe_state.afe2_speaker = mode;
}


/*******************************************************************************
/
/    Procedure:     dp_speaker_level
/
/    Author:   RSA
/
/    Creation Date: 12/11/95
/
/    Description:   This routine sets PGC bits to change speaker volume level.
/
/    Input Parameters:   ubyte level - Speaker level
/                               - 0 - SPEAKER_MUTE
/                               - 1 - SPEAKER_LOW
/                               - 2 - SPEAKER_MEDIUM
/                               - 3 - SPEAKER_HIGH
/
/                        ubyte afe   - AFE to change (AFE1 or AFE2)
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
void dp_speaker_level (ubyte level, ubyte afe)
{
  /* Speaker level goes in bottom nibble of high byte (xxxx 11xx xxxx xxxx) */
  uword level_word = level << 10;   /* Shift into position */

  /* Speaker level range (0 to 3): Mute, Low, Medium, High */
  dp_voice_pgc_init (MASK_PGC_SPEAKER_LEVEL, level_word, afe);
}


/*******************************************************************************
/
/    Procedure:     dp_receiver_gain
/
/    Author:   RSA
/
/    Creation Date: 12/11/95
/
/    Description:   This routine sets PGC bits to change receiver gain control.
/
/    Input Parameters:   ubyte gain - Receiver gain
/                               - 0 - RECEIVER_GAIN_0DB
/                               - 1 - RECEIVER_GAIN_6DB
/                               - 2 - RECEIVER_GAIN_12DB
/                               - 3 - RECEIVER_GAIN_18DB
/
/                        ubyte afe   - AFE to change (AFE1 or AFE2)
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
void dp_receiver_gain (ubyte gain, ubyte afe)
{
  /* Receiver gain goes in bottom nibble of high byte (xxxx xx11 xxxx xxxx) */
  uword gain_word = gain << 8;      /* Shift into position */

  /* Receiver gain range (0 to 3): 0db, +6db, +12db, +16db */
  dp_voice_pgc_init (MASK_PGC_RECEIVER_GAIN, gain_word, afe);
}


/*******************************************************************************
/
/    Procedure:     dp_mute_speaker
/
/    Author:   RSA
/
/    Creation Date: 12/11/95
/
/    Description:   This routine mutes or enables the speaker.
/
/    Input Parameters:   ubyte mute - 1 = MUTE   0 = ENABLE
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
void dp_mute_speaker (ubyte mute)
{
  if (mute)
  {
    /* Save current speaker modes to restore later */
    current_speaker_mode[AFE1] = afe_state.afe1_speaker;
    current_speaker_mode[AFE2] = afe_state.afe2_speaker;

    dp_speaker_mode (SPEAKER_MODE_OFF, AFE1);
    dp_speaker_mode (SPEAKER_MODE_OFF, AFE2);
  }
  else
  {
    /* Restore saved speaker modes */
    dp_speaker_mode (current_speaker_mode[AFE1], AFE1);
    dp_speaker_mode (current_speaker_mode[AFE2], AFE2);
  }
}


/*******************************************************************************
/
/    Procedure:     dp_mute_mic
/
/    Author:   RSA
/
/    Creation Date: 12/11/95
/
/    Description:   This routine mutes or enables the receiver (microphone).
/
/    Input Parameters:   ubyte mute - 1 = MUTE   0 = ENABLE
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
void dp_mute_mic (ubyte mute)
{
  /* Enable or disable the microphone.
     mute == 1 means to disable mic */
  dp_enable_mic (!mute, AFE1);
  dp_enable_mic (!mute, AFE2);
}


/*******************************************************************************
/
/    Procedure:     dp_set_hardware_state
/
/    Author:   RSA
/
/    Creation Date: 12/11/95
/
/    Description:   This routine sets the hardware mode, relays, etc. to the
/                   requested state.  Accepts an index into hardware_table,
/                   which implements the relay / AFE states described in the
/                   'V.34 ISA CARD' description by Vishy Canadam.
/
/    Input Parameters:  ubyte requested_state - Table entry in hardware_table
/                       - 1  - MODE_DATA_FAX
/                       - 2  - MODE_REC_PHONE
/                       - 3  - MODE_PLAY_PHONE
/                       - 4  - MODE_REC_LINE
/                       - 5  - MODE_PLAY_LINE
/                       - 6  - MODE_REC_MIC
/                       - 7  - MODE_PLAY_SPEAKER
/                       - 8  - MODE_PLAY_HEADSET
/                       - 9  - MODE_TELEPHONE_EMULATION
/                       - 10 - MODE_CALLER_ID
/                       - 11 - MODE_VCV_PHONE_MONITOR_START
/                       - 12 - MODE_VCV_PHONE_DATA_XFER
/                       - 13 - MODE_VCV_SPKRPHONE_MONITOR_START
/                       - 14 - MODE_VCV_SPKRPHONE_DATA_XFER
/                       - 15 - MODE_VCV_HEADSET_MONITOR_START
/                       - 16 - MODE_VCV_HEADSET_DATA_XFER
/                       - 17 - MODE_DSVD_PHONE
/                       - 18 - MODE_DSVD_SPKRPHONE
/                       - 19 - MODE_DSVD_HEADSET
/                       - 20 - MODE_SPKRPHONE
/                       - 21 - MODE_SPKRPHONE_HEADSET
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
void dp_set_hardware_state (ubyte state)
{
  HARDWARE_SETUP *entry;

  /* Find the state's entry in the hardware_table and set the
     relays according to the table */
  entry = (HARDWARE_SETUP *) &(hardware_table[state]);

  /* Set relays according to table entry */
  set_hook_relay (entry->hook_relay);
  set_voice_relay (entry->voice_relay);
  set_cid_relay (entry->cid_relay);
  set_dsvd_relay (entry->dsvd_relay);
  set_spk_hs_relay (entry->spk_hs_relay);   /* Speaker / handset switch */

  /* Set AFE1, AFE2 microphone states.  If table entry says MIC, then
     enable the microphone.  Otherwise, turn it off (HW_RX or OFF). */
  dp_enable_mic ((entry->afe1_mic == MIC) ? 1 : 0, AFE1);
  dp_enable_mic ((entry->afe2_mic == MIC) ? 1 : 0, AFE2);

  /* Set AFE1, AFE2 speakers */
  dp_speaker_mode (entry->afe1_speaker, AFE1);
  dp_speaker_mode (entry->afe2_speaker, AFE2);

  if (state == MODE_INITIALIZE)
  {
    /* Set some default gains for speaker and receiver */
    dp_speaker_level (DEFAULT_SPEAKER_VOLUME, AFE1);
    dp_speaker_level (DEFAULT_SPEAKER_VOLUME, AFE2);
    dp_receiver_gain (DEFAULT_RECEIVER_GAIN, AFE1);
    dp_receiver_gain (DEFAULT_RECEIVER_GAIN, AFE2);
  }

  current_hardware_state = state;
}


ubyte dp_get_hardware_state (void)
{
  return (current_hardware_state);
}

/*******************************************************************************
/
/    Procedure:     dp_monitor_vcv_answ_tone
/
/    Author:   RSA
/
/    Creation Date: 1/16/96
/
/    Description:   This routine configures the DSP to listen for VoiceView
/                   Answer Tone (628 Hz).
/
/    Input Parameters:   None
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 12/11/95
/    Description:
/    Reason:
/
*******************************************************************************/
void dp_monitor_vcv_answ_tone (void)
{
  /* Current implementation uses the empty Voice View packet to tell
     DSP to listen for VCV ANSW tone (628 Hz). */
  current_command[0] = PACKET_MODEM_VOICE_VIEW;
  current_command[1] = 0;
  current_command[2] = 0;
  current_command[3] = 0;

  ack_or_response = ACK;
  send_pkt_to_dsp ();
}


/*******************************************************************************
/
/    Procedure:     dp_init_audio
/
/    Author:   RSA
/
/    Creation Date: 1/16/96
/
/    Description:   This routine initializes the audio hardware
/
/    Input Parameters:   None
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users:
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:     RSA 2/5/96
/    Description:
/    Reason:
/
*******************************************************************************/
void dp_init_audio (void)
{
  AUDIO_CONTROL audiomsg;

  dp_set_hardware_state (MODE_INITIALIZE);

  /* Initialize the audio subsystem (speaker, mic, AFE, etc.) */
  audiomsg.type = AUDIO_INIT;
  audiomsg.data = 0;
  audio_control( &audiomsg );
}

