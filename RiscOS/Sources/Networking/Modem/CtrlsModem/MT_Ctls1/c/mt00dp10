/******************************************************************************
/
/     Copyright, 1988, 1989, 1990, 1991, 1992, 1993. All Rights Reserved by:
/        RSA
/        7701 Six Forks Road
/        Suite 301
/        Raleigh, NC  27615
/        (919) 846-7171
/
/     This document contains material confidential to R. Scott Associates.
/     its contents must not be revealed, used or disclosed to anyone or
/     company with out written permission by R. Scott Associates.  the
/     information contained herein is solely for the use of R. Scott
/     Associates.
/
/       File:           mt00dp10.c
/
/       Version:        1.00
/
/       Function:       Supporting Library Routines
/
/       Product:        Modem Task Driver for Merlin Chip Sets
/
/       History:
/
/       Created:        3/01/94
/
/        ------------------------------------------------------
/        -               Modifications             -
/        ------------------------------------------------------
/
/    Author & Date:
/    Description:
/    Reason:
/
******************************************************************************/

#include  "SYS_DEF.H"

#include  "cp_dsp.h"
#include  "MT_V8V34.H"
#include  "MT_CODEF.H"
#include  "MT_HWDEF.H"
#include  "MT_COPRO.H"
#include  "MT_HWPRO.H"
#include  "MT_COEXT.H"
#include  "mt_macro.h"

uword check_CD(void);
ubyte get_cts(void);
/*
mrm101795
after changing the mt00if10.c these function should return the value
*/
/*
void get_receiver_speed(void);
void get_receiver_mode(void);
*/
ubyte get_receiver_speed(void);
ubyte get_receiver_mode(void);

ubyte handshake_started(void);
void config_char(ubyte, ubyte, ubyte);
void set_retrain_enable(ubyte, ubyte, ubyte);
void set_guard_tone (ubyte);
void set_cd_parameters(ubyte, ubyte, ubyte, ubyte, ubyte, ubyte, ubyte);
void mt_terminate_link(void);

#if MODEM_X2_MODE == 1
extern ubyte modem_x2_state;
#endif

extern ubyte dsp_response_data[15];

ubyte callch = 0;
ubyte answerch = 0;
extern uword sq_timer;
ubyte retrain_started = 0;
extern ubyte test_in_progress;
extern ubyte slN;
extern uword cd_timer;
extern uword acu_cd_loss_time;

uword rtrn_timer_set = FALSE; /* ramn 6/17/96 */
extern ubyte fax_class;
extern ubyte get_autobaud_rate(void);
void PrintMsgData( char *str, ubyte DataByte );

/*******************************************************************************
/
/                    check_CD
/
/    Author:   RSA
/
/    Creation Date: 03/07/94
/
/    Description:   This routine will return the current state of carrier
/              detect.
/
/    Input Parameters:   None
/
/    Output Parameter:   0 = CD gone
/                             1 = CD present
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_check_CD
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/
*******************************************************************************/
uword check_CD(void)
{
   /* RJM040396 */
   /* Workaround for Direct COMRAM access */
   uword syncloss, sqword;

	uword *s_quality,*sync_loss,temp,temp1;

	update_modem_status();			/* ramn 11/18/96 */

   /*  modem has received cleardown */
   if ((modem_state == DROP1) || (modem_state == DROP2))
      return(0);

   /*   read DSP's CD bit.  Hold CD high while retraining   */
	/*if ((read_dsp_modem_status_reg() & CHECK_CD_MASK) || (modem_status == RETRAINING))*/
	if ((read_dsp_modem_status_reg() & CHECK_CD_MASK) && (modem_status == CONNECTED))
	{
		if(!cd_timer)
		{
			cd_timer = 10;
			if(acu_cd_loss_time != 0xFF)  /* if s10 set for no autodisconnect then do not hangup */
			{
				if (((line_mode == 22) || (line_mode == 17) || (line_mode == 23) ||
                     (line_mode == 18 ))&& (!test_in_progress))
				{
					LOAD_MODEM_GET_V34_INFO
					dsp_cp_packet = PACKET_DP_V34_INFO;
					ack_or_response = RESPONSE;
					send_pkt_to_dsp();

/* RJM040396 */
/* Direct COMRAM access will not work in Host Based */
#if 0
					s_quality = (uword * )V34_SQ_WORD;
#else
           		/* Convert byte array to platform specific uword format */
	  	   		sqword  = (dsp_response_data[3] << 8);
	     			sqword |= dsp_response_data[2];
	      		s_quality = &sqword;
#endif
					temp = *s_quality;

/* RJM040396 */
/* Direct COMRAM access will not work in Host Based */
#if 0
					sync_loss = (uword * )V34_SYNC_WORD;
#else
     	   	/* Convert byte array to platform specific uword format */
	      		syncloss  = (dsp_response_data[5] << 8);
	      		syncloss |= dsp_response_data[4];
	         	sync_loss = &syncloss;
#endif
					temp1 = *sync_loss;
					ack_or_response = ACK;


					if((*s_quality >= 0x4800) || (*sync_loss >= 5))
					{
						if(modem_status == RETRAINING)	/* ramn 6/17/96 */
						{
							if(rtrn_timer_set == FALSE)	/* ramn 6/17/96 */
							{
							 	sq_timer = 2000 + (acu_cd_loss_time * 8);
								rtrn_timer_set = TRUE;
							}
							else if ((rtrn_timer_set == TRUE) && (sq_timer == 0))
							{
								/*rtrn_timer_set = FALSE;*/
	 							return ((uword) (0x0000));
							}
						}
						else if (rtrn_timer_set == FALSE)
						{
							sq_timer = 2000 + (acu_cd_loss_time * 8);
							rtrn_timer_set = TRUE;
						}
						else if ((rtrn_timer_set == TRUE) && (sq_timer == 0))
						{
							/*rtrn_timer_set = FALSE;*/
	 						return ((uword) (0x0000));
						}
					}
					else
					{
/* changed by ramn on 8/1/96 */
						if (modem_status == RETRAINING)
						{
							if(rtrn_timer_set == FALSE)
							{
							 	sq_timer = 2000 + (acu_cd_loss_time * 8);
								rtrn_timer_set = TRUE;		 /* ramn 6/17/96 */
							 	return ((uword) (0x0001));
							}
							else if((rtrn_timer_set == TRUE) && (sq_timer == 0))
								return((uword) (0x0000));
							else
							 	return ((uword) (0x0001));
						}
						else
						{
							sq_timer = 500;
							rtrn_timer_set = FALSE;		/* ramn 6/17/96 */
						}
					}
				}	/* if line_mode */
				else
				{
					/*sq_timer = 500;*/
					rtrn_timer_set = FALSE;		/* ramn 11/18/96 */
				}
			} /* if acu_cd_loss_tim */
		} /* if cd_timer */
	 	return ((uword) (0x0001));
	}
	else
	{
		/*update_modem_status();*/			/* ramn 11/18/96 */

		if(fax_class == 1)		/* ramn 11/25/96 */
		{
			if(read_dsp_modem_status_reg() & CHECK_CD_MASK)
				return ((uword) (0x0001));
			else
				return ((uword) (0x0000));
		}


/*mrm12697 */
/*for legacy mode we can report cd from modem_status_reg*/

		if( ( line_mode <= 7)&& (!test_in_progress) )

		{
			if(read_dsp_modem_status_reg() & CHECK_CD_MASK)
				return ((uword) (0x0001));
			else
				return ((uword) (0x0000));
		}

		if(test_in_progress)
		{
			if(read_dsp_modem_status_reg() & CHECK_CD_MASK)
				return ((uword) (0x0001));
#if 0
			else
				return ((uword) (0x0000));
#endif
		}

		/* ramn 11/18/96 */
		if(acu_cd_loss_time == 0xFF)  /* if s10 set for no autodisconnect then do not hangup */
		{
			rtrn_timer_set = FALSE;
		 	return ((uword) (0x0001));
		}
		else
		{
			if(modem_status == RETRAINING)	/* ramn 11/18/96 */
			{
				if(rtrn_timer_set == FALSE)	/* ramn 11/18/96 */
				{
				 	sq_timer = 2000 + (acu_cd_loss_time * 8);
					rtrn_timer_set = TRUE;
				}
				else if ((rtrn_timer_set == TRUE) && (sq_timer == 0))
				{
					/*rtrn_timer_set = FALSE;*/
	 				return ((uword) (0x0000));
				}
			}
			else if ((rtrn_timer_set == TRUE) && (sq_timer == 0))
			{
				/*rtrn_timer_set = FALSE;*/
	 			return ((uword) (0x0000));
			}
			else if (rtrn_timer_set == FALSE)
			{
			 	sq_timer = 2000 + (acu_cd_loss_time * 8);
				rtrn_timer_set = TRUE;
			}
			return ((uword) (0x0001));
		}
	}
}


/*******************************************************************************
/
/                    get_cts
/
/    Author:   RSA
/
/    Creation Date: 03/07/94
/
/    Description:   This routine will return the current state of the
/              Clear To Send indicator.
/
/    Input Parameters:   None
/
/    Output Parameters:  1 = ON
/                               0 = OFF
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_send_rdl_request
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
ubyte get_cts(void)

{
/* Because of CP to DSP interface with Merlin, CTS always on */

/* Are we waiting for CTS to be valid from DSP? */
   if (!mt_cts_timer)
	 return(ON);
   else
	 return(OFF);

}


/*******************************************************************************
/
/                  get_receiver_speed
/
/    Author:   RSA
/
/    Creation Date: 03/07/94
/
/    Description:   This routine will return the line's bit rate.
/
/    Input Parameters:   None
/
/    Output Parameter:   None
/
/    Global Variables Changed:     line_bit_rate
/
/    Users: (routines that used this)
/                            modem_get_baud_rate
/                            retrain_processor
/                            modem_send_rdl_request
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
ubyte get_receiver_speed(void)
{
	uword	temp1 ;
	ubyte	temp ;
	/*

	current_command [0] = PACKET_MODEM_GET_BAUD_RATE;
	current_command [1] = 0x00;
	current_command [2] = PACKET_MODEM_GET_BAUD_RATE_LEN;
	current_command [3] = 0x00;
	while (error_occured = cp_dsp());

	*/
	temp = get_autobaud_rate();
#if MODEM_X2_MODE == 1
		if ((line_mode == 22) || (line_mode == 23))
		{
			LOAD_MODEM_GET_V34_INFO

			dsp_cp_packet = PACKET_DP_V34_INFO;

			ack_or_response = RESPONSE;
			send_pkt_to_dsp();

			callch 	= dsp_response_data[6];
			answerch = dsp_response_data[7];
	  	  	line_bit_rate = callch;

		}
	else
#endif
	if (((line_mode == 17) || (line_mode == 18 )) && (temp > 3))
	{
		LOAD_MODEM_GET_V34_INFO

		dsp_cp_packet = PACKET_DP_V34_INFO;

		ack_or_response = RESPONSE;
		send_pkt_to_dsp();

/* RJM040396 */
/* Direct COMRAM access will not work in Host Based */
#if 0
		temp = (uword * ) V34_RATE_RESP;
		temp1 = *temp;
#else
		temp1 = (dsp_response_data[1] << 8) & 0xFF00;
		temp1 |= dsp_response_data[0];
#endif

		callch = temp1 >>2;
		callch &= 0x0F;

		answerch	=temp1>>6;
		answerch	&= 0x0F;


		if(answerch >= 9)
		 	answerch += 7;
		else
		 	answerch += 3;

		if(callch >= 9)
		 	callch += 7;
		else
		 	callch += 3;

/* RJM040396 */
/* DSP has a problem with reporting ASYMETRIC vs. SYMETRIC
   DCE line rates. When in SYMETRIC mode, only CA bits are
   valid in RATE response packet.
*/
      if (mt_conn_mode == MT_V34) /* if were symetric ...*/
         answerch = callch;


/* RJM040396 */
/* 'modem_state' is set to CONNECT by this time
    so we end up reporting incorect line rates
*/
#if 0
	  	if(modem_state == ORIG)
#endif

	  	if(mt_conn_orig)
	  		line_bit_rate = callch;
	 	else
	  		line_bit_rate = answerch;

	}
	else
	{
  		LOAD_MODEM_GET_BAUD_RATE
		dsp_cp_packet = PACKET_DP_DATA_RATE;
		ack_or_response = RESPONSE;
		send_pkt_to_dsp();

		line_bit_rate = dsp_response_data[0];
		answerch = dsp_response_data[0];
		callch = dsp_response_data[0];


	}

   ack_or_response = ACK;

#if 0
/* RJM111296 */
/* V80 Support where we need to update the Host upon new speeds */
   /* indicate the updated rate to the V.80 Module */
   V80_modem_state_ind(modem_status,line_bit_rate,line_bit_rate);
#endif

	PrintMsgData("Speed Ans chan: ", answerch);
	PrintMsgData("Speed Caller chan: ", callch);
   return(line_bit_rate);
}


/*******************************************************************************
/
/                  get_receiver_mode
/
/    Author:   RSA
/
/    Creation Date: 03/07/94
/
/    Description:   This routine will return the line's mode.
/
/    Input Parameters:   None
/
/    Output Parameter:   None
/
/    Global Variables Changed:  line_mode
/
/    Users: (routines that used this)
/                            modem_get_baud_rate
/                            retrain_processor
/                            modem_send_rdl_request
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
ubyte get_receiver_mode(void)

{
	/*

	current_command [0] = PACKET_MODEM_GET_MODE;
	current_command [1] = 0x00;
	current_command [2] = PACKET_MODEM_GET_MODE_LEN;
	current_command [3] = 0x00;
	while (error_occured = cp_dsp());

	*/

	LOAD_MODEM_GET_MODE
	ack_or_response = RESPONSE;
	dsp_cp_packet = PACKET_DP_MODE;
	send_pkt_to_dsp();

	/*
	error_occured = TRUE;
	dsp_cp_packet = PACKET_DP_MODE;

	while (error_occured == TRUE)
	{
		error_occured = dsp_cp(dsp_cp_packet);

	}
	*/

	line_mode = dsp_response_data[0];
	PrintMsgData("Line Mode: ", line_mode);
	ack_or_response = ACK;

   return(line_mode);

}


/*******************************************************************************
/
/                   handshake_started
/
/    Author:   RSA
/
/    Creation Date: 03/07/94
/
/    Description:   This routine will return the current state of DP DSR
/              bit.
/
/    Input Parameters:   None
/
/    Output Parameter:   OFF - DSR inactive
/                             ON -  DSR active
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
ubyte handshake_started(void)

{
   if ((modem_status == CONNECTED) || (modem_status == CONNECTING))
	 return(ON);
   else
	 return(OFF);
}

/*******************************************************************************
/
/                   config_char
/
/    Author:   RSA
/
/    Creation Date: 03/07/94
/
/    Description:   This routine will establish sync/async mode of
/                        operation and character size
/
/    Input Parameters:     sync = 0 - async mode
/                                1 - sync mode
/
/         character_size = 0 - 8 data bits
/                            = 1 - 9 data bits
/                              2 - 10 data bits
/                              3 - 11 data bits
/
/                ovrspeed = 0 - extended overspeed disabled,
/                               1 - enabled
/
/    Output Parameter:   None
/
/    Global Variables Changed:     None
/
/    Users: (routines that used this)  modem_char
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
 /   Reason:
/
*******************************************************************************/
void config_char(ubyte sync, ubyte bits, ubyte ovrspeed)
{
   /*   not used.   */
}

/*******************************************************************************
/
/                    set_retrain_enable
/
/    Author:   RSA
/
/    Creation Date: 03/07/94
/
/    Description:   This routine will control how the modem will respond
/                       to poor line quality
/
/    Input Parameters: ubyte retrain_enable = 0 - Do nothing
/                                                       1 - Retrain
/
/    ubyte reneg_enab   =  0 - Do nothing
/                                    1 - Rate Renegotiate
/
/    fall_forward_fallback = ON or OFF
/
/    Output Parameter:   None
/
/    Global Variables Changed:     retrain_enabled
/                                       renegot_enable
/                                       fall_forward_fallback
/
/    Users: (routines that used this)  modem_retrain_enable
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_retrain_enable(ubyte retrain_enable, ubyte reneg_enab,
				    ubyte fallforward_fallback)

{
    mt_retrain_enable = retrain_enable;
    mt_reneg_enab     = reneg_enab;
    mt_fffb           = fallforward_fallback;

}


/*******************************************************************************
/
/                  set_guard_tone
/
/    Author:   RSA
/
/    Creation Date: 03/07/94
/
/    Description:   This routine configure the DP to the given guard tone.
/
/    Input Parameters:   0 - tone disabled
/                             1 - 550 Hz tone enabled
/                            2 - 1800 Hz tone enabled
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)    modem_guard_tone
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_guard_tone(ubyte tone)

{

	/*
	current_command [0] = PACKET_MODEM_GUARD_TONE;
	current_command [1] = 0x00;
	current_command [2] = PACKET_MODEM_GUARD_TONE_LEN;
	current_command [3] = 0x00;
	current_command [4] = tone;
	while (error_occured = cp_dsp());
	while (error_occured = dsp_acknowledge_packet());
	*/

	LOAD_MODEM_GUARD_TONE
	ack_or_response = ACK;
	send_pkt_to_dsp();
}


/*******************************************************************************
/
/                    set_cd_parameters
/
/    Author:   RSA
/
/    Creation Date: 03/07/94
/
/    Description:   This routine will save S9, S7, and S10 register values
/              for timer usage during modem task processing.
/
/    Input Parameters:
/              ubyte cd_min - (S9)
/
/              ubyte cd_wait - (S7)
/
/              ubyte cd_max - (S10)
/
/              ubyte v32_car_det - V32 carrier detect method in case
/                            of very bad line quality
/                        0 - If very bad line quality, hang up
/                        1 - If very bad line quality, retrain
/                            If unsuccessful, hang up
/                        2 - If very bad line quality, do
/                            nothing
/
/              ubyte trans_level - Transmit level
/                        0 to 20
/
/              ubyte receive_level - Receive threshold
/                        0 to 45
/
/              ubyte eqm_level - Tolerated limit of EQM values
/                        0 - no limit
/                        1 - low quality
/                        2 - medium quality
/                        3 - high quality
/
/    Output Parameter:   None
/
/    Global Variables Changed:
/
/    Users: (routines that used this)
/
/    *****************************************************************
/    *                Modifications               *
/    *****************************************************************
/
/    Author & Date:
/    Description:
/    Reason:
/
*******************************************************************************/
void set_cd_parameters(ubyte cd_min, ubyte cd_wait, ubyte cd_max,
				   ubyte v32_car_det, ubyte trans_level,
				   ubyte receive_level, ubyte eqm_level)
{
   cd_wait_time       = (uword)cd_wait*100;
   cd_dropoff_time    = cd_max;
   v32_car_det_method = v32_car_det;
}




