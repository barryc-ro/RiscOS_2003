#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "defs.h"
#include "swis.h"

configline *anchor = NULL;

extern char *stristr (char *, char *);
extern int  MAM_Enq(char *, void *, int);

int strnicmp (const char *s, const char *t, int n)
{
  while ( --n >= 0 )
  {
    if (*s == '\0' || *t == '\0' || tolower(*s) != tolower(*t))
      return (tolower(*s) - tolower(*t));
    ++s;
    ++t;
  }
  return (0);
}

char *quote(char *in, char *out)
{
  char c;
  int inl = 0, outl = 0;

  do
  {
    c = in[inl];

    switch (c)
    {
    case '<':
      inl++;
      out[outl++] = '&';
      out[outl++] = 'l';
      out[outl++] = 't';
      out[outl++] = ';';
      break;

    case '>':
      inl++;
      out[outl++] = '&';
      out[outl++] = 'g';
      out[outl++] = 't';
      out[outl++] = ';';
      break;

    case '&':
      inl++;
      out[outl++] = '&';
      out[outl++] = 'a';
      out[outl++] = 'm';
      out[outl++] = 'p';
      out[outl++] = ';';
      break;

    case '"':
      inl++;
      out[outl++] = '&';
      out[outl++] = 'q';
      out[outl++] = 'u';
      out[outl++] = 'o';
      out[outl++] = 't';
      out[outl++] = ';';
      break;

    default:
      out[outl++] = in[inl++];
      break;
    }
  } while (c);
  
  return(out);
}

BOOL CreateFiles(void)
{
  FILE *config;

  if (_swix(OS_File, _INR(0, 1) | _IN(4), 8, "<Wimp$ScrapDir>", 75))
    return(FALSE);
  if (_swix(OS_File, _INR(0, 1) | _IN(4), 8, "<Wimp$ScrapDir>.DiallerUI", 75))
    return(FALSE);
  if (_swix(OS_File, _INR(0, 1) | _IN(4), 8, "<Wimp$ScrapDir>.DiallerUI.HTML", 75))
    return(FALSE);
  if (MAM_Enq("LOGIN_ID", NULL, 0) == -3)
    return(FALSE);

  if (config = fopen("Resources:$.Resources.DiallerUI.Config", "r"), config)
  {
    char buffer[256];
    configline *temp;
    int flags, reason;

    while (anchor)
    {
      temp = (configline *) anchor->next;
      free(anchor);
      anchor = temp;
    }
    
    while (fscanf(config, "0x%X %X %s\n", &reason, &flags, buffer) != EOF)
    {
      if (temp = (configline *) malloc(sizeof(configline)), temp == NULL)
        break;
      temp->reason = reason;
      temp->flags.data  = flags;
      if (temp->flags.flags.dynamic)
      {
        char tag[256], outfile[80], c, *leaf;
        FILE *in, *out;
        int loop;
        
        if (leaf = strrchr(buffer, '.'), leaf == NULL)
        {
          if (leaf = strrchr(buffer, ':'), leaf == NULL)
          {
            fclose(config);
            return(FALSE);
          }
        }
        if (in = fopen(buffer, "r"), in)
        {
          sprintf(outfile, "<Wimp$ScrapDir>.DiallerUI.HTML.%s", &leaf[1]);
          if (out = fopen(outfile, "w"), out)
          {
            while (c = fgetc(in), !feof(in))
            {
              if (c != '<')
              {
                fputc(c, out);
              }
              else
              {
                loop = 0;
                while (c = fgetc(in), c != '>')
                {
                  tag[loop++] = c;
                }
                tag[loop++] = '\0';
                if (strnicmp(tag, "XTAG ", 5) == 0)
                {
                  char *ptr = tag;
                  int length = 0;

                  if (ptr = stristr(ptr, "scf="), ptr != NULL)
                  {
                    char *scf = buffer, *scfield;
                    
                    ptr += 4;
                    if (*ptr == '"')
                      ptr++;
                    while (*ptr != '"' && !isspace(*ptr))
                      *scf++ = *ptr++;
                    *scf++ = '\0';
                    length = MAM_Enq(buffer, scfield, 0);
                    scfield = malloc(length + 4);
                    if (length > 0 && scfield != NULL)
                    {
                      MAM_Enq(buffer, scfield, length + 2);
                      fprintf(out, "%s", scfield);
                    }
                    else
                    {
                      length = -1;
                    }
                    if (scfield)
                      free(scfield);
                  }
                  if (ptr = stristr(ptr, "alt=\""), ptr != NULL && length <= 0)
                  {
                    ptr += 5;
                    while (*ptr != '"' && *ptr != '>')
                      fputc(*ptr++, out);
                  } 
                }
                else
                {
                  fprintf(out, "<%s>", tag);
                }
              }                                                              
            }
            fclose(out);
            _swix(OS_File, _INR(0, 2), 18, outfile, 0xFAF);
            leaf = outfile;
            while (*leaf)
            {
              if (*leaf == '.')
                *leaf = '/';
              else if (*leaf == '/')
                *leaf = '.';
              leaf++;
            }
            sprintf(temp->url, "file:/%s", outfile);
          }
          fclose(in);
        }
      }
      else
      {
        strcpy(temp->url, buffer);
      }
      temp->next = (void *) anchor;
      anchor = temp;
    }
    temp = anchor;
    while (temp)
    {
      temp = temp->next;
    }
    fclose(config);
    return(TRUE);
  }
  return(FALSE);
}
