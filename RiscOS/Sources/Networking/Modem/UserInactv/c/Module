/************************************************************************/
/* File:    Module.c                                                    */
/* Purpose: RISC OS module related code.                                */
/*                                                                      */
/* Author:  David Cotton <mailto:david.cotton@pacemicro.com>            */
/* Updated: Justin Fletcher <mailto:justin.fletcher@pace.co.uk>         */
/* History: 0.01  2000-01-07                                            */
/*                Initial version.                                      */
/*          0.04  07 Aug 2000                                           */
/*                Reorganised resets and period setting calls           */
/*                Added 'StayAwake' call to notify the monitor that     */
/*                there are still things going on                       */
/************************************************************************/

/* ANSI Includes */
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <time.h>

/* Risc OS Includes */
#include "kernel.h"
#include "swis.h"
#include "NVRAM.h"
#include "Global/RISCOS.h"

/* Other libraries */
#include "Debuglib/Debuglib.h"
#ifdef MemCheck_MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif

/* Local Includes */
#include "Module.h"
#include "Header.h"



/* Module housekeeping globals */
static void *module_wsp = NULL;
static int  inactivity_period = 0; /* Default is off */
#ifndef IGNORE_POINTER_MOVEMENTS
static char mouse_status[5];
#endif /* IGNORE_POINTER_MOVEMENTS */
static bool module_active = false;
static unsigned int laststayawake=0;

/* Forward prototypes */
static _kernel_oserror *setcallafter(unsigned int seconds);
static _kernel_oserror *setcallback(void);
static _kernel_oserror *removecallback(void);
static void module_releasev(void);
static _kernel_oserror *module_claimv(void);
static _kernel_oserror *module_events_disable(void);
static _kernel_oserror *module_events_enable(void);
static int get_nvram_tag_numeric(char* tag);
char* get_nvram_tag_string(char* tag);

/* Define anything else that we need */
#ifndef NCDial_Hangup
  #define NCDial_Hangup      0x4EC01
#endif
#define Event_Enable         14
#define Event_Disable        13

#define SCI_REMOVED  1 /* Card has been removed */
#define SCI_INSERTED  2 /* Card has been inserted */
#define SCI_TRANS_END  3 /* Locked transaction has ended so other channels are free to access the card */
#define SCI_CMD_DONE  4 /* Previous command completed */
#define SCI_ERROR  5 /* An error condition has been detected for the card */
#define SCI_REMOVED2  6 /* Card has been removed */
#define SCI_INSERTED2  7 /* Card has been inserted */
#define SCI_BADINSERT  8 /* Badcard/foreign object inserted in slot 1 */
#define SCI_BADINSERT2  9 /* Badcard/foreign object inserted in slot 2 */

#define ERROR_BASE    0x8f8f00 /* Allocated */

static _kernel_oserror err_badpollperiod = {
  ERROR_BASE, "The period can only be 0 seconds or between 60 and 3600 seconds"
};

/******************************************************************
 Function:     reset_timer
 Description:  Reset the timer to the inactivity period because
               something has just happened to say that the machine
               is in use
 Parameters:   none
 Returns:      none
 ******************************************************************/
static void reset_timer(void)
{
  if (module_active)
  {
    dprintf(("", "reset_timer(): module active, resetting timer to %d seconds\n", inactivity_period));
    setcallafter(inactivity_period); /* Set a callafter for the required time period */
  }
  else
  {
    dprintf(("", "reset_timer(): module NOT active\n", inactivity_period));
  }
}

/******************************************************************
 Function:     set_inactivity_period
 Description:  Sets the inactivity period, returning an error if
               there is a fault.
 Parameters:   period = the number of seconds of inactivity before
                        disconnecting. 0 will disable the checks.
 Returns:      error if it failed, NULL, otherwise
 ******************************************************************/
static _kernel_oserror *set_inactivity_period(int new_period)
{
  _kernel_oserror *err=NULL;
  if (new_period == 0)
  {
    module_active = false;
  }
  else if (new_period < 60 || new_period > 3600)
  {
    err=&err_badpollperiod;
  }
  else
  {
    module_active = true;
    inactivity_period = new_period;
  }

  /* Set the initial callafter */
  if (!err)
  {
    if (module_active)
    {
      err=setcallafter(inactivity_period);
    }
    else
    {
      err=setcallafter(0);
    }
  }

  return err;
}



/*********************************************************************************/
/* module_initialise                                                             */
/*                                                                               */
/* Module initialisation entry point.                                            */
/*                                                                               */
/* Parameters:  const char* cmd_tail                                             */
/*              int         podule_base                                          */
/*              void*       pw                                                   */
/*                                                                               */
/* Returns:     _kernel_oserror*                                                 */
/*                                                                               */
/*********************************************************************************/
_kernel_oserror *module_initialise (const char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs r;
  int nvram_tag_contents = 0;

  NOT_USED(cmd_tail);
  NOT_USED(podule_base);
  NOT_USED(r);

  module_wsp = pw;

#ifdef MemCheck_MEMCHECK
  MemCheck_Init();
  MemCheck_InterceptSCLStringFunctions();
  MemCheck_SetStoreMallocFunctions(1);
  MemCheck_RedirectToFilename ("izipfs:$.in_memch");
  atexit (MemCheck_OutputBlocksInfo);
  MemCheck_SetReadChecking (0);
#endif

  debug_initialise (Module_Title, "izipfs:$.inactivout", "");
  debug_output_device (PDEBUG_OUTPUT);
  debug_set_stamp_debug(TRUE);
  debug_atexit ();

  /* We start out inactive */
  module_active = false;

  /* Set a CallEvery for every 20 centiseconds. */
  r.r[0] = (int) 19; /* Call takes the value in centiseconds -1, hence 19 */
  r.r[1] = (int) ticker_event_veneer;
  r.r[2] = (int) module_wsp;
  err = _kernel_swi(OS_CallEvery, &r, &r);

  /* Read the contents of the NVRAM tag. */
  nvram_tag_contents = get_nvram_tag_numeric("InactivityTimeout");
  if (nvram_tag_contents >= 0) /* Tag exists */
  {
    _kernel_oserror *temperr;
    int new_period = nvram_tag_contents;
    dprintf(("", "module_initialise(): New period requested is %d.\n", new_period));
    temperr=set_inactivity_period(new_period);
  }
  else
  {
    _kernel_oserror *temperr;
    dprintf(("", "module_initialise(): NVRAM tag InactivityTimeout is unset.\n"));
    temperr=set_inactivity_period(0);
  }

  /* Claim the required events */
  err = module_claimv();
  if (!err)
  {
    err = module_events_enable();
    if (err)
    {
      module_releasev();
    }
  }

  dprintf(("", "module_initialise(): Finished.\n"));

  return (err);
}





/*********************************************************************************/
/* module_finalise                                                               */
/*                                                                               */
/* Module exit handler                                                           */
/*                                                                               */
/* Parameters:  int         fatal                                                */
/*              int         podule                                               */
/*              void*       pw                                                   */
/*                                                                               */
/* Returns:     _kernel_oserror*                                                 */
/*                                                                               */
/*********************************************************************************/
_kernel_oserror *module_finalise (int fatal, int podule, void *pw)
{
  _kernel_oserror *err = NULL;

  NOT_USED(fatal);
  NOT_USED(podule);
  NOT_USED(pw);

  /* Cancel any registered callafters */
  _swix(OS_RemoveTickerEvent, _INR(0, 1), module_callafter_entry, module_wsp);      /* ...then remove the event... */
  _swix(OS_RemoveTickerEvent, _INR(0,1), (void *)(int)ticker_event_veneer, module_wsp);

  /* Remove any outstanding callbacks */
  removecallback();

  /* Release the events... */
  module_events_disable();
  module_releasev();

  return  (err);
}




/*********************************************************************************/
/* module_swi_handler                                                            */
/*                                                                               */
/* Module SWI handler                                                            */
/*                                                                               */
/* Parameters:  int                swi_offset                                    */
/*              _kernel_swi_regs * regs                                          */
/*              void*              pw                                            */
/*                                                                               */
/* Returns:     _kernel_oserror*                                                 */
/*                                                                               */
/*********************************************************************************/
_kernel_oserror *module_swi_handler(int swi_offset, _kernel_swi_regs *r, void *pw)
{
  _kernel_oserror *err=NULL;
  NOT_USED(pw);
  
  switch (swi_offset)
  {
    case UserInactivity_StayAwake - UserInactivity_00:
      /* r0 = flags
               reserved, all must be 0
         <= ARP
         
         Resets the timer as if a key had been pressed or the mouse moved
      */
      laststayawake=clock();
      reset_timer();
      break;
      
    case UserInactivity_Period - UserInactivity_00:
      /* => r0 = flags
               reserved, all must be 0
            r1 = period to use, or -1 to read period
         <= r1 = last poll period, or 0 if disabled
         
         Changes the inactivity period, or reads it
      */
      {
        int last_period;
        if (module_active)
          last_period=inactivity_period;
        else
          last_period=0;
        if (r->r[1]!=-1)
          err=set_inactivity_period(r->r[1]);
        r->r[1]=last_period;
      }
      break;
  }
  return err;
}




/*********************************************************************************/
/* module_cmd_handler                                                            */
/*                                                                               */
/* Module command handler                                                        */
/*                                                                               */
/* Parameters:  const char* arg_string                                           */
/*              int         argc                                                 */
/*              int         cmd_no                                               */
/*              void*       pw                                                   */
/*                                                                               */
/* Returns:     _kernel_oserror*                                                 */
/*                                                                               */
/*********************************************************************************/
_kernel_oserror *module_cmd_handler(const char *arg_string, int argc, int cmd_no, void *pw)
{
  int new_period;
  dprintf (("", "module_cmd_handler()\n"));

  NOT_USED(pw);

  switch (cmd_no)
  {
    /* The * command below displays the time since the last StayAwake was issued (for debugging purposes) */
    case CMD_UserInactivity_LastStayAwake:
      if (laststayawake==0)
      {
        printf("UserInactivity_StayAwake has not been issued.\n");
      }
      else
      {
        unsigned int now=clock();
        int csecs=(now-laststayawake)*100/CLOCKS_PER_SEC;
        printf("UserInactivity_StayAwake issued %d.%02d seconds ago.\n",csecs/100,csecs%100);
      }
      break;
 
    /* The * command below deals with attempts to alter the period of user inactivity needed before the line drops. */
    case CMD_UserInactivity_Period:
      if (argc == 0) /* No arguments passed in - just display the current setting. */
      {
        printf("The period before the line is dropped is %d seconds.\n", inactivity_period);
      }
      if (argc > 1)
      {
        printf("You cannot pass more than one parameter into the UserInactivity module.\n");
      }
      if (argc == 1)
      {
        _kernel_oserror *err=NULL;
        dprintf(("module_cmd_handler(): Parameter passed in is %s\n", arg_string));
        new_period=atoi(arg_string);
        err=set_inactivity_period(new_period);
        return err;
      }
    break;
  }

  return((_kernel_oserror *)NULL);
}






/* Ths routine deals with service calls intercepted by this module. */
void module_sc_handler(int sn, _kernel_swi_regs *r, void *pw)
{
  NOT_USED(pw);

  dprintf(("", "module_sc_handler(): service call 0x%x reason code: 0x%x\n",sn,r->r[2]));

  switch(sn)
  {
    case Service_Standby:
      dprintf(("", "module_sc_handler(): service call : Service_Standby\n"));
      if((r->r[0] & 1) == 0)
      {
        /* The box is waking up */
        dprintf(("", "module_sc_handler(): NC is coming out of standby\n"));
        module_active = true;
      }
      else
      {
        /* The box is going to sleep */
        dprintf(("", "module_sc_handler(): NC is going into standby\n"));
        module_active = false;
      }
      break;

    default:
      dprintf(("", "module_sc_handler(): service call : unrecognized service call\n"));
      break;
  }
}




_kernel_oserror *module_callback_handler(_kernel_swi_regs *r, void *pw)
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs swi_regs;

  NOT_USED(r);
  NOT_USED(pw);

  dprintf(("","module_callback_handler(): A key has not been pressed for %d seconds. Hanging up the line.\n", inactivity_period));
  err = _kernel_swi(NCDial_Hangup, &swi_regs, &swi_regs);
  if (err != NULL)
  {
    dprintf(("", "module_callback_handler(): HUP SWI failed\n"));
    return(err);
  }

  return(NULL);
}





_kernel_oserror * module_callafter_handler(_kernel_swi_regs *r, void *pw)
{
  NOT_USED(pw);
  NOT_USED(r);

  setcallback();

  return(NULL);
}




_kernel_oserror *removecallback(void)
{
  _kernel_swi_regs r;
  _kernel_oserror* return_val;

  /* Remove callback */
  r.r[0] = (int) module_callback_entry;
  r.r[1] = (int) module_wsp;
  return_val = _kernel_swi(OS_RemoveCallBack, &r, &r);
  return (return_val);
}



_kernel_oserror *setcallback(void)
{
  _kernel_swi_regs r;
  _kernel_oserror* return_val;

  /* Set callback */
  r.r[0] = (int) module_callback_entry;
  r.r[1] = (int) module_wsp;
  return_val = _kernel_swi(OS_AddCallBack, &r, &r);
  return (return_val);
}






_kernel_oserror *setcallafter(unsigned int seconds)
{
  _kernel_swi_regs r;
  _kernel_oserror* return_val;

  /* Cancel any previous callafter */
  _swix(OS_RemoveTickerEvent, _INR(0, 1), module_callafter_entry, module_wsp);      /* ...then remove the event... */

  if (seconds!=0)
  {
    /* Set callafter */
    r.r[0] = seconds * 100;
    r.r[1] = (int) module_callafter_entry;
    r.r[2] = (int) module_wsp;
    return_val = _kernel_swi(OS_CallAfter, &r, &r);
    return (return_val);
  }
  else
    return NULL;
}








/*********************************************************************************/
/* ticker_event                                                                  */
/*                                                                               */
/* This routine is called on every ticker event. It reads the current mouse      */
/*  position, and if it is different from the previous one it sets a             */
/*  callafter for the required period.                                           */
/*                                                                               */
/* Parameters:  _kernel_swi_regs*                                                */
/*              void*                                                            */
/*                                                                               */
/* Returns:    1                                                                 */
/*                                                                               */
/*********************************************************************************/
int ticker_event(_kernel_swi_regs *rr, void *pw)
{

#ifdef IGNORE_POINTER_MOVEMENTS
   /* This section left intenionally blank */
#else /* We want to cope with mouse pointer movements */
  _kernel_swi_regs r;
  _kernel_oserror* return_val;
  char osw_data[9];

  osw_data[0] = 4; /* subfunction for "get pointer position" */

  // We need to read the mouse state, and if it has altered set the callafter.
  r.r[0] = 21;
  r.r[1] = (int) &osw_data[0];

  return_val = _kernel_swi(OS_Word, &r, &r);
  if (osw_data[1] != mouse_status[0] ||
      osw_data[2] != mouse_status[1] ||
      osw_data[3] != mouse_status[2] ||
      osw_data[4] != mouse_status[3])
  {
    mouse_status[0] = osw_data[1]; // reset the value to the latest one.
    mouse_status[1] = osw_data[2];
    mouse_status[2] = osw_data[3];
    mouse_status[3] = osw_data[4];
    dprintf(("", "Mouse position changed. {%d %d %d %d}. reseting timer.\n", mouse_status[0], mouse_status[1], mouse_status[2], mouse_status[3]));
    reset_timer();
  }
#endif /* IGNORE_POINTER_MOVEMENTS */

  NOT_USED(rr);
  NOT_USED(pw);

  return (1);
}





/*********************************************************************************/
/* get_nvram_tag_string                                                          */
/*                                                                               */
/* This routine returns the string held in the NVRAM tag passed in.              */
/*                                                                               */
/* Parameters: char* tag. The tag we wish to acquire a string from.              */
/*                                                                               */
/* Returns:    Null if the required tag was not found, otherwise the string      */
/*              value held in the tag (which could be NULL itself).              */
/*                                                                               */
/*********************************************************************************/
char* get_nvram_tag_string(char* tag)
{
  _kernel_oserror *er = NULL;
  int tag_size = 0;
  char* tag_contents = NULL;

  dprintf (("", "get_nvram_tag_string()\n"));

  er = _swix(NVRAM_Read, _INR(0,1)|_OUT(0), tag, 0, &tag_size);
  if (tag_size > 0)
  {
      dprintf (("", "get_nvram_tag_string(): Tag size is %d\n", tag_size));
      tag_contents = malloc(tag_size);
      if (tag_contents)
      {
        er = _swix(NVRAM_Read, _INR(0,2), tag, tag_contents, tag_size);
        dprintf (("", "get_nvram_tag_string(): Tag contents are '%s' (length %d)\n", tag_contents, strlen(tag_contents)));
        return (tag_contents);
      }
  }

  return (NULL);
}





/*********************************************************************************/
/* get_nvram_tag_numeric                                                         */
/*                                                                               */
/* This routine returns the integer held in the NVRAM tag passed in.             */
/*                                                                               */
/* Parameters: char* tag. The tag we wish to acquire the integer from.           */
/*                                                                               */
/* Returns:    -1 if the tag was not found, otherwise the integer value held     */
/*              in the tag.                                                      */
/*                                                                               */
/*********************************************************************************/
static int get_nvram_tag_numeric(char* tag)
{
  _kernel_oserror *err= NULL;
  int tag_size = 0;
  int tag_contents = 0;

  dprintf (("", "get_nvram_tag_numeric()\n"));

  err = _swix(NVRAM_Read, _INR(0,1)|_OUT(0), tag, 0, &tag_size);
  if (tag_size > 0 && tag_size <= 4)
  {
    dprintf (("", "get_nvram_tag_numeric(): Tag size is %d\n", tag_size));
    err = _swix(NVRAM_Read, _INR(0,2), tag, &tag_contents, 0);
    dprintf (("", "get_nvram_tag_numeric(): Tag contents are %d\n", tag_contents));
    return (tag_contents);
  }

  return (-1);
}



_kernel_oserror *module_claimv(void)
{
  _kernel_swi_regs r;
  dprintf(("", "module_claimv()\n"));

  r.r[0] = EventV;
  r.r[1] = (int)module_event_entry;
  r.r[2] = (int)module_wsp;
  return (_kernel_swi(OS_Claim, &r, &r));
}




_kernel_oserror *module_events_enable(void)
{
  _kernel_oserror *err;
  _kernel_swi_regs r;
  dprintf(("", "module_events_enable()\n"));

  r.r[0] = Event_Enable;
  r.r[1] = Event_Keyboard;
  err=_kernel_swi(OS_Byte, &r, &r);
  
  if (!err)
  {
    r.r[0] = Event_Enable;
    r.r[1] = Event_Expansion;
    err=_kernel_swi(OS_Byte, &r, &r);
    if (err)
    {
      r.r[0] = Event_Disable;
      r.r[1] = Event_Keyboard;
      _kernel_swi(OS_Byte, &r, &r);
    }
  }
  return err;
}




_kernel_oserror *module_events_disable(void)
{
  _kernel_oserror *err;
  _kernel_swi_regs r;
  dprintf(("", "module_events_disable()\n"));

  r.r[0] = Event_Disable;
  r.r[1] = Event_Keyboard;
  err=_kernel_swi(OS_Byte, &r, &r);

  r.r[0] = Event_Disable;
  r.r[1] = Event_Expansion;
  if (!err)
    err=_kernel_swi(OS_Byte, &r, &r);
  else
    _kernel_swi(OS_Byte, &r, &r);

  return err;
}



void module_releasev(void)
{
  _kernel_swi_regs r;
  dprintf(("", "module_releasev()\n"));

  /* Disable the events */
  module_events_disable();

  /* Release the vector */
  r.r[0] = EventV;
  r.r[1] = (int)module_event_entry;
  r.r[2] = (int)module_wsp;
  (void) _kernel_swi(OS_Release, &r, &r);
}





int module_event_handler(_kernel_swi_regs *r, void *pw)
{
  NOT_USED(pw);

  if (r->r[0] == Event_Keyboard)
  {
    /* We only reset the callafter if the module is active - this essentially ignores keypresses when in standby */
    dprintf(("", "module_event_handler(): Key_Pressed event received. resetting timer\n", inactivity_period));
    reset_timer();
    return(1);
  }
  else if (r->r[0] == Event_Expansion)
  {
    if (r->r[1]==Event_Expansion_SCTransport)
    {
      int reason=r->r[3];
      if (reason == SCI_REMOVED ||
          reason == SCI_INSERTED ||
          reason == SCI_REMOVED2 ||
          reason == SCI_INSERTED2)
      {
        laststayawake=clock();
        reset_timer();
        return(1);
      }
    }
  }

  return(1);
}
