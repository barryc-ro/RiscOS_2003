; -*-As-*-
;
;	 ppp_io.s
;
;	 data transfer routines for PPP driver
;
;	 Copyright (c) 1995 Acorn Computers Ltd.,  Cambridge,  England
;
;
;
	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:APCS.<APCS>

	AREA	ppp_io,  CODE,  READONLY


;
; callproto - set r12 and branch to protocol module's handler
;
; void callproto(DibRef dib, struct mbuf *m0,
;                  void (*handler)(DibRef, struct mbuf *),
;                   unsigned int pw);

	EXPORT  callproto
callproto
	MOV	r12,a4
	MOV	pc,a3


	IF BlockDrivers={TRUE}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; ticker_handler:
;
; this routine is installed directly on TickerV.
;

	IMPORTVar poll_pending
	IMPORTVar serialevents_active
	IMPORTVar portnumber

start_entry_ptr
	IMPORT	start_entry
	DCD	start_entry

poll_entry_ptr
	IMPORT	poll_entry
	DCD	poll_entry

		EXPORT	ticker_handler
ticker_handler	ROUT

;
; before we switch mode (below) need to store r14_irq (i.e. lr) on
; the irq stack.  copy pc into r9 so we can restore the correct
; mode upon exit
;
	STMFD	sp!,  {r0-r3,  r6,  r7,  r9,  lr}
	MOV	r9,  pc

;
; we are normally called in IRQ mode,  get into SVC mode.
;
	ORR	r0,  r9,  #SVC_mode
	TEQP	r0,  #0
	NOP
	STMFD	r13!, {lr}             	; Preserve r14_svc

;
; mess around with relocation offsets
;

	LDR	r0, [r12]
	StaticBaseFromWP r6, r0		; data reloc now in r6

	LDRVar	R7,R6,portnumber

	MOV	R0,#5           ; Check RX buffer
	MOV	R1,R7	     	; Port number
	BL	driver_asm
	TEQS	R0,#0

	BNE	%FA10
5	LDRVar	r0, r6, serialevents_active
	TEQS	r0, #0
	BLNE	checkoutput
	LDMFD	r13!, {lr}
	TEQP	r9,  #0
	NOP
	LDMFD	sp!,  {r0-r3,  r6,  r7,  r9,  pc}^

10	ADRVar	r3, r6, poll_pending
	LDR	r0, [r3]
	TEQS	r0, #0
	BNE	%BA5

	LDR	r0, poll_entry_ptr
	MOV	r1, r12
	SWI	XOS_AddCallBack
	STR	r0, [r3]

	B	%BA5

checkoutput
	STMFD	sp!,{lr}
	MOV	R0,#4  ; Check TX
	MOV	R1,R7
	BL	driver_asm
	CMPS	R0,#64
	LDMLOFD sp!,{pc}^
	MOV	R0,#0
	STRVar	R0,R6,serialevents_active,LR
	LDR	R0,start_entry_ptr
	MOV	R1,R12
	SWI	XOS_AddCallBack
	LDMFD	sp!,{PC}^

	IMPORTVar driver_block

; Version to be called from C
	EXPORT driver
driver
	STMFD	sp!,{lr}
	StaticBaseFromSL lr
	ADRVar	ip,lr,driver_block
	MOV	lr,pc
	MOV	pc,ip
	LDMFD	sp!,{pc}^


; Version to be called from Assembler above
; Takes R6 as its relocation base
driver_asm
	STMFD	sp!,{r4, lr}
	ADRVar	r4,r6,driver_block
	MOV	lr,pc
	MOV	pc,r4
	LDMFD	sp!,{r4, pc}^

	ENDIF

	END

;	/* EOF ppp_io.s */
