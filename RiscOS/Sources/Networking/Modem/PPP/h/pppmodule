#ifndef __pppmodule_h
#define __pppmodule_h

#ifndef __kernel_h
#include "kernel.h"
#endif

/*
 * structures for holding a unit's filtering information
 */
typedef struct filtersingle
{
    unsigned int   fs_errlevel;
    void         (*fs_handler)();
    unsigned int   fs_pwptr;
} FilterSingle, *FilterSingleRef;

extern void *module_wsp;

extern _kernel_oserror _ppp_errblk;

extern int callb_handler(void);
extern _kernel_oserror *ppp_initialise(char *cmd_tail, int pbase, void *pw);
extern _kernel_oserror *ppp_quit(void);
extern void ppp_sc_handler(int sn, _kernel_swi_regs *r);
extern _kernel_oserror *ppp_swi_handler(int swinum, _kernel_swi_regs *r, void *pw);
extern _kernel_oserror *ppp_cli_handler(char *arg_string, int arg_count,
				int cmd_no, void *pw);

extern void freelist(struct mbuf *m);

#ifndef NOT_USED
#define NOT_USED(a) (a=a)
#endif

#ifdef DEBUG
#define pdebug(a) syslog a
#else
#define pdebug(a)
#endif

#endif /*__ppppmodule_h */
