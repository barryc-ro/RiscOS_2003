/*
 * options.c - handles option processing for PPP.
 *
 * Copyright (c) 1989 Carnegie Mellon University.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by Carnegie Mellon University.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

/* Carnegie Mellon acknowledged in c.if_ppp */

/* 1998-03-09: BAL
 * Added support for using DiallerB for serial stream handle arbitration as
 * well as Dialler.
 */

#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>
#include "errno.h"
#include "inetlib.h"
/*#include <unistd.h>*/
#include <limits.h>
/*#include <termios.h>*/
#include <sys/syslog.h>
#include <netinet/in_systm.h>
#include <pwd.h>
#include "socklib.h"
#include "netdb.h"

#include "ppp.h"
#include "pppd.h"
#include "pathnames.h"
#include "patchlevel.h"
#include "fsm.h"
#include "lcp.h"
#include "auth.h"
#include "ipcp.h"
#include "upap.h"
#include "chap.h"
#include "options.h"
#include "main.h"
#include "minixlib.h"
#include "swis.h"

#ifdef BLOCKDRIVERS
    #include "^.blockdrive.h"
#else
    #include "^.ioctl.h"
    #include "^.serial.h"
#endif

#ifndef FALSE
  #define FALSE	0
#endif

#ifndef TRUE
  #define TRUE	1
#endif

#ifndef GIDSET_TYPE
#define GIDSET_TYPE	int
#endif

/*
 * Prototypes
 */
static int setpassive(void);
static int setsilent(void);
static int noopt(void);
static int setnovjccomp(void);
static int setvjslots(char **);
static int reqpap(void);
static int nopap(void);
static int setupapfile(char **);
static int nochap(void);
static int reqchap(void);
static int setspeed(char *);
static int noaccomp(void);
static int noasyncmap(void);
static int noipaddr(void);
static int nomagicnumber(void);
static int setasyncmap(char **);
static int setescape(char **);
static int setmru(char **);
static int setmtu(char **);
static int nomru(void);
static int nopcomp(void);
/*static int setconnector(char **);
static int setdisconnector(char **);*/
static int setdomain(char **);
static int setnetmask(char **);
static int setcrtscts(void);
static int setxonxoff(void);
static int setmodem(void);
static int setlocal(void);
static int setdialler (void);
static int setdiallerb (void);
static int setnodialler (void);
static int setautodial (void);
static int setnoautodial (void);
static int setname(char **);
static int setuser(char **);
static int setremote(char **);
static int setauth(void);
static int readfile(char **);
static int setdefaultroute(void);
static int setproxyarp(void);
/*static int setpersist(void);*/
static int setusehostname(void);
static int setnoipdflt(void);
static int setlcptimeout(char **);
static int setlcpterm(char **);
static int setlcpconf(char **);
static int setlcpfails(char **);
static int setipcptimeout(char **);
static int setipcpterm(char **);
static int setipcpconf(char **);
static int setipcpfails(char **);
static int setpaptimeout(char **);
static int setpapreqs(char **);
static int setchaptimeout(char **);
static int setchapchal(char **);
static int setchapintv(char **);
static int setipcpaccl(void);
static int setipcpaccr(void);
static int setlcpechointv(char **);
static int setlcpechofails(char **);
static int setidle(char **);


/*
 * Option variables
 */
int usehostname;
static int disable_defaultip;

/*
 * Valid arguments.
 */
static struct cmd {
    char *cmd_name;
    int num_args;
    int (*cmd_func)();
} cmds[] = {
    {"-all", 0, noopt},		/* Don't request/allow any options */
    {"-ac", 0, noaccomp},	/* Disable Address/Control compress */
    {"-am", 0, noasyncmap},	/* Disable asyncmap negotiation */
    {"-as", 1, setasyncmap},	/* set the desired async map */
    {"-ip", 0, noipaddr},	/* Disable IP address negotiation */
    {"-mn", 0, nomagicnumber},	/* Disable magic number negotiation */
    {"-mru", 0, nomru},		/* Disable mru negotiation */
    {"-p", 0, setpassive},	/* Set passive mode */
    {"-pc", 0, nopcomp},	/* Disable protocol field compress */
    {"+ua", 1, setupapfile},	/* Get PAP user and password from file */
    {"+pap", 0, reqpap},	/* Require PAP auth from peer */
    {"-pap", 0, nopap},		/* Don't allow UPAP authentication with peer */
    {"+chap", 0, reqchap},	/* Require CHAP authentication from peer */
    {"-chap", 0, nochap},	/* Don't allow CHAP authentication with peer */
    {"+vj", 0, setvj},	        /* force VJ compression */
    {"-vj", 0, setnovj},	/* disable VJ compression */
    {"-vjccomp", 0, setnovjccomp}, /* disable VJ connection-ID compression */
    {"vj-max-slots", 1, setvjslots}, /* Set maximum VJ header slots */
    {"asyncmap", 1, setasyncmap}, /* set the desired async map */
    {"escape", 1, setescape},	/* set chars to escape on transmission */
    /*{"connect", 1, setconnector},*/ /* A program to set up a connection */
    /*{"disconnect", 1, setdisconnector},*/	/* program to disconnect serial dev. */
    {"crtscts", 0, setcrtscts},	/* set h/w flow control */
    {"xonxoff", 0, setxonxoff},	/* set s/w flow control */
    {"-crtscts", 0, setxonxoff}, /* another name for xonxoff */
    {"domain", 1, setdomain},	/* Add given domain name to hostname*/
    {"mru", 1, setmru},		/* Set MRU value for negotiation */
    {"mtu", 1, setmtu},		/* Set our MTU */
    {"netmask", 1, setnetmask},	/* set netmask */
    {"passive", 0, setpassive},	/* Set passive mode */
    {"silent", 0, setsilent},	/* Set silent mode */
    {"modem", 0, setmodem},	/* Use modem control lines */
    {"local", 0, setlocal},	/* Don't use modem control lines */
    {"name", 1, setname},	/* Set local name for authentication */
    {"user", 1, setuser},	/* Set username for PAP auth with peer */
    {"usehostname", 0, setusehostname},	/* Must use hostname for auth. */
    {"remotename", 1, setremote}, /* Set remote name for authentication */
    {"auth", 0, setauth},	/* Require authentication from peer */
    {"file", 1, readfile},	/* Take options from a file */
    {"defaultroute", 0, setdefaultroute}, /* Add default route */
    {"proxyarp", 0, setproxyarp}, /* Add proxy ARP entry */
/*    {"persist", 0, setpersist},*/	/* Keep on reopening connection after close */
    {"noipdefault", 0, setnoipdflt}, /* Don't use name for default IP adrs */
    {"lcp-echo-failure", 1, setlcpechofails}, /* consecutive echo failures */
    {"lcp-echo-interval", 1, setlcpechointv}, /* time for lcp echo events */
    {"lcp-restart", 1, setlcptimeout}, /* Set timeout for LCP */
    {"lcp-max-terminate", 1, setlcpterm}, /* Set max #xmits for term-reqs */
    {"lcp-max-configure", 1, setlcpconf}, /* Set max #xmits for conf-reqs */
    {"lcp-max-failure", 1, setlcpfails}, /* Set max #conf-naks for LCP */
    {"ipcp-restart", 1, setipcptimeout}, /* Set timeout for IPCP */
    {"ipcp-max-terminate", 1, setipcpterm}, /* Set max #xmits for term-reqs */
    {"ipcp-max-configure", 1, setipcpconf}, /* Set max #xmits for conf-reqs */
    {"ipcp-max-failure", 1, setipcpfails}, /* Set max #conf-naks for IPCP */
    {"pap-restart", 1, setpaptimeout}, /* Set timeout for UPAP */
    {"pap-max-authreq", 1, setpapreqs}, /* Set max #xmits for auth-reqs */
    {"chap-restart", 1, setchaptimeout}, /* Set timeout for CHAP */
    {"chap-max-challenge", 1, setchapchal}, /* Set max #xmits for challenge */
    {"chap-interval", 1, setchapintv}, /* Set interval for rechallenge */
    {"ipcp-accept-local", 0, setipcpaccl}, /* Accept peer's address for us */
    {"ipcp-accept-remote", 0, setipcpaccr}, /* Accept peer's address for it */
    {"idle-disconnect", 1, setidle}, /* seconds for disconnect of idle link */
    {"dialler", 0, setdialler}, /* use the dialler */
    {"diallerb", 0, setdiallerb}, /* use the diallerb */
    {"nodialler", 0, setnodialler}, /* don't use the dialler: autodialling not possible */
    {"autodial", 0, setautodial}, /* enable autodialling (only if also using dialler) */
    {"noautodial", 0, setnoautodial}, /* disable autodialling */
    {NULL, 0, NULL}
};


#ifndef IMPLEMENTATION
#define IMPLEMENTATION ""
#endif

/* Forward references */
static int setipaddr(char *arg);
static int setdevname(char *cp);

const char *usage_string =
#ifdef BLOCKDRIVERS
        "    <driver>[:<n>]  Load and use blockdriver <driver>, port <n>\r\n"
#else
        "    <device name>   Use serial device specified by <device name> (eg. Serial1)\r\n"
#endif
    	"    <speed>         Set the baud rate to <speed>\r\n"
    	"    <loc>:<rem>     Set the local and/or remote interface IP\r\n"
    	"                    addresses.  Either one may be omitted.\r\n"
    	"    noipdefault     Ask the peer to supply our IP address.\r\n"
    	"    asyncmap <n>    Set the desired async map to hex <n>\r\n"
    	"    auth            Require authentication from peer\r\n"
    	"    user <u>        Set the user name to use for authenticating this machine\r\n"
    	"                    with the peer using PAP to <u>\r\n"
    	"    defaultroute    Add default route through interface\r\n"
    	"    file <f>        Take options from file <f>\r\n"
    	"    modem           Use modem control lines\r\n"
    	"    mru <n>         Set MRU value to <n> for negotiation\r\n"
    	"    netmask <n>     Set interface netmask to <n>\r\n"
    	"    -vj             Disable Van Jacobson TCP/IP header compression\r\n"
    	"\r\n"
    	"See the manual for more options.\r\n";

/*
 * usage - print out a message telling how to use the program.
 */
static void usage(void)
{
    _swix(OS_Write0, _IN(0), "Syntax: *PPPConnect [arguments], where arguments are:");
    _swix(OS_NewLine, 0);
    _swix(OS_Write0, _IN(0), usage_string);
}

/*
 * parse_args - parse a string of arguments, from the command
 * line or from a file.
 */
int parse_args(int argc, char **argv)
{
    char *arg;
    struct cmd *cmdp;
    int ret;

    while (argc > 0) {
	arg = *argv++;
	--argc;

	/*
	 * First see if it's a command.
	 */
	for (cmdp = cmds; cmdp->cmd_name; cmdp++)
	    if (!strcmp(arg, cmdp->cmd_name))
		break;

	if (cmdp->cmd_name != NULL) {
	    if (argc < cmdp->num_args) {
		printf("Too few parameters for command %s\n", arg);
		return 0;
	    }
	    if (!(*cmdp->cmd_func)(argv))
		return 0;
	    argc -= cmdp->num_args;
	    argv += cmdp->num_args;

	} else {
	    /*
	     * Maybe a tty name, speed or IP address?
	     */
	    if ((ret = setdevname(arg)) == 0
		&& (ret = setspeed(arg)) == 0
		&& (ret = setipaddr(arg)) == 0) {
		printf("%s: unrecognized command\n", arg);
		usage();
		return 0;
	    }
	    if (ret < 0)	/* error */
		return 0;
	}
    }
    return 1;
}

/*
 * options_from_file - Read a string of options from a file,
 * and interpret them.
 */
int options_from_file(char *filename, int must_exist, int check_prot)
{
    FILE *f;
    int i, newline, ret;
    struct cmd *cmdp;
    char *argv[MAXARGS];
    char args[MAXARGS][MAXWORDLEN];
    char cmd[MAXWORDLEN];

    IGNORE(check_prot);

    if ((f = fopen(filename, "r")) == NULL)
    {
	if (!must_exist)
	    return 1;
	printf("%s: Unable to open\n", filename);
	return 0;
    }

    while (getword(f, cmd, &newline, filename)) {
	/*
	 * First see if it's a command.
	 */
	for (cmdp = cmds; cmdp->cmd_name; cmdp++)
	    if (!strcmp(cmd, cmdp->cmd_name))
		break;

	if (cmdp->cmd_name != NULL)
	{
	    for (i = 0; i < cmdp->num_args; ++i)
	    {
		if (!getword(f, args[i], &newline, filename))
		{
		    printf("In file %s: too few parameters for command %s\n",
			    filename, cmd);
		    fclose(f);
		    return 0;
		}
		argv[i] = args[i];
	    }
	    if (!(*cmdp->cmd_func)(argv))
	    {
		fclose(f);
		return 0;
	    }

	} else {
	    /*
	     * Maybe a tty name, speed or IP address?
	     */
	    if ((ret = setdevname(cmd)) == 0
		&& (ret = setspeed(cmd)) == 0
		&& (ret = setipaddr(cmd)) == 0)
            {
		printf("In file %s: unrecognized command %s\n", filename, cmd);
		fclose(f);
		return 0;
	    }
	    if (ret < 0)	/* error */
	    {
	        fclose(f);
		return 0;
	    }
	}
    }
    fclose(f);
    return 1;
}


/*
 * Read a word from a file.
 * Words are delimited by white-space or by quotes (").
 * Quotes, white-space and \ may be escaped with \.
 * \<newline> is ignored.
 */
int getword(FILE *f, char *word, int *newlinep, char *filename)
{
    int c, len, escape;
    int quoted;

    *newlinep = 0;
    len = 0;
    escape = 0;
    quoted = 0;

    /*
     * First skip white-space and comments
     */
    while ((c = fgetc(f)) != EOF) {
	if (c == '\\') {
	    /*
	     * \<newline> is ignored; \ followed by anything else
	     * starts a word.
	     */
	    if ((c = getc(f)) == '\n')
		continue;
	    word[len++] = '\\';
	    escape = 1;
	    break;
	}
	if (c == '\n')
	    *newlinep = 1;	/* next word starts a line */
	else if (c == '#') {
	    /* comment - ignore until EOF or \n */
	    while ((c = fgetc(f)) != EOF && c != '\n')
		;
	    if (c == EOF)
		break;
	    *newlinep = 1;
	} else if (!isspace(c))
	    break;
    }

    /*
     * End of file or error - fail
     */
    if (c == EOF) {
	if (ferror(f)) {
	    perror(filename);
	    die(1);
	}
	return 0;
    }

    for (;;) {
	/*
	 * Is this character escaped by \ ?
	 */
	if (escape) {
	    if (c == '\n')
		--len;			/* ignore \<newline> */
	    else if (c == '"' || isspace(c) || c == '\\')
		word[len-1] = c;	/* put special char in word */
	    else {
		if (len < MAXWORDLEN-1)
		    word[len] = c;
		++len;
	    }
	    escape = 0;
	} else if (c == '"') {
	    quoted = !quoted;
	} else if (!quoted && (isspace(c) || c == '#')) {
	    ungetc(c, f);
	    break;
	} else {
	    if (len < MAXWORDLEN-1)
		word[len] = c;
	    ++len;
	    if (c == '\\')
		escape = 1;
	}
        if ((c = fgetc (f)) == EOF)
	    break;

    }

    if (ferror(f)) {
	perror(filename);
	die(1);
    }

    if (len >= MAXWORDLEN) {
	word[MAXWORDLEN-1] = 0;
	printf("%s: warning: word in file %s too long (%.20s...)\n",
		progname, filename, word);
    } else
	word[len] = 0;

    return 1;
}

/*
 * number_option - parse a numeric parameter for an option
 */
static int number_option(char *str, long *valp, int base)
{
    char *ptr;

    *valp = strtol(str, &ptr, base);
    if (ptr == str) {
	printf("%s: invalid number: %s\n", progname, str);
	return 0;
    }
    return 1;
}


/*
 * int_option - like number_option, but valp is int *,
 * the base is assumed to be 0, and *valp is not changed
 * if there is an error.
 */
static int int_option(char *str, int *valp)
{
    long v;

    if (!number_option(str, &v, 0))
	return 0;
    *valp = (int) v;
    return 1;
}


/*
 * The following procedures execute commands.
 */

/*
 * readfile - take commands from a file.
 */
static int readfile(char **argv)
{
    return options_from_file(*argv, 1, 1);
}


/*
 * noopt - Disable all options.
 */
static int noopt(void)
{
    BZERO((char *) &lcp_wantoptions[0], sizeof (struct lcp_options));
    BZERO((char *) &lcp_allowoptions[0], sizeof (struct lcp_options));
    BZERO((char *) &ipcp_wantoptions[0], sizeof (struct ipcp_options));
    BZERO((char *) &ipcp_allowoptions[0], sizeof (struct ipcp_options));
    return (1);
}

/*
 * noaccomp - Disable Address/Control field compression negotiation.
 */
static int noaccomp(void)
{
    lcp_wantoptions[0].neg_accompression = 0;
    lcp_allowoptions[0].neg_accompression = 0;
    return (1);
}


/*
 * noasyncmap - Disable async map negotiation.
 */
static int noasyncmap(void)
{
    lcp_wantoptions[0].neg_asyncmap = 0;
    lcp_allowoptions[0].neg_asyncmap = 0;
    return (1);
}


/*
 * noipaddr - Disable IP address negotiation.
 */
static int noipaddr(void)
{
    ipcp_wantoptions[0].neg_addr = 0;
    ipcp_allowoptions[0].neg_addr = 0;
    return (1);
}


/*
 * nomagicnumber - Disable magic number negotiation.
 */
static int nomagicnumber(void)
{
    lcp_wantoptions[0].neg_magicnumber = 0;
    lcp_allowoptions[0].neg_magicnumber = 0;
    return (1);
}


/*
 * nomru - Disable mru negotiation.
 */
static int nomru(void)
{
    lcp_wantoptions[0].neg_mru = 0;
    lcp_allowoptions[0].neg_mru = 0;
    return (1);
}


/*
 * setmru - Set MRU for negotiation.
 */
static int setmru(char **argv)
{
    int mru;

    if (!number_option(*argv, (long *) &mru, 0))
	return 0;
    lcp_wantoptions[0].mru = mru;
    lcp_wantoptions[0].neg_mru = 1;
    return (1);
}


/*
 * setmru - Set the largest MTU we'll use.
 */
static int setmtu(char **argv)
{
    int mtu;

    if (!number_option(*argv, (long *) &mtu, 0))
	return 0;
    if (mtu < MINMRU || mtu > MAXMRU) {
	printf("mtu option value of %d is too %s\n", mtu,
		(mtu < MINMRU? "small": "large"));
	return 0;
    }
    lcp_allowoptions[0].mru = mtu;
    return (1);
}


/*
 * nopcomp - Disable Protocol field compression negotiation.
 */
static int nopcomp(void)
{
    lcp_wantoptions[0].neg_pcompression = 0;
    lcp_allowoptions[0].neg_pcompression = 0;
    return (1);
}


/*
 * setpassive - Set passive mode (don't give up if we time out sending
 * LCP configure-requests).
 */
static int setpassive(void)
{
    lcp_wantoptions[0].passive = 1;
    return (1);
}


/*
 * setsilent - Set silent mode (don't start sending LCP configure-requests
 * until we get one from the peer).
 */
static int setsilent(void)
{
    lcp_wantoptions[0].silent = 1;
    return 1;
}


/*
 * nopap - Disable PAP authentication with peer.
 */
static int nopap(void)
{
    lcp_allowoptions[0].neg_upap = 0;
    return (1);
}


/*
 * reqpap - Require PAP authentication from peer.
 */
static int reqpap(void)
{
    lcp_wantoptions[0].neg_upap = 1;
    auth_required = 1;
    return 1;
}


/*
 * setupapfile - specifies UPAP info for authenticating with peer.
 */
static int setupapfile(char **argv)
{
    FILE * ufile;
    int l;

    lcp_allowoptions[0].neg_upap = 1;

    /* open user info file */
    if ((ufile = fopen(*argv, "r")) == NULL) {
	printf("unable to open user login data file %s\n", *argv);
	return 0;
    }
#   ifndef __riscos
    if (!readable(fileno(ufile))) {
	printf("%s: access denied\n", *argv);
	return 0;
    }
#   endif
    check_access(ufile, *argv);

    /* get username */
    if (fgets(user, MAXNAMELEN - 1, ufile) == NULL
	|| fgets(passwd, MAXSECRETLEN - 1, ufile) == NULL){
	printf("Unable to read user login data file %s.\n", *argv);
	return 0;
    }
    fclose(ufile);

    /* get rid of newlines */
    l = strlen(user);
    if (l > 0 && user[l-1] == '\n')
	user[l-1] = 0;
    l = strlen(passwd);
    if (l > 0 && passwd[l-1] == '\n')
	passwd[l-1] = 0;

    return (1);
}


/*
 * nochap - Disable CHAP authentication with peer.
 */
static int nochap(void)
{
    lcp_allowoptions[0].neg_chap = 0;
    return (1);
}


/*
 * reqchap - Require CHAP authentication from peer.
 */
static int reqchap(void)
{
    lcp_wantoptions[0].neg_chap = 1;
    auth_required = 1;
    return (1);
}


/*
 * setnovj - disable vj compression
 */
int setnovj(void)
{
    ipcp_wantoptions[0].neg_vj = 0;
    ipcp_allowoptions[0].neg_vj = 0;
    explicit_vj=1;
    return (1);
}

/*
 * setvj - enable vj compression
 */
int setvj(void)
{
    ipcp_wantoptions[0].neg_vj = 1;
    ipcp_allowoptions[0].neg_vj = 1;
    explicit_vj=1;
    return (1);
}

/*
 * setnovjccomp - disable VJ connection-ID compression
 */
static int setnovjccomp(void)
{
    ipcp_wantoptions[0].cflag = 0;
    ipcp_allowoptions[0].cflag = 0;
    return 1;
}


/*
 * setvjslots - set maximum number of connection slots for VJ compression
 */
static int setvjslots(char **argv)
{
    int value;

    if (!int_option(*argv, &value))
	return 0;
    if (value < 2 || value > 16) {
	printf("pppd: vj-max-slots value must be between 2 and 16\n");
	return 0;
    }
    ipcp_wantoptions [0].maxslotindex =
        ipcp_allowoptions[0].maxslotindex = value - 1;
    return 1;
}

#if 0
/*
 * setconnector - Set a program to connect to a serial line
 */
static int setconnector(char **argv)
{
    connector = malloc(strlen(*argv)+1);
    if (connector == NULL)
	novm("connector string");
    strcpy(connector, *argv);

    return 1;
}

/*
 * setdisconnector - Set a program to disconnect from the serial line
 */
static int setdisconnector(char **argv)
{
    disconnector = (char *)malloc(strlen(*argv)+1);
    if (disconnector == NULL)
	novm("disconnector string");
    strcpy(connector, *argv);

    return (1);
}
#endif

/*
 * setdomain - Set domain name to append to hostname
 */
static int setdomain(char **argv)
{
    strncat(hostname, *argv, MAXNAMELEN - strlen(hostname));
    hostname[MAXNAMELEN-1] = 0;
    return (1);
}


/*
 * setasyncmap - add bits to asyncmap (what we request peer to escape).
 */
static int setasyncmap(char **argv)
{
    long asyncmap;

    if (!number_option(*argv, &asyncmap, 16))
	return 0;
    lcp_wantoptions[0].asyncmap |= asyncmap;
    lcp_wantoptions[0].neg_asyncmap = 1;
    return(1);
}


/*
 * setescape - add chars to the set we escape on transmission.
 */
static int setescape(char **argv)
{
    int n, ret;
    char *p, *endp;

    p = *argv;
    ret = 1;
    while (*p) {
	n = (int)strtol(p, &endp, 16);
	if (p == endp) {
	    printf("%s: invalid hex number: %s\n", progname, p);
	    return 0;
	}
	p = endp;
	if (n < 0 || 0x20 <= n && n <= 0x3F || n == 0x5E || n > 0xFF) {
	    printf("%s: can't escape character 0x%x\n", progname, n);
	    ret = 0;
	} else
	    xmit_accm[0][n >> 5] |= 1UL << (n & 0x1FUL);
	while (*p == ',' || *p == ' ')
	    ++p;
    }
    return ret;
}


/*
 * setspeed - Set the speed.
 */
static int setspeed(char *arg)
{
    char *ptr;
    int spd;

    spd = (int)strtol(arg, &ptr, 0);
    if (ptr == arg || *ptr != 0 || spd == 0 && arg[0]!='0')
    {
        pdebug ((LOG_DEBUG, "setspeed (%s): rejecting", arg));
	return 0;
    }
    inspeed = spd;
    return 1;
}


/*
 * setdevname - Set the device name.
 */

#ifdef BLOCKDRIVERS

static int setdevname(char *cp)
{
    char dev[MAXPATHLEN];
    _kernel_oserror *e;
    int f;
    char *p;

    if (getenv("SerialDev$Path") == NULL)
        return 0;

    if ((p=strchr(cp, ':')) != NULL)
    {
        portnumber=atoi(p+1);
        *p='\0';
    }

    strcpy(dev, "SerialDev:Modules.");
    strncat(dev, cp, MAXPATHLEN - 26);
    strcat(dev, ".Driver");

    /*
     * Check if there is a device by this name.
     */

    if (_swix(OS_Find, _INR(0,1)|_OUT(0), 0x4C, dev, &f))
    {
        /* Put the colon back! */
        if (p) *p=':';

        return 0;
    }

    /* Load the blockdriver */
    e=_swix(OS_GBPB, _INR(0,3), 4, f, driver_block, sizeof driver_block);
    _swix(OS_Find, _INR(0,1), 0, f);

    if (e)
        return -1;

#ifndef OS_SynchroniseCodeAreas
#define OS_SynchroniseCodeAreas 0x6E
#endif
    _swix(OS_SynchroniseCodeAreas, _INR(0,2),
                     1, driver_block, driver_block+(sizeof driver_block/sizeof driver_block[0] - 1));

    strncpy(devname, cp, MAXPATHLEN);
    devname[MAXPATHLEN-1] = 0;
    default_device = FALSE;

    return 1;
}

#else

static int setdevname (char *cp)
{
    int object_type;
    _kernel_oserror *e;


    e = _swix (OS_File, _INR (0, 1) | _OUT (0), 17, cp, &object_type);

    if (e || object_type != 1)
    {
        pdebug ((LOG_DEBUG, "setdevname (%s): rejecting", cp));
        return (0);
    }

    strncpy(devname, cp, MAXPATHLEN);
    devname[MAXPATHLEN-1] = '\0';
    default_device = FALSE;

    return 1;
}

#endif

/*
 * setipaddr - Set the IP address
 */
static int setipaddr(char *arg)
{
    struct hostent *hp;
    char *colon;
    u_long local, remote;
    ipcp_options *wo = &ipcp_wantoptions[0];

    /*
     * IP address pair separated by ":".
     */
    if ((colon = strchr(arg, ':')) == NULL)
    {
        pdebug ((LOG_DEBUG, "setipaddr (%s): rejecting", arg));
	return 0;
    }

    /*
     * If colon first character, then no local addr.
     */
    if (colon != arg) {
	*colon = '\0';
	if ((local = inet_addr(arg)) == -1) {
	    if ((hp = gethostbyname(arg)) == NULL) {
		printf("unknown host: %s\n", arg);
		return -1;
	    } else {
		local = *(long *)hp->h_addr;
		if (our_name[0] == 0) {
		    strncpy(our_name, arg, MAXNAMELEN);
		    our_name[MAXNAMELEN-1] = 0;
		}
	    }
	}
	if (bad_ip_adrs(local)) {
	    printf("bad local IP address %s\n", ip_ntoa(local));
	    return -1;
	}
	if (local != 0)
	    wo->ouraddr = local;
	*colon = ':';
    }

    /*
     * If colon last character, then no remote addr.
     */
    if (*++colon != '\0')
    {
	if ((remote = inet_addr(colon)) == -1)
	{
	    if ((hp = gethostbyname(colon)) == NULL)
	    {
		printf("unknown host: %s\n", colon);
		return -1;
	    }
	    else
	    {
		remote = *(long *)hp->h_addr;
		if (remote_name[0] == 0)
		{
		    strncpy(remote_name, colon, MAXNAMELEN);
		    remote_name[MAXNAMELEN-1] = 0;
		}
	    }
	}
	if (bad_ip_adrs(remote))
	{
	    printf("bad remote IP address %s\n", ip_ntoa(remote));
	    return -1;
	}
	if (remote != 0)
	    wo->hisaddr = remote;
    }

    return 1;
}


/*
 * setnoipdflt - disable setipdefault()
 */
static int setnoipdflt(void)
{
    disable_defaultip = 1;
    return 1;
}


/*
 * setipcpaccl - accept peer's idea of our address
 */
static int setipcpaccl(void)
{
    ipcp_wantoptions[0].accept_local = 1;
    return 1;
}


/*
 * setipcpaccr - accept peer's idea of its address
 */
static int setipcpaccr(void)
{
    ipcp_wantoptions[0].accept_remote = 1;
    return 1;
}


/*
 * setipdefault - default our local IP address based on our hostname.
 */
void setipdefault(void)
{
    struct hostent *hp;
    u_long local;
    ipcp_options *wo = &ipcp_wantoptions[0];

    /*
     * If local IP address already given, don't bother.
     */
    if (wo->ouraddr != 0 || disable_defaultip)
	return;

    /*
     * Look up our hostname (possibly with domain name appended)
     * and take the first IP address as our local IP address.
     * If there isn't an IP address for our hostname, too bad.
     */
    wo->accept_local = 1;	/* don't insist on this default value */
    if ((hp = gethostbyname(hostname)) == NULL)
	return;
    local = *(long *)hp->h_addr;
    if (local != 0 && !bad_ip_adrs(local))
	wo->ouraddr = local;
}


/*
 * setnetmask - set the netmask to be used on the interface.
 */
static int setnetmask(char **argv)
{
    u_long mask;

    if ((mask = inet_addr(*argv)) == -1 || (netmask & ~mask) != 0) {
	printf("Invalid netmask %s\n", *argv);
	return 0;
    }

    netmask = mask;
    return (1);
}

/*
 * Return user specified netmask. A value of zero means no netmask has
 * been set.
 */
/* ARGSUSED */
u_long GetMask(u_long addr)
{
    IGNORE(addr);
    return netmask;
}


static int setcrtscts(void)
{
    crtscts = 1;
    return (1);
}

static int setxonxoff(void)
{
    crtscts = 2;
    return (1);
}

static int setmodem(void)
{
    modem = 1;
    return 1;
}

static int setlocal(void)
{
    modem = 0;
    return 1;
}

static int setdialler (void)
{
    dialler_flags |= DiallerFlags_UsingDialler;
    return 1;
}

static int setdiallerb (void)
{
    dialler_flags |= DiallerFlags_UsingDialler;
    dialler_flags |= DiallerFlags_DiallerB;
    return 1;
}

static int setnodialler (void)
{
    dialler_flags &= ~DiallerFlags_UsingDialler;
    return 1;
}

static int setautodial (void)
{
    dialler_flags |= DiallerFlags_AutoDial;
    return 1;
}

static int setnoautodial (void)
{
    dialler_flags &= ~DiallerFlags_AutoDial;
    return 1;
}

static int setusehostname(void)
{
    usehostname = 1;
    return 1;
}

static int setname(char **argv)
{
    if (our_name[0] == 0) {
	strncpy(our_name, argv[0], MAXNAMELEN);
	our_name[MAXNAMELEN-1] = 0;
    }
    return 1;
}

static int setuser(char **argv)
{
    strncpy(user, argv[0], MAXNAMELEN);
    user[MAXNAMELEN-1] = 0;
    return 1;
}

static int setremote(char **argv)
{
    strncpy(remote_name, argv[0], MAXNAMELEN);
    remote_name[MAXNAMELEN-1] = 0;
    return 1;
}

static int setauth(void)
{
    auth_required = 1;
    return 1;
}

static int setdefaultroute(void)
{
    ipcp_wantoptions[0].default_route = 1;
    return 1;
}

static int setproxyarp(void)
{
    ipcp_wantoptions[0].proxy_arp = 1;
    return 1;
}

#if 0
static int setpersist(void)
{
    persist = 1;
    return 1;
}
#endif


/*
 * Functions to set the echo interval for modem-less monitors
 */

static int setlcpechointv(char **argv)
{
    return int_option(*argv, (int *) &lcp_echo_interval);
}

static int setlcpechofails(char **argv)
{
    return int_option(*argv, (int *) &lcp_echo_fails);
}

/*
 * Functions to set timeouts, max transmits, etc.
 */
static int setlcptimeout(char **argv)
{
    return int_option(*argv, &lcp_fsm[0].timeouttime);
}

static int setlcpterm(char **argv)
{
    return int_option(*argv, &lcp_fsm[0].maxtermtransmits);
}

static int setlcpconf(char **argv)
{
    return int_option(*argv, &lcp_fsm[0].maxconfreqtransmits);
}

static int setlcpfails(char **argv)
{
    return int_option(*argv, &lcp_fsm[0].maxnakloops);
}

static int setipcptimeout(char **argv)
{
    return int_option(*argv, &ipcp_fsm[0].timeouttime);
}

static int setipcpterm(char **argv)
{
    return int_option(*argv, &ipcp_fsm[0].maxtermtransmits);
}

static int setipcpconf(char **argv)
{
    return int_option(*argv, &ipcp_fsm[0].maxconfreqtransmits);
}

static int setipcpfails(char **argv)
{
    return int_option(*argv, &lcp_fsm[0].maxnakloops);
}

static int setpaptimeout(char **argv)
{
    return int_option(*argv, &upap[0].us_timeouttime);
}

static int setpapreqs(char **argv)
{
    return int_option(*argv, &upap[0].us_maxtransmits);
}

static int setchaptimeout(char **argv)
{
    return int_option(*argv, &chap[0].timeouttime);
}

static int setchapchal(char **argv)
{
    return int_option(*argv, &chap[0].max_transmits);
}

static int setchapintv(char **argv)
{
    return int_option(*argv, &chap[0].chal_interval);
}

static int setidle(char **argv)
{
    int_option(*argv, &idle_time_limit);
    return int_option(*argv, &default_idle_time_limit);
}
