/*
 * ccp.c - PPP Compression Control Protocol.
 *
 * Copyright (c) 1989 Carnegie Mellon University.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by Carnegie Mellon University.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

/*
 * TODO:
 */

#ifdef MemCheck_MEMCHECK
#pragma -c0
#endif

#include <stdio.h>
#include <string.h>
#include <sys/syslog.h>
#include "socklib.h"
#include "inetlib.h"

#include <netinet/in_systm.h>

#include "pppd.h"
#include "ppp.h"
#include "minixlib.h"
#include "auth.h"
#include "fsm.h"
#include "main.h"
#include "ccp.h"

#include "../ppp-comp.h"

static int ccp_rejci(fsm *f, u_char *p, int len);

/*
 * We don't actually do any compression, so this is all just stubs.
 * The FSM will do the hard work, and will automatically ConfRej
 * everything.
 */

static fsm ccp_fsm[NPPP];	/* CCP fsm structure */

static fsm_callbacks ccp_callbacks = {	/* CCP callback routines */
    NULL,			/* Reset our Configuration Information */
    NULL,			/* Length of our Configuration Information */
    NULL,			/* Add our Configuration Information */
    NULL,			/* ACK our Configuration Information */
    NULL,			/* NAK our Configuration Information */
    ccp_rejci,			/* Reject our Configuration Information */
    NULL,			/* Request peer's Configuration Information */
    NULL,			/* Called when fsm reaches OPENED state */
    NULL,			/* Called when fsm leaves OPENED state */
    NULL,			/* Called when we want the lower layer up */
    NULL,			/* Called when we want the lower layer down */
    NULL,			/* Called when Protocol-Reject received */
    NULL,			/* Retransmission is necessary */
    NULL,			/* Called to handle protocol-specific codes */
    "CCP"			/* String name of protocol */
};

/*
 * ccp_init - Initialize CCP.
 */
void ccp_init(int unit)
{
    fsm *f = &ccp_fsm[unit];

    f->unit = unit;
    f->protocol = CCP;
    f->callbacks = &ccp_callbacks;
    fsm_init(f);

}

/*
 * ccp_open - CCP is allowed to come up.
 */
void ccp_open(int unit)
{
    ccp_fsm[unit].flags |= OPT_SILENT;
    fsm_open(&ccp_fsm[unit]);
}


/*
 * ccp_close - Take CCP down.
 */
void ccp_close(int unit)
{
    fsm_close(&ccp_fsm[unit]);
}


/*
 * ccp_lowerup - The lower layer is up.
 */
void ccp_lowerup(int unit)
{
    fsm_lowerup(&ccp_fsm[unit]);
}


/*
 * ccp_lowerdown - The lower layer is down.
 */
void ccp_lowerdown(int unit)
{
    fsm_lowerdown(&ccp_fsm[unit]);
}


/*
 * ccp_input - Input CCP packet.
 */
void ccp_input(int unit, u_char *p, int len)
{
    fsm *f = &ccp_fsm[unit];
    int oldstate = f->state;

    fsm_input(f, p, len);

    /*
     * If we get a terminate-ack and we're not asking for compression,
     * close CCP.
     */
    if (oldstate == REQSENT && p[0] == TERMACK)
	ccp_close(unit);
}



/*
 * ccp_protrej - A Protocol-Reject was received for CCP.
 *
 * Pretend the lower layer went down, so we shut up.
 */
void ccp_protrej(int unit)
{
    fsm_lowerdown(&ccp_fsm[unit]);
}


/*
 * ccp_rejci - Reject some of our CIs.
 */
static int ccp_rejci(fsm *f, u_char *p, int len)
{
    /*
     * We only send null ConfReqs. If we get a ConfRej back (odd),
     * stop sending ConfReqs.
     */
    if (len == 0)
        return -1;

    return 0;
}


/*
 * ccp_printpkt - print the contents of an CCP packet.
 */
static char *ccp_codenames[] = {
    "ConfReq", "ConfAck", "ConfNak", "ConfRej",
    "TermReq", "TermAck", "CodeRej", NULL,
    NULL,      NULL,      NULL,      NULL,
    NULL,      "ResetReq","ResetAck",
};

int ccp_printpkt(u_char *p, int plen, void (*printer)(void *, char *, ...), void *arg)
{
    int code, id, len, olen;
    u_char *pstart, *optend;
    u_short cishort;
    u_long cilong;

    if (plen < HEADERLEN)
	return 0;
    pstart = p;
    GETCHAR(code, p);
    GETCHAR(id, p);
    GETSHORT(len, p);
    if (len < HEADERLEN || len > plen)
	return 0;

    if (code >= 1 && code <= sizeof(ccp_codenames) / sizeof(char *)
        && ccp_codenames[code-1] != NULL)
	printer(arg, " %s", ccp_codenames[code-1]);
    else
	printer(arg, " code=0x%x", code);
    printer(arg, " id=0x%x", id);
    len -= HEADERLEN;
    switch (code) {
    case CONFREQ:
    case CONFACK:
    case CONFNAK:
    case CONFREJ:
	/* print list of possible compression methods */
	while (len >= 2) {
	    GETCHAR(code, p);
	    GETCHAR(olen, p);
	    p -= 2;
	    if (olen < 2 || olen > len) {
		break;
	    }
	    printer(arg, " <");
	    len -= olen;
	    optend = p + olen;
	    switch (code) {
	    case CI_DEFLATE:
		if (olen == CILEN_DEFLATE) {
		    p += 2;
		    GETCHAR(code, p);
		    printer(arg, "deflate %d", DEFLATE_SIZE(code));
		    if (DEFLATE_METHOD(code) != DEFLATE_METHOD_VAL)
			printer(arg, " method %d", DEFLATE_METHOD(code));
		    GETCHAR(code, p);
		    if (code != DEFLATE_CHK_SEQUENCE)
			printer(arg, " check %d", code);
		}
		break;
	    case CI_BSD_COMPRESS:
		if (olen == CILEN_BSD_COMPRESS) {
		    p += 2;
		    GETCHAR(code, p);
		    printer(arg, "bsd v%d %d", BSD_VERSION(code),
			    BSD_NBITS(code));
		}
		break;
	    case CI_PREDICTOR_1:
		if (olen == CILEN_PREDICTOR_1) {
		    p += 2;
		    printer(arg, "predictor 1");
		}
		break;
	    case CI_PREDICTOR_2:
		if (olen == CILEN_PREDICTOR_2) {
		    p += 2;
		    printer(arg, "predictor 2");
		}
		break;
	    case CI_OUI:
		if (olen >= CILEN_OUI) {
		    p += 2;
		    GETCHAR(code, p);
		    printer(arg, "oui %.2x:", code);
		    GETCHAR(code, p);
		    printer(arg, "%.2x:", code);
		    GETCHAR(code, p);
		    printer(arg, "%.2x", code);
		    GETCHAR(code, p);
		    printer(arg, " subtype %d", code);
		}
		break;
	    case CI_STAC_LZS:
		if (olen == CILEN_STAC_LZS) {
		    p += 2;
		    GETSHORT(cishort, p);
		    printer(arg, "Stac-LZS hist %d", cishort);
		    GETCHAR(code, p);
		    if (STAC_LZS_RESERVED(code) != 0)
			printer(arg, " rsvd 0x%x", STAC_LZS_RESERVED(code));
		    printer(arg, " check ");
		    code = STAC_LZS_CHECK_MODE(code);
		    switch (code) {
		    case STAC_LZS_NONE:
			printer(arg, "none");
			break;
		    case STAC_LZS_LCB:
			printer(arg, "LCB");
			break;
		    case STAC_LZS_CRC:
			printer(arg, "CRC");
			break;
		    case STAC_LZS_SEQUENCE:
			printer(arg, "sequence-number");
			break;
		    case STAC_LZS_EXTENDED:
			printer(arg, "extended");
			break;
		    default:
			printer(arg, "%d", code);
			break;
		    }
		}
		break;
	    case CI_LZS_DCP:
		if (olen == CILEN_LZS_DCP) {
		    p += 2;
		    GETSHORT(cishort, p);
		    GETCHAR(code, p);
		    printer(arg, "LZS-DCP hist %d", cishort);
		    GETCHAR(code, p);
		    printer(arg, " check ");
		    switch (code) {
		    case LZS_DCP_NONE:
			printer(arg, "none");
			break;
		    case LZS_DCP_LCB:
			printer(arg, "LCB");
			break;
		    case LZS_DCP_SEQUENCE:
			printer(arg, "sequence-number");
			break;
		    case LZS_DCP_SEQUENCE_LCB:
			printer(arg, "sequence-number+LCB");
			break;
		    default:
			printer(arg, "%d", code);
			break;
		    }
		    GETCHAR(code, p);
		    printer(arg, " process %d", code);
		}
		break;
	    case CI_MPPC:
		if (olen == CILEN_MPPC) {
		    p += 2;
		    GETLONG(cilong, p);
		    printer(arg, "MPPC %.8x", cilong);
		}
		break;
	    }
	    while (p < optend) {
		GETCHAR(code, p);
		printer(arg, " %.2x", code);
	    }
	    printer(arg, ">");
	}
	break;

    case TERMACK:
    case TERMREQ:
	if (len > 0 && *p >= ' ' && *p < 0x7f) {
	    printer(arg, " ");
	    print_string((char *) p, len, printer, arg);
	    p += len;
	    len = 0;
	}
	break;
    }

    /* print the rest of the bytes in the packet */
    for (; len > 0; --len) {
	GETCHAR(code, p);
	printer(arg, " %.2x", code);
    }

    return p - pstart;
}
