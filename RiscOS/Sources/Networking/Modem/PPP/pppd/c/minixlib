#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <stdio.h>

#include "kernel.h"
#include "swis.h"

#include "errno.h"
#pragma no_warn_deprecated
#include "sys/signal.h"
#pragma warn_deprecated

#include <sys/types.h>
#include <sys/syslog.h>

#include "main.h"
#include "minixlib.h"
#include "^.pppmodule.h"
#include "^.svcprint.h"


static void message_add(const char *str);
static const char *message_str(int age);
static int message_num(void);

static struct sigaction sigacts[NSIG];
static sigset_t signal_mask;
static int logmask;

int sigemptyset(sigset_t *mask)
{
    *mask=0;

    return 0;
}

int sigaddset(sigset_t *mask, int sig)
{
    *mask|=(1<<sig);

    return 0;
}

int sigprocmask(int how, sigset_t *set, sigset_t *oset)
{
    switch (how)
    {
      case SIG_BLOCK:
        if (oset)
            *oset=signal_mask;
        signal_mask |= *set;
        break;

      case SIG_UNBLOCK:
        if (oset)
            *oset=signal_mask;
        signal_mask &= ~*set;
        break;

      case SIG_SETMASK:
        if (oset)
            *oset=signal_mask;
        signal_mask = *set;
        break;

      default:
        errno=EINVAL;
        return -1;
    }
    return 0;
}

int sigaction(int sig, struct sigaction *act, struct sigaction *oact)
{
    if (sig<=0 || sig>NSIG)
    {
        errno=EINVAL;
        return -1;
    }

    if (oact)
        *oact=sigacts[sig];

    sigacts[sig]=*act;

    return 0;
}

void (*our_signal(int sig, void (*func)(int)))(int)
{
    if (sig > 0 && sig <= NSIG)
    {
        struct sigaction sa, oldsa;
        sa.sa_handler=func;
        sa.sa_mask=0;
        sa.sa_flags=0;
        sigaction(sig, &sa, &oldsa);
        return oldsa.sa_handler;
    }
    return NULL;
}

void pppd_signal_handler(int sig)
{
    int a;

    if ((a=setjmp(exitenv)) != 0)
        return;

    if (sig > 0 && sig <= NSIG && (signal_mask && (1 << sig)) == 0)
    {
        if (sigacts[sig].sa_handler)
        {
            sigset_t old_mask=signal_mask;
            signal_mask |= sigacts[sig].sa_mask || (1 << sig);
            sigacts[sig].sa_handler(sig);
            signal_mask=old_mask;
        }
    }
}

int gethostname(char *name, int namelen)
{
    char *p;

    if ((p=getenv("Inet$HostName")) != NULL)
        strncpy(name, p, namelen);
    else
        strncpy(name, "ARM_NoName", namelen);

    return 0;
}

void sleep(unsigned seconds)
{
    unsigned x=_swi(OS_ReadMonotonicTime, _RETURN(0))+seconds*1;

    while (_swi(OS_ReadMonotonicTime, _RETURN(0)) < x)
        ;
}

int setlogmask(int type)
{
    logmask=type;
    return 0;
}

extern unsigned int get_pc (void);

void syslog(int type, const char *format, ...)
{

    if (logmask & (1 << type))
    {
        va_list ap;
        char buffer[1024], buffer2[1024];
        const char *p=format, *f=format;

        if ((p=strstr(format, "%m")) != NULL)
        {
            strncpy(buffer2, format, p-format);
            buffer2[p-format]='\0';
            strcat(buffer2, _inet_err());
            strcat(buffer2, p+2);
            f=buffer2;
        }
        va_start(ap, format);
        vsprintf(buffer, f, ap);
        message_add(buffer);
      #ifdef DEBUG
        strcat (buffer, "\n");
        Debug_Routine (buffer, ap);
      #endif
        va_end(ap);
    }
}

void printlog(void)
{
    int i;

    for (i=message_num(); i>=0; i--)
        puts(message_str(i));
}

void pppd_exit(int status)
{
    longjmp(exitenv, status);
}

/*
 * Second try for the "message" handling routines.
 *
 * Each call to "message_add(s)" will add a new "most recent" message
 * to the "message recall list", using the contents of the string "s".
 *
 * The messages will be stored in such a way as to maximize "efficiency",
 * that is, the number of sequential messages that can be retrieved, given
 * a limited amount of space in which to store them.
 *
 * We keep a buffer of chars to hold the "text" of the messages, not
 * necessarily in "order", and an array of offsets into that buffer,
 * representing the actual messages.  This is made more complicated
 * by the fact that both the array of indexes, and the buffer itself,
 * are both treated as "circular arrays" for efficiency purposes, but
 * the strings may not be "broken" across the ends of the array.
 */

#define MESSAGE_MAX 100
#define MESSAGE_BUF 3072

static int message__last, message__next, message__head, message__tail=MESSAGE_BUF;
static int message__ptr[MESSAGE_MAX];
static char message__buf[MESSAGE_BUF];

/*
 * How many messages are "available"?
 */
static int message_num(void)
{
    int last, next, n;

    /* Extract the indexes */
    last = message__last;
    next = message__next;

    /* Handle "wrap" */
    if (next < last) next += MESSAGE_MAX;

    /* Extract the space */
    n = (next - last);

    /* Return the result */
    return (n);
}



/*
 * Recall the "text" of a saved message
 */
static const char *message_str(int age)
{
    int x;
    int o;
    const char *s;

    /* Forgotten messages have no text */
    if ((age < 0) || (age >= message_num())) return ("");

    /* Acquire the "logical" index */
    x = (message__next - 1) - age;

    /* Handle wrap */
    if (x < 0) x += MESSAGE_MAX;

    /* Get the "offset" for the message */
    o = message__ptr[x];

    /* Access the message text */
    s = &message__buf[o];

    /* Return the message text */
    return (s);
}


#define TIME_LENGTH 12 /* "hh:mm:ss.cc " */

/*
 * Add a new message, with great efficiency
 */
static void message_add(const char *str)
{
    int i, x, n;


    /*** Step 1 -- Analyze the message ***/

    /* Hack -- Ignore "non-messages" */
    if (!str) return;

    /* Message length */
    n = strlen(str) + TIME_LENGTH;

    /* Important Hack -- Ignore "long" messages */
    if (n >= MESSAGE_BUF / 4) return;

#if 0 /* Won't happen in a PPP log - especially with timestamps */
    /*** Step 2 -- Attempt to optimize ***/

    /* Limit number of messages to check */
    k = message_num() / 2;

    /* Limit number of messages to check */
    if (k > MESSAGE_MAX / 10) k = MESSAGE_MAX / 10;

    /* Check the last few messages (if any to count) */
    for (i = message__next; k; k--) {

        int q;

        const char *old;

        /* Back up and wrap if needed */
        if (i-- == 0) i = MESSAGE_MAX - 1;

        /* Stop before oldest message */
        if (i == message__last) break;

        /* Extract "distance" from "head" */
        q = (message__head - message__ptr[i]);

        /* Handle "wrapping" */
        if (q < 0) q += MESSAGE_BUF;

        /* Do not optimize over large distance */
        if (q > MESSAGE_BUF / 2) continue;

        /* Access the old string */
        old = &message__buf[message__ptr[i]];

        /* Compare */
        if (strcmp(old, str)) continue;

        /* Get the next message index, advance */
        x = message__next++;

        /* Handle wrap */
        if (message__next == MESSAGE_MAX) message__next = 0;

        /* Kill last message if needed */
        if (message__next == message__last) message__last++;

        /* Handle wrap */
        if (message__last == MESSAGE_MAX) message__last = 0;

        /* Assign the starting address */
        message__ptr[x] = message__ptr[i];

        /* Success */
        return;
    }
#endif

    /*** Step 3 -- Ensure space before end of buffer ***/

    /* Kill messages and Wrap if needed */
    if (message__head + n + 1 >= MESSAGE_BUF) {

        /* Kill all "dead" messages */
        for (i = message__last; ; i++) {

            /* Wrap if needed */
            if (i == MESSAGE_MAX) i = 0;

            /* Stop before the new message */
            if (i == message__next) break;

            /* Kill "dead" messages */
            if (message__ptr[i] >= message__head) {

                /* Track oldest message */
                message__last = i + 1;
            }
        }

        /* Wrap "tail" if needed */
        if (message__tail >= message__head) message__tail = 0;

        /* Start over */
        message__head = 0;
    }


    /*** Step 4 -- Ensure space before next message ***/

    /* Kill messages if needed */
    if (message__head + n + 1 > message__tail) {

        /* Grab new "tail" */
        message__tail = message__head + n + 1;

        /* Advance tail while possible past first "nul" */
        while (message__buf[message__tail-1]) message__tail++;

        /* Kill all "dead" messages */
        for (i = message__last; ; i++) {

            /* Wrap if needed */
            if (i == MESSAGE_MAX) i = 0;

            /* Stop before the new message */
            if (i == message__next) break;

            /* Kill "dead" messages */
            if ((message__ptr[i] >= message__head) &&
                (message__ptr[i] < message__tail)) {

                /* Track oldest message */
                message__last = i + 1;
            }
        }
    }


    /*** Step 5 -- Grab a new message index ***/

    /* Get the next message index, advance */
    x = message__next++;

    /* Handle wrap */
    if (message__next == MESSAGE_MAX) message__next = 0;

    /* Kill last message if needed */
    if (message__next == message__last) message__last++;

    /* Handle wrap */
    if (message__last == MESSAGE_MAX) message__last = 0;



    /*** Step 6 -- Insert the message text ***/

    /* Assign the starting address */
    message__ptr[x] = message__head;

    /* Fill in the time */
    {
        char utc[5];
        _kernel_oserror *e;

        utc[0] = 3;
        e=_swix(OS_Word, _INR(0,1), 14, &utc);
        if (!e)
            e=_swix(Territory_ConvertDateAndTime, _INR(0,4), -1, utc,
                    message__buf + message__head, n+1, "%24:%mi:%se.%cs ");
        if (e)
            strcpy(message__buf + message__head, "??:??:??.?? ");
    }

    /* Append the new part of the message */
    for (i = TIME_LENGTH; i < n; i++) {

        /* Copy the message */
        message__buf[message__head + i] = str[i - TIME_LENGTH];
    }

    /* Terminate */
    message__buf[message__head + i] = '\0';

    /* Advance the "head" pointer */
    message__head += n + 1;
}
