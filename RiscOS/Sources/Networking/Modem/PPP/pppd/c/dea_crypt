/*-
 * $Header$
 * $Source$
 *
 * Copyright (C) 1989 John Bowler
 * Copyright (C) 1990 Acorn Computers Ltd
 *
 * $Log$
 * Revision 4.1.7.3  1997/03/20 17:19:36  jfarrell
 * Upgrade to PPP 1.15, using Internet 5 libraries.
 *
 *
 * PPP version:  95/09/22  KBracey
 * chopped up into stuff required for PPP authentification
 *
 * Revision 1.1  90/01/11  20:10:44  john
 * DEA implementation for crypt
 *
 * $Source$
 *	Implementation of the DEA algorithm.  This
 *	is a byte/bit sex independent implementation of
 *	the (Australian) DEA encryption algorithm.  It
 *	encrypts or decrypts units of 8 bytes.
 *
 *	This source is now used to implement the BSD crypt
 *	code - it is more efficient than the BSD implementation
 *	as it avoids spurious data for the various permutation
 *	tables.
 */
#include <string.h>
#include <dea_crypt.h>

/*
 * Basic algorithms
 */
CARD48
_dea_expand(
/*
 *	expand an input CARD32 value into a BLOCK48
 *	structure using the supplied expand array.  The
 *	E array says where each bit of the output comes
 *	from.  Only the relevant 48 bits of the result
 *	are defined.
 */
	CARD32		input,
	const CARD8	E[48]
) {
	int	i;
	CARD48	result;

	/* First 32 bits */
	result.b0 = 0;
	result.b1 = 0;
	for (i=0; i<24; ++i) {
		result.b0 = (1 & (input >> (32-E[i]))) | (result.b0 << 1);
		result.b1 = (1 & (input >> (32-E[i+24]))) | (result.b1 << 1);
	}

	return result;
}

CARD32
_dea_select(
/*
 *	Use the DEA S block selection functions to generate
 *	a 32 bit value from the input 48 bit value.  The
 *	selection function consists of 64 nibble (4 bit)
 *	values for each of the 8 input (6 bit) blocks organised
 *	as four rows of 16 nibbles.
 */
	CARD48		input,
	const CARD8	S[8][32]
) {
	CARD32	result;
	int	i;

	result = 0;
	for (i=0; i<4; ++i) {
		int	nibble;

		result <<= 4;

		nibble = S[i][	((input.b0>>19)&16) |
				((input.b0>>15)& 8) |
				((input.b0>>20)& 7) ];
		if (!(input.b0&(1U<<19))) nibble >>= 4;
		input.b0 <<= 6;
		nibble &= 15;
		result |= nibble << 16;

		nibble = S[4+i][((input.b1>>19)&16) |
				((input.b1>>15)& 8) |
				((input.b1>>20)& 7) ];
		if (!(input.b1&(1U<<19))) nibble >>= 4;
		input.b1 <<= 6;
		nibble &= 15;
		result |= nibble;
	}

	return result;
}

CARD32
_dea_permute(
/*
 *	Permute the value according to the P array,
 *	returning a permuted 32 bit value.
 */
	CARD32		input,
	const CARD8	P[32]
) {
	CARD32	result;
	int	i;

	for (i=0; i<32; ++i)
		result = (1 & (input >> (32-P[i]))) | (result << 1);

	return result;
}

CARD64
_dea_inperm(
/*
 *	Perform an input permutation on the given
 *	block, producing a CARD64 value.  Take account
 *	of byte sex issues here by translating 8 CARD8
 *	values into one CARD64 value.
 */
	BLOCK64		input,
	const CARD8	IP[64]
) {
	CARD64	result;
	int	i;

	for (i=0; i<32; ++i) {
		int j;

		j = IP[i]-1;
		result.b0 = (1&(input[j>>3]>>(7-(j&7)))) | (result.b0 << 1);

		j = IP[32+i]-1;
		result.b1 = (1&(input[j>>3]>>(7-(j&7)))) | (result.b1 << 1);
	}

	return result;
}

void
_dea_outperm(
/*
 *	Perform an output permutation - the inverse of the
 *	input permutation.  Convert a CARD64 back into a
 *	BLOCK64.  The IP argument is as passed to _dea_inperm.
 */
	BLOCK64		result,
	CARD64		input,
	const CARD8	IP[64]
) {
	int i;

	/*
	 * Zero the result first.
	 */
	for (i=0; i<8; ++i) result[i] = 0;

	for (i=31; i>=0; --i) {
		int j;

		j = IP[i]-1;
		result[j>>3] |= (input.b0&1) << (7-(j&7));
		input.b0 >>= 1;

		j = IP[32+i]-1;
		result[j>>3] |= (input.b1&1) << (7-(j&7));
		input.b1 >>= 1;
	}
}

/*
 * Key schedule routines.
 *
 *	The algorithm adopted is not to form the complete
 *	key schedule initially, but to form it in line as
 *	required.  This is slower, but uses less space.
 */

CARD48
_dea_function(
/*
 *	Perform one dea function on an expanded (48 bit
 *	block) - combining it with the key schedule
 *	derived from the input CARD64 value (this represents
 *	56 bits, 28 in each CARD32 value).  The key schedule
 *	must be selected (under the control of PC2) and also
 *	rotated.  The rotate is a cumulative rotate left
 *	(towards the lower numbered bit).
 */
	CARD48		input,
	CARD64		key,
	const CARD8	PC2[48],
	int		rotate
) {
	CARD48	result;
	int	i;

	result.b0 = 0;
	result.b1 = 0;
	rotate = 28-rotate;
	for (i=0; i<24; ++i) {
		int j;

		j = rotate-PC2[i];
		if (j<0) j += 28;	/* Index 0..27; 0 == lsbit of key */
		result.b0 = (1 & ((key.b0 >> j) ^ (input.b0 >> 23))) |
				(result.b0 << 1);
		input.b0 <<= 1;

		j = 28+rotate-PC2[24+i];
		if (j<0) j+= 28;
		result.b1 = (1 & ((key.b1 >> j) ^ (input.b1 >> 23))) |
				(result.b1 << 1);
		input.b1 <<= 1;
	}

	return result;
}

CARD64
_dea_key(
/*
 *	Form a 56 (2*28) bit key by permuting the input
 *	value (64 bits including 8 parity bits as a
 *	normal 8 byte block).
 */
	BLOCK64		input,
	const CARD8	PC1[56]
) {
	CARD64	result;
	int	i;

	result.b0 = 0;
	result.b1 = 0;
	for (i=0; i<28; ++i) {
		int j;

		j = PC1[i]-1;
		result.b0 = (1&(input[j>>3]>>(7-(j&7)))) | (result.b0 << 1);

		j = PC1[28+i]-1;
		result.b1 = (1&(input[j>>3]>>(7-(j&7)))) | (result.b1 << 1);
	}

	return result;
}

/*
 * Generic veneer function.
 */

void
_dea_encrypt(
/*
 *	Encrypt one block using the given S, P, E, IP
 *	values and the key, (derived from PC1) PC2 and
 *	KS values.
 */
	BLOCK64		io,
	CARD64		key,
	int		decrypt,
	const CARD8	IP[64],
	const CARD8	E[48],
	const CARD8	PC2[48],
	const CARD8	KS[16],
	const CARD8	S[8][32],
	const CARD8	P[32]
) {
	int	i;
	CARD64	block;
	int	rotate;

	block = _dea_inperm(io, IP);

	rotate = decrypt ? 28 : 0;
	for (i=0; i<16; ++i) {
		CARD32	newb;

		if (!decrypt) rotate += KS[i];
		newb = block.b0 ^
				_dea_permute(
					_dea_select(
						_dea_function(
							_dea_expand(
								block.b1,
								E),
							key,
							PC2,
							rotate),
						S),
					P);
		block.b0 = block.b1;
		block.b1 = newb;

		if (decrypt) rotate -= KS[15-i];
	}

	/* Swap output last time round:- */
	{
		CARD32 t = block.b1;
		block.b1 = block.b0;
		block.b0 = t;
	}

	_dea_outperm(io, block, IP);
}



/*
 * crypt utilities.  These are ASCII specific!
 */
static int
get6(int ch) {
	ch &= 0x7f;

	if(ch > 'Z') ch -= 6;
	if(ch > '9') ch -= 7;
	ch -= '.';

	return ch & 63;
}

static int
set6(int val) {
	val &= 63;

	val += '.';
	if(val > '9') val += 7;
	if(val > 'Z') val += 6;

	return val;
}

/*
 * Interface functions.
 *
 *	The following functions provide the more normal
 *	interfaces to the required facilities.
 */
char *
_dea_crypt(
/*
 *	Equivalent to the UNIX crypt interface - calculates
 *	an encrypted password given a password (including
 *	salt information).  Notice that only 7 bits are used
 *	from each character, that these are the LOW order
 *	seven bits and that they are placed in bits 1-7 (etc)
 *	in big endian order.  Ie bit 8 is left as 0, and the
 *	other bits are shifted up one.
 */
	const char	*password,
	const char	*salt
) {
	static char result[14];

	CARD64	key;
	BLOCK64	block;
	CARD8	E[48];
	int	i;

	/*
	 * Manufacture a 56 bit password from the password
	 * string (notice that only the first 8 characters
	 * of the password are significant).
	 */
	{
		BLOCK64	inkey;

		for (i=0; i<8; ++i) {
			inkey[i] = *password << 1;
			if (*password) ++password;
		}
		key = _dea_key(inkey, _dea_data.PC1);
	}

	/*
	 * Salt the E array using the two character salt
	 * string.  Notice that the salt must appear as
	 * the first two characters of the output.  Each
	 * salt character gives a 6 bit code which is used
	 * to swap corresponding elements of the two parts
	 * of the E array (only elements 0-11/24-35 are
	 * ever swapped).  Notice that, unusually, the salt
	 * is interpreted in a little-endian fashion.
	 */
	memcpy(E, _dea_data.E, sizeof E);
	{
		int	code;

		code = get6(salt[0]) | (get6(salt[1]) << 6);
		result[0] = set6(code);
		result[1] = set6(code >> 6);

		for (i=0; i<12; ++i) {
			if (1 & code) {
				CARD8 t = E[i];
				E[i] = E[24+i];
				E[24+i] = t;
			}
			code >>= 1;
		}
	}

	/*
	 * Now encrypt a zero block 25 times with this
	 * key value to produce the encrypted version of
	 * the password.
	 */
	memset(block, 0, sizeof (BLOCK64));
	for (i=0; i<25; ++i)
		_dea_encrypt(block, key, 0, _dea_data.IP, E,
				_dea_data.PC2, _dea_data.KS,
				_dea_data.S, _dea_data.P);

	/*
	 * And add the corresponding 64 bit code to the
	 * end of the result string as 11 six bit codes
	 * (66 bits in all - watch out for the last two!)
	 * Notice that we must take account of the big-endian'ness
	 * of the block value here, and that the crypt algorithm
	 * does expect the first bit to be the most significant of
	 * each 6 bit value.
	 */
	result[2] = set6(block[0] >> 2);
	result[3] = set6((block[0] << 4) | (block[1] >> 4) & 0xf);
	result[4] = set6((block[1] << 2) | (block[2] >> 6) & 0x3);
	result[5] = set6(block[2]);
	result[6] = set6(block[3] >> 2);
	result[7] = set6((block[3] << 4) | (block[4] >> 4) & 0xf);
	result[8] = set6((block[4] << 2) | (block[5] >> 6) & 0x3);
	result[9] = set6(block[5]);
	result[10] = set6(block[6] >> 2);
	result[11] = set6((block[6] << 4) | (block[7] >> 4) & 0xf);
	result[12] = set6(block[7] << 2);
	result[13] = 0;

	return result;
}
