#include <time.h>

#include "swis.h"
#include "kernel.h"

#include "Desk.Debug.h"
#include "Desk.Error.h"
#include "Desk.WimpSWIs.h"

#include "Main.h"
#include "Header.h"
#include "poll.h"


#define NCDial_Dial			0x4EC00

#define	Service_DiallerStatus		0xB4

#define	dialler_DISCONNECTED		0
#define	dialler_CONNECTED_OUTGOING	0x93


#undef TinySupport_Share
#define TinySupport_Share	0x82c43
#undef TinySupport_Die
#define TinySupport_Die		0x82c41


volatile EnsureLine_linestatus	globallinestatus	= EnsureLine_linestatus_DOWN;

static Desk_bool			linehasbeenup		= Desk_bool_FALSE;
// Used to decide whether to call *redial, instead of checking for presence of UARTDeviceDriver.



void	Service( int servicenumber, _kernel_swi_regs* r, void* pw)
	{
	if ( servicenumber == Service_DiallerStatus)	{
		int	newstate = r->r[2];
		Desk_Debug_Printf( Desk_error_PLACE "Service_DiallerStatus received, r2=0x%8x\n", newstate);

		if ( newstate == dialler_CONNECTED_OUTGOING)	{
			globallinestatus = EnsureLine_linestatus_UP;
			linehasbeenup	= Desk_bool_TRUE;
			}
		else if ( newstate == dialler_DISCONNECTED)		globallinestatus = EnsureLine_linestatus_DOWN;
		}

	Desk_UNUSED( r);
	Desk_UNUSED( pw);
	}

#define	Desk_error_STATIC2( id, number, description)		\
	static const struct	{				\
		int	errnum;					\
		char	errmess[ 1+sizeof( description)];	\
		}						\
		id						\
		= { number, description}
// Can't assign address of this to a variable in module code...


Desk_error_STATIC2( error_ALREADYDIALLING, 0, "Already dialling");
Desk_error_STATIC2( error_REDIALFAILED, 0, "The server could not be reached. Please try again.");


static _kernel_oserror*	EnsureLine( void)
	{

	Desk_Debug_Printf( Desk_error_PLACE "EnsureLine called\n");
	
	// If line has never been up, we assume modem line is not in use (eg
	// ethernet NC).
	// Used to check for presence of UARTDeviceDriver instead, but this
	// breaks when soft-loading dummy UARTDeviceDriver for debugging
	// in non-modem NC.
	if ( !linehasbeenup)	{
		Desk_Debug_Printf( Desk_error_PLACE "No modem present\n");
		return NULL;	// Not using modem, so everything ok...
		}
	
	else if ( globallinestatus == EnsureLine_linestatus_UP)	return NULL;
	
	else if ( globallinestatus == EnsureLine_linestatus_DIALLING)	{
		Desk_Debug_Printf( Desk_error_PLACE "Already connecting\n");
		return (Desk_os_error*) &error_ALREADYDIALLING;
		}
	
	else if ( globallinestatus == EnsureLine_linestatus_DOWN)	{
		// We set our global state to 'EnsureLine_linestatus_DIALLING', call *redial,
		// and then wait until our global state is either up or down.
		// down means the redial failed (ie two 'down' service calls issued) - this 
		// is new behaviour 17 Oct 1996 - so we return an error.
		// up means everything ok, so we return NULL.
		
		Desk_os_error*	e;
		
		globallinestatus = EnsureLine_linestatus_DIALLING;
		
		Desk_Debug_Printf( Desk_error_PLACE "Calling *Redial\n");
		
		e = _swix( NCDial_Dial, NULL );
		if (e)	return e;
		
		Desk_Debug_Printf( Desk_error_PLACE "Waiting for line to be up...\n");
		
			{
			int	state = poll_line_status();
#ifdef NCMODEL1
			_kernel_setenv( "Sennen$NewPage", "");
			// Force redraw of whole screen to remove *redial's dots...
			_swix( Wimp_ForceRedraw, _IN(0)|_IN(1)|_IN(2)|_IN(3)|_IN(4),
					-1, 0, 0, 32000, 32000 );
#endif
			if ( state ) return (Desk_os_error*) &error_REDIALFAILED;
			}
		}
	
	return NULL;
	}



_kernel_oserror*	Command( const char* argstring, int argc, int cmd_no, void* pw)
	{
	if ( cmd_no == CMD_EnsureLine_EnsureLine)	{
		_kernel_oserror*	e;
		
		Desk_Debug_Printf( "Ensuring line...\n");
		
		e = EnsureLine();
		
		Desk_Debug_Printf( "Ensured line, e=0x%p\n", e);
		if ( e)	Desk_Debug2_Printf( "Error is %i, '%s'\n", e->errnum, e->errmess);
		
		return e;
		}
	
	else if ( cmd_no == CMD_EnsureLine_Boot)	{
		Desk_Debug_Printf( Desk_error_PLACE "%s\n", 
			(linehasbeenup) ? "Line has already been up anyway" : "Line hasn't been up yet, but set as such now."
			);
		linehasbeenup = Desk_bool_TRUE;
		return NULL;
		}
	
	else	return NULL;
	
	Desk_UNUSED( argstring);
	Desk_UNUSED( argc);
	Desk_UNUSED( cmd_no);
	Desk_UNUSED( pw);
	}


_kernel_oserror*	Initialise( char* cmdtail, int podule, void* pw)
	{
	#ifdef EnsureLine_ROMBUILD
		_swix( TinySupport_Share, _IN(0), pw);
	#endif
	Desk_Debug_Printf( Desk_error_PLACE "Initialise called\n");
	return NULL;
	Desk_UNUSED( cmdtail);
	Desk_UNUSED( podule);
	Desk_UNUSED( pw);
	}

_kernel_oserror*	Finalise( int fatal, int podule, void* pw)
	{
	Desk_Debug_Printf( Desk_error_PLACE "Finalise called\n");
	#ifdef EnsureLine_ROMBUILD
		_swix( TinySupport_Die, 0);
	#endif
	return NULL;
	Desk_UNUSED( fatal);
	Desk_UNUSED( podule);
	Desk_UNUSED( pw);
	}
