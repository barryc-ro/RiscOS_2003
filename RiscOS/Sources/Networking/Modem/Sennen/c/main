#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <time.h>

#include "defs.h"
/* #include "heap.h" */
#include "inlines.h"
/* #include "objects.h" */
#include "screen.h"
#include "SmartCard.h"
#include "swicall.h"
#include "wimp.h"

#define __VERSION__ "0.14 Compiled " __TIME__ " " __DATE__

#define _BROWSER_ "NCFresco"

static int this_task;
static int web_handle = 0;

char *version = __VERSION__;

static int wimp_messages[] =
{
  4,       /* Message_DataLoadAck */
  5,
  0x400C1, /* Message_ModeChange */
  0x400C2, /* Message_TaskInitialise */
  0x400C3, /* Message_TaskCloseDown */
  NULL
};

char cprefix[80];
char taskname[80];

carddata card;

ErrorPtr err;

BOOL tv = TRUE;

BOOL card_in = FALSE;

int matrix[6] = {1 << 16, 0, 0, 1 << 16, 0, 0};

int *windowdata = NULL;

extern int *mainwindowdata, mainwindowlen;

extern wimp_point screen_eig;

static void run_something(char *what, BOOL message)
{
  message_block msg;

  memset(&msg, '\0', sizeof(message_block));
  msg.header.size   = 256;

  if (message)
  {
    msg.header.action = 0x4AF80;  /* Message_DataOpen */
    strcpy(msg.data.bytes, what);
  }
  else
  {
    msg.header.action = 5;  /* Message_DataOpen */
    msg.data.dataload.window   = 0;
    msg.data.dataload.filetype = 0xFAF;
    strcpy(msg.data.dataload.filename, what);
  }
  swi(Wimp_SendMessage, R0, 18, R1, &msg, R2, 0, END);
  kill_task();
}

static void WimpStop(void)
{
  wimp_deletewindow(0, windowdata);
  wimp_closedown(this_task, 0x4B534154);
}

static int Icon_BarIcon(void)
{
  int  icreate[10];
  int  icon;

  icreate[0] = -1;
  icreate[5] = 0x17003019;
  strcpy((char *) &icreate[6], _APPNAME_);

  icreate[1] = icreate[2] = 0;
  icreate[3] = icreate[4] = 68;

  swi(Wimp_CreateIcon, R0, 0x60000000, R1, icreate, END);
  return(icon);
}

static void WimpStart(void)
{
  swi(Wimp_Initialise, R0, 350, R1, 0x4B534154, R2, _APPNAME_,
      R3, wimp_messages, OUT, R1, &this_task, END);
  Icon_BarIcon();
  windowdata = malloc(mainwindowlen);
  memcpy(windowdata, &mainwindowdata[10], mainwindowlen);
  if (getenv(_APPNAME_ "$ShowBorder"))
    ((char *) windowdata)[36] = 7;
  windowdata[0] = wimp_createwindow(0, &windowdata[1]);
  wimp_openwindow(0, windowdata);
  atexit(WimpStop);
}
#if FALSE
static void redraw_action(int *block)
{
  BOOL bMore;

  if (block[0])
  {
    swi(Wimp_RedrawWindow, R1, block, OUT, R0, &bMore, END);

    while (bMore)
    {
      swi(Wimp_GetRectangle, R1, block, OUT, R0, &bMore, END);
    }
  }
}
#endif
static int paranoia = 0;

static void null_action(void)
{
  paranoia = 0;
  kill_task();
  if (getenv("Sennen$Newpage"))
  {
    run_something(getenv("Sennen$Newpage"), TRUE);

    oscli("Unset Sennen$Newpage");
  }
}
#ifndef REALSYSTEM
static void key_action(int c)
{
  switch(c)
  {
  case 'q':
  case 'Q':
    if (paranoia == 'q')
    {
      run_something("WWWRoot:InsertC", FALSE);
    }
    else
      paranoia = 'q';
    break;

  case 'x':
  case 'X':
    if (paranoia == 'x')
    {
      message_block msg;
      
      memset(&msg, '\0', sizeof(message_block));
      msg.header.size   = 20;
      msg.header.action = 0;  /* Message_Quit */
      swi(Wimp_SendMessage, R0, 17, R1, &msg, R2, web_handle, END);
      exit(0);
    }
    else
    {
      paranoia = 'x';
    }
    break;

  case 0x1A8: /* Ctrl-F8 */
    card_in = !card_in;

    if (card_in)
    {
      oscli("sce_loadindex SmartCard:index");
      oscli("sce_load SmartCard:SCBB");
      oscli("sce_loadhotlist SmartCard:fd");
      oscli("sce_setauth BANANA!");
      oscli("sce_cardok");
    }
    else
    {
/*       oscli("sce_save SmartCard:SCBBN"); */
      oscli("sce_clrauth");
      oscli("sce_cardremoved");
    }
    break;

  case 0x1A9: /* Ctrl-F9 */
    card_in = !card_in;
    if (card_in)
    {
      oscli("sce_loadindex SmartCard:index");
      oscli("sce_load SmartCard:SCBB");
      oscli("sce_clrauth");
      oscli("sce_cardbad");
    }

  default:
    wimp_processkey(c);
    break;
  }
}
#endif
static void message_action(int *block)
{
  switch(block[4])
  {
  case 0:
    exit(0);
    break;

  case 4:
  case 5:
    break;

  case 0x400C1:
    Screen_CacheModeInfo(matrix);
    break;

  case 0x400C2:
    if (strcmp(((char *) &block[7]), "NCFresco") == 0)
    {
      web_handle = block[1];
    }
    break;

  case 0x400C3:
    if (block[1] == web_handle)
    {
      wimp_starttask(taskname);
    }
    break;
  }
}

int main (int argc, char **argv)
{
  int pollblock[64];
  int reason, scstatus;

/*   Heap_Create(_APPNAME_" heap area", DYN_FIX); */
/*   Heap_Create(_APPNAME_" volatiles", DYN_VOL); */

  srand(monotonic_time());

  WimpStart();
  Screen_CacheModeInfo(matrix);
  swi(Wimp_SetCaretPosition, R0, windowdata[0], R1, -1, R2, 0, R3, 0,
                             R4, -1, R5, 0, END);


  swi(NCRegistry_Status, OUT, R0, &scstatus, END);
  card_in = TRUE;

  if ((scstatus & 0x01) == 0) /* No card */
  {
    oscli("Set " _BROWSER_ "$Welcome WWWRoot:InsertC");
    card_in = FALSE;
  }
  else if ((scstatus & 0x10) != 0) /* Card Locked */
  {
    oscli("Set " _BROWSER_ "$Welcome WWWRoot:EnterC");
  }
  else if ((scstatus & 0x04) != 0) /* Card inserted and valid */
  {
    char loginid[40], pstnnum[40];
    int cardwrite;

    oscli("CDN_MakeFiles");
    
    swi(NCRegistry_Enquiry, R0, "CLIENT_UPDATE", R1, &cardwrite, R2, 4, END);

    swi(NCRegistry_Enquiry, R0, "LOGIN_ID", R1, loginid, R2, 40, END);
    swi(NCRegistry_Enquiry, R0, "PSTN_NUM", R1, pstnnum, R2, 40, END);

    if (strlen(loginid) == 0 || strlen(pstnnum) == 0)
      oscli("Set " _BROWSER_ "$Welcome WWWDyn:EnterNNPC");
    else if (cardwrite)
      oscli("Set " _BROWSER_ "$Welcome WWWDyn:ProceedC");
    else
      oscli("Set " _BROWSER_ "$Welcome WWWDyn:Proceed");
  }
  else
  {
    oscli("Set " _BROWSER_ "$Welcome WWWRoot:InvalidCrd");
  }
 
  if (argc > 1)
    strcpy(taskname, argv[1]);
  else
    strcpy(taskname, "" _BROWSER_ ":!Run");

  wimp_starttask(taskname);

  for (;;)
  {
    reason = wimp_pollidle(0x00003830, pollblock, monotonic_time() + 100);

    switch (reason)
    {
    case 0:
      null_action();
      break;
#if FALSE
    case 1:
      redraw_action(pollblock);
      break;
#endif
    case 2:
      wimp_openwindow(0, pollblock);
      break;

    case 8:
#ifdef REALSYSTEM    
      wimp_processkey(c);
#else      
      key_action(pollblock[6]);
#endif      
      break;

    case 17:
    case 18:
      message_action(pollblock);
      break;

    case 19:
      {
        char runit[300];
  
        sprintf(runit, "%s %s", cprefix, (char *) &pollblock[11]);
        wimp_starttask(runit);
        kill_task();
      }
      break;
    }
  }
  exit(0);
}
