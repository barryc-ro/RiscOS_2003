#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "defs.h"
#include "smartcard.h"
#include "swis.h"

#include "sys/types.h"
#include "netinet/in.h"
#include "arpa/inet.h"

#define unsilent(u) if (!silent) { _swix(NCDialUI_Debug, _INR(0, 1), 0, u); \
                                   fprintf(stderr, "%s\n", u); }

ErrorPtr err;

/* ajs added */
#define NCDIAL_POP_ENV_VAR   "NCDial$TelephoneNumber"

dial_up_q nodes = {NULL, NULL};
int no_more_nodes;
int set_env_var(char *, char *);

/* end ajs added */

extern BOOL redial;
extern BOOL silent;

extern void osmodfree(char *);
extern char *osmodget(int);
extern char *cmos_number(void);
extern int  MAM_Enq(char *, void *, int);
extern void oscli(char *);

typedef struct
{
  unsigned int cntrl;
  char *string;
  void *next;
} script_list;

char *quote(char *in, char *out)
{
  char c;
  int inl = 0, outl = 0;

  do
  {
    c = in[inl];

    switch (c)
    {
    case '<':
      inl++;
      out[outl++] = '&';
      out[outl++] = 'l';
      out[outl++] = 't';
      out[outl++] = ';';
      break;

    case '>':
      inl++;
      out[outl++] = '&';
      out[outl++] = 'g';
      out[outl++] = 't';
      out[outl++] = ';';
      break;

    case '&':
      inl++;
      out[outl++] = '&';
      out[outl++] = 'a';
      out[outl++] = 'm';
      out[outl++] = 'p';
      out[outl++] = ';';
      break;

    case '"':
      inl++;
      out[outl++] = '&';
      out[outl++] = 'q';
      out[outl++] = 'u';
      out[outl++] = 'o';
      out[outl++] = 't';
      out[outl++] = ';';
      break;

    default:
      out[outl++] = in[inl++];
      break;
    }
  } while (c);

  return(out);
}

BOOL CreateFiles(carddata *scard)
{
  BOOL exitstat = FALSE;
  FILE *out;
  char *ht_id = NULL, *ht_pw = NULL;
  char buffer[512], *ht_num = NULL;
  char *ht_num2 = NULL; /* ajs added, for consistency's sake */
  int big, byte, failed, length;
  struct in_addr ina;

#if FALSE
  _swix(NCRegistry_Status, _OUT(0), &scstatus);
  if ((scstatus & 0x05) == 0) /* No Card or not valid */
  {
    goto genexit;
  }
 if ((scstatus & 0x10) != 0) /* Card Locked */
  {
    goto genexit;
  }
#endif
  if (_swix(OS_File, _INR(0, 1) | _IN(4), 8, "<Wimp$ScrapDir>", 75))
  {
    unsilent("No Wimp$ScrapDir set!");
    goto genexit;
  }
  if (_swix(OS_File, _INR(0, 1) | _IN(4), 8, "<Wimp$ScrapDir>.NCDialler", 75))
    goto genexit;
  if (_swix(OS_File, _INR(0, 1) | _IN(4), 8, "<Wimp$ScrapDir>.NCDialler.Files", 75))
    goto genexit;
  if (_swix(OS_File, _INR(0, 1) | _IN(4), 8, "<Wimp$ScrapDir>.NCDialler.Files.PPP", 75))
    goto genexit;

  if (scard->loginid)
  {
    free(scard->loginid);
    scard->loginid = NULL;
  }
  length = MAM_Enq("LOGIN_ID", scard->loginid, 0);
  if (!silent)
  {
    char buffer[80];

    sprintf(buffer, "loginid length %d", length);
    fprintf(stderr, "%s\n", buffer);
    _swix(NCDialUI_Debug, _INR(0, 1), 0, buffer);
  }
  if (length > 0)
    scard->loginid = malloc(length + 4);
  if (length <= 0 || scard->loginid == NULL)
  {
    goto genexit;
  }
  MAM_Enq("LOGIN_ID", scard->loginid, length + 2);
  ht_id = malloc(3 * length + 4);
  if (ht_id == NULL)
  {
    goto genexit;
  }
  quote(scard->loginid, ht_id);
  if (!silent)
  {
    char buffer[80];

    sprintf(buffer, "loginid %s", ht_id);
    fprintf(stderr, "%s\n", buffer);
    _swix(NCDialUI_Debug, _INR(0, 1), 0, buffer);
  }

  if (scard->loginsecret)
  {
    free(scard->loginsecret);
    scard->loginsecret = NULL;
  }
  length = MAM_Enq("LOGIN_SECRET", scard->loginsecret, 0);
  if (!silent)
  {
    char buffer[80];

    sprintf(buffer, "loginsecret length %d", length);
    fprintf(stderr, "%s\n", buffer);
    _swix(NCDialUI_Debug, _INR(0, 1), 0, buffer);
  }
  if (length > 0)
    scard->loginsecret = malloc(length + 4);
  if (length <= 0 || scard->loginsecret == NULL)
  {
    goto genexit;
  }
  MAM_Enq("LOGIN_SECRET", scard->loginsecret, length + 2);
  ht_pw = malloc(3 * length + 4);
  if (ht_pw == NULL)
  {
    goto genexit;
  }
  quote(scard->loginsecret, ht_pw);
  if (!silent)
  {
    char buffer[80];

    sprintf(buffer, "loginsecret %s", ht_pw);
    fprintf(stderr, "%s\n", buffer);
    _swix(NCDialUI_Debug, _INR(0, 1), 0, buffer);
  }

  if (scard->pstnnum)
  {
    free(scard->pstnnum);
    scard->pstnnum = NULL;
  }
  length = MAM_Enq("PSTN_NUM", scard->pstnnum, 0);
  if (!silent)
  {
    char buffer[80];

    sprintf(buffer, "pstnnum length %d", length);
    fprintf(stderr, "%s\n", buffer);
    _swix(NCDialUI_Debug, _INR(0, 1), 0, buffer);
  }
  scard->pstnnum = malloc(length + 4);
  if (length <= 0 || scard->pstnnum == NULL)
  {
    goto genexit;
  }
  MAM_Enq("PSTN_NUM", scard->pstnnum, length + 2);
  if (length > 0)
    ht_num = malloc(3 * length + 4);
  if (ht_num == NULL)
  {
    goto genexit;
  }
  quote(scard->pstnnum, ht_num);
  if (!silent)
  {
    char buffer[80];

    sprintf(buffer, "pstnnum %s", ht_num);
    fprintf(stderr, "%s\n", buffer);
    _swix(NCDialUI_Debug, _INR(0, 1), 0, buffer);
  }

/* ajs added - in the style of Mr. Frost. */
/* Nope, can't do it. Have to tidy things up a bit */

  if (scard->pstnbak) {
    free(scard->pstnbak);
    scard->pstnbak = NULL;
  }

  length = MAM_Enq("PSTN_BACKUP", scard->pstnbak, 0);
  if (!silent) {

    char buffer[80];

    sprintf(buffer, "pstnbak length %d", length);
    fprintf(stderr, "%s\n", buffer);
    _swix(NCDialUI_Debug, _INR(0, 1), 0, buffer);
  }

  scard->pstnbak = malloc(length + 4);

  if (length < 0) goto genexit;

  if(length == 0 || scard->pstnbak == NULL) { /* only 1 number, so stick it on the queue */
      if(fill_dialup_queue(scard->pstnnum, NULL)<0) goto genexit;
  } else {

    MAM_Enq("PSTN_BACKUP", scard->pstnbak, length + 2);

    if (length > 0) {

      if((ht_num2 = malloc(3 * length + 4))==NULL) goto genexit; /* 3 x length + 4 ? Based on some sort of statistical
    		  	     	      		      	          analysis no doubt. :) */

      quote(scard->pstnbak, ht_num2); /* why? */

      if (!silent) {

        /* yuck! you can't do this! If the tag data is > buffer you'll write all over the stack! ajs

        char buffer[80];

        */

        char *buffer;

        if((buffer = malloc(3*length + 4 + 12)) != NULL) { /* original ht_num2 length + len(pstnbak) */
          sprintf(buffer, "pstnbak %s", ht_num2);   /* you could put all this crap in a function instead */
          fprintf(stderr, "%s\n", buffer);  	/* of having to type 7 lines of source for every debug statement - ajs */
          _swix(NCDialUI_Debug, _INR(0, 1), 0, buffer);
        }

      }

      if(fill_dialup_queue(scard->pstnnum, scard->pstnbak)<0) goto genexit; /* build linked list of telephone numbers */
    }
  }
/* end ajs added */




  if (out = fopen("<Wimp$ScrapDir>.NCDialler.Files.PPP.Options", "w"), out)
  {
    fprintf(out, "ModemCard:0\n115200\nname %s\nnoipdefault\n", scard->loginid);

/* comments for the mathematically challenged: managed access returns
   ZERO for a tag which is valid but has no value, ie is currently
   unassigned. The buffer you pass in is unaffected in this case.
   Therefore, check for a zero return value or you'll get GIGO */
    if (MAM_Enq("STATIC_IP", &ina.s_addr, 16) > 0)
    {
      if (ina.s_addr != 0) /* unlikely to ever be zero, as it started
                              life as an uninitialised variable (ie
                              random crap) and might have been used
                              already to hold the primary DNS address */

        fprintf(out, "%s:\n", inet_ntoa(ina));
    }
    fprintf(out, "defaultroute\nmodem\ncrtscts\n");
    fprintf(out, "asyncmap 0\n");
/*  fprintf(out, "mtu 296\nmru 296\n"); */ /* Hmmm... Not liked by some ISPs */
    _swix(NVRAM_Read, _INR(0, 2) | _OUT(0), "ModemTimeout", &byte, 0, &failed);
    if (failed >= 0 && (byte & 0x3F))
      fprintf(out, "idle-disconnect %d\n", (byte & 0x3F) * 60);
    fclose(out);
  }
  else
  {
    goto genexit;
  }
#ifdef STRING_SCRIPT
  {
#else
  if (out = fopen("<Wimp$ScrapDir>.NCDialler.Files.Script", "w"), out)
  {
    script_list *list;
#endif
    char *scrbuff;

    big = MAM_Enq("SEND_EXPECT", buffer, 0);
    if (big > 0)
    {
      if (scrbuff = osmodget(big + 10), scrbuff == NULL)
      {
        fclose(out);
        goto genexit;
      }

      MAM_Enq("SEND_EXPECT", scrbuff, big + 10);
#ifdef STRING_SCRIPT
      if (scard->script)
        osmodfree(scard->script);
      scard->script = scrbuff;
#else
      for (list = (script_list *) scrbuff; list != NULL; list = list->next)
      {
        if ((list->cntrl & 0xFF) < 3)
          fprintf(out, "%s\n", list->string ? list->string : "");
      }
      osmodfree(scrbuff);
#endif
    }
    fclose(out);
  }
#ifndef STRING_SCRIPT
  else
  {
    exitstat = FALSE;
    goto genexit;
  }
#endif
  if (out = fopen("<Wimp$ScrapDir>.NCDialler.Files.PPP.PAPSecrets", "w"), out)
  {
    fprintf(out, "%s * %s\n", scard->loginid, scard->loginsecret);
    fclose(out);
  }
  else
  {
    goto genexit;
  }
  if (out = fopen("<Wimp$ScrapDir>.NCDialler.Files.PPP.CHAPSecret", "w"), out)
  {
    fprintf(out, "%s * %s\n", scard->loginid, scard->loginsecret);
    fclose(out);
  }
  else
  {
    goto genexit;
  }
  exitstat = TRUE;

genexit:
  if (ht_id)
    free(ht_id);
  if (ht_pw)
    free(ht_pw);
  if (ht_num)
    free(ht_num);

  return(exitstat);
}

/* ajs added */
int fill_dialup_queue(char *pstn_num, char *pstn_backup)
{
    int num_nodes = 1; /* start at 1 to include pstn_num */
    char *p;
    dial_up *node_ptr;
    int i;

    if(nodes.head != NULL) free(nodes.head);
    no_more_nodes = 0;

    for(p = pstn_backup; *p != 0x0; p++) if(*p == ';') { /* count & terminate telephone numbers */
        num_nodes++;
        *p = 0x0;
    }

    num_nodes++; /*number of nodes is ++no_of_separators */

    if((nodes.head = (dial_up *)malloc(num_nodes * sizeof(dial_up)))==NULL) return(-1); /* arg. no memory. */

    /* pstn_num becomes first entry on list */
    node_ptr = nodes.head;
    node_ptr->pstn_num = pstn_num;
    if(!silent) fprintf(stderr, "first dial-up node: %s\n", pstn_num);
    if(pstn_backup != NULL) {
      node_ptr->next = node_ptr+1;
      node_ptr++;

      for(p = pstn_backup, i = 0; i<num_nodes-1;node_ptr++, i++) { /* build the list */
        if(!silent) fprintf(stderr, "dial-up node: %s\n", p);
        node_ptr->pstn_num = p;
        node_ptr->next = node_ptr + 1;
        while(*p++ != 0x0);
      }
      (--node_ptr)->next = NULL; /* terminate list */

    } else {
        node_ptr->next = NULL;
        if (!silent) fprintf(stderr, "only got one node.\n");
	num_nodes = 1;
    }

    if(!silent) fprintf(stderr, "%d nodes in dial-up list\n", num_nodes);

    for(i=0, node_ptr=nodes.head;i<num_nodes;i++, node_ptr++) {
        if(!silent) fprintf(stderr, "NODE: %s  0x%x\n", node_ptr->pstn_num, node_ptr->next);
    }
    nodes.current = nodes.head;
    set_env_var(NCDIAL_POP_ENV_VAR, nodes.current->pstn_num);
    return(num_nodes);
}

char *current_dialup_node(void)
{
    if(!silent) fprintf(stderr, "returning dialup node from list: %s\n", nodes.current->pstn_num);
    return(nodes.current->pstn_num);
}

/* fetch current node & advance to next in list */
char *next_dialup_node(void)
{

    if(nodes.current->pstn_num != NULL) { /* set the env. var. for DialUI to pick up */
        set_env_var(NCDIAL_POP_ENV_VAR, nodes.current->pstn_num);
    }

    /* set barf flag if there are no more nodes */
    if(nodes.current->next == NULL) {
      if(!silent) fprintf(stderr, "reached last node in dial-up list: %s\n", nodes.current->pstn_num);
      no_more_nodes = 1;
    } else {
       if(!silent) fprintf(stderr, "advancing to next node in list, returned: %s\n", nodes.current->pstn_num);
       nodes.current = nodes.current->next;
    }

    return(nodes.current->pstn_num);

}

int set_env_var(char *name, char *value)
{
    _kernel_swi_regs r;

    r.r[0] = (int)name;
    r.r[1] = (int)value;
    r.r[2] = strlen(value)+1;
    r.r[3] = 0;
    r.r[4] = 0;
    _kernel_swi(OS_SetVarVal, &r, &r);
    if(!silent) fprintf(stderr, "set %s to %s (%d)\n", name, value, strlen(value));
    return(0);
}


