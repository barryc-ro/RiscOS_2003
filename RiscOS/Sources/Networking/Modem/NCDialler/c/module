#include <ctype.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>

#include "cmhg_modem.h"
#include "kernel.h"
#ifdef VIA_DEVICEFS
#include "serial.h"
#endif
#include "smartcard.h"
#include "swis.h"
#include "wimp.h"

#include "sys/types.h"
#include "netinet/in.h"

#ifndef TRUE
#define FALSE 0
#define TRUE (!FALSE)
#endif

#ifndef DONT_BUILD_RESOURCES
extern void *resources_base(void);
#endif

extern void osmodfree(char *);
extern char *osmodget(int);
extern void callback(void (*irq_entry)(), void *);
extern void callafter(int, void (*irq_entry)(), void *);
extern void removeticker(void (*irq_entry)(), void *);
extern int  monotonic_time(void);
extern void oscli(char *);

#define vdu4() _swix(0x104, 0)
#define os_removecursors()  _swix(OS_RemoveCursors, 0)
#define os_restorecursors() _swix(OS_RestoreCursors, 0)

#define unsilent(u) if (!silent && strlen(Rip(u)) > 0) _swix(NCDialUI_Debug, _INR(0, 1), 0, u);

#define Service_ResourceFSStarting 0x60
#define Service_ShutDown           0x7E
#define Service_ShutdownComplete   0x80
#define Service_DiallerStatus      0xB4
#define Service_NCRegistryStatus   0xBA

#define int16 short
#define int32 long

typedef void (*P_FSStartingFN)(void *r0);

#ifdef VIA_DEVICEFS
#define SERIAL_PORT   "modem"

static char serial_config[] = "devices#baud115200;data8;stop1;noparity;rts:$." SERIAL_PORT;
#endif

char expect[80], send[80];

void *pwp;

int now;

int oldptr = 1;

int dialplease = CALLBACK_NOOP;

char *incoming;
char *buffer;

int instream = 0, outstream = 0;

BOOL restart   = FALSE;
BOOL online    = FALSE;
BOOL redial    = FALSE;
BOOL silent    =  TRUE;
BOOL doingit   = FALSE;
BOOL semaphore = FALSE;

carddata card;

struct in_addr innfs;

extern char *dialscr[][2];

extern int no_more_nodes; // ajs added
static char *Rip(char *text)
{
  char *c;

  while (c = strchr(text, '\n'), c)
    *c = '\0';
  while (c = strchr(text, '\r'), c)
    *c = '\0';
  return(text);
}

char *stristr (char *s, char *t)
{
  char *ss, *tt;
  int ls, lt;

  ls = strlen(s);
  lt = strlen(t);

  ss = s;
  tt = t;

  while (ls >= lt)
  {
    s = ss++;
    ls--;
    t = tt;

    while ((tolower(*s) == tolower(*t)) && *t != '\0')
    {
      s++;
      t++;
    }
    if ( *t == '\0' )
      return(--ss);
    else if ( *s == '\0' )
      return(0);
  }
  return(0);
}

#ifdef VIA_DEVICEFS
static void close_streams(void)
{
  if (instream)
    serial_close_stream(instream);
  instream = 0;
  if (outstream)
    serial_close_stream(outstream);
  outstream = 0;
}
#endif

static char *fourdigit(char *tag, int len, char *phone, BOOL pulse)
{
  char *chars = "0123456789*#,";
  int failed, nibble, packed, shift = 0;

  _swix(NVRAM_Read, _INR(0, 2) | _OUT(0), tag, &packed, 0, &failed);
  if (failed >= 0 && packed)
  {
    while (shift < (4 * (len - 1)))
    {
      nibble = (packed >> (shift ^ 4)) & 0xF;

      if (nibble == 0)
        break;
      if (pulse && chars[nibble -1] == '*')
      {
        *(phone++) = '1';
        *(phone++) = '1';
      }
      else
      {
        *(phone++) = chars[nibble -1];
      }
      shift += 4;
    }
  }
  return(phone);
}

static char *cmos_number(void)
{
  static char phone[80];
  char *ptr = NULL;
  int pulse, callwaiting, failed, ignore, outside, wait;

  strcpy(phone, "AT");
  ptr = phone + strlen(phone);
  /* Blind dialling switch */
  _swix(NVRAM_Read, _INR(0, 2) | _OUT(0), "ModemDialIgnore",
        &ignore, 0, &failed);
  if (failed >= 0 && ignore)
  {
    *(ptr++) = 'X';
    *(ptr++) = '3';
  }
  /* Dialling type */
  *(ptr++) = 'D';
  _swix(NVRAM_Read, _INR(0, 2) | _OUT(0), "ModemDialType",
        &pulse, 0, &failed);
  if (failed >= 0 && pulse)
    *(ptr++) = 'P';
  else
    *(ptr++) = 'T';

  /* Outside line */
  _swix(NVRAM_Read, _INR(0, 2) | _OUT(0), "ModemPrefixStatus",
        &outside, 0, &failed);

  if (failed >= 0 && outside)
  {
    ptr = fourdigit("ModemPrefix", 4, ptr, pulse);

    _swix(NVRAM_Read, _INR(0, 2) | _OUT(0), "ModemDialTone",
          &wait, 0, &failed);
    if (failed >= 0 && wait)
      *(ptr++) = 'W';
    else
      *(ptr++) = ',';
  }

  /* Call waiting defeat stuff */
  _swix(NVRAM_Read, _INR(0, 2) | _OUT(0), "ModemCallWaitingStatus",
        &callwaiting, 0, &failed);
  if (failed >= 0 && callwaiting)
  {
    ptr = fourdigit("ModemCallWaiting", 4, ptr, pulse);

    *(ptr++) = ',';
  }
  *(ptr++) = '\0';

  return(phone);
}

void LED_State(BOOL state)
{
  _swix(LED_Control, _INR(0, 2), 0, ~(1), state ? 1 : 0);
}

void DiallerService(int reason)
{
  if(!silent) fprintf(stderr, "issued Service_DialerStatus 0x%x\n", reason);
  if (reason == NCDialler_IPDown)
    LED_State(FALSE);
  if (reason == NCDialler_IPUp)
    LED_State(TRUE);

  _swix(OS_ServiceCall, _INR(1, 2), Service_DiallerStatus, reason);
  if ((reason & 0xF0) == 0x80)
  {
      if(no_more_nodes) { /* ajs added - this function has side effects on the callback handler & the i/o stream! */
        doingit = FALSE;
#ifdef VIA_DEVICEFS
        if(!silent) fprintf(stderr, "no more nodes - closing stream\n");
        close_streams();
#endif
      } /* ajs - ensure it doesn't do any of that unless we really mean it */

    _swix(OS_ServiceCall, _INR(1, 2), Service_DiallerStatus, NCDialler_IPDown);
  }
}

int fetch(void)
{
#ifdef VIA_DEVICEFS
  return(serial_read_byte(instream));
#else
  int ch, fl;
  _kernel_oserror *e;

  e = _swix(UART_SerialOp, _IN(0) | _OUT(1) | _OUT(_FLAGS), 4, &ch, &fl);
  if (e || (fl & _C))
    return(-1);
  return(ch);
#endif
}

char twirler[] = "|/-\\";

BOOL Driver_Get(char *expect, int stream)
{
  int c = 0;
  static int rxchars = 0, twirl = 0;

  if (!silent)
    fprintf(stderr, "%c\r", twirler[twirl++ % 4]);
  while (c >= 0)
  {
    while (c = fetch(), c >= 0 && c != '\n' && c != '\r' && !restart)
    {
      if (!silent)
        fprintf(stderr, "%c", c);

      incoming[rxchars++] = c;
      incoming[rxchars]   = '\0';
    }

    if (expect)
    {
      if (stristr(incoming, expect) != NULL)
      {
        unsilent(incoming);
        rxchars = 0;
        incoming[rxchars] = '\0';
        return(TRUE);
      }
    }
    if (strstr(incoming, "BUSY") != NULL)
    {
      if(no_more_nodes) DiallerService(NCDialler_Busy);
      restart = TRUE;
      unsilent(incoming);
      rxchars = 0;
      incoming[rxchars]   = '\0';
    }
    else if (strstr(incoming, "ERROR") != NULL)
    {
      if(no_more_nodes) DiallerService(NCDialler_Busy);
      restart = TRUE;
      unsilent(incoming);
      rxchars = 0;
      incoming[rxchars]   = '\0';
    }
    else if (strstr(incoming, "NO CARRIER") != NULL)
    {
      if(no_more_nodes) DiallerService(NCDialler_NoCarrier);
      restart = TRUE;
      unsilent(incoming);
      rxchars = 0;
      incoming[rxchars]   = '\0';
    }
    else if (strstr(incoming, "NO DIALTONE") != NULL)
    {
      if(no_more_nodes) DiallerService(NCDialler_NoDial);
      restart = TRUE;
      unsilent(incoming);
      rxchars = 0;
      incoming[rxchars]   = '\0';
    }
    if (c == '\r' || c == '\n')
    {
      unsilent(incoming);
      rxchars = 0;
      incoming[rxchars] = '\0';
    }
  }
  return(strlen(expect) == 0);
}

void pause(int cs)
{
  int start = monotonic_time();

  while ((monotonic_time() - start) < cs)
  {
    ;
  }
}

void delay(int sleep)
{
  int now = monotonic_time();

  while ((monotonic_time() - now) < sleep)
  {
    Driver_Get("", instream);
  }
}

static void Driver_Send(char *string, int handle)
{
  if (!silent)
  {
    char buffer[80];

    sprintf(buffer, "%s (%d)", string, handle);
    fprintf(stderr, "%s\n", buffer);
    _swix(NCDialUI_Debug, _INR(0, 1), 0, buffer);
  }

  while (*string)
  {
    if (!silent)
      fprintf(stderr, "%c", *string);
#ifdef VIA_DEVICEFS
    while (serial_write_byte(handle, *string) != 1)
      ;
#else
    _swix(UART_SerialOp, _INR(0, 1), 3, *string);
#endif
    string++;
  }
}

void Twiddle(void)
{
#ifdef VIA_DEVICEFS
  ioctl_t param;
  serial_ctrl_t ctrl;

  oscli("PPPDisconnect");
  delay(100);
  close_streams();
  if (outstream = serial_open_stream(serial_config, SERIAL_OUTPUT), outstream)
  {
    memset(&param, '\0', sizeof(ioctl_t));

    param.reason = IOCTL_CTRL_LINES;
    param.write = 0;
    param.read  = 1;
    ctrl.data   = serial_ioctl(outstream, &param);

    /* assert dtr */
    ctrl.bits.dtr = 1;
    param.write   = 1;
    param.data    = ctrl.data;
    serial_ioctl(outstream, &param);

    delay(50);

    /* clear dtr */
    ctrl.bits.dtr = 0;
    param.write   = 1;
    param.data    = ctrl.data;
    serial_ioctl(outstream, &param);

    delay(50);
    Driver_Send("ATZ\r", outstream);
    close_streams();
  }
#else
  int param;

  oscli("PPPDisconnect");
  delay(100);
  _swix(UART_SerialOp, _INR(0, 2), 0, 0, ~(1 << 3));
  delay(100);
  _swix(UART_SerialOp, _INR(0, 2), 0, 1 << 3, ~(1 << 3));
  Driver_Send("ATZ\r", outstream);

  do
  {
    delay(10);
    if(_swix(UART_SerialOp, _INR(0, 2) | _OUT(1), 0, 0, -1, &param))
      break;
  } while ((param & (1 << 18)) == 0); /* DCD - Offline */
#endif

  doingit = FALSE;
}

void DumpIt(BOOL filestoo)
{
  restart = TRUE;
  if (dialplease != CALLBACK_NOOP)
  {
    removeticker(NCDial_callafter_entry, pwp);
    dialplease = CALLBACK_NOOP;
  }
  if (innfs.s_addr && filestoo)
  {
    _swix(NFS_Dismount, _INR(0, 1), 0, "NFSBoot");
    _swix(NFS_Dismount, _INR(0, 1), 0, "NCDHome");
  }

  Twiddle();
  pause(100);
  doingit = FALSE;
}

int NCDial_callback_handler (_kernel_swi_regs *r, void *pw)
{
#ifdef STRING_SCRIPT
  static char *script = NULL;
#else
  static FILE *fin = NULL;
#endif
  static int sentat;

  if (pw != pwp)
    return(1);

  switch(dialplease)
  {
  case CALLBACK_DODIAL:
    {
      int c;

      dialplease = CALLBACK_NOOP;

      if (!silent)
      {
        vdu4();
        fprintf(stderr, "Creating files\n");
        _swix(NCDialUI_Debug, _INR(0, 1), 0, "Creating files");
      }
      if (CreateFiles(&card) == FALSE)
      {
        doingit = FALSE;
        if(!silent) fprintf(stderr, "\n\nCreateFiles failed!\n");
        DiallerService(NCDialler_Error);
        break;
      }

      if (!silent)
      {
        vdu4();
        fprintf(stderr, "Opening streams\n");
        _swix(NCDialUI_Debug, _INR(0, 1), 0, "Opening streams");
      }
#ifdef VIA_DEVICEFS
      close_streams();

      instream  = serial_open_stream(serial_config, SERIAL_INPUT);
      outstream = serial_open_stream(serial_config, SERIAL_OUTPUT);
      if (!silent)
      {
        char buffer[80];

        sprintf(buffer, "Streams - In %d  Out %d\n", instream, outstream);
        fprintf(stderr, "%s\n", buffer);
        _swix(NCDialUI_Debug, _INR(0, 1), 0, buffer);
      }
      if (instream == 0 || outstream == 0)
      {
        if(!silent) fprintf(stderr, "\n\nNasty stream situation: in: 0x%x  out: 0x%x\n", instream, outstream);
        close_streams();
        doingit = FALSE;
        DiallerService(NCDialler_Error);
        break;
      }
#else
      _swix(UART_SerialOp, _INR(0, 1), 5, 18);
      _swix(UART_SerialOp, _INR(0, 1), 6, 18);
      _swix(UART_SerialOp, _INR(0, 2), 0, (1 << 1) | (1 << 8), 0);
      _swix(UART_SerialOp, _INR(0, 1), 1, 0);
#endif
      do
      {
        c = fetch();
      } while (c >= 0);

      if (!silent)
      {
        fprintf(stderr, "Opening script\n");
        _swix(NCDialUI_Debug, _INR(0, 1), 0, "Opening script");
      }
#ifdef STRING_SCRIPT
      if (card.script == NULL)
#else
      if (fin)
        fclose(fin);
      if (fin = fopen("<Wimp$ScrapDir>.NCDialler.Files.Script", "r"), fin == NULL)
#endif
      {
#ifdef VIA_DEVICEFS
        close_streams();
#endif
        doingit = FALSE;
        if(!silent) fprintf(stderr, "\n\nCouldn't find a script!\n");
        DiallerService(NCDialler_Error);
        break;
      }
      DiallerService(NCDialler_Dialling);

      if (!silent)
        fprintf(stderr, "Moving to start of script\n");
#ifdef STRING_SCRIPT
      script = card.script;
#else
      fseek(fin, 0, SEEK_SET);
#endif
    }
/*     break; */                /* Need to fall through to SCRIPT */

  case CALLBACK_SCRIPT:
#ifdef STRING_SCRIPT
    if (*script && strchr(script, '\n'))
    {
      char *ptr = expect;

      sentat = monotonic_time();
      while (*script != '\n')
      {
        *(ptr++) = *(script++);
      }
      *ptr = '\0';
      script++;

      ptr = send;
      while (*script != '\n')
      {
        *(ptr++) = *(script++);
      }
      *ptr = '\0';
      script++;

      if (!silent)
      {
        char buffer[80], *temp;

        sprintf(buffer, "Expect: %s\nSend  : %s\n", expect, send);
        fprintf(stderr, "%s\n", buffer);
        temp = strstr(buffer, "Send");
        _swix(NCDialUI_Debug, _INR(0, 1), 0, Rip(buffer));
        _swix(NCDialUI_Debug, _INR(0, 1), 0, Rip(temp));
      }
      dialplease = CALLBACK_NOOP;
    }
    else
    {
#ifdef VIA_DEVICEFS
      close_streams();
#endif
      DiallerService(NCDialler_Connecting);

      dialplease = CALLBACK_NOSERVER;
      callafter(3000, NCDial_callafter_entry, pwp);
      restart = TRUE;
      oscli("PPPConnect");
      break;
    }
#else
    if (fgets(expect, 80, fin))
    {
      sentat = monotonic_time();

      Rip(expect);
      fgets(send, 80, fin);
      Rip(send);

      if (!silent)
      {
        char buffer[80];

        sprintf(buffer, "Expect: %s\nSend  : %s\n", expect, send);
        fprintf(stderr, "%s\n", buffer);
        _swix(NCDialUI_Debug, _INR(0, 1), 0, buffer);
      }
      dialplease = CALLBACK_NOOP;
    }
    else
    {
      fclose(fin);
      fin = NULL;
#ifdef VIA_DEVICEFS
        close_streams();
#endif
      DiallerService(NCDialler_Connecting);

      dialplease = CALLBACK_NOSERVER;
      callafter(3000, NCDial_callafter_entry, pwp);
      restart = TRUE;
      oscli("PPPConnect");
      break;
    }
#endif
/*     break; */         /* Need to fall through to EXPECT */

  case CALLBACK_EXPECT:
    {
      if ((monotonic_time() - sentat) > 9000)
      {

        restart = TRUE;
        if(no_more_nodes) {
            if(!silent) fprintf(stderr, "No more modes - flagging timeout\n");
            DiallerService(NCDialler_Timeout);
        }
      }

      if (Driver_Get(expect, instream) && !restart)
      {
        if (strlen(send) > 0)
        {
          if (strcmp(send, "ATDT") == 0)
          {
            char *next_pstn_num;

            if((next_pstn_num = next_dialup_node())==NULL) { /* ajs - in case list handler barfs */
                if(!silent) fprintf(stderr, "\n\nBarfed fetching dial-up node\n");
                DiallerService(NCDialler_Error);
                break;
            }

            Driver_Send(cmos_number(), outstream);
            Driver_Send(next_pstn_num, outstream); /* ajs - get current node */
          }
          else if (strcmp(send, "send_user") == 0)
          {
            Driver_Send(card.loginid, outstream);
          }
          else if (strcmp(send, "send_pass") == 0)
          {
            Driver_Send(card.loginsecret, outstream);
          }
          else
          {
            Driver_Send(send, outstream);
          }
          Driver_Send("\r", outstream);
        }
        dialplease = CALLBACK_SCRIPT;
        callafter(10, NCDial_callafter_entry, pwp);
        break;
      }
      if (restart)
      {
#ifdef STRING_SCRIPT
#else
        fclose(fin);
        fin = NULL;
#endif
/* ajs added - I'm hoping this is where we end up if the modem returned an error string in DriverGet
       	       Or it could be one of those bogus timeouts from earlier on */
        if(!no_more_nodes) { /* there's more in the list */
          DiallerService(NCDialler_ReDialling); /* hopefully, display the OSD without the usual DiallerService side effects */
	  script = card.script;
	  restart = FALSE;
	  if(!silent) fprintf(stderr, "redialling...\n");
	  dialplease = CALLBACK_SCRIPT;
	  callafter(100, NCDial_callafter_entry, pwp); /* hopefully, this kicks it all off again */
	}
/* end ajs added */
        break;
      }
      /* this gets called if s/e strings didn't match, no modem error, and no timeout */
      dialplease = CALLBACK_EXPECT;
      callafter(10, NCDial_callafter_entry, pwp);
    }
    break;

  case CALLBACK_NOSERVER:
    DiallerService(NCDialler_NoServer);
    dialplease = CALLBACK_NOOP;
    doingit = FALSE;
    Twiddle();
    break;

  case CALLBACK_SAYUP:
    dialplease = CALLBACK_NOOP;
    DiallerService(NCDialler_IPUp); /* Up */
    break;

  case CALLBACK_CONNECT:
    {
      doingit = FALSE;
      DiallerService(NCDialler_Connected);
      removeticker(NCDial_callafter_entry, pw);

      if (!silent)
      {
        fprintf(stderr, " Up\n");
        _swix(NCDialUI_Debug, _INR(0, 1), 0, " Up");
      }

      dialplease = CALLBACK_SAYUP;
      /* delay reduced to 1 sec from 5 secs... */
      /* delay put back to 5 secs cos 1 sec breaks stuff... */
      callafter(500, NCDial_callafter_entry, pwp);
    }
    break;
  }
  return(1);
}

int NCDial_callafter_handler (_kernel_swi_regs *r, void *pw)
{
  if (pw == pwp)
    callback(NCDial_callback_entry, pw);

  return(1);
}

/* undo URL translation of '+' for ' ' in place */
void plus_to_space(char *linebuff, int len)
{
  for (; len; linebuff++, len--)
  {
    if (*linebuff == '+')
      *linebuff = 0x20;
  }
}

/* undo URL translation of special chars to %xx format in place -
returns new string length */
char *UnEscape(char *i)
{
  char hex, *l, *o = i;
  int bytes, len;

  len = strlen(i);
  plus_to_space(i, len);

  while (len)
  {
    if (*i++ == '%')
    {
      hex = (*i >= 'A' ? ((*i & 0xdf) - 'A') + 10 : *i - '0') * 16 + (*(i + 1) >= 'A' ? ((*(i + 1) & 0xdf) - 'A') + 10 : *(i + 1) - '0');
      *(++i - 2) = hex;

      for (l = ++i, bytes = len - 3; bytes; bytes--,l++)
        *(l-2) = *l;
      len -= 3;
      i   -= 2;
      continue;
    }
    len--;
  }
  *i = 0;
  return(o);
}

void Commence(void)
{
  if (!doingit)
  {
#ifdef VIA_DEVICEFS
    ioctl_t param;

    if (outstream)
    {
      memset(&param, '\0', sizeof(ioctl_t));
      param.reason = 6;
      param.read = TRUE;
      _swix(OS_Args, _INR(0, 2), 9, outstream, &param);
    }

    if (outstream == 0 || (param.data & (1 << 19)) == 0) /* DCD - Offline */
#else
    int param;

    if (_swix(UART_SerialOp, _INR(0, 2) | _OUT(1), 0, 0, -1, &param))
    {
      if(!silent) fprintf(stderr, "\n\nSome sort of UART_SerialOp error\n");
      DiallerService(NCDialler_Error);
      return;
    }

    if ((param & (1 << 18)) != 0) /* DCD - Offline */
#endif
    {
      dialplease = CALLBACK_DODIAL;
      restart = FALSE;
      redial  = FALSE;
      doingit = TRUE;
      callafter(100, NCDial_callafter_entry, pwp);
      DiallerService(NCDialler_Starting);
    }
    else
    {
      DiallerService(NCDialler_IPUp); /* Up */
    }
  }
}

/* Standard module routines */

_kernel_oserror *NCDial_swis(int swi_no, _kernel_swi_regs *r, void *pw)
{
  switch (swi_no)
  {
  case (NCDial_Dial - NCDial_00):
    if (!silent)
    {
      fprintf(stderr, "Swi NCDial_Dial called\n");
      _swix(NCDialUI_Debug, _INR(0, 1), 0, "Swi NCDial_Dial called");
    }
    Commence();
    break;

  case (NCDial_Hangup - NCDial_00):
    Twiddle();
    DiallerService(NCDialler_IPDown); /* down */
    break;

  case (NCDial_Silent - NCDial_00):
    silent = r->r[0];
    break;
  }
  return(NULL);
}

_kernel_oserror *NCDialler_cmd (char *arg_string, int argc, int cmd_no, void *pw)
{
  switch (cmd_no)
  {
  case CMD_NCDial_Dial:
    if (!silent)
    {
      fprintf(stderr, "*NCDial_Dial called\n");
      _swix(NCDialUI_Debug, _INR(0, 1), 0, "*NCDial_Dial called");
    }
    Commence();
    break;

  case CMD_NCDial_Hangup:
    {
      Twiddle();
      DiallerService(NCDialler_IPDown); /* down */
    }
    break;

  case CMD_NCDial_StartUp:
    {
      dialplease = CALLBACK_CONNECT;
      callafter(10, NCDial_callafter_entry, pwp);
      online = TRUE;
    }
    break;

  case CMD_NCDial_GoingDown:
    {
      DiallerService(NCDialler_IPDown); /* down */
      online = FALSE;
    }
    break;

  case CMD_NCDial_MakeFiles:
    {
      CreateFiles(&card);
    }
    break;

  case CMD_NCDial_Repoint:
    {
      message_block mb;

      memset (&mb, '\0', sizeof(message_block));
      mb.header.size   = 32;
      mb.header.action = 0x4AF84;
      _swix(TaskModule_SendMessage, _INR(0, 5), 0, &mb, 0, 0, 0, 0);
    }
    break;

  case CMD_NCDial_Silent:
    {
      silent = (atoi(arg_string) != 0);
    }
    break;
  }
  return (NULL);
}

_kernel_oserror *NCDialler_modfinal (int fatal, int podule, void *pw)
{
#ifndef DONT_BUILD_RESOURCES
  _swix(ResourceFS_DeregisterFiles, _IN(0), resources_base());
#endif
  osmodfree(incoming);
  osmodfree(buffer);
  return(NULL);
}

void NCDial_service(int service, _kernel_swi_regs *r, void *pw)
{
  switch (service)
  {
#ifndef DONT_BUILD_RESOURCES
  case Service_ResourceFSStarting:
    ((P_FSStartingFN)(r->r[2]))(resources_base());
    break;
#endif

  case Service_ShutDown:
#if FALSE
    if (doingit)
    {
      r->r[1] = 0;
    }
#endif
    break;

  case Service_ShutdownComplete:
    DumpIt(FALSE);
    break;
  }
}

#define SERIALDEV_VAR "SerialDev$Path"
#define SERIALDEV_TXT "Resources:$.Resources.NCDial."
#define INET_VAR      "Inet$Path"
#define INET_TXT      "Resources:$.Resources.NCDial."
#define DYNAMIC_VAR   "FileDyn$Path"
#define DYNAMIC_TXT   "<Wimp$ScrapDir>.NCDialler."
#define INETDBASE_VAR "InetDBase$Path"
#define INETDBASE_TXT "Inet:Files.,FileDyn:Files."

_kernel_oserror *NCDialler_modinit (char *cmd_tail, int podule_base, void *pw)
{
  pwp = pw;

#ifndef DONT_BUILD_RESOURCES
  _swix(ResourceFS_RegisterFiles, _IN(0), resources_base());
#endif
  incoming = osmodget(256);
  buffer   = osmodget(BUFSIZ);
  memset(&card, '\0', sizeof(carddata));
  _swix(OS_SetVarVal, _INR(0, 2) | _IN(4), SERIALDEV_VAR,
                    SERIALDEV_TXT, strlen(SERIALDEV_TXT), 0);
  _swix(OS_SetVarVal, _INR(0, 2) | _IN(4), INET_VAR,
                    INET_TXT, strlen(INET_TXT), 0);
  _swix(OS_SetVarVal, _INR(0, 2) | _IN(4), DYNAMIC_VAR,
                    DYNAMIC_TXT, strlen(DYNAMIC_TXT), 2);
  _swix(OS_SetVarVal, _INR(0, 2) | _IN(4), INETDBASE_VAR,
                    INETDBASE_TXT, strlen(INETDBASE_TXT), 2);

  Twiddle();
  return(NULL);
}
