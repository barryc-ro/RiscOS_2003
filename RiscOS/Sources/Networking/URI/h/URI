/* File    : URI.h
 * Purpose : C interface to URI handler
 * Author  : Ben Laughton
 * History : 16-04-97: BAL: started
 *           13-04-97: BAL: changed parameter names in uri_disptach
 */

#ifndef _uri_h
#define _uri_h

#include "kernel.h"
#include <stddef.h>

/* Constants for SWI URI_Dispatch */
#define URI_Dispatch_Action_Inform        0x00000001
#define URI_Dispatch_Action_Check         0x00000002
#define URI_Dispatch_Action_ActiveOnly    0x00000004

#define URI_Dispatch_Request_Accepted     0

/* Constants for SWI URI_RequestURI */
#define URI_RequestURI_GetSize            NULL

/* URI handler service call number and reason codes */
#ifndef Service_URI
#define Service_URI                       0xa7
#endif
#define Service_URI_Started               0
#define Service_URI_Dying                 1
#define Service_URI_Check                 2
#define Service_URI_Process               3

/* URI handler WIMP messages */
#define URI_MStarted                      0x4e380
#define URI_MDying                        0x4e381
#define URI_MCheck                        0x4e382
#define URI_MProcess                      0x4e382
#define URI_MReturnResult                 0x4e383
#define URI_MProcessAck                   0x4e384

/* URI file type */
#define URI_FileType                      0xf91


/* Data structures for URI handler messages */
typedef struct URI_block *URI_handle_t;

typedef struct
{
  union
  {
    struct
    {
      unsigned int padding1 : 32;
    } bits;

    unsigned int data;
  } flags;
} URIStartedMessage;

typedef struct
{
  union
  {
    struct
    {
      unsigned int padding1 : 32;
    } bits;

    unsigned int data;
  } flags;
} URIDyingMessage;

typedef struct
{
  union
  {
    struct
    {
      unsigned int check    : 1;
      unsigned int padding1 : 31;
    } bits;

    unsigned int data;
  } flags;

  char         *uri;
  URI_handle_t  uri_handle;
} URICheckURIMessage,
  URIProcessURIMessage,
  URIProcessURIAckMessage;

typedef struct
{
  union
  {
    struct
    {
      unsigned int not_claimed  : 1;
      unsigned int padding1     : 31;
    } bits;

    unsigned int data;
  } flags;

  URI_handle_t uri_handle;
} URIReturnResultMessage;


/* Function prototypes for URI handler SWIs */

/* uri_version
 *
 * Inquire the version number of the URI handler
 *
 * Inputs
 * flags   : flags word
 *
 * Outputs
 * version : version number of the URI handler (major version * 100) + minor version
 *
 * Returns
 * success : NULL
 * failure : pointer to standard error block
 */
extern _kernel_oserror *uri_version (unsigned int flags,
                                     int *version);


/* uri_dispatch
 *
 * Dispatch a URI or check whether URI can be handled
 *
 * Inputs
 * flags              : flags word
 * uri                : pointer to 0 terminated URI
 * source_task_handle : source task handle
 *
 * Outputs
 * result             : result code
 * uri_task_handle    : task handle of URI handler
 * uri_handle         : URI handle
 *
 * Returns
 * success            : NULL
 * failure            : pointer to standard error block
 */
extern _kernel_oserror *uri_dispatch (unsigned int flags, char *uri, int source_task_handle,
                                      unsigned int *result, int *uri_task_handle, URI_handle_t *uri_handle);

/* uri_request_uri
 *
 * Get a URI from the URI handler or check the size of buffer needed to store the URI
 *
 * Inputs
 * flags       : flags word
 * uri         : pointer to buffer to store URI or 0 to inquire size
 * buffer_size : size of buffer
 * uri_handle  : URI handle
 *
 * Outputs
 * uri_length  : offset into buffer of 0 terminator or required size of buffer
 *
 * Returns
 * success     : NULL
 * failure     : pointer to standard error block
 */
extern _kernel_oserror *uri_request_uri (unsigned int flags, char *uri, int buffer_size, URI_handle_t uri_handle,
                                         int *uri_length);

/* uri_invalidate_uri
 *
 * Mark a URI as invalid
 *
 * Inputs
 * flags      : flags word
 * uri_handle : URI handle
 *
 * Returns
 * success    : NULL
 * failure    : pointer to standard error block
 */
extern _kernel_oserror *uri_invalidate_uri (unsigned int flags, URI_handle_t uri_handle);

#endif
