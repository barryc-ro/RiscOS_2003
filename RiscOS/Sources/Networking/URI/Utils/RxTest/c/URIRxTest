/* File		: task.c
 * Purpose	: URI handler WIMP task code
 * Author	: C.Elkins
 * History	: Started 9/2/97
 */

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <kernel.h>
#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>
#include <swis.h>

#include <URI.h>


static _kernel_oserror test_error[] =
{
    {0, "Not enough memory"}
};

#define ERR_MEM 0

#define APP_NAME "URIRxTest"

#define TRUE 1
#define FALSE 0

int taskhandle;

static const int messagelist[] = {Wimp_MQuit,
                                  Wimp_MDataOpen,
                                  URI_MProcess,    /* deals with URI_MCheck as well */
                                  0};


static void task_closedown(void);
static _kernel_oserror *task_wimp_message (int code, WimpMessage* pollblk);
static _kernel_oserror *attempt_uri (WimpMessage *message);


int main(int argc, char *argv[])
{
  _kernel_oserror *e;
  int mask,code;
  WimpPollBlock poll;


  e = wimp_initialise(310, APP_NAME,(int*)messagelist,NULL,(int*)taskhandle);
  if (e)
  {
    wimp_report_error(e,0,0,0,0,0);
  }

  else
  {
    mask = 0x00401831;
    while (TRUE)
    {
      e = wimp_poll (mask, &poll, 0, &code);
      switch(code)
      {
        case Wimp_EUserMessage:
        case Wimp_EUserMessageRecorded:
          if (poll.user_message.hdr.sender != taskhandle)
              e = task_wimp_message (code, &poll.user_message);
          break;

        case Wimp_EUserMessageAcknowledge:
            e = task_wimp_message (code, &poll.user_message);
      }

      if (e)
      {
        wimp_report_error(e,0,APP_NAME);
      }
    }
  }

  return 1;
}



static void task_closedown(void)
{
  wimp_close_down(taskhandle);
  exit (0);
}


static _kernel_oserror* task_wimp_message (int code, WimpMessage* message)
{
  int msg_type;
  _kernel_oserror *e = NULL;

  msg_type = message->hdr.action_code;

  switch(msg_type)
  {
    case Wimp_MQuit:
      task_closedown();
      break;

    case URI_MProcess:
      e = attempt_uri (message);
      break;

    case URI_MReturnResult:
      break;

    default:
      break;
  }


  return e;
}


static _kernel_oserror *attempt_uri (WimpMessage *message)
{
    char *uri;
    int length;
    _kernel_oserror *e;
    _kernel_oserror error;
    URIProcessURIMessage *process_message = (URIProcessURIMessage *) &message->data;

    if (!strstr (process_message->uri, "http://"))
        return NULL;

    message->hdr.your_ref = message->hdr.my_ref;
    message->hdr.action_code = URI_MProcessAck;
    e = wimp_send_message (17, message, message->hdr.sender, 0, NULL);
    if (e) return e;

    e = uri_request_uri (0, NULL, 0, process_message->uri_handle, &length);
    if (e) return e;

    if ((uri = malloc (length)) == NULL) return &test_error[ERR_MEM];
    e = uri_request_uri (0, uri, length, process_message->uri_handle, &length);
    if (e) return e;

    error.errnum = 0;
    sprintf (error.errmess, "%sdoing URI %s",
             process_message->flags.bits.check ? "check bit set: " : "", uri);
    wimp_report_error (&error, 0, APP_NAME);


    return NULL;
}
