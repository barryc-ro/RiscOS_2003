
/*
 * Minimal Toolbox application, using the event veneers library.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <tboxlibs/event.h>
#include <tboxlibs/gadgets.h>
#include <tboxlibs/iconbar.h>
#include <tboxlibs/quit.h>
#include <tboxlibs/saveas.h>
#include <tboxlibs/toolbox.h>
#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>
#include <tboxlibs/window.h>

#include <URI.h>

#include "error.h"


#define WimpVersion    310
#define AppDirectory  "<URISendTest$Dir>"

#define SendWindow_Version 6
#define SendWindow_Check   2
#define SendWindow_ReturnResult 3
#define SendWindow_Start 4
#define SendWindow_URI 1
#define SendWindow_Result 8
#define SendWindow_Try 9

static int g_quit = FALSE;
static int g_previous_result_state;
static int g_task;
static URI_handle_t g_req_handle = NULL;
static IdBlock g_id_block;
static ObjectId g_window_id;

MessagesFD     g_messages;

static int error_event_handler (int event_code, ToolboxEvent *generic_event,
                                IdBlock *id_block, void *handle);

static int toolbox_quit_handler (int event_code, ToolboxEvent *event,
                                 IdBlock *id_block,void *handle);

static int wimp_quit_handler (WimpMessage *message, void *handle);

static int window_button_handler (int event_code, ToolboxEvent *generic_event,
                                  IdBlock *id_block, void *handle);

static int uri_result_handler (WimpMessage *message, void *handle);

static void update_status (const char *const status);



int main (void)
{
    char version_text[5];
    int version;
    _kernel_oserror *e;
    static int toolbox_events[] = {0};    /* get all toolbox events */
    static int wimp_messages[] =
    {
        Wimp_MQuit, URI_MReturnResult, 0
    };


    e = toolbox_initialise (0, WimpVersion, wimp_messages, toolbox_events,
                            AppDirectory, &g_messages, &g_id_block, NULL, &g_task, NULL);
    M_e_check_abort (e);

    e = event_initialise (&g_id_block);
    M_e_check_abort (e);

    e = event_set_mask (Wimp_Poll_NullMask | Wimp_Poll_KeyPressedMask);
    M_e_check_abort (e);


    /* Create objects */
    e = toolbox_create_object (0, "Window", &g_window_id);
    M_e_check_abort (e);


    /* Register toolbox event handlers */
    e = event_register_toolbox_handler (-1, Toolbox_Error, error_event_handler, NULL);
    M_e_check_abort (e);

    e = event_register_toolbox_handler (g_window_id, Window_HasBeenHidden,
                                        toolbox_quit_handler, NULL);
    M_e_check_abort (e);

    e = event_register_toolbox_handler (g_window_id, ActionButton_Selected,
                                        window_button_handler, NULL);
    M_e_check_abort (e);

    e = event_register_toolbox_handler (g_window_id, OptionButton_StateChanged,
                                        window_button_handler, NULL);
    M_e_check_abort (e);

    /* Register WIMP message handlers */
    e = event_register_message_handler (Wimp_MQuit, wimp_quit_handler, NULL);
    M_e_check_abort (e);

    e = event_register_message_handler (URI_MReturnResult, uri_result_handler, NULL);
    M_e_check_abort (e);


    /* Show objects */
    e = uri_version (0, &version);
    M_e_check_abort (e);

    sprintf (version_text, "%01d.%02d", version / 100, version % 100);
    e = displayfield_set_value (DisplayField_Centred, g_window_id,
                                SendWindow_Version, version_text);
    M_e_check_abort (e);

    e = toolbox_show_object (0, g_window_id, 0, NULL, NULL_ObjectId, NULL_ComponentId);
    M_e_check_abort (e);


    while (!g_quit)
        event_poll (NULL, NULL, NULL);


    return EXIT_SUCCESS;
}




static int error_event_handler (int event_code, ToolboxEvent *generic_event,
                                IdBlock *id_block, void *handle)
{
    _kernel_oserror e;
    ToolboxErrorEvent *event = (ToolboxErrorEvent *) generic_event;

    e.errnum = event->errnum;
    strcpy (e.errmess, event->errmess);
    wimp_error (&e);

    return 1;    /* claim event */
}




static int wimp_quit_handler (WimpMessage *message, void *handle)
{
    g_quit = TRUE;
    return 1;    /* claim event */
}




static int toolbox_quit_handler (int event_code, ToolboxEvent *event,
                                 IdBlock *id_block,void *handle)
{
    g_quit = TRUE;
    return 1;    /* claim event */
}




static int window_button_handler (int event_code, ToolboxEvent *generic_event,
                                  IdBlock *id_block, void *handle)
{
    _kernel_oserror *e;

    switch (id_block->self_component)
    {
        case SendWindow_Check:    /* user has changed the 'check' option */
        {
            OptionButtonStateChangedEvent *event =
                (OptionButtonStateChangedEvent *) generic_event;

            if (event->new_state == 1)    /* option switched on */
            {
                /* When checking whether or not a URI can be handled a result must be returned */

                /* Remember the current state of the 'return result' option */
                e = optionbutton_get_state (0,  id_block->self_id, SendWindow_ReturnResult,
                                            &g_previous_result_state);
                M_e_check_abort (e);

                /* Tick the 'return result' option */
                e = optionbutton_set_state (0, id_block->self_id, SendWindow_ReturnResult, 1);
                M_e_check_abort (e);

                /* Shade the 'return result' option */
                e = gadget_set_flags (
                        0, id_block->self_id, SendWindow_ReturnResult, Gadget_Faded);
                M_e_check_abort (e);
            }

            else    /* option switched off */
            {
                /* Restore the state of the 'return result' option to what it was before the
                 * 'check' option was selected
                 */

                /* Unshade the 'return result' option */
                e = gadget_set_flags (0, id_block->self_id, SendWindow_ReturnResult, 0);
                M_e_check_abort (e);

                e = optionbutton_set_state (
                        0,  id_block->self_id, SendWindow_ReturnResult, g_previous_result_state);
                M_e_check_abort (e);
            }
        }
        break;

        case SendWindow_Try:    /* user has selected the 'try' button */
        {
            char *uri;
            int button_state;
            int flags = 0;
            int uri_len;

            if (g_req_handle != NULL)    /* only allow one request at a time */
            {
                wimp_error (M_e_error (Error_Dispatch));
                break;
            }

            /* Find out how much memory is needed to store the URI */
            e = writablefield_get_value (
                    0, id_block->self_id, SendWindow_URI, NULL, 0, &uri_len);
            M_e_check_abort (e);

            /* Try to claim memory to store the URI */
            if ((uri = malloc (uri_len + 1)) == NULL)
            {
                wimp_error (M_e_error (Error_Memory));
                break;
            }

            /* Copy the contents of the URI writable field */
            e = writablefield_get_value (
                    0, id_block->self_id, SendWindow_URI, uri, uri_len, NULL);
            M_e_check_abort (e);


            /* Find out whether or not the 'check' option is selected */
            e = optionbutton_get_state (0,  id_block->self_id, SendWindow_Check, &button_state);
            M_e_check_abort (e);

            if (button_state == 1)    /* check only, must inform of result */
                flags |= (URI_Dispatch_Action_Inform | URI_Dispatch_Action_Check);

            else    /* process URI: find out whether or not a result is required */
            {
                e = optionbutton_get_state (0, id_block->self_id, SendWindow_ReturnResult,
                                            &button_state);
                M_e_check_abort (e);
                if (button_state == 1)
                    flags |= URI_Dispatch_Action_Inform;
            }

            /* The option to start tasks which are not loaded but may be able to handle the URI
             * has not yet been implemented in the URI handler, but when it is this code will
             * handle it.
             */
            e = optionbutton_get_state (0, id_block->self_id, SendWindow_Start,
                                        &button_state);
            M_e_check_abort (e);
            if (button_state == 0)    /* allow external task startup? */
                flags |= URI_Dispatch_Action_ActiveOnly;

            update_status ("Dispatching URI...");

            /* Get the URI handler to dispatch the URI */
            e = uri_dispatch (flags, uri, g_task, NULL, NULL, &g_req_handle);
            M_e_check_abort (e);

            /* If a result was not required then we can forget about the request */
            if ((flags & URI_Dispatch_Action_Inform) == 0)
            {
                g_req_handle = NULL;
                update_status ("Not expecting result");
            }

            free (uri);    /* free the memory used to store our copy of the URI */
        }
        break;
    }

    return 1;    /* claim event */
}




static int uri_result_handler (WimpMessage *message, void *handle)
{
    URIReturnResultMessage *result_message = (URIReturnResultMessage *) &message->data;

    if (g_req_handle == NULL)    /* make sure that we were expecting this message! */
    {
        wimp_error (M_e_error (Error_UnexpectedResult));
        return 0;    /* don't claim message */
    }

    /* Make sure that this result is for the same URI that we dispatched */
    if (result_message->uri_handle != g_req_handle)
    {
        wimp_error (M_e_error (Error_URIMismatch));
        return 0;    /* don't claim message */
    }

    if (result_message->flags.bits.not_claimed)
       update_status ("URI was not claimed");
    else
       update_status ("URI was claimed");

    g_req_handle = NULL;    /* forget about the URI */

    return 1;    /* claim message */
}




static void update_status (const char *const status)
{
    _kernel_oserror *e;

    e = displayfield_set_value (DisplayField_LeftJustify, g_window_id, SendWindow_Result,
                                (char *) status);
    M_e_check_abort (e);
}
