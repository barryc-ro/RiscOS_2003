/* File		: task.c
 * Purpose	: URI handler WIMP task code
 * Author	: C.Elkins
 * History	: Started 9/2/97
 */

#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "kernel.h"
#include "wimp.h"
#include "wimplib.h"
#include "swis.h"

#include "URI.h"

#include "task.h"
#include "globals.h"
#include "URIswis.h"
#include "ralloc.h"
#include "module.h"


static const int		messagelist[]	= { Wimp_MPreQuit,
						    Wimp_MDataOpen,
						    URI_MProcess,    /* deals with URI_MCheck as well */
                                                    URI_MReturnResult,
						    URI_MProcessAck,
						    0};


static _kernel_oserror *task_wimp_message (int code, WimpMessage* pollblk);
static _kernel_oserror *load_uri_file (const char* const filename);
static _kernel_oserror *task_walk_chain (URI_handle_t uri_handle);
static _kernel_oserror *task_send_uri_message (const int message_code, URI_t *const uri);
static _kernel_oserror *task_unclaimed_uri (URIProcessURIMessage *message);
static _kernel_oserror *task_claimed_uri (URIProcessURIAckMessage *message);
static void task_invalidate_uri (URI_t *uri_handle);


int main(int argc, char *argv[])
{
  _kernel_oserror*	e;
  int			this_wimp,mask,code;
  WimpPollBlock		poll;


  M_debug(("Start code entered - task handle is %d\n",URI_taskhandle));

  if (URI_taskhandle > 0)
  {
    e = wimp_close_down(URI_taskhandle);
    URI_taskhandle = 0;
  }

  M_debug(("About to call wimp_init(%d,%s,%08x,%08x,%08x)\n",MinWimpVersion,(char*)ModuleName,(int*)messagelist,&this_wimp,&URI_taskhandle));
  e = wimp_initialise(MinWimpVersion,(char*)ModuleName,(int*)messagelist,&this_wimp,(int*)&URI_taskhandle);
  if (e)
  {
    M_debug(("Error from wimp_init\n"));
    wimp_report_error(e,0,0,0,0,0);
  }
  else
  {
    M_debug(("wimp_init call returned version %08x handle %08x\n",this_wimp,URI_taskhandle));
    e = task_send_uri_message (URI_MStarted, NULL);
    mask = 0x00401831;
    poll_word = 0;
    while (TRUE)
    {
      e = wimp_poll(mask,&poll,(int*)&poll_word,&code);
      M_debug(("Wimp_poll returned event %d\n",code));
      switch(code)
      {
        case Wimp_EPollWordNonZero:				/* module has some work for us to do */
          poll_word = 0;
          /* pass head of URI chain (held in poll word) */
          task_walk_chain((URI_handle_t) poll.poll_word_non_zero.poll_word_contents);
          break;

        case Wimp_EUserMessage:					/* user message received */
        case Wimp_EUserMessageRecorded:				/* user message recorded */
          if (poll.user_message.hdr.sender != URI_taskhandle)	/* don't handle message we just sent! */
              e = task_wimp_message(code,&poll.user_message);	/* Wimp message handler */
          break;

        case Wimp_EUserMessageAcknowledge:			/* message ack received */
            e = task_wimp_message(code,&poll.user_message);
            break;

        default:
            break;
      }

      if (e)
      {
        wimp_report_error(e,0,0,0,0,0);
      }
    }
  }
}



_kernel_oserror* task_closedown(int sendmsg)
{
  _kernel_oserror*	e;

  if (URI_taskhandle > 0)
  {
    if (sendmsg) (void) task_send_uri_message (URI_MDying, NULL);
    e = wimp_close_down(URI_taskhandle);
    URI_taskhandle = 0;
    if (e) return(e);
  }
  if (URI_taskstack && !sendmsg)
  {
    e = _swix(OS_Module, _IN(0) | _IN(2), 7, URI_taskstack);
    URI_taskstack = 0;
  }
  return(e);
}


static _kernel_oserror* task_wimp_message(int code, WimpMessage* pollblk)
{
  int			msg_type;
  _kernel_oserror*	e = NULL;

  msg_type = pollblk->hdr.action_code;
  M_debug (("task_wimp_message called with: event %d, message %d\n", code, msg_type));
  switch(msg_type)
  {
    case Wimp_MQuit:
      task_closedown(1);
      exit(0);
      break;

    case Wimp_MDataOpen:
      if (pollblk->data.data_open.file_type == URI_FileType)
      {
        /* Decided to handle message so acknowledge immediately with DataLoadAck */
        pollblk->hdr.action_code = Wimp_MDataLoadAck;
        pollblk->hdr.your_ref = pollblk->hdr.my_ref;
        if ((e = wimp_send_message (Wimp_EUserMessage, pollblk, pollblk->hdr.sender, 0, NULL)) != NULL)
          return e;

        if ((e = load_uri_file (pollblk->data.data_open.path_name)) != NULL)
          return e;
      }
      break;

    case URI_MProcess:    /* handles URI_MCheck case as well because Check and Process are the same */
      if ((e = task_unclaimed_uri ((URIProcessURIMessage *) &pollblk->data)) != NULL)
        return e;
      break;

    case URI_MReturnResult:
      task_invalidate_uri (((URIReturnResultMessage *) (&pollblk->data))->uri_handle);
      break;

    case URI_MProcessAck:
      if ((e = task_claimed_uri ((URIProcessURIAckMessage *) &pollblk->data)) != NULL)
        return e;
      break;

    default:
      break;
  }

  return NULL;
}



#ifdef CE_CODE
static _kernel_oserror* load_uri_file (const char* const filename)
{
  char* uri;
  int c;
  int len = 0;
  FILE* fp;
  _kernel_oserror *e;


  M_debug (("load_uri_file called with: filename = %s\n", filename));
  if ((fp = fopen (filename, "r")) == NULL)	/* open URI file */
  {
    M_debug (("file open failed: %s\n", strerror (errno)));
    return ERR(err_badfile);
  }
  setbuf (fp, NULL);

  /* find length of first line in file */
  while (c = fgetc (fp), c != EOF && c != '\n')
    ++len;

  M_debug (("URI length: %d\n", len));

  rewind (fp);					/* go back to start of file */
  if ((uri = rmalloc (len + 1)) == NULL)	/* allocate temporary buffer to read URI into (+1 for terminator) */
    return ERR(err_nomemory);

  if (fgets (uri, len + 1, fp) == NULL)		/* try to read URI from file and null-terminate it*/
    return ERR(err_badfile);

  fclose (fp);					/* close file */
  M_debug (("URI extracted: %s\n", uri));


  /* URI read successfully: despatch it to the URI_Dispatch SWI handler */
  e = _swix (URI_Dispatch, _INR (0, 1), 0, uri);
  rfree (uri);
  return e;
}
#else
static _kernel_oserror* load_uri_file (const char* const filename)
{
    char *             	uri=NULL;
    int                	c;
    int 	        uri_version = 100;
    int                	len = 0;
    int			lines = 0;
    int			exit_while = 0;
    FILE *             	fp;
    _kernel_oserror 	*e = NULL;


    M_debug (("load_uri_file called with: filename = %s\n",
              filename));

    fp = fopen (filename, "r");
    if (fp == NULL)   /* open URI file */
    {
        M_debug (("file open failed: %s\n", strerror (errno)));
        return (_kernel_oserror *)&error_block[4];
    }
    /* Vital to stop C library claiming any memory for it */
    setbuf (fp, NULL);

    while (lines>=0) {
	fpos_t loc;

	fgetpos(fp, &loc);
    	while (c = fgetc (fp), c != EOF && c < ' ') {
		fgetpos(fp, &loc);
	}
	if (c == EOF) {
	        fclose(fp);
	        break;
	}
	len = 1;
    	/* find length of first line in file */
    	while (c = fgetc (fp), c != EOF && c >= ' ') ++len;

    	M_debug (("Line length: %d\n", len));

	fsetpos(fp, &loc); /* Return to start of line */

    	/* allocate temporary buffer to read URI into (+1 for terminator) */
    	uri = rmalloc (len + 1);
    	if (uri == NULL) {
	        fclose(fp);
        	return (_kernel_oserror *)&error_block[1];
    	}

	if (fread(uri, 1, len + 1, fp) == 0) {
	        fclose(fp);
	        return (_kernel_oserror *)&error_block[4];
	}

	uri[len] = '\0';
	if (uri[0] == '#') {
	        rfree(uri);
	        uri=NULL;
	        continue;
	}
	++lines;

	if (lines == 1) {
	        if (strcmp (uri, "URI") == 0) {
		        /* We found the URI line! */
	        }
	        else {
	                /* Assume just a URI in a file - not a valid file
	                 * but backward compatibility ...
	                 */
	                fclose(fp);
	                break;
	        }
	}
	else if (lines == 2) {
		/* We found the version number */
    		M_debug (("URI version number: %s\n", uri));
		uri_version = (int) strtoul(uri, NULL, 10);
	}
	else if (lines == 3) {
		exit_while=1;
	}
	else {
	        exit_while=1;
	}

	if (exit_while) {
	        fclose(fp);
	        break;
	}

	if (uri!=NULL) {
		rfree(uri);
		uri=NULL;
	}
    }

    if (uri!=NULL) {
    	/* URI read successfully: despatch it to the URI_Dispatch SWI handler */
    	M_debug (("URI extracted: %s\n", uri));
    	e = _swix (URI_Dispatch, _INR (0, 1), 0, uri);
    }

    if (uri) rfree (uri);
    return e;
}
#endif

static _kernel_oserror *task_walk_chain (URI_handle_t uri_handle)
{
  int action;
  _kernel_oserror *e;

  M_debug (("task_walk_chain entered with uri_handle %p\n", uri_handle));
  while (uri_handle->next != NULL)
  {
    uri_handle = uri_handle->next;
    M_debug(("URI handle %08x action %08x\n",(int) uri_handle,(int) uri_handle->action));
    if ((action = uri_handle->action) == 0) continue;	/* nothing to do, so be quick */
    if (action & Action_WimpBroad)				/* implies service call broadcast needed */
    {
      action &= ~Action_WimpBroad;				/* clear 'wimp broadcast flag' */
      if (action & Action_Check)
      {
        if ((e = task_send_uri_message (URI_MCheck, uri_handle)) != NULL)
          return e;
      }
      else
      {
        if ((e = task_send_uri_message (URI_MProcess, uri_handle)) != NULL)
          return e;
      }
      uri_handle->action = action;
      M_debug(("URI handle %08x action %08x\n",(int) uri_handle,(int) uri_handle->action));
    }
  }

  return NULL;
}


static _kernel_oserror *task_send_uri_message (const int message_code, URI_t *const uri)
{
  int dest_task;
  int send_type;
  WimpMessage message;

  M_debug (("task_send_uri_message called with message_code %d, handle %p\n", message_code, uri));
  message.hdr.size = sizeof (message.hdr);
  message.hdr.your_ref = 0;
  message.hdr.action_code = message_code;

  switch (message_code)
  {
    case URI_MStarted:
    {
      URIStartedMessage *started_message = (URIStartedMessage *) &message.data;

      message.hdr.size += sizeof (URIStartedMessage);
      send_type = Wimp_EUserMessage;
      dest_task = 0;    /* broadcast to all tasks */
      started_message->flags.data = 0;
      break;
    }

    case URI_MDying:
    {
      URIDyingMessage *dying_message = (URIDyingMessage *) &message.data;

      message.hdr.size += sizeof (URIDyingMessage);
      send_type = Wimp_EUserMessage;
      dest_task = 0;    /* broadcast to all tasks */
      dying_message->flags.data = 0;
      break;
    }

    case URI_MProcess:    /* deal with URI_MCheck case as well */
    {
      URIProcessURIMessage *process_message = (URIProcessURIMessage *) &message.data;

      message.hdr.size += sizeof (URIProcessURIMessage);
      send_type = Wimp_EUserMessageRecorded;
      dest_task = 0;    /* broadcast to all tasks */
      process_message->flags.data = 0;
      if (uri->action & Action_Check)
        process_message->flags.bits.check = TRUE;
      else
        process_message->flags.bits.check = FALSE;
      process_message->uri = &uri->string;
      process_message->uri_handle = uri;
      break;
    }

    case URI_MReturnResult:
    {
      URIReturnResultMessage *return_result_message = (URIReturnResultMessage *) &message.data;

      message.hdr.size += sizeof (URIReturnResultMessage);
      send_type = Wimp_EUserMessageRecorded;
      dest_task = uri->taskhandle;
      return_result_message->flags.data = 0;
      if (uri->action & Action_Claimed)
        return_result_message->flags.bits.not_claimed = FALSE;
      else
        return_result_message->flags.bits.not_claimed = TRUE;
      return_result_message->uri_handle = uri;
      break;
    }
  }

  M_debug (("sending message type %d to %d\n", send_type, dest_task));
  return wimp_send_message (send_type, &message, dest_task, 0, NULL);
}


/* deal with the situation where no task was able to handle the URI */
static _kernel_oserror *task_unclaimed_uri (URIProcessURIMessage *message)
{
  URI_t *uri_handle = (URI_t *) message->uri_handle;
  _kernel_oserror *e = NULL;

  /* at some point in the future system variables will be checked as a last resort
   * if external process startup was requested
   */

  /* if the originating task asked to be informed of the results of the dispatch
   * process then send a ReturnResult message. Otherwise the URI is marked for
   * deletion
   */

  if (uri_handle->action & Action_Inform)
  {
    uri_handle->action &= ~Action_Claimed;
    e = task_send_uri_message (URI_MReturnResult, uri_handle);
  }
  else
    task_invalidate_uri (uri_handle);

  return e;
}


/* deal with the situation where a task was able to handle the URI and sent us an ack */
static _kernel_oserror *task_claimed_uri (URIProcessURIAckMessage *message)
{
  _kernel_oserror *e = NULL;
  URI_t *uri_handle = (URI_t *) message->uri_handle;

  /* send URI ReturnResult message to originator */
  if (uri_handle->action & Action_Inform)
  {
    uri_handle->action |= Action_Claimed;
    e = task_send_uri_message (URI_MReturnResult, uri_handle);
  }
  else
    task_invalidate_uri (uri_handle);

  return e;
}


/* flag URI for deletion and set callback routine to do the deletion */
static void task_invalidate_uri (URI_t *uri_handle)
{
  uri_handle->action |= Action_Delete;
  setcallback ();
}
