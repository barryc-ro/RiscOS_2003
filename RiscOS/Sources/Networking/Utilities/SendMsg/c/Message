/* >c.Messages
 *
 * Various message file handling routines. Adapted from code by IDJ.
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <swis.h>

#include "Message.h"


#define MessageTrans_TokenNotFound 0xAC2


static int             messages_fd[4];
static _kernel_oserror global_err_blk;


/**********************************************************************
 *
 * Read a message from our messages file.
 *
 */
extern _kernel_oserror *read_message(const char *token, const char **buffer, size_t *inoutlength)
{
  return _swix(MessageTrans_Lookup, _INR(0,7) | _OUTR(2,3), messages_fd, token, *buffer, *inoutlength,
               0, 0, 0, 0,   buffer, inoutlength
              );
}


/**********************************************************************
 *
 * Generate a RISC OS error block.
 *
 */
extern _kernel_oserror *make_error(int err_num, int num_args, ...)
{
  va_list          ap;
  char             *s, token[4];
  int              i = 4;
  _kernel_oserror  *err, *ptr;
  char             *sub[4] = {0, 0, 0, 0};

  ptr         =  &global_err_blk;
  ptr->errnum = err_num;
  num_args    = (num_args > 4) ? 4 : num_args;

  for (va_start (ap, num_args); num_args--; i++)
  {
    s      = va_arg (ap, char *);
    sub[i] = (s && *s) ? s : NULL; /* copy (pointer to args)s into registers */
  }

  sprintf(token, "E%02x", err_num & 0xff);

  err = _swix(MessageTrans_Lookup, _INR(0,7), messages_fd, token, ptr->errmess, sizeof(*ptr) - sizeof(ptr->errnum) /* 252! */,
              sub[0], sub[1], sub[2], sub[3]
             );

  /* if the token isn't found, generate our own not found report */
  if ((err != NULL) && (err->errnum == MessageTrans_TokenNotFound))
  {
    _swix(MessageTrans_Lookup, _INR(0,7), messages_fd, "E00", ptr->errmess, sizeof(*ptr) - sizeof(ptr->errnum) /* 252! */,
          0, 0, 0, 0
         );
  }

  va_end (ap);
  return ptr;
}


/**********************************************************************
 *
 * Open our messages file.
 *
 */
extern _kernel_oserror *messages_file_open(char *messages_filename)
{
  return _swix(MessageTrans_OpenFile, _INR(0,2), messages_fd, messages_filename, 0);
}


/**********************************************************************
 *
 * Close our messages file.
 *
 */
extern _kernel_oserror *messages_file_close(void)
{
  return _swix(MessageTrans_CloseFile, _IN(0), messages_fd);
}
