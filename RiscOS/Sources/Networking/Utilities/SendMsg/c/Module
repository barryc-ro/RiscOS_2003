/* >c.Module
 *
 * This program creates a socket and initiates a connection with the socket
 * given in the command line. One message is sent over the connection and
 * then the socket is closed, ending the connection. The form of the
 * command line is streamwrite hostname portnumber
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <swis.h>

#include <sys/types.h>
#include <sys/ioctl.h>
#include <socklib.h>
#include <inetlib.h>
#include <unixlib.h>
#include <netdb.h>

#include <Global/Services.h>

#include "ModHdr.h"
#include "Module.h"
#include "Message.h"


/* This function is defined in the object created by ResGen */
#ifndef ROM
  extern int messages_file(void);
#endif

static int one = 1;


/**********************************************************************
 *
 * Module initialisation code. Open messages file and allocate workspace.
 *
 */
_kernel_oserror *Module_Init(const char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *err = NULL;
  IGNORE (cmd_tail);
  IGNORE (podule_base);
  IGNORE (pw);


  #ifndef ROM
    TIDY_ERR( _swix(ResourceFS_RegisterFiles, _IN(0), messages_file()) );
  #endif

  if (getenv(Module_Title "$Path"))
    err = messages_file_open(Module_Title ":Messages");
  else
    err = messages_file_open("Resources:$.Resources." Module_Title ".Messages");

  #ifndef ROM
    if (err) (void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
  #endif

  host_buf = malloc(dest_sz);
  if (host_buf == NULL) DO_TIDY_ERR( make_error(sm_ERROR_NO_MEM, 0) );

err_exit:
  return err;
}


/**********************************************************************
 *
 * Module finalisation code. Close messages file and free workspace.
 *
 */
_kernel_oserror *Module_Final(int fatal, int podule, void *pw)
{
  IGNORE (fatal);
  IGNORE (podule);
  IGNORE (pw);

  if (host_buf) free(host_buf);

  messages_file_close();

  #ifndef ROM
    (void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
  #endif

  return 0;
}


/**********************************************************************
 *
 * Create a socket, connect it, squirt a string down it and then close it.
 *
 * In...
 *   protocol ... 0 = UDP else TCP
 *   host     ... destination host name (may be an IP address dotted-quad string)
 *   port_str ... port name string (may be a number, i.e. "7")
 *   message  ... pointer to zero-terminated string to send
 * Out...
 *   RISC OS error block pointer (NULL if no error)
 *
 */
static _kernel_oserror *SendMessage(unsigned short protocol, char *host, char *port_str, char *message)
{
  _kernel_oserror    *err      = NULL;
  int                 sock     = -1;
  unsigned short      port_num = htons(atoi(port_str));
  struct servent     *service;
  struct sockaddr_in  server = { 0 };
  struct linger       ling;
  struct hostent     *hp;
  char                b;

  /* If the port is a name string, map it to the port number */
  if (port_num == 0)
  {
    if (protocol == UDP)
      service = getservbyname(port_str, "udp");
    else
      service = getservbyname(port_str, "tcp");
    if (service)
      port_num = service->s_port;
    else
      DO_MSG_ERR(sm_ERROR_NO_PORT);
  }

  /* Create socket */
  if (protocol == UDP)
    sock = socket(AF_INET, SOCK_DGRAM, 0);
  else
    sock = socket(AF_INET, SOCK_STREAM, 0);
  if (sock < 0) DO_TIDY_ERR(&_inet_error);

  /* We don't want multitasking in TaskWindows to suspend if the socket blocks */
  (void) socketioctl(sock, FIOSLEEPTW, &one);

  /* If the close is called before the connection is completed, linger will not
   * actually work hence the reason why we do the read.
   */
  ling.l_onoff  = 1;
  ling.l_linger = 0;
  if (setsockopt(sock, SOL_SOCKET, SO_LINGER, &ling, sizeof ling) < 0)
  {
    DO_TIDY_ERR(&_inet_error);
  }

  /* Connect socket using specified host name */
  server.sin_family = AF_INET;
  hp = gethostbyname(host);
  if (hp == 0) DO_MSG_ERR(sm_ERROR_BAD_HOST);

  /* Copy the host's IP address into our structure */
  memcpy(&server.sin_addr, hp->h_addr, hp->h_length);
  server.sin_port = port_num;
  server.sin_len  = sizeof server;

  /* Connect, write the message */
  if (sendto(sock, message, strlen(message), MSG_EOF, (struct sockaddr *)&server, server.sin_len) < 0)
  {
    DO_TIDY_ERR(&_inet_error);
  }

  /* We don't want to read anything, but we want to sync and not close before the
   * connection is established.
   */
  if(socketread(sock, &b, sizeof b) < 0)
  {
    DO_TIDY_ERR(&_inet_error);
  }

  /* Close the stream and exit */
  if (socketclose(sock) < 0)
  {
    sock = -1;
    DO_TIDY_ERR(&_inet_error);
  }
  sock = -1;

err_exit:
  if (sock >= 0) (void) socketclose(sock);
  return err;
}


/**********************************************************************
 *
 * Return the length of the specified string. Zero if not found or empty.
 *
 * In...
 *   str ... pointer to zero-terminated string (may be NULL)
 * Out...
 *   Length of string or zero if empty or if str was a NULL pointer
 *
 */
static unsigned int safe_strlen(const char *str)
{
  if (str == NULL) return 0;
  return strlen(str);
}


/**********************************************************************
 *
 * Implementation of CLI command '*SendMessage'
 *
 * In...
 *   arg_string ... pointer to zero-terminated parameter string for this *command
 * Out...
 *   RISC OS error block pointer (NULL if no error)
 *
 */
static _kernel_oserror *SendMessage_Code(const char *arg_string)
{
  _kernel_oserror *err = NULL;
  char            *str;
  unsigned short   protocol;
  static struct
  {
    unsigned int  udp;
    unsigned int  tcp;
    char          *host;
    unsigned int  quiet;
    char          *message;
    char          data[1024];
  } param;

  /* Set default 'quiet' mode according to the system variable presence */
  param.quiet = (unsigned int) getenv(SM_QUIETVAR);

  /* Read the default protocol (TCP or UDP) */
  protocol = TCP;
  str      = getenv(SM_PROTVAR);
  if (
      (str != NULL)
      &&
      strcasecmp(str, "udp")
     )
     protocol = UDP;

  /* Parse our parameter string */
  TIDY_ERR( _swix(OS_ReadArgs, _INR(0,3), SM_Syntax, arg_string, &param, sizeof param) );
  if (safe_strlen(param.message) == 0) DO_MSG_ERR(sm_ERROR_NO_MSG);

  /* Set defaults if the parameter was not specified */
  if (param.host == NULL)
  {
    str = getenv(SM_DESTVAR);
    if (str)
    {
      strcpy(host_buf, str);
      param.host = host_buf;
    }
  }
  if (safe_strlen(param.host) == 0) DO_MSG_ERR(sm_ERROR_NO_DEST);

  /* Override the default protocol (if the necessary switch was specified) */
  if (param.udp) protocol = UDP;
  if (param.tcp) protocol = TCP; /* TCP takes priority if both specified */

  /* Extract the port string from the hostname (or address) */
  str = strchr(param.host, ':');
  if (str) *str++ = '\0';
  if (safe_strlen(str) == 0) DO_MSG_ERR(sm_ERROR_NO_PORT);

#ifdef DEBUG
  printf("protocol '%d' (udp=0, tcp=1)\n", protocol);
  printf("host     '%s' port name '%s'\n", param.host, str);
  printf("message  '%s'\n", param.message);
  if (param.quiet)
    printf("quiet mode\n");
  else
    printf("loud mode\n");
#endif

  /* Send the message */
  TIDY_ERR( SendMessage(protocol, param.host, str, param.message) );

err_exit:
  if (param.quiet != 0) err = NULL;
  return(err);
}


/**********************************************************************
 *
 * Module *command handler.
 *
 * In...
 *   arg_string ... pointer to zero-terminated parameter string for this *command
 *   argc       ... count of the number of arguments
 *   cmd_no     ... index of the command into our command list
 *   pw         ... module private word pointer
 * Out...
 *   RISC OS error block pointer (NULL if no error)
 *
 */
_kernel_oserror *Module_Commands(const char *arg_string, int argc, int cmd_no, void *pw)
{
  IGNORE(argc);
  IGNORE(pw);

  switch (cmd_no)
  {
    case (CMD_SendMessage) :
    {
      return SendMessage_Code(arg_string);
    }
  }

  return 0;
}
