/* > module.c
 *
 *      RISC OS module related code.
 */

/* From CLib */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "module.h"
#include "error.h"

#define INDENT	"        "

ERROR_STRUCT( NOALTS, 0, "Alt keys not pressed" );


/* Returns true if c is a whitespace character.
 */
static int
IsWhite( char c )
{
    return ((c == 0x0A) || (c == ' ') || (c == 0x09));
}


/* Get a yes/no response from the user. Returns true if yes.
 */
static int
Yes( void )
{
    char reply = getchar();

    while ( IsWhite(reply) ) reply = getchar();
    while ( getchar() != 0x0A ) ;

    return ((reply == 'y') || (reply == 'Y'));
}


/* Read an IP address (or 4 byte value) from CMOS.
 */
static void
ReadIPCMOS( int location, uchar *p )
{
    int i,v;

    for ( i = 0; i < 4; i++ )
    {
        _swix( OS_Byte, _IN(0)|_IN(1)|_OUT(2), 161, location++, &v );
        *p++ = (uchar)v;
    }
}


/* Write an IP address (or 4 byte value) to CMOS.
 */
static void
WriteIPCMOS( int location, uchar *p )
{
    int i;

    for ( i = 0; i < 4; i++ )
        _swix( OS_Byte, _IN(0)|_IN(1)|_IN(2), 162, location++, *p++ );
}


/* Read a \0 terminated string from CMOS.
 */
static void
ReadStringCMOS( int location, char *p, int bufsz )
{
    int v;

    while ( --bufsz )
    {
        _swix( OS_Byte, _IN(0)|_IN(1)|_OUT(2), 161, location++, &v );
        *p++ = v;
        if (v == '\0') return;
    }
    *p = '\0';
}


/* Write a \0 terminated string to CMOS.
 */
static void
WriteStringCMOS( int location, char *p )
{
    do
    {
        _swix( OS_Byte, _IN(0)|_IN(1)|_IN(2), 162, location++, *p );
    }
    while ( *p++ != '\0' );
}


/* Read all static IP data from CMOS.
 */
static void
ReadIPData( ip_data *ip )
{
    int flagbyte;
    
    _swix( OS_Byte, _IN(0)|_IN(1)|_OUT(2), 161, FLAGCMOS, &flagbyte );
    ip->flags = (flagbyte & FLAGBIT) ? FLAGS_ENABLED : 0;
    
    ReadIPCMOS( NCIPCMOS, ip->client_ip );
    ReadIPCMOS( SERVERIPCMOS, ip->server_ip );
    ReadIPCMOS( GATEWAYIPCMOS, ip->gateway_ip );
    ReadIPCMOS( NETMASKCMOS, ip->net_mask );
    ReadIPCMOS( DNSIPCMOS, ip->dns_ip );
    ReadStringCMOS( BOOTMOUNTCMOS, ip->boot_mount, PATHSZ );
}


/* Write all static IP data to CMOS.
 */
static void
WriteIPData( ip_data *ip )
{
    int flagbyte;
    
    _swix( OS_Byte, _IN(0)|_IN(1)|_OUT(2), 161, FLAGCMOS, &flagbyte );
    if ( ip->flags & FLAGS_ENABLED )
        flagbyte |= FLAGBIT;
    else
        flagbyte &= ~FLAGBIT;
    _swix( OS_Byte, _INR(0,2), 162, FLAGCMOS, flagbyte );
     
    WriteIPCMOS( NCIPCMOS, ip->client_ip );
    WriteIPCMOS( SERVERIPCMOS, ip->server_ip );
    WriteIPCMOS( GATEWAYIPCMOS, ip->gateway_ip );
    WriteIPCMOS( NETMASKCMOS, ip->net_mask );
    WriteIPCMOS( DNSIPCMOS, ip->dns_ip );
    WriteStringCMOS( BOOTMOUNTCMOS, ip->boot_mount );
}


/* Clear the screen.
 */
static void
Cls( void )
{
    printf( "%c\n\n\n\n\n\n\n", 12 );
}


/* Print an IP address.
 */
static void
PrintIP( uchar *p )
{
    printf( "%d.%d.%d.%d\n", *p, *(p+1), *(p+2), *(p+3) );
}


/* Print all static IP data.
 */
static void
PrintIPData( ip_data *ip )
{
    printf( INDENT "NC IP address:           " );  PrintIP( ip->client_ip );
    printf( INDENT "Boot server IP address:  " );  PrintIP( ip->server_ip );
    printf( INDENT "Gateway IP address:      " );  PrintIP( ip->gateway_ip );
    printf( INDENT "Sub-net mask:            " );  PrintIP( ip->net_mask );
    printf( INDENT "DNS IP address:          " );  PrintIP( ip->dns_ip );
    printf( INDENT "Boot mount:              %s\n", ip->boot_mount );
    printf( INDENT "Static IP booting:       %s", (ip->flags & FLAGS_ENABLED) ? "Enabled\n\n" : "Disabled\n\n" );
}


/* Get a string from stdin. If return is pressed straight away then the
 * buffer is left unchanged.
 */
static void
GetString( char *message, char *buf, int bufsz )
{
    char c;

    printf( INDENT "%s: ", message );
    while ( --bufsz && ((c = getchar()) != 0x0A) ) *buf++ = c;
    *buf = '\0';
    if ( c != 0x0A ) while ( getchar() != 0x0A ) ;
}


/* Get an IP address from stdin.
 */
static void
GetIP( char *message, uchar *p )
{
    int i, d[4];

    do
    {
        char buf[24];

        GetString( message, buf, 24 );
        if ( buf[0] == '\0' )
        {
            printf( INDENT "Field left unchanged.\n\n" );
            return;
        }
        i = sscanf( buf, "%d.%d.%d.%d", d, d+1, d+2, d+3 );
        if ( i != 4 ) printf( INDENT "\nAn IP address should be entered as a.b.c.d, try again.\n\n" );
    }
    while ( i != 4 );

    for ( i = 0; i < 4; i++ ) *p++ = (uchar)d[i];
}


/* Return true if both Alt keys are down.
 */
static int
AltsDown( void )
{
    int l, r;

    _swix( OS_Byte, _IN(0)|_IN(1)|_OUT(1), 121, 0x85, &l );
    _swix( OS_Byte, _IN(0)|_IN(1)|_OUT(1), 121, 0x88, &r );

    return l && r;
}


/* Reboot the machine.
 */
void
reboot( void )
{
    _swix( OS_Reset, NULL );
}


static void
DoIt( void *pw )
{
    /* Set the default escape handler to reboot the machine. Don't need
     * to remember old handler as we always reboot after getting this far.
     */
    extern int veneer_reboot( _kernel_swi_regs *r, void *pw );

    _swix( OS_ChangeEnvironment, _INR(0,3), 9, veneer_reboot, pw, 0 );

    while( TRUE )
    {
        ip_data ip;
        char buf[PATHSZ];

        ReadIPData( &ip );

        Cls();
        PrintIPData( &ip );

        printf( INDENT "Do you want to change the configured information (y/n)? " );
        if ( !Yes() ) reboot();

        printf( "\n" INDENT "Entering no data preserves the field being prompted for.\n\n" );

        GetIP( "Please enter the NC IP address", ip.client_ip );
        GetIP( "Please enter the boot server IP address", ip.server_ip );
        GetIP( "Please enter the gateway IP address", ip.gateway_ip );
        GetIP( "Please enter the sub-net mask", ip.net_mask );
        GetIP( "Please enter the DNS IP address", ip.dns_ip );
        GetString( "Please enter the boot mount path", buf, PATHSZ );
    	if ( buf[0] == '\0' )
	        printf( INDENT "Field left unchanged.\n\n" );
	    else
	    	strcpy( ip.boot_mount, buf );

        printf( INDENT "Do you want to enable static IP booting (y/n)? " );
        if ( Yes() )
            ip.flags |= FLAGS_ENABLED;
        else
            ip.flags &= ~FLAGS_ENABLED;

        Cls();

        PrintIPData( &ip );

        printf( INDENT "Do you want to commit these changes to non-volatile RAM (y/n)? " );
        if ( Yes() )
        {
            WriteIPData( &ip );
            printf( "\n" INDENT "The changes have been committed, press Return to reboot the NC.\n" );
            (void)getchar();
            reboot();
        }

        /* Changes not committed so go round and ask again. */
    }
}


_kernel_oserror *
module_service( int service, _kernel_swi_regs *r, void *pw )
{
    /* If we get here then it must be Service_Reset because it's
     * all we are interested in.
     */

    /* Do our thing if necessary and then die.
     */
    DoIt( pw );
	return NULL;
	
    NOT_USED( service );
    NOT_USED( r );
}


/*------------------------------------------------------------------------------
 * module_initialise
 *
 *      Module initialisation entry point.
 */
_kernel_oserror *
module_initialise( char *cmd_tail, int podule_base, void *pw )
{
    return AltsDown() ? NULL : ERROR( NOALTS );

    NOT_USED( cmd_tail );
    NOT_USED( podule_base );
    NOT_USED( pw );
}
