OmniClientÆ SWI interface specs			Revision 1.04, Nick 14/Mar/97
===============================			COMPANY CONFIDENTIAL

This draft is now reasonably stable. Client authors should check that they
have the latest versions of all relevant documents before starting work.
Please email comments to nas@ant.co.uk.

Changes
-------

14-03-97:
  495:  Status word for Omni_JobStatus is R4 not R3
 1002:  Status word for Get Print Job Info is R4 not R3
25-06-96:1.02 - 1.03:
  906:  Changes to OmniOp,8 - Get (inactive/not-connected) Mount Info
11-06-96:1.01 - 1.02:
  654:  Details of new domain logout OmniOp reason code 
 1047:  Tech. details of OmniOp,17 domain logout reason code    
03-06-96:1.000 - 1.01:
  146:  Marked site_id parameter to Omni_RegisterClient as obsolete
  617:  New section 'Network authentication' to describe domain logon
        for LAN Manager, Access+ and AppleTalk
10-02-95:0.999 - 1.00:
  374:  Major changes to user SWI Omni_Printers - more facilities,
        and different calling mechanism.
29-12-94:0.998 - 0.999:
  547:  Added new SWI Omni_NameLookup for name resolution.
21-12-94:0.997 - 0.998:
  665:  Marked OmniOp,Freespace as obsolete and unsupported.
16-12-94:0.996 - 0.997:
  121:  New flags added to SWI RegisterClient to support Acorn Access+
        network authentication model. Doesn't affect other protocols.
19-11-94:0.995 - 0.996:
  139:  Important change in behaviour when calling SWI RegisterClient 
        affecting all protocol modules
18-11-94:0.994 - 0.995:
  483:  SWI EnumerateJobs added to enumerate all print job identifiers
16-11-94:0.993 - 0.994:
  251:  SWI ConvertClientToAcorn & ConvertAcornToClient updated to include 
        required buffer sizes, optional buffers via NULL pointers, and case
        insensitive file extension matching.
14-11-94:0.992 - 0.993:
  209:  SWI MessageLookup now uses MessageTrans for shared error lookup, and
        so has '%0' for parameter substitution, now '%s'
04-11-94:0.991 - 0.992:
  286:  Mac date/time format finally added to SWI Omni_ConvertTime 
  191:  Updated Omni_MessageLookup spec to mention V flag state on exit
23-10-94:0.990 - 0.991:
  309:  Additional reason code added to SWI Omni_Printers,3
   11:  Better change documentation instigated due to popular demand
21-10-94:0.000 - 0.990:
  all:  Large number of poorly documented changes ;-(

Terminology
-----------

omni_base is the SWI chunk as allocated by Acorn.
err_base  is the error block as allocated for OmniClient by Acorn.
service   is the service call number as allocated by Acorn.
client_id is the SWI number (not chunk) provided by an OmniClient client
	  module when it registers with OmniClient using the SWI call
	  Omni_RegisterClient.
server_id is the *unique* 4-byte number, supplied by the client module, that
 	  is used as an identifier for a given server, irrespective of
 	  whether it is connected or not. The server_id MUST BE UNIQUE FOR
 	  A GIVEN CLIENT. This might be the server IP address, a pointer to
 	  a block of memory, or a 'counter' word that is incremented for
 	  each new server during the lifetime of the client module.
mount_id  is the *unique* 4-byte number, supplied by the client, that is
	  used as an identifier for a given mount connection, during
	  filer<->client communication. The mount_id MUST BE UNIQUE ACROSS
	  ALL CLIENTS, for the lifetime of that connected mount. The
	  suggested mechanism for ensuring uniqueness is for the mount_id
	  to be a pointer to a block of memory.
site_id   is the security license word, wired into each client module.
	  See document [Site_SpecN] for more details.
print_id  is the unique 4-byte number that is used as an indentifier to
	  client programs that wish to print of current print jobs. The
	  print_id word is allocated by OmniClient filer, and is guaranteed
	  to be unique until the job is explicitly cleared - see SWI calls.
pjob_id   is the unique 4-byte number that is used as an indentifier of
          current print jobs between OmniClient and protocol modules. The
          pjob_id word is allocated by the protocol module and MUST BE
          UNIQUE FOR A GIVEN CLIENT, until explicitly cleared - see OmniOp
          call.
client    refers to an OmniClient protocol module
filer     refers to the OmniClient module
server    a remote networked *machine*
mount     a mounting of a server, which may be the whole filing system, or
	  just part of the directory tree (eg, NFS)
strings	  except where stated otherwise, all text strings should be null-
	  terminated, stored statically so that their position in memory
	  doesnët change during the lifetime of the Client (client
	  registration -> client deregistration). ie, êCë îstaticï
          maximum lengths, where given, EXCLUDE the terminator character.


Acorn allocated constants
-------------------------

omni_base 0x004a200
err_base  0x080d100
service	  0x00000a0

OmniClient module task
----------------------

The OmniClient relocatable module provides the following SWI calls for use
by OmniClient protocol modules;

SWI omni_base+0 îOmni_EnumerateMountsï
	On entry, R0 = 0, for all client types
	             = client_id, for a single client
                  R1 = 0, for servers/mounts
                     = 1, for active mount connections
                     = 2, for printers
	All registers preserved on exit

	This SWI is used by clients to request that the filer re-enumerates
	all the mounts for a given client_id [!=0] or for all registered
	client_idës [=0].

 	This would be used, for example, when the client knows that the
 	state of the active mounts [R1 = 1] has changed. eg, a
 	command line *Dismount has been performed.
        If [R1 = 0], then the client knows that the list of servers and/or
        mounts exported by those servers has changed. eg, a periodic
        broadcast has noted that a new server has appeared.
        If [R1 = 2], then the client knows that the list of printers has
        changed.

SWI omni_base+1 îOmni_RegisterClientï
	On entry, R0 = client_id, (SWI xxxx_OmniOp)
	          R1 = client flags word;
	               	      bit 0 = 1, Client supports network filing system
	                            = 0, No filing system support
	               	      bit 1 = 1, UserID string required
	               	      bit 2 = 1, Password string required
	               	      bit 3 = 1, Mount path string required
	               	      bit 4 = 1, Authentication server string
	               	      bit 5 = 1, Mount name *not* required
	               	      bit 6 = 1, Special network authenticator
	           	      bit 7 = *reserved* zero
	               	      bit 8 = 1, Client supports network printers
	                            = 0, No printing support
	               	      bit 9 = 1, Printer password string required
	              	     bit 10 = 1, Needs file length before print job starts
	         	bits 11..15 = *reserved* zero
	         	bits 16..23 = ASCII extension character, or 0 for none
	               	bits 24..31 = *reserved* zero
	          R2 = sprite name ptr
	          R3 = client name ptr
	          R4 = client description ptr
	          R5 = site_id word (no longer used, set to 0)
	          R6 = filing system name ptr
	On exit,  R0 = 0, if successful
	             = error block (V set), on error
	All other registers preserved on exit

        This SWI is used when a client module is (re)started to register
        itself with OmniClient, and pass to the filer the facilities
        that it provides via the flags word.
        
        Revisions of this document prior to 0.996 stated that the correct
        behaviour was to register with this SWI only once. However, this has
        now changed so that protocol modules should attempt to (re)register
        when they startup and whenever they recieve Service_OmniAction. If
        the protocol is already registered, no error is returned.
        An error is returned if registration fails for whatever reason.

	The flags word (R1) lets the filer know which connect fields
	are *never* required by this client. Some clients can further
	reduce the number of fields required at a later time (see
	OmniOp 7). eg, LAN Manager. The flags word can also register a
	single ASCII character (eg, '.' or '/') which is used to
	separate filename and file extension in the filing system. This
	separator is used by the Omni_Convert SWI calls.

	Bit 5 of the flags word is set for filing systems (typically those 
	written before OmniClient) that have no concept of a user-supplied
	mount name, separate from the actual server name. When this bit is
	set, users will not be prompted for a mount name - it will be set
	to the mount path string (if it is set as required and is of non-zero
	length), or failing that the server name string. Note that when 
	returning the mount path string (eg, OmniOp,9) protocol modules 
	should return the appropriate string to allow Free operations, etc.
	This is the string that will appear under the iconbar, and if bit
	5 is set in the flags, the string will most likely either be
	the real server name, or the mount path. Hopefully most protocol
	module authors will never be required to understand this paragraph ;-)
	
	Bit 6 of the flags word is set for protocols that require a network
	authentication action before servers can be located (eg, Acorn Access+)
	See the below section entitled 'Network authentication' for more
	details.
	
	The sprite name ptr (R2) is a pointer to a null-terminated
	sprite name, which must exist in the Wimp sprite pool as
	êspriteë, along with the small version êspriteë postfix êsmë. eg,
	êspritesmë. The unique name for the client sprites (suggest the
	ASCII hex of the xxxx_MiscOp SWI number) must be no more than 6
	characters long. Static string. If normal and small size versions of
	these sprites exist with postfix ê_22ë then these hi-resolution
	sprites will be used in square pixel modes.

	The client name ptr (R3) is a pointer to a null-terminated text
	string, which should be a short format description of the client.
	eg, êBerkeley NFSë. It should be no more than 24 characters long.
	This string is used in filer menus and title bars. Static string.

	The client description ptr (R4) is a pointer to a null-terminated
	text string of the form ê<desc>|J<author>|J<version>ë. ie,
	3 lines of text (each line no longer than 32 chars), separated
	by ASCII 0x0a, and the whole string terminated by a null (0x00).
	This string is used in a filer êclient infoë window. Static string.
	The version string should be of the format 'n.nn (dd-mmm-yr)' eg,
	'1.23 (12-Sep-94)'.

	The site_id word (R5) (See document [Site_SpecN] for details)
	should be 0 if the client module provides its own site-license
	enforcement mechanism, or has no upper limit on the number of
	users.

	The filing system name ptr (R6) is the textual name of the filing
	system used by this protocol. eg, 'NetFS'.

        Errors returned include:
        err_base+0	"Protocol is already registered"
	err_base+1	"Bad protocol identifier value"
	err_base+2	"No free memory for protocol registration"

SWI omni_base+2 îOmni_DeregisterClientï
	On entry, R0 = client_id
        On exit,  R0 = 0, if deregistration successful
                     = not 0, if deregistration failed (error ptr)
	All other registers preserved on exit

        This SWI is the companion call to SWI Omni_RegisterClient, and
        releases the client from OmniClient.

        Errors returned include:
        err_base+3	"Protocol not registered"

SWI omni_base+3 îOmni_MessageLookupï
	On entry, R0 = message_id, (see table)
	          R1 = parameter string (if required)
        On exit,  R0 = error_blk, pointer to error block;
                       +0 = error number
                       $4 = null-terminated text string
                       The error (V) flag is set on exit
	All other registers preserved on exit

	This SWI provides for a shared set of common error/message
	blocks which can be used by client modules, irrespective of
	whether they are register with OmniClient.
	The text messages returned may be internationalised.
	NOTE do not rely on the maximum OmniClient error message
	being 16 - this list is subject to change and expansion.
	The filer does not guarantee to store error blocks statically.
	If you need the error block again, call this SWI.

	Errors list
	-----------

	0	err_base+0
                îNo connection to serverï
	1	err_base+1
 		îConnection to server '%0' brokenï
	2	err_base+2
 		îConnection already existsï
	3	err_base+3
 		îCannot find named server '%0'ï
	4	err_base+4
 		îServer out of file handlesï
	5	err_base+5
 		îFunction '%0' not implementedï
	6	err_base+6
 		îTimeout errorï
	7	err_base+7
 		îGeneral server error: %0ï
	8	err_base+8
 		îBad parametersï
	9	err_base+9
 		îMemory error - out of buffersï
	10	err_base+10
 		îOut of RISC OS handlesï
	11	err_base+11
 		îFile '%0' not foundï
	12	err_base+12
 		îDirectory '%0' not foundï
	13	err_base+13
 		îInsufficient accessï
	14	err_base+14
 		îFile already existsï
	15	err_base+15
 		îIncorrect passwordï
	16	err_base+16
 		îIllegal nameï
	>16	err_base+?
		îError not knownï

SWI omni_base+4 îOmni_ConvertClientToAcornï
	On entry, R0 = client_id
		  R1 = ptr to client-format leaf filename (inc. extension)
		  R2 = ptr to buffer for Acorn-format filename, or NULL
		  R3 = ptr to buffer for flags string, or NULL
	On exit,  R0 = Acorn-filetype, or -1 if not applicable
	All other registers preserved on exit

	This SWI performs client -> RISC OS leaf filename & file extension
	translations by using a user-configurable mappings file. The format
	of this file and the flags R3 result are described in another
	document. [File_SpecN]. The buffer R2 should be at least as large 
	as the client-format leaf filename passed in R1, although in practice
	RISC OS filenames are 10 characters maximum (+1 character terminator).
	The flags R3 buffer should be at least 8 chars in size. If either of
	R2 or R3 results are not required, then they should be passed as NULL
	(0).
	Note that this mapping SWI deals with mappings for multiple
	client types (not just DOS 8+3 format, for example), hence the need
	to pass in the calling client_id in R0. The client_id is used to
	find the details of the filename extension character, etc. which
	are provided by the client module when it registers.
	File extension translation uses a case-insensitive comparision
	routine.

SWI omni_base+5 îOmni_ConvertAcornToClientï
	On entry, R0 = client_id
		  R1 = ptr to acorn-format leaf filename
		  R2 = ptr to buffer for client-format filename, or NULL
		       (including extension)
		  R3 = ptr to buffer for flags string, or NULL
	          R4 = Acorn-filetype, or -1 if not typed
	All registers preserved on exit

	This SWI performs RISC OS -> client leaf filename & file extension
	translations by using a user-configurable mappings file. The format
	of this file and the flags R3 result are described in another
	document. [File_SpecN]. The buffer R2 should be as large as the maximum
	possible client-format leaf filename, although in practice 31
	characters (+1 character terminator) should be enough. The flags R3
	buffer should be at least 8 chars in size. If either of R2 or R3
	results are not required, then they should be passed as NULL (0).
	Note that this mapping SWI deals with mappings for multiple
	client types (not just DOS 8+3 format, for example), hence the need
	to pass in the calling client_id in R0. The client_id is used to
	find the details of the filename extension character, etc. which
	are provided by the client module when it registers.

SWI omni_base+6 îOmni_ConvertTimeï
	On entry, R0 = time formats;
		       bits 0..3 = source format
		       bits 4..7 = destination format;
		         0 = RISC OS, 5 byte, csec from 00:00 1st Jan 1900
		         1 = UNIX, 4 byte, sec from 00:00 1st Jan 1970
		         2 = DOS, 4 byte, sec from 00:00 1st Jan 1980
		         3 = Mac, 4 byte, signed sec from 00:00 1st Jan 2000
		         4 = Generic, 28 bytes (see below)
		        >4 = *reserved*
		       bits 8..31 = *reserved* zero
		  R1 = *pointer* to source time block
		  R2 = *pointer* to destination time buffer
	All registers preserved on exit

	This SWI performs file timestamp conversions between any
	combination of supported system time formats. All conversions are
	performed in the local time zone - client modules are welcome to
	perform their own adjustments for remote servers in a different time
	zone ...

        The generic time format is the same as that used by SWI Territory_
        ConvertOrdinalsToTime (PRM 3-819):

        	+00	centiseconds, 00-99
        	+04	seconds, 00-59
        	+08	minutes, 00-59
        	+12	hours, 00-23
        	+16	day number in month, 1-31
        	+20	month number in year, 1-12
        	+24	year number, 1900-2050

SWI omni_base+7 "Omni_Printers"
        On entry, R0 = reason code;
                        0 = list protocols supporting printers
                        1 = list protocol (FS names) supporting printers
                        2 = protocol print flags for protocol in R1
                       16 = list printer servers for protocol in R1
                       17 = list printers for protocol/server in R1/R2
                       18 = list all printers for protocol in R1
                  R1 = ptr to name of protocol (R0 = 2,16,17,18)
                  R2 = ptr to name of server for printers (R0 = 17)
                  R3 = ptr to buffer to fill with result string, or NULL
                  R4 = size of buffer in bytes, or -1 if not known 
        On exit,  R0 = protocol printing-support flags word (R0 = 2)
        	  R4 = size of buffer required for result string
	All other registers preserved on exit

        This SWI provides information about printer support in OmniClient.
        Currently the reason codes (R0=0,1,16,17,18) return a result string
        into a user buffer supplied as R3. It is expected that this is
        done as a 2-stage process to ensure that a large-enough buffer
        exists for the result string.
        
        The SWI is firstly called with R3=NULL,R4=-1, and the call returns
        with R4 containing the total size of buffer required (including 
        terminator). The buffer is allocated by the caller, and then the
        SWI is called the second time, with the new R3/R4.
        If no items are available, then R4=0 is returned.

        If R0 = 0, then the menu string contains the available protocol
        names that are registered as supporting printers. eg, "Acorn NFS,
        Acorn NetFS, ANT RemoteFS". R0 = 1 returns the same menu string,
        but with filing system names rather than full client descriptions.
        eg, "NFS, NetFS, RemoteFS".

	If R0 = 2, then the protocol printing-support flags word for the
	protocol named in R1 is returned. The flags word is of the format;

		bit 0 = 1, Client supports network printers
	              = 0, No printing support
	        bit 1 = 1, Password string required
	        bit 2 = 1, Needs file length before print job starts
	   bits 3..31 = *reserved* zero

        If R0 = 16, then the menu string contains the servers exported
        by the protocol named in R1. eg, "laser.net, print.cl".

        If R0 = 17, then the menu string contains the printers exported
        by the protocol named in R1, available as printers from the server
        named in R2. eg, "LibraryDM, Laser 600".

        If R0 = 18, then the menu string contains all the printers exported
        by the protocol named in R1. eg, "NetLaser, LibraryDM, Laser 600".
        This reason code lists all the printers available, irrespective of
        which network server they are connected to.

SWI omni_base+8 "Omni_CreateJob"
	On entry, R0 = ptr to protocol name
	          R1 = ptr to server name
	          R2 = ptr to printer name
	          R3 = ptr to user name, or NULL
	          R4 = ptr to password string, or NULL
                  R5 = ptr to options string, or NULL
                  R6 = size of print job (bytes), or 0 if not known
        On exit,  R0 = print_id of new job, if successful
                     = error block (V set), on error
	All other registers preserved on exit

        Submit a new job for network printing. Returns a unique 'print_id'
        word, or a pointer to an error block.

        The protocol name (R0) is the name as provided by SWI Omni_Printers
        (and registered as the 'client name'). eg, "Sun NFS". The user name,
        password and options string are optional, and may be NULL pointers.

        Some printing protocols require that the total size of the job is
        known before printing starts. If this is the case, they should be
        registered with OmniClient as requiring this. When a client
        program calls SWI Omni_PrinterInfo, reason code 2, it can determine
        whether a password field is required for this protocol, and whether
        the total size of the print job is required.

SWI omni_base+9 "Omni_SendJob"
	On entry, R0 = print_id
		  R1 = ptr to data block to send
		  R2 = size of data block to send
	On exit,  R2 = number of bytes not sent, or 0 for all done
	All other registers preserved on exit

        Send a block of data down network printer stream for a given active
        print_id word.

SWI omni_base+10 "Omni_EndJob"
	On entry, R0 = print_id
	All registers preserved on exit

        End a specified print job normally (ie, all data transmitted).

SWI omni_base+11 "Omni_AbortJob"
	On entry, R0 = print_id, or
		     = 0, to abort all jobs
	All registers preserved on exit

        Abort a specified print job, or all current jobs.

SWI omni_base+12 "Omni_JobStatus"
	On entry, R0 = print_id
	On exit,  R0 = preserved
		  R1 = local job status word (see below)
		  R2 = local job # bytes sent
		  R3 = error/status block ptr, or 0
		  R4 = remote job status word (see below)
		  R5 = remote job # bytes printed
		  R6 = error/status block ptr, or 0
	All other registers preserved on exit

        Get information on a specified print job. The status
        word (R1, R4) is currently defined as;

        	bit 0 = 0, no status available
        	      = 1, status information available
       	    bits 1..3 = 0, pending connection
       	    	      = 1, connection made, waiting for initial data
       	              = 2, sending bytes
       	              = 3, transfer complete
       	              = 4, job marked as temporary error
       	              = 5, job marked as terminal error
       	              =>5, *reserved*
	   bits 4..31 = *reserved* zero

SWI omni_base+13 "Omni_ClearJob"
	On entry, R0 = print_id, or
		     = 0, to clear all inactive jobs
	All registers preserved on exit

        Clear a specified print job, or all current inactive jobs. It is
        important to make this call once the client program has finished
        with the print job, and will no longer be calling Omni_JobStatus.
        eg, once it has marked the job as having been completed or having a
        terminal error. The status of a print job will reside in memory
        forever if this call is not made.

SWI omni_base+14 "Omni_PrinterInfo"
        On entry, R0 = ptr to name of protocol for printer
                  R1 = ptr to name of server
                  R2 = ptr to name of printer
        On exit,  R0 = flags word, or 0 if not available
	All other registers preserved on exit

        This SWI provides information about the facilities provided by a
        named printer. If information is not available then 0 is returned,
        or if the printer name is not valid, an error block ptr is returned.

        The flags word,is a set of bit fields that describe the printer type
  	and facilities provided (see PRM 3-595);

             	bit 0 = 1, Facilities information available,
                      = 0, information not available
            bits 1..7 = *reserved* zero
	        bit 8 = 1, Raw ASCII text
                bit 9 = 1, Postscript compatible
               bit 10 = 1, Epson FX80 or compatible
               bit 11 = 1, HP Laserjet or compatible
               bit 12 = 1, Integrex Colourjet
               bit 13 = 1, FAX modem
               bit 14 = 1, Direct drive laser printer
               bit 15 = 1, Caspel graphics language
               bit 16 = 1, PDumper interface
               bit 17 = 1, TeX 'DVI' files
               bit 18 = 1, Epson JX/Star LC10, HP Paintjet
          bits 19..31 = *reserved* zero

SWI omni_base+15 "Omni_EnumerateJobs"
	On entry, R1 = ptr to buffer for job list (word aligned)
	          R2 = size of buffer (words * 4)
	          R3 = 0, start enumerating jobs
	               not 0, continue enumerating jobs
	On exit,  R1 = ptr to next free byte in buffer, word aligned
	          R3 = 0, operation complete
	               not 0, buffer full, call again with this R3
	All other registers preserved on exit

	This SWI enumerates all printer jobs that OmniClient knows about,
	returning a list of their print_id values in consecutive words of
	the supplied buffer, until the buffer is full or the enumeration is
	complete. This allows printer managment applications to gain access
	to print_id handles of jobs even if they were started using the
	OmniPrint filing system, or by another application using SWI
	Omni_CreateJob.
       
	If R3 is not 0 on exit, then the enumeration is not complete
	(buffer full), and the reason code is called again with the
	new R3 value. This process continues until the enumeration
	is complete.

SWI omni_base+16 "Omni_NameLookup"
        On entry, R0 = reason code;
                        0 = get internet host by name
                        1 = get internet service by name/protocol
                       >1 = *reserved*
                  R1 = ptr to name of host (R0=0) or service (R0=1)
                  R2 = ptr to name of protocol (R0=1)
        On exit,  R0 = ptr to hostent (R0=0) or servent (R0=1) struct's 
	All other registers preserved on exit

	This SWI exists as an interface to the Internet name lookup
	facilities, for those protocol modules that do not wish to use the
	Acorn-provided 'inetlib' library, either for space reasons or 
	because they cannot easily link in the library (eg, the protocol
	module is written entirely in assembler).

	Parameters and return results are exactly as the Berkeley standard
	gethostbyname(char *name) and getservbyname(char *name, char *proto)
	functions.


The OmniClient relocatable module also provides the following Service call,
which should be acted upon by OmniClient modules, but not claimed;

SERVICE service+0 "Service_OmniAction"
	On entry, R0 = action word;
		        0 = OmniClient module has just started up
		        1 = OmniClient module has died or quit due to "Death"
			    packet (see document [Site_SpecN])
		       >1 = *reserved*
		  R1 = Service_OmniAction
	All registers preserved on exit

	This Service call is used to inform client modules that the desktop
	filer has just been run, or just been killed. Appropriate action
	when (R0 = 0) is to call the SWI Omni_RegisterClient, to register
	themselves in the case where the OmniClient module is loaded *after*
	the client modules.
        Upon reception of (R0 = 1), it is *required* of clients that they
        close down any open files, abort any file transfer operations,
        and then die. This is to ensure that users do not lose any data
        as a result of running more copies than they are licensed to use.
        (see document [Site_SpecN] for more details).
        Since client modules rely on services provided by the filer module,
        they should quit if the filer module dies for any reason.


Network authentication ("Domain Login")
----------------------

Some network filing systems, notably LAN Manager, Acorn Access+ and 
AppleTalk require the concept of authenticating the user to a virtual network
domain (that may cover a number of servers or mounts), after which no
additional usernames or passwords are required to connect to  the mounts in
that domain.

OmniClient wasn't designed with this authentication model in mind, and so the
following scheme for supporting it isn't ideal.

Protocol modules should register twice with OmniClient - once as a network
authentication protocol (which must have a unique 'client name' passed in R3)
by setting bit 6 of the flag word during registration. This means such 
protocol modules provide 2 support SWIs - one for the authentication 
protocol, and one for normal operation.

The protocol module provides a 'dummy' network server, which the user
'mounts' with their user name/password. The mount operation is passed onto
the protocol module as normal, but because there is no real connection, the
mount should not be returned via enumerate active mounts calls, and no icon
will appear on the  iconbar. A non-zero mount_id should be returned however
to indicate that the network authentication was successful (any non-zero
value will be fine as it will be ignored by OmniClient). The protocol module
can then perform its network authentication and enumerate those new servers
that it can access, serving them to OmniClient VIA THE NORMAL PROTOCOL.

The user interface presents a different login dbox for this type of protocol:
no mount name is required, and there are up to 3 fields that the user can
fill in;

  - Server/domain name (if bit 4 is set)
  - UserID string (if bit 1 is set)
  - Password string (if bit 2 is set)

Domain logout is provided by a new OmniOp reason code which will be called
by OmniClient in a 'reset' operation. After all active mounts have been
disconnected, there is the option to logout of any domains on any protocols
that support this. Protocol modules should support this new OmniOp call
if appropriate.


OmniClient modules
------------------

An OmniClient module (eg, LAN Manager, Berkeley NFS, etc) provides a single
support SWI, the number of which is passed to the OmniClient in the SWI
Omni_RegisterClient. See the OmniClient SWI interface for details of how
client modules should behave.

In the case where client modules have been loaded before the core OmniClient
module, they should remain dormant (refusing SWI calls and *commands) until
they receive the Service_OmniAction, 0 service call. This serves the dual
purpose of being part of the site-licensing mechanism (see document
[Site_SpecN]), and ensures that client modules don't try and use other
OmniClient facilities (for example, Omni_MessageLookup) without the module
being present.

When scanning for mounts (almost certain to be a lengthy process), it is
better to return immediately with no mounts found, flag the request, and
scan for mounts as a background process. When mounts are found, force the
filer to ask again with the Omni_EnumerateMounts SWI call. This results in
the user having mounts appear in their mount window either gradually (one at
a time), or better, as a block after, say 30 seconds. Once the client has a
complete list of available mounts it should maintain it periodically so that
future requests for a list of mounts can be returned instantly.

It may be the case that not all client modules can provide this service
of scanning for available servers or mounts, because it is impossible given
the protocol framework that they run in. If that is the case, then they
should simply return immediately with no mounts found.

There are a number of printer-support reason codes - these should never be
called if the protocol has registered itself as only supporting file
operations, and not printing.


SWI client_id+0 îXXXX_OmniOpï
	On entry, R0 = reason code;
			0 = Mount
			1 = Dismount
			2 = Free
			3 = Enumerate servers
			4 = Enumerate mounts on a server
			5 = Enumerate active mounts
			6 = Open Root
			7 = Open User Root
			8 = Get (inactive/not-connected) Mount Info
	 		9 = Get (active/connected) Mount Info
		       10 = Create Print Job
	               11 = Send data in Print Job
	               12 = End Print Job
	               13 = Abort Print Job(s)
	               14 = Get Print Job Info
		       15 = Clear Print Job(s)
		       16 = Enumerate printers
		       17 = Domain logout
                      >17 = *reserved*
                  Other registers as required for given reason code
        On exit,  Registers set as required for given reason code
	All other registers preserved on exit

        This SWI provides an entry point for the OmniClient to call
        individual client modules that have registered with it.

	Reason code 0 - Mount server
        	On entry, R1 = ptr to Server string
        		  R2 = ptr to UserID string (optional)
        		  R3 = ptr to Password string (optional)
        		  R4 = ptr to Mount name string
        		  R5 = ptr to Mount path string (optional)
        		  R6 = ptr to Authentication server str (optional)
		On exit,  R1 = mount_id, or 0 if failed

		Operation to mount a server (in fact a given êmountë on a
		particular server).
		Strings are null terminated. Pointers are 0 if fields
		are not required for a given Client module. Strings not
		guaranteed by caller to be static across multiple calls.
		See comments about unique mount_idës in êTerminologyë
		section above.
                The Server string (R1) should be the 'full name' as supplied
                by OmniOp reason code 3 (Enumerate all servers).

	Reason code 1 - Dismount server
		On entry, R1 = mount_id

		Operation to dismount a previously mounted server (in fact a
		given êmountë on a particular server).

	Reason code 2 - Freespace on mount [ *** NOT CURRENTLY USED *** ]
		On entry, R1 = mount_id
		On exit,  R1 = user free space on mount (bytes)
		          R2 = user used space on mount (bytes)
		          R3 = total size of mount (bytes)

		This reason code is not currently used by OmniClient, and
		can be considered obsolete - protocol module authors do not
		need to support it - just return 0, or an error.

		Returns freespace. Numbers are unsigned 32-bit integers. If
		any value is greater than (2^32 - 1) (=4Gbytes!) then simply
		return the maximum (0xFFFFFFFF).
                The exact interpretation of 'user freespace' and 'total
                size' is client dependent, however R1+R2 should be less than
                or equal to R3, typically.
                If the mount is read-only, then the client may return 0
                bytes user free space.
                Note that the filing system (or support module) must register
                itself with the RISC OS Free module using SWI Free_Register,
                as well as supporting this OmniOp reason code.

	Reason code 3 - Enumerate all servers on network
		On entry, R1 = ptr to buffer for servers list (word aligned)
		          R2 = size of buffer (words * 4)
		          R3 = 0, start enumerating servers
		               not 0, continue enumerating servers
		On exit,  R1 = ptr to next free byte in buffer, word aligned
		          R3 = 0, operation complete
		               not 0, buffer full, call again with this R3

		Operation scans visible network and returns block filled
		with Server records for every possible server, in the
		following format;

		+0	server_id
		$4	shortname (no more than 24 characters, 0-terminated)
			fullname (no more than 64 characters, 0-terminated)
			description (additional string, <= 48 chars)

		+n	server_id
		$n+4	shortname/fullname/description
		...

		Where n is the number of bytes, aligned upwards to a word
		boundary.

		êshortnameë is a short description of the server for Large
		and Small icon filer displays. eg, îserverï
		êfullnameë is a full description of the server for Full info
		filer displays. eg, îserver.subnet.netï
                êdescriptionë is a multi-field text string for tacking on
                the end of Full info filer displays. It should consist of
                three strings, ASCII 0x0a separated, of the form;

                  netaddress (18 chars max, eg. "128.65.4.99")
                  machine    (16 chars max, eg. "SunOS UNIX")
                  version    (8 chars max, eg. "4.1.1")

                So for example, "128.65.4.99|JSunOS UNIX|J4.1.1".

		If R3 is not 0 on exit, then the enumeration is not complete
		(buffer full), and the reason code is called again with the
		new R3 value. This process continues until the enumeration
		is complete.

	Reason code 4 - Enumerate all mounts on a server
		On entry, R1 = ptr to buffer for mounts list, word aligned
		          R2 = size of buffer (words * 4)
		          R3 = 0, start enumerating mounts
		               not 0, continue enumerating mounts
		          R4 = server_id (or 0 if not known)
		          R5 = ptr to Server name, or 0
		On exit,  R1 = ptr to next free byte in buffer, word aligned
		          R3 = 0, operation complete
		               not 0, buffer full, call again with this R3

		Operation scans visible network and returns block filled
		with Mount records for every possible mount on the given
		server, in the following format;

		+0	mount_id (or 0 if not connected)
		$4	shortname (no more than 24 characters, 0-terminated)
			fullname (no more than 64 characters, 0-terminated)

		+n	mount_id
		$n+4	shortname/fullname
		...

		Where n is the number of bytes, aligned upwards to a word
		boundary.

		êshortnameë is a short description of the mount for Large
		and Small icon filer displays. eg, îleafdirï
		êfullnameë is a full description of the mount for Full info
		filer displays. eg, îdir1.dir2.leafdirï

		If R3 is not 0 on exit, then the enumeration is not complete
		(buffer full), and the reason code is called again with the
		new R3 value. This process continues until the enumeration
		is complete.

		If the server_id (R4) is not known, R4 should be passed as
		0, and R5 is a ptr to the Server name ('full name' as per
		reason code 0 & 3).

	Reason code 5 - Enumerate active (connected) mounts
		On entry, R1 = ptr to buffer for mounts list, word aligned
		          R2 = size of buffer (words * 4)
		          R3 = 0, start enumerating mounts
		               not 0, continue enumerating mounts
		On exit,  R1 = ptr to next free byte in buffer, word aligned
		          R3 = 0, operation complete
		               not 0, buffer full, call again with this R3

		Operation returns buffer filled with Mount records for every
		active (connected) mount, in the following format;

		+0	server_id
		+4	mount_id
		$8 	mount name (no more than 16 chars, 0-terminated)

		+n	server_id
		...

		Where n is the number of bytes, aligned upwards to a word
		boundary.

		'mount name' is the mount name, as passed in the Mount
		(reason code = 0) OmniOp SWI call. Note that this is NOT the
		same as either of the short/fullnames passed back by reason
		code 4 (Enumerate mounts).

		If R3 is not 0 on exit, then the enumeration is not complete
		(buffer full), and the reason code is called again with the
		new R3 value. This process continues until the enumeration
		is complete.

	Reason code 6 - Open Root of mount
		On entry, R1 = mount_id

		Trigger a Filer_OpenDir on the highest point available
		in mountës visible directory tree. eg, ê$ë. This may be done
		in a number of ways, including:
		  SWI XOS_CLI,"Filer_OpenDir blah::$", or by
		  broadcasting the Wimp message Message_FilerOpenDir (&400)

	Reason code 7 - Open User Root of mount
		On entry, R1 = mount_id

		Trigger a Filer_OpenDir on the current userës êhomeë
		directory, or the highest point available in mountës
		visible directory tree if not applicable. eg, ê/homes/nasë
		or ê$ë. This may be done in a number of ways, including:
		  SWI XOS_CLI,"Filer_OpenDir blah::$", or by
		  broadcasting the Wimp message Message_FilerOpenDir (&400)

	Reason code 8 - Get (inactive/not-connected) Mount Info
		On entry, R1 = server_id (of server about to connect to)
			  R2 = ptr to Mount path string (or NULL if none)
		On exit,  R1 = temporary client flags word;
			       (see Omni_RegisterClient), particularly:
			       bit 1 = 1, mount does need User identifier
			       bit 2 = 1, mount does need Password string

		This reason code allows for the possibility of changing
		authentication requirements once a mount to a given server
		or a network authentication is made. Some clients (eg,
		LAN Manager) allow unauthenticated new mounts, once a
		network authentication is performed.
		
		This is primarily used to reduce the need to popup dialogue
		boxes prompting for username & password if all other fields
		required are already filled or defaulted. eg, from a scan
		of mounts on a server.
		
		Protocols that do not need to support this call should 
		return an error.

	Reason code 9 - Get (active/connected) Mount Info
		On entry, R1 = mount_id (of active mount)
		On exit,  R1 = ptr to Server string
        		  R2 = ptr to UserID string
        		  R3 = ptr to Mount name string
        		  R4 = ptr to Mount path string
        		  R5 = ptr to Authentication server string
        		  R6 = server_id

		Operation to get information about an active mount.
		Strings are null terminated. Pointers are 0 if fields
		are not available for a given mount. Strings do not need to
		be guaranteed to be static across multiple calls.
                The Server string (R1) should be the 'full name' as supplied
                by OmniOp reason code 3 (Enumerate all servers).

	Reason code 10 - Create Print Job
		On entry, R1 = ptr to server name
	                  R2 = ptr to printer name
	                  R3 = ptr to user name, or NULL
	                  R4 = ptr to password string, or NULL
	                  R5 = ptr to options string, or NULL
			  R6 = size of print job (bytes), or 0 if not known
		On exit,  R1 = pjob_id, or 0 if failed
		All other registers preserved on exit

        	Submit a new job for network printing. The user name,
        	password and options string are optional, and may be NULL
        	pointers. See comments about unique pjob_idës in êTerminologyë
		section above.

                Some printing protocols require that the total size of the
                job is known before printing starts. If this is the case, they
                should be registered with OmniClient as requiring this.

	Reason code 11 - Send data in Print Job
		On entry, R1 = pjob_id
		          R2 = ptr to data block to send
		          R3 = size of data block to send
		On exit,  R3 = number of bytes not sent, or 0 for all done
		All other registers preserved on exit

        	Send a block of data down network printer stream for a given
        	active pjob_id word.

	Reason code 12 - End Print Job
		On entry, R1 = pjob_id
		All registers preserved on exit

        	End a specified print job normally (ie, all data
        	transmitted).

	Reason code 13 - Abort Print Job(s)
		On entry, R1 = pjob_id, or
		             = 0, to abort all jobs
		All registers preserved on exit

        	Abort a specified print job, or all current jobs.

	Reason code 14 - Get Print Job Info
		On entry, R1 = pjob_id
		On exit,  R1 = local job status word
			  R2 = local job # bytes sent
			  R3 = error/status block ptr, or 0
			  R4 = remote job status word
			  R5 = remote job # bytes printed
			  R6 = error/status block ptr, or 0
		All other registers preserved on exit

        	Get information on a specified print job. The status word
        	(R1, R4) is defined above in SWI Omni_JobStatus.

	Reason code 15 - Clear Print Job(s)
		On entry, R1 = pjob_id, or
		             = 0, to clear all inactive jobs
		All registers preserved on exit

        	Clear a specified print job, or all inactive jobs. OmniClient
        	will make this call when the print job submitter indicates,
        	by calling SWI Omni_ClearJob, longer requires status information
        	about that job. The status of a print job should reside in
        	memory forever if this reason code is not called.
                'Inactive' in this case means either 'transfer complete' (3) or
                'job has terminal error' (5).

	Reason code 16 - Enumerate all printers on network
		On entry, R1 = ptr to buffer for printers list (word aligned)
		          R2 = size of buffer (words * 4)
		          R3 = 0, start enumerating printers
		               not 0, continue enumerating printers
		On exit,  R1 = ptr to next free byte in buffer, word aligned
		          R3 = 0, operation complete
		               not 0, buffer full, call again with this R3

		Operation scans visible network and returns block filled
		with Printer records for every possible printer, in the
		following format;

		+0	flags word (see below)
		$4	printer (no more than 24 chars, 0-terminated)
                        server (no more than 64 chars, 0-terminated)

		+n	flags
		$n+4	name
		...

		Where n is the number of bytes, aligned upwards to a word
		boundary.

		êprinterë is a description of the printer for Large/Small and
		Full info filer displays. eg, îlaser printerï.
		êserverë is a full description of the server, as returned by
		OmniOp 3. eg, îserver.subnet.netï
                êflagsë is a set of bit fields that describe the printer type
                and facilities provided (see PRM 3-595, SWI Omni_PrinterInfo).

                In the case where the printer sits directly upon a network,
                with no server, it should give a 'dummy' server name the
                same as the printer name.

		If R3 is not 0 on exit, then the enumeration is not complete
		(buffer full), and the reason code is called again with the
		new R3 value. This process continues until the enumeration
		is complete.

	Reason code 17 - Log out of any network domains
		All registers preserved on exit

		Log out of any active network domains (see above section
		'Network authentication') - only called if the protocol
		has registered as a 'Special network authenticator'. This
		should force server enumeration by calling SWI
		"Omni_EnumerateMounts" so that the user has a visual
		indication of logging out of the domain.
			 

nas@ant.co.uk
---
Document ends

