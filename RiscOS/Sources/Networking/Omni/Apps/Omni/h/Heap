/*
 * Title:   heap.h
 * Purpose: provide malloc-style heap allocation in a flex block
 *
 */

#ifndef __heap_h
#define __heap_h

/* Free pointer macro */
#define FREE(ptr) if (ptr != NULL) { heap_free(ptr); ptr = NULL; }
#define RMAFREE(ptr) if (ptr != NULL) { rma_free(ptr); ptr = NULL; }


/* ---------------------------- heap_init ----------------------------------
 * Description:   Initialises the heap allocation system.
 *
 * Returns:       void.
 * Other Info:    You must call flex_init before calling this routine.
 *
 */

#define heap_init()	((void) 0)


/* ---------------------------- heap_alloc ---------------------------------
 * Description:   Allocates a block of storage from the heap.
 *
 * Parameters:    unsigned int size -- size of block to be allocated
 * Returns:       pointer to allocated block (or 0 if failed).
 * Other Info:    This uses the flex module to allocate wimp-supplied heap
 *                space. If the heap moves as the result of an extension
 *                or flex can't extend the heap then 0 is returned.
 *
 */

#define heap_alloc(size)	malloc(size)
extern void *rma_alloc(int size);


/* --------------------------- heap_realloc --------------------------------
 * Description:   (Re-)allocates a block of storage from the heap.
 *
 * Parameters:    void *heapptr -- pointer to block to be extended
 *		  unsigned int size -- new size of block to be allocated
 * Returns:       pointer to allocated block (or 0 if failed).
 * Other Info:    This uses the flex module to allocate wimp-supplied heap
 *                space. If the heap moves as the result of an extension
 *                or flex can't extend the heap then 0 is returned.
 *
 */

#define heap_realloc(ptr, size)	realloc(ptr, size)


/* ---------------------------- heap_free ----------------------------------
 * Description:   Free previously allocated block of heap storage.
 *
 * Parameters:    void *heapptr -- pointer to block to be freed
 * Returns:       possible error condition.
 * Other Info:    none.
 *
 */

#define heap_free(ptr)		free(ptr)
extern rma_free(void *ptr);


#endif
/* end of heap.h */
