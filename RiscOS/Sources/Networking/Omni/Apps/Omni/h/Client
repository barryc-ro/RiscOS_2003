#ifndef Omni_Client_h
#define Omni_Client_h

/*
 * Client.h
 * Main header file for !Omni application - part of the OmniClient project
 */

#include <Desk/Menu.h>

#include "Filer.h"

extern client_record *ClientCreate(_kernel_swi_regs *r);
extern void ClientDelete(client_record *cr);
extern int ClientCount(void);
extern client_record *ClientFind(int client_id, char *name, int menuitem, char *fsname);
extern Desk_menu_ptr ClientMakeMenu(Desk_menu_ptr oldmenu);
extern Desk_menu_ptr ClientMakeInfoMenu(Desk_menu_ptr oldmenu);

extern _kernel_oserror *ClientMount (int           client_id,
                                     const char *  server,
                                     const char *  user,
                                     const char *  pw,
                                     const char *  mount,
                                     const char *  path,
                                     const char *  auth,
                                     int *         mount_id);

extern _kernel_oserror *ClientDismount (int  client_id,
                                        int  mount_id);

extern _kernel_oserror *ClientEnumerateServers (int           client_id,
                                                char *        buffer,
                                                unsigned int  buffer_size,
                                                int           context,
                                                char **       buffer_out,
                                                int *         context_out);

extern _kernel_oserror *ClientEnumerateServerMounts (int           client_id,
                                                     char *        buffer,
                                                     unsigned int  buffer_size,
                                                     int           context,
                                                     int           server_id,
                                                     char *        server_name,
                                                     char **       buffer_out,
                                                     int *         context_out);

extern _kernel_oserror *ClientEnumerateActiveMounts (int           client_id,
                                                     char *        buffer,
                                                     unsigned int  buffer_size,
                                                     int           context,
                                                     char **       buffer_out,
                                                     int  *        context_out);

extern _kernel_oserror *ClientOpenRoot (int  client_id,
                                        int  mount_id);

extern _kernel_oserror *ClientOpenUserRoot (int  client_id,
                                            int  mount_id);

extern _kernel_oserror *ClientGetInactiveMountInfo (int     client_id,
                                                    int     server_id,
                                                    char *  mount_path,
                                                    int *   flags);

extern _kernel_oserror *ClientGetActiveMountInfo (int      client_id,
                                                  int      mount_id,
                                                  char **  server,
                                                  char **  user,
                                                  char **  mount,
                                                  char **  path,
                                                  char **  auth,
                                                  int *    server_id);

extern _kernel_oserror *ClientCreatePrintJob (int             client_id,
                                              const char *    server_name,
                                              const char *    printer_name,
                                              const char *    user_name,
                                              const char *    password,
                                              const char *    options,
                                              unsigned int    size,
                                              int *           pjob_id);

extern _kernel_oserror *ClientSendPrintData (int             client_id,
                                             int             pjob_id,
                                             char *          data,
                                             unsigned int    size,
                                             unsigned int *  remaining);

extern _kernel_oserror *ClientEndPrintJob (int  client_id,
                                           int  pjob_id);

extern _kernel_oserror *ClientAbortPrintJobs (int  client_id,
                                              int  pjob_id);

extern _kernel_oserror *ClientGetPrintJobInfo (int             client_id,
                                               int             pjob_id,
                                               unsigned int *  local_status,
                                               unsigned int *  local_bytes_sent,
                                               void **         locl_err_status_ptr,
                                               unsigned int *  remote_status,
                                               unsigned int *  remote_bytes_sent,
                                               void **         remote_err_status_ptr);

extern _kernel_oserror *ClientClearPrintJobs (int  client_id,
                                              int  pjob_id);

extern _kernel_oserror *ClientEnumeratePrinters (int           client_id,
                                                 char *        buffer,
                                                 unsigned int  buffer_size,
                                                 int           context,
                                                 char **       buffer_out,
                                                 int  *        context_out);

extern _kernel_oserror *ClientDomainLogout (int  client_id);

#endif
