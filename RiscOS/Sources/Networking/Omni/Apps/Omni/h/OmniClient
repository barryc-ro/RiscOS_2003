/*
 * Created by cmhg vsn 5.30 [15 Nov 1999]
 */

#ifndef __cmhg_OmniClient_h
#define __cmhg_OmniClient_h

#ifndef __kernel_h
#include "kernel.h"
#endif

#define CMHG_VERSION 530

#define Module_Title                     "OmniClient"
#define Module_Help                      "OmniClient"
#define Module_VersionString             "2.04"
#define Module_VersionNumber             204
#ifndef Module_Date
#define Module_Date                      "10 Nov 1999"
#endif


/*
 * Start code
 * ==========
 *
 * Entered in user-mode with argc and argv
 * set up as for any other application. Malloc
 * obtains storage from application workspace.
 */
int main(int argc, char *argv[]);


/*
 * Initialisation code
 * ===================
 *
 * Return NULL if your initialisation succeeds; otherwise return a pointer
 * to an error block. cmd_tail points to the string of arguments with which
 * the module is invoked (may be "", and is control-terminated, not zero
 * terminated).
 * podule_base is 0 unless the code has been invoked from a podule.
 * pw is the 'R12' value established by module initialisation. You may
 * assume nothing about its value (in fact it points to some RMA space
 * claimed and used by the module veneers). All you may do is pass it back
 * for your module veneers via an intermediary such as SWI OS_CallEvery
 * (use _swix() to issue the SWI call).
 */
_kernel_oserror *fs_initialise(const char *cmd_tail, int podule_base, void *pw);


/*
 * Service call handler
 * ====================
 *
 * Return values should be poked directly into r->r[n]; the right
 * value/register to use depends on the service number (see the relevant
 * RISC OS Programmer's Reference Manual section for details).
 * pw is the private word (the 'R12' value).
 */
void fs_service(int service_number, _kernel_swi_regs *r, void *pw);


/*
 * Command handler
 * ===============
 *
 * If cmd_no identifies a command, then arg_string gives the command tail
 * (which you may not overwrite), and argc is the number of parameters.
 * Return NULL if the command has been successfully handled; otherwise
 * return a pointer to an error block describing the failure (in this
 * case, the veneer code will set the 'V' bit).
 *
 * If cmd_no identifies a *Help entry, then arg_string denotes a buffer
 * that you can assemble your output into. cmd_handler must return
 * NULL, an error pointer or help_PRINT_BUFFER (if help_PRINT_BUFFER)
 * is returned, the zero-terminated buffer will be printed).
 *
 * If cmd_no identifies a *Configure option, then arg_string gives the
 * command tail, and argc the number of parameters. Return NULL, an error
 * pointer, or one of the four special values defined below. If arg_string
 * is set to arg_CONFIGURE_SYNTAX, the user has typed *Configure with no
 * parameter; simply print your syntax string. If arg_string is set to
 * arg_STATUS, print your current configured status. Otherwise use
 * arg_string and argc to set the *Configure option.
 *
 * pw is the private word pointer ('R12') value passed into the entry
 * veneer
 */
#define help_PRINT_BUFFER         ((_kernel_oserror *) arg_string)
#define arg_CONFIGURE_SYNTAX      ((char *) 0)
#define arg_STATUS                ((char *) 1)
#define configure_BAD_OPTION      ((_kernel_oserror *) -1)
#define configure_NUMBER_NEEDED   ((_kernel_oserror *) 1)
#define configure_TOO_LARGE       ((_kernel_oserror *) 2)
#define configure_TOO_MANY_PARAMS ((_kernel_oserror *) 3)

#define CMD_Desktop_OmniClient          0
#define CMD_OmniMount                   1
#define CMD_OmniLoadMounts              2
#define CMD_OmniPrint                   3

_kernel_oserror *fs_command(const char *arg_string, int argc, int cmd_no, void *pw);


/*
 * SWI handler code
 * ================
 *
 * swi_offset contains the offset of the SWI into your SWI chunk.
 * r points to the registers passed to the SWI.
 *
 * Return NULL if the SWI is handled successfully; otherwise return
 * a pointer to an error block which describes the error.
 * The veneer code sets the 'V' bit if the returned value is non-NULL.
 * The special value error_BAD_SWI may be returned if you do not
 * implement a SWI; the veneer will arrange for the appropriate
 * standard internationalised error 'SWI value out of range for
 * module OmniClient' to be returned.
 * The handler may update any of its input registers (R0-R9).
 * pw is the private word pointer ('R12') value passed into the
 * SWI handler entry veneer.
 */
#define Omni_00                         0x04a200
#ifndef Omni_EnumerateMounts
#define Omni_EnumerateMounts            0x04a200
#define Omni_RegisterClient             0x04a201
#define Omni_DeregisterClient           0x04a202
#define Omni_MessageLookup              0x04a203
#define Omni_ConvertClientToAcorn       0x04a204
#define Omni_ConvertAcornToClient       0x04a205
#define Omni_ConvertTime                0x04a206
#define Omni_Printers                   0x04a207
#define Omni_CreateJob                  0x04a208
#define Omni_SendJob                    0x04a209
#define Omni_EndJob                     0x04a20a
#define Omni_AbortJob                   0x04a20b
#define Omni_JobStatus                  0x04a20c
#define Omni_ClearJob                   0x04a20d
#define Omni_PrinterInfo                0x04a20e
#define Omni_EnumerateJobs              0x04a20f
#define Omni_NameLookup                 0x04a210
#define Omni_TraceFile                  0x04a211
#endif

#define error_BAD_SWI ((_kernel_oserror *) -1)

_kernel_oserror *fs_swi(int swi_offset, _kernel_swi_regs *r, void *pw);

#endif
