/*
 * Filer.h
 * Header file for !Omni application - part of the OmniClient project
 */

#ifndef __FILER_H
#define __FILER_H

#include <Desk/LinkList.h>
#include <Desk/Wimp.h>

#include "Config.h"

/* Should be Acorn-allocated SWI chunk number */
#define SWI_BASE				0x004a200
#define Service_OmniAction      		0x00000a0
#define ERR_BASE				0x080d100
#define ERR_MESSBASE				ERR_BASE + 192

#define RUNNABLE				/* to enable direct running */
#define TASK    				('K'<<24|'S'<<16|'A'<<8|'T')

/* Macros for error reporting */
extern _kernel_oserror  omni_errblk;          	/* Global error block */
#define returnOK()	{ r->r[0] = 0; return(NULL); }

/* FilerAction SWI calls */
#define FilerAction_SendSelectedDirectory       0x040f80
#define FilerAction_SendSelectedFile            0x040f81
#define FilerAction_SendStartOperation          0x040f82
#define wimp_MFilerSelectionDirectory           0x000403
#define wimp_MFilerAddSelection                 0x000404
#define wimp_MFilerAction                       0x000405

#define XOS_Bit                        		0x020000
#define OS_Module                      		0x00001e
#define OS_ServiceCall                      	0x000030
#define OS_ExitAndDie                      	0x000050
#define OS_CLI					0x000005
#define OS_Args					0x000009
#define OS_Find					0x00000D
#define OS_GBPB					0x00000C

#define MessageTrans_OpenFile			0x041501
#define MessageTrans_Lookup			0x041502
#define MessageTrans_CloseFile			0x041504

#define Omni_EnumerateMounts			SWI_BASE + 0
#define Omni_RegisterClient			SWI_BASE + 1
#define Omni_DeregisterClient			SWI_BASE + 2
#define Omni_MessageLookup			SWI_BASE + 3
#define Omni_ConvertClientToAcorn 		SWI_BASE + 4
#define Omni_ConvertAcornToClient 		SWI_BASE + 5
#define Omni_ConvertTime			SWI_BASE + 6
#define Omni_Printers				SWI_BASE + 7
#define Omni_CreateJob				SWI_BASE + 8
#define Omni_SendJob				SWI_BASE + 9
#define Omni_EndJob				SWI_BASE + 10
#define Omni_AbortJob				SWI_BASE + 11
#define Omni_JobStatus				SWI_BASE + 12
#define Omni_ClearJob				SWI_BASE + 13
#define Omni_PrinterInfo			SWI_BASE + 14

#define OmniAccess_Reset			0x04a902


/* Define TRACESERVICE in order to output trace of service calls */
/* #define TRACESERVICE */

typedef struct				/* Structure for a mount */
{
  Desk_linklist_header 	header;		/* Link list pointers */
  Desk_icon_handle		icon;		/* Bar icon handle, or -1 */
  Desk_icon_createblock	icon_create;	/* Icon block */
  int			icon_state;	/* State of icon (ISTATE_BROKEN, etc) */
  int			client_id;	/* Client ID word, or -1 */
  int			server_id;	/* Server ID word, or -1 */
  int			mount_id;	/* Mount ID word, or -1 */
  char			mount[16];	/* Mount name string */
  Desk_menu_ptr		menu;		/* Open root submenu pointer */
} mount_record;

/* Server states */
#define ISTATE_BROKEN	-1
#define ISTATE_OK	0
#define ISTATE_NEW	1

typedef struct				/* Struct for mount list */
{
  Desk_linklist_header 	header;		/* Link list pointers */
  int			mount_id;	/* Mount ID word, or -1 */
  int   		server_id;	/* Server ID word, or -1 */
  int			client_id;	/* Client ID word, or -1 */
  char			*server;
  char			*user;
  char			*passwd;
  char 			*mount;
  char			*path;
  char			*auth;
  Desk_bool			transient;	/* Static (in mounts file) or transient */
  Desk_bool			hidden;         /* Hidden (no iconbar/menus) */
  Desk_bool			locked;         /* Locked (don't save in mounts file) */
  Desk_bool			preset;		/* Preset (only in filer window) */
  Desk_bool			connected;	/* TRUE if mlist item is currently connected */
  Desk_bool			open; 		/* TRUE if open filer window upon connection */
} mlist_record;

typedef struct				/* Structure for a mount connection window */
{
  Desk_linklist_header 	header;		/* Link list pointers */
  Desk_window_handle		w;		/* Window handle, or NULL */
  Desk_caret_block		caret;		/* Caret previous to us opening */
  mlist_record		*ml;		/* List item that static dbox was created from */
  Desk_bool			domain;		/* Domain dbox or mount dbox */
} mwind_record;

typedef struct				/* Structure for a client module */
{
  Desk_linklist_header 	header;		/* Link list pointers */
  int			client_id;	/* Client ID word, or -1 */
  int			flags;		/* Service flags word */
  char			*spritename;	/* Sprite name pointer */
  char 			*clientname;	/* Client name pointer */
  char 			*clientdesc;	/* Client description pointer */
  int			site_id;	/* Security word */
  char			*fsname;	/* Filing system name pointer */
} client_record;

/* Features flag word - see SWI Omni_RegisterClient for details */
#define flag_FS             	0x001
#define flag_USER		0x002
#define flag_PW			0x004
#define flag_PATH             	0x008
#define flag_AUTH             	0x010
#define flag_MOUNT		0x020	/* SWI_Spec 0.997 or later */
#define flag_SPECIAL		0x040	/* SWI_Spec 0.997 or later */
#define flag_PRINT             	0x100
#define flag_PRINTPW           	0x200
#define flag_PRINTFILE          0x400
#define flag_EXTmask		0x00ff0000
#define flag_EXTshft		16

#define flagSET(cr,flag)	((cr->flags & flag) == flag)

typedef struct item_struct		/* Struct for an item (server or mount) list */
{
  Desk_linklist_header 	header;		/* Link list pointers */
  int			client_id;	/* Client ID word, or -1 */
  int			server_id;	/* Server ID word, or -1 */
  int			mount_id;	/* Mount ID word, or -1 */
  char			*shortname;	/* Item Short name, or NULL */
  char			*fullname;	/* Item Full name, or NULL */
  char			*field1;	/* Item description, or NULL */
  char			*field2;	/* Item description, or NULL */
  char			*field3;	/* Item description, or NULL */
  Desk_bool			alias;		/* From a mlist entry? shortname/fullname is alias */
} item_record;

typedef struct wind_record 		/* Struct for a 'filer/server' Mounts window */
{
  Desk_linklist_header 	header;		/* Link list pointers */
  Desk_linklist_header	anchor;		/* Anchor to list of subwindows, or {NULL,NULL} */
  Desk_window_handle		w;              /* Window handle */
  int			sort;		/* Local Sort type */
  int			display;	/* Local Display type */
  int			d_width;	/* OS Unit width of item */
  int			d_fwidth;	/* OS Unit field width of item */
  int			d_widths[6];	/* OS Unit widths of item fields 0..5 */
  int			d_height;	/* OS Unit height of item */
  int			nitems;         /* Number of items in window */
  int			witems;		/* Number of items horizontally across window */
  int			item;		/* This item number in parent window */
  Desk_bool			update;		/* Flag is TRUE if window needs updating on screen */
  item_record 		**index;	/* Pointer to sorted array of window items, or NULL */
  Desk_linklist_header	items;		/* Anchor to list of window contents, or {NULL,NULL} */
  int			client_id;	/* Client ID word, or -1 */
  int			server_id;	/* Server ID word, or -1 */
} wind_record;

typedef struct				/* Struct for printer job */
{
  Desk_linklist_header 	header;		/* Link list pointers */
  int			print_id;	/* print_id word */
  int 			pjob_id;	/* pjob_id word */
  int 			client_id;	/* client_id of protocol used for job */
  int 			status;		/* Local status word (internal copy) */
  int 			time;		/* Monotonic time job was started */
  int			handle;		/* Fileswitch file handle */
  char			*buf;		/* Buffer to store pending output data */
  int			buflen;         /* Size of buffer */
  int			bufused;        /* Bytes currently used in buffer */
  int			sent;		/* Bytes sent so far */
} print_record;

typedef struct				/* Struct for file extension mapping */
{
  Desk_linklist_header 	header;		/* Link list pointers */
  int 			client_id;	/* client_id of protocol used, or -1 for default */
  int			flags;		/* Flags word */
  char			ext[8];		/* 8 character extension string */
  int			filetype;	/* RISC OS filetype, or &9999 for global */
} ext_record;

typedef struct				/* Struct for printer list */
{
  Desk_linklist_header 	header;		/* Link list pointers */
  int 			client_id;	/* client_id of protocol used by printer */
  char			*printer;	/* Name of printer */
  char			*server;	/* Name of network server */
  int			flags;		/* Flags word */
} plist_record;


/* Display types */
#define display_LARGE		0
#define display_SMALL		1
#define display_FULL		2

/* Sort types */
#define sort_NONE		0
#define sort_NAME		1
#define sort_PROTOCOL		2

/* Pollword flag states */
#define pollword_NONE		0x00
#define pollword_ENUMERATE	0x01
#define pollword_ENUMERATENET	0x02
#define pollword_ENUMERATEPRINT	0x04
#define pollword_REGISTER       0x08
#define pollword_DEREGISTER	0x10
#define pollword_MOUNTCLI       0x20

/* Print job status flags */
#define print_STATUS		0x1
#define print_mask		0xE
#define print_PENDING		(0 << 1)
#define print_CONNECTED		(1 << 1)
#define	print_SENDING		(2 << 1)
#define print_COMPLETE		(3 << 1)
#define print_TEMPERROR		(4 << 1)
#define print_ERROR		(5 << 1)
#define printer_TIMEOUT		(360000 * 24)  /* 24 hrs timeout */
#define pflagSET(status,flag)	((status & print_mask) == flag)

/* Extension flags */
#define ext_KEEP		0x1
#define ext_SUBDIR		0x2
#define ext_TOTYPE		0x4
#define ext_CASE		0x8
#define eflagSET(er,flag)	((er->flags & flag) == flag)


extern Desk_linklist_header	mount_anchor;	/* List of mount records */
extern Desk_linklist_header	client_anchor;	/* List of client module records */
extern Desk_linklist_header	mlist_anchor;	/* List of mount list records */
extern Desk_linklist_header	mwind_anchor;	/* List of mount connection window records */
extern Desk_linklist_header	print_anchor;	/* List of print job records */
extern Desk_linklist_header	plist_anchor;	/* List of print list records */
extern Desk_linklist_header	ext_anchor;	/* List of file extension mapping records */
extern wind_record	wind_filer;	/* Record of servers 'filer' window */
extern int      	wind_info;	/* Window handle */
extern int      	wind_client;	/* Window handle */
extern int      	wind_mounttmp;	/* Window handle */
extern int      	wind_mountinfo;	/* Window handle */
extern int      	wind_mountdom;	/* Window handle */
extern int		pollword;	/* Poll word non-zero */
extern int		pollword_r0;	/* Poll word non-zero parameter word */
extern config_record	prog_config;	/* Global program configuration */
extern char		*pollword_str;	/* Poll word string */
extern Desk_bool		all_restart;	/* TRUE if we are just RMLoading */
extern Desk_bool 		all_hasrun;	/* TRUE if we have been running task */

extern void mlist_clean(void);
extern void plist_clean(void);

#endif
