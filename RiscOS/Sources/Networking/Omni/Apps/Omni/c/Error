/*
    ####             #    #     # #
    #   #            #    #       #          The FreeWare C library for
    #   #  ##   ###  #  # #     # ###             RISC OS machines
    #   # #  # #     # #  #     # #  #   ___________________________________
    #   # ####  ###  ##   #     # #  #
    #   # #        # # #  #     # #  #    Please refer to the accompanying
    ####   ### ####  #  # ##### # ###    documentation for conditions of use
    ________________________________________________________________________

    File:    Error.c
    Author:  Copyright © 1992 Jason Williams
             Improved by Philip Colmer
    Version: 0.19 (13 Jul 1993)
    Purpose: Centralised error handling functions
    Mods:    7 Apr 1992 - JCW - Added Error_OutOfMemory
            30 Apr 1993 - JCW - Fixed (Desk_Wimp_ReportError prototype changed)
            14 Jun 1993 - PJC - Allowed Error_Report(Fatal) to take
                                variable arguments
            13 Jul 1993 - PJC - Added varargs to "Internal" versions of above
*/


#include <stdarg.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "Desk/Error.h"
#include "Desk/WimpSWIs.h"
#include "Desk/Msgs.h"
#include "Desk/Event.h"

#include "Debug.h"


extern void Error_Report(int errornum, char *report, ...)
{
  va_list va;
  os_error    error;
  error_flags eflags;

  va_start(va, report);
  vsprintf(error.errmess, report, va);
  va_end(va);
  error.errnum = errornum;

  eflags.value = 1;
  (void) Desk_Wimp_ReportError(&error, eflags.value, Desk_event_taskname);
}


extern void Error_ReportFatal(int errornum, char *report, ...)
{
  va_list va;
  char errmess[256];

  va_start(va, report);
  vsprintf(errmess, report, va);
  va_end(va);

  if ((Desk_event_taskname == NULL) || (strlen(Desk_event_taskname) <= 1))
    Error_Report(errornum, "%s", errmess);
  else
    Desk_Msgs_Report(errornum, "error.fatal", Desk_event_taskname, errmess);
  exit(1);
}


extern void Error_ReportInternal(int errornum, char *report, ...)
{
  va_list va;
  char errmess[256];

  va_start(va, report);
  vsprintf(errmess, report, va);
  va_end(va);
  TRACE1("%s\n", errmess);
  Error_Report(errornum, errmess);
}


extern void Error_ReportFatalInternal(int errornum, char *report, ...)
{
  va_list va;
  char errmess[256];

  va_start(va, report);
  vsprintf(errmess, report, va);
  va_end(va);
  Error_ReportFatal(errornum, errmess);
}


extern Desk_bool Error_Check(os_error *error)
{
  if (error != NULL)
  {
    Error_Report(error->errnum, error->errmess);
    return(Desk_TRUE);
  }
  return(Desk_FALSE);
}


extern void Error_CheckFatal(os_error *error)
{
  if (error != NULL)
    Error_ReportFatal(error->errnum, error->errmess);
}


extern Desk_bool Error_OutOfMemory(Desk_bool fatal, char *place)
{
  if (fatal)
    Desk_Msgs_ReportFatal(0, "error.memory", place);
  else
    Desk_Msgs_Report(0, "error.memory", place);

  return(Desk_FALSE);  /*  Always returns Desk_FALSE so can return Desk_FALSE from your
                   *  own function at the same time as reporting the error
                   */
}
