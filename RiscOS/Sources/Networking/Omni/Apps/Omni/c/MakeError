/*
 * Program:	MakeError.c - shared error routines
 *
 * Project:	!Omni OmniClient(tm) project
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	13 November 1994
 * Last Edited:	14 November 1994
 *
 * Copyright 1994 by ANT Limited
 */

#include "Hdrs.h"


/* Private copy of error messages, in case we can't access the MessageTrans ones */
static const char *err_strings[] =
{
  "Protocol is already registered",
  "Bad protocol identifier value",
  "No free memory for protocol registration",
  "Protocol not registered",
  "Bad reason code",
  "Need protocol/server/printer names",
  "Protocol not registered for printing",
  "No free memory for print job",
  "Bad print job identifier",
  "Bad mounts file",
  "Cannot create print job",
  "Function not yet implemented",
  "Bad time conversion format",
  "No free memory for buffer",
  "Please run !Omni to restart application",

  "Unknown OmniClient error"
};
static const int err_count = (sizeof(err_strings)/sizeof(char*))-1;

/* Block of error messages */
static const char *omni_errors[] =
{
  "No connection to server",
  "Connection to '%0' server broken",
  "Connection already exists",
  "Cannot find named server '%0'",
  "Server out of file handles",
  "Function '%0' not implemented",
  "Timeout error",
  "General server error: %0",
  "Bad parameters",
  "Memory error - out of buffers",
  "Out of RISC OS handles",
  "File '%0' not found",
  "Directory '%0' not found",
  "Insufficient access",
  "File already exists",
  "Incorrect password",
  "Illegal name",
  "Error not known"
};
static const int omni_errcount = (sizeof(omni_errors)/sizeof(char*))-1;

/* MessageTrans variables */
static int msgtrans[4];
static char msgpath[96];
static Desk_bool msgopen = Desk_FALSE;


/*  Initialise errors from MessageTrans.
 */
extern void InitErrors(void)
{
  Desk_os_error   *err = NULL;

  /* Get resources path from country configuration */
  InitResources(msgpath);
  strcat(msgpath, "Messages");

  /* Attempt to open messages file. See PRM 3-743, because R2=0 on entry,
   * the file descriptor and message file pathname should be static.
   */
  err = Desk_SWI(3,0, MessageTrans_OpenFile, &msgtrans[0], msgpath, 0);
  TRACE2("InitErrors: '%s' %x\n", msgpath, (int) err);
  if (!err) msgopen = Desk_TRUE;
}


/*  Close any open error lookup files, and release workspace from RMA.
 */
extern void CloseErrors(void)
{
  TRACE("CloseErrors:\n");
  if (msgopen) Desk_SWI(1,0, MessageTrans_CloseFile, &msgtrans[0]);
  msgopen = Desk_FALSE;
}


/*  This function takes an error number and returns a pointer to
 *  an error block (OmniClient internal error messages).
 */
extern _kernel_oserror *MakeError(int n)
{
  omni_errblk.errnum = n;
  n -= ERR_BASE;
  if (n >= err_count) n = err_count;
  TRACE1("MakeError: %d\n", n);
  if (msgopen)
  {
    char token[16];

    /* Do lookup via MessageTrans */
    sprintf(token, "omni.int%d", n);
    Desk_SWI(4,0, MessageTrans_Lookup, &msgtrans[0], token, omni_errblk.errmess, 251);
    /* If lookup failed (returned token unchanged) then do private lookup */
    if (strcmp(token, omni_errblk.errmess)) return(&omni_errblk);
  }
  /* Do lookup with private copy of messages */
  strncpy(omni_errblk.errmess, err_strings[n], 251);
  return(&omni_errblk);
}


/*  This function takes an error number and returns a pointer to
 *  an error block (OmniClient shared protocol errors - called by Omni_MessageLookup).
 */
extern _kernel_oserror *OmniError(int n, char *param)
{
  omni_errblk.errnum = n + ERR_MESSBASE;
  if (n >= omni_errcount) n = omni_errcount;
  TRACE1("OmniError: %d\n", n);
  if (msgopen)
  {
    char token[16];

    /* Do lookup via MessageTrans */
    sprintf(token, "omni.err%d", n);
    Desk_SWI(5,0, MessageTrans_Lookup, &msgtrans[0], token, omni_errblk.errmess, 251, param);
    TRACE2("OmniError: msg '%s' '%s'\n", token, omni_errblk.errmess);
    /* If lookup failed (returned token unchanged) then do private lookup */
    if (strcmp(token, omni_errblk.errmess)) return(&omni_errblk);
  }
  /* Do lookup with private copy of messages */
  if (param)
  {
    char err[252];
    char *sub = NULL;

    /* Have to deal with MessageTrans '%0' -> C sprintf '%s' translation! */
    strncpy(err, omni_errors[n], 251);
    if ((sub = strstr(err, "%0")) != NULL) *(sub+1) = 's';
    sprintf(omni_errblk.errmess, err, param);
    TRACE2("OmniError: private param '%s' '%s'\n", param, omni_errblk.errmess);
  }
  else
  {
    strncpy(omni_errblk.errmess, omni_errors[n], 251);
    TRACE1("OmniError: private '%s'\n", omni_errblk.errmess);
  }
  return(&omni_errblk);
}

