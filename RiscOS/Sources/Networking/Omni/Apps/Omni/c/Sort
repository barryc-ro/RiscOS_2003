/*
 * Program:	Sort.c - core application routines
 *
 * Project:	!Omni OmniClient(tm) project
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	13 October 1994
 * Last Edited:	14 October 1994
 *
 * Copyright 1994 by ANT Limited
 */

#include <stdbool.h>
#include <stdlib.h>

#include <Desk/Core.h>
#include <Desk/Str.h>

#include <DebugLib/DebugLib.h>

#include "Client.h"
#include "Filer.h"
#include "Sort.h"

static wind_record *gbl_r = NULL;		/* Used by sort _compare routines */
static bool server = false;			/* Server window, or mounts ? */


/*  Compare Protocol/Name fields.
 */
static int protocol_compare(const void *l1, const void *l2)
{
  item_record *i1 = (item_record *) *((int **) l1);
  item_record *i2 = (item_record *) *((int **) l2);
  char *n1 = ((server) && (gbl_r->display == display_FULL)) ? i1->fullname : i1->shortname;
  char *n2 = ((server) && (gbl_r->display == display_FULL)) ? i2->fullname : i2->shortname;
  client_record *cr1 = ClientFind(i1->client_id, NULL, -1, NULL);
  client_record *cr2 = ClientFind(i2->client_id, NULL, -1, NULL);
  int result = 0;

  dprintf (("", "protocol_compare: %x %x\n", (int) i1->client_id, (int) i2->client_id));
  if ((cr1) && (cr2) && (cr1->clientname) && (cr2->clientname))
    result = Desk_stricmp(cr1->clientname, cr2->clientname);
  if (result == 0) result = Desk_stricmp(n1, n2);
  return(result);
}


/*  Compare Name fields.
 */
static int name_compare(const void *l1, const void *l2)
{
  item_record *i1 = (item_record *) *((int **) l1);
  item_record *i2 = (item_record *) *((int **) l2);
  char *n1 = ((server) && (gbl_r->display == display_FULL)) ? i1->fullname : i1->shortname;
  char *n2 = ((server) && (gbl_r->display == display_FULL)) ? i2->fullname : i2->shortname;
  int result;

  dprintf (("", "name_compare: '%s' '%s'\n", n1, n2));
  result = Desk_stricmp(n1, n2);
  if (result == 0)
  {
    client_record *cr1 = ClientFind(i1->client_id, NULL, -1, NULL);
    client_record *cr2 = ClientFind(i2->client_id, NULL, -1, NULL);
    if ((cr1) && (cr2) && (cr1->clientname) && (cr2->clientname))
      result = Desk_stricmp(cr1->clientname, cr2->clientname);
  }
  return(result);
}


/*  Sort messages into some 'type' of ordering.
 */
extern bool SortMessages(wind_record *r, int type)
{
  int loop;
  item_record *ir = (item_record *) r->items.next;

  if (r == NULL) return false;
  if (r->index == NULL) return false;

  dprintf (("", "SortMessages: %d\n", type));
  for (loop = 0; loop < r->nitems; loop++)
  {
    r->index[loop] = ir;
    ir = (item_record *) ir->header.next;
  }
  gbl_r = r;
  if (wind_filer.w == r->w) server = true;
    else server = false;
  switch (type)
  {
    case sort_PROTOCOL:
      qsort(&r->index[0], r->nitems, sizeof(int), protocol_compare);
      break;
    case sort_NAME:
      qsort(&r->index[0], r->nitems, sizeof(int), name_compare);
      break;
    case sort_NONE:
    default:
      break;
  }
  gbl_r = NULL;
  dprintf (("", "start of index: %x\n", (int) &r->index[0]));
  for (loop = 0; loop < r->nitems; loop++)
  {
    dprintf (("", "[%d] = %x\n", loop, (int) r->index[loop]));
  }
  return true;
}
