/*
 * Program:	Mount.c - core application routines
 *
 * Project:	!Omni OmniClient(tm) project
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	18 August 1994
 * Last Edited:	3 January 1996
 *
 * Copyright 1994,1995,1996 by ANT Limited
 */

#include <stdbool.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include <kernel.h>
#include <swis.h>

#include <DebugLib/DebugLib.h>
#include <MemCheck/MemCheck.h>

#include <Desk/ColourTran.h>
#include <Desk/Error.h>
#include <Desk/Event.h>
#include <Desk/EventMsg.h>
#include <Desk/Hourglass.h>
#include <Desk/Icon.h>
#include <Desk/Menu.h>
#include <Desk/Msgs.h>
#include <Desk/Resource.h>
#include <Desk/Screen.h>
#include <Desk/Str.h>
#include <Desk/Time.h>
#include <Desk/WimpSWIs.h>

#include "Client.h"
#include "Defs.h"
#include "Events.h"
#include "ExtLib.h"
#include "Filer.h"
#include "Heap.h"
#include "List.h"
#include "Mount.h"

#define ReadModeVar(m, v, r) _swi(OS_ReadModeVariable, _INR (0, 2) | _OUT (2), (m), (v), 0, (r))

/*  Copy string (CR, LF and NULL as terminators - *not* Tab, etc)
 *  to a maximum of 'n' characters.
 */
static char *strncpylf(char *d, const char *s, int n)
{
  char c;
  char *dest = d;
  int count = 0;

  if ((s == NULL) || (d == NULL)) return(NULL);
  do
  {
    c = *s;
    *dest = c;
    s++;
    dest++;
    count++;
  } while ((c != '\r') && (c != '\n') && (c != '\0') && (count < n));
  *(dest-1) = '\0';
  return(d);
}


/*  Expand line to add whitespace between consecutive field separators.
 */
static char *expand(char *s)
{
  char line[256];
  char *d = line;
  char *o = s;

  if (s == NULL) return(NULL);
  while (*s != '\0')
  {
    if ((*d = *s++) == ',') *++d = ' ';
    d++;
  }
  *d = '\0';
  strncpy(o, line, 255);
  dprintf (("", "expand: '%s'\n", o));
  return(o);
}


/*  Strip special menu item chars.
 */
static char *stripmenu(char *s)
{
  char *d = s;
  char *o = s;

  if (!s) return(s);
  while (*s != '\0')
  {
    if ((*s == ' ') || (*s == '!') || (*s == '~') || (*s == '>') || (*s == '-') ||
        (*s == ',') || (*s == '|'))
    {
      s++;
      continue;
    }
    *d++ = *s++;
  }
  *d = '\0';
  return(o);
}


/*  Find item in linked list from client_id
 *  Returns first record matching, or last record matching (first==false)
 */
extern mount_record *MountIconFind(int client_id, const char *mount, int icon, bool first,
		int server_id)
{
  mount_record *mr = (mount_record *) mount_anchor.next;
  mount_record *mr_found = NULL;
  int loop = 0;
  int searchtype = 0;

  dprintf (("", "MountIconFind:\n"));
  if (mount) searchtype = 1;
  if (icon != -1) searchtype = 2;
  if ((server_id != -1) && (client_id != -1)) searchtype = 3;
  while (mr != NULL)
  {
    switch (searchtype)
    {
      case 0: if (mr->client_id == client_id)
              {
                mr_found = mr;
                if (first) return(mr);
              }
              break;
      case 1: dprintf (("", "MountIconFind: mount '%s' '%s'\n", mr->mount, mount));
              if (!Desk_stricmp(mr->mount, mount))
              {
                if (((client_id != -1) && (mr->client_id == client_id)) || (client_id == -1))
                {
                  mr_found = mr;
                  if (first) return(mr);
                }
              }
              break;
      case 2: if (mr->icon == icon)
              {
                mr_found = mr;
                if (first) return(mr);
              }
              break;
      case 3: dprintf (("", "MountIconFind: client %x %x\n", mr->client_id, client_id));
              dprintf (("", "MountIconFind: server %x %x\n", mr->server_id, server_id));
              if ((mr->client_id == client_id) && (mr->server_id == server_id))
              {
                mr_found = mr;
                if (first) return(mr);
              }
              break;
      default:
        break;
    }
    loop++;
    mr = (mount_record *) mr->header.next;
  }
  return(mr_found);
}



/*  Create an indirected sprite icon on iconbar, from given spritearea.
 */
static Desk_icon_handle Icon_BarSprite(mount_record *ir, char *spritename, char *text)
{
  Desk_sprite_info   	sinfo;
  int           	xeigfactor, yeigfactor;
  char			sprite[13];
  Desk_icon_createblock	*icreate = &ir->icon_create;
  Desk_icon_handle 		icon = ir->icon;

  dprintf (("", "icon = %d %x\n", ir->icon, (int) icreate));
  dprintf (("", "%s %s\n", spritename, text));
  if (icon != -1)
  {
    FREE(icreate->icondata.data.indirecttext.validstring);
    FREE(icreate->icondata.data.indirecttext.buffer);
  }
  icreate->icondata.flags.value = 0x1700610b; /* iconbtype_CLICKDRAG */
  icreate->icondata.data.indirecttext.buffer = cpystr(text);
  sprintf(sprite, "s%s", spritename);
  icreate->icondata.data.indirecttext.validstring = cpystr(sprite);
  icreate->icondata.data.indirecttext.bufflen = strlen(text)+1;

  icreate->icondata.workarearect.min.x = 0;
  icreate->icondata.workarearect.min.y = -16;
  if (Wimp_SpriteReadInfo(spritename, &sinfo) == NULL)
  {
    ReadModeVar(sinfo.mode, 4, &xeigfactor);
    ReadModeVar(sinfo.mode, 5, &yeigfactor);
    if (strlen(text) * 16 > sinfo.width  << xeigfactor)
      icreate->icondata.workarearect.max.x = Text_StringWidth(text)-8; /* strlen(text) * 16; */
    else
      icreate->icondata.workarearect.max.x = sinfo.width  << xeigfactor;
    icreate->icondata.workarearect.max.y = (sinfo.height << yeigfactor) + 20;
  }
  else
  {
    icreate->icondata.workarearect.max.x = Text_StringWidth(text)-8; /* strlen(text) * 16; */
    icreate->icondata.workarearect.max.y = 84;
  }

  /* Create in order!! */
  if (MountCount() <= 1)
  {
    /* If only one icon, and it already exists ... ? */
    if (icon != -1)
    {
      /* Create to left, then delete the old */
      icreate->window = -3;
      _swi (Wimp_CreateIcon, _INR (0, 1) | _OUT (0), icon, icreate, &ir->icon);
    }
    else
    {
      /* Create on LHS of iconbar, priority 0x20000000 (Econet) */
      icreate->window = -5;
      _swi (Wimp_CreateIcon, _INR (0, 1) | _OUT (0), 0x20000000, icreate, &ir->icon);
    }
  }
  else
  {
    mount_record *ir_r = (mount_record *) ir->header.next;
    mount_record *ir_l = (mount_record *) ir->header.previous;

    /* Multiple icons, and 1st in list ... ? */
    if (ir_l == NULL)
    {
      /* Create to left of next icon in list */
      icreate->window = -3;
      _swi (Wimp_CreateIcon, _INR (0, 1) | _OUT (0), ir_r->icon, icreate, &ir->icon);
    }
    else
    {
      /* Create to right of previous icon in list */
      icreate->window = -4;
      _swi (Wimp_CreateIcon, _INR (0, 1) | _OUT (0), ir_l->icon, icreate, &ir->icon);
    }
  }
  if (icon != -1) Desk_Wimp_DeleteIcon(-1, icon);
  return(ir->icon);
}


/*  Display correct icons on iconbar (on mode change).
 */
extern Desk_bool MountModeChange(Desk_event_pollblock *event, void *reference)
{
  static int y = -1;
  mount_record *mr = (mount_record *) mount_anchor.next;

  UNUSED (event);
  UNUSED (reference);

  /* Exit if no change in resolution */
  Desk_Screen_CacheModeInfo();
  if (Desk_screen_eig.y == y) return(Desk_TRUE);
  y = Desk_screen_eig.y;
  /* Recreate icons on iconbar with correct sprite names */
  while (mr != NULL)
  {
    if (mr->client_id != -1)
    {
      client_record *cr = ClientFind(mr->client_id, NULL, -1, NULL);
      char buf[16];

      if (cr) Icon_BarSprite(mr, SpriteName(cr->spritename, buf, Desk_FALSE), mr->mount);
    }
    mr = (mount_record *) mr->header.next;
  }
  return(Desk_TRUE);
}


/*  Create submenu menu structure for NetFS discs on a server.
 */
static void NetFSMenu(mount_record *mr)
{
  char menu[512];
  char tmp[32];
  char buf[44];
  char server[24];
  int next = 0;
  int read = 1;
  Desk_os_error *err = NULL;
  char *s = NULL;
  int server_id = 0;

  /* Initialise menu */
  dprintf (("", "NetFSMenu:\n"));
  if (mr->menu != NULL) Menu_Dispose(mr->menu);

  /* Build list of client names */
  strcpy(menu, "");

  /* Loop on connections list call */
  while ((next != -1) && (read != 0) && (!err))
  {
    /* Call to get basic server details */
    err = _swix(NetFS_EnumerateFSList, _INR (0, 3) | _OUT (0) | _OUT (3),
                next, &buf, 20, 1,
                &next, &read);
    if ((read < 1) || (err)) continue;
    strcpy(server, (char *) &buf[3]);
    s = strchr(server, ' ');
    if (s) *s = '\0';
    server_id = buf[0] + (buf[1] << 8);
    /* Add submenu item */
    if (server_id == mr->server_id)
    {
      dprintf (("", "NetFSMenu: %x found '%s'\n", server_id, server));
      if (strlen(menu) + strlen(server) < 509)
      {
        strcat(menu, server);
        strcat(menu, ", ");
      }
    }
  }
  /* Truncate menu string */
  if (strlen(menu) > 1) menu[strlen(menu)-2] = '\0';

  /* Create menu */
  dprintf (("", "NetFSMenu: '%s'\n", menu));
  Desk_Msgs_Lookup("mhdr.icon_o", tmp, 31);
  mr->menu = Desk_Menu_New(tmp, menu);
  dprintf (("", "NetFSMenu: %x\n", (int) mr->menu));
}


/*  Create a new Mount icon.
 */
extern mount_record *MountCreate(mlist_record *lr)
{
  mount_record *mr = NULL;
  mount_record *mr_tmp = NULL;

  dprintf (("", "MountCreate:create new server list\n"));
  mr = (mount_record *) heap_alloc(sizeof(mount_record));
  if (mr == NULL)
  {
    Desk_Error_OutOfMemory(Desk_FALSE, "mount header");
    return(NULL);
  }
  /* Add to list, grouped by client_id */
  if (lr != NULL)
  {
    bool found = false;

    /* Add in alphabetical ordering, for a protocol group */
    mr_tmp = (mount_record *) mount_anchor.next;
    while ((mr_tmp != NULL) && (mr_tmp->client_id <= lr->client_id) && (!found))
    {
      dprintf (("", "MountCreate: '%s' '%s'\n", mr_tmp->mount ? mr_tmp->mount : "",
        lr->mount ? lr->mount : ""));
      if ((mr_tmp->client_id == lr->client_id) && (mr_tmp->mount) &&
          (Desk_stricmp(mr_tmp->mount, lr->mount) > 0))
      {
        dprintf (("", "MountCreate: found!\n"));
        Desk_LinkList_InsertBefore(&mount_anchor, &(mr_tmp->header), &(mr->header));
        found = true;
      } else mr_tmp = (mount_record *) mr_tmp->header.next;
    }
    if (!found)
    {
      dprintf (("", "MountCreate: not found\n"));
      if ((mr_tmp) && (mr_tmp->client_id > lr->client_id))
      {
        Desk_LinkList_InsertBefore(&mount_anchor, &(mr_tmp->header), &(mr->header));
      } else Desk_LinkList_AddToTail(&mount_anchor, &(mr->header));
    }
  } else Desk_LinkList_AddToTail(&mount_anchor, &(mr->header));
  mr->icon = -1;
  if (lr != NULL)
  {
    client_record *cr = ClientFind(lr->client_id, NULL, -1, NULL);
    char buf[16];

    mr->icon_state = ISTATE_OK;
    mr->client_id = lr->client_id;
    mr->menu = NULL;
    mr->server_id = lr->server_id;
    mr->mount_id = lr->mount_id;
    /* Hack for NetFS - build us a submenu if we need one */
    if ((mr->server_id != -1) && (mr->client_id == 0x4a540)) NetFSMenu(mr);
    strcpy(mr->mount, (lr->mount) ? lr->mount : "");
    Icon_BarSprite(mr, SpriteName(cr->spritename, buf, Desk_FALSE), lr->mount);
    /* Hunt down and kill the dummy record ? */
    mr_tmp = MountIconFind(-1, NULL, -1, Desk_TRUE, -1);
    if (mr_tmp) MountDelete(mr_tmp);
  }
  else
  {
    mr->icon_state = ISTATE_BROKEN;
    mr->client_id = -1;
    mr->server_id = -1;
    mr->menu = NULL;
    mr->mount_id = -1;
    strcpy(mr->mount, "");
    Icon_BarSprite(mr, "!omni", "Net");
  }
  dprintf (("", "MountCreate:new server list length %d\n", Desk_LinkList_ListLength(&mount_anchor)));

  Desk_Event_Claim(Desk_event_CLICK, Desk_event_ANY, Desk_event_ANY, (Desk_event_handler) ButtonClick, mr);
  if (MountCount() == 1)
  {
    /* First mount */
    Desk_Event_Claim(Desk_event_MENU,  Desk_event_ANY, Desk_event_ANY, (Desk_event_handler) MenuChoice,  mr);
    Desk_Event_Claim(Desk_event_KEY,   Desk_event_ANY, Desk_event_ANY, (Desk_event_handler) KeyPress,    mr);
    Desk_Event_Claim(Desk_event_NONZEROPOLLWORD, Desk_event_ANY, Desk_event_ANY, (Desk_event_handler) PollWordNZ, mr);
    Desk_Event_Claim(Desk_event_USERDRAG, Desk_event_ANY, Desk_event_ANY, (Desk_event_handler) UserDrag, mr);
    Desk_EventMsg_Claim(Desk_message_MENUWARN, Desk_event_ANY, (Desk_event_handler) MenuWarn, mr);
  }

  return(mr);
}


/*  Delete an Mount server icon.
 */
extern void MountDelete(mount_record *mr)
{
  mlist_record *ml = NULL;

  dprintf (("", "MountDelete:\n"));

  if (mr->icon != -1)
  {
    Desk_Wimp_DeleteIcon(-1, mr->icon);
    FREE(mr->icon_create.icondata.data.indirecttext.validstring);
    FREE(mr->icon_create.icondata.data.indirecttext.buffer);
  }
  Desk_Event_Release(Desk_event_CLICK, Desk_event_ANY, Desk_event_ANY, (Desk_event_handler) ButtonClick, mr);
  if (MountCount() == 1)
  {
    /* About to remove last mount */
    Desk_Event_Release(Desk_event_MENU,  Desk_event_ANY, Desk_event_ANY, (Desk_event_handler) MenuChoice,  mr);
    Desk_Event_Release(Desk_event_KEY,   Desk_event_ANY, Desk_event_ANY, (Desk_event_handler) KeyPress,    mr);
    Desk_Event_Release(Desk_event_NONZEROPOLLWORD, Desk_event_ANY, Desk_event_ANY, (Desk_event_handler) PollWordNZ, mr);
    Desk_Event_Release(Desk_event_USERDRAG, Desk_event_ANY, Desk_event_ANY, (Desk_event_handler) UserDrag, mr);
    Desk_EventMsg_Release(Desk_message_MENUWARN, Desk_event_ANY, (Desk_event_handler) MenuWarn);
  }

  /* Delete from mlist structure ? */
  if (mr->icon_state != ISTATE_BROKEN)
  {
    ml = MountFind(mr->mount_id, NULL, -1, -1);
    if ((ml) && (ml->transient))
    {
      dprintf (("", "MountDelete: delete from mlist %x\n", (int) ml));
      MountDeleteList(ml);
    }
  }

  Menu_Close();
  Desk_menu_currentopen = NULL;
  if (mr->menu) Menu_Dispose(mr->menu);
  Desk_LinkList_Unlink(&mount_anchor, &(mr->header));
  FREE(mr);
  dprintf (("", "MountDelete:new server list length %d\n", Desk_LinkList_ListLength(&mount_anchor)));

  /* Recreate the dummy record ? */
  if (mount_anchor.next == NULL) MountCreate(NULL);
}


/*  Return number of items in Mount linked list.
 */
extern int MountCount(void)
{
  mount_record *mr = (mount_record *) mount_anchor.next;
  int count = 0;

  while (mr != NULL)
  {
    count++;
    mr = (mount_record *) mr->header.next;
  }
  return(count);
}


/*  Create a new Mount list item.
 */
static mlist_record *MountCreateList(client_record *cr, char *server,
		char *user, char *passwd, char *mount, char *path, char *auth, bool preset,
		bool hidden, bool locked, bool open)
{
  mlist_record *mr = NULL;

  dprintf (("", "MountCreateList:create new mounts list\n"));
  mr = MountFind(-1, mount, preset, cr->client_id);
  if (mr != NULL) MountDeleteList(mr);
  mr = (mlist_record *) rma_alloc(sizeof(mlist_record));
  if (mr == NULL)
  {
    Desk_Error_OutOfMemory(Desk_FALSE, "mount list header");
    return(NULL);
  }
  Desk_LinkList_AddToTail(&mlist_anchor, &(mr->header));
  mr->server_id = -1;
  mr->mount_id = -1;
  mr->client_id = cr->client_id;
  mr->server = cpyrma(server);
  mr->user = cpyrma(user);
  mr->passwd = cpyrma(passwd);
  mr->mount = cpyrma(mount);
  dprintf (("", "MountCreateList: '%s' '%s'\n", mr->mount ? mr->mount : "?", mount ? mount : "?"));
  mr->path = cpyrma(path);
  dprintf (("", "MountCreateList: '%s' '%s'\n", mr->path ? mr->path : "?", path ? path : "?"));
  mr->auth = cpyrma(auth);
  dprintf (("", "MountCreateList: '%s' '%s'\n", mr->auth ? mr->auth : "?", auth ? auth : "?"));
  mr->transient = true;
  mr->preset = preset;
  mr->hidden = hidden;
  mr->locked = locked;
  mr->open = open;
  mr->connected = false;
  dprintf (("", "MountCreateList:new mount list length %d\n", Desk_LinkList_ListLength(&mlist_anchor)));
  return(mr);
}


/*  Delete an Mount list item.
 */
extern void MountDeleteList(mlist_record *mr)
{
  if (mr == NULL) return;
  dprintf (("", "MountDeleteList:\n"));
  RMAFREE(mr->server);
  RMAFREE(mr->user);
  if (mr->passwd) memset(mr->passwd, 0, strlen(mr->passwd));
  RMAFREE(mr->passwd);
  RMAFREE(mr->mount);
  RMAFREE(mr->path);
  RMAFREE(mr->auth);
  Desk_LinkList_Unlink(&mlist_anchor, &(mr->header));
  RMAFREE(mr);
  dprintf (("", "MountDeleteList:new list length %d\n", Desk_LinkList_ListLength(&mlist_anchor)));
}


/*  Load & parse mounts file.
 */
extern bool MountLoadFile(const char *name)
{
  FILE *f = fopen((name) ? name : app_FILES"Mounts", "r");
  bool failures = false;
  char line[256];
  mlist_record *mr = NULL;

  /* Open failed ? no error */
  dprintf (("", "MountLoadFile: %d\n", (int) f));
  if (f == NULL) return false;

  /* Display hourglass during operation */
  Desk_Hourglass_On();
  /* Desk_LinkList_Init(&mlist_anchor); */

  /* Read lines from file until EOF */
  while (fgets(line, 255, f) != NULL)
  {
    char *s = NULL;
    char *server, *user, *passwd, *mount, *path, *auth = NULL;
    bool hidden = false;
    bool locked = false;
    bool preset = false;
    bool open   = true;
    client_record *cr = NULL;

    /* Comment line - ignore */
    if (line[0] == '#') continue;
    dprintf (("", "load: '%s'\n", line));
    if ((strlen(line) < 5) || (!strchr(line, ','))) continue;
    if (strstr(line, ",,") != NULL) expand(line);
    if ((s = strtok(line, ",")) == NULL) continue;
      else strip(s);
    dprintf (("", "load: protocol = '%s'\n", s));
    if ((cr = ClientFind(-1, NULL, -1, s)) == NULL)
    {
      dprintf (("", "load: invalid protocol\n"));
      failures = true;
      continue;
    }
    if ((s = strtok(NULL, ",")) != NULL)
    {
      char *tmp;
      mount = strip(s);
      mount = stripmenu(mount);
      if ((tmp = strchr(mount, ' ')) != NULL) *tmp = '\0';
      if (strlen(mount) > 15) mount[15] = '\0';
      dprintf (("", "load: mount alias = '%s'\n", mount));
    } else continue;
    if ((s != NULL) && ((s = strtok(NULL, ",")) != NULL))
    {
      s = strip(s);
      dprintf (("", "load: flags = '%s'\n", s));
      if ((strchr(s, 'H')) || (strchr(s, 'h'))) hidden = Desk_TRUE;
      if ((strchr(s, 'L')) || (strchr(s, 'l'))) locked = Desk_TRUE;
      if ((strchr(s, 'P')) || (strchr(s, 'p'))) preset = Desk_TRUE;
      if ((strchr(s, 'O')) || (strchr(s, 'o'))) open = Desk_FALSE;
      if (preset && hidden) hidden = Desk_FALSE;
    }
    if ((strlen(mount) < 1) && (!preset)) continue;
    if ((s != NULL) && ((s = strtok(NULL, ",")) != NULL))
    {
      server = strip(s);
      dprintf (("", "load: server = '%s'\n", server));
    } else server = NULL;
    if ((s != NULL) && ((s = strtok(NULL, ",")) != NULL))
    {
      path = strip(s);
      dprintf (("", "load: mount path = '%s'\n", path));
    } else path = NULL;
    if ((s != NULL) && ((s = strtok(NULL, ",")) != NULL))
    {
      user = strip(s);
      dprintf (("", "load: user ID = '%s'\n", user));
    } else user = NULL;
    if ((s != NULL) && ((s = strtok(NULL, ",")) != NULL))
    {
      passwd = strip(s);
      dprintf (("", "load: password = '%s'\n", passwd));
    } else passwd = NULL;
    if ((s != NULL) && ((s = strtok(NULL, ",")) != NULL))
    {
      auth = strip(s);
      dprintf (("", "load: authentication server = '%s'\n", auth));
    } else auth = NULL;
    if (flagSET(cr, flag_SPECIAL) && !preset)
    {
      hidden = true;
    }
    mr = MountCreateList(cr, server, user, passwd, mount, path, auth, preset, hidden,
      locked, open);
    if (mr) mr->transient = false;
  }

  /* Close file and exit */
  Desk_Hourglass_Off();
  fclose(f);

  /* If failures, then report just once */
  if (failures)
  {
    Desk_Msgs_Report(0, "mount.loadfail");
    return false;
  }
  return true;
}


/*  Build a menu of currently listed mounts.
 */
extern Desk_menu_ptr MountMakeMenu(Desk_menu_ptr oldmenu)
{
  char menu[768];
  mlist_record *r = (mlist_record *) mlist_anchor.next;
  char buf[128];

  /* Initialise menu */
  dprintf (("", "MountMakeMenu: %x\n", (int) oldmenu));
  if (oldmenu != NULL) Menu_Dispose(oldmenu);
  Desk_Msgs_Lookup("menu.icon_m", menu, 767);
  dprintf (("", "MountMakeMenu: lookup '%s'\n", menu));
  if (r != NULL)
  {
    /* Build list of client names */
    strcat(menu, "|");
    while (r != NULL)
    {
      bool preset;

      /* mlist items that are PRESET, but connected should appear */
      preset = ((r->preset) && (!MountIconFind(r->client_id,r->mount,-1,true,-1)));
      if ((ClientFind(r->client_id, NULL, -1, NULL) != NULL) && (!r->hidden) && (!preset) &&
          (r->mount))
      {
        if (r->header.next != NULL) sprintf(buf, ">%s,", r->mount);
          else sprintf(buf, ">%s", r->mount);
        dprintf (("", "MountMakeMenu: '%s'\n", r->mount));
        if (strlen(menu) + strlen(buf) < 764) strcat(menu, buf);
      }
      dprintf (("", "MountMakeMenu: %s\n", menu));
      r = (mlist_record *) r->header.next;
    }
  }
  if (menu[strlen(menu)-1] == ',') menu[strlen(menu)-1] = '\0';
  if (menu[strlen(menu)-1] == '|') menu[strlen(menu)-1] = '\0';
  dprintf (("", "MountMakeMenu: %s\n", menu));
  /* Create menu */
  Desk_Msgs_Lookup("mhdr.icon_m", buf, 31);
  return(Desk_Menu_New(buf, menu));
}


/*  Find item in linked list from either mount_id (name=NULL) or name.
 *  OR from menuitem (if menuitem != -1) OR from client_id (if client_id != -1)
 */
extern mlist_record *MountFind(int mount_id, const char *name, int menuitem, int client_id)
{
  mlist_record *mr = (mlist_record *) mlist_anchor.next;
  int loop = 0;
  int searchtype = 0;
  bool preset;

  dprintf (("", "MountFind:\n"));
  if (name != NULL) searchtype = 1;
  if (menuitem != -1) searchtype = 2;
  if ((client_id != -1) && (name != NULL)) searchtype = 3;
  while (mr != NULL)
  {
    switch (searchtype)
    {
      case 0: if (mr->mount_id == mount_id) return(mr);
              break;
      case 1: dprintf (("", "MountFind: '%s' '%s'\n", (mr->mount) ? mr->mount : "", name));
              if ((mr->mount) && (!Desk_stricmp(mr->mount, name))) return(mr);
              break;
      case 2: dprintf (("", "MountFind: %d %d\n", menuitem, loop));
              /* mlist items that are PRESET, but connected should appear */
              preset = ((mr->preset) && (!MountIconFind(mr->client_id,mr->mount,-1,Desk_TRUE,-1)));
              if ((ClientFind(mr->client_id, NULL, -1, NULL) == NULL) || (mr->hidden) ||
                (preset) || (!mr->mount))
              {
                mr = (mlist_record *) mr->header.next;
                continue;
              }
	      if (menuitem == loop) return(mr);
	      break;
      case 3: if ((mr->client_id == client_id) && (!Desk_stricmp(mr->mount, name)))
              {
                if ((menuitem > -1) && (mr->preset == menuitem)) return(mr);
                if (menuitem == -1) return(mr);
              }
              break;
      default:
        break;
    }
    loop++;
    mr = (mlist_record *) mr->header.next;
  }
  return(NULL);
}


/*  Save mounts file.
 */
extern bool MountSaveFile(void)
{
  FILE *f = fopen(app_FILES"Mounts", "w");
  char s[256];
  time_t tt;
  int mtime;
  mlist_record *r = (mlist_record *) mlist_anchor.next;

  /* Open failed ? give error */
  if (f == NULL)
  {
    Desk_Msgs_Report(0, "mount.noopen", app_FILES"Mounts", "update");
    return false;
  }

  /* Display hourglass during operation */
  Desk_Hourglass_Start(1);
  mtime = Desk_Time_Monotonic();

  /* Write header */
  tt = Risc_Time(NULL);
  strftime(s, 31, "%H:%M:%S on %d %b %Y", localtime(&tt));
  fputs("# > "app_FILES"Mounts\n# Mount list saved by "app_DIR"Client at ", f);
  fputs(s, f);
  fputs("\n# \n# Protocol, Alias, Flags, Server, Mount path, User ID, Password, Authentication\n# \n", f);

  /* Write list of mounts */
  if (r != NULL)
  {
    while (r != NULL)
    {
      client_record *cr = ClientFind(r->client_id, NULL, -1, NULL);
      char *fsname = (cr) ? cr->fsname : NULL;
      sprintf(s, "%s,%s,%s%s%s,%s,%s,%s,%s,%s\n", fsname ? fsname : "",
        r->mount ? r->mount : "", r->hidden ? "H" : "", r->preset ? "P" : "",
        !r->open ? "O" : "", r->server ? r->server : "",
        r->path ? r->path : "", r->user ? r->user : "", r->passwd ? r->passwd : "",
        r->auth ? r->auth : "");
      if ((!r->locked) && (fsname))
      {
        fputs(s, f);
        r->transient = false;
      }
      r = (mlist_record *) r->header.next;
    }
  }
  /* Make sure we have hourglass'd for at least 70 cs */
  while (mtime+30 > Desk_Time_Monotonic());

  /* Close file and exit */
  Desk_Hourglass_Off();
  fclose(f);
  return true;
}


/*  Attempt to connect to named network.
 */
extern bool DomainConnect(mlist_record *mr, Desk_window_handle w)
{
  Desk_bool res;
  char *domain;
  char *user;
  char *password;
  int mount_id;
  int client_id = mr ? mr->client_id : clientwindow->client_id;

  /* Update contents of record from icon fields */
  dprintf (("", "DomainConnect: %p %x\n", mr, client_id));
  if (!mr && !clientwindow) return false;

  domain   = Icon_GetTextPtr (w, domain_domain);
  user     = Icon_GetTextPtr (w, domain_user);
  password = Icon_GetTextPtr (w, domain_password);

  /* NULL password is supplied by user as '""', but passed to protocol as empty string */
  if (!strcmp(password, "\"\"")) strcpy (password, "");

  /* Make Connect SWI call */
  dprintf (("", "DomainConnect: pre Omni_Op,Mount\n"));
  dprintf (("", "'%s' '%s' ", domain, user));
  dprintf (("", "'%s' %x\n", password, client_id));
  Desk_Hourglass_Start(5);
  res = Desk_Error_Check (ClientMount (client_id,
                                       domain, user, password, 0, 0, 0,
                                       &mount_id));
  dprintf (("", "DomainConnect: %x %x\n", res, mount_id));
  if (mount_id == 0) res = Desk_TRUE;
    else res = Desk_FALSE;

  /* Fudge to ensure password is overwritten in template memory */
  if (!res)
  {
    Icon_SetBlank (w, domain_password);
  }
  Desk_Hourglass_Off();
  return ((bool) !res);
}


/*  Attempt to connect to named server.
 */
extern bool MountConnect(mlist_record *mr, Desk_window_handle w)
{
  bool temporary = false;
  bool res;
  client_record *cr = mr ? ClientFind(mr->client_id, NULL, -1, NULL) : clientwindow;
  mlist_record *mrl = NULL;
  _kernel_oserror *err = NULL;
  char *s;
  char *pw;

  /* If really a domain login, then use that code */
  dprintf (("", "MountConnect: %p %d\n", cr, flagSET(cr, flag_SPECIAL)));
  if (!mr && !clientwindow) return false;
  if (cr && flagSET(cr, flag_SPECIAL)) return(DomainConnect(mr, w));

  /* Check for a valid mount alias */
  dprintf (("", "MountConnect:\n"));

  /* If no valid mount name, and we are registered as not needing one, use server text */
  if (Icon_IsEmpty (w, mount_mount) && flagSET(cr, flag_MOUNT) &&
      Icon_IsEmpty (w, mount_server))
  {
    Desk_Msgs_Report(Desk_FALSE, "mount.badname");
    return false;
  }

  /* Check for an existing mount with this client_id/mount pair */
  s = Icon_GetTextPtr(w, mount_mount);
  dprintf (("", "MountConnect: looking for '%s'\n", s));
  if (MountIconFind(-1, s, -1, Desk_TRUE, -1) != NULL)
  {
    Desk_Msgs_Report(Desk_FALSE, "mount.connect");
    return false;
  }

  /* Check for a valid server name */
  if (Icon_IsEmpty (w, mount_server))
  {
    Desk_Msgs_Report(Desk_FALSE, "mount.badserv");
    return false;
  }

  /* Check for existing mlist entry with this client_id/mount pair */
  s = Icon_GetTextPtr(w, mount_mount);
  mrl = MountFind(-1, s, -1, -1);
  /* If we are *really* coming from the same mlist item, then will always update
   * that mlist entry, without a user prompt.
   */
  if ((mr) && (mrl) && (mr == mrl)) mrl = NULL;
  if (mrl)
  {
    bool ident = true;

    /* mlist entry with this mount alias exists, check for same contents */
    s = Icon_GetTextPtr(w, mount_server);
    if ((mrl->server) && (strcmp(s, mrl->server))) ident = false;

    s = Icon_GetTextPtr(w, mount_user);
    if ((mrl->user) && (strcmp(s, mrl->user))) ident = false;

    s = Icon_GetTextPtr(w, mount_password);
    if ((mrl->passwd) && (strcmp(s, mrl->passwd))) ident = false;

    s = Icon_GetTextPtr(w, mount_path);
    if ((mrl->path) && (strcmp(s, mrl->path))) ident = false;

    s = Icon_GetTextPtr(w, mount_auth);
    if ((mrl->auth) && (strcmp(s, mrl->auth))) ident = false;

    s = Icon_GetTextPtr(w, mount_mount);
    if (ident)
    {
      /* Identical, so it doesn't matter if we overwrite the mlist entry */
      mr = mrl;
    }
    else
    {
      /* Some change to a field, better ask the user what they want */
      if (Msgs_QueryOK(0, "mount.query"))
      {
        /* Overwriting ... */
        mr = mrl;
      }
      else
      {
        /* Don't want to overwrite, so blank the alias field and they can try again */
        Desk_Icon_SetText(w, mount_mount, "");
        Desk_Icon_SetCaret(w, mount_mount);
        return false;
      }
    }
  }

  /* Has the mount name changed? If so, new mount item */
  if ((mr) && (Desk_stricmp(s, mr->mount))) mr = NULL;

  /* New, or existing item in list ? */
  if (mr == NULL)
  {
    /* Create temporary item */
    mr = (mlist_record *) rma_alloc(sizeof(mlist_record));
    if (mr == NULL)
    {
      Desk_Error_OutOfMemory(Desk_FALSE, "mount list header");
      return false;
    }
    Desk_LinkList_AddToTail(&mlist_anchor, &(mr->header));
    mr->server_id = -1;
    mr->mount_id = -1;
    mr->client_id = cr->client_id;
    mr->server = NULL;
    mr->user = NULL;
    mr->passwd = NULL;
    mr->mount = NULL;
    mr->path = NULL;
    mr->auth = NULL;
    mr->transient = true;
    mr->hidden    = false;
    mr->locked    = false;
    mr->preset    = false;
    mr->open      = false;
    mr->connected = false;
    temporary     = true;
  }
  else
  {
    RMAFREE(mr->server);
    RMAFREE(mr->user);
    RMAFREE(mr->mount);
    RMAFREE(mr->path);
    RMAFREE(mr->auth);
  }

  /* Update contents of record from icon fields */
  s = Icon_GetTextPtr(w, mount_server);
  dprintf (("", "Server: (%d) %s\n", strlen (s), s));
  mr->server = cpyrma(s);

  s = Icon_GetTextPtr(w, mount_user);
  dprintf (("", "User: (%d) %s\n", strlen (s), s));
  mr->user = cpyrma(s);

  pw = Icon_GetTextPtr(w, mount_password);
  /* NULL password is supplied by user as '""', but passed to protocol as empty string */
  if (!strcmp(pw, "\"\"")) strcpy(pw, "");

  s = Icon_GetTextPtr(w, mount_mount);
  dprintf (("", "Mount: (%d) %s\n", strlen (s), s));
  mr->mount = cpyrma(s);

  s = Icon_GetTextPtr(w, mount_path);
  dprintf (("", "Path: (%d) %s\n", strlen (s), s));
  mr->path = cpyrma(s);

  s = Icon_GetTextPtr(w, mount_auth);
  dprintf (("", "Auth: (%d) %s\n", strlen (s), s));
  mr->auth = cpyrma(s);

  mr->open = Desk_Icon_GetSelect(w, mount_open);

  /* Make Connect SWI call */
  dprintf (("", "MountConnect: pre Omni_Op,Mount\n"));
  Desk_Hourglass_Start(5);
  err = ClientMount (mr->client_id,
                     mr->server, mr->user, pw, mr->mount, mr->path, mr->auth,
                     &mr->mount_id);
  res = Desk_Error_Check(err);
  dprintf (("", "MountConnect: %x %x\n", res, mr->mount_id));
  if (mr->mount_id == 0)
  {
    res = true;
  }
  else
  {
    res = false;
  }

  /* Re-read mount fields back from successful mount */
  if (!res)
  {
    char *server  = NULL;
    char *user    = NULL;
    char *mount   = NULL;
    char *path    = NULL;
    char *auth    = NULL;
    int server_id = 0;

    err = ClientGetActiveMountInfo (mr->client_id, mr->mount_id,
                                    &server, &user, &mount, &path, &auth, &server_id);
    res = Desk_Error_Check (err);
    if (!res)
    {
      client_record *cr;

      RMAFREE(mr->server);
      RMAFREE(mr->user);
      RMAFREE(mr->mount);
      RMAFREE(mr->path);
      RMAFREE(mr->auth);
      mr->server = cpyrma(server);
      dprintf (("", "MountConnect: server '%s'\n", mr->server ? mr->server : ""));
      mr->user = cpyrma(user);

      /* Set Omni$UserXXX variable */
      cr = ClientFind(mr->client_id, NULL, -1, NULL);
      if (cr)
      {
        char var_name[32];
        sprintf(var_name, "Omni$User%s", cr->fsname);
        _kernel_setenv(var_name, mr->user);
      }
      dprintf (("", "MountConnect: user '%s'\n", mr->user ? mr->user : ""));
      if (temporary) mr->passwd = NULL;
      mr->mount = cpyrma(mount);
      dprintf (("", "MountConnect: mount '%s'\n", mr->mount ? mr->mount : ""));
      mr->path = cpyrma(path);
      dprintf (("", "MountConnect: path '%s'\n", mr->path ? mr->path : ""));
      mr->auth = cpyrma(auth);
      dprintf (("", "MountConnect: auth '%s'\n", mr->auth ? mr->auth : ""));
      mr->server_id = server_id;

      /* Fudge to ensure password is overwritten in template memory */
      Icon_SetBlank (w, mount_password);

      /* Special field - network authentication server, we don't 'really' connect with
       * an icon on the iconbar.
       */
      /* if ((clientwindow) && (flagSET(clientwindow, flag_SPECIAL)))
      {
        dprintf (("", "MountConnect: special flag set\n"));
        mr->mount_id = -1;
        if (temporary) MountDeleteList(mr);
        Desk_Hourglass_Off();
        return(true);
      } */

      /* Icon on iconbar */
      if ((!mr->hidden))
      {
        if (MountCreate(mr) == NULL)
        {
          res = true;
        }
      }
      dprintf (("", "MountConnect: %x %x\n", res, mr->mount_id));
    }
  }

  if (res)
  {
    mr->mount_id = -1;
    if (temporary) MountDeleteList(mr);
    Desk_Hourglass_Off();
    /* Horrible hack for Access 'already connected' error - don't keep window open */
    if ((cr->client_id == 0x4a900) && (err->errnum == ERR_MESSBASE+2))
      return true;
    return false;
  }

  /* Filer_OpenDir on root of mount */
  if (!mr->hidden && mr->open) Desk_Error_Check (ClientOpenUserRoot (mr->client_id, mr->mount_id));
  mr->connected = true;
  Desk_Hourglass_Off();
  dprintf (("", "done MountConnect\n"));
  return true;
}


/*  CLI *command parsing.
 */
extern void MountCLI(const char *s1, bool running)
{
  char p[256];
  char * s;

  dprintf (("", "MountCLI: entry1 '%s'\n", s1));
  strncpylf(p, s1, 255);
  s = strip(p);
  dprintf (("", "MountCLI: entry2 '%s'\n", s));

  /* Are we running, with our application space paged in? */
  if (!running)
  {
    char *t = NULL;

    if (pollword_str)
    {
      t = rma_alloc(strlen(pollword_str) + strlen(s) + 2);
      if (!t) return;
      sprintf(t, "%s %s", pollword_str, s);
      rma_free(pollword_str);
    }
    else
    {
      t = rma_alloc(strlen(s) + 1);
      if (!t) return;
      strcpy(t, s);
    }
    pollword_str = t;
    pollword |= pollword_MOUNTCLI;
    return;
  }

  /* -ALL flag */
  if (strstr(s, "-a") || strstr(s, "-A"))
  {
    int loop = 0;
    mlist_record *ml = (mlist_record *) mlist_anchor.next;

    dprintf (("", "MountCLI: found all ... \n"));
    while (ml)
    {
      if (ml->hidden) CreateMount(mount_MLISTREC, (int) ml, false);
      ml = (mlist_record *) ml->header.next;
    }
    while (MountFind(-1, NULL, loop, -1))
    {
      CreateMount(mount_MLIST, loop+2, false);
      loop++;
    }
    return;
  }

  /* -URL flag */
# if 0
  if ((t = strstr(s, "-url")) || (t = strstr(s, "-URL")))
  {
    Desk_message_block m;

    strcpy(t, "    ");
    t = strtok(t, " \n\r\t");
    dprintf (("", "MountCLI: URL! '%s'\n", t));
    strncpy((char *) &m.data.words[0], t, 235);
    /* OpenURL(Desk_event_SEND, m); */
    return;
  }
# endif

  s = strtok(s, " ");
  while (s)
  {
    mlist_record *ml = NULL;

    dprintf (("", "MountCLI: '%s'\n", s));
    /* Bollocks find code ... */
    ml = MountFind(-1, s, -1, -1);
    if (ml != NULL)
    {
      int loop = 0;
      bool found = false;

      dprintf (("", "MountCLI: found once!\n"));
      if ((ml->hidden) || (ml->preset))
      {
        dprintf (("", "MountCLI: hidden %d preset %d\n", ml->hidden, ml->preset));
        CreateMount(mount_MLISTREC, (int) ml, false);
      }
      else
      {
        while (!found)
        {
          ml = MountFind(-1, NULL, loop, -1);
          if ((ml != NULL) && (!Desk_stricmp(ml->mount, s)))
          {
            dprintf (("", "MountCLI: found %d\n", loop));
            found = true;
            CreateMount(mount_MLIST, loop+2, false);
          }
          loop++;
        }
      }
    }
    else
    {
      client_record *cr;

      /* Not found - is it a Client FS name? */
      cr = ClientFind(-1, NULL, -1, s);
      if (cr)
      {
        dprintf (("", "MountCLI: found FS name - faking!\n"));
        ml = MountCreateList(cr, "", "", "", s, "", "", Desk_TRUE, Desk_FALSE, Desk_TRUE, Desk_FALSE);
        CreateMount(mount_MLISTREC, (int) ml, false);
      }
    }
    s = strtok(NULL, " ");
  }
  return;
}
