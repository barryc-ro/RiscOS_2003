/*
 * Program:	Print.c - core application routines
 *
 * Project:	!Omni OmniClient(tm) project
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	6 October 1994
 * Last Edited:	3 January 1996
 *
 * Copyright 1994,1995,1996 by ANT Limited
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>

#include <Desk/Str.h>
#include <Desk/Time.h>

#include <DebugLib/DebugLib.h>

#include "Client.h"
#include "Filer.h"
#include "Heap.h"
#include "MakeError.h"
#include "Print.h"

/*  Create a new print job.
 */
extern print_record *PrintCreate(_kernel_swi_regs *r)
{
  client_record *cr = NULL;
  print_record *pr = NULL;
  Desk_os_error *err = NULL;

  dprintf (("", "PrintCreate:create new print job\n"));
  if ((r->r[0] <= 0) || (r->r[1] <= 0))
  {
    r->r[0] = (int) MakeError(err_NEEDNAMES);
    return(NULL);
  }
  /* Look for client as fsname OR protocol name */
  if ((cr = ClientFind(-1, NULL, -1, (char *) r->r[0])) == NULL)
    cr = ClientFind(-1, (char *) r->r[0], -1, NULL);
  if ((!cr) || (!flagSET(cr,flag_PRINT)))
  {
    r->r[0] = (int) MakeError(err_NOTPRINTING);
    return(NULL);
  }
  /* Allocate memory for record */
  pr = (print_record *) rma_alloc(sizeof(print_record));
  if (pr == NULL)
  {
    r->r[0] = (int) MakeError(err_NOMEM_PRINT);
    return(NULL);
  }
  Desk_LinkList_AddToTail(&print_anchor, &(pr->header));
  /* Use rand() just in case user sends 2 print requests inside 1 cs ! */
  pr->print_id = (Desk_Time_Monotonic() & 0x00ffffff) + ((rand() & 0xff) << 24);
  pr->client_id = cr->client_id;
  pr->status = 0;
  pr->pjob_id = -1;
  pr->time = Desk_Time_Monotonic();
  pr->handle = -1;
  pr->buf = NULL;
  pr->buflen = 0;
  pr->bufused = 0;
  dprintf (("", "PrintCreate:new print jobs list length %d\n", Desk_LinkList_ListLength(&print_anchor)));
  /* Start print job with protocol module */
  dprintf (("", "PrintCreate:server = '%s'\n", r->r[1] ? (char *) r->r[1] : ""));
  dprintf (("", "PrintCreate:printer = '%s'\n", r->r[2] ? (char *) r->r[2] : ""));
  dprintf (("", "PrintCreate:user = '%s'\n", r->r[3] ? (char *) r->r[3] : ""));
  dprintf (("", "PrintCreate:password = '%s'\n", r->r[4] ? (char *) r->r[4] : ""));
  dprintf (("", "PrintCreate:options = '%s'\n", r->r[5] ? (char *) r->r[5] : ""));
  err = _swix (cr->client_id, _INR (0, 6) | _OUT (1),
               10, r->r[1], r->r[2], r->r[3], r->r[4], r->r[5], r->r[6],
               &pr->pjob_id);
  dprintf (("", "PrintCreate:err %x pjob_id %x\n", (int) err, pr->pjob_id));
  if ((err != NULL) || (pr->pjob_id == 0))
  {
    PrintClear(pr);
    r->r[0] = (int) err;
    return(NULL);
  }
  return(pr);
}


/*  Clear from memory a Print protocol entry.
 */
extern void PrintClear(print_record *pr)
{
  dprintf (("", "PrintClear:\n"));
  if (pr == NULL) return;
  Desk_LinkList_Unlink(&print_anchor, &(pr->header));
  if (pr->buf) RMAFREE(pr->buf);
  RMAFREE(pr);
  dprintf (("", "PrintClear:new print jobs list length %d\n", Desk_LinkList_ListLength(&print_anchor)));
}


/*  Clear from memory a Print protocol entry.
 */
extern void PListClear(plist_record *pr)
{
  dprintf (("", "PListClear:\n"));
  if (pr == NULL) return;
  if (pr->printer) RMAFREE(pr->printer);
  if (pr->server) RMAFREE(pr->server);
  Desk_LinkList_Unlink(&plist_anchor, &(pr->header));
  RMAFREE(pr);
  dprintf (("", "PListClear:new print list length %d\n", Desk_LinkList_ListLength(&plist_anchor)));
}


/*  Find item in linked list from either print_id or expiry time.
 */
extern print_record *PrintFind(int print_id, int expire, int client_id, int handle)
{
  print_record *pr = (print_record *) print_anchor.next;
  int searchtype = 0;

  dprintf (("", "PrintFind:\n"));
  if (expire != -1) searchtype = 1;
  if (client_id != -1) searchtype = 2;
  if (handle != -1) searchtype = 3;
  while (pr != NULL)
  {
    dprintf (("", "PrintFind: %x\n", (int) pr));
    switch (searchtype)
    {
      case 0: if (pr->print_id == print_id) return(pr);
              break;
      case 1: if ((pr->time + printer_TIMEOUT) >= expire) return(pr);
              break;
      case 2: if (pr->client_id == client_id) return(pr);
              break;
      case 3: if (pr->handle == handle) return(pr);
              break;
      default:
        break;
    }
    pr = (print_record *) pr->header.next;
  }
  return(NULL);
}


/*  Find item in linked list from protocol/server/printer triplet.
 */
extern plist_record *PrinterFind(int client_id, char *server, char *printer)
{
  plist_record *pr = (plist_record *) plist_anchor.next;

  dprintf (("", "PrinterFind:\n"));
  while (pr != NULL)
  {
    dprintf (("", "PrinterFind: %x\n", (int) pr));
    if ((client_id == pr->client_id) && (!Desk_stricmp(server, pr->server)) &&
        (!Desk_stricmp(printer, pr->printer))) return(pr);
    pr = (plist_record *) pr->header.next;
  }
  return(NULL);
}


/*  Build a menu list of currently registered Printing-aware protocols.
 */
extern _kernel_oserror *PrintListProtocols(_kernel_swi_regs *r)
{
  client_record *cr = (client_record *) client_anchor.next;
  char buf[128];
  char *menu = (char *) r->r[3];
  int menulen = r->r[4];
  bool fsname = (r->r[0] == 1);
  bool first = true;

  /* Initialise menu */
  dprintf (("", "PrintListProtocols: fsname %s buf %x", fsname ? "true" : "false", (int) menu));
  dprintf (("", " len %d\n", menulen));

  /* Build list of Print names */
  if (menulen < 0) menu = NULL;
  menulen = 0;
  if (menu) strcpy(menu, "");
  while (cr != NULL)
  {
    char *name = (!fsname) ? cr->clientname : cr->fsname;

    if ((flagSET(cr, flag_PRINT)) && (name))
    {
      sprintf(buf, "%s%s", (first) ? "" : ", ", name);
      if (first) first = false;
      if (menu) strcat(menu, buf);
      menulen += strlen(buf);
    }
    cr = (client_record *) cr->header.next;
  }
  r->r[4] = (menulen > 0) ? menulen+1 : 0;
  if (menu)
  {
    dprintf (("", "PrintListProtocols: '%s' %d\n", menu, menulen));
  }
  else
  {
    dprintf (("", "PrintListProtocols: %d\n", menulen));
  }
  return(NULL);
}


/*  Build a menu list of printers for given protocol.
 */
extern _kernel_oserror *PrintListPrinters(_kernel_swi_regs *r)
{
  char *menu = (char *) r->r[3];
  char *server = (char *) r->r[2];
  int menulen = r->r[4];
  client_record *cr = ClientFind(-1, (char *) r->r[1], -1, NULL);
  plist_record *pr = (plist_record *) plist_anchor.next;
  bool all = (r->r[0] == 18);
  char buf[128];
  bool first = true;

  /* Valid protocol name in R1 ? */
  if (!cr) cr = ClientFind(-1, NULL, -1, (char *) r->r[1]);
  if (!cr) return(MakeError(err_NOTREGISTERED));

  /* Build list of Print names */
  if (menulen < 0) menu = NULL;
  menulen = 0;
  if (menu) strcpy(menu, "");

  /* Get list of printers */
  while (pr)
  {
    if ((all) || ((server) && (pr->server) && (!Desk_stricmp(server, pr->server))))
    {
      sprintf(buf, "%s%s", (first) ? "" : ", ", pr->printer);
      if (first) first = false;
      if (menu) strcat(menu, buf);
      menulen += strlen(buf);
    }
    pr = (plist_record *) pr->header.next;
  }

  r->r[4] = (menulen > 0) ? menulen+1 : 0;
  if (menu)
  {
    dprintf (("", "PrintListPrinters: '%s' %d\n", menu, menulen));
  }
  else
  {
    dprintf (("", "PrintListPrinters: %d\n", menulen));
  }
  return(NULL);
}


/*  Build a menu list of servers for given protocol.
 */
extern _kernel_oserror *PrintListServers(_kernel_swi_regs *r)
{
  char *menu = (char *) r->r[3];
  int menulen = r->r[4];
  client_record *cr = ClientFind(-1, (char *) r->r[1], -1, NULL);
  plist_record *pr = (plist_record *) plist_anchor.next;
  char *tmp = heap_alloc(512);
  int tmplen = 512;
  char buf[128];
  bool first = true;

  /* Valid protocol name in R1 ? */
  if (!cr) cr = ClientFind(-1, NULL, -1, (char *) r->r[1]);
  if (!cr) return(MakeError(err_NOTREGISTERED));
  if (!tmp) return(MakeError(err_NOMEM_BUFFER));
  dprintf (("", "PrintListServers: %x\n", cr->client_id));

  /* Build list of Print names */
  if (menulen < 0) menu = NULL;
  menulen = 0;
  if (menu) strcpy(menu, "");
  strcpy(tmp, "");

  /* Get list of servers */
  dprintf (("", "PrintListServers: menu %x menulen %d\n", (int) menu, menulen));
  while (pr)
  {
    dprintf (("", "PrintListServers: tmp '%s' pr->server '%s'\n", tmp,
      (pr->server) ? pr->server : "NULL"));
    if ((pr->server) && (!strstr(tmp, pr->server)))
    {
      sprintf(buf, "%s%s", (first) ? "" : ", ", pr->server);
      if (first) first = false;
      menulen += strlen(buf);
      if (menulen >= tmplen)
      {
        tmplen += 256;
        tmp = heap_realloc(tmp, tmplen);
        if (!tmp) return(MakeError(err_NOMEM_BUFFER));
      }
      strcat(tmp, buf);
    }
    pr = (plist_record *) pr->header.next;
  }

  if (menu) strcpy(menu, tmp);
  heap_free(tmp);
  r->r[4] = (menulen > 0) ? menulen+1 : 0;
  if (menu)
  {
    dprintf (("", "PrintListServers: '%s' %d\n", menu, menulen));
  }
  else
  {
    dprintf (("", "PrintListServers: %d\n", menulen));
  }
  return(NULL);
}


/*  Return printer support flags for a named protocol.
 */
extern _kernel_oserror *PrintFlag(_kernel_swi_regs *r)
{
  int flags;
  client_record *cr = ClientFind(-1, (char *) r->r[1], -1, NULL);

  /* Valid protocol name in R1 ? */
  if (!cr) cr = ClientFind(-1, NULL, -1, (char *) r->r[1]);
  if (!cr) return(MakeError(err_NOTREGISTERED));
  flags = (cr->flags & (flag_PRINT | flag_PRINTPW | flag_PRINTFILE)) / flag_PRINT;
  r->r[0] = flags;
  return(NULL);
}


/*  List printer jobs.
 */
extern print_record *PrintListJobs(print_record *pr, int **buf, int buflen)
{
  int *s = *buf;

  dprintf (("", "PrintListJobs: %x %x\n", (int) pr, (int) s));
  if (!pr) pr = (print_record *) print_anchor.next;
  while ((pr != NULL) && (buflen >= 4))
  {
    dprintf (("", "PrintListJobs: %x\n", (int) pr));
    *s = pr->print_id;
    s++;
    buflen -= 4;
    pr = (print_record *) pr->header.next;
  }
  *buf = s;
  return(pr);
}

