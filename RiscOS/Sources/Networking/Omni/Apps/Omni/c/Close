/*
 * Program:	Close.c - close connection? query window handler
 *
 * Project:	!Marcel MUA project
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	7 January 1994
 * Last Edited:	24 June 1996
 *
 * Copyright 1994 by Nicholas A.Smith
 */

#include <stdbool.h>

#include <Desk/Event.h>
#include <Desk/KeyCodes.h>
#include <Desk/Msgs.h>
#include <Desk/Template.h>
#include <Desk/Wimp.h>
#include <Desk/WimpSWIs.h>
#include <Desk/Window.h>

#include <DebugLib/DebugLib.h>

#include "Close.h"
#include "Core.h"
#include "Defs.h"
#include "ExtLib.h"
#include "Filer.h"

static Desk_window_handle 	wind_close = NULL;
static int		close_result = -1;


/*  Create & open close dbox
 *  Return Desk_FALSE if cannot create, else Desk_TRUE.
 */
static bool CreateClose(void)
{
  if (wind_close == NULL)
  {
    wind_close = Desk_Window_Create("close", Desk_template_TITLEMIN);
    if (wind_close == NULL) return false;
  }
  Window_ShowDialogue(wind_close, Desk_FALSE);
  return true;
}


/*  Handler attached to all button click events.
 */
static Desk_bool Close_ButtonClick(Desk_event_pollblock *event, void *reference)
{
  Desk_window_handle w = event->data.mouse.window;
  Desk_icon_handle 	i = event->data.mouse.icon;
  Desk_button_state  b = event->data.mouse.button;

  UNUSED (reference);

  if ((w == wind_close) && ((b.data.select) || (b.data.adjust)))	/* close window */
  {
    if (i == close_CLOSE)
    {
      close_result = 1;
      /* Desk_Wimp_Patch(); */
    }
    if (i == close_CANCEL) close_result = 0;
    return(Desk_TRUE);
  }
  return(Desk_FALSE);
}


/*  Handler to take care of the user's key presses.
 */
static Desk_bool Close_KeyPress(Desk_event_pollblock *event, void *reference)
{
  Desk_window_handle w = event->data.key.caret.window;
  Desk_key_press	k = event->data.key.code;

  UNUSED (reference);

  if ((w == wind_close) && ((k == Desk_keycode_RETURN) || (k == Desk_keycode_ESCAPE)))
  {
    if (k == Desk_keycode_RETURN) close_result = 1;
    if (k == Desk_keycode_ESCAPE) close_result = 0;
  }
  else
  {
    /* Not caught - pass to next handler */
    Desk_Wimp_ProcessKey(event->data.key.code);
  }
  return(Desk_TRUE);
}



/*  Popup disconnect dbox and deal with user selection.
 *  Return 0 (Desk_FALSE) for cancel, 1 (Desk_TRUE) for OK, 2 for button2 (unsubscribe).
 */
extern int Close(int type, bool selection, Desk_message_block *m)
{
  char msg[196];
  int polldelay;

  /* Reply to message, and give the user the chance to object */
  dprintf (("", "Close:\n"));
  if (m)
  {
    m->header.yourref = m->header.myref;
    Desk_Wimp_SendMessage(Desk_event_ACK, m, m->header.sender, 0);
  }

  /* If we have active transfers, we want to tell the user about it */
  switch (type)
  {
    case closetype_BYE:
      Desk_Msgs_printf(msg, "close.bye", selection ? "these newsgroups" : "this newsgroup");
      break;
  }

  /* Create & update window */
  if (!CreateClose()) return(Desk_TRUE);
  /* Desk_Icon_SetText(wind_close, close_CLOSE, "Dismount"); */
  Desk_Icon_SetText(wind_close, close_text, msg);

  /* Enter polling loop */
  close_result = -1;
  Desk_Event_Claim(Desk_event_CLICK, wind_close, Desk_event_ANY, Close_ButtonClick, NULL);
  Desk_Event_Claim(Desk_event_KEY,  wind_close, Desk_event_ANY, Close_KeyPress,  NULL);
  Desk_Icon_SetCaret(wind_close, -1);
  polldelay = event_polldelay;
  event_polldelay = -1;
  while ((all_done == 0) && (close_result == -1))
  {
    Event_Poll();
    if (!Desk_Window_IsOpen(wind_close)) close_result = 0;
  }
  event_polldelay = polldelay;
  Desk_Event_ReleaseWindow(wind_close);
  Desk_Wimp_CloseWindow(wind_close);
  dprintf (("", "Close: %d\n", close_result));
  return(close_result);
}
