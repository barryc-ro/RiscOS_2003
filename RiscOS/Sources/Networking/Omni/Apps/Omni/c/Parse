/*
 * Program:	Parse.c - core application routines
 *
 * Project:	!Omni OmniClient(tm) project
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	7 October 1994
 * Last Edited:	3 May 1995
 *
 * Copyright 1994,1995 by ANT Limited
 */

#include <Desk/Error.h>
#include <Desk/Hourglass.h>
#include <Desk/Menu.h>
#include <Desk/SWI.h>
#include <Desk/WimpSWIs.h>

#include "Hdrs.h"


/*  Free an Item from memory.
 */
static void ItemFree(item_record *ir)
{
  TRACE1("ItemFree: %x\n", (int) ir);
  if (!ir) return;
  if (ir->shortname) FREE(ir->shortname);
  if (ir->fullname) FREE(ir->fullname);
  if (ir->field1) FREE(ir->field1);
  if (ir->field2) FREE(ir->field2);
  if (ir->field3) FREE(ir->field3);
  FREE(ir);
  TRACE("ItemFree: ok\n");
}


/*  Free a chain of Items from memory.
 */
extern void ItemChainFree(wind_record *wr)
{
  item_record *ir = NULL;

  TRACE("ItemChainFree:\n");
  if (!wr) return;
  ir = (item_record *) wr->items.next;
  while (ir != NULL)
  {
    item_record *ir_tmp = (item_record *) ir->header.next;
    TRACE2("ItemChainFree: %x %x\n", (int) ir, (int) ir_tmp);
    Desk_LinkList_Unlink(&wr->items, &(ir->header));   /* wr->anchor */
    ItemFree(ir);
    ir = ir_tmp;
  }
  Desk_LinkList_Init(&wr->items);
}


/*  Count number of Items in chain.
 */
extern int ItemCount(wind_record *wr)
{
  item_record *ir = NULL;
  int count = 0;

  if (!wr) return(0);
  ir = (item_record *) wr->items.next;
  while (ir != NULL)
  {
    count++;
    ir = (item_record *) ir->header.next;
  }
  return(count);
}


/*  List all items - DEBUG ROUTINE.
 */
extern void ItemList(wind_record *wr)
{
  item_record *ir = NULL;

  return;
  TRACE("ItemList:\n");
  if (!wr) return;
  ir = (item_record *) wr->items.next;
  while (ir != NULL)
  {
    TRACE2("ItemList: ir %x clientid %x ", (int) ir, ir->client_id);
    TRACE2("serverid %x mountid %x ", ir->server_id, ir->mount_id);
    TRACE1("fullname '%s'\n", ir->fullname);
    ir = (item_record *) ir->header.next;
  }
}


/*  Delete an item record from main server window.
 *  Check for associated open mounts windows, and delete records from them.
 */
static void ItemDelete(wind_record *wr, item_record *ir)
{
  int client_id = -1;
  int server_id = -1;
  wind_record *wrl = (wind_record *) wr->anchor.next;

  if ((!wr) || (!ir)) return;
  TRACE2("ItemDelete: %x %x\n", (int) wr, (int) ir);
  /* Delete item record from list */
  client_id = ir->client_id;
  server_id = ir->server_id;
  Desk_LinkList_Unlink(&wr->items, &(ir->header));
  ItemFree(ir);

  /* Search for related (same client) open mount windows, and delete all items from them. */
  while (wrl)
  {
    TRACE1("ItemDelete: open window %x\n", (int) wr);
    if (wrl->client_id == client_id)
    {
      TRACE("ItemDelete: match on client - deleting window contents\n");
      if (wrl->index) FREE(wrl->index);
      wrl->index = NULL;
      wrl->nitems = 0;
      ItemChainFree(wrl);
    }
    wrl = (wind_record *) wrl->header.next;
  }
}


/*  Make a new item from a buffer containing data that has come
 *  from an OmniOp enumerate servers call.
 */
static char *ItemAddServer(wind_record *wr, client_record *cr, char *s, char *e)
{
  item_record *ir = NULL;
  int *ip = NULL;
  char buf[64];
  char *line = NULL;

  TRACE2("ItemAddServer: enter %x %x\n", (int) s, (int) e);
  /* Check for invalid data (too short) */
  if (e < s+7) return(e);
  ir = (item_record *) heap_alloc(sizeof(item_record));
  if (!ir) return(e);

  /* Parse data */
  ip = (int *) s;
  s+=4;
  ir->server_id = *ip;
  ir->client_id = cr->client_id;
  ir->mount_id = -1;
  Desk_LinkList_AddToTail(&wr->items, &(ir->header));
  ir->shortname = cpystr(s++);
  if (ir->shortname) s+=strlen(ir->shortname);
  ir->fullname = cpystr(s++);
  if (ir->fullname) s+=strlen(ir->fullname);
  strncpy(buf, s, 48);
  s+=strlen(buf)+1;
  if (buf[0] == '\n')
  {
    ir->field1 = NULL;
    line = strtok(buf, "\n");
  }
  else
  {
    line = strtok(buf, "\n");
    ir->field1 = cpystr(line);
    line = strtok(NULL, "\n");
  }
  ir->field2 = cpystr(line);
  line = strtok(NULL, "\n");
  ir->field3 = cpystr(line);
  TRACE2("ItemAddServer: %x %x ", ir->server_id, ir->client_id);
  TRACE2("'%s' '%s' ", ir->shortname ? ir->shortname : "", ir->fullname ? ir->fullname : "");
  TRACE2("'%s' '%s' ", ir->field1 ? ir->field1 : "", ir->field2 ? ir->field2 : "");
  TRACE1("'%s'\n", ir->field3 ? ir->field3 : "");
  ir->alias = Desk_FALSE;
  /* Word align */
  if ((int) s % 4 > 0) s+=4-((int) s % 4);
  TRACE2("ItemAddServer: exit %x %x\n", (int) s, (int) e);
  wr->update = Desk_TRUE;
  return(s);
}


/*  Find item in linked list from item text.
 */
static item_record *ItemNameFind(wind_record *wr, char *s)
{
  item_record *r = (item_record *) wr->items.next;

  TRACE("ItemNameFind:\n");
  while (r != NULL)
  {
    TRACE1("ItemNameFind: %x\n", (int) r);
    if ((r->shortname) && (!strcasecmp(r->shortname, s))) return(r);
    if ((r->fullname) && (!strcasecmp(r->fullname, s))) return(r);
    r = (item_record *) r->header.next;
  }
  return(NULL);
}


/*  Add window_record items from the mounts list chain.
 */
static void MListItemAdd(wind_record *wr, int client_id, Desk_bool servers)
{
  mlist_record *mr = (mlist_record *) mlist_anchor.next;
  item_record *ir = NULL;

  TRACE2("MListItemAdd: %x %x\n", (int) wr, client_id);
  while (mr != NULL)
  {
    if (mr->client_id == client_id)
    {
      TRACE1("MListItemAdd: found %x\n", (int) mr);
      if (servers)
      {
        char *dot = NULL;
        char shortname[32];

        /* Valid server items only (not hidden or no server name) */
        TRACE2("MListItemAdd: '%s' hidden? %d\n", mr->server, mr->hidden);
        if ((!mr->server) || (mr->hidden) || (ItemNameFind(wr, mr->server)))
        {
          TRACE("skipping!\n");
          mr = (mlist_record *) mr->header.next;
          continue;
        }
        ir = (item_record *) heap_alloc(sizeof(item_record));
        if (!ir) return;
        ir->server_id = mr->server_id;
        if (ir->server_id == -1) ir->server_id = (int) ir;
        TRACE1("MListItemAdd: new server id %d\n", ir->server_id);
        ir->client_id = mr->client_id;
        ir->mount_id = mr->mount_id;
        Desk_LinkList_AddToTail(&wr->items, &(ir->header));
        /* Shortname is to first '.' character, if one exists */
        strncpy(shortname, mr->server, 31);
        dot = strchr(shortname, '.');
        if (dot) *dot = '\0';
        ir->shortname = cpystr(shortname);
        ir->fullname = cpystr(mr->server);
        TRACE2("MListItemAdd: valid server '%s' '%s'\n", ir->shortname, ir->fullname);
        ir->field1 = NULL;
        ir->field2 = NULL;
        ir->field3 = NULL;
        ir->alias = Desk_FALSE;
      }
      else
      {
        /* Valid mount items only (not hidden) */
        TRACE2("MListItemAdd: mount '%s' hidden? %d\n", mr->server, mr->hidden);
        if ((!mr->server) || (!mr->mount) || (mr->hidden) || (ItemNameFind(wr, mr->mount)))
        {
          TRACE("skipping!\n");
          mr = (mlist_record *) mr->header.next;
          continue;
        }
        /* Correct mounts window? Search by name 'cos we don't have correct server_id */
        ir = ItemNameFind(&wind_filer, mr->server);
        TRACE2("ir->server %x wr->server %x\n", ir->server_id, wr->server_id);
        if ((!ir) || (ir->server_id != wr->server_id) || (ir->client_id != wr->client_id))
        {
          TRACE("skipping! 2\n");
          mr = (mlist_record *) mr->header.next;
          continue;
        }
        ir = (item_record *) heap_alloc(sizeof(item_record));
        if (!ir) return;
        ir->server_id = wr->server_id;
        ir->client_id = mr->client_id;
        ir->mount_id = mr->mount_id;
        Desk_LinkList_AddToTail(&wr->items, &(ir->header));

	/* *** Put in alias name here, not pathname */
        ir->shortname = cpystr(mr->mount);
        ir->fullname = cpystr(mr->path ? mr->path : mr->mount);
        TRACE2("MListItemAdd: valid mount '%s' '%s'\n", ir->shortname, ir->fullname);

        ir->field1 = NULL;
        ir->field2 = NULL;
        ir->field3 = NULL;
        ir->alias = Desk_TRUE;
      }
    }
    mr = (mlist_record *) mr->header.next;
  }
}


/*  Make a new item from a buffer containing data that has come
 *  from an OmniOp enumerate servers call.
 */
static char *ItemAddMount(wind_record *wr, client_record *cr, char *s, char *e)
{
  item_record *ir = NULL;
  int *ip = NULL;

  TRACE2("ItemAddMount: enter %x %x\n", (int) s, (int) e);
  /* Check for invalid data (too short) */
  if (e < s+6) return(e);
  ir = (item_record *) heap_alloc(sizeof(item_record));
  if (!ir) return(e);

  /* Parse data */
  ip = (int *) s;
  s+=4;
  ir->server_id = wr->server_id;
  ir->client_id = cr->client_id;
  ir->mount_id = *ip;
  Desk_LinkList_AddToTail(&wr->items, &(ir->header));
  ir->shortname = cpystr(s++);
  if (ir->shortname) s+=strlen(ir->shortname);
  ir->fullname = cpystr(s++);
  if (ir->fullname) s+=strlen(ir->fullname);
    else ir->fullname = cpystr(ir->shortname);
  ir->field1 = NULL;
  ir->field2 = NULL;
  ir->field3 = NULL;
  ir->alias = Desk_FALSE;
  TRACE2("ItemAddMount: %x %x ", ir->server_id, ir->client_id);
  TRACE1("%x ", ir->mount_id);
  TRACE2("'%s' '%s'\n", ir->shortname ? ir->shortname : "", ir->fullname ? ir->fullname : "");
  /* Word align */
  if ((int) s % 4 > 0) s+=4-((int) s % 4);
  TRACE2("ItemAddMount: exit %x %x\n", (int) s, (int) e);
  wr->update = Desk_TRUE;
  return(s);
}


/*  Call client module for new details of servers/mounts on local network.
 *  Adds records to wind_record items list.
 */
extern void ItemParse(wind_record *wr, int client_id, int server_id)
{
  char blk[144];
  char *end = NULL;
  client_record *cr = NULL;
  Desk_os_error *err = NULL;
  int done = 0;

  /* Check valid client_id word */
  TRACE2("ItemParse: %x %x ", (int) wr, client_id);
  TRACE1("%x\n", server_id);
  if (!wr) return;

  if ((cr = ClientFind(client_id, NULL, -1, NULL)) != NULL)
  {
    if (prog_config.autolocate)
    {
      /* Loop until we have all the information, parsing as we go ... */
      do
      {
        int old_done = done;

        TRACE("ItemParse: loop\n");
        if (server_id != -1)
          err = Desk_SWI(5,4, cr->client_id, 4,blk,96,done,server_id, NULL,&end,NULL,&done);
        else
          err = Desk_SWI(4,4, cr->client_id, 3,blk,144,done, NULL,&end,NULL,&done);
        TRACE2("ItemParse: %x %x ", (int) blk, (int) end);
        TRACE2("done %x err %x\n", done, (int) err);
        if (end == &blk[0]) done = 0;
        /* AppleTalk wants to be able to return errors at this point */
        if (err && cr->client_id == 0x4A640 && old_done == 0) Desk_Error_Check(err);
        if (!err)
        {
          char *p = &blk[0];

          /* Attempt to parse */
          TRACE("ItemParse: parse attempt\n");
          if (server_id != -1) while (p < end) p = ItemAddMount(wr, cr, p, end);
            else while (p < end) p = ItemAddServer(wr, cr, p, end);
        }
      } while ((!err) && (done > 0));
    }

    /* Get any information from the mounts list */
    MListItemAdd(wr, client_id, (server_id == -1));
  }

  /* Rebuild index list, and reset count of nitems, etc, etc */
  if (wr->index) FREE(wr->index);
  wr->index = NULL;
  wr->nitems = ItemCount(wr);
  wr->index = heap_alloc(sizeof(item_record) * wr->nitems);
  if (!wr->index) return;
  /* Sort messages index */
  SortMessages(wr, wr->sort);
  ItemList(wr);
}


/*  Update filer windows (if open).
 */
extern _kernel_oserror *ParseLists(int client_id)
{
  client_record *cr = NULL;
  wind_record *wr = (wind_record *) &wind_filer;
  item_record *ir = (item_record *) wind_filer.items.next;
  Desk_window_state state;
  int loop;

  TRACE1("ParseLists: %x\n", client_id);
  /* Return with no error if no filer windows open */
  if ((!wind_filer.w) && (!wind_filer.anchor.next)) return(NULL);

  /* If a single client scan, release item records for just that client */
  Desk_Hourglass_Start(25);
  if (client_id > 0)
  {
    /* Scan & delete */
    TRACE("ParseLists: single client scan\n");
    while (ir != NULL)
    {
      item_record *ir_tmp = (item_record *) ir->header.next;

      TRACE1("ParseLists: scan %x\n", (int) ir);
      if (ir->client_id == client_id)
      {
        /* Matched! Delete item + any associated windows. Update flag */
        TRACE("ParseLists: matched! delete item\n");
        ItemDelete(wr, ir);
        wr->update = Desk_TRUE;
      }
      ir = ir_tmp;
    }

    /* Call client module for new details, builds new tree */
    ItemParse(wr, client_id, -1);

    /* If any open mount windows that need new information, then parse them */
    ir = (item_record *) wind_filer.items.next;
    while (ir != NULL)
    {
      TRACE1("ParseLists: parse %x\n", (int) ir);
      if ((ir->client_id == client_id) && (wr = FilerFind(-1, -1, client_id, ir->server_id)))
      {
        /* Matched! Fetch & Parse. Update flag */
        TRACE("ParseLists: matched! parse\n");
        ItemParse(wr, client_id, ir->server_id);
        wr->update = Desk_TRUE;
      }
      ir = (item_record *) ir->header.next;
    }
  }
  else
  {
    TRACE("ParseLists: all clients\n");

    /* Scan & delete */
    while (ir != NULL)
    {
      item_record *ir_tmp = (item_record *) ir->header.next;

      TRACE1("ParseLists: matched! delete%x\n", (int) ir);
      /* Matched! Delete item + any associated windows. Update flag */
      ItemDelete(wr, ir);
      wr->update = Desk_TRUE;
      ir = ir_tmp;
    }

    /* Call client module(s) for new details, builds new tree */
    cr = (client_record *) client_anchor.next;
    while (cr != NULL)
    {
      ItemParse(wr, cr->client_id, -1);
      cr = (client_record *) cr->header.next;
    }

    /* If any open mount windows that need new information, then parse them */
    ir = (item_record *) wind_filer.items.next;
    while (ir != NULL)
    {
      TRACE1("ParseLists: fetch %x\n", (int) ir);
      if (wr = FilerFind(-1, -1, ir->client_id, ir->server_id))
      {
        /* Matched! Fetch & Parse. Update flag */
        TRACE("ParseLists: matched! parse\n");
        ItemParse(wr, ir->client_id, ir->server_id);
        wr->update = Desk_TRUE;
      }
      ir = (item_record *) ir->header.next;
    }
  }

  /* If any empty mount windows left on screen, delete them now */
  TRACE("ParseLists: scan for empty windows\n");
  wr = (wind_record *) wind_filer.anchor.next;
  while (wr != NULL)
  {
    wind_record *wr_tmp = (wind_record *) wr->header.next;
    TRACE1("ParseLists: scan %x\n", (int) wr);
    if (wr->items.next == NULL)
    {
      FilerDelete(wr);
      Menu_Close();
      Desk_menu_currentopen = NULL;
    }
    wr = wr_tmp;
  }

  /* Update the item numbers of any mount windows */
  if (wind_filer.anchor.next)
  {
    for (loop = 0; loop < wind_filer.nitems; loop++)
    {
      item_record *ir = wind_filer.index[loop];
      TRACE("ParseLists: reset item numbers\n");
      if (wr = FilerFind(-1, -1, ir->client_id, ir->server_id))
      {
        TRACE2("ParseLists: %d -> %d\n", wr->item, loop+1);
        wr->item = loop+1;
      }
    }
  }

  /* If any server/mount windows need a redraw, let's do it! */
  if (wind_filer.update)
  {
    TRACE("ParseLists: forced main redraw\n");
    Desk_Wimp_GetWindowState(wind_filer.w, &state);
    FilerUpdateWidth(&wind_filer);
    FilerResetExtent(&state.openblock, &wind_filer, Desk_TRUE, Desk_FALSE);
    wind_filer.update = Desk_FALSE;
  }
  wr = (wind_record *) wind_filer.anchor.next;
  while (wr != NULL)
  {
    TRACE1("ParseLists: redraw %x\n", (int) wr);
    if (wr->update)
    {
      TRACE("ParseLists: force mount redraw\n");
      Desk_Wimp_GetWindowState(wr->w, &state);
      FilerUpdateWidth(wr);
      FilerResetExtent(&state.openblock, wr, Desk_TRUE, Desk_FALSE);
      wr->update = Desk_FALSE;
    }
    wr = (wind_record *) wr->header.next;
  }

  /* Operation complete! (phew) */
  TRACE("ParseLists: exiting\n");
  Desk_Hourglass_Off();
  return(NULL);
}


/*  Create/modify a mount list entry for this.
 */
static Desk_bool MListAdd(int client_id, int mount_id, char *mount)
{
  Desk_bool temporary = Desk_FALSE;
  Desk_bool error;
  char *r1, *r2, *r3, *r4, *r5;
  int r6;
  mlist_record *mr = NULL;

  /* Check for a valid mount alias */
  TRACE2("MListAdd: %x %x ", client_id, mount_id);
  TRACE1("'%s'\n", (mount) ? mount : "");

  /* New, or existing item in list ? */
  mr = MountFind(-1, mount, -1, client_id);
  if (mr)
  {
    RMAFREE(mr->server);
    RMAFREE(mr->user);
    RMAFREE(mr->mount);
    RMAFREE(mr->path);
    RMAFREE(mr->auth);
    mr->mount_id = mount_id;
  }
  else
  {
    /* Create temporary item */
    mr = (mlist_record *) rma_alloc(sizeof(mlist_record));
    if (mr == NULL)
    {
      Desk_Error_OutOfMemory(Desk_FALSE, "mount list header");
      return(Desk_FALSE);
    }
    Desk_LinkList_AddToTail(&mlist_anchor, &(mr->header));
    mr->server_id = -1;
    mr->mount_id = mount_id;
    mr->client_id = client_id;
    mr->server = NULL;
    mr->user = NULL;
    mr->passwd = NULL;
    mr->mount = NULL;
    mr->path = NULL;
    mr->auth = NULL;
    mr->transient = Desk_TRUE;
    mr->hidden = Desk_FALSE;
    mr->locked = Desk_FALSE;
    mr->preset = Desk_FALSE;
    mr->connected = Desk_FALSE;
    temporary = Desk_TRUE;
    mr->open = Desk_FALSE;
  }

  /* Re-read mount fields back from successful mount */
  r1 = r2 = r3 = r4 = r5 = NULL;
  r6 = 0;
  error = Desk_Error_Check(Desk_SWI(2,7, mr->client_id, 9,mr->mount_id, NULL,&r1,&r2,&r3,&r4,&r5,&r6));
  if (!error)
  {
    mr->server = cpyrma(r1);
    mr->user = cpyrma(r2);
    if (temporary) mr->passwd = NULL;
    mr->mount = cpyrma(r3);
    mr->path = cpyrma(r4);
    mr->auth = cpyrma(r5);
    mr->server_id = r6;
  }
  TRACE2("MListAdd: %x %x\n", error, mr->mount_id);
  TRACE2("MListAdd: '%s' '%s'\n", (mr->server) ? mr->server : "", (mr->mount) ? mr->mount : "");
  if (error)
  {
    mr->mount_id = -1;
    MountDeleteList(mr);
    return(Desk_FALSE);
  }
  return(Desk_TRUE);
}


/*  Make a new mount from a buffer containing data that has come
 *  from an OmniOp enumerate active mounts call.
 */
static char *MountAdd(client_record *cr, char *s, char *e)
{
  mlist_record mr;
  mlist_record *mrl;
  int *ip = NULL;

  TRACE2("MountAdd: enter %x %x\n", (int) s, (int) e);
  /* Check for invalid data (too short) */
  if (e < s+12) return(e);

  /* Parse data */
  ip = (int *) s;
  s+=8;
  mr.server_id = *ip++;
  mr.client_id = cr->client_id;
  mr.mount_id = *ip;
  mr.mount = cpystr(s++);
  if (mr.mount) s+=strlen(mr.mount);

  /* See if we have an associated mlist entry, possibly with HIDDEN set */
  mrl = MountFind(-1, mr.mount, -1, -1);
  if (mrl) mrl->connected = Desk_TRUE;
  if ((!mrl) || (!mrl->hidden))
  {
    if (!MountCreate(&mr)) return(e);
    TRACE2("MountAdd: %x %x ", mr.server_id, mr.client_id);
    TRACE1("%x ", mr.mount_id);
    TRACE1("'%s'\n", mr.mount);
    /* Make sure we have an Mount list entry for this */
    if (!MListAdd(cr->client_id, mr.mount_id, mr.mount)) return(e);
  }
  /* Word align */
  if ((int) s % 4 > 0) s+=4-((int) s % 4);
  TRACE2("MountAdd: exit %x %x\n", (int) s, (int) e);
  return(s);
}


/*  Call client module for new details of active mounts.
 *  Adds records to mount_anchor mounts list.
 */
extern void MountParse(int client_id)
{
  char blk[33];
  char *end = NULL;
  client_record *cr = NULL;
  Desk_os_error *err = NULL;
  int done = 0;

  /* Check valid client_id word */
  TRACE1("MountParse: %x\n", client_id);
  if ((cr = ClientFind(client_id, NULL, -1, NULL)) == NULL) return;

  /* Loop until we have all the information, parsing as we go ... */
  do
  {
    TRACE("MountParse: loop\n");
    err = Desk_SWI(4,4, cr->client_id, 5,blk,32,done, NULL,&end,NULL,&done);
    TRACE2("MountParse: %x %x ", (int) blk, (int) end);
    TRACE2("done %x err %x\n", done, (int) err);
    if (end == &blk[0]) done = 0;
    if (!err)
    {
      char *p = &blk[0];

      /* Attempt to parse */
      TRACE("MountParse: parse attempt\n");
      while (p < end) p = MountAdd(cr, p, end);
    }
  } while ((!err) && (done > 0));
}


/*  Update icons on iconbar (active mounts).
 */
extern _kernel_oserror *ParseMounts(int client_id)
{
  client_record *cr = NULL;
  mount_record *mr = (mount_record *) mount_anchor.next;
  Desk_bool update = Desk_FALSE;

  TRACE1("ParseMounts: client %x\n", client_id);

  /* If a single client scan, release mount records for just that client */
  if (client_id > 0)
  {
    /* Scan & delete */
    while (mr != NULL)
    {
      mount_record *mr_tmp = (mount_record *) mr->header.next;

      TRACE1("ParseMounts: mr %x\n", (int) mr);
      if (mr->client_id == client_id)
      {
        /* Matched! Delete mount. Update flag */
        MountDelete(mr);
        update = Desk_TRUE;
      }
      mr = mr_tmp;
    }

    /* Valid client_id ? */
    if (!(cr = ClientFind(client_id, NULL, -1, NULL))) return(NULL);
    TRACE("ParseMounts: valid client\n");

    /* Call client module for new details, builds new tree */
    MountParse(client_id);
  }
  else
  {
    TRACE("ParseMounts: all clients\n");
    /* Scan & delete */
    while (mr != NULL)
    {
      mount_record *mr_tmp = (mount_record *) mr->header.next;

      TRACE1("ParseMounts: mr %x\n", (int) mr);
      /* Matched! Delete mount. Update flag */
      MountDelete(mr);
      update = Desk_TRUE;
      mr = mr_tmp;
    }

    /* Call client module(s) for new details, builds new tree */
    cr = (client_record *) client_anchor.next;
    while (cr != NULL)
    {
      MountParse(cr->client_id);
      cr = (client_record *) cr->header.next;
    }
  }

  /* Operation complete! (phew) */
  TRACE("ParseMounts: exiting\n");
  return(NULL);
}


/*  Make a new printer from a buffer containing data that has come
 *  from an OmniOp enumerate network printers call.
 */
static char *PrinterAdd(client_record *cr, char *s, char *e)
{
  plist_record *pr;
  int *ip = NULL;

  TRACE2("PrinterAdd: enter %x %x\n", (int) s, (int) e);
  /* Check for invalid data (too short) */
  if (e < s+12) return(e);
  pr = rma_alloc(sizeof(plist_record));
  if (!pr) return(e);

  /* Parse data */
  ip = (int *) s;
  s+=4;
  pr->client_id = cr->client_id;
  pr->flags = *ip;
  pr->printer = cpyrma(s++);
  if (pr->printer) s+=strlen(pr->printer);
  pr->server = cpyrma(s++);
  if (pr->server) s+=strlen(pr->server);
  Desk_LinkList_AddToTail(&plist_anchor, &(pr->header));

  TRACE2("PrinterAdd: %x %x ", pr->client_id, pr->flags);
  TRACE2("'%s' '%s'\n", pr->server, pr->printer);
  /* Word align */
  if ((int) s % 4 > 0) s+=4-((int) s % 4);
  TRACE2("PrinterAdd: exit %x %x\n", (int) s, (int) e);
  return(s);
}


/*  Call client module for new details of network printers.
 *  Adds records to plist_anchor printers list.
 */
extern void PrinterParse(int client_id)
{
  char blk[97];
  char *end = NULL;
  client_record *cr = NULL;
  Desk_os_error *err = NULL;
  int done = 0;

  /* Check valid client_id word */
  TRACE1("PrinterParse: %x\n", client_id);
  if ((cr = ClientFind(client_id, NULL, -1, NULL)) == NULL) return;

  /* Loop until we have all the information, parsing as we go ... */
  do
  {
    TRACE("PrinterParse: loop\n");
    err = Desk_SWI(4,4, cr->client_id, 16,blk,96,done, NULL,&end,NULL,&done);
    TRACE2("PrinterParse: %x %x ", (int) blk, (int) end);
    TRACE2("done %x err %x\n", done, (int) err);
    if (end == &blk[0]) done = 0;
    if (!err)
    {
      char *p = &blk[0];

      /* Attempt to parse */
      TRACE("PrinterParse: parse attempt\n");
      while (p < end) p = PrinterAdd(cr, p, end);
    }
  } while ((!err) && (done > 0));
}


/*  Update network printers list.
 */
extern _kernel_oserror *ParsePrinters(int client_id)
{
  client_record *cr = NULL;
  plist_record *mr = (plist_record *) plist_anchor.next;

  TRACE1("ParsePrinters: client %x\n", client_id);

  /* If a single client scan, release printer records for just that client */
  if (client_id > 0)
  {
    /* Scan & delete */
    while (mr != NULL)
    {
      plist_record *mr_tmp = (plist_record *) mr->header.next;

      TRACE1("ParsePrinters: mr %x\n", (int) mr);
      if (mr->client_id == client_id)
      {
        /* Matched! Delete mount. Update flag */
        PListClear(mr);
      }
      mr = mr_tmp;
    }

    /* Valid client_id ? */
    if (!(cr = ClientFind(client_id, NULL, -1, NULL))) return(NULL);
    TRACE("ParsePrinters: valid client\n");

    /* Call client module for new details, builds new tree */
    PrinterParse(client_id);
  }
  else
  {
    TRACE("ParsePrinters: all clients\n");
    /* Scan & delete */
    while (mr != NULL)
    {
      plist_record *mr_tmp = (plist_record *) mr->header.next;

      TRACE1("ParsePrinters: mr %x\n", (int) mr);
      /* Matched! Delete mount. Update flag */
      PListClear(mr);
      mr = mr_tmp;
    }

    /* Call client module(s) for new details, builds new tree */
    cr = (client_record *) client_anchor.next;
    while (cr != NULL)
    {
      PrinterParse(cr->client_id);
      cr = (client_record *) cr->header.next;
    }
  }

#ifdef DEBUG
  mr = (plist_record *) plist_anchor.next;
  while (mr)
  {
    TRACE1("ParsePrinters: mr %x\n", (int) mr);
    TRACE2("client_id %x flags %x ", mr->client_id, mr->flags);
    TRACE2("'%s' '%s'\n", mr->server, mr->printer);
    mr = (plist_record *) mr->header.next;
  }
#endif

  /* Operation complete! (phew) */
  TRACE("ParsePrinters: exiting\n");
  return(NULL);
}
