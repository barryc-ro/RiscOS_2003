/*
 * Program:	Omni.c - core task routines
 *
 * Project:	!Omni OmniClient(tm) project
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	11 July 1994
 * Last Edited:	19 October 1994
 *
 * Copyright 1994 by ANT Limited
 */

#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>

#include <Desk/Error2.h>
#include <Desk/Event.h>
#include <Desk/Hourglass.h>
#include <Desk/WimpSWIs.h>

#include <DebugLib/DebugLib.h>

#include "Core.h"
#include "CoreFini.h"
#include "CoreInit.h"
#include "ExtLib.h"
#include "Filer.h"
#include "Mount.h"
#include "Omni.h"

/*  atexit() handler - called before final task exit.
 */
extern void close(void)
{
  dprintf (("", "main:close\n"));
  corefini();
  Desk_Hourglass_Smash();
  taskhandle = 0;
}


/*  Actual task code.
 */
extern int main(int argc, char *argv[])
{
  dprintf (("", "main:program start\n"));

  Desk_Error2_Try
  {
    /* Do Application Initialisation */
    if (!coreinit())
    {
      Desk_Error2_HandleText ("initialisation failed");
    }

    /* Extra parameters string */
    if (argc > 1)
    {
      char buf[256];
      int loop;
      strcpy(buf, "");
      for (loop = 1; loop < argc; loop++)
      {
        strcat(buf, argv[loop]);
        strcat(buf, " ");
      }
      MountCLI(buf, true);
    }

    /* Main event handling loop. Let Desk_Event_ do all the work for us! */
    dprintf (("", "main:start polling\n"));
    while (all_done == 0)
    {
      Event_Poll();
    }


    /* Finally, we just exit. The atexit() handlers will clean up after us */
    dprintf (("", "main:normal termination\n"));
    if (all_done > 1)
    {
      /* Kill off all modules and ourselves */
      dprintf (("", "main:exitanddie termination\n"));
      serviceomni(1);
      _swix (OS_ExitAndDie, _INR (0, 3), 0,0,0,"OmniClient");
      dprintf (("", "main:exitanddie - why aren't we dead?!\n"));
    }
    else
    {
      /* Clean up some RMA lists */
      mlist_clean();
    }
  }
  Desk_Error2_Catch
  {
    Desk_os_error *e = Desk_Error2_ConvertToOS2 ();
    Desk_Error_Report(e->errnum, e->errmess);
    return EXIT_FAILURE;
  }
  Desk_Error2_EndCatch

  return EXIT_SUCCESS;
}
