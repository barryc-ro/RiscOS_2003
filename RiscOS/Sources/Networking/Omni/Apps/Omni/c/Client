/*
 * Program:	Client.c - core application routines
 *
 * Project:	!Omni OmniClient(tm) project
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	24 August 1994
 * Last Edited:	23 October 1994
 *
 * Copyright 1994 by ANT Limited
 */

#include <assert.h>
#include <stdbool.h>
#include <stdio.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>

#include <Desk/ColourTran.h>
#include <Desk/Msgs.h>
#include <Desk/Resource.h>
#include <Desk/Screen.h>
#include <Desk/Str.h>

#include <DebugLib/DebugLib.h>

#include "Client.h"
#include "Core.h"
#include "ExtLib.h"
#include "Filer.h"
#include "Heap.h"
#include "MakeError.h"

enum
{
  ClientOp_Mount                 = 0,
  ClientOp_Dismount              = 1,
  ClientOp_Free                  = 2,
  ClientOp_EnumerateServers      = 3,
  ClientOp_EnumerateServerMounts = 4,
  ClientOp_EnumerateActiveMounts = 5,
  ClientOp_OpenRoot              = 6,
  ClientOp_OpenUserRoot          = 7,
  ClientOp_GetInactiveMountInfo  = 8,
  ClientOp_GetActiveMountInfo    = 9,
  ClientOp_CreatePrintJob        = 10,
  ClientOp_SendPrintData         = 11,
  ClientOp_EndPrintJob           = 12,
  ClientOp_AbortPrintJobs        = 13,
  ClientOp_GetPrintJobInfo       = 14,
  ClientOp_ClearPrintJobs        = 15,
  ClientOp_EnumeratePrinters     = 16,
  ClientOp_DomainLogout          = 17
};

/*  Register a new Client protocol.
 */
extern client_record *ClientCreate(_kernel_swi_regs *r)
{
  client_record *cr = NULL;

  dprintf (("", "ClientCreate:create new client protocol\n"));
  if (r->r[0] <= 0)
  {
    r->r[0] = (int) MakeError(err_BADPROTOCOL);
    return(NULL);
  }
  if ((cr = ClientFind(r->r[0], NULL, -1, NULL)) != NULL) return(cr);
  cr = (client_record *) rma_alloc(sizeof(client_record));
  if (cr == NULL)
  {
    r->r[0] = (int) MakeError(err_NOMEM_REGISTRATION);
    return(NULL);
  }

  Desk_LinkList_AddToTail(&client_anchor, &(cr->header));
  cr->client_id = r->r[0];
  cr->flags = r->r[1];
  cr->spritename = cpyrma((char *) r->r[2]);
  cr->clientname = cpyrma((char *) r->r[3]);
  cr->clientdesc = cpyrma((char *) r->r[4]);
  cr->site_id = r->r[5];
  cr->fsname = cpyrma((char *) r->r[6]);
  dprintf (("", "ClientCreate:new client list length %d\n", Desk_LinkList_ListLength(&client_anchor)));
  return(cr);
}


/*  Delete an Client protocol entry.
 */
extern void ClientDelete(client_record *cr)
{
  dprintf (("", "ClientDelete:\n"));

  if (cr == NULL) return;
  if (cr->client_id != -1)
  {
    /* Close any active protocol mounts ? */
  }

  Desk_LinkList_Unlink(&client_anchor, &(cr->header));
  RMAFREE(cr);
  dprintf (("", "ClientDelete:new clients list length %d\n", Desk_LinkList_ListLength(&client_anchor)));
}


/*  Return number of items in Client linked list.
 */
extern int ClientCount(void)
{
  client_record *cr = (client_record *) client_anchor.next;
  int count = 0;

  while (cr != NULL)
  {
    count++;
    cr = (client_record *) cr->header.next;
  }
  return(count);
}


/*  Find item in linked list from either client_id (name=NULL) or name.
 *  OR from menuitem (if menuitem != -1)
 */
extern client_record *ClientFind(int client_id, char *name, int menuitem, char *fsname)
{
  client_record *cr = (client_record *) client_anchor.next;
  int loop = 0;
  int searchtype = 0;

  dprintf (("", "ClientFind:\n"));
  if (name != NULL) searchtype = 1;
  if (menuitem != -1) searchtype = 2;
  if (fsname != NULL) searchtype = 3;
  while (cr != NULL)
  {
    dprintf (("", "ClientFind: %x\n", (int) cr));
    if (searchtype == 2 && flagSET(cr, flag_SPECIAL))
    {
      cr = (client_record *) cr->header.next;
      continue;
    }
    switch (searchtype)
    {
      case 0: if (cr->client_id == client_id) return(cr);
              break;
      case 1: if (!Desk_stricmp(cr->clientname, name)) return(cr);
              break;
      case 2: dprintf (("", "ClientFind: %d %d\n", menuitem, loop));
	      if (menuitem == loop) return(cr);
	      break;
      case 3: dprintf (("", "ClientFind: %s %s\n", cr->fsname, fsname));
              if (!Desk_stricmp(cr->fsname, fsname)) return(cr);
              break;
      default:
        break;
    }
    loop++;
    cr = (client_record *) cr->header.next;
  }
  return(NULL);
}


/*  Build a menu list of currently registered clients.
 *  Returns NULL if no clients registered.
 */
static char *ClientList(bool dboxes)
{
  static char menu[512];
  client_record *r = (client_record *) client_anchor.next;
  char buf[128];
  char *p;

  /* Initialise menu */
  if (r == NULL) return(NULL);

  /* Build list of client names */
  strcpy(menu, "");
  while (r != NULL)
  {
    if (flagSET(r, flag_SPECIAL))
    {
      r = (client_record *) r->header.next;
      continue;
    }
    if (dboxes) sprintf(buf, ">%s, ", r->clientname);
      else sprintf(buf, "%s%s, ", flagSET(r, flag_FS) ? "" : "~", r->clientname);
    strcat(menu, buf);
    r = (client_record *) r->header.next;
  }
  p = strrchr(menu, ',');
  if (p && !strcmp(p, ", ")) *p = '\0';
  dprintf (("", "ClientList: %s\n", menu));
  return((char *) &menu[0]);
}


/*  Build a menu of currently registered clients.
 */
extern Desk_menu_ptr ClientMakeMenu(Desk_menu_ptr oldmenu)
{
  char *menu = ClientList(Desk_FALSE);
  char tmp[32];
  char txt[32];

  /* Initialise menu */
  if (oldmenu != NULL) Menu_Dispose(oldmenu);
  /* Create menu */
  Desk_Msgs_Lookup("mhdr.icon_mo", tmp, 31);
  Desk_Msgs_Lookup("menu.icon_mo", txt, 31);
  if (menu == NULL) return(Desk_Menu_New(tmp, txt));
    else return(Desk_Menu_New(tmp, menu));
}


/*  Build an info menu of currently registered clients.
 */
extern Desk_menu_ptr ClientMakeInfoMenu(Desk_menu_ptr oldmenu)
{
  char icon[32];
  char tmp[32];
  char menu[512];
  char *m = ClientList(Desk_TRUE);

  /* Initialise menu */
  if (oldmenu != NULL) Menu_Dispose(oldmenu);
  /* Create menu */
  if (m == NULL) return(NULL);
  Desk_Msgs_Lookup("menu.icon_i", icon, 31);
  Desk_Msgs_Lookup("mhdr.icon_i", tmp, 31);
  sprintf(menu, "%s|%s", icon, m);
  dprintf (("", menu));
  return(Desk_Menu_New(tmp, menu));
}


extern _kernel_oserror *ClientMount (int           client_id,
                                     const char *  server,
                                     const char *  user,
                                     const char *  pw,
                                     const char *  mount,
                                     const char *  path,
                                     const char *  auth,
                                     int *         mount_id)
{
  /* Have to use _kernel_swi for this call because Omni code relies on output
   * parameters being filled in even if an error occurs, and _swix does not
   * do this.
   */

  _kernel_swi_regs   r;
  _kernel_oserror *  e;

  assert (mount_id != NULL);

  r.r[0] = ClientOp_Mount;
  r.r[1] = (int) server;
  r.r[2] = (int) user;
  r.r[3] = (int) pw;
  r.r[4] = (int) mount;
  r.r[5] = (int) path;
  r.r[6] = (int) auth;

  e = _kernel_swi (client_id, &r, &r);

  *mount_id = r.r[1];

  return e;
}


extern _kernel_oserror *ClientDismount (int  client_id,
                                        int  mount_id)
{
  return _swix (client_id, _INR (0, 1),
                ClientOp_Dismount, mount_id);
}


extern _kernel_oserror *ClientEnumerateServers (int           client_id,
                                                char *        buffer,
                                                unsigned int  buffer_size,
                                                int           context,
                                                char **       buffer_out,
                                                int *         context_out)
{
  return _swix (client_id, _INR (0, 3) | _OUT (1) | _OUT (3),
                ClientOp_EnumerateServers, buffer, buffer_size, context,
                buffer_out, context_out);
}


extern _kernel_oserror *ClientEnumerateServerMounts (int           client_id,
                                                     char *        buffer,
                                                     unsigned int  buffer_size,
                                                     int           context,
                                                     int           server_id,
                                                     char *        server_name,
                                                     char **       buffer_out,
                                                     int *         context_out)
{
  return _swix (client_id, _INR (0, 5) | _OUT (1) | _OUT (3),
                ClientOp_EnumerateServerMounts, buffer, buffer_size, context, server_id, server_name,
                buffer_out, context_out);
}


extern _kernel_oserror *ClientEnumerateActiveMounts (int           client_id,
                                                     char *        buffer,
                                                     unsigned int  buffer_size,
                                                     int           context,
                                                     char **       buffer_out,
                                                     int *         context_out)
{
  return _swix (client_id, _INR (0, 3) | _OUT (1) | _OUT (3),
                ClientOp_EnumerateActiveMounts, buffer, buffer_size, context,
                buffer_out, context_out);
}


extern _kernel_oserror *ClientOpenRoot (int  client_id,
                                        int  mount_id)
{
  return _swix (client_id, _INR (0, 1),
                ClientOp_OpenRoot, mount_id);
}


extern _kernel_oserror *ClientOpenUserRoot (int  client_id,
                                            int  mount_id)
{
  return _swix (client_id, _INR (0, 1),
                ClientOp_OpenUserRoot, mount_id);
}


extern _kernel_oserror *ClientGetInactiveMountInfo (int     client_id,
                                                    int     server_id,
                                                    char *  mount_path,
                                                    int *   flags)
{
  assert (flags != NULL);

  return _swix (client_id, _INR (0, 2) | _OUT (1),
                ClientOp_GetInactiveMountInfo, server_id, mount_path,
                flags);
}


extern _kernel_oserror *ClientGetActiveMountInfo (int      client_id,
                                                  int      mount_id,
                                                  char **  server,
                                                  char **  user,
                                                  char **  mount,
                                                  char **  path,
                                                  char **  auth,
                                                  int *    server_id)
{
  assert (server    != NULL &&
          user      != NULL &&
          mount     != NULL &&
          path      != NULL &&
          auth      != NULL &&
          server_id != NULL);

  return _swix (client_id, _INR (0, 1) | _OUTR (1, 6),
                ClientOp_GetActiveMountInfo, mount_id,
                server, user, mount, path, auth, server_id);
}


extern _kernel_oserror *ClientCreatePrintJob (int             client_id,
                                              const char *    server_name,
                                              const char *    printer_name,
                                              const char *    user_name,
                                              const char *    password,
                                              const char *    options,
                                              unsigned int    size,
                                              int *           pjob_id)
{
  assert (pjob_id != NULL);

  /* Ensure that pjob_id will be set to 0 if an error occurs */
  *pjob_id = 0;

  return _swix (client_id, _INR (0, 6) | _OUT (1),
                ClientOp_CreatePrintJob, server_name, printer_name, user_name, password, options, size,
                pjob_id);
}


extern _kernel_oserror *ClientSendPrintData (int             client_id,
                                             int             pjob_id,
                                             char *          data,
                                             unsigned int    size,
                                             unsigned int *  remaining)
{
  assert (remaining != NULL);

  return _swix (client_id, _INR (0, 3) | _OUT (3),
                ClientOp_SendPrintData, pjob_id, data, size,
                remaining);
}


extern _kernel_oserror *ClientEndPrintJob (int  client_id,
                                           int  pjob_id)
{
  return _swix (client_id, _INR (0, 1),
                ClientOp_EndPrintJob, pjob_id);
}


extern _kernel_oserror *ClientAbortPrintJobs (int  client_id,
                                              int  pjob_id)
{
  return _swix (client_id, _INR (0, 1),
                ClientOp_AbortPrintJobs, pjob_id);
}


extern _kernel_oserror *ClientGetPrintJobInfo (int             client_id,
                                               int             pjob_id,
                                               unsigned int *  local_status,
                                               unsigned int *  local_bytes_sent,
                                               void **         local_err_status_ptr,
                                               unsigned int *  remote_status,
                                               unsigned int *  remote_bytes_sent,
                                               void **         remote_err_status_ptr)
{
  /* This uses _kernel_swi instead of _swix because I want some
   * outputs to be optional (i.e. not filled in if they're NULL),
   * which is much easier to do with _kernel_swi.
   */

  _kernel_swi_regs   r;
  _kernel_oserror *  e;

  r.r[0] = ClientOp_GetPrintJobInfo;
  r.r[1] = pjob_id;

  e = _kernel_swi (client_id, &r, &r);

  if (local_status != NULL)
  {
    *local_status = r.r[1];
  }
  if (local_bytes_sent != NULL)
  {
    *local_bytes_sent = r.r[2];
  }
  if (local_err_status_ptr != NULL)
  {
    *local_err_status_ptr = (void *) r.r[3];
  }
  if (remote_status != NULL)
  {
    *remote_status = r.r[4];
  }
  if (remote_bytes_sent != NULL)
  {
    *remote_bytes_sent = r.r[5];
  }
  if (remote_err_status_ptr != NULL)
  {
    *remote_err_status_ptr = (void *) r.r[6];
  }

  return e;
}


extern _kernel_oserror *ClientClearPrintJobs (int  client_id,
                                              int  pjob_id)
{
  return _swix (client_id, _INR (0, 1),
                ClientOp_ClearPrintJobs, pjob_id);
}


extern _kernel_oserror *ClientEnumeratePrinters (int           client_id,
                                                 char *        buffer,
                                                 unsigned int  buffer_size,
                                                 int           context,
                                                 char **       buffer_out,
                                                 int *         context_out)
{
  return _swix (client_id, _INR (0, 3) | _OUT (1) | _OUT (3),
                ClientOp_EnumeratePrinters, buffer, buffer_size, context,
                buffer_out, context_out);
}


extern _kernel_oserror *ClientDomainLogout (int  client_id)
{
  return _swix (client_id, _IN (0),
                ClientOp_DomainLogout);
}
