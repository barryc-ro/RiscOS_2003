/*
 * Program:	Redraw.c - deal with user redraw operations
 *
 * Project:	!Omni OmniClient(tm) project
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	25 September 1994
 * Last Edited:	15 November 1994
 *
 * Copyright 1994 by ANT Limited
 */

/* #undef DEBUG */
#include <Desk/Coord.h>
#include <Desk/Event.h>
#include <Desk/GFX.h>
#include <Desk/Hourglass.h>
#include <Desk/LinkList.h>
#include <Desk/WimpSWIs.h>

#include "Hdrs.h"
#include "Redraw.h"
#include "heap.h"

/* Private data structure */
typedef struct
{
  Desk_linklist_header 	header;		/* Link list pointers */
  int 			*nitems; 	/* ptr to max # items */
  int 			*witems; 	/* ptr to max # items horizontally */
  int			*height;	/* ptr to vertical height from bottom of item to next */
  int			*width;		/* ptr to width of item to redraw */
  int			*fwidth;	/* ptr to field width of item */
  Desk_window_handle 	w;
  redraw_itemproc 	proc;
  void			*record;	/* private struct needed to build the redraw item */
  Desk_wimp_point		origin;		/* workarea origin to start drawing items */
  Desk_bool			wkcoords;	/* Work area or screen coords */
} redraw_record;

Desk_linklist_header 	redraw_anchor = {NULL, NULL};	/* List of redraw ops */


/*  Redraw error
 *  Should probably close appropriate window & give error message
 */
static Desk_bool RedrawError(Desk_window_redrawblock *r, char *s)
{
  (r = r);
  (s = s);
  TRACE1("RedrawError = %s!\n", s);
  Desk_Hourglass_Off();
  return(Desk_FALSE);
}


/*  Shared redraw code (for both Desk_event_REDRAW and forced Update_Window.
 *  Called with redrawblock from either Desk_Wimp_RedrawWindow or Desk_Wimp_UpdateWindow.
 */
static Desk_bool RedrawCode(Desk_window_redrawblock *r, redraw_record *rr, Desk_bool update)
{
  Desk_bool more = Desk_TRUE;
  int  osx = 0, osy = 0;

  /* Nothing to redraw ? */
  TRACE("RedrawCode:\n");
  if (*rr->nitems == 0)
  {
    while (more)
      Desk_Wimp_GetRectangle(r, &more);
    return(Desk_TRUE);
  }

  /* If we supply screen coords, need 2 adjusters ... */
  if (!rr->wkcoords)
  {
    Desk_convert_block c;
    Desk_wimp_point origin;

    c.screenrect.min.x = r->rect.min.x;
    c.screenrect.min.y = r->rect.min.y;
    c.screenrect.max.x = r->rect.max.x;
    c.screenrect.max.y = r->rect.max.y;
    c.scroll.x = r->scroll.x;
    c.scroll.y = r->scroll.y;
    Desk_Coord_WindowOrigin(&origin, &c);
    osx = origin.x;
    osy = origin.y;
    TRACE2("RedrawCode: osx %d osy %d\n", osx, osy);
  }

  Desk_Hourglass_Start(40);
  while (more)
  {
    Desk_wimp_box	rect;
    int 	itemx, itemy;
    Desk_bool 	ok = Desk_TRUE;
    Desk_wimp_point 	origin;
    int 	hitems = (*rr->nitems / *rr->witems) + 1;
    int		tmp;

    /* Dummy output - black line around screen area to redraw*/
    TRACE("RedrawCode: loop\n");
    /* Desk_Wimp_SetColour(colour_BLACK);
    Desk_GFX_Rectangle(r->cliprect.min.x, r->cliprect.min.y,
      r->cliprect.max.x - r->cliprect.min.x - 2,
      r->cliprect.max.y - r->cliprect.min.y - 2); */

    TRACE2("RedrawCode: hitems %d witems %d\n", hitems, *rr->witems);

    /* Work out *rect* for rectangle.
     * We go to some effort to get this right - values out of bounds should be taken care
     * of by the boundary limit checks in any case.
     */
    tmp = r->cliprect.min.x - (r->rect.min.x - r->scroll.x - rr->origin.x);
    rect.min.x = (tmp / *rr->fwidth) + (((tmp % *rr->fwidth) > 0) ? 1 : 0)+((tmp == 0) ? 1 : 0);
    tmp = r->cliprect.max.x - (r->rect.min.x - r->scroll.x - rr->origin.x);
    rect.max.x = (tmp / *rr->fwidth) + (((tmp % *rr->fwidth) > 0) ? 1 : 0)+((tmp == 0) ? 1 : 0);
    TRACE2("RedrawCode: minx %d maxx %d\n", rect.min.x, rect.max.x);
    tmp = (r->rect.max.y - r->scroll.y + rr->origin.y) - r->cliprect.max.y;
    rect.min.y = (tmp / *rr->height) + (((tmp % *rr->height) > 0) ? 1 : 0)+((tmp == 0) ? 1 : 0);
    tmp = (r->rect.max.y - r->scroll.y + rr->origin.y) - r->cliprect.min.y;
    rect.max.y = (tmp / *rr->height) + (((tmp % *rr->height) > 0) ? 1 : 0)+((tmp == 0) ? 1 : 0);
    TRACE2("RedrawCode: miny %d maxy %d\n", rect.min.y, rect.max.y);

    /* Boundary checks for crap code */
    if (rect.min.x < 1) rect.min.x = 1;
    if (rect.max.x < 1) ok = Desk_FALSE;
    if (rect.min.x > *rr->witems) ok = Desk_FALSE;
    if (rect.max.x > *rr->witems) rect.max.x = *rr->witems;
    TRACE2("RedrawCode: limit minx %d maxx %d\n", rect.min.x, rect.max.x);
    if (rect.min.y < 1) rect.min.y = 1;
    if (rect.max.y < 1) ok = Desk_FALSE;
    if (rect.min.y > hitems) ok = Desk_FALSE;
    if (rect.max.y > hitems) rect.max.y = hitems;
    TRACE2("RedrawCode: limit miny %d maxy %d\n", rect.min.y, rect.max.y);
    if (!ok) TRACE("RedrawCode: *** BROKEN ***\n");

    /* Iterate through items */
    origin.x = rr->origin.x + ((rect.min.x-1) * *rr->fwidth);
    origin.y = -(rect.min.y * *rr->height) + rr->origin.y;
    if (!rr->wkcoords)
    {
      origin.x += osx;
      origin.y += osy;
    }
    tmp = origin.x;
    for (itemy = rect.min.y; itemy <= rect.max.y; itemy++)
    {
      int item = ((itemy-1) * *rr->witems) + rect.min.x;

      if (!ok) break;
      origin.x = tmp;
      for (itemx = rect.min.x; itemx <= rect.max.x; itemx++)
      {
        if (item > *rr->nitems)
        {
          ok = Desk_FALSE;
          break;
        }
        ok = rr->proc(rr->record, item++, origin, 0, *rr->width);
        if (!ok) break;
        origin.x += *rr->fwidth;
      }
      origin.y -= *rr->height;
    }

    /* Get next rectangle */
    Desk_Wimp_GetRectangle(r, &more);
  }
  Desk_Hourglass_Off();

  /* Return OK */
  return(Desk_TRUE);
}


/*  General window redraw code (Wimp Desk_event_REDRAW handler)
 */
static Desk_bool RedrawHandler(Desk_event_pollblock *e, redraw_record *rr)
{
  Desk_window_redrawblock 	r;
  Desk_bool 			more;

  r.window = e->data.openblock.window;
  if (rr == NULL) return(RedrawError(&r, "Bad redraw_record"));
  if (rr->w != r.window) return(RedrawError(&r, "Illegal window handle"));

  /* Start redraw process - get 1st rectangle */
  Desk_Wimp_RedrawWindow(&r, &more);
  if (more) return(RedrawCode(&r, rr, Desk_FALSE));
    else return(Desk_TRUE);
}


/*  Create a new redraw operation.
 */
extern Desk_bool RedrawClaim(void *record, redraw_itemproc proc, int *height, int *width,
	int *fwidth, Desk_wimp_point origin, int *nitems, int *witems, Desk_window_handle w,
	Desk_bool wkcoords)
{
  redraw_record *r = NULL;

  TRACE("RedrawClaim:\n");
  if ((r = heap_alloc(sizeof(redraw_record))) == NULL)
  {
    Desk_Error_OutOfMemory(Desk_FALSE, "redraw window");
    return(Desk_FALSE);
  }
  Desk_LinkList_AddToHead(&redraw_anchor, &(r->header));
  TRACE1("redraw list len %d\n", Desk_LinkList_ListLength(&redraw_anchor));

  /* Initialise this struct */
  r->nitems = nitems;
  r->witems = witems;
  r->height = height;
  r->width = width;
  r->fwidth = fwidth;
  r->w = w;
  r->proc = proc;
  r->record = record;
  r->origin.x = origin.x;
  r->origin.y = origin.y;
  r->wkcoords = wkcoords;

  Desk_Event_Claim(Desk_event_REDRAW, w, Desk_event_ANY, (Desk_event_handler) RedrawHandler, r);
  return(Desk_TRUE);
}


/*  Find item in linked list from folder name.
 */
static redraw_record *RedrawFind(Desk_window_handle w)
{
  redraw_record *r = (redraw_record *) redraw_anchor.next;

  while (r != NULL)
  {
    if (r->w == w) return(r);
    r = (redraw_record *) r->header.next;
  }
  return(NULL);
}


/*  Release a redraw handler.
 */
extern void RedrawRelease(void *record, Desk_window_handle w)
{
  redraw_record *r = RedrawFind(w);

  TRACE("RedrawRelease:\n");
  (record = record);
  if (r != NULL) Desk_LinkList_Unlink(&redraw_anchor, &(r->header));
}


/*  Return item # of item clicked on, or 0 for no item.
 *  Needs work to return 0 for far left/right, and gaps between items.
 */
extern int SelectGetItem(Desk_window_handle w, Desk_wimp_point *pos)
{
  redraw_record *rr = RedrawFind(w);
  Desk_wimp_point point;
  Desk_convert_block c;
  int itemx, itemy, item = 0;
  Desk_window_state state;

  TRACE("SelectGetItem:\n");
  if (rr == NULL) return(0);
  Desk_Wimp_GetWindowState(w, &state);
  c.screenrect.min.x = state.openblock.screenrect.min.x;
  c.screenrect.min.y = state.openblock.screenrect.min.y;
  c.screenrect.max.x = state.openblock.screenrect.max.x;
  c.screenrect.max.y = state.openblock.screenrect.max.y;
  c.scroll.x = state.openblock.scroll.x;
  c.scroll.y = state.openblock.scroll.y;
  point.x = pos->x;
  point.y = pos->y;
  Desk_Coord_PointToWorkArea(&point, &c);
  itemx = ((point.x - rr->origin.x) / *rr->fwidth) + 1;
  itemy = ((rr->origin.y - point.y) / *rr->height) + 1;
  item = (*rr->witems * (itemy-1)) + itemx;
  TRACE2("Item x %d y %d\n", itemx, itemy);

  /* Out of range tests */
  if (item > *rr->nitems) item = 0;
  if (itemx > *rr->witems) item = 0;
  if (point.x <= rr->origin.x) item = 0;
  if (rr->origin.y <= point.y) item = 0;
  TRACE2("Item %d %d ", point.x, point.y);
  TRACE1("Item %d\n", item);
  return(item);
}


/*  Redraw of a group of items.
 */
extern void RedrawItems(Desk_window_handle w, Desk_wimp_box *rect)
{
  redraw_record *rr = RedrawFind(w);
  int itemx, itemy, item;

  TRACE("RedrawItems:\n");
  if (rr == NULL) return;

  /* Loop through each item to redraw.
   * This is poor because we are forcing a redraw of each item as a separate
   * Desk_Wimp_ForceRedraw call.
   */
  for (itemy = rect->min.y; itemy < rect->max.y; itemy++)
  {
    item = (itemy * *rr->witems) + rect->min.x;
    for (itemx = rect->min.x; itemy < rect->max.x; itemx++) RedrawItem(w, item++);
  }

  TRACE("RedrawItems: ok\n");
}


/*  Force redraw of a single item.
 */
extern void RedrawItem(Desk_window_handle w, int item)
{
  Desk_window_redrawblock r;
  redraw_record *rr = RedrawFind(w);
  int itemx, itemy;

  TRACE1("RedrawItem: %d\n", item);
  if (rr == NULL) return;

  /* Force a redraw of work area convered by item */
  itemy = ((item-1) / *rr->witems);
  itemx = ((item-1) % *rr->witems) + 1;
  TRACE2("RedrawItem: itemx %d itemy %d ", itemx, itemy);
  r.window = rr->w;
  r.rect.min.x = rr->origin.x + ((itemx-1) * *rr->fwidth);
  r.rect.min.y = -(((itemy+1) * *rr->height) - rr->origin.y);
  r.rect.max.y = r.rect.min.y + *rr->height;
  r.rect.max.x = r.rect.min.x + *rr->width;
  TRACE2("RedrawItem: %d %d ", r.rect.min.x, r.rect.min.y);
  TRACE2("%d %d\n", r.rect.max.x, r.rect.max.y);
  Desk_Wimp_ForceRedraw(&r);
  TRACE("RedrawItem: ok\n");
}


/*  Create and Desk_Wimp_PlotIcon an indirected text icon.
 *  Optionally indirected, or right justified text (right == Desk_TRUE)
 */
extern void PlotIcon(int x, int y, char *s, int width, int flags)
{
  Desk_icon_block i;

  /* Doesn't need to be indirected */
  if (strlen(s) < 12)
  {
    i.flags.value = (Desk_iconbtype_DOUBLECLICKDRAG * Desk_icon_BUTTONTYPE) | Desk_icon_TEXT | flags |
      (Desk_icon_FORECOLOUR * Desk_colour_BLACK) | (Desk_icon_BACKCOLOUR * Desk_colour_GREY1);
    strcpy(i.data.text, s);
  }
  else
  {
    i.flags.value = (Desk_iconbtype_DOUBLECLICKDRAG * Desk_icon_BUTTONTYPE) | Desk_icon_TEXT | flags |
      (Desk_icon_FORECOLOUR * Desk_colour_BLACK) | (Desk_icon_BACKCOLOUR * Desk_colour_GREY1) |
      Desk_icon_INDIRECTED;
    i.data.indirecttext.buffer = s;
    i.data.indirecttext.validstring = NULL;
    i.data.indirecttext.bufflen = strlen(s)+1;
  }
  i.workarearect.min.x = x;
  i.workarearect.min.y = y;
  i.workarearect.max.x = x + width;
  i.workarearect.max.y = y + 36;
  Desk_Wimp_PlotIcon(&i);
}


/*  Create and Desk_Wimp_PlotIcon an indirected sprite icon.
 */
extern void PlotSprite(int x, int y, char *s, int width, int height, int flags)
{
  Desk_icon_block i;

  i.flags.value = (Desk_iconbtype_DOUBLECLICKDRAG * Desk_icon_BUTTONTYPE) | Desk_icon_SPRITE | flags |
    Desk_icon_VCENTRE | (Desk_icon_FORECOLOUR * Desk_colour_BLACK) | (Desk_icon_BACKCOLOUR * Desk_colour_GREY0) |
    Desk_icon_INDIRECTED;
  i.data.indirectsprite.name = s;
  i.data.indirectsprite.spritearea = (unsigned int *) 1;
  i.data.indirectsprite.nameisname = strlen(s)+1;
  i.workarearect.min.x = x + 0;
  i.workarearect.min.y = y + 0;
  i.workarearect.max.x = x + width;
  i.workarearect.max.y = y + height;
  Desk_Wimp_PlotIcon(&i);
}
