/*
 * Program:	_Func.c - core application routines
 *
 * Project:	!Omni OmniClient(tm) project
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	23 October 1994
 * Last Edited:	23 December 1994
 *
 * Copyright 1994 by ANT Limited
 */

#include "kernel.h"
#include "Hdrs.h"


/*  No need to support all these OS_FSControl calls (except ShutDown)
 */
extern _kernel_oserror *fsentry_func(FSEntry_Func_Parameter *parm)
{
  _kernel_oserror *err = NULL;
  print_record *pr = (print_record *) print_anchor.next;
  _kernel_swi_regs r;

  if (!parm) return(&mb_nfserr_DummyFSDoesNothing);
  TRACE1("fsentry_func: %p\n", parm);
  TRACE1("fsentry_func: %x\n", parm->reason);
  switch (parm->reason)
  {
/*    case FSEntry_Func_Reason_SetCurrentDirectory:
      TRACE2("fsentry_func: set csd '%s' '%s'\n",
        parm->first_parameter.name_1 ? parm->first_parameter.name_1 : "",
        parm->special_field_1 ? parm->special_field_1 : "");
      break;
 */     
    case FSEntry_Func_Reason_ShutDown:
      /* Look for any active jobs with open file handles */
      while (pr != NULL)
      {
        if (pr->handle > 0)
        {
          /* Abort jobs by calling OS_Args */
          r.r[0] = FSEntry_Args_Reason_WriteFileExtent;
          r.r[1] = pr->handle;
	  r.r[2] = 0;
          err = _kernel_swi(XOS_Bit | OS_Args, &r, &r);
          if (err) return(err);
        }
        pr = (print_record *) pr->header.next;
      }
      break;

    case FSEntry_Func_Reason_ReadDirectoriesAndInformation:
      parm->third_parameter.read_number = 0;
      parm->read_offset = -1;
      break;
      
    default:
      TRACE("fsentry_func: not supported\n");
      err = &mb_nfserr_DummyFSDoesNothing;
      break;
  }
  return(err);
}
