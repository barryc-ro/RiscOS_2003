/*
 * Program:	Time.c - core application routines
 *
 * Project:	!Omni OmniClient(tm) project
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	2 November 1994
 * Last Edited:	4 November 1994
 *
 * Copyright 1994 by ANT Limited
 */


#include <time.h>

#include <kernel.h>
#include <swis.h>

#include <DebugLib/DebugLib.h>

#include "Time.h"

/*  Convert Acorn to Generic format.
 */
extern void Time_FromAcorn(char *src, int *dst)
{
  dprintf (("", "Time_FromAcorn:\n"));
  _swix (Territory_ConvertTimeToUTCOrdinals, _INR (0, 2), -1, src, dst);
}


/*  Convert from Seconds-past-format to Generic format.
 */
extern void Time_FromSecs(int *src, int *dst, int format)
{
  int time1, time2;
  unsigned int usrc = 0;
  char utc[5];

  dprintf (("", "Time_FromSecs:\n"));
  switch (format)
  {
    case 1: /* UNIX, secs from 1st Jan 1970 */
      usrc = (unsigned int) *src + 0x83AA7E80U;
      break;
    case 2: /* DOS, secs from 1st Jan 1980 */
      usrc = (unsigned int) *src + 0x96792480U;
      break;
    case 3: /* Mac, signed sec from 00:00 1st Jan 2000 */
      usrc = 0xBC17C200 + *src;
      break;
    default:
      break;
  }
  time1 = (usrc & 0x0000FFFF) * 100;
  time2 = ((usrc & 0xFFFF0000) >> 16) * 100;
  time2 += (time1 & 0xFFFF0000) >> 16;
  utc[0] = (time1 & 0x0000FF);
  utc[1] = (time1 & 0x00FF00) >> 8;
  utc[2] = (time2 & 0x0000FF);
  utc[3] = (time2 & 0x00FF00) >> 8;
  utc[4] = (time2 & 0xFF0000) >> 16;
  Time_FromAcorn(&utc[0], dst);
}


/*  Convert Generic to Acorn format.
 */
extern void Time_ToAcorn(char *dst, int *src)
{
  dprintf (("", "Time_ToAcorn: %x %x\n", (int) dst, (int) src));
  _swix (Territory_ConvertOrdinalsToTime, _INR (0, 2), -1, dst, src);
}


/*  Convert Generic to Seconds-past-format format.
 */
extern void Time_ToSecs(int *dst, int *src, int format)
{
  int 		tmp;
  struct tm 	utime;

  dprintf (("", "Time_ToSecs:\n"));
  utime.tm_sec = src[1];
  utime.tm_min = src[2];
  utime.tm_hour = src[3];
  utime.tm_mday = src[4];
  utime.tm_mon = src[5] - 1;
  utime.tm_year = src[6] - 1900;
  utime.tm_isdst = 0;
  tmp = (int) mktime(&utime);
  if (tmp < 0) tmp = 0;
  tmp += 0x83AA7E80;
  switch (format)
  {
    case 1: /* UNIX, secs from 1st Jan 1970 */
      tmp -= 0x83AA7E80;
      if (tmp < 0) tmp = 0;
      break;
    case 2: /* DOS, secs from 1st Jan 1980 */
      tmp -= 0x96792480;
      if (tmp < 0) tmp = 0;
      break;
    case 3: /* Mac, signed sec from 00:00 1st Jan 2000 */
      if (tmp < 0xBC17C200) tmp = -(0xBC17C200 - tmp);
        else tmp -= 0xBC17C200;
      break;
    default:
      break;
  }
  *dst = tmp;
}
