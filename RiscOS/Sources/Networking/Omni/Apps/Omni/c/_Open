/*
 * Program:	_Open.c - core application routines
 *
 * Project:	!Omni OmniClient(tm) project
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	23 October 1994
 * Last Edited:	23 December 1994
 *
 * Copyright 1994 by ANT Limited
 */

#include "kernel.h"
#include "Hdrs.h"


/*  Translate various characters as we go.
 */
static char *translate(char *s)
{
  char *o = s;

  if (s == NULL) return(s);
  TRACE1("translate: pre translate '%s'\n", s);
  while (strlen(s) > 0)
  {
    if (*s == '~')
    {
      char replace = (char) 0;

      switch (*(s+1))
      {
        case '_':  	replace = ' ';
        		break;
        case '\'': 	replace = '"';
        		break;
        case 'l':       replace = '|';
        		break;
        case '1':	replace = ':';
        		break;
        case '!':	replace = ';';
        		break;
        case '.':	replace = ',';
        		break;
        case '~':	replace = '~';
        		break;
        default:
          break;
      }
      if (replace > 0)
      {
        *s = replace;
        strcpy((char *) s+1, (char *) s+2);
      }
    }
    s++;
  }
  TRACE1("translate: post translate '%s'\n", o);
  return(o);
}


/*  Deal with selected OS_Find, Open file reason codes.
 */
extern _kernel_oserror *fsentry_open(FSEntry_Open_Parameter *parm)
{
  _kernel_oserror *err = NULL;
  print_record *pr = NULL;
  _kernel_swi_regs r;
  char *line = NULL;
  char *s = NULL;
  client_record *cr = NULL;

  TRACE1("fsentry_open: %x\n", parm->open_definition.reason);
  switch (parm->open_definition.reason)
  {
    case FSEntry_Open_Reason_CreateUpdate:
    case FSEntry_Open_Reason_Update:
      TRACE2("fsentry_open: create '%s' '%s'\n",
        parm->open_definition.filename ? parm->open_definition.filename : "",
        parm->open_definition.special_field ? parm->open_definition.special_field : "");

      /* On entry - parse special word field */
      if (!parm->open_definition.special_field) return(MakeError(err_BADCREATE));
      line = rma_alloc(strlen(parm->open_definition.special_field)+1);
      if (!line) return(MakeError(err_BADCREATE));
      
      /* Parse special word field */
      strcpy(line, parm->open_definition.special_field);
      TRACE1("create: special field = '%s'\n", line);
      if ((s = strtok(line, ";")) == NULL)
      {
        rma_free(line);
        return(MakeError(err_BADCREATE));
      }
      translate(s);
      TRACE1("create: protocol = '%s'\n", s);
      if ((cr = ClientFind(-1, NULL, -1, s)) == NULL)
      {
        TRACE("create: invalid protocol\n");
        rma_free(line);
        return(MakeError(err_BADCREATE));
      }
      if ((s = strtok(NULL, ";")) == NULL)
      {
        rma_free(line);
        return(MakeError(err_BADCREATE));
      } else r.r[1] = (int) translate(s); /* Server */
      if ((s = strtok(NULL, ";")) != NULL) r.r[2] = (int) translate(s); /* Printer */
        else r.r[2] = 0;
      if ((s = strtok(NULL, ";")) != NULL) r.r[3] = (int) translate(s); /* User */
        else r.r[3] = 0;
      if ((s = strtok(NULL, ";")) != NULL) r.r[4] = (int) translate(s); /* Password */
        else r.r[4] = 0;
      if ((s = strtok(NULL, ";")) != NULL) r.r[5] = (int) translate(s); /* Options */
        else r.r[5] = 0;
      if ((s = strtok(NULL, ";")) != NULL)
      {
        translate(s);
        r.r[6] = atoi(s); /* Size */
      } else r.r[6] = 0;
    
      /* Call SWI Omni_CreateJob (actually call function directly with lower stack
       * overheads).
       */
      r.r[0] = (int) cr->fsname;
      pr = PrintCreate(&r);
      if (!pr) return((_kernel_oserror *) r.r[0]);
      if (!(pr = PrintFind(pr->print_id, -1, -1, -1)))
      {
        /* What the hell did Omni_CreateJob return ?? */
        rma_free(line);
        return(MakeError(err_BADCREATE));
      }
      pr->handle = parm->open_definition.handle;
    
      /* On exit */
      parm->open_result.information_word = InformationWord_WritePermitted;
      /* (InformationWord_WritePermitted | InformationWord_UnbufferedOS_GBPBSupported); */
      parm->open_result.handle = pr->print_id;
      parm->open_result.buffer_size = 512;
      parm->open_result.file_extent = 0;
      parm->open_result.allocated_space = 512;
      TRACE2("create: fileswitch handle %x omni handle %x\n", pr->handle, pr->print_id);
      
      /* Return with no error */
      rma_free(line);
      break;

    default:
      err = &mb_nfserr_DummyFSDoesNothing;
      break;
  }
  return err;
}
