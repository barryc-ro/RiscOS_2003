/*
 * Program:	ExtLib.c - extensions library
 *
 * Project:	!Omni OmniClient(tm) project
 *
 * Author:	Nick Smith
 *              Churchill College
 *              Cambridge University
 *              Internet: nas20@cus.cam.ac.uk
 *
 * Date:	9 December 1993
 * Last Edited:	15 February 1994
 *
 * Copyright 1993,1994,1995 by Nicholas A.Smith
 */

#include <ctype.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>

#include <kernel.h>
#include <swis.h>

#include <Desk/Error.h>
#include <Desk/Event.h>
#include <Desk/Icon.h>
#include <Desk/LinkList.h>
#include <Desk/Menu.h>
#include <Desk/Msgs.h>
#include <Desk/Screen.h>
#include <Desk/Str.h>
#include <Desk/Time.h>
#include <Desk/WimpSWIs.h>

#include <DebugLib/DebugLib.h>

#include "ExtLib.h"
#include "Filer.h"
#include "Heap.h"

int  event_polldelay = -1;
/* -1 = no NULL events,
 *  0 = no Idle events (continuous)
 *  n = Idle every n cs.
 */

/*  *************************** Window_ functions ******************************
 */


/*  Popup given window as a menu
 *  Either appears as a dbox off a menu item (ie, a submenu warning message)
 *  or appears under mouse pointer.
 */
extern void Window_ShowDialogue(Desk_window_handle window, bool adjustok)
{
  Desk_wimp_point 	moveto;

  /* If the last event was a Submenu warning, then open as a dbox off menu */
  if ((Desk_Event_lastevent.type == Desk_event_SEND) &&
     (Desk_Event_lastevent.data.message.header.action == Desk_message_MENUWARNING))
  {
    moveto.x = Desk_Event_lastevent.data.message.data.menuwarn.openpos.x;
    moveto.y = Desk_Event_lastevent.data.message.data.menuwarn.openpos.y;
  }
  else
  {
    Desk_mouse_block ptr;
    Desk_window_state state;
    int height;

    /* Open under mouse pointer */
    Desk_Wimp_GetPointerInfo(&ptr);
    moveto.x = ptr.pos.x - 64;
    moveto.y = ptr.pos.y + 64;

    /* Ensure we don't obscure the iconbar */
    Desk_Wimp_GetWindowState(window, &state);
    height = state.openblock.screenrect.max.y - state.openblock.screenrect.min.y;
    if ((moveto.y - height) < 96) moveto.y = 96 + height;

    /* Open as a 'menu' - ie, it will not disappear when it's parent menu gets
     * removed by the Wimp.
     */
    if ((!ptr.button.data.adjust) || (adjustok))
    {
      Desk_Wimp_CreateMenu((Desk_menu_block *) window, moveto.x, moveto.y);
      return;
    }
  }

  /* Open as a 'submenu' - ie, it will disappear with an external mouse click */
  Desk_Wimp_CreateSubMenu((Desk_menu_block *) window, moveto.x, moveto.y);
}


/*  Return Desk_TRUE if given window is open.
 */
Desk_bool Window_IsOpen(Desk_window_handle w)
{
  Desk_window_state state;

  if (w == NULL) return(Desk_FALSE);
  Desk_Wimp_GetWindowState(w, &state);
  if (state.flags.data.open) return(Desk_TRUE);
    else return(Desk_FALSE);
}


/*  **************************** Time functions *******************************
 */


/*  Fixed CLib time() function, that works with -ve timezone settings, etc.
 *  From original code by Anthony Frost <vulch@kernow.demon.co.uk>.
 */
extern time_t Risc_Time(time_t *place)
{
  bool carry = false;
  char btime[] = "\x00\x00\x00\x00\x6A\x99\x6E\x33\x00";
  char rtime[8], ntime[8];
  int  diff, loop, temp, tz;

  /* Read offset from UTC to current time zone */
  _swi (Territory_ReadCurrentTimeZone, _OUT (1), &tz);

  /* Read real-time in 5-byte format */
  rtime[3] = 3;
  _swi (OS_Word, _INR (0, 1), 14, &rtime[3]);

  for (loop = 3; loop < 8; loop++)
  {
    temp = rtime[loop] - btime[loop] - carry;
    ntime[loop] = temp & 0xFF;
    carry = ((temp & 0x100) != 0);
  }
  diff = (*((int *) &ntime[4]));
  temp = ((diff / 100) * 256) + (((diff % 100) * 256) + ntime[3]) / 100 + tz / 100;
  if (place)
    *place = temp;
  return(temp);
}


/*  **************************** Wimp_ functions *******************************
 */


/*  RISC_OSLib/DeskLib Desk_wimp_starttask doesn't return task handle.
 *  Task handle of 0 if error.
 */
extern int Wimp_NewTask(char *clicmd)
{
  int task_handle;

  if (_swix (Wimp_StartTask, _IN (0) | _OUT (0),
             clicmd,
             &task_handle) != NULL)
  {
    task_handle = 0;
  }

  return task_handle;
}


/*  Return OS units width of given text string, in the current desktop font
 *  (system or anti-aliased).
 */
extern int Text_StringWidth(char *s)
{
  int width = 0;

  dprintf (("", "strwid: %d\n", Desk_Event_wimpversion));
  if (!s) return(0);
  if (Desk_Event_wimpversion > 320)
  {
    /* RISC OS 3.5, RiscPC et al */
    _swi (Wimp_TextOp, _INR (0, 2) | _OUT (0),
          1, s, 0,
          &width);
    width += 8;
  } else width = (strlen(s) * 16) + 8;
  dprintf (("", "strwid: '%s' = %d ", s, strlen(s)));
  dprintf (("", "%x\n", width));
  return(width);
}


/*  Fancy greying-out for tricky icons.
 */
extern void Icon_SetGreyShade(Desk_window_handle window, Desk_icon_handle icon, bool shade,
  int buttontype)
{
  dprintf (("", "Icon_SetGreyShade:\n"));
  if (shade)
  {
    Desk_Wimp_SetIconState(window, icon,
      (Desk_icon_BUTTONTYPE*Desk_iconbtype_NEVER) + (Desk_icon_FORECOLOUR*Desk_colour_GREY3),
      (Desk_icon_BUTTONTYPE*15) + (Desk_icon_FORECOLOUR*15));
  }
  else
  {
    Desk_Wimp_SetIconState(window, icon,
      (Desk_icon_BUTTONTYPE*buttontype) + (Desk_icon_FORECOLOUR*Desk_colour_BLACK),
      (Desk_icon_BUTTONTYPE*15) + (Desk_icon_FORECOLOUR*15));
  }
}


/*  Hack to fix indirected text icon validation strings with mouse ptr changing.
 */
extern void Icon_SetValid(Desk_window_handle window, Desk_icon_handle icon, bool shade)
{
  Desk_icon_block block;
  char *v;

  dprintf (("", "Icon_SetValid:\n"));
  Desk_Wimp_GetIconState(window, icon, &block);
  v = block.data.indirecttext.validstring;
  if (((int) v > 0) && (v[0] == 'P')) v[1] = (shade) ? 'w' : 'p';
}


/*  Copy string into new buffer.
 */
extern char *cpystr(char *s)
{
  char *  buf = NULL;

  if (s != NULL)
  {
    size_t  len = strlen(s);

    if (len > 0)
    {
      buf = heap_alloc(len + 1);
      if (buf != NULL)
      {
        strcpy(buf, s);
      }
    }
  }

  return(buf);
}


/*  Copy string into new RMA-allocated buffer.
 */
extern char *cpyrma(char *s)
{
  char *  buf = NULL;

  if (s != NULL)
  {
    size_t  len = strlen(s);

    if (len > 0)
    {
      buf = rma_alloc(len + 1);
      if (buf != NULL)
      {
        strcpy(buf, s);
      }
    }
  }

  return(buf);
}


/*  Strip whitespace from a string.
 */
extern char *strip(char *s)
{
  char *d = NULL;
  char *o = s;
  size_t  l = 0;

  if (s == NULL) return(s);
  while ((*s == ' ') || (*s == '\t') || (*s == '\n') || (*s == '\r')) s++;
  d = s;
  l = strlen (s);
  if (l > 0)
  {
    s = (char *) (s + l - 1);
    while ((*s == ' ') || (*s == '\n') || (*s == '\r') || (*s == '\t'))
    {
        s--;
        l--;    /* string is now one char shorter */
    }
    *(++s) = '\0';
  }
  memmove(o, d, l + 1);    /* +1 to allow for terminator */
  return(o);
}


/*  Error function for doing a OK/Cancel query error box.
 */
extern Desk_bool Msgs_QueryOK(int errornum, char *tag, ...)
{
  va_list 	va;
  Desk_os_error    	error;
  Desk_error_flags 	eflags;
  char 		title[32];
  int		res = 0;
  char 		buffer[256];

  if (!Desk_Msgs_Lookup(tag, buffer, 252))
    Desk_Error_ReportInternal(0, "Cannot find message for error '%s'", tag);
  else
  {
    va_start(va, tag);
    vsprintf(error.errmess, buffer, va);
    va_end(va);
    error.errnum = errornum;
    sprintf(title, "Message from %s", Desk_Event_taskname);

    eflags.value = 0x13;	/* No 'Error from ' prefix, OK & Cancel buttons */
    res = Desk_Wimp_ReportErrorR(&error, eflags.value, title);
  }
  if (res == 1) return(Desk_TRUE);
    else return(Desk_FALSE);
}

extern void Menu_Dispose(Desk_menu_ptr menu)
{
  enum
  {
    SubmenuPtr_None        = -1,
    SubmenuPtr_Window_Min  = 1,
    SubmenuPtr_Window_Max  = 0x7fff,
    SubmenuPtr_Submenu_Min = 0x8000
  };
  Desk_menu_item *item = Desk_Menu_FirstItem(menu);

  do
  {
    if (item->submenu.value != SubmenuPtr_None &&
        item->submenu.value >= SubmenuPtr_Submenu_Min)
    {
      Menu_Dispose(item->submenu.menu);
      item->submenu.value = SubmenuPtr_None;
    }
    Desk_Icon_DisposeIndData(&(item->icondata), item->iconflags);
  }
  while (!(item++)->menuflags.data.last);

  free (menu);
}


extern void Event_Poll(void)
{
  if (event_polldelay >= 0)
  {
      Desk_Event_mask.data.null = 0;    /* force null events on */
  }
  if (event_polldelay <= 0)
  {
      Desk_Wimp_Poll3 (Desk_Event_mask, &Desk_Event_lastevent, &pollword);
  }
  else
  {
      Desk_Wimp_PollIdle3 (Desk_Event_mask, &Desk_Event_lastevent, Desk_Time_Monotonic()+event_polldelay, &pollword);
  }
  Desk_Event_Process (&Desk_Event_lastevent);
}


/* Get pointer to indirected icon text, ensuring that the icon buffer is 0
 * terminated so that standard ANSI str functions can be used on the text.
 */
extern char *Icon_GetTextPtr (Desk_window_handle w, Desk_icon_handle i)
{
  Desk_icon_block  icon;
  size_t           str_len;
  size_t           buff_size = Desk_wimp_MAXNAME;
  char *           s;

  Desk_Wimp_GetIconState (w, i, &icon);

  if (icon.flags.data.indirected)
  {
    s         = icon.data.indirecttext.buffer;
    buff_size = icon.data.indirecttext.bufflen;
  }
  else
  {
    s = icon.data.text;
  }

  /* Ensure we can't write past the end of the buffer */
  str_len = Desk_strlencr (s);
  if (str_len >= buff_size)
  {
    str_len = buff_size - 1;
  }

  /* Ensure buffer is 0 terminated */
  s[str_len] = 0;

  return s;
}




extern Desk_bool Icon_IsEmpty (Desk_window_handle w, Desk_icon_handle i)
{
  Desk_icon_block  icon;
  char *           s;

  Desk_Wimp_GetIconState (w, i, &icon);

  if (icon.flags.data.indirected)
  {
    s = icon.data.indirecttext.buffer;
  }
  else
  {
    s = icon.data.text;
  }

  return (iscntrl (*s) ? Desk_TRUE : Desk_FALSE);
}




extern void  Icon_SetBlank (Desk_window_handle w, Desk_icon_handle i)
{
  Desk_icon_block  icon;

  Desk_Wimp_GetIconState (w, i, &icon);

  if (icon.flags.data.text && icon.flags.data.indirected)
  {
    memset (icon.data.indirecttext.buffer, 0, icon.data.indirecttext.bufflen);
  }
}




extern char *  omni_getenv (const char *  name)
{
    _kernel_swi_regs r, rout;
    _kernel_oserror *e;
    static char *_getenv_value;
    static size_t _getenv_size;

    /* Make sure we have an initial buffer of 256 */
    if (_getenv_value == NULL)
    {
        _getenv_value = malloc(256);
        if (_getenv_value == NULL) return NULL;
        _getenv_size = 256;
    }

    /* Try to read into the current buffer */
    r.r[0] = (int) name;
    r.r[1] = (int) _getenv_value;
    r.r[2] = _getenv_size - 1;
    r.r[3] = 0;
    r.r[4] = 3;
    if ((e = _kernel_swi(OS_ReadVarVal, &r, &rout)) != NULL)
    {
        /* If there was a buffer overflow... */
        if (e->errnum != 0x1E4)
        {
            return NULL;
        }

        /* ...find out how much space is required */
        r.r[2] = -1;
        _kernel_swi(OS_ReadVarVal, &r, &rout);
        if (rout.r[2] >= 0)
        {
            return NULL;
        }

        /* Try to reallocate the buffer */
        free(_getenv_value);
        _getenv_value = malloc(-rout.r[2]);
        if (_getenv_value == NULL)
        {
            return NULL;
        }

        /* And read again */
        _getenv_size = -rout.r[2];
        r.r[1] = (int) _getenv_value;
        r.r[2] = _getenv_size - 1;
        if (_kernel_swi(OS_ReadVarVal, &r, &rout) != NULL)
            return NULL;
    }

    /* Terminate the value */
    _getenv_value[rout.r[2]] = '\0';

    return _getenv_value;
}
