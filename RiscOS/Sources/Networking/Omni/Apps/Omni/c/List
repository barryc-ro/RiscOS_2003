/*
 * Program:	List.c - routines to deal with Server/Mounts 'filer' windows
 *
 * Project:	!Omni OmniClient(tm) project
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	25 September 1994
 * Last Edited:	5 May 1995
 *
 * Copyright 1994,1995 by ANT Limited
 */

/* #undef DEBUG */
#include "Hdrs.h"
#include "Desk/GFX.h"
#include "Desk/Screen.h"
#include "Desk/Kbd.h"         	/*    */
#include "Expert.h"         	/*    */


static Desk_wimp_point openlast = {-1, -1};	/* Last position mount opened */

/*  ************************** Public functions *****************************
 */


/*  Hack on RedrawItem() to only force a redraw of part of the filer item.
 */
static void HackRedraw(Desk_window_handle w, int item)
{
  wind_record *r;
  int width;

  TRACE2("HackRedraw: %x %d\n", (int) w, item);
  r = FilerFind(w, -1, -1, -1);
  TRACE1("HackRedraw: %x\n", (int) r);
  if (!r) return;
  width = r->d_width;
  if ((r == &wind_filer) && (r->display == display_FULL)) r->d_width = 66 + r->d_widths[1];
  if ((r != &wind_filer) && (r->display == display_FULL)) r->d_width = 68 + r->d_widths[1];
  RedrawItem(w, item);
  r->d_width = width;
}


/*  Find item in linked list from either window handle or item number.
 */
extern wind_record *FilerFind(Desk_window_handle w, int item, int client_id, int server_id)
{
  wind_record *r = (wind_record *) wind_filer.anchor.next;
  int searchtype = 0;

  TRACE("FilerFind:\n");
  if (w != NULL) searchtype = 1;
  if ((w == wind_filer.w) && (searchtype == 1)) return(&wind_filer);
  if (client_id != -1) searchtype = 2;
  TRACE1("FilerFind: %x\n", (int) r);
  TRACE1("FilerFind:window list length %d\n", Desk_LinkList_ListLength(&wind_filer.anchor));
  while (r != NULL)
  {
    TRACE1("FilerFind: %x\n", (int) r);
    switch (searchtype)
    {
      case 0: if (r->item == item) return(r);
              break;
      case 1: if (r->w == w) return(r);
              break;
      case 2: if ((r->client_id == client_id) && (r->server_id == server_id)) return(r);
              break;
      default:
        break;
    }
    r = (wind_record *) r->header.next;
  }
  return(NULL);
}


/*  Find item in linked list from item [1..n] number.
 */
extern item_record *ItemFind(wind_record *wr, int item)
{
  item_record *r = (item_record *) wr->items.next;
  item_record *tr = NULL;

  TRACE2("ItemFind: %x %d\n", (int) wr, item);
  if ((!wr) || (!wr->index) || (item > wr->nitems)) return(NULL);
  tr = wr->index[item-1];
  while (r != NULL)
  {
    TRACE1("ItemFind: %x\n", (int) r);
    if (tr == r) return(r);
    r = (item_record *) r->header.next;
  }
  return(NULL);
}


/*  Clear selection in filer window.
 */
extern void FilerSelection(void)
{
  TRACE("FilerSelection:\n");
  if ((select_item != 0) && (select_wind != NULL))
  {
    int t_item = select_item;
    Desk_window_handle t_wind = select_wind;
    select_item = 0;
    select_wind = NULL;
    select_transient = Desk_FALSE;
    HackRedraw(t_wind, t_item);
  }
}


/*  Update display fields widths.
 */
extern void FilerUpdateWidth(wind_record *r)
{
  int loop, tmp;
  item_record *ir = (item_record *) r->items.next;
  client_record *cr = NULL;

  TRACE1("FilerUpdateWidth: %x\n", (int) r);
  r->d_widths[0] = 36;
  r->d_widths[1] = 128;
  r->d_widths[2] = 0;
  r->d_widths[3] = 0;
  r->d_widths[4] = 0;
  r->d_widths[5] = 0;
  switch (r->display)
  {
    case display_LARGE:
    case display_SMALL:
      r->d_height = (r->display == display_LARGE) ? 124 : 44;
      r->d_width = 128;
      while (ir != NULL)
      {
        TRACE1("FilerUpdateWidth: ir %x\n", (int) ir);
        tmp = Text_StringWidth(ir->shortname);
        if (tmp > r->d_widths[1]) r->d_widths[1] = tmp;
        ir = (item_record *) ir->header.next;
      }
      r->d_width = r->d_widths[0] + r->d_widths[1] + 32;
      break;

    case display_FULL:
      r->d_width = 196;
      r->d_height = 44;
      if (r == (wind_record *) &wind_filer)
      {
        /* Server window */
        while (ir != NULL)
        {
          TRACE1("FilerUpdateWidth: ir %x\n", (int) ir);
          tmp = Text_StringWidth(ir->fullname);
          if (tmp > r->d_widths[1]) r->d_widths[1] = tmp;
          cr = ClientFind(ir->client_id, NULL, -1, NULL);
          tmp = Text_StringWidth(cr->clientname);
          if (tmp > r->d_widths[2]) r->d_widths[2] = tmp;
          tmp = Text_StringWidth(ir->field1);
          if (tmp > r->d_widths[3]) r->d_widths[3] = tmp;
          tmp = Text_StringWidth(ir->field2);
          if (tmp > r->d_widths[4]) r->d_widths[4] = tmp;
          tmp = Text_StringWidth(ir->field3);
          if (tmp > r->d_widths[5]) r->d_widths[5] = tmp;
          ir = (item_record *) ir->header.next;
        }
        tmp = 0;
        for (loop = 0; loop < 6; loop++)
          tmp += (r->d_widths[loop] > 0) ? r->d_widths[loop]+32 : 0;
        if (tmp > r->d_width) r->d_width = tmp;
      }
      else
      {
        /* Mounts windows */
        while (ir != NULL)
        {
          TRACE1("FilerUpdateWidth: ir %x\n", (int) ir);
          tmp = Text_StringWidth(ir->shortname);
          if (tmp > r->d_widths[1]) r->d_widths[1] = tmp;
          tmp = Text_StringWidth(ir->fullname);
          if (tmp > r->d_widths[2]) r->d_widths[2] = tmp;
          ir = (item_record *) ir->header.next;
        }
        tmp = 0;
        for (loop = 0; loop < 6; loop++)
          tmp += (r->d_widths[loop] > 0) ? r->d_widths[loop]+32 : 0;
        if (tmp > r->d_width) r->d_width = tmp;
      }
      break;

    default:
      break;
  }
  TRACE2("FilerUpdateWidth: width %d height %d\n", r->d_width, r->d_height);
  for (loop = 0; loop < 6; loop++)
  {
    TRACE2("FilerUpdateWidth: [%d] = %d\n", loop, r->d_widths[loop]);
  }
  r->d_fwidth = r->d_width;
}


/*  Update display type size fields.
 */
extern void FilerDisplay(wind_record *r)
{
  Desk_window_state state;

  TRACE("FilerDisplay:\n");
  if (r == NULL) return;
  FilerUpdateWidth(r);
  /* Redraw window */
  Desk_Wimp_GetWindowState(r->w, &state);
  FilerResetExtent(&state.openblock, r, Desk_TRUE, Desk_TRUE);
}


/*  Set initial extend of window.
 */
static Desk_bool FilerInitialExtent(wind_record *r)
{
  Desk_wimp_box extent;
  int min_witems, max_hitems;
  int witems, hitems;
  int max_witems;
  Desk_window_state state;

  /* Set minimum/maximum sizes */
  TRACE("FilerInitialExtent:\n");
  if (r == NULL) return(Desk_FALSE);
  switch (r->display)
  {
    case display_LARGE: min_witems = 4;
    			max_hitems = 6;
    			break;
    case display_FULL: 	min_witems = 1;
    			max_hitems = 17;
    			break;
    default:
    case display_SMALL: min_witems = 3;
    			max_hitems = 17;
    			break;
  }
  if (r->nitems > min_witems)
  {
    Desk_Screen_CacheModeInfo();
    witems = min_witems;
    hitems = (r->nitems / witems) + (((r->nitems % witems) > 0) ? 1 : 0);
    if (hitems == 0) hitems = 1;
    max_witems = (Desk_screen_size.x / r->d_width);
    if (max_witems < 1) max_witems = 1;
  }
  else
  {
    max_witems = witems = r->nitems;
    hitems = 1;
  }
  if (max_hitems > hitems) max_hitems = hitems;

  /* Update records */
  r->witems = witems;

  /* Set window extent */
  extent.min.x = 0; extent.max.x = (max_witems * r->d_width);
  extent.max.y = 0; extent.min.y = -(hitems * r->d_height) - 18;
  Desk_Wimp_SetExtent(r->w, &extent);

  /* Open with window position */
  Desk_Wimp_GetWindowState(r->w, &state);
  state.openblock.screenrect.min.y = state.openblock.screenrect.max.y -
    (max_hitems * r->d_height) - 18;
  state.openblock.screenrect.max.x = state.openblock.screenrect.min.x +
    (witems * r->d_width);
  Desk_Wimp_OpenWindow(&state.openblock);
  return(Desk_TRUE);
}


/*  Reset extend of window.
 */
extern Desk_bool FilerResetExtent(Desk_window_openblock *openblock, wind_record *r, Desk_bool force,
	Desk_bool forcewidth)
{
  int hitems, witems, tmp, max_witems;
  Desk_wimp_box extent;

  TRACE("FilerResetExtent:\n");
  if (r == NULL) return(Desk_FALSE);
  tmp = (openblock->screenrect.max.x - openblock->screenrect.min.x);
  witems = (tmp / r->d_width);
  if (witems == 0) witems = 1;
  hitems = (r->nitems / witems) + (((r->nitems % witems) > 0) ? 1 : 0);
  if (hitems == 0) hitems = 1;
  if (r->nitems > witems)
  {
    Desk_Screen_CacheModeInfo();
    max_witems = (Desk_screen_size.x / r->d_width);
    if (max_witems < 1) max_witems = 1;
  } else max_witems = r->nitems;
  if (r == &wind_filer)
  {
    Desk_window_state wstate;

    Desk_Wimp_GetWindowState(r->w, &wstate);
    openlast.y = openblock->screenrect.max.y - 32;
    if (wstate.openblock.screenrect.min.x != openblock->screenrect.min.x)
      openlast.x = openblock->screenrect.min.x;
  }

  /* Only do updates if required */
  if ((witems != r->witems) || (force))
  {
    Desk_window_redrawblock redraw;

    TRACE2("FilerResetExtent: update %d %d\n", witems, hitems);

    /* Set window extent */
    extent.min.x = 0; extent.max.x = (max_witems * r->d_width);
    extent.max.y = 0; extent.min.y = -(hitems * r->d_height) - 18;
    Desk_Wimp_SetExtent(r->w, &extent);

    /* Update record */
    r->witems = witems;

    /* Force to an integer number of fields */
    if (forcewidth)
    {
      if (openblock->screenrect.min.x + (witems * r->d_width) > Desk_screen_size.x)
        openblock->screenrect.min.x = Desk_screen_size.x - (witems * r->d_width);
      openblock->screenrect.max.x = openblock->screenrect.min.x + (witems * r->d_width);
    }

    /* Force a redraw */
    redraw.window = r->w;
    redraw.rect.min.x = 0;
    redraw.rect.max.y = 0;
    redraw.rect.max.x = 32000;
    redraw.rect.min.y = -32000;
    Desk_Wimp_ForceRedraw(&redraw);
  }
  /* Open with window position */
  if (Desk_Window_IsOpen(r->w)) Desk_Wimp_OpenWindow(openblock);
  return(Desk_TRUE);
}


/*  Open window in appropriate position.
 */
static void FilerPosition(Desk_window_handle window, int open)
{
  Desk_mouse_block ptr;
  Desk_window_state wstate;
  int w, h;

  TRACE2("FilerPosition: %d %d\n", window, open);
  Desk_Wimp_GetWindowState(window, &wstate);
  if (open < 0)
  {
    wstate.openblock.behind = -1;    			    /* open in front */
    Desk_Wimp_OpenWindow(&wstate.openblock);
    return;
  }
  Desk_Screen_CacheModeInfo();            /* Ensure got correct screen mode info. */
  wstate.openblock.behind = -1;                             /* open in front */
  w = wstate.openblock.screenrect.max.x - wstate.openblock.screenrect.min.x;
  h = wstate.openblock.screenrect.max.y - wstate.openblock.screenrect.min.y;
  Desk_Wimp_GetPointerInfo(&ptr);

  /* Open types */
  TRACE2("FilerPosition: old x %d y %d\n", openlast.x, openlast.y);
  switch (open)
  {
    case 0: openlast.y = (Desk_screen_size.y + h) / 2;
            openlast.x = ptr.pos.x-128;
            break;
    case 1: openlast.x -= 32;
            openlast.y += 32;
            break;
    case 2: openlast.x += 24;
            break;
    default:
      break;
  }

  /* Check for screen boundaries */
  if (openlast.x < 0)  openlast.x = 0;
  if (openlast.x + w > Desk_screen_size.x) openlast.x = Desk_screen_size.x - w;
  if (openlast.y > Desk_screen_size.y - 32) openlast.y = Desk_screen_size.y - 32;
  if (openlast.y - h < 0) openlast.y = h;
  TRACE2("FilerPosition: new x %d y %d\n", openlast.x, openlast.y);

  wstate.openblock.screenrect.min.x = openlast.x;
  wstate.openblock.screenrect.max.y = openlast.y;
  if (window == wind_filer.w) openlast.y -= 32;
  wstate.openblock.screenrect.max.x = wstate.openblock.screenrect.min.x + w;
  wstate.openblock.screenrect.min.y = wstate.openblock.screenrect.max.y - h;
  Desk_Wimp_OpenWindow(&wstate.openblock);
}


/*  Create a new filer window.
 *  Return Desk_FALSE if cannot create, else Desk_TRUE.
 */
extern Desk_bool FilerCreate(int item, int open)
{
  wind_record *r = NULL;
  client_record *cr = NULL;

  TRACE2("FilerCreate:create new filer window %d %d\n", item, open);
  Desk_Hourglass_Start(25);
  if ((item == 0) && (open == 0))
  {
    /* Delete filer window ready for a rescan */
    FilerDelete(&wind_filer);
  }
  if (item == 0)
  {
    /* Main server window */
    r = &wind_filer;
    r->item = 0;
  }
  else
  {
    /* Mounts subwindow */
    if ((r = FilerFind(NULL, item, -1, -1)) == NULL)
    {
      r = (wind_record *) heap_alloc(sizeof(wind_record));
      if (r == NULL)
      {
        Desk_Hourglass_Off();
        Desk_Msgs_Report(Desk_FALSE, "No free memory for filer window");
        return(Desk_FALSE);
      }
      Desk_LinkList_AddToTail(&wind_filer.anchor, &(r->header));
      TRACE1("FilerCreate:new filer list length %d\n", Desk_LinkList_ListLength(&wind_filer.anchor));
      r->w = NULL;
      r->item = item;
      r->index = NULL;
    }
  }
  if (r->w == NULL)
  {
    Desk_wimp_point origin = {6, -6};
    char buf[96];

    r->w = Desk_Window_Create("filer", Desk_template_TITLEMIN);
    if (r->w == NULL)
    {
      /* Error creating window, exit gracefully, stage left ... */
      if (r != &wind_filer)
      {
        Desk_LinkList_Unlink(&wind_filer.anchor, &(r->header));
        FREE(r);
      }
      return(Desk_FALSE);
    }
    if (r != &wind_filer)
    {
      item_record *ir = wind_filer.index[item-1];
      cr = ClientFind(ir->client_id, NULL, -1, NULL);
      sprintf(buf, "%s:%s", cr->fsname, ir->fullname);
      Desk_Window_SetTitle(r->w, buf);
    }
    else
    {
      Desk_Msgs_Lookup("filer.title", buf, 95);
      Desk_Window_SetTitle(r->w, buf);
    }

    /* Initialise any values in record */
    r->nitems = 0;
    r->witems = 0;
    r->update = Desk_FALSE;
    r->index = NULL;
    r->display = prog_config.display;
    r->sort = prog_config.sort;
    Desk_LinkList_Init(&r->items);
    if (r == &wind_filer)
    {
      TRACE("FilerCreate: server window data\n");
      r->client_id = r->server_id = 0;
      /* Call client module(s) for new details, builds new tree */
      cr = (client_record *) client_anchor.next;
      while (cr != NULL)
      {
        ItemParse(r, cr->client_id, -1);
        cr = (client_record *) cr->header.next;
      }
    }
    else
    {
      item_record *ir = ItemFind(&wind_filer, item);
      TRACE("FilerCreate: mount window data\n");
      r->client_id = ir ? ir->client_id : 0;
      r->server_id = ir ? ir->server_id : 0;
      /* Get data as required */
      TRACE("FilerCreate: mount window pre parse\n");
      ItemParse(r, r->client_id, r->server_id);
      TRACE("FilerCreate: mount window post parse\n");
      /* Empty mounts window ? */
      if (r->items.next == NULL)
      {
        FilerDelete(r);
        Menu_Close();
        Desk_menu_currentopen = NULL;
        clientwindow = ClientFind(ir->client_id, NULL, -1, NULL);
        TRACE2("FilerCreate: ir %x client_id %x\n", (int) ir, ir->client_id);
        TRACE2("FilerCreate: cwin %x cwin.client_id %x\n", (int) clientwindow, clientwindow->client_id);
        Desk_Hourglass_Off();
        if (CreateMount(mount_WINDOW, -1, Desk_TRUE))
        {
          FilerSelection();
          return(Desk_TRUE);
        } else return(Desk_FALSE);
      }
      TRACE("FilerCreate: mount window data OK\n");
    }
    FilerUpdateWidth(r);
    if (wind_filer.anchor.next == NULL)
    {
      select_item = 0;
      select_wind = NULL;
    }
    RedrawClaim((void *) r, (redraw_itemproc) FilerRedraw, &(r->d_height), &(r->d_width),
      &(r->d_fwidth), origin, &(r->nitems), &(r->witems), r->w, Desk_TRUE);
    FilerInitialExtent(r);
    Desk_Event_Claim(Desk_event_OPEN,  r->w, Desk_event_ANY, (Desk_event_handler) Filer_OpenHandler, r);
    Desk_Event_Claim(Desk_event_CLOSE, r->w, Desk_event_ANY, (Desk_event_handler) Filer_CloseWindow, r);
    Desk_Event_Claim(Desk_event_CLICK, r->w, Desk_event_ANY, (Desk_event_handler) Filer_ButtonClick, r);
    FilerPosition(r->w, open);
  } else FilerPosition(r->w, -1);
  Menu_Close();
  Desk_Hourglass_Off();
  return(Desk_TRUE);
}


/*  Delete a Filer window entry.
 */
extern void FilerDelete(wind_record *r)
{
  TRACE1("FilerDelete: %x\n", (int) r);
  TRACE1("FilerDelete:window list length %d\n", Desk_LinkList_ListLength(&wind_filer.anchor));

  if (r == NULL) return;
  if (select_wind == r->w)
  {
    select_wind = NULL;
    select_item = 0;
  }
  if (r == &wind_filer)
  {
    Desk_Window_Hide(r->w);
    return;
  }
  RedrawRelease((void *) r, r->w);
  Desk_Event_ReleaseWindow(r->w);
  Desk_Window_Delete(r->w);
  r->update = Desk_FALSE;
  if (r->index) heap_free(r->index);
  r->index = NULL;
  ItemChainFree(r);
  r->w = NULL;
  if (r != &wind_filer)
  {
    TRACE("FilerDelete: unlink mount window\n");
    Desk_LinkList_Unlink(&wind_filer.anchor, &(r->header));
    FREE(r);
  }
  TRACE1("FilerDelete:window list length %d\n", Desk_LinkList_ListLength(&wind_filer.anchor));
}


/*  Returns Desk_TRUE if sprite exists in wimp sprite pool.
 */
static Desk_bool SpriteExists(char *name)
{
  #if 0
  _kernel_swi_regs r;

  /* Do a sprite_select on the Wimp sprite pool. */
  r.r[0] = 24;
  r.r[2] = (int) name;
  #endif
  TRACE1("SpriteExists: %s\n", name);

  #if 0
  if (Desk_Wimp_SpriteOp(&r) != NULL) return(Desk_FALSE);
    else return(Desk_TRUE);
  #else
  #define SWI_Wimp_SpriteOp 0x0400e9
  if (Desk_SWI(3, 0, SWI_Wimp_SpriteOp, 24, 0, name) != NULL) return(Desk_FALSE);
    else return(Desk_TRUE);
  #endif
}


/*  Return correct sprite name (small/large/hi/lo-res) from prefix 'name'.
 *  Checks if sprite is in wimp sprite spool first, and returns default if not.
 */
extern char *SpriteName(char *name, char *buf, Desk_bool small)
{
  /* Ensure cached screen info */
  Desk_Screen_CacheModeInfo();
  if (small) sprintf(buf, "%ssm", name);
    else strcpy(buf, name);
  if (Desk_screen_eig.y <= 1)
  {
    /* Square pixel mode, or better */
    strcat(buf, "_22");
    if (!SpriteExists(buf))
    {
      if (small) sprintf(buf, "%ssm", name);
        else strcpy(buf, name);
    }
  }
  if (!SpriteExists(buf))
  {
    if (small) strcpy(buf, "sm!omni");
      else strcpy(buf, "!omni");
  }
  TRACE1("SpriteName: %s\n", buf);
  return(buf);
}


/*  Filer window redraw code
 */
extern Desk_bool FilerRedraw(wind_record *r, int item, Desk_wimp_point origin, int minx, int maxx)
{
  Desk_bool indent = ((select_item == item) && (select_wind == r->w));
  item_record *ir = NULL;
  client_record *cr = NULL;
  int flags_text = 0, flags_sprite = 0;
  int tmp, tmp2;
  char buf[32];

  TRACE2("FilerRedraw: item %d xpos %d", item, origin.x);
  TRACE2(" ypos %d minx %d", origin.y, minx);
  TRACE1(" maxx %d\n", maxx);
  if ((!r) || (!r->index)) return(Desk_FALSE);
  if ((item < 1) || (item > r->nitems)) return(Desk_FALSE);
  ir = r->index[item-1];

  /* If highlighted, then need SELECTED and FILLED for text icons */
  if (indent)
  {
    flags_text = Desk_icon_SELECTED | Desk_icon_FILLED;
    flags_sprite = Desk_icon_SELECTED;
  }
  if (r == &wind_filer)
  {
    TRACE("FilerRedraw: server plot\n");
    cr = ClientFind(ir->client_id, NULL, -1, NULL);
    if (!cr) return(NULL);
    switch (r->display)
    {
      case display_SMALL:
        PlotSprite(origin.x, origin.y, SpriteName(cr->spritename,buf,Desk_TRUE), 36, 36,
          flags_sprite);
        PlotIcon(origin.x+34, origin.y, ir->shortname, Text_StringWidth(ir->shortname),
          flags_text);
        break;
      case display_LARGE:
        flags_sprite |= Desk_icon_HCENTRE;
        PlotSprite(origin.x, origin.y+40, SpriteName(cr->spritename, buf, Desk_FALSE), r->d_width,
          68, flags_sprite);
        tmp2 = Text_StringWidth(ir->shortname);
        tmp = (r->d_width - tmp2) / 2;
        PlotIcon(origin.x+tmp, origin.y, ir->shortname, tmp2, flags_text);
        break;
      case display_FULL:
        PlotSprite(origin.x, origin.y, SpriteName(cr->spritename, buf, Desk_TRUE), 36, 36,
          flags_sprite);
        PlotIcon(origin.x+34, origin.y, ir->fullname, Text_StringWidth(ir->fullname),
          flags_text);
        strcpy(buf, cr->clientname);
        tmp = 34 + r->d_widths[1] + 32;
        PlotIcon(origin.x+tmp, origin.y, buf, Text_StringWidth(buf), 0);
        strcpy(buf, ir->field1 ? ir->field1 : "");
        tmp += r->d_widths[2] + 32;
        PlotIcon(origin.x+tmp, origin.y, buf, Text_StringWidth(buf), 0);
        strcpy(buf, ir->field2 ? ir->field2 : "");
        tmp += r->d_widths[3] + 32;
        PlotIcon(origin.x+tmp, origin.y, buf, Text_StringWidth(buf), 0);
        strcpy(buf, ir->field3 ? ir->field3 : "");
        tmp += r->d_widths[4] + 32;
        PlotIcon(origin.x+tmp, origin.y, buf, Text_StringWidth(buf), 0);
        break;
      default:
        break;
    }
  }
  else
  {
    TRACE("FilerRedraw: mount plot\n");
    switch (r->display)
    {
      case display_SMALL:
        PlotSprite(origin.x, origin.y, "small_dir", 36, 36, flags_sprite);
        PlotIcon(origin.x+38, origin.y, ir->shortname, Text_StringWidth(ir->shortname),
          flags_text);
        break;
      case display_LARGE:
        flags_sprite |= Desk_icon_HCENTRE;
        PlotSprite(origin.x, origin.y+40, "directory", r->d_width, 68, flags_sprite);
        tmp2 = Text_StringWidth(ir->shortname);
        tmp = (r->d_width - tmp2) / 2;
        PlotIcon(origin.x+tmp, origin.y, ir->shortname, tmp2, flags_text);
        break;
      case display_FULL:
        PlotSprite(origin.x, origin.y, "small_dir", 36, 36, flags_sprite);
        PlotIcon(origin.x+38, origin.y, ir->shortname, Text_StringWidth(ir->shortname),
          flags_text);
        tmp = 38 + r->d_widths[1] + 32;
        PlotIcon(origin.x+tmp, origin.y, ir->fullname, Text_StringWidth(ir->fullname), 0);
        break;
      default:
        break;
    }
  }
  /* Return OK */
  return(Desk_TRUE);
}


/*  ************************* Event handlers *********************************
 */


/*  Filer window open handler.
 */
extern Desk_bool Filer_OpenHandler(Desk_event_pollblock *event, wind_record *r)
{
  Desk_window_handle w = event->data.openblock.window;

  if (w != r->w) return(Desk_FALSE);
  FilerResetExtent(&(event->data.openblock), r, Desk_FALSE, Desk_FALSE);
  return(Desk_TRUE);
}


/*  Filer window close handler.
 */
extern Desk_bool Filer_CloseWindow(Desk_event_pollblock *event, wind_record *r)
{
  Desk_window_handle w = event->data.openblock.window;

  /* Release window details */
  if (w != r->w) return(Desk_FALSE);
  if (w == r->w)
  {
    Desk_mouse_block ptr;

    Desk_Wimp_GetPointerInfo(&ptr);
    /* ADJUST-close on a mount window should (re)open servers window */
    if ((ptr.button.data.adjust) && (r != &wind_filer)) FilerCreate(0, 1);
    if (!Desk_Kbd_KeyDown(Desk_inkey_SHIFT)) FilerDelete(r);
  } /*else Desk_Wimp_CloseWindow(event->data.openblock.window); */
  return(Desk_TRUE);
}


/*  Update menu flags - shared by a number of routines.
 */
static void FilerUpdateMenu(wind_record *r)
{
  int loop;
  char buf[32];
  Desk_bool expert = Desk_FALSE;

  /* Update menu structure */
  if (r == NULL) return;
#ifdef EXPERT
  if (prog_config.expert) expert = Desk_TRUE;
#endif
  if (expert)
  {
    if ((select_item == 0) || (r->index == NULL))
    {
      strcpy(buf, "Connect ");
      if (!menu_icon_mo) menu_icon_mo = ClientMakeMenu(menu_icon_mo);
      Desk_Menu_AddSubMenu(menu_main, mmenu_CONNECT, menu_icon_mo);
    }
    else
    {
      item_record *ir = r->index[select_item-1];
      sprintf(buf, "Connect '%s'", ir->shortname);
      Desk_Menu_AddSubMenu(menu_main, mmenu_CONNECT, NULL);
    }
    Desk_Menu_SetText(menu_main, mmenu_CONNECT, buf);
    Desk_Menu_SetFlags(menu_main, mmenu_CONNECT, Desk_FALSE, Desk_FALSE);
    }
  else
  {
    if ((select_item == 0) || (r->index == NULL))
    {
      sprintf(buf, "Connect%s", (r == &wind_filer) ? " ''" : " ");
    }
    else
    {
      item_record *ir = r->index[select_item-1];
      sprintf(buf, "Connect '%s'", ir->shortname);
    }
    Desk_Menu_SetText(menu_main, mmenu_CONNECT, buf);
    Desk_Menu_SetFlags(menu_main, mmenu_CONNECT, Desk_FALSE, (r == &wind_filer) && (select_item == 0));
  }
  for (loop = mdmenu_LARGE; loop <= mdmenu_FULL; loop++)
    Desk_Menu_SetFlags(menu_main_d, loop, (r->display == loop), Desk_FALSE);
  Desk_Menu_SetFlags(menu_main_d, mdmenu_NAME, (r->sort == sort_NAME), Desk_FALSE);
  Desk_Menu_SetFlags(menu_main_d, mdmenu_TYPE, (r->sort == sort_PROTOCOL), Desk_FALSE);
  /* Fix the menu width (hack!) */
  Desk_Screen_CacheModeInfo();
  menu_main->width = (strlen(buf)+1) * 8 * Desk_screen_delta.x;
}


/*  Handler attached to all button click events.
 *  If no other handler specifically handles the click, and it was a menu
 *  click, we will pop up our menu in an appropriate position.
 */
extern Desk_bool Filer_ButtonClick(Desk_event_pollblock *event, wind_record *r)
{
  Desk_window_handle w = event->data.mouse.window;
  Desk_button_state  b;
  int 	        item;
  item_record   *ir = NULL;

  if ((r == NULL) || (w == NULL) || (w != r->w)) return(Desk_FALSE);
  b.value = event->data.mouse.button.value;
  TRACE2("Filer_ButtonClick: %x %d\n", (int) r, (int) b.value);
  item = SelectGetItem(w, &event->data.mouse.pos);

  if (b.data.menu) 	   			/* is a MENU click */
  {
    /* Click on an item - if no selection, then set it, else preserve */
    if ((item > 0) && (select_item == 0) && (w == r->w))
    {
      select_item = item;
      select_wind = w;
      select_transient = Desk_TRUE;
      HackRedraw(w, item);
    }

    /* Update menu structure */
    FilerUpdateMenu(r);
    Desk_Menu_Show(menu_main, event->data.mouse.pos.x-72, event->data.mouse.pos.y+16);
    menuwindow = (void *) r;
    if (select_item != 0)
    {
      if (!r->index) return(Desk_FALSE);
      ir = r->index[select_item-1];
      clientwindow = ClientFind(ir->client_id, NULL, -1, NULL);
    } else clientwindow = ClientFind(r->client_id, NULL, -1, NULL);
    return(Desk_TRUE);
  }

  /* Select click - reset selection, and possibly set to single message */
  if (b.data.clickselect)
  {
    TRACE("Filer_ButtonClick: click select\n");
    /* Click on a item */
    if ((item == select_item) && (r->w == select_wind)) return(Desk_TRUE);
    FilerSelection();
    if (item > 0)
    {
      select_item = item;
      select_wind = r->w;
      HackRedraw(r->w, item);
    }
    select_transient = Desk_FALSE;
    return(Desk_TRUE);
  }

  /* Adjust click - possibly toggle single message in selection */
  if ((b.data.clickadjust) && (item != 0))
  {
    TRACE("Filer_ButtonClick: click adjust\n");
    if ((select_item == item) && (select_wind == r->w))
    {
      select_item = 0;
      select_wind = NULL;
    }
    else
    {
      FilerSelection();
      select_item = item;
      select_wind = r->w;
    }
    HackRedraw(r->w, item);
    select_transient = Desk_FALSE;
    return(Desk_TRUE);
  }

  /* Select/Adjust double click - create subwindow [and close parent] */
  if (((b.data.select) || (b.data.adjust)) && (item > 0))
  {
    Desk_bool result = Desk_FALSE;

    TRACE1("Double click: %d\n", item);
    select_item = item;
    select_wind = r->w;
    if (r == &wind_filer)
    {
      result = FilerCreate(item, 2);
    }
    else
    {
      if (!r->index) return(Desk_FALSE);
      ir = r->index[item-1];
      if (!ir) return(Desk_FALSE);
      clientwindow = ClientFind(ir->client_id, NULL, -1, NULL);
      if (!clientwindow) return(Desk_FALSE);
      result = CreateMount(mount_WINDOW, -1, Desk_TRUE);
    }
    TRACE1("Double click: result %s\n", result ? "Desk_TRUE" : "Desk_FALSE");
    if (result)
    {
      FilerSelection();
      if (b.data.adjust) FilerDelete(r);
    }
  }

  return(Desk_FALSE);
}

