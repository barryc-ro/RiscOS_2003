/*
 * Program:	CoreInit.c - core initialisation routines
 *
 * Project:	!Omni OmniClient(tm) project
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	13 July 1994
 * Last Edited:	14 February 1995
 *
 * Copyright 1994,1995 by ANT Limited
 */

#include "Hdrs.h"
#include "kernel.h"
#include "Desk/Screen.h"            	/* Getting screen size info, etc   */
#include "Desk/SWI.h"              	/* Low level OS calls              */
#include "Desk/ColourTran.h"
#include "Desk/Resource.h"          	/* Handles finding resource files  */
#include "Desk/Sound.h"          	/* */
#include "Desk/Sprite.h"
#include "Expert.h"

extern void close(void);		/* atexit() handler */
extern void serviceomni(int num);
extern int *resource_spritearea = NULL;	/* Private sprite pool */
extern Desk_window_handle wind_message = NULL;

extern char *developed = "\n Developed by ANT Limited <sales@ant.co.uk> \n";

#define wimp_VERSION	310		/* Min version of Wimp required to run */
#define _OS_FSControl	0x000029


#ifdef app_TIMED

/*  Set up a private sprite pool for application sprites.
 */
static Desk_bool SpriteArea(void)
{
  int		poolsize;
  char		temp[64];

  sprintf(temp, "%s^.Sprites", resource_pathname);
  if ((poolsize = Desk_File_Size(temp)) == 0)
  {
    Desk_Msgs_Report(1, "coreinit.nosprite");
    return(Desk_FALSE);
  }
  poolsize+=4;
  if ((resource_spritearea = (int *) heap_alloc(poolsize+4)) == NULL)
  {
    Desk_Error_OutOfMemory(Desk_FALSE, "private sprite area");
    return(Desk_FALSE);
  }
  resource_spritearea[0] = poolsize;
  resource_spritearea[2] = 16;
  Desk_Sprite_InitArea((sprite_area) resource_spritearea);
  Desk_Sprite_Load((sprite_area) resource_spritearea, temp);
  return(Desk_TRUE);
}


/*  Set indirected sprite for a icon
 */
extern void Desk_Icon_SetSprite(Desk_window_handle window, Desk_icon_handle icon, char *string)
{
  Desk_icon_createblock 	i;
  Desk_icon_handle		ih;

  /* Set up a sprite icon with the icon that represents the relevant file type. */
  i.window = window;
  Desk_Wimp_GetIconState(i.window, icon, &i.icondata);
  Desk_Wimp_DeleteIcon(window, icon);

  i.icondata.flags.value &= ~Desk_icon_TEXT;
  i.icondata.flags.value |= Desk_icon_SPRITE + Desk_icon_INDIRECTED;
  strcpy((char*) i.icondata.data.indirectsprite.name, string);
  i.icondata.data.indirectsprite.spritearea = (void *) resource_spritearea;
  Desk_Wimp_CreateIcon(&i, &ih); /* will recreate with same number. */

  /* Update icon on screen */
  Desk_Wimp_SetIconState(window, icon, 0, 0);
}


/*  Pop up message window (startup & on mode change).
 */
extern Desk_bool MessageWindow(Desk_event_pollblock *event, void *reference)
{
  if (wind_message)
  {
    Desk_Window_Delete(wind_message);
    Desk_Window_ModeChange();
  }
  Desk_Sound_SysBeep();
  wind_message = Desk_Window_CreateSpriteArea("message", Desk_template_TITLEMIN, resource_spritearea);
  if (wind_message)
  {
    Desk_Window_Show(wind_message, Desk_open_CENTERED);
    /* Display hi-res sprite if a square pixel mode */
    Desk_Screen_CacheModeInfo();
    if (Desk_screen_eig.y <= 1) Desk_Icon_SetSprite(wind_message, message_logo, "antlogo_22");
      else Desk_Icon_SetSprite(wind_message, message_logo, "antlogo");
    Desk_EventMsg_Claim(Desk_message_MODECHANGE, Desk_event_ANY, MessageWindow, NULL);
    return(Desk_TRUE);
  }
  return(Desk_FALSE);
}


/*  Check for valid system clock
 *  for prerelease timebomb 'feature'
 */
static Desk_bool CheckClock(void)
{
  struct tm 	*timeptr;
  time_t    	thetime;
  Desk_bool      	ok = Desk_TRUE;
#ifdef app_DELETE
  char      	*app_path = app_IMAGE;
#else
  Desk_event_pollblock *event;
  void *reference;
#endif

  TRACE("coreinit.CheckClock\n");
  Risc_Time(&thetime);
  timeptr = localtime(&thetime);
  if (timeptr == NULL) ok = Desk_FALSE;
  /* Months start from 0, eg, August == 7 */
  if ((timeptr->tm_year != 95) || (timeptr->tm_mon > 4)) ok = Desk_FALSE;

  /* Invalid system clock - this application must die ! */
  if (!ok)
  {
#ifdef app_DELETE
    /* Try and delete application runimage */
    if (Desk_SWI(4,0,_OS_FSControl, 27, (int) app_path, 0, 3) == NULL)
    {
      Desk_Error_ReportFatal(1, "*** Beta-Release timed out *** Please request a newer version.");
    }
    else
    {
      /* Give a bogus error message */
      Desk_Msgs_ReportFatal(1, "coreinit.nowrite");
    }
#else
    if (!Desk_Template_Find("message")) return(Desk_FALSE);
    /* Set up private sprite pool for application sprites */
    if (!SpriteArea()) return(Desk_FALSE);
    MessageWindow(event, reference);
    ok = (wind_message);
    if (ok) Desk_EventMsg_Claim(Desk_message_MODECHANGE, Desk_event_ANY, MessageWindow, NULL);
#endif
  }

  return ok;
}
#endif


#define _OS_ServiceCall                0x000030

/*  Initialise templates and messages system from country configuration.
 */
extern void InitResources(char *path)
{
  int        len, type;
  char       country[16];
  int        country_num;

  TRACE("coreinit.InitResources\n");

  /* Read in country number */
  country_num = _kernel_osbyte(240, 0, 255) & 255;

  /* Set up a service call to translate the number to a text name */
  Desk_SWI(6,6, _OS_ServiceCall, 0,0x43,2,country_num,(int) country,15,
    NULL, &type, NULL, NULL, NULL, &len);
  if (type == 0)
  {
    char temp[96];

    /* Country code recognized OK */
    country[len] = (char) 0;
    sprintf(path, "<%s$Dir>.Resources.%s.", app_DIR, country);

    /* Try and find the appropriate Messages file */
    sprintf(temp, "%sMessages", path);
    if (!Desk_File_Exists(temp))
    {
      /* Couldn't locate resources directory/messages file - default */
      sprintf(path, "<%s$Dir>.%s", app_DIR, "Resources.UK.");
    }
  }
  else
  {
    /* Unknown country code - use 'UK' */
    Desk_Error_Report(0, "Unknown country code, using 'UK'");
    sprintf(path, "<%s$Dir>.%s", app_DIR, "Resources.UK.");
  }
  TRACE1("coreinit.InitResources: %s\n", path);
}


/*  Reset all extern variables
 */
extern void InitVars(void)
{
  taskhandle = 0;
  Desk_LinkList_Init(&mount_anchor);
  Desk_LinkList_Init(&mlist_anchor);
  Desk_LinkList_Init(&plist_anchor);
  Desk_LinkList_Init(&mwind_anchor);
  wind_info = NULL;
  wind_client = NULL;
  wind_mounttmp = NULL;
  wind_mountinfo = NULL;
  wind_mountdom = NULL;
  all_done = Desk_FALSE;
  wind_filer.w = NULL;
  Desk_LinkList_Init(&wind_filer.anchor);
  wind_filer.nitems = 0;
  wind_filer.index = NULL;
  Desk_LinkList_Init(&wind_filer.items);
  wind_filer.item = 0;
  menu_icon = NULL;
  menu_icon_i = NULL;
  menu_icon_d = NULL;
  menu_icon_m = NULL;
  menu_icon_mo = NULL;
  menu_icon_q = NULL;
  menu_main = NULL;
  menu_main_d = NULL;
  menuwindow = NULL;
  mountwindow = NULL;
  clientwindow = NULL;
  select_item = 0;
  select_wind = NULL;
  select_transient = Desk_FALSE;
  all_predone = Desk_FALSE;
  Desk_LinkList_Init(&redraw_anchor);
}


/*  Read global program configuration from <app_DIR>$Options variable.
 */
extern void ConfigRead()
{
  char *s = getenv(app_DIR"$Options");
  char *p = NULL;
  int n;

  prog_config.sort = sort_NAME;
  prog_config.display = display_LARGE;
  prog_config.expert = Desk_FALSE;
  prog_config.autolocate = Desk_FALSE;
  TRACE1("ConfigRead: %x\n", (int) s);
  if (!s) return;
  if ((p = strchr(s, 's')) != NULL)
  {
    n = atoi((char *) p+1);
    TRACE2("ConfigRead: sort '%s' %d\n", p, n);
    if ((n >= sort_NONE) && (n <= sort_PROTOCOL)) prog_config.sort = n;
  }
  if ((p = strchr(s, 'd')) != NULL)
  {
    n = atoi((char *) p+1);
    TRACE2("ConfigRead: display '%s' %d\n", p, n);
    if ((n >= display_LARGE) && (n <= display_FULL)) prog_config.display = n;
  }
#ifdef EXPERT
  if ((p = strchr(s, 'x')) != NULL) prog_config.expert = Desk_TRUE;
#endif
  if ((p = strchr(s, 'a')) != NULL) prog_config.autolocate = Desk_TRUE;
}


/*  Set global program configuration as <app_DIR>$Options variable.
 */
extern void ConfigWrite()
{
  char buf[10];

  sprintf(buf, "s%d d%d%s%s", prog_config.sort, prog_config.display,
    (prog_config.expert) ? " x" : "", (prog_config.autolocate) ? " a" : "");
  _kernel_setenv(app_DIR"$Options", buf);
}


#define Wimp_ReadSysInfo	0x0400F2

/*  Initialise - application initialisation
 */
extern Desk_bool coreinit(void)
{
  char          appname[64];
  char          menudescription[260];
  mount_record	*mr = NULL;
  int		msg_block[] =		/* List of all known message numbers, 0 terminated */
  {
    Desk_message_DATASAVE, Desk_message_DATASAVEOK, Desk_message_DATALOAD, Desk_message_DATAOPEN,
    Desk_message_DATALOADOK, Desk_message_PREQUIT, Desk_message_SAVEDESK, Desk_message_HELPREQUEST,
    Desk_message_MODECHANGE, Desk_message_WINDOWINFO, Desk_message_MENUWARN, Desk_message_MENUSDELETED,
    Desk_message_INITTASK, 0
  };
  char		*err = NULL;
  int		active;

  TRACE("coreinit.Entry:\n");
  Desk_Hourglass_Start(5);

  /* Initialise heap management.
   */
  heap_init();
  InitVars();

  /* Check we are really in the desktop.
   */
  Desk_SWI(1,1, Wimp_ReadSysInfo, 0, &active);
  if (active <= 0)
  {
    Desk_Hourglass_Off();
    return(Desk_FALSE);
  }
  Desk_SWI(1,1, Wimp_ReadSysInfo, 3, &active);
  if (active == 0)
  {
    Desk_Hourglass_Off();
    return(Desk_FALSE);
  }

  /* Initialise the Wimp and Event Manager (as a RO3 task).
   * The task name shown on the task display and error reports is set from
   * the string "app_DIR" set as a #define.
   */
  TRACE2("coreinit.init1: %s %d\n", app_DIR, wimp_VERSION);
  Desk_Event_Initialise3(app_DIR"Client", wimp_VERSION, msg_block);
  Desk_EventMsg_Initialise();
  taskhandle = Desk_Event_taskhandle;
  all_hasrun = Desk_TRUE;

  /* Tell Resource (and thereby Template, Msgs, etc) where our resource
   * directory is: "<Mail$Path>".Resources.Country
   */
  InitResources(Desk_resource_pathname);

  /* Load and cache the messages. Find out the application name.
   */
  TRACE("coreinit.messages:\n");
  Desk_Msgs_LoadFile("Messages");
  Desk_Msgs_Lookup("app.name:OmniClient", appname, 63);

  /* Read and remember the current screen mode information
   * (width and height, eig-factors, delta-x and delta-y, etc.)
   * This is needed by the Menu code to get menu widths correct.
   */
  Desk_Screen_CacheModeInfo();

  /* Add a handler function to a "screen mode changing" Wimp message, so
   * that the information provided by the "Screen" functions is always
   * correct.
   * NOTE that the new Desk_Handler_ModeChange should also ensure that outline
   * fonts will work if we change between lo-res and hi-res screen modes.
   */
  TRACE("coreinit.claim:\n");
  Desk_EventMsg_Claim(Desk_message_MODECHANGE, Desk_event_ANY, Desk_Handler_ModeChange, NULL);
  Desk_EventMsg_Claim(Desk_message_MODECHANGE, Desk_event_ANY, MountModeChange, NULL);

  /* Plonk an icon onto the iconbar
   */
  mr = MountCreate(NULL);

  /* Place the Desk_Handler_ module skeleton default handlers on all
   * Redraw and Open-window request events (Application-wide defaults)
   */
  Desk_Event_Claim(Desk_event_REDRAW, Desk_event_ANY, Desk_event_ANY, Desk_Handler_NullRedraw, NULL);
  Desk_Event_Claim(Desk_event_OPEN, Desk_event_ANY, Desk_event_ANY, Desk_Handler_OpenWindow, NULL);
  Desk_Event_Claim(Desk_event_CLOSE, Desk_event_ANY, Desk_event_ANY, Desk_Handler_CloseWindow, NULL);

  /* Load in and cache our window templates from the template file
   * (Templates utilise the "Resource Directory"),
   * with support for using outline fonts in the icons if the file specifies
   * outline fonts.
   */
  Desk_Template_Initialise();
  Desk_Template_UseOutlineFonts();
  /* '3D-look' bit */
  if ((_kernel_osbyte(161, 140, 0) & (1 << 8)) == 0) Desk_Template_LoadFile("Templates");
    else Desk_Template_LoadFile("Template3D");

  /* Add the Desk_Window_HelpHandler message handler so that help requests
   * for the main windows and the iconbar icon are automatically handled
   */
  Desk_Window_AutoHelp(Desk_event_ANY, Desk_event_ANY);
  Desk_EventMsg_Claim(Desk_message_HELPREQUEST, Desk_event_ANY, HelpHandler, NULL);

  /* Read configuration */
  ConfigRead();

  /*  Menus
   */
  Desk_Msgs_Lookup("mhdr.icon", appname, 63);
#ifdef EXPERT
  Desk_Msgs_Lookup((prog_config.expert) ? "menu.icone" : "menu.icon", menudescription, 259);
#else
  Desk_Msgs_Lookup("menu.icon", menudescription, 259);
#endif
  menu_icon = Desk_Menu_New(appname, menudescription);
  menu_icon_mo = NULL;
  Desk_Msgs_Lookup("mhdr.icon_d", appname, 63);
  Desk_Msgs_Lookup("menu.icon_d", menudescription, 259);
  menu_icon_d = Desk_Menu_New(appname, menudescription);
  Desk_Menu_AddSubMenu(menu_icon, imenu_DISMOUNT, menu_icon_d);
#ifdef EXPERT
  if (prog_config.expert)
  {
    Desk_Msgs_Lookup("mhdr.icon_q", appname, 63);
    Desk_Msgs_Lookup("menu.icon_q", menudescription, 259);
    menu_icon_q = Desk_Menu_New(appname, menudescription);
    Desk_Menu_AddSubMenu(menu_icon, imenu_QUIT, menu_icon_q);
  }
#endif

  Desk_Msgs_Lookup("mhdr.main", appname, 63);
  Desk_Msgs_Lookup("menu.main", menudescription, 259);
  menu_main = Desk_Menu_New(appname, menudescription);
  Desk_Msgs_Lookup("mhdr.main_d", appname, 63);
  Desk_Msgs_Lookup("menu.main_d", menudescription, 259);
  menu_main_d = Desk_Menu_New(appname, menudescription);
  Desk_Menu_AddSubMenu(menu_main, mmenu_DISPLAY, menu_main_d);

  /* Claim usermessage events */
  Desk_EventMsg_Claim(Desk_message_CLOSEDOWN, Desk_event_ANY, GenEvent, NULL);
  Desk_EventMsg_Claim(Desk_message_DATALOAD, Desk_event_ANY, GenEvent, NULL);
  Desk_EventMsg_Claim(Desk_message_DATALOADACK, Desk_event_ANY, GenEvent, NULL);
  Desk_EventMsg_Claim(Desk_message_DATASAVE, Desk_event_ANY, GenEvent, NULL);
  Desk_EventMsg_Claim(Desk_message_DATASAVEACK, Desk_event_ANY, GenEvent, NULL);
  Desk_EventMsg_Claim(Desk_message_DATAOPEN, Desk_event_ANY, GenEvent, NULL);
  Desk_EventMsg_Claim(Desk_message_PREQUIT, Desk_event_ANY, GenEvent, NULL);
  Desk_EventMsg_Claim(Desk_message_SAVEDESK, Desk_event_ANY, GenEvent, NULL);
  Desk_EventMsg_Claim(Desk_message_WINDOWINFO, Desk_event_ANY, GenEvent, NULL);
  Desk_EventMsg_Claim(Desk_message_MENUSDELETED, Desk_event_ANY, GenEvent, NULL);
  Desk_EventMsg_Claim(Desk_message_INITTASK, Desk_event_ANY, GenEvent, NULL);

  /* Mask out unwanted events */
  Desk_Event_mask.data.ptrleave = Desk_TRUE;
  Desk_Event_mask.data.ptrenter = Desk_TRUE;
  Desk_Event_mask.data.gaincaret = Desk_TRUE;
  Desk_Event_mask.data.losecaret = Desk_TRUE;

  /* Check for timebomb */
#ifdef app_TIMED
  if (!CheckClock())
  {
    Desk_Hourglass_Off();
    return(Desk_FALSE);
  }
#endif

  /* Register atexit() handler for program quit */
  atexit(close);

  /* Wake up any dormant protocol modules */
  serviceomni(0);

  /* Check for error at load time with <Omni$Error> variable */
  err = getenv("Omni$Error");
  if (err) Desk_Error_Report(0, err);

  /* Load configuration */
  MountLoadFile(NULL);

  /* Set global mask for pollword stuff */
  Desk_Event_mask.data.highprioritypoll = 1;
  Desk_Event_mask.data.r3ispollwordptr = 1;
  /*Desk_event_pollword = &pollword;*/

  /* Re-build Mounts table, for icons on iconbar */
  Desk_SWI(2,0, SWI_BASE+0, 0, 1);

  /* Initialisation OK */
  Desk_Hourglass_Off();
  return(Desk_TRUE);
}
