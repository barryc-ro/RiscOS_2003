; Title:   s.ExtLibAsm
; Purpose: Extensions in assembler
;

	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:Services
	GET	Hdr:Wimp

        AREA	ExtLibAsm, CODE, READONLY
	IMPORT	taskhandle

; Issue Service_OmniAction on a transient callback

	EXPORT	serviceomni_delay

serviceomni_delay
	STMFD	sp!, {lr}
	MOV	a2, a1			; save R0 parameter (called as r12)
	ADR 	a1, serviceomni_cb
	SWI	XOS_AddCallBack
        LDMFD	sp!, {pc}

serviceomni_cb
	STMFD	sp!, {a1-a2, lr}
	MOV	a1, ip			; issue service call
	MOV	a2, #Service_OmniAction
        SWI	XOS_ServiceCall
        LDMFD	sp!, {a1-a2, pc}

; Wimp_SpriteReadInfo

        EXPORT  Wimp_SpriteReadInfo

Wimp_SpriteReadInfo
        STMFD   sp!, {a2, v1, v2, v3, lr}
        MOV     a3, a1
        MOV     a1, #40
        SWI     XWimp_SpriteOp
        LDMFD   sp!, {a2}
        STMVCIA a2, {a4, v1, v2, v3}
        MOVVC   a1, #0
        LDMFD   sp!, {v1, v2, v3, pc}^

; SetVar_Code - sets up/removes a code system variable

        EXPORT  SetVar_Code

SetVar_Code
        STMFD   sp!, {v1, lr}
	MOVS	a3, a1			; r0 = -ve on entry to remove variable
	MOVGE	a3, #var_end-var_code
	STR	a2, var_taskhandle	; r1 = address of taskhandle int
	ADR	a1, var_name
	ADR	a2, var_code
	MOV	a4, #0
	MOV	v1, #16
	SWI	XOS_SetVarVal
        LDMFD   sp!, {v1, pc}^

; var_code - evaluates the system variable

var_code
	B	var_write		; write entry point
	LDR	a1, var_taskhandle	; read entry point
	LDR	a1, [a1]
	CMP	a1, #0
	MOVGT	a2, #"1"
	MOVLE	a2, #"0"
	ADR	a1, var_state
	STRB	a2, [a1, #0]
	MOV	a3, #1
var_write
	MOV	pc, lr
var_taskhandle
	DCD	0
var_state
	DCB	"0"
var_end

var_name
	=	"Omni$Running", 0

        END
