/* -*-C-*-
 *
 * omniacc.h    OmniClient interface for Access and Access+
 *
 * (C) ANT Limited 1994. All rights reserved.
 *
 * Borris, December 1994.
 */

#ifndef included_omniacc_h
#define included_omniacc_h

#define SPRITE_NAME             "04a900"       /* DITTO                    */
#define ERROR_BASE              OmniAccess_00  /* Same as SWI base */
#define DESCLINE1               "OmniClient Access+ Client" /* Omni_RegisterClient */
#define DESCLINE2               "(C) Acorn Computers Ltd 1996"      /* Omni_RegisterClient */
#define MAXUSER                 60                          /* ShareFSLogon */
#define MAXKEY                  6                           /* ShareFSLogon */
#define NoError                 NULL
#define NO_AUTHENT              ( (FreewayAuthent) 0 )
#define DISABLE_IRQS            const int oldirqs = ensure_irqs_off()
#define RESTORE_IRQS            restore_irqs(oldirqs)
#define START_ENUMERATION       flag_set(ACTIONS_SUSPENDED)
#define DONE_ENUMERATION        flag_clr(ACTIONS_SUSPENDED)
#define MAGIC_FREEWAY_VERSION   23      /* Version < this means no authentication */
#define MAGIC_SHAREFS_VERSION   333     /* Version < this means no authentication */
#define SWIX(s,i,o)             _kernel_swi(XOS_Bit | s, (_kernel_swi_regs *) i, (_kernel_swi_regs *) o)

#define ENOSERVER               omni_error(0)       /* @@@@ XXX wrong! */
#define ENOSUCHSERVER(x)        omni_error1(3, x)
#define EINTERNAL               omni_error(8)
#define EBADCALL                omni_error(8)
#define EBADARGS                omni_error(8)
#define ENOMEM                  omni_error(9)
#define ECONNECTED                   omni_error(2)
#define EPASSWD                 omni_error(15)


/*****************************************************************************
 *
 */

typedef _kernel_oserror * Error;

/*typedef unsigned int uint;*/

typedef struct
{
    Error (*claim) (void);
    void (*release) (void);
} ClaimPair;



typedef struct authlist
{
    struct authlist *next;
    char *users_name;
    int len;
    int used;
    FreewayAuthent authent;
};

typedef unsigned char FreewayDescrip;

/*****************************************************************************
 *
 * One of these per Freeway authentication value. Additionally, one for
 * unauthenticated values and one as a pseudo server for entering user and
 * key pairs to generate authenticated values from.
 */

typedef struct server
{
    struct server  *        next;
    struct omnireg *        context;            /* Gives client_id, etc */

    FreewayDescrip          descriptor;
    unsigned char           flags;
    unsigned char           at_offset;          /* != 0 for authenticated */

    char *                  objname;
    FreewayAuthent          authent;            /* or NO_AUTHENT */
    IPaddress               address;

    char *                  server_shortname;
    char *                  server_fullname;
    char *                  server_description;
    char *                  mount_shortname;
    char *                  mount_fullname;
    char *                  mount_mountname;          /* enum active mounts eg */
} server;

#define SERVER_GONE         0x01u       /* Server no longer exists */
#define SERVER_HIDDEN       0x02u       /* Server not declared to Omni */
#define SERVER_MOUNTED      0x04u       /* Server is mounted */
#define SERVER_FLAG         0x08u       /* Marker during enum scanning */
#define SERVER_PSEUDO       0x10u       /* Such as the logon server */
#define SERVER_ACCESSPLUS   0x20u       /* Has an '@' in its name somewhere */
#define SERVER_YES          0x40u       /* consider_accessplus_mount_name() cache */

/*****************************************************************************/

typedef struct up_action
{
    struct up_action * next;
    uint            action;
    FreewayType     type;
    char *          objname;
    FreewayDescrip  descriptor;
    IPaddress       address;
    FreewayAuthent  authent;
} up_action;

#define FREEACT_ARRIVAL         0       /* Remotely initiated */
#define FREEACT_DEPARTURE       1       /* Remotely initiated */
#define FREEACT_CHANGED         2       /* Remotely initiated */
#define FREEACT_DELETED         3       /* Locally initiated */

/*****************************************************************************
 *
 * Structure used for each "client" registered with OmniClient. This is the
 * next layer upwards, above a server.
 */
typedef struct omnireg
{
    uint                client_id;     /* Ie SWI number registered         */
    uint                client_flags;  /* As used in registration          */
    char *              sprite_name;
    char *              client_name;
    char *              client_description;
    uint                site_word;
    char *              fs_name;
    server *            servers;        /* Servers for this registration */
} omnireg;


/*omnireg access_servers, accessplus_servers;*/
/*omnireg pseudo_access, pseudo_accessplus;*/

/*****************************************************************************/


/* State enumerations for 'state' */

#define INITIALISING    0   /* WAITING, RUNNING, DYING */
#define WAITING         1   /* RUNNING, DYING */
#define RUNNING         2   /* WAITING, DYING */
#define DYING           3   /* */


/*****************************************************************************/

/* Flags bitset for 'flags' */


/* General flags */


#define HAVE_AUTHENTICATION         0x00000001u /* Freeway knows about authentication */
#define ACTIONS_SUSPENDED           0x00000002u /* Doing enumerate - no queue processing */
#define CALLBACK_SCHEDULED          0x00000004u /* Have a callback already scheduled */
#define DONT_QUEUE_ACTIONS          0x00000008u /* Upcall handler should not enqueue */
#define HIDDEN_ERROR                0x00000010u /* Error occurred that could not report */

/* Loss of facility - means should not attempt release actions with it */

#define LOST_OMNI                   0x00000100u /* OmniClient has died - release all else */
#define LOST_FREEWAY                0x00000200u /* Freeway has died - release all else */
#define LOST_SHAREFS                0x00000400u /* ShareFS has died - release all else */

#define SEEN_OMNI                   0x00001000u
#define SEEN_FREEWAY                0x00002000u
#define SEEN_SHAREFS                0x00004000u

#define REGISTERED_0                0x01000000u /* Access  client registered */
#define REGISTERED_1                0x02000000u /* Access+ client registered */
#define REGISTERED_2                0x04000000u /* Pseudo Access+ registered */

/* The various actions that can be callback scheduled */

/* #define DO_DISCONNECT               0x10000000u */ /* Disconnect */
#define DO_CONNECT                  0x20000000u /* Attempt connection */
#define DO_ENUM_FREEWAY             0x40000000u /* Issue Freeway_Enumerate */
#define DO_UPCALL_ACTION            0x80000000u /* Process Upcall_Freeway requests */


/* Groupings of the above flags for convenience */

#define LOST_GROUP                  (LOST_OMNI | LOST_FREEWAY | LOST_SHAREFS)
#define MUST_SEE                    (SEEN_OMNI | SEEN_FREEWAY | SEEN_SHAREFS)


/* Flags used for shutdown_server */

#define SHUT_ENUMERATE		0x01
#define SHUT_DISMOUNT		0x02
#define SHUT_CLOSEDIR		0x04




/*****************************************************************************/



/*****************************************************************************
 *
 * Routines implemented in assembler
 */

extern Error resources_register(void);
extern void resources_deregister(void);
extern Error resources_starting(void);

/* For performing bit twiddling on globally accessible flags */

extern uint flag_set_(uint set, volatile uint *);
extern uint flag_clr_(uint clr, volatile uint *);
extern uint flag_setclr_(uint set, uint clr, volatile uint *);

#define flag_set(x)             flag_set_(x, &flags)
#define flag_clr(x)             flag_clr_(x, &flags)
#define flag_setclr(x,y)        flag_setclr_(x, y, &flags)

extern Error cause_server_enum(uint client_id);
extern Error cause_mounts_enum(uint client_id);

extern Error omni_error(int errnum);
extern Error omni_error1(int errnum, char *arg);


extern Error mycli_(char *cli);

extern void bounce_cb(void);    /* callback bouncer */

/* Kill my module from a callback */

extern void suicide(char *module_title);


/*****************************************************************************/

#endif /* included_omniacc_h */

/* eof omniacc.h */

