; support.s for OmniClient Access(+) Protocol

        GET         hdr.SwiNames
        GET         hdr.RegNames
        GET         hdr.ResourceFS


        AREA         |C$$code|, CODE, READONLY


        EXPORT  |suicide|
        EXPORT  |resources_register|
        EXPORT  |resources_deregister|
        EXPORT  |resources_starting|
        EXPORT        disable_irqs
        EXPORT        restore_irqs
        EXPORT        enable_irqs
        EXPORT        omni_error
        EXPORT        omni_error1

        EXPORT  bounce_cb

        EXPORT  flag_set_
        EXPORT  flag_clr_
        EXPORT  flag_setclr_
        EXPORT  mycli_
        EXPORT  cause_server_enum
        EXPORT  cause_mounts_enum

XOmni_MessageLookup        *        (1 :SHL: 17) + 3 + &4a200

I_Bit   *       1 :SHL: 27

; Register a transient callback

|suicide|
	STMFD	sp!, {r14}
	MOV	r1, r0			; save module_title address (called as r12)
	ADR 	r0, suicide_cb
	SWI	XOS_AddCallBack
        LDMFD	sp!, {pc}

|suicide_cb|
	STMFD	sp!, {r0-r1, r14}
        MOV	r0, #4			; kill named module
	MOV	r1, r12
	SWI	XOS_Module
        LDMFD	sp!, {r0-r1, r14}
	MOV	pc, r14

omni_error
omni_error1
        STMFD        sp!, {lr}
        SWI        XOmni_MessageLookup
        LDMFD        sp!, {pc}^

; Register & Deregister routines for our ResourceFS block

|resources_register|
        STMFD       sp!, {r14}
        ADR         r0, Resource_Base
        SWI         XResourceFS_RegisterFiles
        ADRVC       r0, cli_block
        SWIVC       XOS_CLI
        MOVVC       r0, #0
        LDMFD       sp!, {pc}

cli_block
        DCB         "IconSprites Resources:$.thirdparty.omniclient.omniaccess.sprites", 0
        ALIGN

|resources_deregister|
        STMFD        sp!, {r14}
        ADR        r0, Resource_Base
        SWI        XResourceFS_DeregisterFiles
        MOVVC        r0, #0
        LDMFD        sp!, {pc}

; Service_ResourceFSStarting handler (not yet working)

|resources_starting|
        STMFD        sp!, {r14}
        MOV        r2, r0
        MOV        r3, r1
        ADR        r0, Resource_Base
        MOV        r14, pc
        MOV        pc, r2
        LDMFD        sp!, {pc}^

; Data block
Resource_Base
        ResourceFile "Resources.Sprites", "ThirdParty.OmniClient.OmniAccess.Sprites"
        DCD        0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; disable_irqs:
;
; Disables interrupts up to the level of the ethernet driver (for RISC OS,
; this is just disable IRQs). Once IRQs are disabled, we cannot/must not
; be reentered.
;
; Returns a value indicating the state of interrupts prior to calling here.
;

disable_irqs        AND        r0, lr, # I_bit
                ORRS        pc, lr, # I_bit

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; restore_irqs:
;
; Restore interrupts to the state they were in prior to a call to
; ensure_irqs_off, using the value returned by ensure_irqs_off.
;

restore_irqs        BIC        lr, lr, # I_bit
                ORRS        pc, lr, r0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; enable_irqs:
;
; Ensure that interrupts are enabled. Returns a value that, when passed
; to restore_irqs, will restore the state prior to enabling interrupts.
;

enable_irqs        AND        r0, lr, # I_bit
                BICS        pc, lr, # I_bit


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; r0 bits, r1 ptr

flag_set_
        MOV     r2, pc
        ORR     r2, r2, # I_bit
        TEQP    r2, # 0
        LDR     r3, [r1]
        ORR     r0, r3, r0
        STR     r0, [r1]
        MOV     r0, r3
        MOVS    pc, lr

flag_clr_
        MOV     r2, pc
        ORR     r2, r2, # I_bit
        TEQP    r2, # 0
        LDR     r3, [r1]
        BIC     r0, r3, r0
        STR     r0, [r1]
        MOV     r0, r3
        MOVS    pc, lr

; r0 set, r1 clr, r2 ptr

flag_setclr_
        MOV     r3, pc
        ORR     r3, r3, # I_Bit
        TEQP    r3, #0
        LDR     r3, [r2]
        ORR     r0, r0, r3
        BIC     r0, r0, r1
        STR     r0, [r2]
        MOV     r0, r3
        MOVS    pc, lr




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


XOmni_EnumerateMounts   * (1 :SHL: 17) + &4a200

cause_server_enum
        STMFD   sp!, {lr}
        MOV     r1, # 0
        SWI     XOmni_EnumerateMounts
        MOVVC   r0, # 0
        LDMFD   sp!, {pc}^


cause_mounts_enum
        STMFD   sp!, {lr}
        MOV     r1, # 1
        SWI     XOmni_EnumerateMounts
        MOVVC   r0, # 0
        LDMFD   sp!, {pc}^


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        IMPORT  callback_veneer
bounce_cb
        STMFD   sp!, {r0-r12, lr}
        BL      callback_veneer
        LDMFD   sp!, {r0-r12, pc}           ; NO HAT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

mycli_  STMFD   sp!, {lr}
        SWI     XOS_CLI
        MOVVC   r0, #0
        LDMFD   sp!, {pc}^

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;







        END
