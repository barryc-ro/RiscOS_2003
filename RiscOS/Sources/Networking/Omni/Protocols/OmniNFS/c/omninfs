/* -*-c-*- */

/* OmniClient front end for NFS */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <kernel.h>
#include <swis.h>

#include <Global/RISCOS.h>
#include <Global/Services.h>

#include <AsmUtils/rminfo.h>

#include <DebugLib/DebugLib.h>

#include "OmniNFS.h"
#include "omnifiler.h"

#ifdef DEBUG
#  include "OmniNFSDbg.h"
#else
#  include "OmniNFSHdr.h"
#endif

#include "nfsdefs.h"

#include "serverlist.h"
#include "resources.h"
#include "constants.h"

#include "callback.h"

#include "makeerror.h"

#define DO_PRINTING 1

/*******************************************************************/
/* Global variables */

void *private_word;
int rpc_socket;

static int server_list_has_changed;

static int we_are_registered;

static onfs_active_server *server_list;
static onfs_active_mount  *mount_list;

static onfs_print_job *print_list;

static volatile int tick_pending, datagram_pending, callback_pending;

/*******************************************************************/
/* Forward declarations of static functions */

static _kernel_oserror *register_client(void);
static void deregister_client(void);

static void setup_callback(void);
static void clear_callback(void);

static _kernel_oserror *setup_ticker_and_event(void);
static void clear_ticker_and_event(void);

static void server_item_check_name(onfs_active_server *as);

/*******************************************************************/
/* Now the code itself */

/* mountlist_update
 *
 * Ensure that the list of mounts that we hold is an up to date
 * view of the NFS mounts.
 */

static _kernel_oserror *mountlist_update(void)
{
   _kernel_oserror *ep;
   _kernel_swi_regs r;
   onfs_active_mount **app;

   app = &mount_list;

   r.r[0] = 0;			/* All servers */
   r.r[1] = 0;			/* Start listing mounts */

   dprintf (("", "Starting to read internal mount list\n"));

   do
   {
       ep = _kernel_swi(NFS_MountList, &r, &r);

       if (ep)
	   return ep;

       if (r.r[1] != 0)
       {
	   int test;
	   char *name = (char*) r.r[1];
	   dprintf (("", "Mount fetched: %s\n", name));

	   do
	   {
	       if ( (*app) == 0)
	       {
		   dprintf (("", "No more items in our own list\n"));
		   test = -1;
	       }
	       else
	       {
		   dprintf (("", "Testing against '%s'", (*app)->mount_name));
		   test = strcmp(name, (*app)->mount_name);
		   dprintf (("", ", outcome = %d\n", test));
	       }
	       /* The mount list from NFS and our mount list
		* are both in alphabetic order
		*/

	       /* If the mount from NFS comes before the one in the list
		* we need to insert the new item.
		*/
	       if (test < 0)
	       {
		   onfs_active_mount *new;

		   dprintf (("", "Allocating new space, "));
		   new = malloc(sizeof(onfs_active_mount));
		   if (new == 0)
		       return make_error(err_NO_MEMORY);
		   new->mount_name = malloc(strlen(name)+1);
		   if (new->mount_name == 0)
		       return make_error(err_NO_MEMORY);

		   dprintf (("", "entry at 0x%p, string at 0x%p, ", new, new->mount_name));
		   new->magic = ONFS_MOUNT_MAGIC;
		   new->server_id = 0;
		   strcpy(new->mount_name, name);
		   new->next = *app;
		   *app = new;
		   app = &(new->next);	/* Points to the same item as before */
		   dprintf (("", " linked into list\n"));
		   test = 0;		/* Leabe the inner while loop */
	       }
	       /* If the mount from NFS comes after the one in the list
		* we need to delete the one in the list and try again.
		* This path is not taken if the rest of the list is empty.
		*/
	       else if (test > 0)
	       {
		   onfs_active_mount *old;

		   old = *app;
		   dprintf (("", "Removing stale item '%s'. ", old->mount_name));
		   *app = old->next;
		   dprintf (("", "Next point in chain point to 0x%p\n", *app));
		   if (old->mount_name)
		       free(old->mount_name);
		   old->magic = 0; /* Stomp on the magic number to prevent accidental reuse */
		   free(old);
		   /* Leave 'test' alone so we go around again */
	       }
	       /* If they are the same we just move on the the next in the list */
	       else
	       {
		   dprintf (("", "Items are equal so pass on\n"));
		   app = &((*app)->next);
	       }

	   } while (test != 0);
       }
   } while(r.r[1] != 0);

   /* There are no more real mounts */

   while (*app != 0)
   {
       onfs_active_mount *old;
       old = *app;
       dprintf (("", "Removing stale item '%s'. ", old->mount_name));
       *app = old->next;
       dprintf (("", "Next point in chain point to 0x%p\n", *app));
       if (old->mount_name != 0)
	   free(old->mount_name);
       old->magic = 0;
       free(old);
   }

   return NULL;
}

/* SWI server_id+0 "XXXX_OmniOp"
 *	On entry, R0 = reason code;
 *			0 = Mount
 *			1 = Dismount
 *			2 = Free
 *			3 = Enumerate servers
 *			4 = Enumerate mounts on a server
 *			5 = Enumerate active mounts
 *			6 = Open Root
 *			7 = Open User Root
 *			8 = Get Mount Info
 * 			9 = Create Print Job
 * 	               10 = Send data in Print Job
 * 	               11 = End Print Job
 * 	               12 = Abort Print Job(s)
 * 	               13 = Get Print Job Info
 *                    >13 = *reserved*
 *                  Other registers as required for given reason code
 *      On exit,  Registers set as required for given reason code
 *	All other registers preserved on exit
 *
 *      This SWI provides an entry point for the OmniClient to call
 *      individual client modules that have registered with it.
 */


/*	Reason code 0 - Mount server
 *        	On entry, R1 = ptr to Server string
 *        		  R2 = ptr to UserID string (optional)
 *        		  R3 = ptr to Password string (optional)
 *        		  R4 = ptr to Mount name string
 *        		  R5 = ptr to Mount path string (optional)
 *        		  R6 = ptr to Authentication server str (optional)
 *		On exit,  R1 = mount_id, or 0 if failed
 *
 *		Operation to mount a server (in fact a given 'mount' on a
 *		particular server).
 *		Strings are null terminated. Pointers are 0 if fields
 *		are not required for a given Client module. Strings not
 *		guaranteed by caller to be static across multiple calls.
 *		See comments about unique mount_id's in 'Terminology'
 *		section above.
 */
_kernel_oserror *OmniOp_Mount(_kernel_swi_regs *r)
{
    onfs_active_mount *am;
    onfs_active_mount **app;
    _kernel_swi_regs rr;
    _kernel_oserror *ep;
    int user = r->r[2];
    int auth = r->r[6];
    int server = r->r[1];
    char *new_name;

    /* Now it is safe to overwrite r->r[1] */
    r->r[1] = 0;

    if (auth == 0 || ((char*)auth)[0] == 0)	/* If there is no authentication server... */
	auth = server;				/* 	Use the file server to authenicate */
    if (user == 0 || ((char*)user)[0] == 0)	/* If there is no user specified... */
    {
	user = (int) "nobody";			/* 	use the user 'nobody' */
	auth = 0;
    }

    rr.r[0] = auth;
    rr.r[1] = user;
    rr.r[2] = r->r[3];

    ep = _kernel_swi(NFS_SetUser, &rr, &rr);

    if (ep)
	return ep;

    rr.r[0] = server;
    rr.r[1] = r->r[4];
    rr.r[2] = r->r[5];

    ep = _kernel_swi(NFS_Mount, &rr, &rr);

    if (ep)
	return ep;

    am = malloc(sizeof(onfs_active_mount));
    if (am == 0)
	return make_error(err_NO_MEMORY);

    new_name = (char*) r->r[4];

    am->magic = ONFS_MOUNT_MAGIC;
    am->server_id = 0;
    am->mount_name = malloc(strlen(new_name)+1);
    if (am->mount_name == 0)
	return make_error(err_NO_MEMORY);

    strcpy(am->mount_name, new_name);

    app = &mount_list;

    while ( (*app != 0) && (strcmp(new_name, (*app)->mount_name) > 0) )
    {
	app = &((*app)->next);
    }

    am->next = *app;
    *app = am;

    r->r[1] = (int) am;

    return(NULL);
}


/*	Reason code 1 - Dismount server
 *		On entry, R1 = mount_id
 *
 *		Operation to dismount a previously mounted server (in fact a
 *		given 'mount' on a particular server).
 */
_kernel_oserror *OmniOp_Dismount(_kernel_swi_regs *r)
{
    onfs_active_mount *am = (onfs_active_mount *) r->r[1];
    _kernel_swi_regs rr;
    _kernel_oserror *ep;

    if (am == 0 || am->magic != ONFS_MOUNT_MAGIC)
	return make_error(err_BAD_MAGIC);

    rr.r[0] = 0;
    rr.r[1] = (int) am->mount_name;

    ep = _kernel_swi(NFS_Dismount, &rr, &rr);

    return ep;
}

/*	Reason code 2 - Freespace on mount
 *		On entry, R1 = mount_id
 *		On exit,  R1 = user free space on mount (bytes)
 *		          R2 = user used space on mount (bytes)
 *		          R3 = total size of mount (bytes)
 *
 *		Returns freespace. Numbers are unsigned 32-bit integers. If
 *		any value is greater than (2^32 - 1) (=4Gbytes!) then simply
 *		return the maximum (0xFFFFFFFF).
 *              The exact interpretation of 'user freespace' and 'total
 *              size' is client dependent, however R1+R2 >= R3.
 */
_kernel_oserror *OmniOp_Free(_kernel_swi_regs *r)
{
    onfs_active_mount *am = (onfs_active_mount *) r->r[1];
    _kernel_swi_regs rr;
    _kernel_oserror *ep;

    if (am == 0 || am->magic != ONFS_MOUNT_MAGIC)
	return make_error(err_BAD_MAGIC);

    rr.r[1] = (int) am->mount_name;

    ep = _kernel_swi(NFS_FreeSpace, &rr, &rr);

    if (ep)
	return ep;

    r->r[1] = rr.r[0];
    r->r[2] = rr.r[2] - rr.r[3];
    r->r[3] = rr.r[2];

    return(NULL);
}


/*	Reason code 3 - Enumerate all servers on network
 *		On entry, R1 = ptr to buffer for servers list
 *		          R2 = size of buffer (bytes)
 *		          R3 = 0, start enumerating servers
 *		               not 0, continue enumerating servers
 *		On exit,  R1 = ptr to next free byte in buffer, word aligned
 *		          R3 = 0, operation complete
 *		               not 0, buffer full, call again with this R3
 *
 *		Operation scans visible network and returns block filled
 *		with Server records for every possible server, in the
 *		following format;
 *
 *		+0	server_id
 *		$4	shortname (no more than 24 characters, 0-terminated)
 *			fullname (no more than 64 characters, 0-terminated)
 *			description (some additional string, <= 48 chars)
 *
 *		+n	server_id
 *		$n+4	shortname/fullname/description
 *		...
 *
 *		Where n is the number of bytes, aligned upwards to a word
 *		boundary.
 *
 *		'shortname' is a short description of the server for Large
 *		and Small icon filer displays. eg, "server"
 *		'fullname' is a full description of the server for Full info
 *		filer displays. eg, "server.subnet.net"
 *              'description' is some textual field for tacking on the end
 *              of Full info filer displays. [We should discuss the sort of
 *              things that might go in here].
 *
 *		If R3 is not 0 on exit, then the enumeration is not complete
 *		(buffer full), and the reason code is called again with the
 *		new R3 value. This process continues until the enumeration
 *		is complete.
 */
_kernel_oserror *OmniOp_Servers(_kernel_swi_regs *r)
{
    onfs_active_server *as;
    char *buffer = (char *) r->r[1];
    int remaining = r->r[2];
    char tempbuf[4+24+64+48];

    if (r->r[3] == 0)
	as = server_list;
    else
	as = (onfs_active_server *) r->r[3];

    if (as->magic != ONFS_SERVER_MAGIC)
    	return make_error(err_BAD_MAGIC);

    while (as != 0)
    {
	dprintf(("", "Server id %p, name %s, address %x, last seen %d, %sill\n",
		as, as->server_name, as->addr, as->last_seen,
		as->server_ill ? "" : "not "));
	/* Only update the buffer if the server is not ill */
	if (as->server_ill == 0)
	{
	    char *ctemp = tempbuf;
	    int slen, clen;

	    clen = 0;

	    server_item_check_name(as);

	    *((int*)ctemp) = (int) as;
	    ctemp += 4;
	    clen  += 4;
	    slen = strlen(as->server_name);
	    strncpy(ctemp, as->server_name, as->short_name_len);
	    ctemp[as->short_name_len] = 0;
	    ctemp += as->short_name_len+1;
	    clen  += as->short_name_len+1;
	    strcpy(ctemp, as->server_name);
	    ctemp += slen+1;
	    clen  += slen+1;
	    strcpy(ctemp, get_dotted_ip_addr(as->addr));
	    strcat(ctemp, "\n\n");
	    slen = strlen(ctemp);
	    ctemp += slen+1;
            clen  += slen+1;

	    clen = (clen+3) & (~3);

	    if (clen <= remaining)
	    {
	      	memcpy(buffer, tempbuf, clen);
	      	remaining -= clen;
	      	buffer += clen;
	    }
	    else
	    {
	      	/* Don't move on if we could not copy */
	      	break;
	    }
	}
	/* Move to the next server even if it is ill */
	as = as->next;
    }

    dprintf (("", "Finnished list\n"));

    r->r[1] = (int) buffer;
    r->r[3] = (int) as;

    return(NULL);
}


/*	Reason code 4 - Enumerate all mounts on a server
 *		On entry, R1 = ptr to buffer for mounts list
 *		          R2 = size of buffer (bytes)
 *		          R3 = 0, start enumerating mounts
 *		               not 0, continue enumerating mounts
 *		          R4 = server_id
 *		On exit,  R1 = ptr to last byte written to buffer
 *		          R3 = 0, operation complete
 *		               not 0, buffer full, call again with this R3
 *
 *		Operation scans visible network and returns block filled
 *		with Mount records for every possible mount on the given
 *		server, in the following format;
 *
 *		+0	mount_id (or 0 if not connected)
 *		$4	shortname (no more than 16 characters, 0-terminated)
 *			fullname (no more than 32 characters, 0-terminated)
 *			description (some additional string, <= 64 chars)
 *
 *		+n	mount_id
 *		$n+4	shortname/fullname/description
 *		...
 *
 *		Where n is the number of bytes, aligned upwards to a word
 *		boundary.
 *
 *		'shortname' is a short description of the mount for Large
 *		and Small icon filer displays. eg, "leafdir"
 *		'fullname' is a full description of the mount for Full info
 *		filer displays. eg, "dir1.dir2.leafdir"
 *              'description' is some textual field for tacking on the end
 *              of Full info filer displays. We should discuss the sort of
 *              things that might go in here.
 *
 *		If R3 is not 0 on exit, then the enumeration is not complete
 *		(buffer full), and the reason code is called again with the
 *		new R3 value. This process continues until the enumeration
 *		is complete.
 */
_kernel_oserror *OmniOp_Mounts(_kernel_swi_regs *r)
{
    return make_error(err_NOT_SUPPORTED);
}

/*	Reason code 5 - Enumerate active (connected) mounts
 *		On entry, R1 = ptr to buffer for mounts list
 *		          R2 = size of buffer (bytes)
 *		          R3 = 0, start enumerating mounts
 *		               not 0, continue enumerating mounts
 *		On exit,  R1 = ptr to last byte written to buffer
 *		          R3 = 0, operation complete
 *		               not 0, buffer full, call again with this R3
 *
 *		Operation returns buffer filled with Mount records for every
 *		active (connected) mount on a server, in the following format;
 *
 *		+0	server_id
 *		+4	mount_id
 *		$8 	mount name (no more than 16 chars, 0-terminated)
 *
 *		+n	server_id
 *		...
 *
 *		Where n is the number of bytes, aligned upwards to a word
 *		boundary.
 *
 *		'mount name' is the mount name, as passed in the Mount
 *		(reason code = 0) OmniOp SWI call.
 *
 *		If R3 is not 0 on exit, then the enumeration is not complete
 *		(buffer full), and the reason code is called again with the
 *		new R3 value. This process continues until the enumeration
 *		is complete.
 */
_kernel_oserror *OmniOp_ActiveMounts(_kernel_swi_regs *r)
{
    _kernel_oserror *ep;
    onfs_active_mount *am;
    char *buffer = (char *) r->r[1];
    int remaining = r->r[2];

    if (r->r[3] == 0)
    {
	ep = mountlist_update();

	if (ep)
	    return ep;
	am = mount_list;
    }
    else
    {
	am = (onfs_active_mount *) r->r[3];

     	if (am->magic != ONFS_MOUNT_MAGIC)
	    return make_error(err_BAD_MAGIC);
    }

    while ((am != 0) && (remaining > 24) )
    {
	/* Any entry that starts 'Spool:' is assumed to be a printer spool and is surpressed */
	if (strncmp(am->mount_name, "Spool:", 6) != 0)
	{
	    int slen;

	    *((int*)buffer) = (int) am->server_id;
	    buffer += 4;
	    *((int*)buffer) = (int) am;
	    buffer += 4;
	    strncpy(buffer, am->mount_name, 15);
	    buffer[15]=0;
	    slen = strlen(buffer);
	    slen += 4;
	    slen &= (~3);

	    buffer += slen;

	    remaining -= 8;
	    remaining -= slen;
	}

	am = am->next;
    }

    r->r[1] = (int) buffer;
    r->r[3] = (int) am;

    return(NULL);
}


/*	Reason code 6 - Open Root of mount
 *		On entry, R1 = mount_id
 *
 *		Trigger a Filer_OpenDir on the highest point available
 *		in mount's visible directory tree. eg, '$'
 */
_kernel_oserror *OmniOp_Root(_kernel_swi_regs *r)
{
    char buffer[256];
    onfs_active_mount *am = (onfs_active_mount *) r->r[1];

    if (am == 0 || am->magic != ONFS_MOUNT_MAGIC)
	return make_error(err_BAD_MAGIC);

    sprintf(buffer, "Filer_OpenDir NFS::%s.$", am->mount_name);

    _kernel_oscli(buffer);

    return NULL;
}

/*	Reason code 7 - Open User Root of mount
 *		On entry, R1 = mount_id
 *
 *		Trigger a Filer_OpenDir on the current user's 'home'
 *		directory, or the highest point available in mount's
 *		visible directory tree if not applicable. eg, '/homes/nas'
 *		or '$'
 */
_kernel_oserror *OmniOp_UserRoot(_kernel_swi_regs *r)
{
    /* For NFS this is the same as the Op above */
    return OmniOp_Root(r);
}


/*	Reason code 8 - Get (inactive/not-connected) Mount Info
 *		On entry, R1 = mount_id (of active mount)
 *			  R2 = ptr to new Mount path string
 *		On exit,  R1 = new mount facilities flags word;
 *			       bit 0 = 1, mount does need User identifier
 *			       bit 1 = 1, mount does need Password string
 *                             bits 2..31 = *reserved* zero
 *
 *		This reason code allows for the possibility of changing
 *		authentication once a mount to a given server is made.
 *		mount_id is the existing connection to a server (possibly
 *		one of several) and the new mount name/path strings are the
 *		new mount to that server. Some clients (eg, LAN Manager)
 *		allow unauthenticated new mounts, once an authenticated
 *		mount is performed.
 */
_kernel_oserror *OmniOp_InactiveMountInfo(_kernel_swi_regs *r)
{
    /* Lord alone knows why anybody would want to do this.  I know I don't */
    return make_error(err_NOT_SUPPORTED);
}

/*	Reason code 9 - Get (active/connected) Mount Info
 *		On entry, R1 = mount_id (of active mount)
 *		On exit,  R1 = ptr to Server string
 *       		  R2 = ptr to UserID string
 *       		  R3 = ptr to Mount name string
 *       		  R4 = ptr to Mount path string
 *       		  R5 = ptr to Authentication server string
 *
 *		Operation to get information about an active mount.
 *		Strings are null terminated. Pointers are 0 if fields
 *		are not available for a given mount. Strings do not need to
 *		be guaranteed to be static across multiple calls.
 *              The Server string (R1) should be the 'full name' as supplied
 *              by OmniOp reason code 3 (Enumerate all servers).
 */
_kernel_oserror *OmniOp_ActiveMountInfo(_kernel_swi_regs *r)
{
    onfs_active_mount *am = (onfs_active_mount *) r->r[1];
    _kernel_oserror *ep;
    _kernel_swi_regs rr;

    if (am == 0 || am->magic != ONFS_MOUNT_MAGIC)
	return make_error(err_BAD_MAGIC);

    rr.r[1] = (int) am->mount_name;

    ep = _kernel_swi(NFS_MountInfo, &rr, &rr);

    if (ep)
	return ep;

    r->r[1] = rr.r[0];
    r->r[2] = rr.r[3];
    r->r[3] = rr.r[1];
    r->r[4] = rr.r[2];
    r->r[5] = rr.r[4];

    r->r[6] = (int) am->server_id;

    return NULL;
}


/* 	Reason code 10 - Create Print Job
 * 		On entry, R1 = ptr to server name
 * 	                  R2 = ptr to printer name
 * 	                  R3 = ptr to user name, or NULL
 * 	                  R4 = ptr to password string, or NULL
 * 	                  R5 = ptr to options string, or NULL
 * 	                  R6 = size of print job (bytes), or 0 if not known
 * 		On exit,  R1 = print_id, or 0 if failed
 *
 *         	Submit a new job for network printing. The user name and
 *         	options string are optional, and may be	NULL pointers.
 */
_kernel_oserror *OmniOp_CreateJob(_kernel_swi_regs *r)
{
    char *fname = (char *) malloc(256);
    char *sname = (char *) r->r[1];
    char *pname = (char *) r->r[2];
    char *uname = (char *) r->r[3];
    char *opts  = (char *) r->r[5];
    onfs_print_job *pj;
    _kernel_oserror *err = NULL;
    _kernel_swi_regs fr;

    r->r[1] = 0;
    if (fname == 0)
	return make_error(err_NO_MEMORY);

    sprintf(fname, "NFS#Printer::%s.%s.%s%s%s",
	    sname, pname,
	    (uname ? uname : "nobody"),
	    (opts ? "." : ""),
	    (opts ? opts : "") );

    pj = malloc(sizeof(onfs_print_job));
    if (pj == 0)
    {
      free(fname);
      return make_error(err_NO_MEMORY);
    }

    fr.r[0] = 0x83;
    fr.r[1] = (int) fname;
    err = _kernel_swi(OS_Find, &fr, &fr);
    pj->handle = fr.r[0]; /* _kernel_osfind(0x83, fname); */

    if ((pj->handle == 0) || (err))
    {
	free(pj);
	free(fname);
	return make_error(err_CANT_PRINT);
    }
    pj->magic = ONFS_PRINT_MAGIC;
    pj->status = flag_print_OPENED;
    pj->bytes = 0;

    pj->next = print_list;
    print_list = pj;

    r->r[1] = (int) pj;

    free(fname);
    return 0;
}


/* 	Reason code 11 - Send data in Print Job
 * 		On entry, R1 = print_id
 * 		          R2 = ptr to data block to send
 * 		          R3 = size of data block to send
 * 		On exit,  R3 = number of bytes not sent, or 0 for all done
 * 		All other registers preserved on exit
 *
 *         	Send a block of data down network printer stream for a given
 *         	active print_id word.
 */
 _kernel_oserror *OmniOp_SendJob(_kernel_swi_regs *r)
{
    onfs_print_job *pj = (onfs_print_job *) r->r[1];
    _kernel_osgbpb_block gbpb;
    _kernel_oserror *ep;

    if (pj == 0 || pj->magic != ONFS_PRINT_MAGIC)
	return make_error(err_BAD_MAGIC);

    gbpb.dataptr = (void*) r->r[2];
    gbpb.nbytes = r->r[3];

    /* @@@@ What should we do with the int return code from this call ? */
    ep = (_kernel_oserror *) _kernel_osgbpb(2, pj->handle, &gbpb);

    pj->bytes += (r->r[3] - gbpb.nbytes);
    r->r[3] = gbpb.nbytes;

    if ((int) ep == 2)
    {
	ep = NULL;
	pj->status = flag_print_SENDING;
    }
    else
    {
	pj->status = flag_print_ERROR;
    }

    return ep;
}


/* 	Reason code 12 - End Print Job
 * 		On entry, R1 = print_id
 * 		All registers preserved on exit
 *
 *         	End a specified print job normally (ie, all data
 *         	transmitted).
 */
_kernel_oserror *OmniOp_EndJob(_kernel_swi_regs *r)
{
    onfs_print_job *pj = (onfs_print_job *) r->r[1];

    if (pj == 0 || pj->magic != ONFS_PRINT_MAGIC)
	return make_error(err_BAD_MAGIC);

    if (pj->handle)
	_kernel_osfind(0, (char*) pj->handle);

    pj->handle = 0;
    pj->status = flag_print_CLOSED;

    return NULL;
}


/* 	Reason code 13 - Abort Print Job(s)
 * 		On entry, R1 = print_id, or
 * 		             = 0, to abort all jobs
 * 		All registers preserved on exit
 *
 *         	Abort a specified print job, or all current jobs.
 */
_kernel_oserror *OmniOp_AbortJob(_kernel_swi_regs *r)
{
    onfs_print_job *pj = (onfs_print_job *) r->r[1];

    /* This one is different, pj can be zero legally */
    if (pj != 0 && pj->magic != ONFS_PRINT_MAGIC)
	return make_error(err_BAD_MAGIC);

    if (pj)
    {
	if (pj->handle)
	    _kernel_osfind(0, (char*) pj->handle);

	pj->handle = 0;
	pj->status = flag_print_ABORTED;
    }
    else
    {
	pj = print_list;
	while (pj)
	{
	    if (pj->handle)
		_kernel_osfind(0, (char*) pj->handle);

	    pj->handle = 0;
	    pj->status = flag_print_ABORTED;

	    pj = pj->next;
	}
    }

    return NULL;
}


/* 	Reason code 14 - Get Print Job Info
 * 		On entry, R1 = print_id
 * 		On exit,  R1 = local job status word
 * 			  R2 = local job # bytes sent
 * 			  R3 = error/status block ptr, or 0
 * 			  R4 = remote job status word
 * 			  R5 = remote job # bytes printed
 * 			  R6 = error/status block ptr, or 0
 * 		All other registers preserved on exit
 *
 *         	Get information on a specified print job. The status word
 *         	(R1, R3) is defined above in SWI Omni_JobStatus.
 */
_kernel_oserror *OmniOp_GetJobInfo(_kernel_swi_regs *r)
{
    onfs_print_job *pj = (onfs_print_job *) r->r[1];

    if (pj == 0 || pj->magic != ONFS_PRINT_MAGIC)
	return make_error(err_BAD_MAGIC);

    r->r[1] = pj->status | flag_print_HAS_STATUS;
    r->r[2] = pj->bytes;
    r->r[3] = r->r[4] = r->r[5] = r->r[6] = 0;

    return NULL;
}


/*	Reason code 15 - Clear Print Job(s)
 *		On entry, R1 = pjob_id, or
 *			     = 0, to clear all inactive jobs
 *		All registers preserved on exit
 *
 *		Clear a specified print job, or all inactive jobs. OmniClient
 *		will make this call when the print job submitter indicates,
 *		by calling SWI Omni_ClearJob, longer requires status information
 *		about that job. The status of a print job should reside in
 *		memory forever if this reason code is not called.
 *		'Inactive' in this case means either 'transfer complete' (3) or
 *		'job has terminal error' (5).
 */

_kernel_oserror *OmniOp_ClearJob(_kernel_swi_regs *r)
{
    onfs_print_job *pj = (onfs_print_job *) r->r[1];
    onfs_print_job **pjp = &print_list;

    if (pj != 0 && pj->magic != ONFS_PRINT_MAGIC)
	return make_error(err_BAD_MAGIC);

    if (pj != 0 && (pj->status != flag_print_CLOSED && pj->status != flag_print_ABORTED) )
    {
	return make_error(err_JOB_NOT_FINISHED);
    }

    while (*pjp)
    {
	if (*pjp == pj || (pj == 0 && ((*pjp)->status == flag_print_ABORTED || (*pjp)->status == flag_print_CLOSED)))
	{
	    onfs_print_job *pj2 = *pjp;
	    *pjp = pj2->next;
	    pj2->magic = 0;
	    free(pj2);
	}
	else
	{
	    pjp = &((*pjp)->next);
	}
    }

    return 0;
}


/*	Reason code 16 - Enumerate all printers on network
 *		On entry, R1 = ptr to buffer for printers list (word aligned)
 *			  R2 = size of buffer (words * 4)
 *			  R3 = 0, start enumerating printers
 *			       not 0, continue enumerating printers
 *		On exit,  R1 = ptr to next free byte in buffer, word aligned
 *			  R3 = 0, operation complete
 *			       not 0, buffer full, call again with this R3
 *
 *		Operation scans visible network and returns block filled
 *		with Printer records for every possible printer, in the
 *		following format;
 *
 *		+0	flags word (see below)
 *		$4	printer (no more than 24 chars, 0-terminated)
 *			server (no more than 64 chars, 0-terminated)
 *
 *		+n	flags
 *		$n+4	name
 *		...
 *
 *		Where n is the number of bytes, aligned upwards to a word
 *		boundary.
 */

_kernel_oserror *OmniOp_EnumeratePrinters(_kernel_swi_regs *r)
{
    return make_error(err_NOT_SUPPORTED);
}


_kernel_oserror *onfs_swi(int n, _kernel_swi_regs *r, void *pw)
{
    switch (n)
    {
    case 0: /* Dummy_OmniOp */
	dprintf (("", "OmniOP reason %d\n", r->r[0]));
	switch (r->r[0])
	{
        case 0: /* Mount */
	    return(OmniOp_Mount(r));
	    break;
        case 1: /* Dismount */
	    return(OmniOp_Dismount(r));
	    break;
        case 2: /* Free */
	    return(OmniOp_Free(r));
	    break;
        case 3: /* Enumerate servers */
	    return(OmniOp_Servers(r));
	    break;
        case 4: /* Enumerate mounts on a server */
	    return(OmniOp_Mounts(r));
	    break;
        case 5: /* Enumerate active mounts on a server */
	    return(OmniOp_ActiveMounts(r));
	    break;
        case 6: /* Open Root */
	    return(OmniOp_Root(r));
	    break;
        case 7: /* Open User Root */
	    return(OmniOp_UserRoot(r));
	    break;
        case 8: /* Get Inactive Mount Info */
	    return(OmniOp_InactiveMountInfo(r));
	    break;
        case 9: /* Get Active Mount Info */
	    return(OmniOp_ActiveMountInfo(r));
	    break;
        case 10: /* Create Print Job */
	    return(OmniOp_CreateJob(r));
	    break;
        case 11: /* Send Data to Print Job */
	    return(OmniOp_SendJob(r));
	    break;
        case 12: /* End Print Job */
	    return(OmniOp_EndJob(r));
	    break;
        case 13: /* Abort Print Job(s) */
	    return(OmniOp_AbortJob(r));
	    break;
        case 14: /* Get Print Job Info */
	    return(OmniOp_GetJobInfo(r));
	    break;
        case 15: /* Clear Print Job(s) */
	    return(OmniOp_ClearJob(r));
	    break;
        case 16: /* Enumerate Printers */
	    return(OmniOp_EnumeratePrinters(r));
	    break;
        default:
	    return make_error(err_NOT_SUPPORTED);
	}
	break;

    default:
	return make_error(err_NOT_SUPPORTED);
    }

    return NULL;
}


#ifdef DEBUG

_kernel_oserror *onfs_command(const char *tail, int argc, int n, void *pw)
{
    dprintf (("", "Command number %d\n", n));
    switch (n)
    {
    case CMD_OmniNFSListMounts:
	printf ("Listing mounts\n");
	if (mountlist_update() == NULL)
	{
	    onfs_active_mount *ap = mount_list;

	    while (ap)
	    {
		printf ("Mount ID 0x%p, server id 0x%p, '%s'\n", ap, ap->server_id, ap->mount_name);
		ap = ap->next;
	    }
	}
	break;
    case CMD_OmniNFSListPrintJobs:
	printf("Current printer jobs:\n");
	if (print_list == NULL)
	    printf("<None>\n");
	else
        {
	    onfs_print_job *pj = print_list;
	    char *status_strings[] = { "Pending ", "Opened  ", "Sending ", "Closed  ", "Error   ", "Aborted " };

	    while (pj)
	    {
		printf("Pjob ID %08p, Status: %s\t%d bytes sent\n", pj, status_strings[pj->status >> 1], pj->bytes);
		pj = pj->next;
	    }
	}
	break;
    case CMD_OmniNFSListServers:
	printf("Listing servers\n");
        {
	    onfs_active_server *as = server_list;

	    while (as)
	    {
		printf("Server ID 0x%p, '%s'%s\n", as, as->server_name, as->server_ill ? " (ill)":"" );
		as = as->next;
	    }
	}
	break;
    }

    return NULL;
}
#endif

void onfs_service(int n, _kernel_swi_regs *r, void *pw)
{
    switch(n)
    {
    case Service_OmniAction:
	dprintf (("", "Service_OmniAction... "));
	switch(r->r[0])
	{
	case 0:
	    {
		_kernel_oserror *ep;
		dprintf (("", "Registering\n"));
		ep = register_client();
		if (ep == 0)
		{
		    dprintf (("", "Registration successful\n"));
		    we_are_registered = 1;
		}
		else
		{
		    dprintf (("", "Registration failed, '%s'\n", ep->errmess));
		}
	    }
	    break;
	case 1:
	    {
		char *module_base = (char*) Image_RO_Base;
		char *module_title = module_base + *((int*) (module_base +0x10));
		dprintf (("", "Marking as de-registered\n"));
	        we_are_registered = 0;
		suicide(module_title);
	    }
	    break;
	}
	break;
    case Service_NFS:
	/* Mounts have changed or NFS has just started */
	if (we_are_registered)
        {
	    _kernel_swi_regs rr;

	    rr.r[0] = OmniNFS_OmniOp;
    	    rr.r[1] = 1;

	    _kernel_swi(Omni_EnumerateMounts, &rr, &rr);
	}
	break;
    }
}

_kernel_oserror *onfs_initialise(const char *tail, int base, void *pw)
{
    _kernel_oserror *ep;

    debug_initialise ("", "OmniNFS", NULL);
    debug_set_options (0, 0, 0);
    debug_output_device (TML_OUTPUT);

    private_word = pw;

    server_list = NULL;
    mount_list 	= NULL;
    print_list = NULL;

    we_are_registered = 0;

    tick_pending = datagram_pending = callback_pending = 0;

    server_list_has_changed = 0;

    rpc_socket = -1;		/* Give it an invalid socket number before the event is enabled */

    dprintf (("", "About to setup find server code\n"));

    ep = find_server_setup();
    if (ep)
	return ep;

    dprintf (("", "About to setup ticker and event\n"));

    ep = setup_ticker_and_event();

    if (ep)
	return ep;

    dprintf (("", "About to set callbeck for first request\n"));

    tick_pending = 1;
    setup_callback();

    dprintf (("", "About to setup resources\n"));

    resources_register();

    dprintf (("", "About to IconSprite the resources\n"));

    _kernel_oscli("IconSprites Resources:$.ThirdParty.OmniClient.OmniNFS.Sprites");

    dprintf (("", "About to register as client\n"));

    if (register_client() == 0)
	we_are_registered = 1;

    /* atexit(&onfs_finalise); */

    return NULL;
}

_kernel_oserror *onfs_finalise(int fatal, int podule, void *pw)
{
    onfs_active_mount *am;
    onfs_active_server *as;
    onfs_print_job *pj;

    if (we_are_registered)
    {
	deregister_client();
    }

    find_server_clear();

    clear_ticker_and_event();
    clear_callback();

    resources_deregister();

    am = mount_list;
    while (am)
    {
	onfs_active_mount *am_next = am->next;
	if (am->mount_name != 0)
	    free(am->mount_name);
	/* Avoid confusion should we be restarted and offered an old handle */
	am->magic = 0;
	free(am);
	am = am_next;
    }

    as = server_list;
    while (as)
    {
	onfs_active_server *as_next = as->next;
	if (as->server_name)
	    free(as->server_name);
	as->magic=0;
	free(as);
	as = as_next;
    }

    pj = print_list;
    while (pj)
    {
	onfs_print_job *pj_next = pj->next;
	if (pj->handle)
	{
	    _kernel_osfind(0, (char *) pj->handle);
	}
	pj->magic=0;
	free(pj);
	pj = pj_next;
    }

    /* Unset NFSFiler$Running variable to allow !NFSFiler to startup */
    _kernel_oscli("UnSet NFSFiler$Running");

    return NULL;
}

static void server_item_check_name(onfs_active_server *as)
{
    char *name;

    if (!as->good_address)
    {
        name = get_name_from_dns(as->addr);

        if (name)
        {
            char *nn, *dot;

            nn = malloc(strlen(name)+1);
            if (nn)
            {
                free(as->server_name);
                as->server_name = nn;
                strcpy(nn, name);

	        dot = strchr(name, '.');
	        if ((dot) && atoi(name) == 0)
	           as->short_name_len = dot - name;
	    	else
	    	   as->short_name_len = strlen(name);

	    	as->good_address = 1;
            }
        }
    }
}

/* Returns true if the server list is altered */
int server_list_insert(unsigned long addr)
{
    onfs_active_server **app = &server_list;
    onfs_active_server *as;
    int changed = 0;
    unsigned int now = MONOTIME;

    dprintf (("", "Inserting server 0x%x\n", (int) addr));

    while (*app)
    {
	as = *app;

	dprintf (("", "app = %p, *app = %p\n", app, *app));

	if (as->addr == addr)
	{
	    as->server_ill = 0;
	    as->last_seen = now;
	    dprintf (("", "Address hit\n"));
	    return 0;
	}
	app = &(as->next);
    }

    /* We didn't find the server so we better add it in */
    as = malloc(sizeof(onfs_active_server));
    /* If the malloc fails we ignore it this server for the moment; hopefully better luck next time */
    if (as)
    {
	char *name;

	dprintf (("", "Building new item\n"));

	name = get_name_from_dns(addr);

	as->magic = ONFS_SERVER_MAGIC;
	as->addr = addr;
	as->last_seen = now;
	as->server_ill = 0;
	as->server_name = 0;

	name = get_name_from_dns(addr);
	if (name)
	{
	    as->good_address = 1;
	}
	else
	{
	    name = get_name_from_addr(addr);
	    as->good_address = 0;
	}

	if (name)
	{
	    as->server_name = malloc(strlen(name)+1);
	    if (as->server_name)
	    {
		char *dot;

		strcpy(as->server_name, name);

		dot = strchr(as->server_name, '.');
		if (dot && atoi(name) == 0)
		    as->short_name_len = dot - as->server_name;
		else
		    as->short_name_len = strlen(as->server_name);
	    }
	}

	if (as->server_name == 0)
	{
	    as->server_name = "<No memory>";
	    as->short_name_len = 11;
	}

	dprintf (("", "Built new server item at %p\n", as));

	as->next = server_list;
	server_list = as;
	changed = 1;
    }
    else
    {
	dprintf (("", "No memory for new server item\n"));
    }

    if (changed)
	server_list_has_changed = 1;

    return changed;
}

/* Returns true if the server list is altered */
int server_list_purge(void)
{
    onfs_active_server **app = &server_list;
    int changed = 0;
    unsigned int now = MONOTIME;

    while (*app)
    {
	onfs_active_server *as = *app;

	/* Test to see if the server is ill first so that we correctly flag the list as changed */
	if (((now - as->last_seen) > SERVER_TIMEOUT_ILL) && (as->server_ill == 0))
	{
	    as->server_ill = 1;
	    changed = 1;
	}

	if ((now - as->last_seen) > SERVER_TIMEOUT_DEAD)
	{
	    *app = as->next;
	    if (as->server_name != 0)
		free(as->server_name);
	    as->magic = 0;
	    free(as);

	    /* Since *app is changed we don't want to move on */
	    continue;
	}

	app = &(as->next);
    }

    if (changed)
	server_list_has_changed = 1;

    return changed;
}

int inet_handler( _kernel_swi_regs *r, void *pw )
{
    int  rc = DONT_CLAIM_EVENT;
    enum
    {
        Socket_Async_Event = 1,
        Socket_Urgent_Event,
        Socket_Broken_Event
    };

    /* Don't need to check event number because the Inernet Event is
     * the only one we claim, and since it's specified in the CMHG header,
     * CMHG will generate appropriate filtering code for us.
     */

    _kernel_irqs_on ();

    switch (r->r[1])
    {
	case Socket_Async_Event:
	case Socket_Urgent_Event:
	case Socket_Broken_Event:
	    if (r->r[2] == rpc_socket)
	    {
		datagram_pending = 1;
		setup_callback();
		rc = CLAIM_EVENT;
	    }
	    break;

	default:
	    break;
    }

    _kernel_irqs_off ();

    return rc;
}

_kernel_oserror *timer_handler( _kernel_swi_regs *r, void *pw )
{
    tick_pending = 1;
    setup_callback();

    return NULL;
}

_kernel_oserror *callback_handler( _kernel_swi_regs *r, void *pw )
{
    callback_pending = 0;

    if (datagram_pending)
    {
	datagram_pending = 0;

	/* Handle incoming data */

	dprintf (("", "About to deal with incoming data\n"));

	find_server_data();
    }

    if (tick_pending)
    {
	tick_pending = 0;

	dprintf (("", "Purging list... "));
	server_list_purge();
	/* Send out another broadcast */
	dprintf (("", "Sending RPC request\n"));

	find_server_send();
    }

    if (server_list_has_changed)
    {
	_kernel_swi_regs rr;

	server_list_has_changed = 0;

	rr.r[0] = OmniNFS_OmniOp;
	rr.r[1] = 0;

	_kernel_swi(Omni_EnumerateMounts, &rr, &rr);
    }

    return NULL;
}

static _kernel_oserror *register_client(void)
{
    _kernel_swi_regs r;

    r.r[0] = OmniNFS_OmniOp;	/* SWI number */
    r.r[1] = flag_USER | flag_PW | flag_PATH | flag_AUTH | flag_HAS_FS | flag_PRINT | ('/' << flag_EXTshft); /* Flags */
    r.r[2] = (int) onfs_sprite_name;	/* Sprite name */
    r.r[3] = (int) onfs_client_name;	/* Client name */
    r.r[4] = (int) onfs_client_desc;	/* Client description */
    r.r[5] = 0;			/* site_id word */
    r.r[6] = (int) onfs_fs_name;	/* Filing system name */

    return _kernel_swi(Omni_RegisterClient, &r, &r);
}

static void deregister_client(void)
{
    _kernel_swi_regs r;

    r.r[0] = OmniNFS_OmniOp;	/* SWI number */

    _kernel_swi(Omni_DeregisterClient, &r, &r);
}

static void setup_callback(void)
{
    if (callback_pending == 0)
    {
	_kernel_swi_regs r;

	r.r[0] = (int) &callback_entry;
	r.r[1] = (int) private_word;
	callback_pending = 1;

	_kernel_swi(OS_AddCallBack, &r, &r);
    }
}

static void clear_callback(void)
{
    if (callback_pending)
    {
	_kernel_swi_regs r;

	r.r[0] = (int) &callback_entry;
	r.r[1] = (int) private_word;

	callback_pending = 0;
	_kernel_swi(OS_RemoveCallBack, &r, &r);
    }
}

static _kernel_oserror *setup_ticker_and_event(void)
{
    _kernel_swi_regs r;
    _kernel_oserror *ep;

    r.r[0] = 0x10;
    r.r[1] = (int) &inet_entry;
    r.r[2] = (int) private_word;

    ep = _kernel_swi(XOS_Bit + OS_Claim, &r, &r);

    if (ep)
	return ep;

    _kernel_osbyte(14, Event_Internet, 0);

    r.r[0] = TICKER_RATE;
    r.r[1] = (int) timer_entry;
    r.r[2] = (int) private_word;

    ep = _kernel_swi(OS_CallEvery, &r, &r);

    if (ep)
    {
	clear_ticker_and_event();
	return ep;
    }

    return NULL;
}

static void clear_ticker_and_event(void)
{
    _kernel_swi_regs r;

    _kernel_osbyte(13, Event_Internet, 0);

    r.r[0] = 0x10;
    r.r[1] = (int) inet_entry;
    r.r[2] = (int) private_word;

    _kernel_swi(OS_Release, &r, &r);

    r.r[0] = (int) timer_entry;
    r.r[1] = (int) private_word;

    _kernel_swi(OS_RemoveTickerEvent, &r, &r);
}
