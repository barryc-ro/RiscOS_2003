# File:    Makefile
# Purpose: Makefile for OmniNFS
# Author:  Ben Laughton
#
# History:
#
# 1999-11-29: BAL
# Created.




# ------------------------------------------------------------------------------
# Paths
#

EXP_HDR		= <export$dir>.^.Interface2
EXP_C_H		= <Cexport$dir>.h
EXP_C_O		= <Cexport$dir>.o

LIBDIR		= <Lib$Dir>

RESFSDIR	= Resources.OmniClient

# ------------------------------------------------------------------------------
# Generic options
#

MKDIR		= cdir
AS		= objasm
CC		= $(MemCheckCC) cc
C++		= c++
CMHG		= cmhg
CP		= copy
LD		= $(MemCheckLD) link
RM		= remove
WIPE		= -wipe
CD		= dir
CHMOD		= access
TOUCH		= create
DATA2AOF	= datatoaof
MODSQZ		= modsqz




# ------------------------------------------------------------------------------
# Flags - see FlagReadMe
#

AFLAGS		= -depend !Depend $(THROWBACK) $(EXTRA_A_FLAGS) -stamp -quit
CCFLAGS		= -depend !Depend $(THROWBACK) $(INCLUDES) $(DFLAGS) -c -Wsp -zM -zps1 -ffah
C++FLAGS	= -depend !Depend $(THROWBACK) $(INCLUDES) $(DFLAGS) -c -Wsp -zM -zps1 -ffa +a1
CMHGFLAGS	= -depend !Depend $(THROWBACK) $(INCLUDES) $(DFLAGS) -p
DATA2AOFFLAGS	= -L _length -S -P -DP
LDFLAGS		= 
CPFLAGS		= ~cfr~v
WFLAGS		= ~c~vr
CHMODFLAGS	= RW/r

DFLAGS		= $(EXTRA_C_FLAGS) -DINET -DCOMPAT_INET4

INCLUDES	= -IC:,TCPIPLibs:




# ------------------------------------------------------------------------------
# Libraries
#

CLIB		= CLIB:o.stubs
RLIB		= RISCOSLIB:o.risc_oslib
RSTUBS		= RISCOSLIB:o.rstubs
ROMSTUBS	= RISCOSLIB:o.romstubs
ROMCSTUBS	= RISCOSLIB:o.romcstubs
ABSSYM		= RISC_OSLib:o.c_AbsSym

INETLIB		= TCPIPLibs:o.inetlibzm
SOCKLIB		= TCPIPLibs:o.socklibzm
UNIXLIB		= TCPIPLibs:o.unixlib
DEBUGLIB	= $(LIBDIR).DebugLib.o.DebugLibzm
ASMUTILS	= $(LIBDIR).AsmUtils.o.AsmUtilszm

LIBS = $(ASMUTILS) $(DEBUGLIB) $(UNIXLIB) $(SOCKLIB) $(INETLIB)



# ------------------------------------------------------------------------------
# Program specific options
#

COMPONENT	= OmniNFS
RAMTARGET	= rm.$(TARGET)
ROMTARGET	= aof.$(TARGET)
EXPORTS		= $(EXP_C_H).$(COMPONENT)

ROMOBJS =\
 $(EXT).CallBack\
 $(EXT).constants\
 $(EXT).makeerror\
 $(EXT).omninfs\
 $(EXT).OmniNFSHdr\
 $(EXT).Resources\
 $(EXT).serverlist\

RAMOBJS =\
 $(ROMOBJS)\




# ------------------------------------------------------------------------------
# Rule patterns
#

.SUFFIXES:	.o .od .oHP .oMC .i .s .c++ .c .cmhg
.c.i:;		$(CC)	$(CCFLAGS)	-C -E $< >> $@
.c.o:;		$(CC)	$(CCFLAGS)	-o $@ $<
.c.od:;		$(CC)	$(CCFLAGS)	-fn -o $@ $<
.c.oMC:;	$(CC)	$(CCFLAGS)	-o $@ $<
.c.oHP:;	$(CC)	$(CCFLAGS)	-fn -o $@ $<
.cmhg.i:;	@echo $@
.cmhg.o:;	$(CMHG)	$(CMHGFLAGS)	$< -o $@
.cmhg.od:;	$(CMHG)	$(CMHGFLAGS)	$< -o $@
.cmhg.oMC:;	$(CMHG)	$(CMHGFLAGS)	$< -o $@
.cmhg.oHP:;	$(CMHG)	$(CMHGFLAGS)	$< -o $@
.s.i:;		@echo $@
.s.o:;		$(AS)	$(AFLAGS)	$< $@
.s.od:;		$(AS)	$(AFLAGS)	$< $@
.s.oMC:;	$(AS)	$(AFLAGS)	$< $@
.s.oHP:;	$(AS)	$(AFLAGS)	$< $@




# ------------------------------------------------------------------------------
# Local build rules
#

all: $(RAMTARGET) 

debug: $(RAMTARGET)

memcheck: $(RAMTARGET)

preprocess: $(ROMTARGET) 

$(RAMTARGET): $(RAMOBJS) $(HDR) $(LIBS) $(EXT).local_dirs
	$(MKDIR) rm
	$(LD) -rmf $(LDFLAGS) -o $@ $(RAMOBJS) $(LIBS) $(CLIB)
	$(MODSQZ) $@

$(HDR): cmhg.OmniNFSHdr
	$(CMHG)	$(CMHGFLAGS)	cmhg.OmniNFSHdr -d $(HDR)

$(EXT).local_dirs:
	$(MKDIR) $(EXT)
	$(TOUCH) $@




# ------------------------------------------------------------------------------
# RISC OS ROM build rules
#

rom: $(ROMTARGET)
	@echo $(COMPONENT): rom complete

export: $(EXPORTS)
	@echo $(COMPONENT): export complete

install: $(RAMTARGET)
	$(CP) $(RAMTARGET) $(INSTDIR).$(COMPONENT) $(CPFLAGS)
	@echo $(COMPONENT): $(RAMTARGET) installed

install_rom: $(ROMTARGET)
	$(CP) $(ROMTARGET) $(INSTDIR).$(COMPONENT) $(CPFLAGS)
	@echo $(COMPONENT): rom module installed

clean:
	@$(WIPE) $(EXT)	$(WFLAGS)
	@echo $(EXT) directory cleaned


# ROM target (re-linked at ROM Image build time)

$(ROMTARGET): $(ROMOBJS) $(LIBS) $(ROMCSTUBS) $(EXT).local_dirs
	$(MKDIR) aof
	$(LD) -aof $(LDFLAGS) -o $@ $(ROMOBJS) $(LIBS) $(ROMCSTUBS)


# Final link for the ROM Image (using given base address)

rom_link:
	$(MKDIR) linked
	$(LD) $(LDFLAGS) -o linked.$(COMPONENT) -map -rmf -base $(ADDRESS) $(ROMTARGET) $(ABSSYM) > map.$(COMPONENT)
	$(CP) linked.$(COMPONENT) $(LINKDIR).$(COMPONENT) $(CPFLAGS)
	@echo $(COMPONENT): rom_link complete

# Odds and ends

$(EXP_C_H).$(COMPONENT):	h.$(COMPONENT)
        $(CP) h.$(COMPONENT) $@ $(CPFLAGS)




# ------------------------------------------------------------------------------
# Dynamic dependencies:
