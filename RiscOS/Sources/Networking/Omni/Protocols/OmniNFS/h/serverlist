/* -*-c-*- */

/* Functions from serverlist.c */

extern _kernel_oserror *find_server_setup(void);
extern _kernel_oserror *find_server_send(void);
extern _kernel_oserror *find_server_data(void);
extern _kernel_oserror *find_server_clear(void);

char *get_name_from_dns(unsigned long addr);
char *get_dotted_ip_addr(unsigned long addr);
char *get_name_from_addr(unsigned long addr);

/********************************

Outgoing message looks like this:

int	xid		= random number
int	direction	= 0 for call
int	rpc version	= 2
int	pmap prog	= 100000
int	pmap version	= 2
int	pmap function	= 5 for CALL_IT
int	cred type	= 1 for unix
int	cread len	= ...
    int time		= real time in seconds
    int name len	= ...
    char name[]		= host name
    char pad1[]		= 0s
    int uid		= 0
    int gid		= 0
    int group count	= 1
        int groups[1]   = {0}
int	verf type	= 0
int 	verf len	= 0

int	prog number	= 100005 for mount
int	prog version	= 1
int	prog func	= 0
int	parm len	= 0

********************************/

typedef struct {
    int xid;
    int dir;
    int rpc_vers;
    int prog;
    int vers;
    int func;
    int ctype;
    int clen;
    int timestamp;
    int nlen;
} serverlist_outgoing_front;

typedef struct {
    int uid;
    int gid;
    int gcount;
    int g0;
    int vtype;
    int vlen;
    int prog;
    int vers;
    int func;
    int plen;
} serverlist_outgoing_back;

/********************************

Incoming message looks like this:

int	xid		= random number the same as was sent
int	direction	= 1 for reply
union   int status	= 0 for accepted, 1 for rejected
0{
    int verf type	= 0
    int very len	= 0
    union int stat	= 0 for success, 2 = PROG_MISMATCH
    0{
        int port	= port the service is on
	int result len	= 0
     }
    2{
        int verslow	= lowest version
	int vershigh	= highest version
     }
    default{
        void
     }
 }
1{
    union int stat	= 0 = RPC mismatch or 1 = Auth error
    0{
        int verslow	= lowest version
	int highver	= highest version
     }
    1{
        int why		= Why authenication failed
     }
    default{
        void
     }
 }

********************************/

typedef struct {
    int xid;
    int dir;
    int status;
    union
    {
	struct
	{
	    int vtype;
	    int vlen;
	    int stat;
	    union
	    {
		struct
		{
		    int port;
		    int rlen;
		} success;
		struct
		{
		    int low;
		    int high;
		} mismatch;
	    } acc_u;
	} accept;
	struct _reject
	{
	    int stat;
	    union
	    {
		struct
		{
		    int low;
		    int high;
		} mismatch;
		struct
		{
		    int why;
		} autherr;
	    } rej_u;
	} reject;
    } data;
} serverlist_incoming;
