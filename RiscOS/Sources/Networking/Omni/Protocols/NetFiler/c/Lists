/*
 * Program:	Lists.c - list processing module routines
 *
 * Project:	NetFiler Omni project
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	1 November 1994
 * Last Edited:	23 November 1994
 *
 * Copyright 1994 by ANT Limited
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

#include <kernel.h>

#include <Desk/LinkList.h>
#include <Desk/SWI.h>

#include "NetFiler.h"
#include "ModuleWrap.h"
#include "MakeError.h"
#include "Debug.h"
#include "StrCaseCmp.h"


/*  Find item in linked list from either mount_id or server_id or both.
 */
extern mount_rec *MountFind(int mount_id, int server_id)
{
  mount_rec *r = (mount_rec *) mount_anchor.next;
  int searchtype = 0;

  TRACE2("NetFiler.MountFind: %x %x\n", mount_id, server_id);
  if (server_id != -1) searchtype = 1;
  if ((server_id != -1) && (mount_id != -1)) searchtype = 2;
  while (r != NULL)
  {
    TRACE2("NetFiler.MountFind: compare %x %x\n", r->mount_id, r->server_id);
    switch (searchtype)
    {
      case 0: if (r->mount_id == mount_id) return(r);
              break;
      case 1: if (r->server_id == server_id) return(r);
              break;
      case 2: if ((r->mount_id == mount_id) && (r->server_id == server_id)) return(r);
              break;
      default:
        break;
    }
    r = (mount_rec *) r->header.next;
  }
  return(NULL);
}


/*  Find item in linked list from server name.
 */
static mount_rec *MountNameFind(char *s)
{
  mount_rec *r = (mount_rec *) mount_anchor.next;
  while (r != NULL)
  {
    if (!strcasecmp(s, r->serveraddr)) return(r);
    r = (mount_rec *) r->header.next;
  }
  return(NULL);
}


/*  Find item in linked list from mount_id.
 */
extern mlist_rec *MListFind(int mount_id, mlist_rec *r)
{
  int searchtype = 0;

  if (r == NULL) r = (mlist_rec *) mlist_anchor.next;
  while (r != NULL)
  {
    switch (searchtype)
    {
      case 0: if (r->mount_id == mount_id) return(r);
              break;
      default:
        break;
    }
    /* Traverse sublevel(s) */
    if (r->anchor.next != NULL)
    {
      mlist_rec *r_tmp = MListFind(mount_id, (mlist_rec *) r->anchor.next);
      if (r_tmp != NULL) return(r_tmp);
    }
    r = (mlist_rec *) r->header.next;
  }
  return(NULL);
}


/*  Rescan to get net address from a connected disc name (argh!).
 */
static int NetAddress(char *disc)
{
  char buf[44];
  char server[24];
  int next = 0;
  int read = 1;
  Desk_os_error *err = NULL;
  char *s = NULL;
  int server_id = 0;

  /* Loop on connections list call */
  while ((next != -1) && (read != 0) && (!err))
  {
    /* Call to get connection details */
    err = Desk_SWI(4, 4, NetFS_EnumerateFSContexts, next, &buf, 44, 1, &next, NULL, NULL, &read);
    if ((read < 1) || (err)) continue;
    strcpy(server, (char *) &buf[3]);
    s = strchr(server, ' ');
    if (s) *s = '\0';
    server_id = buf[0] + (buf[1] << 8);
    if (!strcasecmp(server, disc)) return(server_id);
  }
  return(0);
}


/*  Register a new Mount record.
 */
extern mount_rec *MountCreate(_kernel_swi_regs *r)
{
  mount_rec *mr = NULL;
  int err;
  char buf[256];

  TRACE("NetFiler.MountCreate:\n");
  /* Error conditions */
  if (!r->r[1])
  {
    r->r[1] = 0;
    r->r[0] = (int) MakeError(err_NOSERVER);
    return(NULL);
  }
  if (MountNameFind((char *) r->r[1]))
  {
    r->r[1] = 0;
    r->r[0] = (int) MakeError(err_CONNECTED);
    return(NULL);
  }
  mr = (mount_rec *) malloc(sizeof(mount_rec));
  if (mr == NULL)
  {
    r->r[1] = 0;
    r->r[0] = (int) MakeError(err_NOMEM);
    return(NULL);
  }
  mr->mount_id = (int) mr;
  mr->server_id = 0; /* ? */
  strcpy(mr->serveraddr, (r->r[1]) ? (char *) r->r[1] : "");
  strcpy(mr->userid, (r->r[2]) ? (char *) r->r[2] : "");
  strcpy(mr->passwd, (r->r[3]) ? (char *) r->r[3] : "");
  strcpy(mr->mount, (r->r[4]) ? (char *) r->r[4] : "");

  /* Attempt a Logon command */
  if (strlen(mr->passwd) > 0)
  {
    if (strlen(mr->serveraddr) < 1)
      sprintf(buf, "Net:Logon %s %s", mr->userid, mr->passwd);
    else
      sprintf(buf, "Net:Logon :%s %s %s", mr->serveraddr, mr->userid, mr->passwd);
  }
  else
  {
    if (strlen(mr->serveraddr) < 1)
      sprintf(buf, "Net:Logon %s \"\"", mr->userid);
    else
      sprintf(buf, "Net:Logon :%s %s \"\"", mr->serveraddr, mr->userid);
  }
  TRACE1("NetFiler.MountCreate: '%s'\n", buf);
  block_service = Desk_bool_TRUE;
  r->r[0] = 0;
  if ((err = _kernel_oscli(buf)) <= 0)
  {
    _kernel_oserror *e = _kernel_last_oserror();

    if (((e->errnum & 0x00FFFF00) == 0x010500) || ((e->errnum & 0x00FFFFFF) == 0x000011))
    {
      /* We assume (ugh!) fatal error from NetFS, or ESCAPE hit by user */
      free(mr);
      r->r[1] = 0;
      r->r[0] = (int) e;
      TRACE2("NetFiler.MountCreate: error %d '%s'\n", err, e->errmess);
      return(NULL);
    }
    else
    {
      TRACE2("NetFiler.MountCreate: non fatal error %d '%s'\n", err, e->errmess);
      r->r[0] = (int) e;
    }
  }
  Desk_LinkList_AddToTail(&mount_anchor, &(mr->header));
  r->r[1] = mr->mount_id;
  mr->server_id = NetAddress(mr->serveraddr);
  TRACE1("NetFiler.MountCreate: create OK %x\n", r->r[1]);
  return(mr);
}


/*  Delete a Mount record.
 */
extern void MountDelete(mount_rec *mr)
{
  if (!mr) return;
  Desk_LinkList_Unlink(&mount_anchor, &(mr->header));
  free(mr);
}


/*  Delete a MList record.
 */
extern void MountDeleteList(mlist_rec *mr)
{
  if (!mr) return;
  Desk_LinkList_Unlink(&mlist_anchor, &(mr->header));
  free(mr);
}


/*  Add a new Server/Mounts record.
 */
extern mlist_rec *MListCreate(char *shortname, char *fullname,
				char *description, mlist_rec *server, int server_id)
{
  mlist_rec *mr = NULL;

  mr = (mlist_rec *) malloc(sizeof(mlist_rec));
  if (!mr) return(NULL);
  Desk_LinkList_Init(&mr->anchor);
  if (!server) Desk_LinkList_AddToTail(&mlist_anchor, &(mr->header));
    else Desk_LinkList_AddToTail(&server->anchor, &(mr->header));
  mr->mount_id = (int) mr;
  mr->server_id = server_id;
  strcpy(mr->shortname, (shortname) ? shortname : "");
  strcpy(mr->fullname, (fullname) ? fullname : "");
  strcpy(mr->description, (description) ? description : "");
  return(mr);
}


/*  Enumerates server/mounts into a buffer.
 *  Returns Desk_bool_TRUE if completed.
 */
extern Desk_bool MountList(char **bufp, mlist_rec **mrp, int size)
{
  Desk_bool 		done = Desk_bool_FALSE;
  mlist_rec 	*mr = *mrp;
  char          line[128];

  /* Check OK to enumerate to buffer */
  if ((!*mrp) || (!*bufp)) return(Desk_bool_FALSE);
  if (size < 8) return(Desk_bool_FALSE);

  /* Fill buffer with mount records */
  while ((mr != NULL) && (!done) && (size >= 8))
  {
    int *ibuf = (int *) &line[0];
    char *cbuf = (char *) &line[4];
    int llen = 4;

    ibuf[0] = mr->server_id;
    strcpy(cbuf, mr->shortname);
    cbuf += strlen(mr->shortname) + 1;
    llen += strlen(mr->shortname) + 1;
    strcpy(cbuf, mr->fullname);
    cbuf += strlen(mr->fullname) + 1;
    llen += strlen(mr->fullname) + 1;
    if (strlen(mr->description) > 0)
    {
      strcpy(cbuf, mr->description);
      cbuf += strlen(mr->description);
      llen += strlen(mr->description) + 1;
    }
    /* Word align */
    if (llen % 4 > 0) llen += (4 - (llen % 4));
    /* Can we copy ? */
    if (size >= llen)
    {
      /* Can copy, do it, update pointers */
      memcpy(*bufp, line, llen);
      *bufp = *bufp + llen;
      *mrp = mr = (mlist_rec *) mr->header.next;
      size -= llen;
    } else size = 0;
  }
  if (mr == NULL) done = Desk_bool_TRUE;
  return(done);
}


/*  Enumerates active (connected) mounts into a buffer.
 *  Returns Desk_bool_TRUE if completed.
 */
extern Desk_bool ActiveMountList(char **bufp, mount_rec **mrp, int size)
{
  Desk_bool 		done = Desk_bool_FALSE;
  mount_rec 	*mr = *mrp;
  char          line[64];

  /* Check OK to enumerate to buffer */
  if ((!*mrp) || (!*bufp)) return(Desk_bool_FALSE);
  if (size < 12) return(Desk_bool_FALSE);

  /* Fill buffer with mount records */
  while ((mr != NULL) && (!done) && (size >= 12))
  {
    int *ibuf = (int *) &line[0];
    char *cbuf = (char *) &line[8];
    int llen = 8;

    ibuf[0] = mr->server_id;
    ibuf[1] = mr->mount_id;
    strcpy(cbuf, mr->mount);
    cbuf += strlen(mr->mount);
    llen += strlen(mr->mount) + 1;
    /* Word align */
    if (llen % 4 > 0) llen += (4 - (llen % 4));
    /* Can we copy ? */
    if (size >= llen)
    {
      /* Can copy, do it, update pointers */
      memcpy(*bufp, line, llen);
      *bufp = *bufp + llen;
      *mrp = mr = (mount_rec *) mr->header.next;
      size -= llen;
    } else size = 0;
  }
  if (mr == NULL) done = Desk_bool_TRUE;
  return(done);
}

