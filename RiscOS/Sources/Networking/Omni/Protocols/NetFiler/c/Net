/*
 * Program:	Net.c - NetFS interface module routines
 *
 * Project:	NetFiler Omni project
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	9 November 1994
 * Last Edited:	5 May 1995
 *
 * Copyright 1994, 1995 by ANT Limited
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

#include <kernel.h>
#include <swis.h>

#include <DebugLib/DebugLib.h>

#include <Desk/LinkList.h>
#include <Desk/SWI.h>

#include "Lists.h"
#include "Net.h"
#include "NetFiler.h"


/*  Rescan network for Econet file servers.
 */
extern void NetServers(void)
{
  char buf[20];
  char name[20];
  char desc[32];
  int next = 0;
  int read = 1;
  Desk_os_error *err = NULL;

  /* Pull down current list of servers */
  mlist_clean();

  /* Loop on network scan call */
  while ((next != -1) && (read != 0) && (!err))
  {
    int status = 0;
    char *s = NULL;
    int server_id = 0;

    /* Call to get basic server details */
    /* err = Desk_SWI(2, 0, NetFS_UpdateFSList, 0, 0); */
    err = Desk_SWI(4, 4, NetFS_EnumerateFSList, next, &buf, 20, 1, &next, NULL, NULL, &read);
    if ((read < 1) || (err)) continue;
    strcpy(name, (char *) &buf[3]);
    s = strchr(name, ' ');
    if (s) *s = '\0';
    if (buf[1] < 128) buf[1] += 128;
    server_id = buf[0] + (buf[1] << 8);

    /* Do call to MachinePeek the server for more information */
    err = Desk_SWI(8, 1, Econet_DoImmediate, 8, 0, buf[0], buf[1], &buf[4], 8, 40, 5, &status);
    if (err)
    {
      dprintf(("", "NetFiler.NetServer: DoImmediate err '%s'\n", err->errmess));
      continue;
    }
    status = buf[4] + (buf[5] << 8);
    switch (status)
    {
      case 1: sprintf(desc, "%d.%d\nAcorn BBC Micro\n%x.%02x", buf[1], buf[0], buf[6], buf[7]);
              break;
      case 3: sprintf(desc, "%d.%d\nAcorn System 4\n%x.%02x", buf[1], buf[0], buf[6], buf[7]);
              break;
      case 4: sprintf(desc, "%d.%d\nAcorn System 5\n%x.%02x", buf[1], buf[0], buf[6], buf[7]);
              break;
      case 5: sprintf(desc, "%d.%d\nAcorn Master128\n%x.%02x", buf[1], buf[0], buf[6], buf[7]);
              break;
      case 7: sprintf(desc, "%d.%d\nAcorn RISC OS\n%x.%02x", buf[1], buf[0], buf[6], buf[7]);
              break;
      case 0xB:sprintf(desc, "%d.%d\nAcorn FileStore\n%x.%02x", buf[1], buf[0], buf[6], buf[7]);
              break;
      case 0xFFFE:sprintf(desc, "%d.%d\nSJ FileServer\n%x.%02x", buf[1], buf[0], buf[6], buf[7]);
              break;
      default:
        sprintf(desc, "%d.%d", buf[1], buf[0]);
        break;
    }
    MListCreate(name, name, desc, NULL, server_id);
  }

  /* Call to re-enable NetFS cache (see PRM 2-355) */
  Desk_SWI(0, 0, NetFS_EnableCache);
}


/*  Register a new Mount record.
 */
static mount_rec *MountBuild(char *server, char *mount, char *user, char *pw, int server_id)
{
  mount_rec *mr = NULL;

  mr = (mount_rec *) malloc(sizeof(mount_rec));
  if (!mr) return(NULL);
  mr->mount_id = (int) mr;
  mr->server_id = server_id;
  strcpy(mr->serveraddr, (server) ? server : "");
  strcpy(mr->mount, mount ? mount : "");
  strcpy(mr->passwd, pw ? pw : "");
  strcpy(mr->userid, user ? user: "");
  Desk_LinkList_AddToTail(&mount_anchor, &(mr->header));
  return(mr);
}


/*  Rescan for active connections.
 */
extern void NetMounts(void)
{
  char buf[44];
  char server[24];
  char user[24];
  int next = 0;
  int read = 1;
  Desk_os_error *err = NULL;
  char *s = NULL;
  int server_id = 0;

  /* Pull down current list of connections */
  mount_clean();

  /* Loop on connections list call */
  while ((next != -1) && (read != 0) && (!err))
  {
    /* Call to get connection details */
    err = Desk_SWI(4, 4, NetFS_EnumerateFSContexts, next, &buf, 44, 1, &next, NULL, NULL, &read);
    if ((read < 1) || (err)) continue;
    strcpy(server, (char *) &buf[3]);
    strcpy(user, (char *) &buf[20]);
    s = strchr(server, ' ');
    if (s) *s = '\0';
    s = strchr(user, ' ');
    if (s) *s = '\0';
    server_id = buf[0] + (buf[1] << 8);
    MountBuild(server, server, user, NULL, server_id);
  }
}


/*  Register a new Printer record.
 */
static plist_rec *PrintBuild(char *printer)
{
  plist_rec *mr = NULL;

  mr = (plist_rec *) malloc(sizeof(plist_rec));
  if (!mr) return(NULL);
  strcpy(mr->printer, (printer) ? printer : "");
  Desk_LinkList_AddToTail(&plist_anchor, &(mr->header));
  return(mr);
}


/*  Rescan network for Econet printer servers.
 */
extern void NetPrinters(void)
{
  char buf[512];
  int read = 1;
  int loop;
  char *s;
  Desk_os_error *err = NULL;

  /* Pull down current list of printers */
  plist_clean();

  /* Call to get printer details */
  err = Desk_SWI(4, 1, NetPrint_ListServers, 1, &buf, 512, 40, &read);
  if ((read <= 0) || (err)) return;
  s = &buf[0];
  for (loop = 0; loop < read; loop++)
  {
    PrintBuild(s);
    s += strlen(s) + 1;
  }
}
