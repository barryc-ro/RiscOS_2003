/*
 * Program:	Print.c - NetPrint interface module routines
 *
 * Project:	NetFiler Omni project
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	9 November 1994
 * Last Edited:	13 November 1994
 *
 * Copyright 1994 by ANT Limited
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

#include <kernel.h>
#include <swis.h>

#include <Desk/LinkList.h>
#include <Desk/Time.h>
#include <Desk/SWI.h>

#include "NetFiler.h"
#include "MakeError.h"
#include "Print.h"


/*  Delete a Print record.
 */
extern void PrintDelete(print_rec *pr)
{
  if (!pr) return;
  Desk_LinkList_Unlink(&print_anchor, &(pr->header));
  free(pr);
}


/*  Delete a PList record.
 */
extern void PrintDeleteList(plist_rec *pr)
{
  if (!pr) return;
  Desk_LinkList_Unlink(&plist_anchor, &(pr->header));
  free(pr);
}


/*  Enumerates printers into a buffer.
 *  Returns Desk_bool_TRUE if completed.
 */
extern Desk_bool PrintList(char **bufp, plist_rec **mrp, int size)
{
  Desk_bool 		done = Desk_bool_FALSE;
  plist_rec 	*mr = *mrp;
  char          line[96];

  /* Check OK to enumerate to buffer */
  if ((!*mrp) || (!*bufp)) return(Desk_bool_FALSE);
  if (size < 8) return(Desk_bool_FALSE);

  /* Fill buffer with print records */
  while ((mr != NULL) && (!done) && (size >= 8))
  {
    int *ibuf = (int *) &line[0];
    char *cbuf = (char *) &line[4];
    int llen = 4;

    ibuf[0] = 0;
    strcpy(cbuf, mr->printer);
    cbuf += strlen(mr->printer) + 1;
    llen += strlen(mr->printer) + 1;
    strcpy(cbuf, mr->printer);
    cbuf += strlen(mr->printer) + 1;
    llen += strlen(mr->printer) + 1;
    /* Word align */
    if (llen % 4 > 0) llen += (4 - (llen % 4));
    /* Can we copy ? */
    if (size >= llen)
    {
      /* Can copy, do it, update pointers */
      memcpy(*bufp, line, llen);
      *bufp = *bufp + llen;
      *mrp = mr = (plist_rec *) mr->header.next;
      size -= llen;
    } else size = 0;
  }
  if (mr == NULL) done = Desk_bool_TRUE;
  return(done);
}


/*  Find item in linked list from pjob_id.
 */
extern print_rec *PrintFind(int pjob_id)
{
  print_rec *r = (print_rec *) print_anchor.next;
  int loop = 0;
  int searchtype = 0;

  while (r != NULL)
  {
    switch (searchtype)
    {
      case 0: if (r->pjob_id == pjob_id) return(r);
              break;
      default:
        break;
    }
    loop++;
    r = (print_rec *) r->header.next;
  }
  return(NULL);
}


/*  Register a new Print job record.
 */
extern print_rec *PrintCreate(_kernel_swi_regs *r)
{
  print_rec *mr = NULL;
  _kernel_oserror *err;
  char buf[256];

  /* printf("PrintCreate:\n"); */
  mr = (print_rec *) malloc(sizeof(print_rec));
  if (mr == NULL)
  {
    r->r[1] = 0;
    r->r[0] = (int) MakeError(err_NOMEM);
    return(NULL);
  }
  mr->pjob_id = (int) mr;
  mr->Desk_print_id = -1;	/* We never know this? */
  mr->status = 0;
  mr->time = Desk_Time_Monotonic();
  mr->handle = -1;

  /* Attempt a Print connection */
  if (r->r[2] != 0) sprintf(buf, "NetPrint#%s:", (char *) r->r[2]);
    else strcpy(buf, "NetPrint:");
  /* printf("PrintCreate: '%s'\n", buf); */
  err = (_kernel_oserror *) Desk_SWI(3, 1, OS_Find, 0x8F, &buf, 0, &mr->handle);
  if ((err) || (mr->handle <= 0))
  {
    free(mr);
    r->r[1] = 0;
    r->r[0] = (int) err;
    return(NULL);
  }
  Desk_LinkList_AddToTail(&print_anchor, &(mr->header));
  r->r[1] = mr->pjob_id;
  return(mr);
}
