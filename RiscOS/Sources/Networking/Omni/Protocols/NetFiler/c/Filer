/*
 * Program:	Filer.c - core module routines
 *
 * Project:	NetFiler Omni project
 *
 * Author:	Nick Smith
 *              ANT Limited
 *              Cambridge
 *              Internet: nas@ant.co.uk
 *
 * Date:	2 November 1994
 * Last Edited:	23 November 1994
 *
 * Copyright 1994 by ANT Limited
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

#include <kernel.h>

#include <Desk/LinkList.h>
#include <Desk/SWI.h>

#include "NetFiler.h"
#include "ModuleWrap.h"
#include "Lists.h"
#include "Print.h"
#include "Net.h"
#include "MakeError.h"
#include "Debug.h"

extern Desk_bool 		client_running = Desk_bool_FALSE;	/* Desk_bool_TRUE if registered & running OK */
extern client_rec	client =
			  { client_SWIBASE,
			    client_FLAGS,
			    "04a540",
			    "Level 4",
			    "AUN Econet/Level 4\n© Acorn Computers Ltd, 1995\n1.14 (26-Jun-95)",
			    client_LIMIT,
			    "Net"
                          };
extern Desk_linklist_header	mount_anchor = {NULL, NULL};	/* List of active mount records */
extern Desk_linklist_header	mlist_anchor = {NULL, NULL};	/* List of network server records */
extern Desk_linklist_header	plist_anchor = {NULL, NULL};	/* List of network print records */
extern Desk_linklist_header	Desk_print_anchor = {NULL, NULL};	/* List of active print records */
extern _kernel_oserror  omni_errblk = {0, ""}; 		/* Global error block */
extern Desk_bool		block_service = Desk_bool_FALSE;		/* Block out the service call? */
#ifdef DEBUG
extern FILE		*omniout = NULL;
#endif

extern char		*developed = "\n Developed by ANT Limited <sales@ant.co.uk> \n";

extern int *Image__RO_Base;

extern _kernel_oserror *resources_register(void);
extern _kernel_oserror *resources_deregister(void);
extern void resources_starting(int calladdr, int worksp);
extern void suicide(char *Desk_module_title);



/*  Clear out mlist struct from RMA.
 */
extern void mlist_clean(void)
{
  mlist_rec *mr = (mlist_rec *) mlist_anchor.next;
  while (mr)
  {
    mlist_rec *mr_tmp = (mlist_rec *) mr->header.next;
    MountDeleteList(mr);
    mr = mr_tmp;
  }
  Desk_LinkList_Init(&mlist_anchor);
}


/*  Clear out mount struct from RMA.
 */
extern void mount_clean(void)
{
  mount_rec *mr = (mount_rec *) mount_anchor.next;
  while (mr)
  {
    mount_rec *mr_tmp = (mount_rec *) mr->header.next;
    MountDelete(mr);
    mr = mr_tmp;
  }
  Desk_LinkList_Init(&mount_anchor);
}


/*  Clear out print struct from RMA.
 */
extern void Desk_print_clean(void)
{
  print_rec *pr = (print_rec *) Desk_print_anchor.next;
  while (pr)
  {
    print_rec *pr_tmp = (print_rec *) pr->header.next;
    PrintDelete(pr);
    pr = pr_tmp;
  }
  Desk_LinkList_Init(&Desk_print_anchor);
}


/*  Clear out plist struct from RMA.
 */
extern void plist_clean(void)
{
  plist_rec *pr = (plist_rec *) plist_anchor.next;
  while (pr)
  {
    plist_rec *pr_tmp = (plist_rec *) pr->header.next;
    PrintDeleteList(pr);
    pr = pr_tmp;
  }
  Desk_LinkList_Init(&plist_anchor);
}


/*  This is the finalisation code
 */
static void fs_finalise(void)
{
  mlist_clean();
  mount_clean();
  Desk_print_clean();
  plist_clean();
  resources_deregister();
  if (client_running)
  {
    _kernel_swi_regs r;
    r.r[0] = client.client_id;
    _kernel_swi(Omni_DeregisterClient, &r, &r);
   client_running = Desk_bool_FALSE;
  }
}


/*  Attempt to register with the filer module.
 */
_kernel_oserror *omni_register(void)
{
  _kernel_swi_regs r;
  _kernel_oserror *err = NULL;

  r.r[0] = client.client_id;
  r.r[1] = client.flags;
  r.r[2] = (int) &client.sprite;
  r.r[3] = (int) &client.name;
  r.r[4] = (int) &client.desc;
  r.r[5] = client.site_id;
  r.r[6] = (int) &client.fsname;
  if ((err = _kernel_swi(Omni_RegisterClient, &r, &r)) == NULL) client_running = Desk_bool_TRUE;
    else client_running = Desk_bool_FALSE;
  return(err);
}


/*  This is the initialisation code
 */
_kernel_oserror *fs_initialise(char *cmd_tail, int podule_base, void *private_word)
{
  _kernel_oserror *err = NULL;
  _kernel_swi_regs r;

  /* These keep the compiler quiet. */
  cmd_tail = cmd_tail;
  podule_base = podule_base;
  private_word = private_word;

  /* Init test structures */
  Desk_LinkList_Init(&mount_anchor);
  Desk_LinkList_Init(&mlist_anchor);
  Desk_LinkList_Init(&plist_anchor);
  Desk_LinkList_Init(&Desk_print_anchor);

  /* See if Network is present */
  if ((err = _kernel_swi(NetFS_ReadFSNumber, &r, &r)) != NULL) return(MakeError(err_NONET));

#ifdef DEBUG
  /* Debug trace file? */
  if ((err = _kernel_swi(Omni_TraceFile, &r, &r)) == NULL) omniout = (FILE *) r.r[0];
#endif

  atexit(fs_finalise);
  resources_register();
  _kernel_oscli("IconSprites Resources:$.ThirdParty.OmniClient.NetFiler.Sprites");
  omni_register();
  return(err);
}


/* SERVICE omni_base+0 "Service_OmniAction"
 *	On entry, R0 = action word;
 *		        0 = OmniClient module has just started up
 *		        1 = OmniClient module has died or quit due to "Death"
 *			    packet (see document [Site_SpecN])
 *		       >1 = *reserved*
 *		  R1 = Service_OmniAction
 *	All registers preserved on exit
 *
 *	This Service call is used to inform client modules that the desktop
 *	filer has just been run, or just been killed. Appropriate action
 *	when (R0 = 0) is to call the SWI Omni_RegisterClient, to register
 *	themselves in the case where the OmniClient module is loaded *after*
 *	the client modules.
 *      Upon reception of (R0 = 1), it is *required* of clients that they
 *      close down any open files, abort any file transfer operations,
 *      and then die. This is to ensure that users to not loose any data
 *      as a result of running more copies than they are licensed to use.
 *      (see document [Site_SpecN] for more details).
 *      Since client modules rely on services provided by the filer module,
 *      they should quit if the filer module dies for any reason.
 */
void OmniAction(_kernel_swi_regs *r)
{
  /* Fiddling to get a Desk_module_title pointer */
  char *Desk_module_base = (char *) Image__RO_Base;
  char *Desk_module_title = (char *) (Desk_module_base + *((int *) (Desk_module_base + 0x10)));

  switch (r->r[0])
  {
    case 0:
      /* OmniClient module has just started up, so if we aren't already
       * registered, do so now.
       */
      omni_register();
      break;
    case 1:
      /* OmniClient module has died.
       * Insert your code here to close all open file handles, and abort any
       * data transfer operations.
       */

      /* We mark as not registered (no point in calling Omni_DeregisterClient!)
       * and quit this module.
       */
      client_running = Desk_bool_FALSE;
      suicide(Desk_module_title);
      break;
    default:
      break;
  }
}


/* Service call handler
 */
void fs_service(int service_number, _kernel_swi_regs *r, void *private_word)
{
  private_word = private_word;
  switch (service_number)
  {
    case Service_OmniAction:
      OmniAction(r);
      break;
    case Service_ResourceFSStarting:
      resources_starting(r->r[2], r->r[3]);
      break;
    /* Handle other service calls here */
    case Service_NetFS:
      /* There has been a Mount connection or disconnection - rescan our active mounts */
      if ((client_running) && (!block_service))
        Desk_SWI(2, 0, Omni_EnumerateMounts, client.client_id, 1);
      block_service = Desk_bool_FALSE;
      break;
    case Service_NetFSDying:
      /* NetFS has died - rescan our mounts & network servers */
      if (client_running) Desk_SWI(2, 0, Omni_EnumerateMounts, client.client_id, 0);
      break;
  }
}


/* SWI server_id+0 "XXXX_OmniOp"
 *	On entry, R0 = reason code;
 *			0 = Mount
 *			1 = Dismount
 *			2 = Free
 *			3 = Enumerate servers
 *			4 = Enumerate mounts on a server
 *			5 = Enumerate active mounts
 *			6 = Open Root
 *			7 = Open User Root
 *			8 = Get Mount Info
 *			9 = Get Active Mount Info
 * 		       10 = Create Print Job
 * 	               11 = Send data in Print Job
 * 	               12 = End Print Job
 * 	               13 = Abort Print Job(s)
 * 	               14 = Get Print Job Info
 *		       15 = Clear Print Job(s)
 *		       16 = Enumerate printers
 *                    >16 = *reserved*
 *                  Other registers as required for given reason code
 *      On exit,  Registers set as required for given reason code
 *	All other registers preserved on exit
 *
 *      This SWI provides an entry point for the OmniClient to call
 *      individual client modules that have registered with it.
 */


/*	Reason code 0 - Mount server
 *        	On entry, R1 = ptr to Server string
 *        		  R2 = ptr to UserID string (optional)
 *        		  R3 = ptr to Password string (optional)
 *        		  R4 = ptr to Mount name string
 *        		  R5 = ptr to Mount path string (optional)
 *        		  R6 = ptr to Authentication server str (optional)
 *		On exit,  R1 = mount_id, or 0 if failed
 *
 *		Operation to mount a server (in fact a given 'mount' on a
 *		particular server).
 *		Strings are null terminated. Pointers are 0 if fields
 *		are not required for a given Client module. Strings not
 *		guaranteed by caller to be static across multiple calls.
 *		See comments about unique mount_id's in 'Terminology'
 *		section above.
 */
_kernel_oserror *OmniOp_Mount(_kernel_swi_regs *r)
{
  TRACE("NetFiler.Mount:\n");
  MountCreate(r);
  TRACE2("NetFiler.Mount: %x %x\n", r->r[0], r->r[1]);
  return((_kernel_oserror *) r->r[0]);
}


/*	Reason code 1 - Dismount server
 *		On entry, R1 = mount_id
 *
 *		Operation to dismount a previously mounted server (in fact a
 *		given 'mount' on a particular server).
 */
_kernel_oserror *OmniOp_Dismount(_kernel_swi_regs *r)
{
  mount_rec *mr = MountFind(r->r[1], -1);
  char buf[48];

  TRACE2("NetFiler.Dismount: %x %x\n", r->r[1], (int) mr);
  if (!mr) return(MakeError(err_BADMOUNT));

  /* Attempt a Bye command */
  if (strlen(mr->serveraddr) < 1)
    strcpy(buf, "Net:Bye\n");
  else
    sprintf(buf, "Net:Bye :%s\n", mr->serveraddr);

  /* Execute command - trap for errors */
  block_service = Desk_bool_TRUE;
  MountDelete(mr);
  if (_kernel_oscli(buf) <= 0) return(_kernel_last_oserror());
  return(NULL);
}


/*	Reason code 2 - Freespace on mount
 *		On entry, R1 = mount_id
 *		On exit,  R1 = user free space on mount (bytes)
 *		          R2 = user used space on mount (bytes)
 *		          R3 = total size of mount (bytes)
 *
 *		Returns freespace. Numbers are unsigned 32-bit integers. If
 *		any value is greater than (2^32 - 1) (=4Gbytes!) then simply
 *		return the maximum (0xFFFFFFFF).
 *              The exact interpretation of 'user freespace' and 'total
 *              size' is client dependent, however R1+R2 >= R3.
 */
_kernel_oserror *OmniOp_Free(_kernel_swi_regs *r)
{
  TRACE1("NetFiler.Free: %x\n", r->r[1]);
  /* We don't have information about this anyway :-( */
  return(MakeError(err_NOTSUPPORTED));
}


/*	Reason code 3 - Enumerate all servers on network
 *		On entry, R1 = ptr to buffer for servers list
 *		          R2 = size of buffer (words * 4)
 *		          R3 = 0, start enumerating servers
 *		               not 0, continue enumerating servers
 *		On exit,  R1 = ptr to last byte written to buffer
 *		          R3 = 0, operation complete
 *		               not 0, buffer full, call again with this R3
 *
 *		Operation scans visible network and returns block filled
 *		with Server records for every possible server, in the
 *		following format;
 *
 *		+0	server_id
 *		$4	shortname (no more than 16 characters, 0-terminated)
 *			fullname (no more than 32 characters, 0-terminated)
 *			description (some additional string, <= 64 chars)
 *
 *		+n	server_id
 *		$n+4	shortname/fullname/description
 *		...
 *
 *		Where n is the number of bytes, aligned upwards to a word
 *		boundary.
 *
 *		'shortname' is a short description of the server for Large
 *		and Small icon filer displays. eg, "server"
 *		'fullname' is a full description of the server for Full info
 *		filer displays. eg, "server.subnet.net"
 *              'description' is some textual field for tacking on the end
 *              of Full info filer displays. [We should discuss the sort of
 *              things that might go in here].
 *
 *		If R3 is not 0 on exit, then the enumeration is not complete
 *		(buffer full), and the reason code is called again with the
 *		new R3 value. This process continues until the enumeration
 *		is complete.
 */
_kernel_oserror *OmniOp_Servers(_kernel_swi_regs *r)
{
  mlist_rec *mr = NULL;

  if (r->r[3] == 0)
  {
    /* ReScan NetFS for servers on network */
    NetServers();
    mr = (mlist_rec *) mlist_anchor.next;
  } else mr = (mlist_rec *) r->r[3];
  if (MountList((char **) &r->r[1], &mr, r->r[2])) r->r[3] = 0;
    else r->r[3] = (int) mr;
  return(NULL);
}


/*	Reason code 4 - Enumerate all mounts on a server
 *		On entry, R1 = ptr to buffer for mounts list
 *		          R2 = size of buffer (words * 4)
 *		          R3 = 0, start enumerating mounts
 *		               not 0, continue enumerating mounts
 *		          R4 = server_id (or 0 if not known)
 *	          	  R5 = ptr to Server name, or 0
 *		On exit,  R1 = ptr to last byte written to buffer
 *		          R3 = 0, operation complete
 *		               not 0, buffer full, call again with this R3
 *
 *		Operation scans visible network and returns block filled
 *		with Mount records for every possible mount on the given
 *		server, in the following format;
 *
 *		+0	mount_id (or 0 if not connected)
 *		$4	shortname (no more than 16 characters, 0-terminated)
 *			fullname (no more than 32 characters, 0-terminated)
 *			description (some additional string, <= 64 chars)
 *
 *		+n	mount_id
 *		$n+4	shortname/fullname/description
 *		...
 *
 *		Where n is the number of bytes, aligned upwards to a word
 *		boundary.
 *
 *		'shortname' is a short description of the mount for Large
 *		and Small icon filer displays. eg, "leafdir"
 *		'fullname' is a full description of the mount for Full info
 *		filer displays. eg, "dir1.dir2.leafdir"
 *              'description' is some textual field for tacking on the end
 *              of Full info filer displays. We should discuss the sort of
 *              things that might go in here.
 *
 *		If R3 is not 0 on exit, then the enumeration is not complete
 *		(buffer full), and the reason code is called again with the
 *		new R3 value. This process continues until the enumeration
 *		is complete.
 */
_kernel_oserror *OmniOp_Mounts(_kernel_swi_regs *r)
{
  /* No concept of mount points in this filing system */
  r->r[3] = 0;
  return(NULL);
}


/*	Reason code 5 - Enumerate active (connected) mounts
 *		On entry, R1 = ptr to buffer for mounts list
 *		          R2 = size of buffer (words * 4)
 *		          R3 = 0, start enumerating mounts
 *		               not 0, continue enumerating mounts
 *		On exit,  R1 = ptr to last byte written to buffer
 *		          R3 = 0, operation complete
 *		               not 0, buffer full, call again with this R3
 *
 *		Operation returns buffer filled with Mount records for every
 *		active (connected) mount on a server, in the following format;
 *
 *		+0	server_id
 *		+4	mount_id
 *		$8 	mount name (no more than 16 chars, 0-terminated)
 *
 *		+n	server_id
 *		...
 *
 *		Where n is the number of bytes, aligned upwards to a word
 *		boundary.
 *
 *		'mount name' is the mount name, as passed in the Mount
 *		(reason code = 0) OmniOp SWI call.
 *
 *		If R3 is not 0 on exit, then the enumeration is not complete
 *		(buffer full), and the reason code is called again with the
 *		new R3 value. This process continues until the enumeration
 *		is complete.
 */
_kernel_oserror *OmniOp_ActiveMounts(_kernel_swi_regs *r)
{
  mount_rec *mr = NULL;

  if (r->r[3] == 0)
  {
    /* ReScan NetFS for active mounts */
    NetMounts();
    mr = (mount_rec *) mount_anchor.next;
  } else mr = (mount_rec *) r->r[3];
  if (ActiveMountList((char **) &r->r[1], &mr, r->r[2])) r->r[3] = 0;
    else r->r[3] = (int) mr;
  return(NULL);
}


/*	Reason code 6 - Open Root of mount
 *		On entry, R1 = mount_id
 *
 *		Trigger a Filer_OpenDir on the highest point available
 *		in mount's visible directory tree. eg, '$'
 */
_kernel_oserror *OmniOp_Root(_kernel_swi_regs *r)
{
  mount_rec *mr = MountFind(r->r[1], -1);
  char buf[64];

  TRACE2("NetFiler.Root: %x %x\n", r->r[1], (int) mr);
  if (!mr) return(MakeError(err_BADMOUNT));
  sprintf(buf, "Filer_OpenDir Net::%s.$", mr->serveraddr);
  if (_kernel_oscli(buf) <= 0) return(_kernel_last_oserror());
  return(NULL);
}


/*	Reason code 7 - Open User Root of mount
 *		On entry, R1 = mount_id
 *
 *		Trigger a Filer_OpenDir on the current user's 'home'
 *		directory, or the highest point available in mount's
 *		visible directory tree if not applicable. eg, '/homes/nas'
 *		or '$'
 */
_kernel_oserror *OmniOp_UserRoot(_kernel_swi_regs *r)
{
  mount_rec *mr = MountFind(r->r[1], -1);
  char buf[64];

  TRACE2("NetFiler.UserRoot: %x %x\n", r->r[1], (int) mr);
  if (!mr) return(MakeError(err_BADMOUNT));
  sprintf(buf, "Filer_OpenDir Net::%s.&", mr->serveraddr);
  if (_kernel_oscli(buf) <= 0) return(_kernel_last_oserror());
  return(NULL);
}


/*	Reason code 8 - Get (inactive/not-connected) Mount Info
 *		On entry, R1 = mount_id (of active mount)
 *			  R2 = ptr to new Mount path string
 *		On exit,  R1 = new mount facilities flags word;
 *			       bit 0 = 1, mount does need User identifier
 *			       bit 1 = 1, mount does need Password string
 *                             bits 2..31 = *reserved* zero
 *
 *		This reason code allows for the possibility of changing
 *		authentication once a mount to a given server is made.
 *		mount_id is the existing connection to a server (possibly
 *		one of several) and the new mount name/path strings are the
 *		new mount to that server. Some clients (eg, LAN Manager)
 *		allow unauthenticated new mounts, once an authenticated
 *		mount is performed.
 */
_kernel_oserror *OmniOp_MountInfo(_kernel_swi_regs *r)
{
  TRACE1("NetFiler.GetMountInfo: %x\n", r->r[1]);
  return(MakeError(err_NOTSUPPORTED));
}


/*	Reason code 9 - Get (active/connected) Mount Info
 *		On entry, R1 = mount_id (of active mount)
 *		On exit,  R1 = ptr to Server string
 *        		  R2 = ptr to UserID string
 *        		  R3 = ptr to Mount name string
 *        		  R4 = ptr to Mount path string
 *        		  R5 = ptr to Authentication server string
 *			  R6 = server_id
 *
 *		Operation to get information about an active mount.
 *		Strings are null terminated. Pointers are 0 if fields
 *		are not available for a given mount. Strings do not need to
 *		be guaranteed to be static across multiple calls.
 *              The Server string (R1) should be the 'full name' as supplied
 *              by OmniOp reason code 3 (Enumerate all servers).
 */
_kernel_oserror *OmniOp_ActiveMountInfo(_kernel_swi_regs *r)
{
  mount_rec *mr = MountFind(r->r[1], -1);

  TRACE2("NetFiler.GetActiveInfo: %x %x\n", r->r[1], (int) mr);
  if (!mr) return(MakeError(err_BADMOUNT));
  r->r[1] = (int) mr->serveraddr;
  r->r[2] = (int) mr->userid;
  r->r[3] = (int) mr->mount;
  r->r[4] = 0;
  r->r[5] = 0;
  r->r[6] = mr->server_id;
  return(NULL);
}


/* 	Reason code 10 - Create Print Job
 *		On entry, R1 = ptr to server name
 *	                  R2 = ptr to printer name
 *	                  R3 = ptr to user name, or NULL
 *	                  R4 = ptr to password string, or NULL
 *	                  R5 = ptr to options string, or NULL
 *			  R6 = size of print job (bytes), or 0 if not known
 *		On exit,  R1 = pjob_id, or 0 if failed
 * 		All other registers preserved on exit
 *
 *        	Submit a new job for network printing. The user name,
 *        	password and options string are optional, and may be NULL
 *        	pointers. See comments about unique pjob_id's in 'Terminology'
 *		section above.
 *
 *              Some printing protocols require that the total size of the
 *              job is known before printing starts. If this is the case, they
 *              should be registered with OmniClient as requiring this.
 */
_kernel_oserror *OmniOp_CreateJob(_kernel_swi_regs *r)
{
  /* printf("OmniOp_CreateJob:\n"); */
  if (PrintCreate(r)) return(NULL);
    else return((_kernel_oserror *) r->r[0]);
}


/* 	Reason code 11 - Send data in Print Job
 * 		On entry, R1 = pjob_id
 * 		          R2 = ptr to data block to send
 * 		          R3 = size of data block to send
 * 		On exit,  R3 = number of bytes not sent, or 0 for all done
 * 		All other registers preserved on exit
 *
 *         	Send a block of data down network printer stream for a given
 *         	active pjob_id word.
 */
 _kernel_oserror *OmniOp_SendJob(_kernel_swi_regs *r)
{
  print_rec *pr = NULL;
   _kernel_oserror *err = NULL;

  /* Check for a valid print job */
  if ((pr = PrintFind(r->r[1])) == NULL) return(MakeError(err_BADPRINT));

  /* Do Desk_OS_GBPB call to write bytes out to network driver */
  err = (_kernel_oserror *) Desk_SWI(4, 4, Desk_OS_GBPB, 2, pr->handle, r->r[2], r->r[3],
    NULL, NULL, NULL, &r->r[3]);
  return(err);
}


/* 	Reason code 11 - End Print Job
 * 		On entry, R1 = pjob_id
 * 		All registers preserved on exit
 *
 *         	End a specified print job normally (ie, all data
 *         	transmitted).
 */
_kernel_oserror *OmniOp_EndJob(_kernel_swi_regs *r)
{
  print_rec *pr = NULL;
   _kernel_oserror *err = NULL;

  /* Check for a valid print job */
  if ((pr = PrintFind(r->r[1])) == NULL) return(MakeError(err_BADPRINT));

  /* Do Desk_OS_Find call to close job */
  if (pr->handle == 0) return(NULL); /* Already closed */
  err = (_kernel_oserror *) Desk_SWI(2, 0, Desk_OS_Find, 0, pr->handle);
  if (!err)
  {
    pr->status = (Desk_print_STATUS | Desk_print_COMPLETE);
    pr->handle = 0;
  }
  return(err);
}


/* 	Reason code 12 - Abort Print Job(s)
 * 		On entry, R1 = pjob_id, or
 * 		             = 0, to abort all jobs
 * 		All registers preserved on exit
 *
 *         	Abort a specified print job, or all current jobs.
 */
_kernel_oserror *OmniOp_AbortJob(_kernel_swi_regs *r)
{
  print_rec *pr = NULL;
   _kernel_oserror *err = NULL;

  if (r->r[1] == 0)
  {
    /* Abort all print jobs */
    pr = (print_rec *) Desk_print_anchor.next;
    while (pr != NULL)
    {
      print_rec *pr_tmp = (print_rec *) pr->header.next;
      /* Do Desk_OS_Find call to close job */
      if (pr->handle != 0)
      {
        err = (_kernel_oserror *) Desk_SWI(2, 0, Desk_OS_Find, 0, pr->handle);
        if (!err) pr->handle = 0;
      }
      /* Set status */
      pr->status = (Desk_print_STATUS | Desk_print_ERROR);
      pr = pr_tmp;
    }
  }
  else
  {
    /* Abort a single print job */
    if ((pr = PrintFind(r->r[1])) == NULL) return(MakeError(err_BADPRINT));
    /* Do Desk_OS_Find call to close job */
    if (pr->handle == 0) return(NULL); /* Already closed */
    err = (_kernel_oserror *) Desk_SWI(2, 0, Desk_OS_Find, 0, pr->handle);
    if (!err)
    {
      pr->handle = 0;
      pr->status = (Desk_print_STATUS | Desk_print_ERROR);
    }
  }
  return(err);
}


/* 	Reason code 13 - Get Print Job Info
 * 		On entry, R1 = pjob_id
 * 		On exit,  R1 = local job status word
 * 			  R2 = local job # bytes sent
 * 			  R3 = error/status block ptr, or 0
 * 			  R4 = remote job status word
 * 			  R5 = remote job # bytes printed
 * 			  R6 = error/status block ptr, or 0
 * 		All other registers preserved on exit
 *
 *         	Get information on a specified print job. The status word
 *         	(R1, R3) is defined above in SWI Omni_JobStatus.
 */
_kernel_oserror *OmniOp_GetJobInfo(_kernel_swi_regs *r)
{
  print_rec *pr = NULL;
   _kernel_oserror *err = NULL;

  if ((pr = PrintFind(r->r[1])) == NULL) return(MakeError(err_BADPRINT));
  r->r[1] = pr->status;
  if (pr->handle > 0)
  {
    err = (_kernel_oserror *) Desk_SWI(2, 3, Desk_OS_Args, 2, pr->handle, NULL, NULL, &r->r[2]);
    if (err) r->r[2] = 0;
  } else r->r[2] = 0;
  r->r[3] = 0;
  r->r[4] = 0;
  r->r[5] = 0;
  r->r[6] = 0;
  return(NULL);
}


/*
 *	Reason code 15 - Clear Print Job(s)
 *		On entry, R1 = pjob_id, or
 *		             = 0, to clear all inactive jobs
 *		All registers preserved on exit
 *
 *        	Clear a specified print job, or all inactive jobs. OmniClient
 *        	will make this call when the print job submitter indicates,
 *        	by calling SWI Omni_ClearJob, longer requires status information
 *        	about that job. The status of a print job should reside in
 *        	memory forever if this reason code is not called.
 *              'Inactive' in this case means either 'transfer complete' (3) or
 *              'job has terminal error' (5).
 */
_kernel_oserror *OmniOp_ClearJob(_kernel_swi_regs *r)
{
  print_rec *pr = NULL;
   _kernel_oserror *err = NULL;

  if (r->r[1] == 0)
  {
    /* Free inactive print jobs */
    pr = (print_rec *) Desk_print_anchor.next;
    while (pr != NULL)
    {
      print_rec *pr_tmp = (print_rec *) pr->header.next;
      if ((pflagSET(pr->status, Desk_print_COMPLETE)) || (pflagSET(pr->status, Desk_print_ERROR)))
        PrintDelete(pr);
      pr = pr_tmp;
    }
  }
  else
  {
    /* Abort a single print job */
    if ((pr = PrintFind(r->r[1])) == NULL) return(MakeError(err_BADPRINT));
    if ((pflagSET(pr->status, Desk_print_COMPLETE)) || (pflagSET(pr->status, Desk_print_ERROR)))
      PrintDelete(pr);
  }
  return(err);
}


/*
 *	Reason code 16 - Enumerate all printers on network
 *		On entry, R1 = ptr to buffer for printers list (word aligned)
 *		          R2 = size of buffer (words * 4)
 *		          R3 = 0, start enumerating printers
 *		               not 0, continue enumerating printers
 *		On exit,  R1 = ptr to next free byte in buffer, word aligned
 *		          R3 = 0, operation complete
 *		               not 0, buffer full, call again with this R3
 *
 *		Operation scans visible network and returns block filled
 *		with Printer records for every possible printer, in the
 *		following format;
 *
 *		+0	flags word (see below)
 *		$4	printer (no more than 24 chars, 0-terminated)
 *                      server (no more than 64 chars, 0-terminated)
 *
 *		+n	flags
 *		$n+4	name
 *		...
 *
 *		Where n is the number of bytes, aligned upwards to a word
 *		boundary.
 *
 *		'printer' is a description of the printer for Large/Small and
 *		Full info filer displays. eg, "laser printer".
 *		'server' is a full description of the server, as returned by
 *		OmniOp 3. eg, "server.subnet.net"
 *              'flags' is a set of bit fields that describe the printer type
 *              and facilities provided (see PRM 3-595, SWI Omni_PrinterInfo).
 *
 *              In the case where the printer sits directly upon a network,
 *              with no server, it should give a 'dummy' server name the
 *              same as the printer name.
 *
 *		If R3 is not 0 on exit, then the enumeration is not complete
 *		(buffer full), and the reason code is called again with the
 *		new R3 value. This process continues until the enumeration
 *		is complete.
 */
_kernel_oserror *OmniOp_Printers(_kernel_swi_regs *r)
{
  plist_rec *mr = NULL;

  if (r->r[3] == 0)
  {
    /* ReScan NetFS for printers on network */
    NetPrinters();
    mr = (plist_rec *) plist_anchor.next;
  } else mr = (plist_rec *) r->r[3];
  if (PrintList((char **) &r->r[1], &mr, r->r[2])) r->r[3] = 0;
    else r->r[3] = (int) mr;
  return(NULL);
}


/*  User SWI call handler.
 */
_kernel_oserror *fs_swi(int Desk_swi_no, _kernel_swi_regs *r, void *private_word)
{
  static _kernel_oserror fs_error = {0x1e6, "Bad SWI call"};

  if (!client_running) return(MakeError(err_NOOMNI));
  switch (Desk_swi_no)
  {
    case 0: /* NetFiler_OmniOp */
      switch (r->r[0])
      {
        case 0: /* Mount */
          return(OmniOp_Mount(r));
          break;
        case 1: /* Dismount */
          return(OmniOp_Dismount(r));
          break;
        case 2: /* Free */
          return(OmniOp_Free(r));
          break;
        case 3: /* Enumerate servers */
          return(OmniOp_Servers(r));
          break;
        case 4: /* Enumerate mounts on a server */
          return(OmniOp_Mounts(r));
          break;
        case 5: /* Enumerate active mounts on a server */
          return(OmniOp_ActiveMounts(r));
          break;
        case 6: /* Open Root */
          return(OmniOp_Root(r));
          break;
        case 7: /* Open User Root */
          return(OmniOp_UserRoot(r));
          break;
        case 8: /* Get Mount Info */
          return(OmniOp_MountInfo(r));
          break;
        case 9: /* Get Active Mount Info */
          return(OmniOp_ActiveMountInfo(r));
          break;
        case 10: /* Create Print Job */
          return(OmniOp_CreateJob(r));
          break;
        case 11: /* Send Data to Print Job */
          return(OmniOp_SendJob(r));
          break;
        case 12: /* End Print Job */
          return(OmniOp_EndJob(r));
          break;
        case 13: /* Abort Print Job(s) */
          return(OmniOp_AbortJob(r));
          break;
        case 14: /* Get Print Job Info */
          return(OmniOp_GetJobInfo(r));
          break;
        case 15: /* Clear Print Job(s) */
          return(OmniOp_ClearJob(r));
          break;
        case 16: /* Enumerate Printers */
          return(OmniOp_Printers(r));
          break;
        default:
          return(MakeError(err_NOTSUPPORTED));
      }
      break;

    default:
      return(&fs_error);
  }

  /* Return with no error */
  return(NULL);
}
