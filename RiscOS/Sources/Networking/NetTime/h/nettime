#include <stdio.h>
#include "swis.h"

#ifdef DEBUG
#  define DEBUGFN(x)	x
#  pragma continue_after_hash_error
#  error  Building debug version !
#else
#  define DEBUGFN(x)
#endif


/* Service calls */
#define Service_PostInit	0x73

/* Event stuff */
#define EventV			16
#define Event_Disable		13	/* OS_Byte reason code */
#define Event_Enable		14	/* OS_Byte reason code */
#define Internet_Event		19
typedef enum { Async=1, Urgent=2, Broken=3, RarpReply=4 } internet_event_t;

/* TinyStubs */
#define TinySupport_Init        0x82c40
#define TinySupport_Die         0x82c41
#define TinySupport_Init2       0x82c42
#define TinySupport_Share       0x82c43

/* PPP module */
#define PPP_DCIVersion		0x4b600

/* Dialler */
#define Service_Dialler		0xb4
#define Dialler_Dial		0x4c6c0
#define Dialler_HangUp		0x4c6c1
#define Dialler_Status		0x4c6c2
#define Dialler_Answering	0x4c6c3
#define Dialler_Configure	0x4c6c4
typedef enum { Disconnected=1, Executing=2, ConnectedOut=4, HangingUp=8, Answering=0x10, ConnectedIn=0x20 } dialler_status_t;
#define CONNECTED(x)		(((x)&(ConnectedIn|ConnectedOut))!=0)

#ifdef USE_REGISTRY
/* Registry */
#define NCRegistry_EnumerateNetworkDrivers	0x4d380
#define NCRegistry_EnumerateSmartCardBlocks	0x4D381
#define NCRegistry_Enquiry			0x4D382
#define NCRegistry_LoadSmartCardBlock		0x4D383
#define NCRegistry_Status			0x4D384
#else
#define NCAccessManager_Enquiry			0x4F000
#define NCBootblock_EnumerateNetworkDrivers	0x4f380
#define NCBootblock_EnumerateSmartCardBlocks	0x4f381
#define NCBootblock_Enquiry			0x4f382
#define NCBootblock_Status			0x4f383
#define NCBootblock_Write			0x4f384
#define NCBootblock_Authenticate		0x4f385
#define NCBootblock_ChangeSmartcardCHV		0x4f386
#define NCBootblock_Proxy			0x4f387
#define NCBootblock_PinInfo			0x4f388
#define NCBootblock_UnblockCHV			0x4f389
#endif

#define NCRegistry_TimeServerTag		"TIME_PRIMARY"
#define Service_NCRegistry	0xba
#define BB_STATUS_INSERTED	0x1	/* bootblock present */
#define BB_STATUS_SC_VALID	0x2	/* smartcard validated */
#define BB_STATUS_BB_VALID	0x4	/* smartcard boot block validated */
#define BB_STATUS_PIN		0x8	/* smartcard is PIN protected */
#define BB_STATUS_LOCKED	0x10	/* smartcard is currently locked */
#define BB_STATUS_WRITEOK	0x20	/* write to smartcard succeeded */
#define BB_STATUS_WRITEFAIL	0x40	/* write to smartcard failed */


/* Timers */
#define SHORT_TIMER		(5*60*100)	/* 5 mins */
#define LONG_TIMER		(30*60*100)	/* 1/2 hr */

/*
 * State machine types
 */
typedef enum { Dormant, NoLink, Sleeping, Expecting } state_t;
typedef enum { Init, Die, PostInit, Response, Failure, Timer, LinkUp, LinkDown, RegistryChanged } transition_t;

/*
 * Public functions
 */
extern void mul64(int a1, int a2, int *result);
void machine(transition_t transition);
extern int module_timerentry(_kernel_swi_regs *r, void *pw);
extern int module_evententry(_kernel_swi_regs *r, void *pw);
extern int module_callentry(_kernel_swi_regs *r, void *pw);

/*
 * Public variables
 */
extern int sockno;
extern void *privateword;
