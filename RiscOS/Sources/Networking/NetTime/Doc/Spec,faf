<html>

  <head>
    <title>
      Network Time Software Functional Specification
    </title>
  </head>
  
  <body bgcolor="#ffffff">

    <bodytext>
      <center>
      <h1>
	Network Time Software Functional Specification 
      </h1>
    </center>

      <hr> <!-- --------------------------------------------- -->

      <pre>
    Distribution: COMPANY CONFIDENTIAL

    Number:       2103,723/FS
    Issue:        3
    Author(s):    Jonathan Harris
                  <a href="mailto:kbracey@pace.co.uk">Kevin Bracey</a>
    Date:         06-Sep-00
    Last Issue:   2 (0.02)
    Change:       ECO 4379
      </pre>
      
      <hr> <!-- --------------------------------------------- -->
      <h2>
	Contents
      </h2>
      <ul>
	<li> <a href="#history">	History </a></li>
	<li> <a href="#outstanding">	Outstanding issues </a></li>
	<li> <a href="#overview">	Overview </a></li>
	<li> <a href="#technical">	Technical background </a></li>
	<li> <a href="#user">		User interface </a></li>
	<li> <a href="#programmer">	Programmer interface </a></li>
	<li> <a href="#standards">	Standards </a></li>
<!--
	<li> <a href="#interchange">	Data interchange </a></li>
	<li> <a href="#formats">	Data formats </a></li>
 -->
	<li> <a href="#dependencies">	External dependencies </a></li>
<!--
	<li> <a href="#acceptance">	Acceptance test </a></li>
	<li> <a href="#test">		Development test strategy </a></li>
	<li> <a href="#organisation">	Product organisation </a></li>
	<li> <a href="#enhancements">	Future enhancements </a></li>
 -->
      </ul>

      <hr> <!-- --------------------------------------------- -->
      <h2>
	<a name="history"> History </a>
      </h2>
      <pre>
    0.01 JRH 01-Apr-96 First created.
    0.02 JRH 27-Aug-96 Gets timeserver's IP address from registry.
    (1)                Connection attempts are initiated on
                       receipt of Dialler and Registry services.
                       Removed NetTime_SetTime SWI.
     2   KJB 15-Mar-00 Updated to cover developments in manual
                       configuration, DHCP, NTP, DST and clock slewing.
      </pre>

      <hr> <!-- --------------------------------------------- -->
      <h2>
	<a name="outstanding"> Outstanding issues </a>
      </h2>

      <p> Parts of this specification which are emphasised <em>like
	  this</em> are either undecided issues or are liable to change. </p>

      <ul>
	<li> <em> It may be worthwhile supporting anycast and multicast
                  modes of client operation to support autoconfiguration.
	  </em></li>
        <li> <em> For more precise timekeeping, some of the full NTP
                  algorithms could be employed, including variable poll
                  intervals, multiple servers and an improved Kernel clock
                  discipline.
	  </em></li>
      </ul>

      <hr> <!-- --------------------------------------------- -->
      <h2>
	<a name="overview"> Overview </a>
      </h2>
      <p>
	Network Computers and Set-Top Boxes generally do not contain a
        real-time clock. It is
	considered desirable (for cookie-expiry among other reasons)
	that the NC should know the time-of-day to a reasonable
	accuracy. It is presumed that for security reasons any
	time-stamping required for file stamps, transaction logging or
	billing will take place at the server end and will use the
	server's conception of the time-of-day, so the NC's time-of-day
	value will be only used locally.
      </p>
      <p>
	This documents specifies the software that
	provides network time synchronisation for a Network
	Computer (or any other RISC OS system).
      </p>
      <hr> <!-- --------------------------------------------- -->
      <h2>
	<a name="technical"> Technical background </a>
      </h2>
      <h4> Internet time protocols </h4>
      <dl>
	<dt><a href="#RFC868">Time Protocol</a></dt>
	<dd><p>
	    This simple protocol returns the server's current time
	    relative to 00:00 1st January 1900 UTC. Its use dates back to
	    the beginnings of the ARPA Internet and so it is widely
	    implemented. The protocol's resolution is 1 second. It
            can be used with either UDP or TCP.
	  </p></dd>

	<dt> <a href="#RFC1305">Network Time Protocol (NTP)</a></dt>
	<dd><p>
	    This protocol also returns the server's current time
	    relative to 00:00 1st January 1900 UTC. It is accurate to
	    between 1 and 50ms depending on the characteristics of the
	    server and network paths and is designed to cope with "multiple
	    gateways, highly disruptive delays and unreliable nets" between
	    the client and server. Since the NC would be a leaf on the
	    network it is only be necessary to
	    implement the subset of NTP known as <a href="#RFC2030">
	      SNTP</a> on the NC.
	  </p></dd>
      </dl>

      <h4> Time in RISC OS </h4>
      <p>
	The various system times are derived from a centi-second
	interrupt from the Timer0 hardware timer. The oscillator that
	supplies Timer0 is normally specified as being accurate to 100ppm;
	approximately 1 second every 3 hours. However in some designs,
        such as the DSL-4000, the timer is driven by a PLL-derived clock
        that is 400ppm slow; uncorrected this would lose 34 seconds a day.
      </p>
      <p>
	Time-dependent system events (ie OS_CallEvery, OS_CallAfter) are
	relative to one particular system timer called the 'monotonic timer'
	which is incremented on every Timer0 interrupt.
      </p>
      <p> RISC OS also independently maintains a 'real-time' clock for
	application use which holds the time-of-day. This is initialised
	on reset to the value held in the RTC chip (if present) combined with
        the
	configured year held in NVRAM. It is incremented on every Timer0
	interrupt. The RTCAdjust module compares the soft time-of-day
	value with that held in the RTC chip every hour and re-programs
	Timer0 to compensate for any inaccuracy in its driving
	oscillator. This process results in the soft time-of-day being
	closely synchronised with the RTC chip after two hours.
      </p>
      <p>
	The kernel has two basic subroutines for reading/writing its
	time-of-day from/to the RTC:
      </p>
      <dl>

	<dt> <kbd>SetTime:</kbd></dt>
	<dd> Sets RISC OS time-of-day, the contents of the RTC and the
	  configured year in NVRAM.<br> Called by SWI OS_Word 15,xx (write
	  time and/or date).</dd>

	<dt> <kbd>RTCToRealTime:</kbd></dt>
	<dd> Sets the soft time-of-day to the value held in the RTC
	  combined with the value for the year held in NVRAM.<br> Called
	  on kernel initialisation. Also called by <kbd>SetTime</kbd> to
	  reset the soft time-of-day to the RTC's new contents.</dd>
	  
      </dl>   

      <h4>
	NC operation
      </h4>
      <p>
	Having no RTC, the NC sets the time-of-day to a default value at
        boot-time - either 02-Jan-1970.00:00:00, or a time stored in NVRAM by
        NetTime in a previous session.
      </p>
      <p>
        The NetTime module will attempt to contact a server on boot-up,
        module initialisation, on receiving service <A
	  HREF="./Dialler.html#programmer">Service_DiallerStatus</a> with
	states 2 or 5 (ie link going up) or Service_NCRegistry with
	BB_STATUS_BB_VALID delta set in either boot-block, or on the
        command *NetTime_Kick.
      </p>
      <p>
        The server to contact, and which protocol to use, depends on
        system variables and registry settings:
      </p>
      <ul>
       <li> If Inet$NTPServer is set, then NetTime will contact that
            server using NTP
       <li> else if Inet$TimeServer is set, then NetTime will contact that
            server using UDP Time Protocol
       <li> else if NetTime$Server is set, then NetTime will contact that
            server using NTP or UDP Time Protocol
       <li> else if NetTime can read the tag TIME_PRIMARY from the registry,
            it will contact that server using NTP or UDP Time Protocol.
      </ul>
      <p>
	Inet$NTPServer and Inet$TimeServer can be set by the Internet module
	when DHCP booting. Variables can contain either DNS names or
        numeric IP addresses.
      </p>
      <p>
        If the time server address was obtained from NetTime$Server or the
        registry, NetTime will first try to contact the server using NTP -
        if an ICMP Destination Unreachable message is returned it will
        try Time/UDP instead.
      </p>
      <p>
	On receipt of a reply, NetTime will either set the system clock
	immediately (if the system clock is significantly different), or will
	accelerate or decelerate the clock by adjusting the interrupt rate
	from Timer0 by up to 1% to bring the clock back into line, using
	the same algorithm as RTCAdjust. (RTCAdjust will be disabled if
        present, to prevent conflict). The time received is also stored
        in NVRAM so a rough idea of the time is available after reboot.
      </p>
      <p>
	It will re-contact the time server 30 minutes after a
	successful connection and 5 minutes after an an unsuccessful
	connection unless it receives service <A
	  HREF="./Dialler.html#programmer">Service_DiallerStatus</a> with
	states other than 2 or 5 (ie link going/gone down).
      </p>
      <p>
        If the system time is set manually, NetTime will cease operation,
        until the next *NetTime_Kick or link up.
      </p>
      <p>
        On an Ethernet LAN, using NTP, NetTime has been found to consistently
        keep the time accurately to within 0.06 seconds using the default
        30 minute poll interval.
      </p>

      <h4>
	Daylight Saving Time
      </h4>
      <p>
        NetTime can set the system DST flag according to the time received
        from the server. Behaviour is determined by the system variable 
        NetTime$DST, as shown below. If the current territory on module
        initialisation is Australia, then the NetTime$DST flag is set to 
        "Australian".
      </p>
      <dl>
      <dt>European
      <dd>
        If set to "European" (the default, unless the locale is set to 
        Australia), the European Union rule is used; DST is in force from 01:00 
        UTC on the last Sunday in March until 01:00 UTC on the last Sunday in 
        October.
      <dt>Australian
      <dd>
        If set to "Australian", then Australian DST rules are used; for more
        details of the rules, see the files in the "Australia" directory in
        the Docs.
      <dt>dd-mmm-yyyy:hh:mm:ss; dd-mmm-yyyy:hh:mm:ss
      <dd>
        If a pair of semicolon-separated dates is supplied, DST is enabled
        if the time received from the server is between the two dates, otherwise
        it is disabled. The dates must be specified in UTC.
      <dt>No
      <dd>
        If the system variable is set to "No" (or anything else at present),
        the DST flag is left untouched.
      </dl>

      <h4>
	Time zone
      </h4>
      <p>
        NetTime can set the system timezone from <a href="#RFC2131">DHCP</a>.
        If a DHCP response
        is received while NetTime is active (a DHCPACK response to either
        a DHCPOFFER or DHCPINFORM), and it contains a Time Offset option,
        the RISC OS time zone will be set to the closest multiple of 15
        minutes. The assumption is that the Time Offset does not include
        a Daylight Saving Time adjustment.
      </p>
      <hr> <!-- --------------------------------------------- -->
      
      <h2> <a name="user"> User interface </a> </h2>

      <h3> *Commands </h3>

      <h3 align=right> *NetTime_Kick </h3>
      <p> Initiates time server contact </p>
      <h4> Syntax </h4>
      <p> <kbd> *NetTime_Kick </kbd> </p>
      <h4> Parameters </h4>
      <p> None </p>
      <h4> Use </h4>
      <p> *NetTime_Kick starts NetTime operation. If NetTime is already
          running, then the server is polled immediately, rather than waiting
          for the next scheduled poll. If NetTime is not active, then it
          starts up - this may be necessary after setting the time server
          variables manually. </p>
      <h4> Related commands </h4>
      <p> None </p>
      <h4> Related SWIs </h4>
      <p> None </p>
      <h4> Related vectors </h4>
      <p> None </p>

      <h3 align=right> *NetTime_Status </h3>
      <p> Displays NetTime information </p>
      <h4> Syntax </h4>
      <p> <kbd> *NetTime_Status </kbd> </p>
      <h4> Parameters </h4>
      <p> None </p>
      <h4> Use </h4>
      <p> *NetTime_Status shows some information about NetTime's operation,
          including its current state, when a time server was last
          contacted, and the current Timer0 rate.</p>
      <h4> Related commands </h4>
      <p> None </p>
      <h4> Related SWIs </h4>
      <p> None </p>
      <h4> Related vectors </h4>
      <p> None </p>

      <h3 align=right> *NetTime_PollInterval </h3>
      <p> Change the server poll interval </p>
      <h4> Syntax </h4>
      <p> <kbd> *NetTime_PollInterval <em>time</em> </kbd> </p>
      <h4> Parameters </h4>
      <table><tr><td width=100><kbd><em>time </em></kbd><td>interval in seconds</table>
      <h4> Use </h4>
      <p> *NetTime_PollInterval sets the server polling interval, ie the time
          interval between periodic server contacts.
          The default is 1800 seconds (30 minutes). The current interval is
          displayed by NetTime_Status.
      </p>
      <p> If the poll interval is too short, clock stability may be adversely
          affected, particularly if a Time/UDP server is being used. Generally,
          the interval should be at least one minute for NTP, 10 minutes for
          Time/UDP.
      </p>
      <h4> Example </h4>
      <p> <kbd> *NetTime_PollInterval 15*60</kbd> </p>
      <h4> Related commands </h4>
      <p> *NetTime_Status </p>
      <h4> Related SWIs </h4>
      <p> None </p>
      <h4> Related vectors </h4>
      <p> None </p>


      <hr> <!-- --------------------------------------------- -->

      <h2> <a name="programmer"> Programmer interface </a> </h2>

      <p> Related to this work, a new Kernel call to set the time to
          centisecond precision has been created. Previously, the Kernel
          real-time clock
          setting calls only allowed second
          precision. </p>
      <h3> SWI Calls </h3>
      <h3 align=right>OS_Word 15,5</h3>
      <h3 align=right>(<acronym>SWI</acronym> &amp;07)</h3>
      <p> Writes the real-time in 5-byte format to both the CMOS clock and its
          soft copy </p>
      <h4> On entry </h4>
      <p> R0 = 15
      <br>R1 = pointer to parameter block
      <dl><dd>R1+0 = 5 (reason code)
          <dd>R1+1 = LSB of time
          <dd>R1+2 = ...
          <dd>R1+3 = ...
          <dd>R1+4 = ...
          <dd>R1+5 = MSB of time
      </dl>
      </p>
      <h4> On entry </h4>
      <p> R0, R1 preserved </p>
      <h4> Interrupts </h4>
      <p> Interrupts are enabled
      <br> Fast interrupts are enabled
      </p>
      <h4> Processor Mode </h4>
      <p> Processor is in SVC mode </p>
      <h4> Re-entrancy </h4>
      <p> SWI is not re-entrant </p>
      <h4> Use </h4>
      <p> This call writes the real-time to both the CMOS clock and its
          soft copy. On entry, the parameter block contains a 5-byte UTC
          time.
      </p>
      <p> This call is available in version 4.85 or later of the Kernel. You
          should not use this call, you should use Territory_SetTime
          instead, as that call works on all versions of RISC OS since
          RISC OS 3. There is no error indication from OS_Word 15 if
          reason code 5 isn't implemented.
      </p>
      <p> Version 0.35 or later of the Territory Manager uses
          OS_Word 15,5 to implement Territory_SetTime instead of OS_Word 15,24.
          It also provides
          OS_Word 15,5 itself (with lower accuracy) if the Kernel doesn't.
      </p>
      <h4> Related SWIs </h4>
      <p> OS_Word 15 (page 1-423), Territory_SetTime (page 3-800) </p>
      <h4> Related vectors </h4>
      <p> WordV </p>
              

      <hr> <!-- --------------------------------------------- -->

      <h2> <a name="standards"> Standards </a> </h2>

      <dl>
	<dt>
	  <a href="ftp://ftp.isi.edu/in-notes/rfc868.txt"
	    name="RFC868">[RFC868]</a></dt>
	<dd> J.Postel &amp; K.Harrenstein, "Time Protocol", ISI &amp; SRI, May 1983.</dd>

	<dt>
	  <a href="ftp://ftp.isi.edu/in-notes/rfc1305.txt" name="RFC1305">[RFC1305]</a></dt>
	<dd> D.L.Mills, "Network Time Protocol (Version 3)", U. of Delaware, March 1992.</dd>

	<dt>
	  <a href="ftp://ftp.isi.edu/in-notes/rfc2131.txt" name="RFC2131">[RFC2131]</a></dt>
	<dd> R.Droms, "Dynamic Host Configuration Protocol", Bucknell
	  University, March 1997.</dd>

	<dt>
	  <a href="ftp://ftp.isi.edu/in-notes/rfc2132.txt" name="RFC2132">[RFC2132]</a></dt>
	<dd> S.Alexander &amp; R.Droms, "DHCP Options and BOOTP Vendor
          Extensions", Silicon Graphics, Inc. &amp; 
	  Bucknell University, March 1997.</dd>

	<dt>
	  <a href="ftp://ftp.isi.edu/in-notes/rfc2030.txt" name="RFC2030">[RFC2030]</a></dt>
	<dd> D.Mills, "Simple Network Time Protocol (SNTP) Version 4
                         for IPv4, IPv6 and OSI", U. of Delaware,
	  October 1996.</dd>
      </dl>

      <hr> <!-- --------------------------------------------- -->
 
 <!--
      <h2> <a name="interchange"> Data interchange </a> </h2>

      <hr>

      <h2> <a name="formats"> Data formats </a> </h2>

      <hr>

 -->
      <h2> <a name="dependencies"> External dependencies </a> </h2>
      
      <p> NetTime requires a 4-byte NVRAM tag "SystemTime" to store
          a time value across reboots.
          This tag should not be present if an RTC is fitted.
      </p>

 <!--
      <hr>

      <h2> <a name="acceptance"> Acceptance test </a> </h2>

      <hr>

      <h2> <a name="test"> Development test strategy </a> </h2>

      <hr>

      <h2> <a name="organisation"> Product organisation </a> </h2>

      <hr>
      
      <h2> <a name="enhancements"> Future enhancements </a> </h2>
 -->
    </bodytext>
  </body>
</html>
