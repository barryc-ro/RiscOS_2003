; General purpose full 32-bit multiply (to 64-bit result).
; Adapted from code in back of Acorn Assembler manual.

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:Machine.<Machine>
        GET     Hdr:APCS.<APCS>

	AREA |C$$Code|, CODE, READONLY

	EXPORT mul64[LEAF]
mul64
        FunctionEntry "v1,v2"
	MOVS	v2,a1,LSR #16
	BIC	a1,a1,v2,LSL #16
	MOV	v1,a2,LSR #16
	BIC	a2,a2,v1,LSL #16
	MUL	a4,a1,a2
	MUL	a2,v2,a2
	MUL	a1,v1,a1
	MULNE	v2,v1,v2
	ADDS	a1,a1,a2
	ADDCS	v2,v2,#&10000
	ADDS	a4,a4,a1,LSL #16
	ADC	v2,v2,a1,LSR #16
	STMIA	a3,{a4,v2}

        Return  "v1,v2"

        EXPORT  ntp_add[LEAF]
ntp_add
        LDR     ip,[sp,#0]      ; ip := b.frac
        ADDS    ip,a3,ip        ; ip := a.frac + b.frac
        STR     ip,[a1,#4]      ; output->frac := ip
        ADC     ip,a2,a4        ; ip := a.secs + b.secs with carry
        STR     ip,[a1,#0]      ; output->secs := ip
        Return  ,LinkNotStacked

        EXPORT  ntp_sub[LEAF]
ntp_sub
        LDR     ip,[sp,#0]      ; ip := b.frac
        SUBS    ip,a3,ip        ; ip := a.frac - b.frac
        STR     ip,[a1,#4]      ; output->frac := ip
        SBC     ip,a2,a4        ; ip := a.secs - b.secs with carry
        STR     ip,[a1,#0]      ; output->secs := ip
        Return  ,LinkNotStacked

        EXPORT  ntp_div2[LEAF]
ntp_div2
        MOVS    a2,a2,ASR #1    ; a2 := secs >> 1
        STR     a2,[a1,#0]      ; output->secs := a2
        MOV     a3,a3,RRX       ; a3 := carried down + frac >> 1
        STR     a3,[a1,#4]      ; output->frac := a3
        Return  ,LinkNotStacked

	END
