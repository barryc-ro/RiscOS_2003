/*
 * Handling of DST setting.
 *
 * NetTime$DST may be set to:
 *
 *  "European": use European rules for DST selection
 *  "03-May-2000.01:00:00; 14-Sep-2000.01:00:00":
 *         start and end dates of DST, expressed in UTC.
 *         If within range, DST will be set, else unset.
 *  Anything else: DST flags will not be modified.
 *
 * NetTime$DST is set to "European" by default.
 */
#include <sys/types.h>
#include <swis.h>
#include <string.h>
#include <unixlib.h>

#include "ntp.h"
#include "dst.h"
#include "edst.h"


typedef struct utc_ordinals
{
    int	    csecs;	/* centiseconds past second (0-99) */
    int	    secs;	/* seconds past minute (0-59) */
    int	    mins;	/* minutes past hour (0-59) */
    int	    hour;	/* hours past midnight (0-23) */
    int	    mday;	/* day in month (1-31) */
    int	    month;	/* month in year (1-12) */
    int	    year;	/* year */
    int	    wday;	/* day of week (1-7, 1=Sunday) */
    int	    yday;	/* day of year (1-366) */
} UTCOrdinals;

int timecmp(const struct riscos_time *a, const struct riscos_time *b)
{
    if (a->h != b->h)
        return a->h - b->h;
    if (a->l > b->l) return +1;
    if (a->l < b->l) return -1;
    return 0;
}

_kernel_oserror *localstring_to_utc(const char *s, struct riscos_time *t)
{
    UTCOrdinals ord;
    int offset;
    _kernel_oserror *e;

    e = _swix(Territory_ConvertTimeStringToOrdinals, _INR(0,3),
                1, 3, s, &ord);
    if (e) return e;

    /* This interprets string as being local time, inc DST offset */
    e = _swix(Territory_ConvertOrdinalsToTime, _INR(0,2), -1, t, &ord);
    if (e) return e;

    /* Read the current timezone offset */
    e = _swix(Territory_ReadCurrentTimeZone, _OUT(1), &offset);
    if (e) return e;

    /* Add it to our time, to interpret the string as UTC */
    t->l += offset;
    if (t->l < offset) t->h++;

    return NULL;
}

int dst_isdst (const struct riscos_time *clock)
{
    char dst[256];
    char *separator;
    struct riscos_time start, end;
    int len;

    if (_swix(OS_ReadVarVal, _INR(0,4)|_OUT(2), "NetTime$DST", dst, sizeof dst - 1, 0, 0, &len))
        return -1;

    dst[len] = '\0';

    if (strcasecmp(dst, "European") == 0)
        return edst_isdst(clock);

    separator = strchr(dst, ';');
    if (!separator)
        return -1;
    *separator = '\0';

    if (localstring_to_utc(dst, &start) ||
        localstring_to_utc(separator + 1, &end))
        return -1;

    if (timecmp(clock, &start) > 0 && timecmp(clock, &end) < 0)
        return 1;
    else
        return 0;
}
