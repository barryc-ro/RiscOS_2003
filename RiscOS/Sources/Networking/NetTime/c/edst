/*  Copyright (c) Element 14 Ltd. 1999
 *
 *  edst.c - European Daylight Savings Time
 *
 *  Routines to determine whether a date is during Daylight Savings Time in
 *  Europe for the years 1998-2001 in accordance with the Eighth Directive
 *  97/44/EC of the European Parliament and the Council of the European Union.
 *
 *  This directive states that in 1998, 1999, 2000 and 2001, DST starts at
 *  01:00 GMT on the last Sunday in March, and ends at 01:00 GMT on the last
 *  Sunday in October.  A new directive will be adopted before 1 January 2001
 *  to cover arrangements from 2002 onwards.  A software upgrade will be
 *  required if the new directive does not apply the same rule.
 *
 *  History:
 *
 *  12-Jan-1999 jmf - Created.
 */

#include <sys/types.h>

#include "nettime.h"
#include "edst.h"

#ifndef TRUE
#define TRUE 1
#endif

#ifndef FALSE
#define FALSE 0
#endif



typedef struct utc_ordinals
{
    int	    csecs;	/* centiseconds past second (0-99) */
    int	    secs;	/* seconds past minute (0-59) */
    int	    mins;	/* minutes past hour (0-59) */
    int	    hour;	/* hours past midnight (0-23) */
    int	    mday;	/* day in month (1-31) */
    int	    month;	/* month in year (1-12) */
    int	    year;	/* year */
    int	    wday;	/* day of week (1-7, 1=Sunday) */
    int	    yday;	/* day of year (1-366) */
} UTCOrdinals;

static int clock2utc (const struct riscos_time *clock, UTCOrdinals *utc);


/*  Check whether Daylight Savings is in force in Europe at the time
 *  represented by the RISCOS 5 byte UTC Time 'clock' (PRM 1-401).
 *
 *  This assumes that DST starts at 01:00 UTC on the last Sunday in March,
 *  and ends at 01:00 UTC on the last Sunday in October.  This is correct
 *  for Europe for the years 1998-2001.
 */
int edst_isdst (const struct riscos_time *clock)
{
    int isdst;
    UTCOrdinals utc;

    if (! clock2utc(clock, &utc))
        return FALSE;

    switch (utc.month)
    {
        case 11: case 12: case 1: case 2:
            /* DST is NOT in force for all of November through February */
            isdst = FALSE;
            break;

        case 4: case 5: case 6: case 7: case 8: case 9:
	    /* DST is in force for all of April through September */
            isdst = TRUE;
	    break;

	case 3:
	    /* In March, DST is in force on and after 01:00 on the last Sunday */
	    if (utc.mday + (7 - utc.wday) >= 31)
	        isdst = ((utc.wday == 1) && (utc.hour < 1)) ? FALSE : TRUE;
	    else
	        isdst = FALSE;
	    break;

        case 10:
	    /* In October, DST is in force before 01:00 on the last Sunday */
	    if (utc.mday + (7 - utc.wday) >= 31)
	        isdst = ((utc.wday == 1) && (utc.hour < 1)) ? TRUE : FALSE;
	    else
	        isdst = TRUE;
	    break;

        default:
	    dprintf(("", "Bad month %d\n", utc.month));
            isdst = FALSE;
	    break;
    }

    dprintf(("", "isdst -> %d\n", isdst));

    return isdst;
}

static int clock2utc (const struct riscos_time *clock, UTCOrdinals *utc)
{
    _kernel_swi_regs r;

    r.r[1] = (int) clock;
    r.r[2] = (int) utc;

    if (_kernel_swi(Territory_ConvertTimeToUTCOrdinals, &r, &r) != NULL)
    {
        dprintf(("", "Territory_ConvertTimeToUTCOrdinals failed\n"));
        return FALSE;
    }

    dprintf(("", "clock2utc -> %1dday, %02d/%02d/%04d %02d:%02d:%02d.%02d\n",
    	utc->wday,
        utc->mday, utc->month, utc->year,
        utc->hour, utc->mins, utc->secs, utc->csecs));

    return TRUE;
}

