/*  Copyright (c) Pace Micro Technology plc, 2000
 *
 *  adst.c - Australia Daylight Savings Time
 *
 *  Routines to determine whether a date is during Daylight Savings Time in
 *  Australia in accordance with the Standard Time Act 1987 No 149, amended
 *  by Standard Time Amendment Act 1999 No 13
 *
 *  This directive states that DST starts at 01:00 GMT on the last Sunday in
 *  October, and ends at 01:00 GMT on the last Sunday in March. The
 *  amendment states that for the year 2000, DST starts two months earlier,
 *  on the last Sunday in August.
 *
 *  History:
 *
 *  27 Jul 2000 jrf - Created from edst
 *                    This is 'nearly' the opposite of edst, with a special
 *                    case for the Olympics.
 */

#include <sys/types.h>

#include "nettime.h"
#include "edst.h"

#ifndef TRUE
#define TRUE 1
#endif

#ifndef FALSE
#define FALSE 0
#endif



typedef struct utc_ordinals
{
    int	    csecs;	/* centiseconds past second (0-99) */
    int	    secs;	/* seconds past minute (0-59) */
    int	    mins;	/* minutes past hour (0-59) */
    int	    hour;	/* hours past midnight (0-23) */
    int	    mday;	/* day in month (1-31) */
    int	    month;	/* month in year (1-12) */
    int	    year;	/* year */
    int	    wday;	/* day of week (1-7, 1=Sunday) */
    int	    yday;	/* day of year (1-366) */
} UTCOrdinals;

static int clock2utc (const struct riscos_time *clock, UTCOrdinals *utc);


/*  Check whether Daylight Savings is in force in Australia at the time
 *  represented by the RISCOS 5 byte UTC Time 'clock' (PRM 1-401).
 *
 */
int adst_isdst (const struct riscos_time *clock)
{
    int isdst;
    UTCOrdinals utc;

    if (! clock2utc(clock, &utc))
        return FALSE;

    if (utc.year == 2000)
    {
      /* Let's split the case for 2000 and the rest of time into two parts
         because they're just awkward */
      switch (utc.month)
      {
          case 9: case 10: case 11: case 12: case 1: case 2:
              /* DST is in force for all of September through February */
              isdst = TRUE;
              break;
  
          case 4: case 5: case 6: case 7:
	    /* DST is NOT in force for all of April through July */
              isdst = FALSE;
	    break;

	  case 3:
	      /* In March, DST is NOT in force on and after 02:00 on the last Sunday */    
	      if (utc.mday + (7 - utc.wday) >= 31)
	          isdst = ((utc.wday == 1) && (utc.hour < 2)) ? TRUE : FALSE;
	      else
	          isdst = TRUE;
	      break;

          case 8:
	      /* In August, DST is NOT in force before 02:00 on the last Sunday */
	      if (utc.mday + (7 - utc.wday) >= 31)
	          isdst = ((utc.wday == 1) && (utc.hour < 2)) ? FALSE : TRUE;
	      else
	          isdst = FALSE;
	      break;

          default:
	      dprintf(("", "Bad month %d\n", utc.month));
              isdst = FALSE;
	      break;
      }
      
    }
    else
    {
      switch (utc.month)
      {
          case 11: case 12: case 1: case 2:
             /* DST is in force for all of November through February */
              isdst = TRUE;
              break;
  
          case 4: case 5: case 6: case 7: case 8: case 9:
	      /* DST is NOT in force for all of April through September */
                isdst = FALSE;
	      break;

	  case 3:
	      /* In March, DST is NOT in force on and after 02:00 on the last Sunday */    
	      if (utc.mday + (7 - utc.wday) >= 31)
	          isdst = ((utc.wday == 1) && (utc.hour < 2)) ? TRUE : FALSE;
	      else
	          isdst = TRUE;
	      break;

          case 10:
	      /* In October, DST is NOT in force before 02:00 on the last Sunday */
	      if (utc.mday + (7 - utc.wday) >= 31)
	          isdst = ((utc.wday == 1) && (utc.hour < 2)) ? FALSE : TRUE;
	      else
	          isdst = FALSE;
	      break;

          default:
	      dprintf(("", "Bad month %d\n", utc.month));
              isdst = FALSE;
	      break;
      }
    }

    dprintf(("", "isdst -> %d\n", isdst));

    return isdst;
}

static int clock2utc (const struct riscos_time *clock, UTCOrdinals *utc)
{
    _kernel_swi_regs r;

    r.r[1] = (int) clock;
    r.r[2] = (int) utc;

    if (_kernel_swi(Territory_ConvertTimeToUTCOrdinals, &r, &r) != NULL)
    {
        dprintf(("", "Territory_ConvertTimeToUTCOrdinals failed\n"));
        return FALSE;
    }

    dprintf(("", "clock2utc -> %1dday, %02d/%02d/%04d %02d:%02d:%02d.%02d\n",
    	utc->wday,
        utc->mday, utc->month, utc->year,
        utc->hour, utc->mins, utc->secs, utc->csecs));

    return TRUE;
}

