#include <swis.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>

#include "nettime.h"
#include "ntp.h"
#include "rtcadjust.h"
#include "extralong.h"

/* Maximum 1% (10000ppm) slew */
#define DefaultLatchValue 20000
#define MinimumLatchValue 19800
#define MaximumLatchValue 20200

static unsigned int LastMonoTime;
static int LastError;
static unsigned int LastLatchValue = DefaultLatchValue;

static int running;

#define IOC 0x03200000
#define T0LOW  (*(volatile unsigned char *)(IOC + 0x40))
#define T0HIGH (*(volatile unsigned char *)(IOC + 0x44))

unsigned int rtcadjust_latch()
{
    return LastLatchValue;
}

static void ProgramLatch(int n)
{
    LastLatchValue = n;
    n -= 1;
    T0LOW = n;
    T0HIGH = n >> 8;
}

void rtcadjust_init()
{
    if (!running)
    {
        /* Kill the RTCAdjust module, if it's active */
        _swix(OS_Module, _INR(0,1), 4, "RTCAdjust");

        rtcadjust_initvars();
        LastLatchValue = DefaultLatchValue;
        running = 1;
    }
}

void rtcadjust_final(int fixup)
{
    if (running)
    {
        ProgramLatch(DefaultLatchValue);
        if (fixup)
            rtcadjust_fixup_hardware_rtc();
        /* Restart RTCAdjust, if in ROM */
        _swix(OS_Module, _INR(0,1), 3, "RTCAdjust");
        running = 0;
    }
}

struct riscos_time riscostime_sub(struct riscos_time a, struct riscos_time b)
{
    struct riscos_time r;

    r.l = a.l - b.l;
    r.h = a.h - b.h - (a.l < b.l);

    return r;
}

void rtcadjust_initvars()
{
    LastError = 0;
    _swix(OS_ReadMonotonicTime, _OUT(0), &LastMonoTime);
}

static int64_t fixedpoint_multiply(int64_t a, int64_t b)
{
    u_int64_t l, h;
    int64_t r;

    mul64(a.low, b.low, &l.low);
    mul64(a.low, b.high, &h.low);

    r.low = l.high + h.low;
    r.high = h.high + (r.low < l.high);

    mul64(a.high, b.low, &l.low);
    mul64(a.high, b.high, &h.low);

    r.low += l.low;
    r.high += l.high + h.low + (r.low < l.low);

    dprintf(("rtcadjust_7", "%08lX.%08lX x %08lX.%08lX = %08lX.%08lX\n", a.high, a.low, b.high, b.low, r.high, r.low));

    return r;
}

/*                          (P+C)       P'
 * new latch := old latch * ------ * --------
 *                            P      (P'-C+W)
 *
 *                                             C-W
 *            = old latch * (1 + C/P) * (1 + -------- )
 *                                           P'-(C-W)
 *
 * where P = Period, the requested number of cs ticks between calls
 *
 *       P' = the actual number of cs ticks since last called (different from
 *            P because of the time taken to grant the callback)
 *
 *       C  = the number of cs we are ahead of the RTC this call
 *
 *       W  = the number of cs we were ahead of the RTC last call
 */

int rtcadjust_adjtime(int64_t offset, int P)
{
    unsigned int OldMonoTime;
    int P2;
    int was_running = running;
    int64_t temp64, temp2;
    int64_t C, C_W, W;
    int64_t latch64;

    dprintf(("rtcadjust_2", "offset = %08lX.%08lX\n", offset.high, offset.low));

    rtcadjust_init();

    /* If P is too small, we go all wobbly. Clamp it (effect is to
     * smooth adjustments over at least a few minutes when using small
     * poll intervals.) */
    if (P < 180 * 100)
        P = 180 * 100;

    /* To aid the arithmetic, we require offset.high to be a sign
     * extension of offset.low - ie maximum error is 1.28 seconds.
     */

    if (((int32_t)offset.low >> 31) != offset.high)
    {
        /* Immediate set - not synchronised, or miles out of range */
        struct riscos_time cur, t;
        dprintf(("rtcadjust_2", "Setting time immediately\n"));
        C.low = (offset.high << 8) | (offset.low >> 24);
        C.high = offset.high >> 24;
        cur = current_time();
        *(int64_t *) &t = extralong_add(*(int64_t* )&cur, C);
        LastError = 0;
        set_time(&t);
        ProgramLatch(DefaultLatchValue);
        rtcadjust_initvars();
        return -1;
    }

    offset = extralong_neg(offset);

    /* express C and W as a 32.32 fixed point number of centiseconds */
    C.low = offset.low << 8;
    C.high = (int32_t) offset.low >> 24;
    W.low = (int32_t) LastError << 8;
    W.high = (int32_t) LastError >> 24;

    OldMonoTime = LastMonoTime;
    if (_swix(OS_ReadMonotonicTime, _OUT(0), &LastMonoTime))
        return 0;

    P2 = LastMonoTime - OldMonoTime;

    dprintf(("rtcadjust_2", "C=%ld.%08lX, W=%ld.%08lX, P=%d, P'=%d, L=%d\n", C.high, C.low, W.high, W.low, P, P2, LastLatchValue));

    latch64.high = LastLatchValue;
    latch64.low = 0;

    if (P)
    {
        temp64.low = P;
        temp64.high = 0;
        temp2 = extralong_divide(C, temp64);
        dprintf(("rtcadjust_4", "C/P=%08lX.%08lX\n", temp2.high, temp2.low));
        temp2.high += 1;
        latch64 = fixedpoint_multiply(latch64, temp2);
        dprintf(("rtcadjust_4", "latch64(1)=%08lX.%08lX\n", latch64.high, latch64.low));
    }

    if (was_running) /* Otherwise, P' = infinity: P' term eliminated */
    {
        C_W = extralong_subtract(C, W);
        dprintf(("rtcadjust_4", "C-W=%08lX.%08lX\n", C_W.high, C_W.low));
        temp64.low = 0;
        temp64.high = P2;
        temp2 = extralong_subtract(temp64, C_W);
        dprintf(("rtcadjust_4", "P'-(C-W)=%08lX.%08lX\n", temp2.high, temp2.low));
        /* Now C_W and temp2 contain top and bottom of fraction, each as 32.32 fp.
           To acheive a 32.32 fp result, shift top left 23 bits, bottom right 9 bits */
        C_W.high = (C_W.high << 23) | (C_W.low >> 9);
        C_W.low = C_W.low << 23;
        temp2.low = (temp2.high << 23) | (temp2.low >> 9);
        temp2.high = temp2.high >> 9;
        temp2 = extralong_divide(C_W, temp2);
        dprintf(("rtcadjust_4", "(C-W)/[P'-(C-W)]=%08lX.%08lX\n", temp2.high, temp2.low));
        temp2.high += 1;
        latch64 = fixedpoint_multiply(latch64, temp2);
        dprintf(("rtcadjust_4", "latch64(2)=%08lX.%08lX\n", latch64.high, latch64.low));
    }

    if (latch64.low & 0x80000000)
        latch64.high++;

    LastError = (int) offset.low;

    if (latch64.high < MinimumLatchValue)
        latch64.high = MinimumLatchValue;
    else if (latch64.high > MaximumLatchValue)
        latch64.high = MaximumLatchValue;

    ProgramLatch((unsigned int) latch64.high);

    dprintf(("rtcadjust_2", "New latch value = %d\n", LastLatchValue));

    return -1;
}

void rtcadjust_fixup_hardware_rtc()
{
    struct riscos_time cur;

    /* Nasty little fudge - we're messing with the latch, which affects
     * the software copy of the RTC, but if we have a hardware RTC it
     * could be doing anything. This will resync the hardware RTC to
     * the soft copy.
     *
     * We don't want to do this too often, as it's liable to muck up
     * our carefully synced time. Especially on old Kernels where the
     * centiseconds are brutally set to zero.
     */
    cur = current_time();
    set_time(&cur);
}

static char *pretty_interval(unsigned int t)
{
    static char buffer[128];
    int n = 0;
    unsigned int days, hours, minutes, seconds;

    seconds = t % 60; t /= 60;
    minutes = t % 60; t /= 60;
    hours   = t % 24; t /= 24;
    days    = t;

    if (days)
        n += sprintf(buffer + n, "%d day%s ", days, days == 1 ? "" : "s");
    if (hours)
        n += sprintf(buffer + n, "%d hour%s ", hours, hours == 1 ? "" : "s");
    if (minutes)
        n += sprintf(buffer + n, "%d minute%s ", minutes, minutes == 1 ? "" : "s");
    if (seconds || n == 0)
        n += sprintf(buffer + n, "%d second%s ", seconds, seconds == 1 ? "" : "s");

    buffer[n - 1] = '\0'; /* Remove trailing space */

    return buffer;
}

void rtcadjust_print_status()
{
    if (running)
    {
        unsigned int time, error;
        u_int64_t tmp;
        _swix(OS_ReadMonotonicTime, _OUT(0), &time);
        time -= LastMonoTime;
        error = abs(LastError);
        mul64((int32_t) error << 8, 10000, &tmp.low);
        printf("Last adjustment: %s ago\n", pretty_interval(time/100));
        printf("Last error:      %d.%02d%04ld seconds%s\n", (error >> 24) / 100, (error >> 24) % 100,
                                                            tmp.high,
                  LastError < 0 ? " slow" : LastError > 0 ? " fast" : "");
    }
    if (last_server.s_addr != 0)
    {
        struct hostent *hp = gethostbyaddr((char *) &last_server, sizeof last_server, AF_INET);
        printf("Last server:     %s\n", hp ? hp->h_name : inet_ntoa(last_server));
        if (last_protocol)
            printf("Last protocol:   %s\n", last_protocol == PORT_NTP ? "SNTP" : "Time/UDP");
    }
    if (poll_period)
        printf("Poll interval:   %s\n", pretty_interval(poll_period / 100));
    printf(    "Timer latch:     %d", LastLatchValue);
    if (LastLatchValue != DefaultLatchValue)
    {
        #if DefaultLatchValue != 20000
        #error Someone sort this maths out
        #endif
        /* Currently expressed as an adjustment to crystal time - this is not the same
         * as our deviation from "real" time.
         */
        printf(" (%c%dppm)\n", LastLatchValue > DefaultLatchValue ? '-' : '+',
                               abs(DefaultLatchValue - LastLatchValue) * 50);
    }
    else
        putchar('\n');
}

void rtcadjust_suspend()
{
    rtcadjust_final(1);
}
