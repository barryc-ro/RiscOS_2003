#include <stdio.h>
#include "kernel.h"
#include "swis.h"

#include "nt_nvram.h"

#include "debug.h"

#define TAG "SystemTime"

int nvram_gettime()
{
#ifdef STB22

    return 0;

#else

    int time[2];
    int res;

    /* Call the SWI, and if it fails, just return 0 */
    if(_swix(NVRAM_Read, _INR(0,2)|_OUT(0), TAG, time, sizeof time, &res))
      return 0;

    if(res<0)
      return 0;

    return time[0];

#endif
}

void nvram_settime(int time)
{
#ifdef STB22
    return;
#else
    _swix(NVRAM_Write, _INR(0,2), TAG, &time, sizeof time);
#endif
}

int read_os_var(char *varname, char *buff, int n)
{
  _kernel_swi_regs r;

  r.r[0] = (int)varname;
  r.r[1] = (int)buff;
  r.r[2] = (buff==NULL)?0x80000000:n;
  r.r[3] = 0;
  r.r[4] = 0;
  if(_kernel_swi(OS_ReadVarVal, &r, &r) != NULL) return(-1);
  if(buff) {
      *(buff + r.r[2]) = 0;
      return(r.r[2]);
  }
  return(-(r.r[2]));

}

int nvram_set_dst (int on)
{
    _kernel_swi_regs r;


    r.r[0] = 161; /* read CMOS */
    r.r[1] = 0xdc; /* alarm and time byte */
    if(_kernel_swi(OS_Byte, &r, &r) != NULL) {
        dprintf(("", "nvram_set_dst: CMOS byte read failed\n"));
        return 0;
    }

    if ((r.r[2] & 0x80) && on) {
        dprintf(("", "nvram_set_dst: DST already ON\n"));
        return 1;
    }
    if (!(r.r[2] & 0x80) && !on) {
        dprintf(("", "nvram_set_dst: DST already OFF\n"));
        return 1;
    }

    r.r[0] = 162; /* write CMOS */
    if (on) { /* set DST */
      dprintf(("", "nvram_set_dst: DST now ON\n"));
      r.r[2] |= 0x80; /* set top bit */
    } else { /* clr DST */
      dprintf(("", "nvram_set_dst: DST now OFF\n"));
      r.r[2] &= 0x7f; /* clr top bit */
    }
    if(_kernel_swi(OS_Byte, &r, &r) != NULL) {
        dprintf (("", "nvram_set_dst: CMOS byte write failed\n"));
	return 0;
    }
    return 1;
}
