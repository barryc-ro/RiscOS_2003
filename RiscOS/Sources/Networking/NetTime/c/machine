#include "socklib.h"
#include "inetlib.h"
#include "sys/ioctl.h"
#include "sys/errno.h"
#pragma -d0		/* Suppress winges about K&R-style declarations */
#include "netdb.h"
#pragma -d1

#include "nettime.h"
#include "nt_nvram.h"
#include "header.h"
#include "dns.h"
#include "dst.h"
#include "rtcadjust.h"
#include "ntp.h"

#include <swis.h>

#include <string.h>
#include <stddef.h>

/*
 * Public vars
 */
int sockno;
static int attempts;
static int using_ntp;
static int guess_protocol;
char env_time_server[MAX_ENV_TIME_SERVER];
struct sockaddr_in sockaddr;
int synchronised;

struct in_addr last_server;
int last_protocol;
int poll_period = LONG_TIMER;

#ifdef DEBUGLIB
char inet_resolvers[128];
#endif

char *states[] = {"Dormant", "NoLink", "Sleeping", "Expecting", "DNSWait"};

#ifdef DEBUGLIB
/* State and transition names for debug output - keep these in step with definitions
 * in nettime.h
 */
char *transitions[] = {"NoTrans", "Init", "Die", "PostInit", "Response", "Failure", "Timer", "LinkUp", "LinkDown", "RegistryChanged", "DoDNS"};

#endif

#define STATENAME(i) ((((i) < 0) || ((i) > sizeof(states)/sizeof(char *))) ? \
			"Invalid state" : states[i])

#define TRANSNAME(i) ((((i) < 0) || ((i) > sizeof(transitions)/sizeof(char *))) ? \
			"Invalid transition" : transitions[i])


/*
 * Private function defs
 */
static int tryresolve(struct sockaddr_in *sa);
static int tryconnect(struct sockaddr_in *sa);
static int isdialup(void);
static int local_settimeofday(void);
static void settimer(int duration);
static void canceltimer(void);
static void closeconnect(void);
static int probe(void);

static state_t state = Dormant;

/*
 * State machine
 *
 * Description of states:
 *	Dormant:	Waiting for other modules to load / smartcard info
 *	NoLink:		Waiting for link to come up on dial-up machine
 *	DNSWait:	Waiting for DNS lookup of time server host name
 *	Expecting:	Waiting for socket response or failure
 *	Sleeping:	Waiting for timer callback because either:
 *			a) Successfully set the time (long Timer)
 *			b) Couldn't connect or read (short Timer), will retry
 */
void machine(transition_t transition)
{
  transition_t next_trans;
  int status;

  for (; transition != NoTrans; transition = next_trans)
  {
    dprintf(("debug", "State %d (%s), transition %d (%s)\n",
    	state, STATENAME(state), transition, TRANSNAME(transition)));

    /* There is no "next transition" unless set whilst handling current transition */
    next_trans = NoTrans;

    switch(state)
    {
    case Dormant:
      switch(transition)
      {
      case PostInit:
      case Init:
        if (isdialup())
          state = NoLink;
        else
          next_trans = LinkUp;
        continue;

      case LinkUp:
      case RegistryChanged:
        next_trans = DoDNS;
        state = DNSWait;
        continue;

      case Die:
      case LinkDown:
        continue;
      }
      break;

    case NoLink:
      switch(transition)
      {
      case LinkUp:
        next_trans = DoDNS;
        state = DNSWait;
        continue;

      case LinkDown:
      case RegistryChanged:
        continue;

      case Die:
        state = Dormant;
        continue;
      }
      break;

    case Sleeping:
      switch(transition)
      {
      case Timer:
      case LinkUp:
      case RegistryChanged:
        next_trans = DoDNS;
        state = DNSWait;
        continue;

      case LinkDown:
        canceltimer();
        state = NoLink;
        continue;

      case Die:
        canceltimer();
        state = Dormant;
        continue;
      }
      break;

    case DNSWait:
      switch(transition)
      {
      case DoDNS:
      case Timer:
        status = tryresolve(&sockaddr);
        switch (status)
        {
          case EINPROGRESS:
            /* Resolve in progress - poll again shortly */
	    settimer(POLL_TIMER);
            continue;

          case 0:
	    /* Resolve complete - connect to server */
            if (tryconnect(&sockaddr) && probe()) {
              last_server = sockaddr.sin_addr;
              last_protocol = using_ntp ? PORT_NTP : PORT_TIME;
              settimer(RETRY_TIMER);
              state = Expecting;
            }
            else {
              rtcadjust_suspend();
              settimer(SHORT_TIMER);
              state = Sleeping;
            }
            continue;

	  default:
            /* Resolve failed - retry later */
            rtcadjust_suspend();
	    settimer(SHORT_TIMER);
	    state = Sleeping;
	    continue;
        }

      case LinkDown:
        canceltimer();
        state = NoLink;
        continue;

      case Die:
        canceltimer();
        state = Dormant;
        continue;

      case RegistryChanged:
        /* Registry changed whilst waiting for DNS completion.  Stop poll timer
         * and try again with (possibly) new timeserver.
         */
        canceltimer();
        next_trans = DoDNS;
        continue;
      }
      break;

    case Expecting:
      switch(transition)
      {
      case Response:
        if (local_settimeofday())
        {
          canceltimer();
          if (poll_period)
          {
            state = Sleeping;
            settimer(poll_period);
          }
          else
            state = Dormant;
        }
        continue;

      case Failure:
        last_protocol = 0;
        rtcadjust_suspend();
        closeconnect();
        settimer(SHORT_TIMER);
        state = Sleeping;
        continue;

      case Timer:
        if (attempts > 4 || !probe()) {
            rtcadjust_suspend();
            closeconnect();
            settimer(SHORT_TIMER);
            last_protocol = 0;
            state = Sleeping;
        }
        else
            settimer(RETRY_TIMER << (attempts-1));
        continue;

      case LinkDown:
        canceltimer();
        rtcadjust_suspend();
        closeconnect();
        state = NoLink;
        continue;

      case Die:
        canceltimer();
        rtcadjust_suspend();
        closeconnect();
        state = Dormant;
        continue;
      }
      break;

    } /* end of switch(state) */

    dprintf(("debug", "Bogus state/transition combo: state=%d, transition=%d\n",
    	     state, transition));

  } /* for (; transition != NoTrans; transition = next_trans) */

  dprintf(("debug", "Machine resting in state=%d\n", state));
}



/* Returns non-0 if on a dialup machine (ie PPP module present) */
static int isdialup(void)
{
  return(_swix(PPP_DCIVersion, _IN(0), 0) == NULL);
}

/* tryresolve()
 *   Try to resolve the TimeServer hostname to an IP address.
 *   The hostname is read in the following manner:
 *    From the system variable "Inet$TimeServer" if set;
 *    From  the system variable "NetTime$Server" if set;
 *    From the smart card tag "TIME_PRIMARY" otherwise.
 *
 * Returns:
 *   0		 - Address resolved, result in 'sockaddr'.
 *   EINPROGRESS - DNS lookup in progress; waiting for response.  To
 *                 collect the response this routine should be
 *                 polled on a timer until it returns 0 or another
 *                 error.
 *   Otherwise	 - Request failed.
 *
 */
static int tryresolve(struct sockaddr_in *sockaddr)
{
  dialler_status_t dialler_status;
  int ipaddress, i;
  int status;

  /*
   * Ensure that if the dialler module is around to return a status,
   * the status returned is a connected status
   */
  if ((_swix(Dialler_Status, _IN(0)|_OUT(0), 0, &dialler_status) == NULL) &&
      !CONNECTED(dialler_status))
  {
    dprintf(("debug", "Dialler bailed! r0=%x\n", dialler_status));
    return -1;
  }

  /* Attempt to read from the Inet$NTPServer system variable */
  dprintf(("debug", "checking environment variable %s\n", ENV_TIME_SERVER2));
  if(read_os_var(ENV_NTP_SERVER, env_time_server, MAX_ENV_TIME_SERVER)>0)
  { /* we have a configured time server */
    dprintf(("debug", "read environment variable: %s\n", env_time_server));
    using_ntp = 1;
    guess_protocol = 0;
  }
  else
  {
    /* Attempt to read from the Inet$TimeServer system variable */
    dprintf(("debug", "checking environment variable %s\n", ENV_TIME_SERVER2));
    if(read_os_var(ENV_TIME_SERVER2, env_time_server, MAX_ENV_TIME_SERVER)>0)
    { /* we have a configured time server */
      dprintf(("debug", "read environment variable: %s\n", env_time_server));
      using_ntp = 0;
      guess_protocol = 0;
    }
    else
    {
      /* Attempt to read from the NetTime$Server system variable */
      dprintf(("debug", "checking environment variable %s\n", ENV_TIME_SERVER));
      if(read_os_var(ENV_TIME_SERVER, env_time_server, MAX_ENV_TIME_SERVER)>0)
      { /* we have a configured time server */
        dprintf(("debug", "read environment variable: %s\n", env_time_server));
        using_ntp = 1;
        guess_protocol = 1;
      }
      else
      {
        /* Ask the Registry who we should contact */
        dprintf(("debug", "Requesting the time server from Managed Access\n"));
        if (_swix(NCAccessManager_Enquiry, _INR(0,2)|_OUT(0),
                  NCRegistry_TimeServerTag, env_time_server, MAX_ENV_TIME_SERVER,
                  &i))
        {
          dprintf(("debug", "NCAccessManager bailed! r0=%x\n", i));
          return -1;
        }

        if(i == 4) { /* packed IP address */
          ipaddress = *(int *)env_time_server;
          dprintf(("debug", "NCAccessManager says timeserver IP address is %08x\n", ipaddress));
          if (ipaddress == 0) return -1;
          sockaddr->sin_addr.s_addr = ipaddress; /* address already in network order */
          using_ntp = 1;
          guess_protocol = 1;
          return 0; /* complete */
        } else {
          dprintf(("debug", "NCAccessManager says timeserver host is %s\n", env_time_server));
        }
      }
    }
  }

#ifdef DEBUGLIB
  if (read_os_var("Inet$Resolvers", inet_resolvers, sizeof(inet_resolvers)) > 0)
    dprintf(("debug", "Inet$Resolvers: %s\n", inet_resolvers));
  else
    dprintf(("debug", "Inet$Resolvers not set!\n"));
#endif


  /*  Lookup server as a dot-quad IP string or hostname.
   */
  status = dns_find_ip_address(env_time_server, &sockaddr->sin_addr);
  if (status == EINPROGRESS) {
    dprintf(("debug", "tryresolve: DNS says EINPROGRESS\n"));
  } else if (status == 0) {
    dprintf(("debug", "tryresolve: DNS says done\n"));
  } else {
    dprintf(("debug", "tryresolve: DNS says failed (status = %d)\n", status));
  }

  return status;
}


/* Returns non-0 if connect successfully initiated */
static int tryconnect(struct sockaddr_in *sa)
{
  dialler_status_t dialler_status;
  int i;

  /*
   * Ensure that if the dialler module is around to return a status,
   * the status returned is a connected status
   */
  if ((_swix(Dialler_Status, _IN(0)|_OUT(0), 0, &dialler_status) == NULL) &&
      !CONNECTED(dialler_status))
  {
    dprintf(("debug", "Dialler bailed! r0=%x\n", dialler_status));
    return -1;
  }

  dprintf(("debug", "trying to connect\n"));

  dprintf(("debug", "Using time server 0x%x\n", (int)sa->sin_addr.s_addr));

  if (last_server.s_addr == sa->sin_addr.s_addr && last_protocol == PORT_TIME &&
      guess_protocol)
      using_ntp = 0;

  sa->sin_family = AF_INET;
  sa->sin_port = ntohs(using_ntp ? PORT_NTP : PORT_TIME);

  /* Make a non-blocking async socket */
  sockno = socket(AF_INET, SOCK_DGRAM, 0);
  i=1;
  socketioctl(sockno, FIONBIO, &i);
  socketioctl(sockno, FIOASYNC, &i);

  dprintf(("debug", "Connecting\n"));
  if (connect(sockno, (struct sockaddr*) sa, sizeof *sa) < 0)
    {
      dprintf(("debug", "Connect error %d\n", errno));
      socketclose(sockno);
      return 0;
    }

  attempts=0;

  dprintf(("debug", "Connect initiated on socket %d\n", sockno));
  return -1;
}

static int probe(void)
{
  struct ntp n;
  size_t len = 0;

  dprintf(("debug", "Sending\n"));
  attempts++;

  if (using_ntp)
      len = ntp_construct_request(&n, sizeof n);

  if (send(sockno, &n, len, 0) < 0)
    {
      dprintf(("debug", "Send error %d\n", errno));
      socketclose(sockno);
      return 0;
    }

 return -1;
}



/* Returns non-zero if read server time */
static int local_settimeofday(void)
{
  int time, read;
  int expected;
  struct riscos_time ltime;
  struct ntp n;
  int result;
  int dst;
  int64_t offset;

  expected = using_ntp ? sizeof n : 4;

  if ((read = socketread(sockno, using_ntp ? (void *) &n : (void *) &time, expected)) < expected)
  {
    if ((read > 0) || (errno != EWOULDBLOCK))
    {
      dprintf(("debug", "Read error %d\n", errno));
      /* This is a definite failure - it could be an ICMP unreachable message, in which case
       * we may want to switch protocols on the next retransmit.
       */
      if (guess_protocol)
      {
          closeconnect();
          canceltimer();
          if (using_ntp)
          {
              last_protocol = PORT_TIME;
              state = Sleeping;   /* NTP failed - retry with Time */
              machine(Timer);
          }
          else
              machine(Failure);   /* Time failed - give up */
      }
      else
          machine(Failure);					/* Note! */
    }
    else
    {
      dprintf(("debug", "Read still in progress\n"));
    }

    return 0;
  }

  if (using_ntp)
  {
    result = ntp_process_reply(&n, read, &offset);
    /* This'll be close enough for the NVRAM */
    time = (int) ntohl(n.transmit_timestamp.secs);
  }
  else
  {
    struct riscos_time cur = current_time();
    /* Convert time from network in seconds to host in centiseconds */
    time = (int) ntohl(time);
    mul64(time, 100, (u_int32_t *) &ltime);
    /* Treat times 0x00000000-0x7FFFFFFF as 0x100000000-0x17FFFFFFF */
    if ((time & 0x80000000) == 0) ltime.h += 100;
    offset.low = ltime.l - cur.l;
    offset.high = ltime.h - cur.h - (ltime.l < cur.l);
    offset.high = (offset.high << 24) | (offset.low >> 8);
    offset.low <<= 24;
    dprintf(("debug", "Set time!\n"));
    result = -1;
  }

  if (result == -1)
    result = rtcadjust_adjtime(offset, poll_period);

  ltime = current_time();

  if (result == -1)
  {
    synchronised = 1;
    nvram_settime(time);
  }

  dst = dst_isdst(&ltime);
  if (dst != -1)
      nvram_set_dst(dst);

  closeconnect();

  return result;
}

unsigned int timer_at;

void change_poll_period(int p)
{
  int time_to;
  _swix(OS_ReadMonotonicTime, _OUT(0), &time_to);
  time_to = timer_at - time_to;

  if (state == Sleeping && p < time_to && p != 0)
      settimer(p);

  poll_period = p;
}

static void settimer(int duration)
{
  _swix(OS_RemoveTickerEvent, _INR(0,1), module_timerentry, privateword);
  _swix(OS_CallAfter, _INR(0,2),
        duration, module_timerentry, privateword);
  _swix(OS_ReadMonotonicTime, _OUT(0), &timer_at);
  timer_at += duration;
}


static void canceltimer(void)
{
  _swix(OS_RemoveTickerEvent, _INR(0,1), module_timerentry, privateword);
  removecallback(Timer, privateword);
}


static void closeconnect(void)
{
  dprintf(("debug", "Closing socket %d\n", sockno));
  socketclose(sockno);
  sockno = -1;			/* So that we don't get any events */
}

void print_status(void)
{
  printf("Current time:    %s\n", riscos_to_text(current_time()));
  printf("Status:          %s\n", STATENAME(state));
  rtcadjust_print_status();
}
