#include <sys/types.h>

#include <Global/Services.h>

#include <DebugLib/DebugLib.h>

#include "nettime.h"
#include "nt_nvram.h"
#include "header.h"
#include "rtcadjust.h"
#include "ntp.h"

static _kernel_oserror *err;
static grabbed_event = 0;
static transition_t callback_reason;
void *privateword;
static int we_are_setting;

void setcallback(transition_t reason, void *pw);


_kernel_oserror *module_init(const char *cmd_tail, int podule, void *pw)
{

  int time;
  struct riscos_time ltime = { 0 };
  _kernel_swi_regs r;

  r.r[0] = (int) "NetTime$DST";
  r.r[2] = -1;
  r.r[3] = 0;
  r.r[4] = 0;
  _kernel_swi(OS_ReadVarVal, &r, &r);
  if (r.r[2] == 0)
      _swix(OS_SetVarVal, _INR(0,4), "NetTime$DST", "European", 8, 0, 0);

  /* Initialise DebugLib (if DEBUGLIB defined)
   */
  debug_initialise("NetTime", "NFS::NFSBoot.$.NetTimeLog", "");
/*  debug_initialise_trace(FILE_OUTPUT, ""); */
  debug_atexit();
  debug_output_device(PRINTF_OUTPUT);
  debug_set_screen_cornering(0);

  privateword = pw;
  /* Enable and claim internet event */
  if (!grabbed_event)
  {
    if ((err = _swix(OS_Claim, _INR(0,2),
        EventV, module_evententry, pw)) != NULL)
      return err;

    if ((err = _swix(OS_Byte, _INR(0,1), Event_Enable, Internet_Event)) != NULL)
    {
      _swix(OS_Release, _INR(0,2), EventV, module_evententry, pw);
      return err;
    };
    grabbed_event = -1;
  }

  if ((err = _swix(OS_Claim, _INR(0,2), WordV, wordv_veneer, pw)) != NULL)
  {
    _swix(OS_Release, _INR(0,2), EventV, module_evententry, pw);
    return err;
  }

  time = nvram_gettime(); /* get last stored time in seconds, host byte order */

  if (time) {
    mul64(time, 100, (u_int32_t *)&ltime); /* convert to centiseconds */
    if ((time & 0x80000000) == 0) ltime.h += 100;
    set_time(&ltime);
  }

  machine(Init);

  return NULL;
}


_kernel_oserror *module_final(int fatal, int podule, void *pw)
{
  machine(Die);

  rtcadjust_final(1);

  _swix(OS_RemoveTickerEvent, _INR(0,1), module_timerentry, pw);
  _swix(OS_RemoveCallBack, _INR(0,1), module_callentry, pw);

  _swix(OS_Release, _INR(0,2), WordV, wordv_veneer, pw);

  /* Disable and release internet event */
  _swix(OS_Byte, _INR(0,1), Event_Disable, Internet_Event);
  _swix(OS_Release, _INR(0,2), EventV, module_evententry, pw);
  grabbed_event = 0;

  return NULL;
}


void module_service(int service, _kernel_swi_regs *r, void *pw)
{
  switch (service)
  {
  case Service_PreReset:
  case Service_ShutDown:
    rtcadjust_fixup_hardware_rtc();
    return;

  case Service_PostInit:
    machine(PostInit);
    return;

  case Service_Dialler:
    machine(CONNECTED(r->r[2]) ? LinkUp : LinkDown);
    return;

  case Service_InternetStatus:
    handle_dhcp(r);
    return;

  case Service_NCRegistry:
    if ((r->r[5] & BB_STATUS_BB_VALID) ||	/* Network bootblock changed */
        (r->r[4] & BB_STATUS_BB_VALID))
      machine(RegistryChanged);
    return;

  default:
    dprintf(("debug", "Bogus service call &%x\n", service));
  }
}


_kernel_oserror *module_timerhandler(_kernel_swi_regs *r, void *pw)
{
  setcallback(Timer, pw);
  return NULL;
}


int module_eventhandler(_kernel_swi_regs *r, void *pw)
{
  /* Assumes only requested event in CMHG is Internet */
  if ((r->r[2] == sockno))	/* Pour moi? */
  {
    switch (r->r[1])
    {
    case Async:
      setcallback(Response, pw);
      return 0;	/* Claim */

    case Broken:
      setcallback(Failure, pw);
      return 0;	/* Claim */
    }
  }

  return 1;	/* Don't claim */
}


_kernel_oserror *module_callhandler(_kernel_swi_regs *r, void *pw)
{
  machine(callback_reason);
  return NULL;
}

int module_osword15handler(_kernel_swi_regs *r, void *pw)
{
  if (!we_are_setting)
  {
      machine(Die);
      rtcadjust_final(0);
  }
  return 1;
}

void setcallback(transition_t reason, void *pw)
{
  callback_reason = reason;
  _swix(OS_AddCallBack, _INR(0,1), module_callentry, pw);
}

void removecallback(transition_t reason, void *pw)
{
  if (callback_reason == Timer)
     _swix(OS_RemoveCallBack, _INR(0,1), module_callentry, pw);
}

_kernel_oserror *module_cmd_handler(const char *arg_string, int argc, int cmd_no, void *pw)
{
    switch (cmd_no)
    {
      case CMD_NetTime_Kick:
        _swix(OS_RemoveTickerEvent, _INR(0,1), module_timerentry, pw);
        setcallback(LinkUp, pw);
        break;

      case CMD_NetTime_Status:
        print_status();
        break;

      case CMD_NetTime_PollInterval:
      {
        struct
        {
            unsigned char *param1;
            char buffer[12];
        } arg_buff;
        _kernel_oserror *e;
        int p;
        e = _swix(OS_ReadArgs, _INR(0,3), "/A/E", arg_string, &arg_buff, sizeof arg_buff);
        if (e) return e;
        if (arg_buff.param1[4]) arg_buff.param1[4] = 1; /* Prevent overflow */
        p = (arg_buff.param1[4] << 24) | (arg_buff.param1[3] << 16) | (arg_buff.param1[2] << 8) |
             arg_buff.param1[1];
        /* Clamp to between 5 seconds and 1 day */
        if (p != 0 && p < 5)
            p = 5;
        else if (p > 24*60*60)
            p = 24*60*60;

        p *= 100;
        change_poll_period(p);
        break;
      }
    }
    return NULL;
}

_kernel_oserror *set_time(const struct riscos_time *t)
{
    _kernel_oserror *e;

    we_are_setting = 1;
    e = _swix(Territory_SetTime, _IN(0), t);
    we_are_setting = 0;

    return e;
}
