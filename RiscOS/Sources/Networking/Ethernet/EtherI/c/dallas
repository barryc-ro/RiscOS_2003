/*
 * Name		: dallas.c
 * Purpose	: Generic dallas support
 * Author	: Melvin Tang-Richardson
 * Version	: 0.00 (c) Irlam Instruments 1996
 *
 * dallas.c
 *
 * Created 27.6.96
 *
 */

/*
 * Note.  This module is dependant on time taken for a easi cycle
 * on the debi bus.  If the timing of the bus is changed from the
 * specificaion, then this module will need adjusting.
 */

/* We only include this code if the DALLAS chip is present - it is not
 * included in the DeskLite system.
 */

/* RDW 1999-06-09
   changed #if DALLAS to #ifdef DALLAS
 */
#include <string.h>
#include "dallas.h"
#ifdef DALLAS

static void dallas_delay ( struct dallas_physical *dp, int delay )
{
    volatile int dummy;

    delay = (delay>>1) + (delay>>4);

    while (delay--)
        dummy = dp->dallas_read_bus ( dp );
}

/*
 * static void dallas_reset_pulse ( struct dallas_physical *dp )
 *
 * Perform the reset cycle
 */

static void dallas_reset_pulse ( struct dallas_physical *dp )
{
    dp->dallas_pull_down_bus ( dp );
        dallas_delay 	     ( dp, 500 );
    dp->dallas_pull_up_bus   ( dp );

    /* Ensure bus goes high again */
    while ( dp->dallas_read_bus(dp)==0 );
}

/*
 * static int dallas_presence_check ( struct dallas_physical *dp )
 *
 * Return TRUE is the presence pulse is found.  Must only be
 * called after a reset.
 */

static int dallas_presence_check ( struct dallas_physical *dp )
{
    int delay=120;

    while ( delay-- )
    {
        if ( dp->dallas_read_bus(dp)==0 )
            return 1;
    }

    return 0;
}

/*
 * static void dallas_write_one ( struct dallas_physical *dp )
 *
 * Write a 'one' bit to the dallas
 */

static void dallas_write_one ( struct dallas_physical *dp )
{
    dp->dallas_pull_down_bus ( dp );
        dallas_delay         ( dp, TLOW1 );
    dp->dallas_pull_up_bus   ( dp );
        dallas_delay         ( dp, TSLOT-TLOW1 );

    dallas_delay	     ( dp, TREC );
}

/*
 * static void dallas_write_zero ( struct dallas_physical *dp )
 *
 * Write a 'zero' bit to the dallas
 */

static void dallas_write_zero ( struct dallas_physical *dp )
{
    dp->dallas_pull_down_bus ( dp );
        dallas_delay         ( dp, TLOW0 );
    dp->dallas_pull_up_bus   ( dp );
        dallas_delay         ( dp, TSLOT-TLOW0 );

    dallas_delay	     ( dp, TREC );
}

static int dallas_read ( struct dallas_physical *dp )
{
    int data = 0;
    int c;

    for ( c=0; c<8; c++ )
    {
        dp->dallas_pull_down_bus   ( dp );
            dallas_delay           ( dp, TLOWR );
        dp->dallas_pull_up_bus     ( dp );

	dallas_delay ( dp, TRDV );

        data = data >> 1;
        data |= (dp->dallas_read_bus ( dp )&1)<<7;

        dallas_delay ( dp, 45 );
    }

    return data;
}

/*
 * static void dallas_command ( struct dallas_physical *dp, int command )
 *
 * Send a dallas command
 */

static void dallas_command ( struct dallas_physical *dp, int command )
{
    int c;

    for ( c=0; c<8; c++ )
    {
        if ( command&1 )
            dallas_write_one ( dp );
        else
            dallas_write_zero ( dp );

        command = command >> 1;
    }
}

/*
 * static void dallas_checksum ( struct dallas_id *d )
 *
 * Make a check on the id
 */

static int dallas_checksum ( struct dallas_id *d )
{
    int crc = 0;
    int ptr = 0;
    int bit;
    int current;

    for ( ptr=0; ptr<7; ptr++ )
    {
        if ( ptr==0 )
            current = d->d_family_code;
        else
            current = d->d_id[ptr-1];

        crc = ( crc ^ current );

        for ( bit=8; bit--; )
        {
            if ( crc&1 )
            {
                crc = crc >> 1;
                crc = crc ^ 0x8c;
            }
            else
            {
                crc = crc >> 1;
            }
        }
    }

    if ( d->d_crc != crc )
        return 0;
    else
        return 1;
}

/*
 * int dallas_id_read ( struct dallas_physical *dp, struct dallas_id *d )
 *
 * Fill in a dallas_id structure from the physical device
 */

int dallas_id_read ( struct dallas_physical *dp, struct dallas_id *d )
{
    int retries = 8;

    while ( retries-- )
    {
        /* Presense check */
        dallas_reset_pulse ( dp );

        if (!( dallas_presence_check ( dp ) ))
            return 1;

        while ( dp->dallas_read_bus(dp)==0 );

        dallas_delay ( dp, 500 );

        /* Send the read command */
        dallas_command ( dp, 0x0f );

        /* Read the stuff it gives me */
        d->d_family_code = dallas_read ( dp );
        d->d_id[0]       = dallas_read ( dp );
        d->d_id[1]       = dallas_read ( dp );
        d->d_id[2]       = dallas_read ( dp );
        d->d_id[3]       = dallas_read ( dp );
        d->d_id[4]       = dallas_read ( dp );
        d->d_id[5]       = dallas_read ( dp );
        d->d_crc         = dallas_read ( dp );

        /* Perform the checksumming */
        if ( dallas_checksum (d) )
            break;
    }

    /* If the checksum failed then return 1 and zero out the id */
    if ( !dallas_checksum (d) )
    {
        memset ( &d, 0, sizeof(*d) );
        return 1;
    }

    return 0;
}

#else

extern int i; /* Shut the compiler up */

#endif	/* DALLAS */

