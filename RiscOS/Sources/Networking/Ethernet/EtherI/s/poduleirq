; -*-As-*-
;
;	$Header$
;	$Source$
;
;	poduleirq.s
;	Assembler function to enable podule irqs
;
;	Copyright (c) 1995 Acorn Computers Ltd., Cambridge, England
;
;	 $Log$
; Revision 1.1  95/09/18  15:18:33  kwelton
; Initial revision
;

	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:EnvNumbers
	GET	Hdr:ModHand

;;	GET	ListOpts
;;	GET	Macros
;;	GET	System
;;	GET	EnvNumbers
;;	GET	ModHand

	EXPORT	DELAY_
	EXPORT	enable_podule_irqs
	EXPORT	disable_podule_irqs
	EXPORT	disable_irqs
	EXPORT	enable_irqs
	EXPORT	splet
	EXPORT	splimp
	EXPORT	splnet
	EXPORT	splx
	EXPORT	splhi
	EXPORT	splrestore
	EXPORT	set_irqsareoff
	EXPORT	clear_irqsareoff
	EXPORT	ensure_irqs_off
	EXPORT	restore_irqs
	EXPORT	ensure_irqs_on
	EXPORT	callproto
	^	0

	AREA	poduleirqs,PIC,CODE,REL

	ALIGN

irqsareoff
	DCD	0

memc_type
	DCD	0

;
;    **********************************************************************
;

;
;	implement an n-microsecond delay: this code is pretty naff,
;	it is derived from _DELAY_ (arm/delay.s) and calculates the
;	delay for a 32MHz arm3 machine with all the code running in
;	the cache, i.e. this is a *minimum* delay of n microseconds.
;
;	void DELAY_(int n)
;

DELAY_		ROUT
		STMFD	sp!, {r4,lr}

;
;	this loop takes 8 fast cycles, so need to multiply loop
;	count by 4 to acheive 1us per loop
;
		MOV	r0, r0, LSL #2

delayloop	SUBS	r0, r0, #1		; 1 F
		MOV	r4, r4, LSL r4		; 2 F
		MOV	r4, r4, LSL r4		; 2 F
		BGT	delayloop		; 2 F + 1 F
						; ---------
						; 8 F
;
;	all done
;
		LDMFD	sp!, {r4,pc}^

;
;	************************************************************
;

; os_error *enable_podule_irqs();
enable_podule_irqs ROUT
	Push	"r0-r1,lr"


	MOV  R14,PC			 ;Hold current I_bit & F_bit & Mode
	SWI  XOS_EnterOS		  ;Set SVC Mode.
	TEQP PC,#I_bit+F_bit+SVC_mode	 ;Disable IRQs & FIRQs
	MOV  R0,#IOC			 ;whilst enabling Podule IRQs
	LDRB R1,[R0,#IOCIRQMSKB]	 ;in IOC
	ORR  R1,R1,#podule_IRQ_bit
	STRB R1,[R0,#IOCIRQMSKB]
	TEQP PC,R14			 ;Restore original I_bit & F_bit
	NOP				 ;And the Mode.

	; Exit with no recovery
	Pull	"r0-r1,pc",,^

; os_error *disable_podule_irqs();
disable_podule_irqs ROUT
	Push	"r0-r1,lr"


	MOV  R14,PC			 ;Hold current I_bit & F_bit &Mode
	SWI  XOS_EnterOS		  ;Set SVC Mode.
	TEQP PC,#I_bit+F_bit+SVC_mode	 ;Disable IRQs & FIRQs
	MOV  R0,#IOC			 ; whilst disabling Podule IRQs
	LDRB R1,[R0,#IOCIRQMSKB]	 ; in IOC
	AND  R1,R1,#(&FF-podule_IRQ_bit)
	STRB R1,[R0,#IOCIRQMSKB]
	TEQP PC,R14			 ;Restore original I_bit & F_bit
	NOP				 ;And mode.

	; Exit with no recovery
	Pull	"r0-r1,pc",,^

;int  disable_irqs();
; returns:
;	  1 - If IRQs were already disabled.
;	  0 - If this call disabled IRQs.
;
disable_irqs ROUT
splet
splnet
splimp
	LDR    r0,irqsareoff
	MOVS   r0,r0
	MOVNE  pc,lr
	B      disable_podule_irqs

;void  enable_irqs();
;  irqsareoff
;	  1 - Just return.
;	  0 - Enable podule IRQs.
;
enable_irqs ROUT
splx
	LDR   r0,irqsareoff
	MOVS  r0,r0
	MOVNE pc,lr		    ;If so, return.
	B     enable_podule_irqs

set_irqsareoff
	MOV   r0,#1
	STR   r0,irqsareoff
	MOV   pc,lr

clear_irqsareoff
	MOV   r0,#0
	STR   r0,irqsareoff
	MOV   pc,lr

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; ensure_irqs_off:
;
; Disables interrupts up to the level of the ethernet driver (for RISC OS,
; this is just disable IRQs). Once IRQs are disabled, we cannot/must not
; be reentered.
;
; Returns a value indicating the state of interrupts prior to calling here.
;

ensure_irqs_off
	AND	r0, lr, # I_bit
	ORRS	pc, lr, # I_bit

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; restore_irqs:
;
; Restore interrupts to the state they were in prior to a call to
; ensure_irqs_off, using the value returned by ensure_irqs_off.
;

restore_irqs
	BIC	lr, lr, # I_bit
	ORRS	pc, lr, r0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; ensure_irqs_on:
;
; Ensure that interrupts are enabled. Returns a value that, when passed
; to restore_irqs, will restore the state prior to enabling interrupts.
;

ensure_irqs_on
	AND	r0, lr, # I_bit
	BICS	pc, lr, # I_bit


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; splhi etc:
;
; Disable IRQs). Once IRQs are disabled, we cannot/must not be reentered.
;
; Returns a value indicating the state of interrupts prior to calling here.
;

splhi
	AND	r0, lr, # I_bit
	ORRS	pc, lr, # I_bit

splrestore
	BIC	lr, lr, # I_bit
	ORRS	pc, lr, r0

; **********************************************************************

;
; callproto - set r12 and branch to protocol module's handler
;
callproto
	MOV	r12, r3
	MOV	pc, r2

; **********************************************************************

	END

;
; EOF poduleirq.s
;
