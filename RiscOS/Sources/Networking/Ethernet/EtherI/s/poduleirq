; -*-As-*-
;
;	$Header$
;	$Source$
;
;	poduleirq.s
;	Assembler function to enable podule irqs
;
;	Copyright (c) 1995 Acorn Computers Ltd., Cambridge, England
;
;	 $Log$
;	 Revision 1.2  1999/05/10 10:03:26  gstephe
;	 Version 3.05, untouched. Won't build yet.
;
; Revision 1.1  95/09/18  15:18:33  kwelton
; Initial revision
;

	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:EnvNumbers
	GET	Hdr:ModHand
	GET	Hdr:APCS.<APCS>

;;	GET	ListOpts
;;	GET	Macros
;;	GET	System
;;	GET	EnvNumbers
;;	GET	ModHand

	EXPORT	DELAY_
	EXPORT	enable_podule_irqs
	EXPORT	splhi
	EXPORT	splrestore
	EXPORT	ensure_irqs_off
	EXPORT	restore_irqs
	EXPORT	ensure_irqs_on
	EXPORT	callproto
	^	0

	AREA	poduleirqs,PIC,CODE,REL

	ALIGN

memc_type
	DCD	0

;
;    **********************************************************************
;

;
;	implement an n-microsecond delay: this code is pretty naff,
;	it is derived from _DELAY_ (arm/delay.s) and calculates the
;	delay for a 32MHz arm3 machine with all the code running in
;	the cache, i.e. this is a *minimum* delay of n microseconds.
;
;	void DELAY_(int n)
;

DELAY_		ROUT
		FunctionEntry "r4"

;
;	this loop takes 8 fast cycles, so need to multiply loop
;	count by 4 to acheive 1us per loop
;
		MOV	r0, r0, LSL #2

delayloop	SUBS	r0, r0, #1		; 1 F
		MOV	r4, r4, LSL r4		; 2 F
		MOV	r4, r4, LSL r4		; 2 F
		BGT	delayloop		; 2 F + 1 F
						; ---------
						; 8 F
;
;	all done
;
		Return	"r4"

;
;	************************************************************
;

; os_error *enable_podule_irqs(volatile u_int *reg, u_int bit);
enable_podule_irqs ROUT
	FunctionEntry

	SavePSR R12			 ;Hold current I_bit & F_bit & Mode
	WritePSRc I_bit+F_bit+SVC_mode,R3 ;Disable IRQs & FIQs
	LDRB R2,[R0]			 ;whilst enabling Podule IRQs
	ORR  R2,R2,R1                    ;in IOC
	STRB R2,[R0]
	RestPSR R12,,c			 ;Restore original I_bit & F_bit
	NOP				 ;And the Mode.

	; Exit with no recovery
	Return



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; ensure_irqs_off:
;
; Disables interrupts up to the level of the ethernet driver (for RISC OS,
; this is just disable IRQs). Once IRQs are disabled, we cannot/must not
; be reentered.
;
; Returns a value indicating the state of interrupts prior to calling here.
;

ensure_irqs_off
        [ {CONFIG}=26
        AND     r0, lr, # I_bit
        ORRS    pc, lr, # I_bit
        |
        MRS     r0, CPSR
        ORR     r1, r0, #I32_bit        ; set IRQs
        TEQ     r0, r1                  ; any change?
        MSRNE   CPSR_c, r1              ; disable IRQs if enabled before
        AND     r0, r0, #I32_bit        ; return previous state of bit
        Return  ,LinkNotStacked
        ]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; restore_irqs:
;
; Restore interrupts to the state they were in prior to a call to
; ensure_irqs_off, using the value returned by ensure_irqs_off.
;

restore_irqs
splrestore
        [ {CONFIG}=26
        BIC     lr, lr, # I_bit
        ORRS    pc, lr, r0
        |
        MRS     r1, CPSR                ; obtain current PSR
        BIC     r2, r1, #I32_bit        ; clear IRQ bit
        ORR     r2, r2, r0              ; restore state from parameter
        TEQ     r1, r2                  ; changed?
        MSRNE   CPSR_c, r2              ; update PSR if it has changed
        Return  ,LinkNotStacked
        ]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; ensure_irqs_on:
;
; Ensure that interrupts are enabled. Returns a value that, when passed
; to restore_irqs, will restore the state prior to enabling interrupts.
;

ensure_irqs_on
splhi
        [ {CONFIG}=26
        AND     r0, lr, # I_bit
        BICS    pc, lr, # I_bit
        |
        MRS     r0, CPSR
        BIC     r1, r0, #I32_bit        ; enable IRQs
        TEQ     r0, r1                  ; any change?
        MSRNE   CPSR_c, r1              ; enable IRQs if disabled before
        AND     r0, r0, #I32_bit        ; return previous state of bit
        Return  ,LinkNotStacked
        ]


; **********************************************************************

;
; callproto - set r12 and branch to protocol module's handler
;
callproto
	MOV	r12, r3
	MOV	pc, r2

; **********************************************************************

	END

;
; EOF poduleirq.s
;
