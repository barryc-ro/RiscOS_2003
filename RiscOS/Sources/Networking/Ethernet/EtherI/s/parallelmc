;
;
; Name          : Parallel Debugging Module
; Purpose       : Remote debugging physical layer
; Author        : Melvin Tang-Richardson
; Version       : 0.00
;
; parallel.s
;
; Created       29.6.96 (This date is incorrect [today is 26.6.96] )

	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:APCS.<APCS>

        AREA |parallel$$code|, CODE, READONLY

ACK_TIMEOUT	*	&5000

	; This module must be small and execute with
	; the minumum number of instructions.  You must
	; call it from SVC mode

parallel_base
	DCD	 &030109E0

	; r0 = byte to send

	EXPORT	parallel_write
parallel_write
	Return	,LinkNotStacked
	FunctionEntry "r0,r1"
	LDR	r1, parallel_base
	STRB	r0, [r1, #0]
	Return	"r0,r1"

	EXPORT	parallel_sendbyte
parallel_sendbyte

;	MOV	pc, lr

	FunctionEntry "r1-r3, r8"

	LDR	r1, parallel_base

	; Clock the first nibble in

	AND	r2, r0, #&f	; r1 = data to send
	STRB	r2, [r1, #0]	; Send data with clock low
	ORR	r2, r2, #&10
	STRB	r2, [r1, #0]	; Send data with clock high

	; Wait for ack

	MOV	r3, #ACK_TIMEOUT
parallel_send_wait_ack_0
	LDR	r2, [r1, #4]	; Get the status
	EOR	r2, r2, #&80
	SUBS	r3, r3, #1
	BEQ	parallel_send_abort
	TST	r2, #&80
	BEQ	parallel_send_wait_ack_0
	; Clock the second nibble in

	MOV	r2, r0, LSR #4
	AND	r2, r2, #&f	; r1 = data to send
	ORR	r2, r2, #&10
	STRB	r2, [r1, #0]	; Send data with clock high
	BIC	r2, r2, #&10
	STRB	r2, [r1, #0]	; Send data with clock low

	MOV	r3, #ACK_TIMEOUT
parallel_send_wait_ack_1
	LDR	r2, [r1, #4]	; Get the status
	EOR	r2, r2, #&80
	SUBS	r3, r3, #1
	BEQ	parallel_send_abort
	TST	r2, #&80
	BNE	parallel_send_wait_ack_1

	; Successful transmission
	MOV	r0, #0
parallel_send_exit
	; Clear up
	MOV	r2, #0
	STRB	r2, [r1, #0]	; Send data with clock low

	Return	"r1-r3, r8"

parallel_send_abort
	MVN	r0, #0
	B	parallel_send_exit

;-----------------------------------------------

	EXPORT	parallel_recv_byte
parallel_recv_byte
	Return	,LinkNotStacked

	FunctionEntry "r1-r3, r8"

	; Disable interrupts

	PHPSEI	r8

	LDR	r1, parallel_base

	; Wait for some data

	MOV	r3, #ACK_TIMEOUT
parallel_recv_byte_wait_1
	LDR	r2, [r1, #4]	; Get the status
	EOR	r2, r2, #&80
	SUBS	r3, r3, #1
	BEQ	parallel_recv_abort
	TST	r2, #&80
	BEQ	parallel_recv_byte_wait_1

	; Ack it

	MOV	r3, #&10
	STR	r3, [r1, #0]

	; Extract the first nibble

	MOV	r2, r2, LSR #3
	AND	r0, r2, #&f

	; Wait for some more data

	MOV	r3, #ACK_TIMEOUT
parallel_recv_byte_wait_2
	LDR	r2, [r1, #4]	; Get the status
	EOR	r2, r2, #&80
	SUBS	r3, r3, #1
	BEQ	parallel_recv_abort
	TST	r2, #&80
	BNE	parallel_recv_byte_wait_2

	; Ack it

	MOV	r3, #&00
	STR	r3, [r1, #0]

	; Extract the second nibble

	MOV	r2, r2, LSL #1
	AND	r2, r2, #&f0
	ORR	r0, r0, r2

parallel_recv_exit

	; Restore PSR interrupts

	PLP	r8

	Return	"r1-r3, r8"

parallel_recv_abort
	MVN	r0, #0
	B	parallel_recv_exit

	END
