; -*-As-*-
;
;	$Header$
;	$Source$
;
;	en_io.s
;
;	data transfer routines for Ethernet II driver
;
;	Copyright (c) 1995 Acorn Computers Ltd., Cambridge, England
;
;	$Log$
;	Revision 1.2  1999/05/10 10:03:25  gstephe
;	Version 3.05, untouched. Won't build yet.
;
; Revision 1.1  95/09/18  15:18:32  kwelton
; Initial revision
;
;
	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:EnvNumbers
	GET	Hdr:ModHand

;;	GET	ListOpts
;;	GET	Macros
;;	GET	System
;;	GET	EnvNumbers
;;	GET	ModHand

;
;	useful defines
;

		EXPORT en_io_out
		EXPORT en_flush_output
		EXPORT en_io_in

		AREA	exit_control,PIC,CODE

oddbyte		*  &100		  ;flags whether byte buffer is occupied

		ALIGN

;
;    **********************************************************************
;

;
;	copy nbytes from src out to I/O port at dst
;
;	void en_io_out(u_char *src, u_int *dst, int nbytes, u_int *bytebuf)
;
	DCB	"en_io_out", 0
	ALIGN

en_io_out  ROUT
		STMFD	sp!, {r4-r10,lr}

;
;	calculate how many single byte transfers are required
;	to word align the source ADDress, skip if zero
		MOV	r12, r2
		MVN	r2, r0
		ADD	r2, r2, #5
		ANDS	r2, r2, #3
		BEQ	l0

;
;	make sure that no. to align is <= total transfer count, then
;	MOVe data across & decrement xfer count
;
		CMP	r2, r12
		MOVGT	r2, r12
		BL	byte_output
		SUB	r12, r12, r2

;
;	calculate no. of 16 byte block transfers required
;
l0		MOVS	r2, r12, LSR #4
		BEQ	l1

;
;	transfer as many bytes as possiBLe using load/store multiple routines;
;	decide which block transfer routine to call: dependant upon whether
;	or not there is an odd byte ouTSTanding
;
		LDR	r4, [r3]
		TST	r4, #oddbyte
		BLEQ	even_block_output
		BLNE	odd_block_output

;
;	now transfer remaining bytes one at a time
;
l1		ANDS	r2, r12, #&0f
		BLNE	byte_output

;
;	finished
;
		LDMFD	sp!, {r4-r10, pc}^

;
;	**********************************************************************
;

;
;	flush any odd byte remaining at end of transfer
;
;	void en_flush_output(u_int *dst, u_int *bytebuf)
;
	DCB	"en_flush_output", 0
	ALIGN

en_flush_output ROUT
		LDR	r1, [r1]
		TST	r1, #oddbyte
		MOVEQS	pc, lr
		BIC	r1, r1, #oddbyte
		ORR	r1, r1, r1, LSL #8
;		MOV	r1, r1, LSL #16
		STR	r1, [r0]
		MOVS	pc, lr

;
;	**********************************************************************
;

;
;	transfer bytes from src (incremented) to 16-bit DMA port
;	at dst. must return with byte count preserved in r2
;
;	void byte_output(u_char *src, u_int *dst, int nbytes, u_char *bytebuf)
;
	DCB	"byte_output", 0
	ALIGN

byte_output    ROUT
		LDR	r6, [r3]
		MOV	r4, #0

l01		CMP	r4, r2
		STREQ	r6, [r3]
		MOVEQS	pc, lr

;
;	increment byte count, then get NExt src byte into r5. test to
;	see whether we already have an odd byte
;
		ADD	r4, r4, #1
		LDRB	r5, [r0], #1
		TST	r6, #oddbyte

;
;	no - mark as odd byte & repeat the loop
;
		ORREQ	r6, r5, #oddbyte
		BEQ	l01

;
;	already have an odd byte - clear oddbyte marker,
;	build 1/2 word & write it out
;
		BIC	r6, r6, #oddbyte
		ORR	r5, r6, r5, LSL #8
;		MOV	r5, r5, LSL #16
		STR	r5, [r1]

;
;	 repeat the loop
;
		B	l01

;
;	**********************************************************************
;

;
;	transfer 16 byte blocks of data to `aligned' destination
;	DMA port
;
;	void even_block_output(u_char *src, u_int *dst, int niterations)
;
	DCB	"even_block_output", 0
	ALIGN

even_block_output ROUT
		STMFD	sp!, {r3, lr}

;
;	transfer next block
;
l02		LDMIA	r0!, {r3-r6}

		MOV	r10, r6
		MOV	r9, r6, LSL #16

		MOV	r8, r5
		MOV	r7, r5, LSL #16


		MOV	r6, r4
		MOV	r5, r4, LSL #16

		MOV	r4, r3
		MOV	r3, r3, LSL #16


		MOV	r3, r3, LSR #16
		MOV	r4, r4, LSR #16
		MOV	r5, r5, LSR #16
		MOV	r6, r6, LSR #16
		MOV	r7, r7, LSR #16
		MOV	r8, r8, LSR #16
		MOV	r9, r9, LSR #16
		MOV	r10, r10, LSR #16

;		STR	r3, [r1]
;		STR	r4, [r1]
;		STR	r5, [r1]
;		STR	r6, [r1]
;		STR	r7, [r1]
;		STR	r8, [r1]
;		STR	r9, [r1]
;		STR	r10, [r1]
		STMIA	r1, {r3-r10}

;	decrement & test loop counter
		SUBS	r2, r2, #1
		BNE	l02

;	finished
		LDMFD	sp!, {r3, pc}^

;
;	**********************************************************************
;

;
;	transfer 16 byte blocks of data to `non-aligned' destination
;	DMA port
;
;	void odd_block_output(u_char *src, u_int *dst,
;			      int niterations, u_int *bytebuf)
;
	DCB	"odd_block_output", 0
	ALIGN

odd_block_output ROUT
		STMFD	sp!, {r11, r12, lr}

;
;	load buffered byte & clear extraneous bits from it
;
		STR	r3, [sp, #-4]!
		LDR	r3, [r3]
		AND	r3, r3, #&ff

;
;	load next data block & preserve byte to be buffered
;
l03		LDMIA	r0!, {r4-r7}
		MOV	r11, r7, LSR #24

;
;	shuffle data ready for transfer to 16-bit I/O space
;
		MOV	r12, r7, LSL #8
		MOV	r10, r7, LSL #24
		ORR	r10, r10, r6, LSR #8

		MOV	r9, r6, LSL #8
		MOV	r8, r6, LSL #24
		ORR	r8, r8, r5, LSR #8

		MOV	r7, r5, LSL #8
		MOV	r6, r5, LSL #24
		ORR	r6, r6, r4, LSR #8

		MOV	r5, r4, LSL #8
		MOV	r4, r4, LSL #24
		ORR	r4, r4, r3, LSL #16

		MOV	r4, r4,  LSR #16
		MOV	r5, r5,  LSR #16
		MOV	r6, r6,  LSR #16
		MOV	r7, r7,  LSR #16
		MOV	r8, r8,  LSR #16
		MOV	r9, r9,  LSR #16
		MOV	r10, r10,  LSR #16
		MOV	r12, r12,  LSR #16

;
;	write this out & update byte buffer
;
;		STR	r4, [r1]
;		STR	r5, [r1]
;		STR	r6, [r1]
;		STR	r7, [r1]
;		STR	r8, [r1]
;		STR	r9, [r1]
;		STR	r10, [r1]
;		STR	r12, [r1]

		STMIA	r1, {r4-r10, r12}
		MOV	r3, r11

;
;	decrement & test loop counter
;
		SUBS	r2, r2, #1
		BNE	l03

;
;	reset marker in buffered byte, save it away then return
;
		ORR	r4, r3, #oddbyte
		LDR	r3, [sp], #4
		STR	r4, [r3]
		LDMFD	sp!, {r11, r12, pc}^

;
;	**********************************************************************
;

;
;	transfer data from 16-bit DMA port at src to dst. nbytes is always
;	rounded up to the nearest whole number of half words.
;
; NOTE:
;
;	this routine will only work if the caller can ensure that only the
;	last call has an odd value for nbytes (data is not buffered between
;	calls)
;
;	void en_io_in(u_int *src, u_char *dst, int nbytes)
;
	DCB	"en_io_in", 0
	ALIGN

en_io_in ROUT
		STMFD	sp!, {r4-r10, lr}

;
;	adjust nbytes if necessary & calculate no. of 4 byte block
;	transfers required
;
		TST	r2, #1
		MOVEQ	r12, r2
		ADDNE	r12, r2, #1

;		MOV	r2, r12
;		BL	byte_input
;		LDMFD	sp!, {r4-r10, pc}^

;
;	Do enough bytes to get us to a word boundary
;

en_io_in_align
		TST	r1, #&7
		MOVNE	r2, #2
		SUBNE	r12, r12, #2
		BLNE	byte_input
		CMPNE	r12, #0
		BNE	en_io_in_align

		MOVS	r2, r12, LSR #2
		BLNE	even_block_input

;
;	now transfer remaining data as single bytes
;
		ANDS	r2, r12, #&0f
		BLNE	byte_input

;
;	finished
;
		LDMFD	sp!, {r4-r10, pc}^

;
;	**********************************************************************
;

;
;	transfer 1/2 words from DMA port at src to dst
;
;	void byte_input(u_int *src, u_char *dst, int nbytes)
;
	DCB	"byte_input", 0
	ALIGN

byte_input   ROUT

;
;	divide byte counter by 2
;
		MOV	r2, r2, LSR #1

;
;	transfer another 2 bytes (1/2 word)
;
l04		LDR	r3, [r0]
		STRB	r3, [r1], #1
		MOV	r3, r3, LSR #8
		STRB	r3, [r1], #1

;
;	decrement counter & repeat loop
;
		SUBS	r2, r2, #1
		BNE	l04

;
;	finished
;
		MOVS	pc, lr

;
;	**********************************************************************
;


;
;	transfer 4 byte blocks of data from 16-bit DMA port at src
;	to dst
;
;	void even_block_input(u_int *src, u_char *dst, int niterations)
;
	DCB	"even_block_input", 0
	ALIGN

even_block_input ROUT
		STMFD	sp!, {r12, lr}
		MOV	r12, #&ff
		ORR	r12, r12, r12, LSL #8

;	load another 4 bytes from DMA port then write them to
;	main memory
;
;	We do it this way due to the way the NIC works so don't fiddle with it unless
;	you are sure you know what you are doing!
;
;	We optimise reading by doing a write of every 4 bytes, this allows the controller time to
;	fetch the next word ready for us to read. If we try to read several words at once the
;	controller will simply delay us until it is ready so we might as well get on with something else.
;
l05

		LDR	r3, [r0]
		AND	r3, r3, r12
		LDR	r4, [r0,#4]
		ORR	r3, r3, r4, LSL #16
		STR	r3, [r1], #4

		LDR	r3, [r0,#8]
		AND	r3, r3, r12
		LDR	r4, [r0,#12]
		ORR	r3, r3, r4, LSL #16
		STR	r3, [r1], #4

		LDR	r3, [r0,#16]
		AND	r3, r3, r12
		LDR	r4, [r0,#20]
		ORR	r3, r3, r4, LSL #16
		STR	r3, [r1], #4

		LDR	r3, [r0,#24]
		AND	r3, r3, r12
		LDR	r4, [r0,#28]
		ORR	r3, r3, r4, LSL #16
		STR	r3, [r1], #4

		SUBS	r2, r2, #4

;
;	decrement & test loop counter
;

		BNE	l05

;
;	finished
;
		LDMFD	sp!, {r12, pc}^
		;MOVS	pc, lr

;
;	**********************************************************************
;

		END

;	/* EOF en_io.s */
