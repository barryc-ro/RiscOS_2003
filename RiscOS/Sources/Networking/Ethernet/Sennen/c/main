#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <time.h>

#include "defs.h"
#include "inlines.h"
#include "screen.h"
#include "SmartCard.h"
#include "wimp.h"
#include "Sockets/in.h"

#define __VERSION__ "0.19 Compiled " __TIME__ " " __DATE__

#define _BROWSER_ "NCFresco"

extern void kill_task(void);
extern int  ncregenq(char *, void *, int);

static int this_task;
static int web_handle = 0;
static int paranoia   = 0;

BOOL semaphore = FALSE;
int  dialplease = CALLBACK_NOOP;

char *version = __VERSION__;

static int wimp_messages[] =
{
  4,       /* Message_DataLoadAck */
  5,
  0x400C1, /* Message_ModeChange */
  0x400C2, /* Message_TaskInitialise */
  0x400C3, /* Message_TaskCloseDown */
  0x4AF80, /* Message_URL */
  NULL
};

char cprefix[80];
char taskname[80];

carddata card;

BOOL tv = TRUE;

BOOL card_in = FALSE;

BOOL debug_status = FALSE;
BOOL debug_allow  = FALSE;

int matrix[6] = {1 << 16, 0, 0, 1 << 16, 0, 0};

int *windowdata = NULL;

extern int *mainwindowdata, mainwindowlen;

extern wimp_point screen_eig;

void DumpIt(void)
{
  _swix(NFS_Dismount, _IN(0) | _IN(1), 0, "NFSHome");
}

void run_something(char *what, BOOL message)
{
  message_block msg;

  memset(&msg, '\0', sizeof(message_block));
  msg.header.size   = 256;

  if (debug_status)
  {
    vdu4();
    printf("> %s\n", what);
  }

  if (message)
  {
    msg.header.action = 0x4AF80;  /* Message_URL */
    strcpy(msg.data.bytes, what);
  }
  else
  {
    msg.header.action = 5;  /* Message_DataOpen */
    msg.data.dataload.window   = 0;
    msg.data.dataload.filetype = 0xFAF;
    strcpy(msg.data.dataload.filename, what);
  }
  _swix(Wimp_SendMessage, _IN(0) | _IN(1) | _IN(2), 18, &msg, web_handle);
}

static void WimpStop(void)
{
  wimp_deletewindow(0, windowdata);
  wimp_closedown(this_task, 0x4B534154);
}

static void Icon_BarIcon(void)
{
  int  icreate[10];

  icreate[0] = -1;
  icreate[5] = 0x17003019;
  strcpy((char *) &icreate[6], _APPNAME_);

  icreate[1] = icreate[2] = 0;
  icreate[3] = icreate[4] = 68;

  _swix(Wimp_CreateIcon, _IN(0) | _IN(1), 0x60000000, icreate);
}

static void WimpStart(void)
{
  _swix(Wimp_Initialise, _IN(0) | _IN(1) | _IN(2) | _IN(3) | _OUT(1),
        350, 0x4B534154, _APPNAME_, wimp_messages, &this_task);
  Icon_BarIcon();
  windowdata = malloc(mainwindowlen);
  memcpy(windowdata, &mainwindowdata[10], mainwindowlen);
  if (getenv(_APPNAME_ "$ShowBorder"))
    ((char *) windowdata)[36] = 7;
  windowdata[0] = wimp_createwindow(0, &windowdata[1]);
  wimp_openwindow(0, windowdata);

  atexit(WimpStop);
}

static void null_action(void)
{
  paranoia = 0;
  kill_task();
  if (getenv("Sennen$Newpage") && strlen(getenv("Sennen$Newpage")))
  {
    run_something(getenv("Sennen$Newpage"), TRUE);

    oscli("Unset Sennen$Newpage");
  }
}

static void key_action(int c)
{
  unsigned int reason;
  
  _swix(NCRegistry_Enquiry, _IN(0) | _IN(1) | _IN(2), "SYSTEM_FLAGS3",
            &reason, 4);
  debug_allow |= ((reason & (1U << 31)) != 0);

  if (debug_allow)
  {
    switch(c)
    {
    case 'd':
    case 'D':
      if (paranoia == 'd')
      {
        char buffer[20];
  
        sprintf(buffer, "CDN_Silent %d", debug_status);
        debug_status = !debug_status;
        oscli(buffer);
      }
      else
      {
        paranoia = 'd';
      }
      break;
  
    case 's':
    case 'S':
      if (paranoia == 's')
      {
        vdu4();
        oscli("Type <Wimp$ScrapDir>.Sennen.Service");
      }
      else
      {
        paranoia = 's';
      }
      break;
  
    case 'x':
    case 'X':
      if (paranoia == 'x')
      {
        message_block msg;
        
        memset(&msg, '\0', sizeof(message_block));
        msg.header.size   = 20;
        msg.header.action = 0;  /* Message_Quit */
        _swix(Wimp_SendMessage, _IN(0) | _IN(1) | _IN(2), 17, &msg, web_handle);
        exit(0);
      }
      else
      {
        paranoia = 'x';
      }
      break;
  
    default:
      wimp_processkey(c);
      break;
    }
  }
  else
  {
    wimp_processkey(c);
  }
}

static void message_action(int *block)
{
  switch(block[4])
  {
  case 0:
    exit(0);
    break;

  case 4:
  case 5:
    break;

  case 0x400C1:
    Screen_CacheModeInfo(matrix);
    break;

  case 0x400C2:
    if (strcmp(((char *) &block[7]), _BROWSER_) == 0)
    {
      web_handle = block[1];
    }
    break;

  case 0x400C3:
    if (block[1] == web_handle)
    {
      wimp_starttask(taskname);
    }
    break;

  case 0x4AF80:
    if (debug_status)
    {
      message_block *msg = (message_block *) block;

      vdu4();
      printf("* %s\n", msg->data.bytes);
    }
    break;
  }
}

int main (int argc, char **argv)
{
  int pollblock[64];
  unsigned int reason, scstatus;

  WimpStart();
  Screen_CacheModeInfo(matrix);
  _swix(Wimp_SetCaretPosition, _IN(0) | _IN(1) | _IN(2) | _IN(3) | _IN(4)
        | _IN(5), windowdata[0], -1, 0, 0, -1, 0);

  if (getenv("Sennen$Newpage"))
  {
    char buffer[256];
    
    sprintf(buffer, "Set " _BROWSER_ "$Welcome -url %s", getenv("Sennen$Newpage"));
    oscli(buffer);
    oscli("Unset Sennen$Newpage");
  }
  else
  {
    _swix(NCRegistry_Status, _OUT(0), &scstatus);
    if ((scstatus & 0x01) == 0) /* No card */
    {
      if ((screen_size.x >> screen_eig.x) >= 1024)
      {
        oscli("Set " _BROWSER_ "$Welcome WWWRoot:InsertCVB");
      }
      else if ((screen_size.x >> screen_eig.x) >= 800)
      {
        oscli("Set " _BROWSER_ "$Welcome WWWRoot:InsertCB");
      }
      else
      {
        oscli("Set " _BROWSER_ "$Welcome WWWRoot:InsertC");
      }
      card_in = FALSE;
    }
    else if ((scstatus & 0x10) != 0) /* Card Locked */
    {
      oscli("Set " _BROWSER_ "$Welcome WWWRoot:EnterC");
    }
    else if ((scstatus & 0x04) != 0) /* Card inserted and valid */
    {
      char loginid[40], pstnnum[40];
      int cardwrite;
  
      oscli("CDN_MakeFiles");
      
      _swix(NCRegistry_Enquiry, _IN(0) | _IN(1) | _IN(2), "CLIENT_UPDATE",
            &cardwrite, 4);
      _swix(NCRegistry_Enquiry, _IN(0) | _IN(1) | _IN(2), "LOGIN_ID",
            loginid, 40);
      _swix(NCRegistry_Enquiry, _IN(0) | _IN(1) | _IN(2), "LOGIN_SECRET",
            pstnnum, 40);
  
      if (strlen(loginid) == 0 || strlen(pstnnum) == 0)
      {
        oscli("Set " _BROWSER_ "$Welcome WWWDyn:EnterNPC");
      }
      else
      {
        oscli("CDN_StartNFS");
      }
    }
    else
    {
      oscli("Set " _BROWSER_ "$Welcome WWWRoot:InvalidCrd");
    }
  }
  _swix(NCRegistry_Enquiry, _IN(0) | _IN(1) | _IN(2), "SYSTEM_FLAGS3",
            &reason, 4);
  debug_allow |= ((reason & (1U << 31)) != 0);

  if (argc > 1)
    strcpy(taskname, argv[1]);
  else
    strcpy(taskname, "" _BROWSER_ ":!Run");


  wimp_starttask(taskname);

  for (;;)
  {
    reason = wimp_pollidle(0x00003830, pollblock, monotonic_time() + 100);

    switch (reason)
    {
    case 0:
      null_action();
      break;

    case 2:
      wimp_openwindow(0, pollblock);
      break;

    case 8:
      key_action(pollblock[6]);
      break;

    case 17:
    case 18:
      message_action(pollblock);
      break;

    case 19:
      {
        char runit[300];
  
        sprintf(runit, "%s %s", cprefix, (char *) &pollblock[11]);
        wimp_starttask(runit);
      }
      break;
    }
  }
  exit(0);
}
