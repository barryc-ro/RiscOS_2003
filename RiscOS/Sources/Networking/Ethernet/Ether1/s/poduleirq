; Assembler function to enable podule irqs

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Proc
        GET     Hdr:EnvNumbers
        GET     Hdr:ModHand

        EXPORT  DELAY_
        EXPORT  disable_irqs
        EXPORT  enable_irqs
        EXPORT  splet
        EXPORT  splimp
        EXPORT  splnet
        EXPORT  splx
        EXPORT  set_irqsareoff
        EXPORT  clear_irqsareoff
        EXPORT  et_irq_entry1

        ^       0

        AREA    poduleirqs,PIC,CODE,REL

        IMPORT  et_irq_entry
et_irq_entry1
        LDR     R0,[R12,#4]       ; unit
        LDR     R12,[R12,#12]     ; wsp
        B       et_irq_entry

irqsareoff
        DCD     0

;
;    **********************************************************************
;

;
;       implement an n-microsecond delay: this code is pretty naff,
;       it is derived from _DELAY_ (arm/delay.s) and calculates the
;       delay for a 32MHz arm3 machine with all the code running in
;       the cache, i.e. this is a *minimum* delay of n microseconds.
;
;       void DELAY_(int n)
;

DELAY_          ROUT
                STMFD   sp!, {r4,lr}

;
;       this loop takes 8 fast cycles, so need to multiply loop
;       count by 4 to acheive 1us per loop
;
                MOV     r0, r0, LSL #2

delayloop       SUBS    r0, r0, #1              ; 1 F
                MOV     r4, r4, LSL r4          ; 2 F
                MOV     r4, r4, LSL r4          ; 2 F
                BGT     delayloop               ; 2 F + 1 F
                                                ; ---------
                                                ; 8 F
;
;       all done
;
                LDMFD   sp!, {r4,pc}^

;
;       ************************************************************
;

; os_error *enable_podule_irqs();
enable_podule_irqs ROUT
        Entry  "r0-r1"

        SavePSR R12                      ;Hold current I_bit & F_bit & Mode
        WritePSRc I_bit+F_bit+SVC_mode,R3 ;Disable IRQs & FIQs
        MOV     R0,#IOC                  ;whilst enabling Podule IRQs
        LDRB    R1,[R0,#IOCIRQMSKB]      ;in IOC
        ORR     R1,R1,#podule_IRQ_bit
        STRB    R1,[R0,#IOCIRQMSKB]
        RestPSR R12,,c                   ;Restore original I_bit & F_bit
        NOP                              ;And the Mode.

        ; Exit with no recovery
        EXIT

; os_error *disable_podule_irqs();
disable_podule_irqs ROUT
        Entry  "r0-r1"

        SavePSR R12                      ;Hold current I_bit & F_bit & Mode
        WritePSRc I_bit+F_bit+SVC_mode,R3 ;Disable IRQs & FIQs
        MOV     R0,#IOC                  ; whilst disabling Podule IRQs
        LDRB    R1,[R0,#IOCIRQMSKB]      ; in IOC
        BIC     R1,R1,#podule_IRQ_bit
        STRB    R1,[R0,#IOCIRQMSKB]
        RestPSR R12,,c                   ;Restore original I_bit & F_bit
        NOP                              ;And mode.

        ; Exit with no recovery
        EXIT

;int  disable_irqs();
; returns:
;         1 - If IRQs were already disabled.
;         0 - If this call disabled IRQs.
;
disable_irqs ROUT
splet
splnet
splimp
        LDR    r0,irqsareoff
        MOVS   r0,r0
        MOVNE  pc,lr
        B      disable_podule_irqs

;void  enable_irqs();
;  irqsareoff
;         1 - Just return.
;         0 - Enable podule IRQs.
;
enable_irqs ROUT
splx
        LDR   r0,irqsareoff
        MOVS  r0,r0
        MOVNE pc,lr                 ;If so, return.
        B     enable_podule_irqs

set_irqsareoff
        MOV   r0,#1
        STR   r0,irqsareoff
        MOV   pc,lr

clear_irqsareoff
        MOV   r0,#0
        STR   r0,irqsareoff
        MOV   pc,lr

        END

