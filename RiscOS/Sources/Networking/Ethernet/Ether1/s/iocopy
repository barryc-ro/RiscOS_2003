
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:EnvNumbers
        GET     Hdr:ModHand

;
; Macro JoinHWords
;
        MACRO
$label  JoinHWords $dst,$lo,$hi
$label  BIC $lo,$lo,#&00FF0000
        BIC $lo,$lo,#&FF000000
        ORR $dst,$lo,$hi,LSL #16
        MEND
;
;
;--------------------------------------------------------------------------
;
; Macro SplitWord
;
        MACRO
$label  SplitWord $lo,$hi
$label  MOV $lo,$hi,LSL #16
        MEND
;
;
;--------------------------------------------------------------------------

        EXPORT acopy_io_in
        EXPORT acopy_io_out
         ^      0

        AREA    exit_control,PIC,CODE,READONLY


;
; Copy_io_in(ioaddr,buffer,count)
;
; Used to copy data in from podule address space.
;
acopy_io_in     ROUT
                MOVS    r2,r2                   ; zero byte count?
                MOVEQS  pc,lr                   ; if so, return.
                Push    "r0-r12,lr"
                ANDS    r3,r0,#1                ; is source word aligned?
                BEQ     aligned
                LDRB    r4,[r0],#3
                STRB    r4,[r1],#1
                SUBS    r2,r2,#1
                BNE     aligned                 ; was this the only byte?
                Pull    "r0-r12,pc",,^          ; if so return
aligned
                LDR     r4,=&112                ;
                LDRB    r3,[r4]                 ; get flag byte
                ANDS    r3,r3,#&1               ; MEMC 1 ?
                BEQ     scopy_io_in             ; MEMC 1, do slow copy.
                ANDS    R3,R1,#3                ; is dst word aligned?
                BNE     scopy_io_in             ; no, so slow copy.
                ANDS    R3,R0,#3                ; is src word aligned?
                BNE     scopy_io_in             ; no, so slow copy.
                MOVS    r3,r2, LSR #4           ; # of 16 byte blocks
                SUB     r2,r2,r3, LSL #4        ; reminder to r2.
                BEQ     noblocks                ; no blocks to copy.
blockloop       LDMIA   r0!,{r4-r10,r12}        ; get 8 words
                JoinHWords r4,r4,r5
                JoinHWords r6,r6,r7
                JoinHWords r8,r8,r9
                JoinHWords r10,r10,r12          ; Join half words to words
                STMIA   r1!,{r4,r6,r8,r10}      ; Write words out.
                SUBS    r3,r3,#1                ; Any more blocks?
                BNE     blockloop               ; If so, loop.
noblocks        MOVS    r3,r2,LSR #2            ; Any full words?
                SUB     r2,r2,r3,LSL #2         ; reminder to r2
                BEQ     nowords                 ; if not, skip.
wordloop        LDMIA   r0!,{r4-r5}             ; load two words.
                JoinHWords r4,r4,r5             ; Join them.
                STR     r4,[r1],#4              ; store result.
                SUBS    r3,r3,#1                ; decrement word count
                BNE     wordloop                ; loop
nowords         CMP     r2,#2                   ; any half words?
                LDRGE   r4,[r0],#4              ; get a word.
                STRGEB  r4,[r1],#1              ; store first byte
                MOVGE   r4,r4, LSR #8
                STRGEB  r4,[r1],#1              ; and second byte.
                SUBGE   r2,r2,#2                ; decrement count.
                MOVS    r2,r2
                LDRNE   r4,[r0],#4              ; Get that last word
                STRNEB  r4,[r1],#1              ; store it.
                Pull    "r0-r12,pc",,^          ; Return.
scopy_io_in     LDR     r4,[r0],#4              ; get one word.
                STRB    r4,[r1],#1              ; store it.
                MOV     r4,r4,LSR #8
                STRB    r4,[r1],#1              ; store second half.
                SUB     r2,r2,#2                ; decrement count
                CMP     r2,#2
                BGE     scopy_io_in             ; if not done, loop.
                CMP     r2,#1
                LDREQB  r4,[r0],#1              ; get the last byte.
                STREQB  r4,[r1],#1
                Pull    "r0-r12,pc",,^          ; Return.


;
; Copy_io_out(ioaddr,buffer,count)
;
; Used to copy data out to podule address space.
;
acopy_io_out    ROUT
                MOVS    r2,r2                   ; zero byte count?
                MOVEQ   r0,r1
                MOVEQS  pc,lr                   ; if so, return.
                Push    "r1-r12,lr"
                ANDS    r3,r1,#1                ; is dst word aligned?
                BEQ     aligned_out
                SUB     r1,r1,#1
                LDR     r4,[r1]
                AND     r4,r4,#&FF
                LDRB    r5,[r0],#1
                ORR     r4,r4,r5,LSL #8
                MOV     r4,r4,LSL #16
                STR     r4,[r1],#4
                SUBS    r2,r2,#1
                BNE     aligned_out             ; was this the only byte?
                MOV     r0,r1
                Pull    "r1-r12,pc",,^          ; if so return
aligned_out
                LDR     r4,=&112                ; chk for MEMC 1A.
                LDRB    r3,[r4]                 ; load flag byte.
                ANDS    r3,r3,#1                ; MEMC 1 ?
                BEQ     scopy_io_out            ; MEMC 1, do slow copy.
                ANDS    R3,R1,#3                ; is dst word aligned?
                BNE     scopy_io_out            ; no, so slow copy.
                ANDS    R3,R0,#3                ; is src word aligned?
                BNE     scopy_io_out            ; no, so slow copy.
                MOVS    r3,r2, LSR #4           ; # of 16 byte blocks
                SUB     r2,r2,r3, LSL #4        ; reminder to r2.
                BEQ     noblocks_out            ; no blocks to copy.
blockloop_out   LDMIA   r0!,{r5,r7,r9,r12}      ; get 4 words
                SplitWord r4,r5
                SplitWord r6,r7
                SplitWord r8,r9
                SplitWord r10,r12               ; split to half words
                STMIA   r1!,{r4-r10,r12}        ; Write words out.
                SUBS    r3,r3,#1                ; Any more blocks?
                BNE     blockloop_out           ; If so, loop.
noblocks_out    MOVS    r3,r2,LSR #2            ; Any full words?
                SUB     r2,r2,r3,LSL #2         ; reminder to r2
                BEQ     nowords_out             ; if not, skip.
wordloop_out    LDR     r5,[r0],#4              ; load a word.
                SplitWord r4,r5                 ; Split it up.
                STMIA   r1!,{r4,r5}             ; store result.
                SUBS    r3,r3,#1                ; decrement word count
                BNE     wordloop_out            ; loop
nowords_out     CMP     r2,#2                   ; any half words?
                LDRGE   r4,[r0],#2              ; get a word.
                MOVGE   r4,r4,LSL #16           ; shift two bytes.
                STRGE   r4,[r1],#4              ; store it.
                SUBGE   r2,r2,#2                ; decrement count.
                MOVS    r2,r2
                LDRNEB  r4,[r0],#1              ; Get that last byte.
                MOVNE   r4,r4,LSL #16           ; shift into place.
                STRNE   r4,[r1],#1              ; store it.
                MOV     r0,r1
                Pull    "r1-r12,pc",,^          ; Return.
scopy_io_out    LDRB    r4,[r0],#1              ; get one byte.
                MOV     r4,r4,LSL #16
                BIC     r4,r4,#&FF000000
                LDRB    r5,[r0],#1              ; and another
                ORR     r4,r4,r5,LSL #24        ; join them.
                STR     r4,[r1],#4              ; store it.
                SUB     r2,r2,#2                ; decrement count
                CMP     r2,#2
                BGE     scopy_io_out            ; if not done, loop.
                CMP     r2,#1
                LDREQB  r4,[r0],#1              ; get the last byte.
                MOVEQ   r4,r4,LSL #16           ; shift into place.
                STREQ   r4,[r1],#1
                MOV     r0,r1
                Pull    "r1-r12,pc",,^          ; Return.

	EXPORT read_six_from_card

read_six_from_card
	LDR	a3,[a2,#0]
	MOV	a3,a3,LSL #16
	MOV	a3,a3,LSR #16
	LDR	a4,[a2,#4]
	ORR	a3,a3,a4,LSL #16
	STR	a3,[a1,#0]

	LDR	a3,[a2,#8]
	MOV	a3,a3,LSL #16
	MOV	a3,a3,LSR #16
	STR	a3,[a1,#4]
	MOVS	pc,lr

                END

