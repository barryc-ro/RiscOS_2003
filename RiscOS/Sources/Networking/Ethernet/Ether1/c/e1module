#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"

#include <AsmUtils/irqs.h>
#include <DebugLib/DebugLib.h>
#include <Global/RISCOS.h>

#include <xcb.h>
#include <int_hndlr.h>

#include <sys/types.h>
#include <sys/dcistructs.h>
#include <sys/errno.h>
#include <sys/mbuf.h>

#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <net/if.h>
#include <netinet/if_ether.h>

#include "e1module.h"
#include "if_et.h"
#include "EtHdr.h"
#include "mbuf.h"
#include "poduleirqs.h"
#include "support.h"

/*
 * XXX
 *
 * a really cheesy test for broadcast addresses - relies
 * on character buffers being word aligned.
 */
#define IS_BROADCAST(x) (*(u_int *)(x) == 0xffffffff && \
                         *(u_short *)((x) + 4) == 0xffff)

/*
 * XXX
 *
 * cannot find an unambiguous definition for multicast addresses,
 * the best we have is a statement that "all multicast addresses
 * have an MSB of 1" without any clarification whether `B' means
 * bit or byte.  This test *assumes* that it stands for bit.
 */
#define IS_MULTICAST(x) ((*(u_char *)(x) & 0x80) && \
                         (*(u_char *)(x)) != 0xff)

struct swient
{
    static int (*swi_call)();                   /* swi handler */
};

struct client
{
    static _kernel_oserror *(*cli_call)(int argc, char **argv);
};

static int et_version(_kernel_swi_regs *r);
static int et_inquire(_kernel_swi_regs *r);
static int et_getmtu(_kernel_swi_regs *r);
static int et_setmtu(_kernel_swi_regs *r);
static int et_filter(_kernel_swi_regs *r);

static struct swient et_ent[] =
{
    et_version,
    et_inquire,
    et_getmtu,
    et_setmtu,
    et_transmit,
    et_filter,
    et_stats
};

static _kernel_oserror *do_etinfo(int argc, char **argv);
static _kernel_oserror *do_ettest(int argc, char **argv);

static struct client et_cli_call[] =
{
    do_etinfo,
    do_etinfo,
    do_ettest
};

void *module_wsp = 0;

static struct
{
    int  e_num;
    char e_mess[16];
} _et_errblk = { 0 };

static _kernel_oserror *et_error(int error);
static void callback (void (*f) (void), void *pw);
static _kernel_oserror *calleverytick (void (*fun) (void));
static int removetickerevent(void (*fun)(void));


/*
 * arrays of filtering information, sorted per unit,
 * a separate array for each filter level.
 */
FilterSingleRef ieeefilter[4];
FilterSingleRef e2monitor[4];
FilterSingleRef e2sink[4];
FilterChainRef e2specific[4];

/*
 * function pointer used to select the most efficient
 * address filtering function for current hardware
 * address level
 */
int (*address_filter[4])(u_int level, u_char *pack_hdr, u_char *mac_addr);

/*
 * array of Driver information Blocks, one per unit
 */
DibRef dibs[4];

static int managerstarted = 0;
static int finalising = 0;

/**********************************************************************/

/*
 * check_addrlevel - check that address level for a filter SWI
 * is valid. returns 1 if valid, else 0.
 */
static int check_addrlevel(u_int level)
{
    if( (int)level < ADDRLVL_SPECIFIC || (int)level > ADDRLVL_PROMISCUOUS )
        return(0);
    else
        return(1);
}

/**********************************************************************/

/*
 * af_reject - filtering function used to reject *all* received packets
 */
static int af_reject(u_int level, u_char *pack_hdr, u_char *mac_addr)
{
    UNUSED (level);
    UNUSED (pack_hdr);
    UNUSED (mac_addr);

    return(1);
}

/**********************************************************************/

/*
 * af_specific - filtering function used when only specifically
 * addressed packets are enabled in hardware.
 */
static int af_specific(u_int level, u_char *pack_hdr, u_char *mac_addr)
{
    /*
     * the hardware does *all* the filtering for us
     */
    UNUSED (level);
    UNUSED (pack_hdr);
    UNUSED (mac_addr);

    return(0);
}

/**********************************************************************/


/*
 * af_normal - filtering function used when hardware packet
 * filtering accepts specific and broadcast packets.  returns
 * 1 if packet should be filtered out, else 0
 */
static int af_normal(u_int level, u_char *pack_hdr, u_char *mac_addr)
{
    UNUSED (mac_addr);

    if( level == ADDRLVL_SPECIFIC && IS_BROADCAST(pack_hdr) )
        return(1);
    else
        return(0);
}

#if 0
/**********************************************************************/

/*
 * af_multicast - filtering function used when hardware packet
 * filtering accepts specific, broadcast, and multicast
 * packets.  returns 1 if packet should be filtered out, else 0
 */
static int af_multicast(u_int level, u_char *pack_hdr, u_char *mac_addr)
{
    switch( level )
    {
      case ADDRLVL_SPECIFIC:
        if( IS_BROADCAST(pack_hdr) )
            /* filter it out */
            return(1);

        /* fall through case */

      case ADDRLVL_NORMAL:
        if( IS_MULTICAST(pack_hdr) )
            /* don't want it */
            return(1);

        /* fall through case */

      case ADDRLVL_MULTICAST:
      default:
        /* protocol wants this packet */
        return(0);

        /*NOTREACHED*/
        break;
    }
}
#endif

/**********************************************************************/

/*
 * af_promiscuous - filtering function used when hardware packet
 * filtering accepts all packets.  returns 1 if packet should be
 * filtered out, else 0
 */
static int af_promiscuous(u_int level, u_char *pack_hdr, u_char *mac_addr)
{
    int isbroadcast = IS_BROADCAST(pack_hdr);
    int ismulticast = IS_MULTICAST(pack_hdr);

    switch( level )
    {
      case ADDRLVL_SPECIFIC:
        if( isbroadcast )
            /* filter it out */
            return(1);

        /* fall through case */

      case ADDRLVL_NORMAL:
        if( ismulticast )
            /* don't want it */
            return(1);

        /* fall through case */

      case ADDRLVL_MULTICAST:
        /*
         * reject all packets that aren't broadcast or
         * multicast, and which don't match the MAC address
         */
        if( !isbroadcast && !ismulticast )
        {
            int i;

            for( i = 0; i < 6; ++i )
                if( pack_hdr[i] != mac_addr[i] )
                    return(1);
        }

        /* fall through case */

      case ADDRLVL_PROMISCUOUS:
      default:
        /* protocol wants this packet */
        return(0);

        /*NOTREACHED*/
        break;
    }
}

/**********************************************************************/

/*
 * update_addrlevel - find most general address level for all
 * active filters on a given unit, and ask for hardware to
 * be set to that level.
 */
static void update_addrlevel(int unit)
{
    static AddressFilter filters[] =
    {
        af_reject,
        af_specific,
        af_normal,
        af_promiscuous,       /* Haven't gotten card to do filtering for us */
        af_promiscuous
    };

    int level = -1;
    FilterChainRef fc;
    AddressFilter *filtersp = filters + 1;

    if( ieeefilter[unit] != NULL )
        level = MAX(level, (int)ieeefilter[unit]->fs_addrlevel);

    if( e2monitor[unit] != NULL )
        level = MAX(level, (int)e2monitor[unit]->fs_addrlevel);

    if( e2sink[unit] != NULL )
        level = MAX(level, (int)e2sink[unit]->fs_addrlevel);

    for( fc = e2specific[unit]; fc; fc = fc->fc_next )
        level = MAX(level, (int)fc->fc_addrlevel);

    set_receive_level(unit, level);

    /*
     * set appropriate filtering function
     */
    address_filter[unit] = filtersp[level];
}

/**********************************************************************/

/*
 * send_frametypefree - raise a service call to let protocol modules
 * know that a given frame type has been freed
 */
static void send_frametypefree(u_int unit, u_int type, FilterSingleRef fs)
{
    _swix(OS_ServiceCall, _INR(0,4), dibs[unit], Service_DCIFrameTypeFree,
                                     type, fs->fs_addrlevel, fs->fs_errlevel);
}

/**********************************************************************/

/*
 * undo_chainfilter - stop filtering on a filter level that
 * chains multiple frame types iff the recipient protocol module
 * has a private word pointer that matches the one given
 */
static void undo_chainfilter(u_int unit, u_int pwp, u_int level,
                             FilterChainRef *fcrptr)
{
    FilterChainRef *fcprev = fcrptr;
    FilterChainRef fc = *fcrptr;

    while( fc )
    {
        if( fc->fc_pwptr == pwp )
        {
            u_int ftype = 0;
            SET_FRAMETYPE(ftype, fc->fc_type);
            SET_FRAMELEVEL(ftype, level);

            /*
             * unchain this entry, send service call
             * indicating it is free, and free it
             */
            *fcprev = fc->fc_next;
            send_frametypefree(unit, ftype, &(fc->fc_filter));
            (void)free(fc);

            /*
             * previous entry is the same,
             * advance the current pointer
             */
            fc = *fcprev;
        }
        else
        {
            /*
             * move both pointers down the list
             */
            fc = fc->fc_next;
            fcprev = (FilterChainRef *)(*fcprev);
        }
    }
}

/**********************************************************************/

/*
 * undo_singlefilter - stop filtering on a filter level that does
 * not chain multiple frame types iff the recipient protocol module
 * has a private word pointer that matches the one given
 */
static void undo_singlefilter(u_int unit, u_int pwp, u_int level,
                              FilterSingleRef *fsrptr)
{
    FilterSingleRef fs = *fsrptr;

    if( fs && fs->fs_pwptr == pwp )
    {
        /*
         * we have a match - send a service call round
         * to let protocol modules know about new claims
         * available.
         */
        u_int ftype = 0;
        SET_FRAMELEVEL(ftype, level);
        send_frametypefree(unit, ftype, fs);
        (void)free(fs);
        *fsrptr = NULL;
    }
}

/**********************************************************************/

/*
 * filtersoff - disable filtering for the module
 * with the given private word pointer.
 */
static void filtersoff(u_int pwp)
{
    int unit;

    /*
     * loop over all active units looking for the module
     */
    for( unit = 0; unit < etcnt; ++unit )
    {
        /*
         * start with the chained filter level
         */
        undo_chainfilter(unit, pwp, FRMLVL_E2SPECIFIC, &e2specific[unit]);

        /*
         * now the unique filter levels
         */
        undo_singlefilter(unit, pwp, FRMLVL_E2SINK, e2sink + unit);
        undo_singlefilter(unit, pwp, FRMLVL_E2MONITOR, e2monitor + unit);
        undo_singlefilter(unit, pwp, FRMLVL_IEEE, ieeefilter + unit);

        /*
         * check whether receiver can be disabled
         */
        update_addrlevel(unit);
    }
}

/**********************************************************************/

/*
 * do_chainfilter - handle a claim or release on a
 * filter level that chains multiple frame types.
 */
static int do_chainfilter(_kernel_swi_regs *r,
                          FilterChainRef *fcrptr,
                          FilterSingleRef *antagonist)
{
    FilterChainRef fc, *fcprev;
    int unit = r->r[1];

    /*
     * search down the FilterChain, looking for this frametype
     */
    for( fcprev = fcrptr, fc = *fcrptr;
        fc && fc->fc_type != GET_FRAMETYPE(r->r[2]);
        fc = fc->fc_next, fcprev = (FilterChainRef *)*fcprev )
        /* do nothing */
        ;

    dprintf (("", "do_chainfilter(%x, %x): fcrptr = %p, fc = %p\n",
           r->r[0], r->r[2], fcrptr, fc));

    /*
     * is this a claim or a release
     */
    if( r->r[0] & FILTER_RELEASE )
    {
        if( !fc )
            /*
             * trying to free a non-existent claim
             */
            return(EINVAL);

        if( fc->fc_handler != (void (*)())r->r[6] || fc->fc_pwptr != r->r[5] )
            /*
             * trying to release somebody else's claim
             */
            return(EPERM);

        dprintf(("", "releasing claim on frame type %x (fcprev = %p)\n",
               GET_FRAMETYPE(r->r[2]), *fcprev));

        /*
         * OK, this is a legitimate free, do it
         */
        *fcprev = fc->fc_next;
        send_frametypefree(unit, r->r[2], &(fc->fc_filter));
        (void)free(fc);

        /*
         * check whether receiver can be disabled
         */
        update_addrlevel(unit);
    }
    else
    {
        int error;
        struct et_softc *et = et_softc[unit];

        /*
         * claiming
         */
        if( fc || *antagonist )
        {
            /*
             * this frame type is already claimed in some fashion,
             * check that this is not an erroneous reclaim
             */
            if( (et->et_flags & ET_DUPCLAIMEXPECTED) &&
               fc &&
               fc->fc_type == GET_FRAMETYPE(r->r[2]) &&
               fc->fc_addrlevel == r->r[3] &&
               fc->fc_errlevel == r->r[4] &&
               fc->fc_handler == (void (*)())r->r[6] &&
               fc->fc_pwptr == r->r[5] )
            {
                /*
                 * its a legitimate reclaim - need to check that
                 * we can bring the card up live once again.
                 */
                if( (error = etioctl(unit, 1, 1)) != 0 )
                    /*
                     * return an error, but *do not* free the structure
                     */
                    return(error);

                /*
                 * set receive level for this unit to the
                 * loosest address filtering necessary.
                 */
                update_addrlevel(unit);

                return(0);
            }
            else
                return(INETERR_FILTERGONE);
        }

        if( (fc = (FilterChainRef)malloc(sizeof(*fc))) == NULL )
            /*
             * cannot claim memory for this structure
             */
            return(ENOMEM);

        /*
         * check that we can bring the card up live
         */
        if( (error = etioctl(unit, 1, 1)) != 0 )
        {
            (void)free(fc);
            return(error);
        }

        /*
         * fill out the fields
         */
        fc->fc_type = GET_FRAMETYPE(r->r[2]);
        fc->fc_addrlevel = r->r[3];
        fc->fc_errlevel = r->r[4];
        fc->fc_handler = (void (*)())r->r[6];
        fc->fc_pwptr = r->r[5];

        /*
         * chain this structure onto the list
         */
        fc->fc_next = *fcprev;
        *fcprev = fc;

        /*
         * set receive level for this unit to the
         * loosest address filtering necessary.
         */
        update_addrlevel(unit);
    }

    /* all done */
    return(0);
}

/**********************************************************************/

/*
 * do_singlefilter - handle a claim or release on a filter level
 * that does not chain multiple frame types.
 */
static int do_singlefilter(_kernel_swi_regs *r,
                           FilterSingleRef *level,
                           FilterSingleRef *antagonist)
{
    FilterSingleRef fs = *level;
    int unit = r->r[1];

    /*
     * check whether claiming or releasing
     */
    if( (r->r[0] & FILTER_RELEASE) )
    {
        if( !fs )
            /*
             * trying to free a non-existent claim
             */
            return(EINVAL);

        if( fs->fs_handler != (void (*)())r->r[6] || fs->fs_pwptr != r->r[5] )
            /*
             * trying to release somebody else's claim
             */
            return(EPERM);

        /*
         * everything checks out, do the free
         */
        send_frametypefree(unit, r->r[2], fs);
        (void)free(fs);
        *level = NULL;

        /*
         * check whether receiver can be disabled
         */
        update_addrlevel(unit);
    }
    else
    {
        int error;
        struct et_softc *et = et_softc[unit];

        /*
         * it's a claim - most values have been range checked, but
         * take a look at frame type (which *must* be zero)
         */
        if( GET_FRAMETYPE(r->r[2]) != 0 )
            return(EINVAL);

        if( fs || *antagonist )
        {
            if( (et->et_flags & ET_DUPCLAIMEXPECTED) &&
               fs &&
               fs->fs_addrlevel == r->r[3] &&
               fs->fs_errlevel == r->r[4] &&
               fs->fs_handler == (void (*)())r->r[6] &&
               fs->fs_pwptr == r->r[5] )
            {
                /*
                 * its a legitimate reclaim - need to check that
                 * we can bring the card up live once again.
                 */
                if( (error = etioctl(unit, 1, 1)) != 0 )
                    /*
                     * return an error, but *do not* free the structure
                     */
                    return(error);

                /*
                 * set receive level for this unit to the
                 * loosest address filtering necessary.
                 */
                update_addrlevel(unit);

                return(0);
            }
            else
                /*
                 * this frame level is already claimed in some fashion
                 */
                return(INETERR_FILTERGONE);
        }

        if( (fs = (FilterSingleRef)malloc(sizeof(*fs))) == NULL )
            /*
             * cannot claim memory for this structure
             */
            return(ENOMEM);

        /*
         * check that we can bring the card up live
         */
        if( (error = etioctl(unit, 1, 1)) != 0 )
        {
            (void)free(fs);
            return(error);
        }

        /*
         * everything checks out OK, initialise the structure
         */
        fs->fs_addrlevel = r->r[3];
        fs->fs_errlevel = r->r[4];
        fs->fs_handler = (void (*)())r->r[6];
        fs->fs_pwptr = r->r[5];

        *level = fs;

        /*
         * set receive level for this unit to the
         * loosest address filtering necessary.
         */
        update_addrlevel(unit);
    }

    /* all OK */
    return(0);
}

/**********************************************************************/

static int et_filter(_kernel_swi_regs *r)
{
    int error = 0;
    u_int unit = r->r[1];
    void *dummy = NULL;

    dprintf (("", "Et_Filter: flags=%x, unit=%d, frame type=%x, address level=%x, error level=%x, pwp=%p, handler=%p\n",
              r->r[0], r->r[1], r->r[2], r->r[3], r->r[4], r->r[5], r->r[6]));
    /*
     * range checking
     */
    if( r->r[0] >= FILTER_1STRESERVED ||
       !check_addrlevel(r->r[3]) ||
       !check_errlevel(r->r[4]) )
    {
        return(EINVAL);
    }


    switch( GET_FRAMELEVEL( r->r[2]) )
    {
      case FRMLVL_E2SPECIFIC:
        error = do_chainfilter(r, e2specific + unit, e2monitor + unit);
        break;

      case FRMLVL_E2SINK:
        error = do_singlefilter(r, e2sink + unit, e2monitor + unit);
        break;

      case FRMLVL_E2MONITOR:
        if( e2specific[unit] != NULL )
            /*
             * already have some specific frames claimed,
             * therefore monitor is invalid
             */
            error = EAGAIN;
        else
            error = do_singlefilter(r, e2monitor + unit, e2sink + unit);

        break;

      case FRMLVL_IEEE:
        error = do_singlefilter(r, ieeefilter + unit,
                                (FilterSingleRef *)(&dummy));
        break;

      default:
        error = EINVAL;
        break;
    }

    /* that's all */
    return(error);
}

/**********************************************************************/

static int et_version(_kernel_swi_regs *r)
{
    if( r->r[0] )
        return(EINVAL);

    r->r[1] = DCIVERSION;
    return (0);
}

/**********************************************************************/

static int et_inquire(_kernel_swi_regs *r)
{
    if( r->r[0] )
        return(EINVAL);

    r->r[2] = dibs[r->r[1]]->dib_inquire;

    return(0);
}

/**********************************************************************/

static int et_getmtu(_kernel_swi_regs *r)
{
    if( r->r[0] )
        return(EINVAL);

    r->r[2] = ETHERMTU;
    return(0);
}

/**********************************************************************/

static int et_setmtu(_kernel_swi_regs *r)
{
    UNUSED (r);
    return(ENOTTY);
}

/**********************************************************************/

/*
 * Module Initialisation code.
 */
_kernel_oserror *et_initialise(const char *cmd_tail, int pbase, void *pw)
{
    _kernel_oserror *e;
    int unit;
    DibRef dib;
    const char location_string[] = "Expansion slot %d";

    module_wsp = pw;

    UNUSED (cmd_tail);
    UNUSED (pbase);

    debug_initialise ("", "", NULL);
    debug_set_options (0, 0, 0);
    debug_output_device (TML_OUTPUT);
    /*debug_initialise_trace (TML_OUTPUT, "tick_handler");*/

    e = calleverytick(tick_entry);
    if (e)
        return (e);

    et_init();

    if (etcnt == 0)
        return((_kernel_oserror *)0);

    /*
     * Initialize Driver Information Blocks
     */
    for( unit = 0; unit < etcnt; unit++ )
    {
        if( (dib = (DibRef)malloc(sizeof(*dib))) == NULL )
            return(et_error(ENOMEM));

        dibs[unit] = dib;

        dib->dib_swibase = ET_SWI_BASE;
        dib->dib_name = (unsigned char *)"et";
        dib->dib_unit = unit;
        dib->dib_address = et_addresses(unit);
        dib->dib_module = (unsigned char *)"Ether1";
        dib->dib_inquire = (INQ_MULTICAST | INQ_PROMISCUOUS | INQ_HWADDRVALID | INQ_HASSTATS);

        if( (dib->dib_location =
             (unsigned char *)malloc(sizeof(location_string))) == NULL )
        {
            (void)free(dib);
            return(et_error(ENOMEM));
        }
        else
        {
            sprintf((char *)dib->dib_location, location_string, xblock[unit].slot);
            dib->dib_slot.sl_slotid = xblock[unit].slot;
            dib->dib_slot.sl_minor = 0;
            dib->dib_slot.sl_pcmciaslot = 0;
            dib->dib_slot.sl_mbz = 0;
        }

        /*
         * do not bring the card up live yet - set an internal flag
         * to force a power-on self-test when the card is actually
         * brought up via the filter SWI.
         */
        et_softc[unit]->et_flags |= ET_FORCEPOST;

        /*
         * set intial address filter
         */
        address_filter[unit] = af_reject;
    }

    /*
     * check whether the mbuf manager module is loaded yet
     */
    if( !managerstarted && mb_present() )
    {
        /*
         * mbuf manager is loaded - initialise entry points
         */
        if( (e = mb_entryinit()) != NULL )
            return(e);

        /*
         * OK - set a callback to issue Service_DCIDriverStatus
         */
        callback(callb_entry, pw);

        managerstarted = 1;
    }

    return(NULL);
}

/**********************************************************************/

/*
 * Module Finalization code
 */
_kernel_oserror *et_quit(int fatal, int podule, void *pw)
{
    int i;

    UNUSED (fatal);
    UNUSED (podule);
    UNUSED (pw);

    finalising = 1;

    for( i = 0; i < etcnt; ++i )
        send_driverstatus(dibs[i], 1);

    et_final();

    removetickerevent(tick_entry);

    /*
     * finish session with mbuf manager, ignore any
     * errors (they don't mean much, since session
     * *may* still be closed, despite any errors
     * returned)
     */
    (void)mb_closesession();

    debug_terminate ();

    return(NULL);
}

/**********************************************************************/

/*
 * handle_managerstatus - deal with a MbufManagerStatus service call
 */
static void handle_managerstatus(_kernel_swi_regs *r)
{
    switch( r->r[0] )
    {
      case MbufManagerStatus_Started:
        if( !managerstarted )
        {
            /*
             * mbuf manager has appeared - initialise entry points
             */
            if( mb_entryinit() == NULL )
            {
                /*
                 * mbuf system initialised, set a callback
                 * to announce our presence
                 */
                managerstarted = 1;
                callback(callb_entry, module_wsp);
            }
        }

        break;

      case MbufManagerStatus_Stopping:
        /*
         * should only ever see this message if we are
         * finalising our own module, otherwise something
         * has gone terribly wrong (the mbuf manager should
         * only stop when all its clients have closed their
         * sessions)
         */
        if( !finalising )
            panic("Mbuf manager has stopped");

        break;

      case MbufManagerStatus_Scavenge:
        /* do nothing */
        break;

      default:
        break;
    }
}

/**********************************************************************/

/* Module Service Call handler */
void et_sc_handler(int sn, _kernel_swi_regs *r, void *  pw)
{
    int i;

    UNUSED (pw);

    /*
     * ignore nearly all calls until the
     * mbuf manager has been initialised
     */
    if( !managerstarted )
    {
        if( sn == Service_MbufManagerStatus)
            /* best not to ignore this one */
            handle_managerstatus(r);
    }
    else
    {
        switch( sn )
        {
          case Service_EnumerateNetworkDrivers:
            for( i = 0; i < etcnt; ++i )
            {
                ChDibRef chd;

                if( (chd = (ChDibRef)malloc(sizeof(*chd))) == NULL )
                    /*
                     * failed to claim memory - return as
                     * much information as possible
                     */
                    break;

                chd->chd_dib = dibs[i];
                chd->chd_next = (ChDibRef)r->r[0];
                r->r[0] = (int)chd;
            }

            break;

          case Service_DCIProtocolStatus:
            if( r->r[3] == DCIVERSION )
            {
                dprintf(("", "\021\02et: Protocol '%s' is %sing\021\07\n",
                       r->r[4], r->r[2] ? "dy" : "start"));
                /*
                 * only interested in termination calls
                 */
                if( r->r[2] == 1 )
                    filtersoff(r->r[0]);
            }

            break;

          default:
            break;
        }
    }
}

/**********************************************************************/

/*
 * Module SWI handler
 */
_kernel_oserror *et_swi_handler(int swinum, _kernel_swi_regs *r, void *pw)
{
    struct swient *callp;
    int error, oldstate;

    UNUSED (pw);

    /*
     * XXX
     *
     * we *assume* that, since service calls are not active
     * until the mbuf manager has been started, nobody can
     * find out our swibase, and therefore cannot raise any
     * SWIS.  if this is not true (i.e. someone looks up our
     * particular SWI number, then they deserve all the trouble
     * which they are probably likely to receive.
     */
    if( swinum >= (sizeof(et_ent) / sizeof(et_ent[0])) )
        return(et_error(ENOTTY));

    /*
     * check that a correct unit number has been
     * given for all SWIs other than Version
     */
    if( swinum != DCI4Version && r->r[1] >= etcnt  )
        return(et_error(ENXIO));

    dprintf(("", "\021\06SWI %x...", swinum & 63));
    callp = &et_ent[swinum];
    oldstate = ensure_irqs_on();
    error = (*(callp->swi_call))(r);
    restore_irqs(oldstate);

    dprintf(("", "error %d\021\07\n", error));

    return(et_error(error));
}

/**********************************************************************/

static _kernel_oserror *do_etinfo(int argc, char **argv)
{
    UNUSED (argc);
    UNUSED (argv);

    printf("%-18s", "DCI Version");
    printf("%d.%02d\n\n", DCIVERSION / 100, DCIVERSION % 100);

    if (etcnt == 0)
        printf("No Ether1 expansion cards installed\n");
    else
        pretstats(0);

    return ((_kernel_oserror *)0);
}

/**********************************************************************/

static _kernel_oserror *do_ettest(int argc, char **argv)
{
    int unit;

    UNUSED (argc);

    if( (unit = atoi(*argv)) == 0 && **argv != '0' )
    {
        _et_errblk.e_num = 2;
        sprintf(_et_errblk.e_mess, "EtTest: bad unit number '%s'", *argv);
        return((_kernel_oserror *)&_et_errblk);
    }

    if( unit >= etcnt )
    {
        _et_errblk.e_num = 3;
        sprintf(_et_errblk.e_mess, "EtTest: invalid unit number: %d", unit);
        return((_kernel_oserror *)&_et_errblk);
    }

    et_runtest(unit);
    return(NULL);
}

/**********************************************************************/

_kernel_oserror *et_cli_handler(const char *arg_string, int arg_count,
                                int cmd_no, void *pw)
{
    struct client *callp;
    int margc;
    char *margv[20];
    char *cp;
    char **argp = margv;

    UNUSED (pw);

    if( cmd_no >= sizeof(et_cli_call) / sizeof(et_cli_call[0]) )
    {
        _et_errblk.e_num = 1;
        sprintf(_et_errblk.e_mess, "EtInfo: bad command number: %d\n",
                cmd_no);
        return((_kernel_oserror *)&_et_errblk);
    }

    if( arg_count > 20 )
        /* limit set by size of margv array */
        arg_count = 20;

    margc = 0;
    cp = (char *) arg_string;
    while (*cp && arg_count-- > 0)
    {
        while (*cp == ' ' || *cp == '\t')
            cp++;

        if (*cp < ' ')
        {
            *cp = '\0';
            break;
        }

        *argp++ = cp;
        margc++;
        while (*cp >= ' ' && *cp != ' ' && *cp != '\t')
            cp++;

        if (*cp < ' ')
        {
            *cp = '\0';
            break;
        }

        *cp++ = '\0';
    }

    *argp++ = 0;

    callp = &et_cli_call[cmd_no];
    return(callp->cli_call(margc, margv));
}

static _kernel_oserror *calleverytick (void (*fun) (void))
{
    return _swix(OS_Claim, _INR(0,2), TickerV, fun, module_wsp);
    return(NULL);
}

static int removetickerevent(void (*fun)(void))
{
    return (_swix(OS_Release, _INR(0,2), TickerV, fun, module_wsp) ? -1 : 0);
}

_kernel_oserror *  tick_handler (_kernel_swi_regs *  r,
                                 void *              pw)
{
    struct et_softc *et;
    int unit;

    UNUSED (r);
    UNUSED (pw);

    for(unit = 0; unit < etcnt; unit++) {
        et = et_softc[unit];
        if ((et->et_flags & ET_RUNNING) == 0)
            continue;
        if (et->et_watch.timer > 0 && --et->et_watch.timer == 0) {
            etwatch(unit);
            et->et_watch.timer = ET_WATCHTIME * 100;
        }
    }
    return(NULL);
}

/**********************************************************************/

/*
 * send_driverstatus - send a DCIDriverStatus service
 * call for given dib
 */
void send_driverstatus(DibRef dib, int status)
{
    _swix(OS_ServiceCall, _INR(0,3), dib, Service_DCIDriverStatus,
                                     status, DCIVERSION);
}

/**********************************************************************/

/*
 * callb_handler - handler for callback primed by initialisation
 * routine: send round DCIDriverStatus service call for all units
 */
_kernel_oserror *  callb_handler (_kernel_swi_regs *  r,
                                  void *              pw)
{
    int i;
    int s = splimp();

    UNUSED (r);
    UNUSED (pw);

    for( i = 0; i < etcnt; ++i )
        send_driverstatus(dibs[i], 0);

    splx(s);

    return NULL;
}

/**********************************************************************/

static void callback (void (*f) (void), void *pw)
{
    _swix(OS_AddCallBack, _INR(0,1), f, pw);
}

/**********************************************************************/

static _kernel_oserror *et_error(int error)
{
    if (error)
    {
        if( error >= 0x80 )
            _et_errblk.e_num = error;
        else
            REALLYSETDCI4ERRNO(_et_errblk.e_num, error);

        strcpy(_et_errblk.e_mess, "Et module error");
        return ((_kernel_oserror *)&_et_errblk);
    }
    else
        return ((_kernel_oserror *)0);
}

/**********************************************************************/

/* EOF e2module.c */
