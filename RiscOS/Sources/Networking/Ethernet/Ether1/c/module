#include "kernel.h"
#include "swis.h"
#include "errno.h"
#include <stdio.h>
#include "dci4.h"
#include "if_et.h"
#include "module.h"

#define CurDCIVersion  400

/*
 * the functions within this file interface the Ethernet I driver code
 * to the RISC OS Module veneer.
 *
 * DCI 4 conversion 8/94 -gw
 */
struct swient {
        int (*swi_call)();      /* swi handler */
};

#define MAXETSWI      10
#define ET_WATCHTIME  5

extern int et_start();
extern int et_transmit(), et_getmtu(), et_txevreq();
extern int et_up(), et_down(), et_version(), et_setmtu();
extern int et_setmtu(), et_filter(), et_enquire(), et_badswi();
extern char *et_addresses();
extern int etcnt, et_slots[4];
int callb_handler(),callb_entry();

struct swient et_ent[MAXETSWI + 1] = {
    et_badswi,
    et_badswi,
    et_badswi,
    et_transmit,
    et_version,
    et_getmtu,   /*** not correct - needs iss. D spec ***/
    et_badswi,
    et_setmtu,
    et_filter,
    et_enquire,
    0,
};

void *module_wsp = 0;

struct {
    int  e_num;
    char e_mess[16];
} _et_errblk = { 0 };

extern void et_quit();
extern int tick_entry();
extern _kernel_oserror *et_error(), *calleverytick();
extern int etcnt;
extern void callback();

#define TickerV 28

struct dci4pi *pibs = 0;
struct dib *dibs=0;

/*
 * Module Initialization code.
 */
_kernel_oserror *
et_initialise(cmd_tail, pbase, pw)
char *cmd_tail;
int pbase;
void *pw;
{
    _kernel_swi_regs r;
    _kernel_oserror *e;
    int unit;
    struct dib *newdib;
    int unitsup=0;

    m_init();

    module_wsp = pw;
    e = calleverytick(tick_entry);
    if (e)
        return (e);

    et_init();
    if (etcnt == 0)
        return ((_kernel_oserror *)0);


    /* Initialize Driver Information Blocks */

    for (unit=0; unit<etcnt; unit++) {
            if (!(newdib=(struct dib *)malloc(sizeof(struct dib)))) break;
            newdib->dib_next=dibs;
            dibs=newdib;
            sprintf((newdib->dib_name),"et");
            newdib->dib_swibase=ET_SWI_BASE;
            newdib->dib_name[3]=(char)unit;
            newdib->dib_address=et_addresses(unit);
            newdib->dib_module="Ether1";
            newdib->dib_location="Expansion card"; /* should be better */
            {
                    int slot;
                    (newdib->dib_slot).slotid=0;
                    for (slot=0;slot<4;slot++)
                        if (et_slots[slot]==unit-1) (newdib->dib_slot).slotid=slot;
            }

            /**** THIS MUST GO IN A CALLBACK! ****/
            if (etbringup(unit)) unitsup=1;
    }

#ifdef DEBUG
Printf("dibs finished\n");
#endif
    if (unitsup) callback(callb_entry,pw);

#ifdef DEBUG
Printf("callback setup\n");
#endif
    return ((_kernel_oserror *)0);
}

int callb_handler() {
        struct dib *d=dibs;
        _kernel_swi_regs r;

#ifdef DEBUG
Printf("callback handler\n");
#endif
        if (!d) return 1;
        for (;d;d=d->dib_next) {
                    r.r[1] = Service_NetworkDriverStatus;
                    r.r[2] = 0;
                    r.r[3] = (int)d;
                    (void) _kernel_swi(XOS_Bit | OS_ServiceCall,&r, &r);
#ifdef DEBUG
Printf("driverstatus issued, dib=%x",(int)d);
#endif
        }
        return 1;
}

/*
 * Module Finalization code
 */
void et_quit()
{
    _kernel_swi_regs r;
    struct dib *d=dibs;

    if (d) for (;d;d=d->dib_next) {
            r.r[1] = Service_NetworkDriverStatus;
            r.r[2] = 1;
            r.r[3] = (int)d;
    (void) _kernel_swi(XOS_Bit | OS_ServiceCall,&r, &r);
    }
    et_final();
    removetickerevent(tick_entry);
}


/* Module Service Call handler */

void et_sc_handler(sn,r)
int sn;
_kernel_swi_regs *r;
{
    char *pname;
    int i, slotno;
    struct dib *dq;
    struct dci4pi *p;

    switch(sn) {

        case Service_ProtocolDying:
#ifdef DEBUG
Printf("protodying\n");
#endif
        if (pibs)
            for (p = pibs; p; p = p->pi_next) {
                if (r->r[2] == p->pi_handle)
                    memset ((char *) p, 0, sizeof (struct dci4pi));
            }
            break;

        case Service_EnumerateNetworkDrivers:
Printf("et_enumdrivers:");
        if (dibs) {
                struct dib *d, *dc, *odc;
                int e;
                odc=r->r[0];
                for (d=dibs;d;d=d->dib_next) {
                        _kernel_swi_regs rc;
                        rc.r[0]=6;
                        rc.r[3]=sizeof(struct dib);
                        e=_kernel_swi(XOS_Bit | OS_Module,&rc,&rc);
                        if (e) break;
                        dc=(struct dib *)(rc.r[2]);
                        memcpy(dc,d,sizeof(struct dib));
                        dc->dib_next=odc;
                        odc=dc;
Printf("#");
                }
                r->r[0]=odc;
        }
Printf("\n");
        break;

        default:
            break;
    }
}

int caseless_strcmp(a, b)
char *a;
char *b;
{
    int d;

    while ( *a || *b ) {
        d = toupper( *(a++) ) - toupper( *(b++) );
        if ( d )
            return d;
    }
    return 0;
}

/*
 * Module SWI handler
 */
_kernel_oserror *
et_swi_handler(swinum, r, pw)
int swinum;
_kernel_swi_regs *r;
void *pw;
{
    struct swient *callp;
    int error;

    if (swinum >= MAXETSWI)
        return (et_error(2));
    if (etcnt == 0)
        return (et_error(4));
    callp = &et_ent[swinum];
    error = (*(callp->swi_call))(r);
    return(et_error(error));
}

int et_version(r)
_kernel_swi_regs *r;
{
#ifdef DEBUG
Printf("swi_version\n");
#endif
    r->r[0] = CurDCIVersion;
    return (0);
}

int et_getmtu(r)
_kernel_swi_regs *r;
{
#ifdef DEBUG
Printf("swi_getmtu\n");
#endif
    r->r[2] = 1500; /* default = Ether MTU */
    return (0);
}

int et_setmtu(r)
_kernel_swi_regs *r;
{
#ifdef DEBUG
Printf("swi_setmtu\n");
#endif
        return et_error(EBADSWI);
}

int et_badswi(r)
_kernel_swi_regs *r;
{
        return et_error(EBADSWI);
}

int max_flevel(unit)
int unit;
{
        int mx=0;
        struct dci4pi *p=pibs;
#ifdef DEBUG
Printf("max_flvl()\n");
#endif
        if (p) for (;p;p=p->pi_next)
                if (p->pi_unit==unit && p->pi_flevel>mx) mx=p->pi_flevel;
#ifdef DEBUG
Printf("max frmlvl unit %d=%d",unit,mx);
#endif
        return (mx);
}

int et_filter(r)
_kernel_swi_regs *r;
{
        int unit=r->r[1], phand=r->r[6];
        struct dci4pi *p=pibs, *p1;
        int maxlevel=max_flevel(unit), s;
Printf("swi_filter; maxflvl=%x on unit %d\n",maxlevel,unit);
        if ((((r->r[3]==FRMLVL_MONITOR) && (maxlevel!=FRMLVL_NONE)) || ((r->r[3]==FRMLVL_SINK) && (maxlevel > 1)) || ((r->r[3]==FRMLVL_NORMAL) && (maxlevel > 1))) && (r->r[0] & 1)) return et_error(EBADLVL);
        if (p) /* is there already a protocol block for this type? */
                for (;p;p=p->pi_next)
                        if ((p->pi_unit==unit) && (p->pi_handle == r->r[6]) && (p->pi_ftype == r->r[2])) break;
        if (!(r->r[0] & 1) && !p) return et_error(ENOPIB);
        if (!(r->r[0] & 1)) {
Printf("(read ok)\n");
                r->r[3]=p->pi_flevel;
                r->r[4]=p->pi_alevel;
                r->r[5]=p->pi_elevel;
                return (0);
        }
        if (p && r->r[3]==FRMLVL_NONE) { /* remove entry */
Printf("(remove)\n");
                if (pibs=p) {
                        pibs=p->pi_next;
                } else {
                        for (p1=pibs;p1;p1=p1->pi_next)
                                if (p1->pi_next==p) break;
                        if (p1) p1->pi_next=p->pi_next;
                }
                free(p);
                return(0);
        }
        if (!p) {
                if (!(p=(struct dci4pi*)malloc(sizeof(struct dci4pi)))) return et_error(ENOMEM);
Printf("(write alloc succeeded)\n");
                p->pi_unit=r->r[1];
                p->pi_ftype=r->r[2];
                p->pi_handle=r->r[6];
                p->pi_flevel=r->r[3];
                p->pi_alevel=r->r[4];
                p->pi_elevel=r->r[5];
                p->pi_handler=(void (*)())r->r[7];
                s=splhi();
                p->pi_next=pibs;
                pibs=p;
                splrestore(s);
        }
        p->pi_flevel=r->r[3];
        p->pi_alevel=r->r[4];
        p->pi_elevel=r->r[5];
        p->pi_handler=(void (*)())r->r[7];
Printf("(write ok)\n");
        return (0);
}

int
et_enquire(r)
_kernel_swi_regs *r;
{
#ifdef DEBUG
Printf("swi_enquire\n");
#endif
        r->r[2]=0x00000020;
        return (0);
}

_kernel_oserror *
et_cli_handler(arg_string, arg_count, cmd_no, pw)
char *arg_string;
int arg_count, cmd_no;
void *pw;
{
    printf("%-18s", "DCI Version"); printf("%d\n\n", CurDCIVersion);
    if (etcnt == 0)
        printf("No Ether1 expansion cards installed\n");
    else
        pretstats(2);
    return ((_kernel_oserror *)0);
}

_kernel_oserror *
et_error(error)
int error;
{
    if (error) {
        _et_errblk.e_num = error;
        strcpy(_et_errblk.e_mess, "Et module error");
        return ((_kernel_oserror *)&_et_errblk);
    }
    return ((_kernel_oserror *)0);
}

int generate_event(event, par1, par2, par3)
int event, par1, par2, par3;
{
    _kernel_swi_regs r;

    r.r[0] = event;
    r.r[1] = par1;
    r.r[2] = (int)"et";
    r.r[3] = par2;
    r.r[4] = par3;
    return (_kernel_swi(XOS_Bit | OS_GenerateEvent, &r, &r) ? -1 : 0);
}

_kernel_oserror *
calleverytick(fun)
int (*fun)();
{
    _kernel_swi_regs r;

    r.r[0] = TickerV;
    r.r[1] = (int)fun;
    r.r[2] = (int)module_wsp;
    return (_kernel_swi(XOS_Bit | OS_Claim, &r, &r));
}

int removetickerevent(fun)
int (*fun)();
{
    _kernel_swi_regs r;

    r.r[0] = TickerV;
    r.r[1] = (int)fun;
    r.r[2] = (int)module_wsp;
    return ( _kernel_swi(XOS_Bit | OS_Release, &r, &r) ? -1 : 0);
}

extern struct et_softc *et_softc[];

tick_handler(r, pw)
int *r;
void *pw;
{
    struct et_softc *et;
    int unit;

    for(unit = 0; unit < 4; unit++) {
        et = et_softc[unit];
        if ((et->et_flags & ET_RUNNING) == 0)
            continue;
        if (et->et_watch.timer > 0 && --et->et_watch.timer == 0) {
            etwatch(unit);
            et->et_watch.timer = ET_WATCHTIME * 100;
        }
    }
    return (1);
}
