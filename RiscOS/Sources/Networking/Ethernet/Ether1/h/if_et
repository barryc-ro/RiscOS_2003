
#ifndef __armif_if_et_h
#define __armif_if_et_h

#include "kernel.h"

#define ET_WATCHTIME  5

struct xcb_block
{
    u_char *address;
    int unit;
    int slot;
    void *wsp;
};

extern struct xcb_block xblock[4];

#define LANCE_NULL 0xFFFF

/*
 * packet field lengths
 */
#define HW_ADDR_LEN  6U                         /* length of hardware address */
#define PACK_HDR_LEN ((2U * HW_ADDR_LEN) + 2U)   /* bytes in packet header */

typedef unsigned lanceaddr;

struct et_registers
{
    /*
     * The driver only ever writes to these regs:
     * xcbman does any reading via its own defs for XCB card IDs
     */
    volatile unsigned page;     /* bottom 4 bits set LANCE page registers */
    volatile unsigned control;  /* RESET, LOOPBACK, CA and ACK bits */
#define RESET    (1 | ACK)      /* need both cos pending irqs are not cleared by just RESET */
#define LOOPBACK 2
#define CA       4
#define ACK      8
};

#define attention(et, bits) iowrite(et->et_registers->control, bits)

#define TOPPAGE   15
#define PAGESHIFT 12
#define PAGESIZE  (1 << PAGESHIFT)
#define PAGEMASK  (PAGESIZE - 1)


/* The following structures obj_xxx are structures used by the LANCE.
** They are defined as the 32-bit structures seen by the ARM in the dual-port
** RAM of the ethernet card. They each have an individual SZ_xxx and not a
** sizeof because they the IO world is only half-populated.
*/
struct obj_scp {
        volatile unsigned  sysbus;
        unsigned  filler[2];
        volatile lanceaddr iscpaddr;
        volatile unsigned  iscptopaddr;
};
#define SZ_SCP  (sizeof(struct obj_scp)/2)

struct obj_iscp {
        volatile unsigned busy;
        volatile unsigned scb_offset;
        volatile unsigned scb_base[2];
};
#define SZ_ISCP (sizeof(struct obj_iscp)/2)

struct obj_scb {
        volatile unsigned status;
        volatile unsigned command;
        volatile lanceaddr cbl;
        volatile lanceaddr rfa;
        volatile unsigned crcerrs;
        volatile unsigned alnerrs;
        volatile unsigned rscerrs;
        volatile unsigned ovrnerrs;
};
#define SZ_SCB  (sizeof(struct obj_scb)/2)

#define SCB_CX  (1<<15)
#define SCB_FR  (1<<14)
#define SCB_CNA (1<<13)
#define SCB_RNR (1<<12)
/* Command Unit and Receive Unit commands */
#define ACK_CX  SCB_CX
#define ACK_FR  SCB_FR
#define ACK_CNA SCB_CNA
#define ACK_RNR SCB_RNR
#define _U_NOP     0
#define _U_START   1
#define _U_RESUME  2
#define _U_SUSPEND 3
#define _U_ABORT   4
#define CU(cmd)    (((_U_##cmd)&7)<<8)
#define RU(cmd)    (((_U_##cmd)&7)<<4)

/* The obj_cb is an overlay of the common parts of the command structures */
struct obj_cb {
        volatile unsigned status;
        volatile unsigned command;
        volatile lanceaddr link;
        /* This part varies from command to command */
};

/* cb->status fields */
#define CB_C    (1<<15)
#define CB_BUSY (1<<14)
#define CB_OK   (1<<13)
#define CB_ABT  (1<<12)
/* cb->command fields */
#define CB_EL   (1<<15)
#define CB_SUS  (1<<14)
#define CB_INT  (1<<13)

#define CB_CMD  0x7
#define CB_NOP    0
#define CB_IAS    1
#define CB_CFG    2
#define CB_XMT    4
#define CB_TDR    5
#define CB_DMP    6
#define CB_DIA    7

struct obj_nop {
        volatile unsigned status;
        volatile unsigned command;
        volatile lanceaddr link;
};
#define SZ_NOP  (sizeof(struct obj_nop)/2)

struct obj_ias {
        volatile unsigned status;
        volatile unsigned command;
        volatile lanceaddr link;
        volatile unsigned address[6/2];
};
#define SZ_IAS  (sizeof(struct obj_ias)/2)

struct obj_cfg {
        volatile unsigned status;
        volatile unsigned command;
        volatile lanceaddr link;
        volatile unsigned param[6];
};
#define SZ_CFG  (sizeof(struct obj_cfg)/2)

struct obj_dia {
        volatile unsigned status;
        volatile unsigned command;
        volatile lanceaddr link;
};
#define SZ_DIA  (sizeof(struct obj_dia)/2)
#define DIA_FAIL  (1<<11)

struct obj_tdr {
        volatile unsigned status;
        volatile unsigned command;
        volatile lanceaddr link;
        volatile unsigned result;
};
#define SZ_TDR  (sizeof(struct obj_tdr)/2)
#define TDR_LNKOK (1<<15)
#define TDR_XCVR  (1<<14)
#define TDR_OPEN  (1<<13)
#define TDR_SHORT (1<<12)
#define TDR_TIME  0x07ff

struct obj_tcb {
        volatile unsigned status;
        volatile unsigned command;
        volatile lanceaddr link;
        volatile lanceaddr tbd;
        volatile unsigned destaddr[6/2];
        volatile unsigned type;    /* confusingly called "length field" in the Intel book */
};
#define SZ_TCB  (sizeof(struct obj_tcb)/2)

#define TCB_NOCS        (1<<10)
#define TCB_NOCTS       (1<<9)
#define TCB_NODMA       (1<<8)
#define TCB_DEFER       (1<<7)
#define TCB_SQE         (1<<6)
#define TCB_COLL        (1<<5)
#define TCB_NCOLL       0x000f

struct obj_tbd {
        volatile unsigned status;
        volatile lanceaddr next_tbd;
        volatile lanceaddr buffer;
        volatile unsigned buffer_hi;            /* high 8 bits of 24 bit buffer address, always 0 on our board */
};
#define SZ_TBD  (sizeof(struct obj_tbd)/2)

#define TBD_EOF (1<<15)

struct obj_rfd {
        volatile unsigned status;
        volatile unsigned command;
        volatile lanceaddr link;
        volatile lanceaddr rbd;
        volatile unsigned destaddr[6/2];
        volatile unsigned sourceaddr[6/2];
        volatile unsigned type;
};
#define SZ_RFD  (sizeof(struct obj_rfd)/2)

#define RFD_C   (1<<15)
#define RFD_BUSY (1<<14)
#define RFD_OK  (1<<13)
#define RFD_CRC (1<<11)
#define RFD_ALN (1<<10)
#define RFD_RSC (1<<9)
#define RFD_DMA (1<<8)
#define RFD_LEN (1<<7)
#define RFD_EOF (1<<6)
#define RFD_EL  (1<<15)
#define RFD_SUS (1<<14)

struct obj_rbd
{
        volatile unsigned status;
        volatile lanceaddr next;
        volatile lanceaddr buffer;
        volatile unsigned buffer_hi;
        volatile unsigned size;
};
#define SZ_RBD  (sizeof(struct obj_rbd)/2)

#define RBD_EOF         (1<<15)
#define RBD_F           (1<<14)
#define RBD_ACTCOUNT    0x3fff
#define RBD_EL          (1<<15)

/*
 * The et_softc structure is the main device driver control block, one
 * per unit.  It contains all the information needed to access the
 * ethernet card hardware.
 */

struct et_softc
{
        short   et_unit;                        /* unit number */
        unsigned char    et_addr[6];            /* physical ethernet address */
        volatile int     et_flags;
#define ET_RUNNING           (1 << 1)           /* board is running */
#define ET_SQETEST           (1 << 2)           /* SQE Test will be valid on next TX completion */
#define ET_SQEINFORMED       (1 << 3)           /* SQE problem message has been printed */
#define ET_FAULTY            (1 << 6)           /* serious problems: card should not be used */
#define ET_FORCEPOST         (1 << 7)           /* en_bringup *will* perform a post */
#define ET_DUPCLAIMEXPECTED  (1 << 8)           /* protocols may be confused */
#define ET_DOING_CFG         (1 << 9)           /* cfg command structure is being used */
#define ET_DOING_IAS         (1 << 10)          /* ias command structure is being used */
#define ET_DOING_DIA         (1 << 11)          /* dia command structure is being used */
#define ET_DOING_TDR         (1 << 12)          /* tdr command structure is being used */
        struct stats et_stats;                  /* interface statistics */
/* generic interface statistics */
#if 0
        int     et_ipackets;                    /* packets received on interface */
        int     et_ierrors;                     /* input errors on interface */
        int     et_opackets;                    /* packets sent on interface */
        int     et_oerrors;                     /* output errors on interface */
        int     et_collisions;                  /* collisions on csma interfaces */
#endif
        /*
         * Watchdog counters: if non zero will count down, if they
         * reach zero then something serious has happened (or rather
         * something important has failed to happen).
         */
        struct
        {
            int cmd;
            int tdr;
            int reset;
            int timer;
        } et_watch;
        int     et_backoff;                     /* Start at 60 seconds then increase by 3/2 */
        struct et_registers *et_registers;      /* pointer to control registers */
        char *et_dpram;                       /* start of dual-port ram */
        lanceaddr last_struct;                  /* alloc_struct() freemem addr, grows down */
        lanceaddr next_buffer;                  /* alloc_buffer() freemem addr, grows up */
        int et_slot;                            /* physical slot number of this unit */
        int et_pcb_issue;                       /* Printed Circuit Board issue number */
        /* LANCE system control block */
        struct obj_scb *scb;
        /* pointer to last cmd on scb->cbl */
        struct obj_cb  *cmd_tail;
        /* pointer to first free transmit command block */
        struct obj_tcb *tcb_free;
        /* pointer to first free nop (one per free TCB) */
        struct obj_nop *nop_free;
        /* next receive frame descriptor to be processed, and end of list */
        struct obj_rfd *rfd_head, *rfd_tail;
        /* head and tail of circular list of receive buffer descriptors */
        struct obj_rbd *rbd_head, *rbd_tail;
        /*
         * The following are pointers to command structures that are used
         * infrequently: they may be null, but are valid if a relevant
         * structure has already been allocated.
         */
        struct obj_cfg *cfg;
        struct obj_ias *ias;
        struct obj_dia *dia;
        struct obj_tdr *tdr;
};

/*#include "et_stat.h"*/

#define et_st_interface_type		et_stats.st_interface_type
#define et_st_link_status		et_stats.st_link_status
#define et_st_link_polarity		et_stats.st_link_polarity
#define et_st_blank1			et_stats.st_blank1
#define et_st_link_failures		et_stats.st_link_failures
#define et_st_network_collisions	et_stats.st_network_collisions
#define et_st_collisions		et_stats.st_collisions
#define et_st_excess_collisions		et_stats.st_excess_collisions
#define et_st_heartbeat_failures	et_stats.st_heartbeat_failures
#define et_st_not_listening		et_stats.st_not_listening
#define et_st_net_error			et_stats.st_net_error
#define et_st_tx_frames			et_stats.st_tx_frames
#define et_st_tx_bytes			et_stats.st_tx_bytes
#define et_st_tx_general_errors		et_stats.st_tx_general_errors
#define et_st_last_dest_addr		et_stats.st_last_dest_addr
#define et_st_crc_failures		et_stats.st_crc_failures
#define et_st_frame_alignment_errors	et_stats.st_frame_alignment_errors
#define et_st_dropped_frames		et_stats.st_dropped_frames
#define et_st_runt_frames		et_stats.st_runt_frames
#define et_st_overlong_frames		et_stats.st_overlong_frames
#define et_st_jabbers			et_stats.st_jabbers
#define et_st_late_events		et_stats.st_late_events
#define et_st_unwanted_frames		et_stats.st_unwanted_frames
#define et_st_rx_frames			et_stats.st_rx_frames
#define et_st_rx_bytes			et_stats.st_rx_bytes
#define et_st_rx_general_errors		et_stats.st_rx_general_errors
#define et_st_last_src_addr		et_stats.st_last_src_addr

extern int etcnt;
extern struct et_softc *et_softc[];

unsigned char *et_addresses(int unit);
int et_transmit(_kernel_swi_regs *r);
int et_stats(_kernel_swi_regs *r);

int etioctl(int unit, int cmd, int flag);
void set_receive_level(int unit, int addrlevel);
void et_init(void);
void et_final(void);
int pretstats (int flag);
void etwatch (int unit);
void et_runtest (int unit);


#endif/*__armif_if_et_h*/

/* EOF et.h */
