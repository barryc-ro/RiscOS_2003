#ifndef Ether1_e1module_h
#define Ether1_e1module_h

/*
 * Module specific information
 */


#define ET_SWI_BASE               0x43c40

#define Service_ProtocolDying     0x83
#define Service_FindNetworkDriver 0x84
#define Service_NetworkDriverStatus 0x8b


/*
 * structures for holding a unit's filtering information
 */
typedef struct filtersingle
{
    unsigned int   fs_addrlevel;
    unsigned int   fs_errlevel;
    void         (*fs_handler)();
    unsigned int   fs_pwptr;
} FilterSingle, *FilterSingleRef;

typedef struct filterchain
{
    struct filterchain *fc_next;		/* XXX *must* be 1st field */
    unsigned int        fc_type;
    struct filtersingle fc_filter;
} FilterChain, *FilterChainRef;

#define fc_addrlevel	fc_filter.fs_addrlevel
#define fc_errlevel	fc_filter.fs_errlevel
#define fc_handler	fc_filter.fs_handler
#define fc_pwptr	fc_filter.fs_pwptr


/*
 * checks for valid filter parameters
 */
#define check_errlevel(x)	((x) == ERRLVL_NO_ERRORS)

#define MAX(a,b) (((a)>(b))?(a):(b))

#define UNUSED(x) (void) (x)


/*
 * typedef for pointer to filter function
 */
typedef int (*AddressFilter)(u_int level, u_char *pack_hdr, u_char *mac_addr);

extern void *module_wsp;


/*
 * global variables
 */
extern FilterSingleRef  ieeefilter[];
extern FilterSingleRef  e2monitor[];
extern FilterSingleRef  e2sink[];
extern FilterChainRef   e2specific[];
extern AddressFilter    address_filter[];
extern DibRef           dibs[];

/*
 * function prototypes
 */

extern void send_driverstatus(DibRef dib, int status);

#endif
