/* -*-C-*-
 *
 * iface.c  Interfaces between the device driver and the
 *          outside world. Execution starts in this file.
 *
 * (C) Copyright ANT Limited 1994. All rights reserved.
 *
 * Contacts:
 *
 * Postal:  ANT Ltd., PO BOX 300, Cambridge, CB1 2EG, UK.
 * Voice:   01223 567808
 * Fax:     01223 567801
 * Email:   Support@ant.co.uk
 *
 * Author:  Borris
 *
 * History:
 *
 * 091094   Borris  Created
 * 130295   Borris  Changes for new swi_stats (6) interface.
 * 040495   Borris  Again for newer dci4 spec.
 */

#include "all.h"


/*****************************************************************************
 *
 *
 */

static int mbuf_manager_present(void)
{
    _kernel_swi_regs r;

    if (seen_mbuf_manager)
        return 1;

    r.r[0] = 0;                 /* get version via control */

    /* If module is present, this does not change it's state */

    if (_kernel_swi(XOS_Bit + Mbuf_Control, &r, &r) != NULL)
    {
#if DEBUG
        debugstr("error finding mbuf manager\n");
#endif
        return 0;
    }

    /* If too early, just reject it. Assume later versions work */
    /* by examination of mbctl during session opening */

    if (r.r[0] < MBUF_MANAGER_VERSION)
    {
#if DEBUG
        debugstr("mbuf manager too early\n");
#endif
        return 0;
    }

    return 1;
}

/* Side effect setting seen_mbuf_manager is register correctly */

static _kernel_oserror *open_mbuf_manager_session(void)
{
    _kernel_swi_regs r;
    _kernel_oserror *ep;

    r.r[0] = 0;

    ep = _kernel_swi(XOS_Bit + Mbuf_Control, &r, &r);

    if (ep != NULL)
    {
#if DEBUG
        debugstr("error opening mbuf manager session\n");
#endif
        return ep;
    }

    /* Say no memory manager if the version is too early */

    if (r.r[0] < MBUF_MANAGER_VERSION)
    {
#if DEBUG
        debugstr("mbuf manager too early\n");
#endif
        return makeerror(NOCARDUNIT, ENOMEMMAN);
    }

    r.r[0] = (int) &mbctl;

    ep = _kernel_swi(XOS_Bit + Mbuf_OpenSession, &r, &r);

    if (ep == NULL)
        seen_mbuf_manager = 1;

#if DEBUG
    if (ep == NULL)
        debugstr("Initialised mbuf manager session successfully\n");
    else
    {
        debugstr("Error initialising mbuf manager:\n");
        debugstrcr(ep->errmess);
    }
#endif
    return ep;
}


static _kernel_oserror *close_mbuf_manager_session(void)
{
   _kernel_swi_regs r;
   _kernel_oserror *ep;

   if (! seen_mbuf_manager )
       return NULL;

   seen_mbuf_manager = 0;

   r.r[0] = (int) &mbctl;

   ep = _kernel_swi(XOS_Bit + Mbuf_CloseSession, &r, &r);

#if DEBUG
    if (ep == NULL)
        debugstr("Closed mbuf manager session successfully\n");
    else
    {
        debugstr("Error closing mbuf manager:\n");
        debugstrcr(ep->errmess);
    }
#endif
   return ep;
}


/*****************************************************************************
 *
 *
 */

extern void service_frame_type_free ( struct dib *dib, u_int frmlvl, u_int addrlvl, u_int errlvl )
{
    args_DCIFrameTypeFree sc;
#if DEBUG
    debugstr("Issuing Service_DCIFrameTypeFree\n");
#endif
    sc.dib = dib;
    sc.scall = Service_DCIFrameTypeFree;
    sc.frmlvl = frmlvl;
    sc.addrlvl = addrlvl;
    sc.errlvl = errlvl;

    (void) _kernel_swi(OS_ServiceCall | XOS_Bit,
                       (_kernel_swi_regs *) & sc,
                       (_kernel_swi_regs *) & sc );
}

extern void drop_all_clients(vifstr *vifp)
{
    struct client *cp;
    pifstr *pifp = vifp->raw;

#if DEBUG
    debugstr("drop_all_clients\n");
#endif
    while (vifp->clients != NULL)
    {
        cp = vifp->clients;
        vifp->clients = cp->next;
        service_frame_type_free( &vifp->dib, cp->frmlvl, cp->addrlvl, cp->errlvl);
        free(cp);
    }

    if (vifp->ether2_hole != NULL)
    {
        cp = vifp->ether2_hole;
        vifp->ether2_hole = NULL;
        service_frame_type_free( &vifp->dib, cp->frmlvl, cp->addrlvl, cp->errlvl);
        free(cp);
    }

    if (vifp->ieee8023_hole != NULL)
    {
        cp = vifp->ieee8023_hole;
        vifp->ieee8023_hole = NULL;
        service_frame_type_free( &vifp->dib, cp->frmlvl, cp->addrlvl, cp->errlvl);
        free(cp);
    }

    protocol_reflect(vifp->raw);  /* Which makes it tidy */

}



static void quit(void)
{
    vifstr *vifp;
    pifstr *pifp;

#if DEBUG
    debugstr("quit:\n");
#endif
    callback_remove();

    /* This should ensure all cards are passive with no registered clients (protocols) */

    ITERATE_OVER_ALL_VCARDS
    {
        _kernel_swi_regs r;

        r.r[0] = (int) &vifp->dib;
        r.r[1] = Service_DCIDriverStatus;
        r.r[2] = DriverStatus_Terminating;
        r.r[3] = DCI_VERSION_NUMBER;

        _kernel_swi(XOS_Bit + OS_ServiceCall, &r, &r);
    }

    /* But just in case, manually enforce */

    ITERATE_OVER_ACTIVE_VCARDS
    {
        drop_all_clients(vifp);
    }

    ITERATE_OVER_ACTIVE_PCARDS
    {
        /* just make sure card isn't up */
        if (TST(UP))
        {
#if DEBUG
            debugstr("\n\ninterface is still up after that - a tad confused\n");
#endif
            bringdown(pifp);         /* Dont want interrupts, for example! */
        }
    }

    /* cant do ITERATE_OVER_ALL_CARDS as this is destructive */

    for (pifp = all_pcards; pifp != NULL; )
    {
        pifstr *next = pifp->all_next;

        free_pifp_memory(pifp);

        pifp = next;
    }

#if HANDLE_POCKET

    _kernel_osfind(0, (char *) parallel_file_handle);

#endif

    if (onekdata != NULL)
        free(onekdata);

    close_mbuf_manager_session();

#if DEBUG

    if (debugums != NULL)
    {
        free(debugums);
        debugums = NULL;
    }

#endif


    return;
}


/*****************************************************************************/

/*
init_debug
onekdata
cmos_parse_options
parallel port opening
locate cards
env variable writing
callback announcement
*/

extern _kernel_oserror *initialise(char *cmd_tail, int pbase, void *pw)
{
    _kernel_oserror *ep;
    _kernel_swi_regs r;

    UNUSED(pbase);
    UNUSED(cmd_tail);

    module_wsp = pw;

    initialise_time = time(NULL);

#if DEBUG

    ep = makeerror(NOCARDUNIT, init_debug());
    if (ep != NULL)
        return ep;

    debugstr("Initialising\n");
#endif

    logmsg(NOCARDUNIT, TITLE_STRING " messages can appear here");


    if ((onekdata = malloc(1024)) == NULL)
    {
#if DEBUG
        debugstr("Failed to allocate onekdata\n");
#endif
        return makeerror(NOCARDUNIT, ENOMEM);
    }

    /* If the card does not support COMS configuration then fake it from the options string */
    /* ? Might wish to always provide this as an override? */

#if HAS_CMOS == 0

    if ((ep = cmos_parse_options_string()) != NULL)
    {
#if DEBUG
        debugstr("Error parsing options string:\n");
        debugstrcr(ep->errmess);
#endif
        return ep;
    }
#endif


#if HANDLE_POCKET

    if ((parallel_file_handle = _kernel_osfind(0x80, PDEVICE)) <= 0)
    {
#if DEBUG
        debugstr("error opening parallel port\n");
#endif
        return makeerror(NOCARDUNIT, ENOPARPORT);
    }

    if (_kernel_swi(XOS_Bit + Parallel_HardwareAddress, &r, &r) != 0)
    {
#if DEBUG
        debugstr("error getting parallel port address\n");
#endif
        return makeerror(NOCARDUNIT, EBADPARPORT);
    }

    if (r.r[0] == 0)
    {
#if DEBUG
        debugstr("bad parallel port\n");
#endif
        return makeerror(NOCARDUNIT, EBADPARPORT);
    }

    portbase = (volatile unsigned char *) r.r[0];

#endif /* HANDLE_POCKET */

    ep = locate_cards();

    /* If the mbuf manager is not present, then we are not affected */
    /* until an attempt is made to send or receive packets. */

    if (ep == NULL && mbuf_manager_present() )
        ep = open_mbuf_manager_session();

#if DEBUG
    if (ep != NULL)
        debugstr(ep->errmess);
#endif

    if (ep != NULL || number_of_vcards == 0)
        return ep;

    atexit(&quit);

    r.r[0] = (int)"Inet$" CARDSTR_CAP "Count";
    r.r[1] = (int)&number_of_vcards;
    r.r[2] = 4;
    r.r[3] = 0;
    r.r[4] = 1;

    ep = _kernel_swi(XOS_Bit | OS_SetVarVal, &r, &r);

    if (ep != NULL)
        return ep;


    r.r[0] = (int) MagicDCI2Variable;
    r.r[1] = (int) (CARDSTR "0");
    r.r[2] = 3;
    r.r[3] = 0;
    r.r[4] = 0;

    ep = _kernel_swi(XOS_Bit | OS_SetVarVal, &r, &r);

    if (ep != NULL)
        return ep;

    /* Issues Service_DCIDriverStatus for each unit from a callback */

    ep = callback_announce(&utovifp[0], sizeof(utovifp) / sizeof(utovifp[0]));

    if (ep == NULL)
        debugstr("Successful initialisation\n");
    else
        debugstr(ep->errmess);

    return ep;
}


/*****************************************************************************
 *
 * SWI handler
 *
 * Note that we complicate things a little by providing initialise-determined
 * SWIs for the statistics interface. Currently (63-unit) is the basic
 * approach being tried.
 */


extern _kernel_oserror *swi_handler(unsigned int swinum, _kernel_swi_regs *regs, void *pw)
{
    _kernel_oserror *ep = NULL;

    switch (swinum)
    {
        case 0:             /* DCIVersion */
        {
            args_DCIVersion *args = (args_DCIVersion *) regs;

            debugstr("Ether3_DCIVersion\n");

            if (args->flags != 0)
            {
                debugstr("bad flags value\n");
                ep = makeerror(NOCARDUNIT, EBADARGS);
                break;
            }

            args->dci_version = DCI_VERSION_NUMBER;
        }
        break;


        case 1:             /* Inquire */
        {
            args_Inquire *args = (args_Inquire *) regs;

            debugstr("Ether3_Inquire\n");

            if (args->flags != 0)
            {
                debugstr("bad flags value\n");
                ep = makeerror(NOCARDUNIT, EBADARGS);
                break;
            }

            if (args->unit >= number_of_vcards || utovifp[args->unit] == NULL)
            {
                debugstr("not a valid unit\n");
                ep = makeerror(NOCARDUNIT, ENOTANIF);
                break;
            }

            args->features = utovifp[args->unit]->dib.dib_inquire;
        }
        break;


        case 2:             /* GetNetworkMTU */
        {
            args_GetNetworkMTU *args = (args_GetNetworkMTU *) regs;

            debugstr("Ether3_GetNetworkMTU\n");

            if (args->flags != 0)
            {
                debugstr("bad flags\n");
                ep = makeerror(NOCARDUNIT, EBADARGS);
                break;
            }

            if (args->unit >= number_of_vcards || utovifp[args->unit] == NULL)
            {
                debugstr("not a valid unit\n");
                ep = makeerror(NOCARDUNIT, ENOTANIF);
                break;
            }

            args->MTU = ETHERMTU;
        }
        break;


        case 3:             /* SetNetworkMTU */
        {
            args_GetNetworkMTU *args = (args_GetNetworkMTU *) regs;

            debugstr("Ether3_SetNetworkMTU\n");

            if (args->flags != 0)
            {
                debugstr("bad flags\n");
                ep = makeerror(NOCARDUNIT, EBADARGS);
                break;
            }

            if (args->unit >= number_of_vcards || utovifp[args->unit] == NULL)
            {
                debugstr("not a valid unit\n");
                ep = makeerror(NOCARDUNIT, ENOTANIF);
                break;
            }

            /* Ethernet does not permit a changing of the underlying MTU */

            ep = makeerror(args->unit, ENOTTY);
        }
        break;


        case 4:             /* Transmit */
        {
            args_Transmit *args = (args_Transmit *) regs;
            pifstr *pifp = NULL;         /* Assert not necessary though */
            vifstr *vifp;
            const register int unit = args->unit;
            struct mbuf *tp, *tp2;
	    int need_to_free = 1;

#if VERBOSEDEBUG
            debugstr("Ether3_Transmit\n");
#endif

            if (! seen_mbuf_manager)
            {
                debugstr("transmit: not seen mbuf manager\n");
                ep = makeerror(NOCARDUNIT, ENOMEMMAN);
            }

            else if ( (args->flags & Transmit_InvalidBits) != 0 )
            {
                debugstr("transmit: invalid flag bits set\n");
                ep = makeerror(NOCARDUNIT, EBADARGS);
            }

            else if (unit >= number_of_vcards || (vifp = utovifp[unit]) == NULL)
            {
                debugstr("transmit: unit number not valid\n");
                ep = makeerror(NOCARDUNIT, ENOTANIF);
            }
            else
            {
                pifp = vifp->raw;

                if ( (pifp->flags & FLAG_FAULTY) != 0)
                {
                    debugstr("transmit: interface is faulty\n");
                    ep = makeerror(args->unit, ENETDOWN);
                    STAT32(SEND_ERRORS, 1);
                }

                else if ( (pifp->flags & FLAG_DOWN) != 0)
                {
                    debugstr("transmit: interface is down\n");
                    ep = makeerror(args->unit, ENETDOWN);
                    STAT32(SEND_ERRORS, 1);
                }

                else if ( FRMLVLOF(args->frmlvl) != 0 )
                {
                    debugstr("transmit: bad frame level value\n");
                    ep = makeerror(args->unit, EBADARGS);
                    STAT32(SEND_ERRORS, 1);
                }
            }


#if CHECK_TRANSMIT_LENGTHS

            for (tp = args->data; ep == NULL && tp != NULL; tp = tp->m_list)
                if (m_count_bytes(tp) > ETHERMTU)
                {
                    debugstr("transmit: packet too large\n");
                    STAT32(SENDS_TOO_LARGE, 1);
                    ep = makeerror(unit, EMSGSIZE);
                }

#endif

            if (ep == NULL)
            {
                DISABLE_IRQS;           /* Sets const old_irqs to previous state */

                if (active)
                {
                    /* Eventually, should retain data for later scheduling */

                    debugstr("transmit: already actuve - tranmission blocked\n");
                    STAT32(SENDS_BLOCKED, 1);
                    ep = makeerror(args->unit, ETXBLOCK);
                }
                else
                {
                    active = 1;

		    need_to_free = 0;

                    for (tp = args->data; ep == NULL && tp != NULL; tp = tp2)
		    {
			tp2 = tp->m_list;

                        ep = transmit(vifp, args, tp, old_irqs);
#if DEBUG
			if (ep)
			{
			    debugstr("\n@@@@ Transmit did not send all packets, errno = ");
			    debughex(ep->errnum);
			    debugstr("\n\n");
			}
#endif
		    }

                    /* Give the interrupt routines a chance */

                    if (want_service)
                        process(old_irqs);

                    active = 0;
                }

                RESTORE_IRQS;
            }

	    if (need_to_free && (args->flags & Transmit_ProtocolFrees) == 0)
	    {
                for (tp = args->data; tp != NULL; )
                {
                    struct mbuf *temp = tp->m_list;
                    m_freem(tp);
                    tp = temp;
                }
	    }
        }
        break;

        case 5:         /* Filter */
        {
            args_Filter *args = (args_Filter *) regs;

#if VERBOSEDEBUG
            debugstr("Ether3_Filter\n");
            debugstr("flags      "); debughexcr((int)args->flags);
            debugstr("unit       "); debughexcr(args->unit );
            debugstr("frmlvl     "); debughexcr(args->frmlvl);
            debugstr("addrlvl    "); debughexcr(args->addrlvl);
            debugstr("errlvl     "); debughexcr(args->errlvl);
            debugstr("handle     "); debughexcr(args->protocol_handle);
            debugstr("rcv fn     "); debughexcr((int)args->rcv_fn);
#endif

            if (! seen_mbuf_manager)
            {
                debugstr("not seen mbuf manager\n");
                ep = makeerror(NOCARDUNIT, ENOMEMMAN);
            }

            else if (
                (args->flags & Filter_InvalidBits) != 0 ||
                (FRMLVLOF(args->frmlvl) < FRMLVL_E2SPECIFIC) ||
                (FRMLVLOF(args->frmlvl) > FRMLVL_IEEE) ||
                (FRMLVLOF(args->frmlvl) != FRMLVL_E2SPECIFIC && FRMTYPOF(args->frmlvl) != 0) ||
                (FRMLVLOF(args->frmlvl) == FRMLVL_E2SPECIFIC && FRMTYPOF(args->frmlvl) == 0) ||
                args->addrlvl > ADDRLVL_PROMISCUOUS ||
                args->errlvl > ERRLVL_ERRORS
               )
            {
                debugstr("Filter fails basic parameters check\n");

                ep = makeerror(NOCARDUNIT, EBADARGS);
            }

            else if (args->unit >= number_of_vcards || utovifp[args->unit] == NULL)
            {
                debugstr("not a valid unit\n");
                ep = makeerror(NOCARDUNIT, ENOTANIF);
            }

            else        /* Large operation, so seperate function */
            {
                ep = (args->flags & Filter_ClaimRelease) != 0 ? filter_release(args)
                                                              : filter_claim(args);
            }
        }
        break;

        case 6:         /* Stats */
        {
            static dci4_statistics implemented =
            {
                /* 1 bits for implemented, 0 bits for not implemented */

                0xff,              /* unsigned char st_interface_type */
                0xff,              /* unsigned char st_link_status */
                0xff,              /* unsigned char st_link_polarity */
                0x0,               /* unsigned char st_blank1 */
                0x0,               /* unsigned long st_link_failures */
                0x0,               /* unsigned long st_network_collisions */

                0x0,               /* unsigned long st_collisions */
                0xffffffff,        /* unsigned long st_excess_collisions */
                0x0,               /* unsigned long st_hearbeat_failure */
                0x0,               /* unsigned long st_not_listening */
                0xffffffff,        /* unsigned long st_tx_frames */
                0xffffffff,        /* unsigned long st_tx_bytes */
                0xffffffff,        /* unsigned long st_tx_general_errors */
                0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,        /* unsigned char st_last_dest_addr[8] */

                0x0,               /* unsigned long st_crc_failures */
                0x0,               /* unsigned long st_frame_alignment_errors */
                0x0,               /* unsigned long st_dropped_frames */
                0x0,               /* unsigned long st_runt_frames */
                0x0,               /* unsigned long st_overlong_frames */
                0x0,               /* unsigned long st_jabbers */
                0x0,               /* unsigned long st_late_events */
                0xffffffff,        /* unsigned long st_unwanted_frames */
                0xffffffff,        /* unsigned long st_rx_frames */
                0xffffffff,        /* unsigned long st_rx_bytes */
                0xffffffff,        /* unsigned long st_rx_general_errors */
                0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 /* unsigned char st_last_src_addr[8] */
            };

            vifstr *vifp;
            args_Stats *args = (args_Stats *) regs;

            debugstr("Ether3_Stats\n");

            if (args->flags & Statistic_InvalidBits)
            {
                debugstr("swi_statistic fails basic flags test\n");
                ep = makeerror(NOCARDUNIT, EBADARGS);
            }

            else if (args->unit >= number_of_vcards || (vifp = utovifp[args->unit]) == NULL)
            {
                debugstr("not a valid unit\n");
                ep = makeerror(NOCARDUNIT, ENOTANIF);
            }
            else if (args->flags & Statistic_StatisticsRead)
            {   /* Read actual values */
                pifstr *pifp = vifp->raw;

                debugstr("Writing simple statistics to user structure\n");

                memset(args->stats, 0, sizeof(dci4_statistics));
                stats_ping_pong(vifp);



                args->stats->st_interface_type =
                    LinkType_10Base5_10Base2_10BaseT;

                /* Link status
                 * We want to return whether the virtual interface is up, not
                 * whether the card is up (which it will be if *either* of its
                 * virtual interfaces is up)
                 */
                args->stats->st_link_status =
                    (TST(FAULTY) ? LinkStatus_Faulty : LinkStatus_Good) |
                    (VTST(UP) ? LinkStatus_Up : LinkStatus_Down) |
                    (VTST(PROMIS_RX) ? 3 : (VTST(MULTI_RX) ? 2 : (VTST(BROAD_RX) ? 1 : 0)) ) << 2;
                args->stats->st_link_polarity =
                    1;      /* Polarity correct */
                args->stats->st_excess_collisions =
                    vifp->accumulated.int32[SEND_MAX_COLLISIONS];
                args->stats->st_tx_frames =
                    vifp->accumulated.int32[PACKETS_SENT];
                args->stats->st_tx_bytes =
                    vifp->accumulated.int64[BYTES_SENT * 2 + 1] ? 0xffffffff : vifp->accumulated.int64[BYTES_SENT * 2];
                args->stats->st_tx_general_errors =
                    vifp->accumulated.int32[SEND_ERRORS];
                args->stats->st_rx_frames =
                    vifp->accumulated.int32[PACKETS_RECEIVED];
                args->stats->st_rx_bytes =
                    vifp->accumulated.int64[BYTES_RECEIVED * 2 + 1] ? 0xffffffff : vifp->accumulated.int64[BYTES_RECEIVED * 2];
                args->stats->st_unwanted_frames =
                    vifp->accumulated.int32[UNDELIVERED_PACKETS];
                args->stats->st_rx_general_errors =
                    vifp->accumulated.int32[RECEIVE_ERRORS];
            }

            else
            {   /* Read implemented values */
                debugstr("Returning masks for implemented simple statistics\n");
                memcpy(args->stats, &implemented, sizeof(dci4_statistics));
            }

        }
        break;


        default:
        {
            /* Cater for statistic SWI choices */

            args_StatisticAction *args = (args_StatisticAction *) regs;
            const unsigned int unit = 63u - swinum;
#if 0
            debugstr("Wild swi - checking for stats\n");
#endif
            if (unit >= MAXUNITS || utovifp[unit] == NULL || args->action > SA_READ)
            {
                debugstr("wild swi does not correspond to a card - returning an error\n");
                ep = makeerror(NOCARDUNIT, ENOTTY);
            }
            else
            {
#if 0
                debugstr("Ether3_ExtendedStatistics type swi\n");
#endif
                ep = ( * (args->action == SA_DESCRIBE ? &statistic_describe : &statistic_read) )
                    (args, utovifp[unit]);
            }
            break;
        }
    }


#if DEBUG
    if (ep == NULL)
    {
#if VERBOSEDEBUG
        debugstr("SWI completed okay\n\n*****************************************************************************\n\n");
#endif
    }
    else
    {
        debugstr("SWI Failed! Error number: ");
        debughex(ep->errnum);
        debugstr("\nError message: ");
        debugstr(ep->errmess);
        debugstr("\n\n*****************************************************************************\n\n");
    }
#endif

    return ep;

    UNUSED(pw);
}


extern void service_call_handler(register int sn, _kernel_swi_regs *r)
{
    debugstr("Service call ");
    debughexcr(sn);

    switch (sn)
    {

        case Service_EnumerateNetworkDrivers:
        {
            vifstr *vifp;

            ITERATE_OVER_ALL_VCARDS
            {
                args_EnumerateNetworkDrivers *args = (args_EnumerateNetworkDrivers *) r;
                struct chaindib *dn = (struct chaindib *) malloc(sizeof(struct chaindib));

                if (dn != NULL)
                {
                    debugstr("Adding entry to enumerate drivers list\n");

                    dn->chd_next = args->list;
                    args->list = dn;
                    dn->chd_dib = &vifp->dib;
                }
            }
        }
        break;

        case Service_DCIProtocolStatus:
        {
            DISABLE_IRQS;

            args_DCIProtocolStatus *args = (args_DCIProtocolStatus *) r;
            vifstr *vifp;

            if (args->action != ProtocolStatus_Terminating)
            {
                debugstr("Protocol starting - nothing for me to do\n");
                RESTORE_IRQS;
                break;
            }

            debugstr("Protocol dying - searching current clients\n");

            ITERATE_OVER_ALL_VCARDS      /* ALL instead of ACTIVE to be paranoid? #### */
            {
                struct client **clpp = &vifp->clients, *clp;
                int reflect = 0;

                while ((clp = *clpp) != NULL)
                {
                    if (clp->protocol_handle == args->protocol_handle)
                    {
                        debugstr("Deleting a standard client\n");

                        reflect = 1;
                        *clpp = clp->next;
                        free(clp);
                    }
                    else
                        clpp = &clp->next;
                }

                if ( vifp->ether2_hole != NULL && vifp->ether2_hole->protocol_handle == args->protocol_handle)
                {
                    debugstr("Deleting ether2 sink/monitor client\n");

                    free(vifp->ether2_hole);
                    vifp->ether2_hole = NULL;
                    reflect = 1;
                }

                if (vifp->ieee8023_hole != NULL &&
                    vifp->ieee8023_hole->protocol_handle == args->protocol_handle)
                {
                    debugstr("Deleting 802.3 client\n");

                    free(vifp->ieee8023_hole);
                    vifp->ieee8023_hole = NULL;
                    reflect = 1;
                }

                if (reflect)
                    protocol_reflect(vifp->raw);
            }

            RESTORE_IRQS;
        }
        break;

        case Service_StatisticEnumerate:
        {
            args_StatisticEnumerate * args = (args_StatisticEnumerate *) r;
            vifstr *vifp;

            ITERATE_OVER_ALL_VCARDS
            {
                struct spctl *sp = (struct spctl *) malloc(sizeof(struct spctl));

                if (sp != NULL)
                {
                    *sp = vifp->spctl;
                    sp->next = args->next;
                    args->next = sp;
                }
            }

        }
        break;

        case Service_MbufManagerStatus:
        {
            if (r->r[0] == MbufManagerStatus_Started)
            {
                /* Use side-effect of open... to set flag */

                if (! seen_mbuf_manager)
                    (void) open_mbuf_manager_session();
            }
        }
        break;

    }

    return;
}

extern _kernel_oserror *cli_dma(char *cargp, int spare)
{
    pifstr *pifp;
    u_char buffer[32];
    u_char buffer2[32];
    int i;
    int start;
    int length;

    start = RAMSTART;
    length = 32;

    for (i=0; i < sizeof(buffer); i++)
    {
	buffer[i] = rand() & 0xff;
    }

    ITERATE_OVER_ALL_PCARDS
    {
	pifp->chip->RSAR0 = LO(start);
	pifp->chip->RSAR1 = HI(start);

	pifp->chip->RBCR0 = LO(length);
	pifp->chip->RBCR1 = HI(length);

	pifp->chip->CR = my_cr_RWRITE;

	for(i=0; i < 32; i+= 2)
	{
	    unsigned int d = (buffer[i+1] << 8) + buffer[i];

	    printf("0x%04x, ", d);

	    pifp->chip->DATA = d;
	}

	printf("\nCR = 0x%x, DMA ptr = 0x%02x%02x\n", pifp->chip->CR, pifp->chip->CRDR1, pifp->chip->CRDR0);

	pifp->chip->RSAR0 = LO(start);
	pifp->chip->RSAR1 = HI(start);

	pifp->chip->RBCR0 = LO(length);
	pifp->chip->RBCR1 = HI(length);

	pifp->chip->CR = my_cr_RREAD;

	for(i=0; i < 32; i+= 2)
	{
	    unsigned int d = pifp->chip->DATA;

	    d &= 0xffff;

	    printf("0x%04x, ", d);

	    buffer[i] = d & 0xff;
	    buffer[i+1] = (d >> 8);
	}

	printf("\nCR = 0x%x, DMA ptr = 0x%02x%02x\n", pifp->chip->CR, pifp->chip->CRDR1, pifp->chip->CRDR0);
    }

    return NULL;
}

extern _kernel_oserror *cli_reg(char *cargp, int spare)
{
    pifstr *pifp;
    char *item;
    int reg, value;
    int i;

    for(i=0; cargp[i] >= 32; i++)
	;

    cargp[i] = 0;

    ITERATE_OVER_ALL_PCARDS
    {
	item = strtok(cargp, " ");

	reg = (int) strtol(item, 0, 0);
	item = strtok(NULL, " ");

	if (item)
	{
	    value = (int) strtol(item, 0, 0);

	    printf("Setting register %d (0x%x) to value %d (0x%x)\n", reg, reg, value, value);

	    pifp->chip->regs[reg].bytes[0].reg = value;
	}
	else
	{
	    value = pifp->chip->regs[reg].bytes[0].reg;
	    printf("Register %d (0x%x) reads as %d (0x%x)\n", reg, reg, value, value);
	}
    }

    return NULL;
}

extern _kernel_oserror *cli_debug(char *cargp, int spare)
{
    int i, j;
    pifstr *pifp;
#if DEBUG
    debug_despool();
#endif
    ITERATE_OVER_ALL_PCARDS
    {
	u_int dsr;

	pifp->chip->CR = 0;

	printf("Page 0:\n");
	for(j=0; j < 16; j++)
	{
	    printf("Reg %2d: 0x%02x\n", j, pifp->chip->regs[j].bytes[0].reg);
	}

	pifp->chip->CR = my_cr_PS0;

	printf("Page 1:\n");
	for(j=0; j < 16; j++)
	{
	    printf("Reg %2d: 0x%02x\n", j, pifp->chip->regs[j].bytes[0].reg);
	}

	pifp->chip->CR = 0;

	dsr = pifp->chip->DSR;

	printf("Diagnostic register = 0x%02x\n", dsr);
	if (dsr & my_dsr_20M)
	    printf("20MHz VCO OK.  ");
	if (dsr & my_dsr_TCOK)
	    printf("Transmit clock OK.  ");
	if (dsr & my_dsr_POL)
	    printf("UTP polarity inverted.  ");
	if (dsr & my_dsr_JAB)
	    printf("UTP in jabber state.  ");
	if (dsr & my_dsr_LNK)
	    printf("UTP link active.  ");
	if (dsr & my_dsr_LBK)
	    printf("In loopback mode.  ");
	if (dsr & my_dsr_UTP)
	    printf("UTP is selected.  ");

	printf("\n");

	printf("IOMD interupts: status = %02x, request = %02x, mask = %02x\n",
	       *IOMD_IRQB_STATUS,
	       *IOMD_IRQB_REQUEST,
	       *IOMD_IRQB_MASK);
    }

    return NULL;
}

/*****************************************************************************
 *
 * module_cli_handler:
 *
 * Module CLI handler: despatch any *commands that we provide. Note that the
 * string passed MUST NOT BE OVERWRITTEN.
 */

extern _kernel_oserror *cli_handler(char *arg_string, int arg_count, unsigned int cmd_no, void *pw)
{
    typedef _kernel_oserror *(*fn)(char *arg_string, int arg_count);

    static fn fns[] =
    {
#if HAS_CMOS
        cli_configure,
#endif
        cli_info,
        cli_selftest

#if 1
        , cli_debug
	, cli_reg
	, cli_dma
	, cli_buffer
#endif

    };

    if (cmd_no <= sizeof(fns) / sizeof(fn))
        return (*fns[cmd_no]) (arg_string, arg_count);
    else
    {
        debugstr("invalid cli command number\n");
        return makeerror(NOCARDUNIT, EBADARGS);
    }

    UNUSED(pw);
}



/* eof iface.c */
