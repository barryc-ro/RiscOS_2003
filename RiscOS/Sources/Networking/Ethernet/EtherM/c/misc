/* misc.c -*-C-*- */

#include "all.h"

#include <ctype.h>

/*****************************************************************************/

/* DEBUGGING MESSAGES SECTION */

#if DEBUG

extern int init_debug(void)
{
    debugums = (debugum *) calloc(MAXDEBUG, sizeof(debugum)); /* Zeroes it as well! */

    if (debugums == NULL)
        return ENOMEM;

    debug_index = 0;

    return ENOERR;
}

#define debug_empty     0
#define debug_hex       1
#define debug_str       2
#define debug_dec       3
#define debug_hexcr     4
#define debug_deccr     5
#define debug_strcr     6

extern void debugstr(char *str)
{
    DISABLE_IRQS;

    debugum *dp = &debugums[debug_index];

    debug_index += 1;

    if (debug_index >= MAXDEBUG)
        debug_index = 0;

    dp->type = debug_str;
    dp->x.string = str;

#if ACTIVE_DEBUG
    printf("%s", str);
#endif

    RESTORE_IRQS;
}

extern void debugstrcr(char *str)
{
    DISABLE_IRQS;

    debugum *dp = &debugums[debug_index];

    debug_index += 1;

    if (debug_index >= MAXDEBUG)
        debug_index = 0;

    dp->type = debug_strcr;
    dp->x.string = str;

#if ACTIVE_DEBUG
    printf("%s\n", str);
#endif

    RESTORE_IRQS;
}

extern void debughex(int number)
{
    DISABLE_IRQS;

    debugum *dp = &debugums[debug_index];

    debug_index += 1;

    if (debug_index >= MAXDEBUG)
        debug_index = 0;

    dp->type = debug_hex;
    dp->x.number = number;

#if ACTIVE_DEBUG
    printf("0x%08x", number);
#endif

    RESTORE_IRQS;
}

extern void debughexcr(int number)
{
    DISABLE_IRQS;

    debugum *dp = &debugums[debug_index];

    debug_index += 1;

    if (debug_index >= MAXDEBUG)
        debug_index = 0;

    dp->type = debug_hexcr;
    dp->x.number = number;

#if ACTIVE_DEBUG
    printf("0x%08x\n", number);
#endif

    RESTORE_IRQS;
}

extern void debugdec(int number)
{
    DISABLE_IRQS;

    debugum *dp = &debugums[debug_index];

    debug_index += 1;

    if (debug_index >= MAXDEBUG)
        debug_index = 0;

    dp->type = debug_dec;
    dp->x.number = number;

#if ACTIVE_DEBUG
    printf("%d", number);
#endif

    RESTORE_IRQS;
}

extern void debugdeccr(int number)
{
    DISABLE_IRQS;

    debugum *dp = &debugums[debug_index];

    debug_index += 1;

    if (debug_index >= MAXDEBUG)
        debug_index = 0;

    dp->type = debug_deccr;
    dp->x.number = number;

#if ACTIVE_DEBUG
    printf("%d\n", number);
#endif

    RESTORE_IRQS;
}

extern void debug_despool(void)
{
    int ix = debug_index + 1;

    printf("Debug spool output: \n\n");

    while (ix != debug_index)
    {
        DISABLE_IRQS;

        debugum *dp;

        if (ix >= MAXDEBUG)
        {
            ix = 0;
            continue;
        }

        dp = &debugums[ix];

        switch (dp->type)
        {
        case debug_str:
            printf("%s", dp->x.string);
            break;

        case debug_hex:
            printf("0x%08x", dp->x.number);
            break;

        case debug_dec:
            printf("%d", dp->x.number);
            break;

        case debug_strcr:
            printf("%s\n", dp->x.string);
            break;

        case debug_hexcr:
            printf("0x%08x\n", dp->x.number);
            break;

        case debug_deccr:
            printf("%d\n", dp->x.number);
            break;
        }

        ix += 1;

        RESTORE_IRQS;
    }


    printf("\n\nEnd of debug spool\n\n\n");
}

extern void decode_ifp_flags(unsigned long x)
{
#define T(f,m)  if ( x & f ) debugstr(m)

#if VERBOSEDEBUG

    debugstr("Decoding flags:\n");

    T(FLAG_IEEE_SINK, "IEEE_SINK ");
    T(FLAG_IEEE_MONITOR, "IEEE_MONITOR ");
    T(FLAG_ETHER2_SINK, "ETHER2_SINK ");
    T(FLAG_ETHER2_MONITOR, "ETHER2_MONITOR ");

    debugstr("| ");

    T(FLAG_ERROR_RX, "ERROR_RX ");
    T(FLAG_MULTI_RX, "MULTI_RX ");
    T(FLAG_PROMIS_RX, "PROMIS_RX ");
    T(FLAG_BROAD_RX, "BROAD_RX ");
    T(FLAG_ETHER2_RX, "ETHER2_RX ");
    T(FLAG_IEEE_RX, "IEEE_RX ");

    debugstr("| ");

    T(FLAG_MULTI_ACTIVE, "MULTI_ACTIVE ");
    T(FLAG_PROMIS_ACTIVE, "PROMIS_ACTIVE ");

    debugstr("| ");

    T(FLAG_DOWN, "DOWN ");
    T(FLAG_FAULTY, "FAULTY ");
    T(FLAG_UP, "UP ");
    T(FLAG_TESTING, "TESTING ");
    T(FLAG_JUST_TESTED, "JUST_TESTED ");

    debugstr("| ");

    T(FLAG_8005, "8005 ");
    T(FLAG_8004, "8004 ");

    debugstr("| ");

    T(FLAG_ENABLED, "ENABLED ");
    T(FLAG_IGNORETEST, "IGNORETEST ");
    T(FLAG_LIVEWIRETEST, "LIVEWIRETEST ");
    T(FLAG_VERBOSE, "VERBOSE ");
    T(FLAG_HARDWARE_VALID, "HARDWARE_VALID ");

    debugstr("\n");

#endif

#undef T
}

#undef debug_empty
#undef debug_dec
#undef debug_hex
#undef debug_str

#endif /* DEBUG */

/* END OF DEBUGGING MESSAGES SECTION */

/*****************************************************************************/


/*
 * Update the table mapping unit number to ifp number.
 */

extern void update_utovifp_mapping(void)
{
    DISABLE_IRQS;

    vifstr **table, *vifp;
    int i;

    for (i = MAXUNITS, table = &utovifp[0]; i >= 0; table += 1, i -= 1)
        *table = NULL;

    table = &utovifp[0];

    ITERATE_OVER_ALL_VCARDS
    {
        table[vifp->unit] = vifp;
    }

    RESTORE_IRQS;
}




extern int caseless_strcmp(char *a, char *b)
{
    int d;

    while (*a || *b)
    {
        d = toupper(*(a++)) - toupper(*(b++));
        if (d)
            return d;
    }

    return 0;
}



/*
 * calculate the Autodin II CRC for the passed data
 */

#define NBBY 8
#define POLYNOMIAL              0x04c11db7

extern u_int calc_crc(u_char *data, int datalen)
{
    u_int crc, swap = 0;
    int i, j;
    static u_char retc[sizeof(crc)];

    crc = ~0;
    for( i = 0; i < datalen; ++i )
    {
        u_char next = *data++;
        for( j = 0; j < NBBY; ++j )
        {
            if( ((u_int)next & 1u) ^ (crc >> 31) )
                crc = (crc << 1) ^ POLYNOMIAL;
            else
                crc <<= 1;
            next >>= 1;
        }
    }

    /* reverse, nibble swap & complement the result */
    for( i = 0; i < (NBBY * sizeof(crc)); ++i )
    {
        swap <<= 1;
        swap |= ((crc & 0x01) ? 1 : 0);
        crc >>= 1;
    }

    for( i = 0; i < sizeof(crc); ++i)
    {
        retc[i] = (u_char) ~(swap & 0xff);
        swap >>= NBBY;
    }

    return *(u_int*)retc;
}

/*****************************************************************************
 *
 * decl_interrupts:
 *
 * Register an interrupt handler with RISC OS for the specified card. Also
 * enables podule interrupts.
 */

extern _kernel_oserror *decl_interrupts(pifstr *ifp)
{
    _kernel_swi_regs r;
    _kernel_oserror *ep;

#if DEBUG
    debugstr("Declaring interupts at ");
    debugdeccr(MONOTIME);
#endif

#if IRQS_IRQV
    r.r[0] = IrqV;
    r.r[1] = (int) &irq_entry;
    r.r[2] = (int) module_wsp;

    if ((ep = _kernel_swi(XOS_Bit + OS_Claim, &r, &r)) == NULL)
    {
        return NULL;
    }

    return ep;
#endif

#if IRQS_DEVICE
    r.r[0] = DEVICE_VECTOR_NUMBER;
    r.r[1] = (int) &irq_entry;
    r.r[2] = (int) module_wsp;

#if HANDLE_PODULES
    r.r[3] = (int) ifp->statr;                                   /* Gets low byte! */
    r.r[4] = RxInt | TxInt;
#endif

    if ((ep = _kernel_swi(XOS_Bit + OS_ClaimDeviceVector, &r, &r)) == NULL)
    {
#if HANDLE_POCKET
        (void)(*(ifp->pport_int_latch));
        enable_irqs_flag(ifp->intr_mask_ptr, ifp->intr_mask_value);
#endif
        return NULL;
    }

    return ep;
#endif

    UNUSED(ifp);
}

/*merge decl ad rem iterrupts to make smaller@@@@*/

/*****************************************************************************
 *
 * rem_interrupts:
 *
 * Remove registered interrupt handler for the specified card. Does not
 * disable podule interrupts; see PRM p95.
 */

extern void rem_interrupts(pifstr *ifp)
{
    _kernel_swi_regs r;

#if IRQS_IRQV
    r.r[0] = IrqV;
    r.r[1] = (int) &irq_entry;
    r.r[2] = (int) module_wsp;
    _kernel_swi(XOS_Bit + OS_Release, &r, &r);
#endif

#if IRQS_DEVICE
    r.r[0] = DEVICE_VECTOR_NUMBER;
    r.r[1] = (int) &irq_entry;
    r.r[2] = (int) module_wsp;

#if HANDLE_PODULES
    r.r[3] = (int) ifp->lostatr;                /* Byte access: 8/16 bit independent ? @@@@ */
    r.r[4] = RxInt | TxInt;
#endif

    _kernel_swi(XOS_Bit + OS_ReleaseDeviceVector, &r, &r);
#endif

    UNUSED(ifp);
}

/*****************************************************************************
 *
 * Generate an error for returning.
 *
 * If the error number is zero, then there is no error and NULL is returned,
 * else we generate an error block with our static data space. Rare to actually
 * have errors.
 */

#if 0
extern _kernel_oserror *old_makeerror(int unit, int error)
{
#define err_mess        (error < E_MAXIMUM_ERROR ? ea_errmesses[error] : (char *)error)
#define err_num         (error < E_MAXIMUM_ERROR ? error : ESW)

    char *cp;

    if (error == 0)
        return NULL;    /* Specifically */

    cp = &errblk.errmess[0];
    *cp = 0;

    if (unit != NOCARDUNIT)
    {
        sprintf(cp, CARDSTR "%c: ", unit + '0');
        cp += strlen(cp);
    }

    strcat(cp, err_mess);
    errblk.errnum = err_num + EA_ERROR_BASE;

    sprintf(logstr, "unit %d, errno %d: %s\n", unit, err_num, &errblk.errmess[0]);


    return &errblk;

#undef err_mess
#undef err_num
}
#endif

extern _kernel_oserror *makeerror(int unit, int error)
{
    if (error == ENOERR)
        return NULL;            /* Specific quick exit */

    {
        DISABLE_IRQS;

        char *cp = &errblk.errmess[0], *cp2;

        debugstr("Generate error for ");
        debughexcr(error);

        *cp = 0;

        if (unit != NOCARDUNIT)
        {
            /* CAUTION: This assumes that CARDSTR is two characters long */
            cp[0] = CARDSTR [0];
            cp[1] = CARDSTR [1];
            cp2 = cp + 2;
            if (unit > 9)
                *cp2++ = unit / 10 + '0';
            *cp2++ = unit % 10 + '0';
            *cp2++ = ':';
            *cp2++ = ' ';
            *cp2 = 0;
        }

        switch (error)
        {
            case EINVAL:
                cp2 = "Generally invalid arguments";
                break;

            case ENXIO:
                cp2 = "No such unit";
                break;

            case ENOTTY:
                cp2 = "Illegal operation";
                break;

            case ENETDOWN:
                cp2 = "Network hardware is down";
                break;

            case EMSGSIZE:
                cp2 = "Frame length > MTU";
                break;

            case ENOBUFS:
            case ENOMEM:
                cp2 = "Not enough mbufs";
                error = ENOBUFS;        /* Remap ENOMEM now */
                break;

            case EPERM:
                cp2 = "Trying to free another protocol's claim";
                break;

            case ETXBLOCK:
                cp2 = "Transmission blocked";
                break;

            case ENOTAVAIL:
                cp2 = "Frame type already claimed";
                break;


            default:
                if (error > 0 && error < E_MAXIMUM_ERROR)
                {
                    cp2 = ea_errmesses[error];
                    error += EA_ERROR_BASE;
                    debugstr("Normal error: ");
                    debugstrcr(cp2);
                }
                else if ( (unsigned) error > 0x20f00)   /* Magic number! */
                {
                    /* If we see this value of number, then we're dealing with */
                    /* a magic error message string embedded statically within the code */
                    cp2 = (char *) error;
                    error = ESW + EA_ERROR_BASE;
                    debugstr("String as error: ");
                    debugstrcr(cp2);
                }
                else
                {
                    debugstr("Unknown error: 0x");
                    debughexcr(error);
                    cp2 = "Unknown error";
                    error = ESW + EA_ERROR_BASE;
                }
        }

        strcat(cp, cp2);

        errblk.errnum = error;

        strcpy(logstr, cp);

        RESTORE_IRQS;
    }

    return &errblk;
}

extern _kernel_oserror *noifperror(void)
{
    return makeerror(NOCARDUNIT, ENOTANIF);
}

extern _kernel_oserror *errorbadcall(void)
{
    return makeerror(NOCARDUNIT, EBADARGS);
}


/*****************************************************************************
 *
 * log:
 *
 * Log a message with the user. Such messages aren't (necessarily) error
 * messages, just something the drivers think the user should be aware of,
 * although internal errors may qualify for reporting via this interface
 * (ie those without any other easy mechanism to get the message back to
 * the user).
 */

#pragma check_printf_formats
extern void logmsg(int unit, char *fmt, ...)
{
    va_list ap;
    va_start(ap, fmt);

    vsprintf(logstr, fmt, ap);
    va_end(ap);

    if (doing_eainfo && !IRQSEMA)
        printf(CARDSTR "%d%s", unit, logstr);

    last_log_was_unknown_rx = 0;	/* If incorrect, set afterwards in rx code */
}
#pragma no_check_printf_formats



/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/


/*
 * This section is derived from dci4/misc/showstat.c - the unused print options
 * have been ripped out to save space.
 */

#if 0
#define HEXPREF     "&"
#else
#define HEXPREF     "0x"
#endif

/*
    Casting macros

    S   Signed
    U   Unsigned

    C   Char
    S   Short
    I   Integer

    P   Pointer
*/

#define SC(x)           ( (  signed char ) (x) )
#define UC(x)           ( (unsigned char ) (x) )
#define SS(x)           ( (  signed short) (x) )
#define US(x)           ( (unsigned short) (x) )
#define SI(x)           ( (  signed int  ) (x) )
#define UI(x)           ( (unsigned int  ) (x) )

#define SCP(x)          ( (  signed char *) (x) )
#define UCP(x)          ( (unsigned char *) (x) )
#define SSP(x)          ( (  signed short*) (x) )
#define USP(x)          ( (unsigned short*) (x) )
#define SIP(x)          ( (  signed int  *) (x) )
#define UIP(x)          ( (unsigned int  *) (x) )


/*****************************************************************************/


static void print_unused(struct stdesc *desc, void *ctx, int verbose)
{
    return;
}



static void print_string(struct stdesc *desc, void *ctx, int verbose)
{
    char *str = (char *) ctx;

    printf("%-55.55s", str);
}



static void print_integer32(struct stdesc *desc, void *ctx, int verbose)
{
    if (desc->format & SIF_BIGENDIAN)
    {
    }
    else
    {
        switch (desc->presentation * 2 + (desc->format & SIF_UNSIGNED))
        {
            case SIP_HEXADECIMAL * 2:
            case SIP_HEXADECIMAL * 2 + SIF_UNSIGNED:
                if ( UIP(ctx) [0] != 0 || verbose)
                    printf(HEXPREF "%08X", UIP(ctx) [0] );
                break;

            case SIP_DECIMAL * 2:
                if ( SIP(ctx) [0] != 0 || verbose)
                    printf("%d", SIP(ctx) [0] );
                break;

            case SIP_DECIMAL * 2 + SIF_UNSIGNED:
                if ( UIP(ctx) [0] != 0 || verbose )
                    printf("%u", UIP(ctx) [0] );
                break;
        }
    }
}


/* We have no 64 bit integer decimal printing supplied, so we decimal */
/* as if hexadecimal presenation was requested */

static void print_integer64(struct stdesc *desc, void *ctx, int verbose)
{
    if (desc->format & SIF_BIGENDIAN)
    {
    }
    else
    {
        switch (desc->presentation * 2 + (desc->format & SIF_UNSIGNED))
        {
            case SIP_HEXADECIMAL * 2:
            case SIP_HEXADECIMAL * 2 + SIF_UNSIGNED:
                printf(HEXPREF "%08X%08X", UIP(ctx) [1], UIP(ctx) [0] );
                break;

            case SIP_DECIMAL * 2:
            case SIP_DECIMAL * 2 + SIF_UNSIGNED:
		if (UIP(ctx) [1] == 0)
		    printf("%u", UIP(ctx) [0]);	/* lsw always unsigned */
                else
		    printf(HEXPREF "%08X%08X", UIP(ctx) [1], UIP(ctx) [0] );
                break;
        }
    }

    verbose = verbose;
}



static void examine_supplier(struct spctl *ctl, int verbose)
{
    typedef void (*type_table_t) (struct stdesc *, void *, int verbose);

    static type_table_t type_table [7] =
    {
        &print_unused,
        &print_unused,          /* &print_boolean, */
        &print_string,
        &print_unused,          /* &print_integer8, */
        &print_unused,          /* &print_integer16, */
        &print_integer32,
        &print_integer64
    };

#define table_size      (sizeof(type_table) / sizeof(type_table[0]))

    unsigned int i;

#if DEBUG
    printf("Examining spctl at 0x%08p\n", ctl);
#endif

/*
    printf("\nModule '%s' is a supplier titled '%s'\n\n%-20.20s: %-59.59s\n",
	   ctl->module,
	   ctl->title,
	   ctl->title,
	   ctl->description);
*/

    for (i = 0; i <= ctl->max_stat; i++)
    {
        struct stdesc desc;
        _kernel_swi_regs r;
        _kernel_oserror *ep;
        void *vp;

        r.r[0] = SA_DESCRIBE;
        r.r[1] = i;
        r.r[2] = i;
        r.r[3] = (int) &desc;
        r.r[4] = sizeof(desc);

        if ( (ep = _kernel_swi(XOS_Bit + ctl->swinumber, &r, &r)) != NULL )
        {
            printf("Error '%s' when describing statistic number %u\n", ep->errmess, i);
            continue;
        }

        if (desc.type >= table_size)
        {
            printf("Statistic type %d not known\n", desc.type);
            continue;
        }

	/* Just skip unused entries */

	if (desc.type == ST_UNUSED)
	    continue;

        if ( (vp = malloc(desc.size)) == NULL )
        {
            printf("Could not obtain %d bytes to read statistic '%s'\n", desc.size, desc.name);
            continue;
        }

        r.r[0] = SA_READ;
        r.r[1] = i;
        r.r[2] = i;
        r.r[3] = (int) vp;
        r.r[4] = desc.size;

        if ( (ep = _kernel_swi(XOS_Bit + ctl->swinumber, &r, &r)) != NULL )
        {
            printf("Error '%s' when reading statistic number %u\n", ep->errmess, i);
            free(vp);
            continue;
        }

	if (r.r[5] != 1)
	{
	    printf("SWI notes processed %d statistics and %d bytes?\n", r.r[5], r.r[6]);
	}

        printf("%-20.20s: ", desc.name);

	if (desc.type >= table_size)
	{
	    printf("Bad statistic type %d\n", desc.type);
	}
	else
	{
	    (*type_table[desc.type]) (&desc, vp, verbose);
	}

        free(vp);

        printf("\n");

    } /* endfor */

    printf("\n");

#undef table_size
}

/* End of the showstat.c hijacked code */

/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/

/*****************************************************************************
 *
 * ea_eainfo:
 *
 * Print out information and statistics on cards present.
 */

extern char *controller_name(pifstr *ifp)
{
    return "Myson-908";
}


extern _kernel_oserror *cli_info(char *cargp, int spare)
{
    int i, j;
    vifstr *vifp;

#if DEBUG

    debug_despool();

#endif

    printf(TITLE_STRING " interface statistics\n\n");

    ITERATE_OVER_ALL_VCARDS
    {
        client *clnt;
        pifstr *pifp = vifp->raw;

        printf(CARDSTR"%d: ", vifp->unit);

        if (!TST(ENABLED))
        {
                printf("DISABLED\n\n");
                fflush(stdout);
                /* It looks like you could use a continue here but the iteration is done with a macro that may not be a loop */
        }
        else
        {

            printf("%s ", controller_name(pifp) );

            printf(FLAVOUR_STRING);

            if ( MULTIPLE_CARDS )
            {
                printf(", slot %d", pifp->slot);
            }

            printf(", %s, hardware address ", TST(FAULTY) ?  "failed selftest" :  (VTST(UP) ?  "up" :  "down") );

#if 0
#if MULTIPLE_CARDS
            printf("%s " FLAVOUR_STRING ", slot %d, %s, hardware address ",
                   controller_name(ifp),
                   ifp->slot,
                   TST(FAULTY) ? "failed selftest" : (TST(UP) ? "up" : "down")
                   );
#else /* MULTIPLE_CARDS */
            printf("%s " FLAVOUR_STRING ", %s, hardware address ",
                   controller_name(ifp),
                   TST(FAULTY) ? "failed selftest" : (TST(UP) ? "up" : "down")
                   );
#endif /* MULTIPLE_CARDS */
#endif
            for (j = 0; j < ETH_ADDRSIZE; j++)
            {
                printf("%02X%s", vifp->etheraddr[j], j + 1 == ETH_ADDRSIZE ? "\n\n" : ":");
            }

            examine_supplier( &vifp->spctl, TST(VERBOSE) );

            if (pifp->tests_failed != 0)
            {
                u_int i, j;
                printf("Failures noted during testing:\n\n");
                for (i = 1u, j = 0; j != 32; j++, i <<= 1)
                    if (pifp->tests_failed & i)
                    {
                        printf("%s\n", ea_errmesses[j]);
                    }
                putchar('\n');
            }

            for (i = 0; i < 3; i += 1)
            {
                char *cp;
                if (i == 0)
                {
                    clnt = vifp->clients;
                    cp = (clnt != NULL && clnt->next == NULL) ? "Standard client:" : "Standard clients:";
                }
                else
                {
                    if (i == 1)
                    {
                        clnt = vifp->ether2_hole;
                        cp = FRMLVLOF(clnt->frmlvl) == FRMLVL_E2SINK ? "Sink client:" : "Monitor client:";
                    }
                    else
                    {
                        clnt = vifp->ieee8023_hole;
                        cp = "IEEE 802.3 client:";
                    }
                }

                if (clnt == NULL)
                    continue;

                printf("%s\n\n", cp);

                for (; clnt != NULL; clnt = clnt->next)
                {
                    printf("Frame = &%04x, ErrLvl=%02x, AddrLvl=%02x\n",
                           FRMTYPOF(clnt->frmlvl), clnt->errlvl, clnt->addrlvl);
                }

                putchar('\n');
            }
#if DEBUG && 0
        {
            static char *strs[4] = {"Specific", "SpecBroad", "SpecBroadMulti", "Promiscuous"};

            printf("Overall client levels:\n             E=%02x, A=%02x, F=%02x\n",
                   vifp->overall_error_level,
                   vifp->overall_addr_level,
                   vifp->overall_frame_level
                   );

            printf("Address matching = %s\n", strs[readconf1(ifp) >> 14]);
            printf("rxptr %x, txptr %x, free %d, in use %d, current %x, end %x\n",
                   readrxptr(ifp),
                   readtxptr(ifp),
                   ifp->tx.free, ifp->tx.inuse_count,
                   ifp->tx.current_ptr,
                   ifp->tx.end_ptr
                   );

            putchar('\n');
        }
#endif

        }
    }

    if (logstr[0] != '\0')
        printf("Log: %s\n", logstr);

#if DEBUG
    printf("Debugging present (big=%d, small=%d)\n", totalbig, totalsmall);

    if (active)
        printf("Active actions count is %d.\n", active);

    if (oopscount)
        printf("oopscount %d\n", oopscount);

    printf("Lowest SWI SP is %08X, lowest IRQ SP is %08X\n", swi_sp, irq_sp);

#endif

#if DO_ASSERTS
    printf("Assertions present\n");
#endif

    return NULL;

    spare = spare;
    cargp = cargp;
}

/* eof misc.c */

