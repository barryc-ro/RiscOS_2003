/* selftest.c -*-C-*- */
/* (C) Copyright ANT Ltd, 1994 */

#include "all.h"

/*****************************************************************************/
/*****************************************************************************/
/*                                                                           */
/*                      Hardware functionality tests                         */
/*                                                                           */
/*****************************************************************************/
/*****************************************************************************/

#ifndef BOOL
#define BOOL int
#define TRUE 1
#define FALSE 0
#endif


#define GSTR_1                        0
#define GSTR_2                        128

#define TEST_OWNCRC             1
#define TEST_CORRUPT            2
#define TEST_LOOPBACK           4

#define TEST_INACTIVE		0
#define TEST_WAITING		1
#define TEST_GOODCRC		2
#define TEST_BADCRC		3
#define TEST_ERRORS		4

/* static int test_state = TEST_INACTIVE; */



/* These are not quite accessed in order */

static char *test_names[] =
{
    "Loopback, correct CRC  . . ",
    "Loopback, incorrect CRC  . ",
    "Loopback, controller CRC . ",
    "Livewire, correct CRC  . . ",
    "Livewire, incorrect CRC  . ",
    "Livewire, controller CRC . ",
    "Locate controller  . . . . ",
    "Interrupts . . . . . . . . ",
    "Buffer memory  . . . . . . "
    };

enum
{
    TEST_LOOPBACK_CORRECT_CRC,
    TEST_LOOPBACK_INCORRECT_CRC,
    TEST_LOOPBACK_CONTROLLER_CRC,
    TEST_LIVEWIRE_CORRECT_CRC,
    TEST_LIVEWIRE_INCORRECT_CRC,
    TEST_LIVEWIRE_CONTROLLER_CRC,
    TEST_LOCATE,
    TEST_INTERRUPTS,
    TEST_MEMORY
    };




typedef struct
{
    unsigned short __pad;
    u_char dest_addr[6];
    u_char src_addr[6];
    unsigned short ftype;
    unsigned int data[256];
    unsigned int crc;
} proto_frame;

/* static proto_frame *pf1, *pf2; */

/* pdh: doesn't seem to be used any more */
#if 0
static client test_client =
{
    NULL,		/* next: */
    0ul,		/* flags: */
    FRMLVL_SINK,	/* frmlvl: */
    ADDRLVL_SPECIFIC,	/* addrlvl: */
    ERRLVL_ERRORS,	/* errlvl: */
    0,			/* protocol_handle: initialised elsewhere */
    (void *) st_received		/* rcv_fn: */
};
#endif

/*****************************************************************************/

static void rem_from_active_pcards(pifstr *pifp)
{
    pifstr **headp = &active_pcards;

    while (*headp != NULL)
    {
	if (*headp == pifp)
	{
	    *headp = pifp->active_next;
	    pifp->active_next = NULL;
	    break;
	}
	else
	    headp = &(*headp)->active_next;
    }

    return;
}

/*****************************************************************************/

/*
extern int st_handler(_kernel_swi_regs *regs, void *pw)
{
    return VIA_R14;
}
*/



#if 0 /* @@@@ take it all out */

/*****************************************************************************
 *
 * Send a test packet.
 *
 * Primarily, we are sending 1024 bytes of random data and checking
 * to see that this is what we receive. We wish to check that correct
 * and incorrect CRC detection works and that CRC generation in the
 * hardware works. In order to be able to generate a CRC value, we need
 * to examine a copy of the frame that will go out on the wire, which
 * means we need to construct a template (proto_frame) and ensure
 * that the actual addresses to be used are present before the CRC is
 * generated. We re-seed the random number generator with the current
 * time, in an attempt at using interesting data. We also stamp
 * 'TEST PACKET' over this, in case someone with a network analyzer
 * wonders what is happening.
 */

static void packet_test(ifstr *ifp, int flags)
{
    args_Transmit args;
    int tmr, i;
    struct mbuf *mp;
    _kernel_oserror *ep;

    const old_txpackets = ifp->accumulated.int32[PACKETS_SENT],
    old_txints = ifp->accumulated.int32[SEND_INTERRUPTS],
    old_rxints = ifp->accumulated.int32[RECEIVE_INTERRUPTS];

    /* Make an unsafe mbuf point at the data area */

    mp = m_alloc_u(sizeof(pf1->data), pf1->data);

    /* Addresses and an 'unused' frame type */

    memcpy(pf1->dest_addr, OWN_ADDRESS, 6);
    memcpy(pf1->src_addr,  OWN_ADDRESS, 6);
    pf1->ftype = 0xdfdf;

    /* Some random data */

    srand((unsigned int) time(NULL));

    for (i = 0; i < sizeof(pf1->data) / sizeof(unsigned int); i += 1)
    {
	pf1->data [i] = (u_int) rand();
    }

    /* Human visible tag of what packet is for */

    memcpy(pf1->data, "TEST PACKET", sizeof("TEST PACKET"));

    /* A genuinely correct CRC... */

    pf1->crc = calc_crc(offsetof(proto_frame, dest_addr) + (u_char *) pf1,
			sizeof(*pf1) - sizeof(pf1->crc) - offsetof(proto_frame, dest_addr) );

    /* Which means this cannot be correct */

    if (flags & TEST_CORRUPT)
        pf1->crc ^= 0xff00;

    if (flags & TEST_OWNCRC)
	ifp->conf2 |= XmitNoCRC;
    else
	ifp->conf2 &= ~XmitNoCRC;

    if (flags & TEST_LOOPBACK)
        ifp->conf2 |= Loopback;
    else
	ifp->conf2 &= ~Loopback;

    ifp->cmd = RxIntEnable | TxIntEnable;

    /**********************************************************************/

    writerxptr(ifp, ifp->rx.current);
    writedmaptr(ifp, ifp->rx.current);		/* Datasheet suggests this value specifically */
    writeconf2(ifp, ifp->conf2);
    args.src_addr = pf1->src_addr;

    /* Use the transmit SWI itself */

    /* @@@@ use ep! */

    ep = _kernel_swi(XOS_Bit + SWI_BASE + 4,
		     (_kernel_swi_regs *) &args,
		     (_kernel_swi_regs *) &args);

    if (ep != NULL)
    {
	debugstr("Error from transmit SWI during selftest: ");
	debugstrcr(ep->errmess);

	ifp->tests_failed |= 1u << ESW;
    }

    enable_irqs();

    tmr = mytime();

    while (mytime() - tmr < 50 && test_state == TEST_WAITING)
        ;

    disable_irqs();					/* And leave disabled */

    ifp->cmd = 0;

    writecmd(ifp, SetRxOff | SetTxOff | AllInt);

    while ((readstat(ifp) & (RxOn | TxOn)) != 0)
	;

    writecmd(ifp, AllInt);

    /**********************************************************************/

    /* decode results waiting us */

    if (flags & TEST_CORRUPT)
    {
	switch (test_state)
	{
	case TEST_GOODCRC:
	    test_state = TEST_BADCRC;
	    break;

	case TEST_BADCRC:
	    test_state = TEST_GOODCRC;
	    break;
	}
    }

    stats_ping_pong(ifp);

    if (ifp->accumulated.int32[SEND_INTERRUPTS] == old_txints)
	ifp->tests_failed |= 1u << ETXINT;

    if (ifp->accumulated.int32[RECEIVE_INTERRUPTS] == old_rxints)
	ifp->tests_failed |= 1u << ERXINT;

    switch (test_state)
    {
        case TEST_WAITING:
	    if (ifp->accumulated.int32[PACKETS_SENT] == old_txpackets)
		ifp->tests_failed |= 1u << ETXHW;

	    ifp->tests_failed |= 1u << ERXHW;
	    break;

        case TEST_GOODCRC:
	    break;

        case TEST_BADCRC:
	    ifp->tests_failed |= (flags & TEST_OWNCRC) ?
		(1u << ERXCRC) :
		    (1u << ETXCRC);
	    break;

        default:
            break; /* @@@@ */
    }

    if (ifp->tests_failed != 0)
	ifp->tests_failed |= (flags & TEST_LOOPBACK) ? (1u << ELOOPFAIL) : (1u << ELIVEFAIL);

    test_state = TEST_INACTIVE;

    debugstr("Selftest generated a result\n");

    return;
}

#endif

/*
 * Walking 1s and 0s buffer memory test. What more could
 * you want here? Answer: a buffer of random data. Okay.. someday
 */

static void test_memory_low(pifstr *pifp, u_char *buffer, const u_int pattern, u_int start, u_int size)
{
    u_int *ptr;
    int i;
    /* void (*fp)(pifstr *pifp, u_int ptr, void *data, int bytes); */
    int cnt = 0;
    int last_i = 0;
    u_int last_read;

    setup_write(pifp, start, size);
    slow_write(buffer, (void *) &(pifp->chip->DATA), size);
    memset(buffer, 0, size);
    setup_read(pifp, start, size);
    slow_read(buffer, (void *) &(pifp->chip->DATA), size);

    for (ptr = (u_int *)buffer, i = size / sizeof(u_int); i != 0; i--, ptr++)
    {
        if (*ptr != pattern)
        {
	    pifp->tests_failed |= 1u << EBUFERR;

            if (!TST(VERBOSE))
                return;

	    if ((cnt += 1) < 10)
	    {
	        printf("Failed at 0x%04x with 0x%08x instead of 0x%08x\n",
		       size - i * sizeof(u_int) + start, *ptr, pattern
		       );
	    }
	    else
	    {
	        if ( cnt == 10 )
                    printf("...\n");
                last_i = i;
                last_read = *ptr;
	    }
        }
    }
    if ( cnt && last_i )
    {
        printf( "Failed at 0x%04x with 0x%08x instead of 0x%08x\n",
                size - last_i * sizeof(u_int) + start, last_read, pattern );
    }
}

static void test_buffer_memory(pifstr *pifp)
{
    static u_char patterns[17] =
    {
        0x00, 0x01, 0xfd, 0x04, 0xf7, 0x10, 0xdf, 0x40, 0x7f,
        0xfe, 0x02, 0xfb, 0x08, 0xef, 0x20, 0xbf, 0x80
    };

    const int ptest = TST(VERBOSE);

    u_char *buffer = (u_char *) malloc(RXSIZE > TXSIZE ? RXSIZE : TXSIZE);

    u_char *cp = &patterns[ptest ? 17 : 3];

    if (TST(VERBOSE))
	printf(test_names[TEST_MEMORY]);

    if (buffer == NULL)
    {
        /* We take a lax view here and judge it passed if not enough memory! */

	if (TST(VERBOSE))
	    printf("%sSKIPPED\n", test_names[TEST_MEMORY]);

        return;
    }

    do
    {
        u_int pattern;

        --cp;

        memset(buffer, pattern = *cp, RXSIZE > TXSIZE ? RXSIZE : TXSIZE);

        pattern |= pattern << 8;
        pattern |= pattern << 16;

        test_memory_low(pifp, buffer, pattern, TXSTART, TXSIZE);
        test_memory_low(pifp, buffer, pattern, RXSTART, RXSIZE);
    } while (pifp->tests_failed == 0 && cp != patterns);

    if (!TST(VERBOSE) && pifp->tests_failed != 0)
	printf(test_names[TEST_MEMORY]);

    if (TST(VERBOSE) || pifp->tests_failed != 0)
	printf(pifp->tests_failed != 0 ? "FAILED\n" : "PASSED\n");

    free(buffer);
}


#if 0				/* @@@@ Probably take this out */

static void get_ready_for_test_packets(pifstr *pifp)
{
    pf1 = (proto_frame *) malloc(sizeof(proto_frame));
    pf2 = (proto_frame *) malloc(sizeof(proto_frame));

    if (pf1 == NULL || pf2 == NULL)
    {
	debugstr("Not enough memory to run selftest\n");

	ifp->tests_failed |= 1u << ENOMEM;

     	if (pf1 != NULL)
	{
	    free(pf1);
	    pf1 = NULL;
	}

	if (pf2 != NULL)
	{
	    free(pf2);
	    pf2 = NULL;
	}

	return;
    }

    ifp->ether2_hole = &test_client;
    ifp->active_next = active_cards;
    active_cards = ifp;
}


static void finished_with_test_packets(ifstr *ifp)
{
    DISABLE_IRQS;

    if (pf1 != NULL)
    {
	free(pf1);
	free(pf2);
	pf1 = NULL;
	pf2 = NULL;
    }

    active_cards = ifp->active_next;
    ifp->ether2_hole = NULL;

    test_state = TEST_INACTIVE;

    RESTORE_IRQS;
}


#endif /* 0 - @@@@ take it all out */

/* set_hardware_address
 * Can be entered with page0 or page1 active
 * On exit page0 is active
 */

extern void set_hardware_address( pifstr *pifp, u_char *addr )
{
    int i;
    int irqstate = disable_irqs();

    pifp->chip->CR = my_cr_PAGE1;

    for (i = 0; i < ETH_ADDRSIZE; i++)
    {
	u_char c = addr[i];

	pifp->chip->PAR(i) = c;
    }

    pifp->chip->CR = my_cr_PAGE0;

    restore_irqs( irqstate );
}

/* Possibly entered with IRQs disabled. Require IRQs enabled to perform tests @@@@ */

volatile int inselftest = 0;

static void selftest(register pifstr *pifp, BOOL bThrash)
{
    /*u_int *ip;*/
    u_int i;
    const entry_irqs = enable_irqs();
    vifstr *vifp = pifp->primary;

    _kernel_oserror *ep;

#if 0
    static int test_flags[6] =
    {
	TEST_LOOPBACK | TEST_OWNCRC,
	TEST_LOOPBACK | TEST_OWNCRC | TEST_CORRUPT,
	TEST_LOOPBACK,
	TEST_OWNCRC,
	TEST_OWNCRC | TEST_CORRUPT,
	0
	};
#endif

    /**********************************************************************/
    inselftest = 1;

    /* Preliminary tests */

    if (! seen_mbuf_manager)
	pifp->tests_failed |= 1u << ENOMEMMAN;

    if (vifp->clients != NULL || vifp->ether2_hole != NULL || vifp->ieee8023_hole != NULL)
    {
        debugstr("got some clients during testing?\n");
        inselftest = 0;
	pifp->tests_failed |= 1u << ESW;
	return;
    }

    /**********************************************************************/

    if (TST(VERBOSE))
	printf(test_names[TEST_LOCATE]);

    reset_card(pifp);

    if ((pifp->chip->CR & ~my_cr_STA) != (my_cr_STP | my_cr_RABORT))
    {
        reset_card(pifp);

        if ((pifp->chip->CR & ~my_cr_STA) != (my_cr_STP | my_cr_RABORT))
        {
	pifp->tests_failed |= 1u << EHW;
	printf( "CR=0x%x should be 0x%x\n", pifp->chip->CR & ~my_cr_STA,
	         my_cr_STP | my_cr_RABORT );
        }
    }

    if (!TST(VERBOSE) && pifp->tests_failed != 0)
	printf(test_names[TEST_LOCATE]);

    if (TST(VERBOSE) || pifp->tests_failed != 0)
	printf(pifp->tests_failed != 0 ? "FAILED\n" : "PASSED\n");

    pifp->tx_cause = 0;
    pifp->rx_cause = 0;

    /* Zero txblobs and initialise other values, effectively */
    memset(&pifp->tx, 0, sizeof(pifp->tx));

    /* Start filling in the registers with (near) operational values */
    /* This sequence is the one suggested by the data sheet */

    pifp->chip->CR = my_cr_INIT_P1;

    set_hardware_address( pifp, pifp->etheraddr );

    pifp->chip->CR = my_cr_INIT_P1;

    for (i = 0; i < 8; i++)
    {
	pifp->chip->MAR(i) = 0xff;
    }

    pifp->chip->CR = my_cr_INIT_P0;

    pifp->rx.current = HI(RXSTART)+1;

    pifp->chip->CR = my_cr_INIT_P1;
    pifp->chip->CURR = pifp->rx.current;

    pifp->chip->CR = my_cr_INIT_P0;
    pifp->chip->PSTART = HI(RXSTART);
    pifp->chip->PSTOP = HI(RXLIMIT);

    pifp->chip->BNRY = HI(RXSTART);

    pifp->chip->CR = my_cr_STA;	/* Start the controler, so we can DMA */

    /**********************************************************************/

    if ( bThrash )
    {
        int old;

        old = TST(VERBOSE);

        SET(VERBOSE);
        for ( i=0; i<40; i++ )
            test_buffer_memory(pifp);

        if ( !old )
            CLR(VERBOSE);
    }
    else
        test_buffer_memory(pifp);

    if (pifp->tests_failed != 0)
	goto tests_finished;

    /* To do packet tests, we use a fudged receive handler */

    if ((ep = decl_interrupts(pifp)) != NULL)
    {
	printf("Error claiming interrupts: %s\n", ep->errmess);
	logmsg(pifp->slot, "Error claiming interrupts: %s\n", ep->errmess);
	pifp->tests_failed |= 1u << ESW;
    }

    pifp->chip->ISR = 0xff;	/* Clear down all bits */
    pifp->chip->IMR = my_imr_PRXE | my_imr_PTXE | my_imr_RXEE | my_imr_TXEE
                      | my_imr_OVWE;

    enable_irqs_flag(pifp->intr_mask_ptr, pifp->intr_mask_value);

    pifp->chip->LCR = 0;		/* Take the card out of loopback */

#if 0

    get_ready_for_test_packets(pifp);

    if (pifp->tests_failed != 0)
    {
	printf("%sFAILED\n", test_names[0] /* first packet test */);
	goto tests_finished;
    }

    /* Packet test setup is okay if got here */

    for (i = 0; ifp->tests_failed == 0 && i < 3; i += 1)
    {
	if (TST(VERBOSE))
	    printf(test_names[i]);

        {
	    DISABLE_IRQS;
	    packet_test(ifp, test_flags[i]);
	    RESTORE_IRQS;
	}

	if (!TST(VERBOSE) && ifp->tests_failed != 0)
	    printf(test_names[i]);

	if (TST(VERBOSE) || ifp->tests_failed != 0)
	    printf(ifp->tests_failed != 0 ? "FAILED\n" : "PASSED\n");
    }

    /* If any errors so far, don't do this and let them through to bringup */

    if (ifp->tests_failed == 0)
    {
	if (TST(LIVEWIRETEST))
	{
	    for (i = 3; (TST(IGNORETEST) ? 1 : (ifp->tests_failed == 0)) && i < 6; i += 1)
	    {
		if (TST(VERBOSE))
		    printf(test_names[i]);

	    {
		DISABLE_IRQS;
		packet_test(ifp, test_flags[i]);
		RESTORE_IRQS;
	    }

		if (!TST(VERBOSE) && ifp->tests_failed != 0)
		    printf(test_names[i]);

		if (TST(VERBOSE) || ifp->tests_failed != 0)
		    printf(ifp->tests_failed != 0 ? "FAILED\n" : "PASSED\n");
	    }
	}

	if (TST(IGNORETEST))
	    ifp->tests_failed = 0;
    }

    /* So whatever errors just found, need to remove os hooks */

    finished_with_test_packets(ifp);



    enable_irqs_flag(ifp->intr_mask_ptr, ifp->intr_mask_value);

#endif

tests_finished:

    inselftest = 0;

    restore_irqs(entry_irqs);

    return;
}

/*****************************************************************************
 *
 * bringdown:
 *
 * The card is to be put into a dormant state. If this is called when process
 * is active, then we have to try and gracefully close down. As this may
 * happen because the module is quitting, we can't always get an error back to
 * the user. This is a shame, because we SHOULD refuse to die if we have any active
 * threads at the time (this way, at least the user might be able to type in
 * a command -- pulling the rug out from under the feet of nested threads with
 * RISC OS's task model is likely to hang the machine with interrupts off).
 * Oh well, as there's nothing we can do, we attempt to be graceful.
 */

extern _kernel_oserror *bringdown(pifstr *pifp)
{
    DISABLE_IRQS;

    /*_kernel_swi_regs r;*/
    _kernel_oserror *ep = NULL;

#if DEBUG
    decode_ifp_flags(pifp->flags);
#endif

    if (pifp == NULL)
    {
        debugstr("NULL to bringdown\n");
        ep = makeerror(NOCARDUNIT, ENOTANIF);
    }
    else if (TST(FAULTY))
    {
        debugstr("faulty interface to bringdown\n");
        ep = makeerror(pifp->slot, EIFFAULTY);
    }
    else if (!TST(UP))
    {
        debugstr("interface not up to bringdown\n");
        ep = NULL;
    }
    else
    {
        /* This is essential at this point as we don't the "transmitted"
         * event we're about to generate to cause the driver to try sending
         * out more packets. This must be done before stopping the chip.
         */

	CLR(UP);
	SET(DOWN);

        debugstr("flushing transmit queue\n");

        flush_queue( pifp );

        debugstr("disabling hardware\n");

	pifp->chip->IMR = 0;
	pifp->chip->ISR = 0xff;	/* Clear down all bits */
	pifp->chip->CR = my_cr_STP;

        debugstr("removing from vectors\n");

	rem_interrupts(pifp);

	rem_from_active_pcards(pifp);
    }

    RESTORE_IRQS;

    debugstr("\n\nINTERFACE DOWN\n\n\n");

#if DEBUG
    decode_ifp_flags(pifp->flags);
#endif

    return ep;
}

/*****************************************************************************
 *
 * bringup:
 *
 * Perform whatever actions are necessary to try to take the card into a
 * working state, listening for packets addressed to the card and ready to
 * accept packets for transmission. This probably can be called from within
 * an interrupt, but I'm going to reject it on principal. IF the card is not
 * active, then it is either faulty or can be made active. The card will be
 * in a stable state, but needs some further initialisation. A good amount of
 * basic functionality has been proven if the card has a structure describing
 * it at all.
 */

static void clearstats( vifstr *vifp )
{
    memset(vifp->accumulated.int32, 0, sizeof(int) * NUM_INTEGER32_STATISTICS);
    memset(vifp->active.int32, 0, sizeof(int) * NUM_INTEGER32_STATISTICS);
    memset(vifp->pending.int32, 0, sizeof(int) * NUM_INTEGER32_STATISTICS);

    memset(vifp->accumulated.int64, 0, 2 * sizeof(int) * NUM_INTEGER64_STATISTICS);
    memset(vifp->active.int64, 0, 2 * sizeof(int) * NUM_INTEGER64_STATISTICS);
    memset(vifp->pending.int64, 0, 2 * sizeof(int) * NUM_INTEGER64_STATISTICS);
}

static _kernel_oserror *bringup2(pifstr *pifp, BOOL bThrash)
{
    DISABLE_IRQS;

    /* int x; */

    debugstr("bringup\n");

#if DEBUG
    decode_ifp_flags(pifp->flags);
#endif

    if (TST(UP) || !TST(ENABLED) || IRQSEMA)
    {
    	_kernel_oserror *ep;

    	if (TST(UP))
    	{
            debugstr("interface already up\n");
    	    ep = NULL;
    	}
    	else if (!TST(ENABLED))
    	{
            debugstr("interface disabled\n");
    	    ep = makeerror(pifp->slot, EIFDISABLED);
    	}
    	else
        {
            debugstr("marked as threaded with irqsema - cannot complete");
    	    ep = makeerror(pifp->slot, ESW);
        }

    	RESTORE_IRQS;

    	return ep;
    }

    SET(TESTING);
    CLR(DOWN);

    pifp->chip->IMR = 0;
    pifp->chip->ISR = 0xff;	/* Clear down all bits */

    /* pdh: doesn't seem to be used any more
    test_client.protocol_handle = (unsigned int) module_wsp;
     */

    protocol_reflect(pifp);

    CLR(FAULTY);

    pifp->tests_failed = 0;

    stats_ping_pong(pifp->primary);

#if 1
    selftest(pifp, bThrash);
#else
    if ( ! TST(JUST_TESTED))
    {
        debugstr("bringup calling selftest\n");
        selftest(ifp);
    }
    else
    {
        debugstr("Preventing selftest as thing just done one\n");
    }
#endif

    stats_ping_pong(pifp->primary);

    debugstr("After selftests, pifp->tests_failed is ");
    debughexcr(pifp->tests_failed);

    /* Any acceptable errors will have already been cleared by now */

    if (pifp->tests_failed != 0)
    {
        debugstr("marking interface as faulty and returning error\n");
        SET(FAULTY);

        RESTORE_IRQS;

        return makeerror(pifp->slot, EIFFAULTY);
    }

    /* Clear out the accumulating statistics if passed selftests */

    clearstats( pifp->primary );
    if ( pifp->secondary )
        clearstats( pifp->secondary );

    pifp->active_next = active_pcards;
    active_pcards = pifp;

    /* @@@@ Set it up here */

    CLR(DOWN);
    SET(UP);

    pifp->up_time = time(NULL);

    protocol_reflect(pifp);

    CLR(TESTING);

    RESTORE_IRQS;

    debugstr("\n\nINTERFACE UP\n\n\n");

#if DEBUG
    decode_ifp_flags(pifp->flags);
#endif

    return NULL;
}

extern _kernel_oserror *bringup(pifstr *pifp)
{
  return bringup2( pifp, FALSE );
}

/*****************************************************************************
 *
 * Command line initiated self test bits.
 */

static _kernel_oserror *cli_selftest3(pifstr *pifp, BOOL bThrash)
{
    args_DCIDriverStatus sc;
    _kernel_oserror *ep;

    /* First, tell protocol modules to stop using the interface */

    debugstr("Retracting presence of interface prior to cli_selftest\n");

    sc.dib = &pifp->primary->dib;
    sc.scall = Service_DCIDriverStatus;
    sc.status = DriverStatus_Terminating;
    sc.dci_version = DCI_VERSION_NUMBER;

    (void) _kernel_swi(XOS_Bit + OS_ServiceCall,
                       (_kernel_swi_regs *) &sc,
                       (_kernel_swi_regs *) &sc );

    /* Then remove list of claimants and down bringdown */

    drop_all_clients(pifp->primary);

    if ( pifp->secondary )
    {
        sc.dib = &pifp->secondary->dib;

        (void) _kernel_swi(XOS_Bit + OS_ServiceCall,
                           (_kernel_swi_regs *) &sc,
                           (_kernel_swi_regs *) &sc );

        drop_all_clients(pifp->secondary);
    }

    debugstr("Issuing bringup for cli_selftest\n");

    ep = bringup2(pifp, bThrash);

    if (TST(UP))
    {
        debugstr("Issuing bringdown for cli_selftest\n");

        (void) bringdown(pifp);
    }

    /* Then announce that the interface is again available for use. */
    /* This 'tells' the protocol module to re-connect. The first */
    /* connection will attempt to perform a selftest, but the FLAG_JUST_TESTED */
    /* prevents this. This flag is cleared after the service call has returned */
    /* to ensure that future connections do get selftests. There is argument to */
    /* be made for this happening from a callback triggered callback, to ensure */
    /* protocols that reconnect on a callback are treated like those that connect */
    /* during the service call. This might happen someday. */

    SET(JUST_TESTED);

    sc.status = DriverStatus_Starting;

    debugstr("\n\n\nAnnouncing presence of interface after cli_selftest\n");

    sc.dib = &pifp->primary->dib;

    (void) _kernel_swi(XOS_Bit + OS_ServiceCall,
                       (_kernel_swi_regs *) &sc,
                       (_kernel_swi_regs *) &sc );

    if ( pifp->secondary )
    {
        sc.dib = &pifp->secondary->dib;

        (void) _kernel_swi(XOS_Bit + OS_ServiceCall,
                           (_kernel_swi_regs *) &sc,
                           (_kernel_swi_regs *) &sc );
    }

    CLR(JUST_TESTED);


#if DEBUG
    decode_ifp_flags(pifp->flags);
#endif

    return ep;
}

static _kernel_oserror *cli_selftest2(pifstr *pifp, BOOL bThrash)
{
    _kernel_oserror *ep = cli_selftest3(pifp, bThrash);

    if (ep == NULL)
        printf(CARDSTR "%d (%s) passed selftests.\n", pifp->slot, pifp->primary->dib.dib_location);
    else
        printf(CARDSTR "%d (%s) FAILED SELFTESTS\nError: %s\n", pifp->slot, pifp->primary->dib.dib_location, ep->errmess);

    return ep;
}

extern _kernel_oserror *cli_buffer( char *arg_string, int arg_count )
{
    pifstr *pifp;

    pifp = all_pcards;
    if ( pifp )
        cli_selftest2( pifp, TRUE );
    return NULL;
}

extern _kernel_oserror * cli_selftest(char *arg_string, int arg_count)
{
    int which;
    _kernel_oserror *ep = NULL;
    pifstr *pifp;

    if (arg_count == 0)
    {
        which = -1;
    }
    else
    {
#if DEBUG
        printf("Decoding cli_selftest arguments of %d, '%s'.\n", arg_count, arg_string);
#endif
        ep = parse_number( &arg_string, MAXUNITS - 1, (unsigned *) &which );

        if (ep != NULL)
            return ep;

        if ( utovifp[which] == NULL )
            return makeerror(NOCARDUNIT, ENOTANIF);
     }

     if (which == -1)
     {
         ITERATE_OVER_ALL_PCARDS
         {
             _kernel_oserror *ep2 = cli_selftest2(pifp, FALSE);

             if (ep == NULL)
                 ep = ep2;
         }
     }
     else
     {
         ep = cli_selftest2(utovifp[which]->raw, FALSE);
     }

     return ep;
}




/* eof selftest.c */
