/*1 protocol.c -*-C-*- */

#include "all.h"


/* Construct flags set additively */

static int check_clients( pifstr *pifp, vifstr *vifp )
{
    client *cp = vifp->clients;
    int active = 0;

    vifp->flags &= ~MASK_CLIENTS;

    while (cp != NULL)
    {
        switch (cp->addrlvl)
        {
            case ADDRLVL_NORMAL:        VSET(BROAD_RX);                      break;
            case ADDRLVL_MULTICAST:     VSET2(BROAD_RX, MULTI_RX);           break;
            case ADDRLVL_PROMISCUOUS:   VSET2(BROAD_RX, PROMIS_RX);          break;
        }

        if (cp->errlvl == ERRLVL_ERRORS)
        {
            VSET(ERROR_RX);
        }

        cp = cp->next;
    }

    if ((cp = vifp->ether2_hole) != NULL)
    {
        switch (cp->addrlvl)
        {
            case ADDRLVL_NORMAL:        VSET(BROAD_RX);                      break;
            case ADDRLVL_MULTICAST:     VSET2(BROAD_RX, MULTI_RX);           break;
            case ADDRLVL_PROMISCUOUS:   VSET2(BROAD_RX, PROMIS_RX);          break;
        }

        if (cp->errlvl == ERRLVL_ERRORS)
        {
            VSET(ERROR_RX);
        }
    }

    if ((cp = vifp->ieee8023_hole) != NULL )
    {
        switch (cp->addrlvl)
        {
            case ADDRLVL_NORMAL:        VSET(BROAD_RX);                      break;
            case ADDRLVL_MULTICAST:     VSET2(BROAD_RX, MULTI_RX);           break;
            case ADDRLVL_PROMISCUOUS:   VSET2(BROAD_RX, PROMIS_RX);          break;
	    }

        if (cp->errlvl == ERRLVL_ERRORS)
        {
            VSET(ERROR_RX);
        }
    }

    active = ( vifp->clients != NULL )
          || ( vifp->ether2_hole != NULL )
          || ( vifp->ieee8023_hole != NULL );

    if ( active )
        VSET(UP);
    else
        VCLR(UP);

    return active;
}

extern void protocol_reflect(pifstr *pifp)
{
    unsigned char addrmode;
    int pclients, sclients = 0;

    debugstr("protocol_reflect\n");

#if DEBUG
    decode_ifp_flags(pifp->flags);
#endif

    pifp->flags &= ~MASK_CLIENTS;

    pclients = check_clients( pifp, pifp->primary );
    pifp->flags |= (pifp->primary->flags & MASK_CLIENTS);

    if ( pifp->secondary )
    {
        sclients = check_clients( pifp, pifp->secondary );
        pifp->flags |= (pifp->secondary->flags & MASK_CLIENTS);
    }

    if ( pclients && sclients )
        SET( PROMIS_RX );

    /* Values tie up with SEEQ 8005 controller register bit positions. */

    if (TST(PROMIS_RX))
    {
        debugstr("switching to promiscuous receiption\n");
	addrmode = (my_rcr_PRO | my_rcr_AM | my_rcr_AB);
    }
    else if (TST(MULTI_RX))
    {
        debugstr("swithcing to multicast receiption\n");
	addrmode = (my_rcr_AM | my_rcr_AB);
    }
    else if (TST(BROAD_RX))
    {
        debugstr("switch to broadcast receiption\n");
	addrmode = (my_rcr_AB);
    }
    else
    {
        debugstr("switch to specific receiption\n");
	addrmode = 0;
    }

    if (TST(ERROR_RX))
	addrmode |= (my_rcr_AR | my_rcr_SEP);

    /* Urm... */
    /* Is this safe with the card active? */
    if ( TST(UP) && !TST(FAULTY) )
    {
	pifp->chip->RCR = addrmode;
    }

    if ( pifp->secondary )
    {
        /* write 2ndary addr in if it's active and other isn't
         * If pifp->secondary==NULL then there's only one vifstr and
         * the right addr will have been set in selftest anyway
         */
        if ( pclients && !sclients )
            set_hardware_address( pifp, pifp->primary->etheraddr );
        else if ( sclients && !pclients )
            set_hardware_address( pifp, pifp->secondary->etheraddr );
    }

    if ( !pclients && !sclients && ! TST(TESTING) )
    {
        debugstr("protocol_reflect says the interface is now idle\n");

        bringdown(pifp);
    }


#if DEBUG
    decode_ifp_flags(pifp->flags);
#endif

}



extern _kernel_oserror *filter_claim(args_Filter *args)
{
    vifstr *vifp = utovifp[args->unit];
    pifstr *pifp = vifp->raw;
    client *cp, **cpp;
    _kernel_oserror *ep;

    /* Check that this frame type is not already claimed */

    debugstr("Consider filter claim\n");

    switch ( FRMLVLOF(args->frmlvl) )
    {
        case FRMLVL_E2SPECIFIC:
            if (vifp->ether2_hole != NULL)
            {
                debugstr("already got ether2 hole client for specific claim\n");
                return makeerror(args->unit, ENOTAVAIL);
            }

            for (cpp = &vifp->clients; (*cpp) != NULL ; cpp = &(*cpp)->next)
                if ( (*cpp)->frmlvl == args->frmlvl )
                {
                    debugstr("frame type already registered\n");
                    return makeerror(vifp->unit, ENOTAVAIL);
                }
            break;

        case FRMLVL_E2SINK:
            if (vifp->ether2_hole != NULL)
            {
                debugstr("already got ether2 hole clienmt for e2sink claim\n");
                return makeerror(args->unit, ENOTAVAIL);
            }
            cpp = &vifp->ether2_hole;
            break;

        case FRMLVL_E2MONITOR:
            if (vifp->clients != NULL || vifp->ether2_hole != NULL)
            {
                debugstr("clients or ether2 hole already used for e2monitor claim\n");
                return makeerror(args->unit, ENOTAVAIL);
            }
            cpp = &vifp->ether2_hole;
            break;

        case FRMLVL_IEEE:
            if (vifp->ieee8023_hole != NULL)
            {
                debugstr("already got ieee 802.3 hole for ieee8023hole claim\n");
                return makeerror(args->unit, ENOTAVAIL);
            }
            cpp = &vifp->ieee8023_hole;
            break;

        default:
            debugstr("Naff arguments to filter claim\n");
            return makeerror(args->unit, EINVAL);
            break;
    }

    /* Permissable to register this client */

    if ( (cp = (client *) malloc(sizeof(client))) == NULL)
    {
        debugstr("no memory to describe new client\n");
        return makeerror(vifp->unit, ENOMEM);
    }

    /* Ensure can activate the card before changing claim state */
    if ( ! TST(UP) && (ep = bringup(pifp)) != NULL )
    {
        debugstr("failed to activate the card from bringup in filter claim\n");
	free(cp);
	return ep;
    }

    cp->next = NULL;
    cp->flags = args->flags;
    cp->frmlvl = args->frmlvl;
    cp->addrlvl = args->addrlvl;
    cp->errlvl = args->errlvl;
    cp->protocol_handle = args->protocol_handle;
    cp->rcv_fn = args->rcv_fn;

    {
        DISABLE_IRQS;
        *cpp = cp;
        protocol_reflect(vifp->raw);
        RESTORE_IRQS;
    }

    return NULL;
}


static _kernel_oserror *fr(args_Filter *args, vifstr *vifp, client **cpp)
{
    client *cp = *cpp;

    debugstr("Considering low level filter release\n");

    if
    (
        cp == NULL ||
        cp->frmlvl != args->frmlvl ||
        cp->addrlvl != args->addrlvl ||
        cp->errlvl != args->errlvl ||
        cp->protocol_handle != args->protocol_handle ||
        cp->rcv_fn != args->rcv_fn
    )
        return makeerror(args->unit, EINVAL);

    /* Should perhaps be some distinction in the failure reason so we can */
    /* spot the circumstances for using EPERM. */

    *cpp = cp->next;
    free(cp);
    protocol_reflect(vifp->raw);

    /* This may cause us to be re-entered! */

    service_frame_type_free(&vifp->dib, args->frmlvl, args->addrlvl, args->errlvl);

    /* Need to ensure hasn't messed IRQ state */

    (void) disable_irqs();

    return NULL;
}

extern _kernel_oserror *filter_release(args_Filter *args)
{
    DISABLE_IRQS;

    _kernel_oserror *ep;
    vifstr *vifp = utovifp[args->unit];

    switch ( FRMLVLOF( args->frmlvl ) )
    {
        case FRMLVL_E2SPECIFIC:
        {
	    client **cpp;

	    ep = (_kernel_oserror *) -1;

	    /* fr() can cause recursion - so have to be careful. */
	    /* The break ensures fr() only gets called once - should be enough */

	    for (cpp = &vifp->clients; (*cpp) != NULL ; cpp = &(*cpp)->next)
		if ( (*cpp)->frmlvl == args->frmlvl )
		{
		    ep = fr(args, vifp, cpp);
		    break;
		}

	    if (ep == (_kernel_oserror *) -1)
		ep = makeerror(vifp->unit, EINVAL);
	}
	break;

        case FRMLVL_E2SINK:
	ep = fr(args, vifp, &vifp->ether2_hole);
	break;

        case FRMLVL_E2MONITOR:
	ep = fr(args, vifp, &vifp->ether2_hole);
	break;

        case FRMLVL_IEEE:
	ep = fr(args, vifp, &vifp->ieee8023_hole);
	break;

        default:
	ep = makeerror(args->unit, EINVAL);
    }

    RESTORE_IRQS;

    return ep;
}


/* eof */
