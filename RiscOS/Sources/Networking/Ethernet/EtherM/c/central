/* central.c -*-C-*- */
/*
   (C) ANT Ltd 1993, 1994, 1995.
   PO BOX 300, Cambridge, CB1 2EG, England. +44 (0) 223 567808
   All rights reservered. Company confidential.

   $Version:$
*/


#include "all.h"

#define TRANSFER_PACKETS 1

static void myson_buffer_stuff(u_char *dest_addr, u_char *src_addr, u_int frmlvl,
			       struct mbuf *data, u_int page, pifstr *pifp);

/* Start the transmission of a packet.  Should only be called if not already transmitting. */
/* There must be no DMA in progress */

static void start_tx(pifstr *pifp, u_int page, int len)
{
#if DEBUG
    debugstr("Starting transmitter from page ");
    debugdec(page);
    debugstr(" length ");
    debugdeccr(len);
#endif

    pifp->chip->TPSR = page;

    pifp->chip->TBCR0 = LO(len);
    pifp->chip->TBCR1 = HI(len);

    pifp->chip->CR = my_cr_TXP;
}

/*****************************************************************************/
/*****************************************************************************/
/*                                                                           */
/*                      The basic process subfunctions                       */
/*                                                                           */
/*****************************************************************************/
/*****************************************************************************/

/*
 * The new transmitted routine. This has the task of scanning along the
 * transmit headers, processing each header that is finished with by the
 * ethernet controller, until a header is found that is not completed
 * with. Such a header will always be found, as the null header that tells
 * the transmitter where to stop also tells us where to stop. Packets
 * are only evented if requested.
 *
 * Entered with interrupts disabled, returns with interrupts disabled.
 * Interrupts can safely be enabled, because no other significant code
 * accesses tx.current_ptr.
 */

/* pdh: The above comment seems to be a completely inoperative statement */

static void transmitted( register pifstr *pifp )
{
    register tx_t *tx = &pifp->tx;
    vifstr *vifp = NULL;
    u_int txstat;

#if DEBUG
    debugstrcr("Transmitted:");
#endif

    tx->bufs_used--;

    /* Before we start sending anything, take a look at the TX status */
    txstat = pifp->chip->TSR;

#if VERBOSEDEBUG
    debugstr("TX status = ");
    debughexcr(txstat);
#endif

    /* do this before any possible jump to got_error */
    vifp = ( tx->buf_last_tx == TXBUF0 ) ? pifp->tx0owner : pifp->tx1owner;

    if ( !vifp )
        vifp = pifp->primary;

    if ((txstat & my_tsr_PTX) != my_tsr_PTX)
	goto got_error;

    STAT32(PACKETS_SENT, 1);
    STAT64(BYTES_SENT, (tx->buf_last_tx == TXBUF0) ? tx->buf0_size : tx->buf1_size);

 try_eventing:

    if ( !TST(UP) )
    {
        debugstr( "transmitted called when not up: ignoring\n" );
        return;
    }

    /* If we still have a buffer, send it */

    if (tx->bufs_used)
    {
	tx->buf_last_tx = (tx->buf_last_tx == TXBUF0) ? TXBUF1 : TXBUF0;

#if DEBUG
	debugstr("Sending from the other buffer\n");
#endif

	start_tx(pifp, tx->buf_last_tx, (tx->buf_last_tx == TXBUF0) ? tx->buf0_size : tx->buf1_size );
    }

    /* If we have anything queued, move one into the buffer */
    if (tx->inuse_count > 0)
    {
	txblob *bp;

	debugstr("Copying from the queue\n");

	/* Copy the packet over */

	bp = &(tx->blobs[tx->current_index]);

	myson_buffer_stuff(bp->dstaddr,
			   bp->srcaddr,
			   bp->ftype,
			   bp->head,
			   (tx->buf_last_tx == TXBUF0) ? TXBUF1 : TXBUF0,
			   pifp);

	m_freem(bp->head);

	tx->bufs_used++;

	/* Update the blob pointers */
	tx->inuse_count--;
	tx->current_index++;
	if (tx->current_index == MAXTXBLOB)
	    tx->current_index = 0;
    }

    return;

/*****************************************************************************/

 got_error:

    debugstr("\n@@@@ transmitted: observed errors @ ");
    debughex(MONOTIME);
    debugstr(" with txstat as ");
    debughexcr( txstat );

    if ((txstat & my_tsr_ABT) != 0)
    {
        debugstr(" 16 collisions ");

        STAT32(SEND_MAX_COLLISIONS, 1);
        STAT32(SEND_ERRORS, 1);

    }

    if ((txstat & my_tsr_CDH) != 0)
    {
        debugstr(" heartbeat ");

        STAT32(SENDS_TOO_LARGE, 1);
        STAT32(SEND_ERRORS, 1);

    }

    debugstr("\n\n");

    goto try_eventing;
}


/*---------------------------------------------------------------------------*
 * flush_queue                                                               *
 * Removes all pending packets from the queue.                               *
 * Must be called from bringdown because UNLIKE ON SEEQ *we*, not the chip,  *
 * own the transmit queue.                                                   *
 *---------------------------------------------------------------------------*/

void flush_queue( pifstr *pifp )
{
    int irqnow = disable_irqs();
    tx_t *tx = &pifp->tx;
    int flushed = 0;

    flushed = tx->bufs_used;
    tx->bufs_used = 0;

    while (tx->inuse_count > 0)
    {
	txblob *bp;

	bp = &(tx->blobs[tx->current_index]);

	m_freem(bp->head);

	/* Update the blob pointers */
	tx->inuse_count--;
	tx->current_index++;
	flushed++;
	if (tx->current_index == MAXTXBLOB)
	    tx->current_index = 0;
    }

    debugstr( "Flushed " );
    debugdec( flushed );
    debugstr( " packets\n" );

    restore_irqs( irqnow );
}

/*****************************************************************************
 *
 * received:
 *
 * Extract any packets entered into the receive buffer and pass on packets
 * to protocol modules if appropriate. Entered and exitted with interrupts
 * disabled.
 */


/*****************************************************************************/




typedef struct generic_hdr
{
    union
    {
        void *ptr;
        unsigned int word;
    } first;                            /* 4  bytes */
    unsigned char dest[6], source[6];   /* 12 bytes */
    unsigned short ftype;               /* 2  bytes */
    unsigned char spare[2];             /* 2  bytes */
#if 1
    unsigned int /*hdr,*/ errors /* ,orig_packlen */;
#endif
} generic_hdr;                                      /* ======== 20 bytes, with 2 of them spare */



#define sizeof_generic_hdr              (4+6+6+2   /*+ 8*/)

#if TRANSFER_PACKETS

static struct mbuf *brew_up_fake_rx( vifstr *vifp, unsigned char *src_addr,
                                     unsigned char *dest_addr,
                                     unsigned int ftype, struct mbuf *tx )
{
    struct rx_hdr *rx_hdr;
    struct mbuf *head = m_alloc_g( sizeof(struct rx_hdr), NULL,
                                   MBC_SINGLE | MBC_CLEAR );
    struct mbuf *mp = NULL;

    debugstr( "Faking up packet for interface em" );
    debugdeccr( vifp->unit );

    if ( head )
    {
        head->m_next = tx;
        mp = m_copy_p( head, 0, M_COPYALL ); /* copy_p says keep m_type's */
        head->m_next = NULL;

        m_free( head );
    }

    if ( !mp )
    {
        debugstr("Not enough mbufs\n");
	STAT32(LACK_OF_MBUFS, 1);
        return NULL;
    }

    /* First mbuf holds a header */
    mp->m_type = MT_HEADER;

    rx_hdr = mtod(mp, struct rx_hdr *);

    memcpy( rx_hdr->rx_src_addr, src_addr, 6 );
    memcpy( rx_hdr->rx_dst_addr, dest_addr, 6 );
    rx_hdr->rx_frame_type = ftype;
    rx_hdr->rx_error_level = 0;

    return mp;
}

typedef struct
{
    unsigned char *src_addr;
    unsigned char *dest_addr;
    unsigned int ftype;
    struct mbuf *tx;
} fake_packetproc_args;

static struct mbuf *fake_packetproc( vifstr *vifp, void *data )
{
    fake_packetproc_args *fpa = (fake_packetproc_args*) data;

    return brew_up_fake_rx( vifp, fpa->src_addr, fpa->dest_addr,
                            fpa->ftype, fpa->tx );
}

#endif /* TRANSFER_PACKETS */

static struct mbuf *wrap_packet( vifstr *vifp, struct generic_hdr *hdr,
                                 int packlen, int packstart )
{
    pifstr *pifp = vifp->raw;
    void *rp = (void *) &(pifp->chip->DATA);

    struct mbuf *mp = m_alloc_g(sizeof(struct rx_hdr), NULL, MBC_SINGLE | MBC_CLEAR), *tp;
    struct rx_hdr *rx_hdr;

    unsigned int frame = hdr->ftype;
    unsigned int bias;
    unsigned int msize;
    int irqstate;


    if (mp == NULL)
    {
        debugstr("Not enough mbufs\n");
	STAT32(LACK_OF_MBUFS, 1);
        return NULL;
    }
    else
    {
	/* First mbuf holds a header */

	mp->m_type = MT_HEADER;
    }

    if ( (mp->m_next = m_alloc(packlen, NULL)) == NULL )
    {
        m_free(mp);
        debugstr("Not enough mbufs\n");
	STAT32(LACK_OF_MBUFS, 1);
        return NULL;
    }

    /* All bar first mbuf hold data information */

    for (tp = mp->m_next; tp != NULL; tp = tp->m_next)
	tp->m_type = MT_DATA;

    rx_hdr = mtod(mp, struct rx_hdr *);

    rx_hdr->rx_src_addr[0] = hdr->source[0];
    rx_hdr->rx_src_addr[1] = hdr->source[1];
    rx_hdr->rx_src_addr[2] = hdr->source[2];
    rx_hdr->rx_src_addr[3] = hdr->source[3];
    rx_hdr->rx_src_addr[4] = hdr->source[4];
    rx_hdr->rx_src_addr[5] = hdr->source[5];

    rx_hdr->rx_dst_addr[0] = hdr->dest[0];
    rx_hdr->rx_dst_addr[1] = hdr->dest[1];
    rx_hdr->rx_dst_addr[2] = hdr->dest[2];
    rx_hdr->rx_dst_addr[3] = hdr->dest[3];
    rx_hdr->rx_dst_addr[4] = hdr->dest[4];
    rx_hdr->rx_dst_addr[5] = hdr->dest[5];

    rx_hdr->rx_frame_type  = frame;     /* no frame class info */
    rx_hdr->rx_error_level = hdr->errors;

    bias = packstart;

    irqstate = disable_irqs();

    setup_read( pifp, bias, packlen );
    microsecond_delay(10);

    for (tp = mp->m_next; tp != NULL; tp = tp->m_next)     /* Skip the rx_hdr holding 1st mbuf */
    {
        void *to = mtod( tp, void* );
/*         int state; */

        msize = tp->m_len;
        if ( msize > packlen )
            msize = packlen;

        tp->m_type = 1; /*MT_DATA;*/    /* Internet should ideally do this! */

        /* 0.23: try not to read so much in one go? */
/*         do { */
/*             state = pifp->chip->ISR; */

/*             setup_read(pifp, bias, msize); */
            fast_read( to, rp, msize );

            /* 0.25: see whether int during DMA is screwing us */
/*             if ( state != pifp->chip->ISR ) */
/*             { */
/*                 STAT32( INCOMPLETE_RECEIVES, 1 ); */
                /* Okay, they aren't incomplete, but it wasn't being used for
                 * anything else.
                 */
/*             } */
/*         } while ( state != pifp->chip->ISR ); */

        packlen -= msize;
        bias += msize;
    }

    kill_dma( pifp );

    restore_irqs( irqstate );

    return mp;
}


typedef struct
{
    struct generic_hdr *hdr;
    u_int hdrptr;
    int packlen;
} card_packetproc_args;

static struct mbuf *card_packetproc( vifstr *vifp, void *data )
{
    card_packetproc_args *cpa = (card_packetproc_args*) data;

    return wrap_packet( vifp, cpa->hdr,
                        cpa->packlen,
                        RXWRAP(cpa->hdrptr + sizeof_generic_hdr) );
}


/*****************************************************************************/

#if DEBUG
/*

packlen < 46
npp < RXSTART
npp > RXEND
packlen > 1504
dribble error
too short error
too lon

*/

static void oops(pifstr *pifp, int *ip)
{
    debugstr("\n@@@@ Seem to have gone wrong!\n");

    debugstr("pifp->rx.current is ");
    debughexcr(pifp->rx.current);

    debughex(ip[0]); debugstr(" ");
    debughex(ip[1]); debugstr(" ");
    debughex(ip[2]); debugstr(" ");
    debughex(ip[3]); debugstr(" ");
    debughex(ip[4]); debugstr("\n");

    oopscount += 1;

    return;
}

#endif

#if 0
static void zero_rx_buffer(ifstr *ifp)
{
    int ptr;
#if VERBOSEDEBUG
    debugstr("\n\n@@@@ Zeroing the receive buffer\n\n");
#endif
    memset(onekdata, 0, 1024);

    for (ptr = RXSTART; ptr < RXLIMIT; ptr += /*1024*/RXLIMIT)
    {
        write_rx_space(ifp, ptr, onekdata, 1024);
    }
}
#endif

#define LEVEL(clnt)         ((clnt)->errlvl >= this_error && (clnt)->addrlvl >= this_addr)

int check_for_bogons( struct mbuf *mp, vifstr *vifp )
{
#if 0
    /* WARNING, EXTREME KLUDGE... DO NOT SHIP A DRIVER WITH THIS CODE IN */

    struct mbuf *tp = mp->m_next;
    char *ptr = mtod( tp, char* );  /* skip header */
    int ok = (ptr[16]==1 && ptr[12]==1)
            || ( ptr[19]==1 && ptr[15]==1);  /* IP 1.x.x.x */

    if ( m_count_bytes( mp ) < 1000 )
        return 1; /* allow these */

    if ( !ok )
        STAT32( INCOMPLETE_RECEIVES,1 );

    return ok;
#else
    return 1;
#endif
}

typedef struct mbuf *(*GetPacketProc)( vifstr *vifp, void *data );

static void despatch_packet2( vifstr *vifp, GetPacketProc gpp, void *gppdata,
                              u_char *dest_addr, unsigned int this_error,
                              unsigned int ftype, int packlen )
{
        client *clnt = NULL;
        struct mbuf *mp = NULL;
        unsigned int this_addr;

        this_addr = determine_addr_level( vifp->etheraddr, dest_addr );


        if (ftype <= ETHERMTU)              /* The simple case! */
        {
            if ((clnt = vifp->ieee8023_hole) != NULL && LEVEL(clnt))
                mp = (*gpp)(vifp,gppdata);
        }
        else
        {
            for (clnt = vifp->clients; clnt != NULL && FRMTYPOF(clnt->frmlvl) != ftype; clnt = clnt->next)
                ;

            /* Not specifically claimed - see if sink or monitor want it */

            if (clnt == NULL)
                clnt = vifp->ether2_hole;

            if (clnt != NULL && LEVEL(clnt))
                mp = (*gpp)(vifp,gppdata);
        }

        /* 0.31: */
/*         microsecond_delay(200); */

        if (clnt != NULL && mp != NULL && check_for_bogons(mp,vifp) )
        {
#if 0
	    debugstr("dib:   "); debughexcr((int) &vifp->dib);
	    debugstr("mp:    "); debughexcr((int) mp);
	    debugstr("proto: "); debughexcr((int) clnt->protocol_handle);
	    debugstr("Rcv fn:"); debughexcr((int) clnt->rcv_fn);
#endif

            debugstr( "Calling rcv_fn (gpp=" );
            debughex( (int)(void*)gpp );
            debugstr( ") ..." );

            do_rcv_fn( &vifp->dib, mp, clnt->protocol_handle,
                       clnt->rcv_fn);

            debugstrcr( "... done" );

            STAT32(DELIVERED_PACKETS, 1);
            STAT64(BYTES_RECEIVED, packlen);

            switch (this_addr)
            {
                case ADDRLVL_NORMAL:
                    STAT32(BROADCASTS_RECEIVED, 1);
                    break;

                case ADDRLVL_MULTICAST:
                    STAT32(MULTICASTS_RECEIVED, 1);
                    break;

                case ADDRLVL_PROMISCUOUS:
                    STAT32(MONITOR_RECEIVES, 1);
                    break;

            } /* endswitch */

        }
	else
	{
	    if (mp != NULL)
	    {
	        if ( mp->m_next )
                    m_freem(mp->m_next);
		mp->m_next = NULL;
		m_free( mp );
	    }
	    STAT32(UNDELIVERED_PACKETS, 1);
	}
}


/* Even compared with the stuff you usually find in ethernet drivers,
 * this is a grebulous hack.
 * It just drops packets on the floor if there aren't at least two
 * large mbufs free.
 */

static int check_plenty_mbufs( void )
{
    _kernel_swi_regs r;
    unsigned int largembufsfree;

    r.r[0] = 1;     /* ST_READ */
    r.r[1] = 10;    /* mbufstat_LFREE */
    r.r[2] = 10;    /* mbufstat_LFREE */
    r.r[3] = (int)&largembufsfree;
    r.r[4] = sizeof( unsigned int );
    _kernel_swi( 0x6a583, &r, &r );     /* XMbuf_Statistic */
    return ( largembufsfree > 1 );
}

static void received(register pifstr *pifp)
{
#define RXHDR                ((rxhdr *)(&bighdr.first.word))
    struct generic_hdr bighdr;
    u_int packlen;
    int current;
    void *rp = (void *) &(pifp->chip->DATA);
    vifstr *vifp = pifp->primary; /* only for error stats */

#if DEBUG && 0
    debugstr("rx @ ");
    debughex(MONOTIME);
    debugstr(": ");
#endif

    /* IRQs disabled here */
    pifp->chip->CR = my_cr_PAGE1;
    current = pifp->chip->CURR;
    pifp->chip->CR = my_cr_PAGE0;

#if DEBUG && 0
    debugstr("Current page: ");
    debughexcr(current);
#endif

    while (pifp->rx.current != current && pifp->rx.current != 0xff)
    {
        u_int npp, hdrptr, ftype;
        bits errors = 0;
        unsigned int this_error;
        /* now in despatch_packet
        unsigned int this_addr;
        client *clnt = NULL;
        struct mbuf *mp = NULL;
        */

        setup_read( pifp,
                    hdrptr = (pifp->rx.current << 8),
                    sizeof_generic_hdr );   /* was sizeof(bighdr) */

        /* Size here is specifically the 6:6:2 header only */

        slow_read (&bighdr, rp, sizeof_generic_hdr);

#if DEBUG
#if !VERBOSEDEBUG
	if ((RXHDR->rcv_stat & ~my_rsr_PHY) != 1)
#endif
	{
	    debugstr("Status: "); debughexcr(RXHDR->rcv_stat);
	    debugstr("Next packet: "); debughexcr(RXHDR->rcv_npp);
	    debugstr("Bytes: "); debughexcr(RXHDR->rcv_bytes);
	}
#endif
        if ((RXHDR->rcv_stat & (my_rsr_PRX | my_rsr_CRC | my_rsr_FAE)) == 0)
	{
#if DEBUG
	    debugstr("Nothing in recv header\n");
	    oops(pifp, (int *) &bighdr);
#endif
            break;
	}
        /*****************************************************************************/

        /* From here on, there is at least a header to discard */

	STAT32(PACKETS_RECEIVED, 1);

        npp = RXHDR->rcv_npp;

	packlen = RXHDR->rcv_bytes;

        if (packlen < 64)
        {
            debugstr("Too small packet - skipping to next header: ");
            debugdec(packlen);
            debugstr(" : ");
            debughexcr(npp);

            pifp->rx.current = npp;
            continue;
        }

        packlen -= RXHDRSIZE + ETH_HDRSIZE;

#if DEBUG
        if (packlen > 1504)
        {
            debugstr("@@@@ packlen ");
            debugdeccr(packlen);
        }
#endif

#if 0
	debugstr("About to reenable IRQs, IRQB status: ");
	debughex(*IOMD_IRQB_STATUS);
	debugstr(" mask:");
	debughexcr(*IOMD_IRQB_MASK);
#endif
        enable_irqs();  /* was restore_irqs(highest_irqs); */


        /* NOTE: We ALWAYS present the frame type in local byte order */
        /* Reversal is needed to use bighdr.ftype to transmit from directly */

        ftype = ((bighdr.ftype & 0x00ff) << 8) | ((bighdr.ftype & 0xff00) >> 8);

        bighdr.ftype = ftype;                           /* Emulators need to swap again! */

#if DEBUG
        if (packlen > 1504 ||
            npp < HI(RXSTART) ||
            npp > HI(RXLIMIT)
            )
            if (TST(UP))
                        oops(pifp, (int *) &bighdr);
#endif

        errors |= RXHDR->rcv_stat & (my_rsr_CRC | my_rsr_FAE);

        if (errors != 0)
        {
            debugstr("\n@@@@ ERRORS: ");
            debughex(errors);
            debugstr(" ");

            this_error = ERRLVL_ERRORS;

            if (errors & my_rsr_CRC)
            {
                debugstr("crc ");
                STAT32(RECEIVE_CRC_ERRORS, 1);
                STAT32(RECEIVE_ERRORS, 1);
            }

            if (errors & my_rsr_FAE)
            {
                debugstr("too small");
                STAT32(RECEIVES_TOO_SMALL, 1);
                STAT32(RECEIVE_ERRORS, 1);
            }

        }


        bighdr.errors = errors;

        this_error = (errors ? ERRLVL_ERRORS : ERRLVL_NO_ERRORS);

#if VERBOSEDEBUG
        debugstr("Despatch packet: frame ");
        debughex(ftype);
        debugstr(", addr ");
        debugdec(this_addr);
        debugstr(", error ");
        debugdeccr(this_error);
#endif

/*         if ( check_plenty_mbufs() ) */
        {
            card_packetproc_args cpa;
            cpa.hdr = &bighdr;
            cpa.packlen = ( ftype <= ETHERMTU ) ? ftype : packlen;
            cpa.hdrptr = hdrptr;

                despatch_packet2( pifp->primary,
                                  &card_packetproc, (void*) &cpa,
                                  bighdr.dest, this_error,
                                  ftype, packlen );
            if ( pifp->secondary )
                despatch_packet2( pifp->secondary,
                                  &card_packetproc, (void*) &cpa,
                                  bighdr.dest, this_error,
                                  ftype, packlen );
        }

        disable_irqs();

        /* That's the end of despatching the packet */

        pifp->rx.current = npp;                                       /* Avoid other silicon bug */

#if VERBOSEDEBUG
        debugstr("received: ifp->rx.current is now ");
        debughexcr(ifp->rx.current);
#endif

        /* Reflect new write protect limit */
	if (npp - 1 < HI(RXSTART))
	    pifp->chip->BNRY = HI(RXLIMIT) - 1;
	else
	    pifp->chip->BNRY = npp - 1;
#if VERBOSEDEBUG
        debugstr("boundary set to ");
        debughexcr(ifp->chip->BNRY);
#endif
    }

    /* assert irqs disabled here */

    /* Moved outside loop to reduce overhead and avoid a worst case type scenario */

    return;

}

#undef RXHDR

/* This function tries to tidy up after an RX overflow */

static void receive_overflow(register pifstr *pifp, const highest_irqs)
{
    int txing;
    u_int tout;
    int fallback;
    int isr;

    debugstrcr("Dealing with buffer overflow");

    txing = pifp->chip->CR;
    isr = pifp->chip->ISR;       /* HERE, BEFORE the stop */

    pifp->chip->CR = my_cr_INIT_P0; /* Stop and abort */
    tout = MONOTIME + 2;

    /* We need to wait 1600us for any packet in transit to finish.  We
     * use two methods to wait for this.  We limit the number of times
     * we read it to 1600us times 4MHz = 6400 cycles.  Also, if we
     * think that more than 1 centi-second has passed we drop out.
     * This can happen if for some reason the cycles to the Myson take
     * longer than we expect.  */

    /* Let's be nice guys and spin with IRQs on (we ned then for MONOTIME) */
    pifp->chip->IMR = 0;            /* We don't want any ourselves though. */
    restore_irqs(highest_irqs);

    for(fallback = 0; fallback < 6400; fallback++)
    {
	if (MONOTIME >= tout)
	    break;
    }

    disable_irqs();
    pifp->chip->IMR = my_imr_PRXE | my_imr_PTXE | my_imr_RXEE | my_imr_TXEE
                     | my_imr_OVWE;
    /* No ints from remote DMA */

    pifp->chip->RBCR0 = 0;		/* Clear down the remote byte count */
    pifp->chip->RBCR1 = 0;		/* ... both bytes of it */

    if ((txing & my_cr_TXP) && (( isr & (my_isr_PTX | my_isr_TXE)) == 0))
	txing = 1;
    else
	txing  = 0;

    pifp->chip->LCR = my_lcr_LB0;	/* Set the card to internal loopback */
    pifp->chip->CR = my_cr_STA;		/* Restart the chip, but looped back */

    debugstr("Chip in loopback, txing flag = ");
    debugdeccr(txing);

    received(pifp);

    pifp->chip->ISR = my_isr_OVW;	/* Make sure the overflow bit is clear */
    pifp->chip->LCR = 0;

    if (txing)
    {
	/* Restart the transmision */
	start_tx(pifp, pifp->tx.buf_last_tx, (pifp->tx.buf_last_tx == TXBUF0) ? pifp->tx.buf0_size : pifp->tx.buf1_size );
    }

    debugstrcr("Overflow dealt with");
}

/*****************************************************************************
 *
 * process:
 *
 * This is the function that despatches all the work. Invoked with a
 * suggestion of where it is known we have some work to do, so we start
 * with the suggestion to keep the latency down. This function is called from
 * either the interrupt handler or the transmit SWI wrapper. It is called with,
 * and returns with, interrupts disabled. Upon return, there is no further
 * work to do and the active semaphore has been decremented. It is "likely"
 * that the only work we will perform is that suggested.
 */

static int checkflag( sema *pFlag )
{
    int irqstate = disable_irqs();
    int result;

    result = *pFlag;
    *pFlag = 0;
    restore_irqs( irqstate );
    return result;
}

extern void process(const highest_irqs)
{
    register pifstr *pifp;
    int f;

#if DO_ASSERTS
    assert(active == 1);
    assert(want_service == 1);
#endif

    do
    {
        f = 0;

        ITERATE_OVER_ACTIVE_PCARDS
        {
            /* This used to test tx first */

            if ( checkflag( &pifp->of_cause ) )
            {
                pifp->rx_cause = 0; /* Force this because we will handle pending receives in receive_overflow() */
                alterLED(pifp, 1);
                receive_overflow(pifp, highest_irqs);
                f = 1;
                alterLED(pifp, 0);
            }

            if ( checkflag( &pifp->rx_cause) )
            {
                alterLED(pifp, 1);
                received(pifp);
                f = 1;
                alterLED(pifp, 0);
            }

            if ( checkflag( &pifp->tx_cause ) )
            {
                alterLED(pifp, 1);
                transmitted( pifp );
                f = 1;
                alterLED(pifp, 0);
            }
        }
    } while (f);

#if DO_ASSERTS
    assert( disabled_irqs == disable_irqs() );
#endif

    want_service = 0;
}

static void myson_buffer_stuff(u_char *dest_addr, u_char *src_addr, u_int frmlvl,
			       struct mbuf *data, u_int page, pifstr *pifp)
{
    u_int buflen, datalen;
    u_int ftype;
    u_int ptr;
    tx_t *tx;
    void *rp;
    struct mbuf *mp;
    int irqstate;

#if DEBUG
    debugstr("Stuffing buffer at page ");
    debugdeccr(page);
#endif

    rp = (void *) &(pifp->chip->DATA);
    tx = &pifp->tx;

/*     restore_irqs(entry_irqs); */

    ptr = page << 8;

    ftype = ((frmlvl >> 8) & 0xff) | ((frmlvl & 0xff) << 8);

    irqstate = disable_irqs();  /* In fact we rather think they're disabled
                                 * anyway, but this can't hurt */

    setup_write(pifp, ptr, ETH_HDRSIZE);

    slow_write(dest_addr, rp, ETH_ADDRSIZE);
    slow_write(src_addr, rp, ETH_ADDRSIZE);
    slow_write(&ftype, rp, 2);      /* was ETH_ADDRSIZE (?) */

    ptr += ETH_HDRSIZE;
    datalen = 0;
    for (mp = data; mp != NULL; mp = mp->m_next)                         /* Chain of mbufs for packet data */
    {
/*         int state; */

/*         do { */
/*             state = pifp->chip->ISR; */
            setup_write(pifp, ptr, (mp->m_len + 1) & (~1) );
            microsecond_delay(10);
	    fast_write(mtod(mp, void*), rp, (mp->m_len + 1) & (~1) );
/* 	    if ( state != pifp->chip->ISR ) */
/* 	    { */
/* 	        vifstr *vifp = pifp->primary; */
	        /* not really incomplete */
/* 	        STAT32( INCOMPLETE_RECEIVES, 1 ); */
/* 	    } */
/* 	} while ( state != pifp->chip->ISR ); */

        ptr += mp->m_len;
	datalen += mp->m_len;
    }

    kill_dma( pifp );

    buflen = ETH_HDRSIZE + (datalen < ETH_DATAMINSIZE ? ETH_DATAMINSIZE : datalen);

    if (page == TXBUF0)
	tx->buf0_size = buflen;
    else
	tx->buf1_size = buflen;

    restore_irqs( irqstate );
/*     disable_irqs();     * Before possible for this packet to have been transmitted * */
}


/*****************************************************************************
 *
 * Implements the EtherX_Transmit SWI:
 *
 * The new send routine which wraps all the loading actions up into
 * one function. This should enhance throughput a small degree. A number of
 * subtle improvements have been made to the code: mainly, attempting to
 * interleave accesses to hardware with real processing to maximise FIFO
 * concurrency. C's goto statement has been used as well, but the compiler
 * successfully defeats some of these optimisations by reordering my code!
 */

extern _kernel_oserror *transmit(vifstr *vifp, args_Transmit *args, struct mbuf *data, const entry_irqs)
{
    /* entered with irqs disabled. exits with irqs disabled */
    pifstr *pifp = vifp->raw;
    struct mbuf *mp = data;
    int rc = ENOERR;
    void *rp;
    u_int buflen;
    tx_t *tx;
    /* If we are concerned about the length, this has already been checked and faulted if applicable */
    int datalen;

    rp = (void *) &(pifp->chip->DATA);

    tx = &pifp->tx;

#if VERBOSEDEBUG
    debugstr("TX called @ ");
    debugdeccr(MONOTIME);
#endif

#if TRANSFER_PACKETS
    /* Offer it to the other interface */
    if ( vifp->other && ( vifp->other->flags & FLAG_UP ) )
    {
        fake_packetproc_args fpa;

        debugstr( "Offering packet to other interface ...\n" );

#if 0
        static volatile int threaded = 0;
        int irq_now;

        disable_irqs();     /* they should be already, but let's make sure */

        if ( !threaded )
        {
            threaded = 1;
#endif
            fpa.src_addr = ( (args->flags & Transmit_UseSuppliedAddress) != 0)
                                 ? args->src_addr
                                 : OWN_ADDRESS;
            fpa.dest_addr = args->dest_addr;
            fpa.ftype = args->frmlvl;
            fpa.tx = data;

            restore_irqs(entry_irqs);

            despatch_packet2( vifp->other, &fake_packetproc, (void*) &fpa,
                              fpa.dest_addr, 0 /* no rx errors! */, fpa.ftype,
                              m_count_bytes(mp) );

            disable_irqs();

#if 0
            threaded = 0;
        }
#endif

        debugstr( "... done\n" );
    }
#endif /* TRANSFER_PACKETS */

    if (tx->bufs_used > 1 || inselftest)
    {
	txblob *bp;

	/* We have no space on card to send the packet so we will need to queue it up */
	if (tx->inuse_count >= MAXTXBLOB)
	{
	    debugstr( "*** transmit: NotEnoughMbufs 'cos " );
	    debugdec( tx->inuse_count );
	    debugstr( " blobs in use\n" );
	    goto error_nobufs;
	}

	debugstr( "transmit: queueing\n" );

	bp = &(tx->blobs[tx->end_index]);

	if (++tx->end_index == MAXTXBLOB)
	    tx->end_index = 0;
	tx->inuse_count++;

/* 	restore_irqs(entry_irqs); */

	memcpy(bp->dstaddr, args->dest_addr, 6);
	memcpy(bp->srcaddr, ((args->flags & Transmit_UseSuppliedAddress) != 0) ? args->src_addr : OWN_ADDRESS, 6);
	bp->ftype = args->frmlvl;

	if (args->flags & Transmit_ProtocolFrees)
	    bp->head = m_copy(data, 0, M_COPYALL);
	else
	    bp->head = m_ensure_safe(data);

/* 	disable_irqs(); */
    }
    else
    {
	debugstr( "transmit: stuffing\n" );

	datalen = m_count_bytes(mp);

	buflen = ETH_HDRSIZE + ((datalen < ETH_DATAMINSIZE) ? ETH_DATAMINSIZE : datalen);

	myson_buffer_stuff(args->dest_addr,
	        	   ((args->flags & Transmit_UseSuppliedAddress) != 0) ? args->src_addr : OWN_ADDRESS,
			   args->frmlvl,
			   data,
			   (tx->buf_last_tx == TXBUF0) ? TXBUF1 : TXBUF0,
			   pifp);

	if ((args->flags & Transmit_ProtocolFrees) == 0)
	    m_freem(data);

        /* claim this buffer as belonging to this vif (so success/fail gets
         * logged in its stats)
         */
        if ( tx->buf_last_tx == TXBUF0 )
            pifp->tx1owner = vifp;
        else
            pifp->tx0owner = vifp;

	tx->bufs_used++;

	if (tx->bufs_used == 1)	/* If there is exactly one packet then we just put it there */
	{
	    tx->buf_last_tx = (tx->buf_last_tx == TXBUF0) ? TXBUF1 : TXBUF0;

	    if ( !TST(UP) )
	    {
	        debugstr( "transmit() when not UP\n" );
	        return NULL;
	    }

	    start_tx(pifp, tx->buf_last_tx, buflen);
	}

    }

 done_sending:			/* Entering via goto has IRQs off */

    return rc == 0 ? NULL : makeerror(vifp->unit, rc);

/*****************************************************************************/

 error_nobufs:
    rc = ENOMEM;
    STAT32(SEND_OVERFLOWS, 1);
    STAT32(SEND_ERRORS, 1);
    goto done_sending;
}



/*****************************************************************************
 *
 * irq_handler:
 *
 * This is the routine entered when we detect an interrupt relevent
 * to our card. It has the task of noting acknowleding all interrupts
 * associated with our cards and ensuring that the xfer thread is
 * active. This routine is entered with interrupts disabled; they are only
 * enabled by lower level threads; never in this function itself.
 */

extern int irq_handler(_kernel_swi_regs *regs, void *pw)
{
    register pifstr *pifp;
    int serviced = 0;

#if DEBUG && 0
    debugstr("interrupt @ ");
    debugdec(MONOTIME);
    debugstr(": ");
#endif

    ITERATE_OVER_ACTIVE_PCARDS
    {
	const unsigned int stat = pifp->chip->ISR;
	vifstr *vifp = pifp->primary; /* only used to accumulate stats */

#if DEBUG && 0
	debugstr("Status = 0x");
	debughexcr(stat);
#endif

	if (stat & (my_isr_PTX | my_isr_TXE))
	{
	    if (stat & my_isr_TXE )
	    {
		debugstr("Transmission error, TSR = 0x");
		debughexcr(pifp->chip->TSR);
	    }

	    STAT32(SEND_INTERRUPTS, 1);
	    pifp->tx_cause = 1;
	    serviced = 1;
	}

	if (stat & my_isr_OVW)
	{
	    debugstr("\n\n\n@@@@ Buffer overflow error\n\n\n\n");
	    STAT32(RECEIVE_OVERFLOWS, 1);
	    pifp->of_cause = 1;
	    serviced = 1;
	}
	else if (stat & (my_isr_PRX | my_isr_RXE)) /* Only call this when there there is no overflow */
	{
	    STAT32(RECEIVE_INTERRUPTS, 1);
	    pifp->rx_cause = 1;
	    serviced = 1;
	}

	if (stat & my_isr_RXE )
	{
	    debugstr("Reception error, RSR=");
	    debughexcr(pifp->chip->RSR);
	}

	if (stat & my_isr_CNT)
	{
	    debugstr("Counter overflow error\n");
	}

	if (stat)
	{
	    /* Ack any/all interrupts, even (especially) ones that should not be there */
	    pifp->chip->ISR = stat & (my_isr_PRX | my_isr_PTX | my_isr_RXE | my_isr_TXE | my_isr_OVW | my_isr_CNT | my_isr_RDC );
	}
	else
	{
	    debugstr("Interupt without any flags; acknowledging all interupts\n");
	    pifp->chip->ISR = (my_isr_PRX | my_isr_PTX | my_isr_RXE | my_isr_TXE | my_isr_OVW | my_isr_CNT | my_isr_RDC );
	}
    }

    if (serviced)
    {
        want_service = 1;

        if (active == 0)
        {
            /*const entry_irqs =*/ (void) disable_irqs();  /* experi */

            active = 1;

            process(enabled_irqs);

            active = 0;
        }

#if IRQS_IRQV
        return VIA_STACK;       /* 0 == handled, 1 == not handled */
#elif IRQS_DEVICE
        return VIA_R14;
#else
#error You will need to tell me how to return from this type of interupt handler.
#endif

    }

    else

    {
        return VIA_R14;         /* 0 == handled, 1 == not handled */
    }

    UNUSED(regs);
    UNUSED(pw);
}

/* eof central.c */
