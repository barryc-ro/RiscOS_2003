/*1 data.c */

#include "all.h"

char *copyright = "\nCopyright (C) 1993-1995 ANT Ltd. All rights reserved.\n";

int number_of_pcards = 0;
int number_of_vcards = 0;
pifstr *all_pcards = NULL;
vifstr *all_vcards = NULL;
vifstr *active_vcards = NULL;
pifstr *active_pcards = NULL;
vifstr *utovifp[MAXUNITS];
long brake = 0;
void *module_wsp = 0;                             /* Private word value */
char logstr[128] = { 0 };                      /* Save message for later buffer */
/* errblk also used by test_result() */
_kernel_oserror errblk;                                 /* Error block & testcode scratch space */
int last_log_was_unknown_rx = 0;                  /* Worth optimising */
sema active = 0;                                  /* Process control */
sema want_service = 0;
int num_pibelem = 0;                              /* How many are active */
sema doing_eainfo = 0;                            /* Interlock */
sema promis_count = 0;
sema test_tx_sema;
sema test_rx_sema;
u_int tests_failed;
ifstr *test_ifp = NULL;
void *onekdata;
time_t initialise_time;
volatile int seen_mbuf_manager = 0;

#if HANDLE_POCKET
volatile unsigned char *portbase;
int parallel_file_handle;
#endif /* HANDLE_POCKET */

#if DEBUG
int totalbig = 0, totalsmall = 0;
int swi_sp = 0x7fffffff;
int irq_sp = 0x7fffffff;
debugum *debugums = NULL;
int debug_index = 0;
int oopscount = 0;
#endif

struct mbctl mbctl =
{
        0,

        sizeof(struct mbctl),
        MBUF_MANAGER_VERSION,
        0ul,
        0,
        ETHERMTU,
        0,
        0ul,
};

/* This table is indexable by error number */

char *ea_errmesses[E_MAXIMUM_ERROR] =
{
    /* ENOERR              */ "No error",
    /* EBADARGS            */ "Bad arguments",
    /* EBADCONF            */ "Bad configuration command",
    /* ENOIF               */ "Interface does not exist",
    /* EIFDOWN             */ "Interface not active",
    /* EIFFAULTY           */ "Interface faulty",
    /* EIFDISABLED         */ "Interface disabled",
    /* ENOHWADDR           */ "Cannot determine hardware address",
    /* ENOMBUFS            */ "Not enough available buffers",
    /* ENOMEM              */ "Not enough available memory",
    /* ETXBLOCK            */ "Transmission blocked",
    /* EHW                 */ "Unexpected internal hardware error",
    /* ESW                 */ "Unexpected internal software error",
    /* ENOCONTROLLER       */ "No controller detected",
    /* EREG                */ "Controller register error",
    /* ETXINT              */ "Transmit interrupt failure",
    /* ETXCRC              */ "CRC tx hw failed tests",
    /* ETXHW               */ "Tx hw failed tests",
    /* ERXINT              */ "Receive interrupt failure",
    /* ERXCRC              */ "CRC rx hw failed tests",
    /* ERXHW               */ "Rx hw failed tests",
    /* ELOOPFAIL           */ "Loopback tests failure",
    /* ELIVEFAIL           */ "Live net tests failure",
    /* ESTUCKINT           */ "Stuck interrupt tests failed",
    /* ENETJAMMED          */ "Net is jammed?",
    /* EBUFERR             */ "Buffer memory error",
    /* EINTERR             */ "Hardware interrupt error",
    /* ENOMEMMAN	   */ "No Mbuf Manager",
#if HANDLE_POCKET
    /* EBADPARPORT         */ "Can't open parallel port",
    /* ENOPARPORT          */ "Needs machine with a bidirectional parallel port"
#endif /* HANDLE_POCKET */
};
