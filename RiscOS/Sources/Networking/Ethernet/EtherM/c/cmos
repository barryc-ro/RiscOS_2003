/* cmos.c -*-C-*- */

#include "all.h"

#if 0					/* doesn't get V set for R0 to be smart! */
#define cmos_bad_configuration_option       ( (_kernel_oserror *) 0 )
#else
#define cmos_bad_configuration_option       makeerror(NOCARDUNIT, EBADCONF)
#endif
#define cmos_numeric_parameter_needed       ( (_kernel_oserror *) 1 )
#define cmos_parameter_too_large            ( (_kernel_oserror *) 2 )
#define cmos_too_many_parameters            ( (_kernel_oserror *) 3 )

/*****************************************************************************
 *
 * Parse a number using OS_ReadUnsigned to pick up OS conventions on base
 * indication. The number is assumed to be terminated by a character <= 32.
 * The string pointer is updated.
 */

extern _kernel_oserror *parse_number(char **str, unsigned max, unsigned *val)
{
    _kernel_swi_regs r;
    _kernel_oserror *ep;

    r.r[0] = (int) ( 10u | (1u << 29u) | (1u << 31u) );
    r.r[1] = (int) *str;
    r.r[2] = (int) max;

#if DEBUG && 0
    printf("parse_number: %x, %x, %d\n", r.r[0], r.r[1], r.r[2]);
#endif

    if ( (ep = _kernel_swi(XOS_Bit + OS_ReadUnsigned, &r, &r) ) != NULL )
       return ep;

    *str = (char *) r.r[1];
    *val = (unsigned) r.r[2];

#if DEBUG && 0
    printf("end at %x, value %x\n", r.r[1], r.r[2]);
#endif

    return NULL;
}


/*****************************************************************************
 *
 * CMOS RAM support.
 *
 * 1) On start up we verify the integrity of the CMOS RAM and default it
 *    if it looks suspect
 * 2) Having stabalised CMOS RAM, we make a copy of the operating values
 *    in the relevent ifstr structure.
 * 3) Whenever a configuration command is issued, we attempt to write the
 *    value to CMOS RAM.
 */

static char *cmos_keywords[] =
{
    "Disable",			"Enable",
    "Strict",			"Ignore",
    "NoLiveWireTest", 		"LiveWireTest",
    "Terse",			"Verbose",
    "Single",                   "Multiple",
    "Default"			/* keyword for configuration */
    };


#define cmos_used_bits		5
#define cmos_max		(cmos_used_bits * 2 + 1)

/* Dont't call this if the interface is active!  */

static void cmos_decode(register pifstr *pifp)
{
    pifp->flags = (int) ((((int) pifp->flags) & ~FLAGS_CMOS_MASK) | ((pifp->cmos) & FLAGS_CMOS_MASK));
}

#if HAS_CMOS
/* Check parity: 1 is good parity, 0 is bad parity */

static int cmos_parity(u_char byte)
{
    int set = 0;
    u_int ix = 1u;

    for (; ix != 256; ix <<= 1u)
        if (ix & (u_int) byte)
            ++set;

    return set & 1;
}
/* PS what's wrong with byte^=(byte>>4);byte^=(byte>>2);byte^=(byte>>1);byte&=1
 */

/* Base of the 4 bytes each podule has in cmos ram */

static int cmos_base(int card)
{
    /* @@@@ move to asm */

    _kernel_swi_regs r;
    r.r[3] = card;
    _kernel_swi(XOS_Bit | Podule_HardwareAddress, &r, &r);

    return r.r[3] & 0xfff;
}

/* write pifp configuration for given pifstr structure */

static void cmos_write(register pifstr *pifp)
{
    const int cmosbase = cmos_base(pifp->slot);
    u_char uc = pifp->cmos & ~ CMOS_PARITY;

    if (cmos_parity(uc) == 0)
        uc |= CMOS_PARITY;

    _kernel_osbyte(162, cmosbase, pifp->cmos = uc);
}

/* set ifp->cmos appropriately for given ifstr structure */

extern _kernel_oserror *cmos_read(register pifstr *pifp)
{
    const int cmosbase = cmos_base(pifp->slot);
    u_char ub = (u_char) ((_kernel_osbyte(161, cmosbase, 0) >> 8) & 0xff);

    if (cmos_parity(ub) == 0)                /* bad parity */
    {
	/* Does this need rephrasing? */

        printf("Warning: CMOS RAM for " TITLE_STRING " in socket %d defaulted\n", pifp->slot);
        pifp->cmos = CMOS_DEFAULT;
        cmos_write(pifp);
    }
    else
        pifp->cmos = ub;

    cmos_decode(pifp);

    return NULL;
}


static void cmos_print_status(pifstr *pifp)
{
    const socket = pifp->slot;
    const u_int ub = (u_int) pifp->cmos &~ CMOS_PARITY;
    u_int i;

    for (i = 0u; i < cmos_used_bits; i += 1u)
    {
	printf(TITLE_STRING "     %s", cmos_keywords[i * 2u + ((ub & (1u << i)) != 0u)]);
	if (number_of_pcards != 1)
	    printf(" %d", socket);
	putchar('\n');
    }

#if DEBUG && 0
    if (TST(ENABLED))
	printf("enabled\n");
    else
	printf("disabled\n");
    if (TST(IGNORETEST))
	printf("ignore test\n");
    else
	printf("use test\n");
    if (TST(LIVEWIRETEST))
	printf("live wire test\n");
    else
	printf("no live wire test\n");
    if (TST(VERBOSE))
	printf("verbose\n");
    else
	printf("terse\n");
#endif

}


static _kernel_oserror *cmos_apply(int cards, int or, int and)
{
    pifstr *pifp;

/*    debug(("cmos_apply %d %x %x\n", cards, or, and));*/

    ITERATE_OVER_ALL_PCARDS
    {
        if (cards == -1 || pifp->slot == cards)
        {
            pifp->cmos = or | (pifp->cmos & and);
            cmos_write(pifp);
        }
    }

    return NULL;
}

/*
 * Cmos commands are <word> or <word> <socket>
 */

static _kernel_oserror *cmos_configure(char *cargp)
{
#define bufsize     128

    char buf[bufsize], c, temp;
    char *cp1, *cp2;
    int ix, card;
    _kernel_oserror *ep = NULL;

    for (cp1 = cargp, cp2 = buf;				/* copy to temp buffer */
         cp2 - buf < bufsize - 1 && (c = *cp1) > 31;
         cp1 += 1, cp2 += 1
        )
        *cp2 = c;

    if (cp2 - buf >= bufsize - 1)
        return cmos_bad_configuration_option;

    *cp2 = 0;                                              /* Terminate the copy */

/*    debug(("cmos cmd is '%s'\n", buf));*/

    for (cp1 = buf;
	 (c = *cp1) != 0 && isspace(c);				/* Find start of word */
	 cp1 += 1
	 )
	;

    if (c == 0)							/* No command - invalid */
	return cmos_bad_configuration_option;

    for (cp2 = cp1;
	 (c = *cp2) != 0 && !isspace(c);
	 cp2 += 1
	 )	 						/* Find end of word */
	;

    for (temp = *cp2, *cp2 = 0,					/* Make end of word == end of string */
	 ix = 0;
	 ix < cmos_max && caseless_strcmp(cp1, cmos_keywords[ix]) != 0;
	 ix += 1
	 )
	;

/*    debug(("trying '%s'\n", cp1));*/

    if (ix == cmos_max)
	return cmos_bad_configuration_option;

/*    debug(("Matched %s with %x, %s\n", cp1, ix, cmos_keywords[ix]));*/

    /* Now see if being applied to all cards, or just a specific card */

    for (*cp2 = temp, cp1 = cp2;
	 (c = *cp1) != 0 && isspace(c);
	 cp1 += 1
	 )
	;

#if MULTIPLE_CARDS
    if (c != 0)							/* Ie more to parse */
    {
/*	debug(("Parsing socket from `%s`\n", cp1));*/

#if 0
	ep = parse_number(cp1, &card, &cp2);
#else
        ep = parse_number(& cp1, MAXUNITS - 1, (unsigned *) & card );
#endif
	if (ep != NULL)
	    return ep;

        if (hascard(card) == NOCARDPRESENT)
            return noifperror();
    }
    else
#else /* MULTIPLE_CARDS */
	UNUSED(ep);
#endif /* MULTIPLE_CARDS */
	card = -1;						/* All cards present */

    /* That above stuff is contorted! */

    if (ix == cmos_max - 1)					/* Ie default keyword */
	cmos_apply(card, CMOS_DEFAULT, 0);
    else
	cmos_apply(card,
		   (ix & 1) ? 1 << (ix >> 1) 	: 0,
		   (ix & 1) ? -1		: ~(1 << (ix >> 1))
		   );

    return NULL;

}


/*
 * cargp == 0       *configure with no option. Print syntax string and exit
 * cargp == 1       *status <blah> print status
 * cargp otherwise  *configure <option>. decode option and do it. return values
 *                  0   bad configuration option error
 *                  1   number parameter needed error
 *                  2   configure parameter too large
 *                  3   too many parameters
 *                  >3  ptr to std errblk
 */


extern _kernel_oserror *cli_configure(char *cargp, int spare)
{
#if MULTIPLE_CARDS
    static char *slotstr = "[<slot number>]\n";
#else
    static char *slotstr = "\n";
#endif
    pifstr *pifp;
    int i;

    switch ( (int) cargp )
    {
    case 0:     /* Print syntax */

	for (i = 0; i < cmos_used_bits * 2; i += 2)
	{
	    printf(TITLE_STRING "     %s | %s %s", cmos_keywords[i], cmos_keywords[i + 1], slotstr);
	}

	printf(TITLE_STRING "     %s %s", cmos_keywords[i], slotstr);

	return NULL;

    case 1:     /* Print status */

	ITERATE_OVER_ALL_PCARDS
	{
	    cmos_print_status(pifp);
	}

	return NULL;

    default:    /* Decode option */
/*	debug(("cmos conf on '%s'\n", cargp));*/

	return cmos_configure(cargp);
    }

    UNUSED(spare);
}

#else /* HAS_CMOS */

static u_int fake_cmos_byte;

extern _kernel_oserror *cmos_parse_options_string(void)
{
    char buffer[256];
    char *ct = buffer;
    char c;
    char *cp1, *cp2;
    int ix;
    int temp;
    _kernel_oserror *ep;

    /* Set teh fake byte to the default before testing to see if the sting is set */
    fake_cmos_byte = CMOS_DEFAULT;

    ep = _kernel_getenv( TITLE_STRING "$Options", ct, 256);
    if (ep != 0)
    {
	if (ep->errnum == 0x124)	/* Varable not found */
	    return NULL;
	else
	    return ep;
    }

    for(cp1 = ct; *cp1 > 31; cp1++)
	;

    *cp1 = 0;

#if DEBUG && 0
    printf("Command tail is '%s'\n", ct);
#endif

    while(1)
    {
	for (cp1 = ct;
	     (c = *cp1) != 0 && isspace(c);				/* Find start of word */
	     cp1 += 1
	     )
	    ;

	if (c == 0)
	    break;

	for (cp2 = cp1;
	     (c = *cp2) != 0 && !isspace(c);
	     cp2 += 1
	     )	 						/* Find end of word */
	    ;

	ct = cp2;

	for (temp = *cp2, *cp2 = 0,					/* Make end of word == end of string */
	     ix = 0;
	     ix < cmos_max && caseless_strcmp(cp1, cmos_keywords[ix]) != 0;
	     ix += 1
	     )
	    ;

	*cp2 = temp;						/* Put old char back */

	if (ix == cmos_max)
	    return makeerror(NOCARDUNIT, ECMOS);

	if (ix == cmos_max - 1)					/* Ie default keyword */
	    fake_cmos_byte = CMOS_DEFAULT;
	else
	{
	    if ((ix & 1))
	    {
		fake_cmos_byte |= (1 << (ix >> 1));
	    }
	    else
	    {
		fake_cmos_byte &= ~(1 << (ix >> 1));
	    }
	}
    }

    return NULL;
}

extern _kernel_oserror *cmos_read(register ifstr *ifp)
{
    ifp->cmos = fake_cmos_byte;

    cmos_decode(ifp);

    return NULL;
}

#endif /* HAS_CMOS */
