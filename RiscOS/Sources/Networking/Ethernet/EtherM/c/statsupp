/* -*-C-*-
 *
 * statsupp.c
 *
 * (C) Copyright ANT Limited 1994. All rights reserved.
 *
 * Contacts:
 *
 * Postal:  ANT Ltd., PO BOX 300, Cambridge, CB1 2EG, UK.
 * Voice:   01223 567808
 * Fax:     01223 567801
 * Email:   Support@ant.co.uk
 *
 * Author:
 *
 * History:
 *
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <assert.h>

#include "all.h"


/* return number of bytes of buffer used, rounded up to a word */

extern int INTERFACE_DRIVER_FN (char *cp, void *ifp)
{
    sprintf(cp, CARDSTR );

    return 4;

    UNUSED(ifp);
}

extern int INTERFACE_UNIT_FN (char *cp, void *vp)
{
    vifstr *ifp = (vifstr *) vp;

    sprintf(cp, "%d", ifp->unit);

    return (strlen(cp) + 2) & ~ 3;
}

extern int INTERFACE_LOCATION_FN (char *cp, void *vp)
{
    vifstr *ifp = (vifstr *) vp;

    sprintf(cp, "%s", ifp->dib.dib_location);

    return (strlen(cp) + 2) & ~ 3;
}

extern int INTERFACE_ADDRESS_FN (char *cp, void *vp)
{
    vifstr *ifp = (vifstr *) vp;

    sprintf(cp, "%02X:%02X:%02X:%02X:%02X:%02X",
	    ifp->etheraddr[0],
	    ifp->etheraddr[1],
	    ifp->etheraddr[2],
	    ifp->etheraddr[3],
	    ifp->etheraddr[4],
	    ifp->etheraddr[5]
	    );

    return (strlen(cp) + 2) & ~ 3;
}



extern int INTERFACE_CONTROLLER_FN (char *cp, void *vp)
{
    vifstr *ifp = (vifstr *) vp;

    sprintf(cp, "%s ", controller_name(ifp->raw) );

    strcat(cp, FLAVOUR_STRING);

    return (strlen(cp) + 2) & ~ 3;
}


extern int INITIALISE_TIME_FN (char *cp, void *vp)
{
    strcpy(cp, ctime(&initialise_time));

    cp[24] = 0;

    return (strlen(cp) + 2) & ~ 3;

    UNUSED(vp);
}

static void tf(char *cp, int i, char *s)
{
    cp += strlen(cp);

    sprintf(cp, "%d %s%s", i, s, i == 1 ? "" : "s");
}

#define MINUTE	60
#define HOUR	(MINUTE * 60)
#define DAY	(HOUR * 24)

extern int RUNNING_TIME_FN (char *cp, void *vp)
{
    vifstr *vifp = (vifstr *) vp;
    pifstr *pifp = vifp->raw;

    if ( VTST(UP) )
    {
	time_t secs = time(NULL) - pifp->up_time, x;

	cp[0] = 0;

	if ( (x = secs / DAY) != 0 )
	{
	    tf(cp, x, "day");
	    strcat(cp, ", ");
	}

	secs %= DAY;

	if ( (x = secs / HOUR) != 0 )
	{
	    tf(cp, x, "hour");
	    strcat(cp, ", ");
	}

	secs %= HOUR;

	if ( (x = secs / MINUTE) != 0 )
	{
	    tf(cp, x, "minute");
	    strcat(cp, ", ");
	}

	secs %= MINUTE;

	tf(cp, secs, "second");
	strcat(cp, ".");
    }
    else
	strcpy(cp, "Interface not active");

    return (strlen(cp) + 2) & ~ 3;
}



static char *find_stat_name(int n)
{
    char *cp = statistic_names;

    for ( ; n > 0; n--)
    {
	cp += strlen(cp) + 1;
    }

    return cp;
}


static unsigned int diff_sizes[] =
{
    0,      /* unused */
    4,      /* bool */
    48,     /* string */
    4,      /* 8 bit */
    4,      /* 16 bit */
    4,      /* 32 bit */
    8       /* 64 bit */
};







extern void stats_ping_pong(vifstr *ifp)
{
    unsigned int ix;

#if 0
    debugstr("ping-pong: ifp at ");
    debughex((int) ifp);
    debugstr(" accu-32 at ");
    debughex((int) ifp->accumulated.int32);
    debugstr(" act-32 at ");
    debughex((int) ifp->active.int32);
    debugstr(" pend-32 at ");
    debughexcr((int) ifp->pending.int32);
#endif

    /* ATOMIC UPDATING */

    {
        DISABLE_IRQS;

        statptr_t temp = ifp->active;

        ifp->active = ifp->pending;
        ifp->pending = temp;

        RESTORE_IRQS;
    }

    for (ix = 0; ix < NUM_INTEGER32_STATISTICS; ix++)
    {
        ifp->accumulated.int32[ix] += ifp->pending.int32[ix];
        ifp->pending.int32[ix] = 0;
    }

    for (ix = 0; ix < NUM_INTEGER64_STATISTICS; ix++)
    {
        const unsigned int l = ifp->accumulated.int64[ix * 2];
        const unsigned int r = ifp->pending.int64[ix * 2];
        const unsigned int s = l + r;
        const unsigned int c = s < l;

        ifp->accumulated.int64[ix * 2] = s;
        ifp->accumulated.int64[ix * 2 + 1] += ifp->pending.int64[ix * 2 + 1] + c;

        ifp->pending.int64[ix * 2] = 0;
        ifp->pending.int64[ix * 2 + 1] = 0;
    }

    return;
}


/* SWI function expected to switch on the two actions */



extern _kernel_oserror *statistic_describe(args_StatisticAction *args, vifstr *ifp)
{
    unsigned ix;
    short_stdesc *ixp;

    args->done = 0;
    args->used = 0;

    if (args->first > args->last || args->last > NUM_STATISTICS)
        return makeerror(ifp->unit, EBADARGS);


    for (ix = args->first, ixp = &short_stdescs[ix];
         ix <= args->last && args->bytes <= sizeof(dci4_stdesc);
         ix++, ixp++
        )
    {
        dci4_stdesc *desc = (dci4_stdesc *) args->ptr;

        desc->format = ixp->format;
        desc->presentation = ixp->presentation;
        desc->size = diff_sizes[desc->type = ixp->type];
        desc->volatility = ixp->volatility;
        desc->name = find_stat_name(ix);
        desc->name_tag = ix;
        desc->spare = 0;

        args->ptr += sizeof(dci4_stdesc);
        args->bytes -= sizeof(dci4_stdesc);
        args->done += 1;
        args->used += sizeof(dci4_stdesc);
    }

    return NULL;
}

extern _kernel_oserror *statistic_read(args_StatisticAction *args, vifstr *ifp)
{
    unsigned int ix;
    short_stdesc *ixp;
    unsigned int type;

    args->done = 0;
    args->used = 0;

    if (args->first > args->last || args->last > NUM_STATISTICS)
        return makeerror(ifp->unit, EBADARGS);

    stats_ping_pong(ifp);

    for (ix = args->first, ixp = &short_stdescs[ix];
         ix <= args->last && args->bytes <= diff_sizes[type = ixp->type];
         ix++, ixp++
        )
    {
        const tabix = ixp->tabix;
        int adj = 0;

        switch (type)
        {
            case ST_UNUSED:
                break;
#if 0
            case ST_BOOLEAN:
                /* Assume there are no more than 32 boolean statistics */
                * (int *) args->ptr = !! (ifp->bool_stats & (1u << tabix]);
                adj = sizeof(int);
                break;
#endif
            case ST_STRING:
                /* Do all the string ones by function for flexibility */
                adj = ( * string_stats[tabix] ) ( (char *) args->ptr, ifp);
                break;
#if 0
            case ST_INTEGER8:
                * args->ptr = ifp->stat_8bit[tabix];
                adj = sizeof(int);
                break;
#endif
#if 0
            case ST_INTEGER16:
                * (unsigned short *) args->ptr = ifp->stat_16bit[tabix];
                adj = sizeof(int);
                break;
#endif
            case ST_INTEGER32:
                * (unsigned int *) args->ptr = ifp->accumulated.int32[tabix];
                adj = sizeof(int);
                break;

            case ST_INTEGER64:
                ( (unsigned int *) args->ptr ) [0] = ifp->accumulated.int64[tabix * 2];
                ( (unsigned int *) args->ptr ) [1] = ifp->accumulated.int64[tabix * 2 + 1];
                adj = sizeof(int) * 2;
                break;
        } /* endswitch */

        args->ptr += adj;
        args->bytes -= adj;
        args->done += 1;
        args->used += adj;
    }

    return NULL;
}

/* EOF statsupp.c */
