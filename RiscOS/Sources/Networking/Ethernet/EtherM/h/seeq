/* card.h */

#ifndef included_card_h
#define included_card_h

#define PRODUCTION              1               /* SEZ hardware style */

/*
 * Bits common to command and status register. In the command register, these
 * bits request activation of the indicated facility; in the status register,
 * these bits reflect the activation status of the indicated facilty.
 */

#define DMAIntEnable            0x0001U        /* Wr: Enable. Rd: Is enabled */     /* 8005 only */
#define TESTIntEnable           0x0001U        /* Wr: Enable. Rd: Is enabled */     /* 8004 only */

#define RxIntEnable             0x0002U        /* Wr: Enable. Rd: Is enabled */
#define TxIntEnable             0x0004U        /* Wr: Enable. Rd: Is enabled */
#define BufferWindowEnable      0x0008U        /* Wr: Enable. Rd: Is enabled */
#define AllIntEnable            0x000fU

#define DMAInt                  0x0010U        /* Wr: Ack int. Rd: Stat of int */   /* 8005 only */
#define TESTInt                 0x0010U        /* Wr: Ack int. Rd: Stat of int */   /* 8004 only */

#define RxInt                   0x0020U        /* Wr: Ack int. Rd: Stat of int */
#define TxInt                   0x0040U        /* Wr: Ack int. Rd: Stat of int */
#define BufferWindowInt         0x0080U        /* Wr: Ack int. Rd: Stat of int */
#define AllInt                  0x00f0U

/*
 * Bits specific to the command register.
 */

#define SetDMAOn                0x0100U                                             /* 8005 only */
#define SetTESTa                0x0100U                                             /* 8004 only */

#define SetRxOn                 0x0200U
#define SetTxOn                 0x0400U

#define SetDMAOff               0x0800U                                             /* 8005 only */
#define SetTESTb                0x0800U                                             /* 8004 only */

#define SetRxOff                0x1000U
#define SetTxOff                0x2000U
#define FIFORead                0x4000U
#define FIFOWrite               0x8000U

/*
 * Bits specific to the status register.
 */

#define DMAOn                   SetDMAOn
#define RxOn                    SetRxOn
#define TxOn                    SetTxOn
#define FIFOFull                0x2000U
#define FIFOEmpty               0x4000U
#define FIFODir                 0x8000U                /* 1 == read, 0 == write */

/*
 * Bits within configuration register one
 */

#define BufferCodeMask           0x000fU
#define DMABurstIntervalMask     0x0030U                /* 8005 only */
#define DMABurstLengthMask       0x00c0U                /* 8005 only */
#define StationMask              0x3f00U                /* 8005 only */
#define AddrMatchModeMask        0xc000U

/* Bits to OR in to specify the buffer to access */

#define ReceiveAddr0               0x0000U
#define ReceiveAddr1               0x0001U              /* 8005 only */
#if 0							/* Don't use for now */
#define ReceiveAddr2               0x0002U              /* 8005 only */
#define ReceiveAddr3               0x0003U              /* 8005 only */
#define ReceiveAddr4               0x0004U              /* 8005 only */
#define ReceiveAddr5               0x0005U              /* 8005 only */
#endif
#define AddressPROM                0x0006U
#define TransmitBufferLimit        0x0007U
#define LocalBuffer                0x0008U
#define InterruptVector            0x0009U              /* 8005 only */
#define Conf3                      0x000cU              /* 8004 only */
#define ProductID                  0x000dU              /* 8004 only */
#define TestEnable                 0x000eU              /* 8004 only */
#define MulticastTable             0x000fU              /* 8004 only */

/* Bits to OR in to specify the DMA Burst Interval, in nanoseconds. 8005 only */

#define DBI_Continuous          0x0000U
#define DBI_800                 0x0010U
#define DBI_1600                0x0020U
#define DBI_3200                0x0030U

/* Bits to OR in to specify the DMA Transfer Length. 8005 only */

#define DTL_1                        0x0000U
#define DTL_4                        0x0040U
#define DTL_8                        0x0080U
#define DTL_16                       0x00c0U

/* Bits to OR in to specify which addesses to enable. 8005 only */

#define ENADDR0                 0x0100U
#define ENADDR1                 0x0200U
#define ENADDR2                 0x0400U
#define ENADDR3                 0x0800U
#define ENADDR4                 0x1000U
#define ENADDR5                 0x2000U

/* Bits to OR in to specify the Address Matching Mode. */

#define AMM_Specific                    0x0000U
#define AMM_SpecificBroadcast           0x4000U
#define AMM_SpecificBroadcastMulticast  0x8000U
#define AMM_Promiscuous                 0xc000U                /* Receive all packets */

/*
 * Bits within configuration register two.
 */

#define ByteSwap                0x0001U                /* 0 = ARM/Intel, 1 = Motorola */
#define AutoUpdWPP              0x0002U                /* Auto Update Write Protect Ptr */
#define RxTxDisable             0x0004U                /* 8004 only */
#define CRCErrorEnable          0x0008U

#define DribbleError            0x0010U
#define ShortFrameEnable        0x0020U
#define SlotSelect              0x0040U                /* 8005 only */
#define PreamSelect             0x0080U

#define AddrLength              0x0100U                /* 8005 only */
#define RecCRC                  0x0200U
#define XmitNoCRC               0x0400U
#define Loopback                0x0800U

#define ActivityLED             0x1000U                /* 0 = lit, 1 = unlit */
#define ResetCS8005             0x8000U                /* Takes <= 4 microseconds */

/*
 * Bits within configuration register three. 8004 only.
 */

#define AutoPad                 0x0001U
#define SQEEnable               0x0004U
#define Sleep                   0x0008U

#define ReadyAdvd               0x0010U
#define GroupAddr               0x0040U
#define NPPByte                 0x0080U


/*****************************************************************************
 *
 * Defines relating to the buffer memory.
 */

#define PAGESIZE        256                        /* 256 pages of 256 bytes */
#define TXPAGES         (24 * 4)                   /* Give 24k to tx space */
#define RXPAGES         (40 * 4)                   /* Give rest avail to rx space */
#define TXSIZE          (TXPAGES * PAGESIZE)       /* In bytes */
#define RXSIZE          (RXPAGES * PAGESIZE)       /* In bytes */
#define TXSTART         0                          /* Start of memory onwards */
#define TXLIMIT         TXSIZE                     /* Not suitable to write directly to ifstr */
#define RXSTART         (64 * 1024 - RXSIZE)       /* Calc start address */
#define RXLIMIT         (64 * 1024)                /* End of buffer memory */
#define RXMINAVAIL      (ETH_MAXSIZE * 2)          /* At least 2 packets worth */
#define TXMINAVAIL      8                          /* Enough for finished packet + leeway */
#define TXWRAP(x)       ((x) >= TXLIMIT ? (x) - TXLIMIT : (x))
#define RXWRAP(x)       ((x) >= RXLIMIT ? (x) - RXSIZE : (x))

/*****************************************************************************
 *
 * Defines to calculate addresses of register in a cs8005
 */

#if MEMORY_MAPPED
#define MEMC_BASE		0x03000000
#define MEMC_BASE_OFFSET	(- 0x003C0000)
#define PODULE_BASE_MASK	0x03FFF000

#define REG_STRIDE                0x40
#if PRODUCTION
#define REG_HALF_STRIDE         0x04
#else
#define REG_HALF_STRIDE         0x20
#endif
#define SLOT_STRIDE                0x4000

#define REGADDR(base, reg)	(base + reg * REG_STRIDE)
#define REGADDR8(base, reg)	((ifstrbreg *)( REGADDR(base, reg) ))
#define REGADDR16(base, reg)	((ifstrreg *)( REGADDR(base, reg) ))

#define ADDRFOR16(slot, reg)        ((ifstrreg *)(MEMC_BASE + slot * SLOT_STRIDE + reg * REG_STRIDE))
#define ADDRFOR8(slot, reg)        ((ifstrbreg *)(MEMC_BASE + slot * SLOT_STRIDE + reg * REG_STRIDE))

typedef u_int CS8005[8][REG_STRIDE / sizeof(int)];

#if HANDLE_PODULES
/* This pair are used to enable the podule interupts when the card starts up */
#define IOC_IMASKB              ((uv_int *)0x3200028)
#define IOC_IMASKB_PODULE_BIT	(1 << 5)
#endif /* HANDLE_PODULES */

#else /* MEMORY_MAPPED */
#if HANDLE_POCKET

/*****************************************************************************
 *
 * Bits to do with driving the parallel port
 */

#define IOC_IMASKA              ((uv_int *)0x3200018)
#define IOC_IRQA                ((uv_int *)0x3200014)

#define IOC_IMASKA_PPORT_BIT	(1 << 0)

#define PPORT_INTLATCH		((uv_char *)0x3350558)

#define PDEVICE "parallel:"

#define portB_DTACK   	128
#define portB_INT     	64
#define portB_AYT     	16

#define portC_CS      	8
#define portC_RW      	4
#define portC_Reset   	2
#define portC_Latch   	1

#define portC_IRQEN	16
#define portC_InMode 	32


#define PP_strobe(x) { portbase[8] = (x | portC_IRQEN); portbase[8] = portC_IRQEN; }
/* Simple way to hold the reset line down for at least 1us */
/* Note: uses the portbase directly because the ifp may not be valid here */
#define PP_reset { portbase[8] = portC_Reset; \
		   portbase[8] = portC_Reset; \
		   portbase[8] = portC_Reset; \
		   portbase[8] = portC_Reset; \
		   portbase[8] = portC_Reset; \
		   portbase[8] = portC_Reset; \
		   portbase[8] = 0 | portC_IRQEN; }

#endif /* HANDLE_POCKET */
#endif /* MEMORY_MAPPED */

/*****************************************************************************
 *
 * Structures relating to packet transmission and receiption
 */

/* Format of packet transmit header in buffer memory */

typedef struct
{
    u_char mptr;                 /* msb of next packet ptr */
    u_char lptr;                 /* lsb of next packet ptr */
    u_char txcmd;                /* transmit command byte */
    u_char txstat;               /* transmit status byte */
} txhdr;

#define TX_BABBLE                0x01        /* txcmd flags */
#define TX_COLLINT               0x02
#define TX_16COLLINT             0x04
#define TX_SUCCINT               0x08
#define TX_SQETEST               0x10        /* 8004 only */
#define TX_DATAFOLLOWS           0x20
#define TX_CONTINUE              0x40
#define TX_MUSTBESET             0x80

#define TX_BABBLED               0x01
#define TX_COLLIDED              0x02
#define TX_16COLLIDED            0x04

#define TX_COLLSCOUNTMASK        0x78        /* 8004 only */
#define TX_COLLSCOUNTSHIFT       3           /* 8004 only. >> TX.. */
#define TX_DONE                  0x80        /* in txstat, not txcmd */

#define TXHDRSIZE                sizeof(txhdr)

/* Format of packet receipt header in buffer memory */

typedef struct
{
    u_char mptr;                 /* msb of next packet ptr */
    u_char lptr;                 /* lsb of next packet ptr */
    u_char rxinfo;               /* receive information byte */
    u_char rxstat;               /* receive status byte */
} rxhdr;

#define RX_DATAFOLLOWS           0x40        /* rxinfo */
#define RX_MUSTBECLEAR           0x80

#define RX_BABBLE                0x01        /* rxstat */
#define RX_CRCERROR              0x02
#define RX_DRIBBLEERROR          0x04
#define RX_SHORTPACKET           0x08
#define RX_DONE                  0x80

#define RXHDRSIZE                sizeof(rxhdr)

/*****************************************************************************
 *
 * Top level structures. Bits actually intermixed by 8/16 bit code anyway.
 */

/*
 * For 8 bit cards
 */

typedef volatile unsigned char ifstrbreg;
typedef volatile unsigned char * ifstrbregptr;

#define LO(x)                ((x) & 0xffU)
#define HI(x)                (((x) >> 8) & 0xffU)

#if MEMORY_MAPPED
#define lohalf                0
#define hihalf                REG_HALF_STRIDE
#else /* MEMORY_MAPPED */
#define lohalf                0
#define hihalf                1
#endif /* MEMORY_MAPPED */

/*
 * For 16 bit cards
 */

typedef volatile unsigned int ifstrreg;                /* Write on top half, read on bottom half */
typedef volatile unsigned int * ifstrregptr;

#if HANDLE_PODULES
#define shup(x)                (((unsigned int)(x)) << 16)        /* Like this */
#endif
#if HANDLE_NETCARD
#define shup(x)                (((unsigned int)(x)) << 0)        /* Like this */
#endif
#define mask(x)                (*(x) & 0xffffU)                       /* The read masking */

/*
 * Macros for access to the registers in the most direct fashion
 */

#if MEMORY_MAPPED
#if CARD_WIDTH == 8
#define WRITE_REG8_DIRECT(ifp, reg, part, val) (ifp)->width.bits8.reg[(part)] = (val)
#define READ_REG8_DIRECT(ifp, reg, part) ((ifp)->width.bits8.reg[(part)])
#else /* CARD_WIDTH */
#define WRITE_REG16_DIRECT(ifp, reg, val) *((ifp)->width.bits16.reg) = shup(val)
#define READ_REG16_DIRECT(ifp, reg) (*(ifp)->width.bits16.reg)
#endif /* CARD_WIDTH */
#else /* MEMORY_MAPPED */
#if HANDLE_POCKET
#define WRITE_REG8_DIRECT(ifp, reg, part, val) pport_writehalf((ifp)->pport_regs, (val), (reg + part))
#define READ_REG8_DIRECT(ifp, reg, part) (pport_readhalf((ifp)->pport_regs, (reg + part)))
#define WRITE_REG16_DIRECT(ifp, reg, val) pport_write((ifp)->pport_regs, (val), (reg))
#define READ_REG16_DIRECT(ifp, reg) (pport_read((ifp)->pport_regs, (reg)))
#endif /* HANDLE_POCKET */
#endif /* MEMORY_MAPPED */

#endif /* included_card_h */
