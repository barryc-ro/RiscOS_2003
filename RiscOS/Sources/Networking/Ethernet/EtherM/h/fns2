/* -*-C-*-
 *
 * fns2.h   Assembler routines and other misc fns not from fns.h
 *
 * (C) Copyright ANT Limited 1994. All rights reserved.
 *
 * Contacts:
 *
 * Postal:  ANT Ltd., PO BOX 300, Cambridge, CB1 2EG, UK.
 * Voice:   01223 567808
 * Fax:     01223 567801
 * Email:   Support@ant.co.uk
 *
 * Author:
 *
 * History:
 *
 *
 */

#ifndef included_fns2_h
#define included_fns2_h


extern _kernel_oserror *irq_entry(_kernel_swi_regs regs, void *pw);
extern _kernel_oserror *st_received(_kernel_swi_regs regs, void *pw);

extern _kernel_oserror *callback_announce(vifstr **utcsop_ptr, int num_entries);
extern void callback_remove(void);

extern void do_rcv_fn(struct dib *, struct mbuf *, unsigned int pw, void *rcv_fn );

#if HAS_CMOS
extern _kernel_oserror *cli_configure(char *cargp, int spare);
#else /* HAS_CMOS */
extern _kernel_oserror *cmos_parse_options_string(void);
#endif /* HAS_CMOS */

#if DEBUG
extern int init_debug(void);
extern void debugstr(char *);
extern void debughex(int);
extern void debugdec(int);
extern void debugstrcr(char *);
extern void debughexcr(int);
extern void debugdeccr(int);
#else
#define debugstr(s)
#define debughex(x)
#define debugdec(d)
#define debugstrcr(s)
#define debughexcr(x)
#define debugdeccr(d)
#endif

#pragma check_printf_formats
/*extern void test_result(char *test, char *result, ...);*/
extern void logmsg(int unit, char *fmt, ...);
#pragma no_check_printf_formats

extern void cause_crash(void);
extern int current_sp(void);

/*****************************************************************************
 *
 * Parse a number using OS_ReadUnsigned to pick up OS conventions on base
 * indication. The number is assumed to be terminated by a character <= 32.
 * The string pointer is updated. Now in C in cmos.c
 */

extern _kernel_oserror *parse_number(char **str, unsigned max, unsigned *val);

/*****************************************************************************
 *
 * enable_irqs_flag: atomic
 * disable_irqs_flag: atomic
 *
 * Turn on/off interrupt flag somewhere.
 * (Assembler implementation)
 */

extern void enable_irqs_flag(volatile unsigned int *p, int m);
extern void disable_irqs_flag(volatile unsigned int *p, int m);

/*****************************************************************************
 *
 * disable_irqs: atomic
 *
 * Disables interrupts up to the level of the ethernet driver (for RISC OS,
 * this is just disable IRQs). Once IRQs are disabled, we cannot/must not
 * be reentered.
 *
 * Returns a value indicating the state of interrupts prior to calling here.
 */

extern int disable_irqs(void);                                   /* Assembler implementation */

/*****************************************************************************
 *
 * restore_irqs:
 *
 * Restore interrupts to the state they were in prior to a call to
 * ensure_irqs_off, using the value returned by ensure_irqs_off.
 */

extern void restore_irqs(int oldstate);                          /* Assembler implementation */

/*****************************************************************************
 *
 * enable_irqs:
 *
 * Ensure that interrupts are enabled. Returns a value that, when passed
 * to restore_irqs, will restore the state prior to enabling interrupts.
 */

extern int enable_irqs(void);                                    /* Assembler implementation */

/*****************************************************************************
 *
 * atomic_add: atomic
 *
 * Adjust the semaphore with the value supplied, returning the new value.
 */

extern int atomic_add(sema *, int bias);                         /* Assembler implementation */

/*****************************************************************************
 *
 * microsecond_delay:
 *
 * Delay for at least the number of microseconds specified.
 */

extern void microsecond_delay(int ms);                           /* Assembler implementation */

/*
 0	addrs differ
 1	addrs same
*/
extern int cmp_addr(unsigned char *a, unsigned char *b);


/*
 0	not broadcast addr
 1	broadcast addr (all 1 bits)
*/
extern int is_addr_broadcast(unsigned char *addr);

/*
 0	addr not multicast
 1	addr multicast
 low order bit of high order octet set indicates multicast, assuming not broadcast
*/
extern int is_addr_multicast(unsigned char *addr);

extern int mytime(void);

extern void cpy_addr(unsigned char *dest, unsigned char *src);

extern int determine_addr_level(u_char *our_address, u_char *address_being_examined);


extern void fast_write    (void *memoryptr, void *regptr, int bytecount);
extern void fast_read     (void *memoryptr, void *regptr, int bytecount);

extern void slow_write    (void *memoryptr, void *regptr, int bytecount);
extern void slow_read     (void *memoryptr, void *regptr, int bytecount);

#if HANDLE_POCKET
extern void pport_write(volatile u_char *p, int v, int r);
extern void pport_writehalf(volatile u_char *p, int v, int r);
extern int pport_read(volatile u_char *p, int r);
extern int pport_readhalf(volatile u_char *p, int r);
#endif /* HANDLE_POCKET */

/* a1 ptr to list of (memptr,count) pairs (count==0==end) */

extern void chain_write(int *list, void *bufptr);

extern void write_txhdr(u_char *dest, u_char *src, u_int ftype, void *bufptr);

extern void write_nullhdr(void *bufptr);




#endif /* included_fns2_h */

/* EOF fns2.h */
