/* myson.h */

/* Definitions for accessing the Myson MTD908 on an NIC (EtherM)
 * (C) ANT Limited 1996-1997, All Rights Reserved.
 *
 * The MTD908 basically emulates an NE2000-type card, but it's
 * memory-mapped slightly unusually. Each register appears at
 * eight consecutive memory locations: this is so we can write
 * eight times to the data transfer register with a STM, which
 * goes a lot faster.
 *
 * Use as follows:
 *
 * volatile myson *chip;
 * chip = (volatile myson*) <address as returned by SWI Podule_ReadInfo(2)>
 *      ...
 * chip->CR = my_cr_INIT_P0;
 *      ...etc as required...
 *
 * For details of what to put into the registers, see the Myson
 * data sheet.
 *
 *
 * peter@ant.co.uk
 * 24 Jan 1997
 */

#ifndef included_myson_h
#define included_myson_h

#define IOMD_IRQB_STATUS	((uv_int *)0x3200020)
#define IOMD_IRQB_REQUEST	((uv_int *)0x3200024)
#define IOMD_IRQB_MASK		((uv_int *)0x3200028)
#define IOMD_IRQB_NETCARD_BIT	(1 << 3)

typedef struct
{
    u_char rcv_stat;
    u_char rcv_npp;
    u_short rcv_bytes;
} rxhdr;

#define RXHDRSIZE 4

typedef struct {
    unsigned char reg;
    unsigned char pad1, pad2, pad3;
} myson_reg_byte;

typedef struct {
    unsigned int reg;
} myson_reg_word;

typedef union {
    myson_reg_byte bytes[8];
    myson_reg_word words[8];
} myson_reg;

typedef struct {
    myson_reg regs[32];
} myson;

/* Page 0 */

#define CR	regs[0x0].bytes[0].reg	/* R/W	Command register */
/* We don't get the CLDA0 		   R	Current Local DMA register 0 */
#define PSTART	regs[0x1].bytes[0].reg	/*   W	Page Start */
/* We don't get the CLDA0 		   R	Current Local DMA register 1 */
#define PSTOP	regs[0x2].bytes[0].reg	/*   W	Page Stop */
#define BNRY	regs[0x3].bytes[0].reg	/* R/W	Boundary */
#define TSR	regs[0x4].bytes[0].reg	/* R	Transmit Status register */
#define TPSR	regs[0x4].bytes[0].reg	/*   W	Transmit Page Start register */
/* We don't get the NCR 		   R	Number of Collisions register */
#define TBCR0	regs[0x5].bytes[0].reg	/*   W	Transmit Byte Count register 0 */
/* We don't get the FIFO 		   R	Data FIFO during loopback test */
#define TBCR1	regs[0x6].bytes[0].reg	/*   W	Transmit Byte Count register 1 */
#define ISR	regs[0x7].bytes[0].reg	/* R/W	Interupt Status register */
#define CRDR0	regs[0x8].bytes[0].reg	/* R	Current Remote DMA register 0 */
#define RSAR0	regs[0x8].bytes[0].reg	/*   W	Remote Start Address register 0 */
#define CRDR1	regs[0x9].bytes[0].reg	/* R	Current Remote DMA register 1 */
#define RSAR1	regs[0x9].bytes[0].reg	/*   W	Remote Start Address register 1 */
/* Reserved				   R	*/
#define RBCR0	regs[0xA].bytes[0].reg	/*   W	Remote Byte Count register 0 */
/* Reserved				   R	*/
#define RBCR1	regs[0xB].bytes[0].reg	/*   W	Remote Byte Count register 1 */
#define RSR	regs[0xC].bytes[0].reg	/* R	Receive Status register */
#define RCR	regs[0xC].bytes[0].reg	/*   W	Receive Configuration register */
#define FAE	regs[0xD].bytes[0].reg	/* R  	Frame Alignment Errors */
#define LCR	regs[0xD].bytes[0].reg	/*   W	Loopback Control register */
#define CRCE	regs[0xE].bytes[0].reg	/* R	CRC Errors */
#define DCR	regs[0xE].bytes[0].reg	/*   W	Data Configuration register */
#define MPE	regs[0xF].bytes[0].reg	/* R	Missed Packet Errors */
#define IMR	regs[0xF].bytes[0].reg	/*   W	Interupt Mask register */

/* Page 1 */

#define PAR0	regs[0x1].bytes[0].reg	/* R/W	Physical Address register 0 */
#define PAR1	regs[0x2].bytes[0].reg
#define PAR2	regs[0x3].bytes[0].reg
#define PAR3	regs[0x4].bytes[0].reg
#define PAR4	regs[0x5].bytes[0].reg
#define PAR5	regs[0x6].bytes[0].reg	/* R/W	Physical Address register 5 */
#define PAR(n)	regs[(n)+1].bytes[0].reg	/* R/W	Physical Address register n */

#define CURR	regs[0x7].bytes[0].reg	/* R/W	Current Page register */

#define MAR0	regs[0x8].bytes[0].reg	/* R/W	Multicast Address register 0 */
#define MAR1	regs[0x9].bytes[0].reg
#define MAR2	regs[0xA].bytes[0].reg
#define MAR3	regs[0xB].bytes[0].reg
#define MAR4	regs[0xC].bytes[0].reg
#define MAR5	regs[0xD].bytes[0].reg
#define MAR6	regs[0xE].bytes[0].reg
#define MAR7	regs[0xF].bytes[0].reg	/* R/W	Multicast Address register 7 */
#define MAR(n)	regs[(n)+8].bytes[0].reg	/* R/W	Multicast Address register n */

/* Higher numbered registers */

#define DATA	regs[0x10].words[0].reg	/* Data register; 16bit wide */

#define SRR	regs[0x1C].bytes[0].reg	/* R	Software Reset register */
#define SRR2	regs[0x1F].bytes[0].reg	/* R	Software Reset register (again) */

#define DSR	regs[0x1D].bytes[0].reg	/* R	Diagnostic Status register */


/**********************************************************************/
/* Definitions for the bits within the registers */

/* Command register */
#define my_cr_STP	(1 << 0) /* Stop */
#define my_cr_STA	(1 << 1) /* Start */
#define my_cr_TXP	(1 << 2) /* Transmit packet */
#define my_cr_RD0	(1 << 3) /* Remote DMA command 0 */
#define my_cr_RD1	(1 << 4) /* Remote DMA command 1 */
#define my_cr_RD2	(1 << 5) /* Remote DMA command 2 */
#define my_cr_PS0	(1 << 6) /* Page select 0 */
#define my_cr_PS1	(1 << 7) /* Page select 1 */
/* Some abstracted versions */
#define my_cr_RREAD	(my_cr_RD0)
#define my_cr_RWRITE	(my_cr_RD1)
#define my_cr_RABORT	(my_cr_RD2)
/* #define my_cr_RSEND	(my_cr_RD0 | my_cr_RD1) */
#define my_cr_PAGE0	0		/* Select page 0 */
#define my_cr_PAGE1	(my_cr_PS0)	/* Select page 1 */
#define my_cr_INIT_P0	(my_cr_PAGE0 | my_cr_RABORT | my_cr_STP)
#define my_cr_INIT_P1	(my_cr_PAGE1 | my_cr_RABORT | my_cr_STP)

/* Interupt status register */
#define my_isr_PRX	(1 << 0) /* Packet received */
#define my_isr_PTX	(1 << 1) /* Packet transmitted */
#define my_isr_RXE	(1 << 2) /* Receive error */
#define my_isr_TXE	(1 << 3) /* Transmit error */
#define my_isr_OVW	(1 << 4) /* Buffer overflow warning */
#define my_isr_CNT	(1 << 5)
#define my_isr_RDC	(1 << 6) /* Remote DMA completed */
#define my_isr_RST	(1 << 7) /* Reset status */

/* Interupt mask register */
#define my_imr_PRXE	(1 << 0) /* Packet received interupt enable */
#define my_imr_PTXE	(1 << 1) /* Packet transmitted interupt enable */
#define my_imr_RXEE	(1 << 2) /* Receive error interupt enable */
#define my_imr_TXEE	(1 << 3) /* Transmit error interupt enable */
#define my_imr_OVWE	(1 << 4) /* Buffer overflow warning enable */
/* #define my_imr_CNTE	(1 << 5) */
#define my_imr_RDCE	(1 << 6) /* Remote DMA completed interupt enable */

/* Data configuration register */
#define my_dcr_WTS	(1 << 0) /* Word transfer select */
/* #define my_dcr_BOS	(1 << 1) */
/* #define my_dcr_LAS	(1 << 2) */
/* #define my_dcr_LS	(1 << 3) */
/* #define my_dcr_ARM	(1 << 4) */
/* #define my_dcr_FT0	(1 << 5) */
/* #define my_dcr_FT1	(1 << 6) */

/* Loopback Control / Transmit configuaration register */
/* #define my_lcr_CRC	(1 << 0) */
#define my_lcr_LB0	(1 << 1) /* Loopback 0 */
#define my_lcr_LB1	(1 << 2) /* Loopback 1 */
/* #define my_lcr_ATD	(1 << 3) */
/* #define my_lcr_OFST	(1 << 4) */

/* Transmit status register */
#define my_tsr_PTX	(1 << 0) /* Packet transmitted */
#define my_tsr_COL	(1 << 2) /* Collision */
#define my_tsr_ABT	(1 << 3) /* Transmission aborted */
/* #define my_tsr_CRS	(1 << 4) */
/* #define my_tsr_FU	(1 << 5) */
#define my_tsr_CDH	(1 << 6) /* CD heartbeat */
/* #define my_tsr_OWC	(1 << 7) */

/* Receive configuration register */
#define my_rcr_SEP	(1 << 0) /* Save errored packets */
#define my_rcr_AR	(1 << 1) /* Accept runt packets */
#define my_rcr_AB	(1 << 2) /* Accept broadcasts */
#define my_rcr_AM	(1 << 3) /* Accept multicasts */
#define my_rcr_PRO	(1 << 4) /* Promiscuous */
#define my_rcr_MON	(1 << 5) /* Monitor mode */

/* Receive status register */
#define my_rsr_PRX	(1 << 0) /* Packet received intact */
#define my_rsr_CRC	(1 << 1) /* CRC error */
#define my_rsr_FAE	(1 << 2) /* Frame alignment error */
/* #define my_rsr_FO	(1 << 3) */
#define my_rsr_MPA	(1 << 4) /* Missed packet */
#define my_rsr_PHY	(1 << 5) /* Physical/Multicast address */
#define my_rsr_DIS	(1 << 6) /* Disabled */
#define my_rsr_DFR	(1 << 7) /* Deferring */

/* Diagnostic status register */
#define my_dsr_20M	(1 << 1) /* 20MHz VCO functioning */
#define my_dsr_TCOK	(1 << 2) /* Transmit clock functioning */
#define my_dsr_POL	(1 << 3) /* Polarity of UTP link */
#define my_dsr_JAB	(1 << 4) /* Jabber state */
#define my_dsr_LNK	(1 << 5) /* Link state */
#define my_dsr_LBK	(1 << 6) /* Lookback mode */
#define my_dsr_UTP	(1 << 7) /* Twisted pair selected */

#endif
