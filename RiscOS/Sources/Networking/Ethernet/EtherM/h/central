/*1 -*-c-*- */
/* central.h */

#ifndef included_central_h
#define included_central_h


/*
 * Developed from ANT RISC-OS if_ea.c
 * Developed from Acorn RISC-OS if_en.c
 * Developed from Acorn RISC-iX if_en.c
 */

/* ... then developed a bit more for MVI */

#define IRQSEMA                 (*(int *)0x108) /* RISC OS runery! */
#define MONOTIME                (*(u_int *)0x10C) /* RISC OS runery! */
/* Still used to check machine is suitable to run on */
#define ISMEMC1a                ((*(u_int *)0x110 & 0x10000) != 0) /* RISC OS runery! */
#define MEMSPEED                (*(u_int *)0x110 & 0xffff) /* RISC OS runery! */
#define UNUSED(x)               ((x) = (x))        /* Suppress unused variable warning */
#define UNUSED_CONST(x)         {int very_unlikely_variable_name; very_unlikely_variable_name = (int) x; }
#define MAXUNITS                8               /* 8, not 4, with medusa */

#define IrqV                    2

#define enabled_irqs            (0u)
#define disabled_irqs           (1u<<27u)

/* This lot used to be in card.h */

#define LO(x)                ((x) & 0xffU)
#define HI(x)                (((x) >> 8) & 0xffU)

#define RAMSTART	0x4000
#define RAMEND		0x8000

#define PAGESIZE        256                     /* 256 pages of 256 bytes */
#define TXPAGES         (3 * 4)			/* Give 3k to tx space */
#define RXPAGES         (13 * 4)                /* Give rest avail to rx space */
#define TXSIZE          (TXPAGES * PAGESIZE)    /* In bytes */
#define RXSIZE          (RXPAGES * PAGESIZE)    /* In bytes */
#define TXSTART         RAMSTART                /* Start of memory onwards */
#define TXLIMIT         (RAMSTART + TXSIZE)	/* Not suitable to write directly to cs8005 */
#define RXSTART         (RAMEND - RXSIZE)	/* Calc start address */
#define RXLIMIT         RAMEND			/* End of buffer memory */
#define RXMINAVAIL      (ETH_MAXSIZE * 2)       /* At least 2 packets worth */
#define TXMINAVAIL      8                       /* Enough for finished packet + leeway */
#define TXWRAP(x)       ((x) >= TXLIMIT ? (x) - TXLIMIT : (x))
#define RXWRAP(x)       ((x) >= RXLIMIT ? (x) - RXSIZE : (x))

#define TXBUF0		0x40	/* Buffer 0 starts at page 0 */
#define TXBUF1		0x46	/* Buffer 1 starts at page 6 */

#define NOCARDUNIT      ('?' - '0')

enum
{
        Loader          = 0x80,
        RM,
        BBCROM,
        Sprite,
        UnixLoader      = 0xa0,
        Link            = 0xf0,
        SerialNumber,
        Date,
        ModStatus,
        PlaceMade,
        Description,
        PartNumber,
        EmptyChunk      = 0xff,
        Pattern         = 0x100,
        RawData,
        RomImage,
        None
};

/*****************************************************************************
 *
 * Defines relating to ethernet packets.
 *
 * Just to remind everyone, an ethernet packet with tcp/ip information looks
 * something like this:
 *
 * DESTADDR             6 bytes
 * SRCADDR              6 bytes
 * PACKTYPE             2 bytes
 * IPHDR                20 bytes
 * TCPHDR               20
 * DATA
 * CRC                  4 bytes
 */

#define ETHERMTU        1500

/*
 * packet field lengths
 */

#define HW_ADDR_LEN     6                               /* length of hardware address */
#define TYPE_SIZE       2                               /* size of packet type */
#define PACK_HDR_LEN    ((2 * HW_ADDR_LEN) + TYPE_SIZE)   /* bytes in packet header */
#define BUFF_HDR_LEN    4                               /* bytes in Rx buffer header */
#define CRC_LEN         4                               /* CRC bytes in a packet */
#define ETHERMAXP       (ETHERMTU + PACK_HDR_LEN) /* max packet size */
                                               /* chance to appear */

#define ETHERMIN        (60-PACK_HDR_LEN)

#define ETH_ADDRSIZE            6
#define ETH_PACKTYPESIZE        2
#define ETH_DATAMAXSIZE         1500
#define ETH_TRAILCRCSIZE        4

/* @@@@ these sizes need revising to account for the 4 bytes of crc fudge */

#define ETH_HDRSIZE             (ETH_ADDRSIZE * 2 + ETH_PACKTYPESIZE) /* 14 */
#define ETH_MAXSIZE             (ETH_HDRSIZE + ETH_DATAMAXSIZE + ETH_TRAILCRCSIZE)
#define ETH_MINSIZE             (64 - ETH_HDRSIZE - ETH_TRAILCRCSIZE) /* 46 */
#define ETH_DATAMINSIZE         ETH_MINSIZE


/* typedef */ struct ifstr;

typedef struct
{
    u_char dstaddr[6];
    u_char srcaddr[6];
    u_int ftype;
    struct mbuf *head;
} txblob;

#define MAXTXBLOB	16	/* Magic number */

typedef struct
{
    /* Indexes into blobs array */
    sema current_index;         /* Take packets to send from here */
    sema end_index;             /* Add packets to here in transmit() */
    sema inuse_count;           /* Current number of tx blobs in use */

    /* On-card double buffering */
    sema bufs_used;		/* This will be 0, 1 or 2 */
    sema buf_last_tx;		/* Which buffer used in the last TX command */

    u_int buf0_size;		/* Size of data in buffer 0 */
    u_int buf1_size;		/* Size of data in buffer 1 */

    /* All after this defaults to being zeroed. See locate.c */

    txblob blobs[MAXTXBLOB];
} tx_t;

typedef struct
{
    u_int current;              /* Pointer to next rxhdr to process */
} rx_t;

typedef struct
{
    unsigned int *int32;
    unsigned int *int64;        /* two words per entry though */
} statptr_t;

/*****************************************************************************

Cards are either faulty, down or up. When a card is down, no statement
about it's reliability is made. If a card is up, then it is not
faulty.  If a card is faulty, most calls return a "faulty card" error.
However, one may attempt to bring up a faulty card; this will retry
the tests and may subsequently decide the card is working.

If a card has a vaguely working controller, then we also know its
width. We attempt to cater for variations in the basic 8005 silicon
and handle the differences between the old and the new internet
modules.

*****************************************************************************/

#define FLAG_ENABLED            0x00000001ul  /* 1=i/f enabled */
#define FLAG_IGNORETEST         0x00000002ul  /* 1=ignore live wire test failures */
#define FLAG_LIVEWIRETEST       0x00000004ul  /* 1=do live wire test sequence */
#define FLAG_VERBOSE            0x00000008ul  /* 1=print test passes */

#define FLAG_MULTIPLE           0x00000010ul  /* 1=multiple interfaces mode */
#define FLAG_IEEE_SINK          0x00000020ul
#define FLAG_IEEE_MONITOR       0x00000040ul
#define FLAG_ETHER2_SINK        0x00000080ul
#define FLAG_ETHER2_MONITOR     0x00000100ul
#define FLAG_ERROR_RX           0x00000200ul  /* Filter with errors is active */
#define FLAG_MULTI_RX           0x00000400ul
#define FLAG_PROMIS_RX          0x00000800ul
#define FLAG_BROAD_RX           0x00001000ul
#define FLAG_ETHER2_RX          0x00002000ul
#define FLAG_IEEE_RX            0x00004000ul

#define MASK_CLIENTS            0x00007fe0ul

#define FLAG_HARDWARE_VALID     0x00400000ul  /* Have filled in enough to touch cntrl */
#define FLAG_MULTI_ACTIVE       0x00800000ul

#define FLAG_PROMIS_ACTIVE      0x01000000ul

#define FLAG_DOWN               0x08000000ul  /* interface sitting by passively */

#define FLAG_FAULTY             0x10000000ul  /* interface judged to be faulty */
#define FLAG_UP                 0x20000000ul  /* interface is live on wire */
#define FLAG_TESTING            0x40000000ul  /* currently doing selftests */
#define FLAG_JUST_TESTED        0x80000000ul  /* short lived selftest suppressor */

#define FLAGS_CMOS_MASK         0x0000001ful



/* these six assume that pifstr *pifp is locally defined */

#define TST(bit)                ((pifp->flags & FLAG_##bit) != 0ul)
#define SET(bit)                pifp->flags |=  FLAG_##bit
#define CLR(bit)                pifp->flags &= ~FLAG_##bit
/* TST(a) && TST(b), rather than || */
/* do it that way when you check all the uses as well! */
/* #define TST2(a,b)               ((ifp->flags & (FLAG_##a | FLAG_##b)) == (FLAG_##a | FLAG_##b)) */

#define TST2(a,b)               ((pifp->flags & (FLAG_##a | FLAG_##b)) != 0ul)

#define SET2(a,b)               pifp->flags |=   (FLAG_##a | FLAG_##b)
#define CLR2(a,b)               pifp->flags &= ~ (FLAG_##a | FLAG_##b)

/* ok some jolly fun as some flags (specifically UP and the foo_RX
 * ones) live in the vifstr, not the pifstr
 */

#define VTST(bit)               ((vifp->flags & FLAG_##bit) != 0ul)
#define VSET(bit)               vifp->flags |=  FLAG_##bit
#define VCLR(bit)               vifp->flags &= ~FLAG_##bit
#define VSET2(a,b)              vifp->flags |=   (FLAG_##a | FLAG_##b)

/*
 * Have one of these structures per card present.
 *
 * Don't forget that there are various restrictions on when some of these
 * values can be read and written;
 *
 * pdh:
 * pifstr == *physical* interface structure
 *   Possesses either one or two vifstr's, *virtual* interfaces
 */


typedef struct pifstr
{
    /* general */
    unsigned long flags;        /* as ever, assorted things */

    u_char cmos;                /* what cmos ram holds */

    int slot;

    /* Interrupt related information -- volatile !! */

    sema tx_cause;              /* Have reason to call transmitted() */
    sema rx_cause;		/* Need to call received() */
    sema of_cause;		/* Had a packet buffer overflow */

    u_int tests_failed;

    struct pifstr *active_next;
    struct pifstr *all_next;

    /* direct pointers into the Myson chip itself -- volatile !! */

    volatile myson *chip;

    /* Interupt mask register, address and bit value */
    volatile unsigned int *intr_mask_ptr;
    int intr_mask_value;

    rx_t rx;
    tx_t tx;

    u_char etheraddr[6];        /* the one derived from the interface */

    struct vifstr *primary;
    struct vifstr *secondary;   /* NULL if not schizophrenic */

    struct vifstr *tx0owner;
    struct vifstr *tx1owner;

    time_t up_time;	/* time() when interface UPped */
} pifstr;

/* Virtual interface structure
 * Always owned by a pifstr
 */

typedef struct vifstr
{
    struct dib      dib;        /* must be the first member */
    pifstr          *raw;       /* the physical interface */
    struct vifstr   *other;     /* raw's other vifstr, or NULL */
    unsigned long   flags;

#define OWN_ADDRESS             (&vifp->etheraddr[0])

    u_char          etheraddr[6];
    int             unit;
    int             minrxmode;

    struct client *clients;
    struct client *ether2_hole;
    struct client *ieee8023_hole;

    struct vifstr *active_next;
    struct vifstr *all_next;

    statptr_t accumulated, active, pending;

    dci4_spctl spctl;
} vifstr;

/* ignore headers which still mention ifstr, but pick up on code */
typedef struct not_defined_anywhere ifstr;

#endif /* included_central_h */
