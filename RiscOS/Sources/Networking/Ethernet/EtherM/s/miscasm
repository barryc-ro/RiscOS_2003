; miscasm.s


a1 RN 0
a2 RN 1
a3 RN 2
a4 RN 3
v1 RN 4
v2 RN 5
v3 RN 6
v4 RN 7
v5 RN 8
v6 RN 9
sl RN 10
fp RN 11
ip RN 12
sp RN 13
lr RN 14
pc RN 15

I_bit           *       1 :SHL: 27
F_bit           *       1 :SHL: 26
SVC_mode        *       2_11
IOC             *       &03200000
podule_IRQ_bit  *       1 :SHL: 5  ; Podule IRQ request
IOCIRQMSKB      *       &28        ;       Mask
IOCIRQMSKA      *       &18        ;       Mask

XOS_ReadEscapeState * &20000 + &2c
XOS_GenerateEvent	*	&20022
XOS_ReadUnsigned        * &20021
XOS_ReadMonotonicTime   *        &20042


        AREA    |miscasm$$code|, CODE, READONLY

        IMPORT  |__main|
        EXPORT  determine_addr_level
        EXPORT  enable_irqs_flag
        EXPORT  disable_irqs_flag
;	EXPORT	parse_number
	EXPORT	disable_irqs
	EXPORT	restore_irqs
	EXPORT	enable_irqs
	EXPORT	microsecond_delay
	EXPORT	swi_monotime
;	EXPORT	border


 [ {TRUE}
	EXPORT	mytime
	EXPORT	current_sp
 ]

	EXPORT	cmp_addr
	EXPORT	is_addr_broadcast
	EXPORT	is_addr_multicast
	EXPORT	cpy_addr



|x$codeseg|
        B       |__main|

 [ {FALSE}

border		ROUT
		MOV     a3, lr
		ADR	a2, %01
		STRB	a1, [a2, #0]
		MOV	a1, a1, LSR #8
		STRB	a1, [a2, # 1]
		MOV	a1, a1, LSR #8
		STRB	a1, [a2 ,# 2]
		MOV	a1, #12
		ADR	a2, %00
		SWI	&20007     ;osword!
                MOVS	pc, a3


00
	DCB	0
	DCB	24
01
	DCB	0
	DCB	0
	DCB	0

	ALIGN
 ]

swi_monotime	MOV	a2, lr
		SWI	&20131
		MOVS	pc, a2


; extern int cmp_addr(unsigned char *a, unsigned char *b)
; 0	addrs differ
; 1	addrs same

cmp_addr	LDRB	a3, [a1], #1	; byte 1
		LDRB	a4, [a2], #1
		CMP	a3, a4

		LDREQB	a3, [a1], #1	; byte 2
		LDREQB	a4, [a2], #1
		CMPEQ	a3, a4

		LDREQB	a3, [a1], #1	; byte 3
		LDREQB	a4, [a2], #1
		CMPEQ	a3, a4

		LDREQB	a3, [a1], #1	; byte 4
		LDREQB	a4, [a2], #1
		CMPEQ	a3, a4

		LDREQB	a3, [a1], #1	; byte 5
		LDREQB	a4, [a2], #1
		CMPEQ	a3, a4

		LDREQB	a3, [a1], #1	; byte 6
		LDREQB	a4, [a2], #1
		CMPEQ	a3, a4

		MOVEQ	a1, #1		; same
		MOVNE	a1, #0		; differ
		MOVS	pc, lr

; extern int is_addr_broadcast(unsigned char *addr)
; 0	not broadcast addr
; 1	broadcast addr (all 1 bits)

is_addr_broadcast
		LDRB	a2, [a1], #1	; byte 1
		CMP	a2, #255

		LDREQ	a2, [a1], #1	; byte 2
		CMPEQ	a2, #255

		LDREQ	a2, [a1], #1	; byte 3
		CMPEQ	a2, #255

		LDREQ	a2, [a1], #1	; byte 4
		CMPEQ	a2, #255

		LDREQ	a2, [a1], #1	; byte 5
		CMPEQ	a2, #255

		LDREQ	a2, [a1], #1	; byte 6
		CMPEQ	a2, #255

		MOVEQ	a1, #1		; is broadcast addr
		MOVNE	a1, #0		; not broadcast addr
		MOVS	pc, lr

; extern int is_addr_multicast(unsigned char *addr)
; 0	addr not multicast
; 1	addr multicast
; low order bit of high order octet set indicates multicast, assuming not broadcast

is_addr_multicast
		LDRB	a1, [a1, #0]
		AND	a1, a1, #1
		MOVS	pc, lr

; extern void cpy_addr(unsigned char *dest, unsigned char *src)

cpy_addr	LDRB	a3, [a2], #1	; byte 1
		STRB	a3, [a1], #1

		LDRB	a3, [a2], #1	; byte 2
		STRB	a3, [a1], #1

		LDRB	a3, [a2], #1	; byte 3
		STRB	a3, [a1], #1

		LDRB	a3, [a2], #1	; byte 4
		STRB	a3, [a1], #1

		LDRB	a3, [a2], #1	; byte 5
		STRB	a3, [a1], #1

		LDRB	a3, [a2], #1	; byte 6
		STRB	a3, [a1], #1
		MOVS	pc, lr

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 [ {TRUE}

mytime		STMFD	sp!, {lr}
		SWI	XOS_ReadMonotonicTime
		LDMFD	sp!, {pc}^
 ]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;

current_sp	MOV	a1, sp
		MOVS	pc, lr

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; disable_irqs:
;
; Disables interrupts up to the level of the ethernet driver (for RISC OS,
; this is just disable IRQs). Once IRQs are disabled, we cannot/must not
; be reentered.
;
; Returns a value indicating the state of interrupts prior to calling here.
;

disable_irqs	AND	a1, lr, # I_bit
		ORRS	pc, lr, # I_bit

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; restore_irqs:
;
; Restore interrupts to the state they were in prior to a call to
; ensure_irqs_off, using the value returned by ensure_irqs_off.
;

restore_irqs	BIC	lr, lr, # I_bit
		ORRS	pc, lr, a1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; enable_irqs:
;
; Ensure that interrupts are enabled. Returns a value that, when passed
; to restore_irqs, will restore the state prior to enabling interrupts.
;

enable_irqs	AND	a1, lr, # I_bit
		BICS	pc, lr, # I_bit

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; microsecond_delay:
;
; Delay for at least the number of microseconds specified. Well, should
; be at least the delay requested. Suited for small delays. Uses the
; fact that IOC accesses are performed at 4 MHz to time itself.
;

microsecond_delay MOV	a2, # IOC
msd		LDR	a3, [a2, # IOCIRQMSKA]
		LDR	a3, [a2, # IOCIRQMSKA]
		LDR	a3, [a2, # IOCIRQMSKA]
		LDR	a3, [a2, # IOCIRQMSKA]
		SUBS	a1, a1, # 1
		BPL	msd
		MOVS	pc, lr




; IN
;
; a1    specific address
; a2    address being examined
;
; OUT
;
; a1    Address level needed to see frame

specific        * 0
broadcast       * 1
multicast       * 2
arbitary        * 3

determine_addr_level        ROUT

        MOV     ip, # 5
00      LDRB    a3, [a1, ip]
        LDRB    a4, [a2, ip]
        TEQ     a3, a4
        BNE     %FT01
        SUBS    ip, ip, #1
        BGE     %BT00
        MOV     a1, #specific
        MOVS    pc, lr

; Can't see it with specific matching.

01      MOV     ip, #5
02      LDRB    a3, [a2, ip]
        TEQ     a3, #255
        BNE     %FT03
        SUBS    ip, ip, #1
        BGE     %BT02
        MOV     a1, #broadcast
        MOVS    pc, lr

; Not a broadcast packet

03      LDRB    a1, [a2, #0]
        TST     a1, # 1             ; is it multicast?
        MOVNE   a1, #multicast
        MOVEQ   a1, #arbitary
        MOVS    pc, lr

; (int *,int)

enable_irqs_flag
                MOV     a3, pc
                ORR     ip, a3, # I_bit + F_bit
                TEQP    ip, #0
                MOV     a1, a1
                LDRB     a4, [a1]
                ORR     a4, a4, a2
                STRB     a4, [a1]
                TEQP    a3, #0
                MOV     a1, a1
                MOVS    pc, lr

; (int *,int)

disable_irqs_flag
                MOV     a3, pc
                ORR     ip, a3, # I_bit + F_bit
                TEQP    ip, #0
                MOV     a1, a1
                LDRB     a4, [a1]
                BIC     a4, a4, a2
                STRB     a4, [a1]
                TEQP    a3, #0
                MOV     a1, a1
                MOVS    pc, lr

;					a1		a2		a3
; extern _kernel_oserror *parse_number(char *head, int *number, char *term)

 [ {FALSE}
parse_number	ROUT

	STMFD	sp!, {v1-v6, fp, lr}
	MOV	a4, a2
	MOV	v1, a3

	MOV	a2, a1
	MOV	a1, # (2_1010 :SHL: 28) :OR: 10
	MOV	a3, #3			; maximum value (inclusive presumably)

	SWI	XOS_ReadUnsigned

	LDMVSFD	sp!, {v1-v6, fp, pc}^

	STR	a3, [a4]		; value
	STR	a2, [v1]		; terminating character
	MOV	a1, #0
	LDMFD	sp!, {v1-v6, fp, pc}^

 ]


;
; Fudged stack overflow handler
;

 [ {FALSE}
	EXPORT	|y$stack_overflow|
	EXPORT	|y$stack_overflow_1|

|y$stack_overflow|
|y$stack_overflow_1|
	ROUT

XOS_WriteI	*	&20000 :OR: &100
XOS_WriteS	*	&20000 :OR: &001

	MOVS	a1, pc
	TEQP	a1, # (1 :SHL: 26) :OR: (1 :SHL: 27)		; No I or F
	SWI	XOS_WriteI + 12
	SWI	XOS_WriteS
	=	"Error: supervisor stack exhausted",13,10,0
	ALIGN
00	B	.
 ]
        END
