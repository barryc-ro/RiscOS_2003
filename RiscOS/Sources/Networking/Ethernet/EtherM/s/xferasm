
a1 RN 0
a2 RN 1
a3 RN 2
a4 RN 3
v1 RN 4
v2 RN 5
v3 RN 6
v4 RN 7
v5 RN 8
v6 RN 9
sl RN 10
fp RN 11
ip RN 12
sp RN 13
lr RN 14
pc RN 15

		GBLL	CaterSlow

CaterSlow	SETL	{TRUE}		; FALSE should be possible

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

I_bit		*	1 :SHL: 27
;IOC		*	&03200000
;IOCIRQMSKA	*	&18

;XOS_ReadEscapeState * &20000 + &2c
;XOS_GenerateEvent	*	&20022


;
; ALL OF THESE FUNCTIONS ASSUME THEY ARE CALLED IN A NON-USER MODE.
; THE MEANING OF THE VALUES RETURNED IS PRIVATE TO THIS FILE.
;

		GBLS	sregs

		MACRO
		ENTER	$regs
		STMFD	sp!, {$regs, lr}
sregs		SETS	"$regs"
		MEND

		MACRO
		EXIT	$c
		LDM$c.FD sp!, {$sregs, pc}^
		MEND

		MACRO
		POP	$c
		LDM$c.FD sp!, {$sregs, lr}
		MEND

		MACRO
		POPLT
		POP	LT
		MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

		AREA	|eaasm$$code|, CODE, READONLY

		IMPORT	|__main|

		EXPORT	fast_read
		EXPORT	fast_write
		EXPORT	slow_read
		EXPORT	slow_write

|x$codeseg|
		B	|__main|

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Fast transfer routines. Read and write variants for 8 and 16 bits cards,
; using STR/LDR and STM/LDM, depending upon the absence/presence of a MEMC1a.
;
;                 a1         a2           a3
; fast_blahNN(memoryptr, bufferregptr, bytecount)
; 
; IMPORTANT:
;	All of the read/write routines preserve a2 (the h/w) ptr: the
;	exception is merging in the 8bit odd reg value.
;
;	All read/write routines restore mode given in lr

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

fast_read	ROUT
fast_read16_1a	

 [ CaterSlow
		TEQ	a3, #0
		MOVEQS	pc, lr
 ]

		TST	a1, # 3
		BNE	slow_read16

		CMP	a3, # 4
		BLE	slow_read16

		STMFD	sp!, {v1-v6, lr}
		MOV	lr, # &FF00
		ORR	lr, lr, # &FF

01		CMP	a3, # 16
		BLT	%FT00

		LDMIA	a2, {a4, v1-v6, ip}

		AND	a4, a4, lr
		ORR	a4, a4, v1, LSL # 16
		AND	v2, v2, lr
		ORR	v2, v2, v3, LSL # 16
		AND	v4, v4, lr
		ORR	v4, v4, v5, LSL # 16
		AND	v6, v6, lr
		ORR	v6, v6, ip, LSL # 16

		STMIA	a1!, {a4, v2, v4, v6}
 [ {FALSE}
		SUBS	a3, a3, # 16 + 16
		ADDLT	a3, a3, # 16
		BLT	%FT01

		LDMIA	a2, {a4, v1-v6, ip}

		AND	a4, a4, lr
		ORR	a4, a4, v1, LSL # 16
		AND	v2, v2, lr
		ORR	v2, v2, v3, LSL # 16
		AND	v4, v4, lr
		ORR	v4, v4, v5, LSL # 16
		AND	v6, v6, lr
		ORR	v6, v6, ip, LSL # 16

		STMIA	a1!, {a4, v2, v4, v6}

		CMP	a3, # 16
		BGE	%FT00
		CMP	a3, # 0
		LDMLEFD	sp!, {v1-v6, pc}^
 |
		SUBS	a3, a3, # 16
		BGT	%BT01
		LDMFD	sp!, {v1-v6, pc}^
 ]

00		CMP	a3, # 4
		LDMLTFD	sp!, {v1-v6, lr}
		BLT	slow_read16

		LDMIA	a2, {v1, v2}
		AND	v1, v1, lr
		ORR	v1, v1, v2, LSL # 16
		STR	v1, [a1], # 4

		SUBS	a3, a3, # 4
		BGT	%BT00
		LDMFD	sp!, {v1-v6, pc}^

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

fast_write	ROUT
fast_write16_1a

 [ CaterSlow
		TEQ	a3, #0
		MOVEQS	pc, lr
 ]

		TST	a1, # 3
		BNE	slow_write16

		CMP	a3, # 4
		BLE	slow_write16

		STMFD	sp!, {v1-v6, lr}

00		CMP	a3, # 16
		BLT	%FT01

;		LDMIA	a1!, {v1, v3, v5, ip}
;		MOV	a4, v1, LSL # 16
;		MOV	v2, v3, LSL # 16
;		MOV	v4, v5, LSL # 16
;		MOV	v6, ip, LSL # 16
; Load values into the lower words and shift of when on a Medusa net card
		LDMIA	a1!, {a4, v2, v4, v6}
		MOV	v1, a4, LSR # 16
		MOV	v3, v2, LSR # 16
		MOV	v5, v4, LSR # 16
		MOV	ip, v6, LSR # 16
		STMIA	a2, {a4, v1-v6, ip}
 [ {FALSE}
		SUBS	a3, a3, # 16 + 16
		ADDLT	a3, a3, # 16
		BLT	%FT01

;		LDMIA	a1!, {v1, v3, v5, ip}
;		MOV	a4, v1, LSL # 16
;		MOV	v2, v3, LSL # 16
;		MOV	v4, v5, LSL # 16
;		MOV	v6, ip, LSL # 16
; Load values into the lower words and shift of when on a Medusa net card
		LDMIA	a1!, {a4, v2, v4, v6}
		MOV	v1, a4, LSR # 16
		MOV	v3, v2, LSR # 16
		MOV	v5, v4, LSR # 16
		MOV	ip, v6, LSR # 16
		STMIA	a2, {a4, v1-v6, ip}

		CMP	a3, # 16
		BGE	%BT00
		CMP	a3, # 0
		LDMLEFD	sp!, {v1-v6, pc}^
 |
		SUBS	a3, a3, # 16
		BGT	%BT00
		LDMFD	sp!, {v1-v6, pc}^
 ]

01		CMP	a3, # 4
		LDMLTFD	sp!, {v1-v6, lr}
		BLT	slow_write16

;		LDR	v2, [a1], # 4
;		MOV	v1, v2, LSL # 16
; Load into low half and shift high half down on net card
		LDR	v1, [a1], # 4
		MOV	v2, v1, LSR # 16
		STMIA	a2, {v1, v2}

		SUBS	a3, a3, # 4
		BGT	%BT01
		LDMFD	sp!, {v1-v6, pc}^

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Slow read and write routines for 8 and 16 bit widths; MEMC type is
; irrelevant as STM/LDM aren't considered when going slowly.
; Theoretically, these are the minimal necessary transfer functions.
;
; IMPORTANT: These slow_blahXX routines must NOT alter v1-v6. The
;            fast_blahXX routines rely upon this.
;


; May be dodgy wrt additional byte transferred on odd sized transfers.

;fast_read
slow_read
slow_read16	CMP	a3, # 1			; a 3 way test, effectively
		MOVLTS	pc, lr
		LDR	a4, [a2]
		STRB	a4, [a1], # 1
		MOVGT	a4, a4, LSR # 8
		STRGTB	a4, [a1], # 1
		SUBS	a3, a3, # 2
		BGT	slow_read16
		MOVS	pc, lr

;fast_write
slow_write
slow_write16	CMP	a3, # 1
		MOVLTS	pc, lr
		LDRB	a4, [a1], # 1
		LDRGTB	ip, [a1], # 1
		ORRGT	a4, a4, ip, LSL # 8
; Don't need to shift it up on the Medusa net card
;		MOV	a4, a4, LSL # 16
		STR	a4, [a2]
		SUBS	a3, a3, # 2
		BGT	slow_write16
		MOVS	pc, lr


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


		AREA	|eaasm$$data|

|x$dataseg|

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

		AREA	|eaasm$$zidata|,NOINIT

		END
