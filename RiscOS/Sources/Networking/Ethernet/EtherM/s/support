;
; Assembler support for DCI4 device driver.
;

        AREA    |miscasm$$code|, CODE, READONLY

r0      RN      0
a1      RN      0

r1      RN      1
a2      RN      1

r2      RN      2
a3      RN      2

r3      RN      3
a4      RN      3

r4      RN      4
r5      RN      5

r10     RN      10

r12     RN      12

sp      RN      13

lr      RN      14

pc      RN      15

Service_DCIDriverStatus         *       &9d
DriverStatus_Starting           *       0
DCI_VERSION_NUMBER              *       403
XOS_ServiceCall                 *       &20030
XOS_AddCallBack                 *       &20054
XOS_RemoveCallBack		*	&2005f
XOS_WriteS                      *       &20001

;
; In order that we can respond to SWI calls when we issue the service
; call announcing our arrival, the actual issuing of the service call
; is performed within a callback. The sole parameter is the address of
; the utocsp table, which contains enough information to perform the
; desired action (each cs8005 structure *starts* with the struct dib
; within itself.
;
; Entry
;
; a1    &utcsp table
; a2    Number of elements in table
;
; Exit
;
; APCS compliant, _kernel_oserror * std return value
;
                EXPORT  callback_announce
		EXPORT	callback_remove

callback_announce

                STMFD   sp!, {r4-r12, lr}
                STR     r0, utocsp_ptr
                STR     r1, utocsp_cnt

                ADR     r0, cb_fn
                MOV     r1, #1                          ; do things crudely instead!
                SWI     XOS_AddCallBack

                MOVVC   r0, #0
		STRVC	pc, cb_pend

                LDMFD   sp!, {r4-r12, pc}^

; Remove any pending callback. Used from finalise in case die
; before the scheduled callback has actually gone off.

callback_remove
		LDR	r0, cb_pend
		TEQ	r0, # 0
		MOVEQS	pc, lr		; not scheduled, so easy

		STMFD	sp!, {lr}

		ADR	r0, cb_fn
		MOV	r1, # 1
		SWI	XOS_RemoveCallBack

		MOV	r0, # 0
		STR	r0, cb_pend

		LDMFD	sp!, {pc}^

; Naughty - write to this!

cb_pend		DCD	0	; have a callback pending
utocsp_ptr      DCD     0
utocsp_cnt      DCD     0

cb_fn           ROUT

                STMFD   sp!, {r0-r5, lr}

		MOV	r0, # 0
		STR	r0, cb_pend

                LDR     r4, utocsp_ptr
                LDR     r5, utocsp_cnt

00              LDR     r0, [r4, r5, LSL #2]
                TEQ     r0, #0
                BEQ     %f01

                MOV     r1, #Service_DCIDriverStatus
                MOV     r2, #DriverStatus_Starting
                LDR     r3, =DCI_VERSION_NUMBER

                SWI     XOS_ServiceCall

01              SUBS    r5, r5, #1
                BGE     %b00

                LDMFD   sp!, {r0-r5, pc}                ; no hat (^) (want MOV pc,lr variant)

		LTORG

; -----------------------------------------------------------------------------
;
; extern void do_rcv_fn(struct dib *, struct mbuf *, unsigned int pw, rcvfn_t fn)
;                       a1            a2             a3               a4

                EXPORT  do_rcv_fn

do_rcv_fn
                STMFD   sp!, {r4-r12, lr}

                MOV     r12, a3
                MOV     lr, pc
                MOV     pc, a4

                LDMFD   sp!, {r4-r12, pc}^

                END
