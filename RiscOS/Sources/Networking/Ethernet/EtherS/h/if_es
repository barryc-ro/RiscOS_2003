/* LAN91C96 register definitions */

/* I/O SPACE */

/* All banks */
#define R_BSR     0xE

/* Bank 0 */
#define R_TCR     0x0
#define R_EPHSR   0x2
#define R_RCR     0x4
#define R_ECR     0x6
#define R_MIR     0x8
#define R_MCR     0xA

/* Bank 1 */
#define R_CR      0x0
#define R_BASE    0x2
#define R_IAR     0x4 /* - 0x9 */
#define R_GPR     0xA
#define R_CTR     0xC

/* Bank 2 */
#define R_MMUCR   0x0
#define R_AUTOTX  0x1
#define R_PNR     0x2
#define R_ARR     0x3
#define R_FIFO    0x4
#define R_FIFO_TX 0x4
#define R_FIFO_RX 0x5
#define R_PTR     0x6
#define R_DATA    0x8 /* - 0xB */
#define R_IST     0xC /* read */
#define R_ACK     0xC /* write */
#define R_MSK     0xD

/* Bank 3 */
#define R_MT      0x0 /* - 0x7 */
#define R_MGMT    0x8
#define R_REV     0xA
#define R_ERCV    0xC

/* Bits in receive frame status word */
#define ALGNERR   0x8000
#define BRODCAST  0x4000
#define BADCRC    0x2000
#define ODDFRM    0x1000
#define TOOLNG    0x0800
#define TOOSHORT  0x0400
#define MULTCAST  0x0001

/* Bits in Receive Control Register */
#define SOFTRST   0x8000
#define FILTCAR   0x4000
#define STRIPCRC  0x0200
#define RXEN      0x0100
#define ALMUL     0x0004
#define PRMS      0x0002
#define RX_ABORT  0x0001

/* Bits in interrupt registers */
#define TXIDLE_INT  0x80
#define ERCV_INT    0x40
#define EPH_INT     0x20
#define RX_OVRN_INT 0x10
#define ALLOC_INT   0x08
#define TXEMPTY_INT 0x04
#define TX_INT      0x02
#define RCV_INT     0x01

/* PCMCIA CONFIG SPACE */

#define R_ECOR    0x8000
#define R_ECSR    0x8002

#define POLYNOMIAL      0x04c11db7  /* polynomial for CRC calculation */

typedef volatile unsigned char NIC;

#define ES_READ_B(base, regno) \
       (((NIC *)(base))[(regno)*4])

#define ES_WRITE_B(base, regno, value) \
       (((NIC *)(base))[(regno)*4] = (value))

#define ES_READ_H(base, regno) \
       (((NIC *)(base))[(regno)*4] | \
        (((NIC *)(base))[((regno)+1)*4] << 8))

#define ES_WRITE_H(base, regno, value) \
       (((NIC *)(base))[(regno)*4] = (char) (value), \
        ((NIC *)(base))[(regno+1)*4] = (char) ((value) >> 8))

#define ES_BANK(base, bank) ES_WRITE_B(base, R_BSR, bank)

#define ES_READ_BANK(base) ES_READ_B(base, R_BSR)

#define ES_DELAY(base, n) do { \
                              int i, x; for (i=n; i; i--) { \
                              x = ES_READ_B(base, R_BSR+1); } \
                          } while (0)

/*
 * The es_softc structure is the main driver control block, one
 * per unit. It contains all information needed to access the
 * ethernet card hardware.
 */
struct es_softc
{
    short   es_unit;                /* unit number */
    u_char  es_addr[6];             /* physical ethernet address */
    u_short es_flags;               /* always have some of these */
    u_char  es_slot;                /* physical slot number */
    struct stats es_stats;	    /* interface statistics */
    NIC    *es_base;                /* the hardware */
    int     es_device_no;           /* the device number (for IRQs) */
    u_char  es_log2M;               /* page size unit */
    int     es_ram;
    int     es_current_xmit_len;
    int     es_current_xmit_mem;

    unsigned char es_mar[8];	/* soft copy of multicast address registers */
#ifdef HASHED_MULTICAST
    /* How many filters are requiring each hash value */
    unsigned int  es_multicount[MULTICAST_HASHSIZE];
#endif

    struct mbuf *es_tx_queue;

};

#define ES_RUNNING 1
#define ES_FAULTY 2

#define HW_PC_BASE 0x14000000
#define HW_PC_SIZE 0x00040000
#define HW_IO_BASE 0x18000000
#define HW_IO_SIZE 0x00000040
#define HW_INTR 25

#define SMC_BASE   0x90007000
#define SMC_SIZE   0x00001000
#define IOCFG2     0x001         /* Word offset */

extern void es_update_multicast_filter (int unit);
extern int esioctl(int unit, int cmd, int flag);
extern void es_init(void);
extern void es_final(void);
extern void es_reset_all(void);
extern int presstats(int flag);
