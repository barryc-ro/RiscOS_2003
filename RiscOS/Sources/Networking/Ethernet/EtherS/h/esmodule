/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright(c) 1995 Acorn Computers Ltd., Cambridge, England
 *
 * Module specific information
 */

/*
 * structures for holding a unit's filtering information
 */
#ifndef HASHED_MULTICAST
struct multitable {
    unsigned char  address[8];
};
#endif

#if !defined(HASHED_MULTICAST) && !defined(MULTITABLESIZE)
    //#warning "MULTITABLESIZE unset, defaulting to 512"
    #define MULTITABLESIZE 512
#endif

typedef struct filtersingle
{
    unsigned int   fs_addrlevel;
    unsigned int   fs_errlevel;
    void         (*fs_handler)();
    unsigned int   fs_pwptr;

#ifdef HASHED_MULTICAST
    /* How many times a multicast address with each hash value has been claimed.
     * UINT_MAX signifies "INFINITY", which means that any attempts to release
     * an address with that hash value are ignored. "All multicasts claimed" is
     * signified by all entries being UINT_MAX.
     */
    unsigned int   fs_multicount[MULTICAST_HASHSIZE];
#else
    struct multitable *fs_multitable;
    unsigned int   fs_multitablesize;
    struct multitable static_multitable[512];
    unsigned int  fs_multiall;
#endif
} FilterSingle, *FilterSingleRef;

typedef struct filterchain
{
    struct filterchain *fc_next;		/* XXX *must* be 1st field */
    unsigned int        fc_type;
    struct filtersingle fc_filter;
} FilterChain, *FilterChainRef;

#define fc_addrlevel	fc_filter.fs_addrlevel
#define fc_errlevel	fc_filter.fs_errlevel
#define fc_handler	fc_filter.fs_handler
#define fc_pwptr	fc_filter.fs_pwptr

/*
 * checks for valid filter parameters
 */
#define check_errlevel(x)	((x) == ERRLVL_NO_ERRORS)

#define MAX(a,b) (((a)>(b))?(a):(b))

/*
 * typedef for pointer to filter function
 */
typedef int (*AddressFilter)(FilterSingleRef fs, RxHdr *hdr, struct es_softc *es);

extern void send_driverstatus(DibRef dib, int status);

/* EOF e2module.h */
