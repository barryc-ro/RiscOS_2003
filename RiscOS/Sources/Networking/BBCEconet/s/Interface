        SUBT    ==> &.Arthur.BBCEconet.Interface

OsByte ROUT
        [ False ;Debug
        DLINE   "BBCEconet - OsByte"
        DREG    r0, "Reg A = &", cc
        DREG    r1, ",  Reg X = &", cc
        DREG    r2, ",  Reg Y = &"
        ]
        TEQ     r0, #50
        TEQNE   r0, #51
        TEQNE   r0, #52
        MOVNES  pc, lr
        Push    "r0-r8, lr"
        TEQ     r0, #50
        BEQ     PollTx
        TEQ     r0, #51
        BEQ     PollRx
        B       DeleteRx

OsWord ROUT
        [       False ;Debug
        DLINE   "BBCEconet - OsWord"
        DREG    r0, "Command   = &"
        DREG    r1, "Arguments @ &", cc
        Push    "r0, r2, lr"
        MOV     r0, #0
10
        LDRB    r2, [ r1, r0 ]
        BREG    r2, ", ", cc
        INC     r0
        TEQ     r0, #12
        BNE     %10
        SWI     OS_NewLine
        Pull    "r0, r2, lr"
        ]
        TEQ     r0, #16
        TEQNE   r0, #17
        TEQNE   r0, #19
        TEQNE   r0, #20
        MOVNES  pc, lr
        Push    "r0-r8, lr"
        TEQ     r0, #16
        BEQ     CallTx
        TEQ     r0, #17
        BEQ     OpenRx
        TEQ     r0, #20
        BEQ     DoFSOp
        ; Note the drop through to the ReadAndSet dispatch
        LDRB    r8, [ r1 ]                      ; Get reason code from block
        CMP     r8, #( EndOfJumpTable - JumpTable ) / 4
        ADDCC   pc, pc, r8, LSL #2
        Pull    "r0-r8, pc",,^                  ; Exit without claiming

JumpTable
        B       ReadFSNumber                    ; 0
        B       SetFSNumber                     ; 1
        B       ReadPSNumber                    ; 2
        B       SetPSNumber                     ; 3
        B       ReadProtection                  ; 4
        B       SetProtection                   ; 5
        B       MainExit                        ; ReadContext, 6
        B       MainExit                        ; SetContext, 7
        B       ReadLocalStation                ; 8
        B       MainExit                        ; ReadArgsNumber, 9
        B       MainExit                        ; ReadErrorNumber, 10
        B       MainExit                        ; ReadErrorChannel, 11
        B       ReadPSName                      ; 12
        B       SetPSName                       ; 13
        B       MainExit                        ; ReadSizeOfPSBuffer, 14
        B       ReadFSRetryDelay                ; 15
        B       SetFSRetryDelay                 ; 16
        B       TranslateNetNumber              ; 17
EndOfJumpTable

        ; *************************
        ; ***  T r a n s m i t  ***
        ; *************************

CallTx ROUT
        MOV     r8, r1
        LDR     r0, TransmitHandle
        [       Debug
        DREG    r0, "Transmit handle &"
        ]
        CMP     r0, #0                          ; Is the transmit handle empty?
        BEQ     TransmitIsOKToStart
        SWI     XEconet_PollTransmit            ; See what it is up to
        BVS     MainExit
        [       Debug
        DREG    r0, "Transmit status = &"
        ]
        TEQ     r0, #Status_TxReady
        TEQNE   r0, #Status_Transmitting
        BEQ     TransmitUnableToStart           ; If it really is busy
        LDR     r0, TransmitHandle
        MOV     r1, #0                          ; Get rid of the handle
        STR     r1, TransmitHandle
        SWI     XEconet_AbandonTransmit
        BVS     MainExit
TransmitIsOKToStart
        LDRB    r0, [ r8, #0 ]                  ; Control byte
        TST     r0, #BitSeven
        ORREQ   r0, r0, #BitEight               ; If bit seven was clear make sure it will go bang
        BIC     r0, r0, #BitSeven               ; Clear the top bit for early Econets (1.20)
        LDRB    r1, [ r8, #1 ]                  ; Port
        LDRB    r2, [ r8, #2 ]                  ; Station
        LDRB    r3, [ r8, #3 ]                  ; Network
        INC     r8, 4
        LDW     r4, r8, r6, r7                  ; Start address
        INC     r8, 4
        LDW     r5, r8, r6, r7                  ; End address
        SUB     r5, r5, r4                      ; Size
        TEQ     r2, #&FF                        ; Look for broadcast conditions
        TEQEQ   r3, #&FF
        SUBEQ   r4, r8, #4                      ; Setup for broadcast
        MOVEQ   r5, #8
        TEQ     r1, #0                          ; Is the port zero ??
        BEQ     TransmitIsImmediate
        MOV     r6, #0                          ; Count
        MOV     r7, #0                          ; Delay
        [       Debug
        DLINE   "SWI XEconet_StartTransmit"
        DREG    r0, "Control = &"
        DREG    r1, "Port    = &"
        DREG    r2, "Station = &"
        DREG    r3, "Network = &"
        DREG    r4, "Start   = &"
        DREG    r5, "Length  = &"
        DREG    r6, "Count   = &"
        DREG    r7, "Delay   = &"
        ]
        SWI     XEconet_StartTransmit
        BVS     MainExit
        B       StoreTransmitHandle

TransmitIsImmediate
        INC     r8, 4
        LDW     r1, r8, r6, r7                  ; Extra word
        MOV     r6, #0                          ; Count
        MOV     r7, #0                          ; Delay
        [       Debug
        DLINE   "SWI XEconet_StartImmediate"
        DREG    r0, "Control = &"
        DREG    r2, "Station = &"
        DREG    r3, "Network = &"
        DREG    r4, "Start   = &"
        DREG    r5, "Length  = &"
        DREG    r6, "Count   = &"
        DREG    r7, "Delay   = &"
        DREG    r1, "Address = &"
        ]
        SWI     XEconet_StartImmediate
StoreTransmitHandle
        [       Debug
        BVS     %98
        DREG    r0, "Transmit handle is &"
98
        ]
        STRVC   r0, TransmitHandle
        B       MainExit

TransmitUnableToStart
BadReadRxHandle
        MOV     r0, #0
        STRB    r0, [ r8 ]                      ; Indicate failure to start
ExitOK
        CLRV
MainExit
        STRVS   r0, [ sp ]
        Pull    "r0-r8, lr, pc"                 ; Exit claiming

PollTx ROUT
        LDR     r0, TransmitHandle
        TEQ     r0, #0                          ; Is a transmit in progress ??
        LDREQB  r0, LastTxStatus
        BEQ     ReturnTxStatus                  ; Zero in the handle means 'use the last status'
        MOV     r7, r0                          ; Save handle for possible Abandon
        SWI     XEconet_PollTransmit
        BVS     MainExit
        TEQ     r0, #Status_TxReady
        TEQNE   r0, #Status_Transmitting
        BEQ     %10
        MOV     r0, r7                          ; Restore handle
        MOV     r1, #0                          ; Get rid of the handle
        STR     r1, TransmitHandle
        SWI     XEconet_AbandonTransmit
        BVS     MainExit 
10
        ADR     r1, StatusConversionTable
        LDRB    r0, [ r1, r0 ]                  ; Translate RISC OS status to BBC status
        STRB    r0, LastTxStatus
ReturnTxStatus
        STRB    r0, [ sp, #4 ]
        B       MainExit

StatusConversionTable
        DCB     &00                             ; Status_Transmitted
        DCB     &40                             ; Status_LineJammed
        DCB     &41                             ; Status_NetError
        DCB     &42                             ; Status_NotListening
        DCB     &43                             ; Status_NoClock
        DCB     &80                             ; Status_TxReady
        DCB     &80                             ; Status_Transmitting
        DCB     &4F                             ; Status_RxReady
        DCB     &4F                             ; Status_Receiving
        DCB     &4F                             ; Status_Received
        DCB     &4F                             ; Status_NoReply
        DCB     &4F                             ; Status_Escape
        DCB     &42                             ; Status_NotPresent

        ; ***********************
        ; ***  R e c e i v e  ***
        ; ***********************

OpenRx ROUT
        MOV     r8, r1
        LDRB    r0, [ r8 ]                      ; Determine Open or Read
        TEQ     r0, #0
        BNE     ReadRx
        MOV     r7, #MinRxHandle                ; BBC RxCB number
        ADR     r6, ReceiveHandles
GetNewRxHandle
        LDR     r0, [ r6, r7, ASL #2 ]
        TEQ     r0, #0
        BEQ     GotNewHandle
        INC     r7
        TEQ     r7, #MaxRxHandle + 1
        BNE     GetNewRxHandle
        B       ExitOK

GotNewHandle
        INC     r8, 5
        LDW     r3, r8, r4, r5                  ; Start address
        INC     r8, 4
        LDW     r2, r8, r4, r5                  ; End address
        SUB     r4, r2, r3                      ; Calculate block size
        LDRB    r0, [ r8, #2-9 ]                ; Port
        LDRB    r1, [ r8, #3-9 ]                ; Station
        LDRB    r2, [ r8, #4-9 ]                ; Network
        TEQ     r1, #0
        TEQEQ   r2, #0
        MOVEQ   r1, #255
        MOVEQ   r2, #255
        [       Debug
        DLINE   "SWI XEconet_CreateReceive"
        DREG    r0, "Port    = &"
        DREG    r1, "Station = &"
        DREG    r2, "Network = &"
        DREG    r3, "Start   = &"
        DREG    r4, "Length  = &"
        ]
        SWI     XEconet_CreateReceive
        BVS     MainExit
        [       Debug
        DREG    r0, "SWI XEconet_CreateReceive returns &", cc
        BREG    r7, " which is returned as &"
        ]
        STR     r0, [ r6, r7, ASL #2 ]
        STRB    r7, [ r8, #-9 ]
        B       ExitOK

ReadRx
        CMP     r0, #MinRxHandle
        BLT     BadReadRxHandle
        CMP     r0, #MaxRxHandle
        BGT     BadReadRxHandle
        ADR     r6, ReceiveHandles
        LDR     r7, [ r6, r0, ASL #2 ]          ; The RISC OS RxHandle
        TEQ     r7, #0
        BEQ     BadReadRxHandle
        MOV     r1, #0
        STR     r1, [ r6, r0, ASL #2 ]          ; The copy in the list zeroed
        MOV     r0, r7
        SWI     XEconet_ReadReceive
        BVS     MainExit
        Swap    r0, r7                          ; Record status, get back handle
        SWI     XEconet_AbandonReceive
        BVS     MainExit
        TEQ     r7, #Status_Received
        MOVNE   r1, #&7F                        ; Virgin RxCB flag
        ORREQ   r1, r1, #&80
        STRB    r1, [ r8, #1 ]
        STRB    r2, [ r8, #2 ]
        STRB    r3, [ r8, #3 ]
        STRB    r4, [ r8, #4 ]
        ADD     r6, r5, r6                      ; Change to end address
        STRB    r5, [ r8, #5 ]
        ASR     r5, 8
        STRB    r5, [ r8, #6 ]
        ASR     r5, 8
        STRB    r5, [ r8, #7 ]
        ASR     r5, 8
        STRB    r5, [ r8, #8 ]
        STRB    r6, [ r8, #9 ]
        ASR     r6, 8
        STRB    r6, [ r8, #10 ]
        ASR     r6, 8
        STRB    r6, [ r8, #11 ]
        ASR     r6, 8
        STRB    r6, [ r8, #12 ]
        B       MainExit

PollRx ROUT
        CMP     r1, #MinRxHandle
        BLT     BadPollRxHandle
        CMP     r1, #MaxRxHandle
        BGT     BadPollRxHandle
        ADR     r6, ReceiveHandles
        LDR     r0, [ r6, r1, ASL #2 ]          ; The RISC OS RxHandle
        TEQ     r0, #0
        BEQ     BadPollRxHandle
        SWI     XEconet_ReadReceive
        BVS     MainExit
        TEQ     r0, #Status_Received
        MOVNE   r1, #&7F
        ORREQ   r1, r1, #&80
        STR     r1, [ sp, #4 ]                  ; Control value
        B       MainExit

BadPollRxHandle
        MOV     r1, #0                          ; Bad handle
        STR     r1, [ sp, #4 ] 
        B       ExitOK

DeleteRx ROUT
        [       Debug
        DLINE   "Delete Rx"
        BREG    r1, "BBC handle = &"
        ]
        CMP     r1, #MinRxHandle
        BLT     ExitOK
        CMP     r1, #MaxRxHandle
        BGT     ExitOK
        ADR     r6, ReceiveHandles
        LDR     r0, [ r6, r1, ASL #2 ]          ; The RISC OS RxHandle
        TEQ     r0, #0
        BEQ     ExitOK
        MOV     r2, #0
        STR     r2, [ r6, r1, ASL #2 ]          ; Destroy, destroy
        [       Debug
        DREG    r0, "RISC OS handle = &"
        ]
        SWI     XEconet_AbandonReceive
        B       MainExit

        ; *********************
        ; ***  E c o n e t  ***
        ; *********************

ReadProtection ROUT
        MOV     r8, r1                          ; Address of block
        MOV     r0, #0
        MOV     r1, #-1
        SWI     XEconet_SetProtection           ; Read value into R0
        ; Bit 0  =>  PEEK
        ; Bit 1  =>  POKE
        ; Bit 2  =>  Remote JSR
        ; Bit 3  =>  User procedure call
        ; Bit 4  =>  OS procedure call
        ; Bit 5  =>  Stop
        ; Bit 6  =>  Continue
        ; Bit 7  =>  Machine peek
        ; Bit 8  =>  Get registers
        ANDVC   r0, r0, #2_00111111             ; Leave only the BBC ones
        STRVCB  r0, [ r8, #1 ]
        B       MainExit

SetProtection ROUT
        LDRB    r0, [ r1, #1 ]
        AND     r0, r0, #2_00111111             ; Leave only the BBC ones
        MOV     r1, #2_01111111111111111111111111000000 ; Mask value
        SWI     XEconet_SetProtection           ; for changing only the BBC values
        B       MainExit

ReadLocalStation ROUT
        MOV     r8, r1                          ; Address of block
        SWI     XEconet_ReadLocalStationAndNet
        STRVCB  r0, [ r8, #1 ]
        B       MainExit

        ; ***********************
        ; ***  P r i n t e r  ***
        ; ***********************

ReadPSNumber ROUT
        MOV     r8, r1                          ; Address of block
        SWI     XNetPrint_ReadPSNumber
        STRVCB  r0, [ r8, #1 ]
        STRVCB  r1, [ r8, #2 ] 
        B       MainExit

SetPSNumber ROUT
        LDRB    r0, [ r1, #1 ]
        LDRB    r1, [ r1, #2 ] 
        SWI     XNetPrint_SetPSNumber
        B       MainExit

ReadPSName ROUT
        ADD     r1, r1, #1                      ; Address to return name
        MOV     r2, #6
        SWI     XNetPrint_ReadPSName
        B       MainExit

SetPSName ROUT
        LDMIA   r1, { r3, r4 }
        Push    "r3, r4"                        ; Put name in a stack frame with a spare byte at the end
        MOV     r0, #0
        STRB    r0, [ sp, #7 ]                  ; Set the spare byte to zero to terminate the name
        ADD     r0, sp, #1                      ; Address of new name
        SWI     XNetPrint_SetPSName
        INC     sp, 8                           ; Trash stack frame
        B       MainExit

        ; **********************************
        ; ***  F i l i n g  S y s t e m  ***
        ; **********************************

ReadFSNumber ROUT
        MOV     r8, r1                          ; Address of block
        SWI     XNetFS_ReadFSNumber
        STRVCB  r0, [ r8, #1 ]
        STRVCB  r1, [ r8, #2 ] 
        B       MainExit

SetFSNumber ROUT
        LDRB    r0, [ r1, #1 ]
        LDRB    r1, [ r1, #2 ] 
        SWI     XNetFS_SetFSNumber
        B       MainExit

ReadFSRetryDelay ROUT
        ; Transmit counts in the BBC world are 7 centi-seconds
        ; so to read multiply the count and delay values read from RISC OS
        ; then divide the result by 7, limiting the result to 255.
        ; Receive poll count in the BBC world is 58 centi-seconds
        ; so to read divide the receive delay read from RISC OS by 58.
        ; MachinePeek counts in the BBC world are 17 centi-seconds
        ; so to read multiply the count and delay values read from RISC OS
        ; then divide the result by 17, limiting the result to 255.
        MOV     r8, r1                          ; Address of block
        SWI     XNetFS_ReadFSTimeouts
        BVS     MainExit
        MUL     r7, r0, r1                      ; Total transmit time
        MOV     r6, #7
        BL      Divide
        STRB    r0, [ r8, #1 ]
        MOV     r7, r4                          ; Total receive time
        MOV     r6, #58
        BL      Divide
        STRB    r0, [ r8, #2 ]
        MUL     r7, r2, r3                      ; Total machine peek time
        MOV     r6, #17
        BL      Divide
        STRB    r0, [ r8, #3 ]
        B       MainExit

Divide
        DivRem  r0, r7, r6, r5
        CMP     r0, #255
        MOVHI   r0, #255                        ; Fix it up as a byte value
        MOV     pc, lr

SetFSRetryDelay ROUT
        ; Transmit counts in the BBC world are 7 centi-seconds
        ; so to set, use the number given as the count and 7 as the delay.
        ; Receive poll count in the BBC world is 58 centi-seconds
        ; so to set, use the given value multiplyed by 58.
        ; MachinePeek counts in the BBC world are 17 centi-seconds
        ; so to set, use the number given as the count and 17 as the delay.
        MOV     r8, r1
        SWI     XNetFS_ReadFSTimeouts           ; Get BroadcastDelay in R5
        BVS     MainExit
        LDRB    r0, [ r8, #1 ]                  ; BBC transmit count
        MOV     r1, #7
        LDRB    r2, [ r8, #3 ]                  ; BBC machine peek count
        MOV     r3, #17
        LDRB    r4, [ r8, #2 ]                  ; BBC receive poll count
        MOV     r7, #58
        MUL     r4, r7, r4                      ; RISC OS value for receive time out
        SWI     XNetFS_SetFSTimeouts            ; Note that R5 has been preserved
        B       MainExit

TranslateNetNumber ROUT
        MOV     r8, r1
        SWI     XEconet_ReadLocalStationAndNet
        BVS     MainExit
        MOV     r7, r1 ; Local net number
        STRB    r7, [ r8, #1 ]                  ; Return local net number
        LDRB    r0, [ r8, #3 ]                  ; Incoming net number for translation
        TEQ     r0, #0
        BNE     %10                             ; Translate a number not local to the file server
        SWI     XNetFS_ReadFSNumber
        STRVCB  r1, [ r8, #3 ]
        B       MainExit

10
        TEQ     r0, r7
        MOVEQ   r0, #0
        STRB    r0, [ r8, #3 ]
        B       MainExit

DoFSOp  ROUT
        MOV     r8, r1                          ; Address of block
        LDRB    r8, [ r8, #0 ]                  ; Operation type flag
        TEQ     r8, #0
        BNE     NotifyOrRemote
        MOV     r8, r1                          ; Address of block
        LDRB    r0, [ r8, #3 ]                  ; Function code
        LDRB    r2, [ r8, #1 ]                  ; Size of the block
        SUBS    r2, r2, #7                      ; Exclude header
        MOVMI   r2, #0                          ; If the size was too small make it OK
        ADD     r1, r1, #7                      ; Point at the users data
        MOV     r3, #125                        ; This limit is set by the maximum tube transfer of 125 bytes
        SWI     XNetFS_DoFSOp
        BVS     ConvertFSError
        SUB     r4, r1, #5                      ; Start of RxHeader
        STRB    r0, [ r4 ], #1                  ; Command code
        MOV     r0, #0
        STRB    r0, [ r4 ], #1                  ; Return code
        TEQ     r3, #0
        BEQ     MainExit
        MOV     r2, #0
10
        LDRB    r0, [ r1, r2 ]
        INC     r2
        STRB    r0, [ r4 ], #1
        CMP     r2, r3
        BLT     %10 
        B       MainExit

ConvertFSError
        LDR     r2, [ r0 ]                      ; The error number
        BIC     r1, r2, #&FF000000              ; Clear the top byte
        BIC     r1, r1, #&000000FF              ; Clear the bottom byte
        LDR     r3, =&010500                    ; Middle sixteen bits identify filing system error
        TEQ     r1, r3                          ; Is this a filing system error
        BEQ     DoConversion
        SETV
        B       MainExit

DoConversion
        LDR     r1, [ sp, #4 ]                  ; Get the original R1
        STRB    r2, [ r1, #3 ]                  ; Return code
        MOV     r2, #0
        STRB    r2, [ r1, #2 ]                  ; Command code
        INC     r1, 3
        INC     r0, 4
20
        LDRB    r2, [ r0 ], #1
        CMP     r2, #0
        MOVEQ   r2, #13
        STRB    r2, [ r1, #1 ] !
        BNE     %20
        CLRV
        B       MainExit

NotifyOrRemote
        MOV     r8, r1                          ; Address of block
        LDRB    r8, [ r8, #0 ]                  ; Operation type flag
        CMP     r8, #2                          ; CauseRemoteError ??
        BEQ     CauseRemoteError
        BGT     MainExit
Notify
        LDRB    r3, [ r1, #1 ]
        LDRB    r4, [ r1, #2 ]
        MOV     r5, #1                          ; Send one byte for compatability
        MOV     r6, #1
        MOV     r7, #0
        ADD     r8, r1, #3                      ; Start of the message
NotifyLoop
        MOV     r0, #Econet_OSProcedureCall
        MOV     r2, r3
        MOV     r3, r4
        MOV     r4, r8
        LDRB    r1, [ r8 ], #1                  ; Get the char to send
        CMP     r1, #0                          ; Terminate on a zero without sending it
        BEQ     MainExit
        ASL     r1, 16                          ; Put the byte in the right place
        SWI     XEconet_DoImmediate
        BVS     MainExit
        TEQ     r0, #Status_Transmitted
        BEQ     NotifyWasOK
        MOV     r1, #0                          ; Don't make a nice error
        SWI     XEconet_ConvertStatusToError
        B       MainExit
NotifyWasOK
        CMP     r1, #&0D0000                    ; Check for Return after sending it
        BNE     NotifyLoop
        B       MainExit 

CauseRemoteError
        MOV     r0, #Econet_OSProcedureCall
        LDRB    r2, [ r1, #1 ]
        LDRB    r3, [ r1, #2 ]
        MOV     r1, #Econet_OSCauseFatalError   ; The procedure number for this one
        MOV     r4, sp
        MOV     r5, #1                          ; Send one byte for compatability
        MOV     r6, #1
        MOV     r7, #0
        SWI     XEconet_DoImmediate
        BVS     MainExit
        TEQ     r0, #Status_Transmitted
        MOVNE   r1, #0                          ; Don't make a nice error
        SWINE   XEconet_ConvertStatusToError
        B       MainExit

        LTORG

        END
