/*
 *
 *  Copyright (c) 1999 by Pace Micro Technologies plc. All Rights Reserved.
 *
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by Pace Micro Techonologies
 * plc.
 *
 *
 *                PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */

#ifndef platform_multicaster_h_included
#define platform_multicaster_h_included

/* Any changes here need to be reflected in the implementations for every
 * different architecture implementation
 */

extern bmc_status platform_create_socket(multicast_socket *);
extern bmc_status platform_close_socket(multicast_socket);
extern bmc_status platform_bind_socket(multicast_socket,
	u_long /*interface*/, short /*netorderport*/);
extern bmc_status platform_listen(multicast_socket, int /*queue length*/);
extern bmc_status platform_transmit(multicaster_object *);
extern bmc_status platform_transmit_to(multicaster_object *, struct sockaddr_in * /*dest*/);
extern bmc_status platform_receive_datagram(multicast_socket, void * /*buffer*/,
	int * /*in/out length*/, struct sockaddr_in * /*out sender*/,
	struct in_addr */*out local interface IP address datagram arrived on*/);
extern bmc_status platform_unicast(multicast_socket, struct sockaddr_in * /*dest*/,
	void * /*buffer*/, int /*length*/);

extern const char *platform_translate_errno(void);
extern bmc_status platform_report_error(const char * /*progname*/, bmc_status);
extern bmc_status platform_select(fd_set *, int /*secs*/, int * /*ready*/);
extern void platform_idle(void);
extern void platform_init(void);

extern bmc_status platform_get_local_port(multicast_socket, unsigned short *);

#endif
