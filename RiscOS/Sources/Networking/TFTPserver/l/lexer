
%{

#include "multicaster.h"
#include "config-parse.h"
#include "parser.h"

#define yylex parserlex

#define YY_ALWAYS_INTERACTIVE 0
#define YY_NEVER_INTERACTIVE 1
#define YY_MAIN 0
#define YY_STACK_USED 0

int yywrap(void)
{
        return 1;
}
extern int parserparse(void);
static int lexer_cidr(const char *text, cidr_list *cl);

%}

DIGIT	[0-9]
NUMBER	{DIGIT}+
KNUMBER	{DIGIT}+["K"|"k"]
IPCOMP  "."{NUMBER}
IP	{NUMBER}{IPCOMP}{IPCOMP}{IPCOMP}
CIDR	{NUMBER}{IPCOMP}*"/"{NUMBER}

COMMENT	#.*$

FILENAME [A-Za-z0-9/:\\\-]+

%%

{COMMENT}		/* swallow single line comments */

address			return TOK_ADDRESS;
all			return TOK_ALL;
allow			return TOK_ALLOW;
client			return TOK_CLIENT;
default			return TOK_DEFAULT;
disallow		return TOK_DISALLOW;
grace			return TOK_GRACE;
file			return TOK_FILENAME;
files			return TOK_FILES;
interface		return TOK_INTERFACE;
limit			return TOK_LIMIT;
lives			return TOK_LIVES;
max|maximum		return TOK_MAXIMUM;
minimum			return TOK_MINIMUM;
mtu			return TOK_MTU;
multicast		return TOK_MULTICAST;
none			return TOK_NONE;
period			return TOK_PERIOD;
rate			return TOK_RATE;
servers			return TOK_SERVERS;
timeout			return TOK_TIMEOUT;
ttl			return TOK_TTL;
unicast			return TOK_UNICAST;
unknown			return TOK_UNKNOWN;


{CIDR}			if (lexer_cidr(yytext, &parserlval.cidr)) return TOK_CIDR; REJECT;

{IP}			if (inet_pton(AF_INET, yytext, &parserlval.ip)) return TOK_IPADDR; REJECT;

{KNUMBER}		parserlval.num_int = atoi(yytext) << 10; return TOK_KILOINT;

{NUMBER}		parserlval.num_int = atoi(yytext); return TOK_INT;

{FILENAME}		parserlval.string = yytext; return TOK_STRING;

[ \t\r\n]+		/* swallow whitespace */

[{};\/]			return *yytext;


%%

static int lexer_cidr(const char *text, cidr_list *cl)
{
	cl->next = NULL;
        cl->bits = inet_net_pton(AF_INET, text, &cl->ip, sizeof(cl->ip));
        return (cl->bits != -1);
}

void lexer_exec(FILE *source)
{
        (void) input;
        (void) yyunput;
        (void) yy_flex_realloc;

        yyin = source;
        parserparse();
}
