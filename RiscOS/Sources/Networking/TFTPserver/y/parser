
/* TFTP server configuration file parser. */

%{

#include "multicaster.h"
#include "config-parse.h"

int yyerror(const char *s)
{
        fprintf(stderr, "configuration_parser: %s\n", s);
        exit(1);
        return 0;
}

#define alloca malloc

#define YYMAXDEPTH 0
#define __GNUC__ 1

extern int yylex(void);
extern int yyparser(void);

%}

%union {
	char *		string;
	const char *	string_const;
	struct in_addr	ip;
        cidr_list	cidr;
        cidr_list *	iplist;
        file_list *	filelist;
        file_list *	details;
        int		num_int;
}

%token			TOK_ADDRESS
%token			TOK_ALL
%token 			TOK_ALLOW
%token			TOK_CLIENT
%token			TOK_DEFAULT
%token 			TOK_DISALLOW
%token			TOK_FILENAME
%token			TOK_FILES
%token			TOK_GRACE
%token			TOK_INTERFACE
%token			TOK_LIMIT
%token			TOK_LIVES
%token			TOK_MINIMUM
%token			TOK_MTU
%token 			TOK_MULTICAST
%token			TOK_NONE
%token			TOK_PERIOD
%token			TOK_RATE
%token			TOK_TIMEOUT
%token			TOK_TTL
%token 			TOK_UNICAST
%token			TOK_UNKNOWN

%token 	<ip> 		TOK_IPADDR
%token	<cidr>		TOK_CIDR
%token	<num_int>	TOK_INT
%token	<num_int>	TOK_KILOINT
%token	<string>	TOK_STRING
%token	<num_int>	TOK_CIDRMASK

%type	<num_int>	integer
%type	<num_int>	unicast
%type	<num_int>	unknownfiles
%type	<num_int>	multicastttl
%type	<filelist>	scope
%type	<iplist>	cidr
%type	<iplist>	cidrlist
%type	<iplist>	emptycidrlist
%type	<iplist>	multicastdestinations
%type	<iplist>	allowedclients

%type	<details>	scopedeclaration
%type	<details>	scopestatement

%%

declaration		: /* empty */
			| toplevelstatement ';' declaration
			| scope '{' scopedeclaration '}' declaration
				{ config_parse_process_scope($1,$3); }
			;

toplevelstatement	: unicast
				{ config_parse_allow_unicasting($1); }
			| TOK_DEFAULT TOK_MULTICAST TOK_ADDRESS cidrlist
				{ config_parse_default_address($4); }
			| TOK_DEFAULT multicastttl
				{ config_parse_set_ttl($2); }
			| multicastdestinations
				{ config_parse_set_destinations($1); }
			| allowedclients
				{ config_parse_set_allowed_clients($1); }
			| unknownfiles
				{ config_parse_set_unknown_files($1); }
			| TOK_CLIENT TOK_GRACE TOK_PERIOD TOK_INT
				{ config_parse_set_grace_period($4); }
			| TOK_CLIENT TOK_LIVES integer
				{ config_parse_set_lives($3); }
			| TOK_DEFAULT TOK_MINIMUM TOK_RATE integer
				{ config_parse_set_transfer_rate($4); }
			| TOK_DEFAULT TOK_MTU TOK_LIMIT integer
				{ config_parse_set_mtu_ceiling($4); }
			| TOK_DEFAULT TOK_CLIENT TOK_TIMEOUT TOK_INT
				{ config_parse_set_total_timeout($4); }
			;

scopedeclaration	: scopestatement ';'
				{ $$ = $1; }
			| scopestatement ';' scopedeclaration
				{ $1->next = $3; $$ = $1; }
			;

scopestatement		: multicastttl
				{ $$ = filelist_alloc(NULL);
				  $$->ttl = $1;
				  $$->flags |= fl_TTL;
				}
			| multicastdestinations
				{ $$ = filelist_alloc(NULL);
				  $$->addresses = $1;
				  $$->flags |= fl_DESTS;
				}
			| allowedclients
				{ $$ = filelist_alloc(NULL);
				  $$->clients = $1;
				  $$->flags |= fl_CLIENTS;
				}
			;

unicast			: TOK_ALLOW TOK_UNICAST
				{ $$ = 1; }
			| TOK_DISALLOW TOK_UNICAST
				{ $$ = 0; }
			;

unknownfiles		: TOK_ALLOW TOK_UNKNOWN TOK_FILES
				{ $$ = 1; }
			| TOK_DISALLOW TOK_UNKNOWN TOK_FILES
				{ $$ = 0; }
			;

scope			: TOK_FILENAME TOK_STRING
				{ $$ = filelist_alloc($2); }
			;

/* The following options are trivial but may be used either in a
 * top-level declaration or a scoped declaration
 */

multicastttl		: TOK_MULTICAST TOK_TTL TOK_INT
				{ $$ = $3; }
			;

multicastdestinations	: TOK_MULTICAST TOK_ADDRESS cidrlist
				{ $$ = $3; }
			;

allowedclients		: TOK_ALLOW TOK_CLIENT cidrlist
				{ $$ = $3; }
			;

integer			: TOK_INT
			| TOK_KILOINT
			;

/* IP address list / CIDR parsing */

cidr			: TOK_CIDR
				{ $$ = cidr_alloc($1.ip,$1.bits); }
			| TOK_IPADDR
				{ $$ = cidr_alloc($1,32); }
			;

emptycidrlist		: /*empty*/
				{ $$ = NULL; }
			| cidr emptycidrlist
				{ $1->next = $2; $$ = $1; }
			;

cidrlist		: TOK_NONE
				{ $$ = NULL; }
			| TOK_ALL
				{ $$ = cidr_0alloc(); }
			| cidr emptycidrlist
				{ $1->next = $2; $$ = $1; }
			;

%%

