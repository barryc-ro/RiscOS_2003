/*
 *
 *  Copyright (c) 1999 by Pace Micro Technologies plc. All Rights Reserved.
 *
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by Pace Micro Techonologies
 * plc.
 *
 *
 *		  PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */

#include "multicaster.h"
#include "config-parse.h"

/* This file manages the configuration of the TFTP server software.  It calls
 * platform_* functions to open and close configuration files.  This may be
 * useful if the platform-specific implementation needs to obtain data from
 * somewhere other than a file, as it can export the data to a file and then
 * return a handle to it to here and then discard the exported data when asked
 * to close the file.  Configuration data is cached in the configuration structure.
 */

int lineno;

/*
 * Parser not yet present.  Most values hard-wired for now.
 */

typedef struct configuration {
        /* The number of "lives" a client gets before being killed off
         * as unreliable by the multicaster_object retry/timeout handlers */
        short		default_lives;
        /* Multicasts are sent to this port number by default */
        u_short		default_port;
        /* Multicasts are sent to these cycled multicast addresses by default */
        cidr_list	*default_address;
        /* Multicasts are sent with this TTL by default */
        u_char		default_ttl;
	/* Maximum multicasters to transmit the same file on the same
	 * interface with different block sizes (excluding SEGSIZE)
	 */
        int		multicaster_threshold;
        /* Non-zero means that unicast clients are supported.  Zero means
         * that RRQs which do not contain the multicast option are errored. */
        int		support_unicast_clients;
        /* An absolute limit on the MTU of outgoing packets */
        int		mtu_ceiling;
        /* Disable the interface MTU check which limits mtu_ceiling */
        int             ignore_interface_mtu;
        /* The amount of time (in seconds) after election as a master that
         * the client has to establish data transfer for the purpose of
         * calculating the sustained transfer rate */
        int		rate_grace_period;
        /* Rate in bytes/sec that a master client must sustain in order to
         * avoid being deposed as master.  see also rate_grace_period */
        unsigned long	minimum_master_rate;
        /* The time (in centiseconds) that the client has to response to any
         * packet (excluding retransmissions) before being deemed dead and
         * losing a life. */
        int		total_client_timeout;
        /* The root for all served files.  UNIX implementations will attempt
         * to chroot to this directory.  OSes without this capability should
         * always verify files live under this subtree. */
        const char *	root_directory;
        /* The details of specific files */
        file_list *	files;
        /* Flag - do we allow only listed files? */
        int		listed_files_only;
        /* The clients we are allowed to talk too */
        cidr_list	*clients;
        /* The debug level we wish to use - to override built-in value in arch .c files */
        int		debug_level;
} configuration;

static configuration conf;
static void config_dump(int);

static const char *default_root = "/tftpboot";

void configure_establish_defaults(void)
{
        struct in_addr default_ia;

        inet_aton("239.192.0.2", &default_ia);
	conf.default_address = cidr_alloc(default_ia, 32);
	conf.default_lives = 5;
	conf.default_port = 1758; /* tftp-mcast is the well-known port */
	conf.default_ttl = 5;
	conf.multicaster_threshold = 2;
	conf.support_unicast_clients = 1;
	conf.rate_grace_period = 10;
	conf.mtu_ceiling = 9212;
        conf.ignore_interface_mtu = 0;
	conf.minimum_master_rate = 60 * 1024;
	conf.total_client_timeout = 100 * 5;
	conf.root_directory = Strdup(default_root);
	conf.files = NULL;
	conf.listed_files_only = 0;
	conf.clients = cidr_0alloc();
	conf.debug_level = 0;
}

static void configure_parse(FILE *f)
{
        extern void lexer_exec(FILE *);
        lineno = 1;
        lexer_exec(f);
}

void configure_reread_configuration_file(void)
{
        FILE *f = platform_configuration_open();

        if (f != NULL) {
	        filelist_free(conf.files);
	        conf.files = NULL;
                configure_parse(f);
                fclose(f);
        }
}

void configure_init(void)
{
        configure_establish_defaults();
        signal(SIGUSR1, config_dump);
        configure_reread_configuration_file();
}

void configure_create_permanent_file_cache(void)
{
	/* At this point, it is safe to call multicast_file_create.  This can be done
	 * to pre-load various objects and ensure that they are never discarded (since
	 * we create them and then forget about them, the reference count will never
	 * decrement to zero
	 */
}

/* Cycle a list of addresses, given the address of the head pointer */
static cidr_list *configure_cycle_list(cidr_list **head)
{
        cidr_list *const result = *head;

        if (result != NULL && (*head)->next != NULL) {
                *head = (*head)->next;
                head = &(*head)->next;
                while ((*head)->next) {
                        head = &(*head)->next;
                }
                (*head)->next = result;
                result->next = NULL;
        }

        return result;
}

static file_list *configure_find_file_details(const char *filename)
{
        file_list *fl = conf.files;

	if (!filename) return NULL;

        for (;fl; fl=fl->next) {
                if (fl->filename && !strcmp(fl->filename, filename)) return fl;
        }

        return fl;
}

/* This function increments a stored IP address until it would cause the CIDR block
 * to be exited.  If the range was exhausted, it is reset to the first available
 * address and non-zero returned to indicate wrap.  Zero is returned if the address
 * was updated successfully.
 */
static int configure_cycle_cidr(cidr_list *cl)
{
        struct in_addr ho_mask, ho_next;
        u_long netmask;

        if (cl->bits == 0) return 0; /* use the same address always */
        if (cl->bits >= 32) return 1; /* Constant address, therefore move to next in list */

	netmask = ((1UL << cl->bits) - 1UL) << (32UL - cl->bits);
        ho_mask.s_addr = ntohl(cl->ip.s_addr);
        ho_next.s_addr = ho_mask.s_addr + 1;

        if ((ho_next.s_addr & netmask) != (ho_mask.s_addr & netmask)) {
                /* Wrapped */
                ho_next.s_addr = ho_mask.s_addr & netmask;
                cl->ip.s_addr = htonl(ho_next.s_addr);
                return 0;
        }
	else {
	        cl->ip.s_addr = htonl(ho_next.s_addr);
	        return 1;
	}
}

struct in_addr configure_read_target_address(const char *filename, struct in_addr *interface)
{
        file_list *f = configure_find_file_details(filename);

	if (f && f->addresses) {
	        if (!configure_cycle_cidr(f->addresses)) {
		        configure_cycle_list(&f->addresses);
	        }
	        platform_debug((LOG_DEBUG, "Assigning specific address %s for %s\n",
	        	inet_ntoa(f->addresses->ip), filename));
	        return f->addresses->ip;
	}

	(void) interface;

	if (!conf.default_address) {
	        platform_log(LOG_CRIT, "No default multicast addresses specified");
	        exit(EXIT_FAILURE);
	}

	if (!configure_cycle_cidr(conf.default_address)) {
	        configure_cycle_list(&conf.default_address);
	}
	return conf.default_address->ip;
}

struct in_addr configure_read_file_address(multicast_file *mf, struct in_addr *interface)
{
	return configure_read_target_address(multicast_file_get_filename(mf), interface);
}

int configure_validate_client_allowed(const char *filename, struct in_addr *client)
{
        file_list *f;
        cidr_list *cl;
	const u_long ho_client = htonl(client->s_addr);

        f = configure_find_file_details(filename);
        if (f == NULL) {
                if (conf.listed_files_only) {
                        return 0;
                }
                cl = conf.clients;
        }
        else {
                if (f->flags & fl_USE_DEFAULT_CLIENTS) {
                        cl = conf.clients;
                }
                else {
                        cl = f->clients;
                }
        }

        for (;cl; cl=cl->next) {
                if (cl->bits == 32) {
                        if (client->s_addr == cl->ip.s_addr) {
                                return 1;
                        }
                }
                else {
		        u_long netmask = ((1UL << cl->bits) - 1UL) << (32UL - cl->bits);
		        u_long ho_match = htonl(cl->ip.s_addr);
                        if ((ho_match & netmask) == (ho_client & netmask)) {
                                return 1;
                        }
                }
        }

        return 0;
}

u_char configure_read_specific_ttl(multicast_file *mf)
{
        file_list *f = configure_find_file_details(multicast_file_get_filename(mf));
        if (f && f->ttl != 0) {
        	return (u_char) f->ttl;
        }

        return configure_read_default_ttl();
}

void configure_set_target_address(const char *filename, const char *ip_string)
{
	/* Store away this configuration information one day */
	(void) filename;
	(void) ip_string;
}

size_t configure_clamp_mtu(size_t suggested, size_t if_support)
{
	/* Remember: Special case: 0 => client didn't sent a blksize option */

	/* Enforce the overall ceiling on packet sizes */
	if (if_support > conf.mtu_ceiling && !conf.ignore_interface_mtu) {
		if_support = conf.mtu_ceiling;
	}

	/* Strategy: limit blksize choice to the interface MTU (minus IP, UDP headers) */
	if (suggested > if_support) {
		suggested = if_support;
	}

	return suggested;
}

short configure_default_lives(void)
{
        return conf.default_lives;
}

u_short configure_read_default_port(void)
{
	return conf.default_port;
}

u_char configure_read_default_ttl(void)
{
        return conf.default_ttl;
}

int configure_read_multiple_multicaster_threshold(void)
{
	return conf.multicaster_threshold;
}

int configure_support_unicast_clients(void)
{
	return conf.support_unicast_clients;
}

int configure_read_rate_grace_period(void)
{
        return conf.rate_grace_period;
}

int configure_read_debug_options(void)
{
        return conf.debug_level;
}

unsigned long configure_read_minimum_master_rate(void)
{
        return conf.minimum_master_rate;
}

int configure_read_total_client_timeout(void)
{
        return conf.total_client_timeout;
}

const char *configure_read_root_directory(void)
{
	return conf.root_directory ? conf.root_directory : default_root;
}

/* The remaining functions are the APIs called by the bison generated parser */

void config_parse_allow_unicasting(int state)
{
        conf.support_unicast_clients = state;
}

void config_parse_set_ttl(int ttl)
{
        conf.default_ttl = (u_char) ttl;
}

void config_parse_default_address(cidr_list *cl)
{
        cidr_free(conf.default_address);
        conf.default_address = cl;
}

void config_parse_set_allowed_clients(cidr_list *cl)
{
        cidr_free(conf.clients);
        conf.clients = cl;
}

void config_parse_add_file_details(file_list *fl)
{
	fl->next = conf.files;
	conf.files = fl;
}

void config_parse_set_unknown_files(int any_allowed)
{
        conf.listed_files_only = !any_allowed;
}

void config_parse_set_grace_period(int period)
{
        conf.rate_grace_period = period;
}

void config_parse_set_lives(int lives)
{
        conf.default_lives = (short) lives;
}

void config_parse_set_transfer_rate(int rate)
{
        conf.minimum_master_rate = rate;
}

void config_parse_set_mtu_ceiling(int mtu)
{
        conf.mtu_ceiling = mtu;
}

void config_parse_set_ignore_if_mtu(void)
{
        conf.ignore_interface_mtu = 1;
}

void config_parse_set_total_timeout(int timeout)
{
        conf.total_client_timeout = timeout;
}

void config_parse_set_multiple_threshold(int threshold)
{
        conf.multicaster_threshold = threshold;
}

void config_parse_set_debug_options(int level)
{
        conf.debug_level = level;
}

void *parse_malloc(size_t bytes)
{
        void *ptr = malloc(bytes);

        if (!ptr) {
                platform_log(LOG_CRIT, "Memory exhaustion");
                exit(EXIT_FAILURE);
        }

        return ptr;
}

void parse_free(void *ptr)
{
        free(ptr);
}


static char *parse_Strdup(const char *s1)
{
  	if (s1 == NULL) {
  	        return NULL;
  	}
  	else {
		const size_t length = strlen(s1) + 1;
	        return memcpy(parse_malloc(length), s1, length);
  	}
}

cidr_list *cidr_0alloc(void)
{
        cidr_list *list = parse_malloc(sizeof(*list));
        list->next = NULL;
        list->ip.s_addr = 0;
        list->bits = 0;

        return list;
}


cidr_list *cidr_alloc(struct in_addr ia, int bits)
{
        cidr_list *list = cidr_0alloc();
        list->ip = ia;
        list->bits = bits;

        return list;
}

void cidr_free(cidr_list *cl)
{
        if (cl != NULL) {
	        cidr_list *next = cl->next;
	        free(cl);
	        cidr_free(next);
        }
}


file_list *filelist_alloc(char *filename)
{
        file_list *fn = parse_malloc(sizeof(*fn));

	fn->next = NULL;
        fn->filename = parse_Strdup(filename);
        fn->ttl = 0;
        fn->addresses = NULL;
        fn->flags = fl_MASTER|fl_USE_DEFAULT_CLIENTS;
        fn->clients = NULL;

        return fn;
}

void filelist_free(file_list *fl)
{
        if (fl != NULL) {
	        file_list *next = fl->next;
	        free(fl->filename);
	        free(fl);
	        filelist_free(next);
        }
}

void config_parse_process_scope(file_list *fl, file_list *details)
{
        file_list *det;

        for (det = details; det; det=det->next) {
                switch (det->flags) {
                        case fl_TTL:
	                        fl->ttl = det->ttl;
	                        break;
	                case fl_DESTS:
	                	fl->addresses = det->addresses;
	                	det->addresses = NULL;
	                	break;
	               	case fl_CLIENTS:
                                fl->clients = det->clients;
                                det->clients = NULL;
                                fl->flags &= ~fl_USE_DEFAULT_CLIENTS;
                                break;
                }
        }

        config_parse_add_file_details(fl);
}

static void print_cidr_list(cidr_list *cl, int indent)
{
        if (cl) {
                while (cl) {
                        char buf[32];
                        if (cl->bits == 32) {
                                inet_ntop(AF_INET, &cl->ip, buf, sizeof(buf));
                        }
                        else {
                                if (cl->bits == 0 && cl->ip.s_addr == 0L) {
                                        strcpy(buf, "All");
                                }
                                else
                                inet_net_ntop(AF_INET, &cl->ip, cl->bits, buf, sizeof(buf));
                        }
	                printf("%-*s%s\n", indent, "", buf);
	                cl = cl->next;
                }
        }
        else {
                printf("%-*sNone\n", indent, "");
        }

}

static void print_file_list(file_list *fl)
{
        if (!fl) {
                printf("  No specific file information\n");
        }
        else for (;fl; fl=fl->next) {
                printf("  Filename: %s\n", fl->filename);
                if (fl->ttl != 0) {
	                printf("  Multicast TTL: %u\n", fl->ttl);
                }
                if (fl->addresses) {
                        printf("  Multicast target addresses:\n");
                        print_cidr_list(fl->addresses, 4);
                }
                if (fl->clients) {
                        printf("  Allowed clients:\n");
                        print_cidr_list(fl->clients, 4);
                }
                else if (fl->flags & fl_USE_DEFAULT_CLIENTS) {
                        printf("  Allowed clients:\n    (use default list)\n");
                }
        }
}

static void config_dump(int dump_type)
{
        signal(dump_type, SIG_IGN);
	printf("Configuration:\n");

        printf("Default multicast TTL: %u\n", conf.default_ttl);
	printf("Default target port: %hu\n", conf.default_port);
	printf("Default multicast target addresses:\n");
	print_cidr_list(conf.default_address, 2);
	printf("Multiple multicast threshold: %d\n", conf.multicaster_threshold);
        printf("Unicast client support: %s\n", conf.support_unicast_clients ? "on" : "off");
	printf("MTU ceiling: %d\n", conf.mtu_ceiling);
	printf("Grace period: %d seconds\n", conf.rate_grace_period);
	printf("Required master transfer rate: %lu bytes/sec\n", conf.minimum_master_rate);
	printf("Client lives: %hd\n", conf.default_lives);
	printf("Client timeout: %d.%02d seconds\n", conf.total_client_timeout / 100,
		conf.total_client_timeout % 100);
	printf("Root directory: %s\n", conf.root_directory);
	printf("Listed files only: %s\n", conf.listed_files_only ? "yes" : "no");
	printf("Known files:\n");
	print_file_list(conf.files);
	printf("Default allowed clients:\n");
	print_cidr_list(conf.clients, 2);
	if (conf.debug_level) {
		printf("Debug level: %d\n", conf.debug_level);
	}
	else {
		printf("Debug level: default\n");
	}
	printf("\nEnd of configuration\n");

        signal(dump_type, config_dump);
}
