/*
 *
 *  Copyright (c) 1999 by Pace Micro Technologies plc. All Rights Reserved.
 *
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by Pace Micro Techonologies
 * plc.
 *
 *
 *		  PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <signal.h>

#include "sys/types.h"
#include "sys/socket.h"
#include "netinet/in.h"
#include "arpa/inet.h"
#include "sys/uio.h"

#include "multicaster.h"
#include "tftpserver.h"
#include "platform.h"
#include "mofile.h"


static const char id[] = "boot_multicaster";

static bmc_status main_run(void)
{
	bmc_status status = bmc_OK;

	for (;;) {
		fd_set set;
		struct timeval tv;
		int ready;

		timerclear(&tv);
		tv.tv_sec = LONG_MAX;

		platform_fd_zero(&set);
		tftpserver_fd_set(&set, &tv);
		mo_manager_fd_set(&set, &tv);
		icmpsocket_fd_set(&set, &tv);
		status = platform_select(&set, &tv, &ready);
		if (status != bmc_OK) {
			break;
		}
		ready -= tftpserver_fd_isset(&set);
		ready -= mo_manager_fd_isset(&set);
		ready -= icmpsocket_fd_isset(&set);
		if (ready) {
			platform_log(LOG_ERR, "Odd bits set (%d) in mask\n", ready);
			status = bmc_FATAL_INTERNAL;
			break;
		}
		else {
			platform_idle();
		}
	}

	return status;
}

static void escape_handler(int sig)
{
	platform_log(LOG_CRIT, "%s received signal (type=%u) and is exiting\n", id, sig);
	signal(sig, SIG_DFL);
	exit(EXIT_FAILURE);
}

#ifdef SIGHUP
static void sighup_handler(int sig)
{
        signal(sig, SIG_IGN);
        configure_reread_configuration_file();
        signal(sig, sighup_handler);
}
#endif

static bmc_status main_initialise(int argc, char **argv)
{
	bmc_status s;

	/* The order of these is important to ensure atexit fns are called in
	 * the right order
	 */
	/* Start with the low-level stuff */
	platform_init();
	configure_init();

	/* Mid-level network monitoring - requires super-user powers */
	icmpsocket_initialise();

	/* Now the high-level abstract stuff */
	multicast_file_initialise();
	mo_manager_initialise();

	while (argc > 1) {
		if (argc == 2) {
			return bmc_SYNTAX;
		}
		configure_set_target_address(argv[2], argv[1]);
	}

	s = tftpserver_initialise();
	if (s != bmc_OK) {
		return s;
	}

	/* Tidy up on close down */
	signal(SIGINT, escape_handler);
#ifdef SIGHUP
	signal(SIGHUP, sighup_handler);
#endif

	return main_run();
}

int main(int argc, char *argv[])
{
	bmc_status status = main_initialise(argc, argv);

	if (status != bmc_OK) {
		status = platform_report_error(id, status);
	}

	return status == bmc_OK ? EXIT_SUCCESS : EXIT_FAILURE;
}
