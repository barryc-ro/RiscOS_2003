/*
 *
 *  Copyright (c) 1999 by Pace Micro Technologies plc. All Rights Reserved.
 *
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by Pace Micro Techonologies
 * plc.
 *
 *
 *		  PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stddef.h>
#include <signal.h>

#include "sys/types.h"
#include "sys/socket.h"
#include "netinet/in.h"
#include "arpa/inet.h"
#include "sys/uio.h"

#include "multicaster.h"

/* A list of active multicasters */
static multicaster_object *mo_list;

static void mo_manager_finalise(void)
{
	while (mo_list) {
	        multicaster_object *mo = mo_list;
	        mo_manager_delink(mo);
		mo_manager_destroy(mo);
	}
}

void mo_manager_initialise(void)
{
	mo_list = NULL;
	atexit(mo_manager_finalise);
}

void mo_manager_destroy(multicaster_object *mo)
{
	multicaster_object_dtor(mo);
}


void mo_manager_delink(multicaster_object *mo)
{
	multicaster_object **ptr = &mo_list;
	for (; *ptr != NULL; ptr = multicaster_get_next(*ptr)) {
		if (*ptr == mo) {
			*ptr = *(multicaster_get_next(*ptr));
			break;
		}
	}
}

static multicaster_object *mo_manager_locate(const char *filename, size_t *bufsiz,
		struct in_addr *interface)
{
	multicaster_object *mo, *best = NULL;
	size_t best_size = 0;
	size_t count = 0;

	fprintf(stderr, "mo_manager_locate: %s %d %s\n", filename, *bufsiz,
		inet_ntoa(*interface));

	for (mo = mo_list; mo != NULL; mo = *multicaster_get_next(mo)) {
	        multicast_file *mf = multicaster_get_file(mo);
	        fprintf(stderr, "Checking session %p\n", mo);
	        if (!multicaster_check_interface(mo, interface)) {
	                /* Wrong interface - must not match this entry */
	                fprintf(stderr, "multicaster_check_interface: wrong i/f\n");
	        }
		else if (multicast_file_name_match(mf, filename) == 0) {
			/* This is the right file - how about the buffer
			 * size?
			 */
		        size_t buffer = multicaster_get_buffer_size(mo);
		        ++count;
		        if (*bufsiz == 0 && buffer == SEGSIZE) {
		                /* Client did not specify a blksize, but we
		                 * have found a multicaster which is using
		                 * the default blksize - return it
		                 */
		                *bufsiz = buffer;
		                return mo;

		        }
			if (buffer == *bufsiz) {
			        /* Exact match */
				return mo;
			}
			if (buffer < *bufsiz) {
			        /* Blocks are smaller - could be used
			         * if we exceed our maximum number of
			         * multicasters for the file/interface
			         */
			        if (buffer > best_size) {
			                /* Only elect the largest */
				        best = mo;
				        best_size = buffer;
			        }
			}
		}
		else {
	                fprintf(stderr, "wrong filename\n");
		}
	}

	/* To get here, we haven't found an exactly suitable multicaster.
	 * if count is zero, then there are no multicasters for this file
	 * on this interface - so return NULL.  If count is not zero, it is
	 * the number of filename+interface matches and, if best is not
	 * NULL, is the best we can offer (otherwise all the other multicasters
	 * are using too large block sizes.  If count passes the threshold
	 * for the maximum number of multicasters for this filename+interface
	 * pair, then we alter the bufsiz and return the best guess.
	 */
	if (best != NULL && count > configure_read_multiple_multicaster_threshold()) {
	        *bufsiz = best_size;
	        return best;
	}

	return NULL;
}

void mo_manager_fd_set(fd_set *set, int *secs)
{
        multicaster_object *mo;

	if (*secs > 2) *secs = 2; /* Max 2 seconds delay */

	for (mo = mo_list; mo != NULL; mo = *multicaster_get_next(mo)) {
	        multicast_socket ms = multicaster_get_socket(mo);
	        FD_SET(ms, set);
        }
}

int mo_manager_fd_isset(fd_set *set)
{
        multicaster_object *mo;
        int handled_count = 0;

	for (mo = mo_list; mo != NULL; mo = *multicaster_get_next(mo)) {
	        multicast_socket ms = multicaster_get_socket(mo);
	        if (FD_ISSET(ms, set)) {
	                FD_CLR(ms, set);
	                ++handled_count;
	                multicaster_process_packet(mo);
	        }
        }

        return handled_count;
}

/* This function is invoked by the TFTP server when a new RRQ is received */
multicaster_object *mo_manager_new_client(
	const char *filename,
	size_t bufsize, struct sockaddr_in *sender,
	struct in_addr *interface,
	bmc_status *status)
{
	multicaster_object *mo;
	multicast_file *mf;

	*status = bmc_MALLOC_FAILED;

	mo = mo_manager_locate(filename, &bufsize, interface);
	if (mo == NULL) {
        	if (bufsize == 0) {
        	        /* Caller uses zero to indicate that the TFTP client did NOT
        	         * specify a blksize parameter, and thus we must only make
        	         * exact matches.  Now we have got past that check, we are
        	         * free to set it to the proper value.
        	         */
        	        bufsize = SEGSIZE;
        	}

        	mf = multicast_file_create(filename);
        	if (mf == NULL) {
        		return NULL;
        	}

        	mo = multicaster_new(bufsize);
        	if (mo == NULL) {
        		return NULL;
        	}

        	*status = multicaster_object_ctor(mo, mf, interface);
        	if (*status == bmc_OK) {
        		fprintf(stderr, "mo_manager: session %p:\n", mo);
        		*(multicaster_get_next(mo)) = mo_list;
        		mo_list = mo;
        	}
        	else {
        		mo_manager_destroy(mo);
        		return NULL;
        	}
	}

	/* mo cannot be NULL to get this far */
	*status = multicaster_add_client(mo, sender);
	return mo;
}
