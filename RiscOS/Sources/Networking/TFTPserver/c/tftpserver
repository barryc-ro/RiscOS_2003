/*
 *
 *  Copyright (c) 1999 by Pace Micro Technologies plc. All Rights Reserved.
 *
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by Pace Micro Techonologies
 * plc.
 *
 *
 *		  PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */

#include "multicaster.h"

enum {
	packet_buffer = SEGSIZE
};
static multicast_socket s = multicaster_INVALID_SOCKET;

/* This server determines which port number the TFTP server should
 * be listening on.  This is read from the system cofiguration
 * file if possible - otherwise the default of 68 is used.  The
 * result is returned in network-byte-order.
 */
static short tftpserver_determine_accept_port(void)
{
	struct servent *se = getservbyname("tftp", "udp");

	if (se != NULL) {
		return se->s_port;
	}
	else {
		return htons(69);
	}
}

multicast_socket tftpserver_get_socket(void)
{
        return s;
}

static void tftpserver_closedown(void)
{
	if (s != multicaster_INVALID_SOCKET) {
		platform_close_socket(s);
		s = multicaster_INVALID_SOCKET;
	}
}

bmc_status tftpserver_initialise(void)
{
	bmc_status status;

	status = platform_create_socket(&s);
	if (status == bmc_OK) {
		atexit(tftpserver_closedown);
		status = platform_bind_socket(s, htonl(INADDR_ANY), tftpserver_determine_accept_port());
	}

	return status;
}

void tftpserver_fd_set(fd_set *fd, struct timeval *secs)
{
        if (s != multicaster_INVALID_SOCKET) {
	        platform_fd_set(s, fd);
	        (void) secs; /* Not interested in reducing sleep time */
        }
}

int tftpserver_fd_isset(fd_set *fd)
{
        if (platform_fd_isset(s, fd)) {
                platform_fd_clr(s, fd);
                tftpserver_process_packet(NULL);
                return 1; /* Indicate that one socket has been dealt with */
        }

        return 0; /* No sockets have been dealt with */
}

#ifdef DEBUG
static void tftpserver_packet_dump(const struct tftphdr *tftp, int length)
{
	short op = ntohs(tftp->th_opcode);
	const char *ptr = tftp->th_stuff, *eop;
	int pos = offsetof(struct tftphdr, th_stuff);

	fprintf(stderr, "%4s ", i18n_translate_tftp_opcode(op));

	switch (op) {
		case RRQ:
		case WRQ:
			eop = memchr(ptr, '\0', length - pos);
			if (eop == NULL) {
				fprintf(stderr, "Badly formed packet (no terminator (name))\n");
				break;
			}
			else {
				fprintf(stderr, "File `%s' ", ptr);
			}
			pos += (eop - ptr) + 1;
			ptr = eop + 1;

			eop = memchr(ptr, '\0', length - pos);
			if (eop == NULL) {
				fprintf(stderr, "Badly formed packet (no terminator (mode))\n");
				break;
			}
			else {
				fprintf(stderr, "Mode `%s' ", ptr);
			}

			pos += (eop - ptr) + 1;
			ptr = eop + 1;

			while (pos < length) {
				const char *opt, *value;

				opt = ptr;
				value = memchr(ptr, '\0', length - pos);
				if (value != NULL) {
					value++;
					pos += (value - ptr);
					ptr = memchr(value, '\0', length - pos);
					if (ptr != NULL) {
						fprintf(stderr, "\nOption `%s' ; Value `%s'",
							opt, value);
						++ptr;
						pos += (ptr - value);
						continue;
					}
				}
				fprintf(stderr, "Badly formed options");
				break;
			}
			break;
		case DATA:
			fprintf(stderr, "Block # %d", ntohs(tftp->th_block));
			break;
		case ACK:
			fprintf(stderr, "Block # %d", ntohs(tftp->th_code));
			break;
		case ERROR:
			op = ntohs(tftp->th_code);
			if (op < EUNDEF || op > EBADOPTS) {
				fprintf(stderr, "Unknown error %d", op);
			}
			else {
				fprintf(stderr, "%s", i18n_translate_tftp_error_code(op));
			}
			break;
		case OACK:
			break;
		default:
			break;
	}

	fprintf(stderr, "\n");
}
#endif

static void tftpserver_error(struct tftphdr *tftp, short ecode, const char *msg)
{
        platform_debug((LOG_DEBUG, "Error: %s\n", msg ? msg : i18n_translate_tftp_error_code(ecode)));
	tftp->th_opcode = ntohs(ERROR);
	tftp->th_code = ntohs(ecode);
	strcpy(tftp->th_data, msg ? msg : i18n_translate_tftp_error_code(ecode));
}

/* This routine determines if the packet is valid or not.  If it is not, then it
 * return zero having altered the buffer to be a TFTP ERROR packet.  The caller
 * can determine the length of the error packet by strlen'ing the th_data field
 * plus terminator.
 */
static int tftpserver_is_packet_valid(struct tftphdr *tftp, int length, char **file, char **mode)
{
	short op = ntohs(tftp->th_opcode);
	char *ptr = tftp->th_stuff, *eop;
	char *eob = ((char *) tftp) + length;
	int pos = offsetof(struct tftphdr, th_stuff);

	if (length < offsetof(struct tftphdr, th_msg)) {
		/* Malformed packet - drop it */
		tftpserver_error(tftp, EBADOP, "Malformed packet");
		return 0;
	}

	if (op < RRQ || op > OACK) {
		tftpserver_error(tftp, EBADOP, NULL);
		return 0;
	}

	if (op == WRQ) {
		tftpserver_error(tftp, EBADOP, "Write not supported");
		return 0;
	}

#ifdef DEBUG
	tftpserver_packet_dump(tftp, length);
#endif

	if (op == RRQ) {
		eop = memchr(ptr, '\0', eob - ptr);
		if (eop == NULL) {
		        /* No file field! */
		        tftpserver_error(tftp, EBADOP, "No filename");
		        return 0;
		}
		else {
		        *file = ptr;
		}
		ptr = eop + 1;
		eop = memchr(ptr, '\0', eob - ptr);
		if (eop == NULL) {
		        tftpserver_error(tftp, EBADOP, "No mode");
		        return 0;
		}
		else {
		        *mode = ptr;
		}

		ptr = eop + 1;
		pos += (ptr - tftp->th_stuff);

		while (pos < length) {
			const char *opt, *value;

			opt = ptr;
			value = memchr(ptr, '\0', eob - ptr);
			if (value != NULL) {
				value++;
				pos += (value - ptr);
				ptr = memchr(value, '\0', eob - value);
				if (ptr != NULL) {
				        ++ptr;
				        pos += (ptr - value);
					continue;
				}
			}
			tftpserver_error(tftp, EBADOPTS, "Badly formed options");
                	return 0;
		}
	}

	return 1;
}

static void tftpserver_unicast_error(struct tftphdr *tftp, struct sockaddr_in *dest)
{
	platform_unicast(s, dest, tftp,
		offsetof(struct tftphdr, th_data) + strlen(tftp->th_data) + 1);

}

static const char *tftpserver_locate_option(const struct tftphdr *tftp, int length, const char *option)
{
	const char *options = tftp->th_stuff;
	const char *end_of_options = ((const char *) tftp) + length;

	options += strlen(options) + 1; /* Skip filename */
	options += strlen(options) + 1; /* Skip transfer type */

	while (options < end_of_options) {
		int result = Strcmp_ci(option, options);
		options += strlen(options) + 1;
		if (result == 0) {
		        return options;
		}
		options += strlen(options) + 1;
	}

	return NULL;
}

static int tftpserver_was_packet_unicasted(struct in_addr *local_if)
{
        u_long ho_ip = ntohl(local_if->s_addr);

        if (IN_MULTICAST(ho_ip)) {
		return 0;
        }

        return 1;
}

/* This function is called when the incoming datagram was sent to the TFTP server port
 * The basic packet integrity has been validated - including options on RRQ messages.
 */
static void tftpserver_examine_new_rrq(struct tftphdr *tftp, char *buffer, int length,
		struct sockaddr_in *sender, struct in_addr *local_if,
		const char *filename, const char *mode)
{
	const char *optval;
	bmc_status status;
	multicaster_object *mo;
	size_t bufsize;
	tftp_client *client;
	tftp_mode tmode;
	int unicast = 0;
	int send_oack;

        /* Fault non-RRQ packets */
	if (ntohs(tftp->th_opcode) != RRQ) {
	        tftpserver_error(tftp, EBADOP, NULL);
	        tftpserver_unicast_error(tftp, sender);
		return;
	}

	if (Strcmp_ci(mode, "netascii") == 0) {
	        tmode = mode_NETASCII;
	}
	else if (Strcmp_ci(mode, "octet") == 0) {
	        tmode = mode_OCTET;
	}
	else {
	        tftpserver_error(tftp, EBADOP, "Unsupported transfer mode");
	        tftpserver_unicast_error(tftp, sender);
	        return;
	}

	optval = tftpserver_locate_option(tftp, length, "multicast");
	if (!optval) {
	        if (!configure_support_unicast_clients()) {
			tftpserver_error(tftp, EBADOPTS, "Require multicast option");
		        tftpserver_unicast_error(tftp, sender);
	        	return;
	        }
	        else {
	                unicast = 1;
	        }
	}
	else {
	        if (*optval != '\0') {
	                tftpserver_error(tftp, EBADOPTS, "Multicast option value not null");
	                tftpserver_unicast_error(tftp, sender);
	                return;
	        }
	}

	/* Check for tsize and object if it is not set to zero */
	optval = tftpserver_locate_option(tftp, length, "tsize");
	if (optval) {
	        if (optval[0] != '0' || optval[1] != '\0') {
                        tftpserver_error(tftp, EBADOPTS, "tsize value was not 0");
		        tftpserver_unicast_error(tftp, sender);
                        return;
                }
	}

	/* Check for blksize and object if it is illegal or too small to make sense */
	optval = tftpserver_locate_option(tftp, length, "blksize");
	if (optval) {
		char *eosize;

		bufsize = (size_t) strtoul(optval, &eosize, 10);
		if (eosize == optval || *eosize != '\0') {
		        tftpserver_error(tftp, EBADOPTS, "Malformed blksize option");
		        tftpserver_unicast_error(tftp, sender);
		        return;
		}
		if (bufsize < SEGSIZE) {
		        /* Not contrary to the specification - but client is stupid if they
		         * want it this small -*/
		        tftpserver_error(tftp, EBADOPTS, "blksize too small (<512)");
		        tftpserver_unicast_error(tftp, sender);
		        return;
		}
	}
	else {
	        bufsize = 0; /* Used to indicate default in mo_manager_new_client - it will fill it in */
	}

	bufsize = configure_clamp_mtu(bufsize, platform_get_interface_mtu(*local_if));

	/* Once processing reaches this point, we have decided to accept the request for
	 * the file in principle and need to try and find a multicaster object to handle
	 * the client to decide for sure.
	 */
	mo = mo_manager_new_client(filename, tmode, bufsize, sender, local_if, unicast, &status);
	if (mo == NULL) {
	        /* Ignore this request - something nasty has happened */
	        if (status == bmc_FILE_NOT_FOUND) {
	                platform_debug((LOG_DEBUG, "TFTP: File not found"));
	                tftpserver_error(tftp, ENOTFOUND, NULL);
	                tftpserver_unicast_error(tftp, sender);
	        }
	        else {
		        platform_debug((LOG_DEBUG, "TFTP: mo_manager not interested - ignoring request\n"));
	        }
	        return;
	}

	client = multicaster_lookup_client(mo, sender);
	if (client == NULL) {
	        platform_log(LOG_CRIT, "TFTP: Internal error - unable to locate new client");
	        return;
	}

	/* Construct the OACK reply to the RRQ. */
	send_oack = 0;

	if (tftpserver_locate_option(tftp, length, "multicast")) {
		send_oack = 1;
	}

	if (tftpserver_locate_option(tftp, length, "tsize")) {
		send_oack = 1;
                multicaster_oack_includes_tsize(mo, client);
	}

	if (tftpserver_locate_option(tftp, length, "blksize")) {
		/* Must rely on the multicaster object for the block size - in case we
		 * aren't going to offer the size that was requested
		 */
	        send_oack = 1;
                multicaster_oack_includes_blksize(mo, client);
	}

	if (send_oack) {
		multicaster_transmit_oack(mo, client);
	}
	else {
	        /* A client that doesn't do any options (we know) so we skip the OACK stage and pretend
	         * we received an ACK of block zero from it, and hence cause data block 1 to be sent to it
	         * as a reply to its RRQ
	         */
	        multicaster_process_ack(mo, 0, sender);
	}
}

/* Examine the packet that has just arrived on a multicaster's socket */
static void tftpserver_examine_response(multicaster_object *mo, struct tftphdr *tftp,
		char *buffer, int length, struct sockaddr_in *sender, struct in_addr *local_if)
{
        switch (ntohs(tftp->th_opcode)) {
                default:
                        /* Don't know this message - must ignore it? or fault it? */
                        break;
                case RRQ:
                case WRQ:
                case OACK:
                        /* All error conditions - do we send an error back? */
                        break;
                case ERROR:
                        /* Client thinks we've made a mistake - investigate */
                        multicaster_investigate_error(mo, ntohs(tftp->th_block), sender);
                        break;
                case DATA:
                        /* Should never occur - ignore this message or fault it? */
                        break;
               	case ACK:
			/* This ack can only occur in 4 situations:
			 *   1) ACK of block 0 (ie our OACK)
			 *   2) ACK of last block to indicate client is done.
			 *   3) ACK of a block from the master client
			 *   4) ACK of a block from another client
			 * Condition 4 should not occur if all clients are functioning
			 * correctly.  What do we do about unknown clients?
			 */
                        multicaster_process_ack(mo, ntohs(tftp->th_block), sender);
                        break;
        }
}

static void tftpserver_examine_packet(multicaster_object *mo, char *buffer, int length,
		struct sockaddr_in *sender, struct in_addr *local_if)
{
	struct tftphdr *tftp = (struct tftphdr *) buffer;
	char *filename, *mode;

	platform_debug((LOG_DEBUG, "TFTP: <- %s from %s\n",
		i18n_translate_tftp_opcode(ntohs(tftp->th_opcode)),
		inet_ntoa(sender->sin_addr)));

	if (!tftpserver_was_packet_unicasted(local_if)) {
		platform_log(LOG_NOTICE, "TFTP target not recognised (%s) - ignoring it\n",
			inet_ntoa(*local_if));
		return;
	}

	if (!tftpserver_is_packet_valid(tftp, length, &filename, &mode)) {
		tftpserver_unicast_error(tftp, sender);
		return;
	}

	if (mo == NULL) {
	        /* Our TFTP server socket received a message */
	        tftpserver_examine_new_rrq(tftp, buffer, length, sender, local_if, filename, mode);
	}
	else {
	        /* One of our multicasters received a message */
	        tftpserver_examine_response(mo, tftp, buffer, length, sender, local_if);
	}
}

/* This function reads and processes an TFTP packet from the specified multicaster_object socket
 *
 * If mo was NULL, it means that it was the TFTP server port which received the message.
 * local_if is the IP address of the local interface on which the transmission was received.
 */
bmc_status tftpserver_process_packet(multicaster_object *mo)
{
	char	buffer[packet_buffer];
	struct  sockaddr_in sin;
	struct	in_addr local_if;
	int	length = sizeof(buffer);
	bmc_status status;
	multicast_socket ms = mo ? multicaster_get_socket(mo) : tftpserver_get_socket();

	status = platform_receive_datagram(ms, buffer, &length, &sin, &local_if);
	if (status == bmc_OK) {
		tftpserver_examine_packet(mo, buffer, length, &sin, &local_if);
	}

	return status;
}
