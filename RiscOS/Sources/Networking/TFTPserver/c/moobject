/*
 *
 *  Copyright (c) 1999 by Pace Micro Technologies plc. All Rights Reserved.
 *
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by Pace Micro Techonologies
 * plc.
 *
 *
 *		  PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stddef.h>
#include <signal.h>

#include "sys/types.h"
#include "sys/socket.h"
#include "netinet/in.h"
#include "arpa/inet.h"
#include "sys/uio.h"

#include "multicaster.h"


/* This data structure holds all the information necessary to track interaction
 * with a given client.  Clients are identified by their full network address
 * held in the client field.  The multicaster object holds an array of these
 * records.
 */
struct tftp_client {
	struct sockaddr_in	client;
	unsigned int		oack_acked:1;
	unsigned int		connected:1;
	unsigned int		unicast_only:1;
	unsigned int		timeout_pending:1;
	unsigned int		retransmitted:1;
	unsigned int		oack_send_blksize:1;
	unsigned int		oack_send_tsize:1;
	short			discard_lives;
	int			current_part_number;
	unsigned long		packet_count;
	platform_time   	rtt_average_8;
	platform_time   	rtt_deviation_4;
	platform_time   	rto;
	platform_time		last_transmission;
	platform_time		elected_at;
	platform_time		timeout;
	platform_time		discard_time;
};

/* Multicaster object structure details are private to this source file.
 * Do not change this - add accessor/mutator functions to the header file
 * and implement them here.
 */

struct multicaster_object {
	multicaster_object	*next;

	/* The multicast destination address + parameter for msghdr.
	 */
	struct sockaddr_in	target;

	/* The source address for this object */
	struct sockaddr_in	source;

	/* File handle of the object being multicasted */
	multicast_file		*f;

	/* Socket handle */
	multicast_socket	s;

	/* TFTP header information prepended to data packets */
	struct tftphdr		header;

	/* The payload data buffer descriptor */
	int			iov_size;
	struct iovec		iov[2];


	/* The buffer for holding the file data (appears after this object in memory) */
	size_t			size_of_buffer;
	char			*buffer;

	/* Data sent tracking information */
	int			max_part_number;

	/* Client tracking information */
	int			clients;	/* Actual number of known active clients */
	int			clients_alloc; 	/* size of currently allocated client array */
	tftp_client		*master_client;	/* ID of the master client */
	tftp_client		*client;	/* Array of known clients */

	/* Extra client tracking - statistics held for short-circuiting calculations only */
	int			multicast_clients;
	int			unicast_clients;
};


static void multicaster_demote_client(multicaster_object *mo, tftp_client *client);

multicast_socket multicaster_get_socket(multicaster_object *mo)
{
	return mo->s;
}

multicaster_object **multicaster_get_next(multicaster_object *mo)
{
	return &mo->next;
}

multicast_file *multicaster_get_file(multicaster_object *mo)
{
	return mo->f;
}

size_t multicaster_get_buffer_size(multicaster_object *mo)
{
	return mo->size_of_buffer;
}

size_t multicaster_get_total_size(multicaster_object *mo)
{
	return (size_t) multicast_file_get_size(mo->f);
}

struct sockaddr_in *multicaster_get_target(multicaster_object *mo)
{
	return &mo->target;
}

void multicaster_oack_includes_blksize(multicaster_object *mo, tftp_client *client)
{
        client->oack_send_blksize = 1;
}

void multicaster_oack_includes_tsize(multicaster_object *mo, tftp_client *client)
{
        client->oack_send_tsize = 1;
}

static void multicaster_timeout_retransmitted(multicaster_object *mo, tftp_client *client)
{
	(void) mo;

	client->timeout = platform_time_current_time() + (client->rto *= 2);
	client->retransmitted = 1;
}

static void multicaster_set_discard_timeout(multicaster_object *mo, tftp_client *client)
{
	(void) mo;
	client->discard_time = platform_time_current_time() + configure_read_total_client_timeout();
	client->timeout_pending = 1;
}

static void multicaster_cancel_timeouts(multicaster_object *mo, tftp_client *client)
{
	client->timeout_pending = 0;
}

static void multicaster_initialise_rtt(multicaster_object *mo, tftp_client *client)
{
    	platform_time now = platform_time_current_time();

	client->rtt_average_8 = 0;
	client->rtt_deviation_4 = 300;
	client->rto = 300;
	client->elected_at = now;
	client->packet_count = 0;
	platform_debug((LOG_DEBUG, "Initialising: RTT=%.1f, Dev=%.1f, RTO=%d\n",
		client->rtt_average_8/8.0, client->rtt_deviation_4/4.0, client->rto));
}

static void multicaster_start_rtt(multicaster_object *mo, tftp_client *client)
{
    	platform_time now = platform_time_current_time();

	client->retransmitted = 0;
	client->timeout_pending = 1;
	client->last_transmission = now;
	client->timeout = now + client->rto;
}

static void multicaster_timeout_ack_received(multicaster_object *mo, tftp_client *client)
{
	platform_time now = platform_time_current_time();
	platform_time rtt = now - client->last_transmission;

        multicaster_set_discard_timeout(mo, client);

	if (!client->retransmitted)
	{
		platform_time_diff err;

                /* Update our smoothed RTT estimators as per Van Jacobsen's
                 * paper "Congestion Avoidance and Control" (1988).
                 *
                 * Note that we don't have the magic initialisation from the
                 * first ACK that Berkeley TCP code does (a:=m, v:=m/2) -
                 * we just let it head in the correct direction with the
                 * usual gain.
                 *
                 * There's lots of subtle integer rounding and clock phasing
                 * allowance going on here - see Van Jacobsen for details.
                 */

                /* Error in our current RTT estimate from this measurement */
    		err = rtt - (client->rtt_average_8 >> 3);

                /* Average RTT follows measurements with gain of 0.125 */
    		client->rtt_average_8 += err;

    		/* Mean deviation follows measurements with gain of 0.25 */
    		if (err < 0)
    			err = -err;
    		client->rtt_deviation_4 += err - (client->rtt_deviation_4 >> 2);

                /* Retransmit time-out = average + 4 * deviation */
                client->rto = (client->rtt_average_8 >> 3) + client->rtt_deviation_4;

                /* Enforce a minimum RTO. As we're almost certainly on a LAN, it should
                 * be quite low. Let's say 50ms, to allow for a bit of client jitter
                 * (ACKs are probably being sent by a user process, unlike TCP).
                 * At a minimum it rto must be >0 so that exponential backoff works :)
                 */
                if (client->rto < 1)
                        client->rto = 1;
        }
        else
        {
                /* If we retransmitted the last DATA packet, the RTT estimate and
                 * (backed off) RTO are left untouched. This is Karn's algorithm, from
                 * "Improving Round-Trip Time Estimates in Reliable Transport Protocols"
                 * (1987).
                 *
                 * Briefly, we don't touch RTT as we don't want dropped packets to
                 * change our smoothed RTT estimate, and we can't tell which DATA
                 * packet is being ACKed anyway. We keep RTO backed off so that we have
                 * a chance of getting a real RTT measurement next time if our smoothed
                 * RTT is too low.
                 *
                 * This second part is a critical constituent of Karn's
                 * paper, and is overlooked by most commentators...
                 */
        }

        client->timeout = now + client->rto;
 	client->last_transmission = now;
        client->retransmitted = 0;
	platform_debug((LOG_DEBUG, "Measured=%d, RTT=%.1f, Dev=%.1f, RTO=%d\n",
		rtt, client->rtt_average_8/8.0, client->rtt_deviation_4/4.0, client->rto));
}


void multicaster_determine_select_timeout(multicaster_object *mo, struct timeval *tv)
{
        const platform_time now = platform_time_current_time();
        int idx;
        int timeouts = 0;
        platform_time_diff shortest = 0;

        for (idx=0; idx<mo->clients; ++idx) {
                tftp_client *const client = &mo->client[idx];

                if (client->timeout_pending) {
                        platform_time_diff first;
                        if (platform_time_cmp(client->discard_time, client->timeout) > 0) {
                                first = (platform_time_diff) (client->timeout - now);
                        }
                        else {
                                first = (platform_time_diff) (client->discard_time - now);
                        }
                        if (!timeouts++ || first < shortest) {
                                shortest = first;
	                        if (shortest <= 0) {
        	                        break;
                	        }
                        }
                }
        }

        if (timeouts > 0) {
		if (shortest <= 0) {
		        /* Time is in the past! */
		        tv->tv_sec = 0;
		        tv->tv_usec = 0;
		}
		else {
                        ldiv_t result = ldiv(shortest, 100L);
                        result.rem *= 10000L;
                        if (tv->tv_sec > result.quot ||
                                tv->tv_sec == result.quot && tv->tv_usec > result.rem) {
                                tv->tv_sec = result.quot;
                                tv->tv_usec = result.rem;
                        }
		}
        }

}

tftp_client *multicaster_lookup_client(multicaster_object *mo, struct sockaddr_in *sin)
{
	int i;

	for (i=0; i<mo->clients; ++i) {
		if (memcmp(sin, &mo->client[i].client, sizeof(*sin)) == 0) {
			return &mo->client[i];
		}
	}

	return NULL;
}

int multicaster_set_iovec(multicaster_object *mo, struct iovec *iov)
{
	(void) memcpy(iov, mo->iov, sizeof(mo->iov));
	return mo->iov_size;
}

static void multicaster_write_iovec(multicaster_object *mo,
	void *header, int header_len, void *data, int data_len)
{
	mo->iov[0].iov_base = header;
	mo->iov[0].iov_len = header_len;
	mo->iov[1].iov_base = data;
	mo->iov[1].iov_len = data_len;
	if (data_len == 0) {
		mo->iov_size = 1;
	}
	else {
		mo->iov_size = 2;
	}
}

bmc_status multicaster_object_ctor(multicaster_object *mo, multicast_file *mf,
		struct in_addr *interface)
{
	bmc_status status;

	/* Initialise various members to safe values */
	mo->s = multicaster_INVALID_SOCKET;

	/* The file handle */
	mo->f = mf;

	/* Initialise the client list */
	mo->clients = 0;
	mo->clients_alloc = 0;
	mo->master_client = NULL;
	mo->client = NULL;

	/* Initialise the stats */
	mo->multicast_clients = 0;
	mo->unicast_clients = 0;

	/* Set up the source address for the packets */
	platform_init_sockaddr_in(&mo->source, *interface, 0);

	/* Calculate and cache the destination address for multicast packets */
	platform_init_sockaddr_in(&mo->target,
		configure_read_file_address(mo->f, interface),
		htons(configure_read_default_port()));

	/* Ensure that the target IP address is a multicast address */
	if (!IN_MULTICAST(htonl(mo->target.sin_addr.s_addr))) {
		return bmc_NOT_MULTICAST;
	}

	mo->max_part_number = 1 + (size_t) multicast_file_get_size(mo->f) / mo->size_of_buffer;

	/* Set up the destination socket address for sending */
	status = platform_create_socket(&mo->s);
	if (status == bmc_OK) {
		/* Create a binding to the interface */
		status = platform_bind_socket(mo->s, interface->s_addr, 0);
		if (status == bmc_OK) {
			/* Find out what the source port is for future reference */
			status = platform_get_local_port(mo->s, &mo->source.sin_port);
		}
	}
	if (status != bmc_OK) {
		return status;
	}

	/* Set up the I/O vector for data sending */
	multicaster_write_iovec(mo, &mo->header, offsetof(struct tftphdr, th_data),
		mo->buffer, mo->size_of_buffer);

	return bmc_OK;
}

multicaster_object *multicaster_new(size_t bufsize)
{
	multicaster_object *mo = calloc(1, sizeof(*mo) + bufsize);

	if (mo != NULL) {
		/* Initialise everything so that dtor can be called safely */
		mo->f = NULL;
		mo->s = multicaster_INVALID_SOCKET;
		mo->client = NULL;
		mo->size_of_buffer = bufsize;
		mo->buffer = (char *) (mo + 1);
	}

	return mo;
}

void multicaster_object_dtor(multicaster_object *mo)
{
	if (mo->client != NULL) {
		free(mo->client);
	}
	if (mo->f != NULL) {
		/* If we want the file objects to persist, we can implement that here */
		multicast_file_destroy(mo->f);
	}
	if (mo->s != multicaster_INVALID_SOCKET) {
		platform_close_socket(mo->s);
		mo->s = multicaster_INVALID_SOCKET;
	}
	free(mo);
}

size_t multicaster_format_full_oack(multicaster_object *mo, tftp_client *client, char *buffer)
{
        size_t length = 0;

	if (client->oack_send_blksize) {
	        length += sprintf(buffer + length, "blksize%c%d%c", '\0',
	        	multicaster_get_buffer_size(mo), '\0');
	}
	if (client->oack_send_tsize) {
	        length += sprintf(buffer + length, "tsize%c%d%c", '\0',
	        	multicaster_get_total_size(mo), '\0');
	}
	if (!client->unicast_only) {
	        const struct sockaddr_in *const target = multicaster_get_target(mo);
	        length += sprintf(buffer + length, "multicast%c%s,%d,%d%c", '\0',
	        	inet_ntoa(target->sin_addr),
	        	ntohs(target->sin_port),
	        	mo->master_client == client,
	        	'\0');
	}

	return length;
}


static size_t multicaster_format_oack(char *buffer, int is_master)
{
	return sprintf(buffer, "multicast%c,,%d%c", '\0', is_master?1:0, '\0');
}

static tftp_client *multicaster_find_most_eligible_client(multicaster_object *mo)
{
        if (!mo->multicast_clients) {
                return NULL;
        }
        else {
                int idx;

                for (idx=0; idx<mo->clients; ++idx) {
			if (!mo->client->unicast_only && mo->client[idx].connected) {
			        return &mo->client[idx];
			}
                }

                return NULL;
        }
}

static void multicaster_activate_master_client(multicaster_object *mo, tftp_client *prefer)
{
        tftp_client *const elected = prefer ? prefer : multicaster_find_most_eligible_client(mo);

	/* Always reset this - even if we aren't electing any client as master */
	mo->master_client = elected;

	if (elected) {
	        elected->elected_at = platform_time_current_time();
	        elected->packet_count = 0;
		elected->current_part_number = -1;
		mo->iov[0].iov_len = offsetof(struct tftphdr, th_stuff);
		mo->iov[1].iov_len = multicaster_format_oack(mo->buffer, 1);
		mo->header.th_opcode = htons(OACK);
		multicaster_start_rtt(mo, elected);
		multicaster_set_discard_timeout(mo, elected);
		platform_transmit_to(mo, &elected->client);
	}
}

static int multicaster_read_next_part(multicaster_object *mo, int last_acked_part_number,
		tftp_client *client)
{
	size_t offset;

	if (last_acked_part_number >= mo->max_part_number) {
		/* This client has finished - signal this by returning zero */
		return 0;
	}

	client->current_part_number = last_acked_part_number + 1;
	mo->header.th_opcode = htons(DATA);
	mo->header.th_block = htons(client->current_part_number);

	offset = (client->current_part_number - 1) * mo->size_of_buffer;

	multicaster_write_iovec(mo, &mo->header, offsetof(struct tftphdr, th_data),
		mo->buffer, multicast_file_read(mo->buffer, offset, mo->size_of_buffer, mo->f));

	/* Next block has been cued up ready for transmission ... indicate by returning 1 */
	return 1;
}


static void multicaster_remove_client(multicaster_object *mo, tftp_client *client)
{
	if (client == NULL) {
		client = &mo->client[0];
	}

	platform_debug((LOG_DEBUG, "multicaster_object(%p): Removing client %s\n", mo,
		inet_ntoa(client->client.sin_addr)));

	if (client->unicast_only) {
	        --mo->unicast_clients;
	}
	else {
	        --mo->multicast_clients;
	}


	if (client == mo->master_client) {
		mo->master_client = NULL;
	}

	if (client - mo->client == mo->clients - 1) {
		/* This was the last client - just decrement the count of clients */
		--mo->clients;
	}
	else {
		/* Shift everything else up one space */
		--mo->clients;
		(void) memmove(client, client + 1,
			sizeof(*mo->client) * (mo->client + mo->clients - client));
		if (mo->master_client != NULL && mo->master_client > client) {
			/* Master client has moved - re-align the master_client pointer */
			--mo->master_client;
		}
	}

	if (mo->clients <= 0) {
		mo_manager_delink(mo);
		mo_manager_destroy(mo);
	}
	else {
		/* If we just killed the master client, allocate a new master client */
		if (mo->master_client == NULL) {
			multicaster_activate_master_client(mo, NULL);
		}
	}
}

static void multicaster_init_client(multicaster_object *mo, tftp_client *c, struct sockaddr_in *sin)
{
	memset(c, '\0', sizeof(*c));
	c->client = *sin;
	c->oack_acked = 0;
	c->connected = 0;
	c->unicast_only = 0;
	c->timeout_pending = 0;
	c->discard_lives = configure_default_lives();
	multicaster_initialise_rtt(mo, c);
}

bmc_status multicaster_add_client(multicaster_object *mo, struct sockaddr_in *sin, int unicast)
{
	size_t idx;
	tftp_client *client;

	platform_debug((LOG_DEBUG, "multicaster_add_client: %s:%d (%s)\n",
		inet_ntoa(sin->sin_addr), ntohs(sin->sin_port),
		unicast ? "unicast" : "multicast"));

	for (idx=0; idx<mo->clients; ++idx) {
		platform_debug((LOG_DEBUG, "multicaster_add_client: compare with %s:%d\n",
			inet_ntoa(mo->client[idx].client.sin_addr),
			ntohs(mo->client[idx].client.sin_port)));
		if (memcmp(sin, &mo->client[idx].client, sizeof(*sin)) == 0) {
			/* Found the client already in the list */
			return bmc_ALREADY;
		}
	}

	platform_debug((LOG_DEBUG, "New client\n"));

	if (mo->clients == mo->clients_alloc) {
		static const size_t allocation_granularity = 16;
		size_t master_idx = mo->master_client - mo->client;
		tftp_client *clients;
		size_t new_size;

		new_size = (mo->clients_alloc + allocation_granularity) * sizeof(*mo->client);
		clients = realloc(mo->client, new_size);
		if (clients == NULL) {
			return bmc_MALLOC_FAILED;
		}
		mo->client = clients;
		mo->clients_alloc += allocation_granularity;
		if (mo->master_client) {
			mo->master_client = &mo->client[master_idx];
		}
	}

	client = &mo->client[mo->clients++];

	multicaster_init_client(mo, client, sin);
	client->unicast_only = unicast ? 1 : 0;

	if (client->unicast_only) {
	        ++mo->unicast_clients;
	}
	else {
	        ++mo->multicast_clients;
	}

	if (mo->master_client == NULL && !client->unicast_only) {
		/* Elect this new client as the master - tftpserver.c will see to it
		 * that the client is sent an OACK indicating that it is the master
		 * client after having determined which options need to be sent,
		 * hence we must not form the OACK message at this point.
		 */
		mo->master_client = client;
		client->current_part_number = -1;
	}

	multicaster_start_rtt(mo, client);
	multicaster_set_discard_timeout(mo, client);

	return bmc_OK;
}

void multicaster_process_packet(multicaster_object *mo)
{
	(void) tftpserver_process_packet(mo);
}

int multicaster_is_this_the_master_client(multicaster_object *mo, struct sockaddr_in *clnt)
{
	return mo->master_client && mo->master_client == multicaster_lookup_client(mo, clnt);
}

/* As each multicaster object is bound to a particular local interface for transmissions
 * we use this routine to check if the supplied address matches the local address being
 * used.
 */
int multicaster_check_interface(multicaster_object *mo, struct in_addr *address)
{
	return memcmp(&mo->source.sin_addr, address, sizeof(*address)) == 0;
}

/* Handle an ERROR packet arriving on this multicaster's port */
void multicaster_investigate_error(multicaster_object *mo, int err, struct sockaddr_in *sender)
{
	tftp_client *client;

	(void) err;

	client = multicaster_lookup_client(mo, sender);
	if (client == NULL) {
		/* Not ours! Ignore it */
	}
	else {
		multicaster_remove_client(mo, client);
		platform_log(LOG_INFO, "%s: ERROR  code %d (%s) Abandonning the client\n",
			inet_ntoa(sender->sin_addr), err, i18n_translate_tftp_error_code(err));
	}
}

/* Shut up an old long-lost master client or retransmit a lost OACK */
static void multicaster_transmit_short_oack(multicaster_object *mo, tftp_client *c)
{
	struct iovec iov[sizeof(mo->iov)/sizeof(*mo->iov)];
	struct tftphdr header;
	char message[SEGSIZE];

	(void) memcpy(iov, mo->iov, sizeof(iov));

	header.th_opcode = ntohs(OACK);

	multicaster_write_iovec(mo, &header, offsetof(struct tftphdr, th_stuff),
		message, multicaster_format_oack(message, mo->master_client == c));

	platform_transmit_to(mo, &c->client);

	/* Restore old contents of iovec */
	multicaster_write_iovec(mo, iov[0].iov_base, iov[0].iov_len, iov[1].iov_base, iov[1].iov_len);
}

static void multicaster_generate_error(multicaster_object *mo, short ecode, const char *msg,
		struct sockaddr_in *dest)
{
	struct iovec iov[sizeof(mo->iov)/sizeof(*mo->iov)];
	struct tftphdr header;
	char message[SEGSIZE];

	(void) memcpy(iov, mo->iov, sizeof(iov));

	header.th_opcode = ntohs(ERROR);
	header.th_code = ntohs(ecode);
	message[0] = '\0';
	strncat(message, msg ? msg : i18n_translate_tftp_error_code(ecode), sizeof(message));

	multicaster_write_iovec(mo, &header, offsetof(struct tftphdr, th_msg),
		message, strlen(message) + 1);

	platform_transmit_to(mo, dest);

	/* Restore old contents of iovec */
	multicaster_write_iovec(mo, iov[0].iov_base, iov[0].iov_len, iov[1].iov_base, iov[1].iov_len);
}


static void multicaster_send_part(multicaster_object *mo, int block, tftp_client *client)
{
	if (multicaster_read_next_part(mo, block, client)) {
		bmc_status status;

		if (client->unicast_only || mo->multicast_clients == 1) {
			status = platform_transmit_to(mo, &client->client);
		}
		else {
			status = platform_transmit(mo);
		}

		if (status != bmc_OK) {
			multicaster_generate_error(mo, EUNDEF,
				platform_translate_errno(),
				&client->client);
			multicaster_remove_client(mo, client);
		}
	}
	else {
		/* Client has finished - if there are no clients left, the
		 * multicaster_remove_client function will destroy US (the mo)
		 * so be very careful about using mo after this call!
		 */
		multicaster_remove_client(mo, client);
	}
}

static int multicaster_check_rate_ok(multicaster_object *mo, tftp_client *client)
{
        int rate_ok = 1;
        platform_time now = platform_time_current_time();
        platform_time elapsed_s = (50 + now - client->elected_at) / 100;

        ++client->packet_count;

        if (elapsed_s >= configure_read_rate_grace_period()) {
                /* We've had at least 9.5 seconds worth of getting over startup delays */
                unsigned long bytes_per_sec;
                bytes_per_sec = (client->packet_count * multicaster_get_buffer_size(mo)) / elapsed_s;
                if (bytes_per_sec < configure_read_minimum_master_rate()) {
                        /* Too slow?  Try to demote it.  Will have no effect if this is the
                         * only multicast client
                         */
                        platform_debug((LOG_DEBUG, "Demote client %s (lack of speed: %.1fKB/sec)\n",
                        	inet_ntoa(client->client.sin_addr), bytes_per_sec / 1024.0));
                        multicaster_demote_client(mo, client);
                        rate_ok = 0;
                }
        }

        return rate_ok;
}

/* Handle an ACK packet arriving on this multicaster's port */
void multicaster_process_ack(multicaster_object *mo, int block, struct sockaddr_in *sender)
{
	tftp_client *client;

	client = multicaster_lookup_client(mo, sender);
	if (client == NULL) {
		/* We don't know anything about this client */
		multicaster_generate_error(mo, EBADID, NULL, sender);
		return;
	}

	client->connected = 1;

	if (client == mo->master_client) {

		if (block < client->current_part_number) {
			/* We must ONLY re-transmit on a timeout later (Sorcerer ahoy!) */
			platform_debug((LOG_DEBUG, "Duplicate ACK\n"));
			return;
		}

		if (multicaster_check_rate_ok(mo, client)) {
			multicaster_timeout_ack_received(mo, client);
			multicaster_send_part(mo, block, client);
		}
	}
	else {
		if (block == mo->max_part_number) {
			/* Client has finished - see warning above regarding this call */
			multicaster_remove_client(mo, client);
		}
		else if (client->unicast_only) {
			/* A unicast-only capable client */
			if (block < client->current_part_number) {
				/* We must ONLY re-transmit on a timeout later (Sorcerer ahoy!) */
				platform_debug((LOG_DEBUG, "Duplicate ACK (unicast client)\n"));
				return;
			}

			multicaster_timeout_ack_received(mo, client);
			multicaster_send_part(mo, block, client);
		}
		else if (!client->oack_acked) {
			/* Client has acked our OACK */
			multicaster_timeout_ack_received(mo, client);
			multicaster_cancel_timeouts(mo, client);
			client->oack_acked = 1;
			if (mo->master_client == NULL) {
				multicaster_activate_master_client(mo, NULL);
			}
		}
		else {
			/* An old master client that we lost contact with and has returned?
			 * A buggy client?  Tell it to shut up
			 */
			platform_debug((LOG_NOTICE, "ACK from a non-master client\n"));
			multicaster_transmit_short_oack(mo, client);
			client->oack_acked = 0;
			multicaster_cancel_timeouts(mo, client);
		}
	}
}

void multicaster_transmit_oack(multicaster_object *mo, tftp_client *client)
{
	struct iovec iov[sizeof(mo->iov)/sizeof(*mo->iov)];
	struct tftphdr header;
	char message[SEGSIZE];

	(void) memcpy(iov, mo->iov, sizeof(iov));

	header.th_opcode = ntohs(OACK);

	multicaster_write_iovec(mo, &header, offsetof(struct tftphdr, th_stuff),
		message, multicaster_format_full_oack(mo, client, message));

	platform_transmit_to(mo, &client->client);

	/* Restore old contents of iovec */
	multicaster_write_iovec(mo, iov[0].iov_base, iov[0].iov_len, iov[1].iov_base, iov[1].iov_len);
}

static int multicaster_am_i_the_only_multicast_client(multicaster_object *mo, tftp_client *client)
{
        return (!client->unicast_only && mo->multicast_clients > 1);
}

/* This function is called whenever a master multicast client has "misbehaved" and is to
 * be sent to the end of the client list.  It achieves this by shuffling everything up one
 * place, then putting the client at the end of the list, unmastering it, sending it a new
 * OACK (indicating loss of master client status) and then calling the routine which elects
 * a new master client.  Steps are taken to prevent the client being demoted and then
 * immediately promoted back to master client status.
 */
static void multicaster_demote_client(multicaster_object *mo, tftp_client *client)
{
	if (!client->unicast_only && client == mo->master_client || mo->multicast_clients > 1) {
	        /* Makes no sense to demote a unicast client or a non-master or a single m/c client */
	        tftp_client *last_client = &mo->client[mo->clients - 1];

	        mo->master_client = NULL;
	        if (client != last_client) {
		        const tftp_client temp = *client;
		        (void) memmove(client, client + 1,
				sizeof(*mo->client) * (mo->client + mo->clients - client));
		        mo->client[mo->clients - 1] = temp;
	        }

		/* Determine the client which is about to be elected as the new master */
	        client = multicaster_find_most_eligible_client(mo);
	        if (client == last_client) {
	                /* For some reason we are about to re-elect the demoted client -
	                 * so don't send it anything
	                 */
	        }
	        else {
		        /* De-activate nasty client */
		        multicaster_transmit_short_oack(mo, last_client);
		        last_client->oack_acked = 0;
		        multicaster_cancel_timeouts(mo, last_client);
		        /* Activate new client (client == NULL is allowed) */
	        	multicaster_activate_master_client(mo, client);
	        }
	}
}

static int multicaster_process_timeout(multicaster_object *mo, int *pidx, platform_time now)
{
	tftp_client *const client = &mo->client[*pidx];
	int result = 0;

	if (platform_time_cmp(now, client->discard_time) >= 0) {
	        /* Naughty client: lose a life */
                --client->discard_lives;

	        if (!multicaster_am_i_the_only_multicast_client(mo, client)) {
	                /* Lose a further life if you're not the only multicast client
	                 * This means that single multicast clients take twice as long
	                 * to die, as they need to be timed out eventually, but they
	                 * can have extra grace periods in which to recover.
	                 */
	                --client->discard_lives;
	        }

                if (client->discard_lives < 0) {
                        /* Run out of lives - game over! */
			*pidx -= 1;
			result = (mo->clients == 1);
			multicaster_generate_error(mo, EUNDEF, "Timed out", &client->client);
			multicaster_remove_client(mo, client);
		}
		else {
		        multicaster_demote_client(mo, client);
		}
	}
	else {
		multicaster_timeout_retransmitted(mo, client);
		if (client->current_part_number == -1) {
		        if (client->connected) {
	        	        multicaster_transmit_short_oack(mo, client);
		        }
		        else {
				multicaster_transmit_oack(mo, client);
		        }
		}
		else {
			multicaster_send_part(mo, client->current_part_number - 1, client);
		}
		platform_debug((LOG_DEBUG, "Retransmitted: RTO=%d", client->rto));
	}

	return result;
}

/* No data was pending for this multicaster - but do we have any timeouts to process? */
void multicaster_check_timeout(multicaster_object *mo, platform_time now)
{
	int idx;

	for (idx=0; idx<mo->clients; ++idx) {
		tftp_client *const client = &mo->client[idx];
		if (client->timeout_pending && platform_time_cmp(now, client->timeout) >= 0) {
			/* Client specified a timeout and that timeout has fired */
			if (multicaster_process_timeout(mo, &idx, now)) {
				/* multicaster_process_timeout returns non-zero if the multicaster
				 * object has been destroyed (because the last client was removed)
				 */
				break;
			}
		}
	}
}


int multicaster_icmp_inform(multicaster_object *mo, struct in_addr *dest, u_short s_port, u_short d_port)
{
        if (s_port == mo->source.sin_port) {
                /* The source port matched, so it must belong to this multicaster. */
                /* It must have been one of our clients, unfortunately.  Find it */
                int idx;

		for (idx=0; idx<mo->clients; ++idx) {
			tftp_client *const client = &mo->client[idx];
			if (client->client.sin_port == d_port) {
			        /* Right port ... */
			        if (memcmp(&client->client.sin_addr, dest, sizeof(*dest)) == 0) {
			                /* It's you! */
			                platform_log(LOG_NOTICE, "ICMP reports that %s has gone away\n",
			                	inet_ntoa(*dest));
			                multicaster_remove_client(mo, client);
			                return 1;
			        }
			}
	        }
        }
        return 0;
}
