/*
 *
 *  Copyright (c) 1999 by Pace Micro Technologies plc. All Rights Reserved.
 *
 *
 * This software is furnished under a license and may be used and copied
 * only in accordance with the terms of such license and with the
 * inclusion of the above copyright notice. This software or any other
 * copies thereof may not be provided or otherwise made available to any
 * other person. No title to and ownership of the software is hereby
 * transferred.
 *
 * The information in this software is subject to change without notice
 * and should not be construed as a commitment by Pace Micro Techonologies
 * plc.
 *
 *
 *		  PROPRIETARY NOTICE
 *
 * This software is an unpublished work subject to a confidentiality agreement
 * and is protected by copyright and trade secret law.  Unauthorized copying,
 * redistribution or other use of this work is prohibited.
 *
 * The above notice of copyright on this source code product does not indicate
 * any actual or intended publication of such source code.
 */

#include "multicaster.h"


static multicast_socket icmp = multicaster_INVALID_SOCKET;

enum {
        max_packet_size = 16384
};

static void icmpsocket_finalise(void)
{
        if (icmp != multicaster_INVALID_SOCKET) {
                platform_close_socket(icmp);
                icmp = multicaster_INVALID_SOCKET;
        }
}

bmc_status icmpsocket_initialise(void)
{
        atexit(icmpsocket_finalise);
        return platform_create_icmp_socket(&icmp);
}

void icmpsocket_fd_set(fd_set *set, struct timeval *delay)
{
        if (icmp != multicaster_INVALID_SOCKET) {
	        platform_fd_set(icmp, set);
        }
        (void) delay;
}

static void icmpsocket_parse(char *buffer, int len, struct sockaddr_in *from)
{
        int hlen;
        struct ip *ip = (struct ip *) buffer;
        struct icmp *icmp;

	hlen = ip->ip_hl << 2;
	if (len < hlen + ICMP_MINLEN) {
	        /* Packet too short! */
	        platform_log(LOG_ERR, "TFTP: ICMP packet too short (%d) from %s\n", len,
	        	inet_ntoa(from->sin_addr));
	        return;
	}
	else {
	        platform_debug((LOG_DEBUG, "TFTP: ICMP packet from %s\n", inet_ntoa(from->sin_addr)));
	}

	len -= hlen;
	buffer += hlen;
	icmp = (struct icmp *) buffer;

	if (icmp->icmp_type == ICMP_UNREACH && icmp->icmp_code != ICMP_UNREACH_NEEDFRAG) {
	        len -= offsetof(struct icmp, icmp_data);
	        buffer = icmp->icmp_data;
	        ip = (struct ip *) buffer;
	        if (len > sizeof(struct ip) && ip->ip_p == IPPROTO_UDP) {
	                /* We've received some kind of unreachable error for a unicast UDP packet.
	                 * We need to circulate the information to the multicaster objects to
	                 * verify that they don't hold the client which is causing this problem.
	                 */
	                struct udphdr *udp;

	                hlen = ip->ip_hl << 2;
	                buffer += hlen;
	                len -= hlen;
	                udp = (struct udphdr *) buffer;
	                if (len >= sizeof(struct udphdr)) {
	                        platform_debug((LOG_DEBUG, "ICMP unreachable (dport=%d,sport=%d)\n",
	                        	htons(udp->uh_dport), htons(udp->uh_sport)));
		                mo_manager_icmp_inform(&ip->ip_dst, &ip->ip_src, udp->uh_sport, udp->uh_dport);
	                }
	        }
	}
}

static void icmpsocket_process_message(void)
{
        char buffer[max_packet_size];
        struct sockaddr_in from;
        int len;
        bmc_status s;

        len = sizeof(buffer);
        s = platform_receive_datagram(icmp, buffer, &len, &from, NULL);
        if (s != bmc_OK) {
                platform_report_error("icmp", s);
        }
        else {
                icmpsocket_parse(buffer, len, &from);
                /* We've received an ICMP datagram */
        }
}

int icmpsocket_fd_isset(fd_set *set)
{
        if (icmp != multicaster_INVALID_SOCKET && platform_fd_isset(icmp, set)) {
                platform_fd_clr(icmp, set);
                icmpsocket_process_message();
                return 1;
        }

        return 0;
}
