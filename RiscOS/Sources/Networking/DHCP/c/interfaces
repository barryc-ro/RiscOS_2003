/*
 *  DHCP (interfaces.c)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "kernel.h"
#include "swis.h"

#include "sys/types.h"
#include "net/if.h"
#include "protocols/dhcp.h"
#include "sys/dcistructs.h"
#include "netinet/in.h"
#include "arpa/inet.h"

#include "dhcp.h"
#include "interfaces.h"
#include "sockets.h"
#include "module.h"
#include "packets.h"

/* Data structure holding details of active DHCP leasing interfaces */
static dhcp_interface *ichain;


static time_t reference_time_t;
static int reference_monotonic_time;

int interfaces_current_time(void)
{
	int timenow;
	(void) _swix(OS_ReadMonotonicTime, _OUT(0), &timenow);
	return timenow;
}

dhcp_time interfaces_random_delay(int max_secs)
{
        /* Don't really need a spectacular random number generator.
 	 * Convert maximum time to eighths of seconds and use it to divide
 	 * the random number remainder.  Multiplication by 12 rather than 12.5
 	 * for efficiency - it's close enough.  This results in a timer value
 	 * of at least 0.12 seconds in the future, and at most just under
 	 * max_secs seconds in the future, unless max_secs <= 0 ...
 	 */
        if (max_secs <= 0) {
                /* Zero timeout? Silly - if you wanted an immediate action,
                 * you would have just rescheduled and allowed a fake callafter
                 * to trigger again immediately, so you're going to get a
                 * 5cs delay to avoid thrashing the system nastily.
                 */
                return interfaces_current_time() + 5;
        }
        return interfaces_current_time() + (rand() % (max_secs << 3) + 1) * 12;
}

/* Initialisation and finalisation routines */
void interfaces_init(void)
{
	ichain = NULL;
	time(&reference_time_t);
	reference_monotonic_time = interfaces_current_time();
}

/* Throws away all known interface information - relies on tail recursion
 * and is more efficient than a while loop in Norcroft!
 */
void interfaces_discard(void)
{
	if (ichain != NULL) {
		interfaces_forget(ichain);
		interfaces_discard();
	}
}

/* Locate interfaces given various attributes: name or transaction ID */
dhcp_interface *interfaces_find(const char *name)
{
	dhcp_interface *di;

	for (di = ichain; di != NULL; di = di->next) {
		if (strcmp(di->di_name, name) == 0) {
			break;
		}
	}

	return di;
}

dhcp_interface *interfaces_find_by_xid(u_long xid)
{
	dhcp_interface *di;

	for (di = ichain; di != NULL; di = di->next) {
		if (di->di_dhcp.xid == xid)  {
			break;
		}
	}

	return di;
}

/* Creation of structure representing new interface based on incoming dynamic boot
 * start service call.  If we were asked to DHCP explicitly through a call to SWI
 * DHCP_Execute, we just ask Internet to "BOOTP" and then trap the service call to
 * minimise the number of entry points into the system.
 */
dhcp_interface *interfaces_create(const dhcp_start_params *dsp)
{
	dhcp_interface *di;

	di = interfaces_find(dsp->ifname);
	if (di != NULL) {
	        /* We already know about this interface.  Probably caused by
	         * something trying to prod Internet (IPConfig, for example).
	         */
		return di;
	}

	di = calloc(1, sizeof(dhcp_interface));
	if (di != NULL) {
	        /* Name is copied to ensure that the
	         * struct ifreq is initialised correctly
	         */
		(void) strncpy(di->di_name, dsp->ifname, IFNAMSIZ);
		di->next = ichain;
		di->state = dhcpstate_INIT;
		di->request_lease = dhcp_infinite_lease;
		di->dib = dsp->dib;
		di->t1 = interfaces_random_delay(2);
		di->t2 = dhcp_infinite_lease;
		di->kill_if = dhcp_infinite_lease;
		ichain = di;
	}

	return di;
}

/* Deletion of a structure.  Triggered by module finalisation or explicit request
 * through SWI interface.
 */
void interfaces_forget(dhcp_interface *i)
{
	dhcp_interface *di = ichain, *prev = NULL;

	for (di = ichain; di != NULL; di = di->next) {
		if (di == i) {
			if (prev != NULL) {
				prev->next = di->next;
			}
			else {
				ichain = di->next;
			}
			free(di);
			return;
		}
	}
}

const char *dhcp_state_name(const dhcp_interface *di)
{
	switch (di->state) {
		case dhcpstate_INIT:
                        return "INIT";
		case dhcpstate_SELECTING:
                        return "SELECTING";
		case dhcpstate_REQUESTING:
                        return "REQUESTING";
		case dhcpstate_BOUND:
                        return "BOUND";
		case dhcpstate_RENEWING:
                        return "RENEWING";
		case dhcpstate_REBINDING:
                        return "REBINDING";
		case dhcpstate_INITREBOOT:
                        return "INITREBOOT";
		case dhcpstate_REBOOTING:
                        return "REBOOTING";
                default:
                        return "INTERNAL ERROR";
	}

}

/* Convert the time into a displayable string.  Note that ctime() is evil
 * and uses an internal static buffer within the C library data, so multiple
 * calls to this function will corrupt the buffer.  The times passed in are
 * centisecond monotonic time values.  Hence we convert to monotonic seconds
 * and use our reference matching values from init time to convert to time_t
 * units.
 */
static const char *interfaces_ctime(const dhcp_time t)
{
        if (t == dhcp_infinite_lease) {
		return "Never (infinite lease)\n";
        }
	else if (t == dhcp_maximum_lease) {
	        return "Never (maximum lease)\n";
	}
	else {
	        time_t tt = reference_time_t + (t - reference_monotonic_time) / 100;
		return ctime(&tt);
	}
}

void interfaces_print_information(const dhcp_interface *di)
{
        if (di == NULL) {
                /* Print information about all known interfaces */
                for (di = ichain; di != NULL; di = di->next) {
                        printf("\n");
                        interfaces_print_information(di);
                }
        }
        else {
		/* ctime uses a static buffer - so only one per printf! */
                const int infinite = (di->kill_if == dhcp_infinite_lease);
		const char *expiry  = interfaces_ctime(dhcp_infinite_lease);

		printf(
			"Interface     : %s\n"
			"State         : %s\n"
			"IP address    : %s\n"
			"Lease expires @ %s",
			di->di_name,
			dhcp_state_name(di),
			inet_ntoa(*(struct in_addr *) &di->binding.yiaddr),
			infinite ? expiry : interfaces_ctime(di->kill_if)
			);

		printf(
			"Renew lease   @ %s",
			infinite ? expiry : interfaces_ctime(di->t1)
			);

		printf(
			"Rebind lease  @ %s",
			infinite ? expiry : interfaces_ctime(di->t2)
			);
        }

}

/* This routines finds the earliest trigger date for the next interesting timed
 * event and returns it.  It is allowed to return times which are in the past -
 * as interfaces_reschedule specifically handles that.  Returns dhcp_infinite_lease
 * if there are no interesting events scheduled to happen at specific times.
 */
static dhcp_time interfaces_get_next_event_time(void)
{
        const dhcp_interface *di;
        dhcp_time earliest = dhcp_infinite_lease;

        for (di = ichain; di != NULL; di = di->next) {
                if (di->t1 < earliest) earliest = di->t1;
                if (di->t2 < earliest) earliest = di->t2;
                if (di->kill_if < earliest) earliest = di->kill_if;
        }

        return earliest;
}


/* The Kill Interface timer triggered.  This should only occur in the REBINDING state
 * (as we would have been attempting to RENEW and REBIND as the end of the lease
 * approached).  We must take the interface out of commission immediately and try to
 * get a new address.  Behaviour of other network software on the host in response to
 * this sudden change of IP address appears to be "beyond the scope of RFC2131".  How
 * convenient!
 */
static void interfaces_terminate(dhcp_interface *di)
{
        trace(("Interface kill timer triggered on %s in state %s\n", di->di_name,
                	dhcp_state_name(di)));

	if (sockets_kill_interface(di) < 0) {
	        /* Unable to manipulate interface as we wanted to.  Go into a
	         * huff and forget about the interface.
	         */
	        interfaces_forget(di);
	}
	else {
		/* In the unlikely event of the machine not have died unrecoverably
		 * by now, re-initialise the interface's DHCP state so that it attempts
		 * to find a new IP address to use.  Frankly, I'll be amazed if this
		 * works.
		 */
		di->state = dhcpstate_INIT;
		di->t1 = interfaces_random_delay(5);
		di->t2 = dhcp_infinite_lease;
		di->kill_if = dhcp_infinite_lease;
	}
}

/* Timer 2 triggered on this interface.  When BOUND, this means that we haven't been
 * able to renew our lease and that we should now try to rebind.  If we are in any
 * other state, then it means that we need to give up the current operation and not
 * retry it any more (retries would have been occuring on T1).
 */
static void interfaces_T2_triggered(dhcp_interface *di)
{
        trace(("T2 triggered on %s in state %s\n", di->di_name, dhcp_state_name(di)));

	if (di->state == dhcpstate_SELECTING) {
	        /* Our initial collection period has expired */
		if (di->offer.op == BOOTREQUEST) {
		        /* No response yet - we're in trouble here - try starting
		         * again from scratch.
		         */
		        dhcp_discover(di);
		}
		else {
		        /* Had a response - try it! */
	                dhcp_request(di, dhcpstate_REQUESTING, dhcprequest_set_T2);
		}
	}
	else if (di->state == dhcpstate_BOUND ||
	         di->state == dhcpstate_RENEWING) {
	        /* We have lost contact with our original server, so break the
	         * binding and try to find a new server to continue holding our lease.
	         */
		di->binding.siaddr = htonl(INADDR_ANY);
		dhcp_request(di, dhcpstate_REBINDING, dhcprequest_set_T2);
	}
	else {
	        /* No response to the request message - try again?  Perhaps we
	         * should log the naughty server identifier and make sure we
	         * don't accept any DHCPOFFER messages from it for a while.
	         * INIT and INITREBOOT are really fatal errors - should never
	         * get into those states under RISC OS.
	         */
		dhcp_discover(di);
	}
}

/* Timer 1 triggered on this interface.  In the BOUND state, it is time to attempt
 * to renew the lease.  If already renewing the lease, this is a retry of that op.
 * If we are in the INIT state, kick off the discover message (this event is timed so
 * we can enforce random fuzz to desynchronise synchronised network power restoration,
 * for example).  If we were waiting for offers (SELECTING) and none have been
 * forthcoming, retry the discover message, otherwise kick of the acceptance of the
 * favourite offer.  If we were already REQUESTING, then retry that.
 */
static void interfaces_T1_triggered(dhcp_interface *di)
{
        trace(("T1 triggered on %s in state %s\n", di->di_name, dhcp_state_name(di)));

        if (di->state == dhcpstate_BOUND) {
        	/* The time to attempt a lease extension has arrived.
        	 * In a "standard" configuration, this means that the lease
        	 * has reached its half-life and we should attempt to renew
        	 * it, but not all *that* urgently.
        	 */
                di->offer = di->binding;
                dhcp_request(di, dhcpstate_RENEWING, dhcprequest_retain_T2);
        }
        else if (di->state == dhcpstate_INIT) {
                /* Start-up fuzz timer has expired.  Let's get going! */
                dhcp_discover(di);
        }
        else if (di->state == dhcpstate_SELECTING) {
                /* We are waiting for offers to arrive.  When this timer fires,
                 * this means we want to retransmit the DHCPDISCOVER packet
                 */
                if (di->offer.op == BOOTREQUEST) {
                        /* No responses yet */
	                dhcp_transmit(di);
		        module_idle(mir_WAKEUP);
                }
                else {
                        /* OK - we're happy with the one we have been offered */
                        dhcp_request(di, dhcpstate_REQUESTING, dhcprequest_set_T2);
                }
        }
        else {
                /* Time to retry the request message */
                dhcp_transmit(di);
	        module_idle(mir_WAKEUP);
        }
}

static void interfaces_check_timers(dhcp_interface *di, dhcp_time trigger)
{
        if (trigger > di->kill_if) {
                /* We have a major problem - our interface allocation has
                 * expired.  The following call will bring down the interface
                 * probably with spectacular consequences for the system,
                 * but the RFC is quite clear on this issue.  This condition
                 * will never occur if we are holding an infinite lease.
                 */
                interfaces_terminate(di);
        }
        else if (trigger > di->t2) {
                /* We have a minor problem - we were unable to negotiate a
                 * lease extension with our original DHCP server.  This
                 * condition will never occur if we are holding an infinite
                 * lease.  However, we also use this as a retry giveup timeout,
                 * so this call can be made in those circumstances.
                 */
                interfaces_T2_triggered(di);
        }
        else if (trigger > di->t1) {
                /* The re-acquisition timer has fired.  In a system such as
                 * that recommended by the DHCP RFC, this condition indicates
                 * that half of our lease time has expired and that now is a
                 * good time to try to negotiate an extension.  This condition
                 * will never occur if we are holding an infinite lease. However,
                 * we also use this as a retry timer, so it may be called in
                 * those circumstances.
                 */
                interfaces_T1_triggered(di);
        }
}


/* This routine is called on a callback (set on the callafter).
 * It is called when one of our timers has expired.  Note that
 * if the earliest timer has been moved, nothing will happen except
 * that a new callafter will be scheduled if necessary.
 */
void interfaces_timer_fired(void *private_word)
{
        dhcp_interface *di;

	/* Release the block on the original caller, thus enforcing a timeout
	 * or wakeup (in this case, a timeout) so that the original caller's
	 * retry algorithms can function correctly.
	 */

        for (di = ichain; di != NULL; ) {
                /* The timer check may result in the deletion of the
                 * dhcp_interface object - so we cannot rely on the next
                 * field still being there after the function call!
                 */
                dhcp_interface *const next = di->next;
                interfaces_check_timers(di, interfaces_current_time());
                di = next;
        }

	interfaces_reschedule(private_word);
}

/* Be very careful of the two routines either side of this comment.  They
 * are mutually recursive, and they have been carefully written to ensure
 * that they are both tail-recursive.
 */

void interfaces_reschedule(void *private_word)
{
        int timenow = interfaces_current_time();
        dhcp_time next_event = interfaces_get_next_event_time();

	if (next_event != dhcp_infinite_lease) {
	        /* Allow an event to be scheduled in the past - and don't
	         * actually set a timer, but just cross-recurse back into
	         * interfaces_timer_fired to make things go quickly.
	         */
	        if (next_event > timenow) {
		        module_reschedule(next_event - timenow, private_word);
	        }
	        else {
		        interfaces_timer_fired(private_word);
	        }
	}
}
