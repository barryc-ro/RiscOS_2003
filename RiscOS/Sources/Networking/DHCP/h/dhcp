/*
 *  DHCP (dhcp.h)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */
#ifndef dhcp_h_included
#define dhcp_h_included

#ifdef __cplusplus
extern "C" {
#endif

#ifdef TRACE
#define trace(x) printf x
#else
#define trace(x) ((void)0)
#endif

#include "dhcpextern.h"

/* protocols/dhcp.h defines the buffer in terms of a structure called BOOTP.
 * We'll typedef this to DHCP to make things clearer - does that actually help?
 */
typedef BOOTP DHCP;

#ifndef __cplusplus
/* Define the structure tags */
typedef struct dhcp_interface dhcp_interface;
#endif

enum dhcprequest_opts {
        dhcprequest_retain_T2,
        dhcprequest_set_T2
};

/* These are the parameters that arrive when the Internet module indicates that
 * a dynamic boot request is about to be broadcast.  The _kernel_swi_regs *
 * is cast to a dhcp_start_params * for passing to dhcp_prepare_request.
 */
typedef struct {
        const int       three;          /* InternetStatus_DynamicBootStart (R0) */
        const int       service;        /* Service_InternetStatus (R1) */
        const char	*ifname;	/* interface name (R2) */
        Dib		*dib;		/* interface DIB (R3) */
        DHCP            *request;       /* the actual request (R4) */
        size_t          request_max;    /* limit of R4 buffer (R5) */
        int             *end_offset;    /* end of options (R6) */
}  dhcp_start_params;


/* This routine is invoked when the dynamic boot start service call arrives.
 * Return one of the two enumeration constants to indicate whether to claim
 * the service call or not - do not attempt to alter the service member of
 * the structure above.
 */
enum {
        dhcp_IGNORE,
        dhcp_CLAIM
};

extern int dhcp_prepare_request(dhcp_start_params *, void *);


/* These is the parameter block that the dispatcher packet dispatcher
 * creates to describe the incoming packet when it wants to pass its
 * details on to the second stage dispatch (dhcp_interpret_reply) and
 * thereafter onto the specific message handlers.
 */
typedef struct {
        const char	*ifname;	/* interface name (R2) */
        Dib		*dib;		/* interface DIB (R3) */
        DHCP            *reply;         /* the actual reply (R4) */
        size_t          reply_len;      /* size of R4 buffer (R5) */
} dhcp_reply_params;


/* This is the pair of incoming dispatchers for DHCP packets */
extern void dhcp_deliver_incoming_packet(DHCP *, void *);
extern void dhcp_interpret_reply(dhcp_interface *, dhcp_reply_params *, void *);


/* These are the handler routines for the outgoing messages.  They
 * are called to trigger their particular message into being sent.
 */
extern void dhcp_discover(dhcp_interface *);
extern void dhcp_request(dhcp_interface *, dhcp_state, enum dhcprequest_opts);
extern void dhcp_decline(dhcp_interface *, const char *);
extern void dhcp_release(dhcp_interface *, const char *);
extern void dhcp_inform(dhcp_interface *);

/* These are the handler routines for the incoming messages.
 * They are called in response to a DHCP reply message arriving
 * in the dispatcher.
 */
extern void dhcp_offer(dhcp_interface *, dhcp_reply_params *);
extern void dhcp_ack(dhcp_interface *, dhcp_reply_params *);
extern void dhcp_nak(dhcp_interface *, dhcp_reply_params *);

/* This handler routine copes with incoming non-DHCP messages
 * which are responses to our DISCOVER messages - ie. the case
 * where a BOOTP server responds to our DHCP request.
 */
extern void bootp_ack(dhcp_interface *, dhcp_reply_params *);


/* These are the SWI gateways into the internal functions */
extern _kernel_oserror *dhcp_swi_getstate(_kernel_swi_regs *);
extern _kernel_oserror *dhcp_swi_getoption(_kernel_swi_regs *);
extern _kernel_oserror *dhcp_swi_setoption(_kernel_swi_regs *);
extern _kernel_oserror *dhcp_swi_execute(_kernel_swi_regs *);
extern _kernel_oserror *dhcp_swi_inform(_kernel_swi_regs *);

/* The register map for SWI DHCP_Execute */
typedef struct {
        int flags;
        const char *if_name;
	dhcp_state out_status;
} dhcp_swi_execute_regs;


#ifdef __cplusplus
}
#endif

#endif
