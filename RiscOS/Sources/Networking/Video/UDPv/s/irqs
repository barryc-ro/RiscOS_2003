; enable/disable interrupts

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:EnvNumbers

        EXPORT  ensure_irqs_off
        EXPORT  restore_irqs
        EXPORT  ensure_irqs_on
        EXPORT  user_mode_donothing
        ^       0

        AREA    netasm,PIC,CODE,REL

        ALIGN


; This callback handler simple defers the callback until later
defer_callback
        SWI XOS_SetCallBack             ; Defer callback
        MOV r14, r12                    ; Register block
        LDMIA r14, {r0-r14}^            ; Loads USR r13,r14
        MOV r0, r0                      ; NOOP after accessing user
                                        ; registers before accessing banked
                                        ; register.
        LDR r14, [r14, #15*4]           ; Loads user PC into SVC r14
        MOVS pc, r14                    ; Drop back to USR mode

; os_error *usermode_donothing();
user_mode_donothing ROUT

        Push "r0-r3, lr"
        SUB sp, sp, #&40                ; Make space on stack for reg dump

        ; Update callback handler atomically in case an event occurs
        ; between reading the old handler and writing the new handler
        MOV r0, #CallBackHandler
        ADR r1, defer_callback
        MOV r2, sp                      ; R12 in defer_callback = reg ptr
        MOV r3, sp                      ; Reg save area on stack
        SWI XOS_ChangeEnvironment
        Push "r1-r3"                    ; Save old handler

        ; Now execute a SWI in user mode to trigger callbacks
        TEQP pc, #0                     ; To user mode
        MOV r0, #0
        MOV r1, #1
        SWI XOS_Byte                    ; Read OS version
        SWI XOS_EnterOS                 ; Back to SVC mode

        ; Restore old callback handler
        MOV r0, #CallBackHandler
        Pull "r1-r3"
        SWI XOS_ChangeEnvironment

        ADD sp, sp, #&40
        Pull "r0-r3, pc",,^

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; ensure_irqs_off:
;
; Disable IRQs). Once IRQs are disabled, we cannot/must not be reentered.
;
; Returns a value indicating the state of interrupts prior to calling here.
;

ensure_irqs_off 
        AND     r0, lr, # I_bit
        ORRS    pc, lr, # I_bit

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; restore_irqs:
;
; Restore interrupts to the state they were in prior to a call to
; ensure_irqs_off, using the value returned by ensure_irqs_off.
;

restore_irqs    
        BIC     lr, lr, # I_bit
        ORRS    pc, lr, r0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; ensure_irqs_on:
;
; Ensure that interrupts are enabled. Returns a value that, when passed
; to restore_irqs, will restore the state prior to enabling interrupts.
;
 
ensure_irqs_on
        AND     r0, lr, # I_bit
        BICS    pc, lr, # I_bit

        END

