UDPV SWI interface and other information
========================================

History
=======

27-Mar-2000 (ADH): Created.


Overview
========

The UDPV module has had a rather chequered history and was probably known
as the CBFC module way-back-when. Until recently this file only documented
the long-deprecated CBFC SWI interface; this is kept for interest's sake,
attached at the end.

UDPV's job is to pass incoming UDP packets to the MPEGControl module for
video decoding as soon as possible. It uses a "back door" in the Internet
module to get hold of the packets, sitting in mbufs, as soon as possible.
When told to prepare for data, it creates a listening socket and uses
socketioctl to set up the back door interface (do_getsock in module.c).
When the Internet module gets a packet, it calls a UDPV SWI set up through
the socketioctl call to pass UDPV data.

UDPV uses (from version 1.13 upwards) a single continuous rolling buffer
of, by default, 512K. Whenever it is called by the Internet module, it
tries to claim a chunk of the buffer to fit the packet data, with a
bs_buffer structure heading it (see bufs.h), into the main buffer. If
there isn't room the packet is simply dropped. If there is, the data is
copied from the mbuf, the mbuf is freed, and the data is given to the
MPEGControl module (the MPEGControl module knows about the format of data
in the UDPV buffer). The bs_buffer struct encodes a SWI number for
MPEGControl (or a module beneath it) to call later to mark the chunk of
buffer space as no longer needed. UDPV maintains a record of the lowest
chunk allocated and whenever it is told this chunk can be freed, scans up
to find the next used chunk, moving the record of the lowest chunk
allocated as it goes. This way, a continuous chunk of buffer is in use at
all times, the buffer possibly emptying when the consumption rate by
MPEGControl equals or exceeds the delivery rate.

If MPEGControl marked all data as unused except the very first bs_buffer
pointer given to it, the buffer would eventually act as if it were full,
because the low water mark would not have moved. Of course, as soon as
that first item were freed, the whole buffer would become available again.

Version 1.13 upwards of UDPV can be freely killed and reinitialised. It's a
bad idea to do this during playback; though items UDPV has claimed will
be released correctly, other software may well take exception to having
UDPV drop out from under it.

Version 1.16 upwards of UDPV support an extended interface (documented
below) to allow binding to specific addresses and ports, or use an
Internet-module allocated port for each play session. Previously, port
32794 was always used and not bound to any address; now, the extended
interface allows a dynamically allocated one (to try and prevent data left
streaming on the socket getting picked up later). Previous versions of UDPV
also left their socket open for all time unless the port changed; 1.16
upwards only keep it open for the duration of playback.

Version 1.17 upwards support a build method (FAST builds), which is
active by default, where a direct call interface between the MPEG software
and UDPV is used to both pass down and free data buffers.


System variables
================

UDPV takes various defaults which can be overridden by system variables or
in some cases through the SWI interface. The below information covers the
defaults in version 1.13. To recognise any changes during run-time, ensure
any open session with UDPV is closed then reinitialise the module.

Buffer size:  Defaults to 512K, overridden through MPEG$BufSize (this
              gives the size in bytes). There is more on this issue in
              the "Dependencies" section.

Video port:   Port &801A (32794) is used by default; overridden by
              MPEG$UDPPort or on a per-stream basis by R2 in SWI
              UDPV_StartOfPlay.

TRACE builds: An old debug scheme is activated by ensuring system variable
              UDP$DoDebug is defined. For newer debug information, set
              UDP$TraceLevel to hold a number specifying areas of debug
              that are of interest - see global.c for details.


Dependencies
============

Version 1.17 upwards of UDPV can be built (FAST builds) so that they
take data straight out of the MBuf chain and pass it to the MPEG software
using a direct call interface. This requires at least Internet 5.44,
MPEGTransport 1.86 and MPEGSystem 0.56. UDPV will raise errors if these
are not present - Internet is checked on module initialisation, and the
direct call interface in the MPEG modules is checked for on each call to
UDPV_StartOfPlay (in case it moves because new MPEG software gets loaded).
Any non-FAST build will work with older Internet modules and MPEG software,
though earlier versions are not recommended as the later software contains
several bug fixes on top of the relevant extra API features.

FAST builds do maintain a buffer, but it is much simpler than the one in
a conventional UDPV module. The buffer holds an array structures (in
version 1.17 these are 36 bytes in size) where each structure relates to
one MBuf being held for the MPEG system. However, MBuf exhaustion must be
avoided, so the buffer MUST be sized so that UDPV's structures run out
before MBufs. The overall size is chosen in the usual way (512K, or from
MPEG$BufSize - see "System variables" section), then divided by 1536 bytes,
the data size of a large MBuf. So, to decide a system-friendly buffer size,
look at the number of large MBufs available (*ShowStat), reduce it by the
number you want to ensure aren't claimed (e.g. mutiply by 0.67), and
multiply the result by 1536. This is the buffer size you should set in
MPEG$BufSize. Some users of UDPV may deliberately stop consuming data (e.g.
a multicast video streamer that implements a pause feature) so it should be
considered normal for UDPV to overrun its buffers - MBuf exhaustion must be
prevented when UDPV is in such a state. The caveat is that since different
MPEG streams need different amounts of buffering, the number of large MBufs
the system has will often be the thing that needs altering, rather than
the UDPV buffer size.

The actual allocated buffer size is this number of blocks multiplied by the
size of an internal structure used to hold data about the MBufs along with
other bits of information needed by the MPEG system. In version 1.17 this
is 8 words (36 bytes) in size.


SWI interface
=============

A summary of the SWI interface in version 1.13 follows:


UDPV_DCIVersion                                                    0x040000
---------------------------------------------------------------------------
Deprecated (does nothing).


UDPV_Inquire                                                       0x040001
---------------------------------------------------------------------------
Deprecated (does nothing).


UDPV_GetNetworkMTU                                                 0x040002
---------------------------------------------------------------------------
Deprecated (does nothing).


UDPV_SetNetworkMTU                                                 0x040003
---------------------------------------------------------------------------
Deprecated (does nothing).


UDPV_Transmit                                                      0x040004
---------------------------------------------------------------------------
Deprecated (does nothing).


UDPV_Filter                                                        0x040005
---------------------------------------------------------------------------
Deprecated (does nothing).


UDPV_NullSWI                                                       0x040006
---------------------------------------------------------------------------
Does nothing.


UDPV_EmptyBuffer                                                   0x040007
---------------------------------------------------------------------------
Mark an area of the buffer as unused.

On entry: R2 -> Pointer to bs_buffer to release (see below)
On exit:  R2 -> Set to zero

Release the bs_buffer (see bufs.h) struct pointed to in R2 back to the free
pool - internally this means the structure is marked as unused in the main
buffer so that area of buffer space can be reused. Note that the claimed
region is kept continguous, so if all bs_buffer structures were feed except
for the "bottom" (first) one the buffer would eventually become full. The
"low water mark" of allocation is updated each time the lowest item is
released. In TRACE builds, the pointer is checked for validity more than in
release builds at the expense of some drop in performance. See bufs.c,
bufs_release_bs_buffer(), for details.


UDPV_WriteFrame                                                    0x040008
---------------------------------------------------------------------------
Deprecated (does nothing).


UDPV_EndOfPlay                                                     0x040009
---------------------------------------------------------------------------
Shut down the module after starting things going with UDPV_StartOfPlay.
Must be called when a given playback session is complete.


UDPV_StartOfPlay                                                   0x04000a
---------------------------------------------------------------------------
Get ready for incoming data.

On entry: R2 -> Port number or 0 for default
          R3 -> MPEGControl stream handle
          R4 -> Amount of data to chop off the front of all UDP packets
                received (usually zero)

In UDPV 1.16 or later -

On entry: R2-R4 as previous versions
          R5 -> "UDPV" (&56504455)
          R6 -> Entry flags (currently reserved, set to zero)
          R7 -> Pointer to dotted quad IP address to bind socket to (or
                zero for INADDR_ANY)

On exit:  R5 -> Zero
          R6 -> Exit flags (currently reserved, set to zero)
          R7 -> Port used (less than zero if socket open failed)
          Other registers as previous versions

Should be called "shortly before" video data starts arriving (bit of a
grey area!).

In UDPV 1.15 and earlier, a socket is open bound to no address with a
default port of 32794. This socket stays open for all time, unless the
port changes, at which point it is closed and a new one open. In UDPV
1.16 and later, the socket is bound to the address given in R7 (if using
the extended interface flagged via. R5 -> "UDPV"). It is only open until
UDPV_EndOfPlay is called. The port is only 32794 if the R5-extended
interface is not used and R2 doesn't specify a port number in the usual
fashion. When R2 is zero and the extended interface is used, the port is
dynamically allocated by the internet stack. Regardless of the way in
which a port is chosen, the value in use is returned on exit through R7.

Clients who wish to be backwards compatible with older UDPV modules can
set the magic word in R5 on entry, and if R5 is unchanged on exit, know
that an older UDPV is running.


UDPV_ReadMacAddr                                                   0x04000b
---------------------------------------------------------------------------
Deprecated (does nothing).


UDPV_StreamInit                                                    0x04000c
---------------------------------------------------------------------------
Deprecated (does nothing).


UDPV_StreamClose                                                   0x04000d
---------------------------------------------------------------------------
Deprecated (does nothing).


UDPV_SetMacAddr                                                    0x04000e
---------------------------------------------------------------------------
Deprecated (does nothing).


UDPV_SetBufs                                                       0x04000f
---------------------------------------------------------------------------
Deprecated (does nothing).


UDPV_StreamStatus                                                  0x040010
---------------------------------------------------------------------------
Report module status.

On exit: R0 -> 0 if playback is in progress, 1 if the module is idle.
         R1 -> Set to zero.
         R2 -> Set to zero.
         R3 -> Set to zero.


UDPV_TxBootMsg                                                     0x040011
---------------------------------------------------------------------------
Deprecated (does nothing).


UDPV_SetServer                                                     0x040012
---------------------------------------------------------------------------
Deprecated (does nothing).


UDPV_NOP13                                                         0x040013
UDPV_NOP14                                                         0x040014
UDPV_NOP15                                                         0x040015
UDPV_NOP16                                                         0x040016
UDPV_NOP17                                                         0x040017
UDPV_NOP18                                                         0x040018
UDPV_NOP19                                                         0x040019
UDPV_NOP1A                                                         0x04001a
UDPV_NOP1B                                                         0x04001b
UDPV_NOP1C                                                         0x04001c
---------------------------------------------------------------------------
Do nothing.


UDPV_RxDirect                                                      0x04001d
---------------------------------------------------------------------------
This is the "back door" SWI called by the Internet module when data
arrives.

On entry: R0 -> Socket number
          R1 -> Pointer to mbuf to look at
          R2 -> Currently ignored...
          R3 -> Currently ignored...
          R4 -> Currently ignored...
          R5 -> Currently ignored...
          R6 -> Pointer to another mbuf chain. After the one in R1 is
                dealt with, m_freem() is called on this to free the
                chain (if it isn't 0).

For full details see the Internet module and module.c's handler code for
the SWI.


Star commands
-------------

*StrmInfo: Report various statistics about the module's operation. Can
           be useful during playback to check data is arriving. In
           TRACE builds, typically gives extra details after the normal
           output.

Example:

*strminfo
Video port: &0000801A = 32794        Last port:  &00000000 = 0
Buffer:     &00080000 = 524288       Overruns:   &00000000 = 0
Datagrams:  &00000002 = 2 (PDU average 1316.00 bytes)


===========================================================================

                   CBFC module service interface
                   -----------------------------

The following set of SWIs constitute a service interface between the CBFC
module and an application controlling video playback.

MAC address format

A MAC address is a 6 byte quantity at this interface, represented in
network-order (ie big-endian).


CBFC_StreamInit (SWI 0x83c0c)

Notify CBFC that a new video stream is being opened.

    On entry:   R0 = flags    bit    meaning
                              0-31   reserved - must be set to 0
                R1 = pointer to IIS MAC address
                R2 = Session ID
                R3 = MPEG player handle

    On exit:    R0-R3 preserved

CBFC_StreamInit is called by the playback control application to notify
CBFC that a new stream has been opened via DSM-CC, and to pass session
parameters needed to manage the CBFC stream session.

On entry, R1 points to a buffer containing the MAC address of the IIS
delivering the stream, and R2 contains the Session ID for the stream.


CBFC_StreamStatus (SWI 0x83c10)

Poll CBFC for current stream status.

    On entry:   R0-R2 undefined
                R3 = Local play mode
                         0   Normal
                    0x1000   Fast forward
                    0x2000   Fast rewind
                    0x3000   Pause

    On exit:    R0 = status
                         0   Stream is active
                         1   Stream is not active
                R1 undefined
                R2 = status qualifier
                         0   Idle
                       0x4   Normal termination
                      0x40   Abnormal termination - timeout
                      0x80   Abnormal termination - IIS cleared down
                     0x100   Abnormal termination - bad session id
                     0x200   Abnormal termination - high error rate
                R3 = IIS play mode
                         0   Normal
                    0x1000   Fast forward
                    0x2000   Fast rewind
                    0x3000   Pause

CBFC_StreamStatus is used by the playback control application to poll for
information about the current playback stream.

On entry, R3 indicates the current playback mode, as understood by the
playback control application. On exit, R3 returns the current playback mode
as understood by the IIS. If the two values are not the same, then
synchronisation may have been lost.

On exit, R0 indicates whether CBFC is currently handling an active stream.
If not, then the termination status of the last stream is returned in R2.
Once this information has been returned, the stream status is reset
to IDLE.

