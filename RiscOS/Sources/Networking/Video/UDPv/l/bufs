     1   
     8  
     8  
     8  
     8  
     8  
     8  
     9  
    13  
    15  
    17  
    18  
    19  struct bs_buffer *bs_fullp = 0;
    20  struct bs_buffer *bs_full_q = 0;
    21  struct bs_buffer *bs_empty_q = 0;
    22  struct bs_buffer *bs_emptyp = 0;
    23  
    24  static u_int bs_sent = 0;
    25  static u_int bs_received = 0;
    26  static u_int bs_saved = 0;
    27  static u_int bs_hiwater = 0;
    28  static u_int bs_overflows = 0;
    29  static u_int bs_underflows = 0;
    30  static u_int bs_lowbufs = 0;
    31  static int bufs_used = 0;
    32  
    33  int bs_minbufs_check = 0;
    34  
    35  static int callbs = 0;
    36  static int callbreqs = 0;
    37  
    38  int skipcnt = 0;
    39  
    40  extern int n_bs_buffers;
    41  extern int bs_bufsize;
    42  extern int mpeg_handle;
    43  extern int bs_minbufs;
    44  extern u_long bs_bytes_sent;
    45  
    46  extern struct bs_buffer *bs_current_buf;
    47  extern int bs_current_residue;
    48  
    49  
    50  void init_mpeg_buffers ( void );
    51  struct bs_buffer *full_buffer ( void );
    52  void print_bufs ( void );
    53  int return_empty_buf ( struct bs_buffer *b , int flag );
    54  int init_bs_buffers ( void );
    55  void reinit_bs_buffers ( void );
    56  void free_bs_buffers ( void );
    57  struct bs_buffer *get_empty_buffer ( void );
    58  void save_full_buf ( struct bs_buffer *b , int datalost );
    59  int bs_empty_q_cnt ( void );
    60  int send_buffers ( void );
    61  void send_full_buf(struct bs_buffer *buf, int flag);
    62  
    63  
    64  static struct bs_buffer **bprotos;
    65  static int bufs_ready = 0;
    66  
    67  void init_mpeg_buffers()
    68  {
    69      bs_empty_q = 0;
    70      bs_full_q = 0;
    71      bs_emptyp = 0;
    72      bs_fullp = 0;
    73      bs_received = 0;
    74      if (bufs_ready != 1)
    75      {
    76        init_bs_buffers();
    77      }
    78      reinit_bs_buffers();
    79      callbs = 0;
    80      callbreqs = 0;
    81  }
    82  
    83  
    84  void print_bufs()
    85  {
    86      int nbufs = bs_empty_q_cnt();
    87  
    88      printf("Buffers:\n");
    89      printf("    Empty bufs=%d (of %d)\n",nbufs, n_bs_buffers);
    90      printf("    bs_queued=%d, bs_sent=%d, bs_returned=%d, bs_inuse=%d\n",
    91                  bs_saved, bs_sent, bs_received, bufs_used);
    92      printf("    bs_underflows=%d, bs_lowbufs=%d\n", bs_underflows, bs_lowbufs);
    93      printf("    bs_overflows=%d, bs_hiwater=%d\n", bs_overflows, bs_hiwater);
    94      if (bs_sent > 0)
    95      {
    96        printf("    bs_buf average content=%d\n", bs_bytes_sent/bs_sent);
+++ Warning: actual type 'long' mismatches format '%d'
    97      }
    98  
    99  
   100  
   101  
   102  }
   103  
   104  
   105  int init_bs_buffers(void)
   106  {
   107      struct bs_buffer *b,**bp;
   108      int i;
   109  
   110      bprotos = (struct bs_buffer **)calloc(sizeof(struct bs_buffer *), n_bs_buffers);
   111      if (bprotos ==  0 )
   112      {
   113        return(0);
   114      }
   115      bp = bprotos;
   116      b = (struct bs_buffer *)calloc(sizeof(struct bs_buffer), n_bs_buffers);
   117      if (b == 0)
   118      {
   119          return(0);
   120      }
   121      for (i = 0; i < n_bs_buffers; i++)
   122      {
   123          b->bs_data = malloc(bs_bufsize+4);
   124          if (b->bs_data == 0)
   125          {
   126              return(0);
   127          }
   128          *bp = b++;
   129          bp++;
   130      }
   131      bufs_ready = 1;
   132      return (1);
   133  }
   134  
   135   
   138  
   138  
   138  
   139  void reinit_bs_buffers(void)
   140  {
   141      struct bs_buffer *b,**bp;
   142      int i;
   143  
   144      bp = bprotos;
   145      for (i = 0; i < n_bs_buffers; i++)
   146      {
   147          b = *bp;
   148          bp++;
   149          if (!b)
   150              break;
   151          b->bs_handle = 0;
   152          b->bs_flags = 0;
   153          b->bs_packets = 0;
   154          return_empty_buf(b, 0);
   155      }
   156      bs_saved      = 0;
   157      bs_sent       = 0;
   158      bs_received   = 0;
   159      bufs_used     = 0;
   160      bs_bytes_sent = 0;
   161      bs_underflows = 0;
   162      bs_lowbufs   = 0;
   163      bs_overflows  = 0;
   164      bs_hiwater    = 0;
   165      bs_minbufs_check   = 0;
   166      bs_current_buf     =  0 ;
   167      bs_current_residue = 0;
   168  }
   169  
   170   
   172  
   172  
   173  int return_empty_buf(struct bs_buffer *b, int flag)
   174  {
   175      if (b != 0)
   176      {
   177          int s = ensure_irqs_off();
   178          bs_received++;
   179          bufs_used--;
   180  
   181          if (bs_emptyp == 0)
   182             bs_empty_q = b;
   183          else
   184             bs_emptyp->bs_next = b;
   185          bs_emptyp = b;
   186  
   187          restore_irqs(s);
   188          if (flag)
   189          {
   190            if (bufs_used <= 1)  
   191            {
   192              bs_underflows++;
   193            }
   194            if (bufs_used <= bs_minbufs)  
   195            {
   196              bs_lowbufs++;
   197            }
   198          }
   199      }
   200      return(1);
   201  }
   202  
   203  
   204  void free_bs_buffers(void)
   205  {
   206      struct bs_buffer *b;
   207  
   208      while ((b = bs_empty_q) != 0)
   209      {
   210          bs_empty_q = b->bs_next;
   211          free((char *)b);
   212      }
   213      free((char *)bprotos);
   214      bs_fullp = 0;
   215  }
   216  
   217   
   219  
   219  
   220  struct bs_buffer *get_empty_buffer(void)
   221  {
   222      int s = ensure_irqs_off();
   223      struct bs_buffer *b = bs_empty_q;
   224  
   225      if (b == 0)
   226      {
   227          bs_overflows++;
   228          restore_irqs(s);
   229          return ((struct bs_buffer *)0);
   230      }
   231      bs_empty_q = b->bs_next;
   232      if (bs_empty_q == 0)
   233          bs_emptyp = 0;
   234      if (++bufs_used > bs_hiwater)
   235      {
   236        bs_hiwater = bufs_used;
   237      }
   238      restore_irqs(s);
   239      b->bs_next = 0;
   240      b->bs_len = 0;
   241      b->bs_offset = b->bs_data;
   242      return (b);
   243  }
   244  
   245   
   248  
   248  
   248  
   249  void save_full_buf(struct bs_buffer * b, int datalost)
   250  {
   251      int s = ensure_irqs_off();
   252      b->bs_next = 0;
   253  
   254      if (skipcnt > 0)
   255      {
   256          b->bs_offset = b->bs_data + skipcnt;
   257          b->bs_len -= skipcnt;
   258      }
   259      else
   260      {
   261          b->bs_offset = b->bs_data;
   262      }
   263  
   264      if (bs_fullp == 0)
   265      {
   266         bs_full_q = b;
   267      }
   268      else
   269      {
   270         bs_fullp->bs_next = b;
   271      }
   272  
   273      bs_fullp = b;
   274      bs_saved++;
   275      restore_irqs(s);
   276  }
   277  
   278   
   280  
   280  
   281  int bs_empty_q_cnt()
   282  {
   283      struct bs_buffer *b;
   284      int n = 0;
   285      int s = ensure_irqs_off();
   286  
   287      for (b = bs_empty_q; b; b = b->bs_next)
   288          n++;
   289      restore_irqs(s);
   290      return (n);
   291  }
   292  
   293   
   296  
   296  
   296  
   297  int send_buffers()
   298  {
   299      struct bs_buffer *b, *bq, *lastb;
   300      int len = 0;
   301  
   302      if (bs_saved < bs_minbufs)  
   303      {
   304        bs_minbufs_check++;
   305        return(0);
   306      }
   307  
   308      len = 0; bq = 0; lastb = 0;
   309      while ((b = full_buffer()) != 0)
   310      {
   311          bs_sent++;
   312          b->bs_next = 0;
   313          len += b->bs_len;
   314          send_full_buf(b, 0);
   315      }
   316      return (len);
   317  }
   318  
   319   
   321  
   321  
   322  struct bs_buffer *full_buffer(void)
   323  {
   324      struct bs_buffer *b;
   325      int s = ensure_irqs_off();
   326  
   327      b = bs_full_q;
   328      if (b)
   329      {
   330          bs_full_q = b->bs_next;
   331          if (bs_full_q == 0)
   332          {
   333            bs_fullp = 0;
   334          }
   335          b->bs_next = 0;
   336      }
   337      restore_irqs(s);
   338      return (b);
   339  }
   340  
   341  
   342  void send_full_buf(struct bs_buffer *buf, int flag)
   343  {
   344      _kernel_swi_regs r;
   345  
   346      r.r[0] = flag;
   347      r.r[1] = mpeg_handle;
   348      r.r[2] = (int)buf;
   349      (void) _kernel_swi( (1U << 17)  |  0x492c1 , &r, &r);
   350  }
   351  
