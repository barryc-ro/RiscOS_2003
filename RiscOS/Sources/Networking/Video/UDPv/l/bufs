     1   
     8  
     8  
     8  
     8  
     8  
     8  
     9  
    13  
    15  
    16  
    17  struct bs_buffer *bs_fullp = 0;
    18  struct bs_buffer *bs_full_q = 0;
    19  static int wasempty = 0;
    20   
    21  
    22  struct bs_buffer *bs_empty_q = 0;
    23  struct bs_buffer *bs_emptyp = 0;
    24  static int bs_sent = 0;
    25  static int bs_received = 0;
    26  static int bs_saved = 0;
    27  static int maxsaved = 0;
    28  static int callbs = 0;
    29  static int callbreqs = 0;
    30  static int bufs_hiwat = 0;
    31  static int norbufcnt = 0;
    32  static int bufs_sent = 0;
    33  
    34  int bufs_used = 0;
    35  int skipcnt = 0;
    36  
    37  extern int n_bs_buffers;
    38  extern int bs_bufsize;
    39  extern int mpeg_handle;
    40  extern int bs_minbufs;
    41  extern int bs_bytes_sent;
    42  
    43  void init_mpeg_buffers ( void );
    44  struct bs_buffer *full_buffer ( void );
    45  void print_bufs ( void );
    46  int return_empty_buf ( struct bs_buffer *b , int flag );
    47  int init_bs_buffers ( void );
    48  void reinit_bs_buffers ( void );
    49  void free_bs_buffers ( void );
    50  struct bs_buffer *get_empty_buffer ( void );
    51  void save_full_buf ( struct bs_buffer *b , int datalost );
    52  int bs_empty_q_cnt ( void );
    53  int send_buffers ( void );
    54  void send_full_buf(struct bs_buffer *buf, int flag);
    55  
    56  
    57  static struct bs_buffer **bprotos;
    58  static int bufs_ready = 0;
    59  
    60  void init_mpeg_buffers()
    61  {
    62      bs_empty_q = 0;
    63      bs_full_q = 0;
    64      bs_emptyp = 0;
    65      bs_fullp = 0;
    66      bs_received = 0;
    67      if (bufs_ready != 1)
    68      {
    69        init_bs_buffers();
    70      }
    71      reinit_bs_buffers();
    72      maxsaved = 0;
    73      callbs = 0;
    74      callbreqs = 0;
    75  }
    76  
    77  
    78  void print_bufs()
    79  {
    80      int nbufs = 0;
    81      struct bs_buffer *b;
    82  
    83      for (b = bs_empty_q; b; b = b->bs_next)
    84      {
    85        nbufs++;
    86      }
    87      printf("Buffers:\n");
    88      printf("    Empty bufs=%d (of %d)\n",nbufs, n_bs_buffers);
    89      printf("    Empty_q=%p, emptyp=%p, Full_q=%p, fullp=%p\n",
    90                  bs_empty_q, bs_emptyp, bs_full_q, bs_fullp);
    91      printf("    bs_queued=%d, bs_sent=%d, bs_returned=%d, maxsaved=%d\n",
    92                  bs_saved, bs_sent, bs_received, maxsaved);
    93      printf("    norbufs=%d, exhaustions=%d, bs_inuse=%d, bs_hiwat=%d\n",
    94                  norbufcnt, wasempty, bufs_used, bufs_hiwat);
    95      printf("    bs_buf average content=%d\n", bs_bytes_sent/bs_sent);
    96  }
    97  
    98  int init_bs_buffers(void)
    99  {
   100      struct bs_buffer *b,**bp;
   101      int i;
   102  
   103      bprotos = (struct bs_buffer **)calloc(sizeof(struct bs_buffer *),n_bs_buffers);
   104      if (bprotos ==  0 )
   105      {
   106        return(0);
   107      }
   108      bp = bprotos;
   109      b = (struct bs_buffer *)calloc(n_bs_buffers,sizeof(struct bs_buffer));
   110      if (b == 0)
   111      {
   112          return(0);
   113      }
   114      for (i = 0; i < n_bs_buffers; i++)
   115      {
   116          b->bs_data = malloc(bs_bufsize+4);
   117          if (b->bs_data == 0)
   118          {
   119              return(0);
   120          }
   121          *bp = b++;
   122          bp++;
   123      }
   124      bufs_ready = 1;
   125      return (1);
   126  }
   127  
   128   
   131  
   131  
   131  
   132  void reinit_bs_buffers(void)
   133  {
   134      struct bs_buffer *b,**bp;
   135      int i;
   136  
   137      printf("In reinit\n");
   138      bp = bprotos;
   139      for (i = 0; i < n_bs_buffers; i++)
   140      {
   141          b = *bp;
   142          bp++;
   143          if (!b)
   144              break;
   145          b->bs_handle = 0;
   146          b->bs_flags = 0;
   147          b->bs_packets = 0;
   148          return_empty_buf(b, 0);
   149      }
   150      bs_received = 0;
   151      bufs_used = 0;
   152      bs_sent = 0;
   153      bs_saved = 0;
   154  }
   155  
   156   
   158  
   158  
   159  int return_empty_buf(struct bs_buffer *b, int flag)
   160  {
   161      if (b != 0)
   162      {
   163          int s = ensure_irqs_off();
   164          bs_received++;
   165          bufs_used--;
   166          if (bs_emptyp == 0)
   167             bs_empty_q = b;
   168          else
   169             bs_emptyp->bs_next = b;
   170          bs_emptyp = b;
   171          restore_irqs(s);
   172      }
   173      return(1);
   174  }
   175  
   176  
   177  void free_bs_buffers(void)
   178  {
   179      struct bs_buffer *b;
   180  
   181      while ((b = bs_empty_q) != 0)
   182      {
   183          bs_empty_q = b->bs_next;
   184          free((char *)b);
   185      }
   186      free((char *)bprotos);
   187      bs_fullp = 0;
   188  }
   189  
   190   
   192  
   192  
   193  struct bs_buffer *get_empty_buffer(void)
   194  {
   195      int s = ensure_irqs_off();
   196      struct bs_buffer *b = bs_empty_q;
   197  
   198      if (b == 0)
   199      {
   200          wasempty++;
   201          restore_irqs(s);
   202          return ((struct bs_buffer *)0);
   203      }
   204      bs_empty_q = b->bs_next;
   205      if (bs_empty_q == 0)
   206          bs_emptyp = 0;
   207      if (++bufs_used > bufs_hiwat)
   208          bufs_hiwat = bufs_used;
   209      restore_irqs(s);
   210      b->bs_next = 0;
   211      b->bs_len = 0;
   212      b->bs_offset = b->bs_data;
   213      return (b);
   214  }
   215  
   216   
   219  
   219  
   219  
   220  void save_full_buf(struct bs_buffer * b, int datalost)
   221  {
   222      int s = ensure_irqs_off();
   223      b->bs_next = 0;
   224      if (skipcnt > 0)
   225      {
   226          b->bs_offset = b->bs_data + skipcnt;
   227          b->bs_len -= skipcnt;
   228      }
   229      else
   230          b->bs_offset = b->bs_data;
   231      if (bs_fullp == 0)
   232         bs_full_q = b;
   233      else
   234         bs_fullp->bs_next = b;
   235      bs_fullp = b;
   236      bs_saved++;
   237      restore_irqs(s);
   238  }
   239  
   240   
   242  
   242  
   243  int bs_empty_q_cnt()
   244  {
   245      struct bs_buffer *b;
   246      int n = 0;
   247      int s = ensure_irqs_off();
   248  
   249      for (b = bs_empty_q; b; b = b->bs_next)
   250          n++;
   251      restore_irqs(s);
   252      return (n);
   253  }
   254  
   255   
   258  
   258  
   258  
   259  int send_buffers()
   260  {
   261      struct bs_buffer *b, *bq, *lastb;
   262      int len = 0;
   263  
   264      if (bs_saved < bs_minbufs)  
   265      {
   266        return(0);
   267      }
   268  
   269      len = 0; bq = 0; lastb = 0;
   270      while ((b = full_buffer()) != 0)
   271      {
   272          bs_sent++;
   273          b->bs_next = 0;
   274          len += b->bs_len;
   275          send_full_buf(b, 0);
   276      }
   277      return (len);
   278  }
   279  
   280   
   282  
   282  
   283  struct bs_buffer *full_buffer(void)
   284  {
   285      struct bs_buffer *b;
   286      int s = ensure_irqs_off();
   287  
   288      b = bs_full_q;
   289      if (b)
   290      {
   291          bs_full_q = b->bs_next;
   292          if (bs_full_q == 0)
   293          {
   294            bs_fullp = 0;
   295          }
   296          b->bs_next = 0;
   297      }
   298      restore_irqs(s);
   299      return (b);
   300  }
   301  
   302  
   303  void send_full_buf(struct bs_buffer *buf, int flag)
   304  {
   305      _kernel_swi_regs r;
   306  
   307      r.r[0] = flag;
   308      r.r[1] = mpeg_handle;
   309      r.r[2] = (int)buf;
   310      (void) _kernel_swi( (1U << 17)  |  0x492c1 , &r, &r);
   311  }
   312  
+++ Warning: static 'bufs_sent' declared but not used
