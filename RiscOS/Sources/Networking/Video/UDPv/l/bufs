     1   
     8  
     8  
     8  
     8  
     8  
     8  
     9  
    13  
    15  
    17  
    18  
    19  struct bs_buffer *bs_fullp = 0;
    20  struct bs_buffer *bs_full_q = 0;
    21  struct bs_buffer *bs_empty_q = 0;
    22  struct bs_buffer *bs_emptyp = 0;
    23  
    24  static u_int bs_sent = 0;
    25  static u_int bs_received = 0;
    26  static u_int bs_saved = 0;
    27  static u_int bs_hiwater = 0;
    28  static u_int bs_overflows = 0;
    29  static u_int bs_underflows = 0;
    30  static u_int bs_lowbufs = 0;
    31  static u_int bs_vlowbufs = 0;
    32  static int bufs_used = 0;
    33  
    34  int bs_minbufs_check = 0;
    35  
    36  extern int n_bs_buffers;
    37  extern int bs_bufsize;
    38  extern int mpeg_handle;
    39  extern int bs_minbufs;
    40  extern u_long bs_bytes_sent;
    41  extern int do_debug;
    42  
    43  extern struct bs_buffer *bs_current_buf;
    44  extern int bs_current_residue;
    45  
    46  
    47  void init_mpeg_buffers ( void );
    48  struct bs_buffer *full_buffer ( void );
    49  void print_bufs ( void );
    50  int return_empty_buf ( struct bs_buffer *b , int flag );
    51  int init_bs_buffers ( void );
    52  void reinit_bs_buffers ( void );
    53  void free_bs_buffers ( void );
    54  struct bs_buffer *get_empty_buffer ( void );
    55  void save_full_buf ( struct bs_buffer *b , int datalost );
    56  int bs_empty_q_cnt ( void );
    57  int send_buffers ( void );
    58  void send_full_buf(struct bs_buffer *buf, int flag);
    59  
    60  
    61  static struct bs_buffer **bprotos;
    62  static int bufs_ready = 0;
    63  
    64  void init_mpeg_buffers()
    65  {
    66      bs_empty_q = 0;
    67      bs_full_q = 0;
    68      bs_emptyp = 0;
    69      bs_fullp = 0;
    70      bs_received = 0;
    71      if (bufs_ready != 1)
    72      {
    73        init_bs_buffers();
    74      }
    75      reinit_bs_buffers();
    76  }
    77  
    78  
    79  void print_bufs()
    80  {
    81      int nbufs = bs_empty_q_cnt();
    82  
    83      printf("Buffers:\n");
    84      printf("    Empty bufs: %d (of %d)\n",nbufs, n_bs_buffers);
    85      printf("    bs_queued: %d  bs_sent: %d  bs_returned: %d  bs_inuse: %d\n",
    86                  bs_saved, bs_sent, bs_received, bufs_used);
    87      printf("    bs_underflows: %d  bs_lowbufs: %d (<=%d) : %d (<=%d)\n",
    88                  bs_underflows, bs_vlowbufs, bs_minbufs/2, bs_lowbufs, bs_minbufs);
    89      printf("    bs_overflows: %d  bs_hiwater: %d\n", bs_overflows, bs_hiwater);
    90      if (do_debug)
    91      {
    92        if (bs_sent > 0)
    93        {
    94          printf("    bs_buf average content=%d\n", bs_bytes_sent/bs_sent);
+++ Warning: actual type 'long' mismatches format '%d'
    95        }
    96        printf("    Empty_q=%p, emptyp=%p, Full_q=%p, fullp=%p\n",
    97                    bs_empty_q, bs_emptyp, bs_full_q, bs_fullp);
    98      }
    99  }
   100  
   101  
   102  int init_bs_buffers(void)
   103  {
   104      struct bs_buffer *b,**bp;
   105      int i;
   106  
   107      bprotos = (struct bs_buffer **)calloc(sizeof(struct bs_buffer *), n_bs_buffers);
   108      if (bprotos ==  0 )
   109      {
   110        return(0);
   111      }
   112      bp = bprotos;
   113      b = (struct bs_buffer *)calloc(sizeof(struct bs_buffer), n_bs_buffers);
   114      if (b == 0)
   115      {
   116          return(0);
   117      }
   118      for (i = 0; i < n_bs_buffers; i++)
   119      {
   120          b->bs_data = malloc(bs_bufsize+4);
   121          if (b->bs_data == 0)
   122          {
   123              return(0);
   124          }
   125          *bp = b++;
   126          bp++;
   127      }
   128      bufs_ready = 1;
   129      return (1);
   130  }
   131  
   132   
   135  
   135  
   135  
   136  void reinit_bs_buffers(void)
   137  {
   138      struct bs_buffer *b,**bp;
   139      int i;
   140  
   141      bp = bprotos;
   142      for (i = 0; i < n_bs_buffers; i++)
   143      {
   144          b = *bp;
   145          bp++;
   146          if (!b)
   147              break;
   148          b->bs_handle = 0;
   149          b->bs_flags = 0;
   150          b->bs_packets = 0;
   151          return_empty_buf(b, 0);
   152      }
   153      bs_saved      = 0;
   154      bs_sent       = 0;
   155      bs_received   = 0;
   156      bufs_used     = 0;
   157      bs_bytes_sent = 0;
   158      bs_underflows = 0;
   159      bs_lowbufs    = 0;
   160      bs_vlowbufs   = 0;
   161      bs_overflows  = 0;
   162      bs_hiwater    = 0;
   163      bs_minbufs_check   = 0;
   164      bs_current_buf     =  0 ;
   165      bs_current_residue = 0;
   166  }
   167  
   168   
   170  
   170  
   171  int return_empty_buf(struct bs_buffer *b, int flag)
   172  {
   173      if (b !=  0 )
   174      {
   175          int s = ensure_irqs_off();
   176          bs_received++;
   177          bufs_used--;
   178  
   179          if (bs_emptyp == 0)
   180             bs_empty_q = b;
   181          else
   182             bs_emptyp->bs_next = b;
   183          bs_emptyp = b;
   184  
   185          if (flag)
   186          {
   187            if ((bufs_used == 0) || ((bufs_used == 1) && (bs_current_buf !=  0 )))
   188            {
   189               
   190              bs_underflows++;
   191            }
   192            if (bufs_used <= bs_minbufs)  
   193            {
   194              bs_lowbufs++;
   195            }
   196            if (bufs_used <= bs_minbufs/2)  
   197            {
   198              bs_vlowbufs++;
   199            }
   200          }
   201          restore_irqs(s);
   202      }
   203      return(1);
   204  }
   205  
   206  
   207  void free_bs_buffers(void)
   208  {
   209      struct bs_buffer *b;
   210  
   211      while ((b = bs_empty_q) != 0)
   212      {
   213          bs_empty_q = b->bs_next;
   214          free((char *)b);
   215      }
   216      free((char *)bprotos);
   217      bs_fullp = 0;
   218  }
   219  
   220   
   222  
   222  
   223  struct bs_buffer *get_empty_buffer(void)
   224  {
   225      int s = ensure_irqs_off();
   226      struct bs_buffer *b = bs_empty_q;
   227  
   228      if (b == 0)
   229      {
   230          bs_overflows++;
   231          restore_irqs(s);
   232          return ((struct bs_buffer *)0);
   233      }
   234      bs_empty_q = b->bs_next;
   235      if (bs_empty_q == 0)
   236          bs_emptyp = 0;
   237      if (++bufs_used > bs_hiwater)
   238      {
   239        bs_hiwater = bufs_used;
   240      }
   241      restore_irqs(s);
   242      b->bs_next = 0;
   243      b->bs_len = 0;
   244      b->bs_offset = b->bs_data;
   245      return (b);
   246  }
   247  
   248   
   251  
   251  
   251  
   252  void save_full_buf(struct bs_buffer * b, int datalost)
   253  {
   254      int s = ensure_irqs_off();
   255      b->bs_next = 0;
   256       
   260  
   260  
   260  
   260  
   261      b->bs_offset = b->bs_data;
   262  
   263      if (bs_fullp == 0)
   264      {
   265         bs_full_q = b;
   266      }
   267      else
   268      {
   269         bs_fullp->bs_next = b;
   270      }
   271  
   272      bs_fullp = b;
   273      bs_saved++;
   274      restore_irqs(s);
   275  }
   276  
   277   
   279  
   279  
   280  int bs_empty_q_cnt()
   281  {
   282      struct bs_buffer *b;
   283      int n = 0;
   284      int s = ensure_irqs_off();
   285  
   286      for (b = bs_empty_q; b; b = b->bs_next)
   287          n++;
   288      restore_irqs(s);
   289      return (n);
   290  }
   291  
   292   
   295  
   295  
   295  
   296  int send_buffers()
   297  {
   298      struct bs_buffer *b, *bq, *lastb;
   299      int len = 0;
   300  
   301      if (bs_saved < bs_minbufs)  
   302      {
   303        bs_minbufs_check++;
   304        return(0);
   305      }
   306  
   307      len = 0; bq = 0; lastb = 0;
   308      while ((b = full_buffer()) != 0)
   309      {
   310          bs_sent++;
   311          b->bs_next = 0;
   312          len += b->bs_len;
   313          send_full_buf(b, 0);
   314      }
   315      return (len);
   316  }
   317  
   318   
   320  
   320  
   321  struct bs_buffer *full_buffer(void)
   322  {
   323      struct bs_buffer *b;
   324      int s = ensure_irqs_off();
   325  
   326      b = bs_full_q;
   327      if (b)
   328      {
   329          bs_full_q = b->bs_next;
   330          if (bs_full_q == 0)
   331          {
   332            bs_fullp = 0;
   333          }
   334          b->bs_next = 0;
   335      }
   336      restore_irqs(s);
   337      return (b);
   338  }
   339  
   340  
   341  void send_full_buf(struct bs_buffer *buf, int flag)
   342  {
   343      _kernel_swi_regs r;
   344  
   345      r.r[0] = flag;
   346      r.r[1] = mpeg_handle;
   347      r.r[2] = (int)buf;
   348      (void) _kernel_swi( (1U << 17)  |  0x492c1 , &r, &r);
   349  }
   350  
