     1   
     8  
     8  
     8  
     8  
     8  
     8  
     9  
    13  
    15  
    16  
    17  struct bs_buffer *bs_fullp = 0;
    18  struct bs_buffer *bs_full_q = 0;
    19  static int wasempty = 0;
    20   
    21  
    22  struct bs_buffer *bs_empty_q = 0;
    23  struct bs_buffer *bs_emptyp = 0;
    24  static int bs_sent = 0;
    25  static int bs_received = 0;
    26  static int bs_saved = 0;
    27  static int callbs = 0;
    28  static int callbreqs = 0;
    29  static int bufs_hiwat = 0;
    30  static int norbufcnt = 0;
    31  static int bufs_sent = 0;
    32  
    33  int bs_minbufs_check = 0;
    34  
    35  int bufs_used = 0;
    36  int skipcnt = 0;
    37  
    38  extern int n_bs_buffers;
    39  extern int bs_bufsize;
    40  extern int mpeg_handle;
    41  extern int bs_minbufs;
    42  extern int bs_bytes_sent;
    43  
    44  void init_mpeg_buffers ( void );
    45  struct bs_buffer *full_buffer ( void );
    46  void print_bufs ( void );
    47  int return_empty_buf ( struct bs_buffer *b , int flag );
    48  int init_bs_buffers ( void );
    49  void reinit_bs_buffers ( void );
    50  void free_bs_buffers ( void );
    51  struct bs_buffer *get_empty_buffer ( void );
    52  void save_full_buf ( struct bs_buffer *b , int datalost );
    53  int bs_empty_q_cnt ( void );
    54  int send_buffers ( void );
    55  void send_full_buf(struct bs_buffer *buf, int flag);
    56  
    57  
    58  static struct bs_buffer **bprotos;
    59  static int bufs_ready = 0;
    60  
    61  void init_mpeg_buffers()
    62  {
    63      bs_empty_q = 0;
    64      bs_full_q = 0;
    65      bs_emptyp = 0;
    66      bs_fullp = 0;
    67      bs_received = 0;
    68      if (bufs_ready != 1)
    69      {
    70        init_bs_buffers();
    71      }
    72      reinit_bs_buffers();
    73      callbs = 0;
    74      callbreqs = 0;
    75  }
    76  
    77  
    78  void print_bufs()
    79  {
    80      int nbufs = 0;
    81      struct bs_buffer *b;
    82  
    83      for (b = bs_empty_q; b; b = b->bs_next)
    84      {
    85        nbufs++;
    86      }
    87      printf("Buffers:\n");
    88      printf("    Empty bufs=%d (of %d)\n",nbufs, n_bs_buffers);
    89      printf("    Empty_q=%p, emptyp=%p, Full_q=%p, fullp=%p\n",
    90                  bs_empty_q, bs_emptyp, bs_full_q, bs_fullp);
    91      printf("    bs_queued=%d, bs_sent=%d, bs_returned=%d\n",
    92                  bs_saved, bs_sent, bs_received);
    93      printf("    norbufs=%d, exhaustions=%d, bs_inuse=%d, bs_hiwat=%d\n",
    94                  norbufcnt, wasempty, bufs_used, bufs_hiwat);
    95      if (bs_sent > 0)
    96      {
    97        printf("    bs_buf average content=%d\n", bs_bytes_sent/bs_sent);
    98      }
    99  }
   100  
   101  int init_bs_buffers(void)
   102  {
   103      struct bs_buffer *b,**bp;
   104      int i;
   105  
   106      bprotos = (struct bs_buffer **)calloc(sizeof(struct bs_buffer *),n_bs_buffers);
   107      if (bprotos ==  0 )
   108      {
   109        return(0);
   110      }
   111      bp = bprotos;
   112      b = (struct bs_buffer *)calloc(n_bs_buffers,sizeof(struct bs_buffer));
   113      if (b == 0)
   114      {
   115          return(0);
   116      }
   117      for (i = 0; i < n_bs_buffers; i++)
   118      {
   119          b->bs_data = malloc(bs_bufsize+4);
   120          if (b->bs_data == 0)
   121          {
   122              return(0);
   123          }
   124          *bp = b++;
   125          bp++;
   126      }
   127      bufs_ready = 1;
   128      return (1);
   129  }
   130  
   131   
   134  
   134  
   134  
   135  void reinit_bs_buffers(void)
   136  {
   137      struct bs_buffer *b,**bp;
   138      int i;
   139  
   140      printf("In reinit\n");
   141      bp = bprotos;
   142      for (i = 0; i < n_bs_buffers; i++)
   143      {
   144          b = *bp;
   145          bp++;
   146          if (!b)
   147              break;
   148          b->bs_handle = 0;
   149          b->bs_flags = 0;
   150          b->bs_packets = 0;
   151          return_empty_buf(b, 0);
   152      }
   153      bs_received = 0;
   154      bufs_used = 0;
   155      bs_sent = 0;
   156      bs_bytes_sent = 0;
   157      bs_saved = 0;
   158      bs_minbufs_check = 0;
   159  }
   160  
   161   
   163  
   163  
   164  int return_empty_buf(struct bs_buffer *b, int flag)
   165  {
   166      if (b != 0)
   167      {
   168          int s = ensure_irqs_off();
   169          bs_received++;
   170          bufs_used--;
   171          if (bs_emptyp == 0)
   172             bs_empty_q = b;
   173          else
   174             bs_emptyp->bs_next = b;
   175          bs_emptyp = b;
   176          restore_irqs(s);
   177      }
   178      return(1);
   179  }
   180  
   181  
   182  void free_bs_buffers(void)
   183  {
   184      struct bs_buffer *b;
   185  
   186      while ((b = bs_empty_q) != 0)
   187      {
   188          bs_empty_q = b->bs_next;
   189          free((char *)b);
   190      }
   191      free((char *)bprotos);
   192      bs_fullp = 0;
   193  }
   194  
   195   
   197  
   197  
   198  struct bs_buffer *get_empty_buffer(void)
   199  {
   200      int s = ensure_irqs_off();
   201      struct bs_buffer *b = bs_empty_q;
   202  
   203      if (b == 0)
   204      {
   205          wasempty++;
   206          restore_irqs(s);
   207          return ((struct bs_buffer *)0);
   208      }
   209      bs_empty_q = b->bs_next;
   210      if (bs_empty_q == 0)
   211          bs_emptyp = 0;
   212      if (++bufs_used > bufs_hiwat)
   213          bufs_hiwat = bufs_used;
   214      restore_irqs(s);
   215      b->bs_next = 0;
   216      b->bs_len = 0;
   217      b->bs_offset = b->bs_data;
   218      return (b);
   219  }
   220  
   221   
   224  
   224  
   224  
   225  void save_full_buf(struct bs_buffer * b, int datalost)
   226  {
   227      int s = ensure_irqs_off();
   228      b->bs_next = 0;
   229      if (skipcnt > 0)
   230      {
   231          b->bs_offset = b->bs_data + skipcnt;
   232          b->bs_len -= skipcnt;
   233      }
   234      else
   235          b->bs_offset = b->bs_data;
   236      if (bs_fullp == 0)
   237         bs_full_q = b;
   238      else
   239         bs_fullp->bs_next = b;
   240      bs_fullp = b;
   241      bs_saved++;
   242      restore_irqs(s);
   243  }
   244  
   245   
   247  
   247  
   248  int bs_empty_q_cnt()
   249  {
   250      struct bs_buffer *b;
   251      int n = 0;
   252      int s = ensure_irqs_off();
   253  
   254      for (b = bs_empty_q; b; b = b->bs_next)
   255          n++;
   256      restore_irqs(s);
   257      return (n);
   258  }
   259  
   260   
   263  
   263  
   263  
   264  int send_buffers()
   265  {
   266      struct bs_buffer *b, *bq, *lastb;
   267      int len = 0;
   268  
   269      if (bs_saved < bs_minbufs)  
   270      {
   271        bs_minbufs_check++;
   272        return(0);
   273      }
   274  
   275      len = 0; bq = 0; lastb = 0;
   276      while ((b = full_buffer()) != 0)
   277      {
   278          bs_sent++;
   279          b->bs_next = 0;
   280          len += b->bs_len;
   281          send_full_buf(b, 0);
   282      }
   283      return (len);
   284  }
   285  
   286   
   288  
   288  
   289  struct bs_buffer *full_buffer(void)
   290  {
   291      struct bs_buffer *b;
   292      int s = ensure_irqs_off();
   293  
   294      b = bs_full_q;
   295      if (b)
   296      {
   297          bs_full_q = b->bs_next;
   298          if (bs_full_q == 0)
   299          {
   300            bs_fullp = 0;
   301          }
   302          b->bs_next = 0;
   303      }
   304      restore_irqs(s);
   305      return (b);
   306  }
   307  
   308  
   309  void send_full_buf(struct bs_buffer *buf, int flag)
   310  {
   311      _kernel_swi_regs r;
   312  
   313      r.r[0] = flag;
   314      r.r[1] = mpeg_handle;
   315      r.r[2] = (int)buf;
   316      (void) _kernel_swi( (1U << 17)  |  0x492c1 , &r, &r);
   317  }
   318  
+++ Warning: static 'bufs_sent' declared but not used
