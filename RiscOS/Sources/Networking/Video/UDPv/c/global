/**************************************************************/
/* File:    global.c                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Hold all UDPV global variables.                   */
/*                                                            */
/* Author:  Andrew Hodgkinson.                                */
/*                                                            */
/* History: 27-Mar-2000 (ADH): Created.                       */
/**************************************************************/

#include <sys/types.h>
#include <sys/mbuf.h>

#include "bufs.h"

#include "global.h"

#ifdef TRACE

  /* This only switches a few old bits, mostly in module.c. Non-zero */
  /* to enable. Set also by UDP$Debug (RMReInit to make the change). */

  unsigned int do_debug = 0;

  #define Trace_All        (0xffffffffu)
  #define Trace_Init       (1u<<0)
  #define Trace_Alloc      (1u<<1)
  #define Trace_Free       (1u<<2)
  #define Trace_Alloc_Fail (1u<<3)
  #define Trace_Free_Fail  (1u<<4)

  /* This controls everything else. Set also by UDP$TraceLevel */
  /* (RMReInit to make the change).                            */

  unsigned int tl = 0; /* E.g. Trace_Init | Trace_Free_Fail */

  /* These are counted by the alloc and free routines in bufs.c */
  /* and reported via. *StrmInfo through bufs_show_stats().     */

  unsigned int freefail1, freefail2, freefail3, freefail4;
  unsigned int allofail1;
  unsigned int not_my_socket, is_my_socket;
  unsigned int claimcount, releasecount, runcount;

#endif

int bs_bufsize  = 0; /* Buffer size in bytes, initialised in udpv_init, module.c */
int mpeg_handle = 0; /* MPEGControl stream handle, from R4 in SWI UDPV_StartOfPlay */
int overruns    = 0; /* Overrun count, reset for each new stream */

/* This structure is our main interface to the MBufManager */

struct mbctl mbctl =
{
  0,                    /* opaque    */
  sizeof(struct mbctl), /* mbcsize   */
  MBUF_MANAGER_VERSION, /* mbcvers   */
  0ul,                  /* flags     */
  MINCONTIG,            /* advminubs */
  UDPV_BUFSIZE,         /* advmaxubs */
  MINCONTIG,            /* mincontig */
  0ul,                  /* spare1    */

  /*
   * Rest of the structure gets initialised
   * to zeroes due to the trailing comma
   */
};
