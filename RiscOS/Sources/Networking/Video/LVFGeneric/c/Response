/**************************************************************/
/* File:    Response.c                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Emulate RTSP server responses.                    */
/*                                                            */
/* Author:  A.D.Hodgkinson                                    */
/*                                                            */
/* History: 01-Jun-2000 (ADH): Imported to LVF Generic.       */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Generic.h"
#include "Headers.h"
#include "LVFGErrors.h"
#include "Module.h"
#include "MPEGCtrl.h"
#include "Play.h"
#include "Status.h"
#include "URLutils.h"
#include "Utils.h"

#include "Response.h"

/**************************************************************/
/* response_setup()                                           */
/*                                                            */
/* Respond to a SETUP command.                                */
/*                                                            */
/* Parameters: Pointer to the rtsp_header list for the sent   */
/*             out command.                                   */
/*                                                            */
/* Returns:    Pointer to the head of a header list for the   */
/*             response or NULL for an allocation failure.    */
/**************************************************************/

rtsp_header * response_setup(rtsp_header * command)
{
  unsigned int      curs;
  url_description * d     = NULL;
  char            * path  = NULL;
  rtsp_header     * r     = NULL;
  rtsp_header     * cseq  = NULL;
  rtsp_header     * tran  = NULL;
  bool              fail  = false;
  bool              check = false;
  bool              there = false;
  char              ses [30];

  dprintf(("", "response_setup: Called with %p\n", command));

  cseq = headers_find_header(command, Headers_HeaderName_Sequence);
  tran = headers_find_header(command, Headers_HeaderName_Transport);

  curs = headers_get_sequence();
  sprintf(ses, "%08x%08x%08x", ((int) command) ^ curs, ((int) &r) ^ curs, (utils_read_time() ^ curs));

  dprintf(("", "response_setup: Session '%s', cseq at %p, tran at %p\n", ses, cseq, tran));

  /* Is the URL query string OK? */

  if (command->value != NULL) urlutils_return_description(command->value, &d);

  if (d != NULL)
  {
    check = response_check_query(d, NULL);
    urlutils_free_description(d);
  }
  else fail = true;

  dprintf(("", "response_setup: Query check says %d, fail %d\n", check, fail));

  /* Convert the request URL to a path and check if the file exists */

  path = Strdup(d->path);

  if (path != NULL)
  {
    _kernel_oserror * e;
    unsigned int      type;

    urlutils_translate_pathname(path);

    e = _swix(OS_File,
              _INR(0,1) | _OUT(0),

              17,   /* Read catalogue info */
              path,

              &type);

    if (type != 0) there = true; /* Type of 0 means "not found" */

    free(path), path = NULL;
  }
  else fail = true;

  /* If 'fail' is set already, we're out of RAM or something - attempt to raise */
  /* 503 Service Unavailable.                                                   */

  if (fail == true)
  {
    if (
         headers_add_header(&r,
                            Headers_Supported_Prefix,
                            Headers_Supported_Prefix_SU)

         == NULL
       )
       fail = true;
  }

  /* If 'fail' is false but 'check' is also false, we couldn't understand the */
  /* request - raise 400 Bad Request.                                         */

  else if (check == false)
  {
    if (
         headers_add_header(&r,
                            Headers_Supported_Prefix,
                            Headers_Supported_Prefix_BR)

         == NULL
       )
       fail = true;
  }

  /* If 'fail' is false, 'check' is true but 'there' is false, file is not found */

  else if (there == false)
  {
    if (
         headers_add_header(&r,
                            Headers_Supported_Prefix,
                            Headers_Supported_Prefix_NF)

         == NULL
       )
       fail = true;
  }

  /* Otherwise, we're OK to go */

  else
  {
    if (
         headers_add_header(&r,
                            Headers_Supported_Prefix,
                            Headers_Supported_Prefix_OK)

         == NULL
       )
       fail = true;

    /* A duplicate Transport header */

    else if (
              tran != NULL &&
              headers_add_header(&r,
                                 Headers_HeaderName_Transport,
                                 tran->value)

              == NULL
            )
            fail = true;

    /* Session ID based on the given header address, a stack address */
    /* and the current time                                          */

    else if (
              headers_add_header(&r,
                                 Headers_HeaderName_Session,
                                 ses)
              == NULL
            )
            fail = true;
  }

  /* A duplicate CSeq header */

  if (
       fail == false &&
       cseq != NULL  &&
       headers_add_header(&r,
                          Headers_HeaderName_Sequence,
                          cseq->value)

       == NULL
     )
     fail = true;

  /* Connection: close */

  else if (
            headers_add_header(&r,
                               Headers_HeaderName_Connection,
                               Headers_HeaderValue_Connection)
            == NULL
          )
          fail = true;

  /* No body data */

  else if (
            headers_add_header(&r,
                               Headers_HeaderName_ContentLength,
                               "0")
            == NULL
          )
          fail = true;

  /* Sanity check */

  if (fail)
  {
    if (r != NULL) headers_free_headers(&r);

    dprintf(("", "response_setup: Out of memory\n"));

    return NULL;
  }

  dprintf(("", "response_setup: Successful\n"));

  return r;
}

/**************************************************************/
/* response_play()                                            */
/*                                                            */
/* Respond to a PLAY command.                                 */
/*                                                            */
/* Parameters: Pointer to the rtsp_header list for the sent   */
/*             out command.                                   */
/*                                                            */
/* Returns:    Pointer to the head of a header list for the   */
/*             response or NULL for an allocation failure.    */
/**************************************************************/

rtsp_header * response_play(rtsp_header * command)
{
  rtsp_header * r    = NULL;
  rtsp_header * cseq = NULL;
  rtsp_header * sess = NULL;
  rtsp_header * rang = NULL;
  rtsp_header * spee = NULL;
  rtsp_header * scal = NULL;
  bool          fail = false;
  bool          noti = false;

  dprintf(("", "response_play: Called with %p\n", command));

  cseq = headers_find_header(command, Headers_HeaderName_Sequence);
  sess = headers_find_header(command, Headers_HeaderName_Session);

  dprintf(("", "response_play: CSeq, Session at %08x, %08x\n", (int) cseq, (int) sess));

  rang = headers_find_header(command, Headers_HeaderName_Range);
  scal = headers_find_header(command, Headers_HeaderName_Scale);
  spee = headers_find_header(command, Headers_HeaderName_Speed);

  /* Can we handle this? */

  if      (rang != NULL && !response_filter_range(rang->value, NULL, NULL)) noti = true;
  else if (spee != NULL && !response_filter_speed(spee->value))             noti = true;
  else if (scal != NULL && !response_filter_speed(scal->value))             noti = true;
  else
  {
    if (
         Strcmp_ci(command->header, Headers_CommandName_Play)  != 0 &&
         Strcmp_ci(command->header, Headers_CommandName_Pause) != 0
       )
       noti = true;
  }

  /* If 'noti' is true, we can't handle this command */

  if (noti)
  {
    /* 501 Not Implemented */

    if (
         headers_add_header(&r,
                            Headers_Supported_Prefix,
                            Headers_Supported_Prefix_NI)

         == NULL
       )
       fail = true;
  }
  else
  {
    /* The OK response */

    if (
         headers_add_header(&r,
                            Headers_Supported_Prefix,
                            Headers_Supported_Prefix_OK)

         == NULL
       )
       fail = true;

    else if (
              headers_add_header(&r,
                                 Headers_HeaderName_Range,
                                 rang ? rang->value : Headers_HeaderValue_Range)
              == NULL
            )
            fail = true;

    else if (
              (scal || spee) &&

              headers_add_header(&r,
                                 Headers_HeaderName_Scale,
                                 scal ? scal->value : Headers_HeaderValue_Scale)
              == NULL
            )
            fail = true;

    else if (
              (scal || spee) &&

              headers_add_header(&r,
                                 Headers_HeaderName_Speed,
                                 spee ? spee->value : Headers_HeaderValue_Speed)
              == NULL
            )
            fail = true;

  }

  /* A duplicate CSeq header */

  if (
       fail == false &&
       cseq != NULL  &&
       headers_add_header(&r,
                          Headers_HeaderName_Sequence,
                          cseq->value)

       == NULL
     )
     fail = true;

  /* A duplicate Session header */

  else if (
            sess != NULL &&
            headers_add_header(&r,
                               Headers_HeaderName_Session,
                               sess->value)

            == NULL
          )
          fail = true;

  /* Connection: close */

  else if (
            headers_add_header(&r,
                               Headers_HeaderName_Connection,
                               Headers_HeaderValue_Connection)
            == NULL
          )
          fail = true;

  /* No body data */

  else if (
            headers_add_header(&r,
                               Headers_HeaderName_ContentLength,
                               "0")
            == NULL
          )
          fail = true;

  /* Sanity check */

  if (fail)
  {
    if (r != NULL) headers_free_headers(&r);

    dprintf(("", "response_play: Out of memory\n"));

    return NULL;
  }

  dprintf(("", "response_play: Successful\n"));

  return r;
}

/**************************************************************/
/* response_teardown()                                        */
/*                                                            */
/* Respond to a TEARDOWN command.                             */
/*                                                            */
/* Parameters: Pointer to the rtsp_header list for the sent   */
/*             out command.                                   */
/*                                                            */
/* Returns:    Pointer to the head of a header list for the   */
/*             response or NULL for an allocation failure.    */
/**************************************************************/

rtsp_header * response_teardown(rtsp_header * command)
{
  rtsp_header * r     = NULL;
  rtsp_header * cseq  = NULL;
  rtsp_header * sess  = NULL;
  bool          fail  = false;

  dprintf(("", "response_teardown: Called with %p\n", command));

  cseq = headers_find_header(command, Headers_HeaderName_Sequence);
  sess = headers_find_header(command, Headers_HeaderName_Session);

  dprintf(("", "response_teardown: CSeq, Session at %08x, %08x\n", (int) cseq, (int) sess));

  /* The OK response */

  if (
       headers_add_header(&r,
                          Headers_Supported_Prefix,
                          Headers_Supported_Prefix_OK)

       == NULL
     )
     fail = true;


  /* A duplicate CSeq header */

  if (
       fail == false &&
       cseq != NULL  &&
       headers_add_header(&r,
                          Headers_HeaderName_Sequence,
                          cseq->value)

       == NULL
     )
     fail = true;

  /* A duplicate Session header */

  else if (
            sess != NULL &&
            headers_add_header(&r,
                               Headers_HeaderName_Session,
                               sess->value)

            == NULL
          )
          fail = true;

  /* Connection: close */

  else if (
            headers_add_header(&r,
                               Headers_HeaderName_Connection,
                               Headers_HeaderValue_Connection)
            == NULL
          )
          fail = true;

  /* No body data */

  else if (
            headers_add_header(&r,
                               Headers_HeaderName_ContentLength,
                               "0")
            == NULL
          )
          fail = true;

  /* Sanity check */

  if (fail)
  {
    if (r != NULL) headers_free_headers(&r);

    dprintf(("", "response_teardown: Out of memory\n"));

    return NULL;
  }

  dprintf(("", "response_teardown: Successful\n"));

  return r;
}

/**************************************************************/
/* response_check_query()                                     */
/*                                                            */
/* Check we understand the query string of a URL contained in */
/* the given command header, optionally also returning the    */
/* required channel number if the query string is OK, else 0. */
/*                                                            */
/* This is a hangover function from SVBGeneric and is at      */
/* present not implemented (always returns 'true' and channel */
/* 1). It's kept here for future expansion (file module       */
/* specific parameters of some kind for example).             */
/*                                                            */
/* Parameters: Pointer to the rtsp_header list for the sent   */
/*             out command;                                   */
/*                                                            */
/*             Optional pointer to an integer into which the  */
/*             channel number specified in the command URL is */
/*             written.                                       */
/*                                                            */
/* Returns:    true if the query string is understood, else   */
/*             false.                                         */
/**************************************************************/

bool response_check_query(url_description * url, unsigned int * channel)
{
  if (channel != NULL) *channel = 1;

  return true;
}

/**************************************************************/
/* response_filter_range()                                    */
/*                                                            */
/* Filter a Range header value - can we deal with it?         */
/*                                                            */
/* Parameters: Pointer to the Range header value (may be NULL */
/*             in which case true is returned);               */
/*                                                            */
/*             Pointer to a bool, which is updated with true  */
/*             if the range header indicates the stream       */
/*             should start from the beginning, else false    */
/*             (may be NULL if you don't care);               */
/*                                                            */
/*             Pointer to an int, updated to hold -1 if there */
/*             was no percentage start position specified,    */
/*             else holds the percentage from 0 to 99 (may be */
/*             NULL if you don't care).                       */
/*                                                            */
/* Returns:    true if the item is handleable, else false.    */
/**************************************************************/

bool response_filter_range(const char * range, bool * from_start, int * start_pos)
{
  bool no_check = false;

  /* Currently we understand the form "npt = <start_specifier> - <end_specifier>" */
  /* or pure white space. If not white space / NULL, must start with "npt" then   */
  /* "=" after white space; start and end specifiers may either or both be        */
  /* omitted. It's also possible for "npt=" to be missing, provided there is no   */
  /* "=" in the string.                                                           */
  /*                                                                              */
  /* In addition, a start specifier of "0%" to "99%" inclusive, integers only, is */
  /* valid. An end specifier of "100%" is allowed as well. For aesthetics only, a */
  /* unit specifier of "percent" as well as "npt" is accepted, though you can     */
  /* give percentages after "npt", "percent" or no specifier. It doesn't matter.  */
  /*                                                                              */
  /* Note that this is NOT a generic way of specifying a string and as such       */
  /* does break the "Generic" part of the name "LVFGeneric"...                    */

  if (from_start != NULL) *from_start = false;
  if (start_pos  != NULL) *start_pos  = -1;

  if (range == NULL) return true;

  /* Skip white space */

  while (*range != '\0' && *range <= ' ') range++;
  if (*range == '\0') return true;

  if (strchr(range, '=') != NULL)
  {
    /* Ensure we have "npt" or "percent" */

    if (!Strncmp_ci(range, Headers_HeaderValue_Range_NPT, sizeof(Headers_HeaderValue_Range_NPT) - 1))
    {
      range += sizeof(Headers_HeaderValue_Range_NPT) - 1;
    }
    else if (!Strncmp_ci(range, Headers_HeaderValue_Range_Pct, sizeof(Headers_HeaderValue_Range_Pct) - 1))
    {
      range += sizeof(Headers_HeaderValue_Range_Pct) - 1;
    }
    else return false;

    /* Skip white space, ensure we have "=", skip it and white space */

    while (*range != '\0' && *range <= ' ') range++;
    if (*range == '\0') return true;
    else if (*range != '=') return false;
    range++;
    while (*range != '\0' && *range <= ' ') range++;
    if (*range == '\0') return true;
  }

  /* Do we recognise any starting point specifier? Code here must always set */
  /* 'no_check' if it detects a specifier that doesn't mean "from the start" */

  if (!Strncmp_ci(range, Headers_HeaderValue_Range_Now1, sizeof(Headers_HeaderValue_Range_Now1) - 1))
  {
    no_check = true;
    range += sizeof(Headers_HeaderValue_Range_Now1) - 1;
  }
  else if (!Strncmp_ci(range, Headers_HeaderValue_Range_Now2, sizeof(Headers_HeaderValue_Range_Now2) - 1))
  {
    no_check = true;
    range += sizeof(Headers_HeaderValue_Range_Now2) - 1;
  }
  else if (!Strncmp_ci(range, Headers_HeaderValue_Range_Start1, sizeof(Headers_HeaderValue_Range_Start1) - 1))
  {
    range += sizeof(Headers_HeaderValue_Range_Start1) - 1;
  }

  /* If there's a number here, it's allowed to be a percentage or zero, and */
  /* nothing else.                                                          */

  else if (isdigit(*range))
  {
    unsigned int num;

    num = atoi(range);
    while (isdigit(*(++range)));

    /* If this isn't a percentage or number, the range is invalid; if a */
    /* percentage it must be between 0 and 99 (can't start at 100%!)    */

    if (*range == '%') range++;
    else if (num != 0) return false;

    if (num > 99) return false;
    else if (num != 0) no_check = 1;

    if (start_pos != NULL) *start_pos = (int) num;
  }

  /* If there's something before the '-' and we get as far as this check, */
  /* we can't handle it                                                   */

  else if (*range != '-') return false;

  /* Skip white space, ensure we have "-", skip it and white space */

  while (*range != '\0' && *range <= ' ') range++;
  if (*range == '\0') return true;
  else if (*range != '-') return false;
  if (!no_check && from_start != NULL) *from_start = true;
  range++;
  while (*range != '\0' && *range <= ' ') range++;
  if (*range == '\0') return true;

  /* Do we recognise any ending point specifier? */

  if (!Strncmp_ci(range, Headers_HeaderValue_Range_End1, sizeof(Headers_HeaderValue_Range_End1) - 1))
  {
    return true;
  }

  /* Number must be either 100% or is invalid */

  else if (isdigit(*range))
  {
    unsigned int num;

    num = atoi(range);
    while (isdigit(*(++range)));

    if (*range != '%' || num == 100) return false;
    else                             return true;
  }

  return false;
}

/**************************************************************/
/* response_filter_speed()                                    */
/*                                                            */
/* Filter a Speed / Scale header; can we handle the speed     */
/* value indicated?                                           */
/*                                                            */
/* Parameters: Pointer to the Range header value (may be NULL */
/*             in which case true is returned).               */
/*                                                            */
/* Returns:    true if the item is handleable, else false.    */
/**************************************************************/

bool response_filter_speed(const char * speed)
{
  bool mpd_present;
  int  type;

  if (speed == NULL) return true;

  /* If MPEGDriver is not present, we can only do pause or normal play. With */
  /* the module, we can also do reduced data rate slow motion forwards.      */

  if (
       _swix(OS_Module,
             _INR(0,1),

             18,
             ReducedRateSlowmoSupportModule) /* Play.h */

       != NULL
     )
     mpd_present = false;

  else mpd_present = true;

  /* Find the play type */

  type = play_process_speed(speed);

  /* Can we handle it? */

  if (
       type == MPEGCtrl_MCRS_Trick_Play   ||
       type == MPEGCtrl_MCRS_Trick_Freeze
     )
     return true;

  if (
       type == MPEGCtrl_MCRS_Trick_SFWD &&
       mpd_present
     )
     return true;

  return false;
}
