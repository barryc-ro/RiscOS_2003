/**************************************************************/
/* File:    LVFCtrl.c                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Control the LVFmip module.                        */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 01-Jun-2000 (ADH): Imported to LVF Generic.       */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <socklib.h>
#include <inetlib.h>
#include <netinet/in.h>

#include <Global/SWIs.h>
#include <MPEG/MPEGCtrl.h>
#include <VideoCtrl.h> /* Exported by VideoCtrl's !MkExport */

#include "Buffers.h"
#include "CallOut.h"
#include "LVFGErrors.h"
#include "LVFGHdr.h"
#include "Module.h"
#include "MPEGCtrl.h"
#include "Session.h"
#include "Status.h"
#include "Utils.h"

#include "LVFCtrl.h"

/* Local variables */

#ifdef FAST

  /* Direct interface to MPEG system */

  typedef void (*mpeg_fn_ptr)(unsigned int flags, bs_buffer * bsb);
  static mpeg_fn_ptr mpeg_rx_direct;

#endif

/* Local functions */

static _kernel_oserror * lvfctrl_read_block (session * s);

/**************************************************************/
/* lvfctrl_open_stream()                                      */
/*                                                            */
/* Open a multicast stream with LVF_OpenStream, if one is not */
/* already open.                                              */
/*                                                            */
/* Parameters: Pointer to a session struct relevant to the    */
/*             new stream.                                    */
/**************************************************************/

_kernel_oserror * lvfctrl_open_stream(session * s)
{
  if (s->running == 0)
  {
    #ifdef FAST

      /* Find out where the direct call interface for us to the MPEG */
      /* software is, if available                                   */

      mpeg_rx_direct = NULL;

      {
        unsigned int * written;
        unsigned int   statsin  [2];
        unsigned int   statsout [3] = {0,0,0};

        statsin[0] = 0x0C; /* Read MPEG direct call RX interface */
        statsin[1] = -1;

        if (
             _swix(MPEGControl_Stats,
                   _INR(0,4) | _OUT(3),

                   0,
                   s->mpegid,
                   statsin,
                   statsout,
                   sizeof(statsout),

                   &written)

             == NULL
           )
        {
          if (statsout[1] != 0 && written != statsout) mpeg_rx_direct = (mpeg_fn_ptr) statsout[2];
        }
      }

      if (mpeg_rx_direct == NULL) return make_error(lvfgeneric_ERROR_MPEG_TOO_OLD, 0);

    #endif

    buffers_allocate_main_buffer(s);
    if (s->carrier.buffer == NULL) return make_error(lvfgeneric_ERROR_MEMORY_EXHAUSTED, 0);

    RetError(lvfctrl_read_block(s));
  }

  return NULL;
}

/**************************************************************/
/* lvfctrl_close_stream()                                     */
/*                                                            */
/* Close a multicast stream with LVF_CloseStream.             */
/*                                                            */
/* Parameters: Pointer to a session struct relevant to the    */
/*             existing stream.                               */
/**************************************************************/

_kernel_oserror * lvfctrl_close_stream(session * s)
{
  /* Cancel any pending callback */

  s->threaded = 1;

  if (s->running != 0)
  {
    s->running = 0;
    untimeout(lvfctrl_callout_handler, s);
  }

  /* Shut an open file if we have one */

  if (s->open != 0)
  {
    unsigned int temp = s->open;

    s->open = 0;

    _swix(OS_Find,
          _INR(0,1),

          0,
          temp);
  }

  /* Free the buffer */

  buffers_free_main_buffer(s);

  s->threaded = 0;

  return NULL;
}

/**************************************************************/
/* lvfctrl_callout_handler()                                  */
/*                                                            */
/* Prepare to read more file data. Called from the callout    */
/* library.                                                   */
/*                                                            */
/* THIS FUNCTION MUST BE RE-ENTRANT.                          */
/*                                                            */
/* Parameters: Pointer to session struct to use, as a void *. */
/**************************************************************/

void lvfctrl_callout_handler(void * handle)
{
  _kernel_oserror * e;
  session         * s = (session *) handle;

  if (s->threaded != 0) return;
  else s->threaded = 1;

  if (s->running != 0)
  {
    /* Clear the expecting flag and call the file read routine */

    s->running = 0;

    e = lvfctrl_read_block(s);

    if (e != NULL)
    {
      utils_store_error(e);
      s->state = protostate_ERROR_OS;

      /* This is a background generated error. It isn't really right to */
      /* call VideoControl_ProtocolNotify 0 as that will end up raising */
      /* Service_VideoControl 2, which is meant to be based on a        */
      /* request->response model. So, instead, we call the server       */
      /* message SWI, and flag that we've told Video Control. Astute    */
      /* player clients may spot our error; if not, they'll get given   */
      /* it next time they cause the state machine to tick anyway.      */

      if (s->reported == 0)
      {
        s->reported = 1;

        _swix(VideoControl_ProtocolNotify,
              _INR(0,3),

              0,
              s->id,
              VideoControlProtocolNotifyMessageReceived, /* Well, sort of - our 'server' is the RISC OS file access interface, which has given some error */
              0);
      }
    }
  }

  s->threaded = 0;

  return;
}

/**************************************************************/
/* lvfctrl_loop()                                             */
/*                                                            */
/* When you decide that you want to loop playback, assuming   */
/* the file being streamed is open and has the file pointer   */
/* in a sensible place, call this function. Designed mostly   */
/* for use by the service call handler in Module.c.           */
/*                                                            */
/* Parameters: Pointer to a relevant session structure.       */
/*                                                            */
/* Assumes:    The file pointer is at the start of the file.  */
/**************************************************************/

void lvfctrl_loop(session * s)
{
  /* If we're threaded, the EOS occurred during our file reader routine */
  /* still being busy - that's basically impossible unless there was a  */
  /* stream timeout whilst a file operation was in progress. The file   */
  /* operation must've been network based and the network went down.    */
  /* Thus, we can't loop, we can't do much sensibly at all in fact;     */
  /* exit immediately.                                                  */

  if (s->threaded != 0) return;

  /* If the 'running' flag is set, yikes; there's a pending callout */
  /* - cancel it, we don't want to be interrupted or anything (um,  */
  /* can this actually happen though? that's a callback and we're   */
  /* usually called from a service call handler... Still, makes the */
  /* code more robust if it is ever called from elsewhere).         */

  if (s->running != 0)
  {
    s->running = 0;
    untimeout(lvfctrl_callout_handler, s);
  }

  /* Flag if we're waiting for an empty buffer */

  s->restart_pos = 0;
  s->restart     = s->carrier.empty == false ? 1 : 0;
  s->restart_ok  = !s->restart;

  /* Reset the stream (not deferred) */

  _swix(MPEGControl_ResetStream,
        _INR(0,2),

        ResetStreamFlags_VideoPresent | ResetStreamFlags_AudioPresent,
        s->mpegid,
        s->lastplay);

  /* Set the callout system going again */

  s->running = 1;
  timeout(lvfctrl_callout_handler, s, LVFCtrl_CalloutDelay);
}

/**************************************************************/
/* lvfctrl_read_block()                                       */
/*                                                            */
/* Read more file data, setting a callback if there's more    */
/* left afterwards.                                           */
/*                                                            */
/* WARNING: Callbacks can go off whilst we're threaded, e.g.  */
/*          for a slow NFS operation; callers must protect    */
/*          against any possible consequences using the       */
/*          'threaded' flag in the session structure.         */
/*                                                            */
/* Parameters: Pointer to the session to read for.            */
/**************************************************************/

static _kernel_oserror * lvfctrl_read_block(session * s)
{
  bool restart_ok = s->restart_ok;
  bool another    = true;

  if (restart_ok) s->restart_ok = 0;

  /* Don't do anything file-related unless we're not paused and */
  /* we've cleared the pending restart condition.               */

  if (s->restart == 0 && s->lastplay != MPEGCtrl_MCRS_Trick_Freeze)
  {
    bs_buffer    * buf = NULL;
    unsigned int   pointer,   extent;
    unsigned int   remaining, read;

    /* Open the file if we need to */

    if (s->open == 0)
    {
      if (s->filename == NULL)
      {
        return make_error(lvfgeneric_ERROR_CANNOT_OPEN_FILE, 1, "");
      }
      else
      {
        RetError(_swix(OS_Find,
                       _INR(0,1) | _OUT(0),

                       0x4F, /* Open file read-only, no path */
                       s->filename,

                       &s->open));

        /* SWI should've return an error if the open failed, but just in case... */

        if (s->open == 0)
        {
          return make_error(lvfgeneric_ERROR_CANNOT_OPEN_FILE, 1, s->filename);
        }
      }
    }

    /* We need the file length for various things below */

    RetError(_swix(OS_Args,
                   _INR(0,1) | _OUT(2),

                   2,       /* Read file extent */
                   s->open,

                   &extent));

    /* Restarting or jumping? */

    if (restart_ok)
    {
      /* Yes, so set file pointer as required */

      pointer = (extent * s->restart_pos) / 100;

      RetError(_swix(OS_Args,
                     _INR(0,2),

                     1,       /* Write file pointer */
                     s->open,
                     pointer));
    }
    else
    {
      /* Not restarting, so read the file pointer */

      RetError(_swix(OS_Args,
                     _INR(0,1) | _OUT(2),

                     0,       /* Read file pointer */
                     s->open,

                     &pointer));
    }

    /* How much do we read? */

    remaining = extent - pointer;

    /* Handle looping and telling other people about the end of stream */

    if (remaining == 0)
    {
      /* File finished, turn off callout regeneration for now */

      another = false;

      /* If we're looping, make sure we leave the file pointer back at the start */
      /* but don't do anything else. Later, we'll get called by a Video Control  */
      /* service call if all Goes To Plan (TM) - see the service handler in      */
      /* Module.c for more details.                                              */

      if (s->loop != 0)
      {
        /* And yes, not doing 'remaining=extent' and setting 'another' to 'false' */
        /* means we're relying on that UpCall going around to get looping working */
        /* at all.                                                                */

        RetError(_swix(OS_Args,
                       _INR(0,2),

                       1,       /* Write file pointer */
                       s->open,
                       0));
      }

      /* Whether or not we're looping, tell the MPEG system to expect an */
      /* end of stream.                                                  */

      _swix(MPEGControl_Play,
            _INR(0,1),

            4,
            s->mpegid);
    }

    if (remaining >= Buffers_BlockSize) read = Buffers_BlockSize;
    else                                read = remaining;

    /* Get a block from the buffer manager */

    if (read > 0) buf = buffers_claim_bs_buffer(s, read + sizeof(bs_buffer));

    if (buf != NULL)
    {
      char * bptr = ((char *) buf) + sizeof(bs_buffer);

      #ifdef FAST

        buf->bs_next          = NULL;                   /* We don't use this, the MPEG software does        */
        buf->bs_handle        = (int) mpeg_entry;       /* Address of direct call routine                   */
        buf->bs_flags         = (int) module_wsp;       /* Value for R12 on entry to routine                */
        buf->bs_offset        = bptr;                   /* Pointer to data payload                          */
        buf->bs_len           = read;                   /* We rely on this being intact at all times        */
        buf->bs_packets       = (1u<<31);               /* Flag that we're using an extended interface      */
        buf->bs_stream_handle = s->mpegid;              /* Required as part of the new interface            */
        buf->bs_session       = s;                      /* Essential for us rather than the MPEG software   */

      #else

        buf->bs_next          = NULL;                   /* We don't use this, the MPEG software does.       */
        buf->bs_handle        = 0;                      /* If zero, flags = SWI to call...                  */
        buf->bs_flags         = LVFGeneric_EmptyBuffer; /* ...so call LVFGeneric_EmptyBuffer please.        */
        buf->bs_offset        = bptr;                   /* Pointer to data payload                          */
        buf->bs_len           = read;                   /* We rely on this being intact at all times.       */
        buf->bs_packets       = (1u<<31);               /* Flag that we're using an extended interface      */
        buf->bs_stream_handle = s->mpegid;              /* Required as part of the new interface            */
        buf->bs_session       = s;                      /* Essential for us rather than the MPEG software   */

      #endif

      /* Read a chunk */

      RetError(_swix(OS_GBPB,
                     _INR(0,3),

                     4,
                     s->open,
                     buf->bs_offset,
                     read));

      /* Send it to the MPEG software */

      #ifdef FAST

        mpeg_rx_direct(0, buf);

      #else

        RetError(_swix(MPEGControl_FullBuffers,
                       _INR(0,2),

                       1, /* 1 -> understand 'new' MPEGTrans with stream handle field in bs_buffer */
                       s->mpegid,
                       buf));
      #endif
    }
  }

  /* Set a new callback if required. Errors generated by SWIs   */
  /* above should always exit prior to this, to avoid a cascade */
  /* of repeating error reports.                                */

  if (another && s->running == 0)
  {
    s->running = 1;
    timeout(lvfctrl_callout_handler, s, LVFCtrl_CalloutDelay);
  }

  /* ...and this should never happen, but you can't be too careful... */

  else if (!another && s->running != 0)
  {
    /* 'running' is non-zero meaning a callout is already set somehow, but */
    /* 'another' is false, so stop that callout.                           */

    s->running = 0;
    untimeout(lvfctrl_callout_handler, s);
  }

  return NULL;
}
