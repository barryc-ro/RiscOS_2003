/**************************************************************/
/* File:    URLutils.c                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: URL manipulation.                                 */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 06-Feb-1997 (ADH): Created.                       */
/*          11-Nov-1999 (ADH): Imported fragment to Video     */
/*                             Control.                       */
/*          30-Nov-1999 (ADH): Imported to RTSP OVS.          */
/*          17-Mar-2000 (ADH): Fixed version returned to      */
/*                             SVB Generic.                   */
/*          01-Jun-2000 (ADH): Imported to LVF Generic.       */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Generic.h"
#include "Utils.h"
#include "URLveneer.h"
#include "URLutils.h"

/* Local definitions */

#define ExtensionMatches(url, len, ext) (len) > strlen(ext) && !strncmp((url) + (len) - strlen(ext), (ext), strlen(ext))

/* Fit within VideoControl's URL_Fetcher derived namings */
/* - these are all in Generic.[c|h] rather than Utils.   */

#define utils_strdup      Strdup
#define utils_strndup     Strndup
#define utils_strcasecmp  Strcmp_ci
#define utils_strncasecmp Strncmp_ci

/**************************************************************/
/* urlutils_urlsscmp()                                        */
/*                                                            */
/* Compares two URLs, returning 1 if they differ or 0 if they */
/* are the same. Both URLs are converted internally to        */
/* url_descriptions.                                          */
/*                                                            */
/* Parameters: Pointer to a null terminated URL string;       */
/*                                                            */
/*             Pointer to a second null terminated URL        */
/*             string.                                        */
/*                                                            */
/* Returns:    0 if the URLs match, else 1.                   */
/**************************************************************/

int urlutils_urlsscmp(const char * url_s1, const char * url_s2)
{
  url_description * url_d1;
  url_description * url_d2;
  int               result;

  /* Sanity check */

  if (!url_s1 && !url_s2) return 0;
  if (!url_s1 || !url_s2) return 1;

  urlutils_return_description(url_s1, &url_d1);
  urlutils_return_description(url_s2, &url_d2);

  if (url_d1 && url_d2)
  {
    result = !!strcmp(url_d1->full, url_d2->full);
  }

  /* No memory, no brain. Hey ho. */

  else result = !!strcmp(url_s1, url_s2);

  urlutils_free_description(url_d1);
  urlutils_free_description(url_d2);

  return result;
}

/**************************************************************/
/* urlutils_urldscmp()                                        */
/*                                                            */
/* Compares two URLs, returning 1 if they differ or 0 if they */
/* are the same. The first URL is specified as a              */
/* url_description, the second URL is converted internally.   */
/*                                                            */
/* Parameters: Pointer to a url_description filled in with    */
/*             the URL details;                               */
/*                                                            */
/*             Pointer to a second null terminated URL        */
/*             string.                                        */
/*                                                            */
/* Returns:    0 if the URLs match, else 1.                   */
/**************************************************************/

int urlutils_urldscmp(const url_description * url_d, const char * url_s)
{
  url_description * url_d2;
  int               result;

  /* Sanity check */

  if (!url_d)                 return 1;
  if (!url_s && !url_d->full) return 0;
  if (!url_s || !url_d->full) return 1;

  urlutils_return_description(url_s, &url_d2);

  if (url_d && url_d2)
  {
    result = !!strcmp(url_d->full, url_d2->full);
  }
  else result = !!strcmp(url_d->full, url_s);

  urlutils_free_description(url_d2);

  return result;
}

/**************************************************************/
/* urlutils_urldscmp()                                        */
/*                                                            */
/* Compares two URLs, returning 1 if they differ or 0 if they */
/* are the same. Both URLs are specified as url_description   */
/* structures.                                                */
/*                                                            */
/* Parameters: Pointer to a url_description filled in with    */
/*             the URL details;                               */
/*                                                            */
/*             Another url_description pointer, filled in     */
/*             with the details of a second URL.              */
/*                                                            */
/* Returns:    0 if the URLs match, else 1.                   */
/**************************************************************/

int urlutils_urlddcmp(const url_description * url_d1, const url_description * url_d2)
{
  /* Sanity check */

  if (!url_d1 && url_d2)  return 1;
  if (!url_d2 && url_d1)  return 1;
  if (!url_d1 && !url_d2) return 0;

  if (!url_d1->full && !url_d2->full) return 0;
  if (!url_d1->full || !url_d2->full) return 1;

  return !!strcmp(url_d1->full, url_d2->full);
}

/**************************************************************/
/* urlutils_return_description()                              */
/*                                                            */
/* Given a URL string, returns a url_description structure    */
/* which contains more accessible details on the URL          */
/* contents.                                                  */
/*                                                            */
/* The block itself and all filled in fields are allocated    */
/* with malloc(), and any additions to the structure should   */
/* be allocated in the same way.                              */
/*                                                            */
/* Parameters: Pointer to a NUL terminated URL string;        */
/*                                                            */
/*             Pointer to url_description * updated on exit,  */
/*             will be NULL for out of memory or any internal */
/*             error (returned directly).                     */
/**************************************************************/

_kernel_oserror * urlutils_return_description(const char * url_s, url_description ** url_d)
{
  _kernel_oserror * e = NULL;
  url_description * ndes;

  size_t            rlen;
  char *            tlen;
  int               plen;

  if (!url_s || !*url_s || !url_d) return NULL;
  *url_d = NULL;

  /* Allocate the structure */

  ndes = calloc(1, sizeof(url_description));
  if (!ndes) return NULL;

  /* Find the item lengths */

  e = _swix(URL_ParseURL,
            _INR(0,5),

            URL_ParseURL_LengthInR5 | URL_ParseURL_HexEscape,
            URL_ParseURL_Reason_FindLengths,
            url_s,
            NULL,
            ndes,
            sizeof(url_description) / sizeof(int));

  if (e != NULL) goto urlutils_return_description_free_and_exit;

  /* Expect the canonicalised form at the very least; ndes->full on */
  /* return from the SWI holds the buffer length required for this  */

  if (!ndes->full) goto urlutils_return_description_free_and_exit;

  /* Allocate a block to hold all of the fields */

  rlen = (int) ndes->full     +
         (int) ndes->protocol +
         (int) ndes->host     +
         (int) ndes->port     +
         (int) ndes->user     +
         (int) ndes->password +
         (int) ndes->account  +
         (int) ndes->path     +
         (int) ndes->query    +
         (int) ndes->fragment;

  if (!rlen) goto urlutils_return_description_free_and_exit;

  tlen       = (char *) ndes->full;
  ndes->full = malloc(rlen);
  if (!ndes->full) goto urlutils_return_description_free_and_exit;

  tlen      += (int) ndes->full;

  if (ndes->protocol) plen = (int) ndes->protocol, ndes->protocol = tlen, tlen += plen;
  if (ndes->host)     plen = (int) ndes->host,     ndes->host     = tlen, tlen += plen;
  if (ndes->port)     plen = (int) ndes->port,     ndes->port     = tlen, tlen += plen;

  if (ndes->user)     plen = (int) ndes->user,     ndes->user     = tlen, tlen += plen;
  if (ndes->password) plen = (int) ndes->password, ndes->password = tlen, tlen += plen;
  if (ndes->account)  plen = (int) ndes->account,  ndes->account  = tlen, tlen += plen;

  if (ndes->path)     plen = (int) ndes->path,     ndes->path     = tlen, tlen += plen;

  if (ndes->query)    plen = (int) ndes->query,    ndes->query    = tlen, tlen += plen;
  if (ndes->fragment) ndes->fragment = tlen;

  /* Fill in the block */

  e = _swix(URL_ParseURL,
            _INR(0,5),

            URL_ParseURL_LengthInR5 | URL_ParseURL_HexEscape,
            URL_ParseURL_Reason_FillBuffers,
            url_s,
            NULL,
            ndes,
            sizeof(url_description) / sizeof(int));

  if (e != NULL)
  {
    goto urlutils_return_description_free_and_exit;
  }

  /* Finished */

  *url_d = ndes;

  return NULL;

  /* Error condition exit routine */

urlutils_return_description_free_and_exit:

  urlutils_free_description(ndes);
  return e;
}

/**************************************************************/
/* urlutils_free_description()                                */
/*                                                            */
/* Frees a url_description and all memory associated with it. */
/*                                                            */
/* The function expects all filled in fields in the structure */
/* to point to malloced blocks, as this is the way that       */
/* urlutils_return_description allocates it.                  */
/*                                                            */
/* Parameters: Pointer to a url_description structure.        */
/**************************************************************/

void urlutils_free_description(url_description * url_d)
{
  /* Not the most demanding code in the world, really */

  if (url_d == NULL) return;

  free(url_d->full);
  free(url_d);

  return;
}

/**************************************************************/
/* urlutils_matches_special()                                 */
/*                                                            */
/* Given a URL description and a string with a comma          */
/* separated list of entries describing match parameters,     */
/* return 1 if the URL meets any of the match criteria. The   */
/* match string should be in a writeable buffer and will be   */
/* corrupted on exit. The string consists of:                 */
/*                                                            */
/* 1. An optional hostname; either fully qualified (e.g.      */
/*    'wwww.acorn.com') or partially if starting with a dot   */
/*    (e.g. .acorn.com' to match any host with a name ending  */
/*    in '.acorn.com').                                       */
/*                                                            */
/* 2. An optional port following the host name, separated by  */
/*    a colon (e.g. 'www:3172'). Note that specifying the     */
/*    default port for whatever fetch protocol is in use will */
/*    never match (e.g. 'www:80' would never match for an     */
/*    HTTP fetch of server 'www') so this is only useful for  */
/*    matching unusual port values.                           */
/*                                                            */
/* 3. An optional path fragment, which is matched against the */
/*    left hand side of the URL (e.g. 'www/this/that' would   */
/*    match any path 'this/that', 'this/that/more',           */
/*    'this/thatandmore.gif', etc.).                          */
/*                                                            */
/* Parameters: Pointer to a url_description filled in with    */
/*             details of the URL to examine;                 */
/*                                                            */
/*             Pointer to a string with the match parameters  */
/*             in it, comma separated if many are needed,     */
/*             which must be in a writeable buffer.           */
/*                                                            */
/* Returns:    1 if there's a match, else 0. The given match  */
/*             string is corrupted.                           */
/**************************************************************/

int urlutils_matches_special(const url_description * d, char * writeable)
{
  if (d && writeable)
  {
    char * at;

    char * host = d->host ? d->host : "";
    char * path = d->path ? d->path : "";
    char * port = d->port ? d->port : "";

    do
    {
      /* Get each comma separated section individually */

      at = strtok(writeable, ","), writeable = NULL;

      if (at)
      {
        char * slash = strchr(at, '/');
        char * colon = strchr(at, ':');

        int    match = 0;

        /* Overwrite key seperator characters with terminators to make */
        /* subsequent comparisons easier                               */

        if (colon) *colon = '\0', colon++;
        if (slash) *slash = '\0', slash++;

        /* Match port and left hand side of path if required */

        if (!colon) match++;
        else if (!utils_strcasecmp(port, colon)) match++;

        if (!slash) match++;
        else if (!utils_strncasecmp(path, slash, strlen(slash))) match++;

        /* Allow no host (so just match by port or path) */

        if (!*at && (colon || slash)) match++;

        /* Otherwise, do host matching */

        else if (*at)
        {
          /* Compare only the right hand side */

          if (*at == '.')
          {
            int hlen   = strlen(host);
            int offset = hlen - strlen(at);

            if (offset >= 0 && !utils_strcasecmp(host + offset, at)) match++;
          }

          /* Compare the whole thing */

          else
          {
            if (!utils_strcasecmp(host, at)) match++;
          }
        }

        /* Did we match it? */

        if (match == 3) return 1;

        /* No, so restore the string so strtok will continue to work */

        if (slash) *(--slash) = '/';
        if (colon) *(--colon) = ':';
      }
    }
    while (at);
  }

  return 0;
}

/**************************************************************/
/* urlutils_translate_pathname()                              */
/*                                                            */
/* Takes a RISC OS-style pathname and turns it into a         */
/* Unix-style pathname, or vice versa.                        */
/*                                                            */
/* The pathname you give is altered directly, so if you want  */
/* to remember the path before translation, ensure there is a */
/* second copy of in another buffer somewhere.                */
/*                                                            */
/* Parameters: Pointer to the pathname.                       */
/**************************************************************/

void urlutils_translate_pathname(char * path)
{
  char * p;

  p = path;

  /* Skip past any filing system separators (e.g. as in the */
  /* colons in 'ADFS::<disc>.<path>').                      */

  while (*p && *p != ':') p++;

  /* Swap '/' for '.' */

  while (*p)
  {
    if      (*p == '/') *p = '.';
    else if (*p == '.') *p = '/';

    p++;
  }

  return;
}
