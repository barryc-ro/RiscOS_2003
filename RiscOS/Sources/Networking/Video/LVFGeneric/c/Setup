/**************************************************************/
/* File:    Setup.c                                           */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Implement LVFGeneric_Setup.                       */
/*                                                            */
/* Author:  A.D.Hodgkinson. Based on URL_Fetcher source by    */
/*          S.N.Brodie and P. Wain.                           */
/*                                                            */
/* History: 01-Jun-2000 (ADH): Imported to LVF Generic.       */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#include <swis.h>
#include <socklib.h>
#include <inetlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <VideoCtrl.h> /* Exported by VideoCtrl's !MkExport */

#include "Buffers.h"
#include "CallOut.h"
#include "Generic.h"
#include "Headers.h"
#include "LVFGErrors.h"
#include "Module.h"
#include "Parameters.h"
#include "Response.h"
#include "Session.h"
#include "Status.h"
#include "URLutils.h"
#include "Utils.h"

#include "Setup.h"

/* Local functions */

static unsigned int      setup_determine_buffer_size (session * s);
static _kernel_oserror * setup_read_loop_option      (session * s, unsigned int vcid);

/**************************************************************/
/* setup_setup()                                              */
/*                                                            */
/* Implement LVFGeneric_Setup. See the Video Control          */
/* specification, 2501,817/FS, for more.                      */
/**************************************************************/

_kernel_oserror * setup_setup(_kernel_swi_regs * r)
{
  _kernel_oserror * e;
  session         * s;
  char            * url;
  char            * port;
  bool              fail = false;

  dprintf(("", "setup_setup: Called\n"));

  /* Just in case, make sure we're not already set up */

  if (session_find_by_id(r->r[1]) != NULL)
  {
    dprintf(("", "setup_setup: Already set up\n"));
    return make_error(lvfgeneric_ERROR_ALREADY_SETUP, 0);
  }

  /* Gain ourselves a session */

  e = session_new_session(&s);

  if (e != NULL)
  {
    dprintf(("", "setup_setup: session_new_session error '%s'\n", e->errmess));
    return e;
  }

  if (s == NULL)
  {
    dprintf(("", "setup_setup: Out of memory\n"));
    return make_error(lvfgeneric_ERROR_MEMORY_EXHAUSTED, 0);
  }

  s->id   = (unsigned int) s;
  s->vcid = (unsigned int) r->r[1];

  /* Need to ask Video Control what the current loop setting is */

  e = setup_read_loop_option(s, s->vcid);

  if (e != NULL)
  {
    dprintf(("", "setup_setup: Error '%s' from setup_read_loop_option\n", e->errmess));
    session_free_item(s);
    return e;
  }

  /* Fill in the new item */

  if (r->r[2] != 0) url = (char *) r->r[2];
  else              url = "";

  e = urlutils_return_description(url, &s->url);

  if (e != NULL)
  {
    dprintf(("", "setup_setup: Error '%s' from urlutils_return_description\n", e->errmess));
    session_free_item(s);
    return e;
  }

  if (s->url == NULL) fail = true;

  /* Add the SETUP command */

  else if (
            headers_add_header(&s->headers,
                               Headers_CommandName_Setup,
                               s->url->full)
            == NULL
          )
          fail = true;

  /* We don't use anything nice like AEN, deadlinetastic */

  else if (
            headers_add_header(&s->headers,
                               Headers_HeaderName_Connection,
                               Headers_HeaderValue_Connection)
            == NULL
          )
          fail = true;

  /* Add sequence number and OVS "prepare assets" command to avoid DESCRIBE */

  else if (headers_add_sequence_header(&s->headers) == NULL) fail = true;

  else if (
            headers_add_header(&s->headers,
                               Headers_HeaderName_Prepare,
                               Headers_HeaderValue_Prepare)
            == NULL
          )
          fail = true;

  else
  {
    /* Get extra data from the client and store it. First, */
    /* the optional Transport entry.                       */

    if (r->r[3] != 0)
    {
      if (
           headers_add_header(&s->headers,
                              Headers_HeaderName_Transport,
                              (const char *) r->r[3])
           == NULL
         )
         fail = true;
    }

    /* Any extra stuff? */

    if (!fail && r->r[4] != 0)
    {
      headers_parse_user_header((char *) r->r[4], strlen((char *) r->r[4]), s);
    }

    /* R5 and R6 (body data) not supported here, so nothing to do for those */
  }

  /* Did anything fail (out of memory)? */

  if (fail)
  {
    dprintf(("", "setup_setup: Out of memory\n"));
    session_free_item(s);
    return make_error(lvfgeneric_ERROR_MEMORY_EXHAUSTED, 0);
  }

  if (s->url->port && *s->url->port) port = s->url->port;
  else                               port = NULL;

  s->cip   = CIP_Setup;
  s->last  = utils_read_time();
  s->state = protostate_CONNECTED;

  /* Work out the buffer size */

  s->carrier.bufsize = setup_determine_buffer_size(s);

  /* Set the state machine going to see errors and DNS stuff. The call */
  /* to session_reset_session should've cleared the callout but it     */
  /* never hurts to be sure (in future maybe stuff could go on in the  */
  /* background that could have set a callout between the reset and    */
  /* this part of the code).                                           */

  if (s->callout_set == 0)
  {
    s->callout_set = 1;
    timeout(status_proceed_on_callout, s, Session_State_Timer);
  }

  /* Don't forget to tell Video Control about our session handle */
  /* before returning                                            */

  r->r[1] = (int) s;

  return NULL;
}

/**************************************************************/
/* setup_determine_buffer_size()                              */
/*                                                            */
/* Work out how big the buffer is meant to be by checking for */
/* a recognised parameter in the query string.                */
/*                                                            */
/* Parameters: Pointer to the session to examine.             */
/**************************************************************/

static unsigned int setup_determine_buffer_size(session * s)
{
  char * value = parameters_find_item(s->url->query, Parameters_BufferSize);

  if (value != NULL)
  {
    char         type   = value[strlen(value) - 1];
    unsigned int amount = atoi(value);

    free(value);

    if      (type == 'k' || type == 'K') amount *= 0x400;
    else if (type == 'm' || type == 'M') amount *= 0x100000;
    else if (type == 'g' || type == 'G') amount *= 0x40000000;

    if (amount != 0) return amount;
  }

  return Buffers_BufferSize;
}

/**************************************************************/
/* setup_read_loop_option()                                   */
/*                                                            */
/* Find out whether looping is switched on using              */
/* VideoControl_Options and write the result into the given   */
/* session's 'loop' field.                                    */
/*                                                            */
/* Parameters: Pointer to a session struct to update;         */
/*                                                            */
/*             Video Control client ID to use.                */
/**************************************************************/

static _kernel_oserror * setup_read_loop_option(session * s, unsigned int vcid)
{
  _kernel_oserror * e;
  int               opts[4];

  opts[0] = vc_tags_looping;
  opts[1] = 1;
  opts[2] = 0;
  opts[3] = vc_tags__end;

  e = _swix(VideoControl_ProtocolOptions,
            _INR(0,2),

            0,
            vcid,
            opts);

  if (e == NULL) s->loop = !!opts[2];

  return e;
}
