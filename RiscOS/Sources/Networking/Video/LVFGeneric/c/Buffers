/**************************************************************/
/* File:    Buffers.c                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Buffer management.                                */
/*                                                            */
/* Author:  Andrew Hodgkinson.                                */
/*                                                            */
/* History: 02-Jun-2000 (ADH): Imported from UDPV.            */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include <swis.h>

#include <sys/types.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Session.h"

#include "Buffers.h"

#ifdef TRACE
  #include <string.h>
#endif

/**************************************************************/
/* buffers_allocate_main_buffer()                             */
/*                                                            */
/* Allocate and initialise the buffer system for a given      */
/* session. No action is taken if there's already a buffer.   */
/*                                                            */
/* Parameters: Pointer to session to take buffer.             */
/*                                                            */
/* Returns:    1 for success, 0 for failure.                  */
/**************************************************************/

int buffers_allocate_main_buffer(session * s)
{
  dprintf(("", "buffers_allocate_main_buffer: Called\n"));

  if (s->carrier.buffer != NULL) return 1; /* Already have one */

  s->carrier.buffer = calloc(s->carrier.bufsize, 1);
  if (s->carrier.buffer == NULL) return 0;

  s->carrier.start      = 0;
  s->carrier.end        = 0;
  s->carrier.high_water = s->carrier.bufsize;
  s->carrier.empty      = true;

  return 1;
}

/**************************************************************/
/* buffers_free_main_buffer()                                 */
/*                                                            */
/* Release memory claimed for the buffer system.              */
/*                                                            */
/* Parameters: Pointer to session holding buffer.             */
/**************************************************************/

void buffers_free_main_buffer(session * s)
{
  dprintf(("", "buffers_free_main_buffer: Called\n"));

  free(s->carrier.buffer), s->carrier.buffer = NULL;
}

/**************************************************************/
/* buffers_claim_bs_buffer()                                  */
/*                                                            */
/* Get a pointer to a bs_buffer plus extra space totalling a  */
/* requested size in bytes. The 'marker' field of the struct  */
/* is set to 1 to mark the item as in us. The amount you      */
/* ask for should include the bs_buffer structure size.       */
/*                                                            */
/* Parameters: Pointer to session for main buffer;            */
/*                                                            */
/*             Size of block required (must be > zero).       */
/*                                                            */
/* Returns:    Pointer to the block, or NULL if the buffer is */
/*             full.                                          */
/**************************************************************/

bs_buffer * buffers_claim_bs_buffer(session * s, size_t size)
{
  unsigned int   end_record;
  bool           wrapped;
  bs_buffer    * bsb;
  int            irqs = _kernel_irqs_disabled();

  _kernel_irqs_off();

  end_record = s->carrier.end;
  wrapped    = s->carrier.end <= s->carrier.start ? !s->carrier.empty : false;

  /* Round up to a whole word */

  size = WordAlign(size);

  dprintf(("", "buffers_claim_bs_buffer: Allocating %d, start = %d, end = %d\n",size,s->carrier.start,s->carrier.end));

  /* One easy to spot overrun condition */

  if (wrapped && s->carrier.end == s->carrier.start) goto buffers_claim_bs_buffer_fail;

  /* Advance 'end' offset accordingly */

  s->carrier.end += size;

  /* Would this packet drop off th«e end of the buffer? If so wrap */
  /* back to the start                                            */

  if (s->carrier.end > s->carrier.bufsize)
  {
    s->carrier.high_water = end_record, end_record = 0, s->carrier.end = size, wrapped = true;
  }

  /* If the end offset is above the start offset but we wrapped */
  /* around (i.e. filling the buffer from the buttom), it must  */
  /* be full.                                                   */

  if (wrapped && s->carrier.end > s->carrier.start) goto buffers_claim_bs_buffer_fail;

  /* Success */

  dprintf(("", "buffers_claim_bs_buffer: End moved from %d to %d, returning %p\n",end_record,s->carrier.end,s->carrier.buffer + end_record));

  bsb            = (bs_buffer *) (s->carrier.buffer + end_record);
  bsb->bs_marker = 1;

  if (s->carrier.end > s->carrier.high_water) s->carrier.high_water = s->carrier.end;
  if (s->carrier.empty)                       s->carrier.empty      = false;

  if (!irqs) _kernel_irqs_on();
  return bsb;

buffers_claim_bs_buffer_fail:

  dprintf(("", "buffers_claim_bs_buffer: Buffer full\n"));

  s->carrier.end = end_record;

  if (!irqs) _kernel_irqs_on();
  return NULL;
}

/**************************************************************/
/* buffers_release_bs_buffer()                                */
/*                                                            */
/* Free a pointer given from buffers_claim_bs_buffer().       */
/*                                                            */
/* Parameters: Pointer to the block to free.                  */
/*                                                            */
/* Returns:    1 for success, 0 for failure (e.g. invalid     */
/*             pointer).                                      */
/**************************************************************/

_kernel_oserror * buffers_release_bs_buffer(bs_buffer * ptr)
{
  session * s;
  int       irqs = _kernel_irqs_disabled();

  _kernel_irqs_off();

  if ((ptr != NULL) && ((s = ptr->bs_session) != NULL))
  {
    int offset = ((unsigned int) ptr) - ((unsigned int) s->carrier.buffer);

    /* TRACE builds perform extra checking on the supplied pointer */

    #ifdef TRACE

      dprintf(("", "buffers_release_bs_buffer: free %p\n", ptr));

      /* Is the item in the buffer? */

      if (offset < 0 || offset >= s->carrier.bufsize)
      {
        dprintf(("", "buffers_release_bs_buffer: %d is illegal (out of range)\n", offset));

        if (!irqs) _kernel_irqs_on();
        return NULL;
      }

      /* Is the item in a totally free area? */

      else if (
                s->carrier.start < s->carrier.end &&
                (
                  offset <  s->carrier.start ||
                  offset >= s->carrier.end
                )
              )
      {
        dprintf(("", "buffers_release_bs_buffer: %d is illegal (in the split free chunk)\n", offset));

        if (!irqs) _kernel_irqs_on();
        return NULL;
      }

      else if (
                s->carrier.start >  s->carrier.end   &&
                offset           <  s->carrier.start &&
                offset           >= s->carrier.end
              )
      {
        dprintf(("", "buffers_release_bs_buffer: %d is illegal (in the continguous free chunk)\n", offset));

        if (!irqs) _kernel_irqs_on();
        return NULL;
      }

      dprintf(("", "buffers_release_bs_buffer: %d is a legal block; start = %d, end = %d\n",offset,s->carrier.start,s->carrier.end));

    #endif

    /* Pointer is (assumed or checked as) legal, but is the area valid/used? */

    if (ptr->bs_marker != 1)
    {
      dprintf(("", "buffers_release_bs_buffer: %d is already free or not the base of a claimed region\n", offset));

      if (!irqs) _kernel_irqs_on();
      return NULL;
    }

    /* OK, this is a good area */

    ptr->bs_marker = 2; /* Mark it as freed */

    /* If we've freed at the bottom of the claimed region, scan up to */
    /* the next used part.                                            */

    if (offset == s->carrier.start)
    {
      unsigned int inc;

      while (ptr->bs_marker == 2)
      {
        inc               = sizeof(bs_buffer) + ptr->bs_len;
        inc               = WordAlign(inc);
        s->carrier.start += inc;
        ptr               = (bs_buffer *) (((unsigned int) ptr) + inc);

        /* The difference between runcount and releasecount tells you the */
        /* number of times offset != start above.                         */

        if (s->carrier.start == s->carrier.end)
        {
          dprintf(("", "buffers_release_bs_buffer: Buffer emptied (1)\n"));

          if (s->carrier.start != 0) s->carrier.start = s->carrier.end = 0;
          s->carrier.empty = true;
          break;
        }

        if (s->carrier.start >= s->carrier.high_water)
        {
          s->carrier.start = 0;
          ptr              = (bs_buffer *) s->carrier.buffer;

          if (s->carrier.start == s->carrier.end)
          {
            s->carrier.empty = true;
            break;
          }
        }
      }
    }

    /* If the buffer empties with restart pending, clear the restart lock */
    /* so LVFCtrl.c can get on with it                                    */

    if (s->restart != 0 && s->carrier.empty)
    {
      s->restart    = 0;
      s->restart_ok = 1;
    }

    dprintf(("", "buffers_release_bs_buffer: start now %d, end = %d\n",s->carrier.start,s->carrier.end));
  }

  if (!irqs) _kernel_irqs_on();
  return NULL;
}

// #ifdef TRACE
//
//   /**************************************************************/
//   /* buffers_show_stats()                                       */
//   /*                                                            */
//   /* Show statistics for buffer usage. Typically called for     */
//   /* *StrmInfo output. TRACE builds only. Note the use of the   */
//   /* locally defined BUFFER_DEBUG further down the code.        */
//   /**************************************************************/
//
//   void buffers_show_stats(void)
//   {
//     int            differential;
//     unsigned int   offset;
//     unsigned int   inc;
//     bs_buffer    * ptr;
//
//     dprintf(("", "\nStart: %d, end: %d, high: %d\n", s->carrier.start, s->carrier.end, s->carrier.high_water));
//
//     if (s->carrier.end >= s->carrier.start) differential = s->carrier.end - s->carrier.start;
//     else              differential = s->carrier.end + (s->carrier.bufsize - s->carrier.start);
//
//     if (s->carrier.end >= s->carrier.start) dprintf(("", "Differential: %d\n",         differential));
//     else              dprintf(("", "Differential: %d (split)\n", differential);
//
//     dprintf(("", "\nClaims: %d, releases: %d, run: %d, empty: %s\n", claimcount, releasecount, runcount, s->carrier.empty ? "yes" : "no"));
//     dprintf(("", "Alloc failures: %d, free failures: %d, %d, %d, %d\n",
//
//            allofail1,
//
//            freefail1,
//            freefail2,
//            freefail3,
//            freefail4);
//
//     /* Define BUFFER_DEBUG 1 for an on-one-line output, or BUFFER_DEBUG 2 */
//     /* for a two-line output. The latter is only useful if the entire     */
//     /* buffer debug output fits on a single text line because the average */
//     /* stored chunk size is large enough.                                 */
//
//     #define BUFFER_DEBUG 0
//
//     /* Note that these routines are not accurate; ideally they'd work from */
//     /* the 'start' and 'end' variables. Since however those variables may  */
//     /* be invalid (that's possibly what we're trying to debug!) the        */
//     /* routine always starts at 0 and uses some rather weak end conditions */
//     /* for exit. Sometimes, then, you may see some garbage output tacked   */
//     /* onto the end of the actual buffer debug output and if packet sizes  */
//     /* vary much it may be completely wrong.                               */
//
//     #if BUFFER_DEBUG == 1
//
//       offset = 0;
//       dprintf(("", "\n"));
//
//       do
//       {
//         ptr = (bs_buffer *) (s->carrier.buffer + offset);
//         if (ptr->bs_len == 0) break;
//
//         if (offset == s->carrier.start)
//         {
//           if (ptr->bs_marker == 1)      _swix(OS_WriteC, _IN(0), 'S');
//           else if (ptr->bs_marker == 2) _swix(OS_WriteC, _IN(0), 's');
//           else                          _swix(OS_WriteC, _IN(0), '<');
//         }
//         else if (offset == s->carrier.end)
//         {
//           if (ptr->bs_marker == 1)      _swix(OS_WriteC, _IN(0), 'E');
//           else if (ptr->bs_marker == 2) _swix(OS_WriteC, _IN(0), 'e');
//           else                          _swix(OS_WriteC, _IN(0), '>');
//         }
//         else
//         {
//           if (ptr->bs_marker == 1)      _swix(OS_WriteC, _IN(0), '+');
//           else if (ptr->bs_marker == 2) _swix(OS_WriteC, _IN(0), '-');
//           else                          _swix(OS_WriteC, _IN(0), '.');
//         }
//
//         inc = sizeof(bs_buffer) + ptr->bs_len;
//         inc = WordAlign(inc);
//
//         offset += inc;
//       }
//       while (offset < s->carrier.bufsize);
//
//       dprintf(("", "\n"));
//
//     #elif BUFFER_DEBUG == 2
//
//       offset = 0;
//       dprintf(("", "\n"));
//
//       do
//       {
//         ptr = (bs_buffer *) (s->carrier.buffer + offset);
//         if (ptr->bs_len == 0) break;
//
//         if (offset == s->carrier.start)
//         {
//           if (ptr->bs_marker == 1)      _swix(OS_WriteC, _IN(0), 'S');
//           else if (ptr->bs_marker == 2) _swix(OS_WriteC, _IN(0), 's');
//           else                          _swix(OS_WriteC, _IN(0), '<');
//         }
//         else
//         {
//           if (ptr->bs_marker == 1)      _swix(OS_WriteC, _IN(0), '+');
//           else if (ptr->bs_marker == 2) _swix(OS_WriteC, _IN(0), '-');
//           else                          _swix(OS_WriteC, _IN(0), '.');
//         }
//
//         inc = sizeof(bs_buffer) + ptr->bs_len;
//         inc = WordAlign(inc);
//
//         offset += inc;
//       }
//       while (offset < s->carrier.bufsize);
//
//       offset = 0;
//       dprintf(("", "\n"));
//
//       do
//       {
//         ptr = (bs_buffer *) (s->carrier.buffer + offset);
//         if (ptr->bs_len == 0) break;
//
//         if (offset == s->carrier.end)
//         {
//           if (ptr->bs_marker == 1)      _swix(OS_WriteC, _IN(0), 'E');
//           else if (ptr->bs_marker == 2) _swix(OS_WriteC, _IN(0), 'e');
//           else                          _swix(OS_WriteC, _IN(0), '>');
//         }
//         else
//         {
//           _swix(OS_WriteC, _IN(0), ' ');
//         }
//
//         inc = sizeof(bs_buffer) + ptr->bs_len;
//         inc = WordAlign(inc);
//
//         offset += inc;
//       }
//       while (offset < s->carrier.bufsize);
//
//       dprintf(("", "\n"));
//
//     #else
//
//       (void) inc;
//       (void) ptr;
//       (void) offset;
//
//     #endif
//   }
//
// #endif
