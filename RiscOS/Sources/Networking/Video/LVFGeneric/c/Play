/**************************************************************/
/* File:    Play.c                                            */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Implement LVFGeneric_Play.                        */
/*                                                            */
/* Author:  A.D.Hodgkinson. Based on URL_Fetcher source by    */
/*          S.N.Brodie and P. Wain.                           */
/*                                                            */
/* History: 01-Jun-2000 (ADH): Imported to LVF Generic.       */
/*          06-Jun-2000 (ADH): Play rate control functions    */
/*                             imported from Video Control.   */
/**************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>
#include <math.h>

#include <swis.h>
#include <AsmUtils/modulefp.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <Global/SWIs.h>
#include <MPEG/MPEGCtrl.h>
#include <VideoCtrl.h>

#include "CallOut.h"
#include "Generic.h"
#include "Headers.h"
#include "LVFGErrors.h"
#include "Module.h"
#include "MPEGCtrl.h"
#include "Response.h"
#include "Session.h"
#include "Status.h"
#include "Utils.h"

#include "Play.h"

/* Local functions */

static int               play_find_speed (const char * rate);
static _kernel_oserror * play_set_speed  (session * s, const char * rate, unsigned int flags);

/**************************************************************/
/* play_play()                                                */
/*                                                            */
/* Implement LVFGeneric_Play. See the Video Control           */
/* specification, 2501,817/FS, for more.                      */
/**************************************************************/

_kernel_oserror * play_play(_kernel_swi_regs * r)
{
  session * s         = session_find_by_id(r->r[1]);
  bool      fail      = false;
  bool      slowmofwd = false; /* This is true for slowmo forward play     */
  bool      play      = true;  /* This is true for any non-pause play mode */
  bool      mpd_present;
  bool      restart;
  char    * port;
  char    * scale;

  dprintf(("", "play_play: Called\n"));

  if (s == NULL)
  {
    dprintf(("", "play_play: ID not found\n"));

    return make_error(lvfgeneric_ERROR_CLIENT_ID_NOT_FOUND, 0);
  }

  if (
       s->state == protostate_CONNECTED ||
       s->state == protostate_SENDING   ||
       s->state == protostate_RECEIVING ||
       s->state == protostate_PUMPING
     )
  {
    dprintf(("", "play_play: In progress\n"));

    return make_error(lvfgeneric_ERROR_IN_PROGRESS, 0);
  }

  if (s->server_session == NULL)
  {
    dprintf(("", "play_play: No server session\n"));

    return make_error(lvfgeneric_ERROR_NO_SERVER_SESSION, 0);
  }

  /* Can we do reduced data rate forwards slowmo? */

  if (
       _swix(OS_Module,
             _INR(0,1),

             18,
             ReducedRateSlowmoSupportModule) /* Play.h */

       != NULL
     )
     mpd_present = false;

  else mpd_present = true;

  /* For forwards slow-mo, we don't use Scale, we use Speed. You can */
  /* just deliver the data more slowly. OVS' slowmo with Scale is    */
  /* awful; using Speed gives a much better result.                  */

  scale = (char *) r->r[3];

  if (scale)
  {
    if (!strncmp(scale, "0.", 2) || *scale == '.') slowmofwd = true;
    else if (!strcmp(scale, "0"))                  play      = false;
  }

  /* If MPEGDriver isn't present, unset slowmofwd */

  if (mpd_present == false) slowmofwd = false;

  /* Ensure everything is reset for a new command */

  session_reset_session(s);

  /* Copy R3 away */

  s->play_record = Strdup(scale == NULL ? "" : scale);

  /* Start adding headers */

  if (s->play_record == NULL) fail = true;

  else if (
            headers_add_header(&s->headers,
                               play ? Headers_CommandName_Play : Headers_CommandName_Pause,
                               s->url->full)
            == NULL
          )
          fail = true;

  /* A sequence header */

  else if (headers_add_sequence_header(&s->headers) == NULL) fail = true;

  /* Range */

  else if (
            r->r[2] != 0 &&

            headers_add_header(&s->headers,
                               Headers_HeaderName_Range,
                               (char *) r->r[2])
            == NULL
          )
          fail = true;

  /* If we're not pausing, the playback rate - first, Scale playback (trick play) */

  else if (
            play          &&
            !slowmofwd    &&
            scale != NULL &&

            headers_add_header(&s->headers,
                               Headers_HeaderName_Scale,
                               scale)
            == NULL
          )
          fail = true;

  /* Second, Speed playback (alter data delivery rate, for slowmo forwards play) */

  else if (
            play          &&
            slowmofwd     &&
            scale != NULL && /* It should never be if slowmofwd is true, but just in case... */

            headers_add_header(&s->headers,
                               Headers_HeaderName_Speed,
                               scale)
            == NULL
          )
          fail = true;

  /* No AEN, so Connection: close */

  else if (
            headers_add_header(&s->headers,
                               Headers_HeaderName_Connection,
                               Headers_HeaderValue_Connection)
            == NULL
          )
          fail = true;

  /* Lastly, the session header */

  else if (
            headers_add_header(&s->headers,
                               Headers_HeaderName_Session,
                               s->server_session)
            == NULL
          )
          fail = true;

  /* Did anything fail? */

  if (fail)
  {
    dprintf(("", "play_play: Out of memory\n"));
    return make_error(lvfgeneric_ERROR_MEMORY_EXHAUSTED, 0);
  }

  /* Open a connection to send the command down */

  if (s->url->port && *s->url->port) port = s->url->port;
  else                               port = NULL;

  s->cip   = CIP_Play;
  s->last  = utils_read_time();
  s->state = protostate_CONNECTED;

  /* Set the state machine going to see errors and DNS stuff. The call */
  /* to session_reset_session should've cleared the callout but it     */
  /* never hurts to be sure (in future maybe stuff could go on in the  */
  /* background that could have set a callout between the reset and    */
  /* this part of the code).                                           */

  if (s->callout_set == 0)
  {
    s->callout_set = 1;
    timeout(status_proceed_on_callout, s, Session_State_Timer);
  }

  /* First time around there'll be no MPEG handle, so must not try  */
  /* anything until later. Besides, there's no concept of "restart" */
  /* if we haven't even started yet.                                */

  if (s->played != 0)
  {
    int start_pos;

    /* Do we restart (rewind) the stream or jump to a percentage position in it? */

    if (response_filter_range((const char *) r->r[2], &restart, &start_pos))
    {
      if (restart || start_pos > 0)
      {
        /* Flag if we're waiting for an empty buffer */

        s->restart_pos = restart ? 0 : start_pos;
        s->restart     = s->carrier.empty == false ? 1 : 0;
        s->restart_ok  = !s->restart;

        /* Reset the stream (not deferred) */

        _swix(MPEGControl_ResetStream,
              _INR(0,2),

              ResetStreamFlags_VideoPresent | ResetStreamFlags_AudioPresent,
              s->mpegid,
              s->lastplay);
      }
    }
  }
  else s->played = 1;

  /* Data rate changes are prepared for in status_proceed_completed. */

  dprintf(("", "play_play: Successful\n"));

  return NULL;
}

/**************************************************************/
/* play_alter_playback_characteristics()                      */
/*                                                            */
/* Prime the MPEG software for a change in the existing       */
/* stream.                                                    */
/*                                                            */
/* Parameters: Pointer to the session struct for the stream   */
/*             in question;                                   */
/*                                                            */
/*             Pointer to a string holding the new Scale /    */
/*             Speed value that the stream will change to.    */
/*                                                            */
/* Assumes:    Pointers are non-NULL and valid, and the       */
/*             session struct does represent a stream (so     */
/*             Setup has occurred etc., lastplay is filled in */
/*             even if we've not started playing yet).        */
/**************************************************************/

_kernel_oserror * play_alter_playback_characteristics(session * s, const char * r3)
{
  const char * rate;
  int          type, old_type;
  bool         mpd_present;

  dprintf(("", "play_alter_playback_characteristics: Called for %08X / '%s'\n", s, r3));

  /* Can we handle the speed at all? */

  if (!response_filter_speed(r3)) return NULL;

  /* Work out our play mode from the rate string */

  rate = r3 ? r3 : "1";
  type = play_process_speed(rate);

  /* Our reset behaviour depends on MPEGDriver being here */

  if (
       _swix(OS_Module,
             _INR(0,1),

             18,
             ReducedRateSlowmoSupportModule) /* Play.h */

       != NULL
     )
     mpd_present = false;

  else mpd_present = true;

  /* Note we don't record entering a paused state, so that on exit */
  /* from the state we can see if the play mode prior to pausing   */
  /* matches the mode afterwards.                                  */

  old_type = s->lastplay;
  if (type != MPEGCtrl_MCRS_Trick_Freeze) s->lastplay = type;

  /* If we're entering a paused state, set the speed immediately */

  if (type == MPEGCtrl_MCRS_Trick_Freeze)
  {
    RetError(_swix(MPEGControl_SetSpeed,
                   _INR(0,2),

                   0,
                   s->mpegid,
                   0));
  }

  /* Otherwise, life is more complicated... */

  else
  {
    /* For entering any slow motion forwards play, and if we can do reduced */
    /* data rate slowmo forwards, then provided we're in a forwards play    */
    /* mode at or less than 1x normal speed (including pause) just set the  */
    /* speed (deferred). Under any other circumstances, set speed & reset.  */

    if (
         mpd_present == true &&
         (
           type == MPEGCtrl_MCRS_Trick_SFWD  ||
           type == MPEGCtrl_MCRS_Trick_Play
         )
         &&
         (
           old_type == MPEGCtrl_MCRS_Trick_SFWD   ||
           old_type == MPEGCtrl_MCRS_Trick_Play
         )
         &&
         (
           type != MPEGCtrl_MCRS_Trick_Play ||
           type != old_type
         )
       )
    {
      /* In LVFGeneric, we never defer set speed as the data delivery  */
      /* rate never changes and is designed to keep the buffer as full */
      /* as possible without actually overrunning (we have complete    */
      /* control of data delivery based on consumption rates).         */

      RetError(play_set_speed(s, rate, 0)); /* Would be deferred, but not for files */
    }

    /* If we were (before possibly pausing) and are [going to] normal */
    /* forwards play, just do an immediate set speed.                 */

    else if (type == old_type && type == MPEGCtrl_MCRS_Trick_Play)
    {
      RetError(_swix(MPEGControl_SetSpeed,
                     _INR(0,2),

                     0,
                     s->mpegid,
                     1));
    }

//
//
//  06-Jun-2000: Presently, none of the below should ever execute since all play
//               mode transitions that LVFGeneric can only do are handled above.
//
//               The code is kept in case anybody decides to support true trick
//               play inside the module...
//
//  08-Sep-2000: Bear in mind that as this code gets older it stands a greater
//               change of becoming out of date. If reenabling this section, it
//               would be wise to check against the equivalent code in Video
//               Control (currently, a function of the same name sitting in
//               VideoCtrl/Play.c).
//
//
//
//  /* For any other transition, reset and set speed. The reset is deferred */
//  /* and it's up to the decoder to defer the speed change if it wants.    */
//  /* Hopefully it will...                                                 */
//
//  else
//  {
//    unsigned int mpf;
//
//    mpf = ResetStreamFlags_VideoPresent |
//          ResetStreamFlags_DeferReset;
//
//    /* If we're doing trick play, flag that that the new stream should */
//    /* be marked as such. Otherwise, flag that we expect audio data.   */
//
//    if (type != MPEGCtrl_MCRS_Trick_Play)
//    {
//      mpf |= ResetStreamFlags_TrickPlayMode;
//    }
//    else
//    {
//      mpf |= ResetStreamFlags_AudioPresent;
//    }
//
//    /* OK, reset the stream (deferred) */
//
//    RetError(_swix(MPEGControl_ResetStream,
//                   _INR(0,2),
//
//                   mpf,
//                   s->mpegid,
//                   type));
//
//    /* If we reach here in slow motion forwards play, we should do a  */
//    /* set speed after the reset (this time, not deferred). Similarly */
//    /* for reverse play.                                              */
//
//    if (
//         mpd_present == true &&
//         (
//           type == MPEGCtrl_MCRS_Trick_SRWD ||
//           type == MPEGCtrl_MCRS_Trick_SFWD
//         )
//       )
//    {
//      RetError(play_set_speed(s, rate, 0));
//    }
//
//    /* Otherwise, set speed to 1 - just want simply trick play, nothing special */
//
//    else
//    {
//      RetError(_swix(MPEGControl_SetSpeed,
//                     _INR(0,2),
//
//                     0,
//                     s->mpegid,
//                     1));
//    }
//  }
  }

  return NULL;
}

/**************************************************************/
/* play_process_speed()                                       */
/*                                                            */
/* Process a string which should contain a number which may   */
/* be negative or a decimal fraction, e.g. "-0.4", "55",      */
/* ".4" but not (say) "1/3" or "    65".                      */
/*                                                            */
/* Parameters: Pointer to the string. If NULL, "1" is used.   */
/*                                                            */
/* Returns:    An int containing an indication of play mode   */
/*             within the string; see MPEGCtrl.h.             */
/**************************************************************/

int play_process_speed(const char * speed)
{
  int type;

  if (speed == NULL || *speed == '\0') speed = "1";

  if      (!strcmp(speed, "1")) type = MPEGCtrl_MCRS_Trick_Play;
  else if (!strcmp(speed, "0")) type = MPEGCtrl_MCRS_Trick_Freeze;

  else if (strstr(speed, "0.") != NULL)
  {
    if (*speed == '-')          type = MPEGCtrl_MCRS_Trick_SRWD;
    else                        type = MPEGCtrl_MCRS_Trick_SFWD;
  }
  else if (*speed == '-')       type = MPEGCtrl_MCRS_Trick_FRWD;
  else                          type = MPEGCtrl_MCRS_Trick_FFWD;

  return type;
}

/**************************************************************/
/* play_find_speed()                                          */
/*                                                            */
/* Given a string holding a decimal fraction, find the lowest */
/* integer for 1/<that_fraction>. If the string indicates a   */
/* negative number the sign is ignored.                       */
/*                                                            */
/* Must only be used after modulefp_enable has been called.   */
/*                                                            */
/* Parameters: Pointer to the NUL terminated rate string.     */
/*                                                            */
/* Returns:    Lowest int for 1/fraction.                     */
/**************************************************************/

static int play_find_speed(const char * rate)
{
  double d = atof(rate);
  int    speed;

  if      (d < 0)  d = -d;
  else if (d == 0) d = 1;

  speed = (int) floor(1 / d);
  if (speed > MPEGCtrl_MCSS_SlowestRate) speed = MPEGCtrl_MCSS_SlowestRate;

  return speed;
}

/**************************************************************/
/* play_set_speed()                                           */
/*                                                            */
/* For specific (and convoluted) play mode changes, set the   */
/* speed within MPEGDriver. Service function for play_play,   */
/* see comments at the call points for more.                  */
/*                                                            */
/* Parameters: Pointer to session structure for this stream;  */
/*                                                            */
/*             Pointer to string describing play rate;        */
/*                                                            */
/*             Flags for R0 in MPEGControl_SetSpeed.          */
/**************************************************************/

static _kernel_oserror * play_set_speed(session * s, const char * rate, unsigned int flags)
{
  modulefp_buf buf;
  int          speed;

  modulefp_enable(&buf);
  speed = play_find_speed(rate);
  modulefp_disable(&buf);

  return _swix(MPEGControl_SetSpeed,
               _INR(0,2),

               flags,
               s->mpegid,
               speed);
}
