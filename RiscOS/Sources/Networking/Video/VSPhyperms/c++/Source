/**************************************
 Source.c++

implements Source class
© Acorn Computers Ltd

History:

Date      Who     Description of change
===========================================
03/09/98  SNB     File created

**************************************/
extern "C" {
#include <limits.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>

// Current Clib stddef.h does not define a C++ compatible offsetof
#undef offsetof
#define offsetof(type, member) \
    ((size_t)((char *)&(((type *)0)->member) - (char *)0))

#include "kernel.h"
#include "swis.h"
}

#include "SourceP.h"
#include "Source.h"

extern "C" {
#include "sys/ioctl.h"
#include "netinet/udp.h"
}
//---------------------------------------------------------------------- private -- run time calculations --------------------

// calculate the largest block_id for full blocks, this means that no block_id
// smaller shall be incomplete and no block_id greater shall be complete.

error_flag
Source::calculateMaxCompleteBlock(void)
{
  MemBlock *mb;
  
  while (((mb = mem_map.findExistingBlock(max_completed_block+1)) != NULL)&&(mb->inuse)&&(mb->completed))
  	max_completed_block++;
  
  full_blocks = (int)(max_completed_block - last_block_sent);
  	
  return ErrorState();
}

// calculate a new window period if it is different from now then notify the server this is the only
// place where a request for more blocks during normal play.  Play notifications also have Ack capability.

// freeblocks does not take into account half full blocks but this is not important. What is most important
// is that we maintain a window from the most complete block no greater than that specified by the server.
// it is better to undercalculate than overestimate.

error_flag 
Source::calculatePosAckSequence(Server *server)
{
    size_t freeblocks;
    int MAX_block_request;
    error_flag result = NoError;
             
    result = getBlockStatus(0, 0, &freeblocks);
           
    if ((result != ErrorOccurred)&&
    	((max_completed_block + freeblocks) > server->getMaxRequestedBlock() ) ) {		// allow for the expecting
 	
           if (freeblocks > NEC_databurstval)							// send the least widnow or space.
            	MAX_block_request = (int)(max_completed_block + NEC_databurstval); 		// maintaining the window
           else
           	MAX_block_request = (int)(max_completed_block + freeblocks);
            
	   if ((stream_end_block != 0)&&(MAX_block_request > stream_end_block))	{		// if set
	   		Debug("end block set %i", stream_end_block);
	   		MAX_block_request = (int)stream_end_block;
	   }
	   
	   if (MAX_block_request > server->getMaxRequestedBlock()){
#ifdef DEBUGLIB	     
	      Debug("ack [%i-%i]", MAX_block_request, max_completed_block);
#endif	     
              if (server->SendAck(MAX_block_request, max_completed_block) == ErrorOccurred) {
         		err = &server->ReturnCopyOfError();
          		result = ErrorOccurred;
               }
           }
        } // if free blocks
    return result;        
}
 
// this method could possibly be called in interrupt mode so don't change anything just read
// its purpose is to go through the blocks upto max_block to calculate the outstanding datagrams
// this method will then request re-sending of these blocks, there is two areas that this is called
// from; one is during normal operation, this searches all blocks that have been received so far
// the other is a stream save calculation this sets max_block to be the top of the window period.

error_flag          
Source::calculatePosNAKSequence(int *naks_sent, Server *server, int max_block)
{
        MemBlock *mb;
        int dgm, min_val, max_val;	// nak calcs
        
        error_flag result = ErrorState();
                     
        for (size_t i = (int)(max_completed_block+1); ( (i <= max_block)&&(result!=ErrorOccurred)&&((*naks_sent) < MAX_NAKS) ); i++) {
               if (((mb = mem_map.findExistingBlock(i)) == NULL)||(mb->dgrams_received == 0))	{// rare block missing case
                 	(*naks_sent)++;
                 	if (server->SendNak(i, 0, i, -1) == ErrorOccurred) {
                 		err = &(server->ReturnCopyOfError());
                 		result = ErrorOccurred;
                 	}
               }
               else 
	       if ((mb->inuse)&&(!mb->completed)) {
               		dgm = 0;                 	  	                 	  	
               		while ((dgm < mb->dgrams_in_block)&&(result != ErrorOccurred)&&((*naks_sent) < MAX_NAKS)){
               	  		while ((mb->nec_block.iov[dgm].iov_base != NULL)&&(dgm < mb->dgrams_in_block)) dgm++;
               	  		
               	  		min_val = dgm;
                		  	
               	  		while ((mb->nec_block.iov[dgm].iov_base == NULL)&&(dgm < mb->dgrams_in_block)) dgm++;
                 		  			
               	  		max_val = dgm - 1;

                		if (min_val <= max_val){
                 			  (*naks_sent)++;
                 			  mb->pending_nak = 1;
                 			  if (server->SendNak(mb->block_id, min_val, mb->block_id, max_val) == ErrorOccurred) {
                 				err = &(server->ReturnCopyOfError());
                 				result = ErrorOccurred;
                 			  }
                 		}
                 	}// while datagrams      
               }// in use and not completed
         }// for loop
         return result;
}

//---------------------------------------------------------------------- public -- object creation/deletion methods --------------------
// this creates the udp link and sets local variables
// 
Source::Source(size_t blocks)
        : max_block_received(invalid_block_marker)
{
  	mem_map.max_blocks = blocks;
        mem_map.da_number = -1;
        mem_map.da_base = 0;
        mem_map.dgram_use = 0;
  	mem_map.max_block_size = 0;
  	stream_end_block = 0;
  	current_play_id = 0;
  	
  	full_blocks = 0;
  	
    	// Initialisation completed successfully
        sd = sd.creat(PF_INET, SOCK_DGRAM);
        setSocketError(sd.bind());
        MakeError(VSP_SourceUninit);
}
// this is to be called after the asset presentation dialogue
error_flag
Source::Allocate(size_t block_size, size_t initial_block_num, size_t datagram_size)
{
  	error_flag result;
  	
 	if (ErrorExists()&&(ErrorNum() == VSP_SourceUninit))
  		RemoveErr();
  		
  	mem_map.max_block_size = block_size;
  	
  	if (initial_block_num < 1){
  	  	MakeError(VSP_InvalidValue);
  	  	result = ErrorOccurred;
  	}
  	else 					// must be less than one by specification;
  		max_block_received = last_block_sent = max_completed_block = initial_block_num -1;
  	
  	sd.setDgramSize(datagram_size + sizeof(struct udphdr));
        mem_map.dgram_size  = sd.getDgramSize() - sizeof(struct udphdr);   
             
        if ((mem_map.dgram_size <= sizeof(struct udphdr))||(mem_map.dgram_size != datagram_size) ) {
                MakeError(VSP_DatagramSizeError);
                result = ErrorOccurred;
        }
 	else {	
  		if (result != ErrorOccurred)
  			result = mem_map.initLimits();
  		if (result != ErrorOccurred)
  			result = mem_map.createDynamicArea();
  		if (result != ErrorOccurred)
  			result = mem_map.initDynamicArea();
  	}
       return result;
}

//
// Destructor.  Frees any memory associated with the object.
//
// Errors: None.
//
//
Source::~Source()
{
        if (mem_map.da_base != 0) {
                (void) _swix(OS_DynamicArea, _INR(0,1), 1, mem_map.da_number);
        }

        if (mem_map.dgram_use != 0) {
                delete mem_map.dgram_use;
                mem_map.dgram_use = NULL;
        }

        sd.close();
}

//
// Converts the current value of errno into a VSP module error code if result
// was less than zero.  If result was >= 0, then there was no error.
// This method allows setSocketError(some_system_call()) to wrap system calls.
//
// Errors: TCP_BadPortSpecification, TCP_UnknownServer, TCP_SocketError
//         TCP_ServerRefusedConnection
//
error_flag
Source::setSocketError(int socket_result)
{
    error_flag result = ErrorState();
        
        if ((result != ErrorOccurred)&&(socket_result < 0)) {
                switch (errno) {
                        default:
                                MakeError(TCP_SocketError);
                                break;
                        case ECONNREFUSED:
                                MakeError(TCP_ConnectionRefused);
                                break;
                        case ENOENT:
                                MakeError(TCP_UnknownServer);
                                break;
                        case EINVAL:
                                MakeError(TCP_BadPortSpecification);
                                break;
                }
                result = ErrorOccurred;
        }
        else {
                result = NoError;
        }
        return result;
}

//
// Declares where the UDP packets are going to be coming from.  Port number
// may be specified as a number or a well-known service name.  Quoting a
// service "name" which is actually a string representation of a numeric value
// is treated as an explicit port selection.
//
// Errors: TCP_BadPortSpecification, TCP_UnknownServer, TCP_SocketError
//         TCP_ServerRefusedConnection
//
//
error_flag
Source::setServerDetails(const char *hostname, int port)
{
        sd.eventsOn();
        sd.makeNonBlocking();
        return setSocketError(sd.connect(hostname, htons(port)));
}

error_flag
Source::setServerDetails(const char *hostname, const char *port)
{
        sd.eventsOn();
        sd.makeNonBlocking();
        return setSocketError(sd.connect(hostname, port, "udp"));
}

error_flag
Source::setServerDetails(struct in_addr address, int port)
{
        sd.eventsOn();
        sd.makeNonBlocking();
        return setSocketError(sd.connect(address, htons(port)));
}
//
// Returns the local port number being used by this Source object.  This
// information is required by the Server class for Asset Presentation Request
// messages.
//
// Errors: TCP_SocketError: Unable to bind to local port.
//
//
error_flag
Source::getLocalPort(int *port)
{
        return setSocketError(sd.getLocalPort(port));
}

//
// Gets the number of full blocks pending and the maximum number of bufferable
// blocks as set in the constructor.
//
// Errors: None.
//
//
error_flag
Source::getBlockStatus(size_t *num_blocks, size_t *max_blocks_r, size_t *num_free)
{
        if (num_blocks != 0 || num_free != 0) {
        	size_t n;
        	size_t full_blocks = 0;
        	size_t empty_blocks = 0;
        	
                for (n = 0; n < mem_map.max_blocks; n++) {
                        MemBlock *mb = mem_map.getBlock(n);
                        if (!mb->inuse) empty_blocks++;
                        else if (mb->completed) full_blocks++;
                }
                if (num_blocks != 0) *num_blocks = full_blocks;
                if (num_free != 0) *num_free = empty_blocks;
        }
        
        if (max_blocks_r != 0) {
                *max_blocks_r = mem_map.max_blocks;
        }

        return NoError;
}

// this routine dumps all blocks
error_flag
Source::setNewPlayState(int *play_state, int *max_complete)
{
  	MemBlock *mb;
  	
  	*play_state = ++current_play_id;
  		
        for (int i=0;i<mem_map.max_blocks; i++){
        	mb = mem_map.getBlock(i);
        	if (mb->inuse)
        	   mem_map.freeBlock_background(mb);
        }
                
  	(*max_complete) = (int)(last_block_sent = max_completed_block);	
  		 	
     return ErrorState();
}
//
// Gets a pointer to the next completed complete block.  Changes to the
// data structures associated with the block are locked out until the
// block is freed with a call to the freeBlock method.
//
// Errors: VSP_NoDataAvailable
//
//
error_flag
Source::getBlock(NECBlock **block)
{
        MemBlock *mb;
        error_flag result = ErrorState();
        
        mb = mem_map.findExistingBlock(last_block_sent + 1);
        	
 	if (mb != NULL && mb->inuse && mb->completed) {
        	result = mem_map.memMemBlockToNECBlock(mb, block);
          	(*block)->iov_size = mb->dgrams_in_block;
                ++last_block_sent;
	}
        else 
                *block = 0;

     return result;    
}

//
// Releases the specifed block structure.  The data structures associated
// with the block are marked available for re-use.
//
// Errors: VSP_InvalidValue: the block was invalid or did not belong to this
//         Source object.
//
//
error_flag
Source::freeBlock(const NECBlock *block)
{
  MemBlock *mb;
         
  error_flag result = mem_map.memNECBlockToMemBlock(block, &mb);
  if (result != ErrorOccurred){
  	mb->to_be_freed = 1;
  }
#ifdef DEBUGLIB
   else
	Debug("error in free routine");
#endif	  
  return result;
}

error_flag
Source::calculate_freeBlocks(void)
{
    	int i;
  	
 	error_flag result = ErrorState();
      	 
        for (i = 0; ( (i < mem_map.max_blocks)&&(result != ErrorOccurred)); i++) {
                MemBlock *mb = mem_map.getBlock(i);
                if (mb->to_be_freed != 0){
                	result = mem_map.freeBlock_background(mb);
                }
        }
        full_blocks = (int)(max_completed_block - last_block_sent);
        
       return result;
}
//
// Allows the Source object foreground execution time so that it can perform
// operations not permitted in the interrupt method.  Use of private_handle is
// not yet defined.
//
// Errors: None.
//
//
error_flag
Source::foregroundExecute(callback_flag *callback_flags, Server *server)
{
 	error_flag result = ErrorState();
       	int naks = 0;
       
        result = calculateMaxCompleteBlock();
 	result = calculatePosNAKSequence(&naks, server, (int)server->getMaxRequestedBlock());
		
#ifdef DEBUGLIB
        Debug("foreground naks %i, [%i-%i]", naks, max_completed_block+1, server->getMaxRequestedBlock());
       //result = getMiscInfo(0);
#endif
        if (naks == 0)
        	(*callback_flags) = (callback_flag)((*callback_flags) & ~callback_foreground);
        	
        result = calculatePosAckSequence(server);
       	
       	full_blocks = (int)(max_completed_block - last_block_sent);
       	
    return result;
}

//
// Informs a Source object that a dynamic area has been renumbered.  Each
// object needs to check whether its own dynamic area is the one being
// renumbered and note the change for future reference.
//
// Errors: None.
//
error_flag
Source::serviceDynamicAreaRenumber(int old_id, int new_id)
{
        if (old_id == mem_map.da_number) {
                mem_map.da_number = new_id;
        }
        return NoError;
}

//
// Gets the underlying socket object being used for UDP datagram reception
// by the Source class.
//
// Errors: None.
//
error_flag
Source::getSocket(Socket *s)
{
        error_flag result;
        if (sd.valid()) {
                *s = sd;		// block copy
                result = NoError;
        }
        else {
          	RemoveErr();		// remove the uninit error
                MakeError(TCP_SocketError);
                result = ErrorOccurred;
        }

        return result;
}

//
// Reads a pending datagram into a free datagram buffer and links it into the
// block's scatter array.
//
// Errors: TCP_ReadFail, VSP_Alloc
//
//
error_flag
Source::ReadDatagrams(callback_flag *flags)
{
        error_flag result = ErrorState();
        NECDatagram *dgram;
        int size = 1, num_dgrams = 0;
        
        while (( size > 0)&&(result != ErrorOccurred)){
                      
         	result = mem_map.memFindFreeDatagramBuffer(&dgram);
        
         	if ( result == NoError) {
                	struct iovec iov[2];
                
                	iov[0].iov_len =  sizeof(NECDatagram);
                	iov[1].iov_len =  (unsigned int)(mem_map.dgram_size - sizeof(NECDatagram)) ;
                
                	iov[0].iov_base = (char*) dgram;
                	iov[1].iov_base = (char*) mem_map.findPayloadBuffer(dgram);  
                                              
                	size = sd.read(iov,sizeof(iov)/sizeof(struct iovec));
                      
                 	if ( size > sizeof(NECDatagram) ){
                 	  	++num_dgrams;
                	  	ntoh_structure(dgram, map_NECDatagram, NECDatagram);
 
         			if ((dgram->playback_classification_id == current_play_id)
         					&&(dgram->block_number > max_completed_block)){
               				if (dgram->block_number > max_block_received){	// new block
               				  	(*flags) = (callback_flag)((*flags) | callback_foreground);
               	 				max_block_received = dgram->block_number;
                			}                			
               			       					// lookup the datagram's slot within the memblock
                 			MemBlock *mb = mem_map.findBlock(dgram->block_number);
                 			
       					if (mb->nec_block.iov[dgram->dgram_seq].iov_base == NULL) {
       					  
						mb->nec_block.iov[dgram->dgram_seq].iov_base = iov[1].iov_base;
       						mb->nec_block.iov[dgram->dgram_seq].iov_len = (unsigned int) dgram->dgram_size;
       						mb->dgrams_received++;
              	
       						if (dgram->dgram_total != 0){
       	       						mb->dgrams_in_block = (unsigned int) dgram->dgram_total;
       	       						mb->special_play_id = (int) dgram->playback_classification_id;
       	       					}
    							// forward jump in dgrams same block send NAK for the missing
						if ( (dgram->status_word&0x01) ||
							(mb->dgrams_received == mb->dgrams_in_block)&&(mb->dgrams_in_block != 0 ) ){
							mb->completed = 1;	// completed block
							mb->pending_nak = 0;
							mb->dgrams_nakd = 0;
							(*flags) = (callback_flag)((*flags) | callback_foreground);
							result = calculateMaxCompleteBlock();
        						full_blocks = (int)(max_completed_block - last_block_sent);
						}
				        } 
       					else { 	//duplicate datagram != 0
       					  	result = mem_map.memFreeDatagram(dgram);
       					}
               		        }
	               	}// (size > datagram)
        	       	else {
                	  	if (size > 0) {		// Oh erk - this datagram was way too short
                                        	MakeError(TCP_ReadFail);
                                        	result = ErrorOccurred;
                                	}
                       	  	else
                       	  	if ((size == -1)&&(errno != EWOULDBLOCK)) {
                                        	MakeError(TCP_ReadFail);
                                        	result = ErrorOccurred;
                                	}
                                result = mem_map.memFreeDatagram(dgram);
                        	//size = 0;
                        }
                }// no error result
        }// while datagrams
#ifdef DEBUGLIB        
        Debug("in %i", num_dgrams);
#endif        
        num_dgrams = num_dgrams;
        return result;
}

error_flag
Source::getMiscInfo(int flags)
{
  flags = flags;
  error_flag result = ErrorState();

#ifdef DEBUGLIB
    	if (ErrorExists()){
    	  	Debug("error exists");
    	  	if (err != NULL){
    	  	  	err->Print();
    	  	}
    	}               
	Debug("MiscInfo source block dump max_rec %i, max comp %i", max_block_received, max_completed_block);

         for (int i = 0; ( (i < mem_map.max_blocks)&&(result != ErrorOccurred) ); i++) {
               MemBlock *mb = mem_map.getBlock(i);
               Debug("block (%i)(%i)(%i)[%i], naks = %i, dg rec = %i/%i, play_id = %i",
              	 mb->to_be_freed!=0, mb->completed!=0, mb->inuse!=0, mb->block_id, mb->pending_nak!=0,  
              	 mb->dgrams_received, mb->dgrams_in_block, mb->special_play_id);
         }
#endif               	
  return result;
}
