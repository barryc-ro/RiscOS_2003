/**************************************
 htonstruct.c

implements byte-order reversals optimally

© Acorn Computers Ltd

History:

Date      Who     Description of change
===========================================
08/09/98  SNB      File created

**************************************/
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include "NECstruct.h"
#include "Error.h"
extern "C" {
#include "sys/types.h"
}

#ifdef __arm
#  define ROR(x, n) (((x) << (32-(n))) | ((x) >> (n)))
            /*
             * This compiles to the neat four cycle byte-swap code
             * from the ARM Architecture Reference (section 4.1.4).
             * (Seven cycles on the ARM 8, but that's 'cos it's
             * crap).
             */
#  define rev_long(x)\
            {unsigned long t;\
                                    /* x = A , B , C , D   */\
            t = x ^ ROR(x, 16);     /* t = A^C,B^D,C^A,D^B */\
            t &=~ 0x00ff0000;       /* t = A^C, 0 ,C^A,D^B */\
            x = ROR(x, 8);          /* x = D , A , B , C   */\
            x = x ^ (t >> 8);}      /* x = D , C , B , A   */
#else
#  define rev_long(x)\
            x = (((x & 0xff) << 24) | ((x & 0xff00) << 8) |\
                ((x & 0xff0000) >> 8) | ((x & 0xff000000) >> 24));
#endif


// Structure byte-reversal code
//
// This code is near-optimal and compiles to very small (<&100 bytes) object code.  It takes
// a structure defining the layout of a struct and works through the structure reversing each
// field in turn.
//
// The code in the 64-bit quantity case is deliberately arranged so that compiler will
// generate optimal code.
//
//
// Returns:  NoError if all went OK
//           ErrorOccurred if typedescriptor exceeded quoted size of the structure in obj_size
//                         or if the typedescriptor contained an illegal value.

error_flag hton_str(void *data_void, const hton_structure_desc *desc, size_t obj_size)
{
        size_t total = 0;
        // Union to aid code clarity.  All pointer arithmetic done on char pointer.
        // Not inefficient to use a union.
        union {
                unsigned char *c;
                unsigned short *s;
                unsigned long *l;
                void *v;
        } data;
        data.v = data_void;

        while (*desc != 0) {
                const hton_structure_desc this_desc = *desc++;
                if (this_desc < 0) {
                        data.c -= this_desc;
                        total -= this_desc;
                }
                else {
                        switch (this_desc) {
                                default:
                                        // This must never happen
                                        return ErrorOccurred;

                                case 1:
                                        // No work required for single-byte quantities
                                        break;
                                case 2:
                                        // 2-byte quantity - cheat
                                        {
                                                unsigned char tmp = data.c[1];
                                                data.c[1] = data.c[0];
                                                data.c[0] = tmp;
                                        }
                                        break;
                                case 4:
                                        // 4-byte quantity.  Invoke the optimal word reverser macro.
                                        {
                                            unsigned long x = data.l[0];
                                            rev_long(x);
                                            data.l[0] = x;
                                        }
                                        break;
                                case 8:
                                        // 8-byte quantity.  Invoke the optimal word reverser macro.
                                        // and swap the two words at the same time.
                                        {
                                            unsigned long x = data.l[0];
                                            unsigned long y = data.l[1];
                                            rev_long(x);
                                            data.l[1] = x;
                                            rev_long(y);
                                            data.l[0] = y;
                                        }
                                        break;
                        }
                        data.c += this_desc;
                        total += this_desc;
                }

                if (total > obj_size) {
                        return ErrorOccurred;
                }
        }

        return NoError;
}
