#include "List.h"
#include <stdlib.h>
#include "stdio.h"
#include <limits.h>

error_flag
List::increasesize(void)
{
  /*
  allocate new memory copy the values over and delete the old.
  */
  error_flag result = ErrorState();
 
  if (result != ErrorOccurred){
  
  	ListObject 	**tmp_pt_obj;	// temporary pointer to object
  	int  		*tmp_pt_int;	// temporary pointer to identifiers
    
  	MaxSize += ListChangeSize;
  
  	tmp_pt_obj  = (ListObject**) new int[MaxSize];
  	tmp_pt_int  = new int[MaxSize];
  
  	if ((tmp_pt_obj == NULL)||(tmp_pt_int == NULL))
      		result = MakeError(VSP_Alloc);
      	else {
      	  
      		int i = 0;
      		
      		while (i < MaxSize){
      		  	if (i < CurrentSize){
    				tmp_pt_obj[i] = object[i];
    				object[i] = NULL;
    	
    				tmp_pt_int[i] = identifiers[i];
    			}
    			else{
    				tmp_pt_obj[i] = NULL;
    				tmp_pt_int[i] = INVALID_LIST_ID;
    			}
    			++i;
    		}
  
  		delete[] object; object = NULL;
  		delete[] identifiers; object = NULL;
  
  		object 	= tmp_pt_obj;
  		identifiers 	= tmp_pt_int;
  
  		tmp_pt_obj = NULL;
  		tmp_pt_int = NULL;
  	}
  }
  return result;
}
  
error_flag
List::decreasesize(void)
{
  /*
  allocate new memory copy the values over and delete the old.
  only if there is sufficient room
  */
  error_flag result = ErrorState();
  
  if (result != ErrorOccurred){
  
  	ListObject 	**tmp_pt_obj;	// temporary pointer to void
  	int   		*tmp_pt_int;	// temporary pointer to identifiers
  
  	if ( ((MaxSize-ListChangeSize) > CurrentSize)&&((MaxSize-ListChangeSize) >= 0) ) {
  	  
  	  	MaxSize -= ListChangeSize;
  	  	
  		tmp_pt_obj = (ListObject**) new int[MaxSize];
  		tmp_pt_int = new int[MaxSize];
  
  		if ((tmp_pt_obj == NULL)||(tmp_pt_int == NULL))
    			result = MakeError(VSP_Alloc);
    		else {
  
      			int i = 0;
      		
      			while (i < MaxSize){
      		  		if (i < CurrentSize){
    					tmp_pt_obj[i] = object[i];
    					object[i] = NULL;
    	
    					tmp_pt_int[i] = identifiers[i];
    				}
    				else{
    					tmp_pt_obj[i] = NULL;
    					tmp_pt_int[i] = INVALID_LIST_ID;
    				}
    				++i;
    			}
  
  			delete[] object; object = NULL;
  			delete[] identifiers; identifiers = NULL;
  
  			object 		= tmp_pt_obj;
  			identifiers 	= tmp_pt_int;
  	
  			tmp_pt_obj = NULL;
  			tmp_pt_int = NULL;
  		}
  	}
  }
  return result;
}

error_flag
List::EnsureUnique(int id)
{
  error_flag result = ErrorState();
  
  if (id == INVALID_LIST_ID)
  	MakeError(VSP_InvalidValue);
  else{
  	for (int i=0;i<CurrentSize;i++){
  	  
  		if (identifiers[i] == id){
  	    		result = MakeError(VSP_Unique);
  	    		break;
  	    	}
  	}
  }
  return result;
}

error_flag
List::CreateUniqueID(int *id)
{
  // a straight pass through here should be the norm  	
  
  if (current_guess == INT_MAX) current_guess = 1;
  
  if (*id == INVALID_LIST_ID) ++(*id);
  
  if (EnsureUnique(*id) == ErrorOccurred){
    
    	RemoveErr();
    	
   	current_guess++;
 
  	while (EnsureUnique(current_guess) == ErrorOccurred){
  		RemoveErr();
  		current_guess++;
  		if (current_guess == INT_MAX)
  			current_guess = 1;
  	}
  	
  	*id = current_guess;
  }
  else
  	current_guess = *id;
  
  return NoError;
}

error_flag
List::ErrorState(void)
{	
  if (!ErrorExists()){	// contemporary of errorstate
  
   	return NoError;
  }
 	
  switch(ErrorNum()) {
  	case VSP_InvalidValue:
    	case VSP_Unique:
    	case VSP_UnknownObj:
    	  	RemoveErr();
	  	break;   	  
    	default:
    		return ErrorOccurred;
  }
  return NoError;
}
    

List::List(void):Error()
{
  /*
  Constructor this may cause an error that could go undetected until the object is
  used.
  */
  reentrant = claim_token;
  
  current_guess = 1;
  object 	= (ListObject**)new int[ListDefaultSize];
  identifiers 	= new int[ListDefaultSize];
  
  if ((object == NULL)||(identifiers == NULL)){
    	MakeError(VSP_Alloc);
    	MaxSize = 0;
  }
  else  {
    	MaxSize = ListDefaultSize;
    	for (int i = 0; i < MaxSize; ++i){
    		object[i] = NULL;
    		identifiers[i] = INVALID_LIST_ID;
    	}
  }
  ExpectedSize = CurrentSize = 0;		// start with no elements in the list

  reentrant = free_token;
}

List::List(int size):Error()
{
  reentrant = claim_token;
  current_guess = 1;
  object 	= (ListObject**)new int[size];
  identifiers 	= new int[size];
  
  if ((object == NULL)||(identifiers == NULL)){
    	MakeError(VSP_Alloc);
  	MaxSize = 0;
  }
  else  {
  	MaxSize = size;
  	for (int i = 0; i < MaxSize; ++i){
    		object[i] = NULL;
    		identifiers[i] = INVALID_LIST_ID;
    	}
  }
  ExpectedSize = CurrentSize = 0;
  reentrant = free_token;
} 

List::~List(void)
{
  reentrant = claim_token;
 
  int i;
  
  ExpectedSize = 0;
  
  	// delete from the top to the bottom
  for (i=(CurrentSize-1); i>=0; i--){
    	delete object[i];
    	object[i] = NULL;
  }	
  
  delete[] object; object = NULL;
  delete[] identifiers; identifiers = NULL;
  
  CurrentSize = 0;
  reentrant = free_token;
}

error_flag
List::Add(ListObject *item, int *id)
{  
  error_flag result = ErrorState();

  if (result != ErrorOccurred) {
    	if (reentrant == claim_token)
    		result = MakeError(VSP_BadErr);
    	else {
    		reentrant = claim_token;	
    	
    		if (ExpectedSize != CurrentSize)
 			result = MakeError(VSP_BadDelete);
 		else {
 			if (((CurrentSize >= MaxSize)&&(increasesize() == ErrorOccurred)) ||
  			    (CreateUniqueID(id) == ErrorOccurred) )
  				result = ErrorOccurred;
  			else {
				++ExpectedSize;
				
  				identifiers[CurrentSize] = (*id);
  				object[CurrentSize] = item;

  				++CurrentSize;
        		}
        	}
        	reentrant = free_token;
        }
  }
  return result;	//non zero id
}

error_flag 
List::Remove(int identifier)
{
  error_flag result = ErrorState();
  
  if (result != ErrorOccurred) {
  	if (identifier == INVALID_LIST_ID)
  		result = MakeError(VSP_InvalidValue);
  	else 
  	if (ExpectedSize != CurrentSize)
  		result = MakeError(VSP_BadDelete);
  	else
    	if (reentrant == claim_token)
    		result = MakeError(VSP_BadErr);
  	else {	
  		reentrant = claim_token;
  		
    		int i = 0;
  		while((i < CurrentSize)&&(identifiers[i] != identifier)) ++i;
  
  		if (i == CurrentSize)
  			result = MakeError(VSP_UnknownObj);
  		else {
  		  
  			identifiers[i] = INVALID_LIST_ID;
  			
  			--ExpectedSize;
    	
  			delete object[i];
  			object[i] = NULL;
        		
  			while (i < CurrentSize -1){
    				object[i] = object[i+1];
    				identifiers[i] = identifiers[i+1];
    				++i;
  			}
  			--CurrentSize;
  		
  			// this does test for sufficient decrease in size
  			if (decreasesize() == ErrorOccurred)	
	  			 result = ErrorOccurred;
        	}
        	reentrant = free_token;
        }
  }
  return result;
}

error_flag
List::identify(ListObject **l_item, int identifier)
{  
  error_flag result = ErrorState();
  
  if (identifier == INVALID_LIST_ID)
  	result = MakeError(VSP_InvalidValue);
  else {
  	if (result != ErrorOccurred) {
  		int i=0;	// count value
  		
  		while((i < CurrentSize)&&(identifiers[i] != identifier)) ++i;
  	
  		if (i < CurrentSize)	
  			(*l_item) = object[i];
  		else 
 			result = MakeError(VSP_UnknownObj);
  	}
  }
  return result;
}
