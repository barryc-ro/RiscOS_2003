/******************************************************************************

      File: main.c++
   Purpose: module entry points
    Author: A.Rodger
   History:

 ******************************************************************************/

#include <string.h>
#include <stdio.h>
#include "kernel.h"
#include "swis.h"
#include "Global/Services.h"

extern "C" {
#include "VSPHdr.h"
}

#include "Interface.h"
#include "Error.h"

Interface *interface;
ErrorBlk  *error;

#ifdef DEBUGLIB
ULINT timeslice, callbackslice, inetevents, free_buffer;
#endif

#define UNUSED(a) ((void)(a))
#define Service_DynamicAreaRenumber	0x92

#if CMHG_VERSION < 516
#define CMHG_CONST
#else
#define CMHG_CONST const
#endif

/******************************************************************************
 Generic Veneers
  parameters:
     returns:
 ******************************************************************************/
 // called as a result of a callback
 // called with interrupts on from usermode. ie may be interrupted but won't interrupt
_kernel_oserror *VSP_TimeSlice(_kernel_swi_regs *, void *pw) {
  
   if ((error == NULL)&&(interface != NULL)){

#ifdef DEBUGLIB  
  	ULINT monotime1, monotime2;
  	(void) _swix(OS_ReadMonotonicTime, _OUT(0), &monotime1);
#endif
 	if (interface->stream_list()->TimeSliceCall(pw) == ErrorOccurred ){
    		interface->AddError(&(interface->stream_list()->ReturnCopyOfError()));
    		interface->stream_list()->RemoveErr();
    	}
 
#ifdef DEBUGLIB  
  	(void) _swix(OS_ReadMonotonicTime, _OUT(0), &monotime2);
  	timeslice += monotime2 - monotime1;
#endif
   	
  }
   return (error != NULL) ? error->get_ro_err() : NULL;
}

// this is the procedure that is placed in the MPEG block descriptor
_kernel_oserror *VSP_EmptyBuffer(_kernel_swi_regs *r, void *) {
  
   if ((error == NULL)&&(interface != NULL)){
   	_kernel_irqs_on();

#ifdef DEBUGLIB  
  	ULINT monotime1, monotime2;
  	(void) _swix(OS_ReadMonotonicTime, _OUT(0), &monotime1);
#endif
  
	interface->stream_list()->MPEGInterrupt(r->r[1]);
  
#ifdef DEBUGLIB  
  	(void) _swix(OS_ReadMonotonicTime, _OUT(0), &monotime2);
  	free_buffer += monotime2 - monotime1;
#endif
   
  	_kernel_irqs_off();
   }

   return (error != NULL) ? error->get_ro_err() : NULL;
}

_kernel_oserror *VSP_CallAfter(_kernel_swi_regs *, void *pw)
{  
   if ((error == NULL)&&(interface != NULL)){
  	_kernel_irqs_on();

#ifdef DEBUGLIB  
  	ULINT monotime1, monotime2;
  	(void) _swix(OS_ReadMonotonicTime, _OUT(0), &monotime1);
#endif
	interface->stream_list()->TimeSliceCallTickerTimeout(pw);

#ifdef DEBUGLIB  
  	(void) _swix(OS_ReadMonotonicTime, _OUT(0), &monotime2);
  	callbackslice += monotime2 - monotime1;
#endif
    	_kernel_irqs_off();
   }
   return (error != NULL) ? error->get_ro_err() : NULL;
}

// this is the call back placed by the source object
_kernel_oserror *VSP_DummyAck(_kernel_swi_regs *, void *) {

   if ((error == NULL)&&(interface != NULL)){
  	_kernel_irqs_on();
 	
 	interface->stream_list()->DummyAckPoll();
 	
  	_kernel_irqs_off();
   }
   return (error != NULL) ? error->get_ro_err() : NULL;
}

// this is used as a call for when an ATM SVC is connected
// this then prompts the IP level connection
_kernel_oserror *VSP_IPStatus(_kernel_swi_regs *regs, void *) {

   if ((error == NULL)&&(interface != NULL)){
 	
 	interface->server_list()->statusEvent(regs->r[1], regs->r[2]);
   }
   return (error != NULL) ? error->get_ro_err() : NULL;
}

int VSP_InternetEvent(_kernel_swi_regs *r, void *pw)
{
  // Internet Event has occurred, MUST check event and MUST check socket id.
  // Do not just claim these events, because it will stuff all other network s/w
   claim_flag claim = ignore_event;
  
   if ((error == NULL)&&(interface != NULL)){
  	_kernel_irqs_on();

#ifdef DEBUGLIB  
  	ULINT monotime1, monotime2;
  	(void) _swix(OS_ReadMonotonicTime, _OUT(0), &monotime1);
#endif
  
 	interface->stream_list()->inetEvent(r->r[1], r->r[2], &claim, pw);
    	
    	if (claim == ignore_event)
 		interface->server_list()->inetEvent(r->r[1], r->r[2], &claim);
 		
#ifdef DEBUGLIB  
  	(void) _swix(OS_ReadMonotonicTime, _OUT(0), &monotime2);
  	inetevents += monotime2 - monotime1;
#endif
  	_kernel_irqs_off();
   }

   return claim;
}

/******************************************************************************
  module_service

       Module service call entry point.

 ******************************************************************************/
extern "C" void module_service_call( int service_no, _kernel_swi_regs *r, void *pw )
{
	UNUSED( r );
	UNUSED( pw );

	switch ( service_no )
	{
		case Service_DynamicAreaRenumber:
		  	if (error == NULL){ 
    			    if (interface != NULL){
 				if (interface->stream_list()->ServiceDynamicAreaRenumber(r->r[2], r->r[3]) == ErrorOccurred )
    					interface->AddError(&(interface->stream_list()->ReturnCopyOfError()));
    			    }
    			    else
    			  	error = new ErrorBlk(VSP_BadErr);
                        }
			break;
		case Service_ShutDown:
		case Service_Standby:
			if (interface != NULL)
				interface->disconnect_all();
			break;
	}
}


/******************************************************************************
 module initialisation
  parameters:
     returns:
 ******************************************************************************/

int main(void){
  /*
  this needs to be called to set up the C++ static elements
  */
}

_kernel_oserror *module_initialise(CMHG_CONST char *, int, void *pw)
{
  if (!MessagesFile::init()) {
          // Really bad problems - return error taken from global messages file
          _kernel_oserror e;
          e.errnum = 0;
          strcpy(e.errmess, "NoStore");
          return _swix(MessageTrans_ErrorLookup, _INR(0,2), &e, 0, 0);
  }

  // if you look at the DecAOF of the main.o file
  // the main function makes a call to ______main
  // "BL ______main" this is a call to the C++ library
  // routine to set up the static data.

  main(); //set up static elements

  error = NULL;
  interface = new Interface(pw);
  
#ifdef DEBUGLIB
#ifdef DBG_parallel  
  debug_initialise("VSP", DEBUG_FILE, "VSP$Debug");
  debug_output_device(PDEBUG_OUTPUT);
#endif
	if (interface != NULL) 
		interface->DebugAdd( (debug_flags)	(
				debug_always		|
				//debug_errors 		|
  				//debug_ack   		|
  				debug_naks		|
  				//debug_callbacks	|
  				debug_streaminfo        |
  				//debug_Registers03     |
  				//debug_Registers47     |
  				debug_servercontrol     |
  				//debug_miscinfo  	|
  				//debug_assetlists     	|
  				debug_scenelists        |
  				//debug_SWIentryexit    |
  				//debug_messageQ        |
  				debug_multicast         |
  				debug_startend		|
  				debug_ATMserver		//|
  				//debug_blockerrors	
  				));
	timeslice = callbackslice = inetevents = free_buffer = 0;
#endif 

  return (error != NULL) ? error->get_ro_err() : NULL;
}

/******************************************************************************
 module finalisation
  parameters:
     returns:
 ******************************************************************************/
_kernel_oserror *module_finalise (int, int, void *pw)
{
Interface *interface_tmp = interface;
ErrorBlk  *error_tmp = error;

  _kernel_oserror *err;
 
  interface = NULL;
  delete interface_tmp;

  error = NULL;
  delete error_tmp;		// if there are any errors left over from running
  
  // clear timer related callbacks
  err = _swix(OS_RemoveTickerEvent, _INR(0,1), VSP_Poll, pw);
  
  // clear MPEG related callbacks this will have to confer with the MPEG modules
  if ( err != NULL){
  	err = _swix(OS_RemoveTickerEvent, _INR(0,1), VSP_MPEGCall, pw);
  }
  else
  	_swix(OS_RemoveTickerEvent, _INR(0,1), VSP_MPEGCall, pw);
  
  // clear timeslice callbacks.
  if ( err != NULL)
  	err = _swix(OS_RemoveTickerEvent, _INR(0,1), VSP_CallAfterVeneer, pw);
  else
  	_swix(OS_RemoveTickerEvent, _INR(0,1), VSP_CallAfterVeneer, pw);
					// it is too late now.
  if (err != NULL)
          MessagesFile::finalise();
          
#ifdef DEBUGLIB
#ifdef DBG_parallel  
  debug_atexit();
#endif
#endif

  return err;
}

/******************************************************************************
 module swi decoder
  parameters:
     returns:
 ******************************************************************************/
_kernel_oserror *swi_handler ( int swi_no, _kernel_swi_regs *r, void *)
{
  ErrorBlk *non_fatal = NULL;
  
  if (error != NULL) return error->get_ro_err();	// fatal error
  
  if (interface == NULL) 
    error = new ErrorBlk(VSP_BadErr);
  else {
  // if any of the SWI calls return ErrorOccurred it is fatal non fatal errors are
  // returned in the non_fatal pointer,
  
  // Dispatch SWI based on SWI number offset (more efficient for compiler)
#ifdef DEBUGLIB
	if (interface->Debug(debug_SWIentryexit)) interface->Debug("enter SWI 0x%8.8X", swi_no + VSP_00);
	if (interface->Debug(debug_Registers03)){
		interface->Debug("entry regs[0-3] (%i),  (%i),  (%i),  (%i)", r->r[0], r->r[1], r->r[2], r->r[3]);
	}
	if (interface->Debug(debug_Registers47)){
		interface->Debug("entry regs[4-7] (%i),  (%i),  (%i),  (%i)", r->r[4], r->r[5], r->r[6], r->r[7]);
	}
#endif
  if (interface->ErrorExists())
  	non_fatal = interface->AddError(&(interface->ReturnCopyOfError()));
  else	  
  switch ( swi_no  )
  {
    case VSP_SetServer - VSP_00:
    	if (interface->SetServer(r, &non_fatal) == ErrorOccurred )
    		error = &(interface->ReturnCopyOfError());
    	else error = NULL;
    	break;
    case VSP_OpenStream - VSP_00:
    	if (interface->OpenStream(r, &non_fatal) == ErrorOccurred )
    		error = &(interface->ReturnCopyOfError());
    	else error = NULL;
    	break;
    case VSP_CloseStream - VSP_00:
  	if (interface->CloseStream(r, &non_fatal) == ErrorOccurred)
    		error = &(interface->ReturnCopyOfError());
    	else error = NULL;
    	break;
    case VSP_CheckEndOfStream - VSP_00:
    	if (interface->CheckEndOfStream(r, &non_fatal) == ErrorOccurred)
    		error = &(interface->ReturnCopyOfError());
    	else error = NULL;
    	break;
    case VSP_SetSpeed - VSP_00:
    	if (interface->SetSpeed(r, &non_fatal) == ErrorOccurred)
    		error = &(interface->ReturnCopyOfError());
    	else error = NULL;
    	break;
    case VSP_SetPosition - VSP_00:
    	if (interface->SetPosition(r, &non_fatal) == ErrorOccurred)
    		error = &(interface->ReturnCopyOfError());
    	else error = NULL;
    	break;
    case VSP_ReadNPT - VSP_00:
    	if (interface->ReadNPT(r, &non_fatal) == ErrorOccurred)
    		error = &(interface->ReturnCopyOfError());
    	else error = NULL;
    	break;
    case VSP_GetAssetList - VSP_00:
    	if (interface->GetAssetList(r, &non_fatal) == ErrorOccurred)
    		error = &(interface->ReturnCopyOfError());
    	else error = NULL;
    	break;
    case VSP_GetSceneList - VSP_00:
    	if (interface->GetSceneList(r, &non_fatal) == ErrorOccurred)
    		error = &(interface->ReturnCopyOfError());
    	else error = NULL;
    	break;
    case VSP_GetMiscInfo - VSP_00:
    	if (interface->GetMiscInfo(r, &non_fatal) == ErrorOccurred)
    		error = &(interface->ReturnCopyOfError());
    	else error = NULL;
    	break;
    default:
      non_fatal = interface->AddError(new ErrorBlk(VSP_BadSWI));
      break;
  }
  }// else
#ifdef DEBUGLIB 
	if (interface->Debug(debug_SWIentryexit)) interface->Debug("exit SWI 0x%8.8X", swi_no + VSP_00);
	if (interface->Debug(debug_Registers03)){
		interface->Debug("regs[0-3] (%i),  (%i),  (%i),  (%i)", r->r[0], r->r[1], r->r[2], r->r[3]);
	}
	if (interface->Debug(debug_Registers47)){
		interface->Debug("regs[4-7] (%i),  (%i),  (%i),  (%i)", r->r[4], r->r[5], r->r[6], r->r[7]);
	}
  	if ((non_fatal != NULL)&&(interface->Debug(debug_always))){
  	  	interface->Debug("swi %8.8X error", swi_no + VSP_00);
  		interface->Debug(non_fatal->get_ro_err());
  	}
#endif
  	
  if (error != NULL) 
  	return error->get_ro_err();
  else
  	return (non_fatal != NULL) ? non_fatal->get_ro_err(): NULL;
}

/*****************************************************************************
 module command handler
  parameters:
     returns:
 *****************************************************************************/
_kernel_oserror *module_clihandler (CMHG_CONST char *, int, int command_no, void *)
{
  switch (command_no)
  {
    case CMD_VSPInfo:
#ifdef DEBUGLIB
      printf ( " " Module_Title " module, Diagnostic Version " Module_VersionString "\n");
      printf ( " timeslice   = %i\n", timeslice);
      printf ( " callback    = %i\n", callbackslice);
      printf ( " inetevents  = %i\n", inetevents);
      printf ( " free_buffer = %i\n", free_buffer);
      printf ( " total time in module interrupts %i", timeslice+inetevents+free_buffer);
#else
      printf ( " " Module_Title " module, Version " Module_VersionString "\n");
#endif
      printf ( "\n Servers still connected                      %i\n", interface->getServerListSize());
      printf (   " Streams still active                         %i\n", interface->stream_list()->Size());
      if (interface != NULL)
        interface->stream_list()->stats.print();
      break;
    case CMD_VSPError:
#ifdef DEBUGLIB
	if (interface != NULL) printf("debug flags %8.8X\n", interface->debugword());
#endif
    	if (error != NULL) {
    		printf(" Terminal error\n");
    		error->error_print();
    	}
    	else
    		if (interface->ErrorExists()){
    		  	printf("  base class error\n");
    			interface->error_print();
    		}
    		else
    			interface->error_array_print();
      break;
    case CMD_VSPConfig:
    	if (error != NULL) {
    		if (error->ErrorNumber() == VSP_NoReadEnvironment){
    			delete error; error = NULL;
		      	interface->ReadEnvVar();
    		}
  	}
    	else  // no error
      		interface->ReadEnvVar();
      break;
    case CMD_VSPDisconnect:
    	if (interface != NULL)
    		interface->disconnect_all();
     break;
  }
  return (error != NULL) ? error->get_ro_err() : NULL;
}
