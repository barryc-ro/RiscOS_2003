/**************************************
 vspSocket.c

implements standard Socket class.

© Acorn Computers Ltd

History:

Date      Who     Description of change
===========================================
26/8/98   SNB      File created

**************************************/
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include "vspSocket.h"

extern "C" {
#  include "arpa/inet.h"
#  include "sys/ioctl.h"
/* All the rest of these are necessary to do, effectively:
 * sysctl net.inet.udp.maxdgram
 */
#  include "sys/sysctl.h"
#  include "netinet/in_systm.h"
#  include "netinet/ip.h"
#  include "netinet/ip_var.h"
#  include "netinet/udp.h"
#  include "netinet/udp_var.h"
// ar add
#  include "netinet/tcp_timer.h"
#  include "netinet/tcp.h"
#  include "netinet/tcp_var.h"
// finish
}

// Close a socket descriptor - but only if it was valid
void Socket::close()
{
        if (sd != -1) {
                (void) socketclose(sd);
        }
        sd = -1;
}

Socket::Socket(int proto_family, int sock_type, int ipproto_type)
{
        sd = socket(proto_family, sock_type, ipproto_type);
}

int Socket::write(const void *data, size_t amt, int flags)
{
        return send(sd, data, amt, flags);
}

int Socket::write(const void *data, size_t amt)
{
        return send(sd, data, amt, 0);
}

int Socket::read(void *data, size_t amt, int flags)
{
        return recv(sd, data, amt, flags);
}

int Socket::read(void *data, size_t amt)
{
        return recv(sd, data, amt, 0);
}

int Socket::read(struct iovec *iovec, size_t iov_size, int flags)
{
        struct msghdr m;
        m.msg_name = 0;
        m.msg_namelen = 0;
#ifdef COMPAT_INET4        
        m.msg_accrights = 0;
        m.msg_accrightslen = 0;
#endif        
        m.msg_iov = iovec;
        m.msg_iovlen = iov_size;
        return ::recvmsg(sd, &m, flags);
}

int Socket::read(struct iovec *iovec, size_t iov_size)
{
        return ::readv(sd, iovec, iov_size);
}

int Socket::readWithTimeout(void* buffer, size_t amt, unsigned int time)
{  
  unsigned int t1, t2;
  
  unsigned char *buf_ptr = (unsigned char*)buffer;
  size_t remaining_data = amt;
 	
  (void) _swix(OS_ReadMonotonicTime, _OUT(0), &t1);
  	
  do {
    	int data_read;
    		
  	(void) _swix(OS_ReadMonotonicTime, _OUT(0), &t2);
    	  	
    	data_read = read(buf_ptr, remaining_data);
    	  
    	if ( (int)(remaining_data) > data_read )
    		wait_read(time/100);
    		
    	if ( data_read > 0) {
    		remaining_data -= data_read;
    		buf_ptr += data_read;
    	  	t1 = t2;
    	}
   		
    	if (((data_read < 0)&&(errno != EWOULDBLOCK))||(t2 > (t1 + time))){
    		break;
    	}
    	
  }while (remaining_data > 0);
  
  return (amt - remaining_data);
}

int Socket::wait_write(unsigned int seconds)
{
  fd_set write_template;
  struct timeval wait_val;
  	
  	wait_val.tv_sec = seconds;
  	wait_val.tv_usec = 0;
  	
  	FD_ZERO(&write_template);
  	
  	FD_SET(sd, &write_template);
  	
  	return select(FD_SETSIZE, (fd_set*)0, &write_template, (fd_set*)0, &wait_val);
}

int Socket::wait_read(unsigned int seconds)
{
  fd_set read_template;
  struct timeval wait_val;
  	
  	wait_val.tv_sec = seconds;
  	wait_val.tv_usec = 0;
  	
  	FD_ZERO(&read_template);
  	
  	FD_SET(sd, &read_template);
  	
  	return select(FD_SETSIZE, &read_template, (fd_set*)0, (fd_set*)0, &wait_val);
}

Socket Socket::rresvport()
{
        int resvport = IPPORT_RESERVED - 1;
        sd = ::rresvport(&resvport);
        return (*this);
}

Socket Socket::creat(int proto_family, int sock_type, int ipproto_type)
{
        sd = socket(proto_family, sock_type, ipproto_type);
        return (*this);
}

int Socket::connect(struct in_addr *in, int no_port)
{
        int result;

        if (no_port <= 0) {
                errno = EINVAL;
                result = -1;
        }
        else {
                struct sockaddr_in sin;
#ifndef COMPAT_INET4
                sin.sin_len = sizeof(struct sockaddr_in);
#endif
                sin.sin_family = AF_INET;
                sin.sin_addr.s_addr = in->s_addr;
                sin.sin_port = no_port;
                memset(sin.sin_zero, '\0', sizeof(sin.sin_zero));
                result = ::connect(sd, (struct sockaddr *) &sin, sizeof(sin));
        }

        return result;
}

int Socket::get_port(const char *portname, const char *proto)
{
        struct servent *se;
        int no_port;

        if (portname != NULL) {
                se = getservbyname(portname, proto);
        }
        else {
                se = NULL;
        }

        if (se == NULL) {
                char *tmp;
                no_port = (int) strtoul(portname, &tmp, 0);
                if (*tmp == '\0' && no_port > 0) {
                        no_port = htons(no_port);
                }
                else {
                        no_port = 0;
                }
        }
        else {
                no_port = se->s_port;
        }

        return no_port;
}

int Socket::connect(const char *host, int no_port)
{
        struct hostent *he;
        struct in_addr address;
        int result;

        if (inet_aton(host, &address)) {
                result = connect(&address, no_port);
        }
        else {
                he = gethostbyname(host);
                if (he == NULL) {
                        errno = ENOENT;
                        result = -1;
                }
                else {
                        struct in_addr **ip = (struct in_addr **) he->h_addr_list;
                        result = connect(*ip, no_port);
                }
        }

        return result;
}

int Socket::connect(const char *host, const char *port, const char *proto)
{
        return connect(host, get_port(port, proto));
}

int Socket::connect(struct in_addr *addr, const char *port, const char *proto)
{
        return connect(addr, get_port(port, proto));
}

int Socket::joinMulti(const char *host)
{
  struct hostent *he;
  struct ip_mreq mreq;
  int result;

	mreq.imr_interface.s_addr = INADDR_ANY;
  	
        if (inet_aton(host, &(mreq.imr_multiaddr)) ) {
        	result = setsockopt(sd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &mreq, sizeof(mreq));
        }
        else {
                he = gethostbyname(host);
                if (he == NULL) {
                        errno = ENOENT;
                        result = -1;
                }
                else {
                       mreq.imr_multiaddr.s_addr = (**he->h_addr_list);
                       result = setsockopt(sd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &mreq, sizeof(mreq));
                }
        }
	return result;
}

int Socket::valid() const
{
        return sd != -1;
}

int Socket::bind(int ho_port) const
{
        struct sockaddr_in sin;

        sin.sin_family = AF_INET;
#ifndef COMPAT_INET4
        sin.sin_len = sizeof(sin);
#endif
        sin.sin_port = htons(ho_port);
        sin.sin_addr.s_addr = INADDR_ANY;
        memset(sin.sin_zero, '\0', sizeof(sin.sin_zero));
        return ::bind(sd, (struct sockaddr *) &sin, sizeof(sin));
}

/* The value written into port is in host-byte order */
int Socket::getLocalPort(int *port)
{
        struct sockaddr_in sin;
        int sin_len = sizeof(sin);
        int r = getsockname(sd, (struct sockaddr *) &sin, &sin_len);

        if (r == 0) {
                *port = ntohs(sin.sin_port);
        }

        return r;
}

/* The value written into port is in network-byte order */
int Socket::getLocalAddress(struct in_addr *address)
{
        struct sockaddr_in sin;
        int sin_len = sizeof(sin);
        int r = getsockname(sd, (struct sockaddr *) &sin, &sin_len);

        if (r == 0) {
                *address = sin.sin_addr;
        }

        return r;
}


/* The value written into port is in host-byte order */
int Socket::getPeerPort(int *port)
{
        struct sockaddr_in sin;
        int sin_len = sizeof(sin);
        int r = getpeername(sd, (struct sockaddr *) &sin, &sin_len);

        if (r == 0) {
                *port = ntohs(sin.sin_port);
        }

        return r;
}

/* The value written into address is in network-byte order */
int Socket::getPeerAddress(struct in_addr *address)
{
        struct sockaddr_in sin;
        int sin_len = sizeof(sin);
        int r = getpeername(sd, (sockaddr*)&sin, &sin_len);
   	
        if (r == 0) {
                *address = sin.sin_addr;
        }

        return r;
}

/* This is the section of the code which deals with reading configuration data
 * from the Internet module.  It uses sysctl to do this - the module SWI not the
 * command-line application.  The MIB being read/written is net.inet.udp.maxdgram
 */
int Socket::sysctl_maxdgram(int do_set, size_t *value)
{
        int mib[4];
        mib[0] = CTL_NET;
        mib[1] = PF_INET;
        mib[2] = IPPROTO_UDP;
        mib[3] = UDPCTL_MAXDGRAM;

        int result;

        if (do_set) {
                result = sysctl(mib, sizeof(mib) / sizeof(int), NULL, NULL, value, sizeof(*value));
        }
        else {
                size_t bufsize = sizeof(*value);
                result = sysctl(mib, sizeof(mib) / sizeof(int), value, &bufsize, NULL, 0);
        }

        return result;
}

int Socket::sysctl_recvspace(int do_set, size_t *value, size_t protocol)
{
        int mib[4];
        mib[0] = CTL_NET;
        mib[1] = PF_INET;
        if (protocol == IPPROTO_UDP){
        	mib[2] = IPPROTO_UDP;
        	mib[3] = UDPCTL_RECVSPACE;
        }
        else {
        	mib[2] = IPPROTO_TCP;
        	mib[3] = TCPCTL_RECVSPACE;
        }        

        int result;

        if (do_set) {
                result = sysctl(mib, sizeof(mib) / sizeof(int), NULL, NULL, value, sizeof(*value));
        }
        else {
                size_t bufsize = sizeof(*value);
                result = sysctl(mib, sizeof(mib) / sizeof(int), value, &bufsize, NULL, 0);
        }

        return result;
}

size_t Socket::getDgramSize()
{
        size_t value;

        if (sysctl_maxdgram(0, &value) != sizeof(value)) {
                value = 0;
        }

        return value;
}

void Socket::setDgramSize(size_t value)
{
        (void) sysctl_maxdgram(1, &value);
}
size_t Socket::getrecvspace()
{
        size_t value;

        if (sysctl_recvspace(0, &value) != sizeof(value)) {
                value = 0;
        }

        return value;
}
size_t Socket::getTCPrecvspace()
{
        size_t value;

        if (sysctl_recvspace(0, &value, IPPROTO_TCP) != sizeof(value)) {
                value = 0;
        }

        return value;
}

void Socket::setrecvspace(size_t value)
{
        (void) sysctl_recvspace(1, &value);
}

int Socket::ioctl(unsigned long command, void *data)
{
        return socketioctl(sd, command, data);
}


int Socket::makeNonBlocking()
{
        int one = 1;
        return ioctl(FIONBIO, &one);
}

int Socket::makeBlocking()
{
        int zero = 0;
        return ioctl(FIONBIO, &zero);
}

int Socket::eventsOn()
{
        int one = 1;
        return ioctl(FIOASYNC, &one);
}

int Socket::eventsOff()
{
        int zero = 0;
        return ioctl(FIOASYNC, &zero);
}
