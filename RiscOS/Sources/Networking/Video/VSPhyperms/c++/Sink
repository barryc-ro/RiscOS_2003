/**************************************
 Sink.c

impliments standard Sink class.

In this case the MPEGTrans Module

© Acorn Computers Ltd

History:

Date      Who     Description of change
===========================================
31/7/98    AR      File created

**************************************/
#include "Sink.h"
#include "stdlib.h"
#include "stdio.h"
#include "vspSocket.h"

StatBuffer*
Sink::readstats(tagtype tag, size_t *BufferSize)
{
  tagtype tags[2];

  tags[0] = tag;
  tags[1] = ENDOFTAGS;

  return readstats(tags, BufferSize);
}

StatBuffer*
Sink::readstats(tagtype *tags, size_t *BufferSize)
{
  _kernel_swi_regs r;
  //_kernel_oserror *ro_err = NULL;	//pointer to RiscOS error
  int *buffer;

  buffer = new int[((*BufferSize)+3)>>2];

  if (buffer == NULL)
   	MakeError(VSP_Alloc);	// Allocation Error
  else
  {
     	r.r[0] = 0; 		// Flags not used yet
     	r.r[1] = MPEGHandle;
     	r.r[2] = (int)tags;
     	r.r[3] = (int)buffer;
     	r.r[4] = (*BufferSize);

     	MakeErrorOnError(_kernel_swi(MPEGControl_Stats, &r, &r));

     	if (!ErrorExists()) {
     		if (r.r[4] < 0){			// if not enough buffer allocation
     		  	delete[] buffer; buffer = NULL;	// free old buffer and allocate larger

     		  	(*BufferSize) = (*BufferSize)-r.r[4];
     		  	buffer = new int[((*BufferSize)+3)>>2];

			if (buffer == NULL)
 			   	MakeError(VSP_Alloc);
 		 	else
 		 	{
 		      		r.r[0] = 0; 		// Flags not used yet
 		      		r.r[1] = MPEGHandle;
 		      		r.r[2] = (int)tags;
       				r.r[3] = (int)buffer;
       				r.r[4] = (*BufferSize);

     				MakeErrorOnError(_kernel_swi(MPEGControl_Stats, &r, &r));
   			}
   		}//Buffer overflow, increase buffer
     	}
  }//allocation falt
  return (StatBuffer*)buffer;	// there may be more than one
}

Sink::Sink(int Handle):Error()
{
  MPEGHandle = Handle;
}

Sink::~Sink(void)
{
}

error_flag
Sink::ReadNPT(ULINT *time)	// returns the current time since start of play
{
 StatBuffer *buf;		// allocated in read stats
 size_t BufferSize = DefaultBufferSize;

 if (MPEGHandle == 0) return ErrorState();

 (*time) = 0;

 buf = readstats(MPEGControl_Stats_NPT, &BufferSize);

 if (buf!=NULL){

 	if ( buf->Tag != MPEGControl_Stats_NPT )
 		MakeError(VSP_MPEGErr);		// should not happen
 	else
 		(*time) = (buf->Data)/100;

 	delete[] buf; buf = NULL;
 }
 return ErrorState();
}

error_flag
Sink::CheckEOS(void)		// returns boolean
{
  MakeError(VSP_Unimplemented);
  return ErrorState();
}

error_flag
Sink::OpenStream(void)  	// play, should really be constructor
{
  MakeError(VSP_Unimplemented);
  return ErrorState();
}

error_flag
Sink::NotifyEndOfStream(void)
{
   if (MPEGHandle == 0) return ErrorState();
#ifdef DEBUGLIB
   if (Debug(debug_startend)) Debug("calling MPEGControl_play Notify end of stream\n");
#endif
   return MakeErrorOnError(_swix(MPEGControl_Play, _INR(0,1), MPEGControl_EndOfStream, MPEGHandle));
}

error_flag
Sink::CloseStream(void)	// stop, should be destructor
{
 if (MPEGHandle == 0) return ErrorState();
 return MakeErrorOnError(_swix(MPEGControl_CloseStream, _INR(0,1), 2, MPEGHandle));
}

error_flag
Sink::SetPosition(ULINT time)	// jump to time absolute
{
  time = time;
  MakeError(VSP_Unimplemented);
  return ErrorState();
}

error_flag
Sink::SetSpeed(ULINT speed)	// prime the decoder to handle the new speed
{
 if (MPEGHandle == 0) return ErrorState();

#ifdef DEBUGLIB
    if (Debug(debug_time)) Debug("set speed %i\nbollox", speed);
#endif
    return MakeErrorOnError(_swix(MPEGControl_SetSpeed, _INR(0,2), 0, MPEGHandle, speed));
}

/* this method disables the adjustment of playback to the fullness of the audio buffers */
/* for server push this adjustment is necessary to overcome clock drift */
/* for client pull it is unnecessary and does not work with NEC audio data aggregation */
error_flag
Sink::SuppressAudioSyncForThisStream(void)
{
   if (MPEGHandle == 0) return ErrorState();
   
#ifdef DEBUGLIB
    if (Debug(debug_streaminfo)) Debug("turning audiosync off\n");
#endif

   return MakeErrorOnError(_swix(MPEGControl_SetAudioParameters, _INR(0,2), 2, MPEGHandle, 1));
}
