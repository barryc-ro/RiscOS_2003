/**************************************
 MessageQ.c

implements standard MessageQ class.

© Acorn Computers Ltd

History:

Date      Who     Description of change
===========================================
21/1/99    AR      File created

This implements the modular side of the 
message queue.  It will require an
identifier in order to work.
**************************************/

#include "MessageQ.h"
#include "VSPHdr.h"
#include "swis.h"
#include "string.h"

#ifdef DEBUGLIB
void
MessageQ::DumpHeader(message_queue_header *header)
{
  Debug("size:        %i", header->size);
  Debug("Sender_id    0x%8.8X", header->Sender_id);
  Debug("RFU          %i", header->RFU);
  Debug("flags        %i", header->flags);
  Debug("message_id   0x%8.8X", header->message_id);
  Debug("timestamp    %i", header->timestamp);
  Debug("sender ref   %i", header->Sender_ref);
}
#endif  

inline void
MessageQ::setheader(message_queue_header *header)
{
  header->Sender_id = VSP_00;	// swi chunk number
  header->RFU = 0;
  header->flags = 0;
  header->Sender_ref = reference;
  
  _swix(OS_ReadMonotonicTime, _OUT(0), &(header->timestamp));

}
//
// sent in the case of an error that can be easily fixed
// such as requesting a change of state that is not supported
//	
error_flag
MessageQ::send_Error( ErrorBlk *error )
{
  error_message message;
  
  setheader(&message.header);
  
  message.header.size = sizeof(error_message);
  message.header.message_id = SendMessage_Error;
  
  error->copy_into_ro_err(&(message.err));
  
#ifdef DEBUGLIB
  DumpHeader(&message.header);
  Debug("errnum       %i", message.err.errnum);
  Debug("errmess      %s", message.err.errmess);
  return NoError;
#else  
	return MakeError(_swix(MessageQueueSend, _INR(0,2), 0, identifier, &message));
#endif
}
//
// sent in the case of debugging
//
error_flag
MessageQ::send_Diagnostic ( const char *string )
{
  diagnostic_message message;
  
  setheader(&message.header);
  
  message.header.size = sizeof(diagnostic_message);
  message.header.message_id = SendMessage_Diagnostic;
  
  strncpy(message.string, string, MaxDiagnosticStringLength-1);
  
  message.string[MaxDiagnosticStringLength-1] = '\0';	// Null terminate
  
#ifdef DEBUGLIB
  DumpHeader(&message.header);
  Debug("string:      %s", message.string);
  return NoError;
#else  
  return MakeError(_swix(MessageQueueSend, _INR(0,2), 0, identifier, &message));
#endif
}

//
// sent on the receipt of the start of stream
//
error_flag
MessageQ::send_StartNotification ( ULINT block )
{
  startend_message message;
  
  setheader(&message.header);
  
  message.header.size = sizeof(startend_message);
  message.header.message_id = SendMessage_Start;
  
  message.block_number = block;
  
#ifdef DEBUGLIB
  DumpHeader(&message.header);
  Debug("block        %i", message.block_number);
  return NoError;
#else  
  return MakeError(_swix(MessageQueueSend, _INR(0,2), 0, identifier, &message)); 
#endif
}

//
// sent on the receipt of the start of stream
//
error_flag
MessageQ::send_EndNotification ( ULINT block )
{
  startend_message message;
  
  setheader(&message.header);
  
  message.header.size = sizeof(startend_message);
  message.header.message_id = SendMessage_End;
  
  message.block_number = block;
  
#ifdef DEBUGLIB
  DumpHeader(&message.header);
  Debug("block        %i", message.block_number);
  return NoError;
#else  
  return MakeError(_swix(MessageQueueSend, _INR(0,2), 0, identifier, &message)); 
#endif
}

//
// sent when a stream is deleted
//
error_flag
MessageQ::send_StreamClosing ( ErrorBlk *error )
{
  if (error == NULL){
  	message_queue_header message;
  
  	setheader(&message);
  
  	message.size = sizeof(message_queue_header);
  	message.message_id = SendMessage_StreamClosed;
  
#ifdef DEBUGLIB
	DumpHeader(&message);
  return NoError;
#else  
  	return MakeError(_swix(MessageQueueSend, _INR(0,2), 0, identifier, &message));
#endif
  }
  else {
    	error_message message;
  
  	setheader(&message.header);
  
  	message.header.size = sizeof(error_message);
  	message.header.message_id = SendMessage_StreamClosed;
  
  	error->copy_into_ro_err(&(message.err));
  
#ifdef DEBUGLIB
  	DumpHeader(&message.header);
  	Debug("errnum       %i", message.err.errnum);
  	Debug("errmess      %s", message.err.errmess);
  return NoError;
#else  
  	return MakeError(_swix(MessageQueueSend, _INR(0,2), 0, identifier, &message));
#endif
  }

}
