
#include <stdlib.h>
#include "kernel.h"
#include "ctype.h"
#include "swis.h"
#include "stdio.h"

#define VSP_SetServer			0x043c40
#define VSP_OpenStream                  0x043c41
#define VSP_CloseStream                 0x043c42
#define VSP_CheckEndOfStream            0x043c43
#define VSP_SetSpeed                    0x043c44
#define VSP_SetPosition                 0x043c45
#define VSP_ReadNPT                     0x043c46
#define VSP_GetAssetList                0x043c47
#define VSP_GetSceneList                0x043c48
#define VSP_GetMiscInfo                 0x043c49

typedef unsigned int ULINT;
typedef unsigned char UCHAR;

typedef struct {// asset descriptor
        ULINT   asset_id;               // unique identifier for asset
        UCHAR   time_of_last_update[16]; // formatted data structure
        ULINT   registration;           // set to 1
        ULINT   bit_rate;               // MPEG bit rate in bps
        ULINT   asset_type;             // organised or composition asset
        ULINT   encoding;               // MPEG 1 or 2
        ULINT   block_length;           // length on the servers disk
        ULINT   total_time;             // total time in 0.5 second units
        UCHAR   video_title[20];        // shortened title
        UCHAR   full_title[80];         // full title in ascii furigana
        ULINT   ff_time;                // time to run in fast forward
        ULINT   rw_time;                // time to fast rewind
        ULINT   video_type;             // PAL or NTSC
        ULINT   RFU[2];
        ULINT   video_status;           // state of registration
        ULINT   RFU_1[3];
} AssetIDDescriptor;

void DumpAsset(AssetIDDescriptor *asset){
        printf("\nasset id (%i)\n", asset->asset_id);  
        printf("last update %8.8X%8.8X\n", (int)asset->time_of_last_update[8], 
        				(int)asset->time_of_last_update);     
        printf("registration %i\n", asset->registration);         
        printf("bitrate %i\n", asset->bit_rate);            
        printf("asset type %i\n", asset->asset_type);         
        printf("encoding %i\n", asset->encoding);           
        printf("block_length %i\n", asset->block_length);      
        printf("total time %i\n", asset->total_time);       
        printf("short title %s\n", asset->video_title); 
        printf("long title  %s\n", asset->full_title); 
        printf("ff time  %i\n", asset->ff_time);     
        printf("rw time  %i\n", asset->rw_time);     
        printf("video type  %i\n", asset->video_type);    
        printf("video status  %i\n", asset->video_status);
}
 
int main(int argc, char *argv[])
{
  int swi_no, i, count = 0;
  _kernel_swi_regs regs;
  _kernel_oserror *err;
  AssetIDDescriptor *asset;
  
  if (argc < 2){
     printf("usage !TestApp <swi offset> <registers...>\n");
     printf("or repeat !TestApp -r <n> <swi offset> <registers...>\n");
     return 1;
  }
  
  for (i=0;i<10;i++) regs.r[i] = 0;
  
  if (argv[1][1] == 'r'){
    	count = atoi(argv[2]);
      	swi_no = atoi(argv[3]);
  	for (i = 4; i < argc; i++){
    		if (isdigit(argv[i][0]))
  			regs.r[i-4] = atoi(argv[i]);
  		else
  	   		regs.r[i-4] = (int)argv[i];
        }  
  }
  else {
    swi_no = atoi(argv[1]);
    for (i = 2; i < argc; i++){
    	if (isdigit(argv[i][0]))
  		regs.r[i-2] = atoi(argv[i]);
  	else
  	   	regs.r[i-2] = (int)argv[i];	// copy pointer
  	   					// be careful we are using the command line
  	   					// memory allocation
    }
  }

  for (i=0; i<=count; i++) { 
  	switch (swi_no){
	    case 0:
	  	err = _kernel_swi(VSP_SetServer, &regs, &regs);
	  	break;
	    case 1:
		err = _kernel_swi(VSP_OpenStream, &regs, &regs);
	  	break;
	    case 2:
	  	err = _kernel_swi(VSP_CloseStream, &regs, &regs);
	  	break;
	    case 3:
	  	err = _kernel_swi(VSP_CheckEndOfStream, &regs, &regs);
	  	break;
	    case 4:
	  	err = _kernel_swi(VSP_SetSpeed, &regs, &regs);     	
	  	break;
	    case 5:
	  	err = _kernel_swi(VSP_SetPosition, &regs, &regs);    
	  	break;
	    case 6:
	  	err = _kernel_swi(VSP_ReadNPT, &regs, &regs);         
	  	break;
	    case 7:
	    	regs.r[6] = regs.r[4] * sizeof(AssetIDDescriptor);
	    	regs.r[5] = (int)malloc(regs.r[6]);
	    	if (regs.r[5] == NULL)
	    		printf("cannot allocate asset list");
	    	else {
	  		err = _kernel_swi(VSP_GetAssetList, &regs, &regs);
	  		for (i = 0; i < regs.r[4]; i++){
	  			asset = (AssetIDDescriptor*)(regs.r[5] + i*sizeof(AssetIDDescriptor));
	  			DumpAsset(asset);
	  		}
	  		free((AssetIDDescriptor*)regs.r[5]);
	  		regs.r[5] = 0;
	  	}	 
	  	break;
	    case 8:
	  	err = _kernel_swi(VSP_GetSceneList, &regs, &regs);  
	  	break;	
	    case 9:
	  	err = _kernel_swi(VSP_GetMiscInfo, &regs, &regs);  
	  	break;	
	  default:
	  	printf("Unknown swi call\n");
	  }
	  if (err != NULL){
	     printf("Error: %s\n", err->errmess);
	     break;
	  }
	  else {
	    printf("R[0] = %i\nR[1] = %i\nR[2] = %i\nR[3] = %i\nR[4] = %i\n",
	    	regs.r[0], regs.r[1], regs.r[2], regs.r[3], regs.r[4]);
	  }
	 
  }
  }
