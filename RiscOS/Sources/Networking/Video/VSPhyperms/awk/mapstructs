
function print_header()
{
	printf("/**************************************\n");
	printf("  NECstruct.c++\n");
	printf("\n");
	printf("Defines type mappings for structures in\n");
	printf("NECstruct.h header file\n");
	printf("\n");
	printf("WARNING: This file is automatically generated. DO NOT EDIT\n");
	printf("\n");
	printf("**************************************/\n\n\n");
	printf("#include <stdio.h>\n");
	printf("#include \"NECstruct.h\"\n");
}

function print_test()
{
	printf("\n\n#ifdef TEST\n#include <assert.h>\n");
	printf("#include <signal.h>\n#include <stdlib.h>\n");
	printf("int main(void)\n{\n");
	printf("\thton_structure_desc *p;\n");
	printf("\tint i,sum;\n\n");
	printf("\t(void) signal(SIGABRT, exit);\n");
	for (i = 0; i < typecount; ++i) {
		split(substr(type[i],5), parent, "[[]");
		printf("\t/* Testing type %s against base */\n",
			type[i], parent[1]);
		printf("\tfor (i=0, sum=0, p=map_%s; *p; ++p) {\n", parent[1]);
		printf("\t\tsum += (*p<0 ? -*p : *p);\n");
		printf("\t}\n");
		printf("\tassert(sizeof(%s) == sum);\n\n", parent[1]);
	}
	printf("\treturn 0;\n}\n#endif /*TEST*/\n");
}

function outputstruct(strname)
{
	split(strname, typename, ";");
	printf("\nhton_structure_desc %s = {\n", typename[1]);
	for (i=0; i<member_count; ++i) {
		printf("\t");
		if (member[i] == "UCHAR" || member[i] == "CHAR") {
			printf("-");
		}
		else if (substr(varname[i],1,3) == "RFU") {
			printf("-");
		}
		printf("sizeof(%s", member[i]);
	        if (arraysize[i] > 1) printf("[%d]", arraysize[i]);
		printf("),\n");
	}
	printf("\t0 };\n");
	
	type[typecount++] = typename[1];
}

BEGIN { working = 0; typecount = 0; print_header(); }

NF < 2 { next; }

{
  split($2, Field, " ");
  if (Field[1] == "MAGICMARKER") { working = !working; next; }
  if (working == 0) { next; }
  /*printf("%d, `%s'\n", working, $2); next;*/

  split($1, Type, " ");
  if (Type[1] == "typedef") {
    member_count = 0;
    next;
  }
  if (Type[1] == "}") {
    next;
  }
  if (Type[1] == "extern") {
    outputstruct($3);
    next;
  }
  split($2, var, "[");
  split(var[2], array, "]");
  member[member_count] = Type[1];
  varname[member_count] = var[1];
  arraysize[member_count] = array[1];
  member_count++;
}

END { print_test(); }
