/**************************************
 MessageQ.h

descibes standard MessageQ class.

© Acorn Computers Ltd

History:

Date      Who     Description of change
===========================================
21/1/99    AR      File created

This implements the modular side of the 
message queue.  It will require an
identifier in order to work.
**************************************/

#include "Error.h"

#define MessageQueueSend		0x52882
#define MaxDiagnosticStringLength	256

typedef enum {
  	Error_MessageQueue_NoBufferSpace = 0x00816200,
  	Error_MessageQueue_BadMessageSize,
  	Error_MessageQueue_MessageTooLarge,
  	Error_MessageQueue_UnknownQueue,
  	Error_MessageQueue_QueueEmpty,
  	Error_MessageQueue_QueueFull
} message_error;

typedef enum {
  	SendMessage_Error = 		0x43c40,
  	SendMessage_Diagnostic,
  	SendMessage_Start,
  	SendMessage_End,
  	SendMessage_StreamClosed
} send_message;

typedef struct{
  	ULINT size;
        ULINT Sender_id;
        ULINT RFU;
        ULINT flags;
        ULINT message_id;
        ULINT timestamp;
} message_queue_header;

typedef struct{
  	message_queue_header header;
  	_kernel_oserror err;
} error_message;

typedef struct{
  	message_queue_header header;
  	char string[MaxDiagnosticStringLength];
} diagnostic_message;

typedef struct{
  	message_queue_header header;
  	ULINT block_number;
} startend_message;

// closing message is either just a header or an error_message

class MessageQ : public Error
{
  int identifier;
#ifdef DEBUGLIB
	void DumpHeader(message_queue_header *header);
#endif  
  	inline void setheader(message_queue_header *header);
  
  public:
  	MessageQ(int handle):Error() { identifier = handle; }
  	
  	error_flag send_Error( ErrorBlk  *error );
  	error_flag send_Diagnostic ( const char *string );
  	error_flag send_StartNotification ( ULINT block );
  	error_flag send_EndNotification ( ULINT block );
  	error_flag send_StreamClosing ( ErrorBlk *error = NULL );
};
