/**************************************
 Server Control.h

descibes standard Server class.

© Acorn Computers Ltd

History:

Date      Who     Description of change
===========================================
31/7/98    AR      File created

**************************************/

#ifndef _ServerControl_H_
#define _ServerControl_H_

#include "Error.h"
#include "List.h"
#include "NECStruct.h"
#include "vspSocket.h"
#include "MessageQ.h"

#define  NEC_databurstval 	 4	// defined in spec pg 36, "thou shalt not request more than 4"
#define  MAX_scene_list		64	// this is the number of scenes that can be contained in a scene list;

typedef enum {
	server_control,
	server_ip_address,
	server_ATM
} server_type;
	
// command numbers
#define COMMAND_ACK			0x2b	// ACK/NAK
#define COMMAND_NAK			0x2c
#define COMMAND_CPNN			0x31	// control port number notification
#define COMMAND_assetlist_request	0x21
#define COMMAND_assetlist_response	0x81
#define COMMAND_scenelist_request	0x27
#define COMMAND_scenelist_response	0x87
#define COMMAND_assetpres_request	0x22	// asset presentation request
#define COMMAND_assetpres_response	0x82
#define COMMAND_assetend_request	0x23
#define COMMAND_assetend_response	0x83
#define COMMAND_playback_request	0x2a
#define COMMAND_playback_response	0x8a
#define COMMAND_startend_notification	0x32

class ServerList: public List
{
  public:
  	//ServerList() {};
  	//~ServerList() {};
  	
	error_flag inetEvent(int code, int identifier, claim_flag *claim);
};
  	
class InternetObject : public ListObject
{
  private:
	ownership_flag owners;		// this allows for stream and interface ownership without one deleting the others reference
  	MessageQ *message_pipe;		// this is the async message handler if passed in set server.

  protected:
	ULINT MAX_requested_block;	// error checking to avoid multilple requests for the same thing
  
  public:
  	struct in_addr address;
 	ULINT portnumber;

   	bool comms_flag;	// if an ACK/NAK has been sent since last dummy
  	InternetObject(struct in_addr *server, ULINT port);
  	virtual ~InternetObject();
  	
  	ULINT getMaxRequestedBlock(void) 	{ return MAX_requested_block; }
  	
  		// ownership battles
  	int	stream_uses(void) 		{return (owners & owner_stream);}
  	int	interface_uses(void) 		{return (owners & owner_interface);}
  	void 	set_stream_owner(void) 		{ owners = (ownership_flag)(owners | owner_stream); }
  	void 	set_interface_owner(void) 	{ owners = (ownership_flag)(owners | owner_interface); }
  	void	clear_stream_owner(void)	{ owners = (ownership_flag)(owners & ~owner_stream); }
  	void 	clear_interface_owner(void) 	{ owners = (ownership_flag)(owners & ~owner_interface); }
  	
  	error_flag send_message_Error( ErrorBlk  *error );
  	error_flag send_message_Diagnostic ( const char *string );
  	error_flag send_message_StartNotification ( ULINT block );
  	error_flag send_message_EndNotification ( ULINT block );
  	error_flag send_message_StreamClosing ( ErrorBlk *error = NULL );
  	//-----
  	inline bool message_pipe_exists(void) 				{ return (bool)(message_pipe != NULL); }
  	void create_message_pipe(ULINT identifier, ULINT reference) 	{ message_pipe = new MessageQ(identifier, reference); }
  	
  	virtual int		getSocketDescriptor(void);
   	virtual server_type 	InternetObjectType(void);
 	virtual	error_flag 	inetevent(UCHAR*, ULINT*, ULINT);
  	virtual error_flag 	SendAck(ULINT, ULINT, ACK_type);
  	virtual error_flag 	SendNak(ULINT, LINT, ULINT, LINT); 
   	virtual error_flag 	GetAssetList(_kernel_swi_regs *);
  	virtual error_flag 	GetSceneAssetList(_kernel_swi_regs *);
	virtual error_flag 	send_playback_request(ULINT, ULINT, ULONG, ULINT, ULINT);
  	virtual error_flag 	AssetEnd(ULINT, ULINT);

};

class Server : public InternetObject
{
  /*
  this defines the specifices for the server it will
  define the protocol headers.
  */

  private:
  	Socket SocketDescriptor;	// this is a vspSocket

  	ACK_Block	ack;		// these avoid memory allocation and re-initialisation.
  	NAK_Block	nak;
  	
  	ULINT certification_code;	// an incremental certification code
  	ULINT timeout_period;		// this is the timeout on waiting for server communication
  	ULINT assetresponse_dgram_size; // datagram size set on the server
  	
        error_flag setSocketError(int socket_result);

 	// protocol messages
  	error_flag send_assetlist_request(ULINT select_flags, size_t start, size_t number);
  	error_flag get_assetlist_response(size_t *number, AssetIDDescriptor *buffer, size_t *buffer_size);
  	
  	error_flag send_scenelist_request(ULINT asset_id);
  	error_flag get_scenelist_response(size_t *number, SceneInformationDescriptor *buffer, size_t *buffer_size);
  	
  	error_flag send_assetpresentation_request(ULINT init_value, PlayElementRequest playlist[], size_t play_size, struct in_addr ipaddr, ULINT port);

  	// this sets the server port and ip
  	error_flag get_assetpresentation_response(struct in_addr *ipaddr, ULINT *port, ULINT *stream_time,
  						ULINT *dgram_size, ULINT *bitrate, ULINT *fast_play_ratio); 
  	
	error_flag get_playback_response(ULINT *result);
	
  	error_flag SendData(void *buffer, size_t size);
  	error_flag GetData(void *buffer, size_t size);
  	error_flag PeekHeader(UCHAR *command);

#ifdef DEBUGLIB  	
  	size_t ReadDataToDebug(void);
#endif  	  

  public:
  	server_type InternetObjectType(void) 	{ return server_control; }
 
  	int 	   getSocketDescriptor(void);
        error_flag getLocalAddress(in_addr *ipAddress) { return setSocketError(SocketDescriptor.getLocalAddress(ipAddress)); }
  	void	   setMaxRequestedBlock(ULINT value)	{  MAX_requested_block = value; }
  		// ownership battles
  		
    	Server(struct in_addr *server, ULINT port, ULINT timeout);
  	~Server();
  	
  	//-----

  	error_flag inetevent(UCHAR *event, ULINT *result, ULINT play_id);

  	error_flag SendAck(ULINT MAX_storableBlocks, ULINT MAX_complete_block, ACK_type datatype = data);
  	error_flag SendNak(ULINT BlockStart, LINT DatagramStart, ULINT BlockEnd, LINT DatagramEnd); 

   	error_flag GetAssetList(_kernel_swi_regs *regs);
  	error_flag GetSceneAssetList(_kernel_swi_regs *regs);
  	error_flag AssetPresentation(ULINT init_value, PlayElementRequest playlist[], size_t size, ULINT *stream_time,
  			struct in_addr *ipaddr, ULINT *port, ULINT *dgram_size, ULINT *bitrate, ULINT *fast_play_ratio);
	error_flag send_playback_request(ULINT state_id, ULINT MAX_storableBlock, ULONG AckSeq, ULINT time = 0, ULINT mode = 0);
 
  	error_flag AssetEnd(ULINT status, ULINT endflag);
};

#endif
