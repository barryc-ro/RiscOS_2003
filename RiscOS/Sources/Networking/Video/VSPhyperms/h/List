/**************************************
 List.h
	
descibes standard list class.

© Acorn Computers Ltd

History:

Date      Who     Description of change
===========================================
31/7/98    AR      File created

**************************************/

#ifndef _List_H_
#define _List_H_

#include "Error.h"

#define ListDefaultSize 10
#define ListChangeSize	10

#define INVALID_LIST_ID  0
// valid values are 1 to INT_MAX

class ListObject : public Error
{
  public:
  	ListObject(void):Error() {};
  	virtual ~ListObject() {};
};

class List : public Error
{
  /* 
  This defines a dynamic list element that can increase its size if necessary
  by allocating more memory and copying the array over.  Similarly by decreasing
  the size if necessary.
  */
  private: 	// private by inheritance
  	semaphor   reentrant;		// ensures no reentrancy when not allowed
        int 	   MaxSize;		// the size of allocated array
        int	   CurrentSize;		// the number of elements
        int	   ExpectedSize;	// this is the used to ensure that an object has been properly deleted
	int	   current_guess;	// this is the assigned identifier counter
        
 	error_flag EnsureUnique(int);
 	error_flag increasesize(void);
 	error_flag decreasesize(void);
 	error_flag CreateUniqueID(int *id);
 	
  protected:
 	ListObject **object;		// pointers to generic objects;
 	int	   *identifiers;	// an array of unique identifiers

  public:	// public methods for the access of the list
  	List(void);			// creates a list of default size
  	List(int size);			// creates a list of size
  	~List();			// deletes allocated memory
  	
  	inline int Size(void) { return CurrentSize; }
  	
  	error_flag Add(ListObject *l_item, int *id);	// returns a boolean success value to l_item
  	error_flag Remove(int identifier);		// returns a boolean success value
  							// returns a pointer to the object in item 
  	error_flag identify(ListObject **item, int identifier);	

 	error_flag ErrorState(void) {
 	  	if (	(ErrorNum() == VSP_InvalidValue)||
 	  		(ErrorNum() == VSP_InvalidValue)||
 	  		(ErrorNum() == VSP_InvalidValue) ) RemoveErr();
 	  	return Error::ErrorState();}
};

#endif	//_List_H_
