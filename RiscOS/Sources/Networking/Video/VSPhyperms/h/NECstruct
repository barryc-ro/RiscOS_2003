/**************************************
 Server NECstruct.h

NEC structure definitions

© Acorn Computers Ltd

History:

Date      Who     Description of change
===========================================
03/09/98  SNB      File created

**************************************/

#ifndef _NECstruct_H_
#define _NECstruct_H_

/*********************************************************/
/* BEWARE: bytesex is BIG-ENDIAN on data from NEC server */
/*********************************************************/

#include "VSP_types.h"

/*
 *  For all structures in this file, you MUST ensure consistency with
 *  NECstruct.c++'s definitions of the structure maps which are used
 *  by the bytesex reverser code.
 *
 *
 *  All Reserved for Future Use fields must contain the string RFU.
 *  All map_ symbols must be just prefixes of the structure they map.
 */

#ifdef __cplusplus
extern "C" {
#endif

/*
 * This is used to reverse the byte-order in the data structure.  The function
 * name retains the style of the standard short & long reversal routines in
 * TCPIPLibs.
 *
 * hton_structure_desc describes the layout of the structure being reverse.  It is
 * an array of signed char terminated by 0.  Each value represents the size of the
 * data members in the structure in order.  Fields which are not to be reversed are
 * stored as minus the size of that member (to allow char arrays to be left untouched
 * without needing a huge number of 1s in the structure)
 *
 * Return value: NoError -> OK.
 *               ErrorOccurred -> structure size did not match descriptor
 */
#ifdef __cplusplus
/* cfront can't handle the signed keyword, char is signed by default anyway */
typedef short hton_structure_desc;
#else
typedef signed short hton_structure_desc;
#endif

extern error_flag hton_str(
        void */*data*/,
        const hton_structure_desc */*typedescriptor*/,
        size_t /*obj_size - size of object being converted */
        );

#define hton_structure(data,typedescriptor,type) hton_str(data,typedescriptor,sizeof(type))
#define ntoh_structure(data,typedescriptor,type) hton_str(data,typedescriptor,sizeof(type))


// this is used to calculate memory allocations
// it is a place holder for datagram headers.
// its size must be greater than any datagram header
typedef struct {
  	UCHAR   RFU[72];
} DummyNECDatagram;
extern hton_structure_desc map_DummyNECDatagram[];
/* MAGICMARKER mapstruct script looks for this line */
  
/* sizeof this structure is 64 */
typedef struct {
        ULONG   block_number;
        ULONG   dgram_seq;
        ULONG   dgram_size;
        ULONG   dgram_total;
        USHORT  data_type;
        USHORT  status_word;
        ULONG   playback_classification_id;
        ULONG   payload_offset_in_block;
        USHORT  frame_boundary_flag;
        USHORT  frame_type;
        ULONG   RFU[8];
} NECDatagram;
extern hton_structure_desc map_NECDatagram[];

#define MULTICAST_REL2

#ifdef MULTICAST_REL2 		   	  	
// sizeof this structure is 72 bytes
typedef struct {
  	ULINT	EMPacketID;
  	ULINT	PayloadLength;
  	ULINT	MaxLength;
  	ULINT	EMPacketSize;
  	ULINT	fragmentOffset;
  	UCHAR	Continuity;
  	UCHAR	NodeType;
  	UCHAR	SceneCompFlag;
  	UCHAR	SceneCounter;
  	ULINT	StreamPointer;
  	ULINT	TimeStamp;  	
  	ULINT	DataRate;	//bit rate of MPEG stream in Kbps
  	UCHAR	DataType;
  	UCHAR	VideoType;
  	UCHAR	StreamType;
  	UCHAR	AudioType;
  	USHORT	H_pixels;
  	USHORT	V_pixels;
  	ULINT	GOP_Offset;
  	ULINT	AudioSize;
  	UCHAR	AlignmentInfo;
  	UCHAR	RFU[19];
} MultiCastDatagram;
extern hton_structure_desc map_MultiCastDatagram[];
#else
#error multicast release 1 no longer supported as it requires work
// sizeof this structure is 36 bytes
typedef struct {
  	ULINT	EMPacketID;
  	ULINT	PayloadLength;
  	ULINT	DataRate;	//bit rate of MPEG stream in Kbps
  	USHORT	H_pixels;
  	USHORT	V_pixels;
  	ULINT	MaxLength;
  	ULINT	TimeStamp;
  	ULINT	EMPacketSize;
  	ULINT	fragmentOffset;
  	UCHAR	Continuity;
  	UCHAR	DataType;
  	UCHAR	RFU[2];
} MultiCastDatagram;
#endif
	
// sizeof this structure is 96.
typedef struct {
        ULONG   block_number;
        ULONG   block_size;
        USHORT  image_width;
        USHORT  image_height;
        ULONG   playback_time;
        ULONG   brokenlink_flag_position;       // Not used
        ULONG   GOP_start_offset;
        USHORT  status_word;
        USHORT  scene_number;
        ULONG   audio_size;
        UINT64  start_pts_value;                // Not used
        ULONG   offset_from_start_pts_value;    // Not used
        ULONG   video_start_time;
        ULONG   video_end_time;
        ULONG   encode_time;
        ULONG   bit_rate_value;
        ULONG   RFU[9];
} NECBlockHeader;
extern hton_structure_desc map_NECBlockHeader[];

// Server Control specific data structures

typedef struct {
        USHORT  interface_number;       // usually zero
        UCHAR   route_type;             // usually zero
        UCHAR   command_number;         // this is unique along requests
        ULINT   command_length;
} PacketHeader;                         // note this is word aligned
extern hton_structure_desc map_PacketHeader[];

typedef struct {// command number = 0x31
        USHORT  interface_number;       // usually zero
        UCHAR   route_type;             // usually zero
        UCHAR   command_number;         // this is unique along requests
        ULINT   command_length;
        ULINT   message_version_num;
        ULINT   result;
        ULINT   connection_port_number; // unique port number
        ULINT   RFU[5];                 // reserved
} ControlPortNumberNotification;
extern hton_structure_desc map_ControlPortNumberNotification[];

typedef struct {// command number = 0x2b
        USHORT  interface_number;       // usually zero
        UCHAR   route_type;             // usually zero
        UCHAR   command_number;         // this is unique along requests
        ULINT   command_length;         // 40 bytes
        ULINT   certification_code;     // unused
        LINT    data_type;              // 0 or -2 for dummy
        ULINT   data_rate;              // unused = 0
        ULINT   max_sequence;           // Max sequence number
        ULINT   min_sequence;           // next sequence number
        ULINT   RFU[5];                 // reserved for future use
} ACK_Block;
extern hton_structure_desc map_ACK_Block[];

typedef struct  {// command number = 0x2c
        USHORT  interface_number;       // usually zero
        UCHAR   route_type;             // usually zero
        UCHAR   command_number;         // this is unique along requests
        ULINT   command_length;         // 40 bytes
        ULINT   certification_code;     // unused
        ULINT	BlockStart;		// 0 or -2 for dummy
        LINT    DatagramStart;          // unused = 0
        ULINT   BlockEnd;		// Max sequence number
        LINT    DatagramEnd;		// next sequence number
        ULINT   RFU[5];                 // reserved for future use
} NAK_Block;
extern hton_structure_desc map_NAK_Block[];

// ASSET intercourse structures

typedef struct {// command number = 0x21
        USHORT  interface_number;       // usually zero
        UCHAR   route_type;             // usually zero
        UCHAR   command_number;         // this is unique along requests
        ULINT   command_length;         // 40 bytes
        ULINT   certification_code;     // VSP defined
        UCHAR   request_type;           // 0x01
        UCHAR   continuity_flag;        // is this more info
        UCHAR   asset_status_selection; // selection based on stream status
        UCHAR   asset_type_selection;   // TV type
        ULINT   starting_entry;         // starting at asser number X
        ULINT   number_of_entries;      // give me Y entries
        ULINT   sort_type;              // asset ID or Furigana
        ULINT   RFU[5];
} AssetListRequest;
extern hton_structure_desc map_AssetListRequest[];


typedef struct {// command number = 0x81
        ULINT   certification_code;     // reflected from above
        UCHAR   request_type;           // 0x01
        UCHAR   continuity_flag;        // continued or not
        UCHAR   dummy[2];               // 0x0000
        ULINT   result;                 // error number or 0
        ULINT   total_number_of_assets; // on the server
        ULINT   number_of_entries;      // number returned
        ULINT   disk_usage;             // unused
        ULINT   RFU[4];
} AssetListResponseHeader;
extern hton_structure_desc map_AssetListResponseHeader[];

typedef struct {// asset descriptor
        ULINT   asset_id;               // unique identifier for asset
        UCHAR   time_of_last_update[16];        // formatted data structure
        ULINT   registration;           // set to 1
        ULINT   bit_rate;               // MPEG bit rate in bps
        ULINT   asset_type;             // organised or composition asset
        ULINT   encoding;               // MPEG 1 or 2
        ULINT   block_length;           // length on the servers disk
        ULINT   total_time;             // total time in 0.5 second units
        UCHAR   video_title[20];        // shortened title
        UCHAR   full_title[80];         // full title in ascii furigana
        ULINT   ff_time;                // time to run in fast forward
        ULINT   rw_time;                // time to fast rewind
        ULINT   video_type;             // PAL or NTSC
        ULINT   RFU[2];
        ULINT   video_status;           // state of registration
        ULINT   RFU_1[3];
} AssetIDDescriptor;
extern hton_structure_desc map_AssetIDDescriptor[];

typedef struct {// command number = 0x22
        USHORT  interface_number;       // usually zero
        UCHAR   route_type;             // usually zero
        UCHAR   command_number;         // this is unique along requests
        ULINT   command_length;         // 112 + 20 * items in playlist;
        ULINT   certification_code;
        ULINT   my_IP_address;          // IP address of STB
        ULINT   client_type;            // set to 1
        ULINT   packet_interval;        // the transmittion interval
        ULINT   initial_packet_num;     // the number of the first data block
        ULINT   my_udp_port;            // the udp port to address the traffic
        ULINT   playlist_num;           // number of elements in the playlist, 0 for one
        ULINT   QOS_control;            // set to 0
        UCHAR   log_comment[64];        // string to be logged on the server.
        ULINT   extension_flags;
        ULINT   RFU[3];
} AssetPresentationRequest;
extern hton_structure_desc map_AssetPresentationRequest[];

typedef struct {// Playlist can be one this is an integral part of the above structure
        ULINT   asset_id;
        ULINT   viewing_start_time;     // this is ignored in normal play of one asset;
        ULINT   viewing_end_time;       // this is ignored in normal play of one asset;
        ULINT   RFU[2];
} PlayElementRequest;
extern hton_structure_desc map_PlayElementRequest[];

/* the following represent the extensions to the presentation request that extend
 * exist after the play list these are not contained within a structure as they are
 * byte types and therefore don't need re-ordering
 */
#define AuthorizationSize 260
#define ATMByteSize       20

typedef struct {// command number = 0x82
        ULINT   certification_code;
        ULINT   result;                 // error code
        ULINT   wait_flag;              // 0 = ready to play
        ULINT   fast_playback;          // a fast play/rewind file exists
        ULINT   total_time;             // time to play video guessed if being registered
        ULINT   RFU[2];
        ULINT   transmission_rate;      // set to 1
        ULINT   bit_rate;               // the bitrate of the video
        ULINT   asset_type;             // organised or not
        ULINT   encoding_type;          // MPEG 1 or 2
        ULINT   length_on_disk;         // unused
        ULINT   num_of_blocks;          // maximum number of requestable blocks
        ULINT   server_port;            // port that the traffic is comming from, reference
        ULINT   ff_time;                // time to run the fast forward file
        ULINT   rw_time;                // time to run the rewind file
        ULINT   max_dumb_pack;          // unused
        ULINT   ff_ratio;               // ratio of fast forward to normal play
        ULINT   video_status;           // registration
        UINT64  data_size;              // unused
        ULINT   video_type;             // PAL, NTSC
        ULINT   stream_live;            // time in milliseconds of transmission data
        ULINT   server_IP;              // reference address of server NIC
        ULINT   datagram_size;          // size of transmission datagram
        ULINT   RFU_1[5];
} AssetPresentationResponse;
extern hton_structure_desc map_AssetPresentationResponse[];

typedef struct {// Playlist can be one this is an integral part of the above structure
        ULINT   asset_id;
        ULINT   viewing_start_time;
        ULINT   viewing_end_time;
} PlayElementResponse;
extern hton_structure_desc map_PlayElementResponse[];

typedef struct {//command number 0x23
        USHORT  interface_number;       // usually zero
        UCHAR   route_type;             // usually zero
        UCHAR   command_number;         // this is unique along requests
	ULINT	command_length;
	ULINT	certification_code;
	ULINT	end_flag;
	ULINT	asset_status;
	ULINT	RFU[5];
} AssetEndRequest;
extern hton_structure_desc map_AssetEndRequest[];

typedef struct {
        USHORT  interface_number;       // usually zero
        UCHAR   route_type;             // usually zero
        UCHAR   command_number;         // this is unique along requests
  	ULINT	command_length;
  	ULINT	certification_code;
  	ULINT	result;
  	ULINT	RFU[5];
} AssetEndResponse;
extern hton_structure_desc map_AssetEndResponse[];

typedef struct {
        USHORT  interface_number;       // usually zero
        UCHAR   route_type;             // usually zero
        UCHAR   command_number;         // this is unique along requests
  	ULINT	command_length;
  	ULINT	certification_code;
  	ULINT	playback_id;
  	ULINT	playback_mode;
  	ULINT	time_mode;
  	ULINT	time_spec;
  	ULINT	skip_rate;
  	ULINT	data_type;              // fixed = 0
  	ULINT	data_rate;		// not used
  	ULINT	request_sequence_num;
  	ULINT	max_received;
  	ULINT	datagram_size;
  	ULINT	play_live_margin;
  	ULINT	RFU[4];
} PlayBackRequest;
extern hton_structure_desc map_PlayBackRequest[];

typedef struct {
        USHORT  interface_number;       // usually zero
        UCHAR   route_type;             // usually zero
        UCHAR   command_number;         // this is unique along requests
  	ULINT	command_length;
  	ULINT	certification_code;
  	ULINT	result;
  	ULINT	wait;
  	ULINT	RFU[5];
} PlayBackResponse;
extern hton_structure_desc map_PlayBackResponse[];

typedef struct {
        USHORT  interface_number;       // usually zero
        UCHAR   route_type;             // usually zero
        UCHAR   command_number;         // this is unique along requests
  	ULINT	command_length;
  	ULINT	certification_code;
  	ULINT	special_playbackID;
  	ULINT	trans_block_num;
  	ULINT	RFU[5];
} StartEndNotification;
extern hton_structure_desc map_StartEndNotification[];

typedef struct {
  	USHORT	interface_number;	// usually zero
  	UCHAR	route_type;
  	UCHAR	command_number;
  	ULINT	command_length;
  	ULINT	certification_code;
  	ULINT	asset_id;
  	ULINT   RFU[5];
} SceneListRequest;
extern hton_structure_desc map_SceneListRequest[];

typedef struct {
   	USHORT	interface_number;	// usually zero
  	UCHAR	route_type;
  	UCHAR	command_number;
  	ULINT	command_length;
  	ULINT	certification_code;
	ULINT	result;
	ULINT	number_of_scenes;
	ULINT	RFU[5];
} SceneListHeader;
extern hton_structure_desc map_SceneListHeader[];

typedef struct {
  	ULINT	asset_id;
  	ULINT	start_time;
  	ULINT	end_time;
  	ULINT	RFU[2];
} SceneInformationDescriptor;
extern hton_structure_desc map_SceneInformationDescriptor[]; 	
  	
/* MAGICMARKER  mapstruct script looks for this line */


#ifdef __cplusplus
}
#endif

#endif
