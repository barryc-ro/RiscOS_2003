/**************************************
 Sink.h
	
descibes standard decoder class.

In this case the MPEGTrans Module

© Acorn Computers Ltd

History:

Date      Who     Description of change
===========================================
31/7/98    AR      File created

**************************************/
#ifndef _Sink_H_
#define _Sink_H_

#include "Error.h"
#include "swis.h"

/*
It is debatable as to whether the next block should exist in the
header or the methods file.  These are C constructs used in talking
to the MPEGControl/Trans Module.  These structures were taken from
an existing VSP module.
*/
//SWI Numbers
#define MPEGControl_FullBuffers  0x492c1
#define MPEGControl_CloseStream  0x492c2
#define MPEGControl_SetSpeed	 0x492c4
#define MPEGControl_ResetStream  0x492c5
#define MPEGControl_MuteSound    0x492c6
#define MPEGControl_Stats        0x492c9

//Stats Tag Numbers
#define MPEGControl_Stats_BytesRx 0x0000
#define MPEGControl_Stats_NPT     0x0001

//MPEGControl defined tokens
#define ENDOFTAGS -1		// end of stats tagtype array for readstats
 	// ResetStream stuff
#define VIDEODATA 1      	// video data present in new stream
#define AUDIODATA 1 << 1 	// audio data present in new stream
 	// MuteSound stuff
#define SOUNDOFF  0x0
#define SOUNDON   0x1

//MPEGControl defined structures
#define DefaultBufferSize 20	// this is the opening buffer size
#define MPEGClockSpeed 	  90000 // represents a 90 kHz clock

typedef struct{
   int Tag;
   int DataLength; 
   int Data;    		// varying array of statistical information
} StatBuffer;

typedef int tagtype;

/****************************************************************************/

class Sink: public Error
{
  /*
  This is primerily a method class but in effect firewalls
  however it does contain a unique MPEGHandle as is given by
  the MPEGTrans module.  This should contain objects such as
  start stream etc.  Though this handle is passed through the 
  SWI interface.
  */
  private:
  int MPEGHandle;
  StatBuffer *readstats(tagtype tag, size_t *BufferSize);	// Null on error
  StatBuffer *readstats(tagtype *tags, size_t *BufferSize);	// allocates StatBuffer or increases to 
  				// accomodate stats
  // moved for error checking
  error_flag CheckEOS(void);		// returns boolean
  error_flag OpenStream(void);	  	// play, should really be constructor
  error_flag SetPosition(ULINT time);	// jump to time absolute

  public:
  Sink(int Handle);
  ~Sink(void);
  
  ErrorBlk** errblock(void) {return &err_ptr;}
  
  error_flag FullBuffer(BitstreamBufferDescriptor *buffer) // sends a buffer to the MPEG player
	{ return MakeErrorOnError(_swix(MPEGControl_FullBuffers, _INR(0,2), 0, MPEGHandle, (int)buffer));}
	
  error_flag ResetStream(int mode)			//reset stream
  	{ return MakeErrorOnError(_swix(MPEGControl_ResetStream, _INR(0,1), (0x08|mode), MPEGHandle));}
  	
  int GetHandle(void)	{  return MPEGHandle; }	// returns a copy of the handle
  error_flag ReadNPT(ULINT *time);		// sets the current time since start of play
  error_flag CloseStream(void);			// stop, should be destructor
  error_flag SetSpeed(ULINT speed);		// prime the decoder to handle the new speed
};

#endif
