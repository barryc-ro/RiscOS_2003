/***********************************************************************
 Interface.h

descibes standard interface class.

This is the front end of the class structure from here on outward it is
standard RiscOS As such it is important to define this as the only
entrypoint.  This includes interupts etc.

It is primerily a method class and will occur in only one instance.  It
will however contain the root of the object tree of which it has control
on its change of state.

© Acorn Computers Ltd

History:

Date      Who     Description of change
===========================================
31/7/98    AR      File created

***********************************************************************/

#ifndef _Interface_H_
#define _Interface_H_

#define STRINGLENGTH 	64
#define ERROR_ARRAY	10
#define NECServerType	((int)'NEC\0')

	// this is the implementation flags that are supported
	// reason codes must be less or equal.
#define R0_MASK_SetServer		0x0F  
#define R0_Reason_OpenStream           	0x02	// reason codes
#define R0_MASK_CloseStream           	0x00
#define R0_MASK_CheckEndOfStream      	0x00
#define R0_Reason_SetSpeed		0x02	// reason codes
#define R0_Reason_SetPosition		0x02	// reason codes
#define R0_MASK_ReadNPT               	0x00
        // new swis NEC
#define R0_MASK_GetAssetList          	0x00
#define R0_MASK_GetSceneList          	0x00
#define R0_Reason_GetMiscInfo           0x04	// reason codes

#include "Error.h"
#include "Stream.h"
#include "kernel.h"

class Interface : public Error
{
  private:
  	ServerList 	CurrentServers;
        StreamList 	CurrentStreams;
        void 		*pw;
        
		// Error Handling
        	// this is an array of errors
        	// it is used in case the application layer does not
        	// copy the error but pass pointers to errors in this
        	// module. this is dangerous but not really our fault.
        	// this also has benifits in debugging.
  	int  		errorsOffset;		// offset in the array
        ErrorBlk 	*errors[ERROR_ARRAY];   

        // environmental variables
        char EnvServerString[STRINGLENGTH];
        int  EnvPortNum;
        int  Envhealthperiod;
  	int  EnvNumBlocks;
  	int  EnvBufferBlocks;
  	int  EnvTCPtimeout;
  	int  EnvINETtimeout;
  	int  EnvSourceRecvSpace;
  	bool EnvSceneBlanking;
  	int  init_block_val;
  	
  	inline error_flag strToAddr(char *, struct in_addr *, ErrorBlk **);
  
  public:
        Interface(void *pw);
        ~Interface(void);
 
	// used in entry points
	inline ServerList *server_list() { return &CurrentServers; }
        inline StreamList *stream_list() { return &CurrentStreams; }
        
        // used in * commands
        int getServerListSize(void) { return CurrentServers.Size(); }
        void error_print() { err_ptr->error_print(); }
        void error_array_print(void);
        void disconnect_all(void);
       				
       	// array of non_fatals
       ErrorBlk *AddError(ErrorBlk *new_error);
       
       // reads system variables
       error_flag ReadEnvVar(void);

        // SWI interface
        error_flag SetServer(_kernel_swi_regs *, ErrorBlk **);
        error_flag OpenStream(_kernel_swi_regs *, ErrorBlk **);
        error_flag CloseStream(_kernel_swi_regs *, ErrorBlk **);
        error_flag CheckEndOfStream(_kernel_swi_regs *, ErrorBlk **);
        error_flag SetSpeed(_kernel_swi_regs *, ErrorBlk **);
        error_flag SetPosition(_kernel_swi_regs *, ErrorBlk **);
        error_flag ReadNPT(_kernel_swi_regs *, ErrorBlk **);
        // new swis NEC
        error_flag GetAssetList(_kernel_swi_regs *, ErrorBlk **);
        error_flag GetSceneList(_kernel_swi_regs *, ErrorBlk **);
        error_flag GetMiscInfo(_kernel_swi_regs *, ErrorBlk **);
};

#endif
