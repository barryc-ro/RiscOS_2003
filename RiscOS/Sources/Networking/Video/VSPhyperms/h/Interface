/***********************************************************************
 Interface.h

descibes standard interface class.

This is the front end of the class structure from here on outward it is
standard RiscOS As such it is important to define this as the only
entrypoint.  This includes interupts etc.

It is primerily a method class and will occur in only one instance.  It
will however contain the root of the object tree of which it has control
on its change of state.

© Acorn Computers Ltd

History:

Date      Who     Description of change
===========================================
31/7/98    AR      File created

***********************************************************************/

#ifndef _Interface_H_
#define _Interface_H_

#define STRINGLENGTH 	64
#define ERROR_ARRAY	10
#define NECServerType	((int)'NEC\0')

#include "Error.h"
#include "Stream.h"
#include "kernel.h"

class Interface : public Error
{
  private:
  	ServerList servers;
        void 	*pw;

  	int  	errorsOffset;
        ErrorBlk *errors[ERROR_ARRAY];   // this is an array of errors
        	// this is used in case the application layer does not
        	// copy the error but pass pointers to errors in this
        	// module this is dangerous but not really our fault.

        // environmental variables
        char EnvServerString[STRINGLENGTH];
        char EnvPortString[STRINGLENGTH];
        int  Envhealthperiod;
  	int  EnvNumBlocks;

        int ReadEnvVar();               // reads system variables
  
  public:
        StreamList CurrentStreams;      // for speed reasons

        ErrorBlk *AddError(ErrorBlk *new_error);	
        				// array of non_fatals
        Interface(void *pw);
        ~Interface(void);

        // SWI interface
        int SetServer(_kernel_swi_regs *, ErrorBlk **);
        int OpenStream(_kernel_swi_regs *, ErrorBlk **);
        int CloseStream(_kernel_swi_regs *, ErrorBlk **);
        int CheckEndOfStream(_kernel_swi_regs *, ErrorBlk **);
        int SetSpeed(_kernel_swi_regs *, ErrorBlk **);
        int SetPosition(_kernel_swi_regs *, ErrorBlk **);
        int ReadNPT(_kernel_swi_regs *, ErrorBlk **);
        // new swis NEC
        int GetAssetList(_kernel_swi_regs *, ErrorBlk **);
        int GetSceneList(_kernel_swi_regs *, ErrorBlk **);
        int GetMiscInfo(_kernel_swi_regs *, ErrorBlk **);
};

#endif
