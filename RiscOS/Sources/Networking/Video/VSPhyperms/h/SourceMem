/**************************************
 SourceMem.h

describes standard memory management class for mass data transfer.

© Acorn Computers Ltd

History:

Date      Who     Description of change
===========================================
25/8/98    AR      File created in Source
26/1/99    AR      Extracted for readability

**************************************/

#ifndef _SourceMem_H_
#define _SourceMem_H_

#include "Error.h"		// as this class is capable of error creation and handling
#include "SourceP.h"		// classes private to this memory map
#include "NECstruct.h"

// Payload data is opaque to us
typedef void *NECPayload;	// this is the datagram

// ---------------------------------------------------------- Source Memory map ------------------
// this class controls the dynamic area used by the source class
//
class SourceMemMap : public Error
{ 
  private:
	DatagramBitfield *dgram_use;	// Quick lookup bitfields

	// Dynamic area information
	size_t  da_number;		// dynamic area number
	void   *da_base;		// base address in memory
        size_t total_memory;		// Total size of dynamic area

        // memory area pointers
        MemBlock 	*block_hd;     	// Memory block header buffer start
        NECDatagram 	*dgram_hd;  	// Datagram header buffer start
        NECPayload 	*dgram_data_hd; // Datagram payload buffer start
        
        // initialised once information
	size_t total_dgrams;		// total dgram buffers for source object
	size_t dgrams_per_block;	// max dgrams making up one block size of iov vector
        size_t max_blocks;		// Number of blocks to be able to hold
	size_t dgram_size;		// UDP datagram payload size

   private:
      			// validation and assignment
	error_flag 	validateNECBlock(const NECBlock *);		// checks the signiture
	error_flag 	validateMemBlock(const MemBlock *);		// checks the signiture
        
        		// methodic
	inline error_flag memFreeDatagram(size_t);
			
			// locational
	inline NECPayload *findPayloadBuffer(size_t n) const
				{ return (NECPayload *)(((char *)dgram_data_hd) + (n * (dgram_size-sizeof(NECDatagram))) ); }
	inline size_t findDatagramNumber(NECDatagram *dgram) const 
				{ return ((char*)dgram - (char*)dgram_hd)/sizeof(NECDatagram); }
	inline size_t findDatagramNumber(NECPayload *dgram) const
				{ return (((char *)dgram) - ((char *)dgram_data_hd)) / (dgram_size-sizeof(NECDatagram)); }

  public:
  	// access to variables
	inline size_t dgramsPerBlock()	{ return dgrams_per_block; }	// max dgrams making up one block size of iov vector
        inline size_t maxBlocks()	{ return max_blocks; }		// Number of blocks to be able to hold
	inline size_t dgramSize()	{ return dgram_size; }		// UDP datagram payload size

  	// block reinitialisation
  	error_flag	blockReset(void);				// this sets all blocks to empty

	// validation
 	error_flag 	memMemBlockToNECBlock(const MemBlock *block, NECBlock **nec_block);
        error_flag 	memNECBlockToMemBlock(const NECBlock *block, MemBlock **mem_block);
         
        error_flag 	freeBlock_background(MemBlock *mb);			// free block when called from user mode, ie not re-entered
  	
  	// block location allocation					// finds a block, if it cannot find it allocate it, replace least	
	MemBlock *findExistingBlock(ULONG id, size_t *block_num = 0);	// finds a block based on an allocated block id, null on error
	MemBlock *findOrReplaceBlock(ULONG id, ULONG *last_block_sent, ULONG *max_complete, Statistics *stats);	
	MemBlock *findBlock(ULONG id, size_t *block_num = 0);		// finds a block, if it cannot find it allocate it, null on erro	
	MemBlock *getBlock(size_t n) const;				// returns a block addressed by its array offset in the dynamic area 

        // datagram location
	NECPayload *findPayloadBuffer(NECDatagram *dgram);
        error_flag memFindFreeDatagramBuffer(NECDatagram **datagram);	// returns a free datagram header, indicating a free area
	error_flag memFreeDatagram(const NECDatagram *);

  	// dynamic area renumbering
  	void	setDaNumber(int new_id) { da_number = new_id; }
  	size_t 	getDaNumber(void)	{ return da_number; }
  	
  	SourceMemMap(size_t blocks, size_t max_block_size, size_t datagram_size);
  	~SourceMemMap();
};

#endif
