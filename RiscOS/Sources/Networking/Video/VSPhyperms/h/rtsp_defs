/**************************************
RTSP interface abstraction code

(c) Pace Micro Technology Plc.
History:

Date      Who     Description of change
===========================================
15/07/01  AR      Created for Video Control interaction/
                  abstraction from what the code already does.

***************************************/
#ifndef _rtspdefs_h
#define _rtspdefs_h

#ifdef __cplusplus
  extern "C" {
#endif

#include "vsp_types.h"
#include "NECstruct.h"
#include "kernel.h"
#include "swis.h"

#include "VideoCtrl.h"

#ifdef DEBUGLIB
void malloc_check(void);
void* my_malloc(size_t size);
void  my_free(void* ptr);
#else
#define my_malloc malloc
#define my_free   free
#endif
// define the URL swis used and their flags as these are not defined in public
// libraries
#define URL_swibase          0x83e00
#define URL_ParseURL         (URL_swibase+7)

#define URL_ParseURL_Reason_FindLengths           0
#define URL_ParseURL_Reason_FillBuffers           1

#define RTSP_m1s (0)
#define RTSP_m2s (6)
#define RTSP_m1t (12)
#define RTSP_m2t (11)

#define RTSP_videoType_NTSC (4)
#define RTSP_videoType_PAL  (3)


#define RTSP_content_type_length  3
#define RTSP_content_disk_status  4 /* "feed" | "disk" */
#define RTSP_content_video_type   5

extern const char* RTSP_describe_header;
extern const char* RTSP_describe_body;
extern const char* RTSP_play_response;

typedef struct
{
  int numer;
  int denom;
} position_type;
/* if the denominator is zero the numerator is used as an enumerated type reflecting the
 * string values possible as follows; */
#define TIME_live      0x001
#define TIME_now       0x002
#define TIME_end       0x003
#define TIME_undef     0x004

typedef enum
{
  RESPONSE_default = -1,
  NEC_OK = 0,
  NEC_NoHighSpeedFile,
  NEC_WritingInProgress,
  NEC_NoGOPatJump,
  NEC_ParameterError,
  NEC_NoLiveStream,
  NEC_SystemError = 99,
  RTSP_MethodNotAllowed = 405
} server_response_type;

typedef struct
{
    ULINT status_value;
    const char* number;
    const char* message;
} RTSP_status;

const RTSP_status* RTSP_get_status(server_response_type nec_server_response);

const char *RTSP_get_encoding_type(ULINT encoding_type);

const char *RTSP_get_disk_status(ULINT video_status);

const char *RTSP_get_video_type (ULINT video_type);

char* RTSP_get_alloc_tricks_array(ULINT trick_modes);

bool parse_server_address(const char *query, struct in_addr *addr);

int parse_asset_specification(const char* query, const char **next, ULINT* asset, ULINT* start, ULINT* end);

int parse_speed(const char* query, const char** next, bool *forward, int *numerator, int *denominator);

int parse_position(const char* query, const char* next, position_type *from, position_type *to);

_kernel_oserror* parse_URL_server(const char *query, const char** next,
                                  struct in_addr *address, int* port, 
                                  PlayElementRequest **play_elements, int *assets_cnt);

/* note the reason is defined as 'VideoControlProtocolNotifyXX' in VideoCtrl.h */
_kernel_oserror* VideoControlInformNewStatus(ULINT identity);
_kernel_oserror* VideoControlInformPrepareForData(ULINT identity, ULINT client, int* handle);

#ifdef DEBUGLIB
const char* get_TIME(position_type* pos);
void parse_test_entry(const char* margv[], int margc);
#endif

#ifdef __cplusplus
  } /* end of C */
#endif

#endif
