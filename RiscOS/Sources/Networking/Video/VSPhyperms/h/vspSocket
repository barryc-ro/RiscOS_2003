/**************************************
 Server vspSocket.h

imports network software definitions
from TCPIPLibs

© Acorn Computers Ltd

History:

Date      Who     Description of change
===========================================
26/8/98   SNB      File created

**************************************/

#ifndef _vspSocket_H_
#define _vspSocket_H_

#ifdef __cplusplus
  extern "C" {
#endif

#include "netdb.h"
#include "sys/errno.h"

#include "unixlib.h"
#include "socklib.h"
#include "inetlib.h"
#include "sys/uio.h"

#include "swis.h"
#include "kernel.h"

#ifdef __cplusplus
  }
#endif

#define Socket_Async_Event	1
#define Socket_Urgent_Event	2
#define Socket_Broken_Event	3
#define RarpReply		4

/* class Socket.  This class protects an abstraction of a socket.  Provided that there
 * are no virtual methods and the private data remains only 4 bytes long, this class
 * remains as efficient as a simple int, because it will fit in a register.
 */
class Socket {
        private:
                int sd;     // socket descriptor

		// Retrieves a port number from the services file - internal use only.
		static int get_port(const char *, const char *proto = "tcp");
		static int sysctl_maxdgram(int do_set, size_t *value);
		static int sysctl_recvspace(int do_set, size_t *value, size_t protocol = IPPROTO_UDP);

        public:
        	void invalidateSocket() { sd = -1; }
                // constructors
                Socket() { sd = -1; }
                //Socket(int fd) { sd = fd; };
                Socket(int proto_family, int sock_type, int ipproto_type = IPPROTO_IP);
                // default copy constructors are suitable
                // default destructor is suitable
                ~Socket() { close(); }

                // constructor: create the socket and bind to reserved port
                Socket rresvport();
               
                // Create a new socket - default to standard TCP stream socket
                Socket creat(int proto_family = PF_INET,
                   int sock_type = SOCK_STREAM, int ipproto_type = IPPROTO_IP);

                // Is this descriptor valid?
                int valid() const;
                // Close the socket (if it was a valid handle)
                void close();

                // Connect to remote host/port.  Where port number
                // is integral, it is specified in network byte order.
                // IP addresses always in network byte order
                int connect(struct in_addr*, int no_port);
                int connect(const char *host, int no_port);
                int connect(const char *host, const char *port, const char *proto = "tcp");
                int connect(struct in_addr*, const char *port, const char *proto = "tcp");
                int joinMulti(const char *host);

		int bind(int ho_port = 0) const;

                // Write data
                int write(const void *, size_t amt);
                int write(const void *, size_t amt, int flags);
                // Read data
                int read(void *, size_t amt);
                int read(void *, size_t amt, int flags);
                int read(struct iovec *iovec, size_t iov_size);
                int read(struct iovec *iovec, size_t iov_size, int flags);
                int readWithTimeout(void* buffer, size_t amt, unsigned int time);
                
                //
                int wait_read(unsigned int seconds);
                int wait_write(unsigned int seconds);

		// Address-related methods
                int getLocalPort(int *port);
                int getLocalAddress(struct in_addr *);
                int getPeerPort(int *port);
                int getPeerAddress(struct in_addr *);
                inline int getSocketDescriptor(void) { return sd; };

                // Miscellaneous operations required
                static size_t getDgramSize();
                static void setDgramSize(size_t);
                static size_t getrecvspace(void);
                static size_t getTCPrecvspace(void);
                static void setrecvspace(size_t);

		// Generic ioctl and specific helper methods for it
                int ioctl(unsigned long command, void *data);
                int makeNonBlocking();
                int makeBlocking();
                int eventsOn();
                int eventsOff();
};


#endif
