/**************************************
 SourceP.h

Private declarations for the Source class

© Acorn Computers Ltd

History:

Date      Who     Description of change
===========================================
07/09/98  SNB     File created

**************************************/

#ifndef _SourceP_H_
#define _SourceP_H_

#include "VSP_types.h"
#include <limits.h>
#include "kernel.h"

// The internal data structure which holds the administrative details
// associated with an NECBlock.

extern "C" {

typedef struct {
  	size_t	max_buffers;	// this gives an outside on the array
  	size_t	num_buffers;	// this is the number of buffers used after optimisation
  	BitstreamBufferDescriptor buffers[1];	// see vsp_types header
} NECBlock;

struct MemBlock {
        int             inuse:1;
        int             completed:1;
        int		to_be_freed:1;
        int             mpeg_owned:1;
        int             pending_nak:1;
        int		deleted_block:1;
        int             _unused_:(CHAR_BIT*sizeof(int)) - 6;	// number of previous fields, rounding
                
        ULONG           block_id;       // == NECDatagram.block_number == NECBlock.block_number
        size_t		dgrams_received; // == cumulative total of datagrams AR
        size_t          dgrams_in_block; // == number of datagrams in block
        size_t          special_play_id; // as defined in play request
	size_t		resends;	// == the number of naks against that block
        unsigned int    nak_timeout;     // timeout for which naks can be sent
        // The following two fields must always live at the end of the MemBlock structure
        unsigned long   guard_word;
        NECBlock 	nec_block;
};

// This is an invalid block number.  It must be zero, as the getBlock method
// won't be able to find the very first block in a stream.
static const ULONG invalid_block_marker = 0UL;

// Magic word.  This magic word is used to mark MemBlock structures such that the
// conversions to and from MemBlock and NECBlock can be validated.
static const unsigned long MemBlock__GuardWord ('b'|('C'<<8)|('E'<<16)|('N'<<24));

}// end C

// class DatagramBitfield;
//
// This is the quick lookup to check the Datagram buffer availability
//
// This class implements an array of bits determining the availability of
// datagram buffers.  It is similar in functionality to the standard
// fd_set type and its macros FD_SET, FD_CLR, FD_ISSET and FD_ZERO,
// but does not rely on macros and the maximum size is determined at
// object construction time.
//
// Type bitfield is private to DatagramBitfield.  This type needs to
// remain an unsigned type.  Implementation here is fully portable provided
// sizeof(bitfield) is an exact power of two.
//
class DatagramBitfield {
        private:
                typedef unsigned long bitfield;         // private type

        private:
                size_t max_dgram;                       // Upper limit ("FD_SETSIZE")
                size_t max_words;                       // Number of words allocated
                bitfield *b;                            // Bitfield array                
 
                void clear();                           // Clear array ("FD_ZERO")
                size_t word_no(size_t n) const;         // For datagram n, return word offset
                size_t bit_mask(size_t n) const;        // For datagram n, return bit number

        public:
                // Public constructor.  Must supply maximum limit to allow construction to work
                DatagramBitfield(size_t max_dgram);
                // Public destructor to release bitfield array
                ~DatagramBitfield();
                // NO public copy constructors - this class may not be copied.

                // Is the class fully initialised?
                int ok() const;
                // is a particularly datagram descriptor free?  ("!FD_ISSET")
                int isFree(size_t) const;
                // allocate a datagram buffer and return its index
                error_flag allocate(size_t *n);
                // allocate a specific datagram buffer ("FD_SET")
                error_flag allocate(size_t n);
                // deallocate a datagram buffer ("FD_CLR")
                error_flag deallocate(size_t n);

        private:
                // Private copy constructor - not to be implemented.
                // By not defining this, attempts to copy will be faulted
                // by the linker.
                DatagramBitfield(const DatagramBitfield &);
};

#endif
