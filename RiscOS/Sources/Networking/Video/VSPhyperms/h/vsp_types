#ifndef VSP_TYPES_H_
#define VSP_TYPES_H_

/*
* AR I have extended this header file to extend global types such as the claim
* therefore types are defined in the order of file scope or here if module scope
* beyond this they are library scope
*/

#ifdef __cplusplus
extern "C" {
#endif

/* typedefs to allow code to match NEC specification document */

typedef unsigned char  UBYTE;	/* 8 bits               */
typedef unsigned char  UCHAR;   /* 8 bits               */
typedef unsigned short USHORT;  /* 16 bits              */
typedef unsigned long  ULONG;   /* 32 bit               */
typedef ULONG   ULINT;		/* 32 bits              */
typedef int     LINT;           /* 32 bits signed       */

/* XXX: Specification isn't clear on whether this is unsigned or not */
typedef struct {
        unsigned int lo;
        unsigned int hi;
} UINT64;

typedef enum {
  	true  = 1,
  	false = 0
} bool;

typedef enum {
  	ErrorOccurred = 0,
  	NoError	= 1
} error_flag;

typedef enum {
  	claim_token = 0,
  	free_token  = 1
} semaphor;

typedef enum {
  	claim_event  = 0,
  	ignore_event = 1
} claim_flag;

typedef enum {
  owner_none		= 0x00,
  owner_interface 	= 0x01,
  owner_stream		= 0x02,
  owner_streamrunning	= 0x04
} ownership_flag;

// these are the definitions as passed in a play request,
typedef enum {
  mode_normalplay = 0,
  mode_forwardskip,
  mode_backwardskip,
  mode_fastforward,
  mode_fastrewind,
  mode_still,
  mode_releasestill,
  mode_streamlive,
  mode_pause
} play_mode;

// query 5.8
typedef enum {
	state_stop = 1,
	state_play,
	state_pause,
	state_fast_forward,
	state_fast_rewind,
	state_forward_skip,
	state_backward_skip,
	state_slow,
	state_step,
	state_still,			// beyond here is differing states of play
	state_streamlive,
	state_endreceived,
	state_prestart
} state_of_play;

// query 5.9
#define trick_fast_forward 	0x0001
#define trick_fast_rewind	0x0002
#define trick_forward_skip	0x0004
#define trick_backward_skip	0x0008
#define trick_forward_jump	0x0010
#define trick_backward_jump	0x0020
#define trick_normal_play	0x0040
#define trick_slow_play		0x0080
#define trick_pause		0x0100
#define trick_step_play		0x0200
#define trick_jump_most_rec	0x0400
#define trick_still		0x0800

// this is defined in 4.4 of the specification
typedef enum {
	data = 0,
	play_preparation = -1,
	dummy_ack = -2
} ACK_type;

#ifdef DEBUGLIB
typedef enum {
  debug_always  	= 0x00000001,
  debug_errors  	= 0x00000002,	// allocation and de-allocation of errors
  debug_ack     	= 0x00000004,	// calculation and sending of acks
  debug_dummyacks	= 0x00000008,	// sending of dummy acks
  debug_naks		= 0x00000010,	// the sending of naks
  debug_callbacks	= 0x00000020,	// this is the timing related information
  debug_streaminfo	= 0x00000040,	// information on the stream itself
  debug_SWIentryexit	= 0x00000080,	// the entry and exit times
  debug_Registers03	= 0x00000100,	// incomming registers and outgoing registers
  debug_Registers47	= 0x00000200,	// incomming registers and outgoing registers
  debug_servercontrol	= 0x00000400,	// server protocol specific information
  debug_miscinfo	= 0x00000800,   // dump of the miscinfo calls
  debug_assetlists	= 0x00001000,	// dump of the data in asset list calls
  debug_scenelists	= 0x00002000,	// scenes
  debug_messageQ	= 0x00004000,   // the calls to the async pipe
  debug_multicast	= 0x00008000,
  debug_blockerrors	= 0x00010000,	// reasons why blocks failed to be added to the buffer
  debug_startend	= 0x00020000,	// denotes the arrival of start/end notifications
  debug_time		= 0x00040000,	// this notes the time values used in jumps in stream
  debug_ATMserver	= 0x00080000,
  debug_datagrams	= 0x00100000,
  debug_blocks		= 0x00200000,
  debug_bufferdump	= 0x00400000,
  debug_memory		= 0x00800000,	// 08/11/1999 AR to debug memory allocations in Source
  debug_RTSP		= 0x01000000,
  debug_all		= 0x01ffffff
} debug_flags;
#endif

typedef enum {
  flags_standard_op	= 0x00000000,
  flags_sceneblanking 	= 0x00000001,/* blank when changing source/time in playlist or loop */
  flags_terminate_eos 	= 0x00000002,/* delete session when reaching end of stream */
  flags_commspause	= 0x00000004,/* pause the stream if there is a discontinuity */
  flags_limit_on_slow	= 0x00000008,/* this limits the slow speed to a minimum of 1/8 of normal speed */
  flags_support_live	= 0x00000010,/* this supports the stream/storage live support & switching by supporting */
  flags_audiosync	= 0x00000020,/* should audio sync be used by default */
  flags_interface_set	= 0x0000002f,/* this is the mask which is set when reading the system variable */
  flags_RTSPinterface	= 0x10000000,/* this is set if the interface is called using an RTSP call */
  flags_playonopen	= 0x20000000 /* this instructs the setup response to issue a play request */
} flags_word;

// these are used to determine the type of callback
// 08/11/1999 AR added the other two buffer free flags
typedef enum {
  callback_none  	     = 0x0000,
  callback_nak_after	     = 0x0001,
  callback_nak_now	     = 0x0002,
  callback_timeout 	     = 0x0003, // umbrella source save
  callback_fullblocks 	     = 0x0004, // used to notify no need for callback
  callback_startend	     = 0x0008, // this stops re-requesting blocks when we have played the last block
  callback_token1free 	     = 0x0010,
  callback_token2free        = 0x0020,
  callback_token3free	     = 0x0040,
  callback_token4free	     = 0x0080,
  callback_tokenfree	     = 0x00f0, // umbrella buffers free for tests
  callback_bufferswait	     = 0x0100,
  callback_trickplay  	     = 0x0200,  // change in play mode
  callback_multicast_started = 0x0400
} callback_flag_vals;

typedef enum {
  type_debug,
  type_buffers,
  type_misc_5_10
} misc_info_flags;

// this is taken from the MPEG spec for STB 22
typedef struct {
  void  *link;
 // buffer_descriptor	*link;  // set to zero as we are passing one at a time
  int	free_routine;           // callback address
  int	free_workspace;		// workspace pointer
  char	*buffer_ptr;		// as returned in get_block
  int	buffer_length;		// >= datagram,  < block
  int	packets;		// set to zero on call to full buffers
} BitstreamBufferDescriptor;

// this structure is the response to the MiscInfo query.
typedef struct{
  	USHORT h_pixels;	// 16 bits
  	USHORT v_pixels;
  	ULONG  play_time;	// 32 bits
  	USHORT status_word;
  	USHORT scene_number;
  	ULONG  head_time;
  	ULONG  end_time;
  	ULONG  encode_time;
  	ULONG  bitrate;
} misc_5_10;

// C++ specific types, c++ is a strongly typed language use it to stop typo's
// you should not be able to inappropriately assign these types.

#ifdef __cplusplus
}// end of C

class callback_flag
{
  	callback_flag_vals value;
  public:
  	callback_flag() 			{ value = callback_none; }
        callback_flag(callback_flag_vals val) 	{ value = val; }
  	callback_flag(callback_flag& flags) 	{ value = flags.value; }

  	inline bool	     operator ==(const callback_flag_vals& val) { return (bool)(value == val); }
  	inline bool	     operator !=(const callback_flag_vals& val) { return (bool)(value != val); }
  	inline bool	     operator |(const callback_flag& flags)	{ return (bool)(value | flags.value); }
  	inline bool 	     operator &(const callback_flag& flags)	{ return (bool)(value & flags.value); }
  	inline callback_flag operator =(const callback_flag& flags) 	{ value = flags.value; 				      return (*this);}
  	inline callback_flag operator +=(const callback_flag& flags) 	{ value = (callback_flag_vals)(value | flags.value);  return (*this);}
  	inline callback_flag operator -=(const callback_flag& flags) 	{ value = (callback_flag_vals)(value & ~flags.value); return (*this);}
  	inline callback_flag operator |=(const callback_flag& flags)    { value = (callback_flag_vals)(value | flags.value);  return (*this);}
  	inline callback_flag operator &=(const callback_flag& flags)	{ value = (callback_flag_vals)(value & flags.value);  return (*this);}
  	inline callback_flag operator ~() 				{ return (*new callback_flag(~value)); }
};

class Statistics {
  public:
  	ULINT last_stream_bytes_received;
  	ULINT last_stream_time;
  	ULINT last_stream_acks;
  	ULINT last_stream_naks;

  	ULINT dgrams_read;
  	ULINT duplicate_dgrams;
  	ULINT bytes_received;
  	ULINT acks_sent;
  	ULINT naks_sent;
  	ULINT block_naks_sent;
  	ULINT deleted_blocks;

  	Statistics(void);
  	~Statistics(void) {}

  	void print();
};

#endif

#endif
