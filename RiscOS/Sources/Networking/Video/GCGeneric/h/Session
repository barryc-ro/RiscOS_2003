/**************************************************************/
/* File:    Session.h                                         */
/*          (C) 2002 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Manage our local sessions with Video Control.     */
/*                                                            */
/* Author:  Originally S.N.Brodie in the Generic fetcher.     */
/*          Adapted by A.D.Hodgkinson.                        */
/*                                                            */
/* History: 12-Nov-2002 (JRB): Imported to GC Generic from    */
/*                             RTSP HSAC.                     */
/**************************************************************/

#ifndef GCGeneric_Session__
  #define GCGeneric_Session__

  #include <stdbool.h>

  #include "URLutils.h"

  /* Rate at which state machine is driven, cs */

  #define Session_State_Timer     (20)
  #define Session_State_Retry     (10)

  /* Structures and enumerations */

  typedef enum
  {
    protostate_ERROR,
    protostate_ERROR_DEAD,
    protostate_ERROR_MEM,
    protostate_ERROR_WRITE,
    protostate_ERROR_READ,
    protostate_ERROR_CONNECTION,
    protostate_ERROR_NO_TOKEN,
    protostate_ERROR_NOT_IMPLEMENTED,
    protostate_ERROR_TIMEOUT,
    protostate_ERROR_DNS,
    protostate_ERROR_VCPN,

    /* If you add to the above, don't forget to add to the list */
    /* of error conditions in the state machine.                */

    protostate_INITIAL,
    protostate_DNS,
    protostate_CONNECTED,
    protostate_SENDING,
    protostate_COMPLETED

  } network_protocol_fsm_states;

  /* Structure for remembering headers */

  typedef struct rtsp_header
  {
    struct rtsp_header * next;        /* Link to next member */
    char               * header;      /* Pointer into text member - is the RTSP header tag */
    char               * value;       /* Pointer into text member - is the tag value setting */
    char                 text[1];     /* Entire header but ':' and "\r\n" represented by '\0' terminators */

  } rtsp_header;

  /* Session information */

  struct session;
  typedef _kernel_oserror *(*callback_fn_ptr)(struct session * s);

  typedef struct session
  {
    struct session  * next;             /* Pointer to next session */
    struct session  * child;            /* Pointer to child session */
    struct session  * parent;           /* Parent session (so a dying child can set it's parent's child to NULL) */

    unsigned int      id;               /* Client handle */
    unsigned int      vcid;             /* Video Control client handle */
    unsigned int      mpegid;           /* MPEG Control stream handle */

    url_description * url;              /* Full URI of the document being fetched */

    int               sd;               /* Socket descriptor */
    int               reqptr;           /* Pointer into the full request buffer for sending data */
    int               reqlen;           /* Length of the full request buffer */
    unsigned int      last;             /* Last activity timeout */
    callback_fn_ptr   connected_cb;     /* Function to call back when a socket reaches connected state */
    callback_fn_ptr   next_command_cb;  /* Function to call when a command is completed, without telling Video Control */

    int               state;            /* The state of this session */
    int               reported_state;   /* R0 status returned on last SWI call (used by status SWI) */
    unsigned int      err_no;           /* Session-local copy */
    unsigned int      response_code;    /* Holds the response code for the latest response read */

    rtsp_header     * headers;          /* List of headers */
    char            * data;             /* Additional client data to be sent to server; also the receive buffer */
    int               data_len;         /* Size of data pointed to by 'data' - strlen(data) if not known */

    char            * full_request;     /* Holds the current full request (headers plus any body data) for sending */

    unsigned          vidbuf_total;     /* Video buffer level */
    unsigned          audbuf_total;     /* Audio buffer level */
    int               vsync_count;      /* Count of vsyncs since buffer levels sent */

    unsigned          vidbuf_level;     /* Video buffer level */
    unsigned          audbuf_level;     /* Audio buffer level */
    unsigned          bufreport_count;  /* Number of buffer level reports sent */

    unsigned          dying         :1; /* Non-zero when the session is being destroyed */
                                    
    unsigned          callout_set   :1; /* Non-zero if a callout function is set for general state machine stuff */
    unsigned          bufreport_set :1; /* Non-zero if a callout function is set for buffer level report */
    unsigned          destruct      :1; /* Non-zero if the session should self-destruct after the current command */
    unsigned          starting      :1; /* Non-zero if playback is starting */
    unsigned          started       :1; /* Non-zero if playback has started in Video Control */
    unsigned          reported      :1; /* Non-zero if we've reported a state change due to an error state to Video Control */

  } session;

  /* Function prototypes */

  session         * session_return_head       (void);
  session         * session_find_by_id        (unsigned int vc_client_id);
  session         * session_find_by_vcid      (unsigned int vcid);
  _kernel_oserror * session_new_session       (session ** rs);
  _kernel_oserror * session_link_new_item     (session * ses);
  void              session_remove_callouts   (session * ses, bool state_machine_too);
  void              session_reset_session     (session * ses);

  void              session_free_item         (session * ses);
  void              session_free_list         (void);

#endif /* GCGeneric_Session__ */
