/**************************************************************/
/* File:    TearDown.c                                        */
/*          (C) 2003 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Implement GCGeneric_TearDown.                     */
/*                                                            */
/* Author:  J.R.Byrne. Based on RTSPOVS etc. source by        */
/*          A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 12-Nov-2002 (JRB): Created.                       */
/**************************************************************/

#include <stdlib.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "GCGenErrors.h"
#include "Session.h"
#include "Utils.h"

#include "TearDown.h"

/**************************************************************/
/* teardown_tear_down()                                       */
/*                                                            */
/* Implement GCGeneric_TearDown. See the Video Control        */
/* specification, 2501,817/FS, for more.                      */
/**************************************************************/

_kernel_oserror * teardown_tear_down(_kernel_swi_regs * r)
{
  session         * s = session_find_by_id(r->r[1]);

  dprintf(("Entry_0", "teardown_tear_down: Called\n"));
  dprintf(("Entry_1", " r0=&%08x\n",r->r[0]));
  dprintf(("Entry_1", " r1=&%08x\n",r->r[1]));
  dprintf(("Entry_1", " r2=&%08x\n",r->r[2]));
  #ifdef TRACE
  if (r->r[0] & VC_TearDown_R4ThroughR7AreValid)
  {
    dprintf(("Entry_1", " r4='%s'\n",r->r[4] ? (char *)r->r[4] : "NULL"));
    dprintf(("Entry_1", " r5=&%08x\n",r->r[5]));
    dprintf(("Entry_1", " r6=&%08x\n",r->r[6]));
    dprintf(("Entry_1", " r7=&%08x\n",r->r[7]));
  }
  #endif

  if (s == NULL)
  {
    dprintf(("Error_0", "teardown_tear_down: ID not found\n"));

    return make_error(GCGeneric_ERROR_CLIENT_ID_NOT_FOUND, 0);
  }

  /* Since G-cluster doesn't require us to do anything except close */
  /* our connection, all we need to do is free the session.         */

  session_free_item(s);

  return NULL;
}
