/**************************************************************/
/* File:    Play.c                                            */
/*          (C) 2002 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Implement GCGeneric_Play.                         */
/*                                                            */
/* Author:  J.R.Byrne. Based on RTSPOVS etc. source by        */
/*          A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 12-Nov-2002 (JRB): Created.                       */
/**************************************************************/

#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>

#include <inetlib.h>
#include <socklib.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Headers.h"
#include "Module.h"
#include "GCGenErrors.h"
#include "Session.h"
#include "Status.h"
#include "Utils.h"

#include "Play.h"

/* Local functions */

static _kernel_oserror * play_start (session * s);
static size_t play_make_input_records(const char * str, char * buf, size_t len);

/**************************************************************/
/* play_play()                                                */
/*                                                            */
/* Implement GCGeneric_Play. See the Video Control            */
/* specification, 2501,817/FS, for more.                      */
/**************************************************************/

_kernel_oserror * play_play(_kernel_swi_regs * r)
{
  session    * s    = session_find_by_id(r->r[1]);
  size_t       size;

  dprintf(("Entry_0", "play_play: Called\n"));
  dprintf(("Entry_1", " r0=&%08x\n",r->r[0]));
  dprintf(("Entry_1", " r1=&%08x\n",r->r[1]));
  dprintf(("Entry_1", " r2='%s'\n",r->r[2] ? (char *)r->r[2] : "NULL"));
  dprintf(("Entry_1", " r3='%s'\n",r->r[3] ? (char *)r->r[3] : "NULL"));
  #ifdef TRACE
  if ((r->r[0] & VC_Play_R4ThroughR7AreValid) != 0)
  {
    dprintf(("Entry_1", " r4='%s'\n",r->r[4] ? (char *)r->r[4] : "NULL"));
    dprintf(("Entry_1", " r5=%08x\n",r->r[5]));
    dprintf(("Entry_1", " r6=%08x\n",r->r[6]));
    dprintf(("Entry_1", " r7=%08x\n",r->r[7]));
  }
  #endif

  if (s == NULL)
  {
    dprintf(("Error_0", "play_play: ID not found\n"));

    return make_error(GCGeneric_ERROR_CLIENT_ID_NOT_FOUND, 0);
  }

  if (
       s->state == protostate_DNS       ||
       s->state == protostate_CONNECTED ||
       s->state == protostate_SENDING
     )
  {
    dprintf(("Error_0", "play_play: In progress\n"));

    return make_error(GCGeneric_ERROR_IN_PROGRESS, 0);
  }

  /* Have we started playing yet? */

  if (s->started == 0)
    RetError(play_start(s));

  /* Send the keys */

  size = play_make_input_records((char *)r->r[2], NULL, 0);

  if (size == 0)
    return NULL;

  /* If we are currently sending, append these packets to the end of the */
  /* queue, otherwise make a new block and start sending it.             */

  if (s->full_request == NULL)
  {
    s->full_request = malloc(size);
    if (s->full_request == NULL)
    {
      s->state = protostate_ERROR_MEM;
      return status_check_error(s);
    }

    play_make_input_records((char *)r->r[2], s->full_request, size);
    ddumpbuf("", s->full_request, size, 0);

    s->reqptr = 0;
    s->reqlen = size;
    s->state = protostate_SENDING;
    s->last = utils_read_time();

    /* Run the state machine */
    status_proceed(s);
  }
  else
  {
    char * new_data = realloc(s->full_request, s->reqlen + size);

    if (new_data == NULL)
    {
      s->state = protostate_ERROR_MEM;
      return status_check_error(s);
    }

    s->full_request = new_data;
    play_make_input_records((char *)r->r[2], s->full_request + s->reqlen, size);
    ddumpbuf("", s->full_request + s->reqlen, size, s->reqlen);
    s->reqlen += size;

    /* The state machine must already be running */
  }

  dprintf(("Entry_0", "play_play: Successful; exitting\n"));

  return NULL;
}

/**************************************************************/
/* play_start()                                               */
/*                                                            */
/* Parameters: Pointer to a session.                          */
/**************************************************************/
static _kernel_oserror * play_start(session * s)
{
  static const char  id_packet[] = "\x05PACE DSL-4000";
  const int          reqlen = 1 + 8 + 1 + 256;
  struct sockaddr_in name;
  int                namelen = sizeof(name);
  char             * port_str;
  int                port;
  char             * p;

  dprintf(("","play_start: Sending connect packet\n"));

  /* Use getsockname to get our IP address */

  if (getsockname(s->sd, (struct sockaddr *) (&name), &namelen) < 0)
  {
    s->state = protostate_ERROR_WRITE;
    return status_check_error(s);
  }

  /* Get UDP port number to use */
  port_str = getenv(Headers_UDP_Port);
  if (port_str == NULL || (*port_str == 0 || strlen(port_str) > 5))
    port = 0;
  else
    port = atoi(port_str);

  if (port == 0)
    port = 32794; /* UDPV's default port number */

  /* Build the connect and identification packets */

  p = calloc(reqlen, 1);
  if (p == NULL)
  {
    s->state = protostate_ERROR_MEM;
    return status_check_error(s);
  }

  *p = 7;  /* New connect packet ID */
  memcpy(p + 1, &name.sin_addr, sizeof(name.sin_addr)); /* IP address */
  p[5] = (port >> 8) & 0xff;
  p[6] = port & 0xff;

  memcpy(p + 9, id_packet, sizeof(id_packet) - 1);

  ddumpbuf("", p, reqlen, 0);

  /* Send the connect packet */

  s->full_request = p;
  s->reqptr = 0;
  s->reqlen = reqlen;

  s->starting = 1;
  s->state = protostate_SENDING;
  s->last = utils_read_time();

  status_proceed(s);

  return NULL;
}

/**************************************************************/
/* play_make_input_records()                                  */
/*                                                            */
/* Parameters: Pointer to string containing key up/down       */
/*             information.                                   */
/*                                                            */
/*             Pointer to output buffer for G-cluster input   */
/*             event packets. May be NULL to calculate size.  */
/*                                                            */
/*             Size of buffer.                                */
/*                                                            */
/*  Returns:   Required size of buffer.                       */
/**************************************************************/

static size_t play_make_input_records(const char * str, char * buf, size_t len)
{
  size_t        size = 0;
  char          c;
  unsigned long n;
  char        * end_str;

  if (str == NULL)
    return 0;

  while ((c = *str++) != 0)
  {
    if (c == 'U' || c == 'u' || c == 'D' || c == 'd' || c == 'A' || c == 'a')
    {
      n = strtoul(str, &end_str, 10);
      if (end_str != str)
      {
        str = end_str;

        size += 17;
        if (buf != NULL && size <= len)
        {
          *buf++ = 6;         /* Packet type */
          memset(buf, 0, 8);  /* send_tod_seconds and send_tod_microseconds */
          buf += 8;

          /* axis */
          *buf++ = (char)( n      & 0xff);
          *buf++ = (char)((n>>8)  & 0xff);
          *buf++ = (char)((n>>16) & 0xff);
          *buf++ = (char)((n>>24) & 0xff);

          /* Determine value */
          n = 0;
          if (c == 'A' || c =='a')  
          {
            /* value should follow after '=' */
            while (isspace(*str)) str++;
            if (*str == '=')
            {
              n = strtoul(str + 1, &end_str, 10);
              str = end_str;
            }
          }
          else if (c == 'D' || c =='d')
          {
            n = 1;  /* Key is down */
          }

          /* value */
          *buf++ = (char)( n      & 0xff);
          *buf++ = (char)((n>>8)  & 0xff);
          *buf++ = (char)((n>>16) & 0xff);
          *buf++ = (char)((n>>24) & 0xff);
        }
      }
    }
  }

  return size;
}
