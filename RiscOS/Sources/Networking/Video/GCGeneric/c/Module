/**************************************************************/
/* File   : Module.c                                          */
/*                                                            */
/* Purpose: GC Generic is a Video Control protocol module     */
/*          used to talk to G-cluster game servers.           */
/*                                                            */
/* Author:  J.R.Byrne. Based on RTSPOVS etc. source by        */
/*          A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 12-Nov-2002 (JRB): Created.                       */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>
#include <strings.h>

#include <Global/RISCOS.h>
#include <Global/Services.h>
#include <swis.h>
#include <sys/errno.h>

#include "VersionNum"

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <VideoCtrl.h> /* Exported by VideoCtrl's !MkExport */

#include "CallOut.h"
#include "Global.h"
#include "MoreInfo.h"
#include "MPEGCtrl.h"
#include "Options.h"
#include "Play.h"
#include "GCGenHdr.h"
#include "Session.h"
#include "Setup.h"
#include "Status.h"
#include "TearDown.h"
#include "Utils.h"

#include "Module.h"

/* Various patch-ups and other compile time bits */

#if CMHG_VERSION < 516
  #define CMHG_CONST
#else
  #define CMHG_CONST const
#endif

#ifndef ROM
  extern int messages_file(void);
#endif

#ifndef ROM
  #ifdef DEFINE_ERRNO
    int __errno;
  #endif
#endif

/* TinySupport SWIs. This does not work if any library static data   */
/* is used within the module. This means errno (__errno) and __ctype */
/* (as used by any macro call to is.... functions). If you re-enable */
/* this SWI call, this module will fail to work at all.              */

#define NO_TINYSTUBS

#ifdef ROM
  #ifndef NO_TINYSTUBS
    static _kernel_oserror *__ROM;
    #define TinySupport_Share   (0x82c43)
    #define TinySupport_Die     (0x82c41)
  #endif
#endif

/* How often to send buffer level messages, in frames */

#define Buffer_Report_Interval 8

/* Local variables */

static void * module_wsp                        = NULL;

static int    registered                        = 0;
static bool   prism_registered                  = false;
static bool   callback_pending_flag             = false;
static bool   eventv_claimed                    = false;
static bool   events_enabled                    = false;

/* Local functions */

static _kernel_oserror * module_try_to_register         (void);
static _kernel_oserror * module_try_to_deregister       (void);
static _kernel_oserror * module_register                (void);
static _kernel_oserror * module_prism_try_to_register   (void);
static _kernel_oserror * module_prism_try_to_deregister (void);
static _kernel_oserror * module_prism_register          (void);

static void              module_atexit                  (void);
static void              module_send_buffer_levels      (void * handle);
static void              module_make_frameack_packet    (session * s, char * ptr);

/* PRISM direct-call interface */

static PRISM_DECLARE_FUNCTION_2(_kernel_oserror *, ComponentInfo, uint32_t /*tag*/, uintptr_t */*result*/)

static const struct
{
  void (*function)(void);
  uint32_t stack_words;
} static_CreateVeneerTable[] =
{
  PRISM_FUNCTION_DESCRIPTOR(ComponentInfo)    /*  0 */
};
static void (**global_Veneers)(void);


/**************************************************************/
/* module_try_to_register()                                   */
/*                                                            */
/* Attempts to register with Video Control. Exits if already  */
/* registered. "registered" is set to 1 if registration is    */
/* successful, else left at its previous value.               */
/**************************************************************/

static _kernel_oserror * module_try_to_register(void)
{
  _kernel_oserror * e;

  dprintf(("", "module_try_to_register: Called\n"));

  if (registered)
  {
    dprintf(("", "module_try_to_register: Already registered, exitting\n"));
    return NULL;
  }

  e = _swix(VideoControl_ProtocolRegister,
            _INR(0,5),

            VC_ProtocolRegister_OpenStreamFlagsInR5 | VC_ProtocolRegister_DoNotResetOrSetSpeed,
            GCGeneric_00,
            GCGeneric_FetchScheme,
            Module_VersionNumber,
            Module_Help " © Pace 2003 (" Module_Date ")",
            MPEGCtrl_MCOS_AudioToStreamSyncOn | MPEGCtrl_MCOS_ReservedSetToOne);

  if (e == NULL) registered = 1;

  dprintf(("", "module_try_to_register: Finished, registered = %d\n", registered));

  return e;
}

/**************************************************************/
/* module_try_to_deregister()                                 */
/*                                                            */
/* Attempts to deregister with Video Control. Exits if not    */
/* registered. "registered" is set to 0 whether or not the    */
/* call to VideoControl to deregister raises an error.        */
/**************************************************************/

static _kernel_oserror * module_try_to_deregister(void)
{
  _kernel_oserror * e;

  dprintf(("", "module_try_to_deregister: Called\n"));

  if (registered == 0)
  {
    dprintf(("", "module_try_to_deregister: Not registered, exitting\n"));
    return NULL;
  }

  e = _swix(VideoControl_ProtocolDeregister,
            _INR(0,1),

            0,
            GCGeneric_00);

  registered = 0;

  dprintf(("", "module_try_to_deregister: Finished, e = %p\n", e));
  if (e) dprintf(("", "module_try_to_register: '%s'\n", e->errmess));

  return e;
}

/**************************************************************/
/* module_register()                                          */
/*                                                            */
/* Attempts to register with Video Control. If we get "SWI    */
/* not known" and this isn't a ROM build, try loading Video   */
/* Control. That should send the "started" service call       */
/* around which leads to another attempt to register later.   */
/**************************************************************/

static _kernel_oserror * module_register(void)
{
  _kernel_oserror * e = module_try_to_register();

  if (e == NULL) return NULL;
  if (e->errnum != GCGeneric_NoSuchSWI) return e;

  #ifndef ROM

    /* Try to load Video Control - if it starts it should send round a */
    /* service call that'll prompt us to attempt registration again.   */

    _swix(OS_Module,
          _INR(0,1),

          1, /* Load */
          "System:Modules.Network.Video.VideoCtrl");

  #endif

  return NULL;
}

/**************************************************************/
/* ComponentInfo                                              */
/*                                                            */
/* Returns information about the PRISM component              */
/*                                                            */
/* Assumptions                                                */
/*  NONE                                                      */
/*                                                            */
/* Inputs                                                     */
/*  tag:    information index value                           */
/*                                                            */
/* Outputs                                                    */
/*  result: value associated with tag                         */
/*                                                            */
/* Returns                                                    */
/*  NULL if successful; otherwise pointer to error block      */
/**************************************************************/

static _kernel_oserror *ComponentInfo(uint32_t tag, uintptr_t *result)
{
  switch (tag)
  {
    case 0: /* Protocol name and version */
    {
      const char *string = NULL;
      size_t len;
      RetError(read_message("V00", &string, &len));
      * (const char **) result = string;
      return NULL;
    }

    case 1: /* Integer protocol version */
    {
      *result = 100; /* supported GC version */
      return NULL;
    }

    case 2: /* Module name and version */
    {
      * (const char **) result = Module_ComponentName " " Module_HelpVersion;
      return NULL;
    }

    case 3: /* Integer module version * 100 */
    {
      *result = Module_Version;
      return NULL;
    }

    case 4: /* Copyright string */
    {
      const char *string = NULL;
      size_t len;
      RetError(read_message("C00", &string, &len));
      * (const char **) result = string;
      return NULL;
    }

    case 5: /* Short-form string */
    {
      static char info[80];
      if (info[0] == '\0')
      {
        const char *buffer = NULL;
        size_t len;
        unsigned int year;
        RetError(read_message("S00", &buffer, &len));
        sscanf(Module_Date, "%*u %*s %u", &year);
        snprintf(info, sizeof info, buffer, Module_FullVersion, Module_Date, year);
      }
      * (const char **) result = info;
      return NULL;
    }

    default:
    {
      return make_error(prism_ERROR_INVALID_PARAMETERS, 1, "ComponentInfo");
    }
  }
}

/**************************************************************/
/* module_prism_try_to_register()                             */
/*                                                            */
/* Attempts to register with PRISM. Exits if already          */
/* registered. "prism_registered" is set if registration      */
/* is successful, else left at its previous value.            */
/**************************************************************/

static _kernel_oserror * module_prism_try_to_register(void)
{
  dprintf(("", "module_prism_try_to_register: Called\n"));

  if (prism_registered)
  {
    dprintf(("", "module_prism_try_to_register: Already registered, exitting\n"));
    return NULL;
  }

  RetError(_swix(PRISM_ComponentRegister,
                 _INR(0,1),

                 0,
                 GCGeneric_PRISMID));

  RetError(_swix(PRISM_CreateVeneers,
                 _INR(0,4)|_OUT(1),

                 1,
                 static_CreateVeneerTable,
                 sizeof(static_CreateVeneerTable) / sizeof(*static_CreateVeneerTable),
                 module_wsp,
                 GCGeneric_PRISMID,

                 &global_Veneers));

  RetError(_swix(PRISM_ComponentNotify,
                 _INR(0,3),

                 0,
                 GCGeneric_PRISMID,
                 PRISM_Notify_DeclareInformation,
                 global_Veneers[0]));

  prism_registered = true;

  dprintf(("", "module_prism_try_to_register: Finished, prism_registered = %d\n", prism_registered));

  return NULL;
}

/**************************************************************/
/* module_prism_try_to_deregister()                           */
/*                                                            */
/* Attempts to deregister with PRISM. Exits if not            */
/* registered. "prism_registered" is cleared whether or not   */
/* the call to PRISM to deregister raises an error.           */
/**************************************************************/

static _kernel_oserror * module_prism_try_to_deregister(void)
{
  dprintf(("", "module_prism_try_to_deregister: Called\n"));

  if (prism_registered == false)
  {
    dprintf(("", "module_prism_try_to_deregister: Not registered, exitting\n"));
    return NULL;
  }

  RetError(_swix(PRISM_FreeVeneers,
                 _INR(0,2),

                 0,
                 global_Veneers,
                 GCGeneric_PRISMID));

  RetError(_swix(PRISM_ComponentDeregister,
                 _INR(0,1),

                 0,
                 GCGeneric_PRISMID));

  prism_registered = false;

  dprintf(("", "module_prism_try_to_deregister: Finished.\n"));

  return NULL;
}

/**************************************************************/
/* module_prism_register()                                    */
/*                                                            */
/* Attempts to register with PRISM. If we get "SWI not known" */
/* and this isn't a ROM build, try loading PRISM. That should */
/* send the "started" service call around which leads to      */
/* another attempt to register later.                         */
/**************************************************************/

static _kernel_oserror * module_prism_register(void)
{
  _kernel_oserror * e = module_prism_try_to_register();

  if (e == NULL) return NULL;
  if (e->errnum != PRISM_NoSuchSWI) return e;

  #ifndef ROM

    /* Try to load PRISM - if it starts it should send round a       */
    /* service call that'll prompt us to attempt registration again. */

    _swix(OS_Module,
          _INR(0,1),

          1, /* Load */
          "System:Modules.PRISM.PRISM");

  #endif

  return NULL;
}

/**************************************************************/
/* module_claim_event_vector()                                */
/*                                                            */
/* Claims the event vector for the purpose of receiving the   */
/* Internet event. A locking flag ensures multiple calls are  */
/* dealt with correctly.                                      */
/**************************************************************/

_kernel_oserror * module_claim_event_vector(void)
{
  if (!eventv_claimed)
  {
    _kernel_oserror * e;

    e = _swix(OS_Claim,
              _INR(0,2),

              EventV,
              event_entry,
              module_wsp);

    if (e == NULL) eventv_claimed = true;
    return e;
  }

  return NULL;
}

/**************************************************************/
/* module_release_event_vector()                              */
/*                                                            */
/* Releases the event vector. A locking flag ensures multiple */
/* calls are dealt with correctly.                            */
/**************************************************************/

_kernel_oserror * module_release_event_vector(void)
{
  if (eventv_claimed)
  {
    _kernel_oserror * e;

    e = _swix(OS_Release,
              _INR(0,2),

              EventV,
              event_entry,
              module_wsp);

    if (e == NULL) eventv_claimed = false;
    return e;
  }

  return NULL;
}

/**************************************************************/
/* module_enable_events()                                     */
/*                                                            */
/* Enables the Internet and VSync events. A locking flag      */
/* ensures multiple calls are dealt with correctly.           */
/**************************************************************/

void module_enable_events(void)
{
  if (!events_enabled)
  {
    (void) _swix(OS_Byte,
                 _INR(0,1),

                 14,
                 19); /* enable internet event */

    (void) _swix(OS_Byte,
                 _INR(0,1),

                 14,
                 4);  /* enable VSync event */
  }

  events_enabled = true;
}

/**************************************************************/
/* module_disable_events()                                    */
/*                                                            */
/* Disables the Internet and VSync events. A locking flag     */
/* ensures multiple calls are dealt with correctly.           */
/**************************************************************/

void module_disable_events(void)
{
  if (events_enabled)
  {
    (void) _swix(OS_Byte,
                 _INR(0,1),

                 13,
                 19); /* disable internet event */

    (void) _swix(OS_Byte,
                 _INR(0,1),

                 13,
                 4); /* disable VSync event */
  }

  events_enabled = false;
}

/**************************************************************/
/* module_init()                                              */
/*                                                            */
/* Startup code, usual initialisation entry point stuff.      */
/*                                                            */
/* Parameters: As normal for a CMHG initialisation function.  */
/**************************************************************/

_kernel_oserror * module_init(CMHG_CONST char * cmd_fail, int podule_base, void * pw)
{
  _kernel_oserror * e;

  (void) cmd_fail;
  (void) podule_base;

  module_wsp = pw;

  #ifdef ROM
    #ifndef NO_TINYSTUBS

      __ROM = _swix(TinySupport_Share,
                    _IN(0),

                    pw);

    #endif
  #endif

  #ifdef TRACE
    {
      debug_device dev = FILE_OUTPUT;

      debug_initialise("GCGeneric", "Cache:$.RTSPHdebug", NULL);
      debug_set_screen_cornering(FALSE);
      debug_set_unbuffered_files(FALSE);
      debug_set_device(dev);
    }
  #endif

  /* Keep this after debuglib initialisation or you won't */
  /* see any debug output from within the atexit handler. */

  atexit(module_atexit);

  #ifndef ROM

    e = _swix(ResourceFS_RegisterFiles,
              _IN(0),

              messages_file());

    if (e != NULL) return e;

  #endif

  if (getenv(Module_Title "$Path"))
  {
    e = messages_file_open(Module_Title ":Messages");
  }
  else
  {
    e = messages_file_open("Resources:$.Resources.VideoCtrl." Module_Title ".Messages");
  }

  #if CMHG_VERSION < 530

    /*
     * Earlier CMHGs won't call the atexit() handler if we return an
     * error here 'cos its bust. Could work around it but since there
     * is a fixed version available, insist on it.
     */

    #error You need CMHG 5.30 or later to build GCGeneric.

  #else

    if (e != NULL) return e;

  #endif

  /* Register with Video Control - No Such SWI is hidden, other */
  /* errors are reported.                                       */

  e = module_register();
  if (e != NULL && e->errnum != GCGeneric_NoSuchSWI) return e;

  /* Register with PRISM - No Such SWI is hidden, other */
  /* errors are reported.                               */

  e = module_prism_register();
  if (e != NULL && e->errnum != 0x1E6) return e;

  /* Callback to send "I'm starting" service call for PRISM */

  if (
       _swix(OS_AddCallBack,
             _INR(0,1),

             callback_entry,
             pw)

       == NULL
     )
     callback_pending_flag = true;

  return callout_init(pw);
}

/**************************************************************/
/* module_atexit()                                            */
/*                                                            */
/* atexit() handler for the module. Note that this is only    */
/* correctly called if the module is built with CMHG 5.30 or  */
/* later.                                                     */
/**************************************************************/

static void module_atexit(void)
{
  dprintf(("", "module_atexit: Called\n"));

  /* Ensure pending callbacks are cancelled */

  if (callback_pending_flag == true)
  {
    (void) _swix(OS_RemoveCallBack,
                 _INR(0,1),
                 callback_entry,
                 module_wsp);

    callback_pending_flag = false;
  }

  callout_final(module_wsp);
  messages_file_close();

  #ifndef ROM

    (void) _swix(ResourceFS_DeregisterFiles,
                 _IN(0),

                 messages_file());

  #endif

  /* We rely on the claimed and enabled flags to allow this blanket */
  /* call to disable the Internet event and release EventV. If we   */
  /* were to crash in some odd way elsewhere and subsequently kill  */
  /* the module, leaving EventV claimed would prove catastrophic.   */

  module_disable_events();
  module_release_event_vector();

  /* Now we can start shutting the rest down. Stuff here may start */
  /* looking through data structures so might crash, which would   */
  /* stop anything following being run. Hence, do the essential    */
  /* (but hopefully reliable!) stuff first, above.                 */

  module_prism_try_to_deregister();
  module_try_to_deregister();
  session_free_list();

  /* Send the "dying" service call for PRISM */

  (void) _swix(OS_ServiceCall,
               _INR(0,4),

               PRISMModuleDying,
               Service_PRISM_Core,
               0,
               GCGeneric_PRISMID,
               Module_VersionNumber);

  #ifdef ROM
    #ifndef NO_TINYSTUBS
      if(!__ROM) _swix(TinySupport_Die, 0);
    #endif
  #endif
}

/**************************************************************/
/* callback_handler()                                         */
/*                                                            */
/* Standard callback handler. When invoked, assumes the       */
/* module has just started, and issues Service_PRISM_Core     */
/* / ModuleStarted.                                           */
/*                                                            */
/* Parameters: As normal for a CMHG callback handler.         */
/**************************************************************/

int callback_handler(_kernel_swi_regs * r, void * pw)
{
  (void) pw;
  (void) r;

  if (callback_pending_flag == false)
  {
    return 1;
  }

  callback_pending_flag = false;

  dprintf(("", "callback_handler: Sending Service_PRISM_Core\n"));

  _swix(OS_ServiceCall,
        _INR(0,4),

        PRISMModuleStarted,
        Service_PRISM_Core,
        0,
        GCGeneric_PRISMID,
        Module_VersionNumber);

  return 1;
}

/**************************************************************/
/* service_handler()                                          */
/*                                                            */
/* General service call handler.                              */
/*                                                            */
/* Parameters: As normal for a CMHG service call handler.     */
/**************************************************************/

void service_handler(int service_number, _kernel_swi_regs * r, void * pw)
{
  (void)pw;

  dprintf(("", "service_handler: Called for %08x (%d, %d)\n", service_number, r->r[0], r->r[2]));

  switch (service_number)
  {
    case Service_VideoControl:
    {
      switch (r->r[0])
      {
        case VideoControlModuleStarted:
          module_try_to_register();
          break;
        case VideoControlModuleDying:
          registered = 0;
          break; /* Can't actively deregister as Video Control has gone away - "Dying" means "Died", really... */
        case VideoControlNewPlayState:
          dprintf(("", "service_handler: New play state %d for VCID &%08X\n", r->r[4], r->r[2]));
          break;
        case VideoControlNewMPEGState:
          dprintf(("", "service_handler: MPEG event &%04X for VCID &%08X\n", r->r[4], r->r[2]));
          break;
      }
    }
    break;

    case Service_PRISM_Core:
    {
      switch (r->r[0])
      {
        case PRISMSessionAborting:
        case PRISMCleanShutdown:
        case PRISMAbortiveShutdown:
        {
          //// Presently undefined
        }
        break;

        case PRISMModuleStarted:
        {
          /* If this is PRISM, re-register with it */

          if (r->r[3] == PRISM_PRISMID) module_prism_try_to_register();
        }
        break;

        case PRISMModuleDying:
        {
          /* If this is PRISM, note that we're not registered anymore */

          if (r->r[3] == PRISM_PRISMID) prism_registered = false;
        }
        break;
      }
    }
  } /* 'switch (service_number)' */
}

/**************************************************************/
/* swi_handler()                                              */
/*                                                            */
/* SWI dispatch table.                                        */
/*                                                            */
/* Parameters: As normal for a CMHG SWI handler.              */
/**************************************************************/

_kernel_oserror * swi_handler(int swi_no, _kernel_swi_regs * r, void * pw)
{
  (void)pw;

  switch(swi_no)
  {
    case GCGeneric_Setup                      - GCGeneric_00: /* GCGeneric_Setup           */
      return(setup_setup(r));                                 /* Setup.c                   */

    case GCGeneric_Options                    - GCGeneric_00: /* GCGeneric_Options         */
      return(options_options(r));                             /* Options.c                 */

    case GCGeneric_Status                     - GCGeneric_00: /* GCGeneric_Status          */
      return(status_status(r));                               /* Status.c                  */

    case GCGeneric_MoreInformation            - GCGeneric_00: /* GCGeneric_MoreInformation */
      return(moreinfo_more_information(r));                   /* MoreInfo.c                */

    case GCGeneric_Play                       - GCGeneric_00: /* GCGeneric_Play            */
      return(play_play(r));                                   /* Play.c                    */

    case GCGeneric_TearDown                   - GCGeneric_00: /* GCGeneric_TearDown        */
      return(teardown_tear_down(r));                          /* TearDown.c                */

    default:
      return error_BAD_SWI;
  }
}

/**************************************************************/
/* event_handler()                                            */
/*                                                            */
/* Event handler for the Internet event.                      */
/*                                                            */
/* Parameters: As normal for a CMHG event handler.            */
/**************************************************************/

int event_handler(_kernel_swi_regs * r, void * pw)
{
  int ret = 1; /* Pass on */

  (void)pw;

  if (r->r[0] == 4) /* VSync event */
  {
    session * s;

    /* Look for an active session */
    for (s = session_return_head(); s; s = s->next)
    {
      if (s->started != 0 && s->parent == NULL && s->mpegid != 0)
      {
        s->vsync_count++;

        if (s->vsync_count & 1)
        {
          /* Get the current video and audio buffer levels */
          static const unsigned int tags[] = {MPEGCtrl_MCS_VideoBufferTotal, MPEGCtrl_MCS_AudioBufferTotal, -1};
          struct result
          {
            unsigned int tag;
            unsigned int length;
            unsigned int data;
          };
          struct result results[2];
          unsigned remain;
          _kernel_oserror * e;
  
          e = _swix(MPEGControl_Stats,
                    _INR(0,4) | _OUT(4),
  
                    0,
                    s->mpegid,
                    tags,
                    results,
                    sizeof(results),

                    &remain);
  
          if (e == NULL && remain == 0)
          {
            s->vidbuf_total += results[0].data;
            s->audbuf_total += results[1].data;
          }
        }
        else if (s->vsync_count >= Buffer_Report_Interval*2)
        {
          s->vidbuf_level = s->vidbuf_total/Buffer_Report_Interval;
          s->audbuf_level = s->audbuf_total/Buffer_Report_Interval;

          s->vsync_count = 0;
          s->vidbuf_total = 0;
          s->audbuf_total = 0;

          if (s->bufreport_set == 0)
          {
            s->bufreport_set = 1;
            timeout(module_send_buffer_levels, s, 0);
          }
          else
          {
            dprintf(("Buff_0", "Help! Previous buffer report not sent!\n"));
          }

          dprintf(("Buff_0", "Video buffer average=%u, audio buffer average=%u\n",
                  s->vidbuf_level,
                  s->audbuf_level));
        }

        break;
      }
    }
  }
  else if (r->r[0] == 19 && r->r[1] == 1) /* socket_ASYNC_EVENT */
  {
    session * s;
    int       sid = r->r[2];

    _kernel_irqs_on();

    dprintf(("State_1", "event_handler: socket_ASYNC_EVENT for SD = %d\n", r->r[2]));

    for (s = session_return_head(); s; s = s->next)
    {
      if (s->sd == sid && s->parent == NULL)
      {
        /* We recognise this socket ID - call the state machine */

        if (s->state == protostate_CONNECTED)
        {
          /* We received data when we were expecting it - pass to the main */
          /* state machine.                                                */

          dprintf(("State_1", "event_handler: Expected socket activity - call main state machine\n"));
          status_proceed(s);
        }
        else
        {
          dprintf(("State_1", "event_handler: Unexpected socket activity - ignore\n"));
        }

        ret = 0; /* Intercept */
        break;
      }
    }
   
    _kernel_irqs_off();
  }

  return ret; /* Pass it on */
}

/**************************************************************/
/* module_send_buffer_levels()                                */
/*                                                            */
/* A CallOut handler (see CallOut.h) which sends the latest   */
/* video and audio buffer levels to the server.               */
/*                                                            */
/* Parameters: The handle should point to the session struct  */
/*             we're interested in.                           */
/**************************************************************/

static void module_send_buffer_levels(void * handle)
{
  session      * s = (session *) handle;
  const int reqlen = 25;  /* Size of G-cluster frameack packet */

  dprintf(("Buff_1", "module_send_buffer_levels: Called\n"));

  if (s->dying != 0 || s->bufreport_set == 0) return;

  s->bufreport_set = 0;

  /* If we are currently sending, append these packets to the end of the */
  /* queue, otherwise make a new block and start sending it.             */

  if (s->full_request == NULL)
  {
    s->full_request = malloc(reqlen);
    if (s->full_request != NULL)
    {
      module_make_frameack_packet(s, s->full_request);
      ddumpbuf("Buff_2", s->full_request, reqlen, 0);
  
      s->reqptr = 0;
      s->reqlen = reqlen;
      s->state = protostate_SENDING;
      s->last = utils_read_time();
  
      /* Run the state machine */
      status_proceed(s);
    }
  }
  else
  {
    char * new_data = realloc(s->full_request, s->reqlen + reqlen);

    if (new_data != NULL)
    {
      s->full_request = new_data;
      module_make_frameack_packet(s, s->full_request + s->reqlen);
      ddumpbuf("", s->full_request + s->reqlen, reqlen, s->reqlen);
      s->reqlen += reqlen;
  
      /* The state machine must already be running */
    }
  }
}

/**************************************************************/
/* module_make_frameack_packet()                              */
/*                                                            */
/* Construct a G-cluster 'frameack' packet to send the buffer */
/* level information to the server.                           */
/*                                                            */
/* Parameters: The handle should point to the session struct  */
/*             we're interested in.                           */
/*                                                            */
/*             Pointer to the data block to write the packet  */
/*             to. This must be 25 bytes long.                */
/**************************************************************/

static void module_make_frameack_packet(session * s, char * ptr)
{
  struct
  {
    unsigned int m_frameNumber;
    unsigned int m_nBufferedAudioBytes;
    unsigned int m_frameSendTime;
    int          m_inputToFrameHeaderTime;
    int          m_serverProcessingTime;
    int          m_frameDecodeTime;
  } frameack_data;

  frameack_data.m_frameNumber            = s->bufreport_count++;
  frameack_data.m_nBufferedAudioBytes    = s->audbuf_level;
  frameack_data.m_frameSendTime          = s->vidbuf_level;
  frameack_data.m_inputToFrameHeaderTime = 0;
  frameack_data.m_serverProcessingTime   = 0;
  frameack_data.m_frameDecodeTime        = 0;

  *ptr = 2; /* Packet type */
  memcpy(ptr+1, &frameack_data, sizeof(frameack_data));
}
