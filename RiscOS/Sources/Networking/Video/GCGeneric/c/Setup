/**************************************************************/
/* File:    Setup.c                                           */
/*                                                            */
/* Purpose: Implement GCGeneric_Setup.                        */
/*                                                            */
/* Author:  J.R.Byrne. Based on RTSPOVS etc. source by        */
/*          A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 12-Nov-2002 (JRB): Created.                       */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#include <swis.h>
#include <socklib.h>
#include <inetlib.h>
#include <sys/types.h>
#include <sys/socket.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <VideoCtrl.h> /* Exported by VideoCtrl's !MkExport */

#include "CallOut.h"
#include "Connect.h"
#include "Generic.h"
#include "Global.h"
#include "Headers.h"
#include "Module.h"
#include "GCGenErrors.h"
#include "Session.h"
#include "Status.h"
#include "URLutils.h"
#include "URLveneer.h"
#include "Utils.h"

#include "Setup.h"

/* Local functions */

static _kernel_oserror * setup_open_socket (session * s);

/**************************************************************/
/* setup_setup()                                              */
/*                                                            */
/* Implement GCGeneric_Setup. See the Video Control           */
/* specification, 2501,817/FS, for more.                      */
/**************************************************************/

_kernel_oserror * setup_setup(_kernel_swi_regs * r)
{
  _kernel_oserror * e;
  session         * s;
  char            * url;

  dprintf(("Entry_0", "setup_setup: Called\n"));
  dprintf(("Entry_1", " r0=&%08x\n",r->r[0]));
  dprintf(("Entry_1", " r1=&%08x\n",r->r[1]));
  dprintf(("Entry_1", " r2='%s'\n",r->r[2] ? (char *)r->r[2] : "NULL"));
  dprintf(("Entry_1", " r3='%s'\n",r->r[3] ? (char *)r->r[3] : "NULL"));
  dprintf(("Entry_1", " r4='%s'\n",r->r[4] ? (char *)r->r[4] : "NULL"));
  dprintf(("Entry_1", " r5=&%08x\n",r->r[5]));
  dprintf(("Entry_1", " r6=&%08x\n",r->r[6]));
  dprintf(("Entry_1", " r7=&%08x\n",r->r[7]));

  /* Just in case, make sure we're not already set up */

  if (session_find_by_id(r->r[1]) != NULL)
  {
    dprintf(("Error_0", "setup_setup: Already set up\n"));
    return make_error(GCGeneric_ERROR_ALREADY_SETUP, 0);
  }

  /* Gain ourselves a session */

  e = session_new_session(&s);

  if (e != NULL)
  {
    dprintf(("Error_0", "setup_setup: session_new_session error '%s'\n", e->errmess));
    return e;
  }

  if (s == NULL)
  {
    dprintf(("Error_0", "setup_setup: Out of memory\n"));
    return make_error(GCGeneric_ERROR_MEMORY_EXHAUSTED, 0);
  }

  s->id    = ++id_counter; /* See Global.h */
  s->vcid  = (unsigned int) r->r[1];

  /* Fill in the new item */

  if (r->r[2] != 0) url = (char *) r->r[2];
  else              url = "";

  e = urlutils_return_description(url, &s->url);

  if (e != NULL)
  {
    dprintf(("Error_0", "setup_setup: Error '%s' from urlutils_return_description\n", e->errmess));
    session_free_item(s);
    return e;
  }

  if (s->url == NULL)
  {
    /* Memory allocation failure */

    dprintf(("Error_0", "setup_setup: Out of memory\n"));
    e = make_error(GCGeneric_ERROR_MEMORY_EXHAUSTED, 0);
  }
  else
  {
    /* OK, open the control socket */
  
    e = setup_open_socket(s);
  }

  if (e == NULL)
  {
    /* Don't forget to tell Video Control about our session handle */
    /* before returning                                            */
  
    r->r[1] = (int) s->id;
  }
  else
  {
    /* Failed - discard session and return error */

    session_free_item(s);
  }

  return e;
}

/**************************************************************/
/* setup_open_socket()                                        */
/*                                                            */
/* Parameters: Pointer to the session structure representing  */
/*             the session for which the socket is to be      */
/*             opened.                                        */
/**************************************************************/

static _kernel_oserror * setup_open_socket(session * s)
{
  int port;

  session_reset_session(s);

  /* Open a socket to send commands down */

  if (s->url->port && *s->url->port) port = atoi(s->url->port);
  else                               port = GCGeneric_DefaultPort;
 
  s->last = utils_read_time();

  s->sd = opensock(s->url->host,
                   port,
                   NULL,
                   &s->state,
                   -1);

  if (s->state == protostate_ERROR) s->err_no = -s->sd;

  dprintf(("", "setup_open_socket: Socket descriptor %d, state %d\n", s->sd, s->state));

  /* Set the state machine going to see errors and DNS stuff. The callout  */
  /* will normally always be cleared already when this function is called. */

  if (s->callout_set == 0)
  {
    s->callout_set = 1;
    timeout(status_proceed_on_callout, s, Session_State_Timer);
  }

  dprintf(("", "setup_open_socket: Successful\n"));

  return NULL;
}
