/**************************************************************/
/* File:    Main.c                                            */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: To run.                                           */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 03-Apr-2000 (ADH): Adapted from Browse source.    */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <setjmp.h>
#include <signal.h>

#include <Global/RISCOS.h>
#include <Global/Services.h>
#include <kernel.h>
#include <swis.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>
#include <tboxlibs/event.h>
#include <tboxlibs/toolbox.h>

#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <URI.h>

#include "Filter.h"
#include "FromROSLib.h"
#include "FullScreen.h"
#include "Global.h"
#include "Handlers.h"
#include "MiscDefs.h"
#include "Overlay.h"
#include "Play.h"
#include "PlugIn.h"
#include "RMA.h"
#include "SetPW.h"
#include "URLutils.h"
#include "Utils.h"

#include "Main.h"

/* Local compile-time options */

#undef WRITE_DUMP_FILE_ON_ERROR /* Define as '"<filename>"' for a dump file - see main */

/* Local functions */

static void initialise_app (void);
static void termination    (void);
static void catch_errors   (int signum);

/**************************************************************/
/* initialise_app()                                           */
/*                                                            */
/* Initialises application as a Toolbox task.                 */
/**************************************************************/

static void initialise_app(void)
{
  int module_version;

  show_error(event_initialise(&idb));

  /* Register fundamental handlers and initialise as a Toolbox task */

  show_error(event_register_message_handler(Wimp_MQuit, handle_messages, NULL));
  show_error(event_register_toolbox_handler(-1, Toolbox_Error, report_toolbox_error, NULL));

  /* Check the Wimp version; for window managers of 3.8 and above, */
  /* declare a minimum version of 3.80 so borderless windows can   */
  /* still have tools. Otherwise, only ask for 3.1.                */

  _swix(Wimp_ReadSysInfo, _IN(0) | _OUT(0), 7, &module_version);

  if (module_version >= 387) nested_wimp = 1;
  else                       nested_wimp = 0;

  show_error(toolbox_initialise(0,
                                nested_wimp ? WIMPMINH : WIMPMINL,
                                messages_list,
                                event_code_list,
                                task_dir,
                                &meb,
                                &idb,
                                &wimp_version,
                                &task_handle,
                                (void *) &sprite_block));

  /* Remember the application name */

  StrNCpy0(program_name,
           lookup_token("_TaskName",1,0));

  /* If the system variable 'PlugPlay$IssueDesktopCommand' is set to 'yes', */
  /* then the AcornURI and/or TaskModule modules were started in !Run and   */
  /* we must issue a *Desktop command to start their task components.       */

  {
    char combuf[96];

    sprintf(combuf, "If \"<PlugPlay$IssueDesktopCommand>\" = \"yes\" Then WimpTask Desktop\r\n");

    _swix(OS_CLI, /* Don't want to hear about any errors */
          _IN(0),

          combuf);
  }

  /* Register with TaskModule */

  show_error(_swix(TaskModule_RegisterService,
                   _INR(0,2),

                   0,
                   Service_VideoControl,
                   task_handle));

  show_error(_swix(TaskModule_RegisterService,
                   _INR(0,2),

                   0,
                   Service_SafeAreaChanged,
                   task_handle));

  taskmodule_ds_registered = 1;

  show_error(event_register_message_handler(Message_Service,        handle_messages, NULL));

  /* ANT protocols */

  show_error(event_register_message_handler(Message_ANTOpenURL,     handle_messages, NULL));

  /* Plug-In protocol */

  show_error(event_register_message_handler(Message_PlugIn_Open,    handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_Close,   handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_Reshape, handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_Action,  handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_Abort,   handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_Inform,  handle_messages, NULL));
  show_error(event_register_message_handler(Message_PlugIn_Focus,   handle_messages, NULL));

  /* URI handler message handling */

  show_error(event_register_message_handler(URI_MStarted,           handle_messages, NULL));
  show_error(event_register_message_handler(URI_MDying,             handle_messages, NULL));
  show_error(event_register_message_handler(URI_MProcess,           handle_messages, NULL));
  show_error(event_register_message_handler(URI_MReturnResult,      handle_messages, NULL));

  /* AppControl message handling */

  show_error(event_register_message_handler(Wimp_MAppControl,       handle_messages, NULL));

  /* General Wimp message handling */

  show_error(event_register_message_handler(Wimp_MModeChange,       handle_messages, NULL));

  /* For filters */

  show_error(rma_claim(NULL,
                       sizeof(SYSTEM),
                       (void **) &rma_system));

  if (rma_system == NULL) show_error(make_no_memory_error(1));

  strcpy(rma_system, SYSTEM);

  #ifdef APPLICATION

    show_error(rma_claim(NULL,
                         SetPW_DataLen + SetPW_FuncLen,
                         (void *) &rma_filter));

    if (rma_filter == NULL) show_error(make_no_memory_error(2));

    memcpy(rma_filter,
           (void *) setpw_data_start,
           SetPW_DataLen + SetPW_FuncLen);

    _swix(OS_SynchroniseCodeAreas,
          _INR(0,2),

          1,
          rma_filter,
          rma_filter + SetPW_DataLen + SetPW_FuncLen - sizeof(int));

    show_error(event_register_wimp_handler(-1, Wimp_EPollWordNonZero, handle_pollword, NULL));

  #endif

  /* Initialise FromROSLib routines */

  wimpt_read();

  /* Initialise Utils.c routines */

  read_os_to_points();

  /* Initialise the overlay system */

  overlay_initialise();
}

/**************************************************************/
/* termination()                                              */
/*                                                            */
/* Called by registration through the atexit function. Shuts  */
/* down core functions prior to the application exitting.     */
/**************************************************************/

void termination(void)
{
  #ifdef TRACE
    if (tl & (1u<<5)) dprintf(("", "termination: Called\n"));
  #endif

  if (taskmodule_ds_registered)
  {
    /* Not interested in any errors, if it fails we can't really */
    /* do anything about it at this stage.                       */

    _swix(TaskModule_DeRegisterService,
          _INR(0,2),

          0,
          0,
          task_handle);
  }

  if (rma_system != NULL) rma_release(NULL, (void *) rma_system);
  if (rma_filter != NULL) rma_release(NULL, (void *) rma_filter);

  fullscreen_shutdown();
  play_shutdown();
  overlay_shutdown();
  plugin_shutdown();
  filter_shutdown();
  rma_shutdown();
}

/**************************************************************/
/* main()                                                     */
/*                                                            */
/* That which runs before all others.                         */
/**************************************************************/

int main(int argc, char * argv[])
{
  WimpPollBlock   b;
  unsigned int  * pw;
  int             argp = 1;
  int             eventcode, time;

  #ifdef APPLICATION

    unsigned int mask = Wimp_Poll_NullMask;

  #endif


  #ifdef TRACE
    {
      debug_device dev = TML_OUTPUT;

      debug_initialise(/*"\0216"*/ SYSTEM /*"\0217"*/, "$.PPdebug", NULL);
      debug_atexit();
      debug_set_screen_cornering(FALSE);
      debug_set_unbuffered_files(TRUE);
      debug_set_device(dev);
    }
  #endif

  /* NB, don't forget to echo any changes here with the duplicate code */
  /* just below the setjmp call later.                                 */

  signal(SIGOSERROR, catch_errors); /* OS error            */
  signal(SIGILL,     catch_errors); /* Illegal instruction */
  signal(SIGSEGV,    catch_errors); /* Segment violation   */
  signal(SIGSTAK,    catch_errors); /* Stack overflow      */
  signal(SIGFPE,     catch_errors); /* FPE error           */

  /* Before initialisation, find out where we ran from - this */
  /* software can support different application names, so the */
  /* existance of a specific system variable cannot be relied */
  /* upon (with the exception of ROM builds).                 */

  {
    int    len;
    char * item;

    /* Work out what path to go through */

    #ifdef ROM

      item = "Resources:$.Resources.PlugPlay";
      len  = strlen(item);

    #else

      item = SYSTEM ":a.^"; /* Ick */
      len  = strlen(item);

    #endif

    /* Allocate the space, bomb out if it fails */

    task_dir = (malloc)(len + 1);

    if (!task_dir)
    {
      erb.errnum = Utils_Error_Custom_Fatal;
      strcpy(erb.errmess, "There is insufficient free memory to start the plug-in.");
      show_error(&erb);
    }

    /* Copy the information and ensure it is terminated correctly */

    strncpy(task_dir, item, len);
    task_dir[len] = 0;
  }

  #ifdef TRACE

    /* Handle -d[ebug] CLI switch; see Global.c for more information. */
    /* This must be the first command line argument.                  */

    if (argc >= argp + 1)
    {
      if (!strcmp(argv[argp],"-debug") || !strcmp(argv[argp],"-d"))
      {
        if (strstr(argv[argp + 1], "MsgT")) tl |= (1u<<0);
        if (strstr(argv[argp + 1], "Filt")) tl |= (1u<<1);
        if (strstr(argv[argp + 1], "Null")) tl |= (1u<<2);
        if (strstr(argv[argp + 1], "Rout")) tl |= (1u<<5);
        if (strstr(argv[argp + 1], "Over")) tl |= (1u<<6);
        if (strstr(argv[argp + 1], "Play")) tl |= (1u<<7);
        if (strstr(argv[argp + 1], "LMem")) tl |= (1u<<12);
        if (strstr(argv[argp + 1], "URIH")) tl |= (1u<<21);
        if (strstr(argv[argp + 1], "Plug")) tl |= (1u<<30);
        if (strstr(argv[argp + 1], "Full")) tl |= (1u<<31);

        if (strstr(argv[argp + 1], "All"))  tl  = 0xffffffff;

        argp += 2;
      }
    }

    if (tl & (1u<<5)) dprintf(("", "\nmain: Initialising\n"));

  #endif

  /* Now do the bulk of application initialisation */

  initialise_app();

  #ifdef APPLICATION

    pw = (unsigned int *) (rma_filter + ((unsigned int) &setpw_pollword - (unsigned int) &setpw_data_start));

    /* Annoyingly, eventlib doesn't set bit 22 to say there's a pollword */
    /* present just because we give it a pollword. Still, we probably    */
    /* want to set bit 23 (high priority) anyway, so here goes.          */

    show_error(event_get_mask(&mask));
    mask |= Wimp_Poll_PollWord | Wimp_Poll_PollWordHighPriority;
    show_error(event_set_mask(mask));

  #else

    pw = NULL;

  #endif

  #ifdef TRACE
    #ifdef APPLICATION
      if (tl & (1u<<5)) dprintf(("", "main: Poll mask set to &%08X. Handling CLI arguments...\n", mask));
    #else
      if (tl & (1u<<5)) dprintf(("", "main: Handling CLI arguments...\n"));
    #endif
  #endif

  /* Ensure our shut down handlers are present */

  atexit(termination);

  /* Keep advancing argp if the arguments are dealt with;  */
  /* only continue to check the arguments if we haven't    */
  /* pushed argp past argc, the total number of arguments. */

  while (argc >= argp)
  {
    /* Handle -url (URL strings) */

    if (argc >= argp + 1 && (!strcmp(argv[argp],"-url") || !strcmp(argv[argp],"-uri") || !strcmp(argv[argp],"-u")))
    {
      #ifdef TRACE
        if (tl & (1u<<5)) dprintf(("", "main: Handling -url CLI argument\n"));
      #endif

      char * url = argv[argp + 1];
      int    ok  = urlutils_check_protocols(url);

      if (ok) fullscreen_report_error(fullscreen_start(url, 0), true);

      argp += 2;
    }
    else argp++;
  }

  #ifdef TRACE
    if (tl & (1u<<5)) dprintf(("", "main: Polling\n"));
  #endif

  /* Long jump handler - most nasty or generally unexpected */
  /* errors will come back to here. The OS error abort      */
  /* handler jumps back here to deal with the error as we   */
  /* then have a clear stack; this is to avoid 'no stack    */
  /* for trap handler' errors caused by a SWI corrupting    */
  /* the value of R10.                                      */

  if (setjmp(env) == Main_FromCatchErrors)
  {
    char         * tok        = NULL;
    unsigned int * regdump    = NULL;
    unsigned int * os_regdump = NULL;
    char           pc[16];

    /* Sort out the register dump */

    _swix(OS_ChangeEnvironment,
          _INR(0,3) | _OUT(3),

          7, /* Call back */
          0,
          0,
          0,

          &regdump); /* Where the C library put the registers */

    _swix(OS_ChangeEnvironment,
          _INR(0,3) | _OUT(1),

          13, /* Exception registers */
          0,
          0,
          0,

          &os_regdump); /* Where *ShowRegs gets them from */

    /* Copy the C register dump into the OS space */

    if (regdump && os_regdump) memcpy(os_regdump, regdump, 4 * 16);

    /* Store a more sensible error in the error block 'erb' where possible. */

    #ifdef WRITE_DUMP_FILE_ON_ERROR

    {
      FILE * debug = fopen(WRITE_DUMP_FILE_ON_ERROR, "a");

      if (debug)
      {
        fprintf(debug,
                "Error '%s', code 0x%08x\n",
                (erb.errmess ? erb.errmess : "NULL"),
                erb.errnum);

        fprintf(debug,
                "regdump, os_regdump: %p, %p\n",
                regdump,
                os_regdump);

        fclose(debug);
      }
    }

    #endif

    switch (erb.errnum & 0x00ffffff)
    {
      case 0x000000: tok = "EZeros0"; break;
      case 0x000001: tok = "EZeros1"; break;
      case 0x000002: tok = "EZeros2"; break;
      case 0x000003: tok = "EZeros3"; break;
      case 0x000005: tok = "EZeros5"; break;
    }

    #ifdef WRITE_DUMP_FILE_ON_ERROR

    {
      FILE * debug = fopen(WRITE_DUMP_FILE_ON_ERROR, "a");

      if (debug)
      {
        if (!tok) fprintf(debug, "No error message found or no lookup done!\n");
        fclose(debug);
      }
    }

    #endif

    if (tok)
    {
      char * error;

      #ifdef WRITE_DUMP_FILE_ON_ERROR

      {
        FILE * debug = fopen(WRITE_DUMP_FILE_ON_ERROR, "a");

        if (debug)
        {
          fprintf(debug, "Token '%s'\n",tok);
          fclose(debug);
        }
      }

      #endif

      /* If we know the PC, put this in the message */

      if (!regdump) sprintf(pc, "&deaddead");
      else          sprintf(pc, "&%08X", os_regdump[15] &~ 0xfc000003);

      error = lookup_token(tok, 0, pc);

      #ifdef WRITE_DUMP_FILE_ON_ERROR

      {
        FILE * debug = fopen(WRITE_DUMP_FILE_ON_ERROR, "a");

        if (debug)
        {
          fprintf(debug, "String '%s'\n",error);
          fclose(debug);
        }
      }

      #endif

      /* If the message token wasn't found, use the OS error, */
      /* otherwise copy the new one into the error block.     */

      if (strcmp(error, "!")) StrNCpy0(erb.errmess, error);
    }

    /* Need to reinstall the signal handlers since the run-time */
    /* system will have removed them 'For Your Safety And       */
    /* Convenience'. Don't forget to keep this list up to date  */
    /* with the code near the top of the function.              */

    signal(SIGOSERROR, catch_errors); /* OS error            */
    signal(SIGILL,     catch_errors); /* Illegal instruction */
    signal(SIGSEGV,    catch_errors); /* Segment violation   */
    signal(SIGSTAK,    catch_errors); /* Stack overflow      */
    signal(SIGFPE,     catch_errors); /* FPE error           */

    erb.errnum = Utils_Error_Custom_Normal; /* For 'Quit' as well as 'Continue' */

    show_error_cont(&erb);
  }

  while (!quit)
  {
    /* What time is it? (For Wimp_PollIdle) */

    _swix(OS_ReadMonotonicTime,
          _OUT(0),

          &time);

    ChkError(event_poll_idle(&eventcode,
                             &b,
                             time + Main_TaskPollIdleGap,
                             pw));
  }

  #ifdef TRACE
    if (tl & (1u<<5))  dprintf(("", "\nmain: Calling exit()\n\n"));
  #endif

  /* This will call the termination() function in passing */

  exit(EXIT_SUCCESS);
}

/**************************************************************/
/* catch_errors()                                             */
/*                                                            */
/* Catch OS errors and report them with the opportunity to    */
/* continue or quit (done inside main itself).                */
/*                                                            */
/* This is the last function in the file since it plays       */
/* around with stack checking, and you can't read the         */
/* previous state. If this was in the middle of the source    */
/* and someone wrote a #pragma above it, endless confusion    */
/* could otherwise arise as to why the instruction had no     */
/* effect on some of the functions here...                    */
/*                                                            */
/* Parameters: The signal number (ignored).                   */
/**************************************************************/

#pragma no_check_stack

static void catch_errors(int signum)
{
  (void) signum;

  /* Store the error locally */

  StrLastE;

  /* Go back to main to report the error */

  longjmp(env, Main_FromCatchErrors);

  /* Just in case... */

  exit(EXIT_FAILURE);
}
