/**************************************************************/
/* File:    URLutils.c                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: URL manipulation for the browser.browser.         */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 06-Feb-1997 (ADH): Created.                       */
/*          07-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <swis.h>

#include <tboxlibs/wimp.h>

#include <URI.h> /* URI handler API, in URILib:h */

#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Global.h"
#include "URLveneer.h"
#include "Utils.h"

#include "URLutils.h"

/* Local definitions */

#define ExtensionMatches(url, len, ext) (len) > strlen(ext) && !strncmp((url) + (len) - strlen(ext), (ext), strlen(ext))

/* Local variables */

/* Pointer to first item in queue of URLs dispatched through */
/* the URI handler (structure defined in URLutils.h)         */

static uri_queue * uri_queue_base = NULL;

/**************************************************************/
/* urlutils_urlsscmp()                                        */
/*                                                            */
/* Compares two URLs, returning 1 if they differ or 0 if they */
/* are the same. Both URLs are converted internally to        */
/* url_descriptions.                                          */
/*                                                            */
/* Parameters: Pointer to a null terminated URL string;       */
/*                                                            */
/*             Pointer to a second null termina- ted URL      */
/*             string.                                        */
/*                                                            */
/* Returns:    0 if the URLs match, else 1.                   */
/**************************************************************/

int urlutils_urlsscmp(const char * url_s1, const char * url_s2)
{
  url_description * url_d1;
  url_description * url_d2;
  int               result;

  /* Sanity check */

  if (!url_s1 && !url_s2) return 0;
  if (!url_s1 || !url_s2) return 1;

  // Awaiting URL module stuff

  url_d1 = urlutils_return_description(url_s1);
  url_d2 = urlutils_return_description(url_s2);

  if (url_d1 && url_d2)
  {
    result = !!strcmp(url_d1->full, url_d2->full);
  }

  /* No memory, no brain. Hey ho. */

  else result = !!strcmp(url_s1, url_s2);

  urlutils_free_description(url_d1);
  urlutils_free_description(url_d2);

  return result;
}

/**************************************************************/
/* urlutils_urldscmp()                                        */
/*                                                            */
/* Compares two URLs, returning 1 if they differ or 0 if they */
/* are the same. The first URL is specified as a              */
/* url_description, the second URL is converted internally.   */
/*                                                            */
/* Parameters: Pointer to a url_description filled in with    */
/*             the URL details;                               */
/*                                                            */
/*             Pointer to a second null termina- ted URL      */
/*             string.                                        */
/*                                                            */
/* Returns:    0 if the URLs match, else 1.                   */
/**************************************************************/

int urlutils_urldscmp(const url_description * url_d, const char * url_s)
{
  url_description * url_d2;
  int               result;

  /* Sanity check */

  if (!url_d)                 return 1;
  if (!url_s && !url_d->full) return 0;
  if (!url_s || !url_d->full) return 1;

  // Awaiting URL module stuff

  url_d2 = urlutils_return_description(url_s);

  if (url_d && url_d2)
  {
    result = !!strcmp(url_d->full, url_d2->full);
  }
  else result = !!strcmp(url_d->full, url_s);

  urlutils_free_description(url_d2);

  return result;
}

/**************************************************************/
/* urlutils_urldscmp()                                        */
/*                                                            */
/* Compares two URLs, returning 1 if they differ or 0 if they */
/* are the same. Both URLs are specified as url_description   */
/* structures.                                                */
/*                                                            */
/* Parameters: Pointer to a url_description filled in with    */
/*             the URL details;                               */
/*                                                            */
/*             Another url_description pointer, filled in     */
/*             with the details of a second URL.              */
/*                                                            */
/* Returns:    0 if the URLs match, else 1.                   */
/**************************************************************/

int urlutils_urlddcmp(const url_description * url_d1, const url_description * url_d2)
{
  /* Sanity check */

  if (!url_d1 && url_d2)  return 1;
  if (!url_d2 && url_d1)  return 1;
  if (!url_d1 && !url_d2) return 0;

  if (!url_d1->full && !url_d2->full) return 0;
  if (!url_d1->full || !url_d2->full) return 1;

  // Awaiting URL module stuff

  return !!strcmp(url_d1->full, url_d2->full);
}

/**************************************************************/
/* urlutils_return_description()                              */
/*                                                            */
/* Given a URL string, returns a url_description structure    */
/* which contains more accessible details on the URL          */
/* contents.                                                  */
/*                                                            */
/* The block itself and all filled in fields are allocated    */
/* with malloc(), and any additions to the structure should   */
/* be allocated in the same way.                              */
/*                                                            */
/* Parameters: Pointer to a null terminated URL string.       */
/*                                                            */
/* Returns:    Pointer to a url_description structure filled  */
/*             in with details of the string, or NULL if      */
/*             allocation failed.                             */
/**************************************************************/

url_description * urlutils_return_description(const char * url_s)
{
  url_description * new;

  size_t            rlen;
  char *            tlen;
  int               plen;

  if (!url_s || !*url_s) return NULL;

  /* Allocate the structure */

  new = calloc(1, sizeof(url_description));

  if (!new) return NULL;

  /* Find the item lengths */

  if (_swix(URL_ParseURL,
            _INR(0,5),

            URL_ParseURL_LengthInR5,
            URL_ParseURL_Reason_FindLengths,
            url_s,
            NULL,
            new,
            sizeof(url_description) / sizeof(int))) goto urlutils_return_description_free_and_exit;

  /* Expect the canonicalised form at the very least; new->full on */
  /* return from the SWI holds the buffer length required for this */

  if (!new->full) goto urlutils_return_description_free_and_exit;

  /* Allocate a block to hold all of the fields */

  rlen = (int) new->full     +
         (int) new->protocol +
         (int) new->host     +
         (int) new->port     +
         (int) new->user     +
         (int) new->password +
         (int) new->account  +
         (int) new->path     +
         (int) new->query    +
         (int) new->fragment;

  if (!rlen) goto urlutils_return_description_free_and_exit;

  tlen      = (char *) new->full;
  new->full = malloc(rlen);
  if (!new->full) goto urlutils_return_description_free_and_exit;

  tlen     += (int) new->full;

  if (new->protocol) plen = (int) new->protocol, new->protocol = tlen, tlen += plen;
  if (new->host)     plen = (int) new->host,     new->host     = tlen, tlen += plen;
  if (new->port)     plen = (int) new->port,     new->port     = tlen, tlen += plen;

  if (new->user)     plen = (int) new->user,     new->user     = tlen, tlen += plen;
  if (new->password) plen = (int) new->password, new->password = tlen, tlen += plen;
  if (new->account)  plen = (int) new->account,  new->account  = tlen, tlen += plen;

  if (new->path)     plen = (int) new->path,     new->path     = tlen, tlen += plen;

  if (new->query)    plen = (int) new->query,    new->query    = tlen, tlen += plen;
  if (new->fragment) new->fragment = tlen;

  /* Fill in the block */

  if (_swix(URL_ParseURL,
            _INR(0,5),

            URL_ParseURL_LengthInR5,
            URL_ParseURL_Reason_FillBuffers,
            url_s,
            NULL,
            new,
            sizeof(url_description) / sizeof(int))) goto urlutils_return_description_free_and_exit;

  /* Finished */

  return new;

  /* Error condition exit routine */

urlutils_return_description_free_and_exit:

  urlutils_free_description(new);

  return NULL;
}

/**************************************************************/
/* urlutils_free_description()                                */
/*                                                            */
/* Frees a url_description and all memory associated with it. */
/*                                                            */
/* The function expects all filled in fields in the structure */
/* to point to malloced blocks, as this is the way that       */
/* urlutils_return_description allocates it.                  */
/*                                                            */
/* Parameters: Pointer to a url_description structure.        */
/**************************************************************/

void urlutils_free_description(url_description * url_d)
{
  /* Not the most demanding code in the world, really */

  free(url_d->full);
  free(url_d);

  return;
}

/**************************************************************/
/* urlutils_pathname_to_url()                                 */
/*                                                            */
/* Takes a pathname, and turns it into a File URL, if it      */
/* isn't one already. The pathname that you give is altered   */
/* directly, so if you want to remember the path as well as   */
/* the URL, ensure there is a second copy of it in another    */
/* buffer somewhere.                                          */
/*                                                            */
/* Parameters: Pointer to the pathname;                       */
/*                                                            */
/*             Size of the buffer the pathname is stored in.  */
/**************************************************************/

void urlutils_pathname_to_url(char * path, int buffersize)
{
  int    len;
  char * pathdup;

  /* Try to expand the path - if this fails, carry on */
  /* without the expansion.                           */

  pathdup = malloc(strlen(path) + 1);

  if (pathdup)
  {
    unsigned int flags;

    strcpy(pathdup, path);

    /* Expand the path */

    if (
         _swix(OS_GSTrans,
               _INR(0,2) | _OUT(_FLAGS),

               pathdup,
               path,
               buffersize,

               &flags)

         || (flags & _C)
       )
    {
      strcpy(path, pathdup);
    }
    else
    {
      /* Terminate the string at any control code */

      for (len = 0; len < buffersize; len++)
      {
        if (path[len] < 32)
        {
          path[len] = 0;
          break;
        }
      }
    }

    free(pathdup);
  }

  /* Find the length of the File module protocol specifier */

  len = strlen(FileMethod ProtocolSepShort); /* (urlutils.h) */

  /* If the first part of the string doesn't match the FileMethod */
  /* specifier (see URLutils.h) then insert this text and convert */
  /* the rest of the path to a URL.                               */

  if (strncmp(path, FileMethod ProtocolSepShort, len))
  {
    memmove(path + len, path, buffersize - len);
    strncpy(path, FileMethod ProtocolSepShort, len);

    /* Ensure the string is terminated */

    path[buffersize - 1] = 0;

    /* Now translate the pathname part of the URL to a Unix-style */
    /* path scheme.                                               */

    urlutils_translate_pathname(path + len);
  }

  return;
}

/**************************************************************/
/* urlutils_url_to_pathname()                                 */
/*                                                            */
/* Takes a file:// URL, and turns it into a RISC OS pathname, */
/* if it isn't one already. The URL that you give is altered  */
/* directly, so if you want to remember the URL as well as    */
/* the new path, ensure there is a second copy of it in       */
/* another buffer somewhere.                                  */
/*                                                            */
/* Parameters: Pointer to the URL;                            */
/*                                                            */
/*             Size of the buffer the URL is stored in.       */
/**************************************************************/

void urlutils_url_to_pathname(char * url, int buffersize)
{
  url_description * url_d;

  url_d = urlutils_return_description(url);

  /* If this fails, try a more basic approach... */

  if (!url_d)
  {
    int    len;
    char * hash;

    /* Find the length of the File module protocol specifier */

    len = strlen(FileMethod); /* (urlutils.h) */

    /* If the first part of the string doesn't match the FileMethod */
    /* specifier (see URLutils.h) then we can't do anything.        */

    if (!url || strncmp(url, FileMethod, len)) return;

    /* Copy over the file: specifier and any '/'s */

    while (url[len] == '/') len++;

    memmove(url, url + len, buffersize - len);

    /* Strip off any fragment (this bit could fail badly for file */
    /* system specifiers, but in the absence of URL_ParseURL      */
    /* working - 'url_d' is NULL if we reach here - there's not a */
    /* lot of point working very hard to pull out.                */

    hash = strrchr(url, '#');
    if (hash) *hash = 0;
  }

  else
  {
    /* We managed to get a full URL description, so take the */
    /* path component of this.                               */

    strncpy(url, url_d->path, buffersize - 1);
    url[buffersize - 1] = 0;

    urlutils_free_description(url_d);
  }

  /* Convert the path component of the URL back to RISC OS style */

  urlutils_translate_pathname(url);

  return;
}

/**************************************************************/
/* urlutils_translate_pathname()                              */
/*                                                            */
/* Takes a RISC OS-style pathname and turns it into a         */
/* Unix-style pathname, or vice versa.                        */
/*                                                            */
/* The pathname you give is altered directly, so if you want  */
/* to remember the path before translation, ensure there is a */
/* second copy of in another buffer somewhere.                */
/*                                                            */
/* Parameters: Pointer to the pathname.                       */
/**************************************************************/

void urlutils_translate_pathname(char * path)
{
  char * p;

  p = path;

  /* Skip past any filing system separators (e.g. as in the */
  /* colons in 'ADFS::<disc>.<path>').                      */

  while (*p && *p != ':') p++;

  /* Swap '/' for '.' */

  while (*p)
  {
    if      (*p == '/') *p = '.';
    else if (*p == '.') *p = '/';

    p++;
  }

  return;
}

/**************************************************************/
/* urlutils_fix_url()                                         */
/*                                                            */
/* Takes a URL and 'fixes' it, e.g. appends a '/' character   */
/* to a URL which is missing one. The contents of the buffer  */
/* you give with the URL inside are altered directly, so if   */
/* you want to remember the old URL, ensure there is a second */
/* copy of it in another buffer somewhere.                    */
/*                                                            */
/* Parameters: Pointer to the URL;                            */
/*                                                            */
/*             Size of the buffer the URL is stored in.       */
/*                                                            */
/* Returns:    Pointer to the fixed URL (which at the moment  */
/*             is the buffer that you passed in).             */
/**************************************************************/

char * urlutils_fix_url(char * buffer, int buffersize)
{
  int len,  shl;
  int flen, fshl;
  int glen, gshl;
  int blen, plen;

  plen = strlen(ProtocolSeparator);

  shl  = strlen(HTTPmethod);
  len  = shl + plen;

  fshl = strlen(FTPmethod);
  flen = fshl + plen;

  gshl = strlen(GopherMethod);
  glen = gshl + plen;

  blen = strlen(buffer);

  /* If there's no ':' in the string, insert a protocol type */

  if (
       !strchr(buffer, ':')     &&
       blen + len  < buffersize &&
       blen + flen < buffersize
     )
  {
    /* If the site appears to be an FTP site, insert the FTP protocol */
    /* at the start. Similarly for Gopher; else insert HTTP.          */

    if (!strncmp(buffer, FTPmethod, fshl - 1)) /* -1 as we don't want to compare the ':' */
    {
      memmove(buffer + flen, buffer, buffersize - flen);
      strncpy(buffer, FTPmethod ProtocolSeparator, flen);
    }
    else if (!strncmp(buffer, GopherMethod, gshl - 1))
    {
      memmove(buffer + glen, buffer, buffersize - glen);
      strncpy(buffer, GopherMethod ProtocolSeparator, glen);
    }
    else
    {
      memmove(buffer + len, buffer, buffersize - len);
      strncpy(buffer, HTTPmethod ProtocolSeparator, len);
    }

    buffer[buffersize - 1] = 0;
  }

  /* If there are at least 2 unused bytes in the buffer, and the */
  /* front of the string matches the HTTPMethod specifier (again */
  /* this is defined at the top of this file) then search for a  */
  /* '/' character which isn't part of a '//' sequence. If none  */
  /* is found, append a '/'. This is why 2 bytes free are needed */
  /* - one for the '/', one for the string terminator.           */

  if (strlen(buffer) < buffersize - 2 && !strncmp(buffer, HTTPmethod, shl))
  {
    int i, s = 0;

    for (i = 0;
         !s && buffer[i] && (i < (buffersize - 1));
         i ++)
    {
      /* If we have a '/' but not a '//' sequence, mark this with s = 1 */

      if (buffer[i] == '/' && buffer[i + 1] != '/') s = 1;

      /* If at start of a '//' sequence, skip past it */

      else if (buffer[i] == '/') i++;
    }

    if (!s) strcat(buffer,"/");
  }

  return buffer;
}

/**************************************************************/
/* urlutils_relativise_url()                                  */
/*                                                            */
/* HTMLLib has a call to take a base URL and a relative URL   */
/* and produce a canonical result based on the combination of */
/* the two. This does the same (it is based on the HTMLLib    */
/* code) but doesn't need an HTMLLib memory context to        */
/* operate in - the HTMLLib call is useful when context based */
/* memory allocation is handy.                                */
/*                                                            */
/* Parameters: Pointer to a base URL;                         */
/*                                                            */
/*             Pointer to a relative URL.                     */
/*                                                            */
/* Returns:    Pointer to a malloc'd URL (so it must be       */
/*             eventually free'd by the caller) which is the  */
/*             canonical result of combining the base and     */
/*             relative URLs.                                 */
/**************************************************************/

char * urlutils_relativise_url(const char * base, const char * link)
{
  _kernel_oserror * e;
  char            * ptr;
  int               blen;
  char            * ret = NULL;

  if (link == NULL) return NULL;

  if (base == NULL)
  {
    ret = utils_strdup(link);
    return ret;
  }

  /* Strip preceeding spaces */

  while (*link == ' ') link++;

  /* Cope with empty link URLs */

  if (*link == '\0') return utils_strdup(base);

  /* Otherwise, just go for it... */

  if (!base) base = "";

  blen = strlen(base) + 4 + (link ? strlen(link) : 0);
  ptr  = malloc(blen);

  if (ptr == NULL) return NULL;

  e = _swix(URL_ParseURL,
            _INR(0,5),

            0,
            URL_ParseURL_Reason_QuickResolve,
            base,
            link,
            ptr,
            blen);

  /* Did the above succeed? */

  if (e != NULL)
  {
    free(ptr);
    return NULL;
  }

  return ptr;
}

/**************************************************************/
/* urlutils_check_protocols()                                 */
/*                                                            */
/* Checks a given URL to see if the fetch protocol it         */
/* specifies can be handled.                                  */
/*                                                            */
/* Parameters: Pointer to the URL string.                     */
/*                                                            */
/* Returns:    1 if the URL can be handled (i.e. the protocol */
/*             at the start of the URL matches one that the   */
/*             Messages file says a module which is currently */
/*             running copes with), else 0.                   */
/**************************************************************/

int urlutils_check_protocols(char * url)
{
//  int          context = 0;
//  const char * scheme;

  if (!url || (url && !*url)) return 0;

  if (
       !utils_strncasecmp(RTSPMethod,  url, sizeof(RTSPMethod)  - 1) ||
       !utils_strncasecmp(MPEGMethod1, url, sizeof(MPEGMethod1) - 1) ||
       !utils_strncasecmp(MPEGMethod2, url, sizeof(MPEGMethod2) - 1)
     )
     return 1;

  else return 0;
}

/**************************************************************/
/* urlutils_dispatch()                                        */
/*                                                            */
/* Puts a given URI into the URI queue and sends it out to    */
/* the URI handler.                                           */
/*                                                            */
/* Parameters: Pointer to a browser_data struct for which the */
/*             URI relates;                                   */
/*                                                            */
/*             Pointer to null-terminated URI string (not in  */
/*             a movable block, so not, e.g., in a flex       */
/*             block);                                        */
/*                                                            */
/*             URI queue flags (see URIutils.h).              */
/*                                                            */
/* Assumes:    That the caller has already made sure the URI  */
/*             handler is present.                            */
/**************************************************************/

_kernel_oserror * urlutils_dispatch(browser_data * b, char * uri, unsigned int flags)
{
  _kernel_oserror * e;
  unsigned int      return_code;
  uri_queue       * entry;

  #ifdef TRACE
    if (tl & (1u<<21)) dprintf(("", "urlutils_dispatch: Called for %p with '%s'\n",b,uri));
  #endif

  /* Claim memory for the new entry */

  entry = malloc(sizeof(uri_queue));

  /* Moan if the claim failed */

  if (!entry)
  {
    #ifdef TRACE
      if (tl & (1u<<21)) dprintf(("", "urlutils_dispatch: Memory claim for queue entry failed\n"));
    #endif

    return make_no_memory_error(15);
  }

  #ifdef TRACE
    if (tl & (1u<<21)) dprintf(("", "urlutils_dispatch: Claimed queue entry %p\n",entry));
  #endif

  /* Fill in part of the entry */

  entry->flags = flags;
  entry->b     = b;

  /* If there are no entries, set uri_queue_base to the */
  /* address of this one. Otherwise, point this entry's */
  /* 'next' to the current base item, and point that    */
  /* item's 'prev' back to this entry. Then replace the */
  /* current base entry with this new one.              */

  entry->prev = NULL;

  if (!uri_queue_base) entry->next = NULL;
  else
  {
    entry->next          = uri_queue_base;
    uri_queue_base->prev = entry;
  }

  uri_queue_base = entry;

  /* Now call the URI handler and get a handle to fill in */
  /* the last uri_queue field.                            */

  e = uri_dispatch(URI_Dispatch_Action_Inform,
                   uri,
                   task_handle,

                   &return_code,
                   NULL,
                   &entry->uri_handle);

  if (e)
  {
    #ifdef TRACE
      if (tl & (1u<<21)) dprintf(("", "urlutils_dispatch: Exitting with error\n"));
    #endif

    return e;
  }

  /* If the request was refused complain */

  if (return_code != URI_Dispatch_Request_Accepted)
  {
    erb.errnum = Utils_Error_Custom_Message;
    StrNCpy0(erb.errmess,
             lookup_token("Refused:Cannot fetch this address as the fetch request was refused by the internal handler.",
                          0,0));

    #ifdef TRACE
      if (tl & (1u<<21)) dprintf(("", "urlutils_dispatch: Exitting with error\n"));
    #endif

    return &erb;
  }

  /* Otherwise exit successfully */

  #ifdef TRACE
    if (tl & (1u<<21)) dprintf(("", "urlutils_dispatch: Successful\n"));
  #endif

  return NULL;
}

/**************************************************************/
/* urlutils_remove_from_queue()                               */
/*                                                            */
/* Removes a specified entry from the list of uri_queue       */
/* structures, freeing the memory allocated for it.           */
/*                                                            */
/* Parameters: The URI handle of the entry.                   */
/**************************************************************/

_kernel_oserror * urlutils_remove_from_queue(URI_handle_t uri_handle)
{
  uri_queue * entry = uri_queue_base;

  #ifdef TRACE
    if (tl & (1u<<21)) dprintf(("", "urlutils_remove_from_queue: Called with handle %p\n", uri_handle));
  #endif

  /* Try to find the entry */

  while (entry && entry->uri_handle != uri_handle) entry = entry->next;

  #ifdef TRACE

    /* Complain if not found */

    if (!entry)
    {
      erb.errnum = Utils_Error_Custom_Normal;
      sprintf(erb.errmess, "Can't find URI handle %p in URI queue", uri_handle);

      if (tl & (1u<<21)) dprintf(("", "urlutils_remove_from_queue: Exitting with error\n"));

      return &erb;
    }

  #else

    /* Fail silently */

    if (!entry) return NULL;

  #endif

  if (entry->prev) entry->prev->next = entry->next;
  if (entry->next) entry->next->prev = entry->prev;

  if (entry == uri_queue_base) uri_queue_base = entry->next;

  #ifdef TRACE
    if (tl & (1u<<21)) dprintf(("", "urlutils_remove_from_queue: Freeing entry %p\n",entry));
  #endif

  free (entry);

  #ifdef TRACE
    if (tl & (1u<<21)) dprintf(("", "urlutils_remove_from_queue: Successful\n"));
  #endif

  return NULL;
}

/**************************************************************/
/* urlutils_find_queue_entry()                                */
/*                                                            */
/* Finds an entry in the list of uri_queue structures.        */
/*                                                            */
/* Parameters: The URI handle of the entry.                   */
/*                                                            */
/* Returns:    Pointer to the entry, or NULL if no entry with */
/*             that handle could be found.                    */
/**************************************************************/

uri_queue * urlutils_find_queue_entry(URI_handle_t uri_handle)
{
  uri_queue * entry = uri_queue_base;

  #ifdef TRACE
    if (tl & (1u<<21)) dprintf(("", "urlutils_find_queue_entry: Called with handle %p\n", uri_handle));
  #endif

  while (entry && entry->uri_handle != uri_handle) entry = entry->next;

  #ifdef TRACE
    if (tl & (1u<<21)) dprintf(("", "urlutils_find_queue_entry: Returning with entry %p\n", entry));
  #endif

  return entry;
}
