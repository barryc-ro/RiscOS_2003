/**************************************************************/
/* File:    Play.c                                            */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Handle video playback.                            */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 20-Jun-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

#include <Global/RISCOS.h>
#include <Global/Services.h>
#include <kernel.h>
#include <swis.h>
#include <AsmUtils/modulefp.h>

#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <VideoCtrl.h>

#include "FullScreen.h"
#include "Utils.h"

#include "Play.h"

/* Local definitions */

#define WORK_AROUND_OVS_BUGS

/* Local variables */

static play_session * sessions;
static bool           play_looping = true;

/* Local functions */

static void              play_build_speed_fp (char * c, unsigned int n);
static const char      * play_return_range   (play_session * s);
static _kernel_oserror * play_call_play      (play_session * s, play_mode mode, unsigned int speed);
static _kernel_oserror * play_set_defaults   (play_session * s);

/**************************************************************/
/* play_generate_error()                                      */
/*                                                            */
/* Construct an error in the global error block related to a  */
/* response from a server.                                    */
/*                                                            */
/* Parameters: Video Control handle relevant to the server.   */
/**************************************************************/

_kernel_oserror * play_generate_error(unsigned int handle)
{
  char           number[16];
  char         * buffer = NULL;
  char         * use;
  unsigned int   status;
  unsigned int   size;
  unsigned int   response;

  /* For the error message, we can use either the raw response code, */
  /* or try to get more information from the server.                 */

  RetError(_swix(VideoControl_Status,
                 _INR(0,1) | _OUT(0) | _OUT(2),

                 0,
                 handle,

                 &status,
                 &response));

  if ((status & VC_Status_NewStatus) == 0) response = 0;

  sprintf(number, "%u", response);
  use = number;

  if (
       ((status & VC_Status_MoreInformationAvailable) != 0) &&

       _swix(VideoControl_MoreInformation,
             _INR(0,2) | _OUT(0),

             0,
             handle,
             VC_MoreInformation_Reason_ReadSize,

             &size)

       == NULL                                              &&

       size > 0                                             &&

       (buffer = malloc(size)) != NULL                      &&

       _swix(VideoControl_MoreInformation,
             _INR(0,4),

             0,
             handle,
             VC_MoreInformation_Reason_ReadData,
             buffer,
             size)

        == NULL
      )
  {
    use = buffer + sizeof(Play_RTSPSkip) - 1;
  }

  erb.errnum = Utils_Error_Custom_Message;

  StrNCpy0(erb.errmess,
           lookup_token("BadResponse:Cannot comply with request (%0)",
                        0,
                        use));

  free(buffer);

  return &erb;
}

/**************************************************************/
/* play_build_speed()                                         */
/*                                                            */
/* Based on a play mode and speed, construct a speed string   */
/* in the buffer provided.                                    */
/*                                                            */
/* Parameters: Play mode;                                     */
/*                                                            */
/*             Speed;                                         */
/*                                                            */
/*             Pointer to "big enough" buffer (20 bytes will  */
/*             normally be enough);                           */
/*                                                            */
/*             true to use decimal fractions, else false.     */
/**************************************************************/

void play_build_speed(play_mode mode, unsigned int speed, char * sp, bool decimal)
{
  char frac[12];

  if (speed <= 1)
  {
    sprintf(frac, "%d", speed);
  }
  else
  {
    if (decimal)
    {
      int len;

      #ifndef APPLICATION
        modulefp_buf buf;
        modulefp_enable(&buf);
      #endif

      play_build_speed_fp(frac, speed);

      #ifndef APPLICATION
        modulefp_disable(&buf);
      #endif

      len = strlen(frac);
      while (frac[len - 1] == '0') frac[--len] = '\0';
    }
    else
    {
      sprintf(frac, "1/%d", speed);
    }
  }

  switch (mode)
  {
    default:
    case play_mode_normal: sprintf(sp, "1");          break;
    case play_mode_frwd:   sprintf(sp, "-%d", speed); break;
    case play_mode_srwd:   sprintf(sp, "-%s", frac);  break;
    case play_mode_pause:  sprintf(sp, "0");          break;
    case play_mode_sfwd:   sprintf(sp, "%s",  frac);  break;
    case play_mode_ffwd:   sprintf(sp, "%d",  speed); break;
  }

  return;
}

/**************************************************************/
/* play_build_speed_fp()                                      */
/*                                                            */
/* Put a decimal value 1/<n> in a given buffer. Uses FP code. */
/*                                                            */
/* Parameters: Pointer to buffer;                             */
/*                                                            */
/*             Value of 'n'.                                  */
/**************************************************************/

static void play_build_speed_fp(char * c, unsigned int n)
{
  sprintf(c, "%f", (float) (1 / (float) n));
  return;
}

/**************************************************************/
/* play_return_range()                                        */
/*                                                            */
/* Return a read-only string for a range to give to SWI       */
/* VideoControl_Play based on the given play session.         */
/*                                                            */
/* Parameters: Pointer to a relevant play_session structure.  */
/*                                                            */
/* Returns:    Pointer to a read-only range string (may be    */
/*             NULL).                                         */
/**************************************************************/

static const char * play_return_range(play_session * s)
{
  if (s->current == play_mode_none) return "-";
  if (s->go_via_normal != 0)        return "current-";

  if (s->seek != 0)
  {
    s->seek = 0;

    switch (s->destination)
    {
      default:
      case play_mode_normal: return "-";
      case play_mode_srwd:
      case play_mode_frwd:   return "end-beginning";
    }
  }
  else
  {
    switch (s->destination)
    {
      default:
      case play_mode_none: return "-";
      case play_mode_frwd:
      case play_mode_srwd: return "current-0";
      case play_mode_pause: return NULL;
      case play_mode_normal:
      case play_mode_sfwd:
      case play_mode_ffwd: return "current-";
    }
  }

  return NULL;
}

/**************************************************************/
/* play_setup()                                               */
/*                                                            */
/* Register and call VideoControl_Setup, with play_poll       */
/* handling the response and automatic normal speed play      */
/* afterwards.                                                */
/*                                                            */
/* Parameters: Pointer to playback session structure;         */
/*                                                            */
/*             URL to use for VideoControl_Setup.             */
/**************************************************************/

_kernel_oserror * play_setup(play_session * s, const char * url)
{
  #ifdef TRACE
    if (tl & (1u<<7)) dprintf(("", "play_setup: Called for '%s'\n", url));
  #endif

  /* Deregister if required and (re)register with Video Control */

  if (s->handle != 0) RetError(_swix(VideoControl_Deregister,
                                     _INR(0,1),

                                     0,
                                     s->handle));

  RetError(_swix(VideoControl_Register,
                 _IN(0) | _OUT(1),

                 0,

                 &s->handle));

  RetError(play_set_defaults(s));

  /* Do the setup */

  RetError(_swix(VideoControl_Setup,
                 _INR(0,6) | _OUT(1),

                 VC_Setup_ReturnProtocolModule,
                 s->handle,
                 url,
                 0, 0,
                 0, 0,

                 &s->swi_base));

  /* OK, set flags for play_poll and return */

  s->setting_up    = 1;
  s->in_transition = 1;

  #ifdef TRACE
    if (tl & (1u<<7)) dprintf(("", "play_setup: Successful\n"));
  #endif

  return NULL;
}

/**************************************************************/
/* play_play()                                                */
/*                                                            */
/* Change play mode to the given type and speed.              */
/*                                                            */
/* Parameters: Pointer to playback session structure;         */
/*                                                            */
/*             Play mode to enter;                            */
/*                                                            */
/*             Speed to use in that mode (denominator for     */
/*             slow motion playback).                         */
/**************************************************************/

_kernel_oserror * play_play(play_session * s, play_mode mode, unsigned int speed)
{
  #ifdef TRACE
    if (tl & (1u<<7)) dprintf(("", "play_play: Called\n"));
  #endif

  s->destination       = mode;
  s->destination_speed = speed;

  s->in_transition = 1;

  #ifdef WORK_AROUND_OVS_BUGS

    /* If we're currently paused, we need to go via. normal speed */
    /* to bypass any possible server bugs *in some cases*         */

    if (
         (
           s->current == play_mode_pause  &&
           mode       != play_mode_pause  &&
           mode       != play_mode_normal
         )
         ||
         (
           mode       == play_mode_pause  &&
           s->current != play_mode_normal
         )
       )
    {
      s->go_via_normal = 1;
      return play_call_play(s, play_mode_normal, 1);
    }
    else
    {
      return play_call_play(s, mode, speed);
    }

  #else

    return play_call_play(s, mode, speed);

  #endif /* WORK_AROUND_OVS_BUGS */
}

/**************************************************************/
/* play_call_play()                                           */
/*                                                            */
/* Call VideoControl_Play based on the given play session,    */
/* play mode and speed.                                       */
/*                                                            */
/* Parameters: Pointer to the playback session;               */
/*                                                            */
/*             Play mode to go to (for first pass when        */
/*             go_via_normal is set, this should be           */
/*             play_mode_normal, else final intended mode);   */
/*                                                            */
/*             Play speed to use (for first pass when         */
/*             go_via_normal is set, this should be 1). For   */
/*             slow motion play, this is the value of the     */
/*             denominator.                                   */
/**************************************************************/

static _kernel_oserror * play_call_play(play_session * s, play_mode mode, unsigned int speed)
{
  char sp[20];

  play_build_speed(mode, speed, sp, true);

  if ((mode != play_mode_normal || speed != 1) && s->go_via_normal != 0) s->go_via_normal = 0;

  return _swix(VideoControl_Play,
               _INR(0,3),

               0,
               s->handle,
               play_return_range(s),
               sp);
}

/**************************************************************/
/* play_poll()                                                */
/*                                                            */
/* Poll all playback sessions, checking for state changes.    */
/* Can either be polled at set intervals, or called on some   */
/* event basis (e.g. a service call saying "response          */
/* received" is seen as a Wimp message via. Task Module).     */
/**************************************************************/

_kernel_oserror * play_poll(void)
{
  play_session * s = sessions;
  play_session * n = NULL;
  unsigned int   flags, response;

  while (s)
  {
    n = s->next;

    /* For any session, whether in transition or not, we read status. */
    /* The protocol module may have caused us to be called via. a     */
    /* TaskModule-forwarded service call because it hit an error, and */
    /* whilst we don't *have* to listen to it, we may as well try.    */

    if (s->handle != 0)
    {
      RetError(_swix(VideoControl_Status,
                     _INR(0,1) | _OUT(0) | _OUT(2),

                     0,
                     s->handle,

                     &flags,
                     &response));
    }

    /* ...If however we're in transition, then the flags and response */
    /* are also important, not just any pending error.                */

    if (s->in_transition)
    {
      if ((flags & VC_Status_NewStatus) != 0)
      {
        s->in_transition = 0;

        if (
             response >= Play_Response_OK_Lower &&
             response <= Play_Response_OK_Upper
           )
        {
          if (s->setting_up)
          {
            /* Setup is complete, auto-play */

            RetError(play_play(s, play_mode_normal, 1));
          }
          else
          {
            /* Got an OK. Two possibilities; one, we're finished (update */
            /* destination to current); two, we're going via. speed 1    */
            /* - move to required speed now.                             */

            if (s->go_via_normal != 0)
            {
              RetError(play_call_play(s, s->destination, s->destination_speed));

              s->went_via_normal = 1;
              s->in_transition   = 1;

              /* 'continue' as we want the caller to see an atomic operation, so they */
              /* get the response from this new play request, not our move to normal  */
              /* speed play. That's meant to be a hidden implementation detail.       */

              continue;
            }
            else
            {
              /* We've reached a target speed, whatever that might be */

              s->went_via_normal = 0;
              s->current         = s->destination;
              s->current_speed   = s->destination_speed;

              /* If we were restoring a previous play mode after a failed attempt to enter */
              /* some new mode via. normal play, we've just done our third play transition */
              /* (old mode -> normal speed (OK), normal -> new mode (501) => still at      */
              /* normal => normal -> old mode). In this case, clear all the flags and let  */
              /* this state machine continue on - but put the old response code back, 501. */

              if (s->restoring != 0)
              {
                s->restoring = 0;
                response = Play_Response_NotSupported;
              }
            }
          }
        }
        else if (response != Play_Response_NotSupported)
        {
          /* If fullscreen stuff is not active fullscreen_report_error just */
          /* returns, so when running as a plug-in we have silent failures. */

          fullscreen_report_error(play_generate_error(s->handle), false);
        }
        else
        {
          /* 501 Not Implemented - oh dear. We could've been going through normal */
          /* play to get this, in which case we're a bit stuffed because we'll    */
          /* have lost the old play state. Restore it!                            */

          if (
               s->setting_up      == 0 &&
               s->went_via_normal != 0
             )
          {
            s->go_via_normal     = 0;
            s->went_via_normal   = 0;
            s->restoring         = 1;
            s->destination       = s->current;
            s->destination_speed = s->current_speed;

            RetError(play_call_play(s, s->current, s->current_speed));
            s->in_transition = 1;

            /* Must do 'continue' as from the caller's perspective this whole mess of */
            /* 'go to normal play, try new mode, fail, so restore old mode' has to be */
            /* one atomic play request.                                               */

            continue;
          }
        }

        /* Call the play callback function */

        if (s->callback != NULL) RetError((s->callback)(s, response));
        if (s->setting_up != 0) s->setting_up = 0;

        if (s->auto_destruct != 0)
        {
          #ifdef TRACE
            if (tl & (1u<<7)) dprintf(("", "play_poll: Item marked for auto destruct\n"));
          #endif

          play_delete_session(s);
        }
      }
    }

    s = n;
  }

  return NULL;
}

/**************************************************************/
/* play_new_session()                                         */
/*                                                            */
/* Get a new session for playback.                            */
/*                                                            */
/* Parameters: Pointer to a play_session *, updated with the  */
/*             new session if no error is returned. May not   */
/*             be NULL.                                       */
/**************************************************************/

_kernel_oserror * play_new_session(play_session ** news)
{
  play_session * s = calloc(1, sizeof(play_session));

  *news = s;
  if (s == NULL) return make_no_memory_error(6);

  if (sessions != NULL) sessions->prev = s;
  s->next = sessions;
  sessions = s;

  return NULL;
}

/**************************************************************/
/* play_delete_session()                                      */
/*                                                            */
/* Delete a given playback session.                           */
/*                                                            */
/* Parameters: Pointer to the session to delete.              */
/**************************************************************/

void play_delete_session(play_session * s)
{
  #ifdef TRACE
    if (tl & (1u<<7)) dprintf(("", "play_delete_session: Called for %p\n", s));
  #endif

  if (s->handle != 0)
  {
    _swix(VideoControl_Deregister,
          _INR(0,1),

          0,
          s->handle);
  }

  if (s->prev != NULL) s->prev->next = s->next;
  if (s->next != NULL) s->next->prev = s->prev;

  if (s == sessions) sessions = s->next;

  free(s);
}

/**************************************************************/
/* play_shutdown()                                            */
/*                                                            */
/* Delete all playback sessions.                              */
/**************************************************************/

void play_shutdown(void)
{
  while (sessions) play_delete_session(sessions);
}

/**************************************************************/
/* fullscreen_set_defaults()                                  */
/*                                                            */
/* Set default options.                                       */
/*                                                            */
/* Parameters: Pointer to a relevant playback session struct. */
/**************************************************************/

static _kernel_oserror * play_set_defaults(play_session * s)
{
  int opts[22];

  /* Set the palette, nothing else */

  opts[0]  = vc_tags_depth;
  opts[1]  = 1;
  opts[2]  = 2; /* log2bpp = 2 -> 16 colours */

  opts[3]  = vc_tags_no_mode_change;
  opts[4]  = 1;
  opts[5]  = 1;

  opts[6]  = vc_tags_no_cls;
  opts[7]  = 1;
  opts[8]  = 1;

  opts[9]  = vc_tags_no_palette;
  opts[10] = 1;
  opts[11] = 0;

  opts[12] = vc_tags_no_redraw;
  opts[13] = 1;
  opts[14] = 1;

  opts[15] = vc_tags_mode_width;
  opts[16] = 1;
  opts[17] = 704;

  opts[18] = vc_tags_looping;
  opts[19] = 1;
  opts[20] = play_looping ? 1 : 0;

  opts[21] = vc_tags__end;

  return _swix(VideoControl_Options,
               _INR(0,2),

               0,
               s->handle,
               &opts);
}
