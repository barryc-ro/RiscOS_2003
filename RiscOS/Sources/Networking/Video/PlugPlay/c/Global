/**************************************************************/
/* File:    Global.c                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Holds all of the application's globals.           */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 04-Apr-2000 (ADH): Adapted from Browse source.    */
/**************************************************************/

#include <setjmp.h>

#include <kernel.h>

#include <tboxlibs/toolbox.h>
#include <tboxlibs/wimp.h>

#include "Limit.h"

#include "Global.h"

#ifdef TRACE

  /********************************************************/
  /* Trace level, for debug purposes only.                */
  /*                                                      */
  /* All trace output is done through DebugLib, which is  */
  /* brought up near the start of main() in Main.c.       */
  /*                                                      */
  /* Debug output is only available if the entire project */
  /* is compiled with TRACE defined in the compiler.      */
  /*                                                      */
  /* Some extra error messages (such as missing component */
  /* IDs) will be raised in TRACE builds.                 */
  /*                                                      */
  /* Bit  Purpose                                    Arg  */
  /*                                                      */
  /* 0    MessageTrans related messages              MsgT */
  /* 1    Filter registration and deregistration     Filt */
  /* 2    Null claim/release messages                Null */
  /* 5    Routine start, poll, exit                  Rout */
  /* 6    Overlay manager                            Over */
  /* 12   Low level memory tracing (mostly RMA)      LMem */
  /* 21   URI handler interfacing                    URIH */
  /* 30   Plug-In protocol / Object handling         Plug */
  /* 31   Full screen playback routines              Full */
  /*                                                      */
  /* To use, put -debug or -d into the command line args  */
  /* for running !RunImage, followed by a series of comma */
  /* separated values which are as given above. Use 'All' */
  /* for everything, though with caution (large amounts   */
  /* of output will be generated!). For example:          */
  /*                                                      */
  /*         Run !RunImage -d MsgT,Menu,Rout %%*0         */
  /********************************************************/

  unsigned int tl;

#endif

jmp_buf           env;                                         /* Used for error handler, so it can jump back to poll look if  */
                                                               /* the user selects OK rather than Cancel                       */

int               quit;                                        /* Set to 1 to indicate a successful exit should occur          */
int               modechanged;                                 /* Set to 1 immediately after a mode change                     */

int               wimp_version;
int               nested_wimp;                                 /* Wimp version, flag to say the nested window manager is       */
int               task_handle;                                 /* present, Wimp task handle, pointer to sprite block.          */
int               sprite_block;

int               taskmodule_ds_registered;                    /* Set to 1 if the dialler status service call is being watched */
int               uri_module_present;                          /* Set to 1 if the URI module is present and may be used        */

MessagesFD        meb;                                         /* MessageTrans Messages file control block                     */
char              tokens                    [Limits_Message];  /* lookup_token/choice puts looked up data in here              */
char              lasttokn                  [Limits_Token];    /* The last token looked up is stored here for future reference */

char              program_name              [Limits_TaskName]; /* _TaskName token contents put in here, for the flex library   */
char            * task_dir                  = NULL;            /* Application path, recorded at startup (in Main.c).           */
char            * rma_system                = NULL;            /* Value of SYSTEM symbol copied to RMA block for filters.      */
char            * rma_filter                = NULL;            /* Filter code itself.                                          */

int               messages_list             [] = {0};
int               event_code_list           [] = {0};
IdBlock           idb;                                         /* For all Toolbox-registered event handlers                    */
WimpPollBlock     b;                                           /* For Toolbox-registered Wimp event handlers                   */

int               null_counter;                                /* When zero, null events will be disabled, else enabled. For   */
                                                               /* each time something wants to claim nulls, it increments this */
                                                               /* and decrements it when finished                              */
_kernel_oserror   erb;                                         /* Global error block for custom errors                         */
