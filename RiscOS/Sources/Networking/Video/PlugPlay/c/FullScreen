/**************************************************************/
/* File:    FullScreen.c                                      */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Core routines for full screen video playback with */
/*          Video Control and RTSP URLs.                      */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 18-Apr-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

#include <kernel.h>
#include <swis.h>

#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <VideoCtrl.h>

#include "Utils.h"

#include "FullScreen.h"

/* Local statics for full-screen playback */

static bool         fullscreen_registered = false;
static unsigned int fullscreen_handle;

/**************************************************************/
/* fullscreen_session_is_active()                             */
/*                                                            */
/* Find out if the full screen routines are active.           */
/*                                                            */
/* Returns:    'true' if registered with Video Control, else  */
/*             'false'.                                       */
/**************************************************************/

bool fullscreen_session_is_active(void)
{
  return fullscreen_registered;
}

/**************************************************************/
/* fullscreen_setup()                                         */
/*                                                            */
/* Start full screen video playback.                          */
/*                                                            */
/* Parameters: RTSP URL for the video to play.                */
/**************************************************************/

_kernel_oserror * fullscreen_start(const char * url)
{
  unsigned int response;

  _swix(Hourglass_Start,
        _IN(0),

        1);

  RetError(fullscreen_setup(url));
  RetError(fullscreen_wait(&response));

  if (
       response >= FullScreen_Response_OK_Lower &&
       response <= FullScreen_Response_OK_Upper
     )
  {
    RetError(_swix(VideoControl_Play,
                   _INR(0,3),

                   0,
                   fullscreen_handle,
                   NULL,
                   NULL));

    {
     int i;
     for (i=0;i<400;i++) _swix(OS_Byte,_IN(0),19);
    }

    // OK, got going

    fullscreen_deregister();
  }
  else
  {
    char           number[16];
    char         * buffer = NULL;
    char         * use;
    unsigned int   status;
    unsigned int   size;

    /* For the error message, we can use either the raw response code, */
    /* or try to get more information from the server.                 */

    sprintf(number, "%u", response);
    use = number;

    if (
         _swix(VideoControl_Status,
               _INR(0,1) | _OUT(0),

               0,
               fullscreen_handle,

               &status)

         == NULL                                       &&

         (status & VC_Status_MoreInformationAvailable) &&

         _swix(VideoControl_MoreInformation,
               _INR(0,2) | _OUT(0),

               0,
               fullscreen_handle,
               VC_MoreInformation_Reason_ReadSize,

               &size)

         == NULL                                       &&

         (buffer = malloc(size)) != NULL               &&

         _swix(VideoControl_MoreInformation,
               _INR(0,4),

               0,
               fullscreen_handle,
               VC_MoreInformation_Reason_ReadData,
               buffer,
               size)

          == NULL
        )
    {
      use = buffer + sizeof(FullScreen_RTSPSkip) - 1;
    }

    erb.errnum = Utils_Error_Custom_Message;

    StrNCpy0(erb.errmess,
             lookup_token("BadResponse:The server cannot deal with this request (%0)",
                          0,
                          use));

    free(buffer);

    show_error_ret(&erb);
  }

  return NULL;
}

/**************************************************************/
/* fullscreen_setup()                                         */
/*                                                            */
/* Set up a new full screen session, deregistering first if   */
/* one is currently active.                                   */
/*                                                            */
/* Parameters: RTSP URL to pass to VideoControl_Setup.        */
/**************************************************************/

_kernel_oserror * fullscreen_setup(const char * url)
{
  /* Ensure we're deregistered */

  RetError(fullscreen_deregister());

  /* Register a new session */

  RetError(_swix(VideoControl_Register,
                 _IN(0) | _OUT(1),

                 0,

                 &fullscreen_handle));

  fullscreen_registered = true;

  RetError(fullscreen_set_defaults());

  /* Set the session up */

  return _swix(VideoControl_Setup,
               _INR(0,6),

               0,
               fullscreen_handle,
               url,
               NULL,
               NULL,
               NULL,
               0);
}

/**************************************************************/
/* fullscreen_deregister()                                    */
/*                                                            */
/* If the full screen routines are registered with Video      */
/* Control, deregister them.                                  */
/**************************************************************/

_kernel_oserror * fullscreen_deregister(void)
{
  if (fullscreen_registered)
  {
    _swix(VideoControl_Deregister,
          _INR(0,1),

          0,
          fullscreen_handle);

    fullscreen_registered = false;
  }

  return NULL;
}

/**************************************************************/
/* fullscreen_shutdown()                                      */
/*                                                            */
/* Shut down full screen playback.                            */
/**************************************************************/

_kernel_oserror * fullscreen_shutdown(void)
{
  return fullscreen_deregister();
}

/**************************************************************/
/* fullscreen_wait()                                          */
/*                                                            */
/* Wait for a response from a server through Video Control.   */
/*                                                            */
/* Parameters: Pointer to an unsigned int, into which the     */
/*             server response code is written (unless an     */
/*             error is returned).                            */
/**************************************************************/

_kernel_oserror * fullscreen_wait(unsigned int * response)
{
  unsigned int status, code;

  #ifdef TRACE
    if (tl && (1u<<31)) dprintf(("", "fullscreen_wait: Called\n"));
  #endif

  do
  {
    RetError(_swix(VideoControl_Status,
                   _INR(0,1) | _OUT(0) | _OUT(2),

                   0,
                   fullscreen_handle,

                   &status,
                   &code));

  }
  while ((status & VC_Status_ResponseReceived) == 0);

  #ifdef TRACE
    if (tl && (1u<<31)) dprintf(("", "fullscreen_wait: Response %d\n", code));
  #endif

  if (response != NULL) *response = code;

  return NULL;
}

/**************************************************************/
/* fullscreen_set_defaults()                                  */
/*                                                            */
/* Set default options using the fullscreen_handle handle.    */
/**************************************************************/

_kernel_oserror * fullscreen_set_defaults(void)
{
  int opts[19];

  /* Ensure we change to a 16 colour mode, set the palette, */
  /* and restore everything afterwards.                     */

  opts[0]  = vc_tags_depth;
  opts[1]  = 1;
  opts[2]  = 2; /* log2bpp = 2 -> 16 colours */

  opts[3]  = vc_tags_no_mode_change;
  opts[4]  = 1;
  opts[5]  = 0;

  opts[6]  = vc_tags_no_cls;
  opts[7]  = 1;
  opts[8]  = 0;

  opts[9]  = vc_tags_no_palette;
  opts[10] = 1;
  opts[11] = 0;

  opts[12] = vc_tags_no_redraw;
  opts[13] = 1;
  opts[14] = 0;

  opts[15] = vc_tags_mode_width;
  opts[16] = 1;
  opts[17] = 704;

  opts[18] = vc_tags__end;

  return _swix(VideoControl_Options,
               _INR(0,2),

               0,
               fullscreen_handle,
               &opts);
}
