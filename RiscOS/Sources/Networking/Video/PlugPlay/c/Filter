/**************************************************************/
/* File:    Filter.c                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Manage filters.                                   */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 24-Apr-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdlib.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>

#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Global.h"
#include "SetPW.h"
#include "Utils.h"

#include "Filter.h"

static unsigned int filter_count = 0;

/**************************************************************/
/* filter_add_filter()                                        */
/*                                                            */
/* Install a new rectangle and copy filter, if there isn't    */
/* one already running.                                       */
/**************************************************************/

_kernel_oserror * filter_add_filter(void)
{
  #ifdef TRACE
    if (tl & (1u<<1)) dprintf(("", "filter_add_filter: Called\n"));
  #endif

  if (filter_count != 0)
  {
    filter_count++;

    #ifdef TRACE
      if (tl & (1u<<1)) dprintf(("", "filter_add_filter: Filters already installed - count now %d - exitting\n", filter_count));
    #endif

    return NULL;
  }

  #ifdef TRACE
    if (tl & (1u<<1)) dprintf(("", "filter_add_filter: Installing filters\n"));
  #endif

  /* Register the filters */

  RetError(_swix(Filter_RegisterRectFilter,
                 _INR(0,3),

                 rma_system,
                 rma_filter + setpw_data_length,
                 0,
                 task_handle));

  RetError(_swix(Filter_RegisterCopyFilter,
                 _INR(0,2),

                 rma_system,
                 rma_filter + setpw_data_length,
                 0));

  #ifdef TRACE
    if (tl & (1u<<1)) dprintf(("", "filter_add_filter: Successful\n"));
  #endif

  return NULL;
}

/**************************************************************/
/* filter_remove_filter()                                     */
/*                                                            */
/* Remove the rectangle and copy filters.                     */
/**************************************************************/

_kernel_oserror * filter_remove_filter()
{
  #ifdef TRACE
    if (tl & (1u<<1)) dprintf(("", "filter_remove_filter: Called\n"));
  #endif

  /* Decrement the usage count; if zero, remove the item */

  if (filter_count > 0) filter_count--;
  if (filter_count > 0)
  {
    #ifdef TRACE
     if (tl & (1u<<1)) dprintf(("", "filter_remove_filter: Count still %d, not removing yet\n", filter_count));
    #endif

    return NULL;
  }

  #ifdef TRACE
    if (tl & (1u<<1)) dprintf(("", "filter_remove_filter: Removing filters\n"));
  #endif

  RetError(_swix(Filter_DeRegisterRectFilter,
                 _INR(0,3),

                 rma_system,
                 rma_filter + setpw_data_length,
                 0,
                 task_handle));

  RetError(_swix(Filter_DeRegisterCopyFilter,
                 _INR(0,2),

                 rma_system,
                 rma_filter + setpw_data_length,
                 0));

  #ifdef TRACE
    if (tl & (1u<<1)) dprintf(("", "filter_add_filter: Successful\n"));
  #endif

  return NULL;
}

/**************************************************************/
/* filter_shutdown()                                          */
/*                                                            */
/* Remove all filters.                                        */
/**************************************************************/

void filter_shutdown(void)
{
  #ifdef TRACE
    if (tl & (1u<<1)) dprintf(("", "filter_shutdown: Called\n"));
  #endif

  if (filter_count > 0)
  {
    filter_count = 1;
    filter_remove_filter();
  }

  #ifdef TRACE
    if (tl & (1u<<1)) dprintf(("", "filter_shutdown: Successful\n"));
  #endif
}
