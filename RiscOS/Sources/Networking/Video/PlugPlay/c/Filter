/**************************************************************/
/* File:    Filter.c                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Manage filters on the launching task.             */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 24-Apr-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdlib.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>

#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Global.h"
#include "SetPW.h"
#include "Utils.h"

#include "Filter.h"

/* Local compile-time options */

/* See wimp.h - doesn't define anything useful because the definitions */
/* are meant for Wimp_Poll where blocking reason code 2 is Very Bad.   */

#define PostFilterMask ~(1u<<2)

/* Local structures */

typedef struct filter
{
  struct filter * next;
  struct filter * prev;

  unsigned int    task;
  unsigned int    count;
}
filter;

/* Local variables */

static filter * filters = NULL;

/**************************************************************/
/* filter_add_filter()                                        */
/*                                                            */
/* Install a new filter, if the task is not already being     */
/* watched.                                                   */
/*                                                            */
/* Parameters: Handle of task to filter.                      */
/**************************************************************/

_kernel_oserror * filter_add_filter(unsigned int task)
{
  filter * current = filters;

  #ifdef TRACE
    if (tl & (1u<<1)) dprintf(("", "filter_add_filter: Called for &%08X\n", task));
  #endif

  /* Is this watched already? */

  while (current)
  {
    if (current->task == task)
    {
      #ifdef TRACE
        if (tl & (1u<<1)) dprintf(("", "filter_add_filter: Task &%08X already claimed, usage increasing to %d\n", task, current->count + 1));
      #endif

      current->count++;
      return NULL;
    }

    current = current->next;
  }

  /* Nope, need new filter */

  #ifdef TRACE
    if (tl & (1u<<1)) dprintf(("", "filter_add_filter: Need new filter\n"));
  #endif

  current = calloc(1, sizeof(filter));
  if (current == NULL) return make_no_memory_error(3);

  if (filters != NULL)
  {
    filters->prev = current;
    current->next = filters;
  }

  filters        = current;
  current->task  = task;
  current->count = 1;

  /* Register the filter */

  RetError(_swix(Filter_RegisterPostFilter,
                 _INR(0,4),

                 rma_system,
                 rma_filter + setpw_data_length,
                 current,
                 task,
                 PostFilterMask));

  #ifdef TRACE
    if (tl & (1u<<1)) dprintf(("", "filter_add_filter: Successful\n"));
  #endif

  return NULL;
}

/**************************************************************/
/* filter_remove_filter()                                     */
/*                                                            */
/* Remove a filter from a given task.                         */
/*                                                            */
/* Parameters: Handle of task to remove filter from.          */
/**************************************************************/

_kernel_oserror * filter_remove_filter(unsigned int task)
{
  filter * current = filters;

  #ifdef TRACE
    if (tl & (1u<<1)) dprintf(("", "filter_remove_filter: Called for &%08X\n", task));
  #endif

  /* Is this watched already? */

  while (current)
  {
    if (current->task == task) break;
    current = current->next;
  }

  if (current == NULL)
  {
    #ifdef TRACE
      if (tl & (1u<<1)) dprintf(("", "filter_remove_filter: I have no record of a filter on task &%08X\n", task));
    #endif

    return NULL;
  }

  /* Decrement the usage count; if zero, remove the item */

  current->count--;

  if (current->count > 0) return NULL;

  #ifdef TRACE
    if (tl & (1u<<1)) dprintf(("", "filter_remove_filter: Removing filter\n"));
  #endif

  if (current->prev)      current->prev->next = current->next;
  if (current->next)      current->next->prev = current->prev;
  if (filters == current) filters             = current->next;

  free(current);

  #ifdef TRACE
    if (tl & (1u<<1)) dprintf(("", "filter_remove_filter: Exitting through Filter_DeRegisterPostFilter\n"));
  #endif

  return _swix(Filter_DeRegisterPostFilter,
               _INR(0,4),

               rma_system,
               rma_filter + setpw_data_length,
               current,
               task,
               PostFilterMask);
}

/**************************************************************/
/* filter_shutdown()                                          */
/*                                                            */
/* Remove all filters.                                        */
/**************************************************************/

void filter_shutdown(void)
{
  #ifdef TRACE
    if (tl & (1u<<1)) dprintf(("", "filter_shutdown: Called\n"));
  #endif

  while (filters)
  {
    filters->count = 1;
    filter_remove_filter(filters->task);
  }

  #ifdef TRACE
    if (tl & (1u<<1)) dprintf(("", "filter_shutdown: Successful\n"));
  #endif
}
