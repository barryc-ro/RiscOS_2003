/**************************************************************/
/* File:    ModeInfo.c                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Screen mode related information retrieval.        */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 21-Apr-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdlib.h>

#include <kernel.h>
#include <swis.h>
#include <Global/RISCOS.h>

#include "FromROSLib.h"

#include "ModeInfo.h"

/* Local compile-time options */

#undef ASSUME_VC_DEFAULTS

/**************************************************************/
/* modeinfo_return_transparent_gcol()                         */
/*                                                            */
/* Return a transparent colour appropriate for passing to     */
/* OS_SetColour working on the assumption of a palette set    */
/* according to Video Control defaults. Video Control is      */
/* described in 2501,817/FS with full palette details in      */
/* issue 3 or later.                                          */
/*                                                            */
/* Returns: Transparent GCOL value for OS_SetColour, based on */
/*          Video Control's default palette in the current    */
/*          mode's colour depth.                              */
/**************************************************************/

unsigned int modeinfo_return_transparent_gcol(void)
{
  int log2bpp = bbc_modevar(-1, BBC_Log2BPP);

  #ifdef ASSUME_VC_DEFAULTS

    switch (log2bpp)
    {
      default:
      case 0: return 1;
      case 1: return 3;
      case 2: return 15;
      case 3: return 1;
      case 4: return 0x8000;
      case 5: return 0xF000000;
    }

  #else

    unsigned int max, i;
    unsigned int pal[256];

    switch (log2bpp)
    {
      default:
      case 0: max = 2;
      case 1: max = 4;
      case 2: max = 16;
      case 3: max = 256;
      {
        /* For paletted modes, have to scan palette to find a */
        /* transparent entry. Yuckorama. First block read it. */

        if (
             _swix(OS_CallAVector,
                   _INR(0,2) | _IN(4) | _IN(9),

                   0,
                   max | (17u<<24), /* Read first flash colour only */
                   pal,
                   7,               /* Reason code 7: Block read */
                   PaletteV)
             != NULL
           )
           return (max == 256 ? 1 : max - 1); /* I.e. Video Control defaults */

        /* Now look for an item with a non-zero transparency byte */
        /* (since palette entries are 0xBBGGRRaa).                */

        for (i = 0; i < max; i++)
        {
          if (pal[i] & 0xff != 0) return i;
        }
      }
      break;

      case 4: return 0x8000;
      case 5: return 0xF000000;
    }

  #endif /* ASSUME_VC_DEFAULTS */

  return 0;
}
