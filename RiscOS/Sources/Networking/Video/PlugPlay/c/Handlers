/**************************************************************/
/* File:    Handlers.c                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Event handlers.                                   */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 07-Feb-1997 (ADH): Created.                       */
/*          10-Apr-2000 (ADH): 64-wide comments adopted.      */
/*          17-Apr-2000 (ADH): Fragment imported to PlugPlay. */
/**************************************************************/

#include <Global/RISCOS.h>
#include <Global/Services.h>
#include <kernel.h>

#include <tboxlibs/wimp.h>

#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <URI.h>
#include <VideoCtrl.h>

#include "FromROSLib.h"
#include "FullScreen.h"
#include "Global.h"
#include "MiscDefs.h"
#include "Overlay.h"
#include "Play.h"
#include "PlugIn.h"
#include "Protocols.h"
#include "SetPW.h"
#include "Utils.h"

#include "Handlers.h"

/**************************************************************/
/* handle_messages()                                          */
/*                                                            */
/* Deal with Wimp messages for reason codes 17 and 18 (type   */
/* 19, acknowledges, are handled in handle_ack below).        */
/* Parameters are as standard for a Wimp message handler.     */
/*                                                            */
/* This function farms off a lot of its responsibilities to   */
/* functions in Protocols.c.                                  */
/**************************************************************/

int handle_messages(WimpMessage * m, void * handle)
{
  switch (m->hdr.action_code)
  {
    case Wimp_MQuit: quit = 1;
    break;

    case Wimp_MModeChange:
    {
      if (!printing) wimpt_read();
      read_os_to_points();
    }
    break;

    case Wimp_MAppControl:
    {
      /* AppControl message - stop all activity */

      if (
           m->data.app_control.reason == Wimp_MAppControl_Stop &&
           m->hdr.sender != task_handle
         )
      {
//        browser_data * b;
//        IdBlock        idb;
//
//        b = last_browser;
//
//        while (b)
//        {
//          idb.ancestor_id = 0;
//          idb.self_id     = b->self_id;
//
//          handle_stop(0, NULL, &idb, NULL);
//
//          b = b->previous;
//        }
      }
    }
    break;

    /* URI handler */

    case URI_MStarted:                           ChkError(protocols_auh_got_started(m));          break;
    case URI_MDying:                             ChkError(protocols_auh_got_dying(m));            break;
    case URI_MProcess:                           ChkError(protocols_auh_got_process(m));          break;
    case URI_MReturnResult:                      ChkError(protocols_auh_got_return_result(m));    break;

    /* ANT URL broadcast protocol */

    case Message_ANTOpenURL:                     ChkError(protocols_aub_got_open_url(m));         break;

    /* Plug-In protocol */

    case Message_PlugIn_Open:                    ChkError(plugin_got_open(m));                    break;
    case Message_PlugIn_Close:                   ChkError(plugin_got_close(m));                   break;
    case Message_PlugIn_Reshape:                 ChkError(plugin_got_reshape(m));                 break;
    case Message_PlugIn_Action:                  ChkError(plugin_got_action(m));                  break;
    case Message_PlugIn_Abort:                   ChkError(plugin_got_abort(m));                   break;
    case Message_PlugIn_Inform:                  ChkError(plugin_got_inform(m));                  break;
    case Message_PlugIn_Focus:                   ChkError(plugin_got_focus(m));

    /* Service calls from Task Module */

    case Message_Service:                        ChkError(handle_services(m));                    break;

    default: return 0; break;
  }

  return 1;
}

/**************************************************************/
/* handle_ack()                                               */
/*                                                            */
/* Handles UserMessage_Acknowledge from the Wimp (message     */
/* bouncing, etc.).                                           */
/*                                                            */
/* Parameters are as standard for a Wimp event handler.       */
/**************************************************************/

int handle_ack(int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle)
{
  WimpMessage * m = &block->user_message_acknowledge;

  switch (m->hdr.action_code)
  {
//    case Wimp_MHelpRequest:         ChkError(protocols_ih_help_request_bounced(m));    break;

//    case Message_PlugIn_Open:       ChkError(plugin_open_bounced(m));                  break;
//    case Message_PlugIn_StreamNew:  ChkError(plugin_stream_new_bounced(m));            break;

    default:
    {
      return 0;
    }
    break;
  }

  return 1;
}

#ifdef APPLICATION

  /**************************************************************/
  /* handle_pollword()                                          */
  /*                                                            */
  /* Handles PollWordNonZero events.                            */
  /*                                                            */
  /* Parameters are as standard for a Wimp event handler.       */
  /**************************************************************/

  int handle_pollword(int eventcode, WimpPollBlock * block, IdBlock * idb, void * handle)
  {
    unsigned int * pw;

    dprintf(("", "handle_pollword: Called\n"));

    pw = (unsigned int *) (rma_filter + ((unsigned int) setpw_pollword - (unsigned int) setpw_data_start));
    *pw = 0;

    ChkError(plugin_reread_all_windows());

    return 1;
  }

#endif

/**************************************************************/
/* handle_services()                                          */
/*                                                            */
/* Handle a message detailing a service call forwarded by     */
/* Task Module.                                               */
/*                                                            */
/* Parameters: Pointer to a relevant message block.           */
/**************************************************************/

_kernel_oserror * handle_services(WimpMessage * m)
{
  _kernel_swi_regs * r;

  r = (_kernel_swi_regs *) &m->data;

  /* R1 holds the service call number */

  switch(r->r[1])
  {
    /* Video Control is telling us something */

    case Service_VideoControl:
    {
      switch(r->r[0]) /* Sub-reason code */
      {
        default:
        case VideoControlNewStatus:
        case VideoControlMessageReceived:
        {
          _kernel_oserror * e = play_poll();

          /* If the full screen system doesn't take the error and show it, */
          /* throw it up to cruder systems.                                */

          if (!fullscreen_report_error(e, true)) show_error_cont(e);
        }
        break;

        case VideoControlNewPlayState:
        {
          if ((r->r[3] & VC_SVC_NewPlayState_StateIsInR4) != 0)
          {
            ChkError(fullscreen_handle_eos(r));
          }
        }
        break;

        case VideoControlNewActiveArea:
        {
          plugin_check_videos(r->r[2]);
        }
        break;

        case VideoControlModuleDying: /* Well, died */
        case VideoControlSessionTornDown:
        {
          fullscreen_shutdown();
        }
        break;

        case VideoControlModuleStarted:
        break;
      }
    }
    break;

    /* The safe area has changed (e.g. due to wide screen switching) */

    case Service_SafeAreaChanged:
    {
      overlay_recheck_graphics();
    }
    break;
  }

  return NULL;
}
