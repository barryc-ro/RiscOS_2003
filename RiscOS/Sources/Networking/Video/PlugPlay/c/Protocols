/**************************************************************/
/* File:    Protocols.h                                       */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Handle some common protocol stuff, such as        */
/*          inter-application data transfer.                  */
/*                                                            */
/*          Function naming convention is as usual a source   */
/*          leafname derived prefix, then a code based on the */
/*          protocol being dealt with:                        */
/*                                                            */
/*          _atats_  App To App Transfer, Save                */
/*          _atatl_  App To App Transfer, Load                */
/*          _pp_     Printer Protocol                         */
/*          _auh_    Acorn URI Handler                        */
/*          _ih_     Interactive Help                         */
/*          _aub_    ANT URL Broadcast                        */
/*          _multi_  Message is used in more than one message */
/*                   protocol scheme                          */
/*          _util_   A utility function not directly          */
/*                   connected with a specific protocol.      */
/*                                                            */
/*          This is followed by the direction, so to speak -  */
/*          i.e. '_got_' for got a message, '_send_' for      */
/*          sending a message. Alternatively, a prefix        */
/*          '_bounced' is used for messages which return as a */
/*          UserMessage_Acknowledge event.                    */
/*                                                            */
/*          Because the Plug-In message protocol is such a    */
/*          large and self-contained entity, this is kept     */
/*          separate, in PlugIn.h.                            */
/*                                                            */
/*          Do NOT use MemLib here, as you will hit the Wimp  */
/*          bug relating to message blocks stored at high     */
/*          addresses (given an old enough Wimp) if you do.   */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 29-Aug-1997 (ADH): Created.                       */
/*          06-Sep-1997 (ADH): Significant rewriting to stop  */
/*                             various clashes and increase   */
/*                             flexibility.                   */
/*          17-Apr-2000 (ADH): 64-wide comments adopted.      */
/*                             Imported fragment to PlugPlay. */
/**************************************************************/


#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>

#include <URI.h>

#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "FullScreen.h"
#include "MiscDefs.h"
#include "Save.h"
#include "URLutils.h"
#include "Utils.h"

#include "Protocols.h"

/**************************************************************/
/* protocols_auh_got_started()                                */
/*                                                            */
/* Handle reception of a URI_MStarted - the URI handler has   */
/* starting up.                                               */
/*                                                            */
/* See 1307,260/FS.                                           */
/*                                                            */
/* Parameters: Pointer to the WimpMessage struct for the      */
/*             received message.                              */
/**************************************************************/

_kernel_oserror * protocols_auh_got_started(WimpMessage * m)
{
  int version;

  /* Flag that the module is now available, provided the */
  /* version number is late enough.                      */

  if (uri_version(0, &version)) uri_module_present = 0;
  else if (version >= 5)        uri_module_present = 1;

  return NULL;
}

/**************************************************************/
/* protocols_auh_got_dying()                                  */
/*                                                            */
/* Handle reception of a URI_MDying - the URI handler is      */
/* closing down.                                              */
/*                                                            */
/* See 1307,260/FS.                                           */
/*                                                            */
/* Parameters: Pointer to the WimpMessage struct for the      */
/*             received message.                              */
/**************************************************************/

_kernel_oserror * protocols_auh_got_dying(WimpMessage * m)
{
  /* If the URI handler is dying, don't try and use it anymore... */

  uri_module_present = 0;

  return NULL;
}

/**************************************************************/
/* protocols_auh_got_process()                                */
/*                                                            */
/* Handle reception of a URI_MProcess - process a URI from    */
/* the URI handler, replying if we can handle the URI.        */
/*                                                            */
/* See 1307,260/FS.                                           */
/*                                                            */
/* Parameters: Pointer to the WimpMessage struct for the      */
/*             received message. The contents will be         */
/*             modified and used in a reply.                  */
/**************************************************************/

_kernel_oserror * protocols_auh_got_process(WimpMessage * m)
{
  URIProcessURIMessage * uri    = (URIProcessURIMessage *) &m->data;
  int                    ok;

  /* Can we handle this URI? */

  ok = urlutils_check_protocols(uri->uri);

  #ifdef TRACE
    if (tl & (1u<<21)) dprintf(("", "protocols_auh_got_process: URI_MProcess '%s', ok = %d\n",uri->uri,ok));
  #endif

  /* If so, reply to the message and possibly start a fetch */

  if (ok)
  {
    /* Now reply, saying that we've handled the message */

    m->hdr.your_ref    = m->hdr.my_ref;
    m->hdr.action_code = URI_MProcessAck;

    wimp_send_message(Wimp_EUserMessage,
                      m,
                      m->hdr.sender,
                      0,
                      NULL);

    /* Only fetch if the flags bits don't say we're to just */
    /* check the URI could be handled.                      */

    if (!uri->flags.bits.check)
    {
      fullscreen_report_error(fullscreen_start(uri->uri, 0), true);
    }
  }

  return NULL;
}

/**************************************************************/
/* protocols_auh_got_return_result()                          */
/*                                                            */
/* Handle reception of a URI_MReturnResult - the URI handler  */
/* is reporting what happened to a URI we dispatched through  */
/* it.                                                        */
/*                                                            */
/* See 1307,260/FS.                                           */
/*                                                            */
/* Parameters: Pointer to the WimpMessage struct for the      */
/*             received message. The contents will be         */
/*             modified and used in a reply.                  */
/**************************************************************/

_kernel_oserror * protocols_auh_got_return_result(WimpMessage * m)
{
  URIReturnResultMessage * uri = (URIReturnResultMessage *) &m->data;

  #ifdef TRACE
    if (tl & (1u<<21)) dprintf(("", "protocols_auh_got_return_result: URI_MReturnResult, not_claimed = %d\n",uri->flags.bits.not_claimed));
  #endif

  /* Remove the entry from the queue */

  RetError(urlutils_remove_from_queue(uri->uri_handle));

  /* If the URI was not claimed by anyone, give an appropriate error */

  if (uri->flags.bits.not_claimed)
  {
    erb.errnum = Utils_Error_Custom_Message;

    StrNCpy0(erb.errmess,
             lookup_token("CannotFetch:The plug-in does not have a method of fetching the requested URL.",
                          0,0));

    show_error_ret(&erb);
  }

  return NULL;
}

/**************************************************************/
/* protocols_aub_got_open_url()                               */
/*                                                            */
/* Handle ANT Open URL broadcasts.                            */
/*                                                            */
/* See http://www.ant.co.uk/support/tech/ notes/url.html (15  */
/* Sep 1997).                                                 */
/*                                                            */
/* Parameters: Pointer to the WimpMessage struct for the      */
/*             received message. The contents will be         */
/*             modified and used in a reply.                  */
/**************************************************************/

_kernel_oserror * protocols_aub_got_open_url(WimpMessage * m)
{
  ant_open_url * open = (ant_open_url *) &m->data;
  int            ok   = 0;
  char         * url;
  char         * target;

  /* If 'tag' is non-NULL, the data is a URL string */

  if (open->tag) url = (char *) open, target = NULL;

  /* Otherwise, it's indirected */

  else
  {
    char * file;
    char * mimetype;

    /* Entries are either NULL, an offset into the  */
    /* message block (but we have to ensure that it */
    /* is a valid offset), or a pointer. This       */
    /* protocol sucks, big time.                    */

    if (!open->file.offset) file = NULL;
    else if (open->file.offset < 0x1800000)
    {
      if (open->file.offset >= sizeof(m->data.bytes)) file = NULL;
      else file = ((char *) open) + open->file.offset;
    }
    else file = open->file.ptr;

    if (!open->mimetype.offset) mimetype = NULL;
    else if (open->mimetype.offset < 0x1800000)
    {
      if (open->mimetype.offset >= sizeof(m->data.bytes)) mimetype = NULL;
      else mimetype = ((char *) open) + open->mimetype.offset;
    }
    else mimetype = open->mimetype.ptr;

    /* Can't handle file or mimetype requests */

    if (!file && !mimetype)
    {
      if (!open->url.offset) url = NULL;
      else if (open->url.offset < 0x1800000)
      {
        if (open->url.offset >= sizeof(m->data.bytes)) url = NULL;
        else url = ((char *) open) + open->url.offset;
      }
      else url = open->url.ptr;

      if (!open->target.offset) target = NULL;
      else if (open->target.offset < 0x1800000)
      {
        if (open->target.offset >= sizeof(m->data.bytes)) target = NULL;
        else target = ((char *) open) + open->target.offset;
      }
      else target = open->target.ptr;
    }
    else url = NULL, target = NULL;
  }

  /* Check the protocol - can we handle this? */

  if (url) ok = urlutils_check_protocols(url);

  /* If so, do so */

  if (ok)
  {
    /* Acknowledge the message */

    m->hdr.your_ref = m->hdr.my_ref;

    wimp_send_message(Wimp_EUserMessageAcknowledge,
                      m,
                      m->hdr.sender,
                      0,
                      NULL);

    fullscreen_report_error(fullscreen_start(url, 0), true);
  }

  return NULL;
}

/**************************************************************/
/* protocols_util_make_unique_name()                          */
/*                                                            */
/* Generates a browser-unique pathname in the given buffer,   */
/* based on Wimp$ScrapDir. This is hopefully system-unique as */
/* the function keeps going until it can't find a file under  */
/* the name it has constructed.                               */
/*                                                            */
/* Parameters: Pointer to the buffer;                         */
/*                                                            */
/*             Size of the buffer.                            */
/*                                                            */
/* Assumes:    Well it won't crash if you give it a NULL      */
/*             buffer pointer or a buffer size of less than 2 */
/*             bytes, but there's not exactly a huge amount   */
/*             of worth in calling the function under those   */
/*             conditions!                                    */
/**************************************************************/

void protocols_util_make_unique_name(char * buffer, int buffer_size)
{
  int    filecount = 0;
  int    type;
  char * leaf;

  if (!buffer || buffer_size < 2) return;

  /* Clear the buffer first */

  memset(buffer, 0, buffer_size);

  /* Write '<Wimp$ScrapDir>.' (or whatever is defined in Save.h) */
  /* to the buffer - +9 is 8 letters for the leafname (see code  */
  /* below) plus 1 for a terminator.                             */

  if (strlen(Save_ScrapPath) + 9 <= buffer_size) strcpy(buffer, Save_ScrapPath);
  else return;

  /* Append with a unique 8 letter leafname */

  leaf = buffer + strlen(buffer);

  do
  {
    sprintf(leaf, "BTF%05x", filecount++);

    /* Can we find the file? */

    type = 1;

    _swix(OS_File,
          _INR(0,1) | _OUT(0),

          17, /* Read catalogue info for object */
          buffer,

          &type);

    /* Keep going until we run out of files (!) or find an unused name */
  }
  while (type != 0 && filecount <= 0xfffff);

  /* Woo - did we run out? */

  if (filecount > 0xfffff)
  {
    #ifdef TRACE

      erb.errnum = Utils_Error_Custom_Normal;

      StrNCpy0(erb.errmess,
               "Blimey! Ran out of filenames in protocols_util_make_unique_name. Going to try to use Save_ScrapFile instead...");

      show_error_ret(&erb);

    #endif

    *buffer = 0;

    if (strlen(Save_ScrapFile) + 1 <= buffer_size) strcpy(buffer, Save_ScrapFile);

    return;
  }

  /* Finished */

  return;
}
