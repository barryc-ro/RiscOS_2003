* Operation in plug-in mode
  =========================

When in plug-in mode, the browser is expected to be running JavaScript
code that handles all video setup and manipulation besides scaling.
When the plug-in starts it embeds a blank window filled with whatever
colour will be transparent under Video Control defaults for 256 colour
or lower screen modes, or black with the transparency bit(s) set for
16 and 32bpp screen modes.

The plug-in is launched via. an OBJECT element. Currently, filetype
&BF8 is used as the launch key, so the system's MimeMap file should
contain at least one of the following lines:

  video/mpeg		MPEG		bf8	.mpeg	.mpg	.mpv
  video/x-mpeg2		MPEG		bf8

The TYPE attribute of the OBJECT element can then carry a value of
either "video/mpeg" or "video/x-mpeg2". The OBJECT must enclose at
least one PARAM element, with 'NAME="id"' and 'VALUE' holding some
unique string identifier which the JavaScript code knows about - this
is how the plug-in, on reception of broadcast messages by the
JavaScript code, can identify which of potentially many currenly open
plug-in instances is affected.

A 'STANDBY' attribute should be used with text related to the video
clip in use if possible. 'WIDTH' and 'HEIGHT' are mandatory. The DATA
attribute should be set to the RTSP URL of the video clip being played.

For example:

  <OBJECT TYPE="video/mpeg"  STANDBY="Eagle Eye Cherry"
          WIDTH="320"        HEIGHT="240"
          DATA="rtsp://neptune.eng/asset/mds%3a/mds/video/eagleeye.mpi">

    <PARAM NAME="id" VALUE="eagleeye">

    The video plug-in is not installed, or is incorrectly installed.

  </OBJECT>

The software will not quit until a Message_PlugIn_Close is received
with bit 0 of the flags at offset 20 in the block is set. Only the
instance to which the message refers is closed. This is because other
services are provided (such as full screen playback) so it is
inappropriate to quit just because plug-in functions are no longer
required. Similarly, if there are no active plug-in instances, the
software keeps running.

PlugPlay can be asked to resize itself to best fit the video. There are
two aspects to this;

  1) Attempting to scale the video to the width and height specified,
     then adjusting your size to fit the actual width and height that
     the hardware supported.

  2) Automatically changing size when the video content changes size.

Item (1) is accomplished by using the "adjust" parameter:

  <PARAM name="adjust" value="yes"|"no">

Item (2) is more difficult. The MPEG system scales the active region of
the video to fit the size we ask for, so we don't have to worry about
active format descriptors telling us where black bars (say) are; that's
taken care of. However, the video could be switching between a 4:3 and
anamorphic 16:9 clip. To support this, the plug-in needs to know
whether it should adjust its width or height. You tell it this through
the "fixed" parameter:

  <PARAM name="fixed" value="width"|"height">

If this isn't specified, both height and width are fixed and no
automatic sizing of type (2) is done.

It's valid to use either, both or neither of the "adjust" and "fixed"
parameters. Using these affects how the "border" parameter works:

- No fit-to-video adjustments at all

  The value of the border option is used to over or underscale the
  playing video in both the horizontal and vertical directions by the
  amount specified, in pixels, to the left, right, top and bottom. Use
  requires care as scaling may be quantised; it is often better to
  ensure that the plug-in width and height is calculated so that (say)
  an exact 1:2 video scale-down occurs when the border is taken into
  account. For example, a 720 pixel wide clip could be put in a 352
  pixel wide plug-in with the border given as '-4', to hide a 4 pixel
  wide column to the left and right of the plug-in window and maintain
  an exact 1:2 scale-down of the video.

- Initial fit-to-video only

  The MPEG system reports a best-fit width and height to the plug-in
  requested dimensions when playback begins. The height is taken, and
  the clip's actual aspect ratio along with the display aspect ratio
  are calculated against this to produce a width. The plug-in then
  requests that the browser re-size it to these dimensions adjusted by
  the border value; the video is scaled to the pre-border size.

- Fixed width or height with AFD-based in-play size adjustment

  The plug-in takes the given width or height and scales its window to
  this size before the border value is applied and the video to this
  size after the border value is applied. When the MPEG system later
  advises of the correct clip height or width in light of the current
  width or height, the plug-in resizes to this with the border again
  accounted for.


* Operation as a helper application
  =================================

Upon seeing an ANT URL or Acorn URI broadcast holding a URI with a
scheme of "mpeg2ts", "mpegv" or "rtsp", full-screen playback is
started. In the case of the first two URIs, the OMN_ADDR system
variable is read to aid in construction of an equivalent RTSP URL. The
playback is single-tasking and runs in the Video Control default
resolution in 4 colours for any non-"rtsp://" URL, else it runs in the
current screen depth and resolution and multitasts. Playback is
terminated automatically at the end of the clip or when the user asks
it to be stopped.

  Key   Action

  S     Stop
  P     Pause/resume
  F     Fast forward at x2 (first), x8 (second), x16 (third) and x32
        (fourth keypress)
  R     Fast rewind at x2 (first), x8 (second), x16 (third) and x32
        (fourth keypress)
  0-9   Channel selection for multicast streams.


* Player parameters
  =================

All parameter names are case insensitive. Parameter values are not.

  name          Plug-in ID name (mandatory)   <n/a>

  border        Border, pixels, -ve=overscan  0

  fontname      RISC OS font name             Homerton.Medium
  fontx         X size in pts * 16            228
  fonty         Y size in pts * 16            228
  fontcolor     RRGGBB hex specified colour   00FF00
  fontcolour    RRGGBB hex specified colour   00FF00

  fullscreen    Full screen/window: yes|no    no (plug-in), yes (URL)
  standalone    Be full MPEG player: yes|no   no (plug-in), yes (URL)

  demux         0-Auto, 1-MPEG 1, 2-MPEG 2    0
  audstream     Audio stream no. for MPEG2TS  1
  vidstream     Video stream no. for MPEG2TS  1

The following act in the same way as the old BASIC player arguments of
the same name, and may also be specified through the old-style
MPEGV/MPEG2TS/MPEG1SS URLs.

  from          Starting NPT (seconds)        Start of clip
  to            Approx. ending NPT (seconds)  End of clip
  loop          Loop playback? yes|no         no

  volume        Starting volume setting       256 (full volume)
  noaudio       Switch off audio; yes|no      no
  novideo       Switch off video; yes|no      no

  program       Program number for MPEG2TS    1


[ Plus other stuff that's converted to tags according to VC spec
  appendix C, for URLs only - TBD ]


Full screen controller playback takes place automatically when
launched by URL rather than as a plug-in. In this case there is some
translation of the old MPEG URL scheme from the previous player as
listed above. RTSP URLs, however, cannot legally carry such data.
Consequently the application-defined query string is used to specify
parameters by 'name="value"&name="value"&...'. For example:

  rtsp://neptune.eng/bondclip.mpi?fontname="Trinity.Medium"&loop="yes"


* Appendix A: General out of memory error message numbers
  =======================================================

These errors are raised internally through the make_no_memory_error
function in Utils.c. The error message is looked up through the
NoMemGen token in the Messages file and is typically of the form
"There is not enough free memory to continue this operation" with a
number in brackets following the error text. The number indicates the
point of failure:

0    malloc for plugin_instance or related structures / data failed
     (PlugIn.c)
1    RMA claim for application name for filter failed and RMA system
     did not raise an error about it (should never happen, Main.c)
2    RMA claim for filter code failed and RMA system did not raise an
     error about it (should never happen, Main.c)
3    malloc for filter structure failed (Filter.c)
4    malloc for overlay structure / associated text failed (Overlay.c)
5    malloc for pixel translation table failed (Overlay.c)
6    malloc for play session structure failed (Play.c)
7    malloc for channel name failed (FullScreen.c)
8    malloc for new URL for channel change failed (FullScreen.c)
9    urlutils_return_description for URL copy during full-screen
     playback returned NULL (FullScreen.c)
10   Various allocation problems when trying to (re)construct a URL
     for channel changing (FullScreen.c)
15   A queue entry could not be claimed in the URI dispatcher
     (URLUtils.c)
22   A claim failed in the RMA allocation routines (RMA.c)
30   malloc for a canonical path failed (Utils.c)
31   malloc for temporary path in utils_build_tree failed (Utils.c)
