/**************************************************************/
/* File:    Global.h                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Holds all of the application's globals.           */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 04-Apr-2000 (ADH): Adapted from Browse source.    */
/**************************************************************/

#ifndef PlugPlay_Global__
  #define PlugPlay_Global__

  #include <setjmp.h>
  #include <kernel.h>
  #include <tboxlibs/toolbox.h>
  #include <tboxlibs/wimp.h>

  #include "Limit.h"

  /* Global structures */

  typedef struct browser_data
  {
    struct browser_data * previous;
    struct browser_data * next;

    unsigned int          handle;

  } browser_data;

  /* For comments on what these actually are, see Global.c */

  #ifdef TRACE

    extern unsigned int tl;

  #endif

  extern jmp_buf          env;

  extern int              quit;
  extern int              modechanged;

  extern int              wimp_version;
  extern int              nested_wimp;
  extern int              task_handle;
  extern int              sprite_block;

  extern int              taskmodule_ds_registered;
  extern int              uri_module_present;

  extern MessagesFD       meb;
  extern char             tokens          [Limits_Message];
  extern char             lasttokn        [Limits_Token];

  extern char             program_name    [Limits_TaskName];
  extern char           * task_dir;
  extern char           * rma_system;
  extern char           * rma_filter;

  extern int              messages_list   [];
  extern int              event_code_list [];
  extern IdBlock          idb;
  extern WimpPollBlock    b;

  extern int              null_counter;

  /* Global error block to allow functions to hand back filled in */
  /* custom error blocks, when necessary.                         */

  extern _kernel_oserror  erb;

  /* This comes from ModuleWrap.c - if it's new enough! */

  extern void           * module_private_word_ptr;

#endif /* PlugPlay_Global__ */
