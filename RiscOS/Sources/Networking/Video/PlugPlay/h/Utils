/**************************************************************/
/* File:    Utils.h                                           */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Infrequently altered utilities.                   */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 07-Apr-2000 (ADH): Adapted from Browse source.    */
/**************************************************************/

#ifndef PlugPlay_Utils__
  #define PlugPlay_Utils__

  #include <kernel.h>
  #include <tboxlibs/wimp.h>
  #include <tboxlibs/toolbox.h>
  #include <tboxlibs/event.h>

  #include "Global.h"

  /* Known error numbers */

  #define Utils_Error_OS_Escape      17              /* Offers only 'Continue'      */
  #define Utils_Error_Custom_Normal  (1u<<30)        /* Offers 'Continue' and 'Quit */
  #define Utils_Error_Custom_Fatal   ((1u<<30) + 1)  /* Offers only 'Quit'          */
  #define Utils_Error_Custom_Message ((1u<<30) + 2)  /* Offers only 'Continue'      */

  /* Useful macros */

  #define Beep          (_swi(0x107,0))
  #define Swap(a,b)     { (a) ^= (b); (b) ^= (a); (a) ^= (b); }
  #define StrNCpy0(x,y) {strncpy(x,y,sizeof(x)-1); x[sizeof(x)-1]=0;}
  #define WordAlign(a)  (void *) ((((unsigned int) (a)) + (sizeof(int) - 1)) & (~(sizeof(int) - 1)))

  #define ChkError(e)   (show_error_cont(e))
  #define RetError(fn)  do {_kernel_oserror * e = (fn); if (e) return e;} while (0)
  #define StrLastE      do {erb = *_kernel_last_oserror(); erb.errnum = Utils_Error_Custom_Message;} while (0)
  #define RetLastE      do {erb = *_kernel_last_oserror(); erb.errnum = Utils_Error_Custom_Message; return &erb;} while (0)
  #define RetWarnE(e)   do {if (&erb != (e)) erb = *(e); erb.errnum = Utils_Error_Custom_Message; return &erb;} while (0)

  /* Function prototypes */

  char              * lookup_token                     (const char * s, int flag, const char * arg);

  void                show_error                       (_kernel_oserror * e);
  void                show_error_cont                  (_kernel_oserror * e);
  void                show_error_ret                   (_kernel_oserror * e);
  int                 show_error_ask                   (_kernel_oserror * e, const char * buttons);
  int                 report_toolbox_error             (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

  _kernel_oserror   * make_no_memory_error             (int stage);

  void                register_null_claimant           (int eventcode, WimpEventHandler * handler, void * handle);
  void                deregister_null_claimant         (int eventcode, WimpEventHandler * handler, void * handle);

  BBox              * intersection                     (BBox * a, BBox * b);
  BBox              * set_graphics_intersection        (BBox * rbox, BBox * cbox);
  void                restore_graphics_intersection    (BBox * cbox);

  void                read_os_to_points                (void);
  void                convert_pair_to_os               (int x, int y, int * osx, int * osy);
  void                convert_pair_to_points           (int x, int y, int * mpx, int * mpy);
  void                convert_to_os                    (int x, int * osx);
  void                convert_to_points                (int x, int * mpx);
  void                convert_box_to_os                (const BBox * mp, BBox * os);
  void                convert_box_to_points            (const BBox * os, BBox * mp);

  _kernel_oserror   * read_sprite_size                 (char * name, int * width, int * height);
  _kernel_oserror   * utils_text_width                 (char * text, int * width, int scan);

  int                 adjust                           (void);

  _kernel_oserror   * set_window_flags                 (int window_handle, unsigned int clear_word, unsigned int eor_word);

  int                 debounce_keypress                (void);

  int                 task_from_window                 (int window_handle);

  int                 utils_strcasecmp                 (const char * a, const char * b);
  int                 utils_strncasecmp                (const char * a, const char * b, unsigned int n);
  char              * utils_strcasestr                 (const char * a, const char * b);
  char              * utils_strdup                     (const char * s1);
  char              * utils_strndup                    (const char * s1, size_t size);

  _kernel_oserror   * utils_get_task_handle            (const char * task_to_get, unsigned int * found_handle);

  int                 utils_check_scrap                (void);
  _kernel_oserror   * utils_canonicalise_path          (const char * in, char ** out);
  _kernel_oserror   * utils_build_tree                 (const char * path);

#endif /* PlugPlay_Utils__ */
