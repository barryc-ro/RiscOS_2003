/**************************************************************/
/* File:    URLutils.h                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: URL manipulation for the browser.browser.         */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 06-Feb-1997 (ADH): Created.                       */
/*          07-Apr-2000 (ADH): 64-wide comments adopted.      */
/*          17-Apr-2000 (ADH): Imported into PlugPlay.        */
/**************************************************************/

#ifndef PlugPlay_URLutils__
  #define PlugPlay_URLutils__

  #include <kernel.h>
  #include <URI.h> /* URI handler API, in URILib:h */

  #include "Global.h"

  /* General definitions */

  #define ProtocolSeparator "//"
  #define ProtocolSepShort  "/"         /* For 'file:/' not 'file://' */
  #define FileMethod        "file:"
  #define HTTPmethod        "http:"
  #define FTPmethod         "ftp:"
  #define GopherMethod      "gopher:"
  #define AboutMethod       "about:"
  #define RTSPMethod        "rtsp:"

  /* Don't reorder these, stuff relies on them this way around */

  #define MPEGMethod1       "mpegv:"
  #define MPEGMethod2       "mpeg2ts:"
  #define MPEGMethod3       "mpegf:"
  #define MPEGMethod4       "mpeg1ss:"

  /* Structures */

  /* For any URL, this can hold a more complete description than     */
  /* strings, and makes comparing two URLs in a valid manner easier. */

  typedef struct url_description
  {
    char * full;     /* Complete, canonicalised URL         */

    char * protocol; /* Such as 'http' or 'mailto'          */
    char * host;     /* E.g. 'www.acorn.com'                */
    char * port;     /* For example '8080'                  */

    char * user;     /* E.g. 'ahodgkin'                     */
    char * password; /* E.g. 'NotMine'                      */
    char * account;  /* As in ftp://user:pass:account@host/ */

    char * path;     /* Speaks for itself                   */

    char * query;    /* CGI info - after a '?' in a URL     */
    char * fragment; /* Anchor info - after a '#' in a URL  */
  }
  url_description;

  /* If using the URI handler, need to keep an array of all */
  /* URIs sent out so that if they get back to the browser  */
  /* and it can handle them, the browser_data struct (see   */
  /* below) that they were allocated for and various useful */
  /* flags associated with the URI can be recovered.        */
  /*                                                        */
  /* In practice, the items are stored in a linked list to  */
  /* allow easy removal of items without copying memory     */
  /* around all over the place.                             */

  /* Flags definitions */

  #define URIQueue_RecordInHistory (1u<<0)

  /* Structure for queue entries */

  typedef struct uri_queue
  {
    unsigned int       flags;
    browser_data     * b;
    URI_handle_t       uri_handle;

    struct uri_queue * prev;
    struct uri_queue * next;

  } uri_queue;

  /* URL module definitions */

  #ifndef URL_Register
    #define URL_Register         (0x83e00)
    #define URL_GetURL           (0x83e01)
    #define URL_Status           (0x83e02)
    #define URL_ReadData         (0x83e03)
    #define URL_SetProxy         (0x83e04)
    #define URL_Stop             (0x83e05)
    #define URL_Deregister       (0x83e06)
    #define URL_ParseURL         (0x83e07)
    #define URL_EnumerateSchemes (0x83e08)

    #define URL_Method_http_GET   1
    #define URL_Method_http_HEAD  2
    #define URL_Method_http_POST  4
    #define URL_Method_http_PUT   8

    #define URL_GetURL_AgentGiven   (1u<<0)

    #define URL_Status_Connected  1
    #define URL_Status_SentReq    2
    #define URL_Status_SentData   4
    #define URL_Status_Responded  8
    #define URL_Status_Transfer  16
    #define URL_Status_Done      32
    #define URL_Status_Aborted   64

    #define URL_ParseURL_LengthInR5 (1u<<0)
    #define URL_ParseURL_HexEscape  (1u<<1)

    #define URL_ParseURL_Reason_FindLengths           0
    #define URL_ParseURL_Reason_FillBuffers           1
    #define URL_ParseURL_Reason_ComposeFromComponents 2
    #define URL_ParseURL_Reason_QuickResolve          3
  #endif

  /* Function prototypes */

  int               urlutils_urlsscmp           (const char * url_s1, const char * url_s2);
  int               urlutils_urldscmp           (const url_description * url_d, const char * url_s);
  int               urlutils_urlddcmp           (const url_description * url_d1, const url_description * url_d2);
  url_description * urlutils_return_description (const char * url_s);
  void              urlutils_free_description   (url_description * url_d);

  void              urlutils_pathname_to_url    (char * path, int buffersize);
  void              urlutils_url_to_pathname    (char * url, int buffersize);
  void              urlutils_translate_pathname (char * path);

  char            * urlutils_fix_url            (char * buffer, int buffersize);
  char            * urlutils_relativise_url     (const char * base, const char * link);

  int               urlutils_check_protocols    (char * url);

  _kernel_oserror * urlutils_dispatch           (browser_data * b, char * uri, unsigned int flags);
  _kernel_oserror * urlutils_remove_from_queue  (URI_handle_t uri_handle);
  uri_queue       * urlutils_find_queue_entry   (URI_handle_t uri_handle);

#endif /* PlugPlay_URLutils__ */
