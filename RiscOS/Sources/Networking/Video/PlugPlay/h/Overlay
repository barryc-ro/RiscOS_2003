/**************************************************************/
/* File:    Overlay.h                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Overlay manager for full screen playback.         */
/*          Overlays are sprite or text items placed on the   */
/*          screen at various alignment points for a certain  */
/*          duration.                                         */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 19-Apr-2000 (ADH): Created.                       */
/**************************************************************/

#ifndef PlugPlay_Overlay__
  #define PlugPlay_Overlay__

  #include <kernel.h>
  #include <tboxlibs/wimp.h>
  #include <tboxlibs/toolbox.h>

  /* Overlay alignment values. These must start at zero and */
  /* monotonically rise.                                    */

  typedef enum overlay_alignment
  {
    oa_top_left = 0,
    oa_top_centre,
    oa_top_right,
    oa_middle_left,
    oa_middle_centre,
    oa_middle_right,
    oa_bottom_left,
    oa_bottom_centre,
    oa_bottom_right,

    oa__end

  } overlay_alignment;

  /* Overlay sprites for the sprite array, see function overlay_get_sprite */

  typedef enum overlay_sprite
  {
    os_wait = 0,
    os_play,
    os_disabled,
    os_tv,
    os_blank_tv,
    os_goto,
    os_pause,
    os_ff,
    os_fr,
    os_next,
    os_last,
    os_warning,

    os__end

  } overlay_sprite;

  /* Callback for use during overlay polling. The sprite and text fields may be */
  /* altered and a non-zero value returned to indicate the change. The function */
  /* may assume that utils_strdup was used to allocate the strings initially,   */
  /* so they may be freed and reallocated in the same way if need be.           */
  /*                                                                            */
  /* A callback function should set the 'antiflicker' flag to 1 if it wants the */
  /* item drawn to a sprite with the size assumed to be as larger or larger     */
  /* than the current on-screen contents. This flag is cleared automatically    */
  /* after redrawing so should be set each time. If unset, the item is undrawn  */
  /* before being drawn, and though VSync is waited for before doing this, if   */
  /* the system is under heavy load (e.g. 7500FE-based STB with high bitrate    */
  /* incoming MPEG stream) flicker can still occur.                             */

  typedef int (*overlay_cb_ptr) (void * o);

  /* Hold details of each overlay */

  typedef struct overlay
  {
    struct overlay    * prev;
    struct overlay    * next;

    unsigned int        handle;

    char              * text;
    char              * sprite;

    overlay_cb_ptr      callback;
    void              * cbhandle;

    overlay_alignment   align;

    unsigned int        start_time;
    unsigned int        duration;

    unsigned            antiflicker :1;
    unsigned            kern_off    :1;

    /* Internal use only */

    unsigned int        flags;

  } overlay;

  /* Font manager definitions */

  #define FM_OSUnits     (1<<4)  /* X and Y are OS units flag for Font_Paint */
  #define FM_GivenBuffer (1<<5)  /* Buffer given for Font_ScanString         */
  #define FM_GivenLength (1<<7)  /* String length given in Font_ScanString   */
  #define FM_GivenHandle (1<<8)  /* Font handle passed to Font_Paint         */
  #define FM_Kern        (1<<9)  /* Use autokerning if font data supports it */
  #define FM_Blend       (1<<11) /* Use font blending (if font manager can!) */
  #define FM_ReturnBBox  (1<<18) /* Return BBox in Font_ScanString           */

  /* Function prototypes */

  _kernel_oserror * overlay_add              (const char * sprite, const char * text, overlay_alignment align, unsigned int duration, overlay ** ret, unsigned int handle);
  _kernel_oserror * overlay_remove           (overlay * item, unsigned int handle);

  void              overlay_hide             (void);
  int               overlay_poll             (int eventcode, WimpPollBlock * b, IdBlock * idb, void * handle);

  void              overlay_initialise       (void);
  void              overlay_recheck_graphics (void);
  _kernel_oserror * overlay_open_window      (unsigned int * newh);
  void              overlay_shutdown         (void);

#endif /* PlugPlay_Overlay__ */
