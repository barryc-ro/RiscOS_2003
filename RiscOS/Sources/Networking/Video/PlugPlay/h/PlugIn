/**************************************************************/
/* File:    PlugIn.h                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Supporting the generic RISC OS plug-in interface. */
/*                                                            */
/*          Unusual allocation schemes may be used to replace */
/*          malloc here, so do NOT malloc a message block and */
/*          try to send it; you'll hit the Wimp bug regarding */
/*          message blocks at high addresses with older       */
/*          versions.                                         */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 20-Sep-1997 (ADH): Created.                       */
/*          05-Apr-2000 (ADH): 64-wide comments adopted.      */
/*          14-Apr-2000 (ADH): Imported from Browse.          */
/**************************************************************/

#ifndef PlugPlay_PlugIn__
  #define PlugPlay_PlugIn__

  #include <stdbool.h>
  #include <kernel.h>
  #include <tboxlibs/wimp.h>

  #include "Global.h"
  #include "MiscDefs.h"

  /* Launch key (filetype) */

  #define PlugIn_LaunchKey                 0xbf8

  /* Parameters file definitions */

  #define PlugIn_ParamType_Terminator      0
  #define PlugIn_ParamType_DataFromPARAM   1
  #define PlugIn_ParamType_URLFromPARAM    2
  #define PlugIn_ParamType_ObjectFromPARAM 3
  #define PlugIn_ParamType_BrowserSpecial  4
  #define PlugIn_ParamType_DataFromOBJECT  5
  #define PlugIn_ParamType_URLFromOBJECT   6
  #define PlugIn_ParamType_DataFromAPPLET  5
  #define PlugIn_ParamType_URLFromAPPLET   6

  /* Message definitions. string_value is in MiscDefs.h.   */
  /*                                                       */
  /* These definitions are uncommented, as it is assumed   */
  /* that the reader is completely familiar with the       */
  /* Plug-In specification already.                        */

  #define Message_PlugIn_Open                        0x4d540

  #define MPlugIn_Open_OpenAsHelperNotPlugIn         (1<<0)

  typedef struct MPlugIn_Open
  {
    unsigned int flags;

    unsigned int reserved;
    int          browser_instance_handle;

    int          parent_window_handle;
    BBox         parent_area;

    int          file_type;
    string_value file_name;
  }
  MPlugIn_Open;

  /* Plug-In opening */

  #define Message_PlugIn_Opening                     0x4d541

  #define MPlugIn_Opening_CanAcceptInputFocus        (1u<<0)
  #define MPlugIn_Opening_WantsCodeResourceFetched   (1u<<1)
  #define MPlugIn_Opening_WantsDataResourceFetched   (1u<<2)
  #define MPlugIn_Opening_WillDeleteParamsItself     (1u<<3)
  #define MPlugIn_Opening_PlugInHasMoreWorkToDo      (1u<<4)
  #define MPlugIn_Opening_ActionBeyondStop           (1u<<5)
  #define MPlugIn_Opening_OpenedAsHelperNotPlugIn    (1u<<6)

  typedef struct MPlugIn_Opening
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;

    int          parent_window_handle;
    BBox         parent_area;
  }
  MPlugIn_Opening;

  /* Request Plug-In to close */

  #define Message_PlugIn_Close                       0x4d542

  #define MPlugIn_Close_WouldLikePlugInToExit        (1u<<0)

  typedef struct MPlugIn_Close
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;
  }
  MPlugIn_Close;

  /* Plug-In closing */

  #define Message_PlugIn_Closed                      0x4d543

  #define MPlugIn_Closed_PlugInWillExitAfterThis     (1u<<0)
  #define MPlugIn_Closed_NotAReply                   (1u<<1)
  #define MPlugIn_Closed_ErrorHeldInMessageBlock     (1u<<2)

  typedef struct MPlugIn_Closed
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;

    int          errnum;
    char         errmess[sizeof(WimpMessage) - 36];
  }
  MPlugIn_Closed;

  /* Request Plug-In moves */

  #define Message_PlugIn_Reshape                     0x4d544

  typedef struct MPlugIn_Reshape
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;

    int          parent_window_handle;
    BBox         parent_area;
  }
  MPlugIn_Reshape;

  /* Plug-In requesting that it be resized */

  #define Message_PlugIn_ReshapeRequest              0x4d545

  typedef struct MPlugIn_ReshapeRequest
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;

    unsigned int width;
    unsigned int height;
  }
  MPlugIn_ReshapeRequest;

  /* Transfer input focus between plug-in and browser (bidirectional) */

  #define Message_PlugIn_Focus                       0x4d546

  typedef struct MPlugIn_Focus
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;
  }
  MPlugIn_Focus;

  /* Open a new stream */

  #define MPlugIn_StreamNew_StreamTypeMask           (3u<<0)
  #define MPlugIn_StreamNew_StreamTypeNormal         (0u<<0)
  #define MPlugIn_StreamNew_StreamTypeSeekOnly       (1u<<0)
  #define MPlugIn_StreamNew_StreamTypeAsFile         (2u<<0)
  #define MPlugIn_StreamNew_StreamTypeAsFileOnly     (3u<<0)
  #define MPlugIn_StreamNew_StreamIsSeekable         (1u<<4)

  #define Message_PlugIn_StreamNew                   0x4d548

  typedef struct MPlugIn_StreamNew
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;

    int          plugin_stream_instance_handle;
    int          browser_stream_instance_handle;

    string_value url;

    int          eos;
    int          last_modified;
    int          notify;

    string_value mime_type;
    string_value window_target;
  }
  MPlugIn_StreamNew;

  /* Close a stream */

  #define Message_PlugIn_StreamDestroy               0x4d549

  typedef enum MPlugIn_StreamDestroy_Reason
  {
    MPlugIn_StreamDestroy_Reason_Success = 0,
    MPlugIn_StreamDestroy_Reason_Error   = 1,
    MPlugIn_StreamDestroy_Reason_User    = 2
  }
  MPlugIn_StreamDestroy_Reason;

  typedef struct MPlugIn_StreamDestroy
  {
    unsigned int                 flags;

    int                          plugin_instance_handle;
    int                          browser_instance_handle;

    int                          plugin_stream_instance_handle;
    int                          browser_stream_instance_handle;

    string_value                 url;

    int                          eos;
    int                          last_modified;
    int                          notify;

    MPlugIn_StreamDestroy_Reason reason;
  }
  MPlugIn_StreamDestroy;

  /* Confirm file has been written */

  #define Message_PlugIn_StreamAsFile                0x4d54c

  typedef struct MPlugIn_StreamAsFile
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;

    int          plugin_stream_instance_handle;
    int          browser_stream_instance_handle;

    string_value url;

    int          eos;
    int          last_modified;
    int          notify;

    string_value pathname;
  }
  MPlugIn_StreamAsFile;

  /* Plug-In URL request */

  #define Message_PlugIn_URLAccess                   0x4d54d

  #define MPlugIn_URLAccess_ReturnNotifyWhenComplete (1u<<0)
  #define MPlugIn_URLAccess_POSTToURL                (1u<<1)
  #define MPlugIn_URLAccess_POSTAFile                (1u<<2)

  typedef struct MPlugIn_URLAccess
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;

    string_value url;
    string_value target;

    int          notify_data;
    int          data_length;
    string_value data_pointer;
  }
  MPlugIn_URLAccess;

  /* Plug-In status message */

  #define Message_PlugIn_Status                      0x4d54f

  typedef struct MPlugIn_Status
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;

    string_value status;
  }
  MPlugIn_Status;

  /* Plug-In busy / idle indication */

  #define Message_PlugIn_Busy                        0x4d550

  #define MPlugIn_Busy_IsBusy                        (1u<<0)
  #define MPlugIn_Busy_StatusWordIsValid             (1u<<1)

  typedef enum MPlugIn_Busy_State
  {
    MPlugIn_Busy_State_Stop        = 0,
    MPlugIn_Busy_State_Play        = 1,
    MPlugIn_Busy_State_Pause       = 2,
    MPlugIn_Busy_State_FastForward = 3,
    MPlugIn_Busy_State_FastRewind  = 4,
    MPlugIn_Busy_State_Record      = 5,
    MPlugIn_Busy_State_SlowForward = 8,
    MPlugIn_Busy_State_SlowRewind  = 9
  }
  MPlugIn_Busy_State;

  typedef struct MPlugIn_Busy
  {
    unsigned int       flags;

    int                plugin_instance_handle;
    int                browser_instance_handle;

    MPlugIn_Busy_State state;
  }
  MPlugIn_Busy;

  /* Send a command to a plug-in */

  #define Message_PlugIn_Action                      0x4d551

  #define MPlugIn_Action_CommandWordIsValid          (1u<<1)

  typedef enum MPlugIn_Action_Command
  {
    MPlugIn_Action_Command_Stop        = 0,
    MPlugIn_Action_Command_Play        = 1,
    MPlugIn_Action_Command_Pause       = 2,
    MPlugIn_Action_Command_FastForward = 3,
    MPlugIn_Action_Command_FastRewind  = 4,
    MPlugIn_Action_Command_Record      = 5,
    MPlugIn_Action_Command_Mute        = 6,
    MPlugIn_Action_Command_Unmute      = 7,
    MPlugIn_Action_Command_SlowForward = 8,
    MPlugIn_Action_Command_SlowRewind  = 9
  }
  MPlugIn_Action_Command;

  typedef struct MPlugIn_Action
  {
    unsigned int           flags;

    int                    plugin_instance_handle;
    int                    browser_instance_handle;

    MPlugIn_Action_Command command;
  }
  MPlugIn_Action;

  /* Abort operations ("go quiet") */

  #define Message_PlugIn_Abort                       0x4d552

  typedef struct MPlugIn_Abort
  {
    unsigned int flags;

    int          plugin_instance_handle;
    int          browser_instance_handle;
  }
  MPlugIn_Abort;

  /* Pass plug-in various bits of information by broadcast */

  #define Message_PlugIn_Inform                      0x4d553

  typedef enum MPlugIn_Inform_InfoID
  {
    MPlugIn_Inform_InfoID_MPEGControlHandle  = 0,
    MPlugIn_Inform_InfoID_VideoControlHandle = 1,
    MPlugIn_Inform_InfoID_State              = 2
  }
  MPlugIn_Inform_InfoID;

  typedef struct MPlugIn_Inform
  {
    unsigned int          flags;

    int                   reserved1;
    int                   reserved2;

    char                  name[24];

    MPlugIn_Inform_InfoID info_id;

    union
    {
      unsigned int mpeg_control_handle;
      unsigned int video_control_handle;
      unsigned int state;
    }
    info;
  }
  MPlugIn_Inform;

  /* Reply to Message_PlugIn_Inform */

  #define Message_PlugIn_Informed                    0x4d554

  typedef struct MPlugIn_Informed
  {
    unsigned int          flags;

    int                   plugin_instance_handle;
    int                   browser_instance_handle;

    /* From here, this is exactly as MPlugIn_Inform */

    char                  name[24];

    MPlugIn_Inform_InfoID info_id;

    union
    {
      unsigned int mpeg_control_handle;
      unsigned int video_control_handle;
      unsigned int state;
    }
    info;
  }
  MPlugIn_Informed;

  /* Function prototypes */

  _kernel_oserror * plugin_make_stand_alone   (BBox * at, unsigned int * newh);
  void              plugin_delete_stand_alone (unsigned int handle);

  _kernel_oserror * plugin_got_open           (WimpMessage * m);
  _kernel_oserror * plugin_got_close          (WimpMessage * m);
  _kernel_oserror * plugin_got_reshape        (WimpMessage * m);
  _kernel_oserror * plugin_got_action         (WimpMessage * m);
  _kernel_oserror * plugin_got_abort          (WimpMessage * m);
  _kernel_oserror * plugin_got_inform         (WimpMessage * m);
  _kernel_oserror * plugin_got_focus          (WimpMessage * m);

  void              plugin_set_launcher       (unsigned int instance, unsigned int launcher);
  unsigned int      plugin_get_launcher       (unsigned int instance);

  unsigned int      plugin_check_videos       (unsigned int vc_id);
  _kernel_oserror * plugin_set_video_options  (unsigned int instance, unsigned int vc_id);
  bool              plugin_get_video_options  (unsigned int instance, int * from, int * to, bool * loop);
  bool              plugin_get_persistence    (unsigned int instance);
  _kernel_oserror * plugin_reread_all_windows (void);

  void              plugin_shutdown           (void);

#endif /* PlugPlay_PlugIn__ */
