# Makefile for RTSP HSAC
#
# ***********************************
# ***    C h a n g e   L i s t    ***
# ***********************************
# Date         Name    Description
# ----         ----    -----------
# 13-Aug-2002  JRB     Created from RTSPOVS Makefile
# 13-Mar-2003  JRB     New version using standard rules and macros

COMPONENT  = RTSPHSAC
TARGET     = ${COMPONENT}
RESFSDIR   = <Resource$Dir>.Resources2.VideoCtrl.${TARGET}
DBG_MODULE = rm.${TARGET}-tr

OBJS =          \
 o.RTSPHHdr     \
 o.Announce     \
 o.CallOut      \
 o.Connect      \
 o.DNS          \
 o.Generic      \
 o.Global       \
 o.Headers      \
 o.MoreInfo     \
 o.Options      \
 o.Play         \
 o.Setup        \
 o.Session      \
 o.Status       \
 o.TearDown     \
 o.URLutils     \
 o.Utils

MSGSF_OBJ  = o.messages

RAM_OBJS   = ${OBJS} o.Module ${MSGSF_OBJ}

ROM_OBJS   = ${OBJS} o_rom.Module

DBG_OBJS =      \
 o.RTSPHHdr     \
 o_dbg.Announce \
 o_dbg.CallOut  \
 o_dbg.Connect  \
 o_dbg.DNS      \
 o_dbg.Generic  \
 o_dbg.Global   \
 o_dbg.Headers  \
 o_dbg.Module   \
 o_dbg.MoreInfo \
 o_dbg.Options  \
 o_dbg.Play     \
 o_dbg.Setup    \
 o_dbg.Session  \
 o_dbg.Status   \
 o_dbg.TearDown \
 o_dbg.URLutils \
 o_dbg.Utils    \
 ${MSGSF_OBJ}

DIRS       = o._dirs_

# Description of extra compilation options:
# ROM                           When compiling ROM module.
#
# TRACE                         Do DebugLib based message outputting.
#
# TRACE2                        Defines TRACE for you and also enables extra
#                               debugging.
#
# ALWAYS_CLAIM_EVENTV           The module will sit on EventV from the moment
#                               it starts to the moment it dies if this is
#                               defined. Otherwise, it'll only claim it for
#                               as long as any sessions exist (which should
#                               be more efficient).

#
# Build options
#
CINCLUDES  = -ITCPIPLibs:,C:
CDEFINES   = -D${SYSTEM} -DCOMPAT_INET4 -UALWAYS_CLAIM_EVENTV
CFLAGS     = -Wp -ffah -zM -zps1

#
# Libraries
#
include Makefiles:ModuleLibs
LIBS       = $(INETLIB) $(SOCK4LIB) $(UNIXLIB) $(ASMUTILS)
DBG_LIBS   = $(DEBUGLIB) $(LIBS)
ABSSYM     = $(C_ABSSYM)

#
# Include standard rules and macros
#
include Makefiles:StdTools
include Makefiles:ModStdRule
include Makefiles:RAMCModule
include Makefiles:ROMCModule

#
# Extra rule patterns
#
.SUFFIXES: .o_rom .o_dbg
.c.o_rom:;      ${CC} ${CFLAGS} -DROM -o $@ $<
.c.o_dbg:;      ${CC} ${CFLAGS} -fn -DTRACE2 -o $@ $<

#
# Rule for actually making the linked RAM debug target
# (based on rule for RAM_MODULE from Makefiles:RAMCModule)
#
${DBG_MODULE}: ${DBG_OBJS} ${DBG_LIBS} ${CLIB} ${DIRS}
        ${MKDIR} rm
        ${LD} ${LDFLAGS} ${LDRAMFLAGS} -o $@ -rmf ${DBG_OBJS} ${DBG_LIBS} ${CLIB}
        ${CHMOD} -R a+rx rm

#
# Resources
#

# Rule to generate messages object file for RAM builds
${MSGSF_OBJ}: LocalRes:Messages
        resgen messages_file ${MSGSF_OBJ} LocalRes:Messages Resources.VideoCtrl.${COMPONENT}.Messages

#
# Targets
#

# Target to create object directories
${DIRS}:
        ${MKDIR} o
        ${MKDIR} o_rom
        ${MKDIR} o_dbg
        ${TOUCH} ${DIRS}

# Target to clean component
clean:
        ${RM} h.RTSPHHdr
        ${XWIPE} o ${WFLAGS}
        ${XWIPE} o_rom ${WFLAGS}
        ${XWIPE} o_dbg ${WFLAGS}
        ${XWIPE} rm ${WFLAGS}
        ${XWIPE} aof ${WFLAGS}
        ${XWIPE} linked ${WFLAGS}
        @echo ${COMPONENT}: cleaned

# Target to build debug RAM module
ramtrace: ${DBG_MODULE}
        @${ECHO} ${COMPONENT}: debug ram module built

# Target to export resources
resources: LocalRes:Messages
        ${MKDIR} ${RESFSDIR}
        ${TOKENCHECK} LocalRes:Messages
        ${CP} LocalRes:Messages ${RESFSDIR}.Messages ${CPFLAGS}
        @echo ${COMPONENT}: Resource files copied

#
# Dependencies for and on RTSPHHdr.h need to be defined explicitly as it is
# generated by cmhg.
#

h.RTSPHHdr: VersionNum

o.CallOut o_dbg.CallOut: RTSPHHdr.h
o.Module o_dbg.Module o_rom.Module: RTSPHHdr.h
o.Status o_dbg.Status: RTSPHHdr.h

# Dynamic dependencies:
