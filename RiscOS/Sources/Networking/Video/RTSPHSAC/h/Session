/**************************************************************/
/* File:    Session.h                                         */
/*          (C) 2002 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Manage our local sessions with Video Control.     */
/*                                                            */
/* Author:  Originally S.N.Brodie in the Generic fetcher.     */
/*          Adapted by A.D.Hodgkinson.                        */
/*                                                            */
/* History: 23-Nov-1999 (ADH): Created from scratch.          */
/*          30-Nov-1999 (ADH): More or less replaced the      */
/*                             entire contents with Generic's */
/*                             session adapted handling code. */
/*          25-Jul-2002 (ADH): Imported to RTSP HSAC from     */
/*                             RTSP OVS.                      */
/**************************************************************/

#ifndef RTSPHSAC_Session__
  #define RTSPHSAC_Session__

  #include <stdbool.h>

  #include "URLutils.h"

  /* Default assumed server timeout; empty GET_PARAMETER "pings" */
  /* are issued at half this interval. Servers may supply an     */
  /* alternative in their Session header when responding to a    */
  /* SETUP command.                                              */

  #define Session_Timeout_Default (60)

  /* Rate at which state machine is driven, cs */

  #define Session_State_Timer     (20)
  #define Session_State_Retry     (200)

  /* Structures and enumerations */

  typedef enum
  {
    protostate_ERROR,
    protostate_ERROR_DEAD,
    protostate_ERROR_MEM,
    protostate_ERROR_WRITE,
    protostate_ERROR_READ,
    protostate_ERROR_CONNECTION,
    protostate_ERROR_NO_TOKEN,
    protostate_ERROR_NOT_IMPLEMENTED,
    protostate_ERROR_TIMEOUT,
    protostate_ERROR_DNS,
    protostate_ERROR_VCPN,

    /* If you add to the above, don't forget to add to the list */
    /* of error conditions in the state machine.                */

    protostate_INITIAL,
    protostate_DNS,
    protostate_CONNECTED,
    protostate_WAITING,
    protostate_SENDING,
    protostate_RECEIVING,
    protostate_RECEIVING_ASYNC,
    protostate_SENT,
    protostate_COMPLETED

  } network_protocol_fsm_states;

  /* Structure for remembering headers */

  typedef struct rtsp_header
  {
    struct rtsp_header * next;        /* Link to next member */
    char               * header;      /* Pointer into text member - is the RTSP header tag */
    char               * value;       /* Pointer into text member - is the tag value setting */
    char                 text[1];     /* Entire header but ':' and "\r\n" represented by '\0' terminators */

  } rtsp_header;

  /* Structure for remembering asynchronous messages */

  typedef struct async_message
  {
    struct async_message * next;      /* Link to next member */
    char                 * data;      /* Points to an asynchronous message data */
    int                    data_len;  /* Size of data pointed to by 'data' */

  } async_message;

  /* Session information */

  struct session;
  typedef _kernel_oserror *(*callback_fn_ptr)(struct session * s);

  typedef struct session
  {
    struct session  * next;             /* Pointer to next session */
    struct session  * child;            /* Child session used for handling asynchronous messages */
    struct session  * parent;           /* Parent session (so a dying child can set it's parent's child to NULL) */

    unsigned int      id;               /* Client handle */
    unsigned int      vcid;             /* Video Control client handle */
    unsigned int      mpegid;           /* MPEG Control stream handle */

    url_description * url;              /* Full URI of the document being fetched */

    int               sd;               /* Socket descriptor */
    int               reqptr;           /* Pointer into the full request buffer for sending data */
    int               reqlen;           /* Length of the full request buffer */
    unsigned int      last;             /* Last activity timeout */
    callback_fn_ptr   connected_cb;     /* Function to call back when a socket reaches connected state */
    callback_fn_ptr   next_command_cb;  /* Function to call when a command is completed, without telling Video Control */

    char            * saved_r3;         /* Record of R3 from RTSPMB_Setup or RTSPMB_Play, for delayed SETUP/PLAY command */
    char            * saved_r4;         /* As above, for R4 */
    char            * saved_r5;         /* As above, for R5 */
    unsigned int      saved_r6;         /* As above, for R6 */

    char            * teardown_r4;      /* Record of R4 from RTSPMB_TearDown, for delayed TEARDOWN command */
    char            * teardown_r5;      /* As above, for R5 */
    unsigned int      teardown_r6;      /* As above, for R6 */

    int               state;            /* The state of this session */
    int               reported_state;   /* R0 status returned on last SWI call (used by status SWI) */
    unsigned int      err_no;           /* Session-local copy */
    unsigned int      response_code;    /* Holds the response code for the latest response read */

    rtsp_header     * headers;          /* List of headers */
    char            * data;             /* Additional client data to be sent to server; also the receive buffer */
    int               data_len;         /* Size of data pointed to by 'data' - strlen(data) if not known */
    int               data_to_read;     /* Amount of data still to be read for current response (-1 if not known) */

    _kernel_oserror * async_error;      /* Records any error generated when receiving an asynchronous message */
    async_message   * async_msg_list;   /* Points to list of asynchronous messages received */

    char            * play_record;      /* Records string in R3 from RTSPHSAC_Play */
    char            * range_record;     /* Records string in R2 from RTSPHSAC_Play */
    char            * full_request;     /* Holds the current full request (headers plus any body data) for sending */

    char            * server_session;   /* Pointer to the server session header value */
    unsigned int      server_timeout;   /* Timeout value that the server gave us, or Session_Timeout_Default */

    int               playmode;         /* The current play mode number (as for R2 of MPEGControl_ResetStream) */
    int               next_playmode;    /* The next play mode to change to */
    int               speed;            /* The current speed (as for R1 of MPEGControl_SetSpeed) */
    int               next_speed;       /* The next speed to change to */

    unsigned          dying         :1; /* Non-zero when the session is being destroyed */
                                    
    unsigned          callout_set   :1; /* Non-zero if a callout function is set for general state machine stuff */
    unsigned          ping_set      :1; /* Non-zero if a callout function is set for server 'pinging' */
    unsigned          teardown_wait :1; /* Non-zero if there's a deferred TEARDOWN command timer in operation */
    unsigned          destruct      :1; /* Non-zero if the session should self-destruct after the current command */
    unsigned          started       :1; /* Non-zero if playback has started in Video Control */
    unsigned          reported      :1; /* Non-zero if we've reported a state change due to an error state to Video Control */
    unsigned          change_pending:1; /* Non-zero if PLAY or PAUSE sent and response not yet received */
    unsigned          use_playnow   :1; /* Non-zero if we are to use the x-playNow extension */

  } session;

  /* Function prototypes */

  session         * session_return_head       (void);
  session         * session_find_by_id        (unsigned int vc_client_id);
  session         * session_find_by_vcid      (unsigned int vcid);
  _kernel_oserror * session_new_session       (session ** rs);
  _kernel_oserror * session_link_new_item     (session * ses);
  void              session_remove_callouts   (session * ses, bool state_machine_too);
  void              session_reset_session     (session * ses);
  bool              session_add_async_message (session * ses, char * data, int data_len);

  void              session_free_item         (session * ses);
  void              session_free_list         (void);

#endif /* RTSPHSAC_Session__ */
