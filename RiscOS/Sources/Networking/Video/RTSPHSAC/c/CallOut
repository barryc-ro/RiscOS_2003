/**************************************************************/
/* File:    CallOut.c                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Funky CallAfter handler stuff. If used more       */
/*          widely, stop it sitting on TickerV first!         */
/*                                                            */
/* Author:  From the Internet module.                         */
/*                                                            */
/* History: 23-Nov-1999 (ADH): Created.                       */
/*          25-Jul-2002 (ADH): Imported to RTSP HSAC from     */
/*                             RTSP OVS.                      */
/**************************************************************/

#include <stdlib.h>

#include <Global/RISCOS.h>
#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "RTSPHHdr.h"

#include "CallOut.h"

struct callout
{
  struct  callout *c_next;        /* next callout in queue */
  void    *c_arg;                 /* function argument */
  void    (*c_func)(void *);      /* function to call */
  int     c_time;                 /* ticks to the event */
};

/* Number of concurrent items supported */

#define NCALLOUT 128

static struct callout   callout [NCALLOUT];
static struct callout * callfree;
static struct callout   calltodo;

static int              ncallout = NCALLOUT;
static volatile int     callo_pending;

_kernel_oserror * callout_init(void * pw)
{
  int i;

  callo_pending   = 0;
  calltodo.c_next = 0;
  callfree        = &callout[0];

  for (i = 1; i < ncallout; i++)
  {
    callout[i-1].c_next = &callout[i];
  }

  return _swix(OS_Claim,
               _INR(0,2),

               TickerV,
               tick_entry,
               pw);
}

_kernel_oserror * callout_final(void * pw)
{
  _swix(OS_RemoveCallBack,
        _INR(0,1),

        callo_entry,
        pw);

  return _swix(OS_Release,
               _INR(0,2),

               TickerV,
               tick_entry,
               pw);
}

_kernel_oserror * tick_handler(_kernel_swi_regs * r, void * pw)
{
  struct callout * p1;
  int              needtocall = 0;

  (void)r;

  /*
   * Update real-time timeout queue.
   * At front of queue are some number of events which are ``due''.
   * The time to these is <= 0 and if negative represents the
   * number of ticks which have passed since it was supposed to happen.
   * The rest of the q elements (times > 0) are events yet to happen,
   * where the time for each is given as a delta from the previous.
   * Decrementing just the first of these serves to decrement the time
   * to all events.
   */

  p1 = calltodo.c_next;

  while (p1)
  {
    if (--p1->c_time > 0) break;

    needtocall = 1;

    if (p1->c_time == 0) break;

    p1 = p1->c_next;
  }

  if (needtocall && !callo_pending)
  {
    _kernel_oserror * e = _swix(OS_AddCallBack,
                                _INR(0,1),

                                callo_entry,
                                pw);

    if (!e) callo_pending = 1;
    /* else we_are_screwed() */
  }

  return NULL;
}

/*
 * callout handler
 */

_kernel_oserror * callo_handler(_kernel_swi_regs * r, void * pw)
{
  struct callout * p1;
  void           * arg;
  timeout_func_t   func;
  int              a;
  int              irqs_off;

  (void) r;
  (void) pw;

  callo_pending = 0;

  for (;;)
  {
    if ((p1 = calltodo.c_next) == 0 || p1->c_time > 0) return NULL;

    arg  = p1->c_arg;
    func = p1->c_func;
    a    = p1->c_time;

    irqs_off = _kernel_irqs_disabled();
    _kernel_irqs_off();

    calltodo.c_next = p1->c_next;
    p1->c_next      = callfree;
    callfree        = p1;

    if (!irqs_off) _kernel_irqs_on();

    (*func)(arg);
  }

  return NULL;
}

/*
 * Arrange that (*fun)(arg) is called in t cs.
 */

void timeout(timeout_func_t fun, void * arg, int t)
{
  struct callout * p1;
  struct callout * p2;
  struct callout * pnew;
  int    irqs_off;

  irqs_off = _kernel_irqs_disabled();
  _kernel_irqs_off();

  if (t <= 0) t = 1;

  pnew = callfree;

  if (pnew == NULL)
  {
    if (!irqs_off) _kernel_irqs_on();
    dprintf(("", "timeout: timeout table overflow!\n"));
    return;
  }

  callfree     = pnew->c_next;
  pnew->c_arg  = arg;
  pnew->c_func = fun;

  for (p1 = &calltodo; (p2 = p1->c_next) != NULL && p2->c_time < t; p1 = p2)
  {
    if (p2->c_time > 0) t -= p2->c_time;
  }

  p1->c_next   = pnew;
  pnew->c_next = p2;
  pnew->c_time = t;

  if (p2) p2->c_time -= t;

  if (!irqs_off) _kernel_irqs_on();

  return;
}

/*
 * untimeout is called to remove a function timeout call
 * from the callout structure.
 */

void untimeout(timeout_func_t fun, void *arg)
{
  struct callout * p1;
  struct callout * p2;
  int    irqs_off;

  irqs_off = _kernel_irqs_disabled();
  _kernel_irqs_off();

  for (p1 = &calltodo; (p2 = p1->c_next) != 0; p1 = p2)
  {
    if (p2->c_func == fun && p2->c_arg == arg)
    {
      if (p2->c_next && p2->c_time > 0)
      {
        p2->c_next->c_time += p2->c_time;
      }

      p1->c_next = p2->c_next;
      p2->c_next = callfree;
      callfree   = p2;

      break;
    }
  }

  if (!irqs_off) _kernel_irqs_on();

  return;
}
