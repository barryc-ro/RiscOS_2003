/**************************************************************/
/* File:    MoreInfo.c                                        */
/*          (C) 2002 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Implement RTSPHSAC_MoreInformation.               */
/*                                                            */
/* Author:  A.D.Hodgkinson. Based on URL_Fetcher source by    */
/*          S.N.Brodie and P. Wain.                           */
/*                                                            */
/* History: 08-Nov-1999 (ADH): Created.                       */
/*          25-Jul-2002 (ADH): Imported to RTSP HSAC from     */
/*                             RTSP OVS.                      */
/**************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Module.h"
#include "Utils.h"
#include "Session.h"
#include "RTSPHErrors.h"

#include "MoreInfo.h"

/**************************************************************/
/* moreinfo_more_information()                                */
/*                                                            */
/* Implement RTSPHSAC_MoreInformation. See the Video Control  */
/* specification, 2501,817/FS, for more.                      */
/**************************************************************/

_kernel_oserror * moreinfo_more_information(_kernel_swi_regs * r)
{
  session * s = session_find_by_id(r->r[1]);
  bool      read_async = ((r->r[0] & VC_MoreInformation_ReadAsyncMessage) != 0);
  bool      available;
  char    * data;
  int       data_len;

  dprintf(("Entry_0", "moreinfo_more_information: Called\n"));
  dprintf(("Entry_2", " r0=&%08x\n",r->r[0]));
  dprintf(("Entry_2", " r1=&%08x\n",r->r[1]));
  dprintf(("Entry_2", " r2=%d\n",r->r[2]));
  dprintf(("Entry_2", " r3=&%08x\n",r->r[3]));
  dprintf(("Entry_2", " r4=%d\n",r->r[4]));

  if (s == NULL)
  {
    dprintf(("Error_0", "moreinfo_more_information: ID not found\n"));

    return make_error(rtsphsac_ERROR_CLIENT_ID_NOT_FOUND, 0);
  }

  if (read_async)
  {
    available = (s->async_msg_list != NULL);
    if (available)
    {
      data = s->async_msg_list->data;
      data_len = s->async_msg_list->data_len;
    }
    else
    {
      data = NULL;
      data_len = 0;
    }
  }
  else
  {
    available = ((s->reported_state & VC_Status_MoreInformationAvailable) != 0);
    data = s->data;
    data_len = s->data_len;
  }

  if (r->r[2] == 0)
  {
    /* Read buffer size required */

    if (available) r->r[0] = data_len;
    else           r->r[0] = 0;
  }
  else if (r->r[2] == 1)
  {
    /* Write into given buffer. R3 = buffer address, R4 = size */

    if (
         !available    ||
         data_len == 0 ||
         r->r[3] == 0  ||
         r->r[4] < 1
       )
    {
      r->r[0] = r->r[1] = 0;
    }
    else
    {
      int copy;

      if (r->r[4] > data_len) copy = data_len;
      else                    copy = r->r[4];

      memcpy((void *) r->r[3], data, copy);

      if (copy < data_len)
      {
        void * newdata;

        memmove(data, data + copy, data_len - copy);

        newdata = module_realloc(data, data_len - copy);
        if (newdata != NULL)
        {
          if (read_async)
            s->async_msg_list->data = newdata;
          else
            s->data = newdata;
        }

        if (read_async)
          s->async_msg_list->data_len -= copy;
        else
          s->data_len -= copy;
      }
      else
      {
        /* Interrupt-safe */

        if (read_async)
        {
          async_message * m = s->async_msg_list;

          m->data     = NULL;
          m->data_len = 0;
          s->async_msg_list = m->next;
          free(m);
        }
        else
        {
          s->data     = NULL;
          s->data_len = 0;
        }

        free(data);
      }

      r->r[0] = data_len;
      r->r[1] = copy;
    }
  }

  dprintf(("Entry_0", "moreinfo_more_information: Returning\n"));
  dprintf(("Entry_2", " r0=%d\n",r->r[0]));
  dprintf(("Entry_2", " r1=%d\n",r->r[1]));

  return NULL;
}
