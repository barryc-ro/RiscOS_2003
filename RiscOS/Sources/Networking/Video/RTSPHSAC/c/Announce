/**************************************************************/
/* File:    Announce.c                                        */
/*          (C) 2002 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Handle ANNOUNCE messages.                         */
/*                                                            */
/* Author:  J.R.Byrne.                                        */
/*                                                            */
/* History: 02-Aug-2002 (JRB): Created.                       */
/**************************************************************/

#include <stdlib.h>
#include <string.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Generic.h"
#include "Global.h"
#include "Headers.h"
#include "MPEGCtrl.h"
#include "RTSPHErrors.h"
#include "Session.h"
#include "Status.h"
#include "Utils.h"

#include "Announce.h"

/**************************************************************/
/* announce_received()                                        */
/*                                                            */
/* Called by the state machine when an ANNOUNCE message is    */
/* received from the server.                                  */
/**************************************************************/

_kernel_oserror * announce_received(session * s)
{
  _kernel_oserror * e;
  session         * child;
  session         * parent;
  rtsp_header     * h;
  int               notice;
  session         * new_s;
  rtsp_header     * sess;
  rtsp_header     * cseq;
  bool              valid_session;
  bool              fail = false;

  dprintf(("", "announce_received: Called\n"));

  /* The session 's' may either be the main session (if the ANNOUNCE was */
  /* received when we were waiting for a command response), or the child */
  /* session (if it was received at any other time).                     */

  if (s->parent == NULL)
  {
    parent = s;
    child = s->child;
  }
  else
  {
    parent = s->parent;
    child = s;
  }

  /* Check that the session ID in the ANNOUNCE matches the current session */

  valid_session = false;  

  sess = headers_find_header(s->headers,
                          Headers_HeaderName_Session);

  if (sess != NULL)
  {
    char * p;

    /* Find the session ID. It'll be terminated by ';' or end of string */

    p = strchr(sess->value, ';');
    if (p != NULL) *p = '\0';

    /* Compare to current session ID */

    if (strcmp(sess->value, parent->server_session) == 0)
      valid_session = true;
  }

  /* Look for the Notice header to see what the server wants to tell us */

  h = headers_find_header(s->headers,
                          Headers_HeaderName_Notice);

  if (h != NULL)
    notice = atoi(h->value);
  else
    notice = 0;

  dprintf(("", "announce_received: Session is %s, Notice event code is %d\n", valid_session ? "valid" : "invalid", notice));

  /* For the time being, treat any code from 2000 as end-of-stream */

  if (valid_session && notice >= 2000)
  {
    if (parent->mpegid != 0)
    {
      e = _swix(MPEGControl_Play,
                _INR(0,1),

                MPEGCtrl_MCP_Bitstream_End,
                parent->mpegid);

      dprintf(("", "announce_received: Informed MPEGControl of EOS; error='%s'\n", (e == NULL) ? "<none>" : e->errmess));

      if (e != NULL)
        return e;
    }

    /* Immediately set the client play mode to the paused state */

    parent->playmode = MPEGCtrl_MCRS_Trick_Freeze;
  }

  /* For any messages other than normal end of stream, report as an */
  /* asynchronous message to the client.                            */

  if (valid_session && notice != 2101 && notice != 2104)
  {
    char * data;
    int    data_len;

    if (h != NULL)
    {
      /* If the ANNOUNCE had an HSAC 'Notice' header, report the value */
      /* of this header, rather than any body data (there won't be any */
      /* anyway.)                                                      */

      data = Strdup(h->value);
      if (data == NULL)
      {
        dprintf(("", "announce_received: Memory allocation failure from Strdup()\n"));
        return make_error(rtsphsac_ERROR_MEMORY_EXHAUSTED, 0);
      }
      data_len = strlen(data);
    }
    else
    {
      /* Otherwise report the body data, if any */

      data = s->data;
      data_len = s->data_len;

      s->data = NULL;
      s->data_len = 0;
    }

    /* Add the message to the parent's async message list */

    if (session_add_async_message(parent, data, data_len))
    {
      /* Notify Video Control */

      e = _swix(VideoControl_ProtocolNotify,
               _INR(0,2),
          
               0,
               parent->id,
               VideoControlProtocolNotifyMessageReceived);

      dprintf(("", "announce_received: Notified VideoControl of async message; error='%s'\n", (e == NULL) ? "<none>" : e->errmess));

      if (e != NULL)
        return e;
    }
    else
    {
      free(data);

      dprintf(("", "announce_received: Memory allocation failure from session_add_async_message()\n"));
      return make_error(rtsphsac_ERROR_MEMORY_EXHAUSTED, 0);
    }
  }

  /* We create a new transient session to send the response back to the   */
  /* server. This will be the child of the child session and will         */
  /* destroy itself as soon as the response is sent. If the child         */
  /* already has a child (very unlikely, but it could happen if we get a  */
  /* second ANNOUNCE before we've had time to send the response to the    */
  /* first one), then we add a new child. When the state machine finishes */
  /* sending the first response, it will move on to the next child in the */
  /* chain.                                                               */

  e = session_new_session(&new_s);

  if (e)
  {
    dprintf(("", "announce_received: session_new_session error '%s'\n", e->errmess));
    return e;
  }

  if (new_s == NULL)
  {
    dprintf(("", "announce_received: Out of memory for new_s\n"));
    return make_error(rtsphsac_ERROR_MEMORY_EXHAUSTED, 0);
  }

  /* Find the end of the chain of children */

  while (child->child != NULL)
    child = child->child;

  new_s->id     = ++id_counter; /* See Global.h */
  new_s->parent = child;
  child->child  = new_s;

  /* New child session uses parent's socket */

  new_s->sd = parent->sd;

  /* Ensure everything is initialised for a new command in this clean session */

  session_reset_session(new_s);

  /* Our response is either '200 OK' or '454 Session Not Found' */

  new_s->response_code = valid_session ? 200 : 454;

  /* Find the sequence number for the response */

  cseq = headers_find_header(s->headers,
                          Headers_HeaderName_Sequence);

  /* Add the response status line */

  if (
       headers_add_header(&new_s->headers,
                          Headers_Supported,
                          valid_session ? Headers_ResponseValue_200 : Headers_ResponseValue_454)

       == NULL
     )
     fail = true;

  /* Add the CSeq header */

  else if (
            cseq != NULL &&
            headers_add_header(&new_s->headers,
                               Headers_HeaderName_Sequence,
                               cseq->value)

            == NULL
          )
          fail = true;

  /* Add the session header */

  else if (
            sess != NULL &&                                       
            headers_add_header(&new_s->headers,
                               Headers_HeaderName_Session,        
                               sess->value)                       
                                                                  
            == NULL                                               
          )                                                       
          fail = true;                                            

  if (fail)
  {
    dprintf(("", "announce_received: Out of memory\n"));

    session_free_item(new_s);

    return make_error(rtsphsac_ERROR_MEMORY_EXHAUSTED, 0);
  }

  /* Set the new child session to self-destruct once the response has */
  /* been sent (or has failed for some reason).                       */

  new_s->destruct = 1;

  /* Send the response */

  return status_send(new_s);
}
