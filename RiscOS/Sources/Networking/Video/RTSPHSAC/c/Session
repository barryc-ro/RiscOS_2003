/**************************************************************/
/* File:    Session.c                                         */
/*          (C) 2002 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Manage our local sessions with Video Control.     */
/*                                                            */
/* Author:  Originally S.N.Brodie in the Generic fetcher.     */
/*          Adapted by A.D.Hodgkinson.                        */
/*                                                            */
/* History: 23-Nov-1999 (ADH): Created from scratch.          */
/*          30-Nov-1999 (ADH): More or less replaced the      */
/*                             entire contents with Generic's */
/*                             session adapted handling code. */
/*          25-Jul-2002 (ADH): Imported to RTSP HSAC from     */
/*                             RTSP OVS.                      */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#include <swis.h>
#include <sys/errno.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <VideoCtrl.h> /* Exported by VideoCtrl's !MkExport */

#include "Callout.h"
#include "Generic.h"
#include "Headers.h"
#include "Module.h"
#include "Play.h"
#include "RTSPHErrors.h"
#include "Status.h"
#include "Teardown.h"
#include "Utils.h"

#include "Session.h"

/* Local data */

static session * session_list = NULL;

/* Local functions */

static void session_free_item_data (session * s);
static void session_free_async_messages (session * ses);

/**************************************************************/
/* session_return_head()                                      */
/*                                                            */
/* Find out the head of the list of session structures.       */
/*                                                            */
/* Returns:    Pointer to the first item in the list. Follow  */
/*             'next' pointers to traverse that list. Will    */
/*             give NULL if there are no sessions.            */
/**************************************************************/

session * session_return_head(void)
{
  return session_list;
}

/**************************************************************/
/* session_find_by_id()                                       */
/*                                                            */
/* Find a session structure based on a session ID.            */
/*                                                            */
/* Parameters: ID to find.                                    */
/*                                                            */
/* Returns:    Pointer to the session struct relevant to that */
/*             ID, or NULL if the ID is not found.            */
/**************************************************************/

session * session_find_by_id(unsigned int id)
{
  session * ses;

  for (ses = session_list; ses; ses = ses->next)
  {
    if (ses->id == id) return ses;
  }

  return NULL;
}

/**************************************************************/
/* session_find_by_vcid()                                     */
/*                                                            */
/* Find a session structure based on Video Control client     */
/* session ID. Child sessions are ignored.                    */
/*                                                            */
/* Parameters: ID to find.                                    */
/*                                                            */
/* Returns:    Pointer to the session struct relevant to that */
/*             ID, or NULL if the ID is not found.            */
/**************************************************************/

session * session_find_by_vcid(unsigned int vcid)
{
  session * ses;

  for (ses = session_list; ses; ses = ses->next)
  {
    if (ses->vcid == vcid && ses->parent == NULL) return ses;
  }

  return NULL;
}

/**************************************************************/
/* session_new_session()                                      */
/*                                                            */
/* Create a new session, taking into account starting the     */
/* session list.                                              */
/*                                                            */
/* Parameters: Pointer to a session struct pointer which is   */
/*             updated to point to the new structure.         */
/*                                                            */
/* Returns:    If the function generates an error it returns  */
/*             it directly. If it runs out of memory, it'll   */
/*             merely return update the parameter pointer     */
/*             with NULL and also return NULL. ALWAYS check   */
/*             for the directly reported error FIRST.         */
/**************************************************************/

_kernel_oserror * session_new_session(session ** rs)
{
  _kernel_oserror * e;
  session         * ses = calloc(1, sizeof(session));

  if (ses == NULL)
  {
    *rs = NULL;
    return NULL;
  }

  ses->sd = -1;
  ses->state = protostate_INITIAL;

  e = session_link_new_item(ses);

  if (e != NULL)
  {
    *rs = NULL;
    free(ses);
    return e;
  }
  else
  {
    *rs = ses;
    return NULL;
  }
}

/**************************************************************/
/* session_link_new_item()                                    */
/*                                                            */
/* Given a new session struct, link it into the tail of the   */
/* session list.                                              */
/*                                                            */
/* Parameters: Pointer to the new item.                       */
/*                                                            */
/* Assumes:    The parameter pointer is non-NULL and valid.   */
/**************************************************************/

_kernel_oserror * session_link_new_item(session * ses)
{
  if (session_list == NULL)
  {
    /* No list so create a new one */

    session_list = ses;

    #ifndef ALWAYS_CLAIM_EVENTV

      /* Need to start listening for the Internet event too */

      dprintf(("", "session_link_new_item: Claiming EventV\n"));

      {
        _kernel_oserror * e = module_claim_event_vector();

        if (e != NULL) return e;

        dprintf(("", "session_link_new_item: Enabling Internet event\n"));

        module_enable_internet_event();
      }

    #endif
  }
  else
  {
    /* Else find end of list and add an element */

    session * s;

    for (s = session_list; s->next; s = s->next);
    s->next = ses;
  }

  return NULL;
}

/**************************************************************/
/* session_remove_callouts()                                  */
/*                                                            */
/* Remove all pending callouts for a session.                 */
/*                                                            */
/* Parameters: Pointer to the session structure to process.   */
/*                                                            */
/*             Whether or not to remove the main state        */
/*             machine callout as well as all the others.     */
/**************************************************************/

void session_remove_callouts(session * s, bool state_machine_too)
{
  int irqs_off = _kernel_irqs_disabled();

  _kernel_irqs_off();

  if (s->callout_set != 0 && state_machine_too)
  {
    s->callout_set = 0;
    untimeout(status_proceed_on_callout, s);
  }

  if (s->ping_set != 0)
  {
    s->ping_set = 0;
    untimeout(status_ping_on_callout, s);
  }

  if (s->teardown_wait != 0)
  {
    s->teardown_wait = 0;
    untimeout(teardown_retry_delayed_on_callout, s);
  }

  if (!irqs_off) _kernel_irqs_on();
}

/**************************************************************/
/* session_reset_session()                                    */
/*                                                            */
/* "Reset" a session structure, so that, assuming it has      */
/* already been used for an RTSP command, it may be used for  */
/* another (e.g. between SETUP and PLAY).                     */
/*                                                            */
/* This does things like freeing response headers and data,   */
/* resetting status back to initial / unconnected, etc. etc.  */
/*                                                            */
/* Parameters: Pointer to the session structure to reset.     */
/**************************************************************/

void session_reset_session(session * s)
{
  /* Stop the main state machine callout for this session */

  if (s->callout_set != 0)
  {
    s->callout_set = 0;
    untimeout(status_proceed_on_callout, s);
  }

  s->reported        = 0; /* Clear the "we've reported an error to Video Control" flag */
  s->reported_state  = 0;
  s->response_code   = 0;
  s->data_len        = 0, free(s->data),         s->data         = NULL;
  s->data_to_read    = -1;
  s->reqlen          = 0, free(s->full_request), s->full_request = NULL;
  s->reqptr          = 0;
  s->connected_cb    = NULL;
  s->next_command_cb = NULL;
  s->async_error     = NULL;

  headers_free_headers(&s->headers), s->headers = NULL;
  session_free_async_messages(s);
}

/**************************************************************/
/* session_free_item_data()                                   */
/*                                                            */
/* Release any memory associated with a session structure,    */
/* including that structure itself.                           */
/*                                                            */
/* The function is designed to be paranoid and will wipe the  */
/* area of memory occupied by the structure before freeing.   */
/*                                                            */
/* Re-entrancy must be maintained since a session may delete  */
/* its own child from here.                                   */
/*                                                            */
/* Parameters: Pointer to the item to free (discard).         */
/*                                                            */
/* Assumes:    The parameter pointer is non-NULL and valid.   */
/**************************************************************/

static void session_free_item_data(session * s)
{
  session_remove_callouts(s, true);

  if (s->child)  session_free_item(s->child);
  if (s->parent) s->parent->child = NULL;

  if (s->parent == NULL || s->parent->sd != s->sd) close_socket(&s->sd);

  headers_free_headers(&s->headers);
  urlutils_free_description(s->url);
  session_free_async_messages(s);
  free(s->full_request);
  free(s->play_record);
  free(s->range_record);
  free(s->data);
  free(s->server_session);
  free(s->saved_r3);
  free(s->saved_r4);
  free(s->saved_r5);
  free(s->teardown_r4);
  free(s->teardown_r5);

  memset(s, 0xff, sizeof(*s)); /* Let's be careful */
  free(s);
}

/**************************************************************/
/* session_free_item()                                        */
/*                                                            */
/* Discard a session in the session list cleanly.             */
/*                                                            */
/* Must be re-entrant (see session_free_item_data too).       */
/*                                                            */
/* Parameters: Pointer to the item to discard.                */
/*                                                            */
/* Assumes:    The parameter pointer is non-NULL and valid.   */
/**************************************************************/

void session_free_item(session * ses)
{
  session * s      = session_list;
  session * prev_s = NULL;
  bool      found  = false;

  for (s = session_list; s; prev_s = s, s = s->next)
  {
    if (s == ses)
    {
      int irqs_off = _kernel_irqs_disabled();

      _kernel_irqs_off();

      found = true;
      s->dying = 1;

      if (prev_s == NULL)
      {
        session_list = s->next;
      }
      else
      {
        prev_s->next = s->next;
      }

      if (!irqs_off) _kernel_irqs_on();

      session_free_item_data(ses);

      break;
    }
  }

  #ifndef ALWAYS_CLAIM_EVENTV

    /* Release EventV? Note that we may have already done this during */
    /* module_atexit, but flags in the calls ensure that being called */
    /* multiple times isn't a problem.                                */

    if (found && session_list == NULL)
    {
      dprintf(("", "session_free_item: Disabling Internet event, releasing EventV\n"));

      module_disable_internet_event();
      module_release_event_vector();
    }

  #endif

  #ifdef TRACE2
    dprintf(("", "\nsession_free_item: %p freed. Dump of session chain:\n", ses));
    for (s = session_list; s; s = s->next)
    {
      dprintf(("", "session_free_item: %p (socket %d) URL %s\n", s, s->sd, s->url ? s->url->full : "<none>"));
    }
    dprintf(("", "session_free_item: End of session chain\n\n"));
  #endif
}

/**************************************************************/
/* session_free_list()                                        */
/*                                                            */
/* Discard all sessions in the session list (e.g. for module  */
/* shutdown).                                                 */
/**************************************************************/

void session_free_list(void)
{
  while (session_list)
  {
    session_free_item(session_list);
  }
}

/**************************************************************/
/* session_add_async_message()                                */
/*                                                            */
/* Add an asynchronous message to a session's list.           */
/*                                                            */
/* Parameters: Pointer to the session.                        */
/*                                                            */
/*             Pointer to the message data.                   */
/*                                                            */
/*             The length of the message data.                */
/*                                                            */
/* Returns:    True for success, false for memory allocation  */
/*             error.                                         */
/**************************************************************/

bool session_add_async_message(session * ses, char * data, int data_len)
{
  async_message * m = malloc(sizeof(async_message));

  if (m == NULL)
    return false;

  m->next = NULL;
  m->data = data;
  m->data_len = data_len;

  if (ses->async_msg_list == NULL)
  {
    /* First item on list */

    ses->async_msg_list = m;
  }
  else
  {
    /* Else find end of list and add an element */

    async_message * p;

    for (p = ses->async_msg_list; p->next; p = p->next);
    p->next = m;
  }

  return true;
}

/**************************************************************/
/* session_free_async_messages()                              */
/*                                                            */
/* Discard a session's list of asynchronous messages.         */
/*                                                            */
/* Parameters: Pointer to the relevant session.               */
/*                                                            */
/* Assumes:    The session pointer is non-NULL and valid.     */
/**************************************************************/

static void session_free_async_messages(session * ses)
{
  async_message * p, * next;

  for (p = ses->async_msg_list; p; p = next)
  {
    next = p->next;
    p->data_len = 0;
    free(p->data);
    p->data = NULL;
    free(p);
  }

  ses->async_msg_list = NULL;
}
