/**************************************************************/
/* File:    Setup.c                                           */
/*          (C) 2002 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Implement RTSPHSAC_Setup.                         */
/*                                                            */
/* Author:  A.D.Hodgkinson. Based on URL_Fetcher source by    */
/*          S.N.Brodie and P. Wain.                           */
/*                                                            */
/* History: 08-Nov-1999 (ADH): Created.                       */
/*          25-Jul-2002 (ADH): Imported to RTSP HSAC from     */
/*                             RTSP OVS.                      */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#include <swis.h>
#include <socklib.h>
#include <inetlib.h>
#include <sys/types.h>
#include <sys/socket.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <VideoCtrl.h> /* Exported by VideoCtrl's !MkExport */

#include "CallOut.h"
#include "Connect.h"
#include "Generic.h"
#include "Global.h"
#include "Headers.h"
#include "Module.h"
#include "RTSPHErrors.h"
#include "Session.h"
#include "Status.h"
#include "URLutils.h"
#include "URLveneer.h"
#include "Utils.h"

#include "Setup.h"

/* Local functions */

static _kernel_oserror * setup_send_options         (session * s);
static _kernel_oserror * setup_options_done         (session * s);
static _kernel_oserror * setup_send_setup           (session * s);
static void              setup_remove_specifier     (char * s, const char * specifier);
static _kernel_oserror * setup_add_transport_header (session * s);

/**************************************************************/
/* setup_setup()                                              */
/*                                                            */
/* Implement RTSPHSAC_Setup. See the Video Control            */
/* specification, 2501,817/FS, for more.                      */
/**************************************************************/

_kernel_oserror * setup_setup(_kernel_swi_regs * r)
{
  _kernel_oserror * e;
  session         * s;
  session         * child;
  char            * url;
  bool              fail = false;

  dprintf(("Entry_0", "setup_setup: Called\n"));
  dprintf(("Entry_1", " r0=&%08x\n",r->r[0]));
  dprintf(("Entry_1", " r1=&%08x\n",r->r[1]));
  dprintf(("Entry_1", " r2='%s'\n",r->r[2] ? (char *)r->r[2] : "NULL"));
  dprintf(("Entry_1", " r3='%s'\n",r->r[3] ? (char *)r->r[3] : "NULL"));
  dprintf(("Entry_1", " r4='%s'\n",r->r[4] ? (char *)r->r[4] : "NULL"));
  dprintf(("Entry_1", " r5=&%08x\n",r->r[5]));
  dprintf(("Entry_1", " r6=&%08x\n",r->r[6]));
  dprintf(("Entry_1", " r7=&%08x\n",r->r[7]));

  /* Just in case, make sure we're not already set up */

  if (session_find_by_id(r->r[1]) != NULL)
  {
    dprintf(("", "setup_setup: Already set up\n"));
    return make_error(rtsphsac_ERROR_ALREADY_SETUP, 0);
  }

  /* Gain ourselves two sessions (parent and child) */

  e = session_new_session(&s);

  if (e == NULL && s != NULL)
  {
    e = session_new_session(&child);
    if (e != NULL || child == NULL)
      session_free_item(s);
  }

  if (e != NULL)
  {
    dprintf(("", "setup_setup: session_new_session error '%s'\n", e->errmess));
    return e;
  }

  if (s == NULL || child == NULL)
  {
    dprintf(("", "setup_setup: Out of memory\n"));
    return make_error(rtsphsac_ERROR_MEMORY_EXHAUSTED, 0);
  }

  s->id     = ++id_counter; /* See Global.h */
  child->id = ++id_counter;

  s->vcid = (unsigned int) r->r[1];
  s->child = child;
  child->parent = s;

  /* Child session is there to receive asynchronous messages - set initial state */

  session_reset_session(child);
  child->state = protostate_RECEIVING_ASYNC;

  /* Fill in the new item */

  if (r->r[2] != 0) url = (char *) r->r[2];
  else              url = "";

  e = urlutils_return_description(url, &s->url);

  if (e != NULL)
  {
    dprintf(("", "setup_setup: Error '%s' from urlutils_return_description\n", e->errmess));
    session_free_item(s);
    return e;
  }

  if (s->url == NULL) fail = true;

  /* Annoyingly, we're delaying the SETUP command; so must take copies of */
  /* any user Transport header, extension headers or body data (R3-R6).   */

  free(s->saved_r3), s->saved_r3 = NULL;
  free(s->saved_r4), s->saved_r4 = NULL;
  free(s->saved_r5), s->saved_r5 = NULL;
  s->saved_r6 = 0;

  if (r->r[3] != 0)
  {
    s->saved_r3 = Strdup((char *) r->r[3]);
    if (s->saved_r3 == NULL)
      fail = true;
  }

  if (r->r[4] != 0)
  {
    s->saved_r4 = Strdup((char *) r->r[4]);
    if (s->saved_r4 == NULL)
      fail = true;
  }

  if (r->r[5] != 0 && r->r[6] != 0)
  {
    s->saved_r6 = r->r[6];
    s->saved_r5 = malloc(r->r[6]);

    if (s->saved_r5 == NULL)
      fail = true;
    else
      memcpy(s->saved_r5, (void *) r->r[5], r->r[6]);
  }

  if (fail)
  {
    /* Memory allocation failure */

    dprintf(("", "setup_setup: Out of memory\n"));
    e = make_error(rtsphsac_ERROR_MEMORY_EXHAUSTED, 0);
  }
  else
  {
    /* OK, send the OPTIONS command */
  
    e = setup_send_options(s); /* This queues SETUP on completion */
  }

  if (e == NULL)
  {
    /* Don't forget to tell Video Control about our session handle */
    /* before returning                                            */
  
    r->r[1] = (int) s->id;
  }
  else
  {
    /* Failed - discard session and return error */

    session_free_item(s);
  }

  return e;
}

/**************************************************************/
/* setup_send_options()                                       */
/*                                                            */
/* Build an OPTIONS command and start the state machine up in */
/* order to send it. A SETUP command is queued for sending    */
/* when the OPTIONS response is received.                     */
/*                                                            */
/* Parameters: Pointer to the session structure representing  */
/*             the session for which an OPTIONS command needs */
/*             to be sent.                                    */
/**************************************************************/

static _kernel_oserror * setup_send_options(session * s)
{
  bool fail = false;

  session_reset_session(s);

  /* Add the OPTIONS command */

  if (
       headers_add_header(&s->headers,
                          Headers_CommandName_Options,
                          "*")
       == NULL
     )
     fail = true;

  /* Add sequence number */

  else if (headers_add_sequence_header(&s->headers) == NULL) fail = true;

  /* Require */

  else if (
            headers_add_header(&s->headers,
                               Headers_HeaderName_Require,
                               Headers_HeaderValue_Require)
            == NULL
          )
          fail = true;

  /* Connection (see note below in setup_options_done()) */

  else if (
            headers_add_header(&s->headers,
                               Headers_HeaderName_Connection,
                               Headers_HeaderValue_Connection)
            == NULL
          )
          fail = true;

  /* Did anything fail (out of memory)? */

  if (fail)
  {
    dprintf(("", "setup_send_options: Out of memory\n"));
    return make_error(rtsphsac_ERROR_MEMORY_EXHAUSTED, 0);
  }

  /* Queue the routine that checks the OPTIONS response */

  s->next_command_cb = setup_options_done;

  /* Send the OPTIONS command to the server */

  return status_send(s);
}

/**************************************************************/
/* setup_options_done()                                       */
/*                                                            */
/* This is called when the response to the OPTIONS command    */
/* is received. It parses the OPTIONS response, then builds   */
/* the SETUP command that gets issued next.                   */
/*                                                            */
/* Parameters: Pointer to the session structure representing  */
/*             the session for which a SETUP command needs to */
/*             be sent.                                       */
/**************************************************************/

static _kernel_oserror * setup_options_done(session * s)
{
  rtsp_header * sver;
  bool          good_version = false;

  /* Clear the command chain */

  s->next_command_cb = NULL;

  /* The connection is closed after the OPTIONS command. This is because   */
  /* the NEC server closes it automatically for commands before SETUP that */
  /* don't return status 200, even if you don't say 'Connection: close'.   */
  /* To work around this we always send OPTIONS on a transient connection. */

  close_socket(&s->sd);

  /* If the OPTIONS response was 551, it means that 'x-playNow' is not  */
  /* supported. For any other error, give up now and return this status */
  /* to the caller.                                                     */

  if (s->response_code == 200)
    s->use_playnow = 1;
  else if (s->response_code != 551)
    return NULL;

  /* Look for the HSAC 'VersionSupport' header in the response */

  sver = headers_find_header(s->headers, Headers_HeaderName_VersionSupport);
  if (sver != NULL)
  {
    if (!strncmp(sver->value, Headers_HeaderValue_VersionSupport, sizeof(Headers_HeaderValue_VersionSupport) - 1))
      good_version = true;
  }

  /* Give up if we don't recognise the protocol version */

  if (!good_version)
    return make_error(rtsphsac_ERROR_UNKNOWN_VERSION, 0);

  /* Success - now send the SETUP */

  return setup_send_setup(s);
}

/**************************************************************/
/* setup_send_setup()                                         */
/*                                                            */
/* Build a SETUP command and start the state machine up in    */
/* order to send it.                                          */
/*                                                            */
/* Parameters: Pointer to the session structure representing  */
/*             the session for which a SETUP command needs to */
/*             be sent.                                       */
/**************************************************************/

static _kernel_oserror * setup_send_setup(session * s)
{
  bool fail = false;

  /* Reset ready for the next command */

  session_reset_session(s);

  /* Add the SETUP command */

  if (
       headers_add_header(&s->headers,
                          Headers_CommandName_Setup,
                          s->url->full)
       == NULL
     )
     fail = true;

  /* Add sequence number and "x-prepareAssets" command to avoid DESCRIBE */

  else if (headers_add_sequence_header(&s->headers) == NULL) fail = true;

  else if (
            headers_add_header(&s->headers,
                               Headers_HeaderName_Prepare,
                               Headers_HeaderValue_Prepare)
            == NULL
          )
          fail = true;

  else
  {
    /* Get extra data from the client and store it. First, */
    /* the optional Transport entry.                       */

    if (s->saved_r3 != NULL)
    {
      /* If the custom header has 'destination' or 'client_port' specifiers */
      /* then remove them, on the grounds that we know best what these      */
      /* should be.                                                         */

      setup_remove_specifier(s->saved_r3, Headers_HeaderValue_TransportDst);
      setup_remove_specifier(s->saved_r3, Headers_HeaderValue_TransportPort);

      if (
           headers_add_header(&s->headers,
                              Headers_HeaderName_Transport,
                              s->saved_r3)
           == NULL
         )
         fail = true;

      free(s->saved_r3), s->saved_r3 = NULL;
    }

    /* We find the local IP address to give in the Transport header */
    /* using getsockname on the socket - once it's connected. So,   */
    /* set the connection callback function to do just that.        */

    s->connected_cb = setup_add_transport_header;

    /* Any extra stuff? */

    if (fail == false && s->saved_r4 != NULL)
    {
      headers_parse_user_header(s->saved_r4, strlen(s->saved_r4), s);
    }

    /* Support R5 and R6 body data extensions. */

    if (s->saved_r5 != NULL && s->saved_r6 > 0)
    {
      s->data     = s->saved_r5, s->saved_r5 = NULL;
      s->data_len = s->saved_r6, s->saved_r6 = 0;

      if (headers_set_content_length(&s->headers, s->data_len) == NULL)
        fail = true;
    }
  }

  /* Did anything fail (out of memory)? */

  if (fail)
  {
    dprintf(("", "setup_send_setup: Out of memory\n"));
    return make_error(rtsphsac_ERROR_MEMORY_EXHAUSTED, 0);
  }

  return status_send(s);
}

/**************************************************************/
/* setup_remove_specifier()                                   */
/*                                                            */
/* Remove a given specifier from a header value. This is used */
/* to remove things from the user specified transport header  */
/* value which we don't want the user specifying.             */
/*                                                            */
/* Parameters: The header string to process.                  */
/*                                                            */
/*             The specifier to remove (with leading ';')     */
/**************************************************************/

static void setup_remove_specifier(char * s, const char * specifier)
{
  char * p, * q;

  p = strstr(s, specifier);
  if (p != NULL)
  {
    q = strchr(p+1, ';');

    if (q == NULL)
      *p = 0;
    else
      memmove(p, q, strlen(q));
  }
}

/**************************************************************/
/* setup_add_transport_header()                               */
/*                                                            */
/* Add a Transport header to the headers in the given session */
/* just after the head item (assumes at least one header will */
/* be set up - the SETUP command itself, for example).        */
/*                                                            */
/* This is done on the basis of getsockname for the socket    */
/* held by the session (so you must have connected to a       */
/* server). The function is intended as a state machine       */
/* socket connection callback handler.                        */
/*                                                            */
/* Parameters: Pointer to the session struct.                 */
/**************************************************************/

static _kernel_oserror * setup_add_transport_header(session * s)
{
  struct        sockaddr_in name;
  int           namelen = sizeof(name);
  rtsp_header * current;

  dprintf(("", "setup_add_transport_header: Called for %p\n", s));

  /* Find the existing header, if any */

  current = headers_find_header(s->headers, Headers_HeaderName_Transport);

  /* Use getsockname to get our IP address for the destination part */
  /* of the Transport header, and add it in.                        */

  if (getsockname(s->sd, (struct sockaddr *) (&name), &namelen) >= 0)
  {
    bool   fail = false;
    char * ip;
    char * port;
    size_t len;
    char * value;

    ip = inet_ntoa(name.sin_addr);

    dprintf(("", "setup_add_transport_header: Our IP address is %s\n", ip));

    port = getenv(Headers_UDP_Port);
    if (port != NULL && (*port == 0 || strlen(port) > 5))
      port = NULL;

    if (current == NULL)
      len = sizeof(Headers_HeaderValue_Transport);
    else
      len = strlen(current->header) + 1;  /* Include NUL */

    len += sizeof(Headers_HeaderValue_TransportDst) - 1 + strlen(ip);

    if (port != NULL)
      len += sizeof(Headers_HeaderValue_TransportPort) - 1 + strlen(port);

    value = malloc(len);

    if (value == NULL) fail = true;
    else
    {
      /* Compile the full header value, including port */

      if (current == NULL)
        len = sprintf(value, Headers_HeaderValue_Transport Headers_HeaderValue_TransportDst "%s", ip);
      else
        len = sprintf(value, "%s" Headers_HeaderValue_TransportDst "%s", current->value, ip);

      if (port != NULL)
        len += sprintf(value + len, Headers_HeaderValue_TransportPort "%s", port);

      /* Delete the old header, if any */

      if (current != NULL)
        headers_delete_header(&s->headers, current);

      /* Add the new header */

      if (
           s->headers == NULL ||
           headers_add_below_head(&s->headers,
                                  Headers_HeaderName_Transport,
                                  value)
           == NULL
         )
      {
        fail = true;
      }
  
      free(value);
    }

    /* Handle failure, else the headers are all assembled correctly now. */

    if (fail)
    {
      dprintf(("", "setup_add_transport_header: Failed (out of memory)\n"));

      return make_error(rtsphsac_ERROR_MEMORY_EXHAUSTED, 0);
    }
  }

  dprintf(("", "setup_add_transport_header: Finished\n"));

  return NULL;
}
