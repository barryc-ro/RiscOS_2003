/**************************************************************/
/* File:    TearDown.c                                        */
/*          (C) 2002 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Implement RTSPHSAC_TearDown.                      */
/*                                                            */
/* Author:  A.D.Hodgkinson. Based on URL_Fetcher source by    */
/*          S.N.Brodie and P. Wain.                           */
/*                                                            */
/* History: 09-Nov-1999 (ADH): Created.                       */
/*          25-Jul-2002 (ADH): Imported to RTSP HSAC from     */
/*                             RTSP OVS.                      */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <VideoCtrl.h>

#include "CallOut.h"
#include "Connect.h"
#include "Generic.h"
#include "Headers.h"
#include "Module.h"
#include "MPEGCtrl.h"
#include "Play.h"
#include "RTSPHErrors.h"
#include "Session.h"
#include "Status.h"
#include "Utils.h"

#include "TearDown.h"

/* Local functions */

static _kernel_oserror * teardown_tear_down_session (session * s);
static _kernel_oserror * teardown_send_teardown     (session * s);
static _kernel_oserror * teardown_build_teardown    (session * s);

/**************************************************************/
/* teardown_tear_down()                                       */
/*                                                            */
/* Implement RTSPHSAC_TearDown. See the Video Control         */
/* specification, 2501,817/FS, for more.                      */
/**************************************************************/

_kernel_oserror * teardown_tear_down(_kernel_swi_regs * r)
{
  _kernel_oserror * e = NULL;
  session         * s = session_find_by_id(r->r[1]);
  bool              fail = false;

  dprintf(("Entry_0", "teardown_tear_down: Called\n"));
  dprintf(("Entry_1", " r0=&%08x\n",r->r[0]));
  dprintf(("Entry_1", " r1=&%08x\n",r->r[1]));
  dprintf(("Entry_1", " r2=&%08x\n",r->r[2]));
  #ifdef TRACE
  if (r->r[0] & VC_TearDown_R4ThroughR7AreValid)
  {
    dprintf(("Entry_1", " r4='%s'\n",r->r[4] ? (char *)r->r[4] : "NULL"));
    dprintf(("Entry_1", " r5=&%08x\n",r->r[5]));
    dprintf(("Entry_1", " r6=&%08x\n",r->r[6]));
    dprintf(("Entry_1", " r7=&%08x\n",r->r[7]));
  }
  #endif

  if (s == NULL)
  {
    dprintf(("", "teardown_tear_down: ID not found\n"));

    return make_error(rtsphsac_ERROR_CLIENT_ID_NOT_FOUND, 0);
  }

  /* Set the session IDs to zero. This will prevent us from telling   */
  /* VideoControl anything when any foreground command completes, and */
  /* will mean that this session number is no longer valid if any of  */
  /* our entry points are called.                                     */

  s->id = 0;
  s->vcid = 0;

  /* Set the server timeout value to zero to prevent server pinging callouts */

  s->server_timeout = 0;

  /* Clear all outstanding callouts, except the main state machine one */

  session_remove_callouts(s, false);

  /* Make a copy of the extra data from the client, if any.   */
  /* If an allocation fails, we still try to do the TEARDOWN. */

  free(s->teardown_r4), s->teardown_r4 = NULL;
  free(s->teardown_r5), s->teardown_r5 = NULL;
  s->teardown_r6 = 0;

  if ((r->r[0] & VC_TearDown_R4ThroughR7AreValid) != 0)
  {
    if (r->r[4] != 0)
    {
      s->teardown_r4 = Strdup((char *) r->r[4]);
      if (s->teardown_r4 == NULL)
        fail = true;
    }
  
    if (r->r[5] != 0 && r->r[6] != 0)
    {
      s->teardown_r5 = malloc(r->r[6]);
  
      if (s->teardown_r5 == NULL)
      {
        fail = true;
      }
      else
      {
        memcpy(s->teardown_r5, (char *) r->r[5], r->r[6]);
        s->teardown_r6 = r->r[6];
      }
    }
  }

  if (fail)
  {
    /* Memory allocation failure - note that we still try to do the teardown */

    dprintf(("", "teardown_tear_down: Out of memory\n"));
    e = make_error(rtsphsac_ERROR_MEMORY_EXHAUSTED, 0);
  }

  /* Do we need to wait for a foreground command? */

  if (
      s->state == protostate_DNS              ||
      s->state == protostate_CONNECTED        ||
      s->state == protostate_SENDING          ||
      s->state == protostate_RECEIVING
     )
  {
    /* A foreground command is in progress. We need to wait for this to */
    /* finish before we can send the TEARDOWN.                          */

    dprintf(("", "teardown_tear_down: Command in progress, have to wait\n"));

    /* Clear the command chain because we only want to wait until the */
    /* current command completes.                                     */

    s->next_command_cb = NULL;

    /* Set retry callout */

    s->teardown_wait = 1;
    timeout(teardown_retry_delayed_on_callout, s, Session_State_Retry);

    dprintf(("", "teardown_tear_down: Retry call set up\n"));
  }
  else
  {
    RetError(teardown_tear_down_session(s));
  }

  return e;
}

/**************************************************************/
/* teardown_tear_down_session()                               */
/*                                                            */
/* Do the work of tearing down a session. This is called when */
/* we know there are no server commands in progress.          */
/**************************************************************/

static _kernel_oserror * teardown_tear_down_session(session * s)
{
  /* Is there a server session to be torn down? */

  if (s->server_session == NULL)
  {
    dprintf(("", "teardown_tear_down_session: No server session so freeing now\n"));

    session_free_item(s);
    return NULL;
  }

  /* Ensure everything is reset for a new command */

  session_reset_session(s);

  if (s->started != 0 && s->playmode != MPEGCtrl_MCRS_Trick_Freeze)
  {
    /* If the stream is currently playing, the HSAC specification   */
    /* says we should send a PAUSE before the TEARDOWN. Seems a bit */
    /* pointless, but...                                            */

    s->next_command_cb = teardown_send_teardown ;
    RetError(play_build_pause(s));
  }
  else
  {
    RetError(teardown_build_teardown(s));
  }

  /* Send the command */

  dprintf(("", "teardown_tear_down_session: Successful; exitting through status_send\n"));

  return status_send(s);
}

/**************************************************************/
/* teardown_send_teardown()                                   */
/*                                                            */
/* Called only ever as a callback_fn_ptr (see Session.h).     */
/*                                                            */
/* This is the chained after a PAUSE to send a TEARDOWN       */
/* command to the server and tear down a session.             */
/*                                                            */
/* Parameters: Pointer to a session that just completed a     */
/*             successful PAUSE command.                      */
/**************************************************************/

static _kernel_oserror * teardown_send_teardown(session * s)
{
  dprintf(("", "teardown_send_teardown: Called for &%08X\n", (int) s));

  /* Ensure everything is reset for a new command */

  session_reset_session(s);

  /* Build the command */

  RetError(teardown_build_teardown(s));

  /* Send the command */

  dprintf(("", "teardown_send_teardown: Exitting through status_send()\n"));

  return status_send(s);
}

/**************************************************************/
/* teardown_build_teardown()                                  */
/*                                                            */
/* Build a TEARDOWN command to tear down a session. Called    */
/* when we know there are no server commands in progress.     */
/**************************************************************/

static _kernel_oserror * teardown_build_teardown(session * s)
{
  bool fail = false;

  /* Build the headers. First, the TEARDOWN command */

  if (
       headers_add_header(&s->headers,
                          Headers_CommandName_TearDown,
                          s->url->full)
       == NULL
     )
     fail = true;

  /* A sequence header */

  else if (headers_add_sequence_header(&s->headers) == NULL) fail = true;

  /* State we're going to close the connection, as well as closing */
  /* the socket, to ensure the server releases resources.          */

  else if (
            headers_add_header(&s->headers,
                               Headers_HeaderName_Connection,
                               Headers_HeaderValue_Connection)
            == NULL
          )
          fail = true;

  /* The session header */

  else if (
            headers_add_header(&s->headers,
                               Headers_HeaderName_Session,
                               s->server_session)
            == NULL
          )
          fail = true;

  /* Lastly, any extra data from the client */

  else
  {
    if (s->teardown_r4 != NULL)
    {
      headers_parse_user_header(s->teardown_r4, strlen(s->teardown_r4), s);
    }

    if (s->teardown_r5 != NULL && s->teardown_r6 > 0)
    {
      s->data     = s->teardown_r5, s->teardown_r5 = NULL;
      s->data_len = s->teardown_r6, s->teardown_r6 = 0;

      if (headers_set_content_length(&s->headers, s->data_len) == NULL)
        fail = true;
    }
  }

  /* Did anything fail (out of memory)? */

  if (fail)
  {
    dprintf(("", "teardown_build_teardown: Out of memory\n"));
    return make_error(rtsphsac_ERROR_MEMORY_EXHAUSTED, 0);
  }

  /* Set the session to self-destruct on completion */

  s->destruct = 1;

  return NULL;
}

/**************************************************************/
/* teardown_retry_delayed_on_callout()                        */
/*                                                            */
/* Retry a delayed foreground command that was waiting for a  */
/* background or foreground command to complete.              */
/*                                                            */
/* Parameters: The handle should point to the session struct  */
/*             we're interested in.                           */
/**************************************************************/

void teardown_retry_delayed_on_callout(void * handle)
{
  session * s = (session *) handle;

  dprintf(("", "teardown_retry_delayed_on_callout: Called\n"));

  if (s->dying != 0) return;

  if (s->teardown_wait != 0)
  {
    /* Is there an in-transit foreground command already? */

    if (
         s->state == protostate_DNS              ||
         s->state == protostate_CONNECTED        ||
         s->state == protostate_SENDING          ||
         s->state == protostate_RECEIVING
       )
    {
      /* Command still in progress - wait for it to finish */
      
      dprintf(("", "teardown_retry_delayed_on_callout: Command still running...\n"));

      timeout(teardown_retry_delayed_on_callout, s, Session_State_Retry);
    }
    else
    {
      /* Clear to send the command */

      s->teardown_wait = 0;

      dprintf(("", "teardown_retry_delayed_on_callout: Clear to try again, calling teardown_tear_down_session\n"));

      /* No point trying to deal with errors since the caller will have had */
      /* the SWI return already and since the session is torn down at the   */
      /* Video Control end there's no way to extract further status data.   */

      teardown_tear_down_session(s);
    }
  }
}
