;******************************************************************************
;
; s.CDExtra
;
; Author: Christopher Partington (Cambridge Systems Design)
;
; Description
; ===========
; This file contains extra routines for VSPCD.
;
; Change record
; =============
; 17-Aug-95  14:42  cpartington (Cambridge Systems Design)
; * First version.
;
;*end of change record*

 [ CD

;******************************************************************************

; CDCommandComplete
;
; Called by the CD system when a background transfer has completed
;
; Entry:
;       r0 = handle
;       r1 = status
;       r3 -> buffer start
;       r4 = bytes in buffer
;       r12 -> workspace
;       MODE: SVC
;       IRQs: disabled
; Exit:
;       r0-r1, r12 undefined


CDCommandComplete       Entry   "r2-r5"

 [ cdebug
        CDebug_StrReg8  "VSPCommandComplete handle ",r0,cc
        CDebug_StrReg4  ", status ",r1,cc
        CDebug_StrReg8  ", length ",r4,cc
        LDR     r2,StreamState
        CDebug_StrReg8  ", StreamState ",r2
        BL      CDPrintLists
 ]

; find buffer (should be head of queue unless aborting)

        ADR     r2,CDPendingList        ; r2 -> pointer to item
10
        LDR     r5,[r2]                 ; r5 -> item
        TEQS    r5,#0                   ; end of list?
        EXITS   EQ                      ; if so, exit

        LDR     lr,[r5,#CDLI_Handle]    ; check handle
        TEQS    lr,r0                   ; this one?
        ADDNE   r2,r5,#CDLI_Next        ; if not, step on
        BNE     %BT10

; handle matches
; r5 -> item
; r2 -> pointer to item
; unlink it from this list (NOTE: IRQs are disabled)

        LDR     lr,[r5,#CDLI_Next]      ; get item's next
        STR     lr,[r2]                 ; overwrite pointer to this one

        TEQS    lr,#0                   ; last in list?
        LDRNE   r2,CDPendingListTail    ; if not, r2 = tail
        LDREQ   lr,CDPendingList        ; if yes, check if it was also first
        TEQEQS  lr,#0                   ; (if so, we have just zeroed it)
        MOVEQ   r2,#0                   ; if yes, tail = 0
        ASSERT  CDLI_Next = 0
        STR     r2,CDPendingListTail

; item is now unlinked
; r5 -> item

        LDR     lr,StreamState          ; closing?
        TEQS    lr,#StreamState_Closing
        BEQ     %FT80                   ; branch if so

        TEQS    r1,#ATAPIBGS_Completed  ; check result
        BNE     %FT30                   ; branch if error

; transfer has completed OK
; check we got as much as we asked for and update RequestPTR - could happen
; if ATAPI driver is changed to return different amounts of data for each
; sector when reading mixed mode (2/1 and 2/2) file - this isn't perfect but
; is probably better than just ignoring the problem

        LDR     lr,[r5,#CDLI_BufferDescriptorPtr]       ; r2 -> buffer descriptor
        LDR     lr,[lr,#BufferDescriptor_Length]
        SUBS    lr,lr,r4                                ; always >= 0
        LDRNE   r0,CDRequestPTR
        SUBNE   r0,r0,lr
        STRNE   r0,CDRequestPTR
 [ cdebug
        BEQ     %FT00
        CDebug_StrReg8  "Adjust request pointer by ",lr
00
 ]

; reduce byte count by amount to shuffle up
; NOTE: we shuffle (rather than returning an adjusted pointer) to ensure the
; data remains word-aligned

        LDR     lr,CDOffsetInBlock
        SUB     r4,r4,lr

; now check how much to transfer to MPEG
; i.e. MIN(bytes to EOF, bytes we've got)

        LDR     r2,CurrentPTR
        LDR     r0,EndPTR
        SUB     r0,r0,r2                ; r0 = bytes to EOF
        CMPS    r4,r0
        MOVHI   r4,r0

; if EOF, set state

        MOVHS   r0,#StreamState_Finished
        STRHS   r0,StreamState

; update PTR
; r2 = CurrentPTR

        ADD     r2,r2,r4
        STR     r2,CurrentPTR

; now shuffle up the data if necessary
; lr = shuffle amount

        TEQS    lr,#0
        MOVNE   r2,r3                   ; r2 -> dest
        ADDNE   r1,r2,lr                ; r1 -> source
        MOVNE   r3,r4                   ; r3 = count
 [ cdebug
        BEQ     %FT00
        CDebug_StrReg8  "Shuffle up ",r4,cc
        CDebug_StrReg8  " from ",r1,cc
        CDebug_StrReg8  " to ",r2
00
 ]
        SWINE   XCD_ByteCopy            ; *** ENABLES IRQS
        MOV     lr,#0
        STR     lr,CDOffsetInBlock

; update buffer descriptor
; r4 = data length
; r5 -> list item

        LDR     r2,[r5,#CDLI_BufferDescriptorPtr]       ; r2 -> buffer descriptor
        STR     r4,[r2,#BufferDescriptor_Length]

; before passing data to MPEGControl, check that the stream wasn't closed
; during an IRQ when we enabled IRQs above

        LDR     lr,StreamState
        TEQS    lr,#StreamState_Closing
        BEQ     %FT80

; put buffer in OnLoanList now in case MPEGControl frees it during the call

        LDR     lr,NBuffersOnLoan
        ADD     lr,lr,#1
        STR     lr,NBuffersOnLoan

        LDR     lr,CDOnLoanListTail
        TEQS    lr,#0
        STREQ   r5,CDOnLoanList
        STRNE   r5,[lr,#CDLI_Next]
        STR     r5,CDOnLoanListTail
        MOV     lr,#0
        STR     lr,[r5,#CDLI_Next]

; pass data to MPEGControl

        MOV     r0,#0                                   ; flags
        STR     r0,[r2,#BufferDescriptor_Link]          ; clear link
        LDR     r1,MPEGControlStreamHandle
 [ cdebug
        CDebug_StrReg8  "Calling MPEGControl with r2=",r2,cc
        CDebug_StrReg8  ", length ",r4
 ]
        SWI     XMPEGControl_FullBuffers                ; (r0-r2?)
 [ cdebug
        CDebug_WriteS   "Back from MPEGControl"
        BVC  %FT00
        CDebug_WriteS   "MPEG didn't accept data"
00
 ]
        BVS     %FT60

; now try to start some more transfers

        BL      CDStartSomeReads
        EXITS

;;;;;;;;;;;;;;;;;

30
; CD read returned error - put item in free list
; r5 -> unlinked item

        LDR     lr,CDFreeList
        STR     lr,[r5,#CDLI_Next]
        STR     r5,CDFreeList
        TEQS    r1,#ATAPIBGS_Aborted
        BNE     %F40

; op was aborted

        LDR     lr,StreamState
        TEQS    lr,#StreamState_Active          ; still running?
        BLEQ    CDStartSomeReads                ; if so, start more reads
        EXITS

;;;;;;;;;;;;;;;;;

40
; a real error occurred
; set stream state and create an error to report later

        ADRL    r0,ErrorBlock_CDError
        BL      CDSaveError                     ; (r0->r0)

; error block copied so append an error number to it (must be room)
; r0-> zero terminator
; r1 = error number

        Swap    r0,r1                           ; r1->buf, r0=error number
        ADR     r2,BackgroundErrorBlock
        ADD     r2,r2,#?BackgroundErrorBlock
        SUB     r2,r2,r1                        ; r2 = size
        SWI     XOS_ConvertHex4

; set new state

        LDR     lr,StreamState                  ; if not closing
        TEQS    lr,#StreamState_Closing
        MOVNE   lr,#StreamState_Error           ; ..then error
        STRNE   lr,StreamState
        B       %FT70                           ; go and abort current reads

;;;;;;;;;;;;;;;;;

60
; MPEGControl did not accept data
; save error and set error state BEFORE calling FreeBuffer so it won't start new reads

        BL      CDSaveError                     ; (r0->r0)

        LDR     lr,StreamState                  ; if not closing
        TEQS    lr,#StreamState_Closing
        MOVNE   lr,#StreamState_Error           ; ..then error
        STRNE   lr,StreamState

; return item to FreeList
; r5 -> item

        MOV     r0,#0
        MOV     r1,#0
        LDR     r2,[r5,#CDLI_BufferDescriptorPtr]
        BL      FreeBuffer
70
; now abort all outstanding operations
; IRQs still disabled

        LDR     r5,CDPendingList
75
        TEQS    r5,#0
        EXITS   EQ                              ; all done when list empty

; DON'T unlink this and put it in the free list but wait until the callback

        LDR     r0,[r5,#CDLI_Handle]
 [ cdebug
        CDebug_StrReg8  "Abort ",r0
 ]
        SWI     XATAPI_CancelBackgroundOp       ; (r0->r1,r3,r4)
        LDR     r5,[r5,#CDLI_Next]
        B       %BT75

;;;;;;;;;;;;;;;;;

80
; stream is closing
; r5 -> unlinked item

        LDR     r1,CDFreeList
        STR     r1,[r5,#CDLI_Next]
        STR     r5,CDFreeList
        BL      FreeBuffers
        EXITS

;******************************************************************************

; CDRestart
;
; Restart reading after change of start or end PTR
;
; Entry:
;    IRQ state: unknown
;    Reads are inactive
;
; Exit:
;    All registers and flags preserved
;    StreamState is set to Active/Finished

CDRestart       Entry   "r0-r2"

; disable IRQs

        TSTS    lr,#I_bit
        TEQEQP  lr,#I_bit

; check whether anything to do

        LDR     r1,CurrentPTR
        LDR     lr,EndPTR
        CMPS    r1,lr                   ; read all that's wanted?
        MOVHS   lr,#StreamState_Finished
        STRHS   lr,StreamState
        EXITS   HS                      ; if so, nothing to do

; something to do

        MOV     lr,#StreamState_Active
        STR     lr,StreamState

; calculate LBA and offset
; r1 = CurrentPTR

        LDR     r0,CDDataMode           ; determine block size
        TSTS    r0,#1                   ; mode 1 or 3 (=2/1)?
        MOVNE   r0,#2048                ; yes
        MOVEQ   r0,#2324:AND:&00FF      ; no, assume 2 (=2/2)
        ORREQ   r0,r0,#2324:AND:&FF00
        DivRem  r2,r1,r0,lr             ; calculate block within file

; r2 = block number within file
; r1 = required offset into block
; r0 = bytes per block
; calculate LBA

        LDR     lr,CDStartBlock
        ADD     lr,lr,r2
        STR     lr,CDNextBlock

        MUL     r2,r0,r2                ; convert back to bytes
        STR     r2,CDRequestPTR
        STR     r1,CDOffsetInBlock

; there must be something to do if we got this far so start reading

        BL      CDStartSomeReads
        EXITS

;******************************************************************************

; CDStartSomeReads
;
; Starts some background reads if everything looks OK
;
; Entry:
;       IRQ state: unknown
; Exit:
;       All registers and flags preserved

CDStartSomeReads        Entry   "r0-r8"

        TSTS    lr,#I_bit               ; disable IRQs
        TEQEQP  lr,#I_bit

; check state before anything else

        LDR     lr,StreamState
        TEQS    lr,#StreamState_Active
 [ cdebug
        BEQ     %FT00
        CDebug_WriteS   "StartSomeReads exiting"
00
 ]
        EXITS   NE

10
        ASSERT  EndPTR = (CDRequestPTR + 4)
        ADR     lr,CDRequestPTR
        LDMIA   lr,{r0-r1}
        SUBS    r3,r1,r0
        EXITS   LS                      ; no more to request

; OK, need to start some transfers
; r3 = bytes still to be requested

        LDR     r8,CDFreeList
        TEQS    r8,#0
        EXITS   EQ                      ; no spare buffers

; got a buffer - unlink it
; r8 -> item

        LDR     lr,[r8,#CDLI_Next]
        STR     lr,CDFreeList

; set up regs for background call

        ADR     lr,CDDataMode
        ASSERT  CDNextBlock = (CDDataMode + 4)
        ASSERT  CDBlocksPerBuffer = (CDNextBlock + 4)
        LDMIA   lr,{r0-r1,r4}           ; r0/r1/r4 = mode/nextblk/bufblks
        TSTS    r0,#1                   ; mode 1 or 3 (=2/1)?
        ADDNE   r2,r3,#2048             ; if so, round up
        SUBNE   r2,r2,#1
        MOVNE   r2,r2,LSR #11           ; ..convert to blocks
        BNE     %FT20                   ; ..and branch

; it's mode 2/2

        MOV     r6,#(2324):AND:&00FF    ; round up
        ORR     r6,r6,#(2324):AND:&FF00
        SUB     lr,r6,#1
        ADD     r5,r3,lr
        DivRem  r2,r5,r6,lr             ; convert to blocks

20
; r0 = mode
; r1 = next block
; r2 = blocks
; r3 = bytes to go
; r4 = blocks per buffer

        CMPS    r2,r4                   ; more blocks than will fit?
        MOVHI   r2,r4                   ; if so, reduce to bufsize

        LDR     r4,BufferSize
 [ 1=1

; Always pass the full buffersize - the CommandComplete code sorts out any
; partial block at EOF

 |
        CMPS    r4,r3                   ; want less than full buffer?
        MOVHI   r4,r3                   ; if so, r4 = bytes we want
 ]

; update PTR which says what we've asked for

        LDR     r3,CDRequestPTR

 [ 1=1

; calculate transfer size (blocks * blocksize)
; r0 = data mode
; r2 = blocks

        MOV     lr,#2048
        TSTS    r0,#1
        ADDEQ   lr,lr,#2324-2048
        MUL     lr,r2,lr
        ADD     r3,r3,lr
 |
        ADD     r3,r3,r4
 ]
        STR     r3,CDRequestPTR

; store how much we've asked for so can adjust PTR when get less

        LDR     r3,[r8,#CDLI_BufferDescriptorPtr]
 [ 1=1
        STR     lr,[r3,#BufferDescriptor_Length]

 |
        STR     r4,[r3,#BufferDescriptor_Length]
 ]
        LDR     r3,[r3,#BufferDescriptor_Start] ; r3 -> buffer

        addr    r5,CDCommandComplete            ; r5 -> callback
        MOV     r6,r12                          ; r6 = r12 value
        ADR     r7,CDControlBlock               ; r7 -> controlblock
 [ cdebug
        CDebug_StrReg8  "QueueBackgroundOp LBA ",r1
 ]
        SWI     XATAPI_QueueBackgroundOp        ; (r0-r7->r0,V)
        BVS     %FT90

 [ cdebug
        CDebug_StrReg8  "Start read LBA ",r1,cc
        CDebug_StrReg8  ", blocks=",r2,cc
        CDebug_StrReg8  ", length=",r4,cc
        CDebug_StrReg8  " => OK, handle ",r0
 ]
        STR     r0,[r8,#CDLI_Handle]            ; save handle
        LDR     r1,CDNextBlock
        ADD     r1,r1,r2                        ; update LBA
        STR     r1,CDNextBlock

; append item to PendingList
; r8 -> item

        LDR     lr,CDPendingListTail
        TEQS    lr,#0
        STREQ   r8,CDPendingList
        STRNE   r8,[lr,#CDLI_Next]
        STR     r8,CDPendingListTail
        MOV     lr,#0
        STR     lr,[r8,#CDLI_Next]
        B       %BT10

;;;;;;;;;;;;;;;;;
90
; call to queue op failed - should not happen unless parameters are bad
; store error

        BL      CDSaveError

; free item

        LDR     lr,CDFreeList
        STR     lr,[r8,#CDLI_Next]
        STR     r8,CDFreeList

; set error status

        LDR     lr,StreamState                  ; if not closing
        TEQS    lr,#StreamState_Closing
        MOVNE   lr,#StreamState_Error           ; ..then error
        STRNE   lr,StreamState

; now abort all outstanding operations
; IRQs still disabled

        LDR     r5,CDPendingList
96
        TEQS    r5,#0
        EXITS   EQ                              ; all done when list empty

; DON'T unlink this and put it in the free list but wait until the callback

        LDR     r0,[r5,#CDLI_Handle]
        SWI     XATAPI_CancelBackgroundOp       ; (r0->r1,r3,r4)
        LDR     r5,[r5,#CDLI_Next]
        B       %BT96

;******************************************************************************

; CDSaveError
;
; Copy error block to save area so can return it later
;
; Entry:
;    r0 -> error block
; Exit:
;    r0 -> zero terminator
;    All other registers and flags preserved

CDSaveError     Entry   "r1-r2"

        ADR     r1,BackgroundErrorBlock
        ADD     r2,r1,#?BackgroundErrorBlock
        LDR     lr,[r0],#4                      ; get error number
        STR     lr,[r1],#4
10
        LDRB    lr,[r0],#1                      ; copy 0-terminated error string
        STRB    lr,[r1],#1
        TEQS    lr,#0
        BEQ     %FT20
        EORS    lr,r1,r2                        ; have we overrun block?
        BNE     %BT10                           ; no, so loop

        STRB    lr,[r1,#-1]                     ; terminate block properly
20
        SUB     r0,r1,#1
        EXITS

;******************************************************************************

 [ cdebug

CDPrintLists    Entry   "r0-r1"
 [ 1=0
        TSTS    lr,#I_bit               ; IRQs off
        TEQEQP  lr,#I_bit

        CDebug_WriteS   "PendingList: ",cc
        LDR     r0,CDPendingList
05
        TEQS    r0,#0
        BEQ     %FT10
        CDebug_StrReg8  " ",r0,cc
        LDR     r1,[r0,#CDLI_Handle]
        CDebug_StrReg8  "/",r1,cc
        LDR     r1,[r0,#CDLI_BufferDescriptorPtr]
        CDebug_StrReg8  "/",r1,cc
        LDR     r0,[r0,#CDLI_Next]
        B       %BT05
10
        LDR     r0,CDPendingListTail
        CDebug_StrReg8  " - tail = ",r0


        CDebug_WriteS   "OnLoanList: ",cc
        LDR     r0,CDOnLoanList
15
        TEQS    r0,#0
        BEQ     %FT20
        CDebug_StrReg8  " ",r0,cc
        LDR     r1,[r0,#CDLI_BufferDescriptorPtr]
        CDebug_StrReg8  "/",r1,cc
        LDR     r0,[r0,#CDLI_Next]
        B       %BT15
20
        LDR     r0,CDOnLoanListTail
        CDebug_StrReg8  " - tail = ",r0

        CDebug_WriteS   "FreeList: ",cc
        LDR     r0,CDFreeList
25
        TEQS    r0,#0
        BEQ     %FT30
        CDebug_StrReg8  " ",r0,cc
        LDR     r1,[r0,#CDLI_BufferDescriptorPtr]
        CDebug_StrReg8  "/",r1,cc
        LDR     r0,[r0,#CDLI_Next]
        B       %BT25
30
        CDebug_NewLine
  ]
        EXITS
 ]

;******************************************************************************

 ]

        END

; EOF s.CDExtra
