/**************************************************************/
/* File:    Response.c                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Emulate RTSP server responses.                    */
/*                                                            */
/* Author:  A.D.Hodgkinson                                    */
/*                                                            */
/* History: 01-Jun-2000 (ADH): Imported to RTSPMB.            */
/*          08-Mar-2002 (JRB): Updated for MediaBase 6.       */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Generic.h"
#include "Headers.h"
#include "Module.h"
#include "MPEGCtrl.h"
#include "Play.h"
#include "Status.h"
#include "URLutils.h"
#include "Utils.h"

#include "Response.h"

/**************************************************************/
/* response_build()                                           */
/*                                                            */
/* Build a header list for an emulated response.              */
/*                                                            */
/* Parameters: Pointer to the rtsp_header list for the sent   */
/*             out command / command about to be sent (this   */
/*             is needed for the CSeq value in the generated  */
/*             response).                                     */
/*                                                            */
/*             Pointer to the status text to be sent out in   */
/*             this response.                                 */
/*                                                            */
/* Returns:    Pointer to the head of a header list for the   */
/*             response or NULL for an allocation failure.    */
/**************************************************************/

rtsp_header * response_build(rtsp_header * command, const char * status_text)
{
  rtsp_header * r    = NULL;
  rtsp_header * cseq = NULL;
/*  rtsp_header * sess = NULL;*/
  bool          fail = false;

  if (command != NULL)
  {
    cseq = headers_find_header(command, Headers_HeaderName_Sequence);
/*    sess = headers_find_header(command, Headers_HeaderName_Session);*/
  }

  if (
       headers_add_header(&r,
                          Headers_Supported_Prefix,
                          status_text)

       == NULL
     )
     fail = true;

  /* A duplicate CSeq header */

  else if (
            cseq != NULL &&
            headers_add_header(&r,
                               Headers_HeaderName_Sequence,
                               cseq->value)

            == NULL
          )
          fail = true;

  /* A duplicate Session header */

/*  else if (                                                       */
/*            sess != NULL &&                                       */
/*            headers_add_header(&r,                                */
/*                               Headers_HeaderName_Session,        */
/*                               sess->value)                       */
/*                                                                  */
/*            == NULL                                               */
/*          )                                                       */
/*          fail = true;                                            */
/*                                                                  */
/*   * No body data *                                               */
/*                                                                  */
/*  else if (                                                       */
/*            headers_add_header(&r,                                */
/*                               Headers_HeaderName_ContentLength,  */
/*                               "0")                               */
/*            == NULL                                               */
/*          )                                                       */
/*          fail = true;                                            */

  /* Sanity check */

  if (fail)
  {
    if (r != NULL) headers_free_headers(&r);

    dprintf(("", "response_build: Out of memory\n"));

    return NULL;
  }

  dprintf(("", "response_build: Successful\n"));

  return r;
}
