/**************************************************************/
/* File:    Auth.c                                            */
/*                                                            */
/* Purpose: Generate authorisation responses to challenges    */
/*          from MediaBase.                                   */
/*                                                            */
/* Author:  J.Byrne. Based on sample code supplied by         */
/*          Kasenna.                                          */
/*                                                            */
/* History: 18-Mar-2002 (JRB): Adapted from Kasenna sample.   */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <kernel.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Headers.h"
#include "Module.h"
#include "RTSPMErrors.h"
#include "Utils.h"

#include "Auth.h"

/**************************************************************/
/* auth_base64_map()                                          */
/*                                                            */
/* Map a number (0-63) to its Base64 character.               */
/*                                                            */
/* Parameters: Number to map.                                 */
/*                                                            */
/* Returns:    Mapped character, or 0 if number out of range  */
/**************************************************************/

static char auth_base64_map(char c)
{
   if (c >= 0 && c <= 25)  return (c + 'A');
   if (c >= 26 && c <= 51) return (c - 26 + 'a');
   if (c >= 52 && c <= 61) return (c - 52 + '0');
   if (c == 62)            return '+';
   if (c == 63)            return '/';
   return 0;
}

/**************************************************************/
/* auth_base64_encode_string()                                */
/*                                                            */
/* Create a Base64 encoded version of a string.               */
/*                                                            */
/* Parameters: String to encode.                              */
/*                                                            */
/* Returns:    Pointer to block of memory containing encoded  */
/*             string. This is allocated with malloc and it   */
/*             is the caller's responsibility to free it.     */
/*             NULL is returned if memory allocation fails.   */
/**************************************************************/

static char * auth_base64_encode_string(const char *string)
{
  /* int    BLOCKS_PER_LINE = 18; */
  char * buf;
  int    length, i, j, cnt;
  
  if( !string || !*string )
  {
    return calloc(1, sizeof(char));
  }
  
  length = strlen(string);
  
  cnt = (((length + 2) / 3) * 4) + 1;
  /* cnt += (cnt / (BLOCKS_PER_LINE * 4)); */

  buf = malloc(cnt);

  if( buf == NULL )
  {
    dprintf(("Error_0", "base64_encode_string: Memory allocation failure\n" ));
    return NULL;
  }

  for( i=j=cnt=0; i<length; i+=3,j+=4 ) 
  {
    buf[j]   = auth_base64_map ((string[i]   & 0xfc) >> 2);
    buf[j+1] = auth_base64_map(((string[i]   & 0x03) << 4) |
                               ((string[i+1] & 0xf0) >> 4));

    if (!string[i+1])
    {
      buf[j+2] = buf[j+3] = '=';
      j+=4;
      break;
    }

    buf[j+2] = auth_base64_map(((string[i+1] & 0x0f) << 2) |
                               ((string[i+2] & 0xc0) >> 6));

    if (!string[i+2])
    {
      buf[j+3] = '=';
      j+=4;
      break;
    }

    buf[j+3] = auth_base64_map(string[i+2] & 0x3f);

    /* if( cnt >= (BLOCKS_PER_LINE - 1) )                  */
    /*   buf[j+4] = '\n', buf[j+5] = ' ', j += 2, cnt = 0; */
    /* else                                                */
    /*   cnt++;                                            */
  }
  
  buf[j] = 0;

  return(buf);
}

/**************************************************************/
/* auth_extract_quoted_value()                                */
/*                                                            */
/* Extract the value from a 'name="quoted string value"'      */
/* string.                                                    */
/*                                                            */
/* Parameters: Pointer to string to parse;                    */
/*                                                            */
/*             Pointer to output buffer;                      */
/*                                                            */
/*             Size of output buffer.                         */
/**************************************************************/

static void auth_extract_quoted_value(const char * str, char * value, size_t max)
{
  const char * p;
  int          i;

  if (str == NULL)
    p = NULL;
  else
    p = strchr(str, '\"');

  i = 0;

  if (p != NULL)
  {
    p++;
    while (*p != 0 && *p != '\"' && i < (max - 1))
    {
      /* Unescape characters escaped with '\' */
      if (p[0] == '\\' && p[1] != 0)
        p++;
      value[i++] = *p++;
    }
  }

  value[i] = 0;
}


/**************************************************************/
/* auth_generate_response()                                   */
/*                                                            */
/* Generate the value part of an authorisation header to send */
/* to MediaBase in response to an authentication challenge.   */
/* This function currently understands Basic challenges and   */
/* Digest challenges containing 'algorithm="plain"'.          */
/*                                                            */
/* Parameters: Pointer to string containing challenge from    */
/*             the WWW-Authenticate header sent by the        */
/*             server. Note that this is altered (corrupted)  */
/*             by this function.                              */
/*                                                            */
/*             Pointer to username to use in response.        */
/*                                                            */
/*             Pointer to password to use in response.        */
/*                                                            */
/*             Pointer to path of asset being requested.      */
/*                                                            */
/*             Pointer to variable in which a pointer to the  */
/*             block of memory containing the response value  */
/*             is stored. This is allocated with malloc and   */
/*             it is the caller's responsibility to free it.  */
/*             This is set to NULL if the challenge was not   */
/*             understood, or there was a memory allocation   */
/*             failure (use return value to determine which). */
/*                                                            */
/* Returns:    Pointer to error block, or NULL for success.   */
/**************************************************************/

_kernel_oserror * auth_generate_response(char *challenge, char *username, char *password, char *requestUri, char **result)
{
  static char emptystr[] = "";

  dprintf(("", "auth_generate_response: Called with username='%s', password='%s', URI='%s', challenge='%s'\n", username, password, requestUri, challenge));

  *result = NULL;

  /* Make sure all string pointers are valid */

  if (challenge == NULL)
    return NULL;

  if (username == NULL)
    username = emptystr;

  if (password == NULL)
    password = emptystr;

  if (requestUri == NULL)
    requestUri = emptystr;

  /* See what sort of challenge we have */

  if(strncmp(challenge, Headers_HeaderValue_BasicAuth, sizeof(Headers_HeaderValue_BasicAuth) - 1) == 0)
  {
    char * creds;
    char * encoded_creds;

    /* Response for Basic authorisation challenge */

    dprintf(("", "auth_generate_response: Generating response for Basic challenge\n"));

    creds = malloc(strlen(username) + strlen(password) + 2);

    if (creds == NULL)
      return make_error(rtspmb_ERROR_MEMORY_EXHAUSTED, 0);

    sprintf(creds, "%s:%s", username, password);

    encoded_creds = auth_base64_encode_string(creds);

    free(creds);

    if (encoded_creds == NULL)
      return make_error(rtspmb_ERROR_MEMORY_EXHAUSTED, 0);

    *result = malloc(sizeof(Headers_HeaderValue_BasicAuth) + strlen(encoded_creds) + 1);
    if (*result != NULL)
      sprintf(*result, Headers_HeaderValue_BasicAuth" %s", encoded_creds);

    free (encoded_creds);

    if (*result == NULL)
      return make_error(rtspmb_ERROR_MEMORY_EXHAUSTED, 0);
  }
  else if(strncmp(challenge, Headers_HeaderValue_DigestAuth, sizeof(Headers_HeaderValue_DigestAuth) - 1) == 0)
  {
    char * realm = NULL;
    char * nonce = NULL;
    char * opaque = NULL;
    char * algorithm = NULL;
    char * p;
    char   realm_value[64];
    char   nonce_value[64];
    char   algorithm_value[10];

    dprintf(("", "auth_generate_response: Received Digest challenge\n"));

    /* Find each of the bits of information we need from the challenge. */
    /* Note that we insert nulls into the challenge string to break it  */
    /* up, thus destroying it.                                          */

    p = challenge + sizeof(Headers_HeaderValue_DigestAuth) - 1;

    while (*p)
    {
      while (*p == ' ')
        p++;

      if      (strncmp(p, Auth_Realm, sizeof(Auth_Realm) - 1) == 0)         realm = p;
      else if (strncmp(p, Auth_Nonce, sizeof(Auth_Nonce) - 1) == 0)         nonce = p;
      else if (strncmp(p, Auth_Opaque, sizeof(Auth_Opaque) - 1) == 0)       opaque = p;
      else if (strncmp(p, Auth_Algorithm, sizeof(Auth_Algorithm) - 1) == 0) algorithm = p;

      /* Skip to the next comma delimited element of the string, avoiding */
      /* commas in quoted strings.                                        */

      while (*p != 0 && *p != ',')
      {
        if (*p++ == '\"')
        {
          /* Skip a quoted string */

          while (*p != 0 && (*p != '\"' || *(p-1) == '\\'))
            p++;
          if (*p == '\"')
            p++;
        }
      }

      /* Replace the comma with a null to seperate the elements */

      if (*p != 0)
        *p++ = 0;
    }

    /* Extract the values of the realm, nonce and algorithm. Note the strictly */
    /* speaking (according to RFC2617) the algorithm value should be a token,  */
    /* not a quoted string. MediaBase 6 always returns "plain" in quotes       */
    /* though, and that is all we recognise at the moment.                     */

    auth_extract_quoted_value(realm, realm_value, sizeof(realm_value));
    auth_extract_quoted_value(nonce, nonce_value, sizeof(nonce_value));
    auth_extract_quoted_value(algorithm, algorithm_value, sizeof(algorithm_value));

    /* We only understand Kasenna's odd "plain" algorithm at the moment */

    if (strcmp(algorithm_value, Auth_Algorithm_Plain) == 0)
    {
      char * tmpstr;
      size_t size, size2;

      dprintf(("", "auth_generate_response: Generating response for \"plain\" Digest challenge\n"));

      /* Allocate working string buffer */

      size = strlen(username) + strlen(realm_value) + strlen(password) + 3;
      size2 = sizeof(Auth_Method) + strlen(requestUri);
      if (size2 > size)
        size = size2;
      tmpstr = malloc(size);

      if (tmpstr != NULL)
      {
        char * encoded_response;

        sprintf(tmpstr, "%s:%s:%s", username, realm_value, password);
        encoded_response = auth_base64_encode_string(tmpstr);
        if (encoded_response != NULL)
        {
          char * encoded_response1;

          strcpy (tmpstr, Auth_Method);
          strcat (tmpstr, requestUri);
          encoded_response1 = auth_base64_encode_string(tmpstr);
          if (encoded_response1 != NULL)
          {
            free (tmpstr);
            size = strlen(encoded_response) + strlen(nonce_value) + strlen(encoded_response1) + 3;
            tmpstr = malloc(size);
            if (tmpstr != NULL)
            {
              sprintf(tmpstr, "%s,%s:%s", encoded_response, nonce_value, encoded_response1);
              free (encoded_response);
              encoded_response = auth_base64_encode_string(tmpstr);
              if (encoded_response != NULL)
              {
                size = sizeof(Headers_HeaderValue_DigestAuth) +
                       sizeof(Auth_Username) + strlen(username) + 2 +
                       strlen(realm) + 1 +
                       strlen(nonce) + 1 +
                       sizeof(Auth_URI) + strlen(requestUri) + 2 +
                       sizeof(Auth_Response) + strlen(encoded_response) + 2 +
                       strlen(algorithm) + 1 +
                       strlen(opaque) + 1;
                *result = malloc(size);
                if (*result != NULL)
                {
                  sprintf(*result, Headers_HeaderValue_DigestAuth" "Auth_Username"\"%s\",%s,%s,"Auth_URI"\"%s\","Auth_Response"\"%s\",%s,%s",
                    username, realm, nonce, requestUri, encoded_response, algorithm, opaque);
                }
              }
            }

            free (encoded_response1);
          }

          free (encoded_response);
        }

        free (tmpstr);
      }

      if (*result == NULL)
        return make_error(rtspmb_ERROR_MEMORY_EXHAUSTED, 0);
    }
    else
    {
      dprintf(("", "auth_generate_response: Unrecognised Digest challenge algorithm\n"));
    }
  }
  else
  {
    dprintf(("", "auth_generate_response: Unrecognised challenge\n"));
  }

  return NULL;
}
