/**************************************************************/
/* File:    Session.c                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Manage our local sessions with Video Control.     */
/*                                                            */
/* Author:  Originally S.N.Brodie in the Generic fetcher.     */
/*          Adapted by A.D.Hodgkinson.                        */
/*                                                            */
/* History: 01-Dec-2000 (ADH): Imported from RTSP OVS.        */
/*          08-Mar-2002 (JRB): Updated for MediaBase 6.       */
/*          01-Apr-2002 (JRB): Updated to support sequences   */
/*                             and authorisation.             */
/*          31-May-2002 (JRB): Updated to support near-line   */
/*                             storage assets and audio-only  */
/*                             assets.                        */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#include <swis.h>
#include <sys/errno.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <VideoCtrl.h> /* Exported by VideoCtrl's !MkExport */

#include "AMPlay.h"
#include "Callout.h"
#include "Generic.h"
#include "GetParam.h"
#include "Headers.h"
#include "Module.h"
#include "Play.h"
#include "RTSPMErrors.h"
#include "Status.h"
#include "TearDown.h"
#include "Utils.h"

#include "Session.h"

/* Local data */

static session * session_list = NULL;

/* Local functions */

static void session_free_item_data (session * s);

/**************************************************************/
/* session_return_head()                                      */
/*                                                            */
/* Find out the head of the list of session structures.       */
/*                                                            */
/* Returns:    Pointer to the first item in the list. Follow  */
/*             'next' pointers to traverse that list. Will    */
/*             give NULL if there are no sessions.            */
/**************************************************************/

session * session_return_head(void)
{
  return session_list;
}

/**************************************************************/
/* session_find_by_id()                                       */
/*                                                            */
/* Find a session structure based on a session ID.            */
/*                                                            */
/* Parameters: ID to find.                                    */
/*                                                            */
/* Returns:    Pointer to the session struct relevant to that */
/*             ID, or NULL if the ID is not found.            */
/**************************************************************/

session * session_find_by_id(unsigned int id)
{
  session * ses;

  for (ses = session_list; ses; ses = ses->next)
  {
    if (ses->id == id) return ses;
  }

  return NULL;
}

/**************************************************************/
/* session_find_by_vcid()                                     */
/*                                                            */
/* Find a session structure based on Video Control client     */
/* session ID. Child sessions are ignored.                    */
/*                                                            */
/* Parameters: ID to find.                                    */
/*                                                            */
/* Returns:    Pointer to the session struct relevant to that */
/*             ID, or NULL if the ID is not found.            */
/**************************************************************/

session * session_find_by_vcid(unsigned int vcid)
{
  session * ses;

  for (ses = session_list; ses; ses = ses->next)
  {
    if (ses->vcid == vcid && ses->parent == NULL) return ses;
  }

  return NULL;
}

/**************************************************************/
/* session_new_session()                                      */
/*                                                            */
/* Create a new session, taking into account starting the     */
/* session list.                                              */
/*                                                            */
/* Parameters: Pointer to a session struct pointer which is   */
/*             updated to point to the new structure.         */
/*                                                            */
/* Returns:    If the function generates an error it returns  */
/*             it directly. If it runs out of memory, it'll   */
/*             merely return update the parameter pointer     */
/*             with NULL and also return NULL. ALWAYS check   */
/*             for the directly reported error FIRST.         */
/**************************************************************/

_kernel_oserror * session_new_session(session ** rs)
{
  _kernel_oserror * e;
  session         * ses = calloc(1, sizeof(session));

  if (ses == NULL)
  {
    *rs = NULL;
    return NULL;
  }

  ses->sd = -1;
  ses->state = protostate_INITIAL;

  #ifdef USE_AMPLAYER
  ses->stream_sd = -1;
  #endif

  e = session_link_new_item(ses);

  if (e != NULL)
  {
    *rs = NULL;
    free(ses);
    return e;
  }
  else
  {
    *rs = ses;
    return NULL;
  }
}

/**************************************************************/
/* session_link_new_item()                                    */
/*                                                            */
/* Given a new session struct, link it into the tail of the   */
/* session list.                                              */
/*                                                            */
/* Parameters: Pointer to the new item.                       */
/*                                                            */
/* Assumes:    The parameter pointer is non-NULL and valid.   */
/**************************************************************/

_kernel_oserror * session_link_new_item(session * ses)
{
  if (session_list == NULL)
  {
    /* No list so create a new one */

    session_list = ses;

    #ifndef ALWAYS_CLAIM_EVENTV

      /* Need to start listening for the Internet event too */

      dprintf(("", "session_link_new_item: Claiming EventV\n"));

      {
        _kernel_oserror * e = module_claim_event_vector();

        if (e != NULL) return e;

        dprintf(("", "session_link_new_item: Enabling Internet event\n"));

        module_enable_internet_event();
      }

    #endif
  }
  else
  {
    /* Else find end of list and add an element */

    session * s;

    for (s = session_list; s->next; s = s->next);
    s->next = ses;
  }

  return NULL;
}

/**************************************************************/
/* session_remove_callouts()                                  */
/*                                                            */
/* Remove all pending callouts for a session.                 */
/*                                                            */
/* Parameters: Pointer to the session structure to process.   */
/*                                                            */
/*             Whether or not to remove the main state        */
/*             machine callout as well as all the others.     */
/**************************************************************/

void session_remove_callouts(session * s, bool state_machine_too)
{
  int irqs_off = _kernel_irqs_disabled();

  _kernel_irqs_off();

  if (s->callout_set != 0 && state_machine_too)
  {
    s->callout_set = 0;
    untimeout(status_proceed_on_callout, s);
  }

  if (s->gp_set != 0)
  {
    s->gp_set = 0;
    untimeout(getparam_proceed_on_callout, s);
  }

  if (s->sp_set != 0)
  {
    s->sp_set = 0;
    untimeout(play_setparam_on_callout, s);
  }

  #ifdef CLIENT_LOOPING
  if (s->loop_ready != 0)
  {
    s->loop_ready = 0;
    untimeout(play_replay_on_callout, s);
  }
  #endif

  if (s->read_tc_set != 0)
  {
    s->read_tc_set = 0;
    untimeout(play_read_timecode_on_callout, s);
  }

  if (s->play_wait != 0)
  {
    s->play_wait = 0;
    untimeout(play_retry_delayed_on_callout, s);
  }

  if (s->teardown_wait != 0)
  {
    s->teardown_wait = 0;
    untimeout(teardown_retry_delayed_on_callout, s);
  }

  #ifdef USE_AMPLAYER
  if (s->timeout_set != 0)
  {
    s->timeout_set = 0;
    untimeout(amplay_timeout, s);
  }
  #endif

  if (!irqs_off) _kernel_irqs_on();
}

/**************************************************************/
/* session_reset_session()                                    */
/*                                                            */
/* "Reset" a session structure, so that, assuming it has      */
/* already been used for an RTSP command, it may be used for  */
/* another (e.g. between SETUP and PLAY).                     */
/*                                                            */
/* This does things like freeing response headers and data,   */
/* resetting status back to initial / unconnected, etc. etc.  */
/*                                                            */
/* Parameters: Pointer to the session structure to reset.     */
/**************************************************************/

void session_reset_session(session * s)
{
  /* Stop the main state machine callout for this session */

  if (s->callout_set != 0)
  {
    s->callout_set = 0;
    untimeout(status_proceed_on_callout, s);
  }

  /* Note that this routine used to remove all callouts and free any      */
  /* child session. We no longer do this, because we want to allow the    */
  /* possibility for GET_PARAMETER callouts to occur right up to the      */
  /* point where we send the next command to the server. The reason for   */
  /* this is that an error might occur after calling this routine         */
  /* meaning that no command is actually sent. In this case we don't      */
  /* want to have removed the GET_PARAMETER callout, since the session    */
  /* may now time out unintentionally. Routines calling this must be      */
  /* aware that other callouts remain pending until explicitly cancelled. */

  /* We used to set the state to protostate_INITIAL here. We no longer do  */
  /* this since a timer going off between commands in a foreground         */
  /* sequence could see this and think no foreground command was in        */
  /* progress. We only change the state when we are sure we have finished. */

  s->reported        = 0; /* Clear the "we've reported an error to Video Control" flag */
  s->reported_state  = 0;
  s->response_code   = 0;
  s->data_len        = 0, free(s->data),         s->data         = NULL;
  s->data_to_read    = -1;
  s->reqlen          = 0, free(s->full_request), s->full_request = NULL;
  s->reqptr          = 0;
  s->connected_cb    = NULL;
  s->next_command_cb = NULL;

  headers_free_headers(&s->headers), s->headers = NULL;
}

/**************************************************************/
/* session_free_item_data()                                   */
/*                                                            */
/* Release any memory associated with a session structure,    */
/* including that structure itself.                           */
/*                                                            */
/* The function is designed to be paranoid and will zero the  */
/* area of memory occupied by the structure before freeing.   */
/*                                                            */
/* Re-entrancy must be maintained since a session may delete  */
/* its own child from here.                                   */
/*                                                            */
/* Parameters: Pointer to the item to free (discard).         */
/*                                                            */
/* Assumes:    The parameter pointer is non-NULL and valid.   */
/**************************************************************/

static void session_free_item_data(session * s)
{
  session_remove_callouts(s, true);

  if (s->child)  session_free_item(s->child);
  if (s->parent) s->parent->child = NULL;

  if (s->parent == NULL || s->parent->sd != s->sd) close_socket(&s->sd);

  #ifdef USE_AMPLAYER
  if (s->parent == NULL)
  {
    close_socket(&s->stream_sd);
    amplay_stop(s);
    amplay_final();
  }
  #endif

  headers_free_headers(&s->headers);
  urlutils_free_description(s->url);

  free(s->full_request);
  free(s->user);
  free(s->password);
  free(s->range_record);
  free(s->play_record);
  free(s->data);
  free(s->server_session);
  free(s->assets);

  free(s->setup_r3_record);
  free(s->setup_r4_record);
  free(s->setup_r5_record);

  /* Wipe the session block to be on the safe side. The use of 0xff */
  /* is deliberate - filling with 0 defeats the 'dying' flag.       */
  memset(s, 0xff, sizeof(*s));
  free(s);
}

/**************************************************************/
/* session_free_item()                                        */
/*                                                            */
/* Discard a session in the session list cleanly.             */
/*                                                            */
/* Must be re-entrant (see session_free_item_data too).       */
/*                                                            */
/* Parameters: Pointer to the item to discard.                */
/*                                                            */
/* Assumes:    The parameter pointer is non-NULL and valid.   */
/**************************************************************/

void session_free_item(session * ses)
{
  session * s      = session_list;
  session * prev_s = NULL;
  bool      found  = false;

  for (s = session_list; s; prev_s = s, s = s->next)
  {
    if (s == ses)
    {
      int irqs_off = _kernel_irqs_disabled();

      _kernel_irqs_off();

      found = true;
      s->dying = 1;

      if (prev_s == NULL)
      {
        session_list = s->next;
      }
      else
      {
        prev_s->next = s->next;
      }

      if (!irqs_off) _kernel_irqs_on();

      session_free_item_data(ses);

      break;
    }
  }

  #ifndef ALWAYS_CLAIM_EVENTV

    /* Release EventV? Note that we may have already done this during */
    /* module_atexit, but flags in the calls ensure that being called */
    /* multiple times isn't a problem.                                */

    if (found && session_list == NULL)
    {
      dprintf(("", "session_free_item: Disabling Internet event, releasing EventV\n"));

      module_disable_internet_event();
      module_release_event_vector();
    }

  #endif

  #ifdef TRACE2
    dprintf(("", "\nsession_free_item: %p freed. Dump of session chain:\n", ses));
    for (s = session_list; s; s = s->next)
    {
      dprintf(("", "session_free_item: %p (socket %d) URL %s\n", s, s->sd, s->url ? s->url->full : "<none>"));
    }
    dprintf(("", "session_free_item: End of session chain\n\n"));
  #endif
}

/**************************************************************/
/* session_free_list()                                        */
/*                                                            */
/* Discard all sessions in the session list (e.g. for module  */
/* shutdown).                                                 */
/**************************************************************/

void session_free_list(void)
{
  while (session_list)
  {
    session_free_item(session_list);
  }
}
