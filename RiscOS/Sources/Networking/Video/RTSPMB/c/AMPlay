/**************************************************************/
/* File:    AMPlay.c                                          */
/*                                                            */
/* Purpose: Use AMPlayer module to play back MPEG1 Audio      */
/*          streams from MediaBase. This allows us to support */
/*          layer 3 audio.                                    */
/*                                                            */
/* Author:  J.Byrne.                                          */
/*                                                            */
/* History: 13-May-2002 (JRB): Created.                       */
/**************************************************************/

#ifdef USE_AMPLAYER

#include <stdio.h>
#include <string.h>
#include <math.h>

#include <kernel.h>
#include <swis.h>
#include <AsmUtils/modulefp.h>

#include <VideoCtrl.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <inetlib.h>
#include <socklib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <sys/errno.h>
#include <netinet/in.h>

#include "AMPlayer.h"
#include "Callout.h"
#include "Connect.h"
#include "Generic.h"
#include "MPEGCtrl.h"
#include "Play.h"
#include "Session.h"
#include "Utils.h"

#include "AMPlay.h"

/* Local definitions */

#define AMPlay_Stream_Buf_Size      (130*1024)
#define AMPlay_Timeout_Timer        (800)

/* Local data */

static unsigned int   instance         = 0;     /* AMPlayer instance handle */
static unsigned int   stream_buf_area  = 0;     /* Dynamic area number for stream buffer */
static unsigned int   stream_buf_size  = 0;     /* Size of stream buffer */
static stream_block * stream_buf_base  = NULL;  /* Pointer to base of stream buffer */
static stream_block * stream_buf_first = NULL;  /* Pointer to first used block in stream buffer */
static stream_block * stream_buf_last  = NULL;  /* Pointer to last used block in stream buffer */

/* Local functions */

static int amplay_convertvol(int volume);

/**************************************************************/
/* amplay_check()                                             */
/*                                                            */
/* Check that the AMPlayer module is present.                 */
/*                                                            */
/* Returns:    True if present, false if missing.             */
/**************************************************************/

bool amplay_check(void)
{
  _kernel_oserror * e;

  e = _swix(AMPlayer_Info,
            _IN(0),

            0);

  return (e == NULL);
}

/**************************************************************/
/* amplay_init()                                              */
/*                                                            */
/* Do the necessary initialisation to play an audio stream    */
/* using AMPlayer.                                            */
/*                                                            */
/* Returns:    NULL or pointer to error.                      */
/**************************************************************/

_kernel_oserror * amplay_init(void)
{
  _kernel_oserror * e = NULL;

  /* Allocate memory for stream buffer, if not already allocated */

  if (stream_buf_area == 0)
  {
    e = _swix(OS_DynamicArea,
              _INR(0,8) | _OUT(1) | _OUT(3) | _OUT(5),
  
              0,    /* Create */
              -1,
              AMPlay_Stream_Buf_Size,
              -1,
              0x82, /* Not draggable, no user mode access */
              AMPlay_Stream_Buf_Size,
              0,
              0,
              "RTSP MB audio",
  
              &stream_buf_area,
              &stream_buf_base,
              &stream_buf_size);
  
    if (e == NULL)
    {
      /* Success - initialise buffer */
      stream_buf_first = stream_buf_last = stream_buf_base;
      stream_buf_first->next = stream_buf_first;
      stream_buf_first->block.usage = 0;
    }
    else
    {
      /* Failed */
      stream_buf_area  = 0;
      stream_buf_size  = 0;
      stream_buf_base  = NULL;
      stream_buf_first = NULL;
      stream_buf_last  = NULL;
    }
  }

  /* Create a new instance of AMPlayer, if not already created */

  if (e == NULL && instance == 0)
  {
    e = _swix(AMPlayer_Instance,
              _INR(0,2) | _OUT(0),
  
              0,
              AMP_Instance_Create,
              "RTSPMB",

              &instance);

    if (e == NULL)
    {
      /* Disable ID3v2 processing (should be disabled by default anyway) */

      e = _swix(AMPlayer_Control,
                _INR(0,2) | _IN(8),
    
                AMP_Control_ID3v2 | AMP_UseInstance,
                AMP_Control_ID3v2_Process,
                0,
                instance);
    }
  
    if (e != NULL)
    {
      /* Failed - may as well free dynamic area too */
  
      amplay_final();
    }
  }

  return e;
}

/**************************************************************/
/* amplay_final()                                             */
/*                                                            */
/* Finalisation call to release resources associated with     */
/* playing an audio stream via AMPlayer.                      */
/*                                                            */
/* Parameters: Pointer to the relevant session structure.     */
/*                                                            */
/* Returns:    NULL or pointer to error.                      */
/**************************************************************/

_kernel_oserror * amplay_final(void)
{
  _kernel_oserror * e = NULL;

  dprintf(("", "amplay_final: Called\n"));

  /* Free the stream buffer, if allocated */

  if (stream_buf_area != 0)
  {
    /* We can only free the buffer if none of the blocks are in use */

    if (stream_buf_last->block.usage == 0)
    {
      e = _swix(OS_DynamicArea,
                _INR(0,1),
      
                1,  /* Remove */
                stream_buf_area);

      if (e == NULL)
      {
        stream_buf_area  = 0;
        stream_buf_size  = 0;
        stream_buf_base  = NULL;
        stream_buf_first = NULL;
        stream_buf_last  = NULL;
        dprintf(("", "amplay_final: Stream buffer freed\n"));
      }
    }
    else
    {
      dprintf(("", "amplay_final: Blocks in use - could not free stream buffer\n"));
    }
  }

  /* Destroy any AMPlayer instance, as long as the stream buffer has been freed */

  if (instance != 0 && stream_buf_area == 0)
  {
    e = _swix(AMPlayer_Instance,
              _INR(0,2),
      
              0,
              AMP_Instance_Destroy,
              instance);

    if (e == NULL)
      instance = 0;
  }

  return e;
}

/**************************************************************/
/* amplay_opensock()                                          */
/*                                                            */
/* Open the stream socket to receive a stream.                */
/*                                                            */
/* Parameters: Pointer to the relevant session structure.     */
/*                                                            */
/* Returns:    True if successful, false if an error occurred */
/*             (s->err_no will be set to the error number.)   */
/**************************************************************/

bool amplay_opensock(session * s)
{
  struct sockaddr_in  addr;
  int                 ret;

  /* Socket should definitely not be open already, but be sure */
  close_socket(&s->stream_sd);

  /* Open the socket */

  errno = 0;
  dprintf(("", "amplay_opensock: Creating socket ... "));
  if ((s->stream_sd = socket(PF_INET, SOCK_DGRAM, 0)) < 0)
  {
    dprintf(("", "error = %d\n", errno));
    s->err_no = errno;
    return false;
  }
  dprintf(("", "stream_sd = %d\n", s->stream_sd));

 /* Make it non-blocking */

  if (!make_sock_nonblocking(s->stream_sd))
  {
    dprintf(("", "amplay_opensock: make_sock_nonblocking() failed (errno=%d)\n", errno));
    s->err_no = errno;
    close_socket(&s->stream_sd);
    return false;
  }

  /* Bind it */

  addr.sin_family = AF_INET;
  addr.sin_port = htons(s->stream_port);
  addr.sin_addr.s_addr = htonl(INADDR_ANY);
  memset(addr.sin_zero, '\0', sizeof(addr.sin_zero));

  ret = bind(s->stream_sd, (struct sockaddr *)&addr, sizeof(addr));
  dprintf(("", "amplay_opensock: bind() returned %d (errno now %d)\n", ret, errno));

  /* If we know the address of the stream source, connect() to it */

  /* *** This doesn't work - no data arrives. What did I do wrong? ***
  if (ret == 0 && s->stream_src.s_addr != htonl(INADDR_ANY))
  {
    addr.sin_addr = s->stream_src;
    ret = connect(s->stream_sd, (struct sockaddr *)&addr, sizeof(addr));
    dprintf(("", "amplay_opensock: connect() returned %d (errno now %d)\n", ret, errno));
  }
  */

  if (ret != 0)
  {
    s->err_no = errno;
    close_socket(&s->stream_sd);
    return false;
  }

  /* The connection completed successfully. */

  return true;
}

/**************************************************************/
/* amplay_prepare()                                           */
/*                                                            */
/* Prepare to play an audio stream using AMPlayer.            */
/*                                                            */
/* Parameters: Pointer to the relevant session structure.     */
/*                                                            */
/* Returns:    NULL or pointer to error.                      */
/**************************************************************/

_kernel_oserror * amplay_prepare(session * s)
{
  _kernel_oserror * e;

  /* Start an AMPlayer stream */

  e = _swix(AMPlayer_StreamOpen,
            _INR(0,1) | _IN(8) | _OUT(0),

            AMP_StreamOpen_Cue | AMP_StreamOpen_GenerateService | AMP_UseInstance,
            s->url->path,
            instance,

            &s->amp_stream);

  if (e == NULL)
  {
    /* Tell Video Control to change the state to 'streaming' */

    e = _swix(VideoControl_ProtocolNotify,
              _INR(0,3),
    
              0,
              s->id,
              VideoControlProtocolNotifyNewPlayState,
              1);
  }

  if (e == NULL && s->timeout_set == 0)
  {
    /* Set the timeout timer */
  
    s->timeout_set = 1;
    timeout(amplay_timeout, s, AMPlay_Timeout_Timer);
  }
 
  return e;
}

/**************************************************************/
/* amplay_stop()                                              */
/*                                                            */
/* Stop playing an audio stream.                              */
/*                                                            */
/* Parameters: Pointer to the relevant session structure.     */
/*                                                            */
/* Returns:    NULL or pointer to error.                      */
/**************************************************************/

_kernel_oserror * amplay_stop(session * s)
{
  dprintf(("", "amplay_stop: Called for session %p\n", s));

  /* Remove timeout */

  if (s->timeout_set != 0)
  {
    s->timeout_set = 0;
    untimeout(amplay_timeout, s);
  }

  /* Stop any stream playing */

  if (s->amp_stream != 0)
  {
    /* Close the stream */

    _swix(AMPlayer_StreamClose,
          _INR(0,1) | _IN(8),
  
          AMP_UseInstance,
          s->amp_stream,
          instance);
  
    s->amp_stream = 0;

    /* Stop playback */

    _swix(AMPlayer_Stop,
          _IN(0) | _IN(8),
  
          AMP_UseInstance,
          instance);
  }

  return NULL;
}

/**************************************************************/
/* amplay_timeout()                                           */
/*                                                            */
/* A CallOut handler (see CallOut.h) which detects stream     */
/* timeouts when using AMPlayer.                              */
/*                                                            */
/* Parameters: The handle should point to the session struct  */
/*             we're interested in.                           */
/**************************************************************/

void amplay_timeout(void * handle)
{
  session         * s = (session *) handle;
  _kernel_oserror * e;
  unsigned          flags;

  dprintf(("Callout_0", "amplay_timeout: Called for %p\n", s));

  if (s->dying != 0 || s->timeout_set == 0) return;

  e = _swix(AMPlayer_StreamInfo,
            _INR(0,1) | _IN(8) | _OUT(0),
   
            AMP_UseInstance,
            s->amp_stream,
            instance,

            &flags);

  if (
      e == NULL &&
      (flags & AMP_StreamInfo_OutputBuffFull) != 0 &&
      (flags & AMP_StreamInfo_Paused) == 0
     )
  {
    /* Still playing, try again later */
    timeout(amplay_timeout, s, AMPlay_Timeout_Timer);
  }
  else
  {
    dprintf(("", "amplay_timeout: Detected timeout\n"));

    /* Assume timeout means normal end of stream */
    _swix(VideoControl_ProtocolNotify,
          _INR(0,3),

          0,
          s->id,
          VideoControlProtocolNotifyNewPlayState,
          2);

    s->timeout_set = 0;
  }
}

/**************************************************************/
/* amplay_receive_data()                                      */
/*                                                            */
/* Called when an internet event occurs for the socket that   */
/* was opened to receive the stream.                          */
/*                                                            */
/* Parameters: Pointer to the relevant session structure.     */
/**************************************************************/

void amplay_receive_data(session * s)
{
  int               ret;
  stream_block    * next;
  char            * data;
  int               space;
  _kernel_oserror * e;
  unsigned int      flags;

  amplay_check_buffer();

  do
  {
    next = stream_buf_last->next;
    data = (char *)next + sizeof(*next);

    if ((next > stream_buf_first) || (stream_buf_first == stream_buf_last && stream_buf_first->block.usage == 0))
    {
      space = (char *)stream_buf_base + stream_buf_size - data;
      if (s->packet_size > space && stream_buf_first != stream_buf_base)
      {
        /* Not enough room at end of buffer, try again at the start */
        next = stream_buf_base;
        data = (char *)next + sizeof(*next);
        space = (char *)stream_buf_first - data;
      }
    }
    else
    {
      space = (char *)stream_buf_first - data;
    }

    if (space < s->packet_size || s->amp_stream == 0)
    {
      char dummy[4];

      /* If there is not enough buffer space, discard the whole packet */

      ret = recv(s->stream_sd, &dummy, sizeof(dummy), 0);
      #ifdef TRACE
      if (ret >= 0)
        dprintf(("Stream_0", "amplay_receive_data: Packet discarded\n"));
      #endif
    }
    else
    {
      /* Read data from socket into buffer */

      ret = recv(s->stream_sd, data, space, 0);
      if (ret > 0)
      {
        stream_buf_last->next = next;
        next->next = (stream_block *)(data + ((ret + 3) & ~3));
        next->block.usage = 0;
        next->block.metadata_list = NULL;
        next->block.len = ret;
        stream_buf_last = next;
  
        if (ret > s->packet_size)
        {
          s->packet_size = ret;
          dprintf(("Stream_0", "amplay_receive_data: Packet size is now set to %d bytes\n", ret));
        }

        /* Give block to AMPlayer */

        _swix(AMPlayer_StreamGiveData,
              _INR(0,2) | _IN(8),
      
              AMP_UseInstance,
              s->amp_stream,
              &next->block,
              instance);
  
        dprintf(("Stream_0","amplay_receive_data: Gave block at &%p to AMPlayer (%d bytes of data at &%p)\n", &next->block, ret, data));
        dprintf(("Stream_1","amplay_receive_data: stream_buf_last = &%p, stream_buf_last->next = &%p\n", stream_buf_last, stream_buf_last->next));
      }
    }
  }
  while (ret >= 0);

  if (s->amp_stream != 0)
  {
    /* Check AMPlayer status */

    e = _swix(AMPlayer_StreamInfo,
              _INR(0,1) | _IN(8) | _OUT(0),
     
              AMP_UseInstance,
              s->amp_stream,
              instance,
  
              &flags);
  
    if (e == NULL && (flags & AMP_StreamInfo_Paused) == AMP_StreamInfo_Paused)
    {
      int               status;
      amp_frame_info  * frib;

      /* Stream is paused, i.e. we are still filling buffer and play hasn't */
      /* started. Check to see if we know what layer the audio data is yet  */

      e = _swix(AMPlayer_Info,
                _IN(0) | _IN(8) | _OUT(0) | _OUT(3),
       
                AMP_UseInstance,
                instance,

                &status,
                &frib);

      if (e == NULL && status == AMP_Info_Pausing && frib != NULL)
      {
        dprintf(("", "amplay_receive_data: MPEG version '%s', layer %d\n", frib->mpeg_ver, frib->layer));
        if (frib->layer != 3)
        {
          unsigned int      vc_clear, vc_eor, ctrl_clear, ctrl_eor;
          _kernel_swi_regs  r;
          char              range[13];

          /* Right, it isn't layer 3 audio. Abandon using AMPlayer, stop    */
          /* the stream and start again using Video Control to play through */
          /* the hardware decoder instead.                                  */

          dprintf(("", "amplay_receive_data: Not layer 3 audio, redo through Video Control\n"));

          close_socket(&s->stream_sd);
          amplay_stop(s);

          vc_clear   = 0xffffffff;
          vc_eor     = VC_ProtocolRegister_OpenStreamFlagsInR5  |
                       VC_ProtocolRegister_DoNotResetOrSetSpeed |
                       VC_ProtocolRegister_ReportTimeoutAsEOS;

          ctrl_clear = 0xffffffff;
          ctrl_eor   = MPEGCtrl_MCOS_AudioToStreamSyncOn |
                       MPEGCtrl_MCOS_ReservedSetToOne;

          _swix(VideoControl_ProtocolNotify,
                _INR(0,7),
          
                0,
                s->id,
                VideoControlProtocolNotifyNewProtocolFlags,
                VC_ProtocolNotify_NewProtocolFlags_UpdateSession,
                vc_clear,
                vc_eor,
                ctrl_clear,
                ctrl_eor);
      
          s->using_amplayer = 0;
          s->restarting = 1;

          sprintf(range, "%d.%d-", s->from / 100, s->from % 100);
          r.r[0] = 0;
          r.r[1] = s->id;
          r.r[2] = (int)range;
          r.r[3] = 0;
          play_play(&r);

          return;
        }
      }

      if ((flags & AMP_StreamInfo_OutputBuffFull) == AMP_StreamInfo_OutputBuffFull)
      {
        /* AMPlayer says its output buffer is now full, so start playing */

        _swix(AMPlayer_Pause,
              _IN(0) | _IN(8),
     
              AMP_UseInstance | AMP_Pause_Resume,
              instance);
    
        dprintf(("", "amplay_receive_data: Unpaused AMPlayer\n"));
      }
    }
  }

  if (s->timeout_set != 0)
  {
    /* When we receive data, reset the timeout timer */

    untimeout(amplay_timeout, s);
    timeout(amplay_timeout, s, AMPlay_Timeout_Timer);
  }
}

/**************************************************************/
/* amplay_check_buffer()                                      */
/*                                                            */
/* Check the usage count of all blocks in the stream buffer   */
/* and free any with a zero usage count.                      */
/*                                                            */
/* Parameters: Pointer to the relevant session structure.     */
/**************************************************************/

void amplay_check_buffer(void)
{
  #ifdef TRACE
  int freed = 0;
  #endif

  /* Free any unused blocks */

  while (stream_buf_first != stream_buf_last && stream_buf_first->block.usage == 0)
  {
    stream_buf_first = stream_buf_first->next;
    #ifdef TRACE
    freed++;
    #endif
  }

  #ifdef TRACE
  if (freed > 0)
  {
    int    space;
    char * last_end = (char *)stream_buf_last;
    if (stream_buf_last->block.usage != 0)
      last_end += sizeof(*stream_buf_last) + stream_buf_last->block.len;

    if (stream_buf_first <= stream_buf_last)
    {
      int spaceb, spacet;

      spaceb = (char *)stream_buf_first - (char *)stream_buf_base;
      spacet = (char *)stream_buf_base + stream_buf_size - last_end;
      space = spacet + spaceb;
    }
    else
    {
      space = (char *)stream_buf_first - last_end;
    }
    dprintf(("Stream_0", "amplay_check_buffer: %d blocks freed, free space now %dK\n", freed, space/1024));
    dprintf(("Stream_1", "amplay_check_buffer: stream_buf_first = &%p\n", stream_buf_first));
  }
  #endif

  /* Reset the buffer if no blocks are in use */

  if (stream_buf_first == stream_buf_last && stream_buf_first->block.usage == 0)
  {
    session * s;
    bool      active;

    stream_buf_first = stream_buf_last = stream_buf_base;
    stream_buf_first->next = stream_buf_first;

    dprintf(("Stream_0", "amplay_check_buffer: Empty buffer reset\n"));

    /* When the buffer is empty, check to see if any sessions have open   */
    /* AMPlayer streams. If none do, it is time to free the stream buffer */
    /* and destroy our instance of AMPlayer.                              */

    active = false;
    for (s = session_return_head(); s; s = s->next)
    {
      if (s->dying != 0) continue;

      if (s->stream_sd >= 0)
        active = true;
    }

    if (!active)
      amplay_final();
  }
}

/**************************************************************/
/* amplay_read_npt()                                          */
/*                                                            */
/* Try to update the cached_npt value for the session by      */
/* calculating the current NPT from the AMPlayer timing       */
/* information                                                */
/*                                                            */
/* Parameters: Pointer to a relevant session structure.       */
/*                                                            */
/* Returns:    Whether or not the time was updated.           */
/**************************************************************/

bool amplay_read_npt(session * s)
{
  int               status;
  amp_file_info   * fib;
  _kernel_oserror * e;

  e = _swix(AMPlayer_Info,
            _IN(0) | _IN(8) | _OUT(0) | _OUT(2),
   
            AMP_UseInstance,
            instance,

            &status,
            &fib);

  if (e == NULL && status == AMP_Info_Playing && fib != NULL)
  {
    if ((fib->flags & AMP_FIB_ElapsedTimeValid) == AMP_FIB_ElapsedTimeValid)
    {
      s->npt_cache_time = utils_read_time();
      s->cached_npt = s->assets[s->cur_asset].start_offset + fib->elapsed_time;

      dprintf(("Time_1", "amplay_read_npt: Elapsed time=%u, NPT=%d\n", fib->elapsed_time, s->cached_npt));

      return true;
    }
  }

  return false;
}

/**************************************************************/
/* amplay_set_volume()                                        */
/*                                                            */
/* Set the AMPlayer volume from the volume and mute options   */
/* held by Video Control.                                     */
/*                                                            */
/* Parameters: Pointer to relevant session structure          */
/**************************************************************/

_kernel_oserror * amplay_set_volume(session * s)
{
  _kernel_oserror * e;
  int               opts[7];
  int               volume;

  /* Read the current volume and mute settings */

  opts[0] = vc_tags_volume;
  opts[1] = 1;
  opts[3] = vc_tags_mute;
  opts[4] = 1;
  opts[6] = vc_tags__end;

  e = _swix(VideoControl_ProtocolOptions,
            _INR(0,2),

            0,
            s->vcid,
            opts);

  if (e == NULL)
  {
    if (opts[5] != 0)
    {
      volume = 0;
    }
    else
    {
      modulefp_buf buf;
  
      modulefp_enable(&buf);
      volume = amplay_convertvol(opts[2]);
      modulefp_disable(&buf);
    }

    e = _swix(AMPlayer_Control,
              _INR(0,1) | _IN(8),
       
              AMP_UseInstance,
              volume,
              instance);

    dprintf(("", "amplay_set_volume: Volume=%d, mute=%d; set AMPlayer volume to %d\n", opts[2], opts[5], volume));
  }

  return e;
}

/**************************************************************/
/* amplay_convertvol()                                        */
/*                                                            */
/* Convert a standard volume level value into an equivalent   */
/* level for AMPlayer.                                        */
/*                                                            */
/* Must only be used after modulefp_enable has been called.   */
/*                                                            */
/* Parameters: Standard volume value (0-256)                  */
/*                                                            */
/* Returns:    Converted value.                               */
/**************************************************************/

static int amplay_convertvol(int volume)
{
  if (volume <= 0)
    return 0;

  if (volume >= 256)
    return 127;

  /* The standard volume levels are logarithmic, whereas AMPlayer's  */
  /* volume scale seems to be linear. The conversion method used was */
  /* arrived at through trial and error, but gives similar sounding  */
  /* levels of volume.                                               */

  volume = 256 - volume;
  return (int)(127.0 / pow(2, (double)volume / 14));
}

#else

/* Dummy function to stop the compiler complaining */
void amplay_dummy(void) { return; }

#endif /* USE_AMPLAYER */
