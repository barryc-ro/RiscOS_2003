/**************************************************************/
/* File:    TearDown.c                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Implement RTSPMB_TearDown.                        */
/*                                                            */
/* Author:  A.D.Hodgkinson. Based on URL_Fetcher source by    */
/*          S.N.Brodie and P. Wain.                           */
/*                                                            */
/* History: 01-Dec-2000 (ADH): Imported from RTSP OVS.        */
/*          08-Mar-2002 (JRB): Updated for MediaBase 6.       */
/*          31-May-2002 (JRB): Updated to support AMPlayer.   */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <VideoCtrl.h>

#include "CallOut.h"
#include "Connect.h"
#include "Generic.h"
#include "Headers.h"
#include "Module.h"
#include "AMPlay.h"
#include "RTSPMErrors.h"
#include "Session.h"
#include "Status.h"
#include "Utils.h"

#include "TearDown.h"

/* Local functions */

static _kernel_oserror * teardown_tear_down_session(session * s);

/**************************************************************/
/* teardown_tear_down()                                       */
/*                                                            */
/* Implement RTSPMB_TearDown. See the Video Control           */
/* specification, 2501,817/FS, for more.                      */
/**************************************************************/

_kernel_oserror * teardown_tear_down(_kernel_swi_regs * r)
{
  session * s    = session_find_by_id(r->r[1]);
  bool      wait;

  dprintf(("Entry_0", "teardown_tear_down: Called\n"));
  dprintf(("Entry_1", " r0=%x\n",r->r[0]));
  dprintf(("Entry_1", " r1=%x\n",r->r[1]));
  #ifdef TRACE
  if (r->r[0] & VC_TearDown_R4ThroughR7AreValid)
  {
    dprintf(("Entry_1", " r4='%s'\n",r->r[4] ? (char *)r->r[4] : "NULL"));
    dprintf(("Entry_1", " r5=%x\n",r->r[5]));
    dprintf(("Entry_1", " r6=%x\n",r->r[6]));
    dprintf(("Entry_1", " r7=%x\n",r->r[7]));
  }
  #endif

  if (s == NULL)
  {
    dprintf(("", "teardown_tear_down: ID not found\n"));

    return make_error(rtspmb_ERROR_CLIENT_ID_NOT_FOUND, 0);
  }

  /* Note that we don't use any of the entry parameters. If these need     */
  /* to be used at some point, extra records will need to be added to      */
  /* the session structure so that these parameters can be passed through  */
  /* to teardown_tear_down_session() over any wait for command completion. */

  /* Set the session IDs to zero. This will prevent us from telling   */
  /* VideoControl anything when any foreground command completes, and */
  /* will mean that this session number is no longer valid if any of  */
  /* our entry points are called.                                     */

  s->id = 0;
  s->vcid = 0;

  /* Set the server timeout value to zero to prevent GET_PARAMETER callouts */

  s->server_timeout = 0;

  /* Clear all outstanding callouts, except the main state machine one */

  session_remove_callouts(s, false);

  /* Do we need to wait for a background command? */

  wait = (s->child != NULL);

  /* Do we need to wait for a foreground command? */

  if (
      s->state == protostate_DNS              ||
      s->state == protostate_CONNECTED        ||
      s->state == protostate_SENDING          ||
      s->state == protostate_RECEIVING        ||
      s->state == protostate_PUMPING
     )
  {
    /* A foreground command is in progress. We need to wait for this to */
    /* finish before we can send the TEARDOWN.                          */

    wait = true;

    /* Clear the command chain because we only want to wait until the */
    /* current command completes.                                     */

    s->next_command_cb = NULL;
  }

  #ifdef USE_AMPLAYER
  /* Close down any open AMPlayer stream */

  if (s->asset_type == assettype_MPEG1Audio && s->using_amplayer != 0)
  {
    close_socket(&s->stream_sd);
    amplay_stop(s);
  }
  #endif

  /* Do we need to wait for a foreground or background command to complete? */

  if (wait)
  {
    dprintf(("", "teardown_tear_down: Command in progress, have to wait\n"));

    /* We have to wait */

    s->teardown_wait = 1;
    timeout(teardown_retry_delayed_on_callout, s, Session_State_Retry);

    dprintf(("", "teardown_tear_down: Retry call set up\n"));

    return NULL;
  }

  return teardown_tear_down_session(s);
}

/**************************************************************/
/* teardown_tear_down_session()                               */
/*                                                            */
/* Do the work of tearing down a session. This is called when */
/* we know there are no server commands in progress.          */
/**************************************************************/

static _kernel_oserror * teardown_tear_down_session(session * s)
{
  bool fail = false;

  /* Is there a server session to be torn down? */

  if (s->server_session == NULL)
  {
    dprintf(("", "teardown_tear_down_session: No server session so freeing now\n"));

    session_free_item(s);
    return NULL;
  }

  /* Ensure everything is reset for a new command */

  session_reset_session(s);

  /* Build the headers. First, the TEARDOWN command */

  if (
       headers_add_header(&s->headers,
                          Headers_CommandName_TearDown,
                          s->url->full)
       == NULL
     )
     fail = true;

  /* A sequence header */

  else if (headers_add_sequence_header(&s->headers) == NULL) fail = true;

  /* User agent */

  else if (
            headers_add_header(&s->headers,
                               Headers_HeaderName_UserAgent,
                               Headers_HeaderValue_UserAgent)
            == NULL
          )
          fail = true;

  /* State we're going to close the connection, as well as closing */
  /* the socket, to ensure the server releases resources.          */

  else if (
            headers_add_header(&s->headers,
                               Headers_HeaderName_Connection,
                               Headers_HeaderValue_Connection)
            == NULL
          )
          fail = true;

  /* Lastly, the session header */

  else if (
            headers_add_header(&s->headers,
                               Headers_HeaderName_Session,
                               s->server_session)
            == NULL
          )
          fail = true;

  /* Did anything fail (out of memory)? */

  if (fail)
  {
    dprintf(("", "teardown_tear_down: Out of memory\n"));
    return make_error(rtspmb_ERROR_MEMORY_EXHAUSTED, 0);
  }

  /* Set the session to self-destruct on completion */

  s->destruct = 1;

  dprintf(("", "teardown_tear_down: Successful; exitting through status_send()\n"));

  return status_send(s);
}

/**************************************************************/
/* teardown_retry_delayed_on_callout()                        */
/*                                                            */
/* Retry a delayed foreground command that was waiting for a  */
/* background command to complete.                            */
/*                                                            */
/* Parameters: The handle should point to the session struct  */
/*             we're interested in.                           */
/**************************************************************/

void teardown_retry_delayed_on_callout(void * handle)
{
  session * s = (session *) handle;

  dprintf(("", "teardown_retry_delayed_on_callout: Called\n"));

  if (s->dying != 0) return;

  if (s->teardown_wait != 0)
  {
    /* Is there an in-transit foreground or background command already? */

    if (
         s->state == protostate_DNS              ||
         s->state == protostate_CONNECTED        ||
         s->state == protostate_SENDING          ||
         s->state == protostate_RECEIVING        ||
         s->state == protostate_PUMPING          ||
         s->child != NULL
       )
    {
      /* Command still in progress - wait for it to finish */
      dprintf(("", "teardown_retry_delayed_on_callout: Command still running...\n"));

      timeout(teardown_retry_delayed_on_callout, s, Session_State_Retry);
    }
    else
    {
      /* Clear to send the command */

      s->teardown_wait = 0;

      dprintf(("", "teardown_retry_delayed_on_callout: Clear to try again, calling teardown_tear_down_session\n"));

      /* No point trying to deal with errors since the caller will have had */
      /* the SWI return already and since the session is torn down at the   */
      /* Video Control end there's no way to extract further status data.   */

      teardown_tear_down_session(s);
    }
  }
}
