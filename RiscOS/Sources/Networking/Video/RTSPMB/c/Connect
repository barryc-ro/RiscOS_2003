/**************************************************************/
/* File:    Connect.c                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Socket connection veneer.                         */
/*                                                            */
/* Author:  S.N.Brodie.                                       */
/*                                                            */
/* History: 01-Dec-2000 (ADH): Imported from RTSP OVS.        */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include <kernel.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <inetlib.h>
#include <socklib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/ioctl.h>
#include <sys/errno.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <netdb.h>

#include "DNS.h"
#include "Generic.h"
#include "Module.h"
#include "Session.h"

#include "Connect.h"

int make_sock_nonblocking(int fd)
{
  int one = 1;

  if (socketioctl(fd, FIONBIO,  &one) < 0) return 0;
  if (socketioctl(fd, FIOASYNC, &one) < 0) return 0; /* Causes Internet events */
  return 1;
}

/************************************************************************/
/* opensock(name, port, sername, pointer to state, current descriptor)  */
/************************************************************************/
/* This function is responsible for initiating connections to remote    */
/* hosts.  It tries to connect to "name" on the port specified by the   */
/* "sername" parameter unless this is NULL - in which case the "port"   */
/* parameter is used.  "port" is ignored if "sername" is non-NULL       */
/* This function must fill in the state with the appropriate state so   */
/* that when the ReadData SWI handler comes to dispatch through the     */
/* state table, it goes to the right place.  "fd" is the current socket */
/* descriptor or -1 if there is no socket yet.  It will be -1 on the    */
/* first call (typically from the GetData SWI handler) and then be a    */
/* real socket handle in subsequent calls from a ReadData FSM handler.  */
/* This function returns the handle of the created socket - the caller  */
/* *must* prefer this to any handle it passed in the "fd" parameter.    */
/* This function will close the passed "fd" if it so desires.           */
/* If the return value is <0, this indicates an error (the value is     */
/* actually "-errno" so you can use the value if you really want to)    */
/* Note that the socket to be used is always created on the first time  */
/* through this routine and it is left unbound until the DNS lookup     */
/* has succeeded.  This means that if you happen to use *inetstat to    */
/* see all the sockets, you'll see a strange entry for a socket with    */
/* an unknown port and unknown protocol.  This is normal and correct.   */
/************************************************************************/

int opensock(char *name, int port, char *sername, int *state, int fd)
{
  static int can_nonblock = 1;

  int status=-1;
  struct sockaddr_in addr;

  if (name == NULL) name = "";

  addr.sin_family = AF_INET;
  memset(addr.sin_zero, '\0', sizeof(addr.sin_zero));

  if (sername == NULL) {
    addr.sin_port = htons(port);
  }
  else {
    struct servent *service = NULL;
    if (strcmp(sername, CONNECT_DEFAULT_PROTOCOL_NAME) != 0) {
      service = getservbyname(sername, "tcp");
    }
    addr.sin_port = service ? service->s_port : htons(CONNECT_DEFAULT_PORT_NUMBER);
  }

  /* Jump back here if we start a nonblocking connect and then discover
   * that the platform has a broken read() or select().
   */
  retry:

  errno = 0;
  if (fd < 0) {
    dprintf(("", "Creating socket ...\n"));
    if ((fd = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
      dprintf(("", ".. error = %d\n", errno));
      *state = CONNECT_ERROR_STATE;
      return -errno;
    }
    dprintf(("", ".. result = %d\n", fd));

    if (can_nonblock) {
      if (!make_sock_nonblocking(fd)) can_nonblock=0;
      dprintf(("", "opensock> nonblock=%x (errno=%d)\n",can_nonblock,errno));
    }
  }

  status = dns_find_ip_address(name, &addr.sin_addr);
  if (status == EINPROGRESS) {
    dprintf(("", "dns_find_ip_address(%s) incomplete ... waiting\n", name));
    *state = CONNECT_DNS_STATE;
    return fd;
  }
  else if (status != 0) {
    dprintf(("", "dns_find_ip_address(%s) failed (%d)\n", name, status));
    close_socket(&fd);
    *state = CONNECT_ERROR_LOOKUP_FAILED;
    return -status;
  }

  dprintf(("", "dns_find_ip_address(%s) worked --> %s\n", name, inet_ntoa(addr.sin_addr)));

  /* Set the state */
  *state = CONNECT_CONNECTED_STATE;

  status = connect(fd, (struct sockaddr*)&addr, sizeof(addr));

  if (status == 0) {
    /* The connection completed successfully. */
    dprintf(("", "connect() returned 0!  Returning %d\n", fd));
    return fd;
  }
  else {
    if ((errno == EINPROGRESS) || (errno==0)) {
      dprintf(("", "opensock> OK2: returning sd=%d (errno=%d)\n",fd,errno));
      dprintf(("", "errno==0 or EINPROGRESS - returning %d\n", fd));
      return fd;
    }
    else {
      if ((errno == EAGAIN) || (errno == EWOULDBLOCK)) {
        dprintf(("", "closing %d (errno=%d), trying again\n",fd,errno));
        dprintf(("", "EAGAIN/WOULDBLOCK closing %d\n", fd));
        close_socket(&fd);
        can_nonblock = 0;
        goto retry; /* try again */
      }
    }
  }

  dprintf(("", "connect() return value was %d (errno now %d)\n", status, errno));
  status = errno;
  close_socket(&fd);
  return -status;
}
