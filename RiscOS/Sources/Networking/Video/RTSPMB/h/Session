/**************************************************************/
/* File:    Session.h                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Manage our local sessions with Video Control.     */
/*                                                            */
/* Author:  Originally S.N.Brodie in the Generic fetcher.     */
/*          Adapted by A.D.Hodgkinson.                        */
/*                                                            */
/* History: 01-Dec-2000 (ADH): Imported from RTSP OVS.        */
/*          08-Mar-2002 (JRB): Updated for MediaBase 6.       */
/*          01-Apr-2002 (JRB): Updated to support sequences   */
/*                             and authorisation.             */
/*          31-May-2002 (JRB): Updated to support MediaBase   */
/*                             6.0.1 and AMPlayer.            */
/**************************************************************/

#ifndef RTSPMB_Session__
  #define RTSPMB_Session__

  #include <stdbool.h>

  #include "sys/types.h"
  #include "netinet/in.h"

  #include "URLutils.h"

  /* Default assumed server timeout; empty GET_PARAMETER "pings" */
  /* are issued at half this interval. Servers may supply an     */
  /* alternative in their Session header when responding to a    */
  /* SETUP command.                                              */

  #define Session_Timeout_Default (60)

  /* Rate at which state machine is driven, cs */

  #define Session_State_Timer     (20)
  #define Session_State_Retry     (200)

  /* Structures and enumerations */

  typedef enum
  {
    protostate_ERROR,
    protostate_ERROR_DEAD,
    protostate_ERROR_MEM,
    protostate_ERROR_WRITE,
    protostate_ERROR_READ,
    protostate_ERROR_CONNECTION,
    protostate_ERROR_NO_TOKEN,
    protostate_ERROR_NOT_IMPLEMENTED,
    protostate_ERROR_TIMEOUT,
    protostate_ERROR_DNS,
    protostate_ERROR_VCPN,

    /* If you add to the above, don't forget to add to the list */
    /* of error conditions in the state machine.                */

    protostate_INITIAL,
    protostate_DNS,
    protostate_CONNECTED,
    protostate_SENDING,
    protostate_RECEIVING,
    protostate_PUMPING,
    protostate_COMPLETED

  } network_protocol_fsm_states;

  typedef enum
  {
    assettype_UNKNOWN,
    assettype_MPEG1,
    assettype_MPEG2,
    assettype_MPEG1Audio
  } mb_asset_types;

  /* General data */

  typedef struct arbitrary_data
  {
    int      next_state;              /* State to enter when all data "done" */
    char   * data;                    /* Data itself */
    size_t   length;                  /* Total length of data */
    size_t   done;                    /* Amount written so far, or read so far */

  } arbitrary_data;

  /* Structure for remembering headers */

  typedef struct rtsp_header
  {
    struct rtsp_header * next;        /* Link to next member */
    char               * header;      /* Pointer into text member - is the RTSP header tag */
    char               * value;       /* Pointer into text member - is the tag value setting */
    char                 text[1];     /* Entire header but ':' and "\r\n" represented by '\0' terminators */

  } rtsp_header;

  /* Structure for holding information about an asset */

  typedef struct asset_data
  {
    double            frames_per_sec;   /* Number of frames per second reported by server */
    double            i_frame_ratio;    /* Frames to I frames ratio reported by server */
    int               approx_fps;       /* frames_per_sec rounded to an integer value */
    unsigned int      duration;         /* Clip duration in centiseconds */
    unsigned int      parent_duration;  /* Duration of clip's parent in centiseconds */
    int               start_offset;     /* Offset from time codes in clip to NPT in centiseconds */
  } asset_data;

  /* Session information */

  struct session;
  typedef _kernel_oserror *(*callback_fn_ptr)(struct session * s);

  typedef struct session
  {
    struct session  * next;             /* Pointer to next session */
    struct session  * child;            /* Child session used for server 'pinging' with GET_PARAMETER */
    struct session  * parent;           /* Parent session (so a dying child can set it's parent's child to NULL) */

    int               state;            /* The state of this session */
    int               reported_state;   /* R0 status returned on last SWI call (used by status SWI) */
    unsigned int      err_no;           /* Session-local copy */

    unsigned int      id;               /* Protocol module session ID */
    unsigned int      vcid;             /* Video Control client handle */
    int               sd;               /* Socket descriptor */
    unsigned int      mpegid;           /* MPEGControl stream handle */

    #ifdef USE_AMPLAYER
    unsigned int      amp_stream;       /* AMPlayer stream handle */
    int               stream_sd;        /* Stream socket descriptor */
    int               packet_size;      /* Size of stream packets we expect */
    #endif

    url_description * url;              /* Full URI of the document being fetched */
    char            * data;             /* Additional client data to be sent to server; also the receive buffer */
    int               data_len;         /* Size of data pointed to by 'data' - strlen(data) if not known */
    int               data_to_read;     /* Amount of data still to be read for current response (-1 if not known) */

    int               server_version;   /* Server version number - major<<16+medium<<8+minor, e.g. 0x010203 for version 1.2.3 */
    char            * server_session;   /* Pointer to the server session header value */
    unsigned int      server_timeout;   /* Timeout value that the server gave us, or Session_Timeout_Default */
    struct in_addr    stream_src;       /* Source IP address of stream */
    int               stream_port;      /* Port number to receive stream data from the server on */

    rtsp_header     * headers;          /* List of headers */
    char            * user;             /* User name for authorization */
    char            * password;         /* Password for authorization */
    char            * range_record;     /* Records string in R2 from RTSPMB_Play */
    char            * play_record;      /* Records string in R3 from RTSPMB_Play */

    char            * full_request;     /* Holds the current full request (headers plus any body data) for sending */
    int               reqptr;           /* Pointer into the full request buffer for sending data */
    int               reqlen;           /* Length of the full request buffer */

    unsigned int      last;             /* Last activity timeout */
    unsigned int      response_code;    /* Holds the response code for the latest response read */

    callback_fn_ptr   connected_cb;     /* Function to call back when a socket reaches connected state */
    callback_fn_ptr   next_command_cb;  /* Function to call when a command is completed, without telling Video Control */

    char            * setup_r3_record;  /* Record of R3 from RTSPMB_Setup, for delayed SETUP command following DESCRIBE */
    char            * setup_r4_record;  /* As above, for R4 */
    char            * setup_r5_record;  /* As above, for R5 */
    unsigned int      setup_r6_record;  /* As above, for R6 */

    int               playmode;         /* The current playmode number */
    int               next_playmode;    /* The next playmode to change to */
    int               scale;            /* The scale value of the last successful PLAY */
    int               tc_scale;         /* The amount to scale time code times by when converting to NPT */

    int               cached_npt;       /* For when the client tries rapid mode transitions leaving us with no decoded NPT */
    unsigned int      npt_cache_time;   /* The time when the NPT was last cached */
    int               from;             /* The range from time requested. -1 means not specified. -2 means 'current' */
    int               to;               /* The range to time requested. -1 means not specified. -2 means 'current' */
    int               seek_from;        /* The range from time to ask the server for. Special case for MPEG1 trick streams. */
    int               cur_asset;        /* Which of the assets in a sequence is currently being played */
    unsigned int      stream_bytes;     /* Number of bytes received by the control unit when we last checked */

    asset_data      * assets;           /* Array of assets contained in sequence */
    int               num_assets;       /* The number of assets in the sequence */
    mb_asset_types    asset_type;       /* Type of asset(s) (MPEG1 or MPEG2) */
    unsigned int      play_modes;       /* Summary of play modes flags for all assets in the sequence */
    unsigned int      duration;         /* Total sequence duration in centiseconds */

    unsigned          dying         :1; /* Non-zero when the session is being destroyed */

    #ifdef CLIENT_LOOPING
    unsigned          loop          :1; /* Non-zero for looped playback */
    unsigned          loop_ready    :1; /* Non-zero if a callout function is set to call play_replay for looping */
    #endif
    unsigned          callout_set   :1; /* Non-zero if a callout function is set for general state machine stuff */
    unsigned          gp_set        :1; /* Non-zero if a callout function is set for GET_PARAMETER 'pinging' */
    unsigned          sp_set        :1; /* Non-zero if a callout function is set for asset transfer SET_PARAMETER */
    unsigned          destruct      :1; /* Non-zero if the session should self-destruct after the current command */
    unsigned          online        :1; /* Non-zero if the asset is available on the server (for near-line assets) */  
    unsigned          started       :1; /* Non-zero if playback has started in Video Control */
    unsigned          reported      :1; /* Non-zero if we've reported a state change due to an error state to Video Control */
    unsigned          multicast     :1; /* Non-zero if the clip is simulated multicast */
    unsigned          change_pending:1; /* Non-zero if PLAY or PAUSE sent and response not yet received */
    unsigned          play_wait     :1; /* Non-zero if there's a deferred PLAY command timer in operation */
    unsigned          teardown_wait :1; /* Non-zero if there's a deferred TEARDOWN command timer in operation */
    unsigned          read_tc_set   :1; /* Non-zero if there's a timecode reading timer in operation */
    unsigned          time_found    :1; /* Non-zero if a time code has been read since the last PLAY */
    unsigned          stream_markers:1; /* Non-zero if we expect NPT Reference Descriptors and End-of-Stream markers */
    unsigned          reset_pending :1; /* Non-zero if a stream reset is pending */
    unsigned          restarting    :1; /* Non-zero if restarting stream silently */
    #ifdef USE_AMPLAYER
    unsigned          using_amplayer:1; /* Non-zero if AMPlayer is being used */
    unsigned          timeout_set   :1; /* Non-zero if timeout timer is in operation */
    #endif
  } session;

  /* Function prototypes */

  session         * session_return_head    (void);
  session         * session_find_by_id     (unsigned int vc_client_id);
  session         * session_find_by_vcid   (unsigned int vcid);
  _kernel_oserror * session_new_session    (session ** rs);
  _kernel_oserror * session_link_new_item  (session * ses);
  void              session_remove_callouts(session * ses, bool state_machine_too);
  void              session_reset_session  (session * ses);

  void              session_free_item      (session * ses);
  void              session_free_list      (void);

#endif /* RTSPMB_Session__ */
