/**************************************************************/
/* File:    Session.h                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Manage our local sessions with Video Control.     */
/*                                                            */
/* Author:  Originally S.N.Brodie in the Generic fetcher.     */
/*          Adapted by A.D.Hodgkinson.                        */
/*                                                            */
/* History: 01-Dec-2000 (ADH): Imported from RTSP OVS.        */
/**************************************************************/

#ifndef RTSPMB_Session__
  #define RTSPMB_Session__

  #include "URLutils.h"

  /* Default assumed server timeout; empty GET_PARAMETER "pings" */
  /* are issued at half this interval. Servers may supply an     */
  /* alternative in their Session header when responding to a    */
  /* SETUP command.                                              */

  #define Session_Timeout_Default (60)

  /* Rate at which state machine is driven, cs */

  #define Session_State_Timer     (20)
  #define Session_State_Retry     (200)

  /* Structures and enumerations */

  typedef enum
  {
    protostate_ERROR,
    protostate_ERROR_DEAD,
    protostate_ERROR_MEM,
    protostate_ERROR_WRITE,
    protostate_ERROR_READ,
    protostate_ERROR_CONNECTION,
    protostate_ERROR_NO_TOKEN,
    protostate_ERROR_NOT_IMPLEMENTED,
    protostate_ERROR_TIMEOUT,
    protostate_ERROR_DNS,
    protostate_ERROR_VCPN,

    /* If you add to the above, don't forget to add to the list */
    /* of error conditions in the state machine.                */

    protostate_INITIAL,
    protostate_DNS,
    protostate_CONNECTED,
    protostate_SENDING,
    protostate_RECEIVING,
    protostate_PUMPING,
    protostate_COMPLETED

  } network_protocol_fsm_states;

  /* General data */

  typedef struct arbitrary_data
  {
    int      next_state;              /* State to enter when all data "done" */
    char   * data;                    /* Data itself */
    size_t   length;                  /* Total length of data */
    size_t   done;                    /* Amount written so far, or read so far */

  } arbitrary_data;

  /* Structure for remembering headers */

  typedef struct rtsp_header
  {
    struct rtsp_header * next;        /* Link to next member */
    char               * header;      /* Pointer into text member - is the RTSP header tag */
    char               * value;       /* Pointer into text member - is the tag value setting */
    char                 text[1];     /* Entire header but ':' and "\r\n" represented by '\0' terminators */

  } rtsp_header;

  /* Session information */

  struct session;
  typedef _kernel_oserror *(*callback_fn_ptr)(struct session * s);

  typedef struct session
  {
    struct session  * next;            /* Pointer to next session */
    struct session  * child;           /* Child session used for server 'pinging' with GET_PARAMETER */
    struct session  * parent;          /* Parent session (so a dying child can set it's parent's child to NULL) */
    int               state;           /* The state of this session */
    int               reported_state;  /* R0 status returned on last SWI call (used by status SWI) */
    unsigned int      id;              /* Client handle */
    unsigned int      vcid;            /* Video Control client handle */
    int               sd;              /* Socket descriptor */
    url_description * url;             /* Full URI of the document being fetched */
    char            * data;            /* Additional client data to be sent to server; also the receive buffer */
    int               data_len;        /* Size of data pointed to by 'data' - strlen(data) if not known */
    char            * server_session;  /* Pointer to the server session header value */
    unsigned int      server_timeout;  /* Timeout value that the server gave us, or Session_Timeout_Default */
    rtsp_header     * headers;         /* List of headers */
    char            * range_record;    /* Records string in R2 from RTSPMB_Play */
    char            * play_record;     /* Records string in R3 from RTSPMB_Play */
    char            * full_request;    /* Holds the current full request (headers plus any body data) for sending */
    int               reqptr;          /* Pointer into the full request buffer for sending data */
    int               reqlen;          /* Length of the full request buffer */
    unsigned int      last;            /* Last activity timeout */
    unsigned int      response_code;   /* Holds the response code for the latest response read */
    callback_fn_ptr   connected_cb;    /* Function to call back when a socket reaches connected state */
    callback_fn_ptr   next_command_cb; /* Function to call when a command is completed, without telling Video Control */

    unsigned          loop        :1;  /* Non-zero for looped playback */
    unsigned          callout_set :1;  /* Non-zero if a callout function is set for general state machine stuff */
    unsigned          gp_set      :1;  /* Non-zero if a callout function is set for GET_PARAMETER 'pinging' */
    unsigned          loop_ready  :1;  /* Non-zero if a callout function is set to call play_replay for looping */
    unsigned          destruct    :1;  /* Non-zero if the session should self-destruct after the current command */
    unsigned          started     :1;  /* Non-zero if playback has started in Video Control */
    unsigned          reported    :1;  /* Non-zero if we've reported a state change due to an error state to Video Control */

  } session;

  /* Function prototypes */

  session         * session_return_head   (void);
  session         * session_find_by_id    (unsigned int vc_client_id);
  _kernel_oserror * session_new_session   (session ** rs);
  _kernel_oserror * session_link_new_item (session * ses);
  void              session_reset_session (session * ses);

  void              session_free_item     (session * ses);
  void              session_free_list     (void);

#endif /* RTSPMB_Session__ */
