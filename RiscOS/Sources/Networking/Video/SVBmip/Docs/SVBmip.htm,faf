<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
  <HEAD>
    <TITLE>SVBmip Module Software Functional Specification</TITLE>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
    <META NAME="Classification"     CONTENT="Software Functional Specification">
    <META NAME="ObjectType"         CONTENT="Document">
    <META NAME="Publisher"          CONTENT="srevill@pacemicro.com">
    <META NAME="Author"             CONTENT="srevill@pacemicro.com">
    <META NAME="Keywords"           CONTENT="software, module, SVB, multicast, IP, switched video, STB">
    <META NAME="Description"        CONTENT="SVBmip Software Functional Specification">
    <META NAME="Summary"            CONTENT="Functional Specification of the SVBmip Relocatable Module">
    <META HTTP-EQUIV="expires"      CONTENT="0">
  </HEAD>
  <BODY BGCOLOR="white" TEXT="black" LINK="#801000" VLINK="606000">

    <H1 ALIGN="CENTER">SVBmip Module Software Functional Specification</H1>
    <P><HR><P>

<!-- ******************************* FRONT PAGE ************************************ -->

    <CENTER>
      <TABLE WIDTH="50%" BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <TR><TD><I>Drawing Number:</I>                 <TD>2209,506/FS
        <TR><TD><A HREF="#Chapter14"><I>Issue:</I></A> <TD>3
        <TR><TD><I>Date:</I>                           <TD>21-Feb-2000
        <TR><TD><I>Previous Issue:</I>                 <TD>2
        <TR><TD><I>Status:</I>                         <TD>(LIVE)
        <TR><TD><I>Change:</I>                         <TD>ECO 4304
        <TR><TD><I>Author:</I>                         <TD>Stephen Revill
        <TR><TD><I>Classification:</I>                 <TD>Company Confidential
        <TR><TD><I>Master Format:</I>                  <TD>HTML
      </TABLE>
    </CENTER>
    <P><HR><P>

<!-- ******************************* CONTENTS PAGE ************************************ -->

    <H2><I><A NAME="Contents">Contents</A></I></H2>
    <CENTER>
      <TABLE WIDTH="75%" BORDER="0" CELLSPACING="0" CELLPADDING="2">
        <!-- Chapters -->
        <TR><TD>1.  <TD><A HREF="#Chapter1">Copyright</A>
        <TR><TD>2.  <TD><A HREF="#Chapter2">Scope and Purpose of Document</A>
        <TR><TD>3.  <TD><A HREF="#Chapter3">System Overview</A>
        <TR><TD>4.  <TD><A HREF="#Chapter4">Module Dependencies</A>
        <TR><TD>5.  <TD><A HREF="#Chapter5">Technical Overview</A>
        <TR><TD>6.  <TD><A HREF="#Chapter6">Data Formats</A>
        <TR><TD>7.  <TD><A HREF="#Chapter7">Programmer Interface</A>
        <TR><TD>8.  <TD><A HREF="#Chapter8">Deliverables</A>
        <TR><TD>9.  <TD><A HREF="#Chapter9">Outstanding Issues</A>
        <TR><TD>10. <TD><A HREF="#Chapter10">Development Test Strategy</A>
        <TR><TD>11. <TD><A HREF="#Chapter11">Acceptance Tests</A>
        <TR><TD>12. <TD><A HREF="#Chapter12">Bibliography</A>
        <TR><TD>13. <TD><A HREF="#Chapter13">Glossary</A>
        <TR><TD>14. <TD><A HREF="#Chapter14">Issue History</A>
      </TABLE>
    </CENTER>
    <P><HR><P>

<!-- ******************************* CHAPTERS ************************************ -->

    <H2><I><A HREF="#Contents">1.</A> <A NAME="Chapter1">Copyright</A></I></H2>
    This document is copyright &copy; Pace Micro Technology plc, 2000
    <P><HR><P>

    <H2><I><A HREF="#Contents">2.</A> <A NAME="Chapter2">Scope and Purpose of Document</A></I></H2>
    This document specifies a relocatable module which addresses the need to
    support switched video broadcasts over IP multicast (IGMPv2 [1]). It details the
    behaviour of this module, its external interfaces and its external dependencies.
    It does not cover issues which are beyond the direct control of the module.
    <P>
    This document specifies the functionality and facilities provided by version
    1.00 and later of the SVBmip module. For documentation on earlier versions,
    see
    <A HREF="http://www.internal.acorn.co.uk/do/doroot/DO/Current/2x02/FS/2302769-01.htm">
    Multicast Video Streaming Reception SVBmip Module</A> [2].
    <P>
    Note: all numeric values are given in decimal, unless the value is prefixed by <B>0x</B>,
    in which case it is a hexadecimal value.
    <P><HR><P>

    <H2><I><A HREF="#Contents">3.</A> <A NAME="Chapter3">System Overview</A></I></H2>
    When used in conjunction with the facilities provided by an STB's MPEG support
    software, this relocatable module allows a selected multicast video stream to
    be played.
    <P>
    Primary control of the module is by means of SWI calls, all of which have the
    prefix <B>SVB_</B>. Some information is also reported by means of system variables.
    <P>
    SVBmip also provides two commands: <B>*VPinfo</B> and <B>*SVBinfo</B>, both of which report
    status information and statistics. The former is included for backwards compatibility only
    and should be considered deprecated.
    <P>
    The SVBmip module (versions 1.00 and above) are mainly backwards compatible with previous
    versions of the SVBmip module and with the VSPmip module. The differences are outlined in
    this document.
    <P>
    In the context of the MPEG and networking software system, SVBmip fits in as follows:
    <P>
    <CENTER><IMG ALT="Overview" SRC="system.gif" WIDTH=509 HEIGHT=331></CENTER>
    <P>
    The SVBmip module uses buffers allocated from the RMA by the UDPv [6] module for the Internet
    stack to fill with MPEG data. It notifies the MPEGControl [3] module of the buffer space and
    when these buffers are full, etc.
    <P>
    When a buffer is full, the MPEGControl module notifies either the MPEGTransport [5] or
    MPEGSystem [4] modules (depending on the type of MPEG stream) of the buffers. These modules
    parse the data in the buffer and pass subsections (packets) of it out (eg: to the MPEG2Video
    module [7]).
    <P><HR><P>

    <H2><I><A HREF="#Contents">4.</A> <A NAME="Chapter4">Module Dependencies</A></I></H2>
    The SVBmip module relies on several other modules, both directly and indirectly, to
    augment some parts of its functionality. It will notify such components to perform
    their service when required and will interpret the results of doing that. The modules
    concerned are:
    <UL>
      <LI>Internet       (5.06 or later)
      <LI>MPEGTransport  (1.68 or later)
      <LI>MPEGSystem     (0.47 or later)
      <LI>MPEGControl    (2.00 or later)
      <LI>UDPv           (0.10 or later)
    </UL>
    <P><HR><P>

    <H2><I><A HREF="#Contents">5.</A> <A NAME="Chapter5">Technical Overview</A></I></H2>
    This module maintains a list of multicast channel information and provides SWI calls to
    both manage the list and open/close multicast SVB streams described in the list. Entries
    can be added, removed, updated and enumerated. There can be any number of entries in this
    list (limited by available memory).
    <P>
    Each entry in this list (henceforth called a channel) has several attributes. An overview
    of the main attributes is given below:
    <P>
    <CENTER>
      <TABLE WIDTH="95%" BORDER="1" CELLSPACING="2" CELLPADDING="4" BGCOLOR="#F3F3F3">
        <TR><TD>Channel number            <TD>The unique identifier for this channel (eg: 1, 3, 128)
        <TR><TD>IP group address          <TD>The group address of the multicast stream (eg: 225.1.1.6)
        <TR><TD>UDP port number           <TD>The port number for the multicast stream (eg: 8003)
        <TR><TD>Textual channel name      <TD>A short description of the channel (eg: &quot;BBC1&quot; or &quot;Sky:Sport&quot;)
        <TR><TD>Statistics and other data <TD>Other data defined later in this document
      </TABLE>
    </CENTER>
    <P>
    Initially, the list is empty. However, if the system variable <B>&lt;SVB$ChannelFile&gt;</B>
    contains a valid filename, this file will be parsed during module initialisation to generate
    the default contents of the list. Software may use the SWI calls provided to add, remove or
    modify the list at any point (see the section on the <A HREF="#Chapter61">Channel File Format</A>
    for more information).
    <P>
    At present, this module only supports playing one channel at a time, so calling the <B>SVB_OpenStream</B>
    SWI to open a stream when another is playing will cause the first to be closed before opening
    the new stream. <I>However, no guarantee is made that this will be the behaviour of future versions
    of this module.</I>
    <P>
    <B><I>You should always call SWI SVB_CloseStream then SVB_OpenStream to change between streams.</I></B>
    <P><HR><P>

    <H2><I><A HREF="#Contents">6.</A> <A NAME="Chapter6">Data Formats</A></I></H2>
    <P>
    <CENTER>
      <TABLE WIDTH="75%" BORDER="0">
        <TR><TD>6.1 <TD><A HREF="#Chapter61">Channel File Format</A>
        <TR><TD>6.2 <TD><A HREF="#Chapter62">Error Handling and Reporting</A>
      </TABLE>
    </CENTER>
    <P>

    <H3><I><A HREF="#Chapter6">6.1</A> <A NAME="Chapter61">Channel File Format</A></I></H3>
    The system variable <B>&lt;SVB$ChannelFile&gt;</B> is read to determine the location
    of the channels file. This consists of zero or more textual lines of the form:
    <OL>
      <LI>Optional white space (ASCII 9, 32);
      <LI>Channel number, upto nine characters (non-zero, positive decimal integer);
      <LI>White space (ASCII 9, 32);
      <LI>63 chars or less of textual channel description/name string (ASCII 33-126, 160-255);
      <LI>White space;
      <LI>IP address, including port (eg: &quot;225.1.1.7:8001&quot;);
      <LI>Optional white space (ASCII 9, 32);
      <LI><I>(Extra parameter string, up to 255 characters)<SUP><B>+</B></SUP>;</I>
      <LI>Ctrl-character terminator (any of ASCII 0, 10 or 13).
    </OL>
    or comment lines which start with the bar '<CODE>|</CODE>' character. Blank lines
    are also permitted in this file.
    <P>
    <CENTER><SMALL>Note: Italicised items marked <B>+</B> are optional.</SMALL></CENTER>
    <P>
    <H4><I>The Channel Number</I></H4>
    <P>
    Channel numbers (the channel's unique ID) may appear out-of-sequence in this file, and
    some channel numbers may remain undefined (ie: they need not be contiguous). The behaviour
    of SVBmip when adding a channel with a number which has already been used in the list is
    <B>undefined</B>.
    <P>
    As the channel number is stored in an unsigned, 32 bit word, the maximum channel number
    is 4294967295 (decimal). The SVBmip parser imposes a nine character limit on the channel
    number, giving the actual maximum of 999999999.
    <P>
    Channel numbers 1111111 and 1111110 (decimal) are reserved for backwards compatibility.
    In previous implementations they had a special meaning (Channel Down and Channel Up
    respectively). If these channel numbers are found in the Channels file, that line will
    be ignored.
    <P>
    <H4><I>Channel Description String</I></H4>
    <P>
    The channel description (or name) string should be less than 64 characters in length
    and terminated by at least one character of white space. Note that because white space
    is the delimiter, there may not be any spaces within the channel description/name -
    use a hard space if necessary there.
    <P>
    This string may be displayed on the screen when the channel is selected by the player
    application. It can be read from the system variable <B>&lt;SVB$ChannelName&gt;</B> after
    calling SWI &quot;SVB_ReadChannel&quot;.
    <P>
    <H4><I>The IP Group Address</I></H4>
    <P>
    The IP group address should be specified in the standard dotted-quad format and the
    port number should follow a ':' colon character. (for backwards compatibility, a '/'
    forward slash character will be accepted, but <B>should not be used</B>).
    <P>
    The address should be a valid multicast IP address, eg:
    <UL>
      <LI>The first octet <B>must</B> be in the multicast address range (224-239)
      <LI>The last octet should <B>not</B> be 0 or 255
    </UL>
    <P>
    <H4><I>The Extra Parameter String</I></H4>
    <P>
    The presence of the extra parameter string should be indicated with the switch
    &quot;-extra&quot;. The parameters must be enclosed in &quot;double-quote&quot; characters.
    <P>
    This parameter string, excluding the quotes, will be copied directly into memory after
    the main part of each line has been parsed. A pointer to a word-aligned, zero-terminated
    copy of this string is returned by both the <B>ReadChannel</B> and <B>EnumerateChannels</B>
    SWIs. As an example, an EPG program could parse this string to extract entitlement
    information, etc.
    <P>
    Allowed characters in the extras string are: ASCII 1-255, excluding 10, 13 and 34. As
    SVBmip merely maintains this string in memory, and does not actually <I>use</I> it,
    you may use whatever conventions you require to indicate excluded characters.
    <P>
    <H4><I>An Example Channels File</I></H4>
    <UL>
      <CODE>
      | This is a comment<BR>
      1 MPEG1/2Mbs 224.6.6.6:8208<BR>
      2 MPEG2/4Mbs 225.1.1.7:8001 -extra &quot;This is an extra string&quot;<BR>
      <BR>
      6 MPEG2/5Mb2 225.1.1.6:8002 -extra &quot;1 %11001 &amp;2FF&quot;<BR>
      | another comment 1234567890
      </CODE>
    </UL>
    <P><HR><P>

    <H3><I><A HREF="#Chapter6">6.2</A> <A NAME="Chapter62">Error Handling and Reporting</A></I></H3>
    The system variable <B>&lt;SVB$ErrMsgFile&gt;</B> is read to determine the location of the error
    messages file when the module initialises. The error file consists of zero or more textual lines
    of the form:
    <OL>
      <LI>Optional white space (ASCII 9 or 32)
      <LI>Error number (non-zero, positive decimal integer)
      <LI>Colon ':'
      <LI>Textual error message string up to 99 characters in length (may contain spaces)
      <LI>Ctrl-character terminator (any of ASCII 0, 10 or 13)
    </OL>
    or comment lines which start with the hash '<CODE>#</CODE>' character. Blank lines are also
    permitted in this file. Note that the older SVBmip module used the bar '<CODE>|</CODE>'
    character to introduce a comment.
    <P>
    Depending upon the setting of a flag, playback errors are reported in one of
    two ways. The first is the conventional V set, R0-&gt;error block method common
    to all SWIs. The alternative is via system variables, with the error message
    being placed in <B>&lt;SVB$StatusInfo&gt;</B> for a non-fatal error and in
    <B>&lt;SVB$StatusFatal&gt;</B> for a fatal error.
    <P>
    This flag is set according to the presence of the system variable
    <B>&lt;SVB$WebErrorReports&gt;</B>. If that variable has been set, then errors will be
    reported via system variables. <B>&lt;SVB$WebErrorReports&gt;</B> is checked for only
    when the module initialises (so if this facility is required, the system variable should
    be set as part of the boot sequence).
    <P>
    The errors currently defined are:-
    <P>
    <CENTER>
      <TABLE WIDTH="75%" BORDER="1" CELLSPACING="2" CELLPADDING="4" BGCOLOR="#F3F3F3">
        <TR BGCOLOR="#C0C0C0"><TD><B><I>Number:</I></B> <TD><B><I>Message:</I></B>
        <TR><TD>0x0001E6 <TD>SWI name not known
        <TR><TD>&817301  <TD>Format error
        <TR><TD>&817302  <TD>No session
        <TR><TD>&817303  <TD>No network resource
        <TR><TD>&817304  <TD>No server resource
        <TR><TD>&817305  <TD>Not subscribed
        <TR><TD>&817306  <TD>Program out of service
        <TR><TD>&817307  <TD>Redirect
        <TR><TD>&817308  <TD>Lost channel video
        <TR><TD>&817309  <TD>Cannot contact network
        <TR><TD>&81730A  <TD>Bad channel
        <TR><TD>&81730B  <TD>Invalid SVB handle
        <TR><TD>&81730C  <TD>SVB stream is active
        <TR><TD>&81730D  <TD>SVB channel is already defined
        <TR><TD>&81730E  <TD>Bad value in R2 for SVB_SetSpeed SWI
        <TR><TD>&81730F  <TD>Bad value in R0 for SVBmip SWI call
        <TR><TD>&817310  <TD>SVBmip cannot claim memory from RMA
        <TR><TD>&817311  <TD>Invalid multicast IP address
        <TR><TD>&8173F5  <TD>Error number out of range
        <TR><TD>&8173F6  <TD>End of line expected (ASCII 0, 10 or 13)
        <TR><TD>&8173F7  <TD>Digit ('0'..'9') expected
        <TR><TD>&8173F8  <TD>White space expected (ASCII 9 or 32)
        <TR><TD>&8173F9  <TD>Bad IP address/port separator (use ':')
        <TR><TD>&8173FA  <TD>Empty strings are not permitted
        <TR><TD>&8173FB  <TD>Bad channel name string
        <TR><TD>&8173FC  <TD>Number too big
        <TR><TD>&8173FD  <TD>String too long
        <TR><TD>&8173FE  <TD>String '?' expected
        <TR><TD>&8173FF  <TD>Character '?' expected ('?' found)
      </TABLE>
    </CENTER>
    <P>
    If any of the above errors are non-fatal they would be reported in <B>&lt;SVB$StatusInfo&gt;</B>
    if <B>&lt;SVB$WebErrorReports&gt;</B> has been set. Fatal error massages are only returned by
    the module's Initialisation or Finalisation code (for example, when parsing the Channels file).
    These are fatal errors because the module will not be loaded after they occur.
    <P><HR><P>

    <H2><I><A HREF="#Contents">7.</A> <A NAME="Chapter7">Programmer Interface</A></I></H2>
    <P>
    <CENTER>
      <TABLE WIDTH="75%" BORDER="0">
        <TR><TD>7.1 <TD><A HREF="#Chapter71">System Variable Documentation</A>
        <TR><TD>7.2 <TD><A HREF="#Chapter72">SWI Documentation</A>
        <TR><TD>7.3 <TD><A HREF="#Chapter73">Command Documentation</A>
      </TABLE>
    </CENTER>
    <P><HR><P>

<!-- ******************************* System Variable Documentation ************************************ -->

    <H3><I><A HREF="#Chapter7">7.1</A> <A NAME="Chapter71">System Variable Documentation</A></I></H3>
    The SVBmip module uses a number of system variables, some are read when it configures itself, and
    others report information. Currently, no variables are both read from and written to.
    <P>
    This is a table of system variables which SVBmip reads, and their meaning:
    <P>
    <CENTER>
      <TABLE WIDTH="96%" BORDER="1" CELLSPACING="2" CELLPADDING="4" BGCOLOR="#F3F3F3">
        <TR BGCOLOR="#C0C0C0"><TD><B><I>Variable:</I></B> <TD><B><I>Meaning:</I></B>
        <TR><TD>SVB$ErrMsgFile      <TD>The location of the error messages file
        <TR><TD>SVB$ChannelFile     <TD>The location of the channels file
        <TR><TD>SVB$EOSTimeout      <TD>The length of the end-of-stream timeout (seconds)
        <TR><TD>SVB$PollEvery       <TD>The number of centiseconds between end-of-stream polls
        <TR><TD>SVB$Debug           <TD>Flag: enable debugging
        <TR><TD>SVB$WebErrorReports <TD>Flag: report errors via system variables
        <TR><TD>SVB$MCAdrSpecific   <TD>Flag: use the STB's Mac address (rather than the default)
      </TABLE>
    </CENTER>
    <P>
    This is a table of system variables which SVBmip writes to, and their meaning:
    <P>
    <CENTER>
      <TABLE WIDTH="96%" BORDER="1" CELLSPACING="2" CELLPADDING="4" BGCOLOR="#F3F3F3">
        <TR BGCOLOR="#C0C0C0"><TD><B><I>Variable:</I></B> <TD><B><I>Meaning:</I></B>
        <TR><TD>SVB$ChannelName     <TD>The current channel's textual name string
        <TR><TD>SVB$StatusFatal     <TD>The last recorded fatal error message (see note)
        <TR><TD>SVB$StatusInfo      <TD>The last recorded non-fatal error message (see note)
      </TABLE>
    </CENTER>
    <P>
    <B>NOTE</B>
    <P>
    The variables <B>&lt;SVB$StatusFatal&gt;</B> and <B>&lt;SVB$StatusInfo&gt;</B> are only
    written to when the flag variable <B>&lt;SVB$WebErrorReports&gt;</B> is set to TRUE.
    Note that the older SVBmip module has a bug: the logic of this variable is reversed.
    <P><HR><P>

<!-- ******************************* SWI Documentation ************************************ -->

    <H3><I><A HREF="#Chapter7">7.2</A> <A NAME="Chapter72">SWI Documentation</A></I></H3>
    This module provides a set of SWIs (SoftWare Interrupts) which enables other software to
    interact with it. If a call is made to an unsupported SWI in the SVBmip chunk (from 0x43C80
    to 0x43CBF), the error &quot;SWI name not known&quot; will be returned. The status of any playing
    stream will not be effected.
    <P>
    You should note that the SVBmip SWI chunk may clash with that of the Ether2 driver module.
    <P>
    Where identifiers of the form R0:1 are used, this represents (for example) the state of bit one
    in Register zero. This may be either 'clear' (zero) or 'set' (one).
    <P>

    <H3 ALIGN="RIGHT">SVB_SetServer<BR>(SWI 0x43C80)</H3>
    <B>On entry</B>
    <UL>
      -
    </UL>
    <B>On exit</B>
    <UL>
      All preserved
    </UL>
    <B>Interrupts</B>
    <UL>
      Interrupt status is unaltered<BR>
      Fast interrupts are enabled
    </UL>
    <B>Processor mode</B>
    <UL>
      Processor is in SVC mode
    </UL>
    <B>Re-entrancy</B>
    <UL>
      SWI is not re-entrant
    </UL>
    <B>Use</B>
    <UL>
      This SWI is not appropriate in this variant of the SVBmip module. It will return
      immediately with all registers preserved.
    </UL>
    <HR>


    <H3 ALIGN="RIGHT">SVB_OpenStream<BR>(SWI 0x43C81)</H3>
    <B>On entry</B>
    <UL>
      <TABLE BORDER="0">
        <TR>
          <TD VALIGN="TOP">R0 -</TD>
          <TD>
            Flags:<br>
            <table border="0" cellspacing="0" cellpadding="0">
              <tr valign="top" align="left"><th>Bit(s)</th><th>&nbsp;</th><th>Meaning</th></tr>
              <tr valign="top">
                <td>0</td>
                <td>&nbsp;</td>
                <td>
                  If clear, pointer to channel string in R1 (deprecated), if set, channel
                  number in R1
                </td>
              </tr>
              <tr valign="top">
                <td>1</td>
                <td>&nbsp;</td>
                <td>
                  If clear, call UDPV_StartOfPlay and UDPV_EndOfPlay as appropriate, else leave
                  that up to external caller
                </td>
              </tr>
              <tr valign="top">
                <td>2-31</td>
                <td>&nbsp;</td>
                <td>Reserved (must be zero)</td>
              </tr>
            </table>
          </TD>
        <TR><TD VALIGN="TOP">R1 -<TD>if R0:0 clear, pointer to string, else channel number
        <TR><TD VALIGN="TOP">R2 -<TD>handle allocated by MPEGControl module
      </TABLE>
    </UL>
    <B>On exit</B>
    <UL>
      <TABLE BORDER="0">
        <TR><TD VALIGN="TOP">R0 -<TD>handle allocated to this stream if no error is being raised,
                                     otherwise V flag set and R0-&gt;error block
      </TABLE>
    </UL>
    <B>Interrupts</B>
    <UL>
      Interrupt status is unaltered<BR>
      Fast interrupts are enabled
    </UL>
    <B>Processor mode</B>
    <UL>
      Processor is in SVC mode
    </UL>
    <B>Re-entrancy</B>
    <UL>
      SWI is not re-entrant
    </UL>
    <B>Use</B>
    <UL>
      This SWI will open a stream using the specified channel information and will return a
      handle which should be quoted in further calls to some of the SVBmip SWIs.
      <P>
      If R0:0 is set, R1 contains the channel number to use. This is the recommended form of
      this SWI. <B>Using the R0:0 clear form is deprecated</B>.
      <P>
      If R0:1 is clear, SVBmip will call the UDPv module to tell it to prepare for incoming
      data and shut down at appropriate times. If set, this step is omitted, allowing external
      callers to perform these tasks at different moments if they believe it is sensible to
      do so.
      <P>
      If the channel number quoted does not appear in the configured channel
      information, a &quot;Not Subscribed&quot; error will be returned (note that this
      may not result in a V set return on the SWI if system variable are being used
      to report errors).
      <P>
      If the channel number is valid, any current stream will be left (ie: video
      playback will be terminated), and the new stream joined. An error will be
      raised if the join is unsuccessful. Future versions of the SVBmip module
      <I>may not</I> leave playing channels on calling this SWI (for example, if
      multiple streams were supported). You <B>should not</B> rely on this behaviour.
      <P>
      <H4><I>For Backwards Compatibility Only</I></H4>
      <P>
      If R0:0 is clear, R1 contains a pointer to a ctrl-terminated string. This string is of
      one of the following formats:
      <UL>
        <CODE>'-channel &lt;number&gt;'</CODE> or<BR>
        <CODE>'-channel &lt;number&gt; -server &lt;IP group address&gt;'</CODE>
        <CODE>'-channel &lt;number&gt; -server &lt;IP group address and port&gt;'</CODE>
      </UL>
      The <B>-channel</B> switch indicates the channel number of the channel to start playing
      from. Including the <B>-server</B> switch will update the IP group address (and port
      number) for the specified channel in the channels list, then start playing it.
      <P>
      The SVBmip module maintains a count of joins and leaves for each channel.
      Specifying a new <B>-server</B> for a channel causes this count to be reset for that
      channel. If the current server is specified with <B>-server</B>, the count is not
      reset.
      <P>
      The reserved channel numbers for channel up and channel down (1111110 and 1111111
      respectively) may be used in this string, but this is not necessarily going to remain
      supported in future versions of the SVBmip module.
    </UL>
    <HR>


    <H3 ALIGN="RIGHT">SVB_CloseStream<BR>(SWI 0x43C82)</H3>
    <B>On entry</B>
    <UL>
      <TABLE BORDER="0">
        <TR><TD VALIGN="TOP">R0 -<TD>flags (should be zero)
        <TR><TD VALIGN="TOP">R1 -<TD>handle (as returned by <B>SWI OpenStream</B>)
      </TABLE>
    </UL>
    <B>On exit</B>
    <UL>
      All preserved
    </UL>
    <B>Interrupts</B>
    <UL>
      Interrupt status is unaltered<BR>
      Fast interrupts are enabled
    </UL>
    <B>Processor mode</B>
    <UL>
      Processor is in SVC mode
    </UL>
    <B>Re-entrancy</B>
    <UL>
      SWI is not re-entrant
    </UL>
    <B>Use</B>
    <UL>
      If the specified channel is currently playing, a leave will be sent for that multicast
      group and the stream stopped. If streaming was not in progress, no error will be raised.
      However, the statistic indicating the number of leaves for the specified channel will
      be incremented.
    </UL>
    <HR>


    <H3 ALIGN="RIGHT">SVB_CheckEndOfStream<BR>(SWI 0x43C83)</H3>
    <B>On entry</B>
    <UL>
      <TABLE BORDER="0">
        <TR><TD VALIGN="TOP">R0 -<TD>flags (should be zero)
        <TR><TD VALIGN="TOP">R1 -<TD>handle (as returned by <B>SWI OpenStream</B>)
      </TABLE>
    </UL>
    <B>On exit</B>
    <UL>
      <TABLE BORDER="0">
        <TR><TD VALIGN="TOP">R0 -<TD>end of stream indication: zero if <B>not</B> at end of
                                     stream, non-zero if at end of stream.
        <TR><TD VALIGN="TOP">R1 -<TD>preserved
        <TR><TD VALIGN="TOP">R2 -<TD>0
        <TR><TD VALIGN="TOP">R3 -<TD>0
      </TABLE>
    </UL>
    <B>Interrupts</B>
    <UL>
      Interrupt status is unaltered<BR>
      Fast interrupts are enabled
    </UL>
    <B>Processor mode</B>
    <UL>
      Processor is in SVC mode
    </UL>
    <B>Re-entrancy</B>
    <UL>
      SWI is not re-entrant
    </UL>
    <B>Use</B>
    <UL>
      This SWI can be polled to check the status of a playing stream. If the stream is still
      playing, zero will be returned in R0. However, if R1 does not contain a valid handle,
      the error &quot;Invalid SVB handle&quot; will be returned.
      <P>
      <B>NOTE:</B>
      <P>
      The end of stream checking is done by periodically asking the MPEGControl module if it
      has decoded any data since the last time it was queried. The regularity, in centiseconds,
      of this checking is controlled by the system variable <B>&lt;SVB$PollEvery&gt;</B>.
      <P>
      If the MPEGControl module has not decoded any data since the last poll, SVBmip will start
      a timer (of <B>&lt;SVB$EOSTimeout&gt;</B> seconds in length). If there has still been no
      data decoded after this timeout, <B>SWI CheckEndOfStream</B> will return with a non-zero
      value in R0.
    </UL>
    <HR>


    <H3 ALIGN="RIGHT">SVB_SetSpeed<BR>(SWI 0x43C84)</H3>
    <B>On entry</B>
    <UL>
      <TABLE BORDER="0">
        <TR><TD VALIGN="TOP">R0 -<TD>flags (should be zero)
        <TR><TD VALIGN="TOP">R1 -<TD>handle (as returned by <B>SWI OpenStream</B>)
        <TR><TD VALIGN="TOP">R2 -<TD>zero = freeze,<BR>
                                     one = play (normal speed),<BR>
                                     all other values are reserved
      </TABLE>
    </UL>
    <B>On exit</B>
    <UL>
      All preserved
    </UL>
    <B>Interrupts</B>
    <UL>
      Interrupt status is unaltered<BR>
      Fast interrupts are enabled
    </UL>
    <B>Processor mode</B>
    <UL>
      Processor is in SVC mode
    </UL>
    <B>Re-entrancy</B>
    <UL>
      SWI is not re-entrant
    </UL>
    <B>Use</B>
    <UL>
      This SWI allows playback to be frozen. Alteration of speed is <B>not</B>
      supported in this variant of the SVBmip module (because the module cannot
      have any control over the rate of the multicast stream).
      <P>
      It should be noted that playback will resume from where ever the stream is
      currently at rather than resuming from the moment of pause.
      <P>
      If R0 contains a non-zero value on entry, this SWI will return immediately
      with the error &quot;Bad value in R0 for SVBmip SWI call&quot;.
      <P>
      Invalid values passed in R2 will return the error
      &quot;Bad value in R2 for SVB_SetSpeed SWI&quot;.
      <P>
      Where the value passed in R1 is not valid, the error
      &quot;Invalid SVB handle&quot; will be returned.
    </UL>
    <HR>


    <H3 ALIGN="RIGHT">SVB_SetPosition<BR>(SWI 0x43C85)</H3>
    <B>On entry</B>
    <UL>
      -
    </UL>
    <B>On exit</B>
    <UL>
      All preserved
    </UL>
    <B>Interrupts</B>
    <UL>
      Interrupt status is unaltered<BR>
      Fast interrupts are enabled
    </UL>
    <B>Processor mode</B>
    <UL>
      Processor is in SVC mode
    </UL>
    <B>Re-entrancy</B>
    <UL>
      SWI is not re-entrant
    </UL>
    <B>Use</B>
    <UL>
      This SWI is not appropriate in this variant of the SVBmip module. It will return
      immediately with all registers preserved.
    </UL>
    <HR>


    <H3 ALIGN="RIGHT">SVB_ReadNPT<BR>(SWI 0x43C86)</H3>
    <B>On entry</B>
    <UL>
      -
    </UL>
    <B>On exit</B>
    <UL>
      <TABLE BORDER="0">
        <TR><TD VALIGN="TOP">R0 -<TD>minus one
      </TABLE>
    </UL>
    <B>Interrupts</B>
    <UL>
      Interrupt status is unaltered<BR>
      Fast interrupts are enabled
    </UL>
    <B>Processor mode</B>
    <UL>
      Processor is in SVC mode
    </UL>
    <B>Re-entrancy</B>
    <UL>
      SWI is not re-entrant
    </UL>
    <B>Use</B>
    <UL>
      This SWI is not appropriate in this variant of the SVBmip module. It will return
      immediately with R0 set to -1 and all other registers preserved.
    </UL>
    <HR>


    <H3 ALIGN="RIGHT">SVB_ReadChannel<BR>(SWI 0x43C87)</H3>
    <B>On entry</B>
    <UL>
      <TABLE BORDER="0">
        <TR><TD VALIGN="TOP">R0 -<TD>flags (bits 2..31 reserved, should be zero)
        <TR><TD VALIGN="TOP">R1 -<TD>pointer to buffer or zero
        <TR><TD VALIGN="TOP">R2 -<TD>size (in bytes) of the buffer (if R1 is non-zero on entry)
      </TABLE>
    </UL>
    <B>On exit</B>
    <UL>
      <TABLE BORDER="0">
        <TR><TD VALIGN="TOP">R0 -<TD>current channel number, or -1 if no channel is playing
        <TR><TD VALIGN="TOP">R1 -<TD>preserved
        <TR><TD VALIGN="TOP">R2 -<TD>free space in buffer (-ve if buffer was too small)
        <TR><TD VALIGN="TOP">R3 -<TD>Channel number below current channel (only if R0:1 set on entry)
        <TR><TD VALIGN="TOP">R4 -<TD>Channel number above current channel (only if R0:1 set on entry)
      </TABLE>
    </UL>
    <B>Interrupts</B>
    <UL>
      Interrupt status is unaltered<BR>
      Fast interrupts are enabled
    </UL>
    <B>Processor mode</B>
    <UL>
      Processor is in SVC mode
    </UL>
    <B>Re-entrancy</B>
    <UL>
      SWI is not re-entrant
    </UL>
    <B>Use</B>
    <UL>
      If a stream is currently playing, this SWI will report the current channel number in R0 and set
      <B>&lt;SVB$ChannelName&gt;</B> to the textual name associated with this channel.
      <P>
      If no stream is being played, R0 will contain -1 on exit and <B>&lt;SVB$ChannelName&gt;</B> will
      be set to '&lt;unset&gt;'.
      <P>
      If R1 is non-zero on entry, it contains a pointer to a buffer. This buffer will be filled as
      follows:
      <OL>
        <LI>If R0:0 is clear, a copy of the <A HREF="#Structure">channel information structure</A>
            (from the channels list) will be returned in the buffer.
        <LI>If R0:0 is set, a zero-terminated string for this channel, in the same format as a line
            from the Channels file, will be returned in the buffer.
      </OL>
      R2 on exit contains the free space in bytes left in the buffer. If negative, there was insufficient
      room in the buffer for a copy of the structure or string.
      <P>
      R3 and R4 allow channel-up and channel-down functionality to easily be implemented. For this
      purpose, the channels list is effectively circular; if the current channel is the first in the
      list when calling this SWI, R3 will contain the channel number of the last channel on exit. If
      the current channel is the last in the list, R4 will contain the number of the first on exit.
      <P>
      <B>NOTES:</B>
      <P>
      If R0:1 is clear on entry, R3 and R4 will be preserved on exit.<BR>
      If R1 is zero on entry, both R1 and R2 will be preserved on exit.<BR>
      In future versions of this module, which support multiple streams, the behaviour of this
      SWI call is undefined.
    </UL>
    <HR>


    <H3 ALIGN="RIGHT">SVB_ReadChannelNames<BR>(SWI 0x43C88)</H3>
    <B>On entry</B>
    <UL>
      <TABLE BORDER="0">
        <TR><TD VALIGN="TOP">R0 -<TD>flags (bits 1..31 reserved, should be zero)
      </TABLE>
    </UL>
    <B>On exit</B>
    <UL>
      All preserved
    </UL>
    <B>Interrupts</B>
    <UL>
      Interrupt status is unaltered<BR>
      Fast interrupts are enabled
    </UL>
    <B>Processor mode</B>
    <UL>
      Processor is in SVC mode
    </UL>
    <B>Re-entrancy</B>
    <UL>
      SWI is not re-entrant
    </UL>
    <B>Use</B>
    <UL>
      This SWI will prod the module into attempting to read the configuration file,
      if it has not already done so beforehand (R0:0 is clear), or unconditionally
      (R0:0 is set). If successful, the new channels list will replace the existing
      one.
      <P>
      If any channel is playing when this SWI is called, the error &quot;SVB stream is active&quot;
      will be returned.
    </UL>
    <HR>


    <H3 ALIGN="RIGHT">SVB_AddChannel <I>(new)</I><BR>(SWI 0x43CBF)</H3>
    <B>On entry</B>
    <UL>
      <TABLE BORDER="0">
        <TR><TD VALIGN="TOP">R0 -<TD>flags (bits 1..31 reserved, should be zero)<BR>
                                     bit 0 clear - add to end of list<BR>
                                     bit 0 set - add <I>before</I> channel in R2
        <TR><TD VALIGN="TOP">R1 -<TD>pointer to string (same format as a line from Channels file)
        <TR><TD VALIGN="TOP">R2 -<TD>channel number to add <I>before</I> (unused if R0:0 is clear)
      </TABLE>
    </UL>
    <B>On exit</B>
    <UL>
      All preserved
    </UL>
    <B>Interrupts</B>
    <UL>
      Interrupt status is unaltered<BR>
      Fast interrupts are enabled
    </UL>
    <B>Processor mode</B>
    <UL>
      Processor is in SVC mode
    </UL>
    <B>Re-entrancy</B>
    <UL>
      SWI is not re-entrant
    </UL>
    <B>Use</B>
    <UL>
      This SWI will add a new channel to the channels list. New channel information will
      be positioned either at the end of the list (R0:0 clear), or before the entry for the channel
      specified in R2 (R0:0 set).
      <P>
      An error will be returned if:
      <UL>
        The parameters contain invalid values (&quot;Bad channel&quot;);<BR>
        R0:0 is set and the channel in R2 is not in the list (&quot;Bad channel&quot;);<BR>
        The channel in R1 is in already in the list (&quot;SVB channel is already defined&quot;).
      </UL>
      The string pointed to by R1 is of exactly the same format as a line from the Channels file
      (see the section on the <A HREF="#Chapter61">channel file format</A> for more information on
      the correct format of these strings). If this string is a comment or an empty line, this SWI
      will exit will all registers preserved.
    </UL>
    <HR>


    <H3 ALIGN="RIGHT">SVB_RemoveChannel <I>(new)</I><BR>(SWI 0x43CBE)</H3>
    <B>On entry</B>
    <UL>
      <TABLE BORDER="0">
        <TR><TD VALIGN="TOP">R0 -<TD>flags (should be zero)
        <TR><TD VALIGN="TOP">R1 -<TD>channel number
      </TABLE>
    </UL>
    <B>On exit</B>
    <UL>
      All preserved
    </UL>
    <B>Interrupts</B>
    <UL>
      Interrupt status is unaltered<BR>
      Fast interrupts are enabled
    </UL>
    <B>Processor mode</B>
    <UL>
      Processor is in SVC mode
    </UL>
    <B>Re-entrancy</B>
    <UL>
      SWI is not re-entrant
    </UL>
    <B>Use</B>
    <UL>
      This SWI will remove the specified channel entry from the channels list.
      <P>
      If it is not found, the error &quot;Bad channel&quot; will be returned.
      <P>
      If the specified channel is playing, the error &quot;SVB stream is active&quot;
      will be returned.
    </UL>
    <HR>


    <H3 ALIGN="RIGHT">SVB_UpdateChannel <I>(new)</I><BR>(SWI 0x43CBD)</H3>
    <B>On entry</B>
    <UL>
      <TABLE BORDER="0">
        <TR><TD VALIGN="TOP">R0 -<TD>flags (bits 1..31 reserved, should be zero)<BR>
                                     bit 0 clear - preserve position in list<BR>
                                     bit 0 set - add <I>before</I> channel in R2
        <TR><TD VALIGN="TOP">R1 -<TD>pointer to string (same format as a line from Channels file)
        <TR><TD VALIGN="TOP">R2 -<TD>channel number to move <I>before</I> (unused if R0:0 is clear)
      </TABLE>
    </UL>
    <B>On exit</B>
    <UL>
      All preserved
    </UL>
    <B>Interrupts</B>
    <UL>
      Interrupt status is unaltered<BR>
      Fast interrupts are enabled
    </UL>
    <B>Processor mode</B>
    <UL>
      Processor is in SVC mode
    </UL>
    <B>Re-entrancy</B>
    <UL>
      SWI is not re-entrant
    </UL>
    <B>Use</B>
    <UL>
      This SWI may be used to update some of the attributes associated with a given entry in
      the channels list. If the specified channel is not in the list, the error
      &quot;Bad channel&quot; will be returned.
      <P>
      If the specified channel is playing, the error &quot;SVB stream is active&quot;
      will be returned.
      <P>
      You may change the group IP address, port number, textual description, extra parameters
      string and the position in the list. As the channel number is the unique identifier for
      that entry in the list, it cannot be changed.
      <P>
      If R0:0 is set, the channel entry will be moved in the channels list to be immediately
      <I>before</I> the entry for the channel specified in R2. If that channel cannot be found,
      the error &quot;Bad channel&quot; will be returned.
    </UL>
    <HR>


    <H3 ALIGN="RIGHT">SVB_EnumerateChannels <I>(new)</I><BR>(SWI 0x43CBC)</H3>
    <B>On entry</B>
    <UL>
      <TABLE BORDER="0">
        <TR>
          <TD VALIGN="TOP">R0 -</TD>
          <TD>
            Flags:<br>
            <table border="0" cellspacing="0" cellpadding="0">
              <tr valign="top" align="left"><th>Bit(s)</th><th>&nbsp;</th><th>Meaning</th></tr>
              <tr valign="top">
                <td>0</td>
                <td>&nbsp;</td>
                <td>
                  Determines format of data written into given buffer (see below)
                </td>
              </tr>
              <tr valign="top">
                <td>1</td>
                <td>&nbsp;</td>
                <td>
                  If clear, R1 must be zero on the first call, else R1 holds a specific channel
                  number to read information about
                </td>
              </tr>
              <tr valign="top">
                <td>2-31</td>
                <td>&nbsp;</td>
                <td>Reserved (must be zero)</td>
              </tr>
            </table>
          </TD>
        <TR><TD VALIGN="TOP">R1 -<TD>zero to start, or channel number to start at (returns the
                                     entries <I>following</I> this one)
        <TR><TD VALIGN="TOP">R2 -<TD>pointer to buffer
        <TR><TD VALIGN="TOP">R3 -<TD>size (in bytes) of the buffer
        <TR><TD VALIGN="TOP">R4 -<TD>number of entries to read
      </TABLE>
    </UL>
    <B>On exit</B>
    <UL>
      <TABLE BORDER="0">
        <TR><TD VALIGN="TOP">R0 -<TD>preserved
        <TR><TD VALIGN="TOP">R1 -<TD>zero - the buffer was too small for a single entry<BR>
                                     minus one - no more to read<BR>
                                     channel number - last channel in buffer (more to read)
        <TR><TD VALIGN="TOP">R2 -<TD>preserved
        <TR><TD VALIGN="TOP">R3 -<TD>free space in buffer (may be negative if no room)
        <TR><TD VALIGN="TOP">R4 -<TD>number of channels in buffer
      </TABLE>
    </UL>
    <B>Interrupts</B>
    <UL>
      Interrupt status is unaltered<BR>
      Fast interrupts are enabled
    </UL>
    <B>Processor mode</B>
    <UL>
      Processor is in SVC mode
    </UL>
    <B>Re-entrancy</B>
    <UL>
      SWI is not re-entrant
    </UL>
    <B>Use</B>
    <UL>
      This SWI can be used to enumerate the channels list for the SVBmip module from
      start to end into a buffer. This may take several calls to complete the operation.
      If R0:0 is clear on entry, the buffer will be filled with copies of the channel
      entries (as documented below), otherwise zero-terminated strings of the same format
      as a line from the Channels file will be returned in the buffer.
      <P>
      If R0:1 is set on entry, you should pass a channel number in R1. R4 on entry is
      irrelevant, and on exit will hold a value of 1 or 0 depending on whether the
      buffer given was large enough. The value of R1 on exit should be ignored.
      <p>
      If R0:0 is clear on entry, then The first time the SWI is called, you should pass
      zero in R1. On exit, R1 will contai one of:
      <OL>
        <LI>the channel number of the last channel entry in the buffer (not finished);
        <LI>minus one if finished (there are no more channels to enumerate);
        <LI>zero if the buffer was not big enough for a single channel entry (or string).
      </OL>
      R4 will contain a count of the number of complete entries (or strings) in the buffer.
      Only complete entries (or strings) are written to the buffer. The content of the
      remaining space (if any) is undefined.
      <P>
      If R1 is not minus one on exit, you should call this SWI again with R4 set appropriately
      to enumerate information on the entries after the one specified in R1. Where R3 is negative
      on exit, it indicates the negative of the number of extra bytes required to fit the
      next entry.
      <P>
      If R1 is minus one on exit, there are no more entries to enumerate. Note that R1 may
      contain minus one after the first call if the list is empty or the buffer was large
      enough for all entries.
      <P>
      <A NAME="Structure">The format of a channel entry in the buffer is as follows:</A>
      <P>
      <CENTER>
        <TABLE WIDTH="85%" BORDER="1" CELLSPACING="2" CELLPADDING="4" BGCOLOR="#F3F3F3">
          <TR BGCOLOR="#C0C0C0"><TD><B><I>Bytes:</I></B> <TD><B><I>Contents:</I></B>
          <TR><TD>0  <TD>Size (in bytes) this entry in the buffer
          <TR><TD>4  <TD>Channel handle as allocated by MPEGControl
          <TR><TD>8  <TD>Channel number (positive, non-zero, 32bit integer)
          <TR><TD>12 <TD>Pointer to the channel name string<SUP>+</SUP>
          <TR><TD>16 <TD>Pointer to additional parameter string (or zero)<SUP>+</SUP>
          <TR><TD>20 <TD>Channel status flags word
          <TR><TD>24 <TD>Count of join requests for this channel (unsigned integer)
          <TR><TD>28 <TD>Count of leave requests for this channel (unsigned integer)
          <TR><TD>32 <TD>UDP port number (unsigned integer)
          <TR><TD>36 <TD>Multicast group IP address (as a <CODE>struct in_addr</CODE>)
          <TR><TD>40 <TD>Channel name string (up to 63 bytes, zero terminated)
          <TR><TD>.. <TD>Additional parameter string (up to 255 bytes, zero terminated)
        </TABLE>
      </CENTER>
      <P>
      <SUP><B>+</B></SUP> The strings pointed to by this structure are word-aligned and
      zero-terminated. Lengths quoted exclude the terminator. The additional parameter
      string may not be present if bytes 32..35 are zero.
      <P>
      The status flags currently defined are:
      <P>
      <CENTER>
        <TABLE WIDTH="85%" BORDER="1" CELLSPACING="2" CELLPADDING="4" BGCOLOR="#F3F3F3">
          <TR BGCOLOR="#C0C0C0"><TD><B><I>Bit:</I></B> <TD><B><I>Meaning when set:</I></B>
          <TR><TD>0  <TD>Always set for backwards compatibility
          <TR><TD>1  <TD>Channel is playing
          <TR><TD>2  <TD>Channel is frozen (paused)
        </TABLE>
      </CENTER>
      <P>
      Note that the current definition of a &nbsp; <CODE>struct in_addr</CODE> &nbsp; may
      be found in the following C header file: <CODE>Export.Lib.TCPIPLibs.netinet.h.in</CODE>.
      This definition may change over time (for example, if IP addresses start using more
      than 32 bits).
      <P>
      Note also that any successful calls to SWI ReadChannelNames, AddChannel, RemoveChannel
      and UpdateChannel will cause the enumerate SWI to restart from the beginning of the
      channels list, whatever value is passed into R1.
    </UL>
    <P><HR><P>

<!-- ******************************* *Command Documentation ************************************ -->

    <H3><I><A HREF="#Chapter7">7.3</A> <A NAME="Chapter73">Command Documentation</A></I></H3>
    The SVBmip module provides two *Commands:
    <P>
    <CENTER>
      <TABLE WIDTH="96%" BORDER="0">
        <TR><TD VALIGN="TOP"><B>Syntax:</B> <TD><CODE>*SVBinfo <I>(new)</I></CODE>
        <TR><TD VALIGN="TOP"><B>Use:</B>    <TD>Reports status information and statistics:
          <TABLE BORDER="0">
            <TR><TD><CODE>Current channel</CODE>    <TD>the current channel number and name (or -1 if none playing)
            <TR><TD><CODE>Number of channels</CODE> <TD>the number of entries in the channels list
            <TR><TD><CODE>Channel overlaps</CODE>   <TD>the number of OpenStream calls to a channel which is open
            <TR><TD><CODE>Channel underlaps</CODE>  <TD>the number of CloseStream calls to a channel which is closed
          </TABLE>
          <P>
          and for each channel defined...
          <P>
          <TABLE BORDER="0">
            <TR><TD><CODE>Channel ID</CODE>     <TD>the channel number and textual channel name
            <TR><TD><CODE>Group Addr</CODE>     <TD>the multicast group IP address of this channel
            <TR><TD><CODE>MPEG Port</CODE>      <TD>the MPEG port number for this channel
            <TR><TD><CODE>Channel joins</CODE>  <TD>number of join requests for this channel
            <TR><TD><CODE>Channel leaves</CODE> <TD>number of leave requests for this channel
            <TR><TD><CODE>Channel flags</CODE>  <TD>channel status flags
          </TABLE>
          <P>
          You are advised to use SWI <B>SVB_EnumerateChannels</B> to extract the channel information.
        <TR><TD>&nbsp; <TD>&nbsp;
        <TR><TD VALIGN="TOP"><B>Syntax:</B> <TD><CODE>*VPinfo</CODE>
        <TR><TD VALIGN="TOP"><B>Use:</B>    <TD>Same as *SVBinfo. <B>This command is deprecated</B>. Use
                                                *SVBinfo in preference.
      </TABLE>
    </CENTER>
    <P>
    Some example output from the *SVBinfo command is given below:
    <P>
<UL><PRE>
*SVBinfo
Current channel         3 (ITV)
Number of channels      2
Channel overlaps        0
Channel underlaps       0

Channels list...

Channel ID              1 (BBC.1)
Group Addr              225.9.9.4
MPEG Port               8001
Channel joins           3
Channel leaves          3
Channel flags           &amp;00000001

Channel ID              3 (ITV)
Group Addr              225.9.9.5
MPEG Port               8003
Channel joins           1
Channel leaves          0
Channel flags           &amp;00000001
</PRE></UL>
    <P><HR><P>

    <H2><I><A HREF="#Contents">8.</A> <A NAME="Chapter8">Deliverables</A></I></H2>
    The deliverable of this specification is the source code and relocatable
    module, SVBmip, which implements the interfaces defined by this specification
    and passes the acceptance tests enumerated below.
    <P><HR><P>

    <H2><I><A HREF="#Contents">9.</A> <A NAME="Chapter9">Outstanding Issues</A></I></H2>
    There are no outstanding issues relating to this document.
    <P><HR><P>

    <H2><I><A HREF="#Contents">10.</A> <A NAME="Chapter10">Development Test Strategy</A></I></H2>
    A program will be written to excercise all of the SWI calls and check for register and memory
    corruption and leaks. This program will allow the acceptance tests (outlined in the next
    chapter) to be carried out.
    <P><HR><P>

    <H2><I><A HREF="#Contents">11.</A> <A NAME="Chapter11">Acceptance Tests</A></I></H2>
    The following tests are related to the parsing of channel and server information:
    <UL>
      <LI>The module object code should be less than 16KBytes in size;
      <LI>SVBmip will use less than 16KBytes of workspace, and less than 400 bytes per
          entry in the channels list;
      <LI>Changing channels between valid, streaming channels, should take less than five
          seconds from the end of the first stream to the first displayed frame of the
          second;
      <LI>Acceptance of valid IP addresses in correct dotted-quad format;
      <LI>Rejection of IP addresses in incorrect format or with invalid octets:<BR>
          - First octet must be in multicast address range (224-239)<BR>
          - Last octet must not be 0 or 255
      <LI>Use of the reserved channels, 1111111 and 1111110 (decimal), has no effect;
      <LI>Blank lines and comments in the channels file have no effect;
      <LI>Empty channels files do not generate an error.
    </UL>
    The following tests are related to the use of the module:
    <UL>
      <LI>All the SWIs behave as specified in this document;
      <LI>No memory loss should occur when exercising the SWIs other than for adding channels
          to the list;
      <LI>Use of channel up when playing the top-most stream changes to the lowest stream;
      <LI>Use of channel down when playing the lowest stream changes to the top-most stream;
      <LI>Calling close stream, when no streams are playing, has no effect;
      <LI>Calling open stream, when a different one is playing, first closes the former;
      <LI>Calling open stream, when the same stream is already playing, has no effect.
    </UL>
    <P><HR><P>

    <H2><I><A HREF="#Contents">12.</A> <A NAME="Chapter12">Bibliography</A></I></H2>
    The following documents are of relevance to the SVBmip module:
    <P>
    <CENTER>
      <TABLE WIDTH="85%" BORDER="1" CELLSPACING="2" CELLPADDING="4" BGCOLOR="#F3F3F3">
        <TR BGCOLOR="#C0C0C0"><TD><B><I>Ref:</I></B>  <TD><B><I>DO Number:</I></B>  <TD><B><I>Document title:</I></B>
        <TR><TD>[1]
            <TD>-
            <TD>Internet Group Management Protocol, Version 2 (RFC 2236)
        <TR><TD>[2]
            <TD><A HREF="http://www.internal.acorn.co.uk/do/doroot/DO/Current/2x02/FS/2302769-01.htm">2302,769/FS</A>
            <TD>Multicast Video Streaming Reception SVBmip Module (Issue 1)
        <TR><TD>[3]
            <TD><A HREF="http://www.internal.acorn.co.uk/do/doroot/DO/Current/2x09/FS/2309306-01.htm">2309,306/FS</A>
            <TD>MPEGControl 2.xx Module Software Functional Specification
        <TR><TD>[4]
            <TD><A HREF="http://www.internal.acorn.co.uk/do/doroot/DO/Current/2x09/FS/2309309-01.htm">2309,309/FS</A>
            <TD>MPEGSystem Module Software Functional Specification
        <TR><TD>[5]
            <TD><A HREF="http://www.internal.acorn.co.uk/do/doroot/DO/Current/2x09/FS/2309330-01.htm">2309,330/FS</A>
            <TD>MPEGTransport Module Software Functional Specification
        <TR><TD>[6]
            <TD>-
            <TD><CODE>Sources/RiscOS/Sources/Networking/Video/UDPv</CODE>
        <TR><TD>[7]
            <TD>1403,125/TA
            <TD>Reference to the MPEG2Video module may be found in the PRM (v6)
      </TABLE>
    </CENTER>
    <P><HR><P>

    <H2><I><A HREF="#Contents">13.</A> <A NAME="Chapter13">Glossary</A></I></H2>
    <CENTER>
      <TABLE WIDTH="85%" BORDER="0">
        <TR><TD>dotted-quad <TD>The textual representation of an IP address as four decimal
                                octets separated by dot characters, eg: 136.170.1.1
        <TR><TD>EPG         <TD>Electronic Program Guide
        <TR><TD>HTML        <TD>Hyper Text Mark-up Language (for document layout)
        <TR><TD>IGMP        <TD>Internet Group Management Protocol
        <TR><TD>IP          <TD>Internet protocol
        <TR><TD>MPEG        <TD>Motion Picture Experts Group (a movie file/stream format)
        <TR><TD>STB         <TD>Set-top box
        <TR><TD>SVB         <TD>Switched video broadcast
        <TR><TD>SWI         <TD>SoftWare Interrupt
        <TR><TD>UDP         <TD>User Datagram Protocol
      </TABLE>
    </CENTER>
    <P><HR><P>

    <H2><I><A HREF="#Contents">14.</A> <A NAME="Chapter14">Issue History</A></I></H2>
    <CENTER>
      <TABLE WIDTH="75%" BORDER="1" CELLSPACING="2" CELLPADDING="4" BGCOLOR="#F3F3F3">
        <TR BGCOLOR="#C0C0C0"><TD><B><I>Issue:</I></B>  <TD><B><I>Date:</I></B>  <TD><B><I>Notes:</I></B>
        <TR><TD>A  <TD>03-Aug-1999  <TD>First draft
        <TR><TD>B  <TD>17-Aug-1999  <TD>Second draft (after initial feedback)
        <TR><TD>C  <TD>23-Aug-1999  <TD>Third draft (updated after spec review)
        <TR><TD>1  <TD>24-Aug-1999  <TD>Small corrections. Released to DO (AMR 5292)
        <TR><TD>2  <TD>17-Sep-1999  <TD>Fixed HTML links to DO (which had moved all the documents),
                                        Updated all parts after writing actual module (no ECO allocated)
        <TR><TD>2  <TD>21-Feb-2000  <TD>New flag bit in OpenStream to say "don't call UDPv" and in
                                        EnumerateChannels to get specific channel information rather than
                                        waste time finding out about all of them
                                        (andrew.hodgkinson@pacemicro.com, ECO 4304)
      </TABLE>
    </CENTER>
    <P>

<!-- ******************************* COPYRIGHT ************************************ -->

    <TABLE WIDTH="100%" BORDER="1" CELLPADDING="4">
      <TR><TD WIDTH="50%" VALIGN=TOP>
            <SMALL>
              This document is issued under license and must not be copied,
              reproduced or disclosed in part or whole outside the terms of the
              license.
            </SMALL>
          <TD WIDTH="50%" VALIGN=TOP>
            <SMALL>&copy; Pace Micro Technology plc 2000</SMALL>
    </TABLE>

  </BODY>
</HTML>
