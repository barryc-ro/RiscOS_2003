/*
 * File:      mipSWI.c
 *
 * Author:    Steve Revill
 *
 * Purpose:   Implementation of SWI routines and related functionality for SVBmip module
 *
 * Copyright: (c) Pace Micro Technology plc. 1999
 *
 * History:
 *
 *   SAR - 20/09/99 - Created
 *
 */

/*- - - - - - - - - - - - - - - - - - - - - - INCLUDED FILES - - - - - - - - - - - - - - - - - - - - - - */

#include <stdlib.h>
#include <string.h>
#include <swis.h>

#include <UDPv.h> /* Exported by UDPv's !MkExport */

#include "socklib.h"
#include "net/if.h"

#include "Module.h"
#include "mipSWI.h"

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE MACRO DEFINITIONS - - - - - - - - - - - - - - - - -*/

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC VARIABLES - - - - - - - - - - - - - - - - - - - - - */

u_int overlaps  = 0;
u_int underlaps = 0;

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE STRUCTURES - - - - - - - - - - - - - - - - - - - - */

/* Argument structure for IP_ADD_MEMBERSHIP and IP_DROP_MEMBERSHIP */
struct ip_mreq mreq;

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE VARIABLES - - - - - - - - - - - - - - - - - - - - -*/

static u_int         enum_remaining = 0;               /* Number of channels left to enumerate for SWI EnumerateChannels */
static ChannelEntry *enum_channel   = NULL;            /* Pointer to last channel enumerated by SWI EnumerateChannels */
static u_int         temp_channels;                    /* Temporary copy of global ChannelListLength */
static ChannelEntry *temp_start;                       /* Temporary copy of global ChannelListStart */

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE FUNCTIONS - - - - - - - - - - - - - - - - - - - - -*/

/*
 * On entry
 *
 *   -
 *
 * On exit
 *
 *   -
 *
 * Use
 *
 *   This routine is called by any other routine which alters the order or
 *   contents of the channels list. This will cause the EnumerateChannels
 *   SWI to effectively restart any iterative enumeration from the notional
 *   start of the channels list (as if called for the first time).
 *
 */
static void Reset_enumeration(void);

/*
 * On entry
 *
 *   Pointer to channel entry
 *
 * On exit
 *
 *   Pointer to error block if an error was detected, or NULL if OK
 *   (global ErrorPtr points to error block if unsuccessful)
 *
 * Use
 *
 *   Send a multicast join request to the group for the specified channel
 *   entry (using the UDP port for that channel).
 *
 *   If the function completes successfully, NULL will be returned. Otherwise,
 *   it will return a pointer to a RiscOS error block for the appropriate
 *   error (and the global ErrorPtr will also point to this block).
 *
 */
static _kernel_oserror *Join_mip_group(ChannelEntry *entry);

/*
 * On entry
 *
 *   Pointer to channel entry
 *
 * On exit
 *
 *   Pointer to error block if an error was detected, or NULL if OK
 *   (global ErrorPtr points to error block if unsuccessful)
 *
 * Use
 *
 *   Send a multicast leave request to the group for the specified channel
 *   entry (using the UDP port for that channel).
 *
 *   If the function completes successfully, NULL will be returned. Otherwise,
 *   it will return a pointer to a RiscOS error block for the appropriate
 *   error (and the global ErrorPtr will also point to this block).
 *
 */
static _kernel_oserror *Leave_mip_group(ChannelEntry *entry);

/*
 * On entry
 *
 *   Pointer to a struct in_addr
 *
 * On exit
 *
 *   TRUE - successful, FALSE - failed
 *
 * Use
 *
 *   Read the IP address of the STB and set-up a UDP socket. Returns TRUE
 *   or FALSE depending upon the success of the operation.
 *
 */
static BOOL Read_my_ip_address(struct in_addr *adr);

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC FUNCTION IMPLEMENTATIONS - - - - - - - - - - - - - -*/

_kernel_oserror *SetServer(_kernel_swi_regs *r)
{
  if (do_debug)
  {
    printf("SWI SetServer\n");
    /* Output a summary of the SVBmip channels list for debugging */
    Quick_enum();
  }

  UNUSED(r);

  return(NULL);
}

_kernel_oserror *OpenStream(_kernel_swi_regs *r)
{
  ChannelEntry *entry = NULL;
  ErrorPtr            = NULL;

  if (do_debug) printf("SWI OpenStream\n");


  /* Validate parameters */
  if (
       r->r[0] & ~(
                    SVB_OpenStream_NumberInR1 |
                    SVB_OpenStream_NoUDPvCall
                  )
     )
     return(Issue_error(ErrBadFlags));

  /* Extract the channel information from the parameters */

  if ((r->r[0] & SVB_OpenStream_NumberInR1) != 0)
  {
    entry = Number_to_channel(r->r[1]);
  }
  else
  {
    u_int number;

    /* Parse the OpenStream SWI to get a "-channel" number (and do "-server" cludge) */
    Init_parser( (char *)(r->r[1]), "OpenStream string", strlen((char *)(r->r[1])) );
    number = Open_param();
    Exit_parser();

    /* Handle the old-style channel up and down parameter */
#ifdef MultipleStreams
    /* NOT IMPLEMENTED */
#else
    if (ErrorPtr == NULL)
    {
      switch (number)
      {
        case(ChannelUp):
        {
          if (open_stream)
            entry = open_stream -> next;
          else
            Issue_error(ErrBadChan);
          break;
        }
        case(ChannelDown):
        {
          if (open_stream)
            entry = open_stream -> prev;
          else
            Issue_error(ErrBadChan);
          break;
        }
        default:
        {
          entry = Number_to_channel(number);
        }
      }
    }
#endif
  }

  if (ErrorPtr == NULL)
  {
    /* Issue a multicast join request if the channel specified is valid */
    if (entry)
    {
#ifndef MultipleStreams             /* With multiple stream support, SWI OpenStream does not close currently open streams */
      if (open_stream != NULL)
      {
        if (open_stream == entry) overlaps ++;
        Stop_streaming(open_stream);
      }
#endif

      Start_streaming(entry,
                      r->r[2],
                      (r->r[0] & SVB_OpenStream_NoUDPvCall) != 0 ? FALSE : TRUE);

      r->r[0] = entry -> number;
    }
    else
    {
      Issue_error(ErrSubscr);
    }
  }

  return(ErrorPtr);
}

_kernel_oserror *CloseStream(_kernel_swi_regs *r)
{
  ChannelEntry *entry;
  ErrorPtr = NULL;

  if (do_debug) printf("SWI CloseStream\n");

  /* Validate parameters */
  if (r->r[0])      return(Issue_error(ErrBadFlags));
  if (r->r[1] == 0) return(Issue_error(ErrBadHand));

  /* Send a multicast leave request and increment that statistic */
  entry = Number_to_channel(r->r[1]);
  if (entry)
  {
    if ((entry -> flags) & FlagPlaying)
      Stop_streaming(entry);
    else
      underlaps ++;
  }
  else
    Issue_error(ErrBadHand);

  return(ErrorPtr);
}

_kernel_oserror *CheckEndofStream(_kernel_swi_regs *r)
{
  ChannelEntry *entry;
  ErrorPtr = NULL;

  if (do_debug) printf("SWI CheckEndofStream\n");

  /* Validate parameters */
  if (r->r[0])      return(Issue_error(ErrBadFlags));
  if (r->r[1] == 0) return(Issue_error(ErrBadHand));

  /* Return an EOS indication for this stream */
  entry = (ChannelEntry *)r->r[1];
#ifdef MultipleStreams
  /* NOT IMPLEMENTED */
#else
  r->r[0] = endofstream;
  r->r[2] = 0;
  r->r[3] = 0;
  if (endofstream) Issue_error(endofstream);
#endif

  return(ErrorPtr);
}

_kernel_oserror *SetSpeed(_kernel_swi_regs *r)
{
  ChannelEntry *entry;
  ErrorPtr = NULL;

  if (do_debug) printf("SWI SetSpeed\n");

  /* Validate parameters */
  if (r->r[0])             return(Issue_error(ErrBadFlags));
  if (r->r[1] == 0)        return(Issue_error(ErrBadHand));
  if ((u_int) r->r[2] > 1) return(Issue_error(ErrPause));

  /* Toggle the freeze (pause) state of this stream */
  entry = Number_to_channel(r->r[1]);
  if (entry == NULL) return(Issue_error(ErrBadHand));

  if ((entry -> flags) & FlagPlaying)
  {
    (entry -> flags) ^= FlagFrozen;
/*     if ((entry -> flags) & FlagFrozen) */
/*       Freeze(entry);                   */
/*     else                               */
/*       Unfreeze(entry);                 */
  }

  return(ErrorPtr);
}

_kernel_oserror *SetPosition(_kernel_swi_regs *r)
{
  if (do_debug) printf("SWI SetPosition\n");

  UNUSED(r);

  return(NULL);
}

_kernel_oserror *ReadNPT(_kernel_swi_regs *r)
{
  if (do_debug) printf("SWI ReadNPT\n");

  r->r[0] = -1;
  return(NULL);
}

_kernel_oserror *ReadChannel(_kernel_swi_regs *r)
{
  ErrorPtr = NULL;

  if (do_debug) printf("SWI ReadChannel\n");

  /* Validate parameters */
  if (r->r[0] & ~3) return(Issue_error(ErrBadFlags));

/* For multiple stream support, R1 and R2 are ignored. R0 contains the number */
/* of open streams on exit. Previous and next channels are not supported for  */
/* the multiple stream implementation.                                        */
#ifdef MultipleStreams
  r->r[0] = open_stream;
#else
  if (open_stream)
  {
    /* There is currently a stream open (playing) */
    if (r->r[1])
    {
      r->r[2] = Dump_to_buffer(open_stream, r->r[0] & 1, (char *)r->r[1], r->r[2]);
    }

    if (r->r[0] & 2)
    {
      r->r[3] = (open_stream -> prev) -> number;
      r->r[4] = (open_stream -> next) -> number;
    }

    r->r[0] = open_stream -> number;
    Set_sysvar("SVB$ChannelName", open_stream -> name, strlen(open_stream -> name));
  }
  else
  {
    /* No streams are currently open */
    r->r[0] = -1;
    Set_sysvar("SVB$ChannelName", "<unset>", 7);
  }
#endif

  return(ErrorPtr);
}

_kernel_oserror *ReadChannelNames(_kernel_swi_regs *r)
{
  ErrorPtr = NULL;

  if (do_debug) printf("SWI ReadChannelNames\n");

  /* Validate parameters */
  if (r->r[0] & ~1) return(Issue_error(ErrBadFlags));

  if ((r->r[0] & 1) || (ReadChannels == FALSE))
  {
    /* Return an error if there are any streams active */
    if (open_stream) return(Issue_error(ErrActive));

    temp_channels     = ChannelListLength;
    temp_start        = ChannelListStart;
    ChannelListLength = 0;
    ChannelListStart  = NULL;
    ErrorPtr          = Load_channels_file(ChannelsFile);
    if (ErrorPtr)
    {
      Free_channels_list();
      ChannelListLength = temp_channels;
      ChannelListStart  = temp_start;
    }
    else
    {
      u_int         length;
      ChannelEntry *start;

      length            = ChannelListLength;   /* Preserve the newly loaded list info */
      start             = ChannelListStart;
      ChannelListLength = temp_channels;       /* Restore the old list info */
      ChannelListStart  = temp_start;
      Free_channels_list();                    /* Free the old list */
      ChannelListLength = length;              /* Restore the new list info */
      ChannelListStart  = start;
      Reset_enumeration();
    }
  }

  return(ErrorPtr);
}

_kernel_oserror *AddChannel(_kernel_swi_regs *r)
{
  ChannelEntry *entry;
  u_int position;
  ErrorPtr = NULL;

  if (do_debug) printf("SWI AddChannel\n");

  /* Validate parameters */
  if (r->r[0] & ~1) return(Issue_error(ErrBadFlags));
  if (r->r[0] & 1)
  {
    if (r->r[2] == 0)                       return(Issue_error(ErrBadChan));
    if (Number_to_channel(r->r[2]) == NULL) return(Issue_error(ErrBadChan));
    position = r->r[2];
  }
  else
  {
    position = 0;
  }

  /* Convert a channel file line into an unlinked channel entry (NULL if empty line or comment) */
  Init_parser( (char *)(r->r[1]), "AddChannel string", strlen((char *)(r->r[1])) );
  entry = Channel_line();
  Exit_parser();

  /* Return a syntax error message from the parser (if there is one) */
  if (ErrorPtr) return(ErrorPtr);

  /* Simply exit if the string is empty or a comment */
  if (entry == NULL) return(NULL);

  /* Exit with an error if that channel is already defined (use SWI UpdateChannel to change info) */
  if (Number_to_channel(entry -> number) != NULL)
  {
    free((char *)entry);
    return(Issue_error(ErrDefine));
  }

  /* Link the new channel entry into the appropriate point in the channels list */
  Link_channel(entry, position);
  Reset_enumeration();

  return(ErrorPtr);
}

_kernel_oserror *RemoveChannel(_kernel_swi_regs *r)
{
  ChannelEntry *entry;
  ErrorPtr = NULL;

  if (do_debug) printf("SWI RemoveChannel\n");

  /* Validate parameters */
  if (r->r[0])      return(Issue_error(ErrBadFlags));
  if (r->r[1] == 0) return(Issue_error(ErrBadChan));

  /* Look for the channel and check that it is not currently playing */
  entry = Number_to_channel(r->r[1]);
  if (entry)
  {
    if ((entry -> flags) & FlagPlaying)
    {
      Issue_error(ErrActive);
    }
    else
    {
      Unlink_channel(entry);
      free((char *)entry);
      Reset_enumeration();
    }
  }
  else
  {
    Issue_error(ErrBadChan);
  }

  return(ErrorPtr);
}

_kernel_oserror *UpdateChannel(_kernel_swi_regs *r)
{
  ChannelEntry *new_entry;       /* Pointer to the new channel entry for this channel    */
  ChannelEntry *old_entry;       /* Pointer to the old channel entry for this channel    */
  u_int         next_chan;       /* Channel number of the entry to be after the new one  */
  ErrorPtr = NULL;

  if (do_debug) printf("SWI UpdateChannel\n");

  /* Validate parameters */
  if (r->r[0] & ~1) return(Issue_error(ErrBadFlags));

  /* Parse the channel information (to give the new entry) */
  Init_parser( (char *)(r->r[1]), "UpdateChannel string", strlen((char *)(r->r[1])) );
  new_entry = Channel_line();
  Exit_parser();

  /* Return a syntax error message from the parser (if there is one) */
  if (ErrorPtr) return(ErrorPtr);

  /* Simply exit if the string is empty or a comment */
  if (new_entry == NULL) return(Issue_error(NULL));

  /* Exit with an error if the channel is not in the list or is playing */
  old_entry = Number_to_channel(new_entry -> number);
  if (old_entry == NULL)                  return(Issue_error(ErrBadChan));
  if ((old_entry -> flags) & FlagPlaying) return(Issue_error(ErrActive));

  /* Get the channel number for the entry to be after this one */
  if (r->r[0] & 1)
  {
    next_chan = r->r[2];
    /* To move before ourselves is to not move! Else, check the other channel number is valid */
    if (next_chan == (old_entry -> number))
      next_chan = (old_entry -> next) -> number;
    else
      if (Number_to_channel(next_chan) == NULL) return(Issue_error(ErrBadChan));
  }
  else
  {
    next_chan = (old_entry -> next) -> number;
  }

  /* Don't bother with the next_chan parameter if the list only contains one channel */
  if ((old_entry -> number) == next_chan) next_chan = 0;

  /* Delink the old entry and link the new entry into the correct position */
  Unlink_channel(old_entry);
  Link_channel(new_entry, next_chan);
  Reset_enumeration();

  /* If the multicast group address and UDP port are the same, preserve the joins and leaves */
  if (
      ( (old_entry -> port) == (new_entry -> port) )
      &&
      ( ((old_entry -> group).s_addr) == ((new_entry -> group).s_addr))
     )
  {
    new_entry -> joins  = old_entry -> joins;
    new_entry -> leaves = old_entry -> leaves;
  }

  /* Free the memory claimed for the old entry */
  free((char *)old_entry);

  return(ErrorPtr);
}

_kernel_oserror *EnumerateChannels(_kernel_swi_regs *r)
{
  char *buffer   = (char *)r->r[2];           /* Pointer to the current position in the buffer           */
  char *buf_end  = (char *)r->r[2] + r->r[3]; /* Pointer to the end of the buffer                        */
  u_int entries  = 0;                         /* Count of the number of entries in the buffer            */
  u_int previous = 0;                         /* Channel number of the last complete entry in the buffer */
  ErrorPtr = NULL;

  if (do_debug) printf("SWI EnumerateChannels\n");

  /* Validate parameters */

  if (
       r->r[0] & ~(
                    SVB_EnumerateChannels_AsString |
                    SVB_EnumerateChannels_StartAtR1
                  )
     )
     return(Issue_error(ErrBadFlags));

  if (r->r[1] < 0)  return(Issue_error(ErrBadChan));

  /* Deal with R1 holding the start channel number or moving to the next item */

  if ((r->r[0] & SVB_EnumerateChannels_StartAtR1) != 0)
  {
    int count = ChannelListLength;

    enum_channel   = ChannelListStart;
    enum_remaining = 1;

    while (count > 0 && enum_channel->number != r->r[1] && enum_channel -> next != NULL)
    {
      count--;
      enum_channel = enum_channel -> next;
    }

    if (
         enum_channel == NULL || /* Circularly linked, but you never can be too careful all the same... */
         enum_channel->number != r->r[1]
       )
       return(Issue_error(ErrBadChan));
  }
  else
  {
    if (r->r[1] == 0)
    {
      Reset_enumeration();                      /* enum_channel = ChannelListStart; enum_remaining = ChannelListLength; */
    }
    else
    {
      enum_channel = Number_to_channel(r->r[1]);
      if (enum_channel == NULL) return(Issue_error(ErrBadChan));
      enum_channel = enum_channel -> next;
    }
  }

  /* Keep dumping entries until there are no more to read, or we've read the specified number */
  while ((enum_remaining > 0) && (r->r[4] > 0))
  {
    r->r[3] = Dump_to_buffer(enum_channel, r->r[0] & SVB_EnumerateChannels_AsString, buffer, r->r[3]);
    buffer = buf_end - (r->r[3]);

    /* Did the entry fit into the buffer? */
    if (r->r[3] < 0)
    {
      /* No. Stop enumeration, indicating that it isn't complete */
      r->r[4] = entries;                       /* Return the number of complete entries in the buffer in R4 */
      r->r[1] = previous;                      /* Return the last entry in the buffer in R1 (zero if none)  */
      break;
    }
    else
    {
      /* Yes. Continue enumeration. */
      entries        ++;                       /* Increment the count of entries in the buffer              */
      enum_remaining --;                       /* Decrement the number left to enumerate                    */
      r->r[4]        --;                       /* Decrement the number asked to enumerate                   */
      previous     = enum_channel -> number;   /* Record the channel number of the last entry in the buffer */
      enum_channel = enum_channel -> next;     /* Move on to the next entry in the channels list            */
    }
  }

  if (enum_remaining > 0)
  {
    /* There are more to enumerate */
    r->r[1] = previous;
  }
  else
  {
    /* The enumeration is complete */
    r->r[1] = -1;
  }
  r->r[4] = entries;

  return(ErrorPtr);
}

void Read_sysvars(void)
{
  char buffer[64];
  BOOL specific;

  /* Are debugging messages to be displayed on-screen? */
  if (Read_sysvar("SVB$Debug", buffer, sizeof(buffer)) != 0)
    do_debug = TRUE;
  else
    do_debug = FALSE;

  /* Do we report errors via system variables? */
  if (Read_sysvar("SVB$WebErrorReports", buffer, sizeof(buffer)) != 0)
    notify_via_var = TRUE;
  else
    notify_via_var = FALSE;

  /* How long of MPEGControl not seeing data before we declare an EOS timeout? */
  if (Read_sysvar("SVB$EOSTimeout", buffer, sizeof(buffer)) != 0)
    endofstream_timeout = atoi(buffer);
  else
    endofstream_timeout = ENDOFSTREAM_TIMEOUT;

  /* How often do we prod the MPEGControl module (for EOS timeout)? */
  if (Read_sysvar("SVB$PollEvery", buffer, sizeof(buffer)) != 0)
    poll_every = atoi(buffer);
  else
    poll_every = POLL_EVERY;

  /* Are we using the default Multicast address? */
  specific = !Read_sysvar("SVB$MCAdrSpecific", buffer, sizeof(buffer));  /* If var doesn't exist, default to 'specific' */
  if (!specific) specific = strcmp(buffer, "No");                        /* If var exists, only 'No' will stop 'specific' */
  if (specific)                                                          /* If 'specific', read our IP address (and open port, etc) */
    (void) Read_my_ip_address(&mreq.imr_interface);
  else
    mreq.imr_interface.s_addr = INADDR_ANY;                              /* If not 'specific', use default address */

  /* DEBUGGING: let's see which socket was chosen and what IP address we're using */
  if (do_debug)
  {
    sprintf(buffer, "%d", sockid);
    Set_sysvar("SVBdebug$Socket", buffer, strlen(buffer));
    sprintf(buffer, "%x", (u_int) mreq.imr_interface.s_addr);
    Set_sysvar("SVBdebug$IPaddr", buffer, strlen(buffer));
  }
}

_kernel_oserror *Start_streaming(ChannelEntry *entry, u_int ctrl_handle, BOOL call_udpv)
{
  ErrorPtr = Join_mip_group(entry);
  if (ErrorPtr == NULL)
  {
#ifndef TestOnly
    if (call_udpv == TRUE)
    {
      entry -> flags |= FlagCallUDPv;

      (void) _swix(UDPV_StartOfPlay,
                   _INR(0,4),

                   0,
                   0,
                   (entry -> port),
                   ctrl_handle,
                   0);
    }
#endif
    (entry -> flags) |= FlagPlaying;
    (entry -> flags) &= ~FlagFrozen;
    (entry -> joins) ++;
    (entry -> handle) = ctrl_handle;
#ifdef MultipleStreams
    open_stream ++;
#else
    open_stream       = entry;
    endofstream       = 0;
    last_rxcount      = 0;
    endofstream_timer = endofstream_timeout * 100;
#endif
  }

  return(ErrorPtr);
}

_kernel_oserror *Stop_streaming(ChannelEntry *entry)
{
  if ((entry -> flags) & FlagPlaying) (void) Leave_mip_group(entry);
  if ((entry -> flags) & FlagCallUDPv) (void) _swix(UDPV_EndOfPlay, 0);

  (entry -> flags) &= ~(FlagPlaying | FlagFrozen | FlagCallUDPv);
  (entry -> leaves) ++;
  (entry -> handle) = 0;
#ifdef MultipleStreams
  open_stream --;
#else
  open_stream       = NULL;
  endofstream       = 0;
  last_rxcount      = 0;
  endofstream_timer = endofstream_timeout * 100;
#endif

  return(NULL);
}

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE FUNCTION IMPLEMENTATIONS - - - - - - - - - - - - - */

static void Reset_enumeration(void)
{
  enum_channel   = ChannelListStart;
  enum_remaining = ChannelListLength;
}

static _kernel_oserror *Join_mip_group(ChannelEntry *entry)
{
  int rsp;

  if (do_debug) printf("Joining group %s\n", inet_ntoa(mreq.imr_multiaddr));

#ifndef TestOnly
  mreq.imr_multiaddr = entry -> group;
  rsp = setsockopt(sockid, IPPROTO_IP, IP_ADD_MEMBERSHIP, &mreq, sizeof(mreq));
  if (rsp == -1) return(Issue_error(ErrNoSvc));
#endif

  return(NULL);
}

static _kernel_oserror *Leave_mip_group(ChannelEntry *entry)
{
  if (do_debug) printf("Leaving group %s\n", inet_ntoa(mreq.imr_multiaddr));

#ifndef TestOnly
  mreq.imr_multiaddr = entry -> group;
  (void) setsockopt(sockid, IPPROTO_IP, IP_DROP_MEMBERSHIP, &mreq, sizeof(mreq));
  mreq.imr_multiaddr.s_addr = 0;
#endif

  return(NULL);
}

static BOOL Read_my_ip_address(struct in_addr *adr)
{
  char   buffer[512];
  struct ifconf ifc;
  struct ifreq ifreq, *ifr;
  struct sockaddr_in *sin;
  int    n;

  adr->s_addr = 0;
  if ((sockid = socket(AF_INET, SOCK_DGRAM, 0)) < 0) return(FALSE);

  ifc.ifc_len = sizeof(buffer);
  ifc.ifc_buf = buffer;
  if (socketioctl(sockid, SIOCGIFCONF, (char *)&ifc) < 0) return(FALSE);

  ifr = ifc.ifc_req;
  for (n = ifc.ifc_len / sizeof (struct ifreq); n > 0; n--, ifr++)
  {
    ifreq = *ifr;
    if (socketioctl(sockid, SIOCGIFFLAGS, (char *)&ifreq) < 0 || ifreq.ifr_flags & IFF_LOOPBACK) continue;
    if ((ifreq.ifr_flags & (IFF_BROADCAST|IFF_UP)) != (IFF_BROADCAST|IFF_UP)) continue;
    if (socketioctl(sockid, SIOCGIFADDR, (char *)&ifreq) < 0) continue;
    sin = (struct sockaddr_in *)&ifreq.ifr_addr;
    adr -> s_addr = sin -> sin_addr.s_addr;
    break;
  }

  return(TRUE);
}
