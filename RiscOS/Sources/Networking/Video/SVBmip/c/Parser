/*
 * File:      Parser.c
 *
 * Author:    Steve Revill
 *
 * Purpose:   Implementation of parser-related functionality for SVBmip module
 *
 * Copyright: (c) Pace Micro Technology plc. 1999
 *
 * History:
 *
 *   SAR - 20/09/99 - Created
 *
 */

/*- - - - - - - - - - - - - - - - - - - - - - INCLUDED FILES - - - - - - - - - - - - - - - - - - - - - - */

#include "Parser.h"
#include "mipSWI.h"

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE MACRO DEFINITIONS - - - - - - - - - - - - - - - - -*/

#define MaxChanNumLen  9     /* The maximum length (in chars) of a channel number */
#define MaxChanNameLen 63    /* The maximum length (in chars) of a channel name string */
#define MaxChanPortLen 5     /* The maximum length (in chars) of a channel UDP port number */
#define MaxExtraLen    255   /* The maximum length (in chars) of a channel extra parameter string */

#define MaxErrNumLen   9     /* The maximum length (in chars) of an error number */
#define MaxErrStrLen   99    /* The maximum length (in chars) of an error string */

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC VARIABLES - - - - - - - - - - - - - - - - - - - - - */

char  *parse_ptr;
char  *parse_end;
u_int  line_num;
char  *line_ptr;
char   lexeme;
char   parse_exp;
char  *parse_str;
char  *parse_file;

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE STRUCTURES - - - - - - - - - - - - - - - - - - - - */

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE VARIABLES - - - - - - - - - - - - - - - - - - - - -*/

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE FUNCTIONS - - - - - - - - - - - - - - - - - - - - -*/

/* Parser engine routines */
static void          Parser_newline (void);
static void          Next_lexeme    (void);
static void          Rec_lexeme     (char byte);
static void          Rec_lexemes    (char *str);

/* Channels file parsing routines */
static ChannelEntry *Channel        (void);
static char         *Name           (u_int max_length);
static char         *Extras         (u_int max_length);
static char         *Params         (u_int max_length);

/* Errors file parsing routines */
static void          Error          (void);
static char         *String         (u_int max_length);

/* SWI OpenStream parameter parsing routines */
static void          Server         (u_int number);

/* Parsing routines common to more than one syntax */
static u_long        Dotted_quad    (void);
static u_short       Octet          (void);
static u_int         Port           (u_int max_length);
static void          Comment        (void);
static u_int         Natural        (u_int max_length);
static void          Opt_space      (void);
static void          Space          (void);
static void          Eoln           (void);
static u_short       Digit          (void);

/* 'First functions' for parser */
static BOOL          Is_digit       (void);
static BOOL          Is_hash        (void);
static BOOL          Is_bar         (void);
static BOOL          Isnt_newline   (void);
static BOOL          Is_space       (void);
static BOOL          Is_quote       (void);
static BOOL          Is_name        (void);
static BOOL          Is_dash        (void);
static BOOL          Is_string      (void);
static BOOL          Is_port        (void);

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC FUNCTION IMPLEMENTATIONS - - - - - - - - - - - - - -*/

void Init_parser(char *buffer, char *file, const u_int size)
{
  parse_ptr  = buffer;                   /* Initialise the current position to be at the start of the file */
  parse_end  = buffer + size;            /* Initialise the and pointer to be at the end of the file        */
  line_num   = 1;                        /* The parser is starting on line one of the file                 */
  line_ptr   = parse_ptr;                /* The start of the current line is the start of the file         */
  lexeme     = parse_ptr[0];             /* The current lexeme is the first character of the file          */
  parse_exp  = '\x00';                   /* There is no lexeme expected                                    */
  parse_str  = NULL;                     /* There is no string expected                                    */
  parse_file = file;                     /* Initialise the file name (for reporting syntax errors)         */
}

void Exit_parser(void)
{
  parse_ptr  = NULL;
  parse_end  = NULL;
  line_num   = 0;
  line_ptr   = NULL;
  lexeme     = '\x00';
  parse_str  = NULL;
  parse_file = NULL;
}

_kernel_oserror *Channels_file(void)
{
  ChannelEntry *entry;

  if (do_debug) printf("Parsing channels file\n");
  while ((ErrorPtr == NULL) && (parse_ptr < parse_end))
  {
    entry = Channel_line();
    if (entry != NULL) Link_channel(entry, 0);
  }
  Exit_parser();

  return(ErrorPtr);
}

ChannelEntry *Channel_line(void)
{
  ChannelEntry *entry = NULL;

  if (do_debug) printf("Parsing channel line\n");
  Opt_space();
  if (Is_digit())
  {
    entry = Channel();
  }
  else if (Is_bar())
  {
    Rec_lexeme('|');
    Comment();
  }
  Eoln();

  return(entry);
}

_kernel_oserror *Errors_file(void)
{
  if (do_debug) printf("Parsing errors file\n");
  while ((ErrorPtr == NULL) && (parse_ptr < parse_end))
  {
    Opt_space();
    if (Is_digit())
    {
      Error();
    }
    else if (Is_hash())
    {
      Rec_lexeme('#');
      Comment();
    }
    Eoln();
  }
  Exit_parser();

  return(ErrorPtr);
}

u_int Open_param(void)
{
  u_int number = 0;

  if (do_debug) printf("Parsing OpenStream parameters\n");
  Opt_space();
  Rec_lexemes("-channel");
  Space();
  number = Natural(MaxChanNumLen);
  if ((number != ChannelUp) && (number != ChannelDown))
  {
    Opt_space();
    if (Is_dash()) Server(number);
    /* Rec_lexeme('\x00'); */
  }

  return(number);
}

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE FUNCTION IMPLEMENTATIONS - - - - - - - - - - - - - */

/*** PARSER ENGINE ROUTINES ***/

/* Register a new line with the parser */
static void Parser_newline(void)
{
  line_num ++;
  line_ptr = parse_ptr;
}

/* Read the next character from the input buffer into 'lexeme' */
static void Next_lexeme(void)
{
  parse_ptr ++;
  if (parse_ptr >= parse_end)
    lexeme = '\x00';
  else
    lexeme = (char) parse_ptr[0];
}

/* Compare current character against expected. Move on if OK */
static void Rec_lexeme(char byte)
{
  if (lexeme == byte)
  {
    Next_lexeme();
  }
  else
  {
    parse_exp = byte;
    Issue_error(ErrBadChar);
  }
}

/* Compare current character string against expected. Move on if OK */
static void Rec_lexemes(char *str)
{
  char *pos = str;

  while (pos[0] != '\x00')
  {
    if (lexeme == pos[0])
    {
      Next_lexeme();
    }
    else
    {
      parse_str = str;
      Issue_error(ErrBadStr);
    }
    pos ++;
  }
}

/*** CHANNELS FILE PARSING ROUTINES ***/

static ChannelEntry *Channel(void)
{
  ChannelEntry *entry     = NULL;
  u_int         port_num  = 0;
  char         *extra_ptr = NULL;
  char         *name_ptr;
  u_long        address;
  u_int         number;

  number = Natural(MaxChanNumLen);
  Space();
  name_ptr = Name(MaxChanNameLen);
  Space();
  address = Dotted_quad();
  if (ErrorPtr == NULL)
  {
    port_num = Port(MaxChanPortLen);
    Opt_space();
    if (Is_dash())
      extra_ptr = Extras(MaxExtraLen);
    else
      extra_ptr = NULL;
  }

  /* Add this channel definition to the channels list */
  if ((ErrorPtr == NULL) && (number != ChannelUp) && (number != ChannelDown))
  {
    entry = Create_channel(number, name_ptr, address, port_num, extra_ptr);
  }

  return(entry);
}

static char *Name(u_int max_length)
{
  u_int  length = 1;
  char  *start  = parse_ptr;

  if (Is_name())
    Next_lexeme();
  else
    Issue_error(ErrBadName);

  while (Is_name())
  {
    length ++;
    Next_lexeme();
  }

  /* Zero-terminate the string in the buffer ('lexeme' contains the char that was there) */
  parse_ptr[0] = '\x00';

  if (length > max_length) Issue_error(ErrBigStr);

  return(start);
}

static char *Extras(u_int max_length)
{
  char *value;

  Rec_lexemes("-extra");
  Opt_space();
  Rec_lexeme('"');
  value = Params(max_length);
  Rec_lexeme('"');
  Opt_space();

  return(value);
}

static char *Params(u_int max_length)
{
  u_int  length = 0;
  char  *start  = parse_ptr;

  while (Isnt_newline() && !Is_quote())
  {
    Next_lexeme();
    length ++;
  }

  /* Zero-terminate the string in the buffer ('lexeme' contains the char that was there) */
  parse_ptr[0] = '\x00';

  if (length > max_length)
    Issue_error(ErrBigStr);
  else
    if (length < 1) start = NULL;

  return(start);
}

/*** ERRORS FILE PARSING ROUTINES ***/

static void Error(void)
{
  u_int  err_num;
  char  *err_str;

  err_num = Natural(MaxErrNumLen);
  Rec_lexeme(':');
  err_str = String(MaxErrStrLen);

  /* Add this error to our list */
  if (ErrorPtr == NULL) ErrorPtr = Add_error(err_num, err_str);
}

static char *String(u_int max_length)
{
  u_int  length = 1;
  char  *start  = parse_ptr;

  if (Is_string())
    Next_lexeme();
  else
    Issue_error(ErrEmpty);

  while (Is_string())
  {
    Next_lexeme();
    length ++;
  }

  /* Zero-terminate the string in the buffer ('lexeme' contains the char that was there) */
  parse_ptr[0] = '\x00';

  if (length > max_length) Issue_error(ErrBigStr);

  return(start);
}

/*** OPENSTREAM SWI PARAMETER PARSING ROUTINES ***/

static void Server(u_int number)
{
  u_long address;
  u_int  port_num;

  Rec_lexemes("-server");
  Space();
  address = Dotted_quad();
  if (Is_port())
    port_num = Port(MaxChanPortLen);
  else
    port_num = DontChangePort;
  Opt_space();

  /* Possibly re-define the address (and port) for the specified channel */
  /* entry. All this functionality of the SWI should not be used.        */
  if (ErrorPtr == NULL) Change_server(number, address, port_num);
}

/** GENERAL-PURPOSE PARSING ROUTINES ***/

static u_long Dotted_quad(void)
{
  u_int   value;
  u_short byte;
  u_int   error = 0;

  byte = Octet();

  /* first octet must lie in range 224..239 */
  if ((byte < 224) || (byte > 239))
  {
    error = 1;
  }
  else
  {
    value = byte;
    if (byte > 255) error=1;
    Rec_lexeme('.');
    byte = Octet();
    if (byte > 255) error=1;
    value |= byte << 8;
    Rec_lexeme('.');
    byte = Octet();
    if (byte > 255) error=1;
    value |= byte << 16;
    Rec_lexeme('.');
    byte = Octet();
    if (byte > 255) error=1;
    value |= byte << 24;

    /* address 224.0.0.0 is reserved and should not be used */
    if (value == 0x000000E0)
    {
      error = 1;
    }
  }

  if (error)
  {
    ErrorPtr = Issue_error(ErrAddress);
    value    = 0;
  }
  return((u_long) value);
}

static u_short Octet(void)
{
  u_short byte;

  byte = Digit();
  if (Is_digit())
  {
    byte = (byte * 10) + Digit();
    if (Is_digit()) byte = (byte * 10) + Digit();
  }
  return(byte);
}

static u_int Port(u_int max_length)
{
  switch (lexeme)
  {
    case (':'):
    case ('/'):
    {
      Next_lexeme();
      break;
    }
    default: Issue_error(ErrBadIP);
  }
  return(Natural(max_length));
}

static void Comment(void)
{
  while (Isnt_newline()) Next_lexeme();
}

static u_int Natural(u_int max_length)
{
  u_int length = 1;
  u_int value;

  value = Digit();
  while (Is_digit())
  {
    value = (value * 10) + Digit();
    length ++;
  }
  if (length > max_length) Issue_error(ErrBigNum);

  return(value);
}

static void Opt_space(void)
{
  while (Is_space()) Next_lexeme();
}

static void Space(void)
{
  switch (lexeme)
  {
    case (' '):
    case ('\x09'):
    {
      Next_lexeme();
      break;
    }
    default: Issue_error(ErrNoSpace);
  }

  while (Is_space()) Next_lexeme();
}

static void Eoln(void)
{
  switch (lexeme)
  {
    case ('\x00'):
    case ('\x0A'):
    case ('\x0D'):
    {
      Next_lexeme();
      break;
    }
    default: Issue_error(ErrNoEOLN);
  }

  Parser_newline();
}

static u_short Digit(void)
{
  u_short value = 0;

  if (Is_digit())
  {
    value = lexeme - '0';
    Next_lexeme();
  }
  else Issue_error(ErrNoDigit);

  return(value);
}

/*** VARIOUS FIRST FUNCTIONS ***/

/* Lexeme is a decimal digit (ASCII 48-57) */
static BOOL Is_digit(void)
{
  return((lexeme >= '0') && (lexeme <= '9'));
}

/* Lexeme is a hash character (ASCII 35) */
static BOOL Is_hash(void)
{
  return(lexeme == '#');
}

/* Lexeme is a vertical bar character (ASCII 124) */
static BOOL Is_bar(void)
{
  return(lexeme == '|');
}

/* Lexeme is NOT a newline character (ASCII 0, 10 or 13) */
static BOOL Isnt_newline(void)
{
  return((lexeme != '\x00') && (lexeme != '\x0A') && (lexeme != '\x0D'));
}

/* Lexeme is a white space character (ASCII 9 or 32) */
static BOOL Is_space(void)
{
  return((lexeme == ' ') || (lexeme == '\x09'));
}

/* Lexeme is a double-quote character (ASCII 34) */
static BOOL Is_quote(void)
{
  return(lexeme == '"');
}

/* Lexeme is a valid channel name/description character (ASCII 33-126 or 160-255) */
static BOOL Is_name(void)
{
  return(
         ((lexeme >= '\x21') && (lexeme <= '\x7E')) ||
         ((lexeme >= '\xA0') && (lexeme <= '\xFF'))
        );
}

/* Lexeme is a single dash (indicating a switch follows) */
static BOOL Is_dash(void)
{
  return(lexeme == '-');
}

/* Lexeme is a valid character for an error string (ASCII 33-126 or 160-255) */
static BOOL Is_string(void)
{
  return(Isnt_newline());
}

/* Lexeme is a valid UDP port prefix character */
static BOOL Is_port(void)
{
  return((lexeme == ':') || (lexeme == '/'));
}
