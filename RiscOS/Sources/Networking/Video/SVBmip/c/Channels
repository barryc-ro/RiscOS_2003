/*
 * File:      Channels.c
 *
 * Author:    Steve Revill
 *
 * Purpose:   Implementation of channels list management routines for SVBmip module
 *
 * Copyright: (c) Pace Micro Technology plc. 1999
 *
 * History:
 *
 *   SAR - 20/09/99 - Created
 *
 */

/*- - - - - - - - - - - - - - - - - - - - - - INCLUDED FILES - - - - - - - - - - - - - - - - - - - - - - */

#include <stdlib.h>
#include <string.h>

#include "Module.h"
#include "Channels.h"
#include "mipSWI.h"

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE MACRO DEFINITIONS - - - - - - - - - - - - - - - - -*/

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC VARIABLES - - - - - - - - - - - - - - - - - - - - - */

ChannelEntry *ChannelListStart;
u_int         ChannelListLength;
BOOL          ReadChannels;

#ifdef MultipleStreams
u_int open_stream;
#else
ChannelEntry *open_stream;
#endif

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE STRUCTURES - - - - - - - - - - - - - - - - - - - - */

typedef struct in_addr in_addr;

/* An entry from the channels list enumerated into a buffer */
typedef struct EnumEntry EnumEntry;
struct EnumEntry
{
  u_int           size;
  u_int           handle;
  u_int           number;
  char           *name;
  char           *extras;
  u_int           flags;
  u_int           joins;
  u_int           leaves;
  u_int           port;
  struct in_addr  group;
};

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE VARIABLES - - - - - - - - - - - - - - - - - - - - -*/

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE FUNCTIONS - - - - - - - - - - - - - - - - - - - - -*/

/*
 * On entry
 *
 *   Pointer to channel entry
 *
 * On exit
 *
 *   Number of bytes required for string
 *
 * Use
 *
 *   Calculate the number of bytes required in a buffer to store a given
 *   channel entry in the channels file format (including a zero-terminator).
 *
 */
static u_int Channel_string_size(ChannelEntry *entry);

/*
 * On entry
 *
 *   Pointer to channel entry
 *   Pointer to buffer for string
 *
 * On exit
 *
 *   (buffer contains zero-terminated string)
 *
 * Use
 *
 *   Given a channel entry and a buffer of appropriate size, this routine will
 *   write the appropriate string for that entry into the buffer. This string
 *   is of the format specified for a line from the channels file.
 *
 *   Note: no checks are made to ensure that the buffer is large enough
 *   for the string to fit into.
 *
 */
static void Channel_to_string(ChannelEntry *entry, char *buffer);

/*
 * On entry
 *
 *   Pointer to channel entry
 *
 * On exit
 *
 *   Number of bytes required for buffer entry
 *
 * Use
 *
 *   Calculate the number of bytes required in a buffer to store a given
 *   channel entry in the channels list entry format (excluding the previous
 *   and next pointers).
 *
 */
static u_int Channel_entry_size(ChannelEntry *entry);

/*
 * On entry
 *
 *   Pointer to channel entry
 *   Pointer to buffer for copy of entry
 *
 * On exit
 *
 *   (buffer contains copy of channel entry without prev and next pointers)
 *
 * Use
 *
 *   Given a channel entry and a buffer of appropriate size, this routine will
 *   copy the specified channel entry into the buffer, without the previous and
 *   next pointers).
 *
 *   Note: no checks are made to ensure that the buffer is large enough
 *   for the entry to fit into.
 *
 */
static void Channel_to_buffer(ChannelEntry *entry, char *buffer);

/*
 * On entry
 *
 *   An unsigned long
 *
 * On exit
 *
 *   The length of that (decimal) number as a string
 *
 * Use
 *
 *   This function calculates the number of characters needed to represent the
 *   specified number (in decimal) as a string. This exculdes any terminator
 *   character.
 *
 */
static u_int declen(u_long decimal);

/*
 * On entry
 *
 *   An IP address (struct in_addr)
 *
 * On exit
 *
 *   The length of that address as a dotted-quad string
 *
 * Use
 *
 *   This function calculates the number of characters needed to represent the
 *   specified IP address as a dotted-quad string. This excludes any terminator
 *   character.
 *
 */
static u_int dotlen(in_addr group);

/*
 * On entry
 *
 *   Pointer to zero-terminated string
 *
 * On exit
 *
 *   Number of words required to store string and one terminator character
 *
 * Use
 *
 *   This function calculated the number of bytes required to store the given
 *   string and a zero-terminator. The result is rounded-up to the nearest word
 *   boundary.
 *
 *   Examples:
 *
 *     ""     gives 4 (a single zero-terminator is required = one word)
 *     "a"    gives 4
 *     "abc"  gives 4
 *     "abcd" gives 8 (four bytes and a zero-terminator = two words)
 *
 */
static u_int Word_length(const char *string);

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC FUNCTION IMPLEMENTATIONS - - - - - - - - - - - - - -*/

_kernel_oserror *Load_channels_file(const char *filename)
{
  char  *buffer;
  u_int  size;

  ChannelListStart  = NULL;
  ChannelListLength = 0;
  ReadChannels      = FALSE;
  size              = File_size(filename);
  buffer            = Check_and_load(filename);
  if (buffer)
  {
    Init_parser(buffer, "Channels file", size);
    ErrorPtr = Channels_file();
    if (ErrorPtr == NULL) ReadChannels = TRUE;
    free(buffer);
  }

  return(ErrorPtr);
}

void Free_channels_list(void)
{
  ChannelEntry *entry;

  while (ChannelListLength > 0)
  {
    entry            = ChannelListStart;
    ChannelListStart = ChannelListStart -> next;
    ChannelListLength --;
    free((char *)entry);
  }
  ReadChannels = FALSE;
}

ChannelEntry *Create_channel(const u_int  number,
                             const char  *name_ptr,
                             const u_long address,
                             const u_int  port,
                             const char  *extra_ptr
                            )
{
  u_int         blk_size, name_len, ext_len;
  ChannelEntry *entry;

  /* Round-up the string lengths to the nearest word */
  name_len = Word_length(name_ptr);

  /* Get the size of the extras string rounded-up (or zero if there isn't one) */
  if (extra_ptr)
    ext_len = Word_length(extra_ptr);
  else
    ext_len = 0;

  /* Calculate the number of bytes this channel list entry will require */
  blk_size = sizeof(ChannelEntry) + name_len + ext_len;
  entry    = (ChannelEntry *) malloc(blk_size);
  if (entry == NULL)
  {
    Issue_error(ErrMemory);
    return(NULL);
  }

  /* Initialise the main part of the channel entry */
  entry -> prev   = NULL;
  entry -> next   = NULL;
  entry -> size   = blk_size - (sizeof(ChannelEntry) - sizeof(EnumEntry));
  entry -> handle = 0;
  entry -> number = number;
  entry -> flags  = DefaultFlags;
  entry -> joins  = 0;
  entry -> leaves = 0;
  entry -> port   = port;

  /* Put the channel name string immediately after it (and point to it) */
  entry -> name = (char *) (entry + 1);
  strcpy(entry -> name, name_ptr);

  /* Copy the extras string after it, if it exists (and point to it) */
  if (extra_ptr == NULL)
  {
    entry -> extras = NULL;
  }
  else
  {
    entry -> extras = (entry -> name) + name_len;
    strcpy(entry -> extras, extra_ptr);
  }

  /* Store the address as a "struct in_addr" */
  (entry -> group).s_addr = address;

  return(entry);
}

void Link_channel(ChannelEntry *entry, const u_int number)
{
  ChannelEntry *next_entry;
  ChannelEntry *prev_entry;

  /* Are we adding at the end, or in front of another entry? */
  if (number)
  {
    next_entry = Number_to_channel(number);
    if (next_entry == NULL) next_entry = ChannelListStart;                          /* or Error("Bad channel"); */
  }
  else
  {
    next_entry = ChannelListStart;
  }

  /* Are we linking into an empty list? */
  if (next_entry)
  {
    prev_entry = next_entry -> prev;

    prev_entry -> next = entry;
    next_entry -> prev = entry;
    entry -> prev      = prev_entry;
    entry -> next      = next_entry;
  }
  else
  {
    entry -> prev = entry;
    entry -> next = entry;
  }

  /* Update our global list info, including the new item */
  if (ChannelListStart == NULL) ChannelListStart = entry;
  ChannelListLength ++;
}

void Unlink_channel(ChannelEntry *entry)
{
  ChannelEntry *prev_entry = entry -> prev;
  ChannelEntry *next_entry = entry -> next;

  /* Unset the unlinked entrie's pointers */
  entry -> next = NULL;
  entry -> prev = NULL;

  if (entry == prev_entry)
  {
    /* This was the only entry (ensure ChannelListStart = NULL) */
    next_entry = NULL;
  }
  else
  {
    /* Point the prev and next entries at eachother */
    prev_entry -> next = next_entry;
    next_entry -> prev = prev_entry;
  }

  /* Update our global list info, excluding the removed item */
  if (ChannelListStart == entry) ChannelListStart = next_entry;
  ChannelListLength --;
}

ChannelEntry *Number_to_channel(const u_int number)
{
  ChannelEntry *entry = ChannelListStart;
  u_int         count = ChannelListLength;

  while (count > 0)
  {
    if ((entry -> number) == number) return(entry);
    entry = entry -> next;
    count --;
  }

  return(NULL);
}

u_int Dump_to_buffer(ChannelEntry *entry, BOOL as_string, char *buffer, int size)
{
  u_int required;

  if (as_string)
  {
    required = Channel_string_size(entry);
    size -= required;
    if (size >= 0) Channel_to_string(entry, buffer);
  }
  else
  {
    required = Channel_entry_size(entry);
    size -= required;
    if (size >= 0) Channel_to_buffer(entry, buffer);
  }

  return(size);
}

_kernel_oserror *Change_server(u_int number, u_long address, u_int port_num)
{
  BOOL          changed = FALSE;
  ChannelEntry *entry   = Number_to_channel(number);

  if (entry)
  {
    /* Is this channel currently streaming? If so, stop it */
    if ( (entry -> flags) & FlagPlaying ) ErrorPtr = Stop_streaming(entry);

    /* Is the IP address different? */
    if ( address != (entry -> group).s_addr )
    {
      changed                 = TRUE;
      (entry -> group).s_addr = address;
    }

    /* Is the port number different? */
    if ( (port_num != DontChangePort) && (port_num != (entry -> port)) )
    {
      changed       = TRUE;
      entry -> port = port_num;
    }

    /* If either of the above changed, reset the join and leave counts */
    if (changed)
    {
      entry -> joins  = 0;
      entry -> leaves = 0;
    }
  }
  else
  {
    Issue_error(ErrBadChan);
  }

  return(ErrorPtr);
}

void Full_enum(void)
{
  ChannelEntry *entry = ChannelListStart;
  u_int         count = ChannelListLength;

#ifndef MultipleStreams
  if (open_stream)
    printf("Current channel      %d (%s)\n", open_stream -> number, open_stream -> name);
  else
    printf("Current channel      - ()\n");
#endif
  printf("Number of channels   %d\n", count);
  printf("Channel overlaps     %d\n", overlaps);
  printf("Channel underlaps    %d\n", underlaps);
  printf("\nChannels list...\n");

  if (count == 0) printf("\n-- Empty --\n");

  while (count > 0)
  {
    printf("\nChannel ID           %d (%s)\n", entry -> number, entry -> name);
    printf("Group addr           %s\n", inet_ntoa(entry -> group));
    printf("MPEG port            %d\n", entry -> port);
    printf("Channel joins        %d\n", entry -> joins);
    printf("Channel leaves       %d\n", entry -> leaves);
    printf("Channel flags        %x\n", entry -> flags);
    entry = entry -> next;
    count --;
  }
}

void Quick_enum(void)
{
  ChannelEntry *entry = ChannelListStart;
  u_int         count = ChannelListLength;

  printf("Start: &%x, Length: %d\n", (u_int) entry, count);
  while (count > 0)
  {
    printf("  Chan: %d, Flag &%x, Addr: &%lx, Port: %d, ",
           entry->number,
           entry->flags,
           entry->group.s_addr,
           entry->port
         );
    if (entry->joins)  printf("Join: %d, ", entry->joins);
    if (entry->leaves) printf("Leave: %d, ", entry->leaves);
    printf("Name '%s'\n", entry->name);
    entry = entry -> next;
    count --;
  }
  printf("\n");
}

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE FUNCTION IMPLEMENTATIONS - - - - - - - - - - - - - */

static u_int Channel_string_size(ChannelEntry *entry)
{
  u_int required = 1;                                  /* zero char terminator     */

  required += declen((u_long) (entry -> number)) + 1;  /* number plus space        */
  required += strlen(entry -> name)   + 1;             /* name string plus space   */
  required += dotlen(entry -> group)  + 1;             /* dotted-quad plus colon   */
  required += declen((u_long) (entry -> port));        /* port number              */
  if (entry -> extras)
  {
    required += 9;                                     /* strlen(" -extra '");    */
    required += strlen(entry -> extras) + 1;           /* extras string plus quote */
  }

  return(required);
}

static void Channel_to_string(ChannelEntry *entry, char *buffer)
{
  char   *insert  = buffer;
  u_long  address = (entry -> group).s_addr;

  insert += sprintf(buffer, "%d %s ", entry -> number, entry -> name);
  insert += sprintf(insert, "%ld.", (address >> 24) & 0xFF);
  insert += sprintf(insert, "%ld.", (address >> 16) & 0xFF);
  insert += sprintf(insert, "%ld.", (address >> 8)  & 0xFF);
  insert += sprintf(insert, "%ld", address & 0xFF);
  insert += sprintf(insert, ":%d", entry -> port);
  if (entry -> extras) insert += sprintf(insert, " -extra \"%s\"", entry -> extras);
}

static u_int Channel_entry_size(ChannelEntry *entry)
{
  return(entry -> size);
}

static void Channel_to_buffer(ChannelEntry *entry, char *buffer)
{
  EnumEntry *base = (EnumEntry *)buffer;
  char      *name_ptr;
  u_int      name_len;
  u_int      ext_len;

  name_ptr = (char *)(base + 1);
  name_len = Word_length(entry -> name);

  base -> size   = entry -> size;
  base -> number = entry -> number;
  base -> handle = entry -> handle;
  base -> flags  = entry -> flags;
  base -> port   = entry -> port;
  base -> joins  = entry -> joins;
  base -> leaves = entry -> leaves;
  base -> name   = name_ptr;
  strcpy(base -> name, entry -> name);

  if (entry -> extras)
  {
    ext_len        = Word_length(entry -> extras);
    base -> extras = name_ptr + name_len;
    strcpy(base -> extras, entry -> extras);
  }
  else
  {
    ext_len        = 0;
    base -> extras = NULL;
  }

  (base -> group).s_addr = (entry -> group).s_addr;
}

static u_int declen(u_long decimal)
{
  u_int length = 0;

  do
  {
    decimal /= 10;
    length ++;
  } while(decimal > 0);

  return(length);
}

static u_int dotlen(in_addr group)
{
  u_int length = 3;

  length += declen((group.s_addr >> 24) & 0xFF);
  length += declen((group.s_addr >> 16) & 0xFF);
  length += declen((group.s_addr >> 8) & 0xFF);
  length += declen(group.s_addr & 0xFF);

  return(length);
}

static u_int Word_length(const char *string)
{
  if (string)
    return( (strlen(string) + 4) & ~3 );
  else
    return(0);
}
