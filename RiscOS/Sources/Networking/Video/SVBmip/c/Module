/*
 * File:      Module.c
 *
 * Author:    Steve Revill
 *
 * Purpose:   Main C program for SVBmip module
 *
 * Copyright: (c) Pace Micro Technology plc. 1999
 *
 * History:
 *
 *   SAR - 20/09/99 - Created
 *
 */

/*- - - - - - - - - - - - - - - - - - - - - - INCLUDED FILES - - - - - - - - - - - - - - - - - - - - - - */

#include <stdlib.h>
#include <string.h>
#include <swis.h>

#include "socklib.h"

#include "SVBmip.h"
#include "Module.h"
#include "Parser.h"
#include "mipSWI.h"
#include "Channels.h"

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE MACRO DEFINITIONS - - - - - - - - - - - - - - - - -*/

#define MPEGControl_Stats 0x492C9

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC VARIABLES - - - - - - - - - - - - - - - - - - - - - */

BOOL  do_debug = FALSE;
BOOL  notify_via_var;
int   endofstream_timeout;
int   poll_every;
int   sockid = -1;

_kernel_oserror *ErrorPtr;
_kernel_oserror  ErrorBlk;

#ifndef MultipleStreams
u_int endofstream;
int   endofstream_timer;
u_int last_rxcount;
#endif

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE STRUCTURES - - - - - - - - - - - - - - - - - - - - */

/* CLI handler */
struct client
{
  _kernel_oserror *(*cli_call)();
};

/* Array of function identifiers - one for each *Command */
struct client svb_cli_call[2] =
{
  VPinfo,
  SVBinfo
};

/* SWI handler */
struct swient
{
  _kernel_oserror *(*swi_call)();
};

/* Array of function identifiers - one for each SWI at bottom of our SWI chunk */
struct swient svb_ent[65] =
{
  SetServer,         /* 0 */
  OpenStream,        /* 1 */
  CloseStream,       /* 2 */
  CheckEndofStream,  /* 3 */
  SetSpeed,          /* 4 */
  SetPosition,       /* 5 */
  ReadNPT,           /* 6 */
  ReadChannel,       /* 7 */
  ReadChannelNames,  /* 8 */
  0, 0, 0, 0, 0,     /* 13 */
  0, 0, 0, 0, 0,     /* 18 */
  0, 0, 0, 0, 0,     /* 23 */
  0, 0, 0, 0, 0,     /* 28 */
  0, 0, 0, 0, 0,     /* 33 */
  0, 0, 0, 0, 0,     /* 38 */
  0, 0, 0, 0, 0,     /* 43 */
  0, 0, 0, 0, 0,     /* 48 */
  0, 0, 0, 0, 0,     /* 53 */
  0, 0, 0, 0, 0,     /* 58 */
  0,                 /* 59 */
  EnumerateChannels, /* 60 */
  UpdateChannel,     /* 61 */
  RemoveChannel,     /* 62 */
  AddChannel,        /* 63 */
  0,
};

/* An entry in the errors list */
typedef struct ErrorEntry ErrorEntry;
struct ErrorEntry
{
  ErrorEntry      *next;
  _kernel_oserror  block;
};

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE VARIABLES - - - - - - - - - - - - - - - - - - - - -*/

static void       *module_wsp = NULL;                /* Pointer to the module's workspace */
static ErrorEntry *ErrorListStart;                   /* Pointer to the start of the error list */
static u_int       ErrorListLength;                  /* Number of entries in the error list */
static BOOL        ticker_active = FALSE;            /* Flag: TRUE if a ticker event is set-up */
static int         tags[2];                          /* Parameter for MPEGControl SWI call */
static int         stats[3];                         /* Parameter for MPEGControl SWI call */

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE FUNCTIONS - - - - - - - - - - - - - - - - - - - - -*/

/*
 * On entry
 *
 *   -
 *
 * On exit
 *
 *   -
 *
 * Use
 *
 *   Initialise the errors list to contain the default (UK) error messages for
 *   this module.
 *
 */
static void Default_errors(void);

/*
 * On entry
 *
 *   Pointer to errors file name
 *
 * On exit
 *
 *   Pointer to error block if an error was detected, or NULL if OK
 *   (global ErrorPtr points to error block if unsuccessful)
 *   (ErrorListLength indicates the number of entries in the list)
 *   (ErrorListStart points to the start of the list or NULL)
 *
 * Use
 *
 *   This function is the top-level call to start the loading and parsing of
 *   the errors file. The variables ChannelListStart and ChannelListLength will
 *   be updated as appropriate. If the file is not found, no error is returned,
 *   the function will simply return NULL.
 *
 *   If the function completes successfully, NULL will be returned. Otherwise,
 *   it will return a pointer to a RiscOS error block for the appropriate
 *   error (and the global ErrorPtr will also point to this block).
 *
 */
static _kernel_oserror *Load_errors_file(const char *filename);

/*
 * On entry
 *
 *   -
 *
 * On exit
 *
 *   (ErrorListLength is zero)
 *   (ErrorListStart is NULL)
 *
 * Use
 *
 *   This function will free all the memory claimed for the errors list. If
 *   the list is empty on exit, no action will be taken.
 *
 */
static void Free_errors_list(void);

/*
 * On entry
 *
 *   Error number
 *
 * On exit
 *
 *   Pointer to entry in errors list (or NULL if not found)
 *
 * Use
 *
 *   This function will look through the errors list for an entry matching the
 *   number supplied. If found, a pointer to the matching entry is returned. If
 *   no match is found (ie: the list is empty), NULL is returned.
 *
 */
static ErrorEntry *Error_lookup(const u_int number);

/*
 * On entry
 *
 *   Fatality indication of error
 *
 * On exit
 *
 *   (system variables contain error message)
 *   (global ErrorPtr may be reset to NULL)
 *
 * Use
 *
 *   This routine will copy the error message in the error block pointed to by
 *   ErrorPtr into system variables if the flag 'notify_via_var' is TRUE. If
 *   so, it will also reset ErrorPtr to NULL.
 *
 *   The fatality flag indicates which system variable the error message is to
 *   be copied into.
 *
 *   If ErrorPtr is NULL on exit, or if notify_via_var is FALSE, this function
 *   will exit without doing anything.
 *
 */
static void Sysvar_errors(BOOL fatal);

/*
 * On entry
 *
 *   -
 *
 * On exit
 *
 *   Pointer to error block if an error was detected, or NULL if OK
 *   (global ErrorPtr points to error block if unsuccessful)
 *
 * Use
 *
 *   This function sets a CallBack routine to be triggered every time a specified
 *   delay has elapsed.
 *
 *   If the function completes successfully, NULL will be returned. Otherwise,
 *   it will return a pointer to a RiscOS error block for the appropriate
 *   error (and the global ErrorPtr will also point to this block).
 *
 */
static _kernel_oserror *Enable_tick_handler(void);

/*
 * On entry
 *
 *   -
 *
 * On exit
 *
 *   Pointer to error block if an error was detected, or NULL if OK
 *   (global ErrorPtr points to error block if unsuccessful)
 *
 * Use
 *
 *   This function removes the ticker timer event, which was set with
 *   Enable_tick_handler().
 *
 *   If the function completes successfully, NULL will be returned. Otherwise,
 *   it will return a pointer to a RiscOS error block for the appropriate
 *   error (and the global ErrorPtr will also point to this block).
 *
 */
static _kernel_oserror *Disable_tick_handler(void);

/*
 * On entry
 *
 *   Pointer to zero-terminated filename string
 *   Pointer to buffer (at least as large as the file)
 *
 * On exit
 *
 *   Pointer to error block if an error was detected, or NULL if OK
 *   (global ErrorPtr points to error block if unsuccessful)
 *   (buffer contains file if successful)
 *
 * Use
 *
 *   This function will load a file into the specified buffer. If there are
 *   any errors (including file not found), it will return a pointer to a
 *   RiscOS error block. No checks are made that the buffer is large enough
 *   for the file.
 *
 */
static _kernel_oserror *Load_file(const char *filename, const char *buffer);

/*
 * On entry
 *
 *   Handle for stream (allocated by MPEGControl)
 *
 * On exit
 *
 *   Number of bytes decoded since start of stream
 *
 * Use
 *
 *   This function will return the number of bytes decoded by the SVBmip module
 *   for the specified stream.
 *
 */
static int mpeg_streamcount(int ctrl_handle);

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC FUNCTION IMPLEMENTATIONS - - - - - - - - - - - - - -*/

BOOL Read_sysvar(char *var, char *buffer, int buflen)
{
  _kernel_swi_regs r;
  _kernel_oserror *e;

  r.r[0] = (int)var;
  r.r[1] = (int)buffer;
  r.r[2] = buflen;
  r.r[3] = 0;
  r.r[4] = 0;
  e = _kernel_swi(XOS_Bit | OS_ReadVarVal, &r, &r);
  if (e || r.r[2] == 0) return(FALSE);
  buffer[r.r[2]] = 0;

  return(TRUE);
}

BOOL Set_sysvar(char *var, char *buffer, int length)
{
  _kernel_swi_regs r;
  _kernel_oserror *e;

  r.r[0] = (int)var;
  r.r[1] = (int)buffer;
  r.r[2] = length;
  r.r[3] = 0;
  r.r[4] = 0;
  e = _swix(OS_SetVarVal, _INR(0,4), (int)var, (int)buffer, length, 0, 0);
  /* _kernel_swi(XOS_Bit | OS_SetVarVal, &r, &r); */
  if (e) return(FALSE);

  return(TRUE);
}

_kernel_oserror *Add_error(const u_int number, char *string)
{
  ErrorEntry *entry = NULL;

  if (do_debug) printf("Add error def (num=%d, str='%s')\n", number, string);

  if ((number < ErrorBase) || (number > ErrorTop)) return(Issue_error(ErrRange));

  entry = Error_lookup(number);
  if (entry == NULL)
  {
    entry = (ErrorEntry *) malloc( sizeof(ErrorEntry) );
    if (entry == NULL) return(Issue_error(ErrMemory));

    entry -> next           = ErrorListStart;
    (entry -> block).errnum = number;
    ErrorListStart          = entry;
    ErrorListLength ++;
  }
  strcpy((entry -> block).errmess, string);

  return(NULL);
}

_kernel_oserror *Issue_error(const u_int number)
{
  ErrorEntry *entry;
  char       *insert;

  /* Do nothing if an error has already been issued */
  if (ErrorPtr == NULL)
  {
    entry    = Error_lookup(number);
    ErrorPtr = &ErrorBlk;

    if (do_debug) printf("Issue error &%x '%s'\n", number, ErrorPtr->errmess);

    /* Indicate the location of syntax errors in files which are parsed */
    if (number >= ErrRange)
    {
      sprintf(ErrorBlk.errmess, "Error when parsing the %s (line %d, char %d)\n\r", parse_file, line_num, parse_ptr - line_ptr + 1);
      insert    = (ErrorBlk.errmess) + strlen(ErrorBlk.errmess);
      parse_ptr = parse_end;
    }
    else
    {
      insert = ErrorBlk.errmess;
    }

    /* Use the "Undefined error" message when the error lookup fails */
    if (entry)
    {
      switch(number)
      {
        case (ErrBadChar):
        {
          /* Include the char we were looking for and the one we found */
          if (lexeme < '\x50') lexeme = '?';
          sprintf(insert, (entry -> block).errmess, parse_exp, lexeme);
          break;
        }
        case (ErrBadStr):
        {
          /* Include the string we were looking for */
          sprintf(insert, (entry -> block).errmess, parse_str);
          break;
        }
        default:
        {
          /* Simply copy the error message as is */
          strcpy(insert, (entry -> block).errmess);
        }
      }
      ErrorBlk.errnum = (entry -> block).errnum;
    }
    else
    {
      ErrorBlk.errnum = ErrorBase;
      sprintf(insert, "Undefined error (%d)", number);
    }
  }

  return(ErrorPtr);
}

/*** FILE OPERATIONS ***/

u_int File_size(const char *filename)
{
  u_int size, type;

  if ( _swix(OS_File, _INR(0, 1) | _OUT(0) | _OUT(4), 17, filename, &type, &size) )
  {
    /* If there is some error, return a size of zero */
    size = 0;
  }
  else
  {
    /* If the file is not found, or is a directory, return a size of zero */
    if ((type == 2) || (type == 0)) size = 0;
  }

  return(size);
}

char *Check_and_load(const char *filename)
{
  u_int size   = 0;
  char *buffer = NULL;

  if (do_debug) printf("Check and load file '%s'\n", filename);
  size = File_size(filename);
  if (size > 0)
  {
    buffer = malloc(size + 1);
    if (buffer)
    {
      ErrorPtr     = Load_file(filename, buffer);
      buffer[size] = '\x00';
    }
    else
    {
      ErrorPtr = Issue_error(ErrMemory);
    }
  }

  return(buffer);
}

/*- - - - - - - - - - - - - - - - - - - - - - PRIVATE FUNCTION IMPLEMENTATIONS - - - - - - - - - - - - - */

/*** MODULE INITIALISATION ENTRY POINT ***/
_kernel_oserror *Svb_init(const char *cmd_tail, int podule_base, void *pw)
{
  UNUSED(cmd_tail);
  UNUSED(podule_base);
  ErrorPtr = NULL;

  module_wsp = pw;
  Default_errors();
  Read_sysvars();

  ErrorPtr = Load_errors_file(ErrorsFile);
  if (ErrorPtr) goto failint;
  ErrorPtr = Load_channels_file(ChannelsFile);
  if (ErrorPtr) goto failint;
  ErrorPtr = Enable_tick_handler();

  if (ErrorPtr == NULL) return(NULL);

/* Exit point for failed initialisation */
failint:
  if (ticker_active) (void) Disable_tick_handler();
  if (sockid != -1)  socketclose(sockid);
  Free_channels_list();
  Free_errors_list();
  Sysvar_errors(TRUE);
  return(ErrorPtr);
}

/*** MODULE FINALISATION ENTRY POINT ***/
_kernel_oserror *Svb_final(int fatal, int podule, void *pw)
{
  UNUSED(fatal);
  UNUSED(podule);
  UNUSED(pw);
  ErrorPtr = NULL;

  if (ticker_active) (void) Disable_tick_handler();
  if (sockid != -1)  socketclose(sockid);
  Free_channels_list();
  Free_errors_list();
  Sysvar_errors(TRUE);
  return(ErrorPtr);
}

/*** MODULE *COMMAND HANDLER ENTRY POINT ***/
_kernel_oserror *Svb_cli_handler(const char *arg_string, int argc, int cmd_no, void *pw)
{
  struct  client *callp;
  int     margc = 0;
  char   *margv[10];

  UNUSED(argc);
  UNUSED(arg_string);
  UNUSED(cmd_no);
  UNUSED(pw);

  /* Call the appropriate function for this *Command */
  callp    = &svb_cli_call[cmd_no];
  ErrorPtr = (_kernel_oserror *)( *(callp->cli_call) )(margc, margv);

  Sysvar_errors(FALSE);
  return(ErrorPtr);
}

/*** MODULE SWI CALL ENTRY POINT ***/
_kernel_oserror *Svb_swi_handler(int swi_offset, _kernel_swi_regs *r, void *pw)
{
  UNUSED(pw);

  if (&svb_ent[swi_offset])
  {
    struct swient *callp = &svb_ent[swi_offset];
    ErrorPtr = (_kernel_oserror *)( *(callp->swi_call) )(r);
  }
  else ErrorPtr = error_BAD_SWI;

#ifdef TestOnly
  Quick_enum();
#endif

  Sysvar_errors(FALSE);

#ifndef MultipleStreams
  if (do_debug) printf("Exit SWI - endofstream = %d\n\n", endofstream);
#endif
  return(ErrorPtr);
}

/*** OS CLI COMMAND 'VPINFO' ***/
_kernel_oserror *VPinfo(int argc, char **argv)
{
  UNUSED(argc);
  UNUSED(argv);

  return(SVBinfo(argc, argv));
}

/*** OS CLI COMMAND 'SVBINFO' ***/
_kernel_oserror *SVBinfo(int argc, char **argv)
{
  UNUSED(argc);
  UNUSED(argv);

  Full_enum();
  return(NULL);
}

/*** ERROR RELEATED ROUTINES ***/

static void Default_errors(void)
{
  ErrorListStart  = NULL;
  ErrorListLength = 0;

  Add_error(ErrFormat,   "Format error");
  Add_error(ErrSession,  "No session");
  Add_error(ErrNetwork,  "No network resource");
  Add_error(ErrServer,   "No server resource");
  Add_error(ErrSubscr,   "Not subscribed");
  Add_error(ErrNoSvc,    "Program out of service");
  Add_error(ErrRedir,    "Redirect");
  Add_error(ErrLostChan, "Lost channel video");
  Add_error(ErrTimeout,  "Cannot contact network");
  Add_error(ErrBadChan,  "Bad channel");
  Add_error(ErrBadHand,  "Invalid SVB handle");
  Add_error(ErrActive,   "SVB stream is active");
  Add_error(ErrDefine,   "SVB channel is already defined");
  Add_error(ErrPause,    "Bad value in R2 for SVB_SetSpeed SWI");
  Add_error(ErrBadFlags, "Bad value in R0 for SVBmip SWI call");
  Add_error(ErrMemory,   "SVBmip cannot claim memory from RMA");
  Add_error(ErrAddress,  "Invalid multicast IP address");

  Add_error(ErrRange,    "Error number out of range");
  Add_error(ErrNoEOLN,   "End of line expected (ASCII 0, 10 or 13)");
  Add_error(ErrNoDigit,  "Digit ('0'..'9') expected");
  Add_error(ErrNoSpace,  "White space expected (ASCII 9 or 32)");
  Add_error(ErrBadIP,    "Bad IP address/port separator (use ':')");
  Add_error(ErrEmpty,    "Empty strings are not permitted");
  Add_error(ErrBadName,  "Bad channel name string");
  Add_error(ErrBigNum,   "Number too big");
  Add_error(ErrBigStr,   "String too long");
  Add_error(ErrBadStr,   "String '%s' expected");
  Add_error(ErrBadChar,  "Character '%c' expected ('%c' found)");
}

static _kernel_oserror *Load_errors_file(const char *filename)
{
  char  *buffer;
  u_int  size;

  size   = File_size(filename);
  buffer = Check_and_load(filename);
  if (buffer)
  {
    Init_parser(buffer, "Errors file", size);
    ErrorPtr = Errors_file();
    free(buffer);
  }

  return(ErrorPtr);
}

static void Free_errors_list(void)
{
  ErrorEntry *entry;

  while (ErrorListLength > 0)
  {
    entry          = ErrorListStart;
    ErrorListStart = ErrorListStart -> next;
    ErrorListLength --;
    free((char *)entry);
  }
}

static ErrorEntry *Error_lookup(const u_int number)
{
  ErrorEntry *entry = ErrorListStart;

  while (entry != NULL)
  {
    if ((entry -> block).errnum == number) return(entry);
    entry = entry -> next;
  }

  return(NULL);
}

static void Sysvar_errors(BOOL fatal)
{
  /* If an error condition has been flagged... */
  if (ErrorPtr)
  {
    if (do_debug) printf("Error report '%s'\n", ErrorPtr -> errmess);

    /* If we are reporting errors via system variables... */
    if (notify_via_var)
    {
      /* If the error was during 'init' or 'final' phases... */
      if (fatal)
        (void) Set_sysvar("SVB$StatusFatal", ErrorPtr -> errmess, strlen(ErrorPtr -> errmess));
      else
        (void) Set_sysvar("SVB$StatusInfo", ErrorPtr -> errmess, strlen(ErrorPtr -> errmess));
      ErrorPtr = NULL;
    }
    else
    /* If we are using conventional error reporting... */
    {
      /* If the error was during 'init' or 'final' phases, copy error block */
      if (fatal) _swix(MessageTrans_CopyError, _IN(0) | _OUT(0), ErrorPtr, &ErrorPtr);
    }
  }
}

/*** TICKER RELATED ROUTINES ***/

int Tick_handler(_kernel_swi_regs *r, void *pw)
{
  UNUSED(r);
  UNUSED(pw);

  if (open_stream)
  {
    ChannelEntry *entry;

#ifdef MultipleStreams
    /* NOT IMPLEMENTED */
#else
    entry = open_stream;

    if ((entry -> flags) & FlagFrozen)
    {
      endofstream_timer = endofstream_timeout * 100;
      endofstream       = 0;
    }
    else
    {
      u_int rxcount = mpeg_streamcount(entry -> handle);

      if (rxcount > last_rxcount)
      {
        last_rxcount = rxcount;
      }
      else
      {
        endofstream_timer -= poll_every;
        if (endofstream_timer < 1) endofstream = last_rxcount ? ErrLostChan : ErrNoSvc;
      }
    }
#endif
  }

  return(1);
}

static _kernel_oserror *Enable_tick_handler(void)
{
  ErrorPtr = _swix(OS_CallEvery, _INR(0,2), 100, (int)Tick_entry, (int)module_wsp);
  if (ErrorPtr == NULL) ticker_active = TRUE;

  return(ErrorPtr);
}

static _kernel_oserror *Disable_tick_handler(void)
{
  ErrorPtr = _swix(OS_RemoveTickerEvent, _INR(0,1), (int)Tick_entry, (int)module_wsp);
  if (ErrorPtr == NULL) ticker_active = FALSE;

  return(ErrorPtr);
}

static _kernel_oserror *Load_file(const char *filename, const char *buffer)
{
  return( _swix(OS_File, _INR(0, 4), 12, filename, buffer, 0, 0) );
}

int mpeg_streamcount(int ctrl_handle)
{
  tags[0]  = 0;                 /* tag value for number of bytes received by MPEGControl module */
  tags[1]  = -1;                /* terminator (end of list) */
  stats[2] = -1;                /* default value (for fail case) */
  (void) _swix(MPEGControl_Stats, _INR(0,4), 0, ctrl_handle, (int)tags, (int)stats, 12);

  return(stats[2]);
}
