#pragma force_top_level
#pragma include_only_once

/*
 * File:      Parser.h
 *
 * Author:    Steve Revill
 *
 * Purpose:   Header file for all of the Parser-related functionality for SVBmip module
 *
 * Copyright: (c) Pace Micro Technology plc. 1999
 *
 * History:
 *
 *   SAR - 20/09/99 - Created
 *
 * Implementation notes:
 *
 * The Parser program will parse both Channels- and Errors files, as well as the string which
 * may be passed as a parameter to the OpenStream SWI. The syntax of each of these strings is
 * defined in an EBNF-like formal notation below. As there are some similarities between these
 * definitions, some of the parser routines are shared.
 *
 * Where a maximum length is specified, this applies to either string length of length of
 * some natural (unsigned integer) value in characters in the preceding rule.
 *
 * The functions channel() and error() will call routines to add valid channel or error
 * definitions to the appropriate lists.
 *
 * EBNF-like notation:
 *
 *   *something    - zero or more of the following symbol (or group)
 *   +something    - one or more of the following symbol (or group)
 *   'something'   - a terminal symbol
 *   (rule)        - a group of symbols
 *   {rule}        - an optional group of symbols (zero or one)
 *   [a | b | c]   - one and only one of the enclosed groups (a, b or c)
 *   $xxx          - a single ASCII character value (decimal)
 *   ..            - an inclusive subrange of ASCII characters (ie: '0'..'9' or $1..$9)
 *
 * Channels file syntax:
 *
 *   channels_file   ::= *channel_line
 *   channel_line    ::= opt_space {['|' comment | channel]} eoln
 *   channel         ::= natural space name space dotted_quad port opt_space {extras}   (max = 9)
 *   name            ::= +[$33..$126 | $160..$255]                                      (max = 63)
 *   extras          ::= '-extra' opt_space '"' params '"' opt_space
 *   params          ::= *[$1..$9 | $11 | $12 | $14..$33 | $35..$255]                   (max = 255)
 *
 * Errors file syntax:
 *
 *   errors_file     ::= *(opt_space {['#' comment | error]} eoln)
 *   error           ::= natural ':' string                                             (max = 9)
 *   string          ::= +[$1..$9 | $11 | $12 | $14..$255]                              (max = 99)
 *
 * OpenStream string syntax:
 *
 *   open_param      ::= opt_space '-channel' space natural opt_space {server}          (max = 9)
 *   server          ::= '-server' space dotted_quad {port} opt_space
 *
 * Shared syntax:
 *
 *   dotted_quad     ::= octet '.' octet '.' octet '.' octet
 *   octet           ::= digit {digit {digit}}
 *   port            ::= [':' | '/'] natural                                            (max = 5)
 *   comment         ::= *[$1..$9 | $11 | $12 | $14..$255]
 *   natural         ::= +digit
 *   opt_space       ::= *[$9 | ' ']
 *   space           ::= +[$9 | ' ']
 *   eoln            ::= [$0 | $10 | $13]
 *   digit           ::= '0'..'9'
 *
 */

#ifndef SVBmip_Parser
#define SVBmip_Parser

/*- - - - - - - - - - - - - - - - - - - - - - INCLUDED FILES - - - - - - - - - - - - - - - - - - - - - - */

#include "Module.h"
#include "Channels.h"

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC MACRO DEFINITIONS - - - - - - - - - - - - - - - - - */

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC STRUCTURES - - - - - - - - - - - - - - - - - - - - -*/

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC VARIABLES - - - - - - - - - - - - - - - - - - - - - */

extern char  *parse_ptr;            /* Pointer to the current position in the loaded file */
extern char  *parse_end;            /* Pointer to the end of the loaded file */
extern u_int  line_num;             /* Current line number */
extern char  *line_ptr;             /* Current line start pointer */
extern char   lexeme;               /* Character at current position in the loaded file */
extern char   parse_exp;            /* The expected lexeme at a syntax error */
extern char  *parse_str;            /* The string expected at a syntax error */
extern char  *parse_file;           /* The name of the file being parsed */

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC FUNCTIONS - - - - - - - - - - - - - - - - - - - - - */
#ifdef __cplusplus
  extern "C"
  {
#endif

/*
 * On entry
 *
 *   Pointer to buffer containing string/file to parse
 *   Pointer to zero-terminated string describing buffer contents (eg: "Channels file")
 *   Size of the buffer (in bytes)
 *
 * On exit
 *
 *   -
 *
 * Use
 *
 *   Initialise the parser for a given buffer of a given size (containing, or
 *   which will contain the file to parse).
 *
 *   The name of the file supplied (or whatever the buffer contains) is used in
 *   reporting syntax errors detected during parsing.
 *
 */
extern void Init_parser(char *buffer, char *file, const u_int size);

/*
 * On entry
 *
 *   -
 *
 * On exit
 *
 *   -
 *
 * Use
 *
 *   Reset all the parser global variables to ensure that any spurious calls to
 *   to parser routines do not have ambiguous behaviour.
 *
 */
extern void Exit_parser(void);

/*
 * On entry
 *
 *   -
 *
 * On exit
 *
 *   Pointer to an error block if an error was detected (or NULL if OK)
 *   (global ErrorPtr points to error block if failed)
 *
 * Use
 *
 *   Start parsing a channels file. The buffer passed to init_parser is assumed
 *   to contain the file.
 *
 *   If the function completes successfully, NULL will be returned. Otherwise,
 *   it will return a pointer to a RiscOS error block for the appropriate
 *   error (and the global ErrorPtr will also point to this block).
 *
 */
extern _kernel_oserror *Channels_file(void);

/*
 * On entry
 *
 *   -
 *
 * On exit
 *
 *   Pointer to channel entry (or NULL if failed)
 *   (global ErrorPtr points to error block if failed)
 *
 * Use
 *
 *   Start parsing a channels file format line. Returns a pointer to a ChannelEntry
 *   if the line was valid, else returns NULL and ErrorPtr points to the appropriate
 *   error message.
 *
 */
extern ChannelEntry *Channel_line(void);

/*
 * On entry
 *
 *   -
 *
 * On exit
 *
 *   Pointer to an error block if an error was detected (or NULL if OK)
 *   (global ErrorPtr points to error block if failed)
 *
 * Use
 *
 *   Start parsing an errors file. The buffer passed to init_parser is assumed
 *   to contain the file.
 *
 *   If the function completes successfully, NULL will be returned. Otherwise,
 *   it will return a pointer to a RiscOS error block for the appropriate
 *   error (and the global ErrorPtr will also point to this block).
 *
 */
extern _kernel_oserror *Errors_file(void);

/*
 * On entry
 *
 *   -
 *
 * On exit
 *
 *   Channel number extracted from string (zero if there was an error)
 *   (global ErrorPtr points to error block if failed)
 *
 * Use
 *
 *   Process the old-style SWI OpenStream parameter string which may be in one
 *   of the following formats:
 *
 *     "-channel <number>"
 *     "-channel <number> -server <address>"
 *     "-channel <number> -server <address>:<port>"
 *
 *   Will call Change_server() for the last two formats.
 *
 */
extern u_int Open_param(void);

#ifdef __cplusplus
  }
#endif

#endif
