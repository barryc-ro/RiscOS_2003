#pragma force_top_level
#pragma include_only_once

/*
 * File:      Channels.h
 *
 * Author:    Steve Revill
 *
 * Purpose:   Header file for the Channels list management routines
 *
 * Copyright: (c) Pace Micro Technology plc. 1999
 *
 * History:
 *
 *   SAR - 20/09/99 - Created
 *
 * Implementation notes:
 *
 * The channels list is a doubly-linked list of struct ChannelEntry. There are two main variables
 * used to maintain this list, 'ChannelListStart' and 'ChannelListLength'. These are a pointer to
 * the 'first' channel entry (for enumeration purposes), and the number of entries currently
 * linked into the list, respectively.
 *
 * Each entry in the list has a prev and next pointer. This pointer is never NULL for any entry
 * which is linked into the list. If the list contains only one entry, both the prev and next
 * pointers will point to their own entry. When an entry is unlinked from the list, it's prev
 * and next pointers are set to NULL.
 *
 * Unlinking the channel entry at ChannelListStart will cause that pointer to be reset to point
 * to the next entry (if there is one), or NULL (if the list is now empty).
 *
 * All iterative operations over the list will use a copy of ChannelListLength to determine when
 * to stop. Thus, unlinking an item (which decrements ChannelListLength) ensures that it will not
 * be included in such an operation.
 *
 * Hence, calling any of the AddChannel, RemoveChannel, UpdateChannel or ReadChannelNames SWIs
 * between calls to the Enumerate SWI (where multiple calls were required) may result in 'odd'
 * behaviour. For safety, the state of the enumeration is reset on any call to these SWIs which
 * effectively means that the following call to the Enumerate SWI will assume that there are
 * ChannelListLength entries left to enumerate.
 *
 */

#ifndef SVBmip_Channels
#define SVBmip_Channels

/*- - - - - - - - - - - - - - - - - - - - - - INCLUDED FILES - - - - - - - - - - - - - - - - - - - - - - */

#include "Module.h"
#include "Parser.h"

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC MACRO DEFINITIONS - - - - - - - - - - - - - - - - - */

#define DontChangePort 0xFFFFFFFF              /* The old OpenStream parameter didn't include a port number */

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC STRUCTURES - - - - - - - - - - - - - - - - - - - - -*/

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC VARIABLES - - - - - - - - - - - - - - - - - - - - - */

extern ChannelEntry *ChannelListStart;         /* Pointer to the start of the channels list (or NULL) */
extern u_int         ChannelListLength;        /* Length of the channels list (in entries) */
extern BOOL          ReadChannels;             /* Flag to indicate when the channels file has been parsed */

#ifdef MultipleStreams                         /* If the SVBmip module is supporting multiple open streams, */
extern u_int open_stream;                      /* this variable contains a count of the number of streams   */
#else                                          /* currently open. If not, is contains a pointer to the      */
extern ChannelEntry *open_stream;              /* ChannelEntry of the currently open stream, or NULL if     */
#endif                                         /* none are open. Zero/NULL => SVBmip is innactive           */

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC FUNCTIONS - - - - - - - - - - - - - - - - - - - - - */
#ifdef __cplusplus
  extern "C"
  {
#endif

/*
 * On entry
 *
 *   Pointer to channels file name
 *
 * On exit
 *
 *   Pointer to error block if an error was detected, or NULL if OK
 *   (global ErrorPtr points to error block if unsuccessful)
 *   (global ChannelListLength indicates the number of entries in the list)
 *   (global ChannelListStart points to the start of the list or NULL)
 *
 * Use
 *
 *   This function is the top-level call to start the loading and parsing of
 *   the channels file. The globals ChannelListStart and ChannelListLength will
 *   be updated as appropriate. If the file is not found, no error is returned,
 *   the function will simply return NULL.
 *
 *   If the function completes successfully, NULL will be returned. Otherwise,
 *   it will return a pointer to a RiscOS error block for the appropriate
 *   error (and the global ErrorPtr will also point to this block).
 *
 */
extern _kernel_oserror *Load_channels_file(const char *filename);

/*
 * On entry
 *
 *   -
 *
 * On exit
 *
 *   (global ChannelListLength is zero)
 *   (global ChannelListStart is NULL)
 *
 * Use
 *
 *   This function will free all the memory claimed for the channels list. If
 *   the list is empty on exit, no action will be taken.
 *
 */
extern void Free_channels_list(void);

/*
 * On entry
 *
 *   Channel number (it's unique ID)
 *   Pointer to the channel name string
 *   Multicast group IP address (stored as an unsigned long int)
 *   UDP port number
 *   Pointer to the extra parameter string (may be NULL)
 *
 * On exit
 *
 *   Pointer to the new (unlinked) channel entry (or NULL if failed)
 *   (global ErrorPtr points to error block if unsuccessful)
 *
 * Use
 *
 *   This function will create a channel entry for the channels list given the
 *   various bits of data needed to initialise that entry. It does not link the
 *   entry into the channels list.
 *
 *   If the function completes successfully, NULL will be returned. Otherwise,
 *   it will return a pointer to a RiscOS error block for the appropriate
 *   error (and the global ErrorPtr will also point to this block).
 *
 */
extern ChannelEntry *Create_channel(const u_int  number,
                                    const char  *name,
                                    const u_long address,
                                    const u_int  port,
                                    const char  *extras
                                   );

/*
 * On entry
 *
 *   Pointer to channel entry
 *   Number of channel to insert before (or zero to add at end)
 *
 * On exit
 *
 *   (global ChannelListStart may point to this channel entry)
 *   (global ChannelListLength will be incremented)
 *
 * Use
 *
 *   This routine will link a channel entry into the channels list, at the
 *   specified point. If the list was empty, this call will create the list
 *   containing only this new entry.
 *
 */
extern void Link_channel(ChannelEntry *entry, const u_int number);

/*
 * On entry
 *
 *   Pointer to channel entry
 *
 * On exit
 *
 *   (global ChannelListStart may point to the next entry, or NULL)
 *   (global ChannelListLength will be decremented)
 *
 * Use
 *
 *   This routine will unlink a channel entry from the channels list. It's
 *   previous and next pointers are set to NULL. If the global variable
 *   ChannelListStart pointed to this entry, it will be modified to point
 *   to the following entry, or NULL if the list has become empty.
 *
 */
extern void Unlink_channel(ChannelEntry *entry);

/*
 * On entry
 *
 *   Channel number (unique ID)
 *
 * On exit
 *
 *   Pointer to a channel entry (or NULL if not in channels list)
 *
 * Use
 *
 *   Given a channel number, return a pointer to the matching channel entry
 *   in the channels list, or NULL if no match was found. Entries which are
 *   unlinked from the channels list will not be looked at.
 *
 */
extern ChannelEntry *Number_to_channel(const u_int number);

/*
 * On entry
 *
 *   Pointer to channel entry
 *   Flag: TRUE - dump as string, FALSE - dump as entry
 *   Pointer to buffer
 *   Free space in buffer (bytes)
 *
 * On exit
 *
 *   Free space left in buffer (may be -ve)
 *
 * Use
 *
 *   Dump the specified channel entry into the given buffer as either a string (in the
 *   same format as a line from the channels file) or as a copy of the channel entry
 *   (excluding the prev and next pointers).
 *
 *   The remaining free space in the buffer is returned. If the entry did not fit into
 *   the buffer, the negative of the extra space required (in bytes) is returned. No
 *   data is written to the buffer if the entry would be incomplete.
 *
 */
extern u_int Dump_to_buffer(ChannelEntry *entry, BOOL as_string, char *buffer, int size);


/*
 * On entry
 *
 *   Channel number (unique ID)
 *   New IP address for this channel (as an unsigned long int)
 *   New port number for this channel (or DontChangePort for no change)
 *
 * On exit
 *
 *   Pointer to an error block if an error was detected (or NULL if OK)
 *   (global ErrorPtr points to error block if failed)
 *
 * Use
 *
 *   This routine will change the IP address and port number for the specified
 *   channel in the channels list. If either of the IP address or the port
 *   number are different, the 'joins' and 'leaves' statistics are reset to
 *   zero.
 *
 *   The value 'DontChangePort' may be passed in the port number to indicate
 *   that this member of the structure should remain unchanged.
 *
 *   If the function completes successfully, NULL will be returned. Otherwise,
 *   it will return a pointer to a RiscOS error block for the appropriate
 *   error (and the global ErrorPtr will also point to this block).
 *
 */
extern _kernel_oserror *Change_server(u_int number, u_long address, u_int port_num);

/*
 * On entry
 *
 *   -
 *
 * On exit
 *
 *   -
 *
 * Use
 *
 *   Output to screen a full summary of the channels list contents and
 *   some other useful statistics. This routine is called by *SVBinfo
 *   command code.
 *
 */
extern void Full_enum(void);

/*
 * On entry
 *
 *   -
 *
 * On exit
 *
 *   -
 *
 * Use
 *
 *   DEBUGGING: Output to screen a concise summary of the channels list.
 *
 */
extern void Quick_enum(void);

#ifdef __cplusplus
  }
#endif

#endif
