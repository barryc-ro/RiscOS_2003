#pragma force_top_level
#pragma include_only_once

/*
 * File:      mipSWI.h
 *
 * Author:    Steve Revill
 *
 * Purpose:   Header file for the SVBmip SWI routines (and associated routines)
 *
 * Copyright: (c) Pace Micro Technology plc. 1999
 *
 * History:
 *
 *   SAR - 20/09/99 - Created
 *
 */

#ifndef SVBmip_mipSWI
#define SVBmip_mipSWI

/*- - - - - - - - - - - - - - - - - - - - - - INCLUDED FILES - - - - - - - - - - - - - - - - - - - - - - */

#include "Module.h"
#include "Parser.h"
#include "Channels.h"

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC MACRO DEFINITIONS - - - - - - - - - - - - - - - - - */

/* Flag bits for the ChannelEntry structure's flags */

#define FlagOld        0x00000001               /* Flag bit for backwards-compatibility */
#define FlagPlaying    0x00000002               /* Flag bit to indicate that a stream is open */
#define FlagFrozen     0x00000004               /* Flag bit to indicate that a stream is open and frozen */
#define FlagCallUDPv   0x00000008               /* Flag bit to indicate that UDPV_EndOfPlay should be called */
#define DefaultFlags   FlagOld                  /* Default channel status flags value */

/* Backwards compatibility definitions */

#define ChannelUp      1111110                  /* Old "channel up" channel number (for backwards-compatibility) */
#define ChannelDown    1111111                  /* Old "channel down" channel number (for backwards-compatibility) */

/* Definitions for R0 on entry to SVB_OpenStream */

#define SVB_OpenStream_NumberInR1       (1u<<0) /* R1 = channel number if set, else pointer to string */
#define SVB_OpenStream_NoUDPvCall       (1u<<1) /* If set, don't call UDPV_StartOfPlay */

/* Definitions for R0 on entry to SVB_EnumerateChannels */

#define SVB_EnumerateChannels_AsString  (1u<<0) /* Use channel file string if set, else write parsed data block */
#define SVB_EnumerateChannels_StartAtR1 (1u<<1) /* Start at channel number given in R1 */

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC STRUCTURES - - - - - - - - - - - - - - - - - - - - -*/

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC VARIABLES - - - - - - - - - - - - - - - - - - - - - */

extern u_int overlaps;                    /* Count of the number of overlaps (SWI OpenStream when already open) */
extern u_int underlaps;                   /* Count of the number of underlaps (SWI CloseStream when not open) */

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC FUNCTIONS - - - - - - - - - - - - - - - - - - - - - */
#ifdef __cplusplus
  extern "C"
  {
#endif

/*
 * SVB_SetServer (SWI 0x43C80)
 *
 * On entry
 *   -
 *
 * On exit
 *   All preserved
 *
 * Interrupts
 *   Interrupt status is unaltered
 *   Fast interrupts are enabled
 *
 * Processor mode
 *   Processor is in SVC mode
 *
 * Re-entrancy
 *   SWI is not re-entrant
 *
 * Use
 *   This SWI is not appropriate in this variant of the SVBmip module. It will return immediately
 *   with all registers preserved.
 */
extern _kernel_oserror *SetServer(_kernel_swi_regs *r);

/*
 * SVB_OpenStream (SWI 0x43C81)
 *
 * On entry
 *     R0 - flags (bits 2..31 reserved, should be zero)
 *     R1 - if R0:0 clear, pointer to string, else channel number
 *     R2 - handle allocated by MPEGControl module
 *
 * On exit
 *     R0 - handle allocated to this stream if no error is being raised,
 *          otherwise V flag set and R0->error block
 *
 * Interrupts
 *   Interrupt status is unaltered
 *   Fast interrupts are enabled
 *
 * Processor mode
 *   Processor is in SVC mode
 *
 * Re-entrancy
 *   SWI is not re-entrant
 *
 * Use
 *   This SWI will open a stream using the specified channel information and will return a handle
 *   which should be quoted in further calls to some of the SVBmip SWIs.
 *
 *   If R0:0 is set, R1 contains the channel number to use. This is the recommended form of this
 *   SWI. Using the R0:0 clear form is deprecated.
 *
 *   If R0:1 is clear, SVBmip will call the UDPv module to tell it to prepare for incoming data
 *   and shut down at appropriate times. If set, this step is omitted, allowing external callers
 *   to perform these tasks at different moments if they believe it is sensible to do so.
 *
 *   If the channel number quoted does not appear in the configured channel information, a
 *   "Not subscribed" error will be returned (note that this may not result in a V set return on
 *   the SWI if system variable are being used to report errors).
 *
 *   If the channel number is valid, any current stream will be left (ie: video playback will be
 *   terminated), and the new stream joined. An error will be raised if the join is unsuccessful.
 *   Future versions of the SVBmip module may not leave playing channels on calling this SWI (for
 *   example, if multiple streams were supported). You should not rely on this behaviour.
 *
 *   For Backwards Compatibility Only
 *   --------------------------------
 *
 *   If R0:0 is clear, R1 contains a pointer to a ctrl-terminated string. This string is of one of
 *   the following formats:
 *
 *     '-channel <number>' or
 *     '-channel <number> -server <IP group address>' or
 *     '-channel <number> -server <IP group address and port>'
 *
 *   The -channel switch indicates the channel number of the channel to start playing from.
 *   Including the -server switch will update the IP group address (and port number) for the
 *   specified channel in the channels list, then start playing it.
 *
 *   The SVBmip module maintains a count of joins and leaves for each channel. Specifying a new
 *   -server for a channel causes this count to be reset for that channel. If the current server is
 *   specified with -server, the count is not reset.
 *
 *   The reserved channel numbers for channel up and channel down (1111110 and 1111111
 *   respectively) may be used in this string, but this is not necessarily going to remain
 *   supported in future versions of the SVBmip module.
 */
extern _kernel_oserror *OpenStream(_kernel_swi_regs *r);

/*
 * SVB_CloseStream (SWI 0x43C82)
 *
 * On entry
 *     R0 - flags (should be zero)
 *     R1 - handle (as returned by SWI OpenStream)
 *
 * On exit
 *   All preserved
 *
 * Interrupts
 *   Interrupt status is unaltered
 *   Fast interrupts are enabled
 *
 * Processor mode
 *   Processor is in SVC mode
 *
 * Re-entrancy
 *   SWI is not re-entrant
 *
 * Use
 *   If the specified channel is currently playing, a leave will be sent for that multicast group
 *   and the stream stopped. If streaming was not in progress, no error will be raised. However,
 *   the statistic indicating the number of leaves for the specified channel will be incremented.
 */
extern _kernel_oserror *CloseStream(_kernel_swi_regs *r);

/*
 * SVB_CheckEndOfStream (SWI 0x43C83)
 *
 * On entry
 *     R0 - flags (should be zero)
 *     R1 - handle (as returned by SWI OpenStream)
 *
 * On exit
 *     R0 - end of stream indication:
 *            zero if not at end of stream,
 *            non-zero if at end of stream.
 *     R1 - preserved
 *     R2 - 0
 *     R3 - 0
 *
 * Interrupts
 *   Interrupt status is unaltered
 *   Fast interrupts are enabled
 *
 * Processor mode
 *   Processor is in SVC mode
 *
 * Re-entrancy
 *   SWI is not re-entrant
 *
 * Use
 *   This SWI can be polled to check the status of a playing stream. If the stream is still
 *   playing, zero will be returned in R0. However, if R1 does not contain a valid handle, the
 *   error "Invalid SVB handle" will be returned.
 *
 *   NOTE:
 *
 *   The end of stream checking is done by periodically asking the MPEGControl module if it has
 *   has decoded any data since the last time it was queried. The regularity, in centiseconds, of
 *   this checking is controlled by the system variable <SVB$PollEvery>.
 *
 *   If the MPEGControl module has not decoded any data since the last poll, SVBmip will start a
 *   timer (of <SVB$EOSTimeout> seconds in length). If there has still been no data decoded after
 *   this timeout, SWI CheckEndOfStream will return with a non-zero value in R0.
 */
extern _kernel_oserror *CheckEndofStream(_kernel_swi_regs *r);

/*
 * SVB_SetSpeed (SWI 0x43C84)
 *
 * On entry
 *     R0 - flags (should be zero)
 *     R1 - handle (as returned by SWI OpenStream)
 *     R2 - zero = freeze,
 *          one  = play (normal speed),
 *          all other values are reserved
 *
 * On exit
 *   All preserved
 *
 * Interrupts
 *   Interrupt status is unaltered
 *   Fast interrupts are enabled
 *
 * Processor mode
 *   Processor is in SVC mode
 *
 * Re-entrancy
 *   SWI is not re-entrant
 *
 * Use
 *   This SWI allows playback to be frozen. Alteration of speed is not supported in this variant of
 *   the SVBmip module (because the module cannot have any control over the rate of the multicast
 *   stream).
 *
 *   It should be noted that playback will resume from where ever the stream is currently at rather
 *   than resuming from the moment of pause.
 *
 *   If R0 contains a non-zero value on entry, this SWI will return immediately with the error
 *   "Bad value in R0 for SVBmip SWI call".
 *
 *   Invalid values passed in R2 will return the error "Bad value in R2 for SVB_SetSpeed SWI".
 *
 *   Where the value passed in R1 is not valid, the error "Invalid SVB handle" will be returned.
 */
extern _kernel_oserror *SetSpeed(_kernel_swi_regs *r);

/*
 * SVB_SetPosition (SWI 0x43C85)
 *
 * On entry
 *   -
 *
 * On exit
 *   All preserved
 *
 * Interrupts
 *   Interrupt status is unaltered
 *   Fast interrupts are enabled
 *
 * Processor mode
 *   Processor is in SVC mode
 *
 * Re-entrancy
 *   SWI is not re-entrant
 *
 * Use
 *   This SWI is not appropriate in this variant of the SVBmip module. It will return immediately
 *   with all registers preserved.
 */
extern _kernel_oserror *SetPosition(_kernel_swi_regs *r);

/*
 * SVB_ReadNPT (SWI 0x43C86)
 *
 * On entry
 *   -
 *
 * On exit
 *   R0 - minus one
 *
 * Interrupts
 *   Interrupt status is unaltered
 *   Fast interrupts are enabled
 *
 * Processor mode
 *   Processor is in SVC mode
 *
 * Re-entrancy
 *   SWI is not re-entrant
 *
 * Use
 *   This SWI is not appropriate in this variant of the SVBmip module. It will return immediately
 *   with R0 set to -1 and all other registers preserved.
 */
extern _kernel_oserror *ReadNPT(_kernel_swi_regs *r);

/*
 * SVB_ReadChannel (SWI 0x43C87)
 *
 * On entry
 *     R0 - flags (bits 2..31 reserved, should be zero)
 *     R1 - pointer to buffer or zero
 *     R2 - size (in bytes) of the buffer (if R1 is non-zero on entry)
 *
 * On exit
 *     R0 - current channel number, or -1 if no channel is playing
 *     R1 - preserved
 *     R2 - free space in buffer (-ve if buffer was too small)
 *     R3 - Channel number below current channel (only if R0:1 set on entry)
 *     R4 - Channel number above current channel (only if R0:1 set on entry)
 *
 * Interrupts
 *   Interrupt status is unaltered
 *   Fast interrupts are enabled
 *
 * Processor mode
 *   Processor is in SVC mode
 *
 * Re-entrancy
 *   SWI is not re-entrant
 *
 * Use
 *   If a stream is currently playing, this SWI will report the current channel number in R0 and
 *   set <SVB$ChannelName> to the textual name associated with this channel.
 *
 *   If no stream is being played, R0 will contain -1 on exit and <SVB$ChannelName> will be set to
 *   '<unset>'.
 *
 *   If R1 is non-zero on entry, it contains a pointer to a buffer. This buffer will be filled as
 *   follows:
 *
 *     * If R0:0 is clear, a copy of the channel information structure (from the channels list)
 *       will be returned in the buffer.
 *     * If R0:0 is set, a zero-terminated string for this channel, in the same format as a line
 *       from the Channels file, will be returned in the buffer.
 *
 *   R2 on exit contains the free space in bytes left in the buffer. If negative, there was
 *   insufficient room in the buffer for a copy of the structure or string.
 *
 *   R3 and R4 allow channel-up and channel-down functionality to easily be implemented. For this
 *   purpose, the channels list is effectively circular; if the current channel is the first in the
 *   list when calling this SWI, R3 will contain the channel number of the last channel on exit. If
 *   the current channel is the last in the list, R4 will contain the number of the first on exit.
 *
 *   NOTES:
 *
 *   If R0:1 is clear on entry, R3 and R4 will be preserved on exit.
 *   If R1 is zero on entry, both R1 and R2 will be preserved on exit.
 *   In future versions of this module, which support multiple streams, the behaviour of this SWI
 *   call is undefined.
 */
extern _kernel_oserror *ReadChannel(_kernel_swi_regs *r);

/*
 * SVB_ReadChannelNames (SWI 0x43C88)
 *
 * On entry
 *     R0 - flags (bits 1..31 reserved, should be zero)
 *
 * On exit
 *   All preserved
 *
 * Interrupts
 *   Interrupt status is unaltered
 *   Fast interrupts are enabled
 *
 * Processor mode
 *   Processor is in SVC mode
 *
 * Re-entrancy
 *   SWI is not re-entrant
 *
 * Use
 *   This SWI will prod the module into attempting to read the configuration file, if it has not
 *   already done so beforehand (R0:0 is clear), or unconditionally (R0:0 is set). If successful,
 *   the new channels list will replace the existing one.
 *
 *   If any channel is playing when this SWI is called, the error "SVB stream is active" will be
 *   returned.
 */
extern _kernel_oserror *ReadChannelNames(_kernel_swi_regs *r);

/*
 * SVB_AddChannel (SWI 0x43CBF)
 *
 * On entry
 *     R0 - flags (bits 1..31 reserved, should be zero)
 *            bit 0 clear - add to end of list
 *            bit 0 set   - add before channel in R2
 *     R1 - pointer to string (same format as a line from Channels file)
 *     R2 - channel number to add before (unused if R0:0 is clear)
 *
 * On exit
 *   All preserved
 *
 * Interrupts
 *   Interrupt status is unaltered
 *   Fast interrupts are enabled
 *
 * Processor mode
 *   Processor is in SVC mode
 *
 * Re-entrancy
 *   SWI is not re-entrant
 *
 * Use
 *   This SWI will add a new channel to the channels list. New channel information will be
 *   positioned either at the end of the list (R0:0 clear), or before the entry for the channel
 *   specified in R2 (R0:0 set).
 *
 *   An error will be returned if:
 *
 *     The parameters contain invalid values ("Bad channel");
 *     R0:0 is set and the channel in R2 is not in the list ("Bad channel");
 *     The channel in R1 is in already in the list ("SVB channel is already defined").
 *
 *   The string pointed to by R1 is of exactly the same format as a line from the Channels file
 *   (see the Parser header file for more information on the channel file format, and hence,
 *   these strings). If this string is a comment or an empty line, this SWI will exit will all
 *   registers preserved.
 */
extern _kernel_oserror *AddChannel(_kernel_swi_regs *r);

/*
 * SVB_RemoveChannel (SWI 0x43CBE)
 *
 * On entry
 *     R0 - flags (should be zero)
 *     R1 - channel number
 *
 * On exit
 *   All preserved
 *
 * Interrupts
 *   Interrupt status is unaltered
 *   Fast interrupts are enabled
 *
 * Processor mode
 *   Processor is in SVC mode
 *
 * Re-entrancy
 *   SWI is not re-entrant
 *
 * Use
 *   This SWI will remove the specified channel entry from the channels list.
 *
 *   If it is not found, the error "Bad channel" will be returned.
 *
 *   If the specified channel is playing, the error "SVB stream is active" will be returned.
 */
extern _kernel_oserror *RemoveChannel(_kernel_swi_regs *r);

/*
 * SVB_UpdateChannel (SWI 0x43CBD)
 *
 * On entry
 *     R0 - flags (bits 1..31 reserved, should be zero)
 *          bit 0 clear - preserve position in list
 *          bit 0 set   - add before channel in R2
 *     R1 - pointer to string (same format as a line from Channels file)
 *     R2 - channel number to move before (unused if R0:0 is clear)
 *
 * On exit
 *   All preserved
 *
 * Interrupts
 *   Interrupt status is unaltered
 *   Fast interrupts are enabled
 *
 * Processor mode
 *   Processor is in SVC mode
 *
 * Re-entrancy
 *   SWI is not re-entrant
 *
 * Use
 *   This SWI may be used to update some of the attributes associated with a given entry in the
 *   channels list. If the specified channel is not in the list, the error "Bad channel" will be
 *   returned.
 *
 *   If the specified channel is playing, the error "SVB stream is active" will be returned.
 *
 *   You may change the group IP address, port number, textual description, extra parameters string
 *   and the position in the list. As the channel number is the unique identifier for that entry
 *   in the list, it cannot be changed.
 *
 *   If R0:0 is set, the channel entry will be moved in the channels list to be immediately before
 *   the entry for the channel specified in R2. If that channel cannot be found, the error "Bad
 *   channel" will be returned.
 */
extern _kernel_oserror *UpdateChannel(_kernel_swi_regs *r);

/*
 * SVB_EnumerateChannels (SWI 0x43CBC)
 *
 * On entry
 *     R0 - flags (bits 2..31 reserved, should be zero)
 *     R1 - zero to start, or channel number to start at (returns the entries following this one)
 *     R2 - pointer to buffer
 *     R3 - size (in bytes) of the buffer
 *     R4 - number of entries to read
 *
 * On exit
 *     R0 - preserved
 *     R1 - zero           - the buffer was too small for a single entry
 *          minus one      - no more to read
 *          channel number - last channel in buffer (more to read)
 *     R2 - preserved
 *     R3 - free space remaining in buffer (may be -ve)
 *     R4 - number of channels in buffer
 *
 * Interrupts
 *   Interrupt status is unaltered
 *   Fast interrupts are enabled
 *
 * Processor mode
 *   Processor is in SVC mode
 *
 * Re-entrancy
 *   SWI is not re-entrant
 *
 * Use
 *   This SWI can be used to enumerate the channels list for the SVBmip module from start to end
 *   into a buffer. This may take several calls to complete the operation. If R0:0 is clear on
 *   entry, the buffer will be filled with copies of the channel entries (as documented below),
 *   otherwise zero-terminated strings of the same format as a line from the Channels file will
 *   be returned in the buffer.
 *
 *   The first time it is called, you should pass zero in R1 if R0:1 is clear, else a channel
 *   number to start enumerating at (inclusive, so a value of 1 upwards) if R0:1 is set. On
 *   exit, R1 will contain one of:
 *
 *     * the channel number of the last channel entry in the buffer (not finished);
 *     * minus one if finished (there are no more channels to enumerate);
 *     * zero if the buffer was not big enough for a single channel entry (or string).
 *
 *   R4 will contain a count of the number of complete entries (or strings) in the buffer. Only
 *   complete entries (or strings) are written to the buffer. The content of the remaining space
 *   (if any) is undefined.
 *
 *   If R1 is not minus one on exit, you should call this SWI again with R4 set appropriately to
 *   enumerate information on the entries after the one specified in R1. If R1 is minus one on
 *   exit, there are no more entries to enumerate. Note that R1 may contain minus one after the
 *   first call if the list is empty or the buffer was large enough for all entries.
 *
 *   The format of a channel entry in the buffer is as follows:
 *
 *       Bytes: Contents:
 *       0      Size (in bytes) this entry in the buffer
 *       4      Channel handle as allocated by MPEGControl
 *       8      Channel number (positive, non-zero, 32bit integer)
 *       12+    Pointer to the channel name string
 *       16+    Pointer to additional parameter string (or zero)
 *       20     Channel status flags word
 *       24     Count of join requests for this channel (unsigned integer)
 *       28     Count of leave requests for this channel (unsigned integer)
 *       32     UDP port number (unsigned integer)
 *       36     Multicast group IP address (as a struct in_addr)
 *       40     Channel name string (up to 63 bytes, zero terminated)
 *       ..     Additional parameter string (up to 255 bytes, zero terminated)
 *
 *   + The strings pointed to by this structure are word-aligned and zero-terminated. Lengths
 *   quoted exclude the terminator. The additional parameter string may not be present if bytes
 *   32..35 are zero.
 *
 *   The status flags currently defined are:
 *
 *       Bit:   Meaning:
 *       0      Always set for backwards compatibility
 *       1      Channel is playing
 *       2      Channel is frozen (paused)
 *
 *   Note that the current definition of a "struct in_addr" may be found in the following C header
 *   file: "Export.Lib.TCPIPLibs.netinet.h.in". This definition may change over time (for example,
 *   if IP addresses start using more than 32 bits).
 */
extern _kernel_oserror *EnumerateChannels(_kernel_swi_regs *r);

/*
 * On entry
 *
 *   -
 *
 * On exit
 *
 *   (some variables may be initialised)
 *
 * Use
 *
 *   This routine initialises some of the SVBmip parameters depending on the
 *   existance and value of certain system variables. If any error is detected,
 *   ie: a variable does not exist, this routine will not cause ErrorPtr to
 *   become non-NULL.
 *
 */
extern void Read_sysvars(void);

/*
 * On entry
 *
 *   Pointer to channel entry
 *   Handle allocated by MPEGControl module
 *   TRUE to call UDPv, FALSE to skip the call
 *
 * On exit
 *
 *   Pointer to error block if an error was detected, or NULL if OK
 *   (global ErrorPtr points to error block if unsuccessful)
 *
 * Use
 *
 *   This function will start multicast stream and update the relevant channel
 *   flags and statistics.
 *
 *   If the function completes successfully, NULL will be returned. Otherwise,
 *   it will return a pointer to a RiscOS error block for the appropriate
 *   error (and the global ErrorPtr will also point to this block).
 *
 */
extern _kernel_oserror *Start_streaming(ChannelEntry *entry, u_int ctrl_handle, BOOL call_udpv);

/*
 * On entry
 *
 *   Pointer to channel entry
 *
 * On exit
 *
 *   Pointer to error block if an error was detected, or NULL if OK
 *   (global ErrorPtr points to error block if unsuccessful)
 *
 * Use
 *
 *   This function will stop multicast stream and update the relevant channel
 *   flags and statistics.
 *
 *   If the function completes successfully, NULL will be returned. Otherwise,
 *   it will return a pointer to a RiscOS error block for the appropriate
 *   error (and the global ErrorPtr will also point to this block).
 *
 */
extern _kernel_oserror *Stop_streaming(ChannelEntry *entry);

#ifdef __cplusplus
  }
#endif

#endif
