#pragma force_top_level
#pragma include_only_once

/*
 * File:      Module.h
 *
 * Author:    Steve Revill
 *
 * Purpose:   Main header file (to be included by all parts of the SVBmip sources)
 *
 * Copyright: (c) Pace Micro Technology plc. 1999
 *
 * History:
 *
 *   SAR - 20/09/99 - Created
 *
 */

#ifndef SVBmip_Module
#define SVBmip_Module

/*- - - - - - - - - - - - - - - - - - - - - - INCLUDED FILES - - - - - - - - - - - - - - - - - - - - - - */

#include <stdio.h>
#include <kernel.h>

#include "inetlib.h"
#include "sys/ioctl.h"
#include "netinet/in.h"

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC MACRO DEFINITIONS - - - - - - - - - - - - - - - - - */

#define ChannelsFile "<SVB$ChannelFile>"       /* The default location of the channels file */
#define ErrorsFile   "<SVB$ErrMsgFile>"        /* The default location of the errors file */

/* Uncomment the following line to provide multiple stream support (changes behaviour of some SWIs) */
/* Note: most of this functionality has not been imlemented yet (ie: EOS timeouts)... */
/* #define MultipleStreams */

/* Uncomment the following line to build a test version (doesn't do IGMP bits) for SWI excercising */
/* #define TestOnly */

#define ENDOFSTREAM_TIMEOUT 10                 /* Default end of stream timeout (seconds) */
#define POLL_EVERY          100                /* Granularity (centiseconds) of MPEGControl polling */

#define ErrorBase           0x817300           /* Lowest error number in SVBmip's block */
#define ErrorTop            ErrorBase+255      /* Highest error number in SVBmip's block */

#define EOS_INIT            0                  /* Indicates an EOS timeout has not yet been detected */
#define EOS_LOSTCHAN        1                  /* Indicates a stream ended while the channel was playing */
#define EOS_NOVIDEO         2                  /* Indicates a could not be started (wasn't there at all) */

/* Errors for the SVB routines */
/* Error number 'ErrorBase' is reserved for the "Undefined error" message */
#define ErrFormat    ErrorBase+1               /* Format error */
#define ErrSession   ErrorBase+2               /* No session */
#define ErrNetwork   ErrorBase+3               /* No network resource */
#define ErrServer    ErrorBase+4               /* No server resource */
#define ErrSubscr    ErrorBase+5               /* Not subscribed */
#define ErrNoSvc     ErrorBase+6               /* Program out of service */
#define ErrRedir     ErrorBase+7               /* Redirect */
#define ErrLostChan  ErrorBase+8               /* Lost channel video */
#define ErrTimeout   ErrorBase+9               /* Cannot contact network */
#define ErrBadChan   ErrorBase+10              /* Bad channel */
#define ErrBadHand   ErrorBase+11              /* Invalid SVB handle */
#define ErrActive    ErrorBase+12              /* SVB stream is active */
#define ErrDefine    ErrorBase+13              /* SVB channel is already defined */
#define ErrPause     ErrorBase+14              /* Bad value in R2 for SVB_SetSpeed SWI */
#define ErrBadFlags  ErrorBase+15              /* Bad value in R0 for SVBmip SWI call */
#define ErrMemory    ErrorBase+16              /* SVBmip cannot claim memory from RMA */
#define ErrAddress   ErrorBase+17              /* Invalid multicast IP address */

/* Errors for the parser routines */
#define ErrRange     ErrorTop-10               /* Error number out of range */
#define ErrNoEOLN    ErrorTop-9                /* End of line expected (ASCII 0, 10 or 13 */
#define ErrNoDigit   ErrorTop-8                /* Digit ('0'..'9') expected */
#define ErrNoSpace   ErrorTop-7                /* White space expected (ASCII 9 or 32) */
#define ErrBadIP     ErrorTop-6                /* Bad IP address/port separator (use ':') */
#define ErrEmpty     ErrorTop-5                /* Empty strings are not permitted */
#define ErrBadName   ErrorTop-4                /* Bad channel name string */
#define ErrBigNum    ErrorTop-3                /* Number too big */
#define ErrBigStr    ErrorTop-2                /* String too long */
#define ErrBadStr    ErrorTop-1                /* String '?' expected */
#define ErrBadChar   ErrorTop-0                /* Character '?' expected ('?' found) */

/* Define a Boolean type with values TRUE and FALSE */
#ifndef BOOL
typedef unsigned int BOOL;
#define TRUE  1
#define FALSE 0
#endif

/* ATM SWI numbers */
#define StreamInitSWI_ATM        0x47b0c
#define StreamClearSWI_ATM       0x47b0d
#define StreamStatusSWI_ATM      0x47b10

/* VSP error numbers */
#define VSP_E_WRONGCTRL          11
#define VSP_E_UNKSERVER          15
#define VSP_E_INVHANDLE          16
#define VSP_E_NOHANDLE           17
#define VSP_E_NOMEMORY           18

#define FLUSHING                 01
#define CLOSING                  02
#define CANCEL_FLUSHING          04
#define END_OF_STREAM            1

#define TickerV                  28            /* Ticker vector number */
#define UNUSED(x) x=x

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC STRUCTURES - - - - - - - - - - - - - - - - - - - - -*/

/* An entry in the doubly-linked channels list */
typedef struct ChannelEntry ChannelEntry;
struct ChannelEntry
{
  ChannelEntry   *prev;                        /* Pointer to the previous channel entry (or NULL) */
  ChannelEntry   *next;                        /* Pointer to the next channel entry (or NULL) */
  u_int           size;                        /* Note: the size excludes the prev & next pointers */
  u_int           handle;                      /* Handle for this stream (returned by MPEGControl) */
  u_int           number;                      /* The channel number (it's unique identifier) */
  char           *name;                        /* Pointer to the channel name string */
  char           *extras;                      /* Pointer to the extra parameter string (or NULL) */
  u_int           flags;                       /* Channel status flags */
  u_int           joins;                       /* Number of 'joins' for this channel */
  u_int           leaves;                      /* Number of 'leaves' for this channel */
  u_int           port;                        /* UDP port number for this channel */
  struct in_addr  group;                       /* The multicast group address */
};

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC VARIABLES - - - - - - - - - - - - - - - - - - - - - */

extern BOOL do_debug;                          /* Flag: is on-screen debugging enabled or disabled? */
extern BOOL notify_via_var;                    /* Flag: are errors being reported via system variables? */
extern int  endofstream_timeout;               /* How many seconds before an EOS timeout */
extern int  poll_every;                        /* How often we prod MPEGControl for EOS timeout (centiseconds) */
extern int  sockid;                            /* ID of the socket being used for multicast */

extern _kernel_oserror *ErrorPtr;              /* Error block (points to 'err_block' if an error has been issued) */
extern _kernel_oserror  ErrorBlk;              /* General-purpose error block */

#ifndef MultipleStreams
extern u_int endofstream;                      /* Non-zero indicates we're (probably) at the end of the stream */
extern int   endofstream_timer;                /* Countdown timer for the end of stream timeout */
extern u_int last_rxcount;                     /* Last count of bytes decoded by MPEGControl module */
#endif

/*- - - - - - - - - - - - - - - - - - - - - - PUBLIC FUNCTIONS - - - - - - - - - - - - - - - - - - - - - */
#ifdef __cplusplus
  extern "C"
  {
#endif

/*
 * On entry
 *
 *   Pointer to variable name string
 *   Pointer to a buffer to write contents into
 *   Length of the buffer to write to (bytes)
 *
 * On exit
 *
 *   Status of operation (FALSE - fail, TRUE - succeed)
 *
 * Use
 *
 *   This function will read the contents of a system variable as a zero-terminated
 *   string into the specified buffer. It returns TRUE or FALSE depending on the
 *   success of the operation.
 *
 */
extern BOOL Read_sysvar(char *var, char *buffer, int buflen);

/*
 * On entry
 *
 *   Pointer to variable name string
 *   Pointer to a buffer containing contents to use
 *   Length of the buffer (bytes)
 *
 * On exit
 *
 *   Status of operation (FALSE - fail, TRUE - succeed)
 *
 * Use
 *
 *   This function will store the string (in the specified buffer, of given length)
 *   into the specified system variable. If that variable did not already exist, it
 *   will be created with this value. The function returns TRUE or FALSE depending
 *   on the success of the operation.
 *
 */
extern BOOL Set_sysvar(char *var, char *buffer, int length);

/*
 * On entry
 *
 *   Error number
 *   Pointer to the error string
 *
 * On exit
 *
 *   Pointer to an error block if an error was detected (or NULL if OK)
 *   (global ErrorPtr points to error block if unsuccessful)
 *   (global ErrorListStart points to new error block)
 *   (global ErrorListLength incremented by one)
 *
 * Use
 *
 *   This function will add a new error block to the errors list. If an error
 *   block is already in the list with the same number, it's error string is
 *   overwritten with the new string. Otherwise, the new error block is placed
 *   at the head of the error list.
 *
 *   If the function completes successfully, NULL will be returned. Otherwise,
 *   it will return a pointer to a RiscOS error block for the appropriate
 *   error (and the global ErrorPtr will also point to this block).
 *
 */
extern _kernel_oserror *Add_error(const u_int number, char *string);

/*
 * On entry
 *
 *   Error number of error to report
 *
 * On exit
 *
 *   Pointer to the specified error block
 *   (global ErrorPtr also points to the error block)
 *
 * Use
 *
 *   This function will generate an internal SVBmip error, looking-up the
 *   specified error in the errors list and returning a pointer to that
 *   block. If the error number is not found, the returned error block will
 *   contain the "Unspecified error" message.
 *
 *   Note that the global ErrorPtr is also updated to point at the error.
 *
 *   Important:
 *
 *     If there has already been an error issued (ie: if ErrorPtr is not
 *     NULL), this function will simply return ErrorPtr unmodified.
 *
 */
extern _kernel_oserror *Issue_error(const u_int number);

/*
 * On entry
 *
 *   Pointer to zero-terminated filename string
 *
 * On exit
 *
 *   Size of file (zero if not found or is a directory)
 *
 * Use
 *
 *   This function returns the size (in bytes) of the named file. It does
 *   not return errors. If the file is not found, or is a directory, it
 *   will return zero.
 *
 */
extern u_int File_size(const char *filename);

/*
 * On entry
 *
 *   Pointer to zero-terminated filename string
 *
 * On exit
 *
 *   Pointer to buffer containing file (or NULL if not found)
 *   (global ErrorPtr points to error block if unsuccessful)
 *
 * Use
 *
 *   This function attempts to load the named file entirely into memory
 *   by allocating a buffer for it and loading it into that buffer. If
 *   the file is not found or is zero bytes in size, NULL will be
 *   returned.
 *
 *   If some other error is detected (ie: failure to allocate enough
 *   memory), NULL is returned and the global ErrorPtr contains a pointer
 *   to the RiscOS error block for the appropriate error.
 *
 *   Note: the buffer allocated by this function is always one byte
 *   larger than the file. This extra byte (at the end of the buffer)
 *   always contains zero (to help stop Parser routines from overflowing
 *   past the end of the file).
 *
 */
extern char *Check_and_load(const char *filename);

/*
 * On entry
 *
 *   Number of arguments
 *   Pointer to argument string
 *
 * On exit
 *
 *   Pointer to buffer containing file (or NULL if not found)
 *   (global ErrorPtr points to error block if unsuccessful)
 *
 * Use
 *
 *   Code for the command *VPinfo.
 *
 *   If the function completes successfully, NULL will be returned. Otherwise,
 *   it will return a pointer to a RiscOS error block for the appropriate
 *   error (and the global ErrorPtr will also point to this block).
 *
 */
extern _kernel_oserror *VPinfo(int argc, char **argv);

/*
 * On entry
 *
 *   Number of arguments
 *   Pointer to argument string
 *
 * On exit
 *
 *   Pointer to buffer containing file (or NULL if not found)
 *   (global ErrorPtr points to error block if unsuccessful)
 *
 * Use
 *
 *   Code for the command *SVBinfo.
 *
 *   If the function completes successfully, NULL will be returned. Otherwise,
 *   it will return a pointer to a RiscOS error block for the appropriate
 *   error (and the global ErrorPtr will also point to this block).
 *
 */
extern _kernel_oserror *SVBinfo(int argc, char **argv);

#ifdef __cplusplus
  }
#endif

#endif
