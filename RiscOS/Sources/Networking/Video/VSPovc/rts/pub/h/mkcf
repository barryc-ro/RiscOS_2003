/* GENERATED FILE
 * mkcf - public declarations
 * from /vobs/rts/pub/mkcf.idl
 */

#ifndef MKCF_IDL
#define MKCF_IDL

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif

EXTC_START

/**********  SEQUENCE DECLARATIONS *********/
#ifndef mkd_segment_DECLARED
#define mkd_segment_DECLARED
typedef struct mkd_segment mkd_segment;
#endif /* mkd_segment_DECLARED */

#ifndef YCIDL_sequence_mkd_segment_DEFINED
#define YCIDL_sequence_mkd_segment_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mkd_segment* _buffer;
} YCIDL_sequence_mkd_segment;
#ifndef YCIDL_sequence_mkd_segment_SUPP_FUNCS
#define YCIDL_sequence_mkd_segment_SUPP_FUNCS
#endif /* YCIDL_sequence_mkd_segment_SUPP_FUNCS */

#endif /* YCIDL_sequence_mkd_segment_DEFINED */

#ifndef mkd_segInfo_DECLARED
#define mkd_segInfo_DECLARED
typedef struct mkd_segInfo mkd_segInfo;
#endif /* mkd_segInfo_DECLARED */

#ifndef YCIDL_sequence_mkd_segInfo_DEFINED
#define YCIDL_sequence_mkd_segInfo_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mkd_segInfo* _buffer;
} YCIDL_sequence_mkd_segInfo;
#ifndef YCIDL_sequence_mkd_segInfo_SUPP_FUNCS
#define YCIDL_sequence_mkd_segInfo_SUPP_FUNCS
#endif /* YCIDL_sequence_mkd_segInfo_SUPP_FUNCS */

#endif /* YCIDL_sequence_mkd_segInfo_DEFINED */

#ifndef mkcf_feed_tag_DECLARED
#define mkcf_feed_tag_DECLARED
typedef struct mkcf_feed_tag mkcf_feed_tag;
#endif /* mkcf_feed_tag_DECLARED */

#ifndef YCIDL_sequence_mkcf_feed_tag_DEFINED
#define YCIDL_sequence_mkcf_feed_tag_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mkcf_feed_tag* _buffer;
} YCIDL_sequence_mkcf_feed_tag;
#ifndef YCIDL_sequence_mkcf_feed_tag_SUPP_FUNCS
#define YCIDL_sequence_mkcf_feed_tag_SUPP_FUNCS
#endif /* YCIDL_sequence_mkcf_feed_tag_SUPP_FUNCS */

#endif /* YCIDL_sequence_mkcf_feed_tag_DEFINED */


/* interface mkcf_feed declarations */
#ifndef mkcf_feed_DECLARED
#define mkcf_feed_DECLARED
typedef struct YCmkcf_feed* mkcf_feed;
yotk* mkcf_feed__getTC(void);
#ifndef YCTC_mkcf_feed
#define YCTC_mkcf_feed   (mkcf_feed__getTC())
#endif
#endif /* mkcf_feed_DECLARED */

#ifndef mkcf_feed_SUPP_FUNCS
#define mkcf_feed_SUPP_FUNCS
void mkcf_feed__free( mkcf_feed* val, ysmff ffunc);
void mkcf_feed__copy( mkcf_feed* dest, mkcf_feed* src, ysmaf afunc);
#endif /* mkcf_feed_SUPP_FUNCS */

#ifndef YCIDL_sequence_mkcf_feed_DEFINED
#define YCIDL_sequence_mkcf_feed_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mkcf_feed* _buffer;
} YCIDL_sequence_mkcf_feed;
#ifndef YCIDL_sequence_mkcf_feed_SUPP_FUNCS
#define YCIDL_sequence_mkcf_feed_SUPP_FUNCS
#endif /* YCIDL_sequence_mkcf_feed_SUPP_FUNCS */

#endif /* YCIDL_sequence_mkcf_feed_DEFINED */

/******* NON-SEQUENCE DECLARATIONS *******/
#ifndef mkd_assetCookieMaxlen_DECLARED
#define mkd_assetCookieMaxlen_DECLARED
#define mkd_assetCookieMaxlen ((sb2) 128)
#endif /* mkd_assetCookieMaxlen_DECLARED */

#ifndef mkd_assetCookie_DECLARED
#define mkd_assetCookie_DECLARED
typedef char* mkd_assetCookie;
yotk* mkd_assetCookie__getTC(void);
#ifndef YCTC_mkd_assetCookie
#define YCTC_mkd_assetCookie   (mkd_assetCookie__getTC())
#endif
#endif /* mkd_assetCookie_DECLARED */

#ifndef mkd_assetCookie_SUPP_FUNCS
#define mkd_assetCookie_SUPP_FUNCS
#endif /* mkd_assetCookie_SUPP_FUNCS */

#ifndef mkd_assetCookieList_DECLARED
#define mkd_assetCookieList_DECLARED
typedef YCIDL_sequence_string mkd_assetCookieList;
yotk* mkd_assetCookieList__getTC(void);
#ifndef YCTC_mkd_assetCookieList
#define YCTC_mkd_assetCookieList   (mkd_assetCookieList__getTC())
#endif
#endif /* mkd_assetCookieList_DECLARED */

#ifndef mkd_assetCookieList_SUPP_FUNCS
#define mkd_assetCookieList_SUPP_FUNCS
void mkd_assetCookieList__free( mkd_assetCookieList* val, ysmff ffunc);
void mkd_assetCookieList__copy( mkd_assetCookieList* dest, 
  mkd_assetCookieList* src, ysmaf afunc);
#endif /* mkd_assetCookieList_SUPP_FUNCS */

#ifndef mkd_systemTime_DECLARED
#define mkd_systemTime_DECLARED
typedef sb4 mkd_systemTime;
yotk* mkd_systemTime__getTC(void);
#ifndef YCTC_mkd_systemTime
#define YCTC_mkd_systemTime   (mkd_systemTime__getTC())
#endif
#endif /* mkd_systemTime_DECLARED */

#ifndef mkd_systemTime_SUPP_FUNCS
#define mkd_systemTime_SUPP_FUNCS
#endif /* mkd_systemTime_SUPP_FUNCS */

#ifndef mkd_segCapMask_DECLARED
#define mkd_segCapMask_DECLARED
typedef ub4 mkd_segCapMask;
yotk* mkd_segCapMask__getTC(void);
#ifndef YCTC_mkd_segCapMask
#define YCTC_mkd_segCapMask   (mkd_segCapMask__getTC())
#endif
#endif /* mkd_segCapMask_DECLARED */

#ifndef mkd_segCapMask_SUPP_FUNCS
#define mkd_segCapMask_SUPP_FUNCS
#endif /* mkd_segCapMask_SUPP_FUNCS */

#ifndef mkd_segCapVideo_DECLARED
#define mkd_segCapVideo_DECLARED
#define mkd_segCapVideo ((mkd_segCapMask) 1)
#endif /* mkd_segCapVideo_DECLARED */

#ifndef mkd_segCapVCBR_DECLARED
#define mkd_segCapVCBR_DECLARED
#define mkd_segCapVCBR ((mkd_segCapMask) 2)
#endif /* mkd_segCapVCBR_DECLARED */

#ifndef mkd_segCapVSeek_DECLARED
#define mkd_segCapVSeek_DECLARED
#define mkd_segCapVSeek ((mkd_segCapMask) 4)
#endif /* mkd_segCapVSeek_DECLARED */

#ifndef mkd_segCapVScan_DECLARED
#define mkd_segCapVScan_DECLARED
#define mkd_segCapVScan ((mkd_segCapMask) 8)
#endif /* mkd_segCapVScan_DECLARED */

#ifndef mkd_segCapAudio_DECLARED
#define mkd_segCapAudio_DECLARED
#define mkd_segCapAudio ((mkd_segCapMask) 65536)
#endif /* mkd_segCapAudio_DECLARED */

#ifndef mkd_segCapACBR_DECLARED
#define mkd_segCapACBR_DECLARED
#define mkd_segCapACBR ((mkd_segCapMask) 131072)
#endif /* mkd_segCapACBR_DECLARED */

#ifndef mkd_segCapASeek_DECLARED
#define mkd_segCapASeek_DECLARED
#define mkd_segCapASeek ((mkd_segCapMask) 262144)
#endif /* mkd_segCapASeek_DECLARED */

#ifndef mkd_segCapAScan_DECLARED
#define mkd_segCapAScan_DECLARED
#define mkd_segCapAScan ((mkd_segCapMask) 524288)
#endif /* mkd_segCapAScan_DECLARED */

#ifndef mkd_contStatus_DECLARED
#define mkd_contStatus_DECLARED
typedef ub4 mkd_contStatus;
yotk* mkd_contStatus__getTC(void);
#ifndef YCTC_mkd_contStatus
#define YCTC_mkd_contStatus   (mkd_contStatus__getTC())
#endif
#endif /* mkd_contStatus_DECLARED */

#ifndef mkd_contStatus_DEFINED
#define mkd_contStatus_DEFINED
#define mkd_contStatusDisk ((mkd_contStatus) 0)
#define mkd_contStatusTape ((mkd_contStatus) 1)
#define mkd_contStatusFeed ((mkd_contStatus) 2)
#define mkd_contStatusRolling ((mkd_contStatus) 3)
#define mkd_contStatusUnavailable ((mkd_contStatus) 4)
#endif /* mkd_contStatus_DEFINED */

#ifndef mkd_contStatus_SUPP_FUNCS
#define mkd_contStatus_SUPP_FUNCS
void mkd_contStatus__free( mkd_contStatus* val, ysmff ffunc);
void mkd_contStatus__copy( mkd_contStatus* dest, mkd_contStatus* src, ysmaf 
  afunc);
#endif /* mkd_contStatus_SUPP_FUNCS */

#ifndef mkd_compFormat_DECLARED
#define mkd_compFormat_DECLARED
typedef ub4 mkd_compFormat;
yotk* mkd_compFormat__getTC(void);
#ifndef YCTC_mkd_compFormat
#define YCTC_mkd_compFormat   (mkd_compFormat__getTC())
#endif
#endif /* mkd_compFormat_DECLARED */

#ifndef mkd_compFormat_SUPP_FUNCS
#define mkd_compFormat_SUPP_FUNCS
#endif /* mkd_compFormat_SUPP_FUNCS */

#ifndef mkd_compFormatError_DECLARED
#define mkd_compFormatError_DECLARED
#define mkd_compFormatError ((mkd_compFormat) 0)
#endif /* mkd_compFormatError_DECLARED */

#ifndef mkd_compFormatMpeg1_DECLARED
#define mkd_compFormatMpeg1_DECLARED
#define mkd_compFormatMpeg1 ((mkd_compFormat) 1)
#endif /* mkd_compFormatMpeg1_DECLARED */

#ifndef mkd_compFormatMpeg2_DECLARED
#define mkd_compFormatMpeg2_DECLARED
#define mkd_compFormatMpeg2 ((mkd_compFormat) 4)
#endif /* mkd_compFormatMpeg2_DECLARED */

#ifndef mkd_compFormatOrca_DECLARED
#define mkd_compFormatOrca_DECLARED
#define mkd_compFormatOrca ((mkd_compFormat) 8)
#endif /* mkd_compFormatOrca_DECLARED */

#ifndef mkd_compFormatRawKey_DECLARED
#define mkd_compFormatRawKey_DECLARED
#define mkd_compFormatRawKey ((mkd_compFormat) 1024)
#endif /* mkd_compFormatRawKey_DECLARED */

#ifndef mkd_compFormatSegWHdr_DECLARED
#define mkd_compFormatSegWHdr_DECLARED
#define mkd_compFormatSegWHdr ((mkd_compFormat) 8192)
#endif /* mkd_compFormatSegWHdr_DECLARED */

#ifndef mkd_compFormatSegWoHdr_DECLARED
#define mkd_compFormatSegWoHdr_DECLARED
#define mkd_compFormatSegWoHdr ((mkd_compFormat) 16384)
#endif /* mkd_compFormatSegWoHdr_DECLARED */

#ifndef mkd_compFormatDsmcc_DECLARED
#define mkd_compFormatDsmcc_DECLARED
#define mkd_compFormatDsmcc ((mkd_compFormat) 32768)
#endif /* mkd_compFormatDsmcc_DECLARED */

#ifndef mkd_prohib_DECLARED
#define mkd_prohib_DECLARED
typedef ub4 mkd_prohib;
yotk* mkd_prohib__getTC(void);
#ifndef YCTC_mkd_prohib
#define YCTC_mkd_prohib   (mkd_prohib__getTC())
#endif
#endif /* mkd_prohib_DECLARED */

#ifndef mkd_prohib_SUPP_FUNCS
#define mkd_prohib_SUPP_FUNCS
#endif /* mkd_prohib_SUPP_FUNCS */

#ifndef mkd_prohibError_DECLARED
#define mkd_prohibError_DECLARED
#define mkd_prohibError ((mkd_prohib) 2147483648)
#endif /* mkd_prohibError_DECLARED */

#ifndef mkd_prohibPause_DECLARED
#define mkd_prohibPause_DECLARED
#define mkd_prohibPause ((mkd_prohib) 1)
#endif /* mkd_prohibPause_DECLARED */

#ifndef mkd_prohibStop_DECLARED
#define mkd_prohibStop_DECLARED
#define mkd_prohibStop ((mkd_prohib) 2)
#endif /* mkd_prohibStop_DECLARED */

#ifndef mkd_prohibBlindFF_DECLARED
#define mkd_prohibBlindFF_DECLARED
#define mkd_prohibBlindFF ((mkd_prohib) 4)
#endif /* mkd_prohibBlindFF_DECLARED */

#ifndef mkd_prohibBlindRW_DECLARED
#define mkd_prohibBlindRW_DECLARED
#define mkd_prohibBlindRW ((mkd_prohib) 8)
#endif /* mkd_prohibBlindRW_DECLARED */

#ifndef mkd_prohibVisualFF_DECLARED
#define mkd_prohibVisualFF_DECLARED
#define mkd_prohibVisualFF ((mkd_prohib) 16)
#endif /* mkd_prohibVisualFF_DECLARED */

#ifndef mkd_prohibVisualRW_DECLARED
#define mkd_prohibVisualRW_DECLARED
#define mkd_prohibVisualRW ((mkd_prohib) 32)
#endif /* mkd_prohibVisualRW_DECLARED */

#ifndef mkd_prohibFrameAdv_DECLARED
#define mkd_prohibFrameAdv_DECLARED
#define mkd_prohibFrameAdv ((mkd_prohib) 64)
#endif /* mkd_prohibFrameAdv_DECLARED */

#ifndef mkd_prohibFrameRew_DECLARED
#define mkd_prohibFrameRew_DECLARED
#define mkd_prohibFrameRew ((mkd_prohib) 128)
#endif /* mkd_prohibFrameRew_DECLARED */

#ifndef mkd_posType_DECLARED
#define mkd_posType_DECLARED
typedef ub4 mkd_posType;
yotk* mkd_posType__getTC(void);
#ifndef YCTC_mkd_posType
#define YCTC_mkd_posType   (mkd_posType__getTC())
#endif
#endif /* mkd_posType_DECLARED */

#ifndef mkd_posType_DEFINED
#define mkd_posType_DEFINED
#define mkd_posTypeBeginning ((mkd_posType) 0)
#define mkd_posTypeCurrent ((mkd_posType) 1)
#define mkd_posTypeEnd ((mkd_posType) 2)
#define mkd_posTypeByte ((mkd_posType) 3)
#define mkd_posTypeTime ((mkd_posType) 4)
#define mkd_posTypeMillisecs ((mkd_posType) 5)
#define mkd_posTypeMpegSCR ((mkd_posType) 6)
#define mkd_posTypeMpegPCR ((mkd_posType) 7)
#define mkd_posTypeBlock ((mkd_posType) 8)
#define mkd_posTypeDsmcc ((mkd_posType) 9)
#define mkd_posTypeContFeed ((mkd_posType) 10)
#define mkd_posTypeUnformed ((mkd_posType) 11)
#endif /* mkd_posType_DEFINED */

#ifndef mkd_posType_SUPP_FUNCS
#define mkd_posType_SUPP_FUNCS
void mkd_posType__free( mkd_posType* val, ysmff ffunc);
void mkd_posType__copy( mkd_posType* dest, mkd_posType* src, ysmaf afunc);
#endif /* mkd_posType_SUPP_FUNCS */

#ifndef mkd_posByte_DECLARED
#define mkd_posByte_DECLARED
typedef struct mkd_posByte mkd_posByte;
#endif /* mkd_posByte_DECLARED */

#ifndef mkd_posByte_DEFINED
#define mkd_posByte_DEFINED
struct mkd_posByte
{
  sysb8 mkd_posByteOff;
};
yotk* mkd_posByte__getTC(void);
#ifndef YCTC_mkd_posByte
#define YCTC_mkd_posByte   (mkd_posByte__getTC())
#endif
#endif /* mkd_posByte_DEFINED */

#ifndef mkd_posByte_SUPP_FUNCS
#define mkd_posByte_SUPP_FUNCS
void mkd_posByte__free( mkd_posByte* val, ysmff ffunc);
void mkd_posByte__copy( mkd_posByte* dest, mkd_posByte* src, ysmaf afunc);
#endif /* mkd_posByte_SUPP_FUNCS */

#ifndef mkd_posTime_DECLARED
#define mkd_posTime_DECLARED
typedef struct mkd_posTime mkd_posTime;
#endif /* mkd_posTime_DECLARED */

#ifndef mkd_posTime_DEFINED
#define mkd_posTime_DEFINED
struct mkd_posTime
{
  ub4 mkd_posTimeHour;
  ub1 mkd_posTimeMinute;
  ub1 mkd_posTimeSecond;
  ub1 mkd_posTimeHundredth;
};
yotk* mkd_posTime__getTC(void);
#ifndef YCTC_mkd_posTime
#define YCTC_mkd_posTime   (mkd_posTime__getTC())
#endif
#endif /* mkd_posTime_DEFINED */

#ifndef mkd_posTime_SUPP_FUNCS
#define mkd_posTime_SUPP_FUNCS
void mkd_posTime__free( mkd_posTime* val, ysmff ffunc);
void mkd_posTime__copy( mkd_posTime* dest, mkd_posTime* src, ysmaf afunc);
#endif /* mkd_posTime_SUPP_FUNCS */

#ifndef mkd_posBlock_DECLARED
#define mkd_posBlock_DECLARED
typedef ub4 mkd_posBlock;
yotk* mkd_posBlock__getTC(void);
#ifndef YCTC_mkd_posBlock
#define YCTC_mkd_posBlock   (mkd_posBlock__getTC())
#endif
#endif /* mkd_posBlock_DECLARED */

#ifndef mkd_posBlock_SUPP_FUNCS
#define mkd_posBlock_SUPP_FUNCS
#endif /* mkd_posBlock_SUPP_FUNCS */

#ifndef mkd_posMs_DECLARED
#define mkd_posMs_DECLARED
typedef ub4 mkd_posMs;
yotk* mkd_posMs__getTC(void);
#ifndef YCTC_mkd_posMs
#define YCTC_mkd_posMs   (mkd_posMs__getTC())
#endif
#endif /* mkd_posMs_DECLARED */

#ifndef mkd_posMs_SUPP_FUNCS
#define mkd_posMs_SUPP_FUNCS
#endif /* mkd_posMs_SUPP_FUNCS */

#ifndef mkd_posSCR_DECLARED
#define mkd_posSCR_DECLARED
typedef sysb8 mkd_posSCR;
yotk* mkd_posSCR__getTC(void);
#ifndef YCTC_mkd_posSCR
#define YCTC_mkd_posSCR   (mkd_posSCR__getTC())
#endif
#endif /* mkd_posSCR_DECLARED */

#ifndef mkd_posSCR_SUPP_FUNCS
#define mkd_posSCR_SUPP_FUNCS
#endif /* mkd_posSCR_SUPP_FUNCS */

#ifndef mkd_posPCR_DECLARED
#define mkd_posPCR_DECLARED
typedef sysb8 mkd_posPCR;
yotk* mkd_posPCR__getTC(void);
#ifndef YCTC_mkd_posPCR
#define YCTC_mkd_posPCR   (mkd_posPCR__getTC())
#endif
#endif /* mkd_posPCR_DECLARED */

#ifndef mkd_posPCR_SUPP_FUNCS
#define mkd_posPCR_SUPP_FUNCS
#endif /* mkd_posPCR_SUPP_FUNCS */

#ifndef mkd_pos_DECLARED
#define mkd_pos_DECLARED
typedef struct mkd_pos mkd_pos;
#endif /* mkd_pos_DECLARED */

#ifndef mkd_pos_DEFINED
#define mkd_pos_DEFINED
struct mkd_pos
{
  mkd_posType _d;
  union
  {
    mkd_posTime mkd_posBegin;
    mkd_posTime mkd_posCur;
    mkd_posTime mkd_posEnd;
    mkd_posByte mkd_posBytePos;
    mkd_posTime mkd_posTimePos;
    mkd_posMs mkd_posMsPos;
    mkd_posSCR mkd_posSCRPos;
    mkd_posPCR mkd_posPCRPos;
    mkd_posBlock mkd_posBlockPos;
    mkd_posBlock mkd_posDsmcc;
    mkd_posTime mkd_posFeed;
    mkd_posTime mkd_posNoWay;
  } _u;
};
yotk* mkd_pos__getTC(void);
#ifndef YCTC_mkd_pos
#define YCTC_mkd_pos   (mkd_pos__getTC())
#endif
#endif /* mkd_pos_DEFINED */

#ifndef mkd_pos_SUPP_FUNCS
#define mkd_pos_SUPP_FUNCS
void mkd_pos__free( mkd_pos* val, ysmff ffunc);
void mkd_pos__copy( mkd_pos* dest, mkd_pos* src, ysmaf afunc);
#endif /* mkd_pos_SUPP_FUNCS */

#ifndef mkd_segMask_DECLARED
#define mkd_segMask_DECLARED
typedef ub4 mkd_segMask;
yotk* mkd_segMask__getTC(void);
#ifndef YCTC_mkd_segMask
#define YCTC_mkd_segMask   (mkd_segMask__getTC())
#endif
#endif /* mkd_segMask_DECLARED */

#ifndef mkd_segMask_SUPP_FUNCS
#define mkd_segMask_SUPP_FUNCS
#endif /* mkd_segMask_SUPP_FUNCS */

#ifndef mkd_segment_DECLARED
#define mkd_segment_DECLARED
typedef struct mkd_segment mkd_segment;
#endif /* mkd_segment_DECLARED */

#ifndef mkd_segment_DEFINED
#define mkd_segment_DEFINED
struct mkd_segment
{
  char* mkd_segFile;
  mkd_pos mkd_segStart;
  mkd_pos mkd_segEnd;
  mkd_segMask mkd_segFlags;
  mkd_prohib mkd_segProhib;
};
yotk* mkd_segment__getTC(void);
#ifndef YCTC_mkd_segment
#define YCTC_mkd_segment   (mkd_segment__getTC())
#endif
#endif /* mkd_segment_DEFINED */

#ifndef mkd_segment_SUPP_FUNCS
#define mkd_segment_SUPP_FUNCS
void mkd_segment__free( mkd_segment* val, ysmff ffunc);
void mkd_segment__copy( mkd_segment* dest, mkd_segment* src, ysmaf afunc);
#endif /* mkd_segment_SUPP_FUNCS */

#ifndef mkd_segmentList_DECLARED
#define mkd_segmentList_DECLARED
typedef YCIDL_sequence_mkd_segment mkd_segmentList;
yotk* mkd_segmentList__getTC(void);
#ifndef YCTC_mkd_segmentList
#define YCTC_mkd_segmentList   (mkd_segmentList__getTC())
#endif
#endif /* mkd_segmentList_DECLARED */

#ifndef mkd_segmentList_SUPP_FUNCS
#define mkd_segmentList_SUPP_FUNCS
void mkd_segmentList__free( mkd_segmentList* val, ysmff ffunc);
void mkd_segmentList__copy( mkd_segmentList* dest, mkd_segmentList* src, 
  ysmaf afunc);
#endif /* mkd_segmentList_SUPP_FUNCS */

#ifndef mkd_segInfo_DECLARED
#define mkd_segInfo_DECLARED
typedef struct mkd_segInfo mkd_segInfo;
#endif /* mkd_segInfo_DECLARED */

#ifndef mkd_segInfo_DEFINED
#define mkd_segInfo_DEFINED
struct mkd_segInfo
{
  mkd_segment mkd_segInfoSeg;
  char* mkd_segInfoType;
  char* mkd_segTitle;
  mkd_systemTime mkd_segCreateTime;
  ub4 mkd_segBitrate;
  sb4 mkd_segPresRate;
  mkd_compFormat mkd_segCmpFmt;
  mkd_segCapMask mkd_segCapabilities;
  ub4 mkd_segMilliseconds;
  sysb8 mkd_segByteLength;
  ub2 mkd_segFrameHeight;
  ub2 mkd_segFrameWidth;
  sb4 mkd_segAspectRatio;
  ub4 mkd_segFrameRate;
  sysb8 mkd_segInfoStartT;
  sysb8 mkd_segInfoEndT;
  mkd_contStatus mkd_segInfoCStat;
  mkd_prohib mkd_segProhibitions;
};
yotk* mkd_segInfo__getTC(void);
#ifndef YCTC_mkd_segInfo
#define YCTC_mkd_segInfo   (mkd_segInfo__getTC())
#endif
#endif /* mkd_segInfo_DEFINED */

#ifndef mkd_segInfo_SUPP_FUNCS
#define mkd_segInfo_SUPP_FUNCS
void mkd_segInfo__free( mkd_segInfo* val, ysmff ffunc);
void mkd_segInfo__copy( mkd_segInfo* dest, mkd_segInfo* src, ysmaf afunc);
#endif /* mkd_segInfo_SUPP_FUNCS */

#ifndef mkd_segInfoList_DECLARED
#define mkd_segInfoList_DECLARED
typedef YCIDL_sequence_mkd_segInfo mkd_segInfoList;
yotk* mkd_segInfoList__getTC(void);
#ifndef YCTC_mkd_segInfoList
#define YCTC_mkd_segInfoList   (mkd_segInfoList__getTC())
#endif
#endif /* mkd_segInfoList_DECLARED */

#ifndef mkd_segInfoList_SUPP_FUNCS
#define mkd_segInfoList_SUPP_FUNCS
void mkd_segInfoList__free( mkd_segInfoList* val, ysmff ffunc);
void mkd_segInfoList__copy( mkd_segInfoList* dest, mkd_segInfoList* src, 
  ysmaf afunc);
#endif /* mkd_segInfoList_SUPP_FUNCS */

#ifndef mkd_formatCode_DECLARED
#define mkd_formatCode_DECLARED
typedef char* mkd_formatCode;
yotk* mkd_formatCode__getTC(void);
#ifndef YCTC_mkd_formatCode
#define YCTC_mkd_formatCode   (mkd_formatCode__getTC())
#endif
#endif /* mkd_formatCode_DECLARED */

#ifndef mkd_formatCode_SUPP_FUNCS
#define mkd_formatCode_SUPP_FUNCS
#endif /* mkd_formatCode_SUPP_FUNCS */

#ifndef mkd_containerUnknown_DECLARED
#define mkd_containerUnknown_DECLARED
#define mkd_containerUnknown ((mkd_formatCode) "cunk")
#endif /* mkd_containerUnknown_DECLARED */

#ifndef mkd_containerMpeg1SS_DECLARED
#define mkd_containerMpeg1SS_DECLARED
#define mkd_containerMpeg1SS ((mkd_formatCode) "cm1s")
#endif /* mkd_containerMpeg1SS_DECLARED */

#ifndef mkd_containerMpeg2T_DECLARED
#define mkd_containerMpeg2T_DECLARED
#define mkd_containerMpeg2T ((mkd_formatCode) "cm2t")
#endif /* mkd_containerMpeg2T_DECLARED */

#ifndef mkd_containerRKF_DECLARED
#define mkd_containerRKF_DECLARED
#define mkd_containerRKF ((mkd_formatCode) "crkf")
#endif /* mkd_containerRKF_DECLARED */

#ifndef mkd_containerAVI_DECLARED
#define mkd_containerAVI_DECLARED
#define mkd_containerAVI ((mkd_formatCode) "cavi")
#endif /* mkd_containerAVI_DECLARED */

#ifndef mkd_containerOSF_DECLARED
#define mkd_containerOSF_DECLARED
#define mkd_containerOSF ((mkd_formatCode) "cosf")
#endif /* mkd_containerOSF_DECLARED */

#ifndef mkd_videoNone_DECLARED
#define mkd_videoNone_DECLARED
#define mkd_videoNone ((mkd_formatCode) "vnon")
#endif /* mkd_videoNone_DECLARED */

#ifndef mkd_videoUnknown_DECLARED
#define mkd_videoUnknown_DECLARED
#define mkd_videoUnknown ((mkd_formatCode) "vunk")
#endif /* mkd_videoUnknown_DECLARED */

#ifndef mkd_videoMpeg1_DECLARED
#define mkd_videoMpeg1_DECLARED
#define mkd_videoMpeg1 ((mkd_formatCode) "vmp1")
#endif /* mkd_videoMpeg1_DECLARED */

#ifndef mkd_videoMpeg2_DECLARED
#define mkd_videoMpeg2_DECLARED
#define mkd_videoMpeg2 ((mkd_formatCode) "vmp2")
#endif /* mkd_videoMpeg2_DECLARED */

#ifndef mkd_videoAviCVID_DECLARED
#define mkd_videoAviCVID_DECLARED
#define mkd_videoAviCVID ((mkd_formatCode) "avi1")
#endif /* mkd_videoAviCVID_DECLARED */

#ifndef mkd_videoAviIV32_DECLARED
#define mkd_videoAviIV32_DECLARED
#define mkd_videoAviIV32 ((mkd_formatCode) "avi2")
#endif /* mkd_videoAviIV32_DECLARED */

#ifndef mkd_videoAviUCOD_DECLARED
#define mkd_videoAviUCOD_DECLARED
#define mkd_videoAviUCOD ((mkd_formatCode) "avi3")
#endif /* mkd_videoAviUCOD_DECLARED */

#ifndef mkd_audioNone_DECLARED
#define mkd_audioNone_DECLARED
#define mkd_audioNone ((mkd_formatCode) "anon")
#endif /* mkd_audioNone_DECLARED */

#ifndef mkd_audioUnknown_DECLARED
#define mkd_audioUnknown_DECLARED
#define mkd_audioUnknown ((mkd_formatCode) "aunk")
#endif /* mkd_audioUnknown_DECLARED */

#ifndef mkd_audioMpeg1_DECLARED
#define mkd_audioMpeg1_DECLARED
#define mkd_audioMpeg1 ((mkd_formatCode) "amp1")
#endif /* mkd_audioMpeg1_DECLARED */

#ifndef mkd_audioMpeg2_DECLARED
#define mkd_audioMpeg2_DECLARED
#define mkd_audioMpeg2 ((mkd_formatCode) "amp2")
#endif /* mkd_audioMpeg2_DECLARED */

#ifndef mkd_audioWavePCM_DECLARED
#define mkd_audioWavePCM_DECLARED
#define mkd_audioWavePCM ((mkd_formatCode) "awv1")
#endif /* mkd_audioWavePCM_DECLARED */

#ifndef mkd_audioWaveADPCM_DECLARED
#define mkd_audioWaveADPCM_DECLARED
#define mkd_audioWaveADPCM ((mkd_formatCode) "awv2")
#endif /* mkd_audioWaveADPCM_DECLARED */

#ifndef mkd_audioWaveALAW_DECLARED
#define mkd_audioWaveALAW_DECLARED
#define mkd_audioWaveALAW ((mkd_formatCode) "awv3")
#endif /* mkd_audioWaveALAW_DECLARED */

#ifndef mkd_audioWaveMULAW_DECLARED
#define mkd_audioWaveMULAW_DECLARED
#define mkd_audioWaveMULAW ((mkd_formatCode) "awv4")
#endif /* mkd_audioWaveMULAW_DECLARED */

#ifndef mkd_contFormat_DECLARED
#define mkd_contFormat_DECLARED
typedef struct mkd_contFormat mkd_contFormat;
#endif /* mkd_contFormat_DECLARED */

#ifndef mkd_contFormat_DEFINED
#define mkd_contFormat_DEFINED
struct mkd_contFormat
{
  char* creator;
  mkd_formatCode container;
  mkd_formatCode video;
  mkd_formatCode audio;
  ub2 frameHeight;
  ub2 frameWidth;
  sb4 pelAspectRatio;
  ub4 frameRate;
};
yotk* mkd_contFormat__getTC(void);
#ifndef YCTC_mkd_contFormat
#define YCTC_mkd_contFormat   (mkd_contFormat__getTC())
#endif
#endif /* mkd_contFormat_DEFINED */

#ifndef mkd_contFormat_SUPP_FUNCS
#define mkd_contFormat_SUPP_FUNCS
void mkd_contFormat__free( mkd_contFormat* val, ysmff ffunc);
void mkd_contFormat__copy( mkd_contFormat* dest, mkd_contFormat* src, ysmaf 
  afunc);
#endif /* mkd_contFormat_SUPP_FUNCS */

#ifndef mkcf_cause_DECLARED
#define mkcf_cause_DECLARED
typedef ub4 mkcf_cause;
yotk* mkcf_cause__getTC(void);
#ifndef YCTC_mkcf_cause
#define YCTC_mkcf_cause   (mkcf_cause__getTC())
#endif
#endif /* mkcf_cause_DECLARED */

#ifndef mkcf_cause_DEFINED
#define mkcf_cause_DEFINED
#define mkcf_causeBadParam ((mkcf_cause) 0)
#define mkcf_causeEvilServer ((mkcf_cause) 1)
#define mkcf_causeDiskError ((mkcf_cause) 2)
#endif /* mkcf_cause_DEFINED */

#ifndef mkcf_cause_SUPP_FUNCS
#define mkcf_cause_SUPP_FUNCS
void mkcf_cause__free( mkcf_cause* val, ysmff ffunc);
void mkcf_cause__copy( mkcf_cause* dest, mkcf_cause* src, ysmaf afunc);
#endif /* mkcf_cause_SUPP_FUNCS */

#ifndef MKCF_EX_BOMB_DECLARED
#define MKCF_EX_BOMB_DECLARED
CONST ysid* mkcf_bomb__getId(void);
#ifndef MKCF_EX_BOMB
#define MKCF_EX_BOMB   (mkcf_bomb__getId())
#endif
#endif /* MKCF_EX_BOMB_DECLARED */

#ifndef mkcf_bomb_DECLARED
#define mkcf_bomb_DECLARED
typedef struct mkcf_bomb mkcf_bomb;
#endif /* mkcf_bomb_DECLARED */

#ifndef mkcf_bomb_DEFINED
#define mkcf_bomb_DEFINED
struct mkcf_bomb
{
  mkcf_cause failType;
  char* detail;
};
yotk* mkcf_bomb__getTC(void);
#ifndef YCTC_mkcf_bomb
#define YCTC_mkcf_bomb   (mkcf_bomb__getTC())
#endif
#endif /* mkcf_bomb_DEFINED */

#ifndef mkcf_bomb_SUPP_FUNCS
#define mkcf_bomb_SUPP_FUNCS
void mkcf_bomb__free( mkcf_bomb* val, ysmff ffunc);
void mkcf_bomb__copy( mkcf_bomb* dest, mkcf_bomb* src, ysmaf afunc);
#endif /* mkcf_bomb_SUPP_FUNCS */

#ifndef mkcf_format_DECLARED
#define mkcf_format_DECLARED
typedef ub4 mkcf_format;
yotk* mkcf_format__getTC(void);
#ifndef YCTC_mkcf_format
#define YCTC_mkcf_format   (mkcf_format__getTC())
#endif
#endif /* mkcf_format_DECLARED */

#ifndef mkcf_format_DEFINED
#define mkcf_format_DEFINED
#define mkcf_formatMpeg1SS ((mkcf_format) 0)
#define mkcf_formatMpeg2Trans ((mkcf_format) 1)
#define mkcf_formatRKF ((mkcf_format) 2)
#endif /* mkcf_format_DEFINED */

#ifndef mkcf_format_SUPP_FUNCS
#define mkcf_format_SUPP_FUNCS
void mkcf_format__free( mkcf_format* val, ysmff ffunc);
void mkcf_format__copy( mkcf_format* dest, mkcf_format* src, ysmaf afunc);
#endif /* mkcf_format_SUPP_FUNCS */

#ifndef mkcf_vidCmp_DECLARED
#define mkcf_vidCmp_DECLARED
typedef ub4 mkcf_vidCmp;
yotk* mkcf_vidCmp__getTC(void);
#ifndef YCTC_mkcf_vidCmp
#define YCTC_mkcf_vidCmp   (mkcf_vidCmp__getTC())
#endif
#endif /* mkcf_vidCmp_DECLARED */

#ifndef mkcf_vidCmp_DEFINED
#define mkcf_vidCmp_DEFINED
#define mkcf_vidCmpNone ((mkcf_vidCmp) 0)
#define mkcf_vidCmpUnknown ((mkcf_vidCmp) 1)
#define mkcf_vidCmpMpeg1 ((mkcf_vidCmp) 2)
#define mkcf_vidCmpMpeg2 ((mkcf_vidCmp) 3)
#define mkcf_vidCmpAviCVID ((mkcf_vidCmp) 4)
#define mkcf_vidCmpAviIV32 ((mkcf_vidCmp) 5)
#define mkcf_vidCmpAviUCOD ((mkcf_vidCmp) 6)
#endif /* mkcf_vidCmp_DEFINED */

#ifndef mkcf_vidCmp_SUPP_FUNCS
#define mkcf_vidCmp_SUPP_FUNCS
void mkcf_vidCmp__free( mkcf_vidCmp* val, ysmff ffunc);
void mkcf_vidCmp__copy( mkcf_vidCmp* dest, mkcf_vidCmp* src, ysmaf afunc);
#endif /* mkcf_vidCmp_SUPP_FUNCS */

#ifndef mkcf_audCmp_DECLARED
#define mkcf_audCmp_DECLARED
typedef ub4 mkcf_audCmp;
yotk* mkcf_audCmp__getTC(void);
#ifndef YCTC_mkcf_audCmp
#define YCTC_mkcf_audCmp   (mkcf_audCmp__getTC())
#endif
#endif /* mkcf_audCmp_DECLARED */

#ifndef mkcf_audCmp_DEFINED
#define mkcf_audCmp_DEFINED
#define mkcf_audCmpNone ((mkcf_audCmp) 0)
#define mkcf_audCmpUnknown ((mkcf_audCmp) 1)
#define mkcf_audCmpMpeg1 ((mkcf_audCmp) 2)
#define mkcf_audCmpMpeg2 ((mkcf_audCmp) 3)
#define mkcf_audCmpWavePCM ((mkcf_audCmp) 4)
#define mkcf_audCmpWaveADPCM ((mkcf_audCmp) 5)
#define mkcf_audCmpWaveALAW ((mkcf_audCmp) 6)
#define mkcf_audCmpWaveMULAW ((mkcf_audCmp) 7)
#endif /* mkcf_audCmp_DEFINED */

#ifndef mkcf_audCmp_SUPP_FUNCS
#define mkcf_audCmp_SUPP_FUNCS
void mkcf_audCmp__free( mkcf_audCmp* val, ysmff ffunc);
void mkcf_audCmp__copy( mkcf_audCmp* dest, mkcf_audCmp* src, ysmaf afunc);
#endif /* mkcf_audCmp_SUPP_FUNCS */

#ifndef mkcf_vendor_DECLARED
#define mkcf_vendor_DECLARED
typedef ub4 mkcf_vendor;
yotk* mkcf_vendor__getTC(void);
#ifndef YCTC_mkcf_vendor
#define YCTC_mkcf_vendor   (mkcf_vendor__getTC())
#endif
#endif /* mkcf_vendor_DECLARED */

#ifndef mkcf_vendor_DEFINED
#define mkcf_vendor_DEFINED
#define mkcf_vendorPrepareOnly ((mkcf_vendor) 0)
#define mkcf_vendorFutureTelOne ((mkcf_vendor) 1)
#define mkcf_vendorOptivisionOne ((mkcf_vendor) 2)
#define mkcf_vendorBroadwayOne ((mkcf_vendor) 3)
#define mkcf_vendorOracleCodec ((mkcf_vendor) 4)
#define mkcf_vendorLucentG1 ((mkcf_vendor) 5)
#define mkcf_vendorLucentG3 ((mkcf_vendor) 6)
#endif /* mkcf_vendor_DEFINED */

#ifndef mkcf_vendor_SUPP_FUNCS
#define mkcf_vendor_SUPP_FUNCS
void mkcf_vendor__free( mkcf_vendor* val, ysmff ffunc);
void mkcf_vendor__copy( mkcf_vendor* dest, mkcf_vendor* src, ysmaf afunc);
#endif /* mkcf_vendor_SUPP_FUNCS */

#ifndef mkcf_m1sHdr_DECLARED
#define mkcf_m1sHdr_DECLARED
typedef struct mkcf_m1sHdr mkcf_m1sHdr;
#endif /* mkcf_m1sHdr_DECLARED */

#ifndef mkcf_m1sHdr_DEFINED
#define mkcf_m1sHdr_DEFINED
struct mkcf_m1sHdr
{
  YCIDL_sequence_ub1 seqHdr;
};
yotk* mkcf_m1sHdr__getTC(void);
#ifndef YCTC_mkcf_m1sHdr
#define YCTC_mkcf_m1sHdr   (mkcf_m1sHdr__getTC())
#endif
#endif /* mkcf_m1sHdr_DEFINED */

#ifndef mkcf_m1sHdr_SUPP_FUNCS
#define mkcf_m1sHdr_SUPP_FUNCS
void mkcf_m1sHdr__free( mkcf_m1sHdr* val, ysmff ffunc);
void mkcf_m1sHdr__copy( mkcf_m1sHdr* dest, mkcf_m1sHdr* src, ysmaf afunc);
#endif /* mkcf_m1sHdr_SUPP_FUNCS */

#ifndef mkcf_m2tHdr_DECLARED
#define mkcf_m2tHdr_DECLARED
typedef struct mkcf_m2tHdr mkcf_m2tHdr;
#endif /* mkcf_m2tHdr_DECLARED */

#ifndef mkcf_m2tHdr_DEFINED
#define mkcf_m2tHdr_DEFINED
struct mkcf_m2tHdr
{
  ub2 videoPid;
  ub2 audioPid;
  ub2 clockPid;
  ub1 videoStream;
  YCIDL_sequence_ub1 pat;
  YCIDL_sequence_ub1 pmt;
  YCIDL_sequence_ub1 seqHdr;
};
yotk* mkcf_m2tHdr__getTC(void);
#ifndef YCTC_mkcf_m2tHdr
#define YCTC_mkcf_m2tHdr   (mkcf_m2tHdr__getTC())
#endif
#endif /* mkcf_m2tHdr_DEFINED */

#ifndef mkcf_m2tHdr_SUPP_FUNCS
#define mkcf_m2tHdr_SUPP_FUNCS
void mkcf_m2tHdr__free( mkcf_m2tHdr* val, ysmff ffunc);
void mkcf_m2tHdr__copy( mkcf_m2tHdr* dest, mkcf_m2tHdr* src, ysmaf afunc);
#endif /* mkcf_m2tHdr_SUPP_FUNCS */

#ifndef mkcf_rkfHdr_DECLARED
#define mkcf_rkfHdr_DECLARED
typedef struct mkcf_rkfHdr mkcf_rkfHdr;
#endif /* mkcf_rkfHdr_DECLARED */

#ifndef mkcf_rkfHdr_DEFINED
#define mkcf_rkfHdr_DEFINED
struct mkcf_rkfHdr
{
  YCIDL_sequence_ub1 initData;
};
yotk* mkcf_rkfHdr__getTC(void);
#ifndef YCTC_mkcf_rkfHdr
#define YCTC_mkcf_rkfHdr   (mkcf_rkfHdr__getTC())
#endif
#endif /* mkcf_rkfHdr_DEFINED */

#ifndef mkcf_rkfHdr_SUPP_FUNCS
#define mkcf_rkfHdr_SUPP_FUNCS
void mkcf_rkfHdr__free( mkcf_rkfHdr* val, ysmff ffunc);
void mkcf_rkfHdr__copy( mkcf_rkfHdr* dest, mkcf_rkfHdr* src, ysmaf afunc);
#endif /* mkcf_rkfHdr_SUPP_FUNCS */

#ifndef mkcf_hdr_hdrcompData_DECLARED
#define mkcf_hdr_hdrcompData_DECLARED
typedef struct mkcf_hdr_hdrcompData mkcf_hdr_hdrcompData;
#endif /* mkcf_hdr_hdrcompData_DECLARED */

#ifndef mkcf_hdr_hdrcompData_DEFINED
#define mkcf_hdr_hdrcompData_DEFINED
struct mkcf_hdr_hdrcompData
{
  mkcf_format _d;
  union
  {
    mkcf_m1sHdr m1s;
    mkcf_m2tHdr m2t;
    mkcf_rkfHdr rkf;
  } _u;
};
yotk* mkcf_hdr_hdrcompData__getTC(void);
#ifndef YCTC_mkcf_hdr_hdrcompData
#define YCTC_mkcf_hdr_hdrcompData   (mkcf_hdr_hdrcompData__getTC())
#endif
#endif /* mkcf_hdr_hdrcompData_DEFINED */

#ifndef mkcf_hdr_hdrcompData_SUPP_FUNCS
#define mkcf_hdr_hdrcompData_SUPP_FUNCS
void mkcf_hdr_hdrcompData__free( mkcf_hdr_hdrcompData* val, ysmff ffunc);
void mkcf_hdr_hdrcompData__copy( mkcf_hdr_hdrcompData* dest, 
  mkcf_hdr_hdrcompData* src, ysmaf afunc);
#endif /* mkcf_hdr_hdrcompData_SUPP_FUNCS */

#ifndef mkcf_hdr_DECLARED
#define mkcf_hdr_DECLARED
typedef struct mkcf_hdr mkcf_hdr;
#endif /* mkcf_hdr_DECLARED */

#ifndef mkcf_hdr_DEFINED
#define mkcf_hdr_DEFINED
struct mkcf_hdr
{
  mkcf_vendor vend;
  mkcf_format fmt;
  mkcf_vidCmp vid;
  mkcf_audCmp aud;
  ub2 heightInPixels;
  ub2 widthInPixels;
  sb4 pelAspectRatio;
  ub4 frameRate;
  mkcf_hdr_hdrcompData compData;
};
yotk* mkcf_hdr__getTC(void);
#ifndef YCTC_mkcf_hdr
#define YCTC_mkcf_hdr   (mkcf_hdr__getTC())
#endif
#endif /* mkcf_hdr_DEFINED */

#ifndef mkcf_hdr_SUPP_FUNCS
#define mkcf_hdr_SUPP_FUNCS
void mkcf_hdr__free( mkcf_hdr* val, ysmff ffunc);
void mkcf_hdr__copy( mkcf_hdr* dest, mkcf_hdr* src, ysmaf afunc);
#endif /* mkcf_hdr_SUPP_FUNCS */

#ifndef mkcf_blobData_DECLARED
#define mkcf_blobData_DECLARED
typedef YCIDL_sequence_ub1 mkcf_blobData;
yotk* mkcf_blobData__getTC(void);
#ifndef YCTC_mkcf_blobData
#define YCTC_mkcf_blobData   (mkcf_blobData__getTC())
#endif
#endif /* mkcf_blobData_DECLARED */

#ifndef mkcf_blobData_SUPP_FUNCS
#define mkcf_blobData_SUPP_FUNCS
void mkcf_blobData__free( mkcf_blobData* val, ysmff ffunc);
void mkcf_blobData__copy( mkcf_blobData* dest, mkcf_blobData* src, ysmaf 
  afunc);
#endif /* mkcf_blobData_SUPP_FUNCS */


/* interface mkcf_blob declarations */
#ifndef mkcf_blob_DECLARED
#define mkcf_blob_DECLARED
typedef struct YCmkcf_blob* mkcf_blob;
yotk* mkcf_blob__getTC(void);
#ifndef YCTC_mkcf_blob
#define YCTC_mkcf_blob   (mkcf_blob__getTC())
#endif
#endif /* mkcf_blob_DECLARED */

#ifndef mkcf_blob_SUPP_FUNCS
#define mkcf_blob_SUPP_FUNCS
void mkcf_blob__free( mkcf_blob* val, ysmff ffunc);
void mkcf_blob__copy( mkcf_blob* dest, mkcf_blob* src, ysmaf afunc);
#endif /* mkcf_blob_SUPP_FUNCS */

#ifndef mkcf_blob_DEFINED
#define mkcf_blob_DEFINED
struct yostub* mkcf_blob__getStubs(void);
#define mkcf_blob__stubs (mkcf_blob__getStubs())
#endif /* mkcf_blob_DEFINED */

CONST ysid* mkcf_blob__getId(void);
#ifndef mkcf_blob__id
#define mkcf_blob__id   (mkcf_blob__getId())
#endif
void mkcf_blob_contBlob( mkcf_blob or, yoenv* ev, boolean moreComing, 
  mkcf_blobData* data);
void mkcf_blob_contBlob_nw( mkcf_blob or, yoenv* ev, boolean moreComing, 
  mkcf_blobData* data, ysevt* _sem);
yopar* mkcf_blob_contBlob__getPars(void);
#ifndef mkcf_blob_contBlob_pars
#define mkcf_blob_contBlob_pars (mkcf_blob_contBlob__getPars())
#endif

#ifndef mkcf_blob__tyimpl_DEFINED
#define mkcf_blob__tyimpl_DEFINED
struct mkcf_blob__tyimpl
{
  void (*contBlob)( mkcf_blob, yoenv*, boolean, mkcf_blobData*);
};
#endif /* mkcf_blob__tyimpl_DEFINED */


/* interface mkcf_feed declarations */
#ifndef mkcf_feed_DECLARED
#define mkcf_feed_DECLARED
typedef struct YCmkcf_feed* mkcf_feed;
yotk* mkcf_feed__getTC(void);
#ifndef YCTC_mkcf_feed
#define YCTC_mkcf_feed   (mkcf_feed__getTC())
#endif
#endif /* mkcf_feed_DECLARED */

#ifndef mkcf_feed_SUPP_FUNCS
#define mkcf_feed_SUPP_FUNCS
void mkcf_feed__free( mkcf_feed* val, ysmff ffunc);
void mkcf_feed__copy( mkcf_feed* dest, mkcf_feed* src, ysmaf afunc);
#endif /* mkcf_feed_SUPP_FUNCS */

#ifndef mkcf_feed_DEFINED
#define mkcf_feed_DEFINED
struct yostub* mkcf_feed__getStubs(void);
#define mkcf_feed__stubs (mkcf_feed__getStubs())
#endif /* mkcf_feed_DEFINED */

CONST ysid* mkcf_feed__getId(void);
#ifndef mkcf_feed__id
#define mkcf_feed__id   (mkcf_feed__getId())
#endif
#ifndef mkcf_feed_frame_DECLARED
#define mkcf_feed_frame_DECLARED
typedef ub4 mkcf_feed_frame;
yotk* mkcf_feed_frame__getTC(void);
#ifndef YCTC_mkcf_feed_frame
#define YCTC_mkcf_feed_frame   (mkcf_feed_frame__getTC())
#endif
#endif /* mkcf_feed_frame_DECLARED */

#ifndef mkcf_feed_frame_DEFINED
#define mkcf_feed_frame_DEFINED
#define mkcf_feed_frameMpegI ((mkcf_feed_frame) 0)
#define mkcf_feed_frameMpegP ((mkcf_feed_frame) 1)
#define mkcf_feed_frameMpegB ((mkcf_feed_frame) 2)
#define mkcf_feed_frameRawKey ((mkcf_feed_frame) 3)
#define mkcf_feed_frameRawBias ((mkcf_feed_frame) 4)
#define mkcf_feed_frameRawAudio ((mkcf_feed_frame) 5)
#endif /* mkcf_feed_frame_DEFINED */

#ifndef mkcf_feed_frame_SUPP_FUNCS
#define mkcf_feed_frame_SUPP_FUNCS
void mkcf_feed_frame__free( mkcf_feed_frame* val, ysmff ffunc);
void mkcf_feed_frame__copy( mkcf_feed_frame* dest, mkcf_feed_frame* src, 
  ysmaf afunc);
#endif /* mkcf_feed_frame_SUPP_FUNCS */

#ifndef mkcf_feed_m1sTag_DECLARED
#define mkcf_feed_m1sTag_DECLARED
typedef struct mkcf_feed_m1sTag mkcf_feed_m1sTag;
#endif /* mkcf_feed_m1sTag_DECLARED */

#ifndef mkcf_feed_m1sTag_DEFINED
#define mkcf_feed_m1sTag_DEFINED
struct mkcf_feed_m1sTag
{
  ub1 videoStreamCode;
};
yotk* mkcf_feed_m1sTag__getTC(void);
#ifndef YCTC_mkcf_feed_m1sTag
#define YCTC_mkcf_feed_m1sTag   (mkcf_feed_m1sTag__getTC())
#endif
#endif /* mkcf_feed_m1sTag_DEFINED */

#ifndef mkcf_feed_m1sTag_SUPP_FUNCS
#define mkcf_feed_m1sTag_SUPP_FUNCS
void mkcf_feed_m1sTag__free( mkcf_feed_m1sTag* val, ysmff ffunc);
void mkcf_feed_m1sTag__copy( mkcf_feed_m1sTag* dest, mkcf_feed_m1sTag* src, 
  ysmaf afunc);
#endif /* mkcf_feed_m1sTag_SUPP_FUNCS */

#ifndef mkcf_feed_m2tTag_DECLARED
#define mkcf_feed_m2tTag_DECLARED
typedef struct mkcf_feed_m2tTag mkcf_feed_m2tTag;
#endif /* mkcf_feed_m2tTag_DECLARED */

#ifndef mkcf_feed_m2tTag_DEFINED
#define mkcf_feed_m2tTag_DEFINED
struct mkcf_feed_m2tTag
{
  ub1 continuityCounter;
  ub4 leadingZeros;
  ub4 trailingZeros;
  ub2 headerPesLength;
  ub2 trailerPesLength;
  ub2 nonVideoPackets;
  ub2 nullPackets;
};
yotk* mkcf_feed_m2tTag__getTC(void);
#ifndef YCTC_mkcf_feed_m2tTag
#define YCTC_mkcf_feed_m2tTag   (mkcf_feed_m2tTag__getTC())
#endif
#endif /* mkcf_feed_m2tTag_DEFINED */

#ifndef mkcf_feed_m2tTag_SUPP_FUNCS
#define mkcf_feed_m2tTag_SUPP_FUNCS
void mkcf_feed_m2tTag__free( mkcf_feed_m2tTag* val, ysmff ffunc);
void mkcf_feed_m2tTag__copy( mkcf_feed_m2tTag* dest, mkcf_feed_m2tTag* src, 
  ysmaf afunc);
#endif /* mkcf_feed_m2tTag_SUPP_FUNCS */

#ifndef mkcf_feed_rkfTag_DECLARED
#define mkcf_feed_rkfTag_DECLARED
typedef struct mkcf_feed_rkfTag mkcf_feed_rkfTag;
#endif /* mkcf_feed_rkfTag_DECLARED */

#ifndef mkcf_feed_rkfTag_DEFINED
#define mkcf_feed_rkfTag_DEFINED
struct mkcf_feed_rkfTag
{
  ub1 nothing;
};
yotk* mkcf_feed_rkfTag__getTC(void);
#ifndef YCTC_mkcf_feed_rkfTag
#define YCTC_mkcf_feed_rkfTag   (mkcf_feed_rkfTag__getTC())
#endif
#endif /* mkcf_feed_rkfTag_DEFINED */

#ifndef mkcf_feed_rkfTag_SUPP_FUNCS
#define mkcf_feed_rkfTag_SUPP_FUNCS
void mkcf_feed_rkfTag__free( mkcf_feed_rkfTag* val, ysmff ffunc);
void mkcf_feed_rkfTag__copy( mkcf_feed_rkfTag* dest, mkcf_feed_rkfTag* src, 
  ysmaf afunc);
#endif /* mkcf_feed_rkfTag_SUPP_FUNCS */

#ifndef mkcf_feed_tag_tagCompData_DECLARED
#define mkcf_feed_tag_tagCompData_DECLARED
typedef struct mkcf_feed_tag_tagCompData mkcf_feed_tag_tagCompData;
#endif /* mkcf_feed_tag_tagCompData_DECLARED */

#ifndef mkcf_feed_tag_tagCompData_DEFINED
#define mkcf_feed_tag_tagCompData_DEFINED
struct mkcf_feed_tag_tagCompData
{
  mkcf_format _d;
  union
  {
    mkcf_feed_m1sTag m1s;
    mkcf_feed_m2tTag m2t;
    mkcf_feed_rkfTag rkf;
  } _u;
};
yotk* mkcf_feed_tag_tagCompData__getTC(void);
#ifndef YCTC_mkcf_feed_tag_tagCompData
#define YCTC_mkcf_feed_tag_tagCompData   (mkcf_feed_tag_tagCompData__getTC() \
  )
#endif
#endif /* mkcf_feed_tag_tagCompData_DEFINED */

#ifndef mkcf_feed_tag_tagCompData_SUPP_FUNCS
#define mkcf_feed_tag_tagCompData_SUPP_FUNCS
void mkcf_feed_tag_tagCompData__free( mkcf_feed_tag_tagCompData* val, ysmff 
  ffunc);
void mkcf_feed_tag_tagCompData__copy( mkcf_feed_tag_tagCompData* dest, 
  mkcf_feed_tag_tagCompData* src, ysmaf afunc);
#endif /* mkcf_feed_tag_tagCompData_SUPP_FUNCS */

#ifndef mkcf_feed_tag_DECLARED
#define mkcf_feed_tag_DECLARED
typedef struct mkcf_feed_tag mkcf_feed_tag;
#endif /* mkcf_feed_tag_DECLARED */

#ifndef mkcf_feed_tag_DEFINED
#define mkcf_feed_tag_DEFINED
struct mkcf_feed_tag
{
  mkcf_feed_frame frameType;
  mkd_pos timestamp;
  ub4 byteOffsetHigh;
  ub4 byteOffsetLow;
  ub4 videoByteLength;
  mkcf_feed_tag_tagCompData compData;
};
yotk* mkcf_feed_tag__getTC(void);
#ifndef YCTC_mkcf_feed_tag
#define YCTC_mkcf_feed_tag   (mkcf_feed_tag__getTC())
#endif
#endif /* mkcf_feed_tag_DEFINED */

#ifndef mkcf_feed_tag_SUPP_FUNCS
#define mkcf_feed_tag_SUPP_FUNCS
void mkcf_feed_tag__free( mkcf_feed_tag* val, ysmff ffunc);
void mkcf_feed_tag__copy( mkcf_feed_tag* dest, mkcf_feed_tag* src, ysmaf 
  afunc);
#endif /* mkcf_feed_tag_SUPP_FUNCS */

#ifndef mkcf_feed_tagList_DECLARED
#define mkcf_feed_tagList_DECLARED
typedef YCIDL_sequence_mkcf_feed_tag mkcf_feed_tagList;
yotk* mkcf_feed_tagList__getTC(void);
#ifndef YCTC_mkcf_feed_tagList
#define YCTC_mkcf_feed_tagList   (mkcf_feed_tagList__getTC())
#endif
#endif /* mkcf_feed_tagList_DECLARED */

#ifndef mkcf_feed_tagList_SUPP_FUNCS
#define mkcf_feed_tagList_SUPP_FUNCS
void mkcf_feed_tagList__free( mkcf_feed_tagList* val, ysmff ffunc);
void mkcf_feed_tagList__copy( mkcf_feed_tagList* dest, mkcf_feed_tagList* 
  src, ysmaf afunc);
#endif /* mkcf_feed_tagList_SUPP_FUNCS */

void mkcf_feed_sendHdr( mkcf_feed or, yoenv* ev, mkcf_hdr* header);
void mkcf_feed_sendHdr_nw( mkcf_feed or, yoenv* ev, mkcf_hdr* header, 
  ysevt* _sem);
yopar* mkcf_feed_sendHdr__getPars(void);
#ifndef mkcf_feed_sendHdr_pars
#define mkcf_feed_sendHdr_pars (mkcf_feed_sendHdr__getPars())
#endif

boolean mkcf_feed_sendTags( mkcf_feed or, yoenv* ev, mkcf_feed_tagList* 
  tags);
void mkcf_feed_sendTags_nw( mkcf_feed or, yoenv* ev, mkcf_feed_tagList* 
  tags, ysevt* _sem);
yopar* mkcf_feed_sendTags__getPars(void);
#ifndef mkcf_feed_sendTags_pars
#define mkcf_feed_sendTags_pars (mkcf_feed_sendTags__getPars())
#endif

mkcf_blob mkcf_feed_sendBlob( mkcf_feed or, yoenv* ev, char* fileName, 
  char* dataType, char* description, mkd_pos* videoStart, mkd_pos* videoEnd,
   boolean moreComing, mkcf_blobData* data);
void mkcf_feed_sendBlob_nw( mkcf_feed or, yoenv* ev, char* fileName, char* 
  dataType, char* description, mkd_pos* videoStart, mkd_pos* videoEnd, 
  boolean moreComing, mkcf_blobData* data, ysevt* _sem);
yopar* mkcf_feed_sendBlob__getPars(void);
#ifndef mkcf_feed_sendBlob_pars
#define mkcf_feed_sendBlob_pars (mkcf_feed_sendBlob__getPars())
#endif

boolean mkcf_feed_closeFeed( mkcf_feed or, yoenv* ev);
void mkcf_feed_closeFeed_nw( mkcf_feed or, yoenv* ev, ysevt* _sem);
yopar* mkcf_feed_closeFeed__getPars(void);
#ifndef mkcf_feed_closeFeed_pars
#define mkcf_feed_closeFeed_pars (mkcf_feed_closeFeed__getPars())
#endif

#ifndef mkcf_feed_info_DECLARED
#define mkcf_feed_info_DECLARED
typedef struct mkcf_feed_info mkcf_feed_info;
#endif /* mkcf_feed_info_DECLARED */

#ifndef mkcf_feed_info_DEFINED
#define mkcf_feed_info_DEFINED
struct mkcf_feed_info
{
  char* rootName;
  mkcf_format compFmt;
  sysb8 totalBytesRecvd;
  sysb8 startTime;
  ub4 bitsPerSec;
  sysb8 durationInSecs;
};
yotk* mkcf_feed_info__getTC(void);
#ifndef YCTC_mkcf_feed_info
#define YCTC_mkcf_feed_info   (mkcf_feed_info__getTC())
#endif
#endif /* mkcf_feed_info_DEFINED */

#ifndef mkcf_feed_info_SUPP_FUNCS
#define mkcf_feed_info_SUPP_FUNCS
void mkcf_feed_info__free( mkcf_feed_info* val, ysmff ffunc);
void mkcf_feed_info__copy( mkcf_feed_info* dest, mkcf_feed_info* src, ysmaf 
  afunc);
#endif /* mkcf_feed_info_SUPP_FUNCS */

void mkcf_feed_query( mkcf_feed or, yoenv* ev, mkcf_feed_info* fnord);
void mkcf_feed_query_nw( mkcf_feed or, yoenv* ev, mkcf_feed_info* fnord, 
  ysevt* _sem);
yopar* mkcf_feed_query__getPars(void);
#ifndef mkcf_feed_query_pars
#define mkcf_feed_query_pars (mkcf_feed_query__getPars())
#endif

#ifndef mkcf_feed__tyimpl_DEFINED
#define mkcf_feed__tyimpl_DEFINED
struct mkcf_feed__tyimpl
{
  void (*sendHdr)( mkcf_feed, yoenv*, mkcf_hdr*);
  boolean (*sendTags)( mkcf_feed, yoenv*, mkcf_feed_tagList*);
  mkcf_blob (*sendBlob)( mkcf_feed, yoenv*, char*, char*, char*, mkd_pos*, 
    mkd_pos*, boolean, mkcf_blobData*);
  boolean (*closeFeed)( mkcf_feed, yoenv*);
  void (*query)( mkcf_feed, yoenv*, mkcf_feed_info*);
};
#endif /* mkcf_feed__tyimpl_DEFINED */


/* interface mkcf_fcty declarations */
#ifndef mkcf_fcty_DECLARED
#define mkcf_fcty_DECLARED
typedef struct YCmkcf_fcty* mkcf_fcty;
yotk* mkcf_fcty__getTC(void);
#ifndef YCTC_mkcf_fcty
#define YCTC_mkcf_fcty   (mkcf_fcty__getTC())
#endif
#endif /* mkcf_fcty_DECLARED */

#ifndef mkcf_fcty_SUPP_FUNCS
#define mkcf_fcty_SUPP_FUNCS
void mkcf_fcty__free( mkcf_fcty* val, ysmff ffunc);
void mkcf_fcty__copy( mkcf_fcty* dest, mkcf_fcty* src, ysmaf afunc);
#endif /* mkcf_fcty_SUPP_FUNCS */

#ifndef mkcf_fcty_DEFINED
#define mkcf_fcty_DEFINED
struct yostub* mkcf_fcty__getStubs(void);
#define mkcf_fcty__stubs (mkcf_fcty__getStubs())
#endif /* mkcf_fcty_DEFINED */

CONST ysid* mkcf_fcty__getId(void);
#ifndef mkcf_fcty__id
#define mkcf_fcty__id   (mkcf_fcty__getId())
#endif
#ifndef mkcf_fcty_mnAddress_DECLARED
#define mkcf_fcty_mnAddress_DECLARED
typedef YCIDL_sequence_ub1 mkcf_fcty_mnAddress;
yotk* mkcf_fcty_mnAddress__getTC(void);
#ifndef YCTC_mkcf_fcty_mnAddress
#define YCTC_mkcf_fcty_mnAddress   (mkcf_fcty_mnAddress__getTC())
#endif
#endif /* mkcf_fcty_mnAddress_DECLARED */

#ifndef mkcf_fcty_mnAddress_SUPP_FUNCS
#define mkcf_fcty_mnAddress_SUPP_FUNCS
void mkcf_fcty_mnAddress__free( mkcf_fcty_mnAddress* val, ysmff ffunc);
void mkcf_fcty_mnAddress__copy( mkcf_fcty_mnAddress* dest, 
  mkcf_fcty_mnAddress* src, ysmaf afunc);
#endif /* mkcf_fcty_mnAddress_SUPP_FUNCS */

mkcf_feed mkcf_fcty_createSession( mkcf_fcty or, yoenv* ev, char* baseName, 
  mkd_pos* streamLength, ub4 avgIFramesPerMin, ub4 avgPFramesPerMin, ub4 
  avgBFramesPerMin, ub4 bitsPerSecond, ub1 tagLagInSeconds, mkcf_hdr* 
  feedHdr, mkcf_fcty_mnAddress* dataPort);
void mkcf_fcty_createSession_nw( mkcf_fcty or, yoenv* ev, char* baseName, 
  mkd_pos* streamLength, ub4 avgIFramesPerMin, ub4 avgPFramesPerMin, ub4 
  avgBFramesPerMin, ub4 bitsPerSecond, ub1 tagLagInSeconds, mkcf_hdr* 
  feedHdr, mkcf_fcty_mnAddress* dataPort, ysevt* _sem);
yopar* mkcf_fcty_createSession__getPars(void);
#ifndef mkcf_fcty_createSession_pars
#define mkcf_fcty_createSession_pars (mkcf_fcty_createSession__getPars())
#endif

#ifndef mkcf_fcty_feedList_DECLARED
#define mkcf_fcty_feedList_DECLARED
typedef YCIDL_sequence_mkcf_feed mkcf_fcty_feedList;
yotk* mkcf_fcty_feedList__getTC(void);
#ifndef YCTC_mkcf_fcty_feedList
#define YCTC_mkcf_fcty_feedList   (mkcf_fcty_feedList__getTC())
#endif
#endif /* mkcf_fcty_feedList_DECLARED */

#ifndef mkcf_fcty_feedList_SUPP_FUNCS
#define mkcf_fcty_feedList_SUPP_FUNCS
void mkcf_fcty_feedList__free( mkcf_fcty_feedList* val, ysmff ffunc);
void mkcf_fcty_feedList__copy( mkcf_fcty_feedList* dest, 
  mkcf_fcty_feedList* src, ysmaf afunc);
#endif /* mkcf_fcty_feedList_SUPP_FUNCS */

void mkcf_fcty_query( mkcf_fcty or, yoenv* ev, mkcf_fcty_feedList* roster);
void mkcf_fcty_query_nw( mkcf_fcty or, yoenv* ev, mkcf_fcty_feedList* 
  roster, ysevt* _sem);
yopar* mkcf_fcty_query__getPars(void);
#ifndef mkcf_fcty_query_pars
#define mkcf_fcty_query_pars (mkcf_fcty_query__getPars())
#endif

#ifndef mkcf_fcty__tyimpl_DEFINED
#define mkcf_fcty__tyimpl_DEFINED
struct mkcf_fcty__tyimpl
{
  mkcf_feed (*createSession)( mkcf_fcty, yoenv*, char*, mkd_pos*, ub4, ub4, 
    ub4, ub4, ub1, mkcf_hdr*, mkcf_fcty_mnAddress*);
  void (*query)( mkcf_fcty, yoenv*, mkcf_fcty_feedList*);
};
#endif /* mkcf_fcty__tyimpl_DEFINED */

EXTC_END
#endif /* MKCF_IDL */
