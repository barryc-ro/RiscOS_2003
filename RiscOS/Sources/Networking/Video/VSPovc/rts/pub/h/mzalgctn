/* GENERATED FILE
 * mzalgctn - public declarations
 * from /vobs/rts/pub/mzalgctn.idl
 */

#ifndef MZALGCTN_IDL
#define MZALGCTN_IDL

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif

EXTC_START

/**********  SEQUENCE DECLARATIONS *********/
#ifndef YCIDL_sequence_CORBA_Object_DEFINED
#define YCIDL_sequence_CORBA_Object_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  CORBA_Object* _buffer;
} YCIDL_sequence_CORBA_Object;
#ifndef YCIDL_sequence_CORBA_Object_SUPP_FUNCS
#define YCIDL_sequence_CORBA_Object_SUPP_FUNCS
#endif /* YCIDL_sequence_CORBA_Object_SUPP_FUNCS */

#endif /* YCIDL_sequence_CORBA_Object_DEFINED */

#ifndef mkd_segment_DECLARED
#define mkd_segment_DECLARED
typedef struct mkd_segment mkd_segment;
#endif /* mkd_segment_DECLARED */

#ifndef YCIDL_sequence_mkd_segment_DEFINED
#define YCIDL_sequence_mkd_segment_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mkd_segment* _buffer;
} YCIDL_sequence_mkd_segment;
#ifndef YCIDL_sequence_mkd_segment_SUPP_FUNCS
#define YCIDL_sequence_mkd_segment_SUPP_FUNCS
#endif /* YCIDL_sequence_mkd_segment_SUPP_FUNCS */

#endif /* YCIDL_sequence_mkd_segment_DEFINED */

#ifndef mkd_segInfo_DECLARED
#define mkd_segInfo_DECLARED
typedef struct mkd_segInfo mkd_segInfo;
#endif /* mkd_segInfo_DECLARED */

#ifndef YCIDL_sequence_mkd_segInfo_DEFINED
#define YCIDL_sequence_mkd_segInfo_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mkd_segInfo* _buffer;
} YCIDL_sequence_mkd_segInfo;
#ifndef YCIDL_sequence_mkd_segInfo_SUPP_FUNCS
#define YCIDL_sequence_mkd_segInfo_SUPP_FUNCS
#endif /* YCIDL_sequence_mkd_segInfo_SUPP_FUNCS */

#endif /* YCIDL_sequence_mkd_segInfo_DEFINED */

#ifndef mkcf_feed_tag_DECLARED
#define mkcf_feed_tag_DECLARED
typedef struct mkcf_feed_tag mkcf_feed_tag;
#endif /* mkcf_feed_tag_DECLARED */

#ifndef YCIDL_sequence_mkcf_feed_tag_DEFINED
#define YCIDL_sequence_mkcf_feed_tag_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mkcf_feed_tag* _buffer;
} YCIDL_sequence_mkcf_feed_tag;
#ifndef YCIDL_sequence_mkcf_feed_tag_SUPP_FUNCS
#define YCIDL_sequence_mkcf_feed_tag_SUPP_FUNCS
#endif /* YCIDL_sequence_mkcf_feed_tag_SUPP_FUNCS */

#endif /* YCIDL_sequence_mkcf_feed_tag_DEFINED */


/* interface mkcf_feed declarations */
#ifndef mkcf_feed_DECLARED
#define mkcf_feed_DECLARED
typedef struct YCmkcf_feed* mkcf_feed;
yotk* mkcf_feed__getTC(void);
#ifndef YCTC_mkcf_feed
#define YCTC_mkcf_feed   (mkcf_feed__getTC())
#endif
#endif /* mkcf_feed_DECLARED */

#ifndef mkcf_feed_SUPP_FUNCS
#define mkcf_feed_SUPP_FUNCS
void mkcf_feed__free( mkcf_feed* val, ysmff ffunc);
void mkcf_feed__copy( mkcf_feed* dest, mkcf_feed* src, ysmaf afunc);
#endif /* mkcf_feed_SUPP_FUNCS */

#ifndef YCIDL_sequence_mkcf_feed_DEFINED
#define YCIDL_sequence_mkcf_feed_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mkcf_feed* _buffer;
} YCIDL_sequence_mkcf_feed;
#ifndef YCIDL_sequence_mkcf_feed_SUPP_FUNCS
#define YCIDL_sequence_mkcf_feed_SUPP_FUNCS
#endif /* YCIDL_sequence_mkcf_feed_SUPP_FUNCS */

#endif /* YCIDL_sequence_mkcf_feed_DEFINED */

#ifndef mza_ClipAtr_DECLARED
#define mza_ClipAtr_DECLARED
typedef struct mza_ClipAtr mza_ClipAtr;
#endif /* mza_ClipAtr_DECLARED */

#ifndef YCIDL_sequence_mza_ClipAtr_DEFINED
#define YCIDL_sequence_mza_ClipAtr_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mza_ClipAtr* _buffer;
} YCIDL_sequence_mza_ClipAtr;
#ifndef YCIDL_sequence_mza_ClipAtr_SUPP_FUNCS
#define YCIDL_sequence_mza_ClipAtr_SUPP_FUNCS
#endif /* YCIDL_sequence_mza_ClipAtr_SUPP_FUNCS */

#endif /* YCIDL_sequence_mza_ClipAtr_DEFINED */

#ifndef mza_CtntAtr_DECLARED
#define mza_CtntAtr_DECLARED
typedef struct mza_CtntAtr mza_CtntAtr;
#endif /* mza_CtntAtr_DECLARED */

#ifndef YCIDL_sequence_mza_CtntAtr_DEFINED
#define YCIDL_sequence_mza_CtntAtr_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mza_CtntAtr* _buffer;
} YCIDL_sequence_mza_CtntAtr;
#ifndef YCIDL_sequence_mza_CtntAtr_SUPP_FUNCS
#define YCIDL_sequence_mza_CtntAtr_SUPP_FUNCS
#endif /* YCIDL_sequence_mza_CtntAtr_SUPP_FUNCS */

#endif /* YCIDL_sequence_mza_CtntAtr_DEFINED */

#ifndef mza_CtntPvdrAtr_DECLARED
#define mza_CtntPvdrAtr_DECLARED
typedef struct mza_CtntPvdrAtr mza_CtntPvdrAtr;
#endif /* mza_CtntPvdrAtr_DECLARED */

#ifndef YCIDL_sequence_mza_CtntPvdrAtr_DEFINED
#define YCIDL_sequence_mza_CtntPvdrAtr_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mza_CtntPvdrAtr* _buffer;
} YCIDL_sequence_mza_CtntPvdrAtr;
#ifndef YCIDL_sequence_mza_CtntPvdrAtr_SUPP_FUNCS
#define YCIDL_sequence_mza_CtntPvdrAtr_SUPP_FUNCS
#endif /* YCIDL_sequence_mza_CtntPvdrAtr_SUPP_FUNCS */

#endif /* YCIDL_sequence_mza_CtntPvdrAtr_DEFINED */

#ifndef mza_LgCtntAtr_DECLARED
#define mza_LgCtntAtr_DECLARED
typedef struct mza_LgCtntAtr mza_LgCtntAtr;
#endif /* mza_LgCtntAtr_DECLARED */

#ifndef YCIDL_sequence_mza_LgCtntAtr_DEFINED
#define YCIDL_sequence_mza_LgCtntAtr_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mza_LgCtntAtr* _buffer;
} YCIDL_sequence_mza_LgCtntAtr;
#ifndef YCIDL_sequence_mza_LgCtntAtr_SUPP_FUNCS
#define YCIDL_sequence_mza_LgCtntAtr_SUPP_FUNCS
#endif /* YCIDL_sequence_mza_LgCtntAtr_SUPP_FUNCS */

#endif /* YCIDL_sequence_mza_LgCtntAtr_DEFINED */

/******* NON-SEQUENCE DECLARATIONS *******/

/* interface yoevt declarations */
#ifndef yoevt_DECLARED
#define yoevt_DECLARED
typedef struct YCyoevt* yoevt;
yotk* yoevt__getTC(void);
#ifndef YCTC_yoevt
#define YCTC_yoevt   (yoevt__getTC())
#endif
#endif /* yoevt_DECLARED */

#ifndef yoevt_SUPP_FUNCS
#define yoevt_SUPP_FUNCS
void yoevt__free( yoevt* val, ysmff ffunc);
void yoevt__copy( yoevt* dest, yoevt* src, ysmaf afunc);
#endif /* yoevt_SUPP_FUNCS */

#ifndef yostd_stringList_DECLARED
#define yostd_stringList_DECLARED
typedef YCIDL_sequence_string yostd_stringList;
yotk* yostd_stringList__getTC(void);
#ifndef YCTC_yostd_stringList
#define YCTC_yostd_stringList   (yostd_stringList__getTC())
#endif
#endif /* yostd_stringList_DECLARED */

#ifndef yostd_stringList_SUPP_FUNCS
#define yostd_stringList_SUPP_FUNCS
void yostd_stringList__free( yostd_stringList* val, ysmff ffunc);
void yostd_stringList__copy( yostd_stringList* dest, yostd_stringList* src, 
  ysmaf afunc);
#endif /* yostd_stringList_SUPP_FUNCS */

#ifndef yostd_objList_DECLARED
#define yostd_objList_DECLARED
typedef YCIDL_sequence_CORBA_Object yostd_objList;
yotk* yostd_objList__getTC(void);
#ifndef YCTC_yostd_objList
#define YCTC_yostd_objList   (yostd_objList__getTC())
#endif
#endif /* yostd_objList_DECLARED */

#ifndef yostd_objList_SUPP_FUNCS
#define yostd_objList_SUPP_FUNCS
void yostd_objList__free( yostd_objList* val, ysmff ffunc);
void yostd_objList__copy( yostd_objList* dest, yostd_objList* src, ysmaf 
  afunc);
#endif /* yostd_objList_SUPP_FUNCS */

#ifndef yostd_octetSeq_DECLARED
#define yostd_octetSeq_DECLARED
typedef YCIDL_sequence_ub1 yostd_octetSeq;
yotk* yostd_octetSeq__getTC(void);
#ifndef YCTC_yostd_octetSeq
#define YCTC_yostd_octetSeq   (yostd_octetSeq__getTC())
#endif
#endif /* yostd_octetSeq_DECLARED */

#ifndef yostd_octetSeq_SUPP_FUNCS
#define yostd_octetSeq_SUPP_FUNCS
void yostd_octetSeq__free( yostd_octetSeq* val, ysmff ffunc);
void yostd_octetSeq__copy( yostd_octetSeq* dest, yostd_octetSeq* src, ysmaf 
  afunc);
#endif /* yostd_octetSeq_SUPP_FUNCS */

#ifndef ObjLst_DECLARED
#define ObjLst_DECLARED
typedef YCIDL_sequence_CORBA_Object ObjLst;
yotk* ObjLst__getTC(void);
#ifndef YCTC_ObjLst
#define YCTC_ObjLst   (ObjLst__getTC())
#endif
#endif /* ObjLst_DECLARED */

#ifndef ObjLst_SUPP_FUNCS
#define ObjLst_SUPP_FUNCS
void ObjLst__free( ObjLst* val, ysmff ffunc);
void ObjLst__copy( ObjLst* dest, ObjLst* src, ysmaf afunc);
#endif /* ObjLst_SUPP_FUNCS */

#ifndef Itr_DECLARED
#define Itr_DECLARED
typedef struct Itr Itr;
#endif /* Itr_DECLARED */

#ifndef Itr_DEFINED
#define Itr_DEFINED
struct Itr
{
  sb4 Position;
  sb4 NumItems;
};
yotk* Itr__getTC(void);
#ifndef YCTC_Itr
#define YCTC_Itr   (Itr__getTC())
#endif
#endif /* Itr_DEFINED */

#ifndef Itr_SUPP_FUNCS
#define Itr_SUPP_FUNCS
void Itr__free( Itr* val, ysmff ffunc);
void Itr__copy( Itr* dest, Itr* src, ysmaf afunc);
#endif /* Itr_SUPP_FUNCS */

#ifndef svrId_DECLARED
#define svrId_DECLARED
typedef struct svrId svrId;
#endif /* svrId_DECLARED */

#ifndef svrId_DEFINED
#define svrId_DEFINED
struct svrId
{
  sysb8 addr;
  sysb8 call_time;
};
yotk* svrId__getTC(void);
#ifndef YCTC_svrId
#define YCTC_svrId   (svrId__getTC())
#endif
#endif /* svrId_DEFINED */

#ifndef svrId_SUPP_FUNCS
#define svrId_SUPP_FUNCS
void svrId__free( svrId* val, ysmff ffunc);
void svrId__copy( svrId* dest, svrId* src, ysmaf afunc);
#endif /* svrId_SUPP_FUNCS */

#ifndef mza_Itr_DECLARED
#define mza_Itr_DECLARED
typedef Itr mza_Itr;
yotk* mza_Itr__getTC(void);
#ifndef YCTC_mza_Itr
#define YCTC_mza_Itr   (mza_Itr__getTC())
#endif
#endif /* mza_Itr_DECLARED */

#ifndef mza_Itr_SUPP_FUNCS
#define mza_Itr_SUPP_FUNCS
#define mza_Itr__free(val, ffunc) Itr__free((val),(ffunc))
#define mza_Itr__copy(dest, src, afunc) Itr__copy((dest),(src),(afunc))
#endif /* mza_Itr_SUPP_FUNCS */

#ifndef mza_svrId_DECLARED
#define mza_svrId_DECLARED
typedef svrId mza_svrId;
yotk* mza_svrId__getTC(void);
#ifndef YCTC_mza_svrId
#define YCTC_mza_svrId   (mza_svrId__getTC())
#endif
#endif /* mza_svrId_DECLARED */

#ifndef mza_svrId_SUPP_FUNCS
#define mza_svrId_SUPP_FUNCS
#define mza_svrId__free(val, ffunc) svrId__free((val),(ffunc))
#define mza_svrId__copy(dest, src, afunc) svrId__copy((dest),(src),(afunc))
#endif /* mza_svrId_SUPP_FUNCS */

#ifndef mza_ClipLst_DECLARED
#define mza_ClipLst_DECLARED
typedef ObjLst mza_ClipLst;
yotk* mza_ClipLst__getTC(void);
#ifndef YCTC_mza_ClipLst
#define YCTC_mza_ClipLst   (mza_ClipLst__getTC())
#endif
#endif /* mza_ClipLst_DECLARED */

#ifndef mza_ClipLst_SUPP_FUNCS
#define mza_ClipLst_SUPP_FUNCS
#define mza_ClipLst__free(val, ffunc) ObjLst__free((val),(ffunc))
#define mza_ClipLst__copy(dest, src, afunc) ObjLst__copy((dest),(src),( \
  afunc))
#endif /* mza_ClipLst_SUPP_FUNCS */

#ifndef mza_CtntPvdrLst_DECLARED
#define mza_CtntPvdrLst_DECLARED
typedef ObjLst mza_CtntPvdrLst;
yotk* mza_CtntPvdrLst__getTC(void);
#ifndef YCTC_mza_CtntPvdrLst
#define YCTC_mza_CtntPvdrLst   (mza_CtntPvdrLst__getTC())
#endif
#endif /* mza_CtntPvdrLst_DECLARED */

#ifndef mza_CtntPvdrLst_SUPP_FUNCS
#define mza_CtntPvdrLst_SUPP_FUNCS
#define mza_CtntPvdrLst__free(val, ffunc) ObjLst__free((val),(ffunc))
#define mza_CtntPvdrLst__copy(dest, src, afunc) ObjLst__copy((dest),(src),( \
  afunc))
#endif /* mza_CtntPvdrLst_SUPP_FUNCS */

#ifndef mza_CtntLst_DECLARED
#define mza_CtntLst_DECLARED
typedef ObjLst mza_CtntLst;
yotk* mza_CtntLst__getTC(void);
#ifndef YCTC_mza_CtntLst
#define YCTC_mza_CtntLst   (mza_CtntLst__getTC())
#endif
#endif /* mza_CtntLst_DECLARED */

#ifndef mza_CtntLst_SUPP_FUNCS
#define mza_CtntLst_SUPP_FUNCS
#define mza_CtntLst__free(val, ffunc) ObjLst__free((val),(ffunc))
#define mza_CtntLst__copy(dest, src, afunc) ObjLst__copy((dest),(src),( \
  afunc))
#endif /* mza_CtntLst_SUPP_FUNCS */

#ifndef mza_LgCtntLst_DECLARED
#define mza_LgCtntLst_DECLARED
typedef ObjLst mza_LgCtntLst;
yotk* mza_LgCtntLst__getTC(void);
#ifndef YCTC_mza_LgCtntLst
#define YCTC_mza_LgCtntLst   (mza_LgCtntLst__getTC())
#endif
#endif /* mza_LgCtntLst_DECLARED */

#ifndef mza_LgCtntLst_SUPP_FUNCS
#define mza_LgCtntLst_SUPP_FUNCS
#define mza_LgCtntLst__free(val, ffunc) ObjLst__free((val),(ffunc))
#define mza_LgCtntLst__copy(dest, src, afunc) ObjLst__copy((dest),(src),( \
  afunc))
#endif /* mza_LgCtntLst_SUPP_FUNCS */

#ifndef mza_opstatus_DECLARED
#define mza_opstatus_DECLARED
typedef ub4 mza_opstatus;
yotk* mza_opstatus__getTC(void);
#ifndef YCTC_mza_opstatus
#define YCTC_mza_opstatus   (mza_opstatus__getTC())
#endif
#endif /* mza_opstatus_DECLARED */

#ifndef mza_opstatus_DEFINED
#define mza_opstatus_DEFINED
#define mza_completed ((mza_opstatus) 0)
#define mza_notComplete ((mza_opstatus) 1)
#endif /* mza_opstatus_DEFINED */

#ifndef mza_opstatus_SUPP_FUNCS
#define mza_opstatus_SUPP_FUNCS
void mza_opstatus__free( mza_opstatus* val, ysmff ffunc);
void mza_opstatus__copy( mza_opstatus* dest, mza_opstatus* src, ysmaf afunc)
  ;
#endif /* mza_opstatus_SUPP_FUNCS */

#ifndef MZA_EX_PERSISTENCEERROR_DECLARED
#define MZA_EX_PERSISTENCEERROR_DECLARED
CONST ysid* mza_PersistenceError__getId(void);
#ifndef MZA_EX_PERSISTENCEERROR
#define MZA_EX_PERSISTENCEERROR   (mza_PersistenceError__getId())
#endif
#endif /* MZA_EX_PERSISTENCEERROR_DECLARED */

#ifndef mza_PersistenceError_DECLARED
#define mza_PersistenceError_DECLARED
typedef struct mza_PersistenceError mza_PersistenceError;
#endif /* mza_PersistenceError_DECLARED */

#ifndef mza_PersistenceError_DEFINED
#define mza_PersistenceError_DEFINED
struct mza_PersistenceError
{
  mza_opstatus status;
  char* description;
  sb4 sqlcode;
  char* sqlerrmc;
  sb4 errorCode;
};
yotk* mza_PersistenceError__getTC(void);
#ifndef YCTC_mza_PersistenceError
#define YCTC_mza_PersistenceError   (mza_PersistenceError__getTC())
#endif
#endif /* mza_PersistenceError_DEFINED */

#ifndef mza_PersistenceError_SUPP_FUNCS
#define mza_PersistenceError_SUPP_FUNCS
void mza_PersistenceError__free( mza_PersistenceError* val, ysmff ffunc);
void mza_PersistenceError__copy( mza_PersistenceError* dest, 
  mza_PersistenceError* src, ysmaf afunc);
#endif /* mza_PersistenceError_SUPP_FUNCS */

#ifndef MZA_EX_NOMEMORY_DECLARED
#define MZA_EX_NOMEMORY_DECLARED
CONST ysid* mza_NoMemory__getId(void);
#ifndef MZA_EX_NOMEMORY
#define MZA_EX_NOMEMORY   (mza_NoMemory__getId())
#endif
#endif /* MZA_EX_NOMEMORY_DECLARED */

#ifndef mza_NoMemory_DECLARED
#define mza_NoMemory_DECLARED
typedef struct mza_NoMemory mza_NoMemory;
#endif /* mza_NoMemory_DECLARED */

#ifndef mza_NoMemory_DEFINED
#define mza_NoMemory_DEFINED
struct mza_NoMemory
{
  mza_opstatus status;
  char* description;
  sb4 memorySize;
  sb4 errorCode;
};
yotk* mza_NoMemory__getTC(void);
#ifndef YCTC_mza_NoMemory
#define YCTC_mza_NoMemory   (mza_NoMemory__getTC())
#endif
#endif /* mza_NoMemory_DEFINED */

#ifndef mza_NoMemory_SUPP_FUNCS
#define mza_NoMemory_SUPP_FUNCS
void mza_NoMemory__free( mza_NoMemory* val, ysmff ffunc);
void mza_NoMemory__copy( mza_NoMemory* dest, mza_NoMemory* src, ysmaf afunc)
  ;
#endif /* mza_NoMemory_SUPP_FUNCS */

#ifndef MZA_EX_BADOBJECT_DECLARED
#define MZA_EX_BADOBJECT_DECLARED
CONST ysid* mza_BadObject__getId(void);
#ifndef MZA_EX_BADOBJECT
#define MZA_EX_BADOBJECT   (mza_BadObject__getId())
#endif
#endif /* MZA_EX_BADOBJECT_DECLARED */

#ifndef mza_BadObject_DECLARED
#define mza_BadObject_DECLARED
typedef struct mza_BadObject mza_BadObject;
#endif /* mza_BadObject_DECLARED */

#ifndef mza_BadObject_DEFINED
#define mza_BadObject_DEFINED
struct mza_BadObject
{
  mza_opstatus status;
  char* description;
  CORBA_Object objRef;
  sb4 errorCode;
};
yotk* mza_BadObject__getTC(void);
#ifndef YCTC_mza_BadObject
#define YCTC_mza_BadObject   (mza_BadObject__getTC())
#endif
#endif /* mza_BadObject_DEFINED */

#ifndef mza_BadObject_SUPP_FUNCS
#define mza_BadObject_SUPP_FUNCS
void mza_BadObject__free( mza_BadObject* val, ysmff ffunc);
void mza_BadObject__copy( mza_BadObject* dest, mza_BadObject* src, ysmaf 
  afunc);
#endif /* mza_BadObject_SUPP_FUNCS */

#ifndef MZA_EX_INTERNAL_DECLARED
#define MZA_EX_INTERNAL_DECLARED
CONST ysid* mza_Internal__getId(void);
#ifndef MZA_EX_INTERNAL
#define MZA_EX_INTERNAL   (mza_Internal__getId())
#endif
#endif /* MZA_EX_INTERNAL_DECLARED */

#ifndef mza_Internal_DECLARED
#define mza_Internal_DECLARED
typedef struct mza_Internal mza_Internal;
#endif /* mza_Internal_DECLARED */

#ifndef mza_Internal_DEFINED
#define mza_Internal_DEFINED
struct mza_Internal
{
  mza_opstatus status;
  char* description;
  sb4 errorCode;
};
yotk* mza_Internal__getTC(void);
#ifndef YCTC_mza_Internal
#define YCTC_mza_Internal   (mza_Internal__getTC())
#endif
#endif /* mza_Internal_DEFINED */

#ifndef mza_Internal_SUPP_FUNCS
#define mza_Internal_SUPP_FUNCS
void mza_Internal__free( mza_Internal* val, ysmff ffunc);
void mza_Internal__copy( mza_Internal* dest, mza_Internal* src, ysmaf afunc)
  ;
#endif /* mza_Internal_SUPP_FUNCS */

#ifndef MZA_EX_DATACONVERSION_DECLARED
#define MZA_EX_DATACONVERSION_DECLARED
CONST ysid* mza_DataConversion__getId(void);
#ifndef MZA_EX_DATACONVERSION
#define MZA_EX_DATACONVERSION   (mza_DataConversion__getId())
#endif
#endif /* MZA_EX_DATACONVERSION_DECLARED */

#ifndef mza_DataConversion_DECLARED
#define mza_DataConversion_DECLARED
typedef struct mza_DataConversion mza_DataConversion;
#endif /* mza_DataConversion_DECLARED */

#ifndef mza_DataConversion_DEFINED
#define mza_DataConversion_DEFINED
struct mza_DataConversion
{
  mza_opstatus status;
  char* description;
  sb2 paramPosition;
  sb4 errorCode;
};
yotk* mza_DataConversion__getTC(void);
#ifndef YCTC_mza_DataConversion
#define YCTC_mza_DataConversion   (mza_DataConversion__getTC())
#endif
#endif /* mza_DataConversion_DEFINED */

#ifndef mza_DataConversion_SUPP_FUNCS
#define mza_DataConversion_SUPP_FUNCS
void mza_DataConversion__free( mza_DataConversion* val, ysmff ffunc);
void mza_DataConversion__copy( mza_DataConversion* dest, 
  mza_DataConversion* src, ysmaf afunc);
#endif /* mza_DataConversion_SUPP_FUNCS */

#ifndef MZA_EX_COMMUNICATIONFAILURE_DECLARED
#define MZA_EX_COMMUNICATIONFAILURE_DECLARED
CONST ysid* mza_CommunicationFailure__getId(void);
#ifndef MZA_EX_COMMUNICATIONFAILURE
#define MZA_EX_COMMUNICATIONFAILURE   (mza_CommunicationFailure__getId())
#endif
#endif /* MZA_EX_COMMUNICATIONFAILURE_DECLARED */

#ifndef mza_CommunicationFailure_DECLARED
#define mza_CommunicationFailure_DECLARED
typedef struct mza_CommunicationFailure mza_CommunicationFailure;
#endif /* mza_CommunicationFailure_DECLARED */

#ifndef mza_CommunicationFailure_DEFINED
#define mza_CommunicationFailure_DEFINED
struct mza_CommunicationFailure
{
  mza_opstatus status;
  char* description;
  sb4 omnErrorNum;
  char* omnErrorMsg;
  sb4 errorCode;
};
yotk* mza_CommunicationFailure__getTC(void);
#ifndef YCTC_mza_CommunicationFailure
#define YCTC_mza_CommunicationFailure   (mza_CommunicationFailure__getTC())
#endif
#endif /* mza_CommunicationFailure_DEFINED */

#ifndef mza_CommunicationFailure_SUPP_FUNCS
#define mza_CommunicationFailure_SUPP_FUNCS
void mza_CommunicationFailure__free( mza_CommunicationFailure* val, ysmff 
  ffunc);
void mza_CommunicationFailure__copy( mza_CommunicationFailure* dest, 
  mza_CommunicationFailure* src, ysmaf afunc);
#endif /* mza_CommunicationFailure_SUPP_FUNCS */

#ifndef MZA_EX_IMPLEMENTATIONLIMIT_DECLARED
#define MZA_EX_IMPLEMENTATIONLIMIT_DECLARED
CONST ysid* mza_ImplementationLimit__getId(void);
#ifndef MZA_EX_IMPLEMENTATIONLIMIT
#define MZA_EX_IMPLEMENTATIONLIMIT   (mza_ImplementationLimit__getId())
#endif
#endif /* MZA_EX_IMPLEMENTATIONLIMIT_DECLARED */

#ifndef mza_ImplementationLimit_DECLARED
#define mza_ImplementationLimit_DECLARED
typedef struct mza_ImplementationLimit mza_ImplementationLimit;
#endif /* mza_ImplementationLimit_DECLARED */

#ifndef mza_ImplementationLimit_DEFINED
#define mza_ImplementationLimit_DEFINED
struct mza_ImplementationLimit
{
  mza_opstatus status;
  char* description;
  sb4 scopeValue;
  sb4 errorCode;
};
yotk* mza_ImplementationLimit__getTC(void);
#ifndef YCTC_mza_ImplementationLimit
#define YCTC_mza_ImplementationLimit   (mza_ImplementationLimit__getTC())
#endif
#endif /* mza_ImplementationLimit_DEFINED */

#ifndef mza_ImplementationLimit_SUPP_FUNCS
#define mza_ImplementationLimit_SUPP_FUNCS
void mza_ImplementationLimit__free( mza_ImplementationLimit* val, ysmff 
  ffunc);
void mza_ImplementationLimit__copy( mza_ImplementationLimit* dest, 
  mza_ImplementationLimit* src, ysmaf afunc);
#endif /* mza_ImplementationLimit_SUPP_FUNCS */

#ifndef MZA_EX_TRANSACTIONREQUIRED_DECLARED
#define MZA_EX_TRANSACTIONREQUIRED_DECLARED
CONST ysid* mza_TransactionRequired__getId(void);
#ifndef MZA_EX_TRANSACTIONREQUIRED
#define MZA_EX_TRANSACTIONREQUIRED   (mza_TransactionRequired__getId())
#endif
#endif /* MZA_EX_TRANSACTIONREQUIRED_DECLARED */

yotk* mza_TransactionRequired__getTC(void);
#ifndef YCTC_mza_TransactionRequired
#define YCTC_mza_TransactionRequired   (mza_TransactionRequired__getTC())
#endif
#ifndef MZA_EX_TRANSACTIONROLLEDBACK_DECLARED
#define MZA_EX_TRANSACTIONROLLEDBACK_DECLARED
CONST ysid* mza_TransactionRolledBack__getId(void);
#ifndef MZA_EX_TRANSACTIONROLLEDBACK
#define MZA_EX_TRANSACTIONROLLEDBACK   (mza_TransactionRolledBack__getId())
#endif
#endif /* MZA_EX_TRANSACTIONROLLEDBACK_DECLARED */

yotk* mza_TransactionRolledBack__getTC(void);
#ifndef YCTC_mza_TransactionRolledBack
#define YCTC_mza_TransactionRolledBack   (mza_TransactionRolledBack__getTC() \
  )
#endif
#ifndef MZA_EX_INVALIDTRANSACTION_DECLARED
#define MZA_EX_INVALIDTRANSACTION_DECLARED
CONST ysid* mza_InvalidTransaction__getId(void);
#ifndef MZA_EX_INVALIDTRANSACTION
#define MZA_EX_INVALIDTRANSACTION   (mza_InvalidTransaction__getId())
#endif
#endif /* MZA_EX_INVALIDTRANSACTION_DECLARED */

yotk* mza_InvalidTransaction__getTC(void);
#ifndef YCTC_mza_InvalidTransaction
#define YCTC_mza_InvalidTransaction   (mza_InvalidTransaction__getTC())
#endif
#ifndef MZA_EX_NOTIMPLEMENTED_DECLARED
#define MZA_EX_NOTIMPLEMENTED_DECLARED
CONST ysid* mza_NotImplemented__getId(void);
#ifndef MZA_EX_NOTIMPLEMENTED
#define MZA_EX_NOTIMPLEMENTED   (mza_NotImplemented__getId())
#endif
#endif /* MZA_EX_NOTIMPLEMENTED_DECLARED */

#ifndef mza_NotImplemented_DECLARED
#define mza_NotImplemented_DECLARED
typedef struct mza_NotImplemented mza_NotImplemented;
#endif /* mza_NotImplemented_DECLARED */

#ifndef mza_NotImplemented_DEFINED
#define mza_NotImplemented_DEFINED
struct mza_NotImplemented
{
  mza_opstatus status;
  char* description;
  sb4 errorCode;
};
yotk* mza_NotImplemented__getTC(void);
#ifndef YCTC_mza_NotImplemented
#define YCTC_mza_NotImplemented   (mza_NotImplemented__getTC())
#endif
#endif /* mza_NotImplemented_DEFINED */

#ifndef mza_NotImplemented_SUPP_FUNCS
#define mza_NotImplemented_SUPP_FUNCS
void mza_NotImplemented__free( mza_NotImplemented* val, ysmff ffunc);
void mza_NotImplemented__copy( mza_NotImplemented* dest, 
  mza_NotImplemented* src, ysmaf afunc);
#endif /* mza_NotImplemented_SUPP_FUNCS */

#ifndef MZA_EX_NOPERMISSION_DECLARED
#define MZA_EX_NOPERMISSION_DECLARED
CONST ysid* mza_NoPermission__getId(void);
#ifndef MZA_EX_NOPERMISSION
#define MZA_EX_NOPERMISSION   (mza_NoPermission__getId())
#endif
#endif /* MZA_EX_NOPERMISSION_DECLARED */

#ifndef mza_NoPermission_DECLARED
#define mza_NoPermission_DECLARED
typedef struct mza_NoPermission mza_NoPermission;
#endif /* mza_NoPermission_DECLARED */

#ifndef mza_NoPermission_DEFINED
#define mza_NoPermission_DEFINED
struct mza_NoPermission
{
  mza_opstatus status;
  char* description;
  sb4 errorCode;
};
yotk* mza_NoPermission__getTC(void);
#ifndef YCTC_mza_NoPermission
#define YCTC_mza_NoPermission   (mza_NoPermission__getTC())
#endif
#endif /* mza_NoPermission_DEFINED */

#ifndef mza_NoPermission_SUPP_FUNCS
#define mza_NoPermission_SUPP_FUNCS
void mza_NoPermission__free( mza_NoPermission* val, ysmff ffunc);
void mza_NoPermission__copy( mza_NoPermission* dest, mza_NoPermission* src, 
  ysmaf afunc);
#endif /* mza_NoPermission_SUPP_FUNCS */

#ifndef MZA_EX_XAEXCEPTION_DECLARED
#define MZA_EX_XAEXCEPTION_DECLARED
CONST ysid* mza_XaException__getId(void);
#ifndef MZA_EX_XAEXCEPTION
#define MZA_EX_XAEXCEPTION   (mza_XaException__getId())
#endif
#endif /* MZA_EX_XAEXCEPTION_DECLARED */

#ifndef mza_XaException_DECLARED
#define mza_XaException_DECLARED
typedef struct mza_XaException mza_XaException;
#endif /* mza_XaException_DECLARED */

#ifndef mza_XaException_DEFINED
#define mza_XaException_DEFINED
struct mza_XaException
{
  mza_opstatus status;
  char* description;
  sb4 errorCode;
};
yotk* mza_XaException__getTC(void);
#ifndef YCTC_mza_XaException
#define YCTC_mza_XaException   (mza_XaException__getTC())
#endif
#endif /* mza_XaException_DEFINED */

#ifndef mza_XaException_SUPP_FUNCS
#define mza_XaException_SUPP_FUNCS
void mza_XaException__free( mza_XaException* val, ysmff ffunc);
void mza_XaException__copy( mza_XaException* dest, mza_XaException* src, 
  ysmaf afunc);
#endif /* mza_XaException_SUPP_FUNCS */

#ifndef mza_otid_t_DECLARED
#define mza_otid_t_DECLARED
typedef struct mza_otid_t mza_otid_t;
#endif /* mza_otid_t_DECLARED */

#ifndef mza_otid_t_DEFINED
#define mza_otid_t_DEFINED
struct mza_otid_t
{
  sb4 formatID;
  ub4 gtrid_length;
  ub4 bqual_length;
  YCIDL_sequence_ub1 tid;
};
yotk* mza_otid_t__getTC(void);
#ifndef YCTC_mza_otid_t
#define YCTC_mza_otid_t   (mza_otid_t__getTC())
#endif
#endif /* mza_otid_t_DEFINED */

#ifndef mza_otid_t_SUPP_FUNCS
#define mza_otid_t_SUPP_FUNCS
void mza_otid_t__free( mza_otid_t* val, ysmff ffunc);
void mza_otid_t__copy( mza_otid_t* dest, mza_otid_t* src, ysmaf afunc);
#endif /* mza_otid_t_SUPP_FUNCS */

#ifndef mza_transx_DECLARED
#define mza_transx_DECLARED
typedef struct mza_transx mza_transx;
#endif /* mza_transx_DECLARED */

#ifndef mza_transx_DEFINED
#define mza_transx_DEFINED
struct mza_transx
{
  mza_otid_t XID;
  YCIDL_sequence_ub2 mzaXactStatus;
};
yotk* mza_transx__getTC(void);
#ifndef YCTC_mza_transx
#define YCTC_mza_transx   (mza_transx__getTC())
#endif
#endif /* mza_transx_DEFINED */

#ifndef mza_transx_SUPP_FUNCS
#define mza_transx_SUPP_FUNCS
void mza_transx__free( mza_transx* val, ysmff ffunc);
void mza_transx__copy( mza_transx* dest, mza_transx* src, ysmaf afunc);
#endif /* mza_transx_SUPP_FUNCS */

#ifndef mkd_assetCookieMaxlen_DECLARED
#define mkd_assetCookieMaxlen_DECLARED
#define mkd_assetCookieMaxlen ((sb2) 128)
#endif /* mkd_assetCookieMaxlen_DECLARED */

#ifndef mkd_assetCookie_DECLARED
#define mkd_assetCookie_DECLARED
typedef char* mkd_assetCookie;
yotk* mkd_assetCookie__getTC(void);
#ifndef YCTC_mkd_assetCookie
#define YCTC_mkd_assetCookie   (mkd_assetCookie__getTC())
#endif
#endif /* mkd_assetCookie_DECLARED */

#ifndef mkd_assetCookie_SUPP_FUNCS
#define mkd_assetCookie_SUPP_FUNCS
#endif /* mkd_assetCookie_SUPP_FUNCS */

#ifndef mkd_assetCookieList_DECLARED
#define mkd_assetCookieList_DECLARED
typedef YCIDL_sequence_string mkd_assetCookieList;
yotk* mkd_assetCookieList__getTC(void);
#ifndef YCTC_mkd_assetCookieList
#define YCTC_mkd_assetCookieList   (mkd_assetCookieList__getTC())
#endif
#endif /* mkd_assetCookieList_DECLARED */

#ifndef mkd_assetCookieList_SUPP_FUNCS
#define mkd_assetCookieList_SUPP_FUNCS
void mkd_assetCookieList__free( mkd_assetCookieList* val, ysmff ffunc);
void mkd_assetCookieList__copy( mkd_assetCookieList* dest, 
  mkd_assetCookieList* src, ysmaf afunc);
#endif /* mkd_assetCookieList_SUPP_FUNCS */

#ifndef mkd_systemTime_DECLARED
#define mkd_systemTime_DECLARED
typedef sb4 mkd_systemTime;
yotk* mkd_systemTime__getTC(void);
#ifndef YCTC_mkd_systemTime
#define YCTC_mkd_systemTime   (mkd_systemTime__getTC())
#endif
#endif /* mkd_systemTime_DECLARED */

#ifndef mkd_systemTime_SUPP_FUNCS
#define mkd_systemTime_SUPP_FUNCS
#endif /* mkd_systemTime_SUPP_FUNCS */

#ifndef mkd_segCapMask_DECLARED
#define mkd_segCapMask_DECLARED
typedef ub4 mkd_segCapMask;
yotk* mkd_segCapMask__getTC(void);
#ifndef YCTC_mkd_segCapMask
#define YCTC_mkd_segCapMask   (mkd_segCapMask__getTC())
#endif
#endif /* mkd_segCapMask_DECLARED */

#ifndef mkd_segCapMask_SUPP_FUNCS
#define mkd_segCapMask_SUPP_FUNCS
#endif /* mkd_segCapMask_SUPP_FUNCS */

#ifndef mkd_segCapVideo_DECLARED
#define mkd_segCapVideo_DECLARED
#define mkd_segCapVideo ((mkd_segCapMask) 1)
#endif /* mkd_segCapVideo_DECLARED */

#ifndef mkd_segCapVCBR_DECLARED
#define mkd_segCapVCBR_DECLARED
#define mkd_segCapVCBR ((mkd_segCapMask) 2)
#endif /* mkd_segCapVCBR_DECLARED */

#ifndef mkd_segCapVSeek_DECLARED
#define mkd_segCapVSeek_DECLARED
#define mkd_segCapVSeek ((mkd_segCapMask) 4)
#endif /* mkd_segCapVSeek_DECLARED */

#ifndef mkd_segCapVScan_DECLARED
#define mkd_segCapVScan_DECLARED
#define mkd_segCapVScan ((mkd_segCapMask) 8)
#endif /* mkd_segCapVScan_DECLARED */

#ifndef mkd_segCapAudio_DECLARED
#define mkd_segCapAudio_DECLARED
#define mkd_segCapAudio ((mkd_segCapMask) 65536)
#endif /* mkd_segCapAudio_DECLARED */

#ifndef mkd_segCapACBR_DECLARED
#define mkd_segCapACBR_DECLARED
#define mkd_segCapACBR ((mkd_segCapMask) 131072)
#endif /* mkd_segCapACBR_DECLARED */

#ifndef mkd_segCapASeek_DECLARED
#define mkd_segCapASeek_DECLARED
#define mkd_segCapASeek ((mkd_segCapMask) 262144)
#endif /* mkd_segCapASeek_DECLARED */

#ifndef mkd_segCapAScan_DECLARED
#define mkd_segCapAScan_DECLARED
#define mkd_segCapAScan ((mkd_segCapMask) 524288)
#endif /* mkd_segCapAScan_DECLARED */

#ifndef mkd_contStatus_DECLARED
#define mkd_contStatus_DECLARED
typedef ub4 mkd_contStatus;
yotk* mkd_contStatus__getTC(void);
#ifndef YCTC_mkd_contStatus
#define YCTC_mkd_contStatus   (mkd_contStatus__getTC())
#endif
#endif /* mkd_contStatus_DECLARED */

#ifndef mkd_contStatus_DEFINED
#define mkd_contStatus_DEFINED
#define mkd_contStatusDisk ((mkd_contStatus) 0)
#define mkd_contStatusTape ((mkd_contStatus) 1)
#define mkd_contStatusFeed ((mkd_contStatus) 2)
#define mkd_contStatusRolling ((mkd_contStatus) 3)
#define mkd_contStatusUnavailable ((mkd_contStatus) 4)
#endif /* mkd_contStatus_DEFINED */

#ifndef mkd_contStatus_SUPP_FUNCS
#define mkd_contStatus_SUPP_FUNCS
void mkd_contStatus__free( mkd_contStatus* val, ysmff ffunc);
void mkd_contStatus__copy( mkd_contStatus* dest, mkd_contStatus* src, ysmaf 
  afunc);
#endif /* mkd_contStatus_SUPP_FUNCS */

#ifndef mkd_compFormat_DECLARED
#define mkd_compFormat_DECLARED
typedef ub4 mkd_compFormat;
yotk* mkd_compFormat__getTC(void);
#ifndef YCTC_mkd_compFormat
#define YCTC_mkd_compFormat   (mkd_compFormat__getTC())
#endif
#endif /* mkd_compFormat_DECLARED */

#ifndef mkd_compFormat_SUPP_FUNCS
#define mkd_compFormat_SUPP_FUNCS
#endif /* mkd_compFormat_SUPP_FUNCS */

#ifndef mkd_compFormatError_DECLARED
#define mkd_compFormatError_DECLARED
#define mkd_compFormatError ((mkd_compFormat) 0)
#endif /* mkd_compFormatError_DECLARED */

#ifndef mkd_compFormatMpeg1_DECLARED
#define mkd_compFormatMpeg1_DECLARED
#define mkd_compFormatMpeg1 ((mkd_compFormat) 1)
#endif /* mkd_compFormatMpeg1_DECLARED */

#ifndef mkd_compFormatMpeg2_DECLARED
#define mkd_compFormatMpeg2_DECLARED
#define mkd_compFormatMpeg2 ((mkd_compFormat) 4)
#endif /* mkd_compFormatMpeg2_DECLARED */

#ifndef mkd_compFormatOrca_DECLARED
#define mkd_compFormatOrca_DECLARED
#define mkd_compFormatOrca ((mkd_compFormat) 8)
#endif /* mkd_compFormatOrca_DECLARED */

#ifndef mkd_compFormatRawKey_DECLARED
#define mkd_compFormatRawKey_DECLARED
#define mkd_compFormatRawKey ((mkd_compFormat) 1024)
#endif /* mkd_compFormatRawKey_DECLARED */

#ifndef mkd_compFormatSegWHdr_DECLARED
#define mkd_compFormatSegWHdr_DECLARED
#define mkd_compFormatSegWHdr ((mkd_compFormat) 8192)
#endif /* mkd_compFormatSegWHdr_DECLARED */

#ifndef mkd_compFormatSegWoHdr_DECLARED
#define mkd_compFormatSegWoHdr_DECLARED
#define mkd_compFormatSegWoHdr ((mkd_compFormat) 16384)
#endif /* mkd_compFormatSegWoHdr_DECLARED */

#ifndef mkd_compFormatDsmcc_DECLARED
#define mkd_compFormatDsmcc_DECLARED
#define mkd_compFormatDsmcc ((mkd_compFormat) 32768)
#endif /* mkd_compFormatDsmcc_DECLARED */

#ifndef mkd_prohib_DECLARED
#define mkd_prohib_DECLARED
typedef ub4 mkd_prohib;
yotk* mkd_prohib__getTC(void);
#ifndef YCTC_mkd_prohib
#define YCTC_mkd_prohib   (mkd_prohib__getTC())
#endif
#endif /* mkd_prohib_DECLARED */

#ifndef mkd_prohib_SUPP_FUNCS
#define mkd_prohib_SUPP_FUNCS
#endif /* mkd_prohib_SUPP_FUNCS */

#ifndef mkd_prohibError_DECLARED
#define mkd_prohibError_DECLARED
#define mkd_prohibError ((mkd_prohib) 2147483648)
#endif /* mkd_prohibError_DECLARED */

#ifndef mkd_prohibPause_DECLARED
#define mkd_prohibPause_DECLARED
#define mkd_prohibPause ((mkd_prohib) 1)
#endif /* mkd_prohibPause_DECLARED */

#ifndef mkd_prohibStop_DECLARED
#define mkd_prohibStop_DECLARED
#define mkd_prohibStop ((mkd_prohib) 2)
#endif /* mkd_prohibStop_DECLARED */

#ifndef mkd_prohibBlindFF_DECLARED
#define mkd_prohibBlindFF_DECLARED
#define mkd_prohibBlindFF ((mkd_prohib) 4)
#endif /* mkd_prohibBlindFF_DECLARED */

#ifndef mkd_prohibBlindRW_DECLARED
#define mkd_prohibBlindRW_DECLARED
#define mkd_prohibBlindRW ((mkd_prohib) 8)
#endif /* mkd_prohibBlindRW_DECLARED */

#ifndef mkd_prohibVisualFF_DECLARED
#define mkd_prohibVisualFF_DECLARED
#define mkd_prohibVisualFF ((mkd_prohib) 16)
#endif /* mkd_prohibVisualFF_DECLARED */

#ifndef mkd_prohibVisualRW_DECLARED
#define mkd_prohibVisualRW_DECLARED
#define mkd_prohibVisualRW ((mkd_prohib) 32)
#endif /* mkd_prohibVisualRW_DECLARED */

#ifndef mkd_prohibFrameAdv_DECLARED
#define mkd_prohibFrameAdv_DECLARED
#define mkd_prohibFrameAdv ((mkd_prohib) 64)
#endif /* mkd_prohibFrameAdv_DECLARED */

#ifndef mkd_prohibFrameRew_DECLARED
#define mkd_prohibFrameRew_DECLARED
#define mkd_prohibFrameRew ((mkd_prohib) 128)
#endif /* mkd_prohibFrameRew_DECLARED */

#ifndef mkd_posType_DECLARED
#define mkd_posType_DECLARED
typedef ub4 mkd_posType;
yotk* mkd_posType__getTC(void);
#ifndef YCTC_mkd_posType
#define YCTC_mkd_posType   (mkd_posType__getTC())
#endif
#endif /* mkd_posType_DECLARED */

#ifndef mkd_posType_DEFINED
#define mkd_posType_DEFINED
#define mkd_posTypeBeginning ((mkd_posType) 0)
#define mkd_posTypeCurrent ((mkd_posType) 1)
#define mkd_posTypeEnd ((mkd_posType) 2)
#define mkd_posTypeByte ((mkd_posType) 3)
#define mkd_posTypeTime ((mkd_posType) 4)
#define mkd_posTypeMillisecs ((mkd_posType) 5)
#define mkd_posTypeMpegSCR ((mkd_posType) 6)
#define mkd_posTypeMpegPCR ((mkd_posType) 7)
#define mkd_posTypeBlock ((mkd_posType) 8)
#define mkd_posTypeDsmcc ((mkd_posType) 9)
#define mkd_posTypeContFeed ((mkd_posType) 10)
#define mkd_posTypeUnformed ((mkd_posType) 11)
#endif /* mkd_posType_DEFINED */

#ifndef mkd_posType_SUPP_FUNCS
#define mkd_posType_SUPP_FUNCS
void mkd_posType__free( mkd_posType* val, ysmff ffunc);
void mkd_posType__copy( mkd_posType* dest, mkd_posType* src, ysmaf afunc);
#endif /* mkd_posType_SUPP_FUNCS */

#ifndef mkd_posByte_DECLARED
#define mkd_posByte_DECLARED
typedef struct mkd_posByte mkd_posByte;
#endif /* mkd_posByte_DECLARED */

#ifndef mkd_posByte_DEFINED
#define mkd_posByte_DEFINED
struct mkd_posByte
{
  sysb8 mkd_posByteOff;
};
yotk* mkd_posByte__getTC(void);
#ifndef YCTC_mkd_posByte
#define YCTC_mkd_posByte   (mkd_posByte__getTC())
#endif
#endif /* mkd_posByte_DEFINED */

#ifndef mkd_posByte_SUPP_FUNCS
#define mkd_posByte_SUPP_FUNCS
void mkd_posByte__free( mkd_posByte* val, ysmff ffunc);
void mkd_posByte__copy( mkd_posByte* dest, mkd_posByte* src, ysmaf afunc);
#endif /* mkd_posByte_SUPP_FUNCS */

#ifndef mkd_posTime_DECLARED
#define mkd_posTime_DECLARED
typedef struct mkd_posTime mkd_posTime;
#endif /* mkd_posTime_DECLARED */

#ifndef mkd_posTime_DEFINED
#define mkd_posTime_DEFINED
struct mkd_posTime
{
  ub4 mkd_posTimeHour;
  ub1 mkd_posTimeMinute;
  ub1 mkd_posTimeSecond;
  ub1 mkd_posTimeHundredth;
};
yotk* mkd_posTime__getTC(void);
#ifndef YCTC_mkd_posTime
#define YCTC_mkd_posTime   (mkd_posTime__getTC())
#endif
#endif /* mkd_posTime_DEFINED */

#ifndef mkd_posTime_SUPP_FUNCS
#define mkd_posTime_SUPP_FUNCS
void mkd_posTime__free( mkd_posTime* val, ysmff ffunc);
void mkd_posTime__copy( mkd_posTime* dest, mkd_posTime* src, ysmaf afunc);
#endif /* mkd_posTime_SUPP_FUNCS */

#ifndef mkd_posBlock_DECLARED
#define mkd_posBlock_DECLARED
typedef ub4 mkd_posBlock;
yotk* mkd_posBlock__getTC(void);
#ifndef YCTC_mkd_posBlock
#define YCTC_mkd_posBlock   (mkd_posBlock__getTC())
#endif
#endif /* mkd_posBlock_DECLARED */

#ifndef mkd_posBlock_SUPP_FUNCS
#define mkd_posBlock_SUPP_FUNCS
#endif /* mkd_posBlock_SUPP_FUNCS */

#ifndef mkd_posMs_DECLARED
#define mkd_posMs_DECLARED
typedef ub4 mkd_posMs;
yotk* mkd_posMs__getTC(void);
#ifndef YCTC_mkd_posMs
#define YCTC_mkd_posMs   (mkd_posMs__getTC())
#endif
#endif /* mkd_posMs_DECLARED */

#ifndef mkd_posMs_SUPP_FUNCS
#define mkd_posMs_SUPP_FUNCS
#endif /* mkd_posMs_SUPP_FUNCS */

#ifndef mkd_posSCR_DECLARED
#define mkd_posSCR_DECLARED
typedef sysb8 mkd_posSCR;
yotk* mkd_posSCR__getTC(void);
#ifndef YCTC_mkd_posSCR
#define YCTC_mkd_posSCR   (mkd_posSCR__getTC())
#endif
#endif /* mkd_posSCR_DECLARED */

#ifndef mkd_posSCR_SUPP_FUNCS
#define mkd_posSCR_SUPP_FUNCS
#endif /* mkd_posSCR_SUPP_FUNCS */

#ifndef mkd_posPCR_DECLARED
#define mkd_posPCR_DECLARED
typedef sysb8 mkd_posPCR;
yotk* mkd_posPCR__getTC(void);
#ifndef YCTC_mkd_posPCR
#define YCTC_mkd_posPCR   (mkd_posPCR__getTC())
#endif
#endif /* mkd_posPCR_DECLARED */

#ifndef mkd_posPCR_SUPP_FUNCS
#define mkd_posPCR_SUPP_FUNCS
#endif /* mkd_posPCR_SUPP_FUNCS */

#ifndef mkd_pos_DECLARED
#define mkd_pos_DECLARED
typedef struct mkd_pos mkd_pos;
#endif /* mkd_pos_DECLARED */

#ifndef mkd_pos_DEFINED
#define mkd_pos_DEFINED
struct mkd_pos
{
  mkd_posType _d;
  union
  {
    mkd_posTime mkd_posBegin;
    mkd_posTime mkd_posCur;
    mkd_posTime mkd_posEnd;
    mkd_posByte mkd_posBytePos;
    mkd_posTime mkd_posTimePos;
    mkd_posMs mkd_posMsPos;
    mkd_posSCR mkd_posSCRPos;
    mkd_posPCR mkd_posPCRPos;
    mkd_posBlock mkd_posBlockPos;
    mkd_posBlock mkd_posDsmcc;
    mkd_posTime mkd_posFeed;
    mkd_posTime mkd_posNoWay;
  } _u;
};
yotk* mkd_pos__getTC(void);
#ifndef YCTC_mkd_pos
#define YCTC_mkd_pos   (mkd_pos__getTC())
#endif
#endif /* mkd_pos_DEFINED */

#ifndef mkd_pos_SUPP_FUNCS
#define mkd_pos_SUPP_FUNCS
void mkd_pos__free( mkd_pos* val, ysmff ffunc);
void mkd_pos__copy( mkd_pos* dest, mkd_pos* src, ysmaf afunc);
#endif /* mkd_pos_SUPP_FUNCS */

#ifndef mkd_segMask_DECLARED
#define mkd_segMask_DECLARED
typedef ub4 mkd_segMask;
yotk* mkd_segMask__getTC(void);
#ifndef YCTC_mkd_segMask
#define YCTC_mkd_segMask   (mkd_segMask__getTC())
#endif
#endif /* mkd_segMask_DECLARED */

#ifndef mkd_segMask_SUPP_FUNCS
#define mkd_segMask_SUPP_FUNCS
#endif /* mkd_segMask_SUPP_FUNCS */

#ifndef mkd_segment_DECLARED
#define mkd_segment_DECLARED
typedef struct mkd_segment mkd_segment;
#endif /* mkd_segment_DECLARED */

#ifndef mkd_segment_DEFINED
#define mkd_segment_DEFINED
struct mkd_segment
{
  char* mkd_segFile;
  mkd_pos mkd_segStart;
  mkd_pos mkd_segEnd;
  mkd_segMask mkd_segFlags;
  mkd_prohib mkd_segProhib;
};
yotk* mkd_segment__getTC(void);
#ifndef YCTC_mkd_segment
#define YCTC_mkd_segment   (mkd_segment__getTC())
#endif
#endif /* mkd_segment_DEFINED */

#ifndef mkd_segment_SUPP_FUNCS
#define mkd_segment_SUPP_FUNCS
void mkd_segment__free( mkd_segment* val, ysmff ffunc);
void mkd_segment__copy( mkd_segment* dest, mkd_segment* src, ysmaf afunc);
#endif /* mkd_segment_SUPP_FUNCS */

#ifndef mkd_segmentList_DECLARED
#define mkd_segmentList_DECLARED
typedef YCIDL_sequence_mkd_segment mkd_segmentList;
yotk* mkd_segmentList__getTC(void);
#ifndef YCTC_mkd_segmentList
#define YCTC_mkd_segmentList   (mkd_segmentList__getTC())
#endif
#endif /* mkd_segmentList_DECLARED */

#ifndef mkd_segmentList_SUPP_FUNCS
#define mkd_segmentList_SUPP_FUNCS
void mkd_segmentList__free( mkd_segmentList* val, ysmff ffunc);
void mkd_segmentList__copy( mkd_segmentList* dest, mkd_segmentList* src, 
  ysmaf afunc);
#endif /* mkd_segmentList_SUPP_FUNCS */

#ifndef mkd_segInfo_DECLARED
#define mkd_segInfo_DECLARED
typedef struct mkd_segInfo mkd_segInfo;
#endif /* mkd_segInfo_DECLARED */

#ifndef mkd_segInfo_DEFINED
#define mkd_segInfo_DEFINED
struct mkd_segInfo
{
  mkd_segment mkd_segInfoSeg;
  char* mkd_segInfoType;
  char* mkd_segTitle;
  mkd_systemTime mkd_segCreateTime;
  ub4 mkd_segBitrate;
  sb4 mkd_segPresRate;
  mkd_compFormat mkd_segCmpFmt;
  mkd_segCapMask mkd_segCapabilities;
  ub4 mkd_segMilliseconds;
  sysb8 mkd_segByteLength;
  ub2 mkd_segFrameHeight;
  ub2 mkd_segFrameWidth;
  sb4 mkd_segAspectRatio;
  ub4 mkd_segFrameRate;
  sysb8 mkd_segInfoStartT;
  sysb8 mkd_segInfoEndT;
  mkd_contStatus mkd_segInfoCStat;
  mkd_prohib mkd_segProhibitions;
};
yotk* mkd_segInfo__getTC(void);
#ifndef YCTC_mkd_segInfo
#define YCTC_mkd_segInfo   (mkd_segInfo__getTC())
#endif
#endif /* mkd_segInfo_DEFINED */

#ifndef mkd_segInfo_SUPP_FUNCS
#define mkd_segInfo_SUPP_FUNCS
void mkd_segInfo__free( mkd_segInfo* val, ysmff ffunc);
void mkd_segInfo__copy( mkd_segInfo* dest, mkd_segInfo* src, ysmaf afunc);
#endif /* mkd_segInfo_SUPP_FUNCS */

#ifndef mkd_segInfoList_DECLARED
#define mkd_segInfoList_DECLARED
typedef YCIDL_sequence_mkd_segInfo mkd_segInfoList;
yotk* mkd_segInfoList__getTC(void);
#ifndef YCTC_mkd_segInfoList
#define YCTC_mkd_segInfoList   (mkd_segInfoList__getTC())
#endif
#endif /* mkd_segInfoList_DECLARED */

#ifndef mkd_segInfoList_SUPP_FUNCS
#define mkd_segInfoList_SUPP_FUNCS
void mkd_segInfoList__free( mkd_segInfoList* val, ysmff ffunc);
void mkd_segInfoList__copy( mkd_segInfoList* dest, mkd_segInfoList* src, 
  ysmaf afunc);
#endif /* mkd_segInfoList_SUPP_FUNCS */

#ifndef mkd_formatCode_DECLARED
#define mkd_formatCode_DECLARED
typedef char* mkd_formatCode;
yotk* mkd_formatCode__getTC(void);
#ifndef YCTC_mkd_formatCode
#define YCTC_mkd_formatCode   (mkd_formatCode__getTC())
#endif
#endif /* mkd_formatCode_DECLARED */

#ifndef mkd_formatCode_SUPP_FUNCS
#define mkd_formatCode_SUPP_FUNCS
#endif /* mkd_formatCode_SUPP_FUNCS */

#ifndef mkd_containerUnknown_DECLARED
#define mkd_containerUnknown_DECLARED
#define mkd_containerUnknown ((mkd_formatCode) "cunk")
#endif /* mkd_containerUnknown_DECLARED */

#ifndef mkd_containerMpeg1SS_DECLARED
#define mkd_containerMpeg1SS_DECLARED
#define mkd_containerMpeg1SS ((mkd_formatCode) "cm1s")
#endif /* mkd_containerMpeg1SS_DECLARED */

#ifndef mkd_containerMpeg2T_DECLARED
#define mkd_containerMpeg2T_DECLARED
#define mkd_containerMpeg2T ((mkd_formatCode) "cm2t")
#endif /* mkd_containerMpeg2T_DECLARED */

#ifndef mkd_containerRKF_DECLARED
#define mkd_containerRKF_DECLARED
#define mkd_containerRKF ((mkd_formatCode) "crkf")
#endif /* mkd_containerRKF_DECLARED */

#ifndef mkd_containerAVI_DECLARED
#define mkd_containerAVI_DECLARED
#define mkd_containerAVI ((mkd_formatCode) "cavi")
#endif /* mkd_containerAVI_DECLARED */

#ifndef mkd_containerOSF_DECLARED
#define mkd_containerOSF_DECLARED
#define mkd_containerOSF ((mkd_formatCode) "cosf")
#endif /* mkd_containerOSF_DECLARED */

#ifndef mkd_videoNone_DECLARED
#define mkd_videoNone_DECLARED
#define mkd_videoNone ((mkd_formatCode) "vnon")
#endif /* mkd_videoNone_DECLARED */

#ifndef mkd_videoUnknown_DECLARED
#define mkd_videoUnknown_DECLARED
#define mkd_videoUnknown ((mkd_formatCode) "vunk")
#endif /* mkd_videoUnknown_DECLARED */

#ifndef mkd_videoMpeg1_DECLARED
#define mkd_videoMpeg1_DECLARED
#define mkd_videoMpeg1 ((mkd_formatCode) "vmp1")
#endif /* mkd_videoMpeg1_DECLARED */

#ifndef mkd_videoMpeg2_DECLARED
#define mkd_videoMpeg2_DECLARED
#define mkd_videoMpeg2 ((mkd_formatCode) "vmp2")
#endif /* mkd_videoMpeg2_DECLARED */

#ifndef mkd_videoAviCVID_DECLARED
#define mkd_videoAviCVID_DECLARED
#define mkd_videoAviCVID ((mkd_formatCode) "avi1")
#endif /* mkd_videoAviCVID_DECLARED */

#ifndef mkd_videoAviIV32_DECLARED
#define mkd_videoAviIV32_DECLARED
#define mkd_videoAviIV32 ((mkd_formatCode) "avi2")
#endif /* mkd_videoAviIV32_DECLARED */

#ifndef mkd_videoAviUCOD_DECLARED
#define mkd_videoAviUCOD_DECLARED
#define mkd_videoAviUCOD ((mkd_formatCode) "avi3")
#endif /* mkd_videoAviUCOD_DECLARED */

#ifndef mkd_audioNone_DECLARED
#define mkd_audioNone_DECLARED
#define mkd_audioNone ((mkd_formatCode) "anon")
#endif /* mkd_audioNone_DECLARED */

#ifndef mkd_audioUnknown_DECLARED
#define mkd_audioUnknown_DECLARED
#define mkd_audioUnknown ((mkd_formatCode) "aunk")
#endif /* mkd_audioUnknown_DECLARED */

#ifndef mkd_audioMpeg1_DECLARED
#define mkd_audioMpeg1_DECLARED
#define mkd_audioMpeg1 ((mkd_formatCode) "amp1")
#endif /* mkd_audioMpeg1_DECLARED */

#ifndef mkd_audioMpeg2_DECLARED
#define mkd_audioMpeg2_DECLARED
#define mkd_audioMpeg2 ((mkd_formatCode) "amp2")
#endif /* mkd_audioMpeg2_DECLARED */

#ifndef mkd_audioWavePCM_DECLARED
#define mkd_audioWavePCM_DECLARED
#define mkd_audioWavePCM ((mkd_formatCode) "awv1")
#endif /* mkd_audioWavePCM_DECLARED */

#ifndef mkd_audioWaveADPCM_DECLARED
#define mkd_audioWaveADPCM_DECLARED
#define mkd_audioWaveADPCM ((mkd_formatCode) "awv2")
#endif /* mkd_audioWaveADPCM_DECLARED */

#ifndef mkd_audioWaveALAW_DECLARED
#define mkd_audioWaveALAW_DECLARED
#define mkd_audioWaveALAW ((mkd_formatCode) "awv3")
#endif /* mkd_audioWaveALAW_DECLARED */

#ifndef mkd_audioWaveMULAW_DECLARED
#define mkd_audioWaveMULAW_DECLARED
#define mkd_audioWaveMULAW ((mkd_formatCode) "awv4")
#endif /* mkd_audioWaveMULAW_DECLARED */

#ifndef mkd_contFormat_DECLARED
#define mkd_contFormat_DECLARED
typedef struct mkd_contFormat mkd_contFormat;
#endif /* mkd_contFormat_DECLARED */

#ifndef mkd_contFormat_DEFINED
#define mkd_contFormat_DEFINED
struct mkd_contFormat
{
  char* creator;
  mkd_formatCode container;
  mkd_formatCode video;
  mkd_formatCode audio;
  ub2 frameHeight;
  ub2 frameWidth;
  sb4 pelAspectRatio;
  ub4 frameRate;
};
yotk* mkd_contFormat__getTC(void);
#ifndef YCTC_mkd_contFormat
#define YCTC_mkd_contFormat   (mkd_contFormat__getTC())
#endif
#endif /* mkd_contFormat_DEFINED */

#ifndef mkd_contFormat_SUPP_FUNCS
#define mkd_contFormat_SUPP_FUNCS
void mkd_contFormat__free( mkd_contFormat* val, ysmff ffunc);
void mkd_contFormat__copy( mkd_contFormat* dest, mkd_contFormat* src, ysmaf 
  afunc);
#endif /* mkd_contFormat_SUPP_FUNCS */

#ifndef mkcf_cause_DECLARED
#define mkcf_cause_DECLARED
typedef ub4 mkcf_cause;
yotk* mkcf_cause__getTC(void);
#ifndef YCTC_mkcf_cause
#define YCTC_mkcf_cause   (mkcf_cause__getTC())
#endif
#endif /* mkcf_cause_DECLARED */

#ifndef mkcf_cause_DEFINED
#define mkcf_cause_DEFINED
#define mkcf_causeBadParam ((mkcf_cause) 0)
#define mkcf_causeEvilServer ((mkcf_cause) 1)
#define mkcf_causeDiskError ((mkcf_cause) 2)
#endif /* mkcf_cause_DEFINED */

#ifndef mkcf_cause_SUPP_FUNCS
#define mkcf_cause_SUPP_FUNCS
void mkcf_cause__free( mkcf_cause* val, ysmff ffunc);
void mkcf_cause__copy( mkcf_cause* dest, mkcf_cause* src, ysmaf afunc);
#endif /* mkcf_cause_SUPP_FUNCS */

#ifndef MKCF_EX_BOMB_DECLARED
#define MKCF_EX_BOMB_DECLARED
CONST ysid* mkcf_bomb__getId(void);
#ifndef MKCF_EX_BOMB
#define MKCF_EX_BOMB   (mkcf_bomb__getId())
#endif
#endif /* MKCF_EX_BOMB_DECLARED */

#ifndef mkcf_bomb_DECLARED
#define mkcf_bomb_DECLARED
typedef struct mkcf_bomb mkcf_bomb;
#endif /* mkcf_bomb_DECLARED */

#ifndef mkcf_bomb_DEFINED
#define mkcf_bomb_DEFINED
struct mkcf_bomb
{
  mkcf_cause failType;
  char* detail;
};
yotk* mkcf_bomb__getTC(void);
#ifndef YCTC_mkcf_bomb
#define YCTC_mkcf_bomb   (mkcf_bomb__getTC())
#endif
#endif /* mkcf_bomb_DEFINED */

#ifndef mkcf_bomb_SUPP_FUNCS
#define mkcf_bomb_SUPP_FUNCS
void mkcf_bomb__free( mkcf_bomb* val, ysmff ffunc);
void mkcf_bomb__copy( mkcf_bomb* dest, mkcf_bomb* src, ysmaf afunc);
#endif /* mkcf_bomb_SUPP_FUNCS */

#ifndef mkcf_format_DECLARED
#define mkcf_format_DECLARED
typedef ub4 mkcf_format;
yotk* mkcf_format__getTC(void);
#ifndef YCTC_mkcf_format
#define YCTC_mkcf_format   (mkcf_format__getTC())
#endif
#endif /* mkcf_format_DECLARED */

#ifndef mkcf_format_DEFINED
#define mkcf_format_DEFINED
#define mkcf_formatMpeg1SS ((mkcf_format) 0)
#define mkcf_formatMpeg2Trans ((mkcf_format) 1)
#define mkcf_formatRKF ((mkcf_format) 2)
#endif /* mkcf_format_DEFINED */

#ifndef mkcf_format_SUPP_FUNCS
#define mkcf_format_SUPP_FUNCS
void mkcf_format__free( mkcf_format* val, ysmff ffunc);
void mkcf_format__copy( mkcf_format* dest, mkcf_format* src, ysmaf afunc);
#endif /* mkcf_format_SUPP_FUNCS */

#ifndef mkcf_vidCmp_DECLARED
#define mkcf_vidCmp_DECLARED
typedef ub4 mkcf_vidCmp;
yotk* mkcf_vidCmp__getTC(void);
#ifndef YCTC_mkcf_vidCmp
#define YCTC_mkcf_vidCmp   (mkcf_vidCmp__getTC())
#endif
#endif /* mkcf_vidCmp_DECLARED */

#ifndef mkcf_vidCmp_DEFINED
#define mkcf_vidCmp_DEFINED
#define mkcf_vidCmpNone ((mkcf_vidCmp) 0)
#define mkcf_vidCmpUnknown ((mkcf_vidCmp) 1)
#define mkcf_vidCmpMpeg1 ((mkcf_vidCmp) 2)
#define mkcf_vidCmpMpeg2 ((mkcf_vidCmp) 3)
#define mkcf_vidCmpAviCVID ((mkcf_vidCmp) 4)
#define mkcf_vidCmpAviIV32 ((mkcf_vidCmp) 5)
#define mkcf_vidCmpAviUCOD ((mkcf_vidCmp) 6)
#endif /* mkcf_vidCmp_DEFINED */

#ifndef mkcf_vidCmp_SUPP_FUNCS
#define mkcf_vidCmp_SUPP_FUNCS
void mkcf_vidCmp__free( mkcf_vidCmp* val, ysmff ffunc);
void mkcf_vidCmp__copy( mkcf_vidCmp* dest, mkcf_vidCmp* src, ysmaf afunc);
#endif /* mkcf_vidCmp_SUPP_FUNCS */

#ifndef mkcf_audCmp_DECLARED
#define mkcf_audCmp_DECLARED
typedef ub4 mkcf_audCmp;
yotk* mkcf_audCmp__getTC(void);
#ifndef YCTC_mkcf_audCmp
#define YCTC_mkcf_audCmp   (mkcf_audCmp__getTC())
#endif
#endif /* mkcf_audCmp_DECLARED */

#ifndef mkcf_audCmp_DEFINED
#define mkcf_audCmp_DEFINED
#define mkcf_audCmpNone ((mkcf_audCmp) 0)
#define mkcf_audCmpUnknown ((mkcf_audCmp) 1)
#define mkcf_audCmpMpeg1 ((mkcf_audCmp) 2)
#define mkcf_audCmpMpeg2 ((mkcf_audCmp) 3)
#define mkcf_audCmpWavePCM ((mkcf_audCmp) 4)
#define mkcf_audCmpWaveADPCM ((mkcf_audCmp) 5)
#define mkcf_audCmpWaveALAW ((mkcf_audCmp) 6)
#define mkcf_audCmpWaveMULAW ((mkcf_audCmp) 7)
#endif /* mkcf_audCmp_DEFINED */

#ifndef mkcf_audCmp_SUPP_FUNCS
#define mkcf_audCmp_SUPP_FUNCS
void mkcf_audCmp__free( mkcf_audCmp* val, ysmff ffunc);
void mkcf_audCmp__copy( mkcf_audCmp* dest, mkcf_audCmp* src, ysmaf afunc);
#endif /* mkcf_audCmp_SUPP_FUNCS */

#ifndef mkcf_vendor_DECLARED
#define mkcf_vendor_DECLARED
typedef ub4 mkcf_vendor;
yotk* mkcf_vendor__getTC(void);
#ifndef YCTC_mkcf_vendor
#define YCTC_mkcf_vendor   (mkcf_vendor__getTC())
#endif
#endif /* mkcf_vendor_DECLARED */

#ifndef mkcf_vendor_DEFINED
#define mkcf_vendor_DEFINED
#define mkcf_vendorPrepareOnly ((mkcf_vendor) 0)
#define mkcf_vendorFutureTelOne ((mkcf_vendor) 1)
#define mkcf_vendorOptivisionOne ((mkcf_vendor) 2)
#define mkcf_vendorBroadwayOne ((mkcf_vendor) 3)
#define mkcf_vendorOracleCodec ((mkcf_vendor) 4)
#define mkcf_vendorLucentG1 ((mkcf_vendor) 5)
#define mkcf_vendorLucentG3 ((mkcf_vendor) 6)
#endif /* mkcf_vendor_DEFINED */

#ifndef mkcf_vendor_SUPP_FUNCS
#define mkcf_vendor_SUPP_FUNCS
void mkcf_vendor__free( mkcf_vendor* val, ysmff ffunc);
void mkcf_vendor__copy( mkcf_vendor* dest, mkcf_vendor* src, ysmaf afunc);
#endif /* mkcf_vendor_SUPP_FUNCS */

#ifndef mkcf_m1sHdr_DECLARED
#define mkcf_m1sHdr_DECLARED
typedef struct mkcf_m1sHdr mkcf_m1sHdr;
#endif /* mkcf_m1sHdr_DECLARED */

#ifndef mkcf_m1sHdr_DEFINED
#define mkcf_m1sHdr_DEFINED
struct mkcf_m1sHdr
{
  YCIDL_sequence_ub1 seqHdr;
};
yotk* mkcf_m1sHdr__getTC(void);
#ifndef YCTC_mkcf_m1sHdr
#define YCTC_mkcf_m1sHdr   (mkcf_m1sHdr__getTC())
#endif
#endif /* mkcf_m1sHdr_DEFINED */

#ifndef mkcf_m1sHdr_SUPP_FUNCS
#define mkcf_m1sHdr_SUPP_FUNCS
void mkcf_m1sHdr__free( mkcf_m1sHdr* val, ysmff ffunc);
void mkcf_m1sHdr__copy( mkcf_m1sHdr* dest, mkcf_m1sHdr* src, ysmaf afunc);
#endif /* mkcf_m1sHdr_SUPP_FUNCS */

#ifndef mkcf_m2tHdr_DECLARED
#define mkcf_m2tHdr_DECLARED
typedef struct mkcf_m2tHdr mkcf_m2tHdr;
#endif /* mkcf_m2tHdr_DECLARED */

#ifndef mkcf_m2tHdr_DEFINED
#define mkcf_m2tHdr_DEFINED
struct mkcf_m2tHdr
{
  ub2 videoPid;
  ub2 audioPid;
  ub2 clockPid;
  ub1 videoStream;
  YCIDL_sequence_ub1 pat;
  YCIDL_sequence_ub1 pmt;
  YCIDL_sequence_ub1 seqHdr;
};
yotk* mkcf_m2tHdr__getTC(void);
#ifndef YCTC_mkcf_m2tHdr
#define YCTC_mkcf_m2tHdr   (mkcf_m2tHdr__getTC())
#endif
#endif /* mkcf_m2tHdr_DEFINED */

#ifndef mkcf_m2tHdr_SUPP_FUNCS
#define mkcf_m2tHdr_SUPP_FUNCS
void mkcf_m2tHdr__free( mkcf_m2tHdr* val, ysmff ffunc);
void mkcf_m2tHdr__copy( mkcf_m2tHdr* dest, mkcf_m2tHdr* src, ysmaf afunc);
#endif /* mkcf_m2tHdr_SUPP_FUNCS */

#ifndef mkcf_rkfHdr_DECLARED
#define mkcf_rkfHdr_DECLARED
typedef struct mkcf_rkfHdr mkcf_rkfHdr;
#endif /* mkcf_rkfHdr_DECLARED */

#ifndef mkcf_rkfHdr_DEFINED
#define mkcf_rkfHdr_DEFINED
struct mkcf_rkfHdr
{
  YCIDL_sequence_ub1 initData;
};
yotk* mkcf_rkfHdr__getTC(void);
#ifndef YCTC_mkcf_rkfHdr
#define YCTC_mkcf_rkfHdr   (mkcf_rkfHdr__getTC())
#endif
#endif /* mkcf_rkfHdr_DEFINED */

#ifndef mkcf_rkfHdr_SUPP_FUNCS
#define mkcf_rkfHdr_SUPP_FUNCS
void mkcf_rkfHdr__free( mkcf_rkfHdr* val, ysmff ffunc);
void mkcf_rkfHdr__copy( mkcf_rkfHdr* dest, mkcf_rkfHdr* src, ysmaf afunc);
#endif /* mkcf_rkfHdr_SUPP_FUNCS */

#ifndef mkcf_hdr_hdrcompData_DECLARED
#define mkcf_hdr_hdrcompData_DECLARED
typedef struct mkcf_hdr_hdrcompData mkcf_hdr_hdrcompData;
#endif /* mkcf_hdr_hdrcompData_DECLARED */

#ifndef mkcf_hdr_hdrcompData_DEFINED
#define mkcf_hdr_hdrcompData_DEFINED
struct mkcf_hdr_hdrcompData
{
  mkcf_format _d;
  union
  {
    mkcf_m1sHdr m1s;
    mkcf_m2tHdr m2t;
    mkcf_rkfHdr rkf;
  } _u;
};
yotk* mkcf_hdr_hdrcompData__getTC(void);
#ifndef YCTC_mkcf_hdr_hdrcompData
#define YCTC_mkcf_hdr_hdrcompData   (mkcf_hdr_hdrcompData__getTC())
#endif
#endif /* mkcf_hdr_hdrcompData_DEFINED */

#ifndef mkcf_hdr_hdrcompData_SUPP_FUNCS
#define mkcf_hdr_hdrcompData_SUPP_FUNCS
void mkcf_hdr_hdrcompData__free( mkcf_hdr_hdrcompData* val, ysmff ffunc);
void mkcf_hdr_hdrcompData__copy( mkcf_hdr_hdrcompData* dest, 
  mkcf_hdr_hdrcompData* src, ysmaf afunc);
#endif /* mkcf_hdr_hdrcompData_SUPP_FUNCS */

#ifndef mkcf_hdr_DECLARED
#define mkcf_hdr_DECLARED
typedef struct mkcf_hdr mkcf_hdr;
#endif /* mkcf_hdr_DECLARED */

#ifndef mkcf_hdr_DEFINED
#define mkcf_hdr_DEFINED
struct mkcf_hdr
{
  mkcf_vendor vend;
  mkcf_format fmt;
  mkcf_vidCmp vid;
  mkcf_audCmp aud;
  ub2 heightInPixels;
  ub2 widthInPixels;
  sb4 pelAspectRatio;
  ub4 frameRate;
  mkcf_hdr_hdrcompData compData;
};
yotk* mkcf_hdr__getTC(void);
#ifndef YCTC_mkcf_hdr
#define YCTC_mkcf_hdr   (mkcf_hdr__getTC())
#endif
#endif /* mkcf_hdr_DEFINED */

#ifndef mkcf_hdr_SUPP_FUNCS
#define mkcf_hdr_SUPP_FUNCS
void mkcf_hdr__free( mkcf_hdr* val, ysmff ffunc);
void mkcf_hdr__copy( mkcf_hdr* dest, mkcf_hdr* src, ysmaf afunc);
#endif /* mkcf_hdr_SUPP_FUNCS */

#ifndef mkcf_blobData_DECLARED
#define mkcf_blobData_DECLARED
typedef YCIDL_sequence_ub1 mkcf_blobData;
yotk* mkcf_blobData__getTC(void);
#ifndef YCTC_mkcf_blobData
#define YCTC_mkcf_blobData   (mkcf_blobData__getTC())
#endif
#endif /* mkcf_blobData_DECLARED */

#ifndef mkcf_blobData_SUPP_FUNCS
#define mkcf_blobData_SUPP_FUNCS
void mkcf_blobData__free( mkcf_blobData* val, ysmff ffunc);
void mkcf_blobData__copy( mkcf_blobData* dest, mkcf_blobData* src, ysmaf 
  afunc);
#endif /* mkcf_blobData_SUPP_FUNCS */


/* interface mkcf_blob declarations */
#ifndef mkcf_blob_DECLARED
#define mkcf_blob_DECLARED
typedef struct YCmkcf_blob* mkcf_blob;
yotk* mkcf_blob__getTC(void);
#ifndef YCTC_mkcf_blob
#define YCTC_mkcf_blob   (mkcf_blob__getTC())
#endif
#endif /* mkcf_blob_DECLARED */

#ifndef mkcf_blob_SUPP_FUNCS
#define mkcf_blob_SUPP_FUNCS
void mkcf_blob__free( mkcf_blob* val, ysmff ffunc);
void mkcf_blob__copy( mkcf_blob* dest, mkcf_blob* src, ysmaf afunc);
#endif /* mkcf_blob_SUPP_FUNCS */

CONST ysid* mkcf_blob__getId(void);
#ifndef mkcf_blob__id
#define mkcf_blob__id   (mkcf_blob__getId())
#endif

/* interface mkcf_feed declarations */
#ifndef mkcf_feed_DECLARED
#define mkcf_feed_DECLARED
typedef struct YCmkcf_feed* mkcf_feed;
yotk* mkcf_feed__getTC(void);
#ifndef YCTC_mkcf_feed
#define YCTC_mkcf_feed   (mkcf_feed__getTC())
#endif
#endif /* mkcf_feed_DECLARED */

#ifndef mkcf_feed_SUPP_FUNCS
#define mkcf_feed_SUPP_FUNCS
void mkcf_feed__free( mkcf_feed* val, ysmff ffunc);
void mkcf_feed__copy( mkcf_feed* dest, mkcf_feed* src, ysmaf afunc);
#endif /* mkcf_feed_SUPP_FUNCS */

CONST ysid* mkcf_feed__getId(void);
#ifndef mkcf_feed__id
#define mkcf_feed__id   (mkcf_feed__getId())
#endif
#ifndef mkcf_feed_frame_DECLARED
#define mkcf_feed_frame_DECLARED
typedef ub4 mkcf_feed_frame;
yotk* mkcf_feed_frame__getTC(void);
#ifndef YCTC_mkcf_feed_frame
#define YCTC_mkcf_feed_frame   (mkcf_feed_frame__getTC())
#endif
#endif /* mkcf_feed_frame_DECLARED */

#ifndef mkcf_feed_frame_DEFINED
#define mkcf_feed_frame_DEFINED
#define mkcf_feed_frameMpegI ((mkcf_feed_frame) 0)
#define mkcf_feed_frameMpegP ((mkcf_feed_frame) 1)
#define mkcf_feed_frameMpegB ((mkcf_feed_frame) 2)
#define mkcf_feed_frameRawKey ((mkcf_feed_frame) 3)
#define mkcf_feed_frameRawBias ((mkcf_feed_frame) 4)
#define mkcf_feed_frameRawAudio ((mkcf_feed_frame) 5)
#endif /* mkcf_feed_frame_DEFINED */

#ifndef mkcf_feed_frame_SUPP_FUNCS
#define mkcf_feed_frame_SUPP_FUNCS
void mkcf_feed_frame__free( mkcf_feed_frame* val, ysmff ffunc);
void mkcf_feed_frame__copy( mkcf_feed_frame* dest, mkcf_feed_frame* src, 
  ysmaf afunc);
#endif /* mkcf_feed_frame_SUPP_FUNCS */

#ifndef mkcf_feed_m1sTag_DECLARED
#define mkcf_feed_m1sTag_DECLARED
typedef struct mkcf_feed_m1sTag mkcf_feed_m1sTag;
#endif /* mkcf_feed_m1sTag_DECLARED */

#ifndef mkcf_feed_m1sTag_DEFINED
#define mkcf_feed_m1sTag_DEFINED
struct mkcf_feed_m1sTag
{
  ub1 videoStreamCode;
};
yotk* mkcf_feed_m1sTag__getTC(void);
#ifndef YCTC_mkcf_feed_m1sTag
#define YCTC_mkcf_feed_m1sTag   (mkcf_feed_m1sTag__getTC())
#endif
#endif /* mkcf_feed_m1sTag_DEFINED */

#ifndef mkcf_feed_m1sTag_SUPP_FUNCS
#define mkcf_feed_m1sTag_SUPP_FUNCS
void mkcf_feed_m1sTag__free( mkcf_feed_m1sTag* val, ysmff ffunc);
void mkcf_feed_m1sTag__copy( mkcf_feed_m1sTag* dest, mkcf_feed_m1sTag* src, 
  ysmaf afunc);
#endif /* mkcf_feed_m1sTag_SUPP_FUNCS */

#ifndef mkcf_feed_m2tTag_DECLARED
#define mkcf_feed_m2tTag_DECLARED
typedef struct mkcf_feed_m2tTag mkcf_feed_m2tTag;
#endif /* mkcf_feed_m2tTag_DECLARED */

#ifndef mkcf_feed_m2tTag_DEFINED
#define mkcf_feed_m2tTag_DEFINED
struct mkcf_feed_m2tTag
{
  ub1 continuityCounter;
  ub4 leadingZeros;
  ub4 trailingZeros;
  ub2 headerPesLength;
  ub2 trailerPesLength;
  ub2 nonVideoPackets;
  ub2 nullPackets;
};
yotk* mkcf_feed_m2tTag__getTC(void);
#ifndef YCTC_mkcf_feed_m2tTag
#define YCTC_mkcf_feed_m2tTag   (mkcf_feed_m2tTag__getTC())
#endif
#endif /* mkcf_feed_m2tTag_DEFINED */

#ifndef mkcf_feed_m2tTag_SUPP_FUNCS
#define mkcf_feed_m2tTag_SUPP_FUNCS
void mkcf_feed_m2tTag__free( mkcf_feed_m2tTag* val, ysmff ffunc);
void mkcf_feed_m2tTag__copy( mkcf_feed_m2tTag* dest, mkcf_feed_m2tTag* src, 
  ysmaf afunc);
#endif /* mkcf_feed_m2tTag_SUPP_FUNCS */

#ifndef mkcf_feed_rkfTag_DECLARED
#define mkcf_feed_rkfTag_DECLARED
typedef struct mkcf_feed_rkfTag mkcf_feed_rkfTag;
#endif /* mkcf_feed_rkfTag_DECLARED */

#ifndef mkcf_feed_rkfTag_DEFINED
#define mkcf_feed_rkfTag_DEFINED
struct mkcf_feed_rkfTag
{
  ub1 nothing;
};
yotk* mkcf_feed_rkfTag__getTC(void);
#ifndef YCTC_mkcf_feed_rkfTag
#define YCTC_mkcf_feed_rkfTag   (mkcf_feed_rkfTag__getTC())
#endif
#endif /* mkcf_feed_rkfTag_DEFINED */

#ifndef mkcf_feed_rkfTag_SUPP_FUNCS
#define mkcf_feed_rkfTag_SUPP_FUNCS
void mkcf_feed_rkfTag__free( mkcf_feed_rkfTag* val, ysmff ffunc);
void mkcf_feed_rkfTag__copy( mkcf_feed_rkfTag* dest, mkcf_feed_rkfTag* src, 
  ysmaf afunc);
#endif /* mkcf_feed_rkfTag_SUPP_FUNCS */

#ifndef mkcf_feed_tag_tagCompData_DECLARED
#define mkcf_feed_tag_tagCompData_DECLARED
typedef struct mkcf_feed_tag_tagCompData mkcf_feed_tag_tagCompData;
#endif /* mkcf_feed_tag_tagCompData_DECLARED */

#ifndef mkcf_feed_tag_tagCompData_DEFINED
#define mkcf_feed_tag_tagCompData_DEFINED
struct mkcf_feed_tag_tagCompData
{
  mkcf_format _d;
  union
  {
    mkcf_feed_m1sTag m1s;
    mkcf_feed_m2tTag m2t;
    mkcf_feed_rkfTag rkf;
  } _u;
};
yotk* mkcf_feed_tag_tagCompData__getTC(void);
#ifndef YCTC_mkcf_feed_tag_tagCompData
#define YCTC_mkcf_feed_tag_tagCompData   (mkcf_feed_tag_tagCompData__getTC() \
  )
#endif
#endif /* mkcf_feed_tag_tagCompData_DEFINED */

#ifndef mkcf_feed_tag_tagCompData_SUPP_FUNCS
#define mkcf_feed_tag_tagCompData_SUPP_FUNCS
void mkcf_feed_tag_tagCompData__free( mkcf_feed_tag_tagCompData* val, ysmff 
  ffunc);
void mkcf_feed_tag_tagCompData__copy( mkcf_feed_tag_tagCompData* dest, 
  mkcf_feed_tag_tagCompData* src, ysmaf afunc);
#endif /* mkcf_feed_tag_tagCompData_SUPP_FUNCS */

#ifndef mkcf_feed_tag_DECLARED
#define mkcf_feed_tag_DECLARED
typedef struct mkcf_feed_tag mkcf_feed_tag;
#endif /* mkcf_feed_tag_DECLARED */

#ifndef mkcf_feed_tag_DEFINED
#define mkcf_feed_tag_DEFINED
struct mkcf_feed_tag
{
  mkcf_feed_frame frameType;
  mkd_pos timestamp;
  ub4 byteOffsetHigh;
  ub4 byteOffsetLow;
  ub4 videoByteLength;
  mkcf_feed_tag_tagCompData compData;
};
yotk* mkcf_feed_tag__getTC(void);
#ifndef YCTC_mkcf_feed_tag
#define YCTC_mkcf_feed_tag   (mkcf_feed_tag__getTC())
#endif
#endif /* mkcf_feed_tag_DEFINED */

#ifndef mkcf_feed_tag_SUPP_FUNCS
#define mkcf_feed_tag_SUPP_FUNCS
void mkcf_feed_tag__free( mkcf_feed_tag* val, ysmff ffunc);
void mkcf_feed_tag__copy( mkcf_feed_tag* dest, mkcf_feed_tag* src, ysmaf 
  afunc);
#endif /* mkcf_feed_tag_SUPP_FUNCS */

#ifndef mkcf_feed_tagList_DECLARED
#define mkcf_feed_tagList_DECLARED
typedef YCIDL_sequence_mkcf_feed_tag mkcf_feed_tagList;
yotk* mkcf_feed_tagList__getTC(void);
#ifndef YCTC_mkcf_feed_tagList
#define YCTC_mkcf_feed_tagList   (mkcf_feed_tagList__getTC())
#endif
#endif /* mkcf_feed_tagList_DECLARED */

#ifndef mkcf_feed_tagList_SUPP_FUNCS
#define mkcf_feed_tagList_SUPP_FUNCS
void mkcf_feed_tagList__free( mkcf_feed_tagList* val, ysmff ffunc);
void mkcf_feed_tagList__copy( mkcf_feed_tagList* dest, mkcf_feed_tagList* 
  src, ysmaf afunc);
#endif /* mkcf_feed_tagList_SUPP_FUNCS */

#ifndef mkcf_feed_info_DECLARED
#define mkcf_feed_info_DECLARED
typedef struct mkcf_feed_info mkcf_feed_info;
#endif /* mkcf_feed_info_DECLARED */

#ifndef mkcf_feed_info_DEFINED
#define mkcf_feed_info_DEFINED
struct mkcf_feed_info
{
  char* rootName;
  mkcf_format compFmt;
  sysb8 totalBytesRecvd;
  sysb8 startTime;
  ub4 bitsPerSec;
  sysb8 durationInSecs;
};
yotk* mkcf_feed_info__getTC(void);
#ifndef YCTC_mkcf_feed_info
#define YCTC_mkcf_feed_info   (mkcf_feed_info__getTC())
#endif
#endif /* mkcf_feed_info_DEFINED */

#ifndef mkcf_feed_info_SUPP_FUNCS
#define mkcf_feed_info_SUPP_FUNCS
void mkcf_feed_info__free( mkcf_feed_info* val, ysmff ffunc);
void mkcf_feed_info__copy( mkcf_feed_info* dest, mkcf_feed_info* src, ysmaf 
  afunc);
#endif /* mkcf_feed_info_SUPP_FUNCS */


/* interface mkcf_fcty declarations */
#ifndef mkcf_fcty_DECLARED
#define mkcf_fcty_DECLARED
typedef struct YCmkcf_fcty* mkcf_fcty;
yotk* mkcf_fcty__getTC(void);
#ifndef YCTC_mkcf_fcty
#define YCTC_mkcf_fcty   (mkcf_fcty__getTC())
#endif
#endif /* mkcf_fcty_DECLARED */

#ifndef mkcf_fcty_SUPP_FUNCS
#define mkcf_fcty_SUPP_FUNCS
void mkcf_fcty__free( mkcf_fcty* val, ysmff ffunc);
void mkcf_fcty__copy( mkcf_fcty* dest, mkcf_fcty* src, ysmaf afunc);
#endif /* mkcf_fcty_SUPP_FUNCS */

CONST ysid* mkcf_fcty__getId(void);
#ifndef mkcf_fcty__id
#define mkcf_fcty__id   (mkcf_fcty__getId())
#endif
#ifndef mkcf_fcty_mnAddress_DECLARED
#define mkcf_fcty_mnAddress_DECLARED
typedef YCIDL_sequence_ub1 mkcf_fcty_mnAddress;
yotk* mkcf_fcty_mnAddress__getTC(void);
#ifndef YCTC_mkcf_fcty_mnAddress
#define YCTC_mkcf_fcty_mnAddress   (mkcf_fcty_mnAddress__getTC())
#endif
#endif /* mkcf_fcty_mnAddress_DECLARED */

#ifndef mkcf_fcty_mnAddress_SUPP_FUNCS
#define mkcf_fcty_mnAddress_SUPP_FUNCS
void mkcf_fcty_mnAddress__free( mkcf_fcty_mnAddress* val, ysmff ffunc);
void mkcf_fcty_mnAddress__copy( mkcf_fcty_mnAddress* dest, 
  mkcf_fcty_mnAddress* src, ysmaf afunc);
#endif /* mkcf_fcty_mnAddress_SUPP_FUNCS */

#ifndef mkcf_fcty_feedList_DECLARED
#define mkcf_fcty_feedList_DECLARED
typedef YCIDL_sequence_mkcf_feed mkcf_fcty_feedList;
yotk* mkcf_fcty_feedList__getTC(void);
#ifndef YCTC_mkcf_fcty_feedList
#define YCTC_mkcf_fcty_feedList   (mkcf_fcty_feedList__getTC())
#endif
#endif /* mkcf_fcty_feedList_DECLARED */

#ifndef mkcf_fcty_feedList_SUPP_FUNCS
#define mkcf_fcty_feedList_SUPP_FUNCS
void mkcf_fcty_feedList__free( mkcf_fcty_feedList* val, ysmff ffunc);
void mkcf_fcty_feedList__copy( mkcf_fcty_feedList* dest, 
  mkcf_fcty_feedList* src, ysmaf afunc);
#endif /* mkcf_fcty_feedList_SUPP_FUNCS */


/* interface mza_Ctnt declarations */
#ifndef mza_Ctnt_DECLARED
#define mza_Ctnt_DECLARED
typedef struct YCmza_Ctnt* mza_Ctnt;
yotk* mza_Ctnt__getTC(void);
#ifndef YCTC_mza_Ctnt
#define YCTC_mza_Ctnt   (mza_Ctnt__getTC())
#endif
#endif /* mza_Ctnt_DECLARED */

#ifndef mza_Ctnt_SUPP_FUNCS
#define mza_Ctnt_SUPP_FUNCS
void mza_Ctnt__free( mza_Ctnt* val, ysmff ffunc);
void mza_Ctnt__copy( mza_Ctnt* dest, mza_Ctnt* src, ysmaf afunc);
#endif /* mza_Ctnt_SUPP_FUNCS */


/* interface mza_CtntPvdr declarations */
#ifndef mza_CtntPvdr_DECLARED
#define mza_CtntPvdr_DECLARED
typedef struct YCmza_CtntPvdr* mza_CtntPvdr;
yotk* mza_CtntPvdr__getTC(void);
#ifndef YCTC_mza_CtntPvdr
#define YCTC_mza_CtntPvdr   (mza_CtntPvdr__getTC())
#endif
#endif /* mza_CtntPvdr_DECLARED */

#ifndef mza_CtntPvdr_SUPP_FUNCS
#define mza_CtntPvdr_SUPP_FUNCS
void mza_CtntPvdr__free( mza_CtntPvdr* val, ysmff ffunc);
void mza_CtntPvdr__copy( mza_CtntPvdr* dest, mza_CtntPvdr* src, ysmaf afunc)
  ;
#endif /* mza_CtntPvdr_SUPP_FUNCS */


/* interface mza_LgCtnt declarations */
#ifndef mza_LgCtnt_DECLARED
#define mza_LgCtnt_DECLARED
typedef struct YCmza_LgCtnt* mza_LgCtnt;
yotk* mza_LgCtnt__getTC(void);
#ifndef YCTC_mza_LgCtnt
#define YCTC_mza_LgCtnt   (mza_LgCtnt__getTC())
#endif
#endif /* mza_LgCtnt_DECLARED */

#ifndef mza_LgCtnt_SUPP_FUNCS
#define mza_LgCtnt_SUPP_FUNCS
void mza_LgCtnt__free( mza_LgCtnt* val, ysmff ffunc);
void mza_LgCtnt__copy( mza_LgCtnt* dest, mza_LgCtnt* src, ysmaf afunc);
#endif /* mza_LgCtnt_SUPP_FUNCS */


/* interface mza_Clip declarations */
#ifndef mza_Clip_DECLARED
#define mza_Clip_DECLARED
typedef struct YCmza_Clip* mza_Clip;
yotk* mza_Clip__getTC(void);
#ifndef YCTC_mza_Clip
#define YCTC_mza_Clip   (mza_Clip__getTC())
#endif
#endif /* mza_Clip_DECLARED */

#ifndef mza_Clip_SUPP_FUNCS
#define mza_Clip_SUPP_FUNCS
void mza_Clip__free( mza_Clip* val, ysmff ffunc);
void mza_Clip__copy( mza_Clip* dest, mza_Clip* src, ysmaf afunc);
#endif /* mza_Clip_SUPP_FUNCS */

#ifndef MZA_EX_NOLGCTNT_DECLARED
#define MZA_EX_NOLGCTNT_DECLARED
CONST ysid* mza_NoLgCtnt__getId(void);
#ifndef MZA_EX_NOLGCTNT
#define MZA_EX_NOLGCTNT   (mza_NoLgCtnt__getId())
#endif
#endif /* MZA_EX_NOLGCTNT_DECLARED */

#ifndef mza_NoLgCtnt_DECLARED
#define mza_NoLgCtnt_DECLARED
typedef struct mza_NoLgCtnt mza_NoLgCtnt;
#endif /* mza_NoLgCtnt_DECLARED */

#ifndef mza_NoLgCtnt_DEFINED
#define mza_NoLgCtnt_DEFINED
struct mza_NoLgCtnt
{
  mza_opstatus status;
  char* description;
  sb4 errorCode;
};
yotk* mza_NoLgCtnt__getTC(void);
#ifndef YCTC_mza_NoLgCtnt
#define YCTC_mza_NoLgCtnt   (mza_NoLgCtnt__getTC())
#endif
#endif /* mza_NoLgCtnt_DEFINED */

#ifndef mza_NoLgCtnt_SUPP_FUNCS
#define mza_NoLgCtnt_SUPP_FUNCS
void mza_NoLgCtnt__free( mza_NoLgCtnt* val, ysmff ffunc);
void mza_NoLgCtnt__copy( mza_NoLgCtnt* dest, mza_NoLgCtnt* src, ysmaf afunc)
  ;
#endif /* mza_NoLgCtnt_SUPP_FUNCS */

#ifndef MZA_EX_BADPOSITION_DECLARED
#define MZA_EX_BADPOSITION_DECLARED
CONST ysid* mza_BadPosition__getId(void);
#ifndef MZA_EX_BADPOSITION
#define MZA_EX_BADPOSITION   (mza_BadPosition__getId())
#endif
#endif /* MZA_EX_BADPOSITION_DECLARED */

#ifndef mza_BadPosition_DECLARED
#define mza_BadPosition_DECLARED
typedef struct mza_BadPosition mza_BadPosition;
#endif /* mza_BadPosition_DECLARED */

#ifndef mza_BadPosition_DEFINED
#define mza_BadPosition_DEFINED
struct mza_BadPosition
{
  mza_opstatus status;
  char* description;
  char* position;
  sb4 errorCode;
};
yotk* mza_BadPosition__getTC(void);
#ifndef YCTC_mza_BadPosition
#define YCTC_mza_BadPosition   (mza_BadPosition__getTC())
#endif
#endif /* mza_BadPosition_DEFINED */

#ifndef mza_BadPosition_SUPP_FUNCS
#define mza_BadPosition_SUPP_FUNCS
void mza_BadPosition__free( mza_BadPosition* val, ysmff ffunc);
void mza_BadPosition__copy( mza_BadPosition* dest, mza_BadPosition* src, 
  ysmaf afunc);
#endif /* mza_BadPosition_SUPP_FUNCS */

#ifndef MZA_EX_BADPROHIB_DECLARED
#define MZA_EX_BADPROHIB_DECLARED
CONST ysid* mza_BadProhib__getId(void);
#ifndef MZA_EX_BADPROHIB
#define MZA_EX_BADPROHIB   (mza_BadProhib__getId())
#endif
#endif /* MZA_EX_BADPROHIB_DECLARED */

#ifndef mza_BadProhib_DECLARED
#define mza_BadProhib_DECLARED
typedef struct mza_BadProhib mza_BadProhib;
#endif /* mza_BadProhib_DECLARED */

#ifndef mza_BadProhib_DEFINED
#define mza_BadProhib_DEFINED
struct mza_BadProhib
{
  mza_opstatus status;
  char* description;
  char* prohib;
  sb4 errorCode;
};
yotk* mza_BadProhib__getTC(void);
#ifndef YCTC_mza_BadProhib
#define YCTC_mza_BadProhib   (mza_BadProhib__getTC())
#endif
#endif /* mza_BadProhib_DEFINED */

#ifndef mza_BadProhib_SUPP_FUNCS
#define mza_BadProhib_SUPP_FUNCS
void mza_BadProhib__free( mza_BadProhib* val, ysmff ffunc);
void mza_BadProhib__copy( mza_BadProhib* dest, mza_BadProhib* src, ysmaf 
  afunc);
#endif /* mza_BadProhib_SUPP_FUNCS */

#ifndef mza_ClipAtr_DECLARED
#define mza_ClipAtr_DECLARED
typedef struct mza_ClipAtr mza_ClipAtr;
#endif /* mza_ClipAtr_DECLARED */

#ifndef mza_ClipAtr_DEFINED
#define mza_ClipAtr_DEFINED
struct mza_ClipAtr
{
  mza_Clip clipOR;
  mza_Ctnt ctntOR;
  char* name;
  char* desc;
  char* ctntNm;
  mkd_pos startPos;
  mkd_pos stopPos;
  boolean assigned;
};
yotk* mza_ClipAtr__getTC(void);
#ifndef YCTC_mza_ClipAtr
#define YCTC_mza_ClipAtr   (mza_ClipAtr__getTC())
#endif
#endif /* mza_ClipAtr_DEFINED */

#ifndef mza_ClipAtr_SUPP_FUNCS
#define mza_ClipAtr_SUPP_FUNCS
void mza_ClipAtr__free( mza_ClipAtr* val, ysmff ffunc);
void mza_ClipAtr__copy( mza_ClipAtr* dest, mza_ClipAtr* src, ysmaf afunc);
#endif /* mza_ClipAtr_SUPP_FUNCS */

#ifndef mza_ClipAtrLst_DECLARED
#define mza_ClipAtrLst_DECLARED
typedef YCIDL_sequence_mza_ClipAtr mza_ClipAtrLst;
yotk* mza_ClipAtrLst__getTC(void);
#ifndef YCTC_mza_ClipAtrLst
#define YCTC_mza_ClipAtrLst   (mza_ClipAtrLst__getTC())
#endif
#endif /* mza_ClipAtrLst_DECLARED */

#ifndef mza_ClipAtrLst_SUPP_FUNCS
#define mza_ClipAtrLst_SUPP_FUNCS
void mza_ClipAtrLst__free( mza_ClipAtrLst* val, ysmff ffunc);
void mza_ClipAtrLst__copy( mza_ClipAtrLst* dest, mza_ClipAtrLst* src, ysmaf 
  afunc);
#endif /* mza_ClipAtrLst_SUPP_FUNCS */

#ifndef mza_CtntAtr_DECLARED
#define mza_CtntAtr_DECLARED
typedef struct mza_CtntAtr mza_CtntAtr;
#endif /* mza_CtntAtr_DECLARED */

#ifndef mza_CtntAtr_DEFINED
#define mza_CtntAtr_DEFINED
struct mza_CtntAtr
{
  mza_Ctnt ctntOR;
  mza_CtntPvdr ctntPvdrOR;
  char* name;
  char* desc;
  char* createDate;
  char* filename;
  sysb8 len;
  sb4 msecs;
  sb4 rate;
  sysb8 firstTime;
  sysb8 lastTime;
  mkd_contFormat format;
  mkd_prohib prohibFlags;
  boolean tagsFlag;
  boolean multiRateFlag;
  boolean reliableFlag;
  char* volLocation;
  mkd_contStatus contStatus;
  boolean assigned;
};
yotk* mza_CtntAtr__getTC(void);
#ifndef YCTC_mza_CtntAtr
#define YCTC_mza_CtntAtr   (mza_CtntAtr__getTC())
#endif
#endif /* mza_CtntAtr_DEFINED */

#ifndef mza_CtntAtr_SUPP_FUNCS
#define mza_CtntAtr_SUPP_FUNCS
void mza_CtntAtr__free( mza_CtntAtr* val, ysmff ffunc);
void mza_CtntAtr__copy( mza_CtntAtr* dest, mza_CtntAtr* src, ysmaf afunc);
#endif /* mza_CtntAtr_SUPP_FUNCS */

#ifndef mza_CtntAtrLst_DECLARED
#define mza_CtntAtrLst_DECLARED
typedef YCIDL_sequence_mza_CtntAtr mza_CtntAtrLst;
yotk* mza_CtntAtrLst__getTC(void);
#ifndef YCTC_mza_CtntAtrLst
#define YCTC_mza_CtntAtrLst   (mza_CtntAtrLst__getTC())
#endif
#endif /* mza_CtntAtrLst_DECLARED */

#ifndef mza_CtntAtrLst_SUPP_FUNCS
#define mza_CtntAtrLst_SUPP_FUNCS
void mza_CtntAtrLst__free( mza_CtntAtrLst* val, ysmff ffunc);
void mza_CtntAtrLst__copy( mza_CtntAtrLst* dest, mza_CtntAtrLst* src, ysmaf 
  afunc);
#endif /* mza_CtntAtrLst_SUPP_FUNCS */

#ifndef mza_CtntPvdrAtr_DECLARED
#define mza_CtntPvdrAtr_DECLARED
typedef struct mza_CtntPvdrAtr mza_CtntPvdrAtr;
#endif /* mza_CtntPvdrAtr_DECLARED */

#ifndef mza_CtntPvdrAtr_DEFINED
#define mza_CtntPvdrAtr_DEFINED
struct mza_CtntPvdrAtr
{
  mza_CtntPvdr ctntPvdrOR;
  char* name;
  char* desc;
};
yotk* mza_CtntPvdrAtr__getTC(void);
#ifndef YCTC_mza_CtntPvdrAtr
#define YCTC_mza_CtntPvdrAtr   (mza_CtntPvdrAtr__getTC())
#endif
#endif /* mza_CtntPvdrAtr_DEFINED */

#ifndef mza_CtntPvdrAtr_SUPP_FUNCS
#define mza_CtntPvdrAtr_SUPP_FUNCS
void mza_CtntPvdrAtr__free( mza_CtntPvdrAtr* val, ysmff ffunc);
void mza_CtntPvdrAtr__copy( mza_CtntPvdrAtr* dest, mza_CtntPvdrAtr* src, 
  ysmaf afunc);
#endif /* mza_CtntPvdrAtr_SUPP_FUNCS */

#ifndef mza_CtntPvdrAtrLst_DECLARED
#define mza_CtntPvdrAtrLst_DECLARED
typedef YCIDL_sequence_mza_CtntPvdrAtr mza_CtntPvdrAtrLst;
yotk* mza_CtntPvdrAtrLst__getTC(void);
#ifndef YCTC_mza_CtntPvdrAtrLst
#define YCTC_mza_CtntPvdrAtrLst   (mza_CtntPvdrAtrLst__getTC())
#endif
#endif /* mza_CtntPvdrAtrLst_DECLARED */

#ifndef mza_CtntPvdrAtrLst_SUPP_FUNCS
#define mza_CtntPvdrAtrLst_SUPP_FUNCS
void mza_CtntPvdrAtrLst__free( mza_CtntPvdrAtrLst* val, ysmff ffunc);
void mza_CtntPvdrAtrLst__copy( mza_CtntPvdrAtrLst* dest, 
  mza_CtntPvdrAtrLst* src, ysmaf afunc);
#endif /* mza_CtntPvdrAtrLst_SUPP_FUNCS */

#ifndef mza_LgCtntAtr_DECLARED
#define mza_LgCtntAtr_DECLARED
typedef struct mza_LgCtntAtr mza_LgCtntAtr;
#endif /* mza_LgCtntAtr_DECLARED */

#ifndef mza_LgCtntAtr_DEFINED
#define mza_LgCtntAtr_DEFINED
struct mza_LgCtntAtr
{
  mza_LgCtnt lgCtntOR;
  char* name;
  char* desc;
  char* createDate;
  sb4 msecs;
  sb4 numClips;
  mkd_assetCookie cookie;
  boolean longFmt;
  mza_ClipAtrLst clipAtrLst;
  mza_CtntAtrLst ctntAtrLst;
};
yotk* mza_LgCtntAtr__getTC(void);
#ifndef YCTC_mza_LgCtntAtr
#define YCTC_mza_LgCtntAtr   (mza_LgCtntAtr__getTC())
#endif
#endif /* mza_LgCtntAtr_DEFINED */

#ifndef mza_LgCtntAtr_SUPP_FUNCS
#define mza_LgCtntAtr_SUPP_FUNCS
void mza_LgCtntAtr__free( mza_LgCtntAtr* val, ysmff ffunc);
void mza_LgCtntAtr__copy( mza_LgCtntAtr* dest, mza_LgCtntAtr* src, ysmaf 
  afunc);
#endif /* mza_LgCtntAtr_SUPP_FUNCS */

#ifndef mza_LgCtntAtrLst_DECLARED
#define mza_LgCtntAtrLst_DECLARED
typedef YCIDL_sequence_mza_LgCtntAtr mza_LgCtntAtrLst;
yotk* mza_LgCtntAtrLst__getTC(void);
#ifndef YCTC_mza_LgCtntAtrLst
#define YCTC_mza_LgCtntAtrLst   (mza_LgCtntAtrLst__getTC())
#endif
#endif /* mza_LgCtntAtrLst_DECLARED */

#ifndef mza_LgCtntAtrLst_SUPP_FUNCS
#define mza_LgCtntAtrLst_SUPP_FUNCS
void mza_LgCtntAtrLst__free( mza_LgCtntAtrLst* val, ysmff ffunc);
void mza_LgCtntAtrLst__copy( mza_LgCtntAtrLst* dest, mza_LgCtntAtrLst* src, 
  ysmaf afunc);
#endif /* mza_LgCtntAtrLst_SUPP_FUNCS */


/* interface mza_LgCtnt declarations */
#ifndef mza_LgCtnt_DECLARED
#define mza_LgCtnt_DECLARED
typedef struct YCmza_LgCtnt* mza_LgCtnt;
yotk* mza_LgCtnt__getTC(void);
#ifndef YCTC_mza_LgCtnt
#define YCTC_mza_LgCtnt   (mza_LgCtnt__getTC())
#endif
#endif /* mza_LgCtnt_DECLARED */

#ifndef mza_LgCtnt_SUPP_FUNCS
#define mza_LgCtnt_SUPP_FUNCS
void mza_LgCtnt__free( mza_LgCtnt* val, ysmff ffunc);
void mza_LgCtnt__copy( mza_LgCtnt* dest, mza_LgCtnt* src, ysmaf afunc);
#endif /* mza_LgCtnt_SUPP_FUNCS */

#ifndef mza_LgCtnt_DEFINED
#define mza_LgCtnt_DEFINED
struct yostub* mza_LgCtnt__getStubs(void);
#define mza_LgCtnt__stubs (mza_LgCtnt__getStubs())
#endif /* mza_LgCtnt_DEFINED */

CONST ysid* mza_LgCtnt__getId(void);
#ifndef mza_LgCtnt__id
#define mza_LgCtnt__id   (mza_LgCtnt__getId())
#endif
char* mza_LgCtnt__get_name( mza_LgCtnt or, yoenv* ev);
void mza_LgCtnt__get_name_nw( mza_LgCtnt or, yoenv* ev, ysevt* _sem);
yopar* mza_LgCtnt__get_name__getPars(void);
#ifndef mza_LgCtnt__get_name_pars
#define mza_LgCtnt__get_name_pars (mza_LgCtnt__get_name__getPars())
#endif

void mza_LgCtnt__set_name( mza_LgCtnt or, yoenv* ev, char* val);
void mza_LgCtnt__set_name_nw( mza_LgCtnt or, yoenv* ev, char* val, ysevt* 
  _sem);
yopar* mza_LgCtnt__set_name__getPars(void);
#ifndef mza_LgCtnt__set_name_pars
#define mza_LgCtnt__set_name_pars (mza_LgCtnt__set_name__getPars())
#endif

char* mza_LgCtnt__get_desc( mza_LgCtnt or, yoenv* ev);
void mza_LgCtnt__get_desc_nw( mza_LgCtnt or, yoenv* ev, ysevt* _sem);
yopar* mza_LgCtnt__get_desc__getPars(void);
#ifndef mza_LgCtnt__get_desc_pars
#define mza_LgCtnt__get_desc_pars (mza_LgCtnt__get_desc__getPars())
#endif

void mza_LgCtnt__set_desc( mza_LgCtnt or, yoenv* ev, char* val);
void mza_LgCtnt__set_desc_nw( mza_LgCtnt or, yoenv* ev, char* val, ysevt* 
  _sem);
yopar* mza_LgCtnt__set_desc__getPars(void);
#ifndef mza_LgCtnt__set_desc_pars
#define mza_LgCtnt__set_desc_pars (mza_LgCtnt__set_desc__getPars())
#endif

sb4 mza_LgCtnt__get_msecs( mza_LgCtnt or, yoenv* ev);
void mza_LgCtnt__get_msecs_nw( mza_LgCtnt or, yoenv* ev, ysevt* _sem);
yopar* mza_LgCtnt__get_msecs__getPars(void);
#ifndef mza_LgCtnt__get_msecs_pars
#define mza_LgCtnt__get_msecs_pars (mza_LgCtnt__get_msecs__getPars())
#endif

sb4 mza_LgCtnt__get_numClips( mza_LgCtnt or, yoenv* ev);
void mza_LgCtnt__get_numClips_nw( mza_LgCtnt or, yoenv* ev, ysevt* _sem);
yopar* mza_LgCtnt__get_numClips__getPars(void);
#ifndef mza_LgCtnt__get_numClips_pars
#define mza_LgCtnt__get_numClips_pars (mza_LgCtnt__get_numClips__getPars())
#endif

void mza_LgCtnt_getAtr( mza_LgCtnt or, yoenv* ev, boolean longFmt, 
  mza_LgCtntAtr* lcAtr);
void mza_LgCtnt_getAtr_nw( mza_LgCtnt or, yoenv* ev, boolean longFmt, 
  mza_LgCtntAtr* lcAtr, ysevt* _sem);
yopar* mza_LgCtnt_getAtr__getPars(void);
#ifndef mza_LgCtnt_getAtr_pars
#define mza_LgCtnt_getAtr_pars (mza_LgCtnt_getAtr__getPars())
#endif

void mza_LgCtnt_destroy( mza_LgCtnt or, yoenv* ev);
void mza_LgCtnt_destroy_nw( mza_LgCtnt or, yoenv* ev, ysevt* _sem);
yopar* mza_LgCtnt_destroy__getPars(void);
#ifndef mza_LgCtnt_destroy_pars
#define mza_LgCtnt_destroy_pars (mza_LgCtnt_destroy__getPars())
#endif

void mza_LgCtnt_getAtrClipByPos( mza_LgCtnt or, yoenv* ev, sb4 position, 
  mza_ClipAtr* clipAtr);
void mza_LgCtnt_getAtrClipByPos_nw( mza_LgCtnt or, yoenv* ev, sb4 position, 
  mza_ClipAtr* clipAtr, ysevt* _sem);
yopar* mza_LgCtnt_getAtrClipByPos__getPars(void);
#ifndef mza_LgCtnt_getAtrClipByPos_pars
#define mza_LgCtnt_getAtrClipByPos_pars ( \
  mza_LgCtnt_getAtrClipByPos__getPars())
#endif

mza_ClipAtrLst mza_LgCtnt_lstAtrClips( mza_LgCtnt or, yoenv* ev, mza_Itr* 
  iterator);
void mza_LgCtnt_lstAtrClips_nw( mza_LgCtnt or, yoenv* ev, mza_Itr* iterator,
   ysevt* _sem);
yopar* mza_LgCtnt_lstAtrClips__getPars(void);
#ifndef mza_LgCtnt_lstAtrClips_pars
#define mza_LgCtnt_lstAtrClips_pars (mza_LgCtnt_lstAtrClips__getPars())
#endif

sb4 mza_LgCtnt_addClip( mza_LgCtnt or, yoenv* ev, mza_Clip clipOR);
void mza_LgCtnt_addClip_nw( mza_LgCtnt or, yoenv* ev, mza_Clip clipOR, 
  ysevt* _sem);
yopar* mza_LgCtnt_addClip__getPars(void);
#ifndef mza_LgCtnt_addClip_pars
#define mza_LgCtnt_addClip_pars (mza_LgCtnt_addClip__getPars())
#endif

void mza_LgCtnt_addClipByPos( mza_LgCtnt or, yoenv* ev, mza_Clip clipOR, 
  sb4 position);
void mza_LgCtnt_addClipByPos_nw( mza_LgCtnt or, yoenv* ev, mza_Clip clipOR, 
  sb4 position, ysevt* _sem);
yopar* mza_LgCtnt_addClipByPos__getPars(void);
#ifndef mza_LgCtnt_addClipByPos_pars
#define mza_LgCtnt_addClipByPos_pars (mza_LgCtnt_addClipByPos__getPars())
#endif

void mza_LgCtnt_delClip( mza_LgCtnt or, yoenv* ev, mza_Clip clipOR);
void mza_LgCtnt_delClip_nw( mza_LgCtnt or, yoenv* ev, mza_Clip clipOR, 
  ysevt* _sem);
yopar* mza_LgCtnt_delClip__getPars(void);
#ifndef mza_LgCtnt_delClip_pars
#define mza_LgCtnt_delClip_pars (mza_LgCtnt_delClip__getPars())
#endif

void mza_LgCtnt_delClipByPos( mza_LgCtnt or, yoenv* ev, sb4 position);
void mza_LgCtnt_delClipByPos_nw( mza_LgCtnt or, yoenv* ev, sb4 position, 
  ysevt* _sem);
yopar* mza_LgCtnt_delClipByPos__getPars(void);
#ifndef mza_LgCtnt_delClipByPos_pars
#define mza_LgCtnt_delClipByPos_pars (mza_LgCtnt_delClipByPos__getPars())
#endif

#ifndef mza_LgCtnt__tyimpl_DEFINED
#define mza_LgCtnt__tyimpl_DEFINED
struct mza_LgCtnt__tyimpl
{
  void (*getAtr)( mza_LgCtnt, yoenv*, boolean, mza_LgCtntAtr*);
  void (*destroy)( mza_LgCtnt, yoenv*);
  void (*getAtrClipByPos)( mza_LgCtnt, yoenv*, sb4, mza_ClipAtr*);
  mza_ClipAtrLst (*lstAtrClips)( mza_LgCtnt, yoenv*, mza_Itr*);
  sb4 (*addClip)( mza_LgCtnt, yoenv*, mza_Clip);
  void (*addClipByPos)( mza_LgCtnt, yoenv*, mza_Clip, sb4);
  void (*delClip)( mza_LgCtnt, yoenv*, mza_Clip);
  void (*delClipByPos)( mza_LgCtnt, yoenv*, sb4);
  char* (*_get_name)( mza_LgCtnt, yoenv*);
  void (*_set_name)( mza_LgCtnt, yoenv*, char*);
  char* (*_get_desc)( mza_LgCtnt, yoenv*);
  void (*_set_desc)( mza_LgCtnt, yoenv*, char*);
  sb4 (*_get_msecs)( mza_LgCtnt, yoenv*);
  sb4 (*_get_numClips)( mza_LgCtnt, yoenv*);
};
#endif /* mza_LgCtnt__tyimpl_DEFINED */


/* interface mza_LgCtntFac declarations */
#ifndef mza_LgCtntFac_DECLARED
#define mza_LgCtntFac_DECLARED
typedef struct YCmza_LgCtntFac* mza_LgCtntFac;
yotk* mza_LgCtntFac__getTC(void);
#ifndef YCTC_mza_LgCtntFac
#define YCTC_mza_LgCtntFac   (mza_LgCtntFac__getTC())
#endif
#endif /* mza_LgCtntFac_DECLARED */

#ifndef mza_LgCtntFac_SUPP_FUNCS
#define mza_LgCtntFac_SUPP_FUNCS
void mza_LgCtntFac__free( mza_LgCtntFac* val, ysmff ffunc);
void mza_LgCtntFac__copy( mza_LgCtntFac* dest, mza_LgCtntFac* src, ysmaf 
  afunc);
#endif /* mza_LgCtntFac_SUPP_FUNCS */

#ifndef mza_LgCtntFac_DEFINED
#define mza_LgCtntFac_DEFINED
struct yostub* mza_LgCtntFac__getStubs(void);
#define mza_LgCtntFac__stubs (mza_LgCtntFac__getStubs())
#endif /* mza_LgCtntFac_DEFINED */

CONST ysid* mza_LgCtntFac__getId(void);
#ifndef mza_LgCtntFac__id
#define mza_LgCtntFac__id   (mza_LgCtntFac__getId())
#endif
mza_LgCtnt mza_LgCtntFac_create( mza_LgCtntFac or, yoenv* ev, char* name, 
  char* desc);
void mza_LgCtntFac_create_nw( mza_LgCtntFac or, yoenv* ev, char* name, 
  char* desc, ysevt* _sem);
yopar* mza_LgCtntFac_create__getPars(void);
#ifndef mza_LgCtntFac_create_pars
#define mza_LgCtntFac_create_pars (mza_LgCtntFac_create__getPars())
#endif

mza_LgCtnt mza_LgCtntFac_createCtnt( mza_LgCtntFac or, yoenv* ev, 
  mza_CtntAtr* ctntAtr, mza_Clip* clipOR, mza_Ctnt* ctntOR);
void mza_LgCtntFac_createCtnt_nw( mza_LgCtntFac or, yoenv* ev, mza_CtntAtr* 
  ctntAtr, mza_Clip* clipOR, mza_Ctnt* ctntOR, ysevt* _sem);
yopar* mza_LgCtntFac_createCtnt__getPars(void);
#ifndef mza_LgCtntFac_createCtnt_pars
#define mza_LgCtntFac_createCtnt_pars (mza_LgCtntFac_createCtnt__getPars())
#endif

#ifndef mza_LgCtntFac__tyimpl_DEFINED
#define mza_LgCtntFac__tyimpl_DEFINED
struct mza_LgCtntFac__tyimpl
{
  mza_LgCtnt (*create)( mza_LgCtntFac, yoenv*, char*, char*);
  mza_LgCtnt (*createCtnt)( mza_LgCtntFac, yoenv*, mza_CtntAtr*, mza_Clip*, 
    mza_Ctnt*);
};
#endif /* mza_LgCtntFac__tyimpl_DEFINED */


/* interface mza_LgCtntMgmt declarations */
#ifndef mza_LgCtntMgmt_DECLARED
#define mza_LgCtntMgmt_DECLARED
typedef struct YCmza_LgCtntMgmt* mza_LgCtntMgmt;
yotk* mza_LgCtntMgmt__getTC(void);
#ifndef YCTC_mza_LgCtntMgmt
#define YCTC_mza_LgCtntMgmt   (mza_LgCtntMgmt__getTC())
#endif
#endif /* mza_LgCtntMgmt_DECLARED */

#ifndef mza_LgCtntMgmt_SUPP_FUNCS
#define mza_LgCtntMgmt_SUPP_FUNCS
void mza_LgCtntMgmt__free( mza_LgCtntMgmt* val, ysmff ffunc);
void mza_LgCtntMgmt__copy( mza_LgCtntMgmt* dest, mza_LgCtntMgmt* src, ysmaf 
  afunc);
#endif /* mza_LgCtntMgmt_SUPP_FUNCS */

#ifndef mza_LgCtntMgmt_DEFINED
#define mza_LgCtntMgmt_DEFINED
struct yostub* mza_LgCtntMgmt__getStubs(void);
#define mza_LgCtntMgmt__stubs (mza_LgCtntMgmt__getStubs())
#endif /* mza_LgCtntMgmt_DEFINED */

CONST ysid* mza_LgCtntMgmt__getId(void);
#ifndef mza_LgCtntMgmt__id
#define mza_LgCtntMgmt__id   (mza_LgCtntMgmt__getId())
#endif
mza_LgCtntAtrLst mza_LgCtntMgmt_lstAtr( mza_LgCtntMgmt or, yoenv* ev, 
  boolean longFmt, mza_Itr* itr);
void mza_LgCtntMgmt_lstAtr_nw( mza_LgCtntMgmt or, yoenv* ev, boolean 
  longFmt, mza_Itr* itr, ysevt* _sem);
yopar* mza_LgCtntMgmt_lstAtr__getPars(void);
#ifndef mza_LgCtntMgmt_lstAtr_pars
#define mza_LgCtntMgmt_lstAtr_pars (mza_LgCtntMgmt_lstAtr__getPars())
#endif

mza_LgCtntAtrLst mza_LgCtntMgmt_lstAtrByNm( mza_LgCtntMgmt or, yoenv* ev, 
  char* lgCtntName, boolean longFmt, mza_Itr* itr);
void mza_LgCtntMgmt_lstAtrByNm_nw( mza_LgCtntMgmt or, yoenv* ev, char* 
  lgCtntName, boolean longFmt, mza_Itr* itr, ysevt* _sem);
yopar* mza_LgCtntMgmt_lstAtrByNm__getPars(void);
#ifndef mza_LgCtntMgmt_lstAtrByNm_pars
#define mza_LgCtntMgmt_lstAtrByNm_pars (mza_LgCtntMgmt_lstAtrByNm__getPars() \
  )
#endif

boolean mza_LgCtntMgmt_usingDB( mza_LgCtntMgmt or, yoenv* ev);
void mza_LgCtntMgmt_usingDB_nw( mza_LgCtntMgmt or, yoenv* ev, ysevt* _sem);
yopar* mza_LgCtntMgmt_usingDB__getPars(void);
#ifndef mza_LgCtntMgmt_usingDB_pars
#define mza_LgCtntMgmt_usingDB_pars (mza_LgCtntMgmt_usingDB__getPars())
#endif

#ifndef mza_LgCtntMgmt__tyimpl_DEFINED
#define mza_LgCtntMgmt__tyimpl_DEFINED
struct mza_LgCtntMgmt__tyimpl
{
  mza_LgCtntAtrLst (*lstAtr)( mza_LgCtntMgmt, yoenv*, boolean, mza_Itr*);
  mza_LgCtntAtrLst (*lstAtrByNm)( mza_LgCtntMgmt, yoenv*, char*, boolean, 
    mza_Itr*);
  boolean (*usingDB)( mza_LgCtntMgmt, yoenv*);
};
#endif /* mza_LgCtntMgmt__tyimpl_DEFINED */


/* interface mza_Clip declarations */
#ifndef mza_Clip_DECLARED
#define mza_Clip_DECLARED
typedef struct YCmza_Clip* mza_Clip;
yotk* mza_Clip__getTC(void);
#ifndef YCTC_mza_Clip
#define YCTC_mza_Clip   (mza_Clip__getTC())
#endif
#endif /* mza_Clip_DECLARED */

#ifndef mza_Clip_SUPP_FUNCS
#define mza_Clip_SUPP_FUNCS
void mza_Clip__free( mza_Clip* val, ysmff ffunc);
void mza_Clip__copy( mza_Clip* dest, mza_Clip* src, ysmaf afunc);
#endif /* mza_Clip_SUPP_FUNCS */

#ifndef mza_Clip_DEFINED
#define mza_Clip_DEFINED
struct yostub* mza_Clip__getStubs(void);
#define mza_Clip__stubs (mza_Clip__getStubs())
#endif /* mza_Clip_DEFINED */

CONST ysid* mza_Clip__getId(void);
#ifndef mza_Clip__id
#define mza_Clip__id   (mza_Clip__getId())
#endif
mza_Ctnt mza_Clip__get_ctntOR( mza_Clip or, yoenv* ev);
void mza_Clip__get_ctntOR_nw( mza_Clip or, yoenv* ev, ysevt* _sem);
yopar* mza_Clip__get_ctntOR__getPars(void);
#ifndef mza_Clip__get_ctntOR_pars
#define mza_Clip__get_ctntOR_pars (mza_Clip__get_ctntOR__getPars())
#endif

void mza_Clip__set_ctntOR( mza_Clip or, yoenv* ev, mza_Ctnt val);
void mza_Clip__set_ctntOR_nw( mza_Clip or, yoenv* ev, mza_Ctnt val, ysevt* 
  _sem);
yopar* mza_Clip__set_ctntOR__getPars(void);
#ifndef mza_Clip__set_ctntOR_pars
#define mza_Clip__set_ctntOR_pars (mza_Clip__set_ctntOR__getPars())
#endif

char* mza_Clip__get_name( mza_Clip or, yoenv* ev);
void mza_Clip__get_name_nw( mza_Clip or, yoenv* ev, ysevt* _sem);
yopar* mza_Clip__get_name__getPars(void);
#ifndef mza_Clip__get_name_pars
#define mza_Clip__get_name_pars (mza_Clip__get_name__getPars())
#endif

void mza_Clip__set_name( mza_Clip or, yoenv* ev, char* val);
void mza_Clip__set_name_nw( mza_Clip or, yoenv* ev, char* val, ysevt* _sem);
  
yopar* mza_Clip__set_name__getPars(void);
#ifndef mza_Clip__set_name_pars
#define mza_Clip__set_name_pars (mza_Clip__set_name__getPars())
#endif

char* mza_Clip__get_desc( mza_Clip or, yoenv* ev);
void mza_Clip__get_desc_nw( mza_Clip or, yoenv* ev, ysevt* _sem);
yopar* mza_Clip__get_desc__getPars(void);
#ifndef mza_Clip__get_desc_pars
#define mza_Clip__get_desc_pars (mza_Clip__get_desc__getPars())
#endif

void mza_Clip__set_desc( mza_Clip or, yoenv* ev, char* val);
void mza_Clip__set_desc_nw( mza_Clip or, yoenv* ev, char* val, ysevt* _sem);
  
yopar* mza_Clip__set_desc__getPars(void);
#ifndef mza_Clip__set_desc_pars
#define mza_Clip__set_desc_pars (mza_Clip__set_desc__getPars())
#endif

mkd_pos mza_Clip__get_startPos( mza_Clip or, yoenv* ev);
void mza_Clip__get_startPos_nw( mza_Clip or, yoenv* ev, ysevt* _sem);
yopar* mza_Clip__get_startPos__getPars(void);
#ifndef mza_Clip__get_startPos_pars
#define mza_Clip__get_startPos_pars (mza_Clip__get_startPos__getPars())
#endif

void mza_Clip__set_startPos( mza_Clip or, yoenv* ev, mkd_pos* val);
void mza_Clip__set_startPos_nw( mza_Clip or, yoenv* ev, mkd_pos* val, 
  ysevt* _sem);
yopar* mza_Clip__set_startPos__getPars(void);
#ifndef mza_Clip__set_startPos_pars
#define mza_Clip__set_startPos_pars (mza_Clip__set_startPos__getPars())
#endif

mkd_pos mza_Clip__get_stopPos( mza_Clip or, yoenv* ev);
void mza_Clip__get_stopPos_nw( mza_Clip or, yoenv* ev, ysevt* _sem);
yopar* mza_Clip__get_stopPos__getPars(void);
#ifndef mza_Clip__get_stopPos_pars
#define mza_Clip__get_stopPos_pars (mza_Clip__get_stopPos__getPars())
#endif

void mza_Clip__set_stopPos( mza_Clip or, yoenv* ev, mkd_pos* val);
void mza_Clip__set_stopPos_nw( mza_Clip or, yoenv* ev, mkd_pos* val, ysevt* 
  _sem);
yopar* mza_Clip__set_stopPos__getPars(void);
#ifndef mza_Clip__set_stopPos_pars
#define mza_Clip__set_stopPos_pars (mza_Clip__set_stopPos__getPars())
#endif

void mza_Clip_getAtr( mza_Clip or, yoenv* ev, mza_ClipAtr* clipAtr);
void mza_Clip_getAtr_nw( mza_Clip or, yoenv* ev, mza_ClipAtr* clipAtr, 
  ysevt* _sem);
yopar* mza_Clip_getAtr__getPars(void);
#ifndef mza_Clip_getAtr_pars
#define mza_Clip_getAtr_pars (mza_Clip_getAtr__getPars())
#endif

void mza_Clip_destroy( mza_Clip or, yoenv* ev);
void mza_Clip_destroy_nw( mza_Clip or, yoenv* ev, ysevt* _sem);
yopar* mza_Clip_destroy__getPars(void);
#ifndef mza_Clip_destroy_pars
#define mza_Clip_destroy_pars (mza_Clip_destroy__getPars())
#endif

#ifndef mza_Clip__tyimpl_DEFINED
#define mza_Clip__tyimpl_DEFINED
struct mza_Clip__tyimpl
{
  void (*getAtr)( mza_Clip, yoenv*, mza_ClipAtr*);
  void (*destroy)( mza_Clip, yoenv*);
  mza_Ctnt (*_get_ctntOR)( mza_Clip, yoenv*);
  void (*_set_ctntOR)( mza_Clip, yoenv*, mza_Ctnt);
  char* (*_get_name)( mza_Clip, yoenv*);
  void (*_set_name)( mza_Clip, yoenv*, char*);
  char* (*_get_desc)( mza_Clip, yoenv*);
  void (*_set_desc)( mza_Clip, yoenv*, char*);
  mkd_pos (*_get_startPos)( mza_Clip, yoenv*);
  void (*_set_startPos)( mza_Clip, yoenv*, mkd_pos*);
  mkd_pos (*_get_stopPos)( mza_Clip, yoenv*);
  void (*_set_stopPos)( mza_Clip, yoenv*, mkd_pos*);
};
#endif /* mza_Clip__tyimpl_DEFINED */


/* interface mza_ClipFac declarations */
#ifndef mza_ClipFac_DECLARED
#define mza_ClipFac_DECLARED
typedef struct YCmza_ClipFac* mza_ClipFac;
yotk* mza_ClipFac__getTC(void);
#ifndef YCTC_mza_ClipFac
#define YCTC_mza_ClipFac   (mza_ClipFac__getTC())
#endif
#endif /* mza_ClipFac_DECLARED */

#ifndef mza_ClipFac_SUPP_FUNCS
#define mza_ClipFac_SUPP_FUNCS
void mza_ClipFac__free( mza_ClipFac* val, ysmff ffunc);
void mza_ClipFac__copy( mza_ClipFac* dest, mza_ClipFac* src, ysmaf afunc);
#endif /* mza_ClipFac_SUPP_FUNCS */

#ifndef mza_ClipFac_DEFINED
#define mza_ClipFac_DEFINED
struct yostub* mza_ClipFac__getStubs(void);
#define mza_ClipFac__stubs (mza_ClipFac__getStubs())
#endif /* mza_ClipFac_DEFINED */

CONST ysid* mza_ClipFac__getId(void);
#ifndef mza_ClipFac__id
#define mza_ClipFac__id   (mza_ClipFac__getId())
#endif
mza_Clip mza_ClipFac_create( mza_ClipFac or, yoenv* ev, mza_Ctnt ctnt, 
  char* name, char* desc, mkd_pos* startPos, mkd_pos* stopPos);
void mza_ClipFac_create_nw( mza_ClipFac or, yoenv* ev, mza_Ctnt ctnt, char* 
  name, char* desc, mkd_pos* startPos, mkd_pos* stopPos, ysevt* _sem);
yopar* mza_ClipFac_create__getPars(void);
#ifndef mza_ClipFac_create_pars
#define mza_ClipFac_create_pars (mza_ClipFac_create__getPars())
#endif

#ifndef mza_ClipFac__tyimpl_DEFINED
#define mza_ClipFac__tyimpl_DEFINED
struct mza_ClipFac__tyimpl
{
  mza_Clip (*create)( mza_ClipFac, yoenv*, mza_Ctnt, char*, char*, mkd_pos*,
     mkd_pos*);
};
#endif /* mza_ClipFac__tyimpl_DEFINED */


/* interface mza_ClipMgmt declarations */
#ifndef mza_ClipMgmt_DECLARED
#define mza_ClipMgmt_DECLARED
typedef struct YCmza_ClipMgmt* mza_ClipMgmt;
yotk* mza_ClipMgmt__getTC(void);
#ifndef YCTC_mza_ClipMgmt
#define YCTC_mza_ClipMgmt   (mza_ClipMgmt__getTC())
#endif
#endif /* mza_ClipMgmt_DECLARED */

#ifndef mza_ClipMgmt_SUPP_FUNCS
#define mza_ClipMgmt_SUPP_FUNCS
void mza_ClipMgmt__free( mza_ClipMgmt* val, ysmff ffunc);
void mza_ClipMgmt__copy( mza_ClipMgmt* dest, mza_ClipMgmt* src, ysmaf afunc)
  ;
#endif /* mza_ClipMgmt_SUPP_FUNCS */

#ifndef mza_ClipMgmt_DEFINED
#define mza_ClipMgmt_DEFINED
struct yostub* mza_ClipMgmt__getStubs(void);
#define mza_ClipMgmt__stubs (mza_ClipMgmt__getStubs())
#endif /* mza_ClipMgmt_DEFINED */

CONST ysid* mza_ClipMgmt__getId(void);
#ifndef mza_ClipMgmt__id
#define mza_ClipMgmt__id   (mza_ClipMgmt__getId())
#endif
mza_ClipAtrLst mza_ClipMgmt_lstAtr( mza_ClipMgmt or, yoenv* ev, mza_Itr* 
  iterator);
void mza_ClipMgmt_lstAtr_nw( mza_ClipMgmt or, yoenv* ev, mza_Itr* iterator, 
  ysevt* _sem);
yopar* mza_ClipMgmt_lstAtr__getPars(void);
#ifndef mza_ClipMgmt_lstAtr_pars
#define mza_ClipMgmt_lstAtr_pars (mza_ClipMgmt_lstAtr__getPars())
#endif

mza_ClipAtrLst mza_ClipMgmt_lstAtrByCtnt( mza_ClipMgmt or, yoenv* ev, 
  mza_Ctnt ctnt, mza_Itr* iterator);
void mza_ClipMgmt_lstAtrByCtnt_nw( mza_ClipMgmt or, yoenv* ev, mza_Ctnt 
  ctnt, mza_Itr* iterator, ysevt* _sem);
yopar* mza_ClipMgmt_lstAtrByCtnt__getPars(void);
#ifndef mza_ClipMgmt_lstAtrByCtnt_pars
#define mza_ClipMgmt_lstAtrByCtnt_pars (mza_ClipMgmt_lstAtrByCtnt__getPars() \
  )
#endif

mza_ClipAtrLst mza_ClipMgmt_lstAtrByNm( mza_ClipMgmt or, yoenv* ev, char* 
  name, mza_Itr* iterator);
void mza_ClipMgmt_lstAtrByNm_nw( mza_ClipMgmt or, yoenv* ev, char* name, 
  mza_Itr* iterator, ysevt* _sem);
yopar* mza_ClipMgmt_lstAtrByNm__getPars(void);
#ifndef mza_ClipMgmt_lstAtrByNm_pars
#define mza_ClipMgmt_lstAtrByNm_pars (mza_ClipMgmt_lstAtrByNm__getPars())
#endif

#ifndef mza_ClipMgmt__tyimpl_DEFINED
#define mza_ClipMgmt__tyimpl_DEFINED
struct mza_ClipMgmt__tyimpl
{
  mza_ClipAtrLst (*lstAtr)( mza_ClipMgmt, yoenv*, mza_Itr*);
  mza_ClipAtrLst (*lstAtrByCtnt)( mza_ClipMgmt, yoenv*, mza_Ctnt, mza_Itr*);
    
  mza_ClipAtrLst (*lstAtrByNm)( mza_ClipMgmt, yoenv*, char*, mza_Itr*);
};
#endif /* mza_ClipMgmt__tyimpl_DEFINED */


/* interface mza_Ctnt declarations */
#ifndef mza_Ctnt_DECLARED
#define mza_Ctnt_DECLARED
typedef struct YCmza_Ctnt* mza_Ctnt;
yotk* mza_Ctnt__getTC(void);
#ifndef YCTC_mza_Ctnt
#define YCTC_mza_Ctnt   (mza_Ctnt__getTC())
#endif
#endif /* mza_Ctnt_DECLARED */

#ifndef mza_Ctnt_SUPP_FUNCS
#define mza_Ctnt_SUPP_FUNCS
void mza_Ctnt__free( mza_Ctnt* val, ysmff ffunc);
void mza_Ctnt__copy( mza_Ctnt* dest, mza_Ctnt* src, ysmaf afunc);
#endif /* mza_Ctnt_SUPP_FUNCS */

#ifndef mza_Ctnt_DEFINED
#define mza_Ctnt_DEFINED
struct yostub* mza_Ctnt__getStubs(void);
#define mza_Ctnt__stubs (mza_Ctnt__getStubs())
#endif /* mza_Ctnt_DEFINED */

CONST ysid* mza_Ctnt__getId(void);
#ifndef mza_Ctnt__id
#define mza_Ctnt__id   (mza_Ctnt__getId())
#endif
void mza_Ctnt_updateStats( mza_Ctnt or, yoenv* ev, sysb8 len, sb4 msecs, 
  char* status);
void mza_Ctnt_updateStats_nw( mza_Ctnt or, yoenv* ev, sysb8 len, sb4 msecs, 
  char* status, ysevt* _sem);
yopar* mza_Ctnt_updateStats__getPars(void);
#ifndef mza_Ctnt_updateStats_pars
#define mza_Ctnt_updateStats_pars (mza_Ctnt_updateStats__getPars())
#endif

void mza_Ctnt_updateTimes( mza_Ctnt or, yoenv* ev, sysb8 firstTime, sysb8 
  lastTime);
void mza_Ctnt_updateTimes_nw( mza_Ctnt or, yoenv* ev, sysb8 firstTime, 
  sysb8 lastTime, ysevt* _sem);
yopar* mza_Ctnt_updateTimes__getPars(void);
#ifndef mza_Ctnt_updateTimes_pars
#define mza_Ctnt_updateTimes_pars (mza_Ctnt_updateTimes__getPars())
#endif

void mza_Ctnt_setAtr( mza_Ctnt or, yoenv* ev, mza_CtntAtr* ctntAtr);
void mza_Ctnt_setAtr_nw( mza_Ctnt or, yoenv* ev, mza_CtntAtr* ctntAtr, 
  ysevt* _sem);
yopar* mza_Ctnt_setAtr__getPars(void);
#ifndef mza_Ctnt_setAtr_pars
#define mza_Ctnt_setAtr_pars (mza_Ctnt_setAtr__getPars())
#endif

void mza_Ctnt_getAtr( mza_Ctnt or, yoenv* ev, mza_CtntAtr* ctntAtr);
void mza_Ctnt_getAtr_nw( mza_Ctnt or, yoenv* ev, mza_CtntAtr* ctntAtr, 
  ysevt* _sem);
yopar* mza_Ctnt_getAtr__getPars(void);
#ifndef mza_Ctnt_getAtr_pars
#define mza_Ctnt_getAtr_pars (mza_Ctnt_getAtr__getPars())
#endif

void mza_Ctnt_destroy( mza_Ctnt or, yoenv* ev);
void mza_Ctnt_destroy_nw( mza_Ctnt or, yoenv* ev, ysevt* _sem);
yopar* mza_Ctnt_destroy__getPars(void);
#ifndef mza_Ctnt_destroy_pars
#define mza_Ctnt_destroy_pars (mza_Ctnt_destroy__getPars())
#endif

#ifndef mza_Ctnt__tyimpl_DEFINED
#define mza_Ctnt__tyimpl_DEFINED
struct mza_Ctnt__tyimpl
{
  void (*updateStats)( mza_Ctnt, yoenv*, sysb8, sb4, char*);
  void (*updateTimes)( mza_Ctnt, yoenv*, sysb8, sysb8);
  void (*setAtr)( mza_Ctnt, yoenv*, mza_CtntAtr*);
  void (*getAtr)( mza_Ctnt, yoenv*, mza_CtntAtr*);
  void (*destroy)( mza_Ctnt, yoenv*);
};
#endif /* mza_Ctnt__tyimpl_DEFINED */


/* interface mza_CtntFac declarations */
#ifndef mza_CtntFac_DECLARED
#define mza_CtntFac_DECLARED
typedef struct YCmza_CtntFac* mza_CtntFac;
yotk* mza_CtntFac__getTC(void);
#ifndef YCTC_mza_CtntFac
#define YCTC_mza_CtntFac   (mza_CtntFac__getTC())
#endif
#endif /* mza_CtntFac_DECLARED */

#ifndef mza_CtntFac_SUPP_FUNCS
#define mza_CtntFac_SUPP_FUNCS
void mza_CtntFac__free( mza_CtntFac* val, ysmff ffunc);
void mza_CtntFac__copy( mza_CtntFac* dest, mza_CtntFac* src, ysmaf afunc);
#endif /* mza_CtntFac_SUPP_FUNCS */

#ifndef mza_CtntFac_DEFINED
#define mza_CtntFac_DEFINED
struct yostub* mza_CtntFac__getStubs(void);
#define mza_CtntFac__stubs (mza_CtntFac__getStubs())
#endif /* mza_CtntFac_DEFINED */

CONST ysid* mza_CtntFac__getId(void);
#ifndef mza_CtntFac__id
#define mza_CtntFac__id   (mza_CtntFac__getId())
#endif
mza_Ctnt mza_CtntFac_create( mza_CtntFac or, yoenv* ev, mza_CtntAtr* 
  ctntAtr);
void mza_CtntFac_create_nw( mza_CtntFac or, yoenv* ev, mza_CtntAtr* ctntAtr,
   ysevt* _sem);
yopar* mza_CtntFac_create__getPars(void);
#ifndef mza_CtntFac_create_pars
#define mza_CtntFac_create_pars (mza_CtntFac_create__getPars())
#endif

#ifndef mza_CtntFac__tyimpl_DEFINED
#define mza_CtntFac__tyimpl_DEFINED
struct mza_CtntFac__tyimpl
{
  mza_Ctnt (*create)( mza_CtntFac, yoenv*, mza_CtntAtr*);
};
#endif /* mza_CtntFac__tyimpl_DEFINED */


/* interface mza_CtntMgmt declarations */
#ifndef mza_CtntMgmt_DECLARED
#define mza_CtntMgmt_DECLARED
typedef struct YCmza_CtntMgmt* mza_CtntMgmt;
yotk* mza_CtntMgmt__getTC(void);
#ifndef YCTC_mza_CtntMgmt
#define YCTC_mza_CtntMgmt   (mza_CtntMgmt__getTC())
#endif
#endif /* mza_CtntMgmt_DECLARED */

#ifndef mza_CtntMgmt_SUPP_FUNCS
#define mza_CtntMgmt_SUPP_FUNCS
void mza_CtntMgmt__free( mza_CtntMgmt* val, ysmff ffunc);
void mza_CtntMgmt__copy( mza_CtntMgmt* dest, mza_CtntMgmt* src, ysmaf afunc)
  ;
#endif /* mza_CtntMgmt_SUPP_FUNCS */

#ifndef mza_CtntMgmt_DEFINED
#define mza_CtntMgmt_DEFINED
struct yostub* mza_CtntMgmt__getStubs(void);
#define mza_CtntMgmt__stubs (mza_CtntMgmt__getStubs())
#endif /* mza_CtntMgmt_DEFINED */

CONST ysid* mza_CtntMgmt__getId(void);
#ifndef mza_CtntMgmt__id
#define mza_CtntMgmt__id   (mza_CtntMgmt__getId())
#endif
mza_CtntAtrLst mza_CtntMgmt_lstAtr( mza_CtntMgmt or, yoenv* ev, mza_Itr* 
  itr);
void mza_CtntMgmt_lstAtr_nw( mza_CtntMgmt or, yoenv* ev, mza_Itr* itr, 
  ysevt* _sem);
yopar* mza_CtntMgmt_lstAtr__getPars(void);
#ifndef mza_CtntMgmt_lstAtr_pars
#define mza_CtntMgmt_lstAtr_pars (mza_CtntMgmt_lstAtr__getPars())
#endif

mza_CtntAtrLst mza_CtntMgmt_lstAtrByNm( mza_CtntMgmt or, yoenv* ev, char* 
  name, mza_Itr* itr);
void mza_CtntMgmt_lstAtrByNm_nw( mza_CtntMgmt or, yoenv* ev, char* name, 
  mza_Itr* itr, ysevt* _sem);
yopar* mza_CtntMgmt_lstAtrByNm__getPars(void);
#ifndef mza_CtntMgmt_lstAtrByNm_pars
#define mza_CtntMgmt_lstAtrByNm_pars (mza_CtntMgmt_lstAtrByNm__getPars())
#endif

mza_CtntAtrLst mza_CtntMgmt_lstAtrByFileNm( mza_CtntMgmt or, yoenv* ev, 
  char* filename, mza_Itr* itr);
void mza_CtntMgmt_lstAtrByFileNm_nw( mza_CtntMgmt or, yoenv* ev, char* 
  filename, mza_Itr* itr, ysevt* _sem);
yopar* mza_CtntMgmt_lstAtrByFileNm__getPars(void);
#ifndef mza_CtntMgmt_lstAtrByFileNm_pars
#define mza_CtntMgmt_lstAtrByFileNm_pars ( \
  mza_CtntMgmt_lstAtrByFileNm__getPars())
#endif

#ifndef mza_CtntMgmt__tyimpl_DEFINED
#define mza_CtntMgmt__tyimpl_DEFINED
struct mza_CtntMgmt__tyimpl
{
  mza_CtntAtrLst (*lstAtr)( mza_CtntMgmt, yoenv*, mza_Itr*);
  mza_CtntAtrLst (*lstAtrByNm)( mza_CtntMgmt, yoenv*, char*, mza_Itr*);
  mza_CtntAtrLst (*lstAtrByFileNm)( mza_CtntMgmt, yoenv*, char*, mza_Itr*);
};
#endif /* mza_CtntMgmt__tyimpl_DEFINED */


/* interface mza_CtntPvdr declarations */
#ifndef mza_CtntPvdr_DECLARED
#define mza_CtntPvdr_DECLARED
typedef struct YCmza_CtntPvdr* mza_CtntPvdr;
yotk* mza_CtntPvdr__getTC(void);
#ifndef YCTC_mza_CtntPvdr
#define YCTC_mza_CtntPvdr   (mza_CtntPvdr__getTC())
#endif
#endif /* mza_CtntPvdr_DECLARED */

#ifndef mza_CtntPvdr_SUPP_FUNCS
#define mza_CtntPvdr_SUPP_FUNCS
void mza_CtntPvdr__free( mza_CtntPvdr* val, ysmff ffunc);
void mza_CtntPvdr__copy( mza_CtntPvdr* dest, mza_CtntPvdr* src, ysmaf afunc)
  ;
#endif /* mza_CtntPvdr_SUPP_FUNCS */

#ifndef mza_CtntPvdr_DEFINED
#define mza_CtntPvdr_DEFINED
struct yostub* mza_CtntPvdr__getStubs(void);
#define mza_CtntPvdr__stubs (mza_CtntPvdr__getStubs())
#endif /* mza_CtntPvdr_DEFINED */

CONST ysid* mza_CtntPvdr__getId(void);
#ifndef mza_CtntPvdr__id
#define mza_CtntPvdr__id   (mza_CtntPvdr__getId())
#endif
char* mza_CtntPvdr__get_name( mza_CtntPvdr or, yoenv* ev);
void mza_CtntPvdr__get_name_nw( mza_CtntPvdr or, yoenv* ev, ysevt* _sem);
yopar* mza_CtntPvdr__get_name__getPars(void);
#ifndef mza_CtntPvdr__get_name_pars
#define mza_CtntPvdr__get_name_pars (mza_CtntPvdr__get_name__getPars())
#endif

void mza_CtntPvdr__set_name( mza_CtntPvdr or, yoenv* ev, char* val);
void mza_CtntPvdr__set_name_nw( mza_CtntPvdr or, yoenv* ev, char* val, 
  ysevt* _sem);
yopar* mza_CtntPvdr__set_name__getPars(void);
#ifndef mza_CtntPvdr__set_name_pars
#define mza_CtntPvdr__set_name_pars (mza_CtntPvdr__set_name__getPars())
#endif

char* mza_CtntPvdr__get_desc( mza_CtntPvdr or, yoenv* ev);
void mza_CtntPvdr__get_desc_nw( mza_CtntPvdr or, yoenv* ev, ysevt* _sem);
yopar* mza_CtntPvdr__get_desc__getPars(void);
#ifndef mza_CtntPvdr__get_desc_pars
#define mza_CtntPvdr__get_desc_pars (mza_CtntPvdr__get_desc__getPars())
#endif

void mza_CtntPvdr__set_desc( mza_CtntPvdr or, yoenv* ev, char* val);
void mza_CtntPvdr__set_desc_nw( mza_CtntPvdr or, yoenv* ev, char* val, 
  ysevt* _sem);
yopar* mza_CtntPvdr__set_desc__getPars(void);
#ifndef mza_CtntPvdr__set_desc_pars
#define mza_CtntPvdr__set_desc_pars (mza_CtntPvdr__set_desc__getPars())
#endif

void mza_CtntPvdr_getAtr( mza_CtntPvdr or, yoenv* ev, mza_CtntPvdrAtr* 
  ctntpvdrAtr);
void mza_CtntPvdr_getAtr_nw( mza_CtntPvdr or, yoenv* ev, mza_CtntPvdrAtr* 
  ctntpvdrAtr, ysevt* _sem);
yopar* mza_CtntPvdr_getAtr__getPars(void);
#ifndef mza_CtntPvdr_getAtr_pars
#define mza_CtntPvdr_getAtr_pars (mza_CtntPvdr_getAtr__getPars())
#endif

void mza_CtntPvdr_destroy( mza_CtntPvdr or, yoenv* ev);
void mza_CtntPvdr_destroy_nw( mza_CtntPvdr or, yoenv* ev, ysevt* _sem);
yopar* mza_CtntPvdr_destroy__getPars(void);
#ifndef mza_CtntPvdr_destroy_pars
#define mza_CtntPvdr_destroy_pars (mza_CtntPvdr_destroy__getPars())
#endif

#ifndef mza_CtntPvdr__tyimpl_DEFINED
#define mza_CtntPvdr__tyimpl_DEFINED
struct mza_CtntPvdr__tyimpl
{
  void (*getAtr)( mza_CtntPvdr, yoenv*, mza_CtntPvdrAtr*);
  void (*destroy)( mza_CtntPvdr, yoenv*);
  char* (*_get_name)( mza_CtntPvdr, yoenv*);
  void (*_set_name)( mza_CtntPvdr, yoenv*, char*);
  char* (*_get_desc)( mza_CtntPvdr, yoenv*);
  void (*_set_desc)( mza_CtntPvdr, yoenv*, char*);
};
#endif /* mza_CtntPvdr__tyimpl_DEFINED */


/* interface mza_CtntPvdrFac declarations */
#ifndef mza_CtntPvdrFac_DECLARED
#define mza_CtntPvdrFac_DECLARED
typedef struct YCmza_CtntPvdrFac* mza_CtntPvdrFac;
yotk* mza_CtntPvdrFac__getTC(void);
#ifndef YCTC_mza_CtntPvdrFac
#define YCTC_mza_CtntPvdrFac   (mza_CtntPvdrFac__getTC())
#endif
#endif /* mza_CtntPvdrFac_DECLARED */

#ifndef mza_CtntPvdrFac_SUPP_FUNCS
#define mza_CtntPvdrFac_SUPP_FUNCS
void mza_CtntPvdrFac__free( mza_CtntPvdrFac* val, ysmff ffunc);
void mza_CtntPvdrFac__copy( mza_CtntPvdrFac* dest, mza_CtntPvdrFac* src, 
  ysmaf afunc);
#endif /* mza_CtntPvdrFac_SUPP_FUNCS */

#ifndef mza_CtntPvdrFac_DEFINED
#define mza_CtntPvdrFac_DEFINED
struct yostub* mza_CtntPvdrFac__getStubs(void);
#define mza_CtntPvdrFac__stubs (mza_CtntPvdrFac__getStubs())
#endif /* mza_CtntPvdrFac_DEFINED */

CONST ysid* mza_CtntPvdrFac__getId(void);
#ifndef mza_CtntPvdrFac__id
#define mza_CtntPvdrFac__id   (mza_CtntPvdrFac__getId())
#endif
mza_CtntPvdr mza_CtntPvdrFac_create( mza_CtntPvdrFac or, yoenv* ev, char* 
  name, char* desc);
void mza_CtntPvdrFac_create_nw( mza_CtntPvdrFac or, yoenv* ev, char* name, 
  char* desc, ysevt* _sem);
yopar* mza_CtntPvdrFac_create__getPars(void);
#ifndef mza_CtntPvdrFac_create_pars
#define mza_CtntPvdrFac_create_pars (mza_CtntPvdrFac_create__getPars())
#endif

#ifndef mza_CtntPvdrFac__tyimpl_DEFINED
#define mza_CtntPvdrFac__tyimpl_DEFINED
struct mza_CtntPvdrFac__tyimpl
{
  mza_CtntPvdr (*create)( mza_CtntPvdrFac, yoenv*, char*, char*);
};
#endif /* mza_CtntPvdrFac__tyimpl_DEFINED */


/* interface mza_CtntPvdrMgmt declarations */
#ifndef mza_CtntPvdrMgmt_DECLARED
#define mza_CtntPvdrMgmt_DECLARED
typedef struct YCmza_CtntPvdrMgmt* mza_CtntPvdrMgmt;
yotk* mza_CtntPvdrMgmt__getTC(void);
#ifndef YCTC_mza_CtntPvdrMgmt
#define YCTC_mza_CtntPvdrMgmt   (mza_CtntPvdrMgmt__getTC())
#endif
#endif /* mza_CtntPvdrMgmt_DECLARED */

#ifndef mza_CtntPvdrMgmt_SUPP_FUNCS
#define mza_CtntPvdrMgmt_SUPP_FUNCS
void mza_CtntPvdrMgmt__free( mza_CtntPvdrMgmt* val, ysmff ffunc);
void mza_CtntPvdrMgmt__copy( mza_CtntPvdrMgmt* dest, mza_CtntPvdrMgmt* src, 
  ysmaf afunc);
#endif /* mza_CtntPvdrMgmt_SUPP_FUNCS */

#ifndef mza_CtntPvdrMgmt_DEFINED
#define mza_CtntPvdrMgmt_DEFINED
struct yostub* mza_CtntPvdrMgmt__getStubs(void);
#define mza_CtntPvdrMgmt__stubs (mza_CtntPvdrMgmt__getStubs())
#endif /* mza_CtntPvdrMgmt_DEFINED */

CONST ysid* mza_CtntPvdrMgmt__getId(void);
#ifndef mza_CtntPvdrMgmt__id
#define mza_CtntPvdrMgmt__id   (mza_CtntPvdrMgmt__getId())
#endif
mza_CtntPvdrAtrLst mza_CtntPvdrMgmt_lstAtr( mza_CtntPvdrMgmt or, yoenv* ev, 
  mza_Itr* itr);
void mza_CtntPvdrMgmt_lstAtr_nw( mza_CtntPvdrMgmt or, yoenv* ev, mza_Itr* 
  itr, ysevt* _sem);
yopar* mza_CtntPvdrMgmt_lstAtr__getPars(void);
#ifndef mza_CtntPvdrMgmt_lstAtr_pars
#define mza_CtntPvdrMgmt_lstAtr_pars (mza_CtntPvdrMgmt_lstAtr__getPars())
#endif

void mza_CtntPvdrMgmt_getAtrByNm( mza_CtntPvdrMgmt or, yoenv* ev, char* 
  name, mza_CtntPvdrAtr* ctntPvdrAtr);
void mza_CtntPvdrMgmt_getAtrByNm_nw( mza_CtntPvdrMgmt or, yoenv* ev, char* 
  name, mza_CtntPvdrAtr* ctntPvdrAtr, ysevt* _sem);
yopar* mza_CtntPvdrMgmt_getAtrByNm__getPars(void);
#ifndef mza_CtntPvdrMgmt_getAtrByNm_pars
#define mza_CtntPvdrMgmt_getAtrByNm_pars ( \
  mza_CtntPvdrMgmt_getAtrByNm__getPars())
#endif

#ifndef mza_CtntPvdrMgmt__tyimpl_DEFINED
#define mza_CtntPvdrMgmt__tyimpl_DEFINED
struct mza_CtntPvdrMgmt__tyimpl
{
  mza_CtntPvdrAtrLst (*lstAtr)( mza_CtntPvdrMgmt, yoenv*, mza_Itr*);
  void (*getAtrByNm)( mza_CtntPvdrMgmt, yoenv*, char*, mza_CtntPvdrAtr*);
};
#endif /* mza_CtntPvdrMgmt__tyimpl_DEFINED */

EXTC_END
#endif /* MZALGCTN_IDL */
