/* GENERATED FILE
 * mtcr - public declarations
 * from /vobs/rts/pub/mtcr.idl
 */

#ifndef MTCR_IDL
#define MTCR_IDL

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif

EXTC_START

/**********  SEQUENCE DECLARATIONS *********/
#ifndef mkd_segment_DECLARED
#define mkd_segment_DECLARED
typedef struct mkd_segment mkd_segment;
#endif /* mkd_segment_DECLARED */

#ifndef YCIDL_sequence_mkd_segment_DEFINED
#define YCIDL_sequence_mkd_segment_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mkd_segment* _buffer;
} YCIDL_sequence_mkd_segment;
#ifndef YCIDL_sequence_mkd_segment_SUPP_FUNCS
#define YCIDL_sequence_mkd_segment_SUPP_FUNCS
#endif /* YCIDL_sequence_mkd_segment_SUPP_FUNCS */

#endif /* YCIDL_sequence_mkd_segment_DEFINED */

#ifndef mkd_segInfo_DECLARED
#define mkd_segInfo_DECLARED
typedef struct mkd_segInfo mkd_segInfo;
#endif /* mkd_segInfo_DECLARED */

#ifndef YCIDL_sequence_mkd_segInfo_DEFINED
#define YCIDL_sequence_mkd_segInfo_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mkd_segInfo* _buffer;
} YCIDL_sequence_mkd_segInfo;
#ifndef YCIDL_sequence_mkd_segInfo_SUPP_FUNCS
#define YCIDL_sequence_mkd_segInfo_SUPP_FUNCS
#endif /* YCIDL_sequence_mkd_segInfo_SUPP_FUNCS */

#endif /* YCIDL_sequence_mkd_segInfo_DEFINED */

/******* NON-SEQUENCE DECLARATIONS *******/
#ifndef mkd_assetCookieMaxlen_DECLARED
#define mkd_assetCookieMaxlen_DECLARED
#define mkd_assetCookieMaxlen ((sb2) 128)
#endif /* mkd_assetCookieMaxlen_DECLARED */

#ifndef mkd_assetCookie_DECLARED
#define mkd_assetCookie_DECLARED
typedef char* mkd_assetCookie;
yotk* mkd_assetCookie__getTC(void);
#ifndef YCTC_mkd_assetCookie
#define YCTC_mkd_assetCookie   (mkd_assetCookie__getTC())
#endif
#endif /* mkd_assetCookie_DECLARED */

#ifndef mkd_assetCookie_SUPP_FUNCS
#define mkd_assetCookie_SUPP_FUNCS
#endif /* mkd_assetCookie_SUPP_FUNCS */

#ifndef mkd_assetCookieList_DECLARED
#define mkd_assetCookieList_DECLARED
typedef YCIDL_sequence_string mkd_assetCookieList;
yotk* mkd_assetCookieList__getTC(void);
#ifndef YCTC_mkd_assetCookieList
#define YCTC_mkd_assetCookieList   (mkd_assetCookieList__getTC())
#endif
#endif /* mkd_assetCookieList_DECLARED */

#ifndef mkd_assetCookieList_SUPP_FUNCS
#define mkd_assetCookieList_SUPP_FUNCS
void mkd_assetCookieList__free( mkd_assetCookieList* val, ysmff ffunc);
void mkd_assetCookieList__copy( mkd_assetCookieList* dest, 
  mkd_assetCookieList* src, ysmaf afunc);
#endif /* mkd_assetCookieList_SUPP_FUNCS */

#ifndef mkd_systemTime_DECLARED
#define mkd_systemTime_DECLARED
typedef sb4 mkd_systemTime;
yotk* mkd_systemTime__getTC(void);
#ifndef YCTC_mkd_systemTime
#define YCTC_mkd_systemTime   (mkd_systemTime__getTC())
#endif
#endif /* mkd_systemTime_DECLARED */

#ifndef mkd_systemTime_SUPP_FUNCS
#define mkd_systemTime_SUPP_FUNCS
#endif /* mkd_systemTime_SUPP_FUNCS */

#ifndef mkd_segCapMask_DECLARED
#define mkd_segCapMask_DECLARED
typedef ub4 mkd_segCapMask;
yotk* mkd_segCapMask__getTC(void);
#ifndef YCTC_mkd_segCapMask
#define YCTC_mkd_segCapMask   (mkd_segCapMask__getTC())
#endif
#endif /* mkd_segCapMask_DECLARED */

#ifndef mkd_segCapMask_SUPP_FUNCS
#define mkd_segCapMask_SUPP_FUNCS
#endif /* mkd_segCapMask_SUPP_FUNCS */

#ifndef mkd_segCapVideo_DECLARED
#define mkd_segCapVideo_DECLARED
#define mkd_segCapVideo ((mkd_segCapMask) 1)
#endif /* mkd_segCapVideo_DECLARED */

#ifndef mkd_segCapVCBR_DECLARED
#define mkd_segCapVCBR_DECLARED
#define mkd_segCapVCBR ((mkd_segCapMask) 2)
#endif /* mkd_segCapVCBR_DECLARED */

#ifndef mkd_segCapVSeek_DECLARED
#define mkd_segCapVSeek_DECLARED
#define mkd_segCapVSeek ((mkd_segCapMask) 4)
#endif /* mkd_segCapVSeek_DECLARED */

#ifndef mkd_segCapVScan_DECLARED
#define mkd_segCapVScan_DECLARED
#define mkd_segCapVScan ((mkd_segCapMask) 8)
#endif /* mkd_segCapVScan_DECLARED */

#ifndef mkd_segCapAudio_DECLARED
#define mkd_segCapAudio_DECLARED
#define mkd_segCapAudio ((mkd_segCapMask) 65536)
#endif /* mkd_segCapAudio_DECLARED */

#ifndef mkd_segCapACBR_DECLARED
#define mkd_segCapACBR_DECLARED
#define mkd_segCapACBR ((mkd_segCapMask) 131072)
#endif /* mkd_segCapACBR_DECLARED */

#ifndef mkd_segCapASeek_DECLARED
#define mkd_segCapASeek_DECLARED
#define mkd_segCapASeek ((mkd_segCapMask) 262144)
#endif /* mkd_segCapASeek_DECLARED */

#ifndef mkd_segCapAScan_DECLARED
#define mkd_segCapAScan_DECLARED
#define mkd_segCapAScan ((mkd_segCapMask) 524288)
#endif /* mkd_segCapAScan_DECLARED */

#ifndef mkd_contStatus_DECLARED
#define mkd_contStatus_DECLARED
typedef ub4 mkd_contStatus;
yotk* mkd_contStatus__getTC(void);
#ifndef YCTC_mkd_contStatus
#define YCTC_mkd_contStatus   (mkd_contStatus__getTC())
#endif
#endif /* mkd_contStatus_DECLARED */

#ifndef mkd_contStatus_DEFINED
#define mkd_contStatus_DEFINED
#define mkd_contStatusDisk ((mkd_contStatus) 0)
#define mkd_contStatusTape ((mkd_contStatus) 1)
#define mkd_contStatusFeed ((mkd_contStatus) 2)
#define mkd_contStatusRolling ((mkd_contStatus) 3)
#define mkd_contStatusUnavailable ((mkd_contStatus) 4)
#endif /* mkd_contStatus_DEFINED */

#ifndef mkd_contStatus_SUPP_FUNCS
#define mkd_contStatus_SUPP_FUNCS
void mkd_contStatus__free( mkd_contStatus* val, ysmff ffunc);
void mkd_contStatus__copy( mkd_contStatus* dest, mkd_contStatus* src, ysmaf 
  afunc);
#endif /* mkd_contStatus_SUPP_FUNCS */

#ifndef mkd_compFormat_DECLARED
#define mkd_compFormat_DECLARED
typedef ub4 mkd_compFormat;
yotk* mkd_compFormat__getTC(void);
#ifndef YCTC_mkd_compFormat
#define YCTC_mkd_compFormat   (mkd_compFormat__getTC())
#endif
#endif /* mkd_compFormat_DECLARED */

#ifndef mkd_compFormat_SUPP_FUNCS
#define mkd_compFormat_SUPP_FUNCS
#endif /* mkd_compFormat_SUPP_FUNCS */

#ifndef mkd_compFormatError_DECLARED
#define mkd_compFormatError_DECLARED
#define mkd_compFormatError ((mkd_compFormat) 0)
#endif /* mkd_compFormatError_DECLARED */

#ifndef mkd_compFormatMpeg1_DECLARED
#define mkd_compFormatMpeg1_DECLARED
#define mkd_compFormatMpeg1 ((mkd_compFormat) 1)
#endif /* mkd_compFormatMpeg1_DECLARED */

#ifndef mkd_compFormatMpeg2_DECLARED
#define mkd_compFormatMpeg2_DECLARED
#define mkd_compFormatMpeg2 ((mkd_compFormat) 4)
#endif /* mkd_compFormatMpeg2_DECLARED */

#ifndef mkd_compFormatOrca_DECLARED
#define mkd_compFormatOrca_DECLARED
#define mkd_compFormatOrca ((mkd_compFormat) 8)
#endif /* mkd_compFormatOrca_DECLARED */

#ifndef mkd_compFormatRawKey_DECLARED
#define mkd_compFormatRawKey_DECLARED
#define mkd_compFormatRawKey ((mkd_compFormat) 1024)
#endif /* mkd_compFormatRawKey_DECLARED */

#ifndef mkd_compFormatSegWHdr_DECLARED
#define mkd_compFormatSegWHdr_DECLARED
#define mkd_compFormatSegWHdr ((mkd_compFormat) 8192)
#endif /* mkd_compFormatSegWHdr_DECLARED */

#ifndef mkd_compFormatSegWoHdr_DECLARED
#define mkd_compFormatSegWoHdr_DECLARED
#define mkd_compFormatSegWoHdr ((mkd_compFormat) 16384)
#endif /* mkd_compFormatSegWoHdr_DECLARED */

#ifndef mkd_compFormatDsmcc_DECLARED
#define mkd_compFormatDsmcc_DECLARED
#define mkd_compFormatDsmcc ((mkd_compFormat) 32768)
#endif /* mkd_compFormatDsmcc_DECLARED */

#ifndef mkd_prohib_DECLARED
#define mkd_prohib_DECLARED
typedef ub4 mkd_prohib;
yotk* mkd_prohib__getTC(void);
#ifndef YCTC_mkd_prohib
#define YCTC_mkd_prohib   (mkd_prohib__getTC())
#endif
#endif /* mkd_prohib_DECLARED */

#ifndef mkd_prohib_SUPP_FUNCS
#define mkd_prohib_SUPP_FUNCS
#endif /* mkd_prohib_SUPP_FUNCS */

#ifndef mkd_prohibError_DECLARED
#define mkd_prohibError_DECLARED
#define mkd_prohibError ((mkd_prohib) 2147483648)
#endif /* mkd_prohibError_DECLARED */

#ifndef mkd_prohibPause_DECLARED
#define mkd_prohibPause_DECLARED
#define mkd_prohibPause ((mkd_prohib) 1)
#endif /* mkd_prohibPause_DECLARED */

#ifndef mkd_prohibStop_DECLARED
#define mkd_prohibStop_DECLARED
#define mkd_prohibStop ((mkd_prohib) 2)
#endif /* mkd_prohibStop_DECLARED */

#ifndef mkd_prohibBlindFF_DECLARED
#define mkd_prohibBlindFF_DECLARED
#define mkd_prohibBlindFF ((mkd_prohib) 4)
#endif /* mkd_prohibBlindFF_DECLARED */

#ifndef mkd_prohibBlindRW_DECLARED
#define mkd_prohibBlindRW_DECLARED
#define mkd_prohibBlindRW ((mkd_prohib) 8)
#endif /* mkd_prohibBlindRW_DECLARED */

#ifndef mkd_prohibVisualFF_DECLARED
#define mkd_prohibVisualFF_DECLARED
#define mkd_prohibVisualFF ((mkd_prohib) 16)
#endif /* mkd_prohibVisualFF_DECLARED */

#ifndef mkd_prohibVisualRW_DECLARED
#define mkd_prohibVisualRW_DECLARED
#define mkd_prohibVisualRW ((mkd_prohib) 32)
#endif /* mkd_prohibVisualRW_DECLARED */

#ifndef mkd_prohibFrameAdv_DECLARED
#define mkd_prohibFrameAdv_DECLARED
#define mkd_prohibFrameAdv ((mkd_prohib) 64)
#endif /* mkd_prohibFrameAdv_DECLARED */

#ifndef mkd_prohibFrameRew_DECLARED
#define mkd_prohibFrameRew_DECLARED
#define mkd_prohibFrameRew ((mkd_prohib) 128)
#endif /* mkd_prohibFrameRew_DECLARED */

#ifndef mkd_posType_DECLARED
#define mkd_posType_DECLARED
typedef ub4 mkd_posType;
yotk* mkd_posType__getTC(void);
#ifndef YCTC_mkd_posType
#define YCTC_mkd_posType   (mkd_posType__getTC())
#endif
#endif /* mkd_posType_DECLARED */

#ifndef mkd_posType_DEFINED
#define mkd_posType_DEFINED
#define mkd_posTypeBeginning ((mkd_posType) 0)
#define mkd_posTypeCurrent ((mkd_posType) 1)
#define mkd_posTypeEnd ((mkd_posType) 2)
#define mkd_posTypeByte ((mkd_posType) 3)
#define mkd_posTypeTime ((mkd_posType) 4)
#define mkd_posTypeMillisecs ((mkd_posType) 5)
#define mkd_posTypeMpegSCR ((mkd_posType) 6)
#define mkd_posTypeMpegPCR ((mkd_posType) 7)
#define mkd_posTypeBlock ((mkd_posType) 8)
#define mkd_posTypeDsmcc ((mkd_posType) 9)
#define mkd_posTypeContFeed ((mkd_posType) 10)
#define mkd_posTypeUnformed ((mkd_posType) 11)
#endif /* mkd_posType_DEFINED */

#ifndef mkd_posType_SUPP_FUNCS
#define mkd_posType_SUPP_FUNCS
void mkd_posType__free( mkd_posType* val, ysmff ffunc);
void mkd_posType__copy( mkd_posType* dest, mkd_posType* src, ysmaf afunc);
#endif /* mkd_posType_SUPP_FUNCS */

#ifndef mkd_posByte_DECLARED
#define mkd_posByte_DECLARED
typedef struct mkd_posByte mkd_posByte;
#endif /* mkd_posByte_DECLARED */

#ifndef mkd_posByte_DEFINED
#define mkd_posByte_DEFINED
struct mkd_posByte
{
  sysb8 mkd_posByteOff;
};
yotk* mkd_posByte__getTC(void);
#ifndef YCTC_mkd_posByte
#define YCTC_mkd_posByte   (mkd_posByte__getTC())
#endif
#endif /* mkd_posByte_DEFINED */

#ifndef mkd_posByte_SUPP_FUNCS
#define mkd_posByte_SUPP_FUNCS
void mkd_posByte__free( mkd_posByte* val, ysmff ffunc);
void mkd_posByte__copy( mkd_posByte* dest, mkd_posByte* src, ysmaf afunc);
#endif /* mkd_posByte_SUPP_FUNCS */

#ifndef mkd_posTime_DECLARED
#define mkd_posTime_DECLARED
typedef struct mkd_posTime mkd_posTime;
#endif /* mkd_posTime_DECLARED */

#ifndef mkd_posTime_DEFINED
#define mkd_posTime_DEFINED
struct mkd_posTime
{
  ub4 mkd_posTimeHour;
  ub1 mkd_posTimeMinute;
  ub1 mkd_posTimeSecond;
  ub1 mkd_posTimeHundredth;
};
yotk* mkd_posTime__getTC(void);
#ifndef YCTC_mkd_posTime
#define YCTC_mkd_posTime   (mkd_posTime__getTC())
#endif
#endif /* mkd_posTime_DEFINED */

#ifndef mkd_posTime_SUPP_FUNCS
#define mkd_posTime_SUPP_FUNCS
void mkd_posTime__free( mkd_posTime* val, ysmff ffunc);
void mkd_posTime__copy( mkd_posTime* dest, mkd_posTime* src, ysmaf afunc);
#endif /* mkd_posTime_SUPP_FUNCS */

#ifndef mkd_posBlock_DECLARED
#define mkd_posBlock_DECLARED
typedef ub4 mkd_posBlock;
yotk* mkd_posBlock__getTC(void);
#ifndef YCTC_mkd_posBlock
#define YCTC_mkd_posBlock   (mkd_posBlock__getTC())
#endif
#endif /* mkd_posBlock_DECLARED */

#ifndef mkd_posBlock_SUPP_FUNCS
#define mkd_posBlock_SUPP_FUNCS
#endif /* mkd_posBlock_SUPP_FUNCS */

#ifndef mkd_posMs_DECLARED
#define mkd_posMs_DECLARED
typedef ub4 mkd_posMs;
yotk* mkd_posMs__getTC(void);
#ifndef YCTC_mkd_posMs
#define YCTC_mkd_posMs   (mkd_posMs__getTC())
#endif
#endif /* mkd_posMs_DECLARED */

#ifndef mkd_posMs_SUPP_FUNCS
#define mkd_posMs_SUPP_FUNCS
#endif /* mkd_posMs_SUPP_FUNCS */

#ifndef mkd_posSCR_DECLARED
#define mkd_posSCR_DECLARED
typedef sysb8 mkd_posSCR;
yotk* mkd_posSCR__getTC(void);
#ifndef YCTC_mkd_posSCR
#define YCTC_mkd_posSCR   (mkd_posSCR__getTC())
#endif
#endif /* mkd_posSCR_DECLARED */

#ifndef mkd_posSCR_SUPP_FUNCS
#define mkd_posSCR_SUPP_FUNCS
#endif /* mkd_posSCR_SUPP_FUNCS */

#ifndef mkd_posPCR_DECLARED
#define mkd_posPCR_DECLARED
typedef sysb8 mkd_posPCR;
yotk* mkd_posPCR__getTC(void);
#ifndef YCTC_mkd_posPCR
#define YCTC_mkd_posPCR   (mkd_posPCR__getTC())
#endif
#endif /* mkd_posPCR_DECLARED */

#ifndef mkd_posPCR_SUPP_FUNCS
#define mkd_posPCR_SUPP_FUNCS
#endif /* mkd_posPCR_SUPP_FUNCS */

#ifndef mkd_pos_DECLARED
#define mkd_pos_DECLARED
typedef struct mkd_pos mkd_pos;
#endif /* mkd_pos_DECLARED */

#ifndef mkd_pos_DEFINED
#define mkd_pos_DEFINED
struct mkd_pos
{
  mkd_posType _d;
  union
  {
    mkd_posTime mkd_posBegin;
    mkd_posTime mkd_posCur;
    mkd_posTime mkd_posEnd;
    mkd_posByte mkd_posBytePos;
    mkd_posTime mkd_posTimePos;
    mkd_posMs mkd_posMsPos;
    mkd_posSCR mkd_posSCRPos;
    mkd_posPCR mkd_posPCRPos;
    mkd_posBlock mkd_posBlockPos;
    mkd_posBlock mkd_posDsmcc;
    mkd_posTime mkd_posFeed;
    mkd_posTime mkd_posNoWay;
  } _u;
};
yotk* mkd_pos__getTC(void);
#ifndef YCTC_mkd_pos
#define YCTC_mkd_pos   (mkd_pos__getTC())
#endif
#endif /* mkd_pos_DEFINED */

#ifndef mkd_pos_SUPP_FUNCS
#define mkd_pos_SUPP_FUNCS
void mkd_pos__free( mkd_pos* val, ysmff ffunc);
void mkd_pos__copy( mkd_pos* dest, mkd_pos* src, ysmaf afunc);
#endif /* mkd_pos_SUPP_FUNCS */

#ifndef mkd_segMask_DECLARED
#define mkd_segMask_DECLARED
typedef ub4 mkd_segMask;
yotk* mkd_segMask__getTC(void);
#ifndef YCTC_mkd_segMask
#define YCTC_mkd_segMask   (mkd_segMask__getTC())
#endif
#endif /* mkd_segMask_DECLARED */

#ifndef mkd_segMask_SUPP_FUNCS
#define mkd_segMask_SUPP_FUNCS
#endif /* mkd_segMask_SUPP_FUNCS */

#ifndef mkd_segment_DECLARED
#define mkd_segment_DECLARED
typedef struct mkd_segment mkd_segment;
#endif /* mkd_segment_DECLARED */

#ifndef mkd_segment_DEFINED
#define mkd_segment_DEFINED
struct mkd_segment
{
  char* mkd_segFile;
  mkd_pos mkd_segStart;
  mkd_pos mkd_segEnd;
  mkd_segMask mkd_segFlags;
  mkd_prohib mkd_segProhib;
};
yotk* mkd_segment__getTC(void);
#ifndef YCTC_mkd_segment
#define YCTC_mkd_segment   (mkd_segment__getTC())
#endif
#endif /* mkd_segment_DEFINED */

#ifndef mkd_segment_SUPP_FUNCS
#define mkd_segment_SUPP_FUNCS
void mkd_segment__free( mkd_segment* val, ysmff ffunc);
void mkd_segment__copy( mkd_segment* dest, mkd_segment* src, ysmaf afunc);
#endif /* mkd_segment_SUPP_FUNCS */

#ifndef mkd_segmentList_DECLARED
#define mkd_segmentList_DECLARED
typedef YCIDL_sequence_mkd_segment mkd_segmentList;
yotk* mkd_segmentList__getTC(void);
#ifndef YCTC_mkd_segmentList
#define YCTC_mkd_segmentList   (mkd_segmentList__getTC())
#endif
#endif /* mkd_segmentList_DECLARED */

#ifndef mkd_segmentList_SUPP_FUNCS
#define mkd_segmentList_SUPP_FUNCS
void mkd_segmentList__free( mkd_segmentList* val, ysmff ffunc);
void mkd_segmentList__copy( mkd_segmentList* dest, mkd_segmentList* src, 
  ysmaf afunc);
#endif /* mkd_segmentList_SUPP_FUNCS */

#ifndef mkd_segInfo_DECLARED
#define mkd_segInfo_DECLARED
typedef struct mkd_segInfo mkd_segInfo;
#endif /* mkd_segInfo_DECLARED */

#ifndef mkd_segInfo_DEFINED
#define mkd_segInfo_DEFINED
struct mkd_segInfo
{
  mkd_segment mkd_segInfoSeg;
  char* mkd_segInfoType;
  char* mkd_segTitle;
  mkd_systemTime mkd_segCreateTime;
  ub4 mkd_segBitrate;
  sb4 mkd_segPresRate;
  mkd_compFormat mkd_segCmpFmt;
  mkd_segCapMask mkd_segCapabilities;
  ub4 mkd_segMilliseconds;
  sysb8 mkd_segByteLength;
  ub2 mkd_segFrameHeight;
  ub2 mkd_segFrameWidth;
  sb4 mkd_segAspectRatio;
  ub4 mkd_segFrameRate;
  sysb8 mkd_segInfoStartT;
  sysb8 mkd_segInfoEndT;
  mkd_contStatus mkd_segInfoCStat;
  mkd_prohib mkd_segProhibitions;
};
yotk* mkd_segInfo__getTC(void);
#ifndef YCTC_mkd_segInfo
#define YCTC_mkd_segInfo   (mkd_segInfo__getTC())
#endif
#endif /* mkd_segInfo_DEFINED */

#ifndef mkd_segInfo_SUPP_FUNCS
#define mkd_segInfo_SUPP_FUNCS
void mkd_segInfo__free( mkd_segInfo* val, ysmff ffunc);
void mkd_segInfo__copy( mkd_segInfo* dest, mkd_segInfo* src, ysmaf afunc);
#endif /* mkd_segInfo_SUPP_FUNCS */

#ifndef mkd_segInfoList_DECLARED
#define mkd_segInfoList_DECLARED
typedef YCIDL_sequence_mkd_segInfo mkd_segInfoList;
yotk* mkd_segInfoList__getTC(void);
#ifndef YCTC_mkd_segInfoList
#define YCTC_mkd_segInfoList   (mkd_segInfoList__getTC())
#endif
#endif /* mkd_segInfoList_DECLARED */

#ifndef mkd_segInfoList_SUPP_FUNCS
#define mkd_segInfoList_SUPP_FUNCS
void mkd_segInfoList__free( mkd_segInfoList* val, ysmff ffunc);
void mkd_segInfoList__copy( mkd_segInfoList* dest, mkd_segInfoList* src, 
  ysmaf afunc);
#endif /* mkd_segInfoList_SUPP_FUNCS */

#ifndef mkd_formatCode_DECLARED
#define mkd_formatCode_DECLARED
typedef char* mkd_formatCode;
yotk* mkd_formatCode__getTC(void);
#ifndef YCTC_mkd_formatCode
#define YCTC_mkd_formatCode   (mkd_formatCode__getTC())
#endif
#endif /* mkd_formatCode_DECLARED */

#ifndef mkd_formatCode_SUPP_FUNCS
#define mkd_formatCode_SUPP_FUNCS
#endif /* mkd_formatCode_SUPP_FUNCS */

#ifndef mkd_containerUnknown_DECLARED
#define mkd_containerUnknown_DECLARED
#define mkd_containerUnknown ((mkd_formatCode) "cunk")
#endif /* mkd_containerUnknown_DECLARED */

#ifndef mkd_containerMpeg1SS_DECLARED
#define mkd_containerMpeg1SS_DECLARED
#define mkd_containerMpeg1SS ((mkd_formatCode) "cm1s")
#endif /* mkd_containerMpeg1SS_DECLARED */

#ifndef mkd_containerMpeg2T_DECLARED
#define mkd_containerMpeg2T_DECLARED
#define mkd_containerMpeg2T ((mkd_formatCode) "cm2t")
#endif /* mkd_containerMpeg2T_DECLARED */

#ifndef mkd_containerRKF_DECLARED
#define mkd_containerRKF_DECLARED
#define mkd_containerRKF ((mkd_formatCode) "crkf")
#endif /* mkd_containerRKF_DECLARED */

#ifndef mkd_containerAVI_DECLARED
#define mkd_containerAVI_DECLARED
#define mkd_containerAVI ((mkd_formatCode) "cavi")
#endif /* mkd_containerAVI_DECLARED */

#ifndef mkd_containerOSF_DECLARED
#define mkd_containerOSF_DECLARED
#define mkd_containerOSF ((mkd_formatCode) "cosf")
#endif /* mkd_containerOSF_DECLARED */

#ifndef mkd_videoNone_DECLARED
#define mkd_videoNone_DECLARED
#define mkd_videoNone ((mkd_formatCode) "vnon")
#endif /* mkd_videoNone_DECLARED */

#ifndef mkd_videoUnknown_DECLARED
#define mkd_videoUnknown_DECLARED
#define mkd_videoUnknown ((mkd_formatCode) "vunk")
#endif /* mkd_videoUnknown_DECLARED */

#ifndef mkd_videoMpeg1_DECLARED
#define mkd_videoMpeg1_DECLARED
#define mkd_videoMpeg1 ((mkd_formatCode) "vmp1")
#endif /* mkd_videoMpeg1_DECLARED */

#ifndef mkd_videoMpeg2_DECLARED
#define mkd_videoMpeg2_DECLARED
#define mkd_videoMpeg2 ((mkd_formatCode) "vmp2")
#endif /* mkd_videoMpeg2_DECLARED */

#ifndef mkd_videoAviCVID_DECLARED
#define mkd_videoAviCVID_DECLARED
#define mkd_videoAviCVID ((mkd_formatCode) "avi1")
#endif /* mkd_videoAviCVID_DECLARED */

#ifndef mkd_videoAviIV32_DECLARED
#define mkd_videoAviIV32_DECLARED
#define mkd_videoAviIV32 ((mkd_formatCode) "avi2")
#endif /* mkd_videoAviIV32_DECLARED */

#ifndef mkd_videoAviUCOD_DECLARED
#define mkd_videoAviUCOD_DECLARED
#define mkd_videoAviUCOD ((mkd_formatCode) "avi3")
#endif /* mkd_videoAviUCOD_DECLARED */

#ifndef mkd_audioNone_DECLARED
#define mkd_audioNone_DECLARED
#define mkd_audioNone ((mkd_formatCode) "anon")
#endif /* mkd_audioNone_DECLARED */

#ifndef mkd_audioUnknown_DECLARED
#define mkd_audioUnknown_DECLARED
#define mkd_audioUnknown ((mkd_formatCode) "aunk")
#endif /* mkd_audioUnknown_DECLARED */

#ifndef mkd_audioMpeg1_DECLARED
#define mkd_audioMpeg1_DECLARED
#define mkd_audioMpeg1 ((mkd_formatCode) "amp1")
#endif /* mkd_audioMpeg1_DECLARED */

#ifndef mkd_audioMpeg2_DECLARED
#define mkd_audioMpeg2_DECLARED
#define mkd_audioMpeg2 ((mkd_formatCode) "amp2")
#endif /* mkd_audioMpeg2_DECLARED */

#ifndef mkd_audioWavePCM_DECLARED
#define mkd_audioWavePCM_DECLARED
#define mkd_audioWavePCM ((mkd_formatCode) "awv1")
#endif /* mkd_audioWavePCM_DECLARED */

#ifndef mkd_audioWaveADPCM_DECLARED
#define mkd_audioWaveADPCM_DECLARED
#define mkd_audioWaveADPCM ((mkd_formatCode) "awv2")
#endif /* mkd_audioWaveADPCM_DECLARED */

#ifndef mkd_audioWaveALAW_DECLARED
#define mkd_audioWaveALAW_DECLARED
#define mkd_audioWaveALAW ((mkd_formatCode) "awv3")
#endif /* mkd_audioWaveALAW_DECLARED */

#ifndef mkd_audioWaveMULAW_DECLARED
#define mkd_audioWaveMULAW_DECLARED
#define mkd_audioWaveMULAW ((mkd_formatCode) "awv4")
#endif /* mkd_audioWaveMULAW_DECLARED */

#ifndef mkd_contFormat_DECLARED
#define mkd_contFormat_DECLARED
typedef struct mkd_contFormat mkd_contFormat;
#endif /* mkd_contFormat_DECLARED */

#ifndef mkd_contFormat_DEFINED
#define mkd_contFormat_DEFINED
struct mkd_contFormat
{
  char* creator;
  mkd_formatCode container;
  mkd_formatCode video;
  mkd_formatCode audio;
  ub2 frameHeight;
  ub2 frameWidth;
  sb4 pelAspectRatio;
  ub4 frameRate;
};
yotk* mkd_contFormat__getTC(void);
#ifndef YCTC_mkd_contFormat
#define YCTC_mkd_contFormat   (mkd_contFormat__getTC())
#endif
#endif /* mkd_contFormat_DEFINED */

#ifndef mkd_contFormat_SUPP_FUNCS
#define mkd_contFormat_SUPP_FUNCS
void mkd_contFormat__free( mkd_contFormat* val, ysmff ffunc);
void mkd_contFormat__copy( mkd_contFormat* dest, mkd_contFormat* src, ysmaf 
  afunc);
#endif /* mkd_contFormat_SUPP_FUNCS */

#ifndef mtcr_maxImplNameLen_DECLARED
#define mtcr_maxImplNameLen_DECLARED
#define mtcr_maxImplNameLen ((ub2) 32)
#endif /* mtcr_maxImplNameLen_DECLARED */

#ifndef MTCR_EX_NOIMPL_DECLARED
#define MTCR_EX_NOIMPL_DECLARED
CONST ysid* mtcr_noImpl__getId(void);
#ifndef MTCR_EX_NOIMPL
#define MTCR_EX_NOIMPL   (mtcr_noImpl__getId())
#endif
#endif /* MTCR_EX_NOIMPL_DECLARED */

yotk* mtcr_noImpl__getTC(void);
#ifndef YCTC_mtcr_noImpl
#define YCTC_mtcr_noImpl   (mtcr_noImpl__getTC())
#endif
#ifndef MTCR_EX_BADIMPL_DECLARED
#define MTCR_EX_BADIMPL_DECLARED
CONST ysid* mtcr_badImpl__getId(void);
#ifndef MTCR_EX_BADIMPL
#define MTCR_EX_BADIMPL   (mtcr_badImpl__getId())
#endif
#endif /* MTCR_EX_BADIMPL_DECLARED */

#ifndef mtcr_badImpl_DECLARED
#define mtcr_badImpl_DECLARED
typedef struct mtcr_badImpl mtcr_badImpl;
#endif /* mtcr_badImpl_DECLARED */

#ifndef mtcr_badImpl_DEFINED
#define mtcr_badImpl_DEFINED
struct mtcr_badImpl
{
  char* implName;
};
yotk* mtcr_badImpl__getTC(void);
#ifndef YCTC_mtcr_badImpl
#define YCTC_mtcr_badImpl   (mtcr_badImpl__getTC())
#endif
#endif /* mtcr_badImpl_DEFINED */

#ifndef mtcr_badImpl_SUPP_FUNCS
#define mtcr_badImpl_SUPP_FUNCS
void mtcr_badImpl__free( mtcr_badImpl* val, ysmff ffunc);
void mtcr_badImpl__copy( mtcr_badImpl* dest, mtcr_badImpl* src, ysmaf afunc)
  ;
#endif /* mtcr_badImpl_SUPP_FUNCS */

#ifndef MTCR_EX_BADNAME_DECLARED
#define MTCR_EX_BADNAME_DECLARED
CONST ysid* mtcr_badName__getId(void);
#ifndef MTCR_EX_BADNAME
#define MTCR_EX_BADNAME   (mtcr_badName__getId())
#endif
#endif /* MTCR_EX_BADNAME_DECLARED */

#ifndef mtcr_badName_DECLARED
#define mtcr_badName_DECLARED
typedef struct mtcr_badName mtcr_badName;
#endif /* mtcr_badName_DECLARED */

#ifndef mtcr_badName_DEFINED
#define mtcr_badName_DEFINED
struct mtcr_badName
{
  char* theName;
};
yotk* mtcr_badName__getTC(void);
#ifndef YCTC_mtcr_badName
#define YCTC_mtcr_badName   (mtcr_badName__getTC())
#endif
#endif /* mtcr_badName_DEFINED */

#ifndef mtcr_badName_SUPP_FUNCS
#define mtcr_badName_SUPP_FUNCS
void mtcr_badName__free( mtcr_badName* val, ysmff ffunc);
void mtcr_badName__copy( mtcr_badName* dest, mtcr_badName* src, ysmaf afunc)
  ;
#endif /* mtcr_badName_SUPP_FUNCS */

#ifndef MTCR_EX_AUTHFAILED_DECLARED
#define MTCR_EX_AUTHFAILED_DECLARED
CONST ysid* mtcr_authFailed__getId(void);
#ifndef MTCR_EX_AUTHFAILED
#define MTCR_EX_AUTHFAILED   (mtcr_authFailed__getId())
#endif
#endif /* MTCR_EX_AUTHFAILED_DECLARED */

yotk* mtcr_authFailed__getTC(void);
#ifndef YCTC_mtcr_authFailed
#define YCTC_mtcr_authFailed   (mtcr_authFailed__getTC())
#endif

/* interface mtcr_resolve declarations */
#ifndef mtcr_resolve_DECLARED
#define mtcr_resolve_DECLARED
typedef struct YCmtcr_resolve* mtcr_resolve;
yotk* mtcr_resolve__getTC(void);
#ifndef YCTC_mtcr_resolve
#define YCTC_mtcr_resolve   (mtcr_resolve__getTC())
#endif
#endif /* mtcr_resolve_DECLARED */

#ifndef mtcr_resolve_SUPP_FUNCS
#define mtcr_resolve_SUPP_FUNCS
void mtcr_resolve__free( mtcr_resolve* val, ysmff ffunc);
void mtcr_resolve__copy( mtcr_resolve* dest, mtcr_resolve* src, ysmaf afunc)
  ;
#endif /* mtcr_resolve_SUPP_FUNCS */

#ifndef mtcr_resolve_DEFINED
#define mtcr_resolve_DEFINED
struct yostub* mtcr_resolve__getStubs(void);
#define mtcr_resolve__stubs (mtcr_resolve__getStubs())
#endif /* mtcr_resolve_DEFINED */

CONST ysid* mtcr_resolve__getId(void);
#ifndef mtcr_resolve__id
#define mtcr_resolve__id   (mtcr_resolve__getId())
#endif
mkd_segmentList mtcr_resolve_name( mtcr_resolve or, yoenv* ev, char* 
  resName, CORBA_Object authRef, yoany* destination);
void mtcr_resolve_name_nw( mtcr_resolve or, yoenv* ev, char* resName, 
  CORBA_Object authRef, yoany* destination, ysevt* _sem);
yopar* mtcr_resolve_name__getPars(void);
#ifndef mtcr_resolve_name_pars
#define mtcr_resolve_name_pars (mtcr_resolve_name__getPars())
#endif

#ifndef mtcr_resolve__tyimpl_DEFINED
#define mtcr_resolve__tyimpl_DEFINED
struct mtcr_resolve__tyimpl
{
  mkd_segmentList (*name)( mtcr_resolve, yoenv*, char*, CORBA_Object, 
    yoany*);
};
#endif /* mtcr_resolve__tyimpl_DEFINED */

EXTC_END
#endif /* MTCR_IDL */
