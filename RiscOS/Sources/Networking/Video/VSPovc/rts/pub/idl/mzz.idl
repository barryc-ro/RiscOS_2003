/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * mzz.idl
 *
 * This module defines the interface(s) between the Session Manager
 * and the rest of the system.
 *
 * Description:
 *
 * The Session Manager provides a set of interfaces for managing
 * sessions and their related resources.
 *
 * Revision history:
 * 05-Nov-96  alind  added additional documentation.
 * 03-Nov-96  alind  added exceptions.
 * 27-Oct-96  alind  moved sessionManager interface out as it is really a
 *                   private interface not a public interface. the factory
 *                   interface now provides the session allocation function
 *                   that was previously given by the sessionManager interface.
 * 15-Aug-96  alind  incorporated changes from design review...
 * 15-Jul-96  alind  moved virtual circuit stuff to mzc.idl...
 * 10-Jul-96  alind  updated...
 * 12-Jun-96  alind  preliminary IDL mailed out to world...
 * 07-Jun-96  alind  first pass at orbification begun...
 */
#ifndef MZZ_IDL_ORACLE
#define MZZ_IDL_ORACLE

#ifndef MZC_IDL_ORACLE
#include "mzc/idl"    // circuit interface and definitions
#endif

module mzz
{
  //
  // Exceptions
  //
  enum sessionException
  {
    sesExNotImplemented,     // requested operation not (yet) implemented

    // These may be thrown when setting up a session.
    //
    sesExNoSessionAvailable, // could not allocate session
    sesExInvalidClient,      // client device is not allowed on network

    // These may be thrown when dealing with a session's Resource(s)
    //
    sesExNoSuchResource,     // no resource found with given key

    // These may be thrown when dealing with a session's Circuit(s)
    //
    sesExNoSuchCircuit       // circuit is not associated with the session
  };
  exception sesEx {sessionException sessionFailType;};

  //
  // Data Declarations
  //

  // The clientDevice structure is used to represent a device which an
  // end-user would use to access the Real-Time Server (e.g. a pc,
  // set-top box, network computer, etc). A client device is uniquely
  // identified by some opaque key which may vary from deployment to
  // deployment as it is up to the service provider to decide what to
  // use as a client device identifier. The Real-Time Server makes no
  // assumptions about the client id other than it is unique.
  //
  struct clientDevice
  {
    mzc::clientDeviceId id; // some unique id for the set-top box (MAC
                            // address, serial #, network port, etc.) -
                            // it's opaque to us
  };

  // The resource structure is used to represent every session resource
  // that is not a circuit. Session resources are simply a way for 
  // applications or servers to associate arbitrary named attributes with a
  // session. 
  //
  struct resource
  {
    string key;
    any value;
  };
  typedef sequence<resource> resources;

  // Session Request Properties
  //   "proxy id"   - client device Id specified is not known by client
  //                  device and must be communicated to the client
  //   "proxy ses"  - session is being allocated by some third party on
  //                  behalf of the client device
  //   "needs boot" - client device has to be booted
  //   "needs mnA"  - client device cannot contact MediaNet Address
  //                  Server independently and so needs to be assigned one
  //                  via a proxy (i.e. the downstream)
  //
  typedef unsigned long sessProperty;
  const sessProperty sessNull      = 0x00000000;
  const sessProperty sessProxyId   = 0x00000001;
  const sessProperty sessNeedsBoot = 0x00000002;
  const sessProperty sessNeedsMnA  = 0x00000004;
  const sessProperty sessProxySes  = 0x00000008;

  // A "session" is a container for the circuit(s) and other resources
  // that need to be tracked on behalf of a client device. There is a
  // one-to-one mapping between sessions and client devices (i.e. a
  // client device may only have one session at a times). The attributes
  // of a session are:
  //   o the client device who the session is for
  //   o the circuit(s) being used by the client device
  //   o the resource(s) associated with the client device
  //
  interface ses;

  struct sesInfo
  {
    clientDevice  client;      // client device this session is for
    mzc::circuits circuits;    // circuits allocated for this session
    resources   resources;     // resources allocated for this session
  };
  typedef sequence<sesInfo> sesInfos;

  struct session
  {
    ses   or;                  // object reference for this session
    sesInfo info;              // attributes of this session
  };
  typedef sequence<session> sessions;

  interface ses
  {
    // Release - gracefully shuts down a session. This operation will:
    //   shutdown all circuits used exclusively by that session,
    //   free all resources associated with the session, and
    //   destroy the session.
    //
    void      Release();

    // ClientDevice Management methods
    //
    // GetInfo - returns the attributes of the session.
    //
    // GetClientDevice - returns the client device associated with the
    //   session.
    //
    sesInfo     GetInfo();
    clientDevice  GetClientDevice();

    // Circuit Management methods
    //
    // GetCircuits - returns a sequence containing circuit object
    //   references/data for all of the circuits used by a session. If
    //   the client has no circuits, a zero-length sequence is returned.
    //
    // AddCircuit  - calls the circuitManager to allocate a circuit
    //   which satisfies the given circuit specification and associates
    //   it with the session. For convenience, it returns the object
    //   reference of the created circuit. If the allocate call to
    //   circuitManager fails, an exception is thrown and no operation
    //   takes place.
    // 
    // AddCircuits - performs the same basic operation as AddCircuit
    //   but will allocate multiple circuits within the same call. If any
    //   of the requested circuits cannot be created, the entire operation
    //   fails and an exception will be thrown indicating the error
    //   encountered on the circuit that could not be created.
    //
    // DelCircuit  - disassociates the given circuit from the session
    //   and then gracefully shuts down the circuit. If the circuit is
    //   not associated with the session an exception is thrown and no
    //   operation takes place. 
    //
    mzc::circuits GetCircuits();

    mzc::circuit  AddCircuit(in mzc::cktspec ckt) raises(mzc::cktEx);
    mzc::circuits AddCircuits(in mzc::cktspecs ckts) raises(mzc::cktEx);
    void          DelCircuit(in mzc::ckt ckt) raises(mzc::cktEx, sesEx);

    // Resource Management methods
    //
    // GetResources - returns a sequence containing the non-circuit
    //   resources which are associated with the session. If the session
    //   has no non-circuit resources associated with it a zero-length
    //   sequence is returned.
    //
    // GetResource  - returns the resource identified by the given key
    //   (a string). If no resource exists with the given key, an
    //   exception is thrown.
    //
    // AddResource  - associates a resource with the session under the
    //   key specified in the resource struct. If a resource already
    //   exists under that key, the old resource is replaced by the new
    //   one and a copy of the old resource is returned.
    //
    // DelResource  - removes a resource identified by the given key from
    //   the session. If no resource exists with the given key, an
    //   exception is thrown.
    // 
    resources   GetResources();

    resource    GetResource(in string key) raises(sesEx);
    resource    AddResource(in resource value) raises(sesEx);
    void        DelResource(in string key) raises(sesEx);
  }; // interface ses
  typedef sequence<ses> sess;

  interface factory
  {
    // AllocateSession - establishes a session for a client device as
    //   well as sets up the client devices first (and possibly only)
    //   circuit. This call can be made by a server proxy on behalf of
    //   the client in addition to being made by the client itself.
    //   The circuit specification given must be a control circuit. If
    //   there is a problem (the first circuit cannot be allocated, etc.)
    //   an exception will be thrown.
    //
    // AllocateSessionEx performs the same basic function as
    //   AllocateSession but will allocate multiple circuits for the
    //   session in the same call. The first circuit must still be a
    //   control circuit and if any of the requested circuits are unable
    //   to be allocated, the entire operation will fail.
    //
    session AllocateSession(in sessProperty props,
                            in mzc::clientDeviceId clientId,
                            in mzc::cktspec req)
    raises(mzc::cktEx, sesEx);

    session AllocateSessionEx(in sessProperty props,
                              in mzc::clientDeviceId clientId,
                              in mzc::cktspecs req)
    raises(mzc::cktEx, sesEx);
  }; // interface factory
}; // module mzz

#endif
