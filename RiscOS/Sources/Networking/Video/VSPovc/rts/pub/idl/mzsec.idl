//----------------------------------------------------------------------------
// File: mzsec.idl - Media Zerver Streams Event Channels
//
// Description:
//   This module defines the events that are published by the stream service
//   via a CORBA event channel.
//   
//   Periodically, events occur in the stream service that might be of 
//   interest to a monitoring application server.  These include stream play
//   operations, denied authentication requests, and so on.  To provide for
//   this notification in an open manner, the stream service publishes 
//   these events on a CORBA event channel.  Any application can write the
//   code to attach to this event channel and monitor these events.
//
// Modification History:
//   Date	Name	Comments
//   04-Nov-96  dpawson Creation
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
// Oracle Corporation							     
// Oracle Media Server (TM)						     
// All Rights Reserved
// Copyright (C) 1993-1996						     
//---------------------------------------------------------------------------

#ifndef MKD_ORACLE
#include "mkd/idl"
#endif

#ifndef MZC_IDL
#include "mzc/idl"
#endif

#ifndef MZS_IDL
#include "mzs/idl"
#endif

module mzs
{   
   // In order for a consumer to attach to the OracleVideoServer::Stream
   // Service::EventChannel the name 'MZS_EventChannel' has to be resolved.
   // The returned object reference is the TypedEventChannel's objref. 
   // This objref is used by the consumer code to call 
   //yeceTeca_TypedEventChannel_for_consumers


   // This enumerated type lists the kinds of events that the stream service
   // may post to the event channel.

   enum evType
   {
      evTypeAlloc,		// Someone allocated a stream
      evTypePrepare,		// Someone prepared a stream
      evTypeSeqPrepare,		// Someone prepared a sequence
      evTypePlay,		// Someone played a stream
      evTypeFinish,		// Someone finished a stream
      evTypeDealloc,		// Someone deallocated a stream
      evTypeDenial		// A prepare authentication request was denied
   };

   // Event that indicates an mzs::factory::alloc call
   struct evAlloc
   {
      mzc::circuit	cliCircuit;	// The circuit requesting the stream
      mzs::capMask	capabilities;	// Its stated capabilities
      unsigned long	maxBitrate;	// Its stated maximum bitrate
   };

   // Event that indicates an mzs::stream::prepare call
   struct evPrepare
   {
      mkd::assetCookie	cookie;		// The asset being prepared
      Object		authRef;	// The auth cookie for the client
   };

   // Event that indicates an mzs::stream::prepareSequence call
   struct evSeqPrepare
   {
      mkd::assetCookieList	cookies;	// The assets being prepared
      Object			authRef;	// The auth cookie for the 
						// client
   };

   // Event that indicates an mzs::stream::play call
   struct evPlay
   {
      Object		authRef;	// The auth cookie passed by the 
   					// client to prepare
      mkd::pos		startPos;	// The start position for the play
      mkd::pos		endPos;		// The end position for the play
      long		playRate;	// The presentation rate for the play
      unsigned long	bitRate;	// The bitrate for the play
   };

   // Event that indicates an mzs::stream::finish call
   struct evFinish
   {
      Object		authRef;	// The auth cookie pass by the 
					// client to prepare
      boolean		loopCancel;	// Are they cancelling a loop?
   };

   // Event that indicates an mzs::stream::dealloc call
   struct evDealloc
   {
      mzc::circuit	cliCircuit;	// The circuit passed to alloc
   };

   // Event that indicates a prepare request was denied
   struct evDenial
   {
      mkd::assetCookieList	cookies;	// The assets being requested
      Object			authRef;	// The authorization cookie
   };

   // The union that described a generic event for the event channel
   union event switch(evType)
   {
      case evTypeAlloc:		evAlloc event_alloc;
      case evTypePrepare:	evPrepare event_prepare;
      case evTypeSeqPrepare:	evSeqPrepare event_seqPrepare;
      case evTypePlay:		evPlay event_play;
      case evTypeFinish:	evFinish event_finish;
      case evTypeDealloc:	evDealloc event_dealloc;
      case evTypeDenial:	evDenial event_denial;
   };

   interface ec
   {
      void sendEvent(in event tev);
   };

};
