/* mzb.idl
 *
 * Copyright (c) 1996 by Oracle Corporation.  All rights reserved.
 * 
 * This file specifies the calls that can be made to the boot service.
 * These calls are primarily concerned with getting and setting the boot
 * image that particular clients will use when booting.    
 */
#ifndef MZB_ORACLE
#define MZB_ORACLE

/*------------------------- Boot Config File Syntax -------------------------*/
/*---------------------------------------------------------------------------
  boot
  {
     physaddr1, bootimage1;
     physaddr2, bootimage2;
     physaddr3, bootimage3;
     default,   bootimagedef;
  }

Notes:
   The default statement will be used to determine the boot image for any
   client not defined by any other rule in the file, and must be present.
   The physaddr clauses can include wildcards.
-----------------------------------------------------------------------------*/

/*
 * Module: mzb
 * Function:
 *   A) Allow control of which image is selected by a network bootable device.
 *   B) Potentially allow generic process control operations on the boot image
 *      server.
 */

module mzb
{
  /*
   * Interface: image
   * Function:
   *   Provide routines to allow storage, manipulation, and retrieval of boot
   *   image information for network bootable devices.
   */
  interface image
  {
    /*--------------------------------- mzbErr ------------------------------*/
    /* This enumerated type lists the possible return values from mzb calls. */
    /*-----------------------------------------------------------------------*/
    enum err
    {
      errSucc,                              /* A call successfully completed */
      errBadClient,            /* An unidentifiable client was passed to mzb */
      errBufSmall,   /* We couldn't fit a return value due to a small buffer */
      errBadFile,            /* We were passed a bad configuration file name */
      errNoMem,                          /* We ran out of server side memory */
      errBadPhys,               /* A malformed physical address was detected */
      errRcInt,                         /* Internal error during remote call */
      errInfo,         /* PLACEHOLDER: Place informational values after this */
      errLast                                /* A token for the last message */
    };

    /* This allows us to pass Media Net physical address descriptions */
    /* NYI: This should probably be declared somewhere else */
    struct mnnpa
    {
      octet family[4];
      octet addr[20];
    };

    /*
     * Method: setPhys
     * Function:
     *   This call is used to set the boot image for an STB.  It is
     *   passed the physical address of the box whose boot image is
     *   being specified.  It is also passed the name of the boot
     *   image.  Finally, it is passed a uword indicating the
     *   permanence of this change.  If the change is truly permanent,
     *   it should be made in the boot configuration file; this call
     *   should NOT be used to put a permanent change into place.  If
     *   the uword is non-zero, its value will indicate how many times
     *   the boot image should be used before resetting to the value
     *   read from the configuration file.  If its value is zero, the
     *   passed image will be used until the boot server is restarted.
     * Input:
     *   phys          The physical address of the client to be altered 
     *   image         The name of the boot image to use for future boots.
     *   howmany       The number of times this boot image should be used 
     *                 before resetting to the default.  A value of zero
     *                 means the passed image will be used until the boot 
     *                 server restarts.
     * Output:
     *   None
     * Returns:
     *   errSucc       Operation was successful.
     *   errNoMem      No memory available for storage of image record.
     *   errBadPhys    The specified physical address was invalid.
     * Raises:
     *   None
     * Notes:
     *   None
     * 
     */    
    err setPhys(in mnnpa phys, in string image, in unsigned short howmany);
      
    /*
     * Method: get
     * Function:
     *   This call is used to find out what boot image should be used
     *   to boot a STB based on its physical address.  
     *   It no longer decrements the usage count; people who actually want to
     *   boot a box resolve a 'boot' asset cookie, and doing so does decrement
     *   the count.  This call is solely used for query purposes.
     *   The call is passed the physical address of a client.  It is also 
     *   passed a pointer to a string which will be set to point to a buffer 
     *   with the image in it.
     * Input:
     *   phys          The physical address of the client to be retrieved
     * Output:
     *   image         A buffer containing the name of the image to be used
     *                 for the next boot operation.
     * Returns:
     *   errSucc       Operation was successful.
     *   errBadPhys    The specified physical address was invalid.
     * Raises:
     *   None
     * Notes:
     *   The user is responsible for freeing the returned image buffer.
     * 
     */    
    err get(in mnnpa phys, out string image);

    /*
     * Method: upDateDB
     * Function:
     *   This function is called to request that the boot server refresh its
     *   default mappings of clients to boot images from a boot config
     *   file.  It is passed the name of this file.  It is also passed
     *   a flush flag - if this is true, any pending changes to a
     *   clients boot image (via the set() calls above) will be
     *   overwritten.  If flush is zero, then the default will be
     *   changed, but any explicitly stated boot images will be
     *   maintained.
     * Input:
     *   fname         Name of the boot config file to be used when
     *                 refreshing mappings. 
     *   flush         A flag indicating whether any pending boot images    
     *                 specified via the SetImage calls above should be     
     *                 maintained (a zero value) or flushed (a non-zero     
     *                 value).  
     * Output:
     *   None
     * Returns:
     *   errSucc       Operation was successful.
     *   errBadFile    An invalid configuration file was specified.
     *   errNoMem      Server ran out of memory while adding records.
     * Raises:
     *   None
     * Notes:
     *   None
     * 
     */    
    err updateDB(in string fname, in boolean flush);

    /*
     * Method: dumpMappings 
     * Function:
     *   This function can be called to have the boot image server dump the
     *   contents of its internal mapping table to the logger.
     *   It will likely be called by some sort of management utility.
     * Input:
     *   None
     * Output:
     *   None
     * Returns:
     *   errSucc       Operation was successful.
     * Raises:
     *   None
     * Notes:
     *   None
     * 
     */    
    err dumpMappings( );
  };  // End interface image
};  // End module mzb

#endif
