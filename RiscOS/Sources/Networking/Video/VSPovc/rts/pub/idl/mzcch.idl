/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * mzcch.idl
 *
 * This module defines the interface(s) between the (Virtual) Circuit Manager
 * and the rest of the system.
 *
 * Description:
 *
 * The (Virtual) Circuit Manager (aka VCM) provides a set of interfaces for
 * managing virtual circuits and their related communications channels.
 *
 * Revision history:
 * 03-Nov-96  alind  added exceptions.
 * 30-Oct-96  alind  changed netproto.info from sequence<octet> to string
 *                   since all the clients really want to use printable strings
 *                   instead of packed binary addresses anyway.
 * 27-Oct-96  alind  moved channelProvider interface out as it is really a
 *                   private interface not a public interface.
 * 19-Aug-96  alind  created from mzc.idl.
 */
#ifndef MZCCH_IDL_ORACLE
#define MZCCH_IDL_ORACLE

#ifndef MZCTT_IDL_ORACLE
#include "mzctt/idl"                             // transport wrap definitions
#endif

module mzc
{
  //
  // Exceptions
  //
  enum channelException
  {
    chnlExNotImplemented, // requested operation not (yet) implemented

    // These may be thrown during operations which allocate channels.
    //
    chnlExOutOfMemory,    // channelProvider is out of memory
    chnlExOutOfChannels,  // channelProvider is out of channels
    chnlExOutOfBandwidth, // channelProvider does not have sufficient
                          //   bandwidth to fulfill request
    chnlExBadProtocol,    // channelProvider does not support the
                          //   requested protocol
    chnlExBadAddress      // requested address is invalid
  };
  exception chnlEx {channelException channelFailType;};

  //
  // Data Declarations
  //

  // communication properties (defined for channels and/or circuits)
  //   direction (mandatory property):
  //     "down"   => channel/circuit server-->client
  //     "up"     => channel/circuit server<--client
  //   link allocation type (mandatory property):
  //     "pointcast" => channel/circuit is point-to-point
  //     "multicast" => channel/circuit is point-to-multipoint, for some
  //                    specified set of points
  //     "broadcast" => channel/circuit is point-to-multipoint, for an
  //                      unspecified set of points
  //   type (mandatory property):
  //     "control"     => channel/circuit is MediaNet transport addressable
  //                      and as such has an associated MediaNet Address. A
  //                      control channel/circuit must have a valid mnA.
  //     "isochronous" => channel/circuit is capable of transporting
  //                      isochronous data (i.e. the vpump). An isochronous
  //                      circuit will have an associated mzs::stream
  //                      reference (which may be NULL if unbound)
  //     "data"        => channel/circuit may transport non-isochronous data
  //   persistance (mandatory property):
  //     "transient"  => channel may disconnect/reconnect within lifetime of a
  //                     containing circuit (e.g. a 28.8kb dial-up connection)
  //     "persistant" => channel remains connected throughout a containing
  //                     circuits lifetime
  //   availability for allocation (mandatory property):
  //     "channel disabled"  => whether or not channel has been marked as
  //                            inoperable (and hence may not be assigned to
  //                            a circuit)
  //     "group disabled"    => whether or not channel belongs to a channel
  //                            group which has been marked as inoperable
  //
  typedef unsigned long commProperty;
  const commProperty propNull              = 0x00000000;
  const commProperty propDown              = 0x00000001;
  const commProperty propUp                = 0x00000002;
  const commProperty propPointcast         = 0x00000010;
  const commProperty propMulticast         = 0x00000020;
  const commProperty propBroadcast         = 0x00000040;
  const commProperty propControl           = 0x00000100;
  const commProperty propData              = 0x00000200;
  const commProperty propIsochronousData   = 0x00000400;
  const commProperty propTransientConnect  = 0x00001000;
  const commProperty propPersistantConnect = 0x00002000;
  const commProperty propDisabled          = 0x00010000;
  const commProperty propGroupDisabled     = 0x00020000;

  // mna is in network order and 8 octets long 
  //   there should probably be a OMN-blessed include file to define this...
  typedef sequence<octet, 8> logicalAddress;

  // A "channel" is used to designate a means of communication from a
  // server to a client.
  // channels (as defined here) have the following properties: 
  //   maximum bitrate => maximum bit rate of underlying network
  //   network/implementation specific descriptor
  //     "network protocol"      => e.g. UDP, AAL5, TCP, etc.
  //     "network host"          => hostname of server
  //     "network descriptor"    => network specific, opaque info
  //     "software interface"    => e.g. TLI, BSD sockets, etc.
  //     "software descriptor"   => software interface specific, opaque info
  //     "hardware interface"    => e.g. /dev/fddi0, /dev/le0, etc.
  //     "hardware descriptor"   => hardware interface specific, opaque info
  //     "max bitrate"           => max aggregate bps supported
  //     "preferred packet size" => "best" packet size (bytes)
  //     "max packet size"       => maximum packet size (bytes)
  //     "packet modulos"        => incremental packet size (bytes)
  //
  interface chnl;

  struct netproto
  {
    string name;      // "UDP", "TCP", "AAL5", etc.
    string info;      // protocol-specific info (e.g. IP address, port for UDP)
  };
  typedef sequence<netproto> netprotos;

  struct netapi
  {
    string          name;   // "TLI", "BSD sockets", etc.
    sequence<octet> info;   // API-specific info. only channel provider 
                            //   need understand contents
  };
  typedef sequence<netapi> netapis;

  struct netif
  {
    string          name;       // identifier for interface
    string          hostname;   // name of host containing hardware
    string          devicename; // "/dev/fddi0", etc.
    sequence<octet> info;       // interface-specific info. only channel
                                //   provider need understand contents
    unsigned long   curbr;      // current bitrate allocated on device (bps)
    unsigned long   maxbr;      // maximum bitrate device supports (bps)
  };
  typedef sequence<netif> netifs;

  struct pktinfo
  {
    unsigned long pref_size; // "preferred packet size" (bytes)
    unsigned long max_size;  // maximum packet size (bytes)
    unsigned long modulos;   // packets must be multiple of this size (bytes)
  };
  typedef sequence<pktinfo> pktinfos;

  struct link
  {
    string   name;           // identifier for link
    netproto protocol;       // e.g. "UDP", "AAL5", "TCP", etc.
    netapi   software;       // API used to access network hardware (sockets,
                             //   TLI, etc.)
    netif    hardware;       // hardware interface to network (FDDI card, etc.)
    pktinfo  packet;         // packet size parameters for link
  };
  typedef sequence<link> links;

  struct chnlInfo
  {
    commProperty   props;    // channel characteristics
    transportType  transport;// transport wrapping used
    link           comm;     // communications link to use
    unsigned long  bitrate;  // channel bitrate
    logicalAddress mna;      // only valid if props|commControl   
  };
  typedef sequence<chnlInfo> chnlInfos;

  struct channel
  {
    chnl     or;             // object reference for this channel
    chnlInfo info;           // attributes of this channel
  };
  typedef sequence<channel> channels;

  struct chnlreq
  {
    commProperty  props;     // requested channel properties
    transportType transport; // requested transport wrapping
    netproto      protocol;  // requested protocol/address info
    unsigned long bitrate;   // requested bitrate
  };

  enum chnlspecType
  {
    chnlspecTypeNone,
    chnlspecTypeRequest,
    chnlspecTypeChannel
  };
  union chnlspec switch(chnlspecType)
  {
    case chnlspecTypeNone   : long    none;
    case chnlspecTypeRequest: chnlreq req;
    case chnlspecTypeChannel: channel chnl;
  };
  typedef sequence<chnlspec> chnlspecs;

  struct chnlreqx
  {
    commProperty  props;     // requested channel properties
    transportType transport; // requested transport wrapping
    netproto      protocol;  // requested protocol/address info
    netapi        software;  // API used to access network hardware (sockets,
                             // TLI, etc.)
    netif         hardware;  // hardware interface to network
    pktinfo       packet;    // packet size parameters for link
    unsigned long bitrate;   // requested bitrate
  };

  interface chnl
  {
    // Channel Management methods
    //
    chnlInfo GetInfo();

    chnlInfo Rebuild(in chnlreqx req) raises(chnlEx);

    void     Enable();
    void     Disable();

    void     TearDown();
  }; // interface chnl
  typedef sequence<chnl> chnls;
}; // module mzc

#endif
