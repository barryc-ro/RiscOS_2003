#ifndef VESM_ORACLE
#define VESM_ORACLE

/* vesm.idl
 * Copyright (C)1996,1997 Oracle Corporation
 * 
 * This CORBA interface defines the methods that are used by the Oracle
 * Video Server (OVS) to implement the Video Encoding Standard API (VESAPI).
 * VESAPI is a method of loading encoded content (audio and/or video) onto
 * a video server, usually in realtime but not necessarily, which includes
 * metadata that the server can later use to provide VCR-style functionality
 * to clients.
 *
 * This file is only interesting to you if you are creating a server
 * implementation of VESAPI. We hope that VESAPI will become an
 * interoperability standard that uses vesm.idl for the control channel
 * and an as yet unspecified data channel. Therefore, assuming your
 * video server is CORBA based, you should just use this IDL. And even if
 * your server isn't built around CORBA, using a similar method structure
 * is still the way to go (the vesw.h functions map directly to these
 * methods).
 * 
 * 13-Aug-97 dweaver  Public debut
 */

#ifndef VES_ORACLE
# include "ves/idl"         // Realtime feeds datatypes
#endif /* !VES_ORACLE */

module ves
{
  enum cause
  {
    causeBadParam,       // illegal value passed from client
    causeServerError,    // internal server error. Contact server vendor.
    causeDiskError       // file system error; could be bad input or transient
  };
  exception bomb
  {
    cause   failType;
    string  detail;
  };

  //----------------------------------------------------------------------
  //                          BLOB INTERFACE
  //
  //  Blobs (Binary Large OBjects) are meant to be handled by other
  //  components in the system -- one component for each blob type.
  //  The ves::blob interface is a template for sending information
  //  to these other components. Each component has an implementation
  //  name that allows it to be found. For example, closed captioning
  //  is handled with an implementation identifier of "cc".
  //
  //  Blobs are initiated by the ves::feed::sendBlob call. In practice,
  //  it is expected that blob handler components will simply inherit
  //  this interface.
  //----------------------------------------------------------------------
  typedef sequence<octet> blobData;

  interface blob
  {
    //-------------------------------------------------------------------------
    // Name: ves::blob::contBlob
    // Function:
    //   Continue delivery of a multipart blob.
    // Input:
    //   moreComing   If FALSE, the object will be destroyed after this data
    //                is processed.
    //   data         Blob bytes
    // Raises:
    //   bomb         Exceptions are implementation specific; see the
    //                specific component for more information.
    //------------------------------------------------------------------------
    void contBlob (
	      in boolean         moreComing,
	      in blobData        data)
      raises(bomb);
  };

  //----------------------------------------------------------------------
  //                          FEED INTERFACE
  //
  //  The feed interface is tightly bound, so that every call that pertains
  //  to the same session actually gets sent to the correct instance of the
  //  feed server (and the server can maintain state about that feed client).
  //  Feed references are obtained from the ves::factory::createFeed method.
  //
  //----------------------------------------------------------------------
  interface feed
  {
    //-------------------------------------------------------------------------
    // Name: ves::feed::sendHdr
    // Function:
    //   Get the tagfile header information to the server if it wasn't included
    //   in the createFeed call.
    // Input:
    //   header       Height, width, sequence headers, etc.
    // Raises:
    //   bomb         Bad parameters, broken feeds, already have a header
    //------------------------------------------------------------------------
    void sendHdr(in hdr header)
      raises(bomb);

    //-------------------------------------------------------------------------
    // Name: ves::feed::sendTags
    // Function:
    //   Deliver frame information to the video server.
    // Input:
    //   tags         A sequence of frame data.
    // Raises:
    //   bomb         Bad parameters, broken feeds.
    //------------------------------------------------------------------------
    boolean sendTags(in tagList tags)
      raises(bomb);

    //-------------------------------------------------------------------------
    // Name: ves::feed::sendBlob
    // Function:
    //   Initiate the transfer of associated data to the server that is not
    //   part of the content stream. Examples might be a closed-captioning
    //   transcript, a JPEG of a movie poster, or the names of the people
    //   onscreen. This information is managed by a component of the
    //   appropriate type in the server. New data types can be implemented
    //   without the knowledge of the ves interface; in fact, this is
    //   encouraged. Of course, in order for this data to be exploited,
    //   applications also need to be written to communicate with the
    //   appropriate components.
    // Input:
    //   fileName     This is really more of a generic asset identifier,
    //                though it is often mapped to an actual file name.
    //                Basically, a very succinct name for the data contained
    //                in the blob.
    //   dataType     This is the implementation identifier of the component
    //                that is supposed to process the blob. For instance,
    //                closed-captioning is handled by the "cc" implementation.
    //   description  A detailed text desciption of this information.
    //   videoStart   Video start and end timestamps corresponding to this
    //   videoEnd     data. For instance, the entrance and exit times of
    //                an actor or beginning and end times of a scene.
    //   moreComing   If TRUE, the caller would like a ves::blob object
    //                returned in order to send additional data. Otherwise,
    //                no object will be returned.
    //   data         The first (potentially only) part of the blob.
    // Returns:
    //   If moreComing is true, will return a tightly bound object reference
    //   from the blob handling component which can be used to continue the
    //   data stream.
    // Raises:
    //   The most likely exception is an ORB (yo) error indicating that the
    //   requested server could not be found.
    //------------------------------------------------------------------------
    blob sendBlob (
              in string          fileName,     // data identifier
              in string          dataType,     // implementation identifier
              in string          description,  // data description
              in time            videoStart,   // part of the feed this blob
              in time            videoEnd,     // describes
              in boolean         moreComing,   // should a ref be returned?
              in blobData        data)
      raises(bomb);

    //-------------------------------------------------------------------------
    // Name: ves::feed::closeFeed
    // Function:
    //   Terminate the session between the encoder and the video server.
    // Returns:
    //   TRUE if the object was valid and a session was terminated.
    //-------------------------------------------------------------------------
    boolean closeFeed();

    //-------------------------------------------------------------------------
    // Name: ves::feed::query
    // Function:
    //   Return some basic information about the feed.
    // Notes:
    //   This monitoring function isn't particularly useful to the encoder
    //   client, but an SNMP or other monitoring agent may want this
    //   type of information. The feed object references are obtained
    //   from the ves::fcty::query method.
    //-------------------------------------------------------------------------
    struct info
    {
      string         rootName;
      format         compFmt;
      long long      totalBytesRecvd;
      long long      startTime;
      unsigned long  bitsPerSec;
      long long      durationInSecs;
    };
    void query (out info  fnord);
  };

  //----------------------------------------------------------------------
  //                         FACTORY INTERFACE
  //
  //  Encoders contact the fcty interface in order to obtain feed
  //  object references. Enough information is supplied for the server
  //  to make resource reservations.
  //----------------------------------------------------------------------
  interface fcty
  {
    // ves::fcty::pipeAddr is used to negotiate the channel that will be
    // used for the encoder to send data to the video server.
    //
    // The current implementations ignore the requested port. The server
    // returns a TCP socket to which the client is then expected to connect.
    typedef sequence<octet, 1024> pipeAddr;

    //-------------------------------------------------------------------------
    // Name: ves::fcty::createFeed
    // Function:
    //   Initiate a session with the video server
    // Inputs:
    //   baseName -- Identifier for the feed, typically used as the prefix
    //               for files created, default name for logical content, etc.
    //   bitrate  -- Content bitrate in bits per second
    //   rolling  -- TRUE for continuous realtime feed; FALSE for 1 step encode
    //   duration -- Expected duration of content (or amount of content to
    //               buffer on the server for a continuous realtime feed).
    //               Used by the server to allocate storage resources.
    //   avgFramesPerMin (various varieties) -- How many of the various
    //               types of tags to expect per MINUTE. Also used by the
    //               server to allocate storage resources.
    //   fullHdr  -- TRUE indicates that all of the values in the hdr are
    //               valid. FALSE indicates that only the format is correct,
    //               and the rest of the header will follow in a subsequent
    //               ves::feed::sendHdr call.
    //   hdr      -- See fullHdr, above
    //   reqPort  -- Where the encoder would like to send content
    // Outputs:
    //   dataPort -- Where the server will listen for content
    // Returns:
    //   A ves::feed object reference for future communication
    //-------------------------------------------------------------------------
    feed createFeed(
             in  string         baseName,
             in  boolean        rolling,
             in  unsigned long  bitrate,         // encoding bitrate of content
             in  time           duration,
	     in  unsigned long  avgIFramesPerMin, // Or RawKeys
             in  unsigned long  avgPFramesPerMin, // Or RawBias
             in  unsigned long  avgBFramesPerMin,
             in  boolean        fullHdr,
             in  hdr            feedHdr,
             in  pipeAddr       reqPort,
             out pipeAddr       dataPort)
      raises(bomb);

    // These are used to obtain information about the sessions currently
    // hosted on the server for monitoring purposes only. Not an official
    // VESAPI feature at this juncture. Using any method other than
    // ves::feed::query on the returned objects would be completely
    // unexpected by the server and probably cause an error.
    typedef sequence<feed> feedList;
    void query(out feedList  roster);
  }; /* interface fcty */

}; /* module ves */
#endif /* !VESM_ORACLE */
