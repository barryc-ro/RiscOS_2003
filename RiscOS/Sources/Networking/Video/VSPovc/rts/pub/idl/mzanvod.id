//
// mzanvod.idl - MZA Nvod Interfaces, Channel and Schedule
//
// Description:
//
// Modification History:
//   Name	  Date		  Comments
//   Parker Lord  08/13/97        Change Playlist to Logical Content.
//   Parker Lord  05/13/97        Add new interfaces for VSM.
//   Parker Lord  04/01/97        Added some better comments.
//   Parker Lord  12/12/96        Moved to rts vob and changed module name.
//   Swapan Jha   07/23/96        Initial creation.
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
// Oracle Corporation							     
// Oracle Media Server (TM)						     
// All Rights Reserved
// Copyright (C) 1993-1996						     


#ifndef MZANVOD_ORACLE
#define MZANVOD_ORACLE
//
//   IDL INCLUDES
///////////////////////////////////////////////////////////////////////////////
#ifndef MZACOM_ORACLE
#include "mzacom/idl"
#endif
#ifndef MKD_ORACLE
#include "mkd/idl"
#endif

 
//----------------------------------------------------------------------------
// Module: mza
// Function:
//   This module is responsible for all database operations for the 
//   video server.
//----------------------------------------------------------------------------
module mza
{
 
  //--------------------------------------------------------------------------
  // Forward Declarations
  //--------------------------------------------------------------------------
 
  interface Chnl;                 /* Channel interface */
  interface ChnlFac;              /* Channel factory interface */
  interface ChnlMgmt;             /* Channel management interface */
  interface LgCtnt;               /* Logical content interface */
  interface Schd;                 /* Schedule interface */
  interface SchdFac;              /* Schedule factory interface */
  interface SchdMgmt;             /* Schedule management interface */

  //--------------------------------------------------------------------------
  // Local Typedefs
  //--------------------------------------------------------------------------
  //

  //--------------------------------------------------------------------------
  // Data Types
  //--------------------------------------------------------------------------

   //-------------------------------------------------------------------   
   // Typedef: SchdAtr
   // Function: This structure represents a schedule's attributes
   // They are defined as follows:
   //    schdOR      - The schedules's Object Reference
   //    chnlOR      - The Object Reference of the channel to play the 
   //		       play list on
   //    lgCtntOR    - Reference to the LgCtnt to play for this schedule
   //    desc        - A description of the given to the schedule (optional)
   //    startDate   - The date and time to play the play list
   //    status      - The status of the schedule, (SCHEDULED, PLAYING, PLAYED)
   //    loop        - Loop status, (LOOPALL, LOOPNONE, LOOPLAST)
    //------------------------------------------------------------------- 

  struct SchdAtr                 
  {
     Schd       schdOR;           
     Chnl       chnlOR;          
     LgCtnt     lgCtntOR;     
     string     startDate;                        
     string     status;           
     string     loop;		  

  };

   //-------------------------------------------------------------------   
   // Typedef: SchdChnlAtr
   // Function: This structure represents a combination of a schedule and it's
   //		associated Channel. It also contains some information about the
   //		content to be played on the channel.
   // They are defined as follows:
   //    schdOR        - The Schedule Object Reference
   //    startDate     - Start Time and Date
   //    lgCtntOR      - LgCtnt OR
   //    assetCookie   - Asset Cookie for this LgCtnt
   //    lgCtntLabel   - LgCtnt's Label
   //    lgCtntName    - Name of the LgCtnt
   //    chnlLabel     - Channel Label
   //    chnlNum       - Channel number
   //    netAddr       - Physical Network address of channel
   //    maxBitRate    - The Maximum Bit rate for the Content
   //    status        - Schedule status
   //    format        - Content Format
   //    loop          - LOOPALL, LOOPLAST, LOOPNONE
   //------------------------------------------------------------------- 

  struct SchdChnlAtr
  {
     Schd       schdOR;		
     string     startDate;          
     LgCtnt     lgCtntOR;               
     string     assetCookie;          
     string     lgCtntLabel;          
     string     lgCtntName;           
     string     chnlLabel;             
     string     chnlNum;                
     string     netAddr;                
     long       maxBitRate;	
     string     status;		        
     mkd::formatCode     format;			
     string     loop;		        
  };
  typedef sequence <SchdChnlAtr> SchdChnlAtrLst; 

   //-------------------------------------------------------------------   
   // Typedef: ChnlAtr
   // Function: This structure contains information about a channel.
   // They are defined as follows:
   //    chnlOR       - The Channel Object Reference
   //    label        - The Channel's Label
   //    chnlNum      - The Channel's Number
   //    netAddr      - The Channel's physical network address
   //------------------------------------------------------------------- 
  struct ChnlAtr
  {
    Chnl    chnlOR;
    string  label;
    string  chnlNum;      
    string  netAddr;
  };
  typedef sequence <ChnlAtr> ChnlAtrLst;  // A sequence of ChnlAtr structures


   //--------------------------------------------------------------------------
   // Interface: Schd
   // Function: Interface to Schedules
   //   
   //--------------------------------------------------------------------------
   interface Schd
   {
   
    //-----------------------------------------------------------------------
    // Name: mza::Schd::destroy
    // Function:
    //   Destroys a schedule Object. A schedule may not be destroyed if 
    //   the status is anything other than 'SCHEDULED' or if the start time 
    //   is less than 30 minutes away. If the status is 'SCHEDULED' and the
    //   startDate is in the past, it will be destroyed.
    // Input:
    //   None
    // Output:
    //   None
    // Returns:
    //   Nothing
    // Raises:
    //   DataConversion, PersistenceError
    //------------------------------------------------------------------------
      void destroy()
	   raises (DataConversion, PersistenceError);
   
   
    //-----------------------------------------------------------------------
    // Name: mza::Schd::getAtr
    // Function:
    //   Gets all of a schedule's attributes. 
    // Input:
    //   fmt - The format we want the date string in
    // Output:
    //   schdAtr  - Place holder for the attributes.
    // Returns:
    //   Nothing
    // Raises:
    //   PersistenceError
    //------------------------------------------------------------------------
      void getAtr(out SchdAtr schdAtr, in string fmt)
	      raises (PersistenceError);

    //-----------------------------------------------------------------------
    // Name: mza::Schd::setAtr
    // Function:
    //   Sets all of the Schedules Attributes.
    // Input:
    //   schdAtr - SchdAtr structure containing all of the attributes to be 
    //             set.
    //   fmt     - The format the date string will be in.
    // Output:
    //   None
    // Returns:
    //   Nothing
    // Raises:
    //   DataConversion, PersistenceError
    //------------------------------------------------------------------------
      void setAtr(in SchdAtr schdAtr, in string fmt)
	      raises (DataConversion, PersistenceError);
   
   
    //-----------------------------------------------------------------------
    // Name: mza::Schd::setStatus
    // Function:
    //   Update the status of the Schedule. Valid Status values should be kept
    //   to SCHEDULED, PLAYING, PLAYED, and ERROR.
    // Input:
    //   status   - New status to be set for the schedule
    // Output:
    //   None
    // Returns:
    //   Nothing
    // Raises:
    //   DataConversion, PersistenceError
    //------------------------------------------------------------------------
      void setStatus(in string status)
	      raises (DataConversion, PersistenceError);
   
   };
   //--------------------------------------------------------------------------
   // Interface: SchdFac
   // Function:
   //   Allows creation of new Schd Objects
   //--------------------------------------------------------------------------
   interface SchdFac
   {
      
     // Constructor 
    //-----------------------------------------------------------------------
    // Name: mza::SchdFac::create
    // Function:
    //   Creates new schedule objects from the input parameters passed in.
    // Input:
    //   chnl		- The channel the schedule object will play to
    //   lgCtntOR	- The content to be played by the schedule
    //   startDate	- The data and time the content will be played
    //   fmt		- A string containing the format of the startDate
    //			  (and optionally, the stopDate).
    //   loop		- Set to LOOPALL, LOOPLAST or LOOPNONE for looping
    //			  properties. LOOPLAST is invalid unless there is 
    //			  more than one item in the Play List 
    //	 stopDate       - To create a series of schedules, set this variable to
    //			  the date you would like new schedule items to be 
    //			  created until. If you only want to create one, set
    //			  this to NULL or an empty string.
    //   interval       - If stopDate is non-NULL, schedules will be created 
    //			  every 'interval' seconds until the stopDate is 
    //			  reached. If interval is 0 in any case, only 1 schedule
    //			  will be created.
    // Output:
    //   None
    // Returns:
    //   New Schd Object Reference. In the case that many schedules are 
    //   created, an OR to the last one created will be returned.
    // Raises:
    //   DataConversion, PersistenceError
    //------------------------------------------------------------------------
     Schd  create(in Chnl chnl,
		  in LgCtnt lgCtntOR,
		  in string  startDate,
		  in string fmt,
		  in string loop,
		  in string stopDate,
		  in long interval)
	   raises (DataConversion, PersistenceError);
   
   };
   
   //--------------------------------------------------------------------------
   // Interface: SchdMgmt
   // Function:
   //   Methods allowing operations on groups of Schedule Objects
   //--------------------------------------------------------------------------
   interface SchdMgmt
   {
      
    //-----------------------------------------------------------------------
    // Name: mza::SchdMgmt::lstAtrByDate
    // Function:
    //   This method returns a list of information about content to be played  
    //   for a specified time period. This method returns all the 
    //   information about the scheduled content which needs to be played 
    //   in the next time period starting at 'startDate' and a duration 
    //   as specified in 'mins'.
    // Input:
    //   startDate	- The Date/Time string specifiying the start time 
    //			  we would like to have information returned for.
    //   mins		- The duration in minutes we would like to retrieve 
    //			  data for starting from the time in startDate.
    //   fmt		- The format of the startDate string.
    //   status		- If this is specified, we will only returned 
    //			  schedule items which have a status which is equal 
    //			  to the value of this item. If it is NULL, then
    //			  all schedule objects are returned regardless of 
    //		          their status
    //   itr		- Specifies the maximum number of items to return 
    //			  as well as which item to start with. See comments 
    //			  in mzacom on Itr.
    // Output:
    //   curDate	- The current date, in the format as specified in fmt.
    //   itr		- Updated values for the number of items 
    //			  actually returned and the new position.
    // Returns:
    //   Returns a SchdChnlAtrLst containing values for all the items 
    //	 scheduled in the time period startDate + mins.
    // Raises:
    //   DataConversion, PersistenceError
    //------------------------------------------------------------------------
      SchdChnlAtrLst  lstAtrByDate ( in string  startDate,
					in long    mins,
					in string  fmt,
					in string  status,
					out string curDate,
					inout Itr  itr)
			 raises (DataConversion, PersistenceError);
   
   
   
    //-----------------------------------------------------------------------
    // Name: mza::SchdMgmt::lstAtrByLCNm
    // Function:
    //   This method returns a list of information about content to be played  
    //   for a specified time period for a specific named PlayList. This 
    //   method returns all the information about the scheduled content 
    //   which needs to be played  in the next time period starting 
    //   at 'startDate' and a duration as specified in 'mins'.
    // Input:
    //   lgCtntNm	- The name of tyhe content to return the information 
    //			  about 
    //   startDate	- The Date/Time string specifiying the start time 
    //			  we would like to have information returned for.
    //   mins		- The duration in minutes we would like to retrieve 
    //			  data for starting from the time in startDate.
    //   fmt		- The format of the startDate string.
    //   status		- If this is specified, we will only returned 
    //			  schedule items which have a statues which is equal 
    //			  to the value of this item.
    //   itr		- Specifies the maximum number of items to return 
    //			  as well as which item to start with. See comments 
    //			  in mzacom on Itr.
    // Output:
    //   curDate	- The current date, in the format as specified in fmt.
    //   itr		- Updated values for the number of items 
    //			  actually returned and the new position.
    // Returns:
    //   Returns a SchdChnlAtrLst containing values for all the items 
    //	 scheduled in the time period startDate + mins for the playlist object.
    // Raises:
    //   PersistenceError
    //------------------------------------------------------------------------
      SchdChnlAtrLst    lstAtrByLCNm(in string  lgCtntNm,
				      in string   startDate,
				      in long     mins,
				      in string   fmt,
				      in string   status,
				      out string curDate,
				      inout Itr   itr)
			 raises (PersistenceError, DataConversion);
         
    //-----------------------------------------------------------------------
    // Name: mza::SchdMgmt::getCurDate
    // Function:
    //   This method retrieves the current system date & time in the 
    //   specified format
    // Input:
    //   fmt 	- The format we would like the date to be in.
    // Output:
    //   None
    // Returns:
    //   Returns a string containing the date formatted as requested.
    // Raises:
    //   DataConversion, PersistenceError
    //------------------------------------------------------------------------
      string getCurDate (in string fmt)
	     raises (DataConversion, PersistenceError);
   
   };
   
   //--------------------------------------------------------------------------
   // Interface: Chnl
   // Function:
   //   Implements funcionality of the Channel Object
   //--------------------------------------------------------------------------
   interface Chnl
   {
      
   
    //-----------------------------------------------------------------------
    // Name: mza::Chnl::setAtr
    // Function:
    //   Sets all the attributes for the channel object
    // Input:
    //   chnlAtr - structure containing the new channel attributes
    // Output:
    //   None
    // Returns:
    //   Nothing
    // Raises:
    //   DataConversion, PersistenceError
    //------------------------------------------------------------------------
      void setAtr(in ChnlAtr chnlAtr)      
	   raises (DataConversion, PersistenceError);
   
    //-----------------------------------------------------------------------
    // Name: mza::Chnl::getAtr
    // Function:
    //   Gets all the attributes for the channel object
    // Input:
    //   None
    // Output:
    //   chnlAtr - structure containing the channel's attributes
    // Returns:
    //   Nothing
    // Raises:
    //   PersistenceError
    //------------------------------------------------------------------------
      void getAtr(out ChnlAtr chnlAtr)      
	   raises (PersistenceError);
   
    //-----------------------------------------------------------------------
    // Name: mza::Chnl::destroy
    // Function:
    //   Destroys a channel object. If the channel is in any schedule, 
    //   it will not be destroyed.
    // Input:
    //   None
    // Output:
    //   None
    // Returns:
    //   Nothing
    // Raises:
    //   PersistenceError
    //------------------------------------------------------------------------
      void destroy()                        // Destroys the channel.
	   raises (PersistenceError);
   };
   
   
   //--------------------------------------------------------------------------
   // Interface: ChnlFac
   // Function:
   //   Creates Channel Objects
   //--------------------------------------------------------------------------
   interface ChnlFac
   {
   
    //-----------------------------------------------------------------------
    // Name: mza::ChnlFac::create
    // Function:
    //   Create new channel objects
    // Input:
    //   label		- The label for the new channel
    //   netAddr	- The network address the channel represents in the 
    //			  form protocol:IP_address:port
    //   chnlNum	- A channel number for the new channel
    // Output:
    //   None
    // Returns:
    //   Nothing
    // Raises:
    //   DataConversion, PersistenceError
    //------------------------------------------------------------------------
      Chnl create( in string label,
		   in string netAddr,
		   in string chnlNum)
	   raises (DataConversion, PersistenceError);
   };
   
   
   //--------------------------------------------------------------------------
   // Interface: ChnlMgmt
   // Function:
   //   Methods for managing groups of channel objects
   //--------------------------------------------------------------------------
   interface ChnlMgmt
   {
    //-----------------------------------------------------------------------
    // Name: mza::ChnlMgmt::lstAtr
    // Function:
    //   returns an attribute list of all the channel objects in the system
    // Input:
    //   itr		- Specifies the maximum number of items to return 
    //			  as well as which item to start with. See comments 
    //			  in mzacom on Itr.
    // Output:
    //   itr		- Updated values for the number of items 
    //			  actually returned and the new position.
    // Returns:
    //   List of channel attributes
    // Raises:
    //   PersistenceError
    //------------------------------------------------------------------------
     ChnlAtrLst lstAtr(inout Itr itr)
		raises (PersistenceError);

    //-----------------------------------------------------------------------
    // Name: mza::ChnlMgmt::lstAtrByNm
    // Function:
    //   returns an attribute list of all the channel objects in the system
    //   which have the given name. The name may contain database wildcard 
    //   characters such as % and _.
    // Input:
    //   name		- The name to search for.
    //
    //   itr		- Specifies the maximum number of items to return 
    //			  as well as which item to start with. See comments 
    //			  in mzacom on Itr.
    // Output:
    //   itr		- Updated values for the number of items 
    //			  actually returned and the new position.
    // Returns:
    //   List of channel attributes
    // Raises:
    //   PersistenceError
    //------------------------------------------------------------------------
     ChnlAtrLst lstAtrByNm(in string name, inout Itr itr)
		raises (PersistenceError, DataConversion);
     
   };
   

};                              /* end of oms module */

#endif                          /* end of end if */
