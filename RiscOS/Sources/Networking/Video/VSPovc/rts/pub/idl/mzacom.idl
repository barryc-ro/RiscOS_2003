//
// File: mzacom.idl - Common MZA definitions
//
// Description:
//
// Modification History:
//   Date	Name	Comments
//   11-Dec-96  plord   copied from ao vob and commented 
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
// Oracle Corporation							     
// Oracle Media Server (TM)						     
// All Rights Reserved
// Copyright (C) 1993-1996						     
//---------------------------------------------------------------------------

#ifndef MZACOM_ORACLE
#define MZACOM_ORACLE

#ifndef ub4
#include "yostd/idl"
#endif

//----------------------------------------------------------------------------
// Generic sequence of objects
//----------------------------------------------------------------------------
typedef sequence <Object> ObjLst;

//----------------------------------------------------------------------------
// Iterator for returning items from a list method. An Iterator is used 
// when more than one item may be returned from a method. The iterator is 
// used to specify which item to start with when constructing the list of 
// items to return, and the maximum number if items which should be returned 
// at one time. Using the iterator, it is possible to return a large number 
// of items a few at a time. Whan there are no more items to return, 
// Position will be set to -1.
//
//     Position - Specifies which item is the entire set of items to 
//	   	  return as the first item in the returned list. 
//     NumItems - The maximum number of items to return in the list at one 
//		  time.
//----------------------------------------------------------------------------
struct Itr
{
  long   Position;
  long   NumItems;
};



//----------------------------------------------------------------------------
// Constant for all mza "system" exceptions
//----------------------------------------------------------------------------
#define MZA_STDEX PersistenceError, NoMemory, BadObject, \
Internal, DataConversion, CommunicationFailure, ImplementationLimit,\
 NotImplemented, NoPermission, XaException


//----------------------------------------------------------------------------
// Module: mza
// Function:
//   This module is responsible for all database operations for the 
//   video server.
//----------------------------------------------------------------------------
module mza
{
  //--------------------------------------------------------------------------
  // Typedefs
  //--------------------------------------------------------------------------
  typedef ::Itr Itr;

  
  typedef ::ObjLst ClipLst;

  typedef ::ObjLst CtntPvdrLst;
  typedef ::ObjLst CtntLst;

  typedef ::ObjLst LgCtntLst;

  //--------------------------------------------------------------------------
  // Enums
  // indicates whether processing was completed prior to an exception
  //--------------------------------------------------------------------------
  enum opstatus
  {
    completed,                                              // completed 
    notComplete                                             // operation failed
  };

  //--------------------------------------------------------------------------
  // Exceptions
  // All Common MZA Exceptions are defined here
  //--------------------------------------------------------------------------

  //--------------------------------------------------------------------------
  // errors related to the Oracle database
  //--------------------------------------------------------------------------
  exception   PersistenceError
  {
    opstatus   status;
    string     description;
    long       sqlcode;
    string     sqlerrmc;
    long       errorCode;
  };
  //--------------------------------------------------------------------------
  // memory allocation failures (when malloc() returns NULL)
  //--------------------------------------------------------------------------
  exception   NoMemory
  {
    opstatus   status;
    string     description;
    long       memorySize;
    long       errorCode;
  };

  //--------------------------------------------------------------------------
  // no persistent data associated with the passed reference 
  //--------------------------------------------------------------------------
  exception   BadObject
  {
    opstatus   status;
    string     description;
    Object     objRef;
    long       errorCode;
  };
  
  //--------------------------------------------------------------------------
  // unresolvable system error (OS, OMN, MZAerver, etc.. )
  //--------------------------------------------------------------------------
  exception   Internal
  {
    opstatus   status;
    string     description;
    long       errorCode;
  };

  //--------------------------------------------------------------------------
  // data conversion error, Usually a bad parameter
  //--------------------------------------------------------------------------
  exception   DataConversion
  {
    opstatus   status;
    string     description;
    short      paramPosition;
    long       errorCode;
  };

  //--------------------------------------------------------------------------
  // OMN errors
  //--------------------------------------------------------------------------
  exception   CommunicationFailure
  {
    opstatus   status;
    string     description;
    long       omnErrorNum;
    string     omnErrorMsg;
    long       errorCode;
  };

  //--------------------------------------------------------------------------
  // implementation limit exceeded
  //--------------------------------------------------------------------------
  exception   ImplementationLimit
  {
    opstatus   status;
    string     description;
    long       scopeValue;
    long       errorCode;
  };

  //--------------------------------------------------------------------------
  // standard exceptions defined by the transactions specification
  //--------------------------------------------------------------------------
  exception   TransactionRequired {};
  exception   TransactionRolledBack {};
  exception   InvalidTransaction {};

  //--------------------------------------------------------------------------
  // methods which are not implemented 
  //--------------------------------------------------------------------------
  exception   NotImplemented
  {
    opstatus   status;
    string     description;
    long       errorCode;
  };

  //--------------------------------------------------------------------------
  // insufficient priviledge exceptions
  //--------------------------------------------------------------------------
  exception NoPermission
  {
    opstatus   status;
    string     description;
    long       errorCode;
  };

  exception XaException
  {
    opstatus status;
    string   description;
    long     errorCode;
  };

  //--------------------------------------------------------------------------
  //  XA related structures. Private for MZA Layer transactions
  //--------------------------------------------------------------------------

  //--------------------------------------------------------------------------
  // Identification strings for uniqueness of transactions used by the 
  // functions defined in mzatxi.h. These two values 
  // are stored in the XA XID structure which identifies the transaction.
  // These should never have to be used outside the mzatxi functions.
  //
  //     addr      - Initialized when a new transaction is begun.
  //     call_time - Initialized when a new transaction is begun or migrated.  
  //--------------------------------------------------------------------------
  struct svrId
  {
    long long   addr;
    long long   call_time;
  };
  //--------------------------------------------------------------------------
  // Structure for transaction ID (XID) - based on XA.
  //--------------------------------------------------------------------------
  struct otid_t
  {
    sb4              formatID;
    ub4              gtrid_length;
    ub4              bqual_length;
    sequence <octet> tid;
  };

  //--------------------------------------------------------------------------
  // Structure for keeping track of a particular transaction.
  //--------------------------------------------------------------------------
  struct transx
  {
    otid_t              XID;
    sequence <ub2> mzaXactStatus;
  };



};                                                             /* module mza */

#endif                                                         /* MZA_COMMON */
