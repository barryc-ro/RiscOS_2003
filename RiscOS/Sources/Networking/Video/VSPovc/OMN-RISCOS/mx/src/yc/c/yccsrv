/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yccsrv.c - generation of server stubs for C language mapping
 *
 * NOTES
 * The server stubs are the simplest. They #include the client stubs
 * and generate a single "_s" function for each operation (get/set
 * pairs for attributes), plus the definition of the __stubs struct.
 * The server stubs they can get an pars descriptors, type codes and
 * ysid's they need from the included client stubs.
 *
 * For derived interfaces, no stubs are generated for inherited operations
 * and attributes because we re-use the stubs generated for the base
 * interface (saves on code size). However, since the base stub names are
 * referenced in the __stubs initializer, we still need prototypes for them.
 *
 * Olint will slap you if you have a function without a prototype. The
 * server stub functions aren't really "public" as they're not meant to
 * be called directly by anyone, so they don't appear in any header files.
 * They can't be static because a derived interface needs to be able to
 * "see" it's base interface stub names. Ergo, we disable olint prototype
 * checking in the server stub file. So sue me.
 *
 * COA Stubs
 * ---------
 * The server stubs for the OMX Common Object Adaptor (COA). These are
 * the default stubs. Here is a simple example based on the IDL example
 * at the top of yccclnt.c.
 *
 * static void intf_op_s( dvoid* or, yoenv* ev, dvoid* impldef, dvoid** args)
 * {
 *   *(sb4*)args[0] =
 *     (*((struct intf__tyimpl*)impldef)->op)( (intf)or, ev,
 *         *(sb4*)args[1]);
 * }
 *
 * BOA Stubs
 * ---------
 * Users can also choose the CORBA Basic Object Adaptor (BOA). Under the
 * BOA, exception data is propagated through the environment parameter
 * rather than via yseThrow, so if the server implementation function
 * "raises" an exception (by putting it into the environment param),
 * the stub is obliged to propagate the exception into the Object Runtime
 * layer itself by calling ORA_CORBA_ExceptionToYo.
 *
 * static void intf_op_s( dvoid* or, yoenv* ev, dvoid* impldef, dvoid** args)
 * {
 *   CORBA_Environment cev;
 * 
 *   ORA_CORBA_BuildEnv( &cev, ev, intf_op_pars);
 *   *(sb4*)args[0] =
 *     (*((struct intf__tyimpl*)impldef)->op)( (intf)or, &cev,
 *         *(sb4*)args[1]);
 *   if ( cev._major != CORBA_NO_EXCEPTION )
 *     ORA_CORBA_ExceptionToYo( &cev);
 * }
 *
 * Widen Function
 * --------------
 * This is a private function used only by the client stubs for short
 * circuit calls. It is always called indirectly. It is generated in the
 * server stubs because a pointer to it is stashed in the
 * __stubs data so that it can be called based on the runtime type of an
 * object. That is, if we're in a client stub for a base interface with an
 * object of a derived interface, we want to call the widen function for
 * the derived interface rather than the base - akin to a C++ virtual
 * function call.
 *
 * This function is used to locate the component of an object's __tyimpl
 * structure that corresponds to the interface whose stub a request is
 * being made through. As an optimization, no widen function is generated 
 * for interfaces which do not inherit any ops/attrs, and no check is
 * made inside the widen function for base interfaces which have no ops/attrs. 
 *
 * Attempting to call a widener from a stub for an interface that is not
 * part of the inheritance hierarchy of the object or for an interface which
 * has no ops/attrs (and therefore no stubs), raises YS_EX_BADPARAM. 
 *
 * For information on how this is used, see yccclnt.c. The general layout
 * of a widener for some interface D derived from B1..Bn is:
 *
 *    STATICF yogfp D__widen( ub4 _idx, dvoid* _data, CONST ysid* _id)
 *    {
 *      yogfp* _fps = (yogfp*)_data;
 *
 *      if ( ysidEq( D__id, _id) )
 *        _fps += 0;
 *      else if ( ysidEq( B1__id, _id) )
 *        _fps += 2;
 *      ... for remaining bases 
 *      else
 *        yseThrow(YS_EX_BADPARAM);
 *      return _fps[idx];
 *    }
 *
 * In other words, <data> is the __tyimpl for D (as returned by yoLocalObj)
 * and is treated here as an array of generic function pointers. The offsets
 * are essentially computed by counting the number of ops/attrs defined in
 * each interface in the hierarchy. Obviously, this ordering must stay in
 * lock step with related code generation such as the declaration of _tyimpls,
 * the assignment of the op indices, and the default initializer for the
 * impl skeletons. To insure this, ycsInterface builds a list of ops and 
 * attrs guaranteed to be grouped by defining interface and hangs it in the
 * usrp field of the IFR object. This list is then used for all related
 * code gen, rather than the yrContents or individual ops/attrs lists whose
 * ordering is wholly dependent on what the IFR wants to do.
 *
 * HISTORY
 * 01/03/97 kcoleman    Bug #424157: Olint hates "+= 0" in widen func
 * 01/02/97 kcoleman	Bug #433222: Bound str aliases as in and return values
 * 12/16/96 kcoleman	Add ancestor info to yostub
 * 10/29/96 kcoleman	Bug #417472: Use ARGUSED for args param, as needed
 * 08/23/96 kcoleman	Context parameter support
 * 07/17/96 kcoleman	Bug #382537: Rewrite short circuit, fix tyimpl
 * 07/11/96 kcoleman	Allow for C/C++ keywords as IDL identifiers
 * 06/28/96 kcoleman	Bug #377748: No more global external data
 * 06/06/96 kcoleman	Bug 369357: Revamp I/O to limit line length
 * 04/08/96 kcoleman	Use ysRecord for error reporting.
 * 03/25/96 kcoleman	Support for static typecode option.
 * 03/18/96 kcoleman	Make modules code gen objects
 * 02/05/96 kcoleman	Support for CORBA 2.0 stubs
 * 11/08/95 kcoleman	"Any" wasn't being derefed when used as return type
 * 11/07/95 kcoleman	Implement distinct Oracle and ANSI naming styles
 * 11/02/95 kcoleman	Embed '*' in intf typedef, add CORBA/BOA stubs
 * 10/03/95 kcoleman	Upgrade env param to something real.
 * 09/19/95 kcoleman	Forgot to pass null param into impl call for env par
 * 09/11/95 kcoleman	Added null terminator to yostub array
 * 08/16/95 kcoleman	Implemented inheritance
 * 08/09/95 kcoleman	Initial implementation of server stubs
 * 07/17/95 kcoleman	Creation
 */
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCC0_ORACLE
#include <ycc0.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif

STATICF void yccGenIntfSrv( ycctx* ctx, yccfp* fp, yrobj* inf);
STATICF void yccGenSrvFunc( ycctx* ctx, yccfp* fp, yrobj* intf,
                            yrobj* rettype, CONST char* name, 
                            CONST char* implName, yslst* pars, yslst* ctxs);
STATICF void yccGenOpSrv( ycctx* ctx, yccfp* fp, yrobj* op, yrobj* intf);
STATICF void yccGenAttrSrv( ycctx* ctx, yccfp* fp, yrobj* attr, yrobj* intf);
STATICF void yccGenTypeCast( ycctx* ctx, yccfp* fp, yrobj* type, sword mode);
STATICF void yccGenCGSrvObjs( ycctx* ctx, yccfp* fp, yslst* objs);

void yccsrv(ycctx* ctx, char* base, ycfile* fd)
{
  yccfp *fp;
  CONST char* errtxt;

  /* open temporary output file */
  fp = yccfpOpen(fd->newtmp, "w", SYSFPKIND_NONE, &errtxt, 
                 yccGetLineLimit(ctx));
  if ( !fp )
  {
    ysRecord( YCMSG(1), YCERRSEV, YSLSTR(fd->target), YSLSTR(errtxt), YSLEND);
    return;
  }

    /* produce boilerplate output */
  yccfpPrint( fp, "/* GENERATED FILE\n * %s - server stubs\n", base);
  yccfpPrint( fp, " * from %s\n */\n\n", ctx->srcnm);
  yccGenSysIncls( ctx, fp, TRUE);
  yccfpPrint( fp, "#ifndef YOCOA_ORACLE\n#include <yocoa.h>\n#endif\n");

    /* include client stubs in the server stubs */
  {
    char* dummy = (char*) ysmGlbAlloc( strlen(base) + 2, "basename");
    char  clientStubs[SYSFP_MAX_PATHLEN];
    ub4 len;

    len = strlen(base);
    DISCARD strcpy( dummy, base);
    dummy[len] = 'C';
    dummy[len+1] = '\0';
    sysfpForm( clientStubs, (char*)0, dummy, SYSFPKIND_CSOURCE);

#ifdef RISCOS

    /*
     * Oops, the C compiler tries to be clever and converts Unix to paths
     * RISC OS pathnames; so we want to output a Unix style item for this,
     * not a RISC OS style one. Hence, convert *back*...
     */

    {
      char * p = clientStubs;

      while (p && *p)
      {
        if (*p == '.') *p = '/';
        else if (*p == '/') *p = '.';

        p++;
      }
    }

#endif

    yccfpPrint( fp, "#include <%s>\n\n", clientStubs);
    ysmGlbFree( (dvoid*)dummy);
  }
  yccfpPrint( fp, "EXTC_START\n\n");

    /* generate the stubs */
  yccfpSetIndent( fp, 0);
  yccGenCGSrvObjs( ctx, fp, ctx->newobjs);

  yccfpPrint( fp, "\nEXTC_END\n");
  yccfpClose(fp);
}


/* ---------------------------------------------------------------------- */
/*
 * yccGenCGSrvObjs - Generate server stub decls for code gen objects
 *
 * Lots of hoop jumping to deal with modules and interface forward decls...
 * see ycsem.c, ycsAddObj. Never use the source file name as a means of
 * deciding whether or not to generate code for a module: The source file
 * name of the module in the IFR is always the first occurrence of the
 * module, so it may appear to be from include file, but we may be gen'ing
 * code for a piece of the module in the current source file. So, always
 * recurse on modules, thereby checking the source file name at the content
 * level. It sucks, but there's not a thing you can do about it.
 */

STATICF void yccGenCGSrvObjs( ycctx* ctx, yccfp* fp, yslst* objs)
{
  ysle* le;

  if ( objs )
  {
    for ( le = ysLstHead(objs); le; le = ysLstNext(le))
    {
      ycgobj* cgobj = (ycgobj*) ysLstVal(le);

      if ( yrGetKind( cgobj->ifrobj) == yrdkModule )
        yccGenCGSrvObjs( ctx, fp, cgobj->objlist);
      else if ( !ycShouldGenCode(ctx, cgobj->ifrobj) )
        continue;	/* from an include file. Don't gen code */
      else if ( (yrGetKind(cgobj->ifrobj) == yrdkInterface) &&
           !(cgobj->flags & YCG_FWD) )
	yccGenIntfSrv( ctx, fp, cgobj->ifrobj);
    }
  }
}


/* ---------------------------------------------------------------------- */
/*
 * yccGenIntfSrv - generate server stub code for an interface
 *
 * For all attributes and operations in an interface, generate server
 * stub functions. Then generate a widen function if needed, and the
 * initializer/accessor op for the server __stubs object.
 *
 * Inherited attributes are special-cased because their names are
 * constructed piecemeal: <absIntf>__set_<attrName>. If the member is
 * inherited, then the first component is the absolute name of the
 * defining interface, not the inheriting. For operations, this falls
 * out naturally when we call yccGetAbsoluteName on the operation.
 * Since inherited members are always clumped together, we avoid lots
 * of repeated name construction for attributes by keeping track of
 * the last interface we gen'd attr code for; if it hasn't changed,
 * we reuse the previously generated name.
 */

STATICF void yccGenIntfSrv( ycctx* ctx, yccfp* fp, yrobj* inf)
{
  ysle* le;
  yslst* all;
  ub4 cnt = (ub4)0;
  CONST char* intfName;	     /* absolute name of <inf> */
  CONST char* absName;	     /* absolute name of an interface member */
  CONST char* voidstr;
  boolean hasOps;            /* true if at least one op/attr */
  ycsym* syminfo;
  yrintf* idata;
  boolean localOnly = FALSE; /* true if there are no inherited ops/attrs */

  if ( ycIsCorbaObject( ctx, inf) ||  /* CORBA::Object is a magic cookie */
       !yrGetContents(inf) )             /* empty, do nothing */
    return;

  voidstr = YCCVOID(ctx);
  intfName = yrGetAbsoluteName( inf);
  yccfpPrint( fp, "/* Server stubs for interface %s */\n", intfName);
  ysmGlbFree(  (dvoid*)intfName);
  syminfo = ycSymLookup( ctx->symtbl, inf);
  all = (syminfo ? syminfo->opsNattrs : (yslst*)0);
  hasOps = !ycIsEmptyLst(all);
  intfName = yccGetAbsoluteName( ctx, inf, (yrobj*)0);
  idata = &yrInterfaceData(inf);

    /* generate server stub functions */
  if ( hasOps )
  {
    ub4 locals = (ub4)0;

      /***** Gen the server stub functions *****/
    for (cnt = 0, le = ysLstHead(all); le; le = ysLstNext(le), cnt++)
    {
      yrobj* obj = (yrobj*) ysLstVal(le);

      if ( yrGetKind(obj) == yrdkOperation )
        yccGenOpSrv( ctx, fp, obj, inf);
      else
      {
        yccGenAttrSrv( ctx, fp, obj, inf);
        if ( (yrGetKind(obj) == yrdkAttribute) && 
             (yrAttrData(obj).mode != YR_ATTR_RO) )
          cnt++;      /* rw attr takes up two slots */
      }
      if ( yrGetDefinedIn(obj) == inf )
        locals++;     /* count the ops/attrs defined in the most derived */
    }
    localOnly = (ysLstCount(all) == locals);     /* no inherited ops/attrs */

    /***** generate private widen function, if necessary *****/
    if ( !localOnly )
    {
      yrobj* base = (yrobj*)0;
      ub4 offset;

      yccfpPrint(fp,"%syogfp %s__widen( ub4 _idx, %s*_data, %sysid* _id);\n\n",
                  YCCSTATIC(ctx), intfName, voidstr, YCCCONST(ctx));
      yccfpPrint(fp,"%syogfp %s__widen( ub4 _idx, %s*_data, %sysid* _id)\n{\n",
                  YCCSTATIC(ctx), intfName, voidstr, YCCCONST(ctx));
      yccfpIncIndent( fp);
      yccfpPrint( fp, "yogfp* _fps = (yogfp*)_data;\n\n");
      for ( le = ysLstHead(all), offset = 0; le; le = ysLstNext(le), offset++)
      {
        yrobj* mem = (yrobj*)ysLstVal(le);
        if ( base != yrGetDefinedIn(mem) )
        {
          CONST char* bname;
          ycsym* bsym;

          base = yrGetDefinedIn(mem);
          bsym = ycSymLookup(ctx->symtbl, base);

          if ( bsym && bsym->opsNattrs && 
               (ysLstCount(bsym->opsNattrs) > 0) )
          {                 /* gen no test for bases w/o ops or attributes */
            bname = yccGetAbsoluteName(ctx, base, (yrobj*)0);
            yccfpPrint( fp, "if ( ysidEq( %s__id, _id) )\n", bname);
            if ( offset == 0 )
              yccfpPrint( fp, "{\n}\n");
            else
            {
              yccfpIncIndent(fp);
              yccfpPrint( fp, "_fps += %d;\n", offset);
              yccfpDecIndent(fp);
            }
            yccfpPrint( fp, "else ");
          }
        }
        if ( (yrGetKind(mem) == yrdkAttribute) && 
             (yrAttrData(mem).mode != YR_ATTR_RO) )
          offset++;      /* rw attr takes up two slots */
      }
      yccfpPrint( fp, "\n");
      yccfpIncIndent( fp);
      yccfpPrint( fp, "yseThrow(YS_EX_BADPARAM);\n");   /* wrong obj type */
      yccfpDecIndent( fp);
      yccfpPrint( fp, "return _fps[_idx];\n");
      yccfpDecIndent( fp);
      yccfpPrint( fp, "}\n\n");
    }
  }

    /***** generate stub creation/accessor function *****/

    /* list of ancestor repository id's */
  if ( !ycIsEmptyLst(idata->bases) )
  {
    yslst* ancestors;

    ancestors = ysLstCreate();
    yrGetAncestors( inf, ancestors);
    yccfpPrint( fp, "static const char* const %s__bases[] =\n{\n", intfName);
    yccfpIncIndent(fp);
    for (le = ysLstHead(ancestors); le; le = ysLstNext(le))
      yccfpPrint( fp, "\"%s\",\n", yrGetRepId((yrobj*)ysLstVal(le)));
    yccfpPrint( fp, "(char*)0\n");
    yccfpDecIndent(fp);
    yccfpPrint( fp, "};\n\n");
    ysLstDestroy(ancestors, (ysmff)0);
  }

    /* function header, allocation */
  yccfpPrint( fp, "yostub* %s__getStubs(void)\n{\n", intfName);
  yccfpIncIndent( fp);
  yccfpPrint( fp, "yostub* _result;\n");
  yccfpPrint( fp, "yostbb* _stubs;\n\n");
  yccfpPrint( fp, "_result = (yostub*) ysmGlbAlloc( sizeof(yostub)+");
  yccfpPrint( fp, "(sizeof(yostbb)*%u), \"yostubs\");\n", cnt);
  if ( hasOps && !localOnly )
    yccfpPrint( fp, "_result->widen = (yowiden)%s__widen;\n", intfName);
  else
    yccfpPrint( fp, "_result->widen = (yowiden)0;\n");
  if ( ycIsEmptyLst(idata->bases) )
    yccfpPrint( fp, "_result->bases = (const char**)0;\n");
  else
    yccfpPrint( fp, "_result->bases = %s__bases;\n", intfName);
  yccfpPrint( fp, "_stubs = &(_result->stuba[0]);\n\n");

    /* init array entries for each op/attr */
  if ( cnt > 0 )
  {
    for (cnt = 0, le = ysLstHead(all); le; cnt++, le = ysLstNext(le))
    {
      yrobj* obj = (yrobj*) ysLstVal(le);
      CONST char* objname = yrGetName(obj);

      if ( yrGetKind(obj) == yrdkOperation )
      {
        absName = yccGetAbsoluteName( ctx, obj, inf);
        yccfpPrint( fp, "_stubs[%u].opernm = \"%s\";\n", cnt, objname);
        yccfpPrint( fp, "_stubs[%u].parms = %s_pars;\n", cnt, absName);
        yccfpPrint( fp, "_stubs[%u].oper = %s_s;\n", cnt, absName);
        if ( inf != yrGetDefinedIn(obj) )
	  ysmGlbFree( (dvoid*) absName);
      }
      else if ( yrGetKind(obj) == yrdkAttribute )
      {
        yccfpPrint( fp, "_stubs[%u].opernm = \"_get_%s\";\n", cnt, objname);
        yccfpPrint( fp, "_stubs[%u].parms = %s__get_%s_pars;\n", 
                    cnt, intfName, objname);
        yccfpPrint( fp, "_stubs[%u].oper = %s__get_%s_s;\n", 
                    cnt, intfName, objname);
        if ( yrAttrData(obj).mode != YR_ATTR_RO )
        {
          cnt++;
          yccfpPrint( fp, "_stubs[%u].opernm = \"_set_%s\";\n", cnt, objname);
          yccfpPrint( fp, "_stubs[%u].parms = %s__set_%s_pars;\n", 
                      cnt, intfName, objname);
          yccfpPrint( fp, "_stubs[%u].oper = %s__set_%s_s;\n", 
                      cnt, intfName, objname);
        }
      }
    }
  }
    /* gen terminator */
  yccfpPrint( fp, "_stubs[%u].opernm = (%schar*)0;\n", cnt, YCCCONST(ctx));
  yccfpPrint( fp, "_stubs[%u].parms = (yopar*)0;\n", cnt);
  yccfpPrint( fp, "_stubs[%u].oper = (void (*)(%s*,yoenv*,%s*,%s**))0;\n",
              cnt, voidstr, voidstr, voidstr);
  yccfpPrint( fp, "\nreturn _result;\n");
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");
}


/* ---------------------------------------------------------------------- */
/*
 * yccGenSrvFunc - gen server stub for an operation or attribute
 *
 * Things in brace (except for the obviously C syntactic uses) are
 * optional and depend upon whether or not the return type is void.
 *
 * void <op>_s( dvoid* or, dvoid* impldef, dvoid** args)
 * {
 *   {<cast>args[0] = }(*(<intf>__tyimpl*)impldef)-><op>)(<cast>args[1],...);
 * }
 *
 * That is, if there is a return value, it is in args[0], followed
 * by the parameters to the impl func. We generate properly typecast
 * index expressions into the arg array and invoke the impl func.
 */
STATICF void yccGenSrvFunc( ycctx* ctx, yccfp* fp, yrobj* intf,
                            yrobj* rettype, CONST char* name, 
                            CONST char* implName, yslst* pars, yslst* ctxs)
{
  ysle* le;
  CONST char* intfName;
  CONST char* voidstr = YCCVOID(ctx);
  boolean isVoidReturn = !rettype || ((yrGetKind(rettype) == yrdkPrimitive) &&
				(yrPrimData(rettype).kind == yrpkvoid));
  CONST char* kwdpfx = ((*ctx->lang->kwdchk)( ctx, implName) ? "_" : "");
  sword i = 0;		/* arg counter */

    /* spit out a prototype to shut up olint */
  yccfpPrint( fp,"%svoid %s_s", YCCSTATIC(ctx), name);
  yccfpPrint( fp,"( %s* or, yoenv* ev, %s* impldef, %s** args);\n\n",
              voidstr, voidstr, voidstr);

    /* generate the function */
  yccfpPrint( fp,"%svoid %s_s", YCCSTATIC(ctx), name);
  yccfpPrint( fp,"( %s* or, yoenv* ev, %s* impldef, %s** args",
              voidstr, voidstr, voidstr);
  if ( ycStyleOra(ctx) && isVoidReturn && ycIsEmptyLst(pars) )
    yccfpPrint( fp, " /* ARGUSED */");
  yccfpPrint( fp,")\n{\n");
  yccfpIncIndent( fp);

  if ( ctx->objAdaptor == YCOA_BOA )                /* BOA stubs only */
  {
    yccfpPrint( fp, "CORBA_Environment cev;\n\n");
    yccfpPrint( fp, "ORA_CORBA_BuildEnv( &cev, ev, %s_pars);\n", name);
  }                                                 /* end BOA stubs only */

  if ( !isVoidReturn )
  {
    yccGenTypeCast( ctx, fp, rettype, YOMODE_RETURN);
    yccfpPrint( fp, "args[0] = ");
    i++;
  }
  intfName = yccGetAbsoluteName( ctx, intf, (yrobj*)0);
  yccfpPrint( fp, "(*((struct %s__tyimpl*)impldef)->%s%s)( (%s)or", 
              intfName, kwdpfx, implName, intfName);
  if ( ycCORBA1_2(ctx) )
    yccfpPrint( fp, ", %s", (ctx->objAdaptor == YCOA_BOA) ? "&cev" : "ev");
  if ( pars )
  {
    for ( le = ysLstHead(pars); le; le = ysLstNext(le))
    {
      yrpar* par = (yrpar*) ysLstVal(le);

      yccfpPrint( fp, ",");
      yccGenTypeCast( ctx, fp, par->type, par->mode);
      yccfpPrint( fp, "args[%d]", i++);
    }
  }

  if ( !ycCORBA1_2(ctx) )
  {
    if ( !ycIsEmptyLst(ctxs) )
      yccfpPrint( fp, ", (CORBA_Context)args[%d]", i++);
    yccfpPrint( fp, ", %s);\n", (ctx->objAdaptor == YCOA_BOA) ? "&cev" : "ev");
  }
  else
    yccfpPrint( fp, ");\n");

  if ( ctx->objAdaptor == YCOA_BOA )                /* BOA stubs only */
  {
    yccfpPrint( fp, "if ( cev._major != CORBA_NO_EXCEPTION )\n");
    yccfpIncIndent( fp);
    yccfpPrint( fp, "ORA_CORBA_ExceptionToYo( &cev);\n");
    yccfpDecIndent( fp);
  }                                                 /* end BOA stubs only */
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");
}


/* ---------------------------------------------------------------------- */
/*
 * yccGenOpSrv - generate client stubs for an interface operation
 *
 * Generates <op> and <op>_nw - sync and async stubs.
 */

STATICF void yccGenOpSrv( ycctx* ctx, yccfp* fp, yrobj* op, yrobj* intf)
{
  CONST char* name = yccGetAbsoluteName( ctx, op, intf);

  yccGenSrvFunc( ctx, fp, intf, yrOpData(op).rettype, name, yrGetName(op), 
                 yrOpData(op).pars, yrOpData(op).ctxts);
  if ( intf != yrGetDefinedIn(op) )
    ysmGlbFree( (dvoid*)name);
}


/* ---------------------------------------------------------------------- */
/*
 * yccGenAttrSrv - generate client stubs for an attribute
 *
 * Generates <intf>__get_<attr> and <intf>__set_<attr> in synchronous
 * and asynchronous forms - 4 functions in all.
 */

STATICF void yccGenAttrSrv( ycctx* ctx, yccfp* fp, yrobj* attr, yrobj* intf)
{
  CONST char* base = yccGetAbsoluteName( ctx, intf, (yrobj*)0);
  char* attrName = yrGetName(attr);
  char* name = 
	(char*) ysmGlbAlloc( strlen(base) + strlen(attrName) + 7, "attrName");
		/* "__get_" + 1 == 7 */

    /* get stub */
  DISCARD ysFmtStr( name, "%s__get_%s", base, attrName);
  yccGenSrvFunc( ctx, fp, intf, yrAttrData(attr).type,
			name, name + strlen(base) + 1, (yslst*)0, (yslst*)0);

    /* set stub */
  if ( yrAttrData(attr).mode != YR_ATTR_RO )
  {
    yslst* pars = ysLstCreate();
    yrpar param;

    DISCARD ysFmtStr( name, "%s__set_%s", base, attrName);
    param.type = yrAttrData(attr).type;
    param.mode = YOMODE_IN;
    DISCARD ysLstEnq( pars, (dvoid*) &param);

    yccGenSrvFunc( ctx, fp, intf, (yrobj*) 0,
			name, name + strlen(base) + 1, pars, (yslst*)0);
    ysLstDestroy( pars, (ysmff)0);
  }

  ysmGlbFree(  (dvoid*)name);
}


/* ---------------------------------------------------------------------- */
/*
 * yccGenTypeCast - Generate a typecast to a return or parameter type.
 *
 * Needed for server stub generation to cast data in the args array
 * from dvoid* into appropriate values. For example, even scalar
 * data requires a pointer dereference when used as an in param.
 *
 * We figure out whether or not something needs a dereference based on
 * type and mode. Also, the mode may be tweaked for those types which
 * are usually passed/returned by value so that the type inside the
 * cast is generated as for YOMODE_OUT (e.g. by reference). Finally,
 * yccGenParamType is used to generate the actual type inside the cast.
 *
 * Note that YOMODE_RETURN requires a type cast only if it is a type
 * which needs dereferencing in order to assign the return value.
 */

STATICF void yccGenTypeCast( ycctx* ctx, yccfp* fp, yrobj* type, sword mode)
{
  boolean needDeref = FALSE;
  boolean stop = FALSE;
  yrobj* base = type;
  sword origMode = mode;

  while ( !stop )
  {
    stop = TRUE;
    switch (yrGetKind(base))
    {
      case yrdkInterface:
      case yrdkEnum:
	if ( (mode == YOMODE_IN) || (mode == YOMODE_RETURN) )
	{
	  needDeref = TRUE;
	  mode = YOMODE_OUT;
	}
	break;
      case yrdkUnion:
      case yrdkStruct:
      case yrdkSequence:
	if ( mode == YOMODE_RETURN )
	{
	   needDeref = TRUE;
	   mode = YOMODE_OUT;
	}
	break;
      case yrdkString:
        if ( (mode == YOMODE_IN) || (mode == YOMODE_RETURN) )
        {
           needDeref = TRUE;
           mode = YOMODE_OUT;
        }
        break;
      case yrdkArray:
        mode = YOMODE_RETURN;	/* always use the slice for a cast */
	break;
      case yrdkAlias:
	stop = FALSE;
	base = yrAliasData(base).type;
	break;
      case yrdkPrimitive:
        if ( yrPrimData(type).kind == yrpkany )
        {
          if ( mode == YOMODE_RETURN )
          {
            needDeref = TRUE;
            mode = YOMODE_OUT;
          }
          break;
        }
        else if ( (mode == YOMODE_IN) || (mode == YOMODE_RETURN) )
        {
           needDeref = TRUE;
           mode = YOMODE_OUT;
        }
	break;
      default:
	yseThrow(YS_EX_FAILURE);
	break;
    }
  }

  if ( needDeref )
    yccfpPrint( fp, "*(");
  else if ( origMode == YOMODE_RETURN )		/* don't need a cast */
    return;
  else
    yccfpPrint( fp, "(");
  yccGenParamType( ctx, fp, type, mode);
  yccfpPrint( fp, ")");
}
