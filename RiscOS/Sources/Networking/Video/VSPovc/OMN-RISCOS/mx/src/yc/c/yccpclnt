/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * yccphdr.c - generation of C++ header output
 *
 * NOTES
 * General rule of thumb regarding naming during function definition
 * generation: Use the scoped name for class prefixes, param types,  
 * and the simple name for ctor and dtor names. You don't want the 
 * absolute name because you may be in the scope of a module (namespace).
 * For example:
 *
 *   IDL                       C++ w Namespaces       C++ w/o Namespaces
 *   ---                       ----------------       ------------------
 *   module M                  namespace M
 *   {                         {
 *     interface I {...};        class I {...};       class M_I {...};
 *   };                        };
 *
 * The names you have to choose from for interface I are: "::M::I" (absolute
 * if we use namespaces), "M_I" (scoped, absolute, and simple w/o namespaces),
 * and "I" (simple and scoped if namespaces). The correct way to build up 
 * the up the name of a ctor definition, regardless of namespace support is:
 *
 *     <scoped-name>::<simple-name>
 *
 * So that you get I::I with namespaces and M_I::M_I without. The absolute
 * name is only appropriate here when generating the type name for use 
 * outside the parent scope.
 *
 * HISTORY
 * 07/29/96 kcoleman    Creation
 */
 
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCCP0_ORACLE
#include <yccp0.h>
#endif
#ifndef YSSTR_ORACLE
#include <ysstr.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif
 

STATICF void yccpGenClient( ycctx* ctx, yccfp* fp, yrobj* obj, boolean dummy);
STATICF void yccpGenIntfClient( ycctx* ctx, yccfp* fp, yrobj* obj);
STATICF void yccpGenExcClient( ycctx* ctx, yccfp* fp, yrobj* obj);
STATICF void yccpGenStructClient( ycctx* ctx, yccfp* fp, yrobj* obj);
STATICF void yccpGenUnionClient( ycctx* ctx, yccfp* fp, yrobj* obj);
STATICF void yccpGenSeqClient( ycctx* ctx, yccfp* fp, yrobj* obj);
STATICF void yccpGenArrayClient( ycctx* ctx, yccfp* fp, yrobj* obj);
#ifndef RISCOS
STATICF void yccpGenAliasClient( ycctx* ctx, yccfp* fp, yrobj* obj);
#endif
STATICF void yccpGenUnionMbrDefn( ycctx* ctx, yccfp* fp, yrunmbr* mbr, 
                             CONST char* name);
STATICF void yccpGenOpClient( ycctx* ctx, yccfp* fp, yrobj* obj);
STATICF void yccpGenAttrClient( ycctx* ctx, yccfp* fp, yrobj* obj);
STATICF void yccpGenTypeCodeDefn( ycctx* ctx, yccfp* fp, yrobj* type);
STATICF void yccpGenOraExtDefns( ycctx* ctx, yccfp* fp, yrobj* type);
STATICF void yccpGenConstClient( ycctx* ctx, yccfp* fp, yrobj* obj);


/* ----------------------------------------------------------------------- */
/*
 * yccpclnt - C++ client stub generation
 */

void yccpclnt(ycctx *ctx, CONST char *base, ycfile* fd)
{
  yccfp* fp;
  char  *upbase;
  CONST char* errtxt;
 
    /**** open temporary output file ****/
  fp = yccfpOpen(fd->newtmp, "w", SYSFPKIND_NONE, &errtxt, 
                 yccGetLineLimit(ctx));
  if (!fp )
  {
    ysRecord( YCMSG(8), YCERRSEV, YSLSTR(fd->target), YSLSTR(errtxt), YSLEND);
    return;
  }
  upbase = ycToUpper(ysStrDup(base));        /* upper case for #define's */
  yccfpSetIndent( fp, 0);
 
    /**** produce boilerplate output ****/
  yccfpPrint( fp, "/* GENERATED FILE\n * %s - client stubs\n", base);
  yccfpPrint( fp, " * from %s\n */\n\n", ctx->srcnm);
  yccfpPrint( fp, "extern \"C\"\n{\n");    /* protect against C-ness */
  yccGenSysIncls(ctx, fp, TRUE);
  yccfpPrint( fp, "}\n\n");
  upbase = ycToUpper(ysStrDup(base));           /* upper case for #include */
  yccfpPrint( fp, "#ifndef %s_%s\n#include <%s.h>\n#endif\n\n", 
              upbase, (ycStyleOra(ctx) ? "ORACLE" : "IDL"), base);
  ysmGlbFree( (dvoid*)upbase);

    /***** output all the declarations *****/
  if ( ysLstCount( ctx->newobjs) > 0 )
  {
    ycgNewScopeStack( ctx);
    yccpGenCGObjs( ctx, fp, ctx->newobjs, yccpGenClient, (yccpdefcgfp)0);
    DISCARD ycgPopScope(ctx);      /* never have deferred decls here */
  }

  yccfpClose(fp);
}


/* ---------------------------------------------------------------------- */
/*
 * yccpGenClient - Dispatcher for type specific client stub generation
 *
 */
STATICF void yccpGenClient( ycctx* ctx, yccfp* fp, yrobj* obj, boolean dummy)
{
  switch ( yrGetKind(obj) )
  {
    case yrdkInterface:		/* lots of stuff */
      yccpGenIntfClient( ctx, fp, obj);
      break;
    case yrdkException:		/* typecode and ysid */
      yccpGenExcClient( ctx, fp, obj);
      break;
    case yrdkStruct:
      yccpGenStructClient( ctx, fp, obj);
      break;
    case yrdkUnion:
      yccpGenUnionClient( ctx, fp, obj);
      break;
    case yrdkAlias:
      yccpGenTypeCodeDefn( ctx, fp, obj);
      break;
    case yrdkEnum:
      yccpGenTypeCodeDefn( ctx, fp, obj);
      yccpGenAnyFuncs( ctx, fp, obj, TRUE);
      break;
    case yrdkOperation:
      yccpGenOpClient( ctx, fp, obj);
      break;
    case yrdkAttribute:
      yccpGenAttrClient( ctx, fp, obj);
      break;
    case yrdkConstant:
      yccpGenConstClient( ctx, fp, obj);
      break;
    default:			/* do nothing */
      break;
  }
}

/* ---------------------------------------------------------------------- */
/*
 * yccpGenConstClient - Gen a constant definition. Only constants
 *    declared at interface scope are defined here - all other are
 *    defined during header file generation.
 */

STATICF void yccpGenConstClient( ycctx* ctx, yccfp* fp, yrobj* obj)
{
  if ( yrGetKind(yrGetDefinedIn(obj)) == yrdkInterface )
  {
    yccfpPrint( fp, "const %s %s = ", 
                yccpTypeName( ctx, yrConstData(obj).type), 
                yccpAbsoluteName( ctx, obj));
    yccGenConstVal( ctx, fp, obj);
    yccfpPrint( fp, ";\n\n");
  }
}

/* ---------------------------------------------------------------------- */
/*
 * yccpGenIntfClient - client stubs for an interface
 */

/* class defn */
/* typecode, any functions, T_var defn */
STATICF void yccpGenIntfClient( ycctx* ctx, yccfp* fp, yrobj* obj)
{
  CONST char* name;
  CONST char* scname;
  ysle* le;

  name = yccpSimpleName( ctx, obj);
  scname = yccpScopedName( ctx, obj);

  for ( le = ysLstHead( yrGetContents(obj)); le; le = ysLstNext(le))
  {
    yrobj* mem = (yrobj*) ysLstVal(le);

    if ( yrGetDefinedIn(mem) == obj )        /* not an inherited member */
    {
        yccpGenClient( ctx, fp, mem, FALSE);
    }
  }

  yccpGenTypeCodeDefn( ctx, fp, obj);
  yccfpPrint( fp, "%s_ptr %s::_duplicate( %s_ptr _obj)\n{\n", 
              name, scname, name);
  yccfpIncIndent(fp);
  yccfpDecIndent(fp);
  yccfpPrint( fp, "}\n\n");

  yccfpPrint( fp, "%s_ptr %s::_narrow( %sObject_ptr _obj)\n{\n",
              name, scname, YCP_CORBA(ctx));
  yccfpIncIndent(fp);
  yccfpDecIndent(fp);
  yccfpPrint( fp, "}\n\n");

  yccfpPrint( fp, "%s_ptr %s::_nil()\n{\n", name, scname);
  yccfpIncIndent(fp);
  yccfpPrint( fp, "return (%s_ptr)0;\n", name);
  yccfpDecIndent(fp);
  yccfpPrint( fp, "}\n\n");

  yccfpPrint( fp, "%s::%s( const %s& _val)\n{\n", scname, name, name);
  yccfpIncIndent(fp);
  yccfpDecIndent(fp);
  yccfpPrint( fp, "}\n\n");

  yccfpPrint( fp, "%s& %s::operator=( const %s& _rhs)\n{\n", 
              name, scname, name);
  yccfpIncIndent(fp);
  yccfpDecIndent(fp);
  yccfpPrint( fp, "}\n\n");

  yccfpPrint( fp, "YOTVAR_INTF_DEFN(%s)\n\n", scname);
}


/* ---------------------------------------------------------------------- */


/* typecode, class defn */
STATICF void yccpGenExcClient( ycctx* ctx, yccfp* fp, yrobj* ex)
{
  CONST char* name;
  CONST char* scname;
  ysle* le;
  yslst* mbrs;
  yslst* nested;
  boolean hasMbrs;

  name = yccpSimpleName( ctx, ex);
  scname = yccpScopedName( ctx, ex);

    /***** Nested types *****/
  nested = yrGetContents(ex);
  if ( nested )
  {
    for (le = ysLstHead( nested); le; le = ysLstNext(le))
      yccpGenClient( ctx, fp, (yrobj*) ysLstVal(le), FALSE);
  }
 
    /***** Look for anonymous field types *****/
  mbrs = yrStructData(ex).mbrs;
  hasMbrs = !ycIsEmptyLst(mbrs);
  if ( hasMbrs )
  {
    ycgPushScope( ctx, ex);
    for (le = ysLstHead(mbrs); le; le = ysLstNext(le))
    {
      yrstrmbr* mem = (yrstrmbr*) ysLstVal(le);
      if ( yrGetKind(mem->type) == yrdkSequence )
        yccpGenSeqClient( ctx, fp, mem->type);
      else if ( yrGetKind(mem->type) == yrdkArray )
      {
        DISCARD yccpAnonArrayName( ctx, mem->type, mem->name);
        yccpGenArrayClient( ctx, fp, mem->type);
      }
    }
    DISCARD ycgPopScope( ctx);
  }

    /***** default ctor *****/
  yccfpPrint( fp, "%s::%s()\n{\n", scname, name);
  if ( hasMbrs )
  {
    yccfpIncIndent( fp);
    yccfpDecIndent( fp);
  }
  yccfpPrint( fp, "}\n\n");

    /***** copy ctor *****/
  yccfpPrint( fp, "%s::%s( const %s& _ref)\n{\n", scname, name, scname);
  yccfpIncIndent( fp);
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

    /***** custom ctor *****/
  if ( hasMbrs )
  {
    yccfpPrint( fp, "%s::%s( ", scname, name);
    for (le = ysLstHead(mbrs); le; le = ysLstNext(le))
    {
      yrstrmbr* mem = (yrstrmbr*) ysLstVal(le);
      yccpGenParamType( ctx, fp, mem->type, YOMODE_IN);   /* @@ mode? */
      yccfpPrint( fp, " _%s", mem->name);
      if ( ysLstNext(le) )
        yccfpPrint( fp, ", ");
    }
    yccfpPrint( fp, ") : ");
    for (le = ysLstHead(mbrs); le; le = ysLstNext(le))
    {
      yrstrmbr* mem = (yrstrmbr*) ysLstVal(le);
      yccGenSimpleName( ctx, fp, mem->name);        /* deal with keywords */
      yccfpPrint( fp, "(_%s)",  mem->name);
      yccfpPrint( fp, "%s", ysLstNext(le) ? ", " : "\n{\n}\n\n");
    }
  }

    /***** dtor *****/
  yccfpPrint( fp, "%s::~%s()\n{\n", scname, name);
  if ( hasMbrs )
  {
    yccfpIncIndent( fp);
    yccfpDecIndent( fp);
  }
  yccfpPrint( fp, "}\n\n");

    /***** operator= *****/
  yccfpPrint( fp, "%s::operator=( const %s& _rhs)\n{\n", scname, scname);
  if ( hasMbrs )
  {
    yccfpIncIndent( fp);
    yccfpDecIndent( fp);
  }
  yccfpPrint( fp, "}\n\n");

    /**** narrow *****/
  yccfpPrint( fp, "%s::_narrow( %sException* _ex)\n{\n", 
              scname, YCP_CORBA(ctx));
  yccfpIncIndent( fp);
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

  yccpGenOraExtDefns( ctx, fp, ex);
  yccpGenTypeCodeDefn( ctx, fp, ex);
}


/* ---------------------------------------------------------------------- */


/* typecode, any functions, T_var defn */
STATICF void yccpGenStructClient( ycctx* ctx, yccfp* fp, yrobj* obj)
{
  ysle* le;
  yrstrmbr* mem;

    /***** Nested types *****/
  for (le = ysLstHead( yrGetContents(obj)); le; le = ysLstNext(le))
    yccpGenClient( ctx, fp, (yrobj*) ysLstVal(le), FALSE);
 
    /***** Look for anonymous field types *****/
  ycgPushScope( ctx, obj);
  for (le = ysLstHead(yrStructData(obj).mbrs); le; le = ysLstNext(le))
  {
    mem = (yrstrmbr*) ysLstVal(le);
    if ( yrGetKind(mem->type) == yrdkSequence )
      yccpGenSeqClient( ctx, fp,  mem->type);
    else if ( yrGetKind(mem->type) == yrdkArray )
    {
      DISCARD yccpAnonArrayName( ctx, mem->type, mem->name);
      yccpGenArrayClient( ctx, fp, mem->type);
    }
  }
  DISCARD ycgPopScope(ctx);

  yccpGenAnyFuncs( ctx, fp, obj, TRUE);
  yccpGenTypeCodeDefn( ctx, fp, obj);
  yccfpPrint( fp, "YOTVAR_STRUCT_DEFN(%s)\n\n", yccpScopedName(ctx, obj));
}


/* ---------------------------------------------------------------------- */


/* class definition */
/* typecode, any functions, T_var defn */
STATICF void yccpGenUnionClient( ycctx* ctx, yccfp* fp, yrobj* obj)
{
  ysle* le;
  yslst* mbrs;
  yrunmbr* mem;
  CONST char* scname;      /* fully scoped type name */
  CONST char* name;        /* simple name */
  ycsym* syminfo;
  yrobj* disc;

  for (le = ysLstHead( yrGetContents(obj)); le; le = ysLstNext(le))
    yccpGenClient( ctx, fp, (yrobj*) ysLstVal(le), FALSE);
 
  scname = yccpScopedName( ctx, obj);
  name = yccpSimpleName( ctx, obj);

    /***** default ctor *****/
  yccfpPrint( fp, "%s::%s()\n{\n", scname, name);
  yccfpIncIndent( fp);
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

    /***** copy ctor *****/
  yccfpPrint( fp, "%s::%s( const %s& _ref)\n{\n", scname, name, scname);
  yccfpIncIndent( fp);
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

    /***** dtor *****/
  yccfpPrint( fp, "%s::~%s()\n{\n", scname, name);
  yccfpIncIndent( fp);
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

    /***** operator= *****/
  yccfpPrint( fp, "%s::operator=( const %s& _rhs)\n{\n", scname, scname);
  yccfpIncIndent( fp);
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

    /***** discriminator ops *****/
  disc = yrUnionData(obj).disctype;
  yccfpPrint( fp, "void %s::_d( ", scname);              /* _d mutator */
  yccpGenParamType( ctx, fp, disc, YOMODE_IN);
  yccfpPrint( fp, " _value)\n{\n");
  yccfpIncIndent( fp);
  yccfpPrint( fp, "this->_disc = _value;\n");
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

  yccpGenParamType( ctx, fp, disc, YOMODE_RETURN);       /* _d accessor */
  yccfpPrint( fp, " %s::_d() const\n{\n", scname);
  yccfpIncIndent( fp);
  yccfpPrint( fp, "return this->_disc;\n");
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

    /***** field related mem funcs *****/
  mbrs = yrUnionData(obj).arms;
  ycgPushScope( ctx, obj);
  for (le = ysLstHead(mbrs); le; le = ysLstNext(le))
  {
    mem = (yrunmbr*) ysLstVal(le);
    if ( yrGetKind(mem->type) == yrdkSequence )          /* anon seq type */
      yccpGenSeqClient( ctx, fp, mem->type);
    else if ( yrGetKind(mem->type) == yrdkArray )        /* anon array type */
    {
      DISCARD yccpAnonArrayName( ctx, mem->type, mem->name);
      yccpGenArrayClient( ctx, fp, mem->type);
    }
    yccpGenUnionMbrDefn( ctx, fp, mem, scname);
  }
  DISCARD ycgPopScope(ctx);

    /***** _default *****/
  syminfo = ycSymLookup( ctx->symtbl, obj);
  if ( syminfo->lang.cplus.union_dflt > 0 )
  {
    yccfpPrint( fp, "void %s::_default()\n{\n", scname);
    yccfpIncIndent( fp);
    yccfpPrint( fp, "this->_disc = ");
/* @@ figure out a suitable default value */
    yccfpPrint( fp, ";\n");
    yccfpDecIndent( fp);
    yccfpPrint( fp, "}\n\n");
  }

  yccpGenOraExtDefns( ctx, fp, obj);
  yccpGenTypeCodeDefn( ctx, fp, obj);
  yccfpPrint( fp, "YOTVAR_STRUCT_DEFN(%s)\n\n", scname);
}


/* ---------------------------------------------------------------------- */


/* class definition */
/* typecode, any functions, T_var defn */
STATICF void yccpGenSeqClient( ycctx* ctx, yccfp* fp, yrobj* obj)
{
  yrobj* seq;
  yrobj* elmtype;
  ub4 bound;
  char* ename;
  CONST char* name;
  CONST char* scname;

  if ( yrGetKind(obj) == yrdkSequence )
  {
    seq = obj;
  }
  else      /* should be an alias */
  {
    seq = yrAliasData(obj).type;
    while ( yrGetKind(seq) == yrdkAlias )
      seq = yrAliasData(seq).type;
  }
  elmtype = yrSeqData(seq).elmtype;
  bound = yrSeqData(seq).bound;

  if ( (bound == 0) && (ctx->lang->flags & YCCP_BUILTIN_SEQ_FLG) &&
      (yrGetKind(elmtype) == yrdkPrimitive) )
    return;    /* unbound seq of primitive type -> class decl is predef'd */

  ename = yccpElemName( ctx, seq);
  name = yccpSimpleName( ctx, obj);
  scname = yccpScopedName( ctx, obj);

    /***** T() *****/
  yccfpPrint( fp, "%s::%s() : _maximum(%u), _length(0),", scname, name, bound);
  yccfpPrint( fp, " _buffer((%s*)0), _release(TRUE)\n{\n}\n\n", 
              ename, scname, name);

    /***** T(const T&) *****/
  yccfpPrint( fp, "%s::%s( const %s& _val) : ", scname, name, name);
  yccfpPrint( fp, "_maximum(0), _length(0), _buffer((%s*)0), ", ename);
  yccfpPrint( fp, "_release(TRUE)\n{\n", ename);
  yccfpIncIndent( fp);
  yccfpPrint( fp, "this->copy( _val);\n");
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

  if ( bound == 0 )
  {
      /***** T( ub4 max) *****/
    yccfpPrint( fp, "%s::%s( ub4 _max) : _maximum(_max),", scname, name);
    yccfpPrint( fp, " _length(0), _buffer(%s*)0), _release(TRUE)\n{\n", ename);
    yccfpIncIndent( fp);
    yccfpDecIndent( fp);
    yccfpPrint( fp, "}\n\n");

      /***** T( ub4 max, ub4 length, E*, boolean)  *****/
    yccfpPrint( fp, "%s::%s( ub4 _max, ub4 _length, %s* _data, ", 
                scname, name, ename);
    yccfpPrint( fp, "boolean _release) : _maximum(_max), _length(_length), ");
    yccfpPrint( fp, "_buffer(_data), _release(_release)\n{\n}\n\n");
  }
  else
  {
      /***** T( ub4 length, E* data, boolean release) *****/
    yccfpPrint( fp, "%s::%s( ub4 _length, %s* _data, ", scname, name, ename);
    yccfpPrint( fp, "boolean _release) : _maximum(0), _length(_length), ");
    yccfpPrint( fp, "_buffer(_data), _release(_release)\n{\n}\n\n");
  }

    /***** ~T() *****/
  yccfpPrint( fp, "%s::~%s()\n{\n", scname, name);
  yccfpIncIndent( fp);
  yccfpPrint( fp, "if ( this->_release && this->_buffer )\n");
  yccfpIncIndent( fp);
  yccfpPrint( fp, "%s::freebuf( this->_buffer);\n", scname);
  yccfpDecIndent( fp);
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

    /***** operator=() *****/
  yccfpPrint( fp, "%s& %s::operator=( const %s& _val)\n{\n\n", 
              name, scname, name);
  yccfpIncIndent( fp);
  yccfpPrint( fp, "this->_copy( _val);\nreturn *this;\n");
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

    /***** T::maximum *****/
  yccfpPrint( fp, "ub4 %s::maximum() const\n{\n", scname);
  yccfpIncIndent( fp);
  yccfpPrint( fp, "return this->_maximum;\n");
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

    /***** T::length *****/
  yccfpPrint( fp, "ub4 %s::length() const\n{\n", scname);
  yccfpIncIndent( fp);
  yccfpPrint( fp, "return this->_length;\n");
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

  yccfpPrint( fp, "void %s::length(ub4 _len)\n{\n\n", scname);
  yccfpIncIndent( fp);
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

    /***** operator[] *****/
  yccfpPrint( fp, "%s& %s::operator[]( ub4 index)\n{\n", ename, scname);
  yccfpIncIndent( fp);
  yccfpPrint( fp, "return this->_buffer[index];\n");
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

  yccfpPrint( fp, "const %s& %s::operator[]( ub4 index) const\n{\n\n", 
              ename, scname);
  yccfpIncIndent( fp);
  yccfpPrint( fp, "return this->_buffer[index];\n");
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

    /***** allocbuf *****/
  yccfpPrint( fp, "static %s* %s::allocbuf( ub4 nelems)\n{\n", ename, scname);
  yccfpIncIndent( fp);
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

    /***** freebuf *****/
  yccfpPrint( fp, "static void %s::freebuf( %s* buff)\n{\n\n", ename, scname);
  yccfpIncIndent( fp);
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");
  
  /***** Oracle Extensions *****/
  yccpGenOraExtDefns( ctx, fp, seq);     /* @@ might not want them all */
  if ( bound == 0 )
  {
      /***** reallocbuf *****/
    yccfpPrint( fp, "void %s::reallocbuf( ub4 nelems)\n{\n", scname);
    yccfpIncIndent( fp);
    yccfpDecIndent( fp);
    yccfpPrint( fp, "}\n\n");

      /***** T::maximum mutator *****/
    yccfpPrint( fp, "void %s::maximum( ub4 len)\n{\n", scname);
    yccfpIncIndent( fp);
    yccfpDecIndent( fp);
    yccfpPrint( fp, "}\n\n");
  }

    /***** T::_copy *****/
  yccfpPrint( fp, "%s::_copy( const %s& _val)\n{\n", scname);
  yccfpIncIndent( fp);
  yccfpPrint( fp, "if ( this->_release && this->_buffer )\n");
  yccfpIncIndent( fp);
  yccfpPrint( fp, "%s::freebuf( this->_buffer);\n", scname);
  yccfpDecIndent( fp);
  /* @@ a miracle occurs here */
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

    /***** CORBA Any operators *****/
  yccpGenExtractor( ctx, fp, seq, name, FALSE);
  yccpGenInserter( ctx, fp, seq, name, FALSE);
  yccpGenCopyInserter( ctx, fp, seq, name, FALSE);
  yccfpPrint( fp, "\n");

    /***** Typecode, T_var, etc. *****/
  yccpGenTypeCode( ctx, fp, seq, name, TRUE);
  yccfpPrint( fp, "YOTVAR_SEQ_DEFN(%s, %s)\n\n", scname, ename);

  ysmGlbFree( (dvoid*)ename);
}


/* ---------------------------------------------------------------------- */


/* allocator, dup, free, T_forany */
/* typecode, any functions, T_var defn */
STATICF void yccpGenArrayClient( ycctx* ctx, yccfp* fp, yrobj* obj)
{
  CONST char* name = yccpScopedName( ctx, obj);

    /***** T_alloc *****/
  yccfpPrint( fp, "%s_slice* %s_alloc()\n{\n", name, name);
  yccfpIncIndent( fp);
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

    /***** T_dup *****/
  yccfpPrint( fp, "%s_slice* %s_dup( const %s_slice* _val)\n{\n", 
              name, name, name);
  yccfpIncIndent( fp);
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

    /***** T_free *****/
  yccfpPrint( fp, "void %s_free( %s_slice*)\n{\n", name, name);
  yccfpIncIndent( fp);
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");

    /***** T_var, T_forany, Any funcs *****/
  yccfpPrint( fp, "YOTVAR_ARRAY_DEFN(%s)\n\n", name);
  yccfpPrint( fp, "YOFORANY_DEFN(%s)\n\n", name);
  yccpGenAnyFuncs( ctx, fp, obj, TRUE);
  yccpGenTypeCodeDefn( ctx, fp, obj);
}


/* ---------------------------------------------------------------------- */

STATICF void yccpGenTypeCodeDefn( ycctx* ctx, yccfp* fp, yrobj* type)
{
  CONST char* name = yccpSimpleName( ctx, type);

  yccpGenTypeCode( ctx, fp, type, name, TRUE);
  yccfpPrint( fp, " = \n");
  yccfpIncIndent( fp);
  yccFormatTypeCodeDefn( ctx, fp, yrGetTypeCode( type));
  yccfpDecIndent( fp);
}

/* ---------------------------------------------------------------------- */

STATICF void yccpGenUnionMbrDefn( ycctx* ctx, yccfp* fp, yrunmbr* mbr, 
                             CONST char* unname)
{
  yrobj* type;
  yrobj* base;
  yrdk base_kind;
  CONST char* tname;
  CONST char* kwdpfx = ((*ctx->lang->kwdchk)( ctx, mbr->name) ? "_" : "");

  type = mbr->type;
  if ( yrGetKind(type) == yrdkAlias )
    base = yrGetAliasBaseType( type);
  else
    base = type;
  base_kind = yrGetKind( base);
  tname = yccpTypeName( ctx, type);

  for (;;)                    /* will loop for primitives */
  {
    switch (base_kind)
    {
      case yrdkInterface:
          /***** void N( T_ptr) *****/
        yccfpPrint( fp, "void %s::%s%s( %s_ptr _val)\n{\n", 
                    unname, kwdpfx, mbr->name, tname);
        yccfpIncIndent( fp);
        yccfpDecIndent( fp);
        yccfpPrint( fp, "}\n\n");

          /***** T_ptr N() const *****/
        yccfpPrint( fp, "%s_ptr %s::%s%s() const\n{\n", 
                    tname, unname, kwdpfx, mbr->name);
        yccfpIncIndent( fp);
        yccfpPrint( fp, "return *(%s_ptr*)(this->_data);\n", tname);
        yccfpDecIndent( fp);
        yccfpPrint( fp, "}\n\n");

        return;
      case yrdkEnum:
          /***** void N(T) *****/
        yccfpPrint( fp, "void %s::%s%s( %s _val)\n{\n", 
                    unname, kwdpfx, mbr->name, tname);
        yccfpIncIndent( fp);
        yccfpDecIndent( fp);
        yccfpPrint( fp, "}\n\n");

          /***** T N() const; *****/
        yccfpPrint( fp, "%s %s%s() const\n{\n", tname, kwdpfx, mbr->name);
        yccfpIncIndent( fp);
        yccfpPrint( fp, "return *(%s*)(this->_data);\n", tname);
        yccfpDecIndent( fp);
        yccfpPrint( fp, "}\n\n");

        return;
      case yrdkStruct:
      case yrdkUnion:
      case yrdkException:
      case yrdkSequence:
          /***** void N(const T&) *****/
        yccfpPrint( fp, "void %s::%s%s( const %s& _val)\n{\n", 
                    unname, kwdpfx, mbr->name, tname);
        yccfpIncIndent( fp);
        yccfpDecIndent( fp);
        yccfpPrint( fp, "}\n\n");

          /***** T& N() *****/
        yccfpPrint( fp, "%s& %s::%s%s()\n{\n", 
                    tname, unname, kwdpfx, mbr->name);
        yccfpIncIndent( fp);
        yccfpPrint( fp, "return *(%s*)(this->_data);\n", tname);
        yccfpDecIndent( fp);
        yccfpPrint( fp, "}\n\n");

          /***** const T& N() const *****/
        yccfpPrint( fp, "const %s& %s::%s%s() const\n{\n", 
                    tname, unname, kwdpfx, mbr->name);
        yccfpIncIndent( fp);
        yccfpPrint( fp, "return *(%s*)(this->_data);\n", tname);
        yccfpDecIndent( fp);
        yccfpPrint( fp, "}\n\n");
        return;
      case yrdkArray:
          /***** void N(T) *****/
        yccfpPrint( fp, "void %s::%s%s( %s _val)\n{\n", 
                    unname, kwdpfx, mbr->name, tname);
        yccfpIncIndent( fp);
        yccfpDecIndent( fp);
        yccfpPrint( fp, "}\n\n");

          /***** T_slice* N() const *****/
        yccfpPrint( fp, "%s_slice* %s::%s%s() const\n{\n", 
                    tname, unname, kwdpfx, mbr->name);
        yccfpIncIndent( fp);
        yccfpPrint( fp, "return (%s_slice*)(this->_data);\n", tname);
        yccfpDecIndent( fp);
        yccfpPrint( fp, "}\n\n");
        return;
      case yrdkString:
          /***** void N(char*) *****/
        yccfpPrint( fp, "void %s::%s%s( char* _val)\n{\n", 
                    unname, kwdpfx, mbr->name);
        yccfpIncIndent( fp);
        yccfpDecIndent( fp);
        yccfpPrint( fp, "}\n\n");

          /***** void N(const char*) *****/
        yccfpPrint( fp, "void %s::%s%s( const char* _val)\n{\n", 
                    unname, kwdpfx, mbr->name);
        yccfpIncIndent( fp);
        yccfpDecIndent( fp);
        yccfpPrint( fp, "}\n\n");

          /***** void N(const CORBA::String_var&) *****/
        yccfpPrint( fp, "void %s::%s%s( const %sString_var& _val)\n{\n",
                    unname, kwdpfx, mbr->name, YCP_CORBA(ctx));
        yccfpIncIndent( fp);
        yccfpDecIndent( fp);
        yccfpPrint( fp, "}\n\n");

          /***** const char* N() const *****/
        yccfpPrint( fp, "const char* %s::%s%s() const\n{\n", 
                    unname, kwdpfx, mbr->name);
        yccfpIncIndent( fp);
        yccfpDecIndent( fp);
        yccfpPrint( fp, "}\n\n");
        return;
      case yrdkPrimitive:
          /*
           * For most types, it's just like enums:
           *  void N(T);
           *  T N() const;
           * For strings, see yrdkString. For TypeCode, see yrdkInterface.
           * For Any, see yrdkStruct.
           */
        switch (yrPrimData(base).kind)
        {
          case yrpkstring:
            base_kind = yrdkString;
            break;
          case yrpkTypeCode:
            base_kind = yrdkInterface;
            break;
          case yrpkany:
            base_kind = yrdkStruct;
            break;
          default:
            base_kind = yrdkEnum;
            break;
        }
        break;
      default:
        yseThrow(YC_EX_FAILURE);
        break;
    }
  }
}


/* ----------------------------------------------------------------------- */
/*
 * yccpGenOraExtDefns - Generate Oracle Extensions for types which map to
 *    C++ classes.
 *
 * At present, this is only the _typecode member function. Presumably it will 
 * grow once we hammer out the implementation.
 */

STATICF void yccpGenOraExtDefns( ycctx* ctx, yccfp* fp, yrobj* type)
{
  switch (yrGetKind( ycgScope(ctx)))
  {
    case yrdkStruct:             /* static member function */
    case yrdkUnion:
    case yrdkException:
    case yrdkInterface:
    case yrdkSequence:
    {
      CONST char* name = yccpScopedName( ctx, type);

      yccfpPrint( fp, "/* OMN Extensions */\n");
      yccfpPrint( fp, "%sTypeCode_ptr %s::_typecode()\n{\n", 
                  name, YCP_CORBA(ctx));
      yccfpIncIndent( fp);
      yccfpDecIndent( fp);
      yccfpPrint( fp, "}\n\n");
      break;
    }
    default:
      break;
  }
}

/* ----------------------------------------------------------------------- */

STATICF void yccpGenOpClient( ycctx* ctx, yccfp* fp, yrobj* obj)
{
  CONST char* scname;
  CONST char* name;
  ycgkwdfp kwdfp = ctx->lang->kwdchk;
  yrobj* rettype = (yrOpData(obj).rettype ? yrOpData(obj).rettype
                           : yrGetPrimitive( ctx->repository, yrpkvoid));
  yslst* pars = yrOpData(obj).pars;
  ysle* le;

  scname = yccpScopedName( ctx, yrGetDefinedIn(obj));
  name = yccpSimpleName( ctx, obj);

    /***** Function header *****/
  yccpGenParamType( ctx, fp, rettype, YOMODE_RETURN);
  yccfpPrint( fp, " %s::%s( ", scname, name);

  if ( pars )
  {
    for ( le = ysLstHead(pars); le; le = ysLstNext(le))
    {
      yrpar* par = (yrpar*)ysLstVal(le);
 
      yccpGenParamType( ctx, fp, par->type, par->mode);
      yccfpPrint( fp, " %s%s, ",
                  ((*kwdfp)(ctx, par->name) ? "_" : ""), par->name);
    }
  }
  yccfpPrint( fp, "%sEnvironment& env, ysevt* usrevt)\n{\n", YCP_CORBA(ctx));
  yccfpIncIndent(fp);

  yccfpDecIndent(fp);
  yccfpPrint( fp, "}\n\n");
}

/* ----------------------------------------------------------------------- */

STATICF void yccpGenAttrClient( ycctx* ctx, yccfp* fp, yrobj* obj)
{
  CONST char* scname;
  CONST char* name;
  yrobj* rettype = (yrOpData(obj).rettype ? yrOpData(obj).rettype
                           : yrGetPrimitive( ctx->repository, yrpkvoid));
  yslst* pars = yrOpData(obj).pars;

  scname = yccpScopedName( ctx, yrGetDefinedIn(obj));
  name = yccpSimpleName( ctx, obj);

    /***** Accessor *****/
  yccpGenParamType( ctx, fp, yrAttrData(obj).type, YOMODE_RETURN);
  yccfpPrint( fp, " %s::%s( %sEnvironment& _env, ysevt* usrevt)\n{\n", 
              scname, name, YCP_CORBA(ctx));
  yccfpIncIndent(fp);
  /* @@ */
  yccfpDecIndent(fp);
  yccfpPrint( fp, "}\n\n");

    /***** Mutator *****/
  if ( yrAttrData(obj).mode != YR_ATTR_RO )
  {
    yccfpPrint( fp, "void %s::%s( ", scname, name);
    yccpGenParamType( ctx, fp, yrAttrData(obj).type, YOMODE_IN);
    yccfpPrint( fp, " _val, %sEnvironment& env, ysevt* usrevt)\n{\n", 
                YCP_CORBA(ctx));
    yccfpIncIndent(fp);
    /* @@ */
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");
  }
}
