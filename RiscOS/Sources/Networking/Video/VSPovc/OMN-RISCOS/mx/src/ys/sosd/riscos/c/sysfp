/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * sysfp.c - OMX Host File System I/O
 */
/*#define DEBUG*/

#ifndef RISCOS
#include <errno.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <unistd.h>
#include <limits.h>
#endif
#include <sys/types.h>
#include <dirent.h>

/*extern char *sys_errlist[];*/

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef SYSFP_ORACLE
#include <sysfp.h>
#endif

/*
 * SYSFPKIND_TEXT
 * We declare this is a constant because we need to be able to distinguish
 * it from all other values passed to sysfpOpen() because it gets special
 * handling.
 */
externdef CONST_DATA char SYSFPKIND_TEXT[] = "";

/*
 * sysfpOpen - open a file
 */
sysfp *sysfpOpen(CONST char *fn, CONST char *type, CONST char *kind,
                 CONST char **errtxt)
{
  FILE *fp;

  #ifdef RISCOS

    fp = fopen(fn, type);

    #ifdef DEBUG
      printf("open %s, type=%s, ret %x\n", fn, type, fp);
    #endif

    if (!fp) *errtxt = "File won't open";

  #else

    char  ftyp[32];

    if (kind != SYSFPKIND_TEXT)
    {
      DISCARD sprintf(ftyp, "%sb", type);             /* open in binary mode */
      fp = fopen(fn, ftyp);
    }
    else fp = fopen(fn, type);

    if (!fp) *errtxt = sys_errlist[errno];

  #endif

  return (sysfp *) fp;
}

/*
 * sysfpClose - close a file
 */
void sysfpClose(sysfp *fp)
{
  fclose((FILE *) fp);
}

/*
 * sysfpEof - returns true if at eof
 */
boolean sysfpEof(sysfp *fp)
{
  return (feof((FILE *) fp) ? TRUE : FALSE);
}

/*
 * sysfpSeek - seek to position
 */
boolean sysfpSeek(sysfp *fp, CONST sysb8 *offset)
{
  return (fseek((FILE *) fp, sysb8msk(offset), 0) ? FALSE : TRUE);
}

/*
 * sysfpTell - tell position
 */
void sysfpTell(sysfp *fp, sysb8 *offset)
{
  sb4 off = ftell((FILE *) fp);
  sysb8ext(offset, off);
}

/*
 * sysfpRead - read from file
 */
size_t sysfpRead(sysfp *fp, dvoid *buf, size_t len)
{
  return fread(buf, 1, len, (FILE *) fp);
}

/*
 * sysfpWrite - write to file
 */
size_t sysfpWrite(sysfp *fp, dvoid *buf, size_t len)
{
  return fwrite(buf, 1, len, (FILE *) fp);
}

/*
 * sysfpFlush - flush buffer
 */
boolean sysfpFlush(sysfp *fp)
{
  return (fflush((FILE *) fp) == 0 ? TRUE : FALSE);
}

/*
 * sysfpPrint - print to file
 */
boolean sysfpPrint(sysfp *fp, CONST char *fmt, ...)
{
  va_list ap;
  boolean ok;

  va_start(ap, fmt);
  ok = (vfprintf((FILE *) fp, fmt, ap) != EOF);
  va_end(ap);

  return ok;
}


/*
 * sysfpAccess - tests for access to a file
 */
boolean sysfpAccess(CONST char *fn, CONST char *type)
{
  #ifndef RISCOS

    boolean readon;
    char    path[SYSFP_MAX_PATHLEN];

    readon = !strcmp(type, "r");

    if (!access(fn, (readon ? R_OK : W_OK)))
      return TRUE;

    if (errno == ENOENT && (*type == 'w' || *type == 'a'))
      {
        sysfpExtractPath(path, fn);
        if (!access(path, W_OK))
          return TRUE;
      }

    return FALSE;

  #else

    #ifdef DEBUG
      printf("access %s, type = %s\n", fn, type);
    #endif

    return TRUE;

  #endif
}

#ifdef RISCOS

  /*
   * 23/04/1999 (ADH):
   *
   * Limited mplementation of opendir/readdir/closedir to get
   * sysfpGetDir working with no internal changes. Current
   * limitations:
   *
   * - malloc etc. used to try and make it closer to the POSIX
   *   call, but this means we'll leak if closedir() isn't
   *   called - there's no easy or obvious way to clean up
   *   automatically if this isn't done.
   *
   * - Since OS_GBPB 9 doesn't cope with files being added or
   *   removed from the directory during operation, neither
   *   does readdir, even though it should do to correctly
   *   emulate the POSIX readdir.
   *
   * This source assumes that d_name in dirent is defined as
   * a char array of fixed size as it uses sizeof() on this
   * item; the header in the standard RISC OS source tree does,
   * others may not (e.g. d_name[1] seems quite common).
   *
   */

  #include <stdlib.h>
  #include <string.h>

  #include "kernel.h"
  #include "swis.h"

  /*
   * sysfpIsDir - tests for a directory
   */
  boolean sysfpIsDir(CONST char *fn)
  {
    unsigned int type;

    #ifdef DEBUG
      printf("isdir %s\n", fn);
    #endif

    if (
         _swix(OS_File,
               _INR(0,1) | _OUT(0),

               17,
               fn,

               &type)
       )
       return TRUE;

    else if (type == 2 || type == 3) return TRUE;
    else                             return FALSE;
  }

  DIR * opendir(const char * dir)
  {
    DIR           * d;
    struct dirent * e;
    char          * b;

    if (!dir || !*dir) return NULL;

    d = malloc(sizeof(DIR));
    e = malloc(sizeof(struct dirent));
    b = malloc(strlen(dir) + 1);

    if (!d || !e || !b)
    {
      free(d);
      free(e);
      free(b);

      return NULL;
    }
    else
    {
      d->dd_fd     = 1; /* Anything but NULL in case anyone checks! */
      d->dd_loc    = 0;
      d->dd_buf    = b;
      d->dd_len    = strlen(dir) + 1;
      d->dd_seek   = (long) e; /* Yuk... Is this the only place to put it? */
      d->dd_rewind = 0;

      strcpy(b, dir);

      return d;
    }
  }

  struct dirent * readdir(DIR * dirp)
  {
    struct dirent * entp;
    int             read, cont;

    if (!dirp) return NULL;
    else entp = (struct dirent *) dirp->dd_seek;

    /* Did the last call run off the end? */
    if (dirp->dd_loc < 0) return NULL;

    entp->d_fileno = dirp->dd_loc;
    entp->d_type   = DT_UNKNOWN;

    /*
     * Keep calling OS_GBPB 9 until it coughs up a leafname
     * or sets R4 (in 'cont') to <= 0 to say "finished".
     */

    do
    {
      if (
           _swix(OS_GBPB,
                 _INR(0,6) | _OUTR(3,4),

                 9,
                 dirp->dd_buf,
                 entp->d_name,
                 1,
                 dirp->dd_loc,
                 sizeof(entp->d_name),
                 NULL,

                 &read,
                 &cont)
         )
         return NULL;
    }
    while (read == 0 && cont >= 0);

    /* Did we run out of entries without reading one? */
    if (read == 0) return NULL;

    entp->d_reclen = sizeof(struct dirent);
    entp->d_namlen = strlen(entp->d_name);
    dirp->dd_loc   = cont;

    return entp;
  }

  int closedir(DIR * dirp)
  {
    if (dirp)
    {
      free(dirp->dd_buf);
      free((struct dirent *) dirp->dd_seek);

      free(dirp);
    }

    return 0;
  }

#endif /* #ifdef RISCOS */

/*
 * sysfpGetDir - get directory
 */
yslst *sysfpGetDir(CONST char *fn)
{
  DIR *dp;
  struct dirent *dep;
  yslst *noreg lst;

  dp = opendir(fn);
  if (!dp)
    return (yslst *) 0;

  lst = (yslst *) 0;
  yseTry
    {
      lst = ysLstCreate();

      while (dep = readdir(dp))
        ysLstEnq(lst, (dvoid *) ysStrDup(dep->d_name));

      DISCARD closedir(dp);
    }
  yseCatch(YS_EX_OUTMEM)
    if (lst)
      {
        ysLstDestroy(lst, ysmFGlbFree);
        lst = (yslst *) 0;
      }
  yseEnd

  return lst;
}

#ifndef RISCOS

  /*
   * sysfpSize - return the length of a file
   */
  CONST char *sysfpSize(CONST char *fn, sysb8 *sz)
  {
    struct stat buf;
    if (stat(fn, &buf))
      return sys_errlist[errno];
    else
      {
        sysb8ext(sz, buf.st_size);
        return (char *) 0;
      }
  }

  /*
   * sysfpLast - return last modification time of a file
   */
  CONST char *sysfpLast(CONST char *fn, sysb8 *mtime)
  {
    struct stat buf;
    if (stat(fn, &buf))
      return sys_errlist[errno];
    else
      {
        sysb8ext(mtime, buf.st_mtime);
        return (char *) 0;
      }
  }

#endif /* #ifndef RISCOS */

/*
 * sysfpRemove - remove a file
 */
CONST char *sysfpRemove(CONST char *fn)
{
  #ifdef DEBUG
    printf("remove %s ", fn);
  #endif

  if (remove(fn))
  {
    #ifdef DEBUG
      printf("failed\n");
    #endif

    return "Remove failed"; /*>>>sys_errlist[errno];*/
  }
  else
  {
    #ifdef DEBUG
      printf("ok\n");
    #endif

    return (char *) 0;
  }
}

/*
 * sysfpRename - rename a file
 */
CONST char *sysfpRename(CONST char *from, CONST char *to)
{
  #ifdef DEBUG
    printf("rename %s to %s\n", from, to);
  #endif

  if (rename(from, to))
  {
    #ifdef DEBUG
      printf("failed\n");
    #endif

    return "Rename failed"; /*>>>sys_errlist[errno];*/
  }
  else
  {
    #ifdef DEBUG
      printf("ok\n");
    #endif

    return (char *) 0;
  }
}

/*
 * sysfpForm - construct a filename
 */
void sysfpForm(char *result, CONST char *path, CONST char *base,
               CONST char *sfx)
{
  CONST char *s;
  size_t      len;

  /* prepend the path */

  #ifdef RISCOS

    if (!path)
    {
      #ifdef DEBUG
        printf("form: base=%s\n", base);
      #endif

      DISCARD strcpy(result, base);
    }
    else
    {

      #ifdef DEBUG
      printf("form: base=%s, path=%s\n", base, path);
      #endif

      len = strlen(path);
      DISCARD strcpy(result, path);

      if (path[len-1] != '.')
      {
        result[len++] = '.';
        result[len] = '\0';
      }

      DISCARD strcat(result, base);
    }

    /* append the suffix */

    if (sfx && strlen(sfx) > (size_t) 0)
    {
      /* check for existing suffix */

      for (s = base + strlen(base); s > base && *s != '/'; s--) ;

      if (*s != '/' || strcmp(s + 1, sfx))
      {
        DISCARD strcat(result, "/");
        DISCARD strcat(result, sfx);
      }
    }

  #else /* #ifdef RISCOS */

    if (*base == '/' || !path)
      DISCARD strcpy(result, base);
    else
    {
      len = strlen(path);
      DISCARD strcpy(result, path);

      if (path[len-1] != '/')
        {
          result[len++] = '/';
          result[len] = '\0';
        }

      DISCARD strcat(result, base);
    }

    /* append the suffix */
    if (sfx && strlen(sfx) > (size_t) 0)
    {
      /* check for existing suffix */
      for (s = base + strlen(base); s > base && *s != '.'; s--) ;

      if (*s != '.' || strcmp(s + 1, sfx))
      {
        DISCARD strcat(result, ".");
        DISCARD strcat(result, sfx);
      }
    }

  #endif /* #ifdef RISCOS */

  #ifdef DEBUG
    printf("    returns %s\n", result);
  #endif
}

/*
 * sysfpExtractPath - extract pathname
 */
void sysfpExtractPath(char *path, CONST char *fn)
{
  CONST  char *s;
  size_t len;

  #ifdef RISCOS
    #ifdef DEBUG
      printf("extract path from %s\n", fn);
    #endif

    /* In RISC OS , '.' is the directory separator */
    /* and '@' is the currently selected directory */

    for (s = fn + strlen(fn); s > fn && *s != '.'; s--) ;
    if (s == fn)
      DISCARD strcpy(path, "@");
  #else
    for (s = fn + strlen(fn); s > fn && *s != '/'; s--) ;
    if (s == fn)
      DISCARD strcpy(path, ".");
  #endif

  else
  {
    len = min(s - fn, SYSFP_MAX_PATHLEN - 1);
    DISCARD memcpy(path, fn, len);
    path[len] = '\0';
  }

  #ifdef DEBUG
    printf("    returns %s\n", path);
  #endif
}

/*
 * sysfpExtractFile - extract filename
 */
void sysfpExtractFile(char *file, CONST char *fn)
{
  CONST  char *s;
  size_t len;

  #ifdef RISCOS
    #ifdef DEBUG
      printf("extract file from %s\n", fn);
    #endif

    /* In RISC OS , '.' is the directory separator */

    for (s = fn + strlen(fn); s > fn && *s != '.'; s--) ;
    DISCARD strcpy(file, (*s == '.' ? s + 1 : s));
  #else
    for (s = fn + strlen(fn); s > fn && *s != '/'; s--) ;
    DISCARD strcpy(file, (*s == '/' ? s + 1 : s));
  #endif

  #ifdef DEBUG
    printf("    returns %s\n", file);
  #endif
}

/*
 * sysfpExtractBase - extract basename
 */
void sysfpExtractBase(char *base, CONST char *fn)
{
  char *s;

  sysfpExtractFile(base, fn);

  #ifdef RISCOS
    for (s = base + strlen(base); s > base && *s != '/'; s--) ;
    if (*s == '/')
      *s = '\0';
  #else
    for (s = base + strlen(base); s > base && *s != '.'; s--) ;
    if (*s == '.')
      *s = '\0';
  #endif
}

/*
 * sysfpExtractSuffix - extract suffix
 */
void sysfpExtractSuffix(char *sfx, CONST char *fn)
{
  CONST char *s;

  #ifdef RISCOS
    for (s = fn + strlen(fn); s > fn && *s != '/'; s--) ;
    if (*s == '/')
  #else
    for (s = fn + strlen(fn); s > fn && *s != '.'; s--) ;
    if (*s == '.')
  #endif
    DISCARD strcpy(sfx, s + 1);
  else
    DISCARD strcpy(sfx, "");
}


/*
 * sysfpTemp - make temporary file name (including path and suffix).
 * NOTE: OSD file, so writeable static data permitted.
 */
static ub2 sysfpSeq = (ub2)0;

void sysfpTemp(char *result, CONST char *path, CONST char *sfx)
{
  char base[16];

  DISCARD sprintf(base, "tmp%04x", sysfpSeq++);
  sysfpForm(result, path, base, sfx);
}


/*
 * sysfpGetCwd - get current working directory
 */
CONST char *sysfpGetCwd(char *result)
{
  #ifndef RISCOS
    if (!getcwd(result, SYSFP_MAX_PATHLEN))
      return sys_errlist[errno];
    else
  #endif

  return (char *)0;
}
