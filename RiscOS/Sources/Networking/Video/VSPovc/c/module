/*	MODULE.C

© Acorn Computers Ltd

Project : Acorn OVC

Purpose:


History:

Date        Who   Description of change
===========================================
25-Jun-1998 CP    Header added

                  Modified to use auto-generated cmhg.h file

                  Converted all functions to ANSI style.

04-Sep-1998 CP    Overhauled SWI handler, although forced to leave the
                  longjmp in place untouched. It is now protected against
                  unused/unknown SWI numbers.

20-Oct-1998 CP    Tidied up mpeg_streamcount().

18-Dec-1998 CP    Fixed error checking - this caused bad values to filter
                  back into the main program, and be used as 'real' values.

15-Apr-1999 CP    Removed mnIdle stuff. This has been moved to the MN
                  library, since if MediaNet isn't running, it should be
                  switched off. Now more logically placed under the control
                  of the Medianet startup functions (see
                  mx/src/mn/sosd/riscos/smni.c).

26-Apr-1999 ADH   No longer need init_yoSysExMap() or init_yoCorbaExTbl().
                  Standard date format for this history. Renamed non-
                  standard 'cmhg.h' to 'vsphdr.h' (avoids AMU confusion of
                  'cmhg.h').

27-Apr-1999 ADH   Structure eblock had a char * for the error message!
                  Changed to char array, so errors returned with this now
                  work.

20-May-1999 ADH   Reformatted source to correct indentation faults and
                  make everything easiser to read. Standard function
                  headers as per coding guidelines. Comment and date
                  syntax rationalised throughout. This history is now
                  deprecated; use CVS logs.

***************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "debug.h"

#undef DEBUG_TRACE
#ifdef MODULE_DEBUG
  #define DEBUGLIB
  #include "debuglib/debuglib.h"
#endif

#include "sys/types.h"
#include "stdio.h"
#include "vsp.h"
#include <sys/socket.h>
#include <socklib.h>
#include <sys/ioctl.h>
#include <netinet/in.h>
#include <inetlib.h>
#include <net/if.h>
#include <kernel.h>
#include <swis.h>
#include <setjmp.h>
#include "misc.h"
#include "mpegctrl.h"
#include "Global/Services.h"

#include "vsphdr.h"

/* exports from other C files */
#include "module.h"
#include "vspc.h"
#include "mzswrap.h"
/*#include "smnudp.h"*/

void smnudpPrintNioInfo(void);

//volatile int callbackflag = 0;

struct
{
  int  e_nbr;
  char e_string[64];

} ebuf = { 0 };

struct eblock
{
  int  err_nbr;
  char err_string[64]; /* Saves space over a whole _kernel_oserror structure */
};

struct eblock error_blocks[N_ERRORS] =
{
  VSP_E_WRONGCTRL, "Invalid play control value",
  VSP_E_UNKSERVER, "Video server not known",
  VSP_E_INVHANDLE, "Invalid stream handle",
  VSP_E_NOHANDLE,  "No stream handle available",
  VSP_E_NOMEMORY,  "No memory",
};

#define N_OVS_ERRORS 10

struct eblock ovs_error_blocks[N_OVS_ERRORS] =
{
  1,   "Movie not found",
  2,   "Session allocation error",
  3,   "Insufficient network resources. Please try again later",
  4,   "Factory error",
  5,   "Prepare error",
  6,   "Play error",
  7,   "There has been a fatal error. Please reboot.",
  8,   "Invalid channel selection",
  999, "Can't contact video server",
  9,   "Initialisation error"
};

extern _kernel_oserror * ovs_error(int); /* fixed prototype */

/* imports */

extern int mn_started;

/* global variables */

void * module_wsp          = NULL;
int    endofstream         = 0;
int    endofstream_timer   = 0;
int    endofstream_timeout = 0;
int    currentop           = 0;
int    mnidle_timer        = 0;
int    boottime            = 0;
int    udpport             = 0;
int    sshutdown           = 0;
int    mpeg_handle;
int    ovs_vsscan_rate;
int    ovs_slomo_rate;
char   gw_phy_adr          [64];
char   dflt_gw_phy_adr     [64];
char   destadr             [128];

/* static variables */

static int     is_atm_mpeg = 0;
static int     save_optype = 0;
static char    mpeg_vs_pvc [16];

static jmp_buf ljenv;
static int     watchdog_timer = 0;
static int     init_type      = 0;
static int     done_pvc       = 0;

/*************************************************/
/* set_watchdog_timer                            */
/*                                               */
/* Initialise global 'watchdog_timer' to begin a */
/* timing operation. (More info TBD).            */
/*************************************************/

void set_watchdog_timer(void)
{
  watchdog_timer = WATCHDOG_TIMEOUT;
}

/*************************************************/
/* clr_watchdog_timer                            */
/*                                               */
/* Zero global 'watchdog_timer' to complete a    */
/* timing operation. (More info TBD).            */
/*************************************************/

void clr_watchdog_timer(void)
{
  watchdog_timer = 0;
}

/*************************************************/
/* read_destadr()                                */
/*                                               */
/* Read the destination address. (TBD: Wossat?). */
/*                                               */
/* Returns:    1 if successful, else 0.          */
/*************************************************/

static int read_destadr(void)
{
  FILE * fp;
  int    i;
  char   line  [256];
  char   adr   [64];
  char   did   [128];
  char   myadr [64];

  /* 18-Dec-1998 (CP): added proper error checking to fn call */

  if (read_my_ip_address(myadr) != 1)
  {
    return 0;
  }

  if ((fp = fopen(DESTADRSFILE, "r")) == NULL)
  {
    return 0;
  }

  while (fgets(line, 100, fp) != NULL)
  {
    if (line[0] == '|') /* ignore comment lines */
    {
      continue;
    }

    i = sscanf(line, "%s %s", adr, did);

    if (i == 2 && strcmp(adr, myadr) == 0)
    {
      /* if 2 values read OK, and the 1st value matches STB IP address then
       * set the destination address to be the value of the second value
       */

      strcpy(destadr, did);
      break;
    }
  }

  fclose(fp);

  return 1;
}

/*************************************************/
/* enable_tick_handler()                         */
/*                                               */
/* Enable the tick handler - gets called every   */
/* 100cs via. OS_CallEvery.                      */
/*                                               */
/* Returns:    Pointer to a _kernel_oserror      */
/*             as returned by the _kernel_swi    */
/*             call to OS_CallEvery, cast as an  */
/*             int (...Why?! TBD).               */
/*************************************************/

static int enable_tick_handler(void)
{
  _kernel_swi_regs r;

  r.r[0] = 100;
  r.r[1] = (int) tick_entry;
  r.r[2] = (int) module_wsp;

  return (_kernel_swi(XOS_Bit | OS_CallEvery, &r, &r) != 0 ? -1 : 0);
}

/*************************************************/
/* vsp_init()                                    */
/*                                               */
/* Module initialisation code.                   */
/*                                               */
/* Parameters: As usual for a C module           */
/*             initialisation entry point.       */
/*************************************************/

_kernel_oserror * vsp_init(const char * cmd_tail, int pbase, void * pw)
{
  char buf[128];

  #ifdef MODULE_DEBUG
  {
    debug_device dev = PRINTF_OUTPUT;

    debug_initialise("VSPovc", "NFS:OVCdebug", NULL);
    debug_atexit();
    debug_set_screen_cornering(FALSE);
    debug_set_unbuffered_files(TRUE);
    debug_set_device(dev);

// Right now, any attempt to turn on trace debugging will crash
// the box somewhere through YS initialisation (tried remotedb
// which generally failed, printf which crashed and file output
// which crashed).
//
//    #ifdef DEBUG_TRACE
//      debug_initialise_trace(dev, "");
//      dprintf(("", "", "Trace initialised\n"));
//    #endif
  }
  #endif

  module_wsp = pw;

  if (read_sysvar("OMN_ADDR", dflt_gw_phy_adr, sizeof(dflt_gw_phy_adr)) == 0)
    return NULL;

  if (read_sysvar("MPEG$DTType", buf, sizeof(buf)) == 0)
    return NULL;

  if (read_sysvar("MPEG$EOSTimeout", buf, sizeof(buf)) != 0)
    endofstream_timeout = atoi(buf);

  if (caseless_strcmp(buf, "ATM_AAL5") == 0)
    is_atm_mpeg = 1;

  if (read_sysvar("MPEG$UDPPort", buf, sizeof(buf)) != 0)
    udpport = atoi(buf);

  if (read_sysvar("MPEG$ATMpvc", buf, sizeof(buf)) != 0)
    strcpy(mpeg_vs_pvc, buf);

  if (read_sysvar("OVS$ScanRate",  buf, sizeof(buf)) != 0) ovs_vsscan_rate = atoi(buf);
  else                                                     ovs_vsscan_rate = OVS_VSSCAN_RATE;
  if (read_sysvar("OVS$SloMoRate", buf, sizeof(buf)) != 0) ovs_slomo_rate  = atoi(buf);
  else                                                     ovs_slomo_rate  = OVS_SLOWMO_RATE;

  boottime   = time(0);
  destadr[0] = 0;

  if (read_destadr() != 1)
  {
    return (_kernel_oserror *) &ovs_error_blocks[9];
  }

  (void) enable_tick_handler();

  return NULL;
}

/*************************************************/
/* read_my_ip_address()                          */
/*                                               */
/* Read the IP address of the box we're running  */
/* on.                                           */
/*                                               */
/* Parameters: Pointer to a buffer large enough  */
/*             to take the IP address as a       */
/*             dotted quad string (so 16 bytes   */
/*             or more).                         */
/*                                               */
/* Returns:    1 if successful, else 0.          */
/*************************************************/

int read_my_ip_address(char * adr)
{
  char                  buf[512];
  struct ifconf        ifc;
  struct ifreq         ifreq, * ifr;
  struct sockaddr_in * sin;
  int                  s, n;

  if ((s = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
  {
     perror("read_my_ipaddress:socket:");
     return (0);
  }

  ifc.ifc_len = sizeof (buf);
  ifc.ifc_buf = buf;
  if (socketioctl(s, SIOCGIFCONF, (char *)&ifc) < 0)
  {
    perror("read_my_ipaddress:socketioctl(SIOCGIFCONF):");
    socketclose(s);
    return (0);
  }
  ifr = ifc.ifc_req;

  /* 18-Dec-1998 (CP): split and tidied up for loop to make it readable.
   * Added error checking and reporting
   */

  for (n = ifc.ifc_len / sizeof (struct ifreq); n > 0; n--, ifr++)
  {
    ifreq = *ifr;

    /* if found the loopback i/f, then ignore it */
    if (socketioctl(s, SIOCGIFFLAGS, (char *) &ifreq) < 0)
    {
      perror("read_my_ipaddress:socketioctl(SIOCGIFFLAGS):");
      continue;
    }

    if (ifreq.ifr_flags & IFF_LOOPBACK) continue;

    /* if interface is not UP then ignore it (was also required to be broadcast - dunno why :-7 ) */
    if ((ifreq.ifr_flags & IFF_UP) != IFF_UP) continue;

    /* pretty sure that this is a valid interface, so get the address */
    if (socketioctl(s, SIOCGIFADDR, (char *) &ifreq) < 0)
    {
      perror("read_my_ipaddress:socketioctl(SIOCGIFADDR):");
      continue;
    }

    sin = (struct sockaddr_in *)&ifreq.ifr_addr;
    strcpy(adr, inet_ntoa (sin->sin_addr) );
    break;
  }

  socketclose(s);

  return (1);
}

//static int callback(void (* func)())
//{
//    _kernel_swi_regs r;
//
//    r.r[0] = (int)func;
//    r.r[1] = (int)module_wsp;
//    return (_kernel_swi(XOS_Bit | OS_AddCallBack, &r, &r) != 0 ? -1 : 0);
//}

//static void setcallback(void)
//{
//    if (callbackflag == 0)
//    {
//        callbackflag = 1;
//        if (callback(callb_entry) != 0)
//        {
//            callbackflag = 0;
//        }
//    }
//}

/*************************************************/
/* tick_handler()                                */
/*                                               */
/* A function called via. OS_CallEvery, which is */
/* registered through enable_tick_handler.       */
/*                                               */
/* Parameters: As usual for a callback function. */
/*************************************************/

_kernel_oserror * tick_handler(_kernel_swi_regs * r, void * pw)
{
  if (!mn_started)
  {
    return (NULL);
  }

  if (watchdog_timer && --watchdog_timer == 0)
  {
    mn_started = 0;
    currentop  = 999;

    return (NULL);
  }

//  if (mnidle_timer && --mnidle_timer == 0)
//  {
//      /* post callback to do mnIdle() */
//      setcallback();
//  }

  if (endofstream_timer > 0 && --endofstream_timer == 0)
  {
    #if defined(MODULE_DEBUG) && defined(EOS)
      SetSystemVariable("OVCdebug$EOS", "normal timeout");
    #endif

    endofstream = 1;
  }
  else
  {
    local_npt();
  }

  return (NULL);
}

/*************************************************/
/* disable_tick_handler()                        */
/*                                               */
/* Disable the handler registered with           */
/* enable_tick_handler.                          */
/*                                               */
/*                                               */
/* Returns:    Pointer to a _kernel_oserror      */
/*             struct, cast as an int.           */
/*************************************************/

static int disable_tick_handler(void)
{
  _kernel_swi_regs r;

  r.r[0] = (int)tick_entry;
  r.r[1] = (int)module_wsp;

  return (_kernel_swi(XOS_Bit | OS_RemoveTickerEvent, &r, &r) != 0 ? -1 : 0);
}

/*************************************************/
/* vsp_final()                                   */
/*                                               */
/* Module finalisation code.                     */
/*                                               */
/* Parameters: As standard for a C module        */
/*             finalisation function.            */
/*************************************************/

_kernel_oserror * vsp_final(int fatal, int podule, void * pw)
{
  (void) disable_tick_handler();
  smnudpClose(0);
  return (0);
}

/*************************************************/
/* ovs_error()                                   */
/*                                               */
/* Translate an error number into an OVS         */
/* error message (see ovs_error_blocks array at  */
/* the top of the source file).                  */
/*                                               */
/* Parameters: Error number.                     */
/*                                               */
/* Returns:    A read-only _kernel_oserror       */
/*             pointer holding details of the    */
/*             appropriate error message.        */
/*************************************************/

_kernel_oserror * ovs_error(int err)
{
  int i;

  if (!err) return NULL;

  for (i = 0; i < N_OVS_ERRORS; i++)
  {
    if (ovs_error_blocks[i].err_nbr == err)
    {
      ebuf.e_nbr = err;
      sprintf(ebuf.e_string, "%s\n", ovs_error_blocks[i].err_string);
      return ((_kernel_oserror *) &ebuf);
    }
  }

  ebuf.e_nbr = err;
  sprintf(ebuf.e_string, "Unspecified Error %d\n", err);

  return ((_kernel_oserror *) &ebuf);
}

/* debug SWI tracking */

struct LLint
{
  int            SWInum;
  struct LLint * next;
};

struct LLint * SWIlistHead = NULL; /* start of list */
struct LLint * SWIlistTail = NULL; /* end of list, where you add next LLint */

/*************************************************/
/* vsp_swi_handler()                             */
/*                                               */
/* Module SWI handler.                           */
/*                                               */
/* Parameters: As standard for a C module        */
/*             SWI handler.                      */
/*************************************************/

_kernel_oserror * vsp_swi_handler(int swinum, _kernel_swi_regs * r, void * pw)
{
  int               optype;
  char            * string;
  _kernel_oserror * err = NULL;

  /* 04-Sep-1998 (CP): set up longjmp to enter this conditional statement.
   * Dunno why this is being done. :-(
   */

  if ((optype = setjmp(ljenv)) != 0)
  {
    #ifdef MODULE_DEBUG
      dprintf(("", "PANIC - longjmp called with argument %i\n", optype));
    #endif

    string = malloc(64);

    if(string != NULL)
    {
      sprintf(string, "longjmp called with argument %i\n\0", optype);
      SetSystemVariable("OVC$panic", string);
    }

    clr_watchdog_timer();
    save_optype = optype;

    if (optype == 999)
    {
      smnudpClose(0);
    }
    else
    {
      #if defined(MODULE_DEBUG) && defined(EOS)
        SetSystemVariable("OVCdebug$close", "ovs_closestream called from longjmp");
      #endif

      (void) ovs_closestream();
    }

    return (ovs_error(optype));
  }

  set_watchdog_timer();

  switch (swinum)
  {
    case (VSP_OpenStream - VSP_00):
      err = OpenStream(r);
    break;

    case (VSP_CloseStream - VSP_00):
      err = CloseStream(r);
    break;

    case (VSP_CheckEndOfStream - VSP_00):
      err = CheckEndOfStream(r);
    break;

    case (VSP_SetSpeed - VSP_00):
      err = SetSpeed(r);
    break;

    case (VSP_SetPosition - VSP_00):
      err = SetPosition(r);
    break;

    case (VSP_ReadNPT - VSP_00):
      err = ReadNPT(r);
    break;

    default:
      err = error_BAD_SWI;
    break;
  }

  clr_watchdog_timer();

  return (err);
}

/*************************************************/
/* cli_handler()                                 */
/*                                               */
/* Module *command handling code.                */
/*                                               */
/* Parameters: As standard for a C module CLI    */
/*             handler function.                 */
/*************************************************/

_kernel_oserror * cli_handler(const char * arg_string, int argc, int cmd_no, void * pw)
{
  switch (cmd_no)
  {
    case (CMD_vspovcinfo):
    {
      printf("VSPovc module information\n");
      printf("NIO information:\n");

      smnudpPrintNioInfo();
    }
    break;

    default:
    break;
  }

  return NULL; /* lazy, I know.... :-7 */
}

/*************************************************/
/* ovs_initstream()                              */
/*                                               */
/* TBD. What are the SWIs and parameters...?     */
/*************************************************/

void ovs_initstream(int handle, int skipcnt)
{
  _kernel_swi_regs r;

  if (is_atm_mpeg)
  {
    char video_host[6];
    int  i;

    video_host[0] = 0;
    video_host[1] = 0;

    for (i = 2; i < 6; i++) video_host[i] = 1;

    r.r[0] = 0;
    r.r[1] = (int)video_host;
    r.r[2] = MPEG_PORT_AAL5;
    r.r[3] = handle;
    r.r[4] = 0;
    r.r[5] = 0;

    (void) _kernel_swi(XOS_Bit | StreamInitSWI_ATM, &r, &r);

    init_type = 1;
  }
  else
  {
    r.r[0] = 2;
    r.r[1] = 0;
    r.r[2] = 0;
    r.r[3] = handle;
    r.r[4] = skipcnt;

    (void) _kernel_swi(XOS_Bit | StreamInitSWI, &r, &r);

    init_type = 2;
  }
}

/*************************************************/
/* vsp_error()                                   */
/*                                               */
/* Translate an error number into a VSP error    */
/* message (see error_blocks array at the top of */
/* the source file).                             */
/*                                               */
/* Parameters: Error number.                     */
/*                                               */
/* Returns:    A read-only _kernel_oserror       */
/*             pointer holding details of the    */
/*             appropriate error message.        */
/*************************************************/

_kernel_oserror * vsp_error(int err)
{
  int i;

  if (!err) return NULL;

  for (i = 0; i < N_ERRORS; i++)
  {
    if (error_blocks[i].err_nbr == err)
    {
      ebuf.e_nbr = err;
      strcpy(ebuf.e_string, error_blocks[i].err_string);
      return ((_kernel_oserror *) &ebuf);
    }
  }

  ebuf.e_nbr = err;

  sprintf(ebuf.e_string, "Unspecified error %d\n", err);

  return ((_kernel_oserror *) &ebuf);
}

/*************************************************/
/* mpeg_streamcount()                            */
/*                                               */
/* TBD (only one stream, surely?)                */
/*************************************************/

int mpeg_streamcount(int handle)
{
  _kernel_swi_regs   r;
  _kernel_oserror  * e;
  int                tags         [2];
  int                static_stats [3];

  tags[0] = MPEGControl_Stats_BytesRx; /* tag value for amount received by ctrl module */
  tags[1] = ENDOFTAGS;                 /* terminator */

  static_stats[2] = -1;  /* default value */

  r.r[0] = 0;
  r.r[1] = handle;
  r.r[2] = (int)tags;
  r.r[3] = (int)static_stats;
  r.r[4] = 12;

  e = _kernel_swi(XOS_Bit | MPEGControl_Stats, &r, &r);

  return (static_stats[2]);
}

/*************************************************/
/* do_cli()                                      */
/*                                               */
/* Execute a given *command, ignoring any error  */
/* it may raise.                                 */
/*                                               */
/* Parameters: Pointer to the command string.    */
/*************************************************/

static void do_cli(char * str)
{
  _kernel_swi_regs r;

  r.r[0] = (int)str;

  (void) _kernel_swi(XOS_Bit | OS_CLI, &r, &r);
}

/*************************************************/
/* ovs_initmpegpvc()                             */
/*                                               */
/* Initialise the PVC for an ATM based MPEG      */
/* stream.                                       */
/*************************************************/

void ovs_initmpegpvc(void)
{
  char buf[48];

  if (is_atm_mpeg)
  {
    done_pvc = 1;
    sprintf(buf, "atm25pvc 1.1.1.1 32 %s", mpeg_vs_pvc);
    do_cli(buf);
  }
}

/*************************************************/
/* read_sysvar()                                 */
/*                                               */
/* Read the value of a system variable.          */
/*                                               */
/* Parameters: Pointer to the variable name;     */
/*                                               */
/*             Pointer to a buffer to hold the   */
/*             variable value;                   */
/*                                               */
/*             Length of the buffer.             */
/*                                               */
/* Returns:    1 if successful, else 0 (e.g.     */
/*             variable is undefined).           */
/*************************************************/

int read_sysvar(char * var, char * buf, int buflen)
{
  _kernel_swi_regs   r;
  _kernel_oserror  * e;

  r.r[0] = (int)var;
  r.r[1] = (int)buf;
  r.r[2] = buflen;
  r.r[3] = 0;
  r.r[4] = 0;

  e = _kernel_swi(XOS_Bit | OS_ReadVarVal, &r, &r);

  if (e || r.r[2] == 0) return (0);

  buf[r.r[2]] = 0;

  return (1);
}


//_kernel_oserror * callb_handler(_kernel_swi_regs *rr, void *pw)
//{
//    if (callbackflag == 0)
//        return (NULL);
//    /* SCormie (06-Oct-98): Fix data abort problem if call back is set by ticker going off */
//    /* during VSP_CloseStream (shouldn't call mnIdle() if stream is now closed -
//       only call it if mn_started flag is set).           */
//    if (mn_started)
//    {
//        mnIdle();
//        mnidle_timer = MNIDLE_TIMEOUT;
//    }
//    callbackflag = 0;
//    return (NULL);
//}

/*************************************************/
/* ovcabort()                                    */
/*                                               */
/* Panic; longjmp back up the stack (to the SWI  */
/* handler, as it happens, so whoever calls this */
/* function must have gone down through the SWI  */
/* handler at some point or things will break).  */
/*************************************************/

void ovcabort(void)
{
  longjmp(ljenv, currentop);
}

/*************************************************/
/* vsp_service()                                 */
/*                                               */
/* Module service call handler.                  */
/*                                               */
/* Parameters: As standard for a C module        */
/*             service call handler.             */
/*************************************************/

void vsp_service (int service_number, _kernel_swi_regs * r, void * pw)
{
  _kernel_oserror  * e = NULL;
  _kernel_swi_regs   reg;
  static int         busy = 0;

  if (busy) return;

  busy += 1;

  switch (service_number)
  {
    case Service_Standby:
    {
      if (r->r[0] & 1)
      {
        /* Going into Standby */

        sshutdown = 1;
        e = _kernel_swi(VSP_CloseStream, &reg, &reg);
      }
      else
      {
        /* Coming out of Standby */

        sshutdown = 0;
      }
    }
    break;
  }

  busy -= 1;

  return;
}
