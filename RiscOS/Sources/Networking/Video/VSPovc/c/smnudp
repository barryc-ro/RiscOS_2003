/*	SMNUDP.C

© Acorn Computers Ltd

Project : ORACLE MEDIA EXCHANGE
Module:

Purpose: RiscOS-specific methods for UDP network interface objects

Functions : smnudpOpen
            smnudpClose
            smnudpSend
            smnudpRecv

History:

Date      Who     Description of change
===========================================
9/12/98    CP     Header added

                  Fixed error handling for socket calls

30mar99    CP     Added retries to the smnudpSend() routine. This is a
                  workaround to try and get the heartbeat etc working through an
                  unreliable internet stack.

***************************************************************************/

/*#define SMNUDP_DBG*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>

#include "errno.h"
#include <sys/fcntl.h>
#include <sys/types.h>

#ifndef __SYS_TIME__  /* protect from xple inclusion */
#include <sys/time.h>
#endif

#include <sys/socket.h>
#include <socklib.h>
#include <netdb.h>
#include <netinet/in.h>
#include <inetlib.h>

/*#include <sys/signal.h>*/
#include <sys/ioctl.h>

#include <sx.h>
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNNIO_ORACLE
#include <mnnio.h>
#endif
#ifndef SMN_ORACLE
#include <smn.h>
#endif

#include "smnudp.h"
#include "udpNIO.h"
#include "rosevents.h"
#include "options.h"

#include "module.h"

/*
 * Routine Declarations
 */
void smnudpClose(mnnio *nio);
static sb4  smnudpSend(mnnio *nio, mnnpa *pa, ub1 *buf, size_t len);
static sb4  smnudpRecv(mnnio *nio, mnnpa *pa, ub1 *buf, size_t len,
                       boolean poll, ub4 timeout);
extern void *module_wsp;  /* defined in modulewrap */
extern int mn_started;

/*
 * UDP Address Family
 * The layout of the UDP address family is as follows:  the first four
 * bytes is the IP address (in network order); the next two bytes is
 * the port number (in network order).
 */
#define FAMILY_NAME  "UDP"
#define smnudpAddr(buf)  *((ub4 *) (buf))
#define smnudpPort(buf)  *((ub2 *) (((ub1 *) (buf)) + 4))

int mnsockid = -1;

/*
 * smnudpOpen - Opens a UDP NIO
 */
mnnio *smnudpOpen(char *name, boolean intr)
{
  mnnio *nio;
  int    fd, len;
/*  char   buf[128]; */
  struct sockaddr_in sa;

#ifdef SMNUDP_DBG
    printf("\n\n\n\n\n\n          smnudpopen()!\n");
#endif
  /* initialize the NIO */

/* allocate memory for the NIO.  If failes, then return NULL */
  nio = (mnnio *) malloc( sizeof(mnnio) );
  if (NULL == nio)
  {
     return (mnnio *) 0;
  }

/* define NIO characteristics */
  nio->pktmax = 4096;
  nio->send = smnudpSend;
  nio->recv = smnudpRecv;
  nio->close = smnudpClose;
  nio->flags = MNNFLG_RECV | MNNFLG_SEND | MNNFLG_CKSM;


  /* open the socket */
  if ((fd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0)
  {
    perror("smnudpOpen:socket():");
    goto error_return;
  }
  nio->usrp = (void *) fd;
  mnsockid = fd;

  /* increase receive buffer size */
  len = 50000;

  if ( setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &len, sizeof(len)) < 0)
  {
    perror("smnudpOpen:setsockopt():");
  }

  if (intr || !name)
  {
      return (mnnio *) 0;
  }

  /* bind the address */
  if (smnudpPa(&nio->pa, name))
  {
    goto error_return;
  }
  sa.sin_family = AF_INET;
  sa.sin_addr.s_addr = INADDR_ANY;
  sa.sin_port = smnudpPort(nio->pa.addr);

  if (bind(fd, (struct sockaddr *) &sa, sizeof(struct sockaddr_in)) < 0)
  {
    perror("smnudpOpen:bind():");
    goto error_return;
  }
  /* get bound address */
  return nio;

 error_return:
#ifdef SMNUDP_DBG
    printf("\n\n\n\n\n        smnudpopen() error!\n");
#endif
  if (mnsockid != -1) {
      socketclose(mnsockid);
      mnsockid = -1;
  }
  return (mnnio *) 0;
}

/*
 * smnudpPa - converts a text string to a physical address
 */
sb4 smnudpPa(mnnpa *pa, char *name)
{
  char ip[64];
  int  prtno;
  long host;
  struct hostent *he;

  /* parse text string */
  if (sscanf(name, "UDP:%[^:]:%d", ip, &prtno) < 2)
    return -1;
  if (isalpha(ip[0]))
    {
      /* search for address by name */
      he = gethostbyname(ip);
      if (!he)
        return -1;
      host = *((long *) he->h_addr_list[0]);
    }
  else
    {
      /* parse IP address */
      host = inet_addr(ip);
      if (host < 0)
      {
        return -1;
      }
    }

  /* build physical address */
  memcpy(pa->family, FAMILY_NAME, 4);
  smnudpAddr(pa->addr) = host;
  smnudpPort(pa->addr) = smnHton2(prtno);
  return 0;
}

void smnudpClose(mnnio *nio)
{
#ifdef SMNUDP_DBG
    printf("\n\n\n\n\n\n        smnudpclose()\n");
#endif
    if (mnsockid != -1) {
        socketclose(mnsockid);
        mnsockid = -1;
    }
    return;
}

/*
 * smnudpSend - Sends data over UDP
 */
static sb4 smnudpSend(mnnio *nio, mnnpa *pa, ub1 *buf, size_t len)
{
  int fd;
  int result;
  struct sockaddr_in sa;

  int retries = 5;

  fd = (int) nio->usrp;

  /* create the address */
  sa.sin_family = AF_INET;
  sa.sin_addr.s_addr = smnudpAddr(pa->addr);
  sa.sin_port = smnudpPort(pa->addr);

#ifdef SMNUDP_DBG
printf("smnudpSend: sending %i bytes to socket at %s, %X\n", len, inet_ntoa(sa.sin_addr), smnNtoh2(sa.sin_port));
#endif

  /* mnnTrace("SEND", buf, len); */

/* 30mar99:CP:added retries to the send routine to try and work around the
problem with the inernet stack; we are failing to send occasionally with an
ENOBUFS error */

  while (retries > 0)
  {
    result = sendto(fd, (char *)buf, len, 0, (struct sockaddr *) &sa, sizeof(struct sockaddr_in));
    if (result < 0)
    {
      retries--;

#ifndef SILENT_NETWORK_ERRORS
      perror("smnudpSend:sendto():");
      printf("failed to send %i bytes to socket at %s, %X\n", len, inet_ntoa(sa.sin_addr), smnNtoh2(sa.sin_port));
#endif
    }

    else
    {
      break;
    }

  } /* endwhile (retries > 0) */


  if(retries > 0)
  {
    return result;
  }

  else
  {
    return (MNERR_FAILURE);
  }
}

/*
 * smnudpRecv - Receives data from UDP
 */
static sb4 smnudpRecv(mnnio *nio, mnnpa *pa, ub1 *buf, size_t len,
                      boolean poll, ub4 timeout)
{
  int fd, cnt, fromlen;
  fd_set fdset;
  struct sockaddr_in from;
  struct timeval to;

  fd = (int) nio->usrp;

  if (poll)
  {
    to.tv_sec = to.tv_usec = 0;
  }
  else
  {
    if (timeout)
    {
      to.tv_sec = timeout / 1000, to.tv_usec = (timeout % 1000) * 1000;
    }
  }

  FD_ZERO(&fdset);
  FD_SET(fd, &fdset);
  cnt = select(fd+1, &fdset, 0, 0, (poll || timeout ? &to : 0));
  if (cnt < 0)
  {
#ifndef SILENT_NETWORK_ERRORS
    perror ("smnudpRecv:select:");
#endif
    return MNERR_FAILURE;
  }
  else
  {
    if (cnt == 0)
    {
      return (poll ? MNERR_WOULDBLOCK : MNERR_TIMEOUT);
    }
    else /* cnt > 0 */
    {
      fromlen = sizeof(struct sockaddr_in);
      cnt = recvfrom(fd, (char *)buf, len, 0, (struct sockaddr *) &from, &fromlen);
      if (cnt < 0)
      {
        perror ("smnudpRecv:recvfrom:");
        return MNERR_FAILURE;
      }

#ifdef SMNUDP_DBG
printf("smnudpRecv: received %i bytes of data\n", cnt);
#endif
      /* fill in address and return */
      memcpy(pa->family, FAMILY_NAME, 4);
      smnudpAddr(pa->addr) = from.sin_addr.s_addr;
      smnudpPort(pa->addr) = from.sin_port;
      return (sb4) cnt;
    }
  }
}

int smnudpPoll(mnnio *nio)
{
  int fd, cnt;
  fd_set fdset;
  struct timeval to;

  if (!mn_started)
  {
printf("smnudpPoll: PANIC!!\n"   );
    ovcabort();
  }
  fd = (int) nio->usrp;
  to.tv_sec = to.tv_usec = 0;
  FD_ZERO(&fdset);
  FD_SET(fd, &fdset);
  cnt = select(fd+1, &fdset, 0, 0, &to);
  return (cnt <= 0 ? 0 : cnt);
}
