/ Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
/
/ OMNIDLC.msg - OMN mnidlc messages
/
/ Range of messages: 5000-5499
/
/ If you add a new message, add a test to /vobs/mx/tst/yc/err.

/
/
/ 0 -   9; miscellaneous messages
/
5000, "unexpected internal error: %s from file %s, line %d; aborting..."
// *Cause: An internal error occurred.
// *Action: Report to Oracle.
5001, "%s: %s"                          /* <filename>: <system-error> */
// *Cause: File system error occured.
// *Action: Check file/directory permissions, existence, etc.
5002, "\"%s\", line %d: %s: %s"        /* <filename>: <system-error> */
// *Cause: File system error occured.
// *Action: Check file/directory permissions, existence, etc.
5003, "write error during output"
// *Cause: Write failure to output file during preprocessing.
// *Action: Check -o path permissions and existence.
5004, "%d errors, %d warnings detected during compilation"
// *Cause: Reports the number of errors and warnings, if any.
// *Action: None. This is an informational message.
5005, "Reading file \"%s\""
// *Cause: Reports the input source or include being processed.
// *Action: None. This is an informational message.
5006, "Access denied to output directory '%s'"
// *Cause: Stub file destination directory doesn't exist or isn't writeable
// *Action: Redirect output to a different directory or change permissions.
5007, "unrecognized style '%s'"
// *Cause: Unrecognized language mapping naming style. Acceptable styles
//          are "ansi" (default) and "oracle".
// *Action: Correct command line and try again.
5008, "Unable to create output file '%s': %s"
// *Cause: Stub we want to generate already exists and is readonly.
// *Action: Change permissions on target file or change output directory.
5009, "Not a directory: '%s'"
// *Cause: Pathname given to -o option does not name a directory
// *Action: Create desired directory or change output pathname.

/
/   10 -  44; pre-processing messages
/
5010, "\"%s\", line %d: unterminated comment"
// *Cause: End of file reached in the middle of a comment.
// *Action: Close comment and recompile.
5011, "\"%s\", line %d: unterminated character constant"
// *Cause: Character literal not terminated before end of line.
// *Action: Close literal and recompile.
5012, "\"%s\", line %d: unterminated string literal"
// *Cause: Closing quote for string literal not found before end of line.
// *Action: Close string literal and recompile.
5013, "\"%s\", line %d: missing new-line at end of source file"
// *Cause: Last line of input file is not terminated by a newline.
// *Action: Add a newline and recompile.
5014, "\"%s\", line %d: unterminated macro call"
// *Cause: Badly formed function-like macro call.
// *Action: Correct macro reference and recompile.
5015, "\"%s\", line %d: macro '%s' used with wrong number (%d) of arguments"
// *Cause: The wrong number of arguments was passed to a function-like macro.
// *Action: Correct the macro reference and recompile.
5016, "\"%s\", line %d: invalid directive"
// *Cause: Unrecognized preprocessing directive encountered.
// *Action: Correct error and recompile.
5017, "\"%s\", line %d: unexpected '%s'"
// *Cause: Improper syntax in the middle of a preprocessing directive. For
//          example, a #elif, #else, or #endif was encountered outside the
//          context of a #if, #ifdef, or #ifndef.
// *Action: Correct error and recompile.
5018, "\"%s\", line %d: #error %s"
// *Cause: #error directive encountered.
// *Action: No action required.
5019, "pragma ignored"
// *Cause: Unrecognized pragma encountered, or pragma has no effect given
//          the current compilation environment. (Certain command line
//          options may disable certain pragmas).
// *Action: No action required.
5020, "\"%s\", line %d: invalid format of '%s' directive"
// *Cause: Syntax error in a preprocessing directive.
// *Action: Correct error and recompile.
5021, "\"%s\", line %d: illegal redefinition of macro '%s' at %s:%d"
// *Cause: Encountered a definition of a previously defined macro. A
//          macro can only be defined once under the rules of ANSI C.
// *Action: Correct error and recompile.
5022, "\"%s\", line %d: bad syntax in #define"
// *Cause: Syntax error in #define preprocessing directive.
// *Action: Correct error and recompile.
5023, "\"%s\", line %d: duplicate parameter '%s' in #define"
// *Cause: The same parameter name appears more than once in the argument
//          list of a function-like macro definition.
// *Action: Correct error and recompile.
5024, "\"%s\", line %d: '#' operator is not followed by a parameter name"
// *Cause: The # preprocessing operator (stringification) must be followed
//          by the symbol to be stringified.
// *Action: Correct error and recompile.
5025, "\"%s\", line %d: '##' operator at beginning of macro definition"
// *Cause: Missing first operand of the ## preprocessing operator. 
//          (## concatenates it's left and right operands).
// *Action: Correct error and recompile.
5026, "\"%s\", line %d: '##' operator at end of macro definition"
// *Cause: Missing second operand of the ## preprocessing operator. 
//          (## concatenates it's left and right operands).
// *Action: Correct error and recompile.
5027, "\"%s\", line %d: #include files nested too deep"
// *Cause: Maximum include file nesting exceeded. This limitation is
//          imposed by the file system. If there are too many levels of
//          include file nesting, the compiler will eventually be unable
//          to open additional files.
// *Action: Reorganize #include hierarchy to decrease nesting levels.
5028, "\"%s\", line %d: %s: include file not found"
// *Cause: Unable to locate file named in #include directive.
// *Action: Make sure the named file exists in the current directory or
//           one of the directories supplied via the -I option. If so,
//           check file and directory privileges.
5029, "\"%s\", line %d: more than one #else directive in the same group"
// *Cause: A #if/ifdef/ifndef directive must be paired with at most one
//          #else directive.
// *Action: Correct error and recompile.
5030, "\"%s\", line %d: missing #endif"
// *Cause: No #endif preprocessing directive was found for a #if/ifdef/ifndef.
// *Action: Correct error and recompile.
5031, "\"%s\", line %d: 'defined' is used without an identifier"
// *Cause: Syntax error in 'defined' preprocessing operation. Correct
//          syntax is: defined(symbol).
// *Action: Correct error and recompile.
5032, "\"%s\", line %d: bad syntax in %s"
// *Cause: Syntax error in preprocessing directive, such as unmatched
//          parentheses.
// *Action: Correct error and recompile.
5033, "\"%s\", line %d: bad expression syntax in #if"
// *Cause: Syntax error in conditional expression of a #if directive.
// *Action: Correct error and recompile.
5034, "\"%s\", line %d: string literals not allowed in #if expressions"
// *Cause: String literals are not valid tokens in the conditional
//          expression of a #if directive.
// *Action: Correct error and recompile.
5035, "\"%s\", line %d: unknown escape sequence"
// *Cause: Encountered an escaped character that is not one of the
//          special literals such as '\n' or '\t'. In ISO C, the
//          behavior in such a case is undefined. This compiler
//          substitutes a null character ('\0').
// *Action: Correct if necessary and recompile.
5036, "\"%s\", line %d: only integral constants are allowed in #if expressions"
// *Cause: Non-integral constant encountered in the conditional expression
//          of a #if preprocessing directive.
// *Action: Correct error and recompile.
5037, "\"%s\", line %d: illegal character in octal constant"
// *Cause: Octal character constants must start with '\', followed
//          by one or more octal digits (0-7).
// *Action: Correct error and recompile.
5038, "\"%s\", line %d: illegal character in hex constant"
// *Cause: Hexidecimal character constants start with '\x', followed
//          by 1 or more hex "digits" (0-9, a-f, case insensitive).
// *Action: Correct error and recompile.
5039, "\"%s\", line %d: invalid macro name '%s'"
// *Cause: Attempt to redefine a predefined preprocessing name, such
//          as "defined".
// *Action: Change macro name and recompile.

/
/    45 -  49; parsing messages
/
5045, "\"%s\", line %d: illegal character - '%c'"
// *Cause: Unexpected characters encountered in source file.
// *Action: If nothing is apparent, check input file for hidden control
//           characters. Correct and recompile.
5046, "\"%s\", line %d: parse error on '%s'"
// *Cause: IDL syntax error at or near the indicated token.
// *Action: Correct error and recompile.
5047, "\"%s\", line %d: parse error on end of input"
// *Cause: Unexpected end of file. For example, file ended in the middle
//          of an interface or other type declaration.
// *Action: Correct error and recompile.
5048, "Unrecoverable syntax error, please correct and recompile"
// *Cause: Unable to continue parsing after a syntax error.
// *Action: Correct syntax error and recompile.

/
/    50 -    ; semantic analysis
/
5050, "\"%s\", line %d: '%s' is an ambiguous reference; possible interpretations are:"
// *Cause: Unable to resolve an unqualified or partially qualified name
//          because there is more than one qualifying match. For example,
//          if an interface inherits the same name from two base interfaces,
//          the is ambiguous if not qualified by the defining interface.
// *Action: Select the proper interpretation of the name and change the
//           reference to be appropriately qualified.
5051, "\"%s\", line %d: '%s%s' originally defined at %s:%d"
// *Cause: Attempt to redefine an IDL type or constant. Each IDL entity
//          must be defined exactly once. This marks the occurrence of the
//          original definition.
// *Action: Correct error and recompile.
5052, "\"%s\", line %d: redefinition of '%s'"
// *Cause: Attempt to redefine an IDL type or constant. Each IDL entity
//          must be defined exactly once. This marks the occurrence of the
//          second definition.
// *Action: Correct error and recompile.
5053, "\"%s\", line %d: '%s' is not defined"
// *Cause: Reference to an undefined IDL name.
// *Action: Correct error and recompile.
5054, "\"%s\", line %d: '%s' is not a type"
// *Cause: Reference to a non-type (such as a constant or module) where 
//          a type name is required. 
// *Action: If you believe the name is a type reference, make sure it has
//           not been hidden by a declaration of the same name in an inner
//           scope. Correct error and recompile.
5055, "\"%s\", line %d: '%s' does not introduce a scope"
// *Cause: Badly formed qualified name. In a qualified name of the form
//          A::B::C, every component except the last one must name a scope.
//          Modules, interfaces, structs, unions, exceptions, and their
//          aliases qualify as scopes.
// *Action: Correct error and recompile.
5056, "\"%s\", line %d: illegal type for constant declaration"
// *Cause: IDL constants must be of integral, floating point, or string
//          type. They cannot be of complex types such as struct, array,
//          or sequence.
// *Action: Correct error and recompile.
5057, "\"%s\", line %d: floating-point constants are not supported in this version"
// *Cause: Current version of the compiler does not support floating point
//          constant declarations.
// *Action: Correct error and recompile.
5058, "\"%s\", line %d: type of constant expression conflicts with target type"
// *Cause: The type of a constant declaration and the type of its value
//          must match. For example, a "long" constant variable cannot
//          be initialized with a floating point expression.
// *Action: Change the type of the constant or the type of the expression.
5059, "\"%s\", line %d: value (%lu) is out of range of target type"
// *Cause: An unsigned expression evaluates to a value of the correct sort
//          of type (e.g. integral), but is too large to fit in the
// *Action: Change the type of the constant or the expression value.
5060, "\"%s\", line %d: value (%ld) is out of range of target type"
// *Cause: An signed expression evaluates to a value of the correct sort
//          of type (e.g. integral), but is too large to fit in the
// *Action: Change the type of the constant or the expression value.
5061, "\"%s\", line %d: '%s' is not a constant"
// *Cause: Named IDL entity is not a constant. Identifiers used in
//          places like constant initializers and union case labels must
//          designate IDL constants.
// *Action: Correct error and recompile.
5063, "\"%s\", line %d: invalid operand(s) to binary %c"
// *Cause: Operand(s) to the indicated binary operator not of the
//          expected type.
// *Action: Correct error and recompile.
5064, "\"%s\", line %d: division by zero"
// *Cause: Divide by zero detected in a constant expression.
// *Action: Correct error and recompile.
5065, "\"%s\", line %d: invalid operand(s) to binary %s"
// *Cause: Operand(s) to the indicated binary operator not of the
//          expected type.
// *Action: Correct error and recompile.
5066, "\"%s\", line %d: illegal shift value (%u)"
// *Cause: Right operand of a shift expression must be in the range:
//          0 <= operand < 32.
// *Action: Correct error and recompile.
5068, "\"%s\", line %d: initializer string for '%s' is too long"
// *Cause: Attempt to initialize a bound string constant with a string
//          literal longer than the specified bound. 
// *Action: Correct error and recompile.
5069, "\"%s\", line %d: context expressions are not supported in this version"
// *Cause: The compiler currently does not support IDL context expressions
//          on attributes and operations.
// *Action: Remove context expression and recompile.
5070, "\"%s\", line %d: '%s' is not an exception"
// *Cause: Identifier in an operation's raises clause does not name an
//          exception.
// *Action: Correct error and recompile.
5071, "\"%s\", line %d: duplicate declaration of parameter '%s' is illegal"
// *Cause: Each parameter in an operation parameter list must have a
//          distinct name; a duplicate was detected.
// *Action: Rename one of the conflicting parameters and recompile.
5072, "\"%s\", line %d: illegal type for union discriminator"
// *Cause: Bad type for union discriminator type. Union discriminators
//          must be of integral, character, boolean, or enumeration type.
// *Action: Correct error and recompile.
5073, "\"%s\", line %d: '%s' is not an interface"
// *Cause: An identifier in an interface inheritance specification
//          (e.g. base interface list) does not name an interface.
// *Action: Correct error and recompile.
5074, "\"%s\", line %d: base interfaces may not be forward declarations"
// *Cause: An identifier in an interface inheritance specification names
//          an incomplete interface. An interface's full definition must
//          occur before it can be used as a base interface.
// *Action: Correct error and recompile.
5075, "\"%s\", line %d: the same base interface is specified more than once"
// *Cause: An interface name appears more than once in an inheritance
//          specification. An interface cannot appear as a direct base
//          interface more than once.
// *Action: Correct error and recompile.
5076, "\"%s\", line %d: illegal name conflict from base '%s' with:"
// *Cause: A derived interface inherits the same operation or attribute
//          name from more than one base interface. CORBA does not permit
//          this at present.
// *Action: Correct error and recompile.
5077, "\"%s\", line %d: definition of '%s' occludes inherited attribute or operation"
// *Cause: A derived interface may not redefine an inherited operation
//          or attribute name.
// *Action: Correct error and recompile.
5079, "\"%s\", line %d: invalid recursive use of type '%s' in declaration of field '%s'"
// *Cause: Illegal use of a struct, union, or exception type inside
//          its own scope. Recursive type references may only appear as
//          a field declaration as a sequence element type, such as
//          struct S { sequence<S> f; };
// *Action: Correct error and recompile.
5080, "\"%s\", line %d: invalid recursive use of type '%s' in declaration of field '%s' of struct/union '%s'"
// *Cause: Illegal use of a struct, union, or exception type inside
//          its own scope. Recursive type references may only appear as
//          a field declaration as a sequence element type, such as
//          struct S { sequence<S> f; };
// *Action: Correct error and recompile.
5081, "\"%s\", line %d: floating point types are not currently supported"
// *Cause: The compiler does not currently support the IDL float and
//          double types.
// *Action: Correct error and recompile.
5082, "\"%s\", line %d: unrecognized #pragma directive '%s'"
// *Cause: Unrecognized pragma in input file. Unrecognized pragmas are
//          ignored.
// *Action: No action required.
5083, "\"%s\", line %d: repository id in #pragma ID cannot be an empty string"
// *Cause: The string literal representing the repository id in a
//          #pragma ID directive cannot be an empty string.
// *Action: Correct error and recompile.
5084, "\"%s\", line %d: invalid format for repository id"
// *Cause: Invalid repository id format in #pragma ID. See Chapter 6 of
//          the CORBA 2.0 specification, or the Oracle Media Net documentation
//          for valid formats.
// *Action: Correct error and recompile.
5085, "unrecognized object adaptor on -a: '%s'"
// *Cause: Unexpected object adaptor specification. Valid values are "boa"
//          (CORBA Basic Object Adaptor) and "coa" (Oracle's Common Object
//          Adaptor).
// *Action: Correct command line and recompile.
5086, "\"%s\", line %d: illegal undefinition of predefined macro '%s'"
// *Cause: Attempt to undefine one of the predefined macros __LINE__,
//          __FILE__, __DATE__, __TIME__, __STDC__.
// *Action: Correct error and recompile.
5087, "unsupported CORBA version on -c: '%s'"
// *Cause: Code generation requested for an unsupported version of CORBA.
//          Supported versions are 1.2 and 2.0.
// *Action: Correct command line and recompile.
5088, "-c ignored, only applicable with Basic Object Adaptor (BOA)"
// *Cause: CORBA version option combined with Oracle's Common Object
//          Adaptor. The CORBA version number is only germane when
//          code is generated for the CORBA Basic Object Adaptor (BOA).
// *Action: Change object adaptors or remove explicit CORBA version option.
5089, "\"%s\", line %d: '%s' must be an operation name"
// *Cause: Identifier in a #pragma IAO_DB_CREATE is not the name of an
//         operation. 
// *Action: Change the identifier to a previously declared operation name.
5090, "\"%s\", line %d: '%s' must be an attribute name"
// *Cause: Identifier in a #pragma IAO_DB_ATTR is not the name of an
//         attribute. 
// *Action: Change the identifier to a previously declared attribute name.
5091, "\"%s\", line %d: operation '%s' has no parameters"
// *Cause: The operation named in a pragma IAO_DB_CREATE has no parameters.
//         The operation must have one or more parameters, which are
//         associated with attribute key strings by this pragma.
// *Action: Correct the pragma and recompile.
5092, "\"%s\", line %d: operation '%s' has no parameter '%s'"
// *Cause: The operation named in a pragma IAO_DB_CREATE has no parameter
//         parameter with the given name.
// *Action: Correct the pragma and recompile.
5093, "\"%s\", line %d: pragma ignored: '%s' is undefined"
// *Cause: The identifier in one of the IAO_DB pragmas does not name a
//         known operation or attribute. The IDL entities named in these
//         pragmas must be declared before the pragma which uses them.
// *Action: Correct the pragma and recompile.
5094, "\"%s\", line %d: conflicts with previous pragma declaration"
// *Cause: The operation named in one of the IAO_DB pragmas is already in
//         use by another IAO_DB pragma. For example, an operation already
//         named in an IAO_DB_CREATE specification cannot also be the
//         target of an IAO_DB_LIST pragma.
// *Action: Correct the pragma and recompile.
5095, "\"%s\", line %d: association key for '%s' may not be an empty string"
// *Cause: The attribute/parameter key specified in one of the IAO_DB
//         pragmas must be a non-empty string literal.
// *Action: Correct the pragma and recompile.
5096, "\"%s\", line %d: parameter '%s' is already associated with \"%s\""
// *Cause: The indicated parameter association key in a pragma IAO_DB_CREATE
//         has already been associated with another parameter.
// *Action: Correct the pragma and recompile.
5097, "\"%s\", line %d: create operations must return an object reference"
// *Cause: The operation named in a pragma IAO_DB_CREATE must return an
//         object reference (the created object).
// *Action: Correct the pragma and recompile.
5098, "\"%s\", line %d: list operations must return a sequence of object references"
// *Cause:  The operation named in a pragma IAO_DB_LIST must return a
//          sequence of object references.
// *Action: Correct the pragma and recompile.
5099, "\"%s\", line %d: list operations must have one inout struct parameter (iterator)"
// *Cause: The operation named in a pragma IAO_DB_LIST must have an inout
//         parameter to act as the list iterator.
// *Action: Correct the pragma and recompile.
5100, "\"%s\", line %d: union field already declared with name '%s'"
// *Cause: Each field of a union must be uniquely named.
// *Action: Correct and recompile.
5101, "Unregcognized stub generation language: '%s'"
// *Cause: Request for code generation in an unsupported language. The
//          compiler will generate code for C and C++ only.
// *Action: Change the language to "c" or "cplus" and retry.
5102, "\"%s\", line %d: '%s' is a keyword in requested language mapping"
// *Cause: An IDL identifier is the same as a keyword in the language
//         in which stub code will be generated. Such IDL id's will be
//         generated in a way that will not conflict with the target
//         language. For example, it may be prefixed by an underscore.
// *Action: No action is required - this is permitted. However, changing
//          the id is recommended to avoid confusion.
5103, "\"%s\", line %d: Empty context id ignored"
// *Cause: Context clause on an operation is an empty string literal ("").
// *Action: No action is required.
5104, "\"%s\", line %d: Wildcard must be last character in context id: \"%s\""
// *Cause: Wildcard character (asterisk) found in a position other than the 
//         end of a context id. Pattern matching is performed only at the
//         end of a context id, as per CORBA.
// *Action: Correct context id and recompile.
5105, "\"%s\", line %d: struct/exception field '%s' previously declared"
// *Cause: Duplicate struct or exception field names. 
// *Action: Correct and recompile.
5106, "\"%s\", line %d: Input source > 79 characters. See OCCS 3.4.1."
// *Cause: OCCS violation. Lines must be <= 79 characters.
// *Action: Correct and recompile.
5107, "CORBA naming style implies BOA; '-a coa' ignored
// *Cause: Command line included both -s CORBA and -a coa, which conflicts
// *Action: Use a different naming style (like ansi) or BOA.
//
// 500-599 Debugging/informational messages
5500, "Attempt to insert duplicate symbol table entry for '%s'"
// *Cause: ycSymInsert called on an IFR object already in the symtab.
// *Action: None - this strictly for debugging purposes.
