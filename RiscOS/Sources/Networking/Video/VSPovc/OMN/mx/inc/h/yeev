/* Copyright (c) Oracle Corporation 1995.  All Rights Reserved. */

/*
  NAME
    yeev.h
  DESCRIPTION
    Semi-public header for ye event channel inteface objects.
    This provides the local C bindings necessary for yeevent.idl
    operations.

  PUBLIC FUNCTIONS

    yeevRemoteLog	    -- initialize yeev objects, switch ysRecords
			       to the remote logger and turn off tty sink.

    yeevInit		    -- initialize yeev objects.
    yeevTerm		    -- shut down yeev objects.

    yeevHaveLogger	    -- do we have a logger?
    yeevReceiverSetHandler  -- attach a handler callback to a receiver.

    yeevSinkAttach	    -- collect ysRecord events.
    yeevSinkDetach	    -- stop collecting ysRecord events.

    yeevBatchStart	    -- start batching sends.
    yeevBatchSend	    -- stop batching and send all queued.

    yeevEvaluate	    -- evaluate record against local discList object.

  MODIFIED   (MM/DD/YY)
    dbrower   10/16/95 -  created.
    dbrower   03/ 1/96 -  olint
    dbrower   06/11/96 -  fix comments.
    dbrower   06/13/96 -  add yeevRemoteLog
*/

#ifndef YEEV_ORACLE
#define YEEV_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YEEVENT_ORACLE
#include <yeevent.h>
#endif
#ifndef YSLOG_ORACLE
#include <yslog.h>
#endif

EXTC_START

/* PUBLIC TYPES AND CONSTANTS */

/* PUBLIC FUNCTIONS */

/* ---------------------------- yeevRemoteLog ---------------------------- */
/*
  NAME
    yeevRemoteLog
  DESCRIPTION
    Switch to remote logging, turning off tty output of ysRecords.
    If input yeev is null, starts up the yeev system on the specified
    queue.

    ysRecord logging may be terminated with yeevSinkDetach.  The returned
    yeev object must eventually be terminated with yeevTerm.

  PARAMETERS
    ev	    -- event system reference, or NULL.
    q	    -- queue to run new yeev on, or NULL for default.
  RETURNS
    yeev reference, for later use by yeevTerm.
*/

yeev yeevRemoteLog( yeev ev, ysque *q );

/* ---------------------------- yeevInit ---------------------------- */
/*
  NAME
    yeevInit
  DESCRIPTION
    Initialize yeev objects for service.
  PARAMETERS
    qp		    -- q to use
  RETURNS
    object reference to the yeev we're implementing.
*/

yeev yeevInit( ysque *q );


/* ---------------------------- yeevTerm ---------------------------- */
/*
  NAME
    yeevTerm
  DESCRIPTION
    Terminate the yeev objects, and stop sinking ysRecords.
  PARAMETERS
    ev	    -- object reference from yeevInit
  RETURNS
    none
*/
void yeevTerm( yeev ev );

/* ---------------------------- yeevHaveLogger ---------------------------- */
/*
  NAME
    yeevHaveLogger
  DESCRIPTION
    Do we have a connection to a logger?  If so, it may be time to
    yeevSinkAttach and redirect ysLog output from the screen/local console
    to the network logger.

    If we don't have a logger at the time of the call, we'll go look.
    
  PARAMETERS
    yeev	-- event system ref.
  RETURNS
    TRUE if we have a logger, FALSE if we haven't find one yet.
*/
boolean yeevHaveLogger( yeev ev );

/* ---------------------- yeevReceiverSetHandler -------------------------- */
/*
  NAME
    yeevReceiverSetHandler
  DESCRIPTION
    In the process owing the channel, attach a function to be called
    when an event is received.  The event will appear as the arg of the
    handler function.  The record sent to the handler will be cleaned
    up when the handler returns; it need not take special action unless
    it needs to keep the value in some way.
  PARAMETERS
    or	    -- reference to a yeevReceiver to attach.
    newHandler	-- new handler to install.
    usrp	-- usrp for the handler.
  RETURNS
    previous handler, initially NULL
*/
typedef void (*yeevHndlr)( yeevr *rec, dvoid *usrp );

yeevHndlr yeevReceiverSetHandler(yeevReceiver or,
				 yeevHndlr hndlr, dvoid *usrp);

/*
  NAME
    yeevSinkAttach
  DESCRIPTION
    Attach a non-destructive ys log sink to raise yeev events.  Calling
    multiple times modifies the fac/level of the attached sink.
    
  PARAMETERS
    evr		the yeev object
    level	the level to filter at, YSLSEV_DEBUG(8) for all.  Yeev
		will never reprogram this filter, so it must be set
		at the highest severity you ever want yeev to see.
  RETURNS
    none.
*/
void yeevSinkAttach(yeev evr, ub4 level);

/*
  NAME
    yeevSinkDetach
  DESCRIPTION
    Detach the previously attached log sink.
  PARAMETERS
    evr	the yeev holding the sink.
  RETURNS
    none.
*/
void yeevSinkDetach( yeev evr );

/* ---------------------------- yeevBatchStart ---------------------------- */
/*
  NAME
    yeevBatchStart
  DESCRIPTION
    Start batching records for remote receivers rather then sending them
    as they are raised.  Causes the records to be copied, but allows us
    to send bunches of records at once to a destination.
  PARAMETERS
    evr	    -- the yeev in which to start batching.
  RETURNS
    none
*/
void yeevBatchStart( yeev evr );

/* ---------------------------- yeevBatchSend ---------------------------- */
/*
  NAME
    yeevBatchSend
  DESCRIPTION
    Ends any batch, sending all queued records to their destinations. 
  PARAMETERS
    evr	    -- yeev reference.    
  RETURNS
    none
*/
void yeevBatchSend( yeev evr );


/* ---------------------------- yeevEvaluate ---------------------------- */
/*
  NAME
    yeevEvaluate
  DESCRIPTION
    Evaluate a record against the local discList, to see if anyone
    wants it.
  PARAMETERS
    rec	    -- record to consider
    dl	    -- yeevDiscList reference, must be local.
  RETURNS
    TRUE if someone wants it, FALSE if we should drop it.
*/
boolean yeevEvaluate( yeevr *rec, yeevDiscList dl );


EXTC_END
#endif

