/* Copyright (c) Oracle Corporation 1994.  All Rights Reserved. */

/*
  NAME
    mzmgs.h
  DESCRIPTION
    Media Zerver ManaGement Services header -- included by all
    manageable servers.

  PUBLIC FUNCTIONS
    sword mzmgsAddCommonMib( ... 
    void mzmgsStatChange( mnrs *svc, ub4 new_state );
    mzmguTimeTicks mzmgsTimeStamp(void);

  NOTES

  MODIFIED   (MM/DD/YY)
    dbrower   11/22/94 - created.
    dbrower   01/13/95 - changed comments for AddCommonMib.
    dbrower   04/10/95 - Add mzmgCommonMib to support callback for
			 setting admin state; add server for setting
			 admin state.
    yjing     12/19/95 - removed include <smzmgs.h>
    			 added public function mzmgsCpuCs().
*/

#ifndef MZMGS_ORACLE
#define MZMGS_ORACLE

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif

EXTC_START

#ifndef MNRS_ORACLE
#include <mnrs.h>
#endif

#ifndef MZMGU_ORACLE
#include <mzmgu.h>
#endif
       
/* PUBLIC TYPES AND CONSTANTS */

/* svcType values from mzmc.h.   These are used in compatability
   mode calls to mzmgsAddCommonMib, but are going away.  They
   may not conflict with the MZMGA_values below */

#define  MZMCMZSC	((ub4)0)	/* stream service controller */
#define  MZMCMZSI	((ub4)1)	/* stream service instance */
#define  MZMCMKP	((ub4)2)	/* downstream manager */
#define  MZMCUP		((ub4)3)	/* upstream packet pump */
#define  MZMCUT 	((ub4)4)	/* upstream protocol translator */
#define  MZMCTEST	((ub4)5)	/* mzmgt test server */
#define  MZMCSRVMAX	((ub4)6)	/* Always the last */

/* New-style service types, used for direct calls to mzmgaAddCommonMib.
   These values should not unintentionally conflict with the MZMC values
   shown above.  We're reusing 5 from MZMCTEST on purpose. */

#define MZMGA_CMN_ONLY_SVCTYPE	((sb4)5)  /* common mib, no special mib */
#define MZMGA_NAME_SVC_SVCTYPE	((sb4)10) /* is name service */
#define MZMGA_SVC_CTRL_SVCTYPE	((sb4)11) /* is a service controller */
#define MZMGA_STRM_SVCTYPE	((sb4)12) /* is stream service */
#define MZMGA_STRM_INST_SVCTYPE	((sb4)13) /* is strm svc instance */
#define MZMGA_VPUMP_SVCTYPE	((sb4)14) /* is vpump */
#define MZMGA_DSMSTRM_SVCTYPE	((sb4)15) /* is dsm stream */
#define MZMGA_MZMSNMP_SVCTYPE	((sb4)16) /* is snmp agent */
#define MZMGA_MDS_SVCTYPE	((sb4)17) /* is mds server */

/* ---------------------------- mzmgsStFunc ---------------------------- */

typedef void mzmgsStFunc( mzmguSStats *istats,
			  dvoid *arg,
			  mzmguSStats **ostats );
/*
  NAME
    mzmgsStFunc - a type of function to get service statistics
  DESCRIPTION

    At the time of the call, the 'istats' pointer points to storage
    owned by the common code the service could use to put the stats,
    which may be used as an output structure.

    The function must set the 'ostats' pointer to a place containing a
    pointer to a stats structure.  This can be storage owned by the
    service, or the one given in the 'istats' pointer.

    If the function stuffs the ostats pointer with a NULL, it isn't
    keeping anything and only the data kept by the common library will
    be available for the service.

  PARAMETERS
    istats	- pointer to stat space that may be used (IN)
    arg		- argument given at mzmgsAddCommonMib time (IN).
    ostats	- filled in with address of stat strut for caller (OUT).
  RETURNS
    none
*/

/* ---------------------------- mzmgsStFunc ---------------------------- */

typedef void mzmgsAdminFunc( ub4 newState, dvoid *arg );

/*
  NAME
    mzmgsStFunc - a type of function to set administrative state.

  DESCRIPTION

    This function will be called out of an RPC stub to set the
    administrative state of the service.  The called function
    is expected to take necessary actions to change the operState
    to the desired value as soon as possible and practical.   (This
    includes calling mzmgsStateChange when the operState is modified.).

  PARAMETERS
    newState	- the new state the system administrator wants the
		    service to take.
    arg		- argument given at mzmgsCommonMib time (IN).
  RETURNS
    none
*/

/* ---------------------------------------------------------------- */
/* PUBLIC FUNCTIONS */
/* ---------------------------------------------------------------- */

sb4 mzmgsAddCommonMib( mnrs *svcRpc, sb4 svcType,
		      mzmgsStFunc *svcStatFunc, dvoid *svcArg );
/*
 * Name: mzmgsAddCommonMib - Add partial common mib to an RPC service handle.
 *
 * Function:
 *      Add common mib operations to a service handle.
 *
 * Input:
 *	svc	- RPC server handle for the service calls, to which
 *		  a common mib component will be added.
 *	svcType - the specific type of service being monitored.  The domain of
 *		  values should be from the set of MZMGA_...SVCTYPE defines
 *		  in mzmgs.h.  If there is no specific MIB, use
 *		  MZMGA_CMN_ONLY_SVCTYPE.  The RPC opertations for specific
 *		  mib information are assumed to reside on the same 'svc'
 *		  handle as the service.
 *	svcsf   - function to return statistics for the service
 *		  when requested, called from the common mib RPC handler.
 *		  If NULL, and there is no svcarg, no real stats will be
 *		  visible for this service.
 *	svcarg	- an argument to hand to the svcsf when it is called,
 *		  usually a context pointer.  If svcsf is NULL, then this
 *		  is assumed to be a pointer to an mzmguSStats that the
 *		  service is keeping up to date, and which will be read
 *		  whenever we need the information.
 * Output:
 *
 * Returns:
 *      mzmNoErr - operation was successful
 *      mzmFailed - general failure
 *      mzmMemErr - memory required for the operation was not available
 *      mzmBindErr - unable to bind to the monitoring process
 * Errors:
 * See above */

/* ---------------------------------------------------------------- */

sb4 mzmgsCommonMib( mnrs *svcRpc, sb4 svcType,
		   mzmgsStFunc *svcStatFunc, dvoid *svcArg,
		   mzmgsAdminFunc *svcAdminFunc, dvoid *svcAdminArg );
/*
 * Name: mzmgsCommonMib - Add complete common mib to an RPC service handle.
 *
 * Function:
 *      Add common mib operations to a service handle.
 *
 * Input:
 *	svc	- RPC server handle for the service calls, to which
 *		  a common mib component will be added.
 *	svcType - the specific type of service being monitored.  The domain of
 *		  values should be from the set of MZMGA_...SVCTYPE defines
 *		  in mzmgs.h.  If there is no specific MIB, use
 *		  MZMGA_CMN_ONLY_SVCTYPE.  The RPC opertations for specific
 *		  mib information are assumed to reside on the same 'svc'
 *		  handle as the service.
 *	svcStatFunc   - function to return statistics for the service
 *		  when requested, called from the common mib RPC handler.
 *		  If NULL, and there is no svcarg, no real stats will be
 *		  visible for this service.
 *	svcArg	- an argument to hand to the svcsf when it is called,
 *		  usually a context pointer.  If svcsf is NULL, then this
 *		  is assumed to be a pointer to an mzmguSStats that the
 *		  service is keeping up to date, and which will be read
 *		  whenever we need the information.
 *	svcAdminFunc   - function to call to set admin state.  If none is
 *		  supplied, setting state to "down" will cause immediate
 *		  process exit from the common MIB RPC handler.
 *	svcAdminArg - argument to svcAdminFunc.
 * Output:
 *
 * Returns:
 *      mzmNoErr - operation was successful
 *      mzmFailed - general failure
 *      mzmMemErr - memory required for the operation was not available
 *      mzmBindErr - unable to bind to the monitoring process
 * Errors:
 * See above
 */

/* ---------------------------------------------------------------- */

sb4 mzmgsDelCommonMib( mnrs *svcRpc );
/*
 * Name: mzmgsAddCommonMib - Add partial common mib to an RPC service handle.
 *
 * Function:
 *      Add common mib operations to a service handle.
 *
 * Input:
 *	svc	- RPC server handle for the service calls, for which
 *		  a common mib component will be deleted. 
 * Output:
 *
 * Returns:
 *      mzmNoErr - operation was successful
 *      mzmFailed - general failure
 *      mzmMemErr - memory required for the operation was not available
 *      mzmBindErr - unable to bind to the monitoring process
 * Errors:
 * See above */


/* ---------------------------------------------------------------- */

void mzmgsStatChange( mnrs *svc, ub4 new_state );
/*
 * Name: mzmgsStatChange - MZM inform about change in status.
 *
 * Function:
 *      Inform interested parties that the operation status of the
 *	service has changed.
 *
 * Input:
 *      addr - the RPC handle for the service.
 *	new_state - value of the new state, one of mzmguStDown,
 *		    mzmguStRunning, mzmguStHalted, mzmguStCongested or
 *		    mzmguStRestarting.
 * Output:
 *
 * Returns:
 *      mzmNoErr - operation was successful
 *      mzmFailed - general failure
 *      mzmMemErr - memory required for the operation was not available
 * Errors:
 *      See above
 */

/* ---------------------------------------------------------------- */

mzmguTimeTicks mzmgsTimeStamp(void);
/*
 * Name: mzmgsTimeStamp - get value for "last*Activity" field
 *
 * Function:
 *      get a timestamp for a last activity fields in the stats
 *	structure used by the mzm statfunc callback function.
 *
 * Input:
 *	none
 *
 * Output:
 *	none
 *
 * Returns:
 *      value.
 *
 * Errors:
 *      See above
 */

/* ---------------------------- mzmgsCpuCs ---------------------------- */
ub4   mzmgsCpuCs(void);
/*
  NAME
    mzmgsCpuCs
  DESCRIPTION
    Return the number of centi-seconds of CPU used by the process.
  PARAMETERS
    none
  RETURNS
    Cpu in 1/100th second units.
*/

EXTC_END
#endif

