// Copyright (c) Oracle Corporation 1995. All Rights Reserved.

// yeevlog.idl - OMX typed event consumer (logger) interface.

#ifndef YEEVLOG_ORACLE
#define YEEVLOG_ORACLE

#ifndef YEEVENT_ORACLE
#include "yeevent"		// events assumed
#endif YEEVENT_ORACLE

// Logger entity, what clients locate with loose binding.
//
// (This can be thought of as a logger-client factory.)
//
// Client use the getQuals operation to get programming for their
// yeev:filters.  The destination yeevReceiver is in the returned yeevdSeq.
// There may or not be a new yeevReceiver created for each sender.

module yeevl
{
  interface logProc;
  interface sender;
  interface log;
  interface listIterator;

  // sender attribute structure.
  struct yeevls
  {
    yeevReceiver    rcvr_yeevls;
    yeev	    sender_yeevls;
    string	    host_yeevls;
    string	    pid_yeevls;
    string	    affinity_yeevls;
    string	    prog_yeevls;
    sb8		    lastsend_yeevls;
  } ;

  // log record
  struct yeevlr
  {
    sb4		record_id;	// sequence in this log.
    sb8		timestamp;	// time of the putRecord* operation;
    boolean	deleted;	// false if not deleted.
    yeevr	record;		// the record value.
  };

  // list of senders
  typedef sequence <sender> yeevlSenderList;

  // type of the log output
  enum logType {
    textfile_logType,	// text sysfp file - human readable log.
    binfile_logType,	// binary sysfp file - machine readable log
    sysbin_logType,	// sysbin file - machine readable log
    tty_logType,	// yslPrint dest
    console_logType,	// yslError dest
    syslog_logType	// smzlLogSyslog dest
    };

  enum fullType {
    halt_fullType,	// no more records will be logged.
    rollover_fullType	// roll-over to a new file, renaming
			// keepCount versions and the current one.
  };

  enum adminState {
    locked_adminState,	// administrator prohibits any new records
    unlocked_adminState	// admin allows new records
  };

  enum operState {
    enabled_operState,	// ready for use.
    disabled_operState	// not available for writing.
  };

  // log attributes, possibly variable at run time.
  struct yeevla
  {
    ub4 maxLogSizeKb_yeevla;	    // 0 means no limit.
    ub4 capAlarmThresholdKb_yeevla; // 0 means no alarm.
    ub4 keepCount_yeevla;	    // number to keep on rollover

    fullType	fullAction_yeevla; // when at maxLogSize, what to do?
    adminState	admin_yeevla;	   // locked or unlocked.
  };

  // log description, read only. 
  struct yeevld			
  {
    logType	type_yeevld;	// file, tty, console, syslog, sysbin
    string	file_yeevld;	// if relevant for the type, else NULL.
    operState	oper_yeevld;	// enabled or disabled
  };

  // list of log records
  typedef sequence <yeevlr> yeevlrList;

  // list of logs
  typedef sequence <log> yeevlList;
  
  exception AlreadyConnected {} ;
  exception NotSupportedForThisLogType {};
  exception OperationFailed { string reason; };
  exception NotFound {};

  exception LogCapacityAlarm { log theLog; yeevld fattrs; yeevla vattrs; };
  exception LogCapacityLimit { log theLog; yeevld fattrs; yeevla vattrs; };

  // ----------------------------------------------------------------

  // a logging process entity.
  // 
  // Client yeev gets a logProc dest loosely bound, then does getQuals
  // to load it's programming.  The programming is set to the logReceiver
  // in the logProc.  The client does a yeevReceiver_push, and the
  // receiver in the logProc does a yeev_raise locally to propagate
  // the event.
  //
  // Log managers create or open logs.  Events are routed to these
  // logs by programming the "filters" inherited from the yeev.  This
  // works becuase the logs are devived from the yeevReceiver.
  //
  interface logProc : yeev
  {
    // quals sent to clients on "connect" call, with a new
    // yeevReceiver for each connection.  The list may
    // be modified to affect logging from new clients.
    // Changing the list does not change programming in the
    // existing clients.
    attribute yeevDiscList defQuals;

    // list of connected senders to this logger.
    // (these are the last forwarders in the event records).
    readonly attribute yeevlSenderList senders;

    // list of logs created or opened.
    readonly attribute yeevlList logs;

    // connect sender client to the logger, getting back
    // a receiver specific to that sender, and quals the sender
    // should use to program its yeev::filter.
    // A sender disconnects by destroying the receiver.
    sender connectSender( in yeev evsender,
			 in string host, in string pid, in string affinity,
			 in string prog,
			 out yeevdSeq quals )
      raises( AlreadyConnected, OperationFailed );
    
    // do everything necessary to create a new log.  if log exists
    // with the same name, it is clobbered.
    log createLog( in yeevld fixedattrs, in yeevla varattrs )
      raises( OperationFailed );

    // re-open an old log with fixedattrs, assigning varattrs.
    // fails if log does not exist. 
    log openLog( in yeevld fixedattrs, in yeevla varattrs )
      raises( OperationFailed );

    void shutdown();
  };

  interface sender
  {
    readonly attribute yeevls info;
    void destroy();
  };

  // log -- receives records, manipulates the log.
  // always tightly bound.  (Should be PSF, eventually.)
  //
  // Clients should never send to a log directly;
  // they should connect to the logProc and let it route
  // to the log(s).

  interface log : yeevReceiver
  {
    // inherits attribute name
    // inherits methods destroy,
    //			push, pushMany,
    //			pull, pullMany,
    //			tryPull, tryPullMany

    readonly attribute yeevld fixedattr;

    attribute yeevla varattr;
    
    void deleteRecord( in sb4 id )
      raises( NotSupportedForThisLogType );

    void getRecord( in sb4 id, out yeevlr record )
      raises( NotSupportedForThisLogType );

    // get up to 'count' records beginning at log record 'id'.
    // Filter records as per dlist; if empty, return all
    // If got all, do not return an iterator unless 'keep' is set.
    void getRecordRange( in sb4 id, in sb4 count,
			in yeevdSeq dlist, in boolean keep,
			out yeevlrList records, out listIterator li )
      raises( NotSupportedForThisLogType );

    // get up to count records beginning at early, up to 'late'.  
    // No time limit if late is zero.
    // Filter records as per dlist; if empty, return all
    // If got all records, return no iterator unless 'keep' is set.
    void getRecordTime( in sb8 early, in sb8 late, in sb4 count,
		       in yeevdSeq dlist, in boolean keep,
		       out yeevlrList records, out listIterator li )
      raises( NotSupportedForThisLogType );
  };

  // log listing iterator.
  interface listIterator
  {
    // both gets return TRUE on end-of-qualifying-records,
    // FALSE if more remains to be read.
    boolean getNextOne( out yeevlr record );
    boolean getNextN( in sb4 count, out yeevlrList records );

    void destroy();
  };
};

#endif				// YEEVLOG_ORACLE


