/*
 * Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * mtq.h - Media Tools Generic Queue Implementation.
 *
 * DESCRIPTION:
 * Linked lists and queues are prevalent through almost all software.  As
 * such, programmers are very familiar with their operation.  Also, the
 * queue facility is often heavily used and therefore is generally
 * performance critical.  For these reasons, we implement the queue
 * facility using very lightweight macros.  This requires that the queue
 * structure be public and included directly in all structures that need to
 * be on queues.
 *
 * This is in contrast to a more object oriented approach which provides
 * better modularity but at the expense of speed.  Inserts, for example,
 * typically involve malloc'ing a link structure in such packages whereas
 * an insert is a few simple assignments here with no need to cope with
 * out-of-memory errors.  Furthermore, mallocs in the other approach end up
 * occupying more memory in the heap than when you imbed the link
 * structure.
 *
 * In the case of something as commonly and as heavily used as the queueing
 * package, we place a high premium on performance and memory efficiency
 * and hence adopt the following implementation.  The entire package is
 * implemented in this header with no corresponding C source files.
 */

#ifndef MTQ_ORACLE
#define MTQ_ORACLE

/*
 * PUBLIC TYPES AND CONSTANTS
 */

/*
 * A queue link.  A field of this type must be declared in all structures
 * that are to appear on a queue list, one per list.  Queue links always
 * point to other queue links.  We term a queue "element" to be the structure
 * surrounding a queue link.
 */
struct mtql
{
  struct mtql  *next;
  struct mtql  *prev;
};
typedef struct mtql   mtql;

/*
 * A queue.  This structure serves as the base for a queue list.  One of
 * these is defined per queue list.  The next field of the base link points
 * at the queue head.  The prev field of the base link points at the tail
 * link.  Empty queues deserve further elaboration.  For speed and
 * simplicity, we don't do a lot of special case checking for empty queues.
 * The next and prev fields of an empty queue simply point at the base
 * link.  This means you can delete from an empty queue ad nauseum without
 * changing the queue.  It also means you arrive at the base link after
 * scanning past the tail of a queue or before the head.
 */
struct mtq
{
  mtql  base;
  sb4   len;
};
typedef struct mtq   mtq;

/*
 * PUBLIC INTERFACE
 */

/*
 * Queue Initialization.
 *
 * SYNOPSIS:
 * void MtqInit(mtq *q);
 * 
 * DESCRIPTION:
 * Initialize a queue to be empty.  To simplify inserts and deletes, an
 * empty queue's next and prev fields point at itself, instead of zero.
 */
#define MtqInit(q) ((q)->base.next = (q)->base.prev = &(q)->base, (q)->len = 0)

/*
 * Queue Insertion and Deletion.
 *
 * SYNOPSIS:
 * void  MtqInsBfr(mtq *q, mtql *qpos,  mtql *ql);
 * void  MtqInsAft(mtq *q, mtql *qpos,  mtql *ql);
 * void  MtqDel(mtq *q, mtql *ql);
 *
 * DESCRIPTION:
 * MtqInsBfr inserts a queue link (and thereby its surrounding element)
 * before the given current position.  MtqInsAft inserts a queue
 * link/element after the given current position.  Either insert operation
 * adds the first item to a queue when given the base link as the position
 * (see MtqBase below).  MtqPush and MtqEnq are other convenient ways of
 * inserting on a queue (also see below).  MtqDel deletes the given queue
 * link/element from the queue.  Deleting the base link has no effect.
 */
#define MtqInsBfr(q, qpos, ql)  ((q)->len += 1,        		\
                                 (ql)->next = (qpos),  		\
			         (ql)->prev = (qpos)->prev,  	\
			         (qpos)->prev->next = (ql),  	\
			         (qpos)->prev = (ql))
#define MtqInsAft(q, qpos, ql)  ((q)->len += 1,			\
                                 (ql)->next = (qpos)->next, 	\
                                 (ql)->prev = (qpos),         	\
			         (qpos)->next->prev = (ql), 	\
			         (qpos)->next = (ql))
#define MtqDel(q, ql)  ((q)->len = ((q)->len ? (q)->len-1 : 0),  \
                         (ql)->next->prev = (ql)->prev,		 \
                         (ql)->prev->next = (ql)->next)

/*
 * Queue Traversal Operations.
 *
 * SYNOPSIS:
 * mtql *MtqHead(mtq *q);
 * mtql *MtqTail(mtq *q);
 * mtql *MtqNext(mtql *ql);
 * mtql *MtqPrev(mtql *ql);
 * mtql *MtqBase(mtq *q)
 *
 * DESCRIPTION:
 * These routines provide ways to traverse a queue.  MtqHead returns the
 * first link in a queue.  MtqTail returns the last link in a queue.
 * MtqNext returns the next link in the queue.  MtqPrev returns the
 * previous link in a queue.  All routines return the base link if no
 * actual head, tail, next, or prev element exists.  For comparison tests
 * in loops, MtqBase is a convenient way to obtain a pointer to the base
 * link.  See code fragment below.
 */
#define MtqHead(q)     ((q)->base.next)
#define MtqTail(q)     ((q)->base.prev)
#define MtqNext(ql)    ((ql)->next)
#define MtqPrev(ql)    ((ql)->prev)
#define MtqBase(q)     (&(q)->base)

/*
 * Queue Data Operations.
 *
 * SYNOPSIS:
 * sb4         MtqLen(mtq *q);
 * boolean     MtqEmpty(mtq *q);
 * structName *MtqVal(mtql *ql, char *structName, char *fieldName);
 *
 * DESCRIPTION:
 * MtqLen returns the number of elements on a queue.  MtqEmpty returns TRUE
 * if the queue is empty.  MtqVal returns a pointer to the structure
 * surrounding the queue link.  You must supply the type of the surrounding
 * structure and the name of the mtql link field in that structure which is
 * being used to make the chain the list.
 */
#define MtqLen(q)   ((q)->len)
#define MtqEmpty(q) ((q)->len == 0)
#define MtqVal(ql, structName, fieldName)  ((structName *)(dvoid *) \
	      ((sb1 *)(dvoid *)(ql) - offsetof(structName, fieldName)))

/*
 * Queue Paradigms.
 *
 * SYNOPSIS:
 * void  MtqPush(mtq *q, mtql *ql);
 * void  MtqPop(mtq *q, mtql *ql);
 * void  MtqEnq(mtq *q, mtql *ql);
 * void  MtqDeq(mtq *q, mtql *ql);
 *
 * DESCRIPTION:
 * These functions provide convenient interfaces for common queue usage
 * scenarios.  MtqPush and MtqPop implement LIFO semantics (aka a stack).
 * MtqEnq and MtqDeq implement FIFO semantics.  MtqPush inserts the given
 * link before the head of the queue.  MtqEnq inserts the given link after
 * the tail of the queue.  MtqPop and MtqDeq both delete the first element
 * on the queue and return a pointer to that element's queue link in 'ql'
 * or they return a pointer to the base link if the queue is empty.
 */
#define MtqPush(q, ql)  MtqInsAft((q), &(q)->base, (ql))
#define MtqPop(q, ql)   ((ql) = MtqHead(q), MtqDel(q, MtqHead(q)))
#define MtqEnq(q, ql)   MtqInsBfr((q), &(q)->base, (ql))
#define MtqDeq(q, ql) 	MtqPop(q, ql)

/*
 * Example code fragment of queue package use:
 *
 * struct myctx {
 *   sb4  myctx_foo;
 *   mtql myctx_ql;
 *   sb4  myctx_bar;
 * };
 * typedef struct myctx myctx;
 *
 * myctx *ctxp;
 * mtq   timeq, *q;
 * mtql  *ql;
 *
 * q = &timeq;
 * MtqInit(q);
 * ...
 *
 * for (ql = MtqHead(q); ql != MtqBase(q); ql = MtqNext(ql))
 * {
 *    ctxp = MtqVal(ql, myctx, myctx_ql);
 *    if (ctxp->foo) ...
 * }
 *
 * WARNING:
 * Nesting queue package calls is fraught with peril and should be avoided
 * because of complications involving macro argument side-effects.  For
 * example,
 * 
 *   	MtqInsAft(q, MtqTail(q), ql);
 *
 * seems like a perfectly valid way of appending a new link onto a queue
 * but, in fact, does not work because of the way things get expanded out
 * (try it).  On the other hand,
 *
 *	mtql *qtail = MtqTail(q);
 *	MtqInsAft(q, qtail, ql);
 *
 * works fine.  Of course, one would just use MtqEnq to do this in actual
 * practice.
 */

#endif /* MTQ_ORACLE */
