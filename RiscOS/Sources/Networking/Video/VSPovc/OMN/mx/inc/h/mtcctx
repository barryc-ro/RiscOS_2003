
/*---------------------------------------------------------------------------*/
/* mtcctx.h     Media Tools Context ConTeXt manager                          */
/*                                                                           */
/* This module implements a very crude context manager.  It is intended to   */
/* act as a central place for registering global context.  The definition    */
/* of global is still flexible, and its scope can be determined by the       */
/* specification of the OSD's in smtcctx.                                    */
/*                                                                           */
/* PUBLIC FUNCTIONS:                                                         */
/*      mtcctxInit      Express interest in using the context manager        */
/*      mtcctxGet       Get a previously stored context                      */
/*      mtcctxPut       Put a context pointer into "global" storage          */
/*      mtcctxDone      Indicate you no longer need the context manager      */
/*                                                                           */
/* MODIFIED:                                                                 */
/*   pritto     05/17/95        Added MZFCTX to enum                         */
/*   maui       07/17/95        Added MTUPTSLVINFO to enum                   */
/*   maui       07/12/95        Added MTPCTX to enum                         */
/*   dpawson    07/06/95        Remove include of s.h                        */
/*   maui       06/13/95        Added MZSISTATS to enum                      */
/*   maui       06/13/95        Added MZSRC to enum                          */
/*   dbrower    03/14/95	Added MKEVCTX to enum.                       */
/*   dpranke    02/06/95        Added MTTSIMCTX to enum                      */
/*   maui       10/03/94        Added MZSILIST and MZSILOCALDATA to enum     */
/*   dpawson    06/17/94        Creation                                     */
/*---------------------------------------------------------------------------*/

#ifndef MTCCTX_ORACLE
# define MTCCTX_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif /* !SYSI_ORACLE */

EXTC_START

/*---------------------------------------------------------------------------*/
/* This enumerated type acts as the registration for all known contexts.  If */
/* you want to be able to stash your context away and get it back using this */
/* facility, you must register your context type below.                      */
/*---------------------------------------------------------------------------*/
/* It is possible that we'd like contexts named as strings.  This removed    */
/* need for registration of types, but will increase the work needed to find */
/* a context, and opens up the possibility of multiple people picking the    */
/* same name for their context.                                              */
/*---------------------------------------------------------------------------*/
typedef enum
{
   MTCCTXMGR,           /* The context manager itself */
   MNETCTX,             /* Media Net Context */
   MDSCTX,              /* Media Data Store Context */
   MNSCCTX,             /* Media Net Process Server Context */
   MZSILIST,            /* Mzsi free context memory list */
   MZSILOCALDATA,       /* Mzsi local context */
   MZSISTATS,           /* Mzsi Statistics */
   MZSRC,               /* Mzs Rate Control Data */
   MDSCNVCTX,           /* mdscnv context */
   MDSCPCTX,            /* mdscp and mdscpSlv context */
   MKECTX,		/* mke context */
   MZMGACTX,		/* mzmga agent context */
   MZMGSCTX,		/* mzmgs server context */
   MZLCTX,              /* mzl server context */
   MTTSIMCTX,		/* mttcs simulator context */
   MZBCTX,              /* Boot image server context */
   MKEVCTX,		/* mkev event peer context */
   MTPCTX,              /* Media Tools Performance Context */
   MTUPTSLVINFO,        /* Tagger Slave Info */
   MZFCTX,              /* mzf server context */
   MTCTXLAST            /* Dummy last element */
} mtcctxType;

/*------------------------------ Return Values ------------------------------*/

#define MTCCTXSUCC      0                             /* Everything is swell */
#define MTCCTXDUP       1                               /* Duplicate context */
#define MTCCTXNOMEM     2                                   /* Out of memory */

/*------------------------------- mtcctxInit --------------------------------*/
/* ub4 mtcctxInit(void)                                                      */
/*                                                                           */
/* This function should be called by any component which decides that it     */
/* wishes to either store a global context or fetch another components       */
/* global context which has been stored.  It need only be called once per    */
/* component.  Any component which calls this function should call           */
/* mtcctxDone when it no longer needs the services provided by the context   */
/* manager.                                                                  */
/*                                                                           */
/* PARAMTERS:                                                                */
/*      None                                                                 */
/* RETURNS:                                                                  */
/*      0 if unable to initialize the context manager.                       */
/*      1 if successful.                                                     */
/*---------------------------------------------------------------------------*/
ub4 mtcctxInit(void);

/*------------------------------- mtcctxPut ---------------------------------*/
/* ub4 mtcctxPut(mtcctxType type, ub4 inst, dvoid *thectx)                   */
/*                                                                           */
/* This function is used to stash away a "global" context, which can later   */
/* be fetched using mtcctxGet.  The context is stored with several           */
/* properties that can later be used to fetch it.  A context is identified   */
/* by a type, and an instance number.  If a component does not support       */
/* multiple instances of its context, it should use 0 for the instance.  0   */
/* is otherwise not a valid instance number.  The context manager will not   */
/* store multiple contexts with the same type and instance number, including */
/* two contexts which have an instance number of 0.                          */
/*                                                                           */
/* PARAMETERS:                                                               */
/*      type    A name of type mtcctxType which identifies the owner of the  */
/*              context.                                                     */
/*      inst    An integer which further distinguishes between multiple      */
/*              contexts with the same owner.  A value of 0 means the        */
/*              component doesn't use multiple instances.                    */
/*      thectx  An opaque pointer.  The context to be stored away.           */
/* RETURNS:                                                                  */
/*      MTCCTXSUCC      The context was successfully stored.                 */
/*      MTCCTXNOMEM     The context couldn't be stored due to a lack of      */
/*                      memory.                                              */
/*      MTCCTXDUP       The context couldn't be stored because it was a      */
/*                      duplicate of a context previously stored using this  */
/*                      function.                                            */
/*                                                                           */
/* NOTES:                                                                    */
/*      You may check for success by comparing the return code to 0.         */
/*      It is assured that a return value of 0 will always mean success.     */
/*---------------------------------------------------------------------------*/
ub4 mtcctxPut(mtcctxType name, ub4 inst, dvoid *thectx);

/*------------------------------- mtcctxGet ---------------------------------*/
/* dvoid *mtcctxGet(mtcctxType type, ub4 inst)                               */
/*                                                                           */
/* This function is used to fetch a context previously stashed away using    */
/* mtcctxPut.  It is passed a type and instance number which uniquely        */
/* identify a context.  If the instance number is 0, it means that any       */
/* context of the specified type will suffice, and the first such context    */
/* that is located will be returned.                                         */
/*                                                                           */
/* PARAMETERS:                                                               */
/*      type    A name of type mtcctxType which identifies the context you   */
/*              wish to locate.                                              */
/*      inst    An integer which further distinguishes between multiple      */
/*              contexts of the same owner.  A value of 0 means that you are */
/*              not interested in any particular context of the named type,  */
/*              and the first context of the named type that is located will */
/*              be returned.                                                 */
/* RETURNS:                                                                  */
/*      If a context with the given properties is located, it is returned    */
/*      as an opaque pointer which must be cast to the appropriate type.  If */
/*      no context is found which matches the passed criteria, a NULL        */
/*      pointer is returned.                                                 */
/*---------------------------------------------------------------------------*/
dvoid *mtcctxGet(mtcctxType name, ub4 inst);


/*------------------------------- mtcctxDone --------------------------------*/
/* void mtcctxDone(void)                                                     */
/*                                                                           */
/* This function is called by a component to indicate that it no longer      */
/* requires the services of the context manager.  This does not necessarily  */
/* mean the context manager will shut itself down.  The context manager is   */
/* only shut down when all clients who called mtcctxInit have called         */
/* mtcctxDone.  This is why it is essential that this function be called.    */
/* If, after calling this function, a component wishes to use the context    */
/* manager, it must once again call mtcctxInit.                              */
/*                                                                           */
/* PARAMETERS:                                                               */
/*      None                                                                 */
/* RETURNS:                                                                  */
/*      None                                                                 */
/*---------------------------------------------------------------------------*/
void mtcctxDone(void);

EXTC_END
#endif /* !MTCCTX_ORACLE */
