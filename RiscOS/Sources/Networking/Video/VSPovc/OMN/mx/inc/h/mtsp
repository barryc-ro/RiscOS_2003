/* Copyright (c) Oracle Corporation 1994.  All Rights Reserved. */

/*
  NAME
    mtsp.h
  DESCRIPTION
    Media Server SPlay trees.  These are self-adjusting search trees
    suitable for many purposes, including priority queues and ordered
    search spaces.
    
  PUBLIC FUNCTIONS
    mtspTree   *mtspNewTree( mtspTree *t, mtspCmpFunc *cmp );
    mtspNode   *mtspLookup( dvoid *key, mtspTree *t );
    mtspNode   *mtspEnq( mtspNode *node, mtspTree *t );
    mtspNode   *mtspDeq( mtspNode **np );
    void	mtspRemove( mtspNode *node, mtspTree *t );
    void	mtspSplay( mtspNode *n, mtspTree *t );
    mtspNode   *mtspFHead( mtspTree *t );
    mtspNode   *mtspFNext( mtspNode *n );

  NOTES
    This code is derived from a richer set of primitives shown
    in the book "Software Solutions in C".  Look there or see
    dbrower before writing new ones on your own!

  MODIFIED   (MM/DD/YY)
    dbrower   11/22/94 -  created.
    dbrower   05/26/95 -  add mtspPELookup and mtspNextLookup for Bug 284979.
*/

/*
 * This is derived from code:
 *
 * Copyright (c) 1994 by Academic Press, Boston, Massachusetts.
 * Written by David Brower.  Not derived from licensed software.
 * From the book "Software Solutions in C", edited by Dale Schumacher.
 *
 * Permission is granted to anyone to use this software for any
 * purpose on any computer system, and to redistribute it in any way,
 * subject to the following restrictions:
 *
 *   1. The author is not responsible for the consequences of use of
 *	this software, no matter how awful, even if they arise
 *	from defects in it.
 *
 *   2. The origin of this software must not be misrepresented, either
 *	by explicit claim or by omission.
 *
 *   3. Altered versions must be plainly marked as such, and must not
 *	be misrepresented (by explicit claim or omission) as being
 *	the original software.
 *
 *   4. This notice must not be removed or altered.
 */

#ifndef MTSP_ORACLE
#define MTSP_ORACLE

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif

EXTC_START

/* PUBLIC TYPES AND CONSTANTS */

typedef struct mtspNode mtspNode;

/* this node is assumed to be embedded in the data object; key must be
   set by hand before enqueueing with mtspEnq. */

struct mtspNode
{
  mtspNode *left_mtspNode;
  mtspNode *right_mtspNode;
  mtspNode *up_mtspNode;
  dvoid	    *key_mtspNode;
};

typedef sb4 mtspCmpFunc( dvoid *a, dvoid *b );

typedef struct mtspTree mtspTree;

struct mtspTree
{
  mtspNode	    *root_mtspTree;
  mtspCmpFunc	    *cmp_mtspTree;
};

/* PUBLIC FUNCTIONS */

/* ---------------------------- mtspNewTree ---------------------------- */
mtspTree   *mtspNewTree( mtspTree *t, mtspCmpFunc *cmp );
/*
  NAME
    mtspNewTree
  DESCRIPTION
    Initialize a tree, using the supplied function for ordering comparisons.
  PARAMETERS
    t	    - pointer to tree to set up
    cmp	    - function to use for comparisons
  RETURNS
    pointer to the tree.
*/

/* ---------------------------- mtspLookup ---------------------------- */
mtspNode   *mtspLookup( dvoid *key, mtspTree *t );
/*
  NAME
    mtspLookup
  DESCRIPTION
    Given a pointer to a key, do a lookup in the tree and return a
    pointer to the located tree node, or NULL.
  PARAMETERS
    key	    - pointer to a key value to locate.
    t	    - the tree to search
  RETURNS
    pointer to the mtspNode located, or NULL if not found.
*/

/* ---------------------------- mtspPELookup ---------------------------- */
mtspNode   *mtspPELookup( dvoid *key, mtspTree *t );
/*
  NAME
    mtspLookup
  DESCRIPTION
    Given a pointer to a key, do a lookup in the tree and return a
    pointer to the matching node, or the one prior.  If no match and
    none prior, return NULL.
  PARAMETERS
    key	    - pointer to a key value to locate.
    t	    - the tree to search
  RETURNS
    pointer to the mtspNode located, or NULL if not found.
*/

/* ---------------------------- mtspNextLookup ---------------------------- */
mtspNode   *mtspNextLookup( dvoid *key, mtspTree *t );
/*
  NAME
    mtspLookup
  DESCRIPTION
    Given a pointer to a key, do a lookup in the tree and return a
    pointer to the next node that follows the key, even if the key
    does not exist in the tree.  Returns NULL only if there are no
    successors.
  PARAMETERS
    key	    - pointer to a key value to locate.
    t	    - the tree to search
  RETURNS
    pointer to the mtspNode located, or NULL if not found.
*/

/* ---------------------------- mtspEnq ---------------------------- */
mtspNode   *mtspEnq( mtspNode *node, mtspTree *t );
/*
  NAME
    mtspEnq
  DESCRIPTION
    Insert a new node into the tree.   If nodes with the key already
    exist the node may be inserted in any location with respect to
    those nodes.
  PARAMETERS
    node	- node to insert, with key_mtNode pointing to the key
		  value.
    t		- the tree to insert into.
  RETURNS
    pointer to the node.
*/


/* ---------------------------- mtspDeq ---------------------------- */
mtspNode   *mtspDeq( mtspNode **np );
/*
  NAME
    mtspDeq
  DESCRIPTION
    Return and remove (dequeue) the lowest node in a tree.
    Repetitive dequeue operations without inserts are O(1).
  PARAMETERS
    np	    -- pointer to a node pointer, for instance the
	       address of a tree root, eg: &t->root_mtspTree;  (OUT)
  RETURNS
    pointer to the dequeued node, or NULL if the tree was empty.
*/


/* ---------------------------- mtspRemove ---------------------------- */
void	    mtspRemove( mtspNode *node, mtspTree *t );
/*
  NAME
    mtspRemove
  DESCRIPTION
    Remove an arbitrary node from a tree.  Chaos will ensue if the
    node is not in the tree.
    
  PARAMETERS
    node	-- the node to remove.
    t		-- the tree to remove it from.
  RETURNS
    none
*/


/* ---------------------------- mtspSplay ---------------------------- */
void	    mtspSplay( mtspNode *n, mtspTree *t );
/*
  NAME
    mtspSplay
  DESCRIPTION
    Rotate the node to the root of the tree, using the "splay"
    algorithm.  This should rarely be called by clients.
  PARAMETERS
    n	    -- the node to pull up.
    t	    -- the tree containing it.
  RETURNS
    none
*/


/* ---------------------------- mtspFHead ---------------------------- */
mtspNode   *mtspFHead( mtspTree *t );
/*
  NAME
    mtspFHead
  DESCRIPTION
    Locate the lowest node in a tree, quickly without reorganizing.
    This is suitable for starting quick ordered scans of the tree.
  PARAMETERS
    t	    -- tree in question.
  RETURNS
    pointer to the lowest node, or NULL if the tree is empty.
*/


/* ---------------------------- mtspFTail ---------------------------- */
mtspNode   *mtspFTail( mtspTree *t );
/*
  NAME
    mtspFTail
  DESCRIPTION
    Locate the highest node in a tree, quickly without reorganizing.
    This is suitable for starting quick ordered scans of the tree.
  PARAMETERS
    t	    -- tree in question.
  RETURNS
    pointer to the lowest node, or NULL if the tree is empty.
*/


/* ---------------------------- mtspFNext ---------------------------- */
mtspNode   *mtspFNext( mtspNode *n );
/*
  NAME
    mtspFNext
  DESCRIPTION
    Return the next node in a tree, quickly without reorgainizing.
    This is suitable for increment steps in a fast tree scan.
  PARAMETERS
    n	    -- the node whose successor is to be found
  RETURNS
    pointer to the next node, or NULL if there is none.
*/

/* ---------------------------- mtspFPrev ---------------------------- */
mtspNode   *mtspFPrev( mtspNode *n );
/*
  NAME
    mtspFPrev
  DESCRIPTION
    Return the previous node in a tree, quickly without reorgainizing.
    This is suitable for increment steps in a fast tree scan.
  PARAMETERS
    n	    -- the node whose successor is to be found
  RETURNS
    pointer to the prev node, or NULL if there is none.
*/

EXTC_END
#endif

