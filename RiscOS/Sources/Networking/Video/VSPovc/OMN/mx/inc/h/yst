/*
 * Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yst.h - System layer Threads package
 *
 * WARNING:
 * This package defines the POTI (Portable Oracle Threads Interface).
 * Though this is a portable interface, the functions defined here should
 * never be called directly from portable code.  Instead, the matching
 * syst.h interface, which is identical except all functions names are
 * preceded with "s", should be used.  This mechanism enables POTI to be
 * implemented on top of any of a number of thread packages.  See syst.h
 * for more.
 *
 * DESCRIPTION:
 * This component defines the POTI which is the thread interface that all
 * generic code should use.  A true lightweight threads package means a
 * separate stack is allocated for each created thread.  A thread switch
 * changes the active stack.  Threads are a convenient programming paradigm
 * for processes that need to concurrently overlap work for multiple tasks
 * involving asynchronous operations (eg. disk IOs or RPC calls).
 *
 * This component also provides a portable library level threads package,
 * implemented in yst.c, which syst.h can conveniently use if appropriate
 * for a platform.  In this implementation, execution control is transfered
 * between threads via a setjmp/longjmp mechanism that has very light OSD
 * requirements.  Each port need supply only one function which can set the
 * stack pointer variable in a jump buffer.
 *
 * This threads package assumes non-preemptive execution of control flow.
 * This makes programming much simpler as a code path can assume it won't
 * be asynchronously interrupted.  This mandates that threads periodically
 * yield execution to other threads.  A natural time to do this occurs when
 * a thread must wait for an asynchronous operation to complete.
 *
 * A basic mutex locking scheme is provided for threads to coordinate
 * access to shared, process-global data.  Threads can block waiting for
 * a mutex to become available.  The system automatically wakes up the
 * thread when the thread holding the mutex releases it.
 *
 * WARNING:
 * This threads package is only compatible with yse errors, not mke.  yse
 * error frames are thread-aware while mke frames are not.  This means
 * signaling an error with mke might throw you back to an error frame in
 * another thread which is almost certainly not want you intended.
 *
 * Though dangerous, it is still ok to combine mke and this threads package
 * but you must take care not to throw errors between thread yields unless
 * an error frame was established first.  That is, there should never be a
 * code path from a ystYield or ystSleep call to an mkeError call without
 * an intervening MKEBEGIN.  New code should be using yse.
 */

#ifndef YST_ORACLE
#define YST_ORACLE

#ifndef SYSI_ORACLE
# include <sysi.h>
#endif

EXTC_START

/*
 * PUBLIC INTERFACE
 */

/*
 * Thread Package Initialization.
 *
 * DESCRIPTION:
 * Initialization and termination of the thread package.  You can optionally
 * specify the total amount of memory for the system to set aside for stack
 * memory.  This value will be handed down to systStkInit which a port can
 * chose to ignore (typical if a port grabs stack memory dynamically from
 * the heap).  Specifying 0 for totalStkMem forces dynamic allocation which
 * may be slower on some ports.  Both routines return 0 on success, -1 on
 * failure.
 */
sword ystInit( ub4 totalStkMem );
sword ystTerm( void );

/*
 * Thread Creation and Termination.
 *
 * DESCRIPTION:
 * ystCreate creates a new thread with a stack size of "stksiz" bytes.
 * Once created, the thread is placed on an internal run queue.  When
 * control is first passed to the thread during startup, the function
 * "main" is executed and is handed the lone argument "ctx".  If "main"
 * returns or ystExit is called, the thread is destroyed.  ystCreate
 * returns the thread context on success, 0 on failure.  ystExit returns 0
 * on success, -1 on failure.
 *
 * ystSelf returns a handle to the currently running thread.  ystPrint
 * formats it into the supplied buffer.
 */
typedef struct ystThd ystThd;
ystThd  *ystCreate( void (*main)(dvoid *arg), dvoid  *ctx, ub4 stksiz);
sword    ystExit( void );
ystThd  *ystSelf( void );
void     ystPrint( ystThd *tid, char *buf, size_t len);

/*
 * Thread Yield, Suspend, and Resume.
 *
 * DESCRIPTION:
 * ystYield relinquishes control of the currently executing thread and
 * transfers execution to the specified thread or the next thread on the
 * run queue if "nextThd" is zero.  Some underlying thread packages may
 * not support the ability to switch to a particular thread.  That's ok.
 * Such ports should just switch to any runnable thread.  All software
 * built on top of the threads package will work, it just may not run
 * as efficiently on these platforms.
 *
 * ystSuspend suspends the currently running thread which will not run
 * again until another thread resumes it.  Control is transfered to the
 * specified thread or the next thread on the run queue if "nextThd" is zero.
 *
 * ystResume makes the specified thread runnable again.  It does not
 * immediately yield the calling thread and switch to the specified thread.
 * The resumed thread is merely placed on the run queue so that it will run
 * in the normal course of switching between threads.
 */
void    ystYield( ystThd *nextThd );
void    ystSuspend( ystThd *nextThd );
void    ystResume( ystThd *thd );

EXTC_END
#endif /* YST_ORACLE */
