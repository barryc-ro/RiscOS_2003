/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * ysmsg.h - Message File Manipulation
 *
 * NOTE
 * Direct access to the message file is legal only to components of the
 * Media Net product.
 */

#ifndef YSMSG_ORACLE
#define YSMSG_ORACLE

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef SYSFP_ORACLE
#include <sysfp.h>
#endif

EXTC_START

/*
 * Constants
 */
#define YSMSG_MAGIC  ((ub4) 0x6d4e6d53)
#define YSMSG_SFX    "mot"

/*
 * ysmsgd - message file descriptor
 */
typedef struct ysmsgd ysmsgd;

/* DISABLE check_naming */
struct ysmsgd
{
  CONST char *prod;                                          /* product name */
  CONST char *fac;                                          /* facility name */
  sysfp *fp;                                         /* message file pointer */
  ub4    idmin, idmax;                   /* message minimum & maximum number */
  ub4    datalen;            /* total length of data segment in message file */
  ub1   *msgtbl;                                            /* message table */
};
/* ENABLE check_naming */

/*
 * Descriptor Access Macros
 *
 * DESCRIPTION
 * ysMsgDataOffset() returns the offset in bytes from the beginning of the
 * file where the data segment begins.  ysMsgDataLength() returns the length
 * in bytes of the data segment of the message file.  ysMsgOffset() returns
 * the offset in bytes from the beginning of the file where a particular
 * message's text can be found; note that you must subtract ysMsgDataOffset()
 * from this value to get its position relative to the data segment.
 * ysMsgLength() returns the length in bytes for a particular message.
 * The length includes a terminating null byte.
 */
#define ysMsgDataOffset(msgd) ((((msgd)->idmax - (msgd)->idmin + 1) * 8) + 12)
#define ysMsgDataLength(msgd) ((msgd)->datalen)
#define ysMsgOffset(msgd, id) \
  sysxGetB4((msgd)->msgtbl + ((id) - (msgd)->idmin) * 8)
#define ysMsgLength(msgd, id) \
  sysxGetB4((msgd)->msgtbl + ((id) - (msgd)->idmin) * 8 + 4)

/*
 * ysMsgOpen - open a message file
 *
 * DESCRIPTION
 * ysMsgOpen() opens a message file and returns a message file descriptor.
 * If the message file could not be opened, a null pointer is returned.
 * This routine automatically checks for the resource ys.log.msg-path
 * which, if present, defines a search path for the message file.
 */
ysmsgd *ysMsgOpen(CONST char *prod, CONST char *fac);

/*
 * ysMsgClose - close a message file
 *
 * DESCRIPTION
 * ysMsgClose() closes a message file and releases memory used by the
 * message file descriptor returned from ysMsgOpen().
 */
void ysMsgClose(ysmsgd *msgd);

/*
 * ysMsgFind - find a message file
 *
 * DESCRIPTION
 * ysMsgFind(), like ysMsgOpen(), returns a message file descriptor
 * corresponding to the prod and fac passed.  However, ysMsgFind()
 * caches opened message file descriptors, and will attempt to locate
 * the descriptor in the cache before opening a new one.
 *
 * Do not pass descriptors returned by ysMsgFind() to ysMsgClose().
 */
ysmsgd *ysMsgFind(CONST char *prod, CONST char *fac);

/*
 * ysMsgGet - get message text
 *
 * DESCRIPTION
 * ysMsgGet() retrieves a message from the message file.  msgd is the
 * open message file descriptor.  msgid is the message identifier.  The
 * message is written to buf (up to a maximum of buflen bytes).  The
 * routine returns buf if the message found; otherwise it returns null.
 * If msgd is null, null is returned.
 */
char *ysMsgGet(ysmsgd *msgd, ub4 msgid, char *buf, size_t buflen);

/*
 * ysMsgFmt - format a message
 *
 * DESCRIPTION
 * ysMsgFmt() formats a message for printing to the screen.  The message
 * is written to out, up to a maximum of outlen bytes.  The arguments
 * for the message are passed in rec, and the formatting text of the
 * message (probably from ysMsgGet()) is passed in msgtxt.  If msgtxt
 * is null, the text "message not found" is inserted and the arguments
 * are printed in a canonical format.
 */
void ysMsgFmt(char *out, size_t outlen, sword narg, yslarg *args,
	      CONST char *msgtxt);

EXTC_END
#endif /* YSMSG_ORACLE */
