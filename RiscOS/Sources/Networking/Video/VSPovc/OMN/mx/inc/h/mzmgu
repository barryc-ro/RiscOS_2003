/* Copyright (c) Oracle Corporation 1994.  All Rights Reserved. */

/*
  NAME
    mzmgu.h
  DESCRIPTION
    mzmu - universal mzm header, shared between services and the
    agent.  This defines types only, no access routines.
    
  EXPORT FUNCTIONS
    none.
  PUBLIC FUNCTIONS
    none.
  PRIVATE FUNCTIONS
    none
  NOTES

  MODIFIED   (MM/DD/YY)
    dbrower   11/22/94 -  created.
*/

#ifndef MZMGU_ORACLE
#define MZMGU_ORACLE

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif

EXTC_START

/* PUBLIC TYPES AND CONSTANTS */

typedef	sb4 mzmguTimeTicks;

/*
** Error values -- not enum because they go over MN sometimes.
*/

#define mzmNoContextInit    1001
#define mzmMallocFailed	    1002
#define mzmInitFailed	    1003 
#define mzmBadContext	    1004
#define mzmNoService	    1005
#define mzmClientGetArg	    1006
#define mzmClientPutArg	    1007
#define mzmSvcGetArg	    1008
#define mzmSvcPutArg	    1009
#define mzmClientCallErr    1010

/* values for mzmguStatus -- should be rationalized with service
**  controller status values.
*/
#define mzmguStDown	    1 /* not available */
#define mzmguStRunning	    2 /* operational and available */
#define mzmguStHalted	    3 /* operational, not available */
#define mzmguStCongested    4 /* running, but no new requests possible */
#define mzmguStRestarting   5 /* currently unvailable, will be back soon */

/*
 * This structure is filled in by the service.  Storage is either
 * provided by the service, or by the common MIB code.
 */
typedef struct
{
  /* OperStatus is the current operating status, set to reflect the
     actual service state.  When it is changed in the service, the
     service should also call mzmgusStatChange in case we need to
     notify parties outside the service.   The common mib code will
     update a last-changed timestamp when mzmgusStatChange is called. */

    ub4		OperStatus_mzmguSStats;
    
  /* AdminStatus is the administrative state, what the operator
     would like the operStatus to become when possible.  When this
     is down(1), the operator wants the service to disappear
     completely.  When it is running(2), the operator wants the
     service to be up.  When it is halted(3), the operator wants
     the service to stop handling regular (but not management)
     requests.  Restarting(5) means the operator wants the service
     to restart itself, but not to become completely up and
     running(2).  There is no meaning to setting the AdminStatus
     to congested(4).  The common MIB control operation don't set
     AdminStatus directly.  It is always controlled by the
     service.  When it is changed, the service should stamp the
     AdminStatusChanged field. */

    ub4		    AdminStatus_mzmguSStats;	
    mzmguTimeTicks  ChangedAdminStatus_mzmguSStats;

    /* Association can mean "connection" or "RPC" or whatever.
       The service should map it to the thing most meaningful at a
       high-level operator console */
       
    ub4		InboundAssocs_mzmguSStats;
    ub4		OutboundAssocs_mzmguSStats;

    ub4		TotInboundAssocs_mzmguSStats;
    ub4		TotOutboundAssocs_mzmguSStats;

    /* both set with mzmgsTimeStamp */
    mzmguTimeTicks LastInbound_mzmguSStats;   
    mzmguTimeTicks LastOutbound_mzmguSStats; 

    /* These may be meaningless for most services */
    ub4		RejectedInboundAssocs_mzmguSStats;
    ub4		FailedOutboundAssocs_mzmguSStats;

} mzmguSStats;

/* info about service returned to the agent by the service */

typedef struct
{
  sb4		    svcType_mzmguSInfo;	    /* from addmib call */ 
  mzmguTimeTicks    svcUpTime_mzmguSInfo;   /* from common mib */
  mzmguTimeTicks    changedOperStatus_mzmguSInfo; /* from changeState call */
  mzmguSStats	    svcStats_mzmguSInfo;    /* from service */
} mzmguSInfo;

/* this proc info can be from config data or from the proc itself. */

typedef struct
{
  char	    *procName_mzmguPSInfo; /* may be null or empty */
  char	    *procHost_mzmguPSInfo; /* hostname, as string  */
  char	    *procAffinity_mzmguPSInfo; /* cpu #, cube, etc., as string */
} mzmguPSInfo;

/* this proc info only known from the running proc */

typedef struct
{
  char	    *pid_mzmguPRInfo;	/* process ID, as string. */
  ub4	    operStatus_mzmguPRInfo;
#   define	mzmguPRunning	    1
#   define	mzmguPRunnable	    2
#   define	mzmguPNotRunnable   3
#   define	mzmguPInvalid	    4  

  ub4	    cpuCs_mzmguPRInfo;	/* 1/100 second CPU increments */
  ub4	    memKb_mzmguPRInfo;	/* Kb memory use */
} mzmguPRInfo;

/* this is the form when returned from the service proc */

typedef struct
{
  mzmguPSInfo	static_mzmguPInfo;
  mzmguPRInfo   run_mzmguPInfo;
} mzmguPInfo;

/* PUBLIC FUNCTIONS */

EXTC_END
#endif
