/* Copyright (c) Oracle Corporation 1996.  All Rights Reserved. */

/*
  NAME
    yeevent.idl
  DESCRIPTION
    IDL describing distributed events in OMX, used for logging and
    other event services.  This presents a strongly typed event model,
    but the event type incorporates an 'any', making it very flexible.

    OMX yeev events are not related to CORBA event channels.  (Though of
    course a CORBA event channel could be used as a proxy receiver or proxy
    event generator).

    Events can be thought of as one-way communication between yeev
    event generating entities and yeevReceiver consumers.

    An event is created by populating a yeevr event record structure
    and invoking the yeev_raise function.  To get events generated
    by ysRecord, yeevSinkAttach (see yeev.h) is called to install
    a callback that wraps the yslrec record and drived yeev_raise.

    Once raised, the event is evaluated against the current set of filters.
    For each matching destination yeevReceiver, the event is sent using
    yeevReceiver_push.

    In most cases, the receiving side has a handler attached to the
    receiver that it created using yeev_createReceiver, and so does not
    need to call the yeevReceiver pull methods.

    Filter discriminators come in lists, some of which are first-class
    objects of the type yeevDiscList.  These objects may have their filters
    modified with IDL operations.

    The syntax for filters follows that of the ysRecord filters, with
    more variables available from the yeevr structure.  The filter
    expressions supported observe the following syntax:

     expr ::= and-expr [ or and_expr ]
     or ::= "OR" | ","
     and-expr ::= primary [ [ "AND" ] primary ]
     primary ::= "NOT" primary | predicate literal | relop-expr | "(" expr ")"
     relop-expr ::= variable relop literal
     relop ::= "<" | "<=" | "==" | "!=" | ">=" | ">"
     literal ::= unquoted-string | quoted-string

    All whitespace is ignored, except as a token separator.  variable and
    predicate are identifiers, following C syntax.  An unquoted-string means
    that any unrecognized word (bounded by spaces, parentheses, commas and
    relational operators) constitutes a single string.  A quoted-string is
    a string that contains any character between two quotes (").

    The following predicates are defined:
    
      (from ysRecord)
      prod <string> - true if the product is <string>
      fac <string> - true if the facility is <string>
      msg <int> - true if the message id is <int1>
      msg <int1>:<int2> - true if the message id is between int1 and int2
      maxsev <int> - true if the severity of the message is <= int
      (from yeev)
      orig <string> - true if originating object is <string>.
      forw <string> - true if forwarding object is <string>.
      host <string> - true if event originated from <host>.
      pid <string> - true if event originated from <pid>.
      aff <string> - true if event originated from <aff>.
      prog <string> - true if event originated from <prog>.
      
    The following variables are defined:
    
      (from ysRecord)
      msgid - the message id
      sev - the severity
      assoc - the association
      seqid - the sequence id from ysRecord.
    
      (from yeev)
      origseq - the sequence id from yeev_raise.
      time - the timestamp at the yeev_raise.
      hops - the number of yeev hops taken.
      
  MODIFIED   (MM/DD/YY)
    dbrower   06/11/96 -  documented.
*/

#ifndef YEEVENT_ORACLE
#define YEEVENT_ORACLE

#ifndef YOSTD_ORACLE
#include "yostd"
#endif

/* PUBLIC TYPES AND CONSTANTS */


// forward decls.
interface yeevDiscList;
interface yeevReceiver;
interface yeev;

// these create typecodes for the ysh/mke types.

typedef sb8 yeevTimestamp;

typedef sequence <any> yeevSeqAny;
typedef sequence <yeev> yeevList;
typedef sequence <yeevReceiver> yeevReceiverList;

// event record
struct yeevr
{
  yeev	    orig_yeevr;		// originating entity
  ub4	    origseq_yeevr;	// sequence in originator (nevent_yeevInfo)
  yeevTimestamp	origtime_yeevr;	// time in originator.
  string    orighost_yeevr;	// may be empty; imply or ask for yeevInfo.
  string    origpid_yeevr;	// may be empty; imply or ask for yeevInfo.
  string    origaff_yeevr;	// may be empty; imply or ask for yeevInfo.
  string    origprog_yeevr;	// may be empty; imply or ask for yeevInfo.
  yeev	    forw_yeevr;		// last forwarder
  ub4	    hops_yeevr;		// n forwarding hops
  string    prod_yeevr;		// ysLog product
  string    fac_yeevr;		// ysLog facility
  ub4	    msgid_yeevr;	// yslog msg id, or 0
  ub4	    sev_yeevr;		// yslog level == mke level == syslog level
  string    assoc_yeevr;	// association, may be empty.
  any	    val_yeevr;		// self-described value
};

typedef sequence <yeevr> yeevrList;

// filter (discriminator) element to route event records
struct yeevd
{
  string	qual_yeevd;	// qualification expression
  yeevReceiver	dest_yeevd;	// where it should be sent
};

typedef sequence <yeevd> yeevdSeq;

// info from the event object 
struct yeevInfo
{
  string    host_yeevInfo;
  string    pid_yeevInfo;
  string    affinity_yeevInfo;
  string    prog_yeevInfo;

  ub4	nevent_yeevInfo;	// number of event ops
  ub4	npush_yeevInfo;		// n pushes
  ub4	npushm_yeevInfo;	// n pushManys
  ub4	npull_yeevInfo;		// number of pulls
  ub4	ntpull_yeevInfo;	// number of tryPulls.
  ub4	npullm_yeevInfo;	// number of pullManys
  ub4	ntpullm_yeevInfo;	// number of tryPullManys
  ub4	nlimits_yeevInfo;	// number of limits hit;
  ub4	ndropped_yeevInfo;	// number of events dropped in limits;
};

// The type of event generated when ysRecord submits a record to yeev
// through the callback installed by yeevSinkAttach.
    
exception yeevYsLogEvent
{
  ub4		seqid;		// ysRecord sequence.
  yeevSeqAny	vals;		// sequence of any vals.
};

// these exceptions may be thrown by the yeev interfaces.

exception yeev_not_same_dest { };
exception yeev_qual_invalid { string qual; };

/* PUBLIC FUNCTIONS */

// object discriminator list created by yeev::createDiscList
interface yeevDiscList
{
  //-------------
  // attributes
  //-------------
  
  // the actual list of discriminating filters, modified
  // with methods below.
  readonly attribute yeevdSeq dlist;
    
  // number of entries in the dlist.
  readonly attribute ub4 numEntries;

  //-------------
  // methods
  //-------------
  
  // destroy the yeevDiscList completely.
  void destroy();

  // replace entire filter list for all dests
  void replace( in yeevdSeq newSeq )
    raises( yeev_qual_invalid );

  // add discriminating filters to the list.
  void append( in yeevdSeq ds )
    raises( yeev_qual_invalid );

  // remove discriminating filter by value
  void remove( in yeevd evd );

  // list filters for a receiver.
  void listDest( in yeevReceiver dest, out yeevdSeq ds );

  // replace all quals for the dest in the newSeq with
  // the quals in the newSeq.  Exception if newSeq is
  // for multiple dests.
  void replaceDest( in yeevdSeq newSeq )
    raises( yeev_not_same_dest, yeev_qual_invalid);

  // remove all filters that send to a destination 
  void destroyDest( in yeevReceiver dest );
};

// operations on a channel created by yeev::createReceiver
interface yeevReceiver
{
  //-------------
  // attributes
  //-------------
  
  // name of the receiver, set when the receiver is created.
  readonly attribute string name;

  //-------------
  // methods
  //-------------
  
  // destroy the receiver completely.
  void destroy();

  // send event(s) to the receiver.
  oneway void push( in yeevr rec );
  oneway void pushMany( in yeevrList recs );

  // pulls will only work if receiver has no internal handler
  // that is eating events when they are delivered.
  void pull( out yeevr rec );
  void pullMany( out yeevrList recs );

  // try get record(s); return FALSE if no record is available.
  boolean tryPull( out yeevr rec );
  boolean tryPullMany( out yeevrList recs );
};

//
// main event entity, common to producers, consumers, and forwarders.
// 
interface yeev
{
  //-------------
  // attributes
  //-------------

  readonly attribute yeevInfo info;

  // receivers I have created.
  readonly attribute yeevReceiverList receivers;

  // my routing, applied when a raise is done.
  attribute yeevDiscList filters;

  // drop or block if we exceed the outstanding event limits?
  attribute boolean limit_drop;

  // Number of total outstanding pushes to all dests before
  // dropping on the floor (if limit_drop is true) or blocking
  // (if limit_drop is false).
  attribute ub4 globalEventHighWater;
    
  // When the number of outstanding pushes falls below this number,
  // clear any outstanding limit_drop state reached by crossing
  // the globalEventHighWater.
  attribute ub4 globalEventRestart;

  //-------------
  // methods
  //-------------
  
  // Create a receive channel, expecting to get push invocations to
  // send events, and pulls to receive events.  (Some systems may
  // allow callbacks on the push to skip polling). 
  // Only real consumers create channels!
  yeevReceiver createReceiver( in string name );
			   
  // create a filter list object, initialized to the given dlist.
  yeevDiscList createDiscList( in yeevdSeq dlist );

  // send record(s) per the routing in filters.
  // fills in the orig* fields.
  void raise( in yeevr rec );
  void raiseMany( in yeevrList recs );

  // send a record where it should go, updating the forw field only.
  void forward( in yeevr rec );
};

#endif                                                          /* YEEVENT */
