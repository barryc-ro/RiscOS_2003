.TH mnSend 3 "31 August 1994"
.SH NAME
mnSend, mnSendV - send a message
.SH SYNOPSIS
.nf
#include <mn.h>
#include <mnt.h>
.LP
sb4 mnSend(mnp *port, mna *to, ub1 *buf, ub4 len,
	mnHandler handler, void *usrp);
.LP
sb4 mnSendV(mnp *port, mna *to, mnbv *bv, ub4 nbv,
	mnHandler handler, void *usrp);
.SH DESCRIPTION
mnSend() and mnSendV() both send a message to the destination
specified by to.  port must identify a port previously opened
with the message protocol.  to must be an address of a port that
also was opened as a message port.
.LP
For mnSend(), the contents of the message are contained in a
single buffer of len bytes pointed to by buf.  For mnSendV(),
the contents of the message are gathered from the buffer vector
pointed to by bv.  nbv indicates the number of elements in
the buffer vector.
.LP
If no buffer space is available to queue the send, these routines
normally block until space becomes available, unless the port has
been placed into a non-blocking mode (see mnGetOptions(3)).
.LP
mnSend() and mnSendV() may be invoked in a synchronous or
asynchronous manner using handler and usrp.  In either case,
the buffers passed in by the application may be discarded as
soon as the routine returns.
.LP
The send operation is said to be completed when the receipt of
the data has been confirmed or when the communication protocol
gives up.
.SH RESULT VALUES
On successful completion of the operation, the result status will
be the number of bytes that were sent.  Otherwise, one of the
following errors may be reported:
.TP 20
MNERR_BROKEN
Communication with the destination failed.
.TP 20
MNERR_BADADDR
The to address given is invalid.
.TP 20
MNERR_BADPROTO
The to address identifies a port using a different protocol.
.TP 20
MNERR_WOULDBLOCK
Insufficient buffer space was available and the port is in a
non-blocking mode.
.SH RETURN VALUES
In synchronous mode, the routine itself will return either the
result of the operation as indicated above, or one of the following
additional errors:
.TP 20
MNSTS_ABORTED
The blocking operation was aborted.
.LP
In asynchronous mode, the routine itself will return 0 if the
operation is started.
.SH SEE ALSO
mnOpen(3), mnRecv(3), mnmsg(4P).
