.TH mnRecv 3 "31 August 1994"
.SH NAME
mnRecv, mnRecvV, mnRecvWait, mnRecvTest - receive a message
.SH SYNOPSIS
.nf
#include <mn.h>
#include <mnt.h>
.LP
sb4 mnRecv(mnp *port, mna *from, ub1 *buf, ub4 len,
	ub4 timeout, mnHandler handler, void *usrp);
.LP
sb4 mnRecvV(mnp *port, mna *from, mnbv *bv, ub4 nbv,
	ub4 timeout, mnHandler handler, void *usrp);
.LP
sb4 mnRecvWait(mnp *port, mna *from, ub4 timeout,
	mnHandler handler, void *usrp);
.LP
sb4 mnRecvTest(mnp *port, mna *from);
.SH DESCRIPTION
mnRecv() and mnRecvV() both receive a message.  port must
identify a port previously opened with the message protocol.
.LP
For mnRecv(), the contents of the message are written to the buffer
pointed to by buf up to a maximum of len bytes.  For mnRecvV(), the
contents of the message are scattered to the buffer vector pointed
to by bv.  nbv indicates the number of elements in the buffer vector.
Any extra data in the message not transferred to a buffer is discarded.
.LP
If from is non-null, it points to a buffer where the address of the
sender of the message is written.
.LP
mnRecvWait() may be used to determine the length of a message without
actually consuming it.  This allows a buffer of the appropriate size
to be allocated after the message arrives.  mnRecvTest() performs a
similar function but without blocking.
.LP
If no messages are pending, mnRecv(), mnRecvV(), and mnRecvWait()
all block until a message arrives, unless the port has been placed
into a non-blocking mode (see mnSetOptions()).
.LP
mnRecv(), mnRecvV(), and mnRecvWait() may be invoked in a synchronous
or asynchronous manner using handler and usrp.  In either case, the
buffers and the from pointer (if non-null) passed in by the application
must remain valid until the operation completes.
.LP
The receive operation is said to be completed when a message arrives
and the data is transferred to the user buffers.  If an unread message
is already pending when the operation is queued, it will complete
immediately.  If timeout is non-zero, the operation will be aborted
after timeout milliseconds elapses if no message arrives.
.LP
mnRecvTest() does not initiate an operation.  It immediately returns
with the number of bytes in the next unread message.  If no unread
message is pending, it returns 0.
.SH RESULT VALUES
On successful completion of the operation, the result status will
be the number of bytes received.  Otherwise, one of the following
errors may be reported:
.TP 20
MNERR_BROKEN
Communication with the sender failed before the entire message was
received.
.TP 20
MNERR_TIMEOUT
No message arrived before the timeout elapsed.
.TP 20
MNERR_WOULDBLOCK
No message was available and the port is in a non-blocking mode.
.TP 20
MNERR_DISCONN
The port was forcibly disconnected.  This is returned when mnClose()
is invoked while an mnRecv() operation is pending.
.SH RETURN VALUES
In synchronous mode, the routine itself will return either the
result of the operation as indicated above, or one of the following
additional errors:
.TP 20
MNSTS_ABORTED
The blocking operation was aborted.
.LP
In asynchronous mode, the routine itself will return 0 if the operation
started.
.SH SEE ALSO
mnOpen(3), mnSend(3), mnmsg(4P).
