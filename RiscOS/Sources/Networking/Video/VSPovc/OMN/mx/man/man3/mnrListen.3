.TH mnrListen 3 "31 August 1994"
.SH NAME
mnrListen - listen for an RPC call
.SH SYNOPSIS
.nf
#include <mn.h>
#include <mnrs.h>
.LP
sb4 mnrListen(mnrs *sh, ub4 timeout, mnHandler handler,
	void *usrp);
.SH DESCRIPTION
sh is a server handle created by mnrCreateServer(3).  mnrListen()
will listen for an incoming call made to the server.  This routine
does not actually consume a call from the server queue.
.LP
The operation may be performed asynchronously by providing either
a handler or a semaphore through the handler and usrp arguments.
.LP
This operation will complete immediately if a call is already pending.
Otherwise, the operation will remain pending indefinitely, or, if a
non-zero timeout value is supplied, until timeout milliseconds elapses.
.LP
mnrGetNextCall() may be used to actually dequeue the pending call.
.SH USAGE
If the process server is being used, the process server will send
requests to a thread in response to an mnrListen() call.  Thus,
a thread can control the rate at which it handles new requests.
.SH RESULT VALUES
On successful completion, the result status will be 0.  Otherwise,
one of the following errors may be reported:
.TP 20
MNERR_TIMEOUT
No call arrived before the timeout period elapsed.
.TP 20
MNERR_BROKEN
Communication with the client failed before the request was fully
received.
.TP 20
MNERR_DISCONN
The server has been disconnected.  This is returned when mnrDestroyServer()
is invoked while an mnrListen() operation is pending.
.TP 20
MNSTS_TERMINATE
The process was terminated under the control of the process server.
.SH RETURN VALUES
In synchronous mode, mnrListen() will return either the result
of the operation as indicated above, or one of the following additional
errors:
.TP 20
MNSTS_ABORTED
The blocking operation was aborted.
.LP
In asynchronous mode, mnrListen() will return 0 if the operation
is successfully started.
.SH SEE ALSO
mnrAllow(3), mnrCreateServer(3), mnrDispatchCall(3), mnrGetNextCall(3),
mnrMainLoop(3).
