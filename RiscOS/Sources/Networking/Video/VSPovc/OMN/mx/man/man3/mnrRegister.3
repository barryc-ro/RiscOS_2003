.TH mnrRegister 3 "31 August 1994"
.SH NAME
mnrRegister, mnrUnregister - RPC server registration
.SH SYNOPSIS
.nf
#include <mn.h>
#include <mnrs.h>
.LP
sb4 mnrRegister(mnrs *sh, const char *name, boolean thread);
.LP
sb4 mnrUnregister(mnrs *sh);
.SH DESCRIPTION
sh is a server handle created with mnrCreateServer(3).  mnrRegister()
registers the existence of the RPC server under the given name.
.LP
thread indicates whether or not the server can be treated as part of
a pod of servers that all support the same functionality.  Pod-based
servers increase the availability of a server by allowing more than one
server thread to process incoming RPC calls concurrently.  If thread is
TRUE, then the server will be registered with the process server (see
mnsc(8)); otherwise, the server is registered directly with the name
server (see mznm(8)).
.LP
mnrUnregister() unregisters a previously registered server.  If not
already registered, this routine has no effect.
.LP
mnrUnregister() is called automatically by mnrDestroyServer(3) if a
server handle is still registered.
.SH USAGE
The name passed to mnrRegister() is not copied; only the pointer is saved.
Therefore, it must continue to point to valid storage until mnrUnregister()
is called.
.LP
If thread is TRUE but the process server is not running, mnrRegister()
will automatically attempt to register with the name server.
.SH RETURN VALUES
On success, mnrRegister() and mnrUnregister() return 0.  Otherwise,
one of the following errors will be returned:
.TP 20
MNERR_BROKEN
Communication with the name server or process server failed.
.TP 20
MNERR_DUPLICATE
Duplicate entry; server with same name and program identifier is
already registered.cd
.TP 20
MNERR_ALREADY
The server handle has already been registered.
.TP 20
MNERR_OUTMEM
Sufficient resources could not be allocated.
.TP 20
MNSTS_TERMINATE
The process could not be registered because the process server has
been instructed to terminate the pod.
.SH SEE ALSO
mnrCreateServer(3), mnsc(8), mznm(8).
