.TH MNSEM 3 "18 August 1994"
.SH NAME
mnSemAlloc, mnSemFree, mnSemSetUsrp, mnSemGetUsrp, mnSemTest, mnSemGroupTest, mnSemWait, mnSemOrW, mnSemAndW - semaphore manipulation
.SH SYNOPSIS
.nf
#include <mn.h>
#include <mnsem.h>
.LP
mnsem *mnSemAlloc(void *usrp);
void   mnSemFree(mnsem *sem);
.LP
void   mnSemSetUsrp(mnsem *sem, void *usrp);
void  *mnSemGetUsrp(mnsem *sem);
.LP
sb4    mnSemTest(mnsem *sem);
sb4    mnSemGroupTest(ub4 nsem, mnsem **sem);
.LP
sb4    mnSemWait(mnsem *sem);
sb4    mnSemOrW(ub4 timeout, ub4 nsem, mnsem **sem);
sb4    mnSemAndW(ub4 timeout, ub4 nsem, mnsem **sem);
.SH DESCRIPTION
mnSemAlloc() creates a semaphore and associates a user context pointer
with it.  It returns a pointer to the new semaphore.  mnSemFree()
deallocates a semaphore previously created with mnSemAlloc().
.LP
mnSemSetUsrp() and mnSemGetUsrp() set and get the user context pointer
associated with the given semaphore, respectively.
.LP
mnSemTest() returns the current value of a semaphore.  Prior to completion,
that value will always be MNSTS_UNKNOWN.  mnSemWait() also returns the
value of a semaphore, but if the operation is not yet completed, it will
block until the operation completes.
.LP
mnSemGroupTest() tests a group of semaphores.  It returns the number of
semaphores whose operations have completed (possibly zero).
.LP
mnSemOrW() blocks until at least one of the semaphores given is set
by the completion of an operation.  It then returns the number of
semaphores whose operations have completed.  If timeout is non-zero,
mnSemOrW() will block a maximum of timeout milliseconds before
returning.
.LP
mnSemAndW() is similar to mnSemOrW() except that it blocks until
all of the given semaphores are completed, or until the timeout elapses,
if one is given.  In any case, it then returns the number of semaphores
whose operations have completed.
.SH USAGE
A semaphore is created using mnSemAlloc() and passed to a routine that
can begin an asynchronous operation.  At any subsequent point, the user
may test or wait for the completion of the operation.  Prior to an
operation's completion, a semaphore's value is always MNSTS_UNKNOWN.
After the operation completes, the semaphore is set to a value which
indicates the result of the operataion.
.LP
A semaphore should not be used for more than one operation.  A semaphore
may be freed prior to the completion of the operation.  This does not
cancel the operation, but will effectively cause Media Net to ignore
the outcome of the operation.  Buffers associated with an
asynchronous operation started with this semaphore may be freed after
the semaphore is freed.
.LP
Any of the blocking routines may return MNSTS_ABORTED indicating that
the busy-wait routine forced the wait to be aborted.  This does not
affect the semaphores or the operations themselves.
.SH SEE ALSO
mn_intro(3), mnSet(3), mnSetBusyWait(3).
