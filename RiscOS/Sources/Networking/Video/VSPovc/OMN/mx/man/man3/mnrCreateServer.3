.TH mnrCreateServer 3 "19 November 1994"
.SH NAME
mnrCreateServer - create an RPC server handle
.SH SYNOPSIS
.nf
#include <mn.h>
#include <mnrs.h>
.LP
mnrs *mnrCreateServer(const mnrid *progid,
	ub4 ccnt, const mnrcd **comps, void *usrp);
.SH DESCRIPTION
mnrCreateServer() returns a new server handle that represents the RPC
server whose program identifier is given by progid and whose components
are given in the array comps which contains ccnt elements.
.LP
The value passed as usrp is available during the execution of the server
through mnrGetUsrp(3).
.LP
Each element of comps is a pointer to a structure defined as follows:
.LP
.RS
.nf
struct mnrcd
{
  const mnrid *cid;    /* component identifier */
        ub2    noper;  /* number of operations in array */
  const mnrod *opers;  /* array of operation pointers */
  const char  *nm;     /* name of component */
};
.fi
.RE
.TP
Component identifier (cid)
The component identifier uniquely identifies the component.
.TP
Operations (noper, opers)
A component consists of a number of functions that implement the
operations declared in the component interface.  opers is a vector
of descriptors for each of these operations.  The first element in
the opers array corresponds to an operation id of 1.
.TP
Name (nm)
The component name is the tag name given when the component interface
was declared.  Names of components that are combined into one service
must be distinct from each other.
.LP
Each element of opers is a structure defined as follows:
.LP
.RS
.nf
struct mnrod
{
  void (*oper)(mnrsc *call, mnbv *inargs, ub4 incnt);
  char   nm[32];
};
.fi
.RE
.TP
Function (oper)
The implementation of a given operation is bound by the operation
descriptor.
.TP
Name (nm)
The operation name is the function name given when the component interface
was declared.  The names of all operations within a component must be
distinct from each other.
.SH USAGE
The typical execution of an RPC server proceeds as follows:
mnrCreateServer() creates a server handle which is then registered
(mnrRegister(3)) under a particular name so that it may be easily
located by clients.  Once registered, the server enters into a
loop wherein the server waits for an incoming RPC call (mnrListen(3))
and then dispatches to a server routine (mnrDispatchCall(3)) that
processes and replies to the call (see mnrReturnCall(3)).  This process
repeats until the server eventually is instructed to terminate.  This
loop is encapsulated by mnrMainLoop(3).
.SH RETURN VALUES
On success, mnrCreateServer() returns the new server handle.  Otherwise,
it returns null and mnLastError() will indicate one of the following errors:
.TP 20
MNERR_OUTMEM
Insufficient resources were available to create the server handle.
.SH SEE ALSO
mnrDestroyServer(3), mnrDispatchCall(3), mnrGetAddr(3), mnrGetNextCall(3),
mnrListen(3), mnrMainLoop(3), mnrRegister(3).
