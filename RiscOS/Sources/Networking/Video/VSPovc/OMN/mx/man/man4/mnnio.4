.TH MNNIO 4 "31 August 1994"
.SH NAME
mnnio - Network interface object
.SH SYNOPSIS
.nf
#include <mn.h>
#include <mnnio.h>
.LP
struct mnnpa
{
  char family[4];	/* address family */
  ub1  addr[20];	/* family-specific address */
};
.LP
struct mnnio
{
  mnnpa  pa;		/* physical address */
  size_t pktmax;	/* maximum packet size */

  sb4  (*send)(mnnio *nio, mnnpa *pa, ub1 *buf, size_t len);
  sb4  (*recv)(mnnio *nio, mnnpa *pa, ub1 *buf, size_t len,
	boolean poll, ub4 timeout);
  void (*close)(mnnio *nio);

  ub4    flags;		/* flags bitfield */

  void  *usrp;		/* NIO implementation context */
  void  *private;	/* reserved for Media Net */
};
.SH DESCRIPTION
The network interface object must be created and initialized in some
process- and network-interface-specific manner.  Once created, the NIO
is handed to Media Net for use.  Each NIO is a structure consisting of the
following fields:
.SS Physical address (pa)
A physical address is a network address that is understood within the
address domain used by the NIO.  It is specific to a given physical
address family.  pa should contain the physical address of this NIO.
If this pa is given to another NIO which understands the same address
family, the pa should be sufficient to reach this NIO.
.SS Packet description (pktmax)
pktmax specifies the maximum size of a packet that can be sent or
received through this NIO.  pktmax must be greater than or equal
to 96.
.SS Sending (send)
A send operation involes a particular NIO, a physical address, and a
buffer which has a certain length.  The length will never exceed pktmax.
The NIO should deliver the buffer to another NIO designated by the given
physical address.
.LP
Either Media Net or the NIO can initiate a sending operation.  If send()
is non-null, Media Net will call send() whenever it has data to send
through the NIO.  If send() is null, then the NIO must call mnnPullBuf()
whenever it is ready to send.
.LP
send() should return the number of bytes sent on success; otherwise, it
may return one of the following errors:
.TP 20
MNERR_OVERFLOW
The NIO buffers are full.  This indicates to Media Net that it is sending
too fast.
.TP 20
MNERR_FAILURE
There was a system- or object-specific failure.
.SS Receiving (recv)
A receive operation involves a particular NIO and a buffer which has
a certain length.
.LP
If recv() is null, the NIO must initiate the receiving process.  The
NIO is expected to call mnnPushBuf() whenever it receives data; it is
assumed that it does so via an interrupt but is not required to do so.
If recv() is non-null, Media Net will initiate the receiving process
by calling recv().  However, the NIO may still be able to generate
an interrupt when data has arrived.  If so, the NIO should do nothing
more than set MNNFLG_DTR in the flags field during the interrupt.
.LP
When calling recv(), Media Net will pre-allocate a buffer to pass, and
len will contain the size of the allocated buffer (which will not be
less than pktmax).  If poll is TRUE, then recv() must not block, even
if no data is available; otherwise, recv() may block if no data is
available up until timeout milliseconds elapses.  If timeout is zero
(and poll is FALSE), recv() may block indefinitely.
.LP
When data arrives, recv() should write the physical address from which
the data was received into *pa.  Also, data should be transferred to
the buffer provided up to the number of bytes specified by len.
.LP
The NIO is allowed to drop packets if it runs out of buffer space for
incoming packets.
.LP
recv() should return the number of bytes actually transferred on success;
otherwise, it may return one of the following errors:
.TP 20
MNERR_WOULDBLOCK
poll is TRUE and there is no data available to read.
.TP 20
MNERR_INTR
A blocking read was interrupted. (e.g. by an I/O from another NIO).
.TP 20
MNERR_TIMEOUT
A timed blocking read timed out before data arrived.
.TP 20
MNERR_FAILURE
A system- or network-specific failure occurred.
.SS Closing (close)
close() is called when Media Net is finished using the NIO.
.SS Flags (flags)
The following flags serve to further describe the NIO; the flags field
is formed by ORing one or more of the following:
.TP 15
MNNFLG_SEND
the NIO is capable of sending data;
.TP 15
MNNFLG_RECV
The NIO is capable of receiving data;
.TP 15
MNNFLG_CKSM
The NIO implements its own checksum;
.TP 15
MNNFLG_INTR
The NIO can generate an O/S interrupt on data receipt;
.TP 15
MNNFLG_CIRC
The NIO is connected to a circuit link.
.LP
If NIO is capable of receiving and expects to use mnnPushBuf(), but not
during interrupts, then it should set MNNFLG_RECV, but not MNNFLG_INTR
and set recv to null.  If the NIO can generate an O/S interrupt, Media
Net will never issue a blocking read on the NIO.
.LP
If the NIO does not implement its own checksum, Media Net will implement
a checksum over the Media Net payload.
.LP
A circuit-switched link differs from a packet-switched link in that a
circuit-switched link is tied down to one peer for the lifetime of the
link.  Physical addresses passed to the send routine and returned from
the receive routine are ignored because the NIO can only send to or
receive from one place.
.LP
Whether the NIO is a circuit link or a packet link, it is expected to
implement its own framing; that is, a buffer given to an NIO on one
side of a link is expected to be delivered as is to Media Net on the
other side.  The buffer may not be split up over two receive operations
or concatenated with another buffer.
.SS Context (usrp, private)
The usrp pointer is reserved for use by the implementation of
the NIO.  The private pointer is reserved for use by Media Net.
.SH SEE ALSO
mnnPushBuf(4), mnnPullBuf(4), mnnSubnet(4), mnnTrace(4), mnnio_intro(4).
