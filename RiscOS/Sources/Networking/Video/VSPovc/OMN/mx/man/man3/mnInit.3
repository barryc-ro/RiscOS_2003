.TH mnInit 3 "13 December 1994"
.SH NAME
mnInit, mnAlive - initialize Media Net
.SH SYNOPSIS
.nf
#include <mn.h>
.LP
void mnInit(ub4 flags, mnLogger lfunc,
	mnnio **nios, ub4 nnio, mnnpa *gtwy,
	mnbv *bv, ub4 nbv, mnAlloc alloc, mnFree free,
	mnSpin spinfunc, void *usrp, ub4 interval);
.LP
boolean mnAlive(void);
.SH DESCRIPTION
mnInit() initializes the process for Media Net usage.  This involves
initializing the network interface objects, contacting the Media Net
gateway (if provided) to acquire Media Net addresses and initializing
the heap.  Because these operations may take some time, the ability
to establish a busy-wait function during initialization is provided.
.LP
The flags parameter is formed by ORing one or more of the following:
.TP 15
MNFLG_FORWARD
The node is allowed to forward packets, thus acting as a gateway
for other nodes.
.LP
If lfunc is non-null, it is used as a logging function where any
of the diagnostic functions listed below may be written.
.LP
nios and nnio describe an array of pointers to network interface
objects that are to be used by Media Net.
.LP
gtwy is the physical address of the nearest gateway that should
be contact.  gtwy must be a meaningful physical address to at
least one of the network interface objects provided.
.LP
bv, nbv, alloc, and free provide memory for Media Net.  bv and nbv
describe a fixed-sized (possibly discontiguous) heap that is to be
used for all Media Net internal processing.  alloc and free are
user-defined allocation and deallocation routines that are expected
to observe the same semantics as malloc() and free().  The alloc
and free routines are used for all RPC buffers that are returned
to the user.  Thus, if RPC is to be used, alloc and free routines
must be provided.  If no fixed-sized heap is provided, then the
alloc and free routines will be used for all Media Net memory.
However, if any of the network interface objects operates using
interrupts, Media Net requires that a fixed-size heap be provided.
.LP
spinfunc, usrp, and interval allow a busy-wait function to be set
up during initialization since Media Net may block while obtaining
addresses.  See mnSetBusyWait(3) for more information.
.LP
If mnInit() has already been called within the same process, it will
return silently without taking any action.
.LP
mnAlive() may be called to determine if Media Net has been initialized
in the process.
.SH DIAGNOSTICS
.TP
FATAL: memory manager initialization failure
If a buffer vector is provided, it was not valid; or no buffer vector
and no alloc and free routines were provided.
.TP
FATAL: insufficient heap size
A total heap size of at least 16k plus the maximum packet size of
each network interface object should be provided.
.TP
FATAL: context manager initialization failure
An internal problem was detected.  This should be reported.
.TP
FATAL: configuration check error
An internal problem was detected.  This should be reported.
.TP
FATAL: no NIO capable of receiving was found
At least one network interface object must be capable of receiving.
.TP
FATAL: could not contact address server
The address server was not reachable through the given gateway physical
address.
.TP
FATAL: minimum packet size (>=96)
A network interface object must have a minimum packet size of 96 bytes.
.TP
FATAL: out of memory
Main memory was exhausted.
.TP
FATAL: OMN_CWD must contain an absolute path name
The environment variable OMN_CWD was set but did not contain a valid
path name (one that begins with a slash (/)).
.SH ENVIRONMENT
.TP
OMN_CWD
The directory that should be set as the default for the process.
If not set, it defaults to slash (/).  If this environment variable
is not available (e.g. on client set-top box devices), the current
directory for the process is obtained through other mechanisms.
.SH SEE ALSO
mnSetBusyWait(3), mnTerm(3), mnrConfig(3), mn_intro(3), mnnio(4),
mznm(8).
