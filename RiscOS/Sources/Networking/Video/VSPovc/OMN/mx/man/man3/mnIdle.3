.TH mnIdle 3 "31 August 1994"
.SH NAME
mnIdle, mnWait, mnSetBusyWait - Media Net execution control
.SH SYNOPSIS
.nf
#include <mn.h>
.LP
ub4 mnIdle(void);
.LP
void mnWait(ub4 msec);
.LP
void mnSetBusyWait(mnSpin spinner, void *usrp, ub4 interval);
.SH DESCRIPTION
mnIdle() processes all pending Media Net events and then returns the number
of milliseconds until the next timed event is set to go off, or 0 if there
are no more timed events pending.
.LP
mnWait() blocks the caller until any Media Net event occurs or until
msec milliseconds elapses.  If msec is zero, mnWait() will block
indefinitely.  If there are events pending when this routine is called,
it returns immediately after processing these events.
.LP
mnSetBusyWait() establishes a busy-wait routine to be invoked periodically
by Media Net while it is blocked.  spinner is the routine to invoke.  It
will be passed usrp as its single argument.  The interval given is the time
in milliseconds to wait in between each call to the busy-wait routine.  If
spinner is null, then no busy-wait routine is called.  If interval is zero,
then the busy-wait routine is called as often as possible.
.LP
The spinner routine may return an MNSTS_ABORTED status to force Media Net
out of its blocked state.  This will abort a call that is blocked, but it
will not abort the associated operation.
.SH USAGE
Because Media Net is non-preemptive, clients of Media Net must periodically
yield control to Media Net to allow it to process any events that may have
occurred since the last time Media Net was called.  Normally, the initiation
of any operation will cause mnIdle() to be implicitly invoked.  However, if
a client is busy or cannot block, then it should ensure that mnIdle() is
called periodically to allow Media Net to continue to reliably communicate
with other nodes in the network.  Delays in calling this routine (directly
or indirectly) will manifest themselves as communication latencies, thus
allowing Media Net to adjust to whatever scheduling the client provides.
.LP
Asynchronous handlers set up by the client will only be invoked during
mnIdle(), and they will be invoked sequentially, one after
the other (although the order is dependent on the order in which the events
complete).  Therefore, asynchronous handlers will be triggered only at
well-known points and therefore do not have to worry about the usual
complications of asynchronous code.
.LP
In contrast to mnIdle(), which allows the client to control when Media
Net executes, a busy-wait routine allows Media Net to temporarily yield
control back to the client while it is blocked waiting for an event to
complete.  Note that this routine only executes if Media Net is allowed
to block the client, as with a synchronous operation or a semaphore wait.
.LP
Another common usage of a busy-wait routine is to install a busy-wait
routine temporarily in response to a user-generated interrupt (e.g. ctl-C).
This busy-wait routine will de-install itself and return an MNSTS_ABORTED
value, thus unblocking Media Net just the one time.
.SH SEE ALSO
mnInit(3), mnTimer(3), mn_intro(3).
