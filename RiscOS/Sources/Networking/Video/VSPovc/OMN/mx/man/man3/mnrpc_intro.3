.TH MNRPC_INTRO 3 "19 November 1994"
.SH NAME
mnrpc_intro - Media Net RPC
.SH DESCRIPTION
A remote procedure call (RPC) is a procedure call made to another process
in a network.  First, the client calls a routine to send a request to a
server.  Upon receipt of the request, the server calls a dispatch routine
to execute the procedure, and then sends back a reply.
.LP
Each server is said to implement a "program" or "service".  Every program
is broken down into a number of components which correspond to individual
interface specifications.  A program is the result of a particular
amalgamation of some set of components and their corresponding
implementations.
.SS Program Identifiers
All programs and all components are identified by a globally unique
identifier.  A program identifier is described by the following structure:
.LP
.RS
.nf
#include <mnr.h>
.LP
struct mnrid
{
  ub1 id[8];	/* unique identifier */
  ub4 vers;	/* version number */
};
.fi
.RE
.TP
Identifier (id)
This eight-byte string must be unique among all programs and components.
The mnrid(1) utility may be used to generate such identifiers.
.TP
Version (vers)
Multiple versions of the same program or component may exist concurrently.
To distinguish among them, a version is included in the identifier.  The
version number consists of a major version number and a release.  Different
major versions generally indicate incompatible interface changes.  Different
releases represent upward-compatible interface changes.
.LP
Some macros are defined that facilitate the manipulation of version numbers:
.LP
.RS
.nf
MNVERS(ub2 version, ub2 release)
MNGETVERS(ub4 versnum)
MNGETRELS(ub4 versnum)
.fi
.RE
.LP
where version refers to the major version number, release refers to the
release number, and versnum refers to combination of the two (as it appears
in the mnrid structure).  MNVERS() returns a versnum, MNGETVERS() returns
a version, and MNGETRELS() returns a release.
.SH ROUTINES
The Media Net RPC run-time library has been grouped by usage as follows:
.SS Routines for RPC clients
.nf
.ta +20n; +20n; +10n
Routine	Appears on Page	Description
mnrCall	mnrCall(3)	make an RPC call
mnrFindServer	mnrFindServer(3)	find a server
mnrMakeHandle	mnrMakeHandle(3)	make a binding handle
mnrFreeHandle	mnrFreeHandle(3)	free a binding handle
mnrGetServerAddr	mnrGetServerAddr(3)	get server address
.fi
.SS Routines for RPC servers
.nf
Routine	Appears on Page	Description
mnrCreateServer	mnrCreateServer(3)	create a server
mnrDestroyServer	mnrCreateServer(3)	destroy a server
mnrRegister	mnrRegister(3)	register a server
mnrUnregister	mnrRegister(3)	unregister a server
mnrGetAddr	mnrGetAddr(3)	get server address
mnrGetUsrp	mnrGetAddr(3)	get server context
mnrAddComp	mnrAddComp(3)	add a component
mnrRemComp	mnrAddComp(3)	remove a component
mnrGetCompUsrp	mnrAddComp(3)	get component context
mnrMainLoop	mnrMainLoop(3)	server main loop
mnrTermLoop	mnrMainLoop(3)	terminate server main loop
.fi
.SS Routines for manipulating calls in servers
.nf
Routine	Appears on Page	Description
mnrListen	mnrListen(3)	listen for next RPC request
mnrAllow	mnrAllow(3)	allow new context-based clients
mnrDisallow	mnrAllow(3)	disallow new context-based clients
mnrGetNextCall	mnrGetNextCall(3)	get next RPC request
mnrDispatchCall	mnrGetNextCall(3)	dispatch RPC request
mnrReturnCall	mnrReturnCall(3)	send an RPC reply
mnrGetPeer	mnrGetPeer(3)	get client address
mnrGetHandle	mnrGetHandle(3)	get server handle
.fi
.SS Routines for manipulating contexts in servers
.nf
Routine	Appears on Page	Description
mnrCtxCreate	mnrCtxCreate(3)	create a client context
mnrCtxDestroy	mnrCtxCreate(3)	destroy a client context
mnrCtxGet	mnrCtxCreate(3)	get a client context
mnrCtxId	mnrCtxCreate(3)	get a client context id
mnrConvertId	mnrCtxCreate(3)	convert a context id to a context
.fi
.SS Miscellaneous RPC routines
.nf
Routine	Appears on Page	Description
mnrConfig	mnrConfig(3)	control memory allocation
mnrIdCmp	mnrIdCmp(3)	RPC identifier comparison
.SH SEE ALSO
mnrid(1), mnx(3), Writing Clients and Servers.
