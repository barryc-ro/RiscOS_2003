.TH mnx 3 "31 August 1994"
.SH NAME
mnx - marshalling and unmarshalling data
.SH SYNOPSIS
.nf
#include <mn.h>
#include <mnx.h>
.SH DESCRIPTION
mnx routines allow data structures to be represented in a machine-independent
format, primarily for use with communication with network protocols, such
as Media Net RPC.
.LP
A marshalling descriptor is used to encode or decode the data between its
structured machine form and a buffer vector which contains the data in
a flattened, machine-independent format.
.LP
In all the routines below, xstr is a marshalling descriptor returned by
mnxCreate().
.SS Administrative Routines
These routines are used for the administration of a marshalling descriptor.
.LP
.nf
mnx *mnxCreate(mndrp *peer, mnxDirection dir,
		mnbv **bv, ub4 *nbv, void *usrp);
.fi
.LP
.RS
mnxCreate() creates the marshalling descriptor.  dir specifies the
direction of the translation (either MNXDIR_ENCODE or MNXDIR_DECODE).
usrp is a user-defined context pointer that is available within
a user-defined marshalling routine through mnxGetUsrp().
.LP
peer is a descriptor of the data-representation format used by
the peer.  This argument is not yet supported and should be null.
.LP
When encoding, a pointer to the buffer vector being created is
written to *bv and the number of buffers in the vector is written
to *nbv.  These pointers must remain valid during the entire encoding
process.
.LP
When decoding, *bv must point to the buffer vector that is to be
decoded.  *nbv must indicate the number of buffers in the vector.
These values must remain unchanged during the entire decoding process.
.LP
If successful, mnxCreate() returns a pointer to a marshalling descriptor;
otherwise, a null pointer is returned.
.RE
.LP
.nf
void mnxDestroy(mnx *xstr, boolean free);
.fi
.LP
.RS
mnxDestroy() frees all resources associated with the marshalling
descriptor.  If free is TRUE, then the buffer vector created by or passed
to mnxCreate() is also freed.  Decoding a buffer vector is a
non-destructive process and so, it may be repeated by retaining the
buffer vectors and calling mnxCreate() to restart.
.RE
.LP
.nf
ub4 mnxGetDir(mnx *xstr);
.fi
.LP
.RS
mnxGetDir() returns the direction of the translation set when the
marshalling descriptor was created.
.RE
.LP
.nf
void *mnxGetUsrp(mnx *xstr);
.fi
.LP
.RS
mnxGetUsrp() returns the user pointer passed to mnxCreate().
.RE
.LP
.nf
void mnxFree(mnxFunc xfunc, void *ptr);
.fi
.LP
.RS
mnxFree() frees the object pointed to by ptr.  xfunc is the marshalling
routine for the object.  The pointer passed to this routine is not freed,
but what it points to is freed recursively.
.RE
.SS Scalar Routines
Scalar marshalling routines translate between scalar values and their
machine-independent formats.  All of these routines return TRUE if they
are successful; FALSE, otherwise.  A routine may be unsuccessful during
encoding if memory is exhausted.  During decoding, a routine may fail if
the buffer vector ends prematurely.
.LP
.nf
boolean mnxB1(mnx *xstr, ub1 *val);
.fi
.LP
.RS
A marshalling routine that translates between an unsigned byte and its
external value.
.RE
.LP
.nf
boolean mnxB2(mnx *xstr, ub2 *val);
.fi
.LP
.RS
A marshalling routine that translates between an unsigned two-byte
integer and its external value.
.RE
.LP
.nf
boolean mnxB4(mnx *xstr, ub4 *val);
.fi
.LP
.RS
A marshalling routine that translates between an unsigned four-byte
integer and its external value.
.RE
.LP
.nf
boolean mnxSB1(mnx *xstr, sb1 *val);
.fi
.RS
A marshalling routine that translates between a signed byte and its
external value.
.RE
.LP
.nf
boolean mnxSB2(mnx *xstr, sb2 *val);
.fi
.RS
A marshalling routine that translates between a signed two-byte
integer and its external value.
.RE
.LP
.nf
boolean mnxSB4(mnx *xstr, sb4 *val);
.fi
.RS
A marshalling routine that translates between a signed four-byte
integer and its external value.
.RE
.LP
.nf
boolean mnxChar(mnx *xstr, char *val);
.fi
.RS
A marshalling routine that translates between a character and its
external value.
.RE
.LP
.nf
boolean mnxBoolean(mnx *xstr, boolean *val);
.fi
.RS
A marshalling routine that translates between a boolean value and
its external value.
.RE
.SS Complex Routines
Complex routines translate between structured data and their
machine-independent formats.  All of these routines return TRUE if
they are successful; FALSE, otherwise.  A routine may be unsuccessful
during encoding if memory is exhausted.  During decoding, a routine
may fail if the buffer ends prematurely.
.LP
.nf
boolean mnxAddr(mnx *xstr, mna *addr);
.fi
.LP
.RS
A marshalling routine that translates between a Media Net address and
its external value.
.RE
.LP
.nf
boolean mnxArray(mnx *xstr, void **array, ub4 *nelm,
		ub4 maxelm, size_t elmsz, mnxFunc xfunc);
.fi
.LP
.RS
A marshalling routine that translates between a variable-length array
and its external value.
.LP
When encoding, *array must point to the array to be encoded; *nelm
must indicate the number of elements in the array.
.LP
When decoding, if *array is not null, the array is decoded into the
space pointed to by *array.  If *array is null, space for the array
is dynamically allocated and a pointer to the space is written to
*array.  The number of elements unmarshalled is returned in *nelm.
.LP
When marshalling, the lesser of the number of elements in the array
and maxelm is translated.  If maxelm is zero, then the entire array
is translated.
.LP
elmsz is the size in bytes of each element of the array in its native
format.  xfunc is the marshalling routine used to translate each element.
.RE
.LP
.nf
boolean mnxOpaque(mnx *xstr, ub1 *buf, size_t len);
.fi
.LP
.RS
A marshalling routine that translates between a fixed-size opaque buffer
and its external representation.  buf must be a pre-allocated buffer of
len bytes.
.RE
.LP
.nf
boolean mnxString(mnx *xstr, char **str, size_t maxsz);
.fi
.LP
.RS
A marshalling routine that translates between a null-terminated string
and its external value.
.LP
When encoding, *str must point to a null-terminated string.
.LP
When decoding, if *str is not null, the string is decoded into the
space pointed to by *str.  If *str is null, space for the string is
dynamically allocated and a pointer to the space is written to *str.
.LP
When marshalling, the string is translated up to the lesser of the
length of the string (including the null terminator) or maxsz.  If
maxsz is zero, then the entire string is translated.
.RE
.LP
.nf
boolean mnxDynStr(mnx *xstr, char **str);
.fi
.LP
.RS
mnxDynStr() is equivalent to mnxString() invoked with a maxsz of 0.
For purposes of decoding, the initial value of *str is always treated
as if it were null (meaning that space will always be dynamically
allocated).  This routine is useful because mnxString() is not
compatible with the type of a generic marshalling function passed
to other marshalling routines.
.RE
.LP
.nf
boolean mnxPointer(mnx *xstr, void **ptr, size_t objsz,
		mnxFunc xfunc);
.fi
.LP
.RS
A marshalling routine that serializes pointers.  objsz is the size
in bytes of the object in its native form.  xfunc is the
marshalling routine used to translate the object referenced by
the pointer.
.LP
When encoding, *ptr must point to the object.  When decoding, a
pointer to the object created is written to *ptr.
.LP
mnxPointer() will handle null pointers and aliased pointers.
However, pointers that point into the middle of objects will
be treated as pointing to separate objects.
.RE
.LP
.nf
struct mnxArm
{
  sb4     tag;		/* tag to match for this arm */
  mnxFunc xfunc;	/* marshalling routine */
};
.LP
boolean mnxUnion(mnx *xstr, sb4 *tag, void *unionval,
		mnxArm *arms, mnxFunc dflt);
.fi
.LP
.RS
A marshalling routine that translates between a discriminated
union and its external value.
.LP
unionval points to the union object.  arms is an array of the
marshalling routines that translate each possible arm in the
union.  The array is terminated by an arm with a null value
for xfunc.  When translating, the arm selected is the one
whose tag value matches the one for the union object.  If no
arm matches, then the dflt routine is chosen.  The dflt routine
may be null.
.LP
When encoding, *tag is the tag of the arm to encode.  When
decoding, the tag value of the decoded arm is written to *tag.
.RE
.LP
.nf
struct mnxStream
{
  void   *(*alloc)(mnxStream *stream, size_t sz);
  sb4     (*push)(mnxStream *stream, void *ptr);
  boolean (*pull)(mnxStream *stream, void **ptr);
  void    (*close)(mnxStream *stream, sb4 sts);

  size_t  elmsz;
  mnxFunc xfunc;
  void   *usrp;
  voi    *private;
};
.LP
boolean mnxOutStream(mnx *xstr, mnxStream *stream);
.fi
.RS
.LP
A marshalling routine that encodes or decodes an outbound stream
object.  A stream object is similar to a byte stream except that
the elements of a stream object are themselves structured data.
An outbound stream object is one in which the server receiving
the stream object "pushes" data towards the client as part of
the reply.  The pull routine is ignored for outbound stream
objects.
.LP
When encoding an outbound stream object (a client-side operation),
an alloc and a close routine must be defined.  A push routine may
optionally be defined.  For each element pushed by the server,
the alloc routine will be invoked to allocate space for the
element.  Then, the element will be decoded into that space.
Then, if a push routine is defined, it will be invoked with
a pointer to the element that was just decoded.  This cycle is
repeated for element pushed by the server.  When the server
closes the stream, the close routine will be invoked on the client
to indicate the end of the stream.  The push routine may return a
negative result to cause the stream to be prematurely broken.  The
alloc routine may return null if no more memory could be allocated.
The sts argument passed to the close routine will indicate the reason
for closing, a 0 indicating a normal, successful completion.
.LP
When decoding an outbound stream object (a server-side operation),
mnxOutStream() will initialize the stream object with a push
routine and a close routine that may be called by the server routine
to push elements to the client.  The push routine should be invoked
once for each element that is to be sent to the client.  ptr should
point to the element that is to be translated.  The push routine will
return 0 on success or MNERR_BROKEN if the element could not be sent.
When no more elements are to be sent, the server should invoke the
close routine to terminate the stream.
.LP
Whether encoding or decoding, the elmsz and xfunc fields must be
initialized to contain the size of the element in bytes in its
native format and the marshalling routine that will translate the
element, respectively.  The usrp field is reserved for application
use.  The private field is used by Media Net and must not be modified
by the application.
.RE
.SS User-defined Marshalling Routines
Some complex marshalling routines require that another marshalling
routine be provided.  Any marshalling routine, including a user-defined
one, may be provided so long as it is compatible with the following
prototype:
.LP
.RS
.nf
typedef boolean (*mnxFunc)(mnx *xstr, void *buf);
.fi
.RE
.LP
If no particular action is to be taken, but a marshalling routine
is required, mnxVoid() may be used.
.LP
.RS
.nf
boolean mnxVoid(mnx *xstr, void *buf);
.fi
.RE
.LP
The buf argument is ignored.  mnxVoid() always returns TRUE.
.SH SEE ALSO
mnrCall(3), mnrDispatchCall(3).
.SH BUGS
The peer argument to mnxCreate() is currently ignored.
