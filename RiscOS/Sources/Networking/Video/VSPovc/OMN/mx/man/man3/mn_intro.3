.TH MN_INTRO 3 "13 December 1994"
.SH NAME
mn_intro - introduction to the Media Net API
.SH DESCRIPTION
Media Net is a communication protocol for distributed applications running
in heterogeneous networking environments.  It implements two basic forms of
data transport: message-based and stream-based.  Media Net RPC allows a
procedure call from to be made to a remote process.  Media Net also includes
an address server, which handles dynamic address assignment and routing
functions, a name server, which provides a system-wide directory of names
that may be consulted to locate remote processes, and a process server,
which allows multi-instance RPC-based servers to be managed.
.LP
All Media Net users must include <mn.h>.  Initialization code and
implementations of network interface objects will also require <mnnio.h>.
RPC clients must include <mnrc.h>.  RPC servers must include <mnrs.h>.
Users who wish to use marshalling routines directly without RPC must
include <mnx.h>.
.SH DEFINITIONS
.SS Addresses
A Media Net address is a 64-bit string used by Media Net to identify
the location of a port.  Media Net addresses are generally assigned by
an address server and not directly manipulated by users.  These addresses
are independent of underlying physical addresses.
.SS Asynchronous Operation
Media Net operations are procedures which can take an extended period of
time, almost always because they involve network communication.  These
operations are easily recognized because the routines which begin such
operations always include two parameters of the form:
.LP
.RS
.nf
mnHandler handler, void *usrp
.fi
.RE
.LP
The operation may be performed synchronously by passing null values for
both of these parameters.  A synchronous operation will block the caller
until the operation completes.  An asynchronous operation will return to
the caller as soon as the operation is started.  Notification of the
completion of an operation is performed either through a semaphore or
through a handler.  To use a semaphore, handler must be null and usrp must
be a semaphore created with mnSemAlloc().  To use a handler, handler must
be a function pointer to the handler to be invoked.  To start an
asynchronous operation whose result can be ignored, the pre-defined handler
mnDiscard(3) may be used.
.LP
Buffers which will be written to by the completion of the operation
must remain valid for as long as the operation is still pending,
or until the associated semaphore is freed.
.SS Buffer Vector
A buffer vector is a description of a discontiguous buffer.  It is
formed by an array of mnbv structures:
.LP
.RS
.nf
struct mnbv
{
  size_t len;
  ub1   *buf;
};
.fi
.RE
.LP
For each element in the array, buf points to a buffer of len bytes.
Various Media Net operations will scatter or gather data to and from
a buffer vector.
.SS Handler
A handler is a completion routine invoked when an asynchronous operation
started with a handler completes.  The handler must have the following
type:
.LP
.RS
.nf
typedef void (*mnHandler)(void *usrp, sb4 val);
.fi
.RE
.LP
When the handler is invoked, it is passed the same usrp value that was
given when the operation was started.  val will be the final status of
the operation.  The possible values are operation-dependent.
.SS Marshalling
Marshalling and unmarshalling data refers to the conversion of data
between its native form in memory and a form suitable for transport
over a network, possibly in a heterogeneous computing environment.
.SS Messages
A message is a discrete unit of data of arbitrary length.  A message
is sent and received as a single entity.  The Media Net message
protocol provides for the reliable transport of these messages.
See mnmsg(4P).
.SS Network Interface Object
A network interface object is an abstraction of the data link that
Media Net uses to transport data over.  It includes read and write
operations that may fail.  Media Net compensates for this by implementing
a reliable protocol over unreliable data links.  See mnnio(4).
.SS Physical Address
A physical address family identifies a particular type of network-specific
address domain.  The physical address itself is opaque to Media Net and is
understood only by the various network interface objects that support a
given physical address family.  A physical address may only be physical
in its relation to Media Net; for instance, an IP address and UDP port
number make a "physical" address to Media Net.  See mnnio(4).
.SS Port
A port is an endpoint of communication.  Ports are opened by processes
to either send or receive data.  Two communication protocols are supported
through ports:  messages and streams.
.SS Remote Procedure Call
A remote procedure call is a procedure call that is made to a remote
process.  Remote procedure calls are a useful high-level abstraction
of the message and stream protocols.  See mnrpc_intro(3).
.SS Semaphore
A semaphore is an object that will be set when an operation completes.
This is an alternative form to using handlers to execute and track
asynchronous operations.  Semaphores allow several concurrent operations
to be started and then resynchronized at some later point.  See mnsem(3).
.SS Streams
A stream is an infinite sequence of data that is transported in
pieces.  The Media Net stream protocol provides for the reliable
transport of these streams.  See mnstr(4P).
.SH ERROR CODES
.nf
.ta +25n; +10n; +10n
MNSTS_NORMAL	0	normal, successful completion
MNSTS_UNKNOWN	-1	initial semaphore status
MNSTS_ABORTED	-2	blocking operation aborted
MNSTS_EOS	-3	end of stream reached
MNSTS_TERMINATE	-4	the process was terminated
MNERR_FAILURE	-1001	system- or NIO- specific failure
MNERR_OVERFLOW	-1002	network interface object overflow
MNERR_WOULDBLOCK	-1003	operation would block
MNERR_TIMEOUT	-1004	operation timed out
MNERR_OUTMEM	-1005	out of memory
MNERR_BADPARAM	-1006	bad parameter
MNERR_TRUNCATE	-1007	packet would be truncated
MNERR_BROKEN	-1008	communication broken
MNERR_BADADDR	-1009	bad destination address
MNERR_BADPROTO	-1010	protocol mismatch with destination
MNERR_ALREADY	-1011	already connected or in use
MNERR_NOTCONN	-1012	not connected
MNERR_DISCONN	-1013	forcibly disconnected
MNERR_NOSUCHOPER	-1014	no such operation
MNERR_NOTFOUND	-1015	not found
MNERR_DUPLICATE	-1016	duplicate detected
MNERR_CTXEXP	-1017	space for context handle expected
MNERR_NOTINIT	-1018	not initialized
.SH SEE ALSO
mnInit(3), mnrpc_intro(3), mnx(3), mnnio_intro(4), mnars(8), mznm(8).
.SH UTILITIES
mnls(1), mnping(1).
.SH LIST OF CALLS
.nf
.ta +17n; +17n; +10n
Routine	Appears on Page	Description
mnInit	mnInit(3)	initialize Media Net
mnAlive	mnAlive(3)	test to see if Media Net is initialized
mnTerm	mnTerm(3)	terminate Media Net
mnGetCwd	mnGetCwd(3)	get current working directory
mnVersion	mnVersion(3)	get Media Net version
mnTimer	mnTimer(3)	establish a timer
mnIdle	mnIdle(3)	allow Media Net to process events
mnWait	mnIdle(3)	wait for an event
mnSetBusyWait	mnIdle(3)	control behavior during blocking
mnDiscard	mnDiscard(3)	asynchronous handler for discard results
mnSetSndBuf	mnSetSndBuf(3)	set send buffer size
mnSetRcvBuf	mnSetRcvBuf(3)	set receive buffer size
mnaClear	mna(3)	clear a Media Net address
mnaCopy	mna(3)	copy a Media Net address
mnaNetCopy	mna(3)	copy the network part of a Media Net address
mnaEq	mna(3)	compare two addresses
mnaNetEq	mna(3)	compare the network parts of two addresses
mnAddr	mna(3)	convert a string to a Media Net address
mnAtos	mna(3)	convert a Media Net address to a string
mnError	mnError(3)	convert error to text
mnLastError	mnError(3)	get last error that occurred
mnnPullBuf	mnnPullBuf(4)	pull a buffer from Media Net
mnnTestBuf	mnnPullBuf(4)	test for a buffer from Media Net
mnnPushBuf	mnnPushBuf(4)	push a buffer into Media Net
mnnSubnet	mnnSubnet(4)	get the network address for an NIO
mnnTrace	mnnTrace(4)	packet tracing
mnSemAlloc	mnsem(3)	allocate a semaphore
mnSemFree	mnsem(3)	free a semaphore
mnSemSetUsrp	mnsem(3)	associate a user pointer
mnSemGetUsrp	mnsem(3)	get a user pointer
mnSemTest	mnsem(3)	test a semaphore
mnSemGroupTest	mnsem(3)	test a group of sempahores
mnSemWait	mnsem(3)	wait on a semaphore
mnSemOrW	mnsem(3)	wait on a group of semaphores
mnSemAndW	mnsem(3)	wait on a group of semaphores
mnSet	mnsem(3)	set a semaphore
mnOpen	mnOpen(3)	open a port
mnClose	mnClose(3)	close a port
mnGetAddr	mnGetAddr(3)	get a port address
mnGetPeer	mnGetPeer(3)	get a peer address
mnGetOptions	mnGetOptions(3)	get port options
mnSetOptions	mnSetOptions(3)	set port options
mnSend	mnSend(3)	send a message
mnSendV	mnSend(3)	send a message
mnRecv	mnRecv(3)	receive a message
mnRecvV	mnRecv(3)	receive a message
mnRecvWait	mnRecv(3)	wait for a message
mnRecvTest	mnRecv(3)	test for a message
mnListen	mnListen(3)	listen for a connection
mnAccept	mnAccept(3)	accept a connection
mnConnect	mnConnect(3)	initiate a connection
mnRead	mnRead(3)	read data
mnWrite	mnWrite(3)	write data
mznBind	mznBind(3)	bind a name to a port
mznFind	mznBind(3)	find a named port
mznUnbind	mznBind(3)	unbind a name from a port
mznInsEntry	mznInsEntry(3)	insert an entry in the name server
mznFndEntry	mznInsEntry(3)	find an entry in the name server
mznDelEntry	mznInsEntry(3)	delete an entry from the name server
mznQuery	mznInsEntry(3)	query an entry
mznxEntry	mznInsEntry(3)	marshal a name server entry
