.TH mznInsEntry 3 "20 October 1994"
.SH NAME
mznInsEntry, mznFndEntry, mznDelEntry, mznQuery - manage name server entries
.SH SYNOPSIS
.nf
#include <mn.h>
#include <mzn.h>
.LP
sb4 mznInsEntry(mznent *entry);
.LP
sb4 mznFndEntry(const char *name, const mnrid *id,
	mznent *entry);
.LP
sb4 mznDelEntry(const char *name, const mnrid *id);
.LP
sb4 mznQuery(const char *name, ub4 qt, mnxStream *stream);
.LP
boolean mznxEntry(mnx *xstr, void *entryp);
.SH DESCRIPTION
entry is a descriptor of a name service entry defined as follows:
.LP
.RS
.nf
struct mznent
{
  const char  *name;      /* name of entry */
  const mnrid *id;        /* program identifier */
        mna    addr;      /* address for entry */
        mnbv  *attr;      /* attribute list */
        ub4    nattr;     /* number of attributes */
};
.fi
.RE
.LP
See mznm(8) for a complete description of the fields in this structure.
.LP
mznInsEntry() inserts the given entry into the name server.  If the
entry has no program identifier associated with it, the id field in
entry must be null.  The name of the entry must be unique within the
name server unless a program identifier is given, in which case the
combination of the name and the program identifier must be unique.
However, the same name may not be inserted both with and without a
program identifier.
.LP
mznFndEntry() searches for an entry in the name server.  If id is null,
an entry is searched for by name.  If the entry identifies a program,
then the latest version of the program is the one chosen.  If id is
non-null, then the entry is searched by the combination of name and
program identifier and must match exactly.  If an entry is located,
its descriptor is written to entry.
.LP
mznDelEntry() deletes an entry from the name server.  The rules
for finding the entry are the same as those for mznFindEntry().  If
deleting an entry that identifies a program, a program identifier
must be given.  Only the entry that exactly matches the program
identifier is deleted.
.LP
mznQuery() queries the name server for one or more entries.  Entries
are located based on a combination of name and qt.  name is a regular
expression that is tested against each entry in the name server.  If
name is null, then all entries that meet the requirements of the qt
parameter are selected.
.LP
The qt parameter is formed by ORing one or more of the following:
.TP 20
MZN_PORTS
Include entries for named ports.
.TP 20
MZN_PROGRAMS
Include entries for registered programs.  Only the latest version
of each registered program is included.
.TP 20
MZN_ALL_PROGRAMS
Include entries for all registered programs.  Older versions of
registered programs are included.
.TP 20
MZN_ALL_NAMES
Include all entries.
.LP
stream defines the stream object that is used to be used to return
the results of the query.  Each entry that matches the query will
be pushed by the name server as an individual element.  It is the
caller's responsibility to free the entry object passed to the push
routine.
.LP
mznxEntry() is the marshalling routine for the mznent structure.
.SH USAGE
mznInsEntry(), mznFndEntry(), and mznDelEntry() are not generally
used directly.  They are implicitly called by routines which manage
named ports (see mznBind(3)) and routines which manage RPC server
registration (see mnrRegister(3)).
.LP
Memory may be allocated to hold some fields in the descriptor written
by mznFndEntry().  To free this memory, use mnxFree(3) with entry as
the pointer to the object and mznxEntry() as the freeing routine.  For
example,
.LP
.RS
.nf
mznent entry;
.LP
if (mznFindEntry("some-name", (mnrid *) 0, &entry) == 0)
  {
	/* ... do some processing ... */
	mnxFree(mznxEntry, &entry);
  }
.fi
.RE
.LP
mznxEntry() may be used to explicitly marshal or unmarshal mznent
structures.  Also, to free the fields of an entry object, this
routine may be passed to mnxFree().  Note that the entry object
itself will not be created or freed by this routine.
.SH RETURN VALUES
On success, mznInsEntry(), mznFndEntry(), and mznDelEntry() return 0.
mznQuery() returns the number of entries that were selected.
Otherwise, one of the following errors will be returned:
.TP 20
MNERR_BROKEN
Communication with the name server failed.
.TP 20
MNERR_DUPLICATE
Duplicate entry; the indicated name is already registered.
.TP 20
MNERR_NOTFOUND
The indicated name was not found.
.TP 20
MNERR_OUTMEM
Sufficient resources could not be allocated.
.SH SEE ALSO
mznBind(3), mznRegister(3), mnx(3), mznm(8).
.SH BUGS
Attributes are not yet supported.
.LP
Regular expressions are not yet supported in mznQuery().
