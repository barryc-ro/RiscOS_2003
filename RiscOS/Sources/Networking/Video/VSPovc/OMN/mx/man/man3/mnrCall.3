.TH mnrCall 3 "3 November 1994"
.SH NAME
mnrCall - Media Net RPC Call
.SH SYNOPSIS
.nf
#include <mn.h>
#include <mnrc.h>
.LP
sb4 mnrCall(mnrb *bh, void **ch, const char *oper,
	mnbv *inargs, ub4 incnt, mnbv **outargs, ub4 *outcnt,
	mnHandler handler, void *usrp);
.SH DESCRIPTION
bh is a binding handle created with mnrFindServer() or mnrMakeHandle().
mnrCall() is used to make an RPC call to the server identified by the
binding handle.
.LP
The remote procedure is identified by the name given in oper.  The format
of the operation name is
.LP
.RS
[ <component-name> . ] <procedure-name>
.RE
.LP
If no component name is given, the procedure name is resolved against all
components supported by the server.  The name of a component may be provided
to disambiguate a procedure name that may not be unique within the server.
.LP
The arguments passed to the remote procedure are contained in the buffer
vector described by inargs and incnt.  The returned values are stored
in a buffer vector pointed to by *outargs upon return.  *outcnt will
indicate the number of elements in the buffer vector.  Both the arguments
and returned values are suitable for use with the Media Net marshalling
routines (see mnx(3)).  The buffer vector is allocated by these routines
and must be freed by the caller.
.LP
Normally, the call operation is completed when a reply from the server is
received.  If no reply is expected, then outargs and outcnt should be
null.  The operation will complete as soon as the server receives the
call.
.LP
If the remote procedure uses a context handle or creates one, ch must
point to valid storage where the context handle may be retrieved or
written.  If the remote procedure creates a context handle, *ch must
initially be null; upon return, it will contain a newly-created
context handle returned by the server.  For each subsequent call made
within the same context, *ch should point to the same context handle.
When the context handle is no longer required by the server, *ch
will be set back to null upon completion of the operation.
.LP
mnrCall() may be invoked in a synchronous or asynchronous
manner using handler and usrp.  When invoked in an asynchronous manner,
the space pointed to by outargs, outcnt, and ch must remain valid until
the operation is completed.
.SH USAGE
If communication with the server fails, the binding handle will be
invalidated.  All subsequent attempts to use the binding handle will
report a communication failure immediately.  A new binding handle may
be created with mnrFindServer(), but all open contexts and pending
calls will be lost.
.LP
There is no correlation between the shape of the buffer vector being
sent and the one received by the server; similarly, there is no
correlation between the shape of result argument buffer vector created in
the server and the shape of the buffer vector seen by the client.  They
will of course contain the same data.
.SH RESULT VALUES
On successful completion of the operation, the result status will be a
non-negative integer.  Otherwise, one of the following errors may be
reported:
.TP 20
MNERR_BROKEN
Communication with the server failed.
.TP 20
MNERR_CTXEXP
A context handle was expected.  The server either tried to create or
use a context handle and ch was null.
.TP 20
MNERR_NOSUCHOPER
The operation identified by the name is not defined by the server
that was called.
.TP 20
MNSTS_ABORTED
The binding handle through which this call was made has been
freed prior to the completion of the call.
.SH RETURN VALUES
In synchronous mode, the routine itself will return either the result
of the operation as indicated above, or one of the following additional
errors:
.TP 20
MNERR_OUTMEM
Sufficient resources could not be allocated.
.TP 20
MNSTS_ABORTED
The blocking operation was aborted.
.LP
In asynchronous mode, the routine itself will return 0 if the operation
is successfully started, or
.TP 20
MNERR_OUTMEM
Sufficient resources could not be allocated.
.SH SEE ALSO
mnrFindServer(3), mnrFreeHandle(3), mnrMakeHandle(3).
