/* Copyright (c) 1994, 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ysm.h - OMX Memory Management
 */

#ifndef YSM_ORACLE
#define YSM_ORACLE

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YSID_ORACLE
#include <ysid.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif

EXTC_START

externref ysidDecl(YS_EX_OUTMEM);

/*
 * ysmCreate, ysmDestroy - create & destroy a heap
 *
 * ysmCreate() creates a heap based either on a set of supplied
 * memory management functions or on a fixed pool of memory managed
 * by the ysm facility.  In either case, the semantics defined by this
 * interface are enforced by ysm.  If functions are supplied, af, rf,
 * and ff must all be provided, and bv and nbv must be null.  These
 * functions must observe the semantics of malloc(), realloc(), and
 * free(), respectively.  If a fixed pool is supplied, af, rf, and ff
 * must be null, and bv and nbv must describe the memory to be used.
 *
 * On success, a handle to the heap is returned.  The heap is created
 * with no articifial limit (unless a fixed pool is provided, in which
 * case the limit is the total size of the pool), and an allocation
 * failure mode that will cause an exception to be thrown.
 *
 * If creation fails, the routine throws one of the following exceptions:
 *   YS_EX_BADPARAM - one or more parameters was invalid
 *   YS_EX_OUTMEM   - insufficient space to complete initialization
 *
 * ysmDestroy() will destroy the heap previously created by ysmCreate().
 * If the heap is function-based, it will NOT destroy any still-allocated
 * blocks obtained directly from the heap.  If the heap is pool-based,
 * the original buffer vector may be released following the completion
 * of this routine.
 */
ysmhp *ysmCreate(ysmaf af, ysmrf rf, ysmff ff, ysbv *bv, sword nbv);
void   ysmDestroy(ysmhp *hp);

/*
 * ysmAlloc, ysmGlbAlloc - allocate memory
 *
 * SYNOPSIS
 * dvoid *ysmAlloc(ysmhp *hp, size_t len, CONST char *tag);
 * dvoid *ysmGlbAlloc(size_t len, CONST char *tag);
 *
 * DESCRIPTION
 * ysmAlloc() allocates a block of memory of size len from the heap hp.
 * ysmGlbAlloc() performs the same function using the global heap.  The
 * memory returned is aligned to the strictest alignment of the platform.
 * The allocation will obey the heap limit set (if any).  If allocation
 * fails, the routine may either return a null pointer or throw an
 * exception depending on the selected behavior of the heap.
 */
dvoid *ysmAlloc(ysmhp *hp, size_t len, CONST char *tag);
#define ysmGlbAlloc(len, tag)  ysmAlloc(ysmGlbHeap(), (len), (tag))

/*
 * ysmRealloc, ysmGlbRealloc - reallocate memory
 *
 * SYNOPSIS
 * dvoid *ysmRealloc(ysmhp *hp, dvoid *ptr, size_t len);
 * dvoid *ysmGlbRealloc(dvoid *ptr, size_t len)
 *
 * DESCRIPTION
 * ysmRealloc() changes the size of the block denoted by ptr to the
 * size len and returns a pointer to the possibly moved block.  The
 * contexts will be unchanged up to the lesser of the old and new
 * sizes.  If ptr is null, then this behaves just like ysmAlloc().
 * If unable to honor the request, the old block is left unchanged,
 * and the default heap behavior is taken.  ysmGlbRealloc() performs
 * the same function using the global heap.  The results are unpredictable
 * if a different heap is used for reallocation than the one used for
 * allocation of the block.
 */
dvoid *ysmRealloc(ysmhp *hp, dvoid *ptr, size_t len);
#define ysmGlbRealloc(ptr, len)  ysmRealloc(ysmGlbHeap(), (ptr), (len))

/*
 * ysmFree, ysmGlbFree - free memory
 *
 * SYNOPSIS
 * void ysmFree(ysmhp *hp, dvoid *ptr);
 * void ysmGlbFree(dvoid *ptr);
 * void ysmFGlbFree(dvoid *ptr);
 *
 * DESCRIPTION
 * ysmFree() frees a previously allocated block of memory.  The heap
 * supplied must be same as that used when the block was allocated.
 * ysmGlbFree() performs the same function using the global heap.
 * ysmFGlbFree() is equivalent to ysmGlbFree() but is a function that
 * may be passed as a pointer to other routines.
 */
void ysmFree(ysmhp *hp, dvoid *ptr);
#define ysmGlbFree(ptr)  ysmFree(ysmGlbHeap(), (ptr))
void ysmFGlbFree(dvoid *ptr);

/*
 * ysmGetSize - gets the size of an allocated block
 *
 * DESCRIPTION
 * ysmGetSize() returns the size of an allocated block of memory.
 */
size_t ysmGetSize(dvoid *ptr);

/*
 * ysmSetBehavior, ysmSetLimit, ysmGetLimit, ysmGetUsage, ysmGetStats
 *   - heap options
 *
 * DESCRIPTION
 * These routines allow the heap characteristics to be altered and
 * checked.
 *
 * ysmSetBehavior() changes the default behavior on allocation failure
 * from the heap.  The old default is returned.  The global heap cannot
 * be altered in this manner.
 *
 * ysmSetLimit() changes the maximum allocation limit on the heap.  If
 * this limit is smaller than the amount of memory already allocated,
 * the limit is set down only as far as possible.  The new limit is
 * returned.  A limit of zero indicates no limit.  Fixed-pool heaps
 * are limited to a maximum size defined when the heap was created.
 * Any attempt to exceed this size will simply set the limit to the
 * maximum size possible.
 *
 * ysmGetStats() returns all statistics about the given heap.  Upon return,
 * limit will point to the total allocation limit on the heap (a value of
 * zero indicates that there is no limit); curusage will point to the
 * current amount of memory allocated from the heap; maxusage will point
 * to the peak concurrent memory allocation from the heap; and afcnt will
 * point to the number of times an allocation or reallocation attempt failed.
 */
#define YSM_THROW   1
#define YSM_RETURN  2

sword  ysmSetBehavior(ysmhp *hp, sword bhvr);
sb4    ysmSetLimit(ysmhp *hp, sb4 limit);
void   ysmGetStats(ysmhp *hp, sb4 *limit, sb4 *curusage,
		   sb4 *maxusage, sb4 *afcnt);

/*
 * ysmCheck - check a tag
 *
 * SYNOPSIS
 * void ysmCheck(dvoid *ptr, CONST char *tag);
 *
 * DESCRIPTION
 * ysmCheck() checks the tag associated with the given ptr.  If the tag
 * is not the same as that passed to ysmAlloc() when the block was first
 * created, it raises the exception YS_EX_BADMAGIC.  Otherwise, it returns
 * silently.  (This routine checks only for pointer equality so be sure to
 * declare the tag only in one place. ysmtagDecl() may be used to easily
 * declare such a tag.)
 */
#define ysmtagDecl(nm)     CONST_DATA char nm[]
#define ysmCheck(ptr, tag) \
  do { if (!ptr || ((CONST char **) (dvoid *) (ptr))[-1] != (tag)) \
	 ysePanic(YS_EX_BADMAGIC); } while (0)

/*
 * ysmAlterTag - alter a tag
 *
 * DESCRIPTION
 * ysmAlterTag() alters a tag to a block of memory.  There are extremely
 * obscure reasons why you may want to do this, so it is probably not for
 * general use.
 */
void ysmAlterTag(dvoid *ptr, CONST char *newtag);

/*
 * ysmGlbHeap - Global Heap
 *
 * SYNOPSIS
 * ysmhp *ysmGlbHeap(void);
 *
 * DESCRIPTION
 * The global heap is a single heap that a process may assume is always
 * available.  It is normally accessed using ysmGlbAlloc(), ysmGlbRealloc(),
 * and ysmGlbFree().  For other operations that require an explicit heap,
 * ysmGlbHeap() may be used to obtain a handle to the global heap.
 *
 * The behavior on allocation failure of the global heap may not be
 * altered.  It will always cause an exception to be thrown.
 */
#define ysmGlbHeap()  ((ysmhp *) yscGet(YSC_YSGLB))

EXTC_END
#endif /* YSM_ORACLE */
