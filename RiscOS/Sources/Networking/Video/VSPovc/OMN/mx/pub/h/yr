/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yr.h - Oracle MOOSE Interface Repository Definitions
 *
 * NOTES
 *   Some notes about the IDL type mappings:
 * - yrobj maps to both the Contained and Container types in the CORBA
 *   spec. 
 * - Exceptions map onto structs, though they have a distince yrdk
 * - Enumerators map directly onto constants. This is contrary to the
 *   the CORBA spec in which they're not first class objects. There's no
 *   danger of confusing them with real IDL constants as real constants
 *   cannot have enumeration type.
 *
 *   There is a circular dependency between the IFR and Object Runtime
 *   Layer wrt type codes. Currently, yotk.h needs visibility to the
 *   YR type names. Yrtypes.h is provided to break the dependency. If
 *   you need to add new YR typedefs, add them to yrtypes.h, not to yr.h.
 *
 * HISTORY
 * 07/04/96 kcoleman	Support for context id lists
 * 02/27/96 kcoleman	Fix bug #366120
 * 02/12/96 kcoleman	Add objFree callback to yrDestroyRepository
 * 07/20/95 kcoleman	Moved all the typedefs into yrtypes.h
 * 07/??/95 kcoleman	Souped up interface
 * ??/??/95 jolkin	creation
 */

#ifndef YR_ORACLE
#define YR_ORACLE

#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSLST_ORACLE
#include <yslst.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
#ifndef YRTYPES_ORACLE
#include <yrtypes.h>
#endif
#ifdef NOT_NOW
#ifndef YOORB_ORACLE
#include <yoorb.h>
#endif
#endif

EXTC_START

/* ----------------------------------------------------------------------- */
/*
 * Definition Kinds (yrdk)
 */
#define yrdknone (yrdk) 0
#define yrdkall (yrdk) 1
#define yrdkRepository (yrdk) 2
#define yrdkAttribute (yrdk) 3
#define yrdkConstant (yrdk) 4
#define yrdkException (yrdk) 5
#define yrdkInterface (yrdk) 6
#define yrdkModule (yrdk) 7
#define yrdkOperation (yrdk) 8
#define yrdkTypedef (yrdk) 9
#define yrdkAlias (yrdk) 10
#define yrdkStruct (yrdk) 11
#define yrdkUnion (yrdk) 12
#define yrdkEnum (yrdk) 13
#define yrdkPrimitive (yrdk) 14
#define yrdkString (yrdk) 15
#define yrdkSequence (yrdk) 16
#define yrdkArray (yrdk) 17

/* ----------------------------------------------------------------------- */
/*
 * Primitive Kinds (yrpk's)
 */
#define yrpknull (yrpk) 0
#define yrpkvoid (yrpk) 1
#define yrpkshort (yrpk) 2
#define yrpklong (yrpk) 3
#define yrpkushort (yrpk) 4
#define yrpkulong (yrpk) 5
#define yrpkfloat (yrpk) 6
#define yrpkdouble (yrpk) 7
#define yrpkboolean (yrpk) 8
#define yrpkchar (yrpk) 9
#define yrpkoctet (yrpk) 10
#define yrpkany (yrpk) 11
#define yrpkTypeCode (yrpk) 12
#define yrpkPrincipal (yrpk) 13
#define yrpkstring (yrpk) 14
#define yrpkobjref (yrpk) 15
#define yrpklonglong (yrpk) 16

/* DISABLE check_naming */
/* ----------------------------------------------------------------------- */
/* Interface Object Types */
/* ----------------------------------------------------------------------- */

/* ----------------------------------------------------------------------- */
/*
 * yrprim - data for yrdkPrimitive (PrimitiveDef)
 */
struct yrprim
{
  yrpk kind;			/* primitive type kind */
};

/* ----------------------------------------------------------------------- */
/*
 * yrconst - data for yrdkConstant (ConstantDef)
 */
struct yrconst
{
  yrobj *type;			/* constant type */
  yoany  val;			/* constant value */
};

/* ----------------------------------------------------------------------- */
/*
 * yrstruct - data for yrdkStruct and yrdkException (StructDef)
 */
struct yrstruct
{
  yslst *mbrs;			/* yrstrmbr list of members */
};

/* ----------------------------------------------------------------------- */
/*
 * yrstrmbr - data for a struct member (StructMember)
 */
struct yrstrmbr
{
  char  *name;			/* member name */
  yrobj *type;			/* member type */
};

/* ----------------------------------------------------------------------- */
/*
 * yrunion - data for yrdkUnion (UnionDef)
 */
struct yrunion
{
  yrobj *disctype;		/* discriminator type */
  yslst *arms;			/* yrunmbr list of members */
};

/* ----------------------------------------------------------------------- */
/*
 * yrunmbr - data for a union member (UnionMember)
 */
struct yrunmbr
{
  char  *name;                                                /* member name */
  yoany  label;                                               /* label value */
  yrobj *type;                                                /* member type */
};

/* ----------------------------------------------------------------------- */
/*
 * yrenum - data for yrdkEnum (EnumDef)
 *
 * We deviate from the OMG Interface Repository spec here in that I've
 * promoted the enumerators to real IFR objects of type yrdkConstant.
 * If you don't do this, you can't effective construct their names or
 * look them up (or return them!) using the interface spec'd by CORBA.
 */
struct yrenum
{
  yslst *mbrs;			/* yrconst list of enumerators */
};

/* ----------------------------------------------------------------------- */
/*
 * yralias - data for yrdkAlias (AliasDef)
 *
 * Do not confuse this with yrdkTypedef. A TypedefDef in the OMG IFR
 * spec is an abstract type; yrdkAlias is a realization of the abstraction.
 * An IDL typedef is a yrdkAlias object, not a yrdkTypedef. YrdkTypedef
 * will never occur naturally within the IFR.
 */
struct yralias
{
  yrobj *type;			/* original type */
};

/* ----------------------------------------------------------------------- */
/*
 * yrstring - data for yrdkString (StringDef)
 *
 * Unbounded strings are represented as yrdkPrimitives with a primitive
 * kind of yrpkstring; YrdkString is a bound string type.
 */
struct yrstring
{
  ub4 bound;			/* bound of string */
};

/* ----------------------------------------------------------------------- */
/*
 * yrseq - data for yrdkSequence (SequenceDef)
 */
struct yrseq
{
  ub4    bound;			/* bound of sequence */
  yrobj *elmtype;		/* element type */
};

/* ----------------------------------------------------------------------- */
/*
 * yrarray - data for yrdkArray (ArrayDef)
 */
struct yrarray
{
  ub4    length;		/* array length */
  yrobj *elmtype;		/* element type */
};

/* ----------------------------------------------------------------------- */
/*
 * yrattr - data for yrdkAttribute (AttributeDef)
 *
 * Attribute mode can be either YR_ATTR_RO (readonly) or YR_ATTR_RW (default)
 */
#define YR_ATTR_RO 1
#define YR_ATTR_RW 0
struct yrattr
{
  sword  mode;			/* YR_ATTR_* */
  yrobj *type;			/* attribute type */
};

/* ----------------------------------------------------------------------- */
/*
 * yrop - data for yrdkOperation (OperationDef)
 *
 * Operation mode can be either YR_OP_ONEWAY (oneway) or YR_OP_TWOWAY (default)
 */
#define YR_OP_ONEWAY 1
#define YR_OP_TWOWAY 0
struct yrop
{
  sword  mode;			/* whether or not it's oneway */
  yrobj *rettype;		/* return type */
  yslst *raises;		/* yrobj list of exceptions raised */
  yslst *pars;			/* yrpar list of parameters */
  yslst *ctxts;                 /* char* list of context id's */
};

/* ----------------------------------------------------------------------- */
/*
 * yrpar - data for an operation parameter (ParameterDescription)
 */
struct yrpar
{
  sword  mode;			/* YOMODE_IN, YOMODE_OUT, YOMODE_INOUT */
  char  *name;			/* parameter name */
  yrobj *type;			/* parameter type */
};

/* ----------------------------------------------------------------------- */
/*
 * yrintf - data for yrdkInterface (InterfaceDef)
 */
struct yrintf
{
  boolean defined;		/* TRUE once the interface body is found */
  yslst *bases;			/* yrobj list of base interfaces */
  yslst *ops;			/* yrobj list of operations (yrdkOperation) */
  yslst *attrs;			/* yrobj list of attributes (yrdkAttribute) */
};

/* ----------------------------------------------------------------------- */
/*
 * yrprivate - data for yrdkRepository (Repository)
 *
 * Repository-private data. Opaque outside the repository. 
 */
typedef struct yrprivate yrprivate;

/* ENABLE check_naming */

externref ysidDecl(YR_EX_BADTYPE);
#ifdef NEVER
/* ----------------------------------------------------------------------- */
/*
 * yrOpenRepository - open a repository
 *
 * DESCRIPTION
 * An exclusive open of a repository enables write operations such
 * as assignment of repository id's and insertion/deletion of repository
 * objects. An interface repository is allowed many readers, but only
 * a single writer with exclusive access. 
 *
 * A non-exclusive open will succeed unless someone else has an exclusive
 * lock on the repository. If the repository cannot be opened because it
 * is locked, this routine will ? (block until it's released, retry N times).
 * 
 * If the named repository cannot be found, YR_EX_BADFILE is raised.
 */
externref ysidDecl(YR_EX_BADFILE);
yrobj *yrOpenRepository(CONST char *nm, boolean exclusive);

/* ----------------------------------------------------------------------- */
/*
 * yrCloseRepository - Close an interface repository
 *
 * DESCRIPTION
 *
 * Close a repository. After calling this function, no operations on the
 * repository are valid until it is opened again. 
 *
 * <robj> must be a repository (yrdkRepository). If it is not, the
 * exception YR_EX_BADTYPE is raised.
 *
 * If <commit> is TRUE, all changes made to the repository since it was
 * opened are written out. If <commit> is FALSE, the repository remains
 * unchanged. If <commit> is TRUE and the repository was opened readonly,
 * the exception YR_EX_READONLY is raised.
 *
 * Closing a repository frees all the memory used by the repository. If
 * <usrpFree> is non-NULL, it will be invoked to free usrp data attached
 * to yrobj's by repository clients. Otherwise, this space is not cleaned
 * up by the repository.
 *
 * RAISES
 * YR_EX_BADTYPE - <robj> is not a repository.
 * YR_EX_READONLY - <robj> is not writeable, so changes cannot be committed.
 */
externref ysidDecl(YR_EX_READONLY);
void yrCloseRepository( yrobj* robj, boolean commit, ysmff usrpFree);
#endif /* NEVER */


/* ----------------------------------------------------------------------- */
/*
 * yrGetAbsoluteName - get an absolute name
 *
 * DESCRIPTION
 * yrGetAbsoluteName() returns the absolute name for a particular object.
 * What the IFR thinks of as an absolute name is what the rest of the
 * world thinks of as a fully scoped name: ::A::B.
 *
 * The returned string should be freed by ysmGlbFree.
 */

char *yrGetAbsoluteName(yrobj *ref);

/*
 * yrLookup - lookup a name
 *
 * DESCRIPTION
 * yrLookup() locates a definition relative to this container given the
 * scoped name and following standard name resolution rules.  This routine
 * throws YR_EX_NOTFOUND if the name is not found, and YR_EX_BADNAME if
 * the scoped name is not valid.  YR_EX_BADNAME includes a yrobj * parameter
 * that indicates the prefix that does not introduce a scope.
 * YR_EX_AMBIGUOUS includes a yslst * of yrobj *'s parameter that indicates
 * all of the possible interpretations of the name.
 */
externref ysidDecl(YR_EX_NOTFOUND);
externref ysidDecl(YR_EX_BADNAME);
externref ysidDecl(YR_EX_AMBIGUOUS);
yrobj *yrLookup(yrobj *ref, CONST char *scoped);

/* ----------------------------------------------------------------------- */
/*
 * yrLookupName - lookup a name contained in an object
 *
 * DESCRIPTION
 * yrLookupName() is used to locate an object by name within a particular
 * object or within objects contained by that object.  limit_type and
 * exclude_inherited will modify the set of objects located.  If levels
 * is -1, it searches the current object and all contained objects.
 * If levels is 1, it searches only the current object.
 *
 * The list should be freed using ysLstDestroy(lst, (ysmff) 0);
 */
#define YR_SHALLOW_LOOKUP ((sb4)1)
#define YR_DEEP_LOOKUP ((sb4)-1)
yslst *yrLookupName(yrobj *ref, CONST char *name, sb4 levels,
		    yrdk limit_type, boolean exclude_inherited);

/* ----------------------------------------------------------------------- */
/*
 * yrContents - retrieve contents
 *
 * DESCRIPTION
 * yrContents() returns a list of the contents of a container.  If the
 * limit type is yrdkall, all objects are returned; otherwise, it is
 * restricted to only those that match the limit type.  If exclude_inherited
 * is TRUE, then inherited objects are not included in the contents returned.
 *
 * The list should be freed using ysLstDestroy(lst, (ysmff) 0);
 */
yslst *yrContents(yrobj *ref, yrdk limit_type, boolean exclude_inherited);

/* ----------------------------------------------------------------------- */
/*
 * yrLookupId - lookups an object by repository id
 */
yrobj *yrLookupId(yrobj *repository, CONST char* repid);

/* ----------------------------------------------------------------------- */
/*
 * yrGetPrimitive - gets an object that describes a primitive
 */
yrobj *yrGetPrimitive(yrobj *repository, yrpk kind);

/* ----------------------------------------------------------------------- */
/*
 * yrGetPrimitiveName - the IDL name for a primitive type
 */
char* yrGetPrimitiveName( yrpk kind );

/* ----------------------------------------------------------------------- */
/*
 * yrGetTypeCode - get the type code for a type
 *
 * The value return should not be freed by the caller - the storage
 * belongs to the repository.
 */
CONST yotk*   yrGetTypeCode(yrobj *type);

/* ----------------------------------------------------------------------- */
/*
 * yrCreateRepository, yrDestroyRepository
 *
 * YrCreateRepository should be obvious. Creates a new repository in
 * memory. It implicitly contains definitions of the primitive types
 * and CORBA::Object, but nothing else.
 *
 * yrDestroyRepository releases all the memory held by the repository
 * and everything in it. <robj> should point to a repository object,
 * but the containing repository will be located and destroyed if it
 * refers to some other kind of object. If non-null, <usrpFree> is used to 
 * release memory associated with a yrobj's usrp; otherwise, the usrp is
 * not garbage collected. If non-null, <objFree> is used to release any
 * CORBA object associated with a yrobj; otherwise, the object is not
 * destroyed.
 *
 * Neither of these operations imply anything about repository 
 * persistence; they're strictly for the in-memory incarnation.
 */

yrobj* yrCreateRepository(void);
void yrDestroyRepository( yrobj* robj, ysmff usrpFree, ysmff objFree);


/* ----------------------------------------------------------------------- */
/*
 * Anonymous type creation functions
 */
yrobj *yrCreateString(yrobj *repository, ub4 bound);
yrobj *yrCreateSequence(yrobj *repository, ub4 bound, yrobj *elmtype);
yrobj *yrCreateArray(yrobj *repository, ub4 length, yrobj *elmtype);

/* ----------------------------------------------------------------------- */
/*
 * Named object/type creation functions
 */
yrobj *yrCreateModule(yrobj *ref, CONST char *name);
yrobj *yrCreateConstant(yrobj *ref, CONST char *name, yrobj *type, yoany *val);
yrobj *yrCreateStruct(yrobj *ref, CONST char *name, yslst *mbrs);
yrobj *yrCreateException(yrobj *ref, CONST char *name, yslst *mbrs);
yrobj *yrCreateUnion(yrobj *ref, CONST char *name, yrobj *disc, yslst *arms);
yrobj *yrCreateEnum(yrobj *ref, CONST char *name, yslst *ids);
yrobj *yrCreateAlias(yrobj *ref, CONST char *name, yrobj *origtype);
yrobj *yrCreateInterface(yrobj *ref, CONST char *name, yslst *bases);
yrobj *yrCreateAttribute(yrobj *intf, CONST char *name, yrobj *type,
			 sword mode);
yrobj *yrCreateOperation(yrobj *intf, CONST char *name, yrobj *rettype,
			 yslst *raises, yslst *pars, sword mode);

/* ----------------------------------------------------------------------- */
/*
 * yrAddBase - add a base interface
 *
 * DESCRIPTION
 * yrAddBase() adds a base interface to a derived interface.  This routine
 * checks that
 *   a) the new base interface is not the same as another direct base;
 *   b) no attributes or operations from the new base interface have
 *      the same name as those visible through other interfaces
 *
 * Case a) will throw YR_EX_MULTIPLE.  Case b) will throw YR_EX_CONFLICT
 * with a parameter of type yslst * of yrobj *, where each object is an
 * operation or attribute that is multiply defined.
 *
 * Also, you cannot inherit explicitly from the pseudo-object type
 * CORBA::Object. Attempts to do so will thrown YR_EX_PSEUDO.
 */
externref ysidDecl(YR_EX_MULTIPLE);
externref ysidDecl(YR_EX_CONFLICT);
externref ysidDecl(YR_EX_PSEUDO);
void yrAddBase(yrobj *intf, yrobj *base);


/* ----------------------------------------------------------------------- */
/*
 * yrDescribeObj - describe a repository object.
 *
 * DESCRIPTION
 * <or> may be any kind of repository object. The object description is
 * returned. Description detail is controlled by <depth>, which may be
 * YRM_DESCRIBE_ALL, or any value > 0. Supposing you had the following
 * IDL, depth affects a description of the module object as noted:
 *
 *	module outer			(depth 1)
 *	{
 *	  struct someType		(depth 2)
 *	  {
 *	    string aField;		(depth 3)
 *	  };
 *	};
 *
 * Thus, a description of depth 1 generates something like a forward
 * declaration for objects which may be containers, whether or not such
 * declarations are legal IDL. If <depth> is YRM_DESCRIBE_ALL, the entire
 * object is described, without regard to the nesting level of its contents.
 *
 * RAISES
 * YR_EX_? - Unable to resolve an object reference?
 */
#define YRM_DESCRIBE_ALL (-1)
char* yrDescribeObj(yrobj* ref, sword depth);


/* ----------------------------------------------------------------------- */
/*
 * yrParseScopedName - break a scoped name into it's constituent names
 *
 * Buff is simply a buffer for the name components; <ptrs> point into it,
 * one char* for each name component. Both should be freed by the caller.
 * If the name begins with the global scope operator, the first ptr in 
 * the list points to the separator instead of to a name, so you can
 * distinguish "::A" from "A". For example, given ::foo::bar::baz, this 
 * function returns:
 *
 *	buff:	::0foo0:bar0:baz	('0' signifies a null)
 *	ptrs:	^  ^    ^    ^
 */
void yrParseScopedName( CONST char* scoped, char** buff, yslst** ptrs);

/* ----------------------------------------------------------------------- */
/*
 * yrGetAliasBaseType - peer through an alias/typedef to it's base type
 *
 * Looks through the entire typedef chain, so:
 *
 *    typedef long a;
 *    typedef a b;
 *
 * Returns long when called on either a or b. Returns a null pointer
 * if <alias> is not a yrdkAlias.
 */
yrobj* yrGetAliasBaseType( yrobj* alias);

/* ----------------------------------------------------------------------- */
/*
 * yrGetNameComponents - construct a list of yrobj's in the def chain
 *
 * Returns a list of yrobj's in <obj>'s def chain which can be used
 * in constructing the scoped or absolute name of <obj>. List is
 * ordered from outermost scope to innermost; <obj> is the tail.
 * List should be freed using ysLstDestroy.
 *
 * RAISES
 *  YR_EX_BADTYPE - <obj> is a yrdkRepository object; name isn't accessible
 */
yslst* yrGetNameComponents( yrobj* obj);

/* ----------------------------------------------------------------------- */
/*
 * yrSetSrcInfo - set source file name/line number info on an object
 *
 * The string passed into the set operation is copied by the IFR.
 *
 * sword yrGetLineNo( yrobj* obj);
 * CONST char* yrGetSrcName( yrobj* obj);
 */
void yrSetSrcInfo( yrobj* obj, CONST char* srcnm, sword lineno);


/* ----------------------------------------------------------------------- */
/*
 * yrSetId - set Repository Id for an object. Generally called by the
 *   compiler in response to #pragma ID. ID must be of the form:
 *
 *   <format>:<name>{:<vers>}
 *
 * Where format is one of LOCAL, IDL, or DCE; name is arbitrary but should
 * not contain ':'. <vers> is also arbitrary and should not contain ':'.
 * <vers> is optional; if it is not supplied "1.0" will be appended to
 * the id by default.
 *
 * Exceptions:
 * YR_EX_BADTYPE - <obj> is a repository, primitive, or anonymous type
 *   object for which this is not a legal operation.
 * YR_EX_INVALIDID - <newid> is of invalid format.
 */
externref ysidDecl(YR_EX_INVALIDID);
void yrSetId( yrobj* obj, CONST char* newid);


/* ----------------------------------------------------------------------- */
/*
 * yrSetPrefix - Set the repository ID prefix for a scope object.
 *
 * This function is typically called by the IDL compiler in response
 * to a "#pragma prefix". <obj> should be a repository, module, or
 * interface object. If <prefix> is a null pointer, no action is taken.
 *
 * Exceptions:
 * YR_EX_BADTYPE - <obj> is not a repository, module, or interface
 */
void yrSetPrefix( yrobj* obj, CONST char* prefix);


/* ----------------------------------------------------------------------- */
/*
 * yrSetVersion - set Version for an object. Generally called by the
 *   compiler in response to #pragma version.
 *
 * YR_EX_BADTYPE - <obj> is a repository, primitive, or anonymous type
 *   object for which this is not a legal operation.
 */
void yrSetVersion( yrobj* obj, CONST char* newvers);


/* ----------------------------------------------------------------------- */
/*
 * yrSetOpCtxtList - add a context id list to an operation.
 *
 * YR_EX_EXISTS  - <op> already has a context id list
 * YR_EX_BADTYPE - <op> is not a yrdkOperation
 */
void yrSetOpCtxtList( yrobj* op, yslst* ctxts);

/* ----------------------------------------------------------------------- */
/*
 * Yrobj attributes
 *
 * Do not access the fields directly - they're subject to change without
 * notice. Attributes without mutators are set by other means, either
 * via other operations available above or privately by the repository,
 * and are not meant to be set directly by repository clients.
 *
 * The various data accessor's return the actual data sub-object, so 
 * they allow direct manipulation of the data in the object.
 */
#define yrGetSrcName(obj) ((obj)->srcnm)
#define yrGetSrcLine(obj) ((obj)->line)
#define yrGetRepId(obj) ((obj)->repid)
#define yrGetName(obj) ((obj)->name)
#define yrGetVersion(obj) ((obj)->version)
#define yrGetKind(obj) ((obj)->tag)

#define yrGetDefinedIn(obj) ((obj)->defined_in)
#define yrSetDefinedIn(obj, parent) ((obj)->defined_in = (yrobj*)(parent))

#define yrGetRepository(obj) ((obj)->repository)
#define yrSetRepository(obj, rep) ((obj->repository = (yrobj*)(rep))

#define yrGetContents(obj) ((obj)->contents)
#define yrSetContents(obj, ctnts) ((obj)->contents = (yslst*) (ctnts))

/*
 * yrGetUsrp, yrSetUsrp - allow the IFR customer to attach data
 *
 * The repository pays no attention whatsoever to this information and it
 * is not garbage collected by the repository at this time.
 */
#define yrGetUsrp(obj) ((obj)->usrp)
#define yrSetUsrp(obj, up) ((obj)->usrp = (dvoid*) (up))

#define yrPrimData(obj) ((obj)->data.pval)
#define yrConstData(obj) ((obj)->data.cval)
#define yrStructData(obj) ((obj)->data.sval)
#define yrUnionData(obj) ((obj)->data.uval)
#define yrEnumData(obj) ((obj)->data.eval)
#define yrAliasData(obj) ((obj)->data.aval)
#define yrStringData(obj) ((obj)->data.strval)
#define yrSeqData(obj) ((obj)->data.seqval)
#define yrArrayData(obj) ((obj)->data.arrval)
#define yrAttrData(obj) ((obj)->data.attval)
#define yrOpData(obj) ((obj)->data.opval)
#define yrInterfaceData(obj) ((obj)->data.intfval)
#define yrRepData(obj) ((obj)->data.repval)


/* ======================================================================= */
/*
 * PRIVATE DECLARATIONS
 */
/* DISABLE check_naming */
/* ----------------------------------------------------------------------- */
/*
 * Interface Object
 *
 * This encapsulates both Container and Contained objects, as described
 * by the CORBA Interface Repository spec.
 *
 * The name is never NULL, even for anonymous types, but it may be an
 * empty string. This is to ease searching, etc. - all obj names may be
 * treated in a consistent manner.
 *
 * The repository id is assigned by the respository when a repository
 * object is created. It should never be modified by the IFR user.
 *
 * <srcnm> is NULL for things like primitive type objects.
 *
 * Only yrdkRepository, yrdkModule, and yrdkInterface objects are
 * containers and therefore have non-NULL <contents>.
 *
 * The <repository> field for a yrdkRepository object is self-referential.
 * It is NEVER NULL.
 */

struct yrobj
{
  char  *srcnm;			/* source filename */
  sword  line;			/* line number in source file */
  yrid  *repid;			/* repository id */
  char  *name;			/* simple identifier, "" for anonymous types */
  char  *version;		/* version specifier */
  yrdk   tag;			/* kind of object */
  yrobj *defined_in;		/* defining container */
  yrobj *repository;		/* containing repository */
  yslst *contents;		/* list of contained objects (yrobj*) */
  yotk* typeCode;		/* lazily set 1st time it is requested */
  char* prefix;			/* yrid prefix for interface, module, rep */
  dvoid* usrp;			/* User data. Unused by IFR */
#ifdef NOT_YET
  CORBA_Object or;		/* for runtime IFR only */
#else
  dvoid* or;  /* make it a dvoid* until we resolve InterfaceDef problems */
#endif
  sword defined;                /* during loading, has this been defined */
  union				/* additional data based on <tag> value */
    {
      yrprim    pval;
      yrconst   cval;
      yrstruct  sval;
      yrunion   uval;
      yrenum    eval;
      yralias   aval;
      yrstring  strval;
      yrseq     seqval;
      yrarray   arrval;
      yrattr    attval;
      yrop      opval;
      yrintf    intfval;
      yrprivate* repval;
    } data;
};

/*
 * yrSetTraceLevel - For IDL compiler and IFR debugging only. Spits info
 * of various kinds to the log. e.g. dumps info on each object that is
 * created. Default of 0 produces no tracing info. Output gets more 
 * more verbose as level increase. Max level is 7.
 */
void yrSetTraceLevel( yrobj* repository, sword lvl);

/*
 * yrCreateIntfId - Create an interface id. For use by the compiler and
 *                  DII query interface only.
 */

ysid* yrCreateIntfId( yrobj* intf);

/*
 * yrWrite - Dump contents of repository to a file. For use by the compiler
 *           and the IFR only.
 */
void yrWrite( yrobj* root, CONST char* fn);

/*
 * yrIsContainer - returns TRUE if this is a container (scope) object.
 *  Containers are: Repository, module, interface, struct, and union.
 */
boolean yrIsContainer( yrobj* obj);

/*
 * yrGetAncestors - accumulate list of base interfaces. Input list
 *   should be allocated by caller. No ordering guaranteed, but each
 *   base interface will be on the list exactly once.
 */
void yrGetAncestors( yrobj* intf, yslst* ancestors);
EXTC_END
#endif /* YR_ORACLE */
