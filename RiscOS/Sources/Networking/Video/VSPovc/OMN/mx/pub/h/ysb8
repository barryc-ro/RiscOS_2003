/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ysb8.h - Portable 64-bit Signed Integer Data Type Package
 *
 * WARNING
 * Except for unusual circumstances, these functions should never be called
 * directly from generic code.  Instead, the sysb8 interface should be used
 * to manipulate 64-bit integers.  On platforms that support 64-bit integers
 * natively, the sysb8 interface will allow the generic code to take
 * advantage of this.
 *
 * DESCRIPTION
 * This package defines a portable interface to perform arithmetic on 64-bit
 * signed integers.  The type ysb8 is the type used for these values.  They
 * are always passed by reference.  In all routines with the argument out,
 * that is where the result is written.  out may pointer to the same location
 * as one of the operands.
 */

#ifndef YSB8_ORACLE
#define YSB8_ORACLE

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YSID_ORACLE
#include <ysid.h>
#endif

EXTC_START

/*
 * ysb8 - the type of the portable 64-bit integer
 */
typedef struct { sb4 hi; ub4 lo; } ysb8;

/*
 * ysb8zero - pre-defined constant for zero
 */
externref CONST ysb8 *CONST_W_PTR ysb8zero;

/*
 * YS_EX_DIVBYZERO - division by zero
 *
 * This exception is thrown by ysb8div(), ysb8rem() and ysb8edv().
 */
externref ysidDecl(YS_EX_DIVBYZERO);

/*
 * Basic Arithmetic
 *
 * add - addition, sub - subtraction, mul - multiply, div - division
 * rem - remainder, neg - negation, srl - shift right logical,
 * sll - shift left logical, edv - combined div/rem
 *
 * DESCRIPTION
 * ysb8add(), ysb8sub(), ysb8mul(), and ysb8div() perform addition,
 * subtraction, multiplication, and division, respectively.  ysb8rem()
 * computes the remainder of the division u/v, which is not portably
 * defined for negative operands.  ysb8neg() negates the given
 * quantity.  ysb8srl() shifts to the right.  No sign extension takes
 * place.  ysb8sll() shifts to the left.  Negative shift values or values
 * greater than 63 produce undefined results.  ysb8edv() computes both
 * a quotient, written to q, and a remainder, written to r.
 */
void ysb8add(ysb8 *out, ysb8 *u, ysb8 *v);
void ysb8sub(ysb8 *out, ysb8 *u, ysb8 *v);
void ysb8mul(ysb8 *out, ysb8 *u, ysb8 *v);
void ysb8div(ysb8 *out, ysb8 *u, ysb8 *v);
void ysb8rem(ysb8 *out, ysb8 *u, ysb8 *v);
void ysb8neg(ysb8 *out, ysb8 *u);
void ysb8srl(ysb8 *out, ysb8 *u, sword bits);
void ysb8sll(ysb8 *out, ysb8 *u, sword bits);
void ysb8edv(ysb8 *u, ysb8 *v, ysb8 *quotient, ysb8 *remainder);

/*
 * Convenience routines for combined 64-bit/32-bit manipulation
 *
 * DESCRIPTION
 * These routines perform addition and multiplication where one
 * of the operands is a 32-bit integer.
 */
void ysb8addb4(ysb8 *out, ysb8 *u, sb4 v);
void ysb8mulb4(ysb8 *out, ysb8 *u, sb4 v);

/*
 * Casting, Assignment, and Comparison
 *
 * SYNOPSIS
 * void    ysb8ext(ysb8 *out, sb4 k);
 * sb4     ysb8msk(ysb8 *u);
 * void    ysb8mak(ysb8 *out, sb4 hi, ub4 lo);
 * void    ysb8set(ysb8 *out, ysb8 *u);
 * boolean ysb8cmp(ysb8 *u, <relop>, ysb8 *v);    (pseudo-C; always a macro)
 * double  ysb8todbl(ysb8 *u);
 * void    ysb8fromdbl(ysb8 *out, double g);
 *
 * DESCRIPTION
 * ext - signed extension from 32-bit to 64-bit
 * msk - masking from 64-bit to 32-bit
 * mak - specify a 64-bit literal
 * set - 64-bit assignment
 * cmp - comparison
 * todbl - convert from 64-bit to double
 * fromdbl - convert from double to 64-bit
 *
 * ysb8ext() sign extends k to a 64-bit quantity.  ysb8msk() masks out
 * the upper half of the 64-bit quantity and returns the 32-bit result.
 * These two operations are equivalent to casting in C.  ysb8mak() is
 * used to construct 64-bit literals.  hi and lo explicitly specify
 * the upper and lower 32 bits of the resulting quantity.  ysb8set()
 * assigns y to out.
 *
 * ysb8cmp() is used for comparing two 64-bit quantities.  It is always
 * a macro.  The relop argument should be a C relational operator (e.g.
 * <, <=, etc.) that expresses the desired comparison.
 *
 * ysb8todbl() and ysb8fromdbl() convert between a 64-bit quantity and
 * a floating-point double value.  An IEEE double generally holds about
 * 53 bits in the mantissa, so overflow may result in unpredictable
 * behavior.
 */
#define ysb8ext(o, k)     ((o)->lo = ((ub4) (k)), (o)->hi = -((k) < 0))
#define ysb8msk(u)        ((sb4) (u)->lo)
#define ysb8mak(o, h, l)  ((o)->hi = (h), (o)->lo = (l))
#define ysb8set(o, u)     ((o)->hi = (u)->hi, (o)->lo = (u)->lo)
#define ysb8cmp(u, op, v) \
  ((u)->hi == (v)->hi ? (u)->lo op (v)->lo : (u)->hi op (v)->hi)
#define ysb8todbl(u)      ((((double) ((ub4) 0xffffffff)) * (u)->hi) + (u)->lo)
void ysb8fromdbl(ysb8 *out, double g);

/*
 * String to integer, integer to string conversions
 *
 * DESCRIPTION
 * ysb8fmt() formats val into a printable string under the control
 * of fmt, and writes the result to buf, which must be large enough to
 * hold the resulting string.  As a convenience, buf is also returned
 * by the function.  fmt must be either "%Ld", which will print a decimal
 * string, or "%Lx", which will print a hexadecimal string.
 *
 * ysb8fromstr() converts from a string representation of a number to the
 * corresponding integer.  If the string is prefixed with "0x", it is
 * interpreted as a hexadecimal number; otherwise, it is interpreted as
 * decimal.  The routine returns TRUE on success, or FALSE if the string
 * contains characters that are not legal in a number.
 */
char   *ysb8fmt(char *buf, CONST char *fmt, ysb8 *val);
boolean ysb8fromstr(ysb8 *out, CONST char *str); 

EXTC_END
#endif /* YSB8_ORACLE */
