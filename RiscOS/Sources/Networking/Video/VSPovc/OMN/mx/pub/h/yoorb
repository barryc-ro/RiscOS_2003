/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yoorb.h - Oracle CORBA ORB & Object compatiblity layer
 */

#ifndef YOORB_ORACLE
#define YOORB_ORACLE

/* DISABLE check_oracle_types */

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif

EXTC_START

typedef sb2             CORBA_short;
typedef sb4             CORBA_long;
typedef ub2             CORBA_unsigned_short;
typedef ub4             CORBA_unsigned_long;
typedef char            CORBA_char;
typedef boolean         CORBA_boolean;
typedef ub1             CORBA_octet;
typedef sb4             CORBA_enum;
typedef yoany           CORBA_any;
typedef yotk *          CORBA_TypeCode;
typedef yoRefData       CORBA_ReferenceData;

#ifndef CORBA_Object_delcared
#define CORBA_Object_delcared
typedef dvoid  *CORBA_Object;
#endif

typedef CORBA_Object CORBA_ORB;

#ifndef CORBA_InterfaceDef_DECLARED
#define CORBA_InterfaceDef_DECLARED
typedef struct YCCORBA_InterfaceDef* CORBA_InterfaceDef;
yotk* CORBA_InterfaceDef__getTC(void);
#define YCTC_CORBA_InterfaceDef   (CORBA_InterfaceDef__getTC())
#endif /* CORBA_InterfaceDef_DECLARED */

typedef char *CORBA_ImplementationDef;

/*
 * CORBA_exception_type
 *
 * Exception status of an object request. Returned as _major in the
 * environment.
 */
typedef ub4 CORBA_exception_type;
#define CORBA_NO_EXCEPTION ((CORBA_exception_type) 0)
#define CORBA_USER_EXCEPTION ((CORBA_exception_type) 1)
#define CORBA_SYSTEM_EXCEPTION ((CORBA_exception_type) 2)

typedef struct CORBA_Environment
{
  CORBA_exception_type _major;
  CORBA_char *id;
  CONST yopar *pars;
  yoenv *yev;
} CORBA_Environment;


/*
 * CORBA_completion_status - Completion status of an object request
 *    when a system exception has been raised.
 */
typedef yoreqsts CORBA_completion_status;
#define CORBA_COMPLETED_YES ((CORBA_completion_status) YOREQ_COMPL_YES)
#define CORBA_COMPLETED_NO ((CORBA_completion_status) YOREQ_COMPL_NO)
#define CORBA_COMPLETED_MAYBE ((CORBA_completion_status) YOREQ_COMPL_MAYBE)

/*
 * CORBA System exception id's
 */
CONST ysid *CORBA_UNKNOWN__getId(void);
#define EX_CORBA_UNKNOWN          (CORBA_UNKNOWN__getId())

CONST ysid *CORBA_BAD_PARAM__getId(void);
#define EX_CORBA_BAD_PARAM        (CORBA_BAD_PARAM__getId())

CONST ysid *CORBA_NO_MEMORY__getId(void);
#define EX_CORBA_NO_MEMORY        (CORBA_NO_MEMORY__getId())

CONST ysid *CORBA_IMP_LIMIT__getId(void);
#define EX_CORBA_IMP_LIMIT        (CORBA_IMP_LIMIT__getId())

CONST ysid *CORBA_COMM_FAILURE__getId(void);
#define EX_CORBA_COMM_FAILURE     (CORBA_COMM_FAILURE__getId())

CONST ysid *CORBA_INV_OBJREF__getId(void);
#define EX_CORBA_INV_OBJREF       (CORBA_INV_OBJREF__getId())

CONST ysid *CORBA_NO_PERMISSION__getId(void);
#define EX_CORBA_NO_PERMISSION    (CORBA_NO_PERMISSION__getId())

CONST ysid *CORBA_INTERNAL__getId(void);
#define EX_CORBA_INTERNAL         (CORBA_INTERNAL__getId())

CONST ysid *CORBA_MARSHAL__getId(void);
#define EX_CORBA_MARSHAL          (CORBA_MARSHAL__getId())

CONST ysid *CORBA_INITIALIZE__getId(void);
#define EX_CORBA_INITIALIZE       (CORBA_INITIALIZE__getId())

CONST ysid *CORBA_NO_IMPLEMENT__getId(void);
#define EX_CORBA_NO_IMPLEMENT     (CORBA_NO_IMPLEMENT__getId())

CONST ysid *CORBA_BAD_TYPECODE__getId(void);
#define EX_CORBA_BAD_TYPECODE     (CORBA_BAD_TYPECODE__getId())

CONST ysid *CORBA_BAD_OPERATION__getId(void);
#define EX_CORBA_BAD_OPERATION    (CORBA_BAD_OPERATION__getId())

CONST ysid *CORBA_NO_RESOURCES__getId(void);
#define EX_CORBA_NO_RESOURCES     (CORBA_NO_RESOURCES__getId())

CONST ysid *CORBA_NO_RESPONSE__getId(void);
#define EX_CORBA_NO_RESPONSE      (CORBA_NO_RESPONSE__getId())

CONST ysid *CORBA_PERSIST_STORE__getId(void);
#define EX_CORBA_PERSIST_STORE    (CORBA_PERSIST_STORE__getId())

CONST ysid *CORBA_BAD_INV_ORDER__getId(void);
#define EX_CORBA_BAD_INV_ORDER    (CORBA_BAD_INV_ORDER__getId())

CONST ysid *CORBA_TRANSIENT__getId(void);
#define EX_CORBA_TRANSIENT        (CORBA_TRANSIENT__getId())

CONST ysid *CORBA_FREE_MEM__getId(void);
#define EX_CORBA_FREE_MEM         (CORBA_FREE_MEM__getId())

CONST ysid *CORBA_INV_IDENT__getId(void);
#define EX_CORBA_INV_IDENT        (CORBA_INV_IDENT__getId())

CONST ysid *CORBA_INV_FLAG__getId(void);
#define EX_CORBA_INV_FLAG         (CORBA_INV_FLAG__getId())

CONST ysid *CORBA_INTF_REPOS__getId(void);
#define EX_CORBA_INTF_REPOS       (CORBA_INTF_REPOS__getId())

CONST ysid *CORBA_BAD_CONTEXT__getId(void);
#define EX_CORBA_BAD_CONTEXT      (CORBA_BAD_CONTEXT__getId())

CONST ysid *CORBA_OBJ_ADAPTER__getId(void);
#define EX_CORBA_OBJ_ADAPTER      (CORBA_OBJ_ADAPTER__getId())

CONST ysid *CORBA_DATA_CONVERSION__getId(void);
#define EX_CORBA_DATA_CONVERSION        (CORBA_DATA_CONVERSION__getId())

CONST ysid *CORBA_OBJECT_NOT_EXIST__getId(void);
#define EX_CORBA_OBJECT_NOT_EXIST (CORBA_OBJECT_NOT_EXIST__getId())

/* 
 * Use of the following form of exception id is deprecated. These
 * forms will be removed in the next major release. Use the exception
 * id's above instead.
 */
#define CORBA_UNKNOWN          (CORBA_UNKNOWN__getId())
#define CORBA_BAD_PARAM        (CORBA_BAD_PARAM__getId())
#define CORBA_NO_MEMORY        (CORBA_NO_MEMORY__getId())
#define CORBA_IMP_LIMIT        (CORBA_IMP_LIMIT__getId())
#define CORBA_COMM_FAILURE     (CORBA_COMM_FAILURE__getId())
#define CORBA_INV_OBJREF       (CORBA_INV_OBJREF__getId())
#define CORBA_NO_PERMISSION    (CORBA_NO_PERMISSION__getId())
#define CORBA_INTERNAL         (CORBA_INTERNAL__getId())
#define CORBA_MARSHAL          (CORBA_MARSHAL__getId())
#define CORBA_INITIALIZE       (CORBA_INITIALIZE__getId())
#define CORBA_NO_IMPLEMENT     (CORBA_NO_IMPLEMENT__getId())
#define CORBA_BAD_TYPECODE     (CORBA_BAD_TYPECODE__getId())
#define CORBA_BAD_OPERATION    (CORBA_BAD_OPERATION__getId())
#define CORBA_NO_RESOURCES     (CORBA_NO_RESOURCES__getId())
#define CORBA_NO_RESPONSE      (CORBA_NO_RESPONSE__getId())
#define CORBA_PERSIST_STORE    (CORBA_PERSIST_STORE__getId())
#define CORBA_BAD_INV_ORDER    (CORBA_BAD_INV_ORDER__getId())
#define CORBA_TRANSIENT        (CORBA_TRANSIENT__getId())
#define CORBA_FREE_MEM         (CORBA_FREE_MEM__getId())
#define CORBA_INV_IDENT        (CORBA_INV_IDENT__getId())
#define CORBA_INV_FLAG         (CORBA_INV_FLAG__getId())
#define CORBA_INTF_REPOS       (CORBA_INTF_REPOS__getId())
#define CORBA_BAD_CONTEXT      (CORBA_BAD_CONTEXT__getId())
#define CORBA_OBJ_ADAPTER      (CORBA_OBJ_ADAPTER__getId())
#define CORBA_DATA_CONVERSION  (CORBA_DATA_CONVERSION__getId())
#define CORBA_OBJECT_NOT_EXIST (CORBA_OBJECT_NOT_EXIST__getId())


#define CORBA_OBJECT_NIL ((CORBA_Object) 0)


/*
 * CORBA_free - free argument memory
 *
 * DESCRIPTION
 * Memory returned to the client as a result of an ORB request should be freed
 * using this function.  Storage is a pointer to the memory previously 
 * returned by the ORB which is no longer needed.
 */
void CORBA_free(void *storage);

/*
 * CORBA_exception_id, CORBA_exception_value,
 * CORBA_exception_free         - exception information
 *
 * DESCRIPTION
 * CORBA_exception_id() returns the exception id from the environment if any.
 * If no exception has occured, a null pointer is returned.  ev specifies the
 * environment to be examined.
 * CORBA_exception_value() returns any additional data associated with the
 * exception from the environment.  The value returned is copied from the
 * environment, ev.  The value returned should be freed using using
 * CORBA_free.
 * CORBA_exception_free() clears the current exception from the specified
 * environment.
 */
CORBA_char *CORBA_exception_id(CORBA_Environment *ev);
void *CORBA_exception_value(CORBA_Environment *ev);
void CORBA_exception_free(CORBA_Environment *ev);

/*
 * CORBA_ORB_object_to_string,
 * CORBA_ORB_string_to_object - string converstion of object references
 *
 * DESCRITPION
 * CORBA_ORB_object_to_string() converts an object reference into a form that
 * can be manipulated as a string.  CORBA_ORB_string_to_object() converts an
 * object reference strings into an actual object reference.  Any exception
 * which might occur is returned in the environment ev.  The storage returned
 * via CORBA_ORB_object_to_string() should be freed via CORBA_free().
 */
CORBA_char *CORBA_ORB_object_to_string(CORBA_ORB orb, CORBA_Environment *ev,
                                       CORBA_Object obj);
CORBA_Object CORBA_ORB_string_to_object(CORBA_ORB orb, CORBA_Environment *ev,
                                         char *str);

/*
 * CORBA_Object_get_implementation - get object's ImplementationDef
 * 
 * DESCRIPTION
 * CORBA_Object_get_implementation returns the specified object reference's
 * CORBA_ImplementationDef object.
 */
CORBA_ImplementationDef
CORBA_Object_get_implementation(CORBA_Object obj,
				CORBA_Environment *ev);

/*
 * CORBA_Object_get_interface - get object's IntefaceDef
 * 
 * DESCRIPTION
 * CORBA_Object_get_interface returns the specified object reference's
 * CORBA_InterfaceDef object.
 */
CORBA_InterfaceDef CORBA_Object_get_interface(CORBA_Object obj,
                                              CORBA_Environment *ev);
/*
 * CORBA_Object_is_nil - test for nil
 *
 * DESCRIPTION
 * CORBA_Object_is_nil tests the specified object reference to see if it is
 * a nil object reference.
 */
boolean CORBA_Object_is_nil(CORBA_Object obj, CORBA_Environment *ev);

/*
 * CORBA_Object_duplicate, CORBA_Object_release - duplicate and release refs
 *
 * DESCRIPTION
 * CORBA_Object_duplicate duplicates an object reference and returns a new
 * one.  CORBA_Object_release releases an object reference.  These operations
 * typically have no effect on the object itself.
 */
CORBA_Object CORBA_Object_duplicate(CORBA_Object obj, CORBA_Environment *ev);
void CORBA_Object_release(CORBA_Object obj, CORBA_Environment *ev);

/*
 * ORA_CORBA_ORB_init, ORA_CORBA_ORB_term - init & term ORB layer
 *
 * DESCRIPTION
 * ORA_CORBA_ORB_init() inits the ORB layer returning the CORBA_ORB object
 * reference required for some operations defined in this interface.
 * ORA_CORBA_ORB_term() shuts down the ORB layer.
 */
CORBA_ORB ORA_CORBA_ORB_init(void);
void ORA_CORBA_ORB_term(CORBA_ORB orb);

/*
 * ORA_CORBA_ORB_Alloc - allocate memory from ORB pool
 *
 * DESCRIPTION
 * Allocates memory to be freed using CORBA_free().
 */
void *ORA_CORBA_ORB_Alloc(CORBA_ORB orb, CORBA_Environment *ev, size_t size);

/*
 * ORA_CORBA_bind - bind to an object
 *
 * DESCRIPTION
 * ORA_CORBA_bind() creates an object reference that is "loosely" bound to an
 * object.  The object reference will denote any object that implements
 * the specified interface.  If impl is non-null, then the object must
 * also use the specified implementation.  If id is non-null, the
 * specified id is copied into the object reference.  If id is
 * non-null, the specified reference data is attached to the reference.
 *
 * In any case, a method invoked on the returned object reference will
 * be delivered to any object that meets the requirements of the binding.
 * (Each invocation may bind to a different object.)  The ORB may activate
 * a server if necessary to complete the invocation.  If no such object
 * can be located, an error will be returned during the method invocation,
 * not during this call.
 */
CORBA_Object ORA_CORBA_ORB_bind(CORBA_ORB orb, CORBA_Environment *ev,
                                CORBA_InterfaceDef intf,
                                CORBA_ImplementationDef impl,
                                CORBA_ReferenceData *id,
                                CORBA_char *ignored);

/*
 * ORA_CORBA_EnvInit, ORA_CORBA_EnvFree - environment init & free
 *
 * DESCRIPTION
 * ORA_CORBA_EnvInit() initializes the CORBA environment. ORA_CORBA_EnvFree()
 * frees the specified CORBA environment.
 */
void ORA_CORBA_EnvInit(CORBA_Environment *ev);
void ORA_CORBA_EnvFree(CORBA_Environment *ev);

/*
 * ORA_CORBA_IdToIntfDef - convert ysid to CORBA_InterfaceDef
 *
 * DESCRIPTION
 * Acquires the CORBA::InterfaceDef associated with an interface id. Result
 * is suitable for use in any of the CORBA/BOA functions here or in yoboa.h.
 * IMPORTANT: The result cannot presently be used to perform Interface 
 * Repository queries. Stay tuned...
 */
CORBA_InterfaceDef ORA_CORBA_IdToIntfDef( CONST ysid* intfid, 
                                          CORBA_Environment* ev);

/*
 * ORA_CORBA_FilterRun - run filters
 *
 * DESCRIPTION
 * ORA_CORBA_FilterRun runs filters previously set up through yoSetFilter. 
 * It should only be called to run client-side filters around DII requests
 * and requests through asynchronous stubs; normal synchronous object 
 * requests have their filters run by the stubs.
 *
 * DII and async stub users who wish filters to be run should call 
 * ORA_CORBA_FilterRun(..., YOFLTR_CSND before invoking ORA_CORBA_SendReq
 * (or their async stub), and ORA_CORBA_FilterRun(..., YOFLTR_CRCV) after 
 * synch'ing with the call completion event.  If an exception occurs
 * when dispatching the DII call, the CRCV filters should be run and
 * passed the value of CORBA_exception_id & CORBA_exception_value.
 */
void ORA_CORBA_FilterRun(CORBA_Object obj, CORBA_Environment *cev, 
			 sword type, CORBA_char *exid, void *val);

/* PRIVATE - client & server stub support interfaces */
void ORA_CORBA_BuildEnv(CORBA_Environment *cev, yoenv *ev, CONST yopar *pars);
void ORA_CORBA_ExceptionToYo(CORBA_Environment *cev);
void ORA_CORBA_SemSynch(CORBA_Environment *cev, ysevt *sem, CONST yopar *pars,
                        dvoid *arg, size_t argsz);
void ORA_CORBA_SendReq(CONST dvoid *ref, CORBA_Environment *cev, 
		       CONST char *op,
                       boolean response, ysevt *uevt, sword args,
                       CONST yopar *pars, dvoid **values);
ysid *ORA_CORBA_GetIntfId(CORBA_InterfaceDef intf);

EXTC_END

/* ENABLE check_oracle_types */

#endif /* YOORB_ORACLE */
