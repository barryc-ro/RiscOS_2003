//////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995 by Oracle Corporation. All Rights Reserved.
//
// NAME
// yrmgidl.idl - IDL interface for managing the runtime OMX 
//               Interface Repository
//
// NOTES
// This is a very primitive implementation of the repository. It is file
// based, does no dependency checking, and has a rather inflexible world
// view. It is expected to mature into a more robust offering. The current
// proposal imposes the following limitations:
//
// - The IFR reads it's data from files. It must be able to open said
//   files for reading, so they must be in the same file system as the
//   server.
// - Any number of IFR files can be added dynamically to the IFR, but
//   the data cannot be unloaded or updated subsequently in the server.
//   Update operations require bouncing the server.
//////////////////////////////////////////////////////////////////////////
#ifndef YRMGIDL_ORACLE
#define YRMGIDL_ORACLE

#ifndef YOSTD_ORACLE
#include "yostd"
#endif

#ifndef YRTYPIDL_ORACLE
#include "yrtypidl"
#endif


module CORBA
{
  interface Repository;
};

module yr
{
  // =====================================================================
  // yr::mgr - Interface Repository Manager interface
  //
  //   Encapsulates startup and shutdown operations.
  // =====================================================================

  interface mgr
  {

    /* -------------------------- Constants ------------------------------ */
    /////
    // yr::mgr::err_max - Max number of errors returned on a load conflict.
    /////
    const ub4 err_max = 10;

    /* -------------------------- Exceptions ------------------------------ */
    /////
    // yr::mgr::LoadConflict - An attempt to load an IFR data file 
    //   failed because undefined and/or redefined objects were
    //   encountered. The repository id's of the first <err_max> offending
    //   entities of each class are returned, along with the name
    //   of the file containing the errors.
    //
    // The repository  considers something a redefinition if an object
    // with the same name/repository ID is already in the repository
    // and the two definitions are not identical. 
    //
    // A repository entity which is just a reference to an external
    // definition (e.g. because it was from a #include file) must be
    // resolved to a real definition before the load completes or
    // the entity is considered undefined.
    /////
    exception LoadConflict
    {
      yr::path filename;
      // @@ Bound sequences are broken - put this back when they're fixed
      // sequence<yr::repid, err_max> undefined;
      // sequence<yr::repid, err_max> redefined;
      sequence<yr::repid> undefined;
      sequence<yr::repid> redefined;
    };

    /////
    // yr::mgr::fileNotFound - Unable to load the specified IFR data file,
    //   or unable to open the sepcified repository directory. This may
    //   be caused by an invalid pathname, file access privilege problem, etc.
    /////
    exception fileNotFound
    {
      yr::path path;
    };

    /////
    // yr::mgr::fileCorrupted - Unable to interpret contents of IFR data file.
    /////
    exception fileCorrupted
    {
      yr::path path;
    };

    /* ------------------------------ Attributes -------------------------- */
    /////
    // yr::mgr::loadlist - Returns an ordered list of the files loaded into
    //   the repository.
    //
    // The load list reflects the current repository state in terms of
    // the IFR data files it contains. Barring recreation of any of the
    // data files, the repository state can be reproduced from the load
    // list.
    /////
    readonly attribute yr::pathSeq loadlist;

    /* ------------------------------- Operations -------------------------- */
    /////
    // yr::mgr::load - Load one or more IFR data files into the repository.
    //
    // <fn> may be either a single file name, or a directory name. If it
    // is a directory, all IFR data files in that directory are loaded.
    //
    // If any kind of error occurs during the load, the repository is not
    // updated at all with respect to the given input file(s). 
    //
    // The repository "universe" can be expanded, but not modified. That is,
    // once an IDL entity is loaded into the repository, it cannot be unloaded
    // or updated. In order to remove something from the repository or update
    // it to a new version, the repository must be restarted. This
    // restriction is necessary because we do not yet support dependency
    // checking between entities.
    //
    // Exceptions:
    //   yr::fileNotFound - unable to open <fn> for reading
    //   yr::fileCorrupted - couldn't interpret file contents
    //   yr::LoadConflict - <fn> contains definitions which conflict
    //      with the current IFR contents, or contains external 
    //      references which could not be resolved.
    /////
    void load( in yr::path fn) 
             raises (LoadConflict, fileNotFound, fileCorrupted);

    /////
    // yr::mgr::repository - The repository this mgr manages. :-)
    //
    // For the moment, this is the only way to get a tightly bound
    // repository object.
    /////
    readonly attribute CORBA::Repository repository;

    /////
    // yr::mgr::shutdown - Bring down the IFR server.
    /////
    void shutdown();
  };  // interface yr::mgr

}; // module yr

#endif // YRMGIDL_ORACLE
