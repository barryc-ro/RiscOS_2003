/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ysv.h - OMX Aysnchronous Operations Management
 *
 * DESCRIPTION
 * Routines that initiate asynchronous operations take event descriptors
 * that describe how notification of the completion of the operation is
 * to be delivered.  Notification may proceed in one of two ways:  invoking
 * a user-supplied callback handler with the results of the operation, or
 * changing the status of a semaphore to indicate the results.  Notification
 * is caused by "triggering the event".  Both callback and semaphore events
 * are supported by the asynchronous operations management interface
 * described here.
 *
 * USAGE
 * An event descriptor may only be used for at most one operation.  It
 * may only be triggered once.  It is allowable to use an event descriptor
 * and the trigger mechanism without using asynchronous operations.
 *
 * Routines that take timeout values always take timeout values specified
 * in microseconds.  Two special values, YSTM_INFINITE and YSTM_POLLING,
 * are defined as possible timeout values.  YSTM_INFINITE should be used
 * if the routine should block indefinitely with no timeout.  YSTM_POLLING
 * should be used if the routine should not block at all and should only
 * perform a poll.
 *
 * Routines that block may be interrupted.  When this occurs, an interrupt
 * exception is thrown out of the routine.  Interrupt exceptions are
 * YS_EX_INTERRUPT and YS_EX_SHUTDOWN.  Either of these may be raised
 * by calling ysIntr() and passing the appropriate interrupt exception.
 * In general, one should not assume that both can be raised, but one
 * should respond correctly if either one is.  YS_EX_SHUTDOWN, in particular,
 * should cause a relatively clean, orderly shutdown of the process.
 */

#ifndef YSV_ORACLE
#define YSV_ORACLE

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif

EXTC_START

/*
 * Interrupt Exceptions
 */
externref ysidDecl(YS_EX_INTERRUPT);
externref ysidDecl(YS_EX_CANCELLED);
externref ysidDecl(YS_EX_TIMEOUT);

#define YSTM_POLLING   (sysb8zero)
#define YSTM_INFINITE  ((sysb8 *) 0)

/*
 * ysHndlr - callback handler prototype
 *
 * DESCRIPTION
 * ysHndlr is the prototype for all callback handlers.  Handlers are invoked
 * at certain times under the control of the user and the asynchronous event
 * manager.  When a handler is invoked, the usrp passed to ysEvtCreate() is
 * passed back as usrp.  The remaining three arguments are those provided to
 * ysTrigger().  See ysTrigger() for more information.
 *
 * Handlers should not perform operations that block, nor should they throw
 * exceptions out of the handler.
 */
typedef void (*ysHndlr)
     (dvoid *usrp, CONST ysid *exid, dvoid *arg, size_t argsz);

/*
 * ysEvtCreate, ysEvtSimple, ysEvtDummy, ysEvtDestroy
 *   - callback event descriptors
 *
 * DESCRIPTION
 * ysEvtCreate() creates an event descriptor for callback-style notification.
 * hndlr is the name of the callback function that should be invoked when
 * the event is triggered.  usrp is a user pointer that is passed back to
 * the handler when it is invoked.  If q is non-null, it specifies an event
 * queue on which the triggered event is placed.  The handler is not invoked
 * until the event is actually dequeued.  See ysQueCreate() for more
 * information.
 *
 * Normally, once the handler is invoked and returns, the event descriptor
 * is automatically destroyed.  However, if keep is TRUE, this indicates
 * that the descriptor is being "kept" by the event creator.  This prevents
 * the event descriptor from being automatically destroyed.  If an event is
 * kept, the event descriptor must always be explicitly freed with
 * ysEvtDestroy().
 *
 * ysEvtSimple() creates an event just like ysEvtCreate(), except that the
 * event is never associated with a queue, and the descriptor is never kept.
 *
 * ysEvtDummy() creates an event descriptor that has no effect when triggered.
 * This is used to pass to an operation that needs to be asynchronous, but
 * notification of completion is not required.
 *
 * ysEvtDestroy() destroys an event descriptor.  Typically, only event
 * descriptors that are kept need to be destroyed.  However, if the
 * routine that initiates an asynchronous operation fails, then the event
 * descriptor was never successfully attached.  In this case, even unkept
 * events must be destroyed by the creator.  (See ysEvtAttach() for more
 * information.)
 *
 * A typical technique to deal with freeing event descriptors correctly
 * is shown:
 *
 *    yseTry
 *       evt = ysEvtSimple(myHandler, myCtx);
 *       StartAsynchOperation(evt);
 *    yseCatchAll
 *       ysEvtDestroy(evt);
 *       yseRethrow;
 *    yseEnd
 *
 * Note that once the event descriptor is successfully attached, an unkept
 * event descriptor should never be destroyed by the creator.
 *
 * USAGE
 * If it is necessary to be able to cancel an operation, you must keep
 * the event descriptor and use ysEvtDestroy() to cancel the operation.
 * It is possible to have a completed event posted on a queue when you
 * call ysEvtDestroy().  This may lead to a lost event.  Be sure to
 * service a queue completely before destroying such events.  It is
 * acceptable to call ysEvtDestroy() even within the handler for the
 * corresponding event.
 */
ysevt  *ysEvtCreate(ysHndlr hndlr, dvoid *usrp, ysque *q, boolean keep);
#define ysEvtSimple(h, u)  ysEvtCreate((h), (u), (ysque *) 0, FALSE)
ysevt  *ysEvtDummy(void);
void    ysEvtDestroy(ysevt *evt);

/*
 * ysTrigger - trigger an event
 *
 * DESCRIPTION
 * ysTrigger() triggers an event.  If the event is a semaphore event,
 * the status of the semaphore is updated.  Otherwise, the event is a
 * callback event.  If the event is not associated with a queue, the
 * handler is invoked immediately.  If the event is associated with a
 * queue, the event is placed on the queue.  exid, arg, and argsz are
 * passed to the handler when it is invoked.  If arg is non-null, it
 * must point to a buffer of argsz bytes.  The contents of the argument
 * are copied when the event is triggered.  If there is insufficient
 * memory to store the contents of the argument, the handler is triggered
 * with the exception YS_EX_OUTMEM instead.
 *
 * Although ysTrigger() does not enforce any true meaning for its arguments,
 * the following conventions should be observed:
 *
 *   exid should be used if the event is being triggered with an exceptional
 *   condition.  exid would be the exception identifier and arg would then
 *   point to the exception object (if any).  If no exception occurred,
 *   exid should be null.
 *
 *   If no exception occurred, arg may be used to pass information back to
 *   the user.  This would usually be the return value of the operation
 *   if the operation were executed synchronously.
 *
 * ysTrigger() will throw the exception YS_EX_BADPARAM if the event
 * descriptor has already been triggered.
 */
void ysTrigger(ysevt *evt, CONST ysid *exid, dvoid *arg, size_t argsz);

/*
 * ysEvtAttach - attach an event to an operation
 *
 * DESCRIPTION
 * ysEvtAttach() is used to attach an event descriptor to an operation.
 * This is generally performed by the routine that initiates the
 * asynchronous operation.  An event descriptor may only be attached to
 * one operation.
 *
 * cancelevt is an event that is triggered only if the original event
 * descriptor is destroyed before the operation completes.  The
 * cancellation event is triggered with the exception YS_EX_CANCELLED.
 * This indicates that the event creator is no longer interested in the
 * event, and that, if possible, the operation should be cancelled.
 * Once the cancellation event is triggered, the original event must
 * not be triggered by the completion of the operation.
 *
 * The value evt is returned by ysEvtAttach() as a convenience.  This
 * routine will throw the exception YS_EX_ALREADY if the event descriptor
 * has already been attached or triggered.
 */
ysevt *ysEvtAttach(ysevt *evt, ysevt *cancelevt);

/*
 * ysQueCreate, ysQueDestroy, ysQueGetUsrp - event queues
 *
 * DESCRIPTION
 * ysQueCreate() creates and returns an event queue and associates usrp
 * with the queue.  Event queues are used to control the processing and
 * dispatch of callback events.  An event associated with a queue is simply
 * placed onto the queue when the event is triggered.  The event may then
 * be dequeued using various queue service functions.  When an event is
 * dequeued, the handler for the event is invoked.
 *
 * ysQueDestroy() destroys an event queue.  Any untriggered events
 * associated with the queue are automatically cancelled.  Then, unless
 * they are kept, they are automatically destroyed.  Kept events must be
 * explicitly destroyed by the creator no matter what.  All triggered
 * but unprocessed events are dispatched before the queue is destroyed.
 *
 * ysQueGetUsrp() returns the usrp passed to ysQueCreate().
 */
ysque *ysQueCreate(dvoid *usrp);
void   ysQueDestroy(ysque *q);
dvoid *ysQueGetUsrp(ysque *q);

/*
 * ysQueGetMetrics, ysQueGetCurTime - queue metrics
 *
 * DESCRIPTION
 * ysQueGetMetrics() returns collected metrics for a particular event queue.
 * See ysLstGetMetrics() in yslst.h for more information.
 *
 * ysQueGetCurTime() returns the amount of time elapsed since the next
 * element to be dequeued was put on the list.  (This element would be
 * the one that is currently oldest.)
 */
void ysQueGetMetrics(ysque *q, yslmtc *metrics);
void ysQueGetCurTime(ysque *q, sysb8 *delta);

/*
 * ysSvcAll, ysSvcNext, ysSvcPending, ysSvcNotify, ysSvcLoop - service a queue
 *
 * DESCRIPTION
 * ysSvcAll() services all triggered events pending on the given queue
 * before returning.  Because the triggered events may in turn cause
 * additional events to be posted to the queue, ysSvcAll() may execute
 * indefinitely.  ysSvcNext() services only the next triggered event
 * in the queue.  If no events are pending, ysSvcAll() and ysSvcNext()
 * return immediately.  ysSvcNext() returns with a boolean value
 * indicating whether an event was serviced.
 *
 * ysSvcPending() returns the number of triggered events currently
 * pending on the queue.
 *
 * ysSvcNotify() will cause the event evt to be triggered as soon as
 * a triggered event is posted to the queue q.  If there are already
 * events on the queue, the event is triggered immediately.  If no
 * event is passed, the routine blocks synchronously until there is
 * a triggered event on the queue.
 *
 * ysSvcLoop() will service events on a queue until the given semaphore
 * is triggered.  ysSvcLoop() will raise YS_EX_BADPARAM if sem is not a
 * semaphore.
 *
 * If the same queue is serviced from multiple threads concurrently,
 * then events are dispatched to the thread that is not busy.  If more
 * than one thread is not busy, the one chosen is unpredictable.
 */
void    ysSvcAll(ysque *q);
boolean ysSvcNext(ysque *q);
sword   ysSvcPending(ysque *q);
void    ysSvcNotify(ysque *q, ysevt *evt);
void    ysSvcLoop(ysque *q, ysevt *sem);

/*
 * ysSvcSelect - select from a set of queues
 *
 * DESCRIPTION
 * ysSvcSelect() blocks until at least one of the queues in the given
 * array of queues has an event posted.  nque is the number of queues
 * in the array q.  It then returns the number of queues in the array
 * that have events pending.
 *
 * If timeout is YSTM_INFINITE, the call will block indefinitely.
 * Otherwise, timeout points to a number of microseconds that indicates
 * the maximum time that this routine will block.  If the time expires
 * without any queue being posted to, the exception YS_EX_TIMEOUT is
 * raised.  A timeout value of YSTM_POLLING, may be used to effect a
 * poll.  No exception is raised when polling.
 *
 * In a threaded environment, it is possible that the event that was
 * posted which unblocked this routine is consumed.  In other words,
 * this routine may sometimes spuriously wake up.
 */
sword ysSvcSelect(CONST sysb8 *timeout, sword nque, ysque **q);

/*
 * ysSemCreate, ysSemDestroy - create & destroy a semaphore
 *
 * DESCRIPTION
 * ysSemCreate() creates a semaphore for semaphore-style notification.
 * usrp is a user pointer that is retrievable from the semaphore.
 *
 * Semaphores offer an alternative to the callback style of asynchronous
 * control.  When a semaphore is created, it is unset.  Then, it is
 * associated with an operation in the same manner as for an event.  (Note
 * that the type of a semaphore is indistinguishable from an event, thus
 * allowing semaphores and events to be used interchangeably.)
 *
 * Later, when the operation completes, the semaphore is set (this happens
 * using the ysTrigger() mechanism; again, this is transparent to the
 * caller.)  At any point, the user may test or wait for the semaphore
 * to be set.  After the semaphore is set, the exception identifier and
 * operation argument become available.
 *
 * ysSemCreate() creates a semaphore and associates a user pointer
 * with it.  ysSemDestroy() destroys a semaphore.
 */
#define ysSemCreate(usrp)  ysEvtCreate((ysHndlr) 0, (usrp), (ysque *) 0, TRUE)
#define ysSemDestroy(evt)  ysEvtDestroy(evt)

/*
 * ysSemTest, ysSemWait, ysSemOrW, ysSemAndW - semaphore operations
 *
 * DESCRIPTION
 * ysSemTest() tests a semaphore and returns TRUE if the semaphore
 * has been set; FALSE otherwise.  ysSemWait() blocks until the given
 * semaphore is set.
 *
 * ysSemOrW() blocks until at least one of the semaphores given is
 * set.  ysSemAndW() blocks until all of the semaphores given are set.
 * They then return the number of semaphores that have been set.  If
 * timeout is non-null, then timeout points to a number of microseconds
 * that indicates the maximum time that these routines will block.  If
 * the time expires, the exception YS_EX_TIMEOUT is raised.  (A timeout
 * of YSTM_POLLING may be used to effect a poll.  No exception is
 * raised when polling.)
 *
 * These operations may be applied to semaphores created with
 * ysSemCreate() or events created with ysEvtCreate() and "kept".
 *
 * It is an obscure but important fact that the current implementation
 * allows only one thread at a time to wait on a semaphore.
 */
boolean ysSemTest(ysevt *sem);
void    ysSemWait(ysevt *sem);
sword   ysSemOrW(CONST sysb8 *timeout, sword nsem, ysevt **sems);
sword   ysSemAndW(CONST sysb8 *timeout, sword nsem, ysevt **sems);

/*
 * ysSemSynch - synchronize on a semaphore
 *
 * DESCRIPTION
 * ysSemSynch() is a more sophisticated version of ysSemWait() that
 * allows a thread to synchronize on a semaphore.  ysSemSynch()
 * blocks until the given semaphore is set.  Once the semaphore is
 * set, ysSemSynch() copies the resulting argument into the space
 * pointed to by arg.  This must be sufficient to hold the actual
 * argument passed.
 *
 * However, if the semaphore was set with an exception, then the
 * exception is actually raised synchronously from this routine.
 *
 * In any case, the semaphore itself is destroyed by this routine.
 * Thus, a common sequence is:
 *    sem = ysSemCreate();
 *    start_asynch_operation(sem);
 *    ... perform other computation ...
 *    ysSemSynch(sem, &result);
 *
 * The ysSemSynch() call converts the effect of the asynchronous
 * operation into a synchronous one.
 */
void ysSemSynch(ysevt *sem, dvoid *arg);

/*
 * ysSemUsrp, ysSemExid, ysSemArg - semaphore information
 *
 * DESCRIPTION
 * ysSemUsrp() returns the user pointer associated with the semaphore.
 * ysSemExid() returns the exception identifier associated with the
 * semaphore, and ysSemArg() returns the argument associated with the
 * semaphore.  Before the semaphore is set, ysSemExid() and ysSemArg()
 * will return a null pointer.  After the semaphore is set, the pointers
 * returned remain valid until the semaphore is destroyed.
 *
 * These operations may be applied to semaphores created with
 * ysSemCreate() or events created with ysEvtCreate() and "kept".
 */
dvoid      *ysSemUsrp(ysevt *sem);
CONST ysid *ysSemExid(ysevt *sem);
dvoid      *ysSemArg(ysevt *sem);

/*
 * ysTimer, ysAbsTimer - establish a timer
 *
 * SYNOPSIS
 * void ysTimer(CONST sysb8 *timeout, ysevt *evt);
 * void ysAbsTimer(CONST sysb8 *abstime, ysevt *evt);
 *
 * DESCRIPTION
 * ysTimer() establishes a timer that will expire in timeout microseconds.
 * ysAbsTimer() establishes a timer that expires at the absolute time given
 * by abstime (as compared to ysClock()).
 *
 * When the timer expires, the event given is triggered.  If evt is null,
 * then these routines block until the time expires.  When blocked, they
 * may be terminated early by interrupt exceptions.
 *
 * The handler is triggered with the exception YS_EX_TIMEOUT.  When the
 * MX service layer is terminated, any pending handlers are triggered
 * with the exception YS_EX_SHUTDOWN.
 */
void ysSetTimer(boolean reltime, CONST sysb8 *time, ysevt *evt);
#define ysTimer(to, evt)    ysSetTimer(TRUE, (to), (evt))
#define ysAbsTimer(at, evt) ysSetTimer(FALSE, (at), (evt))

/*
 * ysSetWaiter - install a waiter routine
 *
 * DESCRIPTION
 * ysSetWaiter() installs a routine that the asynchronous operations
 * manager will use to block the process when no thread is in a runnable
 * state.  A wait routine typically blocks the process waiting for some
 * external event (such as I/O).  The wait routine is passed the user
 * pointer and a timeout value.  This specifies the longest time (in
 * microseconds) that the wait routine should remain blocked even if
 * no event occurs.
 *
 * This routine returns the old waiter routine and user pointer in *oldwtr
 * and *oldusrp, respectively.  These arguments are set to null if there
 * was no previously installed routine.  If oldwtr is null, then the
 * old values are not returned.
 */
typedef void (*ysWaiterCB)(dvoid *usrp, ub4 delay);
void ysSetWaiter(ysWaiterCB wtr, dvoid *usrp,
		 ysWaiterCB *oldwtr, dvoid **oldusrp);

/*
 * ysSetIdler - install an idler routine
 *
 * DESCRIPTION
 * ysSetIdler() installs a routine that should be called by the event
 * manager during a yield.  In this way, "pseudo-threads" can temporarily
 * gain execution control to perform some set of tasks.
 *
 * This routine is identified by nm, thus allowing a routine to be
 * replaced or removed (by passing a null handler).  The given handler
 * is invoked during idle.  The argument passed to the handler is a
 * pointer to a boolean value.  This value should be set to TRUE if
 * the idler performs any "activity".  Activity is very carefully
 * defined.  Typically, an idler checks a bunch of state to see if it
 * should do something in response to changes.  If there are no changes,
 * and therefore, the idler takes no further action, then it has done
 * nothing.  If, on the other hand, the idler takes action that could
 * modify state maintained by a separate component of the system, then
 * the idler has performed activity and the value should be set to TRUE.
 * DO NOT CASUALLY SET THIS VALUE TO TRUE AS YOU MAY CAUSE THE PROCESS
 * TO SPIN IF NOT CAREFUL.
 *
 * When the MX service layer is terminated, all idlers that are
 * still installed receive a YS_EX_SHUTDOWN exception.
 */
void ysSetIdler(CONST char *nm, ysHndlr hndlr, dvoid *usrp);

/*
 * ysYield - temporarily yield execution control
 *
 * DESCRIPTION
 * ysYield() is used to temporarily yield execution control to another
 * thread.  Even in a single-threaded process, it is still necessary
 * to yield control periodically since other "pseudo-threads" may
 * still need to operate.
 *
 * ysYield() is called implicitly when performing synchronous blocking
 * or polling operations but at no other time.  Of special note, ysSemTest()
 * does not yield.
 */
void ysYield(void);

/*
 * ysIntr - external interrupt
 *
 * DESCRIPTION
 * ysIntr() should be called when an external interrupt is detected
 * (e.g. ctl-C, SIGINT).  ysIntr() will cause the exception intrid
 * to be synchronously raised the next time the thread yields.  If not
 * caught, this may terminate the process.  Otherwise, it may be handled
 * just as any exception would be.  This routine may be called during O/S
 * interrupts.  intrid will usually be YS_EX_INTERRUPT or YS_EX_SHUTDOWN.
 */
void ysIntr(CONST ysid *intrid);

/*
 * ysSetIntr() - set an interrupt handler
 *
 * DESCRIPTION
 * Rather than causing a thrown exception when ysIntr() is called, an
 * interrupt handler may be installed.  Then, instead of raising the
 * INTERRUPT exception, the handler gets invoked.  The handler may
 * itself choose to raise an exception, if desired.
 */
ysHndlr ysSetIntr(ysHndlr hndlr, dvoid *usrp);

EXTC_END
#endif /* YSV_ORACLE */
