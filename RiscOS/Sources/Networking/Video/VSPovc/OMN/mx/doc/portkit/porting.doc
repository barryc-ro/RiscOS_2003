
	      Oracle Media Exchange Porting Guide Document


1. Product Overview

1.1 Freeze

    This document reflects the 3.3.2 revision of MX.  For the latest
    revision information, see the $SRCHOME/mx/doc/release.doc file.

1.2 Dependencies

    In general, it is intended that the MX product not depend upon any other 
    Oracle product, not even Oracle CORE.

    See /vobs/mx/doc/notes/3.3.2-release-notes for information specific to 
    the 3.3.2 release.

1.3 Porting Features

    See $SRCHOME/mx/doc/README.doc for a list of customer-visible new  
    or changed features.

    The following components of the MX product are required to support
    the RPC-based interface:

	YS   - Services layer.
        MT   - Media Tools layer.
        MN   - Media Net.
        MISC - Other tools (logger).

    The following additional components of the MX product are also
    required if the Object-oriented interface is to be supported:

	YC   - Object-oriented IDL compiler
        YD   - Object-oriented routine daemon
        YE   - Object-oriented event channels
        YO   - Object-oriented object layer.
        YR   - Object-oriented interface repository
	YT   - Object-oriented transport interface to MN layer.

    When considering a porting release, the ultimate purpose of the port 
    needs to be  established.  There are several different ways MX can be 
    ported, based upon the purpose of the release.  Each has different 
    requirements:

        - Porting Media Net to a client
        - Porting Media Net to a server
        - Application development with Media Net
        - Deployments 

    Naturally, more than one of these may be combined.  Also, the ultimate 
    purpose of release always includes deployment, but may or may not include 
    application development support.

    For deployments, we ship binaries, and documentation for those binaries.
    For a given deployment, more than one concurrent release may be required
    to cover different platforms (e.g. Media Net for Sequent, Media Net for
    nCube). 

    For application development, we ship the same basic binaries as
    for deployments.  In addtion, we add libraries, header files, and
    the interface definition language (IDL) compiler.

    The goal of the client-side port is to allow the libraries needed for
    application development to be built on the target platform.  

    The goal of the server-side port is to allow all binaries to be built.
    The only exception to this is the IDL compiler, which should be buildable
    on application servers and other development platforms, but not on servers
    which are exclusively intended for delivering video.  (The IDL compiler 
    can run quite successfully on these platform, but it does not make a
    lot of sense for it do so.)

2. Resource Requirement

2.1 Staff

     The following figures are approximate and should be taken as such.

     The RPC based components have significant OSDs which affect the
     porting times given below.
   
        Porting the YS   component of MX should take   5 Developer Days.
        Porting the MT   component of MX should take   1 Developer Day.
        Porting the MN   component of MX should take   4 Developer Days.
        Porting the MISC component of MX should take   1 Developer Days.

     The Object-oriented interface has no OSDs beyond those for the RPC
     based components above.  As such, the porting time for the Object-
     Oriented interface should be quite short.

        Porting the YC   component of MX should take   1 Developer Days.
        Porting the YD   component of MX should take   1 Developer Days.
        Porting the YE   component of MX should take   1 Developer Days.
        Porting the YO   component of MX should take   1 Developer Days.
        Porting the YR   component of MX should take   1 Developer Days.
        Porting the YT   component of MX should take   1 Developer Days.

2.2 Vendor Software Requirements

     MX does not require any ISPD software products.

2.3 OS Requirements

     The Operating Systems provided by most general-purpose computers
     will be suitable for executing Oracle Media Exchange.

2.3.1 Compiler/linker requirements

     The Oracle Media Exchange software deviates from strict OCCS guidelines 
  because it was felt that all of the systems we are targeting are relatively
  new, and do not have the restrictions that many legacy systems impose on 
  the source code.

	- ANSI-compliant compiler.  This includes ANSI prototypes, ANSI
          style variable-length argument lists, const and voltatile qualifiers,
          __LINE__ macro, __FILE__ macro, ## macro, etc.

	- Must provide at least N significant characters in external
          identifiers (N probably around 16) for the RPC interface.

	- Must provide at least M significant characters in external
          identifiers (N probably around 31) for the RPC interface. Note
          that the use of extremely long names was required for the
          sake of CORBA compatibility.

2.3.2 General (MT and YS components) requirements
  
     It is expected that most platforms will be able to meet these
  general requirements.  Many are obvious, but are listed here for
  the sake of completeness.

	- "Host" file system.  NFS is acceptable.  Need not be high-
	  performance. For MPP systems, it must be accessible by all MPP 
          nodes.  Must be writable, but consistency is not important.  
          Used mainly for configuration files and error logging.  

        - Ability to write to the "controlling terminal" from all
          mpp nodes (separate error and output streams). Ability
          to write to the "system console".  Ability to detach from
          the controlling terminal (and associated process) and continue 
          execution.  

        - Desirable: Writing to the system log file.

	- Non-local goto ala setjmp and longjmp.  Ability to extract
          pc from jumpbuf desirable for tracing.  

	- Environment variables or equivalent.  Ability to get complete
          environment at one shot, either thru a unix-like envp mechanism
          or by determining all env var names and iterating getting 
          their bindings.

	- Ability to exit and abort a process.  Abort should provide
          some ability to analyze the problem (core file, suspend process,
          etc).

	- Ability to determine some sort of host name and host id.

	- Ability to return statistics about memory and cpu utilization for
          management tools.

        - Ability to intercept ^c's or other termination signals.  Used for
          cleanup in some operations.

	- Desirable: Ability to spawn new processes.  

	- Desirable: Non-preemptive threads package.  If your OS doesn't
          provide this, we provide a "portable" implementation with only
          a few OSDs releated to switching stack segments.  We recommend
          that you use our "portable" implementation.

2.3.4 Clocking requirements.

	- Clock with absolute wall time, with number of milliseconds past
	  the "epoch".

2.3.5 Media net requirements

	- UDP/IP for interoperability with other vendor's systems.  It is 
	  technically possible to build a media exchange deployment that 
	  does not use UDP/IP at all, but it will be difficult to integrate 
	  such a system with the rest of the world.

        _ For MPP platforms, some IPC mechanism.  Must be connectionless and 
          totally non-blocking. Must be extremely light-weight.  UDP is not 
          usually acceptable because it is too heavy and tends to block 
          unexpectedly. Must provide read with ms timeout.  Moderate 
          performance acceptable. 

	- Ability to block and unblock interrupts from UDP/IPC drivers, if
          an interrupt-driven UDP interface is available.

	- Ability to pause.  Should be able to break out of a pause
          when new data arrives, if an interrupt-driven UDP interface is
          available.

3. Source Layout

3.1 Changes to Directory Structure in MX 3.0

     The following changes have been made to the directory structure for 
     release 3.0 of MX.

     The NET component, present in previous versions of MX, is now part of 
     the RTS product.  The $SRCHOME/mx/src/net directory sub-tree should be
     removed from the MX product.

     The MSM component, present in previous versions of MX, has been 
     promoted to product status.  The $SRCHOME/mx/src/msm directory 
     sub-tree should be removed from the MX product.

     New generic directories have been added for the YC, YD, YE, YO,
     YR, and YT components.

3.2 Directory Structure
    
     The MX product resides in the standard directory tree under $SRCHOME/mx. 

     The MX product is released on several base platforms.  Therefore, the 
     OSD, binary, and library directories are further divided by platform. 

     In addition, OSDs reside in several component-level directories, not 
     in a single product-level directory.

     The following directories are present:

        $SRCHOME/mx/admin               - administration files.
        $SRCHOME/mx/bin/$ARCH           - reference executable dirs
        $SRCHOME/mx/lib/$ARCH           - refercenc object library dirs
        $SRCHOME/mx/doc                 - documentation files (like this one)
        $SRCHOME/mx/demo                - demo files
        $SRCHOME/mx/install             - sample installation scripts
        $SRCHOME/mx/man                 - unix-style man pages for MX
        $SRCHOME/mx/utl                 - MX utilities (probably none).
        $SRCHOME/mx/pub                 - customer visible header files
        $SRCHOME/mx/inc                 - cross-product visible header files
        $SRCHOME/mx/src/inc             - cross-component visible header files
	$SRCHOME/mx/src/bin/$ARCH	- executable build directory
	$SRCHOME/mx/src/lib/$ARCH	- object library build directory
        $SRCHOME/mx/src/misc            - MISC component source files.
        $SRCHOME/mx/src/misc/sosd/$ARCH - MISC component OSDs.
        $SRCHOME/mx/src/mn              - MN component source (media net)
        $SRCHOME/mx/src/mn/sosd/$ARCH   - MN component OSDs.
        $SRCHOME/mx/src/mt              - MT component source (media tools)
        $SRCHOME/mx/src/mt/sosd/$ARCH   - MT component OSDs.
        $SRCHOME/mx/src/ys              - YS component source (services layer)
        $SRCHOME/mx/src/ys/sosd/$ARCH   - YS component OSDs.
	$SRCHOME/mx/src/yc		- YC component source (no osds).
	$SRCHOME/mx/src/yd		- YD component source (no osds).
	$SRCHOME/mx/src/ye		- YE component source (no osds).
	$SRCHOME/mx/src/yo		- YO component source (no osds).
	$SRCHOME/mx/src/yr		- YR component source (no osds).
	$SRCHOME/mx/src/yt		- YT component source (no osds).
        $SRCHOME/mx/test/yc		- YC component test files.
        $SRCHOME/mx/test/yd		- YD component test files.
        $SRCHOME/mx/test/ye		- YE component test files.
        $SRCHOME/mx/test/yo		- YO component test files.
        $SRCHOME/mx/test/yt		- YR component test files.
        $SRCHOME/mx/test/yt		- YT component test files.
        $SRCHOME/mx/test/ys		- YS component test files.

3.2 Files

3.2.1 File naming conventions

     Alas, the file prefix conventions and components do not correspond on a 
     one-to-one basis. 

     The following table shows the mapping for generic files. Generic source 
     files for a component are located in $SRCHOME/mx/src/<component>.

	YS*	- Service layer generic source file, YS component
	MT*     - Media tools generic source file, MT component
	MN*     - Media net generic source file, MN component
        MZN*    - Media net Name server generic source file, MN component
	MZL*	- Media server logger generic source file, MISC component
        MKE*	- Media kernel error generic source file, MISC component
	YC*	- Object-oriented IDL compiler generic source file.
	YD*     - Object-oriented routine daemon generic source file.	
	YE*     - Object-oriented event channel generic source file.	
	YO*     - Object-oriented object layer generic source file.	
	YR*     - Object-oriented interface repository generic source file.
	YT*     - Object-oriented transport interface generic source file.

     The following table shows the mapping for OSD files.  OSD source files 
     for a component are located in $SRCHOME/mx/src/<comp>/sosd/$ARCH.

	SYS*	- Service layer OSD source file, YS component
        SMT*    - Media tools OSD source file, MT component
	SMN*    - Media net OSD source file, MN component
	SMZL*	- Media server logger OSD source file, MISC component
        SMKE*	- Media kernel error generic source file, MISC component

3.2.2 File extention conventions

     The following special file name extentions are used in MX:

	.idl	- Interface Definition Language.  Input file type for
                  the object-oriented IDL compiler.
  
3.2.3 Configuration file naming conventions.

    The logging service (MZL, part of the MISC component) has a message file
which provides strings for each error number.  This file can be found in 
$SRCHOME/mx/admin/mzlm.dat.

4. Porting Process

     The RPC-based components must be ported prior to porting the Object-   
     Oriented components.

     We recommend that the RPC components be ported in the following order:

	YS, MT, MISC, MN.

     We recommend that the Object-Oriented components be ported in the 
     following order:

	YT, YC, YO, YR, YD, YE.

     Create new directories for your platform-specific code called
     $SRCHOME/mx/src/<comp>/sosd/<plat>, where <comp> is each of the 
     RPC component names as above and <plat> represents the name of your 
     platform (the "platform code").  Implement the required OSD modules 
     for your platform in these directories.

4.1 Environment

     The followning environment variables must be set prior to building:

       PWD          present working directory (set by tcsh automatically)
       ARCH         platform code (<plat> from above) 
       SRCHOME      root of source tree

4.2 Makefiles

     The GNU make utility (V3.72.1 or higher) is required to build MX
using the supplied makefiles.  These files take advantage of several
features only inplemented by GNU make, and not by the standard Unix make.

     We have attempted to use common makefiles for the building of the MX
product on all of the base platforms.  Differences between platforms are
controlled by the use of the GNU make conditional constructs ("ifeq", "ifneq",
"else", and "endif").

     We have generally not specified any header dependencies in these make
files.  Hence, modifying a header file will not force a rebuild of source 
files that depend on that header.  Whenever a header file is modified, the
safest thing to do is a complete rebuild.  This should happen rarely.

     A platform-specific makefile must be created in the directory
$SRCHOME/mx/src/buildtools; the name of the file is the platform code itself 
with a .mk extension.  The file contains platform-specific make macros or 
rules.  In general, the following macros need to be defined:

        CC              compiler used (eg gcc)
        LD              linker used (eg gcc)
        AR              archiver used (eg ar)
        RANLIB          ranlib used (eg ranlib or true)
        DEBUG           cc debug flags (eg -g)
        OPTIMIZE        cc optimize flags (eg nothing for no optimization)

     A change may be required to the file $SRCHOME/mx/src/Makefile to 
define the set of componets that are to be built on this platform. The
SUBDIRS macro is used for this purpose.  An example modification might look
like: 

        ifeq ($(ARCH),myplatform)
           SUBDIRS = misc ys mt mn
        else
           SUBDIRS = misc ys mt mn yc yd ye yo yr yt
        endif

4.3 SODSs

4.3.1 New or Changed OSDs

    This section documents new or changed OSD interfaces on a release
    by release basis.

4.3.1.1 New or Changed OSDs in MX 3.1

    This section summarizes the OSD interfaces which have been changed in
    version 3.1 of MX.  It does not document changes in the implementation of
    the OSDs on the reference platform which may have been made, for example,
    to correct bugs.

4.3.1.1.1 Obsolete files

    The following files are now obsolete:

	$SRCHOME/mx/src/misc/sosd/$ARCH/smke.h
	$SRCHOME/mx/src/misc/sosd/$ARCH/smke.c

4.3.1.1.2 Changed interface to syslConsole

    The interface to syslConsole in sysi.[ch] has been changed to include
    a new severity level parameter.  See the header file for details.

4.3.1.1.3 Changes to sysfp.[ch]

    The following changes have been made to sysfp.[ch].  See the header
    file and sample implementation for details.

	Usage of kind argument in sysfpOpen().
	Addition of sysfpGetDir() function.
	Change of kind argument to suffix in sysfpForm().
	Addition of suffix argument to sysfpTemp().

4.3.1.1.4 Changes to syst.[ch]

    The threads OSDs are now implemented in such a way that either a 
    native OS threads package (must be non-preemptive) or our "portable"
    threads package (as seen in MX 3.0) may be used.

    The systStkInit() function, used only by the portable package, has an 
    additional argument which tells the total amount of stack memory that
    the caller will require for all threads.  Some ports may be able to
    use this information to make optimizations about the way the stack
    memory is allocated.

4.3.1.2 New or Changed OSDs in MX 3.0

     This section summarizes the OSD interfaces which have been changed in
version 3.0 of MX.  It does not document changes in the implementation of
the OSDs on the reference platform which may have been made, for example,
to correct bugs.

4.3.1.2.0 Obsolete OSD files

    The following OSD files are obsolete and may be removed.  Note that
in some cases, the functionality has been centralized into the YS layer.
Keeping the old implementations around may be useful in porting the 3.0
YS OSDs.

     $SRCHOME/mx/src/misc/sosd/$ARCH/smzmgs.h
     $SRCHOME/mx/src/misc/sosd/$ARCH/smzmgs.c

4.3.1.2.1 Change in ystm clock unit

     The ystm routines now express time in terms of microseconds, not 
milliseconds as in the 2.2 release of MX.  Any OSDs that you may have 
written which call ysClock() will need to be converted to the new units. 

     The ysTicks() interface is now obsolete.  Any OSDs thay you may have
written which call ysTicks() will need to be converted to call ysClock()
with the new units.

      The generic code, of course, has been modified in all places where the 
change is required.

     As a result, the ystm structure no longer has a "msec" field.  Instead,
it has a "usec" field.  The systmClockToTime routine in sysi.c will need to
be updated so as to reference the "usec" field.

     Also, the units to the sysiPause() call in sysi.c have been changed to 
usecs as well.  Be sure to update your implementation of sysiPause() to account
for this change.

4.3.1.2.2 New sysp functions

     Several new functions must be provided in sysi.[ch].  These all return
information about the process.

	syspGetHostName() - returns host name string
 	syspGetPid()      - returns process id string
 	syspGetAffinity() - returns processor affinity string.
 	syspGetCpuTime()  - returns accumulated cpu time by the process.
 	syspGetMemUsage() - returns memory usage by the process.

     Note that if any of the requested information is not available or 
meaningful on your platform, the routines may be coded to simply return FALSE
in all cases.

4.3.1.2.3 Changed sysb8 package

     The 64-bit arithmetic package, sysb8.[ch], has been extensively
updated.  In particular, the non-native portion is now implemented through
callbacks to a new generic file, ysb8.c.  See the header file for details.

     For native ports, a new macro called sb8lit() has been added to the
sysb8.h header file.  Its purpose is to allow certain compilers to parse
integer literals who's value does not fit into 32 bits. 

4.3.1.2.4 New sysfp functions

      A new function, sysfpExtractFile(), has been added to sysfp.[ch].  The
purpose of the function is to extract both the file name and file suffix
portions from a file specification.  

      A new function, sysfpGetDir(), has been added to sysfp.[ch].  The
purpose of the function is to return a yslst of all the files in a particular
directory.

4.3.1.2.5 Changes to argument parsing.

     The command line argument parsing has been changed.  The following 
OSD files are affected as a result:

      - s0ysmain.c: A new common main entry point, s0ysmain.c, is required.
        It differs from the existing s0mzmain.c entry point in that it 
        neither initializes ys nor mtl prior to invoking the main entry 
        point.  s0mzmain.c will be obsoleted in the near future.

      - s0mzmain.c: The interface between s0mzmain.c and the generic 
	entry point has been changed so as to no longer require an argument 
	map parameter. In addition, the setting of the "uniqueID" resource
	by the OSD main() routine is no longer required.

      - The sample implementations of s0ysmain.c and s0mzmain.c now contain
        correct comments about the usage of these files.  You may wish to 
        update your platform's version of these files with the new comments.

      - sysi.h: A new function has been added, sysrGetMap(), which 
        should return the platform-specific argument map formerly passed 
	as the maps parameter above.

      - sysrld.c: sysrGetMap() must be implemented here.  Also, sysrLoad()
        should only load the enviroment variables or equivalent.  Resource
        file processing is now handled by the generic code via sysfp calls.

4.3.1.2.6 New syst thread support OSDs

     A new OSD module, syst.[ch] has been added to MX to provide thread
support.  No actual support from the OS is required.  The OSD simply
changes stack segments via an adjustment to the saved stack pointer found
in a jmp_buf.

     The function syspGetTid() (usually a macro in sysi.h) must be updated
to work with the yst threads package.  The correct definition is:

	typedef sysb8 sysptid;
      	#define syspGetTid(tid) ystGetId(tid)

4.3.1.2.7 New syssp process spawning OSDs.

     A new set of OSDs for spawning processes has been introduced.  The files
involved are syssp.[ch].  See the header file for details on the interface.
 
     Because this is a highly operating-system-specific function, this 
package may be implemented completely, partially or not at all.  A constant,
SYSSP_IMPLEMENTED, needs to be defined in sysp.h to indicate whether or
not the package has been implemented.


4.3.1.2.8 New sysiNoMsk variable.

     The definition of this CONST external variable has been added to sysi.h 
and the initialization itself has been added to sysi.c.  This variable 
reprsents an "empty signal mask" or equivalent on your platform.

4.3.1.2.9 Better sysl implementations.

     Better implementations of syslConsole and syslGets are provided in the
sample version of sysi.c.  You may choose to update your port's version
accordingly.

4.3.1.2.10 Context management moved to sysx.h

     The context management routines have been moved from sysi.h to sysx.h.
These include syscGetPG() and syscSetPG().

4.3.1.2.11 Changes to Port-Specific Versioning

     The port-specific version information has been moved to sysi.h.  See
section 4.7 for details.

4.3.1.2.12 Net component moved to RTS.

     The net component has been moved to the RTS product.  This eliminates
a circular dependence of MX on RTS and greatly simplifies the build 
process.  This change will impact your OSDs in the following manner:

     - You will have to move your mx/src/net/sosd/<arch> directory to
       rts/src/net/sosd/<arch> prior to beginnin the port.

     - One module from the mt component, mtpa.[ch], is now officially
       part of the net component and has been moved along with the
       other net files. The impact is that if your net initialization
       OSDs, particularly smni.c and smng.c, are using mtpa routines,
       they will have to be modified to be free of this dependence.  
       See the sample implementation for details.

4.3.1.2.13 MSM component promoted to product level

     The MSM component from MX 2.2 has been converted into a separate
product.  Move your osd directory from mx/src/msm/sosd/<arch> to 
msm/src/sosd/<arch> prior to starting the port.

4.3.2 Compile-Time Options

     Ports which support native 64-bit integer operations should insure that
compilation takes place with the symbol SYSB8_NATIVE defined from the command
line (-DSYSB8_NATIVE for unix compilers).

4.3.3 Summary of OSD files

     This summary is presented on a component-by-component basis, since
porters will only have to implement the OSDs corresponding to the components
that they have chosen to port for a given platform.

4.3.3.1 YS Layer OSDs

     s0ysmain.[ch]      - Main program entry point.
     sx.h               - Standard Oracle types header file.
     sysb8.[ch]		- Portable 64-bit integer arithmetic package.
     sysfp.[ch] 	- Host file system interface.
     sysi.[ch]		- Internal service layer misc functions.
     sysrld.c   	- Resource database loading functions
     syssp.[ch]         - Process spawning functions [optional].
     syst.[ch]          - Portable threads packages OSDs.
     sysx.[ch]  	- External service layer functions.
     sysxcd.h		- Data representation macros.

4.3.3.2 MT Layer OSDs

     s0mzmain.c 	- Main program entry point [old, transitional].
     smtcctx.[ch]	- Global context OSDs [old, transitional]
     smtl.[ch]		- Local logging OSDs (write to "stderr", "syslog").

4.3.3.3 MN Layer OSDs

     smn.h		- Media net top-level OSD.  Duplicates ys.
     smng.h		- Media net initialization for gateways (mnars).
     smni.h		- Media net initialization for normal processes.
     smnj.h		- Media net join operation OSDs.
     smn<xxx>.[ch]	- MN network interface for protocol <xxx>.
			  Typical values of <xxx> are udp, ipc, etc.

4.3.3.4 MISC Layer OSDs

     smke.[ch]		- Error handling OSDs.
     smzl.[ch] 		- Distributed logging OSDs.

4.4 Build process

     Before you start, please read section 3.2 on directory structure.  The
     makefiles supplied with this release have been tested against GNU make
     version 3.72.1.

     The top-level makefile for the MX product is found in the directory
     $SRCHOME/mx/src.  It invokes other makefiles in the $SRCHOME/mx/src/<comp>
     directories, which build the components defined via the SUBDIR macro for 
     your platform.

     To invoke gmake on the top-level makefile, change your working directory 
     to $SRCHOME/mx/src. If the ARCH environment variable is not set, supply 
     the ARCH macro on the command line. For example, you might enter:

        gmake ARCH=sun4

     If the PWD environment variable is not set, supply the PWD macro on 
     the command line.  For example, you might enter:

        gmake PWD=/vobs/mx/src

     The above command changes directory to each of the component directories 
     defined the SUBDIRS macro in the makefile and builds derived objects in 
     them.

     It is also possible to rebuild only a particular component.  A makefile 
     is provided in each component directory and gmake can be invoked on the 
     component-level makefile directly to build the corresponding component.  
     The command syntax is the same as in the above: the build platform may 
     need to be specified in the ARCH macro.

     Note that the MN and MISC components have circular dependencies with
     regards to linking.  Be sure to compile both these components before
     attempting to link either.

     Note that the YD, YE, YO and YR components are themselves partially
     written in IDL.  In order to build these components, you will need
     to build the IDL compiler (the YC component).  The IDL compiler
     is dependent upon some of the libraries from YO and YR.  However,
     the situation is not circular.  Starting from nothing it is possible
     to build all these components - which is why we don't have to include
     an IDL compiler binary to bootstrap the process.  Generally, your
     goal should be to build the YC compiler.  Whenever the build stops
     due to an unsatisfied dependence, go build as much of that component
     as is currently possible and retry building YC.  Eventually, YC
     will link.  It can then be used to build the remainder of the 
     components.

     The master makefile in $(SRCHOME)/mx/src performs the above steps
     in the proper order.  You may wish to refer to it for more details.

4.4.1 Libraries produced

     The table below describes the libraries which are part of the 
     MX product.

	Name	    Component	Purpose
	----	    ---------	-------
        libmis	    misc	Misc components
        libmn	    mn		Media net RPC interface
        libmt       mt          Media tools (transitional).
        libycc      yc		C language mapping code generator,
        libycfe     yc		IDL compiler front end.
        libyci      yc		ITL language mapping code generator.
        libyd       yd		Object Daemon 
        libydc      yd		Object Daemon Client stubs
        libyds	    yd          Object Daemon Server stubs
        libyec	    ye		Event channel client stubs
        libyes      ye		Event channel server stubs
        libyo	    yo		Object layer library
        libyoboa    yo		[Add description here]
        libyotk	    yo		[Add descritpion here]
        libyr	    yr          Interface repository
        libyrcl     yr		[Add description here]
        libyrm      yr		[Add description here]
        libyrsv	    yr	        [Add description here]
        libys	    ys		service layer
        libyt       yt          Object transport interface

4.4.2 Binaries produced

     Many of the binaries produced in the 3.0 release have been renamed
     from their counterparts in prior releases.  See the generic user
     documentation for details about the mapping between old and new names.

     The tables below describes the binaries which are part of the 
     MX product.  The first table is for the RPC interface components.

        Name	    Comp  Type	Purpose
        ----	    ----  ----	-------
        mnaddrsrv   mn    srv	media Net gateway process
        mnjoin	    mn    util  join multiple gateways together
        mnln	    mn    util  rpc name server service link utility
        mnlogsrv    misc  srv	distributed message logging server
	mnlogctl    mn    util  logging server control utility
        mnls	    mn    util  rpc name server service list utility
        mnping	    mn    util  tells if a process is reachable
        mnprocsrv   mn    srv 	process server, implements queues of servers
        mnps	    mn    util  list queues known to process server
        mnrm	    mn    util  removes links from name server
        mnrpcid	    mn    util  generates unique program identifiers
        mzrpcnmsrv  mn    srv   name server, maps names to addresses
        mnscmd      mn    util  process server control utility

    This second table is for the Object-Oriented interface components.

        Name	    Comp  Type	Purpose
        ----	    ----  ----	-------
        mnidlc      mn    util  idl compiler.
        mnirctl	    yr    util  interface repository control program
        mnirsrv     yr    srv   interface repository server
	mnnmsrv     yd    srv   object-oriented name server
	mnorbctl    yd    util  orb deamon control utility
        mnorbls     yd    util  orb deamon list utility
        mnorbsrv    yd    srv   orb deamon
        mnorbmet    yd    srv   orb deamon metric server
        ydmtc       yd    util  orb deamon metric load util
        ydmtls      yd    util  orb metric query util
        yeecd       ye    srv   event channel daemon
        yeced       ye    srv   coss event channel daemon
        yeevld      ye    srv   event log and forward daemon

4.4.3.1 Deployments, Application development, and Client Ports

    The table above lists all of the binaries and executables in MX.
    Certain type of ports (see section on "Porting Features") will require
    less than the full set indicated above.

4.4.3.2 Deployment Requirements

    For Deployments, the following binaries are required:

      Basic Binaries
        mnaddrsrv - the address server
        mnrpcnmsrv - the RPC-based name server
        mnls - RPC-based name server query utility
        mnping - network test utility

      ORB-based
        mnorbsrv - ORB daemon
        mnorbls - ORB daemon query utility
        mnorbctl - ORB daemon controller
        mnirctl - interface repository controller
        mnirsrv - interface repository server

      Small/Large Numbers
        mnjoin - address server join utility

      RPC-based
        mnln - RPC-based name server symbolic link creation
        mnrm - RPC-based name server symbolic link removal
        mnprocsrv - RPC-based process server
        mnps - RPC-based process server query utility
        mnscmd - RPC-based process server controller

      ORB-based
        mnorbmet - ORB metrics daemon

4.4.3.3 Application Development Requirements

    For application development, the above binaries are required.  In 
    addition, the following are required:

      Binaries (ORB-based)
        mnidlc - ORB-based IDL compiler

      Libraries
        libmn.a, libmt.a, libys.a

      ORB-based
        libyoboa.a, libyo.a, libyotk.a, libyt.a

      Public APIs
        pub/{mn*.h,mzn.h,ys*.h}
        src/ys/sosd/$ARCH/{sx.h,sysx.h,sysb8.h}

      ORB-based
        pub/{yo*.h,yr*.h,ys*.h,ytex.h,*.idl}

4.4.3.4 Client Requirements

    For the client-only ports, only the following are required. For a port 
    that includes ORB-based code, the porter will also need either a
    working IDL compiler, or pre-generated stubs and header files for  
    the IDL files listed.

      Source
        src/ys/ys*.[ch]
        src/ys/sosd/<platform>/s*.[ch]
        src/mt/mtcctx.c
        src/mt/sosd/<platform>/smtcctx.[ch]
        src/mn/mn.c
        src/mn/mna.c
        src/mn/mne.c
        src/mn/mni.h
        src/mn/mnm.c
        src/mn/mnn.c
        src/mno.c
        src/mn/mnping.c
        src/mn/mnr.c
        src/mn/mnrc.c
        src/mn/mnri.h
        src/mn/mnrs.c
        src/mn/mnt.c
        src/mn/mntr.c
        src/mn/mnts.c
        src/mn/mnx.c
        src/mn/mzn.c
        src/mn/mznc.c
        src/mn/mznt.c
        src/mn/sosd/<plaform>/smn.h
        src/mn/sosd/<plaform>/smnudp.h (other sample NIOs may be appropriate)

      ORB-based
        src/yo*.[ch]
        src/ytemul.c

      APIs and Headers
        Public APIs
        pub/mtcctx.h

      ORB-based
         src/inc/yoidl.idl
         src/inc/ydyoidl.idl
         src/inc/*.h

4.4.3.5 Server Requirements

    In order to build a server-side port, the entire source of Media Net is
    required, and is found in the following directories:

      src/misc, src/mn, src/mt, src/yd, src/ye, src/yo, src/yr, 
      src/ys, src/yt

    plus sample OSD code from all of the corresponding sosd directories for
    the Solaris port should be ported to your platform.

4.5 Installation Scripts

     Installation is now handled via the standard orainst portable installer
     program.  Sample installation scripts are provided in the directory
     $SRCHOME/mx/install.  

     [TBD: Add much more detail here]

4.6 Startup

     The mx server binaries for the RPC interface must be started prior
     to starting the binaries for the object-oriented interface.

     The RPC interface binaries should be started in the following order:

	mnaddrsrv(s), mnrpcnmsrv, mnprocsrv, mnlogsrv

     The object-oriented interface binaries should be started in the 
     following order:

	mnorbsrv, [any others desired]

4.7 Version Control

     Porters may change a fourth or fifth digit in the product version
     string by defining a symbol in sysi.h.  The name of the symbol
     will be based upon the generic version (first three digits) of
     the release, and have the following form:

	SYSI_VERSION_<X>_<Y>_<Z>

     where <x>, <y>, and <z> represent the first three digits of the generic
     version.  The value of this symbol should be a string containing
     the last two digits of the version number.  For example:

	#define SYSI_VERSION_3_0_3 "0.1"

     If the symbol is not defined, the value defaults to "0.0".  Hence,
     the definition of the symbol is optional.

     The reason for incorporating the generic version as part of the 
     symbol name is to provide the automatic reseting of the port-specific
     digits to "0.0" whenever the generic version is incremented.  This
     is intended to simplify the merging of OSD code when the generic
     code version is updated.  As an added benefit, it should be 
     possible to maintain a history in sysi.h, if desired, of the
     highest port-specific versions numbers used for each base release by
     having a separate definition for each.  For example:

	#define SYSI_VERSION_2_2_0 "0.4"
        #define SYSI_VERSION_3_0_2 "0.1"
        #define SYSI_VERSION_3_0_3 "1.2"

     All definitions can co-exist in the same header file; the old ones
     are merely unused by the generic code.

5. Testing

5.1 SOSD Tests

   [ List any stand-alone osd tests and what they do ]

5.2 Regression Tests

   [ Describe how to setup the regression tests ]

   For a list of expected diffs, see the release.doc file.

5.3 Acceptance Tests

5.4 Installation verification scripts

5.5 Ad-hoc Tests

5.6 Test Coverage

   Unknown.

6. Debugging

  [ Describe special tracing features ]

  
7. Performance Tuning


8. Porting Experience

   [ Suggestions from last time around ]

9. QA Tips

