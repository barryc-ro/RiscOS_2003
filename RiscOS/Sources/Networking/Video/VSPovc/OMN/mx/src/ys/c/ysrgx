/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * ysrgx.c - Regular Expression Matching
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif

/*
 * Type Declarations
 */
/* DISABLE check_naming */
struct ysre
{
  char   *exp;                                /* compiled regular expression */
  yslst  *res;            /* list of nested regular expressions (le is ysre) */
};
/* ENABLE check_naming */

/*
 * Constant Declarations
 */
#define YSRE_DOT     (char) 1
#define YSRE_SETBEG  (char) 2
#define YSRE_SETNEG  (char) 3
#define YSRE_SETEND  (char) 4
#define YSRE_STAR    (char) 5
#define YSRE_OR      (char) 6
#define YSRE_NEST    (char) 7
#define YSRE_CARAT   (char) 8
#define YSRE_DOLLAR  (char) 9

static ysmtagDecl(YSRE_TAG) = "ysre";

static CONST_DATA char *ysREMsgs[] =
{
  "invalid regular expression",
  "unbalanced parentheses",
  "unbalanced bracket",
  "number expected",
  "unbalanced brace",
  "illegal value"
};

/*
 * Internal Routine Declarations
 */
STATICF ysre *ysRECompFull(CONST char **regexp);
STATICF ysre *ysRENew(void);
STATICF ysstr *ysRENest(ysre *re, ysstr *exp, ysre *newre);
STATICF void ysREReport(sword idx);
STATICF CONST char *ysREAdvance(ysre *re, CONST char *sp, CONST char *stsp);
STATICF ysre *ysREFind(ysre *re, sword idx);

/*
 * ysRECompile - compile a regular expression
 */
ysre *ysRECompile(CONST char *regexp, boolean glob)
{
  ysre  *re;
  ysstr *newrexp;

  if (glob)
    {
      newrexp = ysStrCreate((char *) 0);
      do
	{
	  switch (*regexp)
	    {
	    case '*': newrexp = ysStrCat(newrexp, ".*"); break;
	    case '?': newrexp = ysStrApp(newrexp, '.'); break;
	    case '{': newrexp = ysStrApp(newrexp, '('); break;
	    case ',': newrexp = ysStrApp(newrexp, '|'); break;
	    default: newrexp = ysStrApp(newrexp, *regexp); break;
	    }
	} while (*(++regexp));

      regexp = ysStrToText(newrexp);
    }
  else
    newrexp = (ysstr *) 0;

  re = ysRECompFull(&regexp);

  if (re && *regexp != '\0')
    {
      ysREReport(1);
      if (re)
	{
	  ysREFree(re);
	  re = (ysre *) 0;
	}
    }

  if (newrexp)
    ysStrDestroy(newrexp);

  return re;
}

/*
 * ysREFree - free a compiled regular expression
 */
void ysREFree(ysre *re)
{
  if (!re)
    return;

  ysmCheck(re, YSRE_TAG);
  if (re->exp)
    ysmGlbFree((dvoid *) re->exp);
  ysLstDestroy(re->res, (ysmff) ysREFree);
  ysmGlbFree((dvoid *) re);
}

/*
 * ysREMatch - match a regular expression
 */
boolean ysREMatch(ysre *re, CONST char *str, boolean embedded)
{
  boolean     carat, dollar;
  CONST char *sp, *stsp;

  ysmCheck(re, YSRE_TAG);

  if (embedded)
    carat = (*re->exp == YSRE_CARAT), dollar = FALSE;
  else
    carat = dollar = TRUE;

  stsp = str;
  sp = ysREAdvance(re, str, stsp);
  if (carat && !sp)
    return FALSE;
  while (!sp && *str != '\0')
    sp = ysREAdvance(re, ++str, stsp);
  if (dollar && ((sp && *sp != '\0') || (!sp && *str != '\0')))
    return FALSE;

  return (sp != (char *) 0);
}

/*
 * ysRECompFull - compile one full regular expression
 */
STATICF ysre *ysRECompFull(CONST char **regexp)
{
  ysre       *re, *newre;
  ysstr      *exp;
  char       *tmp, lc;
  sword       mincnt, maxcnt;
  size_t      lastre;
  CONST char *repos;

  lastre = 0;
  repos = *regexp;
  re = ysRENew();
  exp = ysStrCreate((char *) 0);

  while (*repos && *repos != ')')
    switch (*repos)
      {
      case '^':
	repos++;
	exp = ysStrApp(exp, YSRE_CARAT);
	break;
      case '\\':
	lastre = ysStrLen(exp) + 1, repos++;
	exp = ysStrApp(exp, *repos++);
	break;
      case '.':
	lastre = ysStrLen(exp) + 1, repos++;
	exp = ysStrApp(exp, YSRE_DOT);
	break;
      case '$':
	repos++;
	exp = ysStrApp(exp, YSRE_DOLLAR);
	break;
      case '[':
	lastre = ysStrLen(exp) + 1, repos++;
	exp = ysStrApp(exp, YSRE_SETBEG);
	if (*repos == '^')
	  {
	    repos++;
	    exp = ysStrApp(exp, YSRE_SETNEG);
	  }

	lc = 0;
	while (*repos && *repos != ']')
	  {
	    if (*repos == '-' && lc && *(repos+1) != ']')
	      {
		repos++;
		while (++lc <= *repos)
		  exp = ysStrApp(exp, lc);
		repos++;
	      }
	    else
	      {
		if (*repos == '\\')
		  repos++;

		lc = *repos;
		exp = ysStrApp(exp, *repos++);
	      }
	  }

	if (!*repos)
	  {
	    ysREReport(2);
	    goto error;
	  }
	else
	  {
	    repos++;
	    exp = ysStrApp(exp, YSRE_SETEND);
	  }
	break;
      case '{':
	mincnt = (sword) strtol(++repos, &tmp, 10);
	if (tmp == repos)
	  {
	    ysREReport(3);
	    goto error;
	  }
	else if (mincnt < 0 || mincnt > 255)
	  {
	    ysREReport(5);
	    goto error;
	  }

	repos = tmp;
	if (*repos == ',')
	  repos++, maxcnt = 0;
	else
	  maxcnt = mincnt;

	if (*repos != '}')
	  {
	    maxcnt = (sword) strtol(repos, &tmp, 10);
	    if (tmp == repos)
	      {
		ysREReport(3);
		goto error;
	      }
	    else if (maxcnt < mincnt || maxcnt < 0 || maxcnt > 255)
	      {
		ysREReport(5);
		goto error;
	      }
	    else
	      repos = tmp;
	  }

	if (*repos != '}')
	  {
	    ysREReport(4);
	    goto error;
	  }
	else
	  repos++;

	/* now create the expression */
	if (*(ysStrToText(exp) + lastre - 1) != YSRE_NEST)
	  {
	    newre = ysRENew();
	    newre->exp = ysStrDup(ysStrToText(exp) + lastre - 1);
	    exp = ysStrDel(exp, lastre - 1, (sword) ysStrLen(exp));
	    exp = ysRENest(re, exp, newre);
	  }
	exp = ysStrApp(exp, YSRE_STAR);
	exp = ysStrApp(exp, (char) (mincnt+1));
	exp = ysStrApp(exp, (char) (maxcnt+1));
	lastre = 0;
	break;
      case '*':
	repos++;
	if (!lastre)
	  {
	    lastre = ysStrLen(exp) + 1;
	    exp = ysStrApp(exp, *repos++);
	  }
	else
	  {
	    if (*(ysStrToText(exp) + lastre - 1) != YSRE_NEST)
	      {
		newre = ysRENew();
		newre->exp = ysStrDup(ysStrToText(exp) + lastre - 1);
		exp = ysStrDel(exp, lastre - 1, (sword) ysStrLen(exp));
		exp = ysRENest(re, exp, newre);
	      }
	    exp = ysStrApp(exp, YSRE_STAR);
	    exp = ysStrApp(exp, (char) 1);
	    exp = ysStrApp(exp, (char) 1);
	    lastre = 0;
	  }
	break;
      case '(':
	repos++;
	lastre = ysStrLen(exp) + 1;
	newre = ysRECompFull(&repos);
	if (*repos == ')')
	  repos++;
	else
	  {
	    ysREReport(1);
	    goto error;
	  }
	exp = ysRENest(re, exp, newre);
	break;
      case '|':
	repos++;
	re->exp = ysStrToText(exp);
	newre = ysRENew();
	DISCARD ysLstEnq(newre->res, (dvoid *) re);
	DISCARD ysLstEnq(newre->res, (dvoid *) ysRECompFull(&repos));
	if (*repos != '\0' && *repos != ')')
	  {
	    ysREReport(1);
	    goto error;
	  }
	else
	  {
	    exp = ysStrCreate((char *) 0);
	    exp = ysStrApp(exp, YSRE_OR);
	    re = newre;
	  }
	break;
      default:
	lastre = ysStrLen(exp) + 1;
	exp = ysStrApp(exp, *repos++);
	break;
      }

  *regexp = repos;
  re->exp = ysStrToText(exp);
  return re;

 error:
  ysREFree(re);
  ysStrDestroy(exp);
  return (ysre *) 0;
}

/*
 * ysRENew - create new empty regular expression
 */
STATICF ysre *ysRENew(void)
{
  ysre *re;

  re = (ysre *) ysmGlbAlloc(sizeof(ysre), YSRE_TAG);
  re->exp = (char *) 0;
  re->res = ysLstCreate();
  return re;
}

/*
 * ysRENest - append "nested-subexpression"
 */
STATICF ysstr *ysRENest(ysre *re, ysstr *exp, ysre *newre)
{
  exp = ysStrApp(exp, YSRE_NEST);
  exp = ysStrApp(exp, (char) (ysLstCount(re->res) + 1));
  DISCARD ysLstEnq(re->res, (dvoid *) newre);
  return exp;
}

/*
 * ysREReport - report an error
 */
STATICF void ysREReport(sword idx)
{
  yslError("%s: %s", ysREMsgs[0], ysREMsgs[idx]);
}

/*
 * ysREAdvance - match a regular expression
 */
STATICF CONST char *ysREAdvance(ysre *re, CONST char *sp, CONST char *stsp)
{
  ysre       *subre;
  char       *rep, *holdexp, ch;
  sword       idx, mincnt, maxcnt, origcnt;
  boolean     neg;
  CONST char *origsp, *holdsp;

  rep = re->exp;

  while (*rep)
    switch (ch = *rep++)
      {
      case YSRE_CARAT:
	if (sp != stsp)
	  return (char *) 0;
	break;
      case YSRE_DOLLAR:
	if (*sp != '\0')
	  return (char *) 0;
	break;
      case YSRE_DOT:  /* . */
	if (!*sp++)
	  return (char *) 0;
	break;
      case YSRE_SETBEG:  /* [s], [^s] */
	if (neg = (*rep == YSRE_SETNEG))
	  *rep++;

	while (*rep != YSRE_SETEND)
	  {
	    if (*rep == *sp)
	      break;
	    else
	      rep++;
	  }

	if ((neg && *rep != YSRE_SETEND) || (!neg && *rep == YSRE_SETEND))
	  return (char *) 0;
	else
	  {
	    while (*rep != YSRE_SETEND)
	      rep++;
	    rep++, sp++;
	  }
	break;
      case YSRE_NEST: /* (r) */
	idx = (sword) *rep++;
	subre = ysREFind(re, idx - 1);
	if (*rep == YSRE_STAR)
	  {
	    rep++;
	    mincnt = (sword) *rep++;
	    maxcnt = (sword) *rep++;
	    mincnt -= 1, maxcnt -= 1;
	    origcnt = mincnt;

	    while (mincnt--)
	      if (!(sp = ysREAdvance(subre, sp, stsp)))
		return (char *) 0;

	    holdsp = sp;

	    if (maxcnt)
	      {
		maxcnt -= origcnt;
		while (maxcnt--)
		  if (origsp = ysREAdvance(subre, sp, stsp))
		    sp = origsp;
	      }
	    else
	      while (origsp = ysREAdvance(subre, sp, stsp))
		sp = origsp;

	    /* now check to make sure that we can still match
	     * the rest of the string, or back up if we can't
	     */
	    holdexp = re->exp;
	    re->exp = rep;
	    while (sp > holdsp)
	      {
		if (origsp = ysREAdvance(re, sp, stsp))
		  {
		    re->exp = holdexp;
		    return origsp;
		  }
		else
		  sp--;
	      }
	    re->exp = holdexp;
	  }
	else
	  {
	    sp = ysREAdvance(subre, sp, stsp);
	    if (!sp)
	      return (char *) 0;
	  }
	break;
      case YSRE_OR:   /* r|x */
	origsp = sp;
	subre = ysREFind(re, 0);
	if (!(sp = ysREAdvance(subre, sp, stsp)))
	  {
	    subre = ysREFind(re, 1);
	    if (!(sp = ysREAdvance(subre, origsp, stsp)))
	      return (char *) 0;
	  }
	break;
      default:        /* c */
	if (ch != *sp++)
	  return (char *) 0;
	break;
      }

  if (*rep == YSRE_DOLLAR && *sp == '\0')
    rep++;
  
  return (*rep == '\0' ? sp : (char *) 0);
}

/*
 * ysREFind - locate embedded regular expression
 */
STATICF ysre *ysREFind(ysre *re, sword idx)
{
  ysle *le;

  le = ysLstHead(re->res);
  while (idx--)
    le = ysLstNext(le);
  return (ysre *) ysLstVal(le);
}
