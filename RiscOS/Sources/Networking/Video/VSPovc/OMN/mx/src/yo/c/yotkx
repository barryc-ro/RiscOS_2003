/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yotkx.c - typecode marshalling routines dependant on YO
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef SYSXCD_ORACLE
#include <sysxcd.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
#ifndef YOSX_ORACLE
#include <yosx.h>
#endif
#ifndef YOTK_ORACLE
#include <yotk.h>
#endif
#ifndef YOTKI_ORACLE
#include <yotki.h>
#endif
#ifndef YSR_ORACLE
#include <ysr.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif
#ifndef YOI_ORACLE
#include <yoi.h>
#endif

/* private types */
typedef struct yotked yotked;
struct yotked
{
  yosx *x;
  ub4 reftag;                         /* IOR tag to use for encoding objrefs */
  boolean relrefs;
};

typedef struct yotkdd yotkdd;
struct yotkdd
{
  yosx *x;                                                         /* stream */
  ysmaf alloc;                                         /* allocator function */
  yslst *orlst;                         /* list of object references created */
};

/* TypeCode literals */
static CONST_DATA char * yotkxtcs[] =
{
  "tk_null",                                                    /* yotkNull  */
  "tk_void",                                                    /* yotkVoid  */
  "tk_short",                                                   /* yotkShort */
  "tk_long",                                                     /* yotkLong */
  "tk_ushort",                                                 /* yotkUshort */
  "tk_ulong",                                                   /* yotkUlong */
  "tk_float",                                                   /* yotkFloat */
  "tk_double",                                                 /* yotkDouble */
  "tk_boolean",                                               /* yotkBoolean */
  "tk_char",                                                     /* yotkChar */
  "tk_octet",                                                   /* yotkOctet */
  "tk_any",                                                       /* yotkAny */
  "tk_TypeCode" ,                                            /* yotkTypeCode */
  "tk_Principal",                                           /* yotkPrincipal */
  "tk_objref",                                                 /* yotkObject */
  "tk_struct",                                                 /* yotkStruct */
  "tk_union",                                                   /* yotkUnion */
  "tk_enum",                                                     /* yotkEnum */
  "tk_string",                                                 /* yotkString */
  "tk_sequence",                                             /* yotkSequence */
  "tk_array",                                                   /* yotkArray */
  "tk_alias",                                                   /* yotkAlias */
  "tk_except",                                                 /* yotkExcept */
  "tk_longlong"                                              /* yotkLongLong */
};
#define YOTKXTC_LEN (sizeof(yotkxtcs) / sizeof(char *))

STATICF boolean yotkEncodeT(CONST yotk *tk, dvoid *val1, dvoid *val2,
                           dvoid *usrp);
STATICF boolean yotkDecodeT(CONST yotk *tk, dvoid *val1, dvoid *val2,
                            dvoid *usrp);
STATICF boolean yotkxIntStmCb(ysbv *bv, dvoid *usrp);
STATICF void yotkxInternTk(yosx *txstr,yosx *x);
STATICF boolean yotkCopyValT(CONST yotk *tk, dvoid *val1, dvoid *val2,
                          dvoid *usrp);
STATICF boolean yotkFreeValT(CONST yotk *tk, dvoid *val1, dvoid *val2,
                          dvoid *usrp);
STATICF dvoid *yotkDecAlloc(size_t size);

STATICF void yotkFmtT(CONST char *name, ub4 flags, CONST yotk *tk,
		      dvoid *val1, ysstr **s);
STATICF void yotkTkFmt(ub4 flags, CONST yotk *tk, ysstr **str);
STATICF void yotkFmtStructTrv(ub4 flags, CONST yotk *tk, dvoid *val1,
			      ysstr **s,
			      void (*visit)(CONST char *name, ub4 flags,
					    CONST yotk *tk, dvoid *val1, 
					    ysstr **s));
STATICF void yotkFmtUnionTrv(ub4 flags, CONST yotk *tk, dvoid *val1,
			     ysstr **s,
			     void (*visit)(CONST char *name, ub4 flags,
					   CONST yotk *tk, dvoid *val1,
					   ysstr **s));

/*
 * yotkEncode - encode a value
 */
void yotkEncode(CONST yotk *tk, dvoid *val, yosx *x, ub4 reftag)
{
  yotkEncodeRR(tk,val,x,reftag,FALSE);
}

void yotkEncodeRR(CONST yotk *tk, dvoid *val, yosx *x, ub4 reftag, 
                  boolean relrefs)
{
  yotked d;

  d.x = x;
  d.reftag = reftag;
  d.relrefs = relrefs;

  DISCARD yotkEncodeT(tk,val,(dvoid *)0,(dvoid *)&d);
}

STATICF boolean yotkEncodeT(CONST yotk *tk, dvoid *val1, dvoid *val2,
                           dvoid *usrp)
{
  boolean sts = TRUE;
  yosx     *x;
  ub4      len;
  size_t   sz;
  yoany   *vany;
  yotk    *vtk;
  yotkKind kind;
  YCIDL_sequence_ub1 *vseqoct;

  x = ((yotked *) usrp)->x;

  switch (yotkGetKind(tk))
    {
    case yotkNull:
    case yotkVoid:
      break;
    case yotkShort:
      yosxPutUB2(x, (ub2) *((sb2 *) val1));
      break;
    case yotkUshort:
      yosxPutUB2(x, *((ub2 *) val1));
      break;
    case yotkLong:
      yosxPutUB4(x, (ub4) *((sb4 *) val1));
      break;
    case yotkUlong:
      yosxPutUB4(x, *((ub4 *) val1));
      break;
    case yotkFloat:
    case yotkDouble:
      yseThrow(YS_EX_NOTIMPL);
      break;
    case yotkBoolean:
      yosxPutUB1(x, (ub1) *((boolean *) val1));
      break;
    case yotkChar:
      yosxPutUB1(x, (ub1) *((char *) val1));
      break;
    case yotkOctet:
      yosxPutUB1(x, *((ub1 *) val1));
      break;
    case yotkAny:
      vany = (yoany *) val1;
      sts = yotkEncodeT(yoTcTypeCode, (dvoid *) &vany->_type, (dvoid *) 0,
                        usrp);
      if(sts) 
        sts = yotkEncodeT(vany->_type, vany->_value, (dvoid *) 0, usrp);
      break;
    case yotkTypeCode:
      vtk = *((yotk **) val1);
      kind = yotkGetKind(vtk);
      yosxPutUB4(x, (ub4) kind);
      switch (kind)
	{
	case yotkString:
	case yotkRecurs:
	  yosxPutUB4(x,(ub4)yotkGetLength(vtk));
	  break;
	case yotkObjref:
	case yotkStruct:
	case yotkUnion:
	case yotkEnum:
	case yotkSequence:
	case yotkArray:
	case yotkAlias:
	case yotkExcept:
	  len = yotkGetLength(vtk);
	  yosxPutUB4(x, len);
	  yosxCopy(x, yotkGetBuffer(vtk), (size_t)len);
	  break;
	default:
	  break;
	}
      break;
    case yotkPrincipal:
      vseqoct = (YCIDL_sequence_ub1 *) val1;
      yosxPutUB4(x, vseqoct->_length);
      yosxCopy(x, vseqoct->_buffer, (size_t)vseqoct->_length);
      break;
    case yotkObjref:
      yogiPutOR(x,*(dvoid **)val1,((yotked *) usrp)->reftag);
      if(((yotked *) usrp)->relrefs)
        yoRelease(*(dvoid **)val1);
      break;
    case yotkStruct:
    case yotkUnion:
      sts = yotkTraverse(tk, val1, val2, usrp, yotkEncodeT);
      break;
    case yotkEnum:
      yosxPutUB4(x, *((ub4 *) val1));
      break;
    case yotkString:
      len = yotkGetLength(tk);
      sz = ((*(char **)val1) ? (strlen(*((char **) val1)) + 1) : 0);
      if (len != 0 && (sz > (len+1) || sz == 0))
	yseThrow(YO_EX_BOUNDS);
      yosxPutUB4(x, (ub4)sz);
      if(sz)
        yosxCopy(x, *((ub1 **) val1), sz);
      break;
    case yotkSequence:
      vseqoct = (YCIDL_sequence_ub1 *) val1;
      yosxPutUB4(x, vseqoct->_length);

      /* optimize sequence of octets... */
      if(yotkGetKind(yotkContentType(tk)) == yotkOctet && vseqoct->_length)
	yosxCopy(x, vseqoct->_buffer, (size_t)vseqoct->_length);
      else
	sts = yotkTraverse(tk, val1, val2, usrp, yotkEncodeT);
      break;
    case yotkArray:
    case yotkAlias:
    case yotkExcept:
      sts = yotkTraverse(tk, val1, val2, usrp, yotkEncodeT);
      break;
    case yotkLongLong:
      yosxPutSB8(x, (sysb8 *) val1);
      break;
    default:
      yseThrow(YO_EX_BADCODE);
      break;
    }

  return TRUE;
}

/*
 * yotkDecode - decode a value
 */
void yotkDecode(CONST yotk *tk, dvoid *val, yosx *x, ysmaf af)
{
  yotkDecodeRL(tk,val,x,af,(yslst *)0);
}

void yotkDecodeRL(CONST yotk *tk, dvoid *val, yosx *x, ysmaf af, yslst *orlst)
{
  yotkdd dd;

  dd.x = x;
  dd.alloc = af;
  dd.orlst = orlst;
  DISCARD yotkDecodeT(tk,val,(dvoid *)0,(dvoid *)&dd);
}

STATICF boolean yotkDecodeT(CONST yotk *tk, dvoid *val1, dvoid *val2,
                            dvoid *usrp)
{
  boolean sts = TRUE;
  yosx   *x;
  ysmaf alloc;
  ub4    kind, bounds, len;
  ub1   *buf;
  size_t sz;
  size_t skip = 0;
  yoany *vany;
  const yotk  *tk2;
  YCIDL_sequence_ub1 *vseqoct;
  yosxPos p;
  yosx *txstr;
  ysbv bv;

  x = ((yotkdd *) usrp)->x;
  alloc = ((yotkdd *) usrp)->alloc;
  if(!alloc) alloc = yotkDecAlloc;

  switch (yotkGetKind(tk))
    {
    case yotkNull:
    case yotkVoid:
      break;
    case yotkShort:
      *((sb2 *) val1) = (sb2) yosxGetUB2(x);
      break;
    case yotkUshort:
      *((ub2 *) val1) = yosxGetUB2(x);
      break;
    case yotkLong:
      *((sb4 *) val1) = (sb4) yosxGetUB4(x);
      break;
    case yotkUlong:
      *((ub4 *) val1) = yosxGetUB4(x);
      break;
    case yotkFloat:
    case yotkDouble:
      yseThrow(YS_EX_NOTIMPL);
      break;
    case yotkBoolean:
      *((boolean *) val1) = (boolean) yosxGetUB1(x);
      break;
    case yotkChar:
      *((char *) val1) = (char) yosxGetUB1(x);
      break;
    case yotkOctet:
      *((ub1 *) val1) = yosxGetUB1(x);
      break;
    case yotkAny:
      vany = (yoany *) val1;
      sts = yotkDecodeT(yoTcTypeCode, (dvoid *) &vany->_type, (dvoid *) 0,
                        usrp);
      if(sts)
      {
        yotkSizeAlign(vany->_type, &sz, (size_t *) 0);
	vany->_value = sz ? (*alloc)(sz) : (dvoid*)0;
        sts = yotkDecodeT(vany->_type, vany->_value, (dvoid *) 0, usrp);
      }
      break;
    case yotkTypeCode:
      yosxGetPos(x,&p);
      kind = yosxGetUB4(x);
      switch (kind)
      {
	case yotkNull: *((yotk **) val1) = (yotk *)yoTcNull; break;
	case yotkVoid: *((yotk **) val1) = (yotk *)yoTcVoid; break;
	case yotkShort: *((yotk **) val1) = (yotk *)yoTcShort; break;
	case yotkLong: *((yotk **) val1) = (yotk *)yoTcLong; break;
	case yotkUshort: *((yotk **) val1) = (yotk *)yoTcUshort; break;
	case yotkUlong: *((yotk **) val1) = (yotk *)yoTcUlong; break;
	case yotkFloat: *((yotk **) val1) = (yotk *)yoTcFloat; break;
	case yotkDouble: *((yotk **) val1) = (yotk *)yoTcDouble; break;
	case yotkBoolean: *((yotk **) val1) = (yotk *)yoTcBoolean; break;
	case yotkChar: *((yotk **) val1) = (yotk *)yoTcChar; break;
	case yotkOctet: *((yotk **) val1) = (yotk *)yoTcOctet; break;
	case yotkAny: *((yotk **) val1) = (yotk *)yoTcAny; break;
	case yotkTypeCode: *((yotk **) val1) = (yotk *)yoTcTypeCode; break;
	case yotkPrincipal: *((yotk **) val1) = (yotk *)yoTcPrincipal; break;
	case yotkString:
	  bounds = yosxGetUB4(x);
	  if (!bounds)
	    *((yotk **) val1) = (yotk *)yoTcString;
	  else
	    {
	      buf = (ub1 *) (*alloc)(8);
	      sysxPutB4(buf, yotkString);
	      sysxPutB4(buf+4, bounds);
	      *((yotk **) val1) = (yotk *) buf;
	    }
	  break;
	case yotkObjref:
	case yotkStruct:
	case yotkUnion:
	case yotkEnum:
	case yotkSequence:
	case yotkArray:
	case yotkAlias:
	case yotkExcept:
	  bv.len = ysRoundVal(yosxGetUB4(x)+8, 16);
          bv.buf = (ub1 *) (*alloc)(bv.len);
          len = 0;
          txstr = yosxEncodeToStream(yotkxIntStmCb,&bv,(dvoid *)&len);
          yosxSetPos(x,&p);
          yotkxInternTk(txstr,x);
          yosxEncEnd(txstr, (ysbv **)0, (sword *)0);
	  *((yotk **) val1) = (yotk *) bv.buf;
	  break;
	case yotkLongLong: *((yotk **) val1) = (yotk *)yoTcLongLong; break;
	case yotkRecurs:
	default:
	  yseThrow(YO_EX_BADCODE);
	  break;
	}
      break;
    case yotkPrincipal:
      len = yosxGetUB4(x);
      vseqoct = (YCIDL_sequence_ub1 *) val1;
      vseqoct->_maximum = vseqoct->_length = len;
      vseqoct->_buffer = (ub1 *) (*alloc)((size_t)len);
      yosxCopy(x,vseqoct->_buffer,(size_t)len);
      break;
    case yotkObjref:
      *((dvoid **) val1) = yogiGetOR(x);
      if(((yotkdd *) usrp)->orlst)
        DISCARD ysLstEnq(((yotkdd *) usrp)->orlst,*((dvoid **)val1));
      break;
    case yotkStruct:
    case yotkUnion:
      sts = yotkTraverse(tk, val1, val2, usrp, yotkDecodeT);
      break;
    case yotkEnum:
      *((ub4 *) val1) = yosxGetUB4(x);
      break;
    case yotkString:
      len = yosxGetUB4(x);
      bounds = yotkGetLength(tk);
      skip = 0;
      if (!bounds)
      {
        if(len)
          *((char **) val1) = (char *) (*alloc)((size_t)len);
        else
          *((char **) val1) = (char *) 0;
      }
      else
      {
        bounds++;
        *((char **) val1) = (char *) (*alloc)((size_t)bounds);
        if (len > bounds)
        {
          skip = (size_t) (len - bounds);
          len = bounds;
        }
      }
      if(len)
      {
        yosxCopy(x, *((ub1 **) val1), (size_t)len);
        yosxSkip(x, skip);
        if(skip)
          (*(ub1 **)val1)[len-1] = '\0';
      }
      break;
    case yotkSequence:
      len = yosxGetUB4(x);
      vseqoct = (YCIDL_sequence_ub1 *) val1;

      /* pick up element type typecode and bounds */
      yotkCollDecomp(tk, &tk2, &bounds);
      if (yotkGetKind(tk2) == yotkRecurs)
	tk2 = tk2 + ((sb4) yotkGetLength(tk2)) + 4;
      yotkSizeAlign(tk2, &sz, (size_t *) 0);

      skip = 0;
      if(!bounds)
      {
        vseqoct->_maximum = vseqoct->_length = len;
        if(len)
          vseqoct->_buffer = (ub1 *)(*alloc)((size_t)(sz*len));
        else
          vseqoct->_buffer = (ub1 *)0;
      }
      else
      {
        vseqoct->_maximum = bounds;
        vseqoct->_buffer = (ub1 *)(*alloc)((size_t)(sz*bounds));

        if (vseqoct->_maximum < len)
        {
          vseqoct->_length = vseqoct->_maximum;
          skip = (size_t)((len - vseqoct->_maximum) * sz);
        }
        else
          vseqoct->_length = len;
      }

      /* inline sequence of octet here, else slow traverse */
      tk2 = yotkContentType(tk);
 
      if (yotkGetKind(tk2) == yotkOctet)
        yosxCopy(x, vseqoct->_buffer, len);
      else
	sts = yotkTraverse(tk, val1, val2, usrp, yotkDecodeT);

      yosxSkip(x, skip);
      break;
    case yotkArray:
    case yotkAlias:
    case yotkExcept:
      sts = yotkTraverse(tk, val1, val2, usrp, yotkDecodeT);
      break;
    case yotkLongLong:
      yosxGetSB8(x, (sysb8 *) val1);
      break;
    default:
      yseThrow(YO_EX_BADCODE);
      break;
    }

  return sts;
}

STATICF boolean yotkxIntStmCb(ysbv *bv, dvoid *usrp)
{
  ub4 cnt = *(ub4 *)usrp;

  if(cnt && bv->len > 0)
    ysePanic(YO_EX_INTERNAL);
  (*(ub4 *)usrp)++;
  return TRUE;
}

STATICF void yotkxInternTk(yosx *txstr,yosx *x)
{
  boolean oldsex;
  ub4 kind, len, cnt, i;
  const yotk *dtk;
  yotkKind dkind;

  kind = yosxGetUB4(x);
  yosxPutNetUB4(txstr, kind);

  switch(kind)                /* weed out the simple and primative typecodes */
  {
  case yotkString:
  case yotkRecurs:
    yosxPutNetUB4(txstr,yosxGetUB4(x));
    /* fall through */
  case yotkNull:
  case yotkVoid:
  case yotkShort:
  case yotkLong:
  case yotkUshort:
  case yotkUlong:
  case yotkFloat:
  case yotkDouble:
  case yotkBoolean:
  case yotkChar:
  case yotkOctet:
  case yotkAny:
  case yotkTypeCode:
  case yotkPrincipal:
  case yotkLongLong:
    return;
  }

  /* only complex typecodes execute this code path */
  yosxPutNetUB4(txstr, yosxGetUB4(x));               /* encapsulation length */
  oldsex = yosxDecGet(x);
  yosxDecSet(x,yosxGetUB1(x));                                /* set bytesex */
  yosxPutNetUB1(txstr,(ub1)0);
  switch(kind)
  {
  case yotkObjref:
  case yotkStruct:
  case yotkUnion:
  case yotkEnum:
  case yotkAlias:
  case yotkExcept:
    len = yosxGetUB4(x);                             /* repository id string */
    yosxPutNetUB4(txstr,len);
    yosxCopy(x,txstr->ptr,len);
    yosxSkip(txstr, (size_t) len);

    len = yosxGetUB4(x);                                      /* name string */
    yosxPutNetUB4(txstr,len);
    yosxCopy(x,txstr->ptr,len);
    yosxSkip(txstr, (size_t) len);
    break;
  }

  switch(kind)
  {
  case yotkObjref:
    /* do nothing */
    break;
  case yotkStruct:
  case yotkExcept:
    cnt = yosxGetUB4(x);
    yosxPutNetUB4(txstr,cnt);
    for(i=0; i < cnt; i++)
    {
      /* name string */
      len = yosxGetUB4(x);
      yosxPutNetUB4(txstr,len);
      yosxCopy(x,txstr->ptr,len);
      yosxSkip(txstr, (size_t) len);
      /* typecode */
      yotkxInternTk(txstr,x);
    }
    break;
  case yotkUnion:
    yosxAlign(txstr, (sword)4);                   /* to get start pos of tk */
    dtk = (yotk *) txstr->ptr;
    yotkxInternTk(txstr,x);                                    /* desc type */
    dkind = yotkGetKind(yotkGetBaseType(dtk));

    yosxPutNetUB4(txstr,yosxGetUB4(x));                          /* default */
    cnt = yosxGetUB4(x);                                  /* count of cases */
    yosxPutNetUB4(txstr,cnt);
    for(i=0; i < cnt; i++)
    {
      switch(dkind)                                          /* label value */
      {
        case yotkLong:
        case yotkUlong:
        case yotkEnum:
          yosxPutNetUB4(txstr, yosxGetUB4(x));
          break;
        case yotkShort:
        case yotkUshort:
          yosxPutNetUB2(txstr, yosxGetUB2(x));
          break;
        case yotkChar:
        case yotkBoolean:
          yosxPutNetUB1(txstr, yosxGetUB1(x));
          break;
        default:
          yseThrow(YO_EX_BADCODE);
          break;
      }
      /* name string */
      len = yosxGetUB4(x);
      yosxPutNetUB4(txstr,len);
      yosxCopy(x,txstr->ptr,len);
      yosxSkip(txstr,(size_t)len);
      /* typecode */
      yotkxInternTk(txstr,x);
    }
    break;
  case yotkEnum:
    cnt = yosxGetUB4(x);
    yosxPutNetUB4(txstr,cnt);
    for(i=0; i < cnt; i++)
    {
      /* member name string */
      len = yosxGetUB4(x);
      yosxPutNetUB4(txstr,len);
      yosxCopy(x,txstr->ptr,len);
      yosxSkip(txstr,len);
    }
    break;
  case yotkAlias:
    yotkxInternTk(txstr,x);
    break;
  case yotkSequence:
  case yotkArray:
    yotkxInternTk(txstr,x);
    yosxPutNetUB4(txstr,yosxGetUB4(x));
    break;
  }
  yosxDecSet(x,oldsex);
}

void yotkCopyVal(CONST yotk *tk, dvoid *val1, dvoid *val2, ysmaf alloc)
{
  if(!val1 || !val2)                                         /* for kcoleman */
    yseThrow(YS_EX_BADPARAM);

  DISCARD yotkCopyValT(tk,val1,val2,(dvoid *)&alloc);
}

STATICF boolean yotkCopyValT(CONST yotk *tk, dvoid *val1, dvoid *val2,
                             dvoid *usrp)
{
  boolean sts = TRUE;
  ysmaf alloc;
  ub4   bounds, len;
  size_t sz;
  yoany *vany, *vany2;
  const yotk  *tk2;
  YCIDL_sequence_ub1 *vseqoct;

  alloc = *(ysmaf *)usrp;
  if(!alloc) alloc = yotkDecAlloc;

  switch (yotkGetKind(tk))
    {
    case yotkNull:
    case yotkVoid:
      break;
    case yotkShort:
      *((sb2 *) val1) = *((sb2 *) val2);
      break;
    case yotkUshort:
      *((ub2 *) val1) = *((ub2 *) val2);
      break;
    case yotkLong:
      *((sb4 *) val1) = *((sb4 *) val2);
      break;
    case yotkUlong:
      *((ub4 *) val1) = *((ub4 *) val2);
      break;
    case yotkFloat:
    case yotkDouble:
      yseThrow(YS_EX_NOTIMPL);
      break;
    case yotkBoolean:
      *((boolean *) val1) = *((boolean *) val2);
      break;
    case yotkChar:
      *((char *) val1) = *((char *) val2);
      break;
    case yotkOctet:
      *((ub1 *) val1) = *((ub1 *) val2);
      break;
    case yotkAny:
      vany = (yoany *) val1;
      vany2 = (yoany *) val2;
      sts = yotkCopyValT(yoTcTypeCode, (dvoid *) &vany->_type,
                         (dvoid *) &vany2->_type, usrp);
      if(sts)
      {
        yotkSizeAlign(vany->_type, &sz, (size_t *) 0);
	vany->_value = sz ? (*alloc)(sz) : (dvoid*)0;
        sts = yotkCopyValT(vany->_type, (dvoid *) vany->_value,
                           (dvoid *) vany2->_value, usrp);
      }
      break;
    case yotkTypeCode:
      *((yotk **) val1) = yotkDuplicateWaf(*((yotk **)val2), alloc);
      break;
      
    case yotkPrincipal:
      DISCARD memcpy(val1,val2,sizeof(YCIDL_sequence_ub1 *));
      vseqoct = (YCIDL_sequence_ub1 *) val1;
      vseqoct->_buffer = (ub1 *) (*alloc)((size_t)vseqoct->_length);
      DISCARD memcpy(vseqoct->_buffer,((YCIDL_sequence_ub1 *)val2)->_buffer,
                     (size_t)vseqoct->_length);
      break;
    case yotkObjref:
      *((dvoid **) val1) = yoDuplicate(*((dvoid **) val2));
      break;
    case yotkStruct:
    case yotkUnion:
      sts = yotkTraverse(tk, val1, val2, usrp, yotkCopyValT);
      break;
    case yotkEnum:
      *((ub4 *) val1) = *((ub4 *) val2);
      break;
    case yotkString:
      bounds = yotkGetLength(tk);
      if(*((char **) val2))
        len = strlen(*((char **) val2)) + 1;
      else
        len = 0;
      if(!bounds)
      {
        if(len)
        {
          if(alloc == yotkAllocStr)
          {
            *((char **) val1) = yoGetStr(yoCtx,*(char **)val2);
            break;
          }
          else
            *((char **) val1) = (char *) (*alloc)((size_t)len);
        }
        else
          *((char **) val1) = (char *) 0;
      }
      else
      {
        *((char **) val1) = (char *) (*alloc)((size_t)bounds);
        if(len > bounds)
	  len = bounds;
      }
      if(len)
        DISCARD memcpy(*((dvoid **) val1),*((dvoid **) val2), (size_t)len);
      break;
    case yotkSequence:
      DISCARD memcpy( val1, val2, sizeof(YCIDL_sequence_ub1));
      vseqoct = (YCIDL_sequence_ub1 *) val1;
      len = vseqoct->_length;

      yotkCollDecomp(tk, &tk2, &bounds);
      if (yotkGetKind(tk2) == yotkRecurs)
	tk2 = tk2 + ((sb4) yotkGetLength(tk2)) + 4;
      yotkSizeAlign(tk2, &sz, (size_t *) 0);

      if(!bounds)
      {
        if(len)
          vseqoct->_buffer = (ub1 *) (*alloc)((size_t)(sz*len));
        else
          vseqoct->_buffer = (ub1 *)0;
      }
      else
        vseqoct->_buffer = (ub1 *) (*alloc)((size_t)(sz*bounds));
      sts = yotkTraverse(tk, val1, val2, usrp, yotkCopyValT);
      break;
    case yotkArray:
    case yotkAlias:
    case yotkExcept:
      sts = yotkTraverse(tk, val1, val2, usrp, yotkCopyValT);
      break;
    case yotkLongLong:
      *((sysb8 *) val1) = *((sysb8 *) val2);
      break;
    default:
      yseThrow(YO_EX_BADCODE);
      break;
    }

  return sts;
}


/*
 * yotkFreeDecode - free a decoded value
 */
void yotkFreeVal(CONST yotk *tk, dvoid *val, ysmff free)
{
  if(val)                                                    /* for kcoleman */
    DISCARD yotkFreeValT(tk,val,(dvoid *)0,(dvoid *)&free);
}

STATICF boolean yotkFreeValT(CONST yotk *tk, dvoid *val1, dvoid *val2,
                             dvoid *usrp)
{
  boolean sts = TRUE;
  ub4    bounds;
  yoany *vany;
  YCIDL_sequence_ub1 *vseqoct;
  ysmff ff = *(ysmff *) usrp;

  if(!ff) ff = ysmFGlbFree;

  switch (yotkGetKind(tk))
  {
    case yotkNull:
    case yotkVoid:
    case yotkShort:
    case yotkUshort:
    case yotkLong:
    case yotkUlong:
      break;
    case yotkFloat:
    case yotkDouble:
      yseThrow(YS_EX_NOTIMPL);
      break;
    case yotkBoolean:
    case yotkChar:
    case yotkOctet:
      break;
    case yotkAny:
      vany = (yoany *) val1;
      sts = yotkFreeValT(vany->_type, vany->_value, (dvoid *) 0, usrp);
      if(sts)
      {
        sts = yotkFreeValT(yoTcTypeCode, (dvoid *) &vany->_type, (dvoid *) 0,
                           usrp);
        if(sts && vany->_value) (*ff)(vany->_value);
      }
      break;
    case yotkTypeCode:
      yotkFreeWaf(*(yotk **)val1, ff);
      break;
    case yotkPrincipal:
      vseqoct = (YCIDL_sequence_ub1 *) val1;
      (*ff)((dvoid *)vseqoct->_buffer);
      break;
    case yotkObjref:
      yoRelease(*(dvoid **)val1);
      break;
    case yotkStruct:
    case yotkUnion:
      sts = yotkTraverse(tk, val1, val2, usrp, yotkFreeValT);
      break;
    case yotkEnum:
      break;
    case yotkString:
      bounds = yotkGetLength(tk);
      if(*((char **)val1))
      {
        if(!bounds && ff == yotkFreeStr)
          yoFreeStr(yoCtx,*(char **)val1);
        else
          (*ff)((dvoid *)*(char **)val1);
      }
      break;
    case yotkSequence:
      sts = yotkTraverse(tk, val1, val2, usrp, yotkFreeValT);
      vseqoct = (YCIDL_sequence_ub1 *) val1;
      if(vseqoct->_buffer)
        (*ff)((dvoid *)vseqoct->_buffer);
      break;
    case yotkArray:
    case yotkAlias:
    case yotkExcept:
      sts = yotkTraverse(tk, val1, val2, usrp, yotkFreeValT);
      break;
    case yotkLongLong:
      break;
    default:
      yseThrow(YO_EX_BADCODE);
      break;
    }

  return sts;
}

STATICF dvoid *yotkDecAlloc(size_t size)
{
  return ysmGlbAlloc(size,"yotkDecode");
}

/* yotkFmt - produce a pretty-printed representation of a value */
char *yotkFmt(CONST yotk *tk, dvoid *val, ub4 flags)
{
  ysstr *s;
  s = ysStrCreate((char *)0);
  yotkFmtT((char *)0, flags, tk, val, &s);
  return ysStrToText(s);
}

/* yotkFormat - included for backwards compatibility */
char *yotkFormat(CONST yotk *tk, dvoid *val)
{
  return yotkFmt(tk, val, YOTKFMT_NAME | YOTKFMT_COLLAPSE);
}

STATICF void yotkFmtT(CONST char *name, ub4 flags, CONST yotk *tk,
		      dvoid *val1, ysstr **s)
{
  size_t   sz;
  yoany   *vany;
  yotkKind kind;
  YCIDL_sequence_ub1 *vseqoct;
  char     tmp[40];
  char    *str;
  char    *cat = (char *) 0;
  ub4      members;
  ub4      i;
  ub4      bounds;
  const yotk *tk2;
  yosx     x;
  ysbv     bv;
  
  if(name && (flags & YOTKFMT_NAME))
  {
    *s = ysStrCat(*s,name);
    *s = ysStrApp(*s,'=');
  }

  switch (yotkGetKind(tk))
  {
  case yotkNull:
    cat = "<NULL>";
    break;
  case yotkVoid:
    cat = "<VOID>";
    break;
  case yotkShort:
    ysFmtStrl(tmp,sizeof(tmp),"%d",*((sb2 *) val1));
    cat = tmp;
    break;
  case yotkUshort:
    ysFmtStrl(tmp,sizeof(tmp),"%u",*((ub2 *) val1));
    cat = tmp;
    break;
  case yotkLong:
    ysFmtStrl(tmp,sizeof(tmp),"%ld",*((sb4 *) val1));
    cat = tmp;
    break;
  case yotkUlong:
    ysFmtStrl(tmp,sizeof(tmp),"%lu",*((ub4 *) val1));
    cat = tmp;
    break;
  case yotkFloat:
  case yotkDouble:
    yseThrow(YS_EX_NOTIMPL);
    break;
  case yotkBoolean:
    cat = *((boolean *) val1) ? "TRUE" : "FALSE";
    break;
  case yotkChar:
    *s = ysStrApp(*s,'\'');
    *s = ysStrApp(*s,*((char *)val1));
    *s = ysStrApp(*s,'\'');
    break;
  case yotkOctet:
    ysFmtStrl(tmp,sizeof(tmp),"0x%02x",*((ub1 *)val1));
    cat = tmp;
    break;
  case yotkAny:
    vany = (yoany *) val1;
    if (flags & YOTKFMT_COLLAPSE)
    {
      /* drop name */
      yotkFmtT((CONST char *)0, flags, vany->_type, vany->_value, s);
    }
    else
    {
      *s = ysStrCat(*s,"{ ");
      yotkFmtT("_type", flags, yoTcTypeCode, &vany->_type, s);
      *s = ysStrCat(*s," # ");
      yotkFmtT("_value", flags, vany->_type, vany->_value, s);
      *s = ysStrCat(*s," }");
    }
    break;
  case yotkTypeCode:
    yotkTkFmt(flags, *(CONST yotk **)val1, s);
    break;
  case yotkPrincipal:
#ifdef NEVER
    vseqoct = (YCIDL_sequence_ub1 *) val1;
    yosxPutUB4(x, vseqoct->_length);
    yosxCopy(x, vseqoct->_buffer, vseqoct->_length);
#endif
    break;
  case yotkObjref:
    if(*(dvoid **)val1)
    {
      str = yoRefToStr(*(dvoid **)val1);
      *s = ysStrCat(*s,str);
      yoFree((dvoid *)str);
    }
    else
      cat = "<OBJNIL>";
    break;
  case yotkStruct:
  case yotkExcept:
    *s = ysStrCat(*s,"{ ");
    yotkFmtStructTrv(flags, tk, val1, s, yotkFmtT);
    *s = ysStrCat(*s," }");
    break;
  case yotkUnion:
    if (!(flags & YOTKFMT_COLLAPSE))
      *s = ysStrCat(*s,"{ ");
    yotkFmtUnionTrv(flags, tk, val1, s, yotkFmtT);
    if (!(flags & YOTKFMT_COLLAPSE))
      *s = ysStrCat(*s," }");
    break;
  case yotkSequence:
    *s = ysStrCat(*s,"< ");
    vseqoct = (YCIDL_sequence_ub1 *) val1;
    bounds = vseqoct->_length;
    val1 = (dvoid *) vseqoct->_buffer;
    tk = yotkContentType(tk);
    if (yotkGetKind(tk) == yotkRecurs)
      tk = tk + ((sb4) yotkGetLength(tk)) + 4;
    yotkSizeAlign(tk, &sz, (size_t *) 0);
    while ( bounds--)
    {
      yotkFmtT(name, flags, tk, val1, s);
      val1 = (dvoid *) (((ub1 *) val1) + sz);
      if (bounds)
	*s = ysStrCat(*s,", ");
    }
    *s = ysStrCat(*s," >");
    break;
  case yotkArray:
    *s = ysStrCat(*s,"[ ");
    yotkCollDecomp(tk, &tk2, &bounds);
    yotkSizeAlign(tk2, &sz, (size_t)0);
    while (bounds--)
    {
      yotkFmtT(name, flags, tk2, val1, s);
      val1 = (dvoid *) (((ub1 *) val1) + sz);
      if (bounds)
	*s = ysStrCat(*s,", ");
    }
    *s = ysStrCat(*s," ]");
    break;
  case yotkEnum:
    yotkInitStream(&x, tk, &bv);
    yotkxSkipToBuffer(&x);
    yotkxSkipString(&x);
    yotkxSkipString(&x);
    members = yosxGetNetUB4(&x);
    if(*((ub4 *)val1) < members)
    {
      for(i = 0; i < *((ub4 *)val1); i++)
        yotkxSkipString(&x);
      members = yosxGetNetUB4(&x);                  /* skip string length */
      cat = (char *) x.ptr;
    }
    else
      cat = "<invalid value>";
    break;
  case yotkString:
    if(*(char **)val1)
    {
      *s = ysStrApp(*s,'\"');
      *s = ysStrCat(*s,*(char **)val1);
      *s = ysStrApp(*s,'\"');
    }
    else
      cat = "<NULL>";
    break;
  case yotkAlias:
    while((kind = yotkGetKind(tk)) == yotkAlias)
      tk = yotkContentType(tk);
    yotkFmtT((char *)0, flags, tk, val1, s);
    break;
  case yotkLongLong:
    ysFmtStrl(tmp,sizeof(tmp),"%Ld", (sysb8 *)val1);
    cat = tmp;
    break;
  default:
    yseThrow(YO_EX_BADCODE);
    break;
  }
  if(cat)
    *s = ysStrCat(*s,cat);
}

STATICF void yotkTkFmt(ub4 flags, CONST yotk *tk, ysstr **str)
{
  yotkKind kind;
  ub4   len;
  CONST char *out;
  CONST yotk *ctk, *dtk;
  yoany parm;
  ub4   i, cnt;
  
  kind = yotkGetKind(tk);
  if (kind != yotkRecurs && kind <= YOTKXTC_LEN )
    *str = ysStrCat(*str, yotkxtcs[kind]);
  else if (kind == yotkRecurs)
    *str = ysStrCat(*str, "tk_recurs");
  else
    yseThrow(YO_EX_BADCODE);
  
  switch (kind)
  {
  case yotkString:
    *str = ysStrCat(*str, "( ");
    len = yotkLength(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcUlong, (dvoid *)&len, str);
    *str = ysStrCat(*str, " )");
    break;
  case yotkRecurs:
    *str = ysStrCat(*str, "( ");
    len = (ub4) yotkRecOffset(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcUlong, (dvoid *)&len, str);
    *str = ysStrCat(*str, " )");
    break;
  case yotkObjref:
    *str = ysStrCat(*str, "( ");
    out = yotkGetId(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcString, (dvoid *)&out, str);
    *str = ysStrCat(*str, ", ");
    out = yotkGetName(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcString, (dvoid *)&out, str);
    *str = ysStrCat(*str, " )");
    break;
  case yotkSequence:
  case yotkArray:
    *str = ysStrCat(*str, "( ");
    ctk  = yotkContentType(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcTypeCode, (dvoid *)&ctk, str);
    *str = ysStrCat(*str, ", ");
    len = yotkLength(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcUlong, (dvoid *)&len, str);
    *str = ysStrCat(*str, " )");
    break;
  case yotkEnum:
    *str = ysStrCat(*str, "( ");
    out = yotkGetId(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcString, (dvoid *)&out, str);
    *str = ysStrCat(*str, ", ");
    out = yotkGetName(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcString, (dvoid *)&out, str);
    *str = ysStrCat(*str, ", ");
    cnt = yotkMbrCount(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcUlong, (dvoid *)&cnt, str);
    *str = ysStrCat(*str, ", ");
    for (i=0; i<cnt ; i++)
    {
      out = yotkMbrName(tk, i);
      DISCARD yotkFmtT((char *)0, flags, yoTcString, (dvoid *)&out, str);
      if (i < cnt-1)
	*str = ysStrCat(*str, ", ");
    }
    *str = ysStrCat(*str, " )");
    break;
  case yotkStruct:
  case yotkExcept:
    *str = ysStrCat(*str, "( ");
    out = yotkGetId(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcString, (dvoid *)&out, str);
    *str = ysStrCat(*str, ", ");
    out = yotkGetName(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcString, (dvoid *)&out, str);
    *str = ysStrCat(*str, ", ");
    cnt = yotkMbrCount(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcUlong, (dvoid *)&cnt, str);
    *str = ysStrCat(*str, ", ");
    for (i=0; i<cnt ; i++)
    {
      out = yotkMbrName(tk, i);
      DISCARD yotkFmtT((char *)0, flags, yoTcString, (dvoid *)&out, str);
      *str = ysStrCat(*str, ", ");
      ctk = yotkMbrType(tk, i);
      DISCARD yotkFmtT((char *)0, flags, yoTcTypeCode, (dvoid *)&ctk, str);
      if (i < cnt-1)
	*str = ysStrCat(*str, ", ");
     }
    *str = ysStrCat(*str, " )");
    break;
  case yotkUnion:
    *str = ysStrCat(*str, "( ");
    out = yotkGetId(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcString, (dvoid *)&out, str);
    *str = ysStrCat(*str, ", ");
    out = yotkGetName(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcString, (dvoid *)&out, str);
    *str = ysStrCat(*str, ", ");
    dtk = yotkDiscType(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcTypeCode, (dvoid *)&dtk, str);
    *str = ysStrCat(*str, ", ");
    len = (ub4) yotkDefIndex(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcLong, (dvoid *)&len, str);
    *str = ysStrCat(*str, ", ");
    cnt = yotkMbrCount(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcUlong, (dvoid *)&cnt, str);
    *str = ysStrCat(*str, ", ");
    for (i=0; i<cnt ; i++)
    {
      parm = yotkMbrLabel(tk, i);
      DISCARD yotkFmtT((char *)0, flags, parm._type, 
                       (dvoid *)parm._value, str);
      *str = ysStrCat(*str, ", ");
      out = yotkMbrName(tk, i);
      DISCARD yotkFmtT((char *)0, flags, yoTcString, (dvoid *)&out, str);
      *str = ysStrCat(*str, ", ");
      ctk = yotkMbrType(tk, i);
      DISCARD yotkFmtT((char *)0, flags, yoTcTypeCode, (dvoid *)&ctk, str);
      if (i < cnt-1)
	*str = ysStrCat(*str, ", ");
     }
    *str = ysStrCat(*str, " )");
    break;
  case yotkAlias:
    *str = ysStrCat(*str, "( ");
    out = yotkGetId(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcString, (dvoid *)&out, str);
    *str = ysStrCat(*str, ", ");
    out = yotkGetName(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcString, (dvoid *)&out, str);
    *str = ysStrCat(*str, ", ");
    ctk = yotkContentType(tk);
    DISCARD yotkFmtT((char *)0, flags, yoTcTypeCode, (dvoid *)&ctk, str);
    *str = ysStrCat(*str, " )");
    break;
  default:
    break;
  }
}

/* yotkFmtStructTrv - traverse a structure */
STATICF void yotkFmtStructTrv(ub4 flags, CONST yotk *tk,
				dvoid *val1, ysstr **s,
				void (*visit)(CONST char *name, ub4 flags,
						 CONST yotk *tk, dvoid *val1, 
						 ysstr **s))
{
  ub1    *base;
  ub4     members;
  size_t  sz, align, tsz;
  CONST   char *name;
  yosx    x;
  ysbv    bv;
  ub4     len;

  yotkInitStream(&x, tk, &bv);
  yotkxSkipToBuffer(&x);
  yotkxSkipString(&x);                                           /* rep id */
  yotkxSkipString(&x);                                        /* type name */
 
  members = yosxGetNetUB4(&x);
  base = (ub1 *)val1;
  tsz = 0;
  while (members--)
  {
    len = yosxGetNetUB4(&x);
    name = (char *)x.ptr;
    yosxSkip(&x, (size_t)len);                    /* advance past mem name */
    yosxAlign(&x, (sword)4);
    tk = (yotk *) x.ptr;                        /* get the member typecode */
    if (yotkGetKind(tk) == yotkRecurs)
      tk = tk + ((sb4) yotkGetLength(tk));

    yotkSizeAlign(tk, &sz, &align);          /* determine size & alignment */

    /* align the value pointer */
    tsz = ysRoundVal(tsz, align);
    val1 = (dvoid *)(base + tsz);
    (*visit)(name, flags, tk, val1, s);               /* visit the value */

    /* skip the member in the value */
    tsz += sz;
    yotkxSkipTC(&x);
    if (members)
      *s = ysStrCat(*s,", ");
  }
}

/* yotkFmtUnionTrv - traverse a union */
STATICF void yotkFmtUnionTrv(ub4 flags, CONST yotk *tk,
			       dvoid *val1, ysstr **s,
			       void (*visit)(CONST char *name, ub4 flags,
						CONST yotk *tk, dvoid *val1,
						ysstr **s))
{
  const yotk  *disctk;
  const yotk  *dflttk;
  sb4    dflt, lbl, tag;
  ub4    i, arms;
  size_t dsz, usz, ualign;
  char *name = (char *) 0;
  yosx x;
  ysbv bv;
  ub4 len;
  yotkKind dkind;
  yosxPos pos;

  yotkInitStream(&x, tk, &bv);
  yotkxSkipToBuffer(&x);
  yotkxSkipString(&x);                                           /* rep id */
  yotkxSkipString(&x);                                        /* type name */
 
  /* process discriminator */
  yosxAlign(&x, (sword)4);                          /* start of discrim tk */
  disctk = (yotk *) x.ptr;

  if (!(flags & YOTKFMT_COLLAPSE))
    (*visit)("_d", flags, disctk, val1, s);       /* visit the discriminator */
  disctk = yotkGetBaseType(disctk);


  /* get the tag value */
  tag = 0;			/* shut up uninit warning. */
  dkind = yotkGetKind(disctk);
  switch (dkind)
    {
    case yotkShort:
      tag = (sb4) *((sb2 *) val1);
      break;
    case yotkLong:
      tag = *((sb4 *) val1);
      break;
    case yotkUshort:
      tag = (sb4) *((ub2 *) val1);
      break;
    case yotkEnum:
    case yotkUlong:
      tag = (sb4) *((ub4 *) val1);
      break;
    case yotkBoolean:
      tag = (sb4) *((boolean *) val1);
      break;
    case yotkChar:
      tag = (sb4) *((char *) val1);
      break;
    default:
      yseThrow(YO_EX_BADCODE);
      break;
    }

  yotkxSkipTC(&x);                        /* skip the discriminator typecode */
  dflt = (sb4) yosxGetNetUB4(&x);                         /* get default ind */
  dflttk = (yotk *) 0;                                     /* no default arm */

  arms = yosxGetNetUB4(&x);                        /* get the number of arms */
  yotkSizeAlign(disctk, &dsz, (size_t *) 0);             /* get discrim size */
  yosxGetPos(&x, &pos);
  yotkUnionArmsSz(arms, dsz, &x, &usz, &ualign);
  yosxSetPos(&x, &pos);

  /* skip past the discriminator */
  dsz = ysRoundVal(dsz, ualign);
  val1 = (dvoid *) (((ub1 *) val1) + dsz);

  /* locate the selected arm (remember default position) */
  for (i = 0; i < arms; i++)
    {
      lbl = (sb4)0;
      switch (dkind)                                /* get the label value */
      {
        case yotkShort:
        case yotkUshort:
          lbl = (sb4) yosxGetNetUB2(&x);
          break;
        case yotkLong:
        case yotkEnum:
        case yotkUlong:
          lbl = (sb4) yosxGetNetUB4(&x);
          break;
        case yotkChar:
        case yotkBoolean:
          lbl = (sb4) yosxGetNetUB1(&x);
          break;
      }

      len = yosxGetNetUB4(&x);                                /* name length */
      name = (char *)x.ptr;
      yosxSkip(&x, (size_t)len);                         /* skip member name */

      yosxAlign(&x, (sword)4);                      /* start of mem typecode */
      if (dflt >= 0 && i == (ub4)dflt)                       /* save default */
	dflttk = (yotk *) x.ptr;
      else if (lbl == tag)                            /* do we have a match? */
	break;

      yotkxSkipTC(&x);                                      /* skip typecode */
    }

  if (!(flags & YOTKFMT_COLLAPSE))
    *s = ysStrCat(*s," : ");

  tk = (i == arms ? dflttk : (yotk *) x.ptr);
  if (tk)
  {
    if (flags & YOTKFMT_COLLAPSE)
      (*visit)( (CONST char *)0, flags, tk, val1, s);
    else
      (*visit)( name, flags, tk, val1, s);
  }
}

dvoid *yotkAllocStr(size_t len)
{
  return ysmGlbAlloc(len,"yotkAllocStr");
}

void yotkFreeStr(dvoid *ptr)
{
  ysmGlbFree(ptr);
}

/*
 * These could be macros except we'd have a small problem with
 * shared libraries...
 */
yotk *yotkDuplicate(CONST yotk *tk)
{
  return yotkDuplicateWaf(tk, (ysmaf)yoAlloc);
}

void yotkFree(yotk *tk)
{
  yotkFreeWaf(tk, (ysmff)yoFree);
}
