/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yccp0.h - IDL Compiler C++ code generator declarations
 *
 * HISTORY
 * 07/01/96 kcoleman	Creation from yc.h
 */

#ifndef YCCP0_ORACLE
#define YCCP0_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif
#ifndef YCC0_ORACLE
#include <ycc0.h>
#endif
#ifndef YCCFP_ORACLE
#include <yccfp.h>
#endif

/* --------------------------------------------------------------------- */
/* 
   Default C++ header and source file name suffixes. May be overridden
   by the user via the resources "header-suffix" and "source-suffix".

   OCCS prefers .h and .cpp, so that's what we use. Note the potential
   collision of header file names with C code gen.
 */
#ifndef YC_CPHEADER
#define YC_CPHEADER "h"
#endif
#ifndef YC_CPSOURCE
#define YC_CPSOURCE "cpp"
#endif

/* --------------------------------------------------------------------- */
/*
 * C++ code generation flags
 *
 * These are bit masks for the flags field of ycgmap. Generally used for
 * resource settings we access frequently - ysResGet calls are expensive.
 * Some of the flags settings are driven by resources we share with C
 * code gen, but DO NOT share bit masks.
 *
 * @@ some of these aren't used right now, particularly the flags for
 * @@ C++ lang feature support such as native exceptions and namespaces.
 */
#define YCCP_BUILTIN_SEQ_FLG   1      /* Assume builtin seqs for prims */
#define YCCP_STATIC_TC_FLG     2      /* Gen static typecode defns */
#define YCCP_NAMESPACE_FLG     4      /* Assume namespace support */
#define YCCP_EH_NATIVE_FLG     8      /* Assume C++ exception suport */
#define YCCP_RTTI_FLG         16      /* Assume RTTI support */


/* --------------------------------------------------------------------- */
/*
 * yccpModulesAsNamespaces - TRUE if IDL modules are mapped to namespaces.
 *
 *    boolean yccpModulesAsNamespaces( ycctx*);
 *
 * Since we currently don't use namespaces, this is always FALSE.
 * Eventually, it should be tied to some resource setting, but there's
 * no need to incur the lookup cost at this point.
 */
#define yccpUseNamespaces(ctx) (FALSE)

/* --------------------------------------------------------------------- */
/*
 * YCP_CORBA - What the CORBA namespace expands to
 *
 * When generating code for namespaces, it will be "CORBA::", otherwise,
 * it is "CORBA_".
 */
#define YCP_CORBA(ctx) "CORBA_"

/* --------------------------------------------------------------------- */
/*
 * yccpcgfp - Code gen callback function pointer type
 * yccpdefcgfp - Code gen callback for deferred declarations
 *
 * Used as callbacks when traversing code gen objects. See yccpGenCGObjs.
 */

typedef void (*yccpcgfp)(ycctx* ctx, yccfp* fp, yrobj* obj, boolean fwd);
typedef void (*yccpdefcgfp)(ycctx* ctx, yccfp* fp, yslst* objs);


/* --------------------------------------------------------------------- */
/*
 * yccphdr.c - shared header generation
 */
void yccphdr(ycctx *ctx, CONST char *base, ycfile* fd);

/*
 * yccpmap.c  - top level driver for C++ code gen
 */
ycgmap* yccpLangMap(ycctx *ctx);
void yccpGenTypeCode( ycctx* ctx, yccfp* fp, yrobj* type, CONST char* name, 
                      boolean defn);
void yccpGenAnyFuncs( ycctx* ctx, yccfp* fp, yrobj* type, boolean defn);
void yccpGenExtractor( ycctx* ctx, yccfp* fp, yrobj* type, 
                       CONST char* tname, boolean defn);
void yccpGenCopyInserter( ycctx* ctx, yccfp* fp, yrobj* type, 
                          CONST char* tname, boolean defn);
void yccpGenInserter( ycctx* ctx, yccfp* fp, yrobj* type, 
                      CONST char* tname, boolean defn);
void yccpGenParamType( ycctx* ctx, yccfp* fp, yrobj* type, sword mode);
boolean yccpIsKeyword( ycctx* ctx, CONST char* name);
void yccpGenCGObjs( ycctx* ctx, yccfp* fp, yslst* objs, yccpcgfp cgcb, 
                    yccpdefcgfp defcgcb);

/*
 * yccpname.c - name construction/generation
 */
CONST char* yccpTypeName( ycctx* ctx, yrobj* type);
void yccpGenPrimitiveName( ycctx* ctx, yccfp* fp, yrpk kind);
boolean yccpInClassScope( ycctx* ctx, yrobj* obj);
CONST char* yccpParentPrefix( ycctx* ctx, yrobj* obj);
char* yccpSeqName( ycctx* ctx, yrobj* seq);
CONST char* yccpScopedName( ycctx* ctx, yrobj* obj);
CONST char* yccpSimpleName( ycctx* ctx, yrobj* obj);
CONST char* yccpAbsoluteName( ycctx* ctx, yrobj* obj);
CONST char* yccpAnonArrayName( ycctx* ctx, yrobj* type, CONST char* field);
CONST char* yccpFlattenAbsName( ycctx* ctx, yrobj* obj);
char* yccpElemName( ycctx* ctx, yrobj* seq);
CONST char* yccpPrimitiveName( ycctx* ctx, yrpk kind, boolean useChar);

/*
 * yccptvar.c - _var type support
 */
void yccpGenArrayTVar( ycctx* ctx, yccfp* fp, yrobj* type, boolean defn );
void yccpGenStructTVar( ycctx* ctx, yccfp* fp, yrobj* type, boolean defn);
void yccpGenSeqTVar( ycctx* ctx, yccfp* fp, yrobj* type,  boolean defn);
void yccpGenIntfTVar( ycctx* ctx, yccfp* fp, yrobj* type, boolean defn);

/*
 * yccpclnt.c - client stub generation
 */
void yccpclnt(ycctx *ctx, CONST char *base, ycfile* fd);

#endif /* YCCP0_ORACLE */
