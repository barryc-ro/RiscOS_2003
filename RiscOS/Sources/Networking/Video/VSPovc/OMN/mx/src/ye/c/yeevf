/* Copyright (c) Oracle Corporation 1996.  All Rights Reserved. */

/*
  NAME
    yeevf.c
  DESCRIPTION
    yeev format record utilities.
  PUBLIC FUNCTIONS

    yeevFormat

  PRIVATE FUNCTIONS
    <x>
  NOTES
    <x>
  MODIFIED   (MM/DD/YY)
    dbrower   01/24/96 -  created.
    dbrower   02/28/96 -  converted for ysLog/ysMsg.
    dbrower   03/ 1/96 -  olint
    dbrower   03/28/96 -  add prog name
    dbrower   10/10/96 -  move seq to after time, move log seq near value,
			  bug 411338.
*/
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef SYSB8_ORACLE
#include <sysb8.h>
#endif
#ifndef YEEVF_ORACLE
#include <yeevf.h>
#endif
#ifndef YEEVENT_ORACLE
#include <yeevent.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif
#ifndef YSMSG_ORACLE
#include <ysmsg.h>
#endif
#ifndef CTYPE_ORACLE
#include <ctype.h>
#endif
#ifndef YSTM_ORACLE
#include <ystm.h>
#endif

/* PRIVATE TYPES AND CONSTANTS */

#define YEEVF_TIME_DIGS	((sword)3)

/* PRIVATE FUNCTION DECLARATIONS */

STATICF void yeevfCrunch( char *s );

externdef ysidDecl( YEEVF_EX_BAD_TYPECODE ) = "yeevf:badTypecode";

/* PUBLIC FUNCTIONS */

/* ---------------------------- yeevFormat ---------------------------- */
/*
  NAME
    yeevFormat
  DESCRIPTION
    Turn an "any" into a reasonable string for display.  Handles YS LOG
    events in a very special way, decoding the YS arguments properly.

  PARAMETERS
    cx	    -- a yemsg context for message id lookup
    prod    -- the product key
    fac	    -- the facility key.
    msgid   -- a message id, or 0
    ap	    -- the any to format.
    crunch  -- boolean, eliminate excess blanks and nls to make condensed
		one-line result.
  RETURNS
    A created ysstr with the formatted output.
*/

ysstr *yeevFormat( yemsgcx *msgcx, char *prod, char *fac, ub4 msgid,
		  yoany *ap, boolean crunch )
{

  ysstr *rv = (ysstr*)0;	/* output string, unbounded */
  CONST char *tn = (char*)0;	/* type name */
  YCIDL_sequence_yoany *seqany;	/* sequence we create if needed */
  char *fmt = (char*)0;		/* format string for non-yotkFormat */
  yeevYsLogEvent *yevt;		/* reconstituted ysLog event  */

  char	lbuf[ 1024 ]; 

  seqany = (YCIDL_sequence_yoany*)0;

  if( msgid )
    fmt = (char*)yemsgLookup( msgcx, prod, fac, msgid );

  yseTry
  {
    if( !yotkCmp( ap->_type, YCTC_yeevSeqAny ) )
      seqany = (YCIDL_sequence_yoany*)ap->_value;
    else if((tn = yotkGetName( ap->_type )) && !strcmp( tn, "::yeevYsLogEvent"))
    {
      /* handle special cases of things from ysh */
      tn = (char*)0;
      yevt = (yeevYsLogEvent*)ap->_value;
      seqany = (YCIDL_sequence_yoany*)&yevt->vals;
    }
  }
  yseCatch( YO_EX_BADCODE ) /* badcode on GetName og base types */ ;
  yseEnd;

  if( seqany )
  {
    ysMsgFmt( lbuf, sizeof(lbuf), (sword)seqany->_length,
	     (yslarg*)seqany->_buffer, fmt );
  }
  else if( !yotkCmp(ap->_type, yoTcString ) )
  {
    DISCARD strcpy( lbuf, *(char**)ap->_value );
  }
  else
    ysMsgFmt( lbuf, sizeof(lbuf), 1, (yslarg*)ap, fmt );

  /* build output string, yotkFormat bracketing */
  rv = ysStrCreate( "{ " );
  rv = ysStrCat( rv, lbuf ); 
  rv = ysStrCat( rv, " }, " ); 

  if( crunch )
    yeevfCrunch( ysStrToText(rv) );

  return( rv );
}


void yeevShowAny( yotk *type, dvoid *value )
{
  char *s;

  s = yotkFormat( type, value );
  yslPrint("%s\n", s );
  ysmGlbFree( (dvoid*)s );
}


void yeevShowRec( yemsgcx *msgcx, yeevr *rec, char *buf, size_t bsiz )
{
  boolean dofree = FALSE;
  ysstr	*sp;
  ystm	tm;
  char *assoc;
  char tbuf[ YSTM_BUFLEN ];
  if( !buf )
  {
    buf = (char *)ysmGlbAlloc( 32*1024, "showrec buf" );
    bsiz = 32*1024;
    dofree = TRUE;
  }

  ysConvClock( (sysb8*)&rec->origtime_yeevr, &tm );
  DISCARD ysStrClock( tbuf, &tm, FALSE, YEEVF_TIME_DIGS );
  sp = yeevFormat( msgcx, rec->prod_yeevr, rec->fac_yeevr,
		  rec->msgid_yeevr, &rec->val_yeevr, TRUE);
  assoc = rec->assoc_yeevr && *rec->assoc_yeevr ? rec->assoc_yeevr : (char*)0;
  ysFmtStrl(buf, bsiz, "%s %d %s:%s%s%s %s %s-%d %d %s%s%s%s",
	    tbuf, 
	    rec->origseq_yeevr,
	    rec->orighost_yeevr,
	    rec->origpid_yeevr,
	    rec->origaff_yeevr ? ":" : "",
	    rec->origaff_yeevr ? rec->origaff_yeevr : "",
	    rec->origprog_yeevr,
	    rec->prod_yeevr,
	    rec->msgid_yeevr,
	    rec->sev_yeevr,
	    assoc ? "[" : "",
	    assoc ? assoc : "",
	    assoc ? "] " : "",
	    ysStrToText(sp) );

  ysStrDestroy( sp );
  yslPrint("%s\n", buf );

  if( dofree )
    ysmGlbFree( (dvoid*)buf );
}

void yeevShowLRec( yemsgcx *msgcx, yeevl_yeevlr *lrec,
		  char *buf, size_t bsiz )
{

  boolean dofree = FALSE;
  yeevr *rec = &lrec->record;
  ysstr	*sp;
  char *assoc;
  ystm	tm;
  char tbuf[ YSTM_BUFLEN ];

  if( !buf )
  {
    buf = (char*)ysmGlbAlloc( 32*1024, "showrec buf" );
    bsiz = 32*1024;
    dofree = TRUE;
  }

  ysConvClock( (sysb8*)&rec->origtime_yeevr, &tm );
  DISCARD ysStrClock( tbuf, &tm, FALSE, YEEVF_TIME_DIGS );
  sp = yeevFormat( msgcx, rec->prod_yeevr, rec->fac_yeevr,
		  rec->msgid_yeevr, &rec->val_yeevr, TRUE);
  assoc = rec->assoc_yeevr && *rec->assoc_yeevr ? rec->assoc_yeevr : (char*)0;
  ysFmtStrl(buf, bsiz, "%s %d %s:%s%s%s %s %s-%d %d %s%s%s%d %s",
	    tbuf,
	    rec->origseq_yeevr,
	    rec->orighost_yeevr,
	    rec->origpid_yeevr,
	    rec->origaff_yeevr ? ":" : "",
	    rec->origaff_yeevr ? rec->origaff_yeevr : "",
	    rec->origprog_yeevr,
	    rec->prod_yeevr,
	    rec->msgid_yeevr,
	    rec->sev_yeevr,
	    assoc ? "[" : "",
	    assoc ? assoc : "",
	    assoc ? "] " : "",
	    lrec->record_id,
	    ysStrToText(sp) );
  ysStrDestroy( sp );
  yslPrint("%s\n", buf );

  if( dofree )
    ysmGlbFree( (dvoid*)buf );
}


/* PRIVATE FUNCTIONS */


/* ---------------------------- yeevfCrunch ---------------------------- */
/*
  NAME
    yeevfCrunch
  DESCRIPTION
    Eliminater newlines and multiple whitespace from yotkFormat output.
  PARAMETERS
    s	    -- string to crunch [IN/OUT]
  RETURNS
    none
*/
STATICF void yeevfCrunch( char *s )
{
  char *p, *beg;
  boolean wasspace;

  beg = p = s;
  while( *s )
  {
    if( *s == '\n')
      *s = ' ';

    wasspace = isspace(*s);
    *p++ = *s++;

    /* advance past space */
    while( wasspace && *s && (isspace(*s) || *s == '\n') )
      s++;
  }

  /* take out trailing junk */
  while( p > beg && (p[-1] == ' ' || p[-1] ==',')  )
    p--;

  *p = 0;
}


