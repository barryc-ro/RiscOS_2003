/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ycpp.h - IDL Compiler Pre-processor Definitions
 */

#ifndef YCPP_ORACLE
#define YCPP_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef SYSFP_ORACLE
#include <sysfp.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif

/*
 * Types & Constants
 */
typedef struct ycmd ycmd;
typedef struct ycpar ycpar;
typedef struct ycsup ycsup;

#define YCPP_MAXNESTLVL   32           /* maximum nesting level for includes */
#define YCPP_LINEMAX      ((ub4)79)    /* max length of input src line */

/*
 * Directive Identifiers
 */
#define YCDIR_INVALID -2
#define YCDIR_NONE    -1
#define YCDIR_DEFINE   0
#define YCDIR_ELIF     1
#define YCDIR_ELSE     2
#define YCDIR_ENDIF    3
#define YCDIR_ERROR    4
#define YCDIR_IF       5
#define YCDIR_IFDEF    6
#define YCDIR_IFNDEF   7
#define YCDIR_INCLUDE  8
#define YCDIR_LINE     9
#define YCDIR_PRAGMA  10
#define YCDIR_UNDEF   11

/*
 * Line Descriptor
 */
/* DISABLE check_naming */
struct ycln
{
  CONST char *name;                                   /* name of source file */
  sword       line;                                           /* line number */
  sword       lvl;                                          /* nesting level */
  boolean     dir;                       /* true if this line is a directive */
  ysstr      *text;                        /* textual representation of line */
};
/* ENABLE check_naming */

/*
 * Pre-processing Tokens
 *   IDENT:   rep = identifier
 *   NUM:     rep = number string
 *   CHAR:    rep = character constant (including single quotes)
 *   STRING:  rep = string constant (including double quotes)
 *   PUNC:    val = token value; if multi-character, rep = string rep
 *   PPPOUND: val = '#'
 *   PPPASTE: val = '#'
 *   EOL:     nothing
 *   OTHER:   val = character value
 */
#define YCPP_IDENT    1                                        /* identifier */
#define YCPP_NUM      2                                            /* number */
#define YCPP_CHAR     3                                /* character constant */
#define YCPP_STRING   4                                    /* string literal */
#define YCPP_PUNC     5                                       /* punctuation */
#define YCPP_PPPOUND  6                              /* pre-processing pound */
#define YCPP_PPPASTE  7                              /* pre-processing paste */
#define YCPP_EOL      8                                       /* end-of-line */
#define YCPP_OTHER    9                           /* unrecognized characters */

/*
 * Miscellaneous tokens not defined in grammar
 */
# define ARROW 312
# define INCR 313
# define DECR 314
# define ELLIPSIS 317
# define LE 318
# define GE 319
# define EQ 320
# define NE 321
# define LAND 322
# define LOR 323
# define MULTEQ 324
# define DIVEQ 325
# define MODEQ 326
# define PLUSEQ 327
# define MINEQ 328
# define LSEQ 329
# define RSEQ 330
# define ANDEQ 331
# define OREQ 332
# define XOREQ 333

/*
 * Macro definition
 */
/* DISABLE check_naming */
struct ycmd
{
  char  *name;                                              /* name of macro */
  sword  pcnt;                                            /* parameter count */
  ysstr *rpl;                                        /* replacement sequence */
  yslst *pars;                   /* parameter substitutions (queue of ycpar) */
  ycln  *origln;                      /* original line containing definition */
  sword  opos;                                          /* original position */
};
/* ENABLE check_naming */

/*
 * Parameter definition
 */
#define YCPAR_NORM     0                     /* normal argument substitution */
#define YCPAR_STR      1                 /* stringized argument substitution */
#define YCPAR_STRIPBEF 2                    /* strip leading whitespace only */
#define YCPAR_STRIPAFT 3                   /* strip trailing whitespace only */
#define YCPAR_STRIPALL 4            /* strip leading and trailing whitespace */

/* DISABLE check_naming */
struct ycpar
{
  sword spos;            /* offset position in original replacement sequence */
  sword cmd;                                /* type of paramter substitution */
  sword argno;                                            /* argument number */
};
/* ENABLE check_naming */

/*
 * Suppression descriptor
 */
/* DISABLE check_naming */
struct ycsup
{
  ycmd *md;                                              /* macro definition */
  sword off;                                              /* relative offset */
  sword eor;                               /* position at end of replacement */
};
/* ENABLE check_naming */

/*
 * Routines
 */
void   ycpp(ycctx *ctx);
yslst *ycppRead(ycctx *ctx, char *fn, sword lvl);
void   ycppDump(ycctx *ctx, yslst *tu);
ycln  *ycLnNew(CONST char *fn, sword line, sword lvl);
void   ycLnFree(ycln *ln);
void   ycLnCat(ycctx *ctx, ysle *elm);
void   ycLnBlank(ycctx *ctx, ycln *ln);
ycmd  *ycMdNew(char *nm, ycln *origln, sword opos);
sword  ycMdEq(dvoid *elm, dvoid *key, size_t keysz);
void   ycMdFree(dvoid *elm);
sword  ycSkipWS(ysstr *txt, sword sp, sword ep);

void  ycppExpand(ycctx *ctx, ysle *elm, sword sp, sword ep, boolean toplvl);
sword ycppGetToken(ycln *ln, sword *posp, sword *valp, ysstr **repp);
void  ycppDirective(ycctx *ctx, ysle *elm);
sword ycppDirIdent(ysstr *txt, sword *posp);
void  ycppDefine(ycctx *ctx, ycln *ln, sword pos);
void  ycppUndef(ycctx *ctx, ycln *ln, sword pos);
void  ycppIf(ycctx *ctx, ysle *elm, sword pos, sword dirid);

sb4 ycppEvalChar(ycctx *ctx, ycln *ln, ysstr *txt);
sb4 ycppGetDec(ycctx *ctx, ycln *ln, char *buf);
ub4 ycppGetOct(ycctx *ctx, ycln *ln, char *buf);
ub4 ycppGetHex(ycctx *ctx, ycln *ln, char *buf);

#endif /* YCPP_ORACLE */
