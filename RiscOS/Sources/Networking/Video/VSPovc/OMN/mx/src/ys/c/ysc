/* Copyright (c) 1994, 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ysc.c - OMX Context Manager
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif

typedef struct yscel yscel;                         /* keyed context element */

/* DISABLE check_naming */
struct yscel
{
  yscel *next;                                       /* next element in list */
  dvoid *key;                                                   /* key value */
  size_t keysz;                                                  /* key size */
  dvoid *ptr;                                             /* context pointer */
};
/* ENABLE check_naming */

static ysmtagDecl(YSCEL_TAG) = "yscel";

/*
 * yscSet - set a context pointer
 */
dvoid *yscSet(ysctxid type, dvoid *ptr)
{
  dvoid **ptrs, *old;

  /* get the process global pointer */
  ptrs = (dvoid **) syscGetPG();
  if (!ptrs)
    ysePanic(YS_EX_NOTINIT);

  /* set the context pointer */
  old = ptrs[type];
  ptrs[type] = ptr;

  return old;
}

/*
 * yscGetKeyed - get a keyed context pointer
 */
dvoid *yscGetKeyed(ysctxid type, dvoid *key, size_t keysz)
{
  dvoid **ptrs;
  yscel  *scp;

  /* get the process global pointer */
  ptrs = (dvoid **) syscGetPG();
  if (!ptrs)
    ysePanic(YS_EX_NOTINIT);

  /* now scan the chain of contexts for the type, searching for a key match */
  scp = (yscel *) ptrs[type];

  if (scp)
    {
      ysmCheck((dvoid *) scp, YSCEL_TAG);

      while (scp && (keysz != scp->keysz || memcmp(scp->key, key, keysz)))
	scp = scp->next;
    }

  return (scp ? scp->ptr : (dvoid *) 0);
}

/*
 * yscSetKeyed - set a keyed context pointer
 */
dvoid *yscSetKeyed(ysctxid type, dvoid *key, size_t keysz, dvoid *ptr)
{
  dvoid **ptrs, *old;
  yscel  *scp, *prp;

  /* get the process global pointer */
  ptrs = (dvoid **) syscGetPG();
  if (!ptrs)
    ysePanic(YS_EX_NOTINIT);

  /* now scan the chain of contexts for the type, searching for a key match */
  scp = (yscel *) ptrs[type];
  prp = (yscel *) 0;

  if (scp)
    {
      ysmCheck((dvoid *) scp, YSCEL_TAG);

      while (scp && (keysz != scp->keysz || memcmp(scp->key, key, keysz)))
	prp = scp, scp = scp->next;
    }

  old = (scp ? scp->ptr : (dvoid *) 0);

  if (ptr)
    {
      /* overwrite or create a new context element */
      if (!scp)
	{
	  scp = (yscel *) ysmGlbAlloc(sizeof(yscel) + keysz, YSCEL_TAG);
	  scp->next = (yscel *) ptrs[type];
	  ptrs[type] = (dvoid *) scp;
	  scp->keysz = keysz;
	  scp->key = (dvoid *) &scp[1];
	  DISCARD memcpy(scp->key, key, scp->keysz);
	}

      scp->ptr = ptr;
    }
  else if (!ptr && scp)
    {
      /* if we are given a null pointer, free the context element */
      if (prp)
	prp->next = scp->next;
      else
	ptrs[type] = (dvoid *) scp->next;

      ysmGlbFree((dvoid *) scp);
    }

  return old;
}
