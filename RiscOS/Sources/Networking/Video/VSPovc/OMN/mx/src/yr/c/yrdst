/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yrdst.c - Interface Repository Object Destructors
 *
 * NOTEST
 * The main entry point here is yrDestroyObj, which cleans up all the
 * fields that are common to all objects and also recursively removes
 * the contents of containers (modules, interfaces, and the repository).
 * yrobj's which contain embedded data that must be freed have a
 * yrDestroy<kind> function that is called from yrDestroyObj by indexing
 * into yrCleanFuncs based on the object tag. YrDestroyObj clear all
 * the fields of the object being deleted so that anyone retaining a
 * pointer to it is likely to get slapped if they use it after it's freed.
 *
 * yrobj*'s embedded in things like member lists, attribute types, and
 * array sequence types should not be freed by the destructor for the
 * object containing the pointer. Since all yrobj's are on the content
 * list of either the repository, a module, or an interface, it is enough
 * to free these lists.
 *
 * If a new object type is added to repository or the "shape" of an
 * existing one is changed, re-evaluate to see what, if anything, needs
 * to be done in here.
 *
 * HISTORY
 * 01/03/97 kcoleman	Bug #434824 - shallow free wrong for struct/union
 * 07/04/96 kcoleman	Support for context id lists
 * 05/20/96 kcoleman	Bug #358917 - string const values were leaking
 * 03/18/96 kcoleman	Types nested inside structs & unions weren't collected
 * 02/12/96 kcoleman	Make sure all CORBA objects get cleaned up
 * 08/24/95 kcoleman	Make sure we don't recurse on freed objects
 * 07/13/95 kcoleman	Creation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YR_ORACLE
#include <yr.h>
#endif
#ifndef YR0_ORACLE
#include <yr0.h>
#endif

STATICF void yrDestroyConstant( yrobj* obj, ysmff usrpFree, ysmff objFree)
{
  if ( (yotkGetKind( obj->data.cval.val._type) == yotkString) &&
       *(char**)obj->data.cval.val._value )
    ysmGlbFree( (dvoid*)(*(char**)obj->data.cval.val._value));
  yotkFreeWaf( obj->data.cval.val._type, (ysmff)ysmFGlbFree);
  ysmGlbFree( (dvoid*)obj->data.cval.val._value);
}

STATICF void yrDestroyInterface( yrobj* obj, ysmff usrpFree, ysmff objFree)
{
  if ( obj->data.intfval.bases )
    ysLstDestroy( obj->data.intfval.bases, (ysmff) 0);
  if ( obj->data.intfval.ops )
    ysLstDestroy( obj->data.intfval.ops, (ysmff) 0);
  if ( obj->data.intfval.attrs )
    ysLstDestroy( obj->data.intfval.attrs, (ysmff) 0);
}


STATICF void yrDestroyPar( yrpar* par)
{
  if ( !par )
    return;
  if ( par->name )
  {
    ysmGlbFree( par->name);
    par->name = (char*)0;
  }
  ysmGlbFree( par);
}


STATICF void yrDestroyOperation( yrobj* obj, ysmff usrpFree, ysmff objFree)
{
  if ( obj->data.opval.raises )
    ysLstDestroy( obj->data.opval.raises, (ysmff) 0);
  if ( obj->data.opval.pars )
    ysLstDestroy( obj->data.opval.pars, (ysmff) yrDestroyPar);
  if ( obj->data.opval.ctxts )
    ysLstDestroy( obj->data.opval.ctxts, (ysmff) ysmFGlbFree);
}

STATICF void yrDestroyStruct( yrobj* obj, ysmff usrpFree, ysmff objFree)
{
  ysle* le;

  if ( obj->data.sval.mbrs )
  {
    for ( le = ysLstHead(obj->data.sval.mbrs); le; le = ysLstNext(le))
    {
      yrstrmbr* mem = (yrstrmbr*) ysLstVal(le);

      if ( mem->name )
      {
	ysmGlbFree( (dvoid*)mem->name);
        mem->name = (char*)0;
      }
    }
    ysLstDestroy( obj->data.sval.mbrs, (ysmff)ysmFGlbFree);
    obj->data.sval.mbrs = (yslst*)0;
  }
}

STATICF void yrDestroyUnion( yrobj* obj, ysmff usrpFree, ysmff objFree)
{
  ysle* le;

  if ( obj->data.uval.arms )
  {
    for ( le = ysLstHead(obj->data.uval.arms); le; le = ysLstNext(le))
    {
      yrunmbr* mem = (yrunmbr*) ysLstVal(le);
      if ( mem->name )
      {
	ysmGlbFree( (dvoid*)mem->name);
	mem->name = (char*)0;
      }
      if ( mem->label._type )
        yotkFreeWaf( mem->label._type, (ysmff)ysmFGlbFree);
      if ( mem->label._value )
        ysmGlbFree( (dvoid*)mem->label._value);
    }
    ysLstDestroy( obj->data.uval.arms, (ysmff) ysmFGlbFree);
  }
}

STATICF void yrDestroyEnum( yrobj* obj, ysmff usrpFree, ysmff objFree)
{
  if ( obj->data.eval.mbrs )
    ysLstDestroy( obj->data.eval.mbrs, (ysmff) 0);
}

STATICF void yrDestroyRep( yrobj* obj, ysmff usrpFree, ysmff objFree)
{
  if ( obj && obj->data.repval )
  {
    yrobj* anon;

    while ( (anon = (yrobj*) ysLstDeq( obj->data.repval->anon)) )
      yrDestroyObj( anon, (yslst*)0, usrpFree, objFree);
    ysLstDestroy( obj->data.repval->anon, (ysmff) 0);
    ysmGlbFree( obj->data.repval);
    obj->data.repval = (yrprivate*)0;
  }
}


static yrclean yrCleanupFuncs[] =
  {
    (yrclean)0,				/* yrdknone */
    (yrclean)0,				/* yrdkall */
    yrDestroyRep,		        /* yrdkRepository */
    (yrclean)0,				/* yrdkAttribute */
    yrDestroyConstant,			/* yrdkConstant */
    yrDestroyStruct,			/* yrdkException */
    yrDestroyInterface,			/* yrdkInterface */
    (yrclean)0,				/* yrdkModule */
    yrDestroyOperation,			/* yrdkOperation */
    (yrclean)0,				/* yrdkTypedef */
    (yrclean)0,				/* yrdkAlias */
    yrDestroyStruct,			/* yrdkStruct */
    yrDestroyUnion,			/* yrdkUnion */
    yrDestroyEnum,			/* yrdkEnum */
    (yrclean)0,				/* yrdkPrimitive */
    (yrclean)0,				/* yrdkString */
    (yrclean)0,				/* yrdkSequence */
    (yrclean)0				/* yrdkArray */
  };

/* ---------------------------------------------------------------------- */
/*
 * yrDestroyObj - Top level repository garbage collector
 *
 * Assumption is that all storage belongs to the repository, so it is
 * ours to destroy at will. This function cleans up all the top level
 * fields of <obj>, effectively recurses on the contents, and calls
 * an appropriate cleanup routine specific to the type of object in
 * order to clean up the data field.
 *
 * The object's tag field is set to yrdknone to indicate an invalid
 * object so that if we end up recursing on the same object, it is a
 * no-op.
 *
 * If <deferred> is non-null, interface member objects are put on a
 * the list for deferred destruction. This is necessitated by inheritance:
 * Base class members appear on the content list of derived interfaces;
 * they may get destroyed before the derived interface is, so there is no
 * way to destroy the derived interface content list without touching items
 * that were previously freed. We therefore collect all the immediate
 * members on a list and free them after all the interfaces are freed.
 * Types defined inside structs and unions are also placed on the deferred
 * list. Though this is not really necessary, it makes it possible to do a
 * shallow free of all yrobj types by setting <deferred> to null.
 *
 * When might you not want to do this? When doing some kind of shallow
 * free operation, such as is required by yrMerge.
 *
 * <objFree> is used to garbage collect any CORBA objects embedded in the
 * IFR. It must be a callback because of circular dependencies between
 * yr, yc, and yo. It is only non-NULL when we're tidying up after the
 * IFR server.
 */
void yrDestroyObj( yrobj* obj, yslst* deferred, ysmff usrpFree, ysmff objFree)
{
  if ( obj == (yrobj*)0 )
    return;

  if (yrCleanupFuncs[obj->tag])
    (*yrCleanupFuncs[obj->tag])(obj, usrpFree, objFree);

  if ( obj->contents )           /* do before stomping name, etc. */
  {                              /*   to make debugging easier */
    yrobj* o;

    if ( deferred )              /* do a deep delete */
    {
      while ( (o = (yrobj*) ysLstDeq(obj->contents)) )
      {
#ifdef NEVER
        if ( (obj->tag == yrdkInterface) )
        {
          if ( o->defined_in == obj )
            ysLstEnq( deferred, (dvoid*) o);
        }
        else
          ysLstEnq( deferred, (dvoid*) o);
#endif
        switch (obj->tag)
        {
          case  yrdkInterface:
            if ( o->defined_in != obj )
              continue;
            /* FALLTHROUGH */
          case yrdkStruct:
          case yrdkUnion:
          case yrdkException:
            ysLstEnq( deferred, (dvoid*) o);
            break;
          default:
            yrDestroyObj( o, deferred, usrpFree, objFree);
            break;
        }
      }
    }
    ysLstDestroy( obj->contents, (ysmff)0);
    obj->contents = (yslst*) 0;
  }

  obj->tag = yrdknone;

  if ( obj->srcnm )
  {
    ysmGlbFree((dvoid*) obj->srcnm);
    obj->srcnm = (char*) 0;
  }

  if ( obj->repid )
  {
    ysmGlbFree((dvoid*) obj->repid);
    obj->repid = (char*) 0;
  }
    
  if ( obj->name )
  {
    ysmGlbFree((dvoid*) obj->name);
    obj->name = (char*) 0;
  }

  if ( obj->version )
  {
    ysmGlbFree((dvoid*) obj->version);
    obj->version = (char*) 0;
  }

  if ( obj->usrp && usrpFree )
  {
    (*usrpFree)((dvoid*) obj->usrp);
    obj->usrp = (dvoid*)0;
  }

  if ( obj->typeCode )
  {
    yotkFreeWaf( obj->typeCode, (ysmff)ysmFGlbFree);
    obj->typeCode = (yotk*)0;
  }

  if ( obj->or && objFree )
  {
    (*objFree)( obj->or);
    obj->or = (dvoid*)0;
  }

  ysmGlbFree((dvoid*) obj);
}

/* ---------------------------------------------------------------------- */

