/* Copyright (c) Oracle Corporation 1995.  All Rights Reserved. */

/*
   NAME
     yd.idl
   DESCRIPTION
     idl file for ORB callable interfaces to the ORB Daemon.

   MODIFIED   (MM/DD/YY)
     dbrower   07/19/95 -  created.
     dbrower   11/10/95 - put into modules.
     dbrower   02/28/96 -  remove ysid refs; they are strings.
     dbrower   05/23/96 -  add claim/abandon.  Remove resources.
			    remove listAll; rename listHost to listImpl
    dbrower   06/ 7/96 -  move listClaim to ydyoidl; runtime needs to
			    call it for initial references.
*/

#ifndef YDIDL_ORACLE
#define YDIDL_ORACLE

#ifndef YOSTD_ORACLE
#include "yostd"
#endif

#ifndef YDYOIDL_ORACLE
#include "ydyoidl"
#endif

/* ================================================================ */
/*   O R B D							    */
/* ================================================================ */

exception ydUnimpl {};
exception ydUnknown {};

// forward interface decls

module ydrt {
  interface router;
};
module ydsp {
  interface spawner;
  interface proc;
};
module ydim {
  interface imr;
  interface info;
  interface active;
  interface infoIterator;
  interface yortIterator;
  interface sync;
  interface claimIterator;
};
module ydch {
  interface och;
  interface objIterator;
};
module ydmt {
  interface imtr;
  interface info;
};

// ----------------------------------------------------------------
// ydrt - router 

module ydrt {

  interface router {

    readonly attribute ydrt::router self;
    readonly attribute ydim::imr    imr;
    readonly attribute yort::queueInfo qinfo;
  };
};

// ----------------------------------------------------------------
// ydsp - spawn -- processes on a host.
//
// Will eventually be persistant stateful to handle ORBD crash, but
// isn't right now.

module ydsp {

  enum ProcState { start_ok, start_fail, exit_ok, exit_bad, exit_unknown };

  struct procInfo {

    proc	self_ydsp_procInfo; // nil/ignored as arg to addExisting
    string      host_ydsp_procInfo;
    string      pid_ydsp_procInfo;
    string      affinity_ydsp_procInfo;
    string      name_ydsp_procInfo;

    spawner	parent_ydsp_procInfo; // nil if parent unknown.
    ProcState	state_ydsp_procInfo;
  };

  typedef sequence <procInfo> procInfoList;

  interface spawner  {

    exception launchFail {};
    
    readonly attribute spawner self;
    readonly attribute ydim::imr imr;
    readonly attribute procInfoList procs;

    void Launch( in string path, in yostd::stringList args,
		out proc proc )
      raises (ydUnimpl, launchFail);

    // self_procInfo is ignored
    void addExisting( in procInfo pinfo, out proc proc )
      raises (ydUnimpl);
  };

  interface proc {

    readonly attribute procInfo spinfo;

    boolean isAlive()		// check process liveness
      raises (ydUnimpl);
    void killProc()		// kill the process, leave the object.
      raises (ydUnimpl);
    void destroyObj()		// destroy the object (forget the proc)
      raises (ydUnimpl);
  };
};


// ----------------------------------------------------------------
// ydim - implementation repository -- used to locate active and
// potential implementations of interfaces.    The real repository
// is global.  Replication/synchronization can be lazy, we think.
// Should be persistant stateful to handle ORBD crash.

module ydim {

  typedef sequence <yort::proc> yortList;
  typedef sequence <active> activeList;

  struct yortInfo
  {
    yort::proc	    yort_ydim_yortInfo;
    yort::procInfo  pinfo_ydim_yortInfo;
    activeList	    alist_ydim_yortInfo;
  };

  // There will be an info entry with nil host/spawn entries for each
  // intf/impl key.  This will hold all active impls of that pair for
  // consideration when there is no resource.  There will also be entries
  // for all intf/impl/host triplets, with valid activeLists.  This will
  // be used when a resource is specified.

  struct implInfo {

    info    self_ydim_implInfo;
    string    intf_ydim_implInfo;	// never nil.
    string  impl_ydim_implInfo;	// never nil.
    string  host_ydim_implInfo;	// where it is running; never nil.

    activeList  alist_ydim_implInfo;

    // existance policy issues
    string	  level_ydim_implInfo; // "level" this should exist at.
    ub4		  minInstances_ydim_implInfo; // min at this level
    ub4		  maxInstances_ydim_implInfo; // max at this level

    // process config issues.
    // these are filled in if we can spawn one.
    string          pathName_ydim_implInfo; // if null, can't spawn new one.
    yostd::stringList args_ydim_implInfo;   // may be null.
  };

  typedef sequence <info> infoObjList;
  typedef sequence <implInfo> infoList;
  typedef sequence <yort::procInfo> yortProcInfoList;

  enum tryResult
  {
    success_tryResult,
    fail_tryResult,
    retry_tryResult
  };

  interface imr : ydyo::imr {

    readonly attribute imr self;
    readonly attribute ydmt::imtr mt;

    // big data chunks...
    readonly attribute yortProcInfoList plist;

    // addActiveGlobal, destroyActiveGlobal and exists inherited from ydyo::imr

    // config info, with links to active info
    void addInfoLocal( in implInfo info, out info infoObj );
    void addInfoGlobal( in implInfo info, out info infoObj );
    void destroyInfoLocal( in implInfo info );
    void destroyInfoGlobal( in implInfo info );

    // info about active impls
    void addActiveLocal( in yort::procInfo pinfo,
			in ydyo::activeInfoList ailist );
    void destroyActiveLocal( in ydyo::activeInfoList ailist );

    // ops on yorts, known through active info
    void destroyYortLocal( in yort::proc y );

    // these derived from active info repository...
    yort::proc yortOfProc( in string host, in string pid, in string affinity );
    boolean procOfYort( in yort::proc y, out yort::procInfo pinfo );
    boolean activeOfYort( in yort::proc y, out activeList list );

    // these list many things...

    // intf, impl, host may be null to wildcard.
    void listImpl( in sb4 count,
		  in string intf, in string impl, in string host,
		  out infoList list, out infoIterator ii );

    // yort may be null
    void listYort( in sb4 count, in yort::proc subject,
		  out yortList ylist, out yortIterator yi );

    // create a sync object in self, arg to other startSync.
    sync createSync(in sb4 cnt);
    
    // start sending to sync, decrement when complete.
    void startSync( in imr dest, in sync whenDone );

    // proxy op for administration; no notOwner exception.
    void abandonFor( in yort::claim what );

    // special op for re-assigning claims.  Must be done on a
    // property with an existing claim.
    void transfer( in yort::claim newClaim );

    // for IMR talking to other IMRs
    tryResult tryStake( in yort::claim what );
    tryResult transferStake( in yort::claim what );
    void commitStake( in yort::claim what );
    void abortStake( in yort::claim what );

    // non-nil values in what restrict the listing to matches.
    // what.property is taken to be a regular expression; if nil,
    // all claims match.  Nil what.obj and what.owner objects match
    // any object.
    void listClaim( in sb4 count, in yort::claim what,
		   out yort::claimList claims,
		   out ydim::claimIterator ci );
  };

  // config info object, about one intf/impl/host/path
  interface info {

    readonly attribute implInfo info;
    void destroyLocal();
    void destroyGlobal();
  };

  // one known intf/impl/yort
  interface active {

    readonly attribute ydyo::activeInfo ainfo;
    void destroyLocal();
    void destroyGlobal();
  };

  // from listImpl...
  interface infoIterator {

    boolean next_one(out implInfo info );
    boolean next_n(in sb4 count, out infoList list);
    void destroy();
  };

  // from listYort...
  interface yortIterator {

    boolean next_one(out yort::proc y);
    boolean next_n(in sb4 count, out yortList list);
    void destroy();
  };

  // from listClaim
  interface claimIterator {
    boolean next_one(out yort::claim claim);
    boolean next_n(in sb4 count, out yort::claimList clist);
    void destroy();
  };

  // from createSync
  interface sync {
    void decrement();
    void destroy();
  };
};

// ----------------------------------------------------------------
// ydch - Object clearinghouse -- used to serialize activation of
// persistant stateful objects.
//
// This is global, and must be kept in sync in real-time.  That
// makes it a potentially huge performance/scalability bottleneck.

module ydch {

  interface lock;
  typedef sequence <lock> lockList;

  // loose binding to this OK.  There are no lock objects, because
  // those would be bound to some particular och, which we wish to
  // avoid.

  interface och {

    // input obj is loosely bound, output is real location.
    void whereActive( in Object unbound, out yort::proc place );

    // Acquire lock with intent to change the bound place.
    // The lock will eventually be granted; we admit no failures.
    //
    // On return, place is the current binding of the unbound object,
    // either a real place or the yort::proc of the caller.

    void lock( in Object unbound, out yort::proc place );

    // change the place associated with the locked object.  This is
    // normally only done by the process holding the lock.  If there
    // is no binding, release the lock.
    void setPlace( in Object unbound, in yort::proc place );

    // remove knowledge about the unbound object, locked or activated.
    // this _only_ clears the clearinghouse, not the any actual activation.
    void remove( in Object unbound );

    // list known PSF objects.
    void listObjs( in ub4 count, out yostd::objList objs,
		  out objIterator oi );
  };

  interface objIterator {
    boolean next_one(out Object obj);
    boolean next_n(in ub4 count, out yostd::objList objs);
    void destroy();
  };
};


// ----------------------------------------------------------------
// ydmt - metrics - is intended to keep real-time metrics from
// active interface/implementations globally or locally, to
// aid in distributing requests and spawning new processes.
//
// one of these per yort.  These are loaded
// into the ydmt by a third-party, in response to policy.  
// They are also created by the orb daemon on-the-fly to
// count dispatches, if no other metrics are available.
//
module ydmt {

  struct minfo {

    info	    self_ydmt_minfo;
    yort::proc	    yort_ydmt_minfo;	// key for lookup
    yort::implAll   all_ydmt_minfo;
  };

  typedef sequence <minfo> minfoList;

  // implementation metric repository

  interface imtr {

    readonly attribute imtr self;
    readonly attribute ydim::imr imr;
    readonly attribute minfoList mtinfo;

    // add info, or replace existing info
    void addInfo( in minfo minfo, out info mtobj );

    // add big batch of info in one crack.
    oneway void addYortAll( in yort::proc y, in yort::implAllList alist );

    minfo getInfo( in yort::proc y, in string impl, in string intf )
      raises (ydUnknown);
  };

  interface info {

    // settable...
    attribute minfo mtinfo;
    void destroy();
  };
};

#endif				// YDIDL_ORACLE
