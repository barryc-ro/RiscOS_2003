/* Copyright (c) 1994 by Oracle Corporation.  All Rights Reserved.
 *
 * mni.h - Media Net Internal Definitions
 *
 * REVISIONS
 * jolkin     08/12/94  Creation of Version 2.1
 * jolkin     04/20/94  Creation of Version 2.0
 */

#ifndef MNI_ORACLE
#define MNI_ORACLE

/* DO NOT REMOVE! */
#define USE_YSLST

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef SYSXCD_ORACLE
#include <sysxcd.h>
#endif
#ifndef SMN_ORACLE
#include <smn.h>
#endif
#ifndef MTCCTX_ORACLE
#include <mtcctx.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNNIO_ORACLE
#include <mnnio.h>
#endif
#ifndef MNRC_ORACLE
#include <mnrc.h>
#endif
#ifdef USE_YSLST
#ifndef YS_ORACLE
#include <ys.h>
#endif
#endif

/*
 * Portability Interim Definitions
 */
sb4 smnClock(void);

/*
 * Internal Objects
 */
typedef struct mnctx  mnctx;                               /* global context */
typedef struct mnactx mnactx;                     /* address manager context */
typedef struct mnmctx mnmctx;                      /* memory manager context */
typedef struct mnectx mnectx;                       /* event manager context */

typedef struct mnq    mnq;                                          /* queue */
typedef struct mnqe   mnqe;                                 /* queue element */

typedef struct mnrte  mnrte;                                 /* route handle */
typedef struct mnnhdr mnnhdr;                               /* packet header */
typedef struct mnnpkt mnnpkt;                           /* packet descriptor */

typedef struct mntre mntre;                      /* receive event descriptor */
typedef struct mntse mntse;                         /* send event descriptor */

typedef struct mzncd mzncd;                       /* nameserver client cache */

/*
 * Queue Management 
 *
 * SYNOPSIS
 * void  mnqInit(mnq *q);
 * void  mnqEnq(mnq *q, mnqe *elm);
 * mnqe *mnqDeq(mnq *q);
 *
 * DESCRIPTION
 * A queue consists of a number of elements which is legally castable to
 * an mnqe * object (thus, the first field must be a pointer field named
 * next).
 */
struct mnq
{
  mnqe *head;                                               /* head of queue */
  mnqe *tail;                                               /* tail of queue */
  mnqe *tmp;                                             /* temporary holder */
};

struct mnqe
{
  mnqe *next;                                         /* next entry in queue */
};

#define mnqInit(q)  ((q)->head = (q)->tail = (mnqe *) 0)
#define mnqEnq(q, elm) \
  do { \
    ((mnqe *) elm)->next = (mnqe *) 0; \
    if ((q)->head) \
      (q)->tail->next = (mnqe *) (elm); \
    else \
      (q)->head = (mnqe *) (elm); \
    (q)->tail = (mnqe *) (elm); \
  } while (0)
#define mnqDeq(q)  \
  (((q)->tmp = (q)->head) ? ((q)->head = (q)->head->next, (q)->tmp) : (q)->tmp)

/*
 * Critical Regions
 */
#define MN_CRITICAL_REGION     if (!ctx->crcnt++) ysMtxLock(&ctx->glbmtx);
#define MN_END_CRITICAL_REGION if (!--ctx->crcnt) ysMtxUnlock(&ctx->glbmtx);

/*
 * Logging
 */
#define MNLINFO  ((ub4) 0)                            /* informational level */
#define MNLWARN  ((ub4) 1)                                  /* warning level */
#define MNLERROR ((ub4) 2)                                    /* error level */
#define MNLFATAL ((ub4) 3)                                    /* fatal level */

void mnPrint(ub4 type, const char *fmt, ...);

/*
 * Memory Management
 */
#define MNM_MAINPOOL  ((ub4) 1)                                 /* main pool */
#define MNM_SENDPOOL  ((ub4) 2)                                 /* send pool */
#define MNM_RECVPOOL  ((ub4) 3)                              /* receive pool */
#define MNM_MAXPOOL   ((ub4) 4)                       /* maximum pool number */
#define MNM_MAYBEPOOL ((ub4) 5)           /* main pool (but allowed to fail) */

mnmctx *mnmInit(mnbv *bv, ub4 nbv, mnAlloc alloc, mnFree free);
void    mnmTerm(mnctx *ctx);
dvoid  *mnmAlloc(mnctx *ctx, ub4 poolid, size_t len);
void    mnmFree(mnctx *ctx, dvoid *ptr);
sb4     mnmWait(mnctx *ctx, ub4 poolid);

sb4     mnmPoolAlloc(mnctx *ctx, ub4 poolid, ub4 poolsz, ub4 lowwtr);
boolean mnmPoolLowwtr(mnctx *ctx, ub4 poolid);
ub4     mnmPoolSpace(mnctx *ctx, ub4 poolid);
sb4     mnmSetPool(mnctx *ctx, ub4 poolid, ub4 len);

void    mnmConfig(mnctx *ctx, mnAlloc alloc, mnFree free);
dvoid  *mnmUserAlloc(mnctx *ctx, size_t len);
void    mnmUserFree(mnctx *ctx, dvoid *ptr);

/*
 * Event Management
 */
void   mneInit(mnctx *ctx);
void   mneTerm(mnctx *ctx);
void   mnePost(mnctx *ctx, mnHandler type, dvoid *usrp, sb4 val);
void   mneTimer(mnctx *ctx, ub4 msec, mnsem *sem);
sb4    mneWait(mnctx *ctx, ub4 nsem, mnsem **sem, ub4 match);
sb4    mneSemWait(mnctx *ctx, ub4 timeout, ub4 nsem, mnsem **sem, ub4 match);
void   mneSemSetHandler(mnctx *ctx, mnsem *sem, mnHandler handler,
			boolean autofree);
void   mneLatch(mnctx *ctx, mnsem *sem);
void   mneUnlatch(mnctx *ctx, mnsem *sem);
void   mneSet(mnctx *ctx, mnsem *sem, sb4 val, boolean unlatch);
sb4    mneGet(mnctx *ctx, mnsem *sem);
mnsem *mneMakeSem(mnctx *ctx, mnHandler handler, dvoid *usrp);

/*
 * Packet Header
 */
#define MNNVRS      0x10                     /* packet header version number */

#define MNNFLG_MTC  0x01                                     /* more-to-come */
#define MNNFLG_FST  0x02                                    /* first segment */
#define MNNFLG_ACK  0x04                           /* acknowledgement packet */
#define MNNFLG_CLS  0x08                                 /* window is closed */
#define MNNFLG_PRI  0x10                                     /* priority bit */
#define MNNFLG_ACC  0x20               /* force accept of packet at next hop */
#define MNNFLG_RSR  0x40                              /* record source route */
#define MNNFLG_CPY  0x80                     /* copy forward the blob header */

struct mnnhdr
{
  ub1 proto;                                             /* version/protocol */
  ub1 flags;                                                /* flag bitfield */
  ub2 cksm;                                                      /* checksum */
  ub4 len;                                                 /* payload length */
  sb4 seqid;                                                  /* sequence ID */
  mna src;                                                 /* source address */
  mna dst;                                            /* destination address */
};

/*
 * Network Layer
 */
#define MNNFLG_TL   ((ub4) 0x80000000) /* transport layer packet; don't free */

struct mnnpkt
{
  mnnpkt *next;                                      /* next packet in chain */
  ub4     len;                                           /* length of buffer */
  ub4     off;                   /* offset into buffer of first byte of data */
  ub4     flags;                                          /* first, mtc bits */
  sb4     seqid;                        /* sequence ID of first byte of data */
  ub4     max;                                     /* maximum size of packet */
  ub4     stime;                       /* time at which this packet was sent */
  mnnio  *nio;                                       /* inbound/outbound NIO */
  mnnpa   pa;                           /* inbound/outbound physical address */
};

#define mnnNextNio(nio) \
  ((mnnio *) (((mnqe *) (nio)->priv)->next))

void    mnnNewNio(mnctx *ctx, mnnio *nio);
void    mnnFreeNio(mnctx *ctx, mnnio *nio);
mnnio  *mnnFindNio(mnctx *ctx, char *family);
void    mnnScanNio(mnctx *ctx);
sb4     mnnRecvPkt(mnctx *ctx, mnnio *nio, boolean poll, ub4 timeout);
void    mnnProcPkt(mnctx *ctx, mnnio *nio);
void    mnnForward(mnctx *ctx, mnnio *nio, mnnpkt *pkt);
sb4     mnnSendPkt(mnctx *ctx, mnnpkt *pkt);
void    mnnFragment(mnnpkt *pkt, ub1 **bufp, ub4 *xlenp);
ub2     mnnCheckSum(ub1 *buf, ub4 len);
void    mnnSetSubnet(mnnio *nio, mna *addr);

/*
 * Address Management
 */
#define MNAFLG_SELF     ((ub4) 0x0001)            /* subnet owned by gateway */
#define MNAFLG_PERM     ((ub4) 0x0002)                 /* route is permanent */
#define MNAFLG_DELETE   ((ub4) 0x0004)          /* set when route is deleted */

#define MNARTEHB   ((ub4) 60000) /* time in between route heartbeats (1 min) */
#define MNARTELIFE ((ub4) (3 * MNARTEHB)) /* time to live for routes (3 min) */

struct mnrte
{
  mnrte *next;                                        /* next route in chain */
  mnrte *prev;                                    /* previous route in chain */
  mna    addr;                                          /* address for route */
  ub4    mask;              /* net mask to apply when selecting subnet route */
  mnnio *nio;                                               /* NIO for route */
  mnnpa  pa;                                    /* physical address of route */
  ub4    refcnt;           /* number of outstanding references to this route */
  ub4    flags;                                               /* route flags */
  ub4    itime;                          /* time at which route was inserted */
};

typedef void (*mnaDeathH)(dvoid *usrp, mna *host, mnrte *rte);

#define MNARSADDR           "0xffffffff.1"
#define MNADEATHADDR        "0xffffffff.69"
#define MNADEATHPORT        "0x00000000.69"
#define MNADPLEN              9                    /* length of death packet */
#define MNADT_WATCH         0x01                       /* death packet types */
#define MNADT_RMWATCH       0x02
#define MNADT_DEAD          0x10
#define MNADT_BADWATCH      0x11

#define mnaIsNet(addr)      (!(addr)->bits[4] && !(addr)->bits[5])
#define mnaPortNum(addr)    (sysxGetUaB2(&(addr)->bits[6]))
#define mnaSetPortNum(addr, prtno) \
  (sysxPutUaB2(&(addr)->bits[6], (prtno)))
#define mnaWellKnown(addr)  (sysxGetUaB4((addr)->bits) == 0xffffffff)

void    mnaInit(mnctx *ctx, mnnio **nios, ub4 nnio, mnnpa *gtwy);
void    mnaTerm(mnctx *ctx);
void    mnaTeardown(mnctx *ctx, mnnio *nio, mnHandler handler, dvoid *usrp);
void    mnaReopen(dvoid *usrp, sb4 sts);
boolean mnaIsDest(mnctx *ctx, mna *nioaddr, mna *dst);
sb4     mnaRequest(mnctx *ctx, mna *addr, mnHandler handler, dvoid *usrp);
void    mnaRequestHandle(dvoid *usrp, sb4 sts);
mnrte  *mnaInsertRoute(mnctx *ctx, mna *addr, ub4 mask, mnnio *nio, mnnpa *pa,
		       ub4 flags);
mnrte  *mnaFindRoute(mnctx *ctx, mna *dst);
void    mnaDeleteRoute(mnctx *ctx, mnrte *rte);
void    mnaRouteReaper(dvoid *ptr, sb4 val);
sb4     mnaBind(mnctx *ctx, mna *addr, mnp *port, boolean req);
mnp    *mnaFind(mnctx *ctx, mna *addr);
void    mnaUnbind(mnctx *ctx, mnp *port);
void    mnaSetDeath(mnctx *ctx, mnaDeathH mortH, dvoid *mortP);

/*
 * Transport Layer
 */
#define MNSTS_CLOSED       1
#define MNSTS_CONNECT      2
#define MNSTS_LISTEN       3
#define MNSTS_ESTABLISHED  4
#define MNSTS_FINISH       5
#define MNSTS_DISCONNECT   6
#define MNSTS_TIMEWAIT     7

#define MNSTS_IDLE         8
#define MNSTS_XMIT         9
#define MNSTS_REXMIT      10
#define MNSTS_PERSIST     11
/* MNERR_BROKEN */
/* MNERR_BADPROTO */
/* MNERR_BADADDR */

#define MNTMINREXMT    750                       /* minimum retransmit timer */
#define MNTMAXREXMT  20000                       /* maximum retransmit timer */
#define MNTMAXRXCNT     10             /* maximum number of retransmit tries */

#define MNTPRTLIFE ((ub4) 60000)                 /* life of a port when idle */
#define MNTRCVLIFE ((ub4) 30000)   /* life of a message rcv when established */

struct mnp
{
  mnp        *next;                                    /* next port in queue */
  mnp        *nport;                              /* next port in hash table */
  mnp        *pport;                          /* previous port in hash table */

  ub4         proto;                                        /* port protocol */
  ub4         flags;                                           /* user flags */
  mna         me;                                            /* port address */
  mna         peer;                                          /* peer address */
  mnrte      *rte;                                       /* route to send to */

  const char *name;                                          /* name of port */

  /* send state */
  sb4     sstate;                                           /* state of port */

  mnsem  *rxsem;                               /* retransmit timer semaphore */
  ub4     rxcnt;                                         /* retransmit count */
  ub4     rexmt;                                 /* retransmit time interval */
  ub4     pscnt;                                            /* persist count */

  sb4     fsseq;                               /* first sequence ID assigned */
  sb4     naseq;                               /* next sequence ID to assign */

  ub4     swind;                                         /* send window size */
  ub4     srt;                          /* smoothed round-trip time (1/8 ms) */
  ub4     rtde;                             /* round-trip deviation (1/4 ms) */

  mnnpkt *unpkt;                              /* first unacknowledged packet */
  mnnpkt *nspkt;                                      /* next packet to send */
  mnnpkt *lspkt;                                     /* last packet in queue */

  mnq     se;                                  /* send event queue (mntse *) */

  /* receive state */
  sb4     rstate;                                           /* state of port */
  sb4     rtime;                                /* time of last state change */
  mnsem  *clnsem;                                /* clean-up timer semaphore */

  sb4     nrseq;                     /* next sequence ID expected to receive */

  mnnpkt *rs;                                            /* receive segments */
  mnnpkt *ls;                             /* last contiguous segment in list */

#ifdef USE_YSLST
  yslst  *accepts;
#else
  mnq     accepts;                            /* newly arrived ports (mnp *) */
#endif
  mnq     re;                                              /* receive events */

  boolean ackpend;                  /* true if an acknowledgement is pending */
  boolean resetseen;    /* true if a reset has been seen since last clean-up */
  boolean everrcv;             /* TRUE if we have received data on this port */
};

struct mntse
{
  mntse *next;                                   /* next send event in chain */
  mnsem *sem;                                            /* semaphore to set */
  sb4    seqid;                                   /* sequence id to wait for */
  ub4    cnt;                               /* number of bytes for semaphore */
};

struct mntre
{
  mntre  *next;                               /* next receive event in chain */
  mnsem  *sem;                                           /* semaphore to set */
  mna    *from;                     /* optional from address (messages only) */
  mnbv   *origbv;                       /* original buffer vector (optional) */
  mnbv   *cbv;                            /* current buffer vector in origbv */
  ub4     nbv;                              /* number of buffer vectors left */
  ub4     cnt;                      /* total data transferred for this event */
  boolean fill;                     /* retain the event until filled if true */
};


ub4     mntPortHash(ub2 prtno, mna *peer);
void    mntInsertPort(mnctx *ctx, mnp *port);
void    mntRemovePort(mnctx *ctx, mnp *port);
mnp    *mntFindPort(mnctx *ctx, mna *me, mna *peer);
void    mntIn(mnctx *ctx, mnnpkt *pkt);
mnp    *mntCreatePort(mnctx *ctx, mnp *port, mna *peer, mnrte *rte);
void    mntBlowPort(dvoid *pp, sb4 val);
void    mntDestroyPort(mnctx *ctx, mnp *port);
void    mntCleanSetup(mnctx *ctx, mnp *port, ub4 delay);
void    mntClean(dvoid *pp, sb4 val);
 
ub4     mntInAck(mnctx *ctx, mnnpkt *pkt, mnp *port);
void    mntXmit(dvoid *pp, sb4 val);
void    mntRexmit(dvoid *pp, sb4 val);
sb4     mntSend(mnctx *ctx, mnp *port, ub1 *hbuf, size_t hlen,
		mnbv *bv, ub4 nbv, boolean fst, boolean eof, mnsem *sem);
sb4     mntSendFill(mnctx *ctx, mnp *port, ub1 *buf, size_t len, ub4 totlen,
		    boolean first, boolean eof);
sb4     mntAppendPkt(mnctx *ctx, mnp *port, ub4 totlen, boolean first);
void    mntAbort(mnctx *ctx, mnp *port, sb4 sts);
sb4     mnSendHeader(mnp *port, mna *to, ub1 *buf, size_t len,
		     mnbv *bv, ub4 nbv, mnHandler handler, dvoid *usrp);

ub4     mntInOpen(mnctx *ctx, mnnpkt *pkt, mnp *port);
void    mntInData(mnctx *ctx, mnnpkt *pkt, mnp *port);
void    mntSendAck(dvoid *pp, sb4 val);
void    mntRecvAccept(mnctx *ctx, mnp *port);
void    mntRecvDisc(mnctx *ctx, mnp *port);
void    mntRecvData(mnctx *ctx, mnp *port);
boolean mntRecvFill(mnctx *ctx, mnp *port, mntre *re);
sb4     mntRecv(mnp *port, mna *from, mnbv *bv, ub4 nbv,
		ub4 timeout, mnHandler handler, dvoid *usrp, boolean fill);
sb4 mntinRecvTest(mnp *port, mna *from);

/*
 * Blob Transport
 */
void mnBlobAccept(dvoid *bp, sb4 sts);
void mnBlobRead(dvoid *bp, sb4 sts);
void mnBlobRexmt(mnctx *ctx, mnp *port);
void mnBlobClose(dvoid *bp, sb4 sts);

/*
 * Control Protocol
 */
#define MNOTYP_DESTNOTREACH  ((ub4) 1)
#define MNOTYP_DESTNOTVALID  ((ub4) 2)
#define MNOTYP_REDIRECT      ((ub4) 3)
#define MNOTYP_RESET         ((ub4) 4)
#define MNOTYP_ADDRHB        ((ub4) 5)
#define MNOTYP_ADDRREQUEST   ((ub4) 6)
#define MNOTYP_ADDRREPLY     ((ub4) 7)
#define MNOTYP_ADDRRELEASE   ((ub4) 8)
#define MNOTYP_ECHOREQUEST   ((ub4) 9)
#define MNOTYP_ECHOREPLY     ((ub4) 10)
#define MNOTYP_SETDOMAIN     ((ub4) 11)
#define MNOTYP_ADDRSYNCH     ((ub4) 12)
#define MNOTYP_RESETRCVR     ((ub4) 13)

void mnoIn(mnctx *ctx, mnnpkt *pkt);
void mnoFill(mnctx *ctx);
sb4  mnoRecv(mnctx *ctx, mna *from, mnbv *bv, ub4 nbv,
	     ub4 timeout, mnHandler handler, dvoid *usrp);
sb4  mnoSendAddrRequest(mnctx *ctx, mna *addr);
sb4  mnoSendAddrReply(mnctx *ctx, sb4 sts, mna *to,
		      mna *addr, mnnio *nio, mnnpa *pa);
sb4  mnoSendAddrRelease(mnctx *ctx, mna *addr);
sb4  mnoSend(mnctx *ctx, ub4 typ, mna *dst, mna *src);
sb4  mnoSendWRte(mnctx *ctx, ub4 typ, mna *dst, mna *src, mnrte *rte);
sb4  mnoSendRedirect(mnctx *ctx, mnnpkt *pkt, mnrte *rte, ub4 flags);
sb4  mnoSendSetDomain(mnctx *ctx, mna *addr, char *cwd);
sb4  mnoSendResetRcvr(mnctx *ctx, mnnpkt *pkt, sb4 seqid);
boolean mnoIsAddrReq(ub1 *buf);

/*
 * Nameserver client side cache
 */
void mzncInit(mnctx *ctx);
void mzncTerm(mnctx *ctx);

/*
 * Global Context
 */
#define MNFLG_STROBE ((ub4) 0x4000) /* multiple non-interrupt receiving NIOs */
#define MNFLG_INTR   ((ub4) 0x1000)                /* interrupt NIOs present */

#define MNPORTROWS     257                        /* rows in port hash table */

struct mnctx
{
  mnmctx  *mctx;                                   /* memory manager context */
  mnectx  *ectx;                                    /* event manager context */
  mnactx  *actx;                                  /* address manager context */

  ysmtx    glbmtx;                                 /* global Media Net mutex */

  ub4      flags;                                           /* flag bitfield */
  mnLogger lfunc;                                        /* logging function */
  sb4      lasterror;                                          /* last error */
  ub4      mwind;                                     /* maximum window size */

  sb4      iss;                                   /* initial sequence number */

  mnnio   *nios;                                                 /* NIO list */
  mnnio   *rnio;                                         /* primary receiver */

  mnp     *ports[MNPORTROWS];                             /* port hash table */
  ub2      nprtno;                             /* next port number to assign */

  mnq      ocppkt;                                /* inbound OCP packet list */
  mnq      re;                                         /* OCP receive events */

  char    *cwd;                                 /* current working directory */

  mnrb    *nsbh;                     /* client binding handle to name server */
  mzncd   *nscd;                        /* nameserve client cache descriptor */

  boolean  idleactive;                    /* set to TRUE if idler was active */
  ub4      crcnt;                                   /* critical region count */
  ub4      initcnt;                                   /* refcnt for mnInit() */
  yslst   *rcvnios;                                  /* list of receive nios */
};

#define mnSetLastError(ctx, err)  ((ctx)->lasterror = (err))
#define mnGlbCtx                  ((mnctx *) mtcctxGet(MNETCTX, (ub4) 0))

#endif /* MNI_ORACLE */
