/* GENERATED FILE
 * yrdiidl - public declarations
 * from /home/alind/work/portkit/mn335/mx/pub/yrdiidl.idl
 */

#ifndef YRDIIDL_ORACLE
#define YRDIIDL_ORACLE

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif

EXTC_START

/**********  SEQUENCE DECLARATIONS *********/
#ifndef YCIDL_sequence_CORBA_Object_DEFINED
#define YCIDL_sequence_CORBA_Object_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  CORBA_Object* _buffer;
} YCIDL_sequence_CORBA_Object;
#ifndef YCIDL_sequence_CORBA_Object_SUPP_FUNCS
#define YCIDL_sequence_CORBA_Object_SUPP_FUNCS
#endif /* YCIDL_sequence_CORBA_Object_SUPP_FUNCS */

#endif /* YCIDL_sequence_CORBA_Object_DEFINED */


/* interface CORBA_IRObject declarations */
#ifndef CORBA_IRObject_DECLARED
#define CORBA_IRObject_DECLARED
typedef struct YCCORBA_IRObject* CORBA_IRObject;
CONST yotk* CORBA_IRObject__getTC(void);
#ifndef YCTC_CORBA_IRObject
#define YCTC_CORBA_IRObject   (CORBA_IRObject__getTC())
#endif
#endif /* CORBA_IRObject_DECLARED */

#ifndef CORBA_IRObject_SUPP_FUNCS
#define CORBA_IRObject_SUPP_FUNCS
void CORBA_IRObject__free( CORBA_IRObject* val, ysmff ffunc);
void CORBA_IRObject__copy( CORBA_IRObject* dest, CORBA_IRObject* src, ysmaf 
  afunc);
#endif /* CORBA_IRObject_SUPP_FUNCS */

#ifndef YCIDL_sequence_CORBA_IRObject_DEFINED
#define YCIDL_sequence_CORBA_IRObject_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  CORBA_IRObject* _buffer;
} YCIDL_sequence_CORBA_IRObject;
#ifndef YCIDL_sequence_CORBA_IRObject_SUPP_FUNCS
#define YCIDL_sequence_CORBA_IRObject_SUPP_FUNCS
#endif /* YCIDL_sequence_CORBA_IRObject_SUPP_FUNCS */

#endif /* YCIDL_sequence_CORBA_IRObject_DEFINED */

#ifndef yo_par_DECLARED
#define yo_par_DECLARED
typedef struct yo_par yo_par;
#endif /* yo_par_DECLARED */

#ifndef YCIDL_sequence_yo_par_DEFINED
#define YCIDL_sequence_yo_par_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  yo_par* _buffer;
} YCIDL_sequence_yo_par;
#ifndef YCIDL_sequence_yo_par_SUPP_FUNCS
#define YCIDL_sequence_yo_par_SUPP_FUNCS
#endif /* YCIDL_sequence_yo_par_SUPP_FUNCS */

#endif /* YCIDL_sequence_yo_par_DEFINED */

#ifndef yr_reqDesc_DECLARED
#define yr_reqDesc_DECLARED
typedef struct yr_reqDesc yr_reqDesc;
#endif /* yr_reqDesc_DECLARED */

#ifndef YCIDL_sequence_yr_reqDesc_DEFINED
#define YCIDL_sequence_yr_reqDesc_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  yr_reqDesc* _buffer;
} YCIDL_sequence_yr_reqDesc;
#ifndef YCIDL_sequence_yr_reqDesc_SUPP_FUNCS
#define YCIDL_sequence_yr_reqDesc_SUPP_FUNCS
#endif /* YCIDL_sequence_yr_reqDesc_SUPP_FUNCS */

#endif /* YCIDL_sequence_yr_reqDesc_DEFINED */

#ifndef yr_intfDesc_DECLARED
#define yr_intfDesc_DECLARED
typedef struct yr_intfDesc yr_intfDesc;
#endif /* yr_intfDesc_DECLARED */

#ifndef YCIDL_sequence_yr_intfDesc_DEFINED
#define YCIDL_sequence_yr_intfDesc_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  yr_intfDesc* _buffer;
} YCIDL_sequence_yr_intfDesc;
#ifndef YCIDL_sequence_yr_intfDesc_SUPP_FUNCS
#define YCIDL_sequence_yr_intfDesc_SUPP_FUNCS
#endif /* YCIDL_sequence_yr_intfDesc_SUPP_FUNCS */

#endif /* YCIDL_sequence_yr_intfDesc_DEFINED */

/******* NON-SEQUENCE DECLARATIONS *******/

/* interface yoevt declarations */
#ifndef yoevt_DECLARED
#define yoevt_DECLARED
typedef struct YCyoevt* yoevt;
CONST yotk* yoevt__getTC(void);
#ifndef YCTC_yoevt
#define YCTC_yoevt   (yoevt__getTC())
#endif
#endif /* yoevt_DECLARED */

#ifndef yoevt_SUPP_FUNCS
#define yoevt_SUPP_FUNCS
void yoevt__free( yoevt* val, ysmff ffunc);
void yoevt__copy( yoevt* dest, yoevt* src, ysmaf afunc);
#endif /* yoevt_SUPP_FUNCS */

#ifndef yostd_stringList_DECLARED
#define yostd_stringList_DECLARED
typedef YCIDL_sequence_string yostd_stringList;
CONST yotk* yostd_stringList__getTC(void);
#ifndef YCTC_yostd_stringList
#define YCTC_yostd_stringList   (yostd_stringList__getTC())
#endif
#endif /* yostd_stringList_DECLARED */

#ifndef yostd_stringList_SUPP_FUNCS
#define yostd_stringList_SUPP_FUNCS
void yostd_stringList__free( yostd_stringList* val, ysmff ffunc);
void yostd_stringList__copy( yostd_stringList* dest, yostd_stringList* src, 
  ysmaf afunc);
#endif /* yostd_stringList_SUPP_FUNCS */

#ifndef yostd_objList_DECLARED
#define yostd_objList_DECLARED
typedef YCIDL_sequence_CORBA_Object yostd_objList;
CONST yotk* yostd_objList__getTC(void);
#ifndef YCTC_yostd_objList
#define YCTC_yostd_objList   (yostd_objList__getTC())
#endif
#endif /* yostd_objList_DECLARED */

#ifndef yostd_objList_SUPP_FUNCS
#define yostd_objList_SUPP_FUNCS
void yostd_objList__free( yostd_objList* val, ysmff ffunc);
void yostd_objList__copy( yostd_objList* dest, yostd_objList* src, ysmaf 
  afunc);
#endif /* yostd_objList_SUPP_FUNCS */

#ifndef yostd_octetSeq_DECLARED
#define yostd_octetSeq_DECLARED
typedef YCIDL_sequence_ub1 yostd_octetSeq;
CONST yotk* yostd_octetSeq__getTC(void);
#ifndef YCTC_yostd_octetSeq
#define YCTC_yostd_octetSeq   (yostd_octetSeq__getTC())
#endif
#endif /* yostd_octetSeq_DECLARED */

#ifndef yostd_octetSeq_SUPP_FUNCS
#define yostd_octetSeq_SUPP_FUNCS
void yostd_octetSeq__free( yostd_octetSeq* val, ysmff ffunc);
void yostd_octetSeq__copy( yostd_octetSeq* dest, yostd_octetSeq* src, ysmaf 
  afunc);
#endif /* yostd_octetSeq_SUPP_FUNCS */

#ifndef CORBA_Identifier_DECLARED
#define CORBA_Identifier_DECLARED
typedef char* CORBA_Identifier;
CONST yotk* CORBA_Identifier__getTC(void);
#ifndef YCTC_CORBA_Identifier
#define YCTC_CORBA_Identifier   (CORBA_Identifier__getTC())
#endif
#endif /* CORBA_Identifier_DECLARED */

#ifndef CORBA_Identifier_SUPP_FUNCS
#define CORBA_Identifier_SUPP_FUNCS
#endif /* CORBA_Identifier_SUPP_FUNCS */

#ifndef CORBA_ScopedName_DECLARED
#define CORBA_ScopedName_DECLARED
typedef char* CORBA_ScopedName;
CONST yotk* CORBA_ScopedName__getTC(void);
#ifndef YCTC_CORBA_ScopedName
#define YCTC_CORBA_ScopedName   (CORBA_ScopedName__getTC())
#endif
#endif /* CORBA_ScopedName_DECLARED */

#ifndef CORBA_ScopedName_SUPP_FUNCS
#define CORBA_ScopedName_SUPP_FUNCS
#endif /* CORBA_ScopedName_SUPP_FUNCS */

#ifndef CORBA_RepositoryId_DECLARED
#define CORBA_RepositoryId_DECLARED
typedef char* CORBA_RepositoryId;
CONST yotk* CORBA_RepositoryId__getTC(void);
#ifndef YCTC_CORBA_RepositoryId
#define YCTC_CORBA_RepositoryId   (CORBA_RepositoryId__getTC())
#endif
#endif /* CORBA_RepositoryId_DECLARED */

#ifndef CORBA_RepositoryId_SUPP_FUNCS
#define CORBA_RepositoryId_SUPP_FUNCS
#endif /* CORBA_RepositoryId_SUPP_FUNCS */

#ifndef CORBA_RepositoryIdSeq_DECLARED
#define CORBA_RepositoryIdSeq_DECLARED
typedef YCIDL_sequence_string CORBA_RepositoryIdSeq;
CONST yotk* CORBA_RepositoryIdSeq__getTC(void);
#ifndef YCTC_CORBA_RepositoryIdSeq
#define YCTC_CORBA_RepositoryIdSeq   (CORBA_RepositoryIdSeq__getTC())
#endif
#endif /* CORBA_RepositoryIdSeq_DECLARED */

#ifndef CORBA_RepositoryIdSeq_SUPP_FUNCS
#define CORBA_RepositoryIdSeq_SUPP_FUNCS
void CORBA_RepositoryIdSeq__free( CORBA_RepositoryIdSeq* val, ysmff ffunc);
void CORBA_RepositoryIdSeq__copy( CORBA_RepositoryIdSeq* dest, 
  CORBA_RepositoryIdSeq* src, ysmaf afunc);
#endif /* CORBA_RepositoryIdSeq_SUPP_FUNCS */

#ifndef CORBA_VersionSpec_DECLARED
#define CORBA_VersionSpec_DECLARED
typedef char* CORBA_VersionSpec;
CONST yotk* CORBA_VersionSpec__getTC(void);
#ifndef YCTC_CORBA_VersionSpec
#define YCTC_CORBA_VersionSpec   (CORBA_VersionSpec__getTC())
#endif
#endif /* CORBA_VersionSpec_DECLARED */

#ifndef CORBA_VersionSpec_SUPP_FUNCS
#define CORBA_VersionSpec_SUPP_FUNCS
#endif /* CORBA_VersionSpec_SUPP_FUNCS */


/* interface CORBA_IRObject declarations */
#ifndef CORBA_IRObject_DECLARED
#define CORBA_IRObject_DECLARED
typedef struct YCCORBA_IRObject* CORBA_IRObject;
CONST yotk* CORBA_IRObject__getTC(void);
#ifndef YCTC_CORBA_IRObject
#define YCTC_CORBA_IRObject   (CORBA_IRObject__getTC())
#endif
#endif /* CORBA_IRObject_DECLARED */

#ifndef CORBA_IRObject_SUPP_FUNCS
#define CORBA_IRObject_SUPP_FUNCS
void CORBA_IRObject__free( CORBA_IRObject* val, ysmff ffunc);
void CORBA_IRObject__copy( CORBA_IRObject* dest, CORBA_IRObject* src, ysmaf 
  afunc);
#endif /* CORBA_IRObject_SUPP_FUNCS */

#ifndef CORBA_IRObjectSeq_DECLARED
#define CORBA_IRObjectSeq_DECLARED
typedef YCIDL_sequence_CORBA_IRObject CORBA_IRObjectSeq;
CONST yotk* CORBA_IRObjectSeq__getTC(void);
#ifndef YCTC_CORBA_IRObjectSeq
#define YCTC_CORBA_IRObjectSeq   (CORBA_IRObjectSeq__getTC())
#endif
#endif /* CORBA_IRObjectSeq_DECLARED */

#ifndef CORBA_IRObjectSeq_SUPP_FUNCS
#define CORBA_IRObjectSeq_SUPP_FUNCS
void CORBA_IRObjectSeq__free( CORBA_IRObjectSeq* val, ysmff ffunc);
void CORBA_IRObjectSeq__copy( CORBA_IRObjectSeq* dest, CORBA_IRObjectSeq* 
  src, ysmaf afunc);
#endif /* CORBA_IRObjectSeq_SUPP_FUNCS */

#ifndef yr_repid_DECLARED
#define yr_repid_DECLARED
typedef CORBA_RepositoryId yr_repid;
CONST yotk* yr_repid__getTC(void);
#ifndef YCTC_yr_repid
#define YCTC_yr_repid   (yr_repid__getTC())
#endif
#endif /* yr_repid_DECLARED */

#ifndef yr_repid_SUPP_FUNCS
#define yr_repid_SUPP_FUNCS
#endif /* yr_repid_SUPP_FUNCS */

#ifndef yr_repidseq_DECLARED
#define yr_repidseq_DECLARED
typedef CORBA_RepositoryIdSeq yr_repidseq;
CONST yotk* yr_repidseq__getTC(void);
#ifndef YCTC_yr_repidseq
#define YCTC_yr_repidseq   (yr_repidseq__getTC())
#endif
#endif /* yr_repidseq_DECLARED */

#ifndef yr_repidseq_SUPP_FUNCS
#define yr_repidseq_SUPP_FUNCS
#define yr_repidseq__free(val, ffunc) CORBA_RepositoryIdSeq__free((val),( \
  ffunc))
#define yr_repidseq__copy(dest, src, afunc) CORBA_RepositoryIdSeq__copy(( \
  dest),(src),(afunc))
#endif /* yr_repidseq_SUPP_FUNCS */

#ifndef yr_vers_DECLARED
#define yr_vers_DECLARED
typedef CORBA_VersionSpec yr_vers;
CONST yotk* yr_vers__getTC(void);
#ifndef YCTC_yr_vers
#define YCTC_yr_vers   (yr_vers__getTC())
#endif
#endif /* yr_vers_DECLARED */

#ifndef yr_vers_SUPP_FUNCS
#define yr_vers_SUPP_FUNCS
#endif /* yr_vers_SUPP_FUNCS */

#ifndef yr_objseq_DECLARED
#define yr_objseq_DECLARED
typedef CORBA_IRObjectSeq yr_objseq;
CONST yotk* yr_objseq__getTC(void);
#ifndef YCTC_yr_objseq
#define YCTC_yr_objseq   (yr_objseq__getTC())
#endif
#endif /* yr_objseq_DECLARED */

#ifndef yr_objseq_SUPP_FUNCS
#define yr_objseq_SUPP_FUNCS
#define yr_objseq__free(val, ffunc) CORBA_IRObjectSeq__free((val),(ffunc))
#define yr_objseq__copy(dest, src, afunc) CORBA_IRObjectSeq__copy((dest),( \
  src),(afunc))
#endif /* yr_objseq_SUPP_FUNCS */

#ifndef yr_srcref_DECLARED
#define yr_srcref_DECLARED
typedef struct yr_srcref yr_srcref;
#endif /* yr_srcref_DECLARED */

#ifndef yr_srcref_DEFINED
#define yr_srcref_DEFINED
struct yr_srcref
{
  char* filename;
  ub4 lineno;
};
CONST yotk* yr_srcref__getTC(void);
#ifndef YCTC_yr_srcref
#define YCTC_yr_srcref   (yr_srcref__getTC())
#endif
#endif /* yr_srcref_DEFINED */

#ifndef yr_srcref_SUPP_FUNCS
#define yr_srcref_SUPP_FUNCS
void yr_srcref__free( yr_srcref* val, ysmff ffunc);
void yr_srcref__copy( yr_srcref* dest, yr_srcref* src, ysmaf afunc);
#endif /* yr_srcref_SUPP_FUNCS */

#ifndef yr_path_DECLARED
#define yr_path_DECLARED
typedef char* yr_path;
CONST yotk* yr_path__getTC(void);
#ifndef YCTC_yr_path
#define YCTC_yr_path   (yr_path__getTC())
#endif
#endif /* yr_path_DECLARED */

#ifndef yr_path_SUPP_FUNCS
#define yr_path_SUPP_FUNCS
#endif /* yr_path_SUPP_FUNCS */

#ifndef yr_pathSeq_DECLARED
#define yr_pathSeq_DECLARED
typedef YCIDL_sequence_string yr_pathSeq;
CONST yotk* yr_pathSeq__getTC(void);
#ifndef YCTC_yr_pathSeq
#define YCTC_yr_pathSeq   (yr_pathSeq__getTC())
#endif
#endif /* yr_pathSeq_DECLARED */

#ifndef yr_pathSeq_SUPP_FUNCS
#define yr_pathSeq_SUPP_FUNCS
void yr_pathSeq__free( yr_pathSeq* val, ysmff ffunc);
void yr_pathSeq__copy( yr_pathSeq* dest, yr_pathSeq* src, ysmaf afunc);
#endif /* yr_pathSeq_SUPP_FUNCS */

#ifndef yo_par_DECLARED
#define yo_par_DECLARED
typedef struct yo_par yo_par;
#endif /* yo_par_DECLARED */

#ifndef yo_par_DEFINED
#define yo_par_DEFINED
struct yo_par
{
  sb4 mode;
  yotk* tk;
  ub4 sz;
};
CONST yotk* yo_par__getTC(void);
#ifndef YCTC_yo_par
#define YCTC_yo_par   (yo_par__getTC())
#endif
#endif /* yo_par_DEFINED */

#ifndef yo_par_SUPP_FUNCS
#define yo_par_SUPP_FUNCS
void yo_par__free( yo_par* val, ysmff ffunc);
void yo_par__copy( yo_par* dest, yo_par* src, ysmaf afunc);
#endif /* yo_par_SUPP_FUNCS */

#ifndef yo_parList_DECLARED
#define yo_parList_DECLARED
typedef YCIDL_sequence_yo_par yo_parList;
CONST yotk* yo_parList__getTC(void);
#ifndef YCTC_yo_parList
#define YCTC_yo_parList   (yo_parList__getTC())
#endif
#endif /* yo_parList_DECLARED */

#ifndef yo_parList_SUPP_FUNCS
#define yo_parList_SUPP_FUNCS
void yo_parList__free( yo_parList* val, ysmff ffunc);
void yo_parList__copy( yo_parList* dest, yo_parList* src, ysmaf afunc);
#endif /* yo_parList_SUPP_FUNCS */

#ifndef yr_scopedNameList_DECLARED
#define yr_scopedNameList_DECLARED
typedef YCIDL_sequence_string yr_scopedNameList;
CONST yotk* yr_scopedNameList__getTC(void);
#ifndef YCTC_yr_scopedNameList
#define YCTC_yr_scopedNameList   (yr_scopedNameList__getTC())
#endif
#endif /* yr_scopedNameList_DECLARED */

#ifndef yr_scopedNameList_SUPP_FUNCS
#define yr_scopedNameList_SUPP_FUNCS
void yr_scopedNameList__free( yr_scopedNameList* val, ysmff ffunc);
void yr_scopedNameList__copy( yr_scopedNameList* dest, yr_scopedNameList* 
  src, ysmaf afunc);
#endif /* yr_scopedNameList_SUPP_FUNCS */

#ifndef yr_parNameList_DECLARED
#define yr_parNameList_DECLARED
typedef YCIDL_sequence_string yr_parNameList;
CONST yotk* yr_parNameList__getTC(void);
#ifndef YCTC_yr_parNameList
#define YCTC_yr_parNameList   (yr_parNameList__getTC())
#endif
#endif /* yr_parNameList_DECLARED */

#ifndef yr_parNameList_SUPP_FUNCS
#define yr_parNameList_SUPP_FUNCS
void yr_parNameList__free( yr_parNameList* val, ysmff ffunc);
void yr_parNameList__copy( yr_parNameList* dest, yr_parNameList* src, ysmaf 
  afunc);
#endif /* yr_parNameList_SUPP_FUNCS */

#ifndef yr_reqDesc_DECLARED
#define yr_reqDesc_DECLARED
typedef struct yr_reqDesc yr_reqDesc;
#endif /* yr_reqDesc_DECLARED */

#ifndef yr_reqDesc_DEFINED
#define yr_reqDesc_DEFINED
struct yr_reqDesc
{
  char* name;
  boolean isOneway;
  yr_parNameList parNames;
  yo_parList pars;
};
CONST yotk* yr_reqDesc__getTC(void);
#ifndef YCTC_yr_reqDesc
#define YCTC_yr_reqDesc   (yr_reqDesc__getTC())
#endif
#endif /* yr_reqDesc_DEFINED */

#ifndef yr_reqDesc_SUPP_FUNCS
#define yr_reqDesc_SUPP_FUNCS
void yr_reqDesc__free( yr_reqDesc* val, ysmff ffunc);
void yr_reqDesc__copy( yr_reqDesc* dest, yr_reqDesc* src, ysmaf afunc);
#endif /* yr_reqDesc_SUPP_FUNCS */

#ifndef yr_reqDescList_DECLARED
#define yr_reqDescList_DECLARED
typedef YCIDL_sequence_yr_reqDesc yr_reqDescList;
CONST yotk* yr_reqDescList__getTC(void);
#ifndef YCTC_yr_reqDescList
#define YCTC_yr_reqDescList   (yr_reqDescList__getTC())
#endif
#endif /* yr_reqDescList_DECLARED */

#ifndef yr_reqDescList_SUPP_FUNCS
#define yr_reqDescList_SUPP_FUNCS
void yr_reqDescList__free( yr_reqDescList* val, ysmff ffunc);
void yr_reqDescList__copy( yr_reqDescList* dest, yr_reqDescList* src, ysmaf 
  afunc);
#endif /* yr_reqDescList_SUPP_FUNCS */

#ifndef yr_intfDesc_DECLARED
#define yr_intfDesc_DECLARED
typedef struct yr_intfDesc yr_intfDesc;
#endif /* yr_intfDesc_DECLARED */

#ifndef yr_intfDesc_DEFINED
#define yr_intfDesc_DEFINED
struct yr_intfDesc
{
  CORBA_ScopedName name;
  char* interfaceId;
  yr_reqDescList ops;
};
CONST yotk* yr_intfDesc__getTC(void);
#ifndef YCTC_yr_intfDesc
#define YCTC_yr_intfDesc   (yr_intfDesc__getTC())
#endif
#endif /* yr_intfDesc_DEFINED */

#ifndef yr_intfDesc_SUPP_FUNCS
#define yr_intfDesc_SUPP_FUNCS
void yr_intfDesc__free( yr_intfDesc* val, ysmff ffunc);
void yr_intfDesc__copy( yr_intfDesc* dest, yr_intfDesc* src, ysmaf afunc);
#endif /* yr_intfDesc_SUPP_FUNCS */

#ifndef yr_intfDescList_DECLARED
#define yr_intfDescList_DECLARED
typedef YCIDL_sequence_yr_intfDesc yr_intfDescList;
CONST yotk* yr_intfDescList__getTC(void);
#ifndef YCTC_yr_intfDescList
#define YCTC_yr_intfDescList   (yr_intfDescList__getTC())
#endif
#endif /* yr_intfDescList_DECLARED */

#ifndef yr_intfDescList_SUPP_FUNCS
#define yr_intfDescList_SUPP_FUNCS
void yr_intfDescList__free( yr_intfDescList* val, ysmff ffunc);
void yr_intfDescList__copy( yr_intfDescList* dest, yr_intfDescList* src, 
  ysmaf afunc);
#endif /* yr_intfDescList_SUPP_FUNCS */

#ifndef yr_intfIdList_DECLARED
#define yr_intfIdList_DECLARED
typedef YCIDL_sequence_string yr_intfIdList;
CONST yotk* yr_intfIdList__getTC(void);
#ifndef YCTC_yr_intfIdList
#define YCTC_yr_intfIdList   (yr_intfIdList__getTC())
#endif
#endif /* yr_intfIdList_DECLARED */

#ifndef yr_intfIdList_SUPP_FUNCS
#define yr_intfIdList_SUPP_FUNCS
void yr_intfIdList__free( yr_intfIdList* val, ysmff ffunc);
void yr_intfIdList__copy( yr_intfIdList* dest, yr_intfIdList* src, ysmaf 
  afunc);
#endif /* yr_intfIdList_SUPP_FUNCS */


/* interface yr_dii declarations */
#ifndef yr_dii_DECLARED
#define yr_dii_DECLARED
typedef struct YCyr_dii* yr_dii;
CONST yotk* yr_dii__getTC(void);
#ifndef YCTC_yr_dii
#define YCTC_yr_dii   (yr_dii__getTC())
#endif
#endif /* yr_dii_DECLARED */

#ifndef yr_dii_SUPP_FUNCS
#define yr_dii_SUPP_FUNCS
void yr_dii__free( yr_dii* val, ysmff ffunc);
void yr_dii__copy( yr_dii* dest, yr_dii* src, ysmaf afunc);
#endif /* yr_dii_SUPP_FUNCS */

#ifndef yr_dii_DEFINED
#define yr_dii_DEFINED
struct yostub* yr_dii__getStubs(void);
#define yr_dii__stubs (yr_dii__getStubs())
#endif /* yr_dii_DEFINED */

CONST ysid* yr_dii__getId(void);
#ifndef yr_dii__id
#define yr_dii__id   (yr_dii__getId())
#endif
#ifndef YR_DII_EX_NOTFOUND_DECLARED
#define YR_DII_EX_NOTFOUND_DECLARED
CONST ysid* yr_dii_NotFound__getId(void);
#ifndef YR_DII_EX_NOTFOUND
#define YR_DII_EX_NOTFOUND   (yr_dii_NotFound__getId())
#endif
#endif /* YR_DII_EX_NOTFOUND_DECLARED */

#ifndef yr_dii_NotFound_DECLARED
#define yr_dii_NotFound_DECLARED
typedef struct yr_dii_NotFound yr_dii_NotFound;
#endif /* yr_dii_NotFound_DECLARED */

#ifndef yr_dii_NotFound_DEFINED
#define yr_dii_NotFound_DEFINED
struct yr_dii_NotFound
{
  CORBA_ScopedName name;
};
CONST yotk* yr_dii_NotFound__getTC(void);
#ifndef YCTC_yr_dii_NotFound
#define YCTC_yr_dii_NotFound   (yr_dii_NotFound__getTC())
#endif
#endif /* yr_dii_NotFound_DEFINED */

#ifndef yr_dii_NotFound_SUPP_FUNCS
#define yr_dii_NotFound_SUPP_FUNCS
void yr_dii_NotFound__free( yr_dii_NotFound* val, ysmff ffunc);
void yr_dii_NotFound__copy( yr_dii_NotFound* dest, yr_dii_NotFound* src, 
  ysmaf afunc);
#endif /* yr_dii_NotFound_SUPP_FUNCS */

yr_reqDescList yr_dii_reqDescByName( yr_dii or, yoenv* ev, 
  yr_scopedNameList* names);
yopar* yr_dii_reqDescByName__getPars(void);
#ifndef yr_dii_reqDescByName_pars
#define yr_dii_reqDescByName_pars (yr_dii_reqDescByName__getPars())
#endif

yr_intfDescList yr_dii_intfDescByName( yr_dii or, yoenv* ev, 
  yr_scopedNameList* names);
yopar* yr_dii_intfDescByName__getPars(void);
#ifndef yr_dii_intfDescByName_pars
#define yr_dii_intfDescByName_pars (yr_dii_intfDescByName__getPars())
#endif

yr_intfDescList yr_dii_intfDescById( yr_dii or, yoenv* ev, yr_intfIdList* 
  ids);
yopar* yr_dii_intfDescById__getPars(void);
#ifndef yr_dii_intfDescById_pars
#define yr_dii_intfDescById_pars (yr_dii_intfDescById__getPars())
#endif

yr_intfDescList yr_dii_intfDescByObj( yr_dii or, yoenv* ev, yostd_objList* 
  intfObjs);
yopar* yr_dii_intfDescByObj__getPars(void);
#ifndef yr_dii_intfDescByObj_pars
#define yr_dii_intfDescByObj_pars (yr_dii_intfDescByObj__getPars())
#endif

#ifndef yr_dii__tyimpl_DEFINED
#define yr_dii__tyimpl_DEFINED
struct yr_dii__tyimpl
{
  yr_reqDescList (*reqDescByName)( yr_dii, yoenv*, yr_scopedNameList*);
  yr_intfDescList (*intfDescByName)( yr_dii, yoenv*, yr_scopedNameList*);
  yr_intfDescList (*intfDescById)( yr_dii, yoenv*, yr_intfIdList*);
  yr_intfDescList (*intfDescByObj)( yr_dii, yoenv*, yostd_objList*);
};
#endif /* yr_dii__tyimpl_DEFINED */

EXTC_END
#endif /* YRDIIDL_ORACLE */
