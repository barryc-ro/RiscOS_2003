/* Copyright (c) Oracle Corporation 1995.  All Rights Reserved. */

/*
  NAME
    ydsp.c
  DESCRIPTION
    YD Orb Daemon Spawner
  PUBLIC FUNCTIONS
    <x>
  PRIVATE FUNCTIONS
    <x>
  NOTES
    <x>
  MODIFIED   (MM/DD/YY)
    dbrower   07/18/95 -  created.
    dbrower   05/17/96 -  fix bug 366675 ("CONST type or" in _i funcs)
    dbrower   06/18/96 -  convert to ysRecord.
*/
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

#ifndef YDIDL_ORACLE
#include <ydidl.h>
#endif
#ifndef YDIDLI_ORACLE
#include <ydidlI.h>
#endif
#ifndef YDSP_ORACLE
#include <ydsp.h>
#endif
#ifndef YDIM_ORACLE
#include <ydim.h>
#endif
#ifndef YDU_ORACLE
#include <ydu.h>
#endif
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
#ifndef YSSP_ORACLE
#include <yssp.h>
#endif
#ifndef YSR_ORACLE
#include <ysr.h>
#endif
#ifndef SYSSP_ORACLE
#include <syssp.h>
#endif
#ifndef YDQ_ORACLE
#include <ydq.h>
#endif
#ifndef YSSTR_ORACLE
#include <ysstr.h>
#endif

/* PRIVATE TYPES AND CONSTANTS */

#define YDSP_FAC    "YDSP"


typedef struct
{
  ysspNode	pnode_ydspn;	/* node on host, pid, affinity */
  ydsp_procInfo	spinfo_ydspn;	/* info about it. */
  boolean	alive_ydspn;	/* false if known dead; presume alive */
} ydspn;

typedef struct
{			
  ydsp_spawner	self_ydspcx;
  ydim_imr	imr_ydspcx;
  sysspctx	*syssp_ydspcx;
  ysque		*q_ydspcx;
  ysspTree	ptree_ydspcx;	/* host, pid, affinity tree */
  ub4		nptree_ydspcx;
} ydspcx;

externdef ysidDecl(YDSP_EX_INTERNAL) = "ydim::internal";

static CONST_W_PTR struct ydsp_spawner__tyimpl ydsp_spawner__impl =
 {
  ydsp_spawner_Launch_i,
  ydsp_spawner_addExisting_i,
  ydsp_spawner__get_self_i,
  ydsp_spawner__get_imr_i,
  ydsp_spawner__get_procs_i
 };

static CONST_W_PTR struct ydsp_proc__tyimpl ydsp_proc_impl =
 {
  ydsp_proc_isAlive_i,
  ydsp_proc_killProc_i,
  ydsp_proc_destroyObj_i,
  ydsp_proc__get_spinfo_i
 };

/* PRIVATE FUNCTION DECLARATIONS */

STATICF sword ydsp_procCmp( CONST dvoid *a, CONST dvoid *b ); 
STATICF boolean ydspIsAlive( ydspcx *cx, ydsp_procInfo *pi );

/* PUBLIC FUNCTIONS */

void ydspInit( ysque *q, ydsp_spawner *oydsp, ydim_imr imr, dvoid *osdp )
{
  ydspcx *cx = (ydspcx*)ysmGlbAlloc( sizeof(*cx), "ydspcx" );
  yoenv ev;

  yoEnvInit(&ev);

  cx->q_ydspcx = q;
  cx->imr_ydspcx = (ydim_imr)yoDuplicate((dvoid*)imr);
  
  DISCARD ysspNewTree( &cx->ptree_ydspcx, ydsp_procCmp );
  cx->nptree_ydspcx = 0;

  yoSetImpl( ydsp_spawner__id, (char*)0, ydsp_spawner__stubs,
	    (dvoid*)&ydsp_spawner__impl, (yoload)0, TRUE, (dvoid*)cx );

  yoSetImpl( ydsp_proc__id, (char*)0, ydsp_proc__stubs,
	    (dvoid*)&ydsp_proc_impl, (yoload)0, FALSE, (dvoid*)cx );

  /* make the ydsp object and keep back pointer */
  cx->self_ydspcx =
    (ydsp_spawner)yoCreate( ydsp_spawner__id, (char*)0,
			   (yoRefData*)0, (char*)0, (dvoid *)cx);

  *oydsp = (ydsp_spawner)yoDuplicate((dvoid*)cx->self_ydspcx);

  cx->syssp_ydspcx = sysspInit( osdp );

  yoImplReady( ydsp_spawner__id, (char*)0, cx->q_ydspcx );
  yoImplReady( ydsp_proc__id, (char*)0, cx->q_ydspcx );

  /* 1400, "ydspInit: objects ready" */
  ysRecord(YS_PRODUCT,YDSP_FAC,(ub4)1400,YSLSEV_INFO, (char*)0, YSLNONE );

  yoEnvFree(&ev);
}

void ydspTerm( ydsp_spawner or, boolean killChildren )
{
  ydspcx    *cx = (ydspcx*)yoGetImplState((dvoid *)or);
  ysspNode  *n;
  ydspn	    *pn;

  /* 1401, "ydspTerm: shutting down" */
  ysRecord(YS_PRODUCT,YDSP_FAC,(ub4)1401,YSLSEV_INFO, (char*)0, YSLNONE );
  
  yoImplDeactivate( ydsp_spawner__id, (char*)0 );

  while( (n = ysspDeq( &cx->ptree_ydspcx.root_ysspTree ) ) )
  {
    cx->nptree_ydspcx--;
    pn = (ydspn*)n->key_ysspNode;
    if( killChildren && pn->alive_ydspn &&
       yoIsEq((dvoid*)pn->spinfo_ydspn.parent_ydsp_procInfo,
	      (dvoid*)cx->self_ydspcx ) &&
       ydspIsAlive( cx, &pn->spinfo_ydspn ) )
      DISCARD sysspKill( cx->syssp_ydspcx,
			pn->spinfo_ydspn.pid_ydsp_procInfo, FALSE );

    yoDispose( (dvoid*)pn->spinfo_ydspn.self_ydsp_procInfo );
    ydsp_procInfo__free( &pn->spinfo_ydspn, yotkFreeStr );
    ysmGlbFree( (dvoid*) pn );
  }

  sysspTerm( cx->syssp_ydspcx );
  yoRelease( (dvoid*)cx->imr_ydspcx );
  yoRelease( (dvoid*)cx->self_ydspcx );
  yoDispose( (dvoid*)cx->self_ydspcx );
  ysmGlbFree( (dvoid*)cx );
}

/* ARGSUSED */
ydsp_spawner ydsp_spawner__get_self_i( ydsp_spawner or, yoenv *ev)
{
  ydspcx    *cx = (ydspcx*)yoGetImplState((dvoid *)or);
  return( (ydsp_spawner)yoDuplicate((dvoid*)cx->self_ydspcx) );
}

/* ARGSUSED */
ydim_imr ydsp_spawner__get_imr_i( ydsp_spawner or, yoenv *ev)
{
  ydspcx    *cx = (ydspcx*)yoGetImplState((dvoid *)or);
  return( (ydim_imr)yoDuplicate((dvoid*)cx->imr_ydspcx) );
}

/* object method */
/* ARGSUSED */
ydsp_procInfoList ydsp_spawner__get_procs_i( ydsp_spawner or, yoenv *ev)
{
  ydspcx    *cx = (ydspcx*)yoGetImplState((dvoid *)or);
  ysspNode  *n;
  ydspn	    *sn;
  sb4	    i;

  ydsp_procInfoList l;

  l._maximum = l._length = cx->nptree_ydspcx;
  l._buffer =
    (ydsp_procInfo*)yoAlloc( (size_t)l._length * sizeof(ydsp_procInfo) );
  
  /* 1410, "ydsp_spawner__get_procs: entry" */
  ysRecord(YS_PRODUCT,YDSP_FAC,(ub4)1410,YSLSEV_DEBUG(1), (char*)0, YSLNONE );

  /* construct the output list */
  i = 0;
  for( n = ysspFHead( &cx->ptree_ydspcx ); n ; n = ysspFNext(n), i++ )
  {
    sn = (ydspn*)n->key_ysspNode;
    if(sn->alive_ydspn)
      sn->alive_ydspn = ydspIsAlive(cx, &sn->spinfo_ydspn);
    ydsp_procInfo__copy( &l._buffer[i], &sn->spinfo_ydspn, yoAlloc );
  }

  /* 1411, "ydsp_spawner__get_procs: exit, %d procs" */
  ysRecord(YS_PRODUCT,YDSP_FAC,(ub4)1411,YSLSEV_DEBUG(1), (char*)0,
	   YSLUB4(l._length), YSLEND );

  return l;
}


/* object method */
void ydsp_spawner_Launch_i( ydsp_spawner or, yoenv *ev,
			   char* path, yostd_stringList* args,
			   ydsp_proc* proc)
{
  ydspcx    *cx = (ydspcx*)yoGetImplState((dvoid *)or);
  ydsp_procInfo spinfo;
  char	    pidbuf[ 64 ];
  sword	    sts;
  
  /* 1412, "ydsp_spawner_Launch_i: path %s" */
  ysRecord(YS_PRODUCT,YDSP_FAC,(ub4)1412,YSLSEV_INFO, (char*)0,
	   YSLSTR( path ), YSLEND );
	   
  /* start the proc */
  CLRSTRUCT(spinfo);
  spinfo.self_ydsp_procInfo = (ydsp_proc)0;
  spinfo.pid_ydsp_procInfo = (char*)0;

  sts = sysspSpawn( cx->syssp_ydspcx, pidbuf, sizeof(pidbuf), 
		   path, (sword)args->_length, args->_buffer );

  if( sts == SYSSP_STS_STARTED || sts == SYSSP_STS_RUNNING ||
     sts == SYSSP_STS_ALIVE || sts == SYSSP_STS_STOPPED )
  {
    spinfo.parent_ydsp_procInfo = cx->self_ydspcx;
    spinfo.pid_ydsp_procInfo = pidbuf;
    spinfo.host_ydsp_procInfo = (char*)ysGetHostName();
    spinfo.affinity_ydsp_procInfo = (char *)0;
    /* don't know the name yet -- it's format is OSD, sigh. */
    spinfo.name_ydsp_procInfo = (char *)0;
    spinfo.state_ydsp_procInfo = ydsp_start_ok;
    ydsp_spawner_addExisting_i( or, ev, &spinfo, proc ); 

    /* 1413, "ydsp_spawner_Launch_i: exit OK" */
    ysRecord(YS_PRODUCT,YDSP_FAC,(ub4)1413,YSLSEV_INFO, (char*)0, YSLNONE);
  }
  else
  {
    yduFreeCacheStr( spinfo.pid_ydsp_procInfo );

    /* 1414, "ydsp_spawner_Launch_i: error spawning %s" */
    ysRecord(YS_PRODUCT,YDSP_FAC,(ub4)1414,YSLSEV_WARNING, (char*)0,
	     YSLSTR(path), YSLEND );
    yseThrow(YDSP_SPAWNER_EX_LAUNCHFAIL);
  }
}


/* object method */
/* ARGSUSED */
void ydsp_spawner_addExisting_i( ydsp_spawner or, yoenv *ev,
				ydsp_procInfo* spinfo,
				ydsp_proc* proc)
{
  ydspcx    *cx = (ydspcx*)yoGetImplState((dvoid *)or);

  ysspNode  *n;
  ydspn	    *pn;		/* tree node */
  ydsp_procInfo  *pi;		/* info in node */
  ydspn	    lookup;

  /* 1415, "ydsp_spawner_addExisting_i: add %s:%s:%s", */
  ysRecord(YS_PRODUCT,YDSP_FAC,(ub4)1415,YSLSEV_INFO, (char*)0,
	   YSLSTR(yduStr(spinfo->host_ydsp_procInfo)),
	   YSLSTR(yduStr(spinfo->pid_ydsp_procInfo)),
	   YSLSTR(yduStr(spinfo->affinity_ydsp_procInfo)), YSLEND );

  /* got old one already? */
  CLRSTRUCT(lookup);
  lookup.spinfo_ydspn.host_ydsp_procInfo = spinfo->host_ydsp_procInfo;
  lookup.spinfo_ydspn.pid_ydsp_procInfo = spinfo->pid_ydsp_procInfo;
  lookup.spinfo_ydspn.affinity_ydsp_procInfo = spinfo->affinity_ydsp_procInfo;
  if( (n = ysspLookup( (dvoid *)&lookup, &cx->ptree_ydspcx ) ) )
  {
    /* yes, previously known proc, but affinity/name might have changed. */
    pn = (ydspn*)n->key_ysspNode;
    pi = &pn->spinfo_ydspn;
    ysspRemove( n, &cx->ptree_ydspcx );
    yduFreeCopyStr( &pi->affinity_ydsp_procInfo,
		   spinfo->affinity_ydsp_procInfo,
		   yotkFreeStr, yotkAllocStr );
    yduFreeCopyStr( &pi->name_ydsp_procInfo,
		   spinfo->name_ydsp_procInfo,
		   yotkFreeStr, yotkAllocStr );
    DISCARD ysspEnq( n, &cx->ptree_ydspcx );

    /* 1416, "ydsp_spawner_addExisting_i: already have proc" */
    ysRecord(YS_PRODUCT,YDSP_FAC,(ub4)1416,YSLSEV_DEBUG(1),(char*)0,YSLNONE );
  }
  else				/* no. need to make new one */
  {
    pn = (ydspn*) ysmGlbAlloc( sizeof(*pn), "ydspn" );
    pn->pnode_ydspn.key_ysspNode = (dvoid *)pn;
    pn->alive_ydspn = TRUE;	/* assume for now; will check below */
    pi = &pn->spinfo_ydspn;
    ydsp_procInfo__copy( pi, spinfo, yotkAllocStr ); 
    pi->self_ydsp_procInfo =
      (ydsp_proc)yoCreate( ydsp_proc__id, (char*)0,
			  (yoRefData*)0, (char *)0, (dvoid *)pn);

    DISCARD ysspEnq( &pn->pnode_ydspn, &cx->ptree_ydspcx );
    cx->nptree_ydspcx++;

    /* 1417, "ydsp_spawner_addExisting_i: new node" */
    ysRecord(YS_PRODUCT,YDSP_FAC,(ub4)1417,YSLSEV_DEBUG(1),(char*)0, YSLNONE);
  }
  *proc = (ydsp_proc)yoDuplicate((dvoid*)pi->self_ydsp_procInfo);

  if( pn->alive_ydspn )
    pn->alive_ydspn = ydspIsAlive( cx, &pn->spinfo_ydspn );
}

/* object method */
/* ARGSUSED */
ydsp_procInfo ydsp_proc__get_spinfo_i( ydsp_proc or, yoenv *ev)
{
  ydspcx *cx = (ydspcx*)yoGetImplState((dvoid *)or);
  ydspn  *pn = (ydspn *)yoGetState((dvoid*)or);
  ydsp_procInfo rv;

  /* 1418, "ydsp_proc__get_spinfo_i: entry" */
  ysRecord(YS_PRODUCT,YDSP_FAC,(ub4)1418,YSLSEV_DEBUG(1),(char*)0, YSLNONE);
  
  if(pn->alive_ydspn)
    pn->alive_ydspn = ydspIsAlive( cx, &pn->spinfo_ydspn );

  ydsp_procInfo__copy( &rv, &pn->spinfo_ydspn, yoAlloc );
  return rv;
}


/* object method */
/* ARGSUSED */
boolean ydsp_proc_isAlive_i( ydsp_proc or, yoenv *ev)
{
  ydspcx    *cx = (ydspcx*)yoGetImplState((dvoid *)or);
  ydspn	    *pn = (ydspn *)yoGetState((dvoid*)or);
  ydsp_procInfo	*spinfo = &pn->spinfo_ydspn;

  /* !yoIsEq( cx->self_ydspcx, pn->spinfo_ydspn.parent_ydsp_procInfo ) ) */

  /* 1419, "ydsp_proc_isAlive_i: entry %s:%s:%s" */
  ysRecord(YS_PRODUCT,YDSP_FAC,(ub4)1419,YSLSEV_DEBUG(1),(char*)0, 
	   YSLSTR(yduStr(spinfo->host_ydsp_procInfo)),
	   YSLSTR(yduStr(spinfo->pid_ydsp_procInfo)),
	   YSLSTR(yduStr(spinfo->affinity_ydsp_procInfo)), YSLEND );

  if( pn->alive_ydspn )
    pn->alive_ydspn = ydspIsAlive( cx, &pn->spinfo_ydspn );
  
  /* 1420, "ydsp_proc_isAlive_i: exit -- %s" */
  ysRecord(YS_PRODUCT,YDSP_FAC,(ub4)1420,YSLSEV_DEBUG(1),(char*)0,
	   YSLSTR( pn->alive_ydspn ? "alive" : "DEAD" ), YSLEND );

  return pn->alive_ydspn;
}


/* object method */
/* ARGSUSED */
void ydsp_proc_killProc_i( ydsp_proc or, yoenv *ev)
{
  ydspcx    *cx = (ydspcx*)yoGetImplState((dvoid *)or);
  ydspn	    *pn = (ydspn *)yoGetState((dvoid*)or);
  ydsp_procInfo	*spinfo = &pn->spinfo_ydspn;

  /* 1421, "ydsp_proc_killProc_i: entry %s:%s:%s", */
  ysRecord(YS_PRODUCT, YDSP_FAC, (ub4)1421, YSLSEV_INFO, (char*)0,
	   YSLSTR(yduStr(spinfo->host_ydsp_procInfo)),
	   YSLSTR(yduStr(spinfo->pid_ydsp_procInfo)),
	   YSLSTR(yduStr(spinfo->affinity_ydsp_procInfo)), YSLEND );

   if( pn->alive_ydspn && 
     (pn->alive_ydspn = ydspIsAlive(cx, &pn->spinfo_ydspn)))
     DISCARD sysspKill( cx->syssp_ydspcx,
		       pn->spinfo_ydspn.pid_ydsp_procInfo, FALSE );
  
  /* There's a race here:  it may be wounded, but not yet completely dead */

  pn->alive_ydspn = ydspIsAlive(cx, &pn->spinfo_ydspn);
				
  /* 1422, "ydsp_proc_killProc_i: exit -- %s", */
  ysRecord(YS_PRODUCT,YDSP_FAC,(ub4)1422,YSLSEV_INFO, (char*)0,
	   YSLSTR( pn->alive_ydspn ? "alive" : "DEAD" ), YSLEND );
}

/* object method */
/* ARGSUSED */
void ydsp_proc_destroyObj_i( ydsp_proc or, yoenv *ev)
{
  ydspcx    *cx = (ydspcx*)yoGetImplState((dvoid *)or);
  ydspn	    *pn = (ydspn *)yoGetState((dvoid*)or);
  ydsp_procInfo	*spinfo = &pn->spinfo_ydspn;
  
  /* 1423, "ydsp_proc_destroyProc_i: %s:%s:%s", */
  ysRecord(YS_PRODUCT,YDSP_FAC,(ub4)1423,YSLSEV_INFO, (char*)0,
	   YSLSTR(yduStr(spinfo->host_ydsp_procInfo)),
	   YSLSTR(yduStr(spinfo->pid_ydsp_procInfo)),
	   YSLSTR(yduStr(spinfo->affinity_ydsp_procInfo)), YSLEND );

  sysspForget( cx->syssp_ydspcx, spinfo->pid_ydsp_procInfo );
  ysspRemove( (ysspNode *)pn, &cx->ptree_ydspcx );
  cx->nptree_ydspcx--;
  ydsp_procInfo__free( spinfo, yotkFreeStr );
  yoDispose( (dvoid*)or );
  ysmGlbFree( (dvoid*)pn );
}

/* PRIVATE FUNCTIONS */

/* ---------------------------- ydsp_procCmp ---------------------------- */
/*
  NAME
    ydsp_procCmp
  DESCRIPTION
    comparison function for two ydsp_procInfo structures, considering
    only the host, pid and affinity strings.  Affinity string of NULL
    is special -- it matches anything.  This means a proc being added
    with addExisting will match a spawned one with no affinity.  But
    one with affinity will _not_ match one with a different affinity.
  PARAMETERS
    a	    pointer to one ydsp_procInfo
    b	    pointer to another
  RETURNS
    < 0, 0, >0 to order a and b.
*/
  
STATICF sword ydsp_procCmp( CONST dvoid *a, CONST dvoid *b )
{
  sword rv;
  ydsp_procInfo  *ap = &((ydspn *)a)->spinfo_ydspn;
  ydsp_procInfo  *bp = &((ydspn *)b)->spinfo_ydspn;
  
  if(!(rv = yduSafeStrcmp(ap->host_ydsp_procInfo, bp->host_ydsp_procInfo)) &&
     !(rv = (sword)strcmp(ap->pid_ydsp_procInfo, bp->pid_ydsp_procInfo)) )
    rv = yduWildStrcmp(ap->affinity_ydsp_procInfo, bp->affinity_ydsp_procInfo);
  
  return( rv );
}


/* ---------------------------- ydspIsAlive ---------------------------- */
/*
  NAME
    ydspIsAlive
  DESCRIPTION
    is the process alive?  Wraps the OSD, which returns a plethora
    of return values we're not really interested in.
  PARAMETERS
    cx	    -- our context.
    pid	    -- string of the pid of interest.
  RETURNS
    TRUE if we think it's alive, FALSE if we think it's dead.
*/
STATICF boolean ydspIsAlive( ydspcx *cx, ydsp_procInfo *pi )
{
  boolean rv = FALSE;
  sword sts;

  switch( (sts = sysspGetStatus( cx->syssp_ydspcx, pi->pid_ydsp_procInfo ) ) )
  {
  case SYSSP_STS_NOTFOUND:
    pi->state_ydsp_procInfo = ydsp_exit_unknown;
    rv = FALSE;
    break;
  case SYSSP_STS_EXITOK:
    pi->state_ydsp_procInfo = ydsp_exit_ok;
    rv = FALSE;
    break;
  case SYSSP_STS_EXITNOTOK:
    pi->state_ydsp_procInfo = ydsp_exit_bad;
    rv = FALSE;
    break;

  case SYSSP_STS_ALIVE:
  case SYSSP_STS_RUNNING:
  case SYSSP_STS_STOPPED:
    pi->state_ydsp_procInfo = ydsp_start_ok;
    rv = TRUE;
    break;

  default:
    /* 1424, "ydspIsAlive: unexpected sts %d" */
    ysRecord(YS_PRODUCT,YDSP_FAC,(ub4)1424,YSLSEV_EMERG, (char*)0,
	     YSLUB4((ub4)sts), YSLEND );
    ysePanic(YDSP_EX_INTERNAL);
  }
  return rv;
}
