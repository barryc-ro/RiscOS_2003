/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 *   yrmodule.c - Implementation of CORBA::ModuleDef
 *
 * NOTES
 *
 * HISTORY
 * 11/09/95 kcoleman    Creation
 */
 
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
 
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif

#ifndef YRCORBAI_H
#include <yrcorbaI.h>
#endif
 
#ifndef YR_ORACLE
#include <yr.h>
#endif
 
#ifndef YOORB_ORACLE
#include <yoorb.h>
#endif
 
#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif

externdef ysidDecl(CORBA_ModuleDef_implid) = "ORA_ModuleDef";

/************************************************************************/
/* Interface CORBA::ModuleDef */
/************************************************************************/
 
CORBA_Contained CORBA_ModuleDef_lookup_i(
     CORBA_ModuleDef or, yoenv* ev, CORBA_ScopedName search_name)
{
  return CORBA_Container_lookup_i( (CORBA_Container) or, ev, search_name);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_ContainedSeq CORBA_ModuleDef_contents_i(
     CORBA_ModuleDef or, yoenv* ev, CORBA_DefinitionKind limit_type,
     boolean exclude_inherited)
{
  return CORBA_Container_contents_i( (CORBA_Container) or, ev,
                                     limit_type,
                                     exclude_inherited);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_ContainedSeq CORBA_ModuleDef_lookup_name_i(
     CORBA_ModuleDef or, yoenv* ev, CORBA_Identifier search_name,
     sb4 levels_to_search, CORBA_DefinitionKind limit_type,
     boolean exclude_inherited)
{
  return CORBA_Container_lookup_name_i( (CORBA_Container) or, ev,
                                        search_name, levels_to_search,
                                        limit_type, exclude_inherited);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Container_DescriptionSeq CORBA_ModuleDef_describe_contents_i(
     CORBA_ModuleDef or, yoenv* ev, CORBA_DefinitionKind limit_type,
     boolean exclude_inherited, sb4 max_returned_objs)
{
  return CORBA_Container_describe_contents_i( (CORBA_Container)or, ev, 
                                              limit_type, 
                                              exclude_inherited,
                                              max_returned_objs);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Contained_Description CORBA_ModuleDef_describe_i(
     CORBA_ModuleDef or, yoenv* ev)
{
  CORBA_Contained_Description result;
  CORBA_ModuleDescription* noreg desc = (CORBA_ModuleDescription*)0;
  yotk* noreg tc = (yotk*) 0;
 
  NOREG(desc);
  NOREG(tc);
  yseTry
  {
    CONST yotk* temp = YCTC_CORBA_ModuleDescription;

    desc = (CORBA_ModuleDescription*)
                yoAlloc( sizeof( CORBA_ModuleDescription));
    CLRSTRUCT( *desc);
 
    desc->name = CORBA_ModuleDef__get_name_i(or, ev);
    desc->id = CORBA_ModuleDef__get_id_i( or, ev);
    desc->defined_in = CORBA_ModuleDef__get_defined_in_i( or, ev);
    desc->version = CORBA_ModuleDef__get_version_i( or, ev);
    yotkCopyVal( yoTcTypeCode, (dvoid*) &tc, (dvoid*) &temp, yoAlloc);
  }
  yseCatchAll
  {
    if ( desc )
    {
      if ( desc->name )
        yoFree( (dvoid*) desc->name);
      if ( desc->id )
        yoFree( (dvoid*) desc->id);
      if ( desc->defined_in )
        yoFree( (dvoid*) desc->defined_in);
      if ( desc->version )
        yoFree( (dvoid*) desc->version);
      if ( tc )
        yotkFreeVal( yoTcTypeCode, (dvoid*) &tc, yoFree);
    }
    yseRethrow;
  }
  yseEnd
 
  result.kind = CORBA_dk_Module;
  result.value._type = tc;
  result.value._value = desc;
  return result;
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_DefinitionKind CORBA_ModuleDef__get_def_kind_i(
     CORBA_ModuleDef or, yoenv* ev)
{
  return CORBA_IRObject__get_def_kind_i( (CORBA_IRObject) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_RepositoryId CORBA_ModuleDef__get_id_i( CORBA_ModuleDef or, yoenv* ev)
{
  return CORBA_Contained__get_id_i( (CORBA_Contained) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Identifier CORBA_ModuleDef__get_name_i( CORBA_ModuleDef or, yoenv* ev)
{
  return CORBA_Contained__get_name_i( (CORBA_Contained)or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_VersionSpec CORBA_ModuleDef__get_version_i(
     CORBA_ModuleDef or, yoenv* ev)
{
  return CORBA_Contained__get_version_i( (CORBA_Contained) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Container CORBA_ModuleDef__get_defined_in_i(
     CORBA_ModuleDef or, yoenv* ev)
{
  return CORBA_Contained__get_defined_in_i( (CORBA_Contained) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_ScopedName CORBA_ModuleDef__get_absolute_name_i(
     CORBA_ModuleDef or, yoenv* ev)
{
  return CORBA_Contained__get_absolute_name_i( (CORBA_Contained) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Repository CORBA_ModuleDef__get_containing_repository_i(
     CORBA_ModuleDef or, yoenv* ev)
{
  return CORBA_Contained__get_containing_repository_i((CORBA_Contained)or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
 
externdef struct CORBA_ModuleDef__tyimpl CORBA_ModuleDef__impl =
 {
  CORBA_ModuleDef_lookup_i,
  CORBA_ModuleDef_contents_i,
  CORBA_ModuleDef_lookup_name_i,
  CORBA_ModuleDef_describe_contents_i,
  CORBA_ModuleDef__get_def_kind_i,
  CORBA_ModuleDef_describe_i,
  CORBA_ModuleDef__get_id_i,
  CORBA_ModuleDef__get_name_i,
  CORBA_ModuleDef__get_version_i,
  CORBA_ModuleDef__get_defined_in_i,
  CORBA_ModuleDef__get_absolute_name_i,
  CORBA_ModuleDef__get_containing_repository_i
 };
 


/* ---------------------------------------------------------------------- */

void Init_CORBA_ModuleDef()
{
  YR_SET_IMPL(CORBA_ModuleDef, FALSE, 0);
  YR_IMPL_READY(CORBA_ModuleDef, 0);
}

void Term_CORBA_ModuleDef()
{
  YR_IMPL_DEACTIVATE(CORBA_ModuleDef);
}
