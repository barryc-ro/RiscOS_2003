/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ysi.h - Oracle MOOSE Service Layer
 */

#ifndef YSI_ORACLE
#define YSI_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSTHR_ORACLE
#include <ysthr.h>
#endif

/*
 * Miscellaneous Declarations
 */
typedef struct yslctx yslctx;                             /* logging context */
typedef struct ysthrctx ysthrctx;                          /* thread context */

/*
 * Service Layer Context
 */
typedef struct ysctx ysctx;

/* DISABLE check_naming */
struct ysctx
{
  /* memory management */
  ysbv   *bv;                               /* buffer vector from sysmInit() */
  sword   nbv;                               /* vector count from sysmInit() */

  /* thread management */
  ysthrctx *tctx;                                       /* threading context */
  yslst    *thrkeys;                              /* list of the thread keys */

  /* exception management */
  ysepf     pfunc;                                         /* panic function */
  dvoid    *pfptr;                                     /* panic user pointer */
  ysthrkey *errkey;                                /* error frame thread key */

  /* resource management */
  yslst  *rdb;                                          /* resource database */

  /* console management */
  boolean detach;                             /* true if console is detached */

  /* time management */
  ub4       last;                        /* last reported tick counter value */
  sysb8     ticks;  /* accumulated time (in us) since process initialization */
  sysb8     start;               /* starting real-time clock value (in usec) */

  /* event management */
  ysmtx   inyield;                           /* prevent re-entrancy in yield */
  yslst  *idlers;                                /* list of installed idlers */
  sysimsk mask;                                            /* interrupt mask */
  ub4     intrcnt;                                        /* interrupt level */
  CONST ysid *usrintr;                            /* user interrupt occurred */
  void  (*waiter)(dvoid *usrp, ub4 timeout);                 /* wait routine */
  dvoid  *waiterusrp;                           /* wait routine user pointer */
  ysHndlr intrhndlr;                                    /* interrupt handler */
  dvoid  *intrusrp;                        /* interrupt handler user pointer */
  yslst  *tmrs;                                            /* pending timers */

  /* logging management */
  yslst  *msgdlst;                         /* cached message descriptor list */
  sword   msgdmax;                               /* message descriptor limit */
  yslctx *lctx;                                           /* logging context */

  /* miscellaneous information */
  ub4         initcnt;                                  /* refcnt for ysInit */
  dvoid      *osdp;                                    /* OSD main() pointer */
  CONST char *prognm;                                     /* name of program */
};
/* ENABLE check_naming */

/*
 * Private Constants
 */
externref ysidDecl(YS_FACILITY);

/*
 * YS Layer Private Routines
 */
void ysResFree(dvoid *ptr);
void yscTerm(ysctx *ctx);

void ystmInit(ysctx *ctx);
void ystmIdler(dvoid *usrp, CONST ysid *exid, dvoid *arg, size_t argsz);

void ysEvtInit(ysctx *ctx);
void ysEvtTerm(ysctx *ctx);

void ysLogInit(ysctx *ctx);
void ysLogTerm(ysctx *ctx);

void ysMsgInit(ysctx *ctx);
void ysMsgTerm(ysctx *ctx);

void ysBlock(void);
boolean ysIdle(void);
void ysEnterCR(void);
void ysExitCR(void);
void ysIntrHandle(ysctx *ctx);

void ysThrYield(void);

#endif /* YSI_ORACLE */
