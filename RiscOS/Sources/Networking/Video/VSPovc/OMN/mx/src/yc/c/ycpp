/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ycpp.c - Pre-processor
 *
 * HISTORY
 * 09/24/96 kcoleman	Add warning on long input lines, for OCCS
 * 04/08/96 kcoleman	Use ysRecord for error reporting.
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCPP_ORACLE
#include <ycpp.h>
#endif
#ifndef YSL_ORACLE
#include <ysl.h>
#endif

externdef ysidDecl(YC_EX_NOTFOUND) = "yc::notfound";
externdef ysidDecl(YC_EX_SYNTAX) = "yc::syntax";

STATICF void ycppPredef(ycctx *ctx, yslst *pplist);

/*
 * ycpp - pre-processing entrypoint
 */
void ycpp(ycctx *ctx)
{
  ysle   *elm;
  ycln   *ln;
  yslst  *deflist, *pplist;
  sword   i;
  size_t  len;
  char   *buf;

  /* initialization */
  ctx->tu = (yslst *) 0;

  yseTry
    ctx->tu = ycppRead(ctx, ctx->srcnm, 0);
  yseCatchObj(YC_EX_NOTFOUND, char *, errtxt)
    ysRecord(YCMSG(1), YCERRSEV, YSLSTR(ctx->srcnm), YSLSTR(errtxt), YSLEND);
  yseEnd

  if (!ctx->tu)
    return;

  ctx->mdexp = ysLstCreate();
  ctx->mdtbl = ysHshCreate((ub4) 100, ysHshKey, ycMdEq, ycMdFree);

  /* define pre-defined macro names */
  pplist = ysLstCreate();
  ycppPredef(ctx, pplist);

  /* load up resource #defines */
  if ((deflist = ysResGet("mnidlc.preprocess.define")))
    {
      for (elm = ysLstHead(deflist); elm; elm = ysLstNext(elm))
	{
	  ln = ycLnNew("<command-line>", 0, 0);
	  ln->text = ysStrCat(ln->text, (char *) ysLstVal(elm));
	  for (i = 0, buf = ysStrToText(ln->text),len = ysStrLen(ln->text);
	       i < (sword)len && buf[i] != '='; i++) ;

	  if (i < (sword)len)
	    buf[i] = ' ';
	  else
	    ln->text = ysStrCat(ln->text, " 1");

	  ycppDefine(ctx, ln, 0);
	  DISCARD ysLstEnq(pplist, (dvoid *) ln);
	}
    }

  /* load up resource #undefs */
  if ((deflist = ysResGet("mnidlc.preprocess.undef")))
    {
      for (elm = ysLstHead(deflist); elm; elm = ysLstNext(elm))
	{
	  ln = ycLnNew("<command-line>", 0, 0);
	  ln->text = ysStrCat(ln->text, (char *) ysLstVal(elm));
	  ycppUndef(ctx, ln, 0);
	  DISCARD ysLstEnq(pplist, (dvoid *) ln);
	}
    }

  /* perform pre-processing */
  for (elm = ysLstHead(ctx->tu); elm; elm = ysLstNext(elm))
    {
      ln = (ycln *) ysLstVal(elm);

      if (ln->dir)
	ycppDirective(ctx, elm);
      else
	ycppExpand(ctx, elm, 0, (sword) ysStrLen(ln->text), TRUE);
    }

  /* don't destory ctx->tu here. Let main do it so that it gets cleaned up */
  /* in every case */
  if (ysResGet("mnidlc.preprocess-only"))
    {
      ycppDump(ctx, ctx->tu);
    }

  if (pplist)
    ysLstDestroy(pplist, (ysmff) ycLnFree);

  ysLstDestroy(ctx->mdexp, ysmFGlbFree);
  ysHshDestroy(ctx->mdtbl);
}

/*
 * ycppPredef - add pre-defined names
 */
STATICF void ycppPredef(ycctx *ctx, yslst *pplist)
{
  sysb8   clk;
  ystm  sttm;
  ycln *ln;
  char  tmpbuf[128];

  ysClock(&clk);
  ysConvClock(&clk, &sttm);

  ln = ycLnNew("<pre-defined>", 0, 0);
  ln->text = ysStrCat(ln->text, "__LINE__ 0");
  ycppDefine(ctx, ln, 0);
  DISCARD ysLstEnq(pplist, (dvoid *) ln);

  ln = ycLnNew("<pre-defined>", 0, 0);
  ln->text = ysStrCat(ln->text, "__FILE__ \"\"");
  ycppDefine(ctx, ln, 0);
  DISCARD ysLstEnq(pplist, (dvoid *) ln);

  ln = ycLnNew("<pre-defined>", 0, 0);
  DISCARD sprintf(tmpbuf, "__DATE__ \"%04d-%02d-%02d\"",
		  sttm.year, sttm.mon, sttm.mday);
  ln->text = ysStrCat(ln->text, tmpbuf);
  ycppDefine(ctx, ln, 0);
  DISCARD ysLstEnq(pplist, (dvoid *) ln);

  ln = ycLnNew("<pre-defined>", 0, 0);
  DISCARD sprintf(tmpbuf, "__TIME__ \"%02d:%02d:%02d\"",
		  sttm.hour, sttm.min, sttm.sec);
  ln->text = ysStrCat(ln->text, tmpbuf);
  ycppDefine(ctx, ln, 0);
  DISCARD ysLstEnq(pplist, (dvoid *) ln);

  ln = ycLnNew("<pre-defined>", 0, 0);
  ln->text = ysStrCat(ln->text, "__STDC__ 1");
  ycppDefine(ctx, ln, 0);
  DISCARD ysLstEnq(pplist, (dvoid *) ln);
}

/*
 * ycppRead - read from source file
 *   ycppRead() performs the first phases of translation.  It reads
 *   characters from a file and constructs a sequence of textual lines
 *   that represent the contents of the file.  Lines are spliced, comments
 *   are stripped, and directives are noted (but not processed).  The
 *   original line numbers are preserved.  A list of the lines is returned.
 */
yslst *ycppRead(ycctx *ctx, char *fn, sword lvl)
{
  sword   line;
  boolean eof, ws, utc;
  yslst  *tu;
  ysle   *elm;
  ycln   *ln = (ycln*)0;
  sword   spcnt, ch, pr, quote;
  sysfp* noreg fp;
  CONST char   *errtxt;
  boolean checkLines = (ycStyleOra(ctx) ? TRUE : FALSE);
  size_t ccnt;

  NOREG(fp);
  fp = sysfpOpen(fn, "r", SYSFPKIND_TEXT, &errtxt);
  if (!fp)
    yseThrowObj(YC_EX_NOTFOUND, errtxt);

  line = 1;
  utc = eof = FALSE;
  tu = (yslst *) 0;
  spcnt = 0;
  ysRecord( YCMSG(5), YCINFOSEV, YSLSTR(fn), YSLEND);

  yseTry
    tu = ysLstCreate();

    while (!eof)
    {
      /* create a new line and append to translation unit */
      ln = ycLnNew(fn, line++, lvl);
      DISCARD ysLstEnq(tu, (dvoid *) ln);
      ccnt = 0;

      /* if we have spliced lines, leave the new line blank */
      if (spcnt)
      {
        spcnt--;
        continue;
      }

      /* read one line */
      ws = TRUE;
      eof = sysfpGetc((sysfp*)fp, &ch); ccnt++;
      while (!eof && ch != '\n')
      {
        switch (ch)
        {
          case '\\':                                     /* splice lines */
            eof = sysfpGetc((sysfp*)fp, &ch); ccnt++;
            if (!eof && ch == '\n')
            {
              if ( checkLines && (ccnt > YCPP_LINEMAX + 1) )  /* +1 == '\n' */
                ysRecord( YCMSG(106), YCWARNSEV, YSLSTR(ln->name), 
                          YSLSB4((sb4)ln->line+spcnt), YSLEND);
              ccnt = 0;
              spcnt++;
            }
            else
            {
              ln->text = ysStrApp(ln->text, '\\');
                continue;
            }
            break;
          case '/':                                    /* strip comments */
            eof = sysfpGetc((sysfp*)fp, &ch); ccnt++;
            if (!eof && ch == '*')                    /* c-style comment */
            {
              ccnt = 2;
              do
              {
                pr = ch;
                eof = sysfpGetc((sysfp*)fp, &ch); ccnt++;
                if (ch == '\n')
                {
                  if ( checkLines && (ccnt > YCPP_LINEMAX+1) )
                    ysRecord( YCMSG(106), YCWARNSEV, YSLSTR(ln->name), 
                              YSLSB4((sb4)ln->line+spcnt), YSLEND);
                  spcnt++;
                  ccnt = 0;
                }
              } while (!eof && (pr != '*' || ch != '/'));

              /* detect an unterminated comment */
              if (eof)
              {
                ysRecord( YCMSG(10), YCERRSEV, YCERRLN(ln), YSLEND);
                utc = TRUE;
              }
              else
                ln->text = ysStrApp(ln->text, ' ');
            }
            else if (!eof && ch == '/')             /* c++-style comment */
            {
              do
              {
                eof = sysfpGetc((sysfp*)fp, &ch); ccnt++;
              } while (!eof && ch != '\n');
              if ( checkLines && (ccnt > YCPP_LINEMAX+1) )
                ysRecord( YCMSG(106), YCWARNSEV, YSLSTR(ln->name), 
                          YSLSB4((sb4)ln->line+spcnt), YSLEND);
              ccnt = 0;
              continue;
            }
            else
            {
              ln->text = ysStrApp(ln->text, '/');
              continue;
            }
            break;
          case '"':                          /* consume quoted constants */
          case '\'':
            ws = FALSE;
            quote = ch;

            do
            {
              ln->text = ysStrApp(ln->text, (char) ch);
	      pr = ch;
              eof = sysfpGetc((sysfp*)fp, &ch); ccnt++;

              /* deal with possible line splice */
              if (ch == '\\')
              {
                eof = sysfpGetc((sysfp*)fp, &ch); ccnt++;
                if (!eof && ch == '\n')
                {
                  spcnt++;
                  eof = sysfpGetc((sysfp*)fp, &ch); ccnt++;
                }
                else
                {
                  ln->text = ysStrApp(ln->text, '\\');
                  pr = '\\';
                }
              }
            }
            while (!eof && ch != '\n' && (ch != quote || pr == '\\'));

            /* detect an unterminated char constant or string literal */
            if (ch != quote)
            {
              if ( quote == '"' )
                ysRecord( YCMSG(12), YCERRSEV, YCERRLN(ln), YSLEND);
              else
                ysRecord( YCMSG(11), YCERRSEV, YCERRLN(ln), YSLEND);
              continue;
            }
            else
              ln->text = ysStrApp(ln->text, (char) ch);
            break;
          case '#':  /* check for directive */
            if (ws)
              ln->dir = TRUE;
            ws = FALSE;
            ln->text = ysStrApp(ln->text, (char) ch);
            break;
          default:                        /* accept all other characters */
            ws = FALSE;
            ln->text = ysStrApp(ln->text, (char) ch);
            break;
        }

        eof = sysfpGetc((sysfp*)fp, &ch); ccnt++;
      }
      if ( checkLines && (ccnt > YCPP_LINEMAX + 1) )
         ysRecord( YCMSG(106), YCWARNSEV, YSLSTR(ln->name), 
                   YSLSB4((sb4)ln->line+spcnt), YSLEND);
    }

    /* check to see if the source file terminates with a new line */
    if (!utc)
    {
      if (spcnt || ysStrLen(ln->text))
        ysRecord( YCMSG(13), YCWARNSEV, YCERRLN(ln), YSLEND);
      else
      {
        /* remove last empty line */
        elm = ysLstTail(tu);
        if (ysLstPrev(elm))
        {
          ln = (ycln *) ysLstRem(tu, elm);
          ycLnFree(ln);
        }
      }
    }
  yseFinally
    sysfpClose((sysfp*)fp);
  yseEnd

  return tu;
}

/*
 * ycppDump - dump a translation unit
 */
void ycppDump(ycctx *ctx, yslst *tu)
{
  sysfp *fp = (sysfp*)0;
  yslst *lst;
  char  *outfn;
  ysle  *le;
  ycln  *ln, *prvln;
  CONST char *out, *errtxt;

  /* create output file (if one is specified) */
  if ((lst = ysResGet("mnidlc.outputpath")))
  {
    outfn = (char *) ysLstVal(ysLstTail(lst));
    fp = sysfpOpen(outfn, "w", SYSFPKIND_TEXT, &errtxt);
    if (!fp)
    {
      ysRecord(YCMSG(1), YCERRSEV, YSLSTR(outfn), YSLSTR(errtxt), YSLEND);
      return;
    }
  }
  else
    outfn = (char *) 0;

  /* dump translation unit */
  prvln = (ycln *) 0;
  for (le = ysLstHead(tu); le; le = ysLstNext(le))
  {
    ln = (ycln *) ysLstVal(le);

    /* inserting pre-processing line information */
    if (!prvln || (ln->name != prvln->name || ln->line != prvln->line + 1))
    {
      if (outfn)
      {
        if (!sysfpPrint(fp, "#line %d \"%s\"\n", ln->line, ln->name))
        {
          ysRecord( YCMSG(3), YCERRSEV, YSLSTR(outfn), YSLNONE);
          return;
        }
      }
      else
        yslPrint("#line %d \"%s\"\n", ln->line, ln->name);
    }

    prvln = ln;

    /* print out the line (unless a directive which is just blank) */
    out = (ln->dir ? "" : ysStrToText(ln->text));
    if (outfn)
    {
      if (!sysfpPrint(fp, "%s\n", out))
      {
        ysRecord( YCMSG(3), YCERRSEV, YSLSTR(outfn), YSLNONE);
        return;
      }
    }
    else
      yslPrint("%s\n", out);
  }

  if (outfn)
    sysfpClose(fp);
}

/*
 * ycLnNew - create a new line
 */
ycln *ycLnNew(CONST char *fn, sword line, sword lvl)
{
  ycln *ln;

  ln = (ycln *) ysmGlbAlloc(sizeof(ycln), "ycln");
  ln->name = fn;
  ln->line = line;
  ln->lvl = lvl;
  ln->dir = FALSE;
  ln->text = ysStrCreate((char *) 0);

  return ln;
}

/*
 * ycLnFree - free a line
 */
void ycLnFree(ycln *ln)
{
  ysStrDestroy(ln->text);
  ysmGlbFree((dvoid *) ln);
}

/*
 * ycLnCat - concatenates the following line with the current line
 */
void ycLnCat(ycctx *ctx, ysle *elm)
{
  ycln *nxtln, *ln;
  
  ln = (ycln *) ysLstVal(elm);
  nxtln = (ycln *) ysLstVal(ysLstNext(elm));

  ln->text = ysStrApp(ln->text, ' ');
  ln->text = ysStrCat(ln->text, ysStrToText(nxtln->text));
  ycLnFree((ycln *) ysLstRem(ctx->tu, ysLstNext(elm)));
}

/*
 * ycLnBlank - blank out the line
 */
void ycLnBlank(ycctx *ctx, ycln *ln)
{
  ysStrDestroy(ln->text);
  ln->dir = FALSE;
  ln->text = ysStrCreate((char *) 0);
}

/*
 * ycMdNew - create a new macro definition
 */
ycmd *ycMdNew(char *nm, ycln *origln, sword opos)
{
  ycmd *md;

  md = (ycmd *) ysmGlbAlloc(sizeof(ycmd), "ycmd");
  md->name = nm;
  md->pcnt = 0;
  md->rpl = (ysstr *) 0;
  md->pars = ysLstCreate();
  md->origln = origln;
  md->opos = opos;
  return md;
}

/*
 * ycMdEq - compare a macro definition with a name
 */
sword ycMdEq(dvoid *elm, dvoid *key, size_t keysz)
{
  ycmd *md;

  md = (ycmd *) elm;
  return (sword) (strcmp(md->name, key));
}

/*
 * ycMdFree - free a macro definition
 */
void ycMdFree(dvoid *elm)
{
  ycmd *md;

  md = (ycmd *) elm;

  ysmGlbFree((dvoid *) md->name);
  if (md->rpl)
    ysStrDestroy(md->rpl);
  ysLstDestroy(md->pars, ysmFGlbFree);
  ysmGlbFree((dvoid *) md);
}

/*
 * ycSkipWS - skip white space in line
 */
sword ycSkipWS(ysstr *txt, sword sp, sword ep)
{
  char *buf;

  buf = ysStrToText(txt);
  while (sp < ep && isspace(buf[sp]))
    sp++;

  return sp;
}
