/* Copyright (c) 1994 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 * mnsc.c - OMN Process Server Public Interface (variables and routines)
 *
 * DESCRIPTION
 * Variables and routines defined here need to be available to both client
 * and server.
 *
 * REVISIONS
 * jolkin	09/17/94 Creation
 * dbrower   06/27/95 -  change to new main and arg parsing.
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef MNR_ORACLE
#include <mnr.h>
#endif
#ifndef MNSC_ORACLE
#include <mnsc.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif

#ifndef YSR_ORACLE
#include <ysr.h>
#endif

#ifndef MTL_ORACLE
#include <mtl.h>
#endif

#ifndef SMNI_ORACLE
#include <smni.h>
#endif

externdef CONST_DATA mnrid mnscPid =
  { { 117, 216, 96, 114, 101, 123, 198, 146  }, MNVERS(1, 0) };
externdef CONST_DATA mnrid mnscCid =
  { { 117, 216, 96, 114, 102, 123, 198, 146  }, MNVERS(1, 0) };

/*
 * mnsxQent - marshal an mnsqent structure
 *   The fields next and port are not marshalled.
 */
boolean mnsxQent(mnx *xstr, dvoid *qentp)
{
  mnsqent *scq;

  scq = (mnsqent *) qentp;
  return
    (mnxDynStr(xstr, (char **) &scq->name) &&
     mnrxId(xstr, (dvoid *) &scq->progid) &&
     mnxSB4(xstr, &scq->status) &&
     mnxB4(xstr, &scq->flags) &&
     mnxAddr(xstr, &scq->caddr) &&
     mnxAddr(xstr, &scq->iaddr) &&
     mnxB4(xstr, &scq->regcur) &&
     mnxB4(xstr, &scq->regavg) &&
     mnxB4(xstr, &scq->regmax) &&
     mnxB4(xstr, &scq->regtot) &&
     mnxB4(xstr, &scq->reglo) &&
     mnxB4(xstr, &scq->reghi) &&
     mnxB4(xstr, &scq->cllcur) &&
     mnxB4(xstr, &scq->cllavg) &&
     mnxB4(xstr, &scq->cllmax) &&
     mnxB4(xstr, &scq->clltot) &&
     mnxB4(xstr, &scq->quecur) &&
     mnxB4(xstr, &scq->queavg) &&
     mnxB4(xstr, &scq->quemax) &&
     mnxB4(xstr, &scq->quedel) &&
     mnxPointer(xstr, (dvoid **) &scq->calls, sizeof(mnscent), mnsxCent) &&
     mnxPointer(xstr, (dvoid **) &scq->instances, sizeof(mnsient), mnsxIent));
}

/*
 * mnsxCent - marshal an mnscent structure
 *   The fields buf and len are not marshalled.
 */
boolean mnsxCent(mnx *xstr, dvoid *centp)
{
  mnscent *call;

  call = (mnscent *) centp;
  return
    (mnxPointer(xstr, (dvoid **) &call->next, sizeof(mnscent), mnsxCent) &&
     mnxAddr(xstr, &call->addr) &&
     mnxB4(xstr, &call->arrival));
}

/*
 * mnsxIent - marshal an mnsient structure
 */
boolean mnsxIent(mnx *xstr, dvoid *ientp)
{
  mnsient *inst;

  inst = (mnsient *) ientp;
  return
    (mnxPointer(xstr, (dvoid **) &inst->next, sizeof(mnsient), mnsxIent) &&
     mnxPointer(xstr, (dvoid **) &inst->queue, sizeof(mnsqent), mnsxQent) &&
     mnxSB4(xstr, &inst->status) &&
     mnxAddr(xstr, &inst->addr) &&
     mnxB4(xstr, &inst->cllget) &&
     mnxB4(xstr, &inst->cllfwd) &&
     mnxB4(xstr, &inst->clltot) &&
     mnxB4(xstr, &inst->clldel) &&
     mnxAddr(xstr, &inst->origaddr));
}
