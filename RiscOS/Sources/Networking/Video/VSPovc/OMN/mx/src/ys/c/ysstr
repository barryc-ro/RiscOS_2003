/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 * 
 * ysstr.c - String Implementation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSI_ORACLE
#include <ysi.h>
#endif

#define YSSTR_BLK  128                          /* default string block size */

static ysmtagDecl(YSSTR_TAG) = "ysstr";

/*
 * ysStrCreate - create a string
 */
ysstr *ysStrCreate(CONST char *txt)
{
  char  *sc;
  size_t tlen;

  tlen = (txt ? strlen(txt) : 0) + 1;
  sc = (char *) ysmGlbAlloc(max(tlen, YSSTR_BLK), YSSTR_TAG);
  if (txt)
    DISCARD memcpy(sc, txt, tlen);
  else
    sc[0] = '\0';

  return (ysstr *) sc;
}

/*
 * ysStrDestroy - destroy a string
 */
void ysStrDestroy(ysstr *str)
{
  ysmCheck((dvoid *) str, YSSTR_TAG);
  ysmGlbFree((dvoid *) str);
}

/*
 * ysStrDupWaf - duplicate a text string w/ allocator
 */
char *ysStrDupWaf(CONST char *txt, ysmaf af)
{
  size_t sz;
  char  *sc;

  if (!txt)
    return (char *) 0;

  sz = strlen(txt);
  sc = (char *) (af ? (*af)(sz + 1) : ysmGlbAlloc(sz + 1, YSSTR_TAG));
  return strcpy(sc, txt);
}

/*
 * ysStrCat - concatenate text to a string
 */
ysstr *ysStrCat(ysstr *str, CONST char *txt)
{
  return ysStrnCat(str, txt, MINSIZE_TMAXVAL);
}

/*
 * ysStrnCat - concatenate the first n bytes of text to a string
 */
ysstr *ysStrnCat(ysstr *str, CONST char *txt, size_t n)
{
  char  *sc, *sp;
  CONST char *tp;
  size_t slen, tlen, sz;

  ysmCheck((dvoid *) str, YSSTR_TAG);

  sc = (char *) str;
  slen = strlen(sc);
  sz = ysmGetSize((dvoid *) sc);

  tlen = strlen(txt);
  if (n < tlen)
    tlen = n;

  if (slen + tlen + 1 > sz)
    sc = (char *) ysmGlbRealloc((dvoid *) sc, slen + tlen + YSSTR_BLK);

  for (sp = sc + slen, tp = txt; tlen; tlen--)
    *sp++ = *tp++;

  *sp = '\0';
  return (ysstr *) sc;
}

/*
 * ysStrApp - append character to a string
 */
ysstr *ysStrApp(ysstr *str, char ch)
{
  char  *sc, *sp;
  size_t slen, sz;

  ysmCheck((dvoid *) str, YSSTR_TAG);

  sc = (char *) str;
  slen = strlen(sc);
  sz = ysmGetSize((dvoid *) sc);

  if (slen + 2 > sz)
    sc = (char *) ysmGlbRealloc((dvoid *) sc, slen + YSSTR_BLK);

  sp = sc + slen;
  *sp++ = ch;
  *sp = '\0';
  return (ysstr *) sc;
}

/*
 * ysStrIns - insert a substring
 */
ysstr *ysStrIns(ysstr *str, size_t pos, CONST char *txt)
{
  char  *sc, *tail;
  size_t slen;

  ysmCheck((dvoid *) str, YSSTR_TAG);

  sc = (char *) str;
  slen = strlen(sc);

  if (pos < slen)
    {
      tail = ysStrDup(sc + pos);
      sc[pos] = '\0';
      str = ysStrCat(ysStrCat(str, txt), tail);
      ysmGlbFree((dvoid *) tail);
    }
  else
    str = ysStrCat(str, txt);

  return str;
}

/*
 * ysStrDel - delete a substring
 */
ysstr *ysStrDel(ysstr *str, size_t pos, sword cnt)
{
  char  *sc;
  size_t slen, i, j;

  ysmCheck((dvoid *) str, YSSTR_TAG);

  sc = (char *) str;
  slen = strlen(sc);

  if (pos < slen)
    {
      for (i = pos, j = pos + cnt; j < slen; i++, j++)
	sc[i] = sc[j];

      sc[i] = '\0';
    }

  return str;
}

/*
 * ysStrCaseCmp - case-insensitive string comparison
 */
sword ysStrCaseCmp(CONST char *s1, CONST char *s2)
{
  while (*s1 && *s2 && !(tolower((int)*s1) - tolower((int)*s2)))
    s1++, s2++;
 
  return (sword)((*s1 ? tolower((int)*s1) :0) - (*s2 ? tolower((int)*s2) :0));
}
 
/*
 * ysStrnCaseCmp - case-insensitive string comparison with length
 */
sword ysStrnCaseCmp(CONST char *s1, CONST char *s2, sword n)
{
  sword  i = 1;
 
  if (n <= 0) return (sword)0;
  while (*s1 && *s2 && i<n && !(tolower((int)*s1) - tolower((int)*s2)))
    s1++, s2++, i++;
 
  return (sword)((*s1 ? tolower((int)*s1) :0) - (*s2 ? tolower((int)*s2) :0));
}
