/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * ycsym.c - Symbol table on top of Interface Repository
 *
 * NOTES
 *
 * You would really like to have the interface repository function as the
 * sole symbol table for the compiler. It almost works, but the compiler
 * ends up needing to stash extra bits of information in there - like what
 * pragmas are attached to something, a cache for the absolute name 
 * during code generation, or a list of ancestors.
 *
 * There is no need to recreate an entire symbol table - the scoping, etc.
 * of the IFR is adequate. Instead, this package implements a hash table
 * key'd on IFR objects. The compiler still operates primarily through
 * yrobj's, but it is possible to dip in here for additional info.
 *
 * The symbol table lives in the ycctx. Items are inserted into the table
 * during semantic analysis, as the corresponding yrobj is created.
 *
 * This package is completely independent of the layout of ycsym, except
 * that it expects the existence of an <ifrobj> field for key comparison.
 * For more information on ycsym's, see the definition in yc.h.
 *
 * HISTORY
 * 07/24/96 kcoleman	Creation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif

/* DISABLE check_naming */

STATICF void ycSymDestroy( dvoid* usrp);
STATICF ub4 ycSymHash( CONST dvoid* key, size_t keysz, ub4 max);
STATICF sword ycSymEq( dvoid* elem, dvoid* key, size_t keysz);

#ifndef YCSYMROWS
#define YCSYMROWS 511
#endif

/* ----------------------------------------------------------------------- */
/*
 * ycSymTblDestroy - delete a symbol table and its contents
 */

void ycSymTblDestroy( ycsymtbl* tbl)
{
  if ( tbl )
    ysHshDestroy( (yshsh*)tbl);
}

/* ----------------------------------------------------------------------- */
/*
 * ycSymTblCreate - create an empty symbol table. 
 */

ycsymtbl* ycSymTblCreate()
{
  return (ycsymtbl*) ysHshCreate( YCSYMROWS, ycSymHash, ycSymEq, ycSymDestroy);
}

/* ----------------------------------------------------------------------- */
/*
 * ycSymDestroy - destructor for a ycsym object. Signature should be
 *   that of a ysmff function, suitable for callback by yshsh.
 *
 * ifobj field points to data owned by the repository.
 * lang field must be cleaned up by each language mapping as it completes.
 */

STATICF void ycSymDestroy( dvoid* usrp)
{
  if ( usrp )
  {
    ycsym* sym = (ycsym*)usrp;

    if ( sym->pragmas )
      ysLstDestroy( sym->pragmas, ycprgDestroy);
    if ( sym->opsNattrs )
      ysLstDestroy( sym->opsNattrs, (ysmff)0);
    ysmGlbFree( usrp);
  }
}

/* ----------------------------------------------------------------------- */
/*
 * ycSymHash - hash function for the compiler symbol table. Hashes on
 *   the IFR object pointer. Signature must by suitable for use by yshsh.
 */

STATICF ub4 ycSymHash( CONST dvoid* key, size_t keysz, ub4 max)
{
  ub4 hash = 0;
  CONST ub1* p = (ub1*)(dvoid*) &key;
  ub4 i;
 
  for ( i = 0; i < keysz; i++ )
    hash += p[i];
 
  return hash % max;
}

/* ----------------------------------------------------------------------- */
/*
 * ycSymEq - Comparison function suitable for use by ysHshFind. The key
 *   is assumed to be an IFR object pointer (yrobj*, usually). Returns
 *   0 if there is match, non-zero otherwise; see yshsh for more info.
 */

STATICF sword ycSymEq( dvoid* elem, dvoid* key, size_t keysz)
{
  ycsym* sym = (ycsym*) elem;

  return !(((yrobj*)sym->ifrobj) == (yrobj*)key);
}

/* ----------------------------------------------------------------------- */
/*
 * ycSymLookup - Find a yrobj or other IFR object in the symbol table.
 *   Returns NULL if no matching entry is found.
 */

ycsym* ycSymLookup( ycsymtbl* tbl, yrobj* ifrsym)
{
  return (ycsym*) ysHshFind( (yshsh*)tbl, (dvoid*)ifrsym, sizeof(ifrsym));
}

/* ----------------------------------------------------------------------- */
/*
 * ycSymInsert - Add a symbol to the symbol table. If one already exists,
 *   this function does nothing.
 */

ycsym* ycSymInsert( ycsymtbl* tbl, yrobj* ifrsym)
{
  ycsym* sym = ycSymLookup( tbl, ifrsym);

  if ( !sym )
  {
    sym = (ycsym*) ysmGlbAlloc( sizeof(ycsym), "ycsym");
    CLRSTRUCT(*sym);
    sym->ifrobj = ifrsym;
    ysHshIns( (yshsh*)tbl, (dvoid*)ifrsym, sizeof(ifrsym), (dvoid*)sym);
  }
  else
  {
    char* nm = yrGetAbsoluteName( ifrsym);

    ysRecord( YCMSG(500), YSLSEV_DEBUG(1), (char*)0, YSLSTR(nm), YSLEND);
    ysmGlbFree( (dvoid*)nm);
  }
  return sym;
}

/* ----------------------------------------------------------------------- */
/*
 * ycSymRemove - Remove a symbol from the symbol table. Typically, you'll
 *   only need to do this for error recovery.
 */

void  ycSymRemove( ycsymtbl* tbl, yrobj* ifrsym)
{
  dvoid* sym;

  sym = ysHshRem( (yshsh*)tbl, (dvoid*)ifrsym, sizeof(ifrsym));
  if ( sym )
    ycSymDestroy( sym);
}

/* ----------------------------------------------------------------------- */
/*
 * ycSymTblReport - dump statistical info about the symbol table.
 */

void ycSymTblReport( ycsymtbl* tbl)
{
/* @@ I am unimplemented! */
}

/* ----------------------------------------------------------------------- */
/*
 * ycSymTblFlush - clear data from symbol table without removing the
 *   individual entries. 
 *
 * Intended for use by code generators to flush language mapping specific 
 * data. Callback interface determined by constraints of yshsh.
 */

void ycSymTblFlush( ycsymtbl* tbl, ycsymwcb callback, dvoid* usrp)
{
  ysHshWalk( tbl, (yshshwcb)callback, usrp);
}
