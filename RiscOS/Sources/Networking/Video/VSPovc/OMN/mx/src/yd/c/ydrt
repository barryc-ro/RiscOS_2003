/* Copyright (c) Oracle Corporation 1995.  All Rights Reserved. */

/*
  NAME
    ydrt.c
  DESCRIPTION
    ORDB Daemon Router
  PUBLIC FUNCTIONS
    ydrtInit
  PRIVATE FUNCTIONS
    <x>
  NOTES
    Where the Object Request Broker brokes.

    This handles forwarding of requests from clients to the proper
    server implementations.  The difficulty lies in determining the
    "good spot" to send a request, which may involve starting a new
    server process somewhere.  Finding the good place involves
    using static metrics from the YDIM implementation repository, and
    live data from the YDMT metrics collection.

    The router is semi-stateless in normal operation.  Each request
    is processed completely, except for async state for the forwarding.
    If the forward fails, the async state is pushed back into the router
    for another try.

    When spawning, a spawn request is issued, and the request is added
    to a queue.  When the spawn completes, a callback is driven which
    then forwards any queued requests.

  MODIFIED   (MM/DD/YY)
    dbrower 07/20/95 - created.
    dbrower 02/21/96 -  significant speedups and simplifications,
		        brought on by scalability testing.
    dbrower   02/23/96 -  more simplification -- give up incrementing
			metric queue count for round-robin, use new ucnt
			in the activeInfo.  Remove all the queue incr stuff.
    dbrower   02/26/96 -  move ucnt to ydimain, use ydimain instead of
			    ydyo_activeInfo some places.
    dbrower   02/28/96 -  change ysid intf to string intf.
    dbrower   03/ 6/96 -  one more obj ref leak.
    dbrower   05/17/96 -  fix bug 366675 ("CONST type or" in _i funcs)
    dbrower   06/18/96 -  convert to ysRecord.
*/

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSV_ORACLE
#include <ysv.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
#ifndef YDRT_ORACLE
#include <ydrt.h>
#endif
#ifndef YDIDL_ORACLE
#include <ydidl.h>
#endif
#ifndef YDU_ORACLE
#include <ydu.h>
#endif
#ifndef YDIM_ORACLE
#include <ydim.h>
#endif
#ifndef YDMT_ORACLE
#include <ydmt.h>
#endif
#ifndef YDSP_ORACLE
#include <ydsp.h>
#endif
#ifndef YSR_ORACLE
#include <ysr.h>
#endif
#ifndef SYSB8_ORACLE
#include <sysb8.h>
#endif
#ifndef YOYD_ORACLE
#include <yoyd.h>
#endif
#ifndef YDCH_ORACLE
#include <ydch.h>
#endif
#ifndef YDIDLI_ORACLE
#include <ydidlI.h>
#endif
#ifndef YDYOIDL_ORACLE
#include <ydyoidl.h>
#endif

/* PRIVATE TYPES AND CONSTANTS */

#define YDRT_FAC    "YDRT"

/* size of chunked operations  */
#define YDRT_CHUNK_SIZE	    ((sb4)1000)

/* est. cost to route off this process */
#define YDRT_OFF_PROC_COST  ((sb4)20)
/* est. cost to use this already-being-spawned proc */
#define YDRT_SPAWNING_COST  ((sb4)100)
/* est cost to do a spawn of this proc - 10s */
#define YDRT_SPAWN_COST	    ((sb4)10*1000)

/* launch timeout, in ms -- 60s */
#define YDRT_LAUNCH_TIMEOUT_MS ((sb4)60*1000)

typedef	sb4 ydrtCost;		/* abstract cost, for now */

typedef struct
{
  ydrt_router	self_ydrtcx;
  ysque		*q_ydrtcx;	/* queue for forwarding requests */
  yoenv		ev_ydrtcx;	/* env in main loop */

  yort_proc	yort_ydrtcx;	/* self process */
  yort_queueInfo qinfo_ydrtcx;
  sb4		tottms_ydrtcx;	/* total time / totenq = avgtime */
  sb4		totl_ydrtcx;	/* total len / totenq = avglen */

  sb4		lockTimeMs_ydrtcx;

  ydim_imr	imr_ydrtcx;	/* imr handle */
  ydmt_imtr	ydmt_ydrtcx;	/* metrics handle */
  ydsp_spawner	ydsp_ydrtcx;	/* spawner handle */
  ydch_och	ydch_ydrtcx;	/* object clearinghouse handle */
  sb4		chunksize_ydrtcx; /* number of chunks to ask for at one
				    time in some listings */
  char		*host_ydrtcx;	/* my host */
  sysb8		ltimeout_ydrtcx; /* launch timeout, in microseconds */

  yslst		*rtelst_ydrtcx;	/* list of rte's to use. */

} ydrtcx;



/*
 * Route entry.  This cannot contain ANYTHING that needs releasing
 * when it is tossed.  We fill these in and toss with wild abandon,
 * and anything that makes that expensive is bad.  In particular, the
 * active_ydrte entry is never to be a duplicate, only a shared copy
 * of a reference that someone else will release.
 */
typedef struct
{
  ydrtCost	cost_ydrte;	/* the computed cost */
  ydim_implInfo	*info_ydrte;	/* ptr to info in ilist */
  ydim_active	active_ydrte;	/* the active object ref */
  ydimain	*ain_ydrte;	/* the active info for active_ydrte */
  ydyo_activeInfo *ainfo_ydrte;	/* ain->ainfo_ydimain */
} ydrte;

/* pending activation structure */
typedef struct
{
  enum {
    start_ydrtax,
    lockWait_ydrtax,
    done_ydrtax,
    exit_ydrtax
  }		state_ydrtax;
  yore		*req_ydrtax;	/* hdr.ref is unbound; dstref is place */
  ysevt		*evt_ydrtax;
  yoenv		ev_ydrtax;

} ydrtax;


/* PRIVATE FUNCTION DECLARATIONS */

STATICF void ydrtRoute( ydrtcx *cx, yore *r );

STATICF void ydrtHandler( dvoid *usrp, CONST ysid *exid,
			 dvoid *arg, size_t argsz);

/* handle completion of forward, dealing with errors */
STATICF void ydrtForwardHandler(dvoid *usrp, CONST ysid *exid,
				dvoid *arg, size_t argsz);

/* pick a good spot for this request, server, orbd, or NULL  */
STATICF yort_proc ydrtGoodSpot( ydrtcx *cx, yore *r, boolean *ready );

/* do activation of r->dstref at r->place; reroute on failure */
STATICF void ydrtActivateForward( yore *r );

/* state machine for ydrtActivateForward */
STATICF void ydrtActivation( dvoid *usrp, CONST ysid *exid,
			    dvoid *arg, size_t argsz );

STATICF void ydrtCopyRte( ydrte *dest, ydrte *src );

/* is this for a persistant stateful object? */
/* #define ydrtPersistant( r ) ( r->hdr.refid._length ? TRUE : FALSE ) */

/* in OMX 3.0, there is never PSF */
#define ydrtPersistant( r ) (FALSE)

/* what is the tight binding place for r? */
#define ydrtPlaceOf( r ) (r->hdr.ref)

/* is this request tightly bound? */
#define ydrtTightlyBound( r ) (r->hdr.ref ? TRUE : FALSE )

/* is this request loosely bound? */
#define ydrtLooselyBound( r ) ( r->hdr.ref ? FALSE : TRUE )

STATICF ydrtCost ydrtSimpleCost( ydrtcx *cx, ydimain *ain );
STATICF ydrtCost ydrtMetricCost( ydrtcx *cx, ydimain *ain, yore *r );

STATICF void ydrtLaunchForward( dvoid *usrp, yslst *reqs,
			       yslst *active, yslst *timedout );

static CONST_W_PTR struct ydrt_router__tyimpl ydrt_router__impl =
 {
  ydrt_router__get_self_i,
  ydrt_router__get_imr_i,
  ydrt_router__get_qinfo_i,
 };

externdef ysidDecl(YDRT_EX_ACTIVATE_FAILED) = "ydrt::activateFailed";
externdef ysidDecl(YDRT_EX_INTERNAL) = "ydrt::internal";

externdef ysmtagDecl(ydrtax_tag) = "ydrtax_tag";

/* PUBLIC FUNCTIONS */

void ydrtInit( ysque *q, ydrt_router *oydrt, ydim_imr imr )
{
  ydrtcx *cx;
  char	*arg;
  sb4	val;

  cx = (ydrtcx *)ysmGlbAlloc( sizeof(*cx), "ydrtcx" );
  CLRSTRUCT( *cx );
  yoEnvInit(&cx->ev_ydrtcx);
  cx->yort_ydrtcx = (yort_proc)yoYort();

  cx->q_ydrtcx = q;
  cx->imr_ydrtcx = imr;
  cx->lockTimeMs_ydrtcx = 0;	/* block forever */
  cx->qinfo_ydrtcx.self_yort_queueInfo = (yort_queue)0;
  cx->qinfo_ydrtcx.name_yort_queueInfo = ysStrDupWaf("ydrt queue", (ysmaf)0);

  arg = ysResGetLast("ydrt.chunksize");
  cx->chunksize_ydrtcx = arg ? atoi(arg) : YDRT_CHUNK_SIZE;
  if( cx->chunksize_ydrtcx < 1 ) cx->chunksize_ydrtcx = 1;

  cx->host_ydrtcx = (char*)ysResGetLast("ys.hostname");

  arg = ysResGetLast("ydrt.launch-timeout-ms");
  val = arg ? atoi(arg) : YDRT_LAUNCH_TIMEOUT_MS;
  sysb8ext( &cx->ltimeout_ydrtcx, val * 1000 );

  /* start implementation */
  yoSetImpl( ydrt_router__id, (char*)0, ydrt_router__stubs,
	    (dvoid*)&ydrt_router__impl, (yoload)0, TRUE, (dvoid*)cx );

  /* make the ydrt object and keep back pointer */
  cx->self_ydrtcx =
    (ydrt_router)yoCreate( ydrt_router__id, (char*)0,
			  (yoRefData*)0,(char *)0, (dvoid *)cx);

  cx->rtelst_ydrtcx = ysLstCreate();

  /* objects we use frequently, wherever located */
  cx->ydmt_ydrtcx = (ydmt_imtr)yoBind( ydmt_imtr__id, (char*)0,
				      (yoRefData*)0, (char*)0 );
  cx->ydsp_ydrtcx = (ydsp_spawner)yoBind( ydsp_spawner__id, (char*)0,
					 (yoRefData*)0, (char*)0 );
  cx->ydch_ydrtcx = (ydch_och)yoBind( ydch_och__id, (char*)0,
				     (yoRefData*)0, (char*)0 );

  *oydrt = (ydrt_router)yoDuplicate((dvoid*)cx->self_ydrtcx);

  yoImplReady( ydrt_router__id, (char*)0, cx->q_ydrtcx );

  /* 1150, "ydrtInit: routing objects ready" */
  ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1150, YSLSEV_DEBUG(0), (char*)0, YSLNONE);
}

void ydrtStartRouting( ydrt_router ydrt )
{
  ydrtcx    *cx = (ydrtcx*)yoGetImplState((dvoid *)ydrt);

  yoInitRouter( (dvoid*)cx->imr_ydrtcx, cx->q_ydrtcx,
	       ydrtHandler, (dvoid *)cx );
}

void ydrtTerm( ydrt_router rt )
{
  ydrtcx    *cx = (ydrtcx*)yoGetImplState((dvoid *)rt);

  /* 1151, "ydrtTerm: routing objects terminating" */
  ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1151, YSLSEV_DEBUG(0), (char*)0, YSLNONE);

  yoImplDeactivate( ydrt_router__id, (char*)0 );

  if( cx->qinfo_ydrtcx.name_yort_queueInfo )
    ysmGlbFree( (dvoid*)cx->qinfo_ydrtcx.name_yort_queueInfo );

  /* free all the rte lst elements */
  ysLstDestroy( cx->rtelst_ydrtcx, ysmFGlbFree );

  yoRelease( (dvoid*)cx->ydmt_ydrtcx );
  yoRelease( (dvoid*)cx->ydsp_ydrtcx );
  yoRelease( (dvoid*)cx->ydch_ydrtcx );

  yoRelease( (dvoid*)cx->self_ydrtcx );
  yoDispose( (dvoid*)cx->self_ydrtcx );

  yoRelease( (dvoid*)cx->yort_ydrtcx );
  yoEnvFree( &cx->ev_ydrtcx );
  ysmGlbFree( (dvoid*)cx );
}

/* ---------------------------------------------------------------- */
/* OBJECT METHODS */
/* ---------------------------------------------------------------- */


/* object method */
/* ARGSUSED */
ydrt_router ydrt_router__get_self_i( ydrt_router or, yoenv *ev)
{
  ydrtcx *cx = (ydrtcx*)yoGetImplState( (dvoid*)or );
  return( (ydrt_router)yoDuplicate((dvoid*)cx->self_ydrtcx) );
}

/* ARGSUSED */
ydim_imr ydrt_router__get_imr_i( ydrt_router or, yoenv *ev)
{
  ydrtcx *cx = (ydrtcx*)yoGetImplState( (dvoid*)or );
  return( (ydim_imr)yoDuplicate((dvoid*)cx->imr_ydrtcx) );
}

/* object method */
/* ARGSUSED */
yort_queueInfo ydrt_router__get_qinfo_i( ydrt_router or, yoenv *ev)
{
  ydrtcx *cx = (ydrtcx*)yoGetImplState( (dvoid*)or );
  yort_queueInfo qi;

  /* compute averages now */
  if( cx->qinfo_ydrtcx.totEnq_yort_queueInfo )
  {
    cx->qinfo_ydrtcx.avgLen_yort_queueInfo =
      cx->totl_ydrtcx / cx->qinfo_ydrtcx.totEnq_yort_queueInfo;

    cx->qinfo_ydrtcx.avgDelayMs_yort_queueInfo = (yort_timeMs)
      (cx->tottms_ydrtcx / cx->qinfo_ydrtcx.totEnq_yort_queueInfo + 5) / 10;
  }
  yort_queueInfo__copy( &qi, &cx->qinfo_ydrtcx, yoAlloc);
  return( qi );
}


/* ---------------------------------------------------------------- */
/* PRIVATE FUNCTIONS */
/* ---------------------------------------------------------------- */

/* ---------------------------- ydrtHandler ---------------------------- */
/*
  NAME
    ydrtHandler
  DESCRIPTION
    This function is called when requests are picked off the routing
    queue by a ysSvc function.  It examines the the object reference
    and determines where the request should really be sent.  It then
    send it on it's way with yoFwdRequest.

    The cases to consider are:

      Persistant stateful
	We need to know if the object is activated.  If not, we need
	to activate it in a good spot.  Then we send it to the spot
	where it is activated.  Activation state is determined by
	consulting the "ydch" object clearinghouse.

      Loosely bound
	We're doing load balancing and need to send it to a good spot.

      Tightly bound
        It's not clear we should even be seeing these requests.  For now,
	we should log the discrepency and forward the request to that
	place.

    Locating a "good spot" for activation or load balancing is a chore,
    pushed into ydrtGoodSpot.

  PARAMETERS
    usrp    -- usrp from the queue creation, NULL for us right now.
    exid    -- ???
    arg	    -- the queued argument, in our case a pointer to "yore"
	       request structure with the object reference broken up.
    argsz   -- ??? probably sizeof(yore *); not used.

  RETURNS
    none.
*/

/* ARGSUSED */
STATICF void ydrtHandler( dvoid *usrp, CONST ysid *exid,
			 dvoid *arg, size_t argsz)
{
  yore	*r = (yore*)arg;
  yore	*fr = (yore*)ysmGlbAlloc( sizeof(*fr), "yore");

  DISCARD memcpy( (dvoid*)fr, (dvoid*)r, sizeof(*fr));
  ydrtRoute( (ydrtcx*)usrp, fr );
}

STATICF void ydrtRoute( ydrtcx *cx, yore *r )
{
  yort_proc	place = (yort_proc)0;
  boolean ready = TRUE;
  boolean activate = FALSE;

  sysb8	start, mid, finish;
  ub4	qlen;
  sb4   tim;

  /* keep beg stats */
  ysClock( &start );
  qlen = ysSvcPending( cx->q_ydrtcx );
  cx->qinfo_ydrtcx.curLen_yort_queueInfo = (yort_gauge)qlen;
  cx->totl_ydrtcx += qlen;
  if( qlen > cx->qinfo_ydrtcx.maxLen_yort_queueInfo )
    cx->qinfo_ydrtcx.maxLen_yort_queueInfo = (yort_gauge)qlen;

  /* 1152, "ydrtRoute: got request for %s|%s o:%s qlen %d" */
  ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1152, YSLSEV_INFO, (char*)0,
	   YSLSTR(yduIdStr(r->hdr.ref->intf)),
	   YSLSTR(yduIdStr(r->hdr.ref->impl)),
	   YSLSTR(yduStr(r->hdr.op)),
	   YSLSB4( qlen ), YSLEND);

  if( !ydrtPersistant( r ) )	/* not persistant stateful */
  {
    /* 1153, "ydrtRoute: non-persistant" */
    ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1153, YSLSEV_DEBUG(3),(char*)0,YSLNONE);

    place = ydrtGoodSpot( cx, r, &ready );
  }
  else				/* persistant stateful */

  {
    /* 1154, "ydrtRoute: persistant stateful" */
    ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1154, YSLSEV_DEBUG(3),(char*)0,YSLNONE);

    if( ydrtTightlyBound( r ) )
    {
      /* 1155, "ydrtRoute: persistant request has tight binding!?" */
      ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1155, YSLSEV_EMERG,(char*)0,YSLNONE);
      ysePanic(YDRT_EX_INTERNAL);
    }

    ydch_och_whereActive( cx->ydch_ydrtcx, &cx->ev_ydrtcx,
			 (CORBA_Object)r->hdr.ref, (yort_proc*)&place );
    if( !place )		/* need to find a spot for an activation */
    {
      place = ydrtGoodSpot( cx, r, &ready );
      activate = TRUE;
    }
  }

  ysClock(&mid);

  if( place )			/* win. */
  {
    if( ready )
    {
      /* 1156, "ydrtRoute: forwarding" */
      ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1156, YSLSEV_INFO,(char*)0,YSLNONE);

      r->dstref = yoDuplicate((dvoid*)place);
      r->usrp = (dvoid*)cx;
      if( activate )
	ydrtActivateForward( r );
      else
	yoFwdRequest( r, ysEvtSimple(ydrtForwardHandler, (dvoid*)r) );
    }
    else
    {
      /* 1157, "ydrtRoute: place not ready, request queued" */
      ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1157, YSLSEV_INFO,(char*)0,YSLNONE);
    }
  }
  else				/* lose. */
  {
    /* 1158, "ydrtRoute: No place for %s|%s %s -- rejecting" */
      ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1158, YSLSEV_INFO,(char*)0,
	       YSLSTR(yduIdStr(r->hdr.ref->intf)),
	       YSLSTR(yduIdStr(r->hdr.ref->impl)),
	       YSLSTR(yduStr(r->hdr.op)), YSLEND);
    yoRejRequest( r );
    yoFreeRouteReq( r );
    ysmGlbFree( (dvoid*)r );
  }

  /* keep finish stats  */
  ysClock( &finish );
  sysb8sub( &finish, &finish, &start );
  sysb8sub( &mid, &mid, &start );
  tim = (sysb8msk(&finish) + 500) / 1000;
  cx->tottms_ydrtcx += tim;
  tim /= 10;
  cx->qinfo_ydrtcx.curDelayMs_yort_queueInfo = tim;
  cx->qinfo_ydrtcx.totEnq_yort_queueInfo++;
  if( tim > cx->qinfo_ydrtcx.maxDelayMs_yort_queueInfo )
    cx->qinfo_ydrtcx.maxDelayMs_yort_queueInfo = tim;
}

/* ------------------------- ydrtForwardHandler --------------------------- */
/*
  NAME
    ydrtForwardHandler
  DESCRIPTION
    The completion of a ydFwdRequest.
  PARAMETERS
    usrp	-- the yore being handled.
    exid	-- error, if any
    arg		-- 0
    argsz	-- 0
  NOTES

  RETURNS
    none
*/

/* ARGSUSED */
STATICF void ydrtForwardHandler(dvoid *usrp, CONST ysid *exid, dvoid *arg,
				size_t argsz)
{
  yore	    *r = (yore*)usrp;
  ydrtcx    *cx = (ydrtcx*)r->usrp;
  char	    *refstr = (char*)0;
  yoenv	    ev;			/* can't use the one in the ydrtcx! */

  refstr = yoRefToStr( r->dstref );
  if(!exid)
  {
    /* 1159, "ydrtForwardHandler: %s|%s OK to %s", */
    ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1159, YSLSEV_INFO,(char*)0,
	     YSLSTR(yduIdStr(r->hdr.ref->intf)),
	     YSLSTR(yduIdStr(r->hdr.ref->impl)),
	     YSLSTR(refstr), YSLEND);
    yoFreeRouteReq( r );
    yoRelease( r->dstref );
    ysmGlbFree( (dvoid*)r );
  }
  else
  {
    /* 1160, "ydrtForwardHandler: Exception %s sending to %s", */
    ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1160, YSLSEV_WARNING,(char*)0,
	     YSLSTR(yduStr(exid)), YSLSTR(refstr), YSLEND );

    /* mark all impls in yort as dead; delete the yort and proc */

    /* 1161, "ydrtForwardHandler: No more forwards to %s", r->dstref ); */
    ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1161, YSLSEV_WARNING,(char*)0,
	     YSLSTR(refstr), YSLEND );

    yoEnvInit(&ev);
    ydim_imr_destroyYortGlobal( cx->imr_ydrtcx, &ev, (yort_proc)r->dstref );
    yoEnvFree(&ev);

    /* prepare to re-route */
    yoRelease( r->dstref );
    r->dstref = (dvoid*)0;

    /* 1162, "ydrtForwardHandler: rerouting request" */
    ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1162, YSLSEV_WARNING,(char*)0,YSLNONE);

    ydrtRoute( cx, r );
  }
  if( refstr )
    yoFree( (dvoid*)refstr );
}


/* ---------------------------- ydrtGoodSpot ---------------------------- */
/*
  NAME
    ydrtGoodSpot
  DESCRIPTION

    Find a good spot to run the request.  This is the nasty part of
    routing requests.  The router recognizes three different
    optimization goals, stored in the ydrt object:

	- ydrt_response	least anticipated delay for the request

	- ydrt_throughput	most requests/sec on the system, ignoring
				individual response time;

	- ydrt_resource	minimize use of machine resources (mainly processes)
			at the expense of response and throughput.

    However, we only implement the 'response' goal...

    The general strategy in place is to

      * keep reusing existing places as long as they are "good enough"
      * launch new servers as long as there is space available.

  PARAMETERS
    cx	    -- ydrt context
    r	    -- the request
    ready   -- whetehr the output place is ready to go [OUT]

  RETURNS
    place to send it, one of (a) a server, (b) another orbd to reroute,
    or (c) null if not possible to run the request.

  NOTES
    Logs errors on unexpected conditions.
*/

STATICF yort_proc ydrtGoodSpot( ydrtcx *cx, yore *r, boolean *ready )
{
  yort_proc	spot = (yort_proc)0;
  ub4		i, j;

  ydrte		best;
  ydrte		current;

  ydim_activeList    *alist = (ydim_activeList*)0;

  ub4		ecnt;		/* count of used in rtelst */
  ysle		*ecur;		/* current element in rtelst */

  ydsp_proc	sproc;		/* spawned proc object */
  sb4		rnd;		/* "random" number */
  sysb8		tim;		/* now, to get random number */
  char		*arg;
  sb4		nshift;
  ydrte		*rte;		/* equal route entry */
  ydsp_spawner	sp;
  yslst		*ilst;
  ysle		*ie;
  ydim_implInfo	*ii;

  CLRSTRUCT(best);
  CLRSTRUCT(current);
  best.cost_ydrte = SB4MAXVAL;
  current.active_ydrte = best.active_ydrte = (ydim_active)0;
  current.ain_ydrte = best.ain_ydrte = (ydimain*)0;

  /* FIXME: 13 is magic to get into the ms range of bits that we think
     change often enough to randomize.  This won't work well if we
     don't have adequate clock resolution in the OSD */

  nshift = (arg = ysResGetLast("ydrt.shiftbits")) ? (sb4)atol(arg) : (sb4)13;

  /* get all possible matching impls, active and inactive */


  ilst = ysLstCreate();
  DISCARD ydimListImpl( ilst, cx->imr_ydrtcx,
		       (char*)ysidToStr(r->hdr.ref->intf),
                       (char*)r->hdr.ref->impl, (char*)0 );

  /* 1163, "ydrtGoodSpot: %d candidate info entries", */
  ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1163, YSLSEV_DEBUG(2),(char*)0,
	   YSLUB4(ysLstCount(ilst)), YSLEND );

  /* Locate best active implementations, and put them in the elst.
     Unfortunately, we must evaluate all possible entries.  This
     can be slow if there were many matches */

  ecnt = 0;
  ecur = ysLstHead( cx->rtelst_ydrtcx );
  for( ie = ysLstHead( ilst ); ie ; ie = ysLstNext(ie) )
  {
    ii = (ydim_implInfo*)ysLstVal(ie);

    alist = &ii->alist_ydim_implInfo;

    /* 1164, "ydrtGoodSpot: %d active entries" */
    ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1164, YSLSEV_DEBUG(3),(char*)0,
	     YSLUB4(alist->_length), YSLEND );

    for( j = 0; j < alist->_length; j++ )
    {
      current.info_ydrte = ii;
      current.active_ydrte = alist->_buffer[j];
      current.ain_ydrte = ydimActiveGetAinfo( current.active_ydrte );
      current.ainfo_ydrte = &current.ain_ydrte->ainfo_ydimain;

      /* Ignore this active entry if (a) suspended or (b) spawn entry,
	 but we have hit the active limit for the impl */

      if( (current.ainfo_ydrte->implFlags_ydyo_activeInfo &
	   yort_suspended_implFlag)
	 || (!current.ainfo_ydrte->yort_ydyo_activeInfo
	 && alist->_length > current.info_ydrte->maxInstances_ydim_implInfo) )
      {
	continue;
      }

      current.cost_ydrte = ydrtSimpleCost( cx, current.ain_ydrte );
      current.cost_ydrte += ydrtMetricCost( cx, current.ain_ydrte, r );

      /* 1165, "ydrtGoodSpot: cost of %s|%s is %d" */
      ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1165, YSLSEV_DEBUG(3),(char*)0,
	       YSLSTR(yduIdStr(current.ainfo_ydrte->intf_ydyo_activeInfo)),
	       YSLSTR(yduIdStr(current.ainfo_ydrte->impl_ydyo_activeInfo)),
	       YSLUB4((ub4)current.cost_ydrte), YSLEND );

      /* new best cost?  then free old elst */
      if( current.cost_ydrte < best.cost_ydrte )
      {
	/* 1166, "ydrtGoodSpot: new cost %d < old cost %d" */
	ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1166, YSLSEV_DEBUG(0),(char*)0,
		 YSLUB4((ub4)current.cost_ydrte),
		 YSLUB4((ub4)best.cost_ydrte), YSLEND );

	best.cost_ydrte = current.cost_ydrte;

	/* forget current list contents */
	ecur = ysLstHead( cx->rtelst_ydrtcx );
	ecnt = 0;
      }

      /* append to list of equally good places */
      if( current.cost_ydrte == best.cost_ydrte )
      {
	/* 1167, "ydrtGoodSpot: equal to best cost %d" */
	ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1167, YSLSEV_DEBUG(0),(char*)0,
		 YSLUB4((ub4)best.cost_ydrte), YSLEND);

	/* if no more in the global list, make another */
	if( !ecur )
	  ecur = ysLstEnq(cx->rtelst_ydrtcx,ysmGlbAlloc(sizeof(*rte),"ydrte"));

	rte = (ydrte*)ysLstVal( ecur );
	ydrtCopyRte( rte, &current );
	ecur = ysLstNext( ecur );
	ecnt++;
      }
    } /* for each active impls */

  } /* for each qualifying implentation */

  /* 1168, "ydrtGoodSpot: %d in route list" */
  ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1168, YSLSEV_DEBUG(0),(char*)0,
	   YSLUB4((ub4) ecnt), YSLEND);

  if( !ecnt )
  {
    /* 1169, "ydrtGoodSpot: nothing found at all" */
    ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1169, YSLSEV_INFO,(char*)0, YSLNONE);
  }
  else				/* have ecnt entries in rtelst */
  {
    /* pick one randomly out of the list of equivalent best active ones,
       and destroy the elst. */

    /* assume clock is random above milliseconds */
    ysClock( &tim );
    rnd = sysb8msk( &tim ) >> nshift;
    if( rnd < 0 ) rnd = -rnd;
    j = (ub4)(rnd % ecnt);

    /* 1170, "ydrtGoodSpot: selecting entry %d of %d" */
    ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1170, YSLSEV_DEBUG(0),(char*)0,
	     YSLUB4((ub4)j), YSLUB4((ub4)ecnt), YSLEND );

    /* skip to the i-th element in the rtelst */
    for( i = 0, ecur = ysLstHead( cx->rtelst_ydrtcx ); i <= j ; i++ )
      continue;

    /* save it as the one */
    ydrtCopyRte( &best, (ydrte*)ysLstVal(ecur) );

    /* At this point we have selected a best active implementation.
       Do any necessary launch trickery, setting ready
       and determining the return yort value. */

    spot = best.ainfo_ydrte->yort_ydyo_activeInfo;

    *ready = TRUE;
    if( !spot ) /* do launch now */
    {
      /* 1171, "ydspGoodSpot: doing launch" */
      ysRecord(YS_PRODUCT,YDRT_FAC,(ub4)1171,YSLSEV_DEBUG(0),(char*)0,YSLNONE);

      /* set up fake active info records and start list of requests */
      spot = ydimStartLaunch( cx->imr_ydrtcx, best.info_ydrte,
			     &cx->ltimeout_ydrtcx,
			     (dvoid*)cx, ydrtLaunchForward, (dvoid*)r );

      /* do the process launch, locally or remote */
      if( !strcmp( best.info_ydrte->host_ydim_implInfo, cx->host_ydrtcx ) )
      {
	yseTry
	{
	  ydsp_spawner_Launch( cx->ydsp_ydrtcx, &cx->ev_ydrtcx,
			      best.info_ydrte->pathName_ydim_implInfo,
			      &best.info_ydrte->args_ydim_implInfo, &sproc );
	}
	yseCatch( YDSP_SPAWNER_EX_LAUNCHFAIL )
	{
	  yslError("ydrt: launch of %s failed\n");
	}
	yseEnd;
      }
      else
      {
	sp = (ydsp_spawner)
	  yoBind(ydsp_spawner__id, (char*)0, (yoRefData*)0,
		 best.info_ydrte->host_ydim_implInfo );
	ydsp_spawner_Launch_nw( sp,
			       &cx->ev_ydrtcx,
			       best.info_ydrte->pathName_ydim_implInfo,
			       &best.info_ydrte->args_ydim_implInfo, &sproc,
			       ysEvtDummy() );
	yoRelease( (dvoid*)sp );
      }
      *ready = FALSE;
    }
    else if( ydimIsLaunching( cx->imr_ydrtcx, spot) )
    {
      /* 1172, "ydspGoodSpot: queueing for already launching proc" */
      ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1172, YSLSEV_INFO,(char*)0,YSLNONE);

      ydimAppendLaunch( cx->imr_ydrtcx, best.info_ydrte, (dvoid*)r );
      *ready = FALSE;
    }

    /* bump the local use count (reset all if getting too big) */
    if( *ready )
    {
      if( ++best.ain_ydrte->ucnt_ydimain >= YDRT_OFF_PROC_COST )
      {
	for( ie = ysLstHead( ilst ); ie ; ie = ysLstNext(ie) )
	{
	  current.info_ydrte = (ydim_implInfo*)ysLstVal(ie);
	  alist = &current.info_ydrte->alist_ydim_implInfo;
	  for( j = 0 ; j < alist->_length ; j++ )
	  {
	    current.ain_ydrte = ydimActiveGetAinfo( alist->_buffer[j] );
	    current.ain_ydrte->ucnt_ydimain = 0;
	  }
	}
	best.ain_ydrte->ucnt_ydimain = 1;
      }
    }

  } /* ecnt */

  /* 1173, "ydspGoodSpot: picked spot %s, ready %s" */
  ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1173, YSLSEV_DEBUG(0),(char*)0,
	   YSLSTR( spot ? "TRUE" : "FALSE" ),
	   YSLSTR( ready ? "TRUE" : "FALSE" ), YSLEND );

  /* cleanup */
  ysLstDestroy( ilst, (ysmff)0 );

  return( spot );
}


/* get the object activated at the place, and forward request there */
STATICF void ydrtActivateForward( yore *r )
{
  ydrtax *ax = (ydrtax*)ysmGlbAlloc(sizeof(*ax), ydrtax_tag );

  yoEnvInit(&ax->ev_ydrtax);
  ax->req_ydrtax = r;
  ax->state_ydrtax = start_ydrtax;
  ax->evt_ydrtax = ysSemCreate( (dvoid*)ax );
  ydrtActivation( (dvoid*)ax, (ysid*)0, (dvoid*)0, (size_t)0 );
}



STATICF void ydrtActivation( dvoid *usrp, CONST ysid *exid,
			    dvoid *arg, size_t argsz )
{
  ydrtax *ax = (ydrtax*)usrp;
  ydrtcx *cx;
  yore *r;

  ysmCheck( ax, ydrtax_tag );
  r = ax->req_ydrtax;
  cx = (ydrtcx*)r->usrp;

  /* events are always kept, for cancellation */
  ysEvtDestroy( ax->evt_ydrtax );

  /* we return inside on sync ops; their completion re-enters at the top */
  while( ax->state_ydrtax != exit_ydrtax )
  {
    switch( ax->state_ydrtax )
    {
    case start_ydrtax:

      ax->state_ydrtax = lockWait_ydrtax;
      ax->evt_ydrtax = ysEvtCreate( ydrtActivation, (dvoid*)ax,
				   cx->q_ydrtcx, TRUE );
      ydch_och_lock_nw( cx->ydch_ydrtcx, &ax->ev_ydrtax,
		       (CORBA_Object)r->hdr.ref, (yort_proc*)&r->dstref,
		       ax->evt_ydrtax );
      break;

    case lockWait_ydrtax:

      ysEvtDestroy( ax->evt_ydrtax );

      ax->evt_ydrtax = ysEvtCreate( ydrtActivation, (dvoid*)ax,
				   cx->q_ydrtcx, TRUE );

      /* r->dstref is either yort here or real place */
      if( r->dstref )
      {
	ax->state_ydrtax = done_ydrtax;
	if( yoIsEq( (dvoid*)yoYort(), (dvoid*)r->dstref ) )
	{
#ifdef NEVER
	  yoFwdActivateRequest( r, ax->evt_ydrtax ); /* ready to activate */
#endif
	}
	else
	  yoFwdRequest( r, ax->evt_ydrtax ); /* it's been activated */
      }
      else			/* didn't get the lock, need to retry */
      {
	ydch_och_lock_nw( cx->ydch_ydrtcx, &ax->ev_ydrtax,
			 (CORBA_Object)r->hdr.ref, (yort_proc*)&r->dstref,
			 ax->evt_ydrtax );
      }
      break;

    case done_ydrtax:		/* forward/activate complete. */

      if( exid || !r->dstref )
	exid = YDRT_EX_ACTIVATE_FAILED;

      ax->state_ydrtax = exit_ydrtax;
      ydrtForwardHandler( (dvoid*)r, exid, arg, argsz );
      break;

    case exit_ydrtax:

      yoEnvFree(&ax->ev_ydrtax);
      ysmGlbFree( (dvoid*)ax );
      break;

    default:
      /* 1174, "ydrtActivation: bad state %d" */
      ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1174, YSLSEV_EMERG,(char*)0,
	       YSLUB4((ub4)ax->state_ydrtax), YSLEND );
      ysePanic(YDRT_EX_INTERNAL);
      break;
    }
  }
}



/* FIXME -- need to scale results some other way? */
STATICF ydrtCost ydrtSimpleCost( ydrtcx *cx, ydimain *ain )
{
  ydrtCost  rv;
  yort_proc y = ain->ainfo_ydimain.yort_ydyo_activeInfo;

  if( !y )
    rv = YDRT_SPAWN_COST;	/* start spawn with this */
  else if( yoIsEq( (dvoid*)y, (dvoid*)cx->imr_ydrtcx ) )
    rv = YDRT_SPAWNING_COST;	/* spawn started */
  else if( !yoIsEq( (dvoid*)y, (dvoid*)cx->yort_ydrtcx ) )
    rv = YDRT_OFF_PROC_COST;	/* off-process */
  else
    rv = 0;			/* in-process */

  /* weight local use */
  rv += (ydrtCost)ain->ucnt_ydimain;

  return( rv );
}


/* -------------------------- ydrtLaunchForward --------------------------- */
/*
  NAME
    ydrtLaunchForward
  DESCRIPTION
    Send all the requests we were saving for a launch-pending destination.
    Driven as a call-back when the interface finally comes active.  This
    is driven as each interface in the pending launch comes up; we can only
    send the requests for the implementations that are currently up.  We
    preserve the order of the req queue, only sending the head if it
    is for a now-active impl.
  PARAMETERS
    usrp    -- the ydrt context.
    reqs    -- queued requests.
    active  -- list of active info's up with this call.
    timedout	-- list of pending actives that timed out.  we'll
		   shut down the launch and reject the requests.
  RETURNS
    none
*/

STATICF void ydrtLaunchForward( dvoid *usrp, yslst *reqs, yslst *active,
			       yslst *timedout )
{
  ydrtcx    *cx = (ydrtcx*)usrp;
  yore	    *r = (yore*)0;
  ysle	    *e = (ysle*)0;
  ysle	    *f;
  ysle	    *nextf;
  ydyo_activeInfo    *ainfo;
  char	    *refstr = (char*)0;

  /* dispose of anything we can  */

  /* 1175, "ydrtLaunchForward: %d reqs, %d active, %d timedout" */
  ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1175, YSLSEV_DEBUG(0),(char*)0,
	   YSLUB4(ysLstCount( reqs )), YSLUB4(ysLstCount( active )),
	   YSLUB4( timedout ? ysLstCount(timedout) : 0), YSLEND );

  /* forward & consume reqs we can send now, in request order */
  for( f = ysLstHead( reqs ) ; f ; f = nextf )
  {
    nextf = ysLstNext( f );
    r = (yore*)f->ptr;
    r->usrp = usrp;

    /* 1176, "ydrtLaunchForward: request for %s|%s", */
    ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1176, YSLSEV_DEBUG(3),(char*)0,
	     YSLSTR(yduIdStr(r->hdr.ref->intf)),
	     YSLSTR(yduIdStr(r->hdr.ref->impl)), YSLEND );

    for( e = ysLstHead(active); e ; e = ysLstNext( e ) )
    {
      ainfo = (ydyo_activeInfo*)ysLstVal(e);

      /* 1177, "ydrtLaunchForward: %s|%s active", */
      ysRecord(YS_PRODUCT,YDRT_FAC, (ub4)1177, YSLSEV_DEBUG(4),(char*)0,
	       YSLSTR(yduIdStr(ainfo->intf_ydyo_activeInfo)),
	       YSLSTR(yduIdStr(ainfo->impl_ydyo_activeInfo)), YSLEND );

      if( !strcmp( ysidToStr(r->hdr.ref->intf), ainfo->intf_ydyo_activeInfo )
         && !yduWildStrcmp( r->hdr.ref->impl, ainfo->impl_ydyo_activeInfo))
      {
	DISCARD ysLstRem( reqs, f );
	r->dstref = (dvoid*)yoDuplicate((dvoid*)ainfo->yort_ydyo_activeInfo);


	refstr = yoRefToStr(r->dstref);
	/* 1185, "ydrtLaunchForward: sending rqst %s|%s to y:%x", */
	ysRecord(YS_PRODUCT,YDRT_FAC,(ub4)1185,YSLSEV_DEBUG(0), (char*)0,
		 YSLSTR(yduIdStr(r->hdr.ref->intf)),
		 YSLSTR(yduIdStr(r->hdr.ref->impl)),
		 YSLSTR(refstr), YSLEND );
	yoFree((dvoid*)refstr);

	yoFwdRequest( r, ysEvtSimple(ydrtForwardHandler, (dvoid*)r) );

	/* assume that r has been freed when FwdRequest returns. */

	/* 1178, "ydrtLaunchForward: sent" */
	ysRecord(YS_PRODUCT,YDRT_FAC,(ub4)1178,YSLSEV_DEBUG(4),
		 (char*)0,YSLNONE);
      }
    }
  }

  /* if we timed out, reject all the remaining requests */
  if( timedout )
  {
    while( (r = (yore *)ysLstDeq( reqs ) ) )
    {
      /* 1179, "ydrtLaunchForward: rejected request %s|%s" */
      ysRecord(YS_PRODUCT,YDRT_FAC,(ub4)1179,YSLSEV_DEBUG(4), (char*)0,
	       YSLSTR(yduIdStr(r->hdr.ref->intf)),
	       YSLSTR(yduIdStr(r->hdr.ref->impl)), YSLEND);
      yoRejRequest( r );
      yoFreeRouteReq( r );
      ysmGlbFree( (dvoid*)r );
    }
  }

  /* At this point, anything left on reqs may still come active,
     or the timeout may occur */

  /* 1180, "ydrtLaunchForward: exit, %d requests remaining", */
  ysRecord(YS_PRODUCT,YDRT_FAC,(ub4)1180,YSLSEV_DEBUG(0), (char*)0,
	   YSLUB4((ub4)ysLstCount(reqs)), YSLEND );
}



/* ---------------------------- ydrtMetricCost ---------------------------- */
/*
  NAME
    ydrtMetricCost
  DESCRIPTION
    Given the info describing the wanted, return a cost value for the
    best match of the available interfaces that match.
  PARAMETERS
    cx	    -- ydrt context;
    info    -- describe desired interface.
    ainfo   -- active info for the interface.
    yore    -- the request.
    ydmt_info   -- returned metric object [OUT]
  RETURNS
    a cost value, zero if no metric derived cost is known.
*/

STATICF ydrtCost ydrtMetricCost( ydrtcx *cx, ydimain *ain, yore *r )
{
  yort_methodInfo   *m;
  ydmt_minfo  *minfo;
  ub4	    i;
  ydrtCost  rv = 0;
  ydyo_activeInfo *ainfo;

  ainfo = &ain->ainfo_ydimain;
  minfo = (ydmt_minfo*)ain->usrp_ydimain;
  if( !minfo )
  {
    /* 1181, "ydrtMetricCost: not found" */
    ysRecord(YS_PRODUCT,YDRT_FAC,(ub4)1181,YSLSEV_DEBUG(4), (char*)0, YSLNONE);
    rv = (ydrtCost)0;
  }
  else
  {
#ifdef NEVER

    /* FIXME? Ignore the queue info completely.  The sample windows will
       result in our sending everything to the process with the
       currently shortest queue lengths, and that is not a good
       idea.  The method costs are more likely to be stable over time.  */

    qinfo = &minfo->all_ydmt_minfo.queue_yort_implAll;

    /* 1182, "ydrtMetricCost: queue cost cost ad:%d + cd:%d + cl:%d * %d", */
    ysRecord(YS_PRODUCT,YDRT_FAC,(ub4)1182,YSLSEV_DEBUG(3), (char*)0,
	     YSLUB4(qinfo->avgDelayMs_yort_queueInfo),
	     YSLUB4(qinfo->curDelayMs_yort_queueInfo),
	     YSLUB4(qinfo->curLen_yort_queueInfo),
	     YSLUB4(cx->qscale_ydrtcx), YSLEND );

    /* add queue delay -- use average, current, and q len.
       FIXME? Arguably curLen weighting should be curLen * (avgLen / avgDly)
    */

    rv = (qinfo->avgDelayMs_yort_queueInfo +
	  qinfo->curDelayMs_yort_queueInfo +
	  qinfo->curLen_yort_queueInfo * cx->qscale_ydrtcx );
#endif

    /* method info, if any */
    for( i = 0 ; i < minfo->all_ydmt_minfo.methods_yort_implAll._length ; i++ )
    {
      m = &minfo->all_ydmt_minfo.methods_yort_implAll._buffer[i];
      if( !strcmp( m->name_yort_methodInfo, r->hdr.op ) )
      {
	/* 1183, "ydrtMetricCost: op %s cost %d + %d", */
	ysRecord(YS_PRODUCT,YDRT_FAC,(ub4)1183,YSLSEV_DEBUG(3), (char*)0,
		 YSLSTR(m->name_yort_methodInfo),
		 YSLUB4(m->avgTimeMs_yort_methodInfo),
		 YSLUB4(m->lastTimeMs_yort_methodInfo), YSLEND );

	rv += (m->avgTimeMs_yort_methodInfo + m->lastTimeMs_yort_methodInfo);
	break;
      }
    }
  }

  /* 1184, "ydrtMetricCost: returning cost %d" */
  ysRecord(YS_PRODUCT,YDRT_FAC,(ub4)1184,YSLSEV_DEBUG(0), (char*)0,
	   YSLUB4((ub4) rv ), YSLEND );

  return( rv );
}


/* ---------------------------- ydrtCopyRte ---------------------------- */
/*
  NAME
    ydrtCopyRte
  DESCRIPTION
    Copy a route, duplicating refs as needed.  ydyo_activeInfo is copied
    in yoAlloc client space.
  PARAMETERS
    dest	-- the container to copy into [OUT]
    src		-- the source container.
  RETURNS
    none
*/

STATICF void ydrtCopyRte( ydrte *dest, ydrte *src )
{
  dest->cost_ydrte = src->cost_ydrte;
  dest->info_ydrte = src->info_ydrte;
  dest->ain_ydrte = src->ain_ydrte;
  if( src->active_ydrte )
  {
    dest->active_ydrte = src->active_ydrte;
    dest->ainfo_ydrte = src->ainfo_ydrte;
  }
  else
    dest->active_ydrte = (ydim_active)0;

  dest->ain_ydrte->usrp_ydimain = src->ain_ydrte->usrp_ydimain;
}


