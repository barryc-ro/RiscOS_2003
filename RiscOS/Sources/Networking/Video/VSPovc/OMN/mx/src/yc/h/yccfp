/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * yccfp.h - Output file I/O for C/C++ code generators
 *
 * NOTES
 * See discussion in implementation file. This package is required to
 * enforce OCCS line length constraints on generated files. All output
 * for the C and C++ back ends MUST use yccfpPrint. Never use sysfpPrint 
 * directly.
 *
 * HISTORY
 * 06/04/96 kcoleman	Creation.
 */
#ifndef YCCFP_ORACLE
#define YCCFP_ORACLE

#ifndef  SYSX_ORACLE
#include <sysx.h>
#endif


/* -------------------------------------------------------------------- */
/*
 * yccfp - File descriptor type for C/C++ code generation. Use this
 *   instead of sysfp for these language mappings.
 *
 * To create a yccfp object, use yccfpOpen. Destruction is done by
 * yccfpClose.
 */
typedef struct yccfp yccfp;


/* -------------------------------------------------------------------- */
/*
 * yccfpOpen - Open a file with line length constraints.
 *
 * The fn, type, kind, and errtxt arguments are as for sysfpOpen.
 * If maxline is non-zero, it specifies the maximum length of lines
 * written to the file. If zero, no line length limit is implied.
 *
 * If the given file cannot be opened, a null pointer is returned and
 * a system error message may be returned in errtxt. See sysfpOpen for
 * more information about error conditions.
 */
yccfp* yccfpOpen( CONST char* fn, CONST char* type, CONST char* kind,
                  CONST char** errtxt, ub4 maxline);


/* -------------------------------------------------------------------- */
/*
 * yccfpClose - close a file previously opened with yccfpOpen.
 *
 * The yccfp passed in is no longer valid after calling this function.
 * If <ycfp> is null, no action is taken.
 */
void yccfpClose( yccfp* ycfp);


/* -------------------------------------------------------------------- */
/*
 * yccfpPrint - Write data to a yccfp file.
 *
 * <fp> should be a file pointer previously returned by yccfpOpen.
 * Indentation is controlled independently as an attribute of the yccfp.
 * Macro line continuation is controlled by calls to yccfpStartPP and
 * yccfpEndPP.
 *
 * The <fmt> string and subsequent arguments are as supported by
 * ysFmtStr.
 * 
 * Exceptions will be raised if this function is asked to print a line
 * that is longer than the allowable line length and which cannot be
 * split (such as HUGE identifier).
 */
void yccfpPrint( yccfp* fp, CONST char* fmt, ...);


/* -------------------------------------------------------------------- */
/*
 * yccfpIncIndent, yccfpDecIndent, yccfpSetIndent, yccfpIndent
 *
 * Indentation control for yccfpPrint. Indentation is expressed in terms
 * of levels. The number of spaces associated with each level is
 * under the control of yccfp (currently, 2).
 *
 * A level of 0 means the text is left justified. There is an internal
 * limit on how deep indentation can go - no matter how many times you
 * call yccfpIncIndent, indentation will never exceed the internal max.
 * However, yccfpIncIndent and yccfpDecIndent can always be called
 * reliably in pairs.
 *
 * If a partial line is buffered, changes to the indentation level will
 * not take effect until the beginning of the next line.
 */
void yccfpIncIndent( yccfp* ycfp);
void yccfpDecIndent( yccfp* ycfp);
void yccfpSetIndent( yccfp* ycfp, ub2 newlvl);
ub2 yccfpIndent( yccfp* ycfp);


/* -------------------------------------------------------------------- */
/*
 * yccfpStartPP, yccfpEndPP - signal start/end of code gen for a
 *   preprocessing directive.
 *
 * When generating preprocessing directives (ifdef's, defines, etc.),
 * bracket your yccfpPrint calls with these two functions so that the
 * print function knows to add a backslash before any newlines it
 * inserts in enforcing the line length limit.
 */
void yccfpStartPP( yccfp* ycfp);
void yccfpEndPP( yccfp* ycfp);

#endif /* YCCFP_ORACLE */
