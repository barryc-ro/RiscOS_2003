/* Copyright (c) 1995 by Oracle Corporation. All Rights Reserved.
 *
 * yosx.h - Data Encode & Decode
 */

#ifndef YOSX_ORACLE
#define YOSX_ORACLE

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef SYSXCD_ORACLE
#include <sysxcd.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif

EXTC_START

/*
 * Type Definitions
 */

typedef struct yosx yosx;                        /* encode/decode descriptor */

typedef boolean (*yosxcb)(ysbv *bv, dvoid *usrp);

typedef ub2 (*yosxGet2)( yosx *x );
typedef ub4 (*yosxGet4)( yosx *x );
typedef void (*yosxGet8)( yosx *x, sysb8 *val );

struct yosx
{
  boolean enc;                                         /* encode/decode flag */
  ysbv   *bv;                                               /* buffer vector */
  sword   nbv;                                /* # elements in buffer vector */
  ub1    *ptr;                         /* current position in buffer element */
  size_t  cnt;               /* current space left in current buffer element */
  sword   idx;                               /* current buffer element index */
  ysmhp  *hp;                                      /* heap to use for encode */
  yosxcb   cb;                       /* callback from streamed encode/decode */
  dvoid  *usrp;                                 /* user pointer for callback */

  dvoid	    *item;                              /* used in yosxGetUBx macros */
  boolean   noswap;                                        /* no swap on get */
  yosxGet8   get8;                                   /* function to get ub4s */
};

typedef struct yosxPos yosxPos;

struct yosxPos
{
  sword	    idx;                                         /* buffer in vector */
  size_t    off;                                         /* offset in buffer */
};


/* DISABLE check_naming */
externref ysidDecl(YO_EX_ENDOFDATA);                /* end-of-data exception */
externref ysidDecl(YO_EX_ENCODEERROR);  /* encode error from stream callback */
/* ENABLE check_naming */

/*
 * yosxDecode, yosxDecEnd - decode a buffer vector
 *
 * DESCRIPTION
 * yosxDecode() prepares to decode a buffer vector described by bv and nbv.
 * It returns a descriptor that should be used during the decode process.
 *
 * yosxDecInit initializes a yosx; suitable for yosx's on the stack.
 *
 * The routines yosxGetUB1(), yosxGetUB2(), yosxGetUB4(), yosxSkip(),
 * yosxAlign(), yosxCopy() may all be used during decode to retrieve
 * the contents of the buffer.
 * Attempts to decode more data than remains in the decode buffer
 * will cause the exception YO_EX_ENDOFDATA to be raised.
 *
 * yosxDecSet can be called to change the byte ordering associated
 * with the decode descriptor.
 *
 * yosxDecEnd() should be called to finish the decoding process.  It frees
 * the decode descriptor. Do not call this for yosx's declared on the
 * stack.
 *
 * The boolean lsborder us either 0 or 1, for MSB and LSB respectively;
 * it should match SYSX_BYTE_ORDER where a corresponding yosxEncode was done.
 *
 * See also yosxDecodeFromStream().
 *
 * WARNING: The length of all elements in the buffer vector except the last
 * one MUST BE A MULTIPLE OF SIXTEEN.
 */
yosx *yosxDecode( boolean lsborder, ysbv *bv, sword nbv);
void yosxDecInit( yosx *x, boolean lsborder, ysbv* bv, sword nbv);
boolean yosxDecGet(yosx *x);
void yosxDecSet(yosx *x, boolean lsborder);
void yosxDecEnd(yosx *x);


/*
 * yosxGetPos - get current position in buffer vector
 *
 * DESCRIPTION
 * yosxGetPos() gets the current position of the pointer, which points
 * to the next piece of data in the buffer vector.
 */
void yosxGetPos(yosx *x, yosxPos *pos);

/*
 * yosxSetPos - set current position in buffer vector
 *
 * DESCRIPTION
 * yosxSetPos() sets the current position of the pointer to the next piece
 * of data in the descriptor to a value from a previous call to yosxGetPos.
 * Note:  you cannot do a setpos and write at the location.  You should
 * use the yosxPut*AtPos functions to lay down an element at a previously
 * calculated position.  If called in an encode buffer, this will
 * throw YS_EX_BADPARAM.
 */
void yosxSetPos(yosx *x, yosxPos *pos);

/*
 * yosxGetLength - distance between positions in a descriptor.
 *
 * DESCRIPTION
 * yosxGetLength() returns the number of octets between two positions in
 * a descriptor.
 */
ub4 yosxGetLength(yosx *x, yosxPos *pos1, yosxPos *pos2);


/*
 * yosxGetUB1, yosxGetUB2, yosxGetUB4, yosxGetSB8 - get integers
 *
 * DESCRIPTION
 * yosxGetUB1() gets a one-byte integer from the decode buffer.  Similarly,
 * yosxGetUB2() and yosxGetUB4() get two- and four-byte integers, respectively.
 * yosxGetSB8() gets an eight-byte integer.  All of these routines advance the
 * fetch pointer past the data that is read.
 */

dvoid *yosxGetAlign( yosx *x, sword amt );

#define yosxGetUB1(x) ( *(ub1*)yosxGetAlign((x),1) ) 

#define yosxGetUB2(x) ( (x)->item = yosxGetAlign((x), 2), \
	     (x)->noswap ? *(ub2*)(x)->item : sysxGetSwap2( (ub1*)(x)->item ))
			
#define yosxGetUB4(x) ( (x)->item = yosxGetAlign((x), 4), \
	     (x)->noswap ? *(ub4*)(x)->item : sysxGetSwap4( (ub1*)(x)->item ))
			
#define yosxGetSB8(x, val) (*(x)->get8)((x), val)


/*
 * yosxGetNetUB1, yosxGetNetUB2, yosxGetNetUB4
 *
 * DESCRIPTION
 */
#define yosxGetNetUB1(x) ( *(ub1*)yosxGetAlign(x,1) ) 
#define yosxGetNetUB2(x) \
       ( (x)->item = yosxGetAlign((x), 2), sysxGetUaB2((ub1*)(x)->item) )
#define yosxGetNetUB4(x) \
       ( (x)->item = yosxGetAlign((x), 4), sysxGetUaB4((ub1*)(x)->item) )


/*
 * yosxSkip - skip data
 *
 * DESCRIPTION
 * yosxSkip() skips len bytes in the decode buffer.
 */
void yosxSkip(yosx *x, size_t len);

/*
 * yosxEncode, yosxEncEnd - encode a buffer vector
 *
 * DESCRIPTION
 * yosxEncode() prepares to encode a buffer vector.  len is an initial
 * estimate of the amount of data to be encoded.  len may be zero if
 * no guess can be made.  hp is the heap where memory for the buffers
 * should be obtained.  yosxEncode() returns a descriptor that should be
 * used during the encoding process.
 *
 * The routines yosxPutUB1(), yosxPutUB2(), yosxPutUB4(), yosxAlign(), and
 * yosxCopy() may all be used during encode to write the contents of the
 * buffer.
 *
 * yosxEncEnd() should be called to finish the encoding process.  It
 * returns the newly created buffer vector in *bv and *nbv.  The encode
 * descriptor itself is freed.
 *
 * The buffer vector itself may be freed using ysBvFree() after the buffer
 * vector is no longer needed.  Be sure to pass the same heap to ysBvFree()
 * that was previously passed to yosxEncode() to create the buffer vector.
 *
 * See also yosxEncodeToStream().  For stream encodes, the bv and nbv
 * arguments to yosxEncEnd() are ignored.  Because a final callback may be
 * made to write data, it is possible for this routine to raise
 * YO_EX_ENCODEERROR.  The descriptor will still be freed.
 */
yosx *yosxEncode(size_t len, ysmhp *hp);
void yosxEncEnd(yosx *x, ysbv **bv, sword *nbv);

/*
 * yosxPutUB1, yosxPutUB2, yosxPutUB4, yosxPutSB8 - put integers
 *
 * DESCRIPTION
 * yosxPutUB1() writes a one-byte integer into the encode buffer.  Similarly,
 * yosxPutUB2() and yosxPutUB4() write two- and four-byte integers,
 *  respectively.
 * yosxPutSB8() writes an eight-byte integer.
 * All of these routines advance the write pointer past the data written.
 */

dvoid *yosxPutAlign( yosx *x, sword amt );

#define yosxPutUB1(x, val) do { *(ub1*)yosxPutAlign(x, 1) = val; } while(0)
#define yosxPutUB2(x, val) do { *(ub2*)yosxPutAlign(x, 2) = val; } while(0)
#define yosxPutUB4(x, val) do { *(ub4*)yosxPutAlign(x, 4) = val; } while(0)

void yosxPutSB8(yosx *x, sysb8 *val);

/* yosxPutUB4
 *   
 * lays down the UB4 at the position previously obtained with yosxGetPos,
 * without updating the current position in the encode stream.
 */
void yosxPutUB4AtPos(yosx *x, yosxPos *pos, ub4 val);

/*
 * yosxPutNetUB2, yosxPutNetUB4, yosxPutNetUB4AtPos
 *
 * DESCRIPTION
 * Used for creating internal representation of typecodes.
 */
#define yosxPutNetUB1(x, val) yosxPutUB1(x, val)
void yosxPutNetUB2(yosx *x, ub2 val);
void yosxPutNetUB4(yosx *x, ub4 val);
void yosxPutNetUB4AtPos(yosx *x, yosxPos *pos, ub4 val);

/*
 * yosxCopy - copy data
 *
 * DESCRIPTION
 * yosxCopy() may be used both during encode and during decode.  During
 * encode, yosxCopy() appends the given buffer of len bytes to the encode
 * buffer.  During decode, yosxCopy() copies the next len bytes of the
 * decode buffer into buf.  The read or write pointer is advanced past
 * the data.
 */
void yosxCopy(yosx *x, ub1 *buf, size_t len);

/*
 * yosxAlign - align to a boundary
 *
 * DESCRIPTION
 * yosxAlign() may be used both during encode and during decode.  yosxAlign()
 * aligns the read or write pointer to the offset boundary specified.  This
 * is relative to the beginning of the buffer vector.  If there is no more
 * data in the decode buffer, an exception is not raised, but one will be
 * on the next get attempt.
 */
void yosxAlign(yosx *x, sword boundary);

/*
 * yosxDecodeFromStream - decode from a stream
 *
 * yosxDecodeFromStream() prepares to decode data that is coming from a stream.
 * This is useful where all the data is not available in memory at the same
 * time (as for large data streams).
 *
 * It returns a descriptor that should be used during the decode process,
 * which should proceed exactly as for yosxDecode().  yosxGetPos() is not a
 * supported operation on streams.
 *
 * The data to be decoded is obtained by invoking the getbufcb callback to
 * get the next buffer.  The bv passed to the callback should be set such
 * that buf points to the location where the next chunk of data is to come
 * from, and len should indicate the size of the buffer.  Note that the bv
 * passed to the callback is the same one passed to yosxDecodeFromStream().
 * The callback is invoked as soon as the first decode attempt is tried,
 * so the bv need not be initialized when calling yosxDecodeFromStream().
 *
 * The callback should indicate that the end of the stream has been reached
 * by returning FALSE, instead of TRUE.  (Do not return data and FALSE at
 * the same time, or the data will be ignored.)  Attempts to read past the
 * end of the stream will, as usual, throw the exception YO_EX_ENDOFDATA.
 *
 * The boolean lsborder is TRUE for LSB order, or FALSE for MSB order.  
 * It must match SYSX_BYTE_ORDER where yosxEncode was invoked.
 *
 * WARNING: The length of the buffer returned by the callback for all
 * segments in the stream other than the last one MUST BE A MULTIPLE OF
 * SIXTEEN.
 */
yosx *yosxDecodeFromStream(yosxcb getbufcb, boolean lsborder,
			   ysbv *bv, dvoid *usrp);

/*
 * yosxEncodeToStream - encode to a stream
 *
 * yosxEncodeToStream() prepares to encode data to a stream.  This is useful
 * when a large amount of data is to be encoded and cannot be contained in
 * memory all at once.
 *
 * It returns a descriptor that should be used during the encode process,
 * which should proceed exactly as for yosxEncode().
 *
 * The data to be encoded is written to the buffer described the bv passed
 * to yosxEncodeToStream().  Once the buffer is full, the callback function
 * is invoked to give it the opportunity to process the buffer.  The callback
 * function may choose to alter the buffer pointer at this time.  In any
 * case, upon return from the callback, encoding continues.
 *
 * Encode continues until either a) the callback function returns FALSE,
 * at which the time the encode routine which caused the callback will
 * throw YO_EX_ENCODEERROR, or b) yosxEncEnd() is called, in which case one
 * final callback is made to dispose of the remaining data if any (the
 * len value may be altered during this callback to reflect the actual
 * amount of data in the buffer), after which any memory allocated for
 * the bv should be freed.
 *
 * WARNING: The length of the buffer provided for encoding MUST BE A
 * MULTIPLE OF SIXTEEN.
 */
yosx *yosxEncodeToStream(yosxcb putbufcb, ysbv *bv, dvoid *usrp);

EXTC_END
#endif /* YOSX_ORACLE */
