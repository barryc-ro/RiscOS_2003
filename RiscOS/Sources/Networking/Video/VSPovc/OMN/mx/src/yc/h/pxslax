/*
 * $Header$
 */

/* Copyright (c) 1989 by Oracle Corporation */
 
/* NAME
     pxslax.h
     SLAX: Parse Table Utilities

   FUNCTION
     This file contains the operations that can be performed on the
     parse tables generated by SLAX.

   NOTES
 
   MODIFIED
    jweisz     05/17/93 -  New mach fields for base-check lkahead method 
    jweisz     03/16/93 -  Lint - change CONST to CONST_W_PTR
    jweisz     03/09/93 -  Call engine with alloc, free, and lms facility
    jweisz     01/25/93 - added stack of actions to lrmachine
    jweisz     08/16/92 - delete segmsg, pxllt, listtms()
    jweisz     08/14/92 - added pxntgr
    jweisz     08/11/92 - added pxllt
    tolkin     08/29/91 -  extra arg to pxuext 
    tolkin     08/14/91 -         support lms 
    tolkin     06/02/91 -         chaneg pxfile to pgstrm 
    Olkin      03/07/91 - change orastd to s.h
    Olkin      02/21/91 - use new coding standards
    Olkin      09/05/90 - fix for standlone linting
    Olkin      08/30/90 - fixup for standalone compile
     Olkin    01/18/90 - creation
*/

#ifndef PXTABLE
#  define PXTABLE

#  ifndef PX_IN_MAIN
typedef struct {
  char *toknam;
  sb2 tokval;
} pxtmty;
#    include <pxtokn.h>
#  endif

/*
 * This is the data structure that is returned by pxact. It contains the
 * action type and other information depending on the type.
 */
typedef struct {
  ub2 type;                                           /* type of this action */
  ub2 action;                 /* shift state # or reduce global production # */
} pxacdf;

/*
 * This structure is the lr stack object. Its implementation is contained
 * in pxnmach.
 */
struct lrframe {
  sb2 state;                                /* state produced by goto tables */
  sb2 symbol;                                                      /* symbol */
  sb2 srclin;                          /* line in source where symbol begins */
  sb2 srccol;                        /* column in source where symbol begins */
  char *srcnam;               /* source file name from which came this token */
  PXVALTYPE val;                                      /* value of this frame */
};

typedef struct lrframe pxstk;

/*
 * The possible types of an pxacdf.type field:
 */
#  define PXERROR   0
#  define PXACCEPT  1
#  define PXSHIFT   2
#  define PXREDUCE  3

/*
 * Bit Manipulation macros.
 */
#  define MACHBITS 32
#  define SETBIT(a, i) ((a)[(i)>>5] |= (1<<((i) & 037)))
#  define BIT(a, i)    ((a)[(i)>>5] &  (1<<((i) & 037)))
#  define REMBIT(a, i) ((a)[(i)>>5] &= ~(1<<((i) & 037)))
#  define TBIT(a, i)   ((a) & (1 << (i)))

/*
 * Maximum depth of the parse stacks.
 */
#  define PXMAXDEPTH 150

/*
 * Common macro for error stuff (taken from pxertb.h)
 */
#  define PXMAXERRLEN  256

/*
 * This structure contains the lalr machine object.
 */
typedef struct pxnmach pxnmach;
struct pxnmach {
  int       debug;                                             /* debug flag */
  sb1       fnderr;        /* flag is set when error was previously detected */
  sb1       ngrams;                                    /* number of grammars */
  ub1       status;                     /* status of machine after last move */
  sb2       partop;                                    /* top of parse stack */
  sb2       accept;                                   /* top of accept stack */
  sb2       pxtoid_;                   /* value of id token for this grammar */
  ub2       pxtklen;                                     /* length of pxextk */
  size_t    valsize;                                     /* sizeof PXVALTYPE */
  size_t    macsize;                                   /* sizeof this struct */
  size_t    frmsize;                                       /* sizeof lrframe */
  size_t    mnssize;                     /* sizeof machine minus parse stack */
  sb2       pxnonts;                               /* number of nonterminals */
  sb2       pxterms;                                  /* number of terminals */
  ub4      *pxextk_;                                /* "expected token" list */
  ub2       pxtablen;                                   /* length of pxatabl */
  const sb2 *pxdfact_;                                     /* default action */
  const sb2 *pxdfgoto_;                                      /* default goto */
  const sb2 *pxpact_;                             /* index for actions table */
  const sb2 *pxpgoto_;                               /* index for goto table */
  const sb2 *pxatabl_;                                     /*  actions table */
  const sb2 *pxchek_;                             /* check for actions table */
  const sb2 *pxlhsn_;                                    /* lhs number table */
  const sb2 *pxrhsc_;                                     /* rhs count table */
  const sb2 *pxroff_;                                   /* rule offset table */
  const sb2 *pxgram_;                                /* grammar number table */
  sb2 *pxsubs_;                                       /* substitutions table */
  sb2 *pxtmap_;                      /* map of slax.h tk # to  internal tk # */
  sb2 *pxtkno_;                      /* map of internal tk # to slax.h tk #  */
  const sb2 *pxntgr_;                       /* grammar # of each nonterminal */
  sb2 *pxsytk_;                                        /* syncronizing table */
  sb2 *pxcorl_;                                          /* corrections list */
  char * *pxdbpd_;                               /* debug - production texts */
  char * *pxdbtm_;                                 /* debug - terminal texts */
  pxtokn* (**pxlex_)(void *, int, ... );                     /* lexers */
  void    (**pxred_)(pxnmach *, ub2, void *);            /* red'n rtns */
  int     (*pxkywd_)(void *, sb2, pxtokn *);  /* callback for keywords */
  pxtokn* (*pxgett)(void *, int, ...);                        /* lexer */
  void    (*pxredc_)(pxnmach *, ub2, void *);             /* red'n rtn */
  pxstk parse[PXMAXDEPTH];                                /* the parse stack */
  pxacdf pxacstk[PXMAXDEPTH];                                /* action stack */
  ub2    pxnumacts;                                    /* action stack depth */
};

/*
 * Macros to retrieve representations from the grammar message file.
 */
#define pxtmmp(idx)  "unknown"
#  define pxntmp(idx) "unknown"

/*
 * These are possible values for the status of the machine.
 */
#  define PXMNORMAL 0                          /* machine is in normal state */
#  define PXMACCEPT 1                          /* machine is in accept state */
#  define PXMERROR  2                          /* machine found syntax error */
#  define PXFATAL   3                           /* a fatal error has occured */

#  define PXOVERFL  6                            /* stack overflow condition */

/*
 * When all hell breaks loose...
 */
#  define PXDISASTER 2                                    /* Unable to go on */
#  define PXTRYAGAIN 3                                      /* pxfake failed */


/*
 * Prototypes of table procedures.
 */

void pxstrt(void *cs, int debug,
	    pxtokn* (*calledlex)(void *, int, ...),
	    void * (*allocmem)(size_t), void (*freemem)(void *),
	    int (*kywd)(void *, sb2, pxtokn *), sb1 *err, sb2 idval);
/*
 * Starts the parsing.
 *
 * cs - client's context area
 * debug - TRUE for debugging messages (also need PXDEBUG set)
 * calledlex - client's supplied callback for lexical functions
 * allocmem - client's supplied memory allocation function
 * freemem - client's supplied memory free function
 * kywd - callback routine for determining whether arg is a keyword
 * err - address of an error byte for return values
 * idval - value of the grammar's id token
 */

void     pxnspus(pxnmach *, sb2, sb2, PXVALTYPE *, sb2, sb2, char *);
sb2      pxngoto(pxnmach *, ub2, ub2);
pxnmach *pxnmove(pxnmach *, pxtokn *, void *, char *);

sb2      pxnmstt(pxnmach *);
int      pxnrcov(pxnmach *, pxtokn *, void *, char *);

typedef sb2 pxelmtyp;

#endif
