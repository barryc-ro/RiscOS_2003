/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 *   yrrepos.c - Implementation of CORBA::Repository
 *
 * NOTES
 *
 * HISTORY
 * 02/01/96 kcoleman	Manage anonymous types differently
 * 01/25/96 kcoleman	Fix bug 337604: Implement Repository::describe_contents
 * 11/09/95 kcoleman    Creation
 */
 
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
 
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif

#ifndef YRCORBAI_H
#include <yrcorbaI.h>
#endif
 
#ifndef YR_ORACLE
#include <yr.h>
#endif
 
#ifndef YOORB_ORACLE
#include <yoorb.h>
#endif
 
#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif

externdef ysidDecl(CORBA_Repository_implid) = "ORA_Repository";

/************************************************************************/
/* Interface CORBA::Repository */
/************************************************************************/
 
CORBA_Contained CORBA_Repository_lookup_i(
     CORBA_Repository or, yoenv* ev, CORBA_ScopedName search_name)
{
  return CORBA_Container_lookup_i( (CORBA_Container) or, ev, search_name);
}
 
/* ---------------------------------------------------------------------- */
/*
 * CORBA::Repository::contents - returns a (possibly filtered) list of
 *   the repository contents.
 *
 * We cannot simply return the result of calling CORBA::Container::contents
 * because our repository contains primitive types and it shouldn't.
 * In the CORBA hierachy, PrimitiveDef is a CORBA::IDLType and not
 * descended from CORBA::Contained, so even though they're created via
 * CORBA::Repository, they're not supposed to be part of the repository
 * contents proper. 
 *
 * I've found it useful to leave them there, however, so that other
 * interfaces to the IFR can look up primitives by name easily. This 
 * may change in the future.
 */
 
CORBA_ContainedSeq CORBA_Repository_contents_i(
     CORBA_Repository or, yoenv* ev, CORBA_DefinitionKind limit_type,
     boolean exclude_inherited)
{
  yslst* volatile cntnts = (yslst*)0;
  CORBA_ContainedSeq seq;
 
  yseTry
  {
    cntnts = yrContents( yrCORBAtoYR( (CORBA_IRObject)or),
                         yrDefKindToYrdk(limit_type), exclude_inherited);
  }
  yseCatchAll
  {
    if ( cntnts )
      ysLstDestroy( (dvoid*) cntnts, (ysmff)0);
    cntnts = (yslst*) 0;
  }
  yseEnd
 
  if ( cntnts )           /* filter out the IDLType objects */
  {
    yslst* newlist = ysLstCreate();
    yrobj* obj;

    while ( (obj = (yrobj*) ysLstDeq( cntnts)) )
    {
      if ( yrGetKind(obj) == yrdkPrimitive )
        continue;
      else
        ysLstEnq( newlist, obj);
    }
    ysLstDestroy( cntnts, (ysmff)0);
    cntnts = newlist;
  }
  yrObjListToSeq( cntnts, (yr_objseq*) &seq);
  if ( cntnts )
    ysLstDestroy( (yslst*)cntnts, (ysmff)0);
  return seq;
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_ContainedSeq CORBA_Repository_lookup_name_i(
     CORBA_Repository or, yoenv* ev, CORBA_Identifier search_name,
     sb4 levels_to_search, CORBA_DefinitionKind limit_type,
     boolean exclude_inherited)
{
  return CORBA_Container_lookup_name_i( (CORBA_Container) or, ev,
                                        search_name, levels_to_search,
                                        limit_type, exclude_inherited);
}
 
/* ---------------------------------------------------------------------- */
/*
 * CORBA::Repository::describe_contents - describe the contents of the
 *   repository.
 *
 * The careful reader will note that CORBA::Repository::contents cannot
 * just call CORBA::Container::contents because some special filtering of
 * the repository's contents is required. However, we can get away with
 * just calling CORBA::Container::describe_contents here because it will
 * build the description sequence off the result of Repository::contents.
 * See CORBA::Container::contents.
 */
 
CORBA_Container_DescriptionSeq CORBA_Repository_describe_contents_i(
     CORBA_Repository or, yoenv* ev, CORBA_DefinitionKind limit_type,
     boolean exclude_inherited, sb4 max_returned_objs)
{
  return CORBA_Container_describe_contents_i( (CORBA_Container) or, 
                                              ev, limit_type, 
                                              exclude_inherited,
                                              max_returned_objs);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Contained CORBA_Repository_lookup_id_i(
     CORBA_Repository or, yoenv* ev, CORBA_RepositoryId search_id)
{
  yrobj* result;
 
  yseTry
  {
    result = yrLookupId( yrCORBAtoYR( (CORBA_IRObject) or), search_id);
  }
  yseCatchAll
  {
    result = (yrobj*)0;
  }
  yseEnd
  return yoDuplicate( yrYRtoCORBA(result));
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_PrimitiveDef CORBA_Repository_get_primitive_i(
     CORBA_Repository or, yoenv* ev, CORBA_PrimitiveKind kind)
{
  yrobj* result = yrGetPrimitive( yrCORBAtoYR( (CORBA_IRObject) or), kind);
 
  return yoDuplicate( yrYRtoCORBA( result));
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_DefinitionKind CORBA_Repository__get_def_kind_i(
     CORBA_Repository or, yoenv* ev)
{
  return CORBA_IRObject__get_def_kind_i( (CORBA_IRObject) or, ev);
}
 
#ifdef NEVER
/* ---------------------------------------------------------------------- */
/*
 * CORBA::Repository::self - hack to get a tightly bound repository obj.
 */

CORBA_Repository CORBA_Repository__get_self_i( CORBA_Repository or, yoenv* ev)
{
  yrobj* rep = (yrobj*) yoGetImplState( or);

  return yoDuplicate( (dvoid*) yrYRtoCORBA(rep));
}
#endif

/* ---------------------------------------------------------------------- */
 
externdef struct CORBA_Repository__tyimpl CORBA_Repository__impl =
 {
  CORBA_Repository_lookup_id_i,
  CORBA_Repository_get_primitive_i,
  CORBA_Repository_lookup_i,
  CORBA_Repository_contents_i,
  CORBA_Repository_lookup_name_i,
  CORBA_Repository_describe_contents_i,
  CORBA_Repository__get_def_kind_i
 };


/* ---------------------------------------------------------------------- */

void Init_CORBA_Repository( yrobj* rep)
{
  YR_SET_IMPL(CORBA_Repository, FALSE, rep);
  YR_IMPL_READY(CORBA_Repository, 0);
}

void Term_CORBA_Repository()
{
  YR_IMPL_DEACTIVATE(CORBA_Repository);
}
