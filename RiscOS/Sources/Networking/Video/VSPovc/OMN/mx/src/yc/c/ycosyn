/*** GENERATED ***/
#include <sysx.h>
#define PXVTYPE
#include <ycosyn0.h> 

#include <ycosyn.h>

#include <pxslax.h>
pxtokn *ycprLex (dvoid *cs, sword action, ...);

void px_ycos( pxnmach *mach,ub2 prod, dvoid *cs );

#define PXNGRAMS 1
static sb2 pxtmap[] = {
     1,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    63,    58,     2,
    65,    66,    61,    59,    67,    60,     2,    62,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,    54,    51,
    68,    55,    69,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,    70,     2,    71,    57,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,    52,    56,    53,    64,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     1,     2,     3,
     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50
};
static sb2 pxtkno[] = {
     0,   257,   258,   259,   260,   261,   262,   263,   264,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
   306,    59,   123,   125,    58,    61,   124,    94,    38,    43,
    45,    42,    47,    37,   126,    40,    41,    44,    60,    62,
    91,    93
};
#ifdef PXDEBUG
static CONST_DATA char *pxdbtm[] =
{
	"-end of file-", 
	"end$", 
	"error", 
	"yct_identifier", 
	"yct_numeric_literal", 
	"yct_character_literal", 
	"yct_string", 
	"YCTANY", 
	"YCTATTRIBUTE", 
	"YCTBOOLEAN", 
	"YCTCASE", 
	"YCTCHAR", 
	"YCTCONST", 
	"YCTCONTEXT", 
	"YCTDEFAULT", 
	"YCTDOUBLE", 
	"YCTENUM", 
	"YCTEXCEPTION", 
	"YCTFALSE", 
	"YCTFLOAT", 
	"YCTIN", 
	"YCTINOUT", 
	"YCTINTERFACE", 
	"YCTLONG", 
	"YCTMODULE", 
	"YCTOCTET", 
	"YCTONEWAY", 
	"YCTOUT", 
	"YCTRAISES", 
	"YCTREADONLY", 
	"YCTSEQUENCE", 
	"YCTSHORT", 
	"YCTSTRING", 
	"YCTSTRUCT", 
	"YCTSWITCH", 
	"YCTTRUE", 
	"YCTTYPEDEF", 
	"YCTUNION", 
	"YCTUNSIGNED", 
	"YCTVOID", 
	"YCTTYPECODE", 
	"YCTPRAGMAID", 
	"YCTPRAGMAPREFIX", 
	"YCTPRAGMAVERSION", 
	"YCTPRAGMADBATTR", 
	"YCTPRAGMADBCREAT", 
	"YCTPRAGMADBLST", 
	"YCTNEWLINE", 
	"YCTDCOLON", 
	"YCTLS", 
	"YCTRS", 
	";", 
	"{", 
	"}", 
	":", 
	"=", 
	"|", 
	"^", 
	"&", 
	"+", 
	"-", 
	"*", 
	"/", 
	"%", 
	"~", 
	"(", 
	")", 
	",", 
	"<", 
	">", 
	"[", 
	"]", 
	"-list end-" 
};
static CONST_DATA char *pxdbpd[] = 
{
	"-no such reduction-",
	"$accept : specification end$ ",
	"specification : definition ",
	"specification : specification definition ",
	"definition : type_dcl ; ",
	"definition : const_dcl ; ",
	"definition : except_dcl ; ",
	"definition : interface ; ",
	"definition : module ; ",
	"definition : pragma_dir YCTNEWLINE ",
	"module : YCTMODULE yct_identifier { definition_list } ",
	"interface : interface_dcl ",
	"interface : forward_dcl ",
	"interface_dcl : interface_header { } ",
	"interface_dcl : interface_header { interface_body } ",
	"forward_dcl : YCTINTERFACE yct_identifier ",
	"interface_header : YCTINTERFACE yct_identifier inheritance_spec_opt ",
	"interface_body : export_list ",
	"export : type_dcl ; ",
	"export : const_dcl ; ",
	"export : except_dcl ; ",
	"export : attr_dcl ; ",
	"export : op_dcl ; ",
	"export : pragma_dir YCTNEWLINE ",
	"inheritance_spec : : scoped_name_list ",
	"scoped_name : yct_identifier ",
	"scoped_name : YCTDCOLON yct_identifier ",
	"scoped_name : scoped_name YCTDCOLON yct_identifier ",
	"const_dcl : YCTCONST const_type yct_identifier = const_exp ",
	"const_type : integer_type ",
	"const_type : char_type ",
	"const_type : boolean_type ",
	"const_type : floating_pt_type ",
	"const_type : string_type ",
	"const_type : scoped_name ",
	"const_exp : or_expr ",
	"or_expr : xor_expr ",
	"or_expr : or_expr | xor_expr ",
	"xor_expr : and_expr ",
	"xor_expr : xor_expr ^ and_expr ",
	"and_expr : shift_expr ",
	"and_expr : and_expr & shift_expr ",
	"shift_expr : add_expr ",
	"shift_expr : shift_expr YCTRS add_expr ",
	"shift_expr : shift_expr YCTLS add_expr ",
	"add_expr : mult_expr ",
	"add_expr : add_expr + mult_expr ",
	"add_expr : add_expr - mult_expr ",
	"mult_expr : unary_expr ",
	"mult_expr : mult_expr * unary_expr ",
	"mult_expr : mult_expr / unary_expr ",
	"mult_expr : mult_expr % unary_expr ",
	"unary_expr : unary_operator primary_expr ",
	"unary_expr : primary_expr ",
	"unary_operator : - ",
	"unary_operator : + ",
	"unary_operator : ~ ",
	"primary_expr : scoped_name ",
	"primary_expr : literal ",
	"primary_expr : ( const_exp ) ",
	"literal : yct_numeric_literal ",
	"literal : string_literal ",
	"literal : yct_character_literal ",
	"literal : boolean_literal ",
	"boolean_literal : YCTTRUE ",
	"boolean_literal : YCTFALSE ",
	"positive_int_const : const_exp ",
	"type_dcl : YCTTYPEDEF type_declarator ",
	"type_dcl : struct_type ",
	"type_dcl : union_type ",
	"type_dcl : enum_type ",
	"type_declarator : type_spec declarators ",
	"type_spec : simple_type_spec ",
	"type_spec : constr_type_spec ",
	"simple_type_spec : base_type_spec ",
	"simple_type_spec : template_type_spec ",
	"simple_type_spec : scoped_name ",
	"base_type_spec : floating_pt_type ",
	"base_type_spec : integer_type ",
	"base_type_spec : char_type ",
	"base_type_spec : boolean_type ",
	"base_type_spec : octet_type ",
	"base_type_spec : any_type ",
	"base_type_spec : type_code_type ",
	"template_type_spec : sequence_type ",
	"template_type_spec : string_type ",
	"constr_type_spec : struct_type ",
	"constr_type_spec : union_type ",
	"constr_type_spec : enum_type ",
	"declarators : declarator ",
	"declarators : declarators , declarator ",
	"declarator : simple_declarator ",
	"declarator : complex_declarator ",
	"simple_declarator : yct_identifier ",
	"complex_declarator : array_declarator ",
	"type_code_type : YCTTYPECODE ",
	"floating_pt_type : YCTFLOAT ",
	"floating_pt_type : YCTDOUBLE ",
	"integer_type : signed_int ",
	"integer_type : unsigned_int ",
	"signed_int : signed_long_int ",
	"signed_int : signed_short_int ",
	"signed_int : signed_long_long_int ",
	"signed_long_int : YCTLONG ",
	"signed_short_int : YCTSHORT ",
	"signed_long_long_int : YCTLONG YCTLONG ",
	"unsigned_int : unsigned_long_int ",
	"unsigned_int : unsigned_short_int ",
	"unsigned_long_int : YCTUNSIGNED YCTLONG ",
	"unsigned_short_int : YCTUNSIGNED YCTSHORT ",
	"char_type : YCTCHAR ",
	"boolean_type : YCTBOOLEAN ",
	"octet_type : YCTOCTET ",
	"any_type : YCTANY ",
	"struct_type : YCTSTRUCT yct_identifier { member_list } ",
	"member_list : member ",
	"member_list : member_list member ",
	"member : type_spec declarators ; ",
	"union_type : YCTUNION yct_identifier YCTSWITCH ( switch_type_spec ) { switch_body } ",
	"switch_type_spec : integer_type ",
	"switch_type_spec : char_type ",
	"switch_type_spec : boolean_type ",
	"switch_type_spec : enum_type ",
	"switch_type_spec : scoped_name ",
	"switch_body : case ",
	"switch_body : switch_body case ",
	"case : case_label_list element_spec ; ",
	"case_label : YCTCASE const_exp : ",
	"case_label : YCTDEFAULT : ",
	"element_spec : type_spec declarator ",
	"enum_type : YCTENUM yct_identifier { enumerator_list } ",
	"enumerator : yct_identifier ",
	"sequence_type : YCTSEQUENCE < simple_type_spec , positive_int_const > ",
	"sequence_type : YCTSEQUENCE < simple_type_spec > ",
	"string_type : YCTSTRING < positive_int_const > ",
	"string_type : YCTSTRING ",
	"array_declarator : yct_identifier fixed_array_size_list ",
	"fixed_array_size : [ positive_int_const ] ",
	"attr_dcl : readonly_opt YCTATTRIBUTE param_type_spec simple_declarator_list ",
	"except_dcl : YCTEXCEPTION yct_identifier { } ",
	"except_dcl : YCTEXCEPTION yct_identifier { member_list } ",
	"op_dcl : op_attribute_opt op_type_spec yct_identifier parameter_dcls raises_expr_opt context_expr_opt ",
	"op_attribute : YCTONEWAY ",
	"op_type_spec : param_type_spec ",
	"op_type_spec : YCTVOID ",
	"parameter_dcls : ( param_dcl_list ) ",
	"parameter_dcls : ( ) ",
	"param_dcl : param_attribute param_type_spec simple_declarator ",
	"param_attribute : YCTIN ",
	"param_attribute : YCTOUT ",
	"param_attribute : YCTINOUT ",
	"raises_expr : YCTRAISES ( scoped_name_list ) ",
	"context_expr : YCTCONTEXT ( string_literal_list ) ",
	"param_type_spec : base_type_spec ",
	"param_type_spec : string_type ",
	"param_type_spec : scoped_name ",
	"inheritance_spec_opt : inheritance_spec ",
	"inheritance_spec_opt : ",
	"definition_list : definition ",
	"definition_list : definition_list definition ",
	"export_list : export ",
	"export_list : export_list export ",
	"scoped_name_list : scoped_name ",
	"scoped_name_list : scoped_name_list , scoped_name ",
	"case_label_list : case_label ",
	"case_label_list : case_label_list case_label ",
	"enumerator_list : enumerator ",
	"enumerator_list : enumerator_list , enumerator ",
	"fixed_array_size_list : fixed_array_size ",
	"fixed_array_size_list : fixed_array_size_list fixed_array_size ",
	"readonly_opt : YCTREADONLY ",
	"readonly_opt : ",
	"simple_declarator_list : simple_declarator ",
	"simple_declarator_list : simple_declarator_list , simple_declarator ",
	"op_attribute_opt : op_attribute ",
	"op_attribute_opt : ",
	"raises_expr_opt : raises_expr ",
	"raises_expr_opt : ",
	"context_expr_opt : context_expr ",
	"context_expr_opt : ",
	"param_dcl_list : param_dcl ",
	"param_dcl_list : param_dcl_list , param_dcl ",
	"string_literal_list : string_literal ",
	"string_literal_list : string_literal_list , string_literal ",
	"string_literal : yct_string ",
	"string_literal : string_literal yct_string ",
	"pragma_dir : pragma_id ",
	"pragma_dir : pragma_prefix ",
	"pragma_dir : pragma_version ",
	"pragma_dir : pragma_dbattr ",
	"pragma_dir : pragma_dbcreat ",
	"pragma_dir : pragma_dblst ",
	"pragma_id : YCTPRAGMAID scoped_name yct_string ",
	"pragma_prefix : YCTPRAGMAPREFIX yct_string ",
	"pragma_version : YCTPRAGMAVERSION scoped_name yct_numeric_literal ",
	"pragma_dbattr : YCTPRAGMADBATTR scoped_name string_literal ",
	"prg_par_key : yct_identifier string_literal ",
	"prg_par_key_list : prg_par_key ",
	"prg_par_key_list : prg_par_key_list , prg_par_key ",
	"pragma_dbcreat : YCTPRAGMADBCREAT scoped_name prg_par_key_list ",
	"pragma_dblst : YCTPRAGMADBLST scoped_name "
};
#endif
#define PXNTBASE 72
#define PXTERMS 71
#define PXNONTS 102


static ub4 pxextk[(PXTERMS+MACHBITS)/MACHBITS];

static CONST_DATA sb2 pxrhsc[] = {
     0,     2,     1,     2,     2,     2,     2,     2,     2,     2,
     5,     1,     1,     3,     4,     2,     3,     1,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     5,     1,
     1,     1,     1,     1,     1,     1,     1,     3,     1,     3,
     1,     3,     1,     3,     3,     1,     3,     3,     1,     3,
     3,     3,     2,     1,     1,     1,     1,     1,     1,     3,
     1,     1,     1,     1,     1,     1,     1,     2,     1,     1,
     1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     2,     1,     1,     2,     2,
     1,     1,     1,     1,     5,     1,     2,     3,     9,     1,
     1,     1,     1,     1,     1,     2,     3,     3,     2,     2,
     5,     1,     6,     4,     4,     1,     2,     3,     4,     4,
     5,     6,     1,     1,     1,     3,     2,     3,     1,     1,
     1,     4,     4,     1,     1,     1,     1,     0,     1,     2,
     1,     2,     1,     3,     1,     2,     1,     3,     1,     2,
     1,     0,     1,     3,     1,     0,     1,     0,     1,     0,
     1,     3,     1,     3,     1,     2,     1,     1,     1,     1,
     1,     1,     3,     2,     3,     3,     2,     1,     3,     3,
     2
};
static CONST_DATA sb2 pxlhsn[] = {
     0,     0,    73,    73,     1,     1,     1,     1,     1,     1,
     2,     3,     3,     4,     4,     5,     6,    74,     7,     7,
     7,     7,     7,     7,     8,     9,     9,     9,    10,    11,
    11,    11,    11,    11,    11,    12,    13,    13,    14,    14,
    15,    15,    16,    16,    16,    17,    17,    17,    18,    18,
    18,    18,    19,    19,    89,    89,    89,    20,    20,    20,
    21,    21,    21,    21,    90,    90,    22,    23,    23,    23,
    23,    24,    25,    25,    26,    26,    26,    27,    27,    27,
    27,    27,    27,    27,    28,    28,    29,    29,    29,    75,
    75,    30,    30,    96,    31,    72,    91,    91,    32,    32,
    33,    33,    33,    97,    98,    99,    34,    34,   100,   101,
    35,    36,    37,    38,    39,    76,    76,    40,    41,    42,
    42,    42,    42,    42,    77,    77,    43,    44,    44,    45,
    46,    63,    47,    47,    48,    48,    49,    50,    51,    52,
    52,    53,    92,    54,    54,    55,    55,    56,    93,    93,
    93,    57,    58,    59,    59,    59,    60,    60,    78,    78,
    79,    79,    80,    80,    81,    81,    82,    82,    83,    83,
    94,    94,    84,    84,    95,    95,    61,    61,    62,    62,
    85,    85,    86,    86,    87,    87,    64,    64,    64,    64,
    64,    64,    65,    66,    67,    68,    71,    88,    88,    69,
    70
};
static pxtokn * (*pxlex[])( dvoid *, sword, ... ) = {
	ycprLex,
};
static void (*pxred[])( pxnmach *, ub2, dvoid * ) = {
	px_ycos,
};
static CONST_DATA sb2 pxroff[] = { 0 };
static CONST_DATA sb2 pxgram[] = { 0 };
static CONST_DATA sb2 pxntgr[] = { 0 };
static CONST_DATA sb2 pxdefact[] = {
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     2,     0,     0,    11,    12,
     0,     0,     0,    68,    69,    70,     0,     0,   186,   187,
   188,   189,   190,   191,     0,    25,   111,   110,    97,    96,
   103,   104,   135,     0,     0,    34,     0,    29,    98,    99,
    30,    31,    33,    32,   100,   101,   102,   106,   107,     0,
     0,    15,     0,     0,   113,   112,     0,    95,    76,    67,
     0,    72,    74,    75,    73,    78,    79,    80,    81,    82,
    86,    87,    88,    84,    85,    83,    77,     0,     0,   193,
     0,     0,     0,   200,     8,     7,   175,     5,     4,     6,
     9,     1,     3,   105,     0,   108,   109,    26,     0,     0,
     0,     0,     0,   156,    16,     0,     0,     0,    93,    89,
    92,    94,    71,    91,     0,   192,   194,   184,   195,     0,
   197,   199,   142,   170,    13,   160,     0,     0,     0,     0,
     0,     0,     0,   175,   174,     0,     0,    60,    62,    65,
    64,    55,    54,    56,     0,    57,    66,    35,    36,    38,
    40,    42,    45,    48,    53,    58,     0,    61,     0,    63,
    27,     0,   131,   166,     0,   139,     0,   115,     0,   162,
    24,   158,     0,     0,     0,     0,   168,   136,     0,     0,
   185,   196,     0,    19,    18,    21,    20,    22,    23,    14,
   161,     0,   144,   155,   153,   154,     0,   143,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   134,
    52,    28,   130,     0,     0,   140,   116,     0,    10,   159,
   114,     0,   133,     0,   169,    90,   123,   119,   120,   121,
     0,   122,   198,     0,     0,    59,    37,    39,    41,    44,
    43,    46,    47,    49,    50,    51,   167,   117,   163,     0,
   137,     0,    93,   138,   172,     0,   177,   132,     0,     0,
   148,   150,   149,   146,   180,     0,     0,     0,   176,   179,
     0,     0,   124,   164,     0,     0,   173,   145,     0,     0,
     0,     0,   178,   141,     0,   128,   118,   125,     0,   165,
     0,   181,   147,     0,     0,   127,   129,   126,   151,     0,
   182,   152,     0,   183
};
static CONST_DATA sb2 pxdefgoto[] = {
    -1,    15,    16,    17,    18,    19,    20,   135,   113,   155,
    21,    46,   156,   157,   158,   159,   160,   161,   162,   163,
   164,   165,   166,    22,    69,   176,    71,    72,    73,    74,
   119,   120,    75,    48,    49,    76,    77,    78,    79,    23,
   177,    24,   240,   282,   283,   300,    25,    83,    84,   121,
   186,   138,    26,   140,   206,   266,   274,   278,   292,   207,
   114,   279,   293,   173,    27,    28,    29,    30,    31,    32,
    33,   130,    85,    34,   142,   122,   178,   284,   182,   143,
   180,   285,   174,   187,   263,   275,   309,   167,   131,   168,
   169,    86,   144,   276,   145,   146,   123,    54,    55,    56,
    57,    58
};
static CONST_DATA sb2 pxpact[] = {
   550,   488,    49,    71,    84,    88,    91,   327,   114,    17,
   121,    17,    17,    17,    17,-32768,    74,    89,-32768,-32768,
   102,   104,   107,-32768,-32768,-32768,   109,   116,-32768,-32768,
-32768,-32768,-32768,-32768,   398,-32768,-32768,-32768,-32768,-32768,
   141,-32768,    97,    32,   163,   122,   166,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   131,
   132,    51,   134,   135,-32768,-32768,   103,-32768,   122,-32768,
   170,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   155,    33,-32768,
    45,    42,    28,   122,-32768,-32768,   337,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    19,-32768,-32768,-32768,   187,   136,
   189,   119,    17,-32768,-32768,   550,   327,   442,   123,-32768,
-32768,-32768,   127,-32768,   133,-32768,-32768,-32768,   190,   193,
-32768,   128,-32768,-32768,-32768,-32768,   150,   156,   157,   159,
   161,   167,   153,   360,-32768,   207,   445,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    19,   122,-32768,   160,   162,   164,
    12,    10,    36,-32768,-32768,-32768,   154,   190,    23,-32768,
-32768,    19,-32768,-32768,   -11,-32768,   170,-32768,   202,   122,
   169,-32768,   515,   255,    37,    19,-32768,   123,   170,   130,
-32768,   190,   221,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   485,-32768,   122,-32768,-32768,   226,-32768,   165,    19,
    19,    19,    19,    19,    19,    19,    19,    19,    19,-32768,
-32768,-32768,-32768,   189,    -7,-32768,-32768,    17,-32768,-32768,
-32768,    19,-32768,   172,-32768,-32768,   122,-32768,-32768,-32768,
   171,-32768,-32768,   227,   173,-32768,   162,   164,    12,    10,
    10,    36,    36,-32768,-32768,-32768,-32768,-32768,   122,   175,
-32768,   194,-32768,   174,-32768,    26,   217,-32768,    58,   227,
-32768,-32768,-32768,-32768,-32768,    52,   485,   182,-32768,   235,
    19,   195,-32768,-32768,    22,   291,-32768,-32768,    30,   227,
    17,   186,-32768,-32768,   198,-32768,-32768,-32768,   170,-32768,
   203,-32768,-32768,    54,   193,-32768,-32768,-32768,-32768,    57,
   190,-32768,   193,   190
};
static CONST_DATA sb2 pxpgoto[] = {
-32768,   -20,-32768,-32768,-32768,-32768,-32768,   110,-32768,    -1,
   -66,-32768,  -137,-32768,    47,    50,    46,   -81,   -78,  -116,
    93,-32768,  -142,   -63,-32768,    -6,   142,  -128,-32768,-32768,
  -169,-32768,     8,-32768,-32768,    14,    15,-32768,-32768,    -3,
  -119,    -2,-32768,   -21,   -18,-32768,    -4,-32768,     1,-32768,
    78,-32768,   -61,-32768,-32768,-32768,   -19,-32768,-32768,  -180,
-32768,-32768,-32768,    53,   -58,-32768,-32768,-32768,-32768,-32768,
-32768,    76,-32768,-32768,-32768,    96,   180,-32768,-32768,-32768,
   -17,-32768,-32768,-32768,-32768,-32768,-32768,   -84,-32768,-32768,
-32768,   289,-32768,-32768,-32768,-32768,  -203,-32768,-32768,-32768,
-32768,-32768
};
static ub2   px_tablen = 596;
static CONST_DATA sb2 pxatabl[] = {
    45,    70,    52,    82,    80,    81,    68,   128,    88,    47,
    90,    91,    92,    93,   102,    50,    51,   208,   204,   235,
    35,   243,    35,   147,   148,   127,    35,   147,   148,   127,
   136,   129,   280,   137,   221,   139,   281,   149,   141,   125,
   264,   149,   222,   233,   257,   191,   270,   271,   127,   126,
   270,   271,    59,   272,   150,   105,   223,   272,   150,   226,
   188,   212,   213,   106,   226,    44,   286,    44,   280,   214,
   215,    44,   281,   204,    60,   296,   108,   136,   151,   152,
   137,   108,   139,   153,   154,   141,   302,    61,   154,   259,
   108,    62,   273,   108,    63,   181,   289,   216,   217,   218,
   253,   254,   255,  -157,   231,   112,   232,    82,    80,    81,
    68,   179,    82,    80,    81,    68,    68,    87,   287,   288,
   308,   227,    35,   311,   312,    94,    64,    89,    36,   306,
    37,   249,   250,    35,    38,     2,   251,   252,    39,    36,
    95,    37,    40,   294,    65,   203,     2,   205,   204,    66,
    41,    42,     6,    40,    96,    97,     8,    43,    98,    67,
    99,    41,   229,   100,   103,   104,   107,    44,    43,   109,
   108,   117,   175,   118,    82,    80,    81,    68,    44,    82,
    80,    81,    68,   110,   111,   241,   115,   116,   236,   124,
   170,   171,   172,   185,   188,   192,   190,   237,   189,   127,
   203,   193,   205,   238,   239,    35,   199,   194,   195,    64,
   196,    36,   197,    37,   198,   201,   209,    38,     2,   210,
   310,    39,   211,   219,   129,    40,   258,    65,   313,   244,
   262,   245,    66,    41,    42,     6,   227,   261,   265,     8,
    43,   269,    67,   260,   267,   277,   268,   290,   291,   295,
    44,   304,   305,   200,   307,   225,   246,   248,    35,   184,
   247,   220,    64,   297,    36,   234,    37,   299,   242,   301,
    38,     2,   224,   303,    39,   203,   256,   205,    40,   298,
    65,    82,    80,    81,    68,    66,    41,    42,     6,   179,
    53,     0,     8,    43,    35,    67,   183,     0,    64,     0,
    36,   280,    37,    44,     0,   281,    38,     2,   230,     0,
    39,     0,     0,     0,    40,     0,    65,     0,     0,     0,
     0,    66,    41,    42,     6,     0,     0,     0,     8,    43,
    35,    67,     0,     0,    64,     0,    36,     0,    37,    44,
     0,     0,    38,     2,     0,  -171,    39,     0,     0,     1,
    40,     0,    65,     2,     3,     0,     0,    66,    41,    42,
     6,     0,     0,   132,     8,    43,   133,    67,  -171,     0,
     6,     0,     1,     7,     8,    44,     2,     3,     9,    10,
    11,    12,    13,    14,     0,     0,   132,     0,     0,   133,
   134,     0,     0,     6,     0,     0,     7,     8,     0,   101,
     0,     9,    10,    11,    12,    13,    14,     0,     0,     0,
     1,     0,     0,   -17,     2,     3,     0,     0,     0,     0,
     4,     0,     5,     0,     0,     0,     0,     0,     0,     0,
     0,     6,     0,     0,     7,     8,     0,     0,     0,     9,
    10,    11,    12,    13,    14,    35,     0,     0,    35,    64,
     0,    36,    64,    37,    36,     0,    37,    38,     0,     0,
    38,    39,     0,     0,    39,    40,     0,    65,    40,     0,
    65,     0,    66,    41,    42,     0,    41,    42,     0,     0,
    43,     0,    67,    43,   202,    67,     0,     0,    35,     0,
    44,    35,    64,    44,    36,     0,    37,    36,     0,    37,
    38,     0,     0,    38,    39,     0,     0,    39,    40,     0,
    65,    40,     0,     0,     0,     0,    41,    42,     0,    41,
    42,     0,     0,    43,     0,    67,    43,     1,     0,     0,
     0,     2,     3,    44,     0,     0,    44,     4,     0,     5,
     0,     0,     0,     0,     0,     0,     0,     0,     6,     0,
     0,     7,     8,     0,     0,     0,     9,    10,    11,    12,
    13,    14,     1,     0,     0,     0,     2,     3,   228,     0,
     0,     0,     4,     0,     5,     0,     0,     0,     0,     0,
     0,     0,     0,     6,     0,     0,     7,     8,     0,     0,
     0,     9,    10,    11,    12,    13,    14
};
static CONST_DATA sb2 pxachek[] = {
     1,     7,     1,     7,     7,     7,     7,    91,     9,     1,
    11,    12,    13,    14,    34,     1,     1,   154,   146,   188,
     3,   201,     3,     4,     5,     6,     3,     4,     5,     6,
    96,     3,    10,    96,   171,    96,    14,    18,    96,     6,
   243,    18,    53,   185,    51,   129,    20,    21,     6,     4,
    20,    21,     3,    27,    35,    23,    67,    27,    35,   178,
    67,    49,    50,    31,   183,    48,   269,    48,    10,    59,
    60,    48,    14,   201,     3,    53,    48,   143,    59,    60,
   143,    48,   143,    64,    65,   143,   289,     3,    65,   231,
    48,     3,    66,    48,     3,   115,   276,    61,    62,    63,
   216,   217,   218,    52,    67,    54,    69,   111,   111,   111,
   111,   112,   116,   116,   116,   116,   117,     3,    66,    67,
    66,    67,     3,    66,    67,    51,     7,     6,     9,   298,
    11,   212,   213,     3,    15,    16,   214,   215,    19,     9,
    51,    11,    23,   280,    25,   146,    16,   146,   276,    30,
    31,    32,    33,    23,    52,    51,    37,    38,    51,    40,
    51,    31,   182,    47,    23,    68,     3,    48,    38,     3,
    48,    68,    53,     3,   178,   178,   178,   178,    48,   183,
   183,   183,   183,    52,    52,   189,    52,    52,   189,    34,
     3,    55,     3,    70,    67,    67,     6,   189,    65,     6,
   201,    51,   201,   189,   189,     3,    53,    51,    51,     7,
    51,     9,    51,    11,    47,     8,    56,    15,    16,    57,
   304,    19,    58,    69,     3,    23,   227,    25,   312,     3,
     3,    66,    30,    31,    32,    33,    67,    66,    65,    37,
    38,    67,    40,    71,    69,    28,    52,    65,    13,    54,
    48,    65,    54,   143,    51,    53,   209,   211,     3,   117,
   210,   168,     7,   284,     9,   187,    11,   285,   192,   288,
    15,    16,   176,   290,    19,   276,   223,   276,    23,   285,
    25,   285,   285,   285,   285,    30,    31,    32,    33,   290,
     1,    -1,    37,    38,     3,    40,   116,    -1,     7,    -1,
     9,    10,    11,    48,    -1,    14,    15,    16,    53,    -1,
    19,    -1,    -1,    -1,    23,    -1,    25,    -1,    -1,    -1,
    -1,    30,    31,    32,    33,    -1,    -1,    -1,    37,    38,
     3,    40,    -1,    -1,     7,    -1,     9,    -1,    11,    48,
    -1,    -1,    15,    16,    -1,     8,    19,    -1,    -1,    12,
    23,    -1,    25,    16,    17,    -1,    -1,    30,    31,    32,
    33,    -1,    -1,    26,    37,    38,    29,    40,     8,    -1,
    33,    -1,    12,    36,    37,    48,    16,    17,    41,    42,
    43,    44,    45,    46,    -1,    -1,    26,    -1,    -1,    29,
    53,    -1,    -1,    33,    -1,    -1,    36,    37,    -1,     1,
    -1,    41,    42,    43,    44,    45,    46,    -1,    -1,    -1,
    12,    -1,    -1,    53,    16,    17,    -1,    -1,    -1,    -1,
    22,    -1,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    33,    -1,    -1,    36,    37,    -1,    -1,    -1,    41,
    42,    43,    44,    45,    46,     3,    -1,    -1,     3,     7,
    -1,     9,     7,    11,     9,    -1,    11,    15,    -1,    -1,
    15,    19,    -1,    -1,    19,    23,    -1,    25,    23,    -1,
    25,    -1,    30,    31,    32,    -1,    31,    32,    -1,    -1,
    38,    -1,    40,    38,    39,    40,    -1,    -1,     3,    -1,
    48,     3,     7,    48,     9,    -1,    11,     9,    -1,    11,
    15,    -1,    -1,    15,    19,    -1,    -1,    19,    23,    -1,
    25,    23,    -1,    -1,    -1,    -1,    31,    32,    -1,    31,
    32,    -1,    -1,    38,    -1,    40,    38,    12,    -1,    -1,
    -1,    16,    17,    48,    -1,    -1,    48,    22,    -1,    24,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,
    -1,    36,    37,    -1,    -1,    -1,    41,    42,    43,    44,
    45,    46,    12,    -1,    -1,    -1,    16,    17,    53,    -1,
    -1,    -1,    22,    -1,    24,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    33,    -1,    -1,    36,    37,    -1,    -1,
    -1,    41,    42,    43,    44,    45,    46
};
#define PXLGETTOK (*mach->pxgett)

/*
 * This procedure creates an LALR(1) parsing engine. The debug flag is set
 * when debugging messages should be displayed.
 */
void ycopxcrt(
     int       debug,                                      /* debugging flag */
     ub2       acctok,                              /* accepting nonterminal */
     void    *cs,
     sb2        idval,
     pxtokn* (*clex)(void *, int, ...),
     int     (*kywd)(void *, sb2, pxtokn * ),             /* callback for kw */
     pxnmach   *newmach,
     char      *fnam)
{
  /* Initialize SLAX LI global storage area */

  newmach->debug = debug;
  newmach->ngrams = PXNGRAMS;
  newmach->partop = -1;
  newmach->status = PXMNORMAL;
  newmach->accept = (sb2) acctok;
  newmach->fnderr = 0;
  newmach->pxtklen = (PXTERMS + MACHBITS) / MACHBITS;
  newmach->valsize = sizeof(PXVALTYPE);
  newmach->macsize = sizeof(pxnmach);
  newmach->frmsize = sizeof(pxstk);
  newmach->mnssize = sizeof(pxnmach) - sizeof(newmach->parse);
  newmach->pxnonts = PXNONTS;
  newmach->pxterms = PXTERMS;
  newmach->pxextk_ = pxextk;
  newmach->pxtoid_ = idval;
  newmach->pxdfact_  = pxdefact;
  newmach->pxdfgoto_ = pxdefgoto;
  newmach->pxpact_   = pxpact;
  newmach->pxpgoto_  = pxpgoto;
  newmach->pxatabl_  = pxatabl;
  newmach->pxtablen  = px_tablen;
  newmach->pxchek_ = pxachek;
  newmach->pxlhsn_ = pxlhsn;
  newmach->pxrhsc_ = pxrhsc;
  newmach->pxroff_ = pxroff;
  newmach->pxgram_ = pxgram;
  newmach->pxtmap_ = pxtmap;
  newmach->pxtkno_ = pxtkno;
  newmach->pxntgr_ = pxntgr;
#ifdef NOT_YET
  newmach->pxsubs_ = pxsubs;
  newmach->pxsytk_ = pxsytk;
  newmach->pxcorl_ = pxcorl;
#endif
  newmach->pxsubs_ = (sb2 *)0;
  newmach->pxsytk_ = (sb2 *)0;
  newmach->pxcorl_ = (sb2 *)0;
#ifdef PXDEBUG
  newmach->pxdbpd_ = pxdbpd;
  newmach->pxdbtm_ = pxdbtm;
#endif
  newmach->pxred_ = pxred;
  newmach->pxredc_ = pxred[0];
  newmach->pxlex_ = pxlex;
  newmach->pxkywd_ = kywd;
  
  newmach->pxgett  = clex;

  pxnspus(newmach, 0, 0, (PXVALTYPE *) 0, 1, 1, fnam);
}

/******************************************************************************
*                                  Public                                     *
******************************************************************************/

/*
 * This is the entry point into the parser. It creates the lalr machine.
 * It takes a lexical analyzer as input. This analyzer must return objects
 * of type token. The debugging flag is set when debug information is
 * desired. A pointer to the error recovery procedure is also required.
 * Finally, a compiler state structure is required. However, it can be
 * a null pointer. It returns a 1 for normal exit and 0 for an unrecoverable
 * error. Below, DOLLAR_A must be replaced by the name of the grammar.
 */

void ycosyn(
     void    *cs,                                          /* compiler state */
     int      debug,                                       /* debugging flag */
     pxtokn* (*calledlex)(void *, int, ...),
     void * (*allocmem)(size_t),
     void    (*freemem)(void *),
     int    (*kywd)(void *, sb2, pxtokn *),               /* callback for kw */
     sb1       *err,                                    /* return error code */
     sb2        idval)                   /* value of this grammar's id token */
{
        pxnmach *mach;                                   /* the lalr machine */

	pxtokn *tok;
	char    stat[PXMAXERRLEN];

  /* Allocate memory for the lrmachine, and both message files. */
  mach   = (pxnmach *)(*allocmem)(sizeof(pxnmach));
	
  /* Create the machine. Accepting nonterminal is nonterminal 0. */

  ycopxcrt(debug, 0, cs, idval, calledlex, kywd, mach, (char *) "noname");

  mach->fnderr = *err = 0;                   /* initialize to no error found */

  /*
   * PXGETTOK is a macro defined to be a procedure name and is defined in
   * pxtokn.h file by SLAX.
   */

  tok = PXLGETTOK(cs, PXGETNEXT);

  while (TRUE)
    {
      pxnmove(mach, tok, cs, stat);
      switch (pxnmstt(mach))
	{
	case PXMACCEPT:
	  *err = mach->fnderr;
	  goto bye;
	case PXMERROR:
	  /*
	   * Pxrcov is a procedure that does error recovery. 
	   */
	  mach->fnderr = 1;
	  if (pxnrcov(mach, tok, cs, (char *) 0) == TRUE)
	    {
	      if (mach->status == PXMACCEPT)
		{
		  *err = mach->fnderr;
		  goto bye;
		}
	      mach->status = PXMNORMAL;
	      break;
	    }
	  else
  	    {
	      *err = mach->fnderr;
	      PXLGETTOK(cs, PXFREETOK, tok);
	      goto bye;
	    }
	case PXFATAL:
	  *err = mach->fnderr;
	  PXLGETTOK(cs, PXFREETOK, tok);
	  goto bye;
	case PXOVERFL:

	  PXLGETTOK(cs, PXERRORMSG, "Parser stack overflow",
		    pxtlin(tok), pxtcol(tok), pxtfil(tok));

	  PXLGETTOK(cs, PXFREETOK, tok);
	  *err = mach->fnderr;
	  goto bye;
	default:
	  PXLGETTOK(cs, PXFREETOK, tok);
	  break;
	}
      tok = PXLGETTOK(cs, PXGETNEXT);
    }
 bye:
	(*freemem)((void *)mach);
}
