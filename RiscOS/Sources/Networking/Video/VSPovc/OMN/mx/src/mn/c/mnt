/* Copyright (c) 1994 by Oracle Corporation.  All Rights Reserved.
 *
 * mnt.c - OMN Transport Layer
 *
 * REVISIONS
 * jolkin    06/22/94  Modified mntSend() prototype
 * jolkin    05/12/94  Route time-to-live
 * jolkin    05/11/94  Destroy endpoint on disconnect
 * jolkin    04/27/94  Altered messages to use user buffers
 * jolkin    04/20/94  Creation of Version 2.0
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MZN_ORACLE
#include <mzn.h>
#endif
#ifndef MNI_ORACLE
#include <mni.h>
#endif

/*
 * mntPortHash - compute hash key for port hash table
 */
ub4 mntPortHash(ub2 prtno, mna *peer)
{
  ub4 key, i;

  for (key = i = 0; i < 8; i++)
    key += peer->bits[i];

  key += prtno;
  return key % MNPORTROWS;
}

/*
 * mntInsertPort - insert port into hash table
 */
void mntInsertPort(mnctx *ctx, mnp *port)
{
  ub4 key;

  key = mntPortHash(mnaPortNum(&port->me), &port->peer);
  if (ctx->ports[key])
    ctx->ports[key]->pport = port;

  port->nport = ctx->ports[key];
  ctx->ports[key] = port;
}

/*
 * mntRemovePort - remove port from hash table
 */
void mntRemovePort(mnctx *ctx, mnp *port)
{
  ub4 key;

  if (port->nport)
    port->nport->pport = port->pport;

  if (port->pport)
    port->pport->nport = port->nport;
  else
    {
      key = mntPortHash(mnaPortNum(&port->me), &port->peer);
      ctx->ports[key] = port->nport;
    }
}

/*
 * mntFindPort - locate port in port hash table
 *   Ports are uniquely identified by local port number and peer address.
 *   If not connected, then the peer address may be all zeroes.
 */
mnp *mntFindPort(mnctx *ctx, mna *me, mna *peer)
{
  ub2  prtno;
  ub4  key;
  mnp *scp;
  mna  claddr;

  mnaClear(&claddr);

  if (mnaWellKnown(me) && mnaEq(&claddr, peer))
    return mnaFind(ctx, me);
  else
    prtno = mnaPortNum(me);

  key = mntPortHash(prtno, peer);

  for (scp = ctx->ports[key]; scp; scp = scp->nport)
    if (mnaPortNum(&scp->me) == prtno && mnaEq(&scp->peer, peer))
      break;

  return scp;
}

/*
 * mntIn - entrypoint into the transport layer
 *   When a packet is received and destined locally, it is passed up to
 *   the transport layer through this routine.
 */
void mntIn(mnctx *ctx, mnnpkt *pkt)
{
  mnnhdr *phdr;
  mnp    *port;
  mna     claddr;
  ub4     ocptyp;

  /* convert header to host format */
  phdr = (mnnhdr *) &pkt[1];

  /* locate port; first try to match exactly and then just by port number */
  port = mntFindPort(ctx, &phdr->dst, &phdr->src);
  if (!port)
    {
      mnaClear(&claddr);
      port = mntFindPort(ctx, &phdr->dst, &claddr);
    }

  if (!port)
    ocptyp = MNOTYP_DESTNOTREACH;
  else if (port->proto != phdr->proto && port->proto != MNPROTO_BLOB)
    ocptyp = MNOTYP_DESTNOTVALID;
  else if (phdr->flags & MNNFLG_ACK)
    ocptyp = mntInAck(ctx, pkt, port);
  else
    switch (port->rstate)
      {
      case MNSTS_CLOSED:
	ocptyp = MNOTYP_RESET;
	break;
      case MNSTS_CONNECT:
      case MNSTS_LISTEN:
      case MNSTS_TIMEWAIT:
	ocptyp = mntInOpen(ctx, pkt, port);
	break;
      case MNSTS_ESTABLISHED:
      case MNSTS_FINISH:
      case MNSTS_DISCONNECT:                 /* almost certainly a duplicate */
	mntInData(ctx, pkt, port);
	ocptyp = 0;
	break;
      default:
	mnPrint(MNLERROR, "unexpected receive state %ld", port->rstate);
	mnmFree(ctx, (dvoid *) pkt);
	ocptyp = 0;
	break;
      }

  if (ocptyp)
    {
      DISCARD mnoSend(ctx, ocptyp, &phdr->src, &phdr->dst);
      mnmFree(ctx, (dvoid *) pkt);
    }
}

/*
 * mntCreatePort - create and insert a port
 */
mnp *mntCreatePort(mnctx *ctx, mnp *port, mna *peer, mnrte *rte)
{
  mna    addr;
  mnp   *cport;
  mnnio *nio;

  cport = (mnp *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnp));
  DISCARD memset(cport, 0, sizeof(mnp));

  cport->proto = port->proto;
  cport->flags = port->flags;

  /* locate a route back to the peer and establish the complete
   * source address
   */
  mnaCopy(&cport->peer, peer);
  cport->rte = rte;
  cport->rte->refcnt++;

  if (mnaWellKnown(&port->me))
    mnaCopy(&cport->me, &port->me);
  else
    {
      if (cport->rte->nio->flags & MNNFLG_RECV)
	nio = cport->rte->nio;
      else
	nio = ctx->rnio;

      mnnSubnet(nio, &addr);
      mnaNetCopy(&cport->me, &addr);
      mnaSetPortNum(&cport->me, mnaPortNum(&port->me));
    }

  cport->sstate = MNSTS_IDLE;
  cport->rstate = MNSTS_TIMEWAIT;
  cport->rexmt = MNTMINREXMT;
  cport->swind = ctx->mwind;
  cport->nrseq = cport->naseq = cport->fsseq = ctx->iss;
  ctx->iss -= 65533;
#ifdef USE_YSLST
  cport->accepts = ysLstCreate();
#endif

  mntInsertPort(ctx, cport);
  return cport;
}

void mntBlowPort(dvoid *pp, sb4 val)
{
  mnmFree(mnGlbCtx, pp);
}

/*
 * mntDestroyPort - destroy a port
 *   mntDestroyPort() unequivocally destroys a port.  It throws all packets
 *   that are queued up, inbound and outbound; sets all events, sets all
 *   pending events, and ultimately frees the port.
 */
void mntDestroyPort(mnctx *ctx, mnp *port)
{
  mnnpkt *pkt;
  mntse  *se;
  mnp    *acc, *parport, *prp, *scp;
  mntre  *re;
  mna     claddr;

  /* This port may be destroyed by a communication failure during sending,
   * and yet may still be sitting on an accept queue.  Thus, we need to
   * search for it on the accept queue and if there, remove it.  Naturally,
   * this can apply only to a port that is not itself a master port.  A
   * master port is one which has no peer.
   */
  mnaClear(&claddr);
  if (!mnaEq(&port->peer, &claddr))
    {
      /* search for master port */
      parport = mntFindPort(ctx, &port->me, &claddr);
      if (parport)
	{
	  /* search accept queue */
#ifdef USE_YSLST
	  {
	    ysle *le;

	    for (le = ysLstHead(parport->accepts);
		 le && port != (mnp *) ysLstVal(le);
		 le = ysLstNext(le)) ;

	    if (le)
	      ysLstRem(parport->accepts, le);
	  }
#else
	  for (prp = (mnp *) 0, scp = (mnp *) parport->accepts.head;
	       scp && scp != port;
	       prp = scp, scp = scp->next) ;

	  if (scp)
	    {
	      /* now remove from queue */
	      if (prp)
		{
		  prp->next = scp->next;
		  if (!prp->next)
		    parport->accepts.tail = (mnqe *) prp;
		}
	      else
		mnqDeq(&parport->accepts);
	    }
#endif
	}
    }

  /* remove the port from the hash table */
  if (mnaWellKnown(&port->me) && mnaEq(&port->peer, &claddr))
    mnaUnbind(ctx, port);
  else
    mntRemovePort(ctx, port);

  if (port->rte)
    port->rte->refcnt--;

  /* unbind the name if there is one */
  if (port->name)
    {
      DISCARD mznUnbind(port);
      port->name = (char *) 0;
    }

  if (port->rxsem)
    {
      mnSemFree(port->rxsem);
      port->rxsem = (mnsem *) 0;
    }

  if (port->clnsem)
    mnSemFree(port->clnsem);

  if (port->unpkt)
    mnPrint(MNLWARN, "throwing away unacked packets");

  while (port->unpkt)
    {
      pkt = port->unpkt;
      port->unpkt = port->unpkt->next;
      mnmFree(ctx, (dvoid *) pkt);
    }

  while (se = (mntse *) mnqDeq(&port->se))
    {
      if (mneGet(ctx, se->sem) == MNSTS_UNKNOWN)
	mneSet(ctx, se->sem, MNERR_DISCONN, TRUE);
      else
	mneUnlatch(ctx, se->sem);

      mnmFree(ctx, (dvoid *) se);
    }

  if (port->rs)
    mnPrint(MNLWARN, "throwing away received packets");

  while (port->rs)
    {
      pkt = port->rs;
      port->rs = port->rs->next;
      mnmFree(ctx, (dvoid *) pkt);
    }

#ifdef USE_YSLST
  while (acc = (mnp *) ysLstDeq(port->accepts))
    mntDestroyPort(ctx, acc);
#else
  while (acc = (mnp *) mnqDeq(&port->accepts))
    mntDestroyPort(ctx, acc);
#endif

  while (re = (mntre *) mnqDeq(&port->re))
    {
      if (mneGet(ctx, re->sem) == MNSTS_UNKNOWN)
	mneSet(ctx, re->sem, MNERR_DISCONN, TRUE);
      else
	mneUnlatch(ctx, re->sem);

      if (re->origbv)
	mnmFree(ctx, (dvoid *) re->origbv);
      mnmFree(ctx, (dvoid *) re);
    }

  /* mnmFree(ctx, (dvoid *) port); */
#ifdef USE_YSLST
  ysLstDestroy(port->accepts, (ysmff) 0);
#endif
  mnTimer(30000, mntBlowPort, (dvoid *) port);
}

/*
 * mntCleanSetup - setup the timer for the clean-up routine
 *  Whether or not a timer is already set up, we still mark the port
 *  to indicate the last time this routine was called.
 */
void mntCleanSetup(mnctx *ctx, mnp *port, ub4 delay)
{
  if (!port->clnsem)
    {
      /* we set this up manually so the semaphore isn't freed when the
       * handler fires
       */
      port->clnsem = mnSemAlloc((dvoid *) port);
      mneSemSetHandler(ctx, port->clnsem, mntClean, FALSE);
      mneTimer(ctx, delay, port->clnsem);
    }

  port->rtime = (sb4) smnClock();
}

/*
 * mntClean - clean-up routine
 *   mntClean() is an asynchronous handler that is triggered on ports
 *   that may need to be cleaned up.  Ports that are in a TIMEWAIT
 *   and whose send state is idle or error can be cleaned up.
 *   Message ports that are established in receive mode for too long
 *   a period of time are forcibly broken (since the sender must
 *   complete the sending of a message in a reasonable amount of
 *   time, or he will keep retransmitting until he succeeds).
 */
void mntClean(dvoid *pp, /*ARGUSED*/ sb4 val)
{
  mnctx *ctx;
  mnp   *port;
  sb4    current, diff;
  ub4    tm;

  ctx = mnGlbCtx;
  port = (mnp *) pp;

  mnSemFree(port->clnsem);
  port->clnsem = (mnsem *) 0;

  port->resetseen = FALSE;

  current = (sb4) smnClock();
  diff = smnModSub(current, port->rtime);

  if (port->rstate == MNSTS_TIMEWAIT &&
      (port->sstate == MNSTS_IDLE || port->sstate < 0))
    {
      if (diff >= MNTPRTLIFE)
	{
	  mntDestroyPort(ctx, port);
	  return;
	}
      else
	tm = MNTPRTLIFE - diff;
    }
  else if (port->proto == MNPROTO_MESSAGE &&
	   (port->rstate == MNSTS_ESTABLISHED || port->rstate == MNSTS_FINISH))
    {
      if (diff > MNTRCVLIFE)
	{
	  mntAbort(ctx, port, MNERR_BROKEN);
	  return;
	}
      else
	tm = MNTRCVLIFE - diff;
    }
  else
    return;

  /* set up a new clean-up semaphore if necessary */
  port->clnsem = mnSemAlloc((dvoid *) port);
  mneSemSetHandler(ctx, port->clnsem, mntClean, FALSE);
  mneTimer(ctx, tm, port->clnsem);
}

/*
 * mnBind - bind a well-known address to a port
 *   This routine is really only for use by Media Net servers that need
 *   well-known addresses.
 */
sb4 mnBind(mnp *port, mna *addr)
{
  mnctx *ctx;
  sb4    sts;

  if (port->rstate != MNSTS_CLOSED && port->rstate != MNSTS_LISTEN)
    return MNERR_BADPARAM;

  ctx = mnGlbCtx;
  if (mnaWellKnown(addr))
    {
      if (sts = mnaBind(ctx, addr, port, TRUE))
	return sts;
    }

  /* remove the port out of the regular hash table under its old address. */
  mntRemovePort(ctx, port);
  mnaCopy(&port->me, addr);

  if (!mnaWellKnown(addr))
    mntInsertPort(ctx, port);

  return 0;
}

/*
 * mnOpen - open a port
 */
mnp *mnOpen(ub4 proto)
{
  mnctx *ctx;
  mna    claddr, meaddr;
  ub2    prtno;
  mnp   *port;

  ctx = mnGlbCtx;

  if (proto >= MNPROTO_MAX)
    {
      mnSetLastError(ctx, MNERR_BADPARAM);
      return (mnp *) 0;
    }

  mnaClear(&claddr);
  mnaClear(&meaddr);

  /* select an unused port number */
  do
    {
      prtno = ctx->nprtno++;
      if (!ctx->nprtno)
	ctx->nprtno++;
      mnaSetPortNum(&meaddr, prtno);
    } while (mntFindPort(ctx, &meaddr, &claddr));

  /* create and initialize the port descriptor */
  port = (mnp *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnp));
  DISCARD memset(port, 0, sizeof(mnp));

  port->proto = proto;
  mnaCopy(&port->me, &meaddr);

  port->sstate = MNSTS_IDLE;
  port->rstate = (proto == MNPROTO_MESSAGE ? MNSTS_LISTEN : MNSTS_CLOSED);
  port->rexmt = MNTMINREXMT;
  port->swind = ctx->mwind;
  port->nrseq = port->naseq = port->fsseq = ctx->iss;
  ctx->iss -= 65533;
#ifdef USE_YSLST
  port->accepts = ysLstCreate();
#endif

  mntInsertPort(ctx, port);
  return port;
}

/*
 * mnClose - close an open port
 */
sb4 mnClose(mnp *port)
{
  mnctx *ctx;
  mnsem *sem;
  sb4    sts;

  ctx = mnGlbCtx;
  DISCARD mnIdle();
  sts = 0;

  switch (port->rstate)
    {
    case MNSTS_CLOSED:
    case MNSTS_CONNECT:
    case MNSTS_LISTEN:
      mntDestroyPort(ctx, port);
      break;
    case MNSTS_ESTABLISHED:                                  /* streams only */
      sem = mneMakeSem(ctx, (mnHandler) 0, (dvoid *) 0);
      DISCARD mntSend(ctx, port, (ub1 *) 0, (size_t) 0, (mnbv *) 0, (ub4) 0,
		      FALSE, TRUE, sem);
      port->rstate = MNSTS_FINISH;
      mntRecvDisc(ctx, port);
      if (!(port->flags & MNOPT_NONBLOCK))
	sts = mnSemWait(sem);
      mnSemFree(sem);
      break;
    case MNSTS_DISCONNECT:                                   /* streams only */
      mntRecvDisc(ctx, port);
      port->rstate = MNSTS_TIMEWAIT;
      mntCleanSetup(ctx, port, MNTPRTLIFE);
      break;
    case MNSTS_FINISH:                                       /* streams only */
    case MNSTS_TIMEWAIT:                                     /* streams only */
      return MNERR_NOTCONN;
    }

  return sts;
}

/*
 * mnSetOptions - set port options
 */
void mnSetOptions(mnp *port, ub4 options)
{
  port->flags = options;
}

/*
 * mnGetOptions - get port options
 */
ub4 mnGetOptions(mnp *port)
{
  return port->flags;
}

/*
 * mnGetAddr - get address of port
 */
void mnGetAddr(mnp *port, mna *addr)
{
  mnctx *ctx;

  ctx = mnGlbCtx;

  if (!mnaWellKnown(&port->me) && 
      (!port->rte || !(port->rte->nio->flags & MNNFLG_RECV)))
    {
      mnnSubnet(ctx->rnio, addr);
      mnaSetPortNum(addr, mnaPortNum(&port->me));
    }
  else
    mnaCopy(addr, &port->me);
}

/*
 * mnGetPeer - get address of peer
 */
sb4 mnGetPeer(mnp *port, mna *addr)
{
  if (port->rstate == MNSTS_CLOSED || port->rstate == MNSTS_LISTEN ||
      port->rstate == MNSTS_FINISH || port->rstate == MNSTS_TIMEWAIT)
    return MNERR_NOTCONN;

  mnaCopy(addr, &port->peer);
  return 0;
}
