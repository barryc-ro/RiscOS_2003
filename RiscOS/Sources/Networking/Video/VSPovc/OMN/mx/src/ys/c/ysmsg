/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * ysmsg.c - Message File Operations
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef SYSFP_ORACLE
#include <sysfp.h>
#endif
#ifndef SYSXCD_ORACLE
#include <sysxcd.h>
#endif
#ifndef YSMSG_ORACLE
#include <ysmsg.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif
#ifndef YSI_ORACLE
#include <ysi.h>
#endif

/*
 * Declarations
 */
typedef struct ysseqoct ysseqoct;                      /* sequence of octets */

/* DISABLE check_naming */
struct ysseqoct
{
  ub4  max, len;                   /* maximum & length of sequence of octets */
  ub1 *octets;                                               /* octet buffer */
};
/* ENABLE check_naming */

static ysmtagDecl(YSMSGD_TAG) = "ysmsgd";

/*
 * ysMsgInit - initialize message cache
 */
void ysMsgInit(ysctx *ctx)
{
  sword fdcs;
  CONST char *fdcs_s;

  ctx->msgdlst = ysLstCreate();
  fdcs_s = ysResGetLast("ys.log.fd-cache-size");
  if (fdcs_s)
    fdcs = atol(fdcs_s);
  ctx->msgdmax = ((!fdcs_s || !fdcs) ? (sword) 8 : fdcs);
}

/*
 * ysMsgTerm - terminate message cache
 */
void ysMsgTerm(ysctx *ctx)
{
  ysLstDestroy(ctx->msgdlst, (ysmff) ysMsgClose);
}

/*
 * ysMsgOpen - open a message file
 */
ysmsgd *ysMsgOpen(CONST char *prod, CONST char *fac)
{
  yslst      *paths;
  ysle       *le;
  sysfp      *fp;
  ysmsgd     *msgd;
  size_t      sz;
  CONST char *errtxt;
  ub1         buf[12];
  char        nm[128], fpnm[SYSFP_MAX_PATHLEN];

  /* locate the message file */
  paths = ysResGet("ys.log.msg-path");
  DISCARD sprintf(nm, "%s%s", prod, fac);
  if (!paths)
    sysfpForm(fpnm, (char *) 0, nm, YSMSG_SFX);
  else
    {
      for (le = ysLstHead(paths); le; le = ysLstNext(le))
	{
	  sysfpForm(fpnm, (char *) ysLstVal(le), nm, YSMSG_SFX);
	  if (sysfpAccess(fpnm, "r"))
	    break;
	}
    }

  /* open the message file */
  fp = sysfpOpen(fpnm, "r", SYSFPKIND_BINARY, &errtxt);
  if (!fp)
    return (ysmsgd *) 0;

  /* load the message file */
  msgd = (ysmsgd *) ysmGlbAlloc(sizeof(ysmsgd), YSMSGD_TAG);
  msgd->prod = prod;
  msgd->fac = fac;
  msgd->fp = fp;

  DISCARD sysfpRead(msgd->fp, (dvoid *) buf, 12);
  if (sysxGetB4(buf) != YSMSG_MAGIC)
    {
      sysfpClose(msgd->fp);
      ysmGlbFree((dvoid *) msgd);
      return (ysmsgd *) 0;
    }

  msgd->idmin = sysxGetB4(buf + 4);
  msgd->idmax = sysxGetB4(buf + 8);

  /* read the message table */
  if ((msgd->idmax - msgd->idmin + 1) * 8 > SIZE_TMAXVAL)
    ysePanic(YS_EX_FAILURE);

  sz = (size_t) ((msgd->idmax - msgd->idmin + 1) * 8);
  msgd->msgtbl = (ub1 *) ysmGlbAlloc(sz, "ysmsg::msgtbl");
  DISCARD sysfpRead(msgd->fp, (dvoid *) msgd->msgtbl, sz);

  msgd->datalen =
    ysMsgOffset(msgd, msgd->idmax) + ysMsgLength(msgd, msgd->idmax)
      - ysMsgDataOffset(msgd);

  return msgd;
}

/*
 * ysMsgClose - close a message file
 */
void ysMsgClose(ysmsgd *msgd)
{
  if (!msgd)
    return;
  ysmCheck(msgd, YSMSGD_TAG);
  sysfpClose(msgd->fp);
  ysmGlbFree((dvoid *) msgd->msgtbl);
  ysmGlbFree((dvoid *) msgd);
}

/*
 * ysMsgFind - find message descriptor
 */
ysmsgd *ysMsgFind(CONST char *prod, CONST char *fac)
{
  ysctx  *ctx;
  ysmsgd *msgd;
  ysle   *le;

  /* search for the message descriptor */
  ctx = (ysctx *) yscGet(YSC_YSCTX);
  for (le = ysLstHead(ctx->msgdlst); le; le = ysLstNext(le))
    {
      msgd = (ysmsgd *) ysLstVal(le);
      if (!strcmp(fac, msgd->fac) && !strcmp(prod, msgd->prod))
	break;
    }

  if (le)
    {
      /* move to the head of the list */
      DISCARD ysLstRem(ctx->msgdlst, le);
      DISCARD ysLstPush(ctx->msgdlst, (dvoid *) msgd);
    }
  else
    {
      /* close one if we have too many open */
      if (ysLstCount(ctx->msgdlst) >= ctx->msgdmax)
	{
	  msgd = ysLstRem(ctx->msgdlst, ysLstTail(ctx->msgdlst));
	  ysMsgClose(msgd);
	}

      /* now open a new one */
      msgd = ysMsgOpen(prod, fac);
      if (msgd)
	DISCARD ysLstPush(ctx->msgdlst, (dvoid *) msgd);
    }

  return msgd;
}

/*
 * ysMsgGet - get message text
 */
char *ysMsgGet(ysmsgd *msgd, ub4 msgid, char *buf, size_t buflen)
{
  ub4   off, len;
  sysb8 off_8;

  if (msgd)
    if (msgid >= msgd->idmin && msgid <= msgd->idmax)
      {
	off = ysMsgOffset(msgd, msgid);
	len = ysMsgLength(msgd, msgid);
	if (off && len)
	  {
	    sysb8ext(&off_8, off);
	    if (sysfpSeek(msgd->fp, &off_8))
	      {
		if (buflen < len)
		  len = buflen;
		
		if (sysfpRead(msgd->fp, (dvoid *) buf, (size_t) len) == len)
		  return buf;
	      }
	  }
      }

  return (char *) 0;
}

/*
 * ysMsgFmt - format a message
 */
void ysMsgFmt(char *out, size_t outlen, sword narg, yslarg *args,
              CONST char *msgtxt)
{
  sword       i, j;
  yslarg     *arg;
  yslst      *locals;
  ysstr      *str, *ostr;
  ysfmtd     *fmtd;
  ysseqoct   *soct;
  char       *txt, tmp[4];
  ysSinkFmtCB cb;

  fmtd = ysFmtDescCreate();
  str = (msgtxt ? (ysstr *) 0 : ysStrCreate("message not found"));
  locals = ysLstCreate();

  for (i = 0, arg = args; i < narg; i++, arg++)
    {
      switch (ysSinkGetTypeId(arg->tc))
	{
	case YSLSTR_ID:
	  fmtd =
	    ysFmtAddElem(fmtd, YSFMT_STR, (dvoid *) *((char **) arg->val));
	  if (str)
	    str = ysStrCat(str, " [%s]");
	  break;
	case YSLUB4_ID:
	  fmtd = ysFmtAddElem(fmtd, YSFMT_UB4, arg->val);
	  if (str)
	    str = ysStrCat(str, " [%lu]");
	  break;
	case YSLSB4_ID:
	  fmtd = ysFmtAddElem(fmtd, YSFMT_SB4, arg->val);
	  if (str)
	    str = ysStrCat(str, " [%ld]");
	  break;
	case YSLSB8_ID:
	  fmtd = ysFmtAddElem(fmtd, YSFMT_SB8, arg->val);
	  if (str)
	    str = ysStrCat(str, " [%Ld]");
	  break;
	case YSLOCTETS_ID:
	  ostr = ysStrCreate((char *) 0);
	  soct = (ysseqoct *) arg->val;
	  for (j = 0; j < soct->len; j++)
	    {
	      DISCARD sprintf(tmp, "%02x", soct->octets[j]);
	      ostr = ysStrCat(ostr, tmp);
	    }
	  DISCARD ysLstPush(locals, (dvoid *) ysStrToText(ostr));

	  fmtd = ysFmtAddElem(fmtd, YSFMT_STR, (dvoid *) ysStrToText(ostr));
	  if (str)
	    str = ysStrCat(str, " [%s]");
	  break;
	default:
	  cb = ysSinkFmtLookup(arg->tc);
	  if (cb)
	    {
	      txt = cb(arg->tc, arg->val);
	      DISCARD ysLstPush(locals, (dvoid *) txt);
	    }
	  else
	    txt = (char *) "???";

	  fmtd = ysFmtAddElem(fmtd, YSFMT_STR, (dvoid *) txt);
	  if (str)
	    str = ysStrCat(str, " [%s]");
	  break;
	}
    }

  ysFmtStrDesc(out, outlen, (msgtxt ? msgtxt : ysStrToText(str)), fmtd);

  ysFmtDescDestroy(fmtd);
  if (str)
    ysStrDestroy(str);
  ysLstDestroy(locals, (ysmff) ysmFGlbFree);
}
