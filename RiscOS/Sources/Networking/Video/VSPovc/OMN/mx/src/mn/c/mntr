/* Copyright (c) 1994 by Oracle Corporation.  All Rights Reserved.
 *
 * mntr.c - OMN Transport Layer Receiving
 *
 * REVISIONS
 * jolkin    08/15/94  Creation of Version 2.1
 * jolkin    04/20/94  Creation of Version 2.0
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNI_ORACLE
#include <mni.h>
#endif

/*
 * mntInOpen - accept a packet on a listening port
 *   mntInOpen() is called by mntIn() when a packet arrives on a listening
 *   port (one a user opens).  We only accept "first" packets here.  Then,
 *   we create a connected port and call mntInData() as if the packet had
 *   arrived normally.
 */
ub4 mntInOpen(mnctx *ctx, mnnpkt *pkt, mnp *port)
{
  mnnhdr *phdr;
  mnp    *cport;
  mna     claddr;
  mnrte  *rte;

  phdr = (mnnhdr *) &pkt[1];

  /* if this is a stream timewait, we cannot reopen; if a message timewait,
   * the main port must still be open
   */
  if (port->rstate == MNSTS_TIMEWAIT)
    {
      if (port->proto == MNPROTO_STREAM)
	{
	  mnPrint(MNLWARN, "packet dropped after close; seq=%08x", pkt->seqid);
	  if (!port->ackpend)
	    {
	      mnePost(ctx, mntSendAck, (dvoid *) port, (sb4) 0);
	      port->ackpend = TRUE;
	    }
	  mnmFree(ctx, (dvoid *) pkt);
	  return 0;
	}
      else
	{
	  cport = port;
	  mnaClear(&claddr);
	  port = mntFindPort(ctx, &phdr->dst, &claddr);

	  if (!port)
	    return MNOTYP_DESTNOTREACH;
	}
    }
  else if (!(pkt->flags & MNNFLG_FST))
    {
      /* if in an initial state, we only accept initial packet in the stream */
      mnPrint(MNLWARN, "packet dropped; not FST packet; seq=%08x", pkt->seqid);
      mnmFree(ctx, (dvoid *) pkt);
      return 0;
    }
  else if (port->rstate == MNSTS_LISTEN)
    {
      /* if this is a listen port, then we need to create a new
       * connected port
       */
      rte = mnaFindRoute(ctx, &phdr->src);
      if (!rte)
	{
	  mnPrint(MNLWARN, "packet dropped; source not reachable", pkt->seqid);
	  return 0;
	}

      cport = mntCreatePort(ctx, port, &phdr->src, rte);
      cport->nrseq = pkt->seqid;
      cport->fsseq = cport->naseq = ctx->iss;
      ctx->iss -= 65533;
    }
  else /* port->rstate == MNSTS_CONNECT */
    {
      cport = port;
      cport->nrseq = pkt->seqid;
      cport->naseq = cport->fsseq = ctx->iss;
      ctx->iss -= 65533;
      port = (mnp *) 0;
    }

  cport->rstate = MNSTS_ESTABLISHED;
  if (cport->proto == MNPROTO_MESSAGE)
    mntCleanSetup(ctx, cport, MNTRCVLIFE);

  /* this will process the received packet */
  mntInData(ctx, pkt, cport);

  /* in case, the pkt just passed to mntInData() was a duplicate, there
   * will be no new receive packets and we should therefore just revert
   * to a TIMEWAIT.
   */
  if (!cport->rs)
    cport->rstate = MNSTS_TIMEWAIT;
  else
    {
      /* enqueue the initial request */
      if (port &&
	  ((port->proto == MNPROTO_STREAM) || (cport->nrseq - pkt->seqid > 0)))
	{
#ifdef USE_YSLST
	  ysLstEnq(port->accepts, (dvoid *) cport);
#else
	  mnqEnq(&port->accepts, cport);
#endif
	  mntRecvAccept(ctx, port);
	}
      else if (port)
	cport->rstate = MNSTS_TIMEWAIT;
    }

  return 0;
}

/*
 * mntInData - accepts a packet for a connected port
 *   A connected port is any port whose peer is known.  Of course, the
 *   state of the port may be any of a number of states.  The packet
 *   is sequenced into our packet list.  We deal with overlap.
 *   Finally, we queue an acknowledgement if necessary.
 */
void mntInData(mnctx *ctx, mnnpkt *pkt, mnp *port)
{
  mnnhdr *phdr;
  sb4     diff, seqid;
  mnnpkt *prev, *seg;
  boolean eof;

  phdr = (mnnhdr *) &pkt[1];

  pkt->off += sizeof(mnnhdr);
  pkt->len -= sizeof(mnnhdr);

  if (!port->everrcv)
    {
      if (!(pkt->flags & MNNFLG_FST))
	{
	  mnmFree(ctx, (dvoid *) pkt);
	  return;
	}
      else
	{
	  port->nrseq = pkt->seqid;
	  port->everrcv = TRUE;
	}
    }

  /* make sure that the packet is not ridiculously far off from the expected
   * sequence number
   */
  if (smnModSub(pkt->seqid, port->nrseq) >
      (sb4) (mnmPoolSpace(ctx, MNM_RECVPOOL) >> 1))
    {
      mnPrint(MNLWARN, "packet dropped; outside window");
      mnmFree(ctx, (dvoid *) pkt);
      goto leave;
    }

  /* truncate beginning (or all of packet) */
  diff = smnModSub(port->nrseq, pkt->seqid);
  if (diff > 0)
    goto duplicate;
#ifdef NEVER
  if (diff >= (sb4) pkt->len)
    goto duplicate;
  else if (diff > 0)
    {
      mnPrint(MNLWARN, "unusual packet; partial tail");
      pkt->seqid += diff;
      pkt->off += (ub4) diff;
      pkt->len -= (ub4) diff;
    }
#endif

  /* find where to insert the packet; this loop continues until the
   * beginning of the packet does not point past the end of the
   * segment seg or until we have reached the end of the list.
   */
 insert:
  for (prev = (mnnpkt *) 0, seg = (port->ls ? port->ls : port->rs);
       seg && smnModSub(seg->seqid, pkt->seqid) + (sb4) seg->len <= 0;
       prev = seg, seg = seg->next) ;

  if (!seg)
    {
      /* if we have reached the end of the list, simply append */
      pkt->next = (mnnpkt *) 0;

      if (pkt->seqid != port->nrseq)
	mnPrint(MNLWARN, "continuity lost; seq=%08x", pkt->seqid);
    }
  else
    {
      /* check for overlap and shorten the packet */
      pkt->next = seg;
      if (smnModSub(pkt->seqid, seg->seqid) < 0)
	{
	  pkt->len = min(smnModSub(seg->seqid, pkt->seqid), (sb4) pkt->len);
	  if (!pkt->len)
	    goto duplicate;
	  else
	    mnPrint(MNLWARN, "unusual packet; partial head");
	}
      else
	{
	  mnPrint(MNLWARN, "unusual packet; embedded");

	  /* packet begins in the middle of an existing segment */
	  pkt->off =
	    (ub4) (smnModSub(seg->seqid, pkt->seqid) + (sb4) seg->len);
	  pkt->seqid += smnModSub(seg->seqid, pkt->seqid) + (sb4) seg->len;

	  if (pkt->off < pkt->len)
	    goto insert;
	  else
	    goto duplicate;
	}
    }

  if (!prev)
    {
      port->rs = pkt;
      if (pkt->seqid == port->nrseq)
	port->ls = pkt;
    }
  else
    prev->next = pkt;

  port->rtime = (sb4) smnClock();

  if (!port->ls)
    goto leave;

  /* check for highest received sequence in current strem */
  for (eof = FALSE, prev = seg = port->ls, seqid = seg->seqid;
       seg && seqid == seg->seqid;
       prev = seg, seqid = seg->seqid + (sb4) seg->len, seg = seg->next)
    if (!(seg->flags & MNNFLG_MTC))
      eof = TRUE;

  /* if we have received new data, process it */
  if (smnModSub(seqid, port->nrseq) > 0)
    {
      port->nrseq = seqid;
      port->ls = prev;

      if (port->rstate == MNSTS_FINISH)
	mntRecvDisc(ctx, port);
      else if (port->rstate == MNSTS_ESTABLISHED ||
	       port->rstate == MNSTS_DISCONNECT)
	{
	  if (eof)
	    port->rstate = MNSTS_DISCONNECT;

	  mntRecvData(ctx, port);
	}
      else
	mnPrint(MNLERROR, "unexpected state %ld", port->rstate);
    }

 leave:
  if (!port->ackpend)
    {
      mnePost(ctx, mntSendAck, (dvoid *) port, (sb4) 0);
      port->ackpend = TRUE;
    }
  return;

 duplicate:
  mnPrint(MNLWARN, "packet dropped; duplicate; seq=%08x", pkt->seqid);
  mnmFree(ctx, (dvoid *) pkt);
  goto leave;
}

/*
 * mntSendAck - send an acknowledgement
 *   An acknowledgement always identifies the next sequence number that
 *   we expect to receive; thus, acknowledgements are effectively
 *   idempotent.
 */
void mntSendAck(dvoid *pp, /*ARGUSED*/ sb4 val)
{
  mnctx  *ctx;
  mnp    *port;
  mnnpkt *pkt;
  mnnhdr *phdr;

  ctx = mnGlbCtx;

  port = (mnp *) pp;
  port->ackpend = FALSE;

  pkt = (mnnpkt *) mnmAlloc(ctx, MNM_SENDPOOL,
			    sizeof(mnnpkt) + sizeof(mnnhdr));
  if (!pkt)
    return;

  /* initialize packet descriptor */
  pkt->len = sizeof(mnnhdr);
  pkt->off = 0;
  pkt->flags = MNNFLG_ACK | MNNFLG_PRI |
    (mnmPoolLowwtr(ctx, MNM_RECVPOOL) ? MNNFLG_CLS : 0);
  pkt->seqid = port->nrseq;
  pkt->nio = port->rte->nio;
  CPSTRUCT(pkt->pa, port->rte->pa);

  /* initialize packet header */
  phdr = (mnnhdr *) &pkt[1];
  phdr->proto = (ub1) port->proto;
  mnaCopy(&phdr->src, &port->me);
  mnaCopy(&phdr->dst, &port->peer);

  /* mnnSendPkt() will free this packet */
  DISCARD mnnSendPkt(ctx, pkt);
}

/*
 * mntRecvAccept - process a new connection
 *   mntRecvAccept() is called by mntInOpen() whenever a new stream
 *   is connected.   If there are receive events pending on the
 *   listening port, they are either message receives,
 *   message receive waits, or stream listens.  A message receive
 *   accepts the connection and automatically enqueues the receive
 *   event on the connected port.  A message receive wait simply
 *   completes the event by setting the message length.  A stream
 *   listen simply completes the event.
 */
void mntRecvAccept(mnctx *ctx, mnp *port)
{
  mntre *re;
  ub4    cnt, msglen;
  mnp   *scp, *cport;
  ub1   *srcbuf;
  char   out[MNAMAXLEN];
#ifdef USE_YSLST
  ysle  *le;
#endif

#ifdef USE_YSLST
  while (port->re.head && ysLstHead(port->accepts))
#else
  while (port->re.head && port->accepts.head)
#endif
    {
      /* check that accepted port is alive */
#ifdef USE_YSLST
      cport = (mnp *) ysLstVal(ysLstHead(port->accepts));
#else
      cport = (mnp *) port->accepts.head;
#endif
      if (cport->sstate < 0)
	{
	  mnAtos(&cport->peer, out, MNAMAXLEN);
	  mnPrint(MNLWARN, "unable to accept: from=%s", out);
#ifdef USE_YSLST
	  ysLstDeq(port->accepts);
#else
	  mnqDeq(&port->accepts);
#endif
	  continue;
	}

      /*
       * We can get into a state where no packet is attached to the accept
       * (presumably as a result of attempting to reset sequence numbers).  If
       * this is the case, discard the accept or we dereference zero later.
       */
      if (!cport->rs)
	{
	  mnAtos(&cport->peer, out, MNAMAXLEN);
	  mnPrint(MNLWARN, "accept with discarded packets: from=%s", out);
	  cport->rstate = MNSTS_TIMEWAIT;
#ifdef USE_YSLST
	  ysLstDeq(port->accepts);
#else
	  mnqDeq(&port->accepts);
#endif
	  continue;
	}

      /* now get receive event */
      re = (mntre *) mnqDeq(&port->re);

      /* make sure the receive event is still pending */
      if (mneGet(ctx, re->sem) != MNSTS_UNKNOWN)
	{
	  mneUnlatch(ctx, re->sem);
	  if (re->origbv)
	    mnmFree(ctx, (dvoid *) re->origbv);
	  mnmFree(ctx, (dvoid *) re);
	  continue;
	}

      if (port->proto == MNPROTO_STREAM)
	{
	  /* if this is a stream, then the receive event must be a listen;
	   * return the number of outstanding accepted connections
	   */
#ifdef USE_YSLST
	  cnt = ysLstCount(port->accepts);
#else
	  for (cnt = 0, scp = (mnp *) port->accepts.head; scp;
	       cnt++, scp = scp->next) ;
#endif
	  mneSet(ctx, re->sem, (sb4) cnt, TRUE);
	  mnmFree(ctx, (dvoid *) re);
	}
      else  /* port->proto == MNPROTO_MESSAGE */
	{
	  /* read the message length */
#ifdef USE_YSLST
	  cport = (mnp *) ysLstVal(ysLstHead(port->accepts));
#else
	  cport = (mnp *) port->accepts.head;
#endif
	  srcbuf = ((ub1 *) &cport->rs[1]) + cport->rs->off;
	  msglen = smnNtoh4(*((ub4 *) srcbuf));

	  if (re->from)
	    mnaCopy(re->from, &cport->peer);

	  if (re->origbv)
	    {
	      /* message receive */
	      cport->rs->len -= sizeof(ub4);
	      cport->rs->off += sizeof(ub4);
	      cport->rs->seqid += sizeof(ub4);

#ifdef USE_YSLST
	      ysLstDeq(port->accepts);
#else
	      mnqDeq(&port->accepts);
#endif
	      mnqEnq(&cport->re, re);
	      mntRecvData(ctx, cport);
	    }
	  else
	    {
	      /* message receive wait */
	      mneSet(ctx, re->sem, (sb4) msglen, TRUE);
	      mnmFree(ctx, (dvoid *) re);
	    }
	}
    }
}

/*
 * mntRecvDisc - process data on a disconnected port
 *   mntRecvDisc() is called mntInData() whenever new data arrives
 *   on a disconnected port.  (It is also called by many other routines
 *   that wish to disconnect a port.)  We simply consume all packets until
 *   we reach the end of stream.  Then, we switch our state to TIMEWAIT;
 *   if there is a new stream, we revert to an ESTABLISHED state.
 */
void mntRecvDisc(mnctx *ctx, mnp *port)
{
  boolean eof;
  mnnpkt *tmp;
  sb4     sts;
  mntre  *re;
  mnp    *cport;
  mna     claddr;

  /* consume the contiguous leading packets */
  eof = FALSE;
  while (!eof && port->ls)
    {
      eof = !(port->rs->flags & MNNFLG_MTC);
      tmp = port->rs;
      port->rs = tmp->next;
      if (tmp == port->ls)
	port->ls = (mnnpkt *) 0;
      mnmFree(ctx, (dvoid *) tmp);
    }

  /* now set all receive events still queued */
  sts = (port->sstate < 0 ? port->sstate : MNERR_DISCONN);
  while (re = (mntre *) mnqDeq(&port->re))
    {
      if (mneGet(ctx, re->sem) == MNSTS_UNKNOWN)
	mneSet(ctx, re->sem, sts, TRUE);
      else
	mneUnlatch(ctx, re->sem);

      if (re->origbv)
	mnmFree(ctx, (dvoid *) re->origbv);
      mnmFree(ctx, (dvoid *) re);
    }

  /* now switch the receive state of the port if we have consumed EOS */
  if (eof)
    {
      port->rstate = MNSTS_TIMEWAIT;

      /* if we have additional data, then this must be a new message;
       * make sure that we still have an open message port, and post
       * the arrival of the new message immediately.
       */
      if (port->ls && port->sstate >= 0)
	{
	  cport = port;
	  mnaClear(&claddr);
	  port = mntFindPort(ctx, &cport->me, &claddr);

	  if (!port)
	    DISCARD mnoSend(ctx, MNOTYP_DESTNOTREACH,
			    &cport->peer, &cport->me);
	  else
	    {
	      cport->rstate = MNSTS_ESTABLISHED;
	      if (port->proto == MNPROTO_MESSAGE)
		mntCleanSetup(ctx, port, MNTRCVLIFE);
#ifdef USE_YSLST
	      ysLstEnq(port->accepts, (dvoid *) cport);
#else
	      mnqEnq(&port->accepts, cport);
#endif
	      mntRecvAccept(ctx, port);
	    }
	}
      else if (port->sstate == MNSTS_IDLE || port->sstate < 0)
	mntCleanSetup(ctx, port, MNTPRTLIFE - 10000);
    }
}

/*
 * mntRecvData - process data on a connected port
 *   mntRecvData() is called by mntInData() whenever new data arrives
 *   on a connected port.  If there are receive events pending, we fill
 *   them.
 */
void mntRecvData(mnctx *ctx, mnp *port)
{
  mntre  *re;
  boolean freere;

  while (port->re.head && (port->ls || port->sstate < 0))
    {
      re = (mntre *) port->re.head;

      /* make sure that the receive event is still pending */
      if (mneGet(ctx, re->sem) == MNSTS_UNKNOWN)
	{
	  if (port->ls)
	    freere = mntRecvFill(ctx, port, re);
	  else
	    {
	      mneSet(ctx, re->sem, port->sstate, TRUE);
	      freere = TRUE;
	    }
	}
      else
	{
	  mneUnlatch(ctx, re->sem);
	  freere = TRUE;
	}

      /* free the receive event if necessary */
      if (freere)
	{
	  mnqDeq(&port->re);
	  mnmFree(ctx, (dvoid *) re->origbv);
	  mnmFree(ctx, (dvoid *) re);

	  /* I may need to consume any data remaining in the message */
	  if (port->proto == MNPROTO_MESSAGE)
	    {
	      if (port->rstate == MNSTS_ESTABLISHED)
		port->rstate = MNSTS_FINISH;
	      if (port->sstate == MNSTS_IDLE)
		mntCleanSetup(ctx, port, MNTRCVLIFE);
	      mntRecvDisc(ctx, port);
	    }
	}
    }
}

/*
 * mntRecvFill - fill a receive event
 *   The received packets are transferred into the receive event's
 *   buffer(s).  Consumed received packets are freed.  If the
 *   receive event itself is completed, the semaphore is set.
 */
boolean mntRecvFill(mnctx *ctx, mnp *port, mntre *re)
{
  ub1    *srcbuf;
  boolean eof;
  ub4     xlen;
  mnnpkt *tmp;

  /* make sure we have contiguous data */
  while (port->ls)
    {
      if (port->rs->len)
	{
	  xlen = min(port->rs->len, re->cbv->len);

	  /* check to see if the end of stream is consumed */
	  if (xlen == port->rs->len)
	    {
	      if (eof = !(port->rs->flags & MNNFLG_MTC))
		xlen--;
	    }
	  else
	    eof = FALSE;

	  /* copy the data */
	  srcbuf = ((ub1 *) &port->rs[1]) + port->rs->off;
	  DISCARD memcpy(re->cbv->buf, srcbuf, (size_t) xlen);

	  /* increment all pointers and counters */
	  re->cbv->buf += xlen;
	  re->cbv->len -= (size_t) xlen;
	  re->cnt += xlen;
	  port->rs->len -= xlen;
	  port->rs->off += xlen;
	  port->rs->seqid += (sb4) xlen;
	}
      else
	eof = FALSE;

      /* if the packet is consumed, free it */
      if (!port->rs->len)
	{
	  tmp = port->rs;
	  port->rs = tmp->next;
	  if (tmp == port->ls)
	    port->ls = (mnnpkt *) 0;
	  mnmFree(ctx, (dvoid *) tmp);
	}

      /* if the buffer vector element is consumed, move to the next one */
      if (!re->cbv->len)
	re->cbv++, re->nbv--;

      /* if there are no more bv elements or end-of-stream is encountered,
       * complete the event
       */
      if (!re->nbv || eof)
	{
	  mneSet(ctx, re->sem,
		 (!re->cnt && eof ? MNSTS_EOS : (sb4) re->cnt), TRUE);
	  return TRUE;
	}
    }

  /* we have reached a discontinuity; if this is not a filling receive event,
   * complete the event
   */
  if (!re->fill)
    {
      mneSet(ctx, re->sem, (sb4) re->cnt, TRUE);
      return TRUE;
    }
  else
    return FALSE;
}

/*
 * mntRecv - create a receive event
 *   mntRecv() is the service routine for the transport-layer public
 *   interface that actually creates a receive event, enqueues it,
 *   and then attempts to fill the event.
 */
sb4 mntRecv(mnp *port, mna *from, mnbv *bv, ub4 nbv,
	    ub4 timeout, mnHandler handler, dvoid *usrp, boolean fill)
{
  mnctx *ctx;
  mnbv  *bvp;
  mntre *re;
  mnsem *sem;
  sb4    sts;

  ctx = mnGlbCtx;

  /* make sure that we won't block if this port is non-blocking */
  if (!handler && !usrp && (port->flags & MNOPT_NONBLOCK))
    {
#ifdef USE_YSLST
      if ((port->rstate == MNSTS_LISTEN && !ysLstHead(port->accepts)) ||
	  (port->rstate != MNSTS_LISTEN && !port->ls))
	return MNERR_WOULDBLOCK;
#else
      if ((port->rstate == MNSTS_LISTEN && !port->accepts.head) ||
	  (port->rstate != MNSTS_LISTEN && !port->ls))
	return MNERR_WOULDBLOCK;
#endif
    }

  re = (mntre *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mntre));
  sem = mneMakeSem(ctx, handler, usrp);

  if (bv)
    {
      bvp = (mnbv *) mnmAlloc(ctx, MNM_MAINPOOL,
			      (size_t) (sizeof(mnbv) * nbv));
      DISCARD memcpy(bvp, bv, (size_t) (sizeof(mnbv) * nbv));
    }
  else
    bvp = (mnbv *) 0;

  if (timeout)
    mneTimer(ctx, timeout, sem);

  /* create the receive event */
  re->from = from;
  re->sem = sem;
  re->origbv = re->cbv = bvp;
  re->nbv = nbv;
  re->cnt = 0;
  re->fill = fill;

  mnqEnq(&port->re, re);

  if (port->rstate == MNSTS_LISTEN)
    mntRecvAccept(ctx, port);
  else
    mntRecvData(ctx, port);

  if (!handler && !usrp)
    {
      sts = mnSemWait(sem);
      mnSemFree(sem);
    }
  else
    sts = 0;

  return sts;
}

/*
 * mnRecv - receive a message into a buffer
 */
sb4 mnRecv(mnp *port, mna *from, ub1 *buf, size_t len,
	   ub4 timeout, mnHandler handler, dvoid *usrp)
{
  mnbv   bv;

  if (port->proto != MNPROTO_MESSAGE)
    return MNERR_BADPROTO;

  DISCARD mnIdle();

  bv.len = len;
  bv.buf = buf;
  return mntRecv(port, from, &bv, (ub4) 1, timeout, handler, usrp, TRUE);
}

/*
 * mnRecvV - receive a message into a buffer vector
 */
sb4 mnRecvV(mnp *port, mna *from, mnbv *bv, ub4 nbv,
	    ub4 timeout, mnHandler handler, dvoid *usrp)
{
  if (port->proto != MNPROTO_MESSAGE)
    return MNERR_BADPROTO;

  DISCARD mnIdle();

  return mntRecv(port, from, bv, nbv, timeout, handler, usrp, TRUE);
}

/*
 * mnRecvTest - get the length of a pending message
 */
sb4 mnRecvTest(mnp *port, mna *from)
{
  if (port->proto != MNPROTO_MESSAGE)
    return MNERR_BADPROTO;

  DISCARD mnIdle();

  return mntinRecvTest(port, from);
}

sb4 mntinRecvTest(mnp *port, mna *from)
{
  mnp *cport;
  ub1 *srcbuf;
  ub4  msglen;

#ifdef USE_YSLST
  if (ysLstHead(port->accepts))
    {
      cport = (mnp *) ysLstVal(ysLstHead(port->accepts));
#else
  if (cport = (mnp *) port->accepts.head)
    {
#endif
      srcbuf = ((ub1 *) &cport->rs[1]) + cport->rs->off;
      msglen = smnNtoh4(*((ub4 *) srcbuf));

      if (from)
	mnaCopy(from, &cport->peer);

      return (sb4) msglen;
    }
  else
    return 0;
}

/*
 * mnListen - listen for an incoming stream connection
 */
sb4 mnListen(mnp *port, ub4 timeout, mnHandler handler, dvoid *usrp)
{
  DISCARD mnIdle();

  if (port->proto != MNPROTO_STREAM)
    return MNERR_BADPARAM;

  if (port->rstate != MNSTS_CLOSED && port->rstate != MNSTS_LISTEN)
    return MNERR_ALREADY;

  port->rstate = MNSTS_LISTEN;
  return mntRecv(port, (mna *) 0, (mnbv *) 0, (ub4) 0,
		 timeout, handler, usrp, FALSE);
}

/*
 * mnAccept - accept an incoming stream connection
 */
mnp *mnAccept(mnp *port)
{
  mnp *cport;
  sb4  sts;

  if (port->proto != MNPROTO_STREAM)
    {
      mnSetLastError(mnGlbCtx, MNERR_BADPARAM);
      return (mnp *) 0;
    }

  if (port->rstate != MNSTS_CLOSED && port->rstate != MNSTS_LISTEN)
    {
      mnSetLastError(mnGlbCtx, MNERR_ALREADY);
      return (mnp *) 0;
    }

  DISCARD mnIdle();

  sts = 0;
#ifdef USE_YSLST
  while (sts >= 0 && !(cport = (mnp *) ysLstDeq(port->accepts)))
    sts = mnListen(port, (ub4) 0, (mnHandler) 0, (dvoid *) 0);
#else
  while (sts >= 0 && !(cport = (mnp *) mnqDeq(&port->accepts)))
    sts = mnListen(port, (ub4) 0, (mnHandler) 0, (dvoid *) 0);
#endif

  if (sts < 0)
    mnSetLastError(mnGlbCtx, sts);

  return cport;
}

/*
 * mnRead - receive data from an incoming stream
 */
sb4 mnRead(mnp *port, ub1 *buf, size_t len, boolean fill, 
	   ub4 timeout, mnHandler handler, dvoid *usrp)
{
  mnbv bv;

  DISCARD mnIdle();

  if (port->proto != MNPROTO_STREAM)
    return MNERR_BADPARAM;

  if (port->rstate == MNSTS_CLOSED || port->rstate == MNSTS_LISTEN ||
      port->rstate == MNSTS_FINISH || port->rstate == MNSTS_TIMEWAIT)
    return MNERR_NOTCONN;

  bv.len = len;
  bv.buf = buf;
  return mntRecv(port, (mna *) 0, &bv, (ub4) 1, timeout, handler, usrp, fill);
}

/*
 * mntDbgScan - scan the global context
 */
typedef struct mnmhdr mnmhdr;

typedef struct
{
  ub4     sz;                                          /* total size of pool */
  ub4     inuse;                                /* space currently allocated */
  ub4     lowwtr;                                          /* low-water mark */
  mnsem  *sem;                  /* semaphore to set when memory is available */
  boolean outmem;                 /* true if out-of-memory status is current */
  ub4     omcnt;                                 /* # out-of-memory requests */
  ub4     maxusg;                                           /* maximum usage */
} mnpool;

struct mnmctx
{
  ub1    *bbuf;                                         /* beginning of heap */
  mnAlloc alloc;                                  /* user allocation routine */
  mnFree  free;                                         /* user free routine */
  mnpool  pools[MNM_MAXPOOL];                            /* pool descriptors */
  mnmhdr *roveptr;                                 /* roving pointer in heap */
};

typedef struct mnad mnad;
typedef struct mnadc mnadc;

struct mnad
{
  mna target;                                       /* process being watched */
  mnadc *calls;                                /* semaphores to set on death */
  mnad *next;                                            /* hash table chain */
  mnad *prev;
};

struct mnadc
{
  mnsem *sem;
  mnadc *next;
};

#define MNAROWS 256

typedef struct mnalcl mnalcl;

struct mnactx
{
  mnrte  *hosts[MNAROWS];                              /* host routing table */
  mnrte  *nets;                                               /* subnet list */
  mnalcl *locals;                            /* addresses owned by this node */
  mnaDeathH mortH;                           /* called when an address dies */
  dvoid *mortP;                       /* pointer given when mortH is invoked */
  mnp *dport;                                          /* process death port */
  mna  dfrom;                            /* address sending the death notice */
  ub1  dbuf[MNADPLEN];                                /* death notice buffer */
  mnad *targets[MNAROWS];
};

void mntDbgScan(void)
{
  mnctx  *ctx = mnGlbCtx;
  sword   i, cnt, cnt2, cnt3, cnt4;
  ub4     btot2, btot3;
  mnrte  *rte;
  mnad   *d;
  mnadc  *c;
  mnqe   *tmpqe;
  mnp    *p;
  mnnpkt *pkt;

  /* dump memory context */
  printf("Memory Context:\n");
  for (i = 2; i < MNM_MAXPOOL; i++)
    printf("  Pool %d: %d bytes in use\n", i, ctx->mctx->pools[i].inuse);

  /* dump address context */
  printf("Address Context:\n");
  cnt = 0;
  for (i = 0; i < MNAROWS; i++)
    {
      rte = ctx->actx->hosts[i];
      while (rte)
	cnt++, rte = rte->next;
    }
  printf("  Route Entries: %d (%d total bytes)\n", cnt, cnt * sizeof(mnrte));

  cnt = cnt2 = 0;
  for (i = 0; i < 256; i++)
    {
      d = ctx->actx->targets[i];
      while (d)
	{
	  cnt++;
	  c = d->calls;
	  while (c)
	    cnt2++, c = c->next;
	}
    }
  printf("  Deathwatch Entries: %d addresses, %d calls (%d total bytes)\n",
	 cnt, cnt2, cnt * sizeof(mnad) + cnt2 * sizeof(mnadc));

  /* dump port table */
  printf("Port Table:\n");
  printf("       Unsent  Unsent  Unread  Unread  Recv  Accept  Approx\n");
  printf("        Pkts    Bytes   Pkts    Bytes  Evts  Count    Mem\n");

  cnt = 0;
  for (i = 0; i < MNPORTROWS; i++)
    {
      p = ctx->ports[i];
      while (p)
	{
	  cnt++;

	  /* count unsent packets */
	  cnt2 = 0, btot2 = 0;
	  pkt = p->unpkt;
	  while (pkt)
	    cnt2++, btot2 += sizeof(mnnpkt) + pkt->len, pkt = pkt->next;

	  /* count received packets */
	  cnt3 = 0, btot3 = 0;
	  pkt = p->rs;
	  while (pkt)
	    cnt3++, btot3 += sizeof(mnnpkt) + pkt->len, pkt = pkt->next;

	  /* count receive events */
	  cnt4 = 0;
	  tmpqe = p->re.head;
	  while (tmpqe)
	    cnt4++, tmpqe = tmpqe->next;

	  printf("  %3d  %6d  %6d  %6d  %6d  %4d  %6d  %6d\n",
		 cnt, cnt2, btot2, cnt3, btot3, cnt4, ysLstCount(p->accepts),
		 sizeof(mnp) + btot2 + btot3);

	  p = p->nport;
	}
    }
}
