/* Copyright (c) Oracle Corporation 1995.  All Rights Reserved. */

/*
   NAME
     ydyoidl.idl
   DESCRIPTION
     idl file for ORB callable interfaces to the ORB Daemon.

   MODIFIED   (MM/DD/YY)
     dbrower   07/19/95 -  created.
     dbrower   02/28/96 -  change ysid to the strings they really are.
     dbrower   06/ 7/96 -  add claim/abandon/list operations.
     dbrower   06/28/96 -  use remote events for claim/abandon.
*/

#ifndef YDYOIDL_ORACLE
#define YDYOIDL_ORACLE

#ifndef YOSTD_ORACLE
#include "yostd"
#endif YOSTD_ORACLE

#ifndef YOIDL_ORACLE
#include "yoidl"
#endif

// forward refs
module ydim {
  interface active;
};

module ydyo {

  exception notUnique {};

  struct activeInfo
  {
    // self is NIL in the client, and gets filled
    // in by the mnorbsrv when it creates an activeInfo
    // in response to an addActiveGlobal.
    ydim::active  self_ydyo_activeInfo; 

    string          intf_ydyo_activeInfo;
    string	    impl_ydyo_activeInfo;
    yort::proc	    yort_ydyo_activeInfo;
    yort::impl	    yortImpl_ydyo_activeInfo;
    yort::implFlags implFlags_ydyo_activeInfo;
  };

  typedef sequence <activeInfo> activeInfoList;

  exception notOwner { yort::proc realOwner; };

  // things that must be called by the yo runtime are here

  interface imr {

    // used by the runtime to announce, suspend and resume 
    // implementations.   suspend/resume is done with implFlags.
    void addActiveGlobal( in yort::procInfo pinfo,
			 in activeInfoList ailist );

    // used by the runtime to renounce active implementations.  When
    // this is called, all knowledge about them is destroyed.
    void destroyActiveGlobal( in activeInfoList ailist );

    // used by the runtime to deregister a runtime and
    // all interfaces it contains.
    void destroyYortGlobal( in yort::proc y );

    // used by the runtime to determine if an appropriate implementation
    // exists anywhere in the system.
    boolean exists( in string intf, in string impl );

    void stake( in yort::claim what, in yoevt replyTo );

    void abandon( in yort::claim what )
      raises( notOwner );

    // return a list of claimed properties, restricted by a regular
    // expression.  If regexp if nil or empty, return all.
    yostd::stringList listProperties( in string regexp );

    // return the object associated with a property.  If no claim is
    // made on the property, returns nil.
    Object propertyResolve( in string property )
      raises( notUnique );
  };
};

#endif
