/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ystm.c - Time Management
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YSI_ORACLE
#include <ysi.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif

#define YSTM_INTERVAL   50000000      /* forced time sampling interval (50s) */

STATICF char *ysStrFrac(char *frac, ub4 usec, sword fraction);

/*
 * ystmInit() - initialize the time manager
 */
void ystmInit(ysctx *ctx)
{
  sysb8 interval;

  /* initialize tick counter */
  ctx->last = systmGetTicks();
  sysb8set(&ctx->ticks, sysb8zero);

  /* initialize clock */
  sysb8set(&ctx->start, sysb8zero);
  DISCARD systmGetClock(&ctx->start);
  sysb8mulb4(&ctx->start, &ctx->start, (sb4) 1000000);

  /* install the base system timer */
  sysb8ext(&interval, YSTM_INTERVAL);
  ysTimer(&interval, ysEvtSimple(ystmIdler, (dvoid *) 0));
}

/*
 * ystmIdler - time idler
 */
/*ARGSUSED*/
void ystmIdler(dvoid *usrp, CONST ysid *exid, dvoid *arg, size_t argsz)
{
  sysb8 tmp, interval;

  if (ysidEq(exid, YS_EX_SHUTDOWN))
    return;

  /* force a tick counter sample */
  ysClock(&tmp);

  /* install the base system timer */
  sysb8ext(&interval, YSTM_INTERVAL);
  ysTimer(&interval, ysEvtSimple(ystmIdler, (dvoid *) 0));
}

/*
 * ysClock - get clock
 */
void ysClock(sysb8 *clk)
{
  ysctx *ctx;
  ub4    cur, diff;

  ctx = (ysctx *) yscGet(YSC_YSCTX);

  /* get the current microsecond tick counter */
  cur = systmGetTicks();

  /* compute the difference since our last sample */
  diff = cur - ctx->last;

  /* if the current sample is less than the last sample, or it has been more
   * than twice our required sample interval, then we will assume a clock
   * reset occurred.  To ensure monotonicity, we simply assume one millisecond
   * elapsed and continue from there.  The assumption of one millisecond is
   * no doubt very wrong, but we have no basis by which to choose anything
   * else.  (On machines where systmGetTicks() is not subject to clock reset,
   * this comparison is unnecessary, but is fast enough not to warrant
   * special-casing by platform.)
   */
  if ((diff & 0x80000000) != 0 || diff > 2 * (YSTM_INTERVAL))
    diff = 1000;

  /* preserve the latest tick counter sample */
  ctx->last = cur;

  /*
   * compute cumulative time elapsed since initialization.  We accumulate
   * the sum of the differences in order to handle the wrap that occurs
   * every 35 minutes with a 32-bit signed microsecond value.
   */
  sysb8addb4(&ctx->ticks, &ctx->ticks, (sb4) diff);

  /*
   * This routine is supposed to return the clock time since an epoch.
   * During initialization, we record the start clock time.  After that,
   * we simply add ticks to our initial start time.
   */
  sysb8add(clk, &ctx->ticks, &ctx->start);
}

/*
 * ysConvClock - convert to a structured clock value
 */
void ysConvClock(sysb8 *clk, ystm *sttm)
{
  sysb8 secs, tmp, rm;

  sysb8ext(&tmp, 1000000);
  sysb8edv(clk, &tmp, &secs, &rm);
  systmClockToTime(&secs, sttm);
  sttm->usec = ((ub4) sysb8msk(&rm));
  sttm->sign = TRUE;
}

/*
 * ysConvDelta - convert delta to structured form
 */
void ysConvDelta(sysb8 *clk, ystm *sttm)
{
  sysb8 val, tmp, rm;

  /* remove the sign */
  if (sttm->sign = sysb8cmp(clk, >=, sysb8zero))
    sysb8set(&val, clk);
  else
    sysb8neg(&val, clk);

  /* break out the fields */
  sysb8ext(&tmp, 1000000);
  sysb8edv(&val, &tmp, &val, &rm);
  sttm->usec = ((ub4) sysb8msk(&rm));

  sysb8ext(&tmp, 60);
  sysb8edv(&val, &tmp, &val, &rm);
  sttm->sec = (sword) sysb8msk(&rm);

  sysb8ext(&tmp, 60);
  sysb8edv(&val, &tmp, &val, &rm);
  sttm->min = (sword) sysb8msk(&rm);

  sysb8ext(&tmp, 24);
  sysb8edv(&val, &tmp, &val, &rm);
  sttm->hour = (sword) sysb8msk(&rm);

  sttm->mday = (sword) sysb8msk(&val);

  sttm->mon = 0;
  sttm->year = 0;
}

/*
 * ysStrClock - format structured clock
 */
static CONST_DATA char ystmMon[] = "JanFebMarAprMayJunJulAugSepOctNovDec";

char *ysStrClock(char *buf, ystm *sttm, boolean year, sword fraction)
{
  char yr[16], frac[16];

  /* format year */
  if (year)
    ysFmtStr(yr, " %d", sttm->year);
  else
    yr[0] = '\0';

  ysFmtStr(buf, "%.3s %2d %02d:%02d:%02d%s%s", ystmMon + (sttm->mon - 1) * 3,
	   sttm->mday, sttm->hour, sttm->min, sttm->sec, 
	   ysStrFrac(frac, sttm->usec, fraction), yr);
  return buf;
}

/*
 * ysStrDelta - format structured delta
 */
char *ysStrDelta(char *buf, ystm *sttm, sword fraction)
{
  char frac[16];

  ysFmtStr(buf, "%c%04d %02d:%02d:%02d%s",
	   (sttm->sign ? ' ' : '-'), sttm->mday, sttm->hour, sttm->min,
	   sttm->sec, ysStrFrac(frac, sttm->usec, fraction));
  return buf;
}

/*
 * ysStrFrac - format fractional part
 */
STATICF char *ysStrFrac(char *frac, ub4 usec, sword fraction)
{
  if (fraction < 0)
    fraction = 0;
  if (fraction > 6)
    fraction = 6;

  if (fraction)
    {
      ysFmtStr(frac, ".%06d", usec);
      frac[fraction+1] = '\0';
    }
  else
    frac[0] = '\0';

  return frac;
}
