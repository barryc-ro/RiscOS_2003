/*---------------------------------------------------------------------------*/
/* mtcctx.c     Media Tools Context ConTeXt                                  */
/*                                                                           */
/* This module provides an interface to a simple context manager.  The goal  */
/* of this manager is to use one global variable (to be created on a         */
/* port-specific basis) to create a data structure which can maintain global */
/* contexts for multiple components.                                         */
/*                                                                           */
/* MODIFIED                                                                  */
/*   dpawson    07/10/95        Change include of s.h                        */
/*   dpawson    06/20/94        Optimize further for time                    */
/*   dpawson    06/19/94        Creation                                     */
/*---------------------------------------------------------------------------*/

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif /* !SYSI_ORACLE */

#ifndef MTCCTX_ORACLE
#include <mtcctx.h>
#endif /* !MTCCTX_ORACLE */
#ifndef YS_ORACLE
#include <ys.h>
#endif

typedef struct mtcctxCtx mtcctxCtx;

struct mtcctxCtx
{
  sword  initcnt;                                              /* # of inits */
  dvoid *ctxs[MTCTXLAST];                                        /* contexts */
};

ub4 mtcctxInit(void)
{
  mtcctxCtx *mctx;

  mctx = (mtcctxCtx *) yscGet(YSC_MTCCTX);
  if (!mctx)
    {
      mctx = (mtcctxCtx *) ysmGlbAlloc(sizeof(mtcctxCtx), "mtcctxCtx");
      DISCARD memset(mctx, 0, sizeof(mtcctxCtx));
      DISCARD yscSet(YSC_MTCCTX, (dvoid *) mctx);
    }

  mctx->initcnt++;
  return 1;
}

void mtcctxDone(void)
{
  mtcctxCtx *mctx;

  mctx = (mtcctxCtx *) yscGet(YSC_MTCCTX);
  if (mctx)
    {
      mctx->initcnt--;
      if (!mctx->initcnt)
	{
	  ysmGlbFree((dvoid *) mctx);
	  DISCARD yscSet(YSC_MTCCTX, (dvoid *) 0);
	}
    }
}

ub4 mtcctxPut(mtcctxType type, ub4 inst, dvoid *thectx)
{
  mtcctxCtx *mctx;

  if (inst)
    yseThrow(YS_EX_NOTIMPL);

  mctx = (mtcctxCtx *) yscGet(YSC_MTCCTX);
  if (!mctx)
    yseThrow(YS_EX_NOTINIT);
  mctx->ctxs[type] = thectx;
  return MTCCTXSUCC;
}

dvoid *mtcctxGet(mtcctxType type, ub4 inst)
{
  mtcctxCtx *mctx;

  if (inst)
    yseThrow(YS_EX_NOTIMPL);

  mctx = (mtcctxCtx *) yscGet(YSC_MTCCTX);
  if (!mctx)
    yseThrow(YS_EX_NOTINIT);
  return mctx->ctxs[type];
}
