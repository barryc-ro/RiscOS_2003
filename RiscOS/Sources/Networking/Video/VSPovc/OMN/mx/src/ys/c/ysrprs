/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ysrprs.c - Oracle MOOSE Resource Manager Parse Routines
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSI_ORACLE
#include <ysi.h>
#endif

STATICF boolean ysResPrs(CONST char *nm, sword ln, CONST char *res,
			 boolean dflt);

/*
 * ysResParse - parse a resource line
 */
boolean ysResParse(CONST char *nm, sword ln, CONST char *res)
{
  return ysResPrs(nm, ln, res, FALSE);
}

/*
 * ysResDefaults - add resource defaults
 */
void ysResDefaults(char **dflts)
{
  sword ln = 1;

  while (*dflts)
    {
      DISCARD ysResPrs("defaults", ln++, *dflts, TRUE);
      dflts++;
    }
}

/*
 * ysResPrs - parse a resource line
 *   If dflt is TRUE, then the resource is only added if the name doesn't
 *   already exist in the resource database.
 */
STATICF boolean ysResPrs(CONST char *nm, sword ln, CONST char *res,
			 boolean dflt)
{
  char   *buf;
  boolean fst;
  CONST char *scc, *msg;

  /* skip leading white space */
  while (isspace(*res))
    res++;

  /* ignore comment line */
  if (*res == '#' || !*res)
    return TRUE;

  /* consume resource name terminated by '=' or ':' */
  scc = res;
  fst = (*scc != '*');
  do
    {
      if (!fst)
	scc++;

      fst = TRUE;
      while (isalpha(*scc) || isdigit(*scc) || *scc == '_' || *scc == '-')
	scc++, fst = FALSE;

      if (fst)
	break;
    }
  while (*scc == '.' || *scc == '*');

  /* skip more white space */
  while (isspace(*scc))
    scc++;

  /* process resource name */
  if (!*scc)
    msg = "separator not found";
  else if (*scc != '=' && *scc != ':')
    msg = "syntax error in resource name";
  else
    {
      msg = (char *) 0;
      buf = (char *) ysmGlbAlloc(scc - res + 1, "temp");
      DISCARD memcpy((dvoid *) buf, res, scc - res);
      buf[scc - res] = '\0';

      /* skip more white space */
      do
	scc++;
      while (isspace(*scc));

      if (!dflt || !ysResGet(buf))
	ysResSet(buf, scc);

      ysmGlbFree((dvoid *) buf);
    }

  /* print error, if any, and return */
  if (msg)
    {
      if (nm)
	yslError("%s:%d: %s", nm, ln, msg);
      else
	yslError("%s: %s", ysProgName(), msg);
      return FALSE;
    }
  else
    return TRUE;
}
