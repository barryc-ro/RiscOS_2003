/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ycmain.c - Main entrypoint to IDL compiler
 *
 * NOTES
 * -x <trace> is an internal option for enabling various levels of
 * tracing. Currently supported modes are:
 *
 *    parse	Dump a parse trace of compiler built with PXDEBUG defined
 *    ifr       Enables IFR tracing. What, where, when determined by IFR
 *
 * HISTORY
 * 09/30/96 kcoleman	Tidy up for strict CORBA naming style
 * 08/26/96 kcoleman	Remove warning about CORBA 2.0 and COA
 * 07/19/96 kcoleman	Fix memory leak in ycctxFree
 * 06/27/96 kcoleman    Bug #377748 - OCCS global constant violations
 * 06/12/96 kcoleman	Hide -g and -c for OMN 3.2 freeze
 * 04/16/96 kcoleman	Change how abs names are cached in IFR usrp
 * 04/08/96 kcoleman	Use ysRecord for error reporting.
 * 03/22/96 kcoleman	Static typecode generation
 * 02/26/96 kcoleman	New options for C++
 * 02/12/96 kcoleman	Interface to yrDestroyRepository changed. See yrdst.c.
 * 02/05/96 kcoleman	Support for CORBA 2.0 stubs
 * 02/01/96 kcoleman	Change -H to -l. -H reserved for ysr.
 * 01/03/96 kcoleman	Added cleanup call for parser AST's
 * 12/07/95 dpranke     add __DATE__ to ysFmtVersion call for banner
 * 12/01/95 kcoleman	Added -U for #undefs from command line
 * 11/17/95 dpranke     add ability to generate ITL client stubs (-z, -Z)
 *                      do yrOpenRepository, yrCloseRepository here
 * 11/07/95 kcoleman	Change interpretation of -s, remove -C
 * 08/22/95 kcoleman	Rename some resources so -help looks better, add -e.
 * 08/11/95 kcoleman	Stash input file name in context, add -i.
 * 07/26/95 kcoleman	Added -x and -q
 * 07/15/95 kcoleman	Fixed arg parsing to match new defn in ysr.h.
 * xx/xx/95 jolkin	Creation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif
#ifndef YSL_ORACLE
#include <ysl.h>
#endif


/*
 * Command-line Arguments
 * -a boa | coa		Select object adaptor. Currently, BOA or COA only.
 * -c                   Specify CORBA version (current, "1.2" or "2.0")
 * -D <name>{=value}	#define a macro
 * -E			Run preprocessor only
 * -I <path>		Include file search dir
 * -i			Generate code for #included IDL files.
 * -g 			Code gen language, one or more of: c, cplus
 * -l                   Generate just the public header
 * -n			Do not generate output. Just parse and analyze
 * -o <path>		Specify output path/prefix
 * -q            	Whether or not to use builtin sequences
 * -S			Generate a server implementation skeleton
 * -s corba | oracle	Naming style (corba or oracle)
 * -U <name>            #undef a macro
 * -z                   Generate _only_ ITL client stubs
 * -Z                   Generate ITL client stubs
 * 
 * @@ -z and -Z are deprecated - User should make use of the resource.
 * @@ Leave them for backward compatibility; remove after 4.0.
 *
 * Resources specific to a particular code gen language should be
 * prefixed by a language indicator. Some are not because I was too stupid
 * to do this from the beginning, so we're lugging around the old form.
 * The language prefixes are: c (C), cp (C++), itl (ITL).
 * 
 * Other resources supported by the compiler, but not manifest on the
 * command line are (all are preceded by "mnidlc."):
 *
 *   c-cplus-kwd=<boolean>       If true, prefix C++ as well as C keywords
 *                               when used as IDL ids. See yccIsKeyword.
 *                               Default is false.
 *   c-global-const=<boolean>    If true, typecodes, interface ids, and
 *                               exception ids are accessible as globals.
 *                               Default is false - function accessors.
 *   c-line-limit=<num>          Set max output line length. Must be >= 0.
 *                               See yccGetLineLimit and yccfp.c for details.
 *   c-no-supp=true              Suppresses generation of the __copy and
 *                               __free support functions. Default = FALSE.
 *   c-no-async=true             Do not generate async C client stubs.
 *   c-unshared-inherit=true     Generate new stubs for inherited ops and
 *                               attrs instead of re-using base version
 *                               (unimplemented).
 *   tmpl-hdr-only=true          When used with -S, generate only the
 *                               implementation skeleton header. Default is
 *                               to gen both with -S, neither without -S.
 *   header-suffix=<string>      Set header file suffix. Use to override
 *                               default of ".h".
 *   source-suffix=<string>      Set source file suffix. Use to override
 *                               default of ".c" or ".cpp".
 *   iao-srvr-gen=<boolean>      In conjunction with mnidlc.server-template,
 *                               Enables gen of IAO server impls. See
 *                               ycpragma.c, ycctmpl.c.
 *   static-typecodes=<boolean>  Generate static typecodes for included types.
 *                               Default is false.
 *   debug-trace-type=<keyword>  See below. Enables various debug traces.
 *
 *   cp-namespace=<boolean>      Use C++ namespaces. Default = FALSE.
 *   cp-rtti=<boolean>           Assume C++ RTTI is available. Default = FALSE.
 *   cp-eh=<boolean>             Use native C++ exceptions. Default = FALSE.
 *
 * Debug/tracing info is enabled by the mnidlc.debug-trace-type resource. 
 * The currently supported keywords are:
 *
 *   parse          Dumps parser trace via builtin slax capabilities.
 *                  Requires the compiler to have been built with YC_DEBUG
 *                  defined.
 *   ifr            Dumps IFR data file information. Really a pass-through
 *                  to the yr component. Only meaningful with -r.
 *   sym            Enables symbol contents and statistics dump.
 */

static struct ysargmap map[] =
{
  { 'a', "mnidlc.obj-adaptor", YSARG_MANY },
  { 'D', "mnidlc.preprocess.define", YSARG_MANY },
  { 'E', "mnidlc.preprocess-only=true", 0 },
  { 'I', "mnidlc.preprocess.include", YSARG_MANY },
  { 'i', "mnidlc.gen-include=true", 0},
  { 'l', "mnidlc.header-only=true", 0 },
  { 'n', "mnidlc.no-output=true", 0 },
  { 'o', "mnidlc.outputpath", 1 },
  { 'q', "mnidlc.nobuiltin-seq=true", 0 },
  { 'r', "mnidlc.save-repository=true", 0 },
  { 'S', "mnidlc.server-template=true", 0 },
  { 's', "mnidlc.c-mapping.style", YSARG_MANY },
  { 'U', "mnidlc.preprocess.undef", YSARG_MANY },
  { 'w', "mnidlc.no-warn=true",0},
#ifdef YCITL
  { 'z', "mnidlc.itl-only=true", 0 },
  { 'Z', "mnidlc.itl-mapping=true", 0 },
#endif
  { YSARG_PARAM, "mnidlc.sourcefile", 1 },
  { 0, (char *) 0, 0 }
};


/* -------------------------------------------------------------------- */
/*
 * Local function prototypes
 */
STATICF boolean ycAll(ycctx *ctx);
STATICF void yctxFree( ycctx* ctx);
STATICF boolean ycProcessCmdLine( ycctx* ctx);
STATICF boolean ycProcessLang( ycctx* ctx);


/* -------------------------------------------------------------------- */
/*
 * ycMain - main entrypoint
 */
boolean ycMain(dvoid *osdp, char *nm, sword argc, char **argv)
{
  boolean ok;
  ycctx  ctx;
  sword  sts;
  char   buf[100];
  yssnk* errsink = (yssnk*)0;

  /***** initialization *****/
  ysInit(osdp, "mnidlc");

  CLRSTRUCT( ctx);
  sts = ysArgParse(argc, argv, map);
  if (sts == YSARG_VERSION)
  {
    yslError("Oracle Media Net IDL Compiler\n");
    buf[0] = '\0';
    yslError(ysVersion(buf, sizeof(buf)));
  }
  ok = (sts == YSARG_NORMAL);

  /***** Set up error reporting *****/
  if (ok)
  {
    if ( !ysResGetLast( "ys.log.msg-path") )
    {
      yslError("Warning: ys.log.msg-path not set. Unable to locate messages.\n");
    }
        /* stomp the default sink so we can control the msg format */
    errsink = ysSinkFind( "tty");
    if ( errsink )
      ysSinkDestroy( errsink);
      /* create our own sink, using ycRecordCB for err reporting */
    errsink = ysSinkCreate("mnidlc", ycRecordCB, (dvoid*) &ctx);
    ysSinkSetFilter(errsink, ysFilterSimple, (dvoid *) 0,
                    (ysFilterCB *) 0, (dvoid **) 0);
    if ( ysResGet( "mnidlc.debug-trace-type") )
      ysAddFilter( errsink, YC_MSG_FILTER(7));    /* includes debug msgs */
    else if ( ysResGetBool( "mnidlc.verbose") )
      ysAddFilter( errsink, YC_MSG_FILTER(6));    /* includes info msgs */
    else if ( ysResGetBool( "mnidlc.no-warn") )
      ysAddFilter( errsink, YC_MSG_FILTER(3));    /* only errors */
    else
      ysAddFilter( errsink, YC_MSG_FILTER(4));    /* errs and warns */
  }

  /***** check command line and begin phases *****/
  if ( ok && (ok = ycProcessCmdLine( &ctx)) )
  {
    yseTry
    {
      ctx.srcnm = ysResGetLast("mnidlc.sourcefile");
      ok = (ctx.srcnm ? ycAll(&ctx) : TRUE);
      if ( ctx.errcnt || ctx.wrncnt )
        ysRecord( YCMSG(4), YCINFOSEV, YSLSB4(ctx.errcnt), 
                  YSLSB4(ctx.wrncnt), YSLEND);
    }
    yseCatch( YC_EX_SYNTAX)
    {
      ysRecord( YCMSG(48), YCERRSEV, YSLEND);
      ok = FALSE;
    }
    yseCatchAll
    {
      CONST char* fn;
      sword ln;

      yseGetLoc(&fn, &ln);
      ysRecord( YCMSG(0), YCERRSEV, YSLSTR(ysidToStr(yseExid)), 
                YSLSTR(fn), YSLSB4(ln), YSLEND);
      ok = FALSE;
    }
    yseEnd
  }

  /***** termination *****/
  if ( errsink )
    ysSinkDestroy( errsink);

  yctxFree( &ctx);
  ysTerm(osdp);
  return ok;
}

/* -------------------------------------------------------------------- */
/*
 * ycAll - perform all compiler phases
 */
STATICF boolean ycAll(ycctx *ctx)
{
  sysb8 clk;
  ysle* le;

  /* initialize context */
  ctx->errcnt = 0;
  ctx->wrncnt = 0;
  ctx->nms = ysLstCreate();

  ycpp(ctx);                                               /* pre-processing */
  if (!ctx->errcnt && !ysResGet("mnidlc.preprocess-only"))
  {
    ycprs(ctx);                                                 /* parsing */

    if (!ctx->errcnt)
    {
      yslst* traceopts;

      ctx->repository = yrCreateRepository();
      ctx->corba_object = yrLookup( ctx->repository, "CORBA::Object");
        /* See if we need to turn on Interface Repository tracing */
      traceopts = ysResGet( "mnidlc.debug-trace-type");
      if ( traceopts )
      {
        for ( le = ysLstHead( traceopts); le; le = ysLstNext(le) )
          if ( ysStrCaseCmp( "ifr", (char*) ysLstVal(le)) == 0 )
          {
             yrSetTraceLevel( ctx->repository, 1);
	     break;
          }
      }

      ctx->symtbl = ycSymTblCreate();
      ycSymInsert( ctx->symtbl, ctx->corba_object);   /* seed with Object */
      ycsem(ctx);
      if ( !ctx->errcnt )
      {
        ysClock(&clk);
        ctx->tmpfn = (ub4) sysb8msk(&clk);
        if ( ysResGet("mnidlc.save-repository") )           /* IFR data */
           ycDumpIFR( ctx);
	if ( !ctx->errcnt && !ysResGet("mnidlc.no-output") )
        {    /* generate stub code */
          for (le = ysLstHead(ctx->cgmaps); le; le = ysLstNext(le))
          {
            ycgmap* lang = (ycgmap*)ysLstVal(le);

            ctx->lang = lang;
            (*lang->driver)( ctx);                          /* stub code gen */
          }
        }
      }
      ycSymTblDestroy( ctx->symtbl);
      yrDestroyRepository( ctx->repository, (ysmff)0, (ysmff)0);
    }
  }

  ysLstDestroy(ctx->nms, (ysmff) ysStrDestroy);
  ctx->nms = (yslst*)0;
  return (ctx->errcnt ? FALSE : TRUE);
}


/* -------------------------------------------------------------------- */
/*
 * yctxFree - Free up the space used by a ycctx.
 * 
 * DOES NOT FREE <ctx>. Just frees what's in it.
 */

STATICF void yctxFree( ycctx* ctx)
{
  /* ctx->nms is destroyed by ycAll */
  /* ctx->mdtbl already destroyed by preprocessor */
  /* ctx->mdexp already destroyed by preprocessor */
  /* ctx->curln is just a pointer into ctx->tu */
  /* ctx->tokq already destroyed by the parser */
  /* ctx->srcnm points directly into the resource db, not owned by us */

  if ( ctx->tu )
  {
    ysLstDestroy(ctx->tu, (ysmff) ycLnFree);
    ctx->tu = (yslst*)0;
  }

  if ( ctx->root )
  {
    ycfDefns( ctx->root);
    ctx->root = (yslst*) 0;
  }

  if ( ctx->newobjs )
  {
    ysLstDestroy( ctx->newobjs, (ysmff)ycgObjDestroy);
    ctx->newobjs = (yslst*)0;
  }

  if ( ctx->seqs )
  {
    ysLstDestroy( ctx->seqs, (ysmff)0);
    ctx->seqs = (yslst*)0;
  }

  if ( ctx->scopes )
    ycgDestroyScopeStack(ctx);

  if ( ctx->cgmaps )
    ysLstDestroy( ctx->cgmaps, (ysmff)ysmFGlbFree);
}

/* -------------------------------------------------------------------- */
/*
 * ycProcessCmdLine - Check command line/resource settings for
 *   consistency, update context accordingly.
 */
STATICF boolean ycProcessCmdLine( ycctx* ctx)
{
  boolean ok = TRUE;
  CONST char* arg;

    /***** get naming style (-s) *****/
  if ( (arg = ysResGetLast( "mnidlc.c-mapping.style")) )
  {
    if ( !ysStrCaseCmp( arg, "ansi") )
      ctx->style = YCSTYLE_ANSI;
    else if ( !ysStrCaseCmp( arg, "oracle") )
      ctx->style = YCSTYLE_ORA;
    else if ( !ysStrCaseCmp( arg, "corba") )
    {
      ctx->style = YCSTYLE_CORBA;
      ctx->style |= YCSTYLE_ANSI;
    }
    else
    {
      ysRecord( YCMSG(7), YCERRSEV, YSLSTR(arg), YSLEND);
      ok = FALSE;
    }
  }
  else
    ctx->style = YCSTYLE_ANSI;     /* @@ for 4.0, make CORBA default style */

    /***** Determine the object adaptor (-a) *****/
  arg = ysResGetLast( "mnidlc.obj-adaptor");

  if ( !arg )
    ctx->objAdaptor = YCOA_BOA;
  else if ( ysStrCaseCmp( arg, "coa") == 0 )
  {
    if ( ycStyleCORBA(ctx) )
    {
      ysRecord( YCMSG(107), YCWARNSEV, YSLEND);
      ctx->objAdaptor = YCOA_BOA;
    }
    else
      ctx->objAdaptor = YCOA_COA;
  }
  else if ( ysStrCaseCmp( arg, "boa") == 0 )
    ctx->objAdaptor = YCOA_BOA;
  else
  {
    ysRecord( YCMSG(85), YCERRSEV, YSLSTR(arg), YSLEND);
    ok = FALSE;
  }

    /***** What CORBA version are we generating stubs for? (-c) *****/
  arg = ysResGetLast( "mnidlc.corba-vers");
   
  if ( !arg )
    ctx->corbaVers = YCORB_1_2;
  else
  {
    if ( strcmp( arg, "1.2") == 0 )
      ctx->corbaVers = YCORB_1_2;
    else if ( strcmp( arg, "2.0") == 0 )
      ctx->corbaVers = YCORB_2_0;
    else
    {
      ysRecord( YCMSG(87), YCERRSEV, YSLSTR(arg), YSLEND);
      ok = FALSE;
    }
  }
    /***** Check language mapping options *****/
  if ( ok )
    ok = ycProcessLang(ctx);
  return ok;
}

/* -------------------------------------------------------------------- */
/*
 * ycProcessLang - Process code gen language mapping settings from cmd line.
 *
 * This is wrapped up in here so that we can check the -g option values
 * in a case insensitive manner, so that we can insure code is only
 * generated for each language mapping at most once, and so that we can
 * handle backwards compatibility for the -z and -Z options as a means of
 * driving ITL stub generation.
 *
 * This function smacks you and exits if it encounters an unrecognized 
 * language.
 *
 * A list of all the language maps for which we need to generate code is
 * returned. If no explicit language mappings are specified, C is the default.
 */

#ifndef YC_LANG_LEN_MAX
#define YC_LANG_LEN_MAX 10
   /* max length of args to -g (language mapping names) */
#endif

STATICF boolean ycProcessLang( ycctx* ctx)
{
  boolean genC = FALSE;
  boolean genCPlus = FALSE;
  boolean genITL = FALSE;
  yslst* langs;

    /***** Check the -g settings *****/ 
  langs = ysResGet( "mnidlc.language");
  if ( langs )
  {
    ysle* le;
    for ( le = ysLstHead(langs); le; le = ysLstNext(le))
    {
      char* name = (char*) ysLstVal(le);

      if ( (name[1] == '\0') && ((name[0] == 'c') || (name[0] == 'C')) )
        genC = TRUE;            /* "-g c" */
      else
      {
        if ( ysStrCaseCmp( "cplus", name) == 0 )
          genCPlus = TRUE;     /* "-g cplus" */
        else if ( ysStrCaseCmp( "itl", name) == 0 )
          genITL = TRUE;       /* "-g itl" */
        else
        {
          ysRecord( YCMSG(101), YCERRSEV, YSLSTR(name), YSLEND);
          return FALSE;
        }
      }
    }
  }
    /***** No -g, check remaining resources *****/
  else if ( ysResGetBool("mnidlc.itl-only") )    /* backward compat for -z */
    genITL = TRUE;
  else                    /* default to C generation */
  {
    if ( ysResGetBool("mnidlc.itl-mapping") )    /* backward compat for -Z */
      genITL = TRUE;
    genC = TRUE;
  }

  langs = ysLstCreate();
  if ( genC )
    DISCARD ysLstEnq( langs, (dvoid*)yccLangMap(ctx));
  else if ( genCPlus )
    DISCARD ysLstEnq( langs, (dvoid*)yccpLangMap(ctx));
  else if ( genITL )
    DISCARD ysLstEnq( langs, (dvoid*)yciLangMap(ctx));
  ctx->cgmaps = langs;
  return TRUE;
}
