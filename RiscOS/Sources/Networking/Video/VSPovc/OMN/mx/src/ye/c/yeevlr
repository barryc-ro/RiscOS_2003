/* Copyright (c) Oracle Corporation 1996.  All Rights Reserved. */

/*
   NAME
   yeevlr.c
   DESCRIPTION
   Log reader client program.  Communicates with yeevld using the
   yeevlog.idl interfaces.
   
   usage: [stripped form]
   
   mnlogreader [-F][-c][-e] [-t log-type] [-n log-impl-name]
   [-i log-path] [-f filter]
   
   PUBLIC FUNCTIONS
   <x>
   PRIVATE FUNCTIONS
   <x>
   NOTES
   <x>
   MODIFIED   (MM/DD/YY)
   dbrower   01/24/96 -  created.
   dbrower   03/ 1/96 -  olint.
   dbrower   03/28/96 -  filter-spec takes 1 arg only.
   dbrower   04/15/96 -  Bugs 357894, 357914, interim fixes.
   dbrower   04/18/96 -  more on above -- cheat and use setjmp/longjmp.
			Bug 357914 and Bug 357894.
    dbrower   04/19/96 -  even more - latch cleanup state.
    dbrower   04/22/96 -  add -F tail-at-end of events to log.
    dbrower   06/12/96 -  use local logProc if possible.
    dbrower   06/17/96 -  fix arguments.
    dbrower   07/16/96 -  fix -e -- was SEGVing.
    dbrower   10/10/96 -  work on interrupt handling, bug 411328.
    dbrower   11/ 8/96 -  fix bug 420033 - don't destroy ysResGet lists!
*/


#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef SYSB8_ORACLE
#include <sysb8.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
#ifndef YSR_ORACLE
#include <ysr.h>
#endif
#ifndef YSL_ORACLE
#include <ysl.h>
#endif
#ifndef YSV_ORACLE
#include <ysv.h>
#endif
#ifndef YSSP_ORACLE
#include <yssp.h>
#endif
#ifndef YT_ORACLE
#include <yt.h>
#endif
#ifndef YEEVENT_ORACLE
#include <yeevent.h>
#endif
#ifndef YEEVLOG_ORACLE
#include <yeevlog.h>
#endif
#ifndef YEEV_ORACLE
#include <yeev.h>
#endif
#ifndef YEU_ORACLE
#include <yeu.h>
#endif
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
#ifndef YDIDL_ORACLE
#include <ydidl.h>
#endif
#ifndef YEMSG_ORACLE
#include <yemsg.h>
#endif
#ifndef YEEVF_ORACLE
#include <yeevf.h>
#endif
#ifndef YEEVLG_ORACLE
#include <yeevlg.h>
#endif

#define ENTRY_POINT yeevlrMain
#include <s0ysmain.c>

/* PRIVATE TYPES AND CONSTANTS */

#define BATCHSIZE (sb4)10

#define FMTBUF_SIZE ((size_t)32*1024)

#define yeevlrStr( s ) (s ? s : (char *)"<null>")

/*
 * Command-line Arguments -- none for now!
 */
static struct ysargmap yeevlrmap[] =
{
  { 'c', "mnlogreader.continuous-head=true", 0},
  { 'e', "mnlogreader.continuous-tail-events=true", 0},
  { 'f', "mnlogreader.filter-spec", 1},
  { 'i', "mnlogreader.log-file-name", 1},
  { 'm', "ys.log.msg-path", YSARG_MANY},
  { 'n', "mnlogreader.implementation-name", 1 },
  { 't', "mnlogreader.log-dest-type", 1},
  { 0, (char *) 0, 0 }
};

typedef struct yeevlrcx yeevlrcx;

/* corresponds to a yeevlog_logProc object */
struct yeevlrcx
{
  yemsgcx	*yemsg_yeevlrcx;
  yoenv		env_yeevlrcx;
  yeev		ev_yeevlrcx;
  boolean	exiting_yeevlrcx;
  boolean	cleaned_yeevlrcx;
  yeevlgcx	*lg_yeevlrcx;

  char		*fmtbuf;
  boolean	tail;		/* doing event tail */
  yeevReceiver	rcv;
  yslst		*filters;
  boolean	destroyf;	/* kill filters at end. */
  yeevl_log	log;
  yeevl_listIterator li;
  yeevDiscList	dlist;		/* filters in log sender */

} ;

/* global memory tags */
externdef ysmtagDecl(yeevlrs_tag) = "yeevlrs";

/* local exceptions */
externdef ysidDecl( YEEVLR_EX_BAD_LTYPE ) = "::yeevlr::badLType";

STATICF void yeevlrPanicHdlr(CONST ysid *exid, dvoid *ptr);
STATICF void yeevlrCleanup( yeevlrcx *cx );
STATICF void yeevlr_eventHandler( yeevr *rec, dvoid *usrp );

/* log type decoder */
STATICF yeevl_logType yeevlrLType( CONST char *s );

/* PUBLIC FUNCTIONS */

/* ---------------------------- yeevlrMain ---------------------------- */
/*
   NAME
    yeevlrMain
   DESCRIPTION
    Main function for the ORB event control program
   PARAMETERS
     osdp    -- osd pointer
     nm	    -- program name string
     argc    -- arg count
     argv    -- argument vector.
   RETURNS
     TRUE on success, FALSE on error exit.
*/

boolean yeevlrMain(dvoid *osdp, char *nm, sword argc, char **argv)
{
  boolean   ok;
  noreg boolean rv = TRUE;
  char      vbuf[80];
  sb4	    sts;
  yeevlrcx  cx;
  char	    *type;
  char	    *path;
  char	    *impl;
  boolean   head = FALSE;
  boolean   nomore = FALSE;
  sysb8	    waittime;
  ysevt	    *sem;
  
  yeevl_logProc	logger;
  yeevl_yeevld fixedattrs;
  yeevl_yeevla varattrs;
  yeevl_yeevlrList  rlist;
  yeevdSeq dlist;
  
  yeevl_yeevlr	*lrec;
  ysle	    *e;
  ub4	    i;
  char	    *f;
  
  NOREG(rv);

  cx.li = (yeevl_listIterator)0; 
  cx.rcv = (yeevReceiver)0;
  cx.dlist = (yeevDiscList)0;
  cx.log = (yeevl_log)0;

  /* initialization */
  ysInit(osdp, nm);
  sts = ysArgParse(argc, argv, yeevlrmap);
  if (sts == YSARG_VERSION)
  {
    yslError("Oracle Media Exchange ORB Log Reader Client Program");
    vbuf[0] = 0;
    yslError(ysVersion(vbuf, sizeof(vbuf)));
  }
  ok = (sts == YSARG_NORMAL);
  
  if (!ok)
    return(FALSE);
  
  DISCARD yseSetPanic(yeevlrPanicHdlr, (dvoid*)&cx);
  
  yseTry
  {
    ytInit();
    yoInit();
    
    yoEnvInit( &cx.env_yeevlrcx );
    cx.fmtbuf = (char*)ysmGlbAlloc( FMTBUF_SIZE, "format buffer" );
  
    /* wait 2 secs on each eof before retry */
    sysb8ext( &waittime, 2*1000000 );
  
    /* ready to use msg files */
    cx.yemsg_yeevlrcx = yemsgInit();

    type = ysResGetLast("mnlogreader.log-dest-type");
    path = ysResGetLast("mnlogreader.log-file-name");
    impl = ysResGetLast("mnlogreader.implementation-name");
    cx.tail = ysResGetBool("mnlogreader.continuous-tail-events");
    head = ysResGetBool("mnlogreader.continuous-head");
    
    if( !type )
      type = (char*)"binfile";
    if( !path )
      path = (char*)"yeevld.log";
    
    cx.ev_yeevlrcx = yeevInit( (ysque*)0 );
    cx.exiting_yeevlrcx = FALSE;
    cx.cleaned_yeevlrcx = FALSE;
    
    /* Make local log access objects */
    cx.lg_yeevlrcx = yeevlgInit( (ysque*)0, cx.ev_yeevlrcx, FALSE );

    cx.destroyf = FALSE;
    cx.filters = ysResGet("mnlogreader.filter-spec");
    
    /* create filters to send to log iterator */
    ysFmtStr( vbuf, "%s:%s %s rcv",
	     ysGetHostName(), ysGetPid(), ysProgName());
    cx.rcv = yeev_createReceiver( cx.ev_yeevlrcx, &cx.env_yeevlrcx, vbuf );

    if( !cx.filters )
    {
      cx.destroyf = TRUE;
      cx.filters = ysLstCreate();
    }
    if( !ysLstCount(cx.filters) )
      /* default -- pass everything */
      DISCARD ysLstEnq( cx.filters, (dvoid*)0 ); 
    dlist._maximum = ysLstCount( cx.filters );
    if( !dlist._maximum )
      dlist._maximum = 1;
    dlist._buffer =
      (yeevd*)ysmGlbAlloc( sizeof(yeevd) * (size_t)dlist._maximum, "dlist"); 
    for( i = 0, e = ysLstHead( cx.filters ); e ; i++, e = ysLstNext(e) )
    {
      f = (char*)ysLstVal(e);
      dlist._buffer[i].qual_yeevd = f;
      dlist._buffer[i].dest_yeevd = cx.rcv;
    }
    dlist._length = i;
   
    if( cx.tail )		/* tail event stream only */
    {
      if( !impl )		/* never us! */
	impl = "mnlogsrv";
	
      /* locate qualifying logger  */
      logger = (yeevl_logProc)yoBind( yeevl_logProc__id, impl,
				     (yoRefData*)0, (char*)0 );

      /* attach handler to receiver */
      DISCARD yeevReceiverSetHandler(cx.rcv,yeevlr_eventHandler,(dvoid*)&cx);
  
      /* program filters to our receiver */
      cx.dlist = yeevl_logProc__get_filters( logger, &cx.env_yeevlrcx );
      yeevDiscList_replaceDest( cx.dlist, &cx.env_yeevlrcx, &dlist );
      yoRelease( (dvoid*)logger ); 

      /* receive/print events until interrupt */
      yoService( (ysque*)0 );
    }
    else			/* read file */
    {
      /* locate qualifying logger  */
      logger = (yeevl_logProc)yoBind( yeevl_logProc__id, impl,
				     (yoRefData*)0, (char*)0 );

      /* open the log */
      fixedattrs.type_yeevld = yeevlrLType( type );
      fixedattrs.file_yeevld = path;
      fixedattrs.oper_yeevld = yeevl_disabled_operState;
      varattrs.maxLogSizeKb_yeevla = 0;
      varattrs.capAlarmThresholdKb_yeevla = 0;
      varattrs.keepCount_yeevla = 0;
      varattrs.fullAction_yeevla = yeevl_halt_fullType;
      varattrs.admin_yeevla = yeevl_locked_adminState;
	
      cx.log = yeevl_logProc_openLog( logger, &cx.env_yeevlrcx,
				     &fixedattrs, &varattrs );
      yoRelease( (dvoid*)logger ); 
	
      /* make iterator and start the reads */
      yeevl_log_getRecordRange( cx.log, &cx.env_yeevlrcx, (sb4)0, BATCHSIZE,
			       &dlist, TRUE, &rlist,
			       (yeevl_listIterator*)&cx.li );
	
      /* process returned records and get more */
      for( nomore = FALSE ; head || !nomore || rlist._length ; )
      {
	for( i = 0 ; i < rlist._length ; i++ )
	{
	  lrec = &rlist._buffer[i];
	  yeevShowLRec( cx.yemsg_yeevlrcx, lrec, cx.fmtbuf, FMTBUF_SIZE );
	}
	yeevl_yeevlrList__free( &rlist, yoFree );

	nomore = yeevl_listIterator_getNextN( cx.li, &cx.env_yeevlrcx,
					     BATCHSIZE, &rlist );
	if( !rlist._length && nomore && head)
	{
	  sem = ysSemCreate((dvoid*)0);
	  ysTimer( &waittime, sem );
	  ysSemWait( sem );
	  ysSemDestroy( sem );
	  sem = (ysevt*)0;
	}
      }
      yeevl_yeevlrList__free( &rlist, yoFree );
    }
  }
  yseCatchObj(YEEVL_EX_OPERATIONFAILED, yeevl_OperationFailed, exr )
  {
    yslError("%s %s: %s\n", ysProgName(), ysidToStr(yseExid), exr.reason );
    rv = FALSE;
  }
  yseCatch( YS_EX_INTERRUPT )
  {
  }
  yseCatchAll
  {
    yslError("%s caught unexpected exception %s, exiting\n",
	     ysProgName(), ysidToStr(yseExid));
    rv = FALSE;
  }
  yseEnd;
  
  /* now in shutdown phase, normal or after interrupt */

  yseTry
  {
    cx.exiting_yeevlrcx = TRUE;
    yeevlrCleanup( &cx );
    yeevTerm( cx.ev_yeevlrcx );

    ysmGlbFree((dvoid*)dlist._buffer);
    ysmGlbFree( (dvoid*)cx.fmtbuf );
    yoEnvFree( &cx.env_yeevlrcx );
    yemsgTerm(cx.yemsg_yeevlrcx);
  }
  yseCatch( YS_EX_INTERRUPT )
  {
    yslError("yeevlrMain: interrupt while exiting\n");
  }
  yseCatchAll
  {
    yslError("%s unexpected exception %s while exiting\n",
	     ysProgName(), ysidToStr(yseExid));
    rv = FALSE;
  }
  yseEnd;      
  yseTry
  {
    yoTerm();
    ytTerm();
  }
  yseCatchAll
    yslError("%s caught exception %s while exiting\n",
	     ysProgName(), ysidToStr(yseExid));
  yseEnd;
  ysTerm(osdp);
  return rv;
}

/* ---------------------------------------------------------------- */
/* PRIVATE FUNCTIONS */
/* ---------------------------------------------------------------- */


/* ---------------------------- yeevlrPanicHdlr ---------------------------- */
/*
  NAME
    yeevlrPanicHdlr
  DESCRIPTION
    Handle a panic situation.  Shutdown the event system to avoid
    leaks in the logger and return.
  PARAMETERS
    exid	-- the exception, noted with yslError.
    ptr		-- the context, as a dvoid *.
  RETURNS
    none
*/

STATICF void yeevlrPanicHdlr(CONST ysid *exid, dvoid *ptr)
{
  yeevlrcx *cx = (yeevlrcx *)ptr;

  yslError("yeevlrPanicHdlr: exception %s, ptr %x\n",
	   exid ? ysidToStr(exid) : "<none>" , ptr);

  if( cx && !cx->exiting_yeevlrcx )
  {
    cx->exiting_yeevlrcx = TRUE;
    yeevTerm( cx->ev_yeevlrcx );
  }
}



/* ---------------------------- yeevlrCleanup ---------------------------- */
/*
  NAME
    yeevlrCleanup
  DESCRIPTION
    Cleanup remaining stuff in the context, during interrupt or normal
    shutdown.
  PARAMETERS
    cx	    -- the context.
  RETURNS
    none
*/

STATICF void yeevlrCleanup( yeevlrcx *cx )
{
  if( !cx->cleaned_yeevlrcx )
  {
    cx->cleaned_yeevlrcx = TRUE;

    if( cx->destroyf )
      ysLstDestroy( cx->filters, (ysmff)0 );
    
    /* if tail, reprogram logger to stop sending to us */
    if( cx->tail && cx->dlist )
      yeevDiscList_destroyDest( cx->dlist, &cx->env_yeevlrcx, cx->rcv );

    if( cx->li )
      yeevl_listIterator_destroy( cx->li, &cx->env_yeevlrcx );
    
    if( cx->log )
      yeevl_log_destroy( cx->log, &cx->env_yeevlrcx );
    
    if( !cx->exiting_yeevlrcx )
    {
      if( cx->rcv )
	yeevReceiver_destroy( cx->rcv, &cx->env_yeevlrcx );
    }
  }

  if( cx->lg_yeevlrcx )
  {
    yeevlgTerm( cx->lg_yeevlrcx );
    cx->lg_yeevlrcx = (yeevlgcx*)0;
  }
}


/* ---------------------------- yeevlrLType ---------------------------- */
/*
  NAME
    yeevlrLType
  DESCRIPTION
    Decode text form of log type to constant.
  PARAMETERS
    s	    -- log type as a string.
  RETURNS
    enum of _logType value.
*/

STATICF yeevl_logType yeevlrLType( CONST char *s )
{
  yeevl_logType rv = 0;

  if( !s )
    yseThrow( YEEVLR_EX_BAD_LTYPE );
  else if( !strcmp( s, "textfile" ) )
    rv = yeevl_textfile_logType;
  else if( !strcmp( s, "binfile" ) )
    rv = yeevl_binfile_logType;
  else if( !strcmp( s, "sysbin" ) )
    rv = yeevl_sysbin_logType;
  else if( !strcmp( s, "console" ) )
    rv = yeevl_console_logType;
  else if( !strcmp( s, "syslog" ) )
    rv = yeevl_syslog_logType;
  else if( !strcmp( s, "tty" ) )
    rv = yeevl_tty_logType;
  else
    yseThrow( YEEVLR_EX_BAD_LTYPE );
  return( rv );
}


/* ------------------------ yeevlr_eventHandler --------------------------- */
/*
  NAME
    yeevlr_eventHandler
  DESCRIPTION
    handle/print events pushed by the logger.  This is attached to a
    local yeevReceiver.
  PARAMETERS
    rec	    -- the event record
    usrp    -- the context, as a dvoid *.
  RETURNS
    None
*/

STATICF void yeevlr_eventHandler( yeevr *rec, dvoid *usrp )
{
  yeevlrcx *cx = (yeevlrcx*)usrp;

  yeevShowRec( cx->yemsg_yeevlrcx, rec, cx->fmtbuf, FMTBUF_SIZE );
}




