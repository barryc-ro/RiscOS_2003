/* Copyright (c) 1994 by Oracle Corporation */
/*
 * $Log$
 * Revision 1.2  94/08/26  18:27:34  rlager
 * olinted.
 * 
 * Revision 1.3  94/08/23  12:43:10  rlager
 * Added copyright, log, and id
 * 
 */
/* Change Log:
 * 08/08/95   asamuels Rename public functions
 * 07/10/95   dpawson  Change include of s.h
 * 04/28/95   dbrower  remove include of mds0; this doesn't need it
 *		       and won't build on sequent with it in place.
 * 2/27/95    dpawson  Move definitions into a public header where they
 *                     belong.
 * 7/6/94     Rusty    Moved the defintion of rectx back here.
 * 6/30/94    Rusty    Changed the re routines to use a context struct
 *                     instead of static variables. Its up to the user
 *                     to free the context.
 */
/*
 * routines to do regular expression matching
 *
 * Entry points:
 *
 *      typedef {
 *         char expbuf[ESIZE];
 *         char *braslist[NBRA];
 *         char *braelist[NBRA];
 *         char circf;
 *      } mtrgxCtx;
 *
 *      mtrgxCtx *mtrgxComp(s)
 *              char *s;
 *       ... returns a mtrgxCtx ptr if the string was compiled successfully
 *                   NULL otherwise.
 *           If passed 0 or a null string returns without changing
 *           the currently compiled re (see note 11 below).
 *
 *      mtrgxExec(ctx, s)
 *              mtrgxCtx *ctx;   the context from mtrgxComp.
 *              char *s;
 *       ... returns 1 if the string s matches the last compiled regular
 *                     expression,
 *                   0 if the string s failed to match the last compiled
 *                     regular expression, and
 *                  -1 if the compiled regular expression was invalid
 *                     (indicating an internal error).
 *
 * The strings passed to both mtrgxComp and mtrgxExec may have trailing or
 * embedded newline characters; they are terminated by nulls.
 *
 * The identity of the author of these routines is lost in antiquity;
 * this is essentially the same as the re code in the original V6 ed.
 *
 * The regular expressions recognized are described below. This description
 * is essentially the same as that for ed.
 *
 *      A regular expression specifies a set of strings of characters.
 *      A member of this set of strings is said to be matched by
 *      the regular expression.  In the following specification for
 *      regular expressions the word `character' means any character but NUL.
 *
 *      1.  Any character except a special character matches itself.
 *          Special characters are the regular expression delimiter plus
 *          \ [ . and sometimes ^ * $.
 *      2.  A . matches any character.
 *      3.  A \ followed by any character except a digit or ( )
 *          matches that character.
 *      4.  A nonempty string s bracketed [s] (or [^s]) matches any
 *          character in (or not in) s. In s, \ has no special meaning,
 *          and ] may only appear as the first letter. A substring
 *          a-b, with a and b in ascending ASCII order, stands for
 *          the inclusive range of ASCII characters.
 *      5.  A regular expression of form 1-4 followed by * matches a
 *          sequence of 0 or more matches of the regular expression.
 *      6.  A regular expression, x, of form 1-8, bracketed \(x\)
 *          matches what x matches.
 *      7.  A \ followed by a digit n matches a copy of the string that the
 *          bracketed regular expression beginning with the nth \( matched.
 *      8.  A regular expression of form 1-8, x, followed by a regular
 *          expression of form 1-7, y matches a match for x followed by
 *          a match for y, with the x match being as long as possible
 *          while still permitting a y match.
 *      9.  A regular expression of form 1-8 preceded by ^ (or followed
 *          by $), is constrained to matches that begin at the left
 *          (or end at the right) end of a line.
 *      10. A regular expression of form 1-9 picks out the longest among
 *          the leftmost matches in a line.
 *      11. An empty regular expression stands for a copy of the last
 *          regular expression encountered.
 */
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif /* !SYSI_ORACLE */

#ifndef YS_ORACLE
# include <ys.h>
#endif

#ifndef MTRGX_ORACLE
#include <mtrgx.h>
#endif /* !MTRGX_ORACLE */


/*
 * constants for re's
 */
#define CBRA    1
#define CCHR    2
#define CDOT    4
#define CCL     6
#define NCCL    8
#define CDOL    10
#define CEOF    11
#define CKET    12
#define CBACK   18

#define CSTAR   01

STATICF sword   advance(mtrgxCtx *ctx,
                      char  *lp,
                      char  *ep );



STATICF sword backref( mtrgxCtx *ctx, sword i, char  *lp )
{
  char  *bp;

  bp = ctx->braslist[i];
  while (*bp++ == *lp++) if (bp >= ctx->braelist[i]) return(1);
  return(0);
}

STATICF sword cclass( char *set, char c, sword af )
{
  sword   n;

  if (c == 0) return(0);
  n = *set++;
  while (--n) if (*set++ == c) return(af);
  return(!af);
}


/*
 * compile the regular expression argument into a dfa
 */
mtrgxCtx *mtrgxComp( char *sp, CONST char **errstr )
{
  mtrgxCtx *ctx = (mtrgxCtx *)ysmGlbAlloc(sizeof(mtrgxCtx), "mtrgxCtx");
  sword  c;
  char  *ep = ctx->expbuf;
  sword  cclcnt,
         numbra = 0;
  char  *lastep = 0;
  char   bracket[NBRA];
  char  *bracketp = &bracket[0];
  CONST  char *retoolong = "Regular expression too long";

#define comerr(ctx, msg) { \
   *errstr = msg; \
   ysmGlbFree((dvoid *)ctx); \
   return NULLP(mtrgxCtx); } 

  if (sp == 0 || *sp == '\0')
  {
    /* The new version of mtrgxComp won't be able to assume that
    ** you want to use the old version of the string, since we
    ** don't know what it was.
    */
    if (*ep == 0)
    {
       /* No previous regular expression */
       comerr(ctx, "No previous regular expression")
    }
    else
    {
       comerr(ctx, "Null input string")
    }
  }
  if (*sp == '^')
  {
    ctx->circf = 1;
    sp++;
  }
  else ctx->circf = 0;
  for (;;)
  {
    if (ep >= &(ctx->expbuf[ESIZE])) comerr(ctx, retoolong);
    if ((c = *sp++) == '\0')
    {
      if (bracketp != bracket) comerr(ctx, "unmatched \\(");
      *ep++ = CEOF;
      *ep++ = 0;
      return ctx;
    }
    if (c != '*') lastep = ep;
    switch (c)
    {

    case '.':                                         /* regex special chars */
      *ep++ = CDOT;
      continue;

    case '*':
      if (lastep == 0 || *lastep == CBRA || *lastep == CKET) goto defchar;
      *lastep |= CSTAR;
      continue;

    case '$':
      if (*sp != '\0') goto defchar;
      *ep++ = CDOL;
      continue;

    case '[':
      *ep++  = CCL;
      *ep++  = 0;
      cclcnt = 1;
      if ((c = *sp++) == '^')
      {
        c      = *sp++;
        ep[-2] = NCCL;
      }
      do
      {
        if (c == '\0') comerr(ctx, "missing ]");
        if (c == '-' && ep[-1] != 0)
        {
          if ((c = *sp++) == ']')
          {
            *ep++ = '-';
            cclcnt++;
            break;
          }
          while (ep[-1] < c)
          {
            *ep = ep[-1]+1;
            ep++;
            cclcnt++;
            if (ep >= &(ctx->expbuf[ESIZE])) comerr(ctx, retoolong);
          }
        }
        *ep++ = c;
        cclcnt++;
        if (ep >= &(ctx->expbuf[ESIZE])) comerr(ctx, retoolong);
      }
      while ((c = *sp++) != ']');
      lastep[1] = cclcnt;
      continue;

    case '\\':
      if ((c = *sp++) == '(')
      {
        if (numbra >= NBRA) comerr(ctx, "too many \\(\\) pairs");
        *bracketp++ = numbra;
        *ep++       = CBRA;
        *ep++       = numbra++;
        continue;
      }
      if (c == ')')
      {
        if (bracketp <= bracket) comerr(ctx, "unmatched \\)");
        *ep++ = CKET;
        *ep++ = *--bracketp;
        continue;
      }
      if (c >= '1' && c < ('1'+NBRA))
      {
        *ep++ = CBACK;
        *ep++ = c-'1';
        continue;
      }
      *ep++ = CCHR;
      *ep++ = c;
      continue;

    defchar:
    default:
      *ep++ = CCHR;
      *ep++ = c;
    }
  }
}


/*
 * match the argument string against the compiled re
 */
sword mtrgxExec( mtrgxCtx *ctx, char  *str )
{
  char        *p1 = str;
  char        *p2 = ctx->expbuf;
  sword        c;
  sword        rv;

  for (c = 0; c < NBRA; c++)
  {
    ctx->braslist[c] = NULLP(char);
    ctx->braelist[c] = NULLP(char);
  }
  if (ctx->circf) return((advance(ctx, p1, p2)));
  /*
   * fast check for first character
   */
  if (*p2 == CCHR)
  {
    c = p2[1];
    do
    {
      if (*p1 != c) continue;
      if (rv = advance(ctx, p1, p2)) return(rv);
    }
    while (*p1++);
    return(0);
  }
  /*
   * regular algorithm
   */
  do if (rv = advance(ctx, p1, p2)) return(rv);
  while (*p1++);
  return(0);
}

/*
 * try to match the next thing in the dfa
 */
STATICF sword advance( mtrgxCtx *ctx, char *lp, char *ep )
{
  char   *curlp;
  sword   ct,
          i;
  sword   rv;

  for (;;)
  {
    switch (*ep++)
    {

    case CCHR:                                            /* plain character */
      if (*ep++ == *lp++) continue;
      return(0);

    case CDOT:
      if (*lp++) continue;
      return(0);

    case CDOL:
      if (*lp == '\0') continue;
      return(0);

    case CEOF:
      return(1);

    case CCL:
      if (cclass(ep, *lp++, 1))
      {
        ep += *ep;
        continue;
      }
      return(0);

    case NCCL:
      if (cclass(ep, *lp++, 0))
      {
        ep += *ep;
        continue;
      }
      return(0);

    case CBRA:
      ctx->braslist[*ep++] = lp;
      continue;

    case CKET:
      ctx->braelist[*ep++] = lp;
      continue;

    case CBACK:
      if (ctx->braelist[i = *ep++] == 0) return(-1);
      if (backref(ctx, i, lp))
      {
        lp += ctx->braelist[i]-ctx->braslist[i];
        continue;
      }
      return(0);

    case CBACK | CSTAR:
      if (ctx->braelist[i = *ep++] == 0) return(-1);
      curlp = lp;
      ct    = ctx->braelist[i]-ctx->braslist[i];
      while (backref(ctx, i, lp)) lp += ct;
      while (lp >= curlp)
      {
        if (rv = advance(ctx, lp, ep)) return(rv);
        lp -= ct;
      }
      continue;

    case CDOT | CSTAR:
      curlp = lp;
      while (*lp++) ;
      goto star;

    case CCHR | CSTAR:
      curlp = lp;
      while (*lp++ == *ep) ;
      ep++;
      goto star;

    case CCL | CSTAR:
    case NCCL | CSTAR:
      curlp = lp;
      while (cclass(ep, *lp++, ep[-1] == (CCL | CSTAR))) ;
      ep += *ep;
      goto star;

    star:
      do
      {
        lp--;
        if (rv = advance(ctx, lp, ep)) return(rv);
      }
      while (lp > curlp);
      return(0);

    default:
      return(-1);
    }
  }
}
