/* Copyright (c) Oracle Corporation 1995.  All Rights Reserved. */

/*
  NAME
    yeced.c
  DESCRIPTION

    yeced Corba event channel daemon.  Implements arbitrary event channels;
    needs no pre-compiled stubs for target implementations.
    
  PUBLIC FUNCTIONS
    <x>
  PRIVATE FUNCTIONS
    <x>
  NOTES
    <x>
  MODIFIED   (MM/DD/YY)
    dbrower   11/14/95 -  created
    dbrower   03/ 1/96 -  olint
    dbrower   10/10/96 -  change interrupt handling, bug 411328
    dbrower   07/12/96 -  convert to ysRecord, remove client.
*/    

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
#ifndef YSR_ORACLE
#include <ysr.h>
#endif
#ifndef YSL_ORACLE
#include <ysl.h>
#endif
#ifndef YSV_ORACLE
#include <ysv.h>
#endif
#ifndef YT_ORACLE
#include <yt.h>
#endif
#ifndef YSSP_ORACLE
#include <yssp.h>
#endif
#ifndef YEEV_ORACLE
#include <yeev.h>
#endif
#ifndef YEU_ORACLE
#include <yeu.h>
#endif
#ifndef YECEVCH_ORACLE
#include <yecevch.h>
#endif
#ifndef YECE_ORACLE
#include <yece.h>
#endif

#define ENTRY_POINT yecedMain
#include <s0ysmain.c>

/* PRIVATE TYPES AND CONSTANTS */

#define YECE_FAC    "YECE"

/*
 * Command-line Arguments -- none for now!
 */
static struct ysargmap map[] =
{
   { 0, (char *) 0, 0 }
};


STATICF void yecedServer( void );
STATICF void yecedPanicHdlr(CONST ysid *exid, dvoid *ptr);


/* PUBLIC FUNCTIONS */

/* ---------------------------- yecedMain ---------------------------- */
/*
  NAME
    yecedMain
  DESCRIPTION
    Main function for the ORB event channel daemon.
  PARAMETERS
    osdp    -- osd pointer
    nm	    -- program name string
    argc    -- arg count
    argv    -- argument vector.
  RETURNS
    TRUE on success, FALSE on error exit.

*/

boolean yecedMain(dvoid *osdp, char *nm, sword argc, char **argv)
{
  boolean   ok;
  sword     sts;
  char      vbuf[80];
  
  /* initialization */
  ysInit(osdp, nm);
  sts = ysArgParse(argc, argv, map);
  if (sts == YSARG_VERSION)
    {
      yslError("Oracle Media Exchange ORB COSS Event Channel Daemon");
      yslError(ysVersion(vbuf, sizeof(vbuf)));
    }
  ok = (sts == YSARG_NORMAL);
  
  if (!ok)
    return(FALSE);
  
  yseSetPanic(yecedPanicHdlr, (dvoid*)0);
  
  ytInit();
  yoInit();
  yslDetach();			/* this is a daemon */

  yseTry
  {
    yecedServer();
  }
  yseCatch( YS_EX_INTERRUPT )
  {
  }
  yseCatchAll
    yslError("%s caught exception %s, exiting\n",
	     ysProgName(), ysidToStr(yseExid));
  yseEnd;

  yseTry
  {
    yoTerm();
    ytTerm();
  }
  yseCatchAll
    yslError("%s caught exception %s while exiting\n",
	     ysProgName(), ysidToStr(yseExid));
  yseEnd;
  ysTerm(osdp);
  return TRUE;
}

/* ---------------------------------------------------------------- */
/* PRIVATE FUNCTIONS */
/* ---------------------------------------------------------------- */


/* ---------------------------- yecedServer ---------------------------- */
/*
  NAME
    yecedServer
  DESCRIPTION
    Become the yeced event channel server.   Return when everything
    is shut down.
  PARAMETERS
    none
  RETURNS
    none
*/
STATICF void yecedServer( void )
{
  yeceCa_Factory cef;
  ysque	    *q = (ysque*)0;
  yeev	    ev;
  
  ev = yeevRemoteLog( (yeev)0, q );

  /* 560, "yecedServer: Becoming ORBD Event Channel Server" */
  ysRecord(YS_PRODUCT,YECE_FAC,(ub4)560, YSLSEV_WARNING, (char*)0, YSLNONE);

  cef = yeceInit( q ); 

  yseSetPanic(yecedPanicHdlr, (dvoid*)cef);
  
  /* do service loop */
  
  yseTry
    yoService( q );
  yseFinally
  /* 561, "yecedServer: Entering service loop" */
  ysRecord(YS_PRODUCT,YECE_FAC,(ub4)561, YSLSEV_WARNING, (char*)0, YSLNONE);


  /* 562, "yecedServer: Exited service loop" */
  ysRecord(YS_PRODUCT,YECE_FAC,(ub4)562, YSLSEV_INFO, (char*)0, YSLNONE);
  
  /* 563, "yecedServer: terminating object services" */
  ysRecord(YS_PRODUCT,YECE_FAC,(ub4)563, YSLSEV_INFO, (char*)0, YSLNONE);


  /* 564, "yecedServer: ready to exit" */
  ysRecord(YS_PRODUCT,YECE_FAC,(ub4)564, YSLSEV_WARNING, (char*)0, YSLNONE);
    yeceTerm( cef );
  yseEnd;

  yeevTerm( ev );
}


/* ---------------- */
/* INTERNAL */
/* ---------------- */


STATICF void yecedPanicHdlr(CONST ysid *exid, dvoid *ptr)
{
  yeceCa_Factory cef = (yeceCa_Factory)ptr;
  
  yslError("yecdPanicHdlr: exception %s, ptr %x\n", ysidToStr(exid), ptr);
  if( cef )
    yeceTerm( cef );
}

