/* Copyright (c) 1994 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 * mnpsl.c - Media Net Process Server List
 *
 * REVISIONS
 * jolkin    09/19/94  Creation
 * dbrower   06/27/95  convert to new main.
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef MTL_ORACLE
#include <mtl.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MZN_ORACLE
#include <mzn.h>
#endif
#ifndef SMN_ORACLE
#include <smn.h>
#endif
#ifndef MNSC_ORACLE
#include <mnsc.h>
#endif

#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSR_ORACLE
#include <ysr.h>
#endif

#ifndef MTL_ORACLE
#include <mtl.h>
#endif

#ifndef MNPSL_ORACLE
#include <mnpsl.h>
#endif

#ifndef SMNI_ORACLE
#include <smni.h>
#endif

static struct ysargmap mnpslArgs[] =
{
  { 'g', "mn.sync-gateway", 1 },
  { 'a', "mnpsl.all=true", 0 },
  { 'l', "mnpsl.detail=true", 0 },
  { 's', "mnpsl.instances=true", 0 },
  { 'c', "mnpsl.calls=false", 0 },
  { YSARG_OPTPARAM, "mnpsl.queue-address", YSARG_MANY },
  { 0 }
};

STATICF dvoid  *mnpslAlloc(mnxStream *stream, size_t len);
STATICF sb4     mnpslPush(mnxStream *stream, dvoid *ptr);
STATICF void    mnpslDump(mnsqent *qs, ub4 current, boolean detail,
			boolean instances, boolean calls, ub4 naddr,
			mna *addrs);
STATICF boolean mnpslAddrMatch(mna *addr, ub4 naddr, mna *addrs);
STATICF void    mnpslDumpQueue(mnsqent *queue, ub4 current, boolean detail,
			      boolean banner);
STATICF void    mnpslDumpInst(mnsient *inst, ub4 current, boolean detail);
STATICF char   *mnpslDelay(char *active, ub4 diff);
STATICF void    mnpslDumpCall(mnscent *call, ub4 current, boolean detail);

boolean mnpsl(dvoid *osdCtx, const char *mn, sword argc, char **argv,
	      boolean mnAlive)
{
  mnxStream stream;
  sb4       cnt;
  ub4       current, j, naddr;
  mnrb     *bh;
  mna      *addrs;
  boolean   detail, instances, calls;
  mnsqent  *tmp, *scq;
  yslst	    *addrList;
  ysle	    *e;
  sword      sts;
  char       vbuf[80];

  /* process arguments */
  detail = instances = calls = FALSE;

  sts = ysArgParse( argc, argv, mnpslArgs );
  if (sts == YSARG_VERSION)
    yslError(ysVersion(vbuf, sizeof(vbuf)));
  if (sts != YSARG_NORMAL)
    return FALSE;

  if( ysResGetLast( "mnpsl.all" ) )
    instances = calls = TRUE;
  if( ysResGetLast( "mnpsl.detail" ) )
    detail = TRUE;
  if( ysResGetLast( "mnpsl.instances" ) )
    instances = TRUE;
  if( ysResGetLast( "mnpsl.calls" ) )
    calls = TRUE;

  if( (addrList = ysResGet("mnpsl.queue-address") ) )
    naddr = ysLstCount( addrList );
  else
    naddr = 0;

  if( !mnAlive && !smniInit( osdCtx, (mnLogger)0 ) )
    return( FALSE );

  if (naddr)
    {
      addrs = (mna *) ysmGlbAlloc((size_t) (sizeof(mna) * naddr), "addrs");
      for (j = 0, e = ysLstHead( addrList ) ; j < naddr; j++)
      {
	mnAddr(&addrs[j], (char *)e->ptr);
	e = ysLstNext( e );
      }
    }
  else
    addrs = (mna *) 0;

  /* locate process server */
  bh = mnrFindServer("mnsc", (mnrid *) 0);
  if (!bh)
    {
      mtlLog(mnError(mnLastError()));
      return( FALSE );
    }

  /* make the query */
  stream.alloc = mnpslAlloc;
  stream.push = mnpslPush;
  stream.close = (void (*)(mnxStream *, sb4)) 0;
  stream.usrp = (dvoid *) 0;

  cnt = mnsQuery(bh, &stream, &current);
  if (cnt < 0)
    mtlLog(mnError(cnt));
  else if (cnt == 0)
    mtlLog("no entries");
  else
    mnpslDump((mnsqent *) stream.usrp, current, detail, instances, calls,
	     naddr, addrs);

  /* free the state */
  tmp = (mnsqent *) stream.usrp;
  while (scq = tmp)
    {
      tmp = scq->next;
      mnxFree(mnsxQent, scq);
      ysmGlbFree(scq);
    }

  mnrFreeHandle(bh);
  if (naddr)
    ysmGlbFree(addrs);

  return( TRUE );
}

STATICF dvoid *mnpslAlloc(mnxStream *stream, size_t len)
{
  return ysmGlbAlloc(len, "mnpslAlloc");
}

STATICF sb4 mnpslPush(mnxStream *stream, dvoid *ptr)
{
  mnsqent *scq;

  scq = (mnsqent *) ptr;
  scq->next = (mnsqent *) stream->usrp;
  stream->usrp = (dvoid *) scq;
  return 0;
}

STATICF void mnpslDump(mnsqent *qs, ub4 current, boolean detail,
		      boolean instances, boolean calls, ub4 naddr, mna *addrs)
{
  mnsqent *scq;
  mnsient *sci;
  mnscent *scc;
  boolean  bnr;

  bnr = TRUE;
  for (scq = qs; scq; scq = scq->next)
    {
      if (!mnpslAddrMatch(&scq->caddr, naddr, addrs))
	continue;

      mnpslDumpQueue(scq, current, detail, bnr);
      bnr = FALSE;

      if (instances && scq->instances)
	{
	  bnr = TRUE;
	  if (detail)
	    yslPrint("\n   %-20.20s %-2s %5s %5s %s %s  %-20.20s\n",
		   "INSTANCE ADDR", "ST", "GETTM", "FWDTM", "CCNT", "DELAY",
		   "CALL ADDR");
	  else
	    yslPrint("\n   %-20.20s %-2s %5s %s %s\n",
		   "INSTANCE ADDR", "ST", "LAST", "CCNT", "DELAY");

	  for (sci = scq->instances; sci; sci = sci->next)
	    mnpslDumpInst(sci, current, detail);
	}

      if (calls && scq->calls)
	{
	  bnr = TRUE;
	  yslPrint("\n   %-20.20s %s\n", "CALL ADDR", "ARRIVAL");

	  for (scc = scq->calls; scc; scc = scc->next)
	    mnpslDumpCall(scc, current, detail);
	}

      if (calls || instances)
	yslPrint("\n");
    }
}

STATICF boolean mnpslAddrMatch(mna *addr, ub4 naddr, mna *addrs)
{
  if (!naddr)
    return TRUE;

  while (naddr && !mnaEq(addr, addrs))
    naddr--, addrs++;

  return (naddr != 0);
}

STATICF void mnpslDumpQueue(mnsqent *queue, ub4 current, boolean detail,
			   boolean banner)
{
  char st, *fl, out[MNAMAXLEN], ri[20], ci[20], qi[20];

  if (banner)
    {
      if (detail)
	yslPrint("%-20.20s %c%s %-12.12s %-12.12s %-12.12s   %-12.12s\n",
	       "QUEUE ADDR", 'S', "F", "ISTAT", "CSTAT", "QSTAT", "NAME");
      else
	yslPrint("%-20.20s %c%s %s %s %s %-40.40s\n",
	       "QUEUE ADDR", 'S', "F", "ICNT", "CCNT", "QCNT", "NAME");
    }

  mnAtos(&queue->caddr, out, MNAMAXLEN);

  switch (queue->status)
    {
    case 0: st = 'R'; break;
    case MNSC_PAUSE: st = 'P'; break;
    case MNSC_STOP: st = 'S'; break;
    default: st = 'U'; break;
    }

  fl = " ";
  if (queue->flags & MNSC_DAEMON)
    fl = "D";

  if (detail)
    {
      sprintf(ri, "%d/%d/%d/%d",
	      queue->regcur, queue->regavg, queue->regmax, queue->regtot);
      sprintf(ci, "%d/%d/%d/%d",
	      queue->cllcur, queue->cllavg, queue->cllmax, queue->clltot);
      sprintf(qi, "%d/%d/%d/%dms",
	      queue->quecur, queue->queavg, queue->quemax, queue->quedel);

      yslPrint("%-20.20s %c%s %-12.12s %-12.12s %-14.14s %-12.12s\n",
	     out, st, fl, ri, ci, qi, queue->name);
    }
  else
    yslPrint("%-20.20s %c%s %4d %4d %4d %-40.40s\n",
	   out, st, fl, queue->regcur, queue->cllcur, queue->quecur,
	   queue->name);
	   
}

STATICF void mnpslDumpInst(mnsient *inst, ub4 current, boolean detail)
{
  ub4  diff1, diff2;
  char *st, out[MNAMAXLEN], out2[MNAMAXLEN], active[10], active2[10], lfwd[10];

  mnAtos(&inst->addr, out, MNAMAXLEN);
  mnAtos(&inst->origaddr, out2, MNAMAXLEN);

  switch (inst->status)
    {
    case MNSC_PAUSE: st = "P"; break;
    case MNSC_REGISTER: st = "I"; break;
    case MNSC_CALLGET: st = "W"; break;
    case MNSC_CALLFWD: st = "R"; break;
    case MNSC_PAUSENEXT: st = "RP"; break;
    case MNSC_STOPNEXT: st = "RS"; break;
    default: st = "UN"; break;
    }

  diff1 = smnModSub(current, inst->cllget);
  diff2 = smnModSub(current, inst->cllfwd);

  if (detail)
    {
      if (inst->status == MNSC_REGISTER)
	sprintf(active, "");
      else
	mnpslDelay(active, diff1);

      if (!inst->clltot)
	strcpy(lfwd, "");
      else
	sprintf(lfwd, "%s", mnpslDelay(active2, diff2));

      yslPrint("   %-20.20s %-2s %5s %5s %4d %-6.6s %-20.20s\n",
	     out, st, active, lfwd,
	     inst->clltot, mnpslDelay(active2, inst->clldel),
	     out2, inst->queue->name);
    }
  else
    {
      if (inst->status == MNSC_PAUSE || inst->status == MNSC_CALLGET)
	mnpslDelay(active, diff1);
      else
	mnpslDelay(active, diff2);

      yslPrint("   %-20.20s %-2s %5s %4d %-6.6s\n",
	     out, st, active, inst->clltot, mnpslDelay(active2, inst->clldel));
    }
}

STATICF char *mnpslDelay(char *active, ub4 diff)
{
  ub4 secs;

  if (diff < 1000)
    sprintf(active, "%3dms", diff);
  else
    {
      secs = diff / 1000;
      if (secs < 60)
	sprintf(active, "%4ds", secs);
      else if (secs < 3600)
	sprintf(active, "%4dm", secs / 60);
      else
	sprintf(active, "%4dh", secs / 3600);
    }

  return active;
}

STATICF void mnpslDumpCall(mnscent *call, ub4 current, boolean detail)
{
  char out[MNAMAXLEN], active[10];

  mnAtos(&call->addr, out, MNAMAXLEN);
  mnpslDelay(active, smnModSub(current, call->arrival));
  yslPrint("   %-20.20s %5s\n", out, active);
}
