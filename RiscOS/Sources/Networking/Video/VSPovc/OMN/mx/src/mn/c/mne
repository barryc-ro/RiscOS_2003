/* Copyright (c) 1994 by Oracle Corporation.  All Rights Reserved.
 *
 * mne.c - Event Manager
 *
 * REVISIONS
 * jolkin    08/12/94  Creation of Version 2.1
 * jolkin    04/20/94  Creation of Version 2.0
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ysv.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNI_ORACLE
#include <mni.h>
#endif
#ifndef YSI_ORACLE
#include <ysi.h>
#endif

/*
 * Type & Constant Definitions
 */
typedef struct mnevt mnevt;                                  /* posted event */

struct mnectx
{
  mnq    evts;                                                /* event queue */

  mnSpin spinner;                                           /* spin function */
  dvoid *usrp;                                           /* spinner argument */
  ub4    interval;                                          /* spin interval */

  boolean   intrtrip;                                   /* interrupt tripped */
  sb4       intrsts;                                     /* interrupt status */
  mnsem    *intrsem;                                  /* interrupt semaphore */

  yslst    *tmrs;                                          /* list of timers */
};

struct mnsem
{
  ub4       cnt;                                              /* latch count */
  boolean   freed;                   /* true if semaphore has a pending free */
  boolean   autofree;    /* true if semaphore should be freed when it is set */

  mnHandler handler;                         /* handler to trip on sempahore */
  dvoid    *usrp;                                            /* user pointer */
  sb4       val;                                       /* value of semaphore */

  yscv     *cv;                                                /* cv pointer */
};

struct mnevt
{
  mnevt    *next;                                     /* next event in chain */
  mnHandler type;                                              /* event type */
  dvoid    *usrp;                                        /* handler argument */
  sb4       val;                                            /* handler value */
};

STATICF void mneTimerHndlr(dvoid *usrp, CONST ysid *exid, dvoid *arg,
			   size_t argsz);
STATICF void mnIdler(dvoid *usrp, CONST ysid *exid, dvoid *arg, size_t argsz);
STATICF void mnIntrHndlr(dvoid *usrp, CONST ysid *exid, dvoid *arg,
			 size_t argsz);

/*
 * mneInit - Initialize the event manager
 */
void mneInit(mnctx *ctx)
{
  mnectx *ectx;

  ectx = (mnectx *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnectx));

  mnqInit(&ectx->evts);

  ectx->spinner = (mnSpin) 0;
  ectx->usrp = (dvoid *) 0;
  ectx->interval = 0;

  ectx->intrtrip = FALSE;
  ectx->intrsem = (mnsem *) 0;

  ectx->tmrs = ysLstCreate();

  ctx->ectx = ectx;
  ysSetIdler("mnIdler", mnIdler, (dvoid *) ctx);
}

/*
 * mneTerm - Terminate the event manager
 *   Here we automatically timeout all semaphores, and then we flush
 *   the event queue without any processing.
 */
void mneTerm(mnctx *ctx)
{
  mnectx *ectx;
  mnevt  *tmpe;
  mnsem  *sem;

  ectx = ctx->ectx;

  if (ectx->intrsem)
    mneSet(ctx, ectx->intrsem, MNSTS_TERMINATE, TRUE);

  while (sem = (mnsem *) ysLstDeq(ectx->tmrs))
    mneSet(ctx, sem, MNERR_TIMEOUT, TRUE);
  ysLstDestroy(ectx->tmrs, (ysmff) 0);

  while (tmpe = (mnevt *) mnqDeq(&ectx->evts))
    {
      if (tmpe->type == mntBlowPort)
	mntBlowPort(tmpe->usrp, tmpe->val);
      mnmFree(ctx, (dvoid *) tmpe);
    }

  mnmFree(ctx, (dvoid *) ectx);
}

/*
 * mnePost - Post an event
 *   When an event occurs, some event description must be posted to
 *   the event queue.  When the event manager is later given control,
 *   events on the event queue will be dispatched.  Dispatch occurs
 *   by invoking the handler provided when the event was posted.
 *   Note that the handler also serves as a type identification of
 *   the event.  The usrp and val are simply passed back to the
 *   handler but have no special meaning to the event manager.
 */
void mnePost(mnctx *ctx, mnHandler type, dvoid *usrp, sb4 val)
{
  mnectx *ectx;
  mnevt  *evt;

  evt = (mnevt *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnevt));

  evt->type = type;
  evt->usrp = usrp;
  evt->val = val;

  ectx = ctx->ectx;
  mnqEnq(&ectx->evts, evt);
}

/*
 * mneTimer - Set a timer
 *   mneTimer() sets a timer to expire msec milliseconds in the
 *   future.  When the timer expires, the given semaphore will be
 *   set to MNERR_TIMEOUT.  Of course, the timer is approximate
 *   and is only as good as however often mnIdle() is called.
 */
void mneTimer(mnctx *ctx, ub4 msec, mnsem *sem)
{
  ysevt *evt;
  sysb8  timeout;

  mneLatch(ctx, sem);
  sysb8ext(&timeout, (sb4) msec);
  sysb8mulb4(&timeout, &timeout, (sb4) 1000);
  evt = ysEvtSimple(mneTimerHndlr, (dvoid *) sem);
  DISCARD ysLstEnq(ctx->ectx->tmrs, (dvoid *) sem);
  ysTimer(&timeout, evt);
}

/*
 * mneTimerHndlr - mneTimer() handler
 */
STATICF void mneTimerHndlr(dvoid *usrp, CONST ysid *exid, dvoid *arg,
			   size_t argsz)
{
  mnctx *ctx;
  ysle  *le;

  if (exid != YS_EX_SHUTDOWN)
    {
      yseTry
	ctx = mnGlbCtx;
      yseCatch(YS_EX_NOTINIT)
	ctx = (mnctx *) 0;
      yseEnd

      if (!ctx)
	return;

      for (le = ysLstHead(ctx->ectx->tmrs);
	   le && usrp != ysLstVal(le);
	   le = ysLstNext(le)) ;

      /* if it's not in the list, then it doesn't exist; don't try to
       * set it
       */
      if (le)
	{
	  DISCARD ysLstRem(ctx->ectx->tmrs, le);
	  mneSet(ctx, (mnsem *) usrp, MNERR_TIMEOUT, TRUE);
	}
    }
}

/*
 * 
 */
STATICF void mneSemDestroy(mnctx *ctx, mnsem *sem)
{
  ysle *le;

  for (le = ysLstHead(ctx->ectx->tmrs); le && ((dvoid *) sem != ysLstVal(le));
       le = ysLstNext(le)) ;

  if (le)
    DISCARD ysLstRem(ctx->ectx->tmrs, le);
  mnmFree(ctx, (dvoid *) sem);
}

/*
 * mneWait - Wait on semaphores
 *   mneWait() is the central wait routine of Media Net.  First, it
 *   idles to flush out any pending events and then determines if
 *   the given semaphores have been set.  This routine will continue
 *   to block until the number of set semaphores is greater than or
 *   equal to match.  It returns the total number of semaphores that
 *   were set, or MNSTS_ABORTED if aborted by a busy-wait routine.
 *
 *   Waiting is done in either a polling fashion, a blocked read
 *   fashion or a wait for interrupt fashion.  Polling is required
 *   if there is more than one receiving NIO and not all of them
 *   can generate an interrupt.  A blocked read is used if there
 *   is exactly one receiving NIO and it cannot generate an interrupt.
 *   Otherwise, we can just wait for an interrupt.  After each wait
 *   interval, it idles again and rechecks the semaphores.
 *
 *   This routine will also busy wait if necessary.
 *
 *   If no semaphore array is given, this routine will pass through
 *   the loop exactly once.  It will return 1 if successful.
 */
sb4 mneWait(mnctx *ctx, ub4 nsem, mnsem **sem, ub4 match)
{
  mnectx *ectx;
  ub4     cnt, i;
  yscv    localcv;

  ectx = ctx->ectx;
  ysCondCreate(&localcv);
  for (i = 0; i < nsem; i++)
    sem[i]->cv = &localcv;

  /* we enter a critical region here because an event may arrive in
   * the time between when we check the semaphores and the time when
   * we actually want to wait (by pausing or reading).  If we let the
   * interrupt fire to early, then we might block indefinitely even
   * though the event arrived.
   */
  ysMtxLock(&ctx->glbmtx);
  yseTry
    yseTry
      {
	do
	  {
	    for (i = cnt = 0; i < nsem; i++)
	      if (sem[i]->val != MNSTS_UNKNOWN)
		cnt++;

	    if (cnt < match)
	      ysCondWait(&localcv, &ctx->glbmtx);
	  }
	while (cnt < match);
      }
    yseFinally
      {
	ysMtxUnlock(&ctx->glbmtx);
	ysCondDestroy(&localcv);
	for (i = 0; i < nsem; i++)
	  sem[i]->cv = (yscv *) 0;
      }
    yseEnd
  yseCatch(YS_EX_INTERRUPT)
    cnt = MNSTS_ABORTED;
  yseCatch(YS_EX_SHUTDOWN)
    cnt = MNSTS_ABORTED;
  yseEnd

  return cnt;
}

/*
 * mneSemWait - Semaphore Wait Service Routine
 *   mneSemWait() is a service routine for mnSemWaitOr() and mnSemWaitAnd().
 *   First, it deals with a possible timeout by creating a timer semaphore
 *   and including that in the semaphore list to pass to mneWait().  Next,
 *   it deals with the special semantics of mnSemWaitAnd() which waits on
 *   a group of user semaphores OR the timer semaphore.
 *
 *   This routine returns the number of semaphores that were set, possibly
 *   0 if there was a timeout, or MNSTS_ABORTED.
 */
sb4 mneSemWait(mnctx *ctx, ub4 timeout, ub4 nsem, mnsem **sem, ub4 match)
{
  sb4    cnt, ccnt;
  mnsem *tsem, **seml;

  tsem = mnSemAlloc((dvoid *) 0);
  seml = (mnsem **)
    mnmAlloc(ctx, MNM_MAINPOOL, (size_t) ((nsem + 1) * sizeof(mnsem *)));
  mneTimer(ctx, timeout, tsem);

  if (sem)
    DISCARD memcpy(seml, sem, (size_t) (nsem * sizeof(mnsem *)));

  seml[nsem++] = tsem;

  cnt = 0;
  while (tsem->val == MNSTS_UNKNOWN && cnt >= 0 && cnt < (sb4) match)
    {
      ccnt = cnt + 1;
      cnt = mneWait(ctx, nsem, seml, (ub4) ccnt);
    }

  if (cnt > 0 && tsem->val != MNSTS_UNKNOWN)
    cnt--;

  mnSemFree(tsem);
  mnmFree(ctx, (dvoid *) seml);

  return cnt;
}

/*
 * mneSemSetHandler - sets a handler on the semaphore
 *   When the semaphore is later set to a final value, the given handler
 *   will be invoked.  A handler may be replaced by calling this again on
 *   the same semaphore (but will have no effect if the semaphore has
 *   already been set).  A handler may be disabled by passing a null
 *   value for the handler.
 */
void mneSemSetHandler(/*ARGUSED*/ mnctx *ctx, mnsem *sem, mnHandler handler,
		      boolean autofree)
{
  sem->autofree = autofree;
  sem->handler = handler;
}

/*
 * mneLatch - Latch a semaphore
 *   So that we may return pointers to semaphores for efficient operation,
 *   we must make sure that the user doesn't kill a pending routine when
 *   he frees a semaphore.  Any routine which therefore saves a semaphore
 *   with the intention of setting it in the future should latch it.  Then,
 *   even if the user frees the semaphore, it will still remain when the
 *   routine goes to set it.  (However, this doesn't protect other buffers
 *   associated with the semaphore, so the routine should check the semaphore
 *   before writing to associated buffers, in case the user freed those.)
 */
void mneLatch(/*ARGUSED*/ mnctx *ctx, mnsem *sem)
{
  sem->cnt++;
}

/*
 * mneUnlatch - unlatch a semaphore
 *   This unlatches (and possibly frees) a semaphore.  A routine which
 *   goes to set a semaphore but doesn't because it has already been
 *   set should just unlatch the semaphore instead to get rid of it.
 */
void mneUnlatch(mnctx *ctx, mnsem *sem)
{
  if (sem->cnt > 0)
    sem->cnt--;
  else
    mnPrint(MNLERROR, "INTERNAL:mneUnlatch");

  if (!sem->cnt && sem->freed)
    mneSemDestroy(ctx, sem);
}

/*
 * mneSet - Sets a semaphore
 *   When a semaphore is set, the value of the semaphore is changed
 *   from MNSTS_UNKNOWN; if there is a handler attached to the semaphore,
 *   the handler is posted.  The semaphore may automatically be freed
 *   at this point if a handler is posted.
 */
void mneSet(mnctx *ctx, mnsem *sem, sb4 val, boolean unlatch)
{
  /* if not freed and there is a handler, post it */
  if (!sem->freed)
    {
      sem->val = val;
      if (sem->cv)
	ysCondSignal(sem->cv);
      if (sem->handler)
	{
	  mnePost(ctx, sem->handler, sem->usrp, sem->val);
	  if (sem->autofree)
	    sem->freed = TRUE;
	}
    }

  if (unlatch)
    mneUnlatch(ctx, sem);
  else if (!sem->cnt && sem->freed)
    mneSemDestroy(ctx, sem);
}

/*
 * mneGet - get the semaphore value
 *   mneGet() is used by internal Media Net routines that need to see
 *   the value of a semaphore with out re-idling as mnSemTest() would
 *   do.
 */
sb4 mneGet(/*ARGUSED*/ mnctx *ctx, mnsem *sem)
{
  return sem->val;
}

/*
 * mneMakeSem - make a semaphore
 *   mneMakeSem() creates a semaphore from the handler and usrp arguments
 *   that are passed into routines that support asynchronous operation.
 *   This routine also latches the semaphore.
 */
mnsem *mneMakeSem(mnctx *ctx, mnHandler handler, dvoid *usrp)
{
  mnsem *sem;

  if (handler)
    {
      sem = mnSemAlloc(usrp);
      mneSemSetHandler(ctx, sem, handler, TRUE);
    }
  else if (usrp)
    sem = (mnsem *) usrp;
  else
    sem = mnSemAlloc((dvoid *) 0);

  mneLatch(ctx, sem);

  return sem;
}

/*
 * mnIdle - main idle loop (see mnIdle(3))
 */
ub4 mnIdle(void)
{
  ysYield();
  return (ub4) 10000;
}

/*
 * mnIdler - main idle loop implementation (installed as a ys idler)
 */
STATICF void mnIdler(dvoid *usrp, CONST ysid *exid, dvoid *arg, size_t argsz)
{
  mnctx  *ctx;
  mnectx *ectx;
  mnevt  *tmpe;

  if (exid)
    return;

  ctx = (mnctx *) usrp;
  ctx->idleactive = FALSE;
  ectx = (mnectx *) ctx->ectx;

  /* scan the NIOs */
  mnnScanNio(ctx);

  /* process all pending events; note that some event handlers
   * may themselves post events so we could be here a while; the
   * important thing is that so long as no handler calls mnIdle()
   * again, we won't see any more low-level events so the queue
   * should deplete fairly quickly.
   */
  while (tmpe = (mnevt *) mnqDeq(&ectx->evts))
    {
      (*tmpe->type)(tmpe->usrp, tmpe->val);
      mnmFree(ctx, (dvoid *) tmpe);
      ctx->idleactive = TRUE;
    }

  *((boolean *) arg) = ctx->idleactive;
}

/*
 * mnWait - wait for any event (see mnIdle(3))
 */
void mnWait(ub4 msec)
{
  sysb8 timeout;

  if (msec)
    {
      sysb8ext(&timeout, (sb4) msec);
      sysb8mulb4(&timeout, &timeout, (sb4) 1000);
      ysTimer(&timeout, ysEvtDummy());
    }

  ysBlock();
}

/*
 * mnSetBusyWait - set busy wait routine
 */
void mnSetBusyWait(mnSpin spinner, dvoid *usrp, ub4 interval)
{
  mnectx *ectx;

  ectx = mnGlbCtx->ectx;
  ectx->spinner = spinner;
  ectx->usrp = usrp;
  ectx->interval = (interval ? interval : 1);
}

/*
 * mnSemAlloc - allocate a semaphore
 */
mnsem *mnSemAlloc(dvoid *usrp)
{
  mnsem  *sem;

  sem = (mnsem *) mnmAlloc(mnGlbCtx, MNM_MAINPOOL, sizeof(mnsem));

  sem->cnt = 0;
  sem->freed = FALSE;
  sem->autofree = FALSE;
  sem->handler = (mnHandler) 0;
  sem->usrp = usrp;
  sem->val = MNSTS_UNKNOWN;
  sem->cv = (yscv *) 0;

  return sem;
}

/*
 * mnSemFree - free a semaphore
 */
void mnSemFree(mnsem *sem)
{
  if (sem->cnt)
    {
      sem->freed = TRUE;
      sem->val = MNSTS_ABORTED;
    }
  else
    mneSemDestroy(mnGlbCtx, sem);
}

/*
 * mnSemSetUsrp - set user pointer
 */
void mnSemSetUsrp(mnsem *sem, dvoid *usrp)
{
  sem->usrp = usrp;
}

/*
 * mnSemGetUsrp - get user pointer
 */
dvoid *mnSemGetUsrp(mnsem *sem)
{
  return sem->usrp;
}

/*
 * mnSemTest - test a single semaphore
 */
sb4 mnSemTest(mnsem *sem)
{
  DISCARD mnIdle();
  return sem->val;
}

/*
 * mnSemGroupTest - test a group of semaphores
 */
sb4 mnSemGroupTest(ub4 nsem, mnsem **sem)
{
  sb4 cnt;

  DISCARD mnIdle();

  for (cnt = 0; nsem; nsem--, sem++)
    if ((*sem)->val != MNSTS_UNKNOWN)
      cnt++;

  return cnt;
}

/*
 * mnSemWait - wait on one semaphore
 */
sb4 mnSemWait(mnsem *sem)
{
  sb4    cnt;

  cnt = mneWait(mnGlbCtx, (ub4) 1, &sem, (ub4) 1);
  return (cnt > 0 ? sem->val : cnt);
}

/*
 * mnSemOrW - wait on one of a group of semaphores
 */
sb4 mnSemOrW(ub4 timeout, ub4 nsem, mnsem **sem)
{
  if (!timeout)
    return mneWait(mnGlbCtx, nsem, sem, (ub4) 1);
  else
    return mneSemWait(mnGlbCtx, timeout, nsem, sem, (ub4) 1);
}

/*
 * mnSemAndW - wait on a group of semaphores
 */
sb4 mnSemAndW(ub4 timeout, ub4 nsem, mnsem **sem)
{
  if (!timeout)
    return mneWait(mnGlbCtx, nsem, sem, nsem);
  else
    return mneSemWait(mnGlbCtx, timeout, nsem, sem, nsem);
}

/*
 * mnTimer - create a generic timer for public use
 */
sb4 mnTimer(ub4 timeout, mnHandler handler, dvoid *usrp)
{
  mnctx *ctx;
  mnsem *sem;
  sb4    sts;

  ctx = mnGlbCtx;

  if (!timeout)
    timeout = 1;

  sem = mneMakeSem(ctx, handler, usrp);
  mneTimer(ctx, timeout, sem);
  mneUnlatch(ctx, sem);

  if (!handler && !usrp)
    {
      sts = mnSemWait(sem);
      mnSemFree(sem);
    }
  else
    sts = 0;

  return (sts == MNERR_TIMEOUT ? 0 : sts);
}

/*
 * mnSet - set a semaphore
 *   This is an undocumented but useful public entrypoint to set a semaphore
 *   for those programs sophisticated in the use of semaphores.
 */
void mnSet(mnsem *sem, sb4 val)
{
  mneSet(mnGlbCtx, sem, val, FALSE);
}

void mnPostIntr(sb4 sts)
{
  mnctx  *ctx;

  ctx = mnGlbCtx;
  ctx->ectx->intrsts = sts;
  ysIntr(YS_EX_INTERRUPT);
}

void mnSetIntrHandler(mnHandler hndlr, dvoid *usrp)
{
  mnctx *ctx;

  ctx = mnGlbCtx;
  if (ctx->ectx->intrsem)
    mneSet(ctx, ctx->ectx->intrsem, MNSTS_TERMINATE, TRUE);

  ctx->ectx->intrsem = mneMakeSem(ctx, hndlr, usrp);
  ctx->ectx->intrsts = 0;

  ysSetIntr(mnIntrHndlr, (dvoid *) ctx);
}

STATICF void mnIntrHndlr(dvoid *usrp, CONST ysid *exid, dvoid *arg,
			 size_t argsz)
{
  mnctx  *ctx;
  mnectx *ectx;

  ctx = (mnctx *) usrp;
  ectx = ctx->ectx;
  if (ectx->intrsem)
    mneSet(ctx, ectx->intrsem, ectx->intrsts, TRUE);
  ectx->intrsem = (mnsem *) 0;
}
