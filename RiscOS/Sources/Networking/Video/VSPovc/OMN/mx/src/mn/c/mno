/* Copyright (c) 1994 by Oracle Corporation.  All Rights Reserved.
 *
 * mno.c - OMN Control Protocol
 *
 * REVISIONS
 * jolkin    08/16/94  Creation of Version 2.1
 * jolkin    04/20/94  Creation of Version 2.0
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNI_ORACLE
#include <mni.h>
#endif

/*
 * mnoIn - handle incoming OCP packets
 */
void mnoIn(mnctx *ctx, mnnpkt *pkt)
{
  mnnhdr *phdr;
  ub1    *buf;
  mnp    *port;
  sb4     sts, seqid;
  mna    *addr, nioaddr;
  ub4     mask, flags;
  mnnpa  *pa;
  mnrte  *rte;
  mnnpkt *scp, *tmp;
  char   *cwd, out[MNAMAXLEN];

  phdr = (mnnhdr *) &pkt[1];
  buf = (ub1 *) &phdr[1];

  switch (pkt->seqid)
    {
    case MNOTYP_DESTNOTREACH:
    case MNOTYP_DESTNOTVALID:
      /* if these are destined for a specific port, then we will attempt
       * to locate and abort the port; otherwise, they are for the node
       * as a whole and they are simply enqueued.
       */
      if (!mnaPortNum(&phdr->dst))
	{
	  mnqEnq(&ctx->ocppkt, pkt);
	  mnoFill(ctx);
	}
      else
	{
	  sts = (pkt->seqid == MNOTYP_DESTNOTREACH ?
		 MNERR_BADADDR : MNERR_BADPROTO);

	  port = mntFindPort(ctx, &phdr->dst, &phdr->src);
	  if (port)
	    {
	      /* abort the port only if we are sending; if we are
	       * receiving, then this is for an acknowledgement and
	       * we don't care.
	       */
	      if (port->sstate > 0 && port->sstate != MNSTS_IDLE)
		mntAbort(ctx, port, sts);
	    }
	  else
	    mnPrint(MNLERROR, "send error but no port");

	  mnmFree(ctx, (dvoid *) pkt);
	}
      break;
    case MNOTYP_REDIRECT:
      /* redirects are the way that the address server takes itself out
       * of the loop between two processes that can communicate directly
       * with each other; the fields of the redirect message are sufficient
       * to insert the new route
       */
      addr = (mna *) buf;
      mask = smnNtoh4(*((ub4 *) (buf + sizeof(mna))));
      pa = (mnnpa *) (buf + sizeof(mna) + sizeof(ub4));
      if (pkt->len >
	  sizeof(mnnhdr) + sizeof(mna) + sizeof(ub4) + sizeof(mnnpa))
	flags =
	  smnNtoh4(*((ub4 *) (buf+sizeof(mna)+sizeof(ub4)+sizeof(mnnpa))));
      else
	flags = 0;

      /* update routing table */
      rte = mnaFindRoute(ctx, addr);
      if (!rte || !mnaEq(addr, &rte->addr))
	{
	  mnnio *dnio;
	  if (memcmp(pa->family, pkt->nio->pa.family, sizeof(pa->family)))
	    {
	      dnio = mnnFindNio(ctx, pa->family);

	      /* if no matching family, then we cannot support the redirect */
	      if (!dnio)
		{
		  mnmFree(ctx, (dvoid *) pkt);
		  return;
		}
	    }
	  else
	    dnio = pkt->nio;

	  rte = mnaInsertRoute(ctx, addr, mask, dnio, pa, flags);
	}
      else
	{
	  /* the route already exists, so just touch it. */
	  rte->mask = mask;
	  rte->nio = pkt->nio;
	  CPSTRUCT(rte->pa, *pa);
	  rte->itime = smnClock();
	}

      /* if the redirect is local, try to update the port also */
      mnnSubnet(pkt->nio, &nioaddr);
      if (rte && (mnaWellKnown(&phdr->dst) || mnaNetEq(&phdr->dst, &nioaddr)))
	{
	  port = mntFindPort(ctx, &phdr->dst, &phdr->src);
	  if (port)
	    {
	      rte->refcnt++;
	      port->rte->refcnt--;
	      port->rte = rte;

	      /* packets to be sent have already been queued, so let's
	       * make sure to update the route they should use.
	       */
	      for (scp = port->unpkt; scp; scp = scp->next)
		{
		  scp->nio = rte->nio;
		  CPSTRUCT(scp->pa, rte->pa);
		}
	    }
	}

      mnmFree(ctx, (dvoid *) pkt);
      break;
    case MNOTYP_RESET:
      /* resetting is generally bad; someone is out of synch */
      mnPrint(MNLWARN, "resetting...");
      port = mntFindPort(ctx, &phdr->dst, &phdr->src);
      if (port)
	mntAbort(ctx, port, MNERR_BROKEN);
      else
	mnPrint(MNLWARN, "RESET but no port");
      mnmFree(ctx, (dvoid *) pkt);
      break;
    case MNOTYP_RESETRCVR:
      port = mntFindPort(ctx, &phdr->dst, &phdr->src);
      seqid = smnNtoh4(*((sb4 *) (buf)));
      if (!port)
	mnPrint(MNLERROR, "RESETRCVR but no port");
      else if (port->resetseen)
	mnPrint(MNLWARN, "redundant reset ignored");
      else
	{
	  port->nrseq = seqid;
	  port->ls = (mnnpkt *) 0;
	  port->resetseen = TRUE;
	  while (port->rs)
	    {
	      tmp = port->rs;
	      port->rs = port->rs->next;
	      mnmFree(ctx, (dvoid *) tmp);
	    }
	}
      mnmFree(ctx, (dvoid *) pkt);
      break;
    case MNOTYP_ADDRHB:
      /* heartbeats tell address servers that someone is alive */
      rte = mnaFindRoute(ctx, &phdr->src);
      if (!rte || !mnaEq(&phdr->src, &rte->addr))
	{
	  mnAtos(&phdr->src, out, MNAMAXLEN);
	  mnPrint(MNLWARN, "heartbeat for lost route %s", out);
	}
      else
	rte->itime = smnClock();

      mnmFree(ctx, (dvoid *) pkt);
      break;
    case MNOTYP_ADDRREQUEST:  /* mnnpa:24, address:8 */
    case MNOTYP_ADDRREPLY:    /* address:8 */
    case MNOTYP_ADDRRELEASE:  /* no payload */
    case MNOTYP_ADDRSYNCH:    /* mnnpa:24 */
    case MNOTYP_ECHOREPLY:
      /* somebody is hopefully expecting all of these; just enqueue them */
      mnqEnq(&ctx->ocppkt, pkt);
      mnoFill(ctx);
      break;
    case MNOTYP_ECHOREQUEST:
      /* handle echo requests internally */
      DISCARD mnoSend(ctx, MNOTYP_ECHOREPLY, &phdr->src, &phdr->dst);
      mnmFree(ctx, (dvoid *) pkt);
      break;
    case MNOTYP_SETDOMAIN:    /* domain:string */
      if (ctx->cwd)
	mnmFree(ctx, ctx->cwd);

      cwd = (char *) buf;
      ctx->cwd = mnmAlloc(ctx, MNM_MAINPOOL, strlen(cwd) + 1);
      strcpy(ctx->cwd, cwd);
      mnPrint(MNLWARN, "set domain: %s", ctx->cwd);
      break;
    default:
      mnPrint(MNLERROR, "bad OCP packet: %ld", pkt->seqid);
      mnmFree(ctx, (dvoid *) pkt);
      break;
    }
}

/*
 * mnoFill - fill a pending OCP receive event
 */
void mnoFill(mnctx *ctx)
{
  mntre  *re;
  mnnpkt *pkt;
  mnnhdr *phdr;
  ub1    *pyld;

  while (ctx->ocppkt.head && ctx->re.head)
    {
      re = (mntre *) mnqDeq(&ctx->re);
      if (mneGet(ctx, re->sem) != MNSTS_UNKNOWN)
	{
	  mneUnlatch(ctx, re->sem);
	  mnmFree(ctx, (dvoid *) re);
	  continue;
	}
	
      pkt = (mnnpkt *) mnqDeq(&ctx->ocppkt);
      phdr = (mnnhdr *) &pkt[1];
      pyld = (ub1 *) &phdr[1];

      if (re->from)
	mnaCopy(re->from, &phdr->src);

      if (re->origbv)
	DISCARD memcpy(re->origbv->buf, pyld,
		       min(re->origbv->len,
			   (size_t) (pkt->len - sizeof(mnnhdr))));

      mneSet(ctx, re->sem, pkt->seqid, TRUE);
      mnmFree(ctx, (dvoid *) pkt);
      mnmFree(ctx, (dvoid *) re);
    }
}

/*
 * mnoRecv - queue an OCP receive event
 */
sb4 mnoRecv(mnctx *ctx, mna *from, mnbv *bv, ub4 nbv,
	    ub4 timeout, mnHandler handler, dvoid *usrp)
{
  mnsem *sem;
  mntre *re;
  sb4    sts;

  sem = mneMakeSem(ctx, handler, usrp);

  re = (mntre *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mntre));
  re->sem = sem;
  re->from = from;
  re->origbv = re->cbv = bv;
  re->nbv = nbv;
  re->cnt = 0;
  re->fill = FALSE;

  if (timeout)
    mneTimer(ctx, timeout, sem);

  mnqEnq(&ctx->re, re);

  mnoFill(ctx);

  if (!handler && !usrp)
    {
      sts = mnSemWait(sem);
      mnSemFree(sem);
    }
  else
    sts = 0;

  return sts;
}

/*
 * mnoSendAddrRequest - send an address request to an address server
 *   Address requests are formatted as:
 *    + a physical address of the receiver
 *    + a Media Net address to request (if a well-known address is needed)
 *   The from address indicates where the reply should be sent.  If zeroed
 *   out, the physical address will be used.
 */
sb4 mnoSendAddrRequest(mnctx *ctx, mna *addr)
{
  mnnpkt *pkt;
  mnnhdr *phdr;
  ub1    *buf;
  mna     asaddr;
  mnrte  *rte;

  DISCARD mnAddr(&asaddr, MNARSADDR);
  rte = mnaFindRoute(ctx, &asaddr);

  pkt = (mnnpkt *) mnmAlloc(ctx, MNM_MAINPOOL,
			    sizeof(mnnpkt) + sizeof(mnnhdr) +
			    sizeof(mnnpa) + sizeof(mna));
  phdr = (mnnhdr *) &pkt[1];
  buf = (ub1 *) &phdr[1];

  pkt->len = sizeof(mnnhdr) + sizeof(mnnpa) + sizeof(mna);
  pkt->off = 0;
  pkt->flags = MNNFLG_PRI | MNNFLG_RSR;
  pkt->seqid = MNOTYP_ADDRREQUEST;
  pkt->max = 0;
  pkt->stime = 0;
  pkt->nio = rte->nio;
  CPSTRUCT(pkt->pa, rte->pa);

  DISCARD memset(phdr, 0, sizeof(mnnhdr));
  phdr->proto = MNPROTO_OCP;
  mnnSubnet(rte->nio, &phdr->src);
  mnaCopy(&phdr->dst, &asaddr);

  mnaCopy((mna *) (buf + sizeof(mnnpa)), addr);

  return mnnSendPkt(ctx, pkt); 
}

/*
 * mnoSendAddrReply - send an address reply
 *   An address reply is formatted as
 *     + a status (sb4); 0 on success;
 *     + an mna; this is the assigned address;
 *   The to address says where to send the reply to.  If zeroed out, it
 *   simply uses the new address.
 */
sb4 mnoSendAddrReply(mnctx *ctx, sb4 sts,
		     mna *to, mna *addr, mnnio *nio, mnnpa *pa)
{
  mnnpkt *pkt;
  mnnhdr *phdr;
  ub1    *buf;
  mna     claddr;

  mnaClear(&claddr);

  pkt = (mnnpkt *) mnmAlloc(ctx, MNM_MAINPOOL,
			    sizeof(mnnpkt) + sizeof(mnnhdr) +
			    sizeof(sb4) + sizeof(mna));
  phdr = (mnnhdr *) &pkt[1];
  buf = (ub1 *) &phdr[1];

  pkt->len = sizeof(mnnhdr) + sizeof(sb4) + sizeof(mna);
  pkt->off = 0;
  pkt->flags = MNNFLG_PRI;
  pkt->seqid = MNOTYP_ADDRREPLY;
  pkt->max = 0;
  pkt->stime = 0;
  pkt->nio = nio;
  CPSTRUCT(pkt->pa, *pa);

  DISCARD memset(phdr, 0, sizeof(mnnhdr));
  phdr->proto = MNPROTO_OCP;

  if (mnaEq(&claddr, to))
    mnaCopy(&phdr->dst, addr);
  else
    mnaCopy(&phdr->dst, to);

  *((sb4 *) buf) = smnHton4(sts);
  mnaCopy((mna *) (buf + sizeof(sb4)), addr);

  return mnnSendPkt(ctx, pkt);
}

/*
 * mnoSendRedirect - send a redirect message
 *   A redirect message is formatted as follows:
 *    + an mna; this is what to insert
 *    + a mask; in case this is a subnet
 *    + a physical address; the new route
 *    + flags; flags to modify the mnaInsertRoute() call
 */
sb4 mnoSendRedirect(mnctx *ctx, mnnpkt *ipkt, mnrte *rte, ub4 flags)
{
  mnnpkt *pkt;
  mnnhdr *iphdr, *phdr;
  ub1    *buf;

  iphdr = (mnnhdr *) &ipkt[1];

  pkt = (mnnpkt *) mnmAlloc(ctx, MNM_MAINPOOL,
			    sizeof(mnnpkt) + sizeof(mnnhdr) +
			    sizeof(mna) + sizeof(ub4) + sizeof(mnnpa)
			    + sizeof(ub4));

  pkt->len = sizeof(mnnhdr) + sizeof(mna) + sizeof(ub4) + sizeof(mnnpa)
    + sizeof(ub4);
  pkt->off = 0;
  pkt->flags = MNNFLG_PRI | MNNFLG_ACC;
  pkt->seqid = MNOTYP_REDIRECT;
  pkt->max = 0;
  pkt->stime = 0;
  pkt->nio = ipkt->nio;
  CPSTRUCT(pkt->pa, ipkt->pa);

  phdr = (mnnhdr *) &pkt[1];
  DISCARD memset(phdr, 0, sizeof(mnnhdr));
  phdr->proto = MNPROTO_OCP;
  mnaCopy(&phdr->src, &iphdr->dst);
  mnaCopy(&phdr->dst, &iphdr->src);

  buf = (ub1 *) &phdr[1];
  mnaCopy((mna *) buf, &rte->addr);
  *((ub4 *) (buf + sizeof(mna))) = smnHton4(rte->mask);
  CPSTRUCT(*((mnnpa *) (buf + sizeof(mna) + sizeof(ub4))), rte->pa);
  *((ub4 *) (buf + sizeof(mna) + sizeof(ub4) + sizeof(mnnpa))) =
    smnHton4(flags);

  return mnnSendPkt(ctx, pkt);
}

/*
 * mnoSendSetDomain - send a set domain command
 *   Set domain commands include as payload a character-string which
 *   specifies the domain.
 */
sb4 mnoSendSetDomain(mnctx *ctx, mna *addr, char *cwd)
{
  mnrte  *rte;
  mnnpkt *pkt;
  mnnhdr *phdr;
  ub1    *buf;

  rte = mnaFindRoute(ctx, addr);

  pkt = (mnnpkt *) mnmAlloc(ctx, MNM_MAINPOOL,
			    sizeof(mnnpkt) + sizeof(mnnhdr) +
			    strlen(cwd) + 1);
  phdr = (mnnhdr *) &pkt[1];
  buf = (ub1 *) &phdr[1];

  pkt->len = sizeof(mnnhdr) + strlen(cwd) + 1;
  pkt->off = 0;
  pkt->flags = MNNFLG_PRI;
  pkt->seqid = MNOTYP_SETDOMAIN;
  pkt->max = 0;
  pkt->stime = 0;
  pkt->nio = rte->nio;
  CPSTRUCT(pkt->pa, rte->pa);

  DISCARD memset(phdr, 0, sizeof(mnnhdr));
  phdr->proto = MNPROTO_OCP;
  mnnSubnet(rte->nio, &phdr->src);
  mnaCopy(&phdr->dst, addr);

  strcpy((char *) buf, cwd);

  return mnnSendPkt(ctx, pkt);
}

sb4 mnoSendResetRcvr(mnctx *ctx, mnnpkt *ipkt, sb4 seqid)
{
  mnnpkt *pkt;
  mnnhdr *phdr, *iphdr;
  ub1    *buf;
  mnrte  *rte;

  iphdr = (mnnhdr *) &ipkt[1];
  rte = mnaFindRoute(ctx, &iphdr->src);

  pkt = (mnnpkt *) mnmAlloc(ctx, MNM_MAINPOOL,
			    sizeof(mnnpkt) + sizeof(mnnhdr) + sizeof(sb4));

  pkt->len = sizeof(mnnhdr) + sizeof(sb4);
  pkt->off = 0;
  pkt->flags = MNNFLG_PRI;
  pkt->seqid = MNOTYP_RESETRCVR;
  pkt->max = 0;
  pkt->stime = 0;
  pkt->nio = rte->nio;
  CPSTRUCT(pkt->pa, rte->pa);

  phdr = (mnnhdr *) &pkt[1];
  DISCARD memset(phdr, 0, sizeof(mnnhdr));
  phdr->proto = MNPROTO_OCP;
  mnaCopy(&phdr->src, &iphdr->dst);
  mnaCopy(&phdr->dst, &iphdr->src);

  buf = (ub1 *) &phdr[1];
  *((ub4 *) buf) = smnHton4(seqid);

  return mnnSendPkt(ctx, pkt);
}

/*
 * mnoIsAddrReq
 */
boolean mnoIsAddrReq(ub1 *buf)
{
  mnnhdr *phdr;

  phdr = (mnnhdr *) buf;
  return (phdr->proto == (MNNVRS | MNPROTO_OCP) &&
	  smnNtoh4(phdr->seqid) == MNOTYP_ADDRREQUEST);
}

/*
 * mnoSend - send a standard OCP packet
 *   Standard OCP packets have no payload.
 */
sb4 mnoSend(mnctx *ctx, ub4 typ, mna *dst, mna *src)
{
  mnrte  *rte;

  rte = mnaFindRoute(ctx, dst);
  if (!rte)
    {
      mnPrint(MNLWARN, "cannot send OCP %d; route not found", typ);
      return 0;
    }
  else
    return mnoSendWRte(ctx, typ, dst, src, rte);
}

sb4 mnoSendWRte(mnctx *ctx, ub4 typ, mna *dst, mna *src, mnrte *rte)
{
  mnnpkt *pkt;
  mnnhdr *phdr;

  pkt = (mnnpkt *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnnpkt)+sizeof(mnnhdr));

  pkt->len = sizeof(mnnhdr);
  pkt->off = 0;
  pkt->flags = MNNFLG_PRI;
  pkt->seqid = (sb4) typ;
  pkt->max = 0;
  pkt->stime = 0;
  pkt->nio = rte->nio;
  CPSTRUCT(pkt->pa, rte->pa);

  phdr = (mnnhdr *) &pkt[1];
  DISCARD memset(phdr, 0, sizeof(mnnhdr));
  phdr->proto = MNPROTO_OCP;
  mnaCopy(&phdr->src, src);
  mnaCopy(&phdr->dst, dst);

  return mnnSendPkt(ctx, pkt);
}
