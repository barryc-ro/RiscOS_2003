/* Copyright (c) Oracle Corporation 1996.  All Rights Reserved. */ 
 
/* 
  NAME 
    yocy.c 
  DESCRIPTION 
    YO CrYpto interface. 
 
  PUBLIC FUNCTIONS 
 
    yorc5Init 
    yorc5Term 
    yorc5Encrypt 
    yorc5Decrypt 
 
  PRIVATE FUNCTIONS 
 
    yocyMsgEncrypt 
    yocyMsgDecrypt 
 
  MODIFIED   (MM/DD/YY) 
    dbrower   12/ 9/96 -  created. 
    dbrower   05/29/97 -  deal with byteswap problems.  Must put 
			  the said, iv1 and iv2 out in network order. 
			  Since yosx doesn't really support that, we 
			  must swap them before encoding. 
*/ 
#ifndef SYSI_ORACLE 
#include <sysi.h> 
#endif 
 
#ifndef YSR_ORACLE 
#include <ysr.h> 
#endif 
 
#ifndef YOI_ORACLE 
#include <yoi.h> 
#endif 
 
#ifndef YOCY_ORACLE 
#include <yocy.h> 
#endif 
 
/* PRIVATE TYPES AND CONSTANTS */ 
 
externdef ysidDecl(YO_EX_CRYPTO_ERR) = "yo::cryptoErr"; 
externdef ysidDecl(YO_EX_UNKNOWN_CIPHER) = "yo::unknownCipher"; 
 
/* PRIVATE FUNCTION DECLARATIONS */ 
 
STATICF void yocyMsgEncrypt( yoctx *ctx, ysbv *bv, sword nbv, 
			    ysbv *obv, ysmhp *hp ); 
STATICF void yocyMsgDecrypt( yoctx *ctx, ysbv *bv, sword nbv, ysbv *obv, 
			    ysmhp *hp ); 
 
/* PUBLIC FUNCTIONS */ 
 
void yocyInit( yoctx *ctx ) 
{ 
  char *res; 
  ub1	*key; 
  sword i, j; 
  size_t    keylen; 
  sysb8	    seed; 
  unsigned int	val; 
 
  ctx->cycx = (dvoid*)0; 
   
  ysClock(&seed); 
  DISCARD ysRand(&seed);	/* link ordering; pull in for yorc5 */ 
   
  if( (res = (char*)ysResGetLast( "yo.security-key" )) ) 
  { 
    if( !strncmp( res, "rc5:", 4 ) || !strncmp( res, "RC5:", 4 ) ) 
    { 
      res += 4; 
      keylen = ((size_t)strlen(res) + 1) / 2; 
      key = (ub1*)ysmGlbAlloc( keylen, "yocy key" ); 
      for( j = i = 0; *res; i++ ) 
      { 
	DISCARD sscanf( res, "%2x", &val ); 
	key[i] = (ub1)(val & 0xff); 
	res += res[1] ? 2 : 1; 
      } 
      ctx->cycx = (dvoid*)yorc5Init( key, keylen ); 
      ysmGlbFree( (dvoid*)key ); 
    } 
    else 
    { 
      yseThrow( YO_EX_UNKNOWN_CIPHER ); 
    } 
  } 
} 
 
void yocyTerm( yoctx *ctx ) 
{ 
  yorc5Term( (yorc5cx*)ctx->cycx ); 
} 
 
boolean yocyIsCipher( ysbv *bv ) 
{ 
  yosx *x; 
  ub1	C,P,H,R; 
  boolean rv; 
 
  x = yosxDecode( 0, bv, 1 ); 
  C = yosxGetUB1( x ); 
  P = yosxGetUB1( x ); 
  H = yosxGetUB1( x ); 
  R = yosxGetUB1( x ); 
  yosxDecEnd(x); 
 
  rv = C == 'C' && P == 'P' && H == 'H' && R == 'R'; 
  return( rv ); 
} 
 
void yocyBvEncrypt( yoctx *ctx, ysbv *ibv, sword inbv, 
		   ysbv **obv, sword *onbv, ysmhp *hp ) 
{ 
  /* allocate new bv wrapper, one bigger for the magic header */ 
  *onbv = inbv + 1; 
  *obv = (ysbv*)ysmAlloc( hp, (*onbv) * sizeof(ysbv), "yocy encbuf" ); 
 
  /* turn into ciphertext with header */ 
  yocyMsgEncrypt( ctx, ibv, inbv, *obv, hp ); 
} 
 
void yocyBvDecrypt( yoctx *ctx, ysbv *ibv, sword inbv, 
		   ysbv **obv, sword *onbv, ysmhp *hp ) 
{ 
  /* allocate new bv container, same number of elements */ 
  *onbv = inbv; 
  *obv = (ysbv*)ysmAlloc( hp, inbv * sizeof(ysbv), "yocy decbuf" ); 
 
  /* get cleartext */ 
  yocyMsgDecrypt( ctx, ibv, inbv, *obv, hp ); 
} 
 
/* ---------------------------------------------------------------- */ 
/* PRIVATE FUNCTIONS */ 
/* ---------------------------------------------------------------- */ 
 
STATICF void yocyMsgEncrypt( yoctx *ctx, ysbv *ibv, sword nbv, ysbv *obv, 
			    ysmhp *hp ) 
{ 
  yosx	*x; 
  ub4	iv1; 
  ub4	iv2; 
  ysbv	*bv;			/* local, bigger than header */ 
  ub4	said;			/* said, and swapped */ 
  ub4	tmp; 
 
  if( !ctx->cycx ) 
    yseThrow( YO_EX_CRYPTO_ERR ); 
 
  /* encrypt into new bvs, getting the generated iv. */ 
  yorc5Encrypt( (yorc5cx*)ctx->cycx, &iv1, &iv2, ibv, nbv, &obv[1], hp ); 
 
  /* Now encode the crypto header with the discovered iv */ 
  x = yosxEncode( 0, hp ); 
  yosxPutUB1( x, 'C' ); 
  yosxPutUB1( x, 'P' ); 
  yosxPutUB1( x, 'H' ); 
  yosxPutUB1( x, 'R' ); 
  said = YOCY_RC5_SAID; 
  /* If necessary, swap to network order */ 
  if( SYSX_BYTE_ORDER != SYSX_MSB )  
  { 
    tmp = sysxGetSwap4( (ub1 *)&said ); 
    said = tmp; 
    tmp =  sysxGetSwap4( (ub1 *)&iv1 ); 
    iv1 = tmp; 
    tmp =  sysxGetSwap4( (ub1 *)&iv2 ); 
    iv2 = tmp; 
  } 
  yosxPutUB4( x, said ); 
  yosxPutUB4( x, iv1 ); 
  yosxPutUB4( x, iv2 ); 
  yosxEncEnd(x, &bv, &nbv ); 
  if( nbv != 1 ) 
    yseThrow( YO_EX_CRYPTO_ERR ); 
 
  /* put the header at the head of the new master container */ 
  obv[0] = bv[0]; 
 
  /* toss the container yosx allocated for us */ 
  ysmFree( hp, bv ); 
} 
 
 
STATICF void yocyMsgDecrypt( yoctx *ctx, ysbv *bv, sword nbv, ysbv *obv, 
			    ysmhp *hp ) 
{ 
  yosx	*x; 
  ysbv	xbv;			/* local */ 
  ub1	C,P,H,R; 
  ub4	said;			/* security assoc id */ 
  ub4	iv1, iv2;		/* initialization vector bits */ 
 
  if( !ctx->cycx ) 
    yseThrow( YO_EX_CRYPTO_ERR ); 
 
  /* first BV contains the header; save it's original values */ 
  xbv = bv[0]; 
 
  /* pick up the cipher-header */ 
  x = yosxDecode( 0, &xbv, 1 ); 
  yosxDecSet( x, SYSX_MSB );	/* always MSB (network) order */ 
  C = yosxGetUB1( x ); 
  P = yosxGetUB1( x ); 
  H = yosxGetUB1( x ); 
  R = yosxGetUB1( x ); 
  said = yosxGetUB4( x ); 
  if( C != 'C' || P != 'P' || H != 'H' || R != 'R' || said != YOCY_RC5_SAID ) 
  { 
    yosxDecEnd(x); 
    yseThrow( YO_EX_CRYPTO_ERR ); 
  } 
  iv1 = yosxGetUB4( x ); 
  iv2 = yosxGetUB4( x ); 
  yosxDecEnd(x); 
 
  /* adjust bv[0] to eat the header so we can decrypt the remainder */ 
  bv[0].buf += 16; 
  bv[0].len -= 16; 
 
  /* encrypt into new obv, using the received iv. */ 
  yorc5Decrypt( (yorc5cx*)ctx->cycx, iv1, iv2, bv, nbv, obv, hp ); 
 
  /* restore bv[0] so caller can free */ 
  bv[0] = xbv; 
} 
 
/* PRIVATE FUNCTIONS */ 
 

