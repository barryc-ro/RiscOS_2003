/* Copyright (c) 1995, 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * ysbv.c - OMN System Layer Buffer Vectors
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif

/*
 * ysBvScatter - scatter to a buffer vector
 */
ub4 ysBvScatter(ub1 *buf, size_t len, ysbv *bv, sword nbv)
{
  size_t total, xlen;

  total = len;
  while (nbv && total)
    {
      xlen = min(total, bv->len);
      DISCARD memcpy(bv->buf, buf, xlen);
      nbv--, bv++, buf += xlen, total -= xlen;
    }
  return (len - total);
}

/*
 * ysBvGather - gather from a buffer vector
 */
ub4 ysBvGather(ub1 *buf, size_t len, ysbv *bv, sword nbv)
{
  size_t total, xlen;

  total = len;
  while (nbv && total)
    {
      xlen = min(total, bv->len);
      DISCARD memcpy(buf, bv->buf, xlen);
      nbv--, bv++, buf += xlen, total -= xlen;
    }
  return (len - total);
}

/*
 * ysBvCopy - copy a buffer vector
 */
ub4 ysBvCopy(ysbv *dst, sword dstnbv, ysbv *src, sword srcnbv)
{
  ub4    total;
  size_t xlen;
  ysbv   dstbv, srcbv;

  total = (ub4) 0;
  if (dstnbv && srcnbv)
    {
      CPSTRUCT(dstbv, *dst);
      CPSTRUCT(srcbv, *src);

      do
	{
	  xlen = min(dstbv.len, srcbv.len);
	  DISCARD memcpy(dstbv.buf, srcbv.buf, xlen);

	  dstbv.len -= xlen, srcbv.len -= xlen, total += xlen;

	  if (dstbv.len == 0)
	    {
	      dst++, dstnbv--;
	      if (dstnbv)
		CPSTRUCT(dstbv, *dst);
	    }
	  else
	    dstbv.buf += xlen;

	  if (srcbv.len == 0)
	    {
	      src++, srcnbv--;
	      if (srcnbv)
		CPSTRUCT(srcbv, *src);
	    }
	  else
	    srcbv.buf += xlen;
	} while (dstnbv && srcnbv);
    }

  return total;
}


/*
 * ysBvFree - free a buffer vector
 */
void ysBvFree(ysmhp *hp, ysbv *bv, sword nbv)
{
  ysbv *scb;

  for (scb = bv; nbv; nbv--, scb++)
    ysmFree(hp, (dvoid *) scb->buf);
  ysmFree(hp, (dvoid *) bv);
}
