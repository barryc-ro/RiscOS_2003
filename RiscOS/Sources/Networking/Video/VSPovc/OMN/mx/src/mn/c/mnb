/* Copyright (c) 1994 by Oracle Corporation.  All Rights Reserved.
 *
 * mnb.c - OMN Blob Marshalling
 *
 * REVISIONS
 * jolkin    09/15/94  Creation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNI_ORACLE
#include <mni.h>
#endif

/*
 * Type Definitions
 */
typedef struct mnblob mnblob;

struct mnblob
{
  ub1 *(*alloc)(dvoid *usrp, size_t segsz, ub4 offset, ub4 total);
  void (*close)(dvoid *usrp, sb4 sts);

  mnHandler handler;                                  /* server-side handler */
  dvoid    *usrp;                                            /* user pointer */
  mnp      *port;                                               /* blob port */
  sb4       offset;                                      /* offset into blob */
  ub4       total;                                     /* total size of blob */
};

/*
 * mnBlobRecv - receive a blob
 *
 * DESCRIPTION
 * mnBlobRecv() prepares a client to receive a blob.  It accepts
 * alloc and close callbacks which will be used to actually return the
 * blob to the client.
 *
 * The alloc routine is invoked with the usrp argument that is passed
 * in here, the size of the segment for which space is to be immediately
 * allocated, the starting offset into the blob, and the length of the
 * total blob.  It is invoked repeatedly as each segment of the blob
 * is received.
 *
 * The close routine is invoked with the usrp argument that is passed
 * in here and the final status of the blob receive operation (0 on
 * success or a Media Net error code).
 *
 * This routine also writes into dest an opaque buffer that describes
 * the destination address of the blob.  This is passed unchanged an
 * uninterpreted into mnBlobPrepare().  The in value of len is the
 * maximum length of dest, and the out value of len is the number
 * of bytes actually written.  dest should be a minimum of 32 bytes.
 *
 * RETURN VALUES
 * This routine returns 0 on success or MNERR_OUTMEM on failure.
 */
sb4 mnBlobRecv(ub1 * (*alloc)(dvoid *, size_t, ub4, ub4),
	       void  (*close)(dvoid *, sb4),
	       dvoid  *usrp, ub1 *dest, ub4 *len)
{
  mnblob *blob;
  mnp    *port;
  mna     addr;

  if (!(blob = (mnblob *) mnmUserAlloc(mnGlbCtx, sizeof(mnblob))))
    return MNERR_OUTMEM;

  port = mnOpen(MNPROTO_STREAM);
  DISCARD mnListen(port, (ub4) 0, mnBlobAccept, (dvoid *) blob);

  blob->alloc = alloc;
  blob->close = close;
  blob->usrp = usrp;
  blob->port = port;
  blob->offset = 0;
  blob->total = 0;

  mnGetAddr(port, &addr);
  mnAtos(&addr, (char *) dest, (size_t) *len);
  *len = strlen((char *) dest);

  return 0;
}

/*
 * mnBlobAccept - accept a blob
 *   mnBlobAccept() is the asynchronous handler that is invoked when
 *   the initial part of the blob arrives.  It accepts the connection,
 *   picks off the total length of the blob, and queues up a read.
 */
void mnBlobAccept(dvoid *bp, sb4 sts)
{
  mnblob *blob;
  mnp    *cport;
  ub4     sz;

  blob = (mnblob *) bp;

  cport = mnAccept(blob->port);
  DISCARD mnClose(blob->port);
  blob->port = cport;

  sts = mnRead(blob->port, (ub1 *) &sz, sizeof(ub4), TRUE,
	       (ub4) 0, (mnHandler) 0, (dvoid *) 0);

  blob->total = smnNtoh4(sz);

  DISCARD mnRead(blob->port, (ub1 *) 0, 0, FALSE,
		 (ub4) 0, mnBlobRead, (dvoid *) blob);
}

/*
 * mnBlobRead - read a blob
 *   mnBlobRead() is the asynchronous handler that is invoked as each
 *   segment of the blob arrives.  It calls the user's alloc routine
 *   and reads the blob pieces directly into his returned memory.
 *   Eventually, it will close and deallocate the blob.
 */
void mnBlobRead(dvoid *bp, sb4 sts)
{
  mnblob *blob;
  ub1    *ptr;
  ub4     len;

  blob = (mnblob *) bp;

  if (!sts)
    {
      len = min(8192, blob->total - blob->offset + 1);
      ptr = (*blob->alloc)(blob->usrp, (size_t) len, (ub4) blob->offset,
			   blob->total);
      if (!ptr)
	sts = MNERR_OUTMEM;
      else
	{
	  sts = mnRead(blob->port, ptr, (size_t) len, FALSE,
		       (ub4) 0, (mnHandler) 0, (dvoid *) 0);
	  if (sts >= 0)
	    blob->offset += sts;
	}
    }

  if (sts >= 0)
    DISCARD mnRead(blob->port, (ub1 *) 0, 0, FALSE, (ub4) 0,
		   mnBlobRead, (dvoid *) blob);
  else
    {
      if (blob->close)
	(*blob->close)(blob->usrp, sts == MNSTS_EOS ? 0 : sts);

      DISCARD mnClose(blob->port);
      mnmUserFree(mnGlbCtx, (dvoid *) blob);
    }
}

/*
 * mnBlobPrepare - prepare a blob for sending
 *
 * DESCRIPTION
 * mnBlobPrepare() prepares a server to send a blob.  It takes an
 * opaque dest buffer of len bytes (exactly what was returned from
 * mnBlobRecv()) and converts that to a Media Net address of the
 * receiver which it returns in destaddr.  blobsz is the size of
 * the blob about to be sent.
 *
 * handler is the callback routine for the server.  When invoked,
 * it is passed back the usrp argument passed in here plus a status.
 * If the status is greater than or equal to zero, this indicates
 * a byte offset into the blob where the server should begin sending
 * the blob.  If this byte offset equals the original blobsz, the
 * blob has been successfully sent.  If the status is less than zero,
 * it indicates a retransmission failure.
 *
 * This routine returns a handle to the prepared blob that should
 * subsequently be passed to mnBlobSend().  In the event of a failure,
 * a null pointer is returned.  mnLastError() may be checked to determine
 * the cause of the failure.
 */
dvoid *mnBlobPrepare(ub1 *dest, /*ARGUSED*/ ub4 len, ub4 blobsz,
		     mnHandler handler, dvoid *usrp, mna *destaddr)
{
  mnctx  *ctx;
  sb4     sts;
  mnblob *blob;
  mnp    *port;
  ub4     netsz;
  mntse  *se;

  ctx = mnGlbCtx;

  sts = mnAddr(destaddr, (char *) dest);
  if (sts < 0)
    {
      mnSetLastError(ctx, sts);
      return (dvoid *) 0;
    }

  if (!(blob = (mnblob *) mnmUserAlloc(ctx, sizeof(mnblob))))
    return (dvoid *) 0;

  /* open the blob port */
  port = mnOpen(MNPROTO_STREAM);
  DISCARD mnConnect(port, destaddr);

  port->proto = MNPROTO_BLOB;

  /* prepend size of blob */
  netsz = smnHton4(blobsz);
  sts = mntSendFill(ctx, port, (ub1 *) &netsz, sizeof(ub4), (ub4) sizeof(ub4),
		    TRUE, FALSE);

  /* allocate packet descriptor for blob */
  if (sts >= 0)
    sts = mntAppendPkt(ctx, port, (ub4) 0, FALSE);

  if (sts < 0)
    {
      DISCARD mnClose(port);
      mnmUserFree(ctx, (dvoid *) blob);
      mnSetLastError(ctx, sts);
      return (dvoid *) 0;
    }

  /* modify packet descriptor for blob */
  port->lspkt->len = blobsz + 1;
  port->lspkt->flags &= ~MNNFLG_MTC;

  /* modify port state */
  blob->offset = port->naseq;
  port->naseq += (sb4) (blobsz + 1);
  port->sstate = MNSTS_XMIT;
  port->rstate = MNSTS_ESTABLISHED;
  port->rexmt = MNTMINREXMT * 4;

  /* allocate send event */
  se = (mntse *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mntse));
  se->sem = mneMakeSem(ctx, mnBlobClose, (dvoid *) blob);
  se->seqid = port->naseq;
  se->cnt = blobsz;
  mnqEnq(&port->se, se);

  /* initialize blob descriptor */
  blob->handler = handler;
  blob->usrp = usrp;
  blob->port = port;
  blob->total = blobsz;

  return (dvoid *) blob;
}

/*
 * mnBlobSend - send a blob piece
 *
 * DESCRIPTION
 * mnBlobSend() should be called just prior to actually sending a blob
 * (or piece of a blob).  state is the handle that was returned by
 * mnBlobPrepare().  This routine will write a header into hdr that is
 * to be prepended to the blob.  The in value of hdrlen is the maximum
 * length of hdr, and the out value of hdrlen is the number of bytes
 * actually written.  hdr should be a minimum of 32 bytes.
 *
 * RETURN VALUES
 * This routine returns the offset into the blob to begin at.  This
 * should unequivocally be the same value that was passed into the
 * server callback passed to mnBlobPrepare().
 */
sb4 mnBlobSend(dvoid *state, ub1 *hdr, ub4 *hdrlen)
{
  mnctx  *ctx;
  mnblob *blob;
  mnp    *port;
  mnnpkt *pkt;
  mnnhdr *phdr;

  ctx = mnGlbCtx;
  blob = (mnblob *) state;
  port = blob->port;

  /* set up retransmit timer */
  if (!port->rxsem)
    {
      port->rxsem = mnSemAlloc((dvoid *) port);
      mneSemSetHandler(ctx, port->rxsem, mntRexmit, FALSE);
      mneTimer(ctx, port->rexmt, port->rxsem);
    }

  pkt = port->unpkt;
  phdr = (mnnhdr *) &pkt[1];

  /* initialize packet header */
  phdr->flags = (ub1) (pkt->flags & 0xff);
  if (pkt->flags & MNNFLG_FST)
    {
      phdr->len = smnHton4(pkt->len - sizeof(mnnhdr));
      phdr->seqid = smnHton4(pkt->seqid);
    }
  else
    {
      phdr->len = 0;
      phdr->seqid = smnHton4(blob->offset - sizeof(ub4));
    }

  phdr->cksm = 0;

  /* compute the checksum (but with the stream protocol) */
  *hdrlen = (pkt->flags & MNNFLG_FST) ? pkt->len : sizeof(mnnhdr);
  phdr->proto = (MNPROTO_STREAM | MNNVRS);
  phdr->cksm = mnnCheckSum((ub1 *) phdr, *hdrlen);

  phdr->proto = (MNPROTO_BLOB | MNNVRS);
  DISCARD memcpy(hdr, phdr, (size_t) *hdrlen);

  if (pkt->flags & MNNFLG_FST)
    return 0;
  else
    return smnModSub(pkt->seqid, blob->offset);
}

/*
 * mnBlobRexmt - blob retransmission
 *   mnBlobRexmt() is the blob retransmission handler in case the
 *   blob send does not work the first time.
 */
void mnBlobRexmt(mnctx *ctx, mnp *port)
{
  mnblob *blob;
  mntse  *se;
  mnnpkt *pkt;
  sb4     offset;

  se = (mntse *) port->se.tail;
  blob = (mnblob *) mnSemGetUsrp(se->sem);
  pkt = blob->port->unpkt;

  if (pkt->flags & MNNFLG_FST)
    offset = 0;
  else
    offset = smnModSub(pkt->seqid, blob->offset);

  mnePost(ctx, blob->handler, blob->usrp, offset);
}

/*
 * mnBlobClose - close the blob sender
 *   mnBlobClose() is the handler after the blob send has been completed
 *   (successfully or otherwise).
 */
void mnBlobClose(dvoid *bp, sb4 sts)
{
  mnctx  *ctx;
  mnblob *blob;

  ctx = mnGlbCtx;
  blob = (mnblob *) bp;

  DISCARD mnClose(blob->port);
  mnePost(ctx, blob->handler, blob->usrp, sts);
  mnmUserFree(ctx, (dvoid *) blob);
}
