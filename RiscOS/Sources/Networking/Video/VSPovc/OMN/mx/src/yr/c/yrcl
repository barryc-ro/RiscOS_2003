/*
 * yrcl.c - IFR query client
 */
#ifndef SYSI_ORACLE
# include <sysi.h>
#endif

#ifndef YS_ORACLE
# include <ys.h>
#endif
#ifndef YSFMT_ORACLE
# include <ysfmt.h>
#endif
#ifndef YSR_ORACLE
# include <ysr.h>
#endif
#ifndef YOTK_ORACLE
# include <yotk.h>
#endif
#ifndef YR_ORACLE
# include <yr.h>
#endif
#ifndef YR0_ORACLE
# include <yr0.h>
#endif
#ifndef YR0UTIL_ORACLE
# include <yr0util.h>
#endif
#ifndef YRMGRIDL_IDL
# include <yrmgidl.h>
#endif

/*
 * PRIVATE FUNCTION PROTOTYPES AND FORWARD DECLARATIONS
 */

typedef struct yrclcx yrclcx;
typedef struct yrcln yrcln;

STATICF boolean yrclRun(void);
STATICF boolean yrclLoad(yrclcx *cx, yslst *loadlist);
STATICF void yrclObj(yrclcx *cx, yrobj *obj);

STATICF yrcln *yrclLoc(yrclcx *cx, yrobj *obj);
STATICF void yrclReg(yrclcx *cx, yrobj *obj);
STATICF void yrclWalk(yrclcx *cx, yrcln *nd);

/* description routines */

STATICF void yrclMod(yrclcx *cx, yrobj *obj);
STATICF void yrclIntf(yrclcx *cx, yrobj *intf);
STATICF void yrclAttr(yrclcx *cx, yrobj *obj);
STATICF void yrclConst(yrclcx *cx, yrobj *obj);
STATICF void yrclEx(yrclcx *cx, yrobj *obj);
STATICF void yrclOp(yrclcx *cx, yrobj *obj);
STATICF void yrclAlias(yrclcx *cx, yrobj *obj);
STATICF void yrclEnum(yrclcx *cx, yrobj *obj);
STATICF void yrclStruct(yrclcx *cx, yrobj *obj);
STATICF void yrclUnion(yrclcx *cx, yrobj *obj);

STATICF void yrclPrim(yrclcx *cx, yrobj *obj);
STATICF void yrclString(yrclcx *cx, yrobj *obj);
STATICF void yrclArray(yrclcx *cx, yrobj *obj);
STATICF void yrclSeq(yrclcx *cx, yrobj *obj);

/* utility fns */
STATICF char *yrclRelName(yrclcx *cx, yrobj *obj);
STATICF char *yrclTypeName(yrclcx *cx, yrobj *ty, char *nm);

STATICF void yrclPrint(yrclcx *cx, CONST char *fmt, ...);

#define yrclIndent(cx)  do { (cx)->indent += (cx)->tabsz; } while (FALSE)
#define yrclOutdent(cx)  do { (cx)->indent -= (cx)->tabsz; } while (FALSE)
/*
 * PRIVATE DATATYPES AND CONSTANTS
 */

/* tree data structure to keep track of registered (necessary) objects */
struct yrcln
{
  char *nm;
  yrobj *self;
  yslst *mbrs;
};

struct yrclcx 
{
  boolean remote;
  yrobj  *rep;
  yrcln   top;
  ysstr  *scope;
  
  sword   tabsz;
  sword   indent;
  boolean pindent;
};

static CONST_W_PTR ysargmap yrclArgs[] =            /* command line arg list */
{ 
  { 'r', "mnircl.recurse=true", 0 },
  { 'f', "mnircl.ifr-data-path", YSARG_MANY },
  { 'v', "mnircl.verbose=true", 0 },
  { YSARG_PARAM, "mnircl.object-name", 1 },
  { (char)0, "", 0 },
};

/* DISABLE check_proto_decl */
boolean yrclMain(dvoid *osdCtx, CONST char *nm, sword argc, char **argv);
/* ENABLE check_proto_decl */

boolean yrclMain(dvoid *osdCtx, CONST char *nm, sword argc, char **argv)
{
  char vbuf[256];
  boolean sts;
  sword ret;

  ysInit(osdCtx, nm);
  
  ret = ysArgParse(argc, argv, yrclArgs);
  switch (ret)
  {
  case YSARG_NORMAL:                                /* args parsed correctly */
    break;
  case YSARG_VERSION:                   /* version requested, print and exit */
    yslPrint("%s - IFR query binary\n", nm);
    yslPrint("%s\n", ysVersion(vbuf, 256));
    return ( TRUE );
  case YSARG_HELP:                                   /* help requested, exit */
    return ( TRUE );
  case YSARG_ERROR:                                /* arg parse error, exit */ 
    return ( FALSE );
  default:			
    yslError("unknown error from ysArgParse: %d\n", ret);
    return ( FALSE );
  }

  sts = yrclRun();

  ysTerm(osdCtx);

  return sts;
}

STATICF boolean yrclRun(void)
{
  yrclcx cx;
  ysle  * noreg le;
  char  *id;
  boolean sts;
  yslst   *dlst;
  yslst  *clst;
  yrobj  *obj;
  size_t  len;
  
  NOREG(le);
  cx.remote  = FALSE;
  cx.rep     = yrCreateRepository();
  cx.scope   = ysStrCreate("::");
  
  id = ysResGetLast("mnircl.tabsz");
  if (id)
    cx.tabsz = atoi(id);
  else
    cx.tabsz = 2;
  cx.indent = 0;
  cx.pindent = FALSE;
  
   /*
   * load in IFR datafiles from disk
   */
  
  dlst = ysResGet("mnircl.ifr-data-path");
  if (!dlst)
  {
    yslError("must specify at least one data-path\n");
    return (FALSE);
  }
  else
  {
    sts = yrclLoad(&cx, dlst);
    if (!sts)
      return sts;
  }

  /*
   * initialize root of IFR graph
   */
  cx.top.nm   = (char *)0;
  cx.top.self = cx.rep;
  cx.top.mbrs = ysLstCreate();

  /*
   * build IFR graph
   */
  id = ysResGetLast("mnircl.object-name");
  yseTry
  {
    /* lookup by scoped name or repository id? */
    if (!strncmp(id, "IDL:", 4))
    {
      obj = yrLookupId(cx.rep, (CONST char *)id);
      if (!obj)
	yseThrow(YR_EX_NOTFOUND);
    }
    else
      obj = yrLookup(cx.rep, id);
    
    yrclReg(&cx, obj);
  }
  yseCatch ( YR_EX_NOTFOUND )
  {
    yrclPrint(&cx, "// %s wasn't found\n", id);
  }
  yseEnd;
  
  /*
   * report on objects as commanded
   */

  if (ysResGetBool("mnircl.verbose"))
  {
    yrclPrint(&cx, "\n");
    for (le = ysLstHead(cx.top.mbrs) ; le ; le = ysLstNext(le))
    {
      yrclWalk(&cx, (yrcln *)ysLstVal(le));
      yrclPrint(&cx, "\n");
    }
  }
  else
  {
    yrclPrint(&cx, "\n");
    yseTry
    {
      /* lookup by scoped name or repository id? */
      if (!strncmp(id, "IDL:", 4))
      {
	obj = yrLookupId(cx.rep, (CONST char *)id);
	if (!obj)
	  yseThrow( YR_EX_NOTFOUND );
      }
      else
	obj = yrLookup(cx.rep, id);
	
      clst = yrGetNameComponents( obj );
      for ( le = ysLstHead(clst); le != ysLstTail(clst); le = ysLstNext(le))
      {
	switch (yrGetKind((yrobj *)ysLstVal(le)))
	{
	case yrdkModule:
	  cx.scope = ysStrCat(cx.scope, yrGetName((yrobj *)ysLstVal(le)));
	  cx.scope = ysStrCat(cx.scope, "::");
	  yrclPrint(&cx, "module %s\n{\n", yrGetName((yrobj *)ysLstVal(le)));
	  yrclIndent(&cx);
	  break;
	case yrdkInterface:
	  yrclPrint(&cx, "interface %s\n{\n",
		    yrGetName((yrobj *)ysLstVal(le)));
	  yrclIndent(&cx);
	  break;
	default:
	  break;
	}
      }
      yrclWalk(&cx, yrclLoc(&cx, obj));
      for ( ; le = ysLstPrev(le ) ; le != ysLstHead(clst))
      {
	len = strlen(yrGetName((yrobj *)ysLstVal(le))) - 2;
	yrclOutdent(&cx);
	yrclPrint(&cx,"};\n");
	
	cx.scope = ysStrDel(cx.scope, ysStrLen(cx.scope) - len, len);
      }
	
      yrclPrint(&cx, "\n");
    }
    yseCatch( YR_EX_NOTFOUND )
    {
    }
    yseEnd;
  }
  
  /*
   * clean up and exit
   */

  yrDestroyRepository(cx.rep, (ysmff)0, (ysmff) 0);

  return (TRUE);
}

STATICF boolean yrclLoad(yrclcx *cx, yslst *loadlist)
{
  ysle* noreg le;
  char* noreg path;
  noreg boolean ok;
  yslst* loaded;
  
  NOREG(path);
  NOREG(le);
  NOREG(ok);
  ok = TRUE;

  for ( le = ysLstHead(loadlist); ok && le; le = ysLstNext(le))
  {
    path = (char*) ysLstVal(le);
    yseTry
    {
      loaded = yrmgrLoad( cx->rep, (char*) path);
      ysLstDestroy( loaded, (ysmff)0);
    }
    yseCatchObj( YR_MGR_EX_LOADCONFLICT, yr_mgr_LoadConflict, ex)
    {
      ok = FALSE;
      yrmgrReportLoadConflict( (dvoid*)&ex, YSLSEV_ERR);
      yr_mgr_LoadConflict__free( (dvoid*)&ex, yoFree);
    }
    yseCatchObj( YR_MGR_EX_FILENOTFOUND, yr_mgr_fileNotFound, ex)
    {
      ysRecord( YR_MSG(3, YR_FAC), YSLSEV_ERR, (char*)0, 
		YSLSTR(ex.path), YSLEND);
      yr_mgr_fileNotFound__free( &ex, yoFree);
      ok = FALSE;
    }
    yseCatchObj( YR_MGR_EX_FILECORRUPTED, yr_mgr_fileCorrupted, ex)
    {
      ysRecord( YR_MSG(13, YR_FAC), YSLSEV_ERR, (char*)0, 
		YSLSTR(ex.path), YSLEND);
      yr_mgr_fileCorrupted__free( &ex, yoFree);
      ok = FALSE;
    }
    yseCatchAll
    {
      ok = FALSE;
      ysRecord( YR_MSG(5, YR_FAC), YSLSEV_ERR, (char*)0, 
		YSLSTR((char*)path), YSLSTR(ysidToStr( yseExid)), YSLEND);
      yseRethrow;
    }
    yseEnd
  }
  return ok;
}

/* insert obj into tree (return TRUE if actually had to insert) */
STATICF boolean yrclIns(yrclcx *cx, yrobj *obj)
{
  yslst *lst;
  ysle  *comp, *le;
  yrcln *nd, *tmp;
  char  *cnm;
  boolean ins;
  yrdk knd;
  
  ins = FALSE;
  knd = yrGetKind(obj);
  /* only insert non-primitive types */
  if (knd == yrdkPrimitive || knd == yrdkSequence || knd == yrdkString ||
      knd == yrdkArray )
    return ins;

  lst = yrGetNameComponents(obj);
  nd = &cx->top;

  for (comp = ysLstHead(lst) ; comp ; comp = ysLstNext(comp))
  {
    cnm = (char *) yrGetName((yrobj *)ysLstVal(comp));
    
    /* find corresponding container; if it doesn't exist, create it */
    for (le = ysLstHead(nd->mbrs) ; le ; le = ysLstNext(le))
    {
      tmp = (yrcln *)ysLstVal(le);
      if (!strcmp(cnm, tmp->nm))
	break;
    }
    if (!le)
    {
      /* container doesn't exist */
      tmp = (yrcln *)ysmGlbAlloc(sizeof(yrcln), "yrcln");
      tmp->nm = cnm;
      tmp->mbrs = ysLstCreate();
      tmp->self = ysLstVal(comp);
      DISCARD ysLstEnq(nd->mbrs, (dvoid *)tmp);
      ins = TRUE;
    }
    nd = tmp;
  }
  
  return ins;
}

/* locate obj in tree) */
STATICF yrcln *yrclLoc(yrclcx *cx, yrobj *obj)
{
  yslst *lst;
  ysle  *comp, *le;
  yrcln *nd, *tmp;
  char  *cnm;
  yrdk knd;
  
  knd = yrGetKind(obj);
  /* only insert non-primitive types */
  if (knd == yrdkPrimitive || knd == yrdkSequence || knd == yrdkString ||
      knd == yrdkArray )
    return (yrcln *)0;

  lst = yrGetNameComponents(obj);
  nd = &cx->top;

  for (comp = ysLstHead(lst) ; comp ; comp = ysLstNext(comp))
  {
    cnm = (char *) yrGetName((yrobj *)ysLstVal(comp));
    
    /* find corresponding container; if it doesn't exist, create it */
    for (le = ysLstHead(nd->mbrs) ; le ; le = ysLstNext(le))
    {
      tmp = (yrcln *)ysLstVal(le);
      if (!strcmp(cnm, tmp->nm))
	break;
    }
    if (!le)
    {
      /* container doesn't exist */
      return (yrcln *)0;
    }
    nd = tmp;
  }
  
  return nd;
}

/* insert object (and contents) into obj tree */
STATICF void yrclReg(yrclcx *cx, yrobj *obj)
{
  yslst *lst;
  ysle *le;
  boolean new;
 
  /* insert self into tree */
  new = yrclIns(cx, obj);
  if (new)
  {
    switch (yrGetKind(obj))
    {
    case yrdkModule:
    case yrdkInterface:
      
      lst = yrContents(obj, yrdkall, FALSE);
      for (le = ysLstHead(lst) ; le ; le = ysLstNext(le))
	yrclReg(cx, (yrobj *)ysLstVal(le));

      break;
    case yrdkConstant:
      yrclReg(cx, yrConstData(obj).type);
      break;
    case yrdkException:
    case yrdkStruct:
      for (le = ysLstHead(yrStructData(obj).mbrs) ; le ; le = ysLstNext(le))
	yrclReg(cx, ((yrstrmbr *)ysLstVal(le))->type);
      break;
    case yrdkUnion:
      yrclReg(cx, yrUnionData(obj).disctype);
      for (le = ysLstHead(yrUnionData(obj).arms) ; le ; le = ysLstNext(le))
	yrclReg(cx, ((yrunmbr *)ysLstVal(le))->type);
      break;
    case yrdkEnum:
      for (le = ysLstHead(yrEnumData(obj).mbrs) ; le ; le = ysLstNext(le))
	yrclReg(cx, (yrobj *)ysLstVal(le));
      break;
    case yrdkAlias:
      yrclReg(cx, yrAliasData(obj).type);
      break;
    case yrdkSequence:
      yrclReg(cx, yrSeqData(obj).elmtype);
      break;
    case yrdkArray:
      yrclReg(cx, yrArrayData(obj).elmtype);
      break;
    case yrdkAttribute:
      yrclReg(cx, yrAttrData(obj).type);
      break;
    case yrdkOperation:
      yrclReg(cx, yrOpData(obj).rettype);
      for (le = ysLstHead(yrOpData(obj).raises) ; le ; le = ysLstNext(le))
	yrclReg(cx, (yrobj *)ysLstVal(le));
      for (le = ysLstHead(yrOpData(obj).pars) ; le ; le = ysLstNext(le))
	yrclReg(cx, ((yrpar *)ysLstVal(le))->type);
      break;
    default:
      break;
    }
  }
}

/* output tree */
STATICF void yrclWalk(yrclcx *cx, yrcln *nd)
{
  ysle *le;
  size_t len;
  
  /* output the object (non-recursively if the object is a container) */
  /* (skip over enumeration constants) */
  if ((yrGetKind(nd->self) == yrdkConstant) &&
      (yrGetKind(yrConstData(nd->self).type) == yrdkEnum) )
    return;

  yrclObj(cx, nd->self);

  if (ysLstCount(nd->mbrs))
  {
    len = ysStrLen(cx->scope);
    cx->scope = ysStrCat(cx->scope, yrGetName(nd->self));
    cx->scope = ysStrCat(cx->scope, "::");
    yrclPrint(cx, "\n{\n");
    yrclIndent(cx);
    /* walk through the contents of the object */
    for (le = ysLstHead(nd->mbrs) ; le ; le = ysLstNext(le))
    {
      yrclWalk(cx, (yrcln *)ysLstVal(le));
    }
    yrclOutdent(cx);
    yrclPrint(cx, "};\n");
    cx->scope = ysStrDel(cx->scope, len, ysStrLen(cx->scope)-len);
  }
  else
  {
    yrclPrint(cx, ";\n");
  }
}


/*
 * description routines
 */

STATICF void yrclObj(yrclcx *cx, yrobj *obj)
{
  switch (yrGetKind(obj))
  {
  case yrdkAttribute:  yrclAttr(cx, obj);   break;
  case yrdkConstant:   yrclConst(cx, obj);  break;
  case yrdkException:  yrclEx(cx, obj);     break;
  case yrdkInterface:  yrclIntf(cx, obj);   break;
  case yrdkModule:     yrclMod(cx, obj);    break;
  case yrdkOperation:  yrclOp(cx, obj);     break;
  case yrdkAlias:      yrclAlias(cx, obj);  break;
  case yrdkStruct:     yrclStruct(cx, obj); break;
  case yrdkUnion:      yrclUnion(cx, obj);  break;
  case yrdkEnum:       yrclEnum(cx, obj);   break;
  case yrdkPrimitive:  yrclPrim(cx, obj);   break;
  case yrdkString:     yrclString(cx, obj); break;
  case yrdkSequence:   yrclSeq(cx, obj);    break;
  case yrdkArray:      yrclArray(cx, obj);  break;
  case yrdkTypedef:    break;
  default:             break;
  }
}

STATICF void yrclMod(yrclcx *cx, yrobj *mod)
{
  yrclPrint(cx, "module %s", yrGetName(mod));
}

STATICF void yrclIntf(yrclcx *cx, yrobj *intf)
{
  ysle  *le;
  char  *out;

  yrclPrint(cx, "interface %s", yrGetName(intf));
  if (yrInterfaceData(intf).bases && ysLstCount(yrInterfaceData(intf).bases))
  {
    yrclPrint(cx, " : ");
    le = ysLstHead(yrInterfaceData(intf).bases);
    do 
    {
      out = yrclRelName(cx, (yrobj *)ysLstVal(le));
      yrclPrint(cx, "%s", out);
      ysmGlbFree(out);
      le = ysLstNext(le);
      if (le)
	yrclPrint(cx, ", ");
    }
    while (le);
  }
}
  
STATICF void yrclAttr(yrclcx *cx, yrobj *obj)
{
  char *nm;
  
  if (yrAttrData(obj).mode == YR_ATTR_RO)
    yrclPrint(cx, "readonly ");

  nm = yrclTypeName(cx, yrAttrData(obj).type, yrGetName(obj));
  yrclPrint(cx, "attribute %s", nm);
  ysmGlbFree((dvoid *)nm);
}

STATICF void yrclConst(yrclcx *cx, yrobj *obj)
{
  char *nm;
  char *out;
  nm = yrclTypeName(cx, yrConstData(obj).type, yrGetName(obj));
  yrclPrint(cx, "const %s = ", nm);
  ysmGlbFree((dvoid *)nm);

  out = yotkFmt(yrConstData(obj).val._type, yrConstData(obj).val._value, 0);
  yrclPrint(cx, "%s", out);
  ysmGlbFree(out);
}

STATICF void yrclEx(yrclcx *cx, yrobj *obj)
{
  yrstrmbr *mbr;
  ysle     *le;
  char     *out;
  
  yrclPrint(cx, "exception %s", yrGetName(obj));
  if (yrStructData(obj).mbrs && ysLstCount(yrStructData(obj).mbrs))
  {
    yrclPrint(cx, "\n{\n");
    yrclIndent(cx);
    for (le=ysLstHead(yrStructData(obj).mbrs); le; le=ysLstNext(le))
    {
      mbr = (yrstrmbr *)ysLstVal(le);
      out = yrclTypeName(cx, mbr->type, mbr->name);
      yrclPrint(cx, "%s;\n", out);
      ysmGlbFree(out);
    }
    yrclOutdent(cx);
    yrclPrint(cx, "}");
  }
  else
  yrclPrint(cx, " {}");
}

STATICF void yrclOp(yrclcx *cx, yrobj *obj)
{
  yrpar *par;
  ysle  *le;
  char  *nm;
  char  *out;
  
  if (yrOpData(obj).mode == YR_OP_ONEWAY)
    yrclPrint(cx, "oneway ");

  out = yrclRelName(cx, yrOpData(obj).rettype);
  yrclPrint(cx, "%s ", out);
  ysmGlbFree(out);
  yrclPrint(cx, "%s(", yrGetName(obj));
  if (yrOpData(obj).pars && ysLstCount(yrOpData(obj).pars))
  {
    for (le = ysLstHead(yrOpData(obj).pars) ; le; le = ysLstNext(le))
    {
      par = (yrpar *)ysLstVal(le);
      switch (par->mode)
      {
      case YOMODE_IN:     yrclPrint(cx, "in ");    break;
      case YOMODE_OUT:    yrclPrint(cx, "out ");   break;
      case YOMODE_INOUT:  yrclPrint(cx, "inout "); break;
      default: break;
      }
      nm = yrclTypeName(cx, par->type, par->name);
      yrclPrint(cx, "%s", nm);
      ysmGlbFree(nm);
      if (ysLstNext(le))
	yrclPrint(cx, ", ");
    }
  }
  yrclPrint(cx, ")");
  if (yrOpData(obj).raises && ysLstCount(yrOpData(obj).raises))
  {
    yrclPrint(cx, " raises { ");
    for (le = ysLstHead(yrOpData(obj).raises); le; le=ysLstNext(le))
    {
      out = yrclRelName(cx, (yrobj *)ysLstVal(le));
      yrclPrint(cx, "%s", yrGetName((yrobj *)ysLstVal(le)));
      ysmGlbFree(out);
      if (ysLstNext(le))
	yrclPrint(cx, ", ");
    }
    yrclPrint(cx, " }");;
  }
}

STATICF void yrclAlias(yrclcx *cx, yrobj *obj)
{
  char *out;
  
  yrclPrint(cx, "typedef ");

  if (yrGetKind(yrAliasData(obj).type) == yrdkAlias)
  {
    out = yrclRelName(cx, yrAliasData(obj).type);
    yrclPrint(cx, "%s", out);
    ysmGlbFree(out);
  }
  else
    yrclObj(cx, yrAliasData(obj).type);

  yrclPrint(cx, " %s", yrGetName(obj));
}

STATICF void yrclEnum(yrclcx *cx, yrobj *obj)
{
  ysle *le;

  yrclPrint(cx, "enum %s\n{\n", yrGetName(obj));
  yrclIndent(cx);
  if (yrEnumData(obj).mbrs && ysLstCount(yrEnumData(obj).mbrs))
  {
    for (le = ysLstHead(yrEnumData(obj).mbrs); le; le = ysLstNext(le))
    {
      yrclPrint(cx, "%s", yrGetName((yrobj *)ysLstVal(le)));
      if (ysLstNext(le))
	yrclPrint(cx, ",");
      yrclPrint(cx, "\n");
    }
  }
  yrclOutdent(cx);
  yrclPrint(cx, "}");
}

STATICF void yrclStruct(yrclcx *cx, yrobj *obj)
{
  ysle *le;
  yrstrmbr *mbr;
  char *nm;
  
  yrclPrint(cx, "struct %s\n{\n", yrGetName(obj));
  yrclIndent(cx);
  if (yrStructData(obj).mbrs && ysLstCount(yrStructData(obj).mbrs))
  {
    for (le=ysLstHead(yrStructData(obj).mbrs); le; le=ysLstNext(le))
    {
      mbr = (yrstrmbr *)ysLstVal(le);
      nm = yrclTypeName(cx, mbr->type, mbr->name);
      yrclPrint(cx, "%s;\n", nm);
      ysmGlbFree(nm);
    }
  }
  yrclOutdent(cx);
  yrclPrint(cx, "}");
}

STATICF void yrclUnion(yrclcx *cx, yrobj *obj)
{
  ysle *le;
  char *out;
  yrunmbr *mbr;

  yrclPrint(cx, "union %s", yrGetName(obj));
  out = yrclRelName(cx, yrUnionData(obj).disctype);
  yrclPrint(cx, " switch (%s) {\n", out);
  ysmGlbFree(out);
  yrclIndent(cx);
  if (yrUnionData(obj).arms && ysLstCount(yrUnionData(obj).arms))
  {
    for (le=ysLstHead(yrUnionData(obj).arms); le; le=ysLstNext(le))
    {
      mbr = (yrunmbr *)ysLstVal(le);
      out = yotkFmt(mbr->label._type, mbr->label._value, 0);
      if (mbr->label._value)
	yrclPrint(cx, "case %s: ", out);
      else
	yrclPrint(cx, "default: ");
      ysmGlbFree((dvoid *)out);

      out = yrclTypeName(cx, mbr->type, mbr->name);
      yrclPrint(cx, "%s;\n", out);
      ysmGlbFree(out);
    }
  }
  yrclOutdent(cx);
  yrclPrint(cx, "}");
}

STATICF void yrclPrim(yrclcx *cx, yrobj *obj)
{
  yrclPrint(cx, "%s", yrGetPrimitiveName(yrPrimData(obj).kind));
}

STATICF void yrclString(yrclcx *cx, yrobj *obj)
{
  yrclPrint(cx, "string<%lu>", yrStringData(obj).bound);
}

STATICF void yrclArray(yrclcx *cx, yrobj *obj)
{
  yrclObj(cx, yrArrayData(obj).elmtype);
  yrclPrint(cx, "[%lu]", yrArrayData(obj).length);
}

STATICF void yrclSeq(yrclcx *cx, yrobj *obj)
{
  char *out;

  out = yrclRelName(cx, yrSeqData(obj).elmtype);
  yrclPrint(cx, "sequence< %s", out);
  ysmGlbFree(out);
  if (yrSeqData(obj).bound)
    yrclPrint(cx, ", %lu ", yrSeqData(obj).bound);
  yrclPrint(cx, " >");
}

/*
 * utility fns
 */

/* retrieve the name relative to the current scope */
STATICF char *yrclRelName(yrclcx *cx, yrobj *obj)
{
  char bnd[16];
  char *out;
  char *abs;
  char *p, *q, *cur;
  ysstr *str;
  
  if (yrGetKind(obj) == yrdkSequence)
  {
    str = ysStrCreate("sequence< ");
    out = yrclRelName(cx, yrSeqData(obj).elmtype);
    str = ysStrCat(str, out);
    if (yrSeqData(obj).bound)
    {
      ysFmtStr(bnd, ", %lu", yrSeqData(obj).bound);
      str = ysStrCat(str, bnd);
    }
    str = ysStrCat(str, " >");
    out = ysStrDup(ysStrToText(str));
    ysStrDestroy(str);
  }
  else
  {
    p = ysStrToText(cx->scope);
    q = abs = yrGetAbsoluteName(obj);

    while (*p++ == *q++)
    {
      if (*q == ':')
	cur = (char *)0;
      else if (!cur)
      cur = q;
    }
    if (!cur && q)
      cur = q;

    out = ysStrDup(cur);
    ysmGlbFree(abs);
  }
  
  return out;
}

STATICF char *yrclTypeName(yrclcx *cx, yrobj *ty, char *elnm)
{
  char *cont;
  char *out;
  char *tynm;
  ub4   bound;

  tynm = yrclRelName(cx, ty);
  if (!strlen(tynm) )
  {
    /* anonymous type, must be sequence, array, or string */
    switch (yrGetKind(ty))
    {
    case yrdkSequence:
      cont = yrclRelName(cx, yrSeqData(ty).elmtype);
      bound = yrSeqData(ty).bound;
      if (bound)
	ysFmtStr(out, "sequence< %s, %d > %s", cont, bound, elnm);
      else
	ysFmtStr(out, "sequence< %s > %s", cont, elnm);
      ysmGlbFree((dvoid *)cont);
      break;
    case yrdkString:
      bound = yrStringData(ty).bound;
      out = (char *)ysmGlbAlloc(15+ strlen(elnm),"string");
      if (bound)
	ysFmtStr(out, "string< % d> %s", bound, elnm);
      else
	ysFmtStr(out, "string %s", elnm);
      break;
    case yrdkArray:
      cont = yrclRelName(cx, yrArrayData(ty).elmtype);
      bound = yrArrayData(ty).length;
      out = (char *)ysmGlbAlloc(strlen(cont)+15 + strlen(elnm),"string");
      ysFmtStr(out, "%s %s[%d]", cont, elnm, bound);
      ysmGlbFree(cont);
      break;
    default:
      yseThrow(YS_EX_BADPARAM);
      break;
    }
  }
  else
  {
    out = ysmGlbAlloc(strlen(tynm) + strlen(elnm) + 2, "string");
    ysFmtStr(out, "%s %s", tynm, elnm);
  }
  
  return out;
}
  
STATICF void yrclPrint(yrclcx *cx, CONST char *fmt, ...)
{
  va_list args;
  char buf[512];
  size_t i, len;
  sword  j;
  
  /* fmt the output string */
  va_start( args, fmt);
  ysFmtVaStrl( buf, sizeof(buf), fmt, args);
  va_end(args);

  /* print out, newlining when necessary */
  if (cx->pindent)
  {
    for (j = cx->indent ; j ; j--)
      yslPrint(" ");
    cx->pindent = FALSE;
  }
  
  len = strlen(buf);
  for (i=0 ; i < len ; i++)
  {
    yslPrint("%c", buf[i]);
    if (buf[i] == '\n')
    {
      if (i == len-1)
      {
	cx->pindent = TRUE;
      }
      else
      {
	for (j = cx->indent ; j ; j--)
	  yslPrint(" ");
      }
      
    }
  }
}


