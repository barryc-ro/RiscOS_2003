/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * ysthr.c - Media Net Threads
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YSI_ORACLE
#include <ysi.h>
#endif
#ifndef SYSTHR_ORACLE
#include <systhr.h>
#endif

/*
 * Error Base
 */
#define YSTHR_BASE    ((ub4) 8000)
#define YSTHR_ERR(n)  YS_PRODUCT, YS_FACILITY, (YSTHR_BASE + (ub4) (n))

/*
 * Type Declarations
 */
typedef struct ysthrkel ysthrkel;
typedef struct ysthrarg ysthrarg;

struct ysthrctx
{
  CONST_DATA systhrop *ops;                     /* installed threads package */
  ub4       icnt;                          /* ysThrInit initialization count */
  ub4       tcnt;                                      /* total thread count */
  ub4       scnt;                                  /* suspended thread count */
  boolean   sdsem;                                          /* shutdown flag */
  ysthrkey *argkey;                                   /* thread argument key */
};

struct ysthrkey
{
  dvoid    *ptr;                                  /* single-threaded pointer */
  yshsh    *tbl;                                /* multi-threaded hash table */
  ysthrkel *hint;		               /* cached last hash table hit */
};

struct ysthrkel
{
  ysthr  thrid;                                         /* thread identifier */
  dvoid *ptr;                                        /* thread-specific data */
};

struct ysthrarg
{
  void  (*start)(dvoid *);                                  /* start routine */
  dvoid  *arg;                                             /* start argument */
  sword   state;                                     /* state of this thread */
  CONST ysid *exid;                                   /* signalled exception */
};

/*
 * Constant Declarations
 */
externdef ysidDecl(YS_EX_DESTROYED) = "ys::destroyed";
externdef ysidDecl(YS_EX_DEADLOCK) = "ys::deadlock";
static ysidDecl(YS_EX_THREXIT) = "ys::threxit";
static ysmtagDecl(YSTHRKEY_TAG) = "ysthrkey";

#define YSTHRST_RUNNING   ((sword) 0)
#define YSTHRST_SUSPENDED ((sword) 1)

#define YSTHRBY_MTX       ((sword) 2)
#define YSTHRBY_CV        ((sword) 3)

/*
 * Routine Declarations
 */
STATICF void ysThrSuspend(sword why);
STATICF void ysThrResume(ysthr *thrid);
STATICF void ysThrMain(dvoid *arg);
STATICF void ysThrIdle(dvoid *arg);
STATICF sword ysThrKeyEq(dvoid *elm, dvoid *key, size_t keysz);
STATICF ub4 ysThrHshFn(CONST dvoid *key, size_t keysz, ub4 max);
STATICF void ysThrIntrHndlr(dvoid *usrp, CONST ysid *exid,
			    dvoid *arg, size_t argsz);

/*
 * ysThrInit - thread initialization
 */
void ysThrInit(CONST char *name)
{
  CONST_DATA systhrop *CONST_W_PTR *sct;
  ysctx    *ctx;
  ysthrctx *tctx;
  ysthrkey *key;
  ysthrarg *targ;
  dvoid    *old;
  ysle     *le;
  sword     i;
  ysthr     td;
  char      buf[32];

  /* check for re-initialization */
  ctx = (ysctx *) yscGet(YSC_YSCTX);
  if (ctx->tctx)
  {
    ctx->tctx->icnt++;
    return;
  }

  /* install threads package */
  i = 0, sct = systhrtab;
  if (name)
    {
      while (i < SYSTHRTAB_MAX && strcmp((*sct)->name, name))
	i++, sct++;
    }

  if (i == SYSTHRTAB_MAX)
    yseThrow(YS_EX_BADPARAM);

  if ((*sct)->descsz > YSTHRID_MAX)
    ysePanic(YS_EX_FAILURE);

  /* create thread context */
  tctx = (ysthrctx *) ysmGlbAlloc(sizeof(ysthrctx), "ysthrctx");
  tctx->ops = *sct;
  tctx->icnt = 1;
  tctx->tcnt = 1;                      /* the caller is the first thread ... */
  tctx->scnt = 0;                             /* ... and he is not suspended */
  tctx->sdsem = FALSE;

  /* create idler thread */
  if ((*sct)->create(td.id, ysThrIdle, (dvoid *) tctx, (size_t) 0))
    {
      ysRecord(YSTHR_ERR(1), YSLSEV_ERR, (char *) 0, YSLNONE);
      ysmGlbFree((dvoid *) tctx);
      yseThrow(YS_EX_FAILURE);
    }
  else
    ctx->tctx = tctx;

  /* convert key list to hash tables */
  for (le = ysLstHead(ctx->thrkeys); le; le = ysLstNext(le))
    {
      key = (ysthrkey *) ysLstVal(le);
      old = key->ptr;
      key->tbl = ysHshCreate((ub4) 64, ysThrHshFn, ysThrKeyEq, ysmFGlbFree);
      key->hint = (ysthrkel *)0;
      DISCARD ysThrKeySet(key, old);
    }

  /* create argument descriptor for main thread */
  tctx->argkey = ysThrKeyCreate();
  targ = (ysthrarg *) ysmGlbAlloc(sizeof(ysthrarg), "ysthrarg");
  targ->start = (void (*)(dvoid *)) 0;
  targ->arg = (dvoid *) 0;
  targ->state = YSTHRST_RUNNING;
  targ->exid = (ysid *) 0;
  ysThrKeySet(tctx->argkey, (dvoid *) targ);

  /* install default interrupt handler (if none) */
  if (!ctx->intrhndlr)
    DISCARD ysSetIntr(ysThrIntrHndlr, (dvoid *) tctx);

  /* successful initialization */
  ysRecord(YSTHR_ERR(2), YSLSEV_DEBUG(5), (char *) 0, YSLNONE);
  DISCARD ysThrPrint(ysThrSelf(&td), buf, sizeof(buf));
  ysRecord(YSTHR_ERR(7), YSLSEV_DEBUG(5), (char *) 0, YSLSTR(buf), YSLEND);
}

/*
 * ysThrTerm - thread termination
 */
void ysThrTerm(void)
{
  ysctx    *ctx;
  ysthrctx *tctx;
  ysthrkey *key;
  dvoid    *old;
  ysle     *le;

  /* get thread context */
  ctx = (ysctx *) yscGet(YSC_YSCTX);
  tctx = ctx->tctx;
  if (!tctx || --tctx->icnt)
    return;

  if (tctx->tcnt > 1)
    {
      ysRecord(YSTHR_ERR(3), YSLSEV_WARNING, (char *) 0,
	       YSLUB4(tctx->tcnt-1), YSLEND);
    }

  /* force for all threads to exit */
  tctx->sdsem = TRUE;
  while (tctx->tcnt > 1)
    {
      ysThrIntrHndlr((dvoid *) tctx, YS_EX_SHUTDOWN, (dvoid *) 0, (size_t) 0);
      ysThrYield();
    }

  while (tctx->sdsem)
    ysThrYield();

  /* free the main thread argument descriptor */
  ysmGlbFree(ysThrKeySet(tctx->argkey, (dvoid *) 0));

  /* convert key list to single pointers */
  for (le = ysLstHead(ctx->thrkeys); le; le = ysLstNext(le))
    {
      key = (ysthrkey *) ysLstVal(le);
      old = ysThrKeyGet(key);
      ysHshDestroy(key->tbl);
      key->ptr = old;
    }

  /* free context */
  ysmGlbFree((dvoid *) tctx);
  ctx->tctx = (ysthrctx *) 0;

  ysRecord(YSTHR_ERR(4), YSLSEV_DEBUG(5), (char *) 0, YSLNONE);
}

/*
 * ysThrCreate - thread creation
 */
void ysThrCreate(ysthr *thrid, void (*start)(dvoid *), dvoid *arg,
		 size_t stksz)
{
  ysctx    *ctx;
  ysthrctx *tctx;
  ysthrarg *targ;
  ysthr     tmptd;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  tctx = ctx->tctx;
  if (!tctx)
    yseThrow(YS_EX_NOTINIT);

  if (!thrid)
    thrid = &tmptd;

  targ = (ysthrarg *) ysmGlbAlloc(sizeof(ysthrarg), "ysthrarg");
  targ->start = start;
  targ->arg = arg;
  targ->state = YSTHRST_RUNNING;
  targ->exid = (ysid *) 0;

  DISCARD memset((dvoid *) thrid, 0, sizeof(ysthr));
  if (tctx->ops->create(thrid->id, ysThrMain, (dvoid *) targ, stksz))
    {
      ysRecord(YSTHR_ERR(5), YSLSEV_ERR, (char *) 0, YSLNONE);
      ysmGlbFree((dvoid *) targ);
      yseThrow(YS_EX_FAILURE);
    }
  else
    tctx->tcnt++;
}

/*
 * ysThrExit - thread termination
 */
void ysThrExit(void)
{
  ysthrctx *tctx;

  tctx = ((ysctx *) yscGet(YSC_YSCTX))->tctx;
  yseThrow(tctx ? YS_EX_THREXIT : YS_EX_NOTINIT);
}

/*
 * ysThrYield - yield execution
 */
void ysThrYield(void)
{
  ysthrctx *tctx;

  tctx = ((ysctx *) yscGet(YSC_YSCTX))->tctx;
  tctx->ops->yield();
}

/*
 * ysThrSuspend - suspend execution
 */
STATICF void ysThrSuspend(sword why)
{
  ysctx      *ctx;
  ysthrctx   *tctx;
  ysthrarg   *targ;
  CONST ysid *exid;
  ysthr       thrid;
  char        buf[32];

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  tctx = ctx->tctx;
  targ = (ysthrarg *) ysThrKeyGet(tctx->argkey);
  if (!targ || (targ && !targ->exid))
    {
      if (targ)
	targ->state = YSTHRST_SUSPENDED;
      tctx->scnt++;
      tctx->ops->suspend();
    }

  DISCARD ysThrPrint(ysThrSelf(&thrid), buf, sizeof(buf));
  if (targ && targ->exid)
    {
      exid = targ->exid;
      targ->exid = (ysid *) 0;
      ysRecord(YSTHR_ERR(13), YSLSEV_DEBUG(5), (char *) 0,
		  YSLSTR(buf), YSLSTR(ysidToStr(exid)), YSLEND);
      yseThrow(exid);
    }
  else
    ysRecord(YSTHR_ERR(7), YSLSEV_DEBUG(5), (char *) 0, YSLSTR(buf), YSLEND);
}

/*
 * ysThrResume - resume execution
 */
STATICF void ysThrResume(ysthr *thrid)
{
  ysctx    *ctx;
  ysthrctx *tctx;
  ysthrkel *kel;
  ysthrarg *targ;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  tctx = ctx->tctx;

  /* we can't use ysThrKeyGet() since we are not in the target thread yet */
  kel =
    (ysthrkel *) ysHshFind(tctx->argkey->tbl, (dvoid *) thrid, sizeof(ysthr));
  targ = (kel ? (ysthrarg *) kel->ptr : (ysthrarg *) 0);

  /* make sure we don't re-resume a thread that is running */
  if (!targ || targ->state == YSTHRST_SUSPENDED)
    {
      if (targ)
	targ->state = YSTHRST_RUNNING;
      tctx->scnt--;
      tctx->ops->resume(thrid->id);
    }
}

/*
 * ysThrSelf - get thread identifier
 */
ysthr *ysThrSelf(ysthr *thrid)
{
  ysthrctx *tctx;

  tctx = ((ysctx *) yscGet(YSC_YSCTX))->tctx;
  if (tctx)
    {
      DISCARD memset((dvoid *) thrid, 0, sizeof(ysthr));
      tctx->ops->self(thrid->id);
      return thrid;
    }
  else
    return (ysthr *) 0;
}

/*
 * ysThrPrint - format a thread identifier
 */
char *ysThrPrint(ysthr *thrid, char *buf, size_t len)
{
  ysthrctx *tctx;

  tctx = ((ysctx *) yscGet(YSC_YSCTX))->tctx;
  if (!thrid || !tctx)
    DISCARD strcpy(buf, "<none>");
  else
    tctx->ops->print(thrid->id, buf, len);

  return buf;
}

/*
 * ysThrKeyCreate - create a new thread key
 */
ysthrkey *ysThrKeyCreate(void)
{
  ysctx    *ctx;
  ysthrkey *key;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  key = (ysthrkey *) ysmGlbAlloc(sizeof(ysthrkey), YSTHRKEY_TAG);
  if (ctx->tctx)
  {
    key->tbl = ysHshCreate((ub4) 64, ysThrHshFn, ysThrKeyEq, ysmFGlbFree);
    key->hint = (ysthrkel *)0;
  }
  else
    key->ptr = (dvoid *) 0;

  DISCARD ysLstEnq(ctx->thrkeys, (dvoid *) key);
  return key;
}

/*
 * ysThrKeyDestroy - destroy a thread key
 */
void ysThrKeyDestroy(ysthrkey *key)
{
  ysctx *ctx;
  ysle  *le;

  ctx = (ysctx *) yscGet(YSC_YSCTX);

  if (ctx->tctx)
    ysHshDestroy(key->tbl);

  for (le = ysLstHead(ctx->thrkeys);
       le && key != ysLstVal(le);
       le = ysLstNext(le)) ;

  if (le)
    ysLstRem(ctx->thrkeys, le);

  ysmGlbFree((dvoid *) key);
}

/*
 * ysThrKeyGet - get thread-specific data
 */
dvoid *ysThrKeyGet(ysthrkey *key)
{
  ysthr     td;
  ysthrkel *kel;

  ysmCheck(key, YSTHRKEY_TAG);

  if (ysThrSelf(&td))
    {
      if (key->hint && !ysThrKeyEq(key->hint, (dvoid *)&td, sizeof(ysthr)))
	kel = key->hint;
      else
	kel = (ysthrkel *) ysHshFind(key->tbl, (dvoid *) &td, sizeof(ysthr));

      if (kel)
      {
	key->hint = kel;
	return kel->ptr;
      }
      else
	return (dvoid *)0;
    }
  else
    return key->ptr;
}

/*
 * ysThrKeySet - set thread-specific data
 */
dvoid *ysThrKeySet(ysthrkey *key, dvoid *val)
{
  ysthr     td;
  ysthrkel *kel;
  dvoid    *old;

  ysmCheck(key, YSTHRKEY_TAG);

  if (ysThrSelf(&td))
    {
      if (!val)
	{
	  kel = (ysthrkel *) ysHshRem(key->tbl, (dvoid *) &td, sizeof(td));
	  if (kel)
	    {
	      if (kel == key->hint)
		key->hint = (ysthrkel *)0;
	      old = kel->ptr;
	      ysmGlbFree((dvoid *) kel);
	    }
	  else
	    old = (dvoid *) 0;
	}
      else
	{
	  if (key->hint && !ysThrKeyEq(key->hint, (dvoid *)&td, sizeof(ysthr)))
	    kel = key->hint;
	  else
	    kel = (ysthrkel *)ysHshFind(key->tbl, (dvoid *)&td, sizeof(ysthr));

	  if (!kel)
	    {
	      kel = (ysthrkel *) ysmGlbAlloc(sizeof(ysthrkel), "ysthrkel");
	      DISCARD memcpy((dvoid *) &kel->thrid, (dvoid *) &td, sizeof(td));
	      ysHshIns(key->tbl, (dvoid *) &td, sizeof(td), (dvoid *) kel);
	      old = (dvoid *) 0;
	    }
	  else
	    old = kel->ptr;

	  kel->ptr = val;
	  key->hint = kel;
	}
    }
  else
    {
      old = key->ptr;
      key->ptr = val;
    }

  return old;
}

/*
 * ysMtxCreate - create a mutex
 */
void ysMtxCreate(ysmtx *mtx, sword type)
{
  mtx->type = type;
  mtx->locked = FALSE;
  mtx->waiters = (yslst *) 0;
}

/*
 * ysMtxDestroy - destroy a mutex
 */
void ysMtxDestroy(ysmtx *mtx)
{
  ysthr *tid;

  mtx->type = (sword) 0;
  mtx->locked = FALSE;
  if (mtx->waiters)
    {
      ysLstDestroy(mtx->waiters, (ysmff) 0);
      mtx->waiters = (yslst *) 0;
    }
}

/*
 * ysMtxLock - lock a mutex
 */
void ysMtxLock(ysmtx *mtx)
{
  ysle *le;
  ysthr tid;

  if (mtx->type == YSMTXTYPE_INTR)
    ysEnterCR();

  while (mtx->locked)
    {
      if (!ysThrSelf(&tid))
	ysePanic(YS_EX_DEADLOCK);
      if (!mtx->waiters)
	mtx->waiters = ysLstCreate();
      le = ysLstEnq(mtx->waiters, (dvoid *) &tid);
      yseTry
	ysThrSuspend(YSTHRBY_MTX);
      yseCatchAll
	{
	  DISCARD ysLstRem(mtx->waiters, le);
	  if (mtx->type == YSMTXTYPE_INTR)
	    ysExitCR();
	  yseRethrow;
	}
      yseEnd
    }

  mtx->locked = TRUE;
}

/*
 * ysMtxTryLock - try to lock a mutex
 */
boolean ysMtxTryLock(ysmtx *mtx)
{
  boolean ok;

  if (mtx->type == YSMTXTYPE_INTR)
    ysEnterCR();

  ok = !mtx->locked;
  if (ok)
    mtx->locked = TRUE;
  else if (mtx->type == YSMTXTYPE_INTR)
    ysExitCR();

  return ok;
}

/*
 * ysMtxUnlock - unlock a mutex
 */
void ysMtxUnlock(ysmtx *mtx)
{
  ysthr *tid;

  if (!mtx->locked)
    yseThrow(YS_EX_BADPARAM);
  else
    {
      mtx->locked = FALSE;

      tid = (mtx->waiters ? (ysthr *) ysLstDeq(mtx->waiters) : (ysthr *) 0);

      if (mtx->type == YSMTXTYPE_INTR)
	ysExitCR();

      if (tid)
	ysThrResume(tid);
    }
}

/*
 * ysCondCreate - create a condition variable
 */
void ysCondCreate(yscv *cv)
{
  cv->val = (ub4) 0;
  ysMtxCreate(&cv->mtx, YSMTXTYPE_NORMAL);
  cv->waiters = (yslst *) 0;
}

/*
 * ysCondDestroy - destroy a condition variable
 */
void ysCondDestroy(yscv *cv)
{
  ysthr *tid;

  ysMtxDestroy(&cv->mtx);
  if (cv->waiters)
    {
      ysLstDestroy(cv->waiters, (ysmff) 0);
      cv->waiters = (yslst *) 0;
    }
}

/*
 * ysCondWait - wait on a condition variable
 *
 * DESCRIPTION
 * This routine provides the one "true" way to block a thread or process
 * until an event occurs.  The occurrence of the event is indicated by
 * the given condition variable being signalled.
 *
 * One might observe that the conventional usage pattern for a condition
 * variable with associated mutex exactly parallels the following:
 *
 *    sysiDisable();        ->  ysMtxLock(mtx);
 *    while (!cond)         ->  while (!cond)
 *      sysiPause();        ->    ysCondWait(cv, mtx);
 *    sysiEnable();         ->  ysMtxUnlock(mtx);
 *
 * This is not coincidence.  They have the exact same semantics.  One
 * can think of the single-threaded program as having exactly one
 * process-wide mutex.
 *
 * The implementation of this routine takes care to perform the same
 * function whether single- or multi-threaded.  Of course, the
 * complications are in the details....
 */
void ysCondWait(yscv *cv, ysmtx *mtx)
{
  ysctx *ctx;
  ub4    val;
  ysle  *le;
  ysthr  tid;

  val = cv->val;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  if (!ctx->tctx)
    {
      /* single-threaded case */

      /* if the mutex type is interrupt-style, then we have to unlock
       * manually, since we do not want to prematurely reenable interrupts
       */
      if (mtx->type != YSMTXTYPE_INTR)
	{
	  ysMtxUnlock(mtx);
	  ysEnterCR();
	}
      else if (mtx->locked)
	mtx->locked = FALSE;
      else
	yseThrow(YS_EX_BADPARAM);

      /* process any pending events and then block; repeat cycle until
       * cv is signalled or until there's a user interrupt
       */
      while (ysIdle()) ;
      while (!ctx->usrintr && val == cv->val)
	{
	  ysBlock();
	  while (ysIdle());
	}

      /* in the single-threaded case, we might handle the interrupt right
	 here, except that this will cause mismatched CR and Mtx calls
	 in some cases. */

      /* reacquire the mutex in the same way that we unlocked it */
      if (mtx->type != YSMTXTYPE_INTR)
	{
	  ysExitCR();
	  ysMtxLock(mtx);
	}
      else
	mtx->locked = TRUE;

      /* Unfortunately, when we raise the interrupt here, the handler
	 may decide it needs the mutex, deadlock and panic.  mnAlloc is
	 one example of this.  The person with the YS hat says this
	 is a bug in MN -- no allocs or mutexes in an intr handler? */

      if (ctx->usrintr)
	ysIntrHandle(ctx);
    }
  else
    {
      /* multi-threaded case */

      /* unlock the mutex and acquire the cv mutex (the latter is only
       * necessary in a pre-emptive environment)
       */
      ysMtxUnlock(mtx);
      ysMtxLock(&cv->mtx);

      /* test the condition (test will always succeed in a non-preemptive
       * environment
       */
      if (val == cv->val)
	{
	  /* identify self as a waiter and go to sleep; in case thread
	   * is signalled with an exception, we have to make sure we
	   * remove ourselves as a waiter and relock the mutex
	   */
	  DISCARD ysThrSelf(&tid);
	  if (!cv->waiters)
	    cv->waiters = ysLstCreate();
	  le = ysLstEnq(cv->waiters, (dvoid *) &tid);
	  ysMtxUnlock(&cv->mtx);
	  yseTry
	    ysThrSuspend(YSTHRBY_CV);
	  yseCatchAll
	    {
	      DISCARD ysLstRem(cv->waiters, le);
	      ysMtxLock(mtx);
	      yseRethrow;
	    }
	  yseEnd
	}
      else
	ysMtxUnlock(&cv->mtx);

      ysMtxLock(mtx);
    }
}

/*
 * ysCondSignal - signal a condition variable
 */
void ysCondSignal(yscv *cv)
{
  ysthr *tid;

  /* acquire the cv mutex (only necessary in a pre-emptive environment */
  ysMtxLock(&cv->mtx);

  /* signal the condition variable */
  cv->val++;

  /* unblock a waiter (if there is one) */
  tid = (cv->waiters ? (ysthr *) ysLstDeq(cv->waiters) : (ysthr *) 0);

  /* unlock the cv mutex (only necessary in a pre-emptive environment */
  ysMtxUnlock(&cv->mtx);

  if (tid)
    ysThrResume(tid);
}

/*
 * ysCondBroadcast - broadcast to a condition variable
 */
void ysCondBroadcast(yscv *cv)
{
  ysthr *tid;

  /* acquire the cv mutex (only necessary in a pre-emptive environment */
  ysMtxLock(&cv->mtx);

  /* signal the condition variable */
  cv->val++;

  /* unblock all waiters */
  if (cv->waiters)
    while (tid = (ysthr *) ysLstDeq(cv->waiters))
      ysThrResume(tid);

  /* unlock the cv mutex (only necessary in a pre-emptive environment */
  ysMtxUnlock(&cv->mtx);
}

/*
 * ysThrSignal - signal a thread
 */
void ysThrSignal(ysthr *thrid, CONST ysid *exid)
{
  ysctx    *ctx;
  ysthrctx *tctx;
  ysthrkel *kel;
  ysthrarg *targ;
  ysthr     tid;
  char      buf[32];

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  tctx = ctx->tctx;
  if (!tctx)
    yseThrow(YS_EX_NOTINIT);

  if (!thrid)
    {
      thrid = &tid;
      DISCARD ysThrSelf(thrid);
    }

  /* we can't use ysThrKeyGet() since we are not in the target thread */
  kel =
    (ysthrkel *) ysHshFind(tctx->argkey->tbl, (dvoid *) thrid, sizeof(ysthr));
  targ = (kel ? (ysthrarg *) kel->ptr : (ysthrarg *) 0);

  /* we cannot signal a thread we didn't create */
  if (!targ)
    yseThrow(YS_EX_BADPARAM);

  /* note exception and resume thread if suspended */
  targ->exid = exid;
  if (targ->state == YSTHRST_SUSPENDED)
    ysThrResume(thrid);
}

/*
 * ysThrMain - thread wrapper
 */
STATICF void ysThrMain(dvoid *arg)
{
  ysctx    *ctx;
  ysthrctx *tctx;
  ysthrarg *targ;
  ub4       msgid;
  ysthr     thrid;
  char      buf[32];

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  tctx = ctx->tctx;
  DISCARD ysThrPrint(ysThrSelf(&thrid), buf, sizeof(buf));
  ysRecord(YSTHR_ERR(9), YSLSEV_DEBUG(5), (char *) 0, YSLSTR(buf), YSLEND);

  DISCARD ysThrKeySet(tctx->argkey, (dvoid *) arg);
  targ = (ysthrarg *) arg;
  yseTry
    targ->start(targ->arg);
    msgid = (ub4) 12;
  yseCatch(YS_EX_THREXIT)
    msgid = (ub4) 11;
  yseCatchAll
    msgid = (ub4) 0;
    ysRecord(YSTHR_ERR(10), YSLSEV_ERR, (char *) 0,
		YSLSTR(buf), YSLSTR(yseExid), YSLEND);
  yseEnd

  if (msgid)
    ysRecord(YSTHR_ERR(msgid), YSLSEV_DEBUG(5), (char *) 0,
	     YSLSTR(buf), YSLEND);

  ysmGlbFree(ysThrKeySet(tctx->argkey, (dvoid *) 0));
  tctx->tcnt--;
  tctx->ops->exit();
}

/*
 * ysThrIdle - idle thread
 */
STATICF void ysThrIdle(dvoid *arg)
{
  CONST_DATA systhrop *ops;
  ysctx    *ctx;
  ysthrctx *tctx;
  ysthr     tid;
  char      buf[32];

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  tctx = (ysthrctx *) arg;
  ysRecord(YSTHR_ERR(15), YSLSEV_DEBUG(5), (char *) 0,
	   YSLSTR(ysThrPrint(ysThrSelf(&tid), buf, sizeof(buf))), YSLEND);

  /* if the shutdown semaphore exists, trigger it and exit thread */
  while (!tctx->sdsem)
    {
      if (tctx->scnt < tctx->tcnt)
	DISCARD ysIdle();
      else
	{
	  ysEnterCR();
	  if (!ysIdle())
	    ysBlock();
	  ysExitCR();
	}

      if (ctx->usrintr)
	{
	  yseTry
	    ysIntrHandle(ctx);
	  yseCatchAll
	    ysThrIntrHndlr((dvoid *) 0, yseExid, (dvoid *) 0, (size_t) 0);
	  yseEnd
	}

      tctx->ops->yield();
    }

  ysRecord(YSTHR_ERR(12), YSLSEV_DEBUG(5), (char *) 0, YSLSTR(buf), YSLEND);
  ops = tctx->ops;
  tctx->sdsem = FALSE;
  ops->exit();
}

/*
 * ysThrKeyEq - thread key equality callback
 */
STATICF sword ysThrKeyEq(dvoid *elm, dvoid *key, size_t keysz)
{
  ysthrkel *kel;

  kel = (ysthrkel *) elm;
  return (sword) memcmp((dvoid *) &kel->thrid, key, sizeof(ysthr));
}

/*
 * ysThrHshFn - thread id hash function.
 */
STATICF ub4 ysThrHshFn(CONST dvoid *key, size_t keysz, ub4 max)
{
  ysthr *tp = (ysthr *)key;
  return (tp->hash[0] + tp->hash[1]) % max;
}

/*
 * ysThrIntrHndlr - thread package default interrupt handler
 */
STATICF void ysThrIntrHndlr(dvoid *usrp, CONST ysid *exid,
			    dvoid *arg, size_t argsz)
{
  ysthrctx *tctx;
  ysthrkel *kel;
  ysthrarg *targ;
  yshshpos  hpos;

  /* select an arbitrary thread to signal */
  tctx = (ysthrctx *) usrp;
  kel = (ysthrkel *) ysHshFirst(tctx->argkey->tbl, &hpos);
  while (kel)
    {
      targ = (ysthrarg *) kel->ptr;
      targ->exid = exid;
      if (targ->state == YSTHRST_SUSPENDED)
	{
	  ysThrResume(&kel->thrid);
	  break;
	}
      else
	kel = (ysthrkel *) ysHshNext(tctx->argkey->tbl, &hpos);
    }
}
