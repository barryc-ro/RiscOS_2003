/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * ycutil.c - Miscellanious helper functions
 *
 * NOTES
 * The kitchen sink.
 *
 * HISTORY
 * 11/28/96 kcoleman	Bug #426687: Change handling of output files
 * 07/19/96 kcoleman    Add ycgobjDestroy to fix memory leak.
 * 07/04/96 kcoleman	Moved ycStrLitToString here from ycsemprg.c
 * 04/08/96 kcoleman	Use ysRecord for error reporting.
 * 03/25/96 kcoleman	Support for static typecodes
 * 03/01/96 kcoleman    Creation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif
#ifndef YSL_ORACLE
#include <ysl.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif


STATICF void ycgFreeScope( dvoid* data);

/* ----------------------------------------------------------------------- */
/*
 * ycToUpper - Convert a string to upper case. 
 *    The input string is modified and a pointer to it is returned.
 */

char* ycToUpper( char* in)
{
  char *up;
  for (up = in; *up; up++)
    *up = toupper(*up);
  return in;
}

/* ----------------------------------------------------------------------- */
/* ----------------------------------------------------------------------- */
/*
 * Scope Stack Support
 *
 * The scope stack is meant to provide a way to manage *IDL* scopes during
 * code generation. It is used in language mapping dependent manner, and
 * may not even be used at all. The functions here just support stack
 * manipulation; they imply nothing about what is used. The bottom of the
 * stack is ALWAYS the repository scope.
 *
 * In the C language mapping, the scopes pushed on the stack are interface
 * scopes and they're just used to help figure out whether or not code is
 * taking place for an inherited type/operation/attribute or not.
 *
 * In the C++ language mapping, module, interface, struct, union, and 
 * exception scopes are maintained on the stack because the generation of 
 * scoped names in C++ is very much dependent upon the current scope. 
 */
/* ----------------------------------------------------------------------- */
/* ----------------------------------------------------------------------- */

typedef struct ycgscope
{
  yrobj* scope;
  yslst* deferred;
} ycgscope;

/* ----------------------------------------------------------------------- */
/*
 * ycgScope - IDL scope (interface, module, struct, union, exception, or
 *    file) we're in during code generation.
 */
yrobj* ycgScope( ycctx* ctx)
{
  ysle* s;

  if ( ctx->scopes && (s = ysLstHead( ctx->scopes)) )
    return ((ycgscope*) ysLstVal(s))->scope;
  else
    return (yrobj*)0;
}

/* ----------------------------------------------------------------------- */
/*
 * ycgPushScope - Add a new scope to the scope stack. Called when entering
 *    a scope for the first time.
 */
void ycgPushScope( ycctx* ctx, yrobj* scope)
{
  ycgscope* p;

  if ( !ctx->scopes )
    ycgNewScopeStack(ctx);
  p = (ycgscope*) ysmGlbAlloc( sizeof(ycgscope), "ycgscope");
  p->scope = scope;
  p->deferred = (yslst*)0;
  DISCARD ysLstPush( ctx->scopes, (dvoid*) p);
}

/* ----------------------------------------------------------------------- */
/*
 * ycgPopScope - Remove a scope from the scope stack. Called on scope exit.
 */
yslst* ycgPopScope( ycctx* ctx)
{
  if ( ctx->scopes )
  {
    ycgscope* p = (ycgscope*) ysLstPop( ctx->scopes);
    yslst* l = p->deferred;
    
    ysmGlbFree( (dvoid*)p);
    return l;
  }
  else
    return (yslst*)0;
}

/* ----------------------------------------------------------------------- */
/*
 * ycgFreeScope
 */
STATICF void ycgFreeScope( dvoid* data)
{
  ycgscope* p = (ycgscope*) data;

  if ( p )
  {
    if ( p->deferred )
      ysLstDestroy( p->deferred, (ysmff)0);
    ysmGlbFree( (dvoid*)p);
  }
}


/* ----------------------------------------------------------------------- */
/*
 * ycgNewScopeStack - Create a clean scope stack. The repository (file)
 *   scope is automatically pushed as the outermost scope.
 */
void ycgNewScopeStack( ycctx* ctx)
{
  ycgscope* p;

  if ( ctx->scopes )
  {
    while ( (p = ysLstDeq( ctx->scopes)) )
      ycgFreeScope(p);
  }
  else
    ctx->scopes = ysLstCreate();
  p = (ycgscope*) ysmGlbAlloc( sizeof(ycgscope), "ycgscope");
  p->scope = ctx->repository;
  p->deferred = (yslst*)0;
  DISCARD ysLstPush( ctx->scopes, (dvoid*) p);
}


/* ----------------------------------------------------------------------- */
/*
 * ycgDestroyScopeStack - Pop everything off, destroy the stack.
 */
void ycgDestroyScopeStack( ycctx* ctx)
{
  ycgscope* p;

  if ( ctx->scopes )
  {
    while ( (p = (ycgscope*) ysLstDeq( ctx->scopes)) )
      ycgFreeScope(p);
    ysLstDestroy( ctx->scopes, (ysmff)0);
  }
}

/* ----------------------------------------------------------------------- */
/*
 * ycgScopeDefer - Defer code generation for an object
 *
 * It is sometimes necessary to defer code generation for a type until
 * leaving a particular kind of scope. For example, in C++ the CORBA::Any
 * inserter and extractor operations must be non-member functions, so it
 * is sometimes necessary to defer their generation until we reach a
 * module or file scope.
 *
 * You cannot defer things beyond file scope, so if we're already at file
 * scope, nothing happens. TRUE is returned if deferral is reasonable,
 * FALSE otherwise.
 */
boolean ycgScopeDefer( ycctx* ctx, yrobj* obj)
{
  ysle* le;
  boolean top = TRUE;

  if ( !ctx->scopes )
    return FALSE;
  for ( le = ysLstHead( ctx->scopes); le; le = ysLstNext(le))
  {
    ycgscope* p = (ycgscope*) ysLstVal(le);

    switch (yrGetKind(p->scope))
    {
      case yrdkRepository:
      case yrdkModule:
      {
        if ( !top )
        {
          if ( !p->deferred )
            p->deferred = ysLstCreate();
          DISCARD ysLstEnq( p->deferred, (dvoid*)obj);
        }
        return !top;
      }
      default:
        top = FALSE;
        break;
    }
  }
  return FALSE;
}

/* ----------------------------------------------------------------------- */
/*
 * ycgScopeLookup - Find the innermost scope of a particular kind
 *
 * This can be used to determine if you're within a particular kind of
 * scope. If no enclosing scope of the given kind is found, a NULL
 * pointer is returned. Otherwise, a pointer to the associated yrobj
 * is returned.
 */
yrobj* ycgScopeLookup( ycctx* ctx, yrdk kind)
{
  ysle* le;

  if ( ctx->scopes )
  {
    for ( le = ysLstHead( ctx->scopes); le; le = ysLstNext(le))
    {
      ycgscope* s = (ycgscope*) ysLstVal(le);

      if ( yrGetKind(s->scope) == kind )
        return s->scope;
    }
  }
  return (yrobj*)0;
}

/* --------------------------------------------------------------------- */
/*
 * ycgScopeModuleCount - How deep are we in module nesting?
 *
 * OK, so this is a silly special purpose routine, currently only of
 * interest to the C++ mapping for determining nesting levels.
 * However, it may be of similar interest to any other language
 * mapping which treat modules as distinct code gen objects.
 */
ub4 ycgScopeModuleDepth( ycctx* ctx)
{
  ub4 count = 0;
  ysle* le;

  if ( ctx->scopes )
  {
    for ( le = ysLstTail(ctx->scopes); le; le = ysLstPrev(le))
    {
      ycgscope* s = (ycgscope*) ysLstVal(le);

      switch (yrGetKind(s->scope))
      {
        case yrdkModule:
          count++;
          break;
        case yrdkInterface:      /* from here inward, know there are none */
        case yrdkStruct:
        case yrdkUnion:
        case yrdkException:
          return count;
        default:
          break;
      }
    }
  }
  return count;
}

/* --------------------------------------------------------------------- */
/*
 * ycShouldGenCode - Should we generate code for a repository object?
 *
 * We do not usually generate code for an object from an include file unless
 * ycidl.gen-include is set. What it means to be from an include file is less
 * obvious than it might be because of interface inheritance. Something 
 * is only from an include file if the source file name differs from the 
 * input file name AND we're not in the context of a derived interface.
 * If we are in the context of a derived interface, you must check the source
 * file name of the derived object, rather than the object passed into the 
 * macro.
 */
boolean ycShouldGenCode( ycctx* ctx, yrobj* obj)
{
  yrobj* o;
  yrobj* inInterface = ycgScopeLookup( ctx, yrdkInterface);
  CONST char* srcnm;

  if ( ysResGetLast("mnidlc.gen-include") )
    return TRUE;
  else if ( inInterface &&
            (yrGetKind(yrGetDefinedIn(obj)) == yrdkInterface) )
    o = inInterface;	/* assume this is a member of the derived type */
  else
    o = obj;
  srcnm = yrGetSrcName(o);
  return (srcnm && !strcmp( yrGetSrcName(o), ctx->srcnm));
}


/* --------------------------------------------------------------------- */
/*
 * ycgInherited - Is this an inherited interface member?
 *
 * Returns TRUE if (a) we're in the scope of an interface and (b)
 * this object is defined in an interface, but not the current one.
 */

boolean ycgInherited( ycctx* ctx, yrobj* obj)
{
  yrobj* inInterface = ycgScopeLookup( ctx, yrdkInterface);
  yrobj* p;

  if ( !inInterface )
    return FALSE;

  for ( p = yrGetDefinedIn(obj); yrGetKind(p) != yrdkRepository; 
        p = yrGetDefinedIn(p))
  {
    switch (yrGetKind(p))
    {
      case yrdkInterface:
        return (p != inInterface);
      case yrdkModule:
      case yrdkRepository:
        return FALSE;
      default:
        break;
    }
  }
  return FALSE;
}

/* ----------------------------------------------------------------------- */
/*
 * ycgObjDestroy - Delete a ycgobj value. Suitable as a ysmff callback.
 */

void ycgObjDestroy( dvoid* obj)
{
  ycgobj* cgobj = (ycgobj*) obj;

  if ( cgobj->objlist )
    ysLstDestroy( cgobj->objlist, (ysmff)ycgObjDestroy);
  ysmGlbFree(obj);
}


/* ----------------------------------------------------------------------- */
/*
 * The two functions which follow are special purpose operations for
 * dealing with generated output files. The compiler should never stomp
 * existing stub files if an error occurs during compilation. Therefore,
 * all stub files are generated into temporary files which are only
 * renamed when code generation has succeeded.
 *
 * You cannot blindly rename the new files to their target names because
 * sysfpRename's behavior is system dependent when there is an existing 
 * file of the target name. So, any existing files are first renamed to
 * temp file names, then the new files are renamed to the target names,
 * and finally the old files are removed. If an error occurs anywhere 
 * prior to removing the old files, the new files are removed and the
 * old files are restored.
 *
 * The various code generators use these two operations to set up the
 * output files and then do the rename dance. The code generator driver
 * is expected to set up an array of ycfiles with their target file
 * names initialized before calling ycFileInit.
 */

/* ----------------------------------------------------------------------- */
/*
 * ycFileInit - Initialize output file descriptors
 *
 * Verify the target output path is a writeable directory. For each
 * output file we want to generate, if a file of that name already
 * exists, make sure we have write access to and setup for later
 * renaming. Assign temp files names for all output files.
 *
 * Returns TRUE if successfully initialized, FALSE if an error occurs.
 *
 * This function should not throw exceptions.
 */

boolean ycFileInit( ycfile* files, ub4 count, CONST char* path)
{
  char dir[SYSFP_MAX_PATHLEN];
  CONST char* errtxt;
  boolean err;
  ub4 i;
  sysfp* fp;

  yseTry
      /***** Does the target dir exist and is it writeable? *****/
    err = FALSE;
    if ( path && (strlen(path) > (size_t)0) )
    {
      if ( !sysfpIsDir(path) )
      {
        ysRecord( YCMSG(9), YCERRSEV, YSLSTR(path), YSLEND);
        err = TRUE;
      }
      else if ( !sysfpAccess(path, "w") )
      {
        ysRecord( YCMSG(6), YCERRSEV, YSLSTR(path), YSLEND);
        err = TRUE;
      }
    }
    else                      /* no explicit path, check current working dir */
    {
      errtxt = sysfpGetCwd(dir);
      if ( errtxt )
      {
        ysRecord( YCMSG(1), YCERRSEV, YSLSTR("Current working directory"), 
                  YSLSTR(errtxt), YSLEND);
        err = TRUE;
      }
      else if ( !sysfpAccess(dir, "w") )
      {
          ysRecord( YCMSG(6), YCERRSEV, YSLSTR(dir), YSLEND);
          err = TRUE;
      }
    }
  
      /***** If target file exists, make sure it is writeable *****/
    if ( !err )
    {
      for (i = 0; i < count; i++)
      {
        fp = sysfpOpen( files[i].target, "r", SYSFPKIND_TEXT, &errtxt);
        if ( fp )                                                 /* exists */
        {
          sysfpClose(fp);
          fp = sysfpOpen( files[i].target, "a", SYSFPKIND_TEXT, &errtxt);
          if ( !fp )                                       /* not writeable */
          {
            ysRecord( YCMSG(8), YCERRSEV, YSLSTR(files[i].target), 
                      YSLSTR(errtxt), YSLEND);
            err = TRUE;
            break;
          }
          else                                   /* exists and is writeable */
          {
            sysfpClose(fp);
            sysfpTemp(files[i].oldtmp, path, (char*)0);
            files[i].exists = TRUE;
          }
        }
        else                                               /* doesn't exist */
          files[i].exists = FALSE;
        sysfpTemp(files[i].newtmp, path, (char*)0);
      }
    }
  yseCatchAll
    err = TRUE;
  yseEnd
  return !err;
}

/* ----------------------------------------------------------------------- */
/*
 * ycFileRename - Rename temporary output files to real names
 *
 * For each output file we generated, renaming any existing file of the
 * same name to a temp file name, rename the new file to the target
 * name. When all output files have been successfully renamed, remove
 * previously existing files. If an error occurs during rename, restore
 * previous files and remove the temp files.
 */

void ycFileRename( ycfile* files, ub4 count)
{
  boolean err;
  ub4 i,j;
  CONST char* errtxt;

  err = FALSE;
  for (i = 0; i < count; i++)
  {
    if ( files[i].exists )                       /* rename pre-existing file */
    {
      errtxt = sysfpRename(files[i].target, files[i].oldtmp);
      if ( errtxt )
      {
        ysRecord( YCMSG(8), YCERRSEV, YSLSTR(files[i].target), 
                  YSLSTR(errtxt), YSLEND);
        err = TRUE;
        break;
      }
    }
    errtxt = sysfpRename(files[i].newtmp, files[i].target);    /* rename new */
    if ( errtxt )
    {
      ysRecord( YCMSG(8), YCERRSEV, YSLSTR(files[i].target), 
                YSLSTR(errtxt), YSLEND);
      if ( files[i].exists )
        DISCARD sysfpRename(files[i].oldtmp, files[i].target);
      err = TRUE;
      break;
    }
  }

  if ( err )                          /* restore old files, remove new files */
  {
    for (j = 0; j < count; j++)
    {
      if ( j < i )                                     /* previously renamed */
      {
        DISCARD sysfpRemove(files[j].target);
        if ( files[j].exists )
          DISCARD sysfpRename(files[j].oldtmp, files[j].target);
      }
      else                                         /* nothing done to it yet */
        DISCARD sysfpRemove(files[j].newtmp);
    }
  }
  else                                                   /* remove old files */
  {
    for (i = 0; i < count; i++)
      if ( files[i].exists )
        DISCARD sysfpRemove(files[i].oldtmp);
  }
}


/* ----------------------------------------------------------------------- */
/*
 * ycStrLitToString - Turn a string lit list from the parser into a single
 *    C string literal, stripped of quotes and null terminated.
 *
 * As the strings come from the parser, they include the enclosing quotes.
 * We strip them off and merge the strings together. This differs from
 * how string literals in constant expressions are handled in that the
 * enclosing quotes remain in tact in that case.
 *
 * For example:
 *      "abc" "def"
 * becomes
 *      abcdef
 */
char* ycStrLitToString( ycctx* ctx, yslst* strs)
{
  ysle* le;
  char* result = (char*)0;
  char* p;
  size_t len = 0;

  if ( !strs )
    return (char*)0;

  if ( strs )
  {
    for ( le = ysLstHead( strs); le; le = ysLstNext(le))
    {
      len += strlen( (char*)ysLstVal(le)) - 2;    /* -2 for the quotes */
    }
    len++;       /* null terminator */
    result = (char*)ysmGlbAlloc( len, "stringlit");
    p = result;
    for ( le = ysLstHead( strs); le; le = ysLstNext(le))
    {
      char* s = (char*) ysLstVal(le);
      len = strlen(s) - 2;
      if ( len > 0 )
      {
        strncpy(p, s+1, len);
        p += len;
      }
    }
    *p = '\0';
  }
  return result;
}

/* ----------------------------------------------------------------------- */
/*
 * ycAllocTC - Allocate a typecode
 *
 * This function exists solely to provide an allocator to yotkDuplicatWaf.
 * We cannot call yotkDuplicate because it uses yoAlloc and trips over the
 * circular dependency between yo, yc, and yr. There is no corresponding
 * free function; use ysmGlbFree with yotkFreeWaf.
 */

dvoid* ycAllocTC(size_t len)
{
  return ysmGlbAlloc(len, "yotk");
}
