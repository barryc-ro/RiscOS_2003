/* 
 * Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME : ydbr.h 
 *
 * DESCRIPTION:
 * - IIOP half bridge - header file 
 *
 * AUTHOR : Sastry Malladi
 *
 * MODIFICATION HISTORY:
 *
 * Created - smalladi 10/24/96
 *
 */

#ifndef YDBR_ORACLE
# define YDBR_ORACLE

#ifndef NSI
# include <nsi.h>
#endif

#ifndef NL_ORACLE
# include <nl.h>
#endif

#ifdef WIN32COMMON
#ifndef SNS
# include <sns.h>
#endif
#endif /* WIN32COMMON */

#ifndef YS_ORACLE
# include <ys.h>
#endif

#ifndef YEEV_ORACLE
# include <yeev.h>
#endif

#ifndef SYSXCD_ORACLE
# include <sysxcd.h>
#endif

#ifndef SSYSI_ORACLE
# include <ssysi.h>
#endif

#ifndef YOBR_ORACLE
# include <yobr.h>
#endif

#ifndef YTEX_ORACLE
# include <ytex.h>
#endif

#ifndef YOCOA_ORACLE
# include <yocoa.h>
#endif

#ifndef YDBRI_IDL
#include <ydbri.h>
#endif

#ifdef NS_TRACE
#define YDBR_PFILENAME "sqlnet"
#define YDBR_PFILENAMEL sizeof(YDBR_PFILENAME) - 1
#define YDBR_TFILENAME "ydbr_ns_trace"
#define YDBR_TFILENAMEL sizeof(YDBR_TFILENAME) - 1
#define YDBR_TRCDIRNAME "ydbr.trace_directory"
#define YDBR_TRCLEVNAME "ydbr.trace_level"
#endif

enum { GIOP_MY_MAJOR = 1, GIOP_MY_MINOR = 0 };
 
/*
 * All GIOP messages include a header and message type.
 */

typedef struct {ub1 major, minor; } ydbrGiopVer;
typedef struct {
     ub1            magic[4];    /* "GIOP" */
     ydbrGiopVer    giop_version;
     ub1            byte_order;   /* 0 = big, 1 = little */
     ub1            message_type; 
     ub4            message_size;
} ydbrGiopMsgHdr;

/* CDR dectates that the header length is 12 */
#define GIOP_HDR_LEN   12

/* Fixed default port that YDBR binds to */
#define YDBRPORT (ub2) 7777

/* Default maximum physical/socket IIOP connections to maintain */
#define YDBR_DEF_MAX_CONNS  32

#define YDBR_IDLE_TIME 600000000 /* default idle time before close, 10 mts */
#define YDBR_NO_DELAY 0
#define YDBRALL (ub2) 0
#define YDBRONE (ub2) 1
#define YDBR_MAX_REQUEST_ID  4294967295U
#define YDBR_TNS_STRING_SIZ  256
#define YDBR_HOST_STRING_SIZ 64 
#define YDBR_CLEANUP_INTERVAL 600000000   /* 10 minutes in usec */
#define YDBR_FAC "YDBR"

#define YDBR_BASE 10000
#define YDBR_DEBUG_BASE 10250
#define YDBR_TRACE_BASE 10300
#define YDBR_INFO_BASE 10500
#define YDBR_ERROR(n) YS_PRODUCT, YDBR_FAC, (YDBR_BASE + (ub4) n)
#define YDBR_DEBUG(n) YS_PRODUCT, YDBR_FAC, (YDBR_DEBUG_BASE + (ub4) n)
#define YDBR_INFO(n)  YS_PRODUCT, YDBR_FAC, (YDBR_INFO_BASE + (ub4) n)
#define YDBR_TRCINFO(n) YS_PRODUCT, YDBR_FAC, (YDBR_TRACE_BASE + (ub4) n)

#define YDBRLOW_EP_MARK  2
externref ysidDecl(YDBR_EX_NS_INIT_FAILED);
externref ysidDecl(YDBR_EX_NS_FAILED);
externref ysidDecl(YDBR_EX_INTERNAL_ERROR);
externref ysidDecl(YDBR_EX_CLOSE_CONNECTION);
externref ysidDecl(YDBR_EX_MESSAGE_ERROR);
externref ysidDecl(YDBR_EX_COMM_FAILED);

/* Forward declarations */
typedef struct ydbrmsg ydbrmsg;
typedef struct ydbrReqMap ydbrReqMap;
typedef struct ydbriep ydbriep;
typedef struct ydbrctx ydbrctx;

/*
 * IIOP end point. This represents a connection endpoint including
 * any pending messages and the state of the connection.
 */

struct ydbriep 
{
    snshdl          fd;                                        /* end point */
    ub2             flags;     /* Flags that indicate the type of end point */
#define YDBRIEP_DATA  0x0001                              /* Data end point */
#define YDBRIEP_CONN  0x0002                        /* Connection end point */
#define YDBRIEP_LSTN  0x0004                         /* listening end point */
#define YDBRIEP_NOMSG 0x0008               /* No message passed through yet */
#define YDBRIEP_CXD_VALID 0x0010                      /* cxd field is valid */
#define YDBRIEP_MSG_PENDING  0x0020    /* We have a pending msg to be sent  */
                                           /* out on an IIOP connection     */
#define YDBRIEP_HEADER     0x0040     /* Indicates whether this is a header */
#define YDBRIEP_PARTIAL_RECV 0x0080   /* We have received a partial message */
    nscxd           *cxd;                          /* NS Context descriptor */
    sword           slot;                      /* slot in the ys event list */
    ub2             port;   /* port at which the remote server is listening */
    char            *host;                      /* remote server host name  */
    ub2             state;                        /* State of the end point */
#define YDBRIEP_WAIT2READ    0x0001            /* Waiting to get ready2read */
#define YDBRIEP_WAIT2WRITE   0x0002           /* Waiting to get ready2write */
#define YDBRIEP_READY2READ   0x0004                        /* Ready to read */
#define YDBRIEP_READY2WRITE  0x0008                       /* Ready to write */
#define YDBRIEP_NONE         0x0000                          /* Nothing yet */
    ydbrmsg           *sendq;            /* Send queue - to IIOP connection */
    ydbrmsg           *recvq;          /* Recv queue - from IIOP connection */
    ub2             sendqlen;                /* # of messages on send queue */
    ub2             recvqlen;                /* # of messages on recv queue */
    struct ydbriep  *next;                              /* next in the list */
    struct ydbriep  *prev;                              /* prev in the list */
    /* Channel metrics */
    ydbr_GiopMsgType LastMsg;       /* last message that has passed through */
    sysb8           LastUsed;                      /* Time of last activity */
    ydbr_MsgCount   mcount;             
    ub4             ErrCount;       /* Total # of errors on this connection */
};

/*
 * Queue that holds information about request_id mapping
 */
struct ydbrReqMap
{
    ub2                 flags;
#define      YDBRREQ_HDLR_ACTIVE     0x0001   /* Handler is still active */
#define      YDBRREQ_FREE_REQ        0x0002   /* Free this request next time */ 
    ydbriep             *ep; 
    dvoid               *mn_addr;
    ub4                 orig_reqid;
    ub4                 mapped_reqid;
    ub2                 stage;
    ydbrctx             *ctx;
    ydbrmsg             *msg;   /* Corresponding RequestMessage */
    ydbrmsg             *current;  /* message that just got sent through
                                    * yobrSendMsg() */
};
/*
 * ydbr context structure  
 */
struct ydbrctx 
{
   CONST char *hostname;
   CONST char *pid;
   ub2      flags;                                       /* to be defined */
#define YDBRCLOSECONN_ONERROR    0x0001   /* Close connection on an error */
#define YDBR_DONE_EVREG 0x0002           /* Called nsevreg() atleast once */
#define YDBRCLOSEIDLE_CONN  0x0004            /* Close an idle connection */
   ub2      nsidle;    /* will be set if some one (thread ) is already in */
   ysque    *evtq;      /* queue on which triggered events will be placed */ 
   ub2      port;                               /* IIOP port to listen on */
   char     *my_iiop_addr;       /* my addr in the form TCP:hostname:port */
   dvoid    *osdp;                   /* osdp pointer supplied to ysInit() */
   ysevt    *revt;                                   /* Event for receive */
   ysmhp    *heap; /* global heap from which all memory allocations occur */
   ub2      threaded;                          /* Code is threaded or not */
   dvoid    *npdgbl;                                        /* NPD global */
   dvoid    *nsgbl;                                          /* NS global */
   nscnd    *my_tns_addr;                    /* My TNS address (NV string */
   nsind    *ind;                         /* NS Initialization descriptor */
   ydbriep  *lfd;                          /* NS IIOP listening end point */
   ub2      maxfds;                            /* Maximum # of active fds */
   ub2      nfds;                                      /* # of active fds */
   ydbriep  *eplist;                               /* IIOP end point list */
   yeev     yev;                                /* Event system reference */
   ub4      request_id;                           /* Request_id generator */
   sysb8      idletime;               /* Idle time before conn. is closed */
   sysb8      cinterval;              /* Clean up interval */
   yobrctx    *yobrctx;              /* yobrctx as returned by yobrInit() */
   yshsh      *reqhash;                     /* Hash table for request ids */
   yshsh      *profhash;                  /* Hash table for IIOP profiles */ 
   /* Statistics */
   ub4      ccount;              /* Total # of connections so far managed */
   ub4      ecount;                   /* Total # of errors on connections */
};

/*
 * Message descriptor representing a queue of messages for a
 * given connection.
 */
struct ydbrmsg 
{
   ub2                 flags;          /* Flags  indicating message state */
#define YDBRMSG_PARTIAL_HDR   0x0001           /* Partial header received */
#define YDBRMSG_PARTIAL_MSG   0x0002          /* Partial message received */
#define YDBRMSG_HEADER        0x0004                /* This is the header */
#define YDBRMSG_YOBRALLOC     0x0008        /* yobrmsg allocated by yobr  */
#define YDBRMSG_ABV           0x0010
   sb4                 alen;                     /* Actual message length */
   sb4                 rlen;               /* Message length read already */
   yobrMsg             yobrmsg;                           /* yobr Message */
#define ydbrbv    yobrmsg.bv
#define ydbrnbv   yobrmsg.nbv
#define from_addr  yobrmsg.from
   ydbrctx             *ctx;                            /* Bridge context */
   ysbv                *abv;                   /* bv representing payload */
   sword               anbv;                                /* Actual nbv */
   yogiIiopProf        *prof;           /* IIOP profile  for this message */
   yogiIiopProf        *org_prof; /* Original IIOP profile, not forwarded */ 
   ydbrGiopMsgHdr      *hdr;              /* GIOP header for this message */
   dvoid               *objref;  /* Dest. addr for msg from an IIOP conn. */
   ub1                 *tmpbuf;
   ydbrReqMap          *req;   /* Request id associated with this message */
                                                 /*  Valid for sendq only */
   struct ydbrmsg      *next;                    /* Next message in queue */
   struct ydbrmsg      *prev;                    /* prev message in queue */
}; 

typedef struct
{
     ub2             flags;
     yogiIiopProf    *orig_prof;
     yogiIiopProf    *fwd_prof;
} ydbrProf;

#define YDBR_REQUESTS_PENDING(ep) \
  (ep->mcount.Request - ep->mcount.Reply - ep->mcount.onewayRequests)

/*
 * Macro to get a lock on a given address. Nil for now.
 */

#define YDBRGET_MUTEX(ptr, ctx)

/*
 * Macro to release the lock . Nil for now.
 */

#define YDBRRELEASE_MUTEX(ptr, ctx) 


/*
 * Macro to insert a new member into the endpoint list, msg queue and
 * request_id list. New member is inserted at the end.
 */
#define YDBRINSERT_MBR(mbrlist, newmbr) \
 { \
   if(mbrlist->next) \
   { \
      newmbr->next = mbrlist->next; \
      mbrlist->next->prev = newmbr; \
   } \
   else \
   { \
      newmbr->next = 0; \
   } \
   newmbr->prev = mbrlist; \
   mbrlist->next = newmbr; \
 }

#define YDBRINSERT_EP(eplist, newep) YDBRINSERT_MBR(eplist, newep) 

#define YDBRINSERT_MSG(msgq, newmsg) \
  { \
     ydbrmsg   *list = msgq; \
     while(list->next) \
        list = list->next; \
     list->next = newmsg; \
     newmsg->next = NULLP(ydbrmsg); \
     newmsg->prev = list; \
  }

/*
 * Macros to delete members from eplist, msgq and reqlist
 */

#define YDBRDEQUE_MBR(mbr) \
 { \
    mbr->prev->next = mbr->next; \
    if(mbr->next) \
      mbr->next->prev = mbr->prev; \
 }

#define YDBRDEQUE_EP(ep) YDBRDEQUE_MBR(ep) 
#define YDBRDEQUE_MSG(msg) YDBRDEQUE_MBR(msg)

/*
 * System dependent info. 
 */

#define YDBR_MY_BYTE_SEX SYSX_BYTE_ORDER   

#endif   /* YDBR_ORACLE */
