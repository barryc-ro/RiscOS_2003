/* Copyright (c) 1995-1996 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 * ycrec.c - Error Recording & Reporting
 *
 * NOTES
 * All the compiler error reporting is layered on top of ysRecord.
 * However, we hijack the default tty sink reporting so that we can
 * control the message formatting and keep an accurate error and
 * warning count. The error reporting setup is done in ycMain. See
 * also yc.h for macros and assorted body parts which make the actual
 * ysRecord calls somewhat similar.
 *
 * All messages should be reported using the following format:
 *
 *   ysRecord( YCMSG(N), YC<sev>SEV, arg, arg, ..., YSLEND);
 *
 * where N is the error message number WITHOUT the absolute message number
 * base for the compiler (e.g. YCMSG(2), not YCMSG(5002)); sev is one of
 * the severity levels ERR, WARN, INFO; and "arg" denotes the values to
 * fill in the message format string. You need not use YCERRSEV & company
 * - they're just a short cut around the unused associated parameter to
 * ysRecord. See yslog.h for additional information about ysRecord.
 *
 * New error messages should be added to OMNIDLC.msg. And while you're at
 * it, put a test in /vobs/mx/tst/yc/err.
 *
 * HISTORY
 * 04/08/96 kcoleman	Use ysRecord for error reporting. 
 * 09/12/95 kcoleman	Modify err mesg format for fn and line no info
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif
#ifndef YSL_ORACLE
#include <ysl.h>
#endif
#ifndef YSMSG_ORACLE
#include <ysmsg.h>
#endif


/*
 * ycRecord - Error reporting callback for compiler's error messages.
 *
 * This function is registered as a callback for the compiler-specific
 * error message sink. We use it to track the error/warning count and
 * to distinguish error and warning message formats.
 *
 * Most of the error formatting/output code was lifted directly from
 * ysSinkTty.
 */
void ycRecordCB( dvoid* usrp, yslrec* rec)
{
  ycctx* ctx = (ycctx*) usrp;
  ysmsgd* msgd;               /* message descriptor */
  char* bufp;                 /* ptr into msg format string */
  char buf[512], out[512];    /* the msg string, unexpanded and expanded */

  if ( rec )     /* will be null on sink destruction */
  {
    if ( rec->sev <= YSLSEV_ERR )
      ctx->errcnt++;
    else if ( rec->sev == YSLSEV_WARNING )
      ctx->wrncnt++;

    msgd = ysMsgFind(rec->prod, rec->fac);
    bufp = ysMsgGet(msgd, rec->msgid, buf, sizeof(buf));
    ysMsgFmt(out, sizeof(out), rec->argvec.narg, rec->argvec.args, bufp);
    if ( rec->sev == YSLSEV_WARNING )
      yslError("Warning: %s (%s-%d).\n", out, rec->prod, rec->msgid);
    else
      yslError("%s (%s-%d).\n", out, rec->prod, rec->msgid);
  }
}
