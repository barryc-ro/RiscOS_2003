/* Copyright (c) Oracle Corporation 1996.  All Rights Reserved. */

/*
  NAME
    yorc5.c
  DESCRIPTION
    YO wrappers for RC5 encryption from BSAFE library.

  PUBLIC FUNCTIONS

    yorc5Init
    yorc5Term
    yorc5Encrypt
    yorc5Decrypt

  PRIVATE FUNCTIONS
    yorc5Work

  MODIFIED   (MM/DD/YY)
    dbrower   12/ 6/96 -  created.
    dbrower   04/ 8/97 -  fixed to allow non-chunked input bv's except
			  for the last.  Bug 474505.
*/

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YOCY_ORACLE
#include <yocy.h>
#endif
#ifndef YORC5_ORACLE
#include <yorc5.h>
#endif

#ifndef AGLOBAL_ORACLE
#include <aglobal.h>
#endif
#ifndef BSAFE_ORACLE
#include <bsafe.h>
#endif

/* PRIVATE TYPES AND CONSTANTS */

struct yorc5cx
{
  ub1		    *ukey_yorc5cx;                           /* the user key */
  size_t	    ukeysz_yorc5cx;                              /* its size */
  sysb8		    iv_yorc5cx;              /* doubles as random seed state */
  B_KEY_OBJ	    lkey_yorc5cx;

} ;

static B_ALGORITHM_METHOD *yorc5Chooser[] =
{
  &AM_RC5_CBC_ENCRYPT,
  &AM_RC5_CBC_DECRYPT,
  (B_ALGORITHM_METHOD*)T_malloc,         /* pull in our wrappers from yobs.c */
  (B_ALGORITHM_METHOD*)0
};


/* PRIVATE FUNCTION DECLARATIONS */

STATICF void yorc5Work( yorc5cx *cx, ub4 ib1, ub4 iv2, boolean encrypt,
		       ysbv *ibv, sword nibvs,
		       ysbv *obv, ysmhp *hp );

/* PUBLIC FUNCTIONS */

/* Sadly, we can't do much with key at initialization time:

   - We're going to get a new iv with each block, and
   - We must create a new cipher for each iv

   Therefore, each encrypt and decrypt must create and destroy a new
   cipher for each call.
*/

yorc5cx *yorc5Init( ub1 *key, sword keybytes )
{
  yorc5cx *cx;
  ITEM ikey;
  noreg boolean err;
  int berr;

  NOREG(err);
  err = FALSE;

  yseTry
  {
    cx = (yorc5cx*)ysmGlbAlloc(sizeof(*cx), "yorc5cx" );

#ifdef YORC5_40BIT
  if ( keybytes > 5 )
    keybytes = 5;
#endif

    cx->lkey_yorc5cx = (B_KEY_OBJ)0;
    cx->ukey_yorc5cx = (ub1*)ysmGlbAlloc(keybytes, "yorc5 key");
    cx->ukeysz_yorc5cx = keybytes;
    DISCARD memcpy( cx->ukey_yorc5cx, key, keybytes );

    ysClock( &cx->iv_yorc5cx );

    if( (berr = B_CreateKeyObject( &cx->lkey_yorc5cx ) ) )
      yseThrow( YO_EX_CRYPTO_ERR );

    ikey.len = cx->ukeysz_yorc5cx;
    ikey.data = cx->ukey_yorc5cx;

    if( (berr = B_SetKeyInfo( cx->lkey_yorc5cx, KI_Item, (POINTER)&ikey ) ) )
      yseThrow( YO_EX_CRYPTO_ERR );
  }
  yseCatch( YO_EX_CRYPTO_ERR )
  {
    yorc5Term( cx );
    err = TRUE;
  }
  yseEnd;

  return err ? (yorc5cx*)0 : cx;
}

void yorc5Term( yorc5cx *cx )
{
  if( cx )
  {
    ysmGlbFree((dvoid*)cx->ukey_yorc5cx);
    B_DestroyKeyObject( &cx->lkey_yorc5cx );
    ysmGlbFree( (dvoid*)cx );
  }
}

void yorc5Encrypt(yorc5cx *cx, ub4 *iv1, ub4 *iv2,
		  ysbv *ibv, sword nibvs,
		  ysbv *obv, ysmhp *hp )
{
  ub4 *iv;

  /* Make up an iv -- use the modified seed as the iv value.
     This is a little loose with the use of the syb8, assuming
     it it can be seen as two ub4's of bits. */

  DISCARD ysRand( &cx->iv_yorc5cx );
  iv = (ub4*)&cx->iv_yorc5cx;                                    /* cheating */
  *iv1 = iv[0];
  *iv2 = iv[1];
  
  yorc5Work( cx, iv[0], iv[1], TRUE, ibv, nibvs, obv, hp );
}


void yorc5Decrypt( yorc5cx *cx, ub4 iv1, ub4 iv2,
		  ysbv *ibv, sword nibvs,
		  ysbv *obv, ysmhp *hp )
{
  yorc5Work( cx, iv1, iv2, FALSE, ibv, nibvs, obv, hp );
}

/* PRIVATE FUNCTIONS */

/* ---------------------------- yorc5Work ---------------------------- */
/*
  NAME
    yorc5Work

  DESCRIPTION

    Do the work of rc5 encryption or decryption.  Handed the initialization
    vector to use, buffer vectors to process, and a place to put new
    buffers.

    There will be exactly as many output buffers as were input, of the
    same size.  The input buffers must be multiples 8 in size, which is
    the rc5 block size, except for the last which may be any length.

    All errors throw exceptions.  Input block size improper throws BADPARAM,
    everything else throws YO_EX_CRYPTO_ERR.
    
    It's up to the caller to free the output vectors.

  PARAMETERS

    cx	    -- yorc5cx, containing the key information.
    iv1	    -- the high part of the initialization vector to use
    iv2	    -- the low part of  initialization vector to use
    encrypt -- true to encrypt, false to decrypt.
    ibv	    -- input buffer vectors.
    nibvs   -- number of input vectors.
    obv	    -- output buffer vectors, at least nibvs.
    hp	    -- heap to use to fill in obv.

  RETURNS

    none

  MODIFIED   (MM/DD/YY)
    dbrower   12/11/96 -  created.
*/

STATICF void yorc5Work( yorc5cx *cx, ub4 iv1, ub4 iv2, boolean encrypt,
		       ysbv *ibv, sword nibvs,
		       ysbv *obv, ysmhp *hp )
{
  B_ALGORITHM_OBJ cipher = (B_ALGORITHM_OBJ)0;
  A_RC5_CBC_PARAMS parms;
  sword i;
  size_t oleft;
  unsigned int oactual;
  int berr;                                            /* BSAFE error number */
  ub4 iv[2];
  ub4 ilen;
  ub4 padlen;
  ub1 padbuf[8];

  if( !nibvs )
    return;

  for( i = 0 ; i < nibvs ; i++ )
  {
    /* bitch if any but last ibv is not an 8 byte multiple */
   if( i != (nibvs - 1) && (ibv[i].len % 8) )
       yseThrow(YS_EX_BADPARAM);
    obv[i].len = 0;
  }

  yseTry
  {
    if( (berr = B_CreateAlgorithmObject( &cipher ) ) )
      yseThrow( YO_EX_CRYPTO_ERR );

    parms.version = 0x10;
    parms.rounds = 12;
    parms.wordSizeInBits = 32;
    iv[0] = iv1;
    iv[1] = iv2;
    parms.iv = (unsigned char *)&iv;
    if((berr = B_SetAlgorithmInfo( cipher, AI_RC5_CBC, (POINTER)&parms)))
      yseThrow( YO_EX_CRYPTO_ERR );

    if( encrypt )
      berr = B_EncryptInit( cipher, cx->lkey_yorc5cx, yorc5Chooser,
			   (A_SURRENDER_CTX*)0 );
    else
      berr = B_DecryptInit( cipher, cx->lkey_yorc5cx, yorc5Chooser,
				(A_SURRENDER_CTX*)0 );
    if( berr )
      	yseThrow( YO_EX_CRYPTO_ERR );

    /* Allocate obv as each ibv is crypted. */
    
    oactual = ilen = 0;
    for( i = 0 ; i < nibvs ; i++ )
    {
      ilen += ibv[i].len;
      oleft = obv[i].len = (ibv[i].len + 8);
      obv[i].buf = (ub1*)ysmAlloc( hp, obv[i].len, "yorc5 buf");

      if( encrypt )
	berr = B_EncryptUpdate( cipher, obv[i].buf, &oactual, oleft,
			       ibv[i].buf, ibv[i].len,
			       (B_ALGORITHM_OBJ)0, (A_SURRENDER_CTX*)0 );
      else
	berr = B_DecryptUpdate( cipher, obv[i].buf, &oactual, oleft,
			       ibv[i].buf, ibv[i].len,
			       (B_ALGORITHM_OBJ)0, (A_SURRENDER_CTX*)0 );
      if( berr )
	yseThrow( YO_EX_CRYPTO_ERR );

      oleft -= oactual;
      obv[i].len = oactual;
    }
    
    i--;			/* back up to prev obv */
    
    if( encrypt )
    {
      /* Add at least one byte of pad with length of pad */
      padlen = 8 - (ilen % 8);
      DISCARD memset( padbuf, padlen, padlen );
      if( (berr = B_EncryptUpdate( cipher, obv[i].buf + obv[i].len,
				  &oactual, oleft,
				  padbuf, padlen,
				  (B_ALGORITHM_OBJ)0,
				  (A_SURRENDER_CTX*)0 ) ) )
	yseThrow( YO_EX_CRYPTO_ERR );

      oleft -= oactual;
      obv[i].len += oactual;

      /* should not get any new output at this point */
      if((berr = B_EncryptFinal( cipher, obv[i].buf + obv[i].len,
				&oactual, oleft,
				(B_ALGORITHM_OBJ)0,
				(A_SURRENDER_CTX*)0 )))
	yseThrow( YO_EX_CRYPTO_ERR );

      obv[i].len += oactual;
    }
    else			/* decrypt */
    {
      if( (berr = B_DecryptFinal( cipher,
				 obv[i].buf + obv[i].len, &oactual, oleft,
				 (B_ALGORITHM_OBJ)0,
				 (A_SURRENDER_CTX*)0 ) ) )
	yseThrow( YO_EX_CRYPTO_ERR );

      /* set valid length of last buffer, less padding debris */
      obv[i].len += oactual;
      padlen = obv[i].buf[ obv[i].len - 1 ];
      obv[i].len -= padlen;
    }
  }
  yseFinally
  {
    B_DestroyAlgorithmObject( &cipher );
  }
  yseEnd;
}

