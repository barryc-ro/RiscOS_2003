/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yciclnt.c - generation of client stubs for ITL language mapping
 *
 * NOTES
 *	In the client stubs we generate stub functions for each attribute
 *	and definitions for all the type codes, ysids, and pars structures
 *	declared in the public header.
 *
 *	There's a pars structure for every method, one for every readonly
 *	attribute, two for every read/write attribute. Type codes are
 *	required for most types; ysid's are needed for all interfaces types.
 *
 *	Both attributes and operations eventually go through the 
 *	function yciGenClientStub for stub generation, to insure 
 *      consistency of the stubs.
 *
 * Here is a summary of how data is passed for a parameter of type T
 * in the IDL. In addition to parameter modes and returns, it lists
 * how yoSendReq expects to receive the data. 
 *
 * Type T            in     out/inout     return     yoSendReq
 * -----------------------------------------------------------
 * long,short,       T      T*            T          T*
 *  char,octet,
 *  (unsigned),
 *  float,double
 * enum              T      T*            T          T*
 * boolean           T      T*            T          T*
 * interface         T      T*            T          T*
 * struct,union,     T*     T*            T          T*
 *  seq, any
 * string            char*  char**        char*      char**
 * array (alias)     T      T             T_slice*   T
 *
 * Aliases behave as their base types do for most types, but interfaces,
 * strings, and arrays are handled as special cases. Where the base type
 * encapsulates a pointer (such as an interface or string typedef),
 * the behavior is altered accordingly. So, for instance, a string
 * typedef encodes to:  T (in), T* (out/inout), T (return), T* (yoSendReq)
 * because you would have "typedef char* T;". 
 *
 * Array aliases make use of the aliased array slice for returns, to
 * simplify the declarations. The alias name is used in all other cases.
 *
 * ITL Stubs
 * ---------
 * These are the default stubs. They all look pretty much the same except
 * insofar as they are really hardcoding method id's and arg type information
 * around a call to mttoSendReq (which does all the work).
 *
 * IDL:  interface intf { long op(in long par); };
 *
 * sword intf_op( mttcb *cb, mttitc *ret)
 * {
 *   return mttoSendReq("op", intf_or_pars, cb, ret);
 * }
 *
 * HISTORY
 * 11/28/96 kcoleman	Bug #426687: Change handling of output files
 * 11/20/96 kcoleman	Change intf id's to repository id's
 * 08/20/96 kcoleman	Bug #393905: Change gen of typecode and id defns
 * 07/12/96 dpranke     strip out all redundant code (use c mapping code
 *                      where possible, fix for mn 3.2 conventions
 * 06/11/96 dpranke     update for mn 3.1 / sim 2.3 compatibility
 * 04/08/96 kcoleman	Use ysRecord for error reporting.
 * 03/27/96 kcoleman	Aliases get full typecodes, not macros
 * 12/27/95 dpranke     fix bug #331327 (register callbacks for inherited 
 *                      stuff)
 * 11/17/95 dpranke     make stubs one line long
 * 11/17/95 dpranke	Creation
 */
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCI0_ORACLE
#include <yci0.h>
#endif
#ifndef YCC0_ORACLE
#include <ycc0.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif

STATICF void yciGenClientDefn( ycctx* ctx, yccfp* fp, yrobj* obj);
STATICF void yciGenIntfClient( ycctx* ctx, yccfp* fp, yrobj* inf);
STATICF void yciGenOpClient( ycctx* ctx, yccfp* fp, yrobj* op);
STATICF void yciGenAttrClient( ycctx* ctx, yccfp* fp, yrobj* attr);
STATICF void yciGenInit( ycctx* ctx, yccfp* fp, char* base);
STATICF void yciGenCGClientObjs( ycctx* ctx, yccfp* fp, yslst* objs,
				boolean init);
STATICF void yciGenCbEntries( ycctx* ctx, yccfp *fp, yrobj *inf  );

void yciclnt(ycctx* ctx, char* base, ycfile* fd)
{
  yccfp *fp;
  CONST char* errtxt;
  char* upbase;		/* upper case of base */
  ysle* le;

  /* open temporary output file */
  fp = yccfpOpen(fd->newtmp, "w", SYSFPKIND_NONE, &errtxt, 
                 yccGetLineLimit(ctx));
  if (!fp)
  {
    ysRecord(YCMSG(1), YCERRSEV, YSLSTR(fd->target), YSLSTR(errtxt), YSLEND);
    return;
  }

  /* produce boilerplate output - header, sys includes, generated include */
  yccfpSetIndent( fp, 0);
  yccfpPrint(fp, "/* GENERATED FILE\n * %s - client stubs\n", base);
  yccfpPrint(fp, " * from %s\n */\n\n", ctx->srcnm);
  yciGenSysIncls(ctx, fp, TRUE);
  upbase = ycToUpper(ysStrDup(base));
  yccfpStartPP( fp);
  yccfpPrint(fp, "#ifndef MTTC%s_ORACLE\n", upbase);
  yccfpPrint(fp, "#include <mttc%s.h>\n#endif\n\n", base);
  yccfpEndPP( fp);
  ysmGlbFree( (dvoid*)upbase);

  /* generate init routine */
  yciGenInit(ctx, fp, base);
  /* Generate stub functions, ysid's, and remaining type codes */
  yciGenCGClientObjs(ctx, fp, ctx->newobjs, FALSE);

  yccfpClose(fp);
}

/* ---------------------------------------------------------------------- */

STATICF void yciGenCGClientObjs( ycctx* ctx, yccfp* fp, yslst* objs,
				boolean init)
{
  ysle* le;
 
  if ( objs )
  {
    for ( le = ysLstHead(objs); le; le = ysLstNext(le))
    {
      ycgobj* cgobj = (ycgobj*) ysLstVal(le);
 
      if ( yrGetKind( cgobj->ifrobj) == yrdkModule )
        yciGenCGClientObjs( ctx, fp, cgobj->objlist, init);
      else if ( !ycShouldGenCode(ctx, cgobj->ifrobj) )
        continue;       /* from an include file. Don't gen code */
      else if ( !(cgobj->flags & YCG_FWD) )     /* do nothing for forwards */
      {
	if (init)
	  yciGenCbEntries(ctx, fp, cgobj->ifrobj);
	else
	  yciGenClientDefn( ctx, fp, cgobj->ifrobj);
      }
    }
  }
}


/* ---------------------------------------------------------------------- */
/*
 * yciGenInit - generate callback array and the init routine for the file
 *
 */

STATICF void yciGenCbEntries( ycctx* ctx, yccfp *fp, yrobj *inf  )
{
  ysle *le;

  CONST char* base = (char *)0;
  char* attrName = (char *)0;
  char* opName = (char *)0;
  yrattr* attrdata = (yrattr *)0;

  if (yrGetKind(inf) == yrdkInterface && yrGetContents(inf)) 
  {
    yccfpPrint(fp, "mtticRegInterface(cx, %s__getId());\n",
	       yccGetAbsoluteName(ctx, inf, (yrobj *)0));

    for (le = ysLstHead(yrGetContents(inf)); le; le = ysLstNext(le))
    {
      yrobj* obj = (yrobj*) ysLstVal(le);

      if ( yrGetKind(obj) == yrdkOperation )
      {
	base = yccGetAbsoluteName( ctx, inf, (yrobj *)0);
	opName = yrGetName(obj);

	yccfpPrint(fp, "%s(cx, \"%s_%s\", %s_%s);\n", 
		   "mtticRegCallback", base, opName, base, opName); 
      }
      else if ( yrGetKind(obj) == yrdkAttribute )
      {
	base = yccGetAbsoluteName( ctx, inf, (yrobj*)0);
	attrName = yrGetName(obj);
	attrdata = &(yrAttrData(obj));
	yccfpPrint(fp, "%s(cx, \"%s__get_%s\", %s__get_%s);\n", 
		   "mtticRegCallback", base, attrName, base, attrName); 

	if (attrdata->mode != YR_ATTR_RO)
	  yccfpPrint(fp, "%s(cx, \"%s__set_%s\", %s__set_%s);\n", 
		     "mtticRegCallback", base, attrName, base, attrName); 
      }
    }
    yccfpPrint( fp, "\n");
  }
}

/* ---------------------------------------------------------------------- */
/*
 * yciGenInit - generate callback array and the init routine for the file
 *
 */

STATICF void yciGenInit( ycctx* ctx, yccfp* fp, char* base)
{
  ysle *le;

  yccfpPrint(fp, "/* init routine for %s */\n", base);
  yccfpPrint(fp, "boolean mttc%s__init( mttictx *cx )\n{\n");
  yccfpIncIndent( fp);

  /* generate mtti reg functions for interface and ops */
  yciGenCGClientObjs( ctx, fp, ctx->newobjs, TRUE);

  yccfpPrint(fp, "return (TRUE);\n");
  yccfpDecIndent( fp);
  yccfpPrint(fp, "}\n\n");
}

/* ---------------------------------------------------------------------- */
/*
 * yciGenClientDefn - generate a client stub definition for an IFR object
 *
 */
STATICF void yciGenClientDefn( ycctx* ctx, yccfp* fp, yrobj* obj)
{
  switch ( yrGetKind(obj) )
  {
    case yrdkInterface:		/* lots of stuff */
      yciGenIntfClient( ctx, fp, obj);
      break;
    case yrdkException:		/* typecode and ysid */
      yccGenExcClient( ctx, fp, obj);
      break;
    case yrdkAlias:		/* support funcs & typecode only */
    case yrdkStruct:		/* support funcs & typecode only */
    case yrdkUnion:		/* support funcs & typecode only */
    case yrdkEnum:		/* support funcs & typecode only */
      yccGenTypeCodeDefn( ctx, fp, obj, TRUE);
      break;
    default:			/* do nothing */
      break;
  }
}


/* ---------------------------------------------------------------------- */
/*
 * yciGenInterfaceDefn - generate definition code for an interface
 *
 * For each interface, we generate:
 *  ysid definition for interface name
 *  type code definition for interface name
 *  client stub functions for all operations and attributes
 *  yopar parameter descriptors for all operations and attributes
 *
 * Nothing is generated for op, attrs, types, etc. which are inherited.
 *
 * The ysid for an interface includes a list of all the interfaces from
 * which it inherits, directly or indirectly. This data is used by
 * yoNarrow to figure out whether or not the narrow op is allowed. The
 * format of the ysids is:
 *
 *   inf {/base1/base2.../baseN}
 *
 * Where each interface name is the IDL scoped name (::A::B) and each
 * ancestor name is separated by '/'. The slashes are arbitrary - any
 * char not allowed in a scoped name will do - but if you change it,
 * yoNarrow has to change as well.
 */

STATICF void yciGenIntfClient( ycctx* ctx, yccfp* fp, yrobj* inf)
{
  CONST char* name;
  char* sname;
  ysle* le;

  if ( ycIsCorbaObject( ctx, inf) )       /* Object is a magic cookie */
    return;

  name = yccGetAbsoluteName( ctx, inf, (yrobj*)0);
  sname = yrGetAbsoluteName( inf);
  yccfpPrint( fp, "/* Client stubs for interface %s */\n", sname);

    /***** Generate ysid & typecode definition *****/
  yccGenId( ctx, fp, name, name, TRUE, yrGetRepId(inf));
  yccGenTypeCodeDefn( ctx, fp, inf, TRUE);
  yccfpPrint( fp, "\n");
  ysmGlbFree( (dvoid*)sname);

    /***** Gen supporting and member definitions *****/
  if ( yrGetContents(inf) )
  {
    for (le = ysLstHead(yrGetContents(inf)); le; le = ysLstNext(le))
    {
      yrobj* obj = (yrobj*) ysLstVal(le);

      if ( yrGetDefinedIn(obj) != inf )
        continue;	/* gen no code for inherited members */
      if ( yrGetKind(obj) == yrdkOperation )
	yciGenOpClient( ctx, fp, obj);
      else if ( yrGetKind(obj) == yrdkAttribute )
	yciGenAttrClient( ctx, fp, obj);
      else
        yciGenClientDefn( ctx, fp, obj);  /* to get type code defns, etc. */
    }
    yccfpPrint( fp, "\n");
  }
}


/* ---------------------------------------------------------------------- */
/*
 * yciGenClientStub - gen client stub for op/attribute
 *
 * See comment at the top of the file for documentation on what the
 * stubs look like - basically one-line wrapper around mttioSendReq
 *
 */
STATICF void yciGenClientStub( /* ARGUSED */ ycctx* ctx,
			       yccfp* fp,
			       /* ARGUSED */ yrobj* intf, 
			       /* ARGUSED */ yrobj* rettype,
			       CONST char* opName,
			       CONST char* implName, 
			       /* ARGUSED */ yslst* pars,
			       /* ARGUSED */ boolean oneway)
{
  /* function declaration */
  yccfpPrint(fp,"void %s( mttictx *cx, yslst *args, mttitc *ret)\n{\n",
		     opName);

  /* write the one line invocation of mttioSendReq */
  yccfpIncIndent(fp);
  yccfpPrint(fp, "mttioSendReq( cx, \"%s\", ", implName);
  yccfpPrint(fp, "%s__getPars(), args, ret);\n", opName);
  yccfpDecIndent(fp);
  yccfpPrint(fp, "}\n\n");
  
}

/* ---------------------------------------------------------------------- */
/*
 * yciGenOpClient - generate client stubs for an interface operation
 *
 * Generates only a sync stub
 */

STATICF void yciGenOpClient( ycctx* ctx, yccfp* fp, yrobj* op)
{
  CONST char* name = yccGetAbsoluteName( ctx, op, (yrobj*)0);
  yrop* opdata = &(yrOpData(op));

  yccGenParamDesc( ctx, fp, name,opdata->pars,opdata->raises,opdata->rettype,
                   opdata->ctxts);
  yciGenClientStub( ctx, fp, yrGetDefinedIn(op), opdata->rettype,
		   name, yrGetName(op), opdata->pars, 
		   opdata->mode == YR_OP_ONEWAY);
}


/* ---------------------------------------------------------------------- */
/*
 * yciGenAttrClient - generate client stubs for an attribute
 *
 * Generates <intf>__get_<attr> and <intf>__set_<attr> in synchronous
 * forms
 */

STATICF void yciGenAttrClient( ycctx* ctx, yccfp* fp, yrobj* attr)
{
  CONST char* base = yccGetAbsoluteName( ctx, yrGetDefinedIn(attr), (yrobj*)0);
  char* attrName = yrGetName(attr);
  yrattr* attrdata = &(yrAttrData(attr));
  yrobj* defined_in = yrGetDefinedIn(attr);
  char* name = 
	(char*) ysmGlbAlloc( strlen(base) + strlen(attrName) + 7, "attrName");
		/* "__get_" + 1 == 7 */

    /* synchronous get stub */
  ysFmtStr( name, "%s__get_%s", base, attrName);
  yccGenParamDesc( ctx, fp, name, (yslst*)0, (yslst*)0, 
			attrdata->type, (yslst*)0);
  yciGenClientStub( ctx, fp, defined_in, attrdata->type,
			name, name + strlen(base) + 1, (yslst*)0, FALSE);

    /* synchronous set stub */
  if ( attrdata->mode != YR_ATTR_RO )
  {
    yslst* pars = ysLstCreate();
    yrpar param;

    ysFmtStr( name, "%s__set_%s", base, attrName);
    param.name = (char *)"val";
    param.type = attrdata->type;
    param.mode = YOMODE_IN;
    DISCARD ysLstEnq( pars, (dvoid*) &param);

    yccGenParamDesc( ctx, fp, name, pars, (yslst*)0, (yrobj*)0, (yslst*)0);
    yciGenClientStub( ctx, fp, defined_in, 
			yrGetPrimitive( yrGetRepository(attr), yrpkvoid),
			name, name + strlen(base) + 1, pars, FALSE);
    ysLstDestroy( pars, (ysmff)0);
  }

  ysmGlbFree( (dvoid*)name);
}
