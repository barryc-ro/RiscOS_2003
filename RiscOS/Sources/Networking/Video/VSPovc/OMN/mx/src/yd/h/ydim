/* Copyright (c) Oracle Corporation 1995.  All Rights Reserved. */

/*
  NAME
    ydim.h
  DESCRIPTION
    
  PUBLIC FUNCTIONS
    <x>
  NOTES
    <x>
  MODIFIED   (MM/DD/YY)
    dbrower   07/20/95 -  created.
    dbrower   02/27/96 -  move ydimain here; make it visible for router.
			  Add sync/handler interfaces.
    dbrower   07/30/96 -  add launch lock exception.
*/

#ifndef YDIM_ORACLE
#define YDIM_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YSV_ORACLE
#include <ysv.h>
#endif
#ifndef YDU_ORACLE
#include <ydu.h>
#endif
#ifndef YSSP_ORACLE
#include <yssp.h>
#endif

/* PUBLIC TYPES AND CONSTANTS */

/* too many instances of this interface are active; can't launch another */
externref ysidDecl( YDIM_EX_TOO_MANY );

typedef struct ydimain	ydimain;

/* active info node in atree */
struct ydimain
{
 ysspNode	    anode_ydimain; /* key points to ainfo. */ 
 ydyo_activeInfo    ainfo_ydimain;
 ub4		    ucnt_ydimain;
 dvoid		    *usrp_ydimain; /* set by ydimActiveSetUsrp */
};

/* PUBLIC FUNCTIONS */

/* ---------------------------------------------------------------- */
/* server initialization */
/* ---------------------------------------------------------------- */

void ydimInit( ysque *imq, ydim_imr *oydim_imr );
void ydimTerm( ydim_imr imr );

/* ordering hack. */
void ydimSetRefs( ydim_imr imr, ydmt_imtr mt, ydsp_spawner sp );

/* ---------------------------------------------------------------- */
/* Sync related */
/* ---------------------------------------------------------------- */


/* ------------------------- ydimSyncFunc ------------------------- */
/*
  NAME
    ydimSyncFunc
  DESCRIPTION
    Type of function called by when the sync handler count is zero, or
    the sync object is destroyed.
  PARAMETERS
    or	    -- the affected sync object.
    decr    -- TRUE if this was a decr operation, FALSE if an explicit
		destroy.  If decr, the owner must destroy the sync object.
  RETURNS
    none
*/

typedef void (*ydimSyncFunc)( ydim_sync or, boolean decr, dvoid *usrp);

/* ---------------------------- ydimSetSyncHandler ---------------------------- */
/*
  NAME
    ydimSetSyncHandler
  DESCRIPTION
    Set a handler to be called when the count on a sync goes to zero,
    or when it is destroyed.
  PARAMETERS
    or	    -- the sync object
    hdlr    -- the callback function.
    usrp    -- arg to hdlr.
  RETURNS
    none
*/
void ydimSetSyncHandler( ydim_sync or, ydimSyncFunc hdlr, dvoid *usrp );


/* ---------------------------------------------------------------- */
/* Routing Lookup Related */
/* ---------------------------------------------------------------- */

/* -------------------------- ydimActiveGetAInfo -------------------------- */
/*
  NAME
    ydimActiveGetAInfo
  DESCRIPTION
    Return a pointer to the ydimain for the active impl, in global memory.
    This can be dangerous; use carefully in the router.
  PARAMETERS
    or		-- the ydim_active object ref.
  RETURNS
    pointer to the associated data.
*/
ydimain *ydimActiveGetAinfo( CONST ydim_active or );

/* --------------------------- ydimActiveSetUsrp --------------------------- */
/*
  NAME
    ydimActiveSetUsrp
  DESCRIPTION
    Set the usrp associated with a yort/intf/impl active definfition.
    This is normally used to associate metric information with the ai.
  PARAMETERS
    imr	    handle for the context
    y	    the yort	 \
    intf    the interface > -- the key
    impl    the impl     /
    usrp    the data to associate.
  RETURNS
    none
*/
void ydimActiveSetUsrp( CONST ydim_imr imr, yort_proc y,
		       char *intf, char *impl, dvoid *usrp );


/* ---------------------------- ydimListImpl ---------------------------- */
/*
  NAME
    ydimListImpl
  DESCRIPTION
    Return pointers to the ydim_implInfo for all impls that match
    the criteria, based on host.
  PARAMETERS
    lst	    -- list to append, or create if NULL (IN/OUT)
    imr	    -- handle for the context
    intf    -- interface to lookup (may be null)
    impl    -- implementation to require (may be null)
    res	    -- the host to require (may be null)   
  RETURNS
    pointer to the yslst, where each element value is a
    pointer to a ydim_implInfo in the IMR.
*/
yslst *ydimListImpl( yslst *lst, ydim_imr imr,
		    char *intf, char *impl, char *host );


/* ---------------------------------------------------------------- */
/* launch related */
/* ---------------------------------------------------------------- */

/* ---------------------------- ydimRdyFunc ---------------------------- */
/*
  NAME
    ydimRdyFunc
  DESCRIPTION
    Callback function registered with ydimStartLaunch, and called
    whenever (a) an impl started comes ready or (b) timeout has occurred.

  PARAMETERS
    usrp    -- the usrp given to ydimStartLaunch.
    reqs    -- a yslst of all the elements from ydimStartLaunch and
	       ydimAppendLaunch.  When a request is consumed, it
	       should be removed from the list.
    active  -- a yslst of all ydyo_activeInfo's associated with the
		launch that have been activated;requests may be sent there
    timedout -- a yslst of all ydyo_activeInfos that did not become
		active before the timeout expired.

  RETURNS
    none
*/

typedef void (*ydimRdyFunc)( dvoid *usrp, yslst *reqs,
			    yslst *active, yslst *timedout );

/* ---------------------------- ydimStartLaunch ---------------------------- */
/*
  NAME
    ydimStartLaunch
  DESCRIPTION
    Start the launch of a process, as far as the IMR is concerned.
    This creates an active impl for each impl that is started the same
    way, in a way the ydimIsLaunching will return true.
    It creates the queue of pending requests which is appended by
    the ydimAppendLaunch operation.  It also arranges to drive the rdy
    function when the implementations become active.
    
  PARAMETERS
    imr	    -- handle to the context
    info    -- description of the impl being launched.
    timeout -- how long to wait before giving up.
    usrp    -- given to the rdy func on callback.
    rdy	    -- function called when relevent impls come active.
    element -- initial element on the request queue.
  RETURNS
    pointer to the dummy yort_proc created for the launching
    process.  When handed to ydimIsLaunching, will return TRUE.
*/

yort_proc ydimStartLaunch( ydim_imr imr, ydim_implInfo *info, sysb8 *timeout,
			  dvoid *usrp, ydimRdyFunc rdy, dvoid *element );

/* ---------------------------- ydimIsLaunching ---------------------------- */
/*
  NAME
    ydimIsLaunching
  DESCRIPTION
    Is the yort y being launched right now?
  PARAMETERS
    imr	    -- handle to the context.
    y	    -- yort to consider
  RETURNS
    TRUE if the yort is one being launched right now.    
*/

boolean ydimIsLaunching( ydim_imr imr, yort_proc y );

/* -------------------------- ydimAppendLaunch ---------------------------- */
/*
  NAME
    ydimAppendLaunch
  DESCRIPTION
    Append another element on the queue of requests pending for the
    implementation identified by the info.
  PARAMETERS
    imr	    -- handle to the context.
    info    -- info (yort/intf/impl) of the launching process.
    element	-- ite
  RETURNS
    none
*/
void ydimAppendLaunch( ydim_imr imr, ydim_implInfo *info, dvoid *element );

#endif


