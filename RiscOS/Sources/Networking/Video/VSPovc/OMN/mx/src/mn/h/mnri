/* Copyright (c) 1994 by Oracle Corporation.  All Rights Reserved.
 *
 * mnri.h - Media Net RPC Internal Definitions
 *
 * REVISIONS
 * jolkin    11/19/94  Added mnrscd structure
 * jolkin    07/28/94  Major revision to use process server
 * jolkin    06/22/94  Made mneSemSetHandler() support auto-freeing
 * jolkin    05/14/94  Creation
 */

#ifndef MNRI_ORACLE
#define MNRI_ORACLE

#ifndef MNRC_ORACLE
#include <mnrc.h>
#endif
#ifndef MNRS_ORACLE
#include <mnrs.h>
#endif
#ifndef MNX_ORACLE
#include <mnx.h>
#endif
#ifndef MNI_ORACLE
#include <mni.h>
#endif

/*
 * RPC Message header
 *   The compid and operid fields may be replaced with a null-terminated
 *   string naming the component to be invoked.  The actual data will
 *   begin on a four-byte-aligned boundary following the name.
 */
typedef struct mnrhdr mnrhdr;

#define MNOPT_NOREPLY ((ub4) 0x0001)                 /* no reply is expected */

struct mnrhdr
{
  ub4   callid;                                           /* call identifier */
  ub4   options;                                             /* call options */
  ub4   ctxid;                                         /* context identifier */
  mna   from;                                                /* from address */
};

/*
 * Server-specific declarations
 */
typedef struct mnrscx mnrscx;                        /* client-based context */
typedef struct mnrscd mnrscd;               /* internal component descriptor */

struct mnrs
{
  mnrid         progid;                                /* program identifier */
  mnrscd       *cds;                                /* component descriptors */
  dvoid        *usrp;                         /* server-wide context pointer */

  const char   *name;                                      /* name of server */
  boolean       thread;                    /* true if we are multi-instanced */
  mnrb         *scbh;                       /* process server binding handle */

  mnp          *port;                                     /* RPC server port */
  boolean       registered;                            /* true if registered */

  boolean       gnc;                  /* true if mnsGetNext() should be done */
  boolean       newcalls;                 /* true if new clients are allowed */
  sb4           final;                             /* final status of server */
  boolean       running;              /* true if new contexts can be created */
  ub4           nctxid;                 /* next context identifier to assign */
  mnrscx       *ctxs;                             /* list of client contexts */
};

struct mnrscd
{
  mnrscd      *next;                   /* next component descriptor in chain */
  const mnrcd *cd;                                   /* component descriptor */
  dvoid       *usrp;                       /* component-wide context pointer */
};

struct mnrsc
{
  mnrs  *sh;                                                /* server handle */
  ub1   *data;                       /* raw received data (including header) */
  ub4    len;                                 /* raw length of received data */
  mna    from;                                             /* client address */
  ub4    callid;                                          /* call identifier */
  ub4    options;                                            /* call options */
  ub4    ctxid;                                        /* context identifier */
};

struct mnrscx
{
  mnrs    *sh;                                              /* server handle */
  mna      addr;                                           /* client address */
  mnrscx  *next;                                     /* next context in list */
  dvoid   *ctx;                                            /* client context */
  ub4      ctxid;                                      /* context identifier */
  void   (*rdfunc)(mnrsc *, mnbv *, ub4);                /* rundown function */
};

void mnrReturnError(mnctx *ctx, mnrsc *call, sb4 err);

/*
 * Client-specific declarations
 */
typedef struct mnrce  mnrce;                                   /* call event */
typedef struct mnrccx mnrccx;            /* client-side client-based context */

struct mnrb
{
  mna      server;           /* cached address of server (or process server) */
  mnp     *port;                                              /* client port */
  mnrce   *calls;                                /* doubly linked call chain */
  mnrccx  *ctxs;                     /* open contexts on through this handle */
  sb4      sts;                                  /* status of binding handle */
};

struct mnrce
{
  mnrce   *next;                                       /* next call in chain */
  mnrce   *prev;                                   /* previous call in chain */
  ub4      callid;                                        /* call identifier */
  mnrb    *bh;                          /* binding handle covering this call */
  mnbv   **outargs;                                    /* outbound arguments */
  ub4     *outcnt;                  /* outbound argument buffer vector count */
  mnrccx **chp;                                           /* context pointer */
  mnsem   *ssem;                /* semaphore tracking completion of the send */
  mnsem   *sem;                 /* semaphore tracking completion of RPC call */
};

struct mnrccx
{
  mnrccx  *next;                                      /* next client context */
  ub4      ctxid;                                      /* context identifier */
  mna      server;              /* address of server instance owning context */
};

void   mnrDoCall(mnctx *ctx, mnrb *bh, mnrccx **chp, const char *oper,
		 mnbv *inargs, ub4 incnt, mnbv **outargs, ub4 *outcnt,
		 mnsem *sem);
void   mnrCallComp(dvoid *cep, sb4 sts);
void   mnrRecvReply(dvoid *bhp, sb4 len);
void   mnrAddCall(mnctx *ctx, mnrb *bh, mnrce *ce);
void   mnrFreeCall(mnctx *ctx, mnrce *ce);
mnrce *mnrFindCall(mnctx *ctx, mnrb *bh, ub4 callid);
void   mnrFreeCtx(mnctx *ctx, mnrb *bh, mnrccx *ch);

/*
 * Marshalling Declarations
 */
typedef struct mnxptr mnxptr;               /* marshalled pointer descriptor */
typedef struct mnxstr mnxstr;                /* marshalled stream descriptor */

#define MNXROWS     16                       /* number of rows in hash table */
#define MNXBLKSIZE  1024                   /* default block size to allocate */

struct mnx
{
  ub4     dir;                                   /* direction of marshalling */
  dvoid  *usrp;                                              /* user pointer */

  mnbv  **bvp;                                              /* buffer vector */
  ub4    *nbvp;                               /* number of buffers in vector */
  ub1    *ptr;                                /* pointer into current buffer */
  ub4     max;                           /* maximum length of current buffer */
  ub4     bvidx;                         /* current index into buffer vector */

  ub4    *ptrcnt;         /* position in marshalling stream of pointer count */
  ub4     nidx;                                       /* next pointer number */
  mnxptr *eptrs[MNXROWS];               /* hash table of pointers (encoding) */
  dvoid **dptrs;                             /* array of pointers (decoding) */
};

struct mnxptr
{
  mnxptr *next;                                  /* next pointer in hash row */
  ub4     idx;                                   /* encoded index of pointer */
  dvoid  *ptr;                                        /* actual user pointer */
};

ub1    *mnxSpace(mnctx *ctx, mnx *xstr, size_t cnt, ub4 align);
boolean mnxBytes(mnctx *ctx, mnx *xstr, ub1 **array, ub4 *nelm, ub4 maxelm);
sb4     mnxEncodeRef(mnctx *ctx, mnx *xstr, dvoid *ptr, ub4 *idx);
boolean mnxDecodeRef(mnctx *ctx, mnx *xstr, dvoid **ptr, ub4 idx,
		     size_t objsz);
void    mnxOSCAcc(dvoid *sp, sb4 sts);
void    mnxOSCRead(dvoid *sp, sb4 sts);
sb4     mnxOSSPush(mnxStream *stream, dvoid *ptr);
void    mnxOSSClose(mnxStream *stream, sb4 sts);

#endif /* MNRI_ORACLE */
