/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * yobr.h - Bridge Interfaces private between YO and YDBR
 */

#ifndef YOBR_ORACLE
#define YOBR_ORACLE

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSV_ORACLE
#include <ysv.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
#ifndef YOGIOP_ORACLE
#include <yogiop.h>
#endif

/* yobrInit, yobrTerm - bridge startup and shutdown
 *
 * DESCRIPION
 *
 */
typedef struct yobrctx yobrctx;

yobrctx *yobrInit(CONST char *proto, CONST char *extaddr);
void    yobrTerm(yobrctx *brcx);

/* yobrSendException -
 *
 * DESCRIPION
 * Send a given exception to a client represented by to_addr in response to
 * a message with a request id reqid.
 *
 */
void yobrSendException(yobrctx *brcx, dvoid *dstref, ub4 reqid,
                       CONST ysid *exid);

/* yobrGetObjRef, yobrFreeObjRef -
 *
 * DESCRIPION
 * yobrGetObjRef() unmarshalls the GIOP object key from the GIOP Request or
 * LocateRequest message represented by bv and nbv.  yoRelease() should
 * be used to free the object reference returned.
 */
dvoid  *yobrGetObjRef(ysbv *bv, sword nbv);

/* yobrRecvTest, yobrRecvMsg, yobrSendMsg - YO universe messaging
 *
 * DESCRIPTION
 * yobrRecvMsg() recieves the a message destined for the bridge.  The event
 * passed is triggered with a yobrMsg structure as the arg.  yobrFreeMsg()
 * should be used to dispose of this value.
 * yobrSendMsg() sends a message from the bridge to an ORB process in the
 * YO universe.
 */
typedef struct yobrMsg yobrMsg;
struct yobrMsg
{
  dvoid *from;                     /* object reference of the source process */
  yogiIOR ior;                                        /* target IIOP profile */
  ub1 mtype;                                            /* GIOP message type */
  ysbv *bv;          /* array of buffer vectors containing the whole message */
  sword nbv;                                    /* buffer vector array count */
  sword idx;                                  /* GIOP message start bv index */
  sword off;                /* GIOP message start offset within the above bv */
};
void yobrRecvMsg(yobrctx *cx, ysevt *evt);
void yobrFreeMsg(yobrMsg *msg);
void yobrSendMsg(yobrctx *cx, dvoid *destref, ysbv *bv, sword nbv, ysevt *evt);

/* yobrDecGiopMsg - 
 */
void yobrDecGiopMsg(ysbv *bv, sword nbv, yogiMsg *gm);
void yobrFreeGiopMsg(yogiMsg *gm);

void yobrEncGiopLocRep(yogiLocRep *lr, yogiIOR *ior, ysbv **bv, sword *nbv);

/* yobrGetReqId, yobrPutReqId - 
 *
 * DESCRIPTION
 * yobrGetReqId() returns the request ID associated with the GIOP marshalled
 * message buffer specified by bv and nbv.
 * yobrPutReqId() sets the request ID in the GIOP marshalled message buffer
 * specified by bv and nbv.
 *
 */
ub4  yobrGetReqId(ysbv *bv, sword nbv);
void yobrPutReqId(ysbv *bv, sword nbv, ub4 reqid);

#endif
