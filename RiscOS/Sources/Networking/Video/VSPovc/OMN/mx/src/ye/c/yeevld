/* copyright (c) Oracle Corporation 1995.  All Rights Reserved. */

/*
  NAME
    yeevld.c
  DESCRIPTION

    yeevld event logging daemon.  Implements log event objects
    that can log incoming events or forward them to other consumers.

    This version is missing some features:

	- log destruction doesn't work.
	- delete record doesn't work.
	- sysbin file type support.

  PUBLIC FUNCTIONS
    <x>
  PRIVATE FUNCTIONS
    <x>
  NOTES
    <x>
  MODIFIED   (MM/DD/YY)
    dbrower   10/30/95 -  created.
    dbrower   01/19/96 -  prepared for 3.1 initial checkin.
    dbrower   03/ 1/96 -  olint
    dbrower   03/ 5/96 -  yslog revisions.
    dbrower   03/ 6/96 -  startup message improvements. 
    dbrower   03/28/96 -  add prog everywhere.  Flush log when nothing
			    pending.  Show times.
    dbrower   04/ 2/96 -  lied about necessary buffer length in textlog.
    dbrower   04/16/96 -  Fix "pawson" bug which showed file leak caused
			  by bogus fp in the iterator; just use the single
			  open file in the log.  Also, when log is
			  destroyed, clean up the file resources properly.
			  Improve error reporting in a number of cases.
			  All this removes lines of redundant, broken code.
    dbrower   04/18/96 -  do destruction properly; had left ref to freed lg.
    dbrower   05/ 1/96 -  olint/warnings.  Don't used exceptions for type
			  lookup failures.
    dbrower   06/12/96 -  split out log object into yeevlg to share
			  with the log reader.
    dbrower   10/10/96 -  work on interrupt handling, bug 411328.
*/

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef SYSB8_ORACLE
#include <sysb8.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
#ifndef YSR_ORACLE
#include <ysr.h>
#endif
#ifndef YSL_ORACLE
#include <ysl.h>
#endif
#ifndef YSV_ORACLE
#include <ysv.h>
#endif
#ifndef YSSP_ORACLE
#include <yssp.h>
#endif
#ifndef YT_ORACLE
#include <yt.h>
#endif
#ifndef YOIDL_ORACLE
#include <yoidl.h>
#endif
#ifndef YDIDL_ORACLE
#include <ydidl.h>
#endif
#ifndef YEEVENT_ORACLE
#include <yeevent.h>
#endif
#ifndef YEEV_ORACLE
#include <yeev.h>
#endif
#ifndef YEU_ORACLE
#include <yeu.h>
#endif
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
#ifndef YEEVLOGI_H
#include <yeevlogI.h>
#endif
#ifndef YEEVENTI_ORACLE
#include <yeeventI.h>
#endif
#ifndef YEEVLOG_ORACLE
#include <yeevlog.h>
#endif
#ifndef YEMSG_ORACLE
#include <yemsg.h>
#endif
#ifndef YEEVF_ORACLE
#include <yeevf.h>
#endif
#ifndef YEEVLG_ORACLE
#include <yeevlg.h>
#endif
#ifndef YOYD_ORACLE
#include <yoyd.h>
#endif

#define ENTRY_POINT yeevldMain
#include <s0ysmain.c>

/* PRIVATE TYPES AND CONSTANTS */

#define YEEVLD_FAC "YEEVLD"

#define YEEVLD_DEF_DEST_TYPE	yeevl_tty_logType

#define YEEVLD_DEF_FILE_NAME	"mnlogsrv.log"

/* no limit */
#define YEEVLD_DEF_MAX_SIZE    ((ub4)0)

/* no alarm */
#define YEEVLD_DEF_ALARM_SIZE	((ub4)0)

/* keep one old file */
#define YEEVLD_DEF_KEEP_COUNT	((ub4)1)

/* rollover and keep */
#define YEEVLD_DEF_FULL_ACTION	yeevl_rollover_fullType

/*
 * Command-line Arguments -- none for now!
 */
static struct ysargmap yeevldmap[] =
{
    { 'a', "mnlogsrv.log-file-alarm-size-kb", 1},
    { 'b', "mnlogsrv.log-file-limit-behaviour", 1},
    { 'c', "mnlogsrv.connect-to-producer", 1},
    { 'f', "yeevlg.default-filter-spec", 1},
    { 'k', "mnlogsrv.log-file-keep-count", 1},
    { 'm', "ys.log.msg-path", YSARG_MANY},
    { 'N', "yeev.log-impl", 1 },
    { 'n', "yeevlg.implementation-name", YSARG_MANY },
    { 'o', "mnlogsrv.log-file-name", 1},
    { 'p', "mnlogsrv.log-file-max-size-kb", 1},
    { 'r', "mnlogsrv.log-file-readonly=true", 0 },
    { 't', "mnlogsrv.log-type", 1},

    { 0, (char *) 0, 0 }
};

typedef struct yeevldcx yeevldcx;

/* our main context */
struct yeevldcx
{
  ysque		*q_yeevldcx;	/* the q to service */
  yeev		ev_yeevldcx;	/* event system */
  yeevlgcx	*lg_yeevldcx;	/* the log objects context */
  yeevReceiver	rcv_yeevldcx;	/* attached proc receiver */
  ysevt	    	*devt_yeevldcx;	/* attached death event */
  yoenv		env_yeevldcx;
  boolean	panic_yeevldcx;
};

/* local exceptions */
externdef ysidDecl( YEEVLD_EX_NO_YEEV ) = "::yeevld::noyeev";
externdef ysidDecl( YEEVLD_EX_STARTUP ) = "::yeevld::startup";

STATICF void yeevldServer( yeevldcx *cx );
STATICF void yeevldPanicHdlr(CONST ysid *exid, dvoid *ptr);
STATICF void yeevldAttach( yeevldcx *cx, char *attach_to );
STATICF void yeevldAttachHandler( yeevr *rec, dvoid *usrp );
STATICF void yeevldAttachDeath( dvoid *usrp, CONST ysid *exid, dvoid *arg,
			       size_t argsz );

/* set up the default initial log */
STATICF void yeevldStartLog( yeevldcx *cx );

/* PUBLIC FUNCTIONS */

/* ---------------------------- yeevldMain ---------------------------- */
/*
  NAME
    yeevldMain
  DESCRIPTION
    Main function for the ORB event channel daemon.
  PARAMETERS
    osdp    -- osd pointer
    nm	    -- program name string
    argc    -- arg count
    argv    -- argument vector.
  RETURNS
    TRUE on success, FALSE on error exit.
*/

boolean yeevldMain(dvoid *osdp, char *nm, sword argc, char **argv)
{
  boolean   ok;
  noreg boolean rv;
  char      vbuf[80];
  char	    *attach_to;
  sb4	    sts;
  yeevldcx  cx;
  
  NOREG(rv);

  /* initialization */
  CLRSTRUCT(cx);
  ysInit(osdp, nm);
  sts = ysArgParse(argc, argv, yeevldmap);
  if (sts == YSARG_VERSION)
    {
      yslError("Oracle Media Exchange ORB Event Processor ");
      vbuf[0] = 0;
      yslError(ysVersion(vbuf, sizeof(vbuf)));
    }
  ok = (sts == YSARG_NORMAL);

  DISCARD yseSetPanic(yeevldPanicHdlr, (dvoid*)&cx);
  
  if (!ok)
    return(FALSE);
  
  yseTry
  {
    ytInit();
    yoInit();
    
    attach_to = ysResGetLast("mnlogsrv.connect-to-producer");
    
    cx.panic_yeevldcx = FALSE;
    yoEnvInit( &cx.env_yeevldcx );
    
    /* set up logging */
    cx.q_yeevldcx = (ysque*)yoQueCreate("yeevld queue");
    cx.rcv_yeevldcx = (yeevReceiver)0;
    cx.devt_yeevldcx = (ysevt*)0;
    
    /* set up events */
    cx.ev_yeevldcx = yeevInit( cx.q_yeevldcx );
    
    /* make logging objects */
    cx.lg_yeevldcx = yeevlgInit( cx.q_yeevldcx, cx.ev_yeevldcx,
				attach_to ? FALSE : TRUE );
    
    /* attach ysRecord to the activated log impl */
    yeevSinkAttach( cx.ev_yeevldcx, YSLSEV_INFO );
    
    rv = TRUE;
    if( attach_to )
      yeevldAttach( &cx, attach_to );
    yeevldServer( &cx );
  }
  yseCatch( YEEVLD_EX_STARTUP )
  {
    yslError("yeevldMain: startup error, exiting\n");
    rv = FALSE;
  }
  yseCatch( YS_EX_INTERRUPT )
  {
    yslError("%s caught %s, exiting\n", ysProgName(), yseExid);
    rv = FALSE;
  }
  yseCatchAll
  {
    yslError("yeevldMain: %s caught unexpected exception %s, exiting\n",
	     ysProgName(), ysidToStr(yseExid));
    rv = FALSE;
  }
  yseEnd;
    
  /* normal shutdown, or after interrupt  */

  yseTry
  {
    if( cx.devt_yeevldcx )
      ysEvtDestroy( cx.devt_yeevldcx );
    
    cx.panic_yeevldcx = TRUE;

    yeevlgTerm( cx.lg_yeevldcx );
    yeevSinkDetach( cx.ev_yeevldcx );
    
    /* ---------------------------------------------------------------- */
    /* No more Records after this point! */
    /* ---------------------------------------------------------------- */
    
    yeevTerm( cx.ev_yeevldcx );
    
    yoQueDestroy( cx.q_yeevldcx );
    yoEnvFree( &cx.env_yeevldcx );
  }
  yseCatchAll
  {
    yslError("%s caught unexpected exception %s while exiting\n",
	     ysProgName(), ysidToStr(yseExid));
    rv = FALSE;
  }
  yseEnd;

  yseTry
  {
    yoTerm();
    ytTerm();
  }
  yseCatchAll
    yslError("%s caught exception %s while exiting\n",
	     ysProgName(), ysidToStr(yseExid));
  yseEnd;
  ysTerm(osdp);
  return rv;
}

/* ---------------------------------------------------------------- */
/* PRIVATE FUNCTIONS */
/* ---------------------------------------------------------------- */

STATICF void yeevldPanicHdlr(CONST ysid *exid, dvoid *ptr)
{
  yeevldcx *cx = (yeevldcx *)ptr;

  yslError("yeevldPanicHdlr: exception %s\n", ysidToStr(exid));
  if( cx && !cx->panic_yeevldcx )
  {
    cx->panic_yeevldcx = TRUE;
    yslError("yeevldPanicHdlr: attempting yeevlgTerm\n");
    yeevlgTerm( cx->lg_yeevldcx );
  }
}


/* ---------------------------- yeevldServer ---------------------------- */
/*
  NAME
    yeevldServer
  DESCRIPTION
    Become the yeevld log server.   Return when everything
    is shut down.

  PARAMETERS
    trace	-- trace level.
  RETURNS
    none
*/
STATICF void yeevldServer( yeevldcx *cx )
{
  /* now set up default initial log */
  yeevldStartLog( cx );

  /* ---------------------------------------------------------------- */
  /* At this point, ysRecords will be logged */
  /* ---------------------------------------------------------------- */

  /* 300, "yeevldServer: Becoming ORBD Event Log/Forward server" */
  ysRecord(YS_PRODUCT,YEEVLD_FAC, (ub4)300, YSLSEV_INFO, (char*)0, YSLNONE);

  yseTry
  {
    /* 304, "Logger startup" */
    ysRecord(YS_PRODUCT,YEEVLD_FAC,(ub4)304,YSLSEV_NOTICE, (char*)0, YSLNONE);

    /* 305, "yeevldServer: Entering service loop" */
    ysRecord(YS_PRODUCT,YEEVLD_FAC,(ub4)305,YSLSEV_DEBUG(8),(char*)0,YSLNONE);

    /* do service loop */
    yoService( cx->q_yeevldcx );

    /* 306, "yeevldServer: Exited service loop" */
    ysRecord(YS_PRODUCT,YEEVLD_FAC,(ub4)306,YSLSEV_DEBUG(8),(char*)0,YSLNONE);

    /* 307, "Logger Shutdown" */
    ysRecord(YS_PRODUCT,YEEVLD_FAC,(ub4)307,YSLSEV_NOTICE,(char*)0, YSLNONE);
  }
  yseFinally
  {
    /* 308, "yeevldServer: exiting" */
    ysRecord(YS_PRODUCT,YEEVLD_FAC,(ub4)308,YSLSEV_DEBUG(1),(char*)0,YSLNONE);
  }
  yseEnd;
}



/* set up the default initial log */
STATICF void yeevldStartLog( yeevldcx *cx )
{
  yeevl_log noreg lg = (yeevl_log)0;
  yeevl_yeevld fixed;
  yeevl_yeevla var;
  char *arg;
  yeevdSeq qlist;
  yeevDiscList dl;
  boolean ronly;
  yeevl_OperationFailed exv;
  ub4 i;
  
  NOREG(lg);
  CLRSTRUCT(exv);
  CLRSTRUCT(lg);

  if( !yeevlgLType(ysResGetLast("mnlogsrv.log-type"), &fixed.type_yeevld ) )
    fixed.type_yeevld = YEEVLD_DEF_DEST_TYPE;

  if( fixed.type_yeevld != yeevl_tty_logType )
     yslDetach();			/* this is a daemon */

  if( !(arg = ysResGetLast("mnlogsrv.log-file-name") ) )
     arg = (char*)YEEVLD_DEF_FILE_NAME;
  fixed.file_yeevld = arg;

  arg = ysResGetLast( "mnlogsrv.log-file-max-size-kb" );
  var.maxLogSizeKb_yeevla =
    arg ? (ub4)atol(arg) : YEEVLD_DEF_MAX_SIZE;

  arg = ysResGetLast( "mnlogsrv.log-file-alarm-size-kb" );
  var.capAlarmThresholdKb_yeevla =
    arg ? (ub4)atol(arg) : YEEVLD_DEF_ALARM_SIZE;

  arg = ysResGetLast( "mnlogsrv.log-file-keep-count" );
  var.keepCount_yeevla = (ub4)arg ? atol(arg) : YEEVLD_DEF_KEEP_COUNT;

  if( !yeevlgFType(ysResGetLast( "mnlogsrv.log-file-limit-behaviour" ),
		   &var.fullAction_yeevla))
    var.fullAction_yeevla = YEEVLD_DEF_FULL_ACTION;

  ronly = ysResGetBool("mnlogsrv.log-file-readonly");
  var.admin_yeevla = ronly ?
    yeevl_locked_adminState : yeevl_unlocked_adminState;

  yseTry
  {
    if( !ronly )
      lg = yeevl_logProc_createLog( yeevlgLogProc(cx->lg_yeevldcx),
				   &cx->env_yeevldcx,
				   &fixed, &var );
    else
      lg = yeevl_logProc_openLog( yeevlgLogProc(cx->lg_yeevldcx),
				 &cx->env_yeevldcx,
				 &fixed, &var );
  }
  yseCatchObj( YEEVL_EX_OPERATIONFAILED, yeevl_OperationFailed, exv )
  {
    /* yslError because this happens at startup. */
    if( ronly )
      yslError( "yeevldStartLog: failed to open readonly %s: %s\n",
	       fixed.file_yeevld, exv.reason );
    else
      yslError( "yeevldStartLog: failed to create writable %s: %s\n",
	       fixed.file_yeevld, exv.reason );
    yoFree( (dvoid*)exv.reason );
    yseThrow( YEEVLD_EX_STARTUP );
  }
  yseEnd

  if( !ronly )
  {
    /* program events to this log receiver */

    /* get the filter list */
    dl = yeev__get_filters( cx->ev_yeevldcx, &cx->env_yeevldcx );

    /* get default values */
    qlist =
      yeevDiscList__get_dlist( yeevlgDefaultDiscList(cx->lg_yeevldcx),
			      &cx->env_yeevldcx );

    /* change the dest to be this log */
    for( i = 0; i < qlist._length; i++ )
    {
      yoRelease( (dvoid*)qlist._buffer[i].dest_yeevd );
      qlist._buffer[i].dest_yeevd = (yeevReceiver)yoDuplicate((dvoid*)lg);
    }

    /* 321, "yeevldStartLog: set dest to lg %s" */
    ysRecord(YS_PRODUCT,YEEVLD_FAC, (ub4)321, YSLSEV_DEBUG(8), (char*)0,
	     YSLPTR(lg), YSLEND);

    /* add that to master filter list */
    yeevDiscList_append_i( dl, &cx->env_yeevldcx, &qlist );

    /* clean up */
    yoRelease( (dvoid*)dl );
    yeevdSeq__free( &qlist, yoFree );
  }
}



/* ---------------------------- yeevldAttach ---------------------------- */
/*
  NAME
    yeevldAttach
  DESCRIPTION
    Tell the process identified by attach_to send events here, as
    specified by the default filters.
  PARAMETERS
    <x>
  RETURNS
    <x>
  NOTES
    <x>
  MODIFIED   (MM/DD/YY)
    dbrower   06/13/96 -  created.
*/

STATICF void yeevldAttach( yeevldcx *cx, char *attach_to )
{
  yort_proc yort;
  yeev pev;
  yeevDiscList dlobj;
  char *oname, *host, *pid, *affinity;
  yeevDiscList ddl;
  yeevdSeq dlist;
  ub4 i;
  ydim_imr imr;

  /* lookup proc to get yort */

  oname = attach_to;

/*
  if( !(yort = (yort_proc)yoRefToStr( attach_to ) ) )
*/
  {
    /* parse attach_to */
    host = attach_to;
    while( *attach_to && *attach_to != ':' )
      attach_to++;
    if( *attach_to )
      *attach_to++ = 0;
    pid = attach_to;
    while( *attach_to && *attach_to != ':' )
      attach_to++;
    if( *attach_to )
      *attach_to++ = 0;
    affinity = attach_to;
    if( !*affinity )
      affinity = (char*)0;

    /* print message... */

    yslError("Attaching to host %s, pid %s, affinity %s\n",
	     yeuStr(host), yeuStr(pid), yeuStr(affinity) );

    imr = (ydim_imr)yoBind(ydim_imr__id, (char*)0,
			   (yoRefData*)0, (char*)0 );
    yort = ydim_imr_yortOfProc( imr, &cx->env_yeevldcx,
			       host, pid, affinity);
    yoRelease( (dvoid*)imr );
  }

  if( !yort )
  {
    yslError("Can't locate %s for attach\n", oname );
    yseThrow( YEEVLD_EX_STARTUP );
  }

  /* synthesize yeev in proc */
  
  pev = (yeev)yoYortBind( yeev__id, (char*)0, yort );
  yoRelease( yort );

  /* program him to send stuff here */

  dlobj = yeev__get_filters( pev, &cx->env_yeevldcx );
  yoRelease( (dvoid*)pev );

  /* get default quals... */
  ddl = yeevlgDefaultDiscList( cx->lg_yeevldcx );
  dlist = yeevDiscList__get_dlist( ddl, &cx->env_yeevldcx );

  cx->rcv_yeevldcx =
    yeevl_logProc_createReceiver( yeevlgLogProc(cx->lg_yeevldcx),
				 &cx->env_yeevldcx, oname );
  yeevReceiverSetHandler( cx->rcv_yeevldcx, yeevldAttachHandler, (dvoid*)cx );

  
  cx->devt_yeevldcx =
    ysEvtCreate( yeevldAttachDeath, (dvoid*)cx, cx->q_yeevldcx, TRUE );
  yoWatchOwner( (dvoid*)dlobj, cx->devt_yeevldcx ); 

  /* set dest to our new attached receiver */
  for( i = 0; i < dlist._length ; i++ )
  {
    yoRelease( (dvoid*)dlist._buffer[i].dest_yeevd );
    dlist._buffer[i].dest_yeevd =
      (yeevReceiver)yoDuplicate((dvoid*)cx->rcv_yeevldcx);
  }

  yeevDiscList_replaceDest( dlobj, &cx->env_yeevldcx, &dlist );
  yoRelease( (dvoid*)dlobj );
  yeevdSeq__free( &dlist, yoFree );
}

/* ------------------------- yeevldAttachHandler -------------------------- */
/*
  NAME
    yeevldAttachHandler
  DESCRIPTION
    Function called when a record is delivered from an attached process.
    Just forward it to the filters, where it will go to the designated
    logs.
  PARAMETERS
    rec	    -- the record.
    usrp    -- the context, as a dvoid *.
  RETURNS
    none.
*/

STATICF void yeevldAttachHandler( yeevr *rec, dvoid *usrp )
{
  yeevldcx *cx = (yeevldcx *)usrp;

  yeevl_logProc_forward( yeevlgLogProc(cx->lg_yeevldcx),
			&cx->env_yeevldcx, rec);
}

/* ------------------------- yeevldAttachDeath --------------------------- */
/*
  NAME
    yeevldAttachDeath
  DESCRIPTION
    Called when the program we are attached to dies.  Terminate the
    server loop so we exit cleanly.
  PARAMETERS
    usrp    -- the context, as dvoid *.
    exid    -- ignored
    arg	    -- ignored
    argsz   -- ignored
  RETURNS
    none.
*/

/* ARGSUSED */
STATICF void yeevldAttachDeath( dvoid *usrp, CONST ysid *exid, dvoid *arg,
			       size_t argsz )
{
  yeevldcx *cx = (yeevldcx*)usrp; 

  yslError("Attached program died, exiting\n");

  yoShutdown( cx->q_yeevldcx );
}


