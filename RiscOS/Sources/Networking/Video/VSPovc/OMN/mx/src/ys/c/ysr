/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ysr.c - Oracle MOOSE Resource Manager
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSI_ORACLE
#include <ysi.h>
#endif

/*
 * Types & Constants
 */
typedef struct ysrent ysrent;

/* DISABLE check_naming */
struct ysrent
{
  char  *resnm;                                             /* resource name */
  yslst *vals;                                             /* list of values */
};
/* ENABLE check_naming */

STATICF boolean ysResMatch(CONST char *resnm, CONST char *match);

#define ysIsBinding(c)  ((c) == '.' || (c) == '*')

/*
 * ysResGet - get a resource
 */
yslst *ysResGet(CONST char *name)
{
  ysctx  *ctx;
  ysle   *le;
  ysrent *entry;

  /* scan the resource database */
  ctx = (ysctx *) yscGet(YSC_YSCTX);
  for (le = ysLstHead(ctx->rdb); le; le = ysLstNext(le))
    {
      entry = (ysrent *) ysLstVal(le);
      if (ysResMatch(entry->resnm, name))
	break;
    }

  return (le ? entry->vals : (yslst *) 0);
}

/*
 * ysResGetLast - get a resource
 */
char *ysResGetLast(CONST char *name)
{
  yslst *lst;

  lst = ysResGet(name);
  return (lst ? (char *) ysLstVal(ysLstTail(lst)) : (char *) 0);
}

/*
 * ysResGetBool - get a resource boolean value
 */
boolean ysResGetBool(CONST char *name)
{
  yslst *lst;
  char  *val;

  lst = ysResGet(name);
  if (lst)
    {
      val = (char *) ysLstVal(ysLstTail(lst));
      return (ysStrCaseCmp(val, "false") != 0);
    }
  else
    return FALSE;
}

/*
 * ysResSet - set a resource descriptor
 */
void ysResSet(CONST char *name, CONST char *val)
{
  ysctx  *ctx;
  char   *copy, *sca, *scc;
  CONST char *scb;
  yslst  *rdb;
  ysle   *prv, *le;
  ysrent *noreg entry;
  sword   cmp;

  NOREG(entry);

  /* make a copy and strip surrounding whitespace */
  while (isspace(*val)) val++;
  if (*val == '\0')
    return;

  copy = ysStrDup(val);
  scc = copy + strlen(copy) - 1;
  while (scc > copy && isspace(*scc)) scc--;
  scc[1] = '\0';

  /* scan the resource database, looking for where to insert the resource */
  ctx = (ysctx *) yscGet(YSC_YSCTX);
  rdb = ctx->rdb;
  for (prv = (ysle *) 0, le = ysLstHead(rdb); le; prv = le, le = ysLstNext(le))
    {
      entry = (ysrent *) ysLstVal(le);

      /* compare the entry with the given name */
      for (sca = entry->resnm, scb = name;
	   *sca && *scb && *sca == tolower(*scb);
	   sca++, scb++) ;

      /* determine order of the entry and the name */
      if (*sca && *scb && (ysIsBinding(*sca) || ysIsBinding(*scb)))
	{
	  if (ysIsBinding(*sca) && !ysIsBinding(*scb))
	    cmp = (scb == name ? 1 : -1);
	  else if (!ysIsBinding(*sca) && ysIsBinding(*scb))
	    cmp = (scb == name ? -1 : 1);
	  else
	    cmp = (*sca == '*' ? 1 : -1);
	}
      else
	cmp = *sca - tolower(*scb);

      if (cmp > 0)
	break;
      else if (!cmp)
	{
	  /* if they are equal, append the value */
	  yseTry
	    DISCARD ysLstEnq(entry->vals, (dvoid *) copy);
	  yseCatch(YS_EX_OUTMEM)
	    ysmGlbFree((dvoid *) copy);
	    yseRethrow;
	  yseEnd

	  return;
	}
    }

  entry = (ysrent *) 0;
  yseTry
    {
      entry = (ysrent *) ysmGlbAlloc(sizeof(ysrent), "resource entry");
      DISCARD memset((dvoid *) entry, 0, sizeof(ysrent));

      entry->resnm = (char *) ysmGlbAlloc(strlen(name) + 1, "resource name");
      for (sca = entry->resnm, scb = name; *scb; scb++)
	*sca++ = tolower(*scb);
      *sca = '\0';

      entry->vals = ysLstCreate();
      DISCARD ysLstEnq(entry->vals, (dvoid *) copy);
      DISCARD ysLstIns(rdb, prv, (dvoid *) entry);
    }
  yseCatch(YS_EX_OUTMEM)
    {
      ysmGlbFree((dvoid *) copy);
      if (entry)
	{
	  if (entry->resnm)
	    ysmGlbFree((dvoid *) entry->resnm);
	  if (entry->vals)
	    ysLstDestroy(entry->vals, ysmFGlbFree);
	  ysmGlbFree((dvoid *) entry);
	}
      yseRethrow;
    }
  yseEnd
}

/*
 * ysResFree - free a database entry
 */
void ysResFree(dvoid *ptr)
{
  ysrent *entry;

  entry = (ysrent *) ptr;
  ysmGlbFree((dvoid *) entry->resnm);
  ysLstDestroy(entry->vals, ysmFGlbFree);
  ysmGlbFree((dvoid *) entry);
}

/*
 * ysResWalk - walk the resource database
 */
void ysResWalk(ysreswcb walkcb, dvoid *usrp)
{
  ysctx  *ctx;
  ysle   *le;
  ysrent *entry;
  boolean ok;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  ok = TRUE;
  for (le = ysLstHead(ctx->rdb); ok && le; le = ysLstNext(le))
    {
      entry = (ysrent *) ysLstVal(le);
      ok = (*walkcb)(usrp, entry->resnm, entry->vals);
    }
}

/*
 * ysResMatch - match a resource string and a match string
 *   resnm is a resource string from the resource database, possibly
 *   containing tight and loose bindings.  match is a string containing
 *   only tight bindings (if any) that is to be tested to see if the
 *   name matches the resource.
 */
STATICF boolean ysResMatch(CONST char *resnm, CONST char *match)
{
  CONST char *scr, *scm, *str;
  boolean     tight;

  scr = resnm;
  scm = match;
  while (*scm && *scr)
    {
      /* observe the binding */
      tight = (*scr != '*');
      str = scr;

      /* skip over the binding */
      if (ysIsBinding(*scr))
	scr++;
      if (*scm == '.')
	scm++;

      /* match component name */
      while (*scm && *scr && tolower(*scm) == *scr && *scm != '.')
	scr++, scm++;

      /* if we still have either match string or resource string left, and
       * we stopped the comparison at someplace other than a binding in
       * either string, then this component name did not match.  If the
       * binding was tight, then the match fails.  If the binding was loose,
       * then the component is skipped in the match string and we start
       * over with the same component in the resource string.
       */
      if ((*scm || *scr) && ((*scr != '*' && *scr != '.') || (*scm != '.')))
      if ((*scm || *scr) && (!ysIsBinding(*scr) || (*scm != '.')))
	{
	  if (tight)
	    return FALSE;
	  else
	    {
	      scr = str;
	      while (*scm && *scm != '.')
		scm++;
	    }
	}
    }

  return (*scm == *scr);
}
