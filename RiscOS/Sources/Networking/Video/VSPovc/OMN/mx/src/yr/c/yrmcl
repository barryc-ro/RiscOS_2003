/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 *   yrmgcl.c - Driver for Runtime Interface Repository Manager
 *
 * NOTES
 * This is just a simple client program for yr::mgr. It enables the
 * management requests to load files into a repository, get back a
 * load list, and shutdown the repository. See yrsrv.c for more
 * information on the IFR runtime model.
 *
 * HISTORY
 * 04/10/96 kcoleman	Switch over to ysRecord for error reporting.
 * 01/26/96 kcoleman	Add interrupt handler.
 * 01/24/96 kcoleman	Fix bug 336634: Change default tag not to use "OMX"
 * 01/17/96 kcoleman	Fix bug 335308: Init MN & YO after parse cmd line
 * 12/12/95 kcoleman	Fix version reporting, change binary name to mnirctl
 * 12/04/95 kcoleman	Improve error reporting.
 * 11/17/95 kcoleman    Creation
 */
 
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

#ifndef YS_ORACLE
#include <ys.h>
#endif

#ifndef YO_ORACLE
#include <yo.h>
#endif
 
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
 
#ifndef YR_ORACLE
#include <yr.h>
#endif
 
#ifndef YR0_ORACLE
#include <yr0.h>
#endif
 
#ifndef YRMGIDL_IDL
#include <yrmgidl.h>
#endif

#ifndef YRTYPIDL_IDL
#include <yrtypidl.h>
#endif
 
#ifndef SMNI_ORACLE
#include <smni.h>
#endif

#ifndef YOORB_ORACLE
#include <yoorb.h>
#endif

#ifndef YRMVERS
#define YRMVERS "3.2.0.0.0"
#endif
#ifndef YRMNAME
#define YRMNAME "Oracle Media Net Interface Repository Controller"
#endif
#ifndef YRMSTS
#define YRMSTS YSLVL_DEVEL
#endif
 
static struct ysargmap yrmclargmap[] =
{
  { 'l', "mnirctl.list-loads=true",0},          /* display load list */
  { 'q', "mnirctl.shutdown=true", 0},
  { 'f', "mnirctl.ifr-data-path", YSARG_MANY},  /* files/dirs to load */
  { YSARG_OPTPARAM, "mnirctl.ifr-name", 1},     /* IFR name */
  { 0, (char*)0, 0}                         /* array terminator */
};
 
/*
 * YRM_COMP - executable component tag prepended to all error messages
 *            and supplied to ysInit.
 */
#ifndef YRM_COMP
#define YRM_COMP "mnirctl"
#endif

  /* shut up the compiler whining about no prototype */
boolean yrmMain( dvoid* osdp, char* name, sword argc, char** argv);
STATICF void yrmReportLoadConflict( yr_mgr_LoadConflict* ex);
STATICF void yrmIntrHandler( dvoid* usrp, sb4 err);

boolean yrmMain( dvoid* osdp, char* name, sword argc, char** argv)
{
  sword status;
  noreg boolean ok;
  boolean verbose;
  yslst* loads;
 
  ysInit( osdp, YRM_COMP);
 
  NOREG(ok);
  ok = TRUE;
  status = ysArgParse( argc, argv, yrmclargmap);

  if ( status == YSARG_NORMAL )
  {
    CONST char* noreg tag;
    yr_mgr mgr;
    yoenv env;

    NOREG(tag);
    smniInit( osdp, (mnLogger) yslError);
    yoInit();
    mnSetIntrHandler( yrmIntrHandler, (dvoid*)0);

    mgr = CORBA_OBJECT_NIL;
    verbose = ysResGetBool( "mnirctl.verbose");
    tag = ysResGetLast( "mnirctl.ifr-name");
    if ( !tag )
      tag = YRSRV_DEFAULT_TAG;
 
      /***** Grab an IFR server matching <tag> *****/
    yseTry
    {
      mgr = yoBind( yr_mgr__id, (char*) tag, (yoRefData*)0, (dvoid*)0);
      yoEnvInit( &env);
    }
    yseCatchAll
    {
      ysRecord( YR_MSG(1, YRMCL_FAC), YSLSEV_ERR, (char*)0, 
                YSLSTR(tag), YSLEND);
      ok = FALSE;
    }
    yseEnd

      /***** Handle load requests (-f) *****/
    loads = ysResGet( "mnirctl.ifr-data-path");
    if ( ok && loads )
    {
      ysle* le;
      char* noreg path;
      char cwd[SYSFP_MAX_PATHLEN + 1];    /* current working directory */
      char fullpath[SYSFP_MAX_PATHLEN + 1];
      CONST char* errmsg;

      NOREG(path);
      errmsg = sysfpGetCwd( cwd);
      if ( errmsg )
      {
        ysRecord( YR_MSG(2, YRMCL_FAC), YSLSEV_ERR, (char*)0, 
                  YSLSTR(errmsg), YSLEND);
        ok = FALSE;
      }

      for ( le = ysLstHead(loads); ok && le; le = ysLstNext(le))
      {
        path = (char*) ysLstVal(le);
        if ( verbose )
          ysRecord( YR_MSG(300, YRMCL_FAC), YSLSEV_INFO, (char*)0, 
                  YSLSTR((char*)path), YSLSTR((char*)tag), YSLEND);
        yseTry
        {
          sysfpForm( fullpath, cwd, path, SYSFPKIND_NONE);
          yr_mgr_load( mgr, &env, (yr_path) fullpath);
        }
        yseCatchObj( YR_MGR_EX_LOADCONFLICT, yr_mgr_LoadConflict, ex)
        {
          yrmReportLoadConflict( &ex);
          yr_mgr_LoadConflict__free( &ex, yoFree);
          ok = FALSE;
        }
        yseCatchObj( YR_MGR_EX_FILENOTFOUND, yr_mgr_fileNotFound, ex)
        {
          ysRecord( YR_MSG(3, YRMCL_FAC), YSLSEV_ERR, (char*)0, 
                    YSLSTR(ex.path), YSLEND);
          yr_mgr_fileNotFound__free( &ex, yoFree);
          ok = FALSE;
        }
        yseCatchObj( YR_MGR_EX_FILECORRUPTED, yr_mgr_fileCorrupted, ex)
        {
          ysRecord( YR_MSG(4, YRMCL_FAC), YSLSEV_ERR, (char*)0, 
                    YSLSTR(ex.path), YSLEND);
          yr_mgr_fileCorrupted__free( &ex, yoFree);
          ok = FALSE;
        }
        yseCatch( YO_EX_BADOBJ )
        {
          ysRecord( YR_MSG(1, YRMCL_FAC), YSLSEV_ERR, (char*)0, 
                    YSLSTR(tag), YSLEND);
          ok = FALSE;
        }
        yseCatchAll
        {
          ok = FALSE;
          ysRecord( YR_MSG(5, YRMCL_FAC), YSLSEV_ERR, (char*)0, 
                    YSLSTR((char*)path), YSLSTR(ysidToStr( yseExid)), YSLEND);
        }
        yseEnd

        if ( verbose )
        {
          if ( ok )
            ysRecord( YR_MSG( 301, YRMCL_FAC), YSLSEV_INFO, (char*)0, YSLEND);
          else
            ysRecord( YR_MSG( 302, YRMCL_FAC), YSLSEV_INFO, (char*)0, YSLEND);
        }
      }
    }

      /***** Print load list (-l) *****/
    if ( ok && ysResGetBool( "mnirctl.list-loads") )
    {
      yr_pathSeq list = {0, 0, 0};

      if ( verbose )
        ysRecord( YR_MSG( 304, YRMCL_FAC), YSLSEV_INFO, (char*)0, 
                  YSLSTR((char*)tag), YSLEND);
      yseTry
      {
        list = yr_mgr__get_loadlist( mgr, &env);
      }
      yseCatch( YO_EX_BADOBJ )
      {
        ysRecord( YR_MSG(1, YRMCL_FAC), YSLSEV_ERR, (char*)0, 
                  YSLSTR(tag), YSLEND);
        ok = FALSE;
      }
      yseCatchAll
      {
        ok = FALSE;
        ysRecord( YR_MSG(6, YRMCL_FAC), YSLSEV_ERR, (char*)0, 
                  YSLSTR(ysidToStr( yseExid)), YSLEND);
      }
      yseEnd

      if ( ok )
      {
        ub4 i;

        yslPrint("Files loaded into repository %s: %s\n", tag,
                 (list._length == 0) ? "<none>" : "");
        for ( i = 0; i < list._length; i++)
          yslPrint("    %s\n", list._buffer[i]);
        yr_pathSeq__free( &list, yoFree);
      }
    }

      /***** Handle shutdown request (-q) *****/
    if ( ok && ysResGetBool( "mnirctl.shutdown") )
    {
      if ( verbose )
        ysRecord( YR_MSG( 303, YRMCL_FAC), YSLSEV_INFO, (char*)0,
                  YSLSTR((char*)tag), YSLEND);
      yseTry
      {
        yr_mgr_shutdown( mgr, &env);
      }
      yseCatch( YO_EX_BADOBJ )
      {
        ysRecord( YR_MSG(1, YRMCL_FAC), YSLSEV_ERR, (char*)0, 
                  YSLSTR(tag), YSLEND);
        ok = FALSE;
      }
      yseCatchAll
      {
        ysRecord( YR_MSG(7, YRMCL_FAC), YSLSEV_ERR, (char*)0, 
                  YSLSTR(ysidToStr( yseExid)), YSLEND);
        ok = FALSE;
      }
      yseEnd
      if ( ok && verbose )
        ysRecord( YR_MSG( 301, YRMCL_FAC), YSLSEV_INFO, (char*)0, YSLEND);
    }

    yoEnvFree( &env);
    yoRelease( mgr);

    yoTerm();
    mnTerm();
  }

     /****** Command line parsing error occurred *****/
  else if ( status == YSARG_ERROR )
    ok = FALSE;
  
    /***** Print version banner *****/
  else if ( status == YSARG_VERSION )
  {
    char buf[1024];

    yslError( ysFmtVersion(buf, sizeof(buf), YRMNAME, YRMVERS, 
              YRMSTS, __DATE__));
    yslError( ysVersion(buf, sizeof(buf)));
    ok = TRUE;
  }

    /***** They just asked for help *****/
  else
    ok = TRUE;
 
  ysTerm(osdp);
  return ok;
}

STATICF void yrmReportLoadConflict( yr_mgr_LoadConflict* ex)
{
  ub4 i;

  ysRecord( YR_MSG(8, YRMCL_FAC), YSLSEV_ERR, (char*)0, 
            YSLSTR(ex->filename), YSLEND);
  for ( i = 0; i < ex->undefined._length; i++)
    ysRecord( YR_MSG(9, YRMCL_FAC), YSLSEV_ERR, (char*)0, 
              YSLSTR(ex->undefined._buffer[i]), YSLEND);
  for ( i = 0; i < ex->redefined._length; i++)
    ysRecord( YR_MSG(10, YRMCL_FAC), YSLSEV_ERR, (char*)0, 
              YSLSTR(ex->redefined._buffer[i]), YSLEND);
}


STATICF void yrmIntrHandler( dvoid* usrp, sb4 err)
{
  ysRecord( YR_MSG(305, YRMCL_FAC), YSLSEV_INFO, (char*)0, 
            YSLSB4(err), YSLEND);
  yoTerm();
  mnTerm();
  exit(1);
}
