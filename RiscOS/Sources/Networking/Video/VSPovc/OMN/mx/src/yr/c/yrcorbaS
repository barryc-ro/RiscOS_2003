/* GENERATED FILE
 * yrcorba - server stubs
 * from /home/alind/work/portkit/mn335/mx/pub/yrcorba.idl
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif

#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
#include <yrcorbaC.c>

EXTC_START

/* Server stubs for interface ::CORBA::IRObject */
STATICF void CORBA_IRObject__get_def_kind_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_IRObject__get_def_kind_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_IRObject__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_IRObject)or, ev);
}

yostub* CORBA_IRObject__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*1), 
    "yostubs");
  _result->widen = (yowiden)0;
  _result->bases = (const char**)0;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "_get_def_kind";
  _stubs[0].parms = CORBA_IRObject__get_def_kind_pars;
  _stubs[0].oper = CORBA_IRObject__get_def_kind_s;
  _stubs[1].opernm = (CONST char*)0;
  _stubs[1].parms = (yopar*)0;
  _stubs[1].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}

/* Server stubs for interface ::CORBA::Contained */
STATICF void CORBA_Contained_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_Contained_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained_Description*)args[0] = (*((struct 
    CORBA_Contained__tyimpl*)impldef)->describe)( (CORBA_Contained)or, ev);
}

STATICF void CORBA_Contained__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_Contained__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_RepositoryId*)args[0] = (*((struct CORBA_Contained__tyimpl*)
    impldef)->_get_id)( (CORBA_Contained)or, ev);
}

STATICF void CORBA_Contained__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_Contained__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Identifier*)args[0] = (*((struct CORBA_Contained__tyimpl*)impldef)
    ->_get_name)( (CORBA_Contained)or, ev);
}

STATICF void CORBA_Contained__get_version_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_Contained__get_version_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_VersionSpec*)args[0] = (*((struct CORBA_Contained__tyimpl*)
    impldef)->_get_version)( (CORBA_Contained)or, ev);
}

STATICF void CORBA_Contained__get_defined_in_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_Contained__get_defined_in_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_Container*)args[0] = (*((struct CORBA_Contained__tyimpl*)impldef)
    ->_get_defined_in)( (CORBA_Contained)or, ev);
}

STATICF void CORBA_Contained__get_absolute_name_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_Contained__get_absolute_name_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_ScopedName*)args[0] = (*((struct CORBA_Contained__tyimpl*)impldef)
    ->_get_absolute_name)( (CORBA_Contained)or, ev);
}

STATICF void CORBA_Contained__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args);

STATICF void CORBA_Contained__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args)
{
  *(CORBA_Repository*)args[0] = (*((struct CORBA_Contained__tyimpl*)impldef)
    ->_get_containing_repository)( (CORBA_Contained)or, ev);
}

STATICF void CORBA_Contained__get_def_kind_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args);

STATICF void CORBA_Contained__get_def_kind_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_Contained__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_Contained)or, ev);
}

STATICF yogfp CORBA_Contained__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id);

STATICF yogfp CORBA_Contained__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id)
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_Contained__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 7;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const CORBA_Contained__bases[] =
{
  "IDL:CORBA/IRObject:1.0",
  (char*)0
};

yostub* CORBA_Contained__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*8), 
    "yostubs");
  _result->widen = (yowiden)CORBA_Contained__widen;
  _result->bases = CORBA_Contained__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "describe";
  _stubs[0].parms = CORBA_Contained_describe_pars;
  _stubs[0].oper = CORBA_Contained_describe_s;
  _stubs[1].opernm = "_get_id";
  _stubs[1].parms = CORBA_Contained__get_id_pars;
  _stubs[1].oper = CORBA_Contained__get_id_s;
  _stubs[2].opernm = "_get_name";
  _stubs[2].parms = CORBA_Contained__get_name_pars;
  _stubs[2].oper = CORBA_Contained__get_name_s;
  _stubs[3].opernm = "_get_version";
  _stubs[3].parms = CORBA_Contained__get_version_pars;
  _stubs[3].oper = CORBA_Contained__get_version_s;
  _stubs[4].opernm = "_get_defined_in";
  _stubs[4].parms = CORBA_Contained__get_defined_in_pars;
  _stubs[4].oper = CORBA_Contained__get_defined_in_s;
  _stubs[5].opernm = "_get_absolute_name";
  _stubs[5].parms = CORBA_Contained__get_absolute_name_pars;
  _stubs[5].oper = CORBA_Contained__get_absolute_name_s;
  _stubs[6].opernm = "_get_containing_repository";
  _stubs[6].parms = CORBA_Contained__get_containing_repository_pars;
  _stubs[6].oper = CORBA_Contained__get_containing_repository_s;
  _stubs[7].opernm = "_get_def_kind";
  _stubs[7].parms = CORBA_Contained__get_def_kind_pars;
  _stubs[7].oper = CORBA_Contained__get_def_kind_s;
  _stubs[8].opernm = (CONST char*)0;
  _stubs[8].parms = (yopar*)0;
  _stubs[8].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}

/* Server stubs for interface ::CORBA::Container */
STATICF void CORBA_Container_lookup_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_Container_lookup_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained*)args[0] = (*((struct CORBA_Container__tyimpl*)impldef)
    ->lookup)( (CORBA_Container)or, ev,*(CORBA_ScopedName*)args[1]);
}

STATICF void CORBA_Container_contents_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_Container_contents_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_ContainedSeq*)args[0] = (*((struct CORBA_Container__tyimpl*)
    impldef)->contents)( (CORBA_Container)or, ev,*(CORBA_DefinitionKind*)
    args[1],*(boolean*)args[2]);
}

STATICF void CORBA_Container_lookup_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_Container_lookup_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_ContainedSeq*)args[0] = (*((struct CORBA_Container__tyimpl*)
    impldef)->lookup_name)( (CORBA_Container)or, ev,*(CORBA_Identifier*)
    args[1],*(sb4*)args[2],*(CORBA_DefinitionKind*)args[3],*(boolean*)
    args[4]);
}

STATICF void CORBA_Container_describe_contents_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_Container_describe_contents_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_Container_DescriptionSeq*)args[0] = (*((struct 
    CORBA_Container__tyimpl*)impldef)->describe_contents)( (CORBA_Container)
    or, ev,*(CORBA_DefinitionKind*)args[1],*(boolean*)args[2],*(sb4*)
    args[3]);
}

STATICF void CORBA_Container__get_def_kind_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args);

STATICF void CORBA_Container__get_def_kind_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_Container__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_Container)or, ev);
}

STATICF yogfp CORBA_Container__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id);

STATICF yogfp CORBA_Container__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id)
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_Container__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 4;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const CORBA_Container__bases[] =
{
  "IDL:CORBA/IRObject:1.0",
  (char*)0
};

yostub* CORBA_Container__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*5), 
    "yostubs");
  _result->widen = (yowiden)CORBA_Container__widen;
  _result->bases = CORBA_Container__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "lookup";
  _stubs[0].parms = CORBA_Container_lookup_pars;
  _stubs[0].oper = CORBA_Container_lookup_s;
  _stubs[1].opernm = "contents";
  _stubs[1].parms = CORBA_Container_contents_pars;
  _stubs[1].oper = CORBA_Container_contents_s;
  _stubs[2].opernm = "lookup_name";
  _stubs[2].parms = CORBA_Container_lookup_name_pars;
  _stubs[2].oper = CORBA_Container_lookup_name_s;
  _stubs[3].opernm = "describe_contents";
  _stubs[3].parms = CORBA_Container_describe_contents_pars;
  _stubs[3].oper = CORBA_Container_describe_contents_s;
  _stubs[4].opernm = "_get_def_kind";
  _stubs[4].parms = CORBA_Container__get_def_kind_pars;
  _stubs[4].oper = CORBA_Container__get_def_kind_s;
  _stubs[5].opernm = (CONST char*)0;
  _stubs[5].parms = (yopar*)0;
  _stubs[5].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}

/* Server stubs for interface ::CORBA::IDLType */
STATICF void CORBA_IDLType__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_IDLType__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(yotk**)args[0] = (*((struct CORBA_IDLType__tyimpl*)impldef)->_get_type)(
     (CORBA_IDLType)or, ev);
}

STATICF void CORBA_IDLType__get_def_kind_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_IDLType__get_def_kind_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_IDLType__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_IDLType)or, ev);
}

STATICF yogfp CORBA_IDLType__widen( ub4 _idx, dvoid *_data, CONST ysid* _id)
  ;

STATICF yogfp CORBA_IDLType__widen( ub4 _idx, dvoid *_data, CONST ysid* _id)
  
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_IDLType__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 1;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const CORBA_IDLType__bases[] =
{
  "IDL:CORBA/IRObject:1.0",
  (char*)0
};

yostub* CORBA_IDLType__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*2), 
    "yostubs");
  _result->widen = (yowiden)CORBA_IDLType__widen;
  _result->bases = CORBA_IDLType__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "_get_type";
  _stubs[0].parms = CORBA_IDLType__get_type_pars;
  _stubs[0].oper = CORBA_IDLType__get_type_s;
  _stubs[1].opernm = "_get_def_kind";
  _stubs[1].parms = CORBA_IDLType__get_def_kind_pars;
  _stubs[1].oper = CORBA_IDLType__get_def_kind_s;
  _stubs[2].opernm = (CONST char*)0;
  _stubs[2].parms = (yopar*)0;
  _stubs[2].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}

/* Server stubs for interface ::CORBA::PrimitiveDef */
STATICF void CORBA_PrimitiveDef__get_kind_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_PrimitiveDef__get_kind_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_PrimitiveKind*)args[0] = (*((struct CORBA_PrimitiveDef__tyimpl*)
    impldef)->_get_kind)( (CORBA_PrimitiveDef)or, ev);
}

STATICF void CORBA_PrimitiveDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_PrimitiveDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(yotk**)args[0] = (*((struct CORBA_PrimitiveDef__tyimpl*)impldef)
    ->_get_type)( (CORBA_PrimitiveDef)or, ev);
}

STATICF void CORBA_PrimitiveDef__get_def_kind_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_PrimitiveDef__get_def_kind_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_PrimitiveDef__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_PrimitiveDef)or, ev);
}

STATICF yogfp CORBA_PrimitiveDef__widen( ub4 _idx, dvoid *_data, CONST 
  ysid* _id);

STATICF yogfp CORBA_PrimitiveDef__widen( ub4 _idx, dvoid *_data, CONST 
  ysid* _id)
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_PrimitiveDef__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_IDLType__id, _id) )
    _fps += 1;
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 2;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const CORBA_PrimitiveDef__bases[] =
{
  "IDL:CORBA/IDLType:1.0",
  "IDL:CORBA/IRObject:1.0",
  (char*)0
};

yostub* CORBA_PrimitiveDef__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*3), 
    "yostubs");
  _result->widen = (yowiden)CORBA_PrimitiveDef__widen;
  _result->bases = CORBA_PrimitiveDef__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "_get_kind";
  _stubs[0].parms = CORBA_PrimitiveDef__get_kind_pars;
  _stubs[0].oper = CORBA_PrimitiveDef__get_kind_s;
  _stubs[1].opernm = "_get_type";
  _stubs[1].parms = CORBA_PrimitiveDef__get_type_pars;
  _stubs[1].oper = CORBA_PrimitiveDef__get_type_s;
  _stubs[2].opernm = "_get_def_kind";
  _stubs[2].parms = CORBA_PrimitiveDef__get_def_kind_pars;
  _stubs[2].oper = CORBA_PrimitiveDef__get_def_kind_s;
  _stubs[3].opernm = (CONST char*)0;
  _stubs[3].parms = (yopar*)0;
  _stubs[3].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}

/* Server stubs for interface ::CORBA::Repository */
STATICF void CORBA_Repository_lookup_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_Repository_lookup_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained*)args[0] = (*((struct CORBA_Repository__tyimpl*)impldef)
    ->lookup_id)( (CORBA_Repository)or, ev,*(CORBA_RepositoryId*)args[1]);
}

STATICF void CORBA_Repository_get_primitive_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args);

STATICF void CORBA_Repository_get_primitive_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args)
{
  *(CORBA_PrimitiveDef*)args[0] = (*((struct CORBA_Repository__tyimpl*)
    impldef)->get_primitive)( (CORBA_Repository)or, ev,*(
    CORBA_PrimitiveKind*)args[1]);
}

STATICF void CORBA_Repository_lookup_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_Repository_lookup_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained*)args[0] = (*((struct CORBA_Repository__tyimpl*)impldef)
    ->lookup)( (CORBA_Repository)or, ev,*(CORBA_ScopedName*)args[1]);
}

STATICF void CORBA_Repository_contents_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_Repository_contents_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_ContainedSeq*)args[0] = (*((struct CORBA_Repository__tyimpl*)
    impldef)->contents)( (CORBA_Repository)or, ev,*(CORBA_DefinitionKind*)
    args[1],*(boolean*)args[2]);
}

STATICF void CORBA_Repository_lookup_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_Repository_lookup_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_ContainedSeq*)args[0] = (*((struct CORBA_Repository__tyimpl*)
    impldef)->lookup_name)( (CORBA_Repository)or, ev,*(CORBA_Identifier*)
    args[1],*(sb4*)args[2],*(CORBA_DefinitionKind*)args[3],*(boolean*)
    args[4]);
}

STATICF void CORBA_Repository_describe_contents_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_Repository_describe_contents_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_Container_DescriptionSeq*)args[0] = (*((struct 
    CORBA_Repository__tyimpl*)impldef)->describe_contents)( (
    CORBA_Repository)or, ev,*(CORBA_DefinitionKind*)args[1],*(boolean*)
    args[2],*(sb4*)args[3]);
}

STATICF void CORBA_Repository__get_def_kind_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args);

STATICF void CORBA_Repository__get_def_kind_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_Repository__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_Repository)or, ev);
}

STATICF yogfp CORBA_Repository__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id);

STATICF yogfp CORBA_Repository__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id)
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_Repository__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_Container__id, _id) )
    _fps += 2;
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 6;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const CORBA_Repository__bases[] =
{
  "IDL:CORBA/Container:1.0",
  "IDL:CORBA/IRObject:1.0",
  (char*)0
};

yostub* CORBA_Repository__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*7), 
    "yostubs");
  _result->widen = (yowiden)CORBA_Repository__widen;
  _result->bases = CORBA_Repository__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "lookup_id";
  _stubs[0].parms = CORBA_Repository_lookup_id_pars;
  _stubs[0].oper = CORBA_Repository_lookup_id_s;
  _stubs[1].opernm = "get_primitive";
  _stubs[1].parms = CORBA_Repository_get_primitive_pars;
  _stubs[1].oper = CORBA_Repository_get_primitive_s;
  _stubs[2].opernm = "lookup";
  _stubs[2].parms = CORBA_Repository_lookup_pars;
  _stubs[2].oper = CORBA_Repository_lookup_s;
  _stubs[3].opernm = "contents";
  _stubs[3].parms = CORBA_Repository_contents_pars;
  _stubs[3].oper = CORBA_Repository_contents_s;
  _stubs[4].opernm = "lookup_name";
  _stubs[4].parms = CORBA_Repository_lookup_name_pars;
  _stubs[4].oper = CORBA_Repository_lookup_name_s;
  _stubs[5].opernm = "describe_contents";
  _stubs[5].parms = CORBA_Repository_describe_contents_pars;
  _stubs[5].oper = CORBA_Repository_describe_contents_s;
  _stubs[6].opernm = "_get_def_kind";
  _stubs[6].parms = CORBA_Repository__get_def_kind_pars;
  _stubs[6].oper = CORBA_Repository__get_def_kind_s;
  _stubs[7].opernm = (CONST char*)0;
  _stubs[7].parms = (yopar*)0;
  _stubs[7].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}

/* Server stubs for interface ::CORBA::ModuleDef */
STATICF void CORBA_ModuleDef_lookup_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ModuleDef_lookup_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained*)args[0] = (*((struct CORBA_ModuleDef__tyimpl*)impldef)
    ->lookup)( (CORBA_ModuleDef)or, ev,*(CORBA_ScopedName*)args[1]);
}

STATICF void CORBA_ModuleDef_contents_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ModuleDef_contents_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_ContainedSeq*)args[0] = (*((struct CORBA_ModuleDef__tyimpl*)
    impldef)->contents)( (CORBA_ModuleDef)or, ev,*(CORBA_DefinitionKind*)
    args[1],*(boolean*)args[2]);
}

STATICF void CORBA_ModuleDef_lookup_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ModuleDef_lookup_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_ContainedSeq*)args[0] = (*((struct CORBA_ModuleDef__tyimpl*)
    impldef)->lookup_name)( (CORBA_ModuleDef)or, ev,*(CORBA_Identifier*)
    args[1],*(sb4*)args[2],*(CORBA_DefinitionKind*)args[3],*(boolean*)
    args[4]);
}

STATICF void CORBA_ModuleDef_describe_contents_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_ModuleDef_describe_contents_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_Container_DescriptionSeq*)args[0] = (*((struct 
    CORBA_ModuleDef__tyimpl*)impldef)->describe_contents)( (CORBA_ModuleDef)
    or, ev,*(CORBA_DefinitionKind*)args[1],*(boolean*)args[2],*(sb4*)
    args[3]);
}

STATICF void CORBA_ModuleDef__get_def_kind_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args);

STATICF void CORBA_ModuleDef__get_def_kind_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_ModuleDef__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_ModuleDef)or, ev);
}

STATICF void CORBA_ModuleDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ModuleDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained_Description*)args[0] = (*((struct 
    CORBA_ModuleDef__tyimpl*)impldef)->describe)( (CORBA_ModuleDef)or, ev);
}

STATICF void CORBA_ModuleDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ModuleDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_RepositoryId*)args[0] = (*((struct CORBA_ModuleDef__tyimpl*)
    impldef)->_get_id)( (CORBA_ModuleDef)or, ev);
}

STATICF void CORBA_ModuleDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ModuleDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Identifier*)args[0] = (*((struct CORBA_ModuleDef__tyimpl*)impldef)
    ->_get_name)( (CORBA_ModuleDef)or, ev);
}

STATICF void CORBA_ModuleDef__get_version_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ModuleDef__get_version_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_VersionSpec*)args[0] = (*((struct CORBA_ModuleDef__tyimpl*)
    impldef)->_get_version)( (CORBA_ModuleDef)or, ev);
}

STATICF void CORBA_ModuleDef__get_defined_in_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_ModuleDef__get_defined_in_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_Container*)args[0] = (*((struct CORBA_ModuleDef__tyimpl*)impldef)
    ->_get_defined_in)( (CORBA_ModuleDef)or, ev);
}

STATICF void CORBA_ModuleDef__get_absolute_name_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_ModuleDef__get_absolute_name_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_ScopedName*)args[0] = (*((struct CORBA_ModuleDef__tyimpl*)impldef)
    ->_get_absolute_name)( (CORBA_ModuleDef)or, ev);
}

STATICF void CORBA_ModuleDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args);

STATICF void CORBA_ModuleDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args)
{
  *(CORBA_Repository*)args[0] = (*((struct CORBA_ModuleDef__tyimpl*)impldef)
    ->_get_containing_repository)( (CORBA_ModuleDef)or, ev);
}

STATICF yogfp CORBA_ModuleDef__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id);

STATICF yogfp CORBA_ModuleDef__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id)
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_Container__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 4;
  else if ( ysidEq( CORBA_Contained__id, _id) )
    _fps += 5;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const CORBA_ModuleDef__bases[] =
{
  "IDL:CORBA/Container:1.0",
  "IDL:CORBA/IRObject:1.0",
  "IDL:CORBA/Contained:1.0",
  (char*)0
};

yostub* CORBA_ModuleDef__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*12), 
    "yostubs");
  _result->widen = (yowiden)CORBA_ModuleDef__widen;
  _result->bases = CORBA_ModuleDef__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "lookup";
  _stubs[0].parms = CORBA_ModuleDef_lookup_pars;
  _stubs[0].oper = CORBA_ModuleDef_lookup_s;
  _stubs[1].opernm = "contents";
  _stubs[1].parms = CORBA_ModuleDef_contents_pars;
  _stubs[1].oper = CORBA_ModuleDef_contents_s;
  _stubs[2].opernm = "lookup_name";
  _stubs[2].parms = CORBA_ModuleDef_lookup_name_pars;
  _stubs[2].oper = CORBA_ModuleDef_lookup_name_s;
  _stubs[3].opernm = "describe_contents";
  _stubs[3].parms = CORBA_ModuleDef_describe_contents_pars;
  _stubs[3].oper = CORBA_ModuleDef_describe_contents_s;
  _stubs[4].opernm = "_get_def_kind";
  _stubs[4].parms = CORBA_ModuleDef__get_def_kind_pars;
  _stubs[4].oper = CORBA_ModuleDef__get_def_kind_s;
  _stubs[5].opernm = "describe";
  _stubs[5].parms = CORBA_ModuleDef_describe_pars;
  _stubs[5].oper = CORBA_ModuleDef_describe_s;
  _stubs[6].opernm = "_get_id";
  _stubs[6].parms = CORBA_ModuleDef__get_id_pars;
  _stubs[6].oper = CORBA_ModuleDef__get_id_s;
  _stubs[7].opernm = "_get_name";
  _stubs[7].parms = CORBA_ModuleDef__get_name_pars;
  _stubs[7].oper = CORBA_ModuleDef__get_name_s;
  _stubs[8].opernm = "_get_version";
  _stubs[8].parms = CORBA_ModuleDef__get_version_pars;
  _stubs[8].oper = CORBA_ModuleDef__get_version_s;
  _stubs[9].opernm = "_get_defined_in";
  _stubs[9].parms = CORBA_ModuleDef__get_defined_in_pars;
  _stubs[9].oper = CORBA_ModuleDef__get_defined_in_s;
  _stubs[10].opernm = "_get_absolute_name";
  _stubs[10].parms = CORBA_ModuleDef__get_absolute_name_pars;
  _stubs[10].oper = CORBA_ModuleDef__get_absolute_name_s;
  _stubs[11].opernm = "_get_containing_repository";
  _stubs[11].parms = CORBA_ModuleDef__get_containing_repository_pars;
  _stubs[11].oper = CORBA_ModuleDef__get_containing_repository_s;
  _stubs[12].opernm = (CONST char*)0;
  _stubs[12].parms = (yopar*)0;
  _stubs[12].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}

/* Server stubs for interface ::CORBA::ConstantDef */
STATICF void CORBA_ConstantDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ConstantDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(yotk**)args[0] = (*((struct CORBA_ConstantDef__tyimpl*)impldef)
    ->_get_type)( (CORBA_ConstantDef)or, ev);
}

STATICF void CORBA_ConstantDef__get_type_def_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_ConstantDef__get_type_def_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_IDLType*)args[0] = (*((struct CORBA_ConstantDef__tyimpl*)impldef)
    ->_get_type_def)( (CORBA_ConstantDef)or, ev);
}

STATICF void CORBA_ConstantDef__get_value_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ConstantDef__get_value_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(yoany*)args[0] = (*((struct CORBA_ConstantDef__tyimpl*)impldef)
    ->_get_value)( (CORBA_ConstantDef)or, ev);
}

STATICF void CORBA_ConstantDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ConstantDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained_Description*)args[0] = (*((struct 
    CORBA_ConstantDef__tyimpl*)impldef)->describe)( (CORBA_ConstantDef)or, 
    ev);
}

STATICF void CORBA_ConstantDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ConstantDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_RepositoryId*)args[0] = (*((struct CORBA_ConstantDef__tyimpl*)
    impldef)->_get_id)( (CORBA_ConstantDef)or, ev);
}

STATICF void CORBA_ConstantDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ConstantDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Identifier*)args[0] = (*((struct CORBA_ConstantDef__tyimpl*)
    impldef)->_get_name)( (CORBA_ConstantDef)or, ev);
}

STATICF void CORBA_ConstantDef__get_version_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args);

STATICF void CORBA_ConstantDef__get_version_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args)
{
  *(CORBA_VersionSpec*)args[0] = (*((struct CORBA_ConstantDef__tyimpl*)
    impldef)->_get_version)( (CORBA_ConstantDef)or, ev);
}

STATICF void CORBA_ConstantDef__get_defined_in_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_ConstantDef__get_defined_in_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_Container*)args[0] = (*((struct CORBA_ConstantDef__tyimpl*)
    impldef)->_get_defined_in)( (CORBA_ConstantDef)or, ev);
}

STATICF void CORBA_ConstantDef__get_absolute_name_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_ConstantDef__get_absolute_name_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_ScopedName*)args[0] = (*((struct CORBA_ConstantDef__tyimpl*)
    impldef)->_get_absolute_name)( (CORBA_ConstantDef)or, ev);
}

STATICF void CORBA_ConstantDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args);

STATICF void CORBA_ConstantDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args)
{
  *(CORBA_Repository*)args[0] = (*((struct CORBA_ConstantDef__tyimpl*)
    impldef)->_get_containing_repository)( (CORBA_ConstantDef)or, ev);
}

STATICF void CORBA_ConstantDef__get_def_kind_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_ConstantDef__get_def_kind_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_ConstantDef__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_ConstantDef)or, ev);
}

STATICF yogfp CORBA_ConstantDef__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id);

STATICF yogfp CORBA_ConstantDef__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id)
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_ConstantDef__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_Contained__id, _id) )
    _fps += 3;
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 10;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const CORBA_ConstantDef__bases[] =
{
  "IDL:CORBA/Contained:1.0",
  "IDL:CORBA/IRObject:1.0",
  (char*)0
};

yostub* CORBA_ConstantDef__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*11), 
    "yostubs");
  _result->widen = (yowiden)CORBA_ConstantDef__widen;
  _result->bases = CORBA_ConstantDef__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "_get_type";
  _stubs[0].parms = CORBA_ConstantDef__get_type_pars;
  _stubs[0].oper = CORBA_ConstantDef__get_type_s;
  _stubs[1].opernm = "_get_type_def";
  _stubs[1].parms = CORBA_ConstantDef__get_type_def_pars;
  _stubs[1].oper = CORBA_ConstantDef__get_type_def_s;
  _stubs[2].opernm = "_get_value";
  _stubs[2].parms = CORBA_ConstantDef__get_value_pars;
  _stubs[2].oper = CORBA_ConstantDef__get_value_s;
  _stubs[3].opernm = "describe";
  _stubs[3].parms = CORBA_ConstantDef_describe_pars;
  _stubs[3].oper = CORBA_ConstantDef_describe_s;
  _stubs[4].opernm = "_get_id";
  _stubs[4].parms = CORBA_ConstantDef__get_id_pars;
  _stubs[4].oper = CORBA_ConstantDef__get_id_s;
  _stubs[5].opernm = "_get_name";
  _stubs[5].parms = CORBA_ConstantDef__get_name_pars;
  _stubs[5].oper = CORBA_ConstantDef__get_name_s;
  _stubs[6].opernm = "_get_version";
  _stubs[6].parms = CORBA_ConstantDef__get_version_pars;
  _stubs[6].oper = CORBA_ConstantDef__get_version_s;
  _stubs[7].opernm = "_get_defined_in";
  _stubs[7].parms = CORBA_ConstantDef__get_defined_in_pars;
  _stubs[7].oper = CORBA_ConstantDef__get_defined_in_s;
  _stubs[8].opernm = "_get_absolute_name";
  _stubs[8].parms = CORBA_ConstantDef__get_absolute_name_pars;
  _stubs[8].oper = CORBA_ConstantDef__get_absolute_name_s;
  _stubs[9].opernm = "_get_containing_repository";
  _stubs[9].parms = CORBA_ConstantDef__get_containing_repository_pars;
  _stubs[9].oper = CORBA_ConstantDef__get_containing_repository_s;
  _stubs[10].opernm = "_get_def_kind";
  _stubs[10].parms = CORBA_ConstantDef__get_def_kind_pars;
  _stubs[10].oper = CORBA_ConstantDef__get_def_kind_s;
  _stubs[11].opernm = (CONST char*)0;
  _stubs[11].parms = (yopar*)0;
  _stubs[11].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}

/* Server stubs for interface ::CORBA::TypedefDef */
STATICF void CORBA_TypedefDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_TypedefDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained_Description*)args[0] = (*((struct 
    CORBA_TypedefDef__tyimpl*)impldef)->describe)( (CORBA_TypedefDef)or, ev)
    ;
}

STATICF void CORBA_TypedefDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_TypedefDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_RepositoryId*)args[0] = (*((struct CORBA_TypedefDef__tyimpl*)
    impldef)->_get_id)( (CORBA_TypedefDef)or, ev);
}

STATICF void CORBA_TypedefDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_TypedefDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Identifier*)args[0] = (*((struct CORBA_TypedefDef__tyimpl*)
    impldef)->_get_name)( (CORBA_TypedefDef)or, ev);
}

STATICF void CORBA_TypedefDef__get_version_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args);

STATICF void CORBA_TypedefDef__get_version_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args)
{
  *(CORBA_VersionSpec*)args[0] = (*((struct CORBA_TypedefDef__tyimpl*)
    impldef)->_get_version)( (CORBA_TypedefDef)or, ev);
}

STATICF void CORBA_TypedefDef__get_defined_in_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_TypedefDef__get_defined_in_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_Container*)args[0] = (*((struct CORBA_TypedefDef__tyimpl*)impldef)
    ->_get_defined_in)( (CORBA_TypedefDef)or, ev);
}

STATICF void CORBA_TypedefDef__get_absolute_name_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_TypedefDef__get_absolute_name_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_ScopedName*)args[0] = (*((struct CORBA_TypedefDef__tyimpl*)
    impldef)->_get_absolute_name)( (CORBA_TypedefDef)or, ev);
}

STATICF void CORBA_TypedefDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args);

STATICF void CORBA_TypedefDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args)
{
  *(CORBA_Repository*)args[0] = (*((struct CORBA_TypedefDef__tyimpl*)
    impldef)->_get_containing_repository)( (CORBA_TypedefDef)or, ev);
}

STATICF void CORBA_TypedefDef__get_def_kind_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args);

STATICF void CORBA_TypedefDef__get_def_kind_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_TypedefDef__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_TypedefDef)or, ev);
}

STATICF void CORBA_TypedefDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_TypedefDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(yotk**)args[0] = (*((struct CORBA_TypedefDef__tyimpl*)impldef)
    ->_get_type)( (CORBA_TypedefDef)or, ev);
}

STATICF yogfp CORBA_TypedefDef__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id);

STATICF yogfp CORBA_TypedefDef__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id)
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_Contained__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 7;
  else if ( ysidEq( CORBA_IDLType__id, _id) )
    _fps += 8;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const CORBA_TypedefDef__bases[] =
{
  "IDL:CORBA/Contained:1.0",
  "IDL:CORBA/IRObject:1.0",
  "IDL:CORBA/IDLType:1.0",
  (char*)0
};

yostub* CORBA_TypedefDef__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*9), 
    "yostubs");
  _result->widen = (yowiden)CORBA_TypedefDef__widen;
  _result->bases = CORBA_TypedefDef__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "describe";
  _stubs[0].parms = CORBA_TypedefDef_describe_pars;
  _stubs[0].oper = CORBA_TypedefDef_describe_s;
  _stubs[1].opernm = "_get_id";
  _stubs[1].parms = CORBA_TypedefDef__get_id_pars;
  _stubs[1].oper = CORBA_TypedefDef__get_id_s;
  _stubs[2].opernm = "_get_name";
  _stubs[2].parms = CORBA_TypedefDef__get_name_pars;
  _stubs[2].oper = CORBA_TypedefDef__get_name_s;
  _stubs[3].opernm = "_get_version";
  _stubs[3].parms = CORBA_TypedefDef__get_version_pars;
  _stubs[3].oper = CORBA_TypedefDef__get_version_s;
  _stubs[4].opernm = "_get_defined_in";
  _stubs[4].parms = CORBA_TypedefDef__get_defined_in_pars;
  _stubs[4].oper = CORBA_TypedefDef__get_defined_in_s;
  _stubs[5].opernm = "_get_absolute_name";
  _stubs[5].parms = CORBA_TypedefDef__get_absolute_name_pars;
  _stubs[5].oper = CORBA_TypedefDef__get_absolute_name_s;
  _stubs[6].opernm = "_get_containing_repository";
  _stubs[6].parms = CORBA_TypedefDef__get_containing_repository_pars;
  _stubs[6].oper = CORBA_TypedefDef__get_containing_repository_s;
  _stubs[7].opernm = "_get_def_kind";
  _stubs[7].parms = CORBA_TypedefDef__get_def_kind_pars;
  _stubs[7].oper = CORBA_TypedefDef__get_def_kind_s;
  _stubs[8].opernm = "_get_type";
  _stubs[8].parms = CORBA_TypedefDef__get_type_pars;
  _stubs[8].oper = CORBA_TypedefDef__get_type_s;
  _stubs[9].opernm = (CONST char*)0;
  _stubs[9].parms = (yopar*)0;
  _stubs[9].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}

/* Server stubs for interface ::CORBA::StructDef */
STATICF void CORBA_StructDef__get_members_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_StructDef__get_members_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_StructMemberSeq*)args[0] = (*((struct CORBA_StructDef__tyimpl*)
    impldef)->_get_members)( (CORBA_StructDef)or, ev);
}

STATICF void CORBA_StructDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_StructDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained_Description*)args[0] = (*((struct 
    CORBA_StructDef__tyimpl*)impldef)->describe)( (CORBA_StructDef)or, ev);
}

STATICF void CORBA_StructDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_StructDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_RepositoryId*)args[0] = (*((struct CORBA_StructDef__tyimpl*)
    impldef)->_get_id)( (CORBA_StructDef)or, ev);
}

STATICF void CORBA_StructDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_StructDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Identifier*)args[0] = (*((struct CORBA_StructDef__tyimpl*)impldef)
    ->_get_name)( (CORBA_StructDef)or, ev);
}

STATICF void CORBA_StructDef__get_version_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_StructDef__get_version_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_VersionSpec*)args[0] = (*((struct CORBA_StructDef__tyimpl*)
    impldef)->_get_version)( (CORBA_StructDef)or, ev);
}

STATICF void CORBA_StructDef__get_defined_in_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_StructDef__get_defined_in_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_Container*)args[0] = (*((struct CORBA_StructDef__tyimpl*)impldef)
    ->_get_defined_in)( (CORBA_StructDef)or, ev);
}

STATICF void CORBA_StructDef__get_absolute_name_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_StructDef__get_absolute_name_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_ScopedName*)args[0] = (*((struct CORBA_StructDef__tyimpl*)impldef)
    ->_get_absolute_name)( (CORBA_StructDef)or, ev);
}

STATICF void CORBA_StructDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args);

STATICF void CORBA_StructDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args)
{
  *(CORBA_Repository*)args[0] = (*((struct CORBA_StructDef__tyimpl*)impldef)
    ->_get_containing_repository)( (CORBA_StructDef)or, ev);
}

STATICF void CORBA_StructDef__get_def_kind_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args);

STATICF void CORBA_StructDef__get_def_kind_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_StructDef__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_StructDef)or, ev);
}

STATICF void CORBA_StructDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_StructDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(yotk**)args[0] = (*((struct CORBA_StructDef__tyimpl*)impldef)
    ->_get_type)( (CORBA_StructDef)or, ev);
}

STATICF void CORBA_StructDef_lookup_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_StructDef_lookup_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained*)args[0] = (*((struct CORBA_StructDef__tyimpl*)impldef)
    ->lookup)( (CORBA_StructDef)or, ev,*(CORBA_ScopedName*)args[1]);
}

STATICF void CORBA_StructDef_contents_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_StructDef_contents_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_ContainedSeq*)args[0] = (*((struct CORBA_StructDef__tyimpl*)
    impldef)->contents)( (CORBA_StructDef)or, ev,*(CORBA_DefinitionKind*)
    args[1],*(boolean*)args[2]);
}

STATICF void CORBA_StructDef_lookup_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_StructDef_lookup_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_ContainedSeq*)args[0] = (*((struct CORBA_StructDef__tyimpl*)
    impldef)->lookup_name)( (CORBA_StructDef)or, ev,*(CORBA_Identifier*)
    args[1],*(sb4*)args[2],*(CORBA_DefinitionKind*)args[3],*(boolean*)
    args[4]);
}

STATICF void CORBA_StructDef_describe_contents_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_StructDef_describe_contents_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_Container_DescriptionSeq*)args[0] = (*((struct 
    CORBA_StructDef__tyimpl*)impldef)->describe_contents)( (CORBA_StructDef)
    or, ev,*(CORBA_DefinitionKind*)args[1],*(boolean*)args[2],*(sb4*)
    args[3]);
}

STATICF yogfp CORBA_StructDef__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id);

STATICF yogfp CORBA_StructDef__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id)
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_StructDef__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_Contained__id, _id) )
    _fps += 1;
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 8;
  else if ( ysidEq( CORBA_IDLType__id, _id) )
    _fps += 9;
  else if ( ysidEq( CORBA_Container__id, _id) )
    _fps += 10;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const CORBA_StructDef__bases[] =
{
  "IDL:CORBA/TypedefDef:1.0",
  "IDL:CORBA/Contained:1.0",
  "IDL:CORBA/IRObject:1.0",
  "IDL:CORBA/IDLType:1.0",
  "IDL:CORBA/Container:1.0",
  (char*)0
};

yostub* CORBA_StructDef__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*14), 
    "yostubs");
  _result->widen = (yowiden)CORBA_StructDef__widen;
  _result->bases = CORBA_StructDef__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "_get_members";
  _stubs[0].parms = CORBA_StructDef__get_members_pars;
  _stubs[0].oper = CORBA_StructDef__get_members_s;
  _stubs[1].opernm = "describe";
  _stubs[1].parms = CORBA_StructDef_describe_pars;
  _stubs[1].oper = CORBA_StructDef_describe_s;
  _stubs[2].opernm = "_get_id";
  _stubs[2].parms = CORBA_StructDef__get_id_pars;
  _stubs[2].oper = CORBA_StructDef__get_id_s;
  _stubs[3].opernm = "_get_name";
  _stubs[3].parms = CORBA_StructDef__get_name_pars;
  _stubs[3].oper = CORBA_StructDef__get_name_s;
  _stubs[4].opernm = "_get_version";
  _stubs[4].parms = CORBA_StructDef__get_version_pars;
  _stubs[4].oper = CORBA_StructDef__get_version_s;
  _stubs[5].opernm = "_get_defined_in";
  _stubs[5].parms = CORBA_StructDef__get_defined_in_pars;
  _stubs[5].oper = CORBA_StructDef__get_defined_in_s;
  _stubs[6].opernm = "_get_absolute_name";
  _stubs[6].parms = CORBA_StructDef__get_absolute_name_pars;
  _stubs[6].oper = CORBA_StructDef__get_absolute_name_s;
  _stubs[7].opernm = "_get_containing_repository";
  _stubs[7].parms = CORBA_StructDef__get_containing_repository_pars;
  _stubs[7].oper = CORBA_StructDef__get_containing_repository_s;
  _stubs[8].opernm = "_get_def_kind";
  _stubs[8].parms = CORBA_StructDef__get_def_kind_pars;
  _stubs[8].oper = CORBA_StructDef__get_def_kind_s;
  _stubs[9].opernm = "_get_type";
  _stubs[9].parms = CORBA_StructDef__get_type_pars;
  _stubs[9].oper = CORBA_StructDef__get_type_s;
  _stubs[10].opernm = "lookup";
  _stubs[10].parms = CORBA_StructDef_lookup_pars;
  _stubs[10].oper = CORBA_StructDef_lookup_s;
  _stubs[11].opernm = "contents";
  _stubs[11].parms = CORBA_StructDef_contents_pars;
  _stubs[11].oper = CORBA_StructDef_contents_s;
  _stubs[12].opernm = "lookup_name";
  _stubs[12].parms = CORBA_StructDef_lookup_name_pars;
  _stubs[12].oper = CORBA_StructDef_lookup_name_s;
  _stubs[13].opernm = "describe_contents";
  _stubs[13].parms = CORBA_StructDef_describe_contents_pars;
  _stubs[13].oper = CORBA_StructDef_describe_contents_s;
  _stubs[14].opernm = (CONST char*)0;
  _stubs[14].parms = (yopar*)0;
  _stubs[14].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}

/* Server stubs for interface ::CORBA::UnionDef */
STATICF void CORBA_UnionDef__get_discriminator_type_s( dvoid * or, yoenv* 
  ev, dvoid * impldef, dvoid ** args);

STATICF void CORBA_UnionDef__get_discriminator_type_s( dvoid * or, yoenv* 
  ev, dvoid * impldef, dvoid ** args)
{
  *(yotk**)args[0] = (*((struct CORBA_UnionDef__tyimpl*)impldef)
    ->_get_discriminator_type)( (CORBA_UnionDef)or, ev);
}

STATICF void CORBA_UnionDef__get_discriminator_type_def_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args);

STATICF void CORBA_UnionDef__get_discriminator_type_def_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args)
{
  *(CORBA_IDLType*)args[0] = (*((struct CORBA_UnionDef__tyimpl*)impldef)
    ->_get_discriminator_type_def)( (CORBA_UnionDef)or, ev);
}

STATICF void CORBA_UnionDef__get_members_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_UnionDef__get_members_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_UnionMemberSeq*)args[0] = (*((struct CORBA_UnionDef__tyimpl*)
    impldef)->_get_members)( (CORBA_UnionDef)or, ev);
}

STATICF void CORBA_UnionDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_UnionDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained_Description*)args[0] = (*((struct 
    CORBA_UnionDef__tyimpl*)impldef)->describe)( (CORBA_UnionDef)or, ev);
}

STATICF void CORBA_UnionDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_UnionDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_RepositoryId*)args[0] = (*((struct CORBA_UnionDef__tyimpl*)
    impldef)->_get_id)( (CORBA_UnionDef)or, ev);
}

STATICF void CORBA_UnionDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_UnionDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Identifier*)args[0] = (*((struct CORBA_UnionDef__tyimpl*)impldef)
    ->_get_name)( (CORBA_UnionDef)or, ev);
}

STATICF void CORBA_UnionDef__get_version_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_UnionDef__get_version_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_VersionSpec*)args[0] = (*((struct CORBA_UnionDef__tyimpl*)impldef)
    ->_get_version)( (CORBA_UnionDef)or, ev);
}

STATICF void CORBA_UnionDef__get_defined_in_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args);

STATICF void CORBA_UnionDef__get_defined_in_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args)
{
  *(CORBA_Container*)args[0] = (*((struct CORBA_UnionDef__tyimpl*)impldef)
    ->_get_defined_in)( (CORBA_UnionDef)or, ev);
}

STATICF void CORBA_UnionDef__get_absolute_name_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_UnionDef__get_absolute_name_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_ScopedName*)args[0] = (*((struct CORBA_UnionDef__tyimpl*)impldef)
    ->_get_absolute_name)( (CORBA_UnionDef)or, ev);
}

STATICF void CORBA_UnionDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args);

STATICF void CORBA_UnionDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args)
{
  *(CORBA_Repository*)args[0] = (*((struct CORBA_UnionDef__tyimpl*)impldef)
    ->_get_containing_repository)( (CORBA_UnionDef)or, ev);
}

STATICF void CORBA_UnionDef__get_def_kind_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_UnionDef__get_def_kind_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_UnionDef__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_UnionDef)or, ev);
}

STATICF void CORBA_UnionDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_UnionDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(yotk**)args[0] = (*((struct CORBA_UnionDef__tyimpl*)impldef)->_get_type)
    ( (CORBA_UnionDef)or, ev);
}

STATICF void CORBA_UnionDef_lookup_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_UnionDef_lookup_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained*)args[0] = (*((struct CORBA_UnionDef__tyimpl*)impldef)
    ->lookup)( (CORBA_UnionDef)or, ev,*(CORBA_ScopedName*)args[1]);
}

STATICF void CORBA_UnionDef_contents_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_UnionDef_contents_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_ContainedSeq*)args[0] = (*((struct CORBA_UnionDef__tyimpl*)
    impldef)->contents)( (CORBA_UnionDef)or, ev,*(CORBA_DefinitionKind*)
    args[1],*(boolean*)args[2]);
}

STATICF void CORBA_UnionDef_lookup_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_UnionDef_lookup_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_ContainedSeq*)args[0] = (*((struct CORBA_UnionDef__tyimpl*)
    impldef)->lookup_name)( (CORBA_UnionDef)or, ev,*(CORBA_Identifier*)
    args[1],*(sb4*)args[2],*(CORBA_DefinitionKind*)args[3],*(boolean*)
    args[4]);
}

STATICF void CORBA_UnionDef_describe_contents_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_UnionDef_describe_contents_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_Container_DescriptionSeq*)args[0] = (*((struct 
    CORBA_UnionDef__tyimpl*)impldef)->describe_contents)( (CORBA_UnionDef)
    or, ev,*(CORBA_DefinitionKind*)args[1],*(boolean*)args[2],*(sb4*)
    args[3]);
}

STATICF yogfp CORBA_UnionDef__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id);

STATICF yogfp CORBA_UnionDef__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id)
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_UnionDef__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_Contained__id, _id) )
    _fps += 3;
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 10;
  else if ( ysidEq( CORBA_IDLType__id, _id) )
    _fps += 11;
  else if ( ysidEq( CORBA_Container__id, _id) )
    _fps += 12;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const CORBA_UnionDef__bases[] =
{
  "IDL:CORBA/TypedefDef:1.0",
  "IDL:CORBA/Contained:1.0",
  "IDL:CORBA/IRObject:1.0",
  "IDL:CORBA/IDLType:1.0",
  "IDL:CORBA/Container:1.0",
  (char*)0
};

yostub* CORBA_UnionDef__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*16), 
    "yostubs");
  _result->widen = (yowiden)CORBA_UnionDef__widen;
  _result->bases = CORBA_UnionDef__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "_get_discriminator_type";
  _stubs[0].parms = CORBA_UnionDef__get_discriminator_type_pars;
  _stubs[0].oper = CORBA_UnionDef__get_discriminator_type_s;
  _stubs[1].opernm = "_get_discriminator_type_def";
  _stubs[1].parms = CORBA_UnionDef__get_discriminator_type_def_pars;
  _stubs[1].oper = CORBA_UnionDef__get_discriminator_type_def_s;
  _stubs[2].opernm = "_get_members";
  _stubs[2].parms = CORBA_UnionDef__get_members_pars;
  _stubs[2].oper = CORBA_UnionDef__get_members_s;
  _stubs[3].opernm = "describe";
  _stubs[3].parms = CORBA_UnionDef_describe_pars;
  _stubs[3].oper = CORBA_UnionDef_describe_s;
  _stubs[4].opernm = "_get_id";
  _stubs[4].parms = CORBA_UnionDef__get_id_pars;
  _stubs[4].oper = CORBA_UnionDef__get_id_s;
  _stubs[5].opernm = "_get_name";
  _stubs[5].parms = CORBA_UnionDef__get_name_pars;
  _stubs[5].oper = CORBA_UnionDef__get_name_s;
  _stubs[6].opernm = "_get_version";
  _stubs[6].parms = CORBA_UnionDef__get_version_pars;
  _stubs[6].oper = CORBA_UnionDef__get_version_s;
  _stubs[7].opernm = "_get_defined_in";
  _stubs[7].parms = CORBA_UnionDef__get_defined_in_pars;
  _stubs[7].oper = CORBA_UnionDef__get_defined_in_s;
  _stubs[8].opernm = "_get_absolute_name";
  _stubs[8].parms = CORBA_UnionDef__get_absolute_name_pars;
  _stubs[8].oper = CORBA_UnionDef__get_absolute_name_s;
  _stubs[9].opernm = "_get_containing_repository";
  _stubs[9].parms = CORBA_UnionDef__get_containing_repository_pars;
  _stubs[9].oper = CORBA_UnionDef__get_containing_repository_s;
  _stubs[10].opernm = "_get_def_kind";
  _stubs[10].parms = CORBA_UnionDef__get_def_kind_pars;
  _stubs[10].oper = CORBA_UnionDef__get_def_kind_s;
  _stubs[11].opernm = "_get_type";
  _stubs[11].parms = CORBA_UnionDef__get_type_pars;
  _stubs[11].oper = CORBA_UnionDef__get_type_s;
  _stubs[12].opernm = "lookup";
  _stubs[12].parms = CORBA_UnionDef_lookup_pars;
  _stubs[12].oper = CORBA_UnionDef_lookup_s;
  _stubs[13].opernm = "contents";
  _stubs[13].parms = CORBA_UnionDef_contents_pars;
  _stubs[13].oper = CORBA_UnionDef_contents_s;
  _stubs[14].opernm = "lookup_name";
  _stubs[14].parms = CORBA_UnionDef_lookup_name_pars;
  _stubs[14].oper = CORBA_UnionDef_lookup_name_s;
  _stubs[15].opernm = "describe_contents";
  _stubs[15].parms = CORBA_UnionDef_describe_contents_pars;
  _stubs[15].oper = CORBA_UnionDef_describe_contents_s;
  _stubs[16].opernm = (CONST char*)0;
  _stubs[16].parms = (yopar*)0;
  _stubs[16].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}

/* Server stubs for interface ::CORBA::EnumDef */
STATICF void CORBA_EnumDef__get_members_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_EnumDef__get_members_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_EnumMemberSeq*)args[0] = (*((struct CORBA_EnumDef__tyimpl*)
    impldef)->_get_members)( (CORBA_EnumDef)or, ev);
}

STATICF void CORBA_EnumDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_EnumDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained_Description*)args[0] = (*((struct 
    CORBA_EnumDef__tyimpl*)impldef)->describe)( (CORBA_EnumDef)or, ev);
}

STATICF void CORBA_EnumDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_EnumDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_RepositoryId*)args[0] = (*((struct CORBA_EnumDef__tyimpl*)impldef)
    ->_get_id)( (CORBA_EnumDef)or, ev);
}

STATICF void CORBA_EnumDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_EnumDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Identifier*)args[0] = (*((struct CORBA_EnumDef__tyimpl*)impldef)
    ->_get_name)( (CORBA_EnumDef)or, ev);
}

STATICF void CORBA_EnumDef__get_version_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_EnumDef__get_version_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_VersionSpec*)args[0] = (*((struct CORBA_EnumDef__tyimpl*)impldef)
    ->_get_version)( (CORBA_EnumDef)or, ev);
}

STATICF void CORBA_EnumDef__get_defined_in_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args);

STATICF void CORBA_EnumDef__get_defined_in_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args)
{
  *(CORBA_Container*)args[0] = (*((struct CORBA_EnumDef__tyimpl*)impldef)
    ->_get_defined_in)( (CORBA_EnumDef)or, ev);
}

STATICF void CORBA_EnumDef__get_absolute_name_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_EnumDef__get_absolute_name_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_ScopedName*)args[0] = (*((struct CORBA_EnumDef__tyimpl*)impldef)
    ->_get_absolute_name)( (CORBA_EnumDef)or, ev);
}

STATICF void CORBA_EnumDef__get_containing_repository_s( dvoid * or, yoenv* 
  ev, dvoid * impldef, dvoid ** args);

STATICF void CORBA_EnumDef__get_containing_repository_s( dvoid * or, yoenv* 
  ev, dvoid * impldef, dvoid ** args)
{
  *(CORBA_Repository*)args[0] = (*((struct CORBA_EnumDef__tyimpl*)impldef)
    ->_get_containing_repository)( (CORBA_EnumDef)or, ev);
}

STATICF void CORBA_EnumDef__get_def_kind_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_EnumDef__get_def_kind_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_EnumDef__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_EnumDef)or, ev);
}

STATICF void CORBA_EnumDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_EnumDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(yotk**)args[0] = (*((struct CORBA_EnumDef__tyimpl*)impldef)->_get_type)(
     (CORBA_EnumDef)or, ev);
}

STATICF yogfp CORBA_EnumDef__widen( ub4 _idx, dvoid *_data, CONST ysid* _id)
  ;

STATICF yogfp CORBA_EnumDef__widen( ub4 _idx, dvoid *_data, CONST ysid* _id)
  
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_EnumDef__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_Contained__id, _id) )
    _fps += 1;
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 8;
  else if ( ysidEq( CORBA_IDLType__id, _id) )
    _fps += 9;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const CORBA_EnumDef__bases[] =
{
  "IDL:CORBA/TypedefDef:1.0",
  "IDL:CORBA/Contained:1.0",
  "IDL:CORBA/IRObject:1.0",
  "IDL:CORBA/IDLType:1.0",
  (char*)0
};

yostub* CORBA_EnumDef__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*10), 
    "yostubs");
  _result->widen = (yowiden)CORBA_EnumDef__widen;
  _result->bases = CORBA_EnumDef__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "_get_members";
  _stubs[0].parms = CORBA_EnumDef__get_members_pars;
  _stubs[0].oper = CORBA_EnumDef__get_members_s;
  _stubs[1].opernm = "describe";
  _stubs[1].parms = CORBA_EnumDef_describe_pars;
  _stubs[1].oper = CORBA_EnumDef_describe_s;
  _stubs[2].opernm = "_get_id";
  _stubs[2].parms = CORBA_EnumDef__get_id_pars;
  _stubs[2].oper = CORBA_EnumDef__get_id_s;
  _stubs[3].opernm = "_get_name";
  _stubs[3].parms = CORBA_EnumDef__get_name_pars;
  _stubs[3].oper = CORBA_EnumDef__get_name_s;
  _stubs[4].opernm = "_get_version";
  _stubs[4].parms = CORBA_EnumDef__get_version_pars;
  _stubs[4].oper = CORBA_EnumDef__get_version_s;
  _stubs[5].opernm = "_get_defined_in";
  _stubs[5].parms = CORBA_EnumDef__get_defined_in_pars;
  _stubs[5].oper = CORBA_EnumDef__get_defined_in_s;
  _stubs[6].opernm = "_get_absolute_name";
  _stubs[6].parms = CORBA_EnumDef__get_absolute_name_pars;
  _stubs[6].oper = CORBA_EnumDef__get_absolute_name_s;
  _stubs[7].opernm = "_get_containing_repository";
  _stubs[7].parms = CORBA_EnumDef__get_containing_repository_pars;
  _stubs[7].oper = CORBA_EnumDef__get_containing_repository_s;
  _stubs[8].opernm = "_get_def_kind";
  _stubs[8].parms = CORBA_EnumDef__get_def_kind_pars;
  _stubs[8].oper = CORBA_EnumDef__get_def_kind_s;
  _stubs[9].opernm = "_get_type";
  _stubs[9].parms = CORBA_EnumDef__get_type_pars;
  _stubs[9].oper = CORBA_EnumDef__get_type_s;
  _stubs[10].opernm = (CONST char*)0;
  _stubs[10].parms = (yopar*)0;
  _stubs[10].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}

/* Server stubs for interface ::CORBA::AliasDef */
STATICF void CORBA_AliasDef__get_original_type_def_s( dvoid * or, yoenv* ev,
   dvoid * impldef, dvoid ** args);

STATICF void CORBA_AliasDef__get_original_type_def_s( dvoid * or, yoenv* ev,
   dvoid * impldef, dvoid ** args)
{
  *(CORBA_IDLType*)args[0] = (*((struct CORBA_AliasDef__tyimpl*)impldef)
    ->_get_original_type_def)( (CORBA_AliasDef)or, ev);
}

STATICF void CORBA_AliasDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_AliasDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained_Description*)args[0] = (*((struct 
    CORBA_AliasDef__tyimpl*)impldef)->describe)( (CORBA_AliasDef)or, ev);
}

STATICF void CORBA_AliasDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_AliasDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_RepositoryId*)args[0] = (*((struct CORBA_AliasDef__tyimpl*)
    impldef)->_get_id)( (CORBA_AliasDef)or, ev);
}

STATICF void CORBA_AliasDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_AliasDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Identifier*)args[0] = (*((struct CORBA_AliasDef__tyimpl*)impldef)
    ->_get_name)( (CORBA_AliasDef)or, ev);
}

STATICF void CORBA_AliasDef__get_version_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_AliasDef__get_version_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_VersionSpec*)args[0] = (*((struct CORBA_AliasDef__tyimpl*)impldef)
    ->_get_version)( (CORBA_AliasDef)or, ev);
}

STATICF void CORBA_AliasDef__get_defined_in_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args);

STATICF void CORBA_AliasDef__get_defined_in_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args)
{
  *(CORBA_Container*)args[0] = (*((struct CORBA_AliasDef__tyimpl*)impldef)
    ->_get_defined_in)( (CORBA_AliasDef)or, ev);
}

STATICF void CORBA_AliasDef__get_absolute_name_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_AliasDef__get_absolute_name_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_ScopedName*)args[0] = (*((struct CORBA_AliasDef__tyimpl*)impldef)
    ->_get_absolute_name)( (CORBA_AliasDef)or, ev);
}

STATICF void CORBA_AliasDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args);

STATICF void CORBA_AliasDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args)
{
  *(CORBA_Repository*)args[0] = (*((struct CORBA_AliasDef__tyimpl*)impldef)
    ->_get_containing_repository)( (CORBA_AliasDef)or, ev);
}

STATICF void CORBA_AliasDef__get_def_kind_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_AliasDef__get_def_kind_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_AliasDef__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_AliasDef)or, ev);
}

STATICF void CORBA_AliasDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_AliasDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(yotk**)args[0] = (*((struct CORBA_AliasDef__tyimpl*)impldef)->_get_type)
    ( (CORBA_AliasDef)or, ev);
}

STATICF yogfp CORBA_AliasDef__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id);

STATICF yogfp CORBA_AliasDef__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id)
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_AliasDef__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_Contained__id, _id) )
    _fps += 1;
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 8;
  else if ( ysidEq( CORBA_IDLType__id, _id) )
    _fps += 9;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const CORBA_AliasDef__bases[] =
{
  "IDL:CORBA/TypedefDef:1.0",
  "IDL:CORBA/Contained:1.0",
  "IDL:CORBA/IRObject:1.0",
  "IDL:CORBA/IDLType:1.0",
  (char*)0
};

yostub* CORBA_AliasDef__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*10), 
    "yostubs");
  _result->widen = (yowiden)CORBA_AliasDef__widen;
  _result->bases = CORBA_AliasDef__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "_get_original_type_def";
  _stubs[0].parms = CORBA_AliasDef__get_original_type_def_pars;
  _stubs[0].oper = CORBA_AliasDef__get_original_type_def_s;
  _stubs[1].opernm = "describe";
  _stubs[1].parms = CORBA_AliasDef_describe_pars;
  _stubs[1].oper = CORBA_AliasDef_describe_s;
  _stubs[2].opernm = "_get_id";
  _stubs[2].parms = CORBA_AliasDef__get_id_pars;
  _stubs[2].oper = CORBA_AliasDef__get_id_s;
  _stubs[3].opernm = "_get_name";
  _stubs[3].parms = CORBA_AliasDef__get_name_pars;
  _stubs[3].oper = CORBA_AliasDef__get_name_s;
  _stubs[4].opernm = "_get_version";
  _stubs[4].parms = CORBA_AliasDef__get_version_pars;
  _stubs[4].oper = CORBA_AliasDef__get_version_s;
  _stubs[5].opernm = "_get_defined_in";
  _stubs[5].parms = CORBA_AliasDef__get_defined_in_pars;
  _stubs[5].oper = CORBA_AliasDef__get_defined_in_s;
  _stubs[6].opernm = "_get_absolute_name";
  _stubs[6].parms = CORBA_AliasDef__get_absolute_name_pars;
  _stubs[6].oper = CORBA_AliasDef__get_absolute_name_s;
  _stubs[7].opernm = "_get_containing_repository";
  _stubs[7].parms = CORBA_AliasDef__get_containing_repository_pars;
  _stubs[7].oper = CORBA_AliasDef__get_containing_repository_s;
  _stubs[8].opernm = "_get_def_kind";
  _stubs[8].parms = CORBA_AliasDef__get_def_kind_pars;
  _stubs[8].oper = CORBA_AliasDef__get_def_kind_s;
  _stubs[9].opernm = "_get_type";
  _stubs[9].parms = CORBA_AliasDef__get_type_pars;
  _stubs[9].oper = CORBA_AliasDef__get_type_s;
  _stubs[10].opernm = (CONST char*)0;
  _stubs[10].parms = (yopar*)0;
  _stubs[10].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}

/* Server stubs for interface ::CORBA::StringDef */
STATICF void CORBA_StringDef__get_bound_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_StringDef__get_bound_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(ub4*)args[0] = (*((struct CORBA_StringDef__tyimpl*)impldef)->_get_bound)
    ( (CORBA_StringDef)or, ev);
}

STATICF void CORBA_StringDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_StringDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(yotk**)args[0] = (*((struct CORBA_StringDef__tyimpl*)impldef)
    ->_get_type)( (CORBA_StringDef)or, ev);
}

STATICF void CORBA_StringDef__get_def_kind_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args);

STATICF void CORBA_StringDef__get_def_kind_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_StringDef__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_StringDef)or, ev);
}

STATICF yogfp CORBA_StringDef__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id);

STATICF yogfp CORBA_StringDef__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id)
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_StringDef__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_IDLType__id, _id) )
    _fps += 1;
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 2;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const CORBA_StringDef__bases[] =
{
  "IDL:CORBA/IDLType:1.0",
  "IDL:CORBA/IRObject:1.0",
  (char*)0
};

yostub* CORBA_StringDef__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*3), 
    "yostubs");
  _result->widen = (yowiden)CORBA_StringDef__widen;
  _result->bases = CORBA_StringDef__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "_get_bound";
  _stubs[0].parms = CORBA_StringDef__get_bound_pars;
  _stubs[0].oper = CORBA_StringDef__get_bound_s;
  _stubs[1].opernm = "_get_type";
  _stubs[1].parms = CORBA_StringDef__get_type_pars;
  _stubs[1].oper = CORBA_StringDef__get_type_s;
  _stubs[2].opernm = "_get_def_kind";
  _stubs[2].parms = CORBA_StringDef__get_def_kind_pars;
  _stubs[2].oper = CORBA_StringDef__get_def_kind_s;
  _stubs[3].opernm = (CONST char*)0;
  _stubs[3].parms = (yopar*)0;
  _stubs[3].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}

/* Server stubs for interface ::CORBA::SequenceDef */
STATICF void CORBA_SequenceDef__get_bound_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_SequenceDef__get_bound_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(ub4*)args[0] = (*((struct CORBA_SequenceDef__tyimpl*)impldef)
    ->_get_bound)( (CORBA_SequenceDef)or, ev);
}

STATICF void CORBA_SequenceDef__get_element_type_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_SequenceDef__get_element_type_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(yotk**)args[0] = (*((struct CORBA_SequenceDef__tyimpl*)impldef)
    ->_get_element_type)( (CORBA_SequenceDef)or, ev);
}

STATICF void CORBA_SequenceDef__get_element_type_def_s( dvoid * or, yoenv* 
  ev, dvoid * impldef, dvoid ** args);

STATICF void CORBA_SequenceDef__get_element_type_def_s( dvoid * or, yoenv* 
  ev, dvoid * impldef, dvoid ** args)
{
  *(CORBA_IDLType*)args[0] = (*((struct CORBA_SequenceDef__tyimpl*)impldef)
    ->_get_element_type_def)( (CORBA_SequenceDef)or, ev);
}

STATICF void CORBA_SequenceDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_SequenceDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(yotk**)args[0] = (*((struct CORBA_SequenceDef__tyimpl*)impldef)
    ->_get_type)( (CORBA_SequenceDef)or, ev);
}

STATICF void CORBA_SequenceDef__get_def_kind_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_SequenceDef__get_def_kind_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_SequenceDef__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_SequenceDef)or, ev);
}

STATICF yogfp CORBA_SequenceDef__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id);

STATICF yogfp CORBA_SequenceDef__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id)
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_SequenceDef__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_IDLType__id, _id) )
    _fps += 3;
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 4;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const CORBA_SequenceDef__bases[] =
{
  "IDL:CORBA/IDLType:1.0",
  "IDL:CORBA/IRObject:1.0",
  (char*)0
};

yostub* CORBA_SequenceDef__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*5), 
    "yostubs");
  _result->widen = (yowiden)CORBA_SequenceDef__widen;
  _result->bases = CORBA_SequenceDef__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "_get_bound";
  _stubs[0].parms = CORBA_SequenceDef__get_bound_pars;
  _stubs[0].oper = CORBA_SequenceDef__get_bound_s;
  _stubs[1].opernm = "_get_element_type";
  _stubs[1].parms = CORBA_SequenceDef__get_element_type_pars;
  _stubs[1].oper = CORBA_SequenceDef__get_element_type_s;
  _stubs[2].opernm = "_get_element_type_def";
  _stubs[2].parms = CORBA_SequenceDef__get_element_type_def_pars;
  _stubs[2].oper = CORBA_SequenceDef__get_element_type_def_s;
  _stubs[3].opernm = "_get_type";
  _stubs[3].parms = CORBA_SequenceDef__get_type_pars;
  _stubs[3].oper = CORBA_SequenceDef__get_type_s;
  _stubs[4].opernm = "_get_def_kind";
  _stubs[4].parms = CORBA_SequenceDef__get_def_kind_pars;
  _stubs[4].oper = CORBA_SequenceDef__get_def_kind_s;
  _stubs[5].opernm = (CONST char*)0;
  _stubs[5].parms = (yopar*)0;
  _stubs[5].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}

/* Server stubs for interface ::CORBA::ArrayDef */
STATICF void CORBA_ArrayDef__get_length_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ArrayDef__get_length_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(ub4*)args[0] = (*((struct CORBA_ArrayDef__tyimpl*)impldef)->_get_length)
    ( (CORBA_ArrayDef)or, ev);
}

STATICF void CORBA_ArrayDef__get_element_type_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_ArrayDef__get_element_type_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(yotk**)args[0] = (*((struct CORBA_ArrayDef__tyimpl*)impldef)
    ->_get_element_type)( (CORBA_ArrayDef)or, ev);
}

STATICF void CORBA_ArrayDef__get_element_type_def_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_ArrayDef__get_element_type_def_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_IDLType*)args[0] = (*((struct CORBA_ArrayDef__tyimpl*)impldef)
    ->_get_element_type_def)( (CORBA_ArrayDef)or, ev);
}

STATICF void CORBA_ArrayDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ArrayDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(yotk**)args[0] = (*((struct CORBA_ArrayDef__tyimpl*)impldef)->_get_type)
    ( (CORBA_ArrayDef)or, ev);
}

STATICF void CORBA_ArrayDef__get_def_kind_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ArrayDef__get_def_kind_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_ArrayDef__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_ArrayDef)or, ev);
}

STATICF yogfp CORBA_ArrayDef__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id);

STATICF yogfp CORBA_ArrayDef__widen( ub4 _idx, dvoid *_data, CONST ysid* 
  _id)
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_ArrayDef__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_IDLType__id, _id) )
    _fps += 3;
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 4;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const CORBA_ArrayDef__bases[] =
{
  "IDL:CORBA/IDLType:1.0",
  "IDL:CORBA/IRObject:1.0",
  (char*)0
};

yostub* CORBA_ArrayDef__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*5), 
    "yostubs");
  _result->widen = (yowiden)CORBA_ArrayDef__widen;
  _result->bases = CORBA_ArrayDef__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "_get_length";
  _stubs[0].parms = CORBA_ArrayDef__get_length_pars;
  _stubs[0].oper = CORBA_ArrayDef__get_length_s;
  _stubs[1].opernm = "_get_element_type";
  _stubs[1].parms = CORBA_ArrayDef__get_element_type_pars;
  _stubs[1].oper = CORBA_ArrayDef__get_element_type_s;
  _stubs[2].opernm = "_get_element_type_def";
  _stubs[2].parms = CORBA_ArrayDef__get_element_type_def_pars;
  _stubs[2].oper = CORBA_ArrayDef__get_element_type_def_s;
  _stubs[3].opernm = "_get_type";
  _stubs[3].parms = CORBA_ArrayDef__get_type_pars;
  _stubs[3].oper = CORBA_ArrayDef__get_type_s;
  _stubs[4].opernm = "_get_def_kind";
  _stubs[4].parms = CORBA_ArrayDef__get_def_kind_pars;
  _stubs[4].oper = CORBA_ArrayDef__get_def_kind_s;
  _stubs[5].opernm = (CONST char*)0;
  _stubs[5].parms = (yopar*)0;
  _stubs[5].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}

/* Server stubs for interface ::CORBA::ExceptionDef */
STATICF void CORBA_ExceptionDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ExceptionDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(yotk**)args[0] = (*((struct CORBA_ExceptionDef__tyimpl*)impldef)
    ->_get_type)( (CORBA_ExceptionDef)or, ev);
}

STATICF void CORBA_ExceptionDef__get_members_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_ExceptionDef__get_members_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_StructMemberSeq*)args[0] = (*((struct CORBA_ExceptionDef__tyimpl*)
    impldef)->_get_members)( (CORBA_ExceptionDef)or, ev);
}

STATICF void CORBA_ExceptionDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ExceptionDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained_Description*)args[0] = (*((struct 
    CORBA_ExceptionDef__tyimpl*)impldef)->describe)( (CORBA_ExceptionDef)or,
     ev);
}

STATICF void CORBA_ExceptionDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ExceptionDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_RepositoryId*)args[0] = (*((struct CORBA_ExceptionDef__tyimpl*)
    impldef)->_get_id)( (CORBA_ExceptionDef)or, ev);
}

STATICF void CORBA_ExceptionDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ExceptionDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Identifier*)args[0] = (*((struct CORBA_ExceptionDef__tyimpl*)
    impldef)->_get_name)( (CORBA_ExceptionDef)or, ev);
}

STATICF void CORBA_ExceptionDef__get_version_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_ExceptionDef__get_version_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_VersionSpec*)args[0] = (*((struct CORBA_ExceptionDef__tyimpl*)
    impldef)->_get_version)( (CORBA_ExceptionDef)or, ev);
}

STATICF void CORBA_ExceptionDef__get_defined_in_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_ExceptionDef__get_defined_in_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_Container*)args[0] = (*((struct CORBA_ExceptionDef__tyimpl*)
    impldef)->_get_defined_in)( (CORBA_ExceptionDef)or, ev);
}

STATICF void CORBA_ExceptionDef__get_absolute_name_s( dvoid * or, yoenv* ev,
   dvoid * impldef, dvoid ** args);

STATICF void CORBA_ExceptionDef__get_absolute_name_s( dvoid * or, yoenv* ev,
   dvoid * impldef, dvoid ** args)
{
  *(CORBA_ScopedName*)args[0] = (*((struct CORBA_ExceptionDef__tyimpl*)
    impldef)->_get_absolute_name)( (CORBA_ExceptionDef)or, ev);
}

STATICF void CORBA_ExceptionDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args);

STATICF void CORBA_ExceptionDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args)
{
  *(CORBA_Repository*)args[0] = (*((struct CORBA_ExceptionDef__tyimpl*)
    impldef)->_get_containing_repository)( (CORBA_ExceptionDef)or, ev);
}

STATICF void CORBA_ExceptionDef__get_def_kind_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_ExceptionDef__get_def_kind_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_ExceptionDef__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_ExceptionDef)or, ev);
}

STATICF void CORBA_ExceptionDef_lookup_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ExceptionDef_lookup_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained*)args[0] = (*((struct CORBA_ExceptionDef__tyimpl*)
    impldef)->lookup)( (CORBA_ExceptionDef)or, ev,*(CORBA_ScopedName*)
    args[1]);
}

STATICF void CORBA_ExceptionDef_contents_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_ExceptionDef_contents_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_ContainedSeq*)args[0] = (*((struct CORBA_ExceptionDef__tyimpl*)
    impldef)->contents)( (CORBA_ExceptionDef)or, ev,*(CORBA_DefinitionKind*)
    args[1],*(boolean*)args[2]);
}

STATICF void CORBA_ExceptionDef_lookup_name_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args);

STATICF void CORBA_ExceptionDef_lookup_name_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args)
{
  *(CORBA_ContainedSeq*)args[0] = (*((struct CORBA_ExceptionDef__tyimpl*)
    impldef)->lookup_name)( (CORBA_ExceptionDef)or, ev,*(CORBA_Identifier*)
    args[1],*(sb4*)args[2],*(CORBA_DefinitionKind*)args[3],*(boolean*)
    args[4]);
}

STATICF void CORBA_ExceptionDef_describe_contents_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_ExceptionDef_describe_contents_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_Container_DescriptionSeq*)args[0] = (*((struct 
    CORBA_ExceptionDef__tyimpl*)impldef)->describe_contents)( (
    CORBA_ExceptionDef)or, ev,*(CORBA_DefinitionKind*)args[1],*(boolean*)
    args[2],*(sb4*)args[3]);
}

STATICF yogfp CORBA_ExceptionDef__widen( ub4 _idx, dvoid *_data, CONST 
  ysid* _id);

STATICF yogfp CORBA_ExceptionDef__widen( ub4 _idx, dvoid *_data, CONST 
  ysid* _id)
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_ExceptionDef__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_Contained__id, _id) )
    _fps += 2;
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 9;
  else if ( ysidEq( CORBA_Container__id, _id) )
    _fps += 10;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const CORBA_ExceptionDef__bases[] =
{
  "IDL:CORBA/Contained:1.0",
  "IDL:CORBA/IRObject:1.0",
  "IDL:CORBA/Container:1.0",
  (char*)0
};

yostub* CORBA_ExceptionDef__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*14), 
    "yostubs");
  _result->widen = (yowiden)CORBA_ExceptionDef__widen;
  _result->bases = CORBA_ExceptionDef__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "_get_type";
  _stubs[0].parms = CORBA_ExceptionDef__get_type_pars;
  _stubs[0].oper = CORBA_ExceptionDef__get_type_s;
  _stubs[1].opernm = "_get_members";
  _stubs[1].parms = CORBA_ExceptionDef__get_members_pars;
  _stubs[1].oper = CORBA_ExceptionDef__get_members_s;
  _stubs[2].opernm = "describe";
  _stubs[2].parms = CORBA_ExceptionDef_describe_pars;
  _stubs[2].oper = CORBA_ExceptionDef_describe_s;
  _stubs[3].opernm = "_get_id";
  _stubs[3].parms = CORBA_ExceptionDef__get_id_pars;
  _stubs[3].oper = CORBA_ExceptionDef__get_id_s;
  _stubs[4].opernm = "_get_name";
  _stubs[4].parms = CORBA_ExceptionDef__get_name_pars;
  _stubs[4].oper = CORBA_ExceptionDef__get_name_s;
  _stubs[5].opernm = "_get_version";
  _stubs[5].parms = CORBA_ExceptionDef__get_version_pars;
  _stubs[5].oper = CORBA_ExceptionDef__get_version_s;
  _stubs[6].opernm = "_get_defined_in";
  _stubs[6].parms = CORBA_ExceptionDef__get_defined_in_pars;
  _stubs[6].oper = CORBA_ExceptionDef__get_defined_in_s;
  _stubs[7].opernm = "_get_absolute_name";
  _stubs[7].parms = CORBA_ExceptionDef__get_absolute_name_pars;
  _stubs[7].oper = CORBA_ExceptionDef__get_absolute_name_s;
  _stubs[8].opernm = "_get_containing_repository";
  _stubs[8].parms = CORBA_ExceptionDef__get_containing_repository_pars;
  _stubs[8].oper = CORBA_ExceptionDef__get_containing_repository_s;
  _stubs[9].opernm = "_get_def_kind";
  _stubs[9].parms = CORBA_ExceptionDef__get_def_kind_pars;
  _stubs[9].oper = CORBA_ExceptionDef__get_def_kind_s;
  _stubs[10].opernm = "lookup";
  _stubs[10].parms = CORBA_ExceptionDef_lookup_pars;
  _stubs[10].oper = CORBA_ExceptionDef_lookup_s;
  _stubs[11].opernm = "contents";
  _stubs[11].parms = CORBA_ExceptionDef_contents_pars;
  _stubs[11].oper = CORBA_ExceptionDef_contents_s;
  _stubs[12].opernm = "lookup_name";
  _stubs[12].parms = CORBA_ExceptionDef_lookup_name_pars;
  _stubs[12].oper = CORBA_ExceptionDef_lookup_name_s;
  _stubs[13].opernm = "describe_contents";
  _stubs[13].parms = CORBA_ExceptionDef_describe_contents_pars;
  _stubs[13].oper = CORBA_ExceptionDef_describe_contents_s;
  _stubs[14].opernm = (CONST char*)0;
  _stubs[14].parms = (yopar*)0;
  _stubs[14].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}

/* Server stubs for interface ::CORBA::AttributeDef */
STATICF void CORBA_AttributeDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_AttributeDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(yotk**)args[0] = (*((struct CORBA_AttributeDef__tyimpl*)impldef)
    ->_get_type)( (CORBA_AttributeDef)or, ev);
}

STATICF void CORBA_AttributeDef__get_type_def_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_AttributeDef__get_type_def_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_IDLType*)args[0] = (*((struct CORBA_AttributeDef__tyimpl*)impldef)
    ->_get_type_def)( (CORBA_AttributeDef)or, ev);
}

STATICF void CORBA_AttributeDef__get_mode_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_AttributeDef__get_mode_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_AttributeMode*)args[0] = (*((struct CORBA_AttributeDef__tyimpl*)
    impldef)->_get_mode)( (CORBA_AttributeDef)or, ev);
}

STATICF void CORBA_AttributeDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_AttributeDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained_Description*)args[0] = (*((struct 
    CORBA_AttributeDef__tyimpl*)impldef)->describe)( (CORBA_AttributeDef)or,
     ev);
}

STATICF void CORBA_AttributeDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_AttributeDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_RepositoryId*)args[0] = (*((struct CORBA_AttributeDef__tyimpl*)
    impldef)->_get_id)( (CORBA_AttributeDef)or, ev);
}

STATICF void CORBA_AttributeDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_AttributeDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Identifier*)args[0] = (*((struct CORBA_AttributeDef__tyimpl*)
    impldef)->_get_name)( (CORBA_AttributeDef)or, ev);
}

STATICF void CORBA_AttributeDef__get_version_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_AttributeDef__get_version_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_VersionSpec*)args[0] = (*((struct CORBA_AttributeDef__tyimpl*)
    impldef)->_get_version)( (CORBA_AttributeDef)or, ev);
}

STATICF void CORBA_AttributeDef__get_defined_in_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_AttributeDef__get_defined_in_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_Container*)args[0] = (*((struct CORBA_AttributeDef__tyimpl*)
    impldef)->_get_defined_in)( (CORBA_AttributeDef)or, ev);
}

STATICF void CORBA_AttributeDef__get_absolute_name_s( dvoid * or, yoenv* ev,
   dvoid * impldef, dvoid ** args);

STATICF void CORBA_AttributeDef__get_absolute_name_s( dvoid * or, yoenv* ev,
   dvoid * impldef, dvoid ** args)
{
  *(CORBA_ScopedName*)args[0] = (*((struct CORBA_AttributeDef__tyimpl*)
    impldef)->_get_absolute_name)( (CORBA_AttributeDef)or, ev);
}

STATICF void CORBA_AttributeDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args);

STATICF void CORBA_AttributeDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args)
{
  *(CORBA_Repository*)args[0] = (*((struct CORBA_AttributeDef__tyimpl*)
    impldef)->_get_containing_repository)( (CORBA_AttributeDef)or, ev);
}

STATICF void CORBA_AttributeDef__get_def_kind_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_AttributeDef__get_def_kind_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_AttributeDef__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_AttributeDef)or, ev);
}

STATICF yogfp CORBA_AttributeDef__widen( ub4 _idx, dvoid *_data, CONST 
  ysid* _id);

STATICF yogfp CORBA_AttributeDef__widen( ub4 _idx, dvoid *_data, CONST 
  ysid* _id)
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_AttributeDef__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_Contained__id, _id) )
    _fps += 3;
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 10;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const CORBA_AttributeDef__bases[] =
{
  "IDL:CORBA/Contained:1.0",
  "IDL:CORBA/IRObject:1.0",
  (char*)0
};

yostub* CORBA_AttributeDef__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*11), 
    "yostubs");
  _result->widen = (yowiden)CORBA_AttributeDef__widen;
  _result->bases = CORBA_AttributeDef__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "_get_type";
  _stubs[0].parms = CORBA_AttributeDef__get_type_pars;
  _stubs[0].oper = CORBA_AttributeDef__get_type_s;
  _stubs[1].opernm = "_get_type_def";
  _stubs[1].parms = CORBA_AttributeDef__get_type_def_pars;
  _stubs[1].oper = CORBA_AttributeDef__get_type_def_s;
  _stubs[2].opernm = "_get_mode";
  _stubs[2].parms = CORBA_AttributeDef__get_mode_pars;
  _stubs[2].oper = CORBA_AttributeDef__get_mode_s;
  _stubs[3].opernm = "describe";
  _stubs[3].parms = CORBA_AttributeDef_describe_pars;
  _stubs[3].oper = CORBA_AttributeDef_describe_s;
  _stubs[4].opernm = "_get_id";
  _stubs[4].parms = CORBA_AttributeDef__get_id_pars;
  _stubs[4].oper = CORBA_AttributeDef__get_id_s;
  _stubs[5].opernm = "_get_name";
  _stubs[5].parms = CORBA_AttributeDef__get_name_pars;
  _stubs[5].oper = CORBA_AttributeDef__get_name_s;
  _stubs[6].opernm = "_get_version";
  _stubs[6].parms = CORBA_AttributeDef__get_version_pars;
  _stubs[6].oper = CORBA_AttributeDef__get_version_s;
  _stubs[7].opernm = "_get_defined_in";
  _stubs[7].parms = CORBA_AttributeDef__get_defined_in_pars;
  _stubs[7].oper = CORBA_AttributeDef__get_defined_in_s;
  _stubs[8].opernm = "_get_absolute_name";
  _stubs[8].parms = CORBA_AttributeDef__get_absolute_name_pars;
  _stubs[8].oper = CORBA_AttributeDef__get_absolute_name_s;
  _stubs[9].opernm = "_get_containing_repository";
  _stubs[9].parms = CORBA_AttributeDef__get_containing_repository_pars;
  _stubs[9].oper = CORBA_AttributeDef__get_containing_repository_s;
  _stubs[10].opernm = "_get_def_kind";
  _stubs[10].parms = CORBA_AttributeDef__get_def_kind_pars;
  _stubs[10].oper = CORBA_AttributeDef__get_def_kind_s;
  _stubs[11].opernm = (CONST char*)0;
  _stubs[11].parms = (yopar*)0;
  _stubs[11].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}

/* Server stubs for interface ::CORBA::OperationDef */
STATICF void CORBA_OperationDef__get_result_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args);

STATICF void CORBA_OperationDef__get_result_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args)
{
  *(yotk**)args[0] = (*((struct CORBA_OperationDef__tyimpl*)impldef)
    ->_get_result)( (CORBA_OperationDef)or, ev);
}

STATICF void CORBA_OperationDef__get_result_def_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_OperationDef__get_result_def_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_IDLType*)args[0] = (*((struct CORBA_OperationDef__tyimpl*)impldef)
    ->_get_result_def)( (CORBA_OperationDef)or, ev);
}

STATICF void CORBA_OperationDef__get_params_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args);

STATICF void CORBA_OperationDef__get_params_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args)
{
  *(CORBA_ParDescriptionSeq*)args[0] = (*((struct 
    CORBA_OperationDef__tyimpl*)impldef)->_get_params)( (CORBA_OperationDef)
    or, ev);
}

STATICF void CORBA_OperationDef__get_mode_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_OperationDef__get_mode_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_OperationMode*)args[0] = (*((struct CORBA_OperationDef__tyimpl*)
    impldef)->_get_mode)( (CORBA_OperationDef)or, ev);
}

STATICF void CORBA_OperationDef__get_exceptions_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_OperationDef__get_exceptions_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_ExceptionDefSeq*)args[0] = (*((struct CORBA_OperationDef__tyimpl*)
    impldef)->_get_exceptions)( (CORBA_OperationDef)or, ev);
}

STATICF void CORBA_OperationDef__get_contexts_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_OperationDef__get_contexts_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_ContextIdSeq*)args[0] = (*((struct CORBA_OperationDef__tyimpl*)
    impldef)->_get_contexts)( (CORBA_OperationDef)or, ev);
}

STATICF void CORBA_OperationDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_OperationDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained_Description*)args[0] = (*((struct 
    CORBA_OperationDef__tyimpl*)impldef)->describe)( (CORBA_OperationDef)or,
     ev);
}

STATICF void CORBA_OperationDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_OperationDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_RepositoryId*)args[0] = (*((struct CORBA_OperationDef__tyimpl*)
    impldef)->_get_id)( (CORBA_OperationDef)or, ev);
}

STATICF void CORBA_OperationDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_OperationDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Identifier*)args[0] = (*((struct CORBA_OperationDef__tyimpl*)
    impldef)->_get_name)( (CORBA_OperationDef)or, ev);
}

STATICF void CORBA_OperationDef__get_version_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_OperationDef__get_version_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_VersionSpec*)args[0] = (*((struct CORBA_OperationDef__tyimpl*)
    impldef)->_get_version)( (CORBA_OperationDef)or, ev);
}

STATICF void CORBA_OperationDef__get_defined_in_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_OperationDef__get_defined_in_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_Container*)args[0] = (*((struct CORBA_OperationDef__tyimpl*)
    impldef)->_get_defined_in)( (CORBA_OperationDef)or, ev);
}

STATICF void CORBA_OperationDef__get_absolute_name_s( dvoid * or, yoenv* ev,
   dvoid * impldef, dvoid ** args);

STATICF void CORBA_OperationDef__get_absolute_name_s( dvoid * or, yoenv* ev,
   dvoid * impldef, dvoid ** args)
{
  *(CORBA_ScopedName*)args[0] = (*((struct CORBA_OperationDef__tyimpl*)
    impldef)->_get_absolute_name)( (CORBA_OperationDef)or, ev);
}

STATICF void CORBA_OperationDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args);

STATICF void CORBA_OperationDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args)
{
  *(CORBA_Repository*)args[0] = (*((struct CORBA_OperationDef__tyimpl*)
    impldef)->_get_containing_repository)( (CORBA_OperationDef)or, ev);
}

STATICF void CORBA_OperationDef__get_def_kind_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_OperationDef__get_def_kind_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_OperationDef__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_OperationDef)or, ev);
}

STATICF yogfp CORBA_OperationDef__widen( ub4 _idx, dvoid *_data, CONST 
  ysid* _id);

STATICF yogfp CORBA_OperationDef__widen( ub4 _idx, dvoid *_data, CONST 
  ysid* _id)
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_OperationDef__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_Contained__id, _id) )
    _fps += 6;
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 13;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const CORBA_OperationDef__bases[] =
{
  "IDL:CORBA/Contained:1.0",
  "IDL:CORBA/IRObject:1.0",
  (char*)0
};

yostub* CORBA_OperationDef__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*14), 
    "yostubs");
  _result->widen = (yowiden)CORBA_OperationDef__widen;
  _result->bases = CORBA_OperationDef__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "_get_result";
  _stubs[0].parms = CORBA_OperationDef__get_result_pars;
  _stubs[0].oper = CORBA_OperationDef__get_result_s;
  _stubs[1].opernm = "_get_result_def";
  _stubs[1].parms = CORBA_OperationDef__get_result_def_pars;
  _stubs[1].oper = CORBA_OperationDef__get_result_def_s;
  _stubs[2].opernm = "_get_params";
  _stubs[2].parms = CORBA_OperationDef__get_params_pars;
  _stubs[2].oper = CORBA_OperationDef__get_params_s;
  _stubs[3].opernm = "_get_mode";
  _stubs[3].parms = CORBA_OperationDef__get_mode_pars;
  _stubs[3].oper = CORBA_OperationDef__get_mode_s;
  _stubs[4].opernm = "_get_exceptions";
  _stubs[4].parms = CORBA_OperationDef__get_exceptions_pars;
  _stubs[4].oper = CORBA_OperationDef__get_exceptions_s;
  _stubs[5].opernm = "_get_contexts";
  _stubs[5].parms = CORBA_OperationDef__get_contexts_pars;
  _stubs[5].oper = CORBA_OperationDef__get_contexts_s;
  _stubs[6].opernm = "describe";
  _stubs[6].parms = CORBA_OperationDef_describe_pars;
  _stubs[6].oper = CORBA_OperationDef_describe_s;
  _stubs[7].opernm = "_get_id";
  _stubs[7].parms = CORBA_OperationDef__get_id_pars;
  _stubs[7].oper = CORBA_OperationDef__get_id_s;
  _stubs[8].opernm = "_get_name";
  _stubs[8].parms = CORBA_OperationDef__get_name_pars;
  _stubs[8].oper = CORBA_OperationDef__get_name_s;
  _stubs[9].opernm = "_get_version";
  _stubs[9].parms = CORBA_OperationDef__get_version_pars;
  _stubs[9].oper = CORBA_OperationDef__get_version_s;
  _stubs[10].opernm = "_get_defined_in";
  _stubs[10].parms = CORBA_OperationDef__get_defined_in_pars;
  _stubs[10].oper = CORBA_OperationDef__get_defined_in_s;
  _stubs[11].opernm = "_get_absolute_name";
  _stubs[11].parms = CORBA_OperationDef__get_absolute_name_pars;
  _stubs[11].oper = CORBA_OperationDef__get_absolute_name_s;
  _stubs[12].opernm = "_get_containing_repository";
  _stubs[12].parms = CORBA_OperationDef__get_containing_repository_pars;
  _stubs[12].oper = CORBA_OperationDef__get_containing_repository_s;
  _stubs[13].opernm = "_get_def_kind";
  _stubs[13].parms = CORBA_OperationDef__get_def_kind_pars;
  _stubs[13].oper = CORBA_OperationDef__get_def_kind_s;
  _stubs[14].opernm = (CONST char*)0;
  _stubs[14].parms = (yopar*)0;
  _stubs[14].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}

/* Server stubs for interface ::CORBA::InterfaceDef */
STATICF void CORBA_InterfaceDef_is_a_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_InterfaceDef_is_a_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(boolean*)args[0] = (*((struct CORBA_InterfaceDef__tyimpl*)impldef)
    ->is_a)( (CORBA_InterfaceDef)or, ev,*(CORBA_RepositoryId*)args[1]);
}

STATICF void CORBA_InterfaceDef_describe_interface_s( dvoid * or, yoenv* ev,
   dvoid * impldef, dvoid ** args);

STATICF void CORBA_InterfaceDef_describe_interface_s( dvoid * or, yoenv* ev,
   dvoid * impldef, dvoid ** args)
{
  *(CORBA_InterfaceDef_FullInterfaceDescription*)args[0] = (*((struct 
    CORBA_InterfaceDef__tyimpl*)impldef)->describe_interface)( (
    CORBA_InterfaceDef)or, ev);
}

STATICF void CORBA_InterfaceDef__get_base_interfaces_s( dvoid * or, yoenv* 
  ev, dvoid * impldef, dvoid ** args);

STATICF void CORBA_InterfaceDef__get_base_interfaces_s( dvoid * or, yoenv* 
  ev, dvoid * impldef, dvoid ** args)
{
  *(CORBA_InterfaceDefSeq*)args[0] = (*((struct CORBA_InterfaceDef__tyimpl*)
    impldef)->_get_base_interfaces)( (CORBA_InterfaceDef)or, ev);
}

STATICF void CORBA_InterfaceDef_lookup_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_InterfaceDef_lookup_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained*)args[0] = (*((struct CORBA_InterfaceDef__tyimpl*)
    impldef)->lookup)( (CORBA_InterfaceDef)or, ev,*(CORBA_ScopedName*)
    args[1]);
}

STATICF void CORBA_InterfaceDef_contents_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_InterfaceDef_contents_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_ContainedSeq*)args[0] = (*((struct CORBA_InterfaceDef__tyimpl*)
    impldef)->contents)( (CORBA_InterfaceDef)or, ev,*(CORBA_DefinitionKind*)
    args[1],*(boolean*)args[2]);
}

STATICF void CORBA_InterfaceDef_lookup_name_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args);

STATICF void CORBA_InterfaceDef_lookup_name_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args)
{
  *(CORBA_ContainedSeq*)args[0] = (*((struct CORBA_InterfaceDef__tyimpl*)
    impldef)->lookup_name)( (CORBA_InterfaceDef)or, ev,*(CORBA_Identifier*)
    args[1],*(sb4*)args[2],*(CORBA_DefinitionKind*)args[3],*(boolean*)
    args[4]);
}

STATICF void CORBA_InterfaceDef_describe_contents_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_InterfaceDef_describe_contents_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_Container_DescriptionSeq*)args[0] = (*((struct 
    CORBA_InterfaceDef__tyimpl*)impldef)->describe_contents)( (
    CORBA_InterfaceDef)or, ev,*(CORBA_DefinitionKind*)args[1],*(boolean*)
    args[2],*(sb4*)args[3]);
}

STATICF void CORBA_InterfaceDef__get_def_kind_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_InterfaceDef__get_def_kind_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct CORBA_InterfaceDef__tyimpl*)
    impldef)->_get_def_kind)( (CORBA_InterfaceDef)or, ev);
}

STATICF void CORBA_InterfaceDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_InterfaceDef_describe_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Contained_Description*)args[0] = (*((struct 
    CORBA_InterfaceDef__tyimpl*)impldef)->describe)( (CORBA_InterfaceDef)or,
     ev);
}

STATICF void CORBA_InterfaceDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_InterfaceDef__get_id_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_RepositoryId*)args[0] = (*((struct CORBA_InterfaceDef__tyimpl*)
    impldef)->_get_id)( (CORBA_InterfaceDef)or, ev);
}

STATICF void CORBA_InterfaceDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_InterfaceDef__get_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Identifier*)args[0] = (*((struct CORBA_InterfaceDef__tyimpl*)
    impldef)->_get_name)( (CORBA_InterfaceDef)or, ev);
}

STATICF void CORBA_InterfaceDef__get_version_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_InterfaceDef__get_version_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_VersionSpec*)args[0] = (*((struct CORBA_InterfaceDef__tyimpl*)
    impldef)->_get_version)( (CORBA_InterfaceDef)or, ev);
}

STATICF void CORBA_InterfaceDef__get_defined_in_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void CORBA_InterfaceDef__get_defined_in_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_Container*)args[0] = (*((struct CORBA_InterfaceDef__tyimpl*)
    impldef)->_get_defined_in)( (CORBA_InterfaceDef)or, ev);
}

STATICF void CORBA_InterfaceDef__get_absolute_name_s( dvoid * or, yoenv* ev,
   dvoid * impldef, dvoid ** args);

STATICF void CORBA_InterfaceDef__get_absolute_name_s( dvoid * or, yoenv* ev,
   dvoid * impldef, dvoid ** args)
{
  *(CORBA_ScopedName*)args[0] = (*((struct CORBA_InterfaceDef__tyimpl*)
    impldef)->_get_absolute_name)( (CORBA_InterfaceDef)or, ev);
}

STATICF void CORBA_InterfaceDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args);

STATICF void CORBA_InterfaceDef__get_containing_repository_s( dvoid * or, 
  yoenv* ev, dvoid * impldef, dvoid ** args)
{
  *(CORBA_Repository*)args[0] = (*((struct CORBA_InterfaceDef__tyimpl*)
    impldef)->_get_containing_repository)( (CORBA_InterfaceDef)or, ev);
}

STATICF void CORBA_InterfaceDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void CORBA_InterfaceDef__get_type_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(yotk**)args[0] = (*((struct CORBA_InterfaceDef__tyimpl*)impldef)
    ->_get_type)( (CORBA_InterfaceDef)or, ev);
}

STATICF yogfp CORBA_InterfaceDef__widen( ub4 _idx, dvoid *_data, CONST 
  ysid* _id);

STATICF yogfp CORBA_InterfaceDef__widen( ub4 _idx, dvoid *_data, CONST 
  ysid* _id)
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_InterfaceDef__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_Container__id, _id) )
    _fps += 3;
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 7;
  else if ( ysidEq( CORBA_Contained__id, _id) )
    _fps += 8;
  else if ( ysidEq( CORBA_IDLType__id, _id) )
    _fps += 15;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const CORBA_InterfaceDef__bases[] =
{
  "IDL:CORBA/Container:1.0",
  "IDL:CORBA/IRObject:1.0",
  "IDL:CORBA/Contained:1.0",
  "IDL:CORBA/IDLType:1.0",
  (char*)0
};

yostub* CORBA_InterfaceDef__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*16), 
    "yostubs");
  _result->widen = (yowiden)CORBA_InterfaceDef__widen;
  _result->bases = CORBA_InterfaceDef__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "is_a";
  _stubs[0].parms = CORBA_InterfaceDef_is_a_pars;
  _stubs[0].oper = CORBA_InterfaceDef_is_a_s;
  _stubs[1].opernm = "describe_interface";
  _stubs[1].parms = CORBA_InterfaceDef_describe_interface_pars;
  _stubs[1].oper = CORBA_InterfaceDef_describe_interface_s;
  _stubs[2].opernm = "_get_base_interfaces";
  _stubs[2].parms = CORBA_InterfaceDef__get_base_interfaces_pars;
  _stubs[2].oper = CORBA_InterfaceDef__get_base_interfaces_s;
  _stubs[3].opernm = "lookup";
  _stubs[3].parms = CORBA_InterfaceDef_lookup_pars;
  _stubs[3].oper = CORBA_InterfaceDef_lookup_s;
  _stubs[4].opernm = "contents";
  _stubs[4].parms = CORBA_InterfaceDef_contents_pars;
  _stubs[4].oper = CORBA_InterfaceDef_contents_s;
  _stubs[5].opernm = "lookup_name";
  _stubs[5].parms = CORBA_InterfaceDef_lookup_name_pars;
  _stubs[5].oper = CORBA_InterfaceDef_lookup_name_s;
  _stubs[6].opernm = "describe_contents";
  _stubs[6].parms = CORBA_InterfaceDef_describe_contents_pars;
  _stubs[6].oper = CORBA_InterfaceDef_describe_contents_s;
  _stubs[7].opernm = "_get_def_kind";
  _stubs[7].parms = CORBA_InterfaceDef__get_def_kind_pars;
  _stubs[7].oper = CORBA_InterfaceDef__get_def_kind_s;
  _stubs[8].opernm = "describe";
  _stubs[8].parms = CORBA_InterfaceDef_describe_pars;
  _stubs[8].oper = CORBA_InterfaceDef_describe_s;
  _stubs[9].opernm = "_get_id";
  _stubs[9].parms = CORBA_InterfaceDef__get_id_pars;
  _stubs[9].oper = CORBA_InterfaceDef__get_id_s;
  _stubs[10].opernm = "_get_name";
  _stubs[10].parms = CORBA_InterfaceDef__get_name_pars;
  _stubs[10].oper = CORBA_InterfaceDef__get_name_s;
  _stubs[11].opernm = "_get_version";
  _stubs[11].parms = CORBA_InterfaceDef__get_version_pars;
  _stubs[11].oper = CORBA_InterfaceDef__get_version_s;
  _stubs[12].opernm = "_get_defined_in";
  _stubs[12].parms = CORBA_InterfaceDef__get_defined_in_pars;
  _stubs[12].oper = CORBA_InterfaceDef__get_defined_in_s;
  _stubs[13].opernm = "_get_absolute_name";
  _stubs[13].parms = CORBA_InterfaceDef__get_absolute_name_pars;
  _stubs[13].oper = CORBA_InterfaceDef__get_absolute_name_s;
  _stubs[14].opernm = "_get_containing_repository";
  _stubs[14].parms = CORBA_InterfaceDef__get_containing_repository_pars;
  _stubs[14].oper = CORBA_InterfaceDef__get_containing_repository_s;
  _stubs[15].opernm = "_get_type";
  _stubs[15].parms = CORBA_InterfaceDef__get_type_pars;
  _stubs[15].oper = CORBA_InterfaceDef__get_type_s;
  _stubs[16].opernm = (CONST char*)0;
  _stubs[16].parms = (yopar*)0;
  _stubs[16].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}


EXTC_END
