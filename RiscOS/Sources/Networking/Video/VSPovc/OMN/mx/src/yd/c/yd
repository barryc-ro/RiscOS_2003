/* Copyright (c) Oracle Corporation 1995.  All Rights Reserved. */

/*
  NAME
    yd.c
  DESCRIPTION
    YD ORB Daemon main entry point.
  PUBLIC FUNCTIONS
    main

  PRIVATE FUNCTIONS
    <x>

  NOTES
    The heart of the ORB -- this is the Object Request Broker.

    At least one of these runs on each server host.  More may be added
    for load balancing purposes, perhaps to handle the load of many
    client set-top-boxes.

    CLIENT PERSPECTIVE

    The YO runtime in each client is given a list of likely orbds.
    The runtime forwards requests that need brokering to one of the
    orbds on the list.  If at any time the client determines that
    the orbd it has been using has vanished, the runtime locates
    another one and uses it.

    The orbds cooperatively maintain a global "implementation
    repository" of all active and potentially active servers.  They
    also keep a global database of where persistant stateful objects
    are activated.

    The hard work of the orbd is to determine the "good spot" to send
    a request, which may involve starting a new server process
    somewhere.  Doing so requires use of static metric data kept in
    the implementation repository, and may use dynamic data kept in a
    local collection of run-time metrics.

    SERVER PERSPECTIVE

    As implementations are made ready, a server process acts as a
    client and sends "addActive" requests to a likely implementation
    repository.  If no orbd is yet active, the operation will stall.

    INTERNAL ARCHITECTURE

    The orbd is broken down architecturally into the following parts:

    yd	    -- the main program, controlling dispatch of all requests,
	       both brokered and to objects to be serviced locally.

    ydrt    -- the request router
    ydmt_metrics    -- the real-time metrics, defined as ORB objects.
    ydim_imr    -- the implementation repository, defined as ORB objects.
    ydch_och    -- the object clearninghouse, defined as ORB objects.
    ydsp    -- the process spawner, defined as ORB objects.

    The implementation repository, object clearinghouse and the
    process spawner should be persistant stateful objects to deal with
    system crash recovery.

  MODIFIED   (MM/DD/YY)
    dbrower 07/18/95 - created.
    dbrower   02/ 5/96 -  Fix bug 338405.
			  Fix bug 338411.
			  Fix bug 338412.

    dbrower   02/22/96 -  startup sync must be (a) syncronous, finishing
			  successfully before taking any requests, and (b)
			  complete, getting all config info as well as
			  active info.   It is complicated by the need
			  to not lose anything that is being updated
			  in the other orbds while we are starting up.
    dbrower   02/27/96 -  Change startup sync completely; create new
			  sync-done object, then tell other orbds to
			  start sending.  This reduces the memory needed
			  on both ends to marshall the IMR info, since
			  the real server can chunk it up.  This also
			  lets us use the same interfaces for all
			  replication operations.
    dbrower   06/ 4/96 -  change startup sync.  Globally single thread
			  sync to one starting orbd.  This keeps us from
			  having to service multiple syncing orbds at the
			  same time, simplifying some things internally;
			  it also simplifies failure handling.
    dbrower   06/11/96 -  fix another sync race -- start routing (register
			    with name server) before abandoning the sync
			    property claim.
    dbrower   06/17/96 -  fix last sync race -- use rpc nameserver to
			  serialize first starting mnorbsrv.
    dbrower   06/18/96 -  convert to ysRecord messages.
    dbrower   10/10/96 -  work on interrupt handling, bug 411328.
    dbrower   09/27/96 -  add option for 'spawn-only' orb daemon, letting
			  us limit the number of IMRs w/o limiting the
			  number of spawn-capable hosts.
*/

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
#ifndef YSR_ORACLE
#include <ysr.h>
#endif
#ifndef YSL_ORACLE
#include <ysl.h>
#endif
#ifndef YSV_ORACLE
#include <ysv.h>
#endif
#ifndef YDIDL_ORACLE
#include <ydidl.h>
#endif
#ifndef YDRT_ORACLE
#include <ydrt.h>
#endif
#ifndef YDIM_ORACLE
#include <ydim.h>
#endif
#ifndef YDCH_ORACLE
#include <ydch.h>
#endif
#ifndef YDSP_ORACLE
#include <ydsp.h>
#endif
#ifndef YDMT_ORACLE
#include <ydmt.h>
#endif
#ifndef YT_ORACLE
#include <yt.h>
#endif
#ifndef YDQ_ORACLE
#include <ydq.h>
#endif
#ifndef YOYD_ORACLE
#include <yoyd.h>
#endif
#ifndef YD_ORACLE
#include <yd.h>
#endif
#ifndef YDNM_ORACLE
#include <ydnm.h>
#endif

#ifndef MNR_ORACLE
#include <mnr.h>
#endif
#ifndef MNRS_ORACLE
#include <mnrs.h>
#endif
#ifndef YSLOG_ORACLE
#include <yslog.h>
#endif
#ifndef YEEV_ORACLE
#include <yeev.h>
#endif


#define ENTRY_POINT ydMain
#include <s0ysmain.c>

/* PRIVATE TYPES AND CONSTANTS */

#define YD_FAC	    "YD"

/*
 * Command-line Arguments
 */
static struct ysargmap ydmap[] =
{
  { 's', "mnorbsrv.spawner-only=true", 0 },
  { 0, (char *) 0, 0 }
};

externdef CONST_W_PTR mnrid ydRpcRid =
  { { 2, 222, 55, 224, 232, 169, 227, 223  }, MNVERS(1, 0) };

STATICF CONST_DATA mnrcd   ydRpcComp = { 0 };

STATICF CONST_DATA mnrcd *ydRpcCompList[] = { &ydRpcComp };

/* context of a sync i/o operation */
typedef struct
{
  ydcx	    *cx_yds;
  yoenv	    ev_yds;
  sb4	    req_yds;
  ydim_imr  imr_yds;
} yds;

/* time to wait between attempts to claim the global sync property - 1 sec */
#define YD_SYNC_WAIT_MS	((ub4)1000)

/* PRIVATE FUNCTION DECLARATIONS */

STATICF void ydServer(ydcx *cx, dvoid *osdp);
STATICF void ydServerTerm( ydcx *cx );
STATICF void ydThunk(ydcx *cx);

STATICF void ydSyncOrbds(ydcx *cx);
STATICF void ydSyncHandler( ydim_sync or, boolean decr, dvoid *usrp );

externdef ysidDecl(YD_SYNC_LOCK) = "yd::sync";
externdef ysidDecl(YD_EX_INTERNAL) = "yd::internal";
externdef ysidDecl(YD_EX_SYNC_ERR) = "yd::syncError";

/* PUBLIC FUNCTIONS */

/* ---------------------------- ydMain ---------------------------- */
/*
  NAME
    ydMain
  DESCRIPTION
    Main function for the ORB Daemon.
  PARAMETERS
    osdp    -- osd pointer
    nm	    -- program name string
    argc    -- arg count
    argv    -- argument vector.
  RETURNS
    TRUE on success, FALSE on error exit.

  NOTES
    In the future, the modules should be started with queues, and the
    queues serviced in threads.
*/

boolean ydMain(dvoid *osdp, char *nm, sword argc, char **argv)
{
  ydcx	    cx;
  boolean   ok;
  char       vbuf[80];
  sword      sts;
  CONST char	*f;
  sword	    l;

  /* initialization */
  ysInit(osdp, nm);
  sts = ysArgParse(argc, argv, ydmap);
  if (sts == YSARG_VERSION)
    {
      yslError("Oracle Media Exchange ORB Daemon");
      vbuf[0] = 0;
      yslError(ysVersion(vbuf, sizeof(vbuf)));
    }
  ok = (sts == YSARG_NORMAL);

  if (!ok)
    return(FALSE);

  yslDetach();			/* this is a daemon */

  CLRSTRUCT(cx);

  yseTry
  {
    ytInit();
    yoInit();
    ydServer( &cx, osdp );
  }
  yseCatch(YS_EX_INTERRUPT)
  {
  }
  yseCatch(YS_EX_BADMAGIC)
  {
    yseGetLoc( &f, &l );
    yslError("ydMain: %s caught %s from %s %d, panic!\n", 
	     ysProgName(), ysidToStr(yseExid), f, l);
    ysePanic( yseExid );
  }
  yseCatchAll
  {
    yseGetLoc( &f, &l );
    yslError("ydMain: %s caught %s from %s %d, exiting\n", 
	     ysProgName(), ysidToStr(yseExid), f, l);
  }
  yseEnd;

  yseTry
  {
    yoTerm();
    ytTerm();
  }
  yseCatchAll
    yslError("%s caught exception %s while exiting\n", ysProgName(), yseExid );
  yseEnd;
  ysTerm(osdp);
  return TRUE;
}

/* PRIVATE FUNCTIONS */

/* ---------------------------- ydServer ---------------------------- */
/*
  NAME
    ydServer
  DESCRIPTION
    Be an ORB server.  Don't return until shutdown.
  PARAMETERS
    cx	    -- the ydcx.
  RETURNS
    none
*/
STATICF void ydServer( ydcx *cx, dvoid *osdp )
{
  boolean serve;
  yslst *orbds;
  ub4 norbds;
  sysb8 timo;
  ysevt *tsem;
  mnrs *sh;
  sb4 mnsts;
  boolean   router;

  router = !ysResGetBool("mnorbsrv.spawner-only");

  if( router )
    /* 1100, "ydServer: Becoming ORBD routing server" */
    ysRecord(YS_PRODUCT, YD_FAC, (ub4)1100, YSLSEV_INFO, (char*)0, YSLNONE );

#ifdef LATER
  else
    /* 11XX, ydServer: Becoming ORBD spawning-only server */
    ysRecord(YS_PRODUCT, YD_FAC, (ub4)11XX, YSLSEV_INFO, (char*)0, YSLNONE );
#endif
    
  yoEnvInit( &cx->env_ydcx );
  norbds = 0;

  /* use a new queue (for ydThunk) */
  cx->q_ydcx = (ysque*)yoQueCreate("yd-queue");

  /* Note: IM must be first thing running, or yoImplReady will hang */
  if( router )
  {
    ydimInit( cx->q_ydcx, &cx->ydim_ydcx);
    ydThunk(cx);
    ydmtInit( cx->q_ydcx, &cx->ydmt_ydcx, cx->ydim_ydcx);
    ydThunk(cx);
  }
  ydspInit( cx->q_ydcx, &cx->ydsp_ydcx, cx->ydim_ydcx, osdp );
  ydThunk(cx);

  if( router ) 
  {
    ydimSetRefs( cx->ydim_ydcx, cx->ydmt_ydcx, cx->ydsp_ydcx );
    ydThunk(cx);
    cx->ydch_ydcx = ydchInit( cx->q_ydcx );
    ydThunk(cx);

    /* uses, ydch, ydmt, ydim, ydsp, which must be set up first. */
    ydrtInit( cx->q_ydcx, &cx->ydrt_ydcx, cx->ydim_ydcx);
    ydThunk(cx);

    /* set up for initial sync loops */
    sysb8ext( &timo, YD_SYNC_WAIT_MS * 1000 );
    cx->sexid_ydcx = (ysid*)0;
    sh = mnrCreateServer( &ydRpcRid, (ub4)0, ydRpcCompList, (dvoid*)0 );
    
    /*
     * need to get either (a) some registered orbds and the claim, or
     * (b) the rpc registration the initial orbd.  Loop until this is so.
     */

    /*CONSTCOND*/
    while( TRUE )
    {
      /* get idea of number of orbds */
      orbds = yoListORBDs();
      norbds = ysLstCount( orbds );
      ysLstDestroy( orbds, (ysmff)yoRelease );

      if( norbds )
      {
	/* 1101, "ydServer: %d orbds, getting claim" */
	ysRecord(YS_PRODUCT, YD_FAC, (ub4)1101, YSLSEV_INFO, (char*)0,
		 YSLUB4(norbds), YSLEND );

	/* get globally exclusive right to be syncing */
	ysYield();		/* FIXME -- hack for no imr bug */
	if( yoClaim(YD_SYNC_LOCK, (dvoid*)cx->ydim_ydcx) )
	{
	  /* 1102, "ydServer: got claim, syncing" */
	  ysRecord(YS_PRODUCT,YD_FAC,(ub4)1102,YSLSEV_INFO, (char*)0,YSLNONE);

	  ydSyncOrbds(cx);

	  /* 1103, "ydServer: sync completed" */
	  ysRecord(YS_PRODUCT,YD_FAC,(ub4)1103, YSLSEV_INFO,(char*)0,YSLNONE);
	  break;
	}
      }
      else			/* try to be the first. */
      {
	/* 1104, "ydServer: no orbds, getting rpc lock" */
	ysRecord(YS_PRODUCT, YD_FAC, (ub4)1104, YSLSEV_INFO,(char*)0,YSLNONE);
      
	/* get global lock */
	if( !(mnsts = mnrRegister( sh, "mnorbsrvInitial", FALSE )) )
	{
	  /* 1105, "ydServer: got rpc lock, starting" */
	  ysRecord(YS_PRODUCT,YD_FAC,(ub4)1105,YSLSEV_INFO,(char*)0,YSLNONE);
	  ydrtStartRouting( cx->ydrt_ydcx );
	  DISCARD mnrUnregister( sh );
	  break;
	}
      }
      /* whatever attempt failed; sleep and try it all again */

      tsem = ysSemCreate( (dvoid*)0 );
      ysTimer( &timo, tsem );
      ysSemWait( tsem );
      ysSemDestroy( tsem );
    }
    mnrDestroyServer( sh );

  } /* router */
  
  serve = router || !cx->sexid_ydcx;

  if( serve && router )
    /* 1106, "ydServer: routing started, starting service loop" */
    ysRecord(YS_PRODUCT, YD_FAC, (ub4)1106, YSLSEV_INFO, (char*)0,YSLNONE);
  else if ( serve )
  {
    /* 11XX, "ydServer: spawner started, starting service loop" */
    ysRecord(YS_PRODUCT, YD_FAC, (ub4)1106, YSLSEV_INFO, (char*)0,YSLNONE);
  }
  else
    /* 1107, "ydServer: sync failed, abandoning startup" */
    ysRecord(YS_PRODUCT, YD_FAC, (ub4)1107, YSLSEV_ALERT, (char*)0,YSLNONE);
    
  /* run the service loop until someone calls yoShutdown */
  if( serve )
  {
    if( router )
    {
      /* now release lock; we are in the crowd now */
      if( norbds )
	yoAbandon( YD_SYNC_LOCK );
    }
    cx->server_ydcx = TRUE;

    yseTry
    {
      yoService( cx->q_ydcx );
    }
    yseCatch(YS_EX_INTERRUPT)
    {
      /* 1112, "ydIntrHdlr: program interrupted, shutting down" */
      ysRecord(YS_PRODUCT, YD_FAC, (ub4)1112, YSLSEV_ERR, (char*)0,YSLNONE);
      yslError("ydService: %s interrupted, exiting.\n", ysProgName() );
    }
    yseEnd;

    /* 1108, "ydServer: exited service loop"  */
    ysRecord(YS_PRODUCT, YD_FAC, (ub4)1108, YSLSEV_INFO, (char*)0,YSLNONE);
  }
  else if( !router && norbds )
    yoAbandon( YD_SYNC_LOCK );

  /* also called from intr handler */
  ydServerTerm( cx );

  /* 1109, "ydServer: exiting" */
  ysRecord(YS_PRODUCT, YD_FAC, (ub4)1109, YSLSEV_INFO, (char*)0,YSLNONE);
}

STATICF void ydServerTerm( ydcx *cx )
{
  boolean   router;

  router = !ysResGetBool("mnorbsrv.spawner-only");

  if( router && !cx->sexid_ydcx )
    yoTermRouter();

  yoEnvFree( &cx->env_ydcx );

  /* 1110, "ydServerTerm: stopping object services" */
  ysRecord(YS_PRODUCT, YD_FAC, (ub4)1110, YSLSEV_INFO, (char*)0,YSLNONE);

  if( cx->ydch_ydcx ) ydchTerm( cx->ydch_ydcx );
  if( cx->ydsp_ydcx ) ydspTerm( cx->ydsp_ydcx, TRUE );
  if( cx->ydrt_ydcx ) ydrtTerm( cx->ydrt_ydcx );
  if( cx->ydmt_ydcx ) ydmtTerm( cx->ydmt_ydcx );
  if( cx->ydim_ydcx ) ydimTerm( cx->ydim_ydcx );

  yoQueDestroy( cx->q_ydcx );

  if( cx->ydch_ydcx ) yoRelease( (dvoid*)cx->ydch_ydcx );
  if( cx->ydsp_ydcx ) yoRelease( (dvoid*)cx->ydsp_ydcx );
  if( cx->ydrt_ydcx ) yoRelease( (dvoid*)cx->ydrt_ydcx );
  if( cx->ydmt_ydcx ) yoRelease( (dvoid*)cx->ydmt_ydcx );
  if( cx->ydim_ydcx ) yoRelease( (dvoid*)cx->ydim_ydcx );
}


/* ---------------------------- ydThunk ---------------------------- */
/*
  NAME
    ydThunk
  DESCRIPTION
    Ugly hack to cause queues to be serviced while we're in the middle
    of startup.  The yort code will be making calls that in other
    processes go to a yd, but need to go to us internally here.
    If we don't "thunk" to drain the queues, these requests pile
    up and we deadlock.
  PARAMETERS
    cx	    -- the ydcx, defining the q of interest.
  RETURNS
    none
*/

STATICF void ydThunk(ydcx *cx)
{
  ysYield();
  ysSvcAll(cx->q_ydcx);
  ysYield();
  ysSvcAll(cx->q_ydcx);
  ysYield();
  ysSvcAll(cx->q_ydcx);
  ysYield();
  ysSvcAll(cx->q_ydcx);
}

/* ---------------------------- ydSyncOrbds ---------------------------- */
/*
  NAME
    ydSyncOrbds
  DESCRIPTION
    Initiate activity to sync with other known orbds at startup.
    Subsequent sync is done by flooding at the time of change.

    Operation results are visible in cx->sexid_ydcx; exid on err,
    NULL on success.

  PARAMETERS
    cx	    -- the ydcx.
  RETURNS
    none.
*/
STATICF void ydSyncOrbds(ydcx *cx)
{
  yslst	*orbds;
  ysle	*e;
  ydim_imr imr;
  sb4	cnt;
  ydim_sync sync;
  ysevt *sem;
  char *rs;

  /* Get new list here -- the orbd that had the YD_SYNC_LOCK might be new */

  orbds = yoListORBDs();
  /* ASSIGNOK */
  if( (cnt = (sb4)ysLstCount( orbds )))
  {
    sync = ydim_imr_createSync( cx->ydim_ydcx, &cx->env_ydcx, cnt );
    ydimSetSyncHandler( sync, ydSyncHandler, (dvoid*)cx );

    for( e = ysLstHead( orbds ); e ; e = ysLstNext( e ) )
    {
      imr = (ydim_imr)ysLstVal(e);
      ydim_imr_startSync( imr, &cx->env_ydcx, cx->ydim_ydcx, sync );

      rs = yoRefToStr( (dvoid*) imr );
      /* 1113, "ydSyncOrbds: syncing from %s" */
      ysRecord(YS_PRODUCT, YD_FAC, (ub4)1113, YSLSEV_INFO, (char*)0,
	       YSLSTR(rs), YSLEND);
      yoFree( (dvoid*)rs );
    }

    /* 1114, "ydSyncOrbds: waiting for sync with %d orbds" */
    ysRecord(YS_PRODUCT, YD_FAC, (ub4)1114, YSLSEV_INFO, (char*)0,
	     YSLUB4(cnt), YSLEND);

    /* Need to service q until sem is set.  Need not worry about
       shutdown, as we aren't publicly open yet. */

    sem = cx->ssem_ydcx = ysSemCreate( (dvoid*)0 );
    ysSvcLoop( cx->q_ydcx, cx->ssem_ydcx );
    cx->ssem_ydcx = (ysevt*)0;
    ysSemDestroy( sem );
  }
  ysLstDestroy( orbds, (ysmff)yoRelease );
}


/* ---------------------------- ydSyncHandler ---------------------------- */
/*
  NAME
    ydSyncHandler
  DESCRIPTION
    Handle completion of a startup sync request.  This is executed before
    the call to ydim_sync_decrement or destroy completes back to the 
    remote orbd.  It needs to do the route start to ensure that this new
    orbd is in the name server before the sync exits in the other orbds.
  PARAMETERS
    or		-- the sync object
    decr	-- TRUE from normal ydim_sync_decrement, the object remains
		    unless destroyed here.
		   FALSE if from abnormal ydim_sync_destroy, the object
		    will be destroyed on return.
    arg		-- ignored.
    argsz	-- ignored.
  RETURNS
    none
*/

STATICF void ydSyncHandler( ydim_sync or, boolean decr, dvoid *usrp )
{
  ydcx	*cx = (ydcx*)usrp;

  if( decr )
    /* 1115, "ydSyncHandler: sync operations completed normally" */
    ysRecord(YS_PRODUCT, YD_FAC, (ub4)1115, YSLSEV_INFO, (char*)0, YSLNONE ); 
  else
    /* 1116, "ydSyncHandler: sync operations completed with an error" */
    ysRecord(YS_PRODUCT, YD_FAC, (ub4)1116, YSLSEV_ERR, (char*)0, YSLNONE );
    
  cx->sexid_ydcx = decr ? (ysid*)0 : (ysid*)YD_EX_SYNC_ERR;

  /* no recursion */
  ydimSetSyncHandler( or, (ydimSyncFunc)0, (dvoid*)cx );

  if( decr )
  {
    ydim_sync_destroy( or, &cx->env_ydcx );

    /* register with name service for yoListORBDs */
    ydrtStartRouting( cx->ydrt_ydcx );
  }

  /* exit the ysSvcLoop */
  ysTrigger( cx->ssem_ydcx, cx->sexid_ydcx, (dvoid*)0, (size_t)0 );
}



