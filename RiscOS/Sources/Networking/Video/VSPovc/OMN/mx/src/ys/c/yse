/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yse.c - Oracle MOOSE Exception Manager
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSI_ORACLE
#include <ysi.h>
#endif

static ysidDecl(YS_EX_BADFRAME) = "ys::badframe";
static ysmtagDecl(YSEFR_TAG) = "ysefr";

/*
 * yseSetPanic - set a panic function
 */
ysepf yseSetPanic(ysepf pfunc, dvoid *ptr)
{
  ysepf  old;
  ysctx *ctx;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  old = ctx->pfunc;
  ctx->pfunc = pfunc;
  ctx->pfptr = ptr;
  return old;
}

/*
 * ysePanic - cause a panic
 */
void ysePanic(CONST ysid *exid)
{
  ysctx  *ctx;
  dvoid **ptrs;
  CONST char   *host, *pid, *prognm;

  ptrs = (dvoid **) syscGetPG();
  if (ptrs)
    {
      ctx = (ysctx *) yscGet(YSC_YSCTX);
      if (ctx->pfunc)
	(*ctx->pfunc)(exid, ctx->pfptr);
    }

  if (ptrs && ctx && ctx->rdb)
    {
      host = ysGetHostName();
      pid = ysGetPid();
      prognm = ysProgName();

      yslError("YS PANIC: %s host=%s, pid=%s, prognm=%s", ysidToStr(exid),
	       (host ? host : "<no host>"),
	       (pid ? pid : "<no pid>"),
	       (prognm ? prognm : "<no program name>"));
    }
  else
    yslError("YS PANIC: %s (during initialization)", ysidToStr(exid));

  sysePanic();
}

/*
 * yseInf - initialize the error frame
 */
void yseInf(ysefr *fr)
{
  ysthrkey *errkey;

  fr->id = (CONST ysid *) 0;
  fr->obj = (dvoid *) 0;
  fr->liv = fr->rth = FALSE;

  /* push frame onto error stack for this thread */
  errkey = ((ysctx *) yscGet(YSC_YSCTX))->errkey;
  fr->prev = (ysefr *) ysThrKeySet(errkey, (dvoid *) fr);
}

/*
 * yseTrf - terminate the error frame
 */
void yseTrf(ysefr *fr)
{
  ysefr    *curfr;
  ysthrkey *errkey;

  /* rethrow the exception if not caught or terminating a FINALLY region */
  if (fr->rth)
    yseRethrower(fr);

  if (fr->obj)
    ysmGlbFree(fr->obj);

  /* pop frame from error stack for this thread */
  errkey = ((ysctx *) yscGet(YSC_YSCTX))->errkey;
  curfr = (ysefr *) ysThrKeySet(errkey, (dvoid *) fr->prev);

  /* if the current top frame on the error stack does not match the
   * error frame we are terminating, then we must have inadvertently
   * branched out.  The offending function is conveniently the one at
   * the top of the error stack.  Report it.  Note this will trap only
   * if the offending function is not at the bottom of the error stack,
   * and if a throw occurs prior to this condition being detected, bad
   * things will still happen.
   */
  if (curfr != fr)
    ysePanic(YS_EX_BADFRAME);
}

/*
 * yseThrower - throw an exception
 */
void yseThrower(CONST ysid *exid, dvoid *obj, size_t objsz,
		CONST char *fn, sword lineno)
{
  ysthrkey *errkey;
  ysefr    *fr;

  errkey = ((ysctx *) yscGet(YSC_YSCTX))->errkey;
  fr = (ysefr *) ysThrKeyGet(errkey);
  if (!fr)
    {
      yslError("UNHANDLED EXCEPTION: fn=%s, line=%d\n", fn, lineno);
      ysePanic(exid);
    }

  /* if we are in a handler, get rid of the current frame before throwing */
  while (fr->liv)
    {
      if (fr->obj)
	ysmGlbFree(fr->obj);
      DISCARD ysThrKeySet(errkey, (dvoid *) fr->prev);
      fr = fr->prev;
      if (!fr)
	{
	  yslError("UNHANDLED EXCEPTION: fn=%s, line=%d\n", fn, lineno);
	  ysePanic(exid);
	}
    }

  /* throw the exception */
  fr->id = exid;
  if (objsz)
    {
      fr->obj = ysmGlbAlloc(objsz, YSEFR_TAG);
      DISCARD memcpy(fr->obj, obj, objsz);
    }
  fr->rth = fr->liv = TRUE;
  fr->fn = fn;
  fr->lineno = lineno;
  syseJmp(fr->jb, ~0);
}

/*
 * yseRethrower - rethrow an exception
 */
void yseRethrower(ysefr *fr)
{
  ysthrkey   *errkey;
  ysefr      *prevfr;
  CONST ysid *id;

  /* if we have a previous frame, attach the object to that frame before
   * rethrowing
   */
  prevfr = fr->prev;
  while (prevfr && prevfr->liv)
    prevfr = prevfr->prev;

  if (prevfr)
    {
      prevfr->obj = fr->obj;
      fr->obj = (dvoid *) 0;
    }

  id = fr->id;

  errkey = ((ysctx *) yscGet(YSC_YSCTX))->errkey;
  DISCARD ysThrKeySet(errkey, (dvoid *) fr->prev);

  /* rethrow and propagate location information */
  yseThrower(id, (dvoid *) 0, (size_t) 0, fr->fn, fr->lineno);
}

void yseSetObj(ysefr *fr, dvoid *obj, size_t objsz)
{
  DISCARD memcpy(obj, fr->obj, min(objsz, ysmGetSize(fr->obj)));
}
