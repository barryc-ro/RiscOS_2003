/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ysmi.h - OMN Internal Memory Management
 */

#ifndef YSMI_ORACLE
#define YSMI_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YSM_ORACLE
#include <ysm.h>
#endif

/*
 * The fixed-size heap is broken up into a series of contiguous blocks
 * which are allocated or free.  The sz field is common to headers for
 * both types of blocks and the absolute value of the field represents
 * the size in bytes for the block (including the header).
 *
 * If the sz field is negative, it indicates an allocated block, and
 * the ysmahdr header is appropriate.  The block is tagged with the
 * pointer provided by the user to ysmAlloc().
 *
 * If the sz field is positive, it indicates a free block, and the
 * ysmfhdr header is appropriate.  prev and next represent links into
 * the free block list.  The free block list is a doubly-linked circular
 * list that chains together all free blocks in the heap.  The roveptr
 * reflects the current position in this chain and allocation requests
 * begin their scan from here.
 *
 * When multiple buffer elements are provided, an unfreeable allocated
 * block is placed at the end of each buffer.  Then, each buffer's free
 * block is chained together in the free list.  In this way, there will
 * never be an attempt to coalesce past the end of the number and so,
 * there is no need to ever check for this special case.
 */

/*
 * Types & Constants
 */
typedef struct ysmahdr ysmahdr;                    /* allocated block header */
typedef struct ysmfhdr ysmfhdr;                         /* free block header */

/* DISABLE check_naming */
struct ysmahdr
{
  sb4         sz;                             /* size of the block (negated) */
  CONST char *tag;                                     /* tag for the memory */
};

struct ysmfhdr
{
  sb4      sz;                                          /* size of the block */
  ysmfhdr *prev;                              /* previous block in free list */
  ysmfhdr *next;                                  /* next block in free list */
};

struct ysmhp
{
  ysmfhdr    *roveptr;              /* roving pointer into free list in heap */
  sb4         limit;                             /* maximum allocation limit */
  sb4         inuse;                                        /* memory in use */
  sb4         maxusg;                        /* highest in-use value reached */
  sword       bhvr;                                   /* allocation behavior */
  sb4         afcnt;                             /* allocation failure count */
  ysmaf       af;                                      /* allocation routine */
  ysmrf       rf;                                    /* reallocation routine */
  ysmff       ff;                                            /* free routine */
  ysbv       *bv;                                  /* original buffer vector */
  sword       nbv;                     /* original number of vector elements */
};
/* ENABLE check_naming */

#define YSM_MIN_SIZE ysRoundVal(sizeof(ysmfhdr), SYSM_STRICT_ALIGN)

externref CONST_DATA char YSMHP_TAG[];
externref CONST_DATA char YSMEOB_TAG[];

void ysmDump(ysmhp *hp);

#endif /* YSMI_ORACLE */
