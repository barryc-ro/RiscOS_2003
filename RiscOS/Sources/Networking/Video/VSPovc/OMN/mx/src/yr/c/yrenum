/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 *   yrenum.c - Implementation of CORBA::EnumDef
 *
 * NOTES
 *
 * HISTORY
 * 11/09/95 kcoleman    Creation
 */
 
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
 
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif

#ifndef YRCORBAI_H
#include <yrcorbaI.h>
#endif
 
#ifndef YR_ORACLE
#include <yr.h>
#endif
 
#ifndef YOORB_ORACLE
#include <yoorb.h>
#endif
 
#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif
 
externdef ysidDecl(CORBA_EnumDef_implid) = "ORA_EnumDef";

/************************************************************************/
/* Interface CORBA::EnumDef */
/************************************************************************/
 
CORBA_Contained_Description CORBA_EnumDef_describe_i(
     CORBA_EnumDef or, yoenv* ev)
{
  CORBA_Contained_Description result;
  CORBA_TypeDescription* noreg desc = (CORBA_TypeDescription*)0;
  yotk* noreg tc = (yotk*) 0;
 
  NOREG(desc);
  NOREG(tc);
  yseTry
  {
    CONST yotk* temp = YCTC_CORBA_TypeDescription;

    desc = (CORBA_TypeDescription*)
                yoAlloc( sizeof( CORBA_TypeDescription));
    CLRSTRUCT( *desc);
 
    desc->name = CORBA_EnumDef__get_name_i(or, ev);
    desc->id = CORBA_EnumDef__get_id_i( or, ev);
    desc->defined_in = CORBA_EnumDef__get_defined_in_i( or, ev);
    desc->version = CORBA_EnumDef__get_version_i( or, ev);
    desc->type = CORBA_EnumDef__get_type_i( or, ev);
    yotkCopyVal( yoTcTypeCode, (dvoid*) &tc, (dvoid*) &temp, yoAlloc);
  }
  yseCatchAll
  {
    if ( desc )
    {
      if ( desc->name )
        yoFree( (dvoid*) desc->name);
      if ( desc->id )
        yoFree( (dvoid*) desc->id);
      if ( desc->defined_in )
        yoFree( (dvoid*) desc->defined_in);
      if ( desc->version )
        yoFree( (dvoid*) desc->version);
      if ( desc->type )
        yotkFreeVal( yoTcTypeCode, &desc->type, yoFree);
      if ( tc )
        yotkFreeVal( yoTcTypeCode, (dvoid*) &tc, yoFree);
    }
    yseRethrow;
  }
  yseEnd
 
  result.kind = CORBA_dk_Typedef;
  result.value._type = tc;
  result.value._value = desc;
  return result;
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_DefinitionKind CORBA_EnumDef__get_def_kind_i(
     CORBA_EnumDef or, yoenv* ev)
{
  return CORBA_IRObject__get_def_kind_i( (CORBA_IRObject) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_RepositoryId CORBA_EnumDef__get_id_i( CORBA_EnumDef or, yoenv* ev)
{
  return CORBA_Contained__get_id_i( (CORBA_Contained) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Identifier CORBA_EnumDef__get_name_i( CORBA_EnumDef or, yoenv* ev)
{
  return CORBA_Contained__get_name_i( (CORBA_Contained)or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_VersionSpec CORBA_EnumDef__get_version_i( CORBA_EnumDef or, yoenv* ev)
{
  return CORBA_Contained__get_version_i( (CORBA_Contained) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Container CORBA_EnumDef__get_defined_in_i( CORBA_EnumDef or, yoenv* ev)
{
  return CORBA_Contained__get_defined_in_i( (CORBA_Contained) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_ScopedName CORBA_EnumDef__get_absolute_name_i(
     CORBA_EnumDef or, yoenv* ev)
{
  return CORBA_Contained__get_absolute_name_i( (CORBA_Contained) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Repository CORBA_EnumDef__get_containing_repository_i(
     CORBA_EnumDef or, yoenv* ev)
{
  return CORBA_Contained__get_containing_repository_i((CORBA_Contained)or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
yotk* CORBA_EnumDef__get_type_i( CORBA_EnumDef or, yoenv* ev)
{
  return CORBA_IDLType__get_type_i( (CORBA_IDLType) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_EnumMemberSeq CORBA_EnumDef__get_members_i( CORBA_EnumDef or, yoenv* ev)
{
  CORBA_EnumMemberSeq seq = {0, 0, 0};
  yslst* mbrs = yrEnumData( yrCORBAtoYR( (CORBA_IRObject) or)).mbrs;
  ysle* le;
  sword i;
 
  seq._length = ysLstCount(mbrs);
  seq._buffer = (CORBA_Identifier*)
          yoAlloc( sizeof(CORBA_Identifier) * seq._length);
  for ( i = 0, le = ysLstHead(mbrs); le; i++, le = ysLstNext(le))
  {
    CONST char* nm = yrGetName( (yrobj*)ysLstVal(le));
    seq._buffer[i] = (CORBA_Identifier) ysStrDupWaf( nm, yoAlloc);
  }
  return seq;
}
 
/* ---------------------------------------------------------------------- */
 
 
externdef struct CORBA_EnumDef__tyimpl CORBA_EnumDef__impl =
 {
  CORBA_EnumDef__get_members_i,
  CORBA_EnumDef_describe_i,
  CORBA_EnumDef__get_id_i,
  CORBA_EnumDef__get_name_i,
  CORBA_EnumDef__get_version_i,
  CORBA_EnumDef__get_defined_in_i,
  CORBA_EnumDef__get_absolute_name_i,
  CORBA_EnumDef__get_containing_repository_i,
  CORBA_EnumDef__get_def_kind_i,
  CORBA_EnumDef__get_type_i
 };
 



/* ---------------------------------------------------------------------- */

void Init_CORBA_EnumDef()
{
  YR_SET_IMPL(CORBA_EnumDef, FALSE, 0);
  YR_IMPL_READY(CORBA_EnumDef, 0);
}

void Term_CORBA_EnumDef()
{
  YR_IMPL_DEACTIVATE(CORBA_EnumDef);
}
