/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ycihdr.c - generation of header output (ITL language mapping)
 *
 * NOTES
 *	Any typedefs or #defines generated in the header must be wrapped
 *	in #ifndef guards to insure there are no duplicate declarations
 *	such as might occur if the user includes two generated header
 *	files which contain references to the same interface.
 *
 *	Declarations which come from source files, whether included
 *	headers or the current translation unit, are guaranteed to
 *	occur in the correct order on the list of newobjects (ctx->newobjs).
 * 	Alas, the same cannot be said for names that are implicitly
 *	No code is generated for implicit declarations (from the IFR);
 *	the user has to #include the appropriate stuff himself.
 *
 *	Function naming convention: yciGenFooDecl generates public header
 *	declarations for an IR object of type foo (e.g. yciGenIntfDecl).
 *	yciGenFooCStub generates client stubs, yciGenFooSStub generates
 *	server stubs, and yciGenFooSkel generates server skeleton code.
 *	Obviously, every object type doesn't require all the functions.
 *
 * Inheritance
 * -----------
 * One of the sneakier things that goes in here is code gen for inherited
 * types. Unfortunately, the IFR is currently set up so that when a type
 * is inherited, both the base and derived interface point to the same
 * IFR object. Once you tunnel down past the derived scope, you can no
 * longer tell whether you're generating code for the derived object or
 * the base one.
 *
 * To get around this, yciGenIntfDecl sets ctx->derived to point to the
 * the derived interface object when we are generating code for an
 * inherited member. Thus, most of the code gen routines below will
 * check ctx->derived as their first act and generate differenet code
 * as follows:
 *
 * When generating code for a non-inherited type, we generate a full
 * set of C declarations, such as a typedef, type code declaration, and
 * prototype for support functions like T__copy and T__free. When
 * generating code for an inherited type, we just generate macro wrappers
 * around the base typedef, type code, and support functions.
 *
 * This, of course, impacts what things get real code generated for them
 * in the stub files as well. Be sure to keep these three in sync.
 *
 * Aliases
 * -------
 * Aliases are pesky little buggers, just like inherited types. To avoid
 * code bloat, we really don't want to generate new type codes and support
 * functions for every stop along an alias chain. So, we try to generate
 * real declarations/definitions only for the base type and use macro
 * wrappers for the aliases.
 *
 * It's a nice plan, but breaks down somewhat for two classes of types:
 * Aliases of predefined types and aliases of anonymous types. The
 * predefined types, of course, already have typedefs and type codes of
 * their own (which don't necessarily match the normal C mapping naming
 * style) so we special case these.
 *
 * Aliases of anonymous types are array, string, and sequence aliases.
 * If the initial alias is of an unbound string type or one of the
 * predefined unbound sequence types (e.g. seq of a primitive), the
 * alias is handled much like for any other predefined type.
 *
 * Initial aliases of bound anonymous types (arrays, bound strings, and 
 * bound sequences) get full typedef, typecode, and support function decls
 * which incorporate the bounds. 
 *
 * Sequences are another nuisance. All aliases of a sequence of the same
 * element type share the same type definition, whether they are bound or
 * not. On the face of it, typecode sharing should still be possible, at
 * least for unbound instances. Alas, this is not so because there is no
 * way to insure only one definition of the typecode is generated for a
 * program. Consider:
 *
 *    file foo.idl: struct foo {...};
 *    file a.idl:   typedef sequence<foo> afoo;
 *    file b.idl:   typedef sequence<foo> bfoo;
 *    file c.idl:   typedef bfoo cfoo;
 *
 * afoo, bfoo, and cfoo are all typedefs of YCIDL_sequence_foo. But in 
 * which stub file would you supply a definition of a YCTC_sequence_foo?
 * So, YCTC_afoo and YCTC_bfoo cannot simply be macro wrappers around a
 * generic sequence<foo> typecode, though YCTC_cfoo can be a #define of
 * YCTC_bfoo. The same applies to the associated support functions. Isn't
 * this fun?
 *
 * In the future, we should fix this up so that at least within a comp
 * unit, all equivalent sequences share the typecode of the first
 * named alias, but at the moment the implementation isn't that wise.
 * Ditto with the copy/free operations.
@@ FIX THIS! Without this, sequences can create vilely bloated code.
@@ also, may want to make it possible to disable support func generation
 *
@@	proper nested indentation
 *
 * HISTORY
 * 11/28/96 kcoleman	Bug #426687: Change handling of output files
 * 08/20/96 kcoleman	Bug #393905: Change gen of typecode and id defns
 * 07/25/96 kcoleman	Bug 385738: Pick up Dirk's fix for static typecodes.
 * 07/12/96 dpranke     strip out all redundant code (use c mapping code
 *                      where possible, fix for mn 3.2 conventions
 * 07/11/96 kcoleman	Handle C/C++ keywords as IDL identifiers
 * 07/04/96 kcoleman	Switch from sysfp to yccfp for printing
 * 06/11/96 dpranke     update for mn 3.1 idl compiler and sim 2.3 itl client
 *                      interface
 * 06/06/96 kcoleman	Dodge around fix for bug 369357 until merge is done.
 * 04/08/96 kcoleman	Use ysRecord for error reporting.
 * 11/17/95 dpranke     Creation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCI0_ORACLE
#include <yci0.h>
#endif
#ifndef YSSTR_ORACLE
#include <ysstr.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif

STATICF void yciGenDerivedFunc( ycctx* ctx, yccfp* fp, CONST char* dname, 
	CONST char* bname, yrobj* bintf, yrobj* rettype, yslst* pars);
STATICF void yciGenCGObjs( ycctx* ctx, yccfp* fp, yslst* objs);

/* ---------------------------------------------------------------------- */
/*
 * yciGenSimpleDerived - gen code for a simple derived name (not an op)
 *
 * Everything except op and attr names map into simple #defines. <dname>
 * is the absolute name of the derived object, <bname> is the absolute
 * name of the defining occurrence of the name.
 *
 * void yciGenSimpleDerived( ycctx* ctx, yccfp* fp, CONST char* dname, 
 *	CONST char* bname)
 */

#define yciGenSimpleDerived( ctx, fp, dname, bname) \
  {\
    yccfpStartPP((fp)); \
    yccfpPrint( fp, "#ifndef %s\n#define %s %s\n#endif /* %s */\n\n", \
		(dname), (dname), (bname), (dname)); \
    yccfpEndPP((fp)); \
  }

/* ---------------------------------------------------------------------- */
/*
 * ycihdr - generation of header output
 */
void ycihdr(ycctx *ctx, char *base, ycfile* fd)
{
  yccfp *fp;
  char  *upbase;
  CONST char* errtxt;
  ysle* le;

  /* open temporary output file */
  fp = yccfpOpen(fd->newtmp, "w", SYSFPKIND_TEXT, &errtxt, 
                 yccGetLineLimit(ctx));
  if (!fp)
    {
      ysRecord(YCMSG(1), YCERRSEV, YSLSTR(fd->target), YSLSTR(errtxt), YSLEND);
      return;
    }

  /* generate uppercase form */
  upbase = ycToUpper(ysStrDup(base));

  /* produce boilerplate output */
  yccfpSetIndent( fp, 0);
  yccfpPrint(fp, "/* GENERATED FILE\n * %s - public declarations\n", 
	base);
  yccfpPrint(fp, " * from %s\n */\n\n", ctx->srcnm);
  yccfpPrint(fp, "#ifndef MTTC%s_ORACLE\n", upbase);
  yccfpPrint(fp, "#define MTTC%s_ORACLE\n\n", upbase);
  yciGenSysIncls(ctx, fp, FALSE);

  yccfpPrint( fp, "\n");
  yccfpPrint( fp, "/*************** INIT ROUTINE **************/\n\n");
  yccfpPrint( fp, "boolean mttc%s__init( mttictx *cx );\n\n", base);

  /* output sequences along with fwd decls for element types */
  if ( ysLstCount( ctx->seqs) > 0 )
  {
    yccfpPrint( fp, "/**********  SEQUENCE DECLARATIONS *********/\n");
    for ( le = ysLstHead(ctx->seqs); le; le = ysLstNext(le))
    {
      yrobj* obj = (yrobj*) ysLstVal(le);
      yciGenDecl( ctx, fp, obj, TRUE);
    }
  }
  
  /* output all the declarations */
  if ( ysLstCount( ctx->newobjs) > 0 )
  {
    yccfpPrint( fp, "/******* NON-SEQUENCE DECLARATIONS *******/\n");
    yciGenCGObjs( ctx, fp, ctx->newobjs);
  }

  /* produce boilerplate ending */
  yccfpPrint(fp, "#endif /* MTTC%s_ORACLE */\n", upbase);

  ysmGlbFree((dvoid *) upbase);
  yccfpClose( fp);
}


/* ---------------------------------------------------------------------- */
/*
 * yciGenDecl - generate declarations for a list of objects
 *
 * Starting point for code generation for top level objects and
 * interface members.
 */
void yciGenDecl(ycctx* ctx, yccfp* fp, yrobj* obj, boolean isForward)
{
  switch ( yrGetKind(obj) )
  {
    case yrdkInterface:
      yciGenIntfDecl(ctx, fp, obj, isForward);
      break;
    case yrdkConstant:
	/* enumerators are gen'd with their enum type */
      if ( !ycIsEnumConst(obj) )
	yccGenConstDecl(ctx,fp, obj);
      break;
    case yrdkException:
      yccGenExDecl(ctx, fp, obj, isForward);
      break;
    case yrdkTypedef:
    case yrdkAlias:
      yccGenAliasDecl(ctx, fp, obj, isForward);
      break;
    case yrdkStruct:
      yccGenStructDecl(ctx, fp, obj, isForward);
      break;
    case yrdkUnion:
      yccGenUnionDecl(ctx, fp, obj, isForward);
      break;
    case yrdkEnum:
      yccGenEnumDecl(ctx, fp, obj, isForward);
      break;
    case yrdkSequence:
      yccGenSequenceDecl(ctx, fp, obj);
      break;
    case yrdkArray:
      break;
    case yrdkAttribute:
      yciGenAttrDecl(ctx, fp, obj, FALSE);
      break;
    case yrdkOperation:
      yciGenOpDecl(ctx, fp, obj, FALSE);
      break;
    default:
      /* error */
      break;
  }
}

/* ---------------------------------------------------------------------- */
/*
 * yciGenCGObjs - Generate code from a list of ycobj's.
 *
 * There will always be one list of code gen objects attached to the
 * context. In addition, there may be list embedded within there for
 * any modules in the IDL.
 */
 
STATICF void yciGenCGObjs( ycctx* ctx, yccfp* fp, yslst* objs)
{
  ysle* le;
 
  if ( objs )
  {
    for ( le = ysLstHead(objs); le; le = ysLstNext(le))
    {
      ycgobj* cgobj = (ycgobj*) ysLstVal(le);
 
      if ( yrGetKind(cgobj->ifrobj) == yrdkModule )
        yciGenCGObjs( ctx, fp, cgobj->objlist);
      else
        yciGenDecl( ctx, fp, cgobj->ifrobj, cgobj->flags & YCG_FWD);
    }
  }
}

/* -------------------------------------------------------------------- */

/*
 * yciGenIntfDecl - generate an Interface declaration
 *
 * With interfaces, it is necessary to distinguish between forward
 * declarations and full type declarations. If <fwd> is TRUE, we're
 * generating code for a forward declaration; else the whole thing.
 * You cannot just check the "defined" attribute of <intf> because
 * if there was a forward decl followed by a definition, "defined"
 * is true, but you need to generate (different) code for both the
 * forward decl and the defn.
 *
 * A full interface declaration includes code for all member types,
 * constants, exceptions, operations, and attributes, plus supporting
 * declarations for things like the __stubs and __tyimpl object.
 * Refer to the compiler internals document for more information.
 *
 * Be careful with the __tyimpl generation: The order in which the
 * fields are defined here had better stay in step with the order
 * of the initializer generated in ycisrv.c.
 */

void yciGenIntfDecl(ycctx* ctx, yccfp* fp, yrobj* intf, boolean fwd)
{
  CONST char* name;
  ysle* le;
  boolean genDefn;

  if ( ycIsCorbaObject( ctx, intf) )       /* Object is a magic cookie */
    return;

  genDefn = ycShouldGenCode( ctx, intf);
  name = yccGetAbsoluteName(ctx, intf, (yrobj*)0);

  yccfpPrint(fp, "\n/* interface %s declarations */\n", name);
  yccGenOpenGuard(ctx, fp, name, FALSE);
  yccfpPrint(fp, "typedef struct %s* %s;\n", name, name);
  if ( yccNeedsTypeCode( ctx, intf) )
    yccGenTypeCode(ctx, fp, name, (yotk*)0, TRUE);
  yccGenCloseGuard(ctx, fp, name, FALSE);
  if ( fwd )
  {
    return;
  }

    /****
     * If this is not an interface from an include file, generate
     * full declaration. Even if it is an from an incl, must gen all
     * the type decls because they may be used by something in the 
     * including source file.
     ****/
  if ( genDefn )
  {
    yccGenOpenGuard(ctx, fp, name, TRUE);
    yccGenId( ctx, fp, name, name, TRUE, (char*)0);
    yccGenCloseGuard(ctx, fp, name, TRUE);
  }

      /* gen decls for operations, attributes, types, etc. */
  ycgPushScope( ctx, intf);
  for (le = ysLstHead( yrGetContents(intf)); le; le = ysLstNext(le))
  {
    yciGenDecl( ctx, fp, (yrobj*)ysLstVal(le), FALSE);
  }
  DISCARD ycgPopScope( ctx);
}


/* ---------------------------------------------------------------------- */
/*
 * yciGenAttrDecl - generate declarative code for an interface attribute
 *
 *	void base__get_attr(mttictx *cx, yslst *args, mttitc *ret);
 *	yopar *base__get_attr__getPars();
 *	void base__set_attr(mttictx *cx, yslst *args, mttitc *ret);
 *	yopar *base__set_attr__getPars();
 *
 * For an inherited attribute, we generate macro defns a la yciGenDerivedFunc.
 * If <fptr> is TRUE, pay no attention to inherited vs. defined.
 */

void yciGenAttrDecl(ycctx* ctx, yccfp* fp, yrobj* attr, boolean fptr)
{
  CONST char* base;	/* attr's intf or base intf attr absolute name */
  char* attrName;
  char* name;		/* attr or base intf attr absolute name */
  yrobj* voidType;
  CONST char* dbase = (char*)0;	/* derived interface absolute name */
  char* dname = (char*)0;	/* derived attr absolute name */
  yrobj* bintf = yrGetDefinedIn(attr);
  yrobj* inInterface = ycgScopeLookup( ctx, yrdkInterface);
  boolean inherited = (inInterface && (yrGetDefinedIn(attr) != inInterface));

  if ( !ycShouldGenCode( ctx, attr) )
    return;		/* don't gen for include files */

  base = fptr ? "" : yccGetAbsoluteName( ctx, bintf, (yrobj*)0);
  attrName = yrGetName(attr);
  voidType = yrGetPrimitive( ctx->repository, yrpkvoid);
  name = (char*) ysmGlbAlloc(strlen(base) + strlen(attrName) + 7, "attrName");
		/* "__get_" + 1 == 7 */

    /* synchronous get function */
  if ( inherited && !fptr )
  {
    dbase = yccGetAbsoluteName( ctx, inInterface, (yrobj*)0);
    dname = (char*) ysmGlbAlloc(strlen(dbase) + strlen(attrName) + 10, 
		"attrName");
    ysFmtStr( name, "%s__get_%s", base, attrName);
    ysFmtStr( dname, "%s__get_%s", dbase, attrName);
    yciGenDerivedFunc( ctx, fp, dname, name, bintf, yrAttrData(attr).type, 
			(yslst*)0);
  }
  else		/* gen real func decls */
  {
    ysFmtStr( name, "%s__get_%s", base, attrName);
    yccfpPrint(fp, "void %s( mttictx *cx, yslst *args, mttitc *ret)", name);
    yccfpPrint(fp, ";\n");
    yccGenParsDecl(ctx, fp, name);
  }

    /* gen set operation if not readonly attribute */
  if ( yrAttrData(attr).mode != YR_ATTR_RO )
  {
    yrpar param;
    yslst* pars = ysLstCreate();

    param.name = (char *)"val";
    param.type = yrAttrData(attr).type;
    param.mode = YOMODE_IN;
    DISCARD ysLstEnq( pars, (dvoid*) &param);

    if ( inherited && !fptr )
    {
      ysFmtStr( name, "%s__set_%s", base, attrName);
      ysFmtStr( dname, "%s__set_%s", dbase, attrName);
      yciGenDerivedFunc( ctx, fp, dname, name, bintf, voidType, pars);
    }
    else
    {
      /* synchronous set function */
      ysFmtStr( name, "%s__set_%s", base, attrName);
      yccfpPrint(fp, "void %s( mttictx *cx, yslst *args, mttitc *ret)", name);
      yccfpPrint(fp, ";\n");
      yccGenParsDecl(ctx, fp, name);
    }
    ysLstDestroy( pars, (ysmff)0);
  }

  ysmGlbFree((dvoid*)name);
  if ( inherited && !fptr )
  {
    ysmGlbFree((dvoid*)dname);
  }
}


/* ---------------------------------------------------------------------- */
/*
 * yciGenOpDecl - generate declarative code for an interface operation
 *
 *	void op(mttictx *cx, yslst *args, mttitc *ret);
 *	yotk *op__getPars();
 *
 * For an inherited operation:
 *
 *	#ifndef derived_op
 *	#define derived_op base_op
 *	#define derived_op_pars base_op_pars
 *	#endif derived_op
 *
 * If <fptr> is TRUE, we're generating a function pointer decl for
 * use in the __tyimpl structure. Base vs. derived has no affect on this.
 */
void yciGenOpDecl(ycctx* ctx, yccfp* fp, yrobj* op, boolean fptr)
{
  CONST char* name = (char*) 0;
  yrobj* inInterface = ycgScopeLookup( ctx, yrdkInterface);
  boolean inherited = (inInterface && (yrGetDefinedIn(op) != inInterface));

  if ( !ycShouldGenCode( ctx, op) )
    return;

  if ( inherited  )
  {
    CONST char* dname;

    dname = yccGetAbsoluteName( ctx, op, inInterface);
    yciGenDerivedFunc( ctx, fp, dname, yccGetAbsoluteName(ctx, op, (yrobj*)0),
			yrGetDefinedIn(op), yrOpData(op).rettype, 
			yrOpData(op).pars);
    ysmGlbFree( (dvoid*)dname);
  }
  else
  {
    yrobj* intf = inherited ? inInterface : yrGetDefinedIn(op);

    name = yccGetAbsoluteName(ctx, op, intf);
    yccfpPrint(fp,"void %s( mttictx *cx, yslst *args, mttitc *ret)", name);
    yccfpPrint(fp, ";\n");
    yccGenParsDecl(ctx, fp, name);
  }
}

/* --------------------------------------------------------------------- */
/*
 * yciGenDerivedFunc - generate inherited op/attr function declaration
 *
 * For any operation/attribute "op", generate:
 *
 *      <extern decls for base_op, base_op_nw, base_op_pars>
 *	#ifndef derived_op
 *	#define derived_op base_op
 *	#define derived_op_pars base_op_pars
 *	#endif
 *
 * We generate declarations for the base interface functions and pars
 * structure because if the base interface is from an include file
 * these declarations aren't normally generated.
 */
STATICF void yciGenDerivedFunc( ycctx* ctx, yccfp* fp, CONST char* dname, 
	CONST char* bname, yrobj* bintf, yrobj* rettype, yslst* pars)
{
  yrobj* voidType = yrGetPrimitive(ctx->repository, yrpkvoid);

      /* base interface op decls */
  if ( !ycShouldGenCode( ctx, bintf) )
  {	/* this could would not otherwise get generated */
    yccfpPrint(fp, "void %s( mttictx *cx, yslst *args, mttitc *ret)", bname);
    yccfpPrint(fp,";\n");
    yccGenParsDecl(ctx, fp, bname);
  }

  /* derived sync */
  yccfpStartPP(fp);
  yccfpPrint( fp, "#ifndef %s\n#define %s %s\n", dname, dname, bname);
  yccfpPrint( fp, "#define %s_pars %s_pars\n", dname, bname);

  yccfpPrint( fp, "#endif /* %s */\n\n", dname);
  yccfpEndPP(fp);
}


