/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yccname.c - Object/type name manipulation ops for C language mapping
 *
 * 09/27/96 kcoleman	Strict CORBA naming
 * 07/11/96 kcoleman	Deal with C keywords as IDL identifiers
 * 06/06/96 kcoleman	Bug 369357: Revamp I/O to limit line length
 * 04/16/96 kcoleman	Change how abs names are cached in IFR usrp
 * 03/25/96 kcoleman	Support for static typecodes, full alias typecodes
 * 02/27/96 kcoleman	yccGetAbsoluteName returned nothing for bound string.
 * 12/18/95 kcoleman	Workaround for bug 329928 (see yccGenTypeCodeName).
 * 11/06/95 kcoleman	Changed yccGenTypeCodeName to fix aliases of
 *                      bound anonymous types
 * 10/16/95 kcoleman	Support for TypeCode's as a primitive type
 * 08/15/95 kcoleman	Modified yccGetAbsolute name to deal with names
 *			of inherited objects.
 * 07/27/95 kcoleman	Creation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCC0_ORACLE
#include <ycc0.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif


externdef ysidDecl(YC_EX_FAILURE) = "::YC_EX_FAILURE";

/* ----------------------------------------------------------------------- */
/*
 * yccGetSeqName - construct the absolute name of a sequence
 *
 * Sequences have no name as far as the Interface Repository is concerned,
 * but unlike arrays, they still have names in the code. A sequence name
 * is of the form:
 *
 *    (YCIDL | CORBA)_sequence_<effective-elem-type>
 *
 * YCIDL is the default prefix, but in strict CORBA mode, we use CORBA.
 *
 * If the element type is another sequence, it's name is appended as
 * above, but without the YCIDL/CORBA prefix. 
 *
 * If the element type is an alias, you must peer through it to the 
 * effective type. That is, what is it ultimately an alias of? If the
 * effective type is another sequence, you essentially recurse. Otherwise,
 * you're at the final element type...with one gotcha: If you eventually
 * get the typedef of an array, the effective type is the last alias before
 * the anonymous array type.
 *
 * Primitive type names potentially have spaces in them (unsigned long).
 * CORBA dictates the spaces are replaced by underscores in the seq name.
 * Yet another special case: If the element type of a sequence is string,
 * "string" is used as the type name. Don't blame me for all these special
 * cases - it's OMG's fault!
 *
 * Example: sequence<sequence<foo> >
 *   typedef long mumble;
 *   typedef long ints[10];
 *   typedef sequence<mumble> fratz;	-> YCIDL_sequence_sb4
 *   typedef sequence<fratz> fritz;	-> YCIDL_sequence_sequence_sb4
 *   typedef sequence<ints> intSeq;	-> YCIDL_sequence_ints
 */

char* yccGetSeqName( ycctx* ctx, yrobj* obj)
{
  char* p;
  char* name;
  yrobj* o;
  CONST char* elemName;
  size_t len;
  yslst* comps;
  ysle* le;
  CONST char* seqName = "sequence";
  boolean freeElem;

  if ( yrGetKind(obj) != yrdkSequence )
    return (char*)0;

    /* walk chain of aliases and sequences, build list of name components */
  comps = ysLstCreate();
  for( o = obj, len = 0;;)
  {
    if ( yrGetKind(o) == yrdkSequence )
    {
      DISCARD ysLstEnq( comps, (dvoid*) seqName);
      o = yrSeqData(o).elmtype;
      len += 8;				/* "sequence" */
    }
    else if ( yrGetKind(o) == yrdkAlias )
    {					/* get effective type of alias */
      for ( ; yrGetKind(o) == yrdkAlias; o = yrAliasData(o).type)
        if ( yrGetKind(yrAliasData(o).type) == yrdkArray )
          break;
      if ( yrGetKind(o) != yrdkSequence )	/* found elem type */
        break;
    }
    else 
      break;
  }

    /* o now points to ultimate element type; get it's name */
  if ( (yrGetKind(o) == yrdkString) || 
	((yrGetKind(o) == yrdkPrimitive) && yrPrimData(o).kind == yrpkstring) )
  {
    elemName = "string";
    freeElem = FALSE;
  }
  else if ( yrGetKind(o) == yrdkPrimitive )
  {
    if ( (yrPrimData(o).kind == yrpkTypeCode) )
    {
      elemName = "TypeCode";
      freeElem = FALSE;
    }
    else                                     /* possible multi-word name */
    {
      elemName = yccGetPrimitiveName( ctx, yrPrimData(o).kind);
      if ( strncmp( "CORBA_", elemName, 6) == 0 )
      {                                        /* strip off CORBA prefix */
        elemName += 6;
        freeElem = FALSE;
      }
      else                                     /* spaces into underscores */
      {
        p = ysStrDup(elemName);
        elemName = p;
        freeElem = TRUE;
        for ( ; *p; p++ )
          if ( *p == ' ' )
            *p = '_';
      }
    }
  }
  else                                                    /* non-primitive */
  {
    elemName = yccGetAbsoluteName( ctx, o, (yrobj*)0);
    freeElem = FALSE;
  }
  len +=  6 + ysLstCount( comps) + strlen( elemName);	/* "YCIDL_" + '_'s */

    /* allocate and construct the name */
  name = (char*) ysmGlbAlloc( len + 1, "seqName");
  DISCARD strcpy( name, yccSeqPrefix(ctx));
  name[5] = '_';
  p = name + 6;
  for ( le = ysLstHead( comps); le; le = ysLstNext( le) )
  {
    CONST char* n = (CONST char*) ysLstVal(le);
    DISCARD strcpy( p, n);
    p += strlen(n);
    *p = '_';
    p++;
  }
  DISCARD strcpy( p, elemName);

  if ( freeElem )
    ysmGlbFree( (dvoid*)elemName);
  ysLstDestroy( comps, (ysmff)0);
  return name;
}


/* ----------------------------------------------------------------------- */
/*
 * yccGetAbsoluteName - construct the name of an object as it is in C code
 *
 * Sequence and primitive names are handled as a special case because
 * they're not scoped - they're always at the global scope. Also, their
 * names are specially constructed by the compiler on a per language
 * mapping basis rather than being at least partially encoded in the IFR.
 *
 * For other names, we collect the name components by walking the def
 * chain. To make allocation more efficient, we walk the chain once to
 * compute how much space we need, and then again to build the name.
 *
 * Exception names are another special case. If YCSTYLE_EXC is requested,
 * the last component of an exception name is prefixed with "ex_" and the
 * whole name is converted to upper case.
 *
 * Absolute names for most objects are cached in the <usrp> field of the
 * associated IFR object so we don't keep recomputing the name every time.
 * Names are not cached for (a) exceptions, or (b) inherited names. 
 * Because of this caching, the value returned should not be modified by
 * the caller and should only be freed by the caller if it is an exception
 * or derived member name.
 *
 * Globally scoped names which are C/C++ keywords are prefixed with an
 * underscore.
@@ only YCSTYLE_CMAP is supported right now, not YCSTYLE_CORA.
 */

CONST char* yccGetAbsoluteName( ycctx* ctx, yrobj* obj, yrobj* inheritedBy)
{
  yslst* comps;			/* all name components except last one */
  size_t len;
  char* name;			/* the constructed absolute name */
  boolean doException;
  char* p;
  yrobj* o;
  char* nm;
  ycsym* syminfo;
  yrobj* parent = (yrobj*)0;

    /* sequence and primitive names aren't scoped like other names */
  syminfo = ycSymLookup( ctx->symtbl, obj);
  switch (yrGetKind( obj))
  {
    case yrdkPrimitive:
      return yccGetPrimitiveName( ctx, yrPrimData(obj).kind);
    case yrdkSequence:
      if ( !syminfo->lang.c.absnm )
      {
        syminfo->lang.c.absnm = yccGetSeqName( ctx, obj);
      }
      return syminfo->lang.c.absnm;
    case yrdkArray:                  /* anonymous - internal error */
      yseThrow( YC_EX_FAILURE);
      break; /* unreachable */
    case yrdkString:
      if ( !syminfo->lang.c.absnm )
      {
        syminfo->lang.c.absnm = 
                         ysStrDup( yccGetPrimitiveName( ctx, yrpkstring));
      }
      return syminfo->lang.c.absnm;
    default:
      doException = (yrGetKind(obj) == yrdkException) && 
                    (ctx->style & YCSTYLE_EXC);
      parent = yrGetDefinedIn(obj);
      if ( syminfo->lang.c.absnm && !doException && (!inheritedBy || 
	  (inheritedBy == parent)) )
        return syminfo->lang.c.absnm;
      break;
  }

    /***** Check for C keywords at outermost scope *****/
  if ( (yrGetKind(parent) == yrdkRepository) && !doException )
  {
    CONST char* yrnm = yrGetName(obj);
    if ( (*ctx->lang->kwdchk)( ctx, yrnm) )
    {
      name = (char*) ysmGlbAlloc( strlen(yrnm) + 2, "absName");
      name[0] = '_';
      p = name + 1;
    }
    else       /* simple name at global scope */
    {
      name = (char*) ysmGlbAlloc( strlen(yrnm) + 1, "absName");
      p = name;
    }
    DISCARD strcpy( p, yrnm);
  }
  else        /* name has at least two components or is an exception */
  {
      /* Get all name components, figure out how long they are */
    comps = ysLstCreate();
    o = ( inheritedBy ? inheritedBy : parent);
    for (len = 0; yrGetKind(o) != yrdkRepository; o = yrGetDefinedIn(o))
    {
      len += strlen( yrGetName(o));
      DISCARD ysLstPush(comps, (dvoid*)yrGetName(o));
    }
    len += strlen( yrGetName(obj));
    /* we leave off the last component to special case exceptions */

    doException = (yrGetKind(obj) == yrdkException) && 
                  (ctx->style & YCSTYLE_EXC);
    if ( doException )
      len += 3;				/* "ex_" */

      /* Allocate result and construct name */
    len += ysLstCount( comps);		/* for '_' separator */
    name = (char*) ysmGlbAlloc( len+1, "absName");
    if ( doException && ycStyleCORBA(ctx) )
    {
      strcpy( name, "ex_");
      p = name + 3;
    }
    else
    {
      p = name;
    }

    while ( (nm = (char*) ysLstPop( comps)) )
    {
      DISCARD strcpy( p, nm);
      p += strlen(nm);
      *p = '_';
      p++;
    }
  
    if ( doException && !ycStyleCORBA(ctx) )
    {			/* add "ex_" prefix, upper case */
      ysFmtStr( p, "ex_%s", yrGetName(obj));
      DISCARD ycToUpper(name);
    }
    else
      DISCARD strcpy( p, yrGetName(obj));

    ysLstDestroy( comps, (ysmff) 0);
  }

  if ( !doException && (!inheritedBy || (inheritedBy == parent)) )
    syminfo->lang.c.absnm = name;              /* cache in symtab */
  return name;
}


/* ---------------------------------------------------------------------- */
/*
 * yccOraPrimMap - mapping from yrpk to C language mapping representation
 *   using OCCS types.
 */
static CONST char* yccOraPrimMap[] =
  {
    /* yrpknull */	"",
    /* yrpkvoid */	"void",
    /* yrpkshort */	"sb2",
    /* yrpklong */	"sb4",
    /* yrpkushort */	"ub2",
    /* yrpkulong */	"ub4",
    /* yrpkfloat */	"float",
    /* yrpkdouble */	"double",
    /* yrpkboolean */	"boolean",
    /* yrkpchar */	"char",
    /* yrpkoctet */	"ub1",
    /* yrpkany */	"yoany",
    /* yrpkTypeCode */	"yotk*",
    /* yrpkPrincipal */	"",
    /* yrpkstring */	"char*",
    /* yrpkobjref */	"",
    /* yrpklonglong */	"sysb8"
  };


/* ---------------------------------------------------------------------- */
/*
 * yccOraPrimMap - mapping from yrpk to C language mapping representation
 *   using strict CORBA types.
 */
static CONST char* yccCorbaPrimMap[] =
  {
    /* yrpknull */	"",
    /* yrpkvoid */	"void",
    /* yrpkshort */	"CORBA_short",
    /* yrpklong */	"CORBA_long",
    /* yrpkushort */	"CORBA_unsigned_short",
    /* yrpkulong */	"CORBA_unsigned_long",
    /* yrpkfloat */	"CORBA_float",
    /* yrpkdouble */	"CORBA_double",
    /* yrpkboolean */	"CORBA_boolean",
    /* yrkpchar */	"CORBA_char",
    /* yrpkoctet */	"CORBA_octet",
    /* yrpkany */	"CORBA_any",
    /* yrpkTypeCode */	"CORBA_TypeCode",
    /* yrpkPrincipal */	"",
    /* yrpkstring */	"CORBA_char*",
    /* yrpkobjref */	"",
    /* yrpklonglong */	"CORBA_long_long"
  };

/* ---------------------------------------------------------------------- */
/*
 * yccGetPrimitiveName - generate the name of a primitive type as a string
 */
CONST char*  yccGetPrimitiveName( ycctx* ctx, yrpk kind)
{
  if ( ycStyleCORBA(ctx) )
    return yccCorbaPrimMap[kind];
  else
    return yccOraPrimMap[kind];
}


/* --------------------------------------------------------------------- */
/*
 * yccGenTypeCodeName - generate the name of a type code
 *
 * Most of the time, this is just the absolute name with a typecode
 * prefix, but primitives and CORBA::Object have predefined
 * typecode names that don't follow this pattern.
 */

void yccGenTypeCodeName( ycctx* ctx, yccfp* fp, yrobj* type)
{
  CONST char* tcpfx = yccTCPrefix(ctx);
  boolean oraNames = !ycStyleCORBA(ctx);

  switch (yrGetKind(type))
  {
    case yrdkAlias:
    case yrdkSequence:
    case yrdkStruct:
    case yrdkUnion:
    case yrdkEnum:
    {
      CONST char* name = yccGetAbsoluteName( ctx, type, (yrobj*)0);

      yccfpPrint( fp, "%s_%s", tcpfx, name);
      break;
    }
    case yrdkException:
    {
      CONST char* name = yccGetAbsoluteName( ctx, type, (yrobj*)0);

      yccfpPrint( fp, "%s_%s", tcpfx, name);
      if ( ctx->style & YCSTYLE_EXC )
        ysmGlbFree( (dvoid*) name);
      break;
    }
    case yrdkInterface:		/* special case magic type "Object" */
      if ( ycIsCorbaObject( ctx, type) ) 
        yccfpPrint( fp, "%sObject", oraNames ? "yoTc" : "TC_");
      else
      {
	CONST char* name = yccGetAbsoluteName( ctx, type, (yrobj*)0);

	yccfpPrint( fp, "%s_%s", tcpfx, name);
      }
      break;
    case yrdkPrimitive:
      switch (yrPrimData(type).kind)
      {
	case yrpknull:
	  yccfpPrint( fp, "%s", oraNames ? "yoTcNull" : "TC_null");
	  break;
	case yrpkvoid:
	  yccfpPrint( fp, "%s", oraNames ? "yoTcVoid" : "TC_void");
	  break;
	case yrpkshort:
	  yccfpPrint( fp, "%s", oraNames ? "yoTcShort" : "TC_short");
	  break;
	case yrpklong:
	  yccfpPrint( fp, "%s", oraNames ? "yoTcLong" : "TC_long");
	  break;
	case yrpkushort:
	  yccfpPrint( fp, "%s", oraNames ? "yoTcUshort" : "TC_ushort");
	  break;
	case yrpkulong:
	  yccfpPrint( fp, "%s", oraNames ? "yoTcUlong" : "TC_ulong");
	  break;
	case yrpkfloat:
	  yccfpPrint( fp, "%s", oraNames ? "yoTcFloat" : "TC_float");
	  break;
	case yrpkdouble:
	  yccfpPrint( fp, "%s", oraNames ? "yoTcDouble" : "TC_double");
	  break;
	case yrpkboolean:
	  yccfpPrint( fp, "%s", oraNames ? "yoTcBoolean" : "TC_boolean");
	  break;
	case yrpkchar:
	  yccfpPrint( fp, "%s", oraNames ? "yoTcChar" : "TC_char");
	  break;
	case yrpkoctet:
	  yccfpPrint( fp, "%s", oraNames ? "yoTcOctet" : "TC_octet");
	  break;
        case yrpkany:
	  yccfpPrint( fp, "%s", oraNames ? "yoTcAny" : "TC_any");
	  break;
        case yrpkTypeCode:
	  yccfpPrint( fp, "%s", oraNames ? "yoTcTypeCode" : "TC_TypeCode");
	  break;
	case yrpkstring:
	  yccfpPrint( fp, "%s", oraNames ? "yoTcString" : "TC_string");
	  break;
	case yrpklonglong:
	  yccfpPrint( fp, "%s", oraNames ? "yoTcLongLong" : "TC_long_long");
	  break;
	default:
	  yseThrow(YS_EX_FAILURE);
	  break;
      }
      break;
    case yrdkString:
      yccfpPrint( fp, "%s_string_%d", 
                  oraNames ? "YCTC" : "TC", yrStringData(type).bound);
      break;
    default:
      yseThrow(YS_EX_FAILURE);
      break;
  }
}


/* ---------------------------------------------------------------------- */
/*
 * yccEnvMap - Environment type name mapping, based on object adaptor
 */
static CONST char* yccEnvMap [] =
  {
    /* YCOA_COA */     "yoenv",
    /* YCOA_BOA */     "CORBA_Environment"
  };

/* ---------------------------------------------------------------------- */
/*
 * yccEnvPar - Returns the name of the environment param, based on
 *   object adaptor. This was done to make the code gen cleaner and
 *   in anticipation of a future OA for the media server.
 */

CONST char* yccEnvPar( ycctx* ctx)
{
  if ( ycStyleCORBA(ctx) )
    return yccEnvMap[YCOA_BOA];
  else
    return yccEnvMap[ctx->objAdaptor];
}

/* ---------------------------------------------------------------------- */
/*
 * yccGenSimpleName - Generate a simple name, allowing for the
 *   possibility it is a C/C++ keyword.
 */
void yccGenSimpleName( ycctx* ctx, yccfp* fp, CONST char* name)
{
  if ( (*ctx->lang->kwdchk)( ctx, name) )
    yccfpPrint( fp, "_%s", name);
  else
    yccfpPrint( fp, "%s", name);
}
