/* Copyright (c) Oracle Corporation 1995.  All Rights Reserved. */

/*
  NAME
    ydnmd.c
  DESCRIPTION

    ydnmd name server daemon.

  PUBLIC FUNCTIONS
    <x>
  PRIVATE FUNCTIONS
    <x>
  NOTES
    <x>
  MODIFIED   (MM/DD/YY)
    dbrower   10/13/95 -  created.
    dbrower   02/ 5/96 -  Bug 338412 -- fix ysInit name.
    dbrower   06/18/96 -  convert to ysRecord
    dbrower   10/11/96 -  interrupts, bug 411328; do remote logging.
    dbrower   10/23/96 -  don't remote log (unresolved NT problems)
*/

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
#ifndef YSR_ORACLE
#include <ysr.h>
#endif
#ifndef YSL_ORACLE
#include <ysl.h>
#endif
#ifndef YSV_ORACLE
#include <ysv.h>
#endif
#ifndef YT_ORACLE
#include <yt.h>
#endif
#ifndef YDU_ORACLE
#include <ydu.h>
#endif
#ifndef YDNM_ORACLE
#include <ydnm.h>
#endif
#ifndef YEEV_ORACLE
#include <yeev.h>
#endif

#define ENTRY_POINT ydnmdMain
#include <s0ysmain.c>

/* PRIVATE TYPES AND CONSTANTS */

#define YDNMD_FAC   "YDUT"

/*
 * Command-line Arguments -- none for now!
 */
static struct ysargmap ydnmdmap[] =
{
   { 0, (char *) 0, 0 }
};


STATICF void ydnmdServer(void);

/* PUBLIC FUNCTIONS */

/* ---------------------------- ydnmdMain ---------------------------- */
/*
  NAME
    ydnmdMain
  DESCRIPTION
    Main function for the ORB event channel daemon.
  PARAMETERS
    osdp    -- osd pointer
    nm	    -- program name string
    argc    -- arg count
    argv    -- argument vector.
  RETURNS
    TRUE on success, FALSE on error exit.

*/

boolean ydnmdMain(dvoid *osdp, char *nm, sword argc, char **argv)
{
  boolean   ok;
  sword     sts;
  char      vbuf[80];

  /* initialization */
  ysInit(osdp, nm);
  sts = ysArgParse(argc, argv, ydnmdmap);
  if (sts == YSARG_VERSION)
    {
      yslError("Oracle Media Exchange ORB Name Server");
      vbuf[0] = 0;
      yslError(ysVersion(vbuf, sizeof(vbuf)));
    }
  ok = (sts == YSARG_NORMAL);
  
  
  if (!ok)
    return(FALSE);
  
  yslDetach();			/* this is a daemon */
  
  yseTry
  {
    ytInit();
    yoInit();
    ydnmdServer();
  }
  yseCatch( YS_EX_INTERRUPT )
  {
  }
  yseCatchAll
    yslError("%s caught exception %s, exiting\n",
	     ysProgName(), ysidToStr(yseExid));
  yseEnd;

  yseTry
  {
    yoTerm();
    ytTerm();
  }
  yseCatchAll
    yslError("%s caught exception %s while exiting\n", ysProgName(), yseExid );
  yseEnd;
  ysTerm(osdp);
  return TRUE;
}

/* ---------------------------------------------------------------- */
/* PRIVATE FUNCTIONS */
/* ---------------------------------------------------------------- */


/* ---------------------------- ydnmdServer ---------------------------- */
/*
  NAME
    ydnmdServer
  DESCRIPTION
    Become the ydnmd event channel server.   Return when everything
    is shut down.
  PARAMETERS
    none
  RETURNS
    none
*/
STATICF void ydnmdServer(void)
{
  ydnmNamingContext nm;
  ysque	    *q = (ysque*)0;
  
  /* 1530, "ydnmdServer: Becoming ORBD Name Server Daemon" */
  ysRecord(YS_PRODUCT,YDNMD_FAC,(ub4)1530,YSLSEV_INFO,(char*)0, YSLNONE);

  /* init objects */

  nm = ydnmInit( q );

  /* do service loop */
  
  if( yoClaim( "yoir:NameService", (dvoid*)nm ) )
  {
    /* 1531, "ydnmdServer: Entering service loop" */
    ysRecord(YS_PRODUCT,YDNMD_FAC,(ub4)1531,YSLSEV_INFO,(char*)0,YSLNONE);

    yoService( q );

    /* 1532, "ydnmdServer: Exited service loop" */
    ysRecord(YS_PRODUCT,YDNMD_FAC,(ub4)1532,YSLSEV_INFO,(char*)0,YSLNONE);
    
    yoAbandon( "yoir:NameService" );
  
    /* 1533, "ydnmdServer: terminating object services" */
    ysRecord(YS_PRODUCT,YDNMD_FAC,(ub4)1533,YSLSEV_INFO,(char*)0, YSLNONE );
    
  }
  else
  {
    /* 1534, "ydnmdServer: Didn't get claim on yoir:NameService, exiting" */
    ysRecord(YS_PRODUCT,YDNMD_FAC,(ub4)1534,YSLSEV_INFO,(char*)0, YSLNONE );
  }
  ydnmTerm( nm );

  /* 1535, "ydnmdServer: ready to exit" */
  ysRecord(YS_PRODUCT,YDNMD_FAC,(ub4)1535,YSLSEV_INFO,(char*)0, YSLNONE );
}

