/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * ysfe.h - Filter Expression Evaluator
 */

#ifndef YSFE_ORACLE
#define YSFE_ORACLE

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif

EXTC_START

/*
 * ysFECompile, ysFEFree, ysFEEval - filter expression evaluation
 *
 * DESCRIPTION
 * ysFECompile() compiles a filter expression and returns a compiled
 * form of that expression suitable for use with ysFEEval().  If there
 * is an error during compilation, a null pointer is returned.
 *
 * The maps parameter passed to ysFECompile() is an array of nmap elements
 * defining the legal names in the filter expression.  Names may be either
 * predicates or variables.
 *
 * ysFEFree() frees a compiled filter expression previously returned by
 * ysFECompile().
 *
 * ysFEEval() evaluates the compiled filter expression.  The filter
 * expression may contain references to variables that need to be
 * tested.  The values for these variables are supplied in the vals
 * array containing nval elements.
 *
 * What follows is the syntax of filter expressions:
 *
 *   expr ::= and-expr { or and_expr }
 *   or ::= "OR" | ","
 *   and-expr ::= primary { [ "AND" ] primary }
 *   primary ::= "NOT" primary | predicate literal | relop-expr | "(" expr ")"
 *   relop-expr ::= variable relop literal
 *   relop ::= "<" | "<=" | "==" | "!=" | ">=" | ">"
 *   literal ::= unquoted-string | quoted-string
 *
 * All whitespace is ignored, except as a token separator.  variable and
 * predicate are identifiers, following C syntax.  An unquoted-string means
 * that any unrecognized word (bounded by spaces, parentheses, commas and
 * relational operators) constitutes a single string.  A quoted-string is
 * a string that contains any character between two quotes (").
 *
 * Valid predicate and variable names are defined by the sub-system
 * processing the filter expression.
 */
typedef struct ysfe ysfe;
typedef struct ysfemap ysfemap;

ysfe   *ysFECompile(CONST char *srcexpr, sword nmap, CONST ysfemap *maps);
void    ysFEFree(ysfe *fe);
boolean ysFEEval(ysfe *fe, sword nval, dvoid **vals);

/*
 * ysfemap - filter expression map
 *
 * DESCRIPTION
 * The filter expression map is used to map names of variables and predicates
 * onto functions used to process them.
 *
 * Name
 *   The nm field specifies the name of the variable or predicate.
 *
 * Value Index
 *   Whether variable or predicate, names are all said to have an associated
 *   value during the evaluation of the expression.  The vidx specifies the
 *   index into the vals array passed to ysFEEval() where the value is found.
 *
 * Parsing
 *   The parsecb is invoked to parse a string literal that is being compared
 *   to the given variable or tested by the given predicate.  The routine
 *   should return a pointer to allocated memory containing the parsed value.
 *   If an error occurs during a parse, return a null pointer instead.  If
 *   no parse routine is supplied, the value is simply the string literal
 *   itself (char *).  (freecb should be null, and either predcb should be
 *   ysFEStrPred() or relopcb should be strcmp.)
 *
 *   When the compiled expression is freed, the freecb will be invoked to
 *   free the pointer previously returned by parsecb.  If null, ysmGlbFree()
 *   will be used.
 *
 * Evaluation
 *   Either predcb or relopcb (but not both) must be supplied for evaluation.
 *   A non-null value in the predcb field indicates a predicate.  v1 is the
 *   literal value, v2 is the value taken for the vals array.
 *
 *   A non-null value in the relopcb field indicates a variable.  v1 is the
 *   value taken from the vals array, and v2 is the literal value.
 */
struct ysfemap
{
  CONST char *nm;                              /* name of variable/predicate */
  ub1       vidx;                 /* index into the variable array for value */
  dvoid  *(*parsecb)(CONST char *str);                     /* parse callback */
  void    (*freecb)(dvoid *val);                            /* free callback */
  boolean (*predcb)(CONST dvoid *v1, CONST dvoid *v2); /* predicate callback */
  sword   (*relopcb)(CONST dvoid *v1, CONST dvoid *v2);  /* compare callback */
};

#define ysFEDfltParse (dvoid *(*)(CONST char *)) 0
#define ysFEDfltFree  (void (*)(dvoid *)) 0
#define ysFENoPred    (boolean (*)(CONST dvoid *, CONST dvoid *)) 0
#define ysFENoRelop   (sword (*)(CONST dvoid *, CONST dvoid *)) 0

/*
 * ysFEIntParse, ysFEIntFree - integer literal support
 *
 * DESCRIPTION
 * These routines may be used for simple unsigned integer literal support.
 * An unsigned integer is a decimal, hexidecimal, or octal string of digits
 * following the usual C-style syntax.
 *
 * ysFEIntParse() must be used for the parsecb.  It returns a (ub4 *).
 * ysFEIntRelop() may be used for the relopcb where a simple comparison
 * between two integers is desired.
 */
dvoid *ysFEIntParse(CONST char *str);
sword ysFEIntRelop(CONST dvoid *v1, CONST dvoid *v2);

/*
 * ysFEStrPred - string predicate support
 *
 * DESCRIPTION
 * ysFEStrPred() is a routine suitable for treating a string as a value
 * for a predicate.
 */
boolean ysFEStrPred(CONST dvoid *v1, CONST dvoid *v2);

EXTC_END
#endif /* YSFE_ORACLE */
