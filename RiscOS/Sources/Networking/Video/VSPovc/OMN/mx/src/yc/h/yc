/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yc.h - IDL Compiler Definitions
 *
 * HISTORY
 * 09/27/96 kcoleman	Add language mapping contexts
 * 07/24/96 kcoleman	Add an IFR-based symbol table
 * 07/03/96 kcoleman	Remove C and C++ code decls to separate files
 * 06/06/96 kcoleman	Bug 369357: Revamp I/O to limit line length
 * 03/22/96 kcoleman	Static typecode generation
 * 02/05/96 kcoleman	Support for CORBA 2.0 stubs
 * 11/17/95 dpranke     add yci prototypes (ITL language mapping)
 * 11/07/95 kcoleman	Implement distinct Oracle and ANSI naming styles
 * 11/02/95 kcoleman	Added object adaptor selector to context
 * 07/28/95 kcoleman	Added ycgobj ycsAddObj.
 * xx/xx/95 jolkin	Creation.
 */

#ifndef YC_ORACLE
#define YC_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSC_ORACLE
#include <ysc.h>
#endif
#ifndef YSR_ORACLE
#include <ysr.h>
#endif
#ifndef SYSFP_ORACLE
#include <sysfp.h>
#endif
#ifndef YSLOG_ORACLE
#include <yslog.h>
#endif
#ifndef YR_ORACLE
#include <yr.h>
#endif
#ifndef YCOTOK_ORACLE
#include <ycotok.h>
#endif
#ifndef YCOSYN_ORACLE
#include <ycosyn.h>
#endif
#ifndef YCCFP_ORACLE
#include <yccfp.h>
#endif

/* WinNT has this inconviently defined in a header we include; remove here */
#undef interface

/* ---------------------------------------------------------------------- */
/*
 * ycfile - output file descriptor type
 *
 * See ycutil.c for details.
 */
struct ycfile_t
{
  char target[SYSFP_MAX_PATHLEN];          /* final output file name */
  char newtmp[SYSFP_MAX_PATHLEN];          /* new output file tmp name */
  char oldtmp[SYSFP_MAX_PATHLEN];          /* old version of target file */
  boolean exists;
};
typedef struct ycfile_t ycfile;


/* ---------------------------------------------------------------------- */
/*
 * Internal Objects
 */
typedef struct ycctx ycctx;                       /* global compiler context */
typedef struct ycln ycln;                                       /* text line */

externref ysidDecl(YC_EX_NOTFOUND);
externref ysidDecl(YC_EX_SYNTAX);
externref ysidDecl(YC_EX_RECURSION);
externref ysidDecl(YC_EX_FAILURE);

/* ---------------------------------------------------------------------- */
/* Error Reporting                                                        */
/* ---------------------------------------------------------------------- */

             /* Product name for error reporting. See yslog.h */
#define YC_PROD "OMN"
             /* Facility name for error reporting. See yslog.h */
#define YC_FAC "IDLC"
             /* Error message number base. See OMNIDLC.msg */
#define YCMSG_BASE ((ub4) 5000)
             /* Short cut for all the stuff on the front of ysRecord call */
#define YCMSG(num)   YC_PROD, YC_FAC, (YCMSG_BASE + (ub4)(num))
             /* Safe expansion of line number information, where appropriate */
#define YCERRLN(ln) YSLSTR(ln ? (ln)->name:""), YSLSB4(ln?(sb4)(ln)->line:0)

             /* Slime together the severity level and the unused association */
#define YCERRSEV YSLSEV_ERR, (char*)0
#define YCWARNSEV YSLSEV_WARNING, (char*)0
#define YCINFOSEV YSLSEV_INFO, (char*)0
  /* 
   * Filter out everything except compiler msgs of at least the 
   * given severity...without squashing errors/warnings from other components.
   *
   * Obviously, this macro definition is fluffy in that you'd better pass
   * in a simple integer literal for the severity, but it allows us to
   * change the filter readily based on the verbosity and tracing flags.
   */
#define YC_MSG_FILTER(sev) \
      "(not fac " YC_FAC " and maxsev 4) or " \
      "(prod " YC_PROD " fac " YC_FAC " maxsev " #sev ")"

  /* Callback from ysRecord, for tracking error count, etc. */
void ycRecordCB( dvoid* usrp, yslrec* rec);

/* ---------------------------------------------------------------------- */
/*
 * ycgobj - a code gen object
 *
 * Encapsulates a yrobj for which we need to generate code, plus
 * any meta data.
 */
#define YCG_DEFN 0	/* default - gen a definition */
#define YCG_FWD 1	/* generate only a forward decl */
struct ycgobj
{
  yrobj* ifrobj;        /* corresponding IFR object */
  ub4 flags;		/* YCG_* */
  yslst* objlist;       /* for modules and potentially other containers */
};
typedef struct ycgobj ycgobj;


/* ---------------------------------------------------------------------- */
/*
 * Object Adaptors
 *
 * The compiler will generate stubs for either CORBA's Basic Object
 * Adaptor (BOA) or the OMX Common Object Adaptor (COA). COA is the
 * default; the user can select something else via -a.
 *
 * These are not bit masks. For each new OA, increment the value and
 * update yccEnvMap in yccname.c.
 */
#define YCOA_COA 0
#define YCOA_BOA 1


/* ---------------------------------------------------------------------- */
/*
 * YCSTYLE_* - naming styles
 *
 * The naming style determines things like whether or not we use strict
 * CORBA compliant names or Oracle names (CORBA_long vs. sb4), and
 * whether or not we allow dependencies on internal Oracle definitions
 * such as those found in sysi.h (dvoid, STATICF, NOREG, etc.).
 *
 *   YCSTYLE_ORA   - Oracle naming. Uses OCCS names and macros
 *   YCSTYLE_ANSI  - Default. Uses OCCS type names, but only the public
 *                   interfaces. Everything else uses ANSI C/C++ usage
 *                   (e.g. volatile instead of noreg).
 *   YCSTYLE_CORBA - CORBA compliant names. CORBA_long rather than sb4,
 *                   CORBA_sequence_blah rather than YCIDL_sequence_blah,
 *                   ex_foo rather than EX_FOO.
 *
 * The flag YCSTYLE_EXC may be ORed with any of the language mapping styles
 * to get the name formatting that is specific for exception names.
 *
 * These are bit flags, not an enumeration. YCSTYLE_CORBA is not yet
 * implemented.
 */
#define YCSTYLE_ANSI    0
#define YCSTYLE_ORA     1
#define YCSTYLE_CORBA   2
#define YCSTYLE_EXC     32

/*
 * All the macros are equivalent to functions of the form:
 *
 *    boolean ycStyleFoo( ycctx* ctx);
 */
#define ycStyleOra(ctx) (((ctx)->style & YCSTYLE_ORA) ? TRUE : FALSE )
#define ycStyleANSI(ctx) (((ctx)->style & YCSTYLE_ANSI) ? TRUE : FALSE )
#define ycStyleCORBA(ctx) (((ctx)->style & YCSTYLE_CORBA) ? TRUE : FALSE )
#define ycStyleExc(ctx) (((ctx)->style & YCSTYLE_EXC) ? TRUE : FALSE )

/* ---------------------------------------------------------------------- */
/*
 * CORBA version numbers
 *
 * The compiler can generate stubs for the following versions of the
 * OMG CORBA specification:
 *
 *   1.2    (current default, C only)
 *   2.0    (C only)
 *
 * This is controlled by the setting of mnidlc.corba-vers. The effect it
 * has depends on the language mapping. These values are not bit masks;
 * increment by one each time you add a new supported version.
 *
 * This setting never affects code generation when using the COA rather
 * than the BOA.
 */

#define YCORB_1_2 0
#define YCORB_2_0 1

/*
 * ycCORBA1_2 - Are we generating CORBA 1.2 style stubs?
 *
 * For now, just depends on the CORBA version. Leave macro around
 * because there is some question about how the CORBA 2.0 changes
 * will impact the COA; we think the COA will use CORBA 2.0 as well,
 * but it may not.
 *
 * boolean ycCORBA1_2( ycctx* ctx);
 */
#define ycCORBA1_2(ctx)   ( (ctx)->corbaVers <= YCORB_1_2 )

/* ---------------------------------------------------------------------- */
/*
 * Language Mapping identifiers
 *
 * One for each code gen language supported by the compiler. They're
 * set on the context by the various code gen drivers, such as yccmap.
 */
typedef sword yclangid;
#define YCG_C_LANG ((yclangid)0)
#define YCG_CPLUS_LANG ((yclangid)1)
#define YCG_ITL_LANG ((yclangid)2)

/* --------------------------------------------------------------------- */
/*
 * ycgmap - Encapsulation of a language mapping.
 *
 * Each language mapping supported by the compiler is required to 
 * provide a function which returns an appropriate ycgmap object
 * and which is callable from ycmain.c. This is done with callbacks
 * rather than some kind of global constant data because of the possibility
 * that parts of the compiler may be built as shared libs and as such 
 * functions from there cannot be used in a static initializer.
 */

typedef void (*ycgdrvfp)( ycctx*);                 /* top level driver */
typedef boolean (*ycgkwdfp)( ycctx*, CONST char*);    /* keyword testing */
typedef struct
{
  yclangid langid;            /* code gen language */
  ycgdrvfp driver;            /* top level code gen driver */
  ycgkwdfp kwdchk;            /* keyword checker */
  ub4 flags;                  /* language specific flags */
} ycgmap;

/* --------------------------------------------------------------------- 
 * Symbol Table Declarations
 * --------------------------------------------------------------------- */

/*
 * yccsym - C language mapping specific symbol table information
 *
 * Fields:
 *   absnm        Absolute name as it appears in generated code. That is,
 *                "A_B" for some "::A::B".
 */
struct yccsym
{
  CONST char* absnm;
};
typedef struct yccsym yccsym;

/*
 * yccpsym - C++ language mapping specific symbol table information
 *
 * Fields;
 *   simplenm      Type name within its own scope, e.g. "A"
 *   scopednm      Type name outside its own scope, e.g. "B::A"
 *   ppfx          Parent scope prefix, e.g. "B"
 *   flatnm        Flattened name, e.g."B_A"
 *   union_dflt    Union needs _default? -1 = no, 1 = yes, 0 = unset
 */

struct yccpsym
{
  CONST char* simplenm;      /* name in defining scope, "B" */
  CONST char* scopednm;      /* fully scoped name at global scope, "A::B" */
  CONST char* ppfx;          /* parent scope prefix to absnm, "A" */
  CONST char* flatnm;        /* flattened name, "A_B" */
  sword union_dflt;          /* union needs _default? -1 no, 1 yes, 0 unset */
};
typedef struct yccpsym yccpsym;

/*
 * ycsym, ycsymtbl - Symbol table
 *
 * Fields:
 *   ifrobj        IFR object tied to this ycsym
 *   pragmas       Pragmas associated with this sym (see ycsemprg.c)
 *   opsNattrs     List of ops and attrs, grouped by interface
 *   lang          Language mapping specific information (see above)
 *
 * The ops and attrs are accrued here because it is often useful for the
 * code generators to have access to a guaranteed ordering of them all.
 * This is arranged such that all ops and attrs for a give base interface
 * are consecutive. No particular ordering between base interfaces is
 * implied - it depends on the IFR.
 *
 * NOTE: Each language mapping code generator is expected to clean up
 * its own data.
 */
struct ycsym
{
  yrobj* ifrobj;
  yslst* pragmas;
  yslst* opsNattrs;
  sword isVarType;         /* -1 = false, 0 = unset, 1 = true */
  union
  {
    yccsym c;
    yccpsym cplus;
  } lang;
};
typedef struct ycsym ycsym;
typedef yshsh ycsymtbl;
typedef yshshwcb ycsymwcb;

/* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- */
/*
 * Global Compiler Context
 *
 * One of these is passed throughout the compiler. Parts are only used
 * for preprocessing and parsing, parts are only used for code gen. In
 * the future, we might want to consolidate this...
 *
 * errcnt, wrncnt	error and warning counts, used throughout compile
 * nms			Files we've used, including include files
 * tu			Translation unit - list of source lines
 * mdtbl		Macro symbol table (#defines), pre-processing only
 * mdexp		used during preprocessing only
 * curln		ycln - points into <tu>. Used during pp and parse.
 * pos			Column position in <curln>
 * tokq			Pushback queue for parsing
 * lastTok		Last token parsed. Leaks otherwise.
 * root			Top of the AST's constructed during parse, not
 * 			used after semantic analysis
 * srcnm		Input IDL file name. Used during code gen.
 * newobjs		List of IFR objects for which to generate code.
 * seqs			List of sequences for which to generate code.
 *			Need this because seqs get generated first.
 * repository		Pointer to the repository we're compiling into
 * scopes		Scope stack. Used during code generation.
 * style		Naming style. Currently only CORA is supported.
 * objAdaptor		Indicates whether to gen COA or BOA code. Affects
 *			the internals of the generated stubs.
 * corba_object		Cached pointer to IFR representation of CORBA::Object.
 *			Users can refer to it in their code, but we don't
 *			generate type codes, etc. for it.
 * corbaVers            Version of CORBA spec we're generating code for
 * langctx              Lang mapping context. Used only by code generators.
 */
/* DISABLE check_naming */
struct ycctx
{
  sword  errcnt;           /* number of errors detected */
  sword  wrncnt;           /* number of warnings detected */
  yslst* cgmaps;           /* code gen lang map - ycgmap's */

  yslst *nms;              /* filenames allocated during scan */
  yslst *tu;               /* current translation unit */
  yshsh *mdtbl;            /* macro definition table */
  yslst *mdexp;            /* macro expansion list for line (queue of ycsup) */

  ysle  *curln;            /* current line in translation unit */
  sword  pos;              /* current position in current line */
  yslst *tokq;             /* token pushback queue */
  pxtokn* lastTok;         /* Last token. SLAX doesn't call back. */
  yslst *root;             /* root of AST tree from parse */
  sword inpragma;          /* are we parsing a pragma? */

  char* srcnm;             /* input source file name cached here */
  ycsymtbl* symtbl;        /* symbol table */
  yslst *newobjs;          /* list of objs to gen code for, ycgobj's */
  yslst *seqs;             /* list of sequences to gen decls for, yrobj */
  yrobj *repository;       /* cached repository object */
  yslst* scopes;           /* scope stack, ycgscope - see ycutil.c */
  sword  style;            /* naming style */
  sword corbaVers;         /* CORBA spec version # (1.2, 2.0, etc.) */
  sword objAdaptor;        /* Object Adaptor we're gen'ing code for */
  ub4 tmpfn;               /* unique tmp file name tag for all output */
  yrobj* corba_object;     /* Pointer to CORBA::Object in IFR */
  ycgmap* lang;            /* Current code gen language */
  dvoid* langctx;          /* optional language-specific context info */
};
/* ENABLE check_naming */


/* --------------------------------------------------------------------- */
/*
 * Data structures to support pragmas. Currently, this is only needed for
 * the IAO server template code gen pragmas
 */

enum ycprg_kind 
{ 
  ycprg_none, 
  ycprg_all, 
  ycprg_dbAttr, 
  ycprg_dbCreate, 
  ycprg_dbList 
};
typedef enum ycprg_kind ycprg_kind;

struct ycprg
{
  ycprg_kind kind;
  union
  {
    CONST char* key;         /* IAO_DB_ATTR - column attr maps to */
    yslst* mapping;          /* IAO_DB_CREATE - list of ycprgpar */
  } data;
};
typedef struct ycprg ycprg;

struct ycprgpar
{
  yrpar* par;
  CONST char* key;
};
typedef struct ycprgpar ycprgpar;

/* --------------------------------------------------------------------- */
/*
 * ycIsEnumConst
 *
 *   boolean ycIsEnumConst( yrobj*);
 *
 * Is this object an enumerator? e.g. a constant with enum type
 */
#define ycIsEnumConst(obj) \
    (((obj)->tag == yrdkConstant) && ((obj)->data.cval.type->tag == yrdkEnum))

/* --------------------------------------------------------------------- */

/*
 * ycIsCorbaObject - Is this a ref to CORBA::Object?
 *
 *   boolean ycIsCorbaObject( ycctx*, yrobj*);
 */
#define ycIsCorbaObject(ctx, intf) ((intf) == (ctx)->corba_object)

/* --------------------------------------------------------------------- */
/*
 * ycIsEmptyLst - is this an empty yslst?
 *
 *   boolean ycIsEmptyLst( yslst*);
 *
 * ysLstCount is not null pointer safe and I'm tired of explicitly
 * checking both things everywhere, so wrap it up.
 */

#define ycIsEmptyLst(lst) (!(lst) || (ysLstCount((lst)) == 0))

/* --------------------------------------------------------------------- */

#ifndef YCPP_ORACLE
#include <ycpp.h>
#endif
#ifndef YCOTRE_ORACLE
#include <ycotre.h>
#endif
#ifndef PXTABLE
#include <pxslax.h>
#endif

/*
 * Front End Routine Declarations
 */
boolean ycMain(dvoid *osdp, char *nm, sword argc, char **argv);
void ycprs(ycctx *ctx);
void ycsem(ycctx *ctx);
void ycgen(ycctx *ctx);
  /* prototypes for some of the generated funcs */
void px_ycos (pxnmach *mach, ub2 prod, void *cs);
void ycopxcrt(int, ub2, void*, sb2, pxtokn* (*)(void *, int, ...),
              int (*kywd)(void *, sb2, pxtokn * ), pxnmach*, char*);

ycgmap* yccLangMap( ycctx* ctx);
ycgmap* yciLangMap( ycctx* ctx);
ycgmap* yccpLangMap( ycctx* ctx);

/*
 * ycsem.c
 */
void ycsDefn(ycctx *ctx, yrobj *scope, yctDefinition *defn);
void ycsExceptDcl(ycctx *ctx, yrobj *scope, yctExceptDcl *ed);
void ycsModule(ycctx *ctx, yrobj *scope, yctModule *m);
boolean ycsNewDef(ycctx *ctx, yrobj *scope, CONST char *name, ycln *ln);
yrobj *ycsLookup(ycctx *ctx, yrobj *scope, yctScopedName *sn);
yrobj *ycsNameToType(ycctx *ctx, yrobj *scope, yctScopedName *sn);
yrobj *ycsNameToConst(ycctx *ctx, yrobj *scope, yctScopedName *sn);
void ycsPrintDef(ycctx *ctx, ycln *ln, yrobj *obj);
char *ycsPrintScoped(ycctx *ctx, yctScopedName *sn);
yotkKind ycsGetTypeKind(ycctx *ctx, yrobj *type);
void ycsAddObj( ycctx* ctx, yrobj* scope, yrobj* newobj);
void ycsymDestroy( dvoid* data);
void ycsKeywordChk( ycctx* ctx, CONST char* name, ycln* ln);

/*
 * ycsemty.c
 */
void ycsTypeDcl(ycctx *ctx, yrobj *scope, yctTypeDcl *td);
void ycsTypeDecl(ycctx *ctx, yrobj *scope, yctTypeDeclarator *td);
void ycsCreateAlias(ycctx *ctx, yrobj *scope, CONST char *id, yrobj *type,
		    dvoid *usrp, ycln* lninfo);
yrobj *ycsStructType(ycctx *ctx, yrobj *scope, yctStructType *st);
void ycsCreateMember(ycctx *ctx, yrobj *scope, CONST char *id, yrobj *type,
		     dvoid *usrp, ycln* lninfo);
yrobj *ycsUnionType(ycctx *ctx, yrobj *scope, yctUnionType *ut);
void ycsProcDecls(ycctx *ctx, yrobj *scope, yctTypeSpec *ts, yslst *decls,
		  dvoid *usrp,
		  void (*crt)(ycctx *ctx, yrobj *scope, CONST char *id,
			      yrobj *type, dvoid *usrp, ycln* lninfo));
yrobj *ycsEnumType(ycctx *ctx, yrobj *scope, yctEnumType *et);
yrobj *ycsSwitchType(ycctx *ctx, yrobj *scope, yctSwitchTypeSpec *ts);
yrobj *ycsTypeSpec(ycctx *ctx, yrobj *scope, yctTypeSpec *ts);
yrobj *ycsSimpleTypeSpec(ycctx *ctx, yrobj *scope, yctSimpleTypeSpec *st);
yrobj *ycsBaseTypeSpec(ycctx *ctx, yrobj *scope, yctBaseTypeSpec *bt);

/*
 * ycsemco.c
 */
void ycsConstDcl(ycctx *ctx, yrobj *scope, yctConstDcl *cd);
yrobj *ycsConstType(ycctx *ctx, yrobj *scope, yctConstType *ct);
ub4 ycsPosIntExpr(ycctx *ctx, yrobj *scope, yctOrExpr *exp);
boolean ycsEvalExpr(ycctx *ctx, yrobj *scope, yoany *val, yotkKind expected,
		    yctOrExpr *exp);
void ycsOrExpr(ycctx *ctx, yrobj *scope, boolean *sgnd,
	       sb4 *sval, ub4 *uval, yctOrExpr *exp);
void ycsXorExpr(ycctx *ctx, yrobj *scope, boolean *sgnd,
	       sb4 *sval, ub4 *uval, yctXorExpr *exp);
void ycsAndExpr(ycctx *ctx, yrobj *scope, boolean *sgnd,
		sb4 *sval, ub4 *uval, yctAndExpr *exp);
void ycsShiftExpr(ycctx *ctx, yrobj *scope, boolean *sgnd,
		  sb4 *sval, ub4 *uval, yctShiftExpr *exp);
void ycsAddExpr(ycctx *ctx, yrobj *scope, boolean *sgnd,
		sb4 *sval, ub4 *uval, yctAddExpr *exp);
void ycsMultExpr(ycctx *ctx, yrobj *scope, boolean *sgnd,
		sb4 *sval, ub4 *uval, yctMultExpr *exp);
void ycsUnaryExpr(ycctx *ctx, yrobj *scope, boolean *sgnd,
		  sb4 *sval, ub4 *uval, yctUnaryExpr *exp);
void ycsPrimaryExpr(ycctx *ctx, yrobj *scope, boolean *sgnd,
		    sb4 *sval, ub4 *uval, yctPrimaryExpr *exp);
ub4 ycsGetNumber(ycctx *ctx, ycln *ln, char *num);

/*
 * ycsemif.c
 */
void ycsInterface(ycctx *ctx, yrobj *scope, yctInterface *intf);
void ycsExport(ycctx *ctx, yrobj *scope, yctExport *ex);
void ycsAttrDcl(ycctx *ctx, yrobj *scope, yctAttrDcl *attr);
void ycsOpDcl(ycctx *ctx, yrobj *scope, yctOpDcl *op);
yrobj *ycsParamTypeSpec(ycctx *ctx, yrobj *scope, yctParamTypeSpec *pts);


/*
 * ycifr.c
 */
void ycDumpIFR( ycctx* ctx);

/*
 * ycprfree.c
 */
void ycfDefns( yslst* defns);

/*
 * ycsemprg.c
 */

void ycprgDestroy( dvoid* data);
void ycprgparDestroy( dvoid* data);
void ycsPragma( ycctx* ctx, yrobj* scope, yctPragma* prg);

/*
 * ycutil.c
 */
char* ycToUpper( char* in);
yrobj* ycgScope( ycctx*);
void ycgPushScope( ycctx* ctx, yrobj* scope);
yslst* ycgPopScope( ycctx* ctx);
void ycgNewScopeStack( ycctx* ctx);
void ycgDestroyScopeStack( ycctx* ctx);
boolean ycgScopeDefer( ycctx* ctx, yrobj* obj);
ub4 ycgScopeModuleDepth( ycctx* ctx);
yrobj* ycgScopeLookup( ycctx* ctx, yrdk kind);
boolean ycgInherited( ycctx* ctx, yrobj* obj);
boolean ycShouldGenCode( ycctx* ctx, yrobj* obj);
void ycgObjDestroy( dvoid* obj);
boolean ycFileInit( ycfile* files, ub4 count, CONST char* path);
void ycFileRename( ycfile* files, ub4 count);
char* ycStrLitToString( ycctx* ctx, yslst* strs);
dvoid* ycAllocTC(size_t len);

/*
 * ycsym.c
 */

ycsymtbl* ycSymTblCreate();
void ycSymTblDestroy( ycsymtbl* tbl);
ycsym* ycSymLookup( ycsymtbl* tbl, yrobj* ifrsym);
ycsym* ycSymInsert( ycsymtbl* tbl, yrobj* ifrsym);
void  ycSymRemove( ycsymtbl* tbl, yrobj* ifrsym);
void ycSymTblFlush( ycsymtbl* tbl, ycsymwcb callback, dvoid* usrp);
void ycSymTblReport( ycsymtbl* tbl);

#endif /* YC_ORACLE */
