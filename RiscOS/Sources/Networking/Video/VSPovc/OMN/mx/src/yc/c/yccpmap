/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * yccpmap.c - driver for generation of C++ output
 *
 * NOTES
 * This file contains both the main driver for C++ stub generation (yccpmap),
 * and utility functions useful to all phases of the code gen (header,
 * client and server stubs).
 *
 * HISTORY
 * 07/11/96 kcoleman	Handle C++ keywords as IDL identifiers
 * 07/04/96 kcoleman	Use yccfp for indentation
 * 06/06/96 kcoleman    Bug 369357: Revamp I/O to limit line length
 * 04/08/96 kcoleman	Use ysRecord for error reporting.
 * 02/26/96 kcoleman	Creation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCCP0_ORACLE
#include <yccp0.h>
#endif
#ifndef YSL_ORACLE
#include <ysl.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif


STATICF boolean yccpSymFlush( dvoid* usrp, dvoid* elm);
STATICF void yccpmap(ycctx *ctx);

STATICF void yccpmap(ycctx *ctx)
{
  char  base[SYSFP_MAX_PATHLEN];
  CONST char* path;
  CONST char* hdr_suffix;
  CONST char* src_suffix;
  ub4 baselen;
  ycfile* noreg files;
  noreg ub4 fcount;
  boolean hdronly, tmpl;
  ub4 hdridx, clntidx, srvridx, thidx, tcidx;

  NOREG(files);
  NOREG(fcount);
  hdridx = clntidx = srvridx = thidx = tcidx = (ub4)0;

    /***** Figure out how many output files we have *****/
  fcount = (ub4) 1;
  hdridx = (ub4) 0;
  if ( !(hdronly = ysResGetBool("mnidlc.header-only")) )
  {
    clntidx = (ub4) fcount++;
    srvridx = (ub4) fcount++;
  }
  if ( (tmpl = ysResGetBool("mnidlc.server-template")) )
  {                                    /* order matters here - see yccptmpl */
    thidx = (ub4) fcount++;
    tcidx = (ub4) fcount++;
  }

    /***** Set up output file descriptors *****/
  sysfpExtractBase(base, ctx->srcnm);
  baselen = strlen(base);
  path = ysResGetLast("mnidlc.outputpath");
  hdr_suffix = ysResGetLast( "mnidlc.header-suffix");
  if ( !hdr_suffix )
    hdr_suffix = YC_CPHEADER;
  src_suffix = ysResGetLast( "mnidlc.source-suffix");
  if ( !src_suffix )
    src_suffix = YC_CPSOURCE;

  files = (ycfile*) ysmGlbAlloc(sizeof(ycfile) * fcount, "ycfile");
  sysfpForm(files[hdridx].target, path, base, hdr_suffix);
  if ( !hdronly )
  {
    base[baselen] = 'C';
    base[baselen+1] = '\0';
    sysfpForm(files[clntidx].target, path, base, src_suffix);
    base[baselen] = 'S';
    sysfpForm(files[srvridx].target, path, base, src_suffix);
  }
  if ( tmpl )
  {
    base[baselen] = 'I';
    base[baselen+1] = '\0';
    sysfpForm(files[thidx].target, path, base, hdr_suffix);
    sysfpForm(files[tcidx].target, path, base, src_suffix);
  }
  if ( !ycFileInit( (ycfile*)files, (ub4)fcount, path) )
  {                                         /* unable to set up output files */
    ysmGlbFree((dvoid*)files);
    return;
  }

  yseTry
  {
      /***** generate output *****/
    base[baselen] = '\0';
    yccphdr(ctx, base, &files[hdridx]);

#ifdef NOT_YET
    if ( tmpl )
      yccptmpl(ctx, base, &filex[thidx]);
#endif

    if ( !hdronly )
    {
      yccpclnt(ctx, base, &files[clntidx]);
#ifdef NOT_YET
      yccpsrv(ctx, base, &files[srvridx]);
#endif
    }
    ycSymTblFlush( ctx->symtbl, (ycsymwcb)yccpSymFlush, (dvoid*)0);
    ycFileRename((ycfile*)files, (ub4)fcount);
  }
  yseCatchAll
  {
    CONST char* fn;
    sword ln;
    ub4 i;

    yseGetLoc(&fn, &ln);
    ysRecord( YCMSG(0), YCERRSEV, YSLSTR(ysidToStr(yseExid)), 
              YSLSTR(fn), YSLSB4(ln), YSLEND);
    for ( i = (ub4)0; i < (ub4)fcount; i++)
      DISCARD sysfpRemove(files[i].newtmp);
  }
  yseEnd
  ysmGlbFree((dvoid*)files);
}


/* ----------------------------------------------------------------------- */
/*
 * yccpGenTypeCode - generate TypeCode decl/defn for an IDL type
 *
 * Unlike the C mapping declaration, we recalculate the type name here
 * because it is specifically the type name as it appears in the parent
 * scope of the type. For example,
 *
 *   interface foo { struct bar {...}; };
 *
 *   class foo
 *   {
 *     static CORBA::TypeCode_ptr _tc_bar;
 *   };
 *
 *   CORBA::TypeCode_ptr foo::_tc_bar = ...;
 *
 * If declared at the level of a module, the name is:
 *
 *   <module-prefix>_tc_<name>
 *
 * To correspond to the way it will work when used with namespace.
 * (The CORBA spec doesn't address this issue).
@@ CORBA says this is a constant, we really need a function...
@@ external or internal linkage?
 */

void yccpGenTypeCode( ycctx* ctx, yccfp* fp, yrobj* type, CONST char* name, 
                      boolean defn)
{
  if ( defn )
  {
    CONST char* parent = yccpParentPrefix( ctx, type);

    yccfpPrint( fp, "%s%sTypeCode_ptr %s_tc_%s", 
                YCCEXREF(ctx), YCP_CORBA(ctx), parent ? parent : "",  name);
  }
  else
  {
    yccfpPrint( fp, "%s%sTypeCode_ptr _tc_%s;\n", 
                yccpInClassScope( ctx, type) ? "static " : YCCEXREF(ctx),
                YCP_CORBA(ctx), name);
  }
}

/* ----------------------------------------------------------------------- */
/*
 * yccpGenAnyFuncDecls - Generate Insertion (<<=) and Extraction (>>=)
 *    between CORBA::Any and a user-defined type.
 */

void yccpGenAnyFuncs( ycctx* ctx, yccfp* fp, yrobj* type, boolean defn)
{
  CONST char* tname;

  tname = yccpScopedName( ctx, type);
  yccpGenInserter( ctx, fp, type, tname, defn);
  yccpGenCopyInserter( ctx, fp, type, tname, defn);
  yccpGenExtractor( ctx, fp, type, tname, defn);
  yccfpPrint( fp, "\n");
}


/* ----------------------------------------------------------------------- */
/*
 * yccpGenExtractor - Generate Any extractor operator for a user-defined type
 *
 * Interfaces: boolean operator>>=( const CORBA::Any& any, T_ptr& dest)
 * Struct:     boolean operator>>=( const CORBA::Any& any, T*& dest)
 * Union:      boolean operator>>=( const CORBA::Any& any, T*& dest)
 * Enum:       boolean operator>>=( const CORBA::Any& any, T& dest)
 * Array:      boolean operator>>=( const CORBA::Any& any, T_forany& dest)
 */

void yccpGenExtractor( ycctx* ctx, yccfp* fp, yrobj* type, 
                       CONST char* tname, boolean defn)
{
  switch ( yrGetKind(type))
  {
    case yrdkInterface:
      yccfpPrint( fp, "boolean operator>>=( const %sAny& _any, ", 
                  YCP_CORBA(ctx));
      yccfpPrint( fp, "%s_ptr& _dest)", tname);
      break;
    case yrdkEnum:
      yccfpPrint( fp, "boolean operator>>=( const %sAny& _any, ",
                  YCP_CORBA(ctx));
      yccfpPrint( fp, "%s& _dest)", tname);
      break;
    case yrdkStruct:
    case yrdkUnion:
    case yrdkSequence:
      yccfpPrint( fp, "boolean operator>>=( const %sAny& _any, ",
                  YCP_CORBA(ctx));
      yccfpPrint( fp, "%s*& _dest)", tname);
      break;
    case yrdkArray:
      yccfpPrint( fp, "boolean operator>>=( const %sAny& _any, ",
                  YCP_CORBA(ctx));
      yccfpPrint( fp, "%s_forany& _dest)", tname);
      break;
    case yrdkAlias:
/* @@ */
    default:
      return;
      break;      /* unreachable */
  }
  if ( !defn )
    yccfpPrint( fp, ";\n");
  else
  {
    yccfpPrint( fp, "\n{\n");
    yccfpIncIndent( fp);
    /* @@ probably not how you do this typecode verification */
    yccfpPrint( fp, "if ( %s%s::_typecode == _any.type() )\n", 
                tname, yrGetKind(type) == yrdkArray ? "_forany" : "");
    yccfpIncIndent( fp);
    yccfpPrint( fp, "return FALSE;\n");
    yccfpDecIndent( fp);

    switch ( yrGetKind(type))
    {
      case yrdkEnum:
        yccfpPrint( fp, "_dest = *(%s*)_any.value();\n");
        break;
      case yrdkStruct:
      case yrdkUnion:
      case yrdkSequence:
      case yrdkInterface:
        yccfpPrint( fp, "if ( _any.is_flat() )\n");
        yccfpIncIndent( fp);
        yccfpPrint( fp, "_dest = new %s( (%s__cmap*)_any.value());\n", 
                    tname, tname);
        yccfpDecIndent( fp);
        yccfpPrint( fp, "else\n");
        yccfpIncIndent( fp);
        yccfpPrint( fp, "_dest = (%s*)_any.value();\n");
        yccfpDecIndent( fp);
        break;
      case yrdkArray:
        /* @@ ???? */
        break;
      case yrdkAlias:
        /* @@ */
      default:
        return;
        break;      /* unreachable */
    }

    /* @@ */
    yccfpPrint( fp, "return TRUE;\n");
    yccfpDecIndent( fp);
    yccfpPrint( fp, "}\n\n");
  }
}

/* ----------------------------------------------------------------------- */
/*
 * yccpGenInserter - Generate Any insertion operator for a user-defined type
 * 
 * This function handles types which are passed by value (enums) and the
 * non-copying insertion operator for more complex types (structs, unions).
 *
 * Interfaces: void operator<<=( CORBA::Any& any, T_ptr* val)
 * Struct:     void operator<<=( CORBA::Any& any, T* val)
 * Union:      void operator<<=( CORBA::Any& any, T* val)
 * Enum:       void operator<<=( CORBA::Any& any, T val)
 * Array:      None - copying form only
 */

void yccpGenInserter( ycctx* ctx, yccfp* fp, yrobj* type, 
                      CONST char* tname, boolean defn)
{
  switch ( yrGetKind(type))
  {
    case yrdkInterface:
      yccfpPrint( fp, "void operator<<=( %sAny& _any, ", YCP_CORBA(ctx));
      yccfpPrint( fp, "%s_ptr* _val)", tname);
      if ( defn )
      {
        yccfpPrint( fp, "\n{\n");
        yccfpIncIndent( fp);
        yccfpPrint( fp, "_any.replace( %s::_typecode(), (%s*)_val, ",
                    tname, YCCVOID(ctx));
        yccfpPrint( fp, "FALSE, FALSE);\n");
        yccfpDecIndent( fp);
        yccfpPrint( fp, "}\n\n");
      }
      else
        yccfpPrint( fp, ";\n");
      break;
    case yrdkEnum:
      yccfpPrint( fp, "void operator<<=( %sAny& _any, ", YCP_CORBA(ctx));
      yccfpPrint( fp, "%s _val)", tname);
      if ( defn )
      {
        yccfpPrint( fp, "\n{\n");
        yccfpIncIndent( fp);
        yccfpPrint( fp, "%s* _ptr = new %s;\n\n", tname, tname);
        yccfpPrint( fp, "*_ptr = _val;\n");
        yccfpPrint( fp, "_any.replace( %s::_typecode(), (%s*)_ptr, ",
                    tname, YCCVOID(ctx));
        yccfpPrint( fp, "FALSE, FALSE);\n");
        yccfpDecIndent( fp);
        yccfpPrint( fp, "}\n\n");
      }
      else
        yccfpPrint( fp, ";\n");
      break;
    case yrdkSequence:
    case yrdkStruct:
    case yrdkUnion:
      yccfpPrint( fp, "void operator<<=( %sAny& _any, ", YCP_CORBA(ctx));
      yccfpPrint( fp, "%s* _val)", tname);
      if ( defn )
      {
        yccfpPrint( fp, "\n{\n");
        yccfpIncIndent( fp);
        yccfpPrint( fp, "_any.replace( %s::_typecode(), (%s*)_val, ",
                    tname, YCCVOID(ctx));
        yccfpPrint( fp, "FALSE, FALSE);\n");
        yccfpDecIndent( fp);
        yccfpPrint( fp, "}\n\n");
      }
      else
        yccfpPrint( fp, ";\n");
      break;
    case yrdkAlias:
/* @@ */
    default:
      break;
  }
}

/* ----------------------------------------------------------------------- */
/*
 * yccpGenCopyInserter - Generate copying Any insertion operator for a 
 *     user-defined type
 * 
 * This function handles types which are passed by reference. Such types
 * typically have a by-value inserter which takes in some kind of pointer
 * and assumes ownership for it, and a copying inserter which takes in a
 * reference and performs a deep copy on it.
 *
 * Interfaces: void operator<<=( CORBA::Any& any, T_ptr val)
 * Struct:     void operator<<=( CORBA::Any& any, const T& val)
 * Union:      void operator<<=( CORBA::Any& any, const T& val)
 * Enum:       None - by-value only
 * Array:      void operator<<=( CORBA::Any& any, const T_forany& val)
 *
 * Arrays are a special case in that they may or may not be copied,
 * depending upon the setting of the copy flag when the T_forany was
 * constructed. However, in appearance, it is like the other copying ops,
 * so we generate from here.
 */

void yccpGenCopyInserter( ycctx* ctx, yccfp* fp, yrobj* type, 
                          CONST char* tname, boolean defn)
{
  switch ( yrGetKind(type))
  {
    case yrdkInterface:
      yccfpPrint( fp, "void operator<<=( %sAny& _any, ", YCP_CORBA(ctx));
      yccfpPrint( fp, "%s_ptr _val)", YCP_CORBA(ctx), tname);
      if ( defn )
      {
        yccfpPrint( fp, "\n{\n");
        yccfpIncIndent( fp);
        yccfpPrint( fp, "_any.replace( %s::_typecode(), (*_val)->_flatten(), ",
                    tname, YCCVOID(ctx));
        yccfpPrint( fp, "TRUE, TRUE);\n");
        yccfpDecIndent( fp);
        yccfpPrint( fp, "}\n\n");
      }
      else
        yccfpPrint( fp, ";\n");
      break;
    case yrdkStruct:
    case yrdkUnion:
    case yrdkSequence:
      yccfpPrint( fp, "void operator<<=( %sAny& _any, ", YCP_CORBA(ctx));
      yccfpPrint( fp, "const %s& _val)", YCP_CORBA(ctx), tname);
      if ( defn )
      {
        yccfpPrint( fp, "\n{\n");
        yccfpIncIndent( fp);
        yccfpPrint( fp, "_any.replace( %s::_typecode(), _val._flatten(), ",
                    tname, YCCVOID(ctx));
        yccfpPrint( fp, "TRUE, TRUE);\n");
        yccfpDecIndent( fp);
        yccfpPrint( fp, "}\n\n");
      }
      else
        yccfpPrint( fp, ";\n");
      break;
    case yrdkArray:
      yccfpPrint( fp, "void operator<<=( %sAny& _any, ", YCP_CORBA(ctx));
      yccfpPrint( fp, "const %s_forany& _val)", 
                  YCP_CORBA(ctx), tname);
      if ( defn )
      {
        yccfpPrint( fp, "\n{\n");
        yccfpIncIndent( fp);
        /* @@ */
        yccfpDecIndent( fp);
        yccfpPrint( fp, "}\n\n");
      }
      else
        yccfpPrint( fp, ";\n");
      break;
    case yrdkAlias:
/* @@ */
    default:
      return;
      break;      /* unreachable */
  }
}

/* ----------------------------------------------------------------------- */
/*
 * yccpInClassScope - returns TRUE if declarations associated with <obj>
 *   would normally be in C++ class scope.
 *
 * Will return TRUE for things like types declared inside interfaces,
 * structs, unions, and exceptions. FALSE for things declared at module
 * and repository scope.
 */
boolean yccpInClassScope( ycctx* ctx, yrobj* obj)
{
  yrobj* top = ycgScope(ctx);

  if ( !top )          /* can happen during deferred object code gen */
    return FALSE;
  switch (yrGetKind(top))
  {
    case yrdkInterface:
    case yrdkUnion:
    case yrdkStruct:
    case yrdkException:
    case yrdkSequence:
      return TRUE;
    default:
      return FALSE;
  }
}


/* ----------------------------------------------------------------------- */

void yccpGenParamType( ycctx* ctx, yccfp* fp, yrobj* type, sword mode)
{
  boolean genName = TRUE;	/* used to peer through typedefs */

  for (;;)
  {
    switch (yrGetKind(type))
    {
      case yrdkInterface:
	if ( genName )
        {
          yccfpPrint( fp, "%s_ptr", yccpTypeName(ctx, type));
        }
	if ( (mode == YOMODE_OUT) || (mode == YOMODE_INOUT) )
	  yccfpPrint(fp,"&");      /* T_ptr&, else T_ptr */
        return;
      case yrdkEnum:
	if ( genName )
          yccfpPrint( fp, "%s", yccpTypeName(ctx, type));
	if ( (mode == YOMODE_OUT) || (mode == YOMODE_INOUT) )
	  yccfpPrint(fp,"&");         /* T&, else T */
	return;
      case yrdkSequence:
      case yrdkUnion:
      case yrdkStruct:
      case yrdkException:
	if ( genName )
        {
          if ( mode == YOMODE_IN )
            yccfpPrint( fp, "const ");
          yccfpPrint( fp, "%s", yccpTypeName(ctx, type));
        }
        if ( yccIsVariableType( ctx, type) )
        {
          switch (mode)
          {
            case YOMODE_IN:                   /* const T& */
            case YOMODE_INOUT:                /* T& */
	      yccfpPrint(fp,"&");
              break;
            case YOMODE_OUT:                  /* T*& */
	      yccfpPrint(fp,"*&");
              break;
            case YOMODE_RETURN:               /* T* */
	      yccfpPrint(fp,"*");
              break;
          }
        }
        else if ( mode != YOMODE_RETURN )
	  yccfpPrint(fp,"&");         /* T& (or const T&) */
	return;
      case yrdkAlias:
/* @@ - arrays */
	if ( genName )
	{
          yrobj* base = yrGetAliasBaseType( type);

          if ( (yrGetKind(base) == yrdkArray) &&
               ((mode == YOMODE_RETURN) ||
               ((mode == YOMODE_OUT) && yccIsVariableType( ctx, base))) )
          {
            CONST char* tname = yccpScopedName(ctx, type);

            if ( mode == YOMODE_RETURN )
              yccfpPrint( fp, "%s_slice*", tname);
            else     /* mode == out and this is a var length type */
              yccfpPrint( fp, "%s_slice**", tname);
            return;
          }
          else
            yccfpPrint( fp, "%s", yccpTypeName(ctx, type));
	  genName = FALSE;
	  type = base;
	}
	break;
      case yrdkString:
	if ( genName )
        {
          if ( mode == YOMODE_IN )
            yccfpPrint( fp, "const char*");
          else
            yccfpPrint( fp, "char*");
        }
	if ( (mode == YOMODE_OUT) || (mode == YOMODE_INOUT) )
	  yccfpPrint(fp, "&");
	return;
      case yrdkArray:
	return;
      case yrdkPrimitive:
        switch (yrPrimData(type).kind)
        {
          case yrpkany:                         /* same as variable struct */
	    if ( genName )
            {
              if ( mode == YOMODE_IN )          /* const T& */
                yccfpPrint( fp, "const ");
              yccfpPrint( fp, "%s", yccpTypeName(ctx, type));
            }
            switch (mode)
            {
              case YOMODE_IN:                   /* const T& */
              case YOMODE_INOUT:                /* T& */
	        yccfpPrint(fp,"&");
                break;
              case YOMODE_OUT:                  /* T*& */
	        yccfpPrint(fp,"*&");
                break;
              case YOMODE_RETURN:               /* T* */
	        yccfpPrint(fp,"*");
                break;
            }
            break;
          case yrpkTypeCode:                    /* same as interface */
	    if ( genName )
            {
              yccfpPrint( fp, "%s_ptr", yccpTypeName(ctx, type));
            }
	    if ( (mode == YOMODE_OUT) || (mode == YOMODE_INOUT) )
	      yccfpPrint(fp,"&");       /* T_ptr&, else T_ptr */
            break;
          case yrpkstring:                      /* same as bound string */
	    if ( genName )
            {
              if ( mode == YOMODE_IN )
                yccfpPrint( fp, "const char*");
              else
                yccfpPrint( fp, "char*");
            }
	    if ( (mode == YOMODE_OUT) || (mode == YOMODE_INOUT) )
	      yccfpPrint(fp, "&");       /* {const} T&, else T */
            break;
          default:  
	    if ( genName )
              yccfpPrint( fp, "%s", yccpTypeName(ctx, type));
	    if ( (mode == YOMODE_OUT) || (mode == YOMODE_INOUT) )
	      yccfpPrint(fp, "&");       /* T&, else T */
        }
	return;
      default:
	yseThrow(YC_EX_FAILURE);
	break;
    }
  }
}

/* ----------------------------------------------------------------------- */
/*
 * yccpKwdTbl - list of C++ specific keywords. Keywords shared with C 
 *   are listed in yccKwdTbl - see yccpIsKeyword for more info.
 */

static CONST_DATA char* yccpKwdTbl[] = 
{
  "and",                "and_eq",                        /* 0 */
  "asm",                "bitand",                        /* 2 */
  "bitor",              "bool",                          /* 4 */
  "catch",              "class",                         /* 6 */
  "compl",              "const_cast",                    /* 8 */
  "delete",             "dynamic_cast",                  /* 10 */
  "explicit",           "friend",                        /* 12 */
  "inline",             "mutable",                       /* 14 */
  "namespace",          "new",                           /* 16 */
  "not",                "not_eq",                        /* 18 */
  "operator",           "or",                            /* 20 */
  "or_eq",              "private",                       /* 22 */
  "protected",          "public",                        /* 24 */
  "reinterpret_cast",   "static_cast",                   /* 26 */
  "template",           "this",                          /* 28 */
  "throw",              "try",                           /* 30 */
  "typeid",             "typename",                      /* 32 */
  "using",              "virtual",                       /* 34 */
  "wchar_t",            "xor",                           /* 36 */
  "xor_eq"                                               /* 37 */
};

static CONST_DATA size_t yccpKwdCnt = sizeof(yccpKwdTbl) / sizeof(char*);


/* ------------------------------------------------------------------------ */
/*
 * yccIsKeyword - Returns TRUE if name signifies a C++ keyword
 *
 * The set of C++ keywords is a superset of the set of C keywords, so we
 * first check for C keywords, and then C++. Returns TRUE if <name> is
 * a keyword.
 */
boolean yccpIsKeyword( ycctx* ctx, CONST char* name)
{
  boolean matched;

  matched = yccIsKeyword( ctx, name);
  if ( !matched )
  {
    CONST char **low; 
    CONST char **mid;
    CONST char **high;
    sword  cmp;

    high = yccpKwdTbl + yccpKwdCnt;
    low = yccpKwdTbl;

    while ( !matched && (low < high) )
    {
      mid = low + (high - low) / 2;
      cmp = strcmp(name, *mid);
      if (cmp < 0)
        high = mid;
      else if (cmp > 0)
        low = mid + 1;
      else
        matched = TRUE;
    }
  }
  return matched;
}


/* ------------------------------------------------------------------------ */
/*
 * yccpLangMap - Returns a ycgmap for the C language mapping
 *
 */
ycgmap* yccpLangMap( ycctx* ctx)
{
  ycgmap* map = (ycgmap*) ysmGlbAlloc( sizeof(ycgmap), "ycgmap");

  CLRSTRUCT(*map);
  map->langid = YCG_CPLUS_LANG;
  map->driver = yccpmap;
  map->kwdchk = yccpIsKeyword;

    /***** Set flags from command line/resources ****/
  if ( !ysResGetBool("mnidlc.nobuiltin-seq") )
    map->flags |= YCCP_BUILTIN_SEQ_FLG;
  if ( ysResGetBool( "mnidlc.static-typecodes") )
    map->flags |= YCCP_STATIC_TC_FLG;
  if ( ysResGetBool("mnidlc.cp-eh") )
    map->flags |= YCCP_EH_NATIVE_FLG;
  if ( ysResGetBool("mnidlc.cp-rtti") )
    map->flags |= YCCP_RTTI_FLG;
  if ( ysResGetBool("mnidlc.cp-namespace") )
    map->flags |= YCCP_NAMESPACE_FLG;

  return map;
}


/* ------------------------------------------------------------------------ */
/*
 * yccpSymFlush - clear C++ language specific portion of the symbol table
 *
 * This should clean up the contents of the ycsym, but not the container.
 * The container belongs to the table and is deleted when the symbol table
 * goes away. This function only serves to keep multiple language mappings
 * from falling all over each other.
 */

STATICF boolean yccpSymFlush( dvoid* usrp, dvoid* elm)
{
  ycsym* sym = (ycsym*)elm;

  if ( sym )
  {
    if ( sym->lang.cplus.scopednm )
      ysmGlbFree( (dvoid*)sym->lang.cplus.scopednm);
    if ( sym->lang.cplus.simplenm )
      ysmGlbFree( (dvoid*)sym->lang.cplus.simplenm);
    if ( sym->lang.cplus.ppfx )
      ysmGlbFree( (dvoid*)sym->lang.cplus.ppfx);
    if ( sym->lang.cplus.flatnm )
      ysmGlbFree( (dvoid*)sym->lang.cplus.flatnm);
  }
  return TRUE;
}

/* ------------------------------------------------------------------------ */
/*
 * yccpGenCGObjs - Traverse the list of code gen objects, using a callback
 *   to generate code.
 *
 * There is always a list of code gen objects attached to the context, which
 * what this is generally called with initially. In addition, there may be
 * lists embedded within nodes which represent IDL unions. This function's 
 * primary purpose is to ensure that modules are traversed properly.
 */


void yccpGenCGObjs( ycctx* ctx, yccfp* fp, yslst* objs, yccpcgfp cgcb, 
                    yccpdefcgfp defcgcb)
{
  ysle* le;
  boolean usenmsp = yccpUseNamespaces(ctx);
  CONST char* name;

  if ( objs )
  {
    for ( le = ysLstHead(objs); le; le = ysLstNext(le))
    {
      ycgobj* cgobj = (ycgobj*) ysLstVal(le);
  
      if ( yrGetKind(cgobj->ifrobj) == yrdkModule )
      {
        yslst* deferred;

        name = yccpSimpleName( ctx, cgobj->ifrobj);
        if ( usenmsp )
        {
          yccfpPrint( fp, "namespace %s\n{\n", name);
          yccfpIncIndent( fp);
        }
        else
          yccfpPrint( fp, "/* module %s */\n", name);

        ycgPushScope( ctx, cgobj->ifrobj);
        yccpGenCGObjs( ctx, fp, cgobj->objlist, cgcb, defcgcb);
        deferred = ycgPopScope(ctx);
        if ( deferred )
        {
          if ( defcgcb )
            (*defcgcb)( ctx, fp, deferred);
          ysLstDestroy( deferred, (ysmff)0);
        }

        if ( usenmsp )
        {
          yccfpDecIndent( fp);
          yccfpPrint( fp, "};  /* module %s */\n", name);
        }
      }
      else
        (*cgcb)( ctx, fp, cgobj->ifrobj, cgobj->flags & YCG_FWD);
    }
  }
}
