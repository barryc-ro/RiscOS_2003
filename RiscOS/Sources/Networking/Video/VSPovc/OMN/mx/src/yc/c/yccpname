/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * yccpname.c - generation of C++ names
 *
 * NOTES
 * Names
 * -----
 * Name generation in C++ is a LOT more complicated than in C. Consider
 * use of a type name T while generating its C++ class equivalent: The
 * class name is a simple name, as are uses of the class name in the
 * name of constructors and destructors; but the use of T as a return,
 * parameter, or field type (even within the scope of T) may require 
 * qualification if T is hidden by a declaration in an inner scope.
 *
 * class T         -- unadorned, without regard to scope
 * {
 *   T();          -- unadorned, without regard to scope
 *   T(const T&);  -- param type may need to be scoped if hidden
 * };
 *
 * So, the name of a type during code generation is very context dependent.
 * We just err on the side of caution and usually use the C++ absolute name
 * of a type. So, the example above becomes:
 *
 * class T 
 * {
 *   T(); 
 *   T(const ::T&);
 * };
 *
 * To further complicate matters, modules may or may not be mapped to C++
 * namespaces. If they're treated as namespaces, they figure into the 
 * scoped name of a type just like any other scope (struct, union, or
 * interface). If they're not treated as namespaces, they become prefixes
 * on the simple name. So, if we plop the example above into a module M,
 * we get:
 *
 * class T                 -- if modules are namespaces
 * {
 *   T(); 
 *   T(const ::M::T&);
 * };
 *
 * class M_T                 -- if modules are NOT namespaces
 * {
 *   M_T(); 
 *   M_T(const ::M_T&);
 * };
 * 
 * To facilitate all of this, there are three ways to get the name of an
 * IFR object: 
 *
 *   yccpSimpleName     - name within defining scope (T or M_T)
 *   yccpAbsoluteName   - name from global scope (::T or ::M::T)
 *   yccpScopedName     - one of the above, depending on current scope
 *
 * See the comments with these functions for additional information.
 *
 * HISTORY
 * 06/06/96 kcoleman    Bug 369357: Revamp I/O to limit line length
 * 02/27/96 kcoleman    Creation
 */
 
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCCP0_ORACLE
#include <yccp0.h>
#endif
#ifndef YSSTR_ORACLE
#include <ysstr.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif

/* ---------------------------------------------------------------------- */
/*
 * yccpTypeName - build the name of a type, suitable for use in an
 *	object, field, return type, or parameter declaration
 */
CONST char* yccpTypeName( ycctx* ctx, yrobj* type)
{
  CONST char* name = (char*)0;

  switch (yrGetKind(type))
  {
    case yrdkInterface:
    case yrdkUnion:
    case yrdkStruct:
    case yrdkException:
    case yrdkAlias:
    case yrdkTypedef:
    case yrdkEnum:
    case yrdkSequence:
      name = yccpScopedName(ctx, type);
      break;
    case yrdkArray:	/* just prints the element type name for now */
    {
      yrobj* eltype = type;

      while ( yrGetKind(eltype) == yrdkArray )	/* find element type */
	eltype = yrArrayData(eltype).elmtype;
      name = yccpTypeName(ctx, eltype);
      break;
    }
    case yrdkString:
      name = yccpPrimitiveName( ctx, yrpkstring, FALSE);
      break;
    case yrdkPrimitive:
      name = yccpPrimitiveName( ctx, yrPrimData(type).kind, FALSE);
      break;
    default:
      yseThrow(YC_EX_FAILURE);
      break;
  }
  return name;
}


#ifdef NEVER
/* ---------------------------------------------------------------------- */
/* 
@@ going to have to distinguish between places where you want to use
@@ the real down and dirty primitive type (like in operation parameter
@@ lists) and places where you want the abstract type (like fields)
 */
void yccpGenPrimitiveName( ycctx* ctx, yccfp* fp, yrpk kind)
{
  yccfpPrint( fp, "%s", yccpPrimitiveName(ctx, fp, kind, FALSE));
}
#endif


/* ---------------------------------------------------------------------- */
/*
 * yccpParentPrefix - For some object whose fully qualified name is
 *    <prefix><name>, come up with the prefix
 *
 * For example, for an operation B of interface A, returns "A::". Since
 * we're not currently using namespaces for modules, if interface A is
 * in module M, we'd return "M_A::".
 *
 * Since we currently do not support modules as namespaces, any object
 * whose immediate parent is a module has it's module name components
 * as part of its simple name, so such objects have no parent prefix.
 *
 * A null pointer is returned for things which have no prefix.
 */

CONST char* yccpParentPrefix( ycctx* ctx, yrobj* obj)
{
  char* prefix;
  char* p;
  ysle* le;
  yslst* comps;
  ub4 len;
  ycgkwdfp kwdfp;
  ycsym* syminfo;
  yrobj* parent;

  switch ( yrGetKind(obj))
  {
    case yrdkPrimitive:
    case yrdkString:
      return (char*)0;
    case yrdkArray:
      parent = ycgScope(ctx);
      break;
    case yrdkSequence:      /* @@ ? */
    default:
    {
      parent = yrGetDefinedIn(obj);

      switch (yrGetKind(parent))
      {
        case yrdkRepository:
        case yrdkModule:
          return (char*)0;
        default:
        {
          yrobj* scope = ycgScope(ctx);
          if ( parent == scope )
            return (char*)0;
          break;
        }
      }
      break;
    }
  }

    /***** See if we've previously constructed it *****/
  syminfo = ycSymLookup( ctx->symtbl, obj);
  if ( syminfo->lang.cplus.ppfx )
    return syminfo->lang.cplus.ppfx;

    /***** Figure out how long the output string will be *****/
  kwdfp = ctx->lang->kwdchk;
  len = 0;
  comps = yrGetNameComponents( parent);
  for ( le = ysLstHead(comps); le; le = ysLstNext(le))
  {
    yrobj* def = (yrobj*) ysLstVal(le);
    switch (yrGetKind( def))
    {
      case yrdkStruct:
      case yrdkUnion:
      case yrdkException:
      case yrdkInterface:
        len += strlen( yrGetName(def)) + 2;      /* name + '::' */
        if ( (*kwdfp)(ctx, yrGetName(def)) )
          len++;                                 /* prefixed with '_' */
        break;
      case yrdkModule:
        len += strlen( yrGetName(def)) + 1;      /* name + '_' */
        if ( (*kwdfp)(ctx, yrGetName(def)) )
          len++;                                 /* prefixed with '_' */
        break;
      default:
        break;
    }
  }

    /***** Fill it in *****/
  prefix = (char*) ysmGlbAlloc( len+1, "name");
  p = prefix;

  for ( le = ysLstHead(comps); le; le = ysLstNext(le))
  {
    yrobj* def = (yrobj*) ysLstVal(le);
    CONST char* kwdpfx;
    CONST char* nm;

    if ( def == obj )
      break;
    nm = yrGetName(def);
    kwdpfx = ((*kwdfp)(ctx, nm) ? "_" : "");
    switch (yrGetKind( def))
    {
      case yrdkStruct:
      case yrdkUnion:
      case yrdkException:
      case yrdkInterface:
        sprintf( p, "%s%s::", kwdpfx, nm);
        p += strlen(p);
        break;
      case yrdkModule:
        sprintf( p, "%s%s_", kwdpfx, nm);
        p += strlen(p);
        break;
      default:
        break;
    }
  }

  ysLstDestroy( comps, (ysmff)0);
  if ( !syminfo )
    ycSymInsert( ctx->symtbl, obj);
  syminfo->lang.cplus.ppfx = prefix;
  return prefix;
}


/* ---------------------------------------------------------------------- */
/*
 * yccpSeqName - Build the name of an anonymous sequence type
 */

char* yccpSeqName( ycctx* ctx, yrobj* seq)
{
  yrobj* etype;
  CONST char* ename;
  char* name;
  boolean freeElem;
  ub4 bound = yrSeqData(seq).bound;

  if ( yrGetKind(seq) != yrdkSequence )
    return (char*)0;

    /* walk chain of aliases */
  etype = yrSeqData(seq).elmtype;
  if ( yrGetKind(etype) == yrdkAlias )
  {                                   /* get effective type of alias */
    for ( ; yrGetKind(etype) == yrdkAlias; etype = yrAliasData(etype).type)
      if ( yrGetKind(yrAliasData(etype).type) == yrdkArray )
        break;
  }
 
    /* Build seq name of the form "_seq_<elemtype>{_bound}" */
  if ( (yrGetKind(etype) == yrdkString) || 
       ((yrGetKind(etype) == yrdkPrimitive) && 
        (yrPrimData(etype).kind == yrpkstring)) )
  {
    ename = "string";
    freeElem = FALSE;
  }
  else
    ename = yccpFlattenAbsName( ctx, etype);

  if ( bound )
  {    /* "_seq_" + 20 chars for bound + '\0' */
    name = ysmGlbAlloc( strlen(ename) + 27, "seqName");
    ysFmtStr( name, "_seq_%s_%u", ename, bound);
  }
  else
  {    /* "_seq_" + '\0' */
    name = ysmGlbAlloc( strlen(ename) + 6, "seqName");
    DISCARD strcpy( name, "_seq_");
    DISCARD strcat( name, ename);
  }
  return name;
}


/* ---------------------------------------------------------------------- */
/*
 * yccpSimpleName - The name of an object relative to its defining scope.
 *
 * The simple name of an object is its name as it appears in its
 * defining scope. That is, undecorated. You would like to think this
 * is just the result of calling yrGetName, but there are two problems
 * with that: anonymous types (sequences, arrays, strings), and modules.
 *
 * The name of an anonymous type is outside the IFR's purview, and
 * modules can figure into a simple name if they're not being treated
 * as namespaces: For an object B in module A, it's simple name is "B"
 * if modules are treated as namespaces, and A_B otherwise. So, yrGetName
 * is woefully inadequate.
 *
 * When might you know for a fact that what you want is a simple name?
 * The name of a constructor or destructor within the scope of its class
 * or the name of a type as it is embedded in a type code name.
 *
 * Sequences are their usual charming selves: They aren't entirely
 * anonymous in the C++ mapping, so their names potentially need the same
 * sort of module prefixes any other type gets...but they don't have
 * def chains to walk because they're anonymous to the IFR. Instead, 
 * we assume the top of the scope stack is the parent. We can get away
 * with this because this function will only be called on a sequence if
 * it is used as a field type or a sequence or array element type. As such,
 * the seq name can only be used within the scope of the associated array,
 * sequence, or struct/union type and the context stack makes an adequate
 * foster parent.
 *
@@ Currently, modules are never treated as namespaces. When namespaces
 * are supported, adjust this accordingly.
 */
CONST char* yccpSimpleName( ycctx* ctx, yrobj* obj)
{
  char* sname;
  char* name;
  yslst* comps;
  ub4 len;
  yrobj* parent;
  char* p;
  char* n;
  ycgkwdfp kwdfp;
  boolean isKwd;
  ycsym* syminfo;

  syminfo = ycSymLookup( ctx->symtbl, obj);
  if ( syminfo && syminfo->lang.cplus.simplenm )
    return syminfo->lang.cplus.simplenm;

  switch (yrGetKind(obj))
  {
    case yrdkSequence:
      sname = yccpSeqName( ctx, obj);
      parent = ycgScope(ctx);
      if ( yrGetKind( parent) != yrdkModule )
      {
        syminfo->lang.cplus.simplenm = sname;
        return sname;
      }
      break;
    case yrdkArray:
      /* 
       * This can only be an anonymous array, in which case the name should
       * have been previously hung on the ycsym by a call to 
       * yccpAnonArrayName and should have returned, above.
       */
      yseThrow(YC_EX_FAILURE);
      break;
    case yrdkString:
      return yccpPrimitiveName( ctx, yrpkstring, TRUE);
    case yrdkPrimitive:
      return yccpTypeName(ctx, obj);
    default:
      sname = yrGetName(obj);
      parent = yrGetDefinedIn(obj);
      if ( yrGetKind( parent) != yrdkModule )
      {
        syminfo->lang.cplus.simplenm = ysStrDup(sname);
        return sname;
      }
      break;
  }

  comps = ysLstCreate();
  kwdfp = ctx->lang->kwdchk;
  isKwd = (*kwdfp)( ctx, sname);
  len = (isKwd ? 1 : 0);
  while ( yrGetKind(parent) == yrdkModule )
  {
    len += strlen(yrGetName(parent)) + 1;
    if ( (*kwdfp)( ctx, yrGetName(parent)) )
      len++;
    DISCARD ysLstEnq( comps, (dvoid*)parent);
    parent = yrGetDefinedIn(parent);
  }
  name = (char*) ysmGlbAlloc( len + strlen( sname) + 1, "name");
  n = name;
  while ( (parent = ysLstDeq(comps)) )
  {
    p = yrGetName(parent);
    if ( (*kwdfp)( ctx, p) )
      *n++ = '_';
    while ( *p )
      *n++ = *p++;
    *n++ = '_';
  }
  if ( isKwd )
    *n++ = '_';
  DISCARD strcpy( n, sname);
  ysLstDestroy( comps, (ysmff)0);
 
  if ( yrGetKind(obj) == yrdkSequence )
    ysmGlbFree( sname);
  if ( !syminfo )
    ycSymInsert( ctx->symtbl, obj);
  syminfo->lang.cplus.simplenm = name;
  return name;
}


/* ---------------------------------------------------------------------- */
/*
 * yccpAbsoluteName - The name of object relative to the global scope.
 *
 * The absolute name of an object is its fully scoped name, starting
 * with "::" to indicate the global scope. For most objects, this is
 * very similar to what you get from yrGetAbsoluteName. However, since
 * we may or may not be treating modules as namespaces, we cannot use
 * yrGetAbsoluteName naively. Also, we must be able to generate a name
 * for an anonymous type.
 *
 * When modules are not treated as C++ namespaces, the simple name of an
 * object (as generated by yccpSimpleName) already includes module
 * qualifiers up to the first non-module scope. And since modules may
 * only appear at module and file scope, if the parent of this object
 * is a module, it's absolute name is just "::" added to its simple name.
 *
 * Anonymous arrays can occur only as fields in structs, unions, and
 * exceptions. They have type names dependent upon their associated field
 * name, so they cannot strictly be generated here. Instead, we assume
 * that someone has called yccpAnonymousArrayName at least one, thereby
 * hanging the simple name of the array on the ycsym already. Further, it
 * is assumed that top of the scope stack is the enclosing type at least
 * the first time this function is called; thereafter, we re-use the 
 * cached name. This sequence is in keeping with calculating the simple name
 * during header file generation and the absolute name during type definition.
 *
@@ how do you figure out the scope of an anonymous type? from the scope stack?
 */
CONST char* yccpAbsoluteName( ycctx* ctx, yrobj* obj)
{
  CONST char* name;
  CONST char* pfx;
  yrobj* parent;
  char* result;
  ycsym* syminfo;

  syminfo = ycSymLookup( ctx->symtbl, obj);

  switch (yrGetKind(obj))
  {
    case yrdkArray:      /* anonymous, see comment above */
      if ( syminfo && syminfo->lang.cplus.scopednm )
        return syminfo->lang.cplus.scopednm;
      else
        parent = ycgScope(ctx);
      break;
    case yrdkString:
      return yccpPrimitiveName( ctx, yrpkstring, TRUE);
    case yrdkPrimitive:
      return yccpTypeName( ctx, obj);
    case yrdkSequence:
/* @@ */
    default:
      if ( syminfo && syminfo->lang.cplus.scopednm )
        return syminfo->lang.cplus.scopednm;
      else
        parent = yrGetDefinedIn(obj);
      break;
  }

  name = yccpSimpleName( ctx, obj);
  if ( (yrGetKind(parent) != yrdkModule) &&
       (pfx = yccpParentPrefix(ctx, obj)) )
  {
    result = (char*) ysmGlbAlloc( strlen(pfx) + strlen(name) + 3, "name");
    ysFmtStr( result, "::%s%s", pfx, name);
  }
  else
  {
    result = (char*) ysmGlbAlloc( strlen(name) + 3, "name");
    result[0] = ':'; result[1] = ':';
    DISCARD strcpy( result+2, name);
  }
  if ( !syminfo )
    ycSymInsert( ctx->symtbl, obj);
  syminfo->lang.cplus.scopednm = result;
  return result;
}


/* ---------------------------------------------------------------------- */
/*
 * yccpScopedName - The name of an object relative to the current scope.
 *
 * The scoped name of an object is its name relative to the current top
 * of the scope stack. For example, if the absolute name of an object is
 * ::A::B::C then you might expect to get:
 *
 *   ::A::B::C     if not in the scope of either A or B
 *   B::C          if inside the scope of A
 *   C             if inside the scope of B
 *
 * However, this rosy view is complicated by the possibility of name
 * hiding. Consider this (admittedly unlikely) example:
 *
 *   struct S
 *   {
 *     struct S { char* f; };
 *     S f1;        -- inner S
 *     ::S f2;      -- outer S
 *   };
 *
 * So, if we're inside, say ::A::B::D, we may not be able to refer
 * to just "C" or just B::C if D contains some with the name "C" or "B".
 * We could, of course, check for such collisions via the IFR, but that
 * is an unnecessary expense. 
 * 
 * Instead, we assume that we can use the simple name of an object only
 * if we are in the immediate scope of it's parent. This is actually not
 * adequate in C++ (because a type name can be hidden by an object,
 * function, or enumerator of the same name), but it is sufficient for
 * any C++ resulting from IDL (a name may only be defined once in a scope).
 * 
 * If we're in any scope besides the defining scope, including an inner
 * scope, we must use the absolute name.
 *
@@ I hate this - isn't there some middle ground?
 */
CONST char* yccpScopedName( ycctx* ctx, yrobj* obj)
{
  if ( ycgScope(ctx) == yrGetDefinedIn(obj) )
    return yccpSimpleName( ctx, obj);
  else
    return yccpAbsoluteName( ctx, obj);
}


/* ---------------------------------------------------------------------- */
/*
 * yccpAnonArrayName - build the name of an anonymous array type
 *
 * The need for this only arises when arrays are used as field types
 * in structs, unions, and exceptions. The CORBA 2.0 spec says the
 * type name in that case is of the form:
 *
 *   _array_<field-name>
 *
 * This is a trifle on the stupid side since it implies a different
 * type for each field, but of course we're at liberty to do better
 * using typedefs. At the moment, however, we do the stupid thing.
 */
CONST char* yccpAnonArrayName( ycctx* ctx, yrobj* type, CONST char* field)
{
  char* nm;
  size_t len = 0;
  boolean isKwd;
  ycsym* syminfo;

  syminfo = ycSymLookup( ctx->symtbl, type);
  if ( syminfo && syminfo->lang.cplus.simplenm )
    return syminfo->lang.cplus.simplenm;
  else
  {
    isKwd = (*ctx->lang->kwdchk)( ctx, field);
    len = strlen(field) + 8;        /* _array_ = 7, plus null */
    if ( isKwd )
      len++;
    nm = (char*) ysmGlbAlloc( len, "array");
    ysFmtStr( nm, "_array_%s%s", (isKwd ? "_" : ""), field);
    if ( !syminfo )
      syminfo = ycSymInsert( ctx->symtbl, type);
    syminfo->lang.cplus.simplenm = nm;
  }
  return nm;
}

/* ---------------------------------------------------------------------- */
/*
 * yccpFlattenAbsName - turns an absolute name (A_B::C::D) into something
 *   suitable for use where "::"s aren't acceptable.
 *
 * Used primarily in construction of weird things like anonymous sequence
 * names and preprocessing directives. A_B::C::D -> A_B_C_D
 */
CONST char* yccpFlattenAbsName( ycctx* ctx, yrobj* obj)
{
  char* p1;
  char* p2;
  char* name;
  ycsym* syminfo;

  syminfo = ycSymLookup( ctx->symtbl, obj);
  if ( syminfo && syminfo->lang.cplus.ppfx )
    return syminfo->lang.cplus.flatnm;

  name = ysStrDup( yccpAbsoluteName( ctx, obj));
  for ( p1 = name, p2 = name; *p2 ; p1++, p2++)
  {
    if ( p2[0] == ':' && p2[1] == ':' )
    {
      p1[0] = '_';
      p2++;
    }
    else if ( *p2 == ' ' )     /* primitives can be multiple words */
      *p1 = '_';
    else
      *p1 = *p2;
  }
  *p1 = '\0';

  if ( !syminfo )              /* probably a primitive */
    syminfo = ycSymInsert( ctx->symtbl, obj);
  syminfo->lang.cplus.flatnm = name;

  return name;
}


/* ------------------------------------------------------------------------ */
/*
 * yccpElemName - Figure out the name of a sequence element type as
 *   it is used in generating the sequence class.
 */
char* yccpElemName( ycctx* ctx, yrobj* seq)
{
  yrobj* elmtype = yrSeqData(seq).elmtype;
  yrobj* base;
  char* ename = (char*)0;
  CONST char* tmp;

  if ( yrGetKind(elmtype) == yrdkAlias )
    base = yrGetAliasBaseType( elmtype);
  else
    base = elmtype;

  switch (yrGetKind(base))
  {
    case yrdkInterface:
      tmp = yccpTypeName( ctx, elmtype);
      ename = (char*) ysmGlbAlloc( strlen(tmp) + 4, "ename");
      ysFmtStr( ename, "%s_ptr", tmp);
      break;
    case yrdkArray:
      tmp = yccpTypeName( ctx, elmtype);
      ename = (char*) ysmGlbAlloc( strlen(tmp) + 6, "ename");
      ysFmtStr( ename, "%s_slice", tmp);
      break;
    case yrdkString:
      ename = ysStrDup("char*");
      break;
    case yrdkPrimitive:
      switch (yrPrimData(base).kind)
      {
        case yrpkTypeCode:
          tmp = yccpPrimitiveName( ctx, yrPrimData(elmtype).kind, FALSE);
          ename = (char*) ysmGlbAlloc( strlen(tmp) + 4, "ename");
          ysFmtStr( ename, "%s_ptr", tmp);
          break;
        case yrpkstring:
          ename = ysStrDup("char*");
          break;
        default:
          ename = ysStrDup(yccpPrimitiveName( ctx, yrPrimData(elmtype).kind, 
                                              FALSE));
          break;
      }
      break;
    default:
      ename = ysStrDup(yccpTypeName( ctx, elmtype));
      break;
  }
  return ename;
}

/* ------------------------------------------------------------------------ */
/*
 * yccpPrimitiveName - Figure out the name of a primitive type.
 *
 * May be called with a yrobj of type yrdkPrimitive or yrdkString.
 * Built on top of yccGetPrimitiveName. "UseChar" determines whether or
 * not strings map to String_var or char*.
 */

static CONST_DATA char yccpSVName[] = YCP_CORBA(ctx) "String_var";
static CONST_DATA char yccpTCName[] = YCP_CORBA(ctx) "TypeCode";
static CONST_DATA char yccpAnyName[] = YCP_CORBA(ctx) "Any";

CONST char* yccpPrimitiveName( ycctx* ctx, yrpk kind, boolean useChar)
{
  CONST char* name = (char*)0;

  switch (kind)
  {
    case yrpkstring:
      if ( useChar )
        name = yccGetPrimitiveName( ctx, yrpkstring);
      else
        name = yccpSVName;
      break;
    case yrpkTypeCode:
      name = yccpTCName;
      break;
    case yrpkany:
      name = yccpAnyName;
      break;
    default:
      name = yccGetPrimitiveName( ctx, kind);
      break;
  }
  return name;
}
