/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 *   yroper.c - Implementation of CORBA::OperationDef
 *
 * NOTES
 *
 * HISTORY
 * 07/04/96 kcoleman	Support for context ids
 * 11/09/95 kcoleman    Creation
@@ do something about versioning with the addition of context ids
 */
 
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
 
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif

#ifndef YRCORBAI_H
#include <yrcorbaI.h>
#endif
 
#ifndef YR_ORACLE
#include <yr.h>
#endif
 
#ifndef YOORB_ORACLE
#include <yoorb.h>
#endif
 
#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif
 
externdef ysidDecl(CORBA_OperationDef_implid) = "ORA_OperationDef";

STATICF CORBA_ParameterMode yrMapParMode( sb4 mode)
{
  switch ( mode )
  {
    case YOMODE_IN:
      return CORBA_PARAM_IN;
    case YOMODE_OUT:
      return CORBA_PARAM_OUT;
    case YOMODE_INOUT:
      return CORBA_PARAM_INOUT;
    default:                    /* return, exception, invalid */
      yseThrow( YR_EX_BADTYPE);
  }
  return CORBA_PARAM_IN;        /* unreachable, but shuts up compiler */
}

STATICF void yrParamsToSeq( yslst* pars, CORBA_ParDescriptionSeq* seq)
{
  CORBA_ParameterDescription dummy;
  sword i;
  ysle* le;
 
  seq->_maximum = 0;
  if ( pars && (ysLstCount(pars) > 0) )
  {
    seq->_length = ysLstCount(pars);
    seq->_buffer = (CORBA_ParameterDescription*)
                  yoAlloc( sizeof(CORBA_ParameterDescription) * seq->_length);
    for ( i = 0, le = ysLstHead(pars); le; i++, le = ysLstNext(le))
    {
      yrpar* m = (yrpar*) ysLstVal(le);
 
      dummy.name = m->name;
      dummy.type = (yotk*) yrGetTypeCode( m->type);
      dummy.type_def = (CORBA_IDLType) yrYRtoCORBA( m->type);
      dummy.mode = yrMapParMode(m->mode);
      CORBA_ParameterDescription__copy( &(seq->_buffer[i]), &dummy, yoAlloc);
    }
  }
  else
    seq->_length = 0;
}
 

/************************************************************************/
/* Interface CORBA::OperationDef */
/************************************************************************/
 
CORBA_Contained_Description CORBA_OperationDef_describe_i(
     CORBA_OperationDef or, yoenv* ev)
{
  CORBA_Contained_Description result;
  CORBA_OperationDescription* noreg desc = (CORBA_OperationDescription*)0;
  yotk* noreg tc = (yotk*) 0;
  yslst* raises;
 
  NOREG(desc);
  NOREG(tc);
  yseTry
  {
    CONST yotk* temp = YCTC_CORBA_OperationDescription;

    desc = (CORBA_OperationDescription*)
                yoAlloc( sizeof( CORBA_OperationDescription));
    CLRSTRUCT( *desc);
 
    desc->name = CORBA_OperationDef__get_name_i(or, ev);
    desc->id = CORBA_OperationDef__get_id_i( or, ev);
    desc->defined_in = CORBA_OperationDef__get_defined_in_i( or, ev);
    desc->version = CORBA_OperationDef__get_version_i( or, ev);
    desc->result = CORBA_OperationDef__get_result_i( or, ev);
    desc->mode = CORBA_OperationDef__get_mode_i( or, ev);
    desc->parameters = CORBA_OperationDef__get_params_i( or, ev);
    desc->contexts = CORBA_OperationDef__get_contexts_i( or, ev);

    raises = yrOpData( yrCORBAtoYR( (CORBA_IRObject)or)).raises;
    if ( raises && (ysLstCount(raises) > 0) )
    {
      ub4 i;
      ysle* le;

      desc->exceptions._buffer = (CORBA_ExceptionDescription*) yoAlloc( 
                    sizeof(CORBA_ExceptionDescription) * ysLstCount(raises));
      for ( le = ysLstHead(raises), i = 0; le; le = ysLstNext(le), i++)
      {
        yrobj* ex = (yrobj*) ysLstVal(le);
        yrExDescription( &desc->exceptions._buffer[i], 
                         (CORBA_ExceptionDef) yrYRtoCORBA( ex), ev);
        desc->exceptions._length++;
      }
    }
    yotkCopyVal( yoTcTypeCode, (dvoid*) &tc, (dvoid*) &temp, yoAlloc);
  }
  yseCatchAll
  {
    if ( desc )
    {
      if ( desc->name )
        yoFree( (dvoid*) desc->name);
      if ( desc->id )
        yoFree( (dvoid*) desc->id);
      if ( desc->defined_in )
        yoFree( (dvoid*) desc->defined_in);
      if ( desc->version )
        yoFree( (dvoid*) desc->version);
      if ( desc->result )
        yotkFreeVal( yoTcTypeCode, &desc->result, yoFree);
      if ( desc->parameters._buffer )
        CORBA_ParDescriptionSeq__free( &desc->parameters, yoFree);
      if ( desc->exceptions._buffer )
        CORBA_ExcDescriptionSeq__free( &desc->exceptions, yoFree);
      if ( desc->contexts._buffer )
        CORBA_ContextIdSeq__free( &desc->contexts, yoFree);
      if ( tc )
        yotkFreeVal( yoTcTypeCode, (dvoid*) &tc, yoFree);
    }
    yseRethrow;
  }
  yseEnd
 
  result.kind = CORBA_dk_Operation;
  result.value._type = tc;
  result.value._value = desc;
  return result;
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_DefinitionKind CORBA_OperationDef__get_def_kind_i(
     CORBA_OperationDef or, yoenv* ev)
{
  return CORBA_IRObject__get_def_kind_i( (CORBA_IRObject) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_RepositoryId CORBA_OperationDef__get_id_i(
     CORBA_OperationDef or, yoenv* ev)
{
  return CORBA_Contained__get_id_i( (CORBA_Contained) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Identifier CORBA_OperationDef__get_name_i(
     CORBA_OperationDef or, yoenv* ev)
{
  return CORBA_Contained__get_name_i( (CORBA_Contained)or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_VersionSpec CORBA_OperationDef__get_version_i(
     CORBA_OperationDef or, yoenv* ev)
{
  return CORBA_Contained__get_version_i( (CORBA_Contained) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Container CORBA_OperationDef__get_defined_in_i(
     CORBA_OperationDef or, yoenv* ev)
{
  return CORBA_Contained__get_defined_in_i( (CORBA_Contained) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_ScopedName CORBA_OperationDef__get_absolute_name_i(
     CORBA_OperationDef or, yoenv* ev)
{
  return CORBA_Contained__get_absolute_name_i( (CORBA_Contained) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Repository CORBA_OperationDef__get_containing_repository_i(
     CORBA_OperationDef or, yoenv* ev)
{
  return CORBA_Contained__get_containing_repository_i((CORBA_Contained)or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
yotk* CORBA_OperationDef__get_result_i( CORBA_OperationDef or, yoenv* ev)
{
  return yrCopyTypeCode( yrOpData(yrCORBAtoYR( (CORBA_IRObject) or)).rettype);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_IDLType CORBA_OperationDef__get_result_def_i(
     CORBA_OperationDef or, yoenv* ev)
{
  yrobj* obj = yrCORBAtoYR( (CORBA_IRObject) or);
 
  return yoDuplicate( yrYRtoCORBA( yrOpData(obj).rettype));
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_ParDescriptionSeq CORBA_OperationDef__get_params_i(
     CORBA_OperationDef or, yoenv* ev)
{
  yrobj* obj = yrCORBAtoYR( (CORBA_IRObject) or);
  CORBA_ParDescriptionSeq seq;
 
  yrParamsToSeq( yrOpData(obj).pars, &seq);
  return seq;
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_OperationMode CORBA_OperationDef__get_mode_i(
     CORBA_OperationDef or, yoenv* ev)
{
  yrobj* obj = yrCORBAtoYR( (CORBA_IRObject) or);
 
  return (yrOpData(obj).mode == YR_OP_ONEWAY) ? CORBA_OP_ONEWAY : 
                                                CORBA_OP_NORMAL;
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_ExceptionDefSeq CORBA_OperationDef__get_exceptions_i(
     CORBA_OperationDef or, yoenv* ev)
{
  yrobj* obj = yrCORBAtoYR( (CORBA_IRObject) or);
  CORBA_ExceptionDefSeq seq;
 
  yrObjListToSeq( yrOpData(obj).raises, (yr_objseq*) &seq);
  return seq;
}
 
/* ---------------------------------------------------------------------- */

CORBA_ContextIdSeq CORBA_OperationDef__get_contexts_i( 
     CORBA_OperationDef or, yoenv* ev)
{
  yrobj* obj = yrCORBAtoYR( (CORBA_IRObject) or);
  CORBA_ContextIdSeq seq;
  yslst* ctxts = yrOpData(obj).ctxts;

  CLRSTRUCT(seq);
  if ( ctxts && (ysLstCount(ctxts) > 0) )
  {
    ysle* le;
    ub4 i;

    seq._buffer = (CORBA_ContextIdentifier*) 
          yoAlloc( sizeof(CORBA_ContextIdentifier) * ysLstCount(ctxts));
    yseTry
      for (i = 0, le = ysLstHead(ctxts); le; i++, le = ysLstNext(le))
      {
        seq._buffer[i] = ysStrDupWaf( (char*)ysLstVal(le), yoAlloc);
        seq._length++;
      }
    yseCatchAll
      CORBA_ContextIdSeq__free( &seq, yoFree);
      yseRethrow;
    yseEnd
  }
  return seq;
}

/* ---------------------------------------------------------------------- */
 
 
externdef struct CORBA_OperationDef__tyimpl CORBA_OperationDef__impl =
 {
  CORBA_OperationDef__get_result_i,
  CORBA_OperationDef__get_result_def_i,
  CORBA_OperationDef__get_params_i,
  CORBA_OperationDef__get_mode_i,
  CORBA_OperationDef__get_exceptions_i,
  CORBA_OperationDef__get_contexts_i,
  CORBA_OperationDef_describe_i,
  CORBA_OperationDef__get_id_i,
  CORBA_OperationDef__get_name_i,
  CORBA_OperationDef__get_version_i,
  CORBA_OperationDef__get_defined_in_i,
  CORBA_OperationDef__get_absolute_name_i,
  CORBA_OperationDef__get_containing_repository_i,
  CORBA_OperationDef__get_def_kind_i
 };
 


/* ---------------------------------------------------------------------- */

void Init_CORBA_OperationDef()
{
  YR_SET_IMPL(CORBA_OperationDef, FALSE, 0);
  YR_IMPL_READY(CORBA_OperationDef, 0);
}

void Term_CORBA_OperationDef()
{
  YR_IMPL_DEACTIVATE(CORBA_OperationDef);
}
