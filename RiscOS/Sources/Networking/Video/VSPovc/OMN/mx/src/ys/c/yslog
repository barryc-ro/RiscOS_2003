/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * yslog.c - Log Operations
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YSI_ORACLE
#include <ysi.h>
#endif
#ifndef YSMSG_ORACLE
#include <ysmsg.h>
#endif
#ifndef YSFE_ORACLE
#include <ysfe.h>
#endif

/*
 * Type Declarations
 */
typedef struct yslogext  yslogext;
typedef union  ysluar    ysluar;

/* DISABLE check_naming */
struct yslctx
{
  yslst      *sinks;                            /* list of all created sinks */
  ub4         seqid;                                   /* global sequence ID */
  yslst      *exts;                                /* translation extensions */
};

struct yslogext
{
  CONST ub1  *tc;                                                /* typecode */
  size_t      tcsz;                                         /* typecode size */
  ysSinkFmtCB fmtcb;                                      /* format callback */
  ysSinkEncCB enccb;                                      /* encode callback */
};

struct yssnk
{
  CONST char *nm;                                               /* sink name */
  ysFilterCB  filtcb;                                     /* filter callback */
  dvoid      *fusrp;                                  /* filter user pointer */
  ysRecordCB  reccb;                                      /* record callback */
  dvoid      *rusrp;                                  /* record user pointer */
  ysle       *le;                                 /* position in lctx->sinks */
  yslst      *fes;                            /* compiled filter expressions */
};

union ysluar
{
  char *v_strval;
  ub4   v_ub4val;
  sb4   v_sb4val;
  sysb8 v_sb8val;
  struct { ub4 v_max; ub4 v_len; ub1 *v_buf; } v_octval;
  struct { char *v_fmt; char v_buf[16]; } v_ptrval;
};
/* ENABLE check_naming */

#define strval v_strval
#define ub4val v_ub4val
#define sb4val v_sb4val
#define sb8val v_sb8val
#define octmax v_octval.v_max
#define octlen v_octval.v_len
#define octbuf v_octval.v_buf
#define othtyp v_othval.type
#define othptr v_othval.ptr
#define ptrfmt v_ptrval.v_fmt
#define ptrbuf v_ptrval.v_buf

/*
 * Private Routines
 */
STATICF yslogext *ysSinkLookup(CONST ub1 *tc, boolean exact);
STATICF void ysSinkTty(dvoid *rusrp, yslrec *rec);
STATICF dvoid *ysLogMsgidParse(CONST char *str);
STATICF boolean ysLogMsgidPred(CONST dvoid *v1, CONST dvoid *v2);
STATICF boolean ysLogSevPred(CONST dvoid *v1, CONST dvoid *v2);

/*
 * Constants
 */
#define YSLMAXARGS  32

static ysmtagDecl(YSLOG_TAG) = "yslog";
static ysmtagDecl(YSSNK_TAG) = "yssnk";

static CONST_DATA ysfemap yslogfemap[] =
{
  { "prod", YSLOGFEVAL_PROD,
      ysFEDfltParse, ysFEDfltFree, ysFEStrPred, ysFENoRelop },
  { "fac", YSLOGFEVAL_FAC,
      ysFEDfltParse, ysFEDfltFree, ysFEStrPred, ysFENoRelop },
  { "msg", YSLOGFEVAL_MSGID,
      ysLogMsgidParse, ysFEDfltFree, ysLogMsgidPred, ysFENoRelop },
  { "msgid", YSLOGFEVAL_MSGID,
      ysFEIntParse, ysFEDfltFree, ysFENoPred, ysFEIntRelop },
  { "maxsev", YSLOGFEVAL_SEV,
      ysFEIntParse, ysFEDfltFree, ysLogSevPred, ysFENoRelop },
  { "sev", YSLOGFEVAL_SEV,
      ysFEIntParse, ysFEDfltFree, ysFENoPred, ysFEIntRelop },
  { "assoc", YSLOGFEVAL_ASSOC,
      ysFEDfltParse, ysFEDfltFree, ysFEStrPred, ysFENoRelop },
  { "seqid", YSLOGFEVAL_SEQID,
      ysFEIntParse, ysFEDfltFree, ysFENoPred, ysFEIntRelop }
};

/*
 * Typecodes
 *   For better or worse, we know about the primitive typecodes here.  But
 *   since we don't want to depend on yo, we redefine them here.  These MUST
 *   be exactly the same as their equivalent definitions in yo.
 */
static CONST_DATA ub1 YSLSB4__TC[] = { '\0', '\0', '\0', '\3' };
static CONST_DATA ub1 YSLUB4__TC[] = { '\0', '\0', '\0', '\5' };
static CONST_DATA ub1 YSLSB8__TC[] = { '\0', '\0', '\0', '\027' };
static CONST_DATA ub1 YSLSTR__TC[] = 
{ '\0', '\0', '\0', '\022', '\0', '\0', '\0', '\0' };
static CONST_DATA ub1 YSLOCTETS__TC[] =
{ '\0', '\0', '\0', '\023', '\0', '\0', '\0', '\010', '\0', '\0', '\0', '\012',
  '\0', '\0', '\0', '\0' };

/*
 * We were really bad boys, and just exported the above constants.  Turns
 * out that on brain-damaged Windows machines, you can't export the constant
 * out of a DLL, because then other code doesn't view it as a constant.
 */
CONST ub1 *YSLSB4__getTC(void)
{
  return YSLSB4__TC;
}

CONST ub1 *YSLUB4__getTC(void)
{
  return YSLUB4__TC;
}

CONST ub1 *YSLSB8__getTC(void)
{
  return YSLSB8__TC;
}

CONST ub1 *YSLSTR__getTC(void)
{
  return YSLSTR__TC;
}

CONST ub1 *YSLOCTETS__getTC(void)
{
  return YSLOCTETS__TC;
}

/*
 * ysLogInit - initialize the logging mechanism
 */
void ysLogInit(ysctx *ctx)
{
  yslctx *lctx;
  yssnk  *sink;
  yslst  *lst;
  ysle   *le;

  lctx = (yslctx *) ysmGlbAlloc(sizeof(yslctx), "yslctx");
  lctx->sinks = ysLstCreate();
  lctx->seqid = (ub4) 0;
  lctx->exts = ysLstCreate();

  ctx->lctx = lctx;

  sink = ysSinkCreate("tty", ysSinkTty, (dvoid *) 0);
  ysSinkSetFilter(sink, ysFilterSimple, (dvoid *) 0,
		  (ysFilterCB *) 0, (dvoid **) 0);

  ysAddFilter(sink, "maxsev 4");
  lst = ysResGet("ys.log.tty.filter");
  if (lst)
    {
      for (le = ysLstHead(lst); le; le = ysLstNext(le))
	ysAddFilter(sink, (char *) ysLstVal(le));
      ysFEFree((ysfe *) ysLstRem(sink->fes, ysLstTail(sink->fes)));
    }
}

/*
 * ysLogTerm - terminate the logging mechanism
 */
void ysLogTerm(ysctx *ctx)
{
  yslctx *lctx;
  ysle   *le;

  lctx = ctx->lctx;

  while (le = ysLstHead(lctx->sinks))
    ysSinkDestroy((yssnk *) ysLstVal(le));
  ysLstDestroy(lctx->sinks, (ysmff) 0);

  ysLstDestroy(lctx->exts, ysmFGlbFree);
  ysmGlbFree((dvoid *) lctx);
}

/*
 * BASIC PRIMITIVES
 */

/*
 * ysRecord - log a message
 */
void ysRecord(CONST char *prod, CONST char *fac, ub4 msgid, ub4 sev,
	      CONST char *assoc, ...)
{
  va_list    params;
  yslctx    *lctx;
  yssnk     *sink;
  ysle      *le;
  yslrec     rec;
  ub4        type;
  sword      narg;
  dvoid     *ptr;
  sysb8     *b8ptr;
  yslarg     args[YSLMAXARGS];
  ysluar     vals[YSLMAXARGS];

  /* check parameters */
  if (msgid & 0xffff0000)
    {
      if (!sev)
	sev = msgid >> 24, msgid &= 0xffff;
      else
	yseThrow(YS_EX_BADPARAM);
    }

  if (sev > YSLSEV_MAX)
    yseThrow(YS_EX_BADPARAM);

  /* bump sequence */
  lctx = ((ysctx *) yscGet(YSC_YSCTX))->lctx;
  lctx->seqid++;

  /* prepare the record */
  va_start(params, assoc);	/* not msgid! */
  narg = 0;

  type = va_arg(params, ub4);
  if (type == YSLARGS_ID)
    {
      rec.argvec.narg = va_arg(params, sword);
      rec.argvec.args = va_arg(params, yslarg *);
    }
  else
    {
      while (type != YSLNONE && narg < YSLMAXARGS)
	{
	  switch (type)
	    {
	    case YSLSTR_ID:
	      vals[narg].strval = va_arg(params, char *);
	      args[narg].tc = YSLSTR__TC;
	      break;
	    case YSLUB4_ID:
	      vals[narg].ub4val = va_arg(params, ub4);
	      args[narg].tc = YSLUB4__TC;
	      break;
	    case YSLSB4_ID:
	      vals[narg].sb4val = va_arg(params, sb4);
	      args[narg].tc = YSLSB4__TC;
	      break;
	    case YSLSB8_ID:
	      b8ptr = va_arg(params, sysb8 *);
	      sysb8set(&vals[narg].sb8val, b8ptr);
	      args[narg].tc = YSLSB8__TC;
	      break;
	    case YSLPTR_ID:
	      ptr = va_arg(params, dvoid *);
	      vals[narg].ptrfmt = vals[narg].ptrbuf;
	      sysePrtPC(vals[narg].ptrbuf, ptr);
	      args[narg].tc = YSLSTR__TC;
	      break;
	    case YSLOCTETS_ID:
	      vals[narg].octmax = (ub4) 0;
	      vals[narg].octlen = (ub4) va_arg(params, size_t);
	      vals[narg].octbuf = va_arg(params, ub1 *);
	      args[narg].tc = YSLOCTETS__TC;
	      break;
	    case YSLANY_ID:
	      args[narg].tc = va_arg(params, ub1 *);
	      args[narg].val = va_arg(params, dvoid *);
	      break;
	    default:
	      yseThrow(YS_EX_BADPARAM);
	      break;
	    }

	  if (type != YSLANY_ID)
	    args[narg].val = &vals[narg];
	  narg++;

	  type = va_arg(params, ub4);
	}

      rec.argvec.narg = narg;
      rec.argvec.args = args;
    }

  va_end(params);

  /* fill in the record */
  rec.prod = prod;
  rec.fac = fac;
  rec.assoc = assoc;
  rec.sev = sev;
  rec.msgid = msgid;
  rec.seqid = lctx->seqid;

  /* look for a sink */
  for (le = ysLstHead(lctx->sinks); le; le = ysLstNext(le))
    {
      sink = (yssnk *) ysLstVal(le);
      if (!sink->filtcb || sink->filtcb(sink->fusrp, sink->fes, &rec))
	sink->reccb(sink->rusrp, &rec);
    }
}

/*
 * SINK MANIPULATION
 */

/*
 * ysSinkCreate - create a sink
 */
yssnk *ysSinkCreate(CONST char *nm, ysRecordCB reccb, dvoid *rusrp)
{
  yslctx *lctx;
  yssnk  *sink;

  if (ysSinkFind(nm))
    yseThrow(YS_EX_ALREADY);

  sink = (yssnk *) ysmGlbAlloc(sizeof(yssnk), YSSNK_TAG);
  sink->nm = nm;
  sink->filtcb = (ysFilterCB) 0;
  sink->fusrp = (dvoid *) 0;
  sink->reccb = reccb;
  sink->rusrp = rusrp;
  sink->fes = ysLstCreate();

  lctx = ((ysctx *) yscGet(YSC_YSCTX))->lctx;
  sink->le = ysLstEnq(lctx->sinks, (dvoid *) sink);
  return sink;
}

/*
 * ysSinkDestroy - destroy a sink
 */
void ysSinkDestroy(yssnk *sink)
{
  yslctx *lctx;

  ysmCheck(sink, YSSNK_TAG);

  /* invoke final record callback for close */
  sink->reccb(sink->rusrp, (yslrec *) 0);

  /* destroy the sink */
  ysLstDestroy(sink->fes, (ysmff) ysFEFree);
  lctx = ((ysctx *) yscGet(YSC_YSCTX))->lctx;
  ysmGlbFree(ysLstRem(lctx->sinks, sink->le));
}

/*
 * ysSinkFind - find a sink
 */
yssnk *ysSinkFind(CONST char *nm)
{
  yslctx *lctx;
  ysle   *le;
  yssnk  *sink;

  lctx = ((ysctx *) yscGet(YSC_YSCTX))->lctx;
  for (le = ysLstHead(lctx->sinks); le; le = ysLstNext(le))
    {
      sink = (yssnk *) ysLstVal(le);
      if (!strcmp(sink->nm, nm))
	return sink;
    }

  return (yssnk *) 0;
}

/*
 * ysSinkSetFilter - set or replace filter for sink
 */
void ysSinkSetFilter(yssnk *sink, ysFilterCB filtcb, dvoid *fusrp,
		     ysFilterCB *oldfiltcb, dvoid **oldfusrp)
{
  ysmCheck(sink, YSSNK_TAG);

  if (oldfiltcb && oldfusrp)
    {
      *oldfiltcb = sink->filtcb;
      *oldfusrp = sink->fusrp;
    }

  sink->filtcb = filtcb;
  sink->fusrp = fusrp;
}

/*
 * ysSinkGetTypeId - translate typecode to base type scalar
 */
ub4 ysSinkGetTypeId(CONST ub1 *tc)
{
  switch (tc[3])
    {
    case '\3': return YSLSB4_ID;
    case '\5': return YSLUB4_ID;
    case '\022': return YSLSTR_ID;
    case '\027': return YSLSB8_ID;
    case '\023': return (tc[11] == '\012' ? YSLOCTETS_ID : YSLANY_ID);
    default: return YSLANY_ID;
    }
}

/*
 * TYPE CONVERSION REGISTRY
 */

/*
 * ysSinkRegister - register a translation extension
 */
void ysSinkRegister(CONST ub1 *tc, size_t tcsz,
		    ysSinkFmtCB fmtcb, ysSinkEncCB enccb)
{
  yslctx   *lctx;
  yslogext *ext;

  ext = ysSinkLookup(tc, TRUE);

  if (ext)
    {
      ext->fmtcb = fmtcb;
      ext->enccb = enccb;
    }
  else
    {
      ext = (yslogext *) ysmGlbAlloc(sizeof(yslogext), "yslogext");
      ext->tc = tc, ext->tcsz = tcsz, ext->fmtcb = fmtcb, ext->enccb = enccb;
      lctx = ((ysctx *) yscGet(YSC_YSCTX))->lctx;
      if (!tc)
	DISCARD ysLstEnq(lctx->exts, (dvoid *) ext);
      else
	DISCARD ysLstPush(lctx->exts, (dvoid *) ext);
    }
}

/*
 * ysSinkFmtLookup - lookup format extension
 */
ysSinkFmtCB ysSinkFmtLookup(CONST ub1 *tc)
{
  yslogext *ext;

  ext = ysSinkLookup(tc, FALSE);
  return (ext ? ext->fmtcb : (ysSinkFmtCB) 0);
}

/*
 * ysSinkEncLookup - lookup encoding extension
 */
ysSinkEncCB ysSinkEncLookup(CONST ub1 *tc)
{
  yslogext *ext;

  ext = ysSinkLookup(tc, FALSE);
  return (ext ? ext->enccb : (ysSinkEncCB) 0);
}

/*
 * ysSinkLookup - lookup a translation extension
 */
STATICF yslogext *ysSinkLookup(CONST ub1 *tc, boolean exact)
{
  yslctx   *lctx;
  ysle     *le;
  yslogext *ext;

  /* scan the current list */
  lctx = ((ysctx *) yscGet(YSC_YSCTX))->lctx;
  for (le = ysLstHead(lctx->exts); le; le = ysLstNext(le))
    {
      ext = (yslogext *) ysLstVal(le);
      if (!exact && !ext->tc)
	break;
      if ((!exact && !ext->tc) || (tc == ext->tc) ||
	  (tc && ext->tc && !memcmp(tc, ext->tc, ext->tcsz)))
	break;
    }

  return (le ? ext : (yslogext *) 0);
}

/*
 * BUILT-IN SINKS & FILTERS
 */

/*
 * ysSinkTty - terminal sink
 */
STATICF void ysSinkTty(dvoid *rusrp, yslrec *rec)
{
  ysmsgd *msgd;
  char   *bufp, buf[512], out[512];

  if (rec)
    {
      msgd = ysMsgFind(rec->prod, rec->fac);
      bufp = ysMsgGet(msgd, rec->msgid, buf, sizeof(buf));
      ysMsgFmt(out, sizeof(out), rec->argvec.narg, rec->argvec.args, bufp);
      yslError("%s-%d, %s\n", rec->prod, rec->msgid, out);
    }
}

/*
 * ysAddFilter - add filter expression to sink
 */
void ysAddFilter(yssnk *sink, CONST char *srcexpr)
{
  ysfe  *fe;

  ysmCheck(sink, YSSNK_TAG);

  fe = ysFECompile(srcexpr, sizeof(yslogfemap) / sizeof(ysfemap), yslogfemap);
  if (!fe)
    return;

  DISCARD ysLstPush(sink->fes, (dvoid *) fe);
}

/*
 * ysClearFilters - clear all filter expressions for a sink
 */
void ysClearFilters(yssnk *sink)
{
  ysmCheck(sink, YSSNK_TAG);

  ysLstDestroy(sink->fes, (ysmff) ysFEFree);
  sink->fes = ysLstCreate();
}

/*
 * ysFilterSimple - simple filter
 */
boolean ysFilterSimple(dvoid *fusrp, yslst *fes, yslrec *rec)
{
  ysle  *le;
  dvoid *vals[YSLOGFEVAL_MAX];

  vals[YSLOGFEVAL_PROD] = (dvoid *) rec->prod;
  vals[YSLOGFEVAL_FAC] = (dvoid *) rec->fac;
  vals[YSLOGFEVAL_MSGID] = &rec->msgid;
  vals[YSLOGFEVAL_SEV] = &rec->sev;
  vals[YSLOGFEVAL_ASSOC] = (dvoid *) (rec->assoc ? rec->assoc : "");
  vals[YSLOGFEVAL_SEQID] = &rec->seqid;

  for (le = ysLstHead(fes); le; le = ysLstNext(le))
    if (ysFEEval((ysfe *) ysLstVal(le), (sword) YSLOGFEVAL_MAX, vals))
      return TRUE;

  return FALSE;
}

/*
 * ysLogGetMap - return the built-in logging filter expression map
 */
CONST ysfemap *ysLogGetMap(sword *nmap)
{
  *nmap = sizeof(yslogfemap) / sizeof(ysfemap);
  return yslogfemap;
}

/*
 * ysLogMsgidParse - parse a msgid literal
 */
STATICF dvoid *ysLogMsgidParse(CONST char *str)
{
  ub4 low, high, *val;
  char *ptr;

  low = strtoul(str, &ptr, 10);
  if (*ptr == ':')
    high = strtoul(ptr + 1, &ptr, 10);
  else
    high = low;
  if (*ptr != '\0')
    return (dvoid *) 0;
  val = (ub4 *) ysmGlbAlloc(sizeof(ub4), "msgparse");
  *val = (high << 16) | low;
  return (dvoid *) val;
}

/*
 * ysLogMsgidPred - handle msg predicate
 */
STATICF boolean ysLogMsgidPred(CONST dvoid *v1, CONST dvoid *v2)
{
  ub4 range, msgid, low, high;

  range = *((ub4 *) v1);
  msgid = *((ub4 *) v2);
  low = range & 0xffff, high = range >> 16;
  return (msgid >= low && msgid <= high);
}

/*
 * ysLogSevPred - handle severity predicate
 */
STATICF boolean ysLogSevPred(CONST dvoid *v1, CONST dvoid *v2)
{
  return *((ub4 *) v2) <= *((ub4 *) v1);
}
