/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yrwrite.c - Write repository contents to a file
 *
 * NOTES
 * The format of the repository file is:
 *
 * +--------+-------------+----------+
 * | Header | String Data | Obj Data |
 * +--------+-------------+----------+
 *
 * Where the current version of the header is:
 *
 * +----------+--------+--------------+--------------+--------------------+
 * | "OMXIFR" | Vers # | # of Strings | # of Objects | Max Primitive Kind |
 * +----------+--------+--------------+--------------+--------------------+
 *
 * The "OMXIFR" is just to give the reader a prayer of telling whether or
 * not it is reading an IFR data file since I have chosen not to tie it 
 * to file name format for platform independence.
 *
 * The version number is an integer and is the I/O format version so that
 * the reading repository can figure out how to interpret the header and
 * the rest of the data.
 *
 * The maximum yrpk value is cached because primitive types are not 
 * written to the file. Instead, their primitive kind (yrpk) is used as
 * the index and all the other indices are offset by the max value of
 * meaningful yrpk. So a new server (which may know about more primitive 
 * types) to be able to interpret old data files correctly.
 *
 * The IFR objects cannot be described as something so simple as a tree.
 * There are all sorts of incestuous pointers in there. So, we first do
 * a walk over the graph to assign index positions to yrobj pointers and
 * strings we're going to emit. This is "swizzling" the pointers. We
 * don't actually replace the pointers in the repository with their
 * swizzled value because we don't want to damage the repository data.
 * Hash tables are used to retrieve the index given the pointer. 
 *
 * Once all the pointers and strings have been swizzled, the data is
 * written out. There is effectively a record for every yrobj, but
 * they're variable length, just to make life more exciting. When an
 * object is written out, all object references and strings are encoded
 * as the correponding swizzled value rather than an absolute address.
 *
 * In an effort to write the data out and read it back in a relatively
 * platform independent manner, the ysx package is used to format the
 * data stream. The resulting files are full of 0's and as such are
 * prime candidates for compression some day.
 *
 * String Data Format
 * ------------------
 * The strings are encoded as a 4 byte length, followed by the character
 * data, including the null terminator (so that simply ysxCopy will
 * retrieve an entire null-terminated C string).
 *
 * The index value 0 is reserved for null/empty strings. It is, of course,
 * not encoded in the string table.
 *
 * Currently, we're using a string table to consolidate duplicate
 * strings. It is not clear to me that we'll save enough space to make
 * this worthwhile. The most common source of duplicate strings, IMO,
 * are in the source file names, which is not a very compelling argument
 * for a string table. However, I'm speculating that there may also be
 * a fair number of duplicates for operation/attribute names. If this
 * seems not to be true, we should yank the string table and encode the
 * strings in place.
 *
 * Object Data Format
 * ------------------
 * As pointers are swizzled, each object is enqueued on a list of objects
 * which need to be dumped, so that the output can be done on something
 * nice and linear like a list and we don't have to track visits, etc.
 * The objects in the list are not in any particular order - however they
 * happened to be visited in the initial walk of the graph. Uniqueness on
 * the list is guaranteed by adding items at the same they're assigned an
 * index. Since everything is on the list, each object is dumped without 
 * visiting any embedded objects (such as the operations in an interface). 
 *
 * Embedded lists (container contents, struct fields, etc.) are encoded as 
 * a length followed by the element encodings. The ysxPut* routines are
 * used to encode everything except yoany's - yotkEncode already does them
 * so nicely, why should we re-invent it.
 *
 * Just as the 0th string entry is reserved for the empty string, the 0th
 * object entry is reserved for the repository. It is dumped primarily
 * for love of its content list. "0" overlaps with the primitive type
 * kinds, but it is yrpknull which will never turn up in an IFR dump.
 *
 * To make life easier for the poor server who has to merge the contents
 * of an IFR files into an existing repository, all the repository id's
 * and object tags (yrdk's) are dumped before the rest of the object data.
 * See yrread.c and yrmerge.c for more information on why this is A Good
 * Thing.
 *
 * HISTORY
 * 12/18/96 kcoleman	New typcode format
 * 07/08/96 kcoleman	Support for context ids on operations
 * 04/19/96 kcoleman	Switch over to ysRecord for messaging.
 * 03/20/96 kcoleman	Fix bug #351151: Crash on union with default case
 * 02/27/96 kcoleman	Major roadwork for bug #336120: Structs and unions
 *                      are scopes and can have types defined inside them.
 * 02/05/96 kcoleman	Fix bug #339807: Stupid err in string hash cmp
 *                      caused order-dependent inconsistencies in output
 * 02/02/96 kcoleman	Repository now keeps anon types on a separate list
 * 10/26/95 kcoleman	Creation
 */

#ifndef SYSX_ORACLE
#include <sysi.h>
#endif
#ifndef SYSXCD_ORACLE
#include <sysxcd.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YR_ORACLE
#include <yr.h>
#endif
#ifndef YR0_ORACLE
#include <yr0.h>
#endif

/* ---------------------------------------------------------------------- */
/*
 * yrencf - IFR encoding function. Used as a callback by yrEncList
 */
typedef void (*yrencf)( yrctx*, dvoid* p);


STATICF void yrEncStructMbr( yrctx* ctx, dvoid* p);
STATICF void yrEncList( yrctx* ctx, dvoid* l, yrencf encFunc);
STATICF void yrEncObj( yrctx* ctx, dvoid* o);
STATICF void yrEncPar( yrctx* ctx, dvoid* p);
STATICF void yrFEncString( yrctx* ctx, dvoid* str);
STATICF void yrEncUnionMbr( yrctx* ctx, dvoid* m);
STATICF void yrEncNamedObj( yrctx* ctx, yrobj* obj);
STATICF void yrWriteObj( dvoid* usrp, dvoid* elem);
STATICF ub4 yrStrToIdx( yrctx* ctx, char* s);
STATICF boolean yrxWriteBV( ysbv* bv, dvoid* usrp);
STATICF ub4 yrHashAddr(CONST dvoid* key, size_t keysz, ub4 max);
STATICF sword yrHashEqAddr( dvoid* elm, dvoid* key, size_t keysz);
STATICF sword yrStrHashEq( dvoid* elm, dvoid* key, size_t keysz);
STATICF ub4 yrStrSwizzle( yrctx* ctx, char* s);
STATICF void yrSwizzle( yrctx* ctx, yrobj* obj);
STATICF void yrSwizzleNamedObj( yrctx* ctx, yrobj* obj);


externdef ysidDecl( YR_EX_WRITE_FAIL) = "::YR_EX_WRITE_FAIL";
externdef ysidDecl( YR_EX_OPEN_FAIL) = "::YR_EX_OPEN_FAIL";


/* ---------------------------------------------------------------------- */
/*
 * yrEncString - encode a string
 *
 * Function form is offered for use as a callback with yrEncList.
 */
STATICF void yrFEncString( yrctx* ctx, dvoid* str)
{
  ysxPutUB4( ctx->xstr, yrStrToIdx( ctx, (char*)str));
}

#define yrEncString( ctx, str)  \
    ysxPutUB4( (ctx)->xstr, yrStrToIdx( (ctx), (str)))


/* ---------------------------------------------------------------------- */
/*
 * yrxWriteBV - ysxEncodeToStream callback for dumping IFR contents.
 *
 * This allows us to stream the IFR data to a file as a single operation
 * using ysxEncodeToStream. YsxDecodeToStream MUST be used to read it 
 * back in.
 *
 * <usrp> is a pointer to the IFR context. Grab the file pointer from 
 * there and write the contents of the buffer vector out to a file. 
 * The buffer vector is unchanged after this operation. Encoding is 
 * never stopped by this routine. It is expected that whoever kicks 
 * things off by calling ysxEncodeToStream the first time will call 
 * ysxDecEnd.
 */
STATICF boolean yrxWriteBV( ysbv* bv, dvoid* usrp)
{
  ub4 nbytes;
  yrctx* ctx = (yrctx*) usrp;

  if ( bv->len == 0 )
    return FALSE;
  nbytes = (ub4) sysfpWrite( ctx->fp, bv->buf, bv->len);
  if ( nbytes != bv->len )
    return FALSE;
  else
    return TRUE;
}


/* ---------------------------------------------------------------------- */
/*
 * yrHashAddr - hash key computation for addresses.
 *
 */
STATICF ub4 yrHashAddr(CONST dvoid* key, size_t keysz, ub4 max)
{
  ub4 hash = 0;
  CONST ub1* p = (ub1*) key;
  ub4 i;

  for ( i = 0; i < keysz; i++ )
    hash += p[i];

  return hash % max;
}


/* ---------------------------------------------------------------------- */
/*
 * yrHashEqAddr - hash key comparison function for our pointer hash
 *   keys. Amounts to simple comparison of key to the stashed pointer.
 */
STATICF sword yrHashEqAddr( dvoid* elm, dvoid* key, size_t keysz)
{
  return !(((yrwrtblk*)elm)->ptr == key);
}


/* ---------------------------------------------------------------------- */
/*
 * yrSwizzle - swizzle a pointer. That is, transform it into a
 *   non-pointer reference we can resolve when we dump and load the IFR.
 */
STATICF boolean yrObjSwizzle( yrctx* ctx, yrobj* p)
{
  yrwrtblk* idx;

  idx = (yrwrtblk*) ysHshFind( ctx->objs.wrt.tbl, (dvoid*) p, sizeof(p));
  if ( idx == (yrwrtblk*)0 )
  {
    idx = (yrwrtblk*) ysmGlbAlloc( sizeof(yrwrtblk), "yrhash");
    if ( yrGetKind(p) == yrdkRepository )
    {
      idx->recnum = 0;
      ysLstEnq( ctx->objs.wrt.list, (dvoid*) p);
    }
    else if ( yrGetKind(p) == yrdkPrimitive )
      idx->recnum = yrPrimData(p).kind;
    else
    {
      idx->recnum = ysLstCount( ctx->objs.wrt.list) + ctx->maxPrim +1;
      ysLstEnq( ctx->objs.wrt.list, (dvoid*) p);
    }
    idx->ptr = (dvoid*) p;
    ysHshIns( ctx->objs.wrt.tbl, p, sizeof(p), (dvoid*) idx);
    return FALSE;
  }
  else
    return TRUE;
}


/* ---------------------------------------------------------------------- */
/*
 * yrStrHashEq - compare two strings used as hash keys
 */
STATICF sword yrStrHashEq( dvoid* elm, dvoid* key, size_t keysz)
{
  return (sword) strcmp( (char*)((yrwrtblk*)elm)->ptr, (CONST char*) key);
}


/* ---------------------------------------------------------------------- */
/*
 * yrStrSwizzle - swizzle a pointer to a string. i.e. put the string in
 *   the string hash table.
 */
STATICF ub4 yrStrSwizzle( yrctx* ctx, char* s)
{
  yrwrtblk* idx;
  size_t len;

  if ( (s == (char*)0) || (*s == 0) )
    return 0;
  len = (size_t) strlen(s);
  idx = (yrwrtblk*) ysHshFind( ctx->strs.wrt.tbl, (dvoid*) s, len);
  if ( idx == (yrwrtblk*)0 )
  {
    idx = (yrwrtblk*) ysmGlbAlloc( sizeof(yrwrtblk), "yrhash");
    ysLstEnq( ctx->strs.wrt.list, (dvoid*) s);
    idx->recnum = ysLstCount( ctx->strs.wrt.list);
    idx->ptr = (dvoid*) s;
    ysHshIns( ctx->strs.wrt.tbl, (dvoid*)s, len, (dvoid*) idx);
  }
  return idx->recnum;
}


/* ---------------------------------------------------------------------- */
/*
 * yrStrToIdx - Map a string pointer to it's record number
 */
STATICF ub4 yrStrToIdx( yrctx* ctx, char* s)
{
  yrwrtblk* idx;
  size_t len;

  if ( (s == (char*)0) || (*s == 0) )
    return 0;
  len = (size_t) strlen(s);
  idx = (yrwrtblk*) ysHshFind( ctx->strs.wrt.tbl, (dvoid*) s, len);
  if ( idx )
    return idx->recnum;
  else
    return 0;
}

  
/* ---------------------------------------------------------------------- */
/*
 * yrSwizzle - Swizzle all the pointers in a yrobj. Recursively walks
 *   an IFR object and maps all pointers to fixed indices.
 *
 * We never dump: 
 *   the repository backlink
 *   typecodes (they get recreated at runtime)
 *   prefixes (they're specific to compilation)
 *   usrp (belongs to the compiler only)
 */
STATICF void yrSwizzle( yrctx* ctx, yrobj* obj)
{
  ysle* le;

  if ( yrObjSwizzle( ctx, obj) )
    return;
  switch ( yrGetKind(obj) )
  {
    case yrdkRepository:
      /*
       * Ignore repository id, name, defined_in, and repository
       @@ Should the repository have a name? probably not. 
       */
      yrStrSwizzle( ctx, yrGetSrcName(obj));
      yrStrSwizzle( ctx, yrGetVersion(obj));
 
      for ( le = ysLstHead(yrRepData(obj)->anon); le; le = ysLstNext(le))
        yrSwizzle( ctx, (yrobj*) ysLstVal(le));
      break;     

    case yrdkAttribute:
      yrSwizzleNamedObj( ctx, obj);
      yrSwizzle( ctx, yrAttrData(obj).type);
      break;

    case yrdkConstant:
      yrSwizzleNamedObj( ctx, obj);
      yrSwizzle( ctx, yrConstData(obj).type);
      break;

    case yrdkException:
    case yrdkStruct:
        /* 
         * Don't swizzle the member list elements, just their contents
         * The written list elems are fixed size and laid down by value 
         */
      yrSwizzleNamedObj( ctx, obj);
      if ( yrStructData(obj).mbrs )
	for ( le = ysLstHead(yrStructData(obj).mbrs); le; le = ysLstNext(le))
        {
          yrstrmbr* mem = (yrstrmbr*) ysLstVal(le);
          yrStrSwizzle( ctx, mem->name);
          yrSwizzle( ctx, mem->type);
        }
      break;
    case yrdkInterface:
        /* 
         * Don't swizzle op/attr list. Recreated when file is loaded back in.
         */
      yrSwizzleNamedObj( ctx, obj);
      if ( yrInterfaceData(obj).bases )
      {
	for (le = ysLstHead(yrInterfaceData(obj).bases); le; le=ysLstNext(le))
          yrSwizzle( ctx, (yrobj*) ysLstVal(le));
      }
      break;

    case yrdkModule:
      yrSwizzleNamedObj( ctx, obj);
      break;

    case yrdkOperation:
      yrSwizzleNamedObj( ctx, obj);
      yrSwizzle( ctx, yrOpData(obj).rettype);
      if ( yrOpData(obj).raises )
      {
        for ( le = ysLstHead( yrOpData(obj).raises); le; le = ysLstNext(le))
          yrSwizzle( ctx, (yrobj*) ysLstVal(le));
      }
      if ( yrOpData(obj).pars )
      {
        for ( le = ysLstHead( yrOpData(obj).pars); le; le = ysLstNext(le))
        {
          yrpar* par = (yrpar*) ysLstVal(le);
          yrStrSwizzle( ctx, par->name);
          yrSwizzle( ctx, par->type);
        }
      }
      if ( yrOpData(obj).ctxts )
      {
        for ( le = ysLstHead( yrOpData(obj).ctxts); le; le = ysLstNext(le))
        {
          yrStrSwizzle( ctx, (char*)ysLstVal(le));
        }
      }
      break;

    case yrdkAlias:
      yrSwizzleNamedObj( ctx, obj);
      yrSwizzle( ctx, yrAliasData(obj).type);
      break;

    case yrdkUnion:
      yrSwizzleNamedObj( ctx, obj);
      yrSwizzle( ctx, yrUnionData(obj).disctype);
      for ( le = ysLstHead(yrUnionData(obj).arms); le; le = ysLstNext(le))
      {
        yrunmbr* mem = (yrunmbr*) ysLstVal(le);
        yrStrSwizzle( ctx, mem->name);
        yrSwizzle( ctx, mem->type);
      }
      break;

    case yrdkEnum:
      yrSwizzleNamedObj( ctx, obj);
      for ( le = ysLstHead( yrEnumData(obj).mbrs); le; le = ysLstNext(le))
        yrSwizzle( ctx, (yrobj*) ysLstVal(le));
      break;

    case yrdkPrimitive:
    case yrdkString:
      break;

    case yrdkSequence:
      yrSwizzle( ctx, yrSeqData(obj).elmtype);
      break;

    case yrdkArray:
      yrSwizzle( ctx, yrArrayData(obj).elmtype);
      break;

    default:
      yseThrow( YR_EX_BADTYPE);
      break;
  }
  
  if ( yrIsContainer(obj) && yrGetContents(obj) )
  {
    for ( le = ysLstHead( yrGetContents(obj)); le; le = ysLstNext(le))
      yrSwizzle( ctx, (yrobj*) ysLstVal(le));
  }
}


/* ---------------------------------------------------------------------- */
/*
 * yrSwizzleNamedObj - swizzle pointers common to all named objects:
 *   source file name, repository id, object name, version, and
 *   the "defined_in" pointer. The repository, typeCode, prefix, and
 *   usrp pointers are ignored; the contents pointer is handled on a
 *   per object basis in yrSwizzle.
 */
STATICF void yrSwizzleNamedObj( yrctx* ctx, yrobj* obj)
{
  switch ( yrGetKind(obj) )
  {
    case yrdkAttribute:
    case yrdkConstant:
    case yrdkException:
    case yrdkInterface:
    case yrdkModule:
    case yrdkOperation:
    case yrdkAlias:
    case yrdkStruct:
    case yrdkUnion:
    case yrdkEnum:
      yrStrSwizzle( ctx, yrGetSrcName(obj));
      yrStrSwizzle( ctx, yrGetRepId(obj));
      yrStrSwizzle( ctx, yrGetName(obj));
      yrStrSwizzle( ctx, yrGetVersion(obj));
      yrSwizzle( ctx, yrGetDefinedIn(obj));
      break;
    default:
      break;
  }
}


/* ---------------------------------------------------------------------- */
/*
 * yrEncStructMbr - Enecode a yrstrmbr object. Used as a callback function 
 * for yrEncList.
 */

STATICF void yrEncStructMbr( yrctx* ctx, dvoid* p)
{
  yrstrmbr* mem = (yrstrmbr*) p;

  yrEncString( ctx, mem->name);
  yrEncObj( ctx, (dvoid*) mem->type);
}


/* ---------------------------------------------------------------------- */
/*
 * yrEncAny - Encode a yoany for a constant or union label
 *
 * You would like to use yotkEncode for this, but we can't because of
 * interdependcies between the compiler, the IFR, and the Object Runtime
 * Layer. Unfortunately, yotkEncode has to know about the internals of
 * of object references, so using it pulls in a lot of stuff we don't
 * want to know about.
 *
 * Our yoany's are very lightweight, so we can handle them ourselves.
 * They can only be of integer, character, boolean, floating point,
 * string, or enumeration type.
 *
 * We encode the typecode, followed by the data. This code was lifted
 * pretty much intact from yotkEncode.
 */

STATICF void yrEncAny( yrctx* ctx, yoany* any)
{
  yotkKind kind;
  ub4 len;
  const yotk* tk = any->_type;
  size_t tksz;

  kind = yotkGetKind(tk);

    /**** Encode the type code ****/
  tksz = yotkSize(tk);
  ysxPutUB4(ctx->xstr, (ub4)tksz);
  ysxCopy(ctx->xstr, (ub1*)tk, tksz);
  if ( kind == yotkAlias )
  {
    tk = yotkGetBaseType(tk);
    kind = yotkGetKind(tk);
  }

    /***** Encode the value *****/
  switch (kind)
  {
    case yotkShort:
      ysxPutUB2(ctx->xstr, (ub2) *((sb2 *) any->_value));
      break;
    case yotkUshort:
      ysxPutUB2(ctx->xstr, *((ub2 *) any->_value));
      break;
    case yotkLong:
      ysxPutUB4(ctx->xstr, (ub4) *((sb4 *) any->_value));
      break;
    case yotkUlong:
    case yotkEnum:
      ysxPutUB4(ctx->xstr, *((ub4 *) any->_value));
      break;
    case yotkBoolean:
      ysxPutUB1(ctx->xstr, (ub1) *((boolean *) any->_value));
      break;
    case yotkChar:
      ysxPutUB1(ctx->xstr, (ub1) *((char *) any->_value));
      break;
    case yotkOctet:
      ysxPutUB1(ctx->xstr, *((ub1 *) any->_value));
      break;
    case yotkString:
    {
      size_t sz;

      len = yotkGetLength(tk);
      sz = ((*(char **)any->_value) ? strlen(*((char **) any->_value)) : 0);
      if ( (len != 0) && (sz > len || sz == 0) )
        yseThrow(YR_EX_BADTYPE);
      if ( sz ) 
        sz++;
      ysxPutUB4(ctx->xstr, sz);
      if(sz)
        ysxCopy(ctx->xstr, *((ub1 **) any->_value), sz);
      break;
    }
    case yotkLongLong:
      ysxPutSB8(ctx->xstr, (sysb8 *) any->_value);
      break;
    default:
      yseThrow( YR_EX_BADTYPE);
  }
}

/* ---------------------------------------------------------------------- */
/*
 * yrEncList - Encode a yslst, using <encFunc> to encode the members.
 *   We encode a count of the number of members, followed by the members.
 */
STATICF void yrEncList( yrctx* ctx, dvoid* l, yrencf encFunc)
{
  yslst* lst = (yslst*) l;
  ysle* le;

  if ( lst )
  {
    ysxPutUB4( ctx->xstr, (ub4) ysLstCount(lst));
    for (le = ysLstHead(lst); le; le = ysLstNext(le))
      (*encFunc)(ctx, (dvoid*) ysLstVal(le));
  }
  else
    ysxPutUB4( ctx->xstr, (ub4)0);
}

/* ---------------------------------------------------------------------- */
/*
 * yrEncObj - Encode a yrobj.
 *
 * Look the object up in the hash table to map it back to it's record
 * number, then encode the record number. If the object represents a
 * primitive type, what we encode is it's yrpk (primitive kind) as a
 * ub4. The primitive types themselves are not dumped to the files
 * since any repository can recreate them.
 */
STATICF void yrEncObj( yrctx* ctx, dvoid* o)
{
  yrwrtblk* idx;
  yrobj* obj = (yrobj*) o;
  sb4 val;

  if ( yrGetKind(obj) == yrdkPrimitive )
    val = yrPrimData(obj).kind;
  else if ( yrGetKind(obj) == yrdkRepository )
    val = 0;
  else
  {
    idx = (yrwrtblk*) ysHshFind( ctx->objs.wrt.tbl, o, sizeof(o));
    if ( idx == (yrwrtblk*)0 )
      val = 0;
    else
      val = idx->recnum;
  }
  ysxPutUB4( ctx->xstr, (ub4)val);
}


/* ---------------------------------------------------------------------- */
/*
 * yrEncPar - Encode a yrpar object (mode, name, type).
 */
STATICF void yrEncPar( yrctx* ctx, dvoid* p)
{
  yrpar* par = (yrpar*) p;

  ysxPutUB4( ctx->xstr, par->mode);
  yrEncString( ctx, par->name);
  yrEncObj( ctx, (dvoid*) par->type);
}

/* ---------------------------------------------------------------------- */
/*
 * yrEncUnionMbr - Encode one arm of a union, e.g. a yrunmbr.
 *   (name, type, and label).
 */
STATICF void yrEncUnionMbr( yrctx* ctx, dvoid* m)
{
  yrunmbr* mem = (yrunmbr*) m;

  yrEncString( ctx, mem->name);
  yrEncObj( ctx, (dvoid*) mem->type);
  yrEncAny( ctx, &(mem->label));
}

/* ---------------------------------------------------------------------- */
/*
 * yrEncNamedObj - Encode information common to all named IFR objects
 *   (e.g. excludes primitives, sequences, arrays, and strings)
 *
 * Note that the repids are emitted separately.
 */
STATICF void yrEncNamedObj( yrctx* ctx, yrobj* obj)
{
  yrEncString( ctx, yrGetSrcName(obj));
  ysxPutUB4( ctx->xstr, yrGetSrcLine(obj));
  yrEncString( ctx, yrGetName(obj));
  yrEncString( ctx, yrGetVersion(obj));
  yrEncObj( ctx, yrGetDefinedIn(obj));
}


/* ---------------------------------------------------------------------- */
/*
 * yrWriteObj - Write out a single yrobj.
 *
 * Since the ysx package does such a tidy job of streaming data together
 * in a relatively platform independent fashion, we use that to format
 * the data and then write out the resulting buffer vector.
 *
 * The signature of this function is determined by the requirements of
 * yshshwcb - the callback function for yshsh's hash table walk.
 */

STATICF void yrWriteObj( dvoid* usrp, dvoid* elem)
{
  yrctx* ctx = (yrctx*) usrp;
  yrobj* obj = (yrobj*) elem;

  ysRecord( YR_MSG(411, YR_FAC), YSLSEV_DEBUG(3), (char*)0, 
            YSLPTR(obj), YSLEND);

  switch ( yrGetKind(obj) )
  {
    case yrdkAttribute:
      yrEncNamedObj( ctx, obj);
      ysxPutUB4( ctx->xstr, (ub4) yrAttrData(obj).mode);
      yrEncObj( ctx, yrAttrData(obj).type);
      break;
    case yrdkConstant:
      yrEncNamedObj( ctx, obj);
      yrEncObj( ctx, yrConstData(obj).type);
      yrEncAny( ctx, &yrConstData(obj).val);
      break;
    case yrdkException:
    case yrdkStruct:
      yrEncNamedObj( ctx, obj);
      yrEncList( ctx, yrGetContents(obj), yrEncObj);
      yrEncList( ctx, yrStructData(obj).mbrs, yrEncStructMbr);
      break;
    case yrdkInterface:
      yrEncNamedObj( ctx, obj);
      ysxPutUB1( ctx->xstr, (ub1) yrInterfaceData(obj).defined);
      yrEncList( ctx, yrInterfaceData(obj).bases, yrEncObj);
      yrEncList( ctx, yrGetContents(obj), yrEncObj);
      break;
    case yrdkModule:
      yrEncNamedObj( ctx, obj);
      yrEncList( ctx, yrGetContents(obj), yrEncObj);
      break;
    case yrdkOperation:
      yrEncNamedObj( ctx, obj);
      ysxPutUB4( ctx->xstr, (ub4) yrOpData(obj).mode);
      yrEncObj( ctx, yrOpData(obj).rettype);
      yrEncList( ctx, yrOpData(obj).raises, yrEncObj);
      yrEncList( ctx, yrOpData(obj).pars, yrEncPar);
      yrEncList( ctx, yrOpData(obj).ctxts, yrFEncString);
      break;
    case yrdkAlias:
      yrEncNamedObj( ctx, obj);
      yrEncObj( ctx, yrAliasData(obj).type);
      break;
    case yrdkUnion:
      yrEncNamedObj( ctx, obj);
      yrEncList( ctx, yrGetContents(obj), yrEncObj);
      yrEncObj( ctx, yrUnionData(obj).disctype);
      yrEncList( ctx, yrUnionData(obj).arms, yrEncUnionMbr);
      break;
    case yrdkEnum:
      yrEncNamedObj( ctx, obj);
      yrEncList( ctx, yrEnumData(obj).mbrs, yrEncObj);
      break;
    case yrdkString:
      ysxPutUB4( ctx->xstr, yrStringData(obj).bound);
      break;
    case yrdkSequence:
      ysxPutUB4( ctx->xstr, yrSeqData(obj).bound);
      yrEncObj( ctx, yrSeqData(obj).elmtype);
      break;
    case yrdkArray:
      ysxPutUB4( ctx->xstr, yrArrayData(obj).length);
      yrEncObj( ctx, yrArrayData(obj).elmtype);
      break;
    case yrdkRepository:
      yrEncList( ctx, yrRepData(obj)->anon, yrEncObj);
      yrEncList( ctx, yrGetContents(obj), yrEncObj);
      break;
    case yrdkPrimitive:
      break;
    default:
      yseThrow( YR_EX_BADTYPE);
      break;
  }
}


/* ---------------------------------------------------------------------- */

STATICF void yrFreeCtx( yrctx* ctx)
{
  if ( ctx->objs.wrt.tbl )
    ysHshDestroy( ctx->objs.wrt.tbl);
  if ( ctx->objs.wrt.list )
    ysLstDestroy( ctx->objs.wrt.list, (ysmff)0);
  if ( ctx->strs.wrt.tbl )
    ysHshDestroy( ctx->strs.wrt.tbl);
  if ( ctx->strs.wrt.list )
    ysLstDestroy( ctx->strs.wrt.list, (ysmff)0);
  sysfpClose( ctx->fp);
}

/* ---------------------------------------------------------------------- */
/*
 * yrWrite - Write out all or part of the repository contents to <fn>.
 *
 * To write out the whole repository, <root> should be a yrdkRepository
 * object.
 *
 * If <fn> cannot be opened for writing, YR_EX_OPEN_FAIL is raised.
 */
void yrWrite( yrobj* root, CONST char* fn)
{
  noreg yrctx ctx;
  CONST char* errtxt;
  noreg ysbv bv = {0,0};
  char* s;
  yrobj* o;
  ysle* le;

  NOREG(ctx);
  CLRSTRUCT( ctx);
  NOREG(bv);
  ctx.maxPrim = YR_MAX_PRIM;   /* how many slots are reserved for primitives */

    /***** Open the output file *****/
  ctx.fp = sysfpOpen( fn, "w", SYSFPKIND_BINARY, &errtxt);
  if ( !ctx.fp )
    yseThrowObj( YR_EX_OPEN_FAIL, errtxt);

  yseTry
  {
      /***** Swizzle all the object and string pointers *****/
    
    ysRecord( YR_MSG(412, YR_FAC), YSLSEV_DEBUG(1), (char*)0, 
              YSLSTR(ctx.fp), YSLEND);
    ctx.objs.wrt.tbl = ysHshCreate( 255, yrHashAddr, yrHashEqAddr, 
                                    ysmFGlbFree);
    ctx.objs.wrt.list = ysLstCreate();

    ctx.strs.wrt.tbl = ysHshCreate( 255, ysHshKey, yrStrHashEq, ysmFGlbFree);
    ctx.strs.wrt.list = ysLstCreate();
    yrSwizzle( (yrctx*) &ctx, root);

      /***** Set up encoding buffer *****/
    bv.len = YRX_BUFF_SZ;
    bv.buf = ysmGlbAlloc( YRX_BUFF_SZ, "yrxbuff");
    ctx.xstr = ysxEncodeToStream( yrxWriteBV, (ysbv*)&bv, (dvoid*)&ctx);
  }
  yseCatchAll
  {
    yrFreeCtx( (yrctx*) &ctx);
    if ( bv.buf )
      ysmGlbFree((dvoid*)bv.buf);
  }
  yseEnd;

    if ( yrRepData(root->repository)->trace >= 2 )
    {
      ysle* le;
      char* nm;
      sword i;
 
      ysRecord( YR_MSG(403, YR_FAC), YSLSEV_DEBUG(2), (char*)0, 
                YSLSTR("STRING"), YSLEND);
      for ( i = 1, le = ysLstHead(ctx.strs.wrt.list); le; 
           i++, le = ysLstNext(le) )
        ysRecord( YR_MSG(404, YR_FAC), YSLSEV_DEBUG(2), (char*)0, 
                  YSLSB4(i), YSLPTR(ysLstVal(le)),
                  YSLSTR((char*) ysLstVal(le)), YSLEND);
      ysRecord( YR_MSG(405, YR_FAC), YSLSEV_DEBUG(2), (char*)0, 
                YSLSTR("STRING"), YSLEND);

      ysRecord( YR_MSG(403, YR_FAC), YSLSEV_DEBUG(2), (char*)0, 
                YSLSTR("OBJECT"), YSLEND);
      for ( i = 0, le = ysLstHead(ctx.objs.wrt.list); le; 
                i++, le = ysLstNext(le))
      {
        nm = yrGetAbsoluteName( (yrobj*) ysLstVal(le));
        if ( nm )
        {
          ysRecord( YR_MSG(406, YR_FAC), YSLSEV_DEBUG(2), (char*)0, 
                    YSLSB4(i), YSLPTR(ysLstVal(le)), YSLSTR(nm), YSLEND);
          ysmGlbFree( (dvoid*)nm);
        }
        else
          ysRecord( YR_MSG(406, YR_FAC), YSLSEV_DEBUG(2), (char*)0, 
                    YSLSB4(i), YSLSTR("<anonymous>"), YSLEND);
      } 
      ysRecord( YR_MSG(405, YR_FAC), YSLSEV_DEBUG(2), (char*)0, 
                YSLSTR("OBJECT"), YSLEND);
    }

    /* Before this point, we don't have to care about xstr for cleanup */

  yseTry
  {
      /***** Emit the header: Version info, obj and string count *****/
    ysRecord( YR_MSG(413, YR_FAC), YSLSEV_DEBUG(1), (char*)0, 
              YSLSTR(ctx.fp), YSLUB4(YR_IO_VERS), YSLEND);
    ysxCopy( ctx.xstr, (ub1*) YR_IO_TAG, YR_IO_TAG_SZ);
    ysxPutUB4( ctx.xstr, YR_IO_VERS);
    ysxPutUB4( ctx.xstr, ysLstCount( ctx.strs.wrt.list));
    ysxPutUB4( ctx.xstr, ysLstCount( ctx.objs.wrt.list));
    ysxPutUB4( ctx.xstr, ctx.maxPrim);

      /***** Write the String table *****/
    ysRecord( YR_MSG(414, YR_FAC), YSLSEV_DEBUG(1), (char*)0,
              YSLSTR(ctx.fp), YSLEND);
    while ( (s = (char*) ysLstDeq( ctx.strs.wrt.list)) )
    {
      ub4 len = strlen(s) + 1;
      ysxPutUB4( ctx.xstr, len);
      ysxCopy( ctx.xstr, (ub1*) s, len);
    }

      /***** Write the repository id's and obj kinds *****/
    ysRecord( YR_MSG(415, YR_FAC), YSLSEV_DEBUG(1), (char*)0,
              YSLSTR(ctx.fp), YSLEND);
    for ( le = ysLstHead( ctx.objs.wrt.list); le; le = ysLstNext(le) )
    {
      yrobj* obj = (yrobj*) ysLstVal(le);

      switch (yrGetKind( obj))
      {
        case yrdkRepository:
        case yrdkSequence:
        case yrdkArray:
        case yrdkString:
          ysxPutUB4( ctx.xstr, yrGetKind( obj));
          ysxPutUB4( ctx.xstr, (ub4)0);
          break;
        case yrdkPrimitive:
          break;    /* actually, this should never happen */
        default:
          ysxPutUB4( ctx.xstr, yrGetKind( obj));
          ysxPutUB4( ctx.xstr, yrStrToIdx((yrctx*) &ctx, yrGetRepId(obj)));
          break;
      }
    }
 
      /***** Write the object data *****/
    ysRecord( YR_MSG(416, YR_FAC), YSLSEV_DEBUG(1), (char*)0,
              YSLSTR(ctx.fp), YSLEND);
    while ( (o = (yrobj*) ysLstDeq( ctx.objs.wrt.list)) )
    {
      yrWriteObj( (dvoid*)&ctx, o);
    }

    ysxEncEnd( ctx.xstr, (ysbv**)0, (sword*)0);
  }
  yseCatch( YS_EX_ENCODEERROR)
  {
    /* assume we can't call ysxEncEnd if this has happened */
    ysRecord( YR_MSG(417, YR_FAC), YSLSEV_DEBUG(1), (char*)0,
              YSLSTR(ctx.fp), YSLEND);
    if ( bv.buf )
      ysmGlbFree((dvoid*)bv.buf);
    yrFreeCtx( (yrctx*) &ctx);
    yseRethrow;
  }
  yseCatchAll
  {
    ysxEncEnd( ctx.xstr, (ysbv**)0, (sword*)0);
    if ( bv.buf )
      ysmGlbFree((dvoid*)bv.buf);
    yrFreeCtx( (yrctx*) &ctx);
    yseRethrow;
  }
  yseEnd;

  ysmGlbFree((dvoid*)bv.buf);
  sysfpClose( ctx.fp);
  yrFreeCtx( (yrctx*) &ctx);
}
