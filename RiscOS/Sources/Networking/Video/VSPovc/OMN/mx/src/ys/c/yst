/*
 * Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yst.c - Portable Library Level Threads Package Implementation
 */

#ifndef SYSI_ORACLE
# include <sysi.h>
#endif

#ifndef SYST_ORACLE
# include <syst.h>
#endif

#ifndef YST_ORACLE
# include <yst.h>
#endif

#ifndef YSE_ORACLE
# include <yse.h>
#endif

#ifndef YSLST_ORACLE
# include <yslst.h>
#endif

/*
 * PRIVATE TYPES AND CONSTANTS
 */

/* Unique tags for memory manager */
static   ysmtagDecl( YstGlobal ) = "ystGlobal";
static   ysmtagDecl( YstThread ) = "ystThread";

/* Error frame ids */
static   ysidDecl( YST_EX_UNCAUGHT ) = "yst::uncaught";

/* Thread context structure */
struct ystThd
{
  sysejb   jmpBuf;                        /* sysejb for thread context saves */
  void   (*func)( dvoid  *arg );                    /* thread start function */
  dvoid   *arg;                                     /* thread start argument */
  dvoid   *stkhdl;                                       /* osd stack handle */
  sysb8    tid;                                                 /* thread id */
  ysle    *link;                             /* back pointer to link element */
  yslst   *curQ;                       /* pointer to queue this thread is on */
};

/* Global thread package context */
struct ystGbl
{
  ystThd  *curThd;                        /* currently running thread if any */
  sysb8    lastTid;                                        /* last thread id */
  yslst   *runq;                                                /* run queue */
  yslst   *suspendq;                                      /* suspended queue */
  ub4      totalStkMem;                    /* total memory for thread stacks */
  sysejb   mainJmpBuf;                              /* main line jump buffer */
  ystThd  *freeThd;                                        /* thread to free */
};
typedef struct ystGbl   ystGbl;

/*
 * PRIVATE FUNCTIONS
 */

/*
 * Internal routine to transfer control to another thread or back to
 * the Mainline if no more threads to run.
 */
STATICF void   ystSwitch( ystGbl  *gbl, ystThd *thd )
{
  sb4   jumped;                                               /* long jumped */

  /* Save current thread context */
  jumped = (sb4)syseSet(gbl->curThd->jmpBuf);

  /* If we syseJmp'ed back here, new thread is active so just return */
  if (jumped)
  {
    /* See if the thread we just left needs to be freed */
    if (gbl->freeThd)
    {
      systStkFree(gbl->freeThd->stkhdl);
      ysmGlbFree((dvoid *)gbl->freeThd);
      gbl->freeThd = (ystThd *) 0;
    }
  }
  else
  {
    /* Switch to next thread */
    if (ysLstCount(gbl->runq) == 0)
    {
      /* All threads have exited including the mainline, exit process */
      ysePanic(YS_EX_SHUTDOWN);
    }
    else
    {
      /* Switch directly to another thread if it is on the run queue */
      if (thd && (thd->curQ == gbl->runq)) 
	gbl->curThd = (ystThd *)ysLstRem(gbl->runq, thd->link);
      /* Switch to head of run queue */
      else gbl->curThd = (ystThd *)ysLstPop(gbl->runq);
      
      syseJmp(gbl->curThd->jmpBuf, 1);
    }
  }
}

/* Internal routine to start up (dispatch) a thread for the first time */
STATICF void   ystDispatch( )
{
  ystGbl  *gbl;                                            /* global context */

  /* Get thread global context */
  gbl = (ystGbl *)yscGet(YSC_YSTCTX);
  yseTry;
  {
    /* Call the thread's main entry point */
    (*gbl->curThd->func)(gbl->curThd->arg);
  }
  yseCatchAll;
  {
    /*
     * Someone threw an uncaught exception within the thread code.
     * We could ignore it and just exit the thread but then coding
     * errors might lead to thread's inexplicably dying.  So we will
     * panic to leave a trail for diagnosing the problem.
     */
    ysePanic(YST_EX_UNCAUGHT);
  }
  yseEnd;

  DISCARD ystExit();
}

/*
 * Start point for new threads.  Keep this routine as small as possible to
 * minimize the amount of stack activity so we maximize portability.  When
 * ystSwitch long jumps back here, the newly created thread's stack is
 * active and it won't actually have allocated space for local variables.
 * If need be, the OSD systStkInit can leave some fudge space on the thread
 * stack to make this work.
 */
STATICF dvoid *ystStart( sysejb   jbuf, ub4 stksiz, ub4 totalStkMem )
{
  /*
   * If called to prepare thread, do OSD inits: tweak thread's jmp_buf,
   * allocate and prepare stack.  Else we have been longjmp'ed to so
   * dispatch the thread.
   */
  if (syseSet(jbuf))
    ystDispatch();
  else
    return systStkInit(jbuf, stksiz, totalStkMem);
}

/*
 * PUBLIC FUNCTIONS
 */

/* Initialize the thread package */
sword   ystInit( ub4 totalStkMem )
{
  ystGbl  *gbl;                                            /* global context */
  ystThd  *thd;                                            /* thread context */

  /* Allocate and initialize context if first time thru */
  gbl = (ystGbl *)ysmGlbAlloc(sizeof(ystGbl), YstGlobal);
  DISCARD yscSet(YSC_YSTCTX, (dvoid *)gbl);

  /* Clear memory */
  DISCARD memset((dvoid *)gbl, 0, sizeof(ystGbl));

  /* Set up run and suspend queues */
  gbl->runq     = ysLstCreate();
  gbl->suspendq = ysLstCreate();

  /* Save memory info */
  gbl->totalStkMem = totalStkMem;

  /* Set up mainline as first thread */
  thd = (ystThd *)ysmGlbAlloc(sizeof(ystThd), YstThread);

  /* Mainline thread id is 1 */
  sysb8ext(&thd->tid, 1);
  sysb8ext(&gbl->lastTid, 1);

  /* Set current thread to mainline */
  gbl->curThd = thd;

  return 0;
}

/* Terminate use of thread package */

/*
 * Note:  This does not force a ystExit() on all threads.  It is up to the
 * user of this package to make that happen.  If that is not done, the 
 * associated memory will be leaked (sizeof(ystThd) * number of non exited 
 * threads).
 */
sword ystTerm( void )
{
  ystGbl  *gbl;                                            /* global context */
  
  /* Free thread global context */
  gbl = (ystGbl *)yscGet(YSC_YSTCTX);

  /* Free the current thread */
  if (gbl->curThd) ysmGlbFree((dvoid *)gbl->curThd);

  /* Drain and free queues */
  while (ysLstCount(gbl->runq)) DISCARD ysLstPop(gbl->runq);
  ysLstDestroy(gbl->runq, ysmFGlbFree);

  while (ysLstCount(gbl->suspendq)) DISCARD ysLstPop(gbl->suspendq);
  ysLstDestroy(gbl->suspendq, ysmFGlbFree);

  /* If inited, free memory and clear context entry */
  if (gbl)
  {
    ysmGlbFree((dvoid *)gbl);
    DISCARD yscSet(YSC_YSTCTX, (dvoid *)0);
  }

  return 0;
}

/* Create a new thread and place it on the run queue */
ystThd *ystCreate( void (*func)( dvoid  *arg ), dvoid  *arg, ub4   stksiz )
{
  ystThd  *thd;                                            /* thread context */
  ystGbl  *gbl;                                            /* global context */

  /* Get thread global context */
  gbl = (ystGbl *)yscGet(YSC_YSTCTX);
  if (!gbl)
    {
      DISCARD ystInit((ub4)(256 * 1024));
      gbl = (ystGbl *)yscGet(YSC_YSTCTX);
    }

  /* Allocate thread memory for thread */
  thd = (ystThd *)ysmGlbAlloc(sizeof(ystThd), YstThread);

  /* Set the context argument to be handed to the thread function */
  thd->func = func;
  thd->arg  = arg;

  /* Bump thread id and assign to new thread */
  sysb8addb4(&gbl->lastTid, &gbl->lastTid, 1);
  sysb8set(&thd->tid, &gbl->lastTid);

  /* Set the thread's jump buffer with appropriate pc and sp */
  thd->stkhdl = ystStart(thd->jmpBuf, stksiz, gbl->totalStkMem);

  /* Enqueue on the run queue */
  thd->link = ysLstEnq(gbl->runq, (dvoid *)thd);
  thd->curQ = gbl->runq;

  return thd;
}

/* Exits current thread causing its deallocation */
sword   ystExit( )
{
  ystGbl  *gbl;                                            /* global context */

  /* Get thread global context */
  gbl = (ystGbl *)yscGet(YSC_YSTCTX);
  if (!gbl) return -1;

  /*
   * Freeing the current thread memory will also free the current stack.
   * We can't free the current stack and then call ystSwitch which might
   * push args or otherwise use the stack we just freed.  So we record that
   * we have to free the thread in ystSwitch.
   */
  gbl->freeThd = gbl->curThd;

  /* Switch to next thread or Mainline causing this thread to exit */
  ystSwitch(gbl, (ystThd *)0);

  return 0;
}

/* Return handle to current thread */
ystThd *ystSelf(void)
{
  ystGbl *gbl;                                      /* global thread context */

  /* Get thread global context */
  gbl = (ystGbl *) yscGet(YSC_YSTCTX);

  return (gbl ? gbl->curThd : (ystThd *) 0);
}

/* Format thread id */
void ystPrint(ystThd *thr, char *buf, /* ARGUSED */size_t len)
{
  /* Return thread id or 0 for mainline */
  if (thr)
    DISCARD sysb8fmt(buf, "%Ld", &thr->tid);
  else
    DISCARD strcpy(buf, "0");
}

/* Yield current thread.  Transfer to next available thread on run queue. */
void   ystYield( ystThd *thd )
{
  ystGbl  *gbl;                                            /* global context */

  /* Get thread global context */
  gbl = (ystGbl *)yscGet(YSC_YSTCTX);
  if (!gbl) return;

  /* Place current thread on end of run queue */
  gbl->curThd->link = ysLstEnq(gbl->runq, (dvoid *)gbl->curThd);
  gbl->curThd->curQ = gbl->runq;

  /* Transfer to next thread */
  ystSwitch(gbl, thd);
}

/* Suspend current thread */
void   ystSuspend( ystThd *nextThd )
{
  ystGbl  *gbl;                                            /* global context */

  /* Get thread global context */
  gbl = (ystGbl *)yscGet(YSC_YSTCTX);
  if (!gbl) return;

  /* Place current thread on end of suspend queue */
  gbl->curThd->link = ysLstEnq(gbl->suspendq, (dvoid *)gbl->curThd);
  gbl->curThd->curQ = gbl->suspendq;

  /* Transfer to next thread */
  ystSwitch(gbl, nextThd);
}

/* Resume specified thread */
void   ystResume( ystThd *thd )
{
  ystGbl  *gbl;                                            /* global context */

  /* Get thread global context */
  gbl = (ystGbl *)yscGet(YSC_YSTCTX);
  if (!gbl) return;

  /* If thread is currently suspended, activate it; otherwise do nothing */
  if (thd && (thd->curQ == gbl->suspendq))
  {
    /* Remove thread from suspend queue */
    DISCARD ysLstRem(gbl->suspendq, thd->link);

    /* Append thread to run queue */
    thd->link = ysLstEnq(gbl->runq, (dvoid *)thd);
    thd->curQ = gbl->runq;
  }
}

