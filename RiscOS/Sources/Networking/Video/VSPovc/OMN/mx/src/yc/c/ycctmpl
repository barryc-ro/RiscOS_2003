/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ycctmpl.c - generation of server skeleton for C language mapping
 *
 * NOTES
 * The soul of simplicity. Generates a skeleton implementation file and
 * matching header file. They contain either prototypes or empty
 * function bodies for each operation and attribute in the IDL file.
 * In other words, find all the ops and attrs and call yccGenFuncHdr on
 * them.
 *
 * If IAO server code generation is enabled, some of the functions get
 * full implementations instead of just skeletons. The implemented 
 * functions are determined by the presence of pragmas in the code and
 * their bodies go into a separate source file.
 *
 * HISTORY
 * 09/23/96 kcoleman	OCCS compliant header file guards in gen'd code
 * 07/15/96 kcoleman	Add resource to generate only the header
 * 07/11/96 kcoleman	Handle C/C++ keywords as IDL identifiers
 * 06/06/96 kcoleman	Bug 369357: Revamp I/O to limit line length
 * 04/17/96 kcoleman	IAO server impl code generation
 * 04/08/96 kcoleman	Use ysRecord for error reporting.
 * 03/25/96 kcoleman	Support for static typecode option.
 * 03/18/96 kcoleman	Make modules code gen objects
 * 01/04/96 kcoleman	Fixed a free mem read in yccGenIntfSkel
 * 11/29/95 kcoleman	Make sure we include yoboa.h in impl skeletons
 * 11/07/95 kcoleman	Implement distinct Oracle and ANSI naming styles
 * 10/04/95 kcoleman	Change yccGenFuncHdr to handle async headers
 * 08/10/95 kcoleman	Initial implementation
 * 07/17/95 kcoleman	Creation
 */
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCC0_ORACLE
#include <ycc0.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif

STATICF void yccGenIntfSkel( ycctx* ctx, yccfp* fp, yrobj* inf, boolean hdr);
STATICF void yccGenOpBody( ycctx* ctx, yccfp* fp, yrobj* op, 
                           boolean inherited);
STATICF void yccGenAttrGetBody( ycctx* ctx, yccfp* fp, yrobj* attr, 
                                boolean inherited);
STATICF void yccGenAttrSetBody( ycctx* ctx, yccfp* fp, yrobj* attr, 
                                boolean inherited);
STATICF void yccGenCGImplObjs(ycctx* ctx, yccfp* fp, yslst* objs, boolean hdr);


/* ---------------------------------------------------------------------- */
/*
 * ycctmpl - Driver for generation of implementation template/skeleton
 *
 * Generates a .c and .h skeleton for the user to fill in the implementation
 */
void ycctmpl(ycctx* ctx, char* base, ycfile* fd)
{
  yccfp *fp;
  yccfp* iaofp = (yccfp*)0;
  CONST char* errtxt;
  char* upbase;		/* upper case of base */
  CONST char* guardsfx;

  upbase = ycToUpper(ysStrDup(base));
  guardsfx = ((ycStyleOra(ctx)) ? "ORACLE" : "H");
  if ( !ysResGetBool( "mnidlc.tmpl-hdr-only") )
  {
    /* open temporary output file(s) */
    fp = yccfpOpen( fd[1].newtmp, "w", SYSFPKIND_NONE, &errtxt, 
                    yccGetLineLimit(ctx));
    if ( !fp )
    {
      ysRecord( YCMSG(8), YCERRSEV, YSLSTR(fd[1].target), 
                YSLSTR(errtxt), YSLEND);
      return;
    }

    if ( ysResGetBool( "mnidlc.iao-srvr-gen") )
    {
      iaofp = yccfpOpen( fd[2].newtmp, "w", SYSFPKIND_NONE, &errtxt,
                         yccGetLineLimit(ctx));
      if ( !iaofp )
      {
        ysRecord(YCMSG(8), YCERRSEV, YSLSTR(fd[2].target), 
                 YSLSTR(errtxt), YSLEND);
        yccfpClose( fp);
        return;
      }
      ((yccctx*)ctx->langctx)->iaofp_yccctx = iaofp;
    }

    /*****
     * Generate skeleton .c file 
     *****/
    yccfpSetIndent( fp, 0);
      /* produce boilerplate output */
    yccfpPrint( fp, "/* GENERATED FILE\n * %s - server skeleton\n", base);
    yccfpPrint( fp, " * from %s\n */\n\n", ctx->srcnm);
    yccGenSysIncls( ctx, fp, TRUE);
  
    if ( iaofp )
    {
      yccfpSetIndent( iaofp, 0);
      yccfpPrint( iaofp, "/* GENERATED FILE\n * %s - server ", base);
      yccfpPrint( iaofp, "implementation\n * from %s\n */\n\n", 
                  ctx->srcnm);
      yccGenSysIncls( ctx, iaofp, TRUE);
    }

    if ( ctx->objAdaptor == YCOA_BOA )
    {
      yccfpPrint( fp, "#ifndef YOBOA_ORACLE\n#include <yoboa.h>\n#endif\n");
      if ( iaofp )
        yccfpPrint( iaofp, 
                    "#ifndef YOBOA_ORACLE\n#include <yoboa.h>\n#endif\n");
    }
    else
    {
      yccfpPrint( fp, "#ifndef YOCOA_ORACLE\n#include <yocoa.h>\n#endif\n");
      if ( iaofp )
        yccfpPrint( iaofp, 
                    "#ifndef YOCOA_ORACLE\n#include <yocoa.h>\n#endif\n");
    }

      /* also include impl skeleton header file */
    yccfpPrint( fp, "#ifndef %sI_%s\n#include <%sI.h>\n#endif\n\n", 
                upbase, guardsfx, base);
    if ( iaofp )
    {
      yccfpPrint( iaofp, "#ifndef %sI_%s\n#include <%sI.h>\n#endif\n"
                  "#ifndef MZADB_ORACLE\n#include <mzadb.h>\n#endif\n\n",
                  upbase, guardsfx, base);
    }

    yccfpPrint( fp, "EXTC_START\n\n");
    if ( iaofp )
      yccfpPrint( iaofp, "EXTC_START\n\n");

      /* generate the skeletons */
    yccGenCGImplObjs( ctx, fp, ctx->newobjs, FALSE);

    yccfpPrint( fp, "\nEXTC_END\n");
    if ( iaofp )
      yccfpPrint( iaofp, "\nEXTC_END\n");
    yccfpClose(fp);
    if ( iaofp )
      yccfpClose( iaofp);
  }

    /*****/
    /* Generate skeleton header */
    /*****/
  fp = yccfpOpen(fd[0].newtmp, "w", SYSFPKIND_NONE, &errtxt,
                 yccGetLineLimit(ctx));
  if ( !fp )
  {
    ysRecord( YCMSG(8), YCERRSEV, YSLSTR(fd[0].target), 
              YSLSTR(errtxt), YSLEND);
    return;
  }

    /* produce boilerplate output */
  yccfpPrint( fp, "/* GENERATED FILE\n * %s - server skeleton header\n", base);
  yccfpPrint( fp, " * from %s\n */\n\n", ctx->srcnm);
  yccfpPrint( fp, "#ifndef %sI_%s\n#define %sI_%s\n\n", 
              upbase, guardsfx, upbase, guardsfx);
  yccGenSysIncls( ctx, fp, FALSE);
  yccfpPrint( fp, "#ifndef %s_%s\n#include <%s.h>\n#endif\n\n",
              upbase, (ycStyleOra(ctx)) ? "ORACLE" : "IDL",
              base);
  yccfpPrint( fp, "EXTC_START\n\n");

    /* generate the skeletons */
  yccGenCGImplObjs( ctx, fp, ctx->newobjs, TRUE);
  yccfpPrint( fp, "\nEXTC_END\n#endif /* %sI_%s */\n", upbase, guardsfx);
  ysmGlbFree( (dvoid*)upbase);
  yccfpClose(fp);
}


/* ---------------------------------------------------------------------- */
/*
 * yccGenCGImplObjs - Generate implementation skeleton for code gen objects
 *
 * Lots of hoop jumping to deal with modules and interface forward decls...
 * see ycsem.c, ycsAddObj. Never use the source file name as a means of
 * deciding whether or not to generate code for a module: The source file
 * name of the module in the IFR is always the first occurrence of the
 * module, so it may appear to be from include file, but we may be gen'ing
 * code for a piece of the module in the current source file. So, always
 * recurse on modules, thereby checking the source file name at the content
 * level. It sucks, but there's not a thing you can do about it.
 */

STATICF void yccGenCGImplObjs( ycctx* ctx, yccfp* fp, yslst* objs, boolean hdr)
{
  ysle* le;

  if ( objs )
  {
    for ( le = ysLstHead(objs); le; le = ysLstNext(le))
    {
      ycgobj* cgobj = (ycgobj*) ysLstVal(le);

      if ( yrGetKind( cgobj->ifrobj) == yrdkModule )
        yccGenCGImplObjs( ctx, fp, cgobj->objlist, hdr);
      else if ( !ycShouldGenCode(ctx, cgobj->ifrobj) )
        continue;	/* from an include file. Don't gen code */
      else if ( (yrGetKind(cgobj->ifrobj) == yrdkInterface) &&
           !(cgobj->flags & YCG_FWD) )
	yccGenIntfSkel( ctx, fp, cgobj->ifrobj, hdr);
    }
  }
}
/* ---------------------------------------------------------------------- */
/*
 * yccGenIntfSkel - generate server stub code for an interface
 *
 * For all attributes and operations in an interface, generate server
 * stub functions. Then generate a definition for the <intf>__stubs
 * array.
 */

STATICF void yccGenIntfSkel( ycctx* ctx, yccfp* fp, yrobj* inf, boolean hdr)
{
  ysle* le;
  CONST char* base = (char*) 0;
  yslst* pars = (yslst*)0;
  yrpar param;
  yslst* opnames = (yslst*)0;           /* abs names of op/attr funcs */
  ycsym* syminfo;
  yslst* all;

  if ( ycIsCorbaObject( ctx, inf) || !yrGetContents(inf) ) 
    return;

  syminfo = ycSymLookup( ctx->symtbl, inf);
  all = (syminfo ? syminfo->opsNattrs : (yslst*)0);
  if ( ycIsEmptyLst(all) )
    return;

  base = yccGetAbsoluteName( ctx, inf, (yrobj*)0);
  if ( !hdr )
    opnames = ysLstCreate();

    /***** init constant part of attr declarations *****/
  pars = ysLstCreate();
  param.name = "val";		/* same for every attr */
  param.mode = YOMODE_IN;	/* same for every attr */
  ysLstEnq( pars, (dvoid*) &param);

  /***** generate server stub functions for ops *****/
  for (le = ysLstHead(all); le; le = ysLstNext(le))
  {
    yrobj* obj = (yrobj*) ysLstVal(le);
    yrobj* parent = yrGetDefinedIn(obj);
    boolean inherited = (parent != inf);
    boolean hasPragma = FALSE;

    if ( yrGetKind(obj) == yrdkOperation )
    {
      CONST char* name = yccGetAbsoluteName( ctx, obj, inf);
      char* opName = (char*) ysmGlbAlloc( strlen(name) + 3, "op");

      if ( yccIAOfp(ctx) )         /* check for pragmas on this op */
      {
        syminfo = ycSymLookup( ctx->symtbl, obj);
        if ( syminfo && !ycIsEmptyLst( syminfo->pragmas) )
          hasPragma = (((ycprg*)ysLstVal( ysLstHead(syminfo->pragmas)))->kind
                           != ycprg_dbAttr);
      }

      DISCARD ysFmtStr( opName, "%s_i", name);

      if ( hdr )
      {
        if ( hasPragma && inherited )
        {                            /* make base impl func has a prototype */
          CONST char* basenm = yccGetAbsoluteName( ctx, obj, (yrobj*)0);
          char* bopnm = (char*) ysmGlbAlloc( strlen(name) + 3, "op");

          DISCARD ysFmtStr( bopnm, "%s_i", basenm);
          yccGenFuncHdr( ctx, fp, yrOpData(obj).rettype, parent, bopnm, 
                         yrOpData(obj).pars, yrOpData(obj).ctxts, 
                         FALSE, yccfnk_normal);
	  yccfpPrint( fp, ";\n");
          ysmGlbFree( (dvoid*)bopnm);
        }
        yccGenFuncHdr( ctx, fp, yrOpData(obj).rettype, inf, opName, 
                       yrOpData(obj).pars, yrOpData(obj).ctxts, 
                       FALSE, yccfnk_normal);
	yccfpPrint( fp, ";\n");
        ysmGlbFree( (dvoid*)opName);
      }
      else
      {
        if ( hasPragma )
        {
          yccGenFuncHdr( ctx, yccIAOfp(ctx), yrOpData(obj).rettype, 
                         inf, opName, yrOpData(obj).pars, yrOpData(obj).ctxts,
                         FALSE, yccfnk_normal);
          yccGenOpBody( ctx, yccIAOfp(ctx), obj, inherited );
        }
        else
        {
          yccGenFuncHdr( ctx, fp, yrOpData(obj).rettype, inf, opName, 
                         yrOpData(obj).pars, yrOpData(obj).ctxts, 
                         FALSE, yccfnk_normal);
	  yccfpPrint( fp, "\n{\n}\n\n");
        }
	DISCARD ysLstEnq( opnames, (dvoid*) opName);
      }
      if ( inf != yrGetDefinedIn(obj) )
	ysmGlbFree( (dvoid*)name);
    }
    else                                    /***** attribute functions *****/
    {
      char* attrName;
      CONST char* basenm = (char*)0;

      attrName = (char*) ysmGlbAlloc( strlen(base) + 
                strlen(yrGetName(obj)) + 9, 
		"attrName"); 	/* "__get_" + "_i" + 1 == 9 */

      /***** gen get skel *****/
      if ( yccIAOfp(ctx) )
      {
        syminfo = ycSymLookup( ctx->symtbl, obj);
        if ( syminfo && !ycIsEmptyLst( syminfo->pragmas) )
          hasPragma = ((ycprg*)ysLstVal( ysLstHead(syminfo->pragmas)))->kind
                           == ycprg_dbAttr;
      }
      DISCARD ysFmtStr( attrName, "%s__get_%s_i", base, yrGetName(obj));
      if ( hdr )
      {
        if ( hasPragma && inherited )
        {                            /* need prototype for base impl func */
          char* baseAttr;

          basenm = yccGetAbsoluteName( ctx, parent, (yrobj*)0);
          baseAttr = (char*) ysmGlbAlloc( strlen(basenm) + 
                                          strlen(yrGetName(obj)) + 9, 
		                          "attrName");
          DISCARD ysFmtStr(baseAttr, "%s__get_%s_i", basenm, yrGetName(obj));
          yccGenFuncHdr( ctx, fp, yrAttrData(obj).type, parent, 
                         baseAttr, (yslst*)0, (yslst*)0, FALSE, yccfnk_normal);
          yccfpPrint( fp, ";\n");
          ysmGlbFree( (dvoid*)baseAttr);
        }
        yccGenFuncHdr( ctx, fp, yrAttrData(obj).type, inf, attrName, 
                       (yslst*)0, (yslst*)0, FALSE, yccfnk_normal);
	yccfpPrint( fp, ";\n");
        ysmGlbFree( (dvoid*)attrName);
      }
      else
      {
        if ( hasPragma )
        {
          yccGenFuncHdr( ctx, yccIAOfp(ctx), yrAttrData(obj).type, inf, 
                         attrName, (yslst*)0, (yslst*)0, FALSE, yccfnk_normal);
          yccGenAttrGetBody( ctx, yccIAOfp(ctx), obj, inherited);
        }
        else
        {
          yccGenFuncHdr( ctx, fp, yrAttrData(obj).type, inf, attrName, 
                         (yslst*)0, (yslst*)0, FALSE, yccfnk_normal);
	  yccfpPrint( fp, "\n{\n}\n\n");
        }
	DISCARD ysLstEnq( opnames, (dvoid*) attrName);
      }

      /***** gen set skel *****/
      if ( yrAttrData(obj).mode != YR_ATTR_RO )
      {
        attrName = (char*) ysmGlbAlloc( strlen(base) + 
                       strlen(yrGetName(obj)) + 9, 
	  	        "attrName"); 	/* "__set_" + "_i" + 1 == 9 */
	DISCARD ysFmtStr( attrName, "%s__set_%s_i", base, yrGetName(obj));

	param.type = yrAttrData(obj).type;
	if ( hdr )
	{
          if ( hasPragma && inherited )
          {                            /* need prototype for base impl func */
            char* baseAttr;
            /* basenm already initialized by get generation */

            baseAttr = (char*) ysmGlbAlloc( strlen(basenm) + 
                                            strlen(yrGetName(obj)) + 9, 
		                            "attrName");
            DISCARD ysFmtStr( baseAttr, "%s__set_%s_i", basenm, 
                              yrGetName(obj));
            yccGenFuncHdr( ctx, fp, (yrobj*)0, parent, baseAttr, pars, 
                           (yslst*)0, FALSE, yccfnk_normal);
            yccfpPrint( fp, ";\n");
            ysmGlbFree( (dvoid*)baseAttr);
          }
	  yccGenFuncHdr( ctx, fp, (yrobj*)0, inf, attrName, pars, 
                         (yslst*)0, FALSE, yccfnk_normal);
	  yccfpPrint( fp, ";\n");
	  ysmGlbFree( (dvoid*)attrName);
	}
	else
	{
          if ( hasPragma )
          {
	    yccGenFuncHdr( ctx, yccIAOfp(ctx), (yrobj*)0, inf, attrName, pars,
                           (yslst*)0, FALSE, yccfnk_normal);
            yccGenAttrSetBody( ctx, yccIAOfp(ctx), obj, inherited);
          }
          else
          {
	    yccGenFuncHdr( ctx, fp, (yrobj*)0, inf, attrName, pars, 
                           (yslst*)0, FALSE, yccfnk_normal);
	    yccfpPrint( fp, "\n{\n}\n\n");
          }
	  DISCARD ysLstEnq( opnames, (dvoid*) attrName);
	}
      }
    }
  }
  if ( pars )
    ysLstDestroy( pars, (ysmff)0);


    /****
     * Generate definition of __tyimpl structure.
     * IMPORTANT - be sure the order here matches the order of the
     * fields as generated by yccGenIntfDecl in ycchdr.c!
     ****/
  if ( !hdr )
  {
    char* nm;
    yccfpPrint( fp, "/*\n * Suggested definition only. It need not be\n");
    yccfpPrint( fp, " * const or static, or even defined at compile time.\n");
    yccfpPrint( fp, " */\n");
    yccfpPrint( fp, "static %sstruct %s__tyimpl %s__impl =\n {\n", 
	YCCCPTR(ctx), base, base);
    yccfpIncIndent( fp);
    while ( (nm = (char*) ysLstDeq(opnames)) )
    {
      if ( ysLstHead( opnames) )	/* there's another one */
	yccfpPrint( fp, "%s,\n", nm);
      else
	yccfpPrint( fp, "%s\n", nm);
      ysmGlbFree( (dvoid*)nm);
    }
    yccfpDecIndent( fp);
    yccfpPrint( fp, " };\n\n");
    ysLstDestroy( opnames, (ysmff)0);
  } 
}


/* ---------------------------------------------------------------------- */
/*
 * yccGenOpBody - Generate body of an operation's implementation
 *    in response to one of the IAO database pragmas.
 *
 * This may be either a list operation or a create operation. During
 * semantic analysis, we have already verified that the operation has
 * the right "shape".
 */
STATICF void yccGenOpBody( ycctx* ctx, yccfp* fp, yrobj* op, boolean inherited)
{
  ycsym* syminfo = ycSymLookup( ctx->symtbl, op);
  ycprg* prg = (ycprg*) ysLstVal( ysLstHead( syminfo->pragmas));
  yslst* pars = yrOpData(op).pars;
  ysle* le;

  yccfpPrint( fp, "\n{\n");
  yccfpIncIndent( fp);
  if ( inherited )
  {
    CONST char* name = yccGetAbsoluteName(ctx, yrGetDefinedIn(op), (yrobj*)0);

    yccfpPrint( fp, "return %s_%s_i( (%s)or, ev", 
                        name, yrGetName(op), name);
    for ( le = ysLstHead(pars); le; le = ysLstNext(le))
    {
      yccfpPrint( fp, ", ");
      yccGenSimpleName( ctx, fp, ((yrpar*)ysLstVal(le))->name);
    }
    yccfpPrint( fp, ");\n");
  }

  /***** pragma IAO_DB_LIST *****/
  else if ( prg->kind == ycprg_dbList )
  {
    yccGenParamType( ctx, fp, yrOpData(op).rettype, YOMODE_RETURN);
    yccfpPrint( fp, " _result = {0,0,0};\n\n");
    yccfpPrint( fp, "dbGetObjs( ev, or, ");
    yccGenSimpleName( ctx, fp, ((yrpar*)ysLstVal( ysLstHead( pars)))->name);
    yccfpPrint( fp, ", (%s*)&_result);\n", YCCVOID(ctx));
    yccfpPrint( fp, "return _result;\n");
  }

  /***** pragma IAO_DB_CREATE *****/
  else if ( prg->kind == ycprg_dbCreate )
  {
    ub4 i;

    yccGenParamType( ctx, fp, yrOpData(op).rettype, YOMODE_RETURN);
    yccfpPrint( fp, " _result;\n\n");
    yccfpPrint( fp, "yoany _any[%d];\n", ysLstCount(pars));
    yccfpPrint( fp, "char* _keys[%d];\n\n", ysLstCount(pars));

    for (i = 0, le = ysLstHead(prg->data.mapping); le; i++, le = ysLstNext(le))
    {
      ycprgpar* parmap = (ycprgpar*) ysLstVal(le);

      yccfpPrint( fp, "_any[%d]._type = (%s) ", 
                  i, yccGetPrimitiveName(ctx, yrpkTypeCode));
      yccGenTypeCodeName( ctx, fp, parmap->par->type);
      yccfpPrint( fp, ";\n_any[%d]._value = (%s*)%c%s;\n", i, YCCVOID(ctx), 
         yccTakeAddrOf( ctx, parmap->par->type, parmap->par->mode) ? '&' : ' ',
         parmap->par->name);
      yccfpPrint( fp, "_keys[%d] = \"%s\";\n", i, parmap->key);
    }

    yccfpPrint(fp, "dbCreObj( ev, or, %d, _any, _keys, ", ysLstCount(pars));
    yccfpPrint( fp, "(CORBA_Object*) &_result);\nreturn _result;\n");
  }
  else
    yseThrow(YC_EX_FAILURE);

  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");
}

/* ---------------------------------------------------------------------- */
/*
 * yccGenAttrSetBody - Generate body of an attribute set operation's
 *    implementation in response to the IAO_DB_ATTR pragma.
 */
STATICF void yccGenAttrSetBody( ycctx* ctx, yccfp* fp, yrobj* attr, 
                                boolean inherited)
{
  ycsym* syminfo = ycSymLookup(ctx->symtbl, attr);
  ycprg* prg = (ycprg*) ysLstVal( ysLstHead( syminfo->pragmas));
  yrobj* type = yrAttrData(attr).type;

  if ( prg->kind != ycprg_dbAttr )
    yseThrow(YC_EX_FAILURE);

  yccfpPrint( fp, "\n{\n");
  yccfpIncIndent( fp);
  if ( inherited )
  {
    CONST char* name;

    name = yccGetAbsoluteName(ctx, yrGetDefinedIn(attr), (yrobj*)0);
    yccfpPrint( fp, "%s__set_%s_i( (%s)or, ev, val);\n",
                name, yrGetName(attr), name);
  }
  else
  {
    yccfpPrint( fp, "yoany _any;\n  char* _key;\n\n");
    yccfpPrint( fp, "_any._type = (%s) ", 
                yccGetPrimitiveName( ctx, yrpkTypeCode));
    yccGenTypeCodeName( ctx, fp, type);
    yccfpPrint( fp, ";\n_any._value = (%s*)%cval;\n", YCCVOID(ctx),
                        yccTakeAddrOf( ctx, type, YOMODE_IN) ? '&' : ' ');
    yccfpPrint( fp, "_key = \"%s\";\n", prg->data.key);
    yccfpPrint( fp, "dbSetVals( ev, or, 1, &_any, &_key);\n");
  }
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");
}

/* ---------------------------------------------------------------------- */
/*
 * yccGenAttrGetBody - Generate body of an attribute get operation's
 *    implementation in response to the IAO_DB_ATTR pragma.
 */
STATICF void yccGenAttrGetBody( ycctx* ctx, yccfp* fp, yrobj* attr, 
                                boolean inherited)
{
  ycsym* syminfo = ycSymLookup(ctx->symtbl, attr);
  ycprg* prg = (ycprg*) ysLstVal( ysLstHead( syminfo->pragmas));
  yrobj* type = yrAttrData(attr).type;

  if ( prg->kind != ycprg_dbAttr )
    yseThrow(YC_EX_FAILURE);

  yccfpPrint( fp, "\n{\n");
  yccfpIncIndent( fp);
  if ( inherited )
  {
    CONST char* name;

    name = yccGetAbsoluteName(ctx, yrGetDefinedIn(attr), (yrobj*)0);
    yccfpPrint( fp, "return %s__get_%s_i( (%s)or, ev);\n",
                name, yrGetName(attr), name);
  }
  else
  {
    yccfpPrint( fp, "yoany _any;\n  char* _key;\n  ");
    yccGenParamType( ctx, fp, type, YOMODE_RETURN);
    yccfpPrint( fp, " _result;\n\n");

    yccfpPrint( fp, "_any._type = (%s) ", 
                yccGetPrimitiveName( ctx, yrpkTypeCode));
    yccGenTypeCodeName( ctx, fp, type);
    yccfpPrint( fp, ";\n_any._value = (%s*)&_result;\n", YCCVOID(ctx));
    yccfpPrint( fp, "_key = \"%s\";\n", prg->data.key);
    yccfpPrint( fp, "dbGetVals( ev, or, 1, &_any, &_key);\n");
    yccfpPrint( fp, "return _result;\n");
  }
  yccfpDecIndent( fp);
  yccfpPrint( fp, "}\n\n");
}


