/* Copyright (c) Oracle Corporation 1995.  All Rights Reserved. */

/*
  NAME
    yoidl.idl
  DESCRIPTION
    idl file for ORB callable interfaces to the object runtime.

  MODIFIED   (MM/DD/YY)
    dbrower   07/19/95 -  created.
    dbrower   11/08/95 -  module-ized, changed some units, removed
			  unused elements.
    dbrower   02/27/96 -  Add SvcStQuiesce state.  Note: proper support
			  of adminState requires callbacks in yo to user
			  code to service the request.
    dbrower   02/28/96 -  remove ysid refs; they are strings.
    dbrower   03/ 7/96 -  add object list/iterator
    dbrower   06/28/96 -  remove claimReply/claimIterator etc.
*/

#ifndef YOIDL_ORACLE
#define YOIDL_ORACLE

#ifndef YOSTD_ORACLE
#include "yostd"
#endif

/* ================================================================ */
/*                     Y O   R U N T I M E			    */
/* ================================================================ */

// The YORT "yo object runtime" module encapsulates the
// management interface to an ORB process.  There's one yort_proc
// object per process.

module yort
{
  //----------------
  // Forward Decls.

  interface proc;
  interface impl;
  interface queue;
  interface dispatcher;
  interface objIterator;
  interface claimIterator;

  typedef sequence <impl> implList;
  typedef sequence <queue> queueList;
  typedef sequence <dispatcher> dispatcherList;

  // as operState, svcState values mean
  //
  //	- SvcStDown Not running anything useful.  don't expect me to
  //		    be around.
  //	- SvcStRun  Happily servicing requests.
  //	- SvcStHalted
  //		    Halted or suspended.  I may or may not
  //		    respond to having my adminState set to clear the halt.
  //		    May or may not reject new requests.
  //	- SvcStCongested
  //		    Busy, and won't service additional requests.
  //		    Please don't send me any, because I will reject them.
  //	- SvcStQuiesce
  //		    Being quiesced; was probably in run, but will go to
  //		    halted or down at earliest good opportunity.  I should
  //		    respond to having adminState set to something else.
  //	- SvcStRestart
  //		    Coming up as soon as possible.
  //
  // when setting admin state, svcState values mean:
  //
  //	- SvcStDown
  //		    Go down as soon as practical; operState may
  //		    stay at 'run' or go to 'congested' depending.
  //	- SvcStRun
  //		    resume from halt or congested if possible.
  //	- SvcStHalted
  //		    suspend, but try to allow set of adminState.
  //	- SvcStCongested
  //		    Have him pretend to be congested.
  //	- SvcStQuiesce
  //		    Have him process current load, not take any
  //		    more, and go to down gracefully.
  //	- SvcStRestart
  //		    restart from beginning, if possible.

  enum	    svcState { SvcStDown, SvcStRun, SvcStHalted,
		       SvcStCongested, SvcStRestart, SvcStQuiesce };

  // setting an admin state to invalid shuts it down.

  enum	    procState { ProcStRunning, ProcStRunnable,
			ProcStNotRunnable, ProcStInvalid };

  // a counter goes up and up, and may eventually wrap.
  typedef ub4	    counter;

  // a gauge goes up and down, and is always >= 0. 
  typedef ub4	    gauge;

  // timeTicks are Cs units starting from 0 when the yort comes alive.
  // (It is not Ms because that would wrap too often.)
  //
  // It is signed because differences between values are an interval.
  //
  // Intervals that happen to be in Cs units are not timeTicks, because
  // they are not based at yort start.
  typedef sb4	    timeTicks;

  // timeCs is for Cs times that are not based on yort startup (intervals).
  typedef sb4	    timeCs;

  // timeMs is for millisecond time, signed for intervals.
  typedef sb4	    timeMs;

  // ----------------
  // Types

  // resource in the ysr resource database.
  struct resource {
    string	    name_yort_resource;
    yostd::stringList vals_yort_resource;
  };

  typedef sequence <resource> resourceList;

  // yort::implFlags are seen in ydyo::activeInfo and yort::implInfo
  typedef ub4 implFlags;
  const implFlags stateless_implFlag = 0x0001;
  const implFlags psf_implFlag       = 0x0002;
  const implFlags suspended_implFlag = 0x0004;

  // This implInfo maps nicely onto the the OMS 2.0 SNMP
  // agent's view of an abstract "service"

  struct implInfo {
    impl	self_yort_implInfo;	    // the object
    string	intf_yort_implInfo;	    // "name", mib type
    string    	impl_yort_implInfo;	    // "version"
    timeTicks	upTimeCs_yort_implInfo;
    svcState	operStatus_yort_implInfo;
    timeTicks	operStatusChanged_yort_implInfo;
    svcState	adminStatus_yort_implInfo;
    timeTicks	adminStatusChanged_yort_implInfo;

    counter	inboundAssocs_yort_implInfo;
    counter	outboundAssocs_yort_implInfo;
    counter	totalInboundAssocs_yort_implInfo;
    counter	totalOutboundAssocs_yort_implInfo;
    timeTicks	lastInbound_yort_implInfo;
    timeTicks	lastOutbound_yort_implInfo;
    counter	rejectedInbounds_yort_implInfo;
    counter	failedOutbounds_yort_implInfo;

    implFlags	implFlags_yort_implInfo;
  };

  typedef sequence <implInfo> implInfoList;

  // method stats
  struct methodInfo {
    string	name_yort_methodInfo;
    counter	cnt_yort_methodInfo;
    timeMs	lastTimeMs_yort_methodInfo;
    timeMs	maxTimeMs_yort_methodInfo;
    timeMs	avgTimeMs_yort_methodInfo;
  };

  typedef sequence <methodInfo> methodInfoList;

  // An instrumented queue, used by dispatchers and perhaps others.

  struct queueInfo {

    queue	self_yort_queueInfo;	// the queue
    string	name_yort_queueInfo;	// arbitrarily set

    counter	totEnq_yort_queueInfo;
    gauge	curLen_yort_queueInfo;
    gauge	maxLen_yort_queueInfo;
    gauge	avgLen_yort_queueInfo;
    timeMs	curDelayMs_yort_queueInfo;
    timeMs	maxDelayMs_yort_queueInfo;
    timeMs	avgDelayMs_yort_queueInfo;

    dispatcherList	dispatchers_yort_queueInfo;    // may be empty.
  };

  struct dispInfo {

    dispatcher self_yort_dispInfo;          // self
    queue      queue_yort_dispInfo;         // queue being dispatched...
    counter    numDispatches_yort_dispInfo; // count of dispatches from queue
    svcState   operState_yort_dispInfo;     // dispatcher operational state
    svcState   adminState_yort_dispInfo;    // dispatcher admin state
  };
  typedef sequence <dispInfo> dispInfoList;

  // everything about an implementation.
  struct implAll {
    implInfo       info_yort_implAll;
    methodInfoList methods_yort_implAll;
    queueInfo      queue_yort_implAll;
  };

  typedef sequence <implAll> implAllList;

  struct procInfo {
    proc	self_yort_procInfo;
    string	name_yort_procInfo;
    string	host_yort_procInfo;
    string	affinity_yort_procInfo;
    string 	pid_yort_procInfo;
    procState	operState_yort_procInfo;
    procState	adminState_yort_procInfo;
    ub4		cpuCs_yort_procInfo;
    ub4		memKb_yort_procInfo;
    timeTicks	upTime_yort_procInfo;
  };

  struct claim
  {
    string property;	// the key for the claim
    Object obj;		// along for the ride.
    yort::proc owner;	// id of owning process.
  };

  typedef sequence <claim> claimList;

  //----------------
  // Base object for the runtime in the process.

  interface proc {

    readonly attribute resourceList resources;
    readonly attribute implList impls;
    readonly attribute queueList queues;
    readonly attribute dispatcherList dispatchers;
    readonly attribute procInfo pInfo;

    void getImplAll(in implFlags mask, out procInfo procInfo,
		    out dispInfoList dinfo, out implAllList list);

    // this is keyed access to the ysr resource database.
    void getResource( in string name, out yostd::stringList vals ); 
    void setResource( in string name, in yostd::stringList vals );

    // set the administrative state or the process --
    //	to ProcStInvalid causes a ysPanic(!)
    //  
    // For graceful shutdown, set impls to quiesce/down, or tell all
    // the queues to shutdown their dispatchers, or set all the admin
    // states in the dispatchers to quiesce/down.
    void setAdminState( in procState adminState );

    // does the object exist locally?
    boolean exists(in Object ref);

    // IIOP bridge external address
    void getIiopExtAddr(out string host, out ub2 port);
  };

  // ----------------
  // Active service implementations in the process.

  interface impl {

    readonly attribute implInfo info;
    readonly attribute methodInfoList methods;
    readonly attribute queueInfo qinfo;
    
    void getAll( out implInfo info,
		out methodInfoList methods,
		out queueInfo qinfo );

    void setAdminState( in svcState adminState );
  };

  // ----------------
  // Known instrumented queues in the process.

  interface queue {

    readonly attribute queueInfo info;

    void setName( in string name );

    void shutdownDispatchers();
  };

  // ----------------
  // Active dispatchers of queues in the process

  // This represents a single dispatcher draining a queue.
  // A dispatcher is an instance of yoService.
  // (In a threaded system, there may be multiple dispatchers
  //  draining the same queue)  

  interface dispatcher {

    readonly attribute dispInfo dinfo;

    // A dispatcher owns the thread until it is given "down"
    // admin state and exits, self destructing in the process.
    void setAdminState( in svcState adminState );
  };
};				// module yort

#endif
