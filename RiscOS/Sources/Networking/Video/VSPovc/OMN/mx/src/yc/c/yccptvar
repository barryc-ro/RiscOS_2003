/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * yccptvar.c - generation of C++ T_var classes
 *
 * NOTES
 * For an IDL type T, it's T_var class is a wrapper class which handles
 * memory management for the underlying object of type T. For example,
 * when a new value is assigned into a T_var, the old value is appropriately
 * garbage collected and the new value is appropriately copied in. T_vars
 * are generated for all interface, struct, union, array, and sequence
 * types, and are predefined for things like string, Any, and TypeCode.
 *
 * In terms of code generation, a T_var type declaration is really only 
 * concerned with the name and general classification (struct, array, etc.) 
 * of it's associated type T - it doesn't matter one bit what the internals 
 * of T are, with the possible exception of knowing whether or not T is fixed
 * or variable length. This is somewhat less true of the function defns
 * in that we have to know things like array dimensions, but this 
 * knowledge can be confined to generation of the _copy and _free funcs. 
 *
 * In addition to memeory management, a T_var must support seamless
 * conversions between T and T_var for assignment and parameter passing,
 * so a T_var typically supports things like operator-> (for getting at
 * the fields and/or member functions of T) and conversion ops.
 *
 * The general layout of a T_var class for some IDL type T is:
 *
 * class T_var
 * {
 * public:
 *   T_var();
 *   T_var(T*);
 *   T_var(const T_var&);
 *   ~T_var();
 *
 *   T_var& operator=( T*);
 *   T_var& operator=( const T_var& var);
 *
 *   // specializations for parameter passing, forwarding, etc.
 *  protected:
 *   T* _ptr;
 *  };
 *
 * Unfortunately, there are just enough variations on the theme to make
 * it incovenient to generate this from one routine for all types. 
 * For example, T_var for arrays uses T_slice in some of the places you
 * see T* above, while interfaces use T_ptr; sequences also need to
 * know about the name of their underlying element type; structs need
 * now whether or not it is a variable length struct type, etc.
 *
 * A lot of the variations can be finessed with templates if we ever
 * get to the point when the T_var types are template based. At the
 * moment, everyone's template implementations are so flaky that they're
 * not to be trusted and the T_var types are laid out completely
 * by the functions below.
 *
 * The array T_forany types are also generated from here because of 
 * their similarity to T_var. From the CORBA spec: "The interface of
 * the Array_forany type is identical to that of the Array_var type,
 * but it may not be implemented as a typedef to the Array_var type by a
 * compliant implementation since it must be distinguishable from other
 * types for purposes of function overloading. Also, the Array_forany
 * construct taking an Array_slice* parameter also takes a Boolean "nocopy"
 * parameter..." The T_forany classes exist merely to support insertion
 * of array into Any's.
 *
 * HISTORY
 * 07/04/96 kcoleman	Replace YC_INDENT with yccfp indentation facility
 * 03/10/96 kcoleman    Creation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCCP0_ORACLE
#include <yccp0.h>
#endif


/* -------------------------------------------------------------------------*/
/*
 * yccpGenArrayTVar - generate array-specific T_var and T_forany classes
 *
 * Standard T_var stuff, except the array data is passed in and returned
 * in as a T_slice most of the time. Type specializations are:
 *
 *  T_slice& operator[]( ub4);
 *  const T_slice& operator[](ub4) const;
 *  operator T_slice*&();
 *
 * The T_forany class has the same interface as T_var, except that the
 * T_slice* constructor has an additional "nocopy" parameter which
 * determines whether or not the slice is to be copied into the Any in
 * which it eventually gets inserted.
 *
@@ G++ only works if you have just the conversion op above.
@@ CC (Solaris) only works if you have that plus a const version.
@@   operator const T_slice*&() const;
@@ G++ thinks conversion is ambiguous if you have both. I think g++ is correct.
 */
void yccpGenArrayTVar( ycctx* ctx, yccfp* fp, yrobj* type, boolean defn )
{
  CONST char* name = yccpSimpleName( ctx, type);

  if ( !defn )
  {
    /***** constructors, destructor *****/
    yccfpPrint( fp, "class %s_var\n{\npublic:\n", name);
    yccfpIncIndent( fp);
    yccfpPrint( fp, "%s_var();\n", name);
    yccfpPrint( fp, "%s_var( %s_slice*);\n", name, name);
    yccfpPrint( fp, "%s_var( const %s_var&);\n", name, name);
    yccfpPrint( fp, "~%s_var();\n\n", name);

    /***** assignment *****/
    yccfpPrint( fp, "%s_var& operator=( %s_slice*);\n", name, name);
    yccfpPrint( fp, "%s_var& operator=( const %s_var&);\n", name, name);

    /***** type specific specializations *****/
    yccfpPrint( fp, "%s_slice& operator[]( ub4);\n", name);
    yccfpPrint( fp, "const %s_slice& operator[]( ub4) const;\n", name);
    yccfpPrint( fp, "operator %s_slice*&();\n", name);

    /***** Private and protected declarations *****/
    yccfpDecIndent( fp);
    yccfpPrint( fp, "protected:\n");
    yccfpIncIndent( fp);
    yccfpPrint( fp, "%s_slice* _ptr;\n", name);
    yccfpDecIndent( fp);       /* leaving T_var */
    yccfpPrint( fp, "};\n\n");

    /***** T_forany *****/
    yccfpPrint( fp, "class %s_forany\n{\npublic:\n", name);
    yccfpIncIndent( fp);
    yccfpPrint( fp, "%s_forany();\n", name);
    yccfpPrint( fp, "%s_forany( %s_slice*, boolean nocopy=FALSE);\n",
                name, name);
    yccfpPrint( fp, "%s_forany( const %s_forany&);\n", name, name);
    yccfpPrint( fp, "~%s_forany();\n\n", name);
    yccfpPrint( fp, "%s_forany& operator=( %s_slice*);\n", name, name);
    yccfpPrint( fp, "%s_forany& operator=( const %s_forany&);\n", name, name);
    yccfpPrint( fp, "%s_slice& operator[]( ub4);\n", name);
    yccfpPrint( fp, "const %s_slice& operator[]( ub4) const;\n", name);
    yccfpPrint( fp, "operator %s_slice*&();\n", name);
    yccfpDecIndent( fp);
    yccfpPrint( fp, "protected:\n");
    yccfpIncIndent( fp);
    yccfpPrint( fp, "%s_slice* _ptr;\n", name);
    yccfpDecIndent( fp);
    yccfpPrint( fp, "};\n\n");
  }
  else
  {
/* @@ */
  }
}


/* -------------------------------------------------------------------------*/
/*
 * yccpGenStructTVar - generate struct/union-specific specializations
 *   for a T_var class.
 *
 * For all struct and union types:
 *
 *   T* operator->();
 *   operator const T&() const;        -- in parameter passing
 *   operator T&();                    -- inout param passing (& out for fixed)
 *
 * For a variable length struct type, you also have:
 *
 *   operator T*&();                   -- out parameter passing
 */
void yccpGenStructTVar( ycctx* ctx, yccfp* fp, yrobj* type, boolean defn)
{
  CONST char* name;
  boolean variable = yccIsVariableType( ctx, type);

  name = yccpSimpleName(ctx, type);
  if ( !defn )
  {
    /***** constructors, destructor *****/
    yccfpPrint( fp, "class %s_var\n{\npublic:\n", name);
    yccfpIncIndent( fp);
    yccfpPrint( fp, "%s_var();\n", name);
    yccfpPrint( fp, "%s_var( %s*);\n", name, name);
    yccfpPrint( fp, "%s_var( const %s_var&);\n", name, name);
    yccfpPrint( fp, "~%s_var();\n\n", name);

    /***** assignment *****/
    yccfpPrint( fp, "%s_var& operator=( %s*);\n", name, name);
    yccfpPrint(fp,"%s_var& operator=( const %s_var&);\n", name, name);

    /***** type specific specializations *****/
    yccfpPrint( fp, "%s* operator->();\n", name);
    yccfpPrint( fp, "operator const %s&() const;\n", name);
    yccfpPrint( fp, "operator %s&();\n", name);
    if ( variable )
      yccfpPrint( fp, "operator %s*&();\n", name);

    /***** Private and protected declarations *****/
    yccfpDecIndent( fp);
    yccfpPrint( fp, "protected:\n");
    yccfpIncIndent( fp);
    yccfpPrint( fp, "%s* _ptr;\n", name);
    yccfpDecIndent( fp);
    yccfpPrint( fp, "};\n\n");
  }
  else
  {
    CONST char* scname = yccpScopedName( ctx, type);

    yccfpPrint( fp, "/*** T_var definition for %s ***/\n\n", scname);

      /***** T_var() ****/
    yccfpPrint( fp, "%s_var::%s_var()\n{\n", scname, name);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

      /***** T_var(T*) *****/
    yccfpPrint( fp, "%s_var::%s_var( %s* _val)\n{\n", scname, name, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

      /***** T_var( const T_var&) *****/
    yccfpPrint( fp, "%s_var::%s_var( const %s_var& _val)\n{\n", 
                scname, name, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

      /***** ~Tvar() *****/
    yccfpPrint( fp, "%s_var::~%s_var()\n{\n", scname, name);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

      /***** operator=(T*) *****/
    yccfpPrint( fp, "%s_var& %s_var::operator=( %s* _rhs)\n{\n", 
                scname, scname, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

      /***** operator=( const T_var&) *****/
    yccfpPrint( fp,"%s_var& %s_var::operator=( const %s_var& _rhs)\n{\n", 
                scname, scname, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

      /***** operator-> *****/
    yccfpPrint( fp, "%s* %s_var::operator->()\n{\n", scname, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

      /***** operator const T& *****/
    yccfpPrint( fp, "%s_var::operator const %s&() const\n{\n", scname, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

      /***** operator T& *****/
    yccfpPrint( fp, "%s_var::operator %s&()\n{\n", scname, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

      /***** operator T*& *****/
    if ( variable )
    {
      yccfpPrint( fp, "%s_var::operator %s*&()\n{\n", scname, scname);
      yccfpIncIndent(fp);
      yccfpDecIndent(fp);
      yccfpPrint( fp, "}\n\n");
    }
  }
}


/* -------------------------------------------------------------------------*/
/*
 * yccpGenSeqTVar - generate sequence-specific specializations for a
 *   T_var class.
 *
 * Sequences are always variable length types. They get all the 
 * specializations of a variable length struct, plus an indexing op
 * which forwards requests on to the underlying type.
 *
 *   T* operator->();
 *   operator const T&() const;        -- in parameter passing
 *   operator T&();                    -- inout parameter passing 
 *   operator T*&();                   -- out parameter passing
 *   E& operator[]( ub4 index)
 */

void yccpGenSeqTVar( ycctx* ctx, yccfp* fp, yrobj* type, boolean defn)
{
  CONST char* name = yccpSimpleName( ctx, type);
  char* ename = yccpElemName( ctx, type);

  if ( !defn )
  {
    /***** constructors, destructor *****/
    yccfpPrint( fp, "class %s_var\n{\npublic:\n", name);
    yccfpIncIndent( fp);
    yccfpPrint( fp, "%s_var();\n", name);
    yccfpPrint( fp, "%s_var( %s*);\n", name, name);
    yccfpPrint( fp, "%s_var( const %s_var&);\n", name, name);
    yccfpPrint( fp, "~%s_var();\n\n", name);

    /***** assignment *****/
    yccfpPrint( fp, "%s_var& operator=( %s*);\n", name, name);
    yccfpPrint( fp,"%s_var& operator=( const %s_var&);\n", name, name);

    /***** specializations *****/
    yccfpPrint( fp, "%s& operator[]( ub4 index);\n", ename);
    yccfpPrint( fp, "%s* operator->();\n", name);
    yccfpPrint( fp, "operator const %s&() const;\n", name);
    yccfpPrint( fp, "operator %s&();\n", name);
    yccfpPrint( fp, "operator %s*&();\n", name);

    /***** Private and protected declarations *****/
    yccfpDecIndent( fp);
    yccfpPrint( fp, "protected:\n");
    yccfpIncIndent( fp);
    yccfpPrint( fp, "%s* _ptr;\n", name);
    yccfpDecIndent( fp);
    yccfpPrint( fp, "};\n\n");
  }
  else
  {
    CONST char* scname = yccpScopedName( ctx, type);

    yccfpPrint( fp, "/*** T_var definition for %s ***/\n\n", scname);
    yccfpPrint( fp, "%s_var::%s_var()\n{\n", scname, name);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

    yccfpPrint( fp, "%s_var::%s_var( %s*)\n{\n", scname, name, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

    yccfpPrint( fp, "%s_var::%s_var( const %s_var&)\n{\n", 
                scname, name, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

    yccfpPrint( fp, "%s_var::~%s_var()\n{\n", scname, name);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

    yccfpPrint( fp, "%s_var& %s_var::operator=( %s*)\n{\n", 
                scname, scname, name);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

    yccfpPrint( fp,"%s_var& %s_var::operator=( const %s_var&)\n{\n", 
                scname, scname, name);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

    yccfpPrint( fp, "%s& %s_var::operator[]( ub4 index)\n{\n", ename, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

    yccfpPrint( fp, "%s* %s_var::operator->()\n{\n", scname, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

    yccfpPrint( fp, "%s_var::operator const %s&() const\n{\n", scname, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

    yccfpPrint( fp, "%s_var::operator %s&()\n{\n", scname, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

    yccfpPrint( fp, "%s_var::operator %s*&()\n{\n", scname, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");
  }
  ysmGlbFree( (dvoid*)ename);
}


/* -------------------------------------------------------------------------*/
/*
 * yccpGetIntfTVar - generate T_var class for an interface type
 *
 * Similar once again to a variable length struct, but slightly different
 * in that it is T_ptr that participates as a parameter/return type in
 * most cases.
 *
 *   T_ptr operator->();
 *   operator const T_ptr&() const;    -- in parameter passing
 *   operator T_ptr&();                -- inout/out param passing
 */
void yccpGenIntfTVar( ycctx* ctx, yccfp* fp, yrobj* type, boolean defn)
{
  CONST char* name = yccpSimpleName( ctx, type);

  if ( !defn )
  {
    /***** constructors, destructor *****/
    yccfpPrint( fp, "class %s_var\n{\npublic:\n", name);
    yccfpIncIndent( fp);
    yccfpPrint( fp, "%s_var();\n", name);  
    yccfpPrint( fp, "%s_var( %s_ptr);\n", name, name);
    yccfpPrint( fp, "%s_var( const %s_var&);\n", name, name);
    yccfpPrint( fp, "~%s_var();\n\n", name);

    /***** assignment *****/
    yccfpPrint( fp, "%s_var& operator=( %s_ptr);\n", name, name);
    yccfpPrint(fp,"%s_var& operator=( const %s_var&);\n", name, name);

    /***** type specific specializations *****/
    yccfpPrint( fp, "%s_ptr operator->();\n", name);
    yccfpPrint( fp, "operator const %s_ptr&() const;\n", name);
    yccfpPrint( fp, "operator %s_ptr&();\n", name);

    /***** Private and protected declarations *****/
    yccfpDecIndent( fp);
    yccfpPrint( fp, "protected:\n");
    yccfpIncIndent( fp);
    yccfpPrint( fp, "%s_ptr _ptr;\n", name);
    yccfpDecIndent( fp);
    yccfpPrint( fp, "};\n\n");
  }
  else
  {
    CONST char* scname = yccpScopedName( ctx, type);

    yccfpPrint( fp, "/*** T_var definition for %s ***/\n\n", scname);
    yccfpPrint( fp, "%s_var::%s_var()\n{\n", scname, name);  
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

    yccfpPrint( fp, "%s_var::%s_var( %s_ptr)\n{\n", scname, name, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

    yccfpPrint( fp, "%s_var::%s_var( const %s_var&)\n{\n", 
                scname, name, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

    yccfpPrint( fp, "%s_var::~%s_var()\n{\n", scname, name);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

    yccfpPrint( fp, "%s_var& %s_var::operator=( %s_ptr)\n{\n", 
                scname, scname, name);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

    yccfpPrint( fp,"%s_var& %s_var::operator=( const %s_var&)\n{\n", 
                scname, scname, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

    yccfpPrint( fp, "%s_ptr %s_var::operator->()\n{\n", scname, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

    yccfpPrint( fp, "%s_var::operator const %s_ptr&() const\n{\n", 
                scname, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

    yccfpPrint( fp, "%s_var::operator %s_ptr&()\n{\n", scname, scname);
    yccfpIncIndent(fp);
    yccfpDecIndent(fp);
    yccfpPrint( fp, "}\n\n");

  }
}
