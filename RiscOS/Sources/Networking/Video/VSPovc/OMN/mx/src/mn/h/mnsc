/* Copyright (c) 1994 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 * mnsc.h - OMN Process Server Public Interface (constants and declarations)
 *
 * DESCRIPTION
 * Constants and declarations defined here need to be available to both client
 * and server.
 *
 * REVISIONS
 * bholroyd	02/02/95 Modified to use process server daemon.
 * jolkin	09/07/94 Creation
 */

#ifndef MNSC_ORACLE
#define MNSC_ORACLE

#ifndef SX_ORACLE
#include <sx.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNRC_ORACLE
#include <mnrc.h>
#endif

/* DISABLE check_naming */

/* process server types */
typedef struct mnsqent mnsqent;                               /* queue entry */
typedef struct mnscent mnscent;                           /* call descriptor */
typedef struct mnsient mnsient;                       /* instance descriptor */
typedef struct mnshinf mnshinf;	 /* hosts that can spawn this type of server */

externref const mnrid mnscPid;
externref const mnrid mnscCid;

/* Status Codes */
#define MNSC_PAUSE      1                     /* instance or queue is paused */
#define MNSC_REGISTER   2                          /* instance is registered */
#define MNSC_CALLGET    3                    /* instance is waiting for call */
#define MNSC_CALLFWD    4                     /* instance is processing call */
#define MNSC_PAUSENEXT  5   /* instance will be paused on next wait-for-call */
#define MNSC_STOPNEXT   6  /* instance will be stopped on next wait-for-call */
#define MNSC_STOP       7       /* stopped queue; delete when queue is empty */
#define MNSC_CALLFWD_PAUSENEXT	8	/* to be paused, but also in callfwd */

/* Flags */
#define MNSC_DAEMON 0x01 /* keep queue even when no instances are registered */

/* Queue entry descriptor */
struct mnsqent
{
  mnsqent    *next;                                   /* next queue in chain */

  const char *name;                                       /* name of service */
  mnrid       progid;                       /* program identifier of service */
  sb4         status;                                     /* status of queue */
  ub4         flags;                                       /* flags of queue */
  mnp        *cport;                                 /* client port of queue */
  mnp        *iport;                               /* instance port of queue */
  mna         caddr;                              /* client address of queue */
  mna         iaddr;                            /* instance address of queue */
  ub4	      qlenlim;		     /* max q len before forking new process */
  ub4	      exectim;		       /* last time a new process was exec'd */

  ub4         regcur;                   /* current # of instances registered */
  ub4         regavg;                   /* average # of instances registered */
  ub4         regmax;                         /* actual maximum # registered */
  ub4         regtot;                                  /* total # registered */

  ub4         reglo;                            /* minimum # to keep running */
  ub4         reghi;                           /* maximum # to allow running */

  ub4         cllcur;                       /* current # of calls dispatched */
  ub4         cllavg;                 /* average concurrent calls dispatched */
  ub4         cllmax;                 /* maximum concurrent calls dispatched */
  ub4         clltot;                    /* total number of calls dispatched */

  ub4         quecur;                                /* current queue length */
  ub4         queavg;                                /* average queue length */
  ub4         quemax;                                /* maximum queue length */
  ub4         quedel;                /* average delay while call is in queue */

  mnscent    *calls;                                /* list of pending calls */
  mnsient    *instances;                     /* list of registered instances */
  mnshinf    *hosts;	 /* list of hosts that can spawn this type of server */
};

/* Call descriptor */
struct mnscent
{
  mnscent *next;                                  /* next entry in call list */

  mna      addr;                                          /* original sender */
  ub4      arrival;                                       /* time of arrival */

  ub1     *buf;                                        /* original call data */
  ub4      len;                                      /* original call length */
};

/* Instance descriptor */
struct mnsient
{
  mnsient *next;                              /* next entry in instance list */

  mnsqent *queue;                               /* queue instance belongs to */
  sb4      status;                                        /* instance status */
  mna      addr;                               /* address of server instance */
  ub4      cllget;        /* last time at which an mnsGetNext() was received */
  ub4      cllfwd;           /* last time at which an RPC call was forwarded */
  ub4      clltot;           /* total number of calls dispatched to instance */
  ub4      clldel;           /* average interval between callget and callfwd */
  mna      origaddr;          /* address of original sender of last RPC call */
};

/* Host info. returned by host daemon. */
struct mnshinf
{
  char    *hostname;					     /* name of host */
  ub2      started;	    /* no. of servers started by this process server */
  mnshinf *next;
};

sb4 mnsRegister(mnrb *bh, CONST char *name, CONST mnrid *progid, mna *addr);
sb4 mnsGetNext(mnrb *bh, mna *addr);
sb4 mnsUnregister(mnrb *bh, mna *addr);
sb4 mnsPause(mnrb *bh, mna *addr, boolean pause);
sb4 mnsStop(mnrb *bh, mna *addr);
sb4 mnsQuery(mnrb *bh, mnxStream *stream, ub4 *clock);

boolean mnsxQent(mnx *, dvoid *);
boolean mnsxCent(mnx *, dvoid *);
boolean mnsxIent(mnx *, dvoid *);

/* NYI @@
sb4 mnsStart(const char *name, const mnrid *progid);
sb4 mnsFlush(mna *addr);
 */

/* ENABLE check_naming */

#endif /* MNSC_ORACLE */
