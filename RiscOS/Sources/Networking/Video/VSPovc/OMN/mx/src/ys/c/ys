/* Copyright (c) 1995, 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * ys.c - OMN System Layer
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSI_ORACLE
#include <ysi.h>
#endif

/*
 * Constant Definitions
 */
externdef ysidDecl(YS_PRODUCT) = "OMN";
externdef ysidDecl(YS_FACILITY) = "YS";

/*
 * ysInit - initialize the service layer
 */
void ysInit(dvoid *osdp, CONST char *nm)
{
  dvoid   *ptrs;
  ysmaf    af;
  ysmrf    rf;
  ysmff    ff;
  ysbv    *bv;
  sword    nbv;
  ysmhp   *glbhp;
  size_t   sz;
  ysctx   *ctx;
  char    *fn, buf[64];

  /* check to make sure we haven't been initialized */
  if (ptrs = syscGetPG())
  {
    ctx = (ysctx *) yscGet(YSC_YSCTX);
    ctx->initcnt++;
    return;
  }

  /* initialize the OSD layer */
  if (!sysiInit(osdp))
    yseThrow(YS_EX_FAILURE);

  /* create global heap */
  if (!sysmInit(osdp, &af, &rf, &ff, &bv, &nbv))
    yseThrow(YS_EX_FAILURE);

  glbhp = ysmCreate(af, rf, ff, bv, nbv);

  /* create context management array */
  sz = YSC_YSCLAST * sizeof(dvoid *);
  ptrs = ysmAlloc(glbhp, sz, "ysc ptrs");
  DISCARD memset(ptrs, 0, sz);
  syscSetPG(ptrs);
  
  /* create service layer context */
  ctx = (ysctx *) ysmAlloc(glbhp, sizeof(ysctx), "ysctx");
  DISCARD yscSet(YSC_YSCTX, (dvoid *) ctx);
  DISCARD yscSet(YSC_YSGLB, (dvoid *) glbhp);

  ctx->bv = bv;
  ctx->nbv = nbv;
  ctx->tctx = (ysthrctx *) 0;
  ctx->thrkeys = ysLstCreate();
  ctx->pfunc = (ysepf) 0;
  ctx->pfptr = (dvoid *) 0;
  ctx->errkey = ysThrKeyCreate();
  ctx->rdb = ysLstCreate();
  ctx->detach = FALSE;
  ctx->initcnt = 1;
  ctx->osdp = osdp;
  ctx->prognm = nm;

  /* establish process resources */
  if (syspGetHostName(osdp, buf, sizeof(buf)))
    ysResSet("ys.hostname", buf);
  if (syspGetPid(osdp, buf, sizeof(buf)))
    ysResSet("ys.pid", buf);
  if (syspGetAffinity(osdp, buf, sizeof(buf)))
    ysResSet("ys.affinity", buf);

  /* initialize resource database */
  sysrLoad(osdp);
  if (fn = ysResGetLast("YSRESFILE"))
    DISCARD ysResPfile(fn);

  /* initialize the event manager */
  ysEvtInit(ctx);

  /* initialize time manager */
  ystmInit(ctx);

  /* initialize logging context */
  ysMsgInit(ctx);
  ysLogInit(ctx);
}

/*
 * ysTerm - terminate the service layer
 */
void ysTerm(dvoid *osdp)
{
  dvoid **ptrs;
  ysmhp  *glbhp;
  ysctx  *ctx;
  ysbv   *bv;
  sword   nbv;
  ysle   *sp, *nsp;

  /* check to make sure that we have been initialized */
  ptrs = (dvoid **) syscGetPG();
  if (!ptrs) 
    return;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  if (--ctx->initcnt)
    return;

  /* terminate thread management */
  if (ctx->tctx)
    ysThrTerm();

  /* terminate the event manager */
  ysEvtTerm(ctx);

  /* close up the logging mechanism */
  ysLogTerm(ctx);
  ysMsgTerm(ctx);

  /* destroy the resource database */
  ysLstDestroy(ctx->rdb, ysResFree);

  /* free the key contexts */
  ysLstDestroy(ctx->thrkeys, ysmFGlbFree);

  /* destroy service layer context */
  glbhp = ysmGlbHeap();
  bv = ctx->bv;
  nbv = ctx->nbv;
  ysmFree(glbhp, (dvoid *) ctx);

  /* destroy context management array */
  ysmFree(glbhp, (dvoid *) ptrs);

  /* de-instantiate the process global */
  syscSetPG((dvoid *) 0);

  /* destroy the global heap */
  ysmDestroy(glbhp);

  /* give back the main buffer vector to the system */
  sysmTerm(osdp, bv, nbv);

  /* terminate the OSD layer */
  sysiTerm(osdp);
}

/*
 * ysProgName - get program name
 */
CONST char *ysProgName(void)
{
  ysctx *ctx;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  return ctx->prognm;
}

/*
 * ysGetOsdPtr - get OSD pointer
 */
dvoid *ysGetOsdPtr(void)
{
  ysctx *ctx;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  return ctx->osdp;
}

/*
 * ysGetCpuTime - get CPU time
 */
void ysGetCpuTime(sysb8 *cputm)
{
  ysctx *ctx;
  sysb8  ticks;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  DISCARD syspGetCpuTime(ctx->osdp, cputm);
}

/*
 * ysGetUpTime - get up time
 */
void ysGetUpTime(sysb8 *uptm)
{
  ysctx *ctx;
  sysb8  ticks;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  ysClock(&ticks);
  sysb8set(uptm, &ctx->ticks);
}

/*
 * ysGetMemUsage - get memory usage
 */
ub4 ysGetMemUsage(void)
{
  ysctx *ctx;
  ub4    kbytes;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  return (syspGetMemUsage(ctx->osdp, &kbytes) ? kbytes : 0);
}
