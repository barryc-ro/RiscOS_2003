/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * yogiop.c - GIOP message marshalling routines
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
#ifndef YOI_ORACLE
#include <yoi.h>
#endif
#ifndef YOGIOP_ORACLE
#include <yogiop.h>
#endif

/* ENABLE name_checking */
externdef CONST_DATA yotk YCTC_yoevm[] = 
  {'\000','\000','\000','\017','\000','\000','\000','D','\000'
  ,'\000','\000','\013','d','u','m','m','y','I','F','R','#','2'
  ,'\000','\000','\000','\000','\000','\010',':',':','y','o','e'
  ,'v','m','\000','\000','\000','\000','\002','\000','\000','\000'
  ,'\005','n','a','m','e','\000','\000','\000','\000','\000','\000'
  ,'\000','\022','\000','\000','\000','\000','\000','\000','\000'
  ,'\006','v','a','l','u','e','\000','\000','\000','\000','\000'
  ,'\000','\013'};

externdef CONST_DATA yotk YCTC_yoenv[] = 
  {'\000','\000','\000','\025','\000','\000','\000','t','\000'
  ,'\000','\000','\013','d','u','m','m','y','I','F','R','#','6'
  ,'\000','\000','\000','\000','\000','\010',':',':','y','o','e'
  ,'n','v','\000','\000','\000','\000','\023','\000','\000','\000'
  ,'T','\000','\000','\000','\017','\000','\000','\000','D','\000'
  ,'\000','\000','\013','d','u','m','m','y','I','F','R','#','2'
  ,'\000','\000','\000','\000','\000','\010',':',':','y','o','e'
  ,'v','m','\000','\000','\000','\000','\002','\000','\000','\000'
  ,'\005','n','a','m','e','\000','\000','\000','\000','\000','\000'
  ,'\000','\022','\000','\000','\000','\000','\000','\000','\000'
  ,'\006','v','a','l','u','e','\000','\000','\000','\000','\000'
  ,'\000','\013','\000','\000','\000','\000'};
/* DISABLE name_checking */

static ysidDecl(YOX_EX_STD) = "yo::std";

#define YOGIOKEY_BASE           (ub4)0                    /* base object key */
#define YOGIOKEY_YOPROF         (ub4)1              /* YO profile object key */

STATICF void yogiPutYoIiopProf(yosx *x, dvoid *ref);
STATICF void yogiPutYoIiopObjKey(yosx *x, dvoid *ref);
STATICF void yogiPutYoYoProf(yosx *x, dvoid *ref);
STATICF void yogiPutYoYoObjKey(yosx *x, yoo *r);
STATICF void yogiFreeTagProf(yogiTagProf *prof);
STATICF void yogiPutIiopProf(yosx *x, yogiTagProf *prof);
STATICF void yogiGetIiopProf(yosx *x, yogiTagProf *prof, yoo **r);
STATICF void yogiPutYoProf(yosx *x, yogiTagProf *prof);
STATICF void yogiGetYoProf(yosx *x, yogiTagProf *prof, yoo **r);
STATICF void yogiPutObjKey(yosx *x, yoo *ref, ub4 reftag);
STATICF yoo *yogiGetBaseObjKey(yoctx *ctx, yosx *x, yota *addr, boolean local);
STATICF void yogiPutYoSvcCtxLst(yosx *x, ub4 reftag, yosvcxs *scxs);
STATICF void yogiGetYoSvcCtxLst(yosx *x, yosvcxs *scxs);
STATICF void yogiFreeYoSvcCtxLst(yosvcxs *scxs);
STATICF void yogiPutYoEnvSvcCtx(yosx *x, ub4 reftag, yoenv *yoev);
STATICF void yogiGetYoEnvSvcCtx(yosx *x, yoenv *yoev);
STATICF void yogiPutYoPropSvcCtx(yosx *x, ub4 reftag, yoTrans_pctx *pctx);
STATICF void yogiGetYoPropSvcCtx(yosx *x, yoTrans_pctx *pctx);
#define yogiPutPrincipal(x,os) yogiPutOctSeq(x,os)
#define yogiGetPrincipal(x) yogiGetOctSeq(x);
STATICF void yogiPutStr(yosx *x, CONST char *str);
STATICF char *yogiGetStr(yoctx *ctx, yosx *x);
STATICF sword yogiCmpProf(yogiTagProf *p1, yogiTagProf *p2);

void yogiPutMsgHeader(yosx *x, ub1 type, yosxPos *lenpos)
{
  yosxCopy(x,(ub1 *)GIOP_MAGIC,GIOP_MAGIC_SZ);
  yosxPutUB1(x, (ub1)1);                                      /* version 1.0 */
  yosxPutUB1(x, (ub1)0);
  yosxPutUB1(x, YO_BYTESEX);                                /* byte ordering */
  yosxPutUB1(x, type);                                       /* message type */
  yosxAlign(x,4);                  /* align before recording length position */
  yosxGetPos(x,lenpos);             /* get position to fixup with the length */
  yosxPutUB4(x, (ub4)0);                             /* dummy message length */
}

void yogiFixupMsgHeader(yosx *x, yosxPos *lenpos)
{
  yosxPos end;
  ub4 len;

  yosxGetPos(x,&end);
  len = yosxGetLength(x,&end,lenpos) - 4;
  yosxPutUB4AtPos(x,lenpos,len);
}

ub1 yogiGetMsgHeader(yosx *x, ub4 *len)
{
  yogiMsgHdr gmh;
  char magic[4];

  yogiGetMsgHdr(x, &gmh);
  if(memcmp(gmh.magic,"GIOP",4) != 0)
  {
    /* "RR bad magic number in header wanted: %x  rcvd: %x" */
    ysRecord(YOGEN_ERR(12), YSLSEV_ERR, (char *)0,
             YSLUB4(sysxGetUaB4(GIOP_MAGIC)), YSLUB4(sysxGetUaB4(magic)),
             YSLEND);
    return YOMSGT_INVALID;
  }
  if(gmh.ver_major != 1 && gmh.ver_minor != 0)
  {
    /* "RR GIOP message version %d.%d is not supported." */
    ysRecord(YOGEN_ERR(13), YSLSEV_ERR, (char *)0, YSLUB4((ub4)gmh.ver_major),
             YSLUB4((ub4)gmh.ver_minor), YSLEND);
    return (ub1) ~0;
  }
  switch(gmh.type)
  {
  case YOGIMT_REQ:
  case YOGIMT_REP:
  case YOGIMT_CANCEL:
  case YOGIMT_LOCREQ:
  case YOGIMT_LOCREP:
  case YOGIMT_CLOSE:
  case YOGIMT_ERR:
    break;
  default:
    ysRecord(YOGEN_ERR(14), YSLSEV_ERR, (char *)0, YSLUB4(gmh.type), YSLEND);
    return (ub1) ~0;
  }
  *len = gmh.length;
  return gmh.type;
}

void yogiGetMsgHdr(yosx *x, yogiMsgHdr *gmh)
{
  yosxCopy(x,(ub1 *)gmh->magic,4);
  gmh->ver_major = yosxGetUB1(x);
  gmh->ver_minor = yosxGetUB1(x);
  gmh->bytesex = yosxGetUB1(x);
  yosxDecSet(x,gmh->bytesex);                              /* set decode sex */
  gmh->type = yosxGetUB1(x);
  gmh->length = yosxGetUB4(x);
}

void yogiPutReqHeader(yosx *x, ub4 reftag, yoreqh *hdr)
{
  yogiPutYoSvcCtxLst(x,reftag,&hdr->scxs);               /* service contexts */
  yosxPutUB4(x,hdr->id);                                       /* request id */
  yosxPutUB1(x,(ub1)hdr->resp);                                 /* response? */
  yogiPutObjKey(x,hdr->ref,reftag);                               /* Obj Key */
  yogiPutStr(x,hdr->op);                                        /* operation */

  yosxPutUB4(x,0);                                           /* no principal */
}

void yogiGetReqHeader(yosx *x, yoreqh *hdr)
{
  ub4 prlen;
  yoctx *ctx;

  CLRSTRUCT(*hdr);                              /* start with a clean struct */
  ctx = yoCtx;
  yogiGetYoSvcCtxLst(x, &hdr->scxs);                /* service context list */
  hdr->id = yosxGetUB4(x);                                     /* request id */
  hdr->resp = yosxGetUB1(x);                                    /* response? */
  hdr->ref = yogiGetObjKey(ctx,x,yotAddrDup(ctx->rrpaddr),TRUE);  /* obj key */
  hdr->op = yogiGetStr(ctx,x);                             /* operation name */

  prlen = yosxGetUB4(x);                  /* FIXME: ignore principal for now */
  yosxSkip(x,prlen);
}

void yogiFreeReqHeader(yoreqh *hdr)
{
  yogiFreeYoSvcCtxLst(&hdr->scxs);
  if(hdr->ref)
    yoRelease((dvoid*)hdr->ref);
}

void yogiPutRepHeader(yosx *x, ub4 reftag, yoreph *hdr)
{
  yogiPutYoSvcCtxLst(x, reftag, &hdr->scxs);
  yosxPutUB4(x, hdr->id);                                      /* request id */
  yosxPutUB4(x, hdr->sts);
}

void yogiGetRepHeader(yosx *x, yoreph *hdr)
{
  yogiGetYoSvcCtxLst(x, &hdr->scxs);
  hdr->id = yosxGetUB4(x);
  hdr->sts = (ub1) yosxGetUB4(x);
}

void yogiGetRepHdr(yosx *x, yogiRepHdr *greph)
{
  greph->scl = yogiGetSvcCtxLst(x);
  greph->reqid = yosxGetUB4(x);
  greph->status = yosxGetUB4(x);
}

void yogiFreeRepHdr(yogiRepHdr *greph)
{
  if(greph->scl)
  {
    ysLstDestroy(greph->scl,ysmFGlbFree);
    greph->scl = (yslst *) 0;
  }
}

void yogiPutLocReqHeader(yosx *x, ub4 reftag, yoreqh *hdr)
{
  yosxPutUB4(x,hdr->id);
  yogiPutObjKey(x,hdr->ref,reftag);
}

void yogiGetLocReqHeader(yosx *x, yoreqh *hdr)
{
  yoctx *ctx;

  ctx = yoCtx;

  CLRSTRUCT(hdr->scxs);
  hdr->id = yosxGetUB4(x);
  hdr->ref = yogiGetObjKey(ctx,x,yotAddrDup(ctx->rrpaddr),TRUE);
  hdr->op = (char *) 0;
  hdr->resp = TRUE;
}

void yogiPutLocRepHeader(yosx *x, yoreph *hdr)
{
  yosxPutUB4(x,hdr->id);
  yosxPutUB4(x,hdr->sts);
  switch(hdr->sts)
  {
  case YOGILRS_UNKNOWN:
  case YOGILRS_HERE:
  case YOGILRS_FORWARD:
    break;
  default:
    ysePanic(YO_EX_INTERNAL);
    break;
  }
}

void yogiGetLocRepHeader(yosx *x, yoreph *hdr)
{
  CLRSTRUCT(*hdr);
  hdr->id = yosxGetUB4(x);
  hdr->sts = (ub1) yosxGetUB4(x);
  switch(hdr->sts)
  {
  case YOGILRS_UNKNOWN:
  case YOGILRS_HERE:
  case YOGILRS_FORWARD:
    break;
  default:
    ysePanic(YO_EX_INTERNAL);
    break;
  }
}

void yogiPutLocRep(yosx *x, yogiLocRep *lr, yogiIOR *ior)
{
  yosxPutUB4(x,lr->reqid);
  yosxPutUB4(x,lr->status);

  if(ior)
    yogiPutIOR(x,ior);
}

void yogiPutOR(yosx *x, dvoid *ref, ub4 reftag)
{
  yoctx *ctx;
  yoo *r;

  if(!ref)
  {
    yogiPutIOR(x,(yogiIOR *)0);
    return;
  }

  ysmCheck(ref,yoTagObjRef);

  r = (yoo *) ref;
  ctx = yoCtx;

  if(bit(r->flags,YOOFL_IOR))
  {
    yogiPutIOR(x,&r->ior);
  }
  else                               /* wrap up a native reference as an IOR */
  {
    yogiPutStr(x,(char *)r->intf);                         /* type_id string */
    yosxPutUB4(x,(ub4)1);                                   /* profile count */
    switch(reftag)
    {
    case YOGIIOR_TAG_INTERNET:
      yogiPutYoIiopProf(x,ref);                /* native ref as IIOP profile */
      break;
    case YOGIIOR_TAG_YO:
      yogiPutYoYoProf(x,ref);                    /* native ref as YO profile */
      break;
    default:
      ysePanic(YO_EX_INTERNAL);                               /* bad bad bad */
      break;
    }
  }
}

STATICF void yogiPutYoIiopProf(yosx *x, dvoid *ref)
{
  yoctx *ctx;
  yosxPos lp, ep;
  ub4 len;

  ctx = yoCtx;

  yosxPutUB4(x,YOGIIOR_TAG_INTERNET);                          /* profile id */
  yosxAlign(x,4);
  yosxGetPos(x, &lp);
  yosxPutUB4(x,(ub4)0);                       /* DUMMY - profile data length */
  yosxPutUB1(x,YO_BYTESEX);                                      /* byte sex */

  yosxPutUB1(x,(ub1)1);                                    /* IIOP ver major */
  yosxPutUB1(x,(ub1)0);                                    /* IIOP ver minor */
  yogiPutStr(x,ctx->iiopexta);                           /* IIOP IP hostname */
  yosxPutUB2(x,ctx->iiopextp);                               /* IIOP IP port */

  yogiPutYoIiopObjKey(x,ref);              /* put down YO ref in IIOP objkey */

  /* do length fixups */
  yosxGetPos(x,&ep);
  len = yosxGetLength(x,&ep,&lp) - 4;
  yosxPutUB4AtPos(x,&lp,len);
}

STATICF void yogiPutYoIiopObjKey(yosx *x, dvoid *ref)
{
  yosxPos lp, ep;
  ub4 len;

  /* IIOR object key - SeqOct */
  yosxAlign(x,4);
  yosxGetPos(x, &lp);
  yosxPutUB4(x,(ub4)0);                            /* DUMMY - object key len */
  yosxPutUB1(x,YO_BYTESEX);                                      /* byte sex */
  yosxPutUB4(x,YOGIOKEY_YOPROF);             /* object key contains a YOPROF */
  yogiPutYoYoProf(x,ref);            /* use the YO profile as the object key */

  /* do length fixups */
  yosxGetPos(x,&ep);
  len = yosxGetLength(x,&ep,&lp) - 4;
  yosxPutUB4AtPos(x,&lp,len);                           /* object key length */
}

STATICF void yogiPutYoYoProf(yosx *x, dvoid *ref)
{
  yoo *r = (yoo *)ref;
  yosxPos lp, ep;
  ub4 len;

  yosxPutUB4(x,YOGIIOR_TAG_YO);                                /* profile id */
  yosxAlign(x,4);
  yosxGetPos(x, &lp);
  yosxPutUB4(x,(ub4)0);                     /* DUMMY - profile data length */
  yosxPutUB1(x,YO_BYTESEX);                                    /* byte sex */

  /* IOR YO profile */
  yosxPutUB1(x,(ub1)1);                                         /* ver major */
  yosxPutUB1(x,(ub1)0);                                         /* ver minor */
  yotxPutAddr(x,r->addr);                                         /* address */

  yogiPutYoYoObjKey(x,r);                                  /* put object key */

  /* do length fixups */
  yosxGetPos(x, &ep);
  len = yosxGetLength(x,&ep,&lp) - 4;
  yosxPutUB4AtPos(x,&lp,len);                         /* profile data length */
}

STATICF void yogiPutYoYoObjKey(yosx *x, yoo *r)
{
  yosxPos lp, ep;
  ub4 len;

  /* YO object key - SeqOct */
  yosxAlign(x,4);
  yosxGetPos(x,&lp);
  yosxPutUB4(x,(ub4)0);                                    /* DUMMY - length */
  yosxPutUB1(x,YO_BYTESEX);                                      /* byte sex */
  yosxPutUB4(x,YOGIOKEY_BASE);                            /* object key type */
  yogiPutStr(x,ysidToStr(r->intf));                             /* interface */
  yogiPutStr(x,ysidToStr(r->impl));                        /* implementation */
  yosxPutUB4(x,r->id._length);                                   /* ref data */
  if(r->id._length)
    yosxCopy(x,r->id._buffer,(size_t)r->id._length);
  yosxPutUB4(x,r->key);                                         /* state key */

  /* do length fixups */
  yosxGetPos(x, &ep);
  len = yosxGetLength(x,&ep,&lp) - 4;
  yosxPutUB4AtPos(x,&lp,len);                           /* object key length */
}

dvoid *yogiGetOR(yosx *x)
{
  yoctx *ctx;
  yogiIOR ior;
  yoo *ref = (yoo*)0;

  ctx = yoCtx;

  yogiGetIOR(ctx,x,&ior,&ref);

  /* null object reference ? */       
  if(!ior.type_id && !ior.profs)
    return (dvoid *)0;

  if(ref)
      yogiFreeIOR(&ior);
  else
    ref = yoRefCreateIOR(ctx, &ior);

  return (dvoid *)ref;
}

void yogiPutIOR(yosx *x, yogiIOR *ior)
{
  ub4 cnt;
  ysle *le;
  yogiTagProf *prof;

  if(!ior || (!ior->type_id && !ior->profs))               /* null reference */
  {
    yosxPutUB4(x,(ub4)0);
    yosxPutUB4(x,(ub4)0);
    return;
  }
  yogiPutStr(x,ior->type_id);
  if(ior->profs)
  {
    cnt = ysLstCount(ior->profs);
    yosxPutUB4(x,cnt);
    for(le = ysLstHead(ior->profs); le; le = ysLstNext(le))
    {
      prof = (yogiTagProf *) ysLstVal(le);
      yosxPutUB4(x,prof->tag);
      switch(prof->tag)
      {
      case YOGIIOR_TAG_INTERNET:
        yogiPutIiopProf(x,prof);
        break;
      case YOGIIOR_TAG_YO:
        yogiPutYoProf(x,prof);
        break;
      default:
        yogiPutOctSeq(x,prof->pdata.data);
        break;
      }
    }
  }
  else
    yosxPutUB4(x,(ub4)0);
}

void yogiGetIOR(yoctx *ctx, yosx *x, yogiIOR *ior, yoo **r)
{
  ub4 len, i;
  ub4 tag;
  yogiTagProf *prof;

  if(r)
    *r = (yoo *)0;

  /* type_id string */
  ior->type_id = yogiGetStr(ctx,x);

  /* unmarshall the profiles */
  len = yosxGetUB4(x);
  if(len)
    ior->profs = ysLstCreate();
  else
    ior->profs = (yslst *) 0;
  for(i=0; (!r || !*r) && i < len; i++)
  {
    tag = yosxGetUB4(x);
    prof = (yogiTagProf *)ysmGlbAlloc(sizeof(yogiTagProf),"yogiTagProf");
    prof->tag = tag;
    switch(tag)
    {
    case YOGIIOR_TAG_INTERNET:
      yogiGetIiopProf(x,prof,r);
      break;
    case YOGIIOR_TAG_YO:
      yogiGetYoProf(x,prof,r);
      break;
    default:
      prof->pdata.data = yogiGetOctSeq(x);
      break;
    }
    DISCARD ysLstEnq(ior->profs,(dvoid *)prof);
  }
}

STATICF void yogiPutIiopProf(yosx *x, yogiTagProf *prof)
{
  yosxPos p, end;
  ub4 len;

  yosxAlign(x,4);
  yosxGetPos(x,&p);
  yosxPutUB4(x,(ub4)0);                                      /* dummy length */
  yosxPutUB1(x, YO_BYTESEX);
  yosxPutUB1(x,prof->pdata.iiop.ver_major);
  yosxPutUB1(x,prof->pdata.iiop.ver_minor);
  yogiPutStr(x,prof->pdata.iiop.host);
  yosxPutUB2(x,prof->pdata.iiop.port);
  yogiPutOctSeq(x,prof->pdata.iiop.objkey);

  /* fixup length */
  yosxGetPos(x,&end);
  len = yosxGetLength(x,&end,&p) - 4;
  yosxPutUB4AtPos(x,&p,len);
}

STATICF void yogiGetIiopProf(yosx *x, yogiTagProf *prof, yoo **r)
{
  yoctx *ctx;
  ub4 elen;
  ub1 bsex, obsex;

  ctx = yoCtx;

  elen = yosxGetUB4(x);                              /* encapsilation length */
  bsex = yosxGetUB1(x);                                           /* bytesex */
  obsex = yosxDecGet(x);
  yosxDecSet(x,(boolean)bsex);
  prof->pdata.iiop.ver_major = yosxGetUB1(x);
  prof->pdata.iiop.ver_minor = yosxGetUB1(x);
  prof->pdata.iiop.host = yogiGetStr((yoctx *)0,x);
  prof->pdata.iiop.port = yosxGetUB2(x);
  if(r &&
     (!prof->pdata.iiop.host ||
      (ctx->iiopexta && strcmp(prof->pdata.iiop.host,ctx->iiopexta) == 0)) &&
     prof->pdata.iiop.port == ctx->iiopextp)
  {
    prof->pdata.iiop.objkey = (yogiOctSeq *) 0;
    *r = yogiGetObjKey(ctx,x,(yota *)0,FALSE);
  }
  else
    prof->pdata.iiop.objkey = yogiGetOctSeq(x);
  yosxDecSet(x,(boolean)obsex);
}

STATICF void yogiPutYoProf(yosx *x, yogiTagProf *prof)
{
  yosxPos p, end;
  ub4 len;

  yosxAlign(x,4);
  yosxGetPos(x,&p);
  yosxPutUB4(x,(ub4)0);                                      /* dummy length */
  yosxPutUB1(x, YO_BYTESEX);
  yosxPutUB1(x,prof->pdata.yo.ver_major);
  yosxPutUB1(x,prof->pdata.yo.ver_minor);
  yotxPutAddr(x,prof->pdata.yo.addr);
  yogiPutOctSeq(x,prof->pdata.yo.objkey);

  /* fixup length */
  yosxGetPos(x,&end);
  len = yosxGetLength(x,&end,&p) - 4;
  yosxPutUB4AtPos(x,&p,len);
}

STATICF void yogiGetYoProf(yosx *x, yogiTagProf *prof, yoo **r)
{
  ub4 elen;
  ub1 bsex, obsex;

  elen = yosxGetUB4(x);                              /* encapsilation length */
  bsex = yosxGetUB1(x);                                           /* bytesex */
  obsex = yosxDecGet(x);
  yosxDecSet(x,(boolean)bsex);
  prof->pdata.yo.ver_major = yosxGetUB1(x);
  prof->pdata.yo.ver_minor = yosxGetUB1(x);
  prof->pdata.yo.addr = yotxGetAddr(x);
  if(r)
  {
    *r = yogiGetObjKey(yoCtx,x,prof->pdata.yo.addr,FALSE);
    prof->pdata.yo.addr = (yota *)0;
    prof->pdata.yo.objkey = (yogiOctSeq *)0;
  }
  else
    prof->pdata.yo.objkey = yogiGetOctSeq(x);

  yosxDecSet(x,(boolean)obsex);
}

void yogiFreeIOR(yogiIOR *ior)
{
  if(ior->profs)
    ysLstDestroy(ior->profs, (ysmff)yogiFreeTagProf);
}

STATICF void yogiFreeTagProf(yogiTagProf *prof)
{
  switch(prof->tag)
  {
  case YOGIIOR_TAG_INTERNET:
    if(prof->pdata.iiop.host)
      ysmGlbFree((dvoid *)prof->pdata.iiop.host);
    if(prof->pdata.iiop.objkey)
      ysmGlbFree((dvoid *)prof->pdata.iiop.objkey);
    break;
  case YOGIIOR_TAG_YO:
    if(prof->pdata.yo.addr)
      yotAddrFree(prof->pdata.yo.addr);
    if(prof->pdata.yo.objkey)
      ysmGlbFree((dvoid *)prof->pdata.yo.objkey);
    break;
  default:
    if(prof->pdata.data)
      ysmGlbFree((dvoid *)prof->pdata.data);
    break;
  }
  ysmGlbFree((dvoid *)prof);
}

STATICF void yogiPutObjKey(yosx *x, yoo *ref, ub4 reftag)
{
  ysle *le;
  yogiIOR *ior;
  yogiTagProf *prof = (yogiTagProf *)0;

  if(bit(ref->flags,YOOFL_IOR))                 /* object outside our domain */
  {
    ior = &ref->ior;
    for(le = ysLstHead(ior->profs); le; le = ysLstNext(le))
    {
      prof = (yogiTagProf *) ysLstVal(le);
      if(prof->tag == reftag)
        break;
    }
    if(!le)
      ysePanic(YO_EX_INTERNAL);
    switch(reftag)
    {
    case YOGIIOR_TAG_INTERNET:
      yogiPutOctSeq(x,prof->pdata.iiop.objkey);
      break;
    case YOGIIOR_TAG_YO:
      yogiPutOctSeq(x,prof->pdata.yo.objkey); 
      break;
    default:
      yogiPutOctSeq(x,prof->pdata.data);
      break;
    }
  }
  else
  {
    switch(reftag)
    {
    case YOGIIOR_TAG_INTERNET:
      yogiPutYoIiopObjKey(x,(dvoid *)ref);
      break;
    case YOGIIOR_TAG_YO:
      yogiPutYoYoObjKey(x,ref);
      break;
    default:
      ysePanic(YO_EX_INTERNAL);
      break;
    }
  }
}

yoo *yogiGetObjKey(yoctx *ctx, yosx *x, yota *addr, boolean local)
{
  ub1 ver_major, ver_minor;
  ub4 elen;
  ub1 bsex, obsex;
  yoo *ref = (yoo*)0;
  ub4 type;
  yota *naddr;
  
  elen = yosxGetUB4(x);                       /* length of the encapsilation */
  bsex = yosxGetUB1(x);
  obsex = yosxDecGet(x);                                    /* orig byte sex */
  yosxDecSet(x,(boolean)bsex);                                   /* byte sex */
  type = yosxGetUB4(x);                       /* pickup object key type info */
  switch(type)
  {
  case YOGIOKEY_BASE:
    ref = yogiGetBaseObjKey(ctx,x,addr,local);
    break;
  case YOGIOKEY_YOPROF:
    if(yosxGetUB4(x) != YOGIIOR_TAG_YO)     /* pickup & check YO profile tag */
      ysePanic(YO_EX_INTERNAL);
    elen = yosxGetUB4(x);
    yosxDecSet(x,(boolean)yosxGetUB1(x));
    ver_major = yosxGetUB1(x);
    ver_minor = yosxGetUB1(x);
    naddr = yotxGetAddr(x);
    if(!naddr && local)
    {
      /* Don't use the empty address when eating a locally targeted loose ref.
         This insures that the loosely bound reference has a valid imp field
         as required by many functions in yocoa.h.  Even after reading this
         many of you won't get it.
       */
      naddr = addr;
    }
    else if(addr)
      yotAddrFree(addr);

    ref = yogiGetObjKey(ctx,x,naddr,local);
    break;
  default:
    ysePanic(YO_EX_INTERNAL);
    break;
  }
  yosxDecSet(x,(boolean)obsex);

  return ref;
}

STATICF yoo *yogiGetBaseObjKey(yoctx *ctx, yosx *x, yota *addr, boolean local)
{
  yoo r, *ref;
  yota *objaddr;

  ref = (yoo *) 0;
  if(local && addr && !yotAddrEq(addr,ctx->rrpaddr))
    goto abort;

  CLRSTRUCT(r);
  r.addr = addr;
  r.intf = yogiGetStr(ctx,x);                                   /* interface */
  r.impl = yogiGetStr(ctx,x);                              /* implementation */
  r.id._length = yosxGetUB4(x);                                  /* ref data */
  if(r.id._length)
  {
    r.id._buffer = (ub1 *) ysmGlbAlloc(r.id._length,"refdata");
    yosxCopy(x,r.id._buffer,(size_t)r.id._length);
  }
  else
    r.id._buffer = (ub1 *)0;
  r.key = yosxGetUB4(x);                                        /* state key */
  if(r.key && local)
    ref = yoDuplicate(yoGetRef(ctx,r));
  else
  {
    if(!local && r.key == YOSTID_INV && addr)
      objaddr = (yota *)0;
    else
    {
      objaddr = addr;
      addr = (yota *)0;
    }

    ref = yoRefCreate(ctx,r.intf,r.impl,&r.id,r.key,objaddr,(dvoid *)0,FALSE);
  }
  if(r.id._buffer)
    ysmGlbFree((dvoid *)r.id._buffer);

 abort:
  if(addr)
    yotAddrFree(addr);
  return ref;
}

void yogiPutSvcCtxLst(yosx *x, yslst *scl)
{
  ub4 cnt;
  ysle *le;
  yogiSvcCtx *sc;

  if(!scl)
    yosxPutUB4(x,(ub4)0);
  else
  {
    cnt = ysLstCount(scl);
    yosxPutUB4(x,cnt);
    for(le = ysLstHead(scl); le; le = ysLstNext(le))
    {
      sc = (yogiSvcCtx *)ysLstVal(le);
      yosxPutUB4(x,sc->id);
      yosxPutUB4(x,sc->data.len);
      yosxCopy(x,sc->data.data,sc->data.len);
    }
  }
}

yslst *yogiGetSvcCtxLst(yosx *x)
{
  yslst *scl = (yslst *)0;
  ub4 cnt, i, id, len;
  yogiSvcCtx *sc;

  cnt = yosxGetUB4(x);                  /* pickup the number of svc contexts */
  if(cnt)
    scl = ysLstCreate();
  for(i = 0; i < cnt; i++)
  {
    id = yosxGetUB4(x);
    len = yosxGetUB4(x);

    sc = (yogiSvcCtx *) ysmGlbAlloc(sizeof(yogiSvcCtx)+len-1,"yogiSvcCtx");
    sc->id = id;
    sc->data.len = len;
    yosxCopy(x,sc->data.data,len);
    DISCARD ysLstEnq(scl,(dvoid *)sc);
  }
  return scl;
}

void yogiFreeSvcCtx(yogiSvcCtx *sc)
{
    ysmGlbFree((dvoid *)sc);
}

STATICF void yogiPutYoSvcCtxLst(yosx *x, ub4 reftag, yosvcxs *scxs)
{
  yslst *scl;
  ysle *le;
  yogiSvcCtx *sc;
  ub4 cnt;

  cnt = 0;
  if(scxs->ev._length && reftag == YOGIIOR_TAG_YO)
    cnt++;
  if(scxs->upctx)
    cnt++;

  if((scl = scxs->scl))
    cnt += ysLstCount(scl);
  yosxPutUB4(x,cnt);

  if(scxs->upctx)
  {
    yosxPutUB4(x,YOGISVC_TAG_TRANSVC);                   /* put down propctx */
    yogiPutYoPropSvcCtx(x, reftag, scxs->upctx);
  }
  if(scxs->ev._length && reftag == YOGIIOR_TAG_YO)
  {
    yosxPutUB4(x,YOGISVC_TAG_YOENV);                      /* put down yoenv */
    yogiPutYoEnvSvcCtx(x, reftag, &scxs->ev);
  }

  if(scl)
    for(le = ysLstHead(scl); le; le = ysLstNext(le))
    {
      sc = (yogiSvcCtx *)ysLstVal(le);
      yosxPutUB4(x,sc->id);
      yosxPutUB4(x,sc->data.len);
      yosxCopy(x,sc->data.data,sc->data.len);
    }
}

STATICF void yogiGetYoSvcCtxLst(yosx *x, yosvcxs *scxs)
{
  yogiSvcCtx *sc;
  ub4 cnt, i;
  ub4 id,len;
  boolean rx_yoenv = FALSE;

  scxs->scl = (yslst *)0;
  scxs->upctx = (yoTrans_pctx*)0;

  cnt = yosxGetUB4(x);                  /* pickup the number of svc contexts */
  for(i = 0; i < cnt; i++)
  {
    id = yosxGetUB4(x);
    switch(id)
    {
    case YOGISVC_TAG_YOENV:
      if(!rx_yoenv)
      {
        yogiGetYoEnvSvcCtx(x,&scxs->ev);
        rx_yoenv = TRUE;
      }
      break;
    case YOGISVC_TAG_TRANSVC:
      if(!scxs->upctx)
      {
        yogiGetYoPropSvcCtx(x,&scxs->pctx);
        scxs->upctx = &scxs->pctx;
      }
      break;
    default:
      if(!scxs->scl)
        scxs->scl = ysLstCreate();
      len = yosxGetUB4(x);
      sc = (yogiSvcCtx *) ysmGlbAlloc(sizeof(yogiSvcCtx)+len-1,"yogiSvcCtx");
      sc->id = id;
      sc->data.len = len;
      yosxCopy(x,sc->data.data,len);
      DISCARD ysLstEnq(scxs->scl,(dvoid *)sc);
      break;
    }
  }
  if(!rx_yoenv)
    yoEnvInit(&scxs->ev);
}

STATICF void yogiFreeYoSvcCtxLst(yosvcxs *scxs)
{
  yogiFreeSvcCtxLst(scxs->scl);
}

STATICF void yogiPutYoEnvSvcCtx(yosx *x, ub4 reftag, yoenv *yoev)
{
  yosxPos lp, ep;
  ub4 len;

  yosxAlign(x,4);
  yosxGetPos(x,&lp);
  yosxPutUB4(x,(ub4)0);
  yosxPutUB1(x,YO_BYTESEX);
  yotkEncode(yoenv__tc,(dvoid *)yoev,x,reftag);
  yosxGetPos(x,&ep);
  len = yosxGetLength(x,&ep,&lp) - 4;
  yosxPutUB4AtPos(x,&lp,len);
}

STATICF void yogiGetYoEnvSvcCtx(yosx *x, yoenv *yoev)
{
  ub4 elen;
  ub1 obsex;

  elen = yosxGetUB4(x);
  obsex = yosxDecGet(x);
  yosxDecSet(x,yosxGetUB1(x));
  yotkDecode(yoenv__tc,(dvoid *)yoev,x,(ysmaf)0);
  yosxDecSet(x,obsex);
}

STATICF void yogiPutYoPropSvcCtx(yosx *x, ub4 reftag, yoTrans_pctx *pctx)
{
  yosxPos lp, ep;
  ub4 len;

  yosxAlign(x,4);
  yosxGetPos(x,&lp);
  yosxPutUB4(x,(ub4)0);
  yosxPutUB1(x,YO_BYTESEX);
  yotkEncode(YCTC_yoTrans_pctx,(dvoid *)pctx,x,reftag);
  yosxGetPos(x,&ep);
  len = yosxGetLength(x,&ep,&lp) - 4;
  yosxPutUB4AtPos(x,&lp,len);
}

STATICF void yogiGetYoPropSvcCtx(yosx *x, yoTrans_pctx *pctx)
{
  ub4 elen;
  ub1 obsex;

  elen = yosxGetUB4(x);
  obsex = yosxDecGet(x);
  yosxDecSet(x,yosxGetUB1(x));
  yotkDecode(YCTC_yoTrans_pctx,(dvoid *)pctx,x,(ysmaf)0);
  yosxDecSet(x,obsex);
}


STATICF void yogiPutStr(yosx *x, CONST char *str)
{
  ub4 len;

  if(str)
    len = (ub4) strlen(str) + 1;
  else
    len = 0;
  yosxPutUB4(x,len);
  if(len)
    yosxCopy(x,(ub1 *)str,len);
}

/* yogiGetStr - will cache the string in the YO string cache if yoctx is
   non-null.  Ugly sort of interface, but such is life in the fast lane.
*/
STATICF char *yogiGetStr(yoctx *ctx, yosx *x)
{
  char  sbuf[512];
  ub4 len;
  char  *str;
  dvoid *ptr;

  len = yosxGetUB4(x);
  if(!len)
    return (char *) 0;

  if(!ctx || len > sizeof(sbuf))
    str = (char *) (ptr = ysmGlbAlloc((size_t)len,"yogiGetStr"));
  else
  {
    ptr = (dvoid *) 0;
    str = sbuf;
  }

  yosxCopy(x,(ub1 *)str,(size_t)len);

  if(ctx)
  {
    str = yoGetStr(ctx,str);
    if(ptr)
      ysmGlbFree(ptr);
  }

  return str;
}

void yogiPutOctSeq(yosx *x, yogiOctSeq *os)
{
  yosxPutUB4(x,os->len);
  yosxCopy(x,os->data,os->len);
}

yogiOctSeq *yogiGetOctSeq(yosx *x)
{
  ub4 len;
  yogiOctSeq *os;

  len = yosxGetUB4(x);                               /* encapsilation length */
  os = (yogiOctSeq *) ysmGlbAlloc(sizeof(yogiOctSeq)+len-1,"yogiOctSeq");
  os->len = len;
  yosxCopy(x,os->data,len);

  return os;
}

ub4 yogiHashIOR(yogiIOR *ior)
{
  ub4 hash;
  ub1 *cp, *end;
  ysle *le;
  yogiTagProf *prof;

  hash = 0;
  if((cp = (ub1 *)ior->type_id))
    for(; *cp; cp++)
      hash += *cp;
  if(ior->profs)
  {
    for(le = ysLstHead(ior->profs); le; le = ysLstNext(le))
    {
      prof = (yogiTagProf *) ysLstVal(le);
      switch(prof->tag)
      {
      case YOGIIOR_TAG_INTERNET:
        hash += prof->pdata.iiop.ver_major;
        hash += prof->pdata.iiop.ver_minor;
        if((cp = (ub1 *)prof->pdata.iiop.host))
          for(; *cp; cp++)
            hash += *cp;
        hash += prof->pdata.iiop.port;
        cp = prof->pdata.iiop.objkey->data;
        end = cp + prof->pdata.iiop.objkey->len;
        break;
      case YOGIIOR_TAG_YO:
        hash += prof->pdata.yo.ver_major;
        hash += prof->pdata.yo.ver_minor;
        if(prof->pdata.yo.addr)
          hash += yotHashAddr(prof->pdata.yo.addr);
        cp = prof->pdata.yo.objkey->data;
        end = cp + prof->pdata.yo.objkey->len;
        break;
      default:
        cp = prof->pdata.data->data;
        end = cp + prof->pdata.data->len;
        break;
      }
      for(; cp < end; cp++)
        hash += *cp;
    }
  }
  return hash;
}

sword yogiCmpIOR(yogiIOR *i1, yogiIOR *i2)
{
  sword val = 0;
  ysle *l1, *l2;
  yogiTagProf *p1, *p2;

  if(i1->type_id != i2->type_id)
  {
    if(i1->type_id && i2->type_id)
      val = strcmp(i1->type_id, i2->type_id);
    else
    {
      if(i1->type_id)
        val = 1;
      else
        val = -1;
    }
  }
  if(val) return val;

  if(i1->profs && i2->profs)
  {
    val = ysLstCount(i1->profs) - ysLstCount(i2->profs);
    for(l1 = ysLstHead(i1->profs); l1 && !val; l1 = ysLstNext(l1))
    {
      p1 = (yogiTagProf *) ysLstVal(l1);
      val = 1;
      for(l2 = ysLstHead(i2->profs); l2 && val; l2 = ysLstNext(l2))
      {
        p2 = (yogiTagProf *) ysLstVal(l2);
        if(p1->tag == p2->tag)
          val = yogiCmpProf(p1,p2);
      }
    }
  }
  return val;
}

STATICF sword yogiCmpProf(yogiTagProf *p1, yogiTagProf *p2)
{
  sword val;
  ub4 len1, len2;
  ub1 *kp1, *kp2;

  switch(p1->tag)
  {
  case YOGIIOR_TAG_INTERNET:
    if((val = p1->pdata.iiop.ver_major - p2->pdata.iiop.ver_major))
      return val;
    if((val = p1->pdata.iiop.ver_minor - p2->pdata.iiop.ver_minor))
      return val;
    if((val = strcmp(p1->pdata.iiop.host, p2->pdata.iiop.host)))
      return val;
    if((val = p1->pdata.iiop.port - p2->pdata.iiop.port))
      return val;
    kp1 = p1->pdata.iiop.objkey->data;
    len1 = p1->pdata.iiop.objkey->len;
    kp2 = p2->pdata.iiop.objkey->data;
    len2 = p2->pdata.iiop.objkey->len;
    break;

  case YOGIIOR_TAG_YO:
    if((val = p1->pdata.yo.ver_major - p2->pdata.yo.ver_major))
      return val;
    if((val = p1->pdata.yo.ver_minor - p2->pdata.yo.ver_minor))
      return val;
    if(p1->pdata.yo.addr && p2->pdata.yo.addr)
    {
      if((val = memcmp(p1->pdata.yo.addr,p2->pdata.yo.addr,sizeof(yota))))
        return val;
    }
    else
    {
      if(p1->pdata.yo.addr)
        return 1;
      else
        return -1;
    }
    kp1 = p1->pdata.yo.objkey->data;
    len1 = p1->pdata.yo.objkey->len;
    kp2 = p2->pdata.yo.objkey->data;
    len2 = p2->pdata.yo.objkey->len;
    break;

  default:
    kp1 = p1->pdata.data->data;
    len1 = p1->pdata.data->len;
    kp2 = p2->pdata.data->data;
    len2 = p2->pdata.data->len;
    break;
  }
  if((val = len1 - len2))
    return val;
  return memcmp(kp1,kp2,len1);
}

