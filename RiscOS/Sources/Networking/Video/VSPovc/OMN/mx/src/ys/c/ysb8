/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ysb8.c - Portable 64-bit Signed Integer Data Type Implementation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YSB8_ORACLE
#include <ysb8.h>
#endif
#ifndef YSE_ORACLE
#include <yse.h>
#endif

/*
 * Definition of zero
 */
static    CONST ysb8 ysb8zeroval = { 0, 0 };
static    CONST ysb8 ysb8minval  = { (sb4) 0x7fffffff - 1, 0x0 };
externdef CONST ysb8 *CONST_W_PTR ysb8zero = &ysb8zeroval;

/*
 * ysb8add - addition
 */
void ysb8add(ysb8 *out, ysb8 *u, ysb8 *v)
{
  ub4 tmp;

  tmp = u->lo;
  out->lo = u->lo + v->lo;
  out->hi = u->hi + v->hi + (out->lo < tmp);
}

/*
 * ysb8sub - subtraction
 */
void ysb8sub(ysb8 *out, ysb8 *u, ysb8 *v)
{
  ub4 tmp1, tmp2;

  tmp1 = u->lo, tmp2 = v->lo;
  out->lo = u->lo - v->lo;
  out->hi = u->hi - v->hi - (tmp2 > tmp1);
}

/*
 * ysb8mul - multiplication
 */
void ysb8mul(ysb8 *out, ysb8 *u, ysb8 *v)
{
  ub4 a, b, c, d, tmp1, tmp2;

  a = u->lo >> 16;
  b = u->lo & 0xffff;
  c = v->lo >> 16;
  d = v->lo & 0xffff;
  tmp1 = u->lo, tmp2 = v->lo;

  out->lo = u->lo * v->lo;
  out->hi = (sb4) (tmp1 * v->hi + u->hi * tmp2 +
		   a*c + ((b*c + a*d + ((b*d) >> 16)) >> 16));
}

/*
 * ysb8div - division
 *   This implements a 64-bit divide following the same basic algorithm
 *   you would use on paper.  It is probably slower than is optimal, but
 *   it does have the virtue of simplicity (algorithmically speaking).
 */
externdef ysidDecl(YS_EX_DIVBYZERO) = "ys::divbyzero";
STATICF sword ysb8hibit(ysb8 *val);

void ysb8div(ysb8 *out, ysb8 *u, ysb8 *v)
{
  ysb8 num, den, tmp;
  sb4   qd;
  sword ns, ds, neg, bitpos;

  /* check for division by zero */
  if (ysb8cmp(v, ==, ysb8zero))
    yseThrow(YS_EX_DIVBYZERO);

  /* make local copies, converting to unsigned numerator and denominator
   * if necessary
   */
  if (u->hi < 0)
    {
      ysb8neg(&num, u);
      neg = -1;
    }
  else
    {
      ysb8set(&num, u);
      neg = 1;
    }

  if (v->hi < 0)
    {
      ysb8neg(&den, v);
      neg = -neg;
    }
  else
    ysb8set(&den, v);

  /* now check for quick divides */
  if (!u->hi && !v->hi)
    {
      out->hi = 0;
      out->lo = u->lo / v->lo;
      goto wrapup;
    }

  /* when we set up our denominator, we right shift by 1 ensure that it is
   * always less than our numerator.  However, if the denominator is greater
   * than or equal to 0x4000000000000000, then we risk losing a low-order bit
   * that is part of the original number.  In this case, the resulting divide
   * can only be one or zero.  (Either the numerator is greater than this or
   * it isn't.  There are not enough bits for it to be twice as great.)  Check
   * for this special case and be done with it.
   */
  if (den.hi & 0x40000000)
    {
      if (ysb8cmp(&num, >=, &den))
	ysb8ext(out, 1);
      else
	ysb8set(out, ysb8zero);
      goto wrapup;
    }

  /* setup accumulators */
  ysb8set(out, ysb8zero);                         /* clear the denominator */
  ns = 0;           /* number of bits shifted in numerator is initially zero */
  ds = ysb8hibit(&den);                     /* shift denominator to the left */
  ysb8srl(&den, &den, 1);      /* now shift it back to the right by one bit */
  ds--;

  /* begin divide */
  while (!ysb8cmp(&num, ==, ysb8zero) && ds >= ns)
    {
      /* ensure that the numerator has been shifted all the way to the left.
       * Because we shift the denominator to the right by one bit, we are
       * guaranteed that we will produce a meaningful quotient
       */
      ns += ysb8hibit(&num);

      /* get the next quotient digit; we are assured that this operation
       * always produces a positive result, so qd is always positive
       */
      qd = num.hi / den.hi;

      /* now compute the remainder: num = num - (den * qd); do to a possible
       * rounding, qd may be one too high, so we compare and deduct one if
       * necessary.
       */
      ysb8mulb4(&tmp, &den, qd);
      if (ysb8cmp(&tmp, >, &num))
	{
	  qd--;
	  ysb8mulb4(&tmp, &den, qd);
	}

      ysb8sub(&num, &num, &tmp);

      /* now insert the quotient bits into the out accumulator; the position
       * of the unit bit is given by the difference between how much we have
       * shifted the numerator and how much we have shifted the denominator.
       * So we convert the quotient bits to a 64-bit integer and shift left
       * the appropriate number of bits.  Then, we OR the result.  It is
       * possible for the unit bit to be below the edge of the accumulator,
       * indicating a fractional result.  This is a pretty good indication
       * that we are done, but there may still be some part of the quotient
       * digits that appears in the integral part.
       */
      bitpos = ds - ns;
      tmp.hi = 0, tmp.lo = (ub4) qd;
      if (bitpos >= 0)
	{
	  ysb8sll(&tmp, &tmp, bitpos);
	  out->hi |= tmp.hi, out->lo |= tmp.lo;
	}
      else
	{
	  qd >>= (-bitpos);
	  out->lo |= qd;
	}
    }

 wrapup:
  if (neg == -1)
    ysb8neg(out, out);
}

/*
 * ysb8rem - remainder
 */
void ysb8rem(ysb8 *out, ysb8 *u, ysb8 *v)
{
  ysb8 tmp;
  ysb8edv(u, v, &tmp, out);
}

/*
 * ysb8neg - negation
 */
void ysb8neg(ysb8 *out, ysb8 *v)
{
  ub4 tmp;
  tmp = v->lo;

  out->lo = (ub4) -((sb4) v->lo);
  out->hi = - v->hi - (tmp > 0);
}

/*
 * ysb8srl - shift right logical
 */
void ysb8srl(ysb8 *out, ysb8 *u, sword bits)
{
  if (bits > 31)
    {
      out->lo = ((ub4) u->hi) >> (bits - 32);
      out->hi = 0;
    }
  else
    {
      out->lo = u->lo >> bits;
      out->lo |= ((u->hi & ((1 << bits) - 1)) << (32 - bits));
      out->hi = (sb4) (((ub4) u->hi) >> bits);
    }
}

/*
 * ysb8sll - shift left logical
 */
void ysb8sll(ysb8 *out, ysb8 *u, sword bits)
{
  if (bits >= 32)
    out->hi = (sb4) u->lo, out->lo = 0, bits -= 32;
  else
    ysb8set(out, u);

  if (bits)
    {
      out->hi = (sb4) ((out->hi << bits) | (out->lo >> (32 - bits)));
      out->lo = (out->lo << bits);
    }
}

/*
 * ysb8edv - combined division/remainder
 */
void ysb8edv(ysb8 *u, ysb8 *v, ysb8 *q, ysb8 *r)
{
  ysb8 tmp, tmp2;

  ysb8div(&tmp, u, v);
  ysb8mul(&tmp2, &tmp, v);
  ysb8sub(r, u, &tmp2);
  ysb8set(q, &tmp);
}

/*
 * ysb8addb4 - add 32-bit integer to 64-bit integer
 */
void ysb8addb4(ysb8 *out, ysb8 *u, sb4 v)
{
  ysb8 tmp;
  ysb8ext(&tmp, v);
  ysb8add(out, u, &tmp);
}

/*
 * ysb8mulb4 - multiply 32-bit integer with 64-bit integer
 */
void ysb8mulb4(ysb8 *out, ysb8 *u, sb4 v)
{
  ysb8 tmp;
  ysb8ext(&tmp, v);
  ysb8mul(out, u, &tmp);
}

/*
 * ysb8fromdbl - convert from double to 64-bit integer
 */
void ysb8fromdbl(ysb8 *out, double g)
{
  double t;

  t = g / ((ub4) 0xffffffff);
  out->hi = (sb4) t;
  out->lo = (ub4) (g - (g * ((sb4) t)));
}

/*
 * ysb8fmt - integer to string
 */
STATICF void ysb8dfmt(char *buf, ysb8 *orig);
STATICF void ysb8xfmt(char *buf, ysb8 *orig);

char *ysb8fmt(char *buf, CONST char *fmt, ysb8 *val)
{
  if (!strcmp(fmt, "%Ld"))
    ysb8dfmt(buf, val);
  else if (!strcmp(fmt, "%Lx"))
    ysb8xfmt(buf, val);
  else
    DISCARD strcpy(buf, fmt);

  return buf;
}

/*
 * ysb8fromstr - convert from string to 64-bit integer
 */
boolean ysb8fromstr(ysb8 *out, CONST char *str)
{
  boolean neg;
  sword   base, d;

  neg = FALSE;
  ysb8set(out, ysb8zero);

  if (str[0] == '0' && (str[1] == 'x' || str[1] == 'X'))
    {
      base = 16;
      str += 2;
    }
  else
    {
      base = 10;
      if (*str == '-')
	{
	  neg = TRUE;
	  str++;
	}
    }
  
  while (*str)
    {
      switch (*str)
	{
	case '0': d = 0; break;  case '1': d = 1;  break;
	case '2': d = 2; break;
	case '3': d = 3; break;  case '4': d = 4;  break;
	case '5': d = 5; break;
	case '6': d = 6; break;  case '7': d = 7;  break;
	case '8': d = 8; break;
	case '9': d = 9; break;  case 'a': d = 10; break;
	case 'b': d = 11; break;
	case 'c': d = 12; break; case 'd': d = 13; break;
	case 'e': d = 14; break; case 'f': d = 15; break;
	default:  d = 17; break;
	}

      if (d >= base)
	return FALSE;

      ysb8mulb4(out, out, (sb4) base);
      ysb8addb4(out, out, (sb4) d);
      str++;
    }

  if (neg)
    ysb8neg(out, out);
  
  return TRUE; 
}

/*
 * ysb8hibit - shift the operand to the left until the most significant bit
 *   in the operand is moved to the MSB; this is used by the 64-bit divide
 *   routine.
 */
STATICF sword ysb8hibit(ysb8 *v)
{
  sword cnt;

  if (v->hi)
    {
      cnt = 0;
      while (!(v->hi & 0x40000000))
	v->hi <<= 1, cnt++;

      /* shifting by 0 or 32 is ill-defined and we don't need to do it
       * anyway
       */
      if (cnt)
	{
	  v->hi |= (v->lo >> (32 - cnt));
	  v->lo = (v->lo << cnt);
	}
    }
  else if (v->lo)
    {
      v->hi = (sb4) v->lo, v->lo = 0, cnt = 32;
      while (!(v->hi & 0x40000000))
	v->hi <<= 1, cnt++;
    }
  else
    cnt = 0;

  return cnt;
}

/*
 * ysb8dfmt - decimal fmt routine
 */
STATICF void ysb8dfmt(char *buf, ysb8 *orig)
{
  ysb8    val, ten, rem;
  sword   len;
  boolean neg;
  char    tmp[24];

  ysb8set(&val, orig);
  ysb8ext(&ten, 10);

  if (ysb8cmp(&val, ==, ysb8zero))
    DISCARD strcpy(buf, "0");
  else if (ysb8cmp(&val, ==, &ysb8minval))
    DISCARD strcpy(buf, "-9223372036854775808");
  else
    {
      if (neg = ysb8cmp(&val, <, ysb8zero))
	ysb8neg(&val, &val);

      len = 24;
      tmp[--len] = '\0';

      while (ysb8cmp(&val, !=, ysb8zero))
	{
	  ysb8edv(&val, &ten, &val, &rem);
	  tmp[--len] = (char) ysb8msk(&rem) + '0';
	}

      if (neg)
	tmp[--len] = '-';

      DISCARD strcpy(buf, tmp + len);
    }
}

/*
 * ysb8xfmt - hexidecimal format routine
 */
static CONST_DATA char ysb8digits[] = "0123456789abcdef";

STATICF void ysb8xfmt(char *buf, ysb8 *orig)
{
  ysb8  val;
  sb4   rem;
  sword len;
  char  tmp[24];

  ysb8set(&val, orig);

  if (ysb8cmp(&val, ==, ysb8zero))
    DISCARD strcpy(buf, "0");
  else
    {
      len = 24;
      tmp[--len] = '\0';

      while (ysb8cmp(&val, !=, ysb8zero))
	{
	  rem = ysb8msk(&val) & 0xf;
	  ysb8srl(&val, &val, 4);
	  tmp[--len] = ysb8digits[rem];
	}

      DISCARD strcpy(buf, tmp + len);
    }
}
