/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yrmerge.c - Merge loaded objects into existing repository
 *
 * NOTES
 * This is the ugly stuff. In order to merge new data into an existing
 * repository, it is necessary to first verify the merge will not cause
 * an inconsistencies. So the actual merge cannot take place as you
 * do the verification. And if this ever becomes part of a multi-threaded
 * server, make damn sure no one can horn in with a state change
 * operation (like a load) between verification and the true merge.
 *
 * The object table produced by yrRead is first walked for verification,
 * tagging any objects which require later merging. The following objects
 * potentially qualify for merging: Completely new objects, completions
 * of forward interface declarations, and new module components. The
 * remaining objects must be equivalent to their pre-existing counterparts
 * or else they're consider illegal redefinitions.
 *
 * This equivalence checking is made easier by the way yrRead handles
 * embedded object pointers, making them point to pre-existing objects
 * whenever possible. Consider:
 *
 *   New                         Existing
 *   ---                         --------
 *   interface dupl              interface dupl
 *   {                           {
 *     attribute short attr;       attribute long attr;
 *   };                          };
 *
 * When it comes time to compare these two interfaces, the content list
 * for member "attr" will literally point to the same yrobj in the existing
 * repository, so it is not necessary to do a deep comparison of "attr"
 * when checking the repository. A simple pointer comparison will discover
 * them to be equal. Though they're not actually equivalent declarations,
 * we can assume that this fact will be discovered later when the full
 * comparison of the two attributes takes place, thus causing rejection of
 * the whole load. So, equivalence checking of most objects can be done
 * cheaply.
 *
 * Modules are hopeless. Not only can you declare them in non-contiguous bits
 * and pieces, but by time the compiler gets done chewing on them, you can't
 * readily distinguish the piece boundaries in a given compilation unit.
 * You would like to be able to detect illegalities such as:
 *
 *    file1                file2               Existing
 *    -----                -----               --------
 *    module A             module A            module A
 *    {                    {                   {
 *      typedef long foo;    typedef long bar;   typedef long foo;
 *                           typedef long foo;   interface mumble;
 *    };                   };                  };
 *
 * File1 and file2 conflict with one another. However, in terms of what
 * the IFR sees, file 2 could just as easily have been one of these:
 *
 *   #include "file1.idl"           module A
 *   module A                       {
 *   {                                typedef long foo;
 *     typedef long bar;            };
 *   };                             module A
 *                                  {
 *                                    typedef long bar;
 *                                  };
 *
 * So, it is virtually impossible to detect conflicts in modules. We could 
 * look at the source file names, but I think that's a bad idea since the
 * the filenames are not absolute. So, we always assume that modules are
 * OK to merge together. If any of the contained items conflict, that will
 * still be detected, rejecting the overall merge.
 *
 * Structs, unions, and enums are compared by typecode for member equivalence.
 * Structs and unions also potentially contain nested types and these must
 * also be compared - but the same rules about cheap comparison apply as
 * they do to the contents of interfaces and modules.
 *
 * When redefinitions are detected, only that particular object is rejected;
 * the comparison continues so that we can report multiple errors back to
 * the caller. Comparison halts when YR_MAX_ERRS have been encountered, to
 * prevent reporting of excessive cascading errors.
 *
 * Assuming the verification is successful, the object table is walked
 * again to perform the merge. Only interfaces and modules are ever really
 * merged into existing objects, and they ARE merged in - the existing object
 * is never replaced, even if it was an interface forward declaration. The
 * repository already contains references to the existing object; it is
 * much easier to merge the new data into the existing object than it would 
 * be to modify all the references.
 *
 * Everything else (totally new objects) is just added to the content list 
 * of the enclosing container. Of course, we only really need to do this for
 * items at the repository level. Interface and module contents are either
 * already on the appropriate content list, or will be added when their
 * containers are merged.
 *
 * You will also find references in the code to checking for "undefined"
 * objects, but this isn't really implemented yet. In the future, the
 * repository dumps will not include full dumps of objects from include
 * files (just as the compiler code generation doesn't). Instead, an external
 * reference consisting of just a repository id and yrdk will be dumped.
 *
 * It is expected that these external references will be satisifed by data
 * in the existing repository. If this turns out not to be the case, the
 * load must be rejected. To provide maximum flexibility, I have also tried
 * to allow for deferral if we're loading a series of files since the load
 * order potentially affects when an external ref can be resolved. In such
 * a case, you want to allow external refs until all the files are loaded.
 *
 * HISTORY
 * 04/19/96 kcoleman	Switch over to ysRecord for messaging.
 * 02/27/96 kcoleman	Major roadwork for bug #336120: Structs and unions
 *                      are scopes and can have types defined inside them.
 * 12/05/95 kcoleman	Stop being clever about modules, fixed nested modules
 * 11/13/95 kcoleman	Creation
 */

#ifndef SYSX_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef SYSB8_ORACLE
#include <sysb8.h>
#endif
#ifndef YR_ORACLE
#include <yr.h>
#endif
#ifndef YR0_ORACLE
#include <yr0.h>
#endif
#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif
#ifndef YRMGIDL_IDL
#include <yrmgidl.h>
#endif
#ifndef YSLST_ORACLE
#include <yslst.h>
#endif

/* WINDOWS braindamage defines these */
#undef lst1
#undef lst2

STATICF boolean yrObjCommonIsEq( yrobj* obj1, yrobj* obj2);
STATICF boolean yotkIsEq(CONST yotk *tk1, CONST yotk *tk2);
STATICF boolean yrAnyEq( yoany* any1, yoany* any2);
STATICF void yrCmpIntfLdBlk( yrldblk* ldblk, boolean externok);
STATICF void yrCmpOpLdBlk( yrldblk* ldblk, boolean externok);
STATICF void yrCmpLdBlk( yrldblk* ldblk, boolean externok);
STATICF void yrMergeObjs( yrobj* newobj, yrobj* oldobj);
STATICF boolean yrContentsEq( yrobj* obj1, yrobj* obj2);

/* --------------------------------------------------------------------- */
/*
 * yrObjCommonIsEq - Compare the body parts common to all named objects
 */

STATICF boolean yrObjCommonIsEq( yrobj* obj1, yrobj* obj2)
{
  char* nm1;
  char* nm2;
  boolean issame;

  if ( strcmp(yrGetRepId(obj1), yrGetRepId(obj2)) ||
       strcmp(yrGetVersion(obj1), yrGetVersion(obj2)) )
    return FALSE;

  nm1 = yrGetAbsoluteName( obj1);
  nm2 = yrGetAbsoluteName( obj2);

  issame = !strcmp( nm1, nm2);
  ysmGlbFree((dvoid*) nm1);
  ysmGlbFree((dvoid*) nm2);
  return issame;
}

/* --------------------------------------------------------------------- */
/*
 * yotkIsEq - Compare two typecodes
 *
 * This really belongs in yotk, but Gregg didn't want to add it so...
 */

STATICF boolean yotkIsEq(CONST yotk *tk1, CONST yotk *tk2)
{
  size_t tk1sz, tk2sz;

  if ( tk1 == tk2 )
    return TRUE;

  tk1sz = yotkSize(tk1);
  tk2sz = yotkSize(tk2);
  if(tk1sz != tk2sz) return FALSE;

  return (memcmp((dvoid *)tk1,(dvoid *)tk2,tk1sz) == 0);
}


/* --------------------------------------------------------------------- */
/*
 * yrAnyEq - compare two yoany's.
 *
 * Not just any two yoany's, only the types that can appear as constants
 * in the IDL: Scalars, strings, and enums. These are the only type of
 * any that will ever show up in an IFR data file.
 */

STATICF boolean yrAnyEq( yoany* any1, yoany* any2)
{
  if ( !yotkIsEq( any1->_type, any2->_type) )
    return FALSE;

  switch ( yotkGetKind( any1->_type) )
  {
    case yotkShort:
      return (*(sb2*) any1->_value) == (*(sb2*)any2->_value);
    case yotkLong:
      return (*(sb4*) any1->_value) == (*(sb4*)any2->_value);
    case yotkUshort:
      return (*(ub2*) any1->_value) == (*(ub2*)any2->_value);
    case yotkEnum:
    case yotkUlong:
      return (*(ub4*) any1->_value) == (*(ub4*)any2->_value);
    case yotkBoolean:
      return (*(boolean*) any1->_value) == (*(boolean*)any2->_value);
    case yotkChar:
      return (*(char*) any1->_value) == (*(char*)any2->_value);
    case yotkString:
      return !strcmp( *(char**)any1->_value, *(char**)any2->_value);
    case yotkNull:
      return TRUE;
    case yotkLongLong:
      return sysb8cmp((sysb8*)any1->_value, ==, (sysb8*)any2->_value);
    default:
      return FALSE;
  }
}


/* --------------------------------------------------------------------- */
/*
 * yrCmpIntfLdBlk - Compare existing and new interface declarations
 *
 * Issues to deal with: Is one a forward declaration? Are the inheritance
 * specifications the same? Do they contain the same members?
 */

STATICF void yrCmpIntfLdBlk( yrldblk* ldblk, boolean externok)
{
  yslst* lst1;
  yslst* lst2;
  ysle* le1;
  ysle* le2;
  yrobj* newobj = ldblk->newobj;
  yrobj* oldobj = ldblk->existing;
  sword len1, len2;

  ldblk->equal = FALSE;
  ldblk->merge = FALSE;

  if ((yrInterfaceData(newobj).defined != 
	   yrInterfaceData(oldobj).defined))
  {          /* one of these is a forward declaration */
    if ( yrObjCommonIsEq( newobj, oldobj) )
    {
      if ( yrInterfaceData(newobj).defined )
	ldblk->merge = TRUE;
      /* else newobj is the forward, so no one cares */
      ldblk->equal = TRUE;
    }
    else
      ldblk->equal = FALSE;
    return;
  }
  /* else they must match exactly */

  /*
   *   Check the inheritance specifications.
   * It is enough to check names here. If the objects don't match,
   * someone else will figure it out later and report an error.
   * For a similar reason, we don't need to look at indirect bases.
   * We're hard ass about the ordering, though. The only way the
   * orders can come out different is if this isn't from the same
   * declaration. No mercy.
   */
  lst1 = yrInterfaceData(newobj).bases;
  lst2 = yrInterfaceData(oldobj).bases;
  len1 = (lst1 ? ysLstCount(lst1) : 0);
  len2 = (lst2 ? ysLstCount(lst2) : 0);
  if ( len1 != len2 )
    return;

  if ( len1 > 0 )              /* lists are not empty */
  {
    le2 = ysLstHead(lst2);
    for (le1 = ysLstHead(lst1); le1; le1 = ysLstNext(le1))
    {
      if ( ysLstVal(le1) != ysLstVal(le2) )
        return;
      le2 = ysLstNext(le2);
    }
  }

  if ( yrContentsEq( newobj, oldobj) )       /* check the members */
    ldblk->equal = TRUE;
}


/* --------------------------------------------------------------------- */
/*
 * yrContentsEq - Compare the content lists of two containers for equality
 *   Returns TRUE if the contents match, FALSE otherwise.
 *
 * If the lists are not the same length, they're not equal. Assuming the
 * list lengths match, for each item on the new list, attempt to look it
 * up by name on the old list. If it is not found, the lists aren't equal.
 *
 * A minor but crucial little detail: The content lists may be empty
 * but will never be NULL. The yrobj creation routines always create an
 * empty list for a container object.
 */

STATICF boolean yrContentsEq( yrobj* obj1, yrobj* obj2)
{
  boolean mismatch = FALSE;
  yslst* lst1 = yrGetContents(obj1);
  yslst* lst2 = yrGetContents(obj2);
  ysle* le1;

  if ( ysLstCount(lst1) != ysLstCount(lst2) )
    return FALSE;

  for (le1 = ysLstHead(lst1); le1 && !mismatch; le1 = ysLstNext(le1))
  {
    yrobj* m1 = (yrobj*) ysLstVal(le1);
    yslst* matches;

    matches = yrLookupName( obj2, yrGetName(m1), YR_SHALLOW_LOOKUP,
			      yrGetKind(m1), FALSE);
    if ( !matches || (ysLstCount(matches) != 1) ||
	 (ysLstDeq(matches) != (dvoid*) m1) )
    {
      mismatch = TRUE;
    }
    if ( matches )
      ysLstDestroy( matches, (ysmff)0);
  }
  return !mismatch;
}


/* --------------------------------------------------------------------- */
/*
 * yrCmpOpLdBlk - Compare existing and new operation
 *
 * Comparison includes mode (oneway or not), return type, parameters, 
 * and exceptions.
 */

STATICF void yrCmpOpLdBlk( yrldblk* ldblk, boolean externok)
{
  yslst* lst1;
  yslst* lst2;
  ysle* le1;
  ysle* le2;
  yrobj* newobj = ldblk->newobj;
  yrobj* oldobj = ldblk->existing;
  boolean mismatch;

  ldblk->merge = FALSE;
  ldblk->equal = (yrObjCommonIsEq(newobj, oldobj) &&
      (yrOpData(newobj).mode == yrOpData(oldobj).mode) &&
      (yrOpData(newobj).rettype == yrOpData(oldobj).rettype));

  if ( ldblk->equal )      /* check param list */
  {
    lst1 = yrOpData(newobj).pars;
    lst2 = yrOpData(oldobj).pars;

    if ( lst1 && lst2 && (ysLstCount(lst1) == ysLstCount(lst2)) )
    {
      mismatch = FALSE;
      le2 = ysLstHead(lst2);
      for (le1 = ysLstHead(lst1); le1; le1 = ysLstNext(le1))
      {
	yrpar* par1 = (yrpar*) ysLstVal(le1);
	yrpar* par2 = (yrpar*) ysLstVal(le2);

	if ( (par1->mode != par2->mode) ||
	     (par1->type != par2->type) ||
	     strcmp( par1->name, par2->name) )
	{
	  mismatch = TRUE;
	  break;
	}
        le2 = ysLstNext(le2);
      }
      ldblk->equal = !mismatch;
    }
    else if ( lst1 != lst2 )
      ldblk->equal = FALSE;
  }

  if ( ldblk->equal )      /* check raises list */
  {
    lst1 = yrOpData(newobj).raises;
    lst2 = yrOpData(oldobj).raises;

    if ( lst1 && lst2 && (ysLstCount(lst1) == ysLstCount(lst2)) )
    {
      mismatch = FALSE;
      le2 = ysLstHead(lst2);
      for (le1 = ysLstHead(lst1); le1; le1 = ysLstNext(le1))
      {
	if ( ysLstVal(le1) != ysLstVal(le2) )
	{
	  mismatch = TRUE;
	  break;
	}
        le2 = ysLstNext(le2);
      }
      ldblk->equal = !mismatch;
    }
    else if ( lst1 != lst2 )
      ldblk->equal = FALSE;
  }
}


/* --------------------------------------------------------------------- */
/*
 * yrCmpLdBlk - Compare new and existing objects for equality.
 *
 * This is done in a wide variety of ways: For simple objects, we can
 * get away with just comparing the typecodes. For *really* simple objects,
 * it's cheaper to do the checks directly. For things which don't have
 * typecode (attributes, constants, operations) or complex objects,
 * we compare the relevant fields by hand.
 */

STATICF void yrCmpLdBlk( yrldblk* ldblk, boolean externok)
{
  yrobj* newobj;
  yrobj* oldobj;

  if ( ldblk->existing )
  {
    newobj = ldblk->newobj;
    oldobj = ldblk->existing;

    if ( newobj->defined && oldobj->defined )
    {
      /* drop out and do the comparison */
      ldblk->merge = FALSE;
      ldblk->equal = FALSE;
    }
    else if ( externok )
    {
      ldblk->merge = (newobj->defined ? TRUE : FALSE);
      ldblk->equal = TRUE;
      return;
    }
    else 
      yseThrowObj(YR_EX_UNDEFINED, ldblk->newobj->repid);
  }
  else        /* there's only a new object */
  {
    ldblk->merge = TRUE;
    ldblk->equal = FALSE;
    return;
  }

  /*
   * If we get to here, there is both a new and existing object with
   * the same repid, and neither one of them is an external reference.
   * We must compare them for equivalence.
   */

  ysRecord( YR_MSG(423, YR_FAC), YSLSEV_DEBUG(5), (char*)0, 
            YSLPTR(newobj), YSLPTR(oldobj), YSLEND);
  if ( yrGetKind(newobj) == yrGetKind(oldobj) )
  {
    switch ( yrGetKind(newobj) )
    {
      case yrdkRepository:
	ldblk->equal = FALSE;
        break;

      case yrdkAttribute:
	ldblk->equal = ( yrObjCommonIsEq(newobj, oldobj) &&
		       (yrAttrData(newobj).mode == yrAttrData(oldobj).mode) &&
                       (yrAttrData(newobj).type ==  yrAttrData(oldobj).type) &&
		       (yrGetDefinedIn(newobj) == yrGetDefinedIn(oldobj)) );
        break;

      case yrdkConstant:
	ldblk->equal = 
             ( yrObjCommonIsEq(newobj, oldobj) &&
	      (yrConstData(newobj).type == yrConstData(oldobj).type) &&
	      yrAnyEq( &yrConstData(newobj).val, &yrConstData(oldobj).val) );
        break;

      case yrdkInterface:
        yrCmpIntfLdBlk( ldblk, externok);
        break;

      case yrdkModule:
        ldblk->equal = yrObjCommonIsEq( newobj, oldobj);
        ldblk->merge = TRUE;
        break;

      case yrdkOperation:
        yrCmpOpLdBlk( ldblk, externok);
        break;
   
      case yrdkException:
      case yrdkStruct:
      case yrdkUnion:
      {
	CONST yotk* tc1 = yrGetTypeCode(newobj);
	CONST yotk* tc2 = yrGetTypeCode(oldobj);
	ldblk->equal = yotkIsEq( tc1, tc2) && yrContentsEq( newobj, oldobj);
        break;
      }
      case yrdkAlias:
      case yrdkEnum:
      {
	CONST yotk* tc1 = yrGetTypeCode(newobj);
	CONST yotk* tc2 = yrGetTypeCode(oldobj);
	ldblk->equal = yotkIsEq( tc1, tc2);
        break;
      }
   
      case yrdkPrimitive:
	ldblk->equal = (yrPrimData(newobj).kind == yrPrimData(oldobj).kind);
        break;
   
      case yrdkString:
	ldblk->equal = (yrStringData(newobj).bound == 
                              yrStringData(oldobj).bound );
        break;
   
      case yrdkSequence:
	ldblk->equal = ((yrSeqData(newobj).bound == yrSeqData(oldobj).bound) &&
            (yrSeqData(newobj).elmtype == yrSeqData(oldobj).elmtype));
        break;
   
      case yrdkArray:
	ldblk->equal = 
               ((yrArrayData(newobj).length == yrArrayData(oldobj).length) &&
                (yrArrayData(newobj).elmtype == yrArrayData(oldobj).elmtype));
        break;
   
      default:
	ldblk->equal = FALSE;
        break;
    }
  }
  else
    ldblk->equal = FALSE;

  if ( !ldblk->equal )
  {
    yseThrowObj( YR_EX_REDEFINED, ldblk->newobj->repid);
  }
}


/* --------------------------------------------------------------------- */
/*
 * yrMergeObjs - Merge a new object into an existing one.
 *
 * Should not be called until you already know it is OK to do the merge.
 * For containers (modules and interfaces), we also handle the contents.
 * With interfaces, this means swapping in the contents completely (since
 * this can only be the case of completing a forward declaration). For
 * modules it means adding only those items that are not already there.
 */

STATICF void yrMergeObjs( yrobj* newobj, yrobj* oldobj)
{
  ysle* le;

    /*
     * Brand new object, just add it to enclosing container. No merge needed.
     * Can ignore things contained in interfaces and modules because
     * they'll get handled when their container is.
     */
  if ( !oldobj )
  {
    yrobj* container = yrGetDefinedIn(newobj);

    if ( yrGetKind( container) == yrdkRepository )
    {
      ysRecord( YR_MSG(422, YR_FAC), YSLSEV_DEBUG(3), (char*)0, 
                YSLPTR(newobj), YSLEND);
      switch ( yrGetKind(newobj) )
      {
        case yrdkSequence:
        case yrdkArray:
        case yrdkString:
          ysLstEnq( yrRepData(container)->anon, (dvoid*) newobj);
          break;
        default:
          yrContainerAdd( container, newobj);
      }
    }
    /* else assume it is taken care of by the cases below */
  }

    /*
     * Interfaces. Can only be the case where oldobj is a forward
     * declaration and newobj is a completion. Make oldobj the full decl.
     */
  else if ( yrGetKind(newobj) == yrdkInterface )
  {
    yrintf* data;

    ysRecord( YR_MSG(418, YR_FAC), YSLSEV_DEBUG(3), (char*)0, 
              YSLPTR(newobj), YSLPTR(oldobj), YSLEND);
    if ( oldobj->contents )          /* existing, but empty list */
      ysLstDestroy( oldobj->contents, (ysmff)0);
    oldobj->contents = newobj->contents;

    data = &(yrInterfaceData(oldobj));
    if ( data->bases )               /* existing, but empty list */
      ysLstDestroy( data->bases, (ysmff)0);
    if ( data->ops )               /* existing, but empty list */
      ysLstDestroy( data->ops, (ysmff)0);
    if ( data->attrs )               /* existing, but empty list */
      ysLstDestroy( data->attrs, (ysmff)0);
    DISCARD memcpy( data, &newobj->data.intfval, sizeof(yrintf));

        /* so we don't get into trouble when we free newobj later... */
    newobj->contents = (yslst*)0;
    CLRSTRUCT( newobj->data.intfval);
  }

    /*
     * Modules. Add only those items not already on the content list of
     * the exsiting module.
     */
  else if ( yrGetKind(newobj) ==  yrdkModule )
  {
    ysRecord( YR_MSG(419, YR_FAC), YSLSEV_DEBUG(3), (char*)0, 
              YSLPTR(newobj), YSLPTR(oldobj), YSLEND);
    for ( le = ysLstHead( yrGetContents(newobj)); le; le = ysLstNext(le))
    {
      yrobj* mem = (yrobj*) ysLstVal(le);
      yslst* matches;

      matches = yrLookupName( oldobj, yrGetName(mem), YR_SHALLOW_LOOKUP,
                              yrGetKind(mem), FALSE);

      if ( matches )
        ysLstDestroy( matches, (ysmff)0);   /* already on content list */
      else
        yrContainerAdd( oldobj, mem);
    }
  }
}


/* --------------------------------------------------------------------- */
/*
 * yrMergeFile - Merge result of an IFR data file read into the repository.
 *
 * The actual merge cannot take place until we first verify that the
 * repository contents will still be consistent after the merge. Means we
 * walk the object lists twice, but there isn't much you can do about it.
 */

void yrMergeFile( yrldblk* data, ub4 nobjs, boolean externok)
{
  volatile boolean ok;
  yslst* volatile undefined = (yslst*)0;
  yslst* volatile redefined = (yslst*)0;
  ub4 i;

  ok = TRUE;
  ysRecord( YR_MSG(420, YR_FAC), YSLSEV_DEBUG(1), (char*)0, YSLNONE);
  yseTry
  {
    for ( i = 1; ok && (i < nobjs); i++)
      yrCmpLdBlk( &data[i], externok);
  }
  yseCatchObj( YR_EX_UNDEFINED, char*, undef)
  {
    if ( !undefined )
      undefined = ysLstCreate();
    ysLstEnq( (yslst*) undefined, (dvoid*) undef);
    if ( ysLstCount( (yslst*)undefined) >= yr_mgr_err_max )
      ok = FALSE;
  }
  yseCatchObj( YR_EX_REDEFINED, char*, redef)
  {
    ok = FALSE;
    if ( !redefined )
      redefined = ysLstCreate();
    ysLstEnq( (yslst*) redefined, (dvoid*) redef);
    if ( ysLstCount( (yslst*)redefined) >= yr_mgr_err_max )
      ok = FALSE;
  }
  yseEnd

  if ( undefined || redefined )
  {
    
    yr_mgr_LoadConflict ex = {0, {0,0,0},{0,0,0}};
    yr_repid* p;
    yr_repid s;

    if ( undefined )
    {
      ex.undefined._length = ysLstCount(undefined);
      p = (yr_repid*) yoAlloc( sizeof(yr_repid) * ex.undefined._length);
      ex.undefined._buffer = p;
    
      while ( (s = ysLstDeq(undefined)) )
      {
        *p = (yr_repid) ysStrDupWaf((char*) s, yoAlloc);
        p++;
      }
      ysLstDestroy( undefined, (ysmff)0);
    }
    if ( redefined )
    {
      ex.filename = (char*)0;
      ex.redefined._length = ysLstCount(redefined);
      p = (yr_repid*) yoAlloc( sizeof(yr_repid) * ex.redefined._length);
      ex.redefined._buffer = p;
    
      while ( (s = ysLstDeq(redefined)) )
      {
        *p = (yr_repid) ysStrDupWaf((char*) s, yoAlloc);
        p++;
      }
      ysLstDestroy( redefined, (ysmff)0);
    }
    yseThrowObj( YR_MGR_EX_LOADCONFLICT, ex);
  }

  else    /* do the merges */
  {
    const char* dbg;

    ysRecord( YR_MSG(421, YR_FAC), YSLSEV_DEBUG(1), (char*)0, YSLNONE);
    if ( (nobjs > 1) && (dbg = ysResGetLast("mnirsrv.debug-trace")) &&
         (strcmp(dbg, "5") >= 0) )
    {                                   /* dump result of consistency check */
      ysRecord( YR_MSG(424, YR_FAC), YSLSEV_DEBUG(5), (char*)0, YSLNONE);
      for ( i = 1; i < nobjs; i++)
      {
        ysRecord( YR_MSG(425, YR_FAC), YSLSEV_DEBUG(5), (char*)0, 
                  YSLSB4(i), YSLSB4(data[i].merge), YSLSB4(data[i].visited),
                  YSLSB4(data[i].equal), YSLPTR(data[i].newobj),
                  YSLPTR(data[i].existing), YSLEND);
      }
      ysRecord( YR_MSG(426, YR_FAC), YSLSEV_DEBUG(5), (char*)0, YSLNONE);
    }

    for ( i = 1; i < nobjs; i++)
    {
      if ( data[i].merge && !data[i].visited )
      {
        data[i].visited = TRUE;
        yrMergeObjs( data[i].newobj, data[i].existing);
      }
    }
  }
}


/* --------------------------------------------------------------------- */
/*
 * yrFreeMergeData - discard unused objects read in from disk.
 *
 * The which were not merged into the new repository or which were
 * merged into existing objects (as opposed to being totally new
 * objects) are garbage collected.
 *
 * Since we'll visit all the objects, each one is shallowly collected.
 * That is, we don't go through and delete the contained sub-objects
 * when we delete the container.
 */
void yrFreeMergeData( yrldblk* data, ub4 nobjs)
{
  ub4 i;

  for ( i = 0; i < nobjs; i++ )
  {
    if ( !data[i].merge || data[i].existing )      
      yrDestroyObj( data[i].newobj, (yslst*)0, (ysmff)0, (ysmff)0);
  }
}
