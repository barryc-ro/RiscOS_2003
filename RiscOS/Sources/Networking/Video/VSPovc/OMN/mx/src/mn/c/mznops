/* Copyright (c) 1994 by Oracle Corporation.  All Rights Reserved.
 *
 * mznops.c - OMN Name Server Operations
 *
 * REVISIONS
 * jolkin    07/30/94  Substantial revision to support better marshalling
 * jolkin    05/25/94  Creation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MZN_ORACLE
#include <mzn.h>
#endif
#ifndef MZNI_ORACLE
#include <mzni.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef MTL_ORACLE
#include <mtl.h>
#endif

/*
 * mznsInsert - insert an entry
 *   An entry is hashed by its name to a row of buckets.  Within the
 *   row, the buckets are kept sorted by name.  For each name, if there
 *   is an associated program ID, we keep a list of program IDs in sorted
 *   order hanging off of the name bucket.
 */
sb4 mznsInsert(mznctx *nsctx, mznent *entry)
{
  mznbkt *nmbkt, *pb, *bkt, *idpb, *idbkt;
  ub4     key;
  sb4     sts;

  /* initialize new bucket */
  if (!(nmbkt = (mznbkt *) ysmGlbAlloc(sizeof(mznbkt),"mznbkt")))
    return MNERR_OUTMEM;
 
  nmbkt->older = (mznbkt *) 0;
  nmbkt->entry = entry;
  nmbkt->alias = (char *) 0;
  nmbkt->nsctx = nsctx;

 retry:                    /* retry entrypoint in case we remove a duplicate */

  /* locate place in name hash table */
  key = mznsKey((ub1 *) entry->name, strlen(entry->name) + 1);

  for (pb = (mznbkt *) 0, bkt = nsctx->names[key];
       bkt && mznsStrcmp(entry->name, bkt->entry->name) > 0;
       pb = bkt, bkt = bkt->next) ;

  if (bkt && !mznsStrcmp(entry->name, bkt->entry->name))
    {
      /* if we have a match, it is only acceptable if the name identifies
       * a program and the program ID (sans version number) matches.
       */
      if (bkt->alias)
	{
	  ysmGlbFree(nmbkt);
	  return MNERR_DUPLICATE;
	}
      else if (!entry->id || !bkt->entry->id)
	goto dup_error;

      if (memcmp(bkt->entry->id->id, entry->id->id, sizeof(entry->id->id)))
	goto dup_error;

      /* now attempt to insert into program list sorted in descending
       * order of version number
       */
      for (idpb = (mznbkt *) 0, idbkt = bkt;
	   idbkt && mnrIdCmp(idbkt->entry->id, entry->id, TRUE) > 0;
	   idpb = idbkt, idbkt = idbkt->older) ;

      /* make sure we don't have a duplicate */
      if (idbkt && !mnrIdCmp(idbkt->entry->id, entry->id, TRUE))
	{
	  bkt = idbkt;
	  goto dup_error;
	}

      if (idpb)
	{
	  /* older version; insert into list */
	  idpb->older = nmbkt;
	  nmbkt->older = idbkt;
	}
      else
	{
	  /* newest version; insert at head of list */
	  nmbkt->older = bkt;

	  nmbkt->next = bkt->next;
	  if (pb)
	    pb->next = nmbkt;
	  else
	    nsctx->names[key] = nmbkt;
	}
    }
  else
    {
      /* if we don't have a match, go ahead and insert the entry */
      nmbkt->next = bkt;

      if (pb)
	pb->next = nmbkt;
      else
	nsctx->names[key] = nmbkt;
    }

  mnDeathWatch(&nmbkt->entry->addr,mznDeathHandler,(dvoid *) nmbkt);
  return 0;

 dup_error:
  /* we have a duplicate; check to see if the original entry is still
   * alive; if not, then we can replace it
   */
  sts = mnEcho(&bkt->entry->addr, (ub4) 2000, (mnHandler) 0, (dvoid *) 0);
  if (sts >= 0)
    {
      ysmGlbFree(nmbkt);
      return MNERR_DUPLICATE;
    }
  else
    {
      mznsDelete(nsctx, bkt->entry->name, bkt->entry->id);
      mtlLog("WARNING: old entry for %s is being replaced", entry->name);
      goto retry;
    }
}

/*
 * mznsFind - find an entry
 *   An entry is always first located by name.  Then, if the name is
 *   for a program, we return the most recent program version unless
 *   there is a program ID given, in which case we will attempt to
 *   find an acceptable program version.
 */
mznent *mznsFind(mznctx *nsctx, const char *name, const mnrid *id)
{
  mznbkt *bkt;
  ub4     key;

  if (!name)
    return (mznent *) 0;

  key = mznsKey((ub1 *) name, strlen(name) + 1);

  for (bkt = nsctx->names[key];
       bkt && mznsStrcmp(name, bkt->entry->name) > 0;
       bkt = bkt->next) ;

  if (bkt && !mznsStrcmp(name, bkt->entry->name))
    {
      if (id)
	while (bkt && mnrIdCmp(bkt->entry->id, id, FALSE) != 0)
	  bkt = bkt->older;
    }
  else
    bkt = (mznbkt *) 0;

  if (bkt)
    {
      if (bkt->alias)
	return mznsFind(nsctx, bkt->alias, (const mnrid *) 0);
      else
	return bkt->entry;
    }
  else
    return (mznent *) 0;
}

/*
 * mznsDelete - delete an entry
 *   An entry is first located by name.  Then, if the name is for a program,
 *   a program ID must be provided that matches exactly.
 */
sb4 mznsDelete(mznctx *nsctx, const char *name, const mnrid *id)
{
  mznbkt *pb, *bkt, *idpb, *idbkt;
  ub4     key;

  if (!name)
    return MNERR_NOTFOUND;

  /* locate bucket */
  key = mznsKey((ub1 *) name, strlen(name) + 1);

  for (pb = (mznbkt *) 0, bkt = nsctx->names[key];
       bkt && mznsStrcmp(name, bkt->entry->name) > 0;
       pb = bkt, bkt = bkt->next) ;

  if (!bkt || mznsStrcmp(name, bkt->entry->name))
    return MNERR_NOTFOUND;

  if (bkt->entry->id)
    {
      /* if this is program, delete the one that matches exactly */
      if (!id || memcmp(bkt->entry->id->id, id->id, sizeof(id->id)))
	return MNERR_NOTFOUND;

      /* now attempt to locate the specific version */
      for (idpb = (mznbkt *) 0, idbkt = bkt;
	   idbkt && mnrIdCmp(idbkt->entry->id, id, TRUE) > 0;
	   idpb = idbkt, idbkt = idbkt->older) ;

      if (!idbkt || mnrIdCmp(idbkt->entry->id, id, TRUE))
	return MNERR_NOTFOUND;

      if (idpb)
	{
	  /* older version; delete from program list */
	  idpb->older = idbkt->older;
	}
      else
	{
	  /* newest version; delete from head of list */
	  if (idbkt->older)
	    {
	      idbkt->older->next = bkt->next;

	      if (pb)
		pb->next = idbkt->older;
	      else
		nsctx->names[key] = idbkt->older;
	    }
	  else
	    {
	      /* no other versions; so just delete the whole bucket */
	      if (pb)
		pb->next = bkt->next;
	      else
		nsctx->names[key] = bkt->next;
	    }
	}

      bkt = idbkt;
    }
  else
    {
      /* if this is not a program, go ahead and delete the entry */
      if (pb)
	pb->next = bkt->next;
      else
	nsctx->names[key] = bkt->next;
    }

  /* delete the object */
  if (bkt->alias)
    ysmGlbFree(bkt->alias);
  else
    DISCARD mnDeathIgnore(&bkt->entry->addr,bkt);

  mnxFree(mznxEntry, (dvoid *) bkt->entry);
  ysmGlbFree(bkt->entry);
  ysmGlbFree(bkt);

  return 0;
}

/*
 * mznsQuery - query the name server
 *   Only one basic query is supported:  all entries whose name matches
 *   the regular expression can be found.  If the regular expression is
 *   omitted, then all names match.  The entries returned can be pruned
 *   by the mznQueryType.
 */
sb4 mznsQuery(mznctx *nsctx, const char *name, ub4 qt, mnxStream *stream)
{
  mznbkt *bkt, *prog;
  ub4     cnt, i;
  sb4     sts;
  char   *tmpnm;

  cnt = 0;

  /* scan entire hash table */
  for (i = 0; i < MZNROWS; i++)
    for (bkt = nsctx->names[i], sts = 0; bkt && !sts; bkt = bkt->next)
      {
	/* check our criteria */
	if (name && !mznsNameEq(bkt->entry->name, name))
	  continue;

	if (!bkt->entry->id && !(qt & MZN_PORTS))
	  continue;

	if (bkt->entry->id && !(qt & MZN_PROGRAMS))
	  continue;

	/* if this is an alias, temporarily modify the entry */
	if (bkt->alias)
	  {
	    tmpnm = (char *)bkt->entry->name;
	    bkt->entry->name = (char *)
	      ysmGlbAlloc(strlen(tmpnm) + strlen(bkt->alias) + 2,
			  "entry->name");
	    sprintf( (char *)bkt->entry->name, "%s:%s", tmpnm, bkt->alias);
	  }
	else
	  tmpnm = (char *) 0;

	/* now push the entry back */
	if (!(qt & MZN_ALL_PROGRAMS))
	  {
	    sts = (*stream->push)(stream, (dvoid *) bkt->entry);
	    cnt++;
	  }
	else
	  for (prog = bkt; prog && !sts; prog = prog->older)
	    {
	      sts = (*stream->push)(stream, (dvoid *) prog->entry);
	      cnt++;
	    }

	/* release temporary name and restore entry */
	if (tmpnm)
	  {
	    ysmGlbFree( (dvoid *)bkt->entry->name);
	    bkt->entry->name = tmpnm;
	  }
      }

  /* close the stream */
  (*stream->close)(stream, (sb4) 0);
  return (sb4) cnt;
}

/*
 * mznsMakeAlias - create an alias
 */
sb4 mznsMakeAlias(mznctx *nsctx, const char *name, const char *alias)
{
  mznbkt *nmbkt, *pb, *bkt;
  ub4 key;

  /* locate place in name hash table */
  key = mznsKey((ub1 *) name, strlen(name) + 1);

  for (pb = (mznbkt *) 0, bkt = nsctx->names[key];
       bkt && mznsStrcmp(name, bkt->entry->name) > 0;
       pb = bkt, bkt = bkt->next) ;

  if (bkt && !mznsStrcmp(name, bkt->entry->name))
    {
      /* if we have a match, it is only acceptable if the name identifies
       * another alias.
       */
      if (!bkt->alias)
	goto dup_error;
      else
	{
	  ysmGlbFree((dvoid*)name);
	  ysmGlbFree(bkt->alias);
	  bkt->alias = (char *)alias;
	}
    }
  else
    {
      /* if we don't have a match, go ahead and insert the entry */
      if (!(nmbkt = (mznbkt *) ysmGlbAlloc(sizeof(mznbkt), "mznbkt")))
	return MNERR_OUTMEM;

      nmbkt->older= (mznbkt *) 0;
      nmbkt->entry = (mznent *) ysmGlbAlloc(sizeof(mznent), "mznent");
      nmbkt->entry->name = name;
      nmbkt->entry->id = (mnrid *) 0;
      nmbkt->alias = (char *)alias;
      nmbkt->nsctx = nsctx;

      nmbkt->next = bkt;

      if (pb)
	pb->next = nmbkt;
      else
	nsctx->names[key] = nmbkt;
    }

  return 0;

 dup_error:
  /* we have a duplicate */
  ysmGlbFree((dvoid *)name);
  ysmGlbFree((dvoid *)alias);
  return MNERR_DUPLICATE;
}

/*
 * mznsKey - compute a hash key
 */
ub4 mznsKey(ub1 *buf, size_t sz)
{
  ub4 key;

  for (key = 0; sz; sz--, buf++)
    key += *buf;

  return key % MZNROWS;
}

/*
 * mznsStrcmp - case-insensitive string compare
 */
sb4 mznsStrcmp(const char *s1, const char *s2)
{
  for (; *s1 && tolower(*s1) == tolower(*s2); s1++, s2++) ;
  return *s1 - *s2;
}

/*
 * mznsNameEq - regular expression compare
 */
boolean mznsNameEq(const char *str, const char *regexp)
{
  return !mznsStrcmp(str, regexp);
}
