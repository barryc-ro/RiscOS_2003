/* copyright (c) Oracle Corporation 1995.  All Rights Reserved. */

/*
  NAME
    yot.h
  DESCRIPTION
    temporary yot emulation header.
  PUBLIC FUNCTIONS
    <x>
  NOTES
    <x>
  MODIFIED   (MM/DD/YY)
    dbrower   07/24/95 -  created.
*/

#ifndef YOT_ORACLE
#define YOT_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

EXTC_START

#ifndef YS_ORACLE
#include <ys.h>
#endif

#ifndef YOSX_ORACLE
#include <yosx.h>
#endif

#ifndef MN_ORACLE
#include <mn.h>
#endif

#ifndef MNT_ORACLE
#include <mnt.h>
#endif

#ifndef YTEX_ORACLE
#include <ytex.h>
#endif

/* PUBLIC TYPES AND CONSTANTS */

typedef struct mnp yotp;
typedef struct mna yota;

/*
 * yotInit - init YOT layer
 *
 * DESCRIPTION
 *
 */
void yotInit(void);

/*
 * yotTerm - terminate YOT layer
 *
 * DESCRIPTION
 *
 */
void yotTerm(void);

/*
 * yotOpen - open a port
 *
 * DESCRIPTION
 * yotOpen() creates a port using the specified transport protocol.  A port
 * is an endpoint used for communication.  A port may be used to both send
 * and receive data.  A stream port is opened in an active, unconnected
 * mode, meaning that it either needs to be connected using yotConnect() or
 * converted to a passive port ysing yotListen().
 */
#define YOTPROTO_MESSAGE	    MNPROTO_MESSAGE
#define YOTPROTO_STREAM	    MNPROTO_STREAM
#define YOTPROTO_DGRAM	    MNPROTO_MESSAGE

yotp *yotOpen(sword protocol);

/*
 * yotClose - close a port
 *
 * DESCRIPTION
 * yotClose() closes a port.  yotClose() will block until all outgoing data
 * has been flushed.  To avoid blocking unexpectedly, use yotFlush() prior
 * to closing the port.  Any unread data or inbound connection requests
 * on passive streams are discarded.  For a connected port, the connection
 * is dissolved.
 */
void yotClose(yotp *port);

/*
 * yotFlush - flush a port
 *
 * DESCRIPTION
 * yotFlush() flushes outgoing data from a port.  Data sent by a reliable
 * protocol is not flushed until receipt by the destination has been
 * confirmed.  A connection attempt is not flushed until the connection
 * completes.  The given event will be triggered when the data pending
 * at the time this routine is invoked has been flushed.  Subsequent
 * data sent may or not have been flushed.  If no event is given, yotFlush()
 * blocks unless the port is non-blocking.
 */
void yotFlush(yotp *port, ysevt *evt);

/*
 * yotSetOptions, yotGetOptions - get & set options
 *
 * DESCRIPTION
 * yotSetOptions() is used to modify the characteristics of the port.
 * yotGetOptions() returns the options that are currently set on the
 * port.
 *
 * The following options are defined:
 *   YOTFLG_NONBLOCK - If set, the port is non-blocking.  Any operation
 *      initiated on such a port that would otherwise block will cause
 *      the YOT_EX_WOULDBLOCK to be raised.
 *   YOTFLG_MANFLUSH - If set, the port will not flush outbound data
 *      automatically.  A yotFlush() must always be executed in order
 *      to flush outbound data.
 */
#define YOTFLG_NONBLOCK	MNOPT_NONBLOCK	    
#define YOTFLG_MANFLUSH	((ub4)0)	    /* no-op for now */

void yotSetOptions(yotp *port, ub4 options);
ub4  yotGetOptions(yotp *port);

/*
 * yotBind - bind a name to a port
 *
 * DESCRIPTION
 * yotBind() binds a name to a port.  When the port is created, it is
 * assigned a name dynamically.  yotBind() allows the port to be rebound
 * to a well-known port number.  Dynamic port numbers are assigned starting
 * at 1024, and port numbers below 128 are reserved.  Therefore, well-known
 * port numbers should be between these two values.
 */
void yotBind(yotp *port, ub2 name);

/*
 * yotGetAddr, yotGetPeer - get the address of the port or the peer
 *
 * DESCRIPTION
 * yotGetAddr() returns an address descriptor denoting the full address
 * of the given port.  yotGetPeer() returns an address descriptor denoting
 * the the address of the port to which this port is connected.  Thus,
 * yotGetPeer() is only valid on connected, stream-based ports.  The
 * address descriptor must be freed by the caller.
 */
yota *yotGetAddr(yotp *port);
yota *yotGetPeer(yotp *port);

/*
 * yotListen - listen for connections
 *
 * DESCRIPTION
 * yotListen() converts a stream port from active to passive mode.
 * Once in a passive mode, connections may be accepted from this
 * port.
 */
void yotListen(yotp *port);

/*
 * yotAccept - accept a connection
 *
 * DESCRIPTION
 * yotAccept() accepts a connection from a passive stream port.  A
 * new port is created and returned.  The new port is used to read
 * and write data from and to the port which initiated the connection,
 * but cannot be used to accept further connections.  The original
 * port remains open and available to accept further connections.
 * If no connection requests are pending, yotAccept() will normally
 * block until the port is in a non-blocking mode.  yotTest() may be
 * used to test for inbound connnections.
 */
yotp *yotAccept(yotp *port);

/*
 * yotConnect - initiate a connection
 *
 * DESCRIPTION
 * yotConnect() initiates a connection from an active stream port
 * to a passive stream port.  A port may only be connected once.
 * This routine will not cause any network traffic by itself.  The
 * destination port will not receive the connection attempt until
 * data is written to the port or the port is flushed.  A connection
 * may fail due to an inability to reach the destination or a bad
 * address.  Either YOT_EX_FAILCONN or YOT_EX_BADADDR may be raised
 * during any subsequent yotRead(), yotWrite(), or yotFlush() operation.
 */
void yotConnect(yotp *port, yota *addr);

/*
 * yotRead, yotReadV - read from a stream
 *
 * DESCRIPTION
 * yotRead() reads up to max bytes of data into the buffer pointed to
 * by buf.  yotReadV() similarly reads data from a stream and scatters
 * it to the supplied buffer vector.  The buffer or buffer vector
 * passed in must remain valid until the operation completes.  The
 * read operation completes as soon as some amount of data is read,
 * unless the port is in a non-blocking mode or fill is TRUE.
 *
 * If fill is TRUE, the operation will not complete until the buffer
 * is filled or the end of the stream is reached.  If fill is TRUE,
 * and the port is non-blocking, and the full amount of data required
 * to fill the buffer is not available, and the call is synchronous
 * (i.e. no event descriptor is supplied), no data will be read and
 * the YOT_EX_WOULDBLOCK exception is raised.
 *
 * The result of the operation is the number of bytes read and
 * transferred.  The operation may raise the exceptions:
 *   YOT_EX_NOTCONN if the stream port is not connected;
 *   YOT_EX_BROKEN if the communication with the peer is lost;
 *   YOT_EX_DISCONN if the stream port was disconnected.
 */
sb4 yotRead(yotp *port, ub1 *buf, size_t max, boolean fill, ysevt *evt);
sb4 yotReadV(yotp *port, ysbv *bv, sword nbv, boolean fill, ysevt *evt);

/*
 * yotWrite, yotWriteV - write to a stream
 *
 * DESCRIPTION
 * yotWrite() writes len bytes of data pointed to by buf through the
 * connected port.  If insufficient buffer space is available to queue
 * the write, the routine will normally block until space becomes
 * available, unless the port has been placed into a non-blocking mode,
 * in which case some amount of data less than the total will be written.
 * yotWrite() returns as soon as the data is buffered.  yotFlush() may be
 * used to synchronize with the receiver on certain data.  yotWrite()
 * returns the number of bytes buffered.  Any of the exceptions raised
 * by yotRead() may be raised by yotWrite().
 */
sb4 yotWrite(yotp *port, ub1 *buf, size_t len);
sb4 yotWriteV(yotp *port, ysbv *bv, sword nbv);

/*
 * yotSend, yotSendV - send a message or datagram
 *
 * DESCRIPTION
 * yotSend() sends a message or datagram to the destination specified by
 * to.  If no buffer space is available to queue the send, these routines
 * normally block until space becomes available, unless the port has been
 * placed in a non-blocking mode.  If the protocol is reliable, the
 * operation completes when the other side confirms receipt of the data.
 * If the protocol is unreliable, the operation completes as soon as the
 * data is buffered.  The number of bytes in the message is returned.
 * The send operation may complete with one of the following exceptions:
 * YOT_EX_BROKEN or YOT_EX_BADADDR.  Messages sent from the same port to the
 * same destination are guaranteed to be received in the order they were
 * sent when using a reliable protocol.
 */
sb4 yotSend(yotp *port, yota *to, ub1 *buf, size_t len, ysevt *evt);
sb4 yotSendV(yotp *port, yota *to, ysbv *bv, sword nbv, ysevt *evt);

/*
 * yotRecv, yotRecvV - receive a message or datagram
 *
 * DESCRIPTION
 * yotRecv() receives a message.  The contents of the message are
 * transferred up to the limits of the given buffer.  The remainder
 * of the message is discarded.  yotRecvV() does the same thing but
 * scatters the contents of the message to the buffer vector.
 *
 * The receive operation completes when the entire message is received.
 * If the operation is synchronous, and the entire message has not yet
 * been received, and the port is non-blocking, yotRecv() will raise
 * the YOT_EX_WOULDBLOCK exception.
 */
sb4 yotRecv(yotp *port, yota **from, ub1 *buf, size_t max, ysevt *evt);
sb4 yotRecvV(yotp *port, yota **from, ysbv *bv, sword nbv, ysevt *evt);

/*
 * yotTest - test the port for inbound data
 *
 * yotTest() tests the given port for inbound data.  If the port
 * is a passive, stream port, yotTest() returns the number of
 * pending connection requests.  If the port is a connected stream
 * port, it returns the number of bytes available to read.  If the
 * port is a message or datagram port, it returns the number of bytes
 * contained in the next message or datagram.  It will continue to
 * return this value until reading of the message is begun.  Once it
 * is begun, yotTest() will return the amount of data remaining in the
 * current message.
 *
 * If there is no data pending, and the operation is synchronous,
 * then yotTest() will block until data arrives or the timeout expires,
 * unless the port is in a non-blocking mode.  If timeout is non-null,
 * then yotTest() will only block for the number of milliseconds
 * pointed to by the timeout value.  (Thus, if it is zero, yotTest()
 * will poll.)  If evt is provided with a timeout, the evt will be
 * triggered with a TIMEOUT exception if the time expires before the
 * event completes.
 */
sb4 yotTest(yotp *port, sysb8 *timeout, ysevt *evt);

/*
 * yotAddrEq -
 *
 * DESCRIPTION
 *
 */
sword yotAddrEq(yota *a1, yota *a2);

/*
 * yotGetAddrPort - return the port portion of the address
 *
 * DESCRIPTION
 *
 */
ub2 yotGetAddrPort(yota *addr);

/*
 * yotSetAddrPort - set the port portion of the address
 *
 * DESCRIPTION
 *
 */
void yotSetAddrPort(yota *addr, ub2 port);

/*
 * yotAddrToStr -
 *
 * DESCRIPTION
 *
 */
#define YOTAMAXLEN       MNAMAXLEN
char *yotAddrToStr(yota *addr, char *str, size_t max);

/*
 * yotAddrToStr -
 *
 * DESCRIPTION
 *
 */
yota *yotStrToAddr(CONST char *str);

/*
 * yotAddrDup - duplicates a yota
 *
 * DESCRIPTION
 *
 */
yota *yotAddrDup(yota *addr);

/*
 * yotAddrFree - frees a yota
 *
 * DESCRIPTION
 *
 */
void yotAddrFree(yota *addr);

/*
 * yotHashAddr - hash a yota to a ub4
 *
 * DESCRIPTION
 *
 */
ub4 yotHashAddr(yota *addr);

/*
 * yotMnStsToExid - convert a MN status return to exid
 *
 * DESCRIPTION
 *
 */
ysid *yotMnStsToExid(sb4 val);

/*
 * yotxPutAddr - put a yota into the marshalling stream
 *
 * DESCRIPTION
 *
 */
void yotxPutAddr(yosx *x, yota *addr);

/*
 * yotxGetAddr - get a yota from the marshalling stream
 *
 * DESCRIPTION
 *
 */
yota *yotxGetAddr(yosx *x);

/*
 * Marshalling Macros
 */
struct yotx
{
  ub1   *ptr;
  size_t cnt;
  ysbv  *bv;
  sword  nbv;
};

EXTC_END
#endif

