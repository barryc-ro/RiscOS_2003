/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ycppget.c - get a pre-processing token
 *
 * DESCRIPTION
 * ycppGetToken() gets a pre-processing token from ln starting at *posp.
 * Upon return, *posp is advanced past the end of the token, and *valp
 * and *repp are set as appropriate for the token class.  The class of
 * token is returned as the result.  If rep or val is null, then the
 * *posp is advanced past the next token, and the class of token is
 * returned, but the value and representation of the token are not
 * recorded.  Leading whitespace is automatically skipped.  end-of-line
 * is indicated by a separate token class; this routine will never move
 * past the end of the line by itself.
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCPP_ORACLE
#include <ycpp.h>
#endif
#ifndef YCOTOK_ORACLE
#include <ycotok.h>
#endif

sword ycppGetToken(ycln *ln, sword *posp, sword *valp, ysstr **repp)
{
  char  *buf, quote;
  size_t len;
  sword  pos, sp, val, cls;
  ysstr *rep;

  buf = ysStrToText(ln->text);
  len = ysStrLen(ln->text);
  pos = *posp;
  rep = (ysstr *) 0;
  val = 0;
  sp = 0;

  /* skip white space */
  while (pos < (sword)len && isspace(buf[pos]))
    pos++;

  /* detect end-of-line */
  if (pos >= (sword)len)
    {
      *posp = pos;
      if (repp)
	*repp = (ysstr *) 0;
      return YCPP_EOL;
    }

  if ((buf[pos] == 'L' && (buf[pos + 1] == '\'' || buf[pos + 1] == '"')) ||
      (buf[pos] == '\'' || buf[pos] == '"'))
    {
      /* character constant & string literal */
      sp = pos;
      if (buf[pos] == 'L')
	pos++;

      quote = buf[pos++];
      cls = (quote == '"' ? YCPP_STRING : YCPP_CHAR);

      while (pos < (sword)len && (buf[pos-1] == '\\' || buf[pos] != quote))
	pos++;

      if (pos < (sword)len)
	pos++;
    }
  else if (isdigit(buf[pos]) || (buf[pos] == '.' && isdigit(buf[pos + 1])))
    {
      /* number */
      cls = YCPP_NUM;

      sp = pos;
      while (pos < (sword)len &&
	     (isalnum(buf[pos]) || buf[pos] == '_' || buf[pos] == '.' ||
	      ((buf[pos - 1] == 'e' || buf[pos - 1] == 'E') &&
	       (buf[pos] == '+' || buf[pos] == '-'))))
	pos++;
    }
  else if (isalpha(buf[pos]) || buf[pos] == '_')
    {
      /* identifier */
      cls = YCPP_IDENT;

      sp = pos;
      while (pos < (sword)len && (isalnum(buf[pos]) || buf[pos] == '_'))
	pos++;
    }
  else
    {
      /* punctuation */
      cls = YCPP_PUNC;

      switch (buf[pos])
	{
	case '[': case ']': case '(': case ')': case '{': case '}':
	case ',': case ';': case '?': case '~':
	  val = buf[pos++];
	  break;
	case ':':
	  if (buf[pos+1] == ':')
	    val = YCTDCOLON, rep = ysStrCreate("::"), pos += 2;
	  else
	    val = ':', pos++;
	  break;
	case '=': case '*': case '/': case '%': case '^': case '!':
	  if (buf[pos+1] == '=')
	    {
	      switch (buf[pos])
		{
		case '=': val = EQ; rep = ysStrCreate("=="); break;
		case '*': val = MULTEQ; rep = ysStrCreate("*="); break;
		case '/': val = DIVEQ; rep = ysStrCreate("/="); break;
		case '%': val = MODEQ; rep = ysStrCreate("%="); break;
		case '^': val = XOREQ; rep = ysStrCreate("^="); break;
		case '!': val = NE; rep = ysStrCreate("!="); break;
		}
	      pos += 2;
	    }
	  else
	    val = buf[pos++];
	  break;
	case '.':
	  if (buf[pos+1] == '.' && buf[pos+2] == '.')
	    val = ELLIPSIS, rep = ysStrCreate("..."), pos += 3;
	  else
	    val = '.', pos++;
	  break;
	case '-':
	  switch (buf[pos+1])
	    {
	    case '=': val = MINEQ; rep = ysStrCreate("-="); pos += 2; break;
	    case '-': val = DECR; rep = ysStrCreate("--"); pos += 2; break;
	    case '>': val = ARROW; rep = ysStrCreate("->"); pos += 2; break;
	    default: val = '-'; pos++; break;
	    }
	  break;
	case '+':
	  switch (buf[pos+1])
	    {
	    case '=': val = PLUSEQ; rep = ysStrCreate("+="); pos += 2; break;
	    case '+': val = INCR; rep = ysStrCreate("++"); pos += 2; break;
	    default: val = '+'; pos++; break;
	    }
	  break;
	case '<':
	  if (buf[pos+1] == '=')
	    val = LE, rep = ysStrCreate("<="), pos += 2;
	  else if (buf[pos+1] == '<')
	    {
	      if (buf[pos+2] == '=')
		val = LSEQ, rep = ysStrCreate("<<="), pos += 3;
	      else
		val = YCTLS, rep = ysStrCreate("<<"), pos += 2;
	    }
	  else
	    val = '<', pos++;
	  break;
	case '>':
	  if (buf[pos+1] == '=')
	    val = GE, rep = ysStrCreate(">="), pos += 2;
	  else if (buf[pos+1] == '>')
	    {
	      if (buf[pos+2] == '=')
		val = RSEQ, rep = ysStrCreate(">>="), pos += 3;
	      else
		val = YCTRS, rep = ysStrCreate(">>"), pos += 2;
	    }
	  else
	    val = '>', pos++;
	  break;
	case '&':
	  if (buf[pos+1] == '=')
	    val = ANDEQ, rep = ysStrCreate("&="), pos += 2;
	  else if (buf[pos+1] == '&')
	    val = LAND, rep = ysStrCreate("&&"), pos += 2;
	  else
	    val = '&', pos++;
	  break;
	case '|':
	  if (buf[pos+1] == '=')
	    val = OREQ, rep = ysStrCreate("|="), pos += 2;
	  else if (buf[pos+1] == '|')
	    val = LOR, rep = ysStrCreate("||"), pos += 2;
	  else
	    val = '|', pos++;
	  break;
	case '#':
	  if (buf[pos+1] == '#')
	    cls = YCPP_PPPASTE, val = '#', pos += 2;
	  else
	    cls = YCPP_PPPOUND, val = '#', pos++;
	  break;
	default:
	  cls = YCPP_OTHER;
	  val = buf[pos++];
	  break;
	}
    }

  /* set up return values */
  if (repp)
    {
      if (cls == YCPP_IDENT || cls == YCPP_NUM || cls == YCPP_CHAR ||
	  cls == YCPP_STRING)
	{
	  rep = ysStrCreate(buf + sp);
	  rep = ysStrDel(rep, pos - sp, (sword) ysStrLen(rep));
	}

      *repp = rep;
    }
  else if (rep)
    ysStrDestroy(rep);

  if (valp)
    *valp = val;

  *posp = pos;

  return cls;
}
