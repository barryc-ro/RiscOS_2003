/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ysl.c - Oracle MOOSE Console Manager
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSI_ORACLE
#include <ysi.h>
#endif

/*
 * Declarations
 */
externdef ysidDecl(YSL_EX_DETACHED) = "ys::detached";

typedef struct yslGetDesc yslGetDesc;

struct yslGetDesc
{
  ysevt  *sem;                                       /* completion semaphore */
  char   *buf;                                         /* buffer to write to */
  size_t  max;                                     /* maximum size of buffer */
  size_t  cur;                                 /* current position in buffer */
  boolean eofseen;                                       /* TRUE if eof seen */
  dvoid  *osdp;                                        /* cached OSD pointer */
};

STATICF void yslGetsWaiter(dvoid *usrp, ub4 delay);

/*
 * yslPrint - print to standard output
 */
void yslPrint(CONST char *fmt, ...)
{
  ysctx  *ctx;
  va_list ap;

  ctx = (ysctx *) yscGet(YSC_YSCTX);

  if (ctx->detach)
    yseThrow(YSL_EX_DETACHED);
  else
    {
      va_start(ap, fmt);
      syslPrint(fmt, ap);
      va_end(ap);
    }
}

/*
 * yslError - print to the standard error
 */
void yslError(CONST char *fmt, ...)
{
  ysctx  *ctx;
  dvoid  *osdp;
  boolean detach;
  va_list ap;

  /* don't panic if we aren't initialized; that may be what we are trying
   * to print
   */
  if (syscGetPG())
    {
      ctx = (ysctx *) yscGet(YSC_YSCTX);
      detach = ctx->detach;
    }
  else
    detach = FALSE;

  if (detach)
    {
      va_start(ap, fmt);
      syslConsole(YSLSEV_INFO, fmt, ap);
      va_end(ap);
    }
  else
    {
      va_start(ap, fmt);
      syslError(fmt, ap);
      va_end(ap);

      if (fmt[strlen(fmt) - 1] != '\n')
	syslError("\n", ap);
    }
}

/*
 * yslGets - get from the standard input
 */
boolean yslGets(char *buf, size_t maximum)
{
  ysctx     *ctx;
  yslGetDesc desc;
  ysWaiterCB oldwtr;
  dvoid     *oldusrp;

  /* do not allow this operation if we are detached */
  ctx = (ysctx *) yscGet(YSC_YSCTX);
  if (ctx->detach)
    yseThrow(YSL_EX_DETACHED);

  /* don't deal with bogus requests */
  if (maximum < 2)
    yseThrow(YS_EX_BADPARAM);

  /* In order to ensure that do not interfere with other behavior of the
   * process, we must go through the normal event system.  To do this,
   * we create a semaphore that gets set when the operation is complete.
   * We then install a waiter that waits by invoking syslGetc() rather
   * than sysiPause().  As long as syslGetc() is properly implemented,
   * this will work perfectly.  The downside is that we have to get the
   * data a character at a time.
   */
  desc.sem = ysSemCreate((dvoid *) 0);
  desc.buf = buf;
  desc.max = maximum;
  desc.cur = 0;
  desc.eofseen = FALSE;
  desc.osdp = ctx->osdp;

  ysSetWaiter(yslGetsWaiter, &desc, &oldwtr, &oldusrp);

  /* Now block on the semaphore.  We do this inside a protected region
   * to ensure that the state of the process is reset even if we are
   * thrown out of here by a user interrupt.
   */
  yseTry
    ysSemWait(desc.sem);
    desc.buf[desc.cur] = '\0';
  yseFinally
    ysSemDestroy(desc.sem);
    ysSetWaiter(oldwtr, oldusrp, (ysWaiterCB *) 0, (dvoid **) 0);
  yseEnd

  return !desc.eofseen;
}

/*
 * yslGetsWaiter - wait routine for yslGets()
 */
STATICF void yslGetsWaiter(dvoid *usrp, ub4 delay)
{
  sword       ch;
  yslGetDesc *desc;

  desc = (yslGetDesc *) usrp;

  desc->eofseen = syslGetc(desc->osdp, &ch, delay);

  if (desc->eofseen || ch == '\n')
    ysTrigger(desc->sem, (ysid *) 0, (dvoid *) 0, (size_t) 0);
  else if (ch != '\0')
    {
      desc->buf[desc->cur++] = (char) ch;
      if (desc->cur == desc->max - 1)
	ysTrigger(desc->sem, (ysid *) 0, (dvoid *) 0, (size_t) 0);
    }
}

/*
 * yslDetach - detach the process from the terminal
 */
void yslDetach(void)
{
  ysctx *ctx;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  if (!ctx->detach)
    {
      /* check to see if remote communication is available; this should
       * probably actually locate the remote console server at this time;
       * if a connection cannot be formed, then we fail.  We may also
       * want to try to open a local log file.  This can be configurable.
       */

      /* make sure we can override detach command via a resource */
      if (!ysResGetBool("ys.ignore-detach"))
        {
      	  /* now let us allow some system-dependent detach processing */
      	  syslDetach();

      	  /* we have detached; set the flag */
      	  ctx->detach = TRUE;
	}
    }
}

/*
 * yslIsDetached - test detach status
 */
boolean yslIsDetached(void)
{
  ysctx *ctx;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  return ctx->detach;
}
