/* Copyright (c) 1994 by Oracle Corporation.  All Rights Reserved.
 *
 * mnrc.c - Media Net RPC Client-Side Implementation
 *
 * REVISIONS
 * jolkin    08/28/94  Creation of Version 2.1
 * jolkin    05/14/94  Creation of Version 2.0
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YSMSC_ORACLE
#include <ysmsc.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNX_ORACLE
#include <mnx.h>
#endif
#ifndef MZN_ORACLE
#include <mzn.h>
#endif
#ifndef MNRC_ORACLE
#include <mnrc.h>
#endif
#ifndef MNRI_ORACLE
#include <mnri.h>
#endif

/*
 * mnrFindServer - find a server by name
 */
mnrb *mnrFindServer(const char *name, const mnrid *progid)
{
  mznent entry;
  mnrb  *bh;
  sb4    sts;

  sts = mznFndEntry(name, progid, &entry);

  if (!sts)
    {
      bh = mnrMakeHandle(&entry.addr);
      mnxFree(mznxEntry, (dvoid *) &entry);
    }
  else
    {
      mnSetLastError(mnGlbCtx, sts);
      bh = (mnrb *) 0;
    }

  return bh;
}

/*
 * mnrMakeHandle - create a binding handle to the given address
 */
mnrb *mnrMakeHandle(const mna *addr)
{
  mnctx *ctx;
  mnrb  *bh;

  ctx = mnGlbCtx;

  bh = (mnrb *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnrb));

  DISCARD memset(bh, 0, sizeof(mnrb));
  mnaCopy(&bh->server, addr);

  bh->port = mnOpen(MNPROTO_MESSAGE);
  bh->sts = mnRecvWait(bh->port, (mna *) 0, (ub4) 0,
		       mnrRecvReply, (dvoid *) bh);

  return bh;
}

/*
 * mnrFreeHandle - destroy a binding handle
 */
void mnrFreeHandle(mnrb *bh)
{
  mnctx  *ctx;
  mnrccx *ch;
  mnrce  *ce;

  ctx = mnGlbCtx;

  /* close the port */
  DISCARD mnClose(bh->port);

  /* destroy all contexts */
  while (bh->ctxs)
    {
      ch = bh->ctxs;
      bh->ctxs = ch->next;
      mnmFree(ctx, (dvoid *) ch);
    }

  /* destroy all pending calls */
  while (bh->calls)
    {
      ce = bh->calls;
      bh->calls = ce->next;
#ifdef NEVER      
      if (ce->ssem)
	mnSemFree(ce->ssem);
#endif
      mneSet(ctx, ce->sem, MNSTS_ABORTED, TRUE);
      mnmFree(ctx, (dvoid *) ce);
    }

  mnmFree(ctx, (dvoid *) bh);
}

/*
 * mnrGetServerAddr(mnrb *bh, mna *addr)
 */
void mnrGetServerAddr(mnrb *bh, mna *addr)
{
  mnaCopy(addr, &bh->server);
}

/*
 * mnrCall - wrapper for RPC calls
 */
sb4 mnrCall(mnrb *bh, dvoid **ch, const char *oper,
	    mnbv *inargs, ub4 incnt, mnbv **outargs, ub4 *outcnt,
	    mnHandler handler, dvoid *usrp)
{
  mnctx *ctx;
  mnsem *sem;
  sb4    sts;

  ctx = mnGlbCtx;

  if (bh->sts >= 0)
    {
      sem = mneMakeSem(ctx, handler, usrp);

      if (!bh->port->re.head)
	mnRecvWait(bh->port, (mna *) 0, (ub4) 0,
		   mnrRecvReply, (dvoid *) bh);
      mnrDoCall(ctx, bh, (mnrccx **) ch, oper,
		inargs, incnt, outargs, outcnt, sem);

      if (!handler && !usrp)
	{
	  sts = mnSemWait(sem);
	  mnSemFree(sem);
	}
      else
	sts = 0;
    }
  else
    sts = bh->sts;

  return sts;
}

/*
 * mnrDoCall - initiate an RPC call
 *   This routine will prepare the message to be sent to the server
 *   and then send it.  This initiates an RPC call sequence.
 */
void mnrDoCall(mnctx *ctx, mnrb *bh, mnrccx **chp, const char *oper,
	       mnbv *inargs, ub4 incnt, mnbv **outargs, ub4 *outcnt,
	       mnsem *sem)
{
  mnrhdr   *hdr;
  mnrce    *ce;
  mna       toaddr;
  ub4       len, hdrlen, ctxid;
  mnrccx   *ch;

  hdr = (mnrhdr *) 0;
  ce = (mnrce *) 0;

  /* allocate header and call event */
  len = strlen(oper);
  hdrlen = sizeof(mnrhdr) + ysRoundVal(len + 1, 4);

  hdr = (mnrhdr *) mnmAlloc(ctx, MNM_MAINPOOL, (size_t) hdrlen);

  /* determine context of call */
  if (chp && *chp)
    {
      ch = *chp;
      ctxid = ch->ctxid;
      mnaCopy(&toaddr, &ch->server);
    }
  else
    {
      ctxid = 0;
      mnaCopy(&toaddr, &bh->server);
    }

  /* initialize header */
  hdr->callid = (ub4) ++(ctx->iss);
  hdr->ctxid = smnHton4(ctxid);
  mnGetAddr(bh->port, &hdr->from);

  DISCARD strcpy((char *) &hdr[1], oper);

  /* prepare operation */
  if (!outargs && !chp)
    {
      mneUnlatch(ctx, sem);
      hdr->options = smnHton4(MNOPT_NOREPLY);

      /* send call */
      DISCARD mnSendHeader(bh->port, &toaddr, (ub1 *) hdr, (size_t) hdrlen,
			   inargs, incnt, (mnHandler) 0, (dvoid *) sem);
    }
  else
    {
      ce = (mnrce *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnrce));

      /* initialize call event */
      ce->callid = hdr->callid;
      ce->bh = bh;
      ce->outargs = outargs;
      ce->outcnt = outcnt;
      ce->chp = chp;
#ifdef NEVER
      ce->ssem = mnSemAlloc((dvoid *) ce);
      mneSemSetHandler(ctx, ce->ssem, mnrCallComp, FALSE);
      mneLatch(ctx, ce->ssem);
#endif
      ce->ssem = (mnsem *) 0;
      ce->sem = sem;

      mnrAddCall(ctx, bh, ce);
      hdr->options = 0;

      /* send call */
      DISCARD mnSendHeader(bh->port, &toaddr, (ub1 *) hdr, (size_t) hdrlen,
			   inargs, incnt, mnDiscard, (dvoid *) 0);
    }


  mnmFree(ctx, (dvoid *) hdr);
}

/*
 * This routine is stupid.  It only does something useful if the mnrCall()
 * fails in the send.  Otherwise, it creates a possible memory leak, because
 * the latched ssem semaphore can get freed by RecvReply() before this
 * routine is triggered, and then this routine will never get triggered to
 * unlatch the semaphore.  It's a trade-off.  Memory leak in the normal
 * working case or memory leak in your process when your call fails.  I
 * think the former is more important, don't you?
 */
#ifdef NEVER
/*
 * mnrCallComp - RPC call send completion
 *   mnrCallComp() is an asynchronous handler set up by mnrDoCall()
 *   to handle the completion of the send.  It is invoked for MAYBE
 *   calls and regular calls, but not NOREPLY calls.  For regular
 *   calls, it is possible for either the send to complete or the
 *   reply to be received first.  Code in here handles that race
 *   condition.
 */
void mnrCallComp(dvoid *cep, sb4 sts)
{
  mnctx *ctx;
  mnrce *ce;

  ctx = mnGlbCtx;

  ce = (mnrce *) cep;
  mneUnlatch(ctx, ce->ssem);

  if (sts < 0)
    {
      mneSet(ctx, ce->sem, sts, TRUE);
      if (ce->chp && *ce->chp)
	{
	  mnrFreeCtx(ctx, ce->bh, *ce->chp);
	  *ce->chp = (mnrccx *) 0;
	}

      mnSemFree(ce->ssem);
      mnrFreeCall(ctx, ce);
    }
}
#endif

/*
 * mnrRecvReply - receive reply to an RPC call
 *   mnrRecvReply() is an asynchronous handler set up when a binding
 *   handle is created and later by this routine.  Every time a reply
 *   is received, this routine is invoked to match the reply with the
 *   original call.
 */
void mnrRecvReply(dvoid *bhp, sb4 sts)
{
  mnctx  *ctx;
  mnrhdr  hdr;
  mna     from;
  mnrb   *bh;
  mnrce  *ce, *celst[128];
  mnbv    bv[2], *obv;
  mnrccx *ch;
  ub4     nbv, callid, ctxid, i, cnt;
  sb4     len, cests[128];

  ctx = mnGlbCtx;
  bh = (mnrb *) bhp;

  if (sts < 0)
    return;

  cnt = 0;
  while (len = mntinRecvTest(bh->port, (mna *) 0))
    {
      bv[1].buf = (ub1 *) 0;
      obv = (mnbv *) 0;
      ce = (mnrce *) 0;

      /* create buffer vector to receive reply */
      bv[0].len = offsetof(mnrhdr, from);
      bv[0].buf = (ub1 *) &hdr;

      if (len > offsetof(mnrhdr, from))
	{
	  bv[1].len = (size_t) (len - offsetof(mnrhdr, from));
	  bv[1].buf = (ub1 *) mnmUserAlloc(ctx, bv[1].len);
	  if (!bv[1].buf)
	    {
	      sts = MNERR_OUTMEM;
	      goto leave;
	    }

	  nbv = 2;
	}
      else
	nbv = 1;

      sts = mntRecv(bh->port, &from, bv, nbv, (ub4) 0,
		    (mnHandler) 0, (dvoid *) 0, TRUE);
      if (sts < 0)
	{
	  mnPrint(MNLERROR, "reply broken");
	  goto leave;
	}

      /* locate original call event */
      callid = hdr.callid;
      sts = -((sb4) smnNtoh4(hdr.options));

      ce = mnrFindCall(ctx, bh, callid);
      if (!ce)
	{
	  mnPrint(MNLERROR, "unexpected call id");
	  sts = MNERR_FAILURE;
	}

      if (sts)
	goto leave;

      /* check semaphore before completing in case it was freed */
      if (mneGet(ctx, ce->sem) != MNSTS_UNKNOWN)
	{
	  mneUnlatch(ctx, ce->sem);
	  mnrFreeCall(ctx, ce);
	  sts = MNSTS_ABORTED;
	  ce = (mnrce *) 0;
	  goto leave;
	}

      /* mnSemFree(ce->ssem); */

      if (ce->outargs)
	{
	  if (!(obv = (mnbv *) mnmUserAlloc(ctx, sizeof(mnbv))))
	    {
	      sts = MNERR_OUTMEM;
	      goto leave;
	    }

	  CPSTRUCT(*obv, bv[1]);

	  *ce->outargs = obv;
	  *ce->outcnt = 1;
	}

      /* handle context creation and deletion */
      ctxid = smnNtoh4(hdr.ctxid);
      if (ctxid && !ce->chp)
	{
	  sts = MNERR_CTXEXP;
	  goto leave;
	}

      if (ce->chp)
	{
	  ch = (mnrccx *) (*ce->chp);

	  if (!ch && ctxid)
	    {
	      /* create new context */
	      ch = (mnrccx *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnrccx));

	      mnaCopy(&ch->server, &from);
	      ch->ctxid = ctxid;

	      ch->next = bh->ctxs;
	      bh->ctxs = ch;
	    }
	  else if (ch && !ctxid)
	    {
	      /* destroy old context */
	      mnrFreeCtx(ctx, bh, ch);
	      ch = (mnrccx *) 0;
	    }
	  else if (ch)
	    ch->ctxid = ctxid;

	  *ce->chp = (mnrccx *) ch;
	}

    leave:
      if (ce)
	{
	  if (cnt < 128)
	    {
	      celst[cnt] = ce;
	      cests[cnt] = sts;
	      cnt++;
	    }
	  else
	    mnPrint(MNLFATAL, "out of stack space");

	  /* set the semaphore
	   * We use to do it here, but if the handler triggered releases
	   * the bind handle, then we are screwed.  So we delay that until
	   * the end of the routine.
	   * mneSet(ctx, ce->sem, sts, TRUE);
	   * mnrFreeCall(ctx, ce);
	   */
	}

      /* if there is an error, free all buffers */
      if (sts)
	{
	  if (bv[1].buf)
	    mnmUserFree(ctx, (dvoid *) bv[1].buf);

	  if (obv)
	    mnmUserFree(ctx, (dvoid *) obv);
	}
    }

  /* requeue this routine for next inbound message */
  if (sts != MNERR_DISCONN && !bh->port->re.head)
    bh->sts = mntRecv(bh->port, (mna *) 0, (mnbv *) 0, (ub4) 0, (ub4) 0,
                      mnrRecvReply, (dvoid *) bh, TRUE);
#ifdef NEVER
  bh->sts = mnRecvWait(bh->port, (mna *) 0, (ub4) 0,
			 mnrRecvReply, (dvoid *) bh);
#endif

  for (i = 0; i < cnt; i++)
    {
      mneSet(ctx, celst[i]->sem, cests[i], TRUE);
      mnrFreeCall(ctx, celst[i]);
    }
}

/*
 * mnrAddCall - add a call to the call chain
 */
void mnrAddCall(/*ARGUSED*/ mnctx *ctx, mnrb *bh, mnrce *ce)
{
  bh = ce->bh;

  if (bh->calls)
    bh->calls->prev = ce;

  ce->next = bh->calls;
  ce->prev = (mnrce *) 0;

  bh->calls = ce;
}

/*
 * mnrFreeCall - free a call from the call chain
 */
void mnrFreeCall(mnctx *ctx, mnrce *ce)
{
  if (ce->prev)
    ce->prev->next = ce->next;
  else
    ce->bh->calls = ce->next;

  if (ce->next)
    ce->next->prev = ce->prev;

  mnmFree(ctx, (dvoid *) ce);
}

/*
 * mnrFindCall - find a call in the call chain by id
 */
mnrce *mnrFindCall(/*ARGUSED*/ mnctx *ctx, mnrb *bh, ub4 callid)
{
  mnrce *scc;

  for (scc = bh->calls; scc && scc->callid != callid; scc = scc->next) ;
  return scc;
}

/*
 * mnrFreeCtx - free a client context handle
 */
void mnrFreeCtx(mnctx *ctx, mnrb *bh, mnrccx *ch)
{
  mnrccx *prev, *scc;

  for (prev = (mnrccx *) 0, scc = bh->ctxs;
       scc && scc != ch;
       prev = scc, scc = scc->next) ;

  if (prev)
    prev->next = scc->next;
  else
    bh->ctxs = scc->next;

  mnmFree(ctx, (dvoid *) ch);
}
