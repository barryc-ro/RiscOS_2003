/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * yccfp.c - Output file I/O for C/C++ code generators
 *
 * NOTES
 * This file exists because of the OCCS requirement that source files do
 * not contain any lines longer than 79 characters. A yccfp object
 * encapsulates a plain 'ol file pointer and all the state information
 * needed to control the line limit. Line length is bound to the file 
 * when it is opened and cannot be changed thereafter. 
 *
 * The line length limit is controlled by the resource "mnidlc.c-line-limit".
 * See yccGetLineLimit for information about defaults, etc. In practice,
 * the line limit used by yccfp is actually YCCFP_SLACK characters shorter
 * to allow the printer maneuvering room (e.g. for adding '\' to macros).
 *
 * yccfpPrint is suitable only for C and C++ because the heuristic it
 * uses to choose suitable line breaks is based on syntactic knowledge of
 * what literals look like and what symbols are "safe" to split. See
 * yccfpPrint for more information.
 *
 * The open, close, and print interfaces mirror those in sysfp.h closely
 * because this is just a wrapper around sysfp. Thus, yccfpOpen takes the
 * same parameters as sysfpOpen, plus an additional line length limit.
 * There are additional interfaces to tinker with the non-sysfp attributes
 * like indentation and pre-processing. The print formats supported by
 * this package correspond to what is supported by ysFormatStr; this is
 * more than adequate for the IDL compiler's needs.
 *
 * Indentation
 * -----------
 * In addition to insuring lines do not overflow the line limit, this
 * package attempts to do auto-indentation. Indentation level is an 
 * attribute of a ycfp; it can be controlled via the operations 
 * yccfpSetIndent, yccfpIncIndent, and yccfpDecIndent. Each indentation
 * level indents text YCCFP_SZ_INDENT spaces. To avoid ridiculous levels
 * that make it impossible to squeeze anything on a line, the indentation
 * level is never deeper than YCCFP_MAX_INDENT.
 *
 * Auto-indentation implies that callers of yccfpPrint should not attempt
 * to perform their own indentation (unless they set the level to 0 and
 * leave it there). For example, if the indentation level is 2:
 *
 *    yccfpPrint( fp, "hello\ngoodbye\n");
 *
 * correctly emits:
 *
 *     hello
 *     goodbye
 * ^^^^ both lines indented by yccfpPrint
 *
 * Tracking the indentation level gets a little tricky because of the
 * line buffering. The line buffer contains a portion of a line and the
 * indentation level is changed, the change should only apply to lines
 * emitted AFTER the next user-supplied line break. So, indentation
 * levels are buffered. yccfpPrint refreshes it's indent level after
 * each hard newline.
 *
 * HISTORY
 * 06/04/96 kcoleman	Creation.
 */

#ifndef  SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef SYSFP_ORACLE
#include <sysfp.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif

/* ------------------------------------------------------------------------- */
/*
 * yccfp - file descriptor for C/C++ code generation
 */
struct yccfp
{
  sysfp* fp;
  ub4 maxlen;                 /* max length of a line, <= YCC_MAX_LINE or 0 */
  char* ln;                   /* output line buffer */
  sb4 i;                      /* position of curr char in ln */
  sb4 lit_start;              /* start of string or char literal in ln */
  ub2 indent;                 /* indentation level */
  sb2 pending_indent;         /* indent lvl after buffered line is spilled */
  boolean escaped;            /* previous char was a backslash */
  ub4 flags;
};

/* ------------------------------------------------------------------------- */
/*
 * Constants used by yccfp
 */
static ysmtagDecl(yccfpTag) = "yccfp";   /* allocation tag */
#define YCCFP_SZ_INDENT 2     /* spaces per indentation level */
#define YCCFP_MAX_INDENT 10   /* max number of indent levels */
                              /*   indentation depth never goes beyond this */
#define YCCFP_SLACK 4         /* slop to prevent user line limit overflow */
                              /*   because we may add backslashes, etc. */

/* ------------------------------------------------------------------------- */
/*
 * yccfpPrint flags
 *
 * These are bit masks. Use in the second parameter of yccfpPrint.
 *
 * YCCFP_NONE -   default
 * YCCFP_PP_DIR - emitting a pre-processing directive, insert a backslash
 *                line continuation character before added newlines.
 */
#define YCCFP_NONE 0
#define YCCFP_PP_DIR 1

/* ------------------------------------------------------------------------- */
/*
 * Local function declarations 
 */

STATICF void yccfpResetLn( yccfp* ycfp, ub4 back_to, ub4 back_cnt);
STATICF ub2 yccfpUpdateIndent( yccfp* fp);


/* ------------------------------------------------------------------------- */
/*
 * yccfpOpen - open a file for C/C++ code generation. See yccfp.h.
 */

yccfp* yccfpOpen( CONST char* fn, CONST char* type, CONST char* kind,
                  CONST char** errtxt, ub4 maxline)
{
  yccfp* ycfp;
  sysfp* fp;

  fp = sysfpOpen( fn, type, kind, errtxt);
  if ( fp )
  {
    ycfp = (yccfp*) ysmGlbAlloc( sizeof(yccfp), yccfpTag);
    CLRSTRUCT(*ycfp);
    if ( maxline )
    {
      ycfp->maxlen = maxline;
      if ( maxline > YCCFP_SLACK )
        ycfp->maxlen -= YCCFP_SLACK;    /* slop for things like backslashes */
      ycfp->ln = (char*) ysmGlbAlloc( maxline, "linebuf");
    }
    ycfp->lit_start = -1;
    ycfp->pending_indent = -1;
    ycfp->fp = fp;
  }
  else
    ycfp = (yccfp*)0;
  return ycfp;
}


/* ------------------------------------------------------------------------- */
/*
 * yccfpClose - close a file opened with yccfpOpen.
 *
 * Closes the file and deallocates the space held by the file descriptor.
 */

void yccfpClose( yccfp* ycfp)
{
  if ( ycfp )
  {
    ysmCheck( ycfp, yccfpTag);
    if ( ycfp->maxlen )
    {
      if ( ycfp->i > 0 )          /* still a line buffered, spit it out */
        sysfpPrint( ycfp->fp, "%.*s\n", ycfp->i+1, ycfp->ln);
      ysmGlbFree( (dvoid*) ycfp->ln);
    }
    sysfpClose( ycfp->fp);
    ysmGlbFree( (dvoid*) ycfp);
  }
}


/* ------------------------------------------------------------------------- */
/*
 * yccfpPrint - Fprintf with line length constraints and indentation
 *
 * This function performs line buffered I/O for C and C++, forcing line
 * breaks as required by the line length set in the file descriptor.
 * Format strings sent to yccfpPrint need not be terminated by a newline.
 * yccfpPrint buffers output (in the yccfp) until a newline is supplied by
 * a caller or it is necessary to insert a line break. Thus, multiple calls
 * may be made to yccfpPrint before any output is actually generated.
 *
 * The algorithm for inserting line breaks is a compromise between 
 * efficiency and thoroughness, and as such is far from perfect. Rather
 * than spending a lot of time analyzing the line contents, we search for 
 * a limited set characters that are always OK outside the context of a 
 * literal (e.g. ' ', ';', etc.). This means that we will sometimes back
 * back up farther than necessary, but it also means we'll never
 * split an identifier, numeric literal, or compound expression symbol.
 *
 * The opening and closing of string literals is tracked to make sure
 * we don't try to split a literal across a line boundary. A string literal
 * may be split if necessary by turning it into two adjacent literals
 * separated by a newline, as permitted by ANSI C and C++.
 *
 * It is possible to get so wedged that we cannot insert a clean line break:
 * Consider a line length limit of 20 characters and a 25 character 
 * identifier. We can't fix this. Instead, the line is emitted as-is with
 * a backslash and we cross our fingers that the output doesn't encounter
 * a cranky preprocessor. For example, if the line limit is 3 and the
 * input is "abc", we emit:
 *
 *   ab\
 *   c
 *
 * which any right thinking preprocessor should glue back into "abc".
 * Couldn't we just do all the line breaks this way? Well, yes, but 
 * people have to look at this stuff, too and this pretty unreadable.
 *
 * Note - you can end up with extra newlines in the output if yccfpPrint
 * decides a newline is called for and then is called immediately afterwards
 * with a newline as input. 
 */

void yccfpPrint( yccfp* ycfp, CONST char* fmt, ...)
{
  va_list args;
  char* p;
  char buff[512];
  sb4 j;
  ub4 back_to;
  ub4 back_cnt;
  ub2 indent;

    /***** Format the output string *****/
  va_start( args, fmt);
  ysFmtVaStrl( buff, sizeof(buff), fmt, args);
  va_end(args);

  if ( ycfp->maxlen == 0 )       /* no line length limit, just spit it out */
  {
    sysfpPrint( ycfp->fp, "%s", buff);
    return;
  }

    /***** Build up and emit lines *****/
  indent = yccfpIndent( ycfp);
  for (p = buff; *p; p++, ycfp->i++)
  {
    if ( (ycfp->i == 0) && (indent > 0) && (*p != '\n') )
    {         /* start of a new line, do the indentation */
      for ( ; ycfp->i < (sb4)(YCCFP_SZ_INDENT * indent); ycfp->i++)
        ycfp->ln[ycfp->i] = ' ';
    }

    ycfp->ln[ycfp->i] = *p;
    switch (*p)                              /* track literals, etc. */
    {
      case '"':
      case '\'':
        if ( ycfp->lit_start >= 0 )
        {
          if ( ycfp->ln[ycfp->lit_start] == *p )
            ycfp->lit_start = -1;
        }
        else
          ycfp->lit_start = ycfp->i;
        break;
      case '\\':
        if ( ycfp->flags & YCCFP_PP_DIR )
          break;       /* line continuation, not an escape */
        if ( *(p+1) != '\0' )
        {
          p++;
          ycfp->i++;
          ycfp->ln[ycfp->i] = *p;
        }
        else
          ycfp->escaped = TRUE;
        break;
      case '\n':
        indent = yccfpUpdateIndent( ycfp);
        goto spill;
        break;
      default:
        break;
    }
  
      /***** Line full. Find right place to insert line break. *****/
    if ( (ub4)ycfp->i >= ycfp->maxlen )
    {
spill:                        /* we'll never jump here inside a literal */
      back_to = 0;
      back_cnt = 0;

        /***** Add newline before start of open char/string literal *****/
      if ( ycfp->lit_start >= 0 )
      {
        if ( (ycfp->lit_start == 0) )
        {
          if ( ycfp->ln[ycfp->lit_start] == '"' )
          {                            /* string literal too big, split it */
            ycfp->ln[ycfp->i+2] = ycfp->ln[ycfp->i];
            ycfp->ln[ycfp->i] = '"';
            ycfp->ln[ycfp->i+1] = '"';
            back_to = ycfp->i+1;
            back_cnt = 2;
            ycfp->lit_start = back_to;
          }
          else
            yseThrow( YC_EX_FAILURE);  /* impossibly huge char literal */
        }
        else                         /* always OK to split before a literal */
        {
          back_to = ycfp->lit_start;
          back_cnt = ycfp->i - ycfp->lit_start + 1;
          ycfp->i = ycfp->lit_start - 1;
        }
      }
        /***** Search backwards for an OK place to insert a newline *****/
      else
      {
        sb4 brk = -1;
  
        for ( j = ycfp->i; (brk < 0) && (j >= 0); j--)
        {
          switch (ycfp->ln[j])
          {
            case '\n':  case ' ':
            case '\t':  case '\r':
            case ';':   case ',':
            case '(':   case ')':
            case '?':
              brk = j;
              break;
            default:
              break;
          }
        }
        if ( brk >= 0 )    /* found a place to split line */
        {
          if ( brk < ycfp->i )
          {
            back_to = brk + 1;
            back_cnt =  ycfp->i - brk;
            ycfp->i = brk;
          }
          else
          {
            back_cnt = 0;
            back_to = brk;
          }
          /* break at last char in buffer, no need to copy back */
        }
        else
        {    /* can't find a good break, try to patch things together */
          sysfpPrint( ycfp->fp, "%.*s\\\n", ycfp->i+1, ycfp->ln);
          ycfp->i = -1;
          indent = 0;
          continue;        /* circumvent normal EOL handling */
        }
      }
  
        /***** Print a line *****/
      if ( ycfp->ln[ycfp->i] == '\n' )
        sysfpPrint( ycfp->fp, "%.*s", ycfp->i+1, ycfp->ln);
      else if ( !(ycfp->flags & YCCFP_PP_DIR) )
        sysfpPrint( ycfp->fp, "%.*s\n", ycfp->i+1, ycfp->ln);
      else
        sysfpPrint( ycfp->fp, "%.*s \\\n", ycfp->i+1, ycfp->ln);
  
        /***** Reset state of line buffer *****/
      if ( ycfp->ln[ycfp->i] != '\n' )
      {
        yccfpResetLn( ycfp, back_to, back_cnt);
        ycfp->i--;       /* because loop top will increment */
      }
      else
        ycfp->i = -1;
    }
  }
}


/* ------------------------------------------------------------------------- */
/*
 * yccfpResetLn - Reset current line state after a line is printed.
 *
 * If we just print only a portion of the line buffer (e.g. it was necessary
 * for yccfpPrint to insert a newline), we must copy any deferred characters
 * back to the "beginning" of the line buffer.
 *
 * However, the "beginning" is not necessarily position 0 because of 
 * auto indentation. The deferred characters are moved to immediately
 * after the indent + 1. (We indent the wrapped line deeper).
 *
 * If the indentation and the deferred characters together exceed the line
 * length again, the indentation goes in the dumper because we already know
 * we cannot further subdivide the line. Only by disregarding the indentation
 * can you give the line a chance of surviving.
 *
 * This should be called any time yccfpPrint forces a line wrap, even if
 * there are no characters to copy back - we still want to adjust the
 * indentation. The only exception is when the line break already falls on
 * a newline - in which case we haven't forced a break at all.
 */
STATICF void yccfpResetLn( yccfp* ycfp, ub4 back_to, ub4 back_cnt)
{
  char* overlap;
  char* dyn = (char*)0;
  char fixed[80];
  ub4 spaces;
  ub4 j;

    /***** Check for line overflow due to indentation *****/
  spaces = (yccfpIndent(ycfp) + 1) * YCCFP_SZ_INDENT;
  if ( spaces + back_cnt > ycfp->maxlen )
    spaces = 0;

    /***** Overlap between indentation and deferred chars *****/
  if ( spaces && back_cnt && (spaces > back_to) )
  {
    if ( spaces > sizeof(fixed) )
      overlap = fixed;                 /* should be the common case */
    else
    {
      dyn = (char*) ysmGlbAlloc( back_cnt, "linbuf");
      overlap = dyn;
    }

    strncpy( overlap, ycfp->ln+back_to, back_cnt);
    for ( j = 0; j < spaces; j++)
      ycfp->ln[j] = ' ';
    strncpy( ycfp->ln + spaces, overlap, back_cnt);
    ycfp->i = spaces + back_cnt;

    if ( dyn )
      ysmGlbFree( (dvoid*)dyn);
  }
    /***** No overlap between deferred chars and indentation *****/
  else 
  {
    for (ycfp->i = 0; (ub4)ycfp->i < spaces; ycfp->i++)
      ycfp->ln[ycfp->i] = ' ';
    j = back_to;
    while ( back_cnt-- )
    {
      ycfp->ln[ycfp->i++] = ycfp->ln[j++];
    }
  }

  if ( ycfp->lit_start >= 0 )
    ycfp->lit_start = spaces;
}

/* ------------------------------------------------------------------------- */
/*
 * yccfpIncIndent - increment indentation level
 *
 * If there is an indentation level update pending, the increment affects
 * the pending value, not the current one.
 */

void yccfpIncIndent( yccfp* ycfp)
{
  ub2* indent;

  if ( (ycfp->i > 0) || (ycfp->pending_indent >= 0) )
    indent = (ub2*) &ycfp->pending_indent;
  else
    indent = &ycfp->indent;
  *indent = *indent + 1;
}

/* ------------------------------------------------------------------------- */
/*
 * yccfpDecIndent - decrement indentation level
 *
 * If there is an indentation level update pending, the increment affects
 * the pending value, not the current one. If the affected indentation
 * level is already 0, this has no effect.
 */

void yccfpDecIndent( yccfp* ycfp)
{
  ub2* indent;

  if ( (ycfp->i > 0) || (ycfp->pending_indent >= 0) )
    indent = (ub2*) &ycfp->pending_indent;
  else
    indent = &ycfp->indent;
  if ( *indent > 0 )
    *indent = *indent - 1;
}

/* ------------------------------------------------------------------------- */
/*
 * yccfpSetIndent - set the indentation level to an arbitrary depth
 *
 * If there is an indentation level update pending, this operation affects
 * the pending indentation level rather than the current one.
 */

void yccfpSetIndent( yccfp* ycfp, ub2 newlvl)
{
  ub2* indent;

  if ( (ycfp->i > 0) || (ycfp->pending_indent >= 0) )
    indent = (ub2*) &ycfp->pending_indent;
  else
    indent = &ycfp->indent;
  *indent = newlvl;
}

/* ------------------------------------------------------------------------- */
/*
 * yccfpIndent - returns the current indentation level
 *
 * This is where we control the max depth. It is done here rather than as
 * the level is set so that increment and decrements can be reliably done
 * in pairs without regard to the max depth.
 */

ub2 yccfpIndent( yccfp* ycfp)
{
  return min( ycfp->indent, YCCFP_MAX_INDENT);
}

/* ------------------------------------------------------------------------- */
/*
 * yccfpUpdateIndent - update the current indentation level to the pending one
 *    if any, and return the resulting level
 */

STATICF ub2 yccfpUpdateIndent( yccfp* ycfp)
{
  if ( ycfp->pending_indent >= 0 )
  {
    ycfp->indent = ycfp->pending_indent;
    ycfp->pending_indent = -1;
  }
  return ycfp->indent;
}


/* ------------------------------------------------------------------------- */
/*
 * yccfpStartPP - indicate we're processing a pre-processing directive,
 *   inserted line breaks should be preceded by a backslash.
 */
void yccfpStartPP( yccfp* ycfp)
{
  ycfp->flags |= YCCFP_PP_DIR;
}

/* ------------------------------------------------------------------------- */
/*
 * yccfpEndPP - indicated we're done printing a pre-processing directive.
 */
void yccfpEndPP( yccfp* ycfp)
{
  ycfp->flags &= ~YCCFP_PP_DIR;
}

