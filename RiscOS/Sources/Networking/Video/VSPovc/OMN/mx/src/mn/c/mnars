/* Copyright (c) 1994 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 * mnars - Media Net Address Request Service
 *
 * REVISIONS
 * dpawson   07/07/95  Add version structure
 * jolkin    07/22/94  Split into generic/OSD parts
 * jolkin    05/04/94  OMN V2.0
 * dbrower   06/27/95  use new common main.
 *
 * BUGS
 * This version of the address service only supports one address server
 * in the entire network and the address server acts as the ultimate
 * well-known gateway.  It also only issues addresses starting from
 * 1.0.0.0.
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef MTL_ORACLE
#include <mtl.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNI_ORACLE
#include <mni.h>
#endif
#ifndef MNRC_ORACLE
#include <mnrc.h>
#endif
#ifndef MNX_ORACLE
#include <mnx.h>
#endif

#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSR_ORACLE
#include <ysr.h>
#endif
#ifndef YSC_ORACLE
#include <ysc.h>
#endif
#ifndef SMNI_ORACLE
#include <smni.h>
#endif
#ifndef SMNG_ORACLE
#include <smng.h>
#endif

#define MNAROWS  256                            /* # rows in host hash table */

typedef struct mnawae mnawae;
struct mnawae
{
  mna watcher;                                        /* guy who is watching */
  mnawae *next;                               /* next guy who wants to watch */
};

typedef struct mnawe mnawe;
struct mnawe
{
  mna target;                                            /* address to watch */
  mnawae *watchers;                                         /* guys who care */
  mnawe *next;                                            /* hash chain next */
  mnawe *prev;                                            /* hash chain prev */
};

typedef struct mnarsc
{
  mna     next;                                    /* next address to assign */
  mnawe  *watches[MNAROWS];                  /* process death sub hash table */
  mnp    *port;                                                /* death port */
  boolean nohb;                        /* suppress heartbeat death detection */
  ub4     scnt;                            /* number of synchronized servers */
  mnrte  *synch;                             /* list of synchronized servers */
} mnarsc;

typedef struct mnarsd
{
  mnctx *mncx;
  mnarsc *arscx;
  ub1  buff[MNADPLEN];
  mna  from;
} mnarsd;

void mnArsReq(mnctx *ctx, mnarsc *arsctx, mna *from, ub1 *buf);
void mnArsRel(mnctx *ctx, mnarsc *arsctx, mna *from, ub1 *buf);
void mnArsSynch(mnctx *ctx, mnarsc *arsctx, mna *from, ub1 *buf);
void mnArsDeath(dvoid *usrp, mna *host, mnrte *rte);
void mnArsDeathRecv(dvoid *usrp, sb4 val);
sb4 mnArsAddWatch(mnarsc *arsctx, mna *target, mna *notify);
sb4 mnArsRmWatch(mnarsc *arsctx, mna *target, mna *notify);

static struct ysargmap mnarsArgs[] =
{
  { 'g', "mn.sync-gateway", YSARG_MANY },
  { 'i', "mn.async-gateway", YSARG_MANY },
  { 'D', "mnars.no-heartbeat=true", 0 },
  { 'e', "mnars.logtool", 1 }, 
  { 'z', "mn.heapsize", 1 },
  { YSARG_OPTPARAM, "mnars.subnet", 1 },
  { 0 }
};

/*
 * mnars - main entrypoint to a generic address server
 */
boolean mnars(dvoid *osdCtx, CONST char *nm, sword argc, char **argv)
{
  mnp    *port;
  mna     addr, from;
  mnbv    bv;
  ub1     buf[256];
  mnctx  *ctx;
  sb4     sts;
  boolean done;
  mnarsc  arsctx;
  mnarsd  death;
  mnrte  *nxt;
  char   *addrtxt;
  sb4	 tool = MtlLogTool;
  char	 *arg;
  char    vbuf[80];

  CLRSTRUCT(arsctx);

  sts = ysArgParse( argc, argv, mnarsArgs );
  if (sts == YSARG_VERSION)
    {
      yslError("Oracle Media Net Address Server");
      yslError(ysVersion(vbuf, sizeof(vbuf)));
    }
  if (sts != YSARG_NORMAL)
    return FALSE;

  if( ysResGetLast( "mnars.no-heartbeat" ) )
    arsctx.nohb = TRUE;
  
  if( arg = ysResGetLast( "mnars.subnet" ) )
    addrtxt = arg;
  else
    addrtxt = "1.0.0.0";

  if( arg = ysResGetLast( "mnars.logtool" ) )
  {
    if( !strcmp( arg, "screen" ) )
      tool = MtlScreenTool;
    else if( !strcmp( arg, "log" ) )
      tool = MtlLogTool;
    else if( !strcmp( arg, "console" ) )
      tool = MtlConsoleTool;
    else
    {
      mtlLog("Unrecognized log tool %s", arg );
      return( FALSE );
    }
    mtlInit( tool, nm );
  }

  if( !smngInit( osdCtx, (mnLogger)0 ) )
    return( FALSE );

  if (tool != MtlScreenTool)
    {
      mtlLog("Oracle Media Net Address Server");
      mtlLog(ysVersion(vbuf, sizeof(vbuf)));
      yslDetach();
    }

  /* initialize address dispenser */
  mnAddr(&arsctx.next, addrtxt);
  mtlLog("address server for subnet %s is running", addrtxt);

  ctx = mnGlbCtx;

  mnAddr(&addr, MNARSADDR);

  port = mnOpen(MNPROTO_OCP);
  mnaBind(ctx, &addr, port, FALSE);

  /* listen for death registration requests */
  mnAddr(&addr,MNADEATHADDR);
  death.mncx = ctx;
  death.arscx = &arsctx;

  arsctx.port = mnOpen(MNPROTO_MESSAGE);
  mnaBind(ctx, &addr, arsctx.port, FALSE);
  mntRemovePort(ctx, arsctx.port);                     /* pure magic here!?! */
  mnaCopy(&arsctx.port->me, &addr);

  sts = mnRecv(arsctx.port,&death.from,death.buff,sizeof(death.buff),
               0,mnArsDeathRecv,(dvoid *)&death);
  if(sts < 0)
    mnPrint(MNLWARN, "receive on process death port failed");

  /* register interest in the death of routes */
  mnaSetDeath(ctx, mnArsDeath, (dvoid *) &arsctx);

  bv.len = sizeof(buf);
  bv.buf = buf;
  done = FALSE;
  while (!done)
    {
      sts = mnoRecv(ctx, &from, &bv, 1, 0, 0, 0);
      switch (sts)
	{
	case MNSTS_ABORTED: done = TRUE; break;
	case MNOTYP_ADDRREQUEST: mnArsReq(ctx, &arsctx, &from, buf); break;
	case MNOTYP_ADDRRELEASE: mnArsRel(ctx, &arsctx, &from, buf); break;
	case MNOTYP_ADDRSYNCH: mnArsSynch(ctx, &arsctx, &from, buf); break;
	default: mnPrint(MNLERROR, "unexpected OCP packet: %d", sts); break;
	}
    }

  /* termation cleanup */
  while (arsctx.synch)
    {
      nxt = arsctx.synch->next;
      ysmGlbFree((dvoid *) arsctx.synch);
      arsctx.synch = nxt;
    }

  mnClose(arsctx.port);
  mnTerm();
  return( TRUE );
}

/*
 * mnArsReq - handle an address request
 *   Address requests come formatted as:
 *     + a physical address
 *     + a Media Net address
 *   Also, if the from address is non-zeroed, that is where the reply should
 *   be sent.
 */
void mnArsReq(mnctx *ctx, mnarsc *arsctx, mna *from, ub1 *buf)
{
  mnnpa *pa;
  mna   *src;
  mnnio *dnio;
  ub1   *p;
  mnrte *rte, *scs;
  ub1     pktspc[sizeof(mnnpkt) + sizeof(mnnhdr)];
  mnnpkt *ipkt = (mnnpkt *) pktspc;

  pa = (mnnpa *) buf;
  src = (mna *) (buf + sizeof(mnnpa));

  dnio = mnnFindNio(ctx, pa->family);
  if (dnio)
    {
      if (mnaWellKnown(src))
	{
	  rte = mnaFindRoute(ctx, src);
	  if (rte && mnaEq(src, &rte->addr))
	    {
	      mnPrint(MNLERROR, "duplicate well-known address");
	      rte->nio = dnio;
	      CPSTRUCT(rte->pa, *pa);
	      rte->itime = smnClock();
	    }
	  else
	    mnaInsertRoute(ctx, src, 0, dnio, pa,
			   (arsctx->nohb ? MNAFLG_PERM : 0));
	}
      else
	{
	  do
	    {
	      for (p = &arsctx->next.bits[5];
		   p > &arsctx->next.bits[0] && *p == 255; p--)
		*p = 0;
	      (*p)++;
	    } while (mnaFindRoute(ctx, &arsctx->next));

	  mnaCopy(src, &arsctx->next);
	  mnaInsertRoute(ctx, src, 0, dnio, pa, 
			 (arsctx->nohb ? MNAFLG_PERM : 0));
	}

      /* synchronize address request */
      if (arsctx->synch)
	{
	  rte =  mnaFindRoute(ctx, src);
	  memset(ipkt, 0, sizeof(mnnpkt) + sizeof(mnnhdr));
	  for (scs = arsctx->synch; scs; scs = scs->next)
	    {
	      ipkt->nio = scs->nio;
	      CPSTRUCT(ipkt->pa, scs->pa);
	      if (memcmp(scs->pa.family, rte->pa.family,
			 sizeof(scs->pa.family)))
		{
		  mnnpa tmp;
		  CPSTRUCT(tmp, rte->pa);
		  CPSTRUCT(rte->pa, scs->nio->pa);
		  mnoSendRedirect(ctx, ipkt, rte, MNAFLG_PERM);
		  CPSTRUCT(rte->pa, tmp);
		}
	      else
		mnoSendRedirect(ctx, ipkt, rte, MNAFLG_PERM);
	    }
	}

      mnoSendAddrReply(ctx, 0, from, src, dnio, pa);
    }
  else
    {
      mnPrint(MNLERROR, "unable create address reply");
    }
}

/*
 * mnArsRel - handle an address release
 *   There is no content to an address release; just the from address telling
 *   us what address to release.
 */
void mnArsRel(mnctx *ctx, mnarsc *arsctx, mna *from, ub1 *buf)
{
  mnrte *rte;

  rte = mnaFindRoute(ctx, from);
  if (rte && mnaEq(from, &rte->addr))
    mnaDeleteRoute(ctx, rte);
  else
    mnPrint(MNLWARN, "released an address that wasn't allocated");
}

void mnArsSynch(mnctx *ctx, mnarsc *arsctx, mna *from, ub1 *buf)
{
  mnnpa *pa;
  mnrte *rte;

  pa = (mnnpa *) buf;
  rte = (mnrte *) ysmGlbAlloc(sizeof(mnrte), "mnrte for ArsSynch");
  DISCARD memset((dvoid *) rte, 0, sizeof(mnrte));
  rte->nio = mnnFindNio(ctx, pa->family);
  CPSTRUCT(rte->pa, *pa);
  rte->next = arsctx->synch;
  arsctx->synch = rte;
}

void mnArsDeathRecv(dvoid *usrp, sb4 val)
{
  mnarsd  *death;
  mnarsc  *arscx;
  ub1 *buf;
  sb4 sts = 0;
  ub1 type;
  mna target, notify;

  if(val < 0)
  {
    mnPrint(MNLWARN, "receive on process death port failed");
    return;
  }
  
  /* find ourselves */
  death = (mnarsd *) usrp;
  arscx = death->arscx;
  buf = death->buff;

  if(val == MNADPLEN)
  {
    /* decompose buffer - figure out what we want to do */
    type = *buf;
    mnaNetCopy(&target,(mna *)(buf+1));
    mnaCopy(&notify,&death->from);

    switch(type)
    {
    case MNADT_WATCH:                                               /* watch */
      sts = mnArsAddWatch(arscx,&target,&notify);
      break;

    case MNADT_RMWATCH:                                      /* remove watch */
      sts = mnArsRmWatch(arscx,&target,&notify);
      break;
    
    case MNADT_DEAD:                                   /* death notification */
      /* shouldn't get this message */
      break;

    default:                                                      /* unknown */
      break;
    }

    if(type == MNADT_WATCH && sts)
    {
      /* send back a failure notice */
      *buf = MNADT_BADWATCH;
      DISCARD mnSend(arscx->port,&death->from,buf,MNADPLEN,mnDiscard,0);
    }
  }
  else
    mnPrint(MNLWARN,"received invalid death watch packet");


  /* post another read on the death port */
  sts = mnRecv(arscx->port,&death->from,death->buff,MNADPLEN,0,
               mnArsDeathRecv,usrp);
  if(sts < 0)
    mnPrint(MNLWARN, "receive on process death port failed");
}

/*
 * mnArsDeath - invoked when a route is reaped or deleted
 */ 
void mnArsDeath(dvoid *usrp, mna *host, mnrte *rte)
{
  mnarsc *arsctx = (mnarsc *) usrp;
  mnawae *wae = (mnawae *)0, *next;
  mnawae **waep;
  mnawe *we = (mnawe *) 0;
  mnawe *wen;

  ub4 key, i;
  ub1 msg[1 + sizeof(mna)];
  mna asaddr;
  mnrte *scs;
  mnctx *ctx;

  ctx = mnGlbCtx;
  if (!(rte->flags & MNAFLG_PERM) && arsctx->synch)
    {
      DISCARD mnAddr(&asaddr, MNARSADDR);
      for (scs = arsctx->synch; scs; scs = scs->next)
	DISCARD mnoSendWRte(ctx, MNOTYP_ADDRRELEASE, &asaddr, &rte->addr, scs);
    }

  /* attempt to find target in the hash table */
  for (key = i = 0; i < 6; i++)
    key += host->bits[i];
  key &= (MNAROWS - 1);

  for(we = arsctx->watches[key]; we; we = we->next)
    if(mnaEq(&we->target,host)) break;

  if(we)
  {
    /* construct the death message */
    msg[0] = MNADT_DEAD;
    mnaCopy((mna *)(msg+1),host);

    /* remove entry from hash table */
    if(we->next)
      we->next->prev = we->prev;
    if(we->prev)
      we->prev->next = we->next;
    else
      arsctx->watches[key] = we->next;

    /* notify those who are watching */
    for(wae = we->watchers; wae; wae = next)
    {
      DISCARD mnSend(arsctx->port,&wae->watcher,msg,sizeof(msg),
		     mnDiscard,(dvoid *)0);
      next = wae->next;
      ysmGlbFree((dvoid *) wae);
    }
    ysmGlbFree((dvoid *) we);
  }
  /* remove any occurances of the dead guy from the watcher section */
  /* danger - performance may rot here */
  for(i = 0; i < MNAROWS; i++)
  {
    for(we = arsctx->watches[i]; we; we = wen)
    {
      wen = we->next;
      for(waep = &we->watchers; *waep; waep = &(*waep)->next)
        if(mnaNetEq(&(*waep)->watcher,host))
        {
          next = (*waep)->next;
          ysmGlbFree((dvoid *) *waep);
          *waep = next;

          /* can stop here because the watcher will only show up once */
          break;
        }
      if(!we->watchers)
      {
        if(we->next)
          we->next->prev = we->prev;
        if(we->prev)
          we->prev->next = we->next;
        else
          arsctx->watches[i] = we->next;
        ysmGlbFree((dvoid *) we);
      }
    }
  }
}

/*
 * mnArsAddWatch - adds a watch.  duplicate detection is not performed.
 *   The remote process is expected to send only one request for a particular
 *   host/process address.
 */
sb4 mnArsAddWatch(mnarsc *arsctx, mna *target, mna *notify)
{
  mnctx *ctx;
  mnrte *rte;
  mnawae *wae = (mnawae *)0;
  mnawe *we = (mnawe *) 0;
  ub4 key, i;
  sb4 sts = MNSTS_NORMAL;

  ctx = mnGlbCtx;
  /* make sure the address is valid */
  rte = mnaFindRoute(ctx, target);
  if(!rte || !mnaEq(target, &rte->addr))
  {
    sts = MNERR_BADADDR;
    goto err_done;
  }

  /* attempt to find target in the hash table */
  for (key = i = 0; i < 6; i++)
    key += target->bits[i];
  key &= (MNAROWS - 1);

  for(we = arsctx->watches[key]; we; we = we->next)
    if(mnaEq(&we->target,target)) break;

  if(!we)                                               /* not in hash table */
  {
    /* create entry for the target */
    we = (mnawe *) ysmGlbAlloc(sizeof(mnawe), "mnawe for AddWatch");
    if(!we)
    {
      sts = MNERR_OUTMEM;
      goto err_done;
    }
    CLRSTRUCT(*we);
    mnaCopy(&we->target,target);

    we->next = arsctx->watches[key];                  /* join the hash table */
    arsctx->watches[key] = we;
    if(we->next) we->next->prev = we;
  }
  
  /* create watch addr entry */
  wae = (mnawae *) ysmGlbAlloc(sizeof(mnawae), "mnawae for AddWatch");
  if(!wae)
  {
    sts = MNERR_OUTMEM;
    goto err_done;
  }
  mnaCopy(&wae->watcher,notify);

  wae->next = we->watchers; /* add watcher address to the head of the list */
  we->watchers = wae;

  return sts;                                                     /* success */

 err_done:                                 /* unable to complete the mission */
  if(wae) ysmGlbFree((dvoid *) wae);
  if(we) ysmGlbFree((dvoid *) we);
  return sts;
}

/*
 * mnArsRmWatch - 
 */
sb4 mnArsRmWatch(mnarsc *arsctx, mna *target, mna *notify)
{
  mnawae *wae = (mnawae *)0;
  mnawae **pp = (mnawae **) 0;
  mnawe *we = (mnawe *) 0;
  ub4 key, i;

  /* attempt to find target in the hash table */
  for (key = i = 0; i < 6; i++)
    key += target->bits[i];
  key &= (MNAROWS - 1);

  for(we = arsctx->watches[key]; we; we = we->next)
    if(mnaEq(&we->target,target)) break;

  if(!we) return MNERR_BADADDR;              /* not interested, interesting? */

  pp = &we->watchers;
  for(wae = we->watchers; wae; pp = &wae->next, wae = wae->next)
    if(mnaEq(&wae->watcher,notify))
    {
      *pp = wae->next;                                      /* found, remove */
      ysmGlbFree((dvoid *) wae);
      break;                                                         /* done */
    }

  if(!we->watchers)
  {
    /* remove entry from hash table */
    if(we->next)
      we->next->prev = we->prev;
    if(we->prev)
      we->prev->next = we->next;
    else
      arsctx->watches[key] = we->next;

    ysmGlbFree((dvoid *) we);
  }
  return MNSTS_NORMAL;
}
