/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yr0util.h - Private utilities for the runtime IFR
 *
 * NOTES
 * This is not in yr0.h because it pulls in things like yoorb.h and
 * yridl.h which I'd rather not inflict on the repository as whole.
 *
 * HISTORY
 * 11/20/96 kcoleman	Support for yr::intfdef
 * 04/22/96 kcoleman	Change tracing in context to a level, use yeev.
 * 01/29/96 kcoleman	Extended yrmgrctx to clean up stuff for sig handling
 * 10/27/95 kcoleman	Added stuff for yrwrite, yrread
 * 07/14/95 kcoleman	Creation
 */

#ifndef YR0UTIL_ORACLE
#define YR0UTIL_ORACLE

#ifndef YRTYPES_ORACLE
#include <yr.h>
#endif
#ifndef YRCORBA_IDL
#include <yrcorba.h>
#endif
#ifndef YOORB_ORACLE
#include <yoorb.h>
#endif
#ifndef YR0_ORACLE
#include <yr0.h>
#endif
#ifndef YEEV_ORACLE
#include <yeev.h>
#endif


void yrMergeFile(yrldblk* data, ub4 nobjs, boolean externok);
void yrFreeMergeData( yrldblk* data, ub4 nobj);
yslst* yrmgrLoad( yrobj* repository, CONST char* path);
void yrmgrReportLoadConflict( dvoid* err, ub4 severity);


/* --------------------------------------------------------------------- */
/*
 * yrCreateCORBA - Create a CORBA object to correspond to this yrobj.
 *
 * Uses yoCreate to create an object of the appropriate CORBA IFR type
 * based on the obj tag. e.g. yrdkInterface yields a CORBA::InterfaceDef
 * object. The state on the CORBA object points back to <obj>.
 */

CORBA_IRObject yrCreateCORBA( yrobj* obj);


/* --------------------------------------------------------------------- */
/*
 * yrCORBAtoYR - Map a CORBA object it's yrobj. <or> should be of
 * type CORBA::IRObject or an type inherited from it.
 *
 * This operation is not valid on loosely bound object references as
 * the object must have state, as created by yrCreateCORBA.
 */
yrobj* yrCORBAtoYR( CORBA_IRObject or);


/* --------------------------------------------------------------------- */
/*
 * yrYRtoCORBA - Map a yrobj to it's corresponding CORBA object. 
 *
 * If you're going to return the result to a client, don't forget to
 * call yoDuplicate on it.
 */
CORBA_IRObject yrYRtoCORBA( yrobj* obj);


/* --------------------------------------------------------------------- */
/*
 * yrObjListToSeq - Convert a yslst of CORBA objects into a sequence.
 *
 * Can be used on a list of any interface type. <seq> should be a
 * previously allocated unbound sequence. The buffer will be 
 * allocated by this function using yoAlloc.
 */

void yrObjListToSeq( yslst* list, yr_objseq* seq);


/* --------------------------------------------------------------------- */
/*
 * yrStructMbrsToSeq - Convert a yslst of yrstrmbr's into a sequence
 *   of CORBA::StructMembers.
 *
 * This is in here because it is used for both structs and exceptions.
 * <seq> should be a previously allocated unbound sequence. The buffer
 * will be allocated by this function using yoAlloc.
 */

void yrStructMbrsToSeq( yslst* mbrs, CORBA_StructMemberSeq* seq);


/* --------------------------------------------------------------------- */
/*
 * yrCopyTypeCode - Create a yoAlloc'd cop of <obj>'s TypeCode.
 */
yotk* yrCopyTypeCode( yrobj* obj);


/* --------------------------------------------------------------------- */
/*
 * yrIsA - Underlying recursive implementation of CORBA::InterfaceDef::IsA
 * 
 * Both <obj> and <target> should be yrdkInterface objects.
 * Returns TRUE if <obj> is of type <target> or inherited from <target>
 * either directly or indirectly.
 */

boolean yrIsA( yrobj* obj, yrobj* target);


/* --------------------------------------------------------------------- */
/*
 * yrGetCORBA - returns the CORBA object which corresponds to this yrobj.
 */

CORBA_IRObject yrGetCORBA( yrobj* obj);    /* really CORBA_IRObject */

/* --------------------------------------------------------------------- */
/*
 * Implementation id's for the various bits and pieces of the CORBA
 * IFR interfaces.
 */
externref ysidDecl(CORBA_Repository_implid);
externref ysidDecl(CORBA_AttributeDef_implid);
externref ysidDecl(CORBA_ConstantDef_implid);
externref ysidDecl(CORBA_ExceptionDef_implid);
externref ysidDecl(CORBA_InterfaceDef_implid);
externref ysidDecl(CORBA_ModuleDef_implid);
externref ysidDecl(CORBA_OperationDef_implid);
externref ysidDecl(CORBA_TypedefDef_implid);
externref ysidDecl(CORBA_AliasDef_implid);
externref ysidDecl(CORBA_StructDef_implid);
externref ysidDecl(CORBA_UnionDef_implid);
externref ysidDecl(CORBA_EnumDef_implid);
externref ysidDecl(CORBA_PrimitiveDef_implid);
externref ysidDecl(CORBA_StringDef_implid);
externref ysidDecl(CORBA_SequenceDef_implid);
externref ysidDecl(CORBA_ArrayDef_implid);
externref ysidDecl(CORBA_IRObject_implid);
externref ysidDecl(CORBA_Container_implid);
externref ysidDecl(CORBA_Contained_implid);
externref ysidDecl(CORBA_IDLType_implid);

externref ysidDecl(YR_EX_UNIMPLEMENTED);

/* --------------------------------------------------------------------- */
/*
 * yrmgrctx - IFR Manager context definition. Used only by IFR server.
 */
typedef struct yrmgrctx
{
  yrobj* repository;           /* The root of the repository tree */
  yslst* loadlst;              /* list of char*, files loaded into IFR */
  sword trace;                 /* IFR tracing level. 0 == not enabled */
  char* tag;                   /* Implementation id this server runs */
  boolean servicing;           /* TRUE if servicing requests. Needed so we */
                               /*   what needs tearing down on SIGTERM. */
  yeev logger;                 /* log event handler for err reporting */
} yrmgrctx;

#define YR_SET_IMPL(intf, stateless, state) \
  yoSetImpl( intf ## __id, \
             intf ## _implid, \
             intf ## __stubs, \
             (dvoid*)&intf ## __impl, \
             (yoload)0, (stateless), (dvoid*) (state))
 
#define YR_IMPL_READY( intf, queue) \
  yoImplReady( intf ## __id, intf ## _implid, (ysque*)(queue))
 
#define YR_IMPL_DEACTIVATE( intf)  \
  yoImplDeactivate( intf ## __id, intf ## _implid)
 
void yrmgrInit( yrmgrctx* ctx);
void yrmgrTerm( yrmgrctx* ctx);

void yrdiiInit( yrobj* repository, CONST char* tag);
void yrdiiTerm( CONST char* tag);

/* --------------------------------------------------------------------- */
void Init_CORBA_Repository( yrobj* rep);
void Init_CORBA_AttributeDef(void);
void Init_CORBA_ConstantDef(void);
void Init_CORBA_ExceptionDef(void);
void Init_CORBA_InterfaceDef(void);
void Init_CORBA_ModuleDef(void);
void Init_CORBA_OperationDef(void);
void Init_CORBA_TypedefDef(void);
void Init_CORBA_AliasDef(void);
void Init_CORBA_StructDef(void);
void Init_CORBA_UnionDef(void);
void Init_CORBA_EnumDef(void);
void Init_CORBA_PrimitiveDef(void);
void Init_CORBA_StringDef(void);
void Init_CORBA_SequenceDef(void);
void Init_CORBA_ArrayDef(void);
void Init_CORBA_IRObject(void);
void Init_CORBA_Container(void);
void Init_CORBA_Contained(void);
void Init_CORBA_IDLType(void);
void Init_yr_intfdef(yrobj* rep);

void Term_CORBA_Repository(void);
void Term_CORBA_AttributeDef(void);
void Term_CORBA_ConstantDef(void);
void Term_CORBA_ExceptionDef(void);
void Term_CORBA_InterfaceDef(void);
void Term_CORBA_ModuleDef(void);
void Term_CORBA_OperationDef(void);
void Term_CORBA_TypedefDef(void);
void Term_CORBA_AliasDef(void);
void Term_CORBA_StructDef(void);
void Term_CORBA_UnionDef(void);
void Term_CORBA_EnumDef(void);
void Term_CORBA_PrimitiveDef(void);
void Term_CORBA_StringDef(void);
void Term_CORBA_SequenceDef(void);
void Term_CORBA_ArrayDef(void);
void Term_CORBA_IRObject(void);
void Term_CORBA_Container(void);
void Term_CORBA_Contained(void);
void Term_CORBA_IDLType(void);
void Term_yr_intfdef(void);

/*
 * yrDefKindToYrdk, yrdkToDefKind - Mapping between a yrdk (see yr.h) value 
 *   and CORBA::DefinitionKind
 *
 * There is not necessarily a one-to-one mapping between these two things,
 * not least because CORBA doesn't guarantee anything about the values of
 * IDL enumeration types, which is what CORBA::DefinitionKind is. Also,
 * those wild and crazy guys at OMG may add enums to CORBA::DefinitionKind
 * that interfere with values we're already using internally.
 */
yrdk yrDefKindToYrdk ( CORBA_DefinitionKind defkind);
CORBA_DefinitionKind yrdkToDefKind( yrdk kind);

/*
 * yrPrimKindToYrpk, yrpkToPrimKind - Mapping between yrpk and
 *   CORBA::PrimitiveKind. 
 * See note above about yrdk/CORBA::DefinitionKind.
 */
yrpk yrPrimKindToYrpk( CORBA_PrimitiveKind primkind);
CORBA_PrimitiveKind yrpkToPrimKind( yrpk kind);

/*
 * yrExDescription - Build a CORBA::ExceptionDescription
 *
 * This silly thing needs to be public because it is needed by both
 * the obvious (CORBA::ExceptionDef::describe) and the not-so-obvious
 * (CORBA::OperationDef::describe).
 */
void yrExDescription(CORBA_ExceptionDescription* noreg desc, 
                CORBA_ExceptionDef ex, yoenv* ev);
#endif /* YR0UTIL_ORACLE */
