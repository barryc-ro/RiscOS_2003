/* Copyright (c) 1994 by Oracle Corporation.  All Rights Reserved.
 *
 * mna.c - OMN Address Manager
 *
 * REVISIONS
 * jolkin    08/12/94  Creation of Version 2.1
 * jolkin    04/20/94  Creation of Version 2.0
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNI_ORACLE
#include <mni.h>
#endif

/*
 * Type Definitions
 */
typedef struct mnalcl  mnalcl;                            /* local addresses */
typedef struct mnadesc mnadesc;                /* address request descriptor */
typedef struct mnatdd  mnatdd;                        /* teardown descriptor */
typedef struct mnad mnad;                                /* death subscriber */
typedef struct mnadc mnadc;                /* death subscriber callback info */

#define MNAROWS  256                            /* # rows in host hash table */

struct mnad
{
  mna target;                                       /* process being watched */
  mnadc *calls;                                /* semaphores to set on death */
  mnad *next;                                            /* hash table chain */
  mnad *prev;
};

struct mnadc
{
  mnsem *sem;
  mnadc *next;
};

struct mnactx
{
  mnrte  *hosts[MNAROWS];                              /* host routing table */
  mnrte  *nets;                                               /* subnet list */
  mnalcl *locals;                            /* addresses owned by this node */
  mnaDeathH mortH;                           /* called when an address dies */
  dvoid *mortP;                       /* pointer given when mortH is invoked */
  mnp *dport;                                          /* process death port */
  mna  dfrom;                            /* address sending the death notice */
  ub1  dbuf[MNADPLEN];                                /* death notice buffer */
  mnad *targets[MNAROWS];
};

struct mnalcl
{
  mnalcl *next;                                             /* next in chain */
  mna     addr;                                             /* local address */
  mnp    *port;                                               /* port handle */
  mnnio  *nio;                                                 /* NIO handle */
};

struct mnadesc
{
  mna   *addr;
  mnbv   bv;
  ub4    cnt;
  ub1    buf[sizeof(sb4) + sizeof(mna)];
  mnsem *sem;
};

struct mnatdd
{
  mna     addr;
  mnnio  *nio;
  mnalcl *scl;
  mnsem  *sem;
};

STATICF void mnaDeathWatchComp(mnctx *ctx, mnad **hb, mnad *d, sb4 sts);
STATICF void mnaDeathRecv(dvoid *usrp, sb4 val);

/*
 * mnaInit - initialize the address manager
 *   The list of NIOs is processed.  If gtwy is non-null, then we also
 *   get addresses for all the NIOs.
 */
void mnaInit(mnctx *ctx, mnnio **nios, ub4 nnio, mnnpa *gtwy)
{
  mnactx *actx;
  ub4     i, rcnt, icnt;
  mnnio  *gwnio;
  mna     addr;
  mnalcl *lcl;

  /* initialize the address context */
  ctx->actx = actx = (mnactx *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnactx));
  DISCARD memset(actx, 0, sizeof(mnactx));
  gwnio = (mnnio *) 0;

  DISCARD memset(&addr, 0, sizeof(mna));
  addr.bits[5] = 1;

  /* process the NIOs */
  for (i = rcnt = icnt = 0; i < nnio; i++)
    {
      /* initialize the NIO */
      mnnNewNio(ctx, nios[i]);

      /* if there is no gateway, we need to set the subnet of the NIO
       * to something non-zero, because that happens to mean that mnaIsDest()
       * will accept any packet.
       */
      if (!gtwy)
	mnnSetSubnet(nios[i], &addr);

      /* select a gateway NIO if possible */
      if (gtwy && !gwnio && (nios[i]->flags & MNNFLG_SEND) &&
	  !memcmp(gtwy->family, nios[i]->pa.family, sizeof(gtwy->family)))
	gwnio = nios[i];

      if ((nios[i]->flags & MNNFLG_RECV) &&
	  (nios[i]->recv || (nios[i]->flags & MNNFLG_INTR)))
	{
	  rcnt++;

	  if (nios[i]->flags & MNNFLG_INTR)
	    icnt++;
	}
    }

  /* interrupt-based NIOs are present */
  if (icnt)
    ctx->flags |= MNFLG_INTR;

  /* multiple non-interrupted-based NIOs are present */
  if (rcnt - icnt > 1)
    {
      mnPrint(MNLWARN, "NIO strobing enabled");
      ctx->flags |= MNFLG_STROBE;
    }

  /* find the default receiver; choose a non-interrupt-based one if possible */
  for (i = 0; i < nnio && !ctx->rnio; i++)
    if (nios[i]->flags & MNNFLG_RECV)
      if (rcnt == icnt || !(nios[i]->flags & MNNFLG_INTR))
	ctx->rnio = nios[i];

  /* check the default receiver selected */
  if (!ctx->rnio)
    mnPrint(MNLFATAL, "no NIO capable of receiving was found");
  else if (!(ctx->rnio->flags & MNNFLG_INTR))
    mnPrint(MNLINFO, "Media Net will use an NIO recv() call to block");
  else
    mnPrint(MNLINFO, "Media Net will use a pause() call to block");

  /* start the route reaper */
  DISCARD mnTimer(MNARTEHB, mnaRouteReaper, (dvoid *) 0);

  /* if we don't have a gateway, we are done */
  if (!gtwy)
    return;

  /* insert default route */
  mnaClear(&addr);
  DISCARD mnaInsertRoute(ctx, &addr, (ub4) 0, gwnio, gtwy,
			 MNAFLG_PERM | MNAFLG_SELF);

  /* perform address requests as needed */
  for (i = 0; i < nnio; i++)
    if ((nios[i]->flags & MNNFLG_RECV) ||
	((nios[i]->flags & MNNFLG_CIRC) && (nios[i]->flags & MNNFLG_SEND)))
      {
	mnaClear(&addr);
	if (mnaRequest(ctx, &addr, (mnHandler) 0, (mnsem *) 0))
	  mnPrint(MNLFATAL, "could not contact address server");

	mnnSetSubnet(nios[i], &addr);

	if ((nios[i]->flags & MNNFLG_CIRC) && (nios[i]->flags & MNNFLG_SEND))
	  DISCARD mnaInsertRoute(ctx, &addr, (ub4) 0,
				 nios[i], &nios[i]->pa, MNAFLG_PERM);

	/* create local route */
	lcl = (mnalcl *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnalcl));
	mnaCopy(&lcl->addr, &addr);
	lcl->port = (mnp *) 0;
	lcl->nio = nios[i];

	lcl->next = actx->locals;
	actx->locals = lcl;
      }

  /* create & post read on process death port */
  DISCARD mnAddr(&addr,MNADEATHPORT);
  actx->dport = mnOpen(MNPROTO_MESSAGE);
  DISCARD mnBind(actx->dport,&addr);
  DISCARD mnRecv(actx->dport,&actx->dfrom,actx->dbuf,MNADPLEN,(ub4)0,
                 mnaDeathRecv,(dvoid *)actx);
}

/*
 * mnaTerm - terminate the address manager
 */
void mnaTerm(mnctx *ctx)
{
  mnactx *actx;
  mnnio  *scn;
  mnalcl *scl;
  mnrte  *scr;
  mnad   *d,*nd;
  mnadc  *c,*nc;
  mna     asaddr;
  ub4     i;

  actx = ctx->actx;
/*  if (actx->dport)
    mnClose(actx->dport); */

  /* get rid of all pending process death watches */
  for(i = 0; i < MNAROWS; i++)
    for(d = actx->targets[i]; d ; d = nd)
    {
      for(c = d->calls; c; c = nc)
      {
        mneSet(ctx, c->sem, MNERR_DISCONN, TRUE);
        nc = c->next;
        mnmFree(ctx, (dvoid *)c);
      }
      nd = d->next;
      mnmFree(ctx, (dvoid *)d);
    }

  /* deallocate all allocated addresses */
  for (scl = actx->locals; scl; scl = actx->locals)
    {
      DISCARD mnAddr(&asaddr, MNARSADDR);
      if (!mnaEq(&scl->addr, &asaddr))
	DISCARD mnoSend(ctx, MNOTYP_ADDRRELEASE, &asaddr, &scl->addr);

      actx->locals = scl->next;
      mnmFree(ctx, (dvoid *) scl);
    }

  /* close down all NIOs */
  while (ctx->nios)
    {
      scn = ctx->nios;
      ctx->nios = mnnNextNio(ctx->nios);

      mnnFreeNio(ctx, scn);
    }

  /* free all routes */
  for (i = 0; i < MNAROWS; i++)
    for (scr = actx->hosts[i]; scr; scr = actx->hosts[i])
      {
	actx->hosts[i] = scr->next;
	mnmFree(ctx, (dvoid *) scr);
      }

  /* free all subnets */
  for (scr = actx->nets; scr; scr = actx->nets)
    {
      actx->nets = scr->next;
      mnmFree(ctx, (dvoid *) scr);
    }

  mnmFree(ctx, (dvoid *) actx);
}

/*
 * mnaTeardown - teardown an existing NIO
 */
void mnaTeardown(mnctx *ctx, mnnio *nio, mnHandler handler, dvoid *usrp)
{
  mnactx *actx;
  boolean headend;
  mnalcl *scl;
  mna     addr, asaddr;
  mnrte  *rte;
  mnsem  *sem;
  mnatdd *desc;
  sb4     sts;

  sem = mneMakeSem(ctx, handler, usrp);

  actx = ctx->actx;
  headend = ((nio->flags & MNNFLG_CIRC) && (nio->flags & MNNFLG_SEND));

  /* release address */
  mnnSubnet(nio, &addr);
  for (scl = actx->locals; scl && !mnaEq(&scl->addr, &addr); scl = scl->next) ;
  if (!scl)
    {
      mneSet(ctx, sem, 0, TRUE);
      return;
    }

  DISCARD mnAddr(&asaddr, MNARSADDR);
  DISCARD mnoSend(ctx, MNOTYP_ADDRRELEASE, &asaddr, &addr);

  /* delete route (if head-end of a circuit) */
  if (headend)
    {
      rte = mnaFindRoute(ctx, &addr);
      if (rte && mnaEq(&addr, &rte->addr))
	mnaDeleteRoute(ctx, rte);
    }

  /* issue new address request */
  desc = (mnatdd *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnatdd));
  mnaClear(&desc->addr);
  desc->nio = nio;
  desc->scl = scl;
  desc->sem = sem;

  DISCARD mnaRequest(ctx, &desc->addr, mnaReopen, (dvoid *) desc);

  if (!handler && !usrp)
    {
      sts = mnSemWait(sem);
      mnSemFree(sem);
    }
}

void mnaReopen(dvoid *usrp, sb4 sts)
{
  mnctx  *ctx;
  boolean headend;
  mnatdd *desc;

  ctx  = mnGlbCtx;
  desc = (mnatdd *) usrp;

  if (sts)
    mnPrint(MNLFATAL, "could not contact address server");

  mnnSetSubnet(desc->nio, &desc->addr);

  /* insert new route (if head-end of a circuit) */
  headend = ((desc->nio->flags & MNNFLG_CIRC) &&
	     (desc->nio->flags & MNNFLG_SEND));
  if (headend)
    DISCARD mnaInsertRoute(ctx, &desc->addr, (ub4) 0, desc->nio,
			   &desc->nio->pa, MNAFLG_PERM);

  /* update local address descriptor */
  mnaCopy(&desc->scl->addr, &desc->addr);

  mneSet(ctx, desc->sem, (sb4) 0, TRUE);
  mnmFree(ctx, (dvoid *) desc);
}

/*
 * mnaIsDest - check to see if the destination address identifies this node
 *   If the destination is a well-known address, then we check our list of
 *   addresses allocated by this node; otherwise, the destination address
 *   must match the NIO address unless the NIO address is not yet defined.
 */
boolean mnaIsDest(mnctx *ctx, mna *nioaddr, mna *dst)
{
  mnactx *actx;
  mnalcl *scl;
  mna     claddr;

  actx = ctx->actx;
  mnaClear(&claddr);

  /* if the destination is a well-known address, check our address list */
  if (mnaWellKnown(dst))
    {
      for (scl = ctx->actx->locals; scl && !mnaEq(&scl->addr, dst);
	   scl = scl->next) ;
      return (scl != 0);
    }
  else if (mnaNetEq(nioaddr, &claddr))
    return TRUE;
  else
    return mnaNetEq(nioaddr, dst);
}

/*
 * mnaRequest - request an address from the address server
 *   addr is usually clear but may actually contain a well-known address
 *   if that is what is needed.  The reply is written back out to addr
 *   and 0 is returned.  Otherwise, it will return an error either from
 *   the mnoSend() or MNERR_TIMEOUT if there was no reply. 
 */
sb4 mnaRequest(mnctx *ctx, mna *addr, mnHandler handler, dvoid *usrp)
{
  mnsem   *sem;
  mnadesc *desc;
  sb4      sts;

  sem = mneMakeSem(ctx, handler, usrp);

  sts = mnoSendAddrRequest(ctx, addr);
  if (sts >= 0)
    {
      desc = (mnadesc *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnadesc));
      desc->addr = addr;
      desc->bv.len = sizeof(desc->buf);
      desc->bv.buf = desc->buf;
      desc->cnt = 0;
      desc->sem = sem;
      DISCARD mnoRecv(ctx, (mna *) 0, &desc->bv, (ub4) 1, 5000,
		      mnaRequestHandle, (dvoid *) desc);
    }
  else
    mneSet(ctx, sem, sts, TRUE);

  if (!handler && !usrp)
    {
      sts = mnSemWait(sem);
      mnSemFree(sem);
    }
  else
    sts = 0;
  return sts;
}

void mnaRequestHandle(dvoid *usrp, sb4 sts)
{
  mnctx   *ctx;
  mnadesc *desc;

  ctx = mnGlbCtx;

  desc = (mnadesc *) usrp;
  if (sts != MNOTYP_ADDRREPLY)
    mnPrint(MNLWARN, "address request failure: sts=%ld, cnt=%d",
	    sts, desc->cnt);
  else
    {
      sts = smnNtoh4(*((sb4 *) desc->buf));
      if (!sts)
	mnaCopy(desc->addr, (mna *) (desc->buf + sizeof(sb4)));
    }

  if (sts == MNERR_TIMEOUT && desc->cnt < 3)
    {
      mnoSendAddrRequest(ctx, desc->addr);
      desc->cnt++;
      mnoRecv(ctx, (mna *) 0, &desc->bv, (ub4) 1, 5000,
	      mnaRequestHandle, (dvoid *) desc);
    }
  else
    {
      mneSet(ctx, desc->sem, sts, TRUE);
      mnmFree(ctx, (dvoid *) desc);
    }
}

/*
 * mnaInsertRoute - inserts a route into the routing table
 *   addr is a Media Net NIO address or subnet.  If it is a subnet, then
 *   mask should probably have some non-zero value (unless this is the
 *   default route).  nio and pa specify the route to use.  flags may
 *   be 0 for a normal route, MNAFLG_PERM for a permanent route (one
 *   that should not be cleaned by the reaper), and/or MNAFLG_SELF if
 *   this address server is an address server and this route identifies
 *   the subnet that the address server is responsible for (this is not
 *   yet used).
 */
mnrte *mnaInsertRoute(mnctx *ctx, mna *addr, ub4 mask, mnnio *nio, mnnpa *pa,
		      ub4 flags)
{
  mnactx *actx;
  mnrte  *rte;
  ub4     key, i;
  mna     claddr;

  actx = ctx->actx;

  /* debugging attempt */
  if (!(flags & MNAFLG_SELF))
    {
      mnaClear(&claddr);
      if (mnaEq(&claddr, addr))
	{
	  return mnaFindRoute(ctx, addr);
	  /* mnPrint(MNLWARN, "about to insert a default route by mistake"); */
	}
    }

  /* initialize route structure */
  rte = (mnrte *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnrte));

  rte->prev = (mnrte *) 0;
  mnaCopy(&rte->addr, addr);
  rte->mask = mask;
  rte->nio = nio;
  CPSTRUCT(rte->pa, *pa);
  rte->refcnt = 0;
  rte->flags = flags;
  rte->itime = smnClock();

  /* is it a subnet or a host? */
  if (!mnaWellKnown(addr) && mnaIsNet(addr))
    {
      /* insert into net list */
      if (actx->nets)
	actx->nets->prev = rte;
      rte->next = actx->nets;
      actx->nets = rte;
    }
  else
    {
      /* insert into hash table */
      for (key = i = 0; i < 6; i++)
	key += addr->bits[i];

      key &= (MNAROWS - 1);

      if (actx->hosts[key])
	actx->hosts[key]->prev = rte;
      rte->next = actx->hosts[key];
      actx->hosts[key] = rte;
    }

  return rte;
}

/*
 * mnaFindRoute - selects a route for the given destination
 *   First, the destination is searched for directly in the hosts table.
 *   If a host is not found, then we will scan our (presumably much
 *   smaller) subnet list.  Finally, if this is an address server
 *   and the subnet selected points back to this address server, then
 *   the packet clearly has no reachable destination.
 */
mnrte *mnaFindRoute(mnctx *ctx, mna *dst)
{
  mnactx *actx;
  mnrte  *scr;
  ub4     key, i;

  actx = ctx->actx;

  /* first, search in hash table for host */
  for (key = i = 0; i < 6; i++)
    key += dst->bits[i];

  key &= (MNAROWS - 1);

  if (mnaWellKnown(dst))
    for (scr = actx->hosts[key];
	 scr && (!mnaEq(dst, &scr->addr) || (scr->flags & MNAFLG_DELETE));
	 scr = scr->next) ;
  else
    for (scr = actx->hosts[key];
	 scr && (!mnaNetEq(dst, &scr->addr) || (scr->flags & MNAFLG_DELETE));
	 scr = scr->next) ;

  /* now search in net list for subnet */
  if (!scr)
    for (scr = actx->nets; scr; scr = scr->next)
      if ((sysxGetUaB4(dst->bits) & scr->mask) == sysxGetUaB4(scr->addr.bits))
	break;

  return scr;
}

/*
 * mnaDeleteRoute - delete a route
 *   No questions asked, this routine deletes a route out of the routing
 *   table.  It is used solely by the address server to remove routes
 *   that are explicitly ADDRRELEASEd.
 */
void mnaDeleteRoute(mnctx *ctx, mnrte *rte)
{
  mnactx *actx;
  ub4     key, i;
  char    tmpbuf[32];

  actx = ctx->actx;

  /* DEATH: post death notification if address server */
  if(actx->mortH)
    (*actx->mortH)(actx->mortP, &rte->addr, rte);

  /* don't delete if the refcnt is non-zero, no matter what anyone says */
  if (rte->refcnt)
    {
      rte->flags |= MNAFLG_DELETE;
      return;
    }

  mnAtos(&rte->addr, tmpbuf, 32);
  mnPrint(MNLWARN, "deleting route for address %s", tmpbuf);

  if (rte->next)
    rte->next->prev = rte->prev;

  if (rte->prev)
    rte->prev->next = rte->next;
  else
    {
      /* we are at the head of a list, but is it a hash table row,
       * or is it the subnet list?
       */
      if (!mnaWellKnown(&rte->addr) && mnaIsNet(&rte->addr))
	actx->nets = rte->next;
      else
	{
	  for (key = i = 0; i < 6; i++)
	    key += rte->addr.bits[i];

	  key &= (MNAROWS - 1);

	  actx->hosts[key] = rte->next;
	}
    }

  mnmFree(ctx, (dvoid *) rte);
}

/*
 * mnaRouteReaper - route reaper
 *   The route reaper does two things; first, it cleans up all expired
 *   routes that are no longer referenced.  Second, it generates heartbeats
 *   for all locally acquired addresses.  This reaper must always be running.
 */
/* ARGSUSED */
void mnaRouteReaper(dvoid *ptr, sb4 val)
{
  mnctx  *ctx;
  mnactx *actx;
  ub4     i;
  sb4     current;
  mnrte  *prev, *scr, *tmp;
  mna     asaddr, dwaddr;
  mnalcl *scl;
  char    out[MNAMAXLEN];

  ctx = mnGlbCtx;
  current = (sb4) smnClock();
  mnPrint(MNLINFO, "reaping routes");

  /* clean up routes in this routing table */
  actx = ctx->actx;
  for (i = 0; i < MNAROWS; i++)
    for (prev = (mnrte *) 0, scr = actx->hosts[i]; scr; )
      {
	/* make sure that it is not in use, not PERManent, and that it is old
	 * enough
	 */
	if (!scr->refcnt && !(scr->flags & ~MNAFLG_DELETE) &&
	    smnModSub(current, scr->itime) > MNARTELIFE)
	  {
	    mnAtos(&scr->addr, out, MNAMAXLEN);          /* FIXME? dead code */
	    mnPrint(MNLWARN, "reaping %s: current=%d, itime=%d",
		out, current, scr->itime);


	    if (scr->next)
	      scr->next->prev = scr->prev;

	    if (prev)
	      prev->next = scr->next;
	    else
	      actx->hosts[i] = scr->next;

	    tmp = scr;
	    scr = scr->next;

            /* DEATH: post death notification if address server. */
            if(actx->mortH)
              (*actx->mortH)(actx->mortP, &tmp->addr, tmp);

	    mnmFree(ctx, (dvoid *) tmp);
	  }
	else
	  prev = scr, scr = scr->next;
      }

  /* generate heartbeats for all local addresses except the address server
   * itself
   */
  DISCARD mnAddr(&asaddr, MNARSADDR);
  DISCARD mnAddr(&dwaddr, MNADEATHADDR);
  for (scl = actx->locals; scl; scl = scl->next)
    if (!mnaEq(&scl->addr, &asaddr) && !mnaEq(&scl->addr, &dwaddr))
      DISCARD mnoSend(ctx, MNOTYP_ADDRHB, &asaddr, &scl->addr);

  /* restart route reaper timer */
  DISCARD mnTimer(MNARTEHB, mnaRouteReaper, (dvoid *) 0);
}

/*
 * mnaBind - bind an address to a port
 *  addr is the address to bind.  port is the port to which to bind it.
 *  This is only to get well-known addresses associated with a port, so
 *  that mnaIsDest() will accept the packets.  If req is TRUE, this will
 *  actually cause an address request; otherwise, it binds it silently.
 *  Returns 0 on success or any status from mnaRequest.
 */
sb4 mnaBind(mnctx *ctx, mna *addr, mnp *port, boolean req)
{
  mnactx *actx;
  sb4     sts;
  mnalcl *lcl;

  actx = ctx->actx;

  if (req)
    if (sts = mnaRequest(ctx, addr, (mnHandler) 0, (dvoid *) 0))
      return sts;

  lcl = (mnalcl *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnalcl));
  mnaCopy(&lcl->addr, addr);
  lcl->port = port;
  lcl->nio = (mnnio *) 0;

  lcl->next = actx->locals;
  actx->locals = lcl;

  return 0;
}

/*
 * mnaFind - find a port bound to a well-known address
 */
mnp *mnaFind(mnctx *ctx, mna *addr)
{
  mnactx *actx;
  mnalcl *scl;

  actx = ctx->actx;

  for (scl = actx->locals; scl && !mnaEq(&scl->addr, addr); scl = scl->next) ;
  return (scl ? scl->port : (mnp *) 0);
}

/*
 * mnaUnbind - unbind a port from a well-known address
 */
void mnaUnbind(mnctx *ctx, mnp *port)
{
  mnactx *actx;
  mnalcl *prl, *scl;
  mna     asaddr;

  actx = ctx->actx;

  for (prl = (mnalcl *) 0, scl = actx->locals;
       scl && scl->port != port;
       prl = scl, scl = scl->next) ;

  if (scl)
    {
      if (prl)
	prl->next = scl->next;
      else
	actx->locals = scl->next;

      DISCARD mnAddr(&asaddr, MNARSADDR);
      if (!mnaEq(&scl->addr, &asaddr))
	DISCARD mnoSend(ctx, MNOTYP_ADDRRELEASE, &asaddr, &scl->addr);
      mnmFree(ctx, (dvoid *) scl);
    }
}

/*
 * mnaSetDeath - Set the address death handler.  Only MNARS should be making
 *   this call.
 */
void mnaSetDeath(mnctx *ctx, mnaDeathH mortH, dvoid *mortP)
{
  mnactx *actx = ctx->actx;

  actx->mortH = mortH;
  actx->mortP = mortP;
}

/*
 * mnaDeathRecv - handler for posted async death port read
 */
STATICF void mnaDeathRecv(dvoid *usrp, sb4 val)
{
  mnctx *ctx;
  mnactx *actx = (mnactx *) usrp;
  ub1 *buf = actx->dbuf;
  ub1 type;
  mna target;
  ub4 i,key;
  mnad *d;
  sb4 sts;

  ctx = mnGlbCtx;

  if(val == MNADPLEN)
  {
    type = *buf;
    mnaCopy(&target,(mna *)(buf+1));
  
    switch(type)
    {
    case MNADT_DEAD:
      sts = 0;
      break;
    case MNADT_BADWATCH:
      sts = MNERR_BADADDR;
      break;
    default:
      sts = -1;
      break;
    }

    if(sts != -1)
    {
      for (key = i = 0; i < 6; i++)
        key += target.bits[i];
      key &= (MNAROWS - 1);

      for(d = actx->targets[key]; d; d = d->next)
        if(mnaEq(&d->target,&target)) break;
      if(d)                                        /* complete if we have em */
        mnaDeathWatchComp(ctx, actx->targets+key,d,sts);
    }
  }

  /* post another receive */
  DISCARD mnRecv(actx->dport,&actx->dfrom,actx->dbuf,MNADPLEN,(ub4)0,
                 mnaDeathRecv,(dvoid *)actx);
}

/*
 * mnaDeathWatchComp - completes death watches on a particular target.
 *   Frees all memory related to the target.
 */
STATICF void mnaDeathWatchComp(mnctx *ctx, mnad **hb, mnad *d, sb4 sts)
{
  mnadc *c, *nc;

  /* remove target from the hash table */
  if(d->next)
    d->next->prev = d->prev;
  if(d->prev)
    d->prev->next = d->next;
  else
    *hb = d->next;

  for(c = d->calls; c; c = nc)
  { 
    mneSet(ctx, c->sem, sts, TRUE);
    nc = c->next;
    mnmFree(ctx, (dvoid *)c);
  }
  mnmFree(ctx,(dvoid *)d);
}

sb4 mnDeathWatch(mna *addr, mnHandler handler, dvoid *usrp)
{
  mnctx *ctx;
  mnactx *actx;
  mna target, deathw;
  mnsem *sem = (mnsem *) 0;
  sb4 sts = 0;
  ub1 msg[MNADPLEN];
  ub4 key, i;
  mnad *d, *fnd;
  mnadc *c;

  ctx = mnGlbCtx;
  actx = ctx->actx;

  sem = mneMakeSem(ctx, handler, usrp);

  mnaNetCopy(&target,addr);                   /* extract the network portion */

  /* do we have it in the watch table ? */
  for (key = i = 0; i < 6; i++)
    key += target.bits[i];
  key &= (MNAROWS - 1);

  for(d = actx->targets[key]; d; d = d->next)
    if(mnaEq(&d->target,&target)) break;

  fnd = d;
  if(!d)
  {
    d = (mnad *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnad));
    CLRSTRUCT(*d);
    mnaCopy(&d->target,&target);
    d->next = actx->targets[key];
    actx->targets[key] = d;
    if(d->next) d->next->prev = d;
  }

  /* add to watch table */
  c = (mnadc *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnadc));
  c->sem = sem;
  c->next = d->calls;
  d->calls = c;

  /* send notification to MNARS if not in the watch table */
  if(!fnd)
  {
    mnAddr(&deathw,MNADEATHADDR);
    *msg = MNADT_WATCH;
    mnaCopy((mna *)(msg+1),&target);
    sts = mnSend(actx->dport,&deathw,msg,MNADPLEN,(mnHandler)0,(dvoid *)0);
    if(sts < 0)
    {
      fnd = d;
      for(d = actx->targets[key]; d && d != fnd; d = d->next);
      if(d)                                  /* only remove if still present */
        mnaDeathWatchComp(ctx,actx->targets+key,d,sts);
    }
  }

  if(!handler && !usrp)
  {
    sts = mnSemWait(sem);
    mnSemFree(sem);
  }
  else
    sts = 0;

  return sts;
}

sb4 mnDeathIgnore(mna *addr, dvoid *usrp)
{
  mnctx *ctx;
  mnactx *actx;
  mna target;
  ub4 key, i;
  mnad *d;
  mnadc *c, **pcp;
  ub1 msg[MNADPLEN];
  mna deathw;
  sb4 sts;

  ctx = mnGlbCtx;
  actx = ctx->actx;

  /* extract the net address */
  mnaNetCopy(&target,addr);

  /* do we have it in the watch table ? */
  for (key = i = 0; i < 6; i++)
    key += target.bits[i];
  key &= (MNAROWS - 1);

  for(d = actx->targets[key]; d; d = d->next)
    if(mnaEq(&d->target,&target)) break;

  if(d)
  {
    for(c = d->calls, pcp = &d->calls; c; pcp = &c->next, c = c->next)
      if(c->sem == usrp || mnSemGetUsrp(c->sem) == usrp) break;
    if(c)
    {
      *pcp = c->next;
      mneSet(ctx, c->sem, MNSTS_ABORTED, TRUE);
      mnmFree(ctx,(dvoid *)c);
    }
  }
  if(!d || !c)
    sts = MNERR_NOTFOUND;
  else
  {
    if(!d->calls)
    {
      if(d->next)
        d->next->prev = d->prev;
      if(d->prev)
        d->prev->next = d->next;
      else
        actx->targets[key] = d->next;
      mnmFree(ctx,(dvoid *)d);

      /* Let MNARS know we don't want to look anymore */
      mnAddr(&deathw,MNADEATHADDR);
      *msg = MNADT_RMWATCH;
      mnaCopy((mna *)(msg+1),&target);
      DISCARD mnSend(actx->dport,&deathw,msg,MNADPLEN,mnDiscard,(dvoid *)0);
    }
    else
      DISCARD mnIdle();

    sts = 0;
  }

  return sts;
}

/*
 * mnaStrtoul - convert string to unsigned integer
 *   Because only strtol() seems to be implemented everywhere (even within
 *   CORE), and because I must have conversion to unsigned longs, I am doing
 *   it myself.
 */
STATICF ub4 mnaStrtoul(const char *in, const char **out)
{
  ub4 base, v, d;

  /* determine the base */
  if (*in != '0')
    base = 10;
  else if (in[1] == 'x' || in[1] == 'X')
    {
      base = 16;
      in += 2;
    }
  else
    base = 8;

  v = 0;
  while (*in)
    {
      switch (*in)
	{
	case '0': d = 0; break; case '1': d = 1; break; case '2': d = 2; break;
	case '3': d = 3; break; case '4': d = 4; break; case '5': d = 5; break;
	case '6': d = 6; break; case '7': d = 7; break; case '8': d = 8; break;
	case '9': d = 9; break;
	case 'a': case 'A': d = 10; break; case 'b': case 'B': d = 11; break;
	case 'c': case 'C': d = 12; break; case 'd': case 'D': d = 13; break;
	case 'e': case 'E': d = 14; break; case 'f': case 'F': d = 15; break;
	default: d = 17; break;
	}

      if (d >= base)
	break;

      v = (v * base) + d;
      in++;
    }

  *out = in;
  return v;
}

/*
 * mnAddr - convert text to address
 */
sb4 mnAddr(mna *addr, const char *in)
{
  ub4 bytes[8], i;

  i = 0;
  do
    {
      if (i && *in == '.')
	in++;

      /* bytes[i++] = strtoul(in, &in, 0); */
      bytes[i++] = mnaStrtoul(in, &in);
    } while (i < 8 && *in == '.');

  if (*in || (i != 2 && i != 4))
    return MNERR_BADPARAM;

  if (i == 2)
    for (i = 0; i < 2; i++)
      sysxPutUaB4(&addr->bits[i * 4], bytes[i]);
  else
    for (i = 0; i < 4; i++)
      sysxPutUaB2(&addr->bits[i * 2], bytes[i]);

  return 0;
}

/*
 * mnAtos - convert address to text
 */
void mnAtos(mna *addr, char *out, size_t len)
{
  char buf[MNAMAXLEN];                         /* maximum buffer ever needed */

  DISCARD sprintf(buf, "%d.%d.%d.%d",
		  sysxGetUaB2(&addr->bits[0]),
		  sysxGetUaB2(&addr->bits[2]),
		  sysxGetUaB2(&addr->bits[4]),
		  sysxGetUaB2(&addr->bits[6]));

  DISCARD memcpy(out, buf, min(strlen(buf) + 1, len));
}

void mnaSetPort(mna *addr, ub2 prtno)
{
  mnaSetPortNum(addr, prtno);
}

