/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yrc.c - Oracle MOOSE Interface Repository Object Creation
 *
 * NOTES
 * Named types are added to the content list of their container (module,
 * interface, or repository). Anonymous types (sequences, arrays, and
 * strings) go on a list of anonymous types in the repository object,
 * rather than in the content list.
 *
 * Keeping the anonymous types off the repository content list keeps
 * them out of the way during lookups and more accurately reflects the
 * way the CORBA 2.0 Interface Repository specification works. 
 *
 * HISTORY
 * 02/27/96 kcoleman	Major roadwork for bug #336120: Structs and unions
 *                      are scopes and can have types defined inside them.
 * 02/01/96 kcoleman	Manage anonymous types differently
 * 10/23/95 kcoleman	Change yrid assignment to support pragmas
 * 06/??/95 kcoleman	Creation
@@ settle who allocates what in a consistent manner
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YR_ORACLE
#include <yr.h>
#endif
#ifndef YR0_ORACLE
#include <yr0.h>
#endif

STATICF void yrCreatePredefs( yrobj* repository);

/*
 * yrContainerAdd - add an item to an IFR container
 *
 * Interfaces, modules, and repositories are the obvious candidates for
 * this operation, but it can also be invoked on structs and unions in
 * those rare cases where some idiot has defined a type inside one (such
 * as a struct declared inside a struct).
 *
 * If <container> is an interface and <item> is either an operation or an
 * attribute, <item> is also added to the op/attr list of the interface.
 */
void yrContainerAdd( yrobj* container, yrobj* item)
{
  if ( yrIsContainer( container) )
  {
    if ( yrGetKind( container) == yrdkInterface )
    {
      if ( item->tag == yrdkOperation )
      {
        if ( !container->data.intfval.ops )
          container->data.intfval.ops = ysLstCreate();
        ysLstEnq( container->data.intfval.ops, (dvoid*) item);
      }
      else if ( item->tag == yrdkAttribute )
      {
        if ( !container->data.intfval.attrs )
          container->data.intfval.attrs = ysLstCreate();
        ysLstEnq( container->data.intfval.attrs, (dvoid*) item);
      }
      ysLstEnq( container->contents, (dvoid*) item);
    }
    else
    {
      ysLstEnq( container->contents, (dvoid*) item);
    }
  }
  else
    yseThrow(YR_EX_BADTYPE);
}

/* ---------------------------------------------------------------------- */
/*
 * yrCreateObj - allocate and initialize an IFR object
 *
 * If <tag> is not NULL, it is used to name the allocated storage
 */
yrobj* yrCreateObj(CONST char* tag)
{
  yrobj* result;

  result = (yrobj*) ysmGlbAlloc( sizeof(yrobj), tag ? tag : "yrobj");
  if ( result != (yrobj*) 0 )
    CLRSTRUCT(*result);
  return result;
}

/* ---------------------------------------------------------------------- */
yrobj *yrCreateString(yrobj *repository, ub4 bound)
{
  yrobj* newobj = (yrobj*) yrCreateObj("yrstring");

  newobj->tag = yrdkString;
  newobj->defined_in = repository;
  newobj->repository = repository->repository;
  newobj->data.strval.bound = bound;
  newobj->defined = TRUE;
  yrSetName( newobj, "");
  ysLstEnq( yrRepData(newobj->repository)->anon, (dvoid*) newobj);
  return newobj;
}

/* ---------------------------------------------------------------------- */
yrobj *yrCreateSequence(yrobj *repository, ub4 bound, yrobj *elmtype)
{
  yrobj* newobj = (yrobj*) yrCreateObj("yrseq");
  yrobj* etype;

  newobj->tag = yrdkSequence;
  newobj->defined_in = repository;
  newobj->repository = repository->repository;
  newobj->data.seqval.bound = bound;
  newobj->defined = TRUE;
  yrSetName( newobj, "");
  yrAssignId( repository, newobj, FALSE);
  ysLstEnq( yrRepData(newobj->repository)->anon, (dvoid*) newobj);

  /* for element type, use effective element type. Peers thru aliases. */
  for ( etype = elmtype;;)
  {
    if ( etype->tag == yrdkAlias )
    {
      if ( etype->data.aval.type->tag == yrdkArray )
        break;
      etype = etype->data.aval.type;
    }
    else
      break;
  }
  newobj->data.seqval.elmtype = etype;

  return newobj;
}

/* ---------------------------------------------------------------------- */

yrobj *yrCreateArray(yrobj *repository, ub4 length, yrobj *elmtype)
{
  yrobj* newobj = (yrobj*) yrCreateObj("yrarray");

  newobj->tag = yrdkArray;
  newobj->defined_in = repository;
  newobj->repository = repository->repository;
  newobj->data.arrval.length = length;
  newobj->data.arrval.elmtype = elmtype;
  newobj->defined = TRUE;
  yrSetName( newobj, "");
  yrAssignId( repository, newobj, FALSE);
  ysLstEnq( yrRepData(newobj->repository)->anon, (dvoid*) newobj);
  return newobj;
}

/* ---------------------------------------------------------------------- */
yrobj *yrCreateModule(yrobj *or, CONST char *name)
{
  yrobj* newobj = (yrobj*) yrCreateObj("yrmodule");

  newobj->tag = yrdkModule;
  newobj->defined_in = or;
  newobj->repository = or->repository;
  newobj->defined = TRUE;
  yrSetName( newobj, name);
  newobj->contents = ysLstCreate();
  yrContainerAdd( or, newobj);
  yrSetVersion( newobj, "1.0");
  yrAssignId( or, newobj, TRUE);
  if ( or->prefix )
    yrSetPrefix( newobj, or->prefix);

  return newobj;
}

/* ---------------------------------------------------------------------- */
yrobj *yrCreateConstant(yrobj *or, CONST char *name, yrobj *type, yoany *val)
{
  yrobj* newobj = (yrobj*) yrCreateObj("yrconst");

  newobj->tag = yrdkConstant;
  newobj->defined_in = or;
  newobj->repository = or->repository;
  newobj->defined = TRUE;
  yrSetName( newobj, name);
  newobj->data.cval.type = type;
  if ( val )	/* note that we cache the ptrs, don't duplicate */
    newobj->data.cval.val = *val;
  else
    newobj->data.cval.val._type = (yotk*)0;
  yrContainerAdd( or, newobj);
  yrSetVersion( newobj, "1.0");
  yrAssignId( or, newobj, TRUE);
  return newobj;
}

/* ---------------------------------------------------------------------- */
yrobj *yrCreateException(yrobj *or, CONST char *name, yslst *mbrs)
{
  yrobj* newobj = yrCreateStruct(or, name, mbrs);

  newobj->tag =  yrdkException; 
  return newobj;
}

/* ---------------------------------------------------------------------- */
yrobj *yrCreateStruct(yrobj *or, CONST char *name, yslst *mbrs)
{
  yrobj* newobj = (yrobj*) yrCreateObj("yrstruct");

  newobj->tag = yrdkStruct;
  newobj->defined_in = or;
  newobj->repository = or->repository;
  newobj->defined = TRUE;
  yrSetName( newobj, name);
  newobj->data.sval.mbrs = mbrs;
  newobj->contents = ysLstCreate();
  yrContainerAdd( or, newobj);
  yrSetVersion( newobj, "1.0");
  yrAssignId( or, newobj, TRUE);
  return newobj;
}

/* ---------------------------------------------------------------------- */
yrobj *yrCreateUnion(yrobj *or, CONST char *name, yrobj *disc, yslst *arms)
{
  yrobj* newobj = (yrobj*) yrCreateObj("yrunion");

  newobj->tag = yrdkUnion;
  newobj->defined_in = or;
  newobj->repository = or->repository;
  newobj->defined = TRUE;
  yrSetName( newobj, name);
  newobj->data.uval.disctype = disc;
  newobj->data.uval.arms = arms;
  newobj->contents = ysLstCreate();
  yrContainerAdd( or, newobj);
  yrSetVersion( newobj, "1.0");
  yrAssignId( or, newobj, TRUE);
  return newobj;
}

/* ---------------------------------------------------------------------- */
yrobj *yrCreateEnum(yrobj *or, CONST char *name, yslst *ids)
{
  yrobj* newobj = (yrobj*) yrCreateObj("yrenum");

  newobj->tag = yrdkEnum;
  newobj->defined_in = or;
  newobj->repository = or->repository;
  newobj->defined = TRUE;
  yrSetName( newobj, name);
  newobj->data.eval.mbrs = ids;
  yrContainerAdd( or, newobj);
  yrSetVersion( newobj, "1.0");
  yrAssignId( or, newobj, TRUE);
  return newobj;
}

/* ---------------------------------------------------------------------- */
yrobj *yrCreateAlias(yrobj *or, CONST char *name, yrobj *origtype)
{
  yrobj* newobj = (yrobj*) yrCreateObj("yralias");

  newobj->tag = yrdkAlias;
  newobj->defined_in = or;
  newobj->repository = or->repository;
  newobj->defined = TRUE;
  yrSetName( newobj, name);
  newobj->data.aval.type = origtype;
  yrContainerAdd( or, newobj);
  yrSetVersion( newobj, "1.0");
  yrAssignId( or, newobj, TRUE);
  return newobj;
}

/* ---------------------------------------------------------------------- */
yrobj *yrCreateInterface(yrobj *or, CONST char *name, yslst *bases)
{
  yrobj* newobj = (yrobj*) yrCreateObj("yrintf");

  newobj->tag = yrdkInterface;
  newobj->defined_in = or;
  newobj->repository = or->repository;
  newobj->defined = TRUE;
  yrSetName( newobj, name);
  newobj->data.intfval.bases = bases;
  newobj->contents = ysLstCreate();
  yrContainerAdd( or, newobj);
  yrSetVersion( newobj, "1.0");
  yrAssignId( or, newobj, TRUE);
  if ( or->prefix )
    yrSetPrefix( newobj, or->prefix);
  return newobj;
}

/* ---------------------------------------------------------------------- */
yrobj *yrCreateAttribute(yrobj *intf, CONST char *name, yrobj *type,
                         sword mode)
{
  yrobj* newobj = (yrobj*) yrCreateObj("yrattr");

  newobj->tag = yrdkAttribute;
  newobj->defined_in = intf;
  newobj->repository = intf->repository;
  newobj->defined = TRUE;
  yrSetName( newobj, name);
  newobj->data.attval.type = type;
  newobj->data.attval.mode = mode;
  yrContainerAdd( intf, newobj);
  yrSetVersion( newobj, "1.0");
  yrAssignId( intf, newobj, TRUE);
  return newobj;
}

/* ---------------------------------------------------------------------- */
yrobj *yrCreateOperation(yrobj *intf, CONST char *name, yrobj *rettype,
                         yslst *raises, yslst *pars, sword mode)
{
  yrobj* newobj = (yrobj*) yrCreateObj("yrop");

  newobj->tag = yrdkOperation;
  newobj->defined_in = intf;
  newobj->repository = intf->repository;
  newobj->defined = TRUE;
  yrSetName( newobj, name);
  newobj->data.opval.rettype = rettype;
  newobj->data.opval.raises = raises;
  newobj->data.opval.pars = pars;
  newobj->data.opval.mode = mode;
  yrContainerAdd( intf, newobj);
  yrSetVersion( newobj, "1.0");
  yrAssignId( intf, newobj, TRUE);
  return newobj;
}

/* ---------------------------------------------------------------------- */
yrobj* yrCreatePrimitive( yrobj* or, yrpk kind)
{
  yrobj* newobj = (yrobj*) yrCreateObj("yrprim");
  char* name;

  newobj->tag = yrdkPrimitive;
  newobj->defined_in = or->repository;
  newobj->repository = or->repository;
  newobj->data.pval.kind = kind;
  newobj->defined = TRUE;

  name = yrGetPrimitiveName(kind);
  yrSetName( newobj, name);
  ysmGlbFree(name);
  yrContainerAdd( or->repository, newobj);
  yrAssignId( or, newobj, FALSE);

  return newobj;
}

/* ---------------------------------------------------------------------- */
yrobj* yrCreateRepository()
{
  yrobj* repository = yrCreateObj("IFR");

  yrSetName( repository, "IFR");
  yrSetSrcnm( repository, "");
  repository->tag = yrdkRepository;
  repository->repository = repository;
  repository->contents = ysLstCreate();
  repository->defined_in = repository;
  repository->data.repval = ysmGlbAlloc( sizeof(yrprivate), "IFR data");
  CLRSTRUCT( *repository->data.repval);
  repository->data.repval->anon = ysLstCreate();
  repository->data.repval->seqnum = YR_MAX_PRIM + 1;
  repository->data.repval->trace = 0;
  repository->defined = TRUE;
  yrAssignId( repository, repository, FALSE);

  yrCreatePredefs( repository);
  return repository;
}

/* ---------------------------------------------------------------------- */
/*
 * yrCreatePredefs - Seed the repository with the predefined types.
 *
 * Currently, the only predefined type is CORBA::Object. Expressed as
 * IDL, this is:
 *
 *   module CORBA
 *   {
 *     interface Object;
 *   };
 *
 * For backward compatibility with our own stupid mistakes:
 *
 *   interface Object;            - at global scope
 */
STATICF void yrCreatePredefs( yrobj* repository)
{
  yrobj* corba;
  yrobj* object;
  
  corba = yrCreateModule( repository, "CORBA");
  yrSetSrcInfo( corba, "", 0);

  object = yrCreateInterface( corba, "Object", (yslst*)0);
  yrSetSrcInfo( object, "", 0);
  yrRepData(repository)->corba_object = object;

  object = yrCreateInterface( repository, "Object", (yslst*)0);
  yrSetSrcInfo( object, "", 0);
  yrRepData(repository)->object = object;
}

