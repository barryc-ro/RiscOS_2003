/* Copyright (c) Oracle Corporation 1995.  All Rights Reserved. */

/*
  NAME
    ydls.c
  DESCRIPTION
    YD ORB daemon query client

  PUBLIC FUNCTIONS
    main

  PRIVATE FUNCTIONS
    <x>

  NOTES

  MODIFIED   (MM/DD/YY)
    dbrower   08/15/95 - created.
    dbrower   02/ 5/96 -  Fix bug 338405.
			  Fix bug 338411.
			  Fix bug 338412.
    dbrower   10/10/96 -  work on interrupt handling, bug 411328.
*/

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
#ifndef YSR_ORACLE
#include <ysr.h>
#endif
#ifndef YSL_ORACLE
#include <ysl.h>
#endif
#ifndef YSV_ORACLE
#include <ysv.h>
#endif
#ifndef YDYOIDL_ORACLE
#include <ydyoidl.h>
#endif
#ifndef YDIDL_ORACLE
#include <ydidl.h>
#endif
#ifndef YDQ_ORACLE
#include <ydq.h>
#endif
#ifndef YT_ORACLE
#include <yt.h>
#endif

#define ENTRY_POINT ydlsMain
#include <s0ysmain.c>

/* PRIVATE TYPES AND CONSTANTS */

/*
 * Command-line Arguments
 */
static struct ysargmap ydlsmap[] =
{
  { 'a', "yd.show-active=true", 0 },
  { 's', "yd.show-spawn=true", 0 },
  { 0, (char *) 0, 0 }
};

/* PRIVATE FUNCTION DECLARATIONS */

/* PUBLIC FUNCTIONS */

/* ---------------------------- ydlsMain ---------------------------- */
/*
  NAME
    ydlsMain
  DESCRIPTION
    Main function for the ORB Daemon ls client program.
  PARAMETERS
    osdp    -- osd pointer
    nm	    -- program name string
    argc    -- arg count
    argv    -- argument vector.
  RETURNS
    TRUE on success, FALSE on error exit.
*/

boolean ydlsMain(dvoid *osdp, char *nm, sword argc, char **argv)
{
  sword     sts;
  boolean   ok;
  char       vbuf[80];
  ydim_imr  imr;

  /* initialization */
  ysInit(osdp, nm);
  sts = ysArgParse(argc, argv, ydlsmap);
  if (sts == YSARG_VERSION)
    {
      yslError("Oracle Media Exchange ORB Daemon Query Utility");
      vbuf[0] = 0;
      yslError(ysVersion(vbuf, sizeof(vbuf)));
    }
  ok = (sts == YSARG_NORMAL);
  
  if (!ok)
    return(FALSE);
  
  yseTry
  {
    ytInit();
    yoInit();

    imr = (ydim_imr)yoBind(ydim_imr__id, (char *)0, (yoRefData*)0,(char*)0);
    ydqListAll( imr );
    yoRelease( (dvoid*)imr );
  };
  yseCatch( YS_EX_INTERRUPT )
  {
    yslError("interrupted\n");
    /* nothing */
  }
  yseCatchAll
  {
    yslPrint("%s caught exception %s, exiting\n",
	     ysProgName(), ysidToStr(yseExid));
  }
  yseEnd;

  yseTry
  {
    yoTerm();
    ytTerm();
  }
  yseCatchAll
  {    
    yslPrint("%s caught exception %s while exiting\n",
	     ysProgName(), ysidToStr(yseExid));
  }
  yseEnd;
  ysTerm(osdp);
  return TRUE;
}

