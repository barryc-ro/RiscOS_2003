/*** GENERATED ***/

/* Copyright (c) 1995-96 by Oracle Corporation.  All Rights Reserved.
 *
 * ycosyn.y - Oracle Media Net CORBA IDL Syntax Definition
 *
 * This is an input file to the parser generator slax (sx). It's an
 * internal tool that was never meant to escape from its cage, so we have
 * no documentation on it. Here is the little bit of usage information
 * I managed to pry out of it:
 *
 * Usage: sx [-v] [-l] [-c] [-d] [-p] [-s startprod] [-x lexername] fn1 fn2...
 * -v : generate slax.actions, which lists all states
 * -l : turn off line numbering in all generated files
 * -c : stop after pass1, only generating .pdl files
 * -d : generate slax.h, listing #defines for tokens
 * -p : #define PXDEBUG in main parser
 * -s startprod: specify starting symbol, where 
 *     startprod is [gramname.]nonterminal
 * -x lexername: specify lexer from command line
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif

externref ysmtagDecl(YCONODE_TAG);

#define CREATE(type) \
  type *tt = (type *) ysmGlbAlloc(sizeof(type), YCONODE_TAG); \
  tt->line = (ycln *) SOURCE_NAME;
#define NEW_LIST(target, elm) \
  target = ysLstCreate(); DISCARD ysLstEnq(target, (dvoid *) elm);
#define APPEND_LIST(target, list, elm) \
  target = list; DISCARD ysLstEnq(target, (dvoid *) elm);
#define MAKE_ONEOF(ty, tv, arm, val) \
  CREATE(ty); tt->tag = tv; tt->data.arm = val; pxtmpv.node = (dvoid *) tt;
#ifndef PXTABL
#  include <pxslax.h>                                /* define the lrmachine */
#endif

#define segmsg    (mach->segmsg_)
#define PXLGETTOK (*mach.pxgett)
#define PXCOPYITEM   memcpy((void *)&pxtmpv, \
			    (void *)&pxstak[-mach->pxrhsc_[prod] + 1].val,\
			    sizeof(PXVALTYPE))

/* These macros are available to the user from within the actions. */
#define SOURCE_LINE mach->parse[mach->partop - mach->pxrhsc_[prod] + 1].srclin
#define SOURCE_COL  mach->parse[mach->partop - mach->pxrhsc_[prod] + 1].srccol
#define SOURCE_NAME mach->parse[mach->partop - mach->pxrhsc_[prod] + 1].srcnam
#define SRCLINE(n)  mach->parse[mach->partop - mach->pxrhsc_[prod] + n].srclin
#define SRCCOL(n)   mach->parse[mach->partop - mach->pxrhsc_[prod] + n].srccol
#define SRCNAME(n)  mach->parse[mach->partop - mach->pxrhsc_[prod] + n].srcnam

#ifndef PXVTYPE
# define PXVTYPE
typedef union {
   dvoid * node;
   yslst * list;
   char  * literal;
   ub4 val;
} PXVALTYPE;
#endif


/*
 * Recognize given production and execute any associated action.
 */
void px_ycos (pxnmach *mach, ub2 prod, void *cs)
{
  sb2 lrcnt;
  PXVALTYPE lval;
  sb2 top;
  sb2 newline;
  sb2 newcol;
  char *newnam;
  ub2 switchval;
  pxstk *pxstak = &mach->parse[mach->partop];
  PXVALTYPE pxtmpv;

  /*
   * Perform consistency check.
   */
  lrcnt = mach->pxrhsc_[prod];
  if (mach->partop < lrcnt)
    mach->status = PXMERROR;
  if (mach->status != PXMNORMAL)
    return;

  if (mach->ngrams == 1)
    switchval = prod - 1;                /* subtract 1: accept ::= end added */
  else
    switchval = prod - mach->pxroff_[prod] - 1;       /* cvt to local prod # */
  /*
   * Call user action routine. The stack is set up such that the top lrcnt
   * elements are the rhs of the production being reduced. The user code must
   * know how to get the values from the stack.
   */
  if (!mach->fnderr)
    {
      ub2 hi8 = switchval >> 8;
      ub2 lo8 = switchval & 0xff;

      switch (hi8)
	{
case 0:
 switch (lo8)
{
#define PXACTIONS

case 1:
{ NEW_LIST(pxtmpv.list, pxstak[-0].val.node); ((ycctx *) cs)->root = pxtmpv.list; } goto done;

case 2:
{ APPEND_LIST(pxtmpv.list, pxstak[-1].val.list, pxstak[-0].val.node); } goto done;

case 3:
{ MAKE_ONEOF(yctDefinition, ycttTypeDcl, typedcl, pxstak[-1].val.node); } goto done;

case 4:
{ MAKE_ONEOF(yctDefinition, ycttConstDcl, constdcl, pxstak[-1].val.node); } goto done;

case 5:
{ MAKE_ONEOF(yctDefinition, ycttExceptDcl, exceptdcl, pxstak[-1].val.node); } goto done;

case 6:
{ MAKE_ONEOF(yctDefinition, ycttInterface, interface, pxstak[-1].val.node); } goto done;

case 7:
{ MAKE_ONEOF(yctDefinition, ycttModule, module, pxstak[-1].val.node); } goto done;

case 8:
{ MAKE_ONEOF(yctDefinition, ycttPragma, pragmadir, pxstak[-1].val.node); } goto done;

case 9:
{
  CREATE(yctModule);
  tt->id = pxstak[-3].val.literal;
  tt->defs = pxstak[-1].val.list;
  pxtmpv.node = tt;
  } goto done;

case 10:
{
  MAKE_ONEOF(yctInterface, ycttInterfaceDcl, interfacedcl, pxstak[-0].val.node);
  } goto done;

case 11:
{ MAKE_ONEOF(yctInterface, ycttForwardDcl, forwarddcl, pxstak[-0].val.node); } goto done;

case 12:
{
  CREATE(yctInterfaceDcl);
  tt->header = pxstak[-2].val.node;
  tt->body = (yslst*) 0;
  pxtmpv.node = tt;
  } goto done;

case 13:
{
  CREATE(yctInterfaceDcl);
  tt->header = pxstak[-3].val.node;
  tt->body = pxstak[-1].val.list;
  pxtmpv.node = tt;
  } goto done;

case 14:
{
  CREATE(yctForwardDcl);
  tt->id = pxstak[-0].val.literal;
  pxtmpv.node = tt;
  } goto done;

case 15:
{
  CREATE(yctInterfaceHeader);
  tt->id = pxstak[-1].val.literal;
  tt->inheritancespec = pxstak[-0].val.node;
  pxtmpv.node = tt;
  } goto done;

case 16:
{ pxtmpv.list = pxstak[-0].val.list; } goto done;

case 17:
{ MAKE_ONEOF(yctExport, ycttTypeDcl, typedcl, pxstak[-1].val.node); } goto done;

case 18:
{ MAKE_ONEOF(yctExport, ycttConstDcl, constdcl, pxstak[-1].val.node); } goto done;

case 19:
{ MAKE_ONEOF(yctExport, ycttExceptDcl, exceptdcl, pxstak[-1].val.node); } goto done;

case 20:
{ MAKE_ONEOF(yctExport, ycttAttrDcl, attrdcl, pxstak[-1].val.node); } goto done;

case 21:
{ MAKE_ONEOF(yctExport, ycttOpDcl, opdcl, pxstak[-1].val.node); } goto done;

case 22:
{ MAKE_ONEOF(yctExport, ycttPragma, pragmadir, pxstak[-1].val.node); } goto done;

case 23:
{
  CREATE(yctInheritanceSpec);
  tt->names = pxstak[-0].val.list;
  pxtmpv.node = tt;
  } goto done;

case 24:
{
  CREATE(yctScopedName);
  tt->name = (dvoid *) 0;
  tt->leadcolon = FALSE;
  tt->id = pxstak[-0].val.literal;
  pxtmpv.node = tt;
  } goto done;

case 25:
{
  CREATE(yctScopedName);
  tt->name = (dvoid *) 0;
  tt->leadcolon = TRUE;
  tt->id = pxstak[-0].val.literal;
  pxtmpv.node = tt;
  } goto done;

case 26:
{
  CREATE(yctScopedName);
  tt->name = pxstak[-2].val.node;
  tt->leadcolon = TRUE;
  tt->id = pxstak[-0].val.literal;
  pxtmpv.node = tt;
  } goto done;

case 27:
{
  CREATE(yctConstDcl);
  tt->type = pxstak[-3].val.node;
  tt->id = pxstak[-2].val.literal;
  tt->exp = pxstak[-0].val.node;
  pxtmpv.node = tt;
  } goto done;

case 28:
{ MAKE_ONEOF(yctConstType, ycttIntegerType, inttype, pxstak[-0].val.node); } goto done;

case 29:
{ MAKE_ONEOF(yctConstType, ycttCharType, chartype, pxstak[-0].val.node); } goto done;

case 30:
{ MAKE_ONEOF(yctConstType, ycttBooleanType, booleantype, pxstak[-0].val.node); } goto done;

case 31:
{ MAKE_ONEOF(yctConstType, ycttFloatType, floattype, pxstak[-0].val.val); } goto done;

case 32:
{ MAKE_ONEOF(yctConstType, ycttStringType, stringtype, pxstak[-0].val.node); } goto done;

case 33:
{ MAKE_ONEOF(yctConstType, ycttScopedName, name, pxstak[-0].val.node); } goto done;

case 34:
{ pxtmpv.node = pxstak[-0].val.node; } goto done;

case 35:
{
  CREATE(yctOrExpr);
  tt->orexpr = (yctOrExpr *) 0;
  tt->xorexpr = pxstak[-0].val.node;
  pxtmpv.node = tt;
  } goto done;

case 36:
{
  CREATE(yctOrExpr);
  tt->orexpr = pxstak[-2].val.node;
  tt->xorexpr = pxstak[-0].val.node;
  pxtmpv.node = tt;
  } goto done;

case 37:
{
  CREATE(yctXorExpr);
  tt->xorexpr = (yctXorExpr *) 0;
  tt->andexpr = pxstak[-0].val.node;
  pxtmpv.node = tt;
  } goto done;

case 38:
{
  CREATE(yctXorExpr);
  tt->xorexpr = pxstak[-2].val.node;
  tt->andexpr = pxstak[-0].val.node;
  pxtmpv.node = tt;
  } goto done;

case 39:
{
  CREATE(yctAndExpr);
  tt->andexpr = (yctAndExpr *) 0;
  tt->shiftexpr = pxstak[-0].val.node;
  pxtmpv.node = tt;
  } goto done;

case 40:
{
  CREATE(yctAndExpr);
  tt->andexpr = pxstak[-2].val.node;
  tt->shiftexpr = pxstak[-0].val.node;
  pxtmpv.node = tt;
  } goto done;

case 41:
{
  CREATE(yctShiftExpr);
  tt->shiftexpr = (yctShiftExpr *) 0;
  tt->addexpr = pxstak[-0].val.node;
  pxtmpv.node = tt;
  } goto done;

case 42:
{
  CREATE(yctShiftExpr);
  tt->shiftexpr = pxstak[-2].val.node;
  tt->addexpr = pxstak[-0].val.node;
  tt->operid = YCTRS;
  pxtmpv.node = tt;
  } goto done;

case 43:
{
  CREATE(yctShiftExpr);
  tt->shiftexpr = pxstak[-2].val.node;
  tt->addexpr = pxstak[-0].val.node;
  tt->operid = YCTLS;
  pxtmpv.node = tt;
  } goto done;

case 44:
{
  CREATE(yctAddExpr);
  tt->addexpr = (yctAddExpr *) 0;
  tt->multexpr = pxstak[-0].val.node;
  pxtmpv.node = tt;
  } goto done;

case 45:
{
  CREATE(yctAddExpr);
  tt->addexpr = pxstak[-2].val.node;
  tt->multexpr = pxstak[-0].val.node;
  tt->operid = '+';
  pxtmpv.node = tt;
  } goto done;

case 46:
{
  CREATE(yctAddExpr);
  tt->addexpr = pxstak[-2].val.node;
  tt->multexpr = pxstak[-0].val.node;
  tt->operid = '-';
  pxtmpv.node = tt;
  } goto done;

case 47:
{
  CREATE(yctMultExpr);
  tt->multexpr = (yctMultExpr *) 0;
  tt->unaryexpr = pxstak[-0].val.node;
  pxtmpv.node = tt;
  } goto done;

case 48:
{
  CREATE(yctMultExpr);
  tt->multexpr = pxstak[-2].val.node;
  tt->unaryexpr = pxstak[-0].val.node;
  tt->operid = '*';
  pxtmpv.node = tt;
  } goto done;

case 49:
{
  CREATE(yctMultExpr);
  tt->multexpr = pxstak[-2].val.node;
  tt->unaryexpr = pxstak[-0].val.node;
  tt->operid = '/';
  pxtmpv.node = tt;
  } goto done;

case 50:
{
  CREATE(yctMultExpr);
  tt->multexpr = pxstak[-2].val.node;
  tt->unaryexpr = pxstak[-0].val.node;
  tt->operid = '%';
  pxtmpv.node = tt;
  } goto done;

case 51:
{
  CREATE(yctUnaryExpr);
  tt->unaryop = pxstak[-1].val.val;
  tt->primexpr = pxstak[-0].val.node;
  pxtmpv.node = tt;
  } goto done;

case 52:
{
  CREATE(yctUnaryExpr);
  tt->unaryop = 0;
  tt->primexpr = pxstak[-0].val.node;
  pxtmpv.node = tt;
  } goto done;

case 53:
{ pxtmpv.val = '-'; } goto done;

case 54:
{ pxtmpv.val = '+'; } goto done;

case 55:
{ pxtmpv.val = '~'; } goto done;

case 56:
{ MAKE_ONEOF(yctPrimaryExpr, ycttScopedName, name, pxstak[-0].val.node); } goto done;

case 57:
{ MAKE_ONEOF(yctPrimaryExpr, ycttLiteral, literal, pxstak[-0].val.node); } goto done;

case 58:
{ MAKE_ONEOF(yctPrimaryExpr, ycttConstExp, constexp, pxstak[-1].val.node); } goto done;

case 59:
{ MAKE_ONEOF(yctLiteral, ycttNumLit, numlit, pxstak[-0].val.literal); } goto done;

case 60:
{ MAKE_ONEOF(yctLiteral, ycttStrLit, strlit, pxstak[-0].val.list); } goto done;

case 61:
{ MAKE_ONEOF(yctLiteral, ycttCharLit, charlit, pxstak[-0].val.literal); } goto done;

case 62:
{ MAKE_ONEOF(yctLiteral, ycttBoolLit, boollit, pxstak[-0].val.val); } goto done;

case 63:
{ pxtmpv.val = 1; } goto done;

case 64:
{ pxtmpv.val = 0; } goto done;

case 65:
{ pxtmpv.node = pxstak[-0].val.node; } goto done;

case 66:
{ MAKE_ONEOF(yctTypeDcl, ycttTypeDeclarator, typedecl, pxstak[-0].val.node); } goto done;

case 67:
{ MAKE_ONEOF(yctTypeDcl, ycttStructType, structtype, pxstak[-0].val.node); } goto done;

case 68:
{ MAKE_ONEOF(yctTypeDcl, ycttUnionType, uniontype, pxstak[-0].val.node); } goto done;

case 69:
{ MAKE_ONEOF(yctTypeDcl, ycttEnumType, enumtype, pxstak[-0].val.node); } goto done;

case 70:
{
  CREATE(yctTypeDeclarator);
  tt->typespec = pxstak[-1].val.node;
  tt->declarators = pxstak[-0].val.list;
  pxtmpv.node = tt;
  } goto done;

case 71:
{ MAKE_ONEOF(yctTypeSpec, ycttSimple, simple, pxstak[-0].val.node); } goto done;

case 72:
{ MAKE_ONEOF(yctTypeSpec, ycttConstr, constr, pxstak[-0].val.node); } goto done;

case 73:
{ MAKE_ONEOF(yctSimpleTypeSpec, ycttBase, base, pxstak[-0].val.node); } goto done;

case 74:
{ MAKE_ONEOF(yctSimpleTypeSpec, ycttTemplate, template, pxstak[-0].val.node); } goto done;

case 75:
{ MAKE_ONEOF(yctSimpleTypeSpec, ycttScopedName, name, pxstak[-0].val.node); } goto done;

case 76:
{ MAKE_ONEOF(yctBaseTypeSpec, ycttFloatType, floattype, pxstak[-0].val.val); } goto done;

case 77:
{ MAKE_ONEOF(yctBaseTypeSpec, ycttIntegerType, inttype, pxstak[-0].val.node); } goto done;

case 78:
{ MAKE_ONEOF(yctBaseTypeSpec, ycttCharType, chartype, pxstak[-0].val.node); } goto done;

case 79:
{
  MAKE_ONEOF(yctBaseTypeSpec, ycttBooleanType, booleantype,
  pxstak[-0].val.node);
  } goto done;

case 80:
{ MAKE_ONEOF(yctBaseTypeSpec, ycttOctetType, octettype, pxstak[-0].val.node); } goto done;

case 81:
{ MAKE_ONEOF(yctBaseTypeSpec, ycttAnyType, anytype, pxstak[-0].val.node); } goto done;

case 82:
{ 
  MAKE_ONEOF(yctBaseTypeSpec, ycttTypeCodeType, typecodetype, 
  pxstak[-0].val.node); 
  } goto done;

case 83:
{ MAKE_ONEOF(yctTemplateTypeSpec, ycttSeqType, seqtype, pxstak[-0].val.node); } goto done;

case 84:
{ MAKE_ONEOF(yctTemplateTypeSpec, ycttStrType, strtype, pxstak[-0].val.node); } goto done;

case 85:
{ MAKE_ONEOF(yctConstrTypeSpec, ycttStructType, structtype,
  pxstak[-0].val.node);
  } goto done;

case 86:
{ MAKE_ONEOF(yctConstrTypeSpec, ycttUnionType, uniontype,
  pxstak[-0].val.node);
  } goto done;

case 87:
{ MAKE_ONEOF(yctConstrTypeSpec, ycttEnumType, enumtype, pxstak[-0].val.node); } goto done;

case 88:
{ NEW_LIST(pxtmpv.list, pxstak[-0].val.node); } goto done;

case 89:
{ APPEND_LIST(pxtmpv.list, pxstak[-2].val.list, pxstak[-0].val.node); } goto done;

case 90:
{ MAKE_ONEOF(yctDeclarator, ycttSimple, simple, pxstak[-0].val.literal); } goto done;

case 91:
{ MAKE_ONEOF(yctDeclarator, ycttComplex, complex, pxstak[-0].val.node); } goto done;

case 92:
{ pxtmpv.literal = pxstak[-0].val.literal; } goto done;

case 93:
{ pxtmpv.node = pxstak[-0].val.node; } goto done;

case 94:
{ pxtmpv.node = (dvoid*)0; } goto done;

case 95:
{ pxtmpv.val = YCTFLOAT; } goto done;

case 96:
{ pxtmpv.val = YCTDOUBLE; } goto done;

case 97:
{ pxtmpv.node = pxstak[-0].val.node; } goto done;

case 98:
{ pxtmpv.node = pxstak[-0].val.node; } goto done;

case 99:
{
  CREATE(yctIntegerType);
  tt->signed_t = TRUE;
  tt->long_t = 1;
  pxtmpv.node = tt;
  } goto done;

case 100:
{
  CREATE(yctIntegerType);
  tt->signed_t = TRUE;
  tt->long_t = 0;
  pxtmpv.node = tt;
  } goto done;

case 101:
{
  CREATE(yctIntegerType);
  tt->signed_t = TRUE;
  tt->long_t = 2;
  pxtmpv.node = tt;
  } goto done;

case 105:
{
  CREATE(yctIntegerType);
  tt->signed_t = FALSE;
  tt->long_t = 1;
  pxtmpv.node = tt;
  } goto done;

case 106:
{
  CREATE(yctIntegerType);
  tt->signed_t = FALSE;
  tt->long_t = 0;
  pxtmpv.node = tt;
  } goto done;

case 109:
{ pxtmpv.node = (dvoid *) 0; } goto done;

case 110:
{ pxtmpv.node = (dvoid *) 0; } goto done;

case 111:
{ pxtmpv.node = (dvoid *) 0; } goto done;

case 112:
{ pxtmpv.node = (dvoid *) 0; } goto done;

case 113:
{
  CREATE(yctStructType);
  tt->id = pxstak[-3].val.literal;
  tt->members = pxstak[-1].val.list;
  pxtmpv.node = tt;
  } goto done;

case 114:
{ NEW_LIST(pxtmpv.list, pxstak[-0].val.node); } goto done;

case 115:
{ APPEND_LIST(pxtmpv.list, pxstak[-1].val.list, pxstak[-0].val.node); } goto done;

case 116:
{
  CREATE(yctMember);
  tt->typespec = pxstak[-2].val.node;
  tt->declarators = pxstak[-1].val.list;
  pxtmpv.node = tt;
  } goto done;

case 117:
{
  CREATE(yctUnionType);
  tt->id = pxstak[-7].val.literal;
  tt->typespec = pxstak[-4].val.node;
  tt->cases = pxstak[-1].val.list;
  pxtmpv.node = tt;
  } goto done;

case 118:
{
  MAKE_ONEOF(yctSwitchTypeSpec, ycttIntegerType, inttype,
  pxstak[-0].val.node);
  } goto done;

case 119:
{ MAKE_ONEOF(yctSwitchTypeSpec, ycttCharType, chartype, pxstak[-0].val.node); } goto done;

case 120:
{
  MAKE_ONEOF(yctSwitchTypeSpec, ycttBooleanType, booltype,
  pxstak[-0].val.node);
  } goto done;

case 121:
{ MAKE_ONEOF(yctSwitchTypeSpec, ycttEnumType, enumtype, pxstak[-0].val.node); } goto done;

case 122:
{ MAKE_ONEOF(yctSwitchTypeSpec, ycttScopedName, name, pxstak[-0].val.node); } goto done;

case 123:
{ NEW_LIST(pxtmpv.list, pxstak[-0].val.node); } goto done;

case 124:
{ APPEND_LIST(pxtmpv.list, pxstak[-1].val.list, pxstak[-0].val.node); } goto done;

case 125:
{
  CREATE(yctCase);
  tt->caselabels = pxstak[-2].val.list;
  tt->elemspec = pxstak[-1].val.node;
  pxtmpv.node = tt;
  } goto done;

case 126:
{
  CREATE(yctCaseLabel);
  tt->constexp = pxstak[-1].val.node;
  pxtmpv.node = tt;
  } goto done;

case 127:
{
  CREATE(yctCaseLabel);
  tt->constexp = (yctConstExp *) 0;
  pxtmpv.node = tt;
  } goto done;

case 128:
{
  CREATE(yctElementSpec);
  tt->typespec = pxstak[-1].val.node;
  tt->declarator = pxstak[-0].val.node;
  pxtmpv.node = tt;
  } goto done;

case 129:
{
  CREATE(yctEnumType);
  tt->id = pxstak[-3].val.literal;
  tt->enumerators = pxstak[-1].val.list;
  pxtmpv.node = tt;
  } goto done;

case 130:
{
  CREATE(yctEnumerator);
  tt->id = pxstak[-0].val.literal;
  pxtmpv.node = tt;
  } goto done;

case 131:
{
  CREATE(yctSequenceType);
  tt->simple = pxstak[-3].val.node;
  tt->intconst = pxstak[-1].val.node;
  pxtmpv.node = tt;
  } goto done;

case 132:
{
  CREATE(yctSequenceType);
  tt->simple = pxstak[-1].val.node;
  tt->intconst = (yctPositiveIntConst *) 0;
  pxtmpv.node = tt;
  } goto done;

case 133:
{
  CREATE(yctStringType);
  tt->intconst = pxstak[-1].val.node;
  pxtmpv.node = tt;
  } goto done;

case 134:
{
  CREATE(yctStringType);
  tt->intconst = (yctPositiveIntConst *) 0;
  pxtmpv.node = tt;
  } goto done;

case 135:
{
  CREATE(yctArrayDeclarator);
  tt->id = pxstak[-1].val.literal;
  tt->arraysize = pxstak[-0].val.list;
  pxtmpv.node = tt;
  } goto done;

case 136:
{
  CREATE(yctFixedArraySize);
  tt->intconst = pxstak[-1].val.node;
  pxtmpv.node = tt;
  } goto done;

case 137:
{
  CREATE(yctAttrDcl);
  tt->readon = pxstak[-3].val.val;
  tt->paramtype = pxstak[-1].val.node;
  tt->simples = pxstak[-0].val.list;
  pxtmpv.node = tt;
  } goto done;

case 138:
{
  CREATE(yctExceptDcl);
  tt->id = pxstak[-2].val.literal;
  tt->members = (yslst *) 0;
  pxtmpv.node = tt;
  } goto done;

case 139:
{
  CREATE(yctExceptDcl);
  tt->id = pxstak[-3].val.literal;
  tt->members = pxstak[-1].val.list;
  pxtmpv.node = tt;
  } goto done;

case 140:
{
  CREATE(yctOpDcl);
  tt->opattribute = pxstak[-5].val.val;
  tt->optype = pxstak[-4].val.node;
  tt->id = pxstak[-3].val.literal;
  tt->paramdcls = pxstak[-2].val.node;
  tt->raisesexpr = pxstak[-1].val.node;
  tt->contextexpr = pxstak[-0].val.node;
  pxtmpv.node = tt;
  } goto done;

case 141:
{ pxtmpv.val = YCTONEWAY; } goto done;

case 142:
{
  CREATE(yctOpTypeSpec);
  tt->paramtype = pxstak[-0].val.node;
  pxtmpv.node = tt;
  } goto done;

case 143:
{
  CREATE(yctOpTypeSpec);
  tt->paramtype = (yctParamTypeSpec *) 0;
  pxtmpv.node = tt;
  } goto done;

case 144:
{
  CREATE(yctParameterDcls);
  tt->paramdcls = pxstak[-1].val.list;
  pxtmpv.node = tt;
  } goto done;

case 145:
{
  CREATE(yctParameterDcls);
  tt->paramdcls = (yslst *) 0;
  pxtmpv.node = tt;
  } goto done;

case 146:
{
  CREATE(yctParamDcl);
  tt->paramattr = pxstak[-2].val.val;
  tt->typespec = pxstak[-1].val.node;
  tt->simple = pxstak[-0].val.literal;
  pxtmpv.node = tt;
  } goto done;

case 147:
{ pxtmpv.val = YCTIN; } goto done;

case 148:
{ pxtmpv.val = YCTOUT; } goto done;

case 149:
{ pxtmpv.val = YCTINOUT; } goto done;

case 150:
{
  CREATE(yctRaisesExpr);
  tt->names = pxstak[-1].val.list;
  pxtmpv.node = tt;
  } goto done;

case 151:
{
  CREATE(yctContextExpr);
  tt->ids = pxstak[-1].val.list;
  pxtmpv.node = tt;
  } goto done;

case 152:
{ MAKE_ONEOF(yctParamTypeSpec, ycttBase, base, pxstak[-0].val.node); } goto done;

case 153:
{
  MAKE_ONEOF(yctParamTypeSpec, ycttStringType, stringtype,
  pxstak[-0].val.node);
  } goto done;

case 154:
{ MAKE_ONEOF(yctParamTypeSpec, ycttScopedName, name, pxstak[-0].val.node); } goto done;

case 155:
{ pxtmpv.node = pxstak[-0].val.node; } goto done;

case 156:
{ pxtmpv.node = (dvoid *) 0; } goto done;

case 157:
{ NEW_LIST(pxtmpv.list, pxstak[-0].val.node); } goto done;

case 158:
{ APPEND_LIST(pxtmpv.list, pxstak[-1].val.list, pxstak[-0].val.node); } goto done;

case 159:
{ NEW_LIST(pxtmpv.list, pxstak[-0].val.node); } goto done;

case 160:
{ APPEND_LIST(pxtmpv.list, pxstak[-1].val.list, pxstak[-0].val.node); } goto done;

case 161:
{ NEW_LIST(pxtmpv.list, pxstak[-0].val.node); } goto done;

case 162:
{ APPEND_LIST(pxtmpv.list, pxstak[-2].val.list, pxstak[-0].val.node); } goto done;

case 163:
{ NEW_LIST(pxtmpv.list, pxstak[-0].val.node); } goto done;

case 164:
{ APPEND_LIST(pxtmpv.list, pxstak[-1].val.list, pxstak[-0].val.node); } goto done;

case 165:
{ NEW_LIST(pxtmpv.list, pxstak[-0].val.node); } goto done;

case 166:
{ APPEND_LIST(pxtmpv.list, pxstak[-2].val.list, pxstak[-0].val.node); } goto done;

case 167:
{ NEW_LIST(pxtmpv.list, pxstak[-0].val.node); } goto done;

case 168:
{ APPEND_LIST(pxtmpv.list, pxstak[-1].val.list, pxstak[-0].val.node); } goto done;

case 169:
{ pxtmpv.val = 1; } goto done;

case 170:
{ pxtmpv.val = 0; } goto done;

case 171:
{ NEW_LIST(pxtmpv.list, pxstak[-0].val.literal); } goto done;

case 172:
{ APPEND_LIST(pxtmpv.list, pxstak[-2].val.list, pxstak[-0].val.literal); } goto done;

case 173:
{ pxtmpv.val = pxstak[-0].val.val; } goto done;

case 174:
{ pxtmpv.val = 0; } goto done;

case 175:
{ pxtmpv.node = pxstak[-0].val.node; } goto done;

case 176:
{ pxtmpv.node = (dvoid *) 0; } goto done;

case 177:
{ pxtmpv.node = pxstak[-0].val.node; } goto done;

case 178:
{ pxtmpv.node = (dvoid *) 0; } goto done;

case 179:
{ NEW_LIST(pxtmpv.list, pxstak[-0].val.node); } goto done;

case 180:
{ APPEND_LIST(pxtmpv.list, pxstak[-2].val.list, pxstak[-0].val.node); } goto done;

case 181:
{ NEW_LIST(pxtmpv.list, pxstak[-0].val.list); } goto done;

case 182:
{ APPEND_LIST(pxtmpv.list, pxstak[-2].val.list, pxstak[-0].val.list); } goto done;

case 183:
{ NEW_LIST(pxtmpv.list, pxstak[-0].val.literal); } goto done;

case 184:
{ APPEND_LIST(pxtmpv.list, pxstak[-1].val.list, pxstak[-0].val.literal); } goto done;

case 185:
{ MAKE_ONEOF(yctPragma, ycttPragmaId, prgid, pxstak[-0].val.node); } goto done;

case 186:
{ MAKE_ONEOF(yctPragma, ycttPragmaPrefix, prgprefix, pxstak[-0].val.node); } goto done;

case 187:
{ MAKE_ONEOF(yctPragma, ycttPragmaVersion, prgversion, pxstak[-0].val.node); } goto done;

case 188:
{ MAKE_ONEOF(yctPragma, ycttPragmaDbAttr, prgdbattr, pxstak[-0].val.node); } goto done;

case 189:
{ MAKE_ONEOF(yctPragma, ycttPragmaDbCreat, prgdbcreate, pxstak[-0].val.node); } goto done;

case 190:
{ MAKE_ONEOF(yctPragma, ycttPragmaDbLst, prgdblst, pxstak[-0].val.node); } goto done;

case 191:
{ 
  CREATE(yctPragmaId);
  tt->name = pxstak[-1].val.node;
  tt->id = pxstak[-0].val.literal;
  pxtmpv.node = tt;
  } goto done;

case 192:
{ 
  CREATE(yctPragmaPrefix);
  tt->prefix = pxstak[-0].val.literal;
  pxtmpv.node = tt;
  } goto done;

case 193:
{ 
  CREATE(yctPragmaVersion);
  tt->name = pxstak[-1].val.node;
  tt->vers = pxstak[-0].val.literal;
  pxtmpv.node = tt;
  } goto done;

case 194:
{
  CREATE(yctPragmaDbAttr);
  tt->name = pxstak[-1].val.node;
  tt->keystr = pxstak[-0].val.list;
  pxtmpv.node = tt;
  } goto done;

case 195:
{
  CREATE(yctPrgParKey);
  tt->paramnm = pxstak[-1].val.literal;
  tt->keystr = pxstak[-0].val.list;
  pxtmpv.node = tt;
  } goto done;

case 196:
{ NEW_LIST(pxtmpv.list, pxstak[-0].val.node); } goto done;

case 197:
{ APPEND_LIST(pxtmpv.list, pxstak[-2].val.list, pxstak[-0].val.node); } goto done;

case 198:
{
  CREATE(yctPragmaDbCreat);
  tt->name = pxstak[-1].val.node;
  tt->mapping = pxstak[-0].val.list;
  pxtmpv.node = tt;
  } goto done;

case 199:
{
  CREATE(yctPragmaDbLst);
  tt->name = pxstak[-0].val.node;
  pxtmpv.node = tt;
  } goto done;


#ifdef PXACTIONS
         }  /* last inner switch */
#endif

 default:   PXCOPYITEM;  break;
         }  /* outer switch */


 done:

  memcpy((void *)&lval, (void *)&pxtmpv, sizeof(PXVALTYPE));

  /*
   * Now, pop old values off of stack and push new lval.
   */
      top = (sb2)(mach->partop - lrcnt);
  mach->partop -= (sb2)lrcnt;
  if (lrcnt == 0)
    {
      newline = mach->parse[top].srclin;
      newcol  = mach->parse[top].srccol;
      newnam  = mach->parse[top].srcnam;
    }
  else
    {
      newline = mach->parse[top + 1].srclin;
      newcol  = mach->parse[top + 1].srccol;
      newnam  = mach->parse[top + 1].srcnam;
    }
  /*
   * Need to get the starting line and column of this production. We do
   * this by copying the new top line and column to the new symbol.
   */
  pxnspus(mach,
	 pxngoto(mach, (ub2)mach->parse[top].state, (ub2)mach->pxlhsn_[prod]),
	 (sb2)(mach->pxlhsn_[prod]),
	 &lval,
	 newline,
	 newcol,
	 newnam);
  }
}
