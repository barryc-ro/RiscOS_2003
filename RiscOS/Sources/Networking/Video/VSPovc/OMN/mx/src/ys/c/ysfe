/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * ysfe.c - Filter Expression Evaluator
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YSI_ORACLE
#include <ysi.h>
#endif
#ifndef YSFE_ORACLE
#include <ysfe.h>
#endif

/*
 * Error Base
 */
#define YSFE_BASE    ((ub4) 8060)
#define YSFE_ERR(n)  YS_PRODUCT, YS_FACILITY, (YSFE_BASE + (ub4) (n))

/*
 * Type Declarations
 */
struct ysfe
{
  ub1     *exp;                                                /* expression */
  dvoid  **lits;                                            /* literal array */
  yslst   *litffs;                                 /* literal free functions */
  dvoid  **estk;                                         /* evaluation stack */
  sword    nval;                                 /* maximum value referenced */
  sword    nmap;                                           /* number of maps */
  CONST ysfemap *maps;                                               /* maps */
};

/*
 * Constant Declarations
 */
#define YSFE_VAR  ((ub1) 1)
#define YSFE_LIT  ((ub1) 2)
#define YSFE_LE   ((ub1) 3)
#define YSFE_GE   ((ub1) 4)
#define YSFE_PRED ((ub1) 5)
#define YSFE_EOS  ((ub1) 6)

static ysmtagDecl(YSFE_TAG) = "ysfe";

/*
 * ysFEEval - evaluate a compiled filter expression
 */
boolean ysFEEval(ysfe *fe, sword nval, dvoid **vals)
{
  sword    vidx, fidx, op, result;
  dvoid  **lvaltop, *v1, *v2;
  boolean  tv, fv;
  ub1     *expr;

  ysmCheck((dvoid *) fe, YSFE_TAG);
  if (fe->nval >= nval)
    yseThrow(YS_EX_BADPARAM);

  lvaltop = fe->estk;
  expr = fe->exp;
  tv = TRUE, fv = FALSE;

 eval:
  switch (*expr++)
    {
    case YSFE_VAR:
      vidx = *expr++;
      *lvaltop++ = vals[vidx];
      break;
    case YSFE_LIT:
      vidx = *expr++;
      *lvaltop++ = fe->lits[vidx];
      break;
    case '<': case YSFE_LE: case '=': case '!': case '>': case YSFE_GE:
      op = expr[-1];
      fidx = *expr++;
      v2 = *(--lvaltop);
      v1 = *(--lvaltop);
      result = fe->maps[fidx].relopcb(v1, v2);
      switch (op)
	{
	case '<': *lvaltop++ = (dvoid *) (result < 0 ? &tv : &fv); break;
	case YSFE_LE: *lvaltop++ = (dvoid *) (result <= 0 ? &tv : &fv); break;
	case '=': *lvaltop++ = (dvoid *) (result == 0 ? &tv : &fv); break;
	case '!': *lvaltop++ = (dvoid *) (result != 0 ? &tv : &fv); break;
	case '>': *lvaltop++ = (dvoid *) (result > 0 ? &tv : &fv); break;
	case YSFE_GE: *lvaltop++ = (dvoid *) (result >= 0 ? &tv : &fv); break;
	}
      break;
    case YSFE_PRED:
      fidx = *expr++;
      vidx = fe->maps[fidx].vidx;
      v1 = *(--lvaltop);
      *lvaltop++ = (fe->maps[fidx].predcb(v1, vals[vidx]) ? &tv : &fv);
      break;
    case '~':
      lvaltop[-1] = (dvoid *) (lvaltop[-1] == (dvoid *) &tv ? &fv : &tv);
      break;
    case '&':
      vidx = *expr++;
      if (lvaltop[-1] == (dvoid *) &fv)
	expr += vidx;
      else
	lvaltop--;
      break;
    case ',':
      vidx = *expr++;
      if (lvaltop[-1] == (dvoid *) &tv)
	expr += vidx;
      else
	lvaltop--;
      break;
    case YSFE_EOS:
      return *((boolean *) fe->estk[0]);
    default:
      ysePanic(YS_EX_FAILURE);
      break;
    }

  goto eval;
}

/*
 * ysFEFree - free a compiled expression
 */
void ysFEFree(ysfe *fe)
{
  sword    i;
  ysle    *le;
  ysfemap *map;

  ysmCheck((dvoid *) fe, YSFE_TAG);

  if (fe->exp)
    ysmGlbFree((dvoid *) fe->exp);
  if (fe->estk)
    ysmGlbFree((dvoid *) fe->estk);
  if (fe->lits)
    {
      for (i = 0, le = ysLstHead(fe->litffs); le; i++, le = ysLstNext(le))
	{
	  map = (ysfemap *) ysLstVal(le);
	  if (map && map->freecb)
	    map->freecb(fe->lits[i]);
	  else
	    ysmGlbFree(fe->lits[i]);
	}
      ysLstDestroy(fe->litffs, (ysmff) 0);
      ysmGlbFree((dvoid *) fe->lits);
    }
  ysmGlbFree((dvoid *) fe);
}

/*
 * Base Datatype Support
 */
dvoid *ysFEIntParse(CONST char *str)
{
  ub4   val, *valp;
  char *ptr;

  val = (ub4) strtoul(str, &ptr, (0));
  if (*ptr != '\0')
    return (dvoid *) 0;
  else
    {
      valp = (ub4 *) ysmGlbAlloc(sizeof(ub4), "intparse");
      *valp = val;
      return (dvoid *) valp;
    }
}

sword ysFEIntRelop(CONST dvoid *v1, CONST dvoid *v2)
{
  return (sword) (*((sb4 *) v1) - *((sb4 *) v2));
}

boolean ysFEStrPred(CONST dvoid *v1, CONST dvoid *v2)
{
  return (strcmp((char *) v1, (char *) v2) == 0);
}

/*
 * FILTER COMPILATION
 */

/*
 * Constant Declarations
 */
#define YSFETOKMAX  256                             /* maximum parsed tokens */
#define YSFEEXPMAX  512                         /* maximum expression length */

#define YSFETOK_STR    ((sword) 1)
#define YSFETOK_MAP    ((sword) 2)
#define YSFETOK_OP     ((sword) 3)
#define YSFETOK_RELOP  ((sword) 4)

/*
 * Type Declarations
 */
typedef struct ysfetok ysfetok;
typedef struct ysfec ysfec;

struct ysfetok
{
  sword  toktyp;
  size_t tokpos;
  union
    {
      struct { size_t v_strsz; CONST char *v_strptr; } v_strval;
      ub1 v_mapval;
      char v_opval;
    } tokval;
};

#define strsz  tokval.v_strval.v_strsz
#define strptr tokval.v_strval.v_strptr
#define mapval tokval.v_mapval
#define opval  tokval.v_opval

struct ysfec
{
  CONST char *srcexpr;                           /* cached source expression */
  ub1     *expp;                                       /* expression pointer */
  sword    cdepth;                                 /* current depth of stack */
  sword    depth;                                  /* maximum depth of stack */
  sword    litcnt;                                          /* literal count */
  yslst   *litffs;                             /* literal free function list */
  dvoid  **lits;                                             /* literal list */
  sword    nmap;                                           /* number of maps */
  CONST ysfemap *maps;                                          /* map array */
  sword    tokidx;                                         /* token position */
  ysfetok  toks[YSFETOKMAX];                                   /* token list */
};

/*
 * Routine Declarations
 */
#define ysFEGet(c)    ((c)->toks + (c)->tokidx++)
#define ysFEUnget(c)  ((c)->tokidx--)

STATICF void ysFEParseExpr(ysfec *fec);
STATICF void ysFEParseAndExpr(ysfec *fec);
STATICF void ysFEParsePrimary(ysfec *fec);
STATICF void ysFETokenize(ysfec *fec, CONST char *srcexpr);
STATICF sword ysFEStrCmp(CONST char *str, size_t sz, CONST char *kword);
STATICF void ysFEPrintExpr(ysfec *fec);

/*
 * ysFECompile - compile a filter expression
 */
ysfe *ysFECompile(CONST char *srcexpr, sword nmap, CONST ysfemap *maps)
{
  ysfe    *fe;
  sword    nval, i;
  ysfetok *tok;
  ysfec    fec;
  ub1      expr[YSFEEXPMAX];

  fe = (ysfe *) ysmGlbAlloc(sizeof(ysfe), YSFE_TAG);
  DISCARD memset(fe, 0, sizeof(ysfe));
  yseTry
    {
      /* first, validate maps structure */
      for (i = 0, nval = 0; i < nmap; i++)
	{
	  if (maps[i].vidx > (ub1) nval)
	    nval = maps[i].vidx;
	  if ((maps[i].predcb && maps[i].relopcb) ||
	      (!maps[i].predcb && !maps[i].relopcb))
	    yseThrow(YS_EX_BADPARAM);
	}

      /* initialize the fe descriptor */
      fe->nval = nval;
      fe->nmap = nmap;
      fe->maps = maps;

      /* next, tokenize the source expression */
      fec.srcexpr = srcexpr;
      fec.nmap = nmap;
      fec.maps = maps;
      ysFETokenize(&fec, srcexpr);

      /* begin parse */
      fec.expp = expr;
      fec.cdepth = fec.depth = (sword) 0;
      fec.litffs = ysLstCreate();
      fec.litcnt = (sword) 0;
      fec.tokidx = (sword) 0;

      fe->lits = fec.lits;
      fe->litffs = fec.litffs;

      ysFEParseExpr(&fec);
      tok = ysFEGet(&fec);
      if (tok->toktyp != YSFE_EOS || fec.cdepth > 1)
	{
	  ysRecord(YSFE_ERR(1), YSLSEV_ERR, (char *) 0, YSLNONE);
	  ysFEPrintExpr(&fec);
	  yseThrow(YS_EX_FAILURE);
	}
      else
	*fec.expp++ = YSFE_EOS;

      /* finish fe descriptor */
      fe->exp = (ub1 *) ysmGlbAlloc(fec.expp - expr, "fe->exp");
      DISCARD memcpy(fe->exp, expr, fec.expp - expr);
      fe->estk =
	(dvoid **) ysmGlbAlloc(sizeof(dvoid *) * fec.depth, "fe->estk");
    }
  yseCatchAll
    ysFEFree(fe);
    fe = (ysfe *) 0;
  yseEnd

  return fe;
}

/*
 * ysFEParseExpr - parse a filter expression
 */
STATICF void ysFEParseExpr(ysfec *fec)
{
  ysfetok *tok;
  ub1     *ptr;

  ysFEParseAndExpr(fec);

  tok = ysFEGet(fec);
  while (tok->toktyp == YSFETOK_OP && tok->opval == ',')
    {
      *fec->expp++ = ',';
      ptr = fec->expp;
      *fec->expp++ = (ub1) 0;
      ysFEParseAndExpr(fec);
      fec->cdepth--;
      if (fec->expp - ptr > 255)
	{
	  ysRecord(YSFE_ERR(2), YSLSEV_ERR, (char *) 0, YSLNONE);
	  ysFEPrintExpr(fec);
	  yseThrow(YS_EX_FAILURE);
	}
      *ptr = (ub1) (fec->expp - ptr - 1);
      tok = ysFEGet(fec);
    }

  ysFEUnget(fec);
}

/*
 * ysFEParseAndExpr - parse and-expr
 */
STATICF void ysFEParseAndExpr(ysfec *fec)
{
  ysfetok *tok;
  ub1     *ptr;

  ysFEParsePrimary(fec);

  tok = ysFEGet(fec);
  while ((tok->toktyp == YSFETOK_OP &&
       (tok->opval == '&' || tok->opval == '~' ||
	tok->opval == '(')) || tok->toktyp == YSFETOK_MAP)
    {
      *fec->expp++ = '&';
      ptr = fec->expp;
      *fec->expp++ = (ub1) 0;
      if (tok->toktyp != YSFETOK_OP || tok->opval != '&')
	ysFEUnget(fec);
      ysFEParsePrimary(fec);
      fec->cdepth--;
      if (fec->expp - ptr > 255)
	{
	  ysRecord(YSFE_ERR(2), YSLSEV_ERR, (char *) 0, YSLNONE);
	  ysFEPrintExpr(fec);
	  yseThrow(YS_EX_FAILURE);
	}
      *ptr = (ub1) (fec->expp - ptr - 1);
      tok = ysFEGet(fec);
    }

  ysFEUnget(fec);
}

/*
 * ysFEParsePrimary - parse a primary
 */
STATICF void ysFEParsePrimary(ysfec *fec)
{
  ysfetok *tok, *optok;
  char    *str;
  dvoid   *ptr;
  sword    odepth;
  ub1      idx;

  tok = ysFEGet(fec);
  odepth = fec->cdepth;
  if (tok->toktyp == YSFETOK_MAP)
    {
      idx = tok->mapval;
      if (fec->maps[idx].relopcb)
	{
	  optok = ysFEGet(fec);
	  if (optok->toktyp != YSFETOK_RELOP)
	    {
	      ysRecord(YSFE_ERR(3), YSLSEV_ERR, (char *) 0,
			  YSLSTR(fec->maps[idx].nm), YSLEND);
	      ysFEPrintExpr(fec);
	      yseThrow(YS_EX_FAILURE);
	    }

	  *fec->expp++ = YSFE_VAR;
	  *fec->expp++ = fec->maps[idx].vidx;
	  fec->cdepth++;
	}

      tok = ysFEGet(fec);
      if (tok->toktyp == YSFETOK_STR)
	{
	  str = (char *) ysmGlbAlloc(tok->strsz + 1, "ysfe:tokstr");
	  DISCARD memcpy(str, tok->strptr, tok->strsz);
	  str[tok->strsz] = '\0';
	  if (fec->maps[idx].parsecb)
	    {
	      ptr = fec->maps[idx].parsecb(str);
	      ysmGlbFree((dvoid *) str);
	      if (!ptr)
		{
		  ysRecord(YSFE_ERR(4), YSLSEV_ERR, (char *) 0,
			      YSLSTR(fec->maps[idx].nm), YSLEND);
		  ysFEPrintExpr(fec);
		  yseThrow(YS_EX_FAILURE);
		}
	      DISCARD ysLstEnq(fec->litffs, (dvoid *) (fec->maps + idx));
	    }
	  else
	    {
	      ptr = (dvoid *) str;
	      DISCARD ysLstEnq(fec->litffs, (dvoid *) 0);
	    }

	  *fec->expp++ = YSFE_LIT;
	  *fec->expp++ = (ub1) fec->litcnt;
	  fec->cdepth++;
	  fec->lits[fec->litcnt++] = ptr;
	}
      else
	{
	  ysRecord(YSFE_ERR(5), YSLSEV_ERR, (char *) 0,
		      YSLSTR(fec->maps[idx].nm), YSLEND);
	  ysFEPrintExpr(fec);
	  yseThrow(YS_EX_FAILURE);
	}

      if (fec->cdepth > fec->depth)
	fec->depth = fec->cdepth;
      fec->cdepth = odepth + 1;
      *fec->expp++ = (fec->maps[idx].predcb ? YSFE_PRED : optok->opval);
      *fec->expp++ = idx;
    }
  else if (tok->toktyp == YSFETOK_OP)
    {
      if (tok->opval == '~')
	{
	  ysFEParsePrimary(fec);
	  *fec->expp++ = '~';
	}
      else if (tok->opval == '(')
	{
	  ysFEParseExpr(fec);
	  tok = ysFEGet(fec);
	  if (tok->toktyp != YSFETOK_OP || tok->opval != ')')
	    {
	      ysRecord(YSFE_ERR(6), YSLSEV_ERR, (char *) 0, YSLNONE);
	      ysFEPrintExpr(fec);
	      yseThrow(YS_EX_FAILURE);
	    }
	}
      else
	{
	  ysRecord(YSFE_ERR(7), YSLSEV_ERR, (char *) 0, YSLNONE);
	  ysFEPrintExpr(fec);
	  yseThrow(YS_EX_FAILURE);
	}
    }
  else
    {
      ysRecord(YSFE_ERR(7), YSLSEV_ERR, (char *) 0, YSLNONE);
      ysFEPrintExpr(fec);
      yseThrow(YS_EX_FAILURE);
    }
}

/*
 * ysFETokenize - tokenize the filter expression
 */
STATICF void ysFETokenize(ysfec *fec, CONST char *srcexpr)
{
  ysfetok    *tok;
  sword       i, toktop, litcnt;
  boolean     ok;
  CONST char *ptr, *start;

  tok = fec->toks, toktop = litcnt = 0;
  start = srcexpr;
  while (*srcexpr == ' ') srcexpr++;
  while (*srcexpr != '\0')
    {
      tok->tokpos = srcexpr - start;
      switch (*srcexpr)
	{
	case '(': case ')': case ',':
	  tok->toktyp = YSFETOK_OP, tok->opval = *srcexpr++;
	  break;
	case '<':
	  if (srcexpr[1] == '=')
	    tok->toktyp = YSFETOK_RELOP, tok->opval = YSFE_LE, srcexpr += 2;
	  else
	    tok->toktyp = YSFETOK_RELOP, tok->opval = '<', srcexpr++;
	  break;
	case '>':
	  if (srcexpr[1] == '=')
	    tok->toktyp = YSFETOK_RELOP, tok->opval = YSFE_GE, srcexpr += 2;
	  else
	    tok->toktyp = YSFETOK_RELOP, tok->opval = '>', srcexpr++;
	  break;
	case '=': case '!':
	  if (srcexpr[1] == '=')
	    tok->toktyp = YSFETOK_RELOP, tok->opval = *srcexpr, srcexpr += 2;
	  else
	    {
	      ysRecord(YSFE_ERR(8), YSLSEV_ERR, (char *) 0, YSLNONE);
	      ysFEPrintExpr(fec);
	      yseThrow(YS_EX_FAILURE);
	    }
	  break;
	case '"':
	  srcexpr++;
	  for (ptr = srcexpr; *ptr != '"' && *ptr != '\0'; ptr++) ;
	  if (*ptr != '"')
	    {
	      ysRecord(YSFE_ERR(9), YSLSEV_ERR, (char *) 0, YSLNONE);
	      ysFEPrintExpr(fec);
	      yseThrow(YS_EX_FAILURE);
	    }
	  tok->toktyp = YSFETOK_STR;
	  tok->strsz = ptr - srcexpr;
	  tok->strptr = srcexpr;
	  srcexpr = ptr + 1;
	  litcnt++;
	  break;
	default:
	  for (ptr = srcexpr, ok = TRUE; ok; ptr++)
	    switch (*ptr)
	      {
	      case ' ': case '(': case ')': case '<': case '>':
	      case '=': case '!': case ',': case '\0':
		ok = FALSE;
	      }

	  ptr--;
	  tok->toktyp = YSFETOK_STR;
	  tok->strsz = ptr - srcexpr;
	  tok->strptr = srcexpr;
	  srcexpr = ptr;

	  /* check for reserved words and names */
	  if (!ysFEStrCmp(tok->strptr, tok->strsz, "OR"))
	    tok->toktyp = YSFETOK_OP, tok->opval = ',';
	  else if (!ysFEStrCmp(tok->strptr, tok->strsz, "AND"))
	    tok->toktyp = YSFETOK_OP, tok->opval = '&';
	  else if (!ysFEStrCmp(tok->strptr, tok->strsz, "NOT"))
	    tok->toktyp = YSFETOK_OP, tok->opval = '~';
	  else
	    {
	      for (i = 0; i < fec->nmap &&
		   ysFEStrCmp(tok->strptr, tok->strsz, fec->maps[i].nm); i++) ;
	      if (i < fec->nmap)
		tok->toktyp = YSFETOK_MAP, tok->mapval = (ub1) i;
	      else
		litcnt++;
	    }
	  break;
	}

      if (toktop == YSFETOKMAX)
	{
	  ysRecord(YSFE_ERR(2), YSLSEV_ERR, (char *) 0, YSLNONE);
	  ysFEPrintExpr(fec);
	  yseThrow(YS_EX_FAILURE);
	}
      tok++, toktop++;
      while (*srcexpr == ' ') srcexpr++;
    }

  tok->toktyp = YSFE_EOS;
  tok->tokpos = srcexpr - start;
  fec->lits = (dvoid **) ysmGlbAlloc(sizeof(dvoid *) * litcnt, "fe->lits");
}

/*
 * ysFEStrCmp - compare a length-marked string with a null-terminated string
 */
STATICF sword ysFEStrCmp(CONST char *str, size_t sz, CONST char *kword)
{
  while (sz && *kword != '\0' && toupper(*str) == toupper(*kword))
    str++, kword++, sz--;
  if (!sz && *kword == '\0')
    return 0;
  else
    return (*str - *kword);
}

/*
 * ysFEPrintExpr - print the expression with the error position marked
 */
STATICF void ysFEPrintExpr(ysfec *fec)
{
  ysstr   *str;
  ysfetok *tok;

  str = ysStrCreate(fec->srcexpr);
  tok = fec->toks + (fec->tokidx-1);
  str = ysStrIns(str, tok->tokpos, "@@");
  ysRecord(YSFE_ERR(10), YSLSEV_ERR, (char *) 0,
	   YSLSTR(ysStrToText(str)), YSLEND);
  ysStrDestroy(str);
}
