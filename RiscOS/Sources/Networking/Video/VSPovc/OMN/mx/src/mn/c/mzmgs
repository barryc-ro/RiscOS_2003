/* Copyright (c) Oracle Corporation 1994.  All Rights Reserved. */

/*
  NAME
    mzmgs.c
  DESCRIPTION
    Media Zerver ManaGer Service module.  This contains code linked
    into servers to export the common mib for the services they
    contain.

  PUBLIC FUNCTIONS
    sword mzmgsAddCommonMib( ... );
    void mzmgsStatChange( mnrs *svc, ub4 new_state );
    mzmguTimeTicks mzmgsTimeStamp(void);

  PRIVATE FUNCTIONS
    ub4	    mzmgsInit(void);
    mzmgsSvc *mzmgsSLookup( mzmgsContext *ctx, mnrs *svc );
    mzmgsSvc *mzmgsNewSvc( mzmgsContext *ctx );
    void    mzmgsGProcInfo( mnrsc  *call, mnbv  *inargs, ub4 incnt );
    void    mzmgsGSvcInfo( mnrsc  *call, mnbv  *inargs, ub4 incnt );
    char    *mzmgsAffinity();

  NOTES

  MODIFIED   (MM/DD/YY)
    dbrower   11/29/94 -  created.
    dbrower   12/ 9/94 - added mzmgaGInfo to clean up RPC handler.
			Added call status and uptime to info return so
			the caller can know if we failed, and so he
			can adjust his uptime to account for skew and
			discontinuities.   (Much is to be done with
			uptime handling, still).
    dbrower   12/15/94 - Fixed olint signed/unsigned errors, now
		        that I know about mnxSB4.
    dbrower   12/22/94 - Changed parens in mzmgsTimeStamp, to make
			sure the division is happening unsigned.  The
			value from smnClock got big enough to appear
			to be negative, and the old expression kept
			that negativity in the divide, resulting in
			negative time stamps.  We'll leave the
			mzmguTimeTicks type signed for differences,
			for now, but this may need to be revisited.
    dbrower   02/ 8/95 -  shut up bogus ncube warnings, "used but
			not set" and "set but not used"
    dbrower   03/16/95 -  Fix bug 270825 and a UMR detected with
			purify in ocs, where there are multiple services.
    dbrower   04/ 6/95 -  Add "SetSvcAdminState" call to facilitate
			remote shutdown.  This may cause the program
			to exit.
    dbrower   05/ 8/95 -  Add "DelCommonMib" call to recycle memory
			from removed services.
    dbrower   06/23/95 -  convert to ysm allocator.
    dbrower   08/ 1/95 -  change smnClock to ysTicks.
    yjing     12/19/95 -  use ys layer functions instead of smzmgs functions.
    yjing     12/19/95 -  add private mzmgsAffinity since ysGetAffinity 
			  may return <nil>.
    yjing     12/19/95 -  add new public function mzmgsCpuCs().
    dbrower   07/18/96 -  fix bug 383397 by using ysGetUpTime instead of
			  ysClock.
*/
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

#ifndef MN_ORACLE
#include <mn.h>
#endif

#ifndef MNR_ORACLE
#include <mnr.h>
#endif

#ifndef MNRC_ORACLE
#include <mnrc.h>
#endif

#ifndef MNX_ORACLE
#include <mnx.h>
#endif

#ifndef MZMGS_ORACLE
#include <mzmgs.h>
#endif

#ifndef MZMGU_ORACLE
#include <mzmgu.h>
#endif

#ifndef MTCCTX_ORACLE
#include <mtcctx.h>
#endif

#ifndef YS_ORACLE
#include <ys.h>
#endif

#ifndef YSTM_ORACLE
#include <ystm.h>
#endif

/* PRIVATE TYPES AND CONSTANTS */

/* Stored data from an mzmgsAddMonSvc call.
 
   This doesn't contain an embedded mzmguSStats structure like
   the mzmguSInfo struct, because we'll generate that on the fly
   all the time and don't want to take the space here.
*/   
typedef struct
{
  mzmgsStFunc *statFunc_mzmgsSvc;	/* function to get stats with */
  dvoid	    *statArg_mzmgsSvc;		/* arg to give to statFunc */
  mzmgsAdminFunc *adminFunc_mzmgsSvc;	/* function to get stats with */
  dvoid	    *adminArg_mzmgsSvc;		/* arg to give to statFunc */
  mnrs	    *svcRpc_mzmgsSvc;		/* the service in question */

  sb4		    svcType_mzmgsSvc;		/* type of service */
  mzmguTimeTicks    operStatChanged_mzmgsSvc;	/* time stamp  */
  mzmguTimeTicks    upTime_mzmgsSvc; /* time stamp at svc announce */

} mzmgsSvc;

/* default increment size for svcArray_mzmgsContext[] */

# define MZMGS_DEFINCR	10

typedef struct			/* our global memory */
{
  /* service info array */
  sword	    incrAmt_mzmgsContext; /* amount to increment array size */
  sword	    numSlots_mzmgsContext; /* number of slots in array */
  mzmgsSvc  *svcArray_mzmgsContext; /* array of services */
  sword	    numSvcs_mzmgsContext; /* number of active svcs in array */

  mzmguPInfo	pi_mzmgsContext;

  ub4	    operStat_mzmgsContext; /* can't really change? */
  ub4	    adminStat_mzmgsContext; /* can't really change? */

} mzmgsContext;


/* PRIVATE FUNCTION DECLARATIONS */

/* Static Funcs */

STATICF sb4 mzmgsInit(void);		/* prepare to use service MIB */
STATICF mzmgsSvc *mzmgsSLookup( mzmgsContext *ctx, mnrs *svc );
STATICF mzmgsSvc *mzmgsNewSvc( mzmgsContext *ctx );

STATICF sb4 mzmgsGInfo( mnrsc *call, ub4 svcstats, ub4 procstats,
	       mzmguTimeTicks *now, mzmguSInfo *si, mzmguPInfo *pi );

STATICF void mzmgsGSvcProcInfo( mnrsc  *call, mnbv  *inargs, ub4 incnt );
STATICF void mzmgsSetAdminState( mnrsc  *call, mnbv  *inargs, ub4 incnt );

STATICF char *mzmgsAffinity(void);

/* STATIC DATA */

externdef CONST_W_PTR mnrid mzmgsCidCommonMib =
  { { 1, 212, 55, 114, 131, 169, 217, 223  }, MNVERS(1, 0) };

externdef CONST_W_PTR mnrod   mzmgsROpers[] =
{
    {mzmgsGSvcProcInfo,	    "GSvcProcInfo"},
    {mzmgsSetAdminState,    "SetSvcAdminState"}
};

externdef CONST_W_PTR mnrcd   mzmgsRComp =
{  &mzmgsCidCommonMib,
     sizeof(mzmgsROpers)/sizeof(mnrod), mzmgsROpers, "CommonMib" };

/* PUBLIC FUNCTIONS */



/* svc call -- add new service to this process's list */

/* see mzmgs.h */
sb4 mzmgsCommonMib(mnrs *svcRpc, sb4 svcType,
		   mzmgsStFunc *svcStatFunc, dvoid *svcStatArg,
		   mzmgsAdminFunc *svcAdminFunc, dvoid *svcAdminArg )
		   
{
  mzmgsContext *ctx;
  mzmgsSvc *svc;
  sb4 rv = 0;

  do				/* one time only, to break from */
  {
    if( (rv = mzmgsInit()) )
      break;

    if( !(ctx = (mzmgsContext *)mtcctxGet( MZMGSCTX, (ub4)0 )) )
    {
      /* shouldn't happen if init worked! */
      rv = mzmInitFailed;
      break;
    }

    /* find old service, or get new values. */
    if( !(svc = mzmgsSLookup( ctx, svcRpc )))
    {
      if( !(svc = mzmgsNewSvc( ctx )) )
      {
	rv = mzmMallocFailed;
	break;
      }
      /* add the common mib rpc services to the svc */
      rv = mnrAddComp( svcRpc, &mzmgsRComp, (dvoid *)svc );
    }
    svc->svcRpc_mzmgsSvc = svcRpc;
    svc->svcType_mzmgsSvc = svcType;
    svc->upTime_mzmgsSvc =
      svc->operStatChanged_mzmgsSvc =
	mzmgsTimeStamp();
    svc->statFunc_mzmgsSvc = svcStatFunc;
    svc->statArg_mzmgsSvc = svcStatArg;
    svc->adminFunc_mzmgsSvc = svcAdminFunc;
    svc->adminArg_mzmgsSvc = svcAdminArg;

  } while ( FALSE );

  
  return rv;
}

/* see mzmgs.h */
sb4 mzmgsAddCommonMib(mnrs *svcRpc, sb4 svcType,
		      mzmgsStFunc *svcStatFunc, dvoid *svcStatArg )
{
  return( mzmgsCommonMib( svcRpc, svcType, svcStatFunc, svcStatArg,
			 (mzmgsAdminFunc*)0, (dvoid *)0) );
}


/* see mzmgs.h */
sb4 mzmgsDelCommonMib(mnrs *svcRpc)
{
  mzmgsContext *ctx;
  mzmgsSvc *svc;
  mzmgsSvc *lsvc;
  sb4 rv = 0;

  do				/* one time only, to break from */
  {
    if( (rv = mzmgsInit()) )
      break;

    if( !(ctx = (mzmgsContext *)mtcctxGet( MZMGSCTX, (ub4)0 )) )
    {
      /* shouldn't happen if init worked! */
      rv = mzmInitFailed;
      break;
    }

    /* find old service and delete it.  Don't remove the
       component; assume that server handle deletion takes
       care of that. */
    if( (svc = mzmgsSLookup( ctx, svcRpc )) )
    {
      /* copy following entries down; no memcpy because of overlap */
      lsvc = &ctx->svcArray_mzmgsContext[ctx->numSvcs_mzmgsContext-1];
      while( svc < lsvc )
      {
	svc[0] = svc[1];
	svc++;
      }
      ctx->numSvcs_mzmgsContext--;
    }

  } while ( FALSE );

  return rv;
}



/* svc call -- note change in operating status  */

/* ARGSUSED */
/* see mzmgs.h */
void mzmgsStatChange( mnrs *svcRpc, ub4 newState )
{
  mzmgsContext *ctx;
  mzmgsSvc *svc;

  if(!(ctx = (mzmgsContext *)mtcctxGet( MZMGSCTX, (ub4)0 )))
    return;
  
  svc = mzmgsSLookup( ctx, svcRpc );
  if( svc )
  {
    svc->operStatChanged_mzmgsSvc = mzmgsTimeStamp();

    /* Raise trap here? Maybe FIXME. */
  }
}


/* svc (and general) call -- get a timestamp for "last" fields */

/* see mzmgs.h */
mzmguTimeTicks mzmgsTimeStamp(void)
{
  sysb8	ticks;
  sysb8 tenk;

  ysGetUpTime( &ticks );

  /* mzm ticks are 1/100, not 1/1000000 of a second.  */
  sysb8mak( &tenk, (sb4)0, (ub4)10000 );
  sysb8div( &ticks, &ticks, &tenk );

  return( (mzmguTimeTicks)(sysb8msk( &ticks )) );
}

/* PRIVATE FUNCTIONS */

/* ---------------------------------------------------------------- */

/* ---------------------------- mzmgsInit ---------------------------- */
/*
  NAME
    mzmgsInit
  DESCRIPTION
    Set up mzmgs system; idempotent, may be called multiple times.
  PARAMETERS
    none
  RETURNS
    0 if OK
    mzmNoContextInint	-- context init failure
    mzmMallocFailed	-- allocation failure
  NOTES
    <x>
  MODIFIED   (MM/DD/YY)
    dbrower   11/29/94 -  created.
*/
STATICF sb4 mzmgsInit(void)		/* prepare to use service MIB */
{
  sb4 rv = 0;
  mzmgsContext *ctx = (mzmgsContext*)NULL;

  mzmguPInfo	*pi;		/* proc info */
  mzmguPSInfo	*ps;		/* proc static info */
  mzmguPRInfo	*pr;		/* proc running info */

  do
  {
    if( !mtcctxInit() )
    {
      rv = mzmNoContextInit;
      break;
    }
    if( mtcctxGet( MZMGSCTX, (ub4)0 ) ) /* already done? */
    {
      rv = 0;
      mtcctxDone();		/* clean up multiple init refcnt */
      break;
    }
    if( !(ctx = (mzmgsContext *)ysmGlbAlloc( sizeof(*ctx),"mzmgsContext")) )
    {
      rv = mzmMallocFailed;
      break;
    }
    ctx->incrAmt_mzmgsContext = MZMGS_DEFINCR;
    ctx->numSlots_mzmgsContext = 0;
    ctx->svcArray_mzmgsContext = (mzmgsSvc*)NULL;
    ctx->numSvcs_mzmgsContext = 0;

    /* fill in procInfo first time */
    pi = &ctx->pi_mzmgsContext;

    ps = &pi->static_mzmguPInfo;

    /* mke is dead, ask YS */
    ps->procName_mzmguPSInfo = (char *)ysProgName();

    ps->procHost_mzmguPSInfo = (char *)ysGetHostName();
    ps->procAffinity_mzmguPSInfo = (char *)ysGetAffinity();
    if ( !(ps->procAffinity_mzmguPSInfo) )
       ps->procAffinity_mzmguPSInfo = (char *)mzmgsAffinity();

    pr = &pi->run_mzmguPInfo;
    pr = pr;			/* shut up "set but not used"  */
    pr->pid_mzmguPRInfo = (char *)ysGetPid();
    pr->operStatus_mzmguPRInfo = mzmguPRunning;
    pr->cpuCs_mzmguPRInfo = 0;
    pr->memKb_mzmguPRInfo = 0;

    if( MTCCTXSUCC == mtcctxPut( MZMGSCTX, (ub4)0, (dvoid *)ctx) )
    {
      rv = 0;
    }
    else
    {
      rv = mzmNoContextInit;
      ysmGlbFree( (dvoid *)ctx );
    }

  } while (FALSE);

  return( rv );
}


/* lookup svc svc.  Scan OK because array is small */

/* ---------------------------- mzmgsSLookup ---------------------------- */
/*
  NAME
    mzmgsSLookup
  DESCRIPTION
    Lookup a service by it's rpc handle.  This does a scan of an
    array.  This is OK, because few processes will have more than a
    handful of entries.
    
  PARAMETERS
    ctx	    -- the mgms context for the process.
    svcRpc  -- the rpc handle to locate.
  RETURNS
    pointer to the service block, or NULL if not found.
  NOTES

  MODIFIED   (MM/DD/YY)
    dbrower   11/29/94 -  created.
*/
STATICF mzmgsSvc *mzmgsSLookup( mzmgsContext *ctx, mnrs *svcRpc )
{
  mzmgsSvc *svc;
  sword i;

  if( !ctx || !svcRpc )
    return( (mzmgsSvc*)NULL );

  for(i = 0, svc = ctx->svcArray_mzmgsContext;
      i < ctx->numSlots_mzmgsContext; i++, svc++ )
    if( svc->svcRpc_mzmgsSvc == svcRpc )
      return( svc );

  return( (mzmgsSvc*)NULL );
}

/* ---------------------------- mzmgsNewSvc ---------------------------- */
/*
  NAME
    mzmgsNewSvc
  DESCRIPTION
    Get an unused service entry.  This picks a slot out of a table,
    and may expand the table if needed.
  PARAMETERS
    ctx	    -- the msmgz context for the process.
  RETURNS
    pointer to a suitable service, or NULL on allocation failure.
  NOTES
    
  MODIFIED   (MM/DD/YY)
    dbrower   11/29/94 -  created.
*/
STATICF mzmgsSvc *mzmgsNewSvc( mzmgsContext *ctx )
{
  mzmgsSvc  *svc;
  sword	    nelm;

  /* know we have free one -- the next one. */
  if( ctx->numSvcs_mzmgsContext < ctx->numSlots_mzmgsContext ) 
  {
    svc = &ctx->svcArray_mzmgsContext[ctx->numSvcs_mzmgsContext];
  }
  else				/* need to extend array */
  {
    nelm = ctx->incrAmt_mzmgsContext + ctx->numSlots_mzmgsContext;
    if( (svc = (mzmgsSvc *)ysmGlbAlloc( nelm * sizeof(*svc), "mzmgsSvc")) )
    {
      DISCARD memset( svc, 0, nelm * sizeof(*svc) );
      DISCARD memcpy( (dvoid *)svc, (dvoid *)ctx->svcArray_mzmgsContext,
		     ctx->numSlots_mzmgsContext * sizeof(*svc) );
      if( ctx->svcArray_mzmgsContext )
	ysmGlbFree( (dvoid *)ctx->svcArray_mzmgsContext );
      ctx->svcArray_mzmgsContext = svc;
      svc = &svc[ ctx->numSlots_mzmgsContext ];
      ctx->numSlots_mzmgsContext = nelm;
    }
  }
  if( svc )
    ctx->numSvcs_mzmgsContext++;

  return( svc );
}

/* ---------------------------------------------------------------- */

# ifdef NEVER

/* Handle async callback from mzmcTrap() and call the registered
   callback
*/
STATICF void mzmcTrapHandler( void  *usrp, sb4   val )
{
  mzmcctx  *ctx = (mzmcctx *)usrp;

  /* call the registered call back with the disposition of the RPC call */
  /*  DISCARD (ctx->mzmcctxtcb)(val); */
}

/* Send a trap to the monitoring process                         */
mzmcErr   mzmcTrap VAFD((cx, trapSrc, trapId, addr VAAELLIPSIS))
mzmcctx  *cx VAFDAD
ub4   trapSrc VAFDAD
ub4   trapId VAFDAD
mna  *addr VAFDAD
VAFDELLIPSIS
{
  va_list     p;
  mnx        *xstr;
  mnbv       *inargs;
  ub4         incnt;
  mnHandler   handler = mnDiscard;
  dvoid      *usrp = 0;
  sb4         sts = 0;

  /* make sure we have a binding with the server before we marshal */
  if (!ctx->mzmgsRegBh)
  {
    ctx->mzmgsRegBh = mnrFindServer(MON_PROC_NAME, (const mnrid *)0);
    if (!ctx->mzmgsRegBh) return mzmcBindErr;
  }

  /* marshal aguments */
  xstr = mnxCreate((mndrp *)0, MNXDIR_ENCODE, &inargs, &incnt, (dvoid *)0);
  if (!xstr) return mzmcMemErr;

  sts = mnxB4(xstr, &trapSrc);
  if (sts > 0) sts = mnxB4(xstr, &trapId);
  if (sts > 0) sts = mnxAddr(xstr, addr);
  /* should really be the server address */
  if (sts > 0) sts = mnxAddr(xstr, addr);

  /* bind up the variable arguments based on src and id */
  VASTART(p, addr);
  if (sts > 0)
  {
    switch (trapSrc)
    {
    case MZMCTSUSM:                                            /* usm source */
      switch (trapId)
      {
      case MZMCTILINKDOWN:
        /* encode link down arguments */
        {
          mna  *linkid;
          linkid = va_arg(p, mna *);
          sts = mnxAddr(xstr, linkid);
        }
        break;
      default:                                         /* default do nothing */
        break;
      }

    default:                                               /* default source */
      break;
    }
  }
  va_end(p);

  /* return if we couldn't marshal properly */
  if (sts < 1)
  {
    DISCARD mnxDestroy(xstr, TRUE);
    return mzmcFailed;
  }

  /* sync or async? */
  if (ctx->mzmcctxtcb)
  {
    handler = mzmcTrapHandler;
    usrp    = (dvoid *)cx;
  }
  /* make the trap call */
  sts = mnrCall(ctx->mzmgsRegBh, (dvoid **)0, "trap", inargs,
                incnt, (mnbv **)0, (ub4 *)0, handler, usrp);

  /* destroy the marshal'd arguments */
  DISCARD mnxDestroy(xstr, TRUE);

  if (sts) return mzmcFailed;

  return mzmcNoErr;
}

# endif


/* ---------------------------- mzmgsGInfo ---------------------------- */
/*
  NAME
    mzmgsGInfo
  DESCRIPTION
    Get info about service and/or process; called form RPC stub.
  PARAMETERS
    call	-- whose handle context is our context to reveal
		    the service;
    svcstats	-- non-zero if we want service stats;
    procstats	-- non-zero if we want process stats;
    si		-- the service info to fill.
    pi		-- the process info to fill
  RETURNS
    0 on success.
    mzmNoService if state is messed up.
*/
STATICF sb4 mzmgsGInfo( mnrsc *call, ub4 svcstats, ub4 procstats,
		       mzmguTimeTicks *now, mzmguSInfo *si, mzmguPInfo *pi )
{
  sb4		rv = 0;
  mzmgsContext	*ctx;
  mnrs		*sh;
  mzmgsSvc	*svc;		/* context for svc stats */

  mzmguSStats	*ss;		/* pointer to svc stats to send */

  mzmguPInfo	*ctx_pi;	/* pi in my context */
  mzmguPRInfo	*pr;		/* makes code neater below */

  *now = mzmgsTimeStamp();

  /* get service desc for this service. */

  ctx = (mzmgsContext *)mtcctxGet( MZMGSCTX, (ub4)0 );
  sh = mnrGetHandle( call );
  svc = (mzmgsSvc*)0;
  if( svcstats && !(svc = mzmgsSLookup( ctx, sh )) )
  {
    rv = mzmNoService;

    if( svcstats )
      DISCARD memset( (dvoid *)si, 0, sizeof(*si) );

    if( procstats )
      DISCARD memset( (dvoid *)pi, 0, sizeof(*pi) );

    return mzmNoService;
  }

  if( svcstats )
  {
    /* fill in wrapper stuff */
    si->svcType_mzmguSInfo = svc->svcType_mzmgsSvc;
    si->svcUpTime_mzmguSInfo = svc->upTime_mzmgsSvc;
    si->changedOperStatus_mzmguSInfo = svc->operStatChanged_mzmgsSvc;

    ss = &si->svcStats_mzmguSInfo; /* dest pointer */

    /* If he's got a function, call it */
    if( svc->statFunc_mzmgsSvc )
      (*svc->statFunc_mzmgsSvc)( ss, svc->statArg_mzmgsSvc, &ss );
    else
      ss  = (mzmguSStats*)svc->statArg_mzmgsSvc;

    /* if no stats now take some default values */
    if( !ss )
    {
      ss = &si->svcStats_mzmguSInfo;
      ss->OperStatus_mzmguSStats = mzmguStRunning;
      ss->AdminStatus_mzmguSStats = mzmguStRunning;
      ss->ChangedAdminStatus_mzmguSStats = svc->upTime_mzmgsSvc;
      ss->InboundAssocs_mzmguSStats = 0;
      ss->OutboundAssocs_mzmguSStats = 0;
      ss->TotInboundAssocs_mzmguSStats = 0;
      ss->TotOutboundAssocs_mzmguSStats = 0;
      ss->LastInbound_mzmguSStats = svc->upTime_mzmgsSvc;
      ss->LastOutbound_mzmguSStats = svc->upTime_mzmgsSvc;
      ss->RejectedInboundAssocs_mzmguSStats = 0;
      ss->FailedOutboundAssocs_mzmguSStats = 0;
    }

    /* stats are somewhere else; copy to the dest buffer */
    if( ss != &si->svcStats_mzmguSInfo ) 
      DISCARD memcpy((dvoid*)&si->svcStats_mzmguSInfo,
		     (dvoid*)ss, sizeof(*ss));
  }
  if( procstats )
  {
    ctx_pi = &ctx->pi_mzmgsContext;
    pr = &ctx_pi->run_mzmguPInfo;
    pr = pr;			/* shut up "set but not used" */
    pr->cpuCs_mzmguPRInfo = mzmgsCpuCs();
    pr->memKb_mzmguPRInfo = ysGetMemUsage();
    DISCARD memcpy( (dvoid*)pi, (dvoid*)ctx_pi, sizeof(*pi) );
  }
  return( rv );
}

/* ------------------------- mzmgsCpuCs ----------------------------------- */
ub4 mzmgsCpuCs(void)
{
    sysb8	cpu_time;
    sysb8 	ten;
	
    DISCARD ysGetCpuTime( &cpu_time );
    DISCARD sysb8mak( &ten, (sb4)0, (ub4)10000 );
    DISCARD sysb8div( &cpu_time, &cpu_time, &ten );
    return( (ub4)sysb8msk( &cpu_time ) );
}

/* ------------------------- mzmgsGSvcProcInfo ---------------------------- */
/*
  NAME
    mzmgsGSvcProcInfo
  DESCRIPTION
    RPC server stub to get the service and process information for
    the mzmga agent system.
  PARAMETERS
    mnrsc	-- the call structure;
    inargs	-- the argument binding vector
    incnt	-- the number of supplied arguments.
    
    The expected input arguments are:

	ub4 svcstats   non-zero if want service info
	ub4 procstats   non-zero if want process info.

    The outputs are:

	ub4 call status - 0 == OK, or mzm error value.
	ub4 current uptime stamp.
	if( svcstats )
	{
	    -- return a mzmguSInfo struct:
	    B4	svcType
	    B4  upTime
	    B4  OperStatChanged
	    --- an embedded mzmguSStats struct
	    B4  OperStatus
	    B4  AdminStatus
	    B4  ChangedAdminStatus
	    B4  InboundAssocs
	    B4  OutboundAssocs
	    B4  TotInboundAssocs
	    B4  TotOutboundAssocs
	    B4  LastInbound
	    B4  LastOutbound
	    B4  RejectedInbound
	    B4  FailedOutbound
	}
	if( procstats )
	{
	    -- return an mzmguPInfo struct:
	    --- an embedded mzmguPSInfo
	    DynStr	procName	-- may be null or empty.
	    DynStr	host
	    DynStr	affinity
	    --- an embedded mzmguPRInfo
	    DynStr	pid
	    B4		operStat
	    B4		cpuCs
	    B4		memKb
	}
	

  RETURNS
    none
  NOTES
    
  MODIFIED   (MM/DD/YY)
    dbrower   11/29/94 -  created.
*/
STATICF void  mzmgsGSvcProcInfo( mnrsc  *call, mnbv  *inargs, ub4   incnt )
{
  mnx	    *xstr;
  mnbv	    *outargs;
  ub4	    outcnt;
  boolean   sts;		/* marshalling status */

  ub4	    procstats;		/* input flag - want proc stats? */
  ub4	    svcstats;		/* input flag - want svc stats?  */
  sb4	    ret_stat;

  mzmguTimeTicks  now;

  mzmguSInfo	si;		/* full local buffer to send back */
  mzmguSStats	*ss;		/* makes code neater below */

  mzmguPInfo	pi;
  mzmguPSInfo	*ps;		/* makes code neater below */
  mzmguPRInfo	*pr;		/* makes code neater below */

  /* unmarshal arguments - flags wanting svcstats and procstats */

  procstats = svcstats = FALSE;

  xstr = mnxCreate((mndrp *)0, MNXDIR_DECODE, &inargs, &incnt, (dvoid *)0);
  sts = mnxB4(xstr, &svcstats) && mnxB4(xstr, &procstats);
  mnxDestroy(xstr, FALSE);

  ret_stat = mzmgsGInfo( call, svcstats, procstats, &now, &si, &pi );
  if( !sts )
    ret_stat = mzmSvcGetArg;

  /* package up output */
  xstr = mnxCreate((mndrp *)0, MNXDIR_ENCODE, &outargs, &outcnt, (dvoid *)0);

  if( (sts = mnxSB4( xstr, &ret_stat )) )
    sts = mnxSB4( xstr, (sb4*)&now );

  if( sts && svcstats ) do		/* return an mzmguSInfo */
  {
    ss = &si.svcStats_mzmguSInfo;

    /* initial element */
    sts = mnxSB4( xstr, &si.svcType_mzmguSInfo );
    if( !sts ) break;
    sts = mnxSB4( xstr, (sb4*)&si.svcUpTime_mzmguSInfo );
    if( !sts ) break;
    sts = mnxSB4( xstr, (sb4*)&si.changedOperStatus_mzmguSInfo );
    if( !sts ) break;

    /* an embedded mzmguSStats */
    sts = mnxB4( xstr,	&ss->OperStatus_mzmguSStats );
    if( !sts ) break;
    sts = mnxB4( xstr,	&ss->AdminStatus_mzmguSStats );
    if( !sts ) break;
    sts = mnxSB4( xstr, (sb4*)	&ss->ChangedAdminStatus_mzmguSStats );
    if( !sts ) break;
    sts = mnxB4( xstr,	&ss->InboundAssocs_mzmguSStats );
    if( !sts ) break;
    sts = mnxB4( xstr,	&ss->OutboundAssocs_mzmguSStats );
    if( !sts ) break;
    sts = mnxB4( xstr,	&ss->TotInboundAssocs_mzmguSStats );
    if( !sts ) break;
    sts = mnxB4( xstr,	&ss->TotOutboundAssocs_mzmguSStats );
    if( !sts ) break;
    sts = mnxSB4( xstr, (sb4*)	&ss->LastInbound_mzmguSStats );
    if( !sts ) break;
    sts = mnxSB4( xstr, (sb4*)	&ss->LastOutbound_mzmguSStats );
    if( !sts ) break;
    sts = mnxB4( xstr,	&ss->RejectedInboundAssocs_mzmguSStats );
    if( !sts ) break;
    sts = mnxB4( xstr,	&ss->FailedOutboundAssocs_mzmguSStats );
  } while( FALSE );

  if( sts && procstats ) do		/* return an msmguPInfo */
  {
    /* An embedded mzmguPSInfo... */
    ps = &pi.static_mzmguPInfo;
    sts = mnxDynStr( xstr, &ps->procName_mzmguPSInfo );
    if( !sts ) break;
    sts = mnxDynStr( xstr, &ps->procHost_mzmguPSInfo );
    if( !sts ) break;
    sts = mnxDynStr( xstr, &ps->procAffinity_mzmguPSInfo );
    if( !sts ) break;

    /* and an embedded mzmguPRInfo */
    pr = &pi.run_mzmguPInfo;
    sts = mnxDynStr( xstr, &pr->pid_mzmguPRInfo );
    if( !sts ) break;
    sts = mnxB4( xstr, &pr->operStatus_mzmguPRInfo );
    if( !sts ) break;
    sts = mnxB4( xstr, &pr->cpuCs_mzmguPRInfo );
    if( !sts ) break;
    sts = mnxB4( xstr, &pr->memKb_mzmguPRInfo );
  } while( FALSE );

  /* now send it back */

  DISCARD mnrReturnCall(call, outargs, outcnt, mnDiscard, (dvoid *)0);
  mnxDestroy(xstr, TRUE);
}



/* -------------------------- mzmgsSetAdminState -------------------------- */
/*
  NAME
    mzmgsSetAdminState
  DESCRIPTION
    RPC function to set admin state for a service.
  PARAMETERS
    mnrsc	-- the call structure;
    inargs	-- the argument binding vector
    incnt	-- the number of supplied arguments.
    
    The expected input arguments are:

	ub4 newState, one of the mzmguSt values.

    The outputs are:

	ub4 call status - 0 == OK, or mzm error value.
    
  RETURNS
    none.
  MODIFIED   (MM/DD/YY)
    dbrower   04/ 6/95 -  created.
*/

STATICF void  mzmgsSetAdminState( mnrsc  *call, mnbv  *inargs, ub4   incnt )
{
  mnx	    *xstr;
  mnbv	    *outargs;
  ub4	    outcnt;
  boolean   sts;		/* marshalling status */
  mzmgsContext	*ctx;
  mnrs		*sh;
  mzmgsSvc	*svc;		/* context for svc stats */

  ub4	    newState;
  sb4	    ret_stat = 0;

  /* unmarshal arguments - flags wanting svcstats and procstats */

  xstr = mnxCreate((mndrp *)0, MNXDIR_DECODE, &inargs, &incnt, (dvoid *)0);
  sts = mnxB4(xstr, &newState);
  mnxDestroy(xstr, FALSE);

  if( !sts )
    ret_stat = mzmSvcGetArg;

  /* get service desc for this service. */

  ctx = (mzmgsContext *)mtcctxGet( MZMGSCTX, (ub4)0 );
  sh = mnrGetHandle( call );
  if( !(svc = mzmgsSLookup( ctx, sh )) )
    ret_stat = mzmNoService;

  /* package up output */
  xstr = mnxCreate((mndrp *)0, MNXDIR_ENCODE, &outargs, &outcnt, (dvoid *)0);
  sts = mnxSB4( xstr, &ret_stat );
  DISCARD mnrReturnCall(call, outargs, outcnt, mnDiscard, (dvoid *)0);
  mnxDestroy(xstr, TRUE);

  /* do this AFTER ReturnCall, so if we exit the caller doesn't block. */
  if( !ret_stat )
  {
    if( svc->adminFunc_mzmgsSvc )
    {
      (*svc->adminFunc_mzmgsSvc)( newState, svc->adminArg_mzmgsSvc );
    }
    else if( newState == mzmguStDown )
    {
      /* WARNING!!! WARNING!!!  THIS IS BRUTAL!!! */
      mnTerm();
      exit( 0 );
    }
  }
}

/* mzmgsAffinity()  */
STATICF char *mzmgsAffinity(void)
{
  char *s;
  const char *buf = "none";
  if( (s = (char *)ysmGlbAlloc( strlen(buf)+ 1,"mzmgsAffinity" )) )
    DISCARD strcpy( s, buf );
  return( s );
}


