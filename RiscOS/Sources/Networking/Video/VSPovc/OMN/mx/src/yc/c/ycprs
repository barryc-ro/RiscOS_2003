/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ycprs.c - Parser
 *
 * HISTORY
 * 12/20/96 kcoleman    Bug #428565: kwdtab const qualifiers incorrect.
 * 04/12/96 kcoleman	Support for IAO code gen pragmas
 * 04/08/96 kcoleman	Use ysRecord for error reporting.
 * 01/04/96 kcoleman	Token garbage collection
 * 10/13/95 kcoleman    Support for TypeCode pseudo-objects
 * 07/25/95 kcoleman	Added support for parser trace flag
 * xx/xx/95 jolkin	Creation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif

typedef struct ycktd ycktd;

struct ycktd
{
  char *tokrep;                                      /* token representation */
  sb2   tokval;                                               /* token value */
};

externdef ysmtagDecl(YCONODE_TAG) = "AST node";

static CONST_W_PTR ycktd kwdtab[] =
{
  { "FALSE", YCTFALSE },
  { "TRUE", YCTTRUE },
  { "TypeCode", YCTTYPECODE },
  { "any", YCTANY },
  { "attribute", YCTATTRIBUTE },
  { "boolean", YCTBOOLEAN },
  { "case", YCTCASE },
  { "char", YCTCHAR },
  { "const", YCTCONST },
  { "context", YCTCONTEXT },
  { "default", YCTDEFAULT },
  { "double", YCTDOUBLE },
  { "enum", YCTENUM },
  { "exception", YCTEXCEPTION },
  { "float", YCTFLOAT },
  { "in", YCTIN },
  { "inout", YCTINOUT },
  { "interface", YCTINTERFACE },
  { "long", YCTLONG },
  { "module", YCTMODULE },
  { "octet", YCTOCTET },
  { "oneway", YCTONEWAY },
  { "out", YCTOUT },
  { "raises", YCTRAISES },
  { "readonly", YCTREADONLY },
  { "sequence", YCTSEQUENCE },
  { "short", YCTSHORT },
  { "string", YCTSTRING },
  { "struct", YCTSTRUCT },
  { "switch", YCTSWITCH },
  { "typedef", YCTTYPEDEF },
  { "union", YCTUNION },
  { "unsigned", YCTUNSIGNED },
  { "void", YCTVOID }
};

static CONST_DATA size_t kwdtabsiz = sizeof(kwdtab) / sizeof(ycktd);

STATICF dvoid *ycprAlloc(size_t len);
STATICF boolean ycprKywd(dvoid *ctx, sb2 tokid, pxtokn *tok);
STATICF void ycprGetNext(ycctx *ctx, pxtokn *tok);
STATICF sb2 ycprReserved(ycctx *ctx, char *nm);
STATICF sb2 ycprPragma( ycctx* ctx, CONST char* nm);

/*
 * ycprs - parsing entrypoint
 */
void ycprs(ycctx *ctx)
{
  sb1 err;
  boolean trace = FALSE;

  ctx->curln = ysLstHead(ctx->tu);
  ctx->pos = 0;
  ctx->tokq = ysLstCreate();

#ifdef PXDEBUG
    /* slax parser crashes if you set debug on and not built w/ PXDEBUG */
  {
    yslst* lst;
    lst = ysResGet( "mnidlc.debug-trace-type");
    if ( lst )
    {
      ysle* le;
      for ( le = ysLstHead( lst); le; le = ysLstNext(le) )
	if ( strcmp( "parse", (char*) ysLstVal(le)) == 0 )
        {
	   trace = TRUE;
	   break;
	}
    }
  }
#endif
   
  ycosyn((dvoid*)ctx, trace, ycprLex, ycprAlloc, ysmFGlbFree, ycprKywd, 
	&err, yct_identifier);

  if ( !err )
    DISCARD ycprLex( (dvoid*)ctx, PXFREETOK, ctx->lastTok);
  ysLstDestroy(ctx->tokq, (ysmff) 0);
}

/*
 * ycprAlloc - allocation wrapper
 */
STATICF dvoid *ycprAlloc(size_t len)
{
  return ysmGlbAlloc(len, "parser memory");
}

/*
 * ycprKywd - keyword determination
 */
/* ARGSUSED */
STATICF boolean ycprKywd(dvoid *ctxp, sb2 tokid, pxtokn *tok)
{
  return FALSE;
}

/*
 * ycprLex - lexical analysis
 */
pxtokn *ycprLex(dvoid *ctxp, sword action, ...)
{
  ycctx  *ctx;
  ycln   *ln;
  pxtokn *tok = (pxtokn*)0;
  va_list arg;

  ctx = (ycctx *) ctxp;

  va_start(arg, action);

  switch (action)
    {
    case PXGETNEXT:
      if (ysLstHead(ctx->tokq))
	tok = (pxtokn*) ysLstPop(ctx->tokq);
      else
      {
        tok = (pxtokn *) ysmGlbAlloc(sizeof(pxtokn), "token");
        CLRSTRUCT(*tok);
        ycprGetNext(ctx, tok);
      }
      ctx->lastTok = tok;
      break;
    case PXUNGET:
      tok = va_arg(arg, pxtokn *);
      DISCARD ysLstPush(ctx->tokq, (dvoid *) tok);
      break;
    case PXERRORMSG:
      tok = (pxtokn*) va_arg(arg, pxtokn *);
      ln = (ycln *) pxtfil(tok);
      ctx->inpragma = FALSE;
      if ( !pxtgid(tok) )
        ysRecord( YCMSG(47), YCERRSEV, YCERRLN(ln), YSLEND);
      else
        ysRecord( YCMSG(46), YCERRSEV, YCERRLN(ln), YSLSTR(pxtnam(tok)), 
                  YSLEND);
      break;
    case PXFREETOK:
      tok = va_arg( arg, pxtokn*);
      ysmGlbFree((dvoid *) tok);
      break;
    default:
      ysePanic(YS_EX_FAILURE);
      break;
    }

  va_end(arg);
  return (action == PXGETNEXT ? tok : (pxtokn *) 0);
}

/*
 * ycprGetNext - get the next token from the stream
 *
 * A word about pragma parsing: All our pragmas must be handled at parse
 * time because they are scoped. Therefore, while the preprocessor will
 * discard unrecognized pragmas, the ones we know about will show up in
 * the token stream at parse time. They are detected here as lines that
 * begin with "#pragma".
 *
 * Once we know we have a pragma, we snarf the next token and swap all
 * three tokens (# pragma id) for a fake token which uniquely identifies
 * a specific pragma, such as YCTPRAGMAID. The remainder of the pragma
 * is then parsed like any other construct, with one exception:
 *
 * Since pragmas really are pre-processing directives, they are terminated
 * by a newline. If the parser fails to take this into consideration, not
 * only can users get away with invalid syntax, but the pragma parse rules
 * can lead to artificial parsing conflicts with the normal IDL constructs.
 * So, if we determine we're parsing a pragma, ctx->inpragma is set so that
 * the next time EOL is encountered, a special EOL token can be returned to
 * the parser. The flag is disabled by the first EOL or by a parse error.
 */
STATICF void ycprGetNext(ycctx *ctx, pxtokn *tok)
{
  ycln  *ln;
  sword  cls, val;
  ysstr *nm;
  char  *id;

 retry:
  if (!ctx->curln)
    {
      tok->tokid = 0;
      tok->filnam = (char *) ysLstVal(ysLstTail(ctx->tu));
    }
  else
    {
      ln = (ycln *) ysLstVal(ctx->curln);
      cls = (ln->dir ? YCPP_EOL : ycppGetToken(ln, &ctx->pos, &val, &nm));

      switch (cls)
	{
	case YCPP_IDENT:
	  id = ysStrToText(nm);

	  tok->tokid = ycprReserved(ctx, id);
	  DISCARD strncpy(tok->toknam, id, PXMAXTOKNAME);
	  tok->filnam = (char *) ln;
	  tok->attrib.literal = id;

	  if (pxtgid(tok) != yct_identifier)
	    ysStrDestroy(nm);
	  break;
	case YCPP_NUM:
	  tok->tokid = yct_numeric_literal;
	  DISCARD strcpy(tok->toknam, ysStrToText(nm));
	  tok->filnam = (char *) ln;
	  tok->attrib.literal = ysStrToText(nm);
	  break;
	case YCPP_CHAR:
	  tok->tokid = yct_character_literal;
	  DISCARD strcpy(tok->toknam, ysStrToText(nm));
	  tok->filnam = (char *) ln;
	  tok->attrib.literal = ysStrToText(nm);
	  break;
	case YCPP_STRING:
	  tok->tokid = yct_string;
	  DISCARD strcpy(tok->toknam, ysStrToText(nm));
	  tok->filnam = (char *) ln;
	  tok->attrib.literal = ysStrToText(nm);
	  break;
	case YCPP_PUNC:
	  tok->tokid = (sb2)val;
	  tok->filnam = (char *) ln;
	  if (nm)
	  {
	    DISCARD strcpy(tok->toknam, ysStrToText(nm));
	    ysStrDestroy(nm);
	  }
	  else
          {
	    tok->toknam[0] = (char) val; 
            tok->toknam[1] = '\0';
          }
	  break;
	case YCPP_EOL:
	  ctx->curln = ysLstNext(ctx->curln);
	  ctx->pos = 0;
          if ( ctx->inpragma )
          {   /* pragmas are really pp-dirs and must end with a newline */
            tok->tokid = YCTNEWLINE;
            DISCARD strcpy( tok->toknam, "end-of-line");
            tok->filnam = (char*)ln;
            ctx->inpragma = FALSE;
          }
          else
          {
            ctx->inpragma = FALSE;
	    goto retry;
          }
          break;
        case YCPP_PPPOUND:
	  cls = ycppGetToken(ln, &ctx->pos, &val, &nm);
          if ( cls == YCPP_IDENT && !strcmp( ysStrToText(nm), "pragma") )
          {
            ysStrDestroy(nm);
	    cls = ycppGetToken(ln, &ctx->pos, &val, &nm);
            tok->tokid = ycprPragma( ctx, ysStrToText(nm));
            if ( nm )
            {
	      DISCARD strncpy(tok->toknam, ysStrToText(nm), PXMAXTOKNAME);
              ysStrDestroy( nm);
            }
	    tok->filnam = (char *) ln;
            ctx->inpragma = TRUE;   /* to force EOL as parse token */
          }
          break;
	case YCPP_PPPASTE:
	case YCPP_OTHER:
          ysRecord( YCMSG(45), YCERRSEV, YCERRLN(ln), YSLSB4(val), YSLEND);
	  goto retry;
	}
    }
}

/*
 * ycprReserved - check for a reserved word
 */
STATICF sb2 ycprReserved( /* ARGUSED */ ycctx *ctx, char *nm)
{
  CONST ycktd *low; 
  CONST ycktd *mid;
  CONST ycktd *high;
  sword  cmp;

  /* check for reserved word */
  high = kwdtab + kwdtabsiz;
  low = kwdtab;

  while (low < high)
    {
      mid = low + (high - low) / 2;
      cmp = (sword) strcmp(nm, mid->tokrep);
      if (cmp < 0)
	high = mid;
      else if (cmp > 0)
	low = mid + 1;
      else
	return mid->tokval;
    }

  return yct_identifier;
}

/*
 * ycprPragma - Select the right parsing token to represent a known pragma.
 *
 * The error case (e.g. an unrecognized pragma) should really never occur
 * because the pre-processor filters them out. However, splatting 
 * yct_identifier into the parse stream at this point guarantees you an
 * error if one slips through.
 */
STATICF sb2 ycprPragma(  /* ARGUSED */ ycctx* ctx, CONST char* nm)
{
  if ( (nm[0] == 'I') && (strcmp(nm, "ID") == 0) )
    return YCTPRAGMAID;
  else if ( (nm[0] == 'p') && (strcmp(nm, "prefix") == 0) )
    return YCTPRAGMAPREFIX;
  else if ( (nm[0] == 'v') && (strcmp(nm, "version") == 0) )
    return YCTPRAGMAVERSION;
  else if ( nm[0] == 'I' )
    if ( strcmp( nm, "IAO_DB_ATTR") == 0 )
      return YCTPRAGMADBATTR;
    else if ( strcmp( nm, "IAO_DB_CREATE") == 0 )
      return YCTPRAGMADBCREAT;
    else if ( strcmp( nm, "IAO_DB_LIST") == 0 )
      return YCTPRAGMADBLST;
    else
      return yct_identifier;
  else
    return yct_identifier;
}

