/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ycsem.c - semantic analysis
 *
 * HISTORY
 * 07/24/96 kcoleman	New symbol table
 * 07/17/96 kcoleman    Bug #382537: Build ordered list of ops/attrs
 * 07/11/96 kcoleman	Check for lang mapping keywords as IDL ids
 * 04/12/96 kcoleman	Support for IAO server code gen pragmas
 * 04/08/96 kcoleman	Use ysRecord for error reporting.
 * 03/25/96 kcoleman	Support for static typecodes
 * 03/18/96 kcoleman	Make modules code gen objects
 * 02/05/96 kcoleman	Bug #339529: Redef not caught if 2nd is a module
 * 02/02/96 kcoleman	Cut down on multiple sequence defns in code gen
 * 11/13/95 dpranke     push yrOpen into ycAll in main driver
 * 10/23/95 kcoleman	Support for IFR pragmas. See ycsPragma.
 * 10/10/95 kcoleman	Added error recovery to ycsNameToType
 * 08/16/95 kcoleman	Turned ycShouldGenCode into a function and put it here
 * 08/10/95 kcoleman	Populate YR obj's with source/line info
 * 08/02/95 kcoleman	Added list of sequences to context
 * xx/xx/95 jolkin	Creation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YR_ORACLE
#include <yr.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif


/* ----------------------------------------------------------------------- */
/*
 * ycsem - semantic analysis
 */
void ycsem(ycctx *ctx)
{
  ysle *le;

  ctx->newobjs = ysLstCreate();
  ctx->seqs = ysLstCreate();

  /* begin descent of abstract syntax tree */
  for (le = ysLstHead(ctx->root); le; le = ysLstNext(le))
    ycsDefn(ctx, ctx->repository, (yctDefinition *) ysLstVal(le));
}

/* ----------------------------------------------------------------------- */
/*
 * ycsAddObj - add a new code gen object to a context
 *
 * Not every item for which we need to generate code shows up as a unique
 * item on the list of new objects in compiler contents (ycctx field newobjs).
 * It may come to that eventually, but at the moment we need only to be able
 * to single modules (because for language mappings like C++ we need to know
 * when we're generating code in a module scope) and interfaces (because
 * we need to be able to tell where the user asked for just a forward decl).
 *
 * Anything (except sequences, see below) that is declared at file scope 
 * goes on the top level code gen object list (ctx->newobjs). Anything
 * that is scoped to a module goes on the code gen object list for the
 * module. (It is not sufficient to drive this off the module's yrobj
 * content list because of the previously stated requirement for interface
 * forward declarations). Objects declared in any other scope do not show
 * up on the code gen object list because they're adequately dealt with by
 * a walk of their container's content list.
 *
 * Note that while we're performing semantic analysis of a module's
 * contents, nothing else should get added to the top level list until
 * the module is closed, so (a) there should always be at least one
 * item on the list already, and (b) the tail should be enclosing
 * module scope.
 *
 * Sequences go on a list by themselves because they get generated
 * before everything else. In an attempt to cut down on duplicate
 * code generation, do not put a sequence on the list if there is
 * already one there with the same bound and element type.
 *
 * This comparison is currently very naive to keep it cheap since this is
 * just a convenience to cut down on extra declarations. It will not catch
 * things like equivalent sequences of sequences or sequences of arrays,
 * or sequences of aliases of equivalent types. It is easy enough to add
 * this, but the cost (especially on a linear walk) did not seem
 * justified by the benefit.
 */
void ycsAddObj( ycctx* ctx, yrobj* scope, yrobj* newobj)
{
  if ( ysResGet( "mnidlc.no-output=true") )
    return;

  if ( yrGetKind(newobj) == yrdkSequence )
  {
    ysle* le;
    boolean matched = FALSE;

    for ( le = ysLstHead(ctx->seqs); le; le = ysLstNext(le))
    {
      yrobj* obj = (yrobj*) ysLstVal(le);

      if ( (yrSeqData(obj).elmtype == yrSeqData(newobj).elmtype) &&
           (yrSeqData(obj).bound == yrSeqData(newobj).bound) )
      {
        matched = TRUE;
        break;
      }
    }
    if ( !matched )
      DISCARD ysLstEnq( ctx->seqs, (dvoid*)newobj);
  }
  else
  {
    switch (yrGetKind(scope))
    {
      case yrdkModule:
      case yrdkRepository:
      {
        ycgobj* cgObj = (ycgobj*) ysmGlbAlloc( sizeof(ycgobj), "ycgobj");

        cgObj->ifrobj = newobj;
        cgObj->flags = 0;
        if ( (yrGetKind(newobj) == yrdkInterface) && 
             !yrInterfaceData(newobj).defined )
          cgObj->flags |= YCG_FWD;
        cgObj->objlist = ((yrGetKind(newobj) == yrdkModule) ? 
                              ysLstCreate() : (yslst*)0);
        DISCARD ysLstEnq(ctx->newobjs, (dvoid*)cgObj);
        break;
      }
      case yrdkInterface:
      default:
        break;
    }
  }
}

/* ----------------------------------------------------------------------- */
/*
 * AST PARSE ROUTINES
 */
void ycsDefn(ycctx *ctx, yrobj *scope, yctDefinition *defn)
{
  switch (defn->tag)
    {
    case ycttTypeDcl:
      ycsTypeDcl(ctx, scope, MEMBER(defn, typedcl));
      break;
    case ycttConstDcl:
      ycsConstDcl(ctx, scope, MEMBER(defn, constdcl));
      break;
    case ycttExceptDcl:
      ycsExceptDcl(ctx, scope, MEMBER(defn, exceptdcl));
      break;
    case ycttInterface:
      ycsInterface(ctx, scope, MEMBER(defn, interface));
      break;
    case ycttModule:
      ycsModule(ctx, scope, MEMBER(defn, module));
      break;
    case ycttPragma:
      ycsPragma( ctx, scope, MEMBER(defn, pragmadir));
      break;
    default:
      yseThrow(YS_EX_FAILURE);
      break;
    }
}

/* ----------------------------------------------------------------------- */
void ycsExceptDcl(ycctx *ctx, yrobj *scope, yctExceptDcl *ed)
{
  yslst *mbrs;
  ysle  *le;
  yctMember *mbr;
  yrobj* ex;

  if (!ycsNewDef(ctx, scope, ed->id, ed->line))
    return;

  if ( ed->members )
    mbrs = ysLstCreate();
  else
    mbrs = (yslst*) 0;
  ex = yrCreateException(scope, ed->id, mbrs);
  yrSetSrcInfo( ex, ed->line->name, ed->line->line);
  DISCARD ycSymInsert( ctx->symtbl, ex);
  ycsAddObj( ctx, scope, ex);

  if ( ed->members )
  {
    for (le = ysLstHead(ed->members); le; le = ysLstNext(le))
    {
      mbr = (yctMember *) ysLstVal(le);
      ycsProcDecls(ctx, ex, mbr->typespec, mbr->declarators,
		   (dvoid *) mbrs, ycsCreateMember);
    }
  }
}

/* ----------------------------------------------------------------------- */
/*
 * ycsModule - semantic analysis for modules
 *
 * We support "open" modules. That is, modules which are declared in
 * pieces. This means that it is OK to look up a module name and
 * find an existing yrobj. 
 *
 * If this is a duplicate module piece, the error will be caught when
 * the module contents are analyzed.
 *
 * Modules impact the creation of code gen objects: At the top level,
 * the various code generators operate off of ycgobj's rather than yrobj's
 * directly because of the need to distinguish between an interface with
 * both a forward decl and a defn, and one with just a defn (they look
 * the same to the IFR). Modules must be code gen objects, but they may
 * also contain interfaces, so the ycgobj for a module includes a list of
 * ycgobj's contained in the module. To make this work right, when doing
 * the content list of a module, swap the code obj list in the context
 * for the one for the current module - in effect the call chain makes
 * this a stack of lists temporarily.
 */
void ycsModule(ycctx *ctx, yrobj *scope, yctModule *m)
{
  yslst *lst;
  ysle  *le;
  yrobj* newscope;

  /* allow modules to be extended in discontinuous scopes */
  lst = yrLookupName(scope, m->id, (sb4) 1, yrdkall, TRUE);
  if (lst)
  {
    newscope = (yrobj *) ysLstVal(ysLstHead(lst));
    if ( yrGetKind(newscope) != yrdkModule )
    {
      ysRecord( YCMSG(52), YCERRSEV, YCERRLN(m->line), YSLSTR(m->id),YSLEND);
      ycsPrintDef(ctx, m->line, newscope);
    }
    ysLstDestroy(lst, (ysmff) 0);
  }
  else
  {
    newscope = yrCreateModule(scope, m->id);
    yrSetSrcInfo( newscope, m->line->name, m->line->line);
    DISCARD ycSymInsert( ctx->symtbl, newscope);
    ycsKeywordChk( ctx, m->id, m->line);
  }

  if ( yrGetKind( newscope) == yrdkModule )
  {
    yslst* cgobjs = ctx->newobjs;

    ycsAddObj( ctx, scope, newscope);
    ctx->newobjs = ((ycgobj*)ysLstVal(ysLstTail(cgobjs)))->objlist;  /* push */
    for (le = ysLstHead(m->defs); le; le = ysLstNext(le))
      ycsDefn(ctx, newscope, (yctDefinition *) ysLstVal(le));
    ctx->newobjs = cgobjs;                                           /* pop */
  }
  /* else there was an error, ignore the rest */
}

/* ----------------------------------------------------------------------- */
/*
 * ycsNewDef - check for new definition
 *   A new definition of a name is legal if it does not appear in the
 *   current scope already.  Also, if the current scope is an interface,
 *   then the name cannot occlude an attribute or operation name inherited
 *   from a base class.
 */
boolean ycsNewDef(ycctx *ctx, yrobj *scope, CONST char *name, ycln *ln)
{
  yslst *lst;

  lst = yrLookupName(scope, name, (sb4) 1, yrdkall, TRUE);
  if (lst)
  {
    ysRecord( YCMSG(52), YCERRSEV, YCERRLN(ln), YSLSTR(name), YSLEND);
    ycsPrintDef(ctx, ln, (yrobj *) ysLstVal(ysLstHead(lst)));
    ysLstDestroy(lst, (ysmff) 0);
    return FALSE;
  }
  else if (yrGetKind(scope) == yrdkInterface)
  {
    lst = yrLookupName(scope, name, (sb4) -1, yrdkAttribute, FALSE);
    if (!lst)
      lst = yrLookupName(scope, name, (sb4) -1, yrdkOperation, FALSE);

    if (lst)
    {
       ysRecord( YCMSG(77), YCERRSEV, YCERRLN(ln), YSLSTR(name), YSLEND);
       ycsPrintDef(ctx, ln, (yrobj *) ysLstVal(ysLstHead(lst)));
       ysLstDestroy(lst, (ysmff) 0);
       return FALSE;
    }
  }

  ycsKeywordChk( ctx, name, ln);
  return TRUE;
}

/* ----------------------------------------------------------------------- */
yrobj *ycsLookup(ycctx *ctx, yrobj *scope, yctScopedName *sn)
{
  yrobj* noreg obj;
  ysle  *le;
  char* str2;
  char* noreg str;

  NOREG(str);
  NOREG(obj);

  str = ycsPrintScoped(ctx, sn);
  obj = (yrobj *) 0;
  yseTry
    obj = yrLookup(scope, str);
  yseCatch(YR_EX_NOTFOUND)
    ysRecord( YCMSG(53), YCERRSEV, YCERRLN(sn->line), YSLSTR((char*)str), 
              YSLEND);
  yseCatchObj(YR_EX_BADNAME, yrobj *, last)
    str2 = yrGetAbsoluteName(last);
    ysRecord( YCMSG(55), YCERRSEV, YCERRLN(sn->line), YSLSTR(str2), YSLEND);
    ycsPrintDef(ctx, sn->line, last);
    ysmGlbFree( (dvoid*)str2);
  yseCatchObj(YR_EX_AMBIGUOUS, yslst *, lst)
    ysRecord( YCMSG(50), YCERRSEV, YCERRLN(sn->line), YSLSTR((char*)str), 
              YSLEND);
    for (le = ysLstHead(lst); le; le = ysLstNext(le))
      ycsPrintDef(ctx, sn->line, (yrobj *) ysLstVal(le));
    ysLstDestroy(lst, (ysmff) 0);
  yseEnd

  ysmGlbFree( (dvoid*)str);
  return (yrobj*) obj;
}

/* ----------------------------------------------------------------------- */
yrobj *ycsNameToType(ycctx *ctx, yrobj *scope, yctScopedName *sn)
{
  char  *str;
  yrobj *obj;

  obj = ycsLookup(ctx, scope, sn);
  if (obj)
  {
    switch (yrGetKind(obj))
    {
      case yrdkInterface:
      case yrdkAlias:
      case yrdkStruct:
      case yrdkUnion:
      case yrdkEnum:
	return obj;
      default:
	str = ycsPrintScoped(ctx, sn);
        ysRecord(YCMSG(54), YCERRSEV, YCERRLN(sn->line), YSLSTR(str),YSLEND);
	ycsPrintDef(ctx, sn->line, obj);
	ysmGlbFree( (dvoid*)str);
        obj = yrGetPrimitive( ctx->repository, yrpklong);  /* err recorvery */
	break;
    }
  }
  else	/* for err recovery, use primitive type long */
    obj = yrGetPrimitive( ctx->repository, yrpklong);

  return obj;
}

/* ----------------------------------------------------------------------- */
yrobj *ycsNameToConst(ycctx *ctx, yrobj *scope, yctScopedName *sn)
{
  char  *str;
  yrobj *obj;

  obj = ycsLookup(ctx, scope, sn);
  if (!obj || yrGetKind(obj) == yrdkConstant)
    return obj;
  else
    {
      str = ycsPrintScoped(ctx, sn);
      ysRecord( YCMSG(61), YCERRSEV, YCERRLN(sn->line), YSLSTR(str), YSLEND);
      ycsPrintDef(ctx, sn->line, obj);
      ysmGlbFree( (dvoid*)str);
      return (yrobj *) 0;
    }
}

/* ----------------------------------------------------------------------- */
void ycsPrintDef(ycctx *ctx, ycln *ln, yrobj *obj)
{
  char *nm;
  CONST char *ty;

  nm = yrGetAbsoluteName(obj);
  switch (yrGetKind(obj))
    {
    case yrdkRepository: ty = "Repository "; break;
    case yrdkAttribute: ty = "Attribute "; break;
    case yrdkConstant: 
      if ( yrGetKind(yrConstData(obj).type) == yrdkEnum )
	ty = "Enumerator ";
      else
	ty = "Constant "; 
      break;
    case yrdkException: ty = "Exception "; break;
    case yrdkInterface: ty = "Interface "; break;
    case yrdkModule: ty = "Module "; break;
    case yrdkOperation: ty = "Operation "; break;
    case yrdkAlias: ty = "Type "; break;
    case yrdkStruct: ty = "Struct "; break;
    case yrdkUnion: ty = "Union "; break;
    case yrdkEnum: ty = "Enum "; break;
    default: ty = ""; break;
    }

  ysRecord( YCMSG(51), YCERRSEV, YCERRLN(ln), YSLSTR(ty), YSLSTR(nm), 
            YSLSTR(yrGetSrcName(obj)), YSLSB4(yrGetSrcLine(obj)), YSLEND);
  ysmGlbFree((dvoid *) nm);
}

/* ----------------------------------------------------------------------- */
char *ycsPrintScoped(ycctx *ctx, yctScopedName *name)
{
  ysstr *nm;
  yslst *ids;
  yctScopedName *scd;

  nm = ysStrCreate((char *) 0);
  ids = ysLstCreate();
  for (scd = name; scd; scd = scd->name)
    DISCARD ysLstPush(ids, (dvoid *) scd);

  scd = (yctScopedName *) ysLstPop(ids);
  if (scd->leadcolon)
    nm = ysStrCat(nm, "::");

  do
    {
      nm = ysStrCat(nm, scd->id);
      if (ysLstHead(ids))
	nm = ysStrCat(nm, "::");
    } while ((scd = (yctScopedName *) ysLstPop(ids)));

  ysLstDestroy(ids, (ysmff) 0);

  return ysStrToText(nm);
}

/*
 * ycsGetTypeKind - return a meaningful base type kind
 */
yotkKind ycsGetTypeKind(ycctx *ctx, yrobj *type)
{
  return yotkGetBaseKind(yrGetTypeCode(type));
}

/* ----------------------------------------------------------------------- */
/*
 * ycsKeywordChk - Warn if an identifier is a keyword in one of the
 *   language mappings we are generating code for.
 */

void ycsKeywordChk( ycctx* ctx, CONST char* name, ycln* ln)
{
  ysle* le;

  for (le = ysLstHead(ctx->cgmaps); le; le = ysLstNext(le))
  {
    ycgmap* map = (ycgmap*) ysLstVal(le);

    if ( (*map->kwdchk)(ctx, name) )
    {
      ysRecord( YCMSG(102), YCWARNSEV, YCERRLN(ln), YSLSTR(name), YSLEND);
      break;
    }
  }
}
