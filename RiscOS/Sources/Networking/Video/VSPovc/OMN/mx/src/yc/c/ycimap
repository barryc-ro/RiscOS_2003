/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ycimap.c - generation of output (ITL language mapping)
 *
 * HISTORY
 * 11/28/96 kcoleman	Bug #426687: Change handling of output files
 * 07/12/96 dpranke     strip out all redundant code (use c mapping code
 *                      where possible, fix for mn 3.2 conventions
 * 07/04/96 kcoleman	Switch from sysfp to yccfp for printing
 * 04/08/96 kcoleman	Use ysRecord for error reporting.
 * 11/17/95 dpranke     Creation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCI0_ORACLE
#include <yci0.h>
#endif
#ifndef YSL_ORACLE
#include <ysl.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif
#ifndef YCCP0_ORACLE
#include <yccp0.h>          /* to get at yccpIsKeyword */
#endif

STATICF void yciGenCopyFreeMacros( 
           yccfp* fp, CONST char* derived, CONST char* base);
STATICF void ycimap(ycctx *ctx);

/*
 * ycimap - generation of output
 */
STATICF void ycimap(ycctx *ctx)
{
  CONST char  *path;
  ub4    baselen;
  char   base[SYSFP_MAX_PATHLEN];
  char   out[SYSFP_MAX_PATHLEN];
  noreg ycfile files[2];
  noreg ub4 fcount;

  NOREG(files);
  NOREG(fcount);

    /***** Set up output file descriptors *****/
  sysfpExtractBase(base, ctx->srcnm);
  baselen = strlen(base);

  DISCARD memcpy((dvoid *)(out+4), (dvoid *)base, (size_t)baselen);
  out[0] = 'm';
  out[1] = 't';
  out[2] = 't';
  out[3] = 'c';
  out[baselen+4] = '\0';

  path = ysResGetLast("mnidlc.outputpath");
  sysfpForm((char*)files[0].target, path, out, SYSFPKIND_CHEADER);
  fcount = (ub4)1;
  if ( !ysResGetBool("mnidlc.header-only") )
  {
    sysfpForm((char*)files[1].target, path, out, SYSFPKIND_CSOURCE);
    fcount++;
  }
  if ( !ycFileInit((ycfile*)files, (ub4)fcount, path) )
    return;

    /***** Generate code *****/
  yseTry
  {
    ycihdr(ctx, base, (ycfile*)&files[0]);
    if ( !ysResGetBool("mnidlc.header-only") )
      yciclnt(ctx, base, (ycfile*)&files[1]);
    ycFileRename((ycfile*)files, (ub4)fcount);
  }
  yseCatchAll
  {
    /* DISABLE check_lcl_order */
    CONST char* fn;
    sword ln;
    ub4 i;
    /* ENABLE check_lcl_order */

    yseGetLoc(&fn, &ln);
    ysRecord( YCMSG(0), YCERRSEV, YSLSTR(ysidToStr(yseExid)), 
              YSLSTR(fn), YSLSB4(ln), YSLEND);
    for (i = 0; i < fcount; i++)
      DISCARD sysfpRemove((char*)files[i].newtmp);
  }
  yseEnd
}

/* --------------------------------------------------------------------- */
/*
 * yciGenSysIncls - generate include directives used by all generated files.
 *
 * Currrently, we include sysx/i.h, yo.h, and mtti.h in files. 
 * If <impl> is true, we generating an implementation vs. a header files, 
 * so we include sysi instead of sysx.
 *
 * sysi.h is not a public Oracle header, so dependencies on it are only
 * permitted when the selected naming style is YCSTYLE_ORA.
 */
void yciGenSysIncls(ycctx* ctx, yccfp* fp, boolean impl)
{
  if ( impl && (ctx->style & YCSTYLE_ORA) )
    yccfpPrint(fp, "#ifndef SYSI_ORACLE\n#include <sysi.h>\n#endif\n");
  else if ( !impl )
    yccfpPrint(fp, "#ifndef SYSX_ORACLE\n#include <sysx.h>\n#endif\n");

  if ( (ctx->objAdaptor == YCOA_BOA) || (ctx->style & YCSTYLE_CORBA) )
    yccfpPrint(fp, "#ifndef YOORB_ORACLE\n#include <yoorb.h>\n#endif\n\n");
  else
    yccfpPrint(fp, "#ifndef YO_ORACLE\n#include <yo.h>\n#endif\n");

  yccfpPrint(fp, "#ifndef MTTI_ORACLE\n#include <mtti.h>\n#endif\n");
}
/* ------------------------------------------------------------------------ */
/*
 * yciLangMap - Returns a ycgmap for the ITL language mapping
 *
 * This is not done with static constant data because the keyword checking
 * callback is determined at runtime, based on whether or not we want to
 * check for C++ keywords.
 */
ycgmap* yciLangMap( ycctx* ctx)
{
  ycgmap* map = (ycgmap*) ysmGlbAlloc( sizeof(ycgmap), "ycgmap");

  map->langid = YCG_ITL_LANG;
  map->driver = ycimap;
  if ( ysResGetBool("mnidlc.c-cplus-kwd") )
    map->kwdchk = yccpIsKeyword;
  else
    map->kwdchk = yccIsKeyword;
  return map;
}
