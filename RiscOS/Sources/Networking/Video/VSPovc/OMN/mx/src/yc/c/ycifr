/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 * 	ycifr.c - Support for compiler/Interface Repository interactions
 *
 * NOTES
 *
 * HISTORY
 * 04/08/96 kcoleman	Use ysRecord for error reporting.
 * 11/09/95 kcoleman		Creation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCI0_ORACLE
#include <yci0.h>
#endif
#ifndef YSL_ORACLE
#include <ysl.h>
#endif
#ifndef YSSTR_ORACLE
#include <ysstr.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif

/* ----------------------------------------------------------------------- */
/*
 * ycDumpIFR - Save repository contents. Result can be used by the
 *   runtime IFR or other IFR utilities.
 *
 * For a file fn.idl, this generates fn.ifr. At the moment, this file
 * goes to the the same directory as the rest of the compiler output, but
@@ it should be possible to specify a different directory - the repository.
 */
void ycDumpIFR( ycctx* ctx)
{
  char  base[SYSFP_MAX_PATHLEN];
  char to[SYSFP_MAX_PATHLEN];
  CONST char* path;
  ycfile ifrfile;
 
  sysfpExtractBase(base, ctx->srcnm);
  path = ysResGetLast("mnidlc.outputpath");
  sysfpForm( to, path, base, SYSFPKIND_OTHER);
  ysFmtStr( ifrfile.target, "%s.ifr", to);     /* @@ this can overflow... */
  if ( !ycFileInit(&ifrfile, (ub4)1, path) )
    return;

  yseTry
  {
    yrWrite( ctx->repository, ifrfile.newtmp);
    ycFileRename(&ifrfile, (ub4)1);
  }
  yseCatchAll
  {
/* @@ fix this up better to report repository errors */
    CONST char* fn;
    sword ln;
 
    yseGetLoc( &fn, &ln);
    ysRecord( YCMSG(0), YCERRSEV, YSLSTR(ysidToStr(yseExid)), 
              YSLSTR(fn), YSLSB4(ln), YSLEND);
    DISCARD sysfpRemove(ifrfile.newtmp);   /* don't care if this works */
  }
  yseEnd
}

