/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yoi.h - Object Layer Runtime Internals
 */

#ifndef YOI_ORACLE
#define YOI_ORACLE

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSTHR_ORACLE
#include <ysthr.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
#ifndef YOT_ORACLE
#include <yot.h>
#endif
#ifndef YOGIOP_ORACLE
#include <yogiop.h>
#endif
#ifndef YOIDL_ORACLE
#include <yoidl.h>
#endif
#ifndef YORC5_ORACLE
#include <yorc5.h>
#endif
#ifndef YOSX_ORACLE
#include <yosx.h>
#endif
#ifndef YOTRANS_ORACLE
#include <yotrans.h>
#endif

/* Constants */
#define YO_YDRETRY      1000000             /* ORBD location retry time usec */
#define YO_RRPORT       (ub2)666                       /* Request Reply Port */
#define YO_HBPORT       (ub2)667                          /* Heart Beat Port */
#define YO_REQ_HB       15             /* default heartbeat interval seconds */
#define YO_REQ_TO       30               /* default timeout interval seconds */

#define YO_RCVPGSZ      4096                            /* Recieve page size */
#define YO_BYTESEX      (SYSX_BYTE_ORDER == SYSX_LSB)             /* bytesex */
/* State ID's */
#define YOSTID_INV      (ub4)0x000                       /* Invalid State Id */
#define YOSTID_YORT     (ub4)0x001                /* Object Runtime State Id */
#define YOSTID_BASE     (ub4)0x100             /* start of "user" state id's */

#define YOBR_IIOP_ADDR  "0xffffffff.3"          /* fixed addr of IIOP bridge */

/* Message Types */
#define YOMSGT_INVALID  (ub1)0xff
#define YOMSGT_REQ      (ub1)0x00
#define YOMSGT_REP      (ub1)0x01
#define YOMSGT_PNG      (ub1)0x04

#define YO_FACILITY     "YO"
#define YOGEN_BASE      ((ub4) 7000)
#define YOGEN_ERR(n)    YS_PRODUCT, YO_FACILITY, (YOGEN_BASE + (ub4) (n))
#define YOCLI_BASE      ((ub4) 7300)
#define YOCLI_ERR(n)    YS_PRODUCT, YO_FACILITY, (YOCLI_BASE + (ub4) (n))
#define YOSRV_BASE      ((ub4) 7600)
#define YOSRV_ERR(n)    YS_PRODUCT, YO_FACILITY, (YOSRV_BASE + (ub4) (n))
#define YOBR_BASE       ((ub4)7800)
#define YOBR_ERR(n)     YS_PRODUCT, YO_FACILITY, (YOBR_BASE + (ub4) (n))
#define YORT_BASE       ((ub4) 7900)
#define YORT_ERR(n)     YS_PRODUCT, YO_FACILITY, (YORT_BASE + (ub4) (n))

typedef struct yoo yoo;                                  /* Object Reference */

/* Object Runtime Context */
typedef struct yoctx yoctx;
struct yoctx
{
  CONST char    *hostname;                                 /* cache hostname */
  CONST char    *pid;                                           /* cache pid */

  ub4      flags;                                               /* ctx flags */
#define YOCTXFL_SNDYORT         0x00000001      /* need to send yort to ORBD */
#define YOCTXFL_SNDYORT_WT      0x00000002           /* sending yort to ORBD */
#define YOCTXFL_SNTYORT         0x00000004     /* yort has been send to ORBD */
  ysque   *evtq;                                              /* event queue */
  ysbv     rcvbuf;
  ysmhp   *rcvhp;                                            /* receive heap */
  ysbv     sndbuf;
  ysmhp   *sndhp;                                               /* send heap */

  yslst   *fltrs;                                             /* filter list */

  yshsh   *strs;                                    /* string table for id's */
  yshsh   *refs;                                              /* object refs */
  yshsh   *partab;                                        /* table of yopars */

  ysque   *reqq;                                            /* request queue */
  yshsh   *intfs;                                         /* interface table */
  ub4      stateid;                                 /* next state identifier */
  ysthrkey *srvmeml;      /* per thread yslst's of mem alloced via yoAlloc() */
  yslst   *deltaq;         /* queue of impl state changes to be sent to ORBD */
  ysevt   *dqesem;                            /* delta queue empty semaphore */
  yslst   *iirefl;                                /* yortImpl reference list */
  ysthrkey *dspreq;         /* stack of currently active requests per thread */
  yslst    *actreqs;       /* list of process wide requests being dispatched */
  yslst   *replst;                                        /* replies pending */
  sysb8    reqhb;                         /* interval to heartbeat a request */
  yslst   *yoques;                         /* list of yoQueCreate()'d queues */
  yslst   *svclps;                                  /* list of yoService()'s */
  ub4      ltridseq;
  ysthrkey *cur;                                          /* yocur by thread */
  yotp     *rrport;                                  /* request / reply port */
  yota     *rrpaddr;                        /* address of local req/rep port */
  ysevt    *rrevt;                          /* request/reply port test event */
  yotp     *hbport;                                        /* heartbeat port */
  ysevt    *hbevt;                              /* heartbeat port test event */
  ysmtx    ydmtx;                                          /* orb daemon mtx */
  yscv     ydcv;               /* a place to wait for the ORBD to come round */
  yoo     *ydimref;                    /* object reference of the nearest YD */
  yota     *ydaddr;                    /* address of nearest YD routing port */
  yshsh   *preqs;                                        /* pending requests */
  ub4      reqid;                                         /* next request id */
  yslst   *reqsndq;                                    /* request send queue */
  sysb8    reqto;                                   /* request timeout value */

  ysstr   *rtpnm;                /* string as registered with MN name server */
  ysque   *rtq;                                  /* ORBD routing event queue */
  ysHndlr  rthdlr;                             /* ORBD routing event handler */
  dvoid   *rtusrp;                                /* ORBD routing event usrp */

  yota    *iiopbr;                     /* IIOP bridge internal fixed address */
  char    *iiopexta;                         /* IIOP bridge external address */
  ub2      iiopextp;                            /* IIOP bridge external port */

  yoo     *yort;                                           /* YORT reference */
  ysque   *yortq;                                      /* event queue - YORT */
  ub4      yortidle;                                      /* yort idle latch */
  yort_procState ypadst;                            /* yort proc admin state */

  ub4      yoidle;                                           /* guard yoIdle */
  ub4      yoinit;                                 /* keep refcnt for yoInit */
  ysque   *scq;                                       /* short circuit queue */

  dvoid   *cycx;                  /* context for crypto, null if none needed */
};

/* Macro to grab context */
#define yoCtx ((yoctx *)yscGet(YSC_YOCTX))

typedef struct yoimp yoimp;

/* Object Reference */
struct yoo
{
  ub4 flags;                                                              /* */
#define YOOFL_MTHREAD   (ub4)0x00000001             /* multi threaded object */
#define YOOFL_COLOCATE  (ub4)0x00000002                 /* co-located object */
#define YOOFL_IOR       (ub4)0x00000004                               /* IOR */
#define YOOFL_INVALID   (ub4)0x00010000      /* reference is no longer valid */
#define YOOFL_DEBUG     (ub4)0x80000000                /* dup / release hack */
  CONST ysid *intf;                                  /* interface identifier */
  CONST char *impl;                             /* implementation identifier */
  yoRefData id;                                            /* reference data */
  dvoid *birthdate;                                       /* maybe required? */
  yota *addr;                                   /* address of object, always */
  ub4 key;                             /* key used to bind local and foriegn */
  dvoid *state;                              /* pointer to state information */
  ub4 ucnt;                                                   /* usage count */
  boolean single;                                              /* threaded ? */
  ub4 grpid;                                     /* group id for collocation */
  yoimp *imp;                /* data pertaining to the actual implementation */
  ysque *refq;                            /* object reference dispatch queue */
  yogiIOR ior;                                         /* IOR representation */
};

typedef struct yoifl yoifl;
struct yoifl
{
  CONST ysid *intf;                                          /* interface id */
  yslst *impll;                                   /* list of implementations */
};

struct yoimp
{
  CONST ysid *intf;
  CONST char *impl;
  ub4         flags;
#define  YOIMPF_STLESS (ub4)0x0001      /* flag indicating stateless objects */
  ub4         state;                                 /* implementation state */
#define  YOIMP_DN     (ub4)0x0000                      /* implemenation down */
#define  YOIMP_RDY_WT (ub4)0x0001                /* ready message in transit */
#define  YOIMP_RDY    (ub4)0x0002                     /* implemenation ready */
#define  YOIMP_SSP_WT (ub4)0x0003              /* suspend message in transit */
#define  YOIMP_SSP    (ub4)0x0004                /* implementation suspended */
#define  YOIMP_DN_WT  (ub4)0x0005                /* down message in transit */
  ub4         nstate;                                     /* requested state */
  ub4         pstate;                                         /* prior state */
  ysle       *deltaqe;                       /* queue element on delta queue */

  yostub     *stubs;
  CONST dvoid *impldef;
  yodir       dir;                         /* dynamic implementation routine */
  yoload      loader;
  dvoid      *usrst;                            /* user implementation state */
  ysque      *q;                                     /* implementation queue */

  yort_methodInfoList minfo;                         /* method dispatch info */
  yort_implInfo  iinfo;                        /* implementation information */
  yoimpadm    admcb;                             /* administrative callback */
  dvoid      *admcbup;                       /* administrative callback usrp */
};

/* message descriptor */
typedef struct yomd yomd;
struct yomd
{
  dvoid  *usrp;                                          /* arbitray pointer */
  yota    *addr;                                           /* message source */
  yosx    *x;                                             /* decoding stream */
  sb4     len;                                       /* total message length */
  ysbv   *bv;                                                 /* msg buffers */
  sword   nbv;                                    /* msg buffer vector count */
};

/* message options */
typedef struct yomopt yomopt;
struct yomopt
{
  ub2 type;                                                   /* option type */
  ub2 size;                                                   /* option size */
  ub1 val[1];                                                /* option value */
};

typedef struct yosvcxs yosvcxs;
struct yosvcxs
{
  yoenv	*uev;                       /* ptr to user ev; copy result back here */
  yoenv  ev;                           /* yo environment, to unmarshall into */
  yoTrans_pctx *upctx;      /* user xact ctx, or NULL; copy result back here */
  yoTrans_pctx pctx;                             /* ours, to unmarshall into */
  yslst *scl;                              /* list of uninterperted svc ctxs */
};

/* request message header */
typedef struct yoreqh yoreqh;                              /* request header */
struct yoreqh
{
  yosvcxs     scxs;                                      /* service contexts */
  ub4         id;                                              /* request id */
  yoo        *ref;                          /* local target object reference */
  char       *op;                                               /* operation */
  boolean     resp;                                            /* response ? */
  CONST ysid *exid;                                          /* exception id */
  dvoid      *exobj;                                     /* exception object */
};

/* reply message header */
typedef struct yoreph yoreph;
struct yoreph
{
  yosvcxs scxs;                                          /* service contexts */
  ub4     id;                                            /* reply request id */
  ub1     sts;                                               /* reply status */
};

/* client side request data */
typedef struct yocreq yocreq;
struct yocreq
{
  ub4      type;                                      /* client request type */
  ub4      reftag;                              /* object reference tag type */
  yosxPos  lp;                                            /* length position */
  yoreqh   hdr;                                       /* request header info */
  ysevt   *uevt;                             /* event to trigger with return */
  CONST yopar *pars;                                 /* descriptions of args */
  yosvcxs   scxs;                                    /* contains ev and pctx */
  yslst   *outs;                            /* pointers to the out arguments */
  ysevt   *sevt;                                               /* send event */
  ysevt   *ttl;                                              /* time to live */
  /* request message data */
  yosx    *x;                                               /* encode stream */
  ysbv    *bv;
  sword    nbv;
};

/* server side request data */
struct yosreq                                         /* server side request */
{
  ub4      type;                                             /* request type */
  ub4      reftag;                              /* object reference tag type */
  yoreqh   hdr;                                            /* request header */
  yomd    *md;                                         /* message descriptor */
  ysevt   *hb;                                            /* heartbeat event */
  sysb8    start;                                              /* start time */
  sysb8    finish;                                            /* finish time */
  yoimp   *imp;                                              /* implemention */
  CONST yopar *parms;                               /* parameter description */
  dvoid  **args;                                        /* arguments to call */
  yslst   *orlst;                            /* list of in param object refs */
  ysstr   *ltrid;                             /* local transaction id string */
};

typedef struct yosrep yosrep;
struct yosrep
{
  yota   *addr;                                             /* reply address */
  yosx   *x;                                     /* reply marshalling stream */
  yosxPos lp;                           /* length position in message header */
  yoimp  *imp;                             /* implemention the reply is from */
  char   *op;                       /* operation the reply is in response to */
  yoreph  hdr;                                               /* reply header */
  yomd   *md;                                       /* reply message payload */
};

struct yodsrep
{
  yoreph  hdr;
  yomd   *md;
};

typedef struct yoerr yoerr;
struct yoerr
{
  ub4 type;
  ub4 reqid;
};

struct yoevm
{
  CONST char* name;
  yoany value;
};

typedef struct yofltr yofltr;
struct yofltr
{
  CONST char *name;
  sword type;
  yofilter filter;
  dvoid *usrp;
};

typedef struct yoqi yoqi;            /* ysque usrp created via yoQueCreate() */
struct yoqi
{
  dvoid *or;                              /* object reference for this queue */
  char  *name;                                                 /* queue name */
  yslst *qdl;                          /* dispatchers attached to this queue */
  ysle  *yoqle;                           /* process wide queue list element */
};

typedef struct yosvcl yosvcl;
struct yosvcl
{
  dvoid *or;                                          /* my object reference */
  ysque *q;                                          /* queue being serviced */
  ysevt *sem;                                           /* service semaphore */
  ub4    count;                                 /* number of events serviced */
  yort_svcState admst;                               /* administrative state */
  ysle  *svcle;                                 /* service loop list element */
  ysle  *qdle;                                /* queue dispatch list element */
};


/* The "Current" context.  In a client, the thread context points to
 *  a yoreqh we allocate for it.  In a server, it points at the one in
 * the yosreq.  
 */

struct yocur
{
  yoreqh       reqh;		/* container in client  */
};

/* typecodes for the environment */
externref CONST_DATA yotk yoevm__tc[];
externref CONST_DATA yotk yoenv__tc[];

/* marshall object reference data */

/* tags */
externref ysmtagDecl(yoTagObjRef);
externref ysmtagDecl(yoTagMsgDesc);
externref ysmtagDecl(yoTagYoAlloc);
externref ysmtagDecl(yoTagQueInfo);

/* private interface */
boolean yoExistsLocal(yoctx *ctx, yoo *ref);
#define yoGetRef(ctx,key) \
  ((yoo *)(ysHshFind(ctx->refs,(dvoid *)&key,sizeof(key))))
void yoSndReq(yoctx *ctx, yoo *ref, yoenv *ev, CONST char *op,
              boolean response, ysevt *uevt, sword args, CONST yopar *pars,
              dvoid **values, ysbv *bv, sword nbv);
yoo *yoRefCreate(yoctx *ctx, CONST ysid *intf,CONST char *impl,
                 yoRefData *id, ub4 key, yota *addr, dvoid *state,
                 boolean yocreate);
yoo *yoRefCreateIOR(yoctx *ctx, yogiIOR *ior);
void yoSndLocReq(yoctx *ctx, yoo *ref, ysevt *evt);
sword yoRefEq(dvoid *elm, dvoid *key, size_t keysz);
sword yoIntfEq(dvoid *elm, dvoid *key, size_t keysz);
void yoDumpLog(ub4 level);

/* server side privates */
void yoReqRcv(yoctx *ctx, yomd *md, ub4 reftag);
void yoLocReqRcv(yoctx *ctx, yomd *md, ub4 reftag);
void yoLocReqReply(yoctx *ctx, yosreq *req, ub4 sts, yoo *ref);
yoimp *yoFindImp(yoctx *ctx, CONST ysid *intf, CONST char *impl,
                 boolean ready);
yoo *yoCreateOID(CONST ysid *intf, CONST char *impl, yoRefData *id,
                 dvoid *state, ub4 oid);
boolean yoRunDeltaQ(yoctx *ctx);
void yoSendBounceReqs(yoctx *ctx);
boolean yoIsALocal(yoimp *imp, CONST char *intf);
void yoErrSnd(yoctx *ctx, yosreq *req, CONST ysid *exid, yoreqsts sts);
void yoFreeSReq(ysmhp *hp, yosreq *req);
yosrep *yoSRepCreate(yoctx *ctx, yosreq *req, ub4 sts);
void yoSRepSend(yoctx *ctx, yosrep *rep, ysbv *bv, sword nbv);
void yoSRepDestroy(yoctx *ctx, yosrep *rep);


/* misc */
#define yoStr(s) ((s)?(s):"<null>")
void yoDeadORBD(yoctx *ctx);
void yoFindORBD(yoctx *ctx);
void yoAllocMsgBufs(ysmhp *hp, sb4 len, ysbv **bv, sword *nbv);
char *yoGetStr(yoctx *ctx, CONST char *str);
void yoFreeStr(yoctx *ctx, char *str);
void yoFreeRepLst(dvoid *ptr);
void yoFreeRef(dvoid *ref);
void yoFreeImpLst(dvoid *ifl);
void yoFreeImp(dvoid *imp);
void yoFreeSrvrAlloc(yoctx *ctx);
void yoFreeMsgDesc(ysmhp *hp, yomd *md);
sb4 yoGetUpTimeCs(void);
boolean yoExMNSys(CONST ysid *exid, ub4 minor, CONST ysid **newid);

/* routing */
void yoydRouteMsg(yosreq *req);

/* marshalling */
void yoxPutPing(yosx *x, ub4 reqid);
ub4 yoxGetPing(yosx *x);
yslst *yoxPutReqParms(yosx *x, ub4 reftag, sword args, CONST yopar *pars,
                      dvoid **values);
dvoid **yoxGetReqParms(yosx *x, CONST yopar *pars, yslst *orlst);
void yoxFreeReqParms(CONST yopar *pars, dvoid **args);
void yoxPutRepParms(yosx *x, ub4 reftag, CONST yopar *pars, dvoid **args);
void yoxGetRepParms(yosx *x, CONST yopar *pars, yslst *outs, dvoid **arg,
                    size_t *argsz);
void yoxPutSysEx(yosx *x, CONST ysid *exid, yoreqsts exsts, ub4 minor);
void yoxPutUserEx(yosx *x, ub4 reftag, CONST ysid *exid, CONST yotk *extk,
                  dvoid *arg);
CONST ysid *yoxGetSysEx(yosx *x, dvoid **arg, size_t *argsz);
CONST ysid *yoxGetUserEx(yosx *x, CONST yopar *pars, dvoid **arg, 
                         size_t *argsz);

/* GIOP */
void yogiPutMsgHeader(yosx *x, ub1 type, yosxPos *lenpos);
void yogiFixupMsgHeader(yosx *x, yosxPos *lenpos);
ub1 yogiGetMsgHeader(yosx *x, ub4 *len);
void yogiGetMsgHdr(yosx *x, yogiMsgHdr *gmh);
void yogiPutReqHeader(yosx *x, ub4 reftag, yoreqh *hdr);
void yogiGetReqHeader(yosx *x, yoreqh *hdr);
void yogiFreeReqHeader(yoreqh *hdr);
void yogiPutRepHeader(yosx *x, ub4 reftag, yoreph *hdr);
void yogiGetRepHeader(yosx *x, yoreph *hdr);
void yogiGetRepHdr(yosx *x, yogiRepHdr *greph);
void yogiFreeRepHdr(yogiRepHdr *greph);
void yogiPutLocReqHeader(yosx *x, ub4 reftag, yoreqh *hdr);
void yogiGetLocReqHeader(yosx *x, yoreqh *hdr);
void yogiPutLocRepHeader(yosx *x, yoreph *hdr);
void yogiGetLocRepHeader(yosx *x, yoreph *hdr);
void yogiPutLocRep(yosx *x, yogiLocRep *lr, yogiIOR *ior);
void yogiPutOR(yosx *x, dvoid *ref, ub4 reftag);
dvoid *yogiGetOR(yosx *x);
void yogiPutIOR(yosx *x, yogiIOR *ior);
void yogiGetIOR(yoctx *ctx, yosx *x, yogiIOR *ior, yoo **r);
void yogiFreeIOR(yogiIOR *ior);
yoo *yogiGetObjKey(yoctx *ctx, yosx *x, yota *addr, boolean local);
void yogiPutSvcCtxLst(yosx *x, yslst *scl);
yslst *yogiGetSvcCtxLst(yosx *x);
void yogiFreeSvcCtx(yogiSvcCtx *sc);
#ifdef LINT
void yogiFreeSvcCtxLst(yslst *scl);
#else
#define yogiFreeSvcCtxLst(scl) \
  do if(scl) ysLstDestroy(scl,(ysmff)yogiFreeSvcCtx); while(0)
#endif
void yogiPutOctSeq(yosx *x, yogiOctSeq *os);
yogiOctSeq *yogiGetOctSeq(yosx *x);
ub4 yogiHashIOR(yogiIOR *ior);
sword yogiCmpIOR(yogiIOR *i1, yogiIOR *i2);

/* YORT */
externref ysidDecl(yortImpl__simpl);
externref ysidDecl(yortDispatcher__simpl);
void yortInit(yoctx *ctx);
void yortTerm(yoctx *ctx);
void yortIdle(dvoid *usrp, CONST ysid *exid, dvoid *arg, size_t argsz);
void yortGetProcInfo(yoctx *ctx, yort_procInfo *ypi);

/* YOEVT */
void yoevtInit(yoctx *ctx);
void yoevtTerm(yoctx *ctx);

/* debugging spooge */
void yoCheckRefcnt(CONST dvoid *ref, boolean on);
void yoCheckRefcnt_here(CONST dvoid *ref, ub4 ucnt);

void yotkEncode(CONST yotk *tk, dvoid *val, yosx *x, ub4 reftag);
void yotkEncodeRR(CONST yotk *tk, dvoid *val, yosx *x,ub4 reftag,
                  boolean relrefs);
void yotkDecode(CONST yotk *tk, dvoid *val, yosx *x, ysmaf af);
void yotkDecodeRL(CONST yotk *tk, dvoid *val, yosx *x, ysmaf af, yslst *orlst);
#endif

