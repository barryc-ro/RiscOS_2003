/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 * yrread.c - Read repository data file, previously written by yrWrite.
 *
 * NOTES
 * For information on the file format, see yrwrite.c.
 *
 * Data is read from the file with the intent of merging it into an
 * existing repository. It cannot be merged into the repository as it
 * is read in because you don't want to disturb the state of the
 * existing repository if there is some kind of problem with what is
 * read in.
 *
 * Therefore, yrRead constructs an object table which can be passed to
 * yrMergeFile. The object table may contain pointers into the existing
 * repository (see below), but there will be no pointers in the other
 * direction, so the entire object table and its contents can be discarded
 * without prejudice any time before the merge is done.
 *
 * Merging is an onerous enough task without having to walk the object
 * table at merge time to move pointers from things in the object to 
 * their pre-existing equivalent objects. So, each new object only
 * points to other new objects which have no pre-existing incarnation.
 * That way the final merge step need only adjust the enclosing container
 * content list (assuming a new object going into an existing container,
 * like the repository).
 *
 * To make this possible, every yrobj's repository id and kind (yrdk) is
 * dumped to the file before the rest of the object data. As each id/kind
 * pair is read in, we attempt to look the object up by id in the
 * existing repository. If it is found, a pointer to it is cached and
 * every index which refers to that new object is actually "unswizzled"
 * to the existing object. The new object is, of course, also constructed
 * because during the merge phase it must be compared for equivalence to
 * the pre-existing object. Each entry in the object table thus has space
 * for a pointer to a new object (constructed as the data is read in) and
 * an existing object.
 *
 * For example, suppose the following IDL was dumped, and further suppose 
 * that "alias1" has already been loaded into the repository when this file 
 * is read in:
 *
 *    typedef long alias1;         // yrobj for alias1 is index 1
 *    typedef alias1 alias2;       // yrobj for alias2 is index 2
 *
 * So the object table contents for these items would be:
 *
 *    objtbl[1] = { <ptr to new yrobj for alias1>, <ptr to exisiting alias1}
 *    objtbl[2] = { <ptr to new yrobj for alias2>, NULL }
 *
 * The new alias2 yrobj points back to the existing object as the alias
 * base type, rather than to the new object.
 *
 * To speed up discovery of serious blunders, the existing object located
 * via yrLookupId must be of the expected kind. They should also have the
 * same absolute name, but we don't have access to enough information
 * to construct the absolute name until the entire file is read in, so
 * that is checked as part of the merge process.
 *
 * Anonymous types are presently unidentifiable, so they are never compared
 * for prexistence; they're always added to the repository. This means you
 * may end up with duplicate sequences, but the repository state will still
 * be consistent. In the future, I need to tag these so they're identifiable,
 * probably by encoding a form of "name" in their repid's.
 *
 * HISTORY
 * 12/18/96 kcoleman	New typecode format, add union default hack
 *                      No more backward data file compatibility.
 * 07/08/96 kcoleman	Support for context ids on operations
 * 04/19/96 kcoleman	Switch over to ysRecord for messaging.
 * 03/20/96 kcoleman    Fix bug #351151: Union default case labels
 * 02/27/96 kcoleman	Major roadwork for bug #336120: Structs and unions
 *                      are scopes and can have types defined inside them.
 * 02/02/96 kcoleman	Repository now keeps anonymous types on a separate list
 * 10/31/95 kcoleman	Creation.
 */
#ifndef SYSX_ORACLE
#include <sysi.h>
#endif
#ifndef SYSXCD_ORACLE
#include <sysxcd.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YR_ORACLE
#include <yr.h>
#endif
#ifndef YR0_ORACLE
#include <yr0.h>
#endif
#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif

/*
 * yrdecf - Decode call function pointer type. Use with yrDecList.
 */
typedef dvoid* (*yrdecf)( yrctx*);

STATICF void yrReadObj( yrctx* ctx, ub4 idx);
STATICF boolean yrxReadBV( ysbv* bv, dvoid* usrp);
STATICF char* yrDecString( yrctx* ctx);
STATICF dvoid* yrDecObj( yrctx* ctx);
STATICF void yrDecAny( yrctx* ctx, yoany* any);
STATICF void yrDecNamedObj( yrctx* ctx, yrobj* obj);
STATICF dvoid* yrDecPar( yrctx* ctx);
STATICF dvoid* yrDecUnionMbr( yrctx* ctx);
STATICF dvoid* yrDecStructMbr( yrctx* ctx);
STATICF void yrDecList( yrctx* ctx, yslst** lst, yrdecf decFunc);
STATICF void yrDumpStrTbl( yrctx* ctx, ub4 nstr);
STATICF void yrDumpObjTbl( yrctx* ctx, ub4 nobj);

/* ---------------------------------------------------------------------- */
/*
 * Exceptions raised by this module:
 *
 *   YR_EX_BADHDR - Formatting error in file header. Unable to read 
 *     header data for some reason.
 */
externdef ysidDecl(YR_EX_BADHDR) = "::YR_EX_BADHDR";
externdef ysidDecl(YR_EX_READ_FAIL) = "::YR_EX_READ_FAIL";


/* ---------------------------------------------------------------------- */
/*
 * yrxReadBV - ysx Buffer Vector read callback function.
 *
 * Using the stream interface to ysx, this callback is made every time
 * the decode buffer needs to be refilled, e.g. as a consequence of a 
 * call to something like ysxGetUB4. It should return TRUE if there
 * are more bytes to read, FALSE otherwise. See ysx.h for more info.
 */
STATICF boolean yrxReadBV( ysbv* bv, dvoid* usrp)
{
  yrctx* ctx = (yrctx*) usrp;
  sword nbytes;

  nbytes = sysfpRead( ctx->fp, bv->buf, YRX_BUFF_SZ);
  bv->len = nbytes;
  if ( nbytes <= 0 )
    return FALSE;
  else
    return TRUE;
}


/* ---------------------------------------------------------------------- */
/*
 * yrDecString - decode a string
 *
 * Look it up in the string table, make a copy of it.
 */

STATICF char* yrDecString( yrctx* ctx)
{
  ub4 idx;
  CONST char* match;

  idx = ysxGetUB4( ctx->xstr);
  if ( idx == 0 )
    match = "";
  else
    match = ctx->strs.rd[idx];
  return ysStrDup( match);
}

/* ---------------------------------------------------------------------- */
/*
 * yrDecObj - Decode a yrobj
 *
 * Read the object index from the file. If it is negative, it refers to 
 * one of the primitive types, so just retrieve the primtive ref from the
 * repository. If it is positive, look it up in the object table.
 */

STATICF dvoid* yrDecObj( yrctx* ctx)
{
  sb4 idx;
  yrobj* result;

  idx = (sb4) ysxGetUB4( ctx->xstr);
  if ( idx == 0 )
    result = ctx->repository;      /* the repository */
  else if ( (ub4) idx <= ctx->maxPrim )   /* primitive type */
    result =  yrGetPrimitive( ctx->repository, idx);
  else                             /* everything else */
  {
    idx = idx - ctx->maxPrim - 1;
    if ( ctx->objs.rd[idx].existing )
      result = ctx->objs.rd[idx].existing;
    else
      result =  ctx->objs.rd[idx].newobj;
  }
  return (dvoid*) result;
}


/* ---------------------------------------------------------------------- */
/*
 * yrDecAny - Decode a yoany for a constant or union label
 *
 * You would like to use yotkDecode for this, but we can't because of
 * interdependcies between the compiler, the IFR, and the Object Runtime
 * Layer. Unfortunately, yotkEncode has to know about the internals of
 * of object references, so using it pulls in a lot of stuff we don't
 * want to know about.
 *
 * Our yoany's are very lightweight, so we can handle them ourselves.
 * They can only be of integer, character, boolean, floating point,
 * string, or enumeration type.
 *
 * We decode the typecode, followed by the data. Primitive typecodes are
 * converted into the builtin constants for efficiency, just as yo does
 * internally.
 */

STATICF void yrDecAny( yrctx* ctx, yoany* any)
{
  yotkKind kind;
  ub4 len;
  const yotk* tk = any->_type;
  ub1* buf;
  size_t sz;
  ub4 bounds;
  boolean freetc;

    /**** Decode the type code ****/
  sz = ysxGetUB4( ctx->xstr);
  buf = (ub1*) ysmGlbAlloc(sz, "yotk");
  ysxCopy( ctx->xstr, buf, sz);

  tk = (yotk*) buf;
  kind = yotkGetKind(tk);
  freetc = TRUE;
  switch (kind)
  {
    case yotkVoid: 
      any->_type = (yotk *)yoTcVoid; 
      break;
    case yotkShort: 
      any->_type = (yotk *)yoTcShort; 
      break;
    case yotkLong: 
      any->_type = (yotk *)yoTcLong; 
      break;
    case yotkUshort: 
      any->_type = (yotk *)yoTcUshort; 
      break;
    case yotkUlong: 
      any->_type = (yotk *)yoTcUlong; 
      break;
    case yotkFloat: 
      any->_type = (yotk *)yoTcFloat; 
      break;
    case yotkDouble: 
      any->_type = (yotk *)yoTcDouble; 
      break;
    case yotkBoolean: 
      any->_type = (yotk *)yoTcBoolean; 
      break;
    case yotkChar: 
      any->_type = (yotk *)yoTcChar; 
      break;
    case yotkOctet: 
      any->_type = (yotk *)yoTcOctet; 
      break;
    case yotkString:
      bounds = yotkLength(tk);
      if (!bounds)
        any->_type = (yotk*) yoTcString;
      else
      {
        any->_type = (yotk*)tk;
        freetc = FALSE;
      }
      break;
    case yotkAlias:
      kind = yotkGetBaseKind(tk);
      /* FALLTHROUGH */
    case yotkEnum:
      any->_type = (yotk*)tk;
      freetc = FALSE;
      break;
    default:
      break;
  }
  if ( freetc )
    ysmGlbFree( (dvoid*)buf);

    /***** Decode the value *****/
  tk = any->_type;
  yotkSizeAlign( tk, &sz, (size_t*)0);
  any->_value = ysmGlbAlloc( sz, "any");

  switch (kind)
  {
    case yotkShort:
      *((sb2 *) any->_value) = (sb2) ysxGetUB2(ctx->xstr);
      break;
    case yotkUshort:
      *((ub2 *) any->_value) = ysxGetUB2(ctx->xstr);
      break;
    case yotkLong:
      *((sb4 *) any->_value) = (sb4) ysxGetUB4(ctx->xstr);
      break;
    case yotkEnum:
    case yotkUlong:
      *((ub4 *) any->_value) = ysxGetUB4(ctx->xstr);
      break;
    case yotkBoolean:
      *((boolean *) any->_value) = (boolean) ysxGetUB1(ctx->xstr);
      break;
    case yotkChar:
      *((char *) any->_value) = (char) ysxGetUB1(ctx->xstr);
      break;
    case yotkOctet:
      *((ub1 *) any->_value) = ysxGetUB1(ctx->xstr);
      break;
    case yotkString:
    {
      size_t skip = 0;

      len = ysxGetUB4(ctx->xstr);
      bounds = yotkGetLength(tk);
      if ( !bounds )
      {
        skip = 0;
        if( len )
          *((char **) any->_value) = (char*) ysmGlbAlloc( len, "any");
        else
          *((char **) any->_value) = (char *) 0;
      }
      else
      {
        bounds++;
        *((char **) any->_value) = (char *) ysmGlbAlloc((size_t)bounds, "any");
        if (len > bounds)
        {
          skip = (size_t) (len - bounds);
          len = bounds;
        }
      }
      if ( len )
      {
        ysxCopy(ctx->xstr, *((ub1 **) any->_value), len);
        ysxSkip(ctx->xstr, skip);
        if(skip)
          (*(ub1 **)any->_value)[len-1] = '\0';
      }
      break;
    }
    case yotkLongLong:
      ysxGetSB8(ctx->xstr, (sysb8 *) any->_value);
      break;
    default:
      yseThrow( YR_EX_BADTYPE);
  }
}

/* ---------------------------------------------------------------------- */

STATICF void yrDecNamedObj( yrctx* ctx, yrobj* obj)
{
  ub4 data;
  char* srcnm;

  srcnm = yrDecString(ctx);
  data = ysxGetUB4( ctx->xstr);     /* src line number */
  yrSetSrcInfo( obj, srcnm, data);
  ysmGlbFree( (dvoid*)srcnm);

  /* @@ */ obj->name = yrDecString(ctx);
  obj->version = yrDecString(ctx);

  yrSetDefinedIn( obj, (yrobj*) yrDecObj( ctx));
}


/* ---------------------------------------------------------------------- */

STATICF dvoid* yrDecPar( yrctx* ctx)
{
  yrpar* par;

  par = (yrpar*) ysmGlbAlloc( sizeof(yrpar), "yrpar");
  par->mode = (sword) ysxGetUB4( ctx->xstr);
  par->name = yrDecString( ctx);
  par->type = (yrobj*) yrDecObj( ctx);
  return (dvoid*) par;
}

/* ---------------------------------------------------------------------- */

/*
 * The default case is a bit of hack: It is distinguishable because it
 * has a typecode of octet (not a legal union discrim type). We make the
 * value a 4-byte quantity even though it doesn't match the typecode
 * because it makes life easier for the typecode generator. Yes, this
 * is a serious hack.
 */
STATICF dvoid* yrDecUnionMbr( yrctx* ctx)
{
  yrunmbr* mem;

  mem = (yrunmbr*) ysmGlbAlloc( sizeof(yrunmbr), "yrunmbr");
  mem->name = yrDecString( ctx);
  mem->type = (yrobj*) yrDecObj( ctx);
  yrDecAny( ctx, &(mem->label));
  if ( yotkGetKind(mem->label._type) == yotkOctet )         /* default */
  {
    ysmGlbFree((dvoid*)mem->label._value);
    mem->label._value = ysmGlbAlloc(sizeof(ub4), "ub4");
    *(ub4*)mem->label._value = (ub4)0;
  }
  return (dvoid*) mem;
}

/* ---------------------------------------------------------------------- */

STATICF dvoid* yrDecStructMbr( yrctx* ctx)
{
  yrstrmbr* mem;

  mem = (yrstrmbr*) ysmGlbAlloc( sizeof(yrstrmbr), "yrstrmbr");
  mem->name = yrDecString( ctx);
  mem->type = (yrobj*) yrDecObj( ctx);
  return (dvoid*) mem;
}

/* ---------------------------------------------------------------------- */


STATICF void yrDecList( yrctx* ctx, yslst** lst, yrdecf decFunc)
{
  ub4 len;
  ub4 i;

  len = ysxGetUB4( ctx->xstr);
  *lst = ysLstCreate();
  for ( i = 0; i < len; i++)
  {
    ysLstEnq( *lst, (*decFunc)(ctx));
  } 
}

/* ---------------------------------------------------------------------- */

STATICF void yrReadObj( yrctx* ctx, ub4 idx)
{
  yrobj* obj;

  obj = ctx->objs.rd[idx].newobj;
  obj->defined = TRUE;    /* @@ won't always be true - externs */
  obj->repository = ctx->repository;

  ysRecord( YR_MSG(410, YR_FAC), YSLSEV_DEBUG(3), (char*)0, 
            YSLSTR(obj->repid), YSLEND);

  switch ( yrGetKind(obj) )       /* decoded earlier with repid */
  {
    case yrdkAttribute:
      yrDecNamedObj( ctx, obj);
      yrAttrData(obj).mode = (sword) ysxGetUB4( ctx->xstr);
      yrAttrData(obj).type = (yrobj*) yrDecObj( ctx);
      break;

    case yrdkConstant:
      yrDecNamedObj( ctx, obj);
      yrConstData(obj).type = (yrobj*) yrDecObj( ctx);
      yrDecAny( ctx, &(yrConstData(obj).val));
      break;

    case yrdkException:
    case yrdkStruct:
      yrDecNamedObj( ctx, obj);
      yrDecList( ctx, &yrGetContents(obj), yrDecObj);
      yrDecList( ctx, &yrStructData(obj).mbrs, yrDecStructMbr);
      break;

    case yrdkInterface:
    {
      yslst* ops;
      yslst* attrs;
      ysle* le;

      yrDecNamedObj( ctx, obj);
      yrInterfaceData(obj).defined = (boolean) ysxGetUB1( ctx->xstr);
      yrDecList( ctx, &yrInterfaceData(obj).bases, yrDecObj);
      yrDecList( ctx, &yrGetContents(obj), yrDecObj);

      ops = ysLstCreate();
      attrs = ysLstCreate();
      for ( le = ysLstHead(yrGetContents(obj)); le; le = ysLstNext(le))
      {
        yrobj* mem = (yrobj*) ysLstVal(le);

        if ( yrGetKind(mem) == yrdkOperation )
          ysLstEnq(ops, (dvoid*) mem);
        else if ( yrGetKind(mem) == yrdkAttribute )
          ysLstEnq(attrs, (dvoid*) mem);
      }

      if ( ysLstCount(ops) )
        yrInterfaceData(obj).ops = ops;
      else
      {
        yrInterfaceData(obj).ops = (yslst*)0;
        ysLstDestroy( ops, (ysmff)0);
      }

      if ( ysLstCount(attrs) )
        yrInterfaceData(obj).attrs = attrs;
      else
      {
        yrInterfaceData(obj).attrs = (dvoid*)0;
        ysLstDestroy( attrs, (ysmff)0);
      }
      break;
    }

    case yrdkModule:
      yrDecNamedObj( ctx, obj);
      yrDecList( ctx, &yrGetContents(obj), yrDecObj);
      break;

    case yrdkOperation:
      yrDecNamedObj( ctx, obj);
      yrOpData(obj).mode = (sword) ysxGetUB4( ctx->xstr);
      yrOpData(obj).rettype = (yrobj*) yrDecObj( ctx);
      yrDecList( ctx, &yrOpData(obj).raises, yrDecObj);
      yrDecList( ctx, &yrOpData(obj).pars, yrDecPar);
      yrDecList( ctx, &yrOpData(obj).ctxts, (yrdecf)yrDecString);
      break;
    case yrdkAlias:
      yrDecNamedObj( ctx, obj);
      yrAliasData(obj).type = (yrobj*) yrDecObj( ctx);
      break;

    case yrdkUnion:
      yrDecNamedObj( ctx, obj);
      yrDecList( ctx, &yrGetContents(obj), yrDecObj);
      yrUnionData(obj).disctype = (yrobj*) yrDecObj( ctx);
      yrDecList( ctx, &yrUnionData(obj).arms, yrDecUnionMbr);
      break;

    case yrdkEnum:
      yrDecNamedObj( ctx, obj);
      yrDecList( ctx, &yrEnumData(obj).mbrs, yrDecObj);
      break;

    case yrdkString:
      yrStringData(obj).bound = ysxGetUB4( ctx->xstr);
      yrSetName(obj, "");
      obj->defined_in = ctx->repository;
      break;

    case yrdkSequence:
      yrSeqData(obj).bound = ysxGetUB4( ctx->xstr);
      yrSeqData(obj).elmtype = (yrobj*) yrDecObj( ctx);
      yrSetName(obj, "");
      obj->defined_in = ctx->repository;
      break;

    case yrdkArray:
      yrArrayData(obj).length = ysxGetUB4( ctx->xstr);
      yrArrayData(obj).elmtype = (yrobj*) yrDecObj( ctx);
      yrSetName(obj, "");
      obj->defined_in = ctx->repository;
      break;

    /*
     * The repository is a little weird: The anonymous types are kept on
     * a special list. The list is encoded in the data file as a list, so
     * we know where it stops and the content list begins, but we don't 
     * need the list itself: As long as the anonymous types are added to
     * the object table during the decoding, they'll get merged properly
     * into the existing repository. And the new pseudo-repository has no
     * need for the list. So, we decode the list to get the right entries
     * in the object table, the destroy the list (but not its contents).
     */
    case yrdkRepository:
    {
      yslst* dummy;

      yrDecList( ctx, &dummy, yrDecObj);              /* anonymous types */
      ysLstDestroy( dummy, (ysmff)0);
      yrDecList( ctx, &yrGetContents(obj), yrDecObj);   /* named things */
      yrSetSrcnm(obj, "");
      obj->defined_in = ctx->repository;
      break;
    }

    default:
      yseThrow( YR_EX_BADTYPE);
      break;
  }
}



/* ---------------------------------------------------------------------- */

STATICF void yrDumpStrTbl( yrctx* ctx, ub4 nstr)
{
  ub4 i;

  ysRecord( YR_MSG(403, YR_FAC), YSLSEV_DEBUG(2), (char*)0, 
            YSLSTR("STRING"), YSLEND);
  for ( i = 1; i <= nstr; i++ )
    ysRecord( YR_MSG(404, YR_FAC), YSLSEV_DEBUG(2), (char*)0, 
              YSLSB4(i), YSLPTR(ctx->strs.rd),YSLSTR(ctx->strs.rd[i]), YSLEND);
  ysRecord( YR_MSG(405, YR_FAC), YSLSEV_DEBUG(2), (char*)0, 
            YSLSTR("STRING"), YSLEND);
}

STATICF void yrDumpObjTbl( yrctx* ctx, ub4 nobj)
{
  char* nm;
  ub4 i;

  ysRecord( YR_MSG(403, YR_FAC), YSLSEV_DEBUG(2), (char*)0, 
            YSLSTR("OBJECT"), YSLEND);
  for ( i = 0; i < nobj; i++ )
  {
    nm = yrGetAbsoluteName( ctx->objs.rd[i].newobj);
    if ( nm )
    {
      ysRecord( YR_MSG(406, YR_FAC), YSLSEV_DEBUG(2), (char*)0, 
                YSLSB4(i), YSLPTR(ctx->objs.rd[i].newobj), YSLSTR(nm), YSLEND);
      ysmGlbFree( (dvoid*)nm);
    }
    else
      ysRecord( YR_MSG(406, YR_FAC), YSLSEV_DEBUG(2), (char*)0, 
                YSLSB4(i), YSLPTR(ctx->objs.rd[i].newobj),
                YSLSTR("<anonymous>"), YSLEND);
  }
  ysRecord( YR_MSG(405, YR_FAC), YSLSEV_DEBUG(2), (char*)0, 
            YSLSTR("OBJECT"), YSLEND);
}

/* ---------------------------------------------------------------------- */
/*
 * yrRead - Read an IFR data file and root the contents in <rep>.
 *
 * <rep> should almost always be a repository object (yrdkRepository),
 * though it is possible to try it with any scope.
 */
void yrRead( yrobj* rep, CONST char* fn, ub4* count, yrldblk** data)
{
  CONST char* errtxt;
  noreg yrctx ctx;
  noreg ub4 nobj = 0;
  noreg ub4 nstr = 0;
  noreg ysbv bv = {0,0};
  sword i, len;
  sword tracing;
  noreg boolean decodeErr = FALSE;

  NOREG(ctx);
  NOREG(bv);
  NOREG(decodeErr);
  NOREG(nobj);
  NOREG(nstr);

  if ( !yrIsContainer(rep) )
    yseThrow( YR_EX_BADTYPE);
  tracing = yrRepData(rep->repository)->trace;
  CLRSTRUCT( ctx);
  ctx.repository = yrGetRepository(rep);

    /* Open the input file */
  ctx.fp = sysfpOpen( fn, "r", SYSFPKIND_BINARY, &errtxt);
  if ( !ctx.fp )
    yseThrowObj( YR_EX_OPEN_FAIL, errtxt);

  yseTry
  {
    char tag[YR_IO_TAG_SZ];

      /***** Set up decoding buffer *****/
    bv.len = YRX_BUFF_SZ;
    bv.buf = ysmGlbAlloc( YRX_BUFF_SZ, "yrxbuff");
    ctx.xstr = ysxDecodeFromStream( yrxReadBV, (ysbv*)&bv, (dvoid*)&ctx);

      /***** Read header *****/
    ysxCopy( ctx.xstr, (ub1*) tag, YR_IO_TAG_SZ);
    if ( strcmp( tag, YR_IO_TAG) != 0 )
    {
      yseThrow( YR_EX_BADHDR);        /* not an IFR data file */
    }

    ctx.ioVers = ysxGetUB4( ctx.xstr);
    if ( (ctx.ioVers >= YR_IO_NOBACK) && (ctx.ioVers <= YR_IO_VERS) )
    {                                          /* I/O format we know */
      nstr = ysxGetUB4( ctx.xstr);
      nobj = ysxGetUB4( ctx.xstr);
      ctx.maxPrim = ysxGetUB4( ctx.xstr);
    }
    else                                       /* I/O format we don't know! */
    {
      yseThrow( YR_EX_BADHDR);
    }

      /***** Populate the string table *****/
    ysRecord( YR_MSG(409, YR_FAC), YSLSEV_DEBUG(1), (char*)0, 
              YSLSTR("string"), YSLSTR(fn), YSLEND);
    ctx.strs.rd = (char**) ysmGlbAlloc( sizeof(char*) * (nstr + 1), 
                                        "ysxstrlst");
    DISCARD memset(ctx.strs.rd, 0, sizeof(char*) * (nstr + 1));
    for ( i = 1; (ub4)i <= nstr; i++ )
    {
      len = ysxGetUB4( ctx.xstr);
      ctx.strs.rd[i] = (char*) ysmGlbAlloc( len, "yrstr");
      ysxCopy( ctx.xstr, (ub1*) ctx.strs.rd[i], len);
    }

    if ( tracing >= 2 )
      yrDumpStrTbl( (yrctx*) &ctx, nstr);

    ctx.objs.rd = (yrldblk*) ysmGlbAlloc( sizeof(yrldblk) * nobj, "ysxobjlst");
    DISCARD memset(ctx.objs.rd, 0, (sizeof(yrldblk) * nobj));

      /***** Read in repository id's, populate the object table *****/
    ysRecord( YR_MSG(409, YR_FAC), YSLSEV_DEBUG(1), (char*)0, 
              YSLSTR(ctx.fp), YSLEND);
    ctx.objs.rd[0].existing = ctx.repository;
    for ( i = 0; (ub4)i < nobj; i++ )
    {
      yrobj* newobj;
      yrdk kind;
      char* repid;
      yrobj* existing;

      kind = ysxGetUB4( ctx.xstr);
      repid = yrDecString((yrctx*) &ctx);
      if ( strlen(repid) > (size_t)0 )
      {
        existing = yrLookupId( ctx.repository, repid);
        if ( existing && (yrGetKind(existing) != kind) )
          yseThrowObj(YR_EX_REDEFINED, repid);
        ctx.objs.rd[i].existing = existing;
      }

      if ( tracing && ctx.objs.rd[i].existing )
         ysRecord( YR_MSG(407, YR_FAC), YSLSEV_DEBUG(1), (char*)0, 
                   YSLSTR(repid), YSLEND);

      newobj = yrCreateObj( "yrobj");
      newobj->repid = repid;
      newobj->defined = FALSE;
      newobj->tag = kind;
      ctx.objs.rd[i].newobj = newobj;
    }
    ysRecord( YR_MSG(408, YR_FAC), YSLSEV_DEBUG(1), (char*)0, 
              YSLSTR("object"), YSLSTR(fn), YSLEND);
    for ( i = 0; (ub4)i < nobj; i++ )
    {
      yrReadObj( (yrctx*) &ctx, i);
    }

    if ( tracing >= 2 )
      yrDumpObjTbl( (yrctx*)&ctx, nobj);
  }
  yseCatch( YS_EX_ENDOFDATA)
  {
    decodeErr = TRUE;
  }
  yseCatchAll
  {
    if ( ctx.strs.rd )
    {
      for ( i = 1; (ub4)i <= nstr; i++ )
        if ( ctx.strs.rd[i] )
          ysmGlbFree( (dvoid*)ctx.strs.rd[i]);
      ysmGlbFree((dvoid*) ctx.strs.rd);
    }
    if ( ctx.objs.rd )
    {
      for ( i = 0; (ub4)i < nobj; i++ )
        if ( ctx.objs.rd[i].newobj )
          ysmGlbFree( (dvoid*)ctx.objs.rd[i].newobj);
      ysmGlbFree((dvoid*) ctx.objs.rd);
    }
    ysxDecEnd( ctx.xstr);
    ysmGlbFree((dvoid*) bv.buf);
    sysfpClose( ctx.fp);
    yseRethrow;
  }
  yseEnd;

    /***** Cleanup, close the file, etc. *****/
  ysxDecEnd( ctx.xstr);
  ysmGlbFree((dvoid*) bv.buf);
  sysfpClose( ctx.fp);
  if ( ctx.strs.rd )
  {
    for ( i = 1; (ub4)i <= nstr; i++ )
      if ( ctx.strs.rd[i] )
        ysmGlbFree( (dvoid*)ctx.strs.rd[i]);
    ysmGlbFree((dvoid*) ctx.strs.rd);
  }

  if ( decodeErr )
  {
    if ( ctx.objs.rd )
    {
      for ( i = 0; (ub4)i < nobj; i++ )
        if ( ctx.objs.rd[i].newobj )
          ysmGlbFree( (dvoid*)ctx.objs.rd[i].newobj);
      ysmGlbFree((dvoid*) ctx.objs.rd);
    }
    yseThrow( YR_EX_READ_FAIL);
  }
  else
  {
    *count = nobj;
    *data = ctx.objs.rd;
  }
}
