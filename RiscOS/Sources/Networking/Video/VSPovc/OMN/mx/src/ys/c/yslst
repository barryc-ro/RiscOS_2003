/* Copyright (c) 1995, 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * yslst.c - Linked Lists
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YSLST_ORACLE
#include <yslst.h>
#endif

/*
 * Types & Constants
 */
static ysmtagDecl(YSLST_TAG) = "yslst";
#define YSLST_AVGDEN  10    /* denominator used for weighted average in log2 */

/*
 * ysLstCreate - create a queue
 */
yslst *ysLstCreate(void)
{
  yslst *l;

  l = (yslst *) ysmGlbAlloc(sizeof(yslst), YSLST_TAG);
  l->head = l->tail = (ysle *) 0;
  l->cnt = (ub4) 0;
  l->osz = (size_t) 0;
  ysFOCreate(&l->fop, sizeof(ysle), ysmGlbHeap(), "list elems");
  l->mtcon = FALSE;
  DISCARD memset(&l->metrics, 0, sizeof(l->metrics));
  return l;
}

/*
 * ysDLstCreate - create a data list
 */
yslst *ysDLstCreate(size_t osz)
{
  yslst *l;

  l = (yslst *) ysmGlbAlloc(sizeof(yslst), YSLST_TAG);
  l->head = l->tail = (ysle *) 0;
  l->cnt = (ub4) 0;
  l->osz = osz;
  ysFOCreate(&l->fop, offsetof(ysle, ptr) + osz, ysmGlbHeap(), "list elems");
  l->mtcon = FALSE;
  DISCARD memset(&l->metrics, 0, sizeof(l->metrics));
  return l;
}

/*
 * ysLstDestroy - destroy a queue
 */
void ysLstDestroy(yslst *l, ysmff destructor)
{
  ysle  *e;

  ysmCheck((dvoid *) l, YSLST_TAG);

  if (destructor)
    for (e = l->head; e; e = e->next)
      (*destructor)(e->ptr);
  ysFODestroy(&l->fop);

  ysmGlbFree((dvoid *) l);
}

/*
 * ysLstIns - insert an element
 */
ysle *ysLstIns(yslst *l, ysle *le, dvoid *val)
{
  ysle  *nle;
  sb4    delta;

  ysmCheck((dvoid *) l, YSLST_TAG);
  nle = (ysle *) ysFOAlloc(&l->fop);
  if (l->osz)
    DISCARD memcpy((dvoid *) &nle->ptr, val, l->osz);
  else
    nle->ptr = val;

  if (le)
    {
      /* insert after the given queue element */
      nle->next = le->next;
      nle->prev = le;

      if (le->next)
	le->next->prev = nle;
      else
	l->tail = nle;

      le->next = nle;
    }
  else
    {
      /* insert at the head of the queue */
      nle->next = l->head;
      nle->prev = (ysle *) 0;

      if (l->head)
	l->head->prev = nle;
      else
	l->tail = nle;

      l->head = nle;
    }

  l->cnt++;

  /* accumulate metrics if enabled */
  if (l->mtcon)
    {
      /* length metrics */
      l->metrics.totins++;
      if (l->cnt > l->metrics.maxlen)
	l->metrics.maxlen = l->cnt;
      
      /* avglen = avglen + (curlen - avglen)/(1 << YSLST_AVGDEN) */
      delta = (sb4) (l->cnt) - (sb4) (l->metrics.avglen >> YSLST_AVGDEN);
      l->metrics.avglen = (ub4) ((sb4) l->metrics.avglen + delta);

      /* stamp element with enqueue time */
      ysClock(&nle->enqtm);
    }

  return nle;
}

/*
 * ysLstRem - remove an element
 */
dvoid *ysLstRem(yslst *l, ysle *le)
{
  dvoid *val;
  sb4    delta;
  sysb8  now, enqtm, deltm;

  /* check tags */
  ysmCheck((dvoid *) l, YSLST_TAG);
  if (!le)
    return (dvoid *) 0;

  val = le->ptr;

  /* remove from queue */
  if (le->prev)
    le->prev->next = le->next;
  else
    l->head = le->next;

  if (le->next)
    le->next->prev = le->prev;
  else
    l->tail = le->prev;

  l->cnt--;

  /* accumulate metrics if enabled */
  if (l->mtcon)
    {
      /* avglen = avglen + (curlen - avglen)/(1 << YSLST_AVGDEN) */
      delta = (sb4) (l->cnt) - (sb4) (l->metrics.avglen >> YSLST_AVGDEN);
      l->metrics.avglen = (ub4) ((sb4) l->metrics.avglen + delta);

      /* compute time on queue, average time, and maximum time */
      ysClock(&now);
      sysb8sub(&enqtm, &now, &le->enqtm);

      if (sysb8cmp(&enqtm, >, &l->metrics.maxtm))
	sysb8set(&l->metrics.maxtm, &enqtm);

      sysb8srl(&deltm, &l->metrics.avgtm, YSLST_AVGDEN);
      sysb8sub(&deltm, &enqtm, &deltm);
      sysb8add(&l->metrics.avgtm, &l->metrics.avgtm, &deltm);
    }

  /* free element */
  ysFOFree(&l->fop, (dvoid *) le);
  return val;
}

/*
 * ysDLstRem - remove an element from a data list
 */
dvoid *ysDLstRem(yslst *l, ysle *le, dvoid *val)
{
  if (le)
    {
      if (val)
	DISCARD memcpy(val, (dvoid *) &le->ptr, l->osz);
      DISCARD ysLstRem(l, le);
      return val;
    }
  else
    return (dvoid *) 0;
}

/*
 * ysLstMov - move a list element
 */
void ysLstMov(yslst *l, ysle *sle, ysle *dle)
{
  ysmCheck(l, YSLST_TAG);
  if (!sle || sle == dle)
    return;

  /* remove from queue */
  if (sle->prev)
    sle->prev->next = sle->next;
  else
    l->head = sle->next;

  if (sle->next)
    sle->next->prev = sle->prev;
  else
    l->tail = sle->prev;

  /* add to queue */
  if (dle)
    {
      /* insert after the given queue element */
      sle->next = dle->next;
      sle->prev = dle;

      if (dle->next)
	dle->next->prev = sle;
      else
	l->tail = sle;

      dle->next = sle;
    }
  else
    {
      /* insert at the head of the queue */
      sle->next = l->head;
      sle->prev = (ysle *) 0;

      if (l->head)
	l->head->prev = sle;
      else
	l->tail = sle;

      l->head = sle;
    }
}

/*
 * ysLstMetricsOn - turn metrics on
 */
void ysLstMetricsOn(yslst *l)
{
  DISCARD memset(&l->metrics, 0, sizeof(yslmtc));
  l->metrics.maxlen = l->cnt;
  l->metrics.avglen = l->cnt << YSLST_AVGDEN;
  l->mtcon = TRUE;
}

/*
 * ysLstMetricsOff - turn metrics off
 */
void ysLstMetricsOff(yslst *l)
{
  l->mtcon = FALSE;
}

/*
 * ysLstGetMetrics - get current metrics
 */
void ysLstGetMetrics(yslst *l, yslmtc *metrics)
{
  if (!l->mtcon)
    yseThrow(YS_EX_BADPARAM);

  l->metrics.curlen = l->cnt;
  DISCARD memcpy(metrics, &l->metrics, sizeof(yslmtc));
  metrics->avglen = metrics->avglen / (1 << YSLST_AVGDEN);
  sysb8srl(&metrics->avgtm, &metrics->avgtm, YSLST_AVGDEN);
}

/*
 * ysLstGetCurTime - get current enqueue delta time
 */
void ysLstGetCurTime(yslst *l, ysle *le, sysb8 *delta)
{
  sysb8 now;

  if (!l->mtcon)
    yseThrow(YS_EX_BADPARAM);

  ysClock(&now);

  sysb8sub(delta, &now, &le->enqtm);
}
