/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 *   yrsrv.c - Driver for Runtime Interface Repository Server
 *
 * NOTES
 * There are no required arguments. If load files are specified, the
 * repository is seeded with the contents of these files. Otherwise,
 * it starts out empty (except for a pre-definition of CORBA::Object).
 *
 * The repository may be started with a tag which distinguishes it from
 * other repositories. If no tag is given on the command line, 
 * YRSRV_DEFAULT_TAG is used.
 *
 * "mnirsrv.debug-trace=N" enables tracing inside the repository. It
 * doesn't talk too much at level 1, but by the time you get to level 3,
 * the read/write/merge process has a LOT to say for itself. You can 
 * only set this via the environment or -R.
 *
 * The IFR server doesn't support any form of data replication at this
 * time because the race conditions are hairy and we expect to deal with
 * this issue in the near future by hosting it on top of a real database.
 * In the present model, it isn't really a good idea to have two servers
 * running under the same tag because there is no reason to suppose they
 * contain the same data, so uses of loosely bound IFR objects can cause
 * problems. 
 *
 * Ergo, we currently prohibit this by default, though it can be overridden 
 * via the resource setting "yrsrv.allow-dups=true". It is not exposed as a
 * command line option because this isn't something we really want people
 * to be doing. However, the limitation will certainly be lifted in future
 * revisions.
 *
 * Signal handling: The server should ignore SIGINT and respond gracefully
 * to SIGTERM, but currently cannot do this: You're supposed to be able
 * to use the YS layer to intercept these signals through either a handler
 * or a try/catch block, but something down inside Media Net is eating the
 * signal and ysIntr never gets called. So, the server currently uses
 * mnSetIntrHandler so it can get a word in edgewise; as a side-effect, we
 * can't distinguish between interrupt and term.
 *
 * Private resources: The IFR recognizes these resources which have no
 * associated command line options:
 *
 * mnirsrv.debug-trace=N	Set the debugging trace info level. The
 *                              higher the number, the more it has to say.
 * mnirsrv.tty-only=true	Only long messages to the console, not to
 *                              the log daemon. By default, we detach from
 *                              the console and only babble at the logger.
 *                              This is primarily for debugging.
 *
 * HISTORY
 * 04/19/96 kcoleman	Switch over to ysRecord for error reporting.
 * 02/12/96 kcoleman	Make sure all CORBA objects get cleaned up
 * 01/26/96 kcoleman	Add interrupt handler
 * 01/24/96 kcoleman	Fix bug 336634: Change default tag not to use "OMX"
 * 01/17/96 kcoleman	Fix bug 335308: Init MN & YO after parse cmd line
 * 12/12/95 kcoleman	Fix version reporting, rename executable to mnirsrv
 * 12/01/95 kcoleman	Prevent multiple servers with same tag
 * 11/10/95 kcoleman    Creation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

#ifndef YS_ORACLE
#include <ys.h>
#endif

#ifndef YO_ORACLE
#include <yo.h>
#endif
 
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
 
#ifndef YR_ORACLE
#include <yr.h>
#endif
 
#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif

#ifndef YR0_ORACLE
#include <yr0.h>
#endif

#ifndef SMNI_ORACLE
#include <smni.h>
#endif

#ifndef YRMGIDL_IDL
#include <yrmgidl.h>
#endif

#ifndef SYSFP_ORACLE
#include <sysfp.h>
#endif

#ifndef YRDIIDL_IDL
#include <yrdiidl.h>
#endif


STATICF void yrmgrInitRepository( yrobj* rep);
STATICF void yrmgrTermRepository(void);
STATICF void yrsrvIntrHandler( dvoid* usrp, sb4 err);
STATICF void yrsrvDestroyObj( dvoid* obj);
STATICF void yrsrvLogInit( yrmgrctx* ctx);
STATICF void yrsrvLogTerm( yrmgrctx* ctx);

#ifndef YRSRV_VERS
#define YRSRV_VERS "3.2.0.0.0"
#endif
#ifndef YRSRV_NAME
#define YRSRV_NAME "Oracle Media Net Interface Repository Server"
#endif
#ifndef YRSRV_STS
#define YRSRV_STS YSLVL_DEVEL
#endif

#ifndef YRSRV_COMP
#define YRSRV_COMP "mnirsrv"
#endif

struct ysargmap yrsrvargmap[] =
{
  { 'f', "mnirsrv.ifr-data-path", YSARG_MANY}, 
  { YSARG_OPTPARAM, "mnirsrv.ifr-name", 0},
  { 0, (char*)0, 0}                         /* array terminator */
};

boolean yrsrvMain( dvoid* osdp, char* name, sword argc, char** argv);

boolean yrsrvMain( dvoid* osdp, char* name, sword argc, char** argv)
{
  noreg sword status;
  yrmgrctx ctx;
  noreg boolean ok;
 
  ysInit( osdp, YRSRV_COMP);
 
  NOREG(ok);
  NOREG(status);
  ok = TRUE;
  status = ysArgParse( argc, argv, yrsrvargmap);
  CLRSTRUCT( ctx);

  if ( status == YSARG_NORMAL )
  {
    CONST char* noreg tag;
    yslst* loadlist;
 
    NOREG(tag);
    smniInit( osdp, (mnLogger) yslError);
    yoInit();
    mnSetIntrHandler( yrsrvIntrHandler, (dvoid*) &ctx);

    yrsrvLogInit( &ctx);    /* do not call ysRecord before this */

    tag = ysResGetLast( "mnirsrv.ifr-name");
    if ( !tag )
      tag = YRSRV_DEFAULT_TAG;

    ctx.tag = (char*) tag;
    ysRecord( YR_MSG(306, YR_FAC), YSLSEV_INFO, (char*)0, 
              YSLSTR(ctx.tag), YSLEND);

      /***** Make sure something else isn't running with this tag *****/
    if ( !ysResGetBool( "mnirsrv.allow-dups") )
    {
      yr_mgr doppelganger;
      yoenv env;

      yoEnvInit( &env);
      doppelganger = yoBind( yr_mgr__id, tag, (yoRefData*)0, (char*)0);
      yseTry
      {
        CORBA_Repository dummy;

        dummy = yr_mgr__get_repository( doppelganger, &env);
        ok = FALSE;                    /* someone already has this tag */
        yoRelease( (dvoid*) dummy);
      }
      yseCatchAll
      {
          /* Not already a running server with this tag */
        ok = TRUE;
      }
      yseEnd

      yoRelease( (dvoid*)doppelganger);
      yoEnvFree(&env);
      if ( !ok )
      {
        ysRecord( YR_MSG(11, YR_FAC), YSLSEV_ERR, (char*)0, 
                  YSLSTR(tag), YSLEND);
        goto error;
      }
    }
 
      /***** Create the repository *****/
    yseTry
    {
      ctx.repository = yrCreateRepository();
    }
    yseCatchAll
    {
      ysRecord( YR_MSG(12, YR_FAC), YSLSEV_ERR, (char*)0, 
                  YSLSTR(tag), YSLSTR(ysidToStr( yseExid)), YSLEND);
      ok = FALSE;
    }
    yseEnd

    if ( !ok )
      goto error;

      /***** Load requested files, if any *****/
    ctx.loadlst = ysLstCreate();
    loadlist = ysResGet( "mnirsrv.ifr-data-path");
    if ( loadlist )
    {
      ysle* noreg le;
      yslst* loaded;
      char* noreg path;

      NOREG(path);
      NOREG(le);
      for ( le = ysLstHead(loadlist); ok && le; le = ysLstNext(le))
      {
        path = (char*) ysLstVal(le);
        ysRecord( YR_MSG(300, YR_FAC), YSLSEV_INFO, (char*)0, 
                  YSLSTR( (char*)path), YSLSTR(tag), YSLEND);
        yseTry
        {
          loaded = yrmgrLoad( ctx.repository, (char*) path);
          if ( ysLstCount(loaded) > 0 )
          {
            dvoid* f;
            while ( (f = ysLstDeq( loaded)) )
              ysLstEnq( ctx.loadlst, f);
          }
          ysLstDestroy( loaded, (ysmff)0);
        }
        yseCatchObj( YR_MGR_EX_LOADCONFLICT, yr_mgr_LoadConflict, ex)
        {
          ok = FALSE;
          yrmgrReportLoadConflict( (dvoid*)&ex, YSLSEV_ERR);
          yr_mgr_LoadConflict__free( (dvoid*)&ex, yoFree);
        }
        yseCatchObj( YR_MGR_EX_FILENOTFOUND, yr_mgr_fileNotFound, ex)
        {
          ysRecord( YR_MSG(3, YR_FAC), YSLSEV_ERR, (char*)0, 
                    YSLSTR(ex.path), YSLEND);
          yr_mgr_fileNotFound__free( &ex, yoFree);
          ok = FALSE;
        }
        yseCatchObj( YR_MGR_EX_FILECORRUPTED, yr_mgr_fileCorrupted, ex)
        {
          ysRecord( YR_MSG(13, YR_FAC), YSLSEV_ERR, (char*)0, 
                    YSLSTR(ex.path), YSLEND);
          yr_mgr_fileCorrupted__free( &ex, yoFree);
          ok = FALSE;
        }
        yseCatchAll
        {
          ok = FALSE;
          ysRecord( YR_MSG(5, YR_FAC), YSLSEV_ERR, (char*)0, 
                    YSLSTR((char*)path), YSLSTR(ysidToStr( yseExid)), YSLEND);
          yseRethrow;
        }
        yseEnd
      }
      if ( ok )
      {
        if ( ysLstCount(ctx.loadlst) == 0 )
          ysRecord( YR_MSG(307, YR_FAC), YSLSEV_INFO, (char*)0, YSLNONE);
        ysRecord( YR_MSG(308, YR_FAC), YSLSEV_INFO, (char*)0, YSLNONE);
      }
    }

      /***** Start up the server *****/
    if ( ok )
    {
      yssnk* ttysink;

      if ( ctx.trace )
        yrSetTraceLevel( ctx.repository, ctx.trace);

      yrmgrInitRepository( ctx.repository);
      yrdiiInit( ctx.repository, (char*) tag);
      yrmgrInit(&ctx);

      /***** Stomp the tty sink, detach from console *****/
      if ( !ysResGetBool( "mnirsrv.tty-only") )
      {
        ttysink = ysSinkFind( "tty");
        ysSinkDestroy( ttysink);
        yslDetach();
      }

      ctx.servicing = TRUE;
      yoService( (ysque*) 0);

      yrmgrTerm(&ctx);
      yrdiiTerm( (char*) tag);
      yrmgrTermRepository();
      ctx.servicing = FALSE;
      ysRecord( YR_MSG(309, YR_FAC), YSLSEV_INFO, (char*)0, 
                YSLSTR(tag), YSLEND);
    }
    else if ( ctx.loadlst )
      ysLstDestroy(ctx.loadlst, (ysmff)yoFree);
error:
    if ( ctx.repository )    
      yrDestroyRepository( ctx.repository, ysmFGlbFree, yrsrvDestroyObj);
    yrsrvLogTerm( &ctx);
    yoTerm();
    mnTerm();
  }
  else if ( status == YSARG_ERROR )
    ok = FALSE;
  else if ( status == YSARG_VERSION )
  {
    char buf[1024];

    yslError( ysFmtVersion(buf, sizeof(buf), YRSRV_NAME, YRSRV_VERS, 
              YRSRV_STS, __DATE__));
    yslError( ysVersion(buf, sizeof(buf)));
  }
  else
    ok = TRUE;

    /***** All done. Clean up and exit *****/
  ysTerm(osdp);
  return ok;
}


/* ------------------------------------------------------------------------ */

STATICF void yrmgrInitRepository( yrobj* rep)
{
  Init_CORBA_Repository( rep);
  Init_yr_intfdef( rep);

  /********** 
   * The rest of these have no impl state and have objects which are
   * lazily created when someone touches the corresponding yrobj.
   **********/
  Init_CORBA_AttributeDef();
  Init_CORBA_ConstantDef();
  Init_CORBA_ExceptionDef();
  Init_CORBA_InterfaceDef();
  Init_CORBA_ModuleDef();
  Init_CORBA_OperationDef();
  Init_CORBA_TypedefDef();
  Init_CORBA_AliasDef();
  Init_CORBA_StructDef();
  Init_CORBA_UnionDef();
  Init_CORBA_EnumDef();
  Init_CORBA_PrimitiveDef();
  Init_CORBA_StringDef();
  Init_CORBA_SequenceDef();
  Init_CORBA_ArrayDef();
}


/* ------------------------------------------------------------------------ */

/* @@ releasing the object references */
STATICF void yrmgrTermRepository()
{
  Term_CORBA_Repository();
  Term_yr_intfdef();
  Term_CORBA_AttributeDef();
  Term_CORBA_ConstantDef();
  Term_CORBA_ExceptionDef();
  Term_CORBA_InterfaceDef();
  Term_CORBA_ModuleDef();
  Term_CORBA_OperationDef();
  Term_CORBA_TypedefDef();
  Term_CORBA_AliasDef();
  Term_CORBA_StructDef();
  Term_CORBA_UnionDef();
  Term_CORBA_EnumDef();
  Term_CORBA_PrimitiveDef();
  Term_CORBA_StringDef();
  Term_CORBA_SequenceDef();
  Term_CORBA_ArrayDef();
}


/* ------------------------------------------------------------------------ */
/*
 * yrsrvIntrHandler - Signal handler, for graceful shutdown on SIGTERM.
 *   In addition to tearing down Media Net, deactivate our impls so the
 *   ORB knows we're not around any more.
 *
 * When ysIntr works properly with Media Net, either ditch this handler
 * completely (and use try/catch) or keep this handler and add a test
 * to make sure the trigger was YS_EX_SHUTDOWN.
 */
STATICF void yrsrvIntrHandler( dvoid* usrp, sb4 err)
{
  yrmgrctx* ctx = (yrmgrctx*) usrp;

  if ( ctx->logger )
    ysRecord(YR_MSG(305, YR_FAC), YSLSEV_INFO, (char*)0, 
             YSLSB4(err), YSLEND);
  if ( ctx->servicing )
    yoShutdown( (ysque*)0);
  else      /* haven't done anything yet except init OMN */
  {
    if ( ctx->repository )    
      yrDestroyRepository( ctx->repository, ysmFGlbFree, yrsrvDestroyObj);
    yrsrvLogTerm( ctx);
    yoTerm();
    mnTerm();
    exit(0);
  }
}


/* ------------------------------------------------------------------------ */
/*
 * yrsrvDestroyObj - Release a CORBA object associated with the IFR
 *
 * This is a callback used by yrDestroyObj. yrDestroyObj cannot do this
 * directly because of interdependencies between yr, yo, and yc.  Using
 * yoRelease and yoDispose requires a portion of yo which depends on the
 * IDL compiler, which needs yrDestroyObj. And there are really no objects
 * requiring destruction if we're not running the server, so...
 */
STATICF void yrsrvDestroyObj( dvoid* obj)
{
  yoRelease( obj);
  yoDispose( obj);
}

/* ------------------------------------------------------------------------ */
/*
 * yrsrvLogInit - Setup messaging logging
 *
 * Determines the message level to report and the correct destination.
 * Message level (severity) is determined as follows:
 *
 *   YSLSEV_WARNING	default
 *   YSLSEV_INFO	if -T (mnirsrv.verbose)
 *   YSLSEV_DEBUG(n)	if mnirsrv.debug-trace=n
 *
 * By default messages are logged to both the console (until we detach)
 * and the log daemon, mnlogsrv. To make debugging simpler (and perhaps for
 * users in the future), if mnirsrv.tty-only is set, we log only to the
 * console and never to the log daemon.
 *
 * Note that in the default case, there is no need to set a special filter
 * on the tty sink: Currently, by the time the server has anything to say
 * that isn't a true error message, we've detached from the console.
 */
STATICF void yrsrvLogInit( yrmgrctx* ctx)
{
  CONST char* traceopt;
  ub4 severity;
  char msgfilter[512];
  yssnk* ttysink;

  /***** Determine the message severity filter *****/
  severity = (ysResGetBool("mnirsrv.verbose") ? YSLSEV_INFO : YSLSEV_WARNING);
  traceopt = ysResGetLast("mnirsrv.debug-trace");
  if ( traceopt )
  {
    ub4 lvl;
    char* dummy = (char*)0;

    lvl = strtol( traceopt, &dummy, 10);
    if ( dummy  != traceopt )     /* format was OK */
    {
      ctx->trace = lvl;
      severity = YSLSEV_DEBUG(lvl);
    }
  }

  /***** Set up the tty filter *****/
  if ( !ysResGetLast( "ys.log.msg-path") )
    yslError( "Unable to locate message file. Set ys.log.msg-path.");
  ysFmtStrl( msgfilter, sizeof(msgfilter), 
             "maxsev 4, prod %s fac %s maxsev %u", 
             YS_PRODUCT, YR_FAC, severity);
  ttysink = ysSinkFind( "tty");
  if ( ttysink )
    ysAddFilter( ttysink, msgfilter);
  else
    yslError( "Unable to find tty sink.");

  /***** Log to mnlogsrv *****/
  if ( !ysResGetBool( "mnirsrv.tty-only") )
  {
    ctx->logger = yeevInit( (ysque*)0);
    yeevSinkAttach( ctx->logger, severity);
  }
}

/* ------------------------------------------------------------------------ */
/*
 * yrsrvLogTerm - Cleanup messaging logging as necessary
 *
 * May be nothing to do if we haven't yet attached to the logger or if
 * we're only logging to the tty.
 */
STATICF void yrsrvLogTerm( yrmgrctx* ctx)
{
  if ( ctx->logger )
  {
    yeevSinkDetach( ctx->logger);
    yeevTerm( ctx->logger);
  }
}
