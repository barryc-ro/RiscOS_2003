/* Copyright (c) 1994 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 * mnscc.c - OMN Process Server Public Interface (client-side stubs)
 *
 * DESCRIPTION
 * Stub routines for clients.
 *
 * REVISIONS
 * jolkin	09/17/94 Creation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNSC_ORACLE
#include <mnsc.h>
#endif

sb4 mnsRegister(mnrb *bh, CONST char *name, CONST mnrid *progid, mna *addr)
{
  mnx  *xstr;
  mnbv *inargs, *outargs;
  ub4   incnt, outcnt;
  sb4   sts;

  /* marshal the arguments */
  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &inargs, &incnt, (dvoid *) 0);
  if (mnxDynStr(xstr, (char **) &name) &&
      mnrxId(xstr, (dvoid *) progid) &&
      mnxAddr(xstr, addr))
    sts = 0;
  else
    sts = mnLastError();

  /* make the call */
  if (!sts)
    sts = mnrCall(bh, (dvoid **) 0, "mnsRegister", inargs, incnt,
		  &outargs, &outcnt, (mnHandler) 0, (dvoid *) 0);
  mnxDestroy(xstr, TRUE);

  if (sts < 0)
    return sts;

  /* unmarshal the arguments */
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &outargs, &outcnt, (dvoid *) 0);
  if (!mnxSB4(xstr, &sts))
    sts = mnLastError();
  mnxDestroy(xstr, TRUE);

  return sts;
}

sb4 mnsGetNext(mnrb *bh, mna *addr)
{
  sb4   sts;
  mnbv *inargs, *outargs;
  ub4   incnt, outcnt;
  mnx  *xstr;

  /* marshal the arguments */
  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &inargs, &incnt, (dvoid *) 0);
  if (mnxAddr(xstr, addr))
    sts = 0;
  else
    sts = mnLastError();

  /* make the call */
  if (!sts)
    sts = mnrCall(bh, (dvoid **) 0, "mnsGetNext", inargs, incnt,
		  &outargs, &outcnt, (mnHandler) 0, (dvoid *) 0);
  mnxDestroy(xstr, TRUE);

  if (sts < 0)
    return sts;

  /* unmarshal the arguments */
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &outargs, &outcnt, (dvoid *) 0);
  if (!mnxSB4(xstr, &sts))
    sts = mnLastError();
  mnxDestroy(xstr, TRUE);

  return sts;
}

sb4 mnsUnregister(mnrb *bh, mna *addr)
{
  sb4   sts;
  mnbv *inargs, *outargs;
  ub4   incnt, outcnt;
  mnx  *xstr;

  /* marshal the arguments */
  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &inargs, &incnt, (dvoid *) 0);
  if (mnxAddr(xstr, addr))
    sts = 0;
  else
    sts = mnLastError();

  /* make the call */
  if (!sts)
    sts = mnrCall(bh, (dvoid **) 0, "mnsUnregister", inargs, incnt,
		  &outargs, &outcnt, (mnHandler) 0, (dvoid *) 0);
  mnxDestroy(xstr, TRUE);

  if (sts < 0)
    return sts;

  /* unmarshal the arguments */
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &outargs, &outcnt, (dvoid *) 0);
  if (!mnxSB4(xstr, &sts))
    sts = mnLastError();
  mnxDestroy(xstr, TRUE);

  return sts;
}

sb4 mnsPause(mnrb *bh, mna *addr, boolean pause)
{
  mnx  *xstr;
  mnbv *inargs, *outargs;
  ub4   incnt, outcnt;
  sb4   sts;

  /* marshal the arguments */
  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &inargs, &incnt, (dvoid *) 0);
  if (mnxAddr(xstr, addr) && mnxBoolean(xstr, &pause))
    sts = 0;
  else
    sts = mnLastError();

  /* make the call */
  if (!sts)
    sts = mnrCall(bh, (dvoid **) 0, "mnsPause", inargs, incnt,
		  &outargs, &outcnt, (mnHandler) 0, (dvoid *) 0);
  mnxDestroy(xstr, TRUE);

  if (sts < 0)
    return sts;

  /* unmarshal the arguments */
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &outargs, &outcnt, (dvoid *) 0);
  if (!mnxSB4(xstr, &sts))
    sts = mnLastError();
  mnxDestroy(xstr, TRUE);

  return sts;
}

sb4 mnsStop(mnrb *bh, mna *addr)
{
  mnx  *xstr;
  mnbv *inargs, *outargs;
  ub4   incnt, outcnt;
  sb4   sts;

  /* marshal the arguments */
  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &inargs, &incnt, (dvoid *) 0);
  if (mnxAddr(xstr, addr))
    sts = 0;
  else
    sts = mnLastError();

  /* make the call */
  if (!sts)
    sts = mnrCall(bh, (dvoid **) 0, "mnsStop", inargs, incnt,
		  &outargs, &outcnt, (mnHandler) 0, (dvoid *) 0);
  mnxDestroy(xstr, TRUE);

  if (sts < 0)
    return sts;

  /* unmarshal the arguments */
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &outargs, &outcnt, (dvoid *) 0);
  if (!mnxSB4(xstr, &sts))
    sts = mnLastError();
  mnxDestroy(xstr, TRUE);

  return sts;
}

sb4 mnsQuery(mnrb *bh, mnxStream *stream, ub4 *clock)
{
  mnx  *xstr;
  mnbv *inargs, *outargs;
  ub4   incnt, outcnt;
  sb4   sts;

  /* marshal the arguments */
  stream->elmsz = sizeof(mnsqent);
  stream->xfunc = mnsxQent;

  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &inargs, &incnt, (dvoid *) 0);
  if (mnxOutStream(xstr, stream))
    sts = 0;
  else
    sts = mnLastError();

  /* make the call */
  if (!sts)
    sts = mnrCall(bh, (dvoid **) 0, "mnsQuery", inargs, incnt,
		  &outargs, &outcnt, (mnHandler) 0, (dvoid *) 0);
  mnxDestroy(xstr, TRUE);

  if (sts < 0)
    return sts;

  /* unmarshal the arguments */
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &outargs, &outcnt, (dvoid *) 0);
  if (!mnxB4(xstr, clock) || !mnxSB4(xstr, &sts))
    sts = mnLastError();
  mnxDestroy(xstr, TRUE);

  return sts;
}
