/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ycppexp.c - Macro Expansion
 *
 * HISTORY
 * 04/08/96 kcoleman	Use ysRecord for error reporting.
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCPP_ORACLE
#include <ycpp.h>
#endif

STATICF boolean ycFindPar(ysle *elm, sword sp, sword ep, boolean toplvl);
STATICF ysstr **ycCollect(ycctx *ctx, ycmd *md, ysle *elm, sword sp);
STATICF sword ycReplace(ycctx *ctx, ycmd *md, ysle *elm, sword sp,
			ysstr **args);
STATICF ysstr *ycStringize(ysstr *str);

/*
 * ycppExpand - expand a line
 *   ycppExpand() performs macro expansion on a given line.  It starts
 *   from the offset sp into the line.  The line is scanned for macro
 *   identifiers.  The result is the original line, but with all macros
 *   fully expanded.
 */
void ycppExpand(ycctx *ctx, ysle *elm, sword sp, sword ep, boolean toplvl)
{
  sword  op, cls;
  size_t dlen, rlen;
  ycmd  *md;
  ysstr *id, **args;
  ycsup *sup;
  ycln  *ln;
  ysle  *le;
  char   tmpbuf[SYSFP_MAX_PATHLEN];

  ln = (ycln *) ysLstVal(elm);

  while (sp < ep)
    {
      /* get next pre-processing token */
      op = sp;
      cls = ycppGetToken(ln, &sp, (sword *) 0, (ysstr **) 0);
      if (cls != YCPP_IDENT || sp > ep)
	continue;

      /* re-get identifier and check if it is a macro */
      sp = op;
      DISCARD ycppGetToken(ln, &sp, (sword *) 0, &id);

      /* check if it is a user macro */
      md = (ycmd *)
	ysHshFind(ctx->mdtbl, (dvoid *) ysStrToText(id), ysStrLen(id) + 1);
      ysStrDestroy(id);
      if (!md)
	continue;

      /* check if it is a pre-defined variable macro */
      if (!strcmp(md->name, "__LINE__"))
	{
	  ysStrDestroy(md->rpl);
	  DISCARD sprintf(tmpbuf, "%d", ln->line);
	  md->rpl = ysStrCreate(tmpbuf);
	}
      else if (!strcmp(md->name, "__FILE__"))
	{
	  ysStrDestroy(md->rpl);
	  DISCARD sprintf(tmpbuf, "\"%s\"", ln->name);
	  md->rpl = ysStrCreate(tmpbuf);
	}

      /* advance past white space */
      op = ycSkipWS(ln->text, op, sp);

      /* make sure that we are not rescanning a replacement sequence */
      for (le = ysLstHead(ctx->mdexp); le; le = ysLstNext(le))
	{
	  sup = (ycsup *) ysLstVal(le);
	  if (sup->md == md && op >= sup->off && op < sup->eor)
	    break;
	}

      if (le)
	continue;

      /* if the macro requires parameters, locate the left parenthesis */
      if (md->pcnt && !ycFindPar(elm, sp, ep, toplvl))
	continue;

      /* begin replacement */
      dlen = ysStrLen(ln->text);
      if (!md->pcnt)
	{
	  ln->text = ysStrDel(ln->text, op, sp - op);
	  ln->text = ysStrIns(ln->text, op, ysStrToText(md->rpl));
	  rlen = ysStrLen(md->rpl);
	}
      else
	{
	  ln->text = ysStrDel(ln->text, op, sp - op);
	  args = ycCollect(ctx, md, elm, op);
	  rlen = (args ? ycReplace(ctx, md, elm, op, args) : 0);
	}

      dlen = ysStrLen(ln->text) - dlen;

      /* now update expansion list */
      for (le = ysLstHead(ctx->mdexp); le; le = ysLstNext(le))
	{
	  sup = (ycsup *) ysLstVal(le);
	  if ((sword)(op + dlen) < sup->off)
	    {
	      sup->off += (sword) dlen;
	      sup->eor += (sword) dlen;
	    }
	}

      sup = (ycsup *) ysmGlbAlloc(sizeof(ycsup), "ycsup");
      sup->md = md;
      sup->off = op;
      sup->eor = op + (sword) rlen;
      ysLstEnq(ctx->mdexp, (dvoid *) sup);

      ep += (sword) dlen;
      sp = op;
    }

  /* free expansion list if at top level */
  if (toplvl)
    {
      ysLstDestroy(ctx->mdexp, ysmFGlbFree);
      ctx->mdexp = ysLstCreate();
    }
}

/*
 * ycFindPar - find a left parenthesis
 *   ycFindPar() scans forward for a left parenthesis in the stream, skipping
 *   over any intervening white space.
 */
STATICF boolean ycFindPar(ysle *elm, sword sp, sword ep, boolean toplvl)
{
  ycln *ln;

  ln = (ycln *) ysLstVal(elm);

  while (elm)
    {

      /* skip white space */
      sp = ycSkipWS(ln->text, sp, ep);

      /* if we reached the end of the line, go to the next line and
       * resume the scan.
       */
      if (sp == (sword)ysStrLen(ln->text) && toplvl)
	{
	  elm = ysLstNext(elm);
	  if (elm)
	    ln = (ycln *) ysLstVal(elm);
	  sp = 0;
	}
      else
	break;
    }

  return (elm && sp < ep && ysStrToText(ln->text)[sp] == '(');
}

/*
 * ycCollect - collect arguments
 *   ycCollect() collects arguments for a function-like macro.  It first
 *   scans for an initial left parenthesis (which is guaranteed to be there
 *   by ycFindPar()).  Then, it collects arguments until it encounters a
 *   corresponding right parenthesis.  Unprotected commas separate arguments.
 *   If lines are spanned, these lines are concatentated to the original.
 *   Meanwhile, the arguments are deleted from the original line as they
 *   are collected.  As a result, the original line is returned with the
 *   entire argument list to the macro call deleted from the line.  The
 *   collected list of arguments is returned as an array of strings.  If
 *   there is an error during collection, a null array is returned.
 */
STATICF ysstr **ycCollect(ycctx *ctx, ycmd *md, ysle *elm, sword sp)
{
  sword   spcnt, argc, i, paren, op;
  size_t  len;
  char   *buf, quote;
  ycln   *ln, *nxtln;
  ysstr **args;

  spcnt = 0;
  op = sp;

  /* locate left parenthesis */
  ln = (ycln *) ysLstVal(elm);
  while (elm)
    {
      /* skip white space */
      len = ysStrLen(ln->text);
      sp = ycSkipWS(ln->text, sp, (sword) len);

      /* if we reached the end of a line, concatenate the line and resume */
      if (sp < (sword)len)
	break;
      else if (ysLstNext(elm))
	{
	  ycLnCat(ctx, elm);
	  spcnt++;
	}
    }

  /* accumulate arguments */
  args = (ysstr **) ysmGlbAlloc(sizeof(ysstr *) * md->pcnt, "arg array");
  for (i = 0; i < md->pcnt; i++)
    args[i] = ysStrCreate((char *) 0);
  argc = 0;

  buf = ysStrToText(ln->text);
  paren = 0;
  sp++;
  while (paren > 0 || buf[sp] != ')')
    {
      /* if we reach the end of a line ... */
      if (sp == (sword)ysStrLen(ln->text))
	{
	  ln->text = ysStrDel(ln->text, op, sp - op);

	  if (ysLstNext(elm))
	    {
	      /* then concatenate the next line and continue */
	      ycLnCat(ctx, elm);
	      spcnt++;
	      buf = ysStrToText(ln->text);
	      sp = op;
	    }
	  else
	    {
	      /* unless there are no more lines */
              ysRecord( YCMSG(14), YCERRSEV, YCERRLN(ln), YSLEND);
	      for (i = 0; i < md->pcnt; i++)
		ysStrDestroy(args[i]);
	      ysmGlbFree((dvoid *) args);
	      return (ysstr **) 0;
	    }
	}
      else
	{
	  if (buf[sp] == '\'' || buf[sp] == '"')
	    {
	      /* consume character constants and string literals */
	      quote = buf[sp];
	      do
		{
		  if (argc < md->pcnt)
		    args[argc] = ysStrApp(args[argc], buf[sp++]);
		}
	      while (buf[sp-1] == '\\' || buf[sp] != quote);

	      args[argc] = ysStrApp(args[argc], buf[sp++]);
	    }
	  else if (!paren && buf[sp] == ',')
	    {
	      /* if we encounter an unnested comma, this separates arguments */
	      argc++;
	      sp++;
	    }
	  else
	    {
	      /* count nest parentheses pairs */
	      if (buf[sp] == '(')
		paren++;
	      else if (buf[sp] == ')')
		paren--;

	      /* accumulate the arguments */
	      if (argc < md->pcnt)
		args[argc] = ysStrApp(args[argc], buf[sp]);

	      sp++;
	    }
	}
    }

  /* skip trailing parenthesis and remove arguments */
  sp++;
  argc++;
  ln->text = ysStrDel(ln->text, op, sp - op);

  /* restore splicing effects */
  while (spcnt)
    {
      nxtln = ycLnNew(ln->name, ln->line + spcnt, ln->lvl + spcnt);
      ysLstIns(ctx->tu, elm, (dvoid *) nxtln);
      spcnt--;
    }

  /* now check argument matching */
  if (argc != md->pcnt)
    {
      ysRecord( YCMSG(15), YCERRSEV, YCERRLN(ln), YSLSTR(md->name), 
                YSLSB4(argc), YSLEND);
      for (i = 0; i < md->pcnt; i++)
	ysStrDestroy(args[i]);
      ysmGlbFree((dvoid *) args);
      return (ysstr **) 0;
    }
  else
    return args;
}

/*
 * ycReplace - replace the parameters
 *   ycReplace() performs parameter substitution in a function-like macro.
 *   First, the replacement string is inserted.  Then, for each parameter,
 *   the corresponding argument string is substituted, possibly after
 *   expansion or stringizing.  The resulting line contains the result of
 *   the macro call.  The argument descriptors are also freed by this
 *   routine.
 */
STATICF sword ycReplace(ycctx *ctx, ycmd *md, ysle *elm, sword sp,
			ysstr **args)
{
  sword  total, off;
  ysstr *rpl;
  ycpar *par;
  char  *buf;
  ycln  *ln;
  ysle  *parle;
  size_t len, i;

  ln = (ycln *) ysLstVal(elm);

  total = 0;
  ln->text = ysStrIns(ln->text, sp, ysStrToText(md->rpl));

  for (parle = ysLstHead(md->pars); parle; parle = ysLstNext(parle))
    {
      par = (ycpar *) ysLstVal(parle);
      rpl = ysStrCreate(ysStrToText(args[par->argno]));
      off = sp + par->spos + total;

      if (par->cmd == YCPAR_NORM)
	{
	  len = ysStrLen(ln->text);
	  ln->text = ysStrIns(ln->text, off, ysStrToText(rpl));
	  ycppExpand(ctx, elm, off, off + (sword) ysStrLen(rpl), FALSE);
	  total += (sword) (ysStrLen(ln->text) - len);
	}
      else
	{
	  if (par->cmd == YCPAR_STR)
	    rpl = ycStringize(rpl);
	  else
	    {
	      if (par->cmd == YCPAR_STRIPBEF || par->cmd == YCPAR_STRIPALL)
		{
		  buf = ysStrToText(rpl);
		  len = ysStrLen(rpl);
		  for (i = 0; i < len && isspace(buf[i]); i++) ;
		  rpl = ysStrDel(rpl, 0, (sword) i);
		}

	      if (par->cmd == YCPAR_STRIPAFT || par->cmd == YCPAR_STRIPALL)
		{
		  buf = ysStrToText(rpl);
		  for (i = ysStrLen(rpl); i > 0 && isspace(buf[i-1]); i--) ;
		  rpl = ysStrDel(rpl, i, (sword) (ysStrLen(rpl) - i));
		}
	    }

	  ln->text = ysStrIns(ln->text, off, ysStrToText(rpl));
	  total += (sword) ysStrLen(rpl);
	}

      ysStrDestroy(rpl);
    }

  /* free the arguments */
  for (i = 0; i < (ub4)md->pcnt; i++)
    ysStrDestroy(args[i]);
  ysmGlbFree((dvoid *) args);

  /* return the amount of data replaced */
  return total + (sword) ysStrLen(md->rpl);
}

/*
 * ycStringize - stringize an argument
 */
STATICF ysstr *ycStringize(ysstr *str)
{
  sword  sp, i, pos;
  char  *buf, quote;

  /* strip beginning whitespace */
  i = ycSkipWS(str, 0, (sword) ysStrLen(str));
  str = ysStrDel(str, 0, i);

  /* strip trailing whitespace */
  buf = ysStrToText(str);
  for (i = (sword) ysStrLen(str); i > 0 && isspace(buf[i-1]); i--) ;
  str = ysStrDel(str, i, (sword) ysStrLen(str) - i);

  /* stringize the text */
  sp = 0;

  while ((size_t) sp < ysStrLen(str))
    {
      buf = ysStrToText(str);
      if (buf[sp] == ' ')
	{
	  pos = sp++;
	  while (isspace(buf[pos]))
	    pos++;
	  str = ysStrDel(str, sp, pos - sp);
	}
      else if (buf[sp] == '"' || buf[sp] == '\'')
	{
	  quote = buf[sp];
	  if (quote == '"')
	    {
	      str = ysStrIns(str, sp, "\\");
	      buf = ysStrToText(str);
	      sp += 2;
	    }
	  else
	    sp++;

	  while ((size_t) sp < ysStrLen(str) && buf[sp] != quote)
	    {
	      if (buf[sp] == '\\' || buf[sp] == '"')
		{
		  str = ysStrIns(str, sp, "\\");
		  buf = ysStrToText(str);
		  sp += 2;
		}
	      else
		sp++;
	    }

	  if (quote == '"')
	    {
	      str = ysStrIns(str, sp, "\\");
	      buf = ysStrToText(str);
	      sp += 2;
	    }
	  else
	    sp++;
	}
      else
	sp++;
    }

  /* convert to a string literal */
  str = ysStrIns(str, 0, "\"");
  str = ysStrApp(str, '"');

  return str;
}
