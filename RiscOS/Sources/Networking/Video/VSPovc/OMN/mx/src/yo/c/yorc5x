/* Copyright (c) Oracle Corporation 1996.  All Rights Reserved. */

/*
  NAME
    yorc5.c
  DESCRIPTION

    YO wrappers for RC5 encryption, stubbed to do simple XOR.
    This is the version to use when BSAFE is not available.

  PUBLIC FUNCTIONS

    yorc5Init
    yorc5Term
    yorc5Encrypt
    yorc5Decrypt

  PRIVATE FUNCTIONS
    yorc5Work

  MODIFIED   (MM/DD/YY)
    dbrower   12/ 6/96 -  created.
*/

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YOCY_ORACLE
#include <yocy.h>
#endif
#ifndef YORC5_ORACLE
#include <yorc5.h>
#endif

/* PRIVATE TYPES AND CONSTANTS */

struct yorc5cx
{
  ub1		    *ukey_yorc5cx;                           /* the user key */
  size_t	    ukeysz_yorc5cx;                              /* its size */
} ;

/* PRIVATE FUNCTION DECLARATIONS */

STATICF void yorc5Work( yorc5cx *cx, ub4 iv1, ub4 iv2, boolean encrypt,
		       ysbv *ibv, sword nibvs,
		       ysbv *obv, ysmhp *hp );

/* PUBLIC FUNCTIONS */

yorc5cx *yorc5Init( ub1 *key, sword keybytes )
{
  yorc5cx *cx;

  cx = (yorc5cx*)ysmGlbAlloc(sizeof(*cx), "yorc5cx" );

  cx->ukey_yorc5cx = ysmGlbAlloc( (size_t)keybytes, "yorc5key" );
  cx->ukeysz_yorc5cx = keybytes;
  DISCARD memcpy( cx->ukey_yorc5cx, key, keybytes );

  return cx;
}

void yorc5Term( yorc5cx *cx )
{
  if( cx )
  {
    ysmGlbFree( (dvoid*)cx->ukey_yorc5cx );
    ysmGlbFree( (dvoid*)cx );
  }
}

void yorc5Encrypt(yorc5cx *cx, ub4 *iv1, ub4 *iv2,
		  ysbv *ibv, sword nibvs,
		  ysbv *obv, ysmhp *hp )
{
  /* make up an iv */
  *iv1 = 0;
  *iv2 = 0;
  yorc5Work( cx, *iv1, *iv2, TRUE, ibv, nibvs, obv, hp );
}


void yorc5Decrypt( yorc5cx *cx, ub4 iv1, ub4 iv2,
		  ysbv *ibv, sword nibvs,
		  ysbv *obv, ysmhp *hp )
{
  yorc5Work( cx, iv1, iv2, FALSE, ibv, nibvs, obv, hp );
}

/* PRIVATE FUNCTIONS */

/* ---------------------------- yorc5Work ---------------------------- */
                                                                             /*
  NAME
    yorc5Work

  DESCRIPTION

    Do the work of rc5 encryption or decryption.  Handed the initialization
    vector to use, buffer vectors to process, and a place to put new
    buffers.

    There will be exactly as many output buffers as were input, of the
    same size.  The input buffers must be multiples 8 in size, which is
    the rc5 block size.

    All errors throw exceptions.  Input block size improper throws BADPARAM,
    everything else throws YO_EX_CRYPTO_ERR.
    
    It's up to the caller to free the output vectors.

  PARAMETERS

    cx	    -- yorc5cx, containing the key information.
    iv	    -- the initialization vector to use.
    encrypt -- true to encrypt, false to decrypt.
    ibv	    -- input buffer vectors.
    nibvs   -- number of inputs
    obv	    -- output buffer vectors, at least nibvs.
    af	    -- allocator to use to fill in obv.

  RETURNS

    none

  MODIFIED   (MM/DD/YY)
    dbrower   12/11/96 -  created.
*/

STATICF void yorc5Work( yorc5cx *cx, ub4 iv1, ub4 iv2, boolean encrypt,
		       ysbv *ibv, sword nibvs,
		       ysbv *obv, ysmhp *hp )
{
  sword i, j, k;
  ub1 *s, *d;
  size_t len;

  if( !nibvs )
    return;

  k = 0;
  for( i = 0 ; i < nibvs ; i++ )
  {
    len = obv[i].len = ibv[i].len;
    d = obv[i].buf = (ub1*)ysmAlloc( hp, ibv[i].len, "yorc5x buf" );
    s = ibv[i].buf;

    for( j = (sword)len; j-- ; )
    {
      *d++ = *s++ ^ cx->ukey_yorc5cx[ k++ ];
      if( (size_t)k >= cx->ukeysz_yorc5cx )
	k = 0;
    }
  }
}

