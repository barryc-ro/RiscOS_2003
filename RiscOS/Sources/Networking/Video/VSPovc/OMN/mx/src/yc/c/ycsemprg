/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ycsemprg.c - semantic analysis of pragmas
 *
 * NOTES
 *
 * We support the following IFR pragmas, as required by CORBA:
 *
 *   #pragma ID <scopedName> <string>
 *   #pragma prefix <string>
 *   #pragma version <scopedName> <versionNum>
 *
 * These are all related to the construction of repository id's.  ID and
 * version are both specific to a particular IFR entity and as such do
 * not present any particular problem. Bless OMG's heart, pragma prefix
 * is scoped, so we have to drag it around with us. For more information
 * about the finer points of how #pragma prefix is dealt with, see the
 * documentation for yrSetPrefix.
 *
 * We also support these pragmas for IAO code generation:
 *
 *   #pragma IAO_DB_ATTR <name> <string>
 *   #pragma IAO_DB_CREATE <name> {<par-name> <string>}, ...
 *   #pragma IAO_DB_LST <name>
 * 
 * When these pragmas appear and the iao-srv-gen and server-template
 * resources are set to true, it causes bodies to be generated for 
 * the named operations when the server template code is generated.
 * See yccsrv.c and /vobs/mx/doc/specs/iaosrvext.mif for the details.
 *
 *
 * HISTORY
 * 07/04/96 kcoleman	Changed ycsPragStrLit to ycsStrLitToString.
 * 04/12/96 kcoleman	Moved pragma code from ycsem.c, added support for 
 *                      IAO server code gen pragmas.
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YR_ORACLE
#include <yr.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif

STATICF void ycsDbAttrPragma( ycctx* ctx, yrobj* scoped,
                              yctPragmaDbAttr* prg, ycln* ln);
STATICF boolean ycprgAdd( ycctx* ctx, yrobj* obj, ycln* ln, ycprg_kind kind, 
                          dvoid* data, ycprg_kind excludes);
STATICF void ycsDbCreatePragma( ycctx* ctx, yrobj* scope, 
                                yctPragmaDbCreat* prg, ycln* ln);
STATICF void ycsDbListPragma( ycctx* ctx, yrobj* scope, 
                              yctPragmaDbLst* prg, ycln* ln);


/* --------------------------------------------------------------------- */
/*
 * ycsPragma - Semantic analysis for pragmas.
 *
 * The string literals we get from the parser for #pragma ID 
 * INCLUDE the enclosing double quotes. For the IFR pragmas, the quotes 
 * must be removed before the data is fed to the IFR.
 * 
 * For the IAO pragmas, we cannot use ycsLookup to search for the op or
 * attribute named in the pragma because ycsLookup is intended for lookups
 * for which failure produces errors. For the IAO pragmas, lookup failure
 * just causes the pragma to be ignored.
 */

void ycsPragma( ycctx* ctx, yrobj* scope, yctPragma* prg)
{
  yrobj* obj;
  sword sz;

  switch (prg->tag)
  {
    case ycttPragmaId:
    {
      yctPragmaId* p = MEMBER(prg, prgid);
      sz = strlen( p->id);
      if ( sz <= 2 )             /* "" -> strlen of 2. Can't have empty id */
        ysRecord( YCMSG(83), YCERRSEV, YCERRLN(prg->line), YSLEND);
      else
      {
	obj = ycsLookup( ctx, scope, p->name);
	if ( obj != (dvoid*)0 )
	{
          p->id[sz-1] = '\0';          /* stomp closing quote */
          yseTry
          {
	    yrSetId( obj, p->id+1);      /* skip opening quote */
          }
          yseCatch( YR_EX_INVALIDID)
          {
            ysRecord( YCMSG(84), YCERRSEV, YCERRLN(prg->line), YSLEND);
          }
          yseEnd;
	}
      }
      break;
    }
    case ycttPragmaPrefix:
    {
      yctPragmaPrefix* p = MEMBER(prg, prgprefix);
      sz = strlen( p->prefix);
      p->prefix[sz-1] = '\0';            /* stomp closing quote */
      yrSetPrefix( scope, p->prefix + 1);
      break;
    }
    case ycttPragmaVersion:
    {
      yctPragmaVersion* p = MEMBER(prg, prgversion);
      obj = ycsLookup( ctx, scope, p->name);
      if ( obj != (dvoid*)0 )
        yrSetVersion( obj, p->vers);
      break;
    }
    case ycttPragmaDbAttr:
      if ( ysResGetBool( "mnidlc.iao-srvr-gen") && 
           ysResGetBool( "mnidlc.server-template") )
      {
        ycsDbAttrPragma( ctx, scope, MEMBER(prg, prgdbattr), prg->line);
      }
      /* else the pragma is completely ignored */
      break;
    case ycttPragmaDbCreat:
      if ( ysResGetBool( "mnidlc.iao-srvr-gen") && 
           ysResGetBool( "mnidlc.server-template") )
      {
        ycsDbCreatePragma( ctx, scope, MEMBER(prg,prgdbcreate), prg->line);
      }
      /* else the pragma is completely ignored */
      break;
    case ycttPragmaDbLst:
    {
      if ( ysResGetBool( "mnidlc.iao-srvr-gen") && 
           ysResGetBool( "mnidlc.server-template") )
      {
        ycsDbListPragma( ctx, scope, MEMBER(prg,prgdblst), prg->line);
      }
      /* else the pragma is completely ignored */
      break;
    }
    default:
      yseThrow(YS_EX_FAILURE);
      break;
  }
}


/* ----------------------------------------------------------------------- */
/*
 * ycsDbAttrPragma - Semantic analysis of IAO_DB_ATTR pragma
 *
 *    #pragam IAO_DB_ATTR <attr-name> <string-literal>
 *
 * The pragma may refer to an undefined entity, in which case it is simply
 * ignored. If it does match something we know about, any problems thereafter
 * are treated as errors. The constraints on this pragma are:
 *
 * - The named IDL entity must be the name of an attribute.
 * - There must not be other IAO_DB pragmas already attached to the name.
 *   That is, the same thing cannot be both a db list and a db create op.
 * - The string literal represents a key string and thus must be non-null.
 */

STATICF void ycsDbAttrPragma( ycctx* ctx, yrobj* scope, 
                              yctPragmaDbAttr* prg, ycln* ln)
{
  yrobj* noreg obj;
  char* attrnm = ycsPrintScoped(ctx, prg->name);
  size_t len = 0;

  NOREG(obj);

   /***** Does the pragma name something that we've already seen? *****/
  yseTry
    obj = yrLookup( scope, attrnm);
  yseCatchAll
    /* if lookup fails, the pragma is just ignored */
    if ( ysResGetBool( "mnidlc.verbose") )
      ysRecord( YCMSG(93), YCWARNSEV, YCERRLN(ln), YSLSTR(attrnm),YSLEND);
    obj = (yrobj*)0;
  yseEnd

  if ( obj )
  {
    if ( yrGetKind(obj) != yrdkAttribute )
      ysRecord( YCMSG(90), YCERRSEV, YCERRLN(ln), YSLSTR(attrnm),YSLEND);
    /***** Name is known and is an attribute, decorate the yrobj.  *****/
    else
    {
      char* key = ycStrLitToString( ctx, prg->keystr);

      if ( !key || (strlen(key) == 0) )      /* key cannot be empty */
        ysRecord( YCMSG(95), YCERRSEV, YCERRLN(ln), YSLSTR(attrnm),YSLEND);
      else
        ycprgAdd( ctx, obj, ln, ycprg_dbAttr, (dvoid*)key, ycprg_all);
    }
  }
  ysmGlbFree( (dvoid*) attrnm);
}


/* ----------------------------------------------------------------------- */
/*
 * ycsDbCreatePragma - semantic analysis of IAO_DB_CREATE pragma
 * 
 *    #pragma IAO_DB_CREATE <op-name> {<par-name> <string-literal>,}+
 *
 * The pragma may refer to an undefined entity, in which case it is simply
 * ignored. If it does match something we know about, any problems thereafter
 * are treated as errors. The constraints on this pragma are:
 *
 * - The named IDL entity must be the name of an operation.
 * - There must not be other IAO_DB pragmas already attached to the name.
 *   That is, the same thing cannot be both a db list and a db create op.
 * - The operation must have at least as many parameters as there are
 *   param-name/key-string pairs in the pragma.
 * - Each parameter may have at most one key string associated with it.
 * - The string literals representing key strings must not be empty.
 * - The operation must have a return type of interface type.
 */
STATICF void ycsDbCreatePragma( ycctx* ctx, yrobj* scope, 
                                yctPragmaDbCreat* prg, ycln* ln)
{
  char* opnm = ycsPrintScoped( ctx, prg->name);
  yrobj* obj;             /* IFR entity named in the pragma (the op) */
  yslst* pars;            /* parameter list off the matched operation */
  ysle* pe;               /* list elem from the matched op's par list */
  ysle* le;               /* list elem from pragma's par mapping list */
  yslst* parmaplst;       /* param mapping list built up by this function */
  yrobj* rettype;

  /***** Is there an object defined with the given name? *****/
  yseTry
  {
    obj = yrLookup( scope, opnm);
  }
  yseCatchAll
  {
    if ( ysResGetBool( "mnidlc.verbose") )
      ysRecord( YCMSG(93), YCWARNSEV, YCERRLN(ln), YSLSTR(opnm),YSLEND);
    obj = (yrobj*)0;
  }
  yseEnd

  if ( !obj )
    goto err;

  /***** Name is known, but is not an operation *****/
  if ( yrGetKind(obj) != yrdkOperation )
  {
    ysRecord( YCMSG(89), YCERRSEV, YCERRLN(ln), YSLSTR(opnm),YSLEND);
    goto err;
  }

  pars = yrOpData(obj).pars;
  if ( !pars )
  {
    ysRecord( YCMSG(91), YCERRSEV, YCERRLN(ln), YSLSTR(opnm),YSLEND);
    goto err;
  }

  /***** Does the named op have a return type of interface type? ****/
  rettype = yrOpData(obj).rettype;
  if ( yrGetKind(rettype) == yrdkAlias )
    rettype = yrGetAliasBaseType(rettype);
  if ( yrGetKind(rettype) != yrdkInterface )
  {
    ysRecord( YCMSG(97), YCERRSEV, YCERRLN(ln), YSLEND);
    goto err;
  }

  /***** Name is known and is an operation with at least 1 param. *****/
  parmaplst = ysLstCreate();
  for (le = ysLstHead(prg->mapping); le; le = ysLstNext(le))
  {
    yctPrgParKey* prgpar = (yctPrgParKey*) ysLstVal(le);
    yrpar* match;

    for (pe = ysLstHead(pars); pe; pe = ysLstNext(pe))
    {
      match = (yrpar*) ysLstVal(pe);
      if ( strcmp( prgpar->paramnm, match->name) == 0 )
        break;
    }
    if ( !pe )      /* op has no parameter with this name */
    {
      ysRecord( YCMSG(92), YCERRSEV, YCERRLN(ln), YSLSTR(opnm), 
                YSLSTR(prgpar->paramnm), YSLEND);
      ysLstDestroy( (dvoid*)parmaplst, (ysmff)ycprgparDestroy);
      goto err;
    }
    else            /* Found a match. Has it already been used? */
    {
      ysle* me;
      ycprgpar* mpar;

      for ( me = ysLstHead(parmaplst); me; me = ysLstNext(me))
      {
        mpar = (ycprgpar*)ysLstVal(me);
        if ( mpar->par == match )
        {             /* parameter already has a db association */
          ysRecord( YCMSG(96), YCERRSEV, YCERRLN(ln), YSLSTR(mpar->par->name),
                    YSLSTR( mpar->key), YSLEND);
          ysLstDestroy( (dvoid*)parmaplst, (ysmff)ycprgparDestroy);
          goto err;
        }
      }
      if ( !me )       /* no error occurred */
      {
        mpar = ysmGlbAlloc( sizeof(ycprgpar), "ycprgpar");
        mpar->par = match;
        mpar->key = ycStrLitToString( ctx, prgpar->keystr);
        if ( !mpar->key || (strlen(mpar->key) == 0) )
        {    /* key can't be empty */
          ysRecord( YCMSG(95), YCERRSEV, YCERRLN(ln), 
                    YSLSTR(match->name), YSLEND);
          ysLstDestroy( (dvoid*)parmaplst, (ysmff)ycprgparDestroy);
          ycprgparDestroy( (dvoid*)mpar);
          goto err;
        }
        else
          DISCARD ysLstEnq(parmaplst, (dvoid*) mpar);
      }
    }
  }

  /***** Attach pragma info to the operation symbol *****/
  if ( !ycprgAdd( ctx, obj, ln, ycprg_dbCreate, (dvoid*)parmaplst, ycprg_all) )
  {         /* there was an error */
    ysLstDestroy( (dvoid*)parmaplst, (ysmff)ycprgparDestroy);
  }
err:
  ysmGlbFree( (dvoid*)opnm);
}


/* ----------------------------------------------------------------------- */
/*
 * ycsDbListPragma - semantic analysis of IAO_DB_LIST pragma
 *
 *    #pragma IAO_DB_LIST <op-name>
 *
 * The pragma may refer to an undefined entity, in which case it is simply
 * ignored. If it does match something we know about, any problems thereafter
 * are treated as errors. The constraints on this pragma are:
 *
 * - The named IDL entity must be the name of an operation.
 * - The operation must return a sequence of object references.
 * - The operation should have one inout parameter of struct type
 *   that is assumed to be the iterator.
 * - There must not be other IAO_DB pragmas already attached to the name.
 *   That is, the same thing cannot be both a db list and a db create op.
 */
STATICF void ycsDbListPragma( ycctx* ctx, yrobj* scope, 
                              yctPragmaDbLst* prg, ycln* ln)
{
  char* opnm = ycsPrintScoped( ctx, prg->name);
  yrobj* type;
  yslst* pars;
  yrobj* obj;

  yseTry
    obj = yrLookup( scope, opnm);
  yseCatchAll
    if ( ysResGetBool( "mnidlc.verbose") )
      ysRecord( YCMSG(93), YCWARNSEV, YCERRLN(ln), YSLSTR(opnm),YSLEND);
    obj = (yrobj*)0;
  yseEnd
  if ( obj )         /* else, the pragma is ignored */  
  {
    if ( yrGetKind(obj) != yrdkOperation )
      ysRecord( YCMSG(89), YCERRSEV, YCERRLN(ln), YSLSTR(opnm), YSLEND);
    else
    {
      /***** Verify the return type *****/
      type = yrGetAliasBaseType( yrOpData(obj).rettype);
      if ( yrGetKind( type) == yrdkSequence )
      {
        type = yrGetAliasBaseType( yrSeqData(type).elmtype);
        if ( yrGetKind( type) != yrdkInterface )
          ysRecord( YCMSG(98), YCERRSEV, YCERRLN(ln), YSLEND);
      }
      else
        ysRecord( YCMSG(98), YCERRSEV, YCERRLN(ln), YSLEND);

      /***** Verify the parameter list *****/
      pars = yrOpData(obj).pars;
      if ( pars && (ysLstCount(pars) == 1) )
      {
        yrpar* par = (yrpar*)ysLstVal( ysLstHead(pars));

        type = yrGetAliasBaseType( par->type);
        if ( (yrGetKind(type) != yrdkStruct) || (par->mode != YOMODE_INOUT) )
          ysRecord( YCMSG(99), YCERRSEV, YCERRLN(ln), YSLEND);
        else 
          ycprgAdd( ctx, obj, ln, ycprg_dbList, (dvoid*)0, ycprg_all);
      }
      else
        ysRecord( YCMSG(99), YCERRSEV, YCERRLN(ln), YSLEND);
    }
  }
  ysmGlbFree( (dvoid*)opnm);
}


/* ------------------------------------------------------------------------*/
/*
 * ycprgDestroy - destruction of a ycprg object create on the heap.
 *                Suitable as a callback for ysLstDestroy.
 */
void ycprgDestroy( dvoid* data)
{
  if ( data )
  {
    ycprg* prg = (ycprg*) data;

    switch ( prg->kind )
    {
      case ycprg_dbAttr:
        if ( prg->data.key )
          ysmGlbFree( (dvoid*) prg->data.key);
        break;
      case ycprg_dbCreate:
        if ( prg->data.mapping )
          ysLstDestroy( prg->data.mapping, ycprgparDestroy);
        break;
      default:
        break;
    }
    ysmGlbFree( (dvoid*)data);
  }
}


/* ------------------------------------------------------------------------*/
/*
 * ycprgparDestroy - destructor for ycprgpar. Suitable for use as a callback
 *                   for ysLstDestroy.
 */
void ycprgparDestroy( dvoid* data)
{
  if ( data )
  {
    ycprgpar* par = (ycprgpar*)data;

    if ( par->key )
      ysmGlbFree( (dvoid*)par->key);
      /* par field (yrpar*) belongs to the IFR */
  }
  ysmGlbFree( data);
}


/* ------------------------------------------------------------------------*/
/*
 * ycprgAdd - Add pragma data to a yrobj
 *
 * If the obj doesn't already have data for pragmas, it is
 * created. If data already exists, we perform a very simple check for
 * conflicting pragmas: The current scheme allows exclusion of all 
 * (except the new one, of course), none, or a single specific kind of
 * pragma. If a conflict is detected, an error is reported and the new
 * pragma is not added.
 *
 * <data> is the new pragma information; it's exact nature depends on the
 * the type of pragma being added. In all cases, ownership of the memory
 * is assumed by symbol, so the data must persist for the lifetime of <obj>
 * and must be allocated from the heap.
 *
 * If the new pragma data is successfully added, TRUE is returned.
 */
STATICF boolean ycprgAdd( ycctx* ctx, yrobj* obj, ycln* ln, ycprg_kind kind, 
                          dvoid* data, ycprg_kind excludes)
{
  ycsym* syminfo = ycSymLookup( ctx->symtbl, obj);
  ycprg* prgma = (ycprg*)0;
  boolean enq = TRUE;

  /***** Create pragma framework in symtab if necessary *****/
  if ( !syminfo->pragmas )
  {
    syminfo->pragmas = ysLstCreate();
  }

  if ( ysLstCount( syminfo->pragmas) == 0 )
  {
    prgma = (ycprg*) ysmGlbAlloc( sizeof(ycprg), "ycprg");
    CLRSTRUCT(*prgma);
    prgma->kind = ycprg_none;
  }
  /***** Check for conflicts *****/
  else if ( excludes != ycprg_none )
  {
    prgma = (ycprg*) ysLstVal(ysLstHead(syminfo->pragmas));

    if ( (excludes == ycprg_all) && 
         ((ysLstCount(syminfo->pragmas) > 1) || (kind != prgma->kind)) )
    {
      ysRecord( YCMSG(94), YCERRSEV, YCERRLN(ln), YSLEND); /* conflict */
      return FALSE;
    }
    else 
    {
      ysle* le;
      for ( le = ysLstHead( syminfo->pragmas); le; le = ysLstNext(le))
        if ( excludes == ((ycprg*)ysLstVal(le))->kind )
        {
          ysRecord( YCMSG(94), YCERRSEV, YCERRLN(ln), YSLEND); /* conflict */
          return FALSE;
        }
    }
    enq = FALSE;
  }

  /**** No error, go ahead and add the new pragma ****/
  switch ( kind )
  {
    case ycprg_dbAttr:
      if ( prgma->data.key )
        ysmGlbFree( (dvoid*)prgma->data.key);
      prgma->data.key = (char*) data;
      break;
    case ycprg_dbCreate:
      if ( prgma->data.mapping )
        ysLstDestroy( (dvoid*)prgma->data.mapping, (ysmff)ycprgparDestroy);
      prgma->data.mapping = (yslst*)data;
    case ycprg_dbList:
    default:
      break;
  }
  prgma->kind = kind;
  if ( enq )
    DISCARD ysLstEnq( syminfo->pragmas, (dvoid*)prgma);
  return TRUE;
}
