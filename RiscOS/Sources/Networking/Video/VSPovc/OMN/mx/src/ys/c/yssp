/* Copyright (c) Oracle Corporation 1994.  All Rights Reserved. */

/*
  NAME
    yssp.c
  DESCRIPTION
    SPlay trees.

  PUBLIC FUNCTIONS

  For compatibility with yshsh, these routines allocate memory:

   ysspTree *ysSpCreate( ysspCmpFunc cmpfunc, ysmff delfunc); 
   void	     ysSpIns(ysspTree *t, dvoid *key, size_t keysz, dvoid *val);
   dvoid    *ysSpRem(ysspTree *t, dvoid *key, size_t keysz);
   dvoid    *ysSpFind(ysspTree *t, dvoid *key, size_t keysz);

  For compatibility with mtsp, these routines operate on pure data
  structures, and do not do any allocation:

   ysspTree   *ysspNewTree( ysspTree *t, ysspCmpFunc *cmp );
   ysspNode   *ysspLookup( dvoid *key, ysspTree *t );
   ysspNode   *ysspFirstLookup( dvoid *key, ysspTree *t );
   ysspNode   *ysspPELookup( dvoid *key, ysspTree *t );
   ysspNode   *ysspNextLookup( dvoid *key, ysspTree *t );
   ysspNode   *ysspEnq( ysspNode *node, ysspTree *t );
   ysspNode   *ysspEnqAfter( ysspNode *new, ysspNode *old, ysspTree *t );
   ysspNode   *ysspDeq( ysspNode **np );
   void	       ysspRemove( ysspNode *node, ysspTree *t );
   void	       ysspSplay( ysspNode *n, ysspTree *t );
   ysspNode   *ysspFHead( ysspTree *t );
   ysspNode   *ysspFNext( ysspNode *n );

  MODIFIED   (MM/DD/YY)
    dbrower   11/29/94 -  created from mtsp.c
    dbrower   03/ 1/96 -  cmp returns sword; olint.
*/

/*
 * This is derived from code:
 *
 * Copyright (c) 1994 by Academic Press, Boston, Massachusetts.
 * Written by David Brower.  Not derived from licensed software.
 * From the book "Software Solutions in C", edited by Dale Schumacher.
 *
 * Permission is granted to anyone to use this software for any
 * purpose on any computer system, and to redistribute it in any way,
 * subject to the following restrictions:
 *
 *   1. The author is not responsible for the consequences of use of
 *	this software, no matter how awful, even if they arise
 *	from defects in it.
 *
 *   2. The origin of this software must not be misrepresented, either
 *	by explicit claim or by omission.
 *
 *   3. Altered versions must be plainly marked as such, and must not
 *	be misrepresented (by explicit claim or omission) as being
 *	the original software.
 *
 *   4. This notice must not be removed or altered.
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

#ifndef YSSP_ORACLE
#include <yssp.h>
#endif

/* PRIVATE TYPES AND CONSTANTS */

typedef struct
{
  ysspNode  node_ysspn;		/* key points to space after val */
  dvoid	    *val_ysspn;
} ysspn;

externdef ysmtagDecl(ysspTreeTag) = "ysspTreeTag";
externdef ysmtagDecl(ysspnTag) = "ysspnTag";


/* PRIVATE FUNCTION DECLARATIONS */

/* PUBLIC FUNCTIONS */

ysspTree *ysSpCreate( ysspCmpFunc cmpfunc, ysmff delfunc)
{
  ysspTree *t = (ysspTree*)ysmGlbAlloc( sizeof(*t), ysspTreeTag );

  DISCARD ysspNewTree( t, cmpfunc );
  t->delfunc_ysspTree = delfunc;
  return t;
}

void      ysSpDestroy(ysspTree *t)
{
  ysspn *spn;

  ysmCheck( (dvoid *)t, ysspTreeTag );
  for( spn = (ysspn*)ysspDeq( &t->root_ysspTree ); spn ; )
  {
    ysmCheck( (dvoid *)spn, ysspnTag );
    if( t->delfunc_ysspTree )
      (*t->delfunc_ysspTree)(spn->val_ysspn);
    ysmGlbFree( (dvoid*)spn );
  }
  ysmGlbFree( (dvoid*)t ); 
}

void	 ysSpIns(ysspTree *t, dvoid *key, size_t keysz, dvoid *val)
{
  dvoid	    *space;
  char	    *s;
  ysspn	    *spn;

  ysmCheck( (dvoid *)t, ysspTreeTag );
  space = ysmGlbAlloc( sizeof(*spn) + keysz, ysspnTag );
  s = (char *)space;
  spn = (ysspn *)space;
  spn->node_ysspn.key_ysspNode = (dvoid*)(s + sizeof(*spn)); 
  spn->val_ysspn = val;
  DISCARD memcpy( spn->node_ysspn.key_ysspNode, key, keysz );
  DISCARD ysspEnq( &spn->node_ysspn, t );
}

/* ARGSUSED */
dvoid    *ysSpRem(ysspTree *t, dvoid *key, size_t keysz)
{
  ysspn *spn;
  dvoid	*rv = (dvoid*)0;

  ysmCheck( (dvoid *)t, ysspTreeTag );
  if( ( spn = (ysspn*)ysspLookup( key, t ) ) )
  {
    ysmCheck( (dvoid *)spn, ysspnTag );
    rv = spn->val_ysspn;
    ysspRemove( &spn->node_ysspn, t );
    ysmGlbFree( (dvoid*)spn );
  }
  return( rv );
}

/* ARGSUSED */
dvoid    *ysSpFind(ysspTree *t, dvoid *key, size_t keysz)
{
  ysspn *spn;

  ysmCheck( (dvoid *)t, ysspTreeTag );
  if( ( spn = (ysspn *)ysspLookup( key, t ) ) )
  {
    ysmCheck( (dvoid *)spn, ysspnTag );
    return( spn->val_ysspn );
  }
  return( (dvoid*)0 ); 
}

/* ---------------------------------------------------------------- */

ysspTree *ysspNewTree( ysspTree *t, ysspCmpFunc cmp )
{
  t->cmp_ysspTree = cmp;
  t->root_ysspTree = (ysspNode *)NULL;
  return( t );
}

ysspNode *ysspLookup( CONST dvoid *key, ysspTree *t )
{
  ysspNode *n;
  sword cmpval = 0;		/* shut up bogus "used before set"  */
  ysspCmpFunc cmp;

  /* find node in the tree */
  cmp = t->cmp_ysspTree;
  n = t->root_ysspTree;
  while( n && (cmpval = (*cmp)( key, n->key_ysspNode ) ) )
    n = ( cmpval < 0 ) ? n->left_ysspNode : n->right_ysspNode;

  /* reorganize tree around this node */
  if( n )
    ysspSplay( n, t );

  return( n );
}


ysspNode *ysspFirstLookup( CONST dvoid *key, ysspTree *t )
{
  ysspNode *n, *pn;

  /* find one node of this key, then back up to first with same key */
  for( n = ysspLookup( key, t ); (pn = ysspFPrev(n)) ; n = pn )
    if( (*t->cmp_ysspTree)((dvoid*)n, (dvoid*)pn) )
      break;

  if( n )
    ysspSplay( n, t );
  return( n );
}


ysspNode *ysspPELookup( CONST dvoid *key, ysspTree *t )
{
  ysspNode	*p = 0;		/* predecessor */
  ysspNode	*n;		/* the node */
  sword		cmpval = 0;
  ysspCmpFunc	cmp;

  /* search to equal or past the key. dumb scan */
  n = t->root_ysspTree;
  cmp = t->cmp_ysspTree;

  while( n && (cmpval = (*cmp)( key, n->key_ysspNode ) ) )
  {
    p = n;
    n = ( cmpval < 0 ) ? n->left_ysspNode : n->right_ysspNode;
  }

  if( n && !cmpval )
    p = n;
  else if( !n )
    n = cmpval > 0 ? p : p ? ysspFPrev(p) : p;
  
  if( n )
    ysspSplay( n, t );

  return( n );
}


ysspNode *ysspNextLookup( CONST dvoid *key, ysspTree *t )
{
  ysspNode *n;
  
  if( (n = ysspPELookup( key, t )) )
    n = ysspFNext( n );
  else				/* no before or == key; take head */
    n = ysspFHead( t );

  return( n );
}


ysspNode *ysspEnq( ysspNode *n, ysspTree *t )
{
  ysspNode *left;		/* the rightmost node in the left tree */
  ysspNode *right;		/* the leftmost node in the right tree */
  ysspNode *next;		/* the root_ysspTree of the unsplit part */
  ysspNode *temp;

  dvoid *key;
  ysspCmpFunc cmp;

  cmp = t->cmp_ysspTree;
  n->up_ysspNode = (ysspNode *)NULL;
  next = t->root_ysspTree;
  t->root_ysspTree = n;
  if( !next )			/* trivial enq */
  {
    n->left_ysspNode = (ysspNode *)NULL;
    n->right_ysspNode = (ysspNode *)NULL;
  }
  else				/* difficult enq */
  {
    key = n->key_ysspNode;
    left = n;
    right = n;

    /* n's left and right children will hold the right and left
       splayed trees resulting from splitting on n->key;
       note that the children will be reversed! */

    if ( (*cmp)( next->key_ysspNode, key ) > 0 )
      goto two;

  one:				/* assert next->key <= key */

    do				/* walk to the right in the left tree */
    {
      temp = next->right_ysspNode;
      if( !temp )
      {
	left->right_ysspNode = next;
	next->up_ysspNode = left;
	right->left_ysspNode = (ysspNode *)NULL;
	goto done;		/* job done, entire tree split */
      }

      if( (*cmp)( temp->key_ysspNode, key ) > 0 )
      {
	left->right_ysspNode = next;
	next->up_ysspNode = left;
	left = next;
	next = temp;
	goto two;		/* change sides */
      }

      next->right_ysspNode = temp->left_ysspNode;
      if( temp->left_ysspNode )
	temp->left_ysspNode->up_ysspNode = next;
      left->right_ysspNode = temp;
      temp->up_ysspNode = left;
      temp->left_ysspNode = next;
      next->up_ysspNode = temp;
      left = temp;
      next = temp->right_ysspNode;
      if( !next )
      {
	right->left_ysspNode = (ysspNode *)NULL;
	goto done;		/* job done, entire tree split */
      }

    } while( (*cmp)( next->key_ysspNode, key ) <= 0 ); /* change sides */

  two:				/* assert next->key > key */

    do				/* walk to the left in the right tree */
    {
      temp = next->left_ysspNode;
      if( !temp )
      {
	right->left_ysspNode = next;
	next->up_ysspNode = right;
	left->right_ysspNode = (ysspNode *)NULL;
	goto done;		/* job done, entire tree split */
      }

      if( (*cmp)( temp->key_ysspNode, key ) <= 0 )
      {
	right->left_ysspNode = next;
	next->up_ysspNode = right;
	right = next;
	next = temp;
	goto one;		/* change sides */
      }
      next->left_ysspNode = temp->right_ysspNode;
      if( temp->right_ysspNode )
	temp->right_ysspNode->up_ysspNode = next;
      right->left_ysspNode = temp;
      temp->up_ysspNode = right;
      temp->right_ysspNode = next;
      next->up_ysspNode = temp;
      right = temp;
      next = temp->left_ysspNode;
      if( !next )
      {
	left->right_ysspNode = (ysspNode *)NULL;
	goto done;		/* job done, entire tree split */
      }

    } while( (*cmp)( next->key_ysspNode, key ) > 0 ); /* change sides */

    goto one;

  done:		/* split is done, branches of n need reversal */

    temp = n->left_ysspNode;
    n->left_ysspNode = n->right_ysspNode;
    n->right_ysspNode = temp;
  }
  return( n );
}

ysspNode *ysspEnqAfter( ysspNode *newnd, ysspNode *old, ysspTree *t )
{
  ysspSplay( old, t );
  newnd->key_ysspNode = old->key_ysspNode;
  newnd->right_ysspNode = old->right_ysspNode;
  if( newnd->right_ysspNode )
    newnd->right_ysspNode->up_ysspNode = newnd;
  newnd->left_ysspNode = (ysspNode*)0;
  newnd->up_ysspNode = old;
  old->right_ysspNode = newnd;

  return( newnd );
}


void ysspSplay( ysspNode *n, ysspTree *t )
{
  ysspNode *up;		/* points to the node being dealt with */
  ysspNode *prev;		/* a descendent of up, already dealt with */
  ysspNode *upup;		/* the parent of up */
  ysspNode *upupup;		/* the grandparent of up */
  ysspNode *left;		/* the top of left subtree being built */
  ysspNode *right;		/* the top of right subtree being built */

  left = n->left_ysspNode;
  right = n->right_ysspNode;
  prev = n;
  up = prev->up_ysspNode;

  while( up )
  {
    /* walk up the tree towards the root_ysspTree, splaying all to
       the left of n into the left subtree, all to right into the
       right subtree */

    upup = up->up_ysspNode;
    if( up->left_ysspNode == prev ) /* up is to the right of n */
    {
      if( upup && upup->left_ysspNode == up )
      {
	upupup = upup->up_ysspNode;
	upup->left_ysspNode = up->right_ysspNode;
	if( upup->left_ysspNode )
	  upup->left_ysspNode->up_ysspNode = upup;
	up->right_ysspNode = upup;
	upup->up_ysspNode = up;
	if( !upupup )
	  t->root_ysspTree = up;
	else if( upupup->left_ysspNode == upup )
	  upupup->left_ysspNode = up;
	else
	  upupup->right_ysspNode = up;
	up->up_ysspNode = upupup;
	upup = upupup;
      }
      up->left_ysspNode = right;
      if( right )
	right->up_ysspNode = up;
      right = up;

    }
    else			/* up is to the left of n */
    {
      if( upup && upup->right_ysspNode == up )
      {
	upupup = upup->up_ysspNode;
	upup->right_ysspNode = up->left_ysspNode;
	if( upup->right_ysspNode )
	  upup->right_ysspNode->up_ysspNode = upup;
	up->left_ysspNode = upup;
	upup->up_ysspNode = up;
	if( !upupup )
	  t->root_ysspTree = up;
	else if( upupup->right_ysspNode == upup )
	  upupup->right_ysspNode = up;
	else
	  upupup->left_ysspNode = up;
	up->up_ysspNode = upupup;
	upup = upupup;
      }
      up->right_ysspNode = left;
      if( left )
	left->up_ysspNode = up;
      left = up;
    }
    prev = up;
    up = upup;
  }

  /*
  if( t->root_ysspTree != prev )
  {
    fprintf(stderr, " *** bug in spsplay: n not in t *** " );
    abort();
  }
  */

  n->left_ysspNode = left;
  n->right_ysspNode = right;
  if( left )
    left->up_ysspNode = n;
  if( right )
    right->up_ysspNode = n;
  t->root_ysspTree = n;
  n->up_ysspNode = (ysspNode*)NULL;

}

void ysspRemove( ysspNode *n, ysspTree *t )
{
  ysspNode *x;

  ysspSplay( n, t );
  x = ysspDeq( &t->root_ysspTree->right_ysspNode );
  if( !x )			/* empty right subtree */
  {
    t->root_ysspTree = t->root_ysspTree->left_ysspNode;
    if (t->root_ysspTree)
      t->root_ysspTree->up_ysspNode = (ysspNode*)NULL;
  }
  else				/* non-empty right subtree */
  {
    x->up_ysspNode = (ysspNode*)NULL;
    x->left_ysspNode = t->root_ysspTree->left_ysspNode;
    x->right_ysspNode = t->root_ysspTree->right_ysspNode;
    if( x->left_ysspNode )
      x->left_ysspNode->up_ysspNode = x;
    if( x->right_ysspNode )
      x->right_ysspNode->up_ysspNode = x;
    t->root_ysspTree = x;
  }
}

/* NOTE: pointer to a node pointer! */
ysspNode *ysspDeq( ysspNode **np )
{
  ysspNode *deq;		/* one to return */
  ysspNode *next;       	/* the next thing to deal with */
  ysspNode *left;      	/* the left child of next */
  ysspNode *farleft;		/* the left child of left */
  ysspNode *farfarleft;	/* the left child of farleft */

  if( !np || !*np )
  {
    deq = (ysspNode*)NULL;
  }
  else
  {
    next = *np;
    left = next->left_ysspNode;
    if( !left )
    {
      deq = next;
      *np = next->right_ysspNode;

      if( *np )
	(*np)->up_ysspNode = (ysspNode*)NULL;

    }
    else for(;;)		/* left is not null */
    {
      /* next is not it, left is not NULL, might be it */
      farleft = left->left_ysspNode;
      if( !farleft )
      {
	deq = left;
	next->left_ysspNode = left->right_ysspNode;
	if( left->right_ysspNode )
	  left->right_ysspNode->up_ysspNode = next;
	break;
      }

      /* next, left are not it, farleft is not NULL, might be it */
      farfarleft = farleft->left_ysspNode;
      if( !farfarleft )
      {
	deq = farleft;
	left->left_ysspNode = farleft->right_ysspNode;
	if( farleft->right_ysspNode )
	  farleft->right_ysspNode->up_ysspNode = left;
	break;
      }

      /* next, left, farleft are not it, rotate */
      next->left_ysspNode = farleft;
      farleft->up_ysspNode = next;
      left->left_ysspNode = farleft->right_ysspNode;
      if( farleft->right_ysspNode )
	farleft->right_ysspNode->up_ysspNode = left;
      farleft->right_ysspNode = left;
      left->up_ysspNode = farleft;
      next = farleft;
      left = farfarleft;
    }
  }
  return( deq );
}

ysspNode *ysspFHead( ysspTree *t )
{
  ysspNode *x;

  if( ( x = t->root_ysspTree ) )
    while( x->left_ysspNode )
      x = x->left_ysspNode;

  return( x );
}

ysspNode *ysspFTail( ysspTree *t )
{
  ysspNode *x;

  if( ( x = t->root_ysspTree ) )
    while( x->right_ysspNode )
      x = x->right_ysspNode;

  return( x );
}



ysspNode *ysspFNext( ysspNode *n )
{
  ysspNode *next;
  ysspNode *x;

  /* a long version, avoids splaying for fast average,
   * poor amortized bound
   */

  if( !n )
    return( n );

  x = n->right_ysspNode;
  if( x )
  {
    while( x->left_ysspNode )
      x = x->left_ysspNode;
    next = x;
  }
  else				/* x == NULL */
  {
    x = n->up_ysspNode;
    next = (ysspNode*)NULL;
    while( x )
    {
      if( x->left_ysspNode == n )
      {
	next = x;
	x = (ysspNode*)NULL;
      }
      else
      {
	n = x;
	x = n->up_ysspNode;
      }
    }
  }
  return( next );
}


ysspNode *ysspFPrev( ysspNode *n )
{
  ysspNode *prev;
  ysspNode *x;

  if( !n )
    return( n );

  x = n->left_ysspNode;
  if( x )
  {
    while( x->right_ysspNode )
      x = x->right_ysspNode;
    prev = x;
  }
  else
  {
    x = n->up_ysspNode;
    prev = (ysspNode *)NULL;
    while( x )
    {
      if( x->right_ysspNode == n )
      {
	prev = x;
	x = (ysspNode *)NULL;
      }
      else
      {
	n = x;
	x = n->up_ysspNode;
      }
    }
  }
  return( prev );
}

