/* Copyright (c) 1994 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 * mnping - Ping a gateway or a node
 *
 * REVISIONS
 * jolkin    04/29/94  OMN V2.0
 * dbrower   06/27/95  new main
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

#ifndef MN_ORACLE
#include <mn.h>
#endif

#ifndef YS_ORACLE
#include <ys.h>
#endif

#ifndef YSR_ORACLE
#include <ysr.h>
#endif
#ifndef SYSFP_ORACLE
#include <sysfp.h>
#endif

#ifndef MTL_ORACLE
#include <mtl.h>
#endif

#ifndef SMNI_ORACLE
#include <smni.h>
#endif

#ifndef MZN_ORACLE
#include <mzn.h>
#endif

#ifndef SMN_ORACLE
#include <smn.h>
#endif

void doEcho(char *addr, boolean repeat, ub4 delay);
void doMsgSend(char *addr, boolean repeat, ub4 sz, ub4 delay, boolean synch,
	       ub4 count);
void doMsgRecv(char *addr, boolean repeat, sysfp *fp, ub4 sz);
void doStrSend(char *addr, boolean repeat, ub4 sz, ub4 delay);
void doStrRecv(char *addr, boolean repeat, sysfp *fp, ub4 sz);
void doMsgResult(dvoid *usrp, sb4 sts);

static struct ysargmap mnpingArgs[] =
{
  { 'g', "mn.sync-gateway", 1 },
  { 'i', "mn.async-gateway", 1 },
  { 'z', "mn.heapsize", 1 },
  { 'o', "mnping.output-file", 1 },
  { 'p', "mnping.size", 1 },
  { 'd', "mnping.delay-ms", 1 },
  { 'c', "mnping.count", 1 },
  { 'r', "mnping.repeat=true", 0 },
  { 'm', "mnping.message=true", 0 },
  { 's', "mnping.stream=true", 0 },
  { 'l', "mnping.listen=true", 0 },
  { 'y', "mnping.sync=false", 0 },
  { 'K', "mnping.thread-package", 1 },
  { 'A', "mnping.again=true", 0 },
  { YSARG_OPTPARAM, "mnping.address", 1 },
  { 0 }
};

boolean mnping(dvoid *osdCtx, const char *nm, sword argc, char **argv)
{
  char *addr, *of;
  ub4 sz, delay, count;
  boolean repeat, message, stream, listen, synch;
  sysfp *fp;
  char *arg;
  CONST char *errtxt;
  sword sts;
  char vbuf[80];

  of = addr = (char *) 0;
  repeat = message = stream = listen = FALSE;
  fp = (sysfp *) 0;

  sz = 64;
  delay = 1000;
  synch = TRUE;
  count = 0;

  sts = ysArgParse( argc, argv, mnpingArgs );
  if (sts == YSARG_VERSION)
    yslError(ysVersion(vbuf, sizeof(vbuf)));
  if (sts != YSARG_NORMAL)
    return FALSE;

  if( arg = ysResGetLast( "mnping.output-file" ) )
    of = arg;
  if( arg = ysResGetLast( "mnping.size" ) )
    sz = atol( arg );
  if( arg = ysResGetLast( "mnping.delay-ms" ) )
    delay = atol( arg );
  if( arg = ysResGetLast( "mnping.count" ) )
    count = atol( arg );
  if( ysResGetLast( "mnping.repeat" ) )
    repeat = TRUE;
  if( ysResGetLast( "mnping.message" ) )
    message = TRUE;
  if( ysResGetLast( "mnping.stream" ) )
    stream = TRUE;
  if (ysResGetLast("mnping.listen"))
    listen = TRUE;
  if( ysResGetLast( "mnping.sync" ) )
    synch = FALSE;
  if( arg = ysResGetLast( "mnping.address" ) )
    addr = arg;

 again:
  if( !smniInit( osdCtx, (mnLogger)0 ) )
    return( FALSE );

  if (!addr && !listen && (message || stream) )
    {
      yslPrint("destination required\n");
      return FALSE;
    }

  if (of && listen)
    {
      if (*of == '-')
	fp = (sysfp *) 0;
      else if (!(fp = sysfpOpen(of, "w", SYSFPKIND_TEXT, &errtxt)))
	{
	  yslPrint("could not open file %s; error: %s\n", of, errtxt);
	  return FALSE;
	}
    }

  if (ysResGetLast("mnping.thread-package"))
    ysThrInit(ysResGetLast("mnping.thread-package"));

  if (!message && !stream)
    doEcho(addr, repeat, delay);
  else if (message && !listen)
    doMsgSend(addr, repeat, sz, delay, synch, count);
  else if (message && listen)
    doMsgRecv(addr, repeat, fp, sz);
  else if (stream && !listen)
    doStrSend(addr, repeat, sz, delay);
  else if (stream && listen)
    doStrRecv(addr, repeat, fp, sz);

  if (ysResGetLast("mnping.thread-package"))
    ysThrTerm();

  mnTerm();

  if (ysResGetBool("mnping.again"))
    {
      sysb8 tm;

      ysResSet("mnping.again", "false");
      sysb8ext(&tm, 40000000);
      ysTimer(&tm, (ysevt *) 0);
      goto again;
    }
  else
    return( TRUE );
}

void doEcho(char *addr, boolean repeat, ub4 delay)
{
  mna  to;
  sb4  ts, te, sts;

  if (!addr)
    addr = "0xffffffff.1";

  if (isdigit(*addr))
    sts = mnAddr(&to, addr);
  else
    sts = mznFind(&to, addr);

  if (sts)
    {
      yslPrint(mnError(sts));
      return;
    }

  do
    {
      ts = smnClock();
      sts = mnEcho(&to, delay, 0, 0);
      te = smnClock();
      if (sts >= 0)
	{
	  yslPrint("echo from %s, ms=%d\n", addr, te - ts);

	  if ((te - ts < delay) && repeat)
	    sts = mnTimer(delay - (te - ts), 0, 0);
	}
      else
	{
	  yslPrint(mnError(sts));
	  if (sts == MNERR_TIMEOUT)
	    sts = 0;
	}
    } while (sts >= 0 && repeat);
}

void doMsgSend(char *addr, boolean repeat, ub4 sz, ub4 delay, boolean synch,
	       ub4 count)
{
  mna  to;
  mnp *port;
  ub1 *buf;
  ub4  i;
  sb4  ts, te, sts;

  if (isdigit(*addr))
    sts = mnAddr(&to, addr);
  else
    sts = mznFind(&to, addr);

  if (sts)
    {
      yslPrint(mnError(sts));
      return;
    }

  port = mnOpen(MNPROTO_MESSAGE);

  buf = (ub1 *) ysmGlbAlloc(sz, "buf");
  for (i = 0; i < sz; i++)
    buf[i] = '0' + (i % 10);

  do
    {
      count--;
      ts = smnClock();
      if (synch)
	sts = mnSend(port, &to, buf, sz, 0, 0);
      else
	sts = mnSend(port, &to, buf, sz, doMsgResult, (dvoid *) ts);
      te = smnClock();
      if (sts >= 0)
	{
	  yslPrint("sent %d bytes, %d ms\n", sts, te - ts);

	  if ((te - ts < delay) && repeat)
	    sts = mnTimer(delay - (te - ts), 0, 0);
	}
      else
	yslPrint(mnError(sts));
    } while (sts >= 0 && repeat && count);

  mnClose(port);
  ysmGlbFree(buf);
}

void doMsgResult(dvoid *usrp, sb4 sts)
{
  sb4 ts, te;

  ts = (sb4) usrp;
  te = smnClock();
  if (sts >= 0)
    yslPrint("acknowledged %d bytes, %d ms\n", sts, te - ts);
  else
    yslPrint(mnError(sts));
}

void doMsgRecv(char *addr, boolean repeat, sysfp *fp, ub4 sz)
{
  ub1  *buf;
  char  out[MNAMAXLEN];
  mnp  *port;
  mna   from;
  sb4   sts;

  buf = (ub1 *) 0;

  port = mnOpen(MNPROTO_MESSAGE);

  if (addr)
    {
      if (!isdigit(*addr))
	sts = mznBind(port, addr);
      else
	{
	  sts = mnAddr(&from, addr);
	  if (!sts)
	    sts = mnBind(port, &from);
	}

      if (sts)
	{
	  yslPrint(mnError(sts));
	  goto leave;
	}
    }

  mnGetAddr(port, &from);
  mnAtos(&from, out, MNAMAXLEN);
  yslPrint("listening on %s\n", out);

  buf = (ub1 *) ysmGlbAlloc(sz, "buf");
  do
    {
      sts = mnRecvWait(port, &from, 0, 0, 0);
      if (sts >= 0)
	sts = mnRecv(port, 0, buf, sz, 0, 0, 0);

      if (sts >= 0)
	{
	  mnAtos(&from, out, MNAMAXLEN);
	  yslPrint("received %d bytes from %s\n", sts, out);
	  if (fp)
	    sysfpWrite(fp, buf, sts);
	}
      else
	{
	  yslPrint(mnError(sts));
	  if (sts == MNERR_BROKEN)
	    sts = 0;
	}
    } while (sts >= 0 && repeat);

 leave:
  mnClose(port);
  if (buf)
    ysmGlbFree(buf);
  if (fp)
    sysfpClose(fp);
}

void doStrSend(char *addr, boolean repeat, ub4 sz, ub4 delay)
{
  mna  to;
  mnp *port;
  ub1 *buf;
  ub4  i;
  sb4  ts, te, sts;

  if (isdigit(*addr))
    sts = mnAddr(&to, addr);
  else
    sts = mznFind(&to, addr);

  if (sts)
    {
      yslPrint(mnError(sts));
      return;
    }

  buf = (ub1 *) ysmGlbAlloc(sz, "buf");
  for (i = 0; i < sz; i++)
    buf[i] = '0' + (i % 10);

  do
    {
      port = mnOpen(MNPROTO_STREAM);
      sts = mnConnect(port, &to);
      if (!sts)
	{
	  ts = smnClock();
	  sts = mnWrite(port, buf, sz);
	}

      mnClose(port);
      te = smnClock();

      if (sts >= 0)
	{
	  yslPrint("sent %d bytes, %d ms\n", sts, te - ts);

	  if ((te - ts < delay) && repeat)
	    sts = mnTimer(delay - (te - ts), 0, 0);
	}
      else
	yslPrint(mnError(sts));
    } while (sts >= 0 && repeat);

  ysmGlbFree(buf);
}

void doStrRecv(char *addr, boolean repeat, sysfp *fp, ub4 sz)
{
  ub1  *buf;
  char  out[MNAMAXLEN];
  mnp  *port, *cport;
  mna   from;
  sb4   sts;

  buf = (ub1 *) 0;
  port = mnOpen(MNPROTO_STREAM);

  if (addr)
    {
      if (!isdigit(*addr))
	sts = mznBind(port, addr);
      else
	{
	  sts = mnAddr(&from, addr);
	  if (!sts)
	    sts = mnBind(port, &from);
	}

      if (sts)
	{
	  yslPrint(mnError(sts));
	  goto leave;
	}
    }


  mnGetAddr(port, &from);
  mnAtos(&from, out, MNAMAXLEN);
  yslPrint("listening on %s\n", out);

  buf = (ub1 *) ysmGlbAlloc(sz, "buf");
  do
    {
      cport = mnAccept(port);
      if (cport)
	{
	  mnGetPeer(cport, &from);
	  mnAtos(&from, out, MNAMAXLEN);

	  do
	    {
	      sts = mnRead(cport, buf, sz, TRUE, 0, 0, 0);
	      if (sts >= 0)
		{
		  yslPrint("received %d bytes from %s\n", sts, out);
		  if (fp)
		    sysfpWrite(fp, buf, sts);
		}
	    } while (sts >= 0);

	  mnClose(cport);
	}
      else
	sts = mnLastError();

      yslPrint(mnError(sts));
      if (sts == MNSTS_EOS)
	sts = 0;
    } while (sts >= 0 && repeat);

 leave:
  mnClose(port);
  if (buf)
    ysmGlbFree(buf);
  if (fp)
    sysfpClose(fp);
}
