/* Copyright (c) Oracle Corporation 1995.  All Rights Reserved. */

/*
   NAME
     ydmtd.idl
   DESCRIPTION
     idl file for interfaces to the ydmtd metric daemon.

   MODIFIED   (MM/DD/YY)
    dbrower   11/ 1/95 -  commented, gated
*/

#ifndef YDMTDIDL_ORACLE
#define YDMTDIDL_ORACLE

#ifndef YOSTD_ORACLE
#include "yostd"
#endif

#ifndef YOIDL_ORACLE
#include "yoidl"
#endif

struct ydmtdStats
{
  sb4	    ndests_ydmtdStats;
  sb4	    nyorts_ydmtdStats;
  sb4	    npolls_ydmtdStats;
  sb4	    nsends_ydmtdStats;
};

struct ydmtdMetrics
{
  yort::procInfo    pinfo_ydmtdMetrics;
  yort::dispInfoList dlist_ydmtdMetrics;
  yort::implAllList metrics_ydmtdMetrics;
};

typedef sequence <ydmtdMetrics> ydmtdMetricsList;

interface ydmtd {

  readonly attribute ydmtd self;
  readonly attribute ydmtdStats stats;
  readonly attribute ydmtdMetricsList metrics;

  exception notFound {};

  // length before re-send of current data (expire time).
  attribute sb4		ttlMs;

  // time between poll loops.
  attribute sb4		pollIdleMs;

  // how often to check for new dests...
  attribute sb4		destCheckMs;
  
  // when to declare a yort dead.
  attribute sb4		timeoutMs;

  // max number of concurrent poll i/o operations allowed.
  attribute sb4		maxPoll;

  // get metrics for a single yort
  void getYortMetrics( in yort::proc yort, out ydmtdMetrics metrics )
    raises ( notFound );

  // get metrics for a single process
  void getProcMetrics( in string host, in string pid, in string affinity,
		      out ydmtdMetrics metrics )
    raises ( notFound );

  oneway void shutdown();
};

#endif				// YDMTDIDL_ORACLE
