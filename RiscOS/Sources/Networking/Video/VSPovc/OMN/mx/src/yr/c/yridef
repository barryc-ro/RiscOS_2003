/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 *   yrintf.c - Implementation of yr::intfdef
 *
 * NOTES
 * Though it is done through a derived interface, this is just a stateless
 * implementation of CORBA::InterfaceDef. All these implementation functions
 * are very simple wrappers around the InterfaceDef implementation functions.
 * This interface exists to give the object runtime a cheap way to implement
 * CORBA::Object::get_interface by doing a yoBind to yr::intfdef. Thus, yo
 * doesn't have to hit the network, but as far as the user is concerned it
 * returns a normal InterfaceDef. Most users won't ever want to make IFR
 * calls on the result of get_interface, but the ones that do will come
 * through here.
 *
 * Since repository objects are inherently stateful, yo abides by the
 * convention of putting the interface (repository) id of the desired
 * interface into the ref data of the loosely bound object. So, these
 * wrappers all use to ref data to locate the corresponding yrobj and
 * thence to a real CORBA::InterfaceDef.
 *
 * A completely separate implementation would be much more efficient than
 * going through the InterfaceDef implementation, but gives you two code
 * paths to maintain and introduces more room for error, so have I chosen
 * this method initially. Since this is not the preferred way of accessing
 * the IFR, I'm hoping performance won't be an issue. 
 *
 * The major source of inefficiency the superflous object transformations:
 * From yr::intfdef to yrobj to InterfaceDef and thence into the 
 * InterfaceDef impl isn't too bad. But then it will go through at least
 * one transformation from InterfaceDef to yrobj. A first class implementation
 * of this interface would circumvent all this and cut out several layers
 * of pass thru calls.
 *
 * HISTORY
 * 11/20/96 kcoleman    Creation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif

#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
#ifndef YRIDEFI_H
#include <yridefI.h>
#endif

#ifndef YRCORBAI_H
#include <yrcorbaI.h>
#endif
 
#ifndef YR_ORACLE
#include <yr.h>
#endif
 
#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif

#ifndef YRTYPIDL_IDL
#include <yrtypidl.h>
#endif

#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif

EXTC_START

STATICF CORBA_InterfaceDef yrGetStateful(yr_intfdef or);

boolean yr_intfdef_is_a_i( yr_intfdef or, yoenv* ev, CORBA_RepositoryId 
  interface_id)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);

  return CORBA_InterfaceDef_is_a_i(obj, ev, interface_id);
}

CORBA_InterfaceDef_FullInterfaceDescription yr_intfdef_describe_interface_i(
   yr_intfdef or, yoenv* ev)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);

  return CORBA_InterfaceDef_describe_interface_i(obj, ev);
}

CORBA_InterfaceDefSeq yr_intfdef__get_base_interfaces_i( yr_intfdef or, 
  yoenv* ev)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef__get_base_interfaces_i(obj, ev);
}

CORBA_Contained yr_intfdef_lookup_i( yr_intfdef or, yoenv* ev, 
  CORBA_ScopedName search_name)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef_lookup_i(obj, ev, search_name);
}

CORBA_ContainedSeq yr_intfdef_contents_i( yr_intfdef or, yoenv* ev, 
  CORBA_DefinitionKind limit_type, boolean exclude_inherited)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef_contents_i(obj, ev, limit_type, exclude_inherited);
}

CORBA_ContainedSeq yr_intfdef_lookup_name_i( yr_intfdef or, yoenv* ev, 
  CORBA_Identifier search_name, sb4 levels_to_search, CORBA_DefinitionKind 
  limit_type, boolean exclude_inherited)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef_lookup_name_i(
    obj, ev, search_name, levels_to_search, limit_type, exclude_inherited);
}

CORBA_Container_DescriptionSeq yr_intfdef_describe_contents_i( yr_intfdef 
  or, yoenv* ev, CORBA_DefinitionKind limit_type, boolean exclude_inherited,
   sb4 max_returned_objs)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef_describe_contents_i(
     obj, ev, limit_type, exclude_inherited, max_returned_objs);
}

CORBA_DefinitionKind yr_intfdef__get_def_kind_i( yr_intfdef or, yoenv* ev)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef__get_def_kind_i(obj, ev);
}

CORBA_Contained_Description yr_intfdef_describe_i( yr_intfdef or, yoenv* ev)
  
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef_describe_i(obj, ev);
}

CORBA_RepositoryId yr_intfdef__get_id_i( yr_intfdef or, yoenv* ev)
{
  yoRefData* data;
  CORBA_RepositoryId id;

  if ( data && (data->_length > 0) )
    id = (CORBA_RepositoryId) ysStrDupWaf((char*)data->_buffer, yoAlloc);
  else
    id = (CORBA_RepositoryId) ysStrDupWaf("", yoAlloc);
  yoFreeId(data);
  return id;
}

CORBA_Identifier yr_intfdef__get_name_i( yr_intfdef or, yoenv* ev)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef__get_name_i(obj, ev);
}

CORBA_VersionSpec yr_intfdef__get_version_i( yr_intfdef or, yoenv* ev)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef__get_version_i(obj, ev);
}

CORBA_Container yr_intfdef__get_defined_in_i( yr_intfdef or, yoenv* ev)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef__get_defined_in_i(obj, ev);
}

CORBA_ScopedName yr_intfdef__get_absolute_name_i( yr_intfdef or, yoenv* ev)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef__get_absolute_name_i(obj, ev);
}

CORBA_Repository yr_intfdef__get_containing_repository_i( yr_intfdef or, 
  yoenv* ev)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef__get_containing_repository_i(obj, ev);
}

yotk* yr_intfdef__get_type_i( yr_intfdef or, yoenv* ev)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef__get_type_i(obj, ev);
}

/*
 * Suggested definition only. It need not be
 * const or static, or even defined at compile time.
 */
static CONST_W_PTR struct yr_intfdef__tyimpl yr_intfdef__impl =
 {
  yr_intfdef_is_a_i,
  yr_intfdef_describe_interface_i,
  yr_intfdef__get_base_interfaces_i,
  yr_intfdef_lookup_i,
  yr_intfdef_contents_i,
  yr_intfdef_lookup_name_i,
  yr_intfdef_describe_contents_i,
  yr_intfdef__get_def_kind_i,
  yr_intfdef_describe_i,
  yr_intfdef__get_id_i,
  yr_intfdef__get_name_i,
  yr_intfdef__get_version_i,
  yr_intfdef__get_defined_in_i,
  yr_intfdef__get_absolute_name_i,
  yr_intfdef__get_containing_repository_i,
  yr_intfdef__get_type_i
 };


/*
 * yrGetStateful - Transform a stateless yr::intfdef obj ref into a
 *    corresponding stateful CORBA::InterfaceDef
 *
 * The ref data on a yr::intfdef must be the interface (repository) id
 * of interface described by this object. We first use the repository id
 * to locate the corresponding yrobj, and then create a real InterfaceDef
 * for it. This allows us to use the InterfaceDef implementation directly,
 * though it isn't particularly efficient. 
 */
STATICF CORBA_InterfaceDef yrGetStateful(yr_intfdef or)
{
  noreg yoRefData* data;
  CORBA_InterfaceDef idef;

  NOREG(data);
  idef = (CORBA_InterfaceDef)0;
  data = yoGetId( (dvoid*)or);
  yseTry
    if ( data && (data->_length > 0) )
    {
      yrobj* obj;
      yrobj* rep;

      rep = (yrobj*) yoGetImplState(or);
      obj = yrLookupId(rep, (char*) data->_buffer);
      if ( obj && (yrGetKind(obj) == yrdkInterface) )
        idef = (CORBA_InterfaceDef) yrYRtoCORBA(obj);
      else
        yseThrow(YO_EX_BADOBJ);
    }
    else
      yseThrow(YO_EX_BADOBJ);
  yseFinally
    if ( data )
      yoFreeId( (yoRefData*)data);
    yseRethrow;
  yseEnd
  return idef;
}

static ysidDecl(yr_intfdef_implid) = "ORA_yr_intfdef";

void Init_yr_intfdef(yrobj* rep)
{
  YR_SET_IMPL(yr_intfdef, TRUE, rep);
  YR_IMPL_READY(yr_intfdef, 0);
}

void Term_yr_intfdef()
{
  YR_IMPL_DEACTIVATE(yr_intfdef);
}

EXTC_END
