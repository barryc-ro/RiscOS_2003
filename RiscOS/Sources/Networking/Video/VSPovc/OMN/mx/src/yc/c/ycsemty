/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ycsemty.c - semantic analysis of types
 *
 * NOTES
 *
 * HISTORY
 * 01/03/97 kcoleman    For bug #435399, use yotkDuplicateWaf
 * 12/18/96 kcoleman	Change handling of union default case label value
 * 07/24/96 kcoleman	New symbol table
 * 07/22/96 kcoleman	Bug 384230: Duplicate struct fields undetected
 * 07/18/96 kcoleman    Bug 383336: Case label uninit'd in event of an error
 * 05/15/96 kcoleman	Bug 367030: Duplicate union declarators not detected
 * 04/08/96 kcoleman	Use ysRecord for error reporting.
 * 03/18/96 kcoleman	Make modules code gen objects
 * 02/27/96 kcoleman	Bug 336120: Nested types are in enclosing container
 * 10/13/95 kcoleman    Support for TypeCode pseudo-object
 * 10/05/95 kcoleman	Make sure float and double uses result in an error msg
 * 10/02/95 kcoleman	Fix bug in typecodes gen'd for enum types
 * 09/27/95 kcoleman	Use accessor ops to get at IFR data
 * 09/01/95 kcoleman	Handling for nested and recursive types
 * xx/xx/95 jolkin	Creation.
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YR_ORACLE
#include <yr.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif
#ifndef YSSTR_ORACLE
#include <ysstr.h>
#endif


STATICF void ycsValidateRecursion( ycctx* ctx, yrobj* type);
externdef ysidDecl(YC_EX_RECURSION) = "::YC_EX_RECURSION";

/*
 * AST PARSE ROUTINES FOR TYPES
 */
void ycsTypeDcl(ycctx *ctx, yrobj *scope, yctTypeDcl *td)
{
  switch (td->tag)
    {
    case ycttTypeDeclarator:
      ycsTypeDecl(ctx, scope, MEMBER(td, typedecl));
      break;
    case ycttStructType:
      DISCARD ycsStructType(ctx, scope, MEMBER(td, structtype));
      break;
    case ycttUnionType:
      DISCARD ycsUnionType(ctx, scope, MEMBER(td, uniontype));
      break;
    case ycttEnumType:
      DISCARD ycsEnumType(ctx, scope, MEMBER(td, enumtype));
      break;
    default:
      yseThrow(YS_EX_FAILURE);
      break;
    }
}

/*
 * ycsTypeDecl - typedef processing
 */
void ycsTypeDecl(ycctx *ctx, yrobj *scope, yctTypeDeclarator *td)
{
  ycsProcDecls(ctx, scope, td->typespec, td->declarators, (dvoid *) 0,
	       ycsCreateAlias);
}

void ycsCreateAlias(ycctx *ctx, yrobj *scope, CONST char *id, yrobj *type,
		    dvoid *usrp, ycln* lninfo)
{
  yrobj* alias = yrCreateAlias( scope, id, type);
  yrSetSrcInfo( alias, lninfo->name, lninfo->line);
  DISCARD ycSymInsert( ctx->symtbl, alias);
  ycsAddObj(ctx, scope, alias);
}

/*
 * ycsStructType - struct processing
 */
yrobj *ycsStructType(ycctx *ctx, yrobj *scope, yctStructType *st)
{
  yslst *mbrs;
  ysle  *le;
  yctMember *mbr;
  yrobj* sobj;

  if (!ycsNewDef(ctx, scope, st->id, st->line))
    return (yrobj *) 0;

  mbrs = ysLstCreate();
  sobj = yrCreateStruct(scope, st->id, mbrs);
  yrSetSrcInfo( sobj, st->line->name, st->line->line);
  DISCARD ycSymInsert( ctx->symtbl, sobj);

  for (le = ysLstHead(st->members); le; le = ysLstNext(le))
  {
    mbr = (yctMember *) ysLstVal(le);
    ycsProcDecls(ctx, sobj, mbr->typespec, mbr->declarators,
                 (dvoid *) mbrs, ycsCreateMember);
  }

    /****
     * Add new struct to list of code gen objects AFTER processing
     * fields so that any types defined inside get gen'd first.
     ****/
  ycsAddObj(ctx, scope, sobj);
  ycsValidateRecursion( ctx, sobj);
  return sobj;
}

void ycsCreateMember(ycctx *ctx, yrobj *scope, CONST char *id, yrobj *type,
		     dvoid *usrp, ycln* lninfo)
{
  yrstrmbr *mbr;
  ysle* le;

    /* bug #384230 - detect duplicate fields */
  for ( le = ysLstHead((yslst*)usrp); le; le = ysLstNext(le))
  {
    mbr = (yrstrmbr*)ysLstVal(le);
 
    if ( strcmp( id, mbr->name) == 0 )
    {
      ysRecord( YCMSG(105), YCERRSEV, YCERRLN(lninfo), YSLSTR(id), YSLEND);
      break;
    }
  }
  mbr = (yrstrmbr *) ysmGlbAlloc(sizeof(yrstrmbr), "yrstrmbr");
  mbr->name = ysStrDup(id);
  mbr->type = type;
  DISCARD ysLstEnq((yslst *) usrp, (dvoid *) mbr);
}

/*
 * ycsConstructArray - build up a multi-dimensionsal array in the IFR
 *
 * Walk the array dimensions in reverse order because we build an
 * array from the bottom up. That is, "long A[3][2]" is an array of
 * 3 arrays of 2 long's, and you have to build "array of 2 long's"
 * first.
 */
STATICF yrobj* ycsConstructArray( ycctx* ctx, yrobj* scope, yrobj* elemType,
	yctComplexDeclarator* cd)
{
  ysle* le;
  yctFixedArraySize* fa;
  ub4 len;
  yrobj* type = elemType;

  for (le = ysLstTail(cd->arraysize); le; le = ysLstPrev(le))
  {
    fa = (yctFixedArraySize *) ysLstVal(le);
    len = ycsPosIntExpr(ctx, scope, fa->intconst);
    type = yrCreateArray(ctx->repository, len, type);
    DISCARD ycSymInsert( ctx->symtbl, type);
  }
  return type;
}
/*
 * ycsUnionType - union processing
 *
 * Bug #336120: An enumeration type defined in the switch-type-spec of a union
 * is supposed to be inside the scope of the union. Therefore, it is 
 * necessary to first create a union with no discriminator type so it
 * can be used as the enclosing scope when processing the switch-type-spec.
 *
 * Hack alert: Union default cases are supposed to be any's with a type
 * of octet (not a legal discrim case) and a value of 0, according to
 * CORBA. When spit across the network, that default label value is of
 * the size of the real discriminant type. To make life easier for the
 * marshalling code, we put the any in the IFR with type octet and a
 * 4 BYTE 0 VALUE, so the marshalling code can grab a zero of any size
 * out of it.
 */
yrobj *ycsUnionType(ycctx *ctx, yrobj *scope, yctUnionType *ut)
{
  yrobj *newobj, *disc, *type;
  yslst *arms;
  ysle  *le, *le2;
  char  *nm;
  yrunmbr *mbr;
  yotkKind dknd;
  yctCase *cs;
  yctCaseLabel *cl;
  yctDeclarator *decl;
  yctComplexDeclarator *cd;
  yslst* names;

  if (!ycsNewDef(ctx, scope, ut->id, ut->line))
    return (yrobj *) 0;

  arms = ysLstCreate();
  newobj = yrCreateUnion(scope, ut->id, (yrobj*)0, arms);
  yrSetSrcInfo( newobj, ut->line->name, ut->line->line);
  DISCARD ycSymInsert( ctx->symtbl, newobj);

  if (!(disc = ycsSwitchType(ctx, newobj, ut->typespec)))
    return (yrobj *) 0;
  yrUnionData(newobj).disctype = disc;

  dknd = ycsGetTypeKind(ctx, disc);
  names = ysLstCreate();
  for (le = ysLstHead(ut->cases); le; le = ysLstNext(le))
    {
      cs = (yctCase *) ysLstVal(le);
      decl = cs->elemspec->declarator;
      nm = (char *) 0;

      if (!(type = ycsTypeSpec(ctx, newobj, cs->elemspec->typespec)))
	continue;

      if (decl->tag == (ub4)ycttSimple)
	{
	  if (ycsNewDef(ctx, newobj, MEMBER(decl, simple), decl->line))
	    nm = MEMBER(decl, simple);
	}
      else
	{
	  cd = (yctComplexDeclarator *) MEMBER(decl, complex);
	  if (ycsNewDef(ctx, newobj, cd->id, decl->line))
	  {
              type = ycsConstructArray( ctx, newobj, type, cd);
	      nm = cd->id;
	  }
	}

      /* Bug 367030 - check for duplicate field names */
      if ( nm )
      {
        for ( le2 = ysLstHead(names); le2; le2 = ysLstNext(le2))
        {
          if ( strcmp( nm, (char*) ysLstVal(le2)) == 0 )
          {
            ysRecord( YCMSG(100), YCERRSEV, YCERRLN(cs->line), 
                      YSLSTR(nm),YSLEND);
            nm = (char*)0;
            break;
          }
        }
      }

      if (!nm)
	continue;       /* there was some kind of error */

      for (le2 = ysLstHead(cs->caselabels); le2; le2 = ysLstNext(le2))
	{
	  cl = (yctCaseLabel *) ysLstVal(le2);
	  mbr = (yrunmbr *) ysmGlbAlloc(sizeof(yrunmbr), "yrunmbr");
          CLRSTRUCT(*mbr);          /* label may not be filled if err */
          mbr->name = ysStrDup(nm);
	  mbr->type = type;

	  if (cl->constexp)
	    DISCARD ycsEvalExpr(ctx, newobj, &mbr->label, dknd, cl->constexp);
	  else	/* "default" case */
          {
	    mbr->label._type = yotkDuplicateWaf(yoTcOctet, (ysmaf) ycAllocTC); 
            mbr->label._value = ysmGlbAlloc(sizeof(ub4), "yrunmbr");
            *(ub4*)mbr->label._value = (ub4)0;
          }

          DISCARD ysLstEnq(arms, (dvoid *) mbr);
	}
      DISCARD ysLstEnq( names, (dvoid*)nm);
    }
    ysLstDestroy( names, (ysmff)0);

    /****
     * Add new struct to list of code gen objects AFTER processing
     * fields so that any types defined inside get gen'd first.
     ****/
  ycsAddObj(ctx, scope, newobj);
  ycsValidateRecursion( ctx, newobj);
  return newobj;
}

/*
 * ycsProcDecls - process declarators
 *   This routine processes a list of declarators and invokes the callback
 *   routine on each declarator that is defined.
 */
void ycsProcDecls(ycctx *ctx, yrobj *scope, yctTypeSpec *ts, yslst *decls,
		  dvoid *usrp,
		  void (*crt)(ycctx *ctx, yrobj *scope, CONST char *id,
			      yrobj *type, dvoid *usrp, ycln* lninfo))
{
  yrobj *type, *elmtype;
  ysle  *le;
  yctDeclarator *decl;
  yctComplexDeclarator *cd;

  /* parse the type specifier */
  if (!(type = ycsTypeSpec(ctx, scope, ts)))
    return;

  /* create declarators */
  for (le = ysLstHead(decls); le; le = ysLstNext(le))
    {
      decl = (yctDeclarator *) ysLstVal(le);

      if (decl->tag == (ub4)ycttSimple)
	{
	  if (ycsNewDef(ctx, scope, MEMBER(decl, simple), decl->line))
	    (*crt)(ctx, scope, MEMBER(decl, simple), type, usrp, decl->line);
	}
      else
	{
	  cd = (yctComplexDeclarator *) MEMBER(decl, complex);
	  if (ycsNewDef(ctx, scope, cd->id, decl->line))
	  {
	    elmtype = ycsConstructArray( ctx, scope, type, cd);
	    (*crt)(ctx, scope, cd->id, elmtype, usrp, decl->line);
	  }
	}

    }
}

/*
 * ycsEnumType - enum type processing
 *
 * The enumeration type and the enumerators are entered into the
 * enclosing scope. The enumerators are treated as const declarations.
 */
yrobj *ycsEnumType(ycctx *ctx, yrobj *scope, yctEnumType *et)
{
  yrobj *newobj, *cobj;
  ub4    i, *cv;
  CONST yotk*   tk;
  yslst *ids;
  ysle  *le;
  yctEnumerator *eid;

  if (!ycsNewDef(ctx, scope, et->id, et->line))
    return (yrobj *) 0;

  ids = ysLstCreate();
  newobj = yrCreateEnum(scope, et->id, ids);
  yrSetSrcInfo( newobj, et->line->name, et->line->line);
  DISCARD ycSymInsert( ctx->symtbl, newobj);

  /* create enumeration list */
  for (i = 0,le = ysLstHead(et->enumerators); le; i++,le = ysLstNext(le))
  {
    eid = (yctEnumerator *) ysLstVal(le);
    if (ycsNewDef(ctx, scope, eid->id, eid->line))
    {
	cv = (ub4 *) ysmGlbAlloc(sizeof(ub4), "enum value");
	*cv = i;
	cobj = yrCreateConstant(scope, eid->id, newobj, (yoany*) 0);
	yrSetSrcInfo( cobj, et->line->name, et->line->line);
        DISCARD ycSymInsert( ctx->symtbl, cobj);
	yrConstData(cobj).val._value = (dvoid *) cv;
	DISCARD ysLstEnq(ids, (dvoid *) cobj);
    }
  }

    /****
     * Don't set the type code on the const values until the enum member 
     * list has been filled in. Otherwise, typecode reflects an enum with 
     * no members! (The IFR caches it the first time it creates it for you.
     * Even if it didn't, it wouldn't be correct.
     ****/
  tk = yrGetTypeCode(newobj);
  for ( le = ysLstHead(ids); le; le = ysLstNext(le))
  {
    yrobj* cobj = (yrobj*) ysLstVal(le);
    yrConstData(cobj).val._type = yotkDuplicateWaf(tk, (ysmaf) ycAllocTC);
  }

    /****
     * Add new struct to list of code gen objects AFTER processing
     * fields so that any types defined inside get gen'd first.
     ****/
  ycsAddObj(ctx, scope, newobj);
  return newobj;
}


/*
 * ycsSwitchType - switch type
 */
yrobj *ycsSwitchType(ycctx *ctx, yrobj *scope, yctSwitchTypeSpec *ts)
{
  yrobj   *type;
  yrpk     kind = yrpkvoid;
  yotkKind tknd;
  yctIntegerType *it;

  if (ts->tag == (ub4)ycttScopedName)
    {
      type = ycsNameToType(ctx, scope, MEMBER(ts, name));
      tknd = ycsGetTypeKind(ctx, type);
      switch (tknd)
	{
	case yotkShort:
	case yotkLong:
	case yotkUshort:
	case yotkUlong:
	case yotkBoolean:
	case yotkChar:
	case yotkEnum:
	  return type;
	default:
          ysRecord( YCMSG(72), YCERRSEV, YCERRLN(ts->line), YSLEND);
	  return (yrobj *) 0;
	}
    }
  else if (ts->tag == (ub4)ycttEnumType)
    return ycsEnumType(ctx, scope, MEMBER(ts, enumtype));
  else
    {
      switch (ts->tag)
	{
	case ycttIntegerType:
	  it = MEMBER(ts, inttype);
	  switch (it->long_t)
	    {
	    case 0: kind = (it->signed_t ? yrpkshort : yrpkushort); break;
	    case 1: kind = (it->signed_t ? yrpklong : yrpkulong); break;
	    case 2: kind = yrpklonglong; break;
	    }
	  break;
	case ycttCharType: kind = yrpkchar; break;
	case ycttBooleanType: kind = yrpkboolean; break;
	}
      return yrGetPrimitive(ctx->repository, kind);
    }
}

/*
 * ycsTypeSpec - type specifiers
 */
yrobj *ycsTypeSpec(ycctx *ctx, yrobj *scope, yctTypeSpec *ts)
{
  yctConstrTypeSpec *ct;

  if (ts->tag == (ub4)ycttSimple)
    return ycsSimpleTypeSpec(ctx, scope, MEMBER(ts, simple));
  else
    {
      ct = MEMBER(ts, constr);
      switch (ct->tag)
	{
	case ycttStructType:
	  return ycsStructType(ctx, scope, MEMBER(ct, structtype));
	case ycttUnionType:
	  return ycsUnionType(ctx, scope, MEMBER(ct, uniontype));
	case ycttEnumType:
	  return ycsEnumType(ctx, scope, MEMBER(ct, enumtype));
	default:
	  return (yrobj *) 0;
	}
    }
}

yrobj *ycsSimpleTypeSpec(ycctx *ctx, yrobj *scope, yctSimpleTypeSpec *st)
{
  yrobj *elmt, *newobj;
  ub4 bound;
  yctTemplateTypeSpec *tt;
  yctStringType *strt;
  yctSequenceType *seqt;

  switch (st->tag)
    {
    case ycttBase:
      return ycsBaseTypeSpec(ctx, scope, MEMBER(st, base));
    case ycttTemplate:
      tt = MEMBER(st, template);
      if (tt->tag == (ub4)ycttSeqType)
	{
	  seqt = MEMBER(tt, seqtype);
	  elmt = ycsSimpleTypeSpec(ctx, scope, seqt->simple);
	  bound = (seqt->intconst ?
		   ycsPosIntExpr(ctx, scope, seqt->intconst) : 0);
	  newobj = yrCreateSequence(ctx->repository, bound, elmt);
	  yrSetSrcInfo( newobj, st->line->name, st->line->line);
          DISCARD ycSymInsert( ctx->symtbl, newobj);
	  ycsAddObj(ctx, scope, newobj);
	  return newobj;
	}
      else
	{
	  strt = MEMBER(tt, strtype);
	  if (!strt->intconst)
	    return yrGetPrimitive(ctx->repository, yrpkstring);
	  else
	    {
              yrobj* newobj;

	      bound = ycsPosIntExpr(ctx, scope, strt->intconst);
	      newobj = yrCreateString(ctx->repository, bound);
              DISCARD ycSymInsert( ctx->symtbl, newobj);
              return newobj;
	    }
	}
    case ycttScopedName:
      return ycsNameToType(ctx, scope, MEMBER(st, name));
    default:
      return (yrobj *) 0;
    }
}

yrobj *ycsBaseTypeSpec(ycctx *ctx, yrobj *scope, yctBaseTypeSpec *bt)
{
  yrpk kind = yrpkvoid;
  yctIntegerType *it;

  switch (bt->tag)
    {
    case ycttFloatType:
      kind = (MEMBER(bt, floattype) == YCTFLOAT ? yrpkfloat : yrpkdouble);
      ysRecord( YCMSG(81), YCERRSEV, YCERRLN(bt->line), YSLEND);
      break;
    case ycttIntegerType:
      it = MEMBER(bt, inttype);
      switch (it->long_t)
	{
	case 0: kind = (it->signed_t ? yrpkshort : yrpkushort); break;
	case 1: kind = (it->signed_t ? yrpklong : yrpkulong); break;
	case 2: kind = yrpklonglong; break;
	}
      break;
    case ycttCharType: kind = yrpkchar; break;
    case ycttBooleanType: kind = yrpkboolean; break;
    case ycttOctetType: kind = yrpkoctet; break;
    case ycttAnyType: kind = yrpkany; break;
    case ycttTypeCodeType: kind = yrpkTypeCode; break;
    }

  return yrGetPrimitive(ctx->repository, kind);
}


/* ----------------------------------------------------------------------- */
/*
 * ycsRecursionErr - report an ill-formed recursive type reference
 *
 * Alas, struct and union fields do not carry source position information.
 * Closest we can come is to report the source position of the enclosing
 * type and the name of the field. Error message is of the form:
 *
 *   "Illegal recursive reference to type %s in field %s of %s".
 *
 * <taboo> is the type we're not supposed to reference, <err> is the
 * enclosing offending type, and <field> is the offending field name.
 */

STATICF void ycsRecursionErr( ycctx* ctx, yrobj* taboo, yrobj* err, 
	CONST char* field)
{
  ycln ln;
  char* name = yrGetAbsoluteName(taboo);

  ln.name = yrGetSrcName(err);
  ln.line = yrGetSrcLine(err);

  if ( taboo == err )	/* immediate field of taboo */
    ysRecord( YCMSG(79), YCERRSEV, YCERRLN(&ln), YSLSTR(name), 
              YSLSTR(field), YSLEND);
  else			/* field of some nested type inside taboo */
  {
    char* nestedName = yrGetAbsoluteName(err);
    ysRecord( YCMSG(80), YCERRSEV, YCERRLN(&ln), YSLSTR(name), 
              YSLSTR(field), YSLSTR(nestedName), YSLEND);
    ysmGlbFree( (dvoid*)nestedName);
  }
  ysmGlbFree( (dvoid*) name);
}


/* ----------------------------------------------------------------------- */
/*
 * ycsCheckRecursion - check for invalid recursive type references
 *
 * CORBA specs says: "The only permissible form of recursive type
 * specification is through the use of the sequence template type."
 * And a very trivial example follows.
 *
 * This is very vague, be we've chosen to take it to mean that only
 * a field of the enclosing struct or union type can be a sequence
 * of that type. It can be a sequence of sequences, but not an array
 * of sequences. It cannot be a nested type.
 *
 * All of the following are disallowed:
 *
 *   struct S
 *   {
 *     S f1;			(simple case: t)
 *     sequence<S> f2[10];	(array of sequence of t)
 *     S f3[5];			(array of t)
 *     struct T			(uses in nested declarations)
 *     {
 *       S tf1;
 *       sequence<S> tf2;
 *     } f4;
 *   };
 *
 * Restrictions apply equally to structs and unions, do not apply at
 * all to interfaces. Not a concern for any other types because only
 * interfaces, structs, and unions can contain full <type_spec>'s.
 *
 * Why do we do this check as a separate step? Because it is almost
 * impossible to do the nested type case as you go along: S is already
 * in the IFR (and must be to allow the legit recursive sequence case),
 * so they won't fail by virtue of referencing an undeclared name; but
 * since the nested types are in the same scope as S (not in S itself),
 * we can't compare the field types against the enclosing scope, either.
 * And of course, the nesting can be infinitely deep and we must check
 * them all.
 *
 * In an effort to short circuit things slightly, we keep a list of the
 * struct and union types we've already processed so we won't do them
 * again if they're used multiple times within a structure. The theory
 * is that the list will stay short enough to keep the linear list
 * search faster than reprocessing all the fields in most cases 
 * (especially if any of THOSE fields are structs, etc.).
 *
 * If a recursion error is found, the offending struct or union member
 * type is changed for error recovery purposes. This prevents us from
 * getting into trouble with constructs like:
 *
 *  struct outer
 *  {
 *    struct inner { inner error; };
 *  };
 *
 * Inner contains an illegal recursive reference to itself. We don't
 * want to get tangled up in this when checking outer (or doing anything
 * else), so we change it's type to long so it is innocuous.
 */

STATICF void ycsCheckRecursion( ycctx* ctx, yrobj* taboo, yrobj* type, 
	yslst* done)
{
  yrobj* p = (yrobj*)0;
  ysle* le = (ysle*)0;

  switch ( yrGetKind(type))
  {
    case yrdkStruct:
        /* have we already done this type? */
      for ( le = ysLstHead(done); le; le = ysLstNext(le))
	if ( (dvoid*)type == ysLstVal(le) )
	  break;
      if ( !le )	/* nope */
      {
	for (le = ysLstHead( yrStructData(type).mbrs); le; 
		le = ysLstNext(le))
	{
          yrstrmbr* mem = (yrstrmbr*) ysLstVal(le);
          if ( mem->type == taboo )
          {
            ycsRecursionErr( ctx, taboo, type, mem->name);
	    mem->type = yrGetPrimitive( yrGetRepository(type), yrpklong);
          }
          else if ( (type==taboo) && (yrGetKind(mem->type) == yrdkSequence) &&
          	(yrSeqData(mem->type).elmtype == taboo) )
            continue;		/* this is the only allowable case */
          else
          {
            yseTry
	      ycsCheckRecursion( ctx, taboo, mem->type, done);
            yseCatch( YC_EX_RECURSION)
            {
	      ycsRecursionErr( ctx, taboo, type, mem->name);
              mem->type = yrGetPrimitive( yrGetRepository(type), yrpklong);
            }
            yseEnd
          }
	}
	DISCARD ysLstEnq(done, (dvoid*)type);
      }      /* else, been there done that */
      break;

    case yrdkUnion:
        /* have we already done this type? */
      for ( le = ysLstHead(done); le; le = ysLstNext(le))
	if ( (dvoid*)type == ysLstVal(le) )
	  break;
      if ( !le )	/* nope */
      {
          /* can ignore discriminator type 'cause it is always scalar */
	for (le = ysLstHead( yrUnionData(type).arms); le; 
		le = ysLstNext(le))
	{
          yrunmbr* mem = (yrunmbr*) ysLstVal(le);
          if ( mem->type == taboo )
          {
            ycsRecursionErr( ctx, taboo, type, mem->name);
	    mem->type = yrGetPrimitive( yrGetRepository(type), yrpklong);
          }
          else if ( (type==taboo) && (yrGetKind(mem->type) == yrdkSequence) &&
          	(yrSeqData(mem->type).elmtype == taboo) )
            continue;		/* this is the only allowable case */
          else
          {
            yseTry
	      ycsCheckRecursion( ctx, taboo, mem->type, done);
            yseCatch( YC_EX_RECURSION)
            {
	      ycsRecursionErr( ctx, taboo, type, mem->name);
              mem->type = yrGetPrimitive( yrGetRepository(type), yrpklong);
            }
            yseEnd
          }
	}
	DISCARD ysLstEnq(done, (dvoid*)type);
      }      /* else, been there done that */
      break;

    case yrdkArray:
      for (p = yrArrayData(type).elmtype; yrGetKind(p) == yrdkArray;
	 p = yrArrayData(p).elmtype)
	 ;    /* do nothing - loop does it all */
      if ( p == taboo )
      {
        yseThrow( YC_EX_RECURSION);
      }
      else if ( yrGetKind(p) == yrdkSequence )
      {
	for (p = yrSeqData(type).elmtype; 
	      yrGetKind(p) == yrdkSequence;
	      p = yrSeqData(p).elmtype)
	   ;    /* do nothing - loop does it all */
	if ( p == taboo )	/* array of seq of recursive is unsupported */
	{
	  yseThrow( YC_EX_RECURSION);
	}
      }
      ycsCheckRecursion( ctx, taboo, p, done);
      break;

    case yrdkSequence:
      /* we will never hit this case for an immediate field */
      for (p = yrSeqData(type).elmtype; 
	    yrGetKind(p) == yrdkSequence;
	    p = yrSeqData(p).elmtype)
	 ;    /* do nothing - loop does it all */
      if ( p == taboo )
      {
	yseThrow( YC_EX_RECURSION);
      }
      /* else ok because elem type declarator for seq must be a simple declr*/
      break;
    default:
      break;
  }
}


/* ------------------------------------------------------------------------ */
/*
 * ycsValidateRecursion - top level of recursive type checker
 *
 * See comments under ycsCheckRecursion. This is the top level func
 * called from the semantic analysis functions.
 */

STATICF void ycsValidateRecursion( ycctx* ctx, yrobj* type)
{
  yslst* validated = (yslst*)0;

  switch ( yrGetKind(type))
  {
    case yrdkStruct:
    case yrdkUnion:
      validated = ysLstCreate();
      yseTry
	ycsCheckRecursion( ctx, type, type, validated);
      yseCatchAll
        /* Do nothing. Just gives us a way to pop out. */
      yseEnd
      ysLstDestroy( validated, (ysmff)0);
      break;
    default:
      break;
  }
  return;
}

