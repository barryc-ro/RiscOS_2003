/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yotkg.c - typecode generation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
#ifndef YOTK_ORACLE
#include <yotk.h>
#endif
#ifndef YOSX_ORACLE
#include <yosx.h>
#endif
#ifndef YR_ORACLE
#include <yr.h>
#endif
#ifndef YOTKI_ORACLE
#include <yotki.h>
#endif


STATICF yotk *yotkCreateObjRef(yrobj *type);
STATICF yotk *yotkCreateStruct(yrobj *type);
STATICF yotk *yotkCreateException(yrobj *type);
STATICF yotk *yotkCreateUnion(yrobj *type);
STATICF yotk *yotkCreateEnum(yrobj *type);
STATICF yotk *yotkCreateAlias(yrobj *type);
STATICF yotk *yotkCreateString(yrobj *type);
STATICF yotk *yotkCreateSequence(yrobj *type, yrobj *pstruct, sb4 offset);
STATICF yotk *yotkCreateArray(yrobj *type);

STATICF yotk *yotkCreateObjRef(yrobj *type)
{
  yrid *repid;
  char *name;
  yosx *x;
  yosxPos lpos, epos;
  yotk  *ntk;
  ub4 tklen;

  repid = type->repid;
  name = yrGetAbsoluteName(type);

  x = yosxEncode(YOTKG_SIZE,ysmGlbHeap());
  yosxPutNetUB4(x,yotkObjref);                                       /* kind */
  yosxAlign(x,4);                               /* align for length position */
  yosxGetPos(x,&lpos);
  yosxPutNetUB4(x,(ub4)0);                                   /* dummy length */
  yosxPutNetUB1(x,(ub1)0);                                        /* bytesex */
  yotkgPutStr(x,repid);                                     /* repository id */
  yotkgPutStr(x,name);                                               /* name */

  yosxGetPos(x,&epos);
  tklen = yosxGetLength(x,&epos,&lpos) - 4;                  /* length fixup */
  yosxPutNetUB4AtPos(x, &lpos, tklen);

  ntk = yotkgGenTk(ysmGlbHeap(),x);                   /* finish the typecode */

  ysmGlbFree((dvoid *)name);
  return ntk;
}

STATICF yotk *yotkCreateStruct(yrobj *type)
{
  yrid *repid;
  char *name;
  yosx *x;
  yosxPos lpos, epos;
  yslst *mbrs;
  ysle  *e;
  yotk  *ntk;
  yotk  *tk;
  yrobj *mbrtype;
  ub4 tklen;

  repid = type->repid;
  name = yrGetAbsoluteName(type);
  mbrs = type->data.sval.mbrs;
  
  x = yosxEncode(YOTKG_SIZE,ysmGlbHeap());
  yosxPutNetUB4(x,yotkStruct);                                       /* kind */
  yosxAlign(x,4);                               /* align for length position */
  yosxGetPos(x,&lpos);
  yosxPutNetUB4(x,(ub4)0);                                   /* dummy length */
  yosxPutNetUB1(x,(ub1)0);                                        /* bytesex */
  yotkgPutStr(x,repid);                                     /* repository id */
  yotkgPutStr(x,name);                                               /* name */

  if(mbrs)
  {
    yosxPutNetUB4(x,ysLstCount(mbrs));                       /* member count */
    for(e = ysLstHead(mbrs); e; e = ysLstNext(e))
    {
      yotkgPutStr(x,((yrstrmbr *)ysLstVal(e))->name);         /* member name */

      yosxAlign(x,4);
      mbrtype = ((yrstrmbr *)ysLstVal(e))->type; /* generate member typecode */
      if(mbrtype->tag == yrdkSequence)
      {
        sb4 offset;
        yosxPos p;

        yosxGetPos(x,&p);
        offset =  -((sb4)(yosxGetLength(x, &p, &lpos) + 4));
        tk = yotkCreateSequence(mbrtype,type,offset);
      }
      else
        tk = yotkCreateYrObj(mbrtype);

      yosxCopy(x,tk,yotkSize(tk));
      yotkFreeWaf(tk, (ysmff)ysmFGlbFree);
    }
  }
  else
    yosxPutNetUB4(x,(ub4)0);

  yosxGetPos(x,&epos);
  tklen = yosxGetLength(x,&epos,&lpos) - 4;                  /* length fixup */
  yosxPutNetUB4AtPos(x, &lpos, tklen);

  ntk = yotkgGenTk(ysmGlbHeap(),x);                   /* finish the typecode */

  ysmGlbFree((dvoid *)name);
  return ntk;
}

STATICF yotk *yotkCreateException(yrobj *type)
{
  yrid *repid;
  char *name;
  yosx *x;
  yosxPos lpos, epos;
  yslst *mbrs;
  ysle  *e;
  yotk  *ntk;
  yotk  *tk;
  yrobj *mbrtype;
  ub4    tklen;

  repid = type->repid;
  name = yrGetAbsoluteName(type);
  mbrs = type->data.sval.mbrs;
  
  x = yosxEncode(YOTKG_SIZE,ysmGlbHeap());
  yosxPutNetUB4(x,yotkExcept);                                       /* kind */
  yosxAlign(x,4);                               /* align for length position */
  yosxGetPos(x,&lpos);
  yosxPutNetUB4(x,(ub4)0);                                   /* dummy length */
  yosxPutNetUB1(x,(ub1)0);                                        /* bytesex */
  yotkgPutStr(x,repid);                                     /* repository id */
  yotkgPutStr(x,name);                                               /* name */
  if(mbrs)
  {
    yosxPutNetUB4(x,ysLstCount(mbrs));                       /* member count */
    for(e = ysLstHead(mbrs); e; e = ysLstNext(e))
    {
      yotkgPutStr(x,((yrstrmbr *)ysLstVal(e))->name);         /* member name */

      yosxAlign(x,4);
      mbrtype = ((yrstrmbr *)ysLstVal(e))->type; /* generate member typecode */
      if(mbrtype->tag == yrdkSequence)
      {
        sb4 offset;
        yosxPos p;

        yosxGetPos(x,&p);
        offset =  -((sb4)(yosxGetLength(x, &p, &lpos) + 4));
        tk = yotkCreateSequence(mbrtype,type,offset);
      }
      else
        tk = yotkCreateYrObj(mbrtype);

      yosxCopy(x,tk,yotkSize(tk));
      yotkFreeWaf(tk, (ysmff)ysmFGlbFree);
    }
  }
  else
    yosxPutNetUB4(x,(ub4)0);

  yosxGetPos(x,&epos);
  tklen = yosxGetLength(x,&epos,&lpos) - 4;                  /* length fixup */
  yosxPutNetUB4AtPos(x, &lpos, tklen);

  ntk = yotkgGenTk(ysmGlbHeap(),x);                   /* finish the typecode */

  ysmGlbFree((dvoid *)name);
  return ntk;
}

STATICF yotk *yotkCreateUnion(yrobj *type)
{
  yrid *repid;
  char *name;
  yotk *discrim, *tk, *ntk;
  yrunmbr *umbr;
  yslst *arms;
  ysle  *e;
  sb4    i;
  yosx *x;
  yosxPos lpos, epos;
  yosxPos dpos;
  ub4 tklen;
  ub4 disckind;

  
  repid = type->repid;
  name = yrGetAbsoluteName(type);
  discrim = yotkCreateYrObj(type->data.uval.disctype);
  arms = type->data.uval.arms;

  x = yosxEncode(YOTKG_SIZE,ysmGlbHeap());
  yosxPutNetUB4(x,yotkUnion);                                       /* kind */
  yosxAlign(x,4);                               /* align for length position */
  yosxGetPos(x,&lpos);
  yosxPutNetUB4(x,(ub4)0);                                   /* dummy length */
  yosxPutNetUB1(x,(ub1)0);                                        /* bytesex */
  yotkgPutStr(x,repid);                                     /* repository id */
  yotkgPutStr(x,name);                                               /* name */
  yosxAlign(x,4);
  yosxCopy(x,discrim,yotkSize(discrim));                          /* disc tk */
  yosxAlign(x,4);
  yosxGetPos(x,&dpos);                      /* get position of default index */
  yosxPutNetUB4(x,(ub4)-1);                                 /* default index */
  yosxPutNetUB4(x,ysLstCount(arms));                            /* arm count */
  disckind = yotkGetKind(yotkGetBaseType(discrim));
  for(e = ysLstHead(arms), i = 0; e; e = ysLstNext(e), i++)
  {
    umbr = (yrunmbr *)ysLstVal(e);

    /* lay down discrim value */
    switch(disckind)
    {
    case yotkShort:
      yosxPutNetUB2(x,(ub2) *((sb2 *) umbr->label._value));
      break;
    case yotkLong:
      yosxPutNetUB4(x,(ub4) *((sb4 *) umbr->label._value));
      break;
    case yotkUshort:
      yosxPutNetUB2(x,(ub2) *((ub2 *) umbr->label._value));
      break;
    case yotkEnum:
    case yotkUlong:
      yosxPutNetUB4(x,(ub4) *((ub4 *) umbr->label._value));
      break;
    case yotkBoolean:
      yosxPutNetUB1(x,(ub1) *((boolean *) umbr->label._value));
      break;
    case yotkChar:
      yosxPutNetUB1(x,(ub1) *((char *) umbr->label._value));
      break;
    default:
      yseThrow(YO_EX_BADCODE);
      break;
    }
    yotkgPutStr(x,umbr->name);                                   /* arm name */
    yosxAlign(x,4);                                          /* align for tc */
    tk = yotkCreateYrObj(umbr->type);
    yosxCopy(x,tk,yotkSize(tk));                                   /* arm tk */
    if(yotkGetKind(umbr->label._type) == yotkOctet)
      yosxPutNetUB4AtPos(x, &dpos, (ub4)i);
    yotkFreeWaf(tk, (ysmff)ysmFGlbFree);
  }

  yosxGetPos(x,&epos);
  tklen = yosxGetLength(x,&epos,&lpos) - 4;                  /* length fixup */
  yosxPutNetUB4AtPos(x, &lpos, tklen);

  ntk = yotkgGenTk(ysmGlbHeap(),x);                   /* finish the typecode */

  yotkFreeWaf(discrim, (ysmff)ysmFGlbFree);
  ysmGlbFree((dvoid *)name);

  return ntk;
}

STATICF yotk *yotkCreateEnum(yrobj *type)
{
  yrid *repid;
  char *name;
  yslst *mbrs;
  yotk *ntk;
  ysle *e;
  yosx *x;
  yosxPos lpos, epos;
  ub4 tklen;
  
  repid = type->repid;
  name = yrGetAbsoluteName(type);
  mbrs = type->data.eval.mbrs;

  x = yosxEncode(YOTKG_SIZE,ysmGlbHeap());
  yosxPutNetUB4(x,yotkEnum);                                         /* kind */
  yosxAlign(x,4);                               /* align for length position */
  yosxGetPos(x,&lpos);
  yosxPutNetUB4(x,(ub4)0);                                   /* dummy length */
  yosxPutNetUB1(x,(ub1)0);                                        /* bytesex */
  yotkgPutStr(x,repid);                                     /* repository id */
  yotkgPutStr(x,name);                                               /* name */
  yosxPutNetUB4(x,ysLstCount(mbrs));                         /* member count */
  for(e = ysLstHead(mbrs); e; e = ysLstNext(e))
    yotkgPutStr(x,((yrobj *)ysLstVal(e))->name);

  yosxGetPos(x,&epos);
  tklen = yosxGetLength(x,&epos,&lpos) - 4;                  /* length fixup */
  yosxPutNetUB4AtPos(x, &lpos, tklen);

  ntk = yotkgGenTk(ysmGlbHeap(),x);                   /* finish the typecode */

  ysmGlbFree((dvoid *)name);
  return ntk;
}

STATICF yotk *yotkCreateAlias(yrobj *type)
{
  yrid *repid;
  char *name;
  yotk *tk;
  yotk *ntk;
  yosx *x;
  yosxPos lpos, epos;
  ub4 tklen;
  
  repid = type->repid;
  name = yrGetAbsoluteName(type);
  tk = yotkCreateYrObj(type->data.aval.type);

  x = yosxEncode(YOTKG_SIZE,ysmGlbHeap());
  yosxPutNetUB4(x,yotkAlias);                                        /* kind */
  yosxAlign(x,4);                               /* align for length position */
  yosxGetPos(x,&lpos);
  yosxPutNetUB4(x,(ub4)0);                                   /* dummy length */
  yosxPutNetUB1(x,(ub1)0);                                        /* bytesex */
  yotkgPutStr(x,repid);                                     /* repository id */
  yotkgPutStr(x,name);                                               /* name */
  yosxAlign(x,4);
  yosxCopy(x,tk,yotkSize(tk));                                   /* typecode */

  yosxGetPos(x,&epos);
  tklen = yosxGetLength(x,&epos,&lpos) - 4;                  /* length fixup */
  yosxPutNetUB4AtPos(x, &lpos, tklen);

  ntk = yotkgGenTk(ysmGlbHeap(),x);                   /* finish the typecode */

  yotkFreeWaf(tk, (ysmff)ysmFGlbFree);
  ysmGlbFree((dvoid *)name);

  return ntk;
}

STATICF yotk *yotkCreateString(yrobj *type)
{
  ub4 bound = type->data.strval.bound;
  yotk *ntk;
  ub1 *buf;

  buf = (ub1 *)ysmGlbAlloc(8,"yotk");
  ntk = (yotk *) buf;
  
  sysxPutB4(buf,yotkString), buf += 4;
  sysxPutB4(buf,bound);

  return ntk;
}

STATICF yotk *yotkCreateSequence(yrobj *type, yrobj *pstruct, sb4 offset)
{
  ub4 bound;
  yrobj *elmtype;
  yotk *tk;
  yotk *ntk;
  yosx *x;
  yosxPos lpos, epos;
  ub4 tklen;

  bound = type->data.seqval.bound;
  elmtype = type->data.seqval.elmtype;
  offset -= 12;                 /* sizeof kind, length, bytesex, and padding */
  if(elmtype->tag == yrdkSequence)
    tk = yotkCreateSequence(elmtype,pstruct,offset);
  else if(elmtype == pstruct)
    tk = (yotk *) 0;
  else
    tk = yotkCreateYrObj(elmtype);

  x = yosxEncode(YOTKG_SIZE,ysmGlbHeap());
  yosxPutNetUB4(x,yotkSequence);                                     /* kind */
  yosxAlign(x,4);                               /* align for length position */
  yosxGetPos(x,&lpos);
  yosxPutNetUB4(x,(ub4)0);                                   /* dummy length */
  yosxPutNetUB1(x,(ub1)0);                                        /* bytesex */
  yosxAlign(x,4);
  if(tk)                                                         /* typecode */
    yosxCopy(x,tk,yotkSize(tk));
  else
  {
    yosxPutNetUB4(x,yotkRecurs);
    yosxPutNetUB4(x,(ub4)(offset-4));
  }
  yosxPutNetUB4(x,bound);                                  /* sequence bound */

  yosxGetPos(x,&epos);
  tklen = yosxGetLength(x,&epos,&lpos) - 4;                  /* length fixup */
  yosxPutNetUB4AtPos(x, &lpos, tklen);

  ntk = yotkgGenTk(ysmGlbHeap(),x);                   /* finish the typecode */

  if(tk)
    yotkFreeWaf(tk, (ysmff)ysmFGlbFree);

  return ntk;
}

STATICF yotk *yotkCreateArray(yrobj *type)
{
  ub4 length;
  yotk *tk;
  yotk *ntk;
  yosx *x;
  yosxPos lpos, epos;
  ub4 tklen;

  length = type->data.arrval.length;
  tk = yotkCreateYrObj(type->data.arrval.elmtype);

  x = yosxEncode(YOTKG_SIZE,ysmGlbHeap());
  yosxPutNetUB4(x,yotkArray);                                        /* kind */
  yosxAlign(x,4);                               /* align for length position */
  yosxGetPos(x,&lpos);
  yosxPutNetUB4(x,(ub4)0);                                   /* dummy length */
  yosxPutNetUB1(x,(ub1)0);                                        /* bytesex */
  yosxAlign(x,4);
  yosxCopy(x,tk,yotkSize(tk));                                   /* typecode */
  yosxPutNetUB4(x,length);

  yosxGetPos(x,&epos);
  tklen = yosxGetLength(x,&epos,&lpos) - 4;                  /* length fixup */
  yosxPutNetUB4AtPos(x, &lpos, tklen);

  ntk = yotkgGenTk(ysmGlbHeap(),x);                   /* finish the typecode */

  yotkFreeWaf(tk, (ysmff)ysmFGlbFree);
  return ntk;
}

yotk *yotkCreateYrObj(yrobj *type)
{
  yotk *tk = (yotk *)0;

  switch(type->tag)
  {
  case yrdkInterface:
    tk = yotkCreateObjRef(type);
    break;
  case yrdkAlias:
    tk = yotkCreateAlias(type);
    break;
  case yrdkStruct:
    tk = yotkCreateStruct(type);
    break;
  case yrdkException:
    tk = yotkCreateException(type);
    break;
  case yrdkUnion:
    tk = yotkCreateUnion(type);
    break;
  case yrdkEnum:
    tk = yotkCreateEnum(type);
    break;
  case yrdkString:
    tk = yotkCreateString(type);
    break;
  case yrdkSequence:
    tk = yotkCreateSequence(type,(yrobj *)0,(sb4)0);
    break;
  case yrdkArray:
    tk = yotkCreateArray(type);
    break;
  case yrdkPrimitive:
    switch(yrPrimData(type).kind)
    {
    case yrpknull:
      tk = (yotk *) yoTcNull;
      break;
    case yrpkvoid:
      tk = (yotk *) yoTcVoid;
      break;
    case yrpkshort:
      tk = (yotk *) yoTcShort;
      break;
    case yrpklong:
      tk = (yotk *) yoTcLong;
      break;
    case yrpkushort:
      tk = (yotk *) yoTcUshort;
      break;
    case yrpkulong:
      tk = (yotk *) yoTcUlong;
      break;
    case yrpkfloat:
      tk = (yotk *) yoTcFloat;
      break;
    case yrpkdouble:
      tk = (yotk *) yoTcDouble;
      break;
    case yrpkboolean:
      tk = (yotk *) yoTcBoolean;
      break;
    case yrpkchar:
      tk = (yotk *) yoTcChar;
      break;
    case yrpkoctet:
      tk = (yotk *) yoTcOctet;
      break;
    case yrpkany:
      tk = (yotk *) yoTcAny;
      break;
    case yrpkTypeCode:
      tk = (yotk *) yoTcTypeCode;
      break;
    case yrpkPrincipal:
      tk = (yotk *) yoTcPrincipal;
      break;
    case yrpkstring:
      tk = (yotk *) yoTcString;
      break;
    case yrpkobjref:
      tk = (yotk *) yoTcObject;
      break;
    case yrpklonglong:
      tk = (yotk *) yoTcLongLong;
      break;
    default:
      yseThrow(YO_EX_BADCODE);
      break;
    }
    break;
  default:
    yseThrow(YO_EX_BADCODE);
    break;
  }
  return tk;
}
