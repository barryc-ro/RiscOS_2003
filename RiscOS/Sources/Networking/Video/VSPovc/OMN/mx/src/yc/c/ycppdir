/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ycppdir.c - Directive Processing
 *
 * HISTORY
 * 04/12/96 kcoleman	Support for IAO server code gen pragmas, fixed some
 *                      bugs with #line directive
 * 04/09/96 kcoleman	ycppAccumPars used to crash on "#define(a b)",
 *                      compiler looped on "#define(a,b) ##b"
 * 04/08/96 kcoleman	Use ysRecord for error reporting.
 * 12/01/95 kcoleman	ycppUndef didn't catch undefs of predefined macros
 * 10/16/95 kcoleman	Support for #pragma ID, prefix, version for IFR
 * xx/xx/95 jolkin	Creation
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCPP_ORACLE
#include <ycpp.h>
#endif

/*
 * Directive Table
 */
static CONST char *CONST_W_PTR ycppDirTbl[] =
{
  "define",
  "elif",
  "else",
  "endif",
  "error",
  "if",
  "ifdef",
  "ifndef",
  "include",
  "line",
  "pragma",
  "undef"
};

STATICF yslst *ycppAccumPars(ycctx *ctx, ycmd *md, ycln *ln, sword pos);
STATICF void ycppReplace(ycctx *ctx, ycln *ln, ycmd *md, yslst *parnms);
STATICF void ycppLine(ycctx *ctx, ysle *elm, sword pos);
STATICF void ycppPragma(ycctx *ctx, ysle *elm, sword pos);
STATICF void ycppInclude(ycctx *ctx, ysle *elm, sword pos);

/*
 * ycppDirective - process a directive
 *   The given line contains a directive.  ycppDirective() will determine
 *   what the directive is and process it accordingly.  All directives
 *   remain in the original translation unit stream but are ignored by
 *   subsequent phases.
 */
void ycppDirective(ycctx *ctx, ysle *elm)
{
  sword dirid, pos;
  ycln *ln;

  ln = (ycln *) ysLstVal(elm);
  dirid = ycppDirIdent(ln->text, &pos);

  switch (dirid)
    {
    case YCDIR_INVALID: 
      ysRecord( YCMSG(16), YCERRSEV, YCERRLN(ln), YSLEND);
      break;
    case YCDIR_NONE: 
      break;
    case YCDIR_DEFINE: 
      ycppDefine(ctx, ln, pos); 
      break;
    case YCDIR_ELIF: 
      ysRecord( YCMSG(17), YCERRSEV, YCERRLN(ln), YSLSTR("#elif"), YSLEND);
      break;
    case YCDIR_ELSE: 
      ysRecord( YCMSG(17), YCERRSEV, YCERRLN(ln), YSLSTR("#else"), YSLEND);
      break;
    case YCDIR_ENDIF: 
      ysRecord( YCMSG(17), YCERRSEV, YCERRLN(ln), YSLSTR("#endif"), YSLEND);
      break;
    case YCDIR_ERROR:
      ysRecord( YCMSG(18), YCERRSEV, YCERRLN(ln), 
                YSLSTR(ysStrToText(ln->text) + pos), YSLEND);
      break;
    case YCDIR_IF:
    case YCDIR_IFDEF:
    case YCDIR_IFNDEF:
      ycppIf(ctx, elm, pos, dirid);
      break;
    case YCDIR_INCLUDE: 
      ycppInclude(ctx, elm, pos); 
      break;
    case YCDIR_LINE: 
      ycppLine(ctx, elm, pos); 
      break;
    case YCDIR_PRAGMA: 
      ycppPragma(ctx, elm, pos);
      break;
    case YCDIR_UNDEF: 
      ycppUndef(ctx, ln, pos); 
      break;
    default: 
      ysePanic(YS_EX_FAILURE); 
      break;
    }
}

/*
 * ycppDirIdent - identify the directive at the beginning of the line
 *   ycppDirIdent() returns a numeric identifier for the directive.
 *   *posp is set to the position following the directive in the line.
 */
sword ycppDirIdent(ysstr *txt, sword *posp)
{
  ysstr *dir;
  sword  sp, pos, i;
  char  *buf;
  size_t len, tbsz;

  buf = ysStrToText(txt);
  len = ysStrLen(txt);

  /* scan forward for #, skip it, then skip white space to directive */
  sp = ycSkipWS(txt, 0, (sword) len);
  sp = ycSkipWS(txt, sp + 1, (sword) len);

  /* if no directive, return */
  if (sp >= (sword)len)
    return YCDIR_NONE;

  /* extract directive */
  dir = ysStrCreate((char *) 0);
  for (pos = sp; pos < (sword)len && isalnum(buf[pos]); pos++)
    dir = ysStrApp(dir, buf[pos]);

  /* search for directive */
  tbsz = sizeof(ycppDirTbl) / sizeof(ycppDirTbl[0]);
  for (i = 0; i < (sword)tbsz && strcmp(ycppDirTbl[i], ysStrToText(dir)); i++)
    ;

  ysStrDestroy(dir);
  *posp = pos;

  return (i < (sword)tbsz ? i : YCDIR_INVALID);
}

/*
 * ycppDefine - define a macro
 *   ycppDefine() processes the define directive.  First, it gets the
 *   macro name.  Then, if the macro is already defined, it checks for
 *   equivalence.  Otherwise, if it is a function-like macro, the
 *   parameter list is accumulated.  Then, the replacement string is
 *   scanned for parameters, pasting operator and stringize operator.
 */
void ycppDefine(ycctx *ctx, ycln *ln, sword pos)
{
  char   *buf, *obuf;
  sword   i, opos, cls;
  ysstr  *id;
  ycmd   *md;
  boolean inpar;
  yslst  *pars;
  size_t  len, olen;

  /* get identifier */
  cls = ycppGetToken(ln, &pos, (sword *) 0, &id);
  if (cls != YCPP_IDENT)
  {
    if (id)
      ysStrDestroy(id);

    ysRecord( YCMSG(20), YCERRSEV, YCERRLN(ln), YSLSTR("#define"), YSLEND);
    return;
  }

  if (!strcmp(ysStrToText(id), "defined"))
  {
    ysRecord( YCMSG(39), YCERRSEV, YCERRLN(ln), YSLSTR(ysStrToText(id)), 
              YSLEND);
    ysStrDestroy(id);
    return;
  }

  /* search for duplicate macro definition */
  md = (ycmd *)
    ysHshFind(ctx->mdtbl, (dvoid *) ysStrToText(id), ysStrLen(id) + 1);

  buf = ysStrToText(ln->text);
  len = ysStrLen(ln->text);

  if (md)
    {
      ysStrDestroy(id);

      /* check for macro equivalence */
      obuf = ysStrToText(md->origln->text);
      olen = ysStrLen(md->origln->text);
      opos = md->opos;

      inpar = (buf[pos] == '(');
      while (opos < (sword)olen && pos < (sword)len)
	{
	  /* leading parenthesis does not have to be in the place */
	  if ((inpar && (isspace(obuf[opos]) || isspace(buf[pos]))) ||
	      (!inpar && isspace(obuf[opos]) && isspace(buf[pos])))
	    {
	      while (isspace(obuf[opos]))
		opos++;
	      while (isspace(buf[pos]))
		pos++;
	    }
	  else if (obuf[opos] != buf[pos])
	    break;
	  else
	    {
	      if (inpar && obuf[opos] == ')')
		inpar = FALSE;

	      opos++, pos++;
	    }
	}

      /* trailing white space is not distinct */
      if (opos == (sword)olen || pos == (sword)len)
	{
	  while (isspace(obuf[opos]))
	    opos++;
	  while (isspace(buf[pos]))
	    pos++;
	}

      if (opos < (sword)olen || pos < (sword)len)
        ysRecord( YCMSG(21), YCERRSEV, YCERRLN(ln), YSLSTR(md->name), 
                  YCERRLN(md->origln), YSLEND);
    }
  else
    {
      md = ycMdNew(ysStrToText(id), ln, pos);

      if (buf[pos] == '(')
	{
	  /* create new function-like macro definition */
	  pars = ycppAccumPars(ctx, md, ln, pos + 1);
	}
      else
	{
	  /* create new object-like macro definition */
	  pars = (yslst *) 0;
	  md->rpl = ysStrCreate(buf + pos);
	}

      if (md->rpl)
	{
	  /* remove leading and trailing spaces */
	  for (i = 0, buf = ysStrToText(md->rpl), len = ysStrLen(md->rpl);
	       i < (sword)len && isspace(buf[i]); i++) ;
	  md->rpl = ysStrDel(md->rpl, 0, i);

	  buf = ysStrToText(md->rpl);
	  len = ysStrLen(md->rpl);
	  for (i = (sword) len; i > 0 && isspace(buf[i-1]); i--) ;
	  md->rpl = ysStrDel(md->rpl, i, (sword) (len - i));

	  /* filter out parameters */
	  ycppReplace(ctx, ln, md, pars);
	  ysHshIns(ctx->mdtbl, (dvoid *) md->name, strlen(md->name) + 1,
		   (dvoid *) md);
	}
      else
	ycMdFree((dvoid *) md);

      if (pars)
	ysLstDestroy(pars, (ysmff) ysStrDestroy);
    }
}

/*
 * ycppAccumPars - accumulate parameters
 *   ycppAccumPars() accumulates parameters for a macro definition and
 *   returns an array of character strings containing those parameter
 *   names.  If there is an error in the parameter list, then a null
 *   pointer is returned.
 */
STATICF yslst *ycppAccumPars(ycctx *ctx, ycmd *md, ycln *ln, sword pos)
{
  yslst *pars;
  ysle  *scle1, *scle2;
  ysstr *parid;
  sword  i, j, cls, val;

  pars = ysLstCreate();

  /* collect parameters */
  cls = ycppGetToken(ln, &pos, &val, &parid);
  while (cls == YCPP_IDENT)
  {
    DISCARD ysLstEnq(pars, (dvoid *) parid);

    cls = ycppGetToken(ln, &pos, &val, (ysstr **) 0);
    if (cls == YCPP_PUNC && val == ',')
      cls = ycppGetToken(ln, &pos, &val, &parid);
    else
      break;    /* This is a syntax error. Will be caught immediately below */
  }

  if (cls != YCPP_PUNC || val != ')')
  {
    ysRecord( YCMSG(22), YCERRSEV, YCERRLN(ln), YSLEND);
    ysLstDestroy(pars, (ysmff) ysStrDestroy);
    return (yslst *) 0;
  }

  /* check for parameter uniqueness */
  md->pcnt = ysLstCount(pars);
  for (i = 0, scle1 = ysLstHead(pars); i < md->pcnt - 1;
       i++, scle1 = ysLstNext(scle1))
    for (j = i + 1, scle2 = ysLstNext(scle1); j < md->pcnt;
	 j++, scle2 = ysLstNext(scle2))
      if (!strcmp(ysStrToText((ysstr *) ysLstVal(scle1)),
		  ysStrToText((ysstr *) ysLstVal(scle2))))
	{
          ysRecord( YCMSG(23), YCERRSEV, YCERRLN(ln), 
                    YSLSTR(ysStrToText((ysstr *) ysLstVal(scle1))), YSLEND);
	  ysLstDestroy(pars, (ysmff) ysStrDestroy);
	  return (yslst *) 0;
	}

  /* now save the replacement sequence */
  md->rpl = ysStrCreate(ysStrToText(ln->text) + pos);
  return pars;
}

/*
 * ycppReplace - replace parameters in a macro
 *   ycppReplace() scans a macro replacement sequence for parameter
 *   substitution, the stringize operator and the pasting operator.
 *   The resulting replacement sequence has all this information removed
 *   from it.  The macro definition includes a list of paramater
 *   substitution instructions that must be followed during macro
 *   expansion.
 */
STATICF void ycppReplace(ycctx *ctx, ycln *ln, ycmd *md, yslst *parnms)
{
  sword   i, sp, op, cls, val;
  boolean stringize, concat, ok;
  ycpar  *par, *last;
  ysstr  *id, *origstr;
  ysle   *le;
  size_t  len;

  sp = 0;
  stringize = concat = ok = FALSE;
  last = (ycpar *) 0;

  origstr = ln->text;
  ln->text = md->rpl;

  /* loop over replacement sequence */
  op = sp;
  cls = ycppGetToken(ln, &sp, &val, &id);
  while (cls != YCPP_EOL)
  {
      /* reset our stringize and concat flags */
    if (cls != YCPP_IDENT)
    {
      if (stringize)
        ysRecord( YCMSG(24), YCERRSEV, YCERRLN(ln), YSLEND);

      stringize = concat = FALSE;
      if (id)
        ysStrDestroy(id);
    }

    if (cls != YCPP_PPPASTE)
      last = (ycpar *) 0;

    switch (cls)
    {
      case YCPP_PPPASTE:
        /* delete preceding space */
        if (!op && !ok)
          ysRecord( YCMSG(25), YCERRSEV, YCERRLN(ln), YSLEND);
        /* In all cases, skip over the op, else get stuck in loop on err */
        md->rpl = ysStrDel(md->rpl, op, sp - op);

        /* delete following space */
        len = ysStrLen(md->rpl);
        sp = ycSkipWS(md->rpl, op, (sword) len);
        if (sp == (sword)len)
            ysRecord( YCMSG(26), YCERRSEV, YCERRLN(ln), YSLEND);
        else
        {
          md->rpl = ysStrDel(md->rpl, op, sp - op);
          sp = op;
        }

        if (last)
          last->cmd =
            (last->cmd == YCPAR_NORM ? YCPAR_STRIPAFT : YCPAR_STRIPALL);

        last = (ycpar *) 0;
        concat = TRUE;
        break;
      case YCPP_PPPOUND:
        if ((stringize = (md->pcnt > 0)))
        {
          sp--;
          md->rpl = ysStrDel(md->rpl, sp, 1);
        }
        break;
      case YCPP_IDENT:
        /* check for match */
        if (parnms)
        {
          for (i = 0, le = ysLstHead(parnms); le; i++, le = ysLstNext(le))
          if (!strcmp(ysStrToText((ysstr *) ysLstVal(le)),
                    ysStrToText(id)))
            break;
        }
        else
          i = 0;

        ysStrDestroy(id);

        if (i < md->pcnt)
        {
            /* delete the parameter */
          op = ycSkipWS(ln->text, op, (sword) ysStrLen(ln->text));
          md->rpl = ysStrDel(md->rpl, op, sp - op);
          sp = op;

            /* create the substitution instruction */
          par = (ycpar *) ysmGlbAlloc(sizeof(ycpar), "ycpar");
          par->spos = sp;
          par->cmd = (stringize ? YCPAR_STR : YCPAR_NORM);
          par->argno = i;

          DISCARD ysLstEnq(md->pars, (dvoid *) par);

          if (par->cmd != YCPAR_STR)
          {
            if (concat)
              par->cmd = YCPAR_STRIPBEF;
            last = par;
          }

          ok = TRUE;
        }
        else if (stringize)
          ysRecord( YCMSG(24), YCERRSEV, YCERRLN(ln), YSLEND);

        stringize = concat = FALSE;
        break;
    }

    op = sp;
    cls = ycppGetToken(ln, &sp, &val, &id);
  }

  ln->text = origstr;
}

/*
 * ycppUndef - undef a macro
 */
void ycppUndef(ycctx *ctx, ycln *ln, sword pos)
{
  sword  cls;
  ysstr *id;
  dvoid *mdp;

  cls = ycppGetToken(ln, &pos, (sword *) 0, &id);
  if (cls != YCPP_IDENT)
    ysRecord( YCMSG(20), YCERRSEV, YCERRLN(ln), YSLSTR("#undef"), YSLEND);
  else
  {
    char* idstr = ysStrToText(id);

    if ( strcmp( idstr, "__FILE__") == 0 )
      ysRecord(YCMSG(86), YCERRSEV, YCERRLN(ln), YSLSTR("__FILE__"), YSLEND);
    else if ( strcmp( idstr, "__LINE__") == 0 )
      ysRecord(YCMSG(86), YCERRSEV, YCERRLN(ln), YSLSTR("__LINE__"), YSLEND);
    else if ( strcmp( idstr, "__DATE__") == 0 )
      ysRecord(YCMSG(86), YCERRSEV, YCERRLN(ln), YSLSTR("__DATE__"), YSLEND);
    else if ( strcmp( idstr, "__TIME__") == 0 )
      ysRecord(YCMSG(86), YCERRSEV, YCERRLN(ln), YSLSTR("__TIME__"), YSLEND);
    else if ( strcmp( idstr, "__STDC__") == 0 )
      ysRecord(YCMSG(86), YCERRSEV, YCERRLN(ln), YSLSTR("__STDC__"), YSLEND);
    else
    {
      mdp = ysHshRem(ctx->mdtbl, (dvoid *) idstr, ysStrLen(id) + 1);
      if (mdp)
        ycMdFree(mdp);
    }
  }

  if (id)
    ysStrDestroy(id);
}

/*
 * ycppLine - set the line number
 */
STATICF void ycppLine(ycctx *ctx, ysle *elm, sword pos)
{
  sword  val, op, cls, i;
  char  *buf;
  ysstr *nm, *num;
  ycln  *ln;
  size_t len;
  CONST char *fn;

  ln = (ycln *) ysLstVal(elm);

  op = pos;
  cls = ycppGetToken(ln, &pos, (sword *) 0, &num);
  if (cls != YCPP_NUM)
    {
      if (num)
	ysStrDestroy(num);

      /* expand possible macro */
      pos = op;
      ycppExpand(ctx, elm, pos, (sword) ysStrLen(ln->text), FALSE);
      ysLstDestroy(ctx->mdexp, ysmFGlbFree);
      ctx->mdexp = ysLstCreate();

      cls = ycppGetToken(ln, &pos, (sword *) 0, &num);
      if (cls != YCPP_NUM)
	{
          ysRecord( YCMSG(20), YCERRSEV, YCERRLN(ln), 
                    YSLSTR("#line"), YSLEND);
	  if (num)
	    ysStrDestroy(num);

	  return;
	}
    }

  /* get digit sequence */
  val = 0;
  for (i = 0, buf = ysStrToText(num), len = ysStrLen(num);
       i < (sword)len && isdigit(buf[i]); i++)
    val = val * 10 + (buf[i] - '0');
  ysStrDestroy(num);

  if (i < (sword)len)
    {
      ysRecord( YCMSG(20), YCERRSEV, YCERRLN(ln), YSLSTR("#line"), YSLEND);
      return;
    }

  /* check for possible file name change */
  cls = ycppGetToken(ln, &pos, (sword *) 0, &nm);
  if (cls == YCPP_STRING)
    cls = ycppGetToken(ln, &pos, (sword *) 0, (ysstr **) 0);

  /* ensure that there is nothing else on the line */
  if (cls != YCPP_EOL)
  {
    ysRecord( YCMSG(20), YCERRSEV, YCERRLN(ln), YSLSTR("#line"), YSLEND);
    if (nm)
      ysStrDestroy(nm);
    return;
  }

  /* now renumber all remaining lines up until the file changes */
  if ( nm )
    DISCARD ysLstEnq(ctx->nms, (dvoid *) nm);
  fn = ln->name;
  while ( (elm = ysLstNext(elm)) && 
           ((ln = (ycln*)ysLstVal(elm))->name == fn) )
  {
    ln->line = val++;
    if (nm)
      ln->name = ysStrToText(nm);
  }
}

/*
 * ycppInclude - include a file
 */
STATICF void ycppInclude(ycctx *ctx, ysle *elm, sword pos)
{
  size_t len;
  ycln  *ln;
  ysstr* nm;
  ysstr* noreg fullnm = (ysstr*)0;
  ysle  *le, *path;
  yslst *pathlst ,*tu;
  char  *buf, quote, result[SYSFP_MAX_PATHLEN];
  char* noreg errtxt;

  NOREG(fullnm);
  NOREG(errtxt);
  ln = (ycln *) ysLstVal(elm);

  len = ysStrLen(ln->text);
  buf = ysStrToText(ln->text);
  pos = ycSkipWS(ln->text, pos, (sword) len);

  if (buf[pos] != '"' && buf[pos] != '<')
  {
    /* expand possible macro */
    ycppExpand(ctx, elm, pos, (sword) len, FALSE);
    ysLstDestroy(ctx->mdexp, ysmFGlbFree);
    ctx->mdexp = ysLstCreate();

    len = ysStrLen(ln->text);
    buf = ysStrToText(ln->text);
    pos = ycSkipWS(ln->text, pos, (sword) len);

    if (buf[pos] != '"' && buf[pos] != '<')
    {
      ysRecord(YCMSG(20), YCERRSEV, YCERRLN(ln), YSLSTR("#include"), YSLEND);
      return;
    }
  }

  /* get file name */
  quote = (buf[pos] == '"' ? '"' : '>');
  pos++;
  nm = ysStrCreate((char *) 0);
  while (pos < (sword)len && buf[pos] != quote)
  {
    nm = ysStrApp(nm, buf[pos]);
    pos++;
  }

  if (buf[pos++] != quote)
  {
    ysRecord( YCMSG(20), YCERRSEV, YCERRLN(ln), YSLSTR("#include"), YSLEND);
    ysStrDestroy(nm);
    return;
  }

  /* ensure that there is nothing else on the line */
  if (ycppGetToken(ln, &pos, (sword *) 0, (ysstr **) 0) != YCPP_EOL)
  {
    ysRecord( YCMSG(20), YCERRSEV, YCERRLN(ln), YSLSTR("#include"), YSLEND);
    ysStrDestroy(nm);
    return;
  }

  /* check for nesting level */
  if (ln->lvl + 1 > YCPP_MAXNESTLVL)
  {
    ysRecord( YCMSG(27), YCERRSEV, YCERRLN(ln), YSLEND);
    ysStrDestroy(nm);
    return;
  }

  /* search for the file */
  tu = (yslst *) 0;
  errtxt = (char *) 0;
  if (quote == '"')
    {
      sysfpExtractPath(result, ln->name);
      sysfpForm(result, result, ysStrToText(nm), SYSFPKIND_TEXT);
      fullnm = ysStrCreate(result);
      yseTry
	tu = ycppRead(ctx, ysStrToText((ysstr*)fullnm), ln->lvl + 1);
      yseCatchObj(YC_EX_NOTFOUND, char *, tmp)
	ysStrDestroy((ysstr*)fullnm);
        errtxt = tmp;
      yseEnd
    }

  pathlst = ysResGet("mnidlc.preprocess.include");
  if (pathlst)
    for (path = ysLstHead(pathlst); path && !tu; path = ysLstNext(path))
      {
	sysfpForm(result, (char *) ysLstVal(path), ysStrToText(nm),
		  SYSFPKIND_TEXT);
	fullnm = ysStrCreate(result);
	yseTry
	  tu = ycppRead(ctx, ysStrToText((ysstr*)fullnm), ln->lvl + 1);
	yseCatchObj(YC_EX_NOTFOUND, char *, tmp)
	  ysStrDestroy((ysstr*)fullnm);
	  errtxt = tmp;
	yseEnd
      }

  /* append file if found */
  if (tu)
    {
      for (le = ysLstTail(tu); le; le = ysLstPrev(le))
	ysLstIns(ctx->tu, elm, ysLstVal(le));

      ysLstDestroy(tu, (ysmff) 0);
      DISCARD ysLstEnq(ctx->nms, (dvoid *) fullnm);
    }
  else if (errtxt)
    ysRecord( YCMSG(2), YCERRSEV, YCERRLN(ln), YSLSTR(ysStrToText(nm)), 
              YSLSTR((char*)errtxt), YSLEND);
  else
    ysRecord( YCMSG(28), YCERRSEV, YCERRLN(ln), YSLSTR(ysStrToText(nm)), 
              YSLEND);

  ysStrDestroy(nm);
}


/* ------------------------------------------------------------------------ */
/*
 * ycppPragma - Handle #pragma directives
 *
 * We recognized two classes of pragmas: the three IFR pragmas defined
 * by CORBA, and three pragmas for support IAO server code gen (see ycctmpl.c).
 *
 * IFR pragmas
 *   #pragma ID <name> <string>
 *   #pragma prefix <string>
 *   #pragma version <name> <major>.<minor>
 * IAO pragmas
 *   #pragma IAO_DB_ATTR <name> <string>
 *   #pragma IAO_DB_CREATE <name> {<par-name> <string>}, ...
 *
 * Because they are interpreted in the scope of the their lexical position,
 * they are not really handled by the pre-processor. Instead, we just make
 * sure the text will be passed along to the parser.
 */

STATICF void ycppPragma(ycctx *ctx, ysle* elm, sword pos)
{
  sword cls;
  ysstr *id = (ysstr*)0;
  ycln* ln = (ycln *) ysLstVal(elm);

    /* Expand any macros before considering the pragma */
  ycppExpand(ctx, elm, pos, (sword) ysStrLen(ln->text), FALSE);
  ysLstDestroy(ctx->mdexp, ysmFGlbFree);
  ctx->mdexp = ysLstCreate();

  cls = ycppGetToken(ln, &pos, (sword *) 0, &id);
  if (cls != YCPP_IDENT)
  {
    ysRecord( YCMSG(20), YCERRSEV, YCERRLN(ln), YSLSTR("#pragma"), YSLEND);
  }
  else
  {
    CONST char* pragmaName = ysStrToText(id);

    if ( (strcmp(pragmaName, "ID") == 0) ||
	(strcmp(pragmaName, "prefix") == 0) ||
	(strcmp(pragmaName, "version") == 0) ||
	(strcmp(pragmaName, "IAO_DB_ATTR") == 0) ||
	(strcmp(pragmaName, "IAO_DB_CREATE") == 0) ||
	(strcmp(pragmaName, "IAO_DB_LIST") == 0) )
    {
      ln->dir = FALSE;
    }
    else
      ysRecord(YCMSG(82), YCWARNSEV, YCERRLN(ln), YSLSTR(pragmaName), YSLEND);
  }
  if ( id )
    ysStrDestroy(id);
}
