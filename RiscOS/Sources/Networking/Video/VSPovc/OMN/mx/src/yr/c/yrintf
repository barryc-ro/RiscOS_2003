/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 *   yrintf.c - Implementation of CORBA::InterfaceDef
 *
 * NOTES
 *
 * HISTORY
 * 11/09/95 kcoleman    Creation
 */
 
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
 
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif

#ifndef YRCORBAI_H
#include <yrcorbaI.h>
#endif
 
#ifndef YR_ORACLE
#include <yr.h>
#endif
 
#ifndef YOORB_ORACLE
#include <yoorb.h>
#endif
 
#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif

#ifndef YRTYPIDL_IDL
#include <yrtypidl.h>
#endif
 
externdef ysidDecl(CORBA_InterfaceDef_implid) = "ORA_InterfaceDef";

/************************************************************************/
/* Interface CORBA::InterfaceDef */
/************************************************************************/
 
CORBA_Contained CORBA_InterfaceDef_lookup_i(
     CORBA_InterfaceDef or, yoenv* ev, CORBA_ScopedName search_name)
{
  return CORBA_Container_lookup_i( (CORBA_Container) or, ev, search_name);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_ContainedSeq CORBA_InterfaceDef_contents_i(
     CORBA_InterfaceDef or, yoenv* ev, CORBA_DefinitionKind limit_type,
     boolean exclude_inherited)
{
  return CORBA_Container_contents_i( (CORBA_Container) or, ev,
                                     limit_type,
                                     exclude_inherited);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_ContainedSeq CORBA_InterfaceDef_lookup_name_i(
     CORBA_InterfaceDef or, yoenv* ev, CORBA_Identifier search_name,
     sb4 levels_to_search, CORBA_DefinitionKind limit_type,
     boolean exclude_inherited)
{
  return CORBA_Container_lookup_name_i( (CORBA_Container) or, ev,
                                        search_name, levels_to_search,
                                        limit_type, exclude_inherited);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Container_DescriptionSeq CORBA_InterfaceDef_describe_contents_i(
     CORBA_InterfaceDef or, yoenv* ev, CORBA_DefinitionKind limit_type,
     boolean exclude_inherited, sb4 max_returned_objs)
{
  return CORBA_Container_describe_contents_i( (CORBA_Container) or, 
                                              ev, limit_type, 
                                              exclude_inherited,
                                              max_returned_objs);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Contained_Description CORBA_InterfaceDef_describe_i(
     CORBA_InterfaceDef or, yoenv* ev)
{
  CORBA_Contained_Description result;
  CORBA_InterfaceDescription* noreg desc = (CORBA_InterfaceDescription*)0;
  yotk* noreg tc = (yotk*) 0;
  yslst* bases;
  yrobj* obj;
 
  NOREG(desc);
  NOREG(tc);
  yseTry
  {
    CONST yotk* temp = YCTC_CORBA_InterfaceDescription;

    desc = (CORBA_InterfaceDescription*)
                yoAlloc( sizeof( CORBA_InterfaceDescription));
    CLRSTRUCT( *desc);
 
    desc->name = CORBA_InterfaceDef__get_name_i(or, ev);
    desc->id = CORBA_InterfaceDef__get_id_i( or, ev);
    desc->defined_in = CORBA_InterfaceDef__get_defined_in_i( or, ev);
    desc->version = CORBA_InterfaceDef__get_version_i( or, ev);
    yotkCopyVal( yoTcTypeCode, (dvoid*) &tc, (dvoid*) &temp, yoAlloc);
    obj = yrCORBAtoYR( (CORBA_IRObject)or);
    bases = yrInterfaceData(obj).bases;
    if ( bases && (ysLstCount(bases) > 0) )
    {
      ub4 nbase = ysLstCount(bases);
      ysle* le;
      CORBA_RepositoryId id;
      ub4 i;

      desc->base_interfaces._buffer = 
           (CORBA_RepositoryId*) yoAlloc( sizeof(CORBA_RepositoryId) * nbase);
      for ( i = 0, le = ysLstHead(bases); le; i++, le = ysLstNext(le))
      {
        id = yrGetRepId( (yrobj*) ysLstVal(le));
        desc->base_interfaces._buffer[i] = ysStrDupWaf( id, yoAlloc);
        desc->base_interfaces._length++;
      }
    } 
  }
  yseCatchAll
  {
    if ( desc )
    {
      if ( desc->name )
        yoFree( (dvoid*) desc->name);
      if ( desc->id )
        yoFree( (dvoid*) desc->id);
      if ( desc->defined_in )
        yoFree( (dvoid*) desc->defined_in);
      if ( desc->version )
        yoFree( (dvoid*) desc->version);
      if ( tc )
        yotkFreeVal( yoTcTypeCode, (dvoid*) &tc, yoFree);
      if ( desc->base_interfaces._buffer )
        CORBA_RepositoryIdSeq__free( &desc->base_interfaces, yoFree);
    }
    yseRethrow;
  }
  yseEnd

  result.kind = CORBA_dk_Interface;
  result.value._type = tc;
  result.value._value = desc;
  return result;
}
 
/* ---------------------------------------------------------------------- */
 
boolean CORBA_InterfaceDef_is_a_i(
     CORBA_InterfaceDef or, yoenv* ev, CORBA_RepositoryId interface_id)
{
  yrobj* isa;
  yrobj* obj = yrCORBAtoYR( (CORBA_IRObject) or);
  boolean answer;
 
  yseTry
  {
    isa = yrLookupId( yrGetRepository( obj), interface_id);
    answer = yrIsA( obj, isa);
  }
  yseCatchAll
  {
    answer = FALSE;
  }
  yseEnd
  return answer;
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_InterfaceDef_FullInterfaceDescription
   CORBA_InterfaceDef_describe_interface_i( CORBA_InterfaceDef or, yoenv* ev)
{
  CORBA_InterfaceDef_FullInterfaceDescription noreg result;
  CORBA_Contained_Description desc;
  yrobj* obj;
  yslst* ops;
  yslst* attrs;
  ysle* le;
  ub4 i;

  NOREG(result);
  CLRSTRUCT( result);
  desc = CORBA_InterfaceDef_describe_i( or, ev);
  result.name = ((CORBA_InterfaceDescription*)desc.value._value)->name;
  result.id = ((CORBA_InterfaceDescription*)desc.value._value)->id;
  result.defined_in = 
            ((CORBA_InterfaceDescription*)desc.value._value)->defined_in;
  result.version = ((CORBA_InterfaceDescription*)desc.value._value)->version;
  result.base_interfaces = 
            ((CORBA_InterfaceDescription*)desc.value._value)->base_interfaces;

  yotkFreeVal( yoTcTypeCode, &desc.value._type, yoFree);
  yoFree( (dvoid*) desc.value._value);
  obj = yrCORBAtoYR( (CORBA_IRObject)or);
  ops = yrInterfaceData(obj).ops;
  attrs = yrInterfaceData(obj).attrs;

  yseTry
  {
    if ( ops && (ysLstCount(ops) > 0) )
    {
      result.operations._buffer = (CORBA_OperationDescription*)
                yoAlloc( sizeof(CORBA_OperationDescription) * ysLstCount(ops));
      for ( i = 0, le = ysLstHead(ops); le; i++, le = ysLstNext(le))
      {
        yrobj* op = (yrobj*) ysLstVal(le);
  
        desc = CORBA_OperationDef_describe_i( 
                      (CORBA_OperationDef) yrYRtoCORBA(op), ev);
        
        result.operations._buffer[i] = 
                          *(CORBA_OperationDescription*) desc.value._value;
        yotkFreeVal( yoTcTypeCode, &desc.value._type, yoFree);
        yoFree( (dvoid*) desc.value._value);  /* the rest copied to result */
        result.operations._length++;
      }
    }

    if ( attrs && (ysLstCount(attrs) > 0) )
    {
      result.attributes._buffer = (CORBA_AttributeDescription*)
              yoAlloc( sizeof(CORBA_AttributeDescription) * ysLstCount(attrs));
      for ( i = 0, le = ysLstHead(attrs); le; i++, le = ysLstNext(le))
      {
        yrobj* attr = (yrobj*) ysLstVal(le);

        desc = CORBA_AttributeDef_describe_i( 
                        (CORBA_AttributeDef) yrYRtoCORBA(attr), ev);
        
        result.attributes._buffer[i] = 
                          *(CORBA_AttributeDescription*) desc.value._value;
        yotkFreeVal( yoTcTypeCode, &desc.value._type, yoFree);
        yoFree( (dvoid*) desc.value._value);  /* the rest copied to result */
        result.attributes._length++;
      }
    }

    result.type = CORBA_InterfaceDef__get_type_i( or, ev);
  }
  yseCatchAll
  {
    yoFree( result.name);
    yoFree( result.id);
    yoRelease( result.defined_in);
    yoFree( result.version);
    CORBA_ContainedSeq__free( 
             (CORBA_ContainedSeq*) &result.base_interfaces, yoFree);
    if ( result.operations._buffer )
      CORBA_OpDescriptionSeq__free( 
             (CORBA_OpDescriptionSeq*) &result.operations, yoFree);
    if ( result.attributes._buffer )
      CORBA_AttrDescriptionSeq__free( 
             (CORBA_AttrDescriptionSeq*) &result.attributes, yoFree);
    if ( result.type )
      yotkFreeVal( yoTcTypeCode, (dvoid*) &result.type, yoFree);
    yseRethrow;
  }
  yseEnd
 
  return result;
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_DefinitionKind CORBA_InterfaceDef__get_def_kind_i(
     CORBA_InterfaceDef or, yoenv* ev)
{
  return CORBA_IRObject__get_def_kind_i( (CORBA_IRObject) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_RepositoryId CORBA_InterfaceDef__get_id_i(
     CORBA_InterfaceDef or, yoenv* ev)
{
  return CORBA_Contained__get_id_i( (CORBA_Contained) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Identifier CORBA_InterfaceDef__get_name_i(
     CORBA_InterfaceDef or, yoenv* ev)
{
  return CORBA_Contained__get_name_i( (CORBA_Contained)or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_VersionSpec CORBA_InterfaceDef__get_version_i(
     CORBA_InterfaceDef or, yoenv* ev)
{
  return CORBA_Contained__get_version_i( (CORBA_Contained) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Container CORBA_InterfaceDef__get_defined_in_i(
     CORBA_InterfaceDef or, yoenv* ev)
{
  return CORBA_Contained__get_defined_in_i( (CORBA_Contained) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_ScopedName CORBA_InterfaceDef__get_absolute_name_i(
     CORBA_InterfaceDef or, yoenv* ev)
{
  return CORBA_Contained__get_absolute_name_i( (CORBA_Contained) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Repository CORBA_InterfaceDef__get_containing_repository_i(
     CORBA_InterfaceDef or, yoenv* ev)
{
  return CORBA_Contained__get_containing_repository_i((CORBA_Contained)or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
yotk* CORBA_InterfaceDef__get_type_i( CORBA_InterfaceDef or, yoenv* ev)
{
  return CORBA_IDLType__get_type_i( (CORBA_IDLType) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_InterfaceDefSeq CORBA_InterfaceDef__get_base_interfaces_i(
     CORBA_InterfaceDef or, yoenv* ev)
{
  yrobj* obj = yrCORBAtoYR( (CORBA_IRObject) or);
  CORBA_InterfaceDefSeq seq;
 
  yrObjListToSeq( yrInterfaceData(obj).bases, (yr_objseq*) &seq);
  return seq;
}
 
/* ---------------------------------------------------------------------- */
 
 
externdef struct CORBA_InterfaceDef__tyimpl CORBA_InterfaceDef__impl =
 {
  CORBA_InterfaceDef_is_a_i,
  CORBA_InterfaceDef_describe_interface_i,
  CORBA_InterfaceDef__get_base_interfaces_i,
  CORBA_InterfaceDef_lookup_i,
  CORBA_InterfaceDef_contents_i,
  CORBA_InterfaceDef_lookup_name_i,
  CORBA_InterfaceDef_describe_contents_i,
  CORBA_InterfaceDef__get_def_kind_i,
  CORBA_InterfaceDef_describe_i,
  CORBA_InterfaceDef__get_id_i,
  CORBA_InterfaceDef__get_name_i,
  CORBA_InterfaceDef__get_version_i,
  CORBA_InterfaceDef__get_defined_in_i,
  CORBA_InterfaceDef__get_absolute_name_i,
  CORBA_InterfaceDef__get_containing_repository_i,
  CORBA_InterfaceDef__get_type_i
 };


/* ---------------------------------------------------------------------- */

void Init_CORBA_InterfaceDef()
{
  YR_SET_IMPL(CORBA_InterfaceDef, FALSE, 0);
  YR_IMPL_READY(CORBA_InterfaceDef, 0);
}

void Term_CORBA_InterfaceDef()
{
  YR_IMPL_DEACTIVATE(CORBA_InterfaceDef);
}
