/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 * yrdump.c - Tracing operations for the repository. For debugging the IFR.
 *
 * NOTES
 * VERY primitive at the moment. YrDump just spills some superficial
 * info on an object, like name and repository id.
 *
 * HISTORY
 * 04/22/96 kcoleman	Change tracing attr from boolean to integer level.
 * 02/02/96 kcoleman	Repository now keeps anon types on a separate list
 * 10/23/95 kcoleman	Creation
 */
#ifndef SYSX_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YR_ORACLE
#include <yr.h>
#endif
#ifndef YR0_ORACLE
#include <yr0.h>
#endif


/* ----------------------------------------------------------------------- */
/*
 * yrSetTraceLevel - turn on tracing to cause automatic dumps of
 *   repository objects.
 */
void yrSetTraceLevel( yrobj* repository, sword lvl)
{
  yrRepData(repository->repository)->trace = lvl;
}


/* ----------------------------------------------------------------------- */
/*
 * yrDumpHdr - spill tracing info common to all named entities, like name.
 */
STATICF void yrDumpHdr( yrobj* obj, CONST char* kind)
{
  yslPrint("IFR: kind=%s, name=\"%s\", id=\"%s\"\n",
	   kind, yrGetAbsoluteName( obj), obj->repid);
  yslPrint("IFR:\tsrc=\"%s\", line=%d\n",
	   obj->srcnm ? obj->srcnm : "<unknown>", yrGetSrcLine(obj));
}


/* ----------------------------------------------------------------------- */
/*
 * yrDump - Dump info about a repository object. This is still a pretty
 * primitive operation. It is only for debugging - there are no calls
 * in the code normally.
 */
void yrDump( yrobj* obj)
{
  ysle* le;
  char* nm;

  switch ( yrGetKind(obj) )
  {
    case yrdkRepository:
    {
      yslPrint("IFR: kind=Repository, seqnum=%s, trace=%d, #items=%d, #anon=%d\n",
               yrRepData(obj)->seqnum, 
               yrRepData(obj)->trace,
               ysLstCount(obj->contents),
               ysLstCount(yrRepData(obj)->anon));
      break;
    }
    case yrdkAttribute:
    {
      yrDumpHdr(obj, "Attribute");
      yslPrint("IFR:\treadonly=%s\n", yrAttrData(obj).mode ? "TRUE" : "FALSE");
      nm = yrGetAbsoluteName( yrAttrData(obj).type);
      yslPrint("IFR:\ttype=\"%s\"\n", nm);
      ysmGlbFree((dvoid*) nm);
      break;
    }
    case yrdkConstant:
    {
      yrDumpHdr(obj, "Constant");
      nm = yrGetAbsoluteName( yrConstData(obj).type);
      yslPrint("IFR:\ttype: \"%s\"\n", nm);
      ysmGlbFree((dvoid*) nm);
      break;
    }
    case yrdkException:
    {
      yrDumpHdr(obj, "Exception");
      if ( yrStructData(obj).mbrs )
      {
        yslPrint("IFR:\tfields=%d\n", ysLstCount( yrStructData(obj).mbrs));
        for ( le = ysLstHead(yrStructData(obj).mbrs); le; le = ysLstNext(le))
        {
          yrstrmbr* m = (yrstrmbr*) ysLstVal(le);

          nm = yrGetAbsoluteName(m->type);
          yslPrint("IFR:\tField '%s' of type \"%s\"\n", m->name, nm);
          ysmGlbFree((dvoid*)nm);
        }
      }
      else
        yslPrint("IFR:\tfields=none\n");
      break;
    }
    case yrdkInterface:
    {
      yrDumpHdr(obj, "Interface");
      yslPrint("IFR:\tDefined=%s, #Ops=%d, #Attrs=%d\n", 
            yrInterfaceData(obj).defined ? "TRUE" : "FALSE", 
            yrInterfaceData(obj).ops ? ysLstCount(yrInterfaceData(obj).ops)
                                     : 0,
            yrInterfaceData(obj).attrs ? ysLstCount(yrInterfaceData(obj).attrs)
                                     : 0);
      if ( yrInterfaceData(obj).bases )
      {
        yslPrint("IFR:\tInheritance Spec: ");
        for (le = ysLstHead(yrInterfaceData(obj).bases); le; le=ysLstNext(le))
          yslPrint("%s ", yrGetAbsoluteName((yrobj*) ysLstVal(le)));
        yslPrint("\n");
      }
      for ( le = ysLstHead( obj->contents); le; le = ysLstNext(le))
        yrDump( (yrobj*) ysLstVal(le));
      break;
    }
    case yrdkModule:
    {
      yrDumpHdr(obj, "Module");
      yslPrint("IFR:\t#Decls=%d\n", ysLstCount(obj->contents));
      for ( le = ysLstHead( obj->contents); le; le = ysLstNext(le))
        yrDump( (yrobj*) ysLstVal(le));
      break;
    }
    case yrdkOperation:
    {
      yrDumpHdr(obj, "Operation");
      yslPrint("IFR:\toneway=%s\n", yrOpData(obj).mode ? "TRUE" : "FALSE");
      break;
    }
    case yrdkAlias:
    {
      yrDumpHdr(obj, "Alias");
      nm = yrGetAbsoluteName( yrAliasData(obj).type);
      yslPrint("\tBase type: %s\n", nm);
      ysmGlbFree((dvoid*)nm);
      break;
    }
    case yrdkStruct:
    {
      yrDumpHdr(obj, "Struct");
      yslPrint("IFR:\tfields=%d\n", ysLstCount( yrStructData(obj).mbrs));
      for ( le = ysLstHead(yrStructData(obj).mbrs); le; le = ysLstNext(le))
      {
        yrstrmbr* m = (yrstrmbr*) ysLstVal(le);

        nm = yrGetAbsoluteName(m->type);
        yslPrint("IFR:\tField '%s' of type \"%s\"\n", m->name, nm);
        ysmGlbFree((dvoid*)nm);
      }
      break;
    }
    case yrdkUnion:
    {
      yrDumpHdr(obj, "Union");
      yslPrint("IFR:\tfields=%d\n", ysLstCount( yrUnionData(obj).arms));
      break;
    }
    case yrdkEnum:
    {
      yrDumpHdr(obj, "Enum");
      break;
    }
    default:
      break;
  }
}

