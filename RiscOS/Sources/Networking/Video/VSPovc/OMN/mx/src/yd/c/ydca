/* Copyright (c) Oracle Corporation 1996.  All Rights Reserved. */

/*
  NAME
    ydca.c
  DESCRIPTION
    yd claim/abandon - native serialization/lock interface for the ORB.

    This implements a distributed database of exclusivly owned "properties",
    which is replicated among the orbds using a two-phase commit protocol.
    When there is a conflict in the first phase of a claim on the same
    property, a winner is selected and he is told he should back out and
    retry.  The loser is told to back out and go away.

    The major complications arise from the need to be non-blocking.  As
    a result, work is done in asynchronous state machines, with results
    sent back to the clients via a "reply" object.

  PUBLIC FUNCTIONS

    ydcaInit()
    ydcaTerm()
    ydcaSetInactiveHandler();
    ydcaStakeFor();
    ydcaAbandonFor();
    ydcaTransfer();
    ydcaTryStake();
    ydcaTransferStake();
    ydcaCommitStake();
    ydcaAbortStake();
    ydcaListNext();
    
  PRIVATE FUNCTIONS

    ydcaStartMachine()
    ydcaKillMachine()
    ydcaMachine()
    ydcaDeath()

  NOTES

    Beware of any tree-shape manipulation in the ydcaMachine; there may be
    multiple machines active in different threads.

  MODIFIED   (MM/DD/YY)
    
    dbrower   05/22/96 - created.
    dbrower   06/14/96 - add transfer support, make kill work.
    dbrower   06/28/96 - convert to use yoevts.
*/

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YDCA_ORACLE
#include <ydca.h>
#endif
#ifndef YSSP_ORACLE
#include <yssp.h>
#endif
#ifndef YOTK_ORACLE
#include <yotk.h>
#endif
#ifndef YOYD_ORACLE
#include <yoyd.h>
#endif
#ifndef YDU_ORACLE
#include <ydu.h>
#endif
#ifndef YSLOG_ORACLE
#include <yslog.h>
#endif


/* PRIVATE TYPES AND CONSTANTS */

#define YDCA_FAC    "YDCA"

externdef ysidDecl( YDCA_EX_BADOP ) = "ydca::badOp"; 
externdef ysidDecl( YDCA_EX_INTERNAL ) = "ydca::internal";

externdef ysmtagDecl(ydcacx_tag) = "ydcacx";
externdef ysmtagDecl(ydcap_tag) = "ydcap";
externdef ysmtagDecl(ydcar_tag) = "ydcar";

/* property node */
typedef struct
{
  ysspNode	node_ydcap;	/* key points to claim.property */
  yort_claim	claim_ydcap;
  enum { try_ydcap, granted_ydcap } state_ydcap;
  ysevt		*evt_ydcap;	/* deathwatch event */
  ydcacx	*cx_ydcap;	/* pointer back to context */
} ydcap;

/* enum of operations pending in the machine */
typedef enum
{
  tryStart_ydcar,		/* start try at head */
  try_ydcar,			/* grant try */
  commit_ydcar,			/* commit try to make granted */
  abandonStart_ydcar,		/* start abandon at head */
  abandon_ydcar,		/* give up try or grant */
  transferStart_ydcar,		/* start transfer at head */
  transfer_ydcar,		/* try transfer */
  exit_ydcar			/* shutdown machine */
} optype_ydcar;

/* request (machine) state block */
typedef struct
{
  optype_ydcar	op_ydcar;	/* operation in progress */
  optype_ydcar	sop_ydcar;	/* start operation */
  yort_claim	claim_ydcar;	/* claim being made */
  boolean	retry_ydcar;	/* in a retry? */
  yslst	    *orbds_ydcar;	/* orbds to consider */
  ysle	    *e_ydcar;		/* current orbd */
  ysle	    *lte_ydcar;		/* last obtained try */
  yoevt	    reply_ydcar;	/* where to reply */
  yoenv	    ev_ydcar;		/* call environment */
  ysle	    *le_ydcar;		/* self in list */
  ydcacx    *cx_ydcar;
  ysevt	    *evt_ydcar;		/* pending kept event */
    
} ydcar ;

/* ydca context */

struct ydcacx
{
  ysspTree  t_ydcacx;		/* my tree of ydcap property claims,
				   keyed on property string. */
  yslst	    *l_ydcacx;		/* my list of active request machines */
  ysque	    *q_ydcacx;		/* queue to use for events. */
  ysevt	    *ievt_ydcacx;	/* inactive event to trigger */
};

/* PRIVATE FUNCTION DECLARATIONS */

STATICF CONST char *ydcaPropState( ydcap *cap );
STATICF CONST char *ydcaOper( optype_ydcar op );
STATICF CONST char *ydcaTryResult( ydim_tryResult try );

STATICF void ydcaStartMachine( ydcacx *cx, optype_ydcar op,
			      yort_claim *claim, yoevt reply );

STATICF void ydcaKillMachine( dvoid *x );

STATICF void ydcaMachine( dvoid *usrp, CONST ysid *exid,
			 dvoid *arg, size_t argsz );

STATICF void ydcaDeath( dvoid *usrp, CONST ysid *exid,
		       dvoid *arg, size_t argsz );

/* PUBLIC FUNCTIONS */

ydcacx *ydcaInit( ysque *q )
{
  ydcacx *cx = (ydcacx*)ysmGlbAlloc( sizeof( *cx ), ydcacx_tag );

  DISCARD ysspNewTree( &cx->t_ydcacx, (ysspCmpFunc)strcmp );
  cx->l_ydcacx = ysLstCreate();
  cx->q_ydcacx = q;
  cx->ievt_ydcacx = (ysevt*)0;

  /* 1202, "ydcaInit:  claim/abandon ready to use",  */
  ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1202, YSLSEV_INFO, (char*)0, YSLNONE);

  return( cx );
}

void ydcaTerm( ydcacx *cx )
{
  ydcap *cap;
  ysspNode *n;

  /* first, kill any outstanding machines */
  ysLstDestroy( cx->l_ydcacx, ydcaKillMachine );

  /* then toss our tree */
  while( (n = ysspDeqTree( &cx->t_ydcacx ) ) )
  {
    cap = (ydcap*)n;
    yort_claim__free( &cap->claim_ydcap, yotkFreeStr );

    /* kill deathwatch */
    ysEvtDestroy( cap->evt_ydcap );

    ysmGlbFree( (dvoid*)n );
  }
  ysmGlbFree( (dvoid*)cx );

  /* 1203, "ydcaInit:  claim/abandon shut down",  */
  ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1203, YSLSEV_INFO, (char*)0, YSLNONE);

}

void ydcaSetInactiveEvt( ydcacx *cx, ysevt *evt )
{
  if( !ysLstCount( cx->l_ydcacx ) )
    ysTrigger( evt, (ysid*)0, (dvoid*)0, (size_t)0 );
  else
  {
    /* 1201, "ydcaSetInactiveEvt:  wait for %d to become inactive",  */
    ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1201, YSLSEV_INFO, (char*)0,
	     YSLSB4( ysLstCount( cx->l_ydcacx )), YSLEND);
    cx->ievt_ydcacx = evt;
  }
}

/* ---------------------------------------------------------------- */
/* semi-public methods, invoked from _i routines. */
/* ---------------------------------------------------------------- */

void ydcaStakeFor( ydcacx *cx, yort_claim *claim, yoevt reply )
{
  /* 1204, "ydcaStakeFor:  property %s", */
  ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1204, YSLSEV_INFO, (char*)0,
	     YSLSTR( claim->property ), YSLEND);

  ydcaStartMachine( cx, tryStart_ydcar, claim, reply ); 
}


/* this does owner checking, if not proxy; see ydcaAbortStake to contrast */
void ydcaAbandonFor( ydcacx *cx, yort_claim *claim, boolean proxy )
{
  ysspNode *n;
  ydcap *cap;
  ydyo_notOwner exv;

  /* 1205, "ydcaAbandonFor:  property %s", */
  ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1205, YSLSEV_INFO, (char*)0,
	     YSLSTR( claim->property ), YSLEND);

  if( !proxy && (n = ysspLookup( (dvoid*)claim->property, &cx->t_ydcacx ) ) )
  {
    cap = (ydcap*)n;
    if( !yoIsEq( (dvoid*)cap->claim_ydcap.owner, (dvoid*)claim->owner ) )
    {
      exv.realOwner = (yort_proc)yoDuplicate((dvoid*)cap->claim_ydcap.owner);
      yseThrowObj( YDYO_EX_NOTOWNER, exv );
    }
  }

  ydcaStartMachine( cx, abandonStart_ydcar, claim, (yoevt)0 );
}


void ydcaTransfer( ydcacx *cx, yort_claim* newClaim)
{
  ysspNode *n;
  ydcap *cap;

  /* 1206, "ydcaTransfer:  property %s", */
  ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1206, YSLSEV_INFO, (char*)0,
	     YSLSTR( newClaim->property ), YSLEND);

  if( (n = ysspLookup( (dvoid*)newClaim->property, &cx->t_ydcacx ) ) )
  {
    cap = (ydcap*)n;
    /* if same stuff, do nothing */
    if(!yoIsEq( (dvoid*)cap->claim_ydcap.obj, (dvoid*)newClaim->obj ) ||
       !yoIsEq( (dvoid*)cap->claim_ydcap.owner, (dvoid*)newClaim->owner ))
      ydcaStartMachine( cx, transferStart_ydcar, newClaim, (yoevt)0);
  }
}

/* ---------------------------------------------------------------- */
/* internal to orbd, invoked from (remote) ydcaMachine */
/* ---------------------------------------------------------------- */


ydim_tryResult ydcaTryStake( ydcacx *cx, yort_claim *what )
{
  ysspNode *n;
  ydcap *cap;
  char *r1, *r2;
  ydim_tryResult rv;

  /* 1207, "ydcaTryStake:  property %s", */
  ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1207, YSLSEV_INFO, (char*)0,
	     YSLSTR( what->property ), YSLEND);

  if( !(n = ysspLookup( (dvoid*)what->property, &cx->t_ydcacx ) ) )
  {
    /* No one has it.  Create it as an in-progress-try */

    cap = (ydcap*)ysmGlbAlloc( sizeof( *cap ), ydcap_tag );
    yort_claim__copy( &cap->claim_ydcap, what, yotkAllocStr );
    cap->state_ydcap = try_ydcap;
    cap->cx_ydcap = cx;
    cap->node_ydcap.key_ysspNode = (dvoid*)cap->claim_ydcap.property;
    DISCARD ysspEnq( &cap->node_ydcap, &cx->t_ydcacx );

    /* start deathwatch.  Must keep evt to be able to cancel */
    cap->evt_ydcap = ysEvtCreate( ydcaDeath, (dvoid*)cap, cx->q_ydcacx, TRUE );
    yoWatchOwner( (dvoid*)what->owner, cap->evt_ydcap );
    rv = ydim_success_tryResult;
  }
  else				/* already on record. */
  {
    cap = (ydcap*)n;
    rv = ydim_fail_tryResult;

    /* up against another try */
    if( cap->state_ydcap == try_ydcap )
    {
      /* if we should win, tell caller to retry. */
      r1 = yoRefToStr( (dvoid*)what->owner );
      r2 = yoRefToStr( (dvoid*)cap->claim_ydcap.owner );
      if( strcmp( r1, r2 ) < 0 )
	rv = ydim_retry_tryResult;
      yoFree( (dvoid*)r1 );
      yoFree( (dvoid*)r2 );
    }
  }
  return rv;
}

ydim_tryResult ydcaTransferStake( ydcacx *cx, yort_claim *what )
{
  ydim_tryResult rv = ydim_fail_tryResult;
  ydcap *cap;

  /* 1208, "ydcaTransferStake:  property %s", */
  ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1208, YSLSEV_INFO, (char*)0,
	     YSLSTR( what->property ), YSLEND);

  /* modify existing claim, or error */
  if( (cap = (ydcap*)ysspLookup( (dvoid*)what->property, &cx->t_ydcacx ) ) )
  {
    /* ... if it was granted. */
    if( cap->state_ydcap == granted_ydcap )
    {
      /* cancel old deathwatch */
      ysEvtDestroy( cap->evt_ydcap );

      /* free old vals */
      yoRelease( (dvoid*)cap->claim_ydcap.owner );
      yoRelease( (dvoid*)cap->claim_ydcap.obj );

      /* install new vals and deathwatch */
      cap->claim_ydcap.owner = (yort_proc)yoDuplicate((dvoid*)what->owner); 
      cap->claim_ydcap.obj = (CORBA_Object)yoDuplicate((dvoid*)what->obj); 
      cap->state_ydcap = try_ydcap;
      cap->evt_ydcap = ysEvtCreate( ydcaDeath, (dvoid*)cap,
				   cx->q_ydcacx, TRUE );
      yoWatchOwner( (dvoid*)cap->claim_ydcap.owner, cap->evt_ydcap );
      rv = ydim_success_tryResult;
    }
  }
  return( rv );
}


/* this one just does it, no owner check. */
void ydcaAbortStake( ydcacx *cx, yort_claim *what )
{
  ysspNode *n;
  ydcap *cap;

  /* 1209, "ydcaAbortStake:  property %s", */
  ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1209, YSLSEV_INFO, (char*)0,
	     YSLSTR( what->property ), YSLEND);

  if( (n = ysspLookup( (dvoid*)what->property, &cx->t_ydcacx ) ) )
  {
    cap = (ydcap*)n;
    ysEvtDestroy( cap->evt_ydcap );

    ysspRemove( n, &cx->t_ydcacx );
    yort_claim__free( &cap->claim_ydcap, yotkFreeStr );
    ysmGlbFree( (dvoid*)n );
  }
}


void ydcaCommitStake( ydcacx *cx, yort_claim *what )
{
  ysspNode *n;
  ydcap *cap;

  /* 1210, "ydcaCommitStake:  property %s", */
  ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1210, YSLSEV_INFO, (char*)0,
	     YSLSTR( what->property ), YSLEND);

  if( (n = ysspLookup( (dvoid*)what->property, &cx->t_ydcacx ) ) )
  {
    cap = (ydcap*)n;
    if( cap->state_ydcap == try_ydcap )
    {
      cap->state_ydcap = granted_ydcap;
    }
    else
    {
      /* 1220, "ydcaCommitStake:  bad state %d", */
      ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1220, YSLSEV_ERR, (char*)0,
	       YSLSB4( (sb4)cap->state_ydcap ), YSLEND);
      ysePanic( YDCA_EX_INTERNAL );
    }
  }
  else
  {
    /* EMPTY */;
    /* do nothing, gracefully */ 
  }
}

yort_claim *ydcaListNext( ydcacx *cx, yort_claim *this )
{
  ysspNode *n;
  ydcap *cap;

  if( this ) n = ysspNextLookup( (dvoid*)this->property, &cx->t_ydcacx );
  else n = ysspFHead( &cx->t_ydcacx );

  /* skip to a granted claim */
  /* ASSIGNOK */
  while( (cap = (ydcap*)n) && cap->state_ydcap != granted_ydcap )
    n = ysspFNext( n );

  /* 1211, "ydcaListNext:  next of property %s is %s", */
  ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1211, YSLSEV_INFO, (char*)0,
	   YSLSTR( this ? this->property : "<null>" ),
	   YSLSTR( cap ? cap->claim_ydcap.property : "<null>"),
	   YSLEND);

  return( cap ? &cap->claim_ydcap : (yort_claim*)0 );
}


/* ---------------------------------------------------------------- */
/* PRIVATE FUNCTIONS */
/* ---------------------------------------------------------------- */

STATICF CONST char *ydcaPropState( ydcap *cap )
{
  CONST char *rv;
  switch( cap->state_ydcap )
  {
  case try_ydcap:   rv = "try"; break;
  case granted_ydcap:   rv = "granted"; break;
  default: rv = "unknown"; break;
  }
  return rv;
}

STATICF CONST char *ydcaOper( optype_ydcar op )
{
  CONST char *rv;
  switch( op )
  {
  case tryStart_ydcar:	    rv = "tryStart"; break;
  case try_ydcar:	    rv = "try"; break;
  case commit_ydcar:	    rv = "commit"; break;
  case abandonStart_ydcar:  rv = "abandonStart"; break;
  case abandon_ydcar:	    rv = "abandon"; break;
  case transferStart_ydcar: rv = "transferStart"; break;
  case transfer_ydcar:	    rv = "transfer"; break;
  case exit_ydcar:	    rv = "exit"; break;
  default: rv = "unknown"; break;
  }
  return rv;
}

STATICF CONST char *ydcaTryResult( ydim_tryResult try )
{
  CONST char *rv;
  switch( try )
  {
  case ydim_success_tryResult:	    rv = "success"; break;
  case ydim_fail_tryResult:	    rv = "fail"; break;
  case ydim_retry_tryResult:	    rv = "retry"; break;
  default: rv = "unknown"; break;
  }
  return rv;
}

/* ---------------------------- ydcaStartMachine ---------------------------- */
/*
  NAME
    ydcaStartMachine
  DESCRIPTION
    Start up an asyncronous state machine to process a request.
  PARAMETERS
    cx	    -- ydca context
    op	    -- operation, either try_ydcar or abandon_ydcar.  (In this
		context commit_ydcar is bogus).
    claim   -- the claim to work on, with property as the key.
    reply   -- object for reply on a try, NULL for an abandonment.
  RETURNS
    none
*/

STATICF void ydcaStartMachine( ydcacx *cx, optype_ydcar op,
			      yort_claim *claim, yoevt reply )
{
  ydcar *car;

  if( commit_ydcar == op )
  {
    /* 1212, "ydcaStartMachine:  unexpected op %s" */
    ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1212, YSLSEV_ERR, (char*)0,
	     YSLSTR( ydcaOper( op )), YSLEND);
    ysePanic( YDCA_EX_BADOP );
  }

  car = (ydcar*)ysmGlbAlloc( sizeof(*car), ydcar_tag );
  car->cx_ydcar = cx;
  car->sop_ydcar = car->op_ydcar = op;
  car->orbds_ydcar = (yslst*)0;
  car->e_ydcar = car->lte_ydcar = (ysle*)0;
  car->retry_ydcar = FALSE;
  yort_claim__copy( &car->claim_ydcar, claim, yotkAllocStr );
  car->reply_ydcar = (yoevt)yoDuplicate((dvoid*)reply);
  yoEnvInit( &car->ev_ydcar );
  car->le_ydcar = ysLstEnq( cx->l_ydcacx, (dvoid*)car );
  car->evt_ydcar = ysSemCreate((dvoid*)0);
  
  /* start the machine */
  ydcaMachine( (dvoid*)car, (ysid*)0, (dvoid*)0, (size_t)0 );
}


/* ---------------------------- ydcaKillMachine ---------------------------- */
/*
  NAME
    ydcaKillMachine
  DESCRIPTION
    Called at term time to shut down any currently running requests.

    FIXME - Not sure how to proceed.

  PARAMETERS
    x	    -- the ydcar as a dvoid *.
  RETURNS
    none
*/

STATICF void ydcaKillMachine( dvoid *x )
{
  ydcar	*car = (ydcar*)x;
  yoany	any;
  boolean rv = FALSE;
    
  /* 1213, "ydcaKillMachine:  called" */
  ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1213, YSLSEV_INFO, (char*)0, YSLNONE );

  /* cancel current operation, put into exit, and trigger. */
  car->op_ydcar = exit_ydcar;
  ysEvtDestroy( car->evt_ydcar );
    
  /* if have a reply, give bad news */
  if( car->reply_ydcar )
  {
    any._type = (yotk*)yoTcBoolean;
    any._value = (dvoid*)&rv;
    ysTrigger(yoToLocalEvt(car->reply_ydcar), (ysid*)0,
	      (dvoid*)&any, sizeof(any));
  }

  car->evt_ydcar = ysEvtCreate(ydcaMachine, (dvoid*)car,
			       car->cx_ydcar->q_ydcacx, TRUE);

  ysTrigger( car->evt_ydcar, (ysid*)0, (dvoid*)0, (size_t)0 );
}

/* ---------------------------- ydcaMachine ---------------------------- */
/*
  NAME
    ydcaMachine
  DESCRIPTION
    Async state machine to run a claim/abandon request.  Gets a stable
    list of orbds to consult, then races through each in turn.  The function
    is seeded outside, then get re-invoked as a completion handler as
    operations finish.

  PARAMETERS
    usrp	-- the ydcar request state block.
    exid	-- exception from operation completion.
    arg		-- returned result
    argsz	-- result size.
  RETURNS
    none
*/

/* ARGSUSED */
STATICF void ydcaMachine( dvoid *usrp, CONST ysid *exid,
			 dvoid *arg, size_t argsz )
{
  ydcar *car = (ydcar*)usrp;
  ydim_tryResult try; 
  ysle	    *le;
  ysevt	    *evt;
  ydim_imr  imr;
  boolean   rv;
  yoany	    any;

  /* 1215, "ydcaMachine: op %s, exid %s */
  ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1215, YSLSEV_INFO, (char*)0,
	   YSLSTR(ydcaOper(car->op_ydcar)), YSLSTR(yduStr(exid)), YSLEND );

 top:

  if( !car->orbds_ydcar )
  {
    car->orbds_ydcar = yoListORBDs();
    /* 1214, "ydcaMachine:  got %d orbds in location %d" */
    ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1214, YSLSEV_INFO, (char*)0,
	     YSLSB4((sb4)ysLstCount(car->orbds_ydcar)),YSLSB4((sb4)1),YSLEND);
  }

  ysEvtDestroy( car->evt_ydcar );

  /* remember last, set next; next may be overridden */
  le = car->e_ydcar;
  car->e_ydcar = le ? ysLstNext( le ) : le;

  /*
   * Based on current state, examine args, determine the new state,
   * and the appropriate operands.
   */
  if( exid && car->op_ydcar != exit_ydcar ) /* possibly orbd went down. */
  {
    /* get new orbd list */
    ysLstDestroy( car->orbds_ydcar, yoRelease );
    car->orbds_ydcar = yoListORBDs();
    
    /* 1214, "ydcaMachine:  got %d orbds in location %d" */
    ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1214, YSLSEV_INFO, (char*)0,
	     YSLSB4((sb4)ysLstCount(car->orbds_ydcar)),YSLSB4((sb4)2),YSLEND);

    car->retry_ydcar = FALSE;
    if( car->op_ydcar != transfer_ydcar )
    {
      /* if not transfer, retry sop_ydcar when abandon completes */
      car->retry_ydcar = TRUE;
      car->op_ydcar = abandon_ydcar;
    }
    car->e_ydcar = ysLstHead(car->orbds_ydcar);
  }

  switch( car->op_ydcar )	/* normal case */
  {
  case tryStart_ydcar:

    car->sop_ydcar = car->op_ydcar = try_ydcar;
    car->e_ydcar = ysLstHead( car->orbds_ydcar );
    break;

  case try_ydcar:

    try = *(ydim_tryResult*)arg;

    /* 1216, "ydcaMachine:  %s result was %s" */
    ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1216, YSLSEV_INFO, (char*)0,
	     YSLSTR("try"),
	     YSLSTR( ydcaTryResult( try )), YSLEND);

    if( try == ydim_success_tryResult )
    {
      car->lte_ydcar = le;	/* remember last try obtained */
      if( arg && !car->e_ydcar ) /* end of try loop? */
      {
	/* completed try loop sucessfully, prepare to commit */
	car->op_ydcar = commit_ydcar;
	car->e_ydcar = ysLstHead( car->orbds_ydcar );
      }
    }
    else if( try == ydim_fail_tryResult )
    {
      /* failed; abandon all obtained so far */
      car->op_ydcar = abandon_ydcar;
      if( car->lte_ydcar )
      {
	car->e_ydcar = ysLstHead( car->orbds_ydcar );
      }
      else			/* no sucessful tries */
      {
	car->e_ydcar = (ysle*)0;
      }
    }
    else if( try == ydim_retry_tryResult )
    {
      /* prepare a retry; abandon all first */
      car->retry_ydcar = TRUE;
      car->op_ydcar = abandon_ydcar;
      car->e_ydcar = ysLstHead( car->orbds_ydcar );
    }
    break;

  case transferStart_ydcar:

    car->sop_ydcar = car->op_ydcar = transfer_ydcar;
    car->e_ydcar = ysLstHead( car->orbds_ydcar );
    break;

  case transfer_ydcar:

    try = *(ydim_tryResult*)arg;

    /* 1216, "ydcaMachine:  %s result was %s" */
    ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1216, YSLSEV_INFO, (char*)0,
	     YSLSTR("transfer"),
	     YSLSTR( ydcaTryResult( try )), YSLEND);

    if( try == ydim_success_tryResult )
    {
      if( !car->e_ydcar )	/* end of try loop? */
      {
	/* completed try loop sucessfully, prepare to commit */
	car->op_ydcar = commit_ydcar;
	car->e_ydcar = ysLstHead( car->orbds_ydcar );
      }
    }
    else			/* failed */
    {
      /* 1217, "ydcaMachine:  transfer failed, abandoning %s" */
      ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1217, YSLSEV_INFO, (char*)0,
	       YSLSTR("transfer"),
	       YSLSTR( car->claim_ydcar.property ), YSLEND);

      /* failed; abandon absolutely all */
      car->op_ydcar = abandon_ydcar;
      car->e_ydcar = ysLstHead( car->orbds_ydcar );
    }
    break;

  case abandonStart_ydcar:
  
    car->op_ydcar = car->sop_ydcar = abandon_ydcar;
    car->e_ydcar = ysLstHead( car->orbds_ydcar );
    break;

  case abandon_ydcar:

    /* end of abandon loop? */
    if( !car->e_ydcar || (car->lte_ydcar && le == car->lte_ydcar ))
    {
      /* yes.  should retry sop? */
      if( car->retry_ydcar )
      {
	/* completed retry abandon loop sucessfully, do retry of sop */
	car->retry_ydcar = FALSE;
	if( car->sop_ydcar != abandon_ydcar )
	{
	  car->op_ydcar = car->sop_ydcar;
	  car->e_ydcar = ysLstHead( car->orbds_ydcar );
	  car->lte_ydcar = (ysle*)0;

	  /* FIXME -- should delay here? */
	}
      }
    }
    break;

  case commit_ydcar:		/* do nothing */

    break;

  case exit_ydcar:

    /* now shut down the machine */
    if( car->orbds_ydcar )
      ysLstDestroy( car->orbds_ydcar, (ysmff)yoRelease );
    yort_claim__free( &car->claim_ydcar, (ysmff)yotkFreeStr );
    yoRelease( (dvoid*)car->reply_ydcar );
    yoEnvFree( &car->ev_ydcar );
    DISCARD ysLstRem( car->cx_ydcar->l_ydcacx, car->le_ydcar );

    /* trigger inactive event if needed */
    if( !ysLstCount(car->cx_ydcar->l_ydcacx) && car->cx_ydcar->ievt_ydcacx )
    {
      evt = car->cx_ydcar->ievt_ydcacx;
      car->cx_ydcar->ievt_ydcacx = (ysevt*)0;
      ysTrigger( evt, (ysid*)0, (dvoid*)0, (size_t)0 );
    }

    ysmGlbFree( (dvoid*)car );

    /* must return here; car has been crushed. */
    return;

  default:

    /* 1218, "ydcaMachine:  unexpected op %d in location %d" */
    ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1218, YSLSEV_ERR, (char*)0,
	     YSLSB4(car->op_ydcar), YSLSB4((sb4)1), YSLEND );
    ysePanic( YDCA_EX_INTERNAL );
    break;
  }

  /*
   * Got next state and operands.  Start necessary action.
   */
  car->evt_ydcar = ysEvtCreate(ydcaMachine, (dvoid*)car,
			       car->cx_ydcar->q_ydcacx, TRUE);
  if( car->e_ydcar )		/* do the next op */
  {
    imr = (ydim_imr)ysLstVal( car->e_ydcar );
    switch( car->op_ydcar )
    {
    case try_ydcar:
      ydim_imr_tryStake_nw( imr, &car->ev_ydcar, &car->claim_ydcar,
			   car->evt_ydcar );
      break;
    case commit_ydcar:
      ydim_imr_commitStake_nw( imr, &car->ev_ydcar, &car->claim_ydcar,
			      car->evt_ydcar );
      break;
    case transfer_ydcar:
      ydim_imr_transferStake_nw( imr, &car->ev_ydcar, &car->claim_ydcar,
				car->evt_ydcar );
      break;
    case abandon_ydcar:
      ydim_imr_abortStake_nw( imr, &car->ev_ydcar, &car->claim_ydcar,
			     car->evt_ydcar );
      break;
    default:

      /* 1218, "ydcaMachine:  unexpected op %d in location %d" */
      ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1218, YSLSEV_ERR, (char*)0,
	       YSLSB4(car->op_ydcar), YSLSB4((sb4)2), YSLEND );
      ysePanic( YDCA_EX_INTERNAL );
    }
  }
  else				/* all done */
  {
    if( car->reply_ydcar )	/* need to send a result */
    {
      rv = car->op_ydcar == commit_ydcar;
      any._type = (yotk*)yoTcBoolean;
      any._value = (dvoid*)&rv;
      ysTrigger(yoToLocalEvt(car->reply_ydcar), (ysid*)0,
		(dvoid*)&any, sizeof(any));
    }
    car->op_ydcar = exit_ydcar;
    goto top;
  }
}


/* ---------------------------- ydcaDeath ---------------------------- */
/*
  NAME
    ydcaDeath
  DESCRIPTION
    Completion handler invoked when a death is detected.
  PARAMETERS
    usrp	-- the ydcap being monitored.
    exid	-- ?
    arg
    argsz
  RETURNS
    none
*/

/* ARGSUSED */
STATICF void ydcaDeath( dvoid *usrp, CONST ysid *exid,
		       dvoid *arg, size_t argsz )
{
  ydcap *cap = (ydcap*)usrp;
  
  /* 1219, "ydcaDeath:  owner of property %s died, abandoning it" */
  ysRecord(YS_PRODUCT, YDCA_FAC, (ub4)1219, YSLSEV_WARNING, (char*)0,
	   YSLSTR(cap->claim_ydcap.property), YSLEND);

  ydcaAbandonFor( cap->cx_ydcap, &cap->claim_ydcap, TRUE );
}

