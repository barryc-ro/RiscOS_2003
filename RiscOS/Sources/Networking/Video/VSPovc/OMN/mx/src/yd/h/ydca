/* Copyright (c) Oracle Corporation 1996.  All Rights Reserved. */

/*
  NAME
    ydca.h
  DESCRIPTION

    yd claim/abandon - native serialization/lock interface for the ORB.

    This implements a distributed database of exclusivly owned "properties",
    which is replicated among the orbds using a two-phase commit protocol.
    When there is a conflict in the first phase of a claim on the same
    property, a winner is selected and he is told he should back out and
    retry.  The loser is told to back out and go away.

    The major complications arise from the need to be non-blocking.  As
    a result, work is done in asyncronous state machines, with results
    sent back to the clients via a "reply" object.

    
  PUBLIC FUNCTIONS

  NOTES
    <x>
  MODIFIED   (MM/DD/YY)
    dbrower   05/23/96 -  created.
*/

#ifndef YDCA_ORACLE
#define YDCA_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSV_ORACLE
#include <ysv.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
#ifndef YDIDL_ORACLE
#include <ydidl.h>
#endif

/* PUBLIC TYPES AND CONSTANTS */

typedef struct ydcacx ydcacx;

/* PUBLIC FUNCTIONS */

/* ---------------------------------------------------------------- */
/* bookkeeping */
/* ---------------------------------------------------------------- */

/* ---------------------------- ydcaInit ---------------------------- */
/*
  NAME
    ydcaInit
  DESCRIPTION
    Initialize a ydca entity, returning a context for other calls.
  PARAMETERS
    q	    -- q to use for events.
  RETURNS
    pointer to an opaque context structure, which must be released
    with a call to ydcaTerm.
*/
ydcacx *ydcaInit( ysque *q );

/* ---------------------------- ydcaTerm ---------------------------- */
/*
  NAME
    ydcaTerm
  DESCRIPTION
    Terminate a ydca entity.
  PARAMETERS
    cx	    -- context returned in a previous call to ydcaInit.
  RETURNS
    none
*/

void ydcaTerm( ydcacx *cx );


/* ------------------------- ydcaSetInactiveHandler ----------------------- */
/*
  NAME
    ydcaSetInactiveEvt
  DESCRIPTION
    Set an event to be triggered when the number of active machines
    is or reaches zero.  Will trigger the event before returning if
    there are none active.
  PARAMETERS
    cx	    -- the ydca context
    evt	    -- the event to trigger.
  RETURNS
    none
*/

void ydcaSetInactiveEvt( ydcacx *cx, ysevt *evt );

/* ---------------------------------------------------------------- */
/* yort called interfaces */
/* ---------------------------------------------------------------- */

/* ---------------------------- ydcaStakeFor ---------------------------- */
/*
  NAME
    ydcaStakeFor
  DESCRIPTION
    Try to make a claim on behalf of the owner.  Send results to the
    reply object.  
  PARAMETERS
    cx	    -- ydca context
    claim   -- the claim being made
    reply   -- remote event to trigger with the result reply.
  RETURNS
    none
*/
void ydcaStakeFor( ydcacx *cx, yort_claim *claim, yoevt reply );

/* ---------------------------- ydcaAbandonFor ---------------------------- */
/*
  NAME
    ydcaAbandonFor
  DESCRIPTION
    Abandon a claim on behalf of the specified owner.  If proxy is FALSE,
    then owner must match the real owner of the claim.  If not, then
    the YDYO_EX_NOTOWNER exception will be thrown.  If proxy is TRUE,
    then the owners need not match, and this is considered an administrative
    operation.

    If the claim does not exist, no error is indicated.

  PARAMETERS
    cx	    -- the ydca context
    claim   -- the claim being abandoned
    proxy   -- FALSE if owners must match, TRUE if this is an admin operation.
  RETURNS
    none
*/

void ydcaAbandonFor( ydcacx *cx, yort_claim *claim, boolean proxy );

/* ------------------------ ydcaTransfer --------------------------- */
/*
  NAME
    ydcaTransfer
  DESCRIPTION
    Change the owner and obj associated with a claim.  The old claim 
    must exist.  On failure, explode and leave the property abandoned.
  PARAMETERS
    cx		-- ydca context
    newClaim	-- claim with possibly new obj and owner.
  RETURNS
    none
*/
void ydcaTransfer( ydcacx *cx, yort_claim* newClaim);


/* ---------------------------------------------------------------- */
/* implementation called interfaces */
/* ---------------------------------------------------------------- */

/* ---------------------------- ydcaTryStake ---------------------------- */
/*
  NAME
    ydcaTryStake
  DESCRIPTION
    Try to stake a claim in the local database of claims.  Returns either
    success, fail, or retry.   To determine success or retry, the owners
    are compared; the lower one is told to retry, and a higher one is
    failed.
  PARAMETERS
    cx		-- the ydca context
    what	-- the claim being tried.
  RETURNS
    success, fail, or retry.
*/
ydim_tryResult ydcaTryStake( ydcacx *cx, yort_claim *what );

/* --------------------------- ydcaTransferStake -------------------------- */
/*
  NAME
    ydcaTransferStake
  DESCRIPTION
    Change the owner of the property, leaving it in a try state to be
    committed.  Do nothing if not known.
  PARAMETERS
    cx		-- the ydca context
    what	-- the claim being tried.
  RETURNS
    success, fail, or retry.
*/
ydim_tryResult ydcaTransferStake( ydcacx *cx, yort_claim *what );

/* ---------------------------- ydcaCommitStake ---------------------------- */
/*
  NAME
    ydcaCommitStake
  DESCRIPTION
    Change a previously successfully tried claim to a granted one.
  PARAMETERS
    cx		-- the ydca context
    what	-- the claim being promoted to granted state.
  RETURNS
    none
*/
void ydcaCommitStake( ydcacx *cx, yort_claim *what );

/* ---------------------------- ydcaAbortStake ---------------------------- */
/*
  NAME
    ydcaAbortStake
  DESCRIPTION
    Abandon a tried or granted claim, with no questions asked.  
    There is no error if the claim does not exist.
  PARAMETERS
    cx	    -- the ydca context
    what    -- the claim being abandoned.
  RETURNS
    none
*/
void ydcaAbortStake( ydcacx *cx, yort_claim *what );


/* ---------------------------- ydcaListNext ---------------------------- */
/*
  NAME
    ydcaListNext
  DESCRIPTION
    Do a lookup of the nex granted claim following this, even if the
    claim referred to by this has vanished.   If this is NULL, return
    the first granted claim.
  PARAMETERS
    cx	    -- the ydca context
    this    -- pointer to a claim with a property key, or NULL.
  RETURNS
    Pointer to a granted claim description.  The caller should copy the
    contents for long-term stability, as the claim it points to might
    go away in response to some other action.
*/
yort_claim *ydcaListNext( ydcacx *cx, yort_claim *this );


#endif

