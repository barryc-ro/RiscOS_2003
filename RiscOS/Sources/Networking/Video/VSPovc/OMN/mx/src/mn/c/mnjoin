/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 * mnjoin.c - Media Net Address Server Join Utility
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

#ifndef YS_ORACLE
#include <ys.h>
#endif

#ifndef YSR_ORACLE
#include <ysr.h>
#endif

#ifndef MTL_ORACLE
#include <mtl.h>
#endif

#ifndef MN_ORACLE
#include <mn.h>
#endif

#ifndef MNI_ORACLE
#include <mni.h>
#endif

#ifndef SMNJ_ORACLE
#include <smnj.h>
#endif

static struct ysargmap mnjoinArgs[] =
{
  { 'g', "mn.sync-gateway", 1 },
  { YSARG_PARAM, "mnjoin.physical-address", YSARG_MANY },
  { 0 }
};

boolean mnjoin(dvoid *osdCtx, CONST char *nm, sword argc, char **argv)
{
  mnctx  *ctx;
  mna     asaddr;
  mnnpa   pafrom, pato;
  mnnio  *nio;
  mnnpkt *pkt;
  mnnhdr *phdr;
  ub1    *buf;
  ysle   *i, *j;
  sword   sts;
  char    vbuf[80];

  sts = ysArgParse(argc, argv, mnjoinArgs);
  if (sts == YSARG_VERSION)
    yslError(ysVersion(vbuf, sizeof(vbuf)));
  if (sts != YSARG_NORMAL)
    return FALSE;

  if (!smniInit(osdCtx, (mnLogger) 0))
    return FALSE;

  ctx = mnGlbCtx;
  DISCARD mnAddr(&asaddr, MNARSADDR);

  for (i = ysLstHead(ysResGet("mnjoin.physical-address")); i; i = ysLstNext(i))
    {
      smnjLink((char *) ysLstVal(i), &pafrom, &nio);
      for (j = ysLstHead(ysResGet("mnjoin.physical-address")); j;
	   j = ysLstNext(j))
	{
	  if (j == i)
	    continue;

	  yslPrint("joining %s to %s\n", (char *) ysLstVal(j),
		   (char *) ysLstVal(i));
	  smnjLink((char *) ysLstVal(j), &pato, (mnnio **) 0);

	  /* send synchronization packet */
	  pkt = (mnnpkt*) mnmAlloc(ctx, MNM_MAINPOOL,
				   sizeof(mnnpkt) + sizeof(mnnhdr) +
				   sizeof(mnnpa));
	  phdr = (mnnhdr *) &pkt[1];
	  buf = (ub1 *) &phdr[1];

	  pkt->len = sizeof(mnnhdr) + sizeof(mnnpa);
	  pkt->off = 0;
	  pkt->flags = MNNFLG_PRI;
	  pkt->seqid = MNOTYP_ADDRSYNCH;
	  pkt->max = 0;
	  pkt->stime = 0;
	  pkt->nio = nio;
	  CPSTRUCT(pkt->pa, pafrom);

	  DISCARD memset(phdr, 0, sizeof(mnnhdr));
	  phdr->proto = MNPROTO_OCP;
	  mnaCopy(&phdr->dst, &asaddr);

	  DISCARD memcpy((dvoid *) buf, (dvoid *) &pato, sizeof(mnnpa));
	  DISCARD mnnSendPkt(ctx, pkt);
	}
      (*nio->close)(nio);
    }

  mnTerm();
  return( TRUE );
}

