/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ycotre.h - Oracle MOOSE CORBA IDL Abstract Syntax Tree
 *
 * NOTES
 *
 * If you add any new parsing nodes, be sure to add destructors
 * for them to ycprfree.c. If you run purify and see leaks from
 * allocations made in the generated parser code, that's probably
 * what is wrong.
 *
 * HISTORY
 * 04/12/96 kcoleman	Support for IAO database access pragmas
 * 10/16/95 kcoleman	Support for IFR pragmas: ID, prefix, version
 * 10/10/95 kcoleman	Support for TypeCode as a primitive type
 * xx/xx/95 jolkin	Creation
 */

#ifndef YCOTRE_ORACLE
#define YCOTRE_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif

/*
 * Node Construction
 */
#define NODE(type) \
  typedef struct type type; struct type { type *next; ycln *line;
#define END_NODE            };
#define ONEOF               ub4 tag; union {
#define END_ONEOF           } data;
#define FIELD(type)         struct type *
#define LIST(type)          yslst * 
#define MEMBER(oneof, arm)  (oneof)->data.arm

/*
 * Nodes
 */
enum ycttags
{ ycttTypeDcl, ycttConstDcl, ycttExceptDcl, ycttInterface, ycttModule,
  ycttInterfaceDcl, ycttForwardDcl, ycttAttrDcl, ycttOpDcl, ycttIntegerType,
  ycttCharType, ycttBooleanType, ycttFloatType, ycttStringType,
  ycttScopedName, ycttLiteral, ycttConstExp, ycttTypeDeclarator,
  ycttStructType, ycttUnionType, ycttEnumType, ycttSimple, ycttConstr,
  ycttTemplate, ycttOctetType, ycttAnyType, ycttSeqType, ycttStrType,
  ycttComplex, ycttNumLit, ycttStrLit, ycttCharLit, ycttBoolLit, ycttBase,
  ycttTypeCodeType, 
  ycttPragma, ycttPragmaId, ycttPragmaPrefix, ycttPragmaVersion,
  ycttPragmaDbAttr, ycttPragmaDbCreat, ycttPragmaDbLst };

#define yctConstExp yctOrExpr
#define yctPositiveIntConst yctConstExp
#define yctComplexDeclarator yctArrayDeclarator

NODE(yctDefinition)
  ONEOF
    FIELD(yctTypeDcl)   typedcl;
    FIELD(yctConstDcl)  constdcl;
    FIELD(yctExceptDcl) exceptdcl;
    FIELD(yctInterface) interface;
    FIELD(yctModule)    module;
    FIELD(yctPragma)    pragmadir;
  END_ONEOF
END_NODE

NODE(yctModule)
  char                *id;
  LIST(yctDefinition)  defs;
END_NODE

NODE(yctInterface)
  ONEOF
    FIELD(yctInterfaceDcl) interfacedcl;
    FIELD(yctForwardDcl)   forwarddcl;
  END_ONEOF
END_NODE

NODE(yctInterfaceDcl)
  FIELD(yctInterfaceHeader) header;
  LIST(yctExport)           body;
END_NODE

NODE(yctForwardDcl)
  char *id;
END_NODE

NODE(yctInterfaceHeader)
  char                     *id;
  FIELD(yctInheritanceSpec) inheritancespec;
END_NODE

NODE(yctExport)
  ONEOF
    FIELD(yctTypeDcl)   typedcl;
    FIELD(yctConstDcl)  constdcl;
    FIELD(yctExceptDcl) exceptdcl;
    FIELD(yctAttrDcl)   attrdcl;
    FIELD(yctOpDcl)     opdcl;
    FIELD(yctPragma)    pragmadir;
  END_ONEOF
END_NODE

NODE(yctInheritanceSpec)
  LIST(yctScopedName)   names;
END_NODE

NODE(yctScopedName)
  FIELD(yctScopedName)  name;          /* this gets built backwards, i think */
  boolean               leadcolon;
  char                 *id;
END_NODE

NODE(yctConstDcl)
  FIELD(yctConstType)   type;
  char                 *id;
  FIELD(yctConstExp)    exp;
END_NODE

NODE(yctConstType)
  ONEOF
    FIELD(yctIntegerType)    inttype;
    FIELD(yctCharType)       chartype;
    FIELD(yctBooleanType)    booleantype;
    ub4                      floattype;
    FIELD(yctStringType)     stringtype;
    FIELD(yctScopedName)     name;
  END_ONEOF
END_NODE

NODE(yctOrExpr)
  FIELD(yctOrExpr)  orexpr;
  FIELD(yctXorExpr) xorexpr;
END_NODE

NODE(yctXorExpr)
  FIELD(yctXorExpr) xorexpr;
  FIELD(yctAndExpr) andexpr;
END_NODE

NODE(yctAndExpr)
  FIELD(yctAndExpr)   andexpr;
  FIELD(yctShiftExpr) shiftexpr;
END_NODE

NODE(yctShiftExpr)
  FIELD(yctShiftExpr) shiftexpr;
  FIELD(yctAddExpr)   addexpr;
  sb2                      operid;
END_NODE

NODE(yctAddExpr)
  FIELD(yctAddExpr)  addexpr;
  FIELD(yctMultExpr) multexpr;
  sb2                     operid;
END_NODE

NODE(yctMultExpr)
  FIELD(yctMultExpr)  multexpr;
  FIELD(yctUnaryExpr) unaryexpr;
  sb2                      operid;
END_NODE

NODE(yctUnaryExpr)
  sb2                        unaryop;
  FIELD(yctPrimaryExpr) primexpr;
END_NODE

NODE(yctPrimaryExpr)
  ONEOF
    FIELD(yctScopedName)  name;
    FIELD(yctLiteral)     literal;
    FIELD(yctConstExp)    constexp;
  END_ONEOF
END_NODE

NODE(yctLiteral)
  ONEOF
    char                        *numlit;
    LIST(yctStringLiteral)  strlit;
    char                        *charlit;
    ub4                          boollit;
  END_ONEOF
END_NODE

NODE(yctTypeDcl)
  ONEOF
    FIELD(yctTypeDeclarator)  typedecl;
    FIELD(yctStructType)      structtype;
    FIELD(yctUnionType)       uniontype;
    FIELD(yctEnumType)        enumtype;
  END_ONEOF
END_NODE

NODE(yctTypeDeclarator)
  FIELD(yctTypeSpec)   typespec;
  LIST(yctDeclarator)  declarators;
END_NODE

NODE(yctTypeSpec)
  ONEOF
    FIELD(yctSimpleTypeSpec) simple;
    FIELD(yctConstrTypeSpec) constr;
  END_ONEOF
END_NODE

NODE(yctSimpleTypeSpec)
  ONEOF
    FIELD(yctBaseTypeSpec)     base;
    FIELD(yctTemplateTypeSpec) template;
    FIELD(yctScopedName)       name;
  END_ONEOF
END_NODE

NODE(yctBaseTypeSpec)
  ONEOF
    ub4                      floattype;
    FIELD(yctIntegerType)    inttype;
    FIELD(yctCharType)       chartype;
    FIELD(yctBooleanType)    booleantype;
    FIELD(yctOctetType)      octettype;
    FIELD(yctAnyType)        anytype;
    FIELD(yctTypeCodeType)   typecodetype;
  END_ONEOF
END_NODE

NODE(yctTemplateTypeSpec)
  ONEOF
    FIELD(yctSequenceType)  seqtype;
    FIELD(yctStringType)    strtype;
  END_ONEOF
END_NODE

NODE(yctConstrTypeSpec)
  ONEOF
    FIELD(yctStructType) structtype;
    FIELD(yctUnionType)  uniontype;
    FIELD(yctEnumType)   enumtype;
  END_ONEOF
END_NODE

NODE(yctDeclarator)
  ONEOF
    char                            *simple;
    FIELD(yctComplexDeclarator) complex;
  END_ONEOF
END_NODE

NODE(yctIntegerType)
  boolean signed_t;
  sword long_t;
END_NODE

NODE(yctStructType)
  char                *id;
  LIST(yctMember) members;
END_NODE

NODE(yctMember)
  FIELD(yctTypeSpec)       typespec;
  LIST(yctDeclarator) declarators;
END_NODE

NODE(yctUnionType)
  char *id;
  FIELD(yctSwitchTypeSpec) typespec;
  LIST(yctCase)            cases;
END_NODE

NODE(yctSwitchTypeSpec)
  ONEOF
    FIELD(yctIntegerType)    inttype;
    FIELD(yctCharType)       chartype;
    FIELD(yctBooleanType)    booltype;
    FIELD(yctEnumType)       enumtype;
    FIELD(yctScopedName)     name;
  END_ONEOF
END_NODE

NODE(yctCase)
  LIST(yctCaseLabel)    caselabels;
  FIELD(yctElementSpec) elemspec;
END_NODE

NODE(yctCaseLabel)
  FIELD(yctConstExp)    constexp;              /* if null, indicates DEFAULT */
END_NODE

NODE(yctElementSpec)
  FIELD(yctTypeSpec)    typespec;
  FIELD(yctDeclarator)  declarator;
END_NODE

NODE(yctEnumType)
  char *id;
  LIST(yctEnumerator)  enumerators;
END_NODE

NODE(yctEnumerator)
  char *id;
END_NODE

NODE(yctSequenceType)
  FIELD(yctSimpleTypeSpec)   simple;
  FIELD(yctPositiveIntConst) intconst;
END_NODE

NODE(yctStringType)
  FIELD(yctPositiveIntConst) intconst;
END_NODE

NODE(yctArrayDeclarator)
  char *id;
  LIST(yctFixedArraySize) arraysize;
END_NODE

NODE(yctFixedArraySize)
  FIELD(yctPositiveIntConst) intconst;
END_NODE

NODE(yctAttrDcl)
  ub4                       readon;
  FIELD(yctParamTypeSpec)   paramtype;
  LIST(yctSimpleDeclarator) simples;
END_NODE

NODE(yctExceptDcl)
  char *id;
  LIST(yctMember) members;
END_NODE

NODE(yctOpDcl)
  sb2                     opattribute;
  FIELD(yctOpTypeSpec)    optype;
  char *id;
  FIELD(yctParameterDcls) paramdcls;
  FIELD(yctRaisesExpr)    raisesexpr;
  FIELD(yctContextExpr)   contextexpr;
END_NODE

NODE(yctOpTypeSpec)
  FIELD(yctParamTypeSpec) paramtype;              /* if null, indicates VOID */
END_NODE

NODE(yctParameterDcls)
  LIST(yctParamDcl)  paramdcls;
END_NODE

NODE(yctParamDcl)
  sb2                        paramattr;
  FIELD(yctParamTypeSpec)    typespec;
  char *simple;
END_NODE

NODE(yctRaisesExpr)
  LIST(yctScopedName)  names;
END_NODE

NODE(yctContextExpr)
  LIST(yctStringLiteralList)  ids;  /* list of lists of string lits */
END_NODE

NODE(yctParamTypeSpec)
  ONEOF
    FIELD(yctBaseTypeSpec) base;
    FIELD(yctStringType)   stringtype;
    FIELD(yctScopedName)   name;
  END_ONEOF
END_NODE

  /* IFR Pragmas defined by CORBA */
NODE(yctPragmaId)
  FIELD(yctScopedName) name;
  char*                id;
END_NODE

NODE(yctPragmaPrefix)
  char* prefix;
END_NODE

NODE(yctPragmaVersion)
  FIELD(yctScopedName) name;
  char*                vers;
END_NODE

  /* Pragmas to support IAO server impl code generation */
NODE(yctPragmaDbAttr)
  FIELD(yctScopedName) name;
  LIST(yctStringLiteral) keystr;
END_NODE

NODE(yctPrgParKey)
  char* paramnm;
  LIST(yctStringLiteral) keystr;
END_NODE

NODE(yctPragmaDbCreat)
  FIELD(yctScopedName) name;
  LIST(yctPrgParKey) mapping;
END_NODE

NODE(yctPragmaDbLst)
  FIELD(yctScopedName) name;
END_NODE

NODE(yctPragma)
  ONEOF
    FIELD(yctPragmaId)      prgid;
    FIELD(yctPragmaPrefix)  prgprefix;
    FIELD(yctPragmaVersion) prgversion;
    FIELD(yctPragmaDbAttr)  prgdbattr;
    FIELD(yctPragmaDbCreat) prgdbcreate;
    FIELD(yctPragmaDbLst)   prgdblst;
  END_ONEOF
END_NODE
#endif /* YCOTRE_ORACLE */
