/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ysrarg.c - OMX Argument Parsing
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef SYSFP_ORACLE
#include <sysfp.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif

STATICF void ysOptArgParse(char *optarg, CONST char *name);
STATICF void ysArgHelp(yslst *map);
STATICF CONST char *ysArgBase(CONST char *nm);

static struct ysargmap ysrStdOpts[] =
{
  { 'h', "show-usage", 0 },
  { 'V', "print-version", 0 },
  { 'T', "*verbose=true", 0 },
  { 'R', "resource-statement", 1 },
  { 'P', "resource-file", 1 },
  { 0, (char *) 0, 0 }
};

/*
 * ysArgParse - parse command-line arguments
 */
sword ysArgParse(sword argc, char **argv, CONST ysargmap *origmap)
{
  sword       sts, i, j, k, opcnt, *counts;
  yslst      *map;
  ysle       *le;
  ysargmap   *osdmap, *arg;
  CONST char *prognm;
  char        ch;
  size_t      sz;

  /* setup */
  prognm = ysProgName();
  sts = YSARG_NORMAL;
  osdmap = sysrGetMap(ysGetOsdPtr());

  /* construct full map */
  map = ysLstCreate();
  for (; origmap->opt; origmap++)
    DISCARD ysLstEnq(map, (dvoid *) origmap);

  if (osdmap)
    for (; osdmap->opt; osdmap++)
      DISCARD ysLstEnq(map, (dvoid *) osdmap);

  for (arg = ysrStdOpts; arg->opt; arg++)
    DISCARD ysLstEnq(map, (dvoid *) arg);

  /* initialize count array */
  sz = (size_t) (sizeof(sword) * ysLstCount(map));
  counts = (sword *) ysmGlbAlloc(sz, "temp");
  DISCARD memset((dvoid *) counts, 0, sz);

  /* process options */
  for (i = 0; i < argc && argv[i][0] == '-' && sts <= YSARG_ERROR; i++)
    {
      if (argv[i][1] == '\0')
	{
	  yslError("%s: missing option", prognm);
	  sts = YSARG_ERROR;
	}
      else if (argv[i][1] == '-')
	{
	  i++;
	  break;
	}
      else
	for (k = 1; argv[i][k] && sts <= YSARG_ERROR; k++)
	  {
	    ch = argv[i][k];

	    /* check for help */
	    if (ch == 'h' || ch == 'H' || ch == '?')
	      {
		sts = YSARG_HELP;
		break;
	      }
	    
	    /* locate the option in the map */
	    for (j = 0, le = ysLstHead(map); le; j++, le = ysLstNext(le))
	      {
		arg = (ysargmap *) ysLstVal(le);
		if (ch == arg->opt)
		  break;
	      }
	    
	    if (!le)
	      {
		yslError("%s: illegal option - '%c'", prognm, ch);
		sts = YSARG_ERROR;
	      }
	    else if (arg->opt == 'V')
	      sts = YSARG_VERSION;
	    else if (!arg->cnt)
	      {
		if (counts[j]++)
		  {
		    yslError("%s: duplicate option - '%c'", prognm, ch);
		    sts = YSARG_ERROR;
		  }
		else
		  sts = (ysResParse((char *) 0, 0, arg->name)
			 ? sts : YSARG_ERROR);
	      }
	    else if (k != 1 || argv[i][2] != '\0')
	      {
		yslError("%s: option '%c' cannot be grouped", prognm, ch);
		sts = YSARG_ERROR;
	      }
	    else if (++i >= argc)
	      {
		yslError("%s: option '%c' requires arguments", prognm, ch);
		sts = YSARG_ERROR;
		break;
	      }
	    else if (arg->cnt == 1)
	      {
		if (counts[j]++)
		  {
		    yslError("%s: duplicate option - '%c'", prognm, ch);
		    sts = YSARG_ERROR;
		  }
		else if (arg->opt == 'R')
		  {
		    sts = (ysResParse((char *) 0, 0, argv[i])
			   ? sts : YSARG_ERROR);
		    counts[j]--;
		  }
		else if (arg->opt == 'P')
		  {
		    sts = (ysResPfile(argv[i]) ? sts : YSARG_ERROR);
		    counts[j]--;
		  }
		else
		  ysResSet(arg->name, argv[i]);
		
		break;
	      }
	    else
	      {
		ysOptArgParse(argv[i], arg->name);
		break;
	      }
	  }
    }

  ysmGlbFree((dvoid *) counts);

  if (sts == YSARG_HELP)
    ysArgHelp(map);

  /* process parameters */
  opcnt = 0;
  le = ysLstHead(map);
  while (le && sts <= YSARG_ERROR)
    {
      /* locate next positional parameter in the map */
      arg = (ysargmap *) ysLstVal(le);
      if (arg->opt != YSARG_PARAM && arg->opt != YSARG_OPTPARAM)
	{
	  le = ysLstNext(le);
	  continue;
	}

      /* locate next parameter in argument list */
      if (i < argc)
	{
	  ysResSet(arg->name, argv[i++]);
	  if (arg->cnt == YSARG_MANY)
	    opcnt++;
	  else
	    le = ysLstNext(le);
	}
      else
	{
	  if (arg->opt == YSARG_PARAM && !opcnt)
	    {
	      yslError("%s: operand '%s' is required",
		       prognm, ysArgBase(arg->name));
	      sts = YSARG_ERROR;
	    }

	  break;
	}
    }

  if (sts == YSARG_NORMAL && i < argc)
    {
      yslError("%s: unexpected extra operands", prognm);
      sts = YSARG_ERROR;
    }

  ysLstDestroy(map, (ysmff) 0);
  return sts;
}

/*
 * ysOptArgParse - parse option arguments
 */
STATICF void ysOptArgParse(char *optarg, CONST char *name)
{
  ysstr *str;
  char  *scc;

  str = ysStrCreate((char *) 0);

  for (scc = optarg; *scc; scc++)
    {
      if (*scc != ',' && *scc != ' ')
	str = ysStrApp(str, *scc);
      else if (ysStrLen(str))
	{
	  ysResSet(name, ysStrToText(str));
	  ysStrDestroy(str);
	  str = ysStrCreate((char *) 0);
	}
    }

  if (ysStrLen(str))
    ysResSet(name, ysStrToText(str));

  ysStrDestroy(str);
}

STATICF void ysArgHelp(yslst *map)
{
  ysstr      *buf;
  boolean     fst;
  CONST char *base;
  ysargmap   *arg;
  ysle       *le;

  buf = ysStrCat(ysStrCreate("usage: "), ysProgName());
  
  /* append options with no arguments */
  fst = TRUE;
  for (le = ysLstHead(map); le; le = ysLstNext(le))
    {
      arg = (ysargmap *) ysLstVal(le);
      if (arg->opt != YSARG_PARAM && arg->opt != YSARG_OPTPARAM && !arg->cnt)
	{
	  if (fst)
	    {
	      buf = ysStrCat(buf, " [ -");
	      fst = FALSE;
	    }

	  buf = ysStrApp(buf, (char) arg->opt);
	}
    }
  
  if (!fst)
    buf = ysStrCat(buf, " ]");
  
  /* append options with arguments */
  for (le = ysLstHead(map); le; le = ysLstNext(le))
    {
      arg = (ysargmap *) ysLstVal(le);
      if (arg->opt != YSARG_PARAM && arg->opt != YSARG_OPTPARAM && arg->cnt)
	{
	  base = ysArgBase(arg->name);
	  if (syslWidth() - ysStrLen(buf) < strlen(base) + 12)
	    {
	      yslError(ysStrToText(buf));
	      ysStrDestroy(buf);
	      buf = ysStrCreate("   ");
	    }

	  buf =
	    ysStrApp(ysStrApp(ysStrCat(buf, " [ -"), (char) arg->opt), ' ');
	  buf = ysStrCat(buf, base);
	  if (arg->cnt > 1)
	    buf = ysStrCat(buf, "...");
	  buf = ysStrCat(buf, " ]");
	}
    }
  
  /* append operands */
  for (le = ysLstHead(map); le; le = ysLstNext(le))
    {
      arg = (ysargmap *) ysLstVal(le);
      if (arg->opt == YSARG_PARAM || arg->opt == YSARG_OPTPARAM)
	{
	  base = ysArgBase(arg->name);
	  if (syslWidth() - ysStrLen(buf) < strlen(base) + 6)
	    {
	      yslError(ysStrToText(buf));
	      ysStrDestroy(buf);
	      buf = ysStrCreate("   ");
	    }
      
	  if (!arg->cnt)
	    buf = ysStrCat(ysStrCat(ysStrCat(buf, " [ "), base), " ]");
	  else
	    {
	      buf = (arg->opt == YSARG_OPTPARAM
		     ? ysStrCat(buf, " [ ") : ysStrApp(buf, ' '));
      
	      buf = ysStrCat(buf, base);
	      if (arg->cnt > 1)
		buf = ysStrCat(buf, " ...");
      
	      if (arg->opt == YSARG_OPTPARAM)
		buf = ysStrCat(buf, " ]");
	    }
	}
    }

  yslError(ysStrToText(buf));
  ysStrDestroy(buf);

  /* print out more explanation for options with no arguments */
  fst = TRUE;
  for (le = ysLstHead(map); le; le = ysLstNext(le))
    {
      arg = (ysargmap *) ysLstVal(le);
      if (arg->opt != YSARG_PARAM && arg->opt != YSARG_OPTPARAM && !arg->cnt)
	{
	  if (fst)
	    {
	      yslError("");
	      fst = FALSE;
	    }

	  yslError("   -%c -> %s", arg->opt, ysArgBase(arg->name));
	}
    }
}

STATICF CONST char *ysArgBase(CONST char *nm)
{
  CONST char *sc;
  for (sc = nm + strlen(nm);
       sc > nm && (*sc != '.' && *sc != '*'); sc--) ;
  return (*sc == '.' || *sc == '*' ? sc + 1 : sc);
}

static ysmtagDecl(YSARGMAP_TAG) = "ysargmap";

/*
 * ysArgMapConcat - concatenate argument lists
 */
ysargmap *ysArgMapConcat(CONST ysargmap *m1, CONST ysargmap *m2)
{
  sword cnt1, cnt2;
  CONST ysargmap *scm;
  ysargmap *map;

  for (scm = m1, cnt1 = 0; scm->opt; scm++, cnt1++) ;
  for (scm = m2, cnt2 = 0; scm->opt; scm++, cnt2++) ;

  map = (ysargmap *) ysmGlbAlloc(sizeof(ysargmap) * (cnt1 + cnt2 + 1),
				 YSARGMAP_TAG);
  DISCARD memcpy((dvoid *) map, (dvoid *) m1, sizeof(ysargmap) * cnt1);
  DISCARD memcpy((dvoid *) (map + cnt1), (dvoid *) m2,
		 sizeof(ysargmap) * (cnt2 + 1));

  return map;
}

/*
 * ysArgMapFree - free argument map
 */
void ysArgMapFree(ysargmap *map)
{
  ysmCheck(map, YSARGMAP_TAG);
  ysmGlbFree((dvoid *) map);
}

/*
 * ysResPfile - read a resource file
 */
boolean ysResPfile(CONST char *fn)
{
  boolean ok;
  sword   ln;
  sysfp  *fp;
  ysstr  *buf;
  sword   ch;
  CONST char *errtxt;

  ok = TRUE;
  ln = 1;

  /* open file */
  fp = sysfpOpen(fn, "r", SYSFPKIND_TEXT, &errtxt);
  if (!fp)
    {
      yslError("%s: %s", fn, errtxt);
      return FALSE;
    }

  /* read the file */
  while (!sysfpEof(fp))
    {
      buf = ysStrCreate((char *) 0);

      /* read a line */
      while (!sysfpGetc(fp, &ch))
	{
	  if (ch == '\n')
	    break;
	  else
	    buf = ysStrApp(buf, (char) ch);
	}

      ok &= ysResParse(fn, ln++, ysStrToText(buf));
      ysStrDestroy(buf);
    }

  /* close the file */
  sysfpClose(fp);
  return ok;
}
