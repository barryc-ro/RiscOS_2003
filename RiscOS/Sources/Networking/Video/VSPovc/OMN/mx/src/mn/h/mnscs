/* Copyright (c) 1994 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 * mnscs.h - OMN Process Server (main definitions)
 *
 * DESCRIPTION
 * Primary definitions, etc. for the process server.
 *
 * REVISIONS
 * bholroyd	02/02/95 Renamed from mnsci.h
 * jolkin	09/10/94 Creation
 */

#ifndef MNSCS_ORACLE
#define MNSCS_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef MTCCTX_ORACLE
#include <mtcctx.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNRS_ORACLE
#include <mnrs.h>
#endif
#ifndef MNSC_ORACLE
#include <mnsc.h>
#endif
#ifndef MZMGU_ORACLE
#include <mzmgu.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif

/*
 * Type, macro and constant declarations
 */
typedef struct mnscctx mnscctx;                    /* process server context */
typedef struct mnsibkt mnsibkt;                           /* instance bucket */

#define mnscStrdup(s) strcpy(ysmGlbAlloc(strlen(s)+1,"mnscStrdup"),s)

#define MNSCROWS	127                            /* rows in hash table */
#define MNSQLENLIM	3	     /* max q len before forking new process */
#define MNSEXECWAITTIME	60   /* sec's to wait before forking another process */

struct mnsibkt
{
  mnsibkt *next;                                     /* next bucket in chain */
  mnsient *inst;                                                 /* instance */
};

/*
 * Service controller context
 */
struct mnscctx
{
  mnsqent *queues;                                         /* list of queues */
  mnsibkt *insts[MNSCROWS];              /* instance hash table (by address) */
  boolean  shutdown;                         /* set to true if shutting down */
  mnrs    *sh;                                              /* server handle */
  mnsem  **semset;                                          /* semaphore set */
  ub4      semcnt;                            /* number of semaphores in set */
  ub4      semmax;                 /* maximum number of semaphores allocated */
  mzmguSStats mibstats;                             /* Common mib statistics */
};

#define mnscGlbCtx   ((mnscctx *) mtcctxGet(MNSCCTX, (ub4) 0))

/* backbone */
boolean mnscMain(dvoid *osdCtx, const char *nm, sword argc, char **argv);

/* stubs */
void mnssRegister(mnrsc *call, mnbv *inargs, ub4 incnt);
void mnssGetNext(mnrsc *call, mnbv *inargs, ub4 incnt);
void mnssUnregister(mnrsc *call, mnbv *inargs, ub4 incnt);
void mnssPause(mnrsc *call, mnbv *inargs, ub4 incnt);
void mnssStop(mnrsc *call, mnbv *inargs, ub4 incnt);
void mnssQuery(mnrsc *call, mnbv *inargs, ub4 incnt);
void mnssShutdown(mnrsc *call, mnbv *inargs, ub4 incnt);
void mnssReturnComp(dvoid *usrp, sb4 sts);

/* operations */
sb4  mnscRegister(mna *from, char *name, CONST mnrid *progid);
sb4  mnscGetNext(mna *from);
sb4  mnscUnregister(mna *from);
sb4  mnscPause(mna *addr, boolean pause);
sb4  mnscStop(mna *addr);
sb4  mnscQuery(mnxStream *stream, ub4 *clock);
void mnscShutdown(void);

/* utility routines */
void mnsRecv(mnsqent *scq, sb4 sts, mnsem **semp);
sb4  mnsNewQueue(CONST char *name, CONST mnrid *progid, mnsqent **newqueue);

#endif /* MNSCS_ORACLE */
