#ifdef RCSID
static char *RCSid  =
"$Header$";
#endif
/* Copyright (c) 1992 by Oracle Corporation */
/*
   NAME
     pxslax.c
   DESCRIPTION
     Implements run time engine for Version 3.0 of SLAX

   PUBLIC FUNCTION(S)

   PRIVATE FUNCTION(S)

   RETURNS

   NOTES

   MODIFIED   (MM/DD/YY)
    kcoleman   09/12/95 -  Minor mods to get rid of compiler warnings, use sysx.h
    jweisz     05/17/93 -  Implement base-check lkahead in pxngoto, pxnact 
    jweisz     04/02/93 -  Sometimes pxngoto() returns valid state when it shou
    jweisz     03/31/93 -  [158082] pxwnp() - break if machine accepts 
    jweisz     03/21/93 -  [156324] Bump size of tkstack by one 
    jweisz     03/09/93 -  Delete lmsini call - now done at mach create
    jweisz     03/05/93 -  tidy up a bit
    jweisz     03/05/93 -  Creation

 */
 /* ******  --- SWITCHING TO VAX RCS ----- *****
 * Revision 1.14  93/01/25  10:47:33  jweisz
 * Rewrote pxnact, pxngoto to use binary search.  Created buffer of actions in 
 * pxnfake to be used in pxnmove to avoid recomputation.
 * 
 * Revision 1.13  92/10/02  15:18:05  jweisz
 * Check for ACCEPT after pxnmove() in pxwnp()
 * 
 * Revision 1.12  92/09/25  17:07:41  jweisz
 * Rename pxfcopy, pxact, pxshft, pxfake, pxfkrd, pxextm to pxn...
 * in order to distinguish namespace from old SLAX.  Req'd because
 * brain-dead VMS doesn't really have STATICF's.
 * 
 * Revision 1.11  92/09/25  10:32:30  jweisz
 * Bug fix in error msg printing
 * 
 * Revision 1.10  92/09/22  15:11:50  jweisz
 * Return FALSE when pxnrcov can't recover.
 * 
 * Revision 1.9  92/09/22  13:48:00  jweisz
 * Bug fix in syntax error detection logic.
 * 
 * Revision 1.8  92/09/16  09:59:09  jweisz
 * Added error recovery lms messages.
 * 
 * Revision 1.7  92/09/15  21:09:03  jweisz
 * Use pxfake() to test if token is shiftable; then try kw and re-lexing.
 * 
 * Revision 1.6  92/09/14  21:50:16  jweisz
 * Set reduction function based on ruleno being reduced, instead of state.
 * 
 * Revision 1.5  92/09/14  17:29:30  jweisz
 * Not only re-lex but restore machine to pre-reduction state if lexers
 * different on syntax error.
 * 
 * Revision 1.4  92/09/12  17:23:05  jweisz
 * Re-lex present token on syntax error if present state's lexer different
 * than the one used to lex the offending token.
 * 
 * Revision 1.3  92/09/11  15:52:24  jweisz
 * Some PXDEBUG tidying up.
 * 
 * Revision 1.2  92/09/11  10:20:08  jweisz
 * Check for machine accept state only in pxnolk, since it's always LR0.
 * 
 * Revision 1.1  92/08/31  11:14:20  jweisz
 * Initial revision
 * 
 */

#define PXLOOKST 4
#define PXFLAG -32768
#define TOKCVT(tok) mach->pxtmap_[pxtgid(tok)]       /* converts to local id */
/*
 * all nonterms are 0-based referenced
 */

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

typedef unsigned char *PXVALTYPE;

#include <pxslax.h>
#include <pxtokn.h>
/*
 * Table reference macros.
 */
#define pxacof (mach->pxacof_)
#define pxstat (mach->pxstat_)
#define pxacts (mach->pxacts_)
#define pxlhsn (mach->pxlhsn_)
#define pxrhsc (mach->pxrhsc_)
#define pxdefs (mach->pxdefs_)
#define pxgoff (mach->pxgoff_)
#define pxgfrm (mach->pxgfrm_)
#define pxgto  (mach->pxgto_)
#define pxsubs (mach->pxsubs_)
#define pxeoff (mach->pxeoff_)
#define pxsytk (mach->pxsytk_)
#define pxcorl (mach->pxcorl_)
#define pxtoid (mach->pxtoid_)
#define pxgram (mach->pxgram_)
#define pxlex  (mach->pxlex_)
#define pxacti (mach->pxacti_)
#define pxroff (mach->pxroff_)
#define pxred (mach->pxred_)
#define pxredc (*mach->pxredc_)
#define pxkywd (*mach->pxkywd_)
#define pxdbtm (mach->pxdbtm_)
#define pxdbpd (mach->pxdbpd_)
#define pxtkno (mach->pxtkno_)
#define pxextk (mach->pxextk_)

#define PXGETTOK (*mach->pxgett)


#define FATALERR 1
#define FATNORECOVER 2
#define STACKOVFLW 6
#define TABETC 101
#define TABSTR 102
#define ENCOUNTER 103
#define EXPECTING 104
#define INSERTED 105
#define REPLACING 106
#define QUOTE 107
#define IGNORED1 108
#define PRESENT 109
#define SYMBOL 110
#define IGNORED2 111
#define SUBST 112
#define RESUMING 113
#define ETC 114
#define NL_SPACE 115
#define STRING 116
#define QUOTSTRING 117
#define NL 118
#define UNSUP 119



/*
 * This routine returns the status of the machine. Used for data hiding
 * purposes.
 */
sb2 pxnmstt(mach)
     pxnmach *mach;
{
  return mach->status;
}


/*
 * Machine copy procedure.
 */
static void pxnfcopy(mach, copymach)
      pxnmach *mach;
      pxnmach *copymach;
{

  
  memcpy((void *)copymach, (void *)mach,
		 mach->mnssize + (mach->partop + 1) * mach->frmsize );
  copymach->status = PXMNORMAL;
}


/*
 * Stack implementation routines.
 */
void pxnspus(
      pxnmach    *mach,
      sb2         state,
      sb2         symbol,
      PXVALTYPE  *val,
      sb2         line,
      sb2         col,
      char       *nam)
{
  sb2 top;
  pxstk *frame;

  if ((top = ++mach->partop) >= PXMAXDEPTH)
    {
      mach->status = PXOVERFL;
      return;
    }
  if (mach->ngrams > 1)
    {
      sb2 index = pxgram[state];
      mach->pxgett  = pxlex[index];
    }
  frame = &(mach->parse[top]);
  frame->state = state;
  frame->symbol = symbol;
  frame->srclin = line;
  frame->srccol = col;
  frame->srcnam = nam;

  if (val)
    memcpy((void *)&(frame->val),  (void *)val, mach->valsize);
}



/*
 * This procedure returns TRUE if a reduction is possible in the present
 * state without requiring a lookahead token.  (i.e., a LR0 state)
 */
static int pxnolk(mach, retact)
     pxnmach *mach;                                           /* the machine */
     pxacdf *retact;                 /* return prod number if red'n possible */
{
  sb2 state = mach->parse[mach->partop].state;
  sb2 prdno = mach->pxdfact_[state];

  if (mach->pxpact_[state] == PXFLAG && 
      prdno != 0)
    {
      /* check if accepting */
      if (pxlhsn[prdno] == mach->accept)
	{
	  mach->status = PXMACCEPT;
	  retact->type = PXACCEPT;
	  return TRUE;
	}
      retact->type   = PXREDUCE;
      retact->action = (ub2)prdno;
      return TRUE;
    }
  return FALSE;
}

/*
 * This procedure takes the current state and a lookahead terminal and
 * returns the action that is taken.
 */
static void pxnact(mach, state, look, retact)
      pxnmach *mach;                                    /* parse machine */
      ub2     state;                                    /* current state */
      sb2     look;                                  /* lookahead symbol */
      pxacdf *retact;                 /* structure to return action info */
{
  sb2  index;
  sb2  prdno;
  sb2  action;

  index = mach->pxpact_[state] + look;

  if (index < 0 || ((ub2)index > mach->pxtablen) || mach->pxchek_[index] != look)
    {
      /* Do the default action. */
      prdno = mach->pxdfact_[state];
      if (prdno > 0)                                      /* valid reduction */
	{
	  retact->type   = PXREDUCE;
	  retact->action = (ub2)prdno;
	}
      else                                                   /* syntax error */
	{
	  retact->type   = PXERROR;      
	}
    }
  else                        /* do the action specified in the action table */
    {
      action = mach->pxatabl_[index];
      if (action > 0)                                               /* shift */
	{
	  retact->type   = PXSHIFT;
	  retact->action = (ub2)action;
	}
      else                                                         /* reduce */
	{
	  retact->type   = PXREDUCE;
	  retact->action = (ub2)-action;
	}
    }
}

/*
 * This procedure determines the goto transition for a given state and
 * nonterminal.
 */
sb2 pxngoto(
      pxnmach *mach,
      ub2     state,                                    /* current state */
      ub2     nonterm)                  /* nonterminal transition symbol */
{

   ub2 index = mach->pxpgoto_[nonterm] + state;
  if (index <= mach->pxtablen && ((ub2)mach->pxchek_[index] == state))
    return mach->pxatabl_[index];
  else
    return mach->pxdfgoto_[nonterm];
}

/*
 * This procedure recognizes the given production but does not call
 * the user routine.
 */
static void pxnfkrd(mach, prod)
      pxnmach *mach;                  /* lalr parsing machine , modified */
      ub2     prod;                           /* production to reduce by */
{
   ub2 lrcnt;
   ub2 top;

  /*
   * Perform consistency check.
   */
  lrcnt = (ub2)mach->pxrhsc_[prod];
  if ((ub2)mach->partop < lrcnt)
    mach->status = PXMERROR;
  if (mach->status != PXMNORMAL)
    return;

  /*
   * Now, pop old values off of stack and push new lval.
   */
  mach->partop -= (sb2)lrcnt;
  top = (ub2)mach->partop;
  pxnspus(mach,
	  pxngoto(mach, (ub2)mach->parse[top].state, (ub2)mach->pxlhsn_[prod]),
	  (sb2) mach->pxlhsn_[prod],
	  (PXVALTYPE *) 0,
	  0, 0, (char *)0);
}

#ifdef PXDEBUG

static char *pxlktm(mach, token)
      pxnmach *mach;
      sb2      token;
{
  return pxdbtm[mach->pxtmap_[token]];
}

static void pxdbug(mach, action, token)
      pxnmach *mach;
      pxacdf *action;
      sb2      token;
{
  switch (action->type)
    {
    case PXREDUCE:
      printf("  Reduce %s, enter state %d\n",
		     pxdbpd[action->action],
		     pxngoto(mach,  
			    (ub2)
			     mach->parse[mach->partop -
					 mach->pxrhsc_[action->action]].state,
			     mach->pxlhsn_[action->action]));
      break;
    case PXSHIFT:
      printf("  SHIFT token %s, enter state %d\n",
		     pxlktm(mach, token), action->action);
      break;
    case PXACCEPT:
      printf("  SLAX accepts.\n");
      break;
    case PXERROR:
      printf("  SLAX detects possible syntax error.\n");
      break;
    default:
      printf("  SLAX detects fatal error.\n");
      break;						     
    }
}
#endif


/*
 * This procedure tries to shift input argument 'tok', without calling any
 * user actions.
 * Its input lrmachine is modified.
 */

static ub2 pxnfake(mach, nexttok)
       pxnmach *mach;                  /* lalr parsing machine, MODIFIED */
       sb2       nexttok;               /* next token, already translated */
{
   pxacdf     *action;
  mach->pxnumacts = 0;

  while (TRUE)
    {
      /* Set the action ptr to next one in stack so that if this succeeds
       * we won't have to recompute the reduces and shift.
       */
      action = &(mach->pxacstk[mach->pxnumacts++]);
      pxnact(mach, (ub2)mach->parse[mach->partop].state,
	     nexttok, action);
#ifdef PXDEBUG
      if (mach->debug)
	pxdbug(mach, action, pxtkno[nexttok]);
#endif

      switch (action->type)
	{
	case PXACCEPT:
	  return PXMACCEPT;
	case PXREDUCE:
	  pxnfkrd(mach, action->action);
	  if (mach->status == PXMERROR || mach->status == PXFATAL ||
	      mach->status == PXOVERFL)
	    return mach->status;
	  continue;
	case PXSHIFT:
	  return PXMNORMAL;
	case PXERROR:
	  return PXMERROR;
	default:
	  return PXFATAL;
	}
    }
}


/*
 * Generate the list of present state's shiftable terminals.
 */
static int pxnextm(inmach, terms)
      pxnmach *inmach;                                     /* la machine */
      ub4     *terms;                        /* bit vector of shiftables */
{
   sb2     i;
   sb2     nterms = inmach->pxterms;
   int   found = FALSE;
       pxnmach  copymach;
   pxnmach *mach = &copymach;
  
  for (i = 0; (ub2)i < inmach->pxtklen; i++)
    terms[i] = 0;

  /* start at 2 because 1 is EOF, which we never want to try */
  for (i = 2; i <= nterms; i++)
    {
      /* copy inmach since pxnfake will modify it, and pxtkno needs "mach" */
      pxnfcopy(inmach, mach);

      /* turn off debug flag to prevent lots of syntax error msgs */
      mach->debug = FALSE;
      if (pxnfake(mach, i) == PXMERROR)
	continue;
      SETBIT(terms, i);
      found = TRUE;
    }
  return found;
}

/*
 * This procedure makes transitions based on the given input symbol. If a
 * syntax error is found, no change is made to the lrmachine.
 */
pxnmach *pxnmove(
      pxnmach *inmach,                           /* lalr parsing machine */
      pxtokn *tok,                                      /* current token */
      void *   cs,                                      /* compiler state */
      char   *stat)
{
/*       pxacdf     action; */
   sb2         nexttok;
   PXVALTYPE *lrtok = (PXVALTYPE *)pxtatt(tok);
       pxnmach    tmpmach;           /* backup of lrmachine in case of error */
   pxnmach   *mach = &tmpmach;
   pxnmach   *stkmach;                      /* mach use for action stack */
   ub2         ctr;

  /* Back up machine */
  pxnfcopy(inmach, mach);

#ifdef PXDEBUG
  if (mach->debug)
    printf("Lookahead token is %s.\n", pxlktm(mach, pxtgid(tok)));
#endif

  /* See if the token can be shifted */
  if (pxnfake(mach, TOKCVT(tok)) != PXMNORMAL)
    {
      /* Got an error. Maybe token is a keyword. */
      if (pxkywd(cs, pxtgid(tok), tok))
	{
	  /* Token is a keyword. Copy the stack, run the parse with token
	   * as id.
	   */
	  pxnfcopy(inmach, mach);
	  pxtgid(tok) = pxtoid;
#ifdef PXDEBUG
	      if (mach->debug)
		{
		  printf("  Keyword detected, restoring machine: \
state now %d.\n",
			       mach->parse[mach->partop].state);
		  printf("  New token is %s.\n",
				 pxlktm(mach, pxtgid(tok)));
	        }
#endif
	  if (pxnfake(mach, TOKCVT(tok)) == PXMNORMAL)
	    goto success;
	}
      
      /* Check if we've switched grammars.  If so, re-lex the token. */
      if (mach->ngrams > 1)
	{
	  sb2 origstate = inmach->parse[inmach->partop].state;
	  sb2 newstate  = mach->parse[mach->partop].state;
	  if (pxgram[origstate] != pxgram[newstate])
	    {
#ifdef PXDEBUG
	      if (mach->debug)
		printf("  Grammar switch: Pushing token %s.\n",
			       pxlktm(mach, pxtgid(tok)));
#endif
	      PXGETTOK(cs, PXUNGET, tok);
	      
	      /* restore original machine, but assign new lexer */
	      pxnfcopy(inmach, mach);
	      mach->pxgett = pxlex[pxgram[newstate]];
	      
	      tok = PXGETTOK(cs, PXGETNEXT);
#ifdef PXDEBUG
	      if (mach->debug)
		{
		  printf("  Restoring machine: state now %d.\n",
				 mach->parse[mach->partop].state);
		  printf("  New token is %s.\n",
				 pxlktm(mach, pxtgid(tok)));
		}
#endif
	      if (pxnfake(mach, TOKCVT(tok)) == PXMNORMAL)
		goto success;
	    }
	}
		 
      /* Now we truly have an error. */
      inmach->status = PXMERROR;
      return inmach;
    }

	 

success:

  /* We are here because pxnfake has determined that a token may be shifted
   * after 0 or more reduces.  All such actions are in mach's action stack.
   */
  stkmach = mach;
  mach = inmach;                           /* all ok; modify input lrmachine */
  nexttok = pxtgid(tok);
  ctr = 0;
  while (ctr < stkmach->pxnumacts)
    {
      pxacdf *action = &(stkmach->pxacstk[ctr++]);
      switch (action->type)
	{
	case PXACCEPT:
	  mach->status = PXMACCEPT;
	  return mach;
	case PXREDUCE:
	  if (!mach->fnderr)
	    {
	      /* Set the reduction function */
	      if (mach->ngrams > 1)
		{
		  const sb2  *_pxlhsn = pxlhsn;
		  mach->pxredc_ =
		    pxred[mach->pxntgr_[_pxlhsn[action->action]]];
		}
	      pxredc(mach, action->action, cs);
	    }
	  else
	    pxnfkrd(mach, action->action);
	  
	  if (mach->status == PXMERROR || mach->status == PXFATAL ||
	      mach->status == PXOVERFL)
	    {
	      mach->status = PXFATAL;
	      return mach;
	    }
	  continue;
	case PXSHIFT:
	  pxnspus(mach, (sb2)action->action, nexttok, lrtok, 
		 (sb2)pxtlin(tok), (sb2)pxtcol(tok), pxtfil(tok));

	  /* if we can reduce before requiring a lookahead token, do so */

	  while (pxnolk(mach, action) == TRUE)
	    {
#ifdef PXDEBUG
	      if (mach->debug)
		pxdbug(mach, action, nexttok);
#endif
	      if (mach->status == PXMACCEPT)
		return mach;
		
	      if (!mach->fnderr)
		{
		  /* Set the reduction function */
		  if (mach->ngrams > 1)
		    {
		      const sb2   *_pxlhsn = pxlhsn;
		      mach->pxredc_ =
			pxred[mach->pxntgr_[_pxlhsn[action->action]]];
		    }
		  pxredc(mach, action->action, cs);
		}
	      else
		pxnfkrd(mach, action->action);

	      if (mach->status == PXMERROR || mach->status == PXFATAL ||
		  mach->status == PXOVERFL)
		{
		  mach->status = PXFATAL;
		  return mach;
		}
	    }
	  return mach;
	case PXERROR:
         /*we should never get a syntax error, since pxnfake should catch it */

	default:
	  mach->status = PXFATAL;
	  return mach;
	}
    }
  return (pxnmach*)0;	/* should never happen */
}


static int pxspop(mach)
      pxnmach *mach;
{
  sb2 top;
  if ((top = --mach->partop) <= -1)
    return FALSE;

  if (mach->ngrams > 1)
    {
       sb2 index = pxgram[top];
      mach->pxgett  = pxlex[index];
      mach->pxredc_ = pxred[index];
    }

  return TRUE;
}

/* will_n_parse() - see if we can parse ahead n tokens */

static int pxwnp(inmach, cs, token)
          pxnmach *inmach;
      void *   cs;
      pxtokn *token;  
{

  pxtokn *tkstack[PXLOOKST + 1];
  pxnmach  copymach;
      pxnmach *mach = &copymach;
  sb2 stackctr = 0;
  ub2 status; 

  pxnfcopy(inmach, mach);
  tkstack[0] = token;
  while (TRUE)
    {
      status = pxnfake(mach, TOKCVT(tkstack[stackctr]));

      if (status == PXMERROR)
	{
	  while (stackctr > 0)
	    PXGETTOK(cs, PXUNGET, tkstack[stackctr--]);
	  return FALSE;
	}
      pxnmove(mach, tkstack[stackctr], cs, (char *) 0);

      /* [158082] Break if machine has accepted */
      if ((stackctr == PXLOOKST) || (mach->status == PXMACCEPT))     
	break;

      stackctr++;
      tkstack[stackctr] = PXGETTOK(cs, PXGETNEXT);
    }

  /* success */
  while (stackctr > 0)                    /* don't push back passed in token */
    PXGETTOK(cs, PXUNGET, tkstack[stackctr--]);    
  return TRUE;
}


int pxnrcov(
      pxnmach *mach,
      pxtokn *tok,
      void *   cs,
      char *retbuf)     /* put copy of error msg here, only if non-null*/
{

  /* print error message */
  pxtokn *token;
  pxtokn *token0;
  pxtokn  dummytk;
  sb2 i;
  char  errbuf[PXMAXERRLEN];
  size_t  linelen;

  int tmfound = pxnextm(mach, pxextk);

   sprintf((char *)errbuf, "Encountered the symbol \"%s\" ",
		  pxtnam(tok));

  linelen = strlen(errbuf);
  
  if (tmfound)
    {
      int needs_nl = TRUE;  /* ETC will dump a newline, so set to FALSE */

      /* append the list of those tokens expected */
       strcat(errbuf, "when expecting one of the following:\n");
      linelen = strlen(errbuf);
      
      for (i = 1; i <= mach->pxterms; i++)
	{
	  if (BIT(pxextk, i))
	    {
	      char *tstr = pxtmmp(i);
	      
	      /* insert a newline ? */
	      if (linelen + strlen(tstr) > 60)
		{
		   strcat(errbuf, "\n   ");
		   strcat(errbuf, tstr);
		  linelen = strlen(tstr);
		}
	      else                /* no, just append this token's string rep */
		{
		  char locbuf[80];
		   sprintf(locbuf, " %s", tstr);
		   strcat(errbuf, locbuf);
		  linelen += strlen(locbuf);
		}
	      
	      /* Have we printed enough tokens? */
	      if (strlen(errbuf) > (size_t)(PXMAXERRLEN - 80))
		{
		  /* yes, just append "etc" and be done with it */
		   strcat(errbuf, " etc.\n");
		  needs_nl = FALSE;
		  break;
		}
	    }
	}

      /* The final newline was dumped only if "etc." was printed */
      if (needs_nl == TRUE)
	 strcat(errbuf, "\n");
    }

  /**********************************
   * Insert a token.
   **********************************/

  /* First, push present token back on stream */
   PXGETTOK(cs, PXUNGET, tok);

#ifdef PXDEBUG
  if (mach->debug)
     printf("\t\tEntering error recovery.\n\t\tTrying insert token.\n");
#endif


  /* for each token in pxextk, see if we can parse */
  for (i = 1; i <= mach->pxterms; i++)
    if (BIT(pxextk, i))
      {
	pxtcrt(pxtkno[i], (char *)"", 0, 0, (char *)"", (PXVALTYPE *) 0,
	       &dummytk);
	if (pxwnp(mach, cs, &dummytk) == TRUE)
	  {
	    mach->status = PXMNORMAL;
	     pxnmove(mach, &dummytk, cs, (char *)0);
#ifdef PXDEBUG
	    if (mach->debug)
	       printf("\t\tSuccess. Inserted token %s.\n",pxdbtm[i]);
#endif
	     strcat(errbuf, "The symbol \"");
	     strcat(errbuf, pxtmmp(i));
	    
	    {
	      char locbuf[80];
	       sprintf(locbuf,
			      "\" was substituted for \"%s\" to continue.\n",
			      pxtnam(tok));
	       strcat(errbuf, locbuf);
	    }
	    goto bye;
	  }
#ifdef PXDEBUG
	else
	  if (mach->debug)
	     printf("  **Insert token attempt failed.\n");
#endif
      }


  /**********************************
   * Insert a state.
   **********************************/

#ifdef PXDEBUG
  if (mach->debug)
     printf("\t\tTrying insert state.\n");
#endif

  /* get that token back */
  token = PXGETTOK(cs, PXGETNEXT);

  for (i = 0; i < mach->pxnonts; i++)
    {
      sb2 dest = pxngoto(mach, (ub2)mach->parse[mach->partop].state, (ub2)i);
      if (dest != -1)                                  /* dest can be pushed */
	{
	  pxnspus(mach, dest, i, (PXVALTYPE *) 0, 0, 0, (char *)0 );
	  if (pxwnp(mach, cs, token) == TRUE)
	    {
	      pxnmove(mach, token, cs, (char *)0);

#ifdef PXDEBUG
	      if (mach->debug)
		printf("\t\tSuccess.\n");
#endif
	      mach->status = PXMNORMAL;
	      goto bye;
	    }	  
	  else
	    {
	       pxspop(mach);         /* pop state that was just tried */
#ifdef PXDEBUG
	      if (mach->debug)
		 printf("  **Insert state attempt failed.\n");
#endif	      
	    }
	}
    }

  /**********************************
   * Delete a token.
   **********************************/

#ifdef PXDEBUG
  if (mach->debug)
     printf("\t\tTrying delete token.\n");
#endif

  /* save present token, get new one */
  token0 = token;
  token = PXGETTOK(cs, PXGETNEXT);  
  
  if (pxwnp(mach, cs, token) == TRUE)
    {
       pxnmove(mach, token, cs, (char *)0 );
#ifdef PXDEBUG
      if (mach->debug)
	 printf("\t\tSuccess.\n");
#endif
       strcat(errbuf, "The symbol \"");
       strcat(errbuf, pxtnam(token0));
       strcat(errbuf, "\" was ignored.\n");
      goto bye;
    }
#ifdef PXDEBUG
  else
    if (mach->debug)
       printf("  **Delete token attempt failed.\n");
#endif

   PXGETTOK(cs, PXUNGET, token);
  token = token0;

  /**********************************
   * Replace a token.
   **********************************/
  
#ifdef PXDEBUG
  if (mach->debug)
     printf("\t\tTrying replace token.\n");
#endif

  /* for each token in pxextk, see if we can parse */
  for (i = 1; i <= mach->pxterms; i++)
    if (BIT(pxextk, i))
      {
	pxtcrt(pxtkno[i], (char *)"", 0, 0, (char *)"", (PXVALTYPE *) 0,
	       &dummytk);
	if (pxwnp(mach, cs, &dummytk) == TRUE)
	  {
	    mach->status = PXMNORMAL;
	    pxnmove(mach, &dummytk, cs, (char *)0 );

#ifdef PXDEBUG
	    if (mach->debug)
	      printf("\t\tSuccess. Replaced with %s.\n", pxdbtm[i]);
#endif

	     strcat(errbuf, "The symbol \"");
	     strcat(errbuf, pxtmmp(i));
	    {
	      char locbuf[80];
	       sprintf(locbuf,
			      " was inserted before \"%s\" to continue.\n",
			      pxtnam(tok));
	       strcat(errbuf, locbuf);
	    }

	    goto bye;
	  }
#ifdef PXDEBUG
	else
	  if (mach->debug)
	     printf("  **Replace token attempt failed.\n");
#endif

      }

  /************************************
   * Delete a state and insert a token.
   ************************************/
  
#ifdef PXDEBUG
  if (mach->debug)
     printf("\t\tTrying delete state, insert token.\n");
#endif

   PXGETTOK(cs, PXUNGET, token);

  if (pxspop(mach) == TRUE)
    {
       pxnextm(mach, pxextk);
      /* for each token in pxextk, see if we can parse */
      for (i = 1; i <= mach->pxterms; i++)
	if (BIT(pxextk, i))
	  {
	    pxtcrt(pxtkno[i], (char *)"", 0, 0, (char *)"", (PXVALTYPE *) 0,
		   &dummytk);
	    if (pxwnp(mach, cs, &dummytk) == TRUE)
	      {
		mach->status = PXMNORMAL;
		pxnmove(mach, &dummytk, cs, (char *)0);
#ifdef PXDEBUG
		if (mach->debug)
		   printf("\t\tSuccess. Inserted token %s.\n",pxdbtm[i]);
#endif
		goto bye;
	      }
#ifdef PXDEBUG
	    else
	      if (mach->debug)
		 printf("  *Delete/insert attempt failed.\n");
#endif

	  }
    }

  /*******************************
   * Error recovery has failed.
   *******************************/
  
#ifdef PXDEBUG
  if (mach->debug)
     printf("\t\tError recovery failed.\n");
#endif
  mach->status = PXFATAL;

bye:
   PXGETTOK(cs, PXERRORMSG, tok);
  if (retbuf)
     strcpy(retbuf, errbuf);

  if (mach->status == PXFATAL)
    return FALSE;

  return TRUE;

}
