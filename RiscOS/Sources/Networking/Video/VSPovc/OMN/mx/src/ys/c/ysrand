/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * ysrand.c - Random Number Generation
 *
 * DESCRIPTION
 * This routine is primarily for testing purposes, since we would like our
 * normal programs to be relatively predictable.  Anyway, it implements the
 * equivalent of lrand48().  The generation is computed using the equation:
 *
 *  X(n+1) = (aX(n) + c) mod m
 *
 * where a = 0x5deece66d, c = 0xb and m = 2^48.
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif

/*
 * Constants
 */
#define YSRAND_A_HIGH  ((sb4) 0x5)
#define YSRAND_A_LOW   ((ub4) 0xdeece66d)
#define YSRAND_C       ((sb4) 0xb)

/*
 * ysRand - random number generation
 */
ub4 ysRand(sysb8 *seed)
{
  sb4   hi;
  sysb8 a, tmp;

  sysb8mak(&a, YSRAND_A_HIGH, YSRAND_A_LOW);
  sysb8mul(seed, &a, seed);                                 /* compute aX(n) */
  sysb8addb4(seed, seed, YSRAND_C);                     /* compute aX(n) + c */

  /* compute aX(n) + c mod 2^48 */
  sysb8srl(&tmp, seed, 32);
  hi = sysb8msk(&tmp);
  sysb8mak(seed, (hi & 0xffff), (ub4) sysb8msk(seed));

  /* return upper 32 bits */
  sysb8srl(&tmp, seed, 16);
  return (ub4) sysb8msk(&tmp);
}
