/* Copyright (c) Oracle Corporation 1994.  All Rights Reserved. */

/*
  NAME
    mtsp.c
  DESCRIPTION
    Media Server SPlay trees.
  PUBLIC FUNCTIONS
    mtspTree   *mtspNewTree( mtspTree *t, mtspCmpFunc *cmp );
    mtspNode   *mtspLookup( dvoid *key, mtspTree *t );
    mtspNode   *mtspPELookup( dvoid *key, mtspTree *t );
    mtspNode   *mtspNextLookup( dvoid *key, mtspTree *t );
    mtspNode   *mtspEnq( mtspNode *node, mtspTree *t );
    mtspNode   *mtspDeq( mtspNode **np );
    void	mtspRemove( mtspNode *node, mtspTree *t );
    void	mtspSplay( mtspNode *n, mtspTree *t );
    mtspNode   *mtspFHead( mtspTree *t );
    mtspNode   *mtspFNext( mtspNode *n );

  PRIVATE FUNCTIONS
    <x>
  NOTES
    <x>
  MODIFIED   (MM/DD/YY)
    dbrower   11/29/94 -  created.
    dbrower   02/ 8/95 -  silence bogus ncube "used but not set" warning.
    dbrower   05/26/95 -  add mtspPELookup, mtspNextLookup, mtspFTail
			  and mtspFPrev for Bug 284979.
    dpawson   07/17/95 -  Fix bracketing on include of mtsp.h
*/

/*
 * This is derived from code:
 *
 * Copyright (c) 1994 by Academic Press, Boston, Massachusetts.
 * Written by David Brower.  Not derived from licensed software.
 * From the book "Software Solutions in C", edited by Dale Schumacher.
 *
 * Permission is granted to anyone to use this software for any
 * purpose on any computer system, and to redistribute it in any way,
 * subject to the following restrictions:
 *
 *   1. The author is not responsible for the consequences of use of
 *	this software, no matter how awful, even if they arise
 *	from defects in it.
 *
 *   2. The origin of this software must not be misrepresented, either
 *	by explicit claim or by omission.
 *
 *   3. Altered versions must be plainly marked as such, and must not
 *	be misrepresented (by explicit claim or omission) as being
 *	the original software.
 *
 *   4. This notice must not be removed or altered.
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

#ifndef MTSP_ORACLE
#include <mtsp.h>
#endif

/* PRIVATE TYPES AND CONSTANTS */

/* PRIVATE FUNCTION DECLARATIONS */

/* PUBLIC FUNCTIONS */

mtspTree *mtspNewTree( mtspTree *t, mtspCmpFunc *cmp )
{
  t->cmp_mtspTree = cmp;
  t->root_mtspTree = (mtspNode *)NULL;
  return( t );
}

mtspNode *mtspLookup( dvoid *key, mtspTree *t )
{
  mtspNode *n;
  sb4 cmpval = 0;		/* shut up bogus "used before set"  */
  mtspCmpFunc *cmp;

  /* find node in the tree */
  cmp = t->cmp_mtspTree;
  n = t->root_mtspTree;
  while( n && (cmpval = (*cmp)( key, n->key_mtspNode ) ) )
    n = ( cmpval < 0 ) ? n->left_mtspNode : n->right_mtspNode;

  /* reorganize tree around this node */
  if( n )
    mtspSplay( n, t );

  return( n );
}



mtspNode *mtspPELookup( dvoid *key, mtspTree *t )
{
  mtspNode	*p = 0;		/* predecessor */
  mtspNode	*n;		/* the node */
  sb4		cmpval = 0;
  mtspCmpFunc	*cmp;

  /* search to equal or past the key. dumb scan */
  n = t->root_mtspTree;
  cmp = t->cmp_mtspTree;

  while( n && (cmpval = (*cmp)( key, n->key_mtspNode ) ) )
  {
    p = n;
    n = ( cmpval < 0 ) ? n->left_mtspNode : n->right_mtspNode;
  }

  if( n && !cmpval )
    p = n;
  else if( !n )
    n = cmpval > 0 ? p : p ? mtspFPrev(p) : p;
  
  if( n )
    mtspSplay( n, t );

  return( n );
}


mtspNode *mtspNextLookup( dvoid *key, mtspTree *t )
{
  mtspNode *n;
  
  if( n = mtspPELookup( key, t ) )
    n = mtspFNext( n );
  else				/* no before or == key; take head */
    n = mtspFHead( t );

  return( n );
}


mtspNode *mtspEnq( mtspNode *n, mtspTree *t )
{
  mtspNode *left;		/* the rightmost node in the left tree */
  mtspNode *right;		/* the leftmost node in the right tree */
  mtspNode *next;		/* the root_mtspTree of the unsplit part */
  mtspNode *temp;

  dvoid *key;
  mtspCmpFunc *cmp;

  cmp = t->cmp_mtspTree;
  n->up_mtspNode = (mtspNode *)NULL;
  next = t->root_mtspTree;
  t->root_mtspTree = n;
  if( !next )			/* trivial enq */
  {
    n->left_mtspNode = (mtspNode *)NULL;
    n->right_mtspNode = (mtspNode *)NULL;
  }
  else				/* difficult enq */
  {
    key = n->key_mtspNode;
    left = n;
    right = n;

    /* n's left and right children will hold the right and left
       splayed trees resulting from splitting on n->key;
       note that the children will be reversed! */

    if ( (*cmp)( next->key_mtspNode, key ) > 0 )
      goto two;

  one:				/* assert next->key <= key */

    do				/* walk to the right in the left tree */
    {
      temp = next->right_mtspNode;
      if( !temp )
      {
	left->right_mtspNode = next;
	next->up_mtspNode = left;
	right->left_mtspNode = (mtspNode *)NULL;
	goto done;		/* job done, entire tree split */
      }

      if( (*cmp)( temp->key_mtspNode, key ) > 0 )
      {
	left->right_mtspNode = next;
	next->up_mtspNode = left;
	left = next;
	next = temp;
	goto two;		/* change sides */
      }

      next->right_mtspNode = temp->left_mtspNode;
      if( temp->left_mtspNode )
	temp->left_mtspNode->up_mtspNode = next;
      left->right_mtspNode = temp;
      temp->up_mtspNode = left;
      temp->left_mtspNode = next;
      next->up_mtspNode = temp;
      left = temp;
      next = temp->right_mtspNode;
      if( !next )
      {
	right->left_mtspNode = (mtspNode *)NULL;
	goto done;		/* job done, entire tree split */
      }

    } while( (*cmp)( next->key_mtspNode, key ) <= 0 ); /* change sides */

  two:				/* assert next->key > key */

    do				/* walk to the left in the right tree */
    {
      temp = next->left_mtspNode;
      if( !temp )
      {
	right->left_mtspNode = next;
	next->up_mtspNode = right;
	left->right_mtspNode = (mtspNode *)NULL;
	goto done;		/* job done, entire tree split */
      }

      if( (*cmp)( temp->key_mtspNode, key ) <= 0 )
      {
	right->left_mtspNode = next;
	next->up_mtspNode = right;
	right = next;
	next = temp;
	goto one;		/* change sides */
      }
      next->left_mtspNode = temp->right_mtspNode;
      if( temp->right_mtspNode )
	temp->right_mtspNode->up_mtspNode = next;
      right->left_mtspNode = temp;
      temp->up_mtspNode = right;
      temp->right_mtspNode = next;
      next->up_mtspNode = temp;
      right = temp;
      next = temp->left_mtspNode;
      if( !next )
      {
	left->right_mtspNode = (mtspNode *)NULL;
	goto done;		/* job done, entire tree split */
      }

    } while( (*cmp)( next->key_mtspNode, key ) > 0 ); /* change sides */

    goto one;

  done:		/* split is done, branches of n need reversal */

    temp = n->left_mtspNode;
    n->left_mtspNode = n->right_mtspNode;
    n->right_mtspNode = temp;
  }
  return( n );
}

void mtspSplay( mtspNode *n, mtspTree *t )
{
  mtspNode *up;		/* points to the node being dealt with */
  mtspNode *prev;		/* a descendent of up, already dealt with */
  mtspNode *upup;		/* the parent of up */
  mtspNode *upupup;		/* the grandparent of up */
  mtspNode *left;		/* the top of left subtree being built */
  mtspNode *right;		/* the top of right subtree being built */

  left = n->left_mtspNode;
  right = n->right_mtspNode;
  prev = n;
  up = prev->up_mtspNode;

  while( up )
  {
    /* walk up the tree towards the root_mtspTree, splaying all to
       the left of n into the left subtree, all to right into the
       right subtree */

    upup = up->up_mtspNode;
    if( up->left_mtspNode == prev ) /* up is to the right of n */
    {
      if( upup && upup->left_mtspNode == up )
      {
	upupup = upup->up_mtspNode;
	upup->left_mtspNode = up->right_mtspNode;
	if( upup->left_mtspNode )
	  upup->left_mtspNode->up_mtspNode = upup;
	up->right_mtspNode = upup;
	upup->up_mtspNode = up;
	if( !upupup )
	  t->root_mtspTree = up;
	else if( upupup->left_mtspNode == upup )
	  upupup->left_mtspNode = up;
	else
	  upupup->right_mtspNode = up;
	up->up_mtspNode = upupup;
	upup = upupup;
      }
      up->left_mtspNode = right;
      if( right )
	right->up_mtspNode = up;
      right = up;

    }
    else			/* up is to the left of n */
    {
      if( upup && upup->right_mtspNode == up )
      {
	upupup = upup->up_mtspNode;
	upup->right_mtspNode = up->left_mtspNode;
	if( upup->right_mtspNode )
	  upup->right_mtspNode->up_mtspNode = upup;
	up->left_mtspNode = upup;
	upup->up_mtspNode = up;
	if( !upupup )
	  t->root_mtspTree = up;
	else if( upupup->right_mtspNode == upup )
	  upupup->right_mtspNode = up;
	else
	  upupup->left_mtspNode = up;
	up->up_mtspNode = upupup;
	upup = upupup;
      }
      up->right_mtspNode = left;
      if( left )
	left->up_mtspNode = up;
      left = up;
    }
    prev = up;
    up = upup;
  }

  /*
  if( t->root_mtspTree != prev )
  {
    fprintf(stderr, " *** bug in spsplay: n not in t *** " );
    abort();
  }
  */

  n->left_mtspNode = left;
  n->right_mtspNode = right;
  if( left )
    left->up_mtspNode = n;
  if( right )
    right->up_mtspNode = n;
  t->root_mtspTree = n;
  n->up_mtspNode = (mtspNode*)NULL;

}

void mtspRemove( mtspNode *n, mtspTree *t )
{
  mtspNode *x;

  mtspSplay( n, t );
  x = mtspDeq( &t->root_mtspTree->right_mtspNode );
  if( !x )			/* empty right subtree */
  {
    t->root_mtspTree = t->root_mtspTree->left_mtspNode;
    if (t->root_mtspTree)
      t->root_mtspTree->up_mtspNode = (mtspNode*)NULL;
  }
  else				/* non-empty right subtree */
  {
    x->up_mtspNode = (mtspNode*)NULL;
    x->left_mtspNode = t->root_mtspTree->left_mtspNode;
    x->right_mtspNode = t->root_mtspTree->right_mtspNode;
    if( x->left_mtspNode )
      x->left_mtspNode->up_mtspNode = x;
    if( x->right_mtspNode )
      x->right_mtspNode->up_mtspNode = x;
    t->root_mtspTree = x;
  }
}

/* NOTE: pointer to a node pointer! */
mtspNode *mtspDeq( mtspNode **np )
{
  mtspNode *deq;		/* one to return */
  mtspNode *next;       	/* the next thing to deal with */
  mtspNode *left;      	/* the left child of next */
  mtspNode *farleft;		/* the left child of left */
  mtspNode *farfarleft;	/* the left child of farleft */

  if( !np || !*np )
  {
    deq = (mtspNode*)NULL;
  }
  else
  {
    next = *np;
    left = next->left_mtspNode;
    if( !left )
    {
      deq = next;
      *np = next->right_mtspNode;

      if( *np )
	(*np)->up_mtspNode = (mtspNode*)NULL;

    }
    else for(;;)		/* left is not null */
    {
      /* next is not it, left is not NULL, might be it */
      farleft = left->left_mtspNode;
      if( !farleft )
      {
	deq = left;
	next->left_mtspNode = left->right_mtspNode;
	if( left->right_mtspNode )
	  left->right_mtspNode->up_mtspNode = next;
	break;
      }

      /* next, left are not it, farleft is not NULL, might be it */
      farfarleft = farleft->left_mtspNode;
      if( !farfarleft )
      {
	deq = farleft;
	left->left_mtspNode = farleft->right_mtspNode;
	if( farleft->right_mtspNode )
	  farleft->right_mtspNode->up_mtspNode = left;
	break;
      }

      /* next, left, farleft are not it, rotate */
      next->left_mtspNode = farleft;
      farleft->up_mtspNode = next;
      left->left_mtspNode = farleft->right_mtspNode;
      if( farleft->right_mtspNode )
	farleft->right_mtspNode->up_mtspNode = left;
      farleft->right_mtspNode = left;
      left->up_mtspNode = farleft;
      next = farleft;
      left = farfarleft;
    }
  }
  return( deq );
}

mtspNode *mtspFHead( mtspTree *t )
{
  mtspNode *x;

  if( ( x = t->root_mtspTree ) )
    while( x->left_mtspNode )
      x = x->left_mtspNode;

  return( x );
}

mtspNode *mtspFTail( mtspTree *t )
{
  mtspNode *x;

  if( ( x = t->root_mtspTree ) )
    while( x->right_mtspNode )
      x = x->right_mtspNode;

  return( x );
}



mtspNode *mtspFNext( mtspNode *n )
{
  mtspNode *next;
  mtspNode *x;

  /* a long version, avoids splaying for fast average,
   * poor amortized bound
   */

  if( !n )
    return( n );

  x = n->right_mtspNode;
  if( x )
  {
    while( x->left_mtspNode )
      x = x->left_mtspNode;
    next = x;
  }
  else				/* x == NULL */
  {
    x = n->up_mtspNode;
    next = (mtspNode*)NULL;
    while( x )
    {
      if( x->left_mtspNode == n )
      {
	next = x;
	x = (mtspNode*)NULL;
      }
      else
      {
	n = x;
	x = n->up_mtspNode;
      }
    }
  }
  return( next );
}


mtspNode *mtspFPrev( mtspNode *n )
{
  mtspNode *prev;
  mtspNode *x;

  if( !n )
    return( n );

  x = n->left_mtspNode;
  if( x )
  {
    while( x->right_mtspNode )
      x = x->right_mtspNode;
    prev = x;
  }
  else
  {
    x = n->up_mtspNode;
    prev = (mtspNode *)NULL;
    while( x )
    {
      if( x->right_mtspNode == n )
      {
	prev = x;
	x = (mtspNode *)NULL;
      }
      else
      {
	n = x;
	x = n->up_mtspNode;
      }
    }
  }
  return( prev );
}
