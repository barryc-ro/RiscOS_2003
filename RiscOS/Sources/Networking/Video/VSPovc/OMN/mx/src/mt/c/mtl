#ifndef SYSI_ORACLE
# include <sysi.h>
#endif

#ifndef YS_ORACLE
# include <ys.h>
#endif

#ifndef YSFMT_ORACLE
# include <ysfmt.h>
#endif

#ifndef MTL_ORACLE
# include <mtl.h>
#endif

static ysidDecl(MTL_EX_FATAL) = "mtl::fatal";
static ysidDecl(MTL_EX_EXIT)  = "mtl::exit";

/*
 * mtlInit - does nothing anymore. ysRecord() handles everything for us
 */
void   mtlInit( sb4    component, CONST char  *str )
{
  yssnk *snk;
  snk = ysSinkFind("tty"); 
  if (snk)
    ysAddFilter(snk, "fac MT");
}

/*
 * mtlLog - record a message
 */
void   mtlLog(CONST char  *fmt, ... )
{
  char buf[1024];
  va_list   ap;

  va_start(ap, fmt);
  ysFmtVaStrl(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  ysRecord("OMN", "MT", (ub4)2500, YSLSEV_INFO, (char *)0, 
  	   YSLSTR(buf), YSLEND);
}

/*
 * Logs a message associated with an unrecoverable internal error
 * (eg. the program state went bad because of a programming bug).
 * Performs actions to facilitate debugging.
 */
void   mtlFatal( CONST char  *fmt, ... )
{
  char buf[1024];
  va_list   ap;

  va_start(ap, fmt);
  ysFmtVaStrl(buf, sizeof(buf), fmt, ap);
  ysRecord("OMN", "MT", (ub4)2501, YSLSEV_EMERG, (char *)0, 
  	   YSLSTR(buf), YSLEND);
  va_end(ap);
  ysePanic(MTL_EX_FATAL);
}

/*
 * Logs a message associated with an unrecoverable error from an uncontrolled
 * source (eg. a system call).  Exits the process without performing actions
 * to facilitate debugging.
 */
void   mtlExit( CONST char  *fmt, ... )
{
  char buf[1024];
  va_list   ap;

  va_start(ap, fmt);
  ysFmtVaStrl(buf, sizeof(buf), fmt, ap);
  ysRecord("OMN", "MT", (ub4)2502, YSLSEV_CRIT, (char *)0, YSLSTR(buf), 
           YSLEND);
  va_end(ap);
  ysePanic(MTL_EX_EXIT);
}




