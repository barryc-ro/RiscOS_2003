/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * NAME
 *   yrcontd.c - Implementation of CORBA::Contained
 *
 * NOTES
 * This is basically an abstract base class. It's implementation should
 * never be active. Some of the operation implementations are called
 * by derived classes, others cannot be. The ones which cannot be are
 * equivalent to C++ pure member functions - they must be reimplemented
 * by derived interfaces.
 *
 * HISTORY
 * 11/09/95 kcoleman    Creation
 */
 
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
 
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif

#ifndef YRCORBAI_H
#include <yrcorbaI.h>
#endif
 
#ifndef YR_ORACLE
#include <yr.h>
#endif
 
#ifndef YOORB_ORACLE
#include <yoorb.h>
#endif
 
#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif

externdef ysidDecl(CORBA_Contained_implid) = "ORA_Contained";


/************************************************************************/
/* Interface CORBA::Contained */
/************************************************************************/
 
CORBA_Contained_Description CORBA_Contained_describe_i(
     CORBA_Contained or, yoenv* ev)
{
    /* This should never be called directly. It is only meaningful
     *   when called on a specialized (derived) object, in which case
     *   an implementation specific to the derived class should be
     *   provided.
     */
  CORBA_Contained_Description dummy = {CORBA_dk_none, {0,0}};

  yseThrow(YR_EX_UNIMPLEMENTED);
  return dummy;           /* unreachable, but stops compiler warnings */
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_DefinitionKind CORBA_Contained__get_def_kind_i(
     CORBA_Contained or, yoenv* ev)
{
  return CORBA_IRObject__get_def_kind_i( (CORBA_IRObject) or, ev);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_RepositoryId CORBA_Contained__get_id_i( CORBA_Contained or, yoenv* ev)
{
  return ysStrDupWaf( yrGetRepId( yrCORBAtoYR( (CORBA_IRObject)or)), yoAlloc);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Identifier CORBA_Contained__get_name_i( CORBA_Contained or, yoenv* ev)
{
  return ysStrDupWaf( yrGetName( yrCORBAtoYR( (CORBA_IRObject)or)), yoAlloc);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_VersionSpec CORBA_Contained__get_version_i(
     CORBA_Contained or, yoenv* ev)
{
  return ysStrDupWaf( yrGetVersion( yrCORBAtoYR((CORBA_IRObject)or)), yoAlloc);
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Container CORBA_Contained__get_defined_in_i(
     CORBA_Contained or, yoenv* ev)
{
  yrobj* result = yrGetDefinedIn( yrCORBAtoYR( (CORBA_IRObject)or));
 
  return (CORBA_Container) yoDuplicate( yrYRtoCORBA(result));
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_ScopedName CORBA_Contained__get_absolute_name_i(
     CORBA_Contained or, yoenv* ev)
{
  char* interim;
  char* result;
  yrobj* obj;

  obj = yrCORBAtoYR( (CORBA_IRObject) or);
  yseTry
  {
    interim = yrGetAbsoluteName( obj);
    result = ysStrDupWaf( interim, yoAlloc);
    ysmGlbFree( (dvoid*)interim);
  }
  yseCatchAll
  {
    result = ysStrDupWaf( "::", yoAlloc);
  }
  yseEnd
  return result;
}
 
/* ---------------------------------------------------------------------- */
 
CORBA_Repository CORBA_Contained__get_containing_repository_i(
     CORBA_Contained or, yoenv* ev)
{
  yrobj* result = yrGetRepository( yrCORBAtoYR( (CORBA_IRObject)or));
 
  return (CORBA_Repository) yoDuplicate( yrYRtoCORBA(result));
}
 
/* ---------------------------------------------------------------------- */
 
 
externdef struct CORBA_Contained__tyimpl CORBA_Contained__impl =
 {
  CORBA_Contained_describe_i,
  CORBA_Contained__get_id_i,
  CORBA_Contained__get_name_i,
  CORBA_Contained__get_version_i,
  CORBA_Contained__get_defined_in_i,
  CORBA_Contained__get_absolute_name_i,
  CORBA_Contained__get_containing_repository_i,
  CORBA_Contained__get_def_kind_i
 };
 


/* ---------------------------------------------------------------------- */

void Init_CORBA_Contained()
{
  YR_SET_IMPL(CORBA_Contained, FALSE, 0);
  YR_IMPL_READY(CORBA_Contained, 0);
}

void Term_CORBA_Contained()
{
  YR_IMPL_DEACTIVATE(CORBA_Contained);
}
