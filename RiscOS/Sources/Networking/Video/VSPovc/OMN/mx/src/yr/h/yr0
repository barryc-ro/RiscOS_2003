/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yr0.h - Oracle OMX Interface Repository Private Definitions
 *
 * NOTES
 *
 * HISTORY
 * 01/03/97 kcoleman	Bump IFR I/O vers for new typecode marshalling
 * 12/18/96 kcoleman	Bump IFR I/O vers for new typecode format
 * 07/08/96 kcoleman	Bump IFR I/O vers for context id support.
 * 02/27/96 kcoleman	Bump IFR I/O version # for bug 336120. See yr.c.
 * 02/12/96 kcoleman	Make sure all CORBA objects get cleaned up
 * 02/01/96 kcoleman	Manage anonymous types differently
 * 01/24/96 kcoleman	Added YRSRV_DEFAULT_TAG, for bug 336634
 * 11/18/95 kcoleman	Added YR_MAX_PRIM
 * 10/27/95 kcoleman	Added stuff for yrwrite, yrread
 * 07/14/95 kcoleman	Creation
 */

#ifndef YR0_ORACLE
#define YR0_ORACLE

#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef SYSFP_ORACLE
#include <sysfp.h>
#endif
#ifndef YRTYPES_ORACLE
#include <yr.h>
#endif

/*
 * YR_SCOPED_SEP, YR_CMAP_SEP - separators for various naming conventions
 */
#define YR_SCOPED_SEP "::"
#define YR_SCOPED_SEP_SIZE 2

/*
 * yrclean - Definition of a yrobj destruction operation. Takes a pointer
 *	to the object to be destroyed. Object is invalid after invocation.
 *      The two function pointers are callbacks for usrp and CORBA or
 *      cleanup, respectively.
 */
typedef void (*yrclean)(yrobj*, ysmff, ysmff);


void yrSetName( yrobj* obj, CONST char* name);
void yrSetSrcnm( yrobj* obj, CONST char* name);
yrobj* yrCreateObj(CONST char* tag);
yrobj* yrCreatePrimitive( yrobj* or, yrpk kind);
void yrDestroyObj( yrobj* obj, yslst* deferred, ysmff usrpFree, ysmff objFree);
void yrContainerAdd( yrobj* container, yrobj* item);

/*
 * Repository-private data associated with a yrdkRepository object. 
 * Hold info global to a repository like locking data, new object seq
 * counter, etc.
 */
struct yrprivate
{
  ub4 seqnum;			/* sequence counter for new obj's */
  sword trace;		        /* IFR tracing level. 0 == not enabled. */
  yrobj* object;                /* pointer to ::Object */
  yrobj* corba_object;          /* pointer to CORBA::Object */
  yslst* anon;		        /* list of anonymous seq, str, array types */
  /* TBD */
};
#define YR_SEQ_MAX UB4MAXVAL

/* ----------------------------------------------------------------------- */
/*
 * yrAssignId - Assign a repository ID to an object
 *
 * DESCRIPTION
 * Assign a unique repository ID to an object. The id is assigned by
 * <repository>, which must be open exclusively opened for writing in order
 * to insure uniqueness. <robj> need not be an object in <repository>, but
 * YR_EX_? is raised if <robj> already has an RID because this may
 * introduce repository inconsistencies.
 *
 * TBD
 * Do we return it or tag the object?
 *
 * RAISES
 * YR_EX_READONLY - <repository> is not writeable, so RID's cannot be
 * 	given out.
 * YR_EX_EXISTS - <robj> already has a repository id.
 * YR_EX_REPFULL - repository cannot contain any more objects
 */
externref ysidDecl(YR_EX_READONLY);
externref ysidDecl(YR_EX_REPFULL);
externref ysidDecl(YR_EX_EXISTS);
void yrAssignId( yrobj* repository, yrobj* robj, boolean usePrefix);

void yrDump( yrobj* obj);

/* ----------------------------------------------------------------------- */
/*
 * Things for yrwrite.c and yrread.c
 */

/*
 * When loading data into the IFR, the repid is loaded first. If an object
 * with that repid is already in the repository, <existing> is set to
 * point to it.
 *
 * A new repository object <newobj> is also created and it's <defined>
 * flag set to false. All references to this repid within the file being
 * loaded are set to point to <existing> if it's set, otherwise to newobj.
 *
 * When loading is completed, the list of load blocks is walked to see if
 * the new and existing objects are equivalent. If they are, the new obj
 * is thrown away. If not, an error has occurred and the load is rejected.
 *
 *    existing  defined?  newobj  defined?   Means
 *    yes       yes       yes     yes        Possibly innocuous redefinition
 *                                           Objs must match at end of load
 *    yes       yes       yes     no         Resolved external reference
 *    yes       no        yes     yes        Resolved external reference
 *    no        no        yes     yes        Totally new object
 *    no        no        yes     no         Unresolved extern, err if not
 *                                           resolved by end of load
 *    yes       no        yes     no         Unresolved external ref - error
 *                                           resolved by end of load
 * 
 * When a single data file is completed, all redefinitions must resolve to 
 * equivalent objects. The newer object is discarded at this time. When 
 * loading a directory, we defer checking for outstanding unresolved 
 * external references until the entire directory has been loaded. This 
 * allows loading a self-consistent directory without worrying about load 
 * order.
 *
 * Note that it is still possible to compare two objects for equivalence
 * if they contain references to unresolved external objects: Extern IFR
 * obj refs are identified by repid, so matching repid's guarantee equality.
 *
 * The only two cases for which this assertion doesn't hold are interfaces
 * (because of forward declarations) and modules (because they come in
 * discreet pieces).
 *
 * In the case of an interface, the full declaration always wins out. If
 * a new obj is read in and a full decl exists, the new obj is discarded.
 * If a full decl is read in and a forward decl exists, the forward decl
 * is transformed into the full decl (NOT replaced). Note that this
 * transformation cannot be done until the entire load is accepted since
 * we do not change the existing repository state until then.
 *
 * In the case of a module, it is enough while loading for all pointers 
 * to reference whatever piece is already in the repository. At the 
 * point when we compare new and existing objects for equality, modules
 * have an additional constraint: One must either be a subset of the
 * other, or they must have nothing in common. In the first case, it is
 * assumed the subset is the same as some previously loaded module piece.
 * In the second case, it is assumed it's an entirely new piece. 
 */
struct yrldblk
{
  boolean merge;
  boolean visited;
  boolean equal;
  yrobj* newobj;
  yrobj* existing;
};
typedef struct yrldblk yrldblk;

/* ----------------------------------------------------------------------- */
/*
 * Things for yrwrite.c and yrread.c
 */
typedef struct yrwrtblk
{
  dvoid* ptr;
  ub4 recnum;
} yrwrtblk;

/* YRX_BUFF_SZ MUST BE A MULTPLE OF 16. See ysx.h */
#define YRX_BUFF_SZ ((size_t) 16000)

/* Version of the IFR file format */
#define YR_IO_VERS 6
#define YR_IO_NOBACK 6               /* no backward compat before this vers */
#define YR_IO_TAG "OMXIFR"
#define YR_IO_TAG_SZ 7

/*
 * yrwrtdesc - IFR Write operation descriptor.
 *
 * Contains a linear list of all yrobj's requiring I/O and a hash
 * table for mapping between yrobj and their corresponding swizzled
 * pointer index. See yrwrite.c.
 */
typedef struct yrwrtdesc
{
  yshsh* tbl;
  yslst* list; 
} yrwrtdesc;

typedef struct yrctx
{
  union 
  {
    yrwrtdesc wrt;
    yrldblk* rd;
  } objs;                    /* IFR object being read/written */
  union
  {
    yrwrtdesc wrt;
    char** rd;
  } strs;                    /* strings being read/written */
  ub4 ioVers;                /* I/O format version of current file */
  sysfp* fp;                 /* File currently being read/written */
  ysx* xstr;                 /* Data en/decoding stream */
  ub4 maxPrim;               /* Max value of yrpk in data file */
  yrobj* repository;         /* Repository being written or read into */
} yrctx;


/* ----------------------------------------------------------------------- */
/*
 * Support for repository I/O
 */
void yrWrite( yrobj* root, CONST char* fn);
void yrRead( yrobj* rep, CONST char* fn, ub4* count, yrldblk** data);

externref ysidDecl( YR_EX_WRITE_FAIL);
externref ysidDecl( YR_EX_READ_FAIL);
externref ysidDecl( YR_EX_OPEN_FAIL);
externref ysidDecl(YR_EX_BADHDR);
externref ysidDecl(YR_EX_UNDEFINED);
externref ysidDecl(YR_EX_REDEFINED);

/* ----------------------------------------------------------------------- */
/*
 * Maximum value of yrpk. Used for repository I/O and for assigning
 * repid's to primitive types.
 */
#define YR_MAX_PRIM 16

/* ----------------------------------------------------------------------- */
/*
 * Default implementation id/tag for runtime repository server. Used by
 * both the server (mnirsrv) and the controller client (mnirctl).
 */
#ifndef YRSRV_DEFAULT_TAG
#define YRSRV_DEFAULT_TAG "OMNIFR"
#endif /* YRSRV_DEFAULT_TAG */

/* ----------------------------------------------------------------------- */
/*
 * Error reporting and tracing support. Based on ysRecord (see yslog.h)
 */

#define YR_PROD "OMN"
#define YRMCL_FAC "YR"
#define YRSRV_FAC "YR"
#define YR_FAC "YR"
#define YRMSG_BASE ((ub4) 5500)
#define YR_MSG( num, fac) YR_PROD, (fac), (YRMSG_BASE + (ub4)(num))

#endif /* YR0_ORACLE */
