/* Copyright (c) Oracle Corporation 1996.  All Rights Reserved. */

/*
  NAME
    yemsg.c
  DESCRIPTION
    Interfaces for doing lookup of xxx.mot format message files.

    This version loads all messages into memory, from a list of
    files.
    
  PUBLIC FUNCTIONS

    yemsgInit()
    yemsgTerm()
    yemsgLookup()

  PRIVATE FUNCTIONS

    yemsgLoad()
    yemsgUnload()
    yemsgFind()
    yemsgDestroyNode()
    yemsgCmp()

  MODIFIED   (MM/DD/YY)
    dbrower   01/24/96 -  created.
    dbrower   03/ 1/96 -  rewrote for ysMsg, renamed.
    dbrower   03/ 1/96 -  olint.
    dbrower   09/23/96 -  fix bug 399323 -- check for idmax before doing
			  lookup.
*/
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YEMSG_ORACLE
#include <yemsg.h>
#endif
#ifndef YSSP_ORACLE
#include <yssp.h>
#endif
#ifndef SYSFP_ORACLE
#include <sysfp.h>
#endif
#ifndef SYSXCD_ORACLE
#include <sysxcd.h>
#endif
#ifndef YSMSG_ORACLE
#include <ysmsg.h>
#endif

/* PRIVATE TYPES AND CONSTANTS */

typedef struct yemsgn yemsgn;

struct yemsgn
{
  ysspNode  node_yemsgn;	/* key points to yemsgn */
  char	    *prod_yemsgn;	/* allocated copy */
  char	    *fac_yemsgn;	/* allocated copy */
  char	    *data_yemsgn;	/* allocated text buffer */
  size_t    offset_yemsgn;	/* data offset */
  ysmsgd    *msgd_yemsgn;
};

struct yemsgcx
{
  ysspTree  files_yemsgcx;
};

externdef ysidDecl( YEMSG_EX_FILE_ERR ) = "yemsg::fileError";

externdef ysmtagDecl(yemsgcx_tag) = "yemsgcx";
externdef ysmtagDecl(yemsgn_tag) = "yemsgn";

/* PRIVATE FUNCTION DECLARATIONS */

STATICF void yemsgLoad( yemsgcx *cx, char *prod, char *fac );
STATICF void yemsgUnload( yemsgcx *cx, char *prod, char *fac );
STATICF yemsgn *yemsgFind( yemsgcx *cx, char *prod, char *fac );
STATICF void yemsgDestroyNode( yemsgn *mn );
STATICF sword yemsgCmp( CONST dvoid *a , CONST dvoid *b );

/* PUBLIC FUNCTIONS */

yemsgcx *yemsgInit()
{
  yemsgcx *cx;

  cx = (yemsgcx*)ysmGlbAlloc( sizeof(*cx), yemsgcx_tag );
  DISCARD ysspNewTree( &cx->files_yemsgcx, yemsgCmp );

  return( cx );
}

void yemsgTerm( yemsgcx *cx )
{
  ysspNode *n;

  /*CONSTCOND*/
  ysmCheck( cx, yemsgcx_tag );

  while( (n = ysspDeqTree( &cx->files_yemsgcx ) ) )
    yemsgDestroyNode( (yemsgn*)n );

  ysmGlbFree( (dvoid*)cx );
}


CONST char *yemsgLookup( yemsgcx *cx, char *prod, char *fac, ub4 msgId )
{
  yemsgn *mn;
  char *msg = (char*)0;
  size_t offset;

  /*CONSTCOND*/
  ysmCheck( cx, yemsgcx_tag );

  if( !(mn = yemsgFind( cx, prod, fac ) ) )
  {
    yemsgLoad( cx, prod, fac );
    mn = yemsgFind( cx, prod, fac );
  }
  if( mn && msgId <= mn->msgd_yemsgn->idmax )
  {
    offset =
      (size_t)ysMsgOffset( mn->msgd_yemsgn, msgId ) - mn->offset_yemsgn;
    msg = mn->data_yemsgn + offset; 
  }
  return msg;
}

/* PRIVATE FUNCTIONS */

/* ---------------------------- yemsgLoad ---------------------------- */
/*
  NAME
    yemsgLoad
  DESCRIPTION
    Prepare to do lookups against the files whose paths are elements in
    the fileList.  fileList is left alone.

    This may read the file contents immediately, or defer the read.  Clients
    should assume the worst behaviour: the file is completely read
    immediately, but the file must remain valid forever.

  PARAMETERS
    cx		-- the context to load into.
    fileList	-- a list whose elements are char* strings of sysfp path
		    names of files to load.
  RETURNS
    none
*/
STATICF void yemsgLoad( yemsgcx *cx, char *prod, char *fac )
{
  yemsgn *mn = (yemsgn*)ysmGlbAlloc(sizeof(*mn), yemsgn_tag );
  size_t fsz;
  sysb8	dataoff;

  /*CONSTCOND*/
  ysmCheck( cx, yemsgcx_tag );

  yemsgUnload( cx, prod, fac );

  if( !(mn->msgd_yemsgn = ysMsgOpen( prod, fac ) ) )
    return;

  fsz = (size_t)ysMsgDataLength( mn->msgd_yemsgn );
  mn->data_yemsgn = (char*)ysmGlbAlloc( fsz, "data_yemsgn");
  mn->offset_yemsgn = (size_t)ysMsgDataOffset( mn->msgd_yemsgn );

  sysb8ext( &dataoff, mn->offset_yemsgn );
  DISCARD sysfpSeek( mn->msgd_yemsgn->fp, &dataoff );
  if( fsz != sysfpRead( mn->msgd_yemsgn->fp, (dvoid*)mn->data_yemsgn, fsz ) )
  {
    ysmGlbFree( (dvoid*)mn->data_yemsgn );
    yslError("yemsg: error reading file for %s/%s\n", prod, fac );
    ysePanic( YEMSG_EX_FILE_ERR );
  }
  mn->prod_yemsgn = ysStrDup( prod );
  mn->fac_yemsgn = ysStrDup( fac );
  mn->node_yemsgn.key_ysspNode = (dvoid*)mn;
  DISCARD ysspEnq( &mn->node_yemsgn, &cx->files_yemsgcx );
}


/* ---------------------------- yemsgUnload ---------------------------- */
/*
  NAME
    yemsgUnload
  DESCRIPTION
    Unload all the previously loaded messages, and clear out the allocated
    buffers.
  PARAMETERS
    cx	    -- context to clean out.
  RETURNS
    none
*/

STATICF void yemsgUnload( yemsgcx *cx, char *prod, char *fac )
{
  yemsgn *mn;

  if( (mn = yemsgFind( cx, prod, fac ) ) )
  {
    ysspRemove( &mn->node_yemsgn, &cx->files_yemsgcx );
    yemsgDestroyNode( mn );
  }
}


STATICF void yemsgDestroyNode( yemsgn *mn )
{
  ysMsgClose( mn->msgd_yemsgn );
  ysmGlbFree( (dvoid*)mn->data_yemsgn );
  ysmGlbFree( (dvoid*)mn->prod_yemsgn );
  ysmGlbFree( (dvoid*)mn->fac_yemsgn );
  ysmGlbFree( (dvoid*)mn );
}


/* ---------------------------- yemsgFind ---------------------------- */
/*
  NAME
    yemsgFind
  DESCRIPTION
    Lookup an id in the tree, returning the message node if found.
  PARAMETERS
    cx	    -- the context.
    prod   -- the product
    fac	    -- the facility
  RETURNS
    pointer to the message node, or NULL if not found.
*/
STATICF yemsgn *yemsgFind( yemsgcx *cx, char *prod, char *fac )
{
  yemsgn lookup;
  lookup.prod_yemsgn = prod;
  lookup.fac_yemsgn = fac;

  return( (yemsgn*)ysspLookup( (dvoid*)&lookup, &cx->files_yemsgcx ) );
}


/* ---------------------------- yemsgCmp ---------------------------- */
/*
  NAME
    yemsgCmp
  DESCRIPTION
    Comparision function for yemsgn nodes, keyed on prod/fac
  PARAMETERS
    a	dvoid * to a yemsgn;
    b	dvoid * to another yemsgn;
  RETURNS
    comparison ordering of *a and *b, < 0, 0 or > 0
*/

STATICF sword yemsgCmp( CONST dvoid *a, CONST dvoid *b )
{
  sword rv;
  yemsgn *ap = (yemsgn*)a;
  yemsgn *bp = (yemsgn*)b;

  if( !(rv = (sword)strcmp( ap->prod_yemsgn, bp->prod_yemsgn )) )
    rv = (sword)strcmp( ap->fac_yemsgn, bp->fac_yemsgn );

  return( rv );
}


