/* Copyright (c) Oracle Corporation 1995.  All Rights Reserved. */

/*
  NAME
    yotemul.c
  DESCRIPTION
    yot emulation on top of MN -- temporary only.
  PUBLIC FUNCTIONS
    <x>
  PRIVATE FUNCTIONS
    <x>
  NOTES
    <x>
  MODIFIED   (MM/DD/YY)
    dbrower   07/24/95 -  created.
*/

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

#ifndef SMNI_ORACLE
#include <smni.h>
#endif

#ifndef YS_ORACLE
#include <ys.h>
#endif

#ifndef YSL_ORACLE
#include <ysl.h>
#endif

#ifndef MN_ORACLE
#include <mn.h>
#endif

#ifndef MNI_ORACLE
#include <mni.h>
#endif

#ifndef YOT_ORACLE
#include <yot.h>
#endif

#ifndef YSE_ORACLE
#include <yse.h>
#endif

#ifndef YSV_ORACLE
#include <ysv.h>
#endif


/* PRIVATE TYPES AND CONSTANTS */
/* YT_EX_* should not be defined here.  This is a temporary hack
   until YT becomes real.  At which point we will fix this evilness.
 */
externdef ysidDecl(YT_EX_WOULDBLOCK) = "yt::wouldblock";
externdef ysidDecl(YT_EX_FAILCONN) = "yt::failconn";
externdef ysidDecl(YT_EX_BADADDR) = "yt::badaddr";
externdef ysidDecl(YT_EX_NOTCONN) = "yt::notconn";
externdef ysidDecl(YT_EX_BROKEN) = "yt::broken";
externdef ysidDecl(YT_EX_DISCONN) = "yt::disconn";
externdef ysidDecl(YT_EX_UNKNOWN) = "yt::unknown";              /* catch all */
externdef ysidDecl(YT_EX_UNIMPL) = "yt::unimplemented";

externdef ysmtagDecl(yotTagAddr) = "yota";

/* PRIVATE FUNCTION DECLARATIONS */
STATICF void yotEvtCancel(dvoid *usrp, CONST ysid *exid, dvoid *arg,
                         size_t argsz);
STATICF void yotHandler( dvoid *arg, sb4 val );


/* PUBLIC FUNCTIONS */

/* ytInit() & ytTerm should not be defined here.  This is a temporary hack
   until all references to them can be removed from the source code.
 */
void ytInit(void)
{
  smniInit((dvoid *)0,(mnLogger)yslError);
}

void ytTerm(void)
{
  smniTerm();
}

/*
 * yotOpen - open a port
 *
 * DESCRIPTION
 * yotOpen() creates a port using the specified transport protocol.  A port
 * is an endpoint used for communication.  A port may be used to both send
 * and receive data.  A stream port is opened in an active, unconnected
 * mode, meaning that it either needs to be connected using yotConnect() or
 * converted to a passive port ysing yotListen().
 */
yotp *yotOpen(sword protocol)
{
  return( (yotp *)mnOpen( (ub4)protocol ) );
}

/*
 * yotClose - close a port
 *
 * DESCRIPTION
 * yotClose() closes a port.  yotClose() will block until all outgoing data
 * has been flushed.  To avoid blocking unexpectedly, use yotFlush() prior
 * to closing the port.  Any unread data or inbound connection requests
 * on passive streams are discarded.  For a connected port, the connection
 * is dissolved.
 */
void yotClose(yotp *port)
{
  /* FIXME -- errors ignored here */
  DISCARD mnClose( (mnp *)port );
}

/*
 * yotFlush - flush a port
 *
 * DESCRIPTION
 * yotFlush() flushes outgoing data from a port.  Data sent by a reliable
 * protocol is not flushed until receipt by the destination has been
 * confirmed.  A connection attempt is not flushed until the connection
 * completes.  The given event will be triggered when the data pending
 * at the time this routine is invoked has been flushed.  Subsequent
 * data sent may or not have been flushed.  If no event is given, yotFlush()
 * blocks unless the port is non-blocking.
 */
void yotFlush(yotp *port, ysevt *evt)
{
  /* Nothing for now */
}

/*
 * yotSetOptions, yotGetOptions - get & set options
 *
 * DESCRIPTION
 * yotSetOptions() is used to modify the characteristics of the port.
 * yotGetOptions() returns the options that are currently set on the
 * port.
 *
 * The following options are defined:
 *   YOTFLG_NONBLOCK - If set, the port is non-blocking.  Any operation
 *      initiated on such a port that would otherwise block will cause
 *      the YOT_EX_WOULDBLOCK to be raised.
 *   YOTFLG_MANFLUSH - If set, the port will not flush outbound data
 *      automatically.  A yotFlush() must always be executed in order
 *      to flush outbound data.
 */

void yotSetOptions(yotp *port, ub4 options)
{
  /* FIXME -- blind passthru OK? */
  mnSetOptions( (mnp *)port, options );
}

ub4  yotGetOptions(yotp *port)
{
  return( mnGetOptions( (mnp *)port ) );
}

/*
 * yotBind - bind a name to a port
 *
 * DESCRIPTION
 * yotBind() binds a name to a port.  When the port is created, it is
 * assigned a name dynamically.  yotBind() allows the port to be rebound
 * to a well-known port number.  Dynamic port numbers are assigned starting
 * at 1024, and port numbers below 128 are reserved.  Therefore, well-known
 * port numbers should be between these two values.
 */
void yotBind(yotp *port, ub2 name)
{
  mna self;

  mnGetAddr( (mnp *)port, &self );
  mnaSetPort( &self, name );
  mnBind( (mnp *)port, &self );
}

/*
 * yotGetAddr, yotGetPeer - get the address of the port or the peer
 *
 * DESCRIPTION
 * yotGetAddr() returns an address descriptor denoting the full address
 * of the given port.  yotGetPeer() returns an address descriptor denoting
 * the the address of the port to which this port is connected.  Thus,
 * yotGetPeer() is only valid on connected, stream-based ports.  The
 * address descriptor must be freed by the caller.
 */
yota *yotGetAddr(yotp *port)
{
  mna	*self = ysmGlbAlloc( sizeof(*self), yotTagAddr);
  mnGetAddr( (mnp *)port, self );
  return( (yota *)self );
}

yota *yotGetPeer(yotp *port)
{
  mna	*self = ysmGlbAlloc( sizeof(*self), yotTagAddr);
  DISCARD mnGetPeer( (mnp *)port, self );
  return( (yota *)self );
}

/*
 * yotListen - listen for connections
 *
 * DESCRIPTION
 * yotListen() converts a stream port from active to passive mode.
 * Once in a passive mode, connections may be accepted from this
 * port.
 */
void yotListen(yotp *port)
{
  /* FIXME - errors tossed */
  DISCARD mnListen( (mnp*)port, (ub4)0, (mnHandler)0, (dvoid *)0);
}

/*
 * yotAccept - accept a connection
 *
 * DESCRIPTION
 * yotAccept() accepts a connection from a passive stream port.  A
 * new port is created and returned.  The new port is used to read
 * and write data from and to the port which initiated the connection,
 * but cannot be used to accept further connections.  The original
 * port remains open and available to accept further connections.
 * If no connection requests are pending, yotAccept() will normally
 * block until the port is in a non-blocking mode.  yotTest() may be
 * used to test for inbound connnections.
 */
yotp *yotAccept(yotp *port)
{
  return( (mnp*)mnAccept( (mnp *)port ) );
}

/*
 * yotConnect - initiate a connection
 *
 * DESCRIPTION
 * yotConnect() initiates a connection from an active stream port
 * to a passive stream port.  A port may only be connected once.
 * This routine will not cause any network traffic by itself.  The
 * destination port will not receive the connection attempt until
 * data is written to the port or the port is flushed.  A connection
 * may fail due to an inability to reach the destination or a bad
 * address.  Either YOT_EX_FAILCONN or YOT_EX_BADADDR may be raised
 * during any subsequent yotRead(), yotWrite(), or yotFlush() operation.
 */
void yotConnect(yotp *port, yota *addr)
{
  ysid *exid;

  exid = yotMnStsToExid(mnConnect((mnp *)port, (mna *)addr));
  if(exid)
    yseThrow(exid);
}

/*
 * yotRead, yotReadV - read from a stream
 *
 * DESCRIPTION
 * yotRead() reads up to max bytes of data into the buffer pointed to
 * by buf.  yotReadV() similarly reads data from a stream and scatters
 * it to the supplied buffer vector.  The buffer or buffer vector
 * passed in must remain valid until the operation completes.  The
 * read operation completes as soon as some amount of data is read,
 * unless the port is in a non-blocking mode or fill is TRUE.
 *
 * If fill is TRUE, the operation will not complete until the buffer
 * is filled or the end of the stream is reached.  If fill is TRUE,
 * and the port is non-blocking, and the full amount of data required
 * to fill the buffer is not available, and the call is synchronous
 * (i.e. no event descriptor is supplied), no data will be read and
 * the YOT_EX_WOULDBLOCK exception is raised.
 *
 * The result of the operation is the number of bytes read and
 * transferred.  The operation may raise the exceptions:
 *   YOT_EX_NOTCONN if the stream port is not connected;
 *   YOT_EX_BROKEN if the communication with the peer is lost;
 *   YOT_EX_DISCONN if the stream port was disconnected.
 */
sb4 yotRead(yotp *port, ub1 *buf, size_t max, boolean fill, ysevt *evt)
{
  sb4	rv;
  ysid *exid;
  mnHandler h = (mnHandler)0;
  dvoid *arg = (dvoid *)0;
  ysevt **ep = (ysevt **)0;
  
  if( evt )
  {

    h = yotHandler;
    ep = (ysevt **) (arg = ysmGlbAlloc(sizeof(ysevt *),"ysevt *"));
    *ep = evt;
    DISCARD ysEvtAttach(evt,ysEvtSimple(yotEvtCancel,(dvoid *)ep));
  }
  rv = mnRead( (mnp*)port, buf, max, fill, (ub4)0, h, arg );

#ifdef NEVER  
  if( rv == 0 && evt )
    yseThrow( YOT_EX_WOULDBLOCK );
  else if( rv < 0 )
    yseThrow( YOT_EX_BROKEN );
#endif

  exid = yotMnStsToExid(rv);
  if(exid)
  {
    if(ep) ysmGlbFree((dvoid *)ep);
    yseThrow(exid);
  }

  return( rv );
}

sb4 yotReadV(yotp *port, ysbv *bv, sword nbv, boolean fill, ysevt *evt)
{
  sword i;
  sb4 rv, xrv;

  /* FIXME */
  yseThrow(YT_EX_UNIMPL);

  for( rv = i = 0; i < nbv && rv >= 0 ; i++ )
    if( (xrv = yotRead( port, bv[i].buf, bv[i].len, fill, (ysevt*)0 ) ) < 0 )
      rv = xrv;
    else
      rv += xrv;

  if( evt )
    ysTrigger( evt, (ysid*)0, (dvoid *)0, (size_t)0 );

  return( 0 );
}

/*
 * yotWrite, yotWriteV - write to a stream
 *
 * DESCRIPTION
 * yotWrite() writes len bytes of data pointed to by buf through the
 * connected port.  If insufficient buffer space is available to queue
 * the write, the routine will normally block until space becomes
 * available, unless the port has been placed into a non-blocking mode,
 * in which case some amount of data less than the total will be written.
 * yotWrite() returns as soon as the data is buffered.  yotFlush() may be
 * used to synchronize with the receiver on certain data.  yotWrite()
 * returns the number of bytes buffered.  Any of the exceptions raised
 * by yotRead() may be raised by yotWrite().
 */
sb4 yotWrite(yotp *port, ub1 *buf, size_t len)
{
  sb4 sts;
  ysid *exid;

  sts = mnWrite( (mnp*)port,buf,len);
  exid = yotMnStsToExid(sts);
  if(exid)
    yseThrow(exid);
  return sts;
}

sb4 yotWriteV(yotp *port, ysbv *bv, sword nbv)
{
  sword i;
  sb4 rv, xrv;

  /* FIXME */
  yseThrow(YT_EX_UNIMPL);

  for( rv = i = 0; i < nbv && rv >= 0 ; i++ )
    if( (xrv = yotWrite( port, bv[i].buf, bv[i].len ) ) < 0 )
      rv = xrv;
    else
      rv += xrv;

  return( rv );
}

/*
 * yotSend, yotSendV - send a message or datagram
 *
 * DESCRIPTION
 * yotSend() sends a message or datagram to the destination specified by
 * to.  If no buffer space is available to queue the send, these routines
 * normally block until space becomes available, unless the port has been
 * placed in a non-blocking mode.  If the protocol is reliable, the
 * operation completes when the other side confirms receipt of the data.
 * If the protocol is unreliable, the operation completes as soon as the
 * data is buffered.  The number of bytes in the message is returned.
 * The send operation may complete with one of the following exceptions:
 * YOT_EX_BROKEN or YOT_EX_BADADDR.  Messages sent from the same port to the
 * same destination are guaranteed to be received in the order they were
 * sent when using a reliable protocol.
 */
sb4 yotSend(yotp *port, yota *to, ub1 *buf, size_t len, ysevt *evt)
{
  sb4	rv;
  ysid *exid;
  mnHandler h = (mnHandler)0;
  dvoid *arg = (dvoid *)0;
  ysevt **ep = (ysevt **)0;
  
  if( evt )
  {
    h = yotHandler;
    ep = (ysevt **) (arg = ysmGlbAlloc(sizeof(ysevt *),"ysevt *"));
    *ep = evt;
    DISCARD ysEvtAttach(evt,ysEvtSimple(yotEvtCancel,(dvoid *)ep));
  }
  rv = mnSend( (mnp*)port, (mna*)to, buf, len, h, arg );

#ifdef NEVER  
  if( rv == 0 && evt )
    yseThrow( YOT_EX_WOULDBLOCK );
  else if( rv < 0 )
    yseThrow( YOT_EX_BROKEN );
#endif

  exid = yotMnStsToExid(rv);
  if(exid)
  {
    if(ep) ysmGlbFree((dvoid *)ep);
    yseThrow(exid);
  }

  return( rv );
}


sb4 yotSendV(yotp *port, yota *to, ysbv *bv, sword nbv, ysevt *evt)
{
  ysid *exid;
  sb4	rv;
  mnHandler h = (mnHandler)0;
  dvoid *arg = (dvoid *)0;
  ysevt **ep = (ysevt **)0;

  if( evt )
  {
    h = yotHandler;
    ep = (ysevt **) (arg = ysmGlbAlloc(sizeof(ysevt *),"ysevt *"));
    *ep = evt;
    DISCARD ysEvtAttach(evt,ysEvtSimple(yotEvtCancel,(dvoid *)ep));
  }
  rv = mnSendV( (mnp*)port, (mna*)to, (mnbv*)bv, (ub4)nbv, h, arg );

#ifdef NEVER  
  if( rv == 0 && evt )
    yseThrow( YOT_EX_WOULDBLOCK );
  else if( rv < 0 )
    yseThrow( YOT_EX_BROKEN );
#endif

  exid = yotMnStsToExid(rv);
  if(exid)
  {
    if(ep) ysmGlbFree((dvoid *)ep);
    yseThrow(exid);
  }

  return( rv );
}


/*
 * yotRecv, yotRecvV - receive a message or datagram
 *
 * DESCRIPTION
 * yotRecv() receives a message.  The contents of the message are
 * transferred up to the limits of the given buffer.  The remainder
 * of the message is discarded.  yotRecvV() does the same thing but
 * scatters the contents of the message to the buffer vector.
 *
 * The receive operation completes when the entire message is received.
 * If the operation is synchronous, and the entire message has not yet
 * been received, and the port is non-blocking, yotRecv() will raise
 * the YOT_EX_WOULDBLOCK exception.
 */
sb4 yotRecv(yotp *port, yota **from, ub1 *buf, size_t max, ysevt *evt)
{
  sb4	rv;
  ysid *exid;
  mnHandler h = (mnHandler)0;
  dvoid *arg = (dvoid *)0;
  ysevt **ep = (ysevt **)0;
  
  if( evt )
  {
    h = yotHandler;
    ep = (ysevt **) (arg = ysmGlbAlloc(sizeof(ysevt *),"ysevt *"));
    *ep = evt;
    DISCARD ysEvtAttach(evt,ysEvtSimple(yotEvtCancel,(dvoid *)ep));
  }
  rv = mnRecv( (mnp*)port, (mna*)from, buf, max, (ub4)0, h, arg );

#ifdef NEVER  
  if( rv == 0 && evt )
    yseThrow( YOT_EX_WOULDBLOCK );
  else if( rv < 0 )
    yseThrow( YOT_EX_BROKEN );
#endif

  exid = yotMnStsToExid(rv);
  if(exid)
  {
    if(ep) ysmGlbFree((dvoid *)ep);
    yseThrow(exid);
  }

  return( rv );
}

sb4 yotRecvV(yotp *port, yota **from, ysbv *bv, sword nbv, ysevt *evt)
{
  sb4	rv;
  ysid *exid;
  mnHandler h = (mnHandler)0;
  dvoid *arg = (dvoid *)0;
  ysevt **ep = (ysevt **)0;

  if( evt )
  {
    h = yotHandler;
    ep = (ysevt **) (arg = ysmGlbAlloc(sizeof(ysevt *),"ysevt *"));
    *ep = evt;
    DISCARD ysEvtAttach(evt,ysEvtSimple(yotEvtCancel,(dvoid *)ep));
  }
  *from = (yota *) ysmGlbAlloc(sizeof(mna),yotTagAddr);
  rv = mnRecvV( (mnp*)port, (mna*)*from, (mnbv*)bv, (ub4)nbv, (ub4)0, h, arg );

#ifdef NEVER  
  if( rv == 0 && evt )
    yseThrow( YOT_EX_WOULDBLOCK );
  else if( rv < 0 )
    yseThrow( YOT_EX_BROKEN );
#endif

  exid = yotMnStsToExid(rv);
  if(exid)
  {
    if(ep) ysmGlbFree((dvoid *)ep);
    yseThrow(exid);
  }

  return( rv );
}

/*
 * yotTest - test the port for inbound data
 *
 * yotTest() tests the given port for inbound data.  If the port
 * is a passive, stream port, yotTest() returns the number of
 * pending connection requests.  If the port is a connected stream
 * port, it returns the number of bytes available to read.  If the
 * port is a message or datagram port, it returns the number of bytes
 * contained in the next message or datagram.  It will continue to
 * return this value until reading of the message is begun.  Once it
 * is begun, yotTest() will return the amount of data remaining in the
 * current message.
 *
 * If there is no data pending, and the operation is synchronous,
 * then yotTest() will block until data arrives or the timeout expires,
 * unless the port is in a non-blocking mode.  If timeout is non-null,
 * then yotTest() will only block for the number of milliseconds
 * pointed to by the timeout value.  (Thus, if it is zero, yotTest()
 * will poll.)  If evt is provided with a timeout, the evt will be
 * triggered with a TIMEOUT exception if the time expires before the
 * event completes.
 */
sb4 yotTest(yotp *port, sysb8 *timeout, ysevt *evt)
{
  sb4 sts;
  ysid *exid;
  ub4 msec;
  sysb8 hi;
  mnHandler hdlr;
  dvoid *usrp;
  ysevt **ep = (ysevt **)0;

  if(timeout == YSTM_POLLING)
    return mnRecvTest((mnp *)port,(mna *)0);
  if(timeout == YSTM_INFINITE)
    msec = 0;
  else
  {
    msec = sysb8msk(timeout);
    sysb8srl(&hi,timeout,32);
    if(sysb8msk(&hi))
      msec = UB4MAXVAL;
  }

  if(evt)
  {
    hdlr = yotHandler;
    ep = (ysevt **) (usrp = ysmGlbAlloc(sizeof(ysevt *),"ysevt *"));
    *ep = evt;
    DISCARD ysEvtAttach(evt,ysEvtSimple(yotEvtCancel,(dvoid *)ep));
  }
  else
  {
    hdlr = (mnHandler) 0;
    usrp = (dvoid *) 0;
  }

  sts = mnRecvWait((mnp *)port,(mna *)0, msec, hdlr, usrp);

  exid = yotMnStsToExid(sts);
  if(exid)
  {
    if(ep) ysmGlbFree((dvoid *)ep);
    yseThrow(exid);
  }

  return sts;
}


sword yotAddrEq(yota *a1, yota *a2)
{
  return mnaEq((mna *)a1,(mna *)a2);
}

ub2 yotGetAddrPort(yota *addr)
{
  return mnaPortNum(addr);
}

void yotSetAddrPort(yota *addr, ub2 port)
{
  mnaSetPort(addr, port);
}

char *yotAddrToStr(yota *addr, char *str, size_t max)
{
  mnAtos((mna *)addr, str, max);
  return str;
}

yota *yotStrToAddr(CONST char *str)
{
  mna *addr;
  sb4 sts;

  addr = (mna *) ysmGlbAlloc(sizeof(mna), yotTagAddr);
  sts = mnAddr(addr,str);
  if(sts < 0)
  {
    ysmGlbFree((dvoid *)addr);
    addr = (mna *) 0;
  }
  return (yota *)addr;
}

yota *yotAddrDup(yota *addr)
{
  mna *dup;

  dup = (mna *) ysmGlbAlloc(sizeof(mna), yotTagAddr);
  mnaCopy(dup,(mna *)addr);

  return (yota *)dup;
}

void yotAddrFree(yota *addr)
{
  ysmCheck(addr,yotTagAddr);

  ysmGlbFree((dvoid *)addr);
}

ub4 yotHashAddr(yota *addr)
{
  sword i;
  ub4 hash = 0;
  ub1 *bits = ((mna *)addr)->bits;

  for(i = 0; i < sizeof(((mna *)addr)->bits); i++)
    hash += *bits++;

  return hash;
}

void yotxPutAddr(yosx *x, yota *addr)
{
  if( addr )
  {
    yosxPutUB4(x, sizeof(mna));
    yosxCopy(x,(dvoid *)addr,sizeof(mna));
  }
  else
    yosxPutUB4( x, 0 );
}

yota *yotxGetAddr(yosx *x)
{
  mna *addr;
  ub4 len;

  if((len = yosxGetUB4(x)))
  {
    addr = (mna *)ysmGlbAlloc(sizeof(mna),yotTagAddr);
    yosxCopy(x,(dvoid *)addr,sizeof(mna));
  }
  else
    addr = (yota*)0;

  return addr;
}

ysid *yotMnStsToExid(sb4 val)
{
  ysid *exid;

  switch(val)
  {
  case MNERR_WOULDBLOCK:
    exid = (ysid *)YT_EX_WOULDBLOCK;
    break;
  case MNERR_TIMEOUT:
    exid = (ysid *)YS_EX_TIMEOUT;
    break;
  case MNERR_BROKEN:
    exid = (ysid *)YT_EX_BROKEN;
    break;
  case MNERR_BADADDR:
    exid = (ysid *)YT_EX_BADADDR;
    break;
  case MNERR_ALREADY:
    exid = (ysid *)YT_EX_FAILCONN;
    break;
  case MNERR_NOTCONN:
    exid = (ysid *)YT_EX_NOTCONN;
    break;
  case MNERR_DISCONN:
    exid = (ysid *)YT_EX_DISCONN;
    break;
  default:
    if(val < 0)
      exid = (ysid *)YT_EX_UNKNOWN;
    else
      exid = (ysid *) 0;
    break;
  }
  return exid;
}

/* PRIVATE FUNCTIONS */
STATICF void yotEvtCancel(dvoid *usrp, CONST ysid *exid, dvoid *arg,
                         size_t argsz)
{
  *(ysevt **)usrp = (ysevt *) 0;
}

/* a handler to map mn to ysevt's -- arg is ytEvt to trigger */
STATICF void yotHandler( dvoid *arg, sb4 val )
{
  ysid *exid;

  exid = yotMnStsToExid(val);

  if(*(ysevt **)arg)
    ysTrigger(*(ysevt**)arg, exid, (dvoid *)&val, sizeof(val) );
  ysmGlbFree((dvoid *)arg);
}
