/* Copyright (c) 1994 by Oracle Corporation.  All Rights Reserved.
 *
 * mnn.c - OMN Network Layer
 *
 * REVISIONS
 * kcoleman  07/12/96  Change "private" to "priv" for C++ compatibility
 * jolkin    08/12/94  Creation of Version 2.1
 * jolkin    04/20/94  Creation of Version 2.0
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNI_ORACLE
#include <mni.h>
#endif

/*
 * Type Definitions
 */
typedef struct mnnctx mnnctx;

struct mnnctx
{
  mnnio *next;                                          /* next NIO in chain */
  mna    subnet;                                              /* NIO address */
  mnq    inp;                                   /* received packets (mnnpkt) */
  mnq    out;                                   /* outbound packets (mnnpkt) */
  ub1   *buf;                          /* pre-allocated inbound buffer space */
  mnnhdr phdr;                    /* cached previous packet header for blobs */
  ysle  *le;                                      /* list element in rcvnios */
};

/*
 * mnnNewNio - initialize an NIO
 *   mnnNewNio() creates the mnnctx associated with an NIO.
 */
void mnnNewNio(mnctx *ctx, mnnio *nio)
{
  mnnctx *nctx;

  if (nio->pktmax < MNNPKTMIN)
    mnPrint(MNLFATAL, "minimum packet size (>=96) %ld", nio->pktmax);

  nctx = (mnnctx *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnnctx));

  mnaClear(&nctx->subnet);
  mnqInit(&nctx->inp);
  mnqInit(&nctx->out);

  if (nio->recv)
    nctx->buf = (ub1 *) mnmAlloc(ctx, MNM_RECVPOOL, nio->pktmax);

  nio->priv = (dvoid *) nctx;

  /* add to NIO chain */
  nctx->next = ctx->nios;
  ctx->nios = nio;

  if (nio->recv || (nio->flags & MNNFLG_RECV))
    nctx->le = ysLstEnq(ctx->rcvnios, (dvoid *) nio);
  else
    nctx->le = (ysle *) 0;
}

/*
 * mnnFreeNio - free an NIO
 *   mnnFreeNio() releases all resources used by an NIO.  It is assumed
 *   that the caller will take this NIO off the list.
 */
void mnnFreeNio(mnctx *ctx, mnnio *nio)
{
  mnnctx *nctx;
  mnnpkt *pkt;

  nctx = (mnnctx *) nio->priv;

  if (nio->recv)
    mnmFree(ctx, (dvoid *) nctx->buf);

  while (pkt = (mnnpkt *) mnqDeq(&nctx->inp))
    if (!(pkt->flags & MNNFLG_TL))
      mnmFree(ctx, (dvoid *) pkt);

  while (pkt = (mnnpkt *) mnqDeq(&nctx->out))
    if (!(pkt->flags & MNNFLG_TL))
      mnmFree(ctx, (dvoid *) pkt);

  if (nio->close)
    (*nio->close)(nio);

  if (nctx->le)
    DISCARD ysLstRem(ctx->rcvnios, (dvoid *) nctx->le);
  mnmFree(ctx, (dvoid *) nctx);
}

/*
 * mnnFindNio - find an NIO by address family
 */
mnnio *mnnFindNio(mnctx *ctx, char *family)
{
  mnnio *scn;

  for (scn = ctx->nios;
       scn && memcmp(family, scn->pa.family, sizeof(scn->pa.family));
       scn = mnnNextNio(scn)) ;
  return scn;
}

/*
 * mnnScanNio - scan the NIOs for pending input
 *   If the NIO has a receive function, we poll it until we get no more
 *   data.  Then, for each NIO capable of receiving (including obviously
 *   those with a receive function), we process all queued packets.
 */
void mnnScanNio(mnctx *ctx)
{
  mnnio *scn;
  ysle  *le;

  for (le = ysLstHead(ctx->rcvnios); le; le = ysLstNext(le))
    {
      scn = (mnnio *) ysLstVal(le);
      if (scn->recv)
	while (mnnRecvPkt(ctx, scn, TRUE, (ub4) 0) >= 0) ;

      if (scn->flags & MNNFLG_RECV)
	mnnProcPkt(ctx, scn);
    }
}

/*
 * mnnRecvPkt - receive a packet
 *   For NIOs with receive routines, mnnRecvPkt() invokes the receive
 *   routine.  If a packet has arrived, we push it into Media Net
 *   ourselves.  This routine returns the number of bytes received
 *   or one of the error codes from an NIO recv().
 */
sb4 mnnRecvPkt(/*ARGUSED*/ mnctx *ctx, mnnio *nio, boolean poll, ub4 timeout)
{
  mnnctx *nctx;
  mnnpa   pa;
  sb4     cnt;

  nctx = (mnnctx *) nio->priv;
  cnt = (*nio->recv)(nio, &pa, nctx->buf, nio->pktmax, poll, timeout);

  if (cnt > 0)
    mnnPushBuf(nio, &pa, nctx->buf, (size_t) cnt);

  return cnt;
}

/*
 * mnnProcPkt - process an inbound packet
 *   mnnProcPkt() empties the inbound packet queue for a given NIO.
 *   For each packet, it verifies the packet and determines whether
 *   to forward it or hand it up to the transport layer.  The packet
 *   will be freed either by the transport layer or as the packet
 *   leaves this node through mnnSendPkt()/mnnPullBuf().  This routine
 *   is the first entry into Media Net of a packet not at the interrupt
 *   level.
 */
void mnnProcPkt(mnctx *ctx, mnnio *nio)
{
  mnnctx *nctx;
  mnnpkt *pkt;
  mnnhdr *phdr;
  ub2     cksm;

  nctx = (mnnctx *) nio->priv;

  while (nctx->inp.head)
    {
      /* the inbound packet queue may be accessed at interrupt time by
       * mnnPushBuf().
       */
      MN_CRITICAL_REGION
	pkt = (mnnpkt *) mnqDeq(&nctx->inp);
      MN_END_CRITICAL_REGION

      phdr = (mnnhdr *) &pkt[1];

      /* verify checksum */
      if (!(nio->flags & MNNFLG_CKSM))
	{
	  phdr->proto |= MNNVRS;

	  if (pkt->flags & MNNFLG_CPY)
	    cksm = mnnCheckSum((ub1 *) &phdr[1], pkt->len - sizeof(mnnhdr))
	      - phdr->cksm;
	  else
	    cksm = mnnCheckSum((ub1 *) phdr, pkt->len);

	  if (cksm)
	    {
	      mnPrint(MNLERROR, "checksum error: hdr=%lx, act=%lx",
		      cksm, phdr->cksm);
	      mnmFree(ctx, (dvoid *) pkt);
	      continue;
	    }
	}

      phdr->proto &= 0x0f;
      
      /* record source route if necessary; this bit should only be
       * set inside an address request packet; the source physical
       * address is written immediately after the header.
       */
      if (phdr->flags & MNNFLG_RSR)
	{
	  CPSTRUCT(*((mnnpa *) &phdr[1]), pkt->pa);
	  phdr->flags &= ~MNNFLG_RSR;
	  pkt->flags &= ~MNNFLG_RSR;
	}

      /* determine if the packet has arrived at its destination */
      if (mnaIsDest(ctx, &nctx->subnet, &phdr->dst) ||
	  (phdr->flags & MNNFLG_ACC))
	{
	  if (phdr->proto == MNPROTO_OCP)
	    mnoIn(ctx, pkt);
	  else
	    mntIn(ctx, pkt);
	  ctx->idleactive = TRUE;
	}
      else if (ctx->flags & MNFLG_FORWARD)
	mnnForward(ctx, nio, pkt);
      else
	{
	  mnPrint(MNLERROR, "misrouted packet");
	  mnmFree(ctx, (dvoid *) pkt);
	}
    }
}

/*
 * mnnForward - forward a packet
 *   mnnForward() locates a route to send the packet to.  If it finds
 *   a route, it passes it to mnnSendPkt() to send it out.  It may also
 *   send a redirect message back to the sender if it makes sense to
 *   do so.  mnnSendPkt()/mnnPullBuf() will free the packet.
 */
void mnnForward(mnctx *ctx, mnnio *nio, mnnpkt *pkt)
{
  mnrte  *rte;
  mnnhdr *phdr;

  phdr = (mnnhdr *) &pkt[1];
  rte = mnaFindRoute(ctx, &phdr->dst);
  if (!rte)
    {
      DISCARD mnoSend(ctx, MNOTYP_DESTNOTREACH, &phdr->src, &phdr->dst);
      mnmFree(ctx, (dvoid *) pkt);
    }
  else
    {
      if (rte->nio == nio && !(nio->flags & MNNFLG_CIRC))
	DISCARD mnoSendRedirect(ctx, pkt, rte, (ub4) 0);

      pkt->nio = rte->nio;
      CPSTRUCT(pkt->pa, rte->pa);
      DISCARD mnnSendPkt(ctx, pkt);
    }
}

/*
 * mnnSendPkt - send a packet
 *   If the NIO does not have a send routine, then we simply queue the
 *   packet up on the outbound NIO.  Otherwise, if packet came from the
 *   transport layer, then it is all ready to be sent out.  Otherwise,
 *   the packet is being forward.  We may need to fragment the packet
 *   before sending.  If the packet is sent and is not a transport packet,
 *   it is freed here.  This routine returns a number greater than or
 *   equal to zero on success, or an NIO send() routine error code.
 */
sb4 mnnSendPkt(mnctx *ctx, mnnpkt *pkt)
{
  mnnctx *nctx;
  mnnhdr *phdr;
  ub1    *buf;
  ub2     cksm;
  ub4     xlen;
  sb4     sts;

  buf = ((ub1 *) &pkt[1]) + pkt->off;

  /* initialize packet header from packet descriptor */
  phdr = (mnnhdr *) buf;
  /* phdr->proto |= MNNVRS; */
  /* phdr->flags = (ub1) (pkt->flags & 0xff); */
  /* phdr->cksm = 0; */
  /* phdr->len = smnHton4(pkt->len - sizeof(mnnhdr)); */
  /* phdr->seqid = smnHton4(pkt->seqid); */
  *((ub1 *) &phdr->proto) = *((ub1 *) &phdr->proto) | MNNVRS;
  *((ub1 *) &phdr->flags) = (ub1) (pkt->flags & 0xff);
  DISCARD memset((ub1 *) &phdr->cksm, 0, sizeof(phdr->cksm));
  sysxPutUaB4(((ub1 *) &phdr->len), pkt->len - sizeof(mnnhdr));
  sysxPutUaB4(((ub1 *) &phdr->seqid), pkt->seqid);

  if (!pkt->nio->send)
    {
      nctx = (mnnctx *) pkt->nio->priv;
      mnqEnq(&nctx->out, pkt);
      return 0;
    }
  else if (pkt->flags & MNNFLG_TL)
    {
      /* compute checksum if necessary */
      if (!(pkt->nio->flags & MNNFLG_CKSM))
        {
	  cksm = mnnCheckSum(buf, pkt->len);
	  DISCARD memcpy((ub1 *) &phdr->cksm, (ub1 *) &cksm,
			 sizeof(phdr->cksm));
        }

      mnnTrace("SEND", buf, (size_t) pkt->len);
      return (*pkt->nio->send)(pkt->nio, &pkt->pa, buf, (size_t) pkt->len);
    }
  else
    {
      do
	{
	  mnnFragment(pkt, &buf, &xlen);
	  mnnTrace("SEND", buf, (size_t) (xlen + sizeof(mnnhdr)));
	  sts = (*pkt->nio->send)(pkt->nio, &pkt->pa, buf,
				  (size_t) (xlen + sizeof(mnnhdr)));

	  /* move the packet header forward; must do this after the send
	   * cannot use CPSTRUCT here b/c there seems to be a problem
	   * with the possibility of overlap.
	   */
	  if (pkt->len > sizeof(mnnhdr))
	    DISCARD memmove((dvoid *) (buf + xlen),
			    (dvoid *) buf, sizeof(mnnhdr));
	    /* CPSTRUCT(*((mnnhdr *) (buf + xlen)), *((mnnhdr *) buf)); */
	} while (pkt->len > sizeof(mnnhdr) && sts >= 0);

      mnmFree(ctx, (dvoid *) pkt);
      return sts;
    }
}

/*
 * mnnFragment - fragment a forwarded packet
 *   Since the NIO we are sending to may have a smaller pktmax then
 *   the one we got the packet from we may need to fragment.  Fragmenting
 *   is only performed on forwarded packets and is therefore allowed to
 *   be a destructive process.  Here, we use the pkt as a descriptor
 *   for where we are within the packet.  The caller will have to free
 *   the packet and copy forward the header if the packet is not finished.
 */
void mnnFragment(mnnpkt *pkt, ub1 **bufp, ub4 *xlenp)
{
  ub1    *buf;
  mnnhdr *phdr;
  ub4     pylen, maxlen, xlen;

  /* set-up */
  buf = ((ub1 *) &pkt[1]) + pkt->off;
  phdr = (mnnhdr *) buf;
  pylen = pkt->len - sizeof(mnnhdr);
  maxlen = pkt->nio->pktmax - sizeof(mnnhdr);
  xlen = min(pylen, maxlen);

  /* set packet header */
  phdr->len = smnHton4(xlen);
  phdr->seqid = smnHton4(pkt->seqid);
  phdr->flags = (ub1) (pkt->flags & 0xff);

  /* update packet descriptor */
  pkt->len -= xlen;
  pkt->off += xlen;
  pkt->seqid += (sb4) xlen;

  /* fix flags */
  if (pkt->len > sizeof(mnnhdr))
    phdr->flags |= MNNFLG_MTC;

  pkt->flags &= ~MNNFLG_FST;

  /* compute checksum if necessary */
  phdr->cksm = 0;
  if (!(pkt->nio->flags & MNNFLG_CKSM))
    phdr->cksm = mnnCheckSum(buf, xlen + sizeof(mnnhdr));

  *bufp = buf;
  *xlenp = xlen;
}

/*
 * mnnCheckSum - Computes a checksum for a given buffer.
 */
ub2 mnnCheckSum(ub1 *buf, ub4 len)
{
  ub4  sum, cnt;
  ub2 *ptr;
  ub1  tmp[2];

  for (sum = 0, cnt = len >> 1, ptr = (ub2 *) buf; cnt; cnt--)
    sum += *ptr++;

  if (len & 0x1)
    {
      tmp[0] = *((ub1 *) ptr);
      tmp[1] = 0;
      ptr = (ub2 *) tmp;
      sum += *ptr;
    }

  sum = (sum >> 16) + (sum & 0xffff);
  sum += (sum >> 16);
  sum = ~sum;

  return (ub2) (sum & 0xffff);
}

/*
 * mnnSetSubnet - set the NIO address
 */
void mnnSetSubnet(mnnio *nio, mna *addr)
{
  mnnctx *nctx;

  nctx = (mnnctx *) nio->priv;
  mnaCopy(&nctx->subnet, addr);
}

/*
 * mnnSubnet - return the NIO address
 */
void mnnSubnet(mnnio *nio, mna *addr)
{
  mnnctx *nctx;

  nctx = (mnnctx *) nio->priv;
  mnaCopy(addr, &nctx->subnet);
}

/*
 * mnnPullBuf - pull a buffer out
 */
sb4 mnnPullBuf(mnnio *nio, mnnpa *pa, ub1 *buf, size_t len)
{
  mnnctx *nctx;
  mnnpkt *pkt;
  ub4     xlen;
  ub1    *pbuf;

  len &= ~0x3;

  if (len < MNNPKTMIN)
    return MNERR_TRUNCATE;

  nctx = (mnnctx *) nio->priv;
  if (!(pkt = (mnnpkt *) nctx->out.head))
    return MNERR_WOULDBLOCK;

  if (pa)
    CPSTRUCT(*pa, pkt->pa);

  if (pkt->flags & MNNFLG_TL)
    {
      if (len < pkt->len)
	{
	  mnPrint(MNLERROR, "would truncate packet length=%ld", pkt->len);
	  return MNERR_TRUNCATE;
	}

      xlen = pkt->len - sizeof(mnnhdr);
      pbuf = ((ub1 *) &pkt[1]) + pkt->off;
      DISCARD memcpy(buf, pbuf, (size_t) pkt->len);
      mnqDeq(&nctx->out);
    }
  else
    {
      nio->pktmax = (size_t) len;

      mnnFragment(pkt, &pbuf, &xlen);
      DISCARD memcpy(buf, pbuf, (size_t) (xlen + sizeof(mnnhdr)));

      /* move the packet header; must do this after the copy */
      if (pkt->len > sizeof(mnnhdr))
	DISCARD memmove((dvoid *) (pbuf + xlen), (dvoid *) pbuf,
			sizeof(mnnhdr));
	/* CPSTRUCT(*((mnnhdr *) (pbuf + xlen)), *((mnnhdr *) pbuf)); */
      else
	{
	  mnqDeq(&nctx->out);
	  mnmFree(mnGlbCtx, (dvoid *) pkt);
	}
    }

  return (sb4) (xlen + sizeof(mnnhdr));
}

/*
 * mnnTestBuf - test to see if a buffer is available
 */
sb4 mnnTestBuf(mnnio *nio)
{
  mnnctx *nctx;
  mnnpkt *pkt;

  nctx = (mnnctx *) nio->priv;
  pkt = (mnnpkt *) nctx->out.head;
  return (pkt ? pkt->len : MNERR_WOULDBLOCK);
}

/*
 * mnnPushBuf - push a buffer into Media Net
 *   This routine is a firewall between signal-level and non-signal-level
 *   execution.  It uses the memory manager and the NIO packet queue which
 *   must be protected on the other side.
 */
void mnnPushBuf(mnnio *nio, mnnpa *pa, ub1 *buf, size_t len)
{
  mnctx  *ctx;
  mnnctx *nctx;
  mnnpkt *pkt;
  mnnhdr *phdr;
  ub4     sz, plen; 
  ub1     proto;
  sb4     seqid;

  ctx = mnGlbCtx;
  mnnTrace("RECV", buf, len);

  /* this routine may be called during an interrupt */
  MN_CRITICAL_REGION
    nctx = (mnnctx *) nio->priv;
    if (!nctx)
      {
	mnPrint(MNLERROR, "NIO not yet initialized");
	goto leave;
      }

    /* check version number and protocol */
    proto = *buf;
    if (((proto & 0xf0) != MNNVRS) || ((proto & 0x0f) >= MNPROTO_MAX))
      {
	mnPrint(MNLERROR, "bad version/protocol=%d", proto);
	goto leave;
      }

    /* allocate a packet */
    phdr = (mnnhdr *) buf;

    /* compute real length of packet */
    plen = smnNtoh4(phdr->len);
    if (plen + sizeof(mnnhdr) > len)
      {
	mnPrint(MNLERROR, "truncated packet length=%d, in header=%d",
		len, plen);
	goto leave;
      }
    else
      len = (size_t) (plen + sizeof(mnnhdr));

    if (!mnmPoolLowwtr(ctx, MNM_RECVPOOL) || (phdr->flags & MNNFLG_PRI))
      {
	sz = sizeof(mnnpkt) + len;
	pkt = (mnnpkt *) mnmAlloc(ctx, MNM_RECVPOOL, (size_t) sz);
      }
    else
      pkt = (mnnpkt *) 0;

    if (pkt)
      {
	/* copy the packet */
	DISCARD memcpy(&pkt[1], buf, len);
	phdr = (mnnhdr *) &pkt[1];
	phdr->proto &= 0x0f;
	seqid = smnNtoh4(phdr->seqid);

	/* propagate blob headers */
	if (phdr->flags & MNNFLG_CPY)
	  {
	    CPSTRUCT(phdr->src, nctx->phdr.src);
	    CPSTRUCT(phdr->dst, nctx->phdr.dst);
	    seqid += nctx->phdr.seqid;
	  }

	/* initialize packet structure */
	pkt->len = len;
	pkt->off = 0;
	pkt->flags = phdr->flags;
	pkt->seqid = seqid;
	pkt->nio = nio;
	CPSTRUCT(pkt->pa, *pa);
	pkt->stime = 0;

	if (phdr->proto == MNPROTO_BLOB)
	  {
	    phdr->proto = MNPROTO_STREAM;
	    nctx->phdr.seqid = smnNtoh4(phdr->seqid);
	    CPSTRUCT(nctx->phdr.src, phdr->src);
	    CPSTRUCT(nctx->phdr.dst, phdr->dst);
	  }

	/* enqueue on inbound list */
	mnqEnq(&nctx->inp, pkt);
      }
    else
      mnPrint(MNLWARN, "discarding packet", len);
 leave:
  MN_END_CRITICAL_REGION
}

/*
 * mnnTeardown - teardown an existing NIO
 */
void mnnTeardown(mnnio *nio, mnHandler handler, dvoid *usrp)
{
  mnctx  *ctx;
  mnnctx *nctx;
  mnnpkt *pkt;

  ctx = mnGlbCtx;
  nctx = (mnnctx *) nio->priv;

  /* discard all pending packets */
  while (pkt = (mnnpkt *) mnqDeq(&nctx->inp))
    if (!(pkt->flags & MNNFLG_TL))
      mnmFree(ctx, (dvoid *) pkt);

  while (pkt = (mnnpkt *) mnqDeq(&nctx->out))
    if (!(pkt->flags & MNNFLG_TL))
      mnmFree(ctx, (dvoid *) pkt);

  /* do address teardown and reset */
  mnaTeardown(ctx, nio, handler, usrp);
}

/*
 * mnnTrace - debugging routine to trace packets
 */
void mnnTrace(const char *pfx, ub1 *buf, size_t len)
{
  mnnhdr     *phdr;
  const char *p, *t;
  char        from[MNAMAXLEN], to[MNAMAXLEN];
  ub4         proto;
  mnctx      *ctx;

  ctx = mnGlbCtx;

  if (!(ctx->flags & MNFLG_TRACE))
    return;

  phdr = (mnnhdr *) buf;

  if ((phdr->proto & 0xf0) != MNNVRS)
    {
      mnPrint(MNLINFO, "%s: bad version", pfx);
      return;
    }
  else
    proto = phdr->proto & 0x0f;

  if (smnNtoh4(phdr->len) + sizeof(mnnhdr) > len)
    {
      mnPrint(MNLINFO, "%s: truncated packet", pfx);
      return;
    }

  mnAtos(&phdr->src, from, MNAMAXLEN);
  mnAtos(&phdr->dst, to, MNAMAXLEN);

  if (proto == MNPROTO_OCP)
    {
      switch (smnNtoh4(phdr->seqid))
	{
	case MNOTYP_DESTNOTREACH: t = "DESTNOTREACH"; break;
	case MNOTYP_DESTNOTVALID: t = "DESTNOTVALID"; break;
	case MNOTYP_REDIRECT: t = "REDIRECT"; break;
	case MNOTYP_RESET: t = "RESET"; break;
	case MNOTYP_ADDRHB: t = "ADDRHB"; break;
	case MNOTYP_ADDRREQUEST: t = "ADDRREQUEST"; break;
	case MNOTYP_ADDRREPLY: t = "ADDRREPLY"; break;
	case MNOTYP_ADDRRELEASE: t = "ADDRRELEASE"; break;
	case MNOTYP_ECHOREQUEST: t = "ECHOREQUEST"; break;
	case MNOTYP_ECHOREPLY: t = "ECHOREPLY"; break;
	case MNOTYP_SETDOMAIN: t = "SETDOMAIN"; break;
	case MNOTYP_ADDRSYNCH: t = "ADDRSYNCH"; break;
	case MNOTYP_RESETRCVR: t = "RESETRCVR"; break;
	default: t = "<unknown>"; break;
	}
      mnPrint(MNLINFO, "%-4.4sOCP     len=%5d %-12.12s src=%s dst=%s",
	      pfx, smnNtoh4(phdr->len), t, from, to);
    }
  else
    {
      switch (proto)
	{
	case MNPROTO_MESSAGE: p = "MSG"; break;
	case MNPROTO_STREAM: p = "STR"; break;
	case MNPROTO_BLOB: p = "BLB"; break;
	default: p = "UNK"; break;
	}

      if (phdr->flags & MNNFLG_ACK)
	t = "ACK";
      else if (phdr->flags & MNNFLG_FST)
	t = (phdr->flags & MNNFLG_MTC) ? "FST" : "ALL";
      else
	t = (phdr->flags & MNNFLG_MTC) ? "MID" : "END";

      mnPrint(MNLINFO, "%-4.4s%s %s len=%5d seq=%08x src=%s dst=%s",
	      pfx, p, t, smnNtoh4(phdr->len), smnNtoh4(phdr->seqid), from, to);
    }
}
