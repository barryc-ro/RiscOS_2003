/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ycc0.h - IDL Compiler C Code Generation Declarations
 *
 * HISTORY
 * 12/12/96 kcoleman	Optional async stubs, run filters from stubs
 * 09/27/96 kcoleman	Strict CORBA naming
 * 08/20/96 kcoleamn	Fix bug 393905
 * 07/01/96 kcoleman	Created from yc.h
 */
#ifndef YCC0_ORACLE
#define YCC0_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif
#ifndef YCCFP_ORACLE
#include <yccfp.h>
#endif

/* ---------------------------------------------------------------------- */
/*
 * When YCSTYLE_ORA is in effect, we generate Oracle specific names
 * for OCCS compliance. The differences between ORA and ANSI modes 
 * currently are:
 *
 * 	noreg		volatile
 *	NOREG		
 *	dvoid		void
 *	CONST		const
 *      CONST_W_PTR     const
 *      CONST_DATA      const
 *	STATICF		static
 *	externdef	
 *	externref	extern
 *
 * There are, of course, other Oracle special macros, but these
 * are the only things the stubs pull on at the moment. The macros below
 * are used to hide most of the cosmetic style differences.
 */
#define YCCEXREF(ctx) ((ctx)->style & YCSTYLE_ORA ? "externref " : "extern ")
#define YCCEXDEF(ctx) ((ctx)->style & YCSTYLE_ORA ? "externdef " : "")
#define YCCVOID(ctx) ((ctx)->style & YCSTYLE_ORA ? "dvoid " : "void ")
#define YCCSTATIC(ctx) ((ctx)->style & YCSTYLE_ORA ? "STATICF " : "static ")
#define YCCVOLATILE(ctx) ((ctx)->style & YCSTYLE_ORA ? "noreg" : "volatile")
#define YCCCONST(ctx) ((ctx)->style & YCSTYLE_ORA ? "CONST " : "const ")
#define YCCCPTR(ctx) ((ctx)->style & YCSTYLE_ORA ? "CONST_W_PTR " : "const ")
#define YCCCDATA(ctx) ((ctx)->style & YCSTYLE_ORA ? "CONST_DATA " : "const ")


/* --------------------------------------------------------------------- */
/*
 * YCC_OCCS_MAX_LINE, YCC_DFLT_MAX_LINE - output source file line length
 *   limits, for use with yccfp.
 *
 * YCC_OCCS_MAX_LINE must correspond to the line limit imposed by OCCS.
 *                   It is the default limit if YCSTYLE_ORA is in effect.
 * YCC_DFLT_MAX_LINE is the limit in the absence of any explicit setting
 *                   otherwise. Should be long enough that is won't usually
 *                   overflow, but not so long as to choke your average C
 *                   compiler. Setting to 0 (no limit) is not recommended as 
 *                   as it havoc with the auto-indentation.
 * YCC_MIN_LINE      is the minimal line limit.  CORBA being what it is,
 *                   you'd never get anything on a line with a too small
 *                   limit.
 */

#ifndef YCC_OCCS_MAX_LINE
#define YCC_OCCS_MAX_LINE 79
#endif
#ifndef YCC_DFLT_MAX_LINE
#define YCC_DFLT_MAX_LINE 256
#endif
#ifndef YCC_MIN_LINE
#define YCC_MIN_LINE 40
#endif


/* --------------------------------------------------------------------- */
/*
 * yccGenGuardName - generate the opening of a declaration/definition guard
 *
 *	If <defn> is TRUE, generated a guard for a definition, else for
 *	a declaration. Forward declarations for interfaces, for instance,
 *	require distinguishing between the two. A complete guard is of
 *	the form:
 *
 *	#ifndef name_DECLARED   (or _DEFINED)
 *	#define name_DECLARED
 *	#endif /o name_DECLARED o/
 *
 * void yccGenOpenGuard(ycctx* ctx, yccfp* fp, char* name, boolean defn);
 * void yccGenCloseGuard(ycctx* ctx, yccfp* fp, char* name, boolean defn);
 */
#define yccGenOpenGuard(ctx, fp, name, defn) \
  { \
    yccfpStartPP( fp); \
    yccfpPrint((fp),"#ifndef %s_%s\n#define %s_%s\n", (name), \
  		((defn) ? "DEFINED" : "DECLARED"), (name), \
  		((defn) ? "DEFINED" : "DECLARED")); \
    yccfpEndPP( fp); \
  }

#define yccGenCloseGuard(ctx, fp, name, defn) \
  { \
    yccfpStartPP( fp); \
    yccfpPrint((fp),"#endif /* %s_%s */\n\n", (name), \
		  ((defn) ? "DEFINED" : "DECLARED")); \
    yccfpEndPP( fp); \
  }

/*
 * yccNeedsGuard - does a yrobj need a declaration guard?
 *
 *	Constant, typedef, etc. decls which aren't interface members
 *	need a declaration guard. Interface members are guarded by
 *	the guards for their enclosing interface definition.
 */
#define yccNeedsGuard(obj) (!ycIsEnumConst(obj))

/* ------------------------------------------------------------------------ */
/*
 * yccUseGlobals - Should we use extern globals for constant data?
 *
 *    boolean yccUseGlobals( ycctx* ctx);
 *
 * This function wraps the resource mnidlc.c-global-const. The default
 * behavior is to use wrapper functions as the only means of accessing
 * global constant data like interface ids, typecodes, and exception ids.
 * If this resource is set to true, this data is also accessible through
 * global const variables, as in Media Net 3.1 and earlier.
 *
 * Accessing the global constants is obviously cheaper and is OCCS compliant
 * within a component/library, so it may be desireable for performance
 * reasons. However, the functions must be used for accesses from outside
 * a component/library - see OCCS 2.6.2.
 */
#define yccUseGlobals(ctx) ((ctx)->lang->flags & YCCFLG_GLOB_CONST)


/* ---------------------------------------------------------------------- */
/*
 * yccNeedsTypeCode - should we gen a type code decl for this object?
 *
 * In the normal case, the answer is always yes, but when the static
 * typecode option is in effect, we do not gen typecode decls for
 * things from include files.
 *
 * boolean yccNeedsTypeCode( ycctx* ctx, yrobj* type);
 */
#define yccNeedsTypeCode( ctx, type) \
  (!((ctx)->lang->flags & YCCFLG_STATIC_TC) || ycShouldGenCode( (ctx), (type)))

/* ---------------------------------------------------------------------- */
/*
 * yccGenAsync - Generate asynchronous client stubs?
 *
 * boolean yccGenAsync(ycctx* ctx);
 */
#define yccGenAsync(ctx) (!((ctx)->lang->flags & YCCFLG_NO_ASYNC))

/* ---------------------------------------------------------------------- */
/*
 * C code generation flags
 *
 * These are bit masks for the flags field of ycgmap. Generally used for
 * resource settings we access frequently - ysResGet calls are expensive.
 */
#define YCCFLG_BUILTIN_SEQ     1           /* assume builtin seqs for prims */
#define YCCFLG_STATIC_TC       2           /* gen static typecode defns */
#define YCCFLG_CPLUS_KWD       4           /* check for C++ keywords */
#define YCCFLG_GLOB_CONST      8           /* global const decls OK */
#define YCCFLG_NO_SUPP_FUNCS  16           /* don't gen support funcs */
#define YCCFLG_NO_ASYNC       32           /* don't gen async client stubs */

/* ---------------------------------------------------------------------- */
/*
 * yccctx - C language mapping context information
 *
 * Fields:
 *   iaofp          Server template code gen file pointer for IAO
 *   tcpfx          Typecode prefix string, depends on naming style
 *   seqpfx         Sequence prefix string, depends on naming style
 */
typedef struct 
{
  yccfp* iaofp_yccctx;
  CONST char* tcpfx_yccctx;
  CONST char* seqpfx_yccctx;
} yccctx;

/* ------------------------------------------------------------------------ */
/*
 * yccTCPrefix, yccSeqPrefix - get typecode and sequence prefix string
 *
 *   CONST char* yccTCPrefix( ycctx* ctx);
 *   CONST char* yccSeqPrefix( ycctx* ctx);
 */
#define yccTCPrefix(ctx) (((yccctx*)(ctx)->langctx)->tcpfx_yccctx)
#define yccSeqPrefix(ctx) (((yccctx*)(ctx)->langctx)->seqpfx_yccctx)
#define yccIAOfp(ctx) (((yccctx*)(ctx)->langctx)->iaofp_yccctx)

/* ------------------------------------------------------------------------ */
/*
 * yccfnk - Function name kind. Treat like an enum. For use by yccGenFuncHdr.
 *
 * normal   any function not one those below
 * nw       asynchronous client stub w filters (no-wait)
 */
typedef sword yccfnk;
#define yccfnk_normal ((yccfnk)0)
#define yccfnk_nw ((yccfnk)1)


/* ------------------------------------------------------------------------ */
/* External function prototypes                                             */
/* ------------------------------------------------------------------------ */
/*
 * yccmap.c
 */
ycgmap* yccLangMap(ycctx *ctx);
void yccGenSysIncls(ycctx* ctx, yccfp* fp, boolean impl);
void yccGenTypeCode( ycctx* ctx, yccfp* fp, CONST char* name, CONST yotk* tc,
                     boolean external);
void yccGenFuncHdr( ycctx* ctx, yccfp* fp, yrobj* rettype, yrobj* intf,
	CONST char* funcName, yslst* params, yslst* ctxs, boolean fptr, 
        yccfnk kind);
void yccGenCopyFree( ycctx* ctx, yccfp* fp, yrobj* type, boolean defn);
boolean ycIsAnonymous( ycctx* ctx, yrobj* type);
void yccGenTypeCodeMacro( ycctx* ctx, yccfp* fp, CONST char* alias, 
                          yrobj* basetype);
void yccGenParamType( ycctx* ctx, yccfp* fp, yrobj* type, sword mode);
boolean yccIsVariableType( ycctx* ctx, yrobj* type);
void yccGenAllocator( ycctx* ctx, yccfp* fp, yrobj* type, boolean defn);
void yccGenSupportFuncs( ycctx* ctx, yccfp* fp, yrobj* type, boolean defn);
boolean yccTakeAddrOf( ycctx* ctx, yrobj* type, sword mode);
ub2 yccGetLineLimit( ycctx* ctx);
void yccGenId( ycctx* ctx, yccfp* fp, CONST char* nm1, CONST char* nm2, 
               boolean interface, CONST char* defn);
boolean yccIsKeyword( ycctx* ctx, CONST char* name);
void yccGenSimpleName( ycctx* ctx, yccfp* fp, CONST char* name);
void yccGenConstVal( ycctx* ctx, yccfp* fp, yrobj* constobj);

/*
 * ycchdr.c
 */
void ycchdr(ycctx *ctx, char *base, ycfile* fd);
void yccGenDecl(ycctx* ctx, yccfp* fp, yrobj* obj, boolean fwd);
void yccGenConstDecl(ycctx *ctx, yccfp *fp, yrobj *obj);
void yccGenIntfDecl(ycctx* ctx, yccfp* fp, yrobj* intf, boolean fwd);
void yccGenExDecl( ycctx* ctx, yccfp* fp, yrobj* ex, boolean fwd);
void yccGenStructDecl( ycctx* ctx, yccfp* fp, yrobj* sobj, boolean fwd);
void yccGenUnionDecl( ycctx* ctx, yccfp* fp, yrobj* uobj, boolean fwd);
void yccGenField( ycctx* ctx, yccfp* fp, yrobj* type, CONST char* name);
void yccGenAliasDecl(ycctx* ctx, yccfp* fp, yrobj* alias, boolean fwd);
void yccGenEnumDecl(ycctx* ctx, yccfp* fp, yrobj* eobj, boolean fwd);
void yccGenSequenceDecl(ycctx* ctx, yccfp* fp, yrobj* seq);
void yccGenAttrDecl(ycctx* ctx, yccfp* fp, yrobj* attr, boolean fptr);
void yccGenOpDecl(ycctx* ctx, yccfp* fp, yrobj* op, boolean fptr);
void yccGenParam( ycctx* ctx, yccfp* fp, yrpar* par);
void yccGenObjParam( ycctx* ctx, yccfp* fp, yrobj* intf);
void yccGenTypeName( ycctx* ctx, yccfp* fp, yrobj* type);
void yccGenParsDecl( ycctx* ctx, yccfp* fp, CONST char* opnm);
void yccGenArrayDeclr( ycctx* ctx, yccfp* fp, yrobj* arr, CONST char* declr);
/*
 * void yccGenPrimitiveName( ycctx* ctx, yccfp* fp, yrpk kind);
 */
#define yccGenPrimitiveName(ctx, fp, kind) \
    (yccfpPrint((fp), "%s", yccGetPrimitiveName((ctx),(kind))))

/*
 * ycctmpl.c
 */
void ycctmpl( ycctx* ctx, char* base, ycfile* fd);

/*
 * yccsrv.c
 */
void yccsrv( ycctx* ctx, char* base, ycfile* fd);

/*
 * yccclnt.c
 */
void yccclnt( ycctx* ctx, char* base, ycfile* fd);
void yccGenTypeCodeDefn( ycctx* ctx, yccfp* fp, yrobj* obj, boolean external);
void yccGenStrAsChar( ycctx* ctx, yccfp* fp, CONST char* str);
void yccGenParamDesc( ycctx* ctx, yccfp* fp, CONST char* name, 
		      yslst* pars, yslst* raises, yrobj* rettype, yslst* ctxs);
void yccGenExcClient( ycctx* ctx, yccfp* fp, yrobj* ex);
void yccFormatTypeCodeDefn( ycctx* ctx, yccfp* fp, CONST yotk* tc);


/*
 * yccname.c
 */
char* yccGetSeqName( ycctx* ctx, yrobj* obj);
CONST char* yccGetAbsoluteName( ycctx* ctx, yrobj* obj, yrobj* inheritedBy);
CONST char* yccGetPrimitiveName( ycctx* ctx, yrpk kind);
void yccGenTypeCodeName( ycctx* ctx, yccfp* fp, yrobj* type);
CONST char* yccEnvPar( ycctx* ctx);

#endif /* YCC0_ORACLE */
