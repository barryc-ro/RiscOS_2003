//////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995 by Oracle Corporation. All Rights Reserved.
//
// NAME
// yr.idl - IDL interface to the runtime OMX 3.0 Interface Repository
//
// NOTES
// This interface closely mirrors the CORBA 2.0 Interface Repository spec.
// The names have been changed to more closely conform to OCCS and the
// describe operation has been modified to retrieve more information in
// a single operation, but the inheritance hierarchy, attributes, etc.
// are as CORBA specifies. A truly CORBA compliant interface is anticipated
// in the future and it should be easy to drop it on top of the implementation
// for the interface below.
//
// The one exception in the inheritance graph is that we do not make the
// distinction between named and unnamed types that CORBA does via the
// IDLType and TypedefDef interfaces. This does not make sense given the
// way we've implemented IFR object descriptions.
//
// For information on what the marjority of the attributes and operations
// do, refer to the CORBA 2.0 Interface Repository specificiation.
//
// HISTORY
// 10/13/95 kcoleman    Creation
//////////////////////////////////////////////////////////////////////////

#ifndef YRINTF_IDL_ORACLE
#define YRINTF_IDL_ORACLE

#ifndef YRDESC_IDL_ORACLE
#include "yrdesc"
#endif

/////
// Forward declarations
/////
interface yrRep;
interface yrContainer;
interface yrContained;
interface yrModuleDef;
interface yrConstDef;
interface yrType;
interface yrStructDef;
interface yrUnionDef;
interface yrEnumDef;
interface yrAliasDef;
interface yrIntfDef;
interface yrPrimDef;
interface yrStringDef;
interface yrSeqDef;
interface yrArrayDef;


// =====================================================================
// yrObject - Any object in the repository.
//
//   The only thing they all have in common is a definition kind. The
//   objects are further specialized by the derived interfaces below.
//
//   Since no write operations on the repository are available at this
//   time, yrObject::destory is not exported.
//
//   Equivalent to CORBA::IRObject.
// =====================================================================

interface yrObject
{
  readonly attribute yrdk def_kind;
#ifdef WRITE_INTERFACE
  void destroy();
#endif /* WRITE_INTERFACE */
};


// =====================================================================
// yrContained - A contained object. All objects in the repository are
//   contained within another, except for the repository itself. Hence,
//   yrContained is one of the basic IFR building blocks.
//
//   yrContained::describe is the primary means for retrieving info
//   about a repository object as a block. The information is usually
//   also available via individual attributes.
//
//   In the CORBA spec, the attributes below are not necessarily
//   readonly. We do not yet implement a write interface to the
//   repository, so I've made them readonly for now.
//
//   Equivalent to CORBA::Contained.
// =====================================================================

interface yrContained : yrObject
{
  readonly attribute yrid id;
  readonly attribute string name;
  readonly attribute yrvers version;

  readonly attribute yrContainer defined_in;
  readonly attribute string absolute_name;
  readonly attribute yrRep repository;

  yrBriefDesc brieflyDescribe();     // minimal object description
  yrDesc describe();               // full object description
}; // yrContained
typedef sequence <yrContained> yrContainedSeq;


// =====================================================================
// yrContainer - The repository, modules, and interfaces are logically
//   containers of other IFR objects. Operations on the container
//   contents are the primary extension here.
//
//   The write interface is not available at this time.
//
//   Equivalent to CORBA::Container.
// =====================================================================

typedef sequence <yrIntfDef> yrIntfDefSeq;
typedef sequence <yrConstDef> yrEnumMbrSeq;
interface yrContainer : yrObject
{
  yrContained lookup( in string search_name);

  yrContainedSeq contents( 
	in yrdk limit_type,
	in boolean exclude_inherited);

  yrContainedSeq lookup_name( 
	in string name,
	in sb4 levels,
	in yrdk limit_type,
	in boolean exclude_inhertied);

  yrDescSeq describe_contents( 
	in yrdk limit_type,
	in boolean exclude_inherited,
	in sb4 max_objs);

#ifdef WRITE_INTERFACE
  yrModuleDef create_module( in yrid id, in string name, in yrvers version);

  yrConstDef create_constant( 
	in yrid id, 
	in string name,
	in yrvers version,
	in yrType type,
	in any value);

  yrStructDef create_struct( 
	in yrid id, 
	in string name,
	in yrvers version,
	in yrStructMbrSeq members);

  yrUnionDef create_union( 
	in yrid id, 
	in string name,
	in yrvers version,
	in yrType discriminator_type,
	in yrUnionMbrSeq members);

  yrEnumDef create_enum( 
	in yrid id, 
	in string name,
	in yrvers version,
	in yrEnumMbrSeq members);

  yrAliasDef create_alias( 
	in yrid id, 
	in string name,
	in yrvers version,
	in yrType original_type);

  yrIntfDef create_interface( 
	in yrid id, 
	in string name,
	in yrvers version,
	in yrIntfDefSeq base_interfaces);
#endif /* WRITE_INTERFACE */
}; // yrContainer


// =====================================================================
// yrType - Base type for all types: structs, unions, enums, arrays,
//   sequences, interfaces, aliases, primitives. Anything which
//   logically has a TypeCode.
//
//   CORBA distinguishes between anonymous and named types via the
//   interfaces IDLType and TypedefDef. The anonymous types do not have
//   names, id's, or versions in their descriptions. We do not make this
//   distinction.
//
//   A cross between CORBA::IDLType and CORBA::TypedefDef.
// =====================================================================

interface yrType : yrContained
{
  readonly attribute TypeCode type;
};


// =====================================================================
// yrRep - The top level interface to the repository. 
//
//   In addition to top level user defined types, all primitive and
//   anonymous (sequence, string, and array) types reside at the
//   repository level.
//
//   This is extended over the CORBA spec to get a description of an
//   object from the repository given an absolute name or repository
//   id. That way, users can get a full description with just a single
//   call into the repository. Without this, you must first do a lookup
//   and then a describe, which is too expensive for some situations.
//
//   The write interface is not available at this time.
//
//   Equivalent to CORBA::Repository.
// =====================================================================

interface yrRep : yrContainer
{
  yrContained lookup_id( in yrid search_id);
  yrPrimDef get_primitive( in yrpk kind);
  yrDesc describeByName( in string absName);
  yrDesc describeById( in yrid id);

#ifdef WRITE_INTERFACE
  yrStringDef create_string( in ub4 bound);
  yrSeqDef create_sequence( in ub4 bound, in yrType element_type);
  yrArrayDef create_array( in ub4 length, in yrType element_type);
#endif
};  // yrRep


// =====================================================================
// yrModuleDef - A module definition
//
//   All pieces of a module are resolved to a single yrModuleDef as
//   they are loaded into the repository. 
//
//   Equivalent to CORBA::ModuleDef.
// =====================================================================

interface yrModuleDef : yrContainer, yrContained
{
  // See yrContainer and yrContained for a list of operations
};


// =====================================================================
// yrConstDef - A constant definition
//
//   A constant is fully described by it's type and value. The value
//   is represented as an any.
//
//   The apparent TypeCode redundancy is courtesy of the CORBA spec.
//
//   Equivalent to CORBA::ConstantDef.
// =====================================================================

interface yrConstDef : yrContained
{
  readonly attribute TypeCode type;    // same as type_def's TypeCode
  attribute yrType type_def;
  attribute any value;
};


// =====================================================================
// yrStructDef - A struct type definition
//
//   Equivalent to CORBA::StructDef.
// =====================================================================

interface yrStructDef : yrType
{
  attribute yrStructMbrSeq members;
};

// =====================================================================
// yrUnionDef - A union type definition
//
//   Equivalent to CORBA::UnionDef.
// =====================================================================
interface yrUnionDef
{
  readonly attribute TypeCode discriminator_type;
  attribute yrType discriminator_type_def;
  attribute yrUnionMbrSeq members;
};

// =====================================================================
// yrEnumDef - an enumeration type definition
//
//   We deviate from CORBA in making the enumeration literals constants
//   in the container which encloses the enum type. If you don't do 
//   something like this, you can never look the enum literals up by
//   name, which seemed undesireable to me.
//
//   Equivalent to CORBA::EnumDef.
// =====================================================================

interface yrEnumDef : yrType
{
  attribute yrEnumMbrSeq members;
};

// =====================================================================
// yrAliasDef - A typedef definition
//
//   Equivalent to CORBA::AliasDef.
// =====================================================================

interface yrAliasDef : yrType
{
  attribute yrType original_type_def;
};

// =====================================================================
// yrPrimDef - A primitive type definition
//
//   Primitive types are always contained at the Repository level. They
//   may be looked up by name (as with any contained object) or by
//   primitive type kind. They are named as per the IDL type names.
//
//   Equivalent to CORBA::PrimitiveDef.
// =====================================================================

interface yrPrimDef : yrType
{
  readonly attribute yrpk kind;
};


// =====================================================================
// yrStringDef - A string type definition
//
//   yrStringDef's represent bound string types. Unbound strings are
//   represented as yrPrimDef's of type yrpkstring.
//
//   CORBA does not consider anonymous types to be contained, so the
//   inheritance hierarchy would differ in a CORBA compliant interface.
//
//   Equivalent to CORBA::StringDef.
// =====================================================================

interface yrStringDef : yrType
{
  attribute ub4 bound;
};


// =====================================================================
//   yrSeqDef - A sequence type definition
//
//   If the sequence is unbound, the <bound> attribute returns 0.
//
//   CORBA does not consider anonymous types to be contained, so the
//   inheritance hierarchy would differ in a CORBA compliant interface.
//
//   Equivalent to CORBA::SequenceDef.
// =====================================================================

interface yrSeqDef : yrType
{
  attribute ub4 bound;
  readonly attribute TypeCode element_type;
  attribute yrType element_type_def;
};


// =====================================================================
// yrArrayDef - An array definition
//
//   CORBA does not consider anonymous types to be contained, so the
//   inheritance hierarchy would differ in a CORBA compliant interface.
//
//   Equivalent to CORBA::ArrayDef.
// =====================================================================

interface yrArrayDef : yrType
{
  attribute ub4 length;
  readonly attribute TypeCode element_type;
  attribute yrType element_type_def;
};


// =====================================================================
// yrExceptDef - An exception definition
//
//   Unlike a yrStructDef, the member list of an exception may be empty.
//
//   Equivalent to CORBA::ExceptionDef.
// =====================================================================

interface yrExceptDef : yrContained
{
  readonly attribute TypeCode type;
  attribute yrStructMbrSeq members;
};
typedef sequence <yrExceptDef> yrExceptSeq;


// =====================================================================
// yrAttrDef - An attribute definition
//
//   The apparent TypeCode redundancy is a short-cut, courtesy of CORBA.
//
//   Equivalent to CORBA::AttributeDef.
// =====================================================================

interface yrAttrDef : yrContained
{
  readonly attribute TypeCode type;    // TypeCode of <type_def>
  attribute yrType type_def;
  attribute yrAttrMode mode;
};


// =====================================================================
// yrOpDef - An interface operation definition
//
//   Most of the attributes below are not readonly in the CORBA spec.
//   I have made them readonly because a write interface to the IFR
//   is not yet supported.
//
//   Equivalent to CORBA::OperationDef.
// =====================================================================

interface yrOpDef : yrContained
{
  readonly attribute TypeCode result;         // TypeCode of result_def
  readonly attribute yrType result_def;
  readonly attribute yrParmDescSeq params;
  readonly attribute yrOpMode mode;
  readonly attribute yrExceptSeq exceptions;
  readonly attribute yrCtxtIdSeq contexts;
}; // yrOpDef


// =====================================================================
// yrIntfDef - An interface definition
//
//   Equivalent to CORBA::InterfaceDef.
// =====================================================================

interface yrIntfDef : yrContainer, yrType
{
  attribute yrIntfDefSeq base_interfaces;
  boolean is_a( in yrid interface_id);

#ifdef WRITE_INTERFACE
  yrAttrDef create_attribute( in yrid id,
	in string name,
	in yrvers version,
	in yrType type,
	in yrAttrMode mode);
  yrOpDef create_operation( in yrid id,
	in string name,
	in yrvers version,
	in yrType result,
	in yrOpMode mode,
	in yrParmDescSeq params,
	in yrExceptSeq exceptions,
	in yrCtxtIdSeq contexts);
#endif
}; // yrIntfDef

#endif /* YRINTF_IDL_ORACLE */
