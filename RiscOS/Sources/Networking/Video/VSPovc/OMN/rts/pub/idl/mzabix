//----------------------------------------------------------------------------
// File: mzabix.idl - Broadcast Initiator Exporter Interface
//
// Description:
//	This describes the interface a Broadcast Exporter must implement
// 	in order to be Initiated via the OVS Broadcast Intiator.
//
// Modification History:
//   Name       Date            Comments
//   plord      10/08/97        Creation
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
// Oracle Corporation							     
// Oracle Media Server (TM)						     
// All Rights Reserved
// Copyright (C) 1993-1996						     
//---------------------------------------------------------------------------

#ifndef MZABIX_ORACLE
#define MZABIX_ORACLE

#ifndef MZABI_ORACLE
#include "mzabi"       
#endif /* !MZABI_ORACLE */
#ifndef MKD_ORACLE
#include "mkd"       
#endif /* !MZABI_ORACLE */

//----------------------------------------------------------------------------
// Module: mzabix
// Function:
//   This is the module describing the interface to a Broadcast Initiator
//   Exporter.
//----------------------------------------------------------------------------
module mzabix
{

   //--------------------------------------------------------------------------
   // Data Types
   //--------------------------------------------------------------------------

   //-------------------------------------------------------------------   
   // Exception: badEvent
   // Function:  
   //-------------------------------------------------------------------   

    exception badEvent { };

   //-------------------------------------------------------------------   
   // Typedef: statusInfo
   // Function: Status of the  exporter itself
   // event.
   // They are defined as follows:
   //    sts         - The status of the event
   //    stsMsg      - A status text message.
   //------------------------------------------------------------------- 
    struct statusInfo
    {
	mzabi::expStatus    sts;
	string    stsMsg;
    };
    typedef sequence <statusInfo> statusInfoLst;  

   //-------------------------------------------------------------------   
   // Typedef: eventStatusInfo
   // Function: This structure represents a attributes of an exporter's 
   // event.
   // They are defined as follows:
   //    schdOR      - The Object Reference to the Event's Schedule
   //    sts         - The status of the event
   //    stsMsg      - A status text message.
   //------------------------------------------------------------------- 
    struct eventStatusInfo
    {
	mzabi::Schd        schdOR;
	mzabi::schdStatus  sts;
	string             stsMsg;
    };
    typedef sequence <eventStatusInfo> eventStatusInfoLst;  


   //--------------------------------------------------------------------------
   // Interface: exporter
   // Function: Interface to Broadcast Initiator Exporter
   //   
   //--------------------------------------------------------------------------
    interface exporter
    {

        //--------------------------------------------------------------------
        // Name: mzabix::exporter::startEvent
        // Function:
        //   Starts the event identifed by schdOR at the given time. 
        // Input:
        //   schdOR -     The Schedule OR describing the event.
        //   startTime -  The starttime of the event.
        //   stopTime -   The stoptime of the event. 
        // Output:
        //   Nothing
        // Returns:
        //   mzabi::schdStatus  - Status of the call.
        // Raises:
        //   badEvent
        //---------------------------------------------------------------------
	mzabi::schdStatus startEvent(in mzabi::Schd schdOR,
				in mkd::gmtWall startTime,
				in mkd::gmtWall stopTime)
		raises(badEvent);

        //--------------------------------------------------------------------
        // Name: mzabix::exporter::stopEvent
        // Function:
        //   Stops the event identifed by schdOR at the given time. 
        // Input:
        //   schdOR -     The Schedule OR describing the event.
        //   stopTime -   The stoptime of the event. 
        // Output:
        //   Nothing
        // Returns:
        //   mzabi::schdStatus  - Status of the call.
        // Raises:
        //   badEvent
        //---------------------------------------------------------------------
	mzabi::schdStatus stopEvent(in mzabi::Schd schdOR,
				in mkd::gmtWall stopTime)
		raises(badEvent);

        //--------------------------------------------------------------------
        // Name: mzabix::exporter::changeEvent
        // Function:
        //   The event identified by schdOR has changed. 
        // Input:
        //   schdOR -     The Schedule OR describing the event.
        // Output:
        //   Nothing
        // Returns:
        //   mzabi::schdStatus  - Status of the call.
        // Raises:
        //   badEvent
        //---------------------------------------------------------------------
	mzabi::schdStatus changeEvent(in mzabi::Schd schdOR)
		raises(badEvent);

        //--------------------------------------------------------------------
        // Name: mzabix::exporter::getEventStatus
        // Function:
        //   Get the status of the event identified bu schdOR. 
        // Input:
        //   schdOR -     The Schedule OR describing the event.
        // Output:
        //   Nothing
        // Returns:
        //   eventStatusInfo  - Status of the event.
        // Raises:
        //   badEvent
        //---------------------------------------------------------------------
	eventStatusInfo getEventStatus(in mzabi::Schd schdOR)
		raises(badEvent);

        //--------------------------------------------------------------------
        // Name: mzabix::exporter::getAllEventStatus
        // Function:
        //   Get the status of the all of the events the exporter is handling. 
        // Input:
        //   Nothing.
        // Output:
        //   Nothing
        // Returns:
        //   eventStatusInfoLst  - List of all event Status. Returns an
	//   		           empty list if there are no status.
        // Raises:
        //   badEvent
        //---------------------------------------------------------------------
	eventStatusInfoLst getAllEventStatus()
		raises(badEvent);

        //--------------------------------------------------------------------
        // Name: mzabix::exporter::getStatus
        // Function:
        //   Get the status of the exporter itself. 
        // Input:
        //   Nothing.
        // Output:
        //   Nothing
        // Returns:
        //   statusInfo  - Status of the exporter.
        // Raises:
        //   badEvent
        //---------------------------------------------------------------------
	statusInfo getStatus();

    };

};

#endif /* MZABIX_ORACLE */
