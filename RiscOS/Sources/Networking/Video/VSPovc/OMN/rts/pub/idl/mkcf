#ifndef MKCF_ORACLE
#define MKCF_ORACLE

/* mkcf.idl
 * Copyright (C)1996 Oracle Corporation
 * 
 * This interface defines a method whereby encoders can load content onto
 * the Oracle Video Server in real time. For details, see the "MPEG Realtime
 * Encoder Specification"
 * 
 * 08/14/97 dweaver  changed to a conversion layer to VES
 * 12/04/96 dweaver  genericize blobs, add more comments
 * 08/15/96 dweaver  add exceptions
 * 06/14/96 dweaver  use mkd module as a base
 * 04/26/96 dweaver  Creation
 */

#ifndef MKD_ORACLE
#include "mkd"         // Position type
#endif /* !MKD_ORACLE */

module mkcf
{
  // format specifies both the compression format of the information
  // and the transport wrap (if any) that has been placed around it
  enum format
  {
    formatMpeg1SS,      // Mpeg1 audio and video in Mpeg1 system stream
    formatMpeg2Trans,   // Mpeg1 audio and video in Mpeg2 transport wrap
    formatRKF           // Oracle raw key frame format
  };
  enum vidCmp
  {
    vidCmpNone,      // means there is no video in this program
    vidCmpUnknown,
    vidCmpMpeg1,     // ISO/IEC 11172 video
    vidCmpMpeg2,     // ISO/IEC 13818-2 video
    vidCmpAviCVID,   // Radius Cinepak in AVI container
    vidCmpAviIV32,   // Intel Indeo v3.2 in AVI container
    vidCmpAviUCOD    // Iterated Systems' fractal encoding in AVI container
  };
  enum audCmp
  {
    audCmpNone,      // no audio contained in this program
    audCmpUnknown,
    audCmpMpeg1,     // ISO/IEC 11172 audio
    audCmpMpeg2,     // ISO/IEC 13818-3 audio
    audCmpWavePCM,   // Microsoft stuff
    audCmpWaveADPCM,
    audCmpWaveALAW,  // IBM a-law inside Microsoft WAVE
    audCmpWaveMULAW  // Sun mu-law inside Microsoft WAVE
  };

  // There are a lot of little niggly things that need to go in the tag
  // file that don't change from feed to feed with a single brand
  // of encoder, but do vary across encoder products. More than one may
  // need to be assigned to a vendor if they have multiple products that
  // aren't compatible (from our point of view).
  enum vendor
  {
    vendorPrepareOnly,
    vendorFutureTelOne,
    vendorOptivisionOne,
    vendorBroadwayOne,
    vendorOracleCodec,      // A safe, generic value to use, if uninformative
    vendorLucentG1,
    vendorLucentG3
  };

  struct m1sHdr
  {
    sequence<octet> seqHdr;       // The sequence header may not change
                                  // during the course of the feed.
  };
  struct m2tHdr
  {
    unsigned short  videoPid;
    unsigned short  audioPid;
    unsigned short  clockPid;
    octet           videoStream;  // elementary stream identifier
    sequence<octet> pat;          // Entire contents of the PAT, which
                                  // may not change during the feed.
    sequence<octet> pmt;          // Entire contents of the PMT, which
                                  // may not change during the feed.
    sequence<octet> seqHdr;       // Includes the start code for the
                                  // sequence header; the sequence header
                                  // may not change during the feed except
                                  // for minor variations in the video
                                  // bitrate.
  };
  struct rkfHdr
  {
    sequence<octet> initData;     // Data which needs to be transmitted
                                  // before play begins at a key frame.
  };

  struct hdr
  {
    vendor         vend;
    format         fmt;
    vidCmp         vid;
    audCmp         aud;

    // Client display information
    unsigned short heightInPixels;
    unsigned short widthInPixels;
    long           pelAspectRatio; // ht*10000/wd of INDIVIDUAL pixels
    unsigned long  frameRate;   // *1000, e.g. 29970 -> 29.97 fps

    union hdrcompData switch (format)
    {
      case formatMpeg1SS:     m1sHdr  m1s;
      case formatMpeg2Trans:  m2tHdr  m2t;
      case formatRKF:         rkfHdr  rkf;
    }              compData;
  };

  // Tightly bound interface
  interface feed
  {
    enum frame
    {
      frameMpegI,
      frameMpegP,
      frameMpegB,
      frameRawKey,   // A random access point. Video can be legally played
                     // from this point at any time.
      frameRawBias,  // A conditional access point; it can only be used if
                     // the previous frame (whether key or bias) was sent.
      frameRawAudio  // An audio-only random access point. Typically only
                     // used in audio-only programs.
    };

    struct m1sTag
    {
      // The videoStreamCode is the stream_id found in the system header
      // for this video frame; this byte is always "1110 xxxx" to indicate
      // an ISO 11172-2 video stream. See section 2.4.4.2 of the MPEG-1
      // systems spec, ISO/IEC 11172-1.
      octet          videoStreamCode;
    };
    struct m2tTag
    {
      octet          continuityCounter;
      unsigned long  leadingZeros;     // byte count to first video in frame
      unsigned long  trailingZeros;    // bytes from last video to frame end
      unsigned short headerPesLength;  // byte count
      unsigned short trailerPesLength; // byte count
      unsigned short nonVideoPackets;  // packet count
      unsigned short nullPackets;      // packet count
    };
    struct rkfTag
    {
      octet          nothing;          // IDL doesn't tolerate empty structs
    };

    struct tag
    {
      frame          frameType;
      mkd::pos       timestamp;        // must be "time oriented"
      unsigned long  byteOffsetHigh;   // Relative to beginning of file
      unsigned long  byteOffsetLow;
      unsigned long  videoByteLength;  // of the frame
      union tagCompData switch (format)
      {
        case formatMpeg1SS:    m1sTag  m1s;
        case formatMpeg2Trans: m2tTag  m2t;
        case formatRKF:        rkfTag  rkf;
      }              compData;
    };

    typedef sequence<tag> tagList;

  }; /* interface feed */
}; /* module mkcf */

#endif // !MKCF_ORACLE
