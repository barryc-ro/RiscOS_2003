//
// File: mzaini.idl - NVOD Initiator interfaces
//
// Description:
//
// Modification History:
//   Date	Name	Comments
//   03-Mar-97  plord   Updated the comments
//   20-Feb-97  plord   created
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
// Oracle Corporation							     
// Oracle Media Server (TM)						     
// All Rights Reserved
// Copyright (C) 1993-1996						     
//---------------------------------------------------------------------------
 
#ifndef MZAINIT_ORACLE
#define MZAINIT_ORACLE
 
#include "mzacom"
#include "mzs"
 
//-------------------------------------------------------------------------
// Module: mza
// Function:
//   This module is responsible for all database operations for the 
//   video server.
//-------------------------------------------------------------------------
module mza
{
 
   //------------------------------------------------------------------------
   //   FORWARD DECLARATIONS
   //------------------------------------------------------------------------
    
   interface Schd;
   interface LgCtnt;

   //------------------------------------------------------------------------
   //   EXCEPTIONS
   //------------------------------------------------------------------------
        
   //------------------------------------------------------------------------
   //   TYPEDEFS
   //------------------------------------------------------------------------
    
   //------------------------------------------------------------------------
   // Typedef: SchdStatus
   // Function: Contains status information about scheduled content. 
   //           This includes all the schedules the initiator has read from 
   //           the database and scheduled internally, but has yet to 
   //           start playing.
   // The elements are defined as follows:
   //    schdOR     - The Object Reference to the scheduled object
   //    chnlOR     - The Object Reference for the channel it's scheduled on
   //    startTime  - The time it's supposed to start playing
   //    chnlNum    - The Channel Number iot will play on
   //    chnlLabel  - The Channel's Label
   //    netAddr    - The corresponding physical network address for the 
   //		      channel
   //------------------------------------------------------------------------
   struct SchdStatus
   {
     Schd     schdOR;  
     LgCtnt   lgCtntOR;
     string   startTime; 
     string   chnlNum; 
     string   chnlLabel; 
     string   netAddr; 
   };
    
   //------------------------------------------------------------------------
   // Typedef: SchdStatusLst
   // Function: A list of SchdStatus structures
   //------------------------------------------------------------------------
   typedef sequence <SchdStatus> SchdStatusLst;
    
   //------------------------------------------------------------------------
   // Typedef: StrmStatus
   // Function: Contains status information about currently playing content. 
   //           These are scheduled items that the initiator has already
   //           started playing. When a stream finishes playing, or quits 
   //		for some reason, it is no longer reported.
   // They are defined as follows:
   //    schdOR              - The Object Reference to the playing schedule
   //    strmOR              - The Object Reference for the stream that is 
   // 		               playing
   //    inst                - The stream instance (used for finish)
   //    requestedStartTime  - The time it was  requested to start
   //    actualStartTime     - The time it actually started playing
   //------------------------------------------------------------------------
   struct StrmStatus
   {
     Schd         schdOR;  
     mzs::stream   strmOR;
     mzs::stream::instance     inst;
     string requestedStartTime; 
     string actualStartTime; 
   };
    
   //------------------------------------------------------------------------
   // Typedef: StrmStatusLst
   // Function: A list of LgCtnt attribute structures
   //------------------------------------------------------------------------
   typedef sequence <StrmStatus> StrmStatusLst;
    


};                                                             /* module mza */
    
   
//-------------------------------------------------------------------------
// Module: mza
// Function:
//   This module is responsible for all database operations for the 
//   video server.
//-------------------------------------------------------------------------
module mza 
{

   //-----------------------------------------------------------------------
   // Interface: Init
   // Function:
   //   Allows monitoring and management of the NVOD Initiator. 
   //-----------------------------------------------------------------------
   
   interface Init 
   { 
    
    //---------------------------------------------------------------------
    // Name: mza::Init::getSchdStatus
    // Function:
    //   Gets the status of all currently scheduled content from the initiator.
    // Input:
    //   itr		- Specifies the maximum number of items to return 
    //			  as well as which item to start with. See comments 
    //			  in mzacom on Itr.
    // Output:
    //   itr		- Updated values for the number of items 
    //			  actually returned and the new position.
    // Returns:
    //   SchdStatus structure
    // Raises:
    //   PersistenceError
    //----------------------------------------------------------------------
     SchdStatusLst getSchdStatus(inout Itr itr)
       raises (PersistenceError);
   

    //---------------------------------------------------------------------
    // Name: mza::Init::getStrmStatus
    // Function:
    //   Gets the status of all currently playing content from the initiator.
    // Input:
    //   itr		- Specifies the maximum number of items to return 
    //			  as well as which item to start with. See comments 
    //			  in mzacom on Itr.
    // Output:
    //   itr		- Updated values for the number of items 
    //			  actually returned and the new position.
    // Returns:
    //   SchdStatus structure
    // Raises:
    //   PersistenceError
    //----------------------------------------------------------------------
     StrmStatusLst getStrmStatus(inout Itr itr)
       raises (PersistenceError);
   
    };
 
};                                                             /* module mza */

#endif                                                         /* MZA_LGCTNT */
