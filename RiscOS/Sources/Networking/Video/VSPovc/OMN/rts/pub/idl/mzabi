//
// mzabi.idl - MZA Broadcast Initiator Interfaces, 
//             Exp, ExpGrp and Schd
//
// Description:
//	This file describes the public interfaces for the generic OVS
//	NVOD Broadcast Initiator.
//
// Modification History:
//   Name	  Date		  Comments
//   Parker Lord   10/08/97       Initial creation.
//
//   Dave Robinson 08-Dec-1997	  Corrected comment on ExpGrpAtr
//
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
// Oracle Corporation							     
// Oracle Media Server (TM)						     
// All Rights Reserved
// Copyright (C) 1993-1996						     


#ifndef MZABI_ORACLE
#define MZABI_ORACLE
//
//   IDL INCLUDES
///////////////////////////////////////////////////////////////////////////////
#ifndef MZACOM_ORACLE
#include "mzacom"
#endif
#ifndef MKD_ORACLE
#include "mkd"
#endif

 
//----------------------------------------------------------------------------
// Module: mzabi
// Function:
//   This module is responsible for all Broadcast Initiator Functions.
//----------------------------------------------------------------------------
module mzabi
{
 
  //--------------------------------------------------------------------------
  // Forward Declarations
  //--------------------------------------------------------------------------
   interface Exp;
   interface ExpGrp;
   interface Schd;


  //--------------------------------------------------------------------------
  // Data Types
  //--------------------------------------------------------------------------
   enum eventType
   {
     synchShort_eventType, // BI tells the exporter the start and
                           // stop times of an event in one call
     synchLong_eventType,  // BI tells the exporter the start and 
                           // stop times of an event in different calls
     asynch_eventType,     // End of event is not determined by BI
     change_eventType,     // BI notifies change in schedule event only
     unknown_eventType     // Unknown Event Type
   };

    exception badEventType {
        string msg;
        eventType event;
    };


  //--------------------------------------------------------------------------
  // Enum: schdStatus
  // Function: Defines the values a schedule may have at any given time.
  //--------------------------------------------------------------------------
    enum schdStatus
    {
	scheduled_schdStatus,    // First state when created (not exportable)
	committed_schdStatus,	 // Schedule committed and ready for export
	exporting_schdStatus,	 // Started exporting schedule to exporters
	exported_schdStatus,	 // Schedule exported to all exporters
	started_schdStatus,	 // Scedule started on one or more exporters
	finished_schdStatus,	 // Schedule finished on all exporters
	finishing_schdStatus,	 // Schedule is in the process of finishing 
	exportError_schdStatus,	 // Unable to export Schd to one or more Exps
	executeError_schdStatus, // Failure in execution of one or more Exps
	unknown_schdStatus       // Unknown status
    };

    //-------------------------------------------------------------------   
    // Enum: expStatus
    // Function: Values for reporting the status of an exporter
    //------------------------------------------------------------------- 
    enum expStatus
    {
	initializing_expStatus,    // Exporter not yet ready to process events
	operating_expStatus,       // Exporter ready to process events
	problem_expStatus,         // Exporter detected an internal probelm
	stopping_expStatus,        // Exporter shutting down
	unknown_expStatus          // Exporter in an unknown state
    };

    exception badStatus {
        string msg;
        sb4 status; // Use sb4 since this could be expStatus or schdStatus
    };

   //--------------------------------------------------------------------------
   // Local Typedefs
   //--------------------------------------------------------------------------

   //-------------------------------------------------------------------   
   // Typedef: ExpAtr
   // Function: This structure represents an Exp's attributes
   // They are defined as follows:
   //    expOR        - The Exp's Object Reference
   //    name         - The name of the Exp
   //    implId       - The implId of the mzabix::exporter interface to 
   //                   bind to when making calls to the exporter methods
   //    setupTime    - How far in advance to call the startEvent method
   //                   for this exporter (in microseconds)
   //    sts	      - Status of the exporter.
   //------------------------------------------------------------------- 

    struct ExpAtr                 
    {
        Exp        expOR;           
        string     name;    	          
        string     implId;                
        long       setupTime;  
        expStatus  sts;    
    };

    typedef sequence <ExpAtr> ExpAtrLst;  

   //-------------------------------------------------------------------   
   // Typedef: ExpGrpAtr
   // Function: This structure represents an ExpGrp's attributes
   // They are defined as follows:
   //    expGrpOR  - The ExpGrp's Object Reference
   //    name      - The name of the ExpGrp
   //    expLst    - A List of ExpAtr for Exp Objects which belong to this
   //                ExpGrp
   //------------------------------------------------------------------- 

    struct ExpGrpAtr                 
    {
        ExpGrp   expGrpOR;           
        string   name;    	       
        ExpAtrLst   expLst;      
    };

   typedef sequence <ExpGrpAtr> ExpGrpAtrLst;  

   //-------------------------------------------------------------------   
   // Typedef: SchdAtr
   // Function: This structure represents a schedule's attributes
   // They are defined as follows:
   //    schdOR     - The schedules's Object Reference
   //    startDate  - The start Time and Date of the event. 
   //    stopDate   - The stop Time and Date of the event. 
   //    type       - The type of Schd Event
   //    expGrpAtr  - The ExpGrp which should be informed for this Schd Event.
   //    chgGrpAtr  - The ExpGrp which should be informed if the Schd changes
   //    sts         - The current status of the Schd Event.
    //------------------------------------------------------------------- 

   struct SchdAtr                 
   {
      Schd          schdOR;           
      mkd::gmtWall  startDate;                        
      mkd::gmtWall  stopDate; 
      eventType     type; 
      ExpGrpAtr     expGrpAtr;                       
      ExpGrpAtr     chgGrpAtr;                       
      schdStatus    sts;  

   };

   typedef sequence <SchdAtr> SchdAtrLst;  

   //--------------------------------------------------------------------------
   // Interface: Schd
   // Function: Interface to Schedules
   //   
   //--------------------------------------------------------------------------
   interface Schd
   {
   
    //-----------------------------------------------------------------------
    // Name: mza::Schd::destroy
    // Function:
    //   Destroys a schedule Object. A schedule may not be destroyed if 
    //   the status is exporting_schdStatus, exported_schdStatus, 
    //   started_schdStatus or finishing_schdStatus.
    // Input:
    //   None
    // Output:
    //   None
    // Returns:
    //   Nothing
    // Raises:
    //   mza::PersistenceError
    //------------------------------------------------------------------------
      void destroy()
	   raises (mza::PersistenceError);
   
   
    //-----------------------------------------------------------------------
    // Name: mzabi::Schd::getAtr
    // Function:
    //   Gets all of a Schedule's attributes. 
    // Input:
    //   None
    // Output:
    //   schdAtr  - Place holder for the attributes.
    // Returns:
    //   Nothing
    // Raises:
    //   badEventType, badStatus, mza::PersistenceError
    //------------------------------------------------------------------------
      void getAtr(out SchdAtr schdAtr)
	      raises (badEventType, badStatus, mza::PersistenceError);

    //-----------------------------------------------------------------------
    // Name: mzabi::Schd::setAtr
    // Function:
    //   Sets all of the Schedules Attributes. If the Schd has a previous
    //   status of exporting, exported, started AND a new status of exporting,
    //   exported or started, then this method will invoke the 
    //   mzabix::changeEvent method on all of the exporters listed in the 
    //   Change Exporter Group for this Schd object.
    // Input:
    //   schdAtr - SchdAtr structure containing all of the attributes to be 
    //             set.
    // Output:
    //   None
    // Returns:
    //   Nothing
    // Raises:
    //   badEventType, badStatus, mza::DataConversion, mza::PersistenceError
    //------------------------------------------------------------------------
      void setAtr(in SchdAtr schdAtr)
	      raises (badEventType, badStatus, 
                      mza::DataConversion, mza::PersistenceError);
   
   
    //-----------------------------------------------------------------------
    // Name: mzabi::Schd::setStatus
    // Function:
    //   Update the status of the Schedule.
    // Input:
    //   sts   - New status to be set for the schedule
    // Output:
    //   None
    // Returns:
    //   Nothing
    // Raises:
    //   badStatus, mza::DataConversion, mza::PersistenceError
    //------------------------------------------------------------------------
      void setStatus(in schdStatus sts)
	      raises (badStatus, mza::DataConversion, mza::PersistenceError);
   
   };
   //--------------------------------------------------------------------------
   // Interface: SchdFac
   // Function:
   //   Allows creation of new Schd Objects
   //--------------------------------------------------------------------------
   interface SchdFac
   {
      
     // Constructor 
    //-----------------------------------------------------------------------
    // Name: mzabi::SchdFac::create
    // Function:
    //   Creates new schedule objects from the input parameters passed in.
    //    New schedules will get created with a status of scheduled_schdStatus.
    // Input:
    //   startDate	- The data and time the Schd Event will start
    //   stopDate	- The data and time the Schd Event will stop
    //   expGrpOR	- The Exporter Group which is notified of the Event
    //   chgGrpOR	- The Exporter Group which is notified if the Event 
    //                    Changes
    //   type   	- The type of Event.
    // Output:
    //   None
    // Returns:
    //   New Schd Object Reference. 
    // Raises:
    //   mza::DataConversion, mza::PersistenceError
    //------------------------------------------------------------------------
     Schd  create(in mkd::gmtWall startDate,
		  in mkd::gmtWall stopDate,
		  in ExpGrp expGrpOR,
		  in ExpGrp chgGrpOR,
		  in eventType type) 
	   raises (mza::DataConversion, mza::PersistenceError);
   };
   
   //--------------------------------------------------------------------------
   // Interface: SchdMgmt
   // Function:
   //   Methods allowing operations on groups of Schedule Objects
   //--------------------------------------------------------------------------
   interface SchdMgmt
   {
      
    //-----------------------------------------------------------------------
    // Name: mzabi::SchdMgmt::lstAtrByDate
    // Function:
    //   This method returns a list of information about events to be started  
    //   during a specified time period. This method returns all the 
    //   information about the events which need to be start 
    //   in the next time period starting at 'startDate' and a duration 
    //   as specified in 'secs'.
    // Input:
    //   startDate	- The Date/Time specifiying the start time 
    //			  we would like to have information returned for.
    //   secs		- The duration in seconds we would like to retrieve 
    //			  data for starting from the time in startDate.
    //   sts		- If this is specified, we will only returned 
    //			  schedule items which have a status which is equal 
    //			  to the value of this item. If it is set to unknown, 
    //			  then all schedule objects are returned regardless of 
    //		          their status.
    //	 exporting  	- If this boolean is true, then the server will 
    //                    mark those schedules returned as having a status of 
    //                    exporting_schdStatus. THis should only be set true 
    //                    by the Generic Initiator when reading schedules for 
    //                    the purpose of exporting them.
    //   itr		- Specifies the maximum number of items to return 
    //			  as well as which item to start with. See comments 
    //			  in mzacom on mza::Itr.
    // Output:
    //   itr		- Updated values for the number of items 
    //			  actually returned and the new position.
    // Returns:
    //   Returns a SchdAtrLst containing values for all the items 
    //	 scheduled in the time period startDate + secs.
    // Raises:
    //   badEventType, badStatus, mza::DataConversion, mza::PersistenceError,
    //   mza::BadIterator
    //------------------------------------------------------------------------
      SchdAtrLst  lstAtrByDate ( in mkd::gmtWall  startDate,
				 in long    secs,
				 in schdStatus  sts,
				 in boolean exporting,
				 inout mza::Itr  itr)
	raises (badEventType, badStatus, 
                mza::DataConversion, mza::PersistenceError, mza::BadIterator);
   
    //-----------------------------------------------------------------------
    // Name: mzabi::SchdMgmt::lstAtrChangedEvents
    // Function:
    //   Retuns a list of Schd Events which have changed that the Exporters
    //   will need to be notified of.
    // Input:
    //   itr		- Specifies the maximum number of items to return 
    //			  as well as which item to start with. See comments 
    //			  in mzacom on mza::Itr.
    // Output:
    //   itr		- Updated values for the number of items 
    //			  actually returned and the new position.
    // Returns:
    //   Returns a SchdAtrLst containing values for all the items
    //   which have changed.
    // Raises:
    //   badEventType, badStatus, mza::DataConversion, mza::PersistenceError,
    //   mza::BadIterator
    //------------------------------------------------------------------------
      SchdAtrLst  lstAtrChangedEvents ( inout mza::Itr  itr)
	raises (badEventType, badStatus, 
                mza::DataConversion, mza::PersistenceError, mza::BadIterator);
   
    //-----------------------------------------------------------------------
    // Name: mzabi::SchdMgmt::lstAtrActiveEvents
    // Function:
    //   Retuns a list of Schd Events which should be active. Any event which 
    //   should be playing at the current time. 
    // Input:
    //   itr		- Specifies the maximum number of items to return 
    //			  as well as which item to start with. See comments 
    //			  in mzacom on mza::Itr.
    // Output:
    //   itr		- Updated values for the number of items 
    //			  actually returned and the new position.
    // Returns:
    //   Returns a SchdAtrLst containing values for all the items 
    //	 that should currently be active (i.e. they have not reached 
    //   their respective stopDate yet).
    // Raises:
    //   badEventType, badStatus, mza::DataConversion, mza::PersistenceError
    //   mza::BadIterator
    //------------------------------------------------------------------------
      SchdAtrLst  lstAtrActiveEvents ( inout mza::Itr  itr)
	raises (badEventType, badStatus, 
                mza::DataConversion, mza::PersistenceError, mza::BadIterator);
   
    //-----------------------------------------------------------------------
    // Name: mzabi::SchdMgmt::lstAtrActiveEventsByExpGrp
    // Function:
    //   Retuns a list of Schd Events which should be active for a given 
    //   ExpGrp. Any event which should be playing at the current time. 
    // Input:
    //   expGrpOR       - The exporter group to return the results for.
    //   itr		- Specifies the maximum number of items to return 
    //			  as well as which item to start with. See comments 
    //			  in mzacom on mza::Itr.
    // Output:
    //   itr		- Updated values for the number of items 
    //			  actually returned and the new position.
    // Returns:
    //   Returns a SchdAtrLst containing values for all the items 
    //	 that should currently be active (i.e. they have not reached 
    //   their respective stopDate yet) for a given ExpGrp.
    // Raises:
    //   badEventType, badStatus, mza::DataConversion, mza::PersistenceError
    //   mza::BadIterator
    //------------------------------------------------------------------------
        SchdAtrLst lstAtrActiveEventsByExpGrp ( in ExpGrp expGrpOR, 
				     inout mza::Itr  itr)
	raises (badEventType, badStatus, 
                mza::DataConversion, mza::PersistenceError, mza::BadIterator);

   };

   //--------------------------------------------------------------------------
   // Interface: ExpGrp
   // Function: Interface to ExpGrp
   //   
   //--------------------------------------------------------------------------
   interface ExpGrp
   {

    //-----------------------------------------------------------------------
    // Name: mzabi::ExpGrp::destroy
    // Function:
    //   Destroys a ExpGrp Object. 
    // Input:
    //   None
    // Output:
    //   None
    // Returns:
    //   Nothing
    // Raises:
    //   mza::PersistenceError
    //------------------------------------------------------------------------
      void destroy()
	   raises (mza::PersistenceError);
  
    //-----------------------------------------------------------------------
    // Name: mzabi::ExpGrp::getAtr
    // Function:
    //   Gets all of a ExpGrp's attributes. 
    // Input:
    //   None
    // Output:
    //   exporterAtr  - Place holder for the attributes.
    // Returns:
    //   Nothing
    // Raises:
    //   mza::PersistenceError
    //------------------------------------------------------------------------
      void getAtr(out ExpGrpAtr exporterAtr)
	      raises (mza::PersistenceError);

    //-----------------------------------------------------------------------
    // Name: mzabi::ExpGrp::setAtr
    // Function:
    //   Sets all of a ExpGrp's attributes. 
    // Input:
    //   exporterAtr  - The values to update for the ExpGrp.
    // Output:
    //   
    // Returns:
    //   Nothing
    // Raises:
    //   mza::DataConversion, mza::PersistenceError
    //------------------------------------------------------------------------
      void setAtr(in ExpGrpAtr exporterAtr)
	      raises (mza::DataConversion, mza::PersistenceError);

    //-----------------------------------------------------------------------
    // Name: mzabi::ExpGrp::addExp
    // Function:
    //   Add an Exp to a Group. 
    // Input:
    //   exporterOR  - The Exp to Add.
    // Output:
    //   Nothing
    // Returns:
    //   Nothing
    // Raises:
    //   mza::PersistenceError
    //------------------------------------------------------------------------
      void addExp(in Exp exporterOR)
	      raises (mza::PersistenceError);

    //-----------------------------------------------------------------------
    // Name: mzabi::ExpGrp::addExpByNm
    // Function:
    //   Add an Exp to a ExpGrp by the Exp's name. 
    // Input:
    //   name  - The name of the Exp to add.
    // Output:
    //   Nothing
    // Returns:
    //   Nothing
    // Raises:
    //   mza::PersistenceError
    //------------------------------------------------------------------------
      void addExpByNm(in string name)
	      raises (mza::DataConversion, mza::PersistenceError);

    //-----------------------------------------------------------------------
    // Name: mzabi::ExpGrp::remExp
    // Function:
    //   Remove an Exp from a Group. 
    // Input:
    //   exporterOR  - The Exp to remove.
    // Output:
    //   Nothing
    // Returns:
    //   Nothing
    // Raises:
    //   mza::PersistenceError
    //------------------------------------------------------------------------
      void remExp(in Exp exporterOR)
	      raises (mza::PersistenceError);

    //-----------------------------------------------------------------------
    // Name: mzabi::ExpGrp::remExpByNm
    // Function:
    //   Remove an Exp from a ExpGrp given the Exp's name. 
    // Input:
    //   name  - The name of the Exp to remove.
    // Output:
    //   Nothing
    // Returns:
    //   Nothing
    // Raises:
    //   mza::DataConversion, mza::PersistenceError
    //------------------------------------------------------------------------
      void remExpByNm(in string name)
	      raises (mza::DataConversion, mza::PersistenceError);

    //-----------------------------------------------------------------------
    // Name: mzabi::ExpGrp::lstAtrExps
    // Function:
    //   Returns the attributes for all the Exp's in the ExpGrp. 
    // Input:
    //   itr		- Specifies the maximum number of items to return 
    //			  as well as which item to start with. See comments 
    //			  in mzacom on mza::Itr.
    // Output:
    //   itr		- Updated values for the number of items 
    //			  actually returned and the new position.
    // Returns:
    //   ExpAtrLst - List of all the Exp's attributes for this ExpGrp.
    // Raises:
    //   mza::PersistenceError, mza::BadIterator
    //------------------------------------------------------------------------
     ExpAtrLst lstAtrExps(inout mza::Itr iterator)
       raises (mza::PersistenceError, mza::BadIterator);

   };
   //--------------------------------------------------------------------------
   // Interface: ExpGrpFac
   // Function:
   //   Allows creation of new ExpGrp Objects
   //--------------------------------------------------------------------------
   interface ExpGrpFac
   {
      
     //-----------------------------------------------------------------------
     // Name: mzabi::ExpGrpFac::create
     // Function:
     //   Creats a new ExpGrp Object. 
     // Input:
     //   name  - The name of the exporter group. It must be unique.
     // Output:
     //   Nothing
     // Returns:
     //   Exp - Object Refernce to new ExpGrp.
     // Raises:
     //   mza::DataConversion, mza::PersistenceError
     //------------------------------------------------------------------------
     ExpGrp create(in string name)
	   raises (mza::DataConversion, mza::PersistenceError);
   
   };
   
   //--------------------------------------------------------------------------
   // Interface: ExpGrpMgmt
   //--------------------------------------------------------------------------
   interface ExpGrpMgmt
   {
      
     //-----------------------------------------------------------------------
     // Name: mzabi::ExpGrpMgmt::lstAtr
     // Function:
     //   List attribuites for all ExpGrps. 
     // Input:
     //   itr		- Specifies the maximum number of items to return 
     //			  as well as which item to start with. See comments 
     //			  in mzacom on mza::Itr.
     // Output:
     //   itr		- Updated values for the number of items 
     //			  actually returned and the new position.
     // Returns:
     //   ExpGrpAtrLst - Contains List of attributes for all ExpGrps.
     // Raises:
     //   mza::PersistenceError, badStatus, mza::BadIterator
     //------------------------------------------------------------------------
      ExpGrpAtrLst  lstAtr ( inout mza::Itr  itr)
			 raises (badStatus, mza::PersistenceError, 
                                 mza::BadIterator);
   
     //-----------------------------------------------------------------------
     // Name: mzabi::ExpGrpMgmt::lstAtrByNm
     // Function:
     //   List attribuites for all ExpGrps which match the given name. 
     //   Wildcard characters '*' and '.' are allowed for pattern 
     //   matching. 
     // Input:
     //   name		- The name of the ExpGrp to search for.
     //   itr		- Specifies the maximum number of items to return 
     //			  as well as which item to start with. See comments 
     //			  in mzacom on mza::Itr.
     // Output:
     //   itr		- Updated values for the number of items 
     //			  actually returned and the new position.
     // Returns:
     //   ExpGrpAtrLst - Contains List of attributes for all ExpGrps.
     // Raises:
     //   badStatus, mza::DataConversion, mza::PersistenceError, 
     //   mza::BadIterator
     //-----------------------------------------------------------------------
      ExpGrpAtrLst  lstAtrByNm ( in string name, inout mza::Itr  itr)
			 raises (badStatus, mza::DataConversion, 
                                 mza::PersistenceError, mza::BadIterator);
   
   };


   //--------------------------------------------------------------------------
   // Interface: Exp
   // Function: Interface to Exp
   //   
   //--------------------------------------------------------------------------
   interface Exp
   {
   
    //-----------------------------------------------------------------------
    // Name: mzabi::Exp::destroy
    // Function:
    //   Destroys a Exp Object. 
    // Input:
    //   None
    // Output:
    //   None
    // Returns:
    //   Nothing
    // Raises:
    //   mza::PersistenceError
    //------------------------------------------------------------------------
      void destroy()
	   raises (mza::PersistenceError);
  
    //-----------------------------------------------------------------------
    // Name: mzabi::Exp::getAtr
    // Function:
    //   Gets an Exp Object's attributes. 
    // Input:
    //   None
    // Output:
    //   exporterAtr - Attributes of the Exp Object.
    // Returns:
    //   Nothing
    // Raises:
    //  badStatus,  mza::PersistenceError
    //------------------------------------------------------------------------
      void getAtr(out ExpAtr exporterAtr)
	      raises (badStatus, mza::PersistenceError);

    //-----------------------------------------------------------------------
    // Name: mzabi::Exp::setAtr
    // Function:
    //   Sets an Exp Objects attributes. 
    // Input:
    //   exporterAtr - New attributes for the Exp Object.
    // Output:
    //   None
    // Returns:
    //   Nothing
    // Raises:
    //   badStatus, mza::DataConversion, mza::PersistenceError
    //------------------------------------------------------------------------
      void setAtr(in ExpAtr exporterAtr)
	      raises (badStatus, mza::DataConversion, mza::PersistenceError);
   
    //-----------------------------------------------------------------------
    // Name: mzabi::Exp::setStatus
    // Function:
    //   Update the Status for this Exp. 
    // Input:
    //   sts - The status to update.
    // Output:
    //   None
    // Returns:
    //   Nothing
    // Raises:
    //   badStatus, mza::PersistenceError
    //------------------------------------------------------------------------
      void setStatus(in expStatus sts)
	      raises (badStatus, mza::PersistenceError);
   
      
   };
   //--------------------------------------------------------------------------
   // Interface: ExpFac
   // Function:
   //   Allows creation of new Exp Objects
   //--------------------------------------------------------------------------
   interface ExpFac
   {
      
    //-----------------------------------------------------------------------
    // Name: mzabi::ExpFac::create
    // Function:
    //   Creates a new Exporter. 
    // Input:
    //   name      - The name for the new exporter.
    //   implId    - The implId which will be used to bind to the 
    //               mzabix interface for communicating with the exporter 
    //               cartridge..
    //   setupTime - The time this exporter needs to set up prior to 
    //               actually starting the event (in microseconds).
    // Output:
    //   None
    // Returns:
    //   Exp       - Object Refrence to the new Exp Object
    // Raises:
    //   mza::DataConversion, mza::PersistenceError
    //------------------------------------------------------------------------
     Exp create(in string name,
		in string implId,
		in long setupTime)
	   raises (mza::DataConversion, mza::PersistenceError);
   
   };
   
   //--------------------------------------------------------------------------
   // Interface: ExpMgmt
   //--------------------------------------------------------------------------
   interface ExpMgmt
   {
      
     //-----------------------------------------------------------------------
     // Name: mzabi::ExpMgmt::lstAtr
     // Function:
     //   List attribuites for all ExpGrps. 
     // Input:
     //   itr		- Specifies the maximum number of items to return 
     //			  as well as which item to start with. See comments 
     //			  in mzacom on mza::Itr.
     // Output:
     //   itr		- Updated values for the number of items 
     //			  actually returned and the new position.
     // Returns:
     //   ExpAtrLst - Contains List of attributes for all Exps.
     // Raises:
     //   badStatus, mza::PersistenceError, mza::BadIterator
     //------------------------------------------------------------------------
      ExpAtrLst  lstAtr ( inout mza::Itr  itr)
			 raises (badStatus, mza::PersistenceError, 
                                 mza::BadIterator);
   
     //-----------------------------------------------------------------------
     // Name: mzabi::ExpMgmt::lstAtrByNm
     //   List attribuites for all Exps which match the given name. 
     //   Wildcard characters '*' and '.' are allowed for pattern 
     //   matching. 
     // Input:
     //   name		- The name of the Exp to search for.
     //   itr		- Specifies the maximum number of items to return 
     //			  as well as which item to start with. See comments 
     //			  in mzacom on mza::Itr.
     // Output:
     //   itr		- Updated values for the number of items 
     //			  actually returned and the new position.
     // Returns:
     //   ExpAtrLst - Contains List of attributes for all Exps.
     // Raises:
     //   badStatus, mza::DataConversion, mza::PersistenceError,
     //   mza::BadIterator
     //-----------------------------------------------------------------------
      ExpAtrLst  lstAtrByNm ( in string name, inout mza::Itr  itr)
			 raises (badStatus, mza::DataConversion, 
			         mza::PersistenceError, mza::BadIterator);
   
     //-----------------------------------------------------------------------
     // Name: mzabi::ExpMgmt::lstAtrByImplId
     //   List attribuites for all Exps which match the given name. 
     //   Wildcard characters '*' and '.' are allowed for pattern 
     //   matching. 
     // Input:
     //   impl		- The ImplId of the Exp to search for.
     //   itr		- Specifies the maximum number of items to return 
     //			  as well as which item to start with. See comments 
     //			  in mzacom on mza::Itr.
     // Output:
     //   itr		- Updated values for the number of items 
     //			  actually returned and the new position.
     // Returns:
     //   ExpAtrLst - Contains List of attributes for all Exps.
     // Raises:
     //   badStatus, mza::DataConversion, mza::PersistenceError,
     //   mza::BadIterator
     //-----------------------------------------------------------------------
      ExpAtrLst  lstAtrByImplId ( in string impl, inout mza::Itr  itr)
			 raises (badStatus, mza::DataConversion, 
			         mza::PersistenceError, mza::BadIterator);
   
   };
   
   

};
#endif        /* !MZABI_ORACLE */
