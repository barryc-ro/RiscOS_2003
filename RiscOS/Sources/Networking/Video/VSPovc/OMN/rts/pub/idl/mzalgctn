//
// File: mzalgctn.idl - Logical Content interfaces
//
// Description:
//   This interface describes how to create, destroy and manage
//   logical content in the Oracle Media Server. Logical content 
//   defines a playable content asset residing on the Oracle Video Server.
//   Logical Content in its simplest form is just a single physical
//   content file from beginning to end. Using the interfaces defined
//   here and a database for storage, complex logical content objects
//   may be built constructed of multiple pieces of content.
// 
//   The interfaces defined here are implemented in the OVS service, 
//   vscontsrv. There are actually two different implementations of these 
//   methods. The first requires no database connection and simply maps logical
//   content onto MDS tagfiles. The second uses a four tiered model to allow 
//   custom sequences of content to be created using the CtntPvdr, Ctnt, Clip 
//   and LgCtnt interfaces.
//
//   CtntPvdr objects describe who the owner of some physical content may be. 
//   They can be used to track who owns which content.
//
//   Ctnt objects represent physical content stored in MDS. There is uaually 
//   a one to one mapping of Ctnt objects to MDS tagfiles. In the case where 
//   there is no database connection, these objects are constructed directly 
//   from tagfile headers stored in MDS.
//
//   Clip objects allow for breaking Ctnt objects up into smaller pieces. 
//   There is always a one to one mapping of Clip objects to Ctnt objects, 
//   although a Ctnt object may be refrenced by more than one Clip, or by no 
//   Clips. A Clip adds a start and end position to the Ctnt object effectvely 
//   create a content segment. The Clips eventually get mapped to 
//   mkd::segInfoList when logical content is resolved by the stream service.
//
//   LgCtnt objects contain nothing more than a sequence of clips. LgCtnt
//   objects can currently contain from 0 to 16 clips maximum. Each clip in 
//   the logical content contains a sequence number. Clips are played in the
//   order of their sequence number within the logical content.
//
//   When running vscontsrv in stand-alone mode, there are only a few methods 
//   which have actual implementations. Specifically, LgCtntMgmt::lstAtr, 
//   LgCtntMgmt::lstAtrByNm, CtntMgmt::lstAtr, CtntMgmt::lstAtrByNm, 
//   CtntMgmt::lstAtrByFileNm and BlobMgmt::lstAtrByNm. Behavior of all methods
//   in database mode and standalone mode is noted in each of the method's 
//   comments.
//
//   There are some other differences as well when running in standalone mode. 
//   Since there is no persistence store for in this case, all the information
//   to populate the LgCtntAtr structures will come from an MDS tagfile.
//   This means that then attribute structures will contain a name which is 
//   always equal to the tagfile name the structure was created from. The 
//   LgCtnt will always contain exactly one clip. Queries by name for LgCtnt
//   and Ctnt must use mds style filenames as the name (e.g. /mds/*/foo.mpi).
//   This also means the in this case, CtntMgmt::lstAtrByNm and 
//   CtntMgmt::lstAtrByFileNm are identical. The Object Refrence values 
//   returned in the CtntAtr and LgCtntAtr structures will always be set to 
//   CORBA_OBJECT_NIL since they have no meaning without a database.
//
//   The method LgCtntMgmt::UsingDB is provided to indicate if vscontsrv
//   is currently connected to a database or not.
//
//
// Modification History:
//   Date	Name	Comments
//   09-Dec-97  plord   Significantly enhanced the comments
//   11-Nov-97  plord   Add VSM query interfaces
//   06-Nov-97  plord   Use mkd_gmtWall for create times 
//   06-Jun-97  plord   Add BlobMgmt interface 
//   14-May-97  plord   Add suggested buffer size
//   27-Mar-97  plord   Add some comments
//   25-Mar-97  plord   Changed msecs on updateStats to long
//   21-Mar-97  plord   Add Ctnt_setAtr back in for vstagpatch
//   20-Mar-97  plord   Added new methods for updating Content for vstag
//   18-Mar-97  plord   Finalize new interface for Versio 3.0.1.0
//   11-Dec-96  plord   copied from ao vob, commented and consolidated
//--------------------------------------------------------------------
//--------------------------------------------------------------------
// Oracle Corporation							     
// Oracle Media Server (TM)						     
// All Rights Reserved
// Copyright (C) 1993-1996						     
//--------------------------------------------------------------------
 
#ifndef MZALGCTN_ORACLE
#define MZALGCTN_ORACLE
 
#ifndef MZACOM_ORACLE
#include "mzacom"
#endif
#ifndef MKD_ORACLE
#include "mkd"
#endif
//--------------------------------------------------------------------
// Module: mza
// Function:
//   This module is responsible for all application leve operations  
//   for the video server.
//--------------------------------------------------------------------
module mza
{
 
   //-------------------------------------------------------------------    
   // FORWARD DECLARATIONS
   //-------------------------------------------------------------------    
   interface Ctnt;
   interface CtntPvdr;
   interface LgCtnt;
   interface Clip;

   //-------------------------------------------------------------------   
   //   EXCEPTIONS
   //-------------------------------------------------------------------    
   
   //----------------------------------------------------------------------
   // Exception: BadPosition
   // Function:
   //   An error was discovered while trying to convert an mkd::pos type
   //   to or from it's database representation. mkd::pos types are used
   //   to indicate start and stop positions for clips. Usually means that
   //   a value was bad in the database.
   //----------------------------------------------------------------------
   exception BadPosition
   {
     opstatus   status;
     string     description;
     string     position;
     long       errorCode;
   };
    
   //----------------------------------------------------------------------
   // Exception: BadProhib
   // Function:
   //   An error was discovered while trying to convert an mkd::prohib type
   //   to or from it's database representation. mkd::prohib types are used
   //   to indicate prohibitions on rate control operations for a specific 
   //   Ctnt object. Usually means that a value was bad in the database.
   //----------------------------------------------------------------------
   exception BadProhib
   {
     opstatus   status;
     string     description;
     string     prohib;
     long       errorCode;
   };
    
    
   //-------------------------------------------------------------------
   // TYPEDEFS
   //------------------------------------------------------------------- 
  
   //-------------------------------------------------------------------   
   // Typedef: ClipAtr
   // Function: 
   //     Database Mode: 
   //         This structure represents a clip's attributes as defined in the 
   //         database.
   //     Stand Alone Mode:
   //         This structure is only ever used as part of a LgCtntAtr 
   //         structure when a long format query is made. See LgCtntAtr for 
   //         description of how it is filled in for this case.
   // They are defined as follows:
   //    clipOR        - The Clip's Object Reference
   //    ctntOR        - The Object Reference of the Content this Clip is for
   //    name          - A name given to the Clip
   //    desc          - A description of the given to the clip (optional)
   //	 ctntNm	       - The name of the content the clip is for	
   //    startPos      - The starting position of this clip (see mkd.idl)
   //    stopPos       - The ending position of this clip (see mkd.idl)
   //    clipAssigned  - Is this clip assigned to any logical content.
   //------------------------------------------------------------------- 

   struct ClipAtr
   {
       Clip     clipOR;
       Ctnt     ctntOR; 
       string   name;
       string   desc; 
       string   ctntNm;
       mkd::pos startPos;
       mkd::pos stopPos;
       boolean  assigned;
   };

   //-------------------------------------------------------------------
   // Typedef: ClipAtrLst
   // Function: A list of ClipAtr structures
   //-------------------------------------------------------------------   
   typedef sequence <ClipAtr> ClipAtrLst;

   //-------------------------------------------------------------------
   // Typedef: CtntAtr
   //     Database Mode: 
   //         This structure represents a Ctnt's attributes as defined in the 
   //         database.
   //     Stand Alone Mode:
   //         This structure is filled in from a tagfile header when no 
   //         database is used. The name and filename in this case are 
   //         equivalent and sugBufSz is always set to BufSzUnknown      
   //         since this information is not present in the tagfile header.
   // They are defined as follows:
   //    ctntOR         - The Ctnt's Object Reference
   //    ctntPvdrOR     - The provider who owns the content (optional)
   //    name           - A name given to the Ctnt (optional)
   //    desc           - A description of the given to the Ctnt (optional)
   //    createDate     - Date the content was created
   //    filename       - The actual file name of the content. Usually an mds
   //			  tag filename
   //    len            - The Size of the content in bytes
   //    msecs          - The total runlength of the content in milliseconds. 
   //			  A long is 32 bits and corresponds to about 25 days 
   //			  worth of time.
   //    rate           - The encoding rate of the content in bps
   //    firstTime      - The First time stamp in file
   //    lastTime       - The last time stamp in the file
   //    format         - All the format information (see mkd.idl). 
   //    prohibFlags    - Restrictions on seek, scan, pause, etc. 
   //			  (see mkd.idl) 
   //    tagsFlag       - Are there tags in the file?
   //    multiRateFlag  - Is this multirate content?
   //    reliableFlag   - Reliable transport required?
   //    volLocation    - Volume location of the content (optional)
   //    contStatus     - Location status of the content (tape, disk), 
   //    assigned       - Is this content object assigned to any clips?
   //    sugBufSz       - Suggested Buffer size for the client in bytes
   //			  if Unknown it will be set to BufSzUnknown
   //-------------------------------------------------------------------  
   const long BufSzUnknown = 0; // Don't know the buffer size
 
   struct CtntAtr
   {
     Ctnt              ctntOR;        
     CtntPvdr          ctntPvdrOR;
     string            name;          
     string            desc;	      
     mkd::gmtWall      createDate;    
     string            filename;      
     long long         len;           
     long              msecs;         
     long              rate;        
     long long         firstTime;    
     long long         lastTime;    
     mkd::contFormat   format;       
     mkd::prohib       prohibFlags;  
     boolean           tagsFlag;      
     boolean           multiRateFlag; 
     boolean           reliableFlag;  
     string            volLocation; 
     mkd::contStatus   contStatus;    
     boolean	       assigned;
     long              sugBufSz;
   };
    
   //-------------------------------------------------------------------
   // Typedef: CtntAtrLst
   // Function: A list of CtntAtr structures
   //------------------------------------------------------------------- 
   typedef sequence <CtntAtr> CtntAtrLst;

   //-------------------------------------------------------------------
   // Typedef: CtntPvdrAtr
   //     Database Mode: 
   //         This structure represents a CtntPvdr's attributes as defined in  
   //         the database.
   //     Stand Alone Mode:
   //         Never used in stand alone mode.
   // They are defined as follows:
   //    ctntPvdrOR     - The CtntPvdr's Object Reference
   //    name           - A name given to the CtntPvdr
   //    desc           - A description of the given to the CtntPvdr (optional)
   //------------------------------------------------------------------- 
   struct  CtntPvdrAtr
   {
     CtntPvdr ctntPvdrOR; 
     string   name;   
     string   desc;   
   };
   
   //-------------------------------------------------------------------
   // Typedef: CtntPvdrAtrLst
   // Function: A list of CtntPvdrAtr structures
   //-------------------------------------------------------------------
   typedef sequence <CtntPvdrAtr> CtntPvdrAtrLst;

   //-------------------------------------------------------------------
   // Typedef: LgCtntAtr
   //     Database Mode: 
   //         This structure represents a LgCtnt's attributes as defined in  
   //         the database.
   //     Stand Alone Mode:
   //         A Logical Content without a database doesn't have real meaning,
   //         but for convience sake, a psuedo logical content is created from
   //         the tagfile headers in MDS. Since LgCtnt objects are created 
   //         from MDS tagfiles, the LgCtnt name which it is returned is equal
   //         to the name of the tagfile it was created from. The other 
   //         information is filled in from the tagfile header. If longFmt is 
   //         set to TRUE, a clipAtrLst will contain exactly 1 ClipAtr 
   //         structure which contains a name equal to the tagfile name and 
   //         start position of mkd::Beginning and a stop position of 
   //         mkd::End. The ctntAtrLst will contain exactly 1 CtntAtr  
   //         structure and will contain it's elements as filled in from the 
   //         tagfile header. Again the CtntAtr name will be set to the name  
   //         of the tagfile and sugBufSz will be set to BufSzUnknown.
   // They are defined as follows:
   //    lgCtntOR    - The logical content's Object Reference
   //    name        - A name given to the logical content
   //    desc        - An optional description of the given to the 
   //		       logical content
   //    createDate  - The date the logical content was created
   //    msecs       - The runtime length of all the clips in milliseconds
   //		       (calculated)
   //	 maxSugBufSz - The maximum suggested buffer size of the clips.
   //    maxRate     - The maximum bitrate of all the clips.
   //    numClips    - The number of clips in the logical content (calculated)
   //    cookie      - The assetCookie for this logical Content.
   //    longFmt     - If false, then ONLY the name, lgCtntOR, cookie 
   //		       and numClips fields are valid. If true, everything 
   //		       is valid including the clip and content attribut lists.
   //    clipAtrLst  - If longFmt is true, this list is filled in with a list
   //  	 	       of all the clips assigned to this logical content.
   //    ctntAtrLst  - If longFmt is true, this list is filled in with the 
   //                  content information which corresponds to the clips in
   //                  clipAtrLst. There is a one to one correspondence of 
   //		       the items in this list with the items in clipAtrLst.
   //-------------------------------------------------------------------   
   struct LgCtntAtr
   {
     LgCtnt           lgCtntOR; 
     string           name;
     string           desc;         // Not valid when longFmt is false
     mkd::gmtWall     createDate;   // Not valid when longFmt is false
     long             msecs;        // Not valid when longFmt is false
     long             maxSugBufSz;  // Not valid when longFmt is false
     long             maxRate;      // Not valid when longFmt is false
     long             numClips; 
     mkd::assetCookie cookie;
     boolean          longFmt;
     ClipAtrLst       clipAtrLst;   // Not valid when longFmt is false
     CtntAtrLst       ctntAtrLst;   // Not valid when longFmt is false
   }; 

    
   //-------------------------------------------------------------------
   // Typedef: LgCtntAtrLst
   // Function: A list of LgCtnt attribute structures
   //-------------------------------------------------------------------
   typedef sequence <LgCtntAtr> LgCtntAtrLst;
    
};                                                             /* module mza */
    
   
//--------------------------------------------------------------------
// Module: mza
// Function:
//   This module is responsible for all database operations for the 
//   video server.
//--------------------------------------------------------------------
module mza 
{

   //----------------------------------------------------------------------
   // Interface: LgCtnt
   // Function:
   //   Allows for manipulation of LgCtnt objects. Logical content objects
   //   contains clips. Each clip contained in a logical content has a 
   //   position. The position defines its sequence relative to other clips 
   //   in the logical content. The position starts at 1 and increases to  
   //   the number of clips assigned to the logical content. 
   //----------------------------------------------------------------------
   
   interface LgCtnt 
   { 
    
   //-------------------------------------------------------------------
   //   ATTRIBUTES
   //-------------------------------------------------------------------

   //-------------------------------------------------------------------
   //   Attribute: name
   //		A unique name for identifying the logical content.
   //   Attribute: desc
   //		An optional description about the logical content.
   //   Attribute: msecs
   //		The total runtime in milliseconds of the entire logical 
   //          content.
   //          This is calculated based on the clips contained in the logical 
   //          content and is therefore readonly.
   //   Attribute: numClips
   //		The number of clips assigned to the logical content.
   //-------------------------------------------------------------------
   attribute string name;
   attribute string desc;
   readonly attribute long msecs; 
   readonly attribute long numClips; 

   //-------------------------------------------------------------------
   //   METHODS
   //-------------------------------------------------------------------
   
   //-------------------------------------------------------------------
   // Name: mza::LgCtnt::getAtr
   // Function:
   //     Database Mode: 
   //         Gets all of a LgCtnt's attributes
   //     Stand Alone Mode:
   //         Returns an empty LgCtntAtr structure.
   // Input:
   //   longFmt - If true, the msecs, desc, createDate, clip and content  
   //             information is filled in as well.
   // Output:
   //   lcAtr  - Place holder for the attributes. The attribute structure 
   //		  itself (but not its elements) should be allocated prior 
   //		  to passing it in to this call.
   // Returns:
   //   Nothing
   // Raises:
   //   PersistenceError
   //--------------------------------------------------------------------
     void getAtr(in boolean longFmt, out LgCtntAtr lcAtr)
       raises (PersistenceError, BadProhib, BadPosition);
   
   //-------------------------------------------------------------------
   // Name: mza::LgCtnt::destroy
   // Function:
   //     Database Mode: 
   //         Destroys a LgCtnt Object. First removes all the clips from the 
   //         logical content, and then destroys the logical content object.
   //         If a logical content is referenced by a Schd object (see 
   //         mzabi.idl), it will not be able to be destroyed.
   //     Stand Alone Mode:
   //         No-op
   // Input:
   //   None
   // Output:
   //   None
   // Returns:
   //   Nothing
   // Raises:
   //   PersistenceError
   //--------------------------------------------------------------------
     void destroy()
       raises (PersistenceError);
   
   //-------------------------------------------------------------------
   // Name: mza::LgCtnt::getAtrClipByPos
   // Function:
   //     Database Mode: 
   //         Gets the attributes of a clip at the specified postion.
   //     Stand Alone Mode:
   //         Returns an empty ClipAtr structure
   // Input:
   //   position - The position of the clip to return the attributes for.
   // Output:
   //   clipAtr - structure containing the attributes of the clip.
   // Returns:
   //   Nothing
   // Raises:
   //   PersistenceError
   //--------------------------------------------------------------------
     void getAtrClipByPos(in long position,
			  out ClipAtr clipAtr)
       raises (PersistenceError, BadPosition);
   
   //-------------------------------------------------------------------
   // Name: mza::LgCtnt::lstAtrClips
   // Function:
   //     Database Mode: 
   //         Lists all the attributes of all the clips in the logical content.
   //     Stand Alone Mode:
   //         Returns an empty ClipAtrLst.
   //    
   // Input:
   //   itr		- Specifies the maximum number of items to return 
   //			  as well as which item to start with. See comments 
   //			  in mzacom on Itr.
   // Output:
   //   itr		- Updated values for the number of items 
   //			  actually returned and the new position.
   // Returns:
   //   List of Clip attribute structures in the LgCtnt. If there are no 
   //   clips, an empty list is returned, but no exception is thrown.
   // Raises:
   //   PersistenceError, BadPosition, BadIterator
   //--------------------------------------------------------------------
     ClipAtrLst lstAtrClips(inout Itr iterator)
       raises (PersistenceError, BadPosition, BadIterator);
   
   //-------------------------------------------------------------------
   // Name: mza::LgCtnt::addClip
   // Function:
   //     Database Mode: 
   //         Adds a new clip to the end of the logical content's list of 
   //         clips.
   //     Stand Alone Mode:
   //         No-op
   //    
   // Input:
   //   clipOR   - Object Reference of the clip to add.
   // Output:
   //   None
   // Returns:
   //   The position the clip was added to.
   // Raises:
   //   PersistenceError
   //--------------------------------------------------------------------
     long addClip(in Clip clipOR)
       raises (PersistenceError);
   
   //-------------------------------------------------------------------
   // Name: mza::LgCtnt::addClipByPos
   // Function:
   //     Database Mode: 
   //         Adds a new clip at the specified position. The clip is 
   //         inserted at the specified position and the remaining clips 
   //         are reordered.
   //     Stand Alone Mode:
   //         No-op
   //   
   // Input:
   //   clipOR		- OR of the clip to add.
   //   position 	- The position to added it in.
   // Output:
   //   None
   // Returns:
   //   The position the clip was added to.
   // Raises:
   //   PersistenceError
   //--------------------------------------------------------------------
     void addClipByPos(in Clip clipOR,
		       in long position)
       raises (PersistenceError);
   
   //-------------------------------------------------------------------
   // Name: mza::LgCtnt::delClip
   // Function:
   //     Database Mode: 
   //         Removes the specified clip from the LgCtnt. The clip is not 
   //         actually deleted, just the fact that it is included in the
   //         LgCtnt.
   //     Stand Alone Mode:
   //         No-op
   //    
   // Input:
   //   clipOR		- OR of the clip to delete.
   // Output:
   //   None
   // Returns:
   //   None
   // Raises:
   //   Standard MZA Exceptions as defined in mzacom.idl
   //--------------------------------------------------------------------
     void delClip(in Clip clipOR)
       raises (PersistenceError);
   
   //-------------------------------------------------------------------
   // Name: mza::LgCtnt::delClipByPos
   // Function:
   //     Database Mode: 
   //         Removes the clip at the specified position from the logical 
   //         content. The clip is removed and the remaining clips are 
   //         reordered. The clip is not actually deleted, just the fact
   //         fact that it is included in the LgCtnt.
   //     Stand Alone Mode:
   //          No-op
   //   
   // Input:
   //   position 	- The position of the clip to delete
   // Output:
   //   None
   // Returns:
   //   None.
   // Raises:
   //   Standard MZA Exceptions as defined in mzacom.idl
   //--------------------------------------------------------------------
     void delClipByPos(in long position)
       raises (PersistenceError);
      
   };
    
   //----------------------------------------------------------------------
   // Interface: LgCtntFac
   // Function:
   //   Allows for creation of LgCtnt objects. 
   //----------------------------------------------------------------------
   interface LgCtntFac 
   { 
   //-------------------------------------------------------------------
   // Name: mza::LgCtntFac::create
   // Function:
   //     Database Mode: 
   //         Creates a new LgCtnt Object with no clips. 
   //         Clips may be added using the addClip methods in the LgCtnt 
   //         interface.
   //     Stand Alone Mode:
   //          Returns a CORBA_OBJECT_NIL.
   //   
   // Input:
   //   name	- A name from the LgCtnt Object
   //   desc	- An optional description for the object
   // Output:
   //   None
   // Returns:
   //   A new LgCtnt Object Reference
   // Raises:
   //   DataConversion, PersistenceError
   //--------------------------------------------------------------------
      LgCtnt create(in string name, 
		    in string desc)
       raises (DataConversion, PersistenceError);

   //-------------------------------------------------------------------
   // Name: mza::LgCtntFac::createCtnt
   // Function:
   //     Database Mode: 
   //         Takes a CtntAtr structure as input and creates 1 Ctnt object,
   //         a Clip object which references the entire Ctnt object, and 
   //         a LgaCtnt object which contains the single clip. The name of 
   //         all the objects will be the same as the name of the Ctnt object
   //         as defined in the CtntAtr structure.
   //     Stand Alone Mode:
   //          Returns a CORBA_OBJECT_NIL. clipOR and ctntOR are set to
   //          CORBA_OBJECT_NIL as well.
   //   
   // Input:
   //   CtntAtr	- All the stuff to create the objects
   // Output:
   //   clipOR		- The clip object which was created.
   //   ctntOR		- The content object which was created
   // Returns:
   //   A new LgCtnt Object Reference
   // Raises:
   //   DataConversion, PersistenceError
   //--------------------------------------------------------------------
      LgCtnt createCtnt(in CtntAtr ctntAtr, out Clip clipOR, out Ctnt ctntOR)
       raises (DataConversion, PersistenceError);
   }; 
    
   //----------------------------------------------------------------------
   // Interface: LgCtntMgmt
   // Function:
   //   Allows for operations on groups of LgCtnt objects. 
   //----------------------------------------------------------------------
   interface LgCtntMgmt 
   { 

   //-------------------------------------------------------------------
   // Name: mza::LgCtntMgmt::lstAtr
   // Function:
   //     Database Mode: 
   //         Returns an attribute list of all the LgCtnt objects in the system
   //     Stand Alone Mode:
   //         When there is no database present, vscontsrv will try and 
   //         create psuedo logical content objects from MDS tagfiles. It
   //         first tries to retrieve all MDS tagfiles by using the pattern 
   //         'mds/*/*.mpi'. It then creates a logical content with a name 
   //         equal to the tagfile name (e.g /mds/video/oracle1.mpi). 
   //         If longFmt is TRUE, it will then open the tagfile 
   //         and attempt to read the tagfile header to fill in ClipAtrLst and 
   //         CtntAtrLst in the LgCtntAtrLst structure. It will create a single
   //         ClipAtr in ClipAtrLst with the same name and a start position of
   //         mkd::Beginning and and end position of mkd::End, and a  single
   //         CtntAtr in CtntAtrLst with the information from the tagfile
   //         header. Be warned that this can be a very slow process if there
   //         are a lot of tagfiles. If an error occurs reading the tagfile
   //         header, it is skipped.
   // Input:
   //   longFmt	- If true fills in the Clip and Content information
   //   itr		- Specifies the maximum number of items to return 
   //			  as well as which item to start with. See comments 
   //			  in mzacom on Itr.
   // Output:
   //   itr		- Updated values for the number of items 
   //			  actually returned and the new position.
   // Returns:
   //   List of LgCtnt attributes. If no objects are found, an empty list 
   //   is returned and no exception is thrown.
   // Raises:
   //   PersistenceError, BadIterator
   //--------------------------------------------------------------------
      LgCtntAtrLst lstAtr(in boolean longFmt, inout Itr itr)
       raises (PersistenceError, BadIterator);
   

   //-------------------------------------------------------------------
   // Name: mza::LgCtntMgmt::lstAtrByNm
   // Function:
   //     Database Mode: 
   //         Gets all of a LgCtnt's attributes for a LgCtnt with a  name like
   //         the one provided. 
   //         May use '*' to match any number of characters or '.' to match 
   //         any one character. If no pattern matching characters given in  
   //         the name, it will return only an exact match.
   //     Stand Alone Mode:
   //         Creates logical content objects just like lstAtr. with the 
   //         exception that the name passed in is used to limit which MDS 
   //         tagfiles are read from MDS. The name must be in an MDS filename 
   //         format (e.g. /mds/*/ora*.mpi) or no matches will be found. This 
   //         is because vscontsrv goes directly to MDS to try and locate MDS 
   //         tagfiles to create content objects from. The only special case
   //         is if a single '*' character is passed in. The expected behavior
   //         for this would be to return ALL possible tagfile information. 
   //         The lstAtrByNm will convert the '*' to '/mds/*/*.mpi' prior to
   //         searching MDS for all tagfiles.
   //   
   // Input:
   //   longFmt	- If true fills in the Clip and Content information
   //   lgCtntName     - The name of the LgCtnt to retrieve
   //   itr		- Specifies the maximum number of items to return 
   //			  as well as which item to start with. See comments 
   //			  in mzacom on Itr.
   // Output:
   //   itr		- Updated values for the number of items 
   //			  actually returned and the new position.
   // Returns:
   //   List of LgCtnt attributes. If no objects are found, an empty list 
   //   is returned and no exception is thrown.
   // Raises:
   //   DataConversion, PersistenceError, BadIterator
   //--------------------------------------------------------------------
      LgCtntAtrLst lstAtrByNm(in string lgCtntName, in boolean longFmt, 
			        inout Itr itr)
       raises (DataConversion, PersistenceError, BadPosition, BadProhib, 
               BadIterator);
      
   //-------------------------------------------------------------------
   // Name: mza::LgCtntMgmt::lstAtrByClipNm
   // Function:
   //     Database Mode: 
   //         Gets all of a LgCtnt's attributes for a LgCtnt which contains  
   //         a Clip with the givin name. 
   //         May use '*' to match any number of characters or '.' to match 
   //         any one character. If no pattern matching characters given in  
   //         the name, it will return only an exact match.
   //     Stand Alone Mode:
   //         Returns an empty LgCtntAtrLst
   // Input:
   //   longFmt	- If true fills in the Clip and Content information
   //   clipName       - The clip Name to use to find LgCtnts.
   //   itr		- Specifies the maximum number of items to return 
   //			  as well as which item to start with. See comments 
   //			  in mzacom on Itr.
   // Output:
   //   itr		- Updated values for the number of items 
   //			  actually returned and the new position.
   // Returns:
   //   List of LgCtnt attributes. If no objects are found, an empty list 
   //   is returned and no exception is thrown.
   // Raises:
   //   DataConversion, PersistenceError, BadPosition, BadProhib, BadIterator
   //--------------------------------------------------------------------
      LgCtntAtrLst lstAtrByClipNm(in string clipName, in boolean longFmt, 
			        inout Itr itr)
       raises (DataConversion, PersistenceError, BadPosition, BadProhib,
               BadIterator);
      
   //-------------------------------------------------------------------
   // Name: mza::LgCtntMgmt::lstAtrByCtntNm
   // Function:
   //     Database Mode: 
   //         Gets all of a LgCtnt's attributes for a LgCtnt which contains  
   //         a Ctnt with the givin name. 
   //         May use '*' to match any number of characters or '.' to match 
   //         any one character. If no pattern matching characters given in  
   //         the name, it will return only an exact match
   //     Stand Alone Mode:
   //          Returns an empty LgCtntAtrLst
   // Input:
   //   longFmt	- If true fills in the Clip and Content information
   //   ctntName       - The ctnt Name to use to find LgCtnts.
   //   itr		- Specifies the maximum number of items to return 
   //			  as well as which item to start with. See comments 
   //			  in mzacom on Itr.
   // Output:
   //   itr		- Updated values for the number of items 
   //			  actually returned and the new position.
   // Returns:
   //   List of LgCtnt attributes. If no objects are found, an empty list 
   //   is returned and no exception is thrown.
   // Raises:
   //   DataConversion, PersistenceError, BadPosition, BadProhib, BadIterator
   //--------------------------------------------------------------------
      LgCtntAtrLst lstAtrByCtntNm(in string ctntName, in boolean longFmt, 
			        inout Itr itr)
       raises (DataConversion, PersistenceError, BadPosition, BadProhib, 
               BadIterator);
      
   //-------------------------------------------------------------------
   // Name: mza::LgCtntMgmt::usingDB
   // Function:
   //     Database Mode: 
   //        Returns TRUE
   //        Determines if the logical content server is currently using a 
   //        database or not. If the server is not connected to a database, 
   //        behavior is modified dlightly. There are only a few methods 
   //        in the LgCtntMgmt interface which do anything. All other methods 
   //        in the other interfaces in this file do nothing. They just return
   //        with out performing any action. 
   //        When the content server is running without a database, it will  
   //        query mds to find available tag files. It turns these tag files  
   //        into psuedo logical content. The logical content created will have
   //        one clip which includes the entire tag file. Queries by name must
   //        use mds filename syntax (/mds/<volume>/<tagfilename>.
   //
   //     Stand Alone Mode:
   //        Returns FALSE
   //
   // Input:
   //   None
   // Output:
   //   None
   // Returns:
   //   TRUE if connected to a database, FALSE if not
   // Raises:
   //   
   //--------------------------------------------------------------------
      boolean usingDB();

   }; 
 
   //----------------------------------------------------------------------
   // Interface: Clip
   // Function:
   //   Allows for manipulation of clip objects. Clips are segments of 
   //   physical content defined by a start and stop position.
   //----------------------------------------------------------------------

   interface Clip
   { 
    
   //-------------------------------------------------------------------
   //   ATTRIBUTES
   //-------------------------------------------------------------------

   //-------------------------------------------------------------------
   //    Attribute: clipOR   
   //		The clip's Object Reference
   //    Attribute: ctntOR   
   //		The Object Reference of the Content this clip is from
   //    Attribute: name     
   //		A name given to the clip
   //    Attribute: desc     
   //		A description of the given to the clip (optional)
   //    Attribute: startPos 
   //		The starting position of this clip (see mkd.idl).
   //    Attribute: stopPos  
   //		The ending position of this clip (see mkd.idl).
   //-------------------------------------------------------------------
    attribute Ctnt ctntOR;
    attribute string name;
    attribute string desc;
    attribute mkd::pos startPos;
    attribute mkd::pos stopPos;

   //-------------------------------------------------------------------
   //   METHODS
   //-------------------------------------------------------------------

   
   //-------------------------------------------------------------------
   // Name: mza::Clip::getAtr
   // Function:
   //     Database Mode: 
   //          Retrieves a clip's attributes
   //     Stand Alone Mode:
   //          Returns an empty clipAtr
   // Input:
   //   None
   // Output:
   //   clipAtr	A filled in Clip Attribute structure. 
   // Returns:
   //   Nothing
   // Raises:
   //   PersistenceError
   //--------------------------------------------------------------------
     void getAtr(out ClipAtr clipAtr)
       raises (PersistenceError);
   
   //-------------------------------------------------------------------
   // Name: mza::Clip::destroy
   // Function:
   //     Database Mode: 
   //         Destroys a clip. If a clip is used in any logical content, it 
   //         will not be destroyed and will throw mza::PersistentStore 
   //         Exception
   //     Stand Alone Mode:
   //          No-op
   //   
   // Input:
   //   None
   // Output:
   //   None
   // Returns:
   //   Nothing
   // Raises:
   //   PersistenceError
   //--------------------------------------------------------------------
     void destroy()
       raises (PersistenceError);
   }; 
    
   //----------------------------------------------------------------------
   // Interface: ClipFac
   // Function:
   //   Allows for creation of clip objects. 
   //----------------------------------------------------------------------
   interface ClipFac
   { 

   //-------------------------------------------------------------------
   // Name: mza::ClipFac::create
   // Function:
   //     Database Mode: 
   //         Creates a new clip.
   //     Stand Alone Mode:
   //         Returns CORBA_OBJECT_NIL
   //    
   // Input:
   //   ctnt		A content Object Reference that the clip is for.
   //   name		The name of the new clip
   //   desc		An optional description of what the clip is.
   //   startPos	The start position of the clip.  
   //   stopPos	The stop position of the clip. 
   // Output:
   //   None
   // Returns:
   //   A new Clip Object Reference
   // Raises:
   //   DataConversion, PersistenceError
   //--------------------------------------------------------------------
     Clip create(in Ctnt     ctnt,
		 in string   name, 
		 in string   desc,
		 in mkd::pos startPos,
		 in mkd::pos stopPos)
       raises (DataConversion, PersistenceError);
   }; 
    
   //----------------------------------------------------------------------
   // Interface: ClipMgmt
   // Function:
   //   Allows for retrieving Clip objects. 
   //----------------------------------------------------------------------
   interface ClipMgmt
   { 

   //-------------------------------------------------------------------
   // Name: mza::ClipMgmt::lstAtr
   // Function:
   //     Database Mode: 
   //         Returns an attribute list of all the Clip objects in the system
   //     Stand Alone Mode:
   //         Returns an empty ClipAtrLst
   //   
   // Input:
   //   itr		- Specifies the maximum number of items to return 
   //			  as well as which item to start with. See comments 
   //			  in mzacom on Itr.
   // Output:
   //   itr		- Updated values for the number of items 
   //			  actually returned and the new position.
   // Returns:
   //   List of Clip attributes. If no objects are found, an empty list 
   //   is returned and no exception is thrown.
   // Raises:
   //   PersistenceError, BadPosition, BadIterator
   //--------------------------------------------------------------------
     ClipAtrLst lstAtr(inout Itr iterator)
      raises (PersistenceError, BadPosition, BadIterator);
   
   //-------------------------------------------------------------------
   // Name: mza::ClipMgmt::lstAtrByCtnt
   // Function:
   //     Database Mode: 
   //         Returns an attribute list of all the Clip objects in the system 
   //         which reference a specified piece of content
   //     Stand Alone Mode:
   //         Returns an empty ClipAtrLst
   //   
   // Input:
   //   ctnt		- The Ctnt to which the clips point. 
   //   itr		- Specifies the maximum number of items to return 
   //			  as well as which item to start with. See comments 
   //			  in mzacom on Itr.
   // Output:
   //   itr		- Updated values for the number of items 
   //			  actually returned and the new position.
   // Returns:
   //   List of Clip attributes. If no objects are found, an empty list 
   //   is returned and no exception is thrown.
   // Raises:
   //   PersistenceError, BadPosition, BadIterator
   //--------------------------------------------------------------------
     ClipAtrLst lstAtrByCtnt(in Ctnt ctnt, 
			     inout Itr iterator)
      raises (PersistenceError, BadPosition, BadIterator);
   
   //-------------------------------------------------------------------
   // Name: mza::ClipMgmt::lstAtrByCtntNm
   // Function:
   //     Database Mode: 
   //         Returns an attribute list of all the Clip objects in the system 
   //         which reference a specified piece of content with the given name
   //     Stand Alone Mode:
   //         Returns an empty ClipAtrLst
   // Input:
   //   ctntName	- The name of the Ctnt to which the clips point. 
   //   itr		- Specifies the maximum number of items to return 
   //			  as well as which item to start with. See comments 
   //			  in mzacom on Itr.
   // Output:
   //   itr		- Updated values for the number of items 
   //			  actually returned and the new position.
   // Returns:
   //   List of Clip attributes. If no objects are found, an empty list 
   //   is returned and no exception is thrown.
   // Raises:
   //   DataConversion, PersistenceError, BadPosition, BadIterator
   //--------------------------------------------------------------------
     ClipAtrLst lstAtrByCtntNm(in string ctntName, 
			     inout Itr iterator)
      raises (DataConversion, PersistenceError, BadPosition, BadIterator);
   
   //-------------------------------------------------------------------
   // Name: mza::ClipMgmt::lstAtrByNm
   // Function:
   //     Database Mode: 
   //         Gets all of a Clip's attributes for a Clip with the specified 
   //         name. If pattern matching characters are used, more than clip 
   //         may be returned. 
   //         May use '*' to match any number of characters or '.' to match any
   //         one character. If no pattern matching characters given in the 
   //         name,it will return only anexact match.
   //     Stand Alone Mode:
   //         Returns an empty ClipAtrLst
   // Input:
   //   name            - The name of the Clip to retrieve
   //   itr		- Specifies the maximum number of items to return 
   //			  as well as which item to start with. See comments 
   //			  in mzacom on Itr.
   // Output:
   //   itr		- Updated values for the number of items 
   //			  actually returned and the new position.
   // Returns:
   //   List of Clip attributes. If no objects are found, an empty list 
   //   is returned and no exception is thrown.
   // Raises:
   //   DataConversion, PersistenceError, BadIterator
   //--------------------------------------------------------------------
     ClipAtrLst lstAtrByNm(in string name, inout Itr iterator)
       raises (DataConversion, PersistenceError, BadPosition, BadIterator);
   };


   //----------------------------------------------------------------------
   // Interface: Ctnt
   // Function:
   //   Methods for Content. The Ctnt Object describes the physical content. 
   //----------------------------------------------------------------------
   interface Ctnt
   { 

   //-------------------------------------------------------------------
   //   METHODS
   //-------------------------------------------------------------------
  
   
   //-------------------------------------------------------------------
   // Name: mza::Ctnt::updateStats
   // Function:
   //     Database Mode: 
   //         Updates the Content Length, Size and Status
   //     Stand Alone Mode:
   //         No-op
   //   
   // Input:
   //   len      - Total Length of the file in Bytes
   //   msecs    - Total duration of the content in milliseconds
   //   sugBufSz - The suggested buffer size for the content
   //   status   - Status of the content, (static, rolling, feed, ...)
   // Output:
   //   None
   // Returns:
   //   Nothing
   // Raises:
   //   PersistenceError, DataCOnversion
   //--------------------------------------------------------------------
     void updateStats(in long long len, in long msecs, 
		in long sugBufSz, in string status)
       raises (PersistenceError, DataConversion);
   
   //-------------------------------------------------------------------
   // Name: mza::Ctnt::updateSugBufSz
   // Function:
   //     Database Mode: 
   //         Updates the Content suggested buffer size
   //     Stand Alone Mode:
   //         No-op
   //   
   // Input:
   //   sugBufSz - The suggested buffer size for the content
   // Output:
   //   None
   // Returns:
   //   Nothing
   // Raises:
   //   PersistenceError
   //--------------------------------------------------------------------
     void updateSugBufSz(in long sugBufSz)
       raises (PersistenceError);

   //-------------------------------------------------------------------
   // Name: mza::Ctnt::updateTimes
   // Function:
   //     Database Mode: 
   //         Updates the First and Last Time Tags for the content
   //     Stand Alone Mode:
   //         No-op
   //   
   // Input:
   //   firstTime - Time of the first tag in the file
   //   lastTime  - Time of the last tag in the file
   // Output:
   //   None
   // Returns:
   //   Nothing
   // Raises:
   //   PersistenceError
   //--------------------------------------------------------------------
     void updateTimes(in long long firstTime, in long long lastTime)
       raises (PersistenceError);


   //-------------------------------------------------------------------
   // Name: mza::Ctnt::setAtr
   // Function:
   //     Database Mode: 
   //         Sets all the attributes for the Ctnt object
   //     Stand Alone Mode:
   //         No-op
   //   
   // Input:
   //   ctntAtr - structure containing the Ctnt's attributes
   // Output:
   //   None
   // Returns:
   //   Nothing
   // Raises:
   //   PersistenceError
   //--------------------------------------------------------------------
     void setAtr(in CtntAtr ctntAtr)
       raises (PersistenceError, DataConversion);
   
   //-------------------------------------------------------------------
   // Name: mza::Ctnt::getAtr
   // Function:
   //     Database Mode: 
   //         Gets all the attributes for the Ctnt object
   //     Stand Alone Mode:
   //         Returns an cleared CtntAtr
   //   
   // Input:
   //   None
   // Output:
   //   ctntAtr - structure containing the Ctnt's attributes
   // Returns:
   //   Nothing
   // Raises:
   //   PersistenceError
   //--------------------------------------------------------------------
     void getAtr(out CtntAtr ctntAtr)
       raises (PersistenceError);
   
   //-------------------------------------------------------------------
   // Name: mza::Ctnt::destroy
   // Function:
   //     Database Mode: 
   //         Destroys a content object. If the Ctnt is referenced by any Clip,
   //         it will not be destroyed and throw a PersistenceError Exception.
   //     Stand Alone Mode:
   //          No-op
   //   
   // Input:
   //   killTagFile   If true then try and destroy the tagfile
   //   killContent   If true then try and destroy the actual content files
   // 		      the tagfiles references. If killContent is true,
   // 	              the tagfile will be deleted regardless of the value
   //                 of killTagFile.
   // Output:
   //   None
   // Returns:
   //   Nothing
   // Raises:
   //   PersistenceError
   //--------------------------------------------------------------------
     void destroy(in boolean killTagFile, in boolean killContent)
       raises (PersistenceError);
   }; 
    
   //----------------------------------------------------------------------
   // Interface: CtntFac
   // Function:
   //   Methods for Content creation.  
   //----------------------------------------------------------------------
   interface CtntFac
   { 

   //-------------------------------------------------------------------
   // Name: mza::CtntFac::create
   // Function:
   //     Database Mode: 
   //         Create a new Ctnt object
   //     Stand Alone Mode:
   //         Returns a CORBA_OBJECT_NIL
   //   
   // Input:
   //    ctntAtr - All the content stuff in an attribute structure.
   // Output:
   //   None
   // Returns:
   //   New Content Object Reference
   // Raises:
   //   DataConversion, PersistenceError
   //--------------------------------------------------------------------
     Ctnt create(in CtntAtr ctntAtr)
       raises (DataConversion, PersistenceError);
   }; 
    
   //----------------------------------------------------------------------
   // Interface: CtntMgmt
   // Function:
   //   methods to operate on groups of Ctnt Objects.  
   //----------------------------------------------------------------------
   interface CtntMgmt
   { 

   //-------------------------------------------------------------------
   // Name: mza::CtntMgmt::lstAtr
   // Function:
   //     Database Mode: 
   //         returns an attribute list of all the Ctnt objects in the system
   //     Stand Alone Mode:
   //         Uses all available tagfiles matching the pattern /mds/*/*.mpi
   //         to fill in the CtntAtrLst. This can be a slow process since
   //         opening and reading tagfiles is highly disk intensive. If a 
   //         tagfile header cannot be read, it is skipped. The name in the 
   //         CtntAtrLst for each Ctnt will be the same os the tagfile name.
   //   
   // Input:
   //   itr		- Specifies the maximum number of items to return 
   //			  as well as which item to start with. See comments 
   //			  in mzacom on Itr.
   // Output:
   //   itr		- Updated values for the number of items 
   //			  actually returned and the new position.
   // Returns:
   //   List of content attributes. If no objects are found, an empty list 
   //   is returned and no exception is thrown.
   // Raises:
   //   PersistenceError, BadProhib, BadIterator
   //--------------------------------------------------------------------
     CtntAtrLst lstAtr(inout Itr itr)
		raises (PersistenceError, BadProhib, BadIterator);

   //-------------------------------------------------------------------
   // Name: mza::CtntMgmt::lstAtrByNm
   // Function:
   //     Database Mode: 
   //         Returns an attribute list of all the Ctnt objects in the system
   //         with a name which looks like the name provided. 
   //         May use '*' to match any number of 
   //         characters or '.' to match any one character. If no pattern  
   //         matching characters given in the name, it will return only an 
   //         exact match.
   //     Stand Alone Mode:
   //         Operates much like lstAtr with the excpetion that the name 
   //         given here must be an MDS style file name 
   //         (e.g. /mds/*/ora*.mpi). 
   //   
   // Input:
   //   name           - The name to search for.
   //   itr		- Specifies the maximum number of items to return 
   //			  as well as which item to start with. See comments 
   //			  in mzacom on Itr.
   // Output:
   //   itr		- Updated values for the number of items 
   //			  actually returned and the new position.
   // Returns:
   //   List of content attributes. If no objects are found, an empty list 
   //   is returned and no exception is thrown.
   // Raises:
   //   DataConversion, PersistenceError, BadProhib, BadIterator
   //--------------------------------------------------------------------
     CtntAtrLst lstAtrByNm(in string name, inout Itr itr)
		raises (DataConversion, PersistenceError, BadProhib, 
                        BadIterator);
   
   //-------------------------------------------------------------------
   // Name: mza::CtntMgmt::lstAtrByFileNm
   // Function:
   //     Database Mode: 
   //         Returns an attribute list of all the Ctnt objects in the system
   //         with a filename which looks like the name provided. 
   //         May use '*' to match any number of 
   //         characters or '.' to match any one character. If no pattern  
   //         matching characters given in the name, it will return only an 
   //         exact match.
   //     Stand Alone Mode:
   //         Since the name of Ctnt is equal to the tagfile name when there
   //         is no database present, this method is identical to 
   //         mza::CtntMgmt::lstAtrByNm
   //   
   // Input:
   //   filename       - The filename to search for.
   //   itr		- Specifies the maximum number of items to return 
   //			  as well as which item to start with. See comments 
   //			  in mzacom on Itr.
   // Output:
   //   itr		- Updated values for the number of items 
   //			  actually returned and the new position.
   // Returns:
   //   List of channel attributes. If no objects are found, an empty list 
   //   is returned and no exception is thrown.
   // Raises:
   //   DataConversion, PersistenceError, BadProhib, BadIterator
   //--------------------------------------------------------------------
     CtntAtrLst lstAtrByFileNm(in string filename, inout Itr itr)
		raises (DataConversion, PersistenceError, BadProhib, 
                        BadIterator);
      
   
   }; 

   //----------------------------------------------------------------------
   // Interface: CtntPvdr
   // Function:
   //   Implements funcionality of the CtntPvdr Object. Content Providers 
   //   are usually those organizations which develop or own a piece of 
   //   content.
   //----------------------------------------------------------------------
   interface CtntPvdr
   {
   
   //-------------------------------------------------------------------
   //   ATTRIBUTES
   //-------------------------------------------------------------------

   //-------------------------------------------------------------------
   //    Attribute: name           
   //   	 A name given to the CtntPvdr
   //    Attribute: desc           
   //   	 A description of the given to the CtntPvdr (optional)
   //-------------------------------------------------------------------

    attribute string name;   
    attribute string desc;
   
   //-------------------------------------------------------------------
   // Name: mza::CtntPvdr::getAtr
   // Function:
   //     Database Mode: 
   //         Gets all of a CtntPvdr's attributes.
   //     Stand Alone Mode:
   //         Returns an empty CtntPvdrAtr
   //    
   // Input:
   //   None
   // Output:
   //   ctntpvdrAtr  - Place holder for the attributes.
   // Returns:
   //   Nothing
   // Raises:
   //   PersistenceError
   //--------------------------------------------------------------------
        void getAtr(out CtntPvdrAtr ctntpvdrAtr)
	   raises (PersistenceError);
   
   //-------------------------------------------------------------------
   // Name: mza::CtntPvdr::destroy
   // Function:
   //     Database Mode: 
   //         Destroys a CtntPvdr object. If the CtntPvdr is referenced by any
   //         Ctnt, it will not be destroyed.
   //     Stand Alone Mode:
   //         No-op
   //   
   // Input:
   //   None
   // Output:
   //   None
   // Returns:
   //   Nothing
   // Raises:
   //   PersistenceError
   //--------------------------------------------------------------------
        void destroy()
	   raises (PersistenceError);
   };
   
   //----------------------------------------------------------------------
   // Interface: CtntPvdrFac
   // Function:
   //   Method to create a new CtntPvdr
   //----------------------------------------------------------------------
   interface CtntPvdrFac
   {

   //-------------------------------------------------------------------
   // Name: mza::CtntPvdrFac::create
   // Function:
   //     Database Mode: 
   //         Create new CtntPvdr objects
   //     Stand Alone Mode:
   //         Returns a CORBA_OBJECT_NIL
   //   
   // Input:
   //    name       - A name given to the CtntPvdr
   //    desc       - An optional description of the given to the 
   //		       CtntPvdr
   // Output:
   //   None
   // Returns:
   //   Returns a new CtntPvrd Object Reference
   // Raises:
   //   DataConversion, PersistenceError
   //--------------------------------------------------------------------
        CtntPvdr create(in string name,
		        in string desc)
	   raises (DataConversion, PersistenceError);
   };	
   
   //----------------------------------------------------------------------
   // Interface: CtntPvdrMgmt
   // Function:
   //   Methods to manage groups of CtntPvdr objects
   //----------------------------------------------------------------------
   interface CtntPvdrMgmt
   {
   
   //-------------------------------------------------------------------
   // Name: mza::CtntPvdrMgmt::lstAtr
   // Function:
   //     Database Mode: 
   //         returns an attribute list of all the CtntPvdr objects in 
   //         the system
   //     Stand Alone Mode:
   //          Returns an empty CtntPvdrAtrLst
   //   
   // Input:
   //   itr		- Specifies the maximum number of items to return 
   //			  as well as which item to start with. See comments 
   //			  in mzacom on Itr.
   // Output:
   //   itr		- Updated values for the number of items 
   //			  actually returned and the new position.
   // Returns:
   //   List of CtntPvdr attributes. If no objects are found, an empty list 
   //   is returned and no exception is thrown.
   // Raises:
   //   PersistenceError, BadIterator
   //--------------------------------------------------------------------
      CtntPvdrAtrLst lstAtr(inout Itr itr)
	   raises (PersistenceError, BadIterator);
   
   //-------------------------------------------------------------------
   // Name: mza::CtntPvdr::getAtrByNm
   // Function:
   //     Database Mode: 
   //         Gets all of a CtntPvdr's attributes for a Ctnt with the specified
   //         name. No pattern matching is provided with this method. It 
   //         returns only and exact match.
   //     Stand Alone Mode:
   //          Returns an empty CtntPvdrAtr
 
   // Input:
   //   name - The name of the CtntPvdr to retrieve
   // Output:
   //   ctntPvdrAtr  - Place holder for the attributes.
   // Returns:
   //   Nothing
   // Raises:
   //   DataConversion, PersistenceError
   //--------------------------------------------------------------------
      void getAtrByNm(in string name,
		      out CtntPvdrAtr ctntPvdrAtr)
	   raises (DataConversion, PersistenceError);
   };

   //----------------------------------------------------------------------
   // Interface: BlobMgmt
   // Function:
   //     Database Mode: 
   //         
   //     Stand Alone Mode:
   //          
   //   Allows for operations on groups of Blobs. Blob Management is currently 
   //   supported by querying mds. There is no blob support in the database, 
   //   and blobs are not necessarily tagfiles, so no operations which would 
   //   fill in information likely to come from a tagfile will be supported. 
   //   To make this as simple as possible, these two methods will return a 
   //   list of LgCtntAtr structures, but with none of the long format 
   //   information filled in. This means only the name and asset cookie data
   //   will be filled in. The longFmt will always be FALSE, and numClips is
   //   meaningless.
   //   Since information is retrieved from MDS, MDS style asset cookies will 
   //   be returned. This is then the primary interface for retrieving MDS 
   //   style asset cookies from the cotnent service.
   //----------------------------------------------------------------------
   interface BlobMgmt 
   { 

   //-------------------------------------------------------------------
   // Name: mza::BlobMgmt::lstAtrByNm
   // Function:
   //     Database Mode: 
   //         
   //     Stand Alone Mode:
   //          
   //   Gets all of a Blob's attributes with a name like the one provided
   //   May have  wildcards '*' or '.'.  If no pattern matching characters 
   //   given in the name, it will return only an exact match.
   //   The name given must be an mds style file name such as:
   //   /mds/video/*.mpg ro /mds/*/*. Be careful when using wildcards as
   //   a large number of files may be returned and it may take a long time
   //   to query MDS.
   //   
   // Input:
   //   blobName        - The name of the Blob to retrieve
   //   itr		- Specifies the maximum number of items to return 
   //			  as well as which item to start with. See comments 
   //			  in mzacom on Itr.
   // Output:
   //   itr		- Updated values for the number of items 
   //			  actually returned and the new position.
   // Returns:
   //   List of LgCtnt attributes. If no objects are found, an empty list 
   //   is returned and no exception is thrown. Only the information available
   //   when longFmt is FALSE in the LgCtntAtr structure is returned.
   //   (see the description of LgCtntAtr).
   // Raises:
   //   DataConversion, BadIterator
   //--------------------------------------------------------------------
      LgCtntAtrLst lstAtrByNm(in string blobName, inout Itr itr)
       raises (DataConversion, BadIterator);
      

   }; 

 
};                                                             /* module mza */

#endif                                                         /* MZA_LGCTNT */
