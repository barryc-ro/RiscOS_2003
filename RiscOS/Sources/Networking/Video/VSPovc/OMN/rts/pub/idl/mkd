//----------------------------------------------------------------------------
// File: mkd.idl - Media Kernel Datatypes
//									     
// Description:								     
//   This file holds datatypes generic to the Media Server that may be used
//   across multiple layers or server processes.
//									     
// Modification History:						     
//   Name	Date		Comments				     
//   dpawson    11/12/97       #(525282) Document how to interpret fields in
//                              the segInfo structure
//   plord      03/18/97        Added mkd_contFormat for Logical Content
//   dweaver    12/04/96        Extend time mkd_pos flexibility
//   dpawson	11/26/96	Change definition for byte pos
//				Change name for block pos
//   dpawson	11/25/96	Return bytes in length, not KBytes
//   dpawson    09/11/96	Segments have filenames, not assetCookies
//   dpawson	06/07/96	Change name of prohibition field
//   dpawson    06/06/96        Creation
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
// Oracle Corporation							     
// Oracle Media Server (TM)						     
// All Rights Reserved
// Copyright (C) 1993-1996						     
//---------------------------------------------------------------------------

#ifndef MKD_ORACLE
#define MKD_ORACLE

//----------------------------------------------------------------------------
// Module: mkd
// Function:
//   This is the module that defines all the datatypes
//----------------------------------------------------------------------------
module mkd
{
  //--------------------------------------------------------------------------
  // Common Typedefs
  //--------------------------------------------------------------------------

  // assetCookie identifies an asset on the server.  This is a binary tag,
  // and should not be interpreted as a filename.  It is completely opaque
  // to the client, and will generally be obtained from some sort of content
  // manager
  const short assetCookieMaxlen = 128;
  typedef string assetCookie;
  typedef sequence<assetCookie> assetCookieList;


  // segCapMask is a bitmask which specifies rate control capabilities 
  // allowed or prohibited by an entity.
  typedef unsigned long segCapMask;
  const segCapMask  segCapVideo = 0x00000001;  // i.e., is there any.
  const segCapMask  segCapVCBR  = 0x00000002;  // constant bit rate video
  const segCapMask  segCapVSeek = 0x00000004;  // can handle blind seeking
  const segCapMask  segCapVScan = 0x00000008;  // can handle frame dropping
  const segCapMask  segCapAudio = 0x00010000;
  const segCapMask  segCapACBR  = 0x00020000;  // constant bit rate audio
  const segCapMask  segCapASeek = 0x00040000;  // can handle blind seeking
  const segCapMask  segCapAScan = 0x00080000;  // can handle frame dropping(?)

  // This type is used to indicate where a piece of content is located.
  // This gives some indication how long it will take before the content
  // can be delivered to a client.
  enum contStatus
  {
    contStatusDisk,             // The content is already located on disk
    contStatusTape,             // The content is stored on tape
    contStatusFeed,             // The content is still being encoded,
                                // aka "One-Step Encoding"
    contStatusRolling,          // Is being encoded and may also be deleted
                                // aka "Continuous Realtime Feed"
    contStatusTerminated,       // The content is a terminated continous feed.
                                // Note that a terminated one-step encode
                                // content is treated as regular file
    contStatusUnavailable       // Access is restricted for some reason
  };

  //----------------------------- Clip formats -------------------------------

  typedef unsigned long compFormat;
  // compFormat is the compression format of the content file.  It is a 
  // mirror of the mkcFmt* defines, and should eventually replace them.
  const compFormat  compFormatError    = 0x00000000;
  const compFormat  compFormatMpeg1    = 0x00000001;
  const compFormat  compFormatMpeg2    = 0x00000004;
  const compFormat  compFormatOrca     = 0x00000008;
  const compFormat  compFormatRawKey   = 0x00000400;
  const compFormat  compFormatSegWHdr  = 0x00002000;
  const compFormat  compFormatSegWoHdr = 0x00004000;
  const compFormat  compFormatDsmcc    = 0x00008000;

  // prohib is a bitmask detailing prohibited rate control operations
  typedef unsigned long prohib; 
  const prohib  prohibError    = 0x80000000;
  const prohib  prohibPause    = 0x00000001;
  const prohib  prohibStop     = 0x00000002;
  const prohib  prohibBlindFF  = 0x00000004;  // aka scan forward
  const prohib  prohibBlindRW  = 0x00000008;  // aka scan backward
  const prohib  prohibVisualFF = 0x00000010;
  const prohib  prohibVisualRW = 0x00000020;
  const prohib  prohibFrameAdv = 0x00000040;
  const prohib  prohibFrameRew = 0x00000080;
   
  //----------------------------- Time formats -------------------------------
  // Once a stream has been prepared and is being operated upon, the play    
  // routines expect positions to describe where a client is, where a request 
  // should begin, and where it should end.  These are commonly known as the  
  // curPos, startPos, and endPos.  These positions are expressed using the   
  // position type described below.  It may support multiple ways of        
  // expressing time, and will probably allow more options in the future.     
  //
  // Previously, it was possible to pass a NULL pointer for any of these      
  // positions to most routines.  This, however, led to confusing semantics   
  // and was not possible when new interfaces required the passing of an      
  // actual structure rather than just a pointer.  The previous semantics     
  // can still be obtained using several special variables which are globally 
  // available.  Each is a constant mkd::pos.  They are:                   
  //
  //      mkdBeginning    This is a structure which indicates that you mean    
  //                      the beginning of the stream.                         
  //      mkdEnd          This is a structure which indicates that you mean   
  //                      the end of the stream.                              
  //      mkdCurrent      This is a structure which indicates that you mean   
  //                      something like "wherever I am now."  It is always   
  //                      preferable for a caller to specify their current    
  //                      position if they can determine it.                  
  //
  // Clients who previously passed NULL pointers to mzsPrepare or mzsPlay     
  // should be able to easily conver these to &mkdCurrent, &mkdBeginning, or  
  // &mkdEnd as appropriate.                                                  
  //
  // Since CORBA, in it's infinite wisdom, doesn't allow for constant         
  // structures, mkd[Beginning|End|Current] are available in language         
  // extension files. mkd.[ch] contains the C extensions.                    
  //--------------------------------------------------------------------------

  // Although everthing here is presented in terms of "stream", in segment
  // structures the positions refer to the position in the file represented
  // by that segment.

  enum posType
  // posType describes the various formats that the server understands for
  // specifying positions within a stream or segment.
  {
    posTypeBeginning,     // beginning of stream
    posTypeCurrent,       // current position in stream
    posTypeEnd,           // end of stream
    posTypeByte,          // Bytes from start of stream, zero-based
    posTypeTime,          // Timecode from beginning of stream
    posTypeMillisecs,     // alternate from of time from beginning of stream
    posTypeMpegSCR,       // 33 bit SCR
    posTypeMpegPCR,       // 42 bit PCR
    posTypeBlock,         // Segment from start of stream, one-based
    posTypeDsmcc,
    posTypeContFeed,      // Realtime feed, specifies size of rolling buffer
    posTypeUnformed,      // Specifically, a time that can't be interpreted
    posTypeDefaultStart   // default start position
    /* Future types that we would like support include:
       posTypeFrames,        // frames from beginning of stream, zero-based */
  };
  
  struct posByte 
  // posByte specifies a specific byte in the content.  It is zero-based 
  // from the beginning of the stream.
  {
    long long       mkd_posByteOff;
  };

  struct posTime 
  // posTime uses the tag file to find the frame closest to the specified
  // stream time.
  {
    unsigned long  mkd_posTimeHour;
    octet          mkd_posTimeMinute;
    octet          mkd_posTimeSecond;
    octet          mkd_posTimeHundredth;
  };

  // posBlock specifies chunks within a boot image.
  typedef unsigned long posBlock; 

  typedef unsigned long posMs;  // milliseconds from beginning of stream
  typedef long long     posSCR; // least significant 33 bits only
  typedef long long     posPCR; // least significant 42 bits only

  union pos switch (posType)
  // The pos type describes a time in a stream or segment.  It can be 
  // specified in any of the time formats listed above.
  {
    // Warning: semantics have not yet been defined for the times in beginning,
    // current and end. The wisest course of action is to set them to 0:0:0.0.
    case posTypeBeginning: posTime   mkd_posBegin;    // Stream beginning
    case posTypeCurrent:   posTime   mkd_posCur;      // Stream current pos
    case posTypeEnd:       posTime   mkd_posEnd;      // End of stream
    case posTypeByte:      posByte   mkd_posBytePos;  // Specify a byte pos
    case posTypeTime:      posTime   mkd_posTimePos;  // hh:mm:ss:cc
    case posTypeMillisecs: posMs     mkd_posMsPos;    // millisecs from start
    case posTypeMpegSCR:   posSCR    mkd_posSCRPos;   // 33 bit SCR
    case posTypeMpegPCR:   posPCR    mkd_posPCRPos;   // 42 bit PCR
    case posTypeBlock:     posBlock  mkd_posBlockPos; // Block number for boot
    case posTypeDsmcc:     posBlock  mkd_posDsmcc;    // Dsmcc boot
    case posTypeContFeed:  posTime   mkd_posFeed;     // hh:mm:ss:cc
    case posTypeUnformed:  posTime   mkd_posNoWay;    // Stream beginning
    case posTypeDefaultStart:  posTime  mkd_posDefaultStart; // default start
  };

  // The wall type describes time in a wall clock or "real world" fashion.
  // Since the mkd::wall data type doesn't contain time zone information,
  // it is expected that most functions will be prototyped to use either
  // gmtWall or localWall. When passing wall structures between processes,
  // gmtTime is strongly preferred since the processes could be on different
  // computers in different time zones. The zone structure can be used in
  // addition to the wall structure if you are hell-bent on passing local
  // times around and for conversion of GMT times before display.
  struct wall
  {
    unsigned long  mkd_wallNano;       // 0 - 999999999 nanoseconds
    unsigned short mkd_wallSec;        // 0 - 59 seconds
    unsigned short mkd_wallMin;        // 0 - 59 minutes
    unsigned short mkd_wallHour;       // 0 - 23 hours
    unsigned short mkd_wallDay;        // 1 - 31 days
    unsigned short mkd_wallMonth;      // 1 - 12 months
    short          mkd_wallYear;       // year, positive is A.D., neg is B.C.
  };
  typedef wall gmtWall;
  typedef wall localWall;

  // The mkd_zoneOffset is an absolute offset that does NOT account for
  // Daylight savings time.  The mkduGmt2Local call ends up accounting for
  // this difference.  For example, 28800 is always returned in mkd_zoneOffset
  // for the Pacific time zone no matter if it is standard time or daylight
  // savings time.  Use the mkd_zoneDaylight boolean to indicate whether any
  // special adjustments are necessary when daylight savings time is active
  // for the given time zone.
  // mkd_zoneAbbrev is NOT always returned as a three character string.
  // various operating systems (NT) will return a more verbose name for the
  // given time zone.  Do not rely on three character values for 
  // any time zone.
  struct zone
  {
    long           mkd_zoneOffset;     // Seconds west of GMT, east negative
    boolean        mkd_zoneDaylight;   // TRUE if daylight savings time
    string         mkd_zoneAbbrev;     // timezone description,"PDT","EST",etc.
  };


  // A segment mask can be used to specify particular options for a segment
  // of content.
  typedef unsigned long segMask;

  // The following masks specifies the source file type of the segment
  const segMask segMaskStatic  = 0x00000001;  // segment of a static file 
                                              // on disk
  const segMask segMaskDynApp  = 0x00000002;  // segment of a dynamic file
                                              // which is still being encoded.
                                              // aka: One-Step Encoding
  const segMask segMaskRolling = 0x00000004;  // segment of a dynamic file
                                              // which may be deleted. 
                                              // aka: Continuous Realtime Feed
  const segMask segMaskTerminated = 0x00000008; // segment of a terminated feed
  const segMask segMaskTape    = 0x00000010;  // segment of a file stored on 
                                              // tape

  struct segment
  // The segment structure is used to describe a segment of a piece of 
  // content.  It is generally used when requested the delivery of such
  // a segment.
  {
    string         mkd_segFile;
    pos            mkd_segStart;
    pos	           mkd_segEnd;
    segMask        mkd_segFlags;
    prohib         mkd_segProhib;
  };
  typedef sequence<segment> segmentList;

  struct segInfo 
  // segInfo gives the client information about a segment or stream.  This
  // may be as the result of a query, or information provided on a prepared
  // stream.  In particular, it includes rate control prohibitions imposed 
  // by the server, and gives display information (pixel size, frame rate,
  // etc.) about the clip.
  //
  // How to interpret time fields in the segInfo structure:
  // The potential for preparing a clip which is a subset of a file raises
  // questions about the meaning of the milliseconds, start time, and end
  // time fields below.  These are further complicated by real-time feeds.
  // These fields can be interpreted as follows:
  //   mkd_segMilliseconds    In general, this field is describing the duration
  //                          of the segment for play.
  //                          In the case of a file that is not a feed, this
  //                          field describes the duration of the prepared
  //                          segment.
  //                          In the case of a continuous feed, this field
  //                          describes the amount of the feed that is buffered
  //                          on disk in the feed's steady state.  This is
  //                          always true, even if a start or end position
  //                          within the feed was prepared.
  //                          In the case of a one-step encode, this field
  //                          describes how long the prepared segment will be.
  //                          It effectively is the same as it is for a file
  //                          that is not a feed, on the assumption that a
  //                          fixed, predictable amount of data is on its way.
  //   mkd_segInfoStartT      In general, this field is describing the earliest
  //                          time in the content that the client can access.
  //                          In the case of a file that is not a feed, this
  //                          field describes the timestamp in the content
  //                          corresponding to the beginning of the prepared
  //                          segment.
  //                          In the case of a continuous feed, this field
  //                          describes the first time relative to the
  //                          mkd_segCreateTime in the file
  //                          that can be accessed.  This will correspond with
  //                          the earliest safe point remaining on the disk
  //                          if no start position was given, and the prepared
  //                          start time if a start position was specified.
  //                          In the case of a one-step encode, this field
  //                          corresponds to the later of the timestamp of the
  //                          prepared start time and the first timestamp
  //                          written to disk.
  //   mkd_segInfoEndT        In general, this field is describing the latest
  //                          time in the content that the client can access.
  //                          In the case of a file that is not a feed, this is
  //                          the timestamp corresponding to the end of the
  //                          prepared segment.
  //                          In the case of a continous feed, this field
  //                          describes the last time relative to the
  //                          mkd_segCreateTime in the file
  //                          that can be accessed.  This will be either the
  //                          prepared end time or the last accessible time
  //                          in the current window of on-disk data.
  //                          In the case of a one-step encode, this field
  //                          corresponds with the earlier of the timestamp
  //                          of the prepared end time and the last timestamp
  //                          written to disk.
  {
    segment	   mkd_segInfoSeg;	// The segment in question
    string	   mkd_segInfoType;	// The type of the file (currently
					//   this is just the file suffix)
    string         mkd_segTitle;        // Title for human consumption
    gmtWall        mkd_segCreateTime;   // Create Time of Content (GMT)
    unsigned long  mkd_segBitrate;
    long           mkd_segPresRate;
    compFormat     mkd_segCmpFmt;
    segCapMask     mkd_segCapabilities;
    unsigned long  mkd_segMilliseconds;
    long long      mkd_segByteLength;   // Bytes in length 
    unsigned short mkd_segFrameHeight;  // pixels
    unsigned short mkd_segFrameWidth;   // pixels
    long           mkd_segAspectRatio;  // of individual pixels, p:ht*1000/p:wd
    unsigned long  mkd_segFrameRate;    // Average frames per second * 1000
    long long	   mkd_segInfoStartT;	// The starting time of the file
    long long	   mkd_segInfoEndT;	// The ending time of the file
    contStatus	   mkd_segInfoCStat;	// Where is the content currently?
    prohib         mkd_segProhibitions;
  };
  typedef sequence<segInfo> segInfoList;

  //
  // The mediaType is a sequnce of 4 bytes used to identify a
  // codec, be it video or audio.
  //
  typedef sequence<octet, 4> mediaType;    // 4 Byte codec types

  struct contFormat 
  // contFormat contains all the content format information. 
  //
  {
      string         mkd_contFormatVendor;
      compFormat     mkd_contFormatFmt;
      mediaType      mkd_contFormatAud;
      mediaType      mkd_contFormatVid;
      unsigned short mkd_contFormatHeightInPixels;
      unsigned short mkd_contFormatWidthInPixels;
      long           mkd_contFormatPelAspectRatio;
      unsigned long  mkd_contFormatFrameRate;
  };

};

#endif /* !MKD_ORACLE */
