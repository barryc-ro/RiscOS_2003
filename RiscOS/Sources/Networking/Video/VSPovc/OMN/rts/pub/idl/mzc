/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * mzc.idl
 *
 * This module defines the interface(s) between the (Virtual) Circuit Manager
 * and the rest of the system.
 *
 * Description:
 *
 * The (Virtual) Circuit Manager (aka VCM) provides a set of interfaces for
 * managing virtual circuits and their related communications channels.
 *
 * Revision history:
 * 05-Nov-96  alind  added additional documentation.
 * 03-Nov-96  alind  added exceptions.
 * 27-Oct-96  alind  moved circuitManager interface out as it is really a
 *                   private interface not a public interface. the factory
 *                   interface now provides the circuit allocation function
 *                   that was previously given by the circuitManager interface.
 * 01-Oct-96  alind  added header guard MZC_IDL_ORACLE
 * 19-Aug-96  alind  moved Channel and ChannelProvider related stuff off into
 *                   mzcch.idl and ChannelManager related stuff into mzccm.idl.
 * 14-Aug-96  alind  completed updates to reflect design changes made as a
 *                   result of the design review.
 * 15-Jul-96  alind  created from mzz.idl in order to more formally seperate
 *                   virtual circuits from sessions. 
 */
#ifndef MZC_IDL_ORACLE
#define MZC_IDL_ORACLE

#ifndef MZCCH_IDL_ORACLE
#include "mzcch"       // channel interface and definitions
#endif

// forward reference for mzs::stream interface
module mzs { interface stream; };

module mzc
{
  //
  // Exceptions
  //
  enum circuitException
  {
    cktExNotImplemented,    // requested operation not (yet)implemented

    // These will only be thrown for symmetric circuits.
    //
    cktExNoChannelAvailable,  // could not allocate channel
    cktExNoChannelBandwidth,  // no channel found which can handle
                              //   requested bandwidth
    cktExBadChannelProtocol,  // no channel found which supports the
                              //   requested protocol
    cktExBadChannelAddress,   // no channel found which can communicate
                              //   with the specified address

    // These will only be thrown for asymmetric circuits.
    //
    cktExNoUpstreamAvailable,   // could not allocate upstream channel
    cktExNoUpstreamBandwidth,   // no upstream found which can handle
                                //   requested bandwidth
    cktExBadUpstreamProtocol,   // no upstream found which supports the
                                //   requested protocol
    cktExBadUpstreamAddress,    // no upstream found which can recieve
                                //   from the specified address
    cktExNoDownstreamAvailable, // could not allocate downstream channel
    cktExNoDownstreamBandwidth, // no downstream channel found which can
                                //   handle requested bandwidth
    cktExBadDownstreamProtocol, // no downstream channel found which
                                //   supports the requested protocol
    cktExBadDownstreamAddress,  // no downstream channel found which can
                                //   send to the specified address

    // These may be thrown for either asymmetric or symmetric circuits
    //
    cktExNoCircuitAvailable,    // could not allocate circuit
    cktExInvalidClient,         // client device is not allowed on network
    cktExInvalidRequest,        // circuit properties inconsistent with
                                //   channel properties
    cktExNotControl,            // operation requires a control circuit
    cktExNotData,               // operation requires a data circuit
    cktExNotIsochronous,        // operation requires an isochronous circuit

    cktExInvalidStream,         // operation requires a valid mzs::stream
    cktExStreamAlreadyBound,    // stream already bound to circuit
    cktExStreamNotBound         // no stream bound to circuit
  };
  exception cktEx {circuitException circuitFailType;};

  //
  // Data Declarations
  //

  // The following is arguably more tightly related to sessions than
  // circuits and as such should be defined in the mzz namespace. We
  // define it here simply since we don't want mzc to depend on mzz
  // and mzz already depends on mzc.
  //
  typedef sequence<octet> clientDeviceId;

  // The circuit interface is used to present a consistent interface
  // to the client regardless of how the underlying channels are structured.
  //  
  // Circuits are used to represent logical communications paths between
  // the server and client device. Channels are used to represent the
  // physical communications paths between the server and client device.
  // The physical arrangement of channels used to form a circuit is
  // referred to as a circuit's geometry. Circuits also have logical
  // attributes which pertain to what type of communication may occur
  // over the circuit.
  //
  // The types of traffic that may be passed over a circuit are:
  //   control   - the circuit may be used for MediaNet traffic. A control
  //   circuit must have a valid, unique MediaNet address associated
  //   with it.
  //   data    - the circuit may be used for non-isochronous data (e.g.
  //   http traffic, etc.)
  //   isochronous - the circuit may be used for isochronous data (e.g.
  //   streamed video/audio, etc). An isochronous circuit may have a
  //   mzs::stream associated with it which represents the audio/video
  //   stream being served to the client device.
  // Note that these properties are not mutually exclusive, a circuit may
  // be capable of transporting any and all of these data types.
  //
  // A circuits geometry is determined by whether it is bidirectional or
  // unidirectional and by whether it is over a symmetric or assymetric
  // network. The following illustration shows how a particular request
  // (the cktreq structure) will map to a circuit's geometry (the circuitInfo
  // structure).
  //
  // Legend:
  //   b - up/down channel
  //   u - up channel
  //   d - down channel
  //   x - null channel
  //
  // Circuit Request vs Resultant geometry:
  //                       Symmetric                  Asymetric
  //                 Request       Result       Request       Result
  //                 +-----+      +-----+       +-----+      +-----+
  // server<->client |     |<--   | b<--|<--    | u<--|<--   | u<--|<--
  //  (up/down)      | b<->|      |     |       |     |      |     |
  //                 |     |-->   | b-->|-->    | d-->|-->   | d-->|-->
  //                 +-----+      +-----+       +-----+      +-----+
  //
  //                 +-----+      +-----+       +-----+      +-----+
  // server-->client |     |      | x   |       | x   |      | x   |  
  //   (down)        | d-->|      |     |       |     |      |     |
  //                 |     |-->   | d-->|-->    | d-->|-->   | d-->|-->
  //                 +-----+      +-----+       +-----+      +-----+
  //
  //                 +-----+      +-----+       +-----+      +-----+
  // server<--client |     |      | u<--|<--    | u<--|<--   | u<--|<-- 
  //    (up)         | u<--|<--   |     |       |     |      |     |
  //                 |     |      | x   |       | x   |      | x   |   
  //                 +-----+      +-----+       +-----+      +-----+
  //
  interface ckt;

  struct cktInfo
  {
    commProperty   props;   // Communications properties.
    logicalAddress mna;     // MediaNet Address associated with circuit.
                            //  Valid only if a control circuit.
    mzs::stream  streamRef; // stream associated with circuit.
                            //  Valid only if an isochronous data 
                            //  circuit. May be NULL if no stream open.
    channel    upstream;    // Channel used for client->server data.
    channel    downstream;  // Channel used for server->client data.
  };
  typedef sequence<cktInfo> cktInfos;

  struct circuit
  {
    ckt   or;               // object reference for this circuit
    cktInfo info;           // attributes of this circuit
  };
  typedef sequence<circuit> circuits;

  enum cktreqType
  {
    cktreqTypeSymmetric,
    cktreqTypeAsymmetric
  };
  struct cktreqSym
  {
    commProperty props;
    chnlspec   chnl;
  };
  struct cktreqAsym
  {
    commProperty props;
    chnlspec   upchnl;
    chnlspec   downchnl;
  };
  union cktreq switch(cktreqType)
  {
    case cktreqTypeSymmetric : cktreqSym  sym;
    case cktreqTypeAsymmetric: cktreqAsym asym;
  };

  enum cktspecType
  {
    cktspecTypeNone,
    cktspecTypeRequest,
    cktspecTypeCircuit
  };
  union cktspec switch(cktspecType)
  {
    case cktspecTypeNone   : long  none;
    case cktspecTypeRequest: cktreq  req;
    case cktspecTypeCircuit: circuit ckt;
  };
  typedef sequence<cktspec> cktspecs;

  interface ckt
  {
    // Circuit Management methods
    //
    // These methods are generally useful to both the client and server
    // for getting the state of the circuit, cleaning up a circuit, and
    // changing properties of a circuit on the fly.
    //
    // GetInfo - returns a circuitInfo structure which describes the
    //   circuit's properties and channel geometry.
    //
    // TearDown - shuts down a circuit. Any channels associated with the
    //   circuit are also shut down.
    //
    // Rebuild - changes the properties of a circuit and/or its associated
    //   channels.
    //
    cktInfo GetInfo();
    void  TearDown();
    cktInfo Rebuild(in cktspec req) raises(cktEx);

    // Channel Management methods
    //
    // These methods are intended more for the use of server-side proxies
    // for clients than for the actual client. They basically allow for
    // things like changing upstreams and/or downstreams on the fly without
    // affecting the external view of the circuit much (if at all). Also
    // note that the BindXSM operations can pretty much be accomplished
    // with a Rebuild() if one crafts the cktspec right...
    //
    // BindXSM  - allocates a new channel based on the given chnlspec
    //   and associates it with the circuit. If there was already a
    //   channel associated with that slot in the circuit, it is returned
    //   to the caller. It is up to the caller to deal with cleaning up
    //   any previous channel. If no channel was already present, NULL
    //   will be returned. If the requested channel cannot be created
    //   or is inconsistent with the circuit properties, an exception will
    //   be thrown.
    //
    // UnBindXSM  - disassociates the given channel with the circuit. It
    //   is up to the caller to deal with cleaning up the channel.
    //
    // DisableXSM - marks the given channel as invalid.
    //
    // EnableXSM  - marks the given channel as valid.
    //
    channel BindDSM(in chnlspec dsm) raises(cktEx);
    void  UnBindDSM();
    void  DisableDSM();
    void  EnableDSM();

    channel BindUSM(in chnlspec usm) raises(cktEx);
    void  UnBindUSM();
    void  DisableUSM();
    void  EnableUSM();

    // Stream Management methods
    //
    // BindStream   - associates a stream with the circuit. If a stream
    //   is already bound to the circuit or the specified stream is
    //   invalid, an execption is thrown and no operation is performed.
    //
    // UnBindStream - disassociates the stream with the circuit and
    //   returns the object reference of the stream bound to the circuit.
    //   If no stream is bound to the circuit, an exception is thrown.
    //
    // NOTE: In order to keep the cross-module dependencies down a bit,
    //   Bind/UnBindStream() accept and return type Object instead of
    //   mzs::stream. However, these routines are used to (un)set the
    //   streamRef field of the circuit's associated circuitInfo.
    //   BindStream() will only accept Objects which are either an 
    //   mzs::stream or an mzs::stream subclass. We do this bit of
    //   skullduggery since, technically, clients of mzc are not
    //   necessarily clients of mzs (though in practice they are) and
    //   thus we wanted to avoid doing anything which required the client
    //   to link against mzs-related stubs.
    //
    void  BindStream(in Object stm) raises(cktEx);
    Object  UnBindStream() raises(cktEx);
  }; // interface ckt
  typedef sequence<ckt> ckts;

  interface factory
  {
    // Used by clients (or their proxies) to allocate a circuit.
    //
    circuit BuildCircuit(in clientDeviceId clientId, in cktspec req)
    raises(cktEx);
  }; // interface factory
}; // module mzc

#endif
