//
// mzabin.idl - MZA Nvod Interfaces, Channel and Schedule
//
// Description:
//
// Modification History:
//   Name	  Date		  Comments
//   Parker Lord  10/20/97        Creation.
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
// Oracle Corporation							     
// Oracle Media Server (TM)						     
// All Rights Reserved
// Copyright (C) 1993-1996						     


#ifndef MZANVOD_ORACLE
#define MZANVOD_ORACLE
//
//   IDL INCLUDES
///////////////////////////////////////////////////////////////////////////////
#ifndef MZACOM_ORACLE
#include "mzacom"
#endif
#ifndef MZABI_ORACLE
#include "mzabi"
#endif
#ifndef MZALGCTN_ORACLE
#include "mzalgctn"
#endif
#ifndef MKD_ORACLE
#include "mkd"
#endif

 
//----------------------------------------------------------------------------
// Module: mzabin
// Function:
//   OVS BI NVOD Interface.
//----------------------------------------------------------------------------
module mzabin
{
 
  //--------------------------------------------------------------------------
  // Forward Declarations
  //--------------------------------------------------------------------------
 
  interface Chnl;                 /* Channel interface */
  interface ChnlFac;              /* Channel factory interface */
  interface ChnlMgmt;             /* Channel management interface */
  interface Nvod;                 /* Schedule interface */
  interface NvodFac;              /* Schedule factory interface */
  interface NvodMgmt;             /* Schedule management interface */

  //--------------------------------------------------------------------------
  // Data Types
  //--------------------------------------------------------------------------

  enum nvodStatus
  {
      unknown_nvodStatus,         // Unknown status 
      defined_nvodStatus,         // Initial value indicating Nvod event has 
                                  // been defined
      prepared_nvodStatus,        // Event has been prepared for playout
      playing_nvodStatus,         // Event is playing
      played_nvodStatus,          // Event has completed normally
      errBadContent_nvodStatus,   // Eventfailed due to missing or bad Content
      errPlayout_nvodStatus,      // Event failed to play
      errOther_nvodStatus         // Some other error
  };

  //--------------------------------------------------------------------------
  // Data Types
  //--------------------------------------------------------------------------

  enum loopType
  {
      loopNone_loopType,
      loopAll_loopType
  };

   //-------------------------------------------------------------------   
   // Exception: badLoop
   // Function:  
   //-------------------------------------------------------------------   

    exception badLoop {
        string loop;
    };

  //--------------------------------------------------------------------------
  // Local Typedefs
  //--------------------------------------------------------------------------

   //-------------------------------------------------------------------   
   // Typedef: NvodAtr
   // Function: This structure represents an NVOD schedule's attributes
   // They are defined as follows:
   //    nvodOR      - The NVOD exporter Object Reference
   //    schdOR      - The Object Reference of the schedule 
   //    chnlOR      - The Object Reference of the channel to play the 
   //		       play list on
   //    lgCtntOR    - Reference to the LgCtnt to play for this schedule
   //    loop        - Type of looping desired
   //    sts         - Status of the nvod event
   //------------------------------------------------------------------- 

   struct NvodAtr                 
   {
      Nvod         nvodOR;           
      mzabi::Schd  schdOR;           
      Chnl         chnlOR;          
      mza::LgCtnt  lgCtntOR;     
      loopType     loop;
      nvodStatus   sts;		  
   };
  typedef sequence <NvodAtr> NvodAtrLst; 

   //-------------------------------------------------------------------   
   // Typedef: NvodSchdAtr
   // Function: This structure represents a combination of an Nvod object, 
   //	        its associated Schd object, and the Chnl information. It 
   //		also contains some information about the content to be played.
   // They are defined as follows:
   //    nvodOR        - The NVOD Object Reference
   //    schdOR        - The Schedule Object Reference
   //    startDate     - Start Time and Date 
   //    stopDate      - Stop Time and Date 
   //    lgCtntOR      - LgCtnt OR
   //    assetCookie   - Asset Cookie for this LgCtnt
   //    lgCtntName    - Name of the LgCtnt
   //    chnlLabel     - Channel Label
   //    chnlNum       - Channel number
   //    netAddr       - Physical Network address of channel
   //    maxBitRate    - The Maximum Bit rate for the Content
   //    sts           - nvod status
   //    format        - Content Format
   //    loop          - The type of looping desired
   //------------------------------------------------------------------- 

  struct NvodSchdAtr
  {
     Nvod              nvodOR;		
     mzabi::Schd       schdOR;		
     mkd::gmtWall      startDate;          
     mkd::gmtWall      stopDate;          
     mza::LgCtnt       lgCtntOR;               
     string            assetCookie;          
     string            lgCtntName;           
     string            chnlLabel;             
     sb4               chnlNum;                
     string            netAddr;                
     long              maxBitRate;	
     nvodStatus        sts;		        
     mkd::compFormat   format;			
     loopType          loop;		        
  };
  typedef sequence <NvodSchdAtr> NvodSchdAtrLst; 

   //-------------------------------------------------------------------   
   // Typedef: ChnlAtr
   // Function: This structure contains information about a channel.
   // They are defined as follows:
   //    chnlOR       - The Channel Object Reference
   //    label        - The Channel's Label
   //    chnlNum      - The Channel's Number
   //    netAddr      - The Channel's physical network address
   //------------------------------------------------------------------- 
   struct ChnlAtr
   {
     Chnl    chnlOR;
     string  label;
     long    chnlNum;      
     string  netAddr;
   };
   typedef sequence <ChnlAtr> ChnlAtrLst;  // A sequence of ChnlAtr structures


   //--------------------------------------------------------------------------
   // Interface: Nvod
   // Function: Interface for NVOD 
   //   
   //--------------------------------------------------------------------------
   interface Nvod
   {
   
    //-----------------------------------------------------------------------
    // Name: mza::Nvod::destroy
    // Function:
    //   Destroys an NVOD Object. 
    // Input:
    //   None
    // Output:
    //   None
    // Returns:
    //   Nothing
    // Raises:
    //   mza::DataConversion, mza::PersistenceError
    //------------------------------------------------------------------------
      void destroy()
	   raises (mza::DataConversion, mza::PersistenceError);
   
   
    //-----------------------------------------------------------------------
    // Name: mza::Nvod::getAtr
    // Function:
    //   Gets all of a Nvod's attributes. 
    // Input:
    //   None
    // Output:
    //   nvodAtr  - Place holder for the attributes.
    // Returns:
    //   Nothing
    // Raises:
    //   mzabi::badStatus, mza::PersistenceError
    //------------------------------------------------------------------------
      void getAtr(out NvodAtr nvodAtr)
	      raises (mzabi::badStatus, mza::PersistenceError);

    //-----------------------------------------------------------------------
    // Name: mza::Nvod::setAtr
    // Function:
    //   Sets all of the Nvod's Attributes.
    // Input:
    //   nvodAtr - NvodAtr structure containing all of the attributes to be 
    //             set.
    // Output:
    //   None
    // Returns:
    //   Nothing
    // Raises:
    //   mzabi::badStatus, mza::DataConversion, mza::PersistenceError
    //------------------------------------------------------------------------
      void setAtr(in NvodAtr nvodAtr)
	      raises (mzabi::badStatus, mza::DataConversion, 
                      mza::PersistenceError);
   
    //-----------------------------------------------------------------------
    // Name: mza::Nvod::setStatus
    // Function:
    //   Sets the Nvod status.
    // Input:
    //   sts - The new status for the object.
    // Output:
    //   None
    // Returns:
    //   Nothing
    // Raises:
    //   mzabi::badStatus, mza::DataConversion, mza::PersistenceError
    //------------------------------------------------------------------------
      void setStatus(in nvodStatus sts)
	      raises (mzabi::badStatus, mza::DataConversion, 
                      mza::PersistenceError);
   
    //-----------------------------------------------------------------------
    // Name: mza::Nvod::validateNvod
    // Function:
    //   This method will check to see if it is OK to modify an existing
    //   Nvod's attributes, and its related schedule start time. Each logical
    //   content has an inherent run length. This run length is computed and
    //   a check is made to see if it will run into another existing logical
    //   content on the same channel, or if would start in the middle of
    //   an existing logical content which would already be playing on 
    //   the that channel. If is is determined that the logical content
    //   would conflict with another logcial content and channel, a
    //   mza::PersistenceError exception will be thrown. Otherwise True
    //   is returned.
    // Input:
    //   nvodAtr   - This structure specifies the new values for the Nvod 
    //               Object. These values will be used to determine if the 
    //               resulting Nvod object will be valid.
    //   startDate - The new start date and time for the Nvod object's Schd.
    // Output:
    //    None
    // Returns:
    //    TRUE if there are no conflicts. Otherwise an exception is thrown.
    // Raises:
    //   mza::DataConversion, mza::PersistenceError
    //------------------------------------------------------------------------
      boolean    validateNvod(in NvodAtr nvodAtr, 
                              in mkd::gmtWall startDate)
			 raises (mza::DataConversion, 
                                 mza::PersistenceError);

   
   
   };
   //--------------------------------------------------------------------------
   // Interface: NvodFac
   // Function:
   //   Allows creation of new Nvod Objects
   //--------------------------------------------------------------------------
   interface NvodFac
   {
      
    //-----------------------------------------------------------------------
    // Name: mza::NvodFac::create
    // Function:
    //   Creates new NVOD objects from the input parameters passed in.
    // Input:
    //   schdOR		- The schedule object the Nvod Object refers to.
    //   chnlOR		- The channel the Nvod object will play to
    //   lgCtntOR	- The content to be played by the Nvod Object
    //   loop		- Looping information 
    // Output:
    //   None
    // Returns:
    //   New Nvod Object Reference. 
    // Raises:
    //   mza::DataConversion, mza::PersistenceError
    //------------------------------------------------------------------------
     Nvod  create(in mzabi::Schd schdOr,
		  in Chnl chnlOR,
		  in mza::LgCtnt lgCtntOR,
		  in loopType loop)
	   raises (mza::DataConversion, mza::PersistenceError);
   
    //-----------------------------------------------------------------------
    // Name: mza::NvodFac::createSchd
    // Function:
    //   Creates new NVOD and Schd objects from the input parameters passed 
    //   This method is provided to retain the functionality of the 3.0.2 
    //   SchdFac create method. With one call, both a shcedule and nvod object 
    //   may be created. It uses defaults where possible and allows for 
    //   creation of more than one schedule and nvod object at a time using 
    //   the interval parameter. 
    //   The schedule which is created uses the given startDate, a stopDate 
    //   of NULL, an event Type of synchShort, the Default NVOD Exporter Group,
    //   no Exporter Change Group and a status of mzabin::defined_nvodStatus. 
    //   The new Nvod object then references this schedule. If interval is 0 or
    //   NULL, only one schedule is created, otherwise multiple schedules may 
    //   be created (see interval description).
    // Input:
    //   chnlOR		- The channel the NVOD object will play to
    //   lgCtntOR	- The content to be played by the object
    //   startDate	- The data and time the content will be played
    //   loop		- Looping information 
    //	 stopDate       - To create a series of schedules, set this variable to
    //			  the date you would like new schedule items to be 
    //			  created until. If you only want to create one, set
    //			  this to NULL or an empty string.
    //   interval       - If stopDate is non-NULL, schedules will be created 
    //			  every 'interval' seconds until the stopDate is 
    //			  reached. If interval is 0 in any case, only 1 
    //			  schedule will be created.
    // Output:
    //   schdOR		- The schedule object which was created. If multiple 
    //                    schedules were created, this is the last one.
    // Returns:
    //   New Nvod Object Reference. 
    // Raises:
    //   mza::DataConversion, mza::PersistenceError
    //------------------------------------------------------------------------
     Nvod  createSchd(in Chnl chnlOR,
		  in mza::LgCtnt lgCtntOR,
		  in mkd::gmtWall  startDate,
		  in loopType loop,
		  in mkd::gmtWall stopDate,
		  in long interval,
		  out mzabi::Schd schdOR)
	   raises (mza::DataConversion, mza::PersistenceError);
   
   };
   
   //--------------------------------------------------------------------------
   // Interface: NvodMgmt
   // Function:
   //   Methods allowing operations on groups of NVOD Objects
   //--------------------------------------------------------------------------
   interface NvodMgmt
   {
      
    //-----------------------------------------------------------------------
    // Name: mza::NvodMgmt::lstAtrByDate
    // Function:
    //   This method returns a list of information about content to be played  
    //   for a specified time period. This method returns all the 
    //   information about the scheduled content which needs to be played 
    //   in the next time period starting at 'startDate' and a duration 
    //   as specified in 'secs'.
    // Input:
    //   startDate	- The Date/Time string specifiying the start time 
    //			  we would like to have information returned for.
    //   secs		- The duration in seconds we would like to retrieve 
    //			  data for starting from the time in startDate.
    //   sts		- If this is specified, we will only returned 
    //			  schedule items which have a status which is equal 
    //			  to the value of this item. If it is set to unknown, 
    //			  then all schedule objects are returned regardless of 
    //   itr		- Specifies the maximum number of items to return 
    //			  as well as which item to start with. See comments 
    //			  in mzacom on Itr.
    // Output:
    //   itr		- Updated values for the number of items 
    //			  actually returned and the new position.
    // Returns:
    //   Returns a NvodSchdAtrLst containing values for all the items 
    //	 scheduled in the time period startDate + secs.
    // Raises:
    //   badLoop, mzabi::badStatus, mza::DataConversion, mza::PersistenceError
    //   mza::BadIterator
    //------------------------------------------------------------------------
      NvodSchdAtrLst  lstAtrByDate ( in mkd::gmtWall  startDate,
					in long    secs,
					in nvodStatus  sts,
					inout mza::Itr  itr)
			 raises (badLoop, mzabi::badStatus, 
                                 mza::DataConversion, 
                                 mza::PersistenceError, mza::BadIterator);
   
   
   
    //-----------------------------------------------------------------------
    // Name: mza::NvodMgmt::lstAtrByLCNm
    // Function:
    //   This method returns a list of information about content to be played  
    //   for a specified time period for a specific named Logical Content. This
    //   method returns all the information about the scheduled content 
    //   which needs to be played  in the next time period starting 
    //   at 'startDate' and a duration as specified in 'secs'.
    // Input:
    //   lgCtntNm	- The name of the content to return the information 
    //			  about 
    //   startDate	- The Date/Time string specifiying the start time 
    //			  we would like to have information returned for.
    //   secs		- The duration in seconds we would like to retrieve 
    //			  data for starting from the time in startDate.
    //   sts		- If this is specified, we will only returned 
    //			  schedule items which have a status which is equal 
    //			  to the value of this item. If it is set to unknown, 
    //			  then all schedule objects are returned regardless of 
    //   itr		- Specifies the maximum number of items to return 
    //			  as well as which item to start with. See comments 
    //			  in mzacom on Itr.
    // Output:
    //   itr		- Updated values for the number of items 
    //			  actually returned and the new position.
    // Returns:
    //   Returns a NvodSchdAtrLst containing values for all the items 
    //	 scheduled in the time period startDate + secs for the named
    //   logical content.
    // Raises:
    //   badLoop, mzabi::badStatus, mza::DataConversion, mza::PersistenceError
    //   mza::BadIterator
    //------------------------------------------------------------------------
      NvodSchdAtrLst    lstAtrByLCNm(in string  lgCtntNm,
				      in mkd::gmtWall   startDate,
				      in long     secs,
				      in nvodStatus sts,
				      inout mza::Itr   itr)
			 raises (badLoop, mzabi::badStatus, 
                                 mza::DataConversion, 
                                 mza::PersistenceError, mza::BadIterator);
         
    //-----------------------------------------------------------------------
    // Name: mza::NvodMgmt::lstAtrBySchd
    // Function:
    //   This method returns a list of information about content to be played  
    //   for a specified mzabi::Schd object.
    // Input:
    //   schdOR 	- The object reference to the schedule for which
    // 			  we want to retrieve the nvod attributes.
    //   itr		- Specifies the maximum number of items to return 
    //			  as well as which item to start with. See comments 
    //			  in mzacom on Itr.
    // Output:
    //   itr		- Updated values for the number of items 
    //			  actually returned and the new position.
    // Returns:
    //   Returns a NvodAtrLst containing values for all the items 
    //	 which reference the given schedule.
    // Raises:
    //   badLoop, mzabi::badStatus, mza::PersistenceError, mza::BadIterator
    //------------------------------------------------------------------------
      NvodAtrLst    lstAtrBySchd(in mzabi::Schd  schdOR,
				 inout mza::Itr   itr)
			 raises (badLoop, mzabi::badStatus, 
                                 mza::PersistenceError, mza::BadIterator);
         
   
    //-----------------------------------------------------------------------
    // Name: mza::NvodMgmt::lstAtrByChnl
    // Function:
    //   This method returns a list of information about content to be played  
    //   for a specified time period on a specific named channel. This
    //   method returns all the information about the scheduled content 
    //   which needs to be played in the next time period starting 
    //   at 'startDate' and a duration as specified in 'secs'.
    // Input:
    //   channel	- The name of the channel to return the information 
    //			  about 
    //   startDate	- The Date/Time string specifiying the start time 
    //			  we would like to have information returned for.
    //   secs		- The duration in seconds we would like to retrieve 
    //			  data for starting from the time in startDate.
    //   sts		- If this is specified, we will only returned 
    //			  schedule items which have a status which is equal 
    //			  to the value of this item. If it is set to unknown, 
    //			  then all schedule objects are returned regardless of 
    //   itr		- Specifies the maximum number of items to return 
    //			  as well as which item to start with. See comments 
    //			  in mzacom on Itr.
    // Output:
    //   itr		- Updated values for the number of items 
    //			  actually returned and the new position.
    // Returns:
    //   Returns a NvodSchdAtrLst containing values for all the items 
    //	 scheduled in the time period startDate + secs for the named
    //   channel.
    // Raises:
    //   badLoop, mzabi::badStatus, mza::DataConversion, mza::PersistenceError
    //   mza::BadIterator
    //------------------------------------------------------------------------
      NvodSchdAtrLst    lstAtrByChnl(in string channel,
				      in mkd::gmtWall   startDate,
				      in long     secs,
				      in nvodStatus sts,
				      inout mza::Itr   itr)
			 raises (badLoop, mzabi::badStatus, 
                                 mza::DataConversion, 
                                 mza::PersistenceError, mza::BadIterator);
      
    //-----------------------------------------------------------------------
    // Name: mza::NvodMgmt::validateNvod
    // Function:
    //   This method will check to see if it is OK to schedule some logical
    //   content on the given channel at the given startDate. Each logical
    //   content has an inherent run length. This run length is computed and
    //   a check is made to see if it will run into another existing logical
    //   content on the same channel, or if would start in the middle of
    //   an existing logical content which would already be playing on 
    //   the that channel. If is is determined that the logical content
    //   would conflict with another logcial content and channel, a
    //   mza::PersistenceError exception will be thrown. Otherwise True
    //   is returned.
    // Input:
    //   lgctntOR  - The logical content to play.
    //   chnlOR    - The channel the logical content is to be played on.
    //   startDate - The start date and time the logical content will play.
    // Output:
    //    None
    // Returns:
    //    TRUE if there are no conflicts.
    // Raises:
    //   mza::DataConversion, mza::PersistenceError
    //------------------------------------------------------------------------
      boolean    validateNvod(in mza::LgCtnt lgctntOR, in mzabin::Chnl chnlOR, 
                        in mkd::gmtWall startDate)
			 raises (mza::DataConversion, 
                                 mza::PersistenceError);
   

   };
   
   //--------------------------------------------------------------------------
   // Interface: Chnl
   // Function:
   //   Implements functionality of the Channel Object
   //--------------------------------------------------------------------------
   interface Chnl
   {
      
   
    //-----------------------------------------------------------------------
    // Name: mza::Chnl::setAtr
    // Function:
    //   Sets all the attributes for the channel object
    // Input:
    //   chnlAtr - structure containing the new channel attributes
    // Output:
    //   None
    // Returns:
    //   Nothing
    // Raises:
    //   mza::DataConversion, mza::PersistenceError
    //------------------------------------------------------------------------
      void setAtr(in ChnlAtr chnlAtr)      
	   raises (mza::DataConversion, mza::PersistenceError);
   
    //-----------------------------------------------------------------------
    // Name: mza::Chnl::getAtr
    // Function:
    //   Gets all the attributes for the channel object
    // Input:
    //   None
    // Output:
    //   chnlAtr - structure containing the channel's attributes
    // Returns:
    //   Nothing
    // Raises:
    //   mza::PersistenceError
    //------------------------------------------------------------------------
      void getAtr(out ChnlAtr chnlAtr)      
	   raises (mza::PersistenceError);
   
    //-----------------------------------------------------------------------
    // Name: mza::Chnl::destroy
    // Function:
    //   Destroys a channel object. If the channel is in any schedule, 
    //   it will not be destroyed.
    // Input:
    //   None
    // Output:
    //   None
    // Returns:
    //   Nothing
    // Raises:
    //   mza::PersistenceError
    //------------------------------------------------------------------------
      void destroy()                        // Destroys the channel.
	   raises (mza::PersistenceError);
   };
   
   
   //--------------------------------------------------------------------------
   // Interface: ChnlFac
   // Function:
   //   Creates Channel Objects
   //--------------------------------------------------------------------------
   interface ChnlFac
   {
   
    //-----------------------------------------------------------------------
    // Name: mza::ChnlFac::create
    // Function:
    //   Create new channel objects
    // Input:
    //   label		- The label for the new channel
    //   netAddr	- The network address the channel represents in the 
    //			  form protocol:IP_address:port
    //   chnlNum	- A channel number for the new channel
    // Output:
    //   None
    // Returns:
    //   Nothing
    // Raises:
    //   mza::DataConversion, mza::PersistenceError
    //------------------------------------------------------------------------
      Chnl create( in string label,
		   in string netAddr,
		   in long chnlNum)
	   raises (mza::DataConversion, mza::PersistenceError);
   };
   
   
   //--------------------------------------------------------------------------
   // Interface: ChnlMgmt
   // Function:
   //   Methods for managing groups of channel objects
   //--------------------------------------------------------------------------
   interface ChnlMgmt
   {
    //-----------------------------------------------------------------------
    // Name: mza::ChnlMgmt::lstAtr
    // Function:
    //   returns an attribute list of all the channel objects in the system
    // Input:
    //   itr		- Specifies the maximum number of items to return 
    //			  as well as which item to start with. See comments 
    //			  in mzacom on Itr.
    // Output:
    //   itr		- Updated values for the number of items 
    //			  actually returned and the new position.
    // Returns:
    //   List of channel attributes
    // Raises:
    //   mza::PersistenceError, mza::BadIterator
    //------------------------------------------------------------------------
     ChnlAtrLst lstAtr(inout mza::Itr itr)
		raises (mza::PersistenceError, mza::BadIterator);

    //-----------------------------------------------------------------------
    // Name: mza::ChnlMgmt::lstAtrByNm
    // Function:
    //   returns an attribute list of all the channel objects in the system
    //   which have the given name. The name may contain database wildcard 
    //   characters such as * and ..
    // Input:
    //   name		- The name to search for.
    //
    //   itr		- Specifies the maximum number of items to return 
    //			  as well as which item to start with. See comments 
    //			  in mzacom on Itr.
    // Output:
    //   itr		- Updated values for the number of items 
    //			  actually returned and the new position.
    // Returns:
    //   List of channel attributes
    // Raises:
    //   mza::PersistenceError, mza::DataConversion, mza::BadIterator
    //------------------------------------------------------------------------
     ChnlAtrLst lstAtrByNm(in string name, inout mza::Itr itr)
		raises (mza::PersistenceError, mza::DataConversion, 
                        mza::BadIterator);
     
   };
   

};                              /* end of oms module */

#endif                          /* end of end if */
