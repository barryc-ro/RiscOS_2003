/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * smtu.c - System-dependent Real-Time Server Definitions
 *
 * PURPOSE
 * Provides port-specific parameters for the real-time server.  These
 * include:
 *   Port-specific version information.
 *   Port-specific thread packages
 *   Port-specific memory sizing information.
 *   Port-specific tagger configuration.
 *
 * NOTES
 * This is the Solaris version of this file.
 *
 * MODIFIED
 * dpranke  05/09/97 -  Add thread package overrides
 * dpawson  03/07/97 -  Add constant for stack size
 * TSepez   04/08/96 -  Merge in constants from smtupt.h.
 * TSepez   04/05/96 -  Merge in constants from smzs.h, smkc.h.
 * TSepez   01/18/96 -  Creation
 */

#ifndef SMTU_ORACLE
#define SMTU_ORACLE

/*
 * Version Information
 *
 * DESCRIPTION
 * It may be necessary to issue releases for a particular port that do
 * not involve new versions of the generic code base.  This is reflected
 * in updates to the fourth and fifth digits of the version number.
 *
 * To define these last two digits, simply define the appropriate symbol
 * here.  The symbol should be of the form
 *
 *   SMTU_VERSION_<major>_<minor>_<patch>
 *
 * and the value should be of the form
 *
 *   "<port-release>.<port-patch>"
 *
 * EXAMPLE:  #define SMTU_VERSION_2_1_0  "0.1"
 *
 * for the first port-specific patch release of the generic code base
 * 2.1.0.  We include the generic version in the symbol name, so that,
 * if it is not defined, we will automatically assume "0.0".  This means
 * that this symbol is optional.
 *
 * A similar technique is used to allow changing the product release status
 * in a port-specific manner. To change the status, simply define the
 * appropriate symbol here, of the form
 *
 *   SMTU_STATUS_<major>_<minor>_<patch>
 *
 * and the value should be one of the YSLVL_* constants defined in ys.h
 *
 * EXAMPLE: #define SMTU_STATUS_2.1.0 YSLVL_BETA
 *
 * If this symbol is not defined, the MTU_STATUS given in mtu.c will be
 * used instead; in other words, this symbol is also optional.
 */

/*
 * Thread Package Information
 *
 * DESCRIPTION
 * mtuThrInit() provides a common interface for processes to initialize
 * threads in a consistent and portable manner. mtuThrInit()'s choice of
 * thread packages can be overidden on a per-platform basis by defining
 * OSD symbols for thread packages. There are currently four different
 * types of thread usage allowed in the OMS system:
 *
 * Native Threads:    Some processes need to do blocking calls outside of
 *                    YS (e.g., for HSM and tape drives), and can only do
 *                    this without blocking the whole process by using native
 *                    threads directly; this means they use the NATIVE thead
 *                    package. Define SMTU_THRPKG_NATV to override this
 *                    
 * Oracle-happy Threads: Some processes need to interact with the database,
 *                    and need to use the same thread package that the
 *                    oracle interfaces (XA, OCI) expect. Usually this will
 *                    be a native threads package, and so the default is
 *                    "NATIVE". Define SMTU_THRPKG_ORA to override this
 *
 * Real-time Threads: Usually you want the OMSRT generic thread package for
 *                    this. If for some reason you think you can override
 *                    this on this platform, define the SMTU_THRPKG_RT
 *                    symbol to be the name of the target threads package
 *
 * All others:        If a process doesn't fall into one of the prior
 *                    categories, then they just use threads and need to be
 *                    ys-compliant. They then normally use the OMS thread
 *                    package for maximum performance. If you have a package
 *                    that works better than OMS, define SMTU_THRPKG_DEF to
 *                    override this.
 */

/*
 * Memory Sizing Information
 * 
 * DESCRIPTION
 * The amount of memory to use for certain real-time server objects and
 * caches is configurable for each platform via the following definitions.
 *
 * SmtuTagCacheSize defines how much memory a stream service should allocate
 * PER CLIENT for tag cache memory.  Increasing this number will increase
 * performance on seeks and scanning operations.  Decreasing it, as expected,
 * will reduce memory requirements.  Values in the low to mid 10's of kilobytes
 * are a good starting point.  It can be overriden by the command line flag
 * -t [NUMBER].  
 *
 * SmtuSafetyMemory defines the amount of "overhead" memory that a single 
 * stream instance can guarantee in addition to its context memory.  When 
 * allocating contexts, the stream instance reserves this amount of memory, 
 * then tries to allocate the requested number of contexts.  If it runs out 
 * of memory it will use less contexts than requested, but by allocating this 
 * safety memory up front then freeing it after context allocation, it tries 
 * to guarantee some supply of memory for general overhead.  It should be 
 * tuned per port to be as small as possible while still not running out of 
 * memory during normal operations.  This will maximize the number of 
 * available contexts per stream service instance.
 *
 * SmtuStmStackSize is the default stack size that will be allocated per
 * stream in the stream service.  It can be overridden with the hidden
 * resource vsstrmsrv.stack-size.
 *
 * SmtuDefaultSessions is the default number of worker threads that vsstrmsrv
 * would start in default.  It can be overridden by the command line option
 * [-n NUMBER].
 */
#define SmtuTagCacheSize     (49152)                       /* 48k per client */
#define SmtuSafetyMemory (512 * 1024)                    /* 512k for solaris */
#define SmtuStmStackSize (size_t)(20 * 1024)              /* 20k for Solaris */
#define SmtuDefaultSessions	(20)		/* default number of threads */

/* 
 * Parallel Tagging parameters
 *
 * DESCRIPTION
 * The following parameters are used to customize certain aspects of the
 * parallel tagger's behaviour on a per-platform basis.
 *
 * SmtuMaxTaggers sets a limit on the number of parallel slave tagger 
 * processes used in the same tagging operation.
 *
 * SmtuMpegBps determines the number of bytes per second a given processor 
 * can parse while tagging MPEG content.  It is acceptable for porters not 
 * to make any estimate if it is not known.  SmtuMpegBps should be defined
 * as zero in this case.  Some ports may wish to define this macro as
 * a call to some ss_ function to perform the computation based upon
 * a run-time determination of processor type.  Most will just leave it
 * as zero.
 *
 * SmtuHdlGetRetries determines the number of attempts the master will
 * make to locate a slave process in the name server.  The master pauses
 * for one second between each attempt, so this number also represnts the
 * maximum number of seconds that a slave process has to begin its 
 * execution and register itself with the name server.  Slow platforms
 * may wish to increase this default.
 */
#define SmtuMaxTaggers    32
#define SmtuMpegBps       ((sb4)0)   /* Unknown, variable solaris peformance */
#define SmtuHdlGetRetries 5              /* 5 tries per process, 1 sec apart */

#endif /* SMTU_ORACLE */

