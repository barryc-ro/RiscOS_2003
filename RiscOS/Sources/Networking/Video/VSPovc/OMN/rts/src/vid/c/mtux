/* mtux.c
 * Copyright (C)1997 Oracle Corporation
 *
 * This file includes functions to startup and shutdown the standard
 * Media Net client services that programs need in order to function
 * in the video server universe.
 *
 * Modification History
 *
 * 20-Oct-97 dweaver  Added mtuxVersion function
 * 18-Jun-97 dweaver  Creation
 */

#ifndef SYSI_ORACLE
# include <sysi.h>
#endif

#ifndef SMNI_ORACLE
# include <smni.h>
#endif

#ifndef YO_ORACLE
# include <yo.h>
#endif

#ifndef MTUX_ORACLE
# include <mtux.h>                           /* public function declarations */
#endif

#ifndef MTUVER_ORACLE
# include <mtuver.h>                              /* current version numbers */
#endif

/* OS Includes */

#ifndef ORASTDIO
# define ORASTDIO
# include <stdio.h>                                     /* For sprintfs, etc */
#endif

/* Name:  mtuxInit
 * Desc:  establish basic media net connections
 * Inputs:
 *   progName -- name of your program, used for logging purposes
 *   mnLogger -- NULL will use the standard video server logging methods.
 *               If you wish to redirect your messages somewhere else,
 *               insert your logging function here.
 * Returns:
 *   Either success or the layer at which initialization failed:
 *
 *   YS failure generally means there is a build inconsistency. Check
 *   your installation. YS failures usually lead immediately to core
 *   dumps.
 *
 *   MN failure usually means that the media net address server cannot
 *   be contected; make sure your OMN_ADDR is set and the mnaddrsrv
 *   process is running.
 *
 *   YO failure indicates that the mnorbsrv process is not reachable.
 *
 * Notes:
 *   mtuxInit should only be called once during the lifetime of a program.
 *   After it is called, another media net call (ysYield is one fine
 *   candidate) needs to be called at least once every thirty seconds
 *   to maintain a heartbeat with mnaddrsrv, or the program will be
 *   excommunicated from the media net universe.
 */
static CONST_W_PTR ysargmap mtuxNullMap[] =
{
{0}
};

static ysidDecl(MTUX_FAILURE) = "mtux::failure";
static CONST_DATA char MTUX_CTXNM[] = "RTS_MTUX_INIT_CTX";

mtuxLayer
mtuxSimpleInit(dvoid *osdCtx, CONST char *progName, mnLogger logger)
{
  return mtuxInit(osdCtx, progName, logger, 0, NULLP(char *), mtuxNullMap);
}

mtuxLayer
mtuxInit(dvoid *osdCtx, CONST char *progName, mnLogger logger,
         sword argCnt, char **argLst, CONST ysargmap *map)
{
  noreg mtuxLayer  theGoods = mtuxLayerYs;
  sword            ysSts;

  NOREG (theGoods);

  /* Note that there is no way to save yourself if ysInit fails -- the
     program will simply abort. */
  ysInit(osdCtx, progName);

  yseTry
  {
    /* Import the environment, even if there is no argument map, we'll
       want the YSRESFILE to be imported. */
    ysSts = ysArgParse(argCnt, argLst, map);
    switch (ysSts)
    {
      char vbuf[80];
    case YSARG_NORMAL:
      break;
    case YSARG_VERSION:
      vbuf[0] = '\0'; /* make olint shut up */
      yslError(ysFmtVersion(vbuf, sizeof(vbuf), "Oracle Video Server",
                            MTU_VERSION "." MTU_PORT_VERSION,
                            MTU_STATUS, __DATE__));
      yslError(ysVersion(vbuf, sizeof(vbuf)));
      /* FALLTHROUGH */
    case YSARG_HELP:
      theGoods = mtuxLayerInfo;
      yseThrow(MTUX_FAILURE);
      break;
    default:
      theGoods = mtuxLayerBadParam;
      yseThrow(MTUX_FAILURE);
      break;
    }

    theGoods = mtuxLayerMn;
    if (!smniInit(osdCtx, logger))
    {
      theGoods = mtuxLayerMn;
      yseThrow(MTUX_FAILURE);
    }

    theGoods = mtuxLayerYo;
    yoInit();

    theGoods = mtuxLayerSuccess;
  }
  yseCatchAll
  {
    /* undo whatever initializations made it through */
    switch (theGoods)
    {
    case mtuxLayerSuccess: /* this is just sort of a placeholder */
      theGoods = mtuxLayerYo; /* Can't return success if it really failed */
      yoTerm();
      /*FALLTHROUGH */
    case mtuxLayerYo:
      smniTerm();
      /*FALLTHROUGH */
    default:
      break;
    }
  }
  yseEnd;

  if (theGoods != mtuxLayerSuccess)
    ysTerm(osdCtx);
  return theGoods;
}

mtuxLayer
mtuxTerm(dvoid *osdCtx)
{
  yoTerm();
  smniTerm();
  ysTerm(osdCtx);

  return mtuxLayerSuccess;
}

/* Name:  mtuxVersion
 * Desc:  Return the version of the OVS libraries being used
 * Inputs:
 *   buf    -- destination buffer for the version string. This buffer should
 *             be at least MTUX_VERBUFSZ bytes long or information may be
 *             truncated.
 *   bufLen -- length of the supplied buffer
 * Returns:
 *   buf, as a convenience
 */
char *mtuxVersion(char *buf, size_t bufLen)
{
  /* Here we wastefully and cruftily duplicate the code in mturtsVersion,
     so libmtu.so doesn't have to be linked in just because libmtux.so
     is linked in. */
  char vbuf[80];
  
  DISCARD sprintf(vbuf, "%s.%s", MTU_VERSION, MTU_PORT_VERSION);
  return ysFmtVersion(buf, bufLen, MTU_PRODUCT_NAME, vbuf, 
		      MTU_STATUS, __DATE__);
}
