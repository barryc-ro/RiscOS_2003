#ifndef MTUX_ORACLE
#define MTUX_ORACLE
/* mtux.h
 * Copyright (C)1997 Oracle Corporation
 *
 * This file includes functions to startup and shutdown the standard
 * Media Net client services that programs need in order to function
 * in the video server universe.
 *
 * Modification History
 *
 * 20-Oct-97 dweaver  Added mtuxVersion function
 * 18-Jun-97 dweaver  Creation
 */

#ifndef SYSX_ORACLE
# include <sysx.h>
#endif

#ifndef YS_ORACLE
# include <ys.h>
#endif

#ifndef MN_ORACLE
# include <mn.h>
#endif

typedef enum mtuxLayer
{
  mtuxLayerSuccess = 0,
  mtuxLayerInfo,           /* "help" or "version" info only */
  mtuxLayerBadParam,       /* malformed arguments or resource file */
  mtuxLayerYs,             /* system layer */
  mtuxLayerMn,             /* transport layer */
  mtuxLayerYo              /* object layer */
} mtuxLayer;

/* Name:  mtuxInit, mtuxSimpleInit
 * Desc:  establish basic media net connections
 *
 * Inputs:
 *   osdCtx   -- An opaque chunk of memory that must exist until
 *               mtuxTerm is called. This memory needs to be at least
 *               SYSX_OSDPTR_SIZE bytes long. It also needs to have
 *               the strictest byte alignment ever required on your
 *               platform (typically 4 bytes). You will quickly get a
 *               bus error if it isn't well enough aligned. Note that
 *               we do not allocate this memory for you - you've got to
 *               pass in the block.
 *   progName -- name of your program, used for logging purposes
 *   mnLogger -- NULL will use the standard video server logging methods.
 *               If you wish to redirect your Media Net messages somewhere
 *               else, insert your logging function here.
 *
 * Additional inputs for complex initialization:
 *   argCnt   -- number of items in argLst; the program name is not
 *               included, so this is typically argc - 1.
 *   argLst   -- command line arguments, not including the program
 *               name, so this is typically argv + 1.
 *   argMap   -- see ysr.h; basically the map between command line
 *               parameters and internal resource names.
 *
 * Returns:
 *   Either success or the layer at which initialization failed:
 *
 *   Info means that a help or version message was printed in response
 *   to a -h or -V argument in the argLst.
 *
 *   BadParam means that either a malformed argument was found in argLst
 *   or in a resource file (YSRESFILE, perhaps).
 *
 *   YS failure generally means there is a build inconsistency. Check
 *   your installation. YS failures usually lead immediately to core
 *   dumps.
 *
 *   MN failure usually means that the media net address server cannot
 *   be contected; make sure your OMN_ADDR is set and the mnaddrsrv
 *   process is running.
 *
 *   YO failure indicates that the mnorbsrv process is not reachable.
 *
 * Notes:
 *   mtuxInit should only be called once during the lifetime of a program.
 *   After it is called, another media net call (ysYield is one fine
 *   candidate) needs to be called at least once every thirty seconds
 *   to maintain a heartbeat with mnaddrsrv, or the program will be
 *   excommunicated from the media net universe. While it is theoretically
 *   possible that sequences like mtuxInit/mtuxTerm/mtuxInit could or even
 *   should work, this behavior is not guaranteed, and different machines
 *   and different versions of Media Net should be expected to have
 *   varying forms of behavior.
 *
 *   mtuxTerm() should ONLY be called if the initialization call succeeded,
 *   meaning constructions like:
 *     if (mtuxSimpleInit() == mtuxLayerSuccess)
 *     {
 *       doFoo();
 *       mtuxTerm();
 *     }
 *   are definitely the way to go.
 *
 *   Resources from the YSRESFILE specified in the environment are picked
 *   up when either form of mtuxInit is called.
 *
 *   Check out the demo programs to see mtuxInit in action.
 */
mtuxLayer mtuxSimpleInit(dvoid *osdCtx, CONST char *progName, mnLogger logger);
mtuxLayer mtuxInit(dvoid *osdCtx, CONST char *progName, mnLogger logger,
                   sword argCnt, char **argLst, CONST ysargmap *argMap);

mtuxLayer mtuxTerm(dvoid *osdCtx);

/* Name:  mtuxVersion
 * Desc:  Return the version of the OVS libraries being used
 * Inputs:
 *   buf    -- destination buffer for the version string. This buffer should
 *             be at least MTUX_VERBUFSZ bytes long or information may be
 *             truncated.
 *   bufLen -- length of the supplied buffer
 * Output:
 *   buf is filled in with the product name, version, release and build
 *   information, for example,
 *   "Oracle Video Server Release 3.0.2.0.0 - Beta (built: Sep 15 1997)"
 * Returns:
 *   the buf that was passed in, as a convenience
 */
#define MTUX_VERBUFSZ 80
char *mtuxVersion(char *buf, size_t bufLen);

#endif /* MTUX_ORACLE */
