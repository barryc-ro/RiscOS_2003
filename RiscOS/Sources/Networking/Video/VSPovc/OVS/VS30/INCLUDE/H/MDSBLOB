/****************************************************************************
 * Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * mdsblob.h - Media Data Store Blob Interface
 *
 * This header file describes an interface for retrieving blobs from MDS.
 * It is intended to be used by video clients to retrieve unstructured and
 * untyped data, or blobs, from MDS.  
 * 
 * Blobs are specified via mkd asset cookies, which are described in mkd.idl.
 * The asset cookie may correspond to a complete MDS file, a segment of an MDS
 * file, or multiple MDS files and/or file segments; however this makeup is 
 * not exposed to the user.  In fact, this interface treats the blob
 * corresponding to an asset cookie as one contiguous piece of content.  The 
 * user can retrieve the entire blob by calling mdsBlobPrepare() or a segment
 * of the blob by calling mdsBlobPrepareSeg().
 *
 * The user allocates memory for the blob as it arrives by supplying a 
 * non-blocking callback function.  This scheme allows the user to control the
 * layout of the data.
 *
 * When the blob has been retrieved, the event supplied by the user for that
 * blob is triggered.  Any errors that have occurred during the asset name
 * resolution or data transmission are reported to the user at this time.
 * Unless the user waits for the event (semaphore) to be triggered, the user
 * should take care to periodically yield to the underlying library by calling
 * ysYield().
 * 
 * Each mdsBlobTransfer() call sets up its own Media Net port and stream
 * to the blob server.  The user can initiate multiple simultaneous transfers 
 * by calling mdsBlobTransfer() when the previous mdsBlobTransfer() call has 
 * not yet completed.  However, the user may not perceive any increase in the
 * rate of data transfer because of the type of network connection used and the
 * nature of the video being simultaneously transmitted to the user, if any.
 *
 * The typical sequence of calls made by the client are:
 *	mdsBlobInit()
 *
 *      -- other code --
 *
 *	mdsBlobPrepare("impl:xxx", ..., sem[0])
 *	mdsBlobPrepare("impl:yyy", ..., sem[1])
 *	mdsBlobPrepare("impl:zzz", ..., sem[2])
 *	mdsBlobTransfer()
 *	ysSemAndW(sem)
 *
 *      -- other code --
 *
 *	mdsBlobPrepareSeg("impl:foo", ..., sem[0])
 *	mdsBlobPrepare("impl:bar", ..., sem[1])
 *	mdsBlobTransfer()
 *	ysSemAndW(sem)
 *
 *      -- other code --
 *
 *	mdsBlobTerm()
 *
 * See /vobs/rts/demo/ovsdemo.c for a complete example.
 ****************************************************************************/

#ifndef MDSBLOB_ORACLE
#define MDSBLOB_ORACLE
 
#ifndef YS_ORACLE
# include <ys.h>
#endif

#ifndef YSV_ORACLE
# include <ysv.h>
#endif

#ifndef MKD_ORACLE
# include <mkd.h>
#endif


/* 
 * Definitions
 */
typedef struct mdsBlob mdsBlob;


/* Name: mdsBlobInit
 * Function:
 *	mdsBlobInit() initializes the client for future blob interface calls.
 *	It should be called at most once.  It is a blocking call.  
 *
 *	The user may call both mdsBlobInit() and mdsInit() - see mds.h for
 *	details.  However, the user must call mdsInit() before mdsBlobInit().
 * Input:
 * Output:
 * Returns:
 * Exceptions:
 *	MDS_EX_NOTINIT
 */
void mdsBlobInit( void );


/* Name: mdsBlobTerm
 * Function:
 *	mdsBlobTerm() cleans up any outstanding state created by prior calls 
 *	to the blob interface.  It should only be called once.
 * Input:
 * Output:
 * Returns:
 * Exceptions:
 */
void mdsBlobTerm( void );


/* Name: mdsAllocFunc
 * Function:
 * 	Prototype for mdsAllocFunc, a user-defined callback function to 
 * 	allocate memory for the blobs.
 * Input:
 *      usrp  - user pointer that was passed into mdsBlobPrepare() or 
 *		mdsBlobPrepareSeg().
 *	segSz - number of bytes of memory to allocate
 *	off   - offset within the blob or blob segment requested
 *	total - total number of bytes of the blob or blob segment
 * Output:
 *	actSz - number of bytes of memory actually allocated
 * Returns:
 *	pointer to memory allocated.  Returns null if no more memory is
 *	available.  In this case, the event passed to mdsBlobPrepare() or
 *	mdsBlobPrepareSeg() is triggered with MDS_EX_NOMEM.
 * Exceptions:
 */
typedef ub1 *(*mdsAllocFunc)( dvoid *usrp,    
			      size_t segSz,
			      ub4 off,
			      ub4 total,
			      size_t *actSz );


/* Name: mdsBlobPrepare
 * Function:
 *	Prepares for the retrieval of MDS content.  The content is described
 *	by the asset cookie, which is a tag that is completely opaque to the
 *	client and is resolved by the server.  The actual data transfer is 
 *	initiated by a call to mdsBlobTransfer() using the context returned.  
 *	by this call.  mdsBlobTransfer() will use the specified allocation 
 *	function to allocate space for the content as it arrives.  The input 
 *	event is triggered with a return code indicating the transfer status 
 *	when the transfer is complete.  The user can cancel the transfer at 
 *	any time by destroying the event.
 *
 *	Note that mdsBlobPrepare only initializes state on the client side 
 *	and does not result in any communication with the server.
 * Input:
 *      asset    - opaque name for the content.  This structure must remain
 *		   valid until the transfer is complete.
 *	auth     - authentication token for the asset
 *	flgs     - flags.  None are currently supported.
 *	allocf   - routine supplied by the caller.  This callback routine will
 *		   be invoked when the caller needs to allocate memory for
 *		   the content.
 *	usrp     - user pointer that is passed to the allocation function
 *	evt      - event to be triggered when transfer is complete
 * Output:
 * Returns:
 *	the context for this blob transfer.  It should be passed to 
 *	mdsBlobTransfer() to initiate the transfer.  It is automatically 
 *	destroyed by mdsBlobTransfer() or when the event is destroyed.
 * Exceptions:
 *	If the blob transfer fails, then the event is triggered with:
 *	MDS_EX_NOMEM, MDS_EX_IO, or MDS_EX_FILEEX.
 *	
 *	The event may also be triggered with YS_EX_TIMEOUT if a timeout occurs
 *	during blob transfer, indicating network transmission problems or
 *	that the user should yield to Media Net more frequently by adding
 *	ysYield() calls (see above).
 */
mdsBlob *mdsBlobPrepare( mkd_assetCookie asset,
			 CORBA_Object auth,
			 ub4 flgs,
			 mdsAllocFunc allocf,
			 dvoid *usrp,
			 ysevt *evt );


/* Name: mdsBlobPrepareSeg
 * Function:
 *	mdsBlobPrepareSeg() is identical to mdsBlobPrepare() except that it 
 *	allows the user to specify the starting offset and size within the
 *	blob to transfer.
 * Input:
 *      asset    - opaque name for the content.  This structure must remain
 *		   valid until the transfer is complete.
 *	auth     - authentication token for the asset
 *	off      - starting offset of blob to transfer
 *	len      - number of bytes of blob to transfer
 *	flgs     - flags.  None are currently supported.
 *	allocf   - routine supplied by the caller.  This callback routine will
 *		   be invoked when the caller needs to allocate memory for
 *		   the content.
 *	usrp     - user pointer that is passed to the allocation function
 *	evt      - event to be triggered when transfer is complete
 * Output:
 * Returns:
 *	the context for this blob transfer.  It should be passed to 
 *	mdsBlobTransfer() to initiate the transfer.  It is automatically 
 *	destroyed by mdsBlobTransfer() or when the event is destroyed.
 * Exceptions:
 *	If the blob transfer fails, then the event is triggered with:
 *	MDS_EX_NOMEM, MDS_EX_IO, or MDS_EX_FILEEX.
 *	
 *	The event may also be triggered with YS_EX_TIMEOUT if a timeout occurs
 *	during blob transfer, indicating network transmission problems or
 *	that the user should yield to Media Net more frequently by adding
 *	ysYield() calls (see above).
 */
mdsBlob *mdsBlobPrepareSeg( mkd_assetCookie asset,
			    CORBA_Object auth,
			    ub4 off,
			    ub4 len,
			    ub4 flgs,
			    mdsAllocFunc allocf,
			    dvoid *usrp,
			    ysevt *evt );


/* Name: mdsBlobTransfer
 * Function:
 *	mdsBlobTransfer() initiates the transfer of the content prepared by
 *	previous calls to mdsBlobPrepare() and/or mdsBlobPrepareSeg().  When 
 *	it has completed transfer of a particular blob or blob segment, the
 *	associated event is triggered.
 * Input:
 *      blobs    - array of blob contexts returned by previous calls to 
 *	           mdsBlobPrepare() and/or mdsBlobPrepareSeg()
 *	numBlobs - number of blobs
 *	flgs     - flags.  None are currently supported.
 * Output:
 * Returns:
 * Exceptions:
 */
void mdsBlobTransfer( mdsBlob **blobs,
		      sword numBlobs,
		      ub4 flgs );
		

#endif /* MDSBLOB_ORACLE */
