/*****************************************************************************
 * Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * mdsnm.h - Media Data Store Public File Name Interface
 *
 * A filename passed to a function in mds.h can refer to either a
 * host file or an MDS file.  The caller usually does not need to know 
 * whether the data resides on the host or in MDS, but they can restrict 
 * the access to one or the other if necessary.
 * 
 * Native MDS filenames are distinguished from host filenames by mandating 
 * that they begin with the reserved prefix '/mds'.  Any filename not 
 * beginning with this prefix is assumed to refer to a host file.  Native
 * MDS filenames are always of the form '/mds/<vol>/<file>'
 * 
 * MDS filenames are case insensitive, but case retentive.  Thus the
 * case of a file name is maintained by MDS but never used in filename
 * comparisons.
 *
 * The process by which a user specified string is converted into a
 * valid filename consists of two phases:  OSD layer expansion and
 * wildcard expansion.  The OSD layer is always given the filename 
 * first.  It must guarantee that the filename returned is 
 * a) immediately indentifiable as a host or MDS filename
 * via the '/mds' prefix, and b), is absolute, i.e. does not depend
 * on the user's current working directory.  Either OSD or wildcard expansion
 * can block (process or thread, respectively) so real-time processes
 * should only operate on fully formatted MDS filenames.
 *
 * To preserve shell-like usage semantics, all filenames should initially
 * be passed through the wildcarding mechanism (described below).
 * Since wildcard expansion is potentially expensive, it should only
 * be performed once.  OSD expansion, however, is trivial and will be
 * performed automatically by the MDS interface if necessary.
 */

#ifndef MDSNM_ORACLE
#define MDSNM_ORACLE

#ifndef YS_ORACLE
# include <ys.h>
#endif


/* 
 * Public Constants
 */
#define MdsnmNtvFilePrefix   "/mds"
#define MdsnmNtvFileLen      (size_t)35
#define MdsnmNtvVolLen       (size_t)32

/* Maximum length of a native MDS filename: '/mds/<volname>/<filename>' */
#define MdsnmNtvMaxLen    (sizeof(MdsnmNtvFilePrefix)+MdsnmNtvFileLen+\
			   MdsnmNtvVolLen+2)

/* Maximum length of an MDS or host filename. */
#define MdsnmMaxLen       (max(MdsnmNtvMaxLen, 1024))


/*
 * Public Types
 */

/* Opaque match context for mdsnmMatch wildcard calls */
typedef struct mdsMch mdsMch;


/*
 * Public Functions
 */

/* Name:  
 *      mdsnmTypeNtv() - is this a native MDS filename?
 * Synopsis:
 *      boolean mdsnmTypeNtv( CONST char *name );
 * Function:
 *      Checks if the file 'name' corresponds to an MDS file.  'name' must
 *      be a formatted filename.  Fully formatted filenames can be
 *      retrieved via mdsnmFormat(), the wildcard expansion functions, or 
 *      from an open file pointer.
 * Input:
 *      name - name of the file to check
 * Output:
 * Returns:
 *      TRUE if 'name' corresponds to an MDS file.  FALSE otherwise.
 * Exceptions:
 */
#define mdsnmTypeNtv(name) \
  (!ysStrnCaseCmp(name, MdsnmNtvFilePrefix, sizeof(MdsnmNtvFilePrefix)-1))


/* Name:  
 *      mdsnmIsLegal() - is this a legal MDS filename?
 * Function:
 *      Checks if the file corresponds to a legal MDS filename.  A
 *      simple name (e.g. foobar), or a formatted name may (e.g.
 *      /mds/vol1/foobar) may be specified.  Host filename checking is
 *      not supported.
 * 
 *      Legal filenames must currently begin with an alphanumeric,
 *      followed by any sequence of alphanumerics, the '.', '-', 
 *      and '_' characters.  The maximum length is defined by
 *      MdsnmMaxMdsLen.  Since a host system may have different file
 *      name restrictions this function is provided so clients
 *      can test if a host filename can be used within an MDS filesystem.
 * Input:
 *      name  - name of the file to check
 * Output:
 * Returns:
 *      TRUE if 'name' is legal, FALSE otherwise.
 * Exceptions:
 */
boolean mdsnmIsLegal( CONST char *name );


/* Name:  mdsnmSplit() - Split a formatted name into pathname & filename
 * Function:
 *      Both the host filesystem and MDS will only guarantee that a full
 *      filename (one with path or volume info) is unique.  Most host
 *      systems support nested containers (directories) for filenames;
 *      MDS supports only a single container (the volume).  This function
 *      will operate on either host or MDS names, splitting the name
 *      into path and file component parts.
 *
 *      If a component part is not available, then an empty string is
 *      returned.   NULL can be passed for either dirNm or fileNm to indicate
 *      that the component is to be ignored.  mdsnmSplit() must be
 *      able to determine if the filename is a host name or a MDS name
 *      by examining the file prefix.
 * Input:
 *      name   - full name of file
 *      dirNm  - space for at least MdsnmMaxLen+1 bytes
 *      fileNm - space for at least MdsnmMaxLen+1 bytes
 * Output:
 *      dirNm  - host directory or MDS container of the form '/mds/<vol>'
 *      fileNm - filename
 * Returns:
 * Exceptions:
 * MDS_EX_BADPARAM
 * MDS_EX_FILEEX
 */
void mdsnmSplit(CONST char *name, char *dirNm, char *fileNm);


/* Name:  
 *      mdsnmJoin()  - Join pathname & filename into full name.
 * Function:
 *      Joins pathname and filename into a full name.  Can be used
 *      on either host or MDS files.  mdsNmJoin() must be able to
 *      determine if the resulting filename should be an MDS filename
 *      or a host filename by examining the prefix of 'dirNm'.  (The
 *      process of forming a host filename is platform specific.)
 * Input:
 *      name   - space for at least MdsnmMaxLen+1 bytes
 *      dirNm  - host directory or MDS container of the form '/mds/<vol>'
 *      fileNm - filename
 * Output:
 *      name   - full name of file
 * Returns:
 * Exceptions:
 */
void mdsnmJoin(char *name, CONST char *dirNm, CONST char *fileNm);


/* Name:  
 *      mdsnmNtvSplit() - Split native MDS filename.
 * Function:
 *      Same as above mdsnmSplit() but assumes a native name.
 *      Thus, the container is returned as 'volNm' 
 *      as opposed to '/mds/<volNm>' above.  NULL may be passed
 *      for either 'volNm', or 'fileNm'.
 *
 *      Example:
 *        mdsnmNtvSplit("/mds/vol1/file1", vnm, (char *)0);
 *      will copy the string "vol1" into vnm.
 * Input:
 *      name   - name of the form '/mds/<vol>/<file>'
 *      volNm  - space for at least MdsnmNtvVolLen+1 bytes, or NULL
 *      fileNm - space for at least MdsnmNtvFileLen+1 bytes, or NULL
 * Output:
 *      volNm  - '<vol>'
 *      fileNm - '<file>'
 * Returns:
 * Exceptions:
 * MDS_EX_BADPARAM
 * MDS_EX_FILEEX
 */
void mdsnmNtvSplit(CONST char *name, char *volNm, char *fileNm);


/* Name:  
 *      mdsnmNtvJoin() - Join native MDS filename.
 * Function:
 *      Same as mdsnmJoin() above, but assumes a native name.  Thus
 *      caller can specify container name as '/mds/<vol>' or '<vol>'.
 *      Additionally, if fileNm is NULL, then the resulting name will 
 *      be of the form '/mds/<vol>' (without the trailing slash).
 * Input:
 *      name   - space for at least MdsnmNtvMaxLen+1 bytes
 *      volNm  - volume name of the form '/mds/<vol>' or '<vol>'
 *      fileNm - filename (or NULL)
 * Output:
 *      name   - full filename of the form '/mds/<vol1>/<file1>'
 * Returns:
 * Exceptions:
 */
void mdsnmNtvJoin(char *name, CONST char *volNm, CONST char *fileNm);


/* Name:  
 *      mdsnmVolCmp(), mdsnmFileCmp() - Compare MDS names
 * Synopsis:
 *      sword mdsnmVolCmp(CONST char *volNm1, CONST char *volNm2);
 *      sword mdsnmFileCmp(CONST char *fileNm1, CONST char *fileNm2)
 * Function:
 *      These functions compare complete MDS names in the same fashion
 *      as strcmp().  The comparison does *NOT* perform wildcard expansion.
 * 
 *      Users can specify MDS volume names with strings of the 
 *      form '/mds/<volume>' or simply 'volume'.  
 * 
 *      mdsnmFileCmp() can be used to compare filenames of the form
 *      '/mds/<volume>/<file>'.
 * Input:
 *      nm1, nm2 - files/volumes to compare.
 * Output:
 * Returns:
 *      < 0 if nm1 < nm2,
 *      0 if equal,
 *      > 0 if nm1 > nm2.
 */
sword mdsnmVolCmp(CONST char *nm1, CONST char *nm2);
#define mdsnmFileCmp(nm1, nm2) ysStrnCaseCmp(nm1, nm2, MdsnmNtvFileLen)


/* Name: 
 *      mdsnmFormat() - OSD format a name
 * Synopsis:
 *      void mdsnmFormat(CONST char *inNm, char *outNm);
 * Function:
 *      Allows OSD first pass at interpreting filename.  OSD will 
 *      usually resolve relative filenames, and perform any other
 *      formatting necessary.  Most importantly, the resulting name must be
 *      identifiable as a native MDS or host filename via mdsnmTypeNtv().
 *
 *      The formatted name is copied into outNm, which must be at least
 *      mdsnmMaxLen+1 bytes long.
 * Input:
 *      inNm  - file name to be formatted
 *      outNm - space for filename string
 * Output:
 *      outNm - 'inNm' formatted.
 * Returns:
 * Exceptions:
 * MDS_EX_BADRES
 */
void mdsnmFormat( CONST char *inName, char *outName );


/* Name: 
 *      mdsnmMatchCreate(), mdsnmMatchNext(), mdsnmMatchDestroy()
 *       -- Wildcarding -- 
 * Function:
 *      mdsnmMatchCreate() begins a wildcard search according the
 *      the expression specified and returns a match context to be
 *      used in subsequent mdsnmMatchNext() calls.  
 *
 *      Caller can pass in flags (of type MdsFlg) to further constrain 
 *      matching files. (Typically the caller passes in the same flags 
 *      that will be used in a subsequent mdsOpen calls to restrict 
 *      the set of matching files to those of interest.)  The 
 *      following flags are supported: MdsFlgWrt, MdsFlgDel.
 *
 *      mdsnmMatchNext() returns the next matching file or FALSE if
 *      there are no more matching files.  Caller is expected to
 *      allocate sufficient space for a matching filename, at 
 *      least MdsnmMaxLen+1 bytes.
 *
 *      mdsnmMatchDestroy() frees the match context.
 * 
 *      Note:
 *      Wildcarding can only be performed on native MDS files.  
 *      Host filenames will simply be copied into 'fileNm' by
 *      by mdsnmMatchNext() but otherwise ignored.
 * 
 *      MDS volume names can be wildcarded if 'expr' is of the form
 *      '/mds/<vol>'.  Matching volume names will be returned.
 * 
 *      These calls may block the calling thread or process.
 * Input:
 *      expr      - Wildcard expression (example: '/mds/v*1/?aa?')
 *      flags     - Match deleted, invalid files, etc.?
 * Output:
 *      fileNm    - Matching filename
 * Returns:
 *      mdsMch *  - Match context.
 * Exceptions:
 */
mdsMch   *mdsnmMatchCreate( CONST char *expr, ub4 flags );
boolean   mdsnmMatchNext( mdsMch *mcx, char *fileNm );
void      mdsnmMatchDestroy( mdsMch *mcx );


/* Name: 
 *      mdsnmExpand(), mdsnmExpandOne() - Wildcard matching
 * Function:
 *      mdsnmExpand() expands a list of user-supplied filenames, 
 *      and returns an ordered list of matches.
 *      mdsnmExpandOne() is a convenience function that can be used instead
 *      if only a single filename is to be expanded.
 *      
 *      Both functions format a user supplied filename according to 
 *      with mdsnmFormat(), expand any wildcards for MDS filenames (only!),
 *      and return a list of matches.  Host filenames are merely copied to
 *      the output list.
 *
 *      It is the caller's responsibility to free the output list and
 *      list elements at a later time, i.e. ysLstDestroy(lst, ysmFGlbFree).
 *
 *      An empty list will be returned if no matches are found.
 *      If maxMatches is zero, then the list is unbounded, else, it will
 *      contain at most maxMatches elements.
 *
 *      These calls can block the calling thread.
 *
 *      These functions are merely convenience functions for the basic
 *      functionality that is provided via mdsnmMatch() functions above.
 *      They provide UNIX style shell behavior by expanding all wildcards
 *      up front, copying over elements without wildcards, and raising
 *      MDS_EX_NMRESOLVE with reason mds_nomatch for false matches.
 * Input:
 *      inNms       - List of user supplied filenames.
 *      flags       - Match deleted, invalid files, etc.?
 *      maxMatches  - Match at most this many files (pass zero for unbounded)
 * Output:
 * Returns:
 *      A list of expanded, formatted MDS filenames
 * Exceptions:
 */
yslst *mdsnmExpand( yslst *inNms, ub4 flags, sb4 maxMatches );
yslst *mdsnmExpandOne( CONST char *inNm, ub4 flags, sb4 maxMatches );


/*
 * Private
 */
 
/* Name: 
 *      mdsnmRECompile(), mdsnmREMatch(), mdsnmREFree() - MDS Matching
 * Function:
 *      Wrappers around ysRE functions to provide caseless comparisons.
 *      All MDS matching assumes caseless comparisons, glob-style 
 *      wildcarding, and embedded = FALSE.
 * Input:
 *      str   - string expression (at most MdsnmMaxLen bytes)
 * Output:
 *      mdsre - expression context
 * Returns:
 */
typedef ysre mdsre;           /* i.e. thank you for remembering to use mdsRE */
mdsre   *mdsnmRECompile(CONST char *str);
boolean  mdsnmREMatch(mdsre *re, CONST char *str);
#define  mdsnmREFree(re)   ysREFree((ysre *)re)


/* Name:  
 *      mdsnmIsDir() - Is this name a volume/directory?
 * Function:
 *      Checks if the specified 'nm' corresponds to a volume or directory.  
 *	This function supports both MDS and host files.  'nm' need not be
 *	formatted.
 * Input:
 *      nm  - name to check
 * Output:
 * Returns:
 *      TRUE if 'nm' is a volume/directory, FALSE otherwise.
 * Exceptions:
 * MDS_EX_BADPARAM
 * MDS_EX_FILEEX
 */
boolean mdsnmIsDir( CONST char *nm );

#endif /* MDSNM_ORACLE */
