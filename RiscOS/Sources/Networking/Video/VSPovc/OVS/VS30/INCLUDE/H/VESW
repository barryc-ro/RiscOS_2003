#ifndef VESW_ORACLE
#define VESW_ORACLE
/* vesw.h
 * Copyright (C)1996,1997 Oracle Corporation
 *
 * This file defines the Video Encoding Standard Application Programming
 * Interface (VESAPI) in the C language. Though it relies on C data
 * structures generated from ves.idl, no CORBA support is required in
 * either the encoder or video server implementation.
 *
 * The functions defined in this file are wrappers around the video
 * server's networking calls between the encoder and the client. These
 * calls are implemented by the video server vendor in such a way that
 * any marshalling, exception throwing, et cetera, is transparent to the
 * calling encoder.
 *
 * Server vendors wishing to implement the Video Encoding Standard API
 * (VESAPI) need to provide libraries that implement this interface,
 * typically in the form of a DLL or shared library, which includes all of
 * the client (encoder) side networking for communicating with their server.
 * It is important for server vendors to remember that most client encoder
 * processes are realtime, hardware driven devices that may not tolerate
 * the introduction of preemptive thread packages and usually aren't very
 * fond of blocking calls. Server vendors are encouraged to use vesm.idl
 * as their network interface.
 *
 * Conversely, encoder vendors write to this API and hopefully don't worry
 * about the networking aspect at all.
 *
 * A typical calling structure (in pseudocode) would be:
 *
 *   veswInit();
 *   for (eachFeed) {
 *     veswNewFeed();
 *     while (encodingData) {
 *       veswSendData();
 *       if (newTags)
 *         veswSendTags();
 *     }
 *     veswClose();
 *   }
 *   veswTerm();
 *
 * 14-Aug-97 dweaver  Public debut
 */

#ifndef SYSX_ORACLE
# include <sysx.h>   /* C datatype mapping for this port */
#endif

#ifndef VES_ORACLE
# include <ves.h>    /* CORBA types for feed interface */
#endif

typedef struct veswCtx  veswCtx;

/*****************************************************************************
 *
 *  By default, the implementation of the vesw functions is blocking and
 *  is not thread safe (i.e. all vesw calls must be made from the same
 *  thread).
 *  Server vendors are encouraged to make their implementations as
 *  streamlined as possible, but for a hardware based encoder there is
 *  no substitute for threading your process.
 *
 ****************************************************************************/

/* Name:  veswInit, veswIdle, veswTerm
 * Desc:  initialize, maintain and teardown an existence in the
 *        video server's universe
 * Input:
 *   ysCtx  -- A pointer to a block of memory of at least SYSX_OSDPTR_SIZE
 *             bytes. This memory is used by the server's client-side library
 *             as a bootstrap area for library initialization and to maintain
 *             state if veswInit is called multiple times. The memory must
 *             be aligned on the strictest boundary ever required by your
 *             architecture.
 *         *** This memory must persist until veswTerm() is called. ***
 *             If NULL is passed to veswIdle, it takes no action.
 *   progNm -- This name is used to identify the encoder process in a
 *             server vendor specified way.
 * Returns:
 *   Hopefully veswLayerSuccess, unless the operation failed for some
 *   reason. Then the layer where the failure occurred is returned.
 *   The exact definition of these layers is up to the server vendor;
 *   guidelines follow.
 *
 *   In the init case:
 *   - veswLayerInternal means that no attempt was made to contact the
 *     video server due to problems in the initialization sequence on the
 *     encoder.
 *   - veswLayerNetwork indicates that the video server could not be found,
 *     typically because the client is looking for the wrong IP address, the
 *     routing between the client and the server is messed up, or the server
 *     isn't up.
 *   - veswLayerObject means that the video server exists, but for some
 *     reason will not recognize the client as a peer.
 *
 * Notes:
 *   It should be possible to call veswInit, veswTerm and then call veswInit
 *   again. Similarly, a reference count should be kept such that veswInit,
 *   veswInit, veswTerm, veswTerm works as well. The actual success of these
 *   activities is a function of how well the server vendor has implemented
 *   these calls.
 *
 * Notes on Oracle's implementation:
 *   *** VERY IMPORTANT ***
 *   Once veswInit() is called, another vesw function will have to be
 *   called at least once every thirty seconds or the media net connection
 *   with the video server will be timed out. veswIdle() will fit this
 *   bill nicely. See mx/pub/mn.h for details.
 *
 *   It is recommended that veswInit() be called during the program's main
 *   initialization phase, since if veswInit() fails due to low memory, it
 *   will panic and possibly fault the parent process. (Sorry.) See
 *   mx/pub/ys.h for details. The init/term/init behavior has historically
 *   been problematic on many platforms in our implementation.
 *
 * Notes for other server vendors:
 *   You need not do anything with the ysCtx buffer if you do not wish.
 *   Oracle's code structure doesn't allow malloc to be called until a
 *   few initialization details are taken care of in a nonrelocatable block
 *   of memory, which is a restriction you probably don't have.
 */
typedef enum veswLayer
{
  veswLayerSuccess = 0,
  veswLayerInternal,      /* system layer - no attempt to contact server */
  veswLayerNetwork,       /* establishing a network connection to server */
  veswLayerObject         /* establishing an application level connection */
} veswLayer;
veswLayer  veswInit(ub1 *ysCtx, CONST char *progNm);
void       veswIdle(ub1 *ysCtx);
veswLayer  veswTerm(ub1 *ysCtx);

/* Name:  veswLastError
 * Func:  get a description of the last error that occurred
 * Returns:
 *   Pointer to the string.
 */
CONST char *veswLastError(veswCtx *ctx);

/*
 * Name:  veswNewFeed
 * Desc:  open a connection for a tagged file upload to the video server
 * Inputs:
 *   baseName  -- Identifier for the feed, typically used as the prefix
 *                for files created, default name for logical content, etc.
 *                The name may need to conform to different naming standards
 *                depending on the video server the encoder is talking to.
 *                For instance, the format for Oracle Video Server is
 *                "/mds/volumeName/feedName", which then gets the appropriate
 *                suffix added base on compression type (.mpg, .m2t, .rk)
 *   rolling   -- FALSE indicates a "one-step encode" of fixed length
 *                content, such as a commercial or a movie. TRUE indicates
 *                a "continuous realtime feed", where the encode will
 *                continue indefinitely, and the server is expected to
 *                maintain a rolling buffer of the last (duration) portion
 *                of the feed.
 *   duration  -- Expected duration of content (or amount of content to
 *                buffer on the server for a continuous realtime feed).
 *                Used by the server to allocate storage resources.
 *                The server may choose to close the feed session after
 *                the amount of data specified by (bitrate * duration)
 *                has been delivered.
 *   bitrate   -- Average bitrate for encoded content, e.g. 1536000
 *                bits/second. The amount of variability in the bitrate
 *                that can be tolerated is a function of the video server.
 *   I,P,Bs    -- Target number of frames of said type per minute; often,
 *                I-frames/min is roughly 120 and the others are zero.
 *                Potentially used to allocate server resources.
 *   hdr/fmt   -- Struct describing the encoded content. See ves.idl.
 *                If the PrepFeed call is being made, the ves_format
 *                of the stream still needs to be disclosed.
 * Outputs:
 *   newCtx    -- must be passed to all other vesw calls for that feed
 * Returns:
 *   FALSE if the operation completed successfully and has nothing to report.
 *   TRUE if the operation failed, in which case details can be obtained by
 *   calling veswLastError().
 * Notes:
 *   This call makes a number of roundtrips (ideally one) to the server
 *   as the data connections are made, which can take a few seconds,
 *   depending on the video server being used and the network between the
 *   encoder and the server.
 *
 *   Using the PrepFeed/SendHdr combo has the same effect as NewFeed. This
 *   can be useful if the ves_hdr  info has to be extracted from the feed
 *   after encoding has begun. Calling SendTags before calling SendHdr in
 *   this case will get you an error and most likely terminate your feed
 *   session. Only one header can be sent for each feed.
 */
boolean veswNewFeed (veswCtx **newCtx, CONST char *baseName,
                     boolean rolling, ub4 bitrate, CONST ves_time *duration,
                     ub4 eyes, ub4 pees, ub4 bees, CONST ves_hdr *hdr);
boolean veswPrepFeed(veswCtx **newCtx, CONST char *baseName,
                     boolean rolling, ub4 bitrate, CONST ves_time *duration,
                     ub4 eyes, ub4 pees, ub4 bees, ves_format fmt);
boolean veswSendHdr (veswCtx *ctx, CONST ves_hdr *hdr);

/* Name:  veswClose
 * Func:  shutdown feed gracefully and release resources
 * Input:
 *   ctx -- Context returned by veswNewFeed
 * Returns:
 *   FALSE if everything went according to plan, TRUE if an error
 *   occurred. The context is gone regardless of the return value,
 *   so you cannot call veswLastError in response.
 */
boolean veswClose(veswCtx *ctx);

/* Name:  veswSendData
 * Func:  ship encoded content up to the video server
 * Inputs:
 *   ctx   -- Context from veswNewFeed or veswPrepFeed
 *   buf   -- Contiguous block of data to be sent up
 *   count -- Number of bytes to send
 * Returns:
 *   FALSE if no errors occurred; TRUE if the call failed.
 *   Call veswLastError() for the details. In any case, the
 *   session is now invalid and you'll need to call veswClose().
 * Notes on Oracle's implementation:
 *   If you are calling sendTags with large blocks of data (greater than
 *   32kB) in a program that does not use ysThrInit, you will need to
 *   call veswIdle periodically in order to yield some time to the
 *   network drivers (to pump data to the server).
 *
 *   This function only blocks until the buffer has been copied into
 *   outgoing buffers. This isn't a problem as long as the chunks are
 *   smaller than the buffer size and data is pumping out regularly
 *   due to veswIdle calls and a network with plenty of headroom. If
 *   all of the transport send buffers are full, this call blocks until
 *   enough data has been sent to allow the new data to be copied.
 *   For this reason, it is strongly recommended that encoders and
 *   servers be kept on a quiet, preferably private, network with lots
 *   of headroom.
 */
boolean veswSendData(veswCtx *ctx, CONST dvoid *buf, size_t count);

/* Name:  veswSendTags
 * Func:  send information about individual frames to the video server
 * Input:
 *   ctx    -- Context from veswNewFeed or veswPrepFeed
 *   tagBuf -- Contiguous block of tags to send
 *   count  -- Number of tags in tagBuf (not the number of bytes)
 * Returns:
 *   FALSE if no errors occurred; TRUE if the call failed.
 *   Call veswLastError() for the details. In any case, the
 *   session is now invalid and you'll need to call veswClose().
 */
boolean veswSendTags(veswCtx *ctx, CONST ves_tag *tagBuf, ub4 count);

/* Name:  veswSendBlob
 * Func:  send non-streaming data associated with the stream to the server
 * Input:
 *   ctx      -- Context from veswNewFeed or veswPrepFeed
 *   fileName -- Suggested name for storage on the video server
 *   dataType -- Type of information contained in the blob
 *   desciption -- More detailed description for an operator to examine
 *   start    -- The first portion of the feed this data applies to
 *   end      -- Last relevant part of the video for this blob
 *   more     -- TRUE if the blob will be transmitted as a series of pieces
 *   dataLen  -- Size of the data pointed to by data
 *   data     -- First chunk of the data
 *   blobOR   -- If more is FALSE, blobOR should be NULL. If it is TRUE,
 *               then blobOR should be a pointer to a object reference,
 *               for instance &(CORBA_object)blobRef.
 * Output:
 *   blobOR   -- Object reference for calls to veswContBlob
 * Returns:
 *   TRUE if the data was stored on the server. FALSE if this dataType is
 *   being discarded by the server or an error occurred.
 * Notes:
 *   Actual blob support on the server is optional. Server vendors may
 *   choose to implement veswSendBlob as { return FALSE; }. The negotiation
 *   of standards for particular kinds of blob data is outside the scope
 *   of this standard.
 */
boolean veswSendBlob(veswCtx *ctx, CONST char *fileName,
                     CONST char *dataType,
                     CONST char *description,
                     CONST ves_time *start, CONST ves_time *end,
                     boolean more, ub4 dataLen, CONST dvoid *data,
                     /* ves_blob* */dvoid *blobOR);
/* Name:  veswContBlob
 * Func:  send non-streaming data associated with the stream to the server
 * Input:
 *   blobOR   -- Object reference obtained from veswSendBlob
 *   more     -- If FALSE, the server will destroy the object after the
 *               data from this call is stored.
 *   dataLen  -- Size of the data pointed to by data
 *   data     -- Data buffer
 * Returns:
 *   TRUE if the data was stored on the server.
 */
boolean veswContBlob(veswCtx *ctx, /* ves_blob */ dvoid *blobOR,
                     boolean more, ub4 dataLen, CONST dvoid *data);

#endif /* VESW_ORACLE */
