#ifndef MKCFW_ORACLE
#define MKCFW_ORACLE
/* mkcfw.h
 * Copyright (C)1996 Oracle Corporation
 *
 * This file includes wrapper functions around the mkcf CORBA interface
 * that hide the use of media net streams for the data transportation
 * layer. The goal is that this layer can be used unmodified, however,
 * users not implementing Oracle yse style errors may wish to modify
 * the catchall clauses to perform additional error reporting.
 *
 * 12/04/96 dweaver  Genericize blob interface, add some lessons learned.
 * 05/07/96 dweaver  creation
 */

/* define MkcfwRethrowErrors to have yse errors rethrown. */

#ifndef SYSX_ORACLE
# include <sysx.h>    /* Oracle datatypes */
#endif

#ifndef MKD_ORACLE
# include <mkd.h>     /* CORBA base types for Oracle video handlers */
#endif

#ifndef MKCF_ORACLE
# include <mkcf.h>    /* CORBA types for feed interface */
#endif

externref ysidDecl(MKCFW_EX_FAILURE);
typedef struct mkcfwCtx  mkcfwCtx;

/* Name:  mkcfwInit, mkcfwIdle, mkcfwTerm
 * Desc:  initialize, maintain and teardown the media net object environment
 * Input:
 *   ysCtx -- a pointer to a block of memory of size SYSX_OSDPTR_SIZE bytes.
 *        *** This memory must persist until mkcfwTerm() is called. ***
 * Notes:
 *   *** VERY IMPORTANT ***
 *   Once mkcfwInit() is called, another mkcfw function will have to be
 *   called at least once every thirty seconds or the media net connection
 *   with the video server will be timed out. mkcfwIdle() will fit this
 *   bill nicely. See mx/pub/mn.h for details.
 *
 *   It is recommended that mkcfwInit() be called during the program's main
 *   initialization phase. If mkcfwInit() fails due to low memory, it
 *   will panic and hose the parent process. (Sorry.) See mx/pub/ys.h for
 *   details.
 */
typedef enum mkcfwLayer
{
  mkcfwLayerSuccess = 0,
  mkcfwLayerYs,               /* system layer */
  mkcfwLayerMn,               /* transport layer */
  mkcfwLayerYo                /* object layer */
} mkcfwLayer;
mkcfwLayer mkcfwInit(ub1 *ysCtx);
void mkcfwIdle(void);
mkcfwLayer mkcfwTerm(ub1 *ysCtx);

/*****************************************************************************
 * This is the synchronous version of the interface. It is easier to use,
 * but makes roundtrips to the server for all calls other than SendData,
 * and even SendData can block if the network is backing up, so it is not
 * suitable for single-threaded realtime processes. If your application
 * is threaded, all of the calls to this interface need to come from the
 * same thread.
 ****************************************************************************/

/*
 * Name:  mkcfwNewFeed
 * Desc:  open a connection for a tagged file upload to the video server
 * Inputs:
 *   baseName  -- mds style filename; extensions added by server
 *   hours,etc -- length of incoming feed
 *   I,P,Bs    -- target number of frames of said type per minute
 *   bitrate   -- bitrate for encoded content, e.g.1536000 bps
 *   tagLag    -- deprecated; sending zero is recommended
 *   hdr       -- struct describing the encoded content. See mkcf.idl
 * Outputs:
 *   newCtx    -- must be passed to all other mkcfw calls for that feed
 * Returns:
 *   FALSE if the operation completed successfully and has nothing to report
 *   TRUE if the operation failed; details can be obtained by calling
 *     mkcfwLastError(). Note that TRUE will never be returned if error
 *     throwing has been enabled.
 * Notes:
 *   mkcfwCreate is a wrapper around mkcfwNewFeed that simply fills in an
 *   mkd_pos structure. It is expected to be removed in a future version
 *   of this interface. Note that the position of the bitrate parameter
 *   changes between calls.
 *
 *   This call makes a few roundtrips to the server as the data connections
 *   are made, which can take a couple seconds. Using the PrepFeed/SendHdr
 *   combo has the same effect as NewFeed, but almost all of the delay is
 *   contained in the PrepFeed call. This can be useful if the mkcf_hdr
 *   info has to be extracted from the feed after encoding has begun.
 *   Calling SendTags before calling SendHdr in this case will cost you
 *   many karma points (and get you an exception for your trouble).
 */
boolean mkcfwNewFeed (mkcfwCtx **newCtx, CONST char *baseName,
                      CONST mkd_pos *length, ub4 bitrate,
                      ub4 eyes, ub4 pees, ub4 bees,
                      ub4 tagLag, CONST mkcf_hdr *hdr);
boolean mkcfwCreate  (mkcfwCtx **newCtx, CONST char *baseName,
                      ub1 hours, ub1 minutes, ub1 seconds, ub1 hundredths,
                      ub4 eyes, ub4 pees, ub4 bees, ub4 bitrate,
                      ub4 tagLag, CONST mkcf_hdr *hdr);
boolean mkcfwPrepFeed(mkcfwCtx **newCtx, CONST char *baseName,
                      CONST mkd_pos *length, ub4 bitrate,
                      ub4 eyes, ub4 pees, ub4 bees, mkcf_format fmt);
boolean mkcfwSendHdr (mkcfwCtx *ctx, CONST mkcf_hdr *hdr);

/* Name:  mkcfwClose
 * Func:  shutdown feed gracefully and release resources
 * Input:
 *   ctx -- context returned by mkcfwCreate
 * Returns:
 *   FALSE if everything went according to plan, TRUE if something weird
 *   happened. The context is gone regardless of the return value, so you
 *   cannot call mkcfwLastError in response.
 */
boolean mkcfwClose(mkcfwCtx *ctx);

/* Name:  mkcfwSendData
 * Func:  ship encoded content up to the video server
 * Inputs:
 *   ctx   -- context from mkcfwCreate
 *   buf   -- contiguous block of data to be sent up
 *   count -- number of bytes to send
 * Returns:
 *   FALSE if no errors occurred; TRUE if something wretched happened.
 *   Call mkcfwLastError() for the horrific details. In any case, the
 *   session is dead and you'll need to call mkcfwClose().
 * Notes:
 *   This function only blocks until the buffer has been copied into
 *   media net buffers. This isn't a problem as long as the chunks are
 *   smaller than the buffer size and data is pumping out regularly
 *   due to mkcfwIdle calls and a network with plenty of headroom. If
 *   all of the media net send buffers are full, this call blocks until
 *   enough data has been sent to allow the new data to be copied. This
 *   rather unfriendly behavior is a known bug; the workaround is to use
 *   a quiet network with lots of headroom.
 */
boolean mkcfwSendData(mkcfwCtx *ctx, CONST dvoid *buf, size_t count);

/* Name:  mkcfwSendTags
 * Func:  send information about individual frames to the video server
 * Input:
 *   ctx    -- context from mkcfwCreate
 *   tagBuf -- contiguous block of tags to send
 *   count  -- number of tags in tagBuf(not bytes)
 * Returns:
 *   FALSE if no errors occurred; TRUE if something wretched happened.
 *   Call mkcfwLastError() for the horrific details. In any case, the
 *   session is dead and you'll need to call mkcfwClose().
 * Notes:
 *   *** VERY IMPORTANT ***
 *   If you are calling sendTags with large blocks of data (greater than
 *   32kB) in a program that does not use ysThrInit, you will need to
 *   call mkcfwIdle periodically in order to give media net a chance to
 *   flush data to the server. Note that if you call mkcfwIdle before
 *   calling mkcfwInit, you will core dump.
 */
boolean mkcfwSendTags(mkcfwCtx *ctx, CONST mkcf_feed_tag *tagBuf, ub4 count);

/* Name:  mkcfwLastError
 * Func:  get a description of the last error that occurred
 * Returns:
 *   Pointer to the string.
 */
CONST char *mkcfwLastError(mkcfwCtx *ctx);

/*****************************************************************************
 * This is the threaded interface. It will spawn an OMS (cooperative user
 * level) thread where all the mkcfw operations are performed and handle
 * the passing of information from the calling application to the thread
 * and back. It is suitable for an otherwise single-threaded realtime
 * application. It is imperative that you call mkcfwYield() many times
 * each second if you use this interface, since each command will yield
 * back to the calling process several times before completing. None of
 * these calls should ever take more than a few milliseconds to complete,
 * with the possible exception of mkcfwThrTerm.
 *
 * The conceit of this method is that all commands are pushed onto a
 * pending command queue. The commands are then serially processed in a
 * cooperative thread, and the output made available after the command
 * has completed. Note that it isn't a bad idea to check on the number
 * of items in the command queue occasionally (or just keep track of it
 * yourself) to make sure things aren't backing up.
 *
 * A general note about the errorStr field in all of the structures:
 * If retval == TRUE, the errorStr is allocated via "ysmGlbAlloc"; you
 * will need to call ysmGlbFree() to release the memory. errorStr is
 * not explicitly nulled if retval is FALSE, so if you want to rely on
 * that you will need to null the value before pushing the command.
 ****************************************************************************/


/* This maps to the "mkcfwNewFeed" call, unless
 * hdr->vend == mkcf_vendorPrepareOnly, in which case hdr->fmt must
 * still be valid and you will need to add a header command before
 * sending any tags. Any unused fields in the hdr need to be nulled
 * out; in particular, careless nonsense in the _length and _buffer
 * fields of sequences will lead to seg faults (or memory access
 * violations, if your OS prefers that term). 
 */
typedef struct mkcfwCrt
{
  char     *baseName;
  mkd_pos  *length;
  ub4       bitrate;
  ub4       eyes;
  ub4       pees;
  ub4       bees;
  mkcf_hdr *hdr;
  boolean   retval;
  char     *errorStr;
} mkcfwCrt;

/* This maps to the "mkcfwSendHeader" call. Note that you can only send
 * this once, and only if the mkcfwCrt structure you pushed claimed to
 * be a PrepareOnly. */
typedef struct mkcfwHdr
{
  mkcf_hdr *hdr;
  boolean   retval;
  char     *errorStr;
} mkcfwHdr;

/* Maps to "mkcfwSendData". Note that the command completes as soon as
 * the data has been copied to transport buffers, and may not have hit
 * the wire yet. */
typedef struct mkcfwData
{
  dvoid    *buf;
  size_t    count;
  boolean   retval;
  char     *errorStr;
} mkcfwData;

/* Maps to "mkcfwSendTags". */
typedef struct mkcfwTags
{
  mkcf_feed_tag  *tagBuf;
  ub4             count;
  boolean         retval;
  char           *errorStr;
} mkcfwTags;

typedef struct mkcfwCls
{
  boolean   retval;
} mkcfwCls;

typedef enum
{
  mkcfwTypeCreate = 1,
  mkcfwTypeSendHdr,
  mkcfwTypeSendData,
  mkcfwTypeSendTags,
  mkcfwTypeClose
} mkcfwType;

typedef struct mkcfwCmd
{
  mkcfwType    cmd_mkcfwCmd;
  union
  {
    mkcfwCrt   crtArgs;
    mkcfwHdr   hdrArgs;
    mkcfwData  datArgs;
    mkcfwTags  tagArgs;
    mkcfwCls   clsArgs;
  }            args_mkcfwCmd;
} mkcfwCmd;

typedef struct mkcfwZone mkcfwZone;

/* Name:  mkcfwThrInit
 * Description: Create a workspace for asynchronous feed access
 * Returns:
 *   A context pointer to pass to all other async functions.
 * Notes:
 *   If your program supports multiple simultaneous feeds, you'll need
 *   to get an mkcfwZone pointer for each one. Note that mkcfwZones are
 *   not thread safe... because if your program is already threaded you
 *   should really be using the synchronous calls in a single thread.
 */
mkcfwZone *mkcfwThrInit(void);

/* Name:  mkcfwEnqCmd
 * Description: Queue up a new command
 * Inputs:
 *   thrCtx -- pointer returned from mkcfwThrInit
 *   newCmd -- description of the operation to be performed
 * Returns:
 *   FALSE if the command looked fairly legal, TRUE if there was something
 *   just blatantly wrong.
 * Notes:
 *   Once mkcfwEnqCmd is called, you may not do anything with the memory
 *   pointed to by newCmd until the command completes and is popped from
 *   mkcfwDeqCmd. DeqCmd will hand back the original pointer passed into
 *   EnqCmd, at which point you can recycle the memory.
 *
 *   Enqueuing any commands after pushing a close command is very bad. Or
 *   more to the point, pointless; the mkcfw thread exits after the close
 *   command completes -- the commands will sit in the pending queue
 *   indefinitely.
 */
boolean    mkcfwEnqCmd(mkcfwZone *thrCtx, mkcfwCmd *newCmd);

/* Name:  mkcfwYield
 * Description: manage data between threads and let mkcfw operate a little bit
 * Inputs:
 *   thrCtx -- pointer returned from mkcfwThrInit
 */
void       mkcfwYield(mkcfwZone *thrCtx);

/* Name:  mkcfwDeqCmd
 * Description: Get return values from a completed command, if any have done so
 * Inputs:
 *   thrCtx -- pointer returned from mkcfwThrInit
 * Returns:
 *   NULL if no commands are on the output queue or the pointer passed into
 *   EnqCmd, with appropiately set retval and errorStr.
 * Notes:
 *   If the command's retval is TRUE, you will need to use ysmGlbFree to
 *   release the memory used by the errorStr.
 *
 *   You have to dequeue all of the commands off of the queue, or you will
 *   surely leak memory like a sieve.
 */
mkcfwCmd  *mkcfwDeqCmd(mkcfwZone *thrCtx);

/* Name:  mkcfwQLength
 * Description: A way to check on the mkcfw backlog
 * Inputs:
 *   thrCtx -- pointer returned from mkcfwThrInit
 * Returns:
 *   -1 if the mutex wasn't available, else the total number of commands
 *   that haven't begun to be processed yet.
 */
sb4        mkcfwQLength(mkcfwZone *thrCtx);

/* Name:  mkcfwThrTerm
 * Description: Free the thread's resources
 *   In normal operation, the close command should be performed before
 *   calling the mkcfwThrTerm to terminate the slave thread. 
 *   If 'force' is set to FALSE, then this termination will check for
 *   the completion of the close command.  It will return FALSE if the
 *   allocated resources has been released, otherwise it will return TRUE. 
 *   If the return value is TRUE, then the mkcfwThrTerm should be called
 *   again at a later time.
 *   If 'force' is set to TRUE, then mkcfwThrTerm will attempt to force the
 *   slave thread to exit.  It will return FALSE if the slave thread is
 *   terminated, otherwise it will return TRUE.  In either case, the 
 *   thread resources are released.  However, this operation may cause
 *   memory leak and is not recommended for normal operation.
 *   
 * Inputs:
 *   thrCtx -- pointer returned from mkcfwThrInit
 *   force  -- if FALSE, the action will be taken only if a close command
 *             has already been processed.
 * Returns:
 *   TRUE if the context was NOT destroyed.
 */
boolean    mkcfwThrTerm(mkcfwZone *thrCtx, boolean force);

#endif /* MKCFW_ORACLE */
