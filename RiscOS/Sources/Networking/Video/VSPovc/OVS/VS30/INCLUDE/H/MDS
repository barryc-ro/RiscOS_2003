/****************************************************************************
 * Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * mds.h - Media Data Store Public Interface
 *
 * DESCRIPTION:
 * This file must be included by any module that wants to access files
 * contained within the Media Data Store (MDS).  MDS is composed of
 * one or more servers that can manage multiple volumes.  Volumes are
 * similar to physical filesystems with the additional availibility of
 * striping, RAID5 protection, hot swapping, hot sparing, etc.  Each
 * volume can support hundreds of disks.  Each file is striped across all
 * available disks in the volume.
 * 
 * HOST FILES:
 * The MDS interface can also be used by clients to transparently access 
 * the local (host) filesystem.  A filename can map to either an MDS file or
 * a file on the host system.  Meta-data operations (such as file deletion, 
 * locking, etc.) are generally not available on host files.  Additionally, 
 * any host IO will block the process on most platforms.
 *
 * The MDS public interface is also composed of:
 *   mdsnm.h   - Routines to manipulate MDS filenames, including 
 *               shell-like wildcard expansion.
 *   mdsblob.h - Specialized blob-only interface for set-top box clients.
 *   mdsex.idl - Additional public MDS exceptions.
 *
 * All blocking functions described within this module are available 
 * in asynchronous and synchronous forms unless otherwise noted.  If a
 * NULL event is passed to any asynchronous function a sempahore
 * will be implicitly created and returned.
 */
  
#ifndef MDS_ORACLE
#define MDS_ORACLE
 
#ifndef YS_ORACLE
# include <ys.h>
#endif

#ifndef MDSNM_ORACLE
# include <mdsnm.h>                          /* String constants for mdsFile */
#endif

#ifndef MDSEX_ORACLE
# include <mdsex.h>                 /* Included as a convenience for callers */
#endif

#ifndef MKD_ORACLE
# include <mkd.h>                  /* for mkd_wall (calendar time) structure */
#endif

/* Opaque public types */
typedef struct mdsFile mdsFile;
typedef struct mdsBw mdsBw;

/* Name: mdsInit() / mdsTerm()
 * Synopsis:
 *	 void mdsInit();
 *       void mdsTerm();
 * Function:
 *       mdsInit() initializes an MDS client for accesses to the 
 *       MDS file system.  It is the default initialization routine 
 *       and must be called before any other MDS functions.
 *
 *	 The user may call both mdsInit() and mdsBlobInit() - see mdsblob.h
 *       for details.  However, the user must call mdsInit() before 
 *       mdsBlobInit().
 *
 *       mdsTerm() closes any MDS server connections and frees the
 *       the associated resources.
 * Input:
 * Output:
 * Returns:
 * Exceptions:
 *	MDS_EX_IO
 */
void mdsTerm( void );

/*****************************************************************************/
/*                            MDS FILE OPERATIONS                            */
/*****************************************************************************/

/* mdsFlg - optional MDS flags
 *
 * Flags           Interpretation
 * -----           ------------------------------------------------------------
 * MdsFlgWrt       Open file with read-write permission
 * MdsFlgDel       File may be deleted.  Normally deleted files are ignored.
 * MdsFlgSeq       Sequential access mode.  For reads, MDS will discard each 
 *                 buffer as soon as data is read to minimize memory usage.
 *		   For writes, MDS will initiate a flush of each raid stripe
 *		   as soon as data is written.
 * MdsFlgUbw       Unlimited bandwidth.  Client is trusted to not exceed
 *                 specified bw rate.
 * MdsFlgPrv       Client is allowed to open read-only files for writing.
 *                 Used by MDS clients trusted to preserve file integrity 
 *                 such as mdsrebuild, & mdsdefrag.
 * MdsFlgRtm       File is accessed in realtime. 
 * MdsFlgPxy       File access is via the MDS proxy server.
 * MdsFlgHsm       File may be automatically migrated in from tertiary 
 *                 storage.  Client must be prepared to potentially wait
 *                 a long time for operations to complete.
 * MdsFlgSng       Single stripe access. Instead of accessing the file
 *                 sequentially and cycling through all of the RAID sets,
 *                 only one set is going to be hit. This means that the
 *                 bandwidth restrictions need to account for this
 *                 heterogeneous access pattern to prevent over-use of the
 *                 afflicted RAID set. Used by mdsrebuild.
 *
 * The following flags, although defined here, are *not* public and
 * should not be used externally:
 *     MdsFlgUbw, MdsFlgPrv, MdsFlgRtm, MdsFlgSng
 */
#define MdsFlgWrt (ub4)0x1
#define MdsFlgDel (ub4)0x2
#define MdsFlgSeq (ub4)0x8
#define MdsFlgUbw (ub4)0x10
#define MdsFlgPrv (ub4)0x20
#define MdsFlgRtm (ub4)0x40
#define MdsFlgPxy (ub4)0x80
#define MdsFlgHsm (ub4)0x100
#define MdsFlgSng (ub4)0x200 

/* mdsBw - optional MDS bandwidth specifications
 * 
 * Public clients cannot perform explicit bandwidth management 
 * and should use the symbol 'MdsDfltBitRate' on all mdsOpen()/mdsCreate()
 * calls.  
 */
#define MdsDfltBitRate    ((mdsBw *)0)


/* Name: mdsCreate() - create file
 * Synopsis:
 *       mdsFile *mdsCreate( CONST char *name, CONST sysb8 *len, 
 *                           mdsBw *bwtkn, ub4 flags );
 *       ysevt   *mdsCreate_nw( CONST char *name, CONST sysb8 *len,
 *                              mdsBw *bwtkn, ub4 flags, ysevt *uevt );
 * Function:
 *      mdsCreate() creates a file called 'name' of length 'len'.  It 
 *      obtains a file descriptor to use for all subsequent accesses to 
 *      this file.  Newly created files are always opened in read-write mode.
 * Input:
 *      name  - name of the file to create
 *      len   - maximum number of bytes to allocate for this file.
 *              Files cannot grow.  Files may be truncated with 
 *              mdsTruncClose.
 *      bwtkn - bandwidth token or MdsDfltBitRate for volume default
 *      flags - see MdsFlg definitions above.
 * Output:
 * Returns:
 *      mdsCreate() returns the file descriptor for file 'name'.  
 *	mdsCreate_nw() returns the event that will be triggered upon 
 *      completion.  The file descriptor will be returned when the 
 *      event is triggered.  
 * Exceptions:
 *	MDS_EX_FILEEX
 */

 
/* Name: mdsOpen() - open file
 * Synopsis:
 *       mdsFile *mdsOpen( CONST char *name, mdsBw *bwktn, ub4 flags );
 *       ysevt   *mdsOpen_nw( CONST char *name, mdsBw *bwtkn, ub4 flags, 
 *                            ysevt *uevt );
 * Function:
 *      mdsOpen() opens the requested file and obtains a file descriptor 
 *      to use for all subsequent accesses to this file.  
 * Input:
 *      name  - name of the file to open
 *      flags - see MdsFlg definitions above.
 *      bwtkn - bandwidth token or MdsDfltBitRate for volume default.
 * Output:
 * Returns:
 *      mdsOpen() returns the file descriptor for file 'name'.
 *	mdsOpen_nw() returns the event that will be triggered upon completion.
 *	The file descriptor will be returned when the event is triggered.  
 * Exceptions:
 *	MDS_EX_FILEEX
 */
 

/* Name: mdsClose(), mdsTruncClose() - close a file
 * Synopsis:
 *      void   mdsTruncClose( mdsFile *fp, CONST sysb8 *newLen );
 *      ysevt *mdsTruncClose_nw(mdsFile *fp, CONST sysb8 *newLen, ysevt *uevt);
 *      void   mdsClose( mdsFile *fp );
 *      ysevt *mdsClose_nw( mdsFile *fp, ysevt *uevt );
 * Function:
 *      Closes file and frees up any associated data structures.  
 *      mdsTruncClose() can be used to truncate the file to 'newLen' bytes.
 *      If 'newLen' is set to the symbol 'MdsEof' then the file is 
 *      truncated to the high water mark, the highest position ever written 
 *      to.  This is the only method for changing the size of an MDS file, and
 *      truncation only applies to MDS files.  Most clients that create
 *      files will initially overestimate their size at creation time,
 *      write to the file for some time, and then use mdsTruncClose
 *      to truncate the file at the last position written to.
 * Input:
 *      fp     - file pointer returned by mdsOpen or mdsCreate()
 *      newLen - new length for the file
 * Output:
 * Returns:
 * Exceptions:
 *	MDS_EX_IO
 */
#define MdsEof            (mdsGetEof())


/* Name: mdsLock(), mdsUnlock() - lock/unlock an MDS file
 * Synopsis:
 *       void   mdsLock( CONST char *name );
 *       ysevt *mdsLock_nw( CONST char *name, ysevt *uevt ); 
 *       void   mdsUnlock( CONST char *name );
 *       ysevt *mdsUnlock_nw( CONST char *name, ysevt *uevt );
 * Function:
 *      mdsLock() marks a file in read-only mode.  Subsequent attempts
 *      to open the file read-write will fail with the exception
 *      MDS_EX_FILEEX.  The operation is idempotent.
 *  
 *      mdsUnlock() unlocks a file.  This operation is also idempotent.
 *
 *      Locking is used to prevent inadvertent modification of read-only
 *      data, and is provided as a convenience to the user.  There is
 *      no ownership of files, and no permissions associated with a lock.
 *      
 *      This operation is not available on host files.
 * Input:
 *      name - file name
 * Output:
 * Returns:
 * Exceptions:
 *      MDS_EX_FILEEX
 */


/* Name: mdsRemove(), mdsUnremove() - remove/unremove MDS files
 * Synopsis:
 *      void   mdsRemove( CONST char *name, boolean forever );
 *      ysevt *mdsRemove_nw( CONST char *name, boolean forever, ysevt *uevt );
 *      void   mdsUnremove( CONST char *name );
 *      ysevt *mdsUnremove_nw( CONST char *name, ysevt *uevt );
 * Function:
 *      mdsRemove() marks a file deleted if 'forever' is set to FALSE.
 *      Subsequent attempts open the file for reading will fail unless 
 *      the MdsFlgDel flag is specified.  If 'forever' is set to TRUE,
 *      then the file is deleted immediately and the space reclaimed.
 *      
 *      Files deleted with 'forever' set to FALSE may be restored via 
 *      mdsUnremove().  However, the system periodically reclaims 
 *      the space associated with deleted files.  When this happens a 
 *      deleted file is removed from the system entirely and cannot 
 *      be reclaimed via mdsUnremove().
 * 
 * Input:
 *      name    - file name
 *      forever - TRUE if file should be permanently deleted.
 * Output:
 * Returns:
 * Exceptions:
 *      MDS_EX_FILEEX
 */


/* Name: mdsRename() - rename an MDS file
 * Function:
 *      Renames an MDS file.  The file must be read-write, and
 *      not open for writing by any other client.
 * Input:
 *      oldNm  - old MDS name
 *      newNm  - new MDS name
 * Output:
 * Returns:
 * Exceptions:
 *      MDS_EX_FILEEX
 */
void   mdsRename( CONST char *oldNm, CONST char *newNm );
ysevt *mdsRename_nw( CONST char *oldNm, CONST char *newNm, ysevt *uevt );

/*****************************************************************************/
/*                           MDS IO OPERATIONS                               */
/*****************************************************************************/

/* Name: mdsRead() - read from file
 * Function:
 *      mdsRead reads 'len' bytes from the current file offset and copies
 *      the data into 'buf'.  
 * Input:
 *      fp     - file pointer returned by mdsOpen() or mdsCreate()
 *	buf    - buffer in which to load data
 *	off    - starting offset of data to read
 *      len    - number of bytes of data to read
 *      uevt   - event to trigger upon completion.  If null, then mdsRead_nw
 *               will create and return a semaphore.
 * Output:
 *	None
 * Returns:
 *	mdsRead returns the number of bytes of data successfully read.  The 
 *	return value will be less than 'len' when reading past EOF.
 *
 *	mdsRead_nw returns the event that will be triggered upon completion.
 *	The number of bytes of data successfully read will be returned when
 *	the event is triggered.
 * Exceptions:
 *	MDS_EX_IO
 */
size_t mdsRead( mdsFile *fp, dvoid *buf, size_t len );
ysevt *mdsRead_nw( mdsFile *fp, dvoid *buf, CONST sysb8 *off, size_t len, 
		   ysevt *uevt );

/* Name: mdsWrite() - write to file
 * Function:
 *      mdsWrite() writes 'len' bytes from 'buf' to the current file offset.
 *	mdsWrite_nw() is the asynchronous version of mdsWrite().  It also 
 *      requires a file offset 'off' and that 'buf' remain valid and 
 *      unaltered until the operation completes.
 * Input:
 *      fp     - file pointer returned by mdsOpen or mdsCreate
 *	buf    - buffer from which to load data
 *	off    - starting offset of data to write to
 *      len    - number of bytes of data to write
 *      uevt   - event to trigger upon completion.  If null, then mdsWrite_nw
 *               will create and return a semaphore.
 * Output:
 *	None
 * Returns:
 *	mdsWrite() returns the number of bytes of data successfully written.  
 *	The return value will be less than 'len' when writing past EOF.
 *
 *      mdsWrite_nw() returns the event that will be triggered upon 
 *      completion.  The number of bytes of data successfully written 
 *      will be returned when the event is triggered.
 * Exceptions:
 *	MDS_EX_IO, MDS_EX_FILEEX
 */
size_t mdsWrite( mdsFile *fp, dvoid *buf, size_t len );
ysevt *mdsWrite_nw( mdsFile *fp, dvoid *buf, CONST sysb8 *off, size_t len, 
		    ysevt *uevt );

/* Name: mdsFlush() - flush a file
 * Function:
 *      mdsFlush() flushes all dirty buffers corresponding to file 'fp'.  
 *      If 'fp' is NULL, then mdsFlush() flushes buffers corresponding 
 *      to all files.  
 * 
 *      Note to product development:
 *        mdsFlush() will fail if the cache contains dirty
 *        buffers for that file that are pinned by mdsIoFetch().
 * Input:
 *      fp   - file pointer returned by mdsOpen or mdsCreate
 *      uevt - event to trigger upon completion.  If null, then mdsFlush_nw
 *             will create and return a semaphore.
 * Output:
 *      None
 * Returns:
 *      mdsFlush() returns void.
 *	mdsFlush_nw() returns the event that will be triggered upon 
 *      completion.
 * Exceptions:
 *	MDS_EX_IO
 */
void mdsFlush( mdsFile *fp );
ysevt *mdsFlush_nw( mdsFile *fp, ysevt *uevt );


/* Name: mdsSeek() - seek to offset within file
 * Function:
 *      mdsSeek() moves the current file offset pointer to a new offset. 
 *      If the new offset is greater than the size of the file, mdsSeek()
 *      will set the file pointer to the end of the file.  
 * Input:
 *      fp     - file pointer returned by mdsOpen() or mdsCreate()
 *      off    - offset relative to the beginning of the file that the 
 *               current file offset pointer should be set to
 * Output:
 *      newOff - the new file offset.  Normally, this should be equal to 
 *               'off'.  However, if 'off' is greater than the size of the 
 *               file, then it will return the last valid position.  If 
 *		 'newOff' is null, then nothing is returned.
 * Returns:
 *      TRUE if the new offset is equivalent to the offset requested.
 * Exceptions:
 */
boolean mdsSeek( mdsFile *fp, CONST sysb8 *off, sysb8 *newOff );


/* Name: mdsCopySeg() - copy one file into another
 * Function:
 *	Copies a segment of file 'srcFp' to file 'dstFp' in a very efficient
 *	manner.  
 * Input:
 *      srcFp   - file descriptor for file to copy from
 *      dstFp   - file descriptor for file to copy to
 *      srcOff  - offset relative to start of file to start copying from 
 *      srcLim  - offset relative to start of file to stop copying at
 *      dstOff  - offset relative to start of dstFp to start copying to 
 * Output:
 * Returns:
 * Exceptions:
 *	MDS_EX_IO
 */
void mdsCopySeg( mdsFile *srcFp, mdsFile *dstFp, CONST sysb8 *srcOff, 
		 CONST sysb8 *srcLim, CONST sysb8 *dstOff );

/*****************************************************************************/
/*                       MDS FILE ATTRIBUTE OPERATIONS                       */
/*****************************************************************************/

/* Name: mdsFileTypeMds() - determine type of file
 * Synopsis:
 *      boolean mdsFileTypeMds( mdsFile *fp );
 * Function:
 *      Checks if the file pointer corresponds to an MDS file.
 * Input:
 *      fp - file pointer to check
 * Output:
 * Returns:
 *      TRUE if 'fp' corresponds to a native MDS file, FALSE 
 *      if 'fp' refers to a host file.
 * Exceptions:
 */

/* Name: mdsPos(), mdsEof() - return current position or EOF status
 * Synopsis:
 *	void mdsPos( mdsFile *fp, sysb8 *pos );
 *	boolean mdsEof( mdsFile *fp );
 * Function:
 *      mdsPos() returns the current file offset.
 *      mdsEof() returns TRUE if the file offset is at EOF, FALSE otherwise
 * Input:
 *      fp  - file pointer returned by mdsOpen or mdsCreate
 * Output:
 * Returns:
 * Exceptions:
 */

/* Name:  mdsName(), mdsLen(), mdsCreateLen(), mdsCreateTime() - get file
 *	  attributes
 * Synopsis:
 *      char  *mdsName( mdsFile *fp );
 *      void   mdsLen( mdsFile *fp, sysb8 *len );
 *	void   mdsCreateLen( mdsFile *fp, sysb8 *len );
 *      sb4    mdsCreateTime( mdsFile *fp );
 *      mkd_wall *mdsCreateWall( mkd_wall *crtTm, mdsFile *fp );
 * Function:	
 *	Functions to retrieve attributes from an MDS file pointer.  
 *	The following are valid on both host and MDS files:
 *	mdsName()	- Retrieve full filename
 *	mdsLen()        - Return length of file
 *	mdsCreateLen()  - Return length allocated for this file.  If the
 *			  file is in the process of being created, then readers
 *			  can only read up to mdsLen() bytes.  The creator
 *			  can update this length for local clients only via 
 *			  mdsFlushLen().
 *	mdsCreateTime() - Return create time for file (in seconds).
 *	mdsCreateWall() - Return create time for file (in calendar units).
 *                        The passed in mkd_wall buffer is returned as a
 *                        convenience.
 * Input
 *      fp    - valid mdsFile pointer from mdsOpen(), mdsCreate().
 * Output:
 *      len   - length of file
 * Returns:
 *      mdsName() returns the full filename.
 *      mdsCreateTime() returns creation time in seconds -- refer to ystm.h
 * Exceptions:
 */
sb4 mdsCreateTime( mdsFile *fp );
mkd_localWall *mdsCreateWall( mkd_localWall *crtTm, mdsFile *fp );

/* Name: mdsHighWaterMark() - get last position written to
 * Synopsis: 
 *	void mdsHighWaterMark( mdsFile *fp, sysb8 *off );
 * Function:
 *      Returns the high water mark (the greatest offset ever written to)
 *      of the file.  
 * Input:
 *      fp  - file pointer returned by mdsOpen() or mdsCreate()
 * Output:
 *      off - high water mark offset
 * Returns:
 * Exceptions:
 */

/*****************************************************************************/
/*                          MDS PRIVATE DEFINITIONS                          */
/*****************************************************************************/

/* Forwards necessary for mdsFile definition.  mdsFile is exported
 * to support macro attribute calls.
 */
typedef struct mdsCtx       mdsCtx;
typedef struct mdsVol       mdsVol;
typedef struct mdsLck       mdsLck;
typedef struct mdsIo        mdsIo;
typedef struct mdsNtvFile   mdsNtvFile;

/* mdsFile contains all the information for both MDS native and host 
 * files.  It also contains a cache which is used by all synchronous read
 * or write requests to MDS.
 */
struct mdsFile
{
  mdsCtx         *mdsFileGcx;	              /* global context back-pointer */
  char           *mdsFileNm;                     /* full formatted file name */
  ub4             mdsFileId;                                      /* file id */
  mdsVol	 *mdsFileVp;                            /* volume descriptor */
  ysmtx	          mdsFileLck;                             /* file state lock */
  sysb8           mdsFileLen;                                 /* file length */
  sysb8		  mdsFileAlloc;                     /* file length allocated */
  sysb8           mdsFileCurOff;                           /* current offset */
  sysb8           mdsFileHighWaterMark;             /* high water write mark */
  mdsIo          *mdsFileCache;                                /* data cache */
  ub4             mdsFileCacheId;                                 /* line id */
  sysb8           mdsFileCacheOff;                            /* line offset */
  ub1            *mdsFileCacheBuf;                           /* data pointer */
  size_t          mdsFileCacheBytes;          /* bytes after mdsFileCacheBuf */
  mdsBw          *mdsFileBw;                         /* bandwidth descriptor */
  dvoid          *mdsFileHdl;               /* mdsNtvFile, mdsRmtFile, sysfp */
  ub4             mdsFileFlgs;                                      /* flags */

  /* mdsFileFlgs values */
#define MdsFileTypeHost  (ub4)0x1                               /* from host */
#define MdsFileTypeProxy (ub4)0x2                       /* from proxy server */
#define MdsFileWrPrmt    (ub4)0x4                        /* write permission */
#define MdsFileRdPrmt    (ub4)0x8                         /* read permission */
#define MdsFileTrusted   (ub4)0x10                         /* trusted client */
#define MdsFileFlushFail (ub4)0x20                           /* flush failed */
#define MdsFileRealTime  (ub4)0x40                        /* realtime client */
#define MdsFileSeq       (ub4)0x80                 /* sequential access mode */
#define MdsFileUbw       (ub4)0x100                   /* unlimited bandwidth */
#define MdsFileWobbly    (ub4)0x200                /* RAID set-biased access */
};

/* Initialization */
void mdsInitInt(boolean realTime, boolean pump, boolean defer, ub4 numStrms, 
		ub4 minIos, ub4 minMem, ub4 *numIos, ub4 *totMem);

/* Name: mdsCrtOpn() - create or open MDS file
 * Function:
 *      MDS internal function used to acquire a file pointer.
 *      Implements mdsCreate(), mdsOpen(), & mdsCreateAtPos().
 *      This function should only be invoked via the appopriate macro.
 * Input:
 *      nm - Native mds filename to act on.
 *
 *      e_strt    e_len    Meaning
 *      ------    -----    -------
 *      NULL      NULL     open file
 *      NULL     !NULL     create file of specified length
 *     !NULL     !NULL     create file at specified position and length
 * Output:
 * Returns:
 * Exceptions:
 *      MDS_EX_FILEEX
 */
mdsFile *mdsCrtOpn( CONST char *name, CONST sysb8 *e_strt, CONST sysb8 *e_len, 
		   mdsBw *bwtkn, ub4 flags );
ysevt   *mdsCrtOpn_nw( CONST char *name, CONST sysb8 *e_strt, CONST 
		      sysb8 *e_len, mdsBw *bwtkn, ub4 flags, ysevt *uevt );

/* Name: mdsChgMode() - lock, unlock, remove, unremove MDS files
 * Function:
 *      MDS internal function for changing file meta-data information.
 *      This function should only be invoked via the appopriate macro.
 * Input:
 *      nm - Native mds filename to act on.
 * 
 *    lock    undo    forever  Action
 *    ----------------------------------------
 *    TRUE    TRUE    XX       unlock file
 *    TRUE    FALSE   XX       lock file
 *    FALSE   TRUE    XX       unremove file
 *    FALSE   FALSE   TRUE     permanently remove file (can't be unremoved)
 *    FALSE   FALSE   FALSE    just mark file as removed.
 *
 * Output:
 * Returns:
 * Exceptions:
 *      MDS_EX_FILEEX
 */
void   mdsChgMode(CONST char *name, boolean lock, boolean undo, 
		  boolean forever);
ysevt *mdsChgMode_nw(CONST char *name, boolean lock, boolean undo,
		   boolean forever, ysevt *uevt);

/* Close */
void   mdsTruncClose( mdsFile *fp, CONST sysb8 *e_len );
ysevt *mdsTruncClose_nw( mdsFile *fp, CONST sysb8 *e_len, ysevt *uevt );

/* Public synchronous versions */
#define mdsClose(fp)            mdsTruncClose(fp, NULLP(sysb8))
#define mdsLock(nm)             mdsChgMode(nm, TRUE, FALSE, FALSE)
#define mdsUnlock(nm)           mdsChgMode(nm, TRUE, TRUE, FALSE)
#define mdsRemove(nm, forever)  mdsChgMode(nm, FALSE, FALSE, forever)
#define mdsUnremove(nm)         mdsChgMode(nm, FALSE, TRUE, FALSE)
#define mdsOpen(nm, rate, flags) \
           mdsCrtOpn(nm, (sysb8 *)0, (sysb8 *)0, rate, flags)
#define mdsCreate(nm, len, rate, flags) \
           mdsCrtOpn(nm, (sysb8 *)0, len, rate, flags)

/* Public asynchronous versions */
#define mdsClose_nw(fp, uevt) \
           mdsTruncClose_nw(fp, NULLP(sysb8), uevt)
#define mdsLock_nw(nm, uevt) \
           mdsChgMode_nw(nm, TRUE, FALSE, FALSE, uevt)
#define mdsUnlock_nw(nm, uevt) \
           mdsChgMode_nw(nm, TRUE, TRUE, FALSE, uevt)
#define mdsRemove_nw(nm, forever, uevt) \
           mdsChgMode_nw(nm, FALSE, FALSE, forever, uevt)
#define mdsUnremove_nw(nm, uevt) \
           mdsChgMode_nw(nm, FALSE, TRUE, FALSE, uevt)
#define mdsOpen_nw(nm, rate, flags, uevt) \
           mdsCrtOpn_nw(nm, (sysb8 *)0, (sysb8 *)0, rate, flags, uevt)
#define mdsCreate_nw(nm, len, rate, flags, uevt) \
           mdsCrtOpn_nw(nm, (sysb8 *)0, len, rate, flags, uevt)

/* Attribute macros */
#define mdsFileTypeMds(fp) (!bit((fp)->mdsFileFlgs, MdsFileTypeHost))
#define mdsPos(fp, pos) (sysb8set(pos, &(fp)->mdsFileCurOff))
#define mdsEof(fp) (sysb8cmp(&(fp)->mdsFileLen, ==, &(fp)->mdsFileCurOff))
#define mdsName(fp) ((fp)->mdsFileNm)
#define mdsLen(fp, len) (sysb8set(len, &(fp)->mdsFileLen))
#define mdsCreateLen(fp, len) (sysb8set(len, &(fp)->mdsFileAlloc))
#define mdsHighWaterMark(fp, off) sysb8set(off, &(fp)->mdsFileHighWaterMark)

/* Function to acquire EOF definition (mdsids.c) */
CONST sysb8 *mdsGetEof(void);

/* Initialization */
#define mdsInit() \
  mdsInitInt(FALSE, FALSE, FALSE, (ub4)0, (ub4)0, (ub4)0, (ub4 *)0, (ub4 *)0)

#endif /* MDS_ORACLE */
