/* GENERATED FILE
 * ves - public declarations
 * from /vobs/rts/pub/ves.idl
 */

#ifndef VES_ORACLE
#define VES_ORACLE

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif

EXTC_START

/**********  SEQUENCE DECLARATIONS *********/
#ifndef ves_tag_DECLARED
#define ves_tag_DECLARED
typedef struct ves_tag ves_tag;
#endif /* ves_tag_DECLARED */

#ifndef YCIDL_sequence_ves_tag_DEFINED
#define YCIDL_sequence_ves_tag_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  ves_tag* _buffer;
} YCIDL_sequence_ves_tag;
#ifndef YCIDL_sequence_ves_tag_SUPP_FUNCS
#define YCIDL_sequence_ves_tag_SUPP_FUNCS
#endif /* YCIDL_sequence_ves_tag_SUPP_FUNCS */

#endif /* YCIDL_sequence_ves_tag_DEFINED */

/******* NON-SEQUENCE DECLARATIONS *******/
#ifndef ves_vendor_DECLARED
#define ves_vendor_DECLARED
typedef char* ves_vendor;
CONST yotk* ves_vendor__getTC(void);
#ifndef YCTC_ves_vendor
#define YCTC_ves_vendor   (ves_vendor__getTC())
#endif
#endif /* ves_vendor_DECLARED */

#ifndef ves_vendor_SUPP_FUNCS
#define ves_vendor_SUPP_FUNCS
void ves_vendor__free( ves_vendor* val, ysmff ffunc);
void ves_vendor__copy( ves_vendor* dest, ves_vendor* src, ysmaf afunc);
#endif /* ves_vendor_SUPP_FUNCS */

#ifndef ves_vidCmp_DECLARED
#define ves_vidCmp_DECLARED
typedef YCIDL_sequence_ub1 ves_vidCmp;
CONST yotk* ves_vidCmp__getTC(void);
#ifndef YCTC_ves_vidCmp
#define YCTC_ves_vidCmp   (ves_vidCmp__getTC())
#endif
#endif /* ves_vidCmp_DECLARED */

#ifndef ves_vidCmp_SUPP_FUNCS
#define ves_vidCmp_SUPP_FUNCS
void ves_vidCmp__free( ves_vidCmp* val, ysmff ffunc);
void ves_vidCmp__copy( ves_vidCmp* dest, ves_vidCmp* src, ysmaf afunc);
#endif /* ves_vidCmp_SUPP_FUNCS */

#ifndef ves_audCmp_DECLARED
#define ves_audCmp_DECLARED
typedef YCIDL_sequence_ub1 ves_audCmp;
CONST yotk* ves_audCmp__getTC(void);
#ifndef YCTC_ves_audCmp
#define YCTC_ves_audCmp   (ves_audCmp__getTC())
#endif
#endif /* ves_audCmp_DECLARED */

#ifndef ves_audCmp_SUPP_FUNCS
#define ves_audCmp_SUPP_FUNCS
void ves_audCmp__free( ves_audCmp* val, ysmff ffunc);
void ves_audCmp__copy( ves_audCmp* dest, ves_audCmp* src, ysmaf afunc);
#endif /* ves_audCmp_SUPP_FUNCS */

#ifndef ves_format_DECLARED
#define ves_format_DECLARED
typedef ub4 ves_format;
CONST yotk* ves_format__getTC(void);
#ifndef YCTC_ves_format
#define YCTC_ves_format   (ves_format__getTC())
#endif
#endif /* ves_format_DECLARED */

#ifndef ves_format_DEFINED
#define ves_format_DEFINED
#define ves_formatInvalid ((ves_format) 0)
#define ves_formatMpeg1SS ((ves_format) 1)
#define ves_formatMpeg2Trans ((ves_format) 2)
#define ves_formatRKF ((ves_format) 3)
#endif /* ves_format_DEFINED */

#ifndef ves_format_SUPP_FUNCS
#define ves_format_SUPP_FUNCS
void ves_format__free( ves_format* val, ysmff ffunc);
void ves_format__copy( ves_format* dest, ves_format* src, ysmaf afunc);
#endif /* ves_format_SUPP_FUNCS */

#ifndef ves_timeType_DECLARED
#define ves_timeType_DECLARED
typedef ub4 ves_timeType;
CONST yotk* ves_timeType__getTC(void);
#ifndef YCTC_ves_timeType
#define YCTC_ves_timeType   (ves_timeType__getTC())
#endif
#endif /* ves_timeType_DECLARED */

#ifndef ves_timeType_DEFINED
#define ves_timeType_DEFINED
#define ves_timeTypeInvalid ((ves_timeType) 0)
#define ves_timeTypeSMPTE ((ves_timeType) 1)
#define ves_timeTypeMillisecs ((ves_timeType) 2)
#define ves_timeTypeMpegSCR ((ves_timeType) 3)
#define ves_timeTypeMpegPCR ((ves_timeType) 4)
#define ves_timeTypeBytes ((ves_timeType) 5)
#endif /* ves_timeType_DEFINED */

#ifndef ves_timeType_SUPP_FUNCS
#define ves_timeType_SUPP_FUNCS
void ves_timeType__free( ves_timeType* val, ysmff ffunc);
void ves_timeType__copy( ves_timeType* dest, ves_timeType* src, ysmaf afunc)
  ;
#endif /* ves_timeType_SUPP_FUNCS */

#ifndef ves_SMPTE_DECLARED
#define ves_SMPTE_DECLARED
typedef struct ves_SMPTE ves_SMPTE;
#endif /* ves_SMPTE_DECLARED */

#ifndef ves_SMPTE_DEFINED
#define ves_SMPTE_DEFINED
struct ves_SMPTE
{
  ub4 hour;
  ub1 minute;
  ub1 second;
  ub2 frame;
};
CONST yotk* ves_SMPTE__getTC(void);
#ifndef YCTC_ves_SMPTE
#define YCTC_ves_SMPTE   (ves_SMPTE__getTC())
#endif
#endif /* ves_SMPTE_DEFINED */

#ifndef ves_SMPTE_SUPP_FUNCS
#define ves_SMPTE_SUPP_FUNCS
void ves_SMPTE__free( ves_SMPTE* val, ysmff ffunc);
void ves_SMPTE__copy( ves_SMPTE* dest, ves_SMPTE* src, ysmaf afunc);
#endif /* ves_SMPTE_SUPP_FUNCS */

#ifndef ves_time_DECLARED
#define ves_time_DECLARED
typedef struct ves_time ves_time;
#endif /* ves_time_DECLARED */

#ifndef ves_time_DEFINED
#define ves_time_DEFINED
struct ves_time
{
  ves_timeType _d;
  union
  {
    sysb8 ves_timeInvalid;
    ves_SMPTE ves_timeSMPTE;
    sysb8 ves_timeMs;
    sysb8 ves_timeSCR;
    sysb8 ves_timePCR;
    sysb8 ves_timeBytes;
  } _u;
};
CONST yotk* ves_time__getTC(void);
#ifndef YCTC_ves_time
#define YCTC_ves_time   (ves_time__getTC())
#endif
#endif /* ves_time_DEFINED */

#ifndef ves_time_SUPP_FUNCS
#define ves_time_SUPP_FUNCS
void ves_time__free( ves_time* val, ysmff ffunc);
void ves_time__copy( ves_time* dest, ves_time* src, ysmaf afunc);
#endif /* ves_time_SUPP_FUNCS */

#ifndef ves_m1sHdr_DECLARED
#define ves_m1sHdr_DECLARED
typedef struct ves_m1sHdr ves_m1sHdr;
#endif /* ves_m1sHdr_DECLARED */

#ifndef ves_m1sHdr_DEFINED
#define ves_m1sHdr_DEFINED
struct ves_m1sHdr
{
  YCIDL_sequence_ub1 seqHdr;
};
CONST yotk* ves_m1sHdr__getTC(void);
#ifndef YCTC_ves_m1sHdr
#define YCTC_ves_m1sHdr   (ves_m1sHdr__getTC())
#endif
#endif /* ves_m1sHdr_DEFINED */

#ifndef ves_m1sHdr_SUPP_FUNCS
#define ves_m1sHdr_SUPP_FUNCS
void ves_m1sHdr__free( ves_m1sHdr* val, ysmff ffunc);
void ves_m1sHdr__copy( ves_m1sHdr* dest, ves_m1sHdr* src, ysmaf afunc);
#endif /* ves_m1sHdr_SUPP_FUNCS */

#ifndef ves_m2tHdr_DECLARED
#define ves_m2tHdr_DECLARED
typedef struct ves_m2tHdr ves_m2tHdr;
#endif /* ves_m2tHdr_DECLARED */

#ifndef ves_m2tHdr_DEFINED
#define ves_m2tHdr_DEFINED
struct ves_m2tHdr
{
  ub2 videoPid;
  ub2 audioPid;
  ub2 clockPid;
  ub1 videoStream;
  YCIDL_sequence_ub1 pat;
  YCIDL_sequence_ub1 pmt;
  YCIDL_sequence_ub1 seqHdr;
};
CONST yotk* ves_m2tHdr__getTC(void);
#ifndef YCTC_ves_m2tHdr
#define YCTC_ves_m2tHdr   (ves_m2tHdr__getTC())
#endif
#endif /* ves_m2tHdr_DEFINED */

#ifndef ves_m2tHdr_SUPP_FUNCS
#define ves_m2tHdr_SUPP_FUNCS
void ves_m2tHdr__free( ves_m2tHdr* val, ysmff ffunc);
void ves_m2tHdr__copy( ves_m2tHdr* dest, ves_m2tHdr* src, ysmaf afunc);
#endif /* ves_m2tHdr_SUPP_FUNCS */

#ifndef ves_rkfHdr_DECLARED
#define ves_rkfHdr_DECLARED
typedef struct ves_rkfHdr ves_rkfHdr;
#endif /* ves_rkfHdr_DECLARED */

#ifndef ves_rkfHdr_DEFINED
#define ves_rkfHdr_DEFINED
struct ves_rkfHdr
{
  YCIDL_sequence_ub1 initData;
};
CONST yotk* ves_rkfHdr__getTC(void);
#ifndef YCTC_ves_rkfHdr
#define YCTC_ves_rkfHdr   (ves_rkfHdr__getTC())
#endif
#endif /* ves_rkfHdr_DEFINED */

#ifndef ves_rkfHdr_SUPP_FUNCS
#define ves_rkfHdr_SUPP_FUNCS
void ves_rkfHdr__free( ves_rkfHdr* val, ysmff ffunc);
void ves_rkfHdr__copy( ves_rkfHdr* dest, ves_rkfHdr* src, ysmaf afunc);
#endif /* ves_rkfHdr_SUPP_FUNCS */

#ifndef ves_hdr_hdrCompData_DECLARED
#define ves_hdr_hdrCompData_DECLARED
typedef struct ves_hdr_hdrCompData ves_hdr_hdrCompData;
#endif /* ves_hdr_hdrCompData_DECLARED */

#ifndef ves_hdr_hdrCompData_DEFINED
#define ves_hdr_hdrCompData_DEFINED
struct ves_hdr_hdrCompData
{
  ves_format _d;
  union
  {
    ves_m1sHdr m1s;
    ves_m2tHdr m2t;
    ves_rkfHdr rkf;
  } _u;
};
CONST yotk* ves_hdr_hdrCompData__getTC(void);
#ifndef YCTC_ves_hdr_hdrCompData
#define YCTC_ves_hdr_hdrCompData   (ves_hdr_hdrCompData__getTC())
#endif
#endif /* ves_hdr_hdrCompData_DEFINED */

#ifndef ves_hdr_hdrCompData_SUPP_FUNCS
#define ves_hdr_hdrCompData_SUPP_FUNCS
void ves_hdr_hdrCompData__free( ves_hdr_hdrCompData* val, ysmff ffunc);
void ves_hdr_hdrCompData__copy( ves_hdr_hdrCompData* dest, 
  ves_hdr_hdrCompData* src, ysmaf afunc);
#endif /* ves_hdr_hdrCompData_SUPP_FUNCS */

#ifndef ves_hdr_DECLARED
#define ves_hdr_DECLARED
typedef struct ves_hdr ves_hdr;
#endif /* ves_hdr_DECLARED */

#ifndef ves_hdr_DEFINED
#define ves_hdr_DEFINED
struct ves_hdr
{
  ves_vendor vend;
  ves_format fmt;
  ves_vidCmp vid;
  ves_audCmp aud;
  ub2 heightInPixels;
  ub2 widthInPixels;
  sb4 pelAspectRatio;
  ub4 frameRate;
  ves_hdr_hdrCompData compData;
};
CONST yotk* ves_hdr__getTC(void);
#ifndef YCTC_ves_hdr
#define YCTC_ves_hdr   (ves_hdr__getTC())
#endif
#endif /* ves_hdr_DEFINED */

#ifndef ves_hdr_SUPP_FUNCS
#define ves_hdr_SUPP_FUNCS
void ves_hdr__free( ves_hdr* val, ysmff ffunc);
void ves_hdr__copy( ves_hdr* dest, ves_hdr* src, ysmaf afunc);
#endif /* ves_hdr_SUPP_FUNCS */

#ifndef ves_frame_DECLARED
#define ves_frame_DECLARED
typedef ub4 ves_frame;
CONST yotk* ves_frame__getTC(void);
#ifndef YCTC_ves_frame
#define YCTC_ves_frame   (ves_frame__getTC())
#endif
#endif /* ves_frame_DECLARED */

#ifndef ves_frame_DEFINED
#define ves_frame_DEFINED
#define ves_frameInvalid ((ves_frame) 0)
#define ves_frameMpegI ((ves_frame) 1)
#define ves_frameMpegP ((ves_frame) 2)
#define ves_frameMpegB ((ves_frame) 3)
#define ves_frameRawKey ((ves_frame) 4)
#define ves_frameRawBias ((ves_frame) 5)
#define ves_frameRawAudio ((ves_frame) 6)
#endif /* ves_frame_DEFINED */

#ifndef ves_frame_SUPP_FUNCS
#define ves_frame_SUPP_FUNCS
void ves_frame__free( ves_frame* val, ysmff ffunc);
void ves_frame__copy( ves_frame* dest, ves_frame* src, ysmaf afunc);
#endif /* ves_frame_SUPP_FUNCS */

#ifndef ves_m1sTag_DECLARED
#define ves_m1sTag_DECLARED
typedef struct ves_m1sTag ves_m1sTag;
#endif /* ves_m1sTag_DECLARED */

#ifndef ves_m1sTag_DEFINED
#define ves_m1sTag_DEFINED
struct ves_m1sTag
{
  ub1 videoStreamCode;
};
CONST yotk* ves_m1sTag__getTC(void);
#ifndef YCTC_ves_m1sTag
#define YCTC_ves_m1sTag   (ves_m1sTag__getTC())
#endif
#endif /* ves_m1sTag_DEFINED */

#ifndef ves_m1sTag_SUPP_FUNCS
#define ves_m1sTag_SUPP_FUNCS
void ves_m1sTag__free( ves_m1sTag* val, ysmff ffunc);
void ves_m1sTag__copy( ves_m1sTag* dest, ves_m1sTag* src, ysmaf afunc);
#endif /* ves_m1sTag_SUPP_FUNCS */

#ifndef ves_m2tTag_DECLARED
#define ves_m2tTag_DECLARED
typedef struct ves_m2tTag ves_m2tTag;
#endif /* ves_m2tTag_DECLARED */

#ifndef ves_m2tTag_DEFINED
#define ves_m2tTag_DEFINED
struct ves_m2tTag
{
  ub1 continuityCounter;
  ub4 leadingZeros;
  ub4 trailingZeros;
  ub2 headerPesLength;
  ub2 trailerPesLength;
  ub2 nonVideoPackets;
  ub2 nullPackets;
};
CONST yotk* ves_m2tTag__getTC(void);
#ifndef YCTC_ves_m2tTag
#define YCTC_ves_m2tTag   (ves_m2tTag__getTC())
#endif
#endif /* ves_m2tTag_DEFINED */

#ifndef ves_m2tTag_SUPP_FUNCS
#define ves_m2tTag_SUPP_FUNCS
void ves_m2tTag__free( ves_m2tTag* val, ysmff ffunc);
void ves_m2tTag__copy( ves_m2tTag* dest, ves_m2tTag* src, ysmaf afunc);
#endif /* ves_m2tTag_SUPP_FUNCS */

#ifndef ves_rkfTag_DECLARED
#define ves_rkfTag_DECLARED
typedef struct ves_rkfTag ves_rkfTag;
#endif /* ves_rkfTag_DECLARED */

#ifndef ves_rkfTag_DEFINED
#define ves_rkfTag_DEFINED
struct ves_rkfTag
{
  ub1 nothing;
};
CONST yotk* ves_rkfTag__getTC(void);
#ifndef YCTC_ves_rkfTag
#define YCTC_ves_rkfTag   (ves_rkfTag__getTC())
#endif
#endif /* ves_rkfTag_DEFINED */

#ifndef ves_rkfTag_SUPP_FUNCS
#define ves_rkfTag_SUPP_FUNCS
void ves_rkfTag__free( ves_rkfTag* val, ysmff ffunc);
void ves_rkfTag__copy( ves_rkfTag* dest, ves_rkfTag* src, ysmaf afunc);
#endif /* ves_rkfTag_SUPP_FUNCS */

#ifndef ves_tag_tagCompData_DECLARED
#define ves_tag_tagCompData_DECLARED
typedef struct ves_tag_tagCompData ves_tag_tagCompData;
#endif /* ves_tag_tagCompData_DECLARED */

#ifndef ves_tag_tagCompData_DEFINED
#define ves_tag_tagCompData_DEFINED
struct ves_tag_tagCompData
{
  ves_format _d;
  union
  {
    ves_m1sTag m1s;
    ves_m2tTag m2t;
    ves_rkfTag rkf;
  } _u;
};
CONST yotk* ves_tag_tagCompData__getTC(void);
#ifndef YCTC_ves_tag_tagCompData
#define YCTC_ves_tag_tagCompData   (ves_tag_tagCompData__getTC())
#endif
#endif /* ves_tag_tagCompData_DEFINED */

#ifndef ves_tag_tagCompData_SUPP_FUNCS
#define ves_tag_tagCompData_SUPP_FUNCS
void ves_tag_tagCompData__free( ves_tag_tagCompData* val, ysmff ffunc);
void ves_tag_tagCompData__copy( ves_tag_tagCompData* dest, 
  ves_tag_tagCompData* src, ysmaf afunc);
#endif /* ves_tag_tagCompData_SUPP_FUNCS */

#ifndef ves_tag_DECLARED
#define ves_tag_DECLARED
typedef struct ves_tag ves_tag;
#endif /* ves_tag_DECLARED */

#ifndef ves_tag_DEFINED
#define ves_tag_DEFINED
struct ves_tag
{
  ves_frame frameType;
  ves_time timestamp;
  sysb8 byteOffset;
  ub4 videoByteLength;
  ves_tag_tagCompData compData;
};
CONST yotk* ves_tag__getTC(void);
#ifndef YCTC_ves_tag
#define YCTC_ves_tag   (ves_tag__getTC())
#endif
#endif /* ves_tag_DEFINED */

#ifndef ves_tag_SUPP_FUNCS
#define ves_tag_SUPP_FUNCS
void ves_tag__free( ves_tag* val, ysmff ffunc);
void ves_tag__copy( ves_tag* dest, ves_tag* src, ysmaf afunc);
#endif /* ves_tag_SUPP_FUNCS */

#ifndef ves_tagList_DECLARED
#define ves_tagList_DECLARED
typedef YCIDL_sequence_ves_tag ves_tagList;
CONST yotk* ves_tagList__getTC(void);
#ifndef YCTC_ves_tagList
#define YCTC_ves_tagList   (ves_tagList__getTC())
#endif
#endif /* ves_tagList_DECLARED */

#ifndef ves_tagList_SUPP_FUNCS
#define ves_tagList_SUPP_FUNCS
void ves_tagList__free( ves_tagList* val, ysmff ffunc);
void ves_tagList__copy( ves_tagList* dest, ves_tagList* src, ysmaf afunc);
#endif /* ves_tagList_SUPP_FUNCS */

EXTC_END
#endif /* VES_ORACLE */
