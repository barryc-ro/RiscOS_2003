/*------------------------------- mzsboot.c ---------------------------------*/
/* mzscl.c - Implementation of client set/remove callbacks                   */
/*                                                                           */
/* This file creates under the cover an ORB server that is used to do the    */
/* notifications fot the completion of a Play/Finish                         */
/*                                                                           */
/* Modification History:                                                     */
/*   nkavantz   07/01/96        Creation                                     */
/*---------------------------------------------------------------------------*/
/* Oracle Corporation                                                        */
/* Oracle Media Server (TM)                                                  */
/* Copyright (C) 1993-1996                                                   */
/*---------------------------------------------------------------------------*/

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif /* !SYSI_ORACLE */

#ifndef YO_ORACLE
#include <yo.h>
#endif
 
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif

#ifndef MZSCLI_IDL
#include <mzscli.h>
#endif

#ifndef MZS_IDL
/* LNTWEAK */
#include <mzs.h>      /* generated mzs interface */
#endif

#ifndef MZSCLII_H
#include <mzsclii.h>
#endif

#ifndef MZSCL_H
#include <mzscl.h>
#endif

/***************************************************************************/

externdef ysidDecl(MT_EX_UNCAUGHT) = "mzscl::uncaught";
externdef ysidDecl(CLICB_EX_FAILURE) = "cli_notifier::failure"; 

/*---------------------- Private Function Prototypes ----------------------*/

STATICF void mzsclCreateObj(mzsclCliCtx *pCC, mzs_stream_cliCallbackHdlr fup,
                            dvoid  *argv);
STATICF void mzsclCleanupObj(mzsclCliCtx  *pCC);

STATICF void mzsclCreateOrbSrv(void);

STATICF void mzsclCleanupOrbSrv(void);

STATICF void mzsclIdler(dvoid  *usrp, CONST ysid  *exid, dvoid  *arg,
                        size_t  argsz);

/***************************************************************************/

void mzscl_stream_cliInit()
{
  mzsclCreateOrbSrv();
}

void mzscl_stream_cliTerm()
{
  mzsclCleanupOrbSrv();
}

/***************************************************************************/

void mzscl_stream_setCallback(mzs_stream orS, yoenv  *evCli,
                            mzs_stream_cliCallbackHdlr  fup,  dvoid *argv)
{
  mzsclCliCtx   *pCC = NULLP(mzsclCliCtx), *old_pCC = NULLP(mzsclCliCtx);
  mzs_clientCB   old_orCli = NULL;

  pCC = (mzsclCliCtx *) ysmGlbAlloc(sizeof(mzsclCliCtx), "ClientCtx");
  if(pCC == NULL )
    yseThrow(CLICB_EX_FAILURE);

  mzsclCreateObj(pCC, fup, argv);

  yseTry
  {
    old_orCli = mzs_stream_setCallback(orS, evCli, pCC->orCli_mzsclCliCtx);
  }
  yseCatchAll
  {
    yslError("cli_stream_setCallback: Exception received: %s\n",
             ysidToStr(yseExid));

    mzsclCleanupObj(pCC);
    ysmGlbFree((dvoid *) pCC);

    yseRethrow;
  }
  yseEnd;

  if (old_orCli != NULL)
  {
    old_pCC = (mzsclCliCtx *)yoGetState((dvoid *)old_orCli);
    yoRelease((dvoid *)old_orCli);
    mzsclCleanupObj(old_pCC);
    ysmGlbFree((dvoid *) old_pCC);
  }
}

/***************************************************************************/

void mzscl_stream_removeCallback(mzs_stream orS, yoenv  *evCli)
{
  mzs_clientCB   old_orCli = NULL;
  mzsclCliCtx   *old_pCC = NULL;
     
  yseTry
  {
    old_orCli = mzs_stream_removeCallback(orS, evCli);
    if (old_orCli != NULL)
    { 
      ysSetIdler("mzsclIdler()", (ysHndlr) 0, (dvoid *) 0);
      
      old_pCC = (mzsclCliCtx *)yoGetState((dvoid *)old_orCli);
      yoRelease((dvoid *)old_orCli);

      mzsclCleanupObj(old_pCC);
      ysmGlbFree((dvoid *)old_pCC);
    }
  }
  yseCatchAll
  {
    yslError("cli_stream_removeCallback: Exception received: %s\n",
             ysidToStr(yseExid));

    yseRethrow;
  }
  yseEnd;
}

/***************************************************************************/

STATICF void mzsclCreateOrbSrv()
{
  yoSetImpl(mzs_clientCB__id, mzs_clientCB_implid, 
            mzs_clientCB__stubs,
            (dvoid*) &mzs_clientCB__impl,
            (yoload)0, FALSE, (dvoid *) 0);
}

STATICF void mzsclCleanupOrbSrv()
{
  return;
}

/***************************************************************************/

STATICF void mzsclCreateObj(mzsclCliCtx  *pCC,
                            mzs_stream_cliCallbackHdlr  fup,
                            dvoid  *argv)
{
  char   ImplCliQueName[100];

  /* Client */
  pCC->fup_mzsclCliCtx  = fup;
  pCC->argv_mzsclCliCtx = argv;

  yoImplReady(mzs_clientCB__id, mzs_clientCB_implid, NULLP(ysque));

  DISCARD sprintf(ImplCliQueName, "CliCB");
  pCC->ImplCliQueCB_mzsclCliCtx = yoQueCreate(ImplCliQueName);

  pCC->orCli_mzsclCliCtx = (mzs_clientCB) yoCreate(mzs_clientCB__id, 
                                                   mzs_clientCB_implid, 
                                                   NULLP(yoRefData),
                                                   NULLP(char), 
                                                   (dvoid *)pCC);
  yoObjListen((dvoid *)pCC->orCli_mzsclCliCtx, pCC->ImplCliQueCB_mzsclCliCtx);

  /*
   * NOTE: Here we create a Media*Net idler to service all incoming requests
   * for the client ORB server that we have created. We DO NOT destroy the
   * idler in the CleanupCliObj but instead we create a new if it is the
   * first time or we replace an existing one with a new. These actions are
   * accomplished with the following call:
   */
  ysSetIdler("mzsclIdler()", mzsclIdler, (dvoid *) pCC);
}

/***************************************************************************/

STATICF void mzsclCleanupObj(mzsclCliCtx  *pCC)
{
  yoImplDeactivate(mzs_clientCB__id, mzs_clientCB_implid);

  pCC->fup_mzsclCliCtx  = (mzs_stream_cliCallbackHdlr)0;
  pCC->argv_mzsclCliCtx = NULLP(dvoid);

  if(pCC->orCli_mzsclCliCtx != NULL)
  {
    yoRelease((dvoid *)pCC->orCli_mzsclCliCtx);
    pCC->orCli_mzsclCliCtx = (mzs_clientCB)0;
  }

  if (pCC->ImplCliQueCB_mzsclCliCtx != NULL)
  {
    yoQueDestroy(pCC->ImplCliQueCB_mzsclCliCtx);
    pCC->ImplCliQueCB_mzsclCliCtx = NULLP(ysque);
  }
}
/***************************************************************************/

STATICF void mzsclIdler(dvoid  *usrp, CONST ysid  *exid,
                       /* ARGSUSED */dvoid  *arg, size_t  argsz)
{
  mzsclCliCtx *volatile pCC = (mzsclCliCtx *)usrp;

  if (exid)
  {
    /* FIXME: handle YS_EX_SHUTDOWN */
    return;
  }

  /* Service the StreamFct implementation */
  while ( ysSvcPending(pCC->ImplCliQueCB_mzsclCliCtx) )
      ysSvcAll(pCC->ImplCliQueCB_mzsclCliCtx); 
}
