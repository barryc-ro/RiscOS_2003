/* mx/src/yc/ycihdr.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCI0_ORACLE
#include <yci0.h>
#endif
#ifndef YSSTR_ORACLE
#include <ysstr.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif

STATICF void yciGenDerivedFunc( ycctx* ctx, yccfp* fp, CONST char* dname, 
	CONST char* bname, yrobj* bintf, yrobj* rettype, yslst* pars);
STATICF void yciGenCGObjs( ycctx* ctx, yccfp* fp, yslst* objs);




#define yciGenSimpleDerived( ctx, fp, dname, bname) \
  {\
    yccfpStartPP((fp)); \
    yccfpPrint( fp, "#ifndef %s\n#define %s %s\n#endif /* %s */\n\n", \
		(dname), (dname), (bname), (dname)); \
    yccfpEndPP((fp)); \
  }



void ycihdr(ycctx *ctx, char *base, ycfile* fd)
{
  yccfp *fp;
  char  *upbase;
  CONST char* errtxt;
  ysle* le;

  
  fp = yccfpOpen(fd->newtmp, "w", SYSFPKIND_TEXT, &errtxt, 
                 yccGetLineLimit(ctx));
  if (!fp)
    {
      ysRecord(YCMSG(1), YCERRSEV, YSLSTR(fd->target), YSLSTR(errtxt), YSLEND);
      return;
    }

  
  upbase = ycToUpper(ysStrDup(base));

  
  yccfpSetIndent( fp, 0);
  yccfpPrint(fp, "/* GENERATED FILE\n * %s - public declarations\n", 
	base);
  yccfpPrint(fp, " * from %s\n */\n\n", ctx->srcnm);
  yccfpPrint(fp, "#ifndef MTTC%s_ORACLE\n", upbase);
  yccfpPrint(fp, "#define MTTC%s_ORACLE\n\n", upbase);
  yciGenSysIncls(ctx, fp, FALSE);

  yccfpPrint( fp, "\n");
  yccfpPrint( fp, "/*************** INIT ROUTINE **************/\n\n");
  yccfpPrint( fp, "boolean mttc%s__init( mttictx *cx );\n\n", base);

  
  if ( ysLstCount( ctx->seqs) > 0 )
  {
    yccfpPrint( fp, "/**********  SEQUENCE DECLARATIONS *********/\n");
    for ( le = ysLstHead(ctx->seqs); le; le = ysLstNext(le))
    {
      yrobj* obj = (yrobj*) ysLstVal(le);
      yciGenDecl( ctx, fp, obj, TRUE);
    }
  }
  
  
  if ( ysLstCount( ctx->newobjs) > 0 )
  {
    yccfpPrint( fp, "/******* NON-SEQUENCE DECLARATIONS *******/\n");
    yciGenCGObjs( ctx, fp, ctx->newobjs);
  }

  
  yccfpPrint(fp, "#endif /* MTTC%s_ORACLE */\n", upbase);

  ysmGlbFree((dvoid *) upbase);
  yccfpClose( fp);
}




void yciGenDecl(ycctx* ctx, yccfp* fp, yrobj* obj, boolean isForward)
{
  switch ( yrGetKind(obj) )
  {
    case yrdkInterface:
      yciGenIntfDecl(ctx, fp, obj, isForward);
      break;
    case yrdkConstant:
	
      if ( !ycIsEnumConst(obj) )
	yccGenConstDecl(ctx,fp, obj);
      break;
    case yrdkException:
      yccGenExDecl(ctx, fp, obj, isForward);
      break;
    case yrdkTypedef:
    case yrdkAlias:
      yccGenAliasDecl(ctx, fp, obj, isForward);
      break;
    case yrdkStruct:
      yccGenStructDecl(ctx, fp, obj, isForward);
      break;
    case yrdkUnion:
      yccGenUnionDecl(ctx, fp, obj, isForward);
      break;
    case yrdkEnum:
      yccGenEnumDecl(ctx, fp, obj, isForward);
      break;
    case yrdkSequence:
      yccGenSequenceDecl(ctx, fp, obj);
      break;
    case yrdkArray:
      break;
    case yrdkAttribute:
      yciGenAttrDecl(ctx, fp, obj, FALSE);
      break;
    case yrdkOperation:
      yciGenOpDecl(ctx, fp, obj, FALSE);
      break;
    default:
      
      break;
  }
}



 
STATICF void yciGenCGObjs( ycctx* ctx, yccfp* fp, yslst* objs)
{
  ysle* le;
 
  if ( objs )
  {
    for ( le = ysLstHead(objs); le; le = ysLstNext(le))
    {
      ycgobj* cgobj = (ycgobj*) ysLstVal(le);
 
      if ( yrGetKind(cgobj->ifrobj) == yrdkModule )
        yciGenCGObjs( ctx, fp, cgobj->objlist);
      else
        yciGenDecl( ctx, fp, cgobj->ifrobj, cgobj->flags & YCG_FWD);
    }
  }
}





void yciGenIntfDecl(ycctx* ctx, yccfp* fp, yrobj* intf, boolean fwd)
{
  CONST char* name;
  ysle* le;
  boolean genDefn;

  if ( ycIsCorbaObject( ctx, intf) )       
    return;

  genDefn = ycShouldGenCode( ctx, intf);
  name = yccGetAbsoluteName(ctx, intf, (yrobj*)0);

  yccfpPrint(fp, "\n/* interface %s declarations */\n", name);
  yccGenOpenGuard(ctx, fp, name, FALSE);
  yccfpPrint(fp, "typedef struct %s* %s;\n", name, name);
  if ( yccNeedsTypeCode( ctx, intf) )
    yccGenTypeCode(ctx, fp, name, (yotk*)0, TRUE);
  yccGenCloseGuard(ctx, fp, name, FALSE);
  if ( fwd )
  {
    return;
  }

    
  if ( genDefn )
  {
    yccGenOpenGuard(ctx, fp, name, TRUE);
    yccGenId( ctx, fp, name, name, TRUE, (char*)0);
    yccGenCloseGuard(ctx, fp, name, TRUE);
  }

      
  ycgPushScope( ctx, intf);
  for (le = ysLstHead( yrGetContents(intf)); le; le = ysLstNext(le))
  {
    yciGenDecl( ctx, fp, (yrobj*)ysLstVal(le), FALSE);
  }
  DISCARD ycgPopScope( ctx);
}





void yciGenAttrDecl(ycctx* ctx, yccfp* fp, yrobj* attr, boolean fptr)
{
  CONST char* base;	
  char* attrName;
  char* name;		
  yrobj* voidType;
  CONST char* dbase = (char*)0;	
  char* dname = (char*)0;	
  yrobj* bintf = yrGetDefinedIn(attr);
  yrobj* inInterface = ycgScopeLookup( ctx, yrdkInterface);
  boolean inherited = (inInterface && (yrGetDefinedIn(attr) != inInterface));

  if ( !ycShouldGenCode( ctx, attr) )
    return;		

  base = fptr ? "" : yccGetAbsoluteName( ctx, bintf, (yrobj*)0);
  attrName = yrGetName(attr);
  voidType = yrGetPrimitive( ctx->repository, yrpkvoid);
  name = (char*) ysmGlbAlloc(strlen(base) + strlen(attrName) + 7, "attrName");
		

    
  if ( inherited && !fptr )
  {
    dbase = yccGetAbsoluteName( ctx, inInterface, (yrobj*)0);
    dname = (char*) ysmGlbAlloc(strlen(dbase) + strlen(attrName) + 10, 
		"attrName");
    ysFmtStr( name, "%s__get_%s", base, attrName);
    ysFmtStr( dname, "%s__get_%s", dbase, attrName);
    yciGenDerivedFunc( ctx, fp, dname, name, bintf, yrAttrData(attr).type, 
			(yslst*)0);
  }
  else		
  {
    ysFmtStr( name, "%s__get_%s", base, attrName);
    yccfpPrint(fp, "void %s( mttictx *cx, yslst *args, mttitc *ret)", name);
    yccfpPrint(fp, ";\n");
    yccGenParsDecl(ctx, fp, name);
  }

    
  if ( yrAttrData(attr).mode != YR_ATTR_RO )
  {
    yrpar param;
    yslst* pars = ysLstCreate();

    param.name = (char *)"val";
    param.type = yrAttrData(attr).type;
    param.mode = YOMODE_IN;
    DISCARD ysLstEnq( pars, (dvoid*) &param);

    if ( inherited && !fptr )
    {
      ysFmtStr( name, "%s__set_%s", base, attrName);
      ysFmtStr( dname, "%s__set_%s", dbase, attrName);
      yciGenDerivedFunc( ctx, fp, dname, name, bintf, voidType, pars);
    }
    else
    {
      
      ysFmtStr( name, "%s__set_%s", base, attrName);
      yccfpPrint(fp, "void %s( mttictx *cx, yslst *args, mttitc *ret)", name);
      yccfpPrint(fp, ";\n");
      yccGenParsDecl(ctx, fp, name);
    }
    ysLstDestroy( pars, (ysmff)0);
  }

  ysmGlbFree((dvoid*)name);
  if ( inherited && !fptr )
  {
    ysmGlbFree((dvoid*)dname);
  }
}




void yciGenOpDecl(ycctx* ctx, yccfp* fp, yrobj* op, boolean fptr)
{
  CONST char* name = (char*) 0;
  yrobj* inInterface = ycgScopeLookup( ctx, yrdkInterface);
  boolean inherited = (inInterface && (yrGetDefinedIn(op) != inInterface));

  if ( !ycShouldGenCode( ctx, op) )
    return;

  if ( inherited  )
  {
    CONST char* dname;

    dname = yccGetAbsoluteName( ctx, op, inInterface);
    yciGenDerivedFunc( ctx, fp, dname, yccGetAbsoluteName(ctx, op, (yrobj*)0),
			yrGetDefinedIn(op), yrOpData(op).rettype, 
			yrOpData(op).pars);
    ysmGlbFree( (dvoid*)dname);
  }
  else
  {
    yrobj* intf = inherited ? inInterface : yrGetDefinedIn(op);

    name = yccGetAbsoluteName(ctx, op, intf);
    yccfpPrint(fp,"void %s( mttictx *cx, yslst *args, mttitc *ret)", name);
    yccfpPrint(fp, ";\n");
    yccGenParsDecl(ctx, fp, name);
  }
}



STATICF void yciGenDerivedFunc( ycctx* ctx, yccfp* fp, CONST char* dname, 
	CONST char* bname, yrobj* bintf, yrobj* rettype, yslst* pars)
{
  yrobj* voidType = yrGetPrimitive(ctx->repository, yrpkvoid);

      
  if ( !ycShouldGenCode( ctx, bintf) )
  {	
    yccfpPrint(fp, "void %s( mttictx *cx, yslst *args, mttitc *ret)", bname);
    yccfpPrint(fp,";\n");
    yccGenParsDecl(ctx, fp, bname);
  }

  
  yccfpStartPP(fp);
  yccfpPrint( fp, "#ifndef %s\n#define %s %s\n", dname, dname, bname);
  yccfpPrint( fp, "#define %s_pars %s_pars\n", dname, bname);

  yccfpPrint( fp, "#endif /* %s */\n\n", dname);
  yccfpEndPP(fp);
}


