/* mx/src/yc/ycsemco.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YR_ORACLE
#include <yr.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif

static ysidDecl(YC_EX_BADEXP) = "yc::badexp";


void ycsConstDcl(ycctx *ctx, yrobj *scope, yctConstDcl *cd)
{
  yrobj   *newobj, *type;
  yoany    val;
  char    *scb, *sce, *strval;
  yotkKind dknd;

  if (!ycsNewDef(ctx, scope, cd->id, cd->line))
    return;

  if (!(type = ycsConstType(ctx, scope, cd->type)))
    return;

  dknd = ycsGetTypeKind(ctx, type);

  if (!ycsEvalExpr(ctx, scope, &val, dknd, cd->exp))
    return;

  
  if (dknd == yotkString && yrStringData(type).bound)
  {
    strval = *((char **) val._value);
    for (scb = strval; *scb && *scb != '"'; scb++) ;
    for (sce = strval + strlen(strval); sce > strval && *sce != '"'; sce--) ;
    if (sce - scb - (ub4)1 > yrStringData(type).bound)
      ysRecord( YCMSG(68), YCWARNSEV, YCERRLN(cd->line), 
                YSLSTR(cd->id), YSLEND);
  }

  newobj = yrCreateConstant(scope, cd->id, type, &val);
  yrSetSrcInfo( newobj, cd->line->name, cd->line->line);
  DISCARD ycSymInsert( ctx->symtbl, newobj);
  ycsAddObj(ctx, scope, newobj);
}

yrobj *ycsConstType(ycctx *ctx, yrobj *scope, yctConstType *ct)
{
  
  yrobj   *type;
  yrpk     kind = yrpkvoid;
  ub4      bound;
  yotkKind tknd;
  yctStringType *st;
  yctIntegerType *it;

  if (ct->tag == (ub4)ycttScopedName)
    {
      type = ycsNameToType(ctx, scope, MEMBER(ct, name));
      tknd = ycsGetTypeKind(ctx, type);
      if (tknd == yotkString || (tknd >= yotkShort && tknd <= yotkBoolean))
	return type;
      else
	{
          ysRecord( YCMSG(56), YCERRSEV, YCERRLN(ct->line), YSLEND);
	  return (yrobj *) 0;
	}
    }
  else if (ct->tag == (ub4)ycttStringType)
    {
      st = MEMBER(ct, stringtype);
      if (st->intconst)
	{
	  bound = ycsPosIntExpr(ctx, scope, st->intconst);
	  return yrCreateString(ctx->repository, bound);
	}
      else
	return yrGetPrimitive(ctx->repository, yrpkstring);
    }
  else
    {
      switch (ct->tag)
	{
	case ycttIntegerType:
	  it = MEMBER(ct, inttype);
	  switch (it->long_t)
	    {
	    case 0: kind = (it->signed_t ? yrpkshort : yrpkushort); break;
	    case 1: kind = (it->signed_t ? yrpklong : yrpkulong); break;
	    case 2: kind = yrpklonglong; break;
	    }
	  break;
	case ycttCharType: kind = yrpkchar; break;
	case ycttBooleanType: kind = yrpkboolean; break;
	case ycttFloatType:
	  kind = (MEMBER(ct, floattype) == YCTFLOAT ? yrpkfloat : yrpkdouble);
	  break;
	default:
	  yseThrow(YS_EX_FAILURE);
	  break;
	}
      return yrGetPrimitive(ctx->repository, kind);
    }
}

ub4 ycsPosIntExpr(ycctx *ctx, yrobj *scope, yctOrExpr *exp)
{
  yoany val;
  ub4   uv;

  if (!ycsEvalExpr(ctx, scope, &val, yotkUlong, exp))
    uv = 1;
  else
    {
      uv = *((ub4 *) val._value);
      ysmGlbFree(val._value);
    }

  return uv;
}

boolean ycsEvalExpr(ycctx *ctx, yrobj *scope, yoany *val, yotkKind expected,
		    yctOrExpr *exp)
{
  yrobj  *obj;
  ysstr  *tmp;
  ysle   *le;
  boolean sgnd;
  noreg boolean ok;
  sb4     sval = (sb4)0;
  ub4     uval = (ub4)0;
  yotkKind kind;
  yctShiftExpr *se;
  yctUnaryExpr *ue;
  yctPrimaryExpr *pe;
  yctLiteral *lit;

  NOREG(ok);
  if (expected == yotkFloat || expected == yotkDouble)
  {
    ysRecord( YCMSG(57), YCERRSEV, YCERRLN(exp->line), YSLEND);
    return FALSE;
  }
  else if (expected == yotkString || expected == yotkBoolean ||
           expected == yotkChar || expected == yotkEnum)
  {
      
    pe = (yctPrimaryExpr *) 0;

    if (exp->orexpr)
      ysRecord( YCMSG(63), YCERRSEV, YCERRLN(exp->line), YSLSB4('|'), 
                  YSLEND);
    else if (exp->xorexpr->xorexpr)
      ysRecord( YCMSG(63), YCERRSEV, YCERRLN(exp->line), YSLSB4('^'), YSLEND);
    else if (exp->xorexpr->andexpr->andexpr)
      ysRecord( YCMSG(63), YCERRSEV, YCERRLN(exp->line), YSLSB4('&'), YSLEND);
    else if ((se = exp->xorexpr->andexpr->shiftexpr)->shiftexpr)
      ysRecord( YCMSG(65), YCERRSEV, YCERRLN(exp->line), 
                YSLSTR(se->operid == YCTRS ? ">>" : "<<"), YSLEND);
    else if (se->addexpr->addexpr)
      ysRecord( YCMSG(63), YCERRSEV, YCERRLN(exp->line), 
                YSLSB4(se->addexpr->operid), YSLEND);
    else if (se->addexpr->multexpr->multexpr)
      ysRecord( YCMSG(63), YCERRSEV, YCERRLN(exp->line), 
                YSLSB4(se->addexpr->multexpr->operid), YSLEND);
    else if ((ue = se->addexpr->multexpr->unaryexpr)->unaryop)
      ysRecord( YCMSG(63), YCERRSEV, YCERRLN(exp->line), 
                YSLSB4(ue->unaryop), YSLEND);
    else
      pe = ue->primexpr;

    if (!pe)
      return FALSE;

    switch (pe->tag)
    {
      case ycttScopedName:
        obj = ycsNameToConst(ctx, scope, MEMBER(pe, name));
        if (!obj)
          return FALSE;

        kind = ycsGetTypeKind(ctx, yrConstData(obj).type);
        if (kind == expected)
        {
          size_t sz;
          size_t align;

          val->_type = yotkDuplicateWaf(yrConstData(obj).val._type, 
                                        (ysmaf) ycAllocTC);
            
          yotkSizeAlign( val->_type, &sz, &align);
          val->_value = (dvoid*) ysmGlbAlloc( sz, "const val");
          DISCARD memcpy( val->_value, yrConstData(obj).val._value, sz);
          return TRUE;
        }
        break;
      case ycttLiteral:
        lit = MEMBER(pe, literal);
        switch (expected)
        {
          case yotkString:
            if (lit->tag == (ub4)ycttStrLit)
            {
              ysstr* tmp2;
              val->_type = yotkDuplicateWaf(yoTcString, (ysmaf) ycAllocTC);
              tmp = ysStrCreate((char *) 0);
              for (le = ysLstHead(MEMBER(lit, strlit)); le; le = ysLstNext(le))
              {
                tmp2 = ysStrCat(tmp, (char *) ysLstVal(le));
                if ( tmp2 != tmp )
                  ysStrDestroy(tmp);
                tmp = tmp2;
              }
                  
              val->_value = ysmGlbAlloc(sizeof(char **), "val char **");
              *((char **) val->_value) = ysStrToText(tmp);
              return TRUE;
            }
            break;
          case yotkChar:
            if (lit->tag == (ub4)ycttCharLit)
            {
              val->_type = yotkDuplicateWaf(yoTcChar, (ysmaf) ycAllocTC);
              val->_value = ysmGlbAlloc(sizeof(char), "val char");
              tmp = ysStrDup(MEMBER(lit, charlit));
              *((char *) val->_value) =
                    (char) ycppEvalChar(ctx, lit->line, tmp);
              ysStrDestroy(tmp);
              return TRUE;
            }
            break;
          case yotkBoolean:
            if (lit->tag == (ub4)ycttBoolLit)
            {
              val->_type = yotkDuplicateWaf(yoTcBoolean, (ysmaf) ycAllocTC);
              val->_value = ysmGlbAlloc(sizeof(boolean), "val boolean");
              *((boolean *) val->_value) =
                    (MEMBER(lit, boollit) ? TRUE : FALSE);
              return TRUE;
            }
            break;
        }
        break;
      case ycttConstExp:
        return ycsEvalExpr(ctx, scope, val, expected, MEMBER(pe, constexp));
    }

    ysRecord( YCMSG(58), YCERRSEV, YCERRLN(exp->line), YSLEND);
    return FALSE;
  }
  else
  {
    yseTry
      ycsOrExpr(ctx, scope, &sgnd, &sval, &uval, exp);
      ok = TRUE;
    yseCatch(YC_EX_BADEXP)
      ok = FALSE;
    yseEnd

    if (!ok)
      return FALSE;

    val->_value = ysmGlbAlloc(sizeof(ub4), "const value");
    switch (expected)
    {
      case yotkShort:
        if (sgnd)
        {
          if (sval > 32767 || sval < -32768)
            ysRecord( YCMSG(60), YCWARNSEV, YCERRLN(exp->line), 
                      YSLSB4(sval), YSLEND);
          *((sb2 *) val->_value) = (sb2) sval;
        }
        else
        {
          if (uval > 32767)
            ysRecord( YCMSG(59), YCWARNSEV, YCERRLN(exp->line), 
                      YSLUB4(uval), YSLEND);
          *((sb2 *) val->_value) = (sb2) uval;
        }
        val->_type = yotkDuplicateWaf(yoTcShort, (ysmaf) ycAllocTC);
        break;
      case yotkLong:
        if ( sgnd )
        {
          if ( (sval > 2147483647) || (sval < (-2147483647-1)) )
            ysRecord( YCMSG(60), YCWARNSEV, YCERRLN(exp->line), 
                      YSLSB4(sval), YSLEND);
          *((sb4 *) val->_value) = (sb4) sval;
        }
        else
        {
          if (uval & 0x80000000)
            ysRecord( YCMSG(59), YCWARNSEV, YCERRLN(exp->line), 
                      YSLUB4(uval), YSLEND);
          *((sb4 *) val->_value) = (sb4) uval;
        }
        val->_type = yotkDuplicateWaf(yoTcLong, (ysmaf) ycAllocTC);
        break;
      case yotkUshort:
        if (sgnd)
        {
          if (sval < 0 || sval > 65535)
            ysRecord( YCMSG(60), YCWARNSEV, YCERRLN(exp->line), 
                      YSLSB4(sval), YSLEND);
          *((ub2 *) val->_value) = (ub2) sval;
        }
        else
        {
          if (uval > 65535)
            ysRecord( YCMSG(59), YCWARNSEV, YCERRLN(exp->line), 
                      YSLUB4(uval), YSLEND);
          *((ub2 *) val->_value) = (ub2) uval;
        }
        val->_type = yotkDuplicateWaf(yoTcUshort, (ysmaf) ycAllocTC);
        break;
      case yotkUlong:
        if ( sgnd && (sval < 0) )
        {
          ysRecord( YCMSG(60), YCWARNSEV, YCERRLN(exp->line), 
                    YSLSB4(sval), YSLEND);
          uval = (ub4) sval;
        }
        *((ub4 *) val->_value) = (ub4) uval;
        val->_type = yotkDuplicateWaf(yoTcUlong, (ysmaf) ycAllocTC);
        break;
    }

    return TRUE;
  }
}

void ycsOrExpr(ycctx *ctx, yrobj *scope, boolean *sgnd,
               sb4 *sval, ub4 *uval, yctOrExpr *exp)
{
  boolean s1;
  sb4     s1v = (sb4)0;
  ub4     u1v = (ub4)0;

  ycsXorExpr(ctx, scope, sgnd, sval, uval, exp->xorexpr);
  if (!exp->orexpr)
    return;

  ycsOrExpr(ctx, scope, &s1, &s1v, &u1v, exp->orexpr);
  if (!*sgnd && s1v)
    *sval = (sb4) *uval, *sgnd = TRUE;
  if (*sgnd)
    *sval = s1v | *sval;
  else
    *uval = u1v | *uval;
}

void ycsXorExpr(ycctx *ctx, yrobj *scope, boolean *sgnd,
	       sb4 *sval, ub4 *uval, yctXorExpr *exp)
{
  boolean s1;
  sb4     s1v = (sb4)0;
  ub4     u1v = (ub4)0;

  ycsAndExpr(ctx, scope, sgnd, sval, uval, exp->andexpr);
  if (!exp->xorexpr)
    return;

  ycsXorExpr(ctx, scope, &s1, &s1v, &u1v, exp->xorexpr);
  if (!*sgnd && s1v)
    *sval = (sb4) *uval, *sgnd = TRUE;
  if (*sgnd)
    *sval = s1v ^ *sval;
  else
    *uval = u1v ^ *uval;
}

void ycsAndExpr(ycctx *ctx, yrobj *scope, boolean *sgnd,
		sb4 *sval, ub4 *uval, yctAndExpr *exp)
{
  boolean s1;
  sb4     s1v = (sb4)0;
  ub4     u1v = (ub4)0;

  ycsShiftExpr(ctx, scope, sgnd, sval, uval, exp->shiftexpr);
  if (!exp->andexpr)
    return;

  ycsAndExpr(ctx, scope, &s1, &s1v, &u1v, exp->andexpr);
  if (!*sgnd && s1v)
    *sval = (sb4) *uval, *sgnd = TRUE;
  if (*sgnd)
    *sval = s1v & *sval;
  else
    *uval = u1v & *uval;
}

void ycsShiftExpr(ycctx *ctx, yrobj *scope, boolean *sgnd,
		  sb4 *sval, ub4 *uval, yctShiftExpr *exp)
{
  boolean s1;
  sb4     s1v = (sb4)0;
  ub4     u1v = (ub4)0;
  ub4     sv;

  ycsAddExpr(ctx, scope, sgnd, sval, uval, exp->addexpr);
  if (!exp->shiftexpr)
    return;

  ycsShiftExpr(ctx, scope, &s1, &s1v, &u1v, exp->shiftexpr);
  sv = (*sgnd ? (ub4) *sval : *uval);
  if (sv > 31)
    {
      ysRecord( YCMSG(66), YCERRSEV, YCERRLN(exp->line), 
                YSLUB4(sv), YSLEND);
      yseThrow(YC_EX_BADEXP);
    }

  *sgnd = s1;
  if (*sgnd)
    *sval = (exp->operid == YCTRS ? s1v >> sv : s1v << sv);
  else
    *uval = (exp->operid == YCTRS ? u1v >> sv : u1v << sv);
}

void ycsAddExpr(ycctx *ctx, yrobj *scope, boolean *sgnd,
		sb4 *sval, ub4 *uval, yctAddExpr *exp)
{
  boolean s1;
  sb4     s1v = (sb4)0;
  ub4     u1v = (ub4)0;

  ycsMultExpr(ctx, scope, sgnd, sval, uval, exp->multexpr);
  if (!exp->addexpr)
    return;

  ycsAddExpr(ctx, scope, &s1, &s1v, &u1v, exp->addexpr);
  if (!*sgnd && s1v)
    *sval = (sb4) *uval, *sgnd = TRUE;

  if (*sgnd)
    *sval = (exp->operid == '+' ? s1v + *sval : s1v - *sval);
  else if (exp->operid == '+')
    *uval = u1v + *uval;
  else if (u1v < *uval)
    *sgnd = TRUE, *sval = (sb4) u1v - (sb4) *uval;
  else
    *uval = u1v - *uval;
}

void ycsMultExpr(ycctx *ctx, yrobj *scope, boolean *sgnd,
		sb4 *sval, ub4 *uval, yctMultExpr *exp)
{
  boolean s1;
  sb4     s1v = (sb4)0;
  ub4     u1v = (ub4)0;

  ycsUnaryExpr(ctx, scope, sgnd, sval, uval, exp->unaryexpr);
  if (!exp->multexpr)
    return;

  ycsMultExpr(ctx, scope, &s1, &s1v, &u1v, exp->multexpr);
  if (!*sgnd && s1v)
    *sval = (sb4) *uval, *sgnd = TRUE;

  if (exp->operid == '*')
    {
      if (*sgnd)
	*sval = s1v * *sval;
      else
	*uval = u1v * *uval;
    }
  else if ((*sgnd && !*sval) || (!*sgnd && !*uval))
    {
      ysRecord( YCMSG(64), YCERRSEV, YCERRLN(exp->line), YSLEND);
      yseThrow(YC_EX_BADEXP);
    }
  else if (*sgnd)
    *sval = (exp->operid == '%' ? s1v % *sval : s1v / *sval);
  else
    *uval = (exp->operid == '%' ? u1v % *uval : u1v / *uval);
}

void ycsUnaryExpr(ycctx *ctx, yrobj *scope, boolean *sgnd,
		  sb4 *sval, ub4 *uval, yctUnaryExpr *exp)
{
  ycsPrimaryExpr(ctx, scope, sgnd, sval, uval, exp->primexpr);
  if (!exp->unaryop)
    return;

  if (exp->unaryop == '-')
    {
      if (*sgnd)
	*sval = -*sval;
      else
	*sval = -((sb4) *uval), *sgnd = TRUE;
    }
  else if (exp->unaryop == '~')
    {
      if (*sgnd)
	*sval = ~*sval;
      else
	*uval = ~*uval;
    }
}

void ycsPrimaryExpr(ycctx *ctx, yrobj *scope, boolean *sgnd,
		    sb4 *sval, ub4 *uval, yctPrimaryExpr *exp)
{
  yrobj      *obj;
  yctLiteral *lit;
  char       *num;
  yotkKind    kind;

  switch (exp->tag)
    {
    case ycttScopedName:
      obj = ycsNameToConst(ctx, scope, MEMBER(exp, name));
      if (!obj)
	yseThrow(YC_EX_BADEXP);

      kind = ycsGetTypeKind(ctx, yrConstData(obj).type);
      switch (kind)
	{
	case yotkShort:
	  *sgnd = TRUE;
	  *sval = (sb4) *((sb2 *) yrConstData(obj).val._value);
	  break;
	case yotkLong:
	  *sgnd = TRUE;
	  *sval = *((sb4 *) yrConstData(obj).val._value);
	  break;
	case yotkUshort:
	  *sgnd = FALSE;
	  *uval = (ub4) *((ub2 *) yrConstData(obj).val._value);
	  break;
	case yotkUlong:
	  *sgnd = FALSE;
	  *uval = *((ub4 *) yrConstData(obj).val._value);
	  break;
	default:
          ysRecord( YCMSG(58), YCERRSEV, YCERRLN(exp->line), YSLEND);
	  yseThrow(YC_EX_BADEXP);
	  break;
	}
      break;
    case ycttLiteral:
      lit = MEMBER(exp, literal);
      if (lit->tag != (ub4)ycttNumLit)
	{
          ysRecord( YCMSG(58), YCERRSEV, YCERRLN(exp->line), YSLEND);
	  yseThrow(YC_EX_BADEXP);
	}
      else
	{
	  *sgnd = FALSE;
	  num = MEMBER(lit, numlit);
	  if (num[0] == '0')
	    *uval = (num[1] == 'x' ?
		     ycppGetHex(ctx, lit->line, num + 2) :
		     ycppGetOct(ctx, lit->line, num + 1));
	  else
	    *uval = ycsGetNumber(ctx, lit->line, num);
	  break;
	}
    case ycttConstExp:
      ycsOrExpr(ctx, scope, sgnd, sval, uval, MEMBER(exp, constexp));
      break;
    }
}

ub4 ycsGetNumber(ycctx *ctx, ycln *ln, char *num)
{
  ub4 result;

  for (result = 0; *num; num++)
    {
      if (!isdigit(*num))
	{
          ysRecord( YCMSG(57), YCERRSEV, YCERRLN(ln), YSLEND);
	  yseThrow(YC_EX_BADEXP);
	}

      result = result * 10 + (*num - '0');
    }

  return result;
}
