/* mx/src/yc/ycpp.h */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef YCPP_ORACLE
#define YCPP_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef SYSFP_ORACLE
#include <sysfp.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif


typedef struct ycmd ycmd;
typedef struct ycpar ycpar;
typedef struct ycsup ycsup;

#define YCPP_MAXNESTLVL   32           
#define YCPP_LINEMAX      ((ub4)79)    


#define YCDIR_INVALID -2
#define YCDIR_NONE    -1
#define YCDIR_DEFINE   0
#define YCDIR_ELIF     1
#define YCDIR_ELSE     2
#define YCDIR_ENDIF    3
#define YCDIR_ERROR    4
#define YCDIR_IF       5
#define YCDIR_IFDEF    6
#define YCDIR_IFNDEF   7
#define YCDIR_INCLUDE  8
#define YCDIR_LINE     9
#define YCDIR_PRAGMA  10
#define YCDIR_UNDEF   11



struct ycln
{
  CONST char *name;                                   
  sword       line;                                           
  sword       lvl;                                          
  boolean     dir;                       
  ysstr      *text;                        
};



#define YCPP_IDENT    1                                        
#define YCPP_NUM      2                                            
#define YCPP_CHAR     3                                
#define YCPP_STRING   4                                    
#define YCPP_PUNC     5                                       
#define YCPP_PPPOUND  6                              
#define YCPP_PPPASTE  7                              
#define YCPP_EOL      8                                       
#define YCPP_OTHER    9                           


# define ARROW 312
# define INCR 313
# define DECR 314
# define ELLIPSIS 317
# define LE 318
# define GE 319
# define EQ 320
# define NE 321
# define LAND 322
# define LOR 323
# define MULTEQ 324
# define DIVEQ 325
# define MODEQ 326
# define PLUSEQ 327
# define MINEQ 328
# define LSEQ 329
# define RSEQ 330
# define ANDEQ 331
# define OREQ 332
# define XOREQ 333



struct ycmd
{
  char  *name;                                              
  sword  pcnt;                                            
  ysstr *rpl;                                        
  yslst *pars;                   
  ycln  *origln;                      
  sword  opos;                                          
};



#define YCPAR_NORM     0                     
#define YCPAR_STR      1                 
#define YCPAR_STRIPBEF 2                    
#define YCPAR_STRIPAFT 3                   
#define YCPAR_STRIPALL 4            


struct ycpar
{
  sword spos;            
  sword cmd;                                
  sword argno;                                            
};




struct ycsup
{
  ycmd *md;                                              
  sword off;                                              
  sword eor;                               
};



void   ycpp(ycctx *ctx);
yslst *ycppRead(ycctx *ctx, char *fn, sword lvl);
void   ycppDump(ycctx *ctx, yslst *tu);
ycln  *ycLnNew(CONST char *fn, sword line, sword lvl);
void   ycLnFree(ycln *ln);
void   ycLnCat(ycctx *ctx, ysle *elm);
void   ycLnBlank(ycctx *ctx, ycln *ln);
ycmd  *ycMdNew(char *nm, ycln *origln, sword opos);
sword  ycMdEq(dvoid *elm, dvoid *key, size_t keysz);
void   ycMdFree(dvoid *elm);
sword  ycSkipWS(ysstr *txt, sword sp, sword ep);

void  ycppExpand(ycctx *ctx, ysle *elm, sword sp, sword ep, boolean toplvl);
sword ycppGetToken(ycln *ln, sword *posp, sword *valp, ysstr **repp);
void  ycppDirective(ycctx *ctx, ysle *elm);
sword ycppDirIdent(ysstr *txt, sword *posp);
void  ycppDefine(ycctx *ctx, ycln *ln, sword pos);
void  ycppUndef(ycctx *ctx, ycln *ln, sword pos);
void  ycppIf(ycctx *ctx, ysle *elm, sword pos, sword dirid);

sb4 ycppEvalChar(ycctx *ctx, ycln *ln, ysstr *txt);
sb4 ycppGetDec(ycctx *ctx, ycln *ln, char *buf);
ub4 ycppGetOct(ycctx *ctx, ycln *ln, char *buf);
ub4 ycppGetHex(ycctx *ctx, ycln *ln, char *buf);

#endif 
