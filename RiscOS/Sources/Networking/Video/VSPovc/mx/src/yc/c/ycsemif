/* mx/src/yc/ycsemif.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YR_ORACLE
#include <yr.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif
#ifndef YSSTR_ORACLE
#include <ysstr.h>
#endif






void ycsInterface(ycctx *ctx, yrobj *scope, yctInterface *intf)
{
  yslst *lst;
  ysle  *le;
  yrobj *irobj, *obj;
  char* noreg str;
  yctScopedName   *sn;
  yctForwardDcl   *fd;
  yctInterfaceDcl *intfd;
  yctInheritanceSpec *is;
  ycsym* syminfo;

  NOREG(str);
  if (intf->tag == (ub4)ycttForwardDcl)
  {
    fd = MEMBER(intf, forwarddcl);
    lst = yrLookupName(scope, fd->id, (sb4)1, yrdkall, TRUE);
    if (!lst)
    {
      yrobj* inf = yrCreateInterface( scope, fd->id, (yslst*)0);
      DISCARD ycSymInsert( ctx->symtbl, inf);
      ycsAddObj(ctx, scope, inf);
      yrSetSrcInfo( inf, intf->line->name, intf->line->line);
      ycsKeywordChk( ctx, fd->id, intf->line);
    }
    else             
    {
      yrobj* existing = (yrobj*) ysLstVal( ysLstHead( lst));

      if ( yrGetKind( existing) != yrdkInterface )
      {
        ysRecord( YCMSG(52), YCERRSEV, YCERRLN(intf->line), YSLSTR(fd->id), 
                  YSLEND);
	ycsPrintDef(ctx, intf->line, existing);
      }
      ysLstDestroy(lst, (ysmff) 0);
    }
  }
  else
  {
    intfd = MEMBER(intf, interfacedcl);
    lst = yrLookupName(scope, intfd->header->id, (sb4)1, yrdkall, TRUE);
    if (!lst)
    {
      irobj = yrCreateInterface(scope, intfd->header->id, (yslst *) 0);
      syminfo =  ycSymInsert( ctx->symtbl, irobj);
      ycsKeywordChk( ctx, intfd->header->id, intf->line);
    }
    else
    {
      irobj = (yrobj *) ysLstVal(ysLstHead(lst));
      if ( (yrGetKind(irobj) != yrdkInterface) || 
           yrInterfaceData(irobj).defined )
      {		
        ysRecord( YCMSG(52), YCERRSEV, YCERRLN(intf->line), 
                  YSLSTR(intfd->header->id), YSLEND);
	ycsPrintDef(ctx, intf->line, irobj);
        ysLstDestroy(lst, (ysmff) 0);
	return;
      }
      syminfo = ycSymLookup( ctx->symtbl, irobj);
      ysLstDestroy(lst, (ysmff) 0);
    }
    yrInterfaceData(irobj).defined = TRUE;	
    yrSetSrcInfo( irobj, intf->line->name, intf->line->line);
    ycsAddObj(ctx, scope, irobj);

    
    if ( intfd->header->inheritancespec )
    {
      is = intfd->header->inheritancespec;
      for (le = ysLstHead(is->names); le; le = ysLstNext(le))
      {
	sn = (yctScopedName *) ysLstVal(le);
	str = ycsPrintScoped(ctx, sn);
	obj = ycsLookup(ctx, scope, sn);
	if (obj)
	{
	  if (yrGetKind(obj) != yrdkInterface)
	  {
            ysRecord( YCMSG(73), YCERRSEV, YCERRLN(sn->line), 
                      YSLSTR((char*)str), YSLEND);
	    ycsPrintDef(ctx, sn->line, obj);
	  }
	  else if (!yrInterfaceData(obj).defined)
            ysRecord( YCMSG(74), YCERRSEV, YCERRLN(sn->line), YSLEND);
	  else
	  {
	    yseTry
	      yrAddBase(irobj, obj);
	    yseCatch(YR_EX_MULTIPLE)
              ysRecord( YCMSG(75), YCERRSEV, YCERRLN(sn->line), YSLEND);
	    yseCatchObj(YR_EX_CONFLICT, yslst *, lst)
            {
              ysle* be;

              ysRecord( YCMSG(76), YCERRSEV, YCERRLN(sn->line), 
                        YSLSTR((char*)str), YSLEND);
	      for (be = ysLstHead(lst); be; be = ysLstNext(be))
		ycsPrintDef(ctx, sn->line, (yrobj *) ysLstVal(be));
	      ysLstDestroy(lst, (ysmff) 0);
            }
	    yseEnd
	  }
	}
	ysmGlbFree((dvoid*)str);
      }
    }

    
    if ( intfd->body )
    {
      for (le = ysLstHead(intfd->body); le; le = ysLstNext(le))
	ycsExport(ctx, irobj, (yctExport *) ysLstVal(le));
    }

    
    {
      yslst* intfs;
      yslst* all;

      intfs = ysLstCreate();
      yrGetAncestors( irobj, intfs);
      ysLstPush( intfs, irobj);         
      all = ysLstCreate();
   
      for ( le = ysLstHead(intfs); le; le = ysLstNext(le))
      {
        yrobj* obj = (yrobj*) ysLstVal(le);
        yslst* attrs;
        yslst* ops;
 
        ops = yrContents( obj, yrdkOperation, TRUE);   
        attrs = yrContents( obj, yrdkAttribute, TRUE);
        if ( !ycIsEmptyLst(ops) )
        {
          yrobj* op;
   
          while ( (op = (yrobj*) ysLstPop(ops)) )
            ysLstEnq( all, (dvoid*)op);
        }
        ysLstDestroy( ops, (ysmff)0);
        if ( !ycIsEmptyLst(attrs) )
        {
          yrobj* attr;
 
          while ( (attr = (yrobj*) ysLstPop(attrs)) )
            ysLstEnq( all, (dvoid*)attr);
        }
        ysLstDestroy( attrs, (ysmff)0);
      }
      ysLstDestroy( intfs, (ysmff)0);
      if ( ysLstCount(all) > 0 )
        syminfo->opsNattrs = all;
      else
        ysLstDestroy( all, (ysmff)0);
    }
  }
}



void ycsExport(ycctx *ctx, yrobj *scope, yctExport *ex)
{
  switch (ex->tag)
    {
    case ycttTypeDcl:
      ycsTypeDcl(ctx, scope, MEMBER(ex, typedcl));
      break;
    case ycttConstDcl:
      ycsConstDcl(ctx, scope, MEMBER(ex, constdcl));
      break;
    case ycttExceptDcl:
      ycsExceptDcl(ctx, scope, MEMBER(ex, exceptdcl));
      break;
    case ycttAttrDcl:
      ycsAttrDcl(ctx, scope, MEMBER(ex, attrdcl));
      break;
    case ycttOpDcl:
      ycsOpDcl(ctx, scope, MEMBER(ex, opdcl));
      break;
    case ycttPragma:
      ycsPragma( ctx, scope, MEMBER(ex, pragmadir));
      break;
    default:
      yseThrow(YS_EX_FAILURE);
      break;
    }
}



void ycsAttrDcl(ycctx *ctx, yrobj *scope, yctAttrDcl *attr)
{
  yrobj *type, *newobj;
  ysle  *le;
  char  *name;

  if (!(type = ycsParamTypeSpec(ctx, scope, attr->paramtype)))
    return;

  if ( attr->simples )
  {
    for (le = ysLstHead(attr->simples); le; le = ysLstNext(le))
    {
      name = (char *) ysLstVal(le);
      if (ycsNewDef(ctx, scope, name, attr->line))
      {
	newobj = yrCreateAttribute(scope, name, type, (sword) attr->readon);
	yrSetSrcInfo( newobj, attr->line->name, attr->line->line);
        DISCARD ycSymInsert( ctx->symtbl, newobj);
      }
    }
  }
}



void ycsOpDcl(ycctx *ctx, yrobj *scope, yctOpDcl *op)
{
  yrobj *newobj, *rettype, *obj;
  yrpar *par, *par2;
  yslst *rlst = (yslst*) 0;	
  yslst *pars = (yslst*) 0;	
  ysle  *le, *le2;
  char  *str;
  yctScopedName *sn;
  yctParamDcl *pd;

  if (!ycsNewDef(ctx, scope, op->id, op->line))
    return;

  
  if (op->optype->paramtype)
    rettype = ycsParamTypeSpec(ctx, scope, op->optype->paramtype);
  else
    rettype = yrGetPrimitive(ctx->repository, yrpkvoid);

  
  if (op->paramdcls->paramdcls)
  {
    pars = ysLstCreate();
    for (le = ysLstHead(op->paramdcls->paramdcls); le; le = ysLstNext(le))
    {
      pd = (yctParamDcl *) ysLstVal(le);

      
      for (le2 = ysLstHead(pars); le2; le2 = ysLstNext(le2))
      {
        par2 = (yrpar *) ysLstVal(le2);
        if (!strcmp(par2->name, pd->simple))
          break;
      }

      if (le2)
        ysRecord( YCMSG(71), YCERRSEV, YCERRLN(pd->line), 
                  YSLSTR(pd->simple), YSLEND);
      else
      {
        par = (yrpar *) ysmGlbAlloc(sizeof(yrpar), "yrpar");

        if (pd->paramattr == YCTIN)
          par->mode = YOMODE_IN;
        else if (pd->paramattr == YCTOUT)
          par->mode = YOMODE_OUT;
        else
          par->mode = YOMODE_INOUT;

        par->name = ysStrDup(pd->simple);
        par->type = ycsParamTypeSpec(ctx, scope, pd->typespec);

        DISCARD ysLstEnq(pars, (dvoid *) par);
        ycsKeywordChk( ctx, pd->simple, pd->line);
      }
    }
  }

  
  if (op->raisesexpr)
  {
    rlst = ysLstCreate();
    for (le = ysLstHead(op->raisesexpr->names); le; le = ysLstNext(le))
    {
      sn = (yctScopedName *) ysLstVal(le);
      obj = ycsLookup(ctx, scope, sn);
      if (obj)
      {
        if (yrGetKind(obj) != yrdkException)
        {
          str = ycsPrintScoped(ctx, sn);
          ysRecord( YCMSG(70), YCERRSEV, YCERRLN(sn->line), 
                    YSLSTR(str), YSLEND);
          ycsPrintDef(ctx, sn->line, obj);
          ysmGlbFree((dvoid*)str);
        }
        else
          DISCARD ysLstEnq(rlst, (dvoid *) obj);
      }
    }
  }
  else
    rlst = (yslst *) 0;

  newobj = yrCreateOperation(scope, op->id, rettype, rlst, pars,
                             (op->opattribute ? 1 : 0));
  yrSetSrcInfo( newobj, op->line->name, op->line->line);
  DISCARD ycSymInsert( ctx->symtbl, newobj);

  
  if (op->contextexpr)
  {
    yslst* ctxts = ysLstCreate();
    ysle* le;

    
    ysRecord( YCMSG(69), YCERRSEV, YCERRLN(op->line), YSLEND);
    for ( le = ysLstHead(op->contextexpr->ids); le; le = ysLstNext(le))
    {
      char* id = ycStrLitToString( ctx, (yslst*)ysLstVal(le));
      size_t len = (id ? strlen(id) : 0);
      size_t i;

      if ( len == 0 )               
      {
        ysRecord( YCMSG(103), YCWARNSEV, YCERRLN(op->line), YSLSTR(id), 
                  YSLEND);
        if ( id )
          ysmGlbFree( (dvoid*)id);
      }
      else
      {
        for ( i = 0; i < (len - 1); i++)
        {
          if ( id[i] == '*' )        
            ysRecord( YCMSG(104), YCERRSEV, YCERRLN(op->line), YSLSTR(id), 
                      YSLEND);
        }
        DISCARD ysLstEnq( ctxts, (dvoid*)id);
      }
    }
    if ( ysLstCount( ctxts) > 0 )
      yrSetOpCtxtList( newobj, ctxts);
    else
      ysLstDestroy(ctxts, (ysmff)0);
  }
}



yrobj *ycsParamTypeSpec(ycctx *ctx, yrobj *scope, yctParamTypeSpec *pts)
{
  ub4 bound;
  yctStringType *strt;

  switch (pts->tag)
    {
    case ycttBase:
      return ycsBaseTypeSpec(ctx, scope, MEMBER(pts, base));
    case ycttStringType:
      strt = MEMBER(pts, stringtype);
      if (!strt->intconst)
	return yrGetPrimitive(ctx->repository, yrpkstring);
      else
	{
          yrobj* newobj;

	  bound = ycsPosIntExpr(ctx, scope, strt->intconst);
	  newobj = yrCreateString(ctx->repository, bound);
          DISCARD ycSymInsert( ctx->symtbl, newobj);
          return newobj;
	}
    case ycttScopedName:
      return ycsNameToType(ctx, scope, MEMBER(pts, name));
    default:
      return (yrobj *) 0;
    }
}
