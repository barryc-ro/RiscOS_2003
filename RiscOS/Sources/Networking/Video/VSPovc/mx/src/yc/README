This is the Media Net IDL compiler, mnidlc.

The compiler is divided into a front end which performs pre-processing
(ycpp*.c), parsing (ycosyn.y, ycprs.c), and semantic analysis (ycsem*.c);
and one or more language mapping specific code generators. currently 
supported languages are C [ycc*.c], C++ [yccp*.c], and ITL [yci*.c]).

ITL is the RTS simulator language. The compiler will generate stubs
to drive ITL tests for interfaces. The generated code is in C and 
re-uses most of the C code generator, so check yci* for compatibility
when munging ycc*.

A single run of the compiler can generate stubs in multiple languages,
but it the generated files may or may not collide with each other if
the user doesn't intervene. For example, OCCS requires us to use ".h"
for header file suffixes for both C and C++, so if you gen both C and
C++ stubs into the same directory, you'll have a problem. Resources
exist to deal with this, but the burden is on the user.

The FE library (libycfe.a) does not depend on anything from the BE's, but
the BE's do need some generic code from the FE. The code generators are
broken down into a driver (yc*map.c), header generation (yc*hdr.c),
client stub generation (yc*clnt.c), server stub generation( yc*srv.c),
and implementation template generation (yc*tmpl.c). The various code
generators do not necessarily build into completely separable libraries.
For example, C++ code gen pulls on some things from the C code generator.

FE
--
The compiler generates IFR data files between semantic analysis and code
generation, if requested. Though the compiler kicks this off, it is
handled completely inside the IFR. See yrwrite.c.

IMPORTANT: If you change the grammar (ycosyn.y), you MUST checkin ycosyn.y
in first, do a build, and THEN check in the related files (ycosax.c, ycosyn.c,
etc.). Otherwise, the timestamps on files will cause make to think it needs
to regenerate yco*.c. Since most users of the vob do not have access to
SLAX, the parser generator, this will make you a very unpopular person.

The pre-processing and parse phases result in a set of AST's which semantic
analysis munches into Interface Repository objects (yrobj's). 

All error reporting is the exclusive responsibility of the FE. The only
errors which should ever occur in the code generators are catastrophic
in nature (I/O errors, out of memory, etc.). Error reporting is done thru
ysRecord, but the compiler has a custom sink and filters. See ycmain.c,
ycrec.c, and yc.h for details. The messages are in OMNIDLC.msg.

CODE GEN
--------
Code gen only proceeds if there are no errors, and is performed on the
list of IFR objects generated during semantic analysis. Sort of...

In reality, a simple list of yrobj's doesn't do the trick because the
compiler needs to be able to distinguish things like module pieces and
interface forward declarations. So, code generation is actually driven
off of ycgobj's, which are a thin wrapper around yrobj's. Similarly, though
the IFR provides the bulk of the compiler symbol table, we need to be
able to decorate symbols with additional information, so we have ycsym.
Both the symbol table and the list of ycgobj's are generated by the
FE and are accessible to the BE's through the ycctx.

Each code generator is expected to make a ycgmap (yc.h) object available
to main. A ycgmap contains code gen callbacks used by the FE, as well as
language mapping specific flags used only by the code generators. During
code gen, the compiler context (ycctx) always contains a pointer to the
current code gen language mapping. 

For C and C++ code generation, include files are handled by generating
enough declarations from the include file(s) to make the generated header
stand-alone. That is, including foo.idl does not generate a header which
depends on foo.h.

TESTING
-------
The test bed is currently very primitive, but there is a small suite
of error tests and compilation tests. See /vobs/mx/tst/yc/{compile, err}.
Both are based on diff'ing compiler output against master files, so they're
an eternal maintenance headache any time you change the stubs or the error
message format.

At least one test should be added for every bug, and a new error test
should be added every time you add an error or warning message. See the
test directories for more information.

Media Net itself can also be used to test the compiler since the ORB
daemon (yd), the Object Runtime (yo), the IFR (yr), and the event
server (ye) all have IDL components.
