/* mx/src/yc/pxslax.h */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/


/* $Header$ */



 


#ifndef PXTABLE
#  define PXTABLE

#  ifndef PX_IN_MAIN
typedef struct {
  char *toknam;
  sb2 tokval;
} pxtmty;
#    include <pxtokn.h>
#  endif


typedef struct {
  ub2 type;                                           
  ub2 action;                 
} pxacdf;


struct lrframe {
  sb2 state;                                
  sb2 symbol;                                                      
  sb2 srclin;                          
  sb2 srccol;                        
  char *srcnam;               
  PXVALTYPE val;                                      
};

typedef struct lrframe pxstk;


#  define PXERROR   0
#  define PXACCEPT  1
#  define PXSHIFT   2
#  define PXREDUCE  3


#  define MACHBITS 32
#  define SETBIT(a, i) ((a)[(i)>>5] |= (1<<((i) & 037)))
#  define BIT(a, i)    ((a)[(i)>>5] &  (1<<((i) & 037)))
#  define REMBIT(a, i) ((a)[(i)>>5] &= ~(1<<((i) & 037)))
#  define TBIT(a, i)   ((a) & (1 << (i)))


#  define PXMAXDEPTH 150


#  define PXMAXERRLEN  256


typedef struct pxnmach pxnmach;
struct pxnmach {
  int       debug;                                             
  sb1       fnderr;        
  sb1       ngrams;                                    
  ub1       status;                     
  sb2       partop;                                    
  sb2       accept;                                   
  sb2       pxtoid_;                   
  ub2       pxtklen;                                     
  size_t    valsize;                                     
  size_t    macsize;                                   
  size_t    frmsize;                                       
  size_t    mnssize;                     
  sb2       pxnonts;                               
  sb2       pxterms;                                  
  ub4      *pxextk_;                                
  ub2       pxtablen;                                   
  const sb2 *pxdfact_;                                     
  const sb2 *pxdfgoto_;                                      
  const sb2 *pxpact_;                             
  const sb2 *pxpgoto_;                               
  const sb2 *pxatabl_;                                     
  const sb2 *pxchek_;                             
  const sb2 *pxlhsn_;                                    
  const sb2 *pxrhsc_;                                     
  const sb2 *pxroff_;                                   
  const sb2 *pxgram_;                                
  sb2 *pxsubs_;                                       
  sb2 *pxtmap_;                      
  sb2 *pxtkno_;                      
  const sb2 *pxntgr_;                       
  sb2 *pxsytk_;                                        
  sb2 *pxcorl_;                                          
  char * *pxdbpd_;                               
  char * *pxdbtm_;                                 
  pxtokn* (**pxlex_)(void *, int, ... );                     
  void    (**pxred_)(pxnmach *, ub2, void *);            
  int     (*pxkywd_)(void *, sb2, pxtokn *);  
  pxtokn* (*pxgett)(void *, int, ...);                        
  void    (*pxredc_)(pxnmach *, ub2, void *);             
  pxstk parse[PXMAXDEPTH];                                
  pxacdf pxacstk[PXMAXDEPTH];                                
  ub2    pxnumacts;                                    
};


#define pxtmmp(idx)  "unknown"
#  define pxntmp(idx) "unknown"


#  define PXMNORMAL 0                          
#  define PXMACCEPT 1                          
#  define PXMERROR  2                          
#  define PXFATAL   3                           

#  define PXOVERFL  6                            


#  define PXDISASTER 2                                    
#  define PXTRYAGAIN 3                                      




void pxstrt(void *cs, int debug,
	    pxtokn* (*calledlex)(void *, int, ...),
	    void * (*allocmem)(size_t), void (*freemem)(void *),
	    int (*kywd)(void *, sb2, pxtokn *), sb1 *err, sb2 idval);


void     pxnspus(pxnmach *, sb2, sb2, PXVALTYPE *, sb2, sb2, char *);
sb2      pxngoto(pxnmach *, ub2, ub2);
pxnmach *pxnmove(pxnmach *, pxtokn *, void *, char *);

sb2      pxnmstt(pxnmach *);
int      pxnrcov(pxnmach *, pxtokn *, void *, char *);

typedef sb2 pxelmtyp;

#endif
