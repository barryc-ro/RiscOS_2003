/* mx/src/yc/ycsemprg.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YR_ORACLE
#include <yr.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif

STATICF void ycsDbAttrPragma( ycctx* ctx, yrobj* scoped,
                              yctPragmaDbAttr* prg, ycln* ln);
STATICF boolean ycprgAdd( ycctx* ctx, yrobj* obj, ycln* ln, ycprg_kind kind, 
                          dvoid* data, ycprg_kind excludes);
STATICF void ycsDbCreatePragma( ycctx* ctx, yrobj* scope, 
                                yctPragmaDbCreat* prg, ycln* ln);
STATICF void ycsDbListPragma( ycctx* ctx, yrobj* scope, 
                              yctPragmaDbLst* prg, ycln* ln);





void ycsPragma( ycctx* ctx, yrobj* scope, yctPragma* prg)
{
  yrobj* obj;
  sword sz;

  switch (prg->tag)
  {
    case ycttPragmaId:
    {
      yctPragmaId* p = MEMBER(prg, prgid);
      sz = strlen( p->id);
      if ( sz <= 2 )             
        ysRecord( YCMSG(83), YCERRSEV, YCERRLN(prg->line), YSLEND);
      else
      {
	obj = ycsLookup( ctx, scope, p->name);
	if ( obj != (dvoid*)0 )
	{
          p->id[sz-1] = '\0';          
          yseTry
          {
	    yrSetId( obj, p->id+1);      
          }
          yseCatch( YR_EX_INVALIDID)
          {
            ysRecord( YCMSG(84), YCERRSEV, YCERRLN(prg->line), YSLEND);
          }
          yseEnd;
	}
      }
      break;
    }
    case ycttPragmaPrefix:
    {
      yctPragmaPrefix* p = MEMBER(prg, prgprefix);
      sz = strlen( p->prefix);
      p->prefix[sz-1] = '\0';            
      yrSetPrefix( scope, p->prefix + 1);
      break;
    }
    case ycttPragmaVersion:
    {
      yctPragmaVersion* p = MEMBER(prg, prgversion);
      obj = ycsLookup( ctx, scope, p->name);
      if ( obj != (dvoid*)0 )
        yrSetVersion( obj, p->vers);
      break;
    }
    case ycttPragmaDbAttr:
      if ( ysResGetBool( "mnidlc.iao-srvr-gen") && 
           ysResGetBool( "mnidlc.server-template") )
      {
        ycsDbAttrPragma( ctx, scope, MEMBER(prg, prgdbattr), prg->line);
      }
      
      break;
    case ycttPragmaDbCreat:
      if ( ysResGetBool( "mnidlc.iao-srvr-gen") && 
           ysResGetBool( "mnidlc.server-template") )
      {
        ycsDbCreatePragma( ctx, scope, MEMBER(prg,prgdbcreate), prg->line);
      }
      
      break;
    case ycttPragmaDbLst:
    {
      if ( ysResGetBool( "mnidlc.iao-srvr-gen") && 
           ysResGetBool( "mnidlc.server-template") )
      {
        ycsDbListPragma( ctx, scope, MEMBER(prg,prgdblst), prg->line);
      }
      
      break;
    }
    default:
      yseThrow(YS_EX_FAILURE);
      break;
  }
}





STATICF void ycsDbAttrPragma( ycctx* ctx, yrobj* scope, 
                              yctPragmaDbAttr* prg, ycln* ln)
{
  yrobj* noreg obj;
  char* attrnm = ycsPrintScoped(ctx, prg->name);
  size_t len = 0;

  NOREG(obj);

   
  yseTry
    obj = yrLookup( scope, attrnm);
  yseCatchAll
    
    if ( ysResGetBool( "mnidlc.verbose") )
      ysRecord( YCMSG(93), YCWARNSEV, YCERRLN(ln), YSLSTR(attrnm),YSLEND);
    obj = (yrobj*)0;
  yseEnd

  if ( obj )
  {
    if ( yrGetKind(obj) != yrdkAttribute )
      ysRecord( YCMSG(90), YCERRSEV, YCERRLN(ln), YSLSTR(attrnm),YSLEND);
    
    else
    {
      char* key = ycStrLitToString( ctx, prg->keystr);

      if ( !key || (strlen(key) == 0) )      
        ysRecord( YCMSG(95), YCERRSEV, YCERRLN(ln), YSLSTR(attrnm),YSLEND);
      else
        ycprgAdd( ctx, obj, ln, ycprg_dbAttr, (dvoid*)key, ycprg_all);
    }
  }
  ysmGlbFree( (dvoid*) attrnm);
}




STATICF void ycsDbCreatePragma( ycctx* ctx, yrobj* scope, 
                                yctPragmaDbCreat* prg, ycln* ln)
{
  char* opnm = ycsPrintScoped( ctx, prg->name);
  yrobj* obj;             
  yslst* pars;            
  ysle* pe;               
  ysle* le;               
  yslst* parmaplst;       
  yrobj* rettype;

  
  yseTry
  {
    obj = yrLookup( scope, opnm);
  }
  yseCatchAll
  {
    if ( ysResGetBool( "mnidlc.verbose") )
      ysRecord( YCMSG(93), YCWARNSEV, YCERRLN(ln), YSLSTR(opnm),YSLEND);
    obj = (yrobj*)0;
  }
  yseEnd

  if ( !obj )
    goto err;

  
  if ( yrGetKind(obj) != yrdkOperation )
  {
    ysRecord( YCMSG(89), YCERRSEV, YCERRLN(ln), YSLSTR(opnm),YSLEND);
    goto err;
  }

  pars = yrOpData(obj).pars;
  if ( !pars )
  {
    ysRecord( YCMSG(91), YCERRSEV, YCERRLN(ln), YSLSTR(opnm),YSLEND);
    goto err;
  }

  
  rettype = yrOpData(obj).rettype;
  if ( yrGetKind(rettype) == yrdkAlias )
    rettype = yrGetAliasBaseType(rettype);
  if ( yrGetKind(rettype) != yrdkInterface )
  {
    ysRecord( YCMSG(97), YCERRSEV, YCERRLN(ln), YSLEND);
    goto err;
  }

  
  parmaplst = ysLstCreate();
  for (le = ysLstHead(prg->mapping); le; le = ysLstNext(le))
  {
    yctPrgParKey* prgpar = (yctPrgParKey*) ysLstVal(le);
    yrpar* match;

    for (pe = ysLstHead(pars); pe; pe = ysLstNext(pe))
    {
      match = (yrpar*) ysLstVal(pe);
      if ( strcmp( prgpar->paramnm, match->name) == 0 )
        break;
    }
    if ( !pe )      
    {
      ysRecord( YCMSG(92), YCERRSEV, YCERRLN(ln), YSLSTR(opnm), 
                YSLSTR(prgpar->paramnm), YSLEND);
      ysLstDestroy( (dvoid*)parmaplst, (ysmff)ycprgparDestroy);
      goto err;
    }
    else            
    {
      ysle* me;
      ycprgpar* mpar;

      for ( me = ysLstHead(parmaplst); me; me = ysLstNext(me))
      {
        mpar = (ycprgpar*)ysLstVal(me);
        if ( mpar->par == match )
        {             
          ysRecord( YCMSG(96), YCERRSEV, YCERRLN(ln), YSLSTR(mpar->par->name),
                    YSLSTR( mpar->key), YSLEND);
          ysLstDestroy( (dvoid*)parmaplst, (ysmff)ycprgparDestroy);
          goto err;
        }
      }
      if ( !me )       
      {
        mpar = ysmGlbAlloc( sizeof(ycprgpar), "ycprgpar");
        mpar->par = match;
        mpar->key = ycStrLitToString( ctx, prgpar->keystr);
        if ( !mpar->key || (strlen(mpar->key) == 0) )
        {    
          ysRecord( YCMSG(95), YCERRSEV, YCERRLN(ln), 
                    YSLSTR(match->name), YSLEND);
          ysLstDestroy( (dvoid*)parmaplst, (ysmff)ycprgparDestroy);
          ycprgparDestroy( (dvoid*)mpar);
          goto err;
        }
        else
          DISCARD ysLstEnq(parmaplst, (dvoid*) mpar);
      }
    }
  }

  
  if ( !ycprgAdd( ctx, obj, ln, ycprg_dbCreate, (dvoid*)parmaplst, ycprg_all) )
  {         
    ysLstDestroy( (dvoid*)parmaplst, (ysmff)ycprgparDestroy);
  }
err:
  ysmGlbFree( (dvoid*)opnm);
}




STATICF void ycsDbListPragma( ycctx* ctx, yrobj* scope, 
                              yctPragmaDbLst* prg, ycln* ln)
{
  char* opnm = ycsPrintScoped( ctx, prg->name);
  yrobj* type;
  yslst* pars;
  yrobj* obj;

  yseTry
    obj = yrLookup( scope, opnm);
  yseCatchAll
    if ( ysResGetBool( "mnidlc.verbose") )
      ysRecord( YCMSG(93), YCWARNSEV, YCERRLN(ln), YSLSTR(opnm),YSLEND);
    obj = (yrobj*)0;
  yseEnd
  if ( obj )           
  {
    if ( yrGetKind(obj) != yrdkOperation )
      ysRecord( YCMSG(89), YCERRSEV, YCERRLN(ln), YSLSTR(opnm), YSLEND);
    else
    {
      
      type = yrGetAliasBaseType( yrOpData(obj).rettype);
      if ( yrGetKind( type) == yrdkSequence )
      {
        type = yrGetAliasBaseType( yrSeqData(type).elmtype);
        if ( yrGetKind( type) != yrdkInterface )
          ysRecord( YCMSG(98), YCERRSEV, YCERRLN(ln), YSLEND);
      }
      else
        ysRecord( YCMSG(98), YCERRSEV, YCERRLN(ln), YSLEND);

      
      pars = yrOpData(obj).pars;
      if ( pars && (ysLstCount(pars) == 1) )
      {
        yrpar* par = (yrpar*)ysLstVal( ysLstHead(pars));

        type = yrGetAliasBaseType( par->type);
        if ( (yrGetKind(type) != yrdkStruct) || (par->mode != YOMODE_INOUT) )
          ysRecord( YCMSG(99), YCERRSEV, YCERRLN(ln), YSLEND);
        else 
          ycprgAdd( ctx, obj, ln, ycprg_dbList, (dvoid*)0, ycprg_all);
      }
      else
        ysRecord( YCMSG(99), YCERRSEV, YCERRLN(ln), YSLEND);
    }
  }
  ysmGlbFree( (dvoid*)opnm);
}




void ycprgDestroy( dvoid* data)
{
  if ( data )
  {
    ycprg* prg = (ycprg*) data;

    switch ( prg->kind )
    {
      case ycprg_dbAttr:
        if ( prg->data.key )
          ysmGlbFree( (dvoid*) prg->data.key);
        break;
      case ycprg_dbCreate:
        if ( prg->data.mapping )
          ysLstDestroy( prg->data.mapping, ycprgparDestroy);
        break;
      default:
        break;
    }
    ysmGlbFree( (dvoid*)data);
  }
}




void ycprgparDestroy( dvoid* data)
{
  if ( data )
  {
    ycprgpar* par = (ycprgpar*)data;

    if ( par->key )
      ysmGlbFree( (dvoid*)par->key);
      
  }
  ysmGlbFree( data);
}




STATICF boolean ycprgAdd( ycctx* ctx, yrobj* obj, ycln* ln, ycprg_kind kind, 
                          dvoid* data, ycprg_kind excludes)
{
  ycsym* syminfo = ycSymLookup( ctx->symtbl, obj);
  ycprg* prgma = (ycprg*)0;
  boolean enq = TRUE;

  
  if ( !syminfo->pragmas )
  {
    syminfo->pragmas = ysLstCreate();
  }

  if ( ysLstCount( syminfo->pragmas) == 0 )
  {
    prgma = (ycprg*) ysmGlbAlloc( sizeof(ycprg), "ycprg");
    CLRSTRUCT(*prgma);
    prgma->kind = ycprg_none;
  }
  
  else if ( excludes != ycprg_none )
  {
    prgma = (ycprg*) ysLstVal(ysLstHead(syminfo->pragmas));

    if ( (excludes == ycprg_all) && 
         ((ysLstCount(syminfo->pragmas) > 1) || (kind != prgma->kind)) )
    {
      ysRecord( YCMSG(94), YCERRSEV, YCERRLN(ln), YSLEND); 
      return FALSE;
    }
    else 
    {
      ysle* le;
      for ( le = ysLstHead( syminfo->pragmas); le; le = ysLstNext(le))
        if ( excludes == ((ycprg*)ysLstVal(le))->kind )
        {
          ysRecord( YCMSG(94), YCERRSEV, YCERRLN(ln), YSLEND); 
          return FALSE;
        }
    }
    enq = FALSE;
  }

  
  switch ( kind )
  {
    case ycprg_dbAttr:
      if ( prgma->data.key )
        ysmGlbFree( (dvoid*)prgma->data.key);
      prgma->data.key = (char*) data;
      break;
    case ycprg_dbCreate:
      if ( prgma->data.mapping )
        ysLstDestroy( (dvoid*)prgma->data.mapping, (ysmff)ycprgparDestroy);
      prgma->data.mapping = (yslst*)data;
    case ycprg_dbList:
    default:
      break;
  }
  prgma->kind = kind;
  if ( enq )
    DISCARD ysLstEnq( syminfo->pragmas, (dvoid*)prgma);
  return TRUE;
}
