/* mx/src/yc/ycsym.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif



STATICF void ycSymDestroy( dvoid* usrp);
STATICF ub4 ycSymHash( CONST dvoid* key, size_t keysz, ub4 max);
STATICF sword ycSymEq( dvoid* elem, dvoid* key, size_t keysz);

#ifndef YCSYMROWS
#define YCSYMROWS 511
#endif




void ycSymTblDestroy( ycsymtbl* tbl)
{
  if ( tbl )
    ysHshDestroy( (yshsh*)tbl);
}




ycsymtbl* ycSymTblCreate()
{
  return (ycsymtbl*) ysHshCreate( YCSYMROWS, ycSymHash, ycSymEq, ycSymDestroy);
}




STATICF void ycSymDestroy( dvoid* usrp)
{
  if ( usrp )
  {
    ycsym* sym = (ycsym*)usrp;

    if ( sym->pragmas )
      ysLstDestroy( sym->pragmas, ycprgDestroy);
    if ( sym->opsNattrs )
      ysLstDestroy( sym->opsNattrs, (ysmff)0);
    ysmGlbFree( usrp);
  }
}




STATICF ub4 ycSymHash( CONST dvoid* key, size_t keysz, ub4 max)
{
  ub4 hash = 0;
  CONST ub1* p = (ub1*)(dvoid*) &key;
  ub4 i;
 
  for ( i = 0; i < keysz; i++ )
    hash += p[i];
 
  return hash % max;
}




STATICF sword ycSymEq( dvoid* elem, dvoid* key, size_t keysz)
{
  ycsym* sym = (ycsym*) elem;

  return !(((yrobj*)sym->ifrobj) == (yrobj*)key);
}




ycsym* ycSymLookup( ycsymtbl* tbl, yrobj* ifrsym)
{
  return (ycsym*) ysHshFind( (yshsh*)tbl, (dvoid*)ifrsym, sizeof(ifrsym));
}




ycsym* ycSymInsert( ycsymtbl* tbl, yrobj* ifrsym)
{
  ycsym* sym = ycSymLookup( tbl, ifrsym);

  if ( !sym )
  {
    sym = (ycsym*) ysmGlbAlloc( sizeof(ycsym), "ycsym");
    CLRSTRUCT(*sym);
    sym->ifrobj = ifrsym;
    ysHshIns( (yshsh*)tbl, (dvoid*)ifrsym, sizeof(ifrsym), (dvoid*)sym);
  }
  else
  {
    char* nm = yrGetAbsoluteName( ifrsym);

    ysRecord( YCMSG(500), YSLSEV_DEBUG(1), (char*)0, YSLSTR(nm), YSLEND);
    ysmGlbFree( (dvoid*)nm);
  }
  return sym;
}




void  ycSymRemove( ycsymtbl* tbl, yrobj* ifrsym)
{
  dvoid* sym;

  sym = ysHshRem( (yshsh*)tbl, (dvoid*)ifrsym, sizeof(ifrsym));
  if ( sym )
    ycSymDestroy( sym);
}




void ycSymTblReport( ycsymtbl* tbl)
{

}




void ycSymTblFlush( ycsymtbl* tbl, ycsymwcb callback, dvoid* usrp)
{
  ysHshWalk( tbl, (yshshwcb)callback, usrp);
}
