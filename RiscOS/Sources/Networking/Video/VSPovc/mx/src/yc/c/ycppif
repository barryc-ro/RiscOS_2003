/* mx/src/yc/ycppif.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCPP_ORACLE
#include <ycpp.h>
#endif
#ifndef YCOTOK_ORACLE
#include <ycotok.h>
#endif

STATICF boolean ycppIfEval(ycctx *ctx, ysle *elm, sword pos, sword dirid);
STATICF sb4 ycppEvalCondExpr(ycctx *ctx, ycln *ln, sword *pos);
STATICF sb4 ycppEvalLogOrExpr(ycctx *ctx, ycln *ln, sword *pos);
STATICF sb4 ycppEvalLogAndExpr(ycctx *ctx, ycln *ln, sword *pos);
STATICF sb4 ycppEvalIncOrExpr(ycctx *ctx, ycln *ln, sword *pos);
STATICF sb4 ycppEvalExcOrExpr(ycctx *ctx, ycln *ln, sword *pos);
STATICF sb4 ycppEvalAndExpr(ycctx *ctx, ycln *ln, sword *pos);
STATICF sb4 ycppEvalEqExpr(ycctx *ctx, ycln *ln, sword *pos);
STATICF sb4 ycppEvalRelExpr(ycctx *ctx, ycln *ln, sword *pos);
STATICF sb4 ycppEvalShExpr(ycctx *ctx, ycln *ln, sword *pos);
STATICF sb4 ycppEvalAddExpr(ycctx *ctx, ycln *ln, sword *pos);
STATICF sb4 ycppEvalMulExpr(ycctx *ctx, ycln *ln, sword *pos);
STATICF sb4 ycppEvalUnaryExpr(ycctx *ctx, ycln *ln, sword *pos);
STATICF sb4 ycppEvalPrimExpr(ycctx *ctx, ycln *ln, sword *pos);
STATICF sb4 ycppEvalNum(ycctx *ctx, ycln *ln, ysstr *txt);


void ycppIf(ycctx *ctx, ysle *elm, sword pos, sword dirid)
{
  boolean seenelse, beenok, condition;
  ycln   *ln;
  ysle   *le;
  sword   lvl;

  ln = (ycln *) ysLstVal(elm);

  condition = ycppIfEval(ctx, elm, pos, dirid);
  ycLnBlank(ctx, ln);

  seenelse = FALSE;
  beenok = FALSE;

  
  lvl = 1;
  for (le = elm; le && lvl; le = ysLstNext(le))
    {
      ln = (ycln *) ysLstVal(le);
      if (condition)
	beenok = TRUE;

      
      if (ln->dir)
	{
	  dirid = ycppDirIdent(ln->text, &pos);

	  switch (dirid)
	    {
	    case YCDIR_ELIF:
	      if (lvl == 1)
		{
		  if (seenelse)
                    ysRecord( YCMSG(30), YCERRSEV, YCERRLN(ln), YSLEND);
		  else
		    condition =
		      (beenok ? FALSE : ycppIfEval(ctx, le, pos, dirid));

		  ycLnBlank(ctx, ln);
		}
	      else if (!condition)
		ycLnBlank(ctx, ln);
	      break;
	    case YCDIR_ELSE:
	      if (lvl == 1)
		{
		  if (seenelse)
                    ysRecord( YCMSG(29), YCERRSEV, YCERRLN(ln), YSLEND);
		  else
		    condition = !beenok, seenelse = TRUE;

		  ycLnBlank(ctx, ln);
		}
	      else if (!condition)
		ycLnBlank(ctx, ln);
	      break;
	    case YCDIR_ENDIF:
	      lvl--;
	      if (!lvl || !condition)
		ycLnBlank(ctx, ln);
	      break;
	    case YCDIR_IF:
	    case YCDIR_IFDEF:
	    case YCDIR_IFNDEF:
	      lvl++;
	      if (!condition)
		ycLnBlank(ctx, ln);
	      break;
	    default:
	      if (!condition)
		ycLnBlank(ctx, ln);
	      break;
	    }
	}
      else
	{
	  
	  if (!condition)
	    ycLnBlank(ctx, ln);
	}
    }

  if (!le && lvl)
    ysRecord( YCMSG(30), YCERRSEV, YCERRLN((ycln*)ysLstVal(elm)), YSLEND);
}


STATICF boolean ycppIfEval(ycctx *ctx, ysle *elm, sword pos, sword dirid)
{
  boolean seenparen;
  noreg boolean condition = FALSE;
  sword   cls, sp, op, val;
  ysstr  *id;
  ycmd   *md;
  ycln   *ln;

  NOREG(condition);
  ln = (ycln *) ysLstVal(elm);

  
  if (dirid == YCDIR_IFDEF || dirid == YCDIR_IFNDEF)
  {
    cls = ycppGetToken(ln, &pos, (sword *) 0, &id);
    if (cls != YCPP_IDENT)
    {
      if (id)
        ysStrDestroy(id);

      ysRecord( YCMSG(20), YCERRSEV, YCERRLN(ln), 
                YSLSTR((dirid == YCDIR_IFDEF ? "#ifdef" : "#ifndef")), YSLEND);

      return FALSE;
    }

    md = (ycmd *)
           ysHshFind(ctx->mdtbl, (dvoid *) ysStrToText(id), ysStrLen(id) + 1);
    ysStrDestroy(id);
    condition = (md ? TRUE : FALSE);
    return (dirid == YCDIR_IFDEF ? condition : !condition);
  }

  
  sp = op = pos;
  while ((cls = ycppGetToken(ln, &pos, (sword *) 0, &id)) != YCPP_EOL)
    {
      if (cls == YCPP_IDENT && !strcmp(ysStrToText(id), "defined"))
	{
	  ysStrDestroy(id);
	  cls = ycppGetToken(ln, &pos, &val, &id);
	  if (cls == YCPP_PUNC && val == '(')
	    {
	      seenparen = TRUE;
	      cls = ycppGetToken(ln, &pos, &val, &id);
	    }
	  else
	    seenparen = FALSE;

	  if (cls != YCPP_IDENT)
	    {
              ysRecord( YCMSG(31), YCERRSEV, YCERRLN(ln), YSLEND);
	      if (id)
		ysStrDestroy(id);
	      return FALSE;
	    }

	  if (seenparen)
	    {
	      cls = ycppGetToken(ln, &pos, &val, (ysstr **) 0);
	      if (cls != YCPP_PUNC || val != ')')
		{
                  ysRecord( YCMSG(32), YCERRSEV, YCERRLN(ln),
			    YSLSTR((dirid == YCDIR_IF ? "#if" : "#elif")), 
                            YSLEND);
		  return FALSE;
		}
	    }

	  sp = ycSkipWS(ln->text, sp, (sword) ysStrLen(ln->text));
	  ln->text = ysStrDel(ln->text, sp, pos - sp);

	  md = (ycmd *)
	    ysHshFind(ctx->mdtbl, (dvoid *) ysStrToText(id), ysStrLen(id) + 1);
	  ysStrDestroy(id);
	  ln->text = ysStrIns(ln->text, sp, (md ? "1" : "0"));

	  pos = sp;
	}
      else
	{
	  sp = pos;
	  if (id)
	    ysStrDestroy(id);
	}
    }

  
  ycppExpand(ctx, elm, op, (sword) ysStrLen(ln->text), FALSE);
  ysLstDestroy(ctx->mdexp, ysmFGlbFree);
  ctx->mdexp = ysLstCreate();

  
  yseTry
    condition = ycppEvalCondExpr(ctx, ln, &op) != 0;
    if (ycppGetToken(ln, &op, (sword *) 0, (ysstr **) 0) != YCPP_EOL)
      {
        ysRecord( YCMSG(33), YCERRSEV, YCERRLN(ln), YSLEND);
	yseThrow(YC_EX_SYNTAX);
      }
  yseCatch(YC_EX_SYNTAX)
    condition = FALSE;
  yseEnd

  return condition;
}

STATICF sb4 ycppEvalCondExpr(ycctx *ctx, ycln *ln, sword *pos)
{
  sb4   result, op2, op3;
  sword op, cls, val;

  result = ycppEvalLogOrExpr(ctx, ln, pos);

  op = *pos;
  cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
  if (cls == YCPP_PUNC && val == '?')
    {
      op2 = ycppEvalCondExpr(ctx, ln, pos);
      cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
      if (cls != YCPP_PUNC || val != ':')
	{
          ysRecord( YCMSG(33), YCERRSEV, YCERRLN(ln), YSLEND);
	  yseThrow(YC_EX_SYNTAX);
	}

      op3 = ycppEvalCondExpr(ctx, ln, pos);

      result = (result ? op2 : op3);
    }

  *pos = op;
  return result;
}

STATICF sb4 ycppEvalLogOrExpr(ycctx *ctx, ycln *ln, sword *pos)
{
  sb4   result, op2;
  sword op, cls, val;

  result = ycppEvalLogAndExpr(ctx, ln, pos);

  op = *pos;
  cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
  while (cls == YCPP_PUNC && val == LOR)
    {
      op2 = ycppEvalLogAndExpr(ctx, ln, pos);
      result = result || op2;

      op = *pos;
      cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
    }

  *pos = op;
  return result;
}

STATICF sb4 ycppEvalLogAndExpr(ycctx *ctx, ycln *ln, sword *pos)
{
  sb4   result, op2;
  sword op, cls, val;

  result = ycppEvalIncOrExpr(ctx, ln, pos);

  op = *pos;
  cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
  while (cls == YCPP_PUNC && val == LAND)
    {
      op2 = ycppEvalIncOrExpr(ctx, ln, pos);
      result = result && op2;

      op = *pos;
      cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
    }

  *pos = op;
  return result;
}

STATICF sb4 ycppEvalIncOrExpr(ycctx *ctx, ycln *ln, sword *pos)
{
  sb4   result, op2;
  sword op, cls, val;

  result = ycppEvalExcOrExpr(ctx, ln, pos);

  op = *pos;
  cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
  while (cls == YCPP_PUNC && val == '|')
    {
      op2 = ycppEvalExcOrExpr(ctx, ln, pos);
      result = result | op2;

      op = *pos;
      cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
    }

  *pos = op;
  return result;
}

STATICF sb4 ycppEvalExcOrExpr(ycctx *ctx, ycln *ln, sword *pos)
{
  sb4   result, op2;
  sword op, cls, val;

  result = ycppEvalAndExpr(ctx, ln, pos);

  op = *pos;
  cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
  while (cls == YCPP_PUNC && val == '^')
    {
      op2 = ycppEvalAndExpr(ctx, ln, pos);
      result = result ^ op2;

      op = *pos;
      cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
    }

  *pos = op;
  return result;
}

STATICF sb4 ycppEvalAndExpr(ycctx *ctx, ycln *ln, sword *pos)
{
  sb4   result, op2;
  sword op, cls, val;

  result = ycppEvalEqExpr(ctx, ln, pos);

  op = *pos;
  cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
  while (cls == YCPP_PUNC && val == '&')
    {
      op2 = ycppEvalEqExpr(ctx, ln, pos);
      result = result & op2;

      op = *pos;
      cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
    }

  *pos = op;
  return result;
}

STATICF sb4 ycppEvalEqExpr(ycctx *ctx, ycln *ln, sword *pos)
{
  sb4   result, op2;
  sword op, cls, val;

  result = ycppEvalRelExpr(ctx, ln, pos);

  op = *pos;
  cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
  while (cls == YCPP_PUNC && (val == EQ || val == NE))
    {
      op2 = ycppEvalRelExpr(ctx, ln, pos);
      if (val == EQ)
	result = (result == op2);
      else
	result = (result != op2);

      op = *pos;
      cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
    }

  *pos = op;
  return result;
}

STATICF sb4 ycppEvalRelExpr(ycctx *ctx, ycln *ln, sword *pos)
{
  sb4   result, op2;
  sword op, cls, val;

  result = ycppEvalShExpr(ctx, ln, pos);

  op = *pos;
  cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
  while (cls == YCPP_PUNC &&
	 (val == '>' || val == GE || val == '<' || val == LE))
    {
      op2 = ycppEvalShExpr(ctx, ln, pos);
      switch (val)
	{
	case '>': result = result > op2; break;
	case GE: result = result >= op2; break;
	case '<': result = result < op2; break;
	case LE: result = result <= op2; break;
	}

      op = *pos;
      cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
    }

  *pos = op;
  return result;
}

STATICF sb4 ycppEvalShExpr(ycctx *ctx, ycln *ln, sword *pos)
{
  sb4   result, op2;
  sword op, cls, val;

  result = ycppEvalAddExpr(ctx, ln, pos);

  op = *pos;
  cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
  while (cls == YCPP_PUNC && (val == YCTRS || val == YCTLS))
    {
      op2 = ycppEvalAddExpr(ctx, ln, pos);
      if (val == YCTRS)
	result >>= op2;
      else
	result <<= op2;

      op = *pos;
      cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
    }

  *pos = op;
  return result;
}

STATICF sb4 ycppEvalAddExpr(ycctx *ctx, ycln *ln, sword *pos)
{
  sb4   result, op2;
  sword op, cls, val;

  result = ycppEvalMulExpr(ctx, ln, pos);

  op = *pos;
  cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
  while (cls == YCPP_PUNC && (val == '+' || val == '-'))
    {
      op2 = ycppEvalMulExpr(ctx, ln, pos);
      if (val == '+')
	result += op2;
      else
	result -= op2;

      op = *pos;
      cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
    }

  *pos = op;
  return result;
}

STATICF sb4 ycppEvalMulExpr(ycctx *ctx, ycln *ln, sword *pos)
{
  sb4   result, op2;
  sword op, cls, val;

  result = ycppEvalUnaryExpr(ctx, ln, pos);

  op = *pos;
  cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
  while (cls == YCPP_PUNC && (val == '*' || val == '/' || val == '%'))
    {
      op2 = ycppEvalUnaryExpr(ctx, ln, pos);
      switch (val)
	{
	case '*': result *= op2; break;
	case '/': result /= op2; break;
	case '%': result %= op2; break;
	}

      op = *pos;
      cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
    }

  *pos = op;
  return result;
}

STATICF sb4 ycppEvalUnaryExpr(ycctx *ctx, ycln *ln, sword *pos)
{
  sb4   result;
  sword op, cls, val, unop;

  op = *pos;
  cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
  if (cls == YCPP_PUNC &&
      (val == '+' || val == '-' || val == '~' || val == '!'))
    unop = val;
  else
    unop = 0, *pos = op;

  result = ycppEvalPrimExpr(ctx, ln, pos);
  if (unop)
    switch (unop)
      {
      case '+':  ; break;
      case '-': result = -result; break;
      case '~': result = ~result; break;
      case '!': result = !result; break;
      }

  return result;
}

STATICF sb4 ycppEvalPrimExpr(ycctx *ctx, ycln *ln, sword *pos)
{
  sb4    result = 0;
  sword  cls, val;
  ysstr* noreg num;

  NOREG(num);
  cls = ycppGetToken(ln, pos, &val, (ysstr**)&num);
  yseTry
    switch (cls)
      {
      case YCPP_IDENT: result = 0; break;
      case YCPP_NUM:
	result = ycppEvalNum(ctx, ln, (ysstr*)num);
	break;
      case YCPP_CHAR:
	result = ycppEvalChar(ctx, ln, (ysstr*)num);
	break;
      case YCPP_STRING:
        ysRecord( YCMSG(34), YCERRSEV, YCERRLN(ln), YSLEND);
	yseThrow(YC_EX_SYNTAX);
	break;
      case YCPP_PUNC:
	if (val == '(')
	  {
	    result = ycppEvalCondExpr(ctx, ln, pos);
	    cls = ycppGetToken(ln, pos, &val, (ysstr **) 0);
	    if (cls != YCPP_PUNC || val != ')')
	      yseThrow(YC_EX_SYNTAX);
	  }
	else
	  {
            ysRecord( YCMSG(33), YCERRSEV, YCERRLN(ln), YSLEND);
	    yseThrow(YC_EX_SYNTAX);
	  }
	break;
      default:
        ysRecord( YCMSG(33), YCERRSEV, YCERRLN(ln), YSLEND);
	yseThrow(YC_EX_SYNTAX);
	break;
      }
  yseFinally
    if (num)
      ysStrDestroy((ysstr*)num);
  yseEnd

  return result;
}

STATICF sb4 ycppEvalNum(ycctx *ctx, ycln *ln, ysstr *txt)
{
  char *buf;

  buf = ysStrToText(txt);
  if (!isdigit(*buf))
    {
      ysRecord( YCMSG(36), YCERRSEV, YCERRLN(ln), YSLEND);
      yseThrow(YC_EX_SYNTAX);
    }

  if (buf[0] == '0')
    return (sb4) (buf[1] == 'x' ?
		  ycppGetHex(ctx, ln, buf + 2) : ycppGetOct(ctx, ln, buf + 1));
  else
    return ycppGetDec(ctx, ln, buf);
}

sb4 ycppEvalChar(ycctx *ctx, ycln *ln, ysstr *txt)
{
  char *buf;

  buf = ysStrToText(txt);
  if (*buf == 'L')
    buf++;

  buf++;                                                       
  if (*buf != '\\')
    return (sb4) *buf;

  buf++;
  switch (*buf)
    {
    case '\'':
    case '"':
    case '?':
    case '\\':
      return (sb4) *buf;
    case 'x':
      return ycppGetHex(ctx, ln, buf + 1);
    case '0': case '1': case '2': case '3': case '4': case '5': case '6':
    case '7': case '8': case '9':
      return ycppGetOct(ctx, ln, buf);
    case 'a': return '\a';
    case 'b': return '\b';
    case 'f': return '\f';
    case 'n': return '\n';
    case 'r': return '\r';
    case 't': return '\t';
    case 'v': return '\v';
    default:
      ysRecord( YCMSG(35), YCWARNSEV, YCERRLN(ln), YSLEND);
      return 0;
    }
}

sb4 ycppGetDec(ycctx *ctx, ycln *ln, char *buf)
{
  sb4 result;

  for (result = 0; *buf; buf++)
    {
      if (!isdigit(*buf))
	{
          ysRecord( YCMSG(36), YCERRSEV, YCERRLN(ln), YSLEND);
	  yseThrow(YC_EX_SYNTAX);
	}

      result = result * 10 + (*buf - '0');
    }

  return result;
}

ub4 ycppGetOct(ycctx *ctx, ycln *ln, char *buf)
{
  ub4 result;

  for (result = 0; *buf; buf++)
    {
      if (*buf < '0' || *buf > '7')
	{
          ysRecord( YCMSG(37), YCERRSEV, YCERRLN(ln), YSLEND);
	  yseThrow(YC_EX_SYNTAX);
	}

      result = result * 8 + (*buf - '0');
    }
  
  return result;
}

ub4 ycppGetHex(ycctx *ctx, ycln *ln, char *buf)
{
  ub4 result;

  for (result = 0; *buf; buf++)
    {
      if (*buf >= '0' && *buf <= '9')
	result = result * 16 + (*buf - '0');
      else if (*buf >= 'A' && *buf <= 'F')
	result = result * 16 + (*buf - 'A' + 10);
      else if (*buf >= 'a' && *buf <= 'f')
	result = result * 16 + (*buf - 'a' + 10);
      else
	{
          ysRecord( YCMSG(38), YCERRSEV, YCERRLN(ln), YSLEND);
	  yseThrow(YC_EX_SYNTAX);
	}
    }
  
  return result;
}
