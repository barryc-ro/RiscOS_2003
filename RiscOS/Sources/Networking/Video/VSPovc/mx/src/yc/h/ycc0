/* mx/src/yc/ycc0.h */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/


#ifndef YCC0_ORACLE
#define YCC0_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif
#ifndef YCCFP_ORACLE
#include <yccfp.h>
#endif



#define YCCEXREF(ctx) ((ctx)->style & YCSTYLE_ORA ? "externref " : "extern ")
#define YCCEXDEF(ctx) ((ctx)->style & YCSTYLE_ORA ? "externdef " : "")
#define YCCVOID(ctx) ((ctx)->style & YCSTYLE_ORA ? "dvoid " : "void ")
#define YCCSTATIC(ctx) ((ctx)->style & YCSTYLE_ORA ? "STATICF " : "static ")
#define YCCVOLATILE(ctx) ((ctx)->style & YCSTYLE_ORA ? "noreg" : "volatile")
#define YCCCONST(ctx) ((ctx)->style & YCSTYLE_ORA ? "CONST " : "const ")
#define YCCCPTR(ctx) ((ctx)->style & YCSTYLE_ORA ? "CONST_W_PTR " : "const ")
#define YCCCDATA(ctx) ((ctx)->style & YCSTYLE_ORA ? "CONST_DATA " : "const ")





#ifndef YCC_OCCS_MAX_LINE
#define YCC_OCCS_MAX_LINE 79
#endif
#ifndef YCC_DFLT_MAX_LINE
#define YCC_DFLT_MAX_LINE 256
#endif
#ifndef YCC_MIN_LINE
#define YCC_MIN_LINE 40
#endif




#define yccGenOpenGuard(ctx, fp, name, defn) \
  { \
    yccfpStartPP( fp); \
    yccfpPrint((fp),"#ifndef %s_%s\n#define %s_%s\n", (name), \
  		((defn) ? "DEFINED" : "DECLARED"), (name), \
  		((defn) ? "DEFINED" : "DECLARED")); \
    yccfpEndPP( fp); \
  }

#define yccGenCloseGuard(ctx, fp, name, defn) \
  { \
    yccfpStartPP( fp); \
    yccfpPrint((fp),"#endif /* %s_%s */\n\n", (name), \
		  ((defn) ? "DEFINED" : "DECLARED")); \
    yccfpEndPP( fp); \
  }


#define yccNeedsGuard(obj) (!ycIsEnumConst(obj))



#define yccUseGlobals(ctx) ((ctx)->lang->flags & YCCFLG_GLOB_CONST)




#define yccNeedsTypeCode( ctx, type) \
  (!((ctx)->lang->flags & YCCFLG_STATIC_TC) || ycShouldGenCode( (ctx), (type)))



#define yccGenAsync(ctx) (!((ctx)->lang->flags & YCCFLG_NO_ASYNC))



#define YCCFLG_BUILTIN_SEQ     1           
#define YCCFLG_STATIC_TC       2           
#define YCCFLG_CPLUS_KWD       4           
#define YCCFLG_GLOB_CONST      8           
#define YCCFLG_NO_SUPP_FUNCS  16           
#define YCCFLG_NO_ASYNC       32           



typedef struct 
{
  yccfp* iaofp_yccctx;
  CONST char* tcpfx_yccctx;
  CONST char* seqpfx_yccctx;
} yccctx;



#define yccTCPrefix(ctx) (((yccctx*)(ctx)->langctx)->tcpfx_yccctx)
#define yccSeqPrefix(ctx) (((yccctx*)(ctx)->langctx)->seqpfx_yccctx)
#define yccIAOfp(ctx) (((yccctx*)(ctx)->langctx)->iaofp_yccctx)



typedef sword yccfnk;
#define yccfnk_normal ((yccfnk)0)
#define yccfnk_nw ((yccfnk)1)






ycgmap* yccLangMap(ycctx *ctx);
void yccGenSysIncls(ycctx* ctx, yccfp* fp, boolean impl);
void yccGenTypeCode( ycctx* ctx, yccfp* fp, CONST char* name, CONST yotk* tc,
                     boolean external);
void yccGenFuncHdr( ycctx* ctx, yccfp* fp, yrobj* rettype, yrobj* intf,
	CONST char* funcName, yslst* params, yslst* ctxs, boolean fptr, 
        yccfnk kind);
void yccGenCopyFree( ycctx* ctx, yccfp* fp, yrobj* type, boolean defn);
boolean ycIsAnonymous( ycctx* ctx, yrobj* type);
void yccGenTypeCodeMacro( ycctx* ctx, yccfp* fp, CONST char* alias, 
                          yrobj* basetype);
void yccGenParamType( ycctx* ctx, yccfp* fp, yrobj* type, sword mode);
boolean yccIsVariableType( ycctx* ctx, yrobj* type);
void yccGenAllocator( ycctx* ctx, yccfp* fp, yrobj* type, boolean defn);
void yccGenSupportFuncs( ycctx* ctx, yccfp* fp, yrobj* type, boolean defn);
boolean yccTakeAddrOf( ycctx* ctx, yrobj* type, sword mode);
ub2 yccGetLineLimit( ycctx* ctx);
void yccGenId( ycctx* ctx, yccfp* fp, CONST char* nm1, CONST char* nm2, 
               boolean interface, CONST char* defn);
boolean yccIsKeyword( ycctx* ctx, CONST char* name);
void yccGenSimpleName( ycctx* ctx, yccfp* fp, CONST char* name);
void yccGenConstVal( ycctx* ctx, yccfp* fp, yrobj* constobj);


void ycchdr(ycctx *ctx, char *base, ycfile* fd);
void yccGenDecl(ycctx* ctx, yccfp* fp, yrobj* obj, boolean fwd);
void yccGenConstDecl(ycctx *ctx, yccfp *fp, yrobj *obj);
void yccGenIntfDecl(ycctx* ctx, yccfp* fp, yrobj* intf, boolean fwd);
void yccGenExDecl( ycctx* ctx, yccfp* fp, yrobj* ex, boolean fwd);
void yccGenStructDecl( ycctx* ctx, yccfp* fp, yrobj* sobj, boolean fwd);
void yccGenUnionDecl( ycctx* ctx, yccfp* fp, yrobj* uobj, boolean fwd);
void yccGenField( ycctx* ctx, yccfp* fp, yrobj* type, CONST char* name);
void yccGenAliasDecl(ycctx* ctx, yccfp* fp, yrobj* alias, boolean fwd);
void yccGenEnumDecl(ycctx* ctx, yccfp* fp, yrobj* eobj, boolean fwd);
void yccGenSequenceDecl(ycctx* ctx, yccfp* fp, yrobj* seq);
void yccGenAttrDecl(ycctx* ctx, yccfp* fp, yrobj* attr, boolean fptr);
void yccGenOpDecl(ycctx* ctx, yccfp* fp, yrobj* op, boolean fptr);
void yccGenParam( ycctx* ctx, yccfp* fp, yrpar* par);
void yccGenObjParam( ycctx* ctx, yccfp* fp, yrobj* intf);
void yccGenTypeName( ycctx* ctx, yccfp* fp, yrobj* type);
void yccGenParsDecl( ycctx* ctx, yccfp* fp, CONST char* opnm);
void yccGenArrayDeclr( ycctx* ctx, yccfp* fp, yrobj* arr, CONST char* declr);

#define yccGenPrimitiveName(ctx, fp, kind) \
    (yccfpPrint((fp), "%s", yccGetPrimitiveName((ctx),(kind))))


void ycctmpl( ycctx* ctx, char* base, ycfile* fd);


void yccsrv( ycctx* ctx, char* base, ycfile* fd);


void yccclnt( ycctx* ctx, char* base, ycfile* fd);
void yccGenTypeCodeDefn( ycctx* ctx, yccfp* fp, yrobj* obj, boolean external);
void yccGenStrAsChar( ycctx* ctx, yccfp* fp, CONST char* str);
void yccGenParamDesc( ycctx* ctx, yccfp* fp, CONST char* name, 
		      yslst* pars, yslst* raises, yrobj* rettype, yslst* ctxs);
void yccGenExcClient( ycctx* ctx, yccfp* fp, yrobj* ex);
void yccFormatTypeCodeDefn( ycctx* ctx, yccfp* fp, CONST yotk* tc);



char* yccGetSeqName( ycctx* ctx, yrobj* obj);
CONST char* yccGetAbsoluteName( ycctx* ctx, yrobj* obj, yrobj* inheritedBy);
CONST char* yccGetPrimitiveName( ycctx* ctx, yrpk kind);
void yccGenTypeCodeName( ycctx* ctx, yccfp* fp, yrobj* type);
CONST char* yccEnvPar( ycctx* ctx);

#endif 
