/* mx/src/yc/ycppexp.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCPP_ORACLE
#include <ycpp.h>
#endif

STATICF boolean ycFindPar(ysle *elm, sword sp, sword ep, boolean toplvl);
STATICF ysstr **ycCollect(ycctx *ctx, ycmd *md, ysle *elm, sword sp);
STATICF sword ycReplace(ycctx *ctx, ycmd *md, ysle *elm, sword sp,
			ysstr **args);
STATICF ysstr *ycStringize(ysstr *str);


void ycppExpand(ycctx *ctx, ysle *elm, sword sp, sword ep, boolean toplvl)
{
  sword  op, cls;
  size_t dlen, rlen;
  ycmd  *md;
  ysstr *id, **args;
  ycsup *sup;
  ycln  *ln;
  ysle  *le;
  char   tmpbuf[SYSFP_MAX_PATHLEN];

  ln = (ycln *) ysLstVal(elm);

  while (sp < ep)
    {
      
      op = sp;
      cls = ycppGetToken(ln, &sp, (sword *) 0, (ysstr **) 0);
      if (cls != YCPP_IDENT || sp > ep)
	continue;

      
      sp = op;
      DISCARD ycppGetToken(ln, &sp, (sword *) 0, &id);

      
      md = (ycmd *)
	ysHshFind(ctx->mdtbl, (dvoid *) ysStrToText(id), ysStrLen(id) + 1);
      ysStrDestroy(id);
      if (!md)
	continue;

      
      if (!strcmp(md->name, "__LINE__"))
	{
	  ysStrDestroy(md->rpl);
	  DISCARD sprintf(tmpbuf, "%d", ln->line);
	  md->rpl = ysStrCreate(tmpbuf);
	}
      else if (!strcmp(md->name, "__FILE__"))
	{
	  ysStrDestroy(md->rpl);
	  DISCARD sprintf(tmpbuf, "\"%s\"", ln->name);
	  md->rpl = ysStrCreate(tmpbuf);
	}

      
      op = ycSkipWS(ln->text, op, sp);

      
      for (le = ysLstHead(ctx->mdexp); le; le = ysLstNext(le))
	{
	  sup = (ycsup *) ysLstVal(le);
	  if (sup->md == md && op >= sup->off && op < sup->eor)
	    break;
	}

      if (le)
	continue;

      
      if (md->pcnt && !ycFindPar(elm, sp, ep, toplvl))
	continue;

      
      dlen = ysStrLen(ln->text);
      if (!md->pcnt)
	{
	  ln->text = ysStrDel(ln->text, op, sp - op);
	  ln->text = ysStrIns(ln->text, op, ysStrToText(md->rpl));
	  rlen = ysStrLen(md->rpl);
	}
      else
	{
	  ln->text = ysStrDel(ln->text, op, sp - op);
	  args = ycCollect(ctx, md, elm, op);
	  rlen = (args ? ycReplace(ctx, md, elm, op, args) : 0);
	}

      dlen = ysStrLen(ln->text) - dlen;

      
      for (le = ysLstHead(ctx->mdexp); le; le = ysLstNext(le))
	{
	  sup = (ycsup *) ysLstVal(le);
	  if ((sword)(op + dlen) < sup->off)
	    {
	      sup->off += (sword) dlen;
	      sup->eor += (sword) dlen;
	    }
	}

      sup = (ycsup *) ysmGlbAlloc(sizeof(ycsup), "ycsup");
      sup->md = md;
      sup->off = op;
      sup->eor = op + (sword) rlen;
      ysLstEnq(ctx->mdexp, (dvoid *) sup);

      ep += (sword) dlen;
      sp = op;
    }

  
  if (toplvl)
    {
      ysLstDestroy(ctx->mdexp, ysmFGlbFree);
      ctx->mdexp = ysLstCreate();
    }
}


STATICF boolean ycFindPar(ysle *elm, sword sp, sword ep, boolean toplvl)
{
  ycln *ln;

  ln = (ycln *) ysLstVal(elm);

  while (elm)
    {

      
      sp = ycSkipWS(ln->text, sp, ep);

      
      if (sp == (sword)ysStrLen(ln->text) && toplvl)
	{
	  elm = ysLstNext(elm);
	  if (elm)
	    ln = (ycln *) ysLstVal(elm);
	  sp = 0;
	}
      else
	break;
    }

  return (elm && sp < ep && ysStrToText(ln->text)[sp] == '(');
}


STATICF ysstr **ycCollect(ycctx *ctx, ycmd *md, ysle *elm, sword sp)
{
  sword   spcnt, argc, i, paren, op;
  size_t  len;
  char   *buf, quote;
  ycln   *ln, *nxtln;
  ysstr **args;

  spcnt = 0;
  op = sp;

  
  ln = (ycln *) ysLstVal(elm);
  while (elm)
    {
      
      len = ysStrLen(ln->text);
      sp = ycSkipWS(ln->text, sp, (sword) len);

      
      if (sp < (sword)len)
	break;
      else if (ysLstNext(elm))
	{
	  ycLnCat(ctx, elm);
	  spcnt++;
	}
    }

  
  args = (ysstr **) ysmGlbAlloc(sizeof(ysstr *) * md->pcnt, "arg array");
  for (i = 0; i < md->pcnt; i++)
    args[i] = ysStrCreate((char *) 0);
  argc = 0;

  buf = ysStrToText(ln->text);
  paren = 0;
  sp++;
  while (paren > 0 || buf[sp] != ')')
    {
      
      if (sp == (sword)ysStrLen(ln->text))
	{
	  ln->text = ysStrDel(ln->text, op, sp - op);

	  if (ysLstNext(elm))
	    {
	      
	      ycLnCat(ctx, elm);
	      spcnt++;
	      buf = ysStrToText(ln->text);
	      sp = op;
	    }
	  else
	    {
	      
              ysRecord( YCMSG(14), YCERRSEV, YCERRLN(ln), YSLEND);
	      for (i = 0; i < md->pcnt; i++)
		ysStrDestroy(args[i]);
	      ysmGlbFree((dvoid *) args);
	      return (ysstr **) 0;
	    }
	}
      else
	{
	  if (buf[sp] == '\'' || buf[sp] == '"')
	    {
	      
	      quote = buf[sp];
	      do
		{
		  if (argc < md->pcnt)
		    args[argc] = ysStrApp(args[argc], buf[sp++]);
		}
	      while (buf[sp-1] == '\\' || buf[sp] != quote);

	      args[argc] = ysStrApp(args[argc], buf[sp++]);
	    }
	  else if (!paren && buf[sp] == ',')
	    {
	      
	      argc++;
	      sp++;
	    }
	  else
	    {
	      
	      if (buf[sp] == '(')
		paren++;
	      else if (buf[sp] == ')')
		paren--;

	      
	      if (argc < md->pcnt)
		args[argc] = ysStrApp(args[argc], buf[sp]);

	      sp++;
	    }
	}
    }

  
  sp++;
  argc++;
  ln->text = ysStrDel(ln->text, op, sp - op);

  
  while (spcnt)
    {
      nxtln = ycLnNew(ln->name, ln->line + spcnt, ln->lvl + spcnt);
      ysLstIns(ctx->tu, elm, (dvoid *) nxtln);
      spcnt--;
    }

  
  if (argc != md->pcnt)
    {
      ysRecord( YCMSG(15), YCERRSEV, YCERRLN(ln), YSLSTR(md->name), 
                YSLSB4(argc), YSLEND);
      for (i = 0; i < md->pcnt; i++)
	ysStrDestroy(args[i]);
      ysmGlbFree((dvoid *) args);
      return (ysstr **) 0;
    }
  else
    return args;
}


STATICF sword ycReplace(ycctx *ctx, ycmd *md, ysle *elm, sword sp,
			ysstr **args)
{
  sword  total, off;
  ysstr *rpl;
  ycpar *par;
  char  *buf;
  ycln  *ln;
  ysle  *parle;
  size_t len, i;

  ln = (ycln *) ysLstVal(elm);

  total = 0;
  ln->text = ysStrIns(ln->text, sp, ysStrToText(md->rpl));

  for (parle = ysLstHead(md->pars); parle; parle = ysLstNext(parle))
    {
      par = (ycpar *) ysLstVal(parle);
      rpl = ysStrCreate(ysStrToText(args[par->argno]));
      off = sp + par->spos + total;

      if (par->cmd == YCPAR_NORM)
	{
	  len = ysStrLen(ln->text);
	  ln->text = ysStrIns(ln->text, off, ysStrToText(rpl));
	  ycppExpand(ctx, elm, off, off + (sword) ysStrLen(rpl), FALSE);
	  total += (sword) (ysStrLen(ln->text) - len);
	}
      else
	{
	  if (par->cmd == YCPAR_STR)
	    rpl = ycStringize(rpl);
	  else
	    {
	      if (par->cmd == YCPAR_STRIPBEF || par->cmd == YCPAR_STRIPALL)
		{
		  buf = ysStrToText(rpl);
		  len = ysStrLen(rpl);
		  for (i = 0; i < len && isspace(buf[i]); i++) ;
		  rpl = ysStrDel(rpl, 0, (sword) i);
		}

	      if (par->cmd == YCPAR_STRIPAFT || par->cmd == YCPAR_STRIPALL)
		{
		  buf = ysStrToText(rpl);
		  for (i = ysStrLen(rpl); i > 0 && isspace(buf[i-1]); i--) ;
		  rpl = ysStrDel(rpl, i, (sword) (ysStrLen(rpl) - i));
		}
	    }

	  ln->text = ysStrIns(ln->text, off, ysStrToText(rpl));
	  total += (sword) ysStrLen(rpl);
	}

      ysStrDestroy(rpl);
    }

  
  for (i = 0; i < (ub4)md->pcnt; i++)
    ysStrDestroy(args[i]);
  ysmGlbFree((dvoid *) args);

  
  return total + (sword) ysStrLen(md->rpl);
}


STATICF ysstr *ycStringize(ysstr *str)
{
  sword  sp, i, pos;
  char  *buf, quote;

  
  i = ycSkipWS(str, 0, (sword) ysStrLen(str));
  str = ysStrDel(str, 0, i);

  
  buf = ysStrToText(str);
  for (i = (sword) ysStrLen(str); i > 0 && isspace(buf[i-1]); i--) ;
  str = ysStrDel(str, i, (sword) ysStrLen(str) - i);

  
  sp = 0;

  while ((size_t) sp < ysStrLen(str))
    {
      buf = ysStrToText(str);
      if (buf[sp] == ' ')
	{
	  pos = sp++;
	  while (isspace(buf[pos]))
	    pos++;
	  str = ysStrDel(str, sp, pos - sp);
	}
      else if (buf[sp] == '"' || buf[sp] == '\'')
	{
	  quote = buf[sp];
	  if (quote == '"')
	    {
	      str = ysStrIns(str, sp, "\\");
	      buf = ysStrToText(str);
	      sp += 2;
	    }
	  else
	    sp++;

	  while ((size_t) sp < ysStrLen(str) && buf[sp] != quote)
	    {
	      if (buf[sp] == '\\' || buf[sp] == '"')
		{
		  str = ysStrIns(str, sp, "\\");
		  buf = ysStrToText(str);
		  sp += 2;
		}
	      else
		sp++;
	    }

	  if (quote == '"')
	    {
	      str = ysStrIns(str, sp, "\\");
	      buf = ysStrToText(str);
	      sp += 2;
	    }
	  else
	    sp++;
	}
      else
	sp++;
    }

  
  str = ysStrIns(str, 0, "\"");
  str = ysStrApp(str, '"');

  return str;
}
