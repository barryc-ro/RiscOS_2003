/* mx/src/yc/yccp0.h */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef YCCP0_ORACLE
#define YCCP0_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif
#ifndef YCC0_ORACLE
#include <ycc0.h>
#endif
#ifndef YCCFP_ORACLE
#include <yccfp.h>
#endif



#ifndef YC_CPHEADER
#define YC_CPHEADER "h"
#endif
#ifndef YC_CPSOURCE
#define YC_CPSOURCE "cpp"
#endif



#define YCCP_BUILTIN_SEQ_FLG   1      
#define YCCP_STATIC_TC_FLG     2      
#define YCCP_NAMESPACE_FLG     4      
#define YCCP_EH_NATIVE_FLG     8      
#define YCCP_RTTI_FLG         16      




#define yccpUseNamespaces(ctx) (FALSE)



#define YCP_CORBA(ctx) "CORBA_"




typedef void (*yccpcgfp)(ycctx* ctx, yccfp* fp, yrobj* obj, boolean fwd);
typedef void (*yccpdefcgfp)(ycctx* ctx, yccfp* fp, yslst* objs);




void yccphdr(ycctx *ctx, CONST char *base, ycfile* fd);


ycgmap* yccpLangMap(ycctx *ctx);
void yccpGenTypeCode( ycctx* ctx, yccfp* fp, yrobj* type, CONST char* name, 
                      boolean defn);
void yccpGenAnyFuncs( ycctx* ctx, yccfp* fp, yrobj* type, boolean defn);
void yccpGenExtractor( ycctx* ctx, yccfp* fp, yrobj* type, 
                       CONST char* tname, boolean defn);
void yccpGenCopyInserter( ycctx* ctx, yccfp* fp, yrobj* type, 
                          CONST char* tname, boolean defn);
void yccpGenInserter( ycctx* ctx, yccfp* fp, yrobj* type, 
                      CONST char* tname, boolean defn);
void yccpGenParamType( ycctx* ctx, yccfp* fp, yrobj* type, sword mode);
boolean yccpIsKeyword( ycctx* ctx, CONST char* name);
void yccpGenCGObjs( ycctx* ctx, yccfp* fp, yslst* objs, yccpcgfp cgcb, 
                    yccpdefcgfp defcgcb);


CONST char* yccpTypeName( ycctx* ctx, yrobj* type);
void yccpGenPrimitiveName( ycctx* ctx, yccfp* fp, yrpk kind);
boolean yccpInClassScope( ycctx* ctx, yrobj* obj);
CONST char* yccpParentPrefix( ycctx* ctx, yrobj* obj);
char* yccpSeqName( ycctx* ctx, yrobj* seq);
CONST char* yccpScopedName( ycctx* ctx, yrobj* obj);
CONST char* yccpSimpleName( ycctx* ctx, yrobj* obj);
CONST char* yccpAbsoluteName( ycctx* ctx, yrobj* obj);
CONST char* yccpAnonArrayName( ycctx* ctx, yrobj* type, CONST char* field);
CONST char* yccpFlattenAbsName( ycctx* ctx, yrobj* obj);
char* yccpElemName( ycctx* ctx, yrobj* seq);
CONST char* yccpPrimitiveName( ycctx* ctx, yrpk kind, boolean useChar);


void yccpGenArrayTVar( ycctx* ctx, yccfp* fp, yrobj* type, boolean defn );
void yccpGenStructTVar( ycctx* ctx, yccfp* fp, yrobj* type, boolean defn);
void yccpGenSeqTVar( ycctx* ctx, yccfp* fp, yrobj* type,  boolean defn);
void yccpGenIntfTVar( ycctx* ctx, yccfp* fp, yrobj* type, boolean defn);


void yccpclnt(ycctx *ctx, CONST char *base, ycfile* fd);

#endif 
