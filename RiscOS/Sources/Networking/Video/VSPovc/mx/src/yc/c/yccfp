/* mx/src/yc/yccfp.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef  SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef SYSFP_ORACLE
#include <sysfp.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif
#ifndef YC_ORACLE
#include <yc.h>
#endif



struct yccfp
{
  sysfp* fp;
  ub4 maxlen;                 
  char* ln;                   
  sb4 i;                      
  sb4 lit_start;              
  ub2 indent;                 
  sb2 pending_indent;         
  boolean escaped;            
  ub4 flags;
};



static ysmtagDecl(yccfpTag) = "yccfp";   
#define YCCFP_SZ_INDENT 2     
#define YCCFP_MAX_INDENT 10   
                              
#define YCCFP_SLACK 4         
                              



#define YCCFP_NONE 0
#define YCCFP_PP_DIR 1




STATICF void yccfpResetLn( yccfp* ycfp, ub4 back_to, ub4 back_cnt);
STATICF ub2 yccfpUpdateIndent( yccfp* fp);





yccfp* yccfpOpen( CONST char* fn, CONST char* type, CONST char* kind,
                  CONST char** errtxt, ub4 maxline)
{
  yccfp* ycfp;
  sysfp* fp;

  fp = sysfpOpen( fn, type, kind, errtxt);
  if ( fp )
  {
    ycfp = (yccfp*) ysmGlbAlloc( sizeof(yccfp), yccfpTag);
    CLRSTRUCT(*ycfp);
    if ( maxline )
    {
      ycfp->maxlen = maxline;
      if ( maxline > YCCFP_SLACK )
        ycfp->maxlen -= YCCFP_SLACK;    
      ycfp->ln = (char*) ysmGlbAlloc( maxline, "linebuf");
    }
    ycfp->lit_start = -1;
    ycfp->pending_indent = -1;
    ycfp->fp = fp;
  }
  else
    ycfp = (yccfp*)0;
  return ycfp;
}





void yccfpClose( yccfp* ycfp)
{
  if ( ycfp )
  {
    ysmCheck( ycfp, yccfpTag);
    if ( ycfp->maxlen )
    {
      if ( ycfp->i > 0 )          
        sysfpPrint( ycfp->fp, "%.*s\n", ycfp->i+1, ycfp->ln);
      ysmGlbFree( (dvoid*) ycfp->ln);
    }
    sysfpClose( ycfp->fp);
    ysmGlbFree( (dvoid*) ycfp);
  }
}





void yccfpPrint( yccfp* ycfp, CONST char* fmt, ...)
{
  va_list args;
  char* p;
  char buff[512];
  sb4 j;
  ub4 back_to;
  ub4 back_cnt;
  ub2 indent;

    
  va_start( args, fmt);
  ysFmtVaStrl( buff, sizeof(buff), fmt, args);
  va_end(args);

  if ( ycfp->maxlen == 0 )       
  {
    sysfpPrint( ycfp->fp, "%s", buff);
    return;
  }

    
  indent = yccfpIndent( ycfp);
  for (p = buff; *p; p++, ycfp->i++)
  {
    if ( (ycfp->i == 0) && (indent > 0) && (*p != '\n') )
    {         
      for ( ; ycfp->i < (sb4)(YCCFP_SZ_INDENT * indent); ycfp->i++)
        ycfp->ln[ycfp->i] = ' ';
    }

    ycfp->ln[ycfp->i] = *p;
    switch (*p)                              
    {
      case '"':
      case '\'':
        if ( ycfp->lit_start >= 0 )
        {
          if ( ycfp->ln[ycfp->lit_start] == *p )
            ycfp->lit_start = -1;
        }
        else
          ycfp->lit_start = ycfp->i;
        break;
      case '\\':
        if ( ycfp->flags & YCCFP_PP_DIR )
          break;       
        if ( *(p+1) != '\0' )
        {
          p++;
          ycfp->i++;
          ycfp->ln[ycfp->i] = *p;
        }
        else
          ycfp->escaped = TRUE;
        break;
      case '\n':
        indent = yccfpUpdateIndent( ycfp);
        goto spill;
        break;
      default:
        break;
    }
  
      
    if ( (ub4)ycfp->i >= ycfp->maxlen )
    {
spill:                        
      back_to = 0;
      back_cnt = 0;

        
      if ( ycfp->lit_start >= 0 )
      {
        if ( (ycfp->lit_start == 0) )
        {
          if ( ycfp->ln[ycfp->lit_start] == '"' )
          {                            
            ycfp->ln[ycfp->i+2] = ycfp->ln[ycfp->i];
            ycfp->ln[ycfp->i] = '"';
            ycfp->ln[ycfp->i+1] = '"';
            back_to = ycfp->i+1;
            back_cnt = 2;
            ycfp->lit_start = back_to;
          }
          else
            yseThrow( YC_EX_FAILURE);  
        }
        else                         
        {
          back_to = ycfp->lit_start;
          back_cnt = ycfp->i - ycfp->lit_start + 1;
          ycfp->i = ycfp->lit_start - 1;
        }
      }
        
      else
      {
        sb4 brk = -1;
  
        for ( j = ycfp->i; (brk < 0) && (j >= 0); j--)
        {
          switch (ycfp->ln[j])
          {
            case '\n':  case ' ':
            case '\t':  case '\r':
            case ';':   case ',':
            case '(':   case ')':
            case '?':
              brk = j;
              break;
            default:
              break;
          }
        }
        if ( brk >= 0 )    
        {
          if ( brk < ycfp->i )
          {
            back_to = brk + 1;
            back_cnt =  ycfp->i - brk;
            ycfp->i = brk;
          }
          else
          {
            back_cnt = 0;
            back_to = brk;
          }
          
        }
        else
        {    
          sysfpPrint( ycfp->fp, "%.*s\\\n", ycfp->i+1, ycfp->ln);
          ycfp->i = -1;
          indent = 0;
          continue;        
        }
      }
  
        
      if ( ycfp->ln[ycfp->i] == '\n' )
        sysfpPrint( ycfp->fp, "%.*s", ycfp->i+1, ycfp->ln);
      else if ( !(ycfp->flags & YCCFP_PP_DIR) )
        sysfpPrint( ycfp->fp, "%.*s\n", ycfp->i+1, ycfp->ln);
      else
        sysfpPrint( ycfp->fp, "%.*s \\\n", ycfp->i+1, ycfp->ln);
  
        
      if ( ycfp->ln[ycfp->i] != '\n' )
      {
        yccfpResetLn( ycfp, back_to, back_cnt);
        ycfp->i--;       
      }
      else
        ycfp->i = -1;
    }
  }
}




STATICF void yccfpResetLn( yccfp* ycfp, ub4 back_to, ub4 back_cnt)
{
  char* overlap;
  char* dyn = (char*)0;
  char fixed[80];
  ub4 spaces;
  ub4 j;

    
  spaces = (yccfpIndent(ycfp) + 1) * YCCFP_SZ_INDENT;
  if ( spaces + back_cnt > ycfp->maxlen )
    spaces = 0;

    
  if ( spaces && back_cnt && (spaces > back_to) )
  {
    if ( spaces > sizeof(fixed) )
      overlap = fixed;                 
    else
    {
      dyn = (char*) ysmGlbAlloc( back_cnt, "linbuf");
      overlap = dyn;
    }

    strncpy( overlap, ycfp->ln+back_to, back_cnt);
    for ( j = 0; j < spaces; j++)
      ycfp->ln[j] = ' ';
    strncpy( ycfp->ln + spaces, overlap, back_cnt);
    ycfp->i = spaces + back_cnt;

    if ( dyn )
      ysmGlbFree( (dvoid*)dyn);
  }
    
  else 
  {
    for (ycfp->i = 0; (ub4)ycfp->i < spaces; ycfp->i++)
      ycfp->ln[ycfp->i] = ' ';
    j = back_to;
    while ( back_cnt-- )
    {
      ycfp->ln[ycfp->i++] = ycfp->ln[j++];
    }
  }

  if ( ycfp->lit_start >= 0 )
    ycfp->lit_start = spaces;
}




void yccfpIncIndent( yccfp* ycfp)
{
  ub2* indent;

  if ( (ycfp->i > 0) || (ycfp->pending_indent >= 0) )
    indent = (ub2*) &ycfp->pending_indent;
  else
    indent = &ycfp->indent;
  *indent = *indent + 1;
}




void yccfpDecIndent( yccfp* ycfp)
{
  ub2* indent;

  if ( (ycfp->i > 0) || (ycfp->pending_indent >= 0) )
    indent = (ub2*) &ycfp->pending_indent;
  else
    indent = &ycfp->indent;
  if ( *indent > 0 )
    *indent = *indent - 1;
}




void yccfpSetIndent( yccfp* ycfp, ub2 newlvl)
{
  ub2* indent;

  if ( (ycfp->i > 0) || (ycfp->pending_indent >= 0) )
    indent = (ub2*) &ycfp->pending_indent;
  else
    indent = &ycfp->indent;
  *indent = newlvl;
}




ub2 yccfpIndent( yccfp* ycfp)
{
  return min( ycfp->indent, YCCFP_MAX_INDENT);
}




STATICF ub2 yccfpUpdateIndent( yccfp* ycfp)
{
  if ( ycfp->pending_indent >= 0 )
  {
    ycfp->indent = ycfp->pending_indent;
    ycfp->pending_indent = -1;
  }
  return ycfp->indent;
}




void yccfpStartPP( yccfp* ycfp)
{
  ycfp->flags |= YCCFP_PP_DIR;
}



void yccfpEndPP( yccfp* ycfp)
{
  ycfp->flags &= ~YCCFP_PP_DIR;
}

