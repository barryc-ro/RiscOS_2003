/* mx/src/yc/ycpp.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCPP_ORACLE
#include <ycpp.h>
#endif
#ifndef YSL_ORACLE
#include <ysl.h>
#endif

externdef ysidDecl(YC_EX_NOTFOUND) = "yc::notfound";
externdef ysidDecl(YC_EX_SYNTAX) = "yc::syntax";

STATICF void ycppPredef(ycctx *ctx, yslst *pplist);


void ycpp(ycctx *ctx)
{
  ysle   *elm;
  ycln   *ln;
  yslst  *deflist, *pplist;
  sword   i;
  size_t  len;
  char   *buf;

  
  ctx->tu = (yslst *) 0;

  yseTry
    ctx->tu = ycppRead(ctx, ctx->srcnm, 0);
  yseCatchObj(YC_EX_NOTFOUND, char *, errtxt)
    ysRecord(YCMSG(1), YCERRSEV, YSLSTR(ctx->srcnm), YSLSTR(errtxt), YSLEND);
  yseEnd

  if (!ctx->tu)
    return;

  ctx->mdexp = ysLstCreate();
  ctx->mdtbl = ysHshCreate((ub4) 100, ysHshKey, ycMdEq, ycMdFree);

  
  pplist = ysLstCreate();
  ycppPredef(ctx, pplist);

  
  if ((deflist = ysResGet("mnidlc.preprocess.define")))
    {
      for (elm = ysLstHead(deflist); elm; elm = ysLstNext(elm))
	{
	  ln = ycLnNew("<command-line>", 0, 0);
	  ln->text = ysStrCat(ln->text, (char *) ysLstVal(elm));
	  for (i = 0, buf = ysStrToText(ln->text),len = ysStrLen(ln->text);
	       i < (sword)len && buf[i] != '='; i++) ;

	  if (i < (sword)len)
	    buf[i] = ' ';
	  else
	    ln->text = ysStrCat(ln->text, " 1");

	  ycppDefine(ctx, ln, 0);
	  DISCARD ysLstEnq(pplist, (dvoid *) ln);
	}
    }

  
  if ((deflist = ysResGet("mnidlc.preprocess.undef")))
    {
      for (elm = ysLstHead(deflist); elm; elm = ysLstNext(elm))
	{
	  ln = ycLnNew("<command-line>", 0, 0);
	  ln->text = ysStrCat(ln->text, (char *) ysLstVal(elm));
	  ycppUndef(ctx, ln, 0);
	  DISCARD ysLstEnq(pplist, (dvoid *) ln);
	}
    }

  
  for (elm = ysLstHead(ctx->tu); elm; elm = ysLstNext(elm))
    {
      ln = (ycln *) ysLstVal(elm);

      if (ln->dir)
	ycppDirective(ctx, elm);
      else
	ycppExpand(ctx, elm, 0, (sword) ysStrLen(ln->text), TRUE);
    }

  
  
  if (ysResGet("mnidlc.preprocess-only"))
    {
      ycppDump(ctx, ctx->tu);
    }

  if (pplist)
    ysLstDestroy(pplist, (ysmff) ycLnFree);

  ysLstDestroy(ctx->mdexp, ysmFGlbFree);
  ysHshDestroy(ctx->mdtbl);
}


STATICF void ycppPredef(ycctx *ctx, yslst *pplist)
{
  sysb8   clk;
  ystm  sttm;
  ycln *ln;
  char  tmpbuf[128];

  ysClock(&clk);
  ysConvClock(&clk, &sttm);

  ln = ycLnNew("<pre-defined>", 0, 0);
  ln->text = ysStrCat(ln->text, "__LINE__ 0");
  ycppDefine(ctx, ln, 0);
  DISCARD ysLstEnq(pplist, (dvoid *) ln);

  ln = ycLnNew("<pre-defined>", 0, 0);
  ln->text = ysStrCat(ln->text, "__FILE__ \"\"");
  ycppDefine(ctx, ln, 0);
  DISCARD ysLstEnq(pplist, (dvoid *) ln);

  ln = ycLnNew("<pre-defined>", 0, 0);
  DISCARD sprintf(tmpbuf, "__DATE__ \"%04d-%02d-%02d\"",
		  sttm.year, sttm.mon, sttm.mday);
  ln->text = ysStrCat(ln->text, tmpbuf);
  ycppDefine(ctx, ln, 0);
  DISCARD ysLstEnq(pplist, (dvoid *) ln);

  ln = ycLnNew("<pre-defined>", 0, 0);
  DISCARD sprintf(tmpbuf, "__TIME__ \"%02d:%02d:%02d\"",
		  sttm.hour, sttm.min, sttm.sec);
  ln->text = ysStrCat(ln->text, tmpbuf);
  ycppDefine(ctx, ln, 0);
  DISCARD ysLstEnq(pplist, (dvoid *) ln);

  ln = ycLnNew("<pre-defined>", 0, 0);
  ln->text = ysStrCat(ln->text, "__STDC__ 1");
  ycppDefine(ctx, ln, 0);
  DISCARD ysLstEnq(pplist, (dvoid *) ln);
}


yslst *ycppRead(ycctx *ctx, char *fn, sword lvl)
{
  sword   line;
  boolean eof, ws, utc;
  yslst  *tu;
  ysle   *elm;
  ycln   *ln = (ycln*)0;
  sword   spcnt, ch, pr, quote;
  sysfp* noreg fp;
  CONST char   *errtxt;
  boolean checkLines = (ycStyleOra(ctx) ? TRUE : FALSE);
  size_t ccnt;

  NOREG(fp);
  fp = sysfpOpen(fn, "r", SYSFPKIND_TEXT, &errtxt);
  if (!fp)
    yseThrowObj(YC_EX_NOTFOUND, errtxt);

  line = 1;
  utc = eof = FALSE;
  tu = (yslst *) 0;
  spcnt = 0;
  ysRecord( YCMSG(5), YCINFOSEV, YSLSTR(fn), YSLEND);

  yseTry
    tu = ysLstCreate();

    while (!eof)
    {
      
      ln = ycLnNew(fn, line++, lvl);
      DISCARD ysLstEnq(tu, (dvoid *) ln);
      ccnt = 0;

      
      if (spcnt)
      {
        spcnt--;
        continue;
      }

      
      ws = TRUE;
      eof = sysfpGetc((sysfp*)fp, &ch); ccnt++;
      while (!eof && ch != '\n')
      {
        switch (ch)
        {
          case '\\':                                     
            eof = sysfpGetc((sysfp*)fp, &ch); ccnt++;
            if (!eof && ch == '\n')
            {
              if ( checkLines && (ccnt > YCPP_LINEMAX + 1) )  
                ysRecord( YCMSG(106), YCWARNSEV, YSLSTR(ln->name), 
                          YSLSB4((sb4)ln->line+spcnt), YSLEND);
              ccnt = 0;
              spcnt++;
            }
            else
            {
              ln->text = ysStrApp(ln->text, '\\');
                continue;
            }
            break;
          case '/':                                    
            eof = sysfpGetc((sysfp*)fp, &ch); ccnt++;
            if (!eof && ch == '*')                    
            {
              ccnt = 2;
              do
              {
                pr = ch;
                eof = sysfpGetc((sysfp*)fp, &ch); ccnt++;
                if (ch == '\n')
                {
                  if ( checkLines && (ccnt > YCPP_LINEMAX+1) )
                    ysRecord( YCMSG(106), YCWARNSEV, YSLSTR(ln->name), 
                              YSLSB4((sb4)ln->line+spcnt), YSLEND);
                  spcnt++;
                  ccnt = 0;
                }
              } while (!eof && (pr != '*' || ch != '/'));

              
              if (eof)
              {
                ysRecord( YCMSG(10), YCERRSEV, YCERRLN(ln), YSLEND);
                utc = TRUE;
              }
              else
                ln->text = ysStrApp(ln->text, ' ');
            }
            else if (!eof && ch == '/')             
            {
              do
              {
                eof = sysfpGetc((sysfp*)fp, &ch); ccnt++;
              } while (!eof && ch != '\n');
              if ( checkLines && (ccnt > YCPP_LINEMAX+1) )
                ysRecord( YCMSG(106), YCWARNSEV, YSLSTR(ln->name), 
                          YSLSB4((sb4)ln->line+spcnt), YSLEND);
              ccnt = 0;
              continue;
            }
            else
            {
              ln->text = ysStrApp(ln->text, '/');
              continue;
            }
            break;
          case '"':                          
          case '\'':
            ws = FALSE;
            quote = ch;

            do
            {
              ln->text = ysStrApp(ln->text, (char) ch);
	      pr = ch;
              eof = sysfpGetc((sysfp*)fp, &ch); ccnt++;

              
              if (ch == '\\')
              {
                eof = sysfpGetc((sysfp*)fp, &ch); ccnt++;
                if (!eof && ch == '\n')
                {
                  spcnt++;
                  eof = sysfpGetc((sysfp*)fp, &ch); ccnt++;
                }
                else
                {
                  ln->text = ysStrApp(ln->text, '\\');
                  pr = '\\';
                }
              }
            }
            while (!eof && ch != '\n' && (ch != quote || pr == '\\'));

            
            if (ch != quote)
            {
              if ( quote == '"' )
                ysRecord( YCMSG(12), YCERRSEV, YCERRLN(ln), YSLEND);
              else
                ysRecord( YCMSG(11), YCERRSEV, YCERRLN(ln), YSLEND);
              continue;
            }
            else
              ln->text = ysStrApp(ln->text, (char) ch);
            break;
          case '#':  
            if (ws)
              ln->dir = TRUE;
            ws = FALSE;
            ln->text = ysStrApp(ln->text, (char) ch);
            break;
          default:                        
            ws = FALSE;
            ln->text = ysStrApp(ln->text, (char) ch);
            break;
        }

        eof = sysfpGetc((sysfp*)fp, &ch); ccnt++;
      }
      if ( checkLines && (ccnt > YCPP_LINEMAX + 1) )
         ysRecord( YCMSG(106), YCWARNSEV, YSLSTR(ln->name), 
                   YSLSB4((sb4)ln->line+spcnt), YSLEND);
    }

    
    if (!utc)
    {
      if (spcnt || ysStrLen(ln->text))
        ysRecord( YCMSG(13), YCWARNSEV, YCERRLN(ln), YSLEND);
      else
      {
        
        elm = ysLstTail(tu);
        if (ysLstPrev(elm))
        {
          ln = (ycln *) ysLstRem(tu, elm);
          ycLnFree(ln);
        }
      }
    }
  yseFinally
    sysfpClose((sysfp*)fp);
  yseEnd

  return tu;
}


void ycppDump(ycctx *ctx, yslst *tu)
{
  sysfp *fp = (sysfp*)0;
  yslst *lst;
  char  *outfn;
  ysle  *le;
  ycln  *ln, *prvln;
  CONST char *out, *errtxt;

  
  if ((lst = ysResGet("mnidlc.outputpath")))
  {
    outfn = (char *) ysLstVal(ysLstTail(lst));
    fp = sysfpOpen(outfn, "w", SYSFPKIND_TEXT, &errtxt);
    if (!fp)
    {
      ysRecord(YCMSG(1), YCERRSEV, YSLSTR(outfn), YSLSTR(errtxt), YSLEND);
      return;
    }
  }
  else
    outfn = (char *) 0;

  
  prvln = (ycln *) 0;
  for (le = ysLstHead(tu); le; le = ysLstNext(le))
  {
    ln = (ycln *) ysLstVal(le);

    
    if (!prvln || (ln->name != prvln->name || ln->line != prvln->line + 1))
    {
      if (outfn)
      {
        if (!sysfpPrint(fp, "#line %d \"%s\"\n", ln->line, ln->name))
        {
          ysRecord( YCMSG(3), YCERRSEV, YSLSTR(outfn), YSLNONE);
          return;
        }
      }
      else
        yslPrint("#line %d \"%s\"\n", ln->line, ln->name);
    }

    prvln = ln;

    
    out = (ln->dir ? "" : ysStrToText(ln->text));
    if (outfn)
    {
      if (!sysfpPrint(fp, "%s\n", out))
      {
        ysRecord( YCMSG(3), YCERRSEV, YSLSTR(outfn), YSLNONE);
        return;
      }
    }
    else
      yslPrint("%s\n", out);
  }

  if (outfn)
    sysfpClose(fp);
}


ycln *ycLnNew(CONST char *fn, sword line, sword lvl)
{
  ycln *ln;

  ln = (ycln *) ysmGlbAlloc(sizeof(ycln), "ycln");
  ln->name = fn;
  ln->line = line;
  ln->lvl = lvl;
  ln->dir = FALSE;
  ln->text = ysStrCreate((char *) 0);

  return ln;
}


void ycLnFree(ycln *ln)
{
  ysStrDestroy(ln->text);
  ysmGlbFree((dvoid *) ln);
}


void ycLnCat(ycctx *ctx, ysle *elm)
{
  ycln *nxtln, *ln;
  
  ln = (ycln *) ysLstVal(elm);
  nxtln = (ycln *) ysLstVal(ysLstNext(elm));

  ln->text = ysStrApp(ln->text, ' ');
  ln->text = ysStrCat(ln->text, ysStrToText(nxtln->text));
  ycLnFree((ycln *) ysLstRem(ctx->tu, ysLstNext(elm)));
}


void ycLnBlank(ycctx *ctx, ycln *ln)
{
  ysStrDestroy(ln->text);
  ln->dir = FALSE;
  ln->text = ysStrCreate((char *) 0);
}


ycmd *ycMdNew(char *nm, ycln *origln, sword opos)
{
  ycmd *md;

  md = (ycmd *) ysmGlbAlloc(sizeof(ycmd), "ycmd");
  md->name = nm;
  md->pcnt = 0;
  md->rpl = (ysstr *) 0;
  md->pars = ysLstCreate();
  md->origln = origln;
  md->opos = opos;
  return md;
}


sword ycMdEq(dvoid *elm, dvoid *key, size_t keysz)
{
  ycmd *md;

  md = (ycmd *) elm;
  return (sword) (strcmp(md->name, key));
}


void ycMdFree(dvoid *elm)
{
  ycmd *md;

  md = (ycmd *) elm;

  ysmGlbFree((dvoid *) md->name);
  if (md->rpl)
    ysStrDestroy(md->rpl);
  ysLstDestroy(md->pars, ysmFGlbFree);
  ysmGlbFree((dvoid *) md);
}


sword ycSkipWS(ysstr *txt, sword sp, sword ep)
{
  char *buf;

  buf = ysStrToText(txt);
  while (sp < ep && isspace(buf[sp]))
    sp++;

  return sp;
}
