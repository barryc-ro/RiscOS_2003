/* mx/src/yc/ycimap.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YCI0_ORACLE
#include <yci0.h>
#endif
#ifndef YSL_ORACLE
#include <ysl.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif
#ifndef YCCP0_ORACLE
#include <yccp0.h>          
#endif

#ifndef RISCOS
STATICF void yciGenCopyFreeMacros( 
           yccfp* fp, CONST char* derived, CONST char* base);
#endif
STATICF void ycimap(ycctx *ctx);


STATICF void ycimap(ycctx *ctx)
{
  CONST char  *path;
  ub4    baselen;
  char   base[SYSFP_MAX_PATHLEN];
  char   out[SYSFP_MAX_PATHLEN];
  noreg ycfile files[2];
  noreg ub4 fcount;

  NOREG(files);
  NOREG(fcount);

    
  sysfpExtractBase(base, ctx->srcnm);
  baselen = strlen(base);

  DISCARD memcpy((dvoid *)(out+4), (dvoid *)base, (size_t)baselen);
  out[0] = 'm';
  out[1] = 't';
  out[2] = 't';
  out[3] = 'c';
  out[baselen+4] = '\0';

  path = ysResGetLast("mnidlc.outputpath");
  sysfpForm((char*)files[0].target, path, out, SYSFPKIND_CHEADER);
  fcount = (ub4)1;
  if ( !ysResGetBool("mnidlc.header-only") )
  {
    sysfpForm((char*)files[1].target, path, out, SYSFPKIND_CSOURCE);
    fcount++;
  }
  if ( !ycFileInit((ycfile*)files, (ub4)fcount, path) )
    return;

    
  yseTry
  {
    ycihdr(ctx, base, (ycfile*)&files[0]);
    if ( !ysResGetBool("mnidlc.header-only") )
      yciclnt(ctx, base, (ycfile*)&files[1]);
    ycFileRename((ycfile*)files, (ub4)fcount);
  }
  yseCatchAll
  {
    
    CONST char* fn;
    sword ln;
    ub4 i;
    

    yseGetLoc(&fn, &ln);
    ysRecord( YCMSG(0), YCERRSEV, YSLSTR(ysidToStr(yseExid)), 
              YSLSTR(fn), YSLSB4(ln), YSLEND);
    for (i = 0; i < fcount; i++)
      DISCARD sysfpRemove((char*)files[i].newtmp);
  }
  yseEnd
}



void yciGenSysIncls(ycctx* ctx, yccfp* fp, boolean impl)
{
  if ( impl && (ctx->style & YCSTYLE_ORA) )
    yccfpPrint(fp, "#ifndef SYSI_ORACLE\n#include <sysi.h>\n#endif\n");
  else if ( !impl )
    yccfpPrint(fp, "#ifndef SYSX_ORACLE\n#include <sysx.h>\n#endif\n");

  if ( (ctx->objAdaptor == YCOA_BOA) || (ctx->style & YCSTYLE_CORBA) )
    yccfpPrint(fp, "#ifndef YOORB_ORACLE\n#include <yoorb.h>\n#endif\n\n");
  else
    yccfpPrint(fp, "#ifndef YO_ORACLE\n#include <yo.h>\n#endif\n");

  yccfpPrint(fp, "#ifndef MTTI_ORACLE\n#include <mtti.h>\n#endif\n");
}


ycgmap* yciLangMap( ycctx* ctx)
{
  ycgmap* map = (ycgmap*) ysmGlbAlloc( sizeof(ycgmap), "ycgmap");

  map->langid = YCG_ITL_LANG;
  map->driver = ycimap;
  if ( ysResGetBool("mnidlc.c-cplus-kwd") )
    map->kwdchk = yccpIsKeyword;
  else
    map->kwdchk = yccIsKeyword;
  return map;
}
