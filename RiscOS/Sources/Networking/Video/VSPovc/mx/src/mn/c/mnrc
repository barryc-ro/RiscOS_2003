/* mx/src/mn/mnrc.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YSMSC_ORACLE
#include <ysmsc.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNX_ORACLE
#include <mnx.h>
#endif
#ifndef MZN_ORACLE
#include <mzn.h>
#endif
#ifndef MNRC_ORACLE
#include <mnrc.h>
#endif
#ifndef MNRI_ORACLE
#include <mnri.h>
#endif


mnrb *mnrFindServer(const char *name, const mnrid *progid)
{
  mznent entry;
  mnrb  *bh;
  sb4    sts;

  sts = mznFndEntry(name, progid, &entry);

  if (!sts)
    {
      bh = mnrMakeHandle(&entry.addr);
      mnxFree(mznxEntry, (dvoid *) &entry);
    }
  else
    {
      mnSetLastError(mnGlbCtx, sts);
      bh = (mnrb *) 0;
    }

  return bh;
}


mnrb *mnrMakeHandle(const mna *addr)
{
  mnctx *ctx;
  mnrb  *bh;

  ctx = mnGlbCtx;

  bh = (mnrb *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnrb));

  DISCARD memset(bh, 0, sizeof(mnrb));
  mnaCopy(&bh->server, addr);

  bh->port = mnOpen(MNPROTO_MESSAGE);
  bh->sts = mnRecvWait(bh->port, (mna *) 0, (ub4) 0,
		       mnrRecvReply, (dvoid *) bh);

  return bh;
}


void mnrFreeHandle(mnrb *bh)
{
  mnctx  *ctx;
  mnrccx *ch;
  mnrce  *ce;

  ctx = mnGlbCtx;

  
  DISCARD mnClose(bh->port);

  
  while (bh->ctxs)
    {
      ch = bh->ctxs;
      bh->ctxs = ch->next;
      mnmFree(ctx, (dvoid *) ch);
    }

  
  while (bh->calls)
    {
      ce = bh->calls;
      bh->calls = ce->next;
#ifdef NEVER      
      if (ce->ssem)
	mnSemFree(ce->ssem);
#endif
      mneSet(ctx, ce->sem, MNSTS_ABORTED, TRUE);
      mnmFree(ctx, (dvoid *) ce);
    }

  mnmFree(ctx, (dvoid *) bh);
}


void mnrGetServerAddr(mnrb *bh, mna *addr)
{
  mnaCopy(addr, &bh->server);
}


sb4 mnrCall(mnrb *bh, dvoid **ch, const char *oper,
	    mnbv *inargs, ub4 incnt, mnbv **outargs, ub4 *outcnt,
	    mnHandler handler, dvoid *usrp)
{
  mnctx *ctx;
  mnsem *sem;
  sb4    sts;

  ctx = mnGlbCtx;

  if (bh->sts >= 0)
    {
      sem = mneMakeSem(ctx, handler, usrp);

      if (!bh->port->re.head)
	mnRecvWait(bh->port, (mna *) 0, (ub4) 0,
		   mnrRecvReply, (dvoid *) bh);
      mnrDoCall(ctx, bh, (mnrccx **) ch, oper,
		inargs, incnt, outargs, outcnt, sem);

      if (!handler && !usrp)
	{
	  sts = mnSemWait(sem);
	  mnSemFree(sem);
	}
      else
	sts = 0;
    }
  else
    sts = bh->sts;

  return sts;
}


void mnrDoCall(mnctx *ctx, mnrb *bh, mnrccx **chp, const char *oper,
	       mnbv *inargs, ub4 incnt, mnbv **outargs, ub4 *outcnt,
	       mnsem *sem)
{
  mnrhdr   *hdr;
  mnrce    *ce;
  mna       toaddr;
  ub4       len, hdrlen, ctxid;
  mnrccx   *ch;

  hdr = (mnrhdr *) 0;
  ce = (mnrce *) 0;

  
  len = strlen(oper);
  hdrlen = sizeof(mnrhdr) + ysRoundVal(len + 1, 4);

  hdr = (mnrhdr *) mnmAlloc(ctx, MNM_MAINPOOL, (size_t) hdrlen);

  
  if (chp && *chp)
    {
      ch = *chp;
      ctxid = ch->ctxid;
      mnaCopy(&toaddr, &ch->server);
    }
  else
    {
      ctxid = 0;
      mnaCopy(&toaddr, &bh->server);
    }

  
  hdr->callid = (ub4) ++(ctx->iss);
  hdr->ctxid = smnHton4(ctxid);
  mnGetAddr(bh->port, &hdr->from);

  DISCARD strcpy((char *) &hdr[1], oper);

  
  if (!outargs && !chp)
    {
      mneUnlatch(ctx, sem);
      hdr->options = smnHton4(MNOPT_NOREPLY);

      
      DISCARD mnSendHeader(bh->port, &toaddr, (ub1 *) hdr, (size_t) hdrlen,
			   inargs, incnt, (mnHandler) 0, (dvoid *) sem);
    }
  else
    {
      ce = (mnrce *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnrce));

      
      ce->callid = hdr->callid;
      ce->bh = bh;
      ce->outargs = outargs;
      ce->outcnt = outcnt;
      ce->chp = chp;
#ifdef NEVER
      ce->ssem = mnSemAlloc((dvoid *) ce);
      mneSemSetHandler(ctx, ce->ssem, mnrCallComp, FALSE);
      mneLatch(ctx, ce->ssem);
#endif
      ce->ssem = (mnsem *) 0;
      ce->sem = sem;

      mnrAddCall(ctx, bh, ce);
      hdr->options = 0;

      
      DISCARD mnSendHeader(bh->port, &toaddr, (ub1 *) hdr, (size_t) hdrlen,
			   inargs, incnt, mnDiscard, (dvoid *) 0);
    }


  mnmFree(ctx, (dvoid *) hdr);
}


#ifdef NEVER

void mnrCallComp(dvoid *cep, sb4 sts)
{
  mnctx *ctx;
  mnrce *ce;

  ctx = mnGlbCtx;

  ce = (mnrce *) cep;
  mneUnlatch(ctx, ce->ssem);

  if (sts < 0)
    {
      mneSet(ctx, ce->sem, sts, TRUE);
      if (ce->chp && *ce->chp)
	{
	  mnrFreeCtx(ctx, ce->bh, *ce->chp);
	  *ce->chp = (mnrccx *) 0;
	}

      mnSemFree(ce->ssem);
      mnrFreeCall(ctx, ce);
    }
}
#endif


void mnrRecvReply(dvoid *bhp, sb4 sts)
{
  mnctx  *ctx;
  mnrhdr  hdr;
  mna     from;
  mnrb   *bh;
  mnrce  *ce, *celst[128];
  mnbv    bv[2], *obv;
  mnrccx *ch;
  ub4     nbv, callid, ctxid, i, cnt;
  sb4     len, cests[128];

  ctx = mnGlbCtx;
  bh = (mnrb *) bhp;

  if (sts < 0)
    return;

  cnt = 0;
  while (len = mntinRecvTest(bh->port, (mna *) 0))
    {
      bv[1].buf = (ub1 *) 0;
      obv = (mnbv *) 0;
      ce = (mnrce *) 0;

      
      bv[0].len = offsetof(mnrhdr, from);
      bv[0].buf = (ub1 *) &hdr;

      if (len > offsetof(mnrhdr, from))
	{
	  bv[1].len = (size_t) (len - offsetof(mnrhdr, from));
	  bv[1].buf = (ub1 *) mnmUserAlloc(ctx, bv[1].len);
	  if (!bv[1].buf)
	    {
	      sts = MNERR_OUTMEM;
	      goto leave;
	    }

	  nbv = 2;
	}
      else
	nbv = 1;

      sts = mntRecv(bh->port, &from, bv, nbv, (ub4) 0,
		    (mnHandler) 0, (dvoid *) 0, TRUE);
      if (sts < 0)
	{
	  mnPrint(MNLERROR, "reply broken");
	  goto leave;
	}

      
      callid = hdr.callid;
      sts = -((sb4) smnNtoh4(hdr.options));

      ce = mnrFindCall(ctx, bh, callid);
      if (!ce)
	{
	  mnPrint(MNLERROR, "unexpected call id");
	  sts = MNERR_FAILURE;
	}

      if (sts)
	goto leave;

      
      if (mneGet(ctx, ce->sem) != MNSTS_UNKNOWN)
	{
	  mneUnlatch(ctx, ce->sem);
	  mnrFreeCall(ctx, ce);
	  sts = MNSTS_ABORTED;
	  ce = (mnrce *) 0;
	  goto leave;
	}

      

      if (ce->outargs)
	{
	  if (!(obv = (mnbv *) mnmUserAlloc(ctx, sizeof(mnbv))))
	    {
	      sts = MNERR_OUTMEM;
	      goto leave;
	    }

	  CPSTRUCT(*obv, bv[1]);

	  *ce->outargs = obv;
	  *ce->outcnt = 1;
	}

      
      ctxid = smnNtoh4(hdr.ctxid);
      if (ctxid && !ce->chp)
	{
	  sts = MNERR_CTXEXP;
	  goto leave;
	}

      if (ce->chp)
	{
	  ch = (mnrccx *) (*ce->chp);

	  if (!ch && ctxid)
	    {
	      
	      ch = (mnrccx *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnrccx));

	      mnaCopy(&ch->server, &from);
	      ch->ctxid = ctxid;

	      ch->next = bh->ctxs;
	      bh->ctxs = ch;
	    }
	  else if (ch && !ctxid)
	    {
	      
	      mnrFreeCtx(ctx, bh, ch);
	      ch = (mnrccx *) 0;
	    }
	  else if (ch)
	    ch->ctxid = ctxid;

	  *ce->chp = (mnrccx *) ch;
	}

    leave:
      if (ce)
	{
	  if (cnt < 128)
	    {
	      celst[cnt] = ce;
	      cests[cnt] = sts;
	      cnt++;
	    }
	  else
	    mnPrint(MNLFATAL, "out of stack space");

	  
	}

      
      if (sts)
	{
	  if (bv[1].buf)
	    mnmUserFree(ctx, (dvoid *) bv[1].buf);

	  if (obv)
	    mnmUserFree(ctx, (dvoid *) obv);
	}
    }

  
  if (sts != MNERR_DISCONN && !bh->port->re.head)
    bh->sts = mntRecv(bh->port, (mna *) 0, (mnbv *) 0, (ub4) 0, (ub4) 0,
                      mnrRecvReply, (dvoid *) bh, TRUE);
#ifdef NEVER
  bh->sts = mnRecvWait(bh->port, (mna *) 0, (ub4) 0,
			 mnrRecvReply, (dvoid *) bh);
#endif

  for (i = 0; i < cnt; i++)
    {
      mneSet(ctx, celst[i]->sem, cests[i], TRUE);
      mnrFreeCall(ctx, celst[i]);
    }
}


void mnrAddCall( mnctx *ctx, mnrb *bh, mnrce *ce)
{
  bh = ce->bh;

  if (bh->calls)
    bh->calls->prev = ce;

  ce->next = bh->calls;
  ce->prev = (mnrce *) 0;

  bh->calls = ce;
}


void mnrFreeCall(mnctx *ctx, mnrce *ce)
{
  if (ce->prev)
    ce->prev->next = ce->next;
  else
    ce->bh->calls = ce->next;

  if (ce->next)
    ce->next->prev = ce->prev;

  mnmFree(ctx, (dvoid *) ce);
}


mnrce *mnrFindCall( mnctx *ctx, mnrb *bh, ub4 callid)
{
  mnrce *scc;

  for (scc = bh->calls; scc && scc->callid != callid; scc = scc->next) ;
  return scc;
}


void mnrFreeCtx(mnctx *ctx, mnrb *bh, mnrccx *ch)
{
  mnrccx *prev, *scc;

  for (prev = (mnrccx *) 0, scc = bh->ctxs;
       scc && scc != ch;
       prev = scc, scc = scc->next) ;

  if (prev)
    prev->next = scc->next;
  else
    bh->ctxs = scc->next;

  mnmFree(ctx, (dvoid *) ch);
}
