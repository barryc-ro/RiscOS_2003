/* mx/src/mn/mznc.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MZN_ORACLE
#include <mzn.h>
#endif
#ifndef MNRC_ORACLE
#include <mnrc.h>
#endif
#ifndef MNI_ORACLE
#include <mni.h>
#endif


typedef struct mzncent mzncent;

struct mzncent
{
  mznent entry;
  mzncent *next;
  mzncent *prev;
};

struct mzncd
{
#define MZNCACHEMAX  25
  sb4 size;
  mzncent *head;
  mzncent *tail;
};


STATICF sb4 mznCall(const char *oper, mnbv *inargs, ub4 incnt,
		    mnbv **outargs, ub4 *outcnt);
STATICF void mznCacheDeath(dvoid *usrp, sb4 val);
STATICF void mznAddCacheEntry(mnctx *ctx, mznent *entry);
STATICF boolean mznFndCacheEntry(mnctx *ctx, const char *name, const mnrid *id,
                                 mznent *entry);
STATICF boolean mznCloneEntry(mnctx *ctx, mznent *dst, mznent *src);


sb4 mznInsEntry(mznent *entry)
{
  mnx  *xstr;
  mnbv *inargs, *outargs;
  ub4   incnt, outcnt;
  sb4   sts, result;
  mnctx *ctx;
  char  *pathnm, *cwd;

  
  ctx = mnGlbCtx;
  if (*entry->name != '/')
    {
      cwd = ctx->cwd;
      if (!cwd)
	cwd = "/";

      pathnm = (char *)
	mnmUserAlloc(ctx, strlen(cwd) + strlen(entry->name) + 2);
      if (!pathnm)
	return MNERR_OUTMEM;

      DISCARD strcpy(pathnm, cwd);
      if (cwd[strlen(cwd) - 1] != '/')
	DISCARD strcat(pathnm, "/");
      DISCARD strcat(pathnm, entry->name);
      entry->name = pathnm;
    }
  else
    pathnm = (char *) 0;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &inargs, &incnt, (dvoid *) 0);

  if (!mznxEntry(xstr, (dvoid *) entry))
    sts = mnLastError();
  else
    sts = 0;

  
  if (!sts)
    sts = mznCall("mznInsertEntry", inargs, incnt, &outargs, &outcnt);
  mnxDestroy(xstr, TRUE);

  
  if (pathnm)
    mnmUserFree(ctx, (dvoid *)pathnm);

  if (sts < 0)
    return sts;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &outargs, &outcnt, (dvoid *) 0);

  if (!mnxSB4(xstr, &result))
    result = mnLastError();

  mnxDestroy(xstr, TRUE);

  return result;
}


sb4 mznFndEntry(const char *name, const mnrid *id, mznent *entry)
{
  mnx    *xstr;
  mnbv   *inargs, *outargs;
  ub4     incnt, outcnt;
  sb4     sts;
  char   *pathnm, *cwd;
  mnctx  *ctx;

  
  ctx = mnGlbCtx;
  if (*name != '/')
    {
      cwd = ctx->cwd;
      if (!cwd)
	cwd = "/";

      pathnm = (char *)
	mnmUserAlloc(ctx, strlen(cwd) + strlen(name) + 2);
      if (!pathnm)
	return MNERR_OUTMEM;

      DISCARD strcpy(pathnm, cwd);
      if (cwd[strlen(cwd) - 1] != '/')
	DISCARD strcat(pathnm, "/");
      DISCARD strcat(pathnm, name);
      name = pathnm;
    }
  else
    pathnm = (char *) 0;

  
  if(mznFndCacheEntry(ctx,name,id,entry))
    sts = 0;
  else
  {
    
    xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &inargs, &incnt, (dvoid *) 0);
    if (mnxDynStr(xstr, (char **) &name) &&
        mnxPointer(xstr, (dvoid **) &id, sizeof(mnrid), mnrxId))
      sts = 0;
    else
      sts = mnLastError();

    
    if (!sts)
      sts = mznCall("mznFindEntry", inargs, incnt, &outargs, &outcnt);
    mnxDestroy(xstr, TRUE);

    if (sts < 0)
      return sts;

    
    DISCARD memset(entry, 0, sizeof(mznent));

    xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &outargs, &outcnt,
                     (dvoid *) 0);

    if (!mnxSB4(xstr, &sts))
      sts = mnLastError();

    if (!sts)
    {
      if (!mznxEntry(xstr, (dvoid *) entry))
        sts = mnLastError();
      else
        mznAddCacheEntry(ctx,entry);                         
    }
    mnxDestroy(xstr, TRUE);
  }

  
  if (pathnm)
    mnmUserFree(ctx, (dvoid *)pathnm);

  return sts;
}


sb4 mznDelEntry(const char *name, const mnrid *id)
{
  mnx  *xstr;
  mnbv *inargs, *outargs;
  ub4   incnt, outcnt;
  sb4   sts, result;
  char *pathnm, *cwd;
  mnctx *ctx;

  
  ctx = mnGlbCtx;
  if (*name != '/')
    {
      cwd = ctx->cwd;
      if (!cwd)
	cwd = "/";

      pathnm = (char *)
	mnmUserAlloc(ctx, strlen(cwd) + strlen(name) + 2);
      if (!pathnm)
	return MNERR_OUTMEM;

      DISCARD strcpy(pathnm, cwd);
      if (cwd[strlen(cwd) - 1] != '/')
	DISCARD strcat(pathnm, "/");
      DISCARD strcat(pathnm, name);
      name = pathnm;
    }
  else
    pathnm = (char *) 0;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &inargs, &incnt, (dvoid *) 0);

  if (mnxDynStr(xstr, (char **) &name) &&
      mnxPointer(xstr, (dvoid **) &id, sizeof(mnrid), mnrxId))
    sts = 0;
  else
    sts = mnLastError();

  
  if (!sts)
    sts = mznCall("mznDeleteEntry", inargs, incnt, &outargs, &outcnt);
  mnxDestroy(xstr, TRUE);

  
  if (pathnm)
    mnmUserFree(ctx, (dvoid *)pathnm);

  if (sts < 0)
    return sts;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &outargs, &outcnt, (dvoid *) 0);

  if (!mnxSB4(xstr, &result))
    result = mnLastError();

  mnxDestroy(xstr, TRUE);

  return result;
}


sb4 mznQuery(const char *name, ub4 qt, mnxStream *stream)
{
  mnx  *xstr;
  mnbv *inargs, *outargs;
  ub4   incnt, outcnt;
  sb4   sts, result;

  
  stream->elmsz = sizeof(mznent);
  stream->xfunc = mznxEntry;

  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &inargs, &incnt, (dvoid *) 0);

  if (mnxDynStr(xstr, (char **) &name) &&
      mnxB4(xstr, &qt) &&
      mnxOutStream(xstr, stream))
    sts = 0;
  else
    sts = mnLastError();

  
  if (!sts)
    sts = mznCall("mznQuery", inargs, incnt, &outargs, &outcnt);
  mnxDestroy(xstr, TRUE);

  if (sts < 0)
    return sts;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &outargs, &outcnt, (dvoid *) 0);

  if (!mnxSB4(xstr, &result))
    result = mnLastError();

  mnxDestroy(xstr, TRUE);

  return result;
}


sb4 mznMakeAlias(const char *name, const char *alias)
{
  mnctx *ctx;
  char  *pathnm, *pathnm2, *cwd;
  mnx   *xstr;
  sb4    sts;
  mnbv  *inargs, *outargs;
  ub4    incnt, outcnt;

  
  ctx = mnGlbCtx;
  if (*name != '/')
    {
      cwd = ctx->cwd;
      if (!cwd)
	cwd = "/";

      pathnm = (char *)
	mnmUserAlloc(ctx, strlen(cwd) + strlen(name) + 2);
      if (!pathnm)
	return MNERR_OUTMEM;

      DISCARD strcpy(pathnm, cwd);
      if (cwd[strlen(cwd) - 1] != '/')
	DISCARD strcat(pathnm, "/");
      DISCARD strcat(pathnm, name);
      name = pathnm;
    }
  else
    pathnm = (char *) 0;

  
  if (*alias != '/')
    {
      cwd = ctx->cwd;
      if (!cwd)
	cwd = "/";

      pathnm2 = (char *)
	mnmUserAlloc(ctx, strlen(cwd) + strlen(alias) + 2);
      if (!pathnm2)
	return MNERR_OUTMEM;

      DISCARD strcpy(pathnm2, cwd);
      if (cwd[strlen(cwd) - 1] != '/')
	DISCARD strcat(pathnm2, "/");
      DISCARD strcat(pathnm2, alias);
      alias = pathnm2;
    }
  else
    pathnm2 = (char *) 0;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &inargs, &incnt, (dvoid *) 0);
  if (mnxDynStr(xstr, (char **) &name) &&
      mnxDynStr(xstr, (char **) &alias))
    sts = 0;
  else
    sts = mnLastError();

  
  if (!sts)
    sts = mznCall("mznMakeAlias", inargs, incnt, &outargs, &outcnt);
  mnxDestroy(xstr, TRUE);

  
  if (pathnm)
    mnmUserFree(ctx, (dvoid *)pathnm);
  if (pathnm2)
    mnmUserFree(ctx, (dvoid *)pathnm2);

  if (sts < 0)
    return sts;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &outargs, &outcnt, (dvoid *) 0);
  if (!mnxSB4(xstr, &sts))
    sts = mnLastError();

  mnxDestroy(xstr, TRUE);
  return sts;
}

void mznInvalidateCache(void)
{
  mnctx *ctx;
  mzncd *cd;
  mzncent *cent, *next;

  ctx = mnGlbCtx;
  cd = ctx->nscd;

  for(cent = ctx->nscd->head; cent; cent = next)
  {
    DISCARD mnDeathIgnore(&cent->entry.addr, (dvoid *) cent);
    next = cent->next;
    mnxFree(mznxEntry, (dvoid *) &cent->entry);
    mnmUserFree(ctx,(dvoid *) cent);
  }

  ctx->nscd->head = ctx->nscd->tail = (mzncent *) 0;
  cd->size = 0;
}


STATICF sb4 mznCall(const char *oper, mnbv *inargs, ub4 incnt,
		    mnbv **outargs, ub4 *outcnt)
{
  mnctx *ctx;
  mna    nsaddr;
  sb4    sts;

  ctx = mnGlbCtx;
  if (!ctx->nsbh)
    {
      DISCARD mnAddr(&nsaddr, MZNMADDR);
      ctx->nsbh = mnrMakeHandle(&nsaddr);
    }

  sts = mnrCall(ctx->nsbh, (dvoid **) 0, oper,
		inargs, incnt, outargs, outcnt, (mnHandler) 0, (dvoid *) 0);
  return sts;
}

void mzncInit(mnctx *ctx)
{
  
  ctx->nscd = (mzncd *)mnmUserAlloc(ctx,sizeof(mzncd));
  if(ctx->nscd) CLRSTRUCT(*ctx->nscd);
}

void mzncTerm(mnctx *ctx)
{
  if (!ctx->nscd)
    return;

  
  mznInvalidateCache();

  mnmUserFree(ctx,(dvoid *)ctx->nscd);
  ctx->nscd = (mzncd *) 0;
}


STATICF void mznCacheDeath(dvoid *usrp, sb4 val)
{
  mzncent *cent = (mzncent *) usrp;
  mnctx *ctx;
  mzncd *cd;

  ctx = mnGlbCtx;
  cd = ctx->nscd;

  if(!cd) return;

  switch(val)
  {
  case MNSTS_ABORTED:
  case MNERR_OUTMEM:
  case MNERR_BROKEN:
    
    return;
  default:
    break;
  }

  
  if(cent->prev)
    cent->prev->next = cent->next;
  else
    cd->head = cent->next;
  if(cent->next)
    cent->next->prev = cent->prev;
  else
    cd->tail = cent->prev;

  
  cd->size--;

  mnxFree(mznxEntry, (dvoid *) &cent->entry);
  mnmUserFree(mnGlbCtx,(dvoid *)cent);
}



STATICF void mznAddCacheEntry(mnctx *ctx, mznent *entry)
{
  mzncd *cd;
  mzncent *cent = (mzncent *) 0;

  cd = ctx->nscd;
  if(!cd) return;

  if(cd->size < MZNCACHEMAX)
  {
    
    cent = (mzncent *)mnmUserAlloc(ctx,sizeof(mzncent));
    if(cent) cd->size++;
  }
  else
  {
    
    cent = cd->tail;
    cd->tail = cent->prev;
    if(cd->tail)
      cd->tail->next = (mzncent *) 0;
    DISCARD mnDeathIgnore(&cent->entry.addr, (dvoid *) cent);
    mnxFree(mznxEntry, (dvoid *) &cent->entry);
  }

  if(!cent)
  {
    
    return;
  }

  if(!mznCloneEntry(ctx,&cent->entry,entry))
  {
    cd->size--;
    mnmUserFree(ctx,(dvoid *) cent);
  }

  
  cent->prev = (mzncent *) 0;
  cent->next = cd->head;
  if(cd->head)
    cd->head->prev = cent;
  else
    cd->tail = cent;
  cd->head = cent;

  DISCARD mnDeathWatch(&cent->entry.addr, mznCacheDeath, (dvoid *) cent);
}



STATICF boolean mznFndCacheEntry(mnctx *ctx, const char *name, const mnrid *id,
                                 mznent *entry)
{
  mzncd *cd;
  mzncent *cent;

  cd = ctx->nscd;
  if(!cd)
    return FALSE;

  
  for(cent = cd->head; cent; cent = cent->next)
    if(((!cent->entry.name && !name)) || (strcmp(cent->entry.name,name)==0) &&
       (!id || (cent->entry.id && mnrIdCmp(cent->entry.id,id,FALSE)) > 0))
      break;

  if(!cent) return FALSE;

  
  if(cent != cd->head)
  {
    
    cent->prev->next = cent->next;
    if(cent->next)
      cent->next->prev = cent->prev;
    else
      cd->tail = cent->prev;

    
    cent->prev = (mzncent *) 0;
    cent->next = cd->head;
      cd->head->prev = cent;
    cd->head = cent;
  }

  return mznCloneEntry(ctx,entry,&cent->entry);
}

STATICF boolean mznCloneEntry(mnctx *ctx, mznent *dst, mznent *src)
{
  size_t len;

  CLRSTRUCT(*dst);

  
  if(src->name)
  {
    dst->name = (char *) mnmUserAlloc(ctx,(len=strlen(src->name)+1));
    if(!dst->name) goto failed;
    DISCARD memcpy((dvoid *)dst->name,(dvoid *)src->name,len);
  }
  if(src->id)
  {
    dst->id = (mnrid *) mnmUserAlloc(ctx,sizeof(mnrid));
    if(!dst->id) goto failed;
    DISCARD memcpy((dvoid *)dst->id,(dvoid *)src->id,sizeof(mnrid));
  }

  mnaCopy(&dst->addr,&src->addr);
  return TRUE;

 failed:
  if(dst->name)
    mnmUserFree(ctx,(dvoid *)dst->name);
  if(dst->id)
    mnmUserFree(ctx,(dvoid *)dst->id);
  dst->name = (char *) 0;
  dst->id = (mnrid *) 0;
  return FALSE;
}
