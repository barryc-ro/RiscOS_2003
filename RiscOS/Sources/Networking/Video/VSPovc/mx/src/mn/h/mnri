/* mx/src/mn/mnri.h */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef MNRI_ORACLE
#define MNRI_ORACLE

#ifndef MNRC_ORACLE
#include <mnrc.h>
#endif
#ifndef MNRS_ORACLE
#include <mnrs.h>
#endif
#ifndef MNX_ORACLE
#include <mnx.h>
#endif
#ifndef MNI_ORACLE
#include <mni.h>
#endif


typedef struct mnrhdr mnrhdr;

#define MNOPT_NOREPLY ((ub4) 0x0001)                 

struct mnrhdr
{
  ub4   callid;                                           
  ub4   options;                                             
  ub4   ctxid;                                         
  mna   from;                                                
};


typedef struct mnrscx mnrscx;                        
typedef struct mnrscd mnrscd;               

struct mnrs
{
  mnrid         progid;                                
  mnrscd       *cds;                                
  dvoid        *usrp;                         

  const char   *name;                                      
  boolean       thread;                    
  mnrb         *scbh;                       

  mnp          *port;                                     
  boolean       registered;                            

  boolean       gnc;                  
  boolean       newcalls;                 
  sb4           final;                             
  boolean       running;              
  ub4           nctxid;                 
  mnrscx       *ctxs;                             
};

struct mnrscd
{
  mnrscd      *next;                   
  const mnrcd *cd;                                   
  dvoid       *usrp;                       
};

struct mnrsc
{
  mnrs  *sh;                                                
  ub1   *data;                       
  ub4    len;                                 
  mna    from;                                             
  ub4    callid;                                          
  ub4    options;                                            
  ub4    ctxid;                                        
};

struct mnrscx
{
  mnrs    *sh;                                              
  mna      addr;                                           
  mnrscx  *next;                                     
  dvoid   *ctx;                                            
  ub4      ctxid;                                      
  void   (*rdfunc)(mnrsc *, mnbv *, ub4);                
};

void mnrReturnError(mnctx *ctx, mnrsc *call, sb4 err);


typedef struct mnrce  mnrce;                                   
typedef struct mnrccx mnrccx;            

struct mnrb
{
  mna      server;           
  mnp     *port;                                              
  mnrce   *calls;                                
  mnrccx  *ctxs;                     
  sb4      sts;                                  
};

struct mnrce
{
  mnrce   *next;                                       
  mnrce   *prev;                                   
  ub4      callid;                                        
  mnrb    *bh;                          
  mnbv   **outargs;                                    
  ub4     *outcnt;                  
  mnrccx **chp;                                           
  mnsem   *ssem;                
  mnsem   *sem;                 
};

struct mnrccx
{
  mnrccx  *next;                                      
  ub4      ctxid;                                      
  mna      server;              
};

void   mnrDoCall(mnctx *ctx, mnrb *bh, mnrccx **chp, const char *oper,
		 mnbv *inargs, ub4 incnt, mnbv **outargs, ub4 *outcnt,
		 mnsem *sem);
void   mnrCallComp(dvoid *cep, sb4 sts);
void   mnrRecvReply(dvoid *bhp, sb4 len);
void   mnrAddCall(mnctx *ctx, mnrb *bh, mnrce *ce);
void   mnrFreeCall(mnctx *ctx, mnrce *ce);
mnrce *mnrFindCall(mnctx *ctx, mnrb *bh, ub4 callid);
void   mnrFreeCtx(mnctx *ctx, mnrb *bh, mnrccx *ch);


typedef struct mnxptr mnxptr;               
typedef struct mnxstr mnxstr;                

#define MNXROWS     16                       
#define MNXBLKSIZE  1024                   

struct mnx
{
  ub4     dir;                                   
  dvoid  *usrp;                                              

  mnbv  **bvp;                                              
  ub4    *nbvp;                               
  ub1    *ptr;                                
  ub4     max;                           
  ub4     bvidx;                         

  ub4    *ptrcnt;         
  ub4     nidx;                                       
  mnxptr *eptrs[MNXROWS];               
  dvoid **dptrs;                             
};

struct mnxptr
{
  mnxptr *next;                                  
  ub4     idx;                                   
  dvoid  *ptr;                                        
};

ub1    *mnxSpace(mnctx *ctx, mnx *xstr, size_t cnt, ub4 align);
boolean mnxBytes(mnctx *ctx, mnx *xstr, ub1 **array, ub4 *nelm, ub4 maxelm);
sb4     mnxEncodeRef(mnctx *ctx, mnx *xstr, dvoid *ptr, ub4 *idx);
boolean mnxDecodeRef(mnctx *ctx, mnx *xstr, dvoid **ptr, ub4 idx,
		     size_t objsz);
void    mnxOSCAcc(dvoid *sp, sb4 sts);
void    mnxOSCRead(dvoid *sp, sb4 sts);
sb4     mnxOSSPush(mnxStream *stream, dvoid *ptr);
void    mnxOSSClose(mnxStream *stream, sb4 sts);

#endif 
