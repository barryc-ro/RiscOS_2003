/* mx/src/mn/mn.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YSR_ORACLE
#include <ysr.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MZN_ORACLE
#include <mzn.h>
#endif
#ifndef MNI_ORACLE
#include <mni.h>
#endif

STATICF sb4 mnTestModSub(sb4 v1, sb4 v2);


void mnInit(ub4 flags, mnLogger lfunc, mnnio **nios, ub4 nnio, mnnpa *gtwy,
	    mnbv *bv, ub4 nbv, mnAlloc alloc, mnFree free,
	    mnSpin spinfunc, dvoid *usrp, ub4 interval)
{
  mnctx  *ctx, ctxtmp;
  mnmctx *mctx;
  ub4     sz;
  char   *cwd;

  if (!mtcctxInit())
    mnPrint(MNLFATAL, "context manager initialization failure");

  
  if (ctx = (mnctx *)mtcctxGet(MNETCTX, (ub4) 0))
    {
      ctx->initcnt++;
      return;
    }

  
  if (!(mctx = mnmInit(bv, nbv, alloc, free)))
    {
      if (lfunc)
	(*lfunc)("FATAL: memory manager initialization failure");
      ysePanic(YS_EX_FAILURE);
    }

  
  ctxtmp.mctx = mctx;
  ctxtmp.flags = 0;
  ctx = (mnctx *) ysmGlbAlloc(sizeof(mnctx), "mnctx");
  DISCARD memset(ctx, 0, sizeof(mnctx));

  
  ysMtxCreate(&ctx->glbmtx,
	      (ctx->flags & MNFLG_INTR) ? YSMTXTYPE_INTR : YSMTXTYPE_NORMAL);

  ctx->initcnt = 1;
  ctx->mctx = mctx;
  ctx->flags = flags;
  ctx->lfunc = lfunc;
  ctx->iss = (sb4) smnClock();
  ctx->rcvnios = ysLstCreate();

  if (mtcctxPut(MNETCTX, (ub4) 0, (dvoid *) ctx))
    mnPrint(MNLFATAL, "context manager initialization failure");

  
  if (sizeof(mnnhdr) != 28 ||
      mnTestModSub(0x00000003, 0xfffffff7) != 12 ||
      mnTestModSub(0x80000000, 0x7fffffff) != 1)
    mnPrint(MNLFATAL, "configuration check error");

  
  sz = mnmPoolSpace(ctx, MNM_MAINPOOL);
  if (sz < 16384 ||
      mnmPoolAlloc(ctx, MNM_SENDPOOL, sz / 3, sz / 30) ||
      mnmPoolAlloc(ctx, MNM_RECVPOOL, sz / 3, sz / 30))
    mnPrint(MNLFATAL, "insufficient heap size");

  
  mneInit(ctx);
  mnSetBusyWait(spinfunc, usrp, interval);

  
  cwd = ysResGetLast("OMN_CWD");
  if (!cwd)
    ctx->cwd = cwd;
  else if (*cwd != '/')
    mnPrint(MNLFATAL, "OMN_CWD must contain an absolute path name");
  else
    {
      ctx->cwd = mnmAlloc(ctx, MNM_MAINPOOL, strlen(cwd) + 1);
      strcpy(ctx->cwd, cwd);
    }

  
  {
    char *mwind = ysResGetLast("mn.maximum-window-size");
    if (mwind)
      ctx->mwind = atol(mwind);
    else
      ctx->mwind = 45000;
  }

  
  mnaInit(ctx, nios, nnio, gtwy);

  if ((ctx->flags & MNFLG_INTR) && !nbv)
    mnPrint(MNLFATAL,
	    "heap must be provided when interrupt-based NIOS are present");

  
  ctx->nprtno = 1;

  
  mzncInit(ctx);
}

STATICF sb4 mnTestModSub(sb4 v1, sb4 v2)
{
  return smnModSub(v1, v2);
}


void mnTerm(void)
{
  mnctx *ctx;
  ub4    i;
  mnp   *port;
  mntre *re;
  mntse *se;
  mnsem *sem;

  DISCARD mnIdle();

  if (!(ctx = mnGlbCtx))
    return;
  if (--ctx->initcnt)
    {
      mtcctxDone();                          
      return;
    }

  
  mzncTerm(ctx);

  

  
  for (i = 0; i < MNPORTROWS; i++)
    for (port = ctx->ports[i]; port; port = port->nport)
      {
	if (port->rstate == MNSTS_ESTABLISHED && port->proto == MNPROTO_STREAM)
	  DISCARD mnClose(port);
	else if (port->se.head)
	  {
	    se = (mntse *) port->se.tail;
	    sem = se->sem;
	    mneLatch(ctx, sem);
	    mnSemWait(sem);
	    mneUnlatch(ctx, sem);
	  }

	if (port->name)
	  {
	    DISCARD mznUnbind(port);
	    port->name = (char *) 0;
	  }
      }

  
  if (ctx->nsbh)
    mnrFreeHandle(ctx->nsbh);

  
  for (i = 0; i < MNPORTROWS; i++)
    while (port = ctx->ports[i])
      mntDestroyPort(ctx, port);

  
  while (re = (mntre *) mnqDeq(&ctx->re))
    {
      if (mneGet(ctx, re->sem) == MNSTS_UNKNOWN)
	mneSet(ctx, re->sem, MNSTS_TERMINATE, TRUE);
      else
	mneUnlatch(ctx, re->sem);

      mnmFree(ctx, (dvoid *) re);
    }

  
  if (ctx->cwd)
    mnmFree(ctx, ctx->cwd);

  
  mnaTerm(ctx);
  mneTerm(ctx);
  ysSetIdler("mnIdler", (ysHndlr) 0, (dvoid *) 0);

  mnmTerm(ctx);
  ysLstDestroy(ctx->rcvnios, (ysmff) 0);
  ysMtxDestroy(&ctx->glbmtx);
  mtcctxPut(MNETCTX, (ub4) 0, (dvoid *) 0);
  ysmGlbFree((dvoid *) ctx);
  mtcctxDone();
}


char *mnVersion(char *buf, size_t len)
{
  return ysVersion(buf, len);
}


boolean mnAlive(void)
{
  mnctx *ctx;
  boolean yes;
  
  mtcctxInit();
  ctx = mnGlbCtx;
  yes = (ctx && ctx->nprtno != 0);
  mtcctxDone();
  return yes;
}


char *mnGetCwd(void)
{
  mnctx *ctx = mnGlbCtx;
  return (ctx->cwd ? ctx->cwd : "/");
}


sb4 mnSetSndBuf(ub4 sz)
{
  return mnmSetPool(mnGlbCtx, MNM_SENDPOOL, sz);
}


sb4 mnSetRcvBuf(ub4 sz)
{
  return mnmSetPool(mnGlbCtx, MNM_RECVPOOL, sz);
}


sb4 mnLastError(void)
{
  mnctx *ctx = mnGlbCtx;

  return ctx->lasterror;
}


CONST char *mnError(sb4 err)
{
  switch (err)
    {
    case MNSTS_NORMAL: return "normal, successful completion";
    case MNSTS_UNKNOWN: return "incomplete operation";
    case MNSTS_ABORTED: return "operation aborted";
    case MNSTS_EOS: return "end-of-stream detected";
    case MNSTS_TERMINATE: return "terminated";
    case MNERR_FAILURE: return "system- or NIO-specific failure";
    case MNERR_OVERFLOW: return "NIO overflow";
    case MNERR_WOULDBLOCK: return "operation would block";
    case MNERR_TIMEOUT: return "timed out";
    case MNERR_OUTMEM: return "out of memory";
    case MNERR_BADPARAM: return "bad parameter";
    case MNERR_TRUNCATE: return "packet truncated by caller";
    case MNERR_BROKEN: return "communication broken";
    case MNERR_BADADDR: return "bad destination address";
    case MNERR_BADPROTO: return "bad protocol";
    case MNERR_ALREADY: return "resource already allocated";
    case MNERR_NOTCONN: return "port not connected";
    case MNERR_DISCONN: return "peer disconnected";
    case MNERR_NOSUCHOPER: return "no such operation";
    case MNERR_NOTFOUND: return "not found";
    case MNERR_DUPLICATE: return "duplicate detected";
    case MNERR_CTXEXP: return "space for context expected";
    case MNERR_NOTINIT: return "not initialized";
    default:
      if (err > 0)
	return "not an error code";
      else
	return "unrecognized error code";
    }
}


void mnDiscard(dvoid *ptr, sb4 val)
{
  return;
}

sb4 mnEcho(mna *dst, ub4 timeout, mnHandler handler, dvoid *usrp)
{
  mnctx *ctx;
  mna    src;
  sb4    sts;

  ctx = mnGlbCtx;
  mnnSubnet(ctx->rnio, &src);

  sts = mnoSend(ctx, MNOTYP_ECHOREQUEST, dst, &src);
  if (sts >= 0)
    sts = mnoRecv(ctx, (mna *) 0, (mnbv *) 0, (ub4) 0, timeout, handler, usrp);

  return (sts == MNOTYP_DESTNOTREACH ? MNERR_BADADDR : sts);
}


void mnPrint(ub4 type, const char *fmt, ...)
{
  mnctx  *ctx;
  char    buf[512];
  va_list ap;

#ifdef RISCOS
  /* should set system variable here */
  return;
#endif

  ctx = mnGlbCtx;

  if ((type != MNLFATAL && type != MNLERROR) && !(ctx->flags & MNFLG_TRACE))
    return;

  if (ctx && ctx->lfunc)
    {
      switch (type)
	{
	case MNLINFO: buf[0] = '\0'; break;
	case MNLWARN: DISCARD sprintf(buf, "WARNING: "); break;
	case MNLERROR: DISCARD sprintf(buf, "ERROR: "); break;
	case MNLFATAL: DISCARD sprintf(buf, "FATAL: "); break;
	}

      va_start(ap, fmt);
      DISCARD vsprintf(buf + strlen(buf), fmt, ap);
      va_end(ap);

      (*ctx->lfunc)(buf);
    }

  if (type == MNLFATAL)
    yseThrow(YS_EX_FAILURE);
}

sb4 smnClock(void)
{
  sysb8 tmp;
  sysb8 onethousand;

  ysClock(&tmp);
  sysb8ext(&onethousand, 1000);
  sysb8div(&tmp, &tmp, &onethousand);
  return sysb8msk(&tmp);
}
