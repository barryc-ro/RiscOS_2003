/* mx/src/mn/mnls.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MZN_ORACLE
#include <mzn.h>
#endif
#ifndef SMN_ORACLE
#include <smn.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSC_ORACLE
#include <ysc.h>
#endif
#ifndef YSR_ORACLE
#include <ysr.h>
#endif
#ifndef SMNI_ORACLE
#include <smni.h>
#endif

static struct ysargmap mnlsArgs[] =
{
  { 'g', "mn.sync-gateway", 1 },
  { YSARG_OPTPARAM, "mnls.regexp", 1 },
  { 0 }
};

STATICF dvoid *mnlsAlloc(mnxStream *stream, size_t len);
STATICF sb4    mnlsPush(mnxStream *stream, dvoid *ptr);

boolean mnls(dvoid *osdCtx, const char *nm, sword argc, char **argv)
{
  char     *regexp = (char *)0;
  sword     sts;
  sb4       cnt;
  mnxStream stream;
  char	    *arg;
  char       vbuf[80];

  sts = ysArgParse( argc, argv, mnlsArgs );
  if (sts == YSARG_VERSION)
    yslError(ysVersion(vbuf, sizeof(vbuf)));
  if (sts != YSARG_NORMAL)
    return FALSE;

  if( arg = ysResGetLast( "mnls.regexp" ) )
    regexp = arg;

  if( !smniInit( osdCtx, (mnLogger)0 ) )
    return( FALSE );

  yslPrint("%-32.32s %-20s %-24s\n", "Name", "Address", "Program ID");

  stream.alloc = mnlsAlloc;
  stream.push = mnlsPush;
  stream.close = (void (*)(mnxStream *, sb4)) 0;

  cnt = mznQuery(regexp, MZN_ALL_NAMES, &stream);

  if (cnt < 0)
    yslError(mnError(cnt));
  else
    yslPrint("(%ld entr%s)\n", cnt, (cnt == 1 ? "y" : "ies"));

  mnTerm();

  return( TRUE );
}

dvoid *mnlsAlloc(mnxStream *stream, size_t len)
{
  return ysmGlbAlloc(len, "mnlsAlloc");
}

sb4 mnlsPush(mnxStream *stream, dvoid *ptr)
{
  mznent *entry;
  char    buf[256], out[MNAMAXLEN], *off;

  entry = (mznent *) ptr;

  mnAtos(&entry->addr, out, MNAMAXLEN);

  if (entry->id)
    sprintf(buf, "%08lx%08lx  %d.%d",
	    (unsigned long) smnNtoh4(*((ub4 *) &entry->id->id[0])),
	    (unsigned long) smnNtoh4(*((ub4 *) &entry->id->id[4])),
	    MNGETVERS(entry->id->vers), MNGETRELS(entry->id->vers));
  else if (off = strchr(entry->name, ':'))
    {
      out[0] = '\0';
      sprintf(buf, "-> ");
      strcat(buf, off + 1);
      *off = '\0';
    }
  else
    sprintf(buf, "(named port)");

  yslPrint("%-32.32s %-20s %-24s\n", entry->name, out, buf);

  mnxFree(mznxEntry, entry);
  ysmGlbFree(ptr);

  return 0;
}
