/* Copyright (c) Oracle Corporation 1995.  All Rights Reserved. */

/*
  NAME
    smni.c
  DESCRIPTION
    OSD media-net initialization 
  PUBLIC FUNCTIONS
    smniInit
*/

#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNT_ORACLE
#include <mnt.h>
#endif
#ifndef MNNIO_ORACLE
#include <mnnio.h>
#endif
#ifndef MZN_ORACLE
#include <mzn.h>
#endif
#ifndef MNRS_ORACLE
#include <mnrs.h>
#endif
#ifndef SMN_ORACLE
#include "smn.h"
#endif
#ifndef SYSFP_ORACLE
#include <sysfp.h>
#endif
#ifndef MTL_ORACLE
#include <mtl.h>
#endif
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YSB8_ORACLE
#include <ysb8.h>
#endif

#include <kernel.h>
#include <swis.h>
#include "smnudp.h"
#include "misc.h"

/* will default mtl tool to screen */
#ifndef DEFAULT_MTL_TOOL
#define DEFAULT_MTL_TOOL    MtlScreenTool
#endif

static CONST ysb8 ysb8zeroval = { 0, 0 };
extern void mtlLog(const char *msg, ... );

#define  NUM_NIOS 1

mnnio *pUDPNIOG = NULL;
static mnnio **pNIOTableG;

static mnbv *pMNheapVector;
static ub1 *pMNheap;
#define SIZEOF_MNHEAP (size_t)1024

char base[SYSFP_MAX_PATHLEN];
ub1 ctxbuf[SYSX_OSDPTR_SIZE];
int mn_started = 0;
extern void *module_wsp;
extern char gw_phy_adr[64];

/* ARGSUSED */
boolean smniInit( void *osdCtx, mnLogger logger )
{
    if (mn_started)
        return TRUE;  
    /* initialise MediaNet specific heap in RMA */
    pMNheapVector = (mnbv *)malloc(sizeof(mnbv));
    if(!pMNheapVector)
        return FALSE;

    pMNheap = (ub1 *)malloc(SIZEOF_MNHEAP);
    if(!pMNheap)
        return FALSE;

    pMNheapVector->buf = pMNheap;
    pMNheapVector->len = SIZEOF_MNHEAP;

    if ((pUDPNIOG = smnudpOpen(gw_phy_adr, 0)) == NULL) 
        return FALSE;

    pNIOTableG = malloc(NUM_NIOS * sizeof(mnnio *));
    if(!pNIOTableG)
        return FALSE;
    pNIOTableG[0] = pUDPNIOG;
    mn_started = 1; 
    mnInit(MNFLG_TRACE,             /* not allowed to forward packets */
             (mnLogger) mtlLog,     /* logging function */
             pNIOTableG,            /* pointer to array of pointers to NIOs */
             NUM_NIOS,              /* number of NIOs */
             &pUDPNIOG->pa,         /* use this for the gateway */
             pMNheapVector,         /* use machine heap */
             SIZEOF_MNHEAP,         /* use machine heap */
             malloc,                /* pointer to memory assignment function */
             free,                  /* pointer to memory deassignment func */
             NULL,                  /* no busy-wait function defined */
             NULL,                  /* no busy-wait function defined */
             0);           
    return TRUE;
}

void smniTerm(void)
{
    free ((char *)pMNheapVector);
    free ((char *)pNIOTableG);
    free ((char *)pMNheap);
}

int pollnio(void)
{
    return( smnudpPoll(pUDPNIOG) );
}

void Fire_Up_MediaNet(void)
{
    _kernel_swi_regs r;

    if (mn_started)
        return;
    ysb8zero = &ysb8zeroval;      /* moved from mx.src.ys.c.ysb8 to keep compiler happy */
    strcpy(base, "vspovc");
    ysInit(ctxbuf, base);
    mtlInit(DEFAULT_MTL_TOOL, base);
    (void) smniInit(ctxbuf, (mnLogger) 0 );
    yoInit();
    return;
}

void Close_Down_MediaNet(void)
{
    if (!mn_started) 
        return;
    yoTerm();
    mnTerm();
    ysTerm(ctxbuf);
    smniTerm();
    smnudpClose(0);
    mn_started = 0;
}
