/* mx/src/mn/mnb.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNI_ORACLE
#include <mni.h>
#endif


typedef struct mnblob mnblob;

struct mnblob
{
  ub1 *(*alloc)(dvoid *usrp, size_t segsz, ub4 offset, ub4 total);
  void (*close)(dvoid *usrp, sb4 sts);

  mnHandler handler;                                  
  dvoid    *usrp;                                            
  mnp      *port;                                               
  sb4       offset;                                      
  ub4       total;                                     
};


sb4 mnBlobRecv(ub1 * (*alloc)(dvoid *, size_t, ub4, ub4),
	       void  (*close)(dvoid *, sb4),
	       dvoid  *usrp, ub1 *dest, ub4 *len)
{
  mnblob *blob;
  mnp    *port;
  mna     addr;

  if (!(blob = (mnblob *) mnmUserAlloc(mnGlbCtx, sizeof(mnblob))))
    return MNERR_OUTMEM;

  port = mnOpen(MNPROTO_STREAM);
  DISCARD mnListen(port, (ub4) 0, mnBlobAccept, (dvoid *) blob);

  blob->alloc = alloc;
  blob->close = close;
  blob->usrp = usrp;
  blob->port = port;
  blob->offset = 0;
  blob->total = 0;

  mnGetAddr(port, &addr);
  mnAtos(&addr, (char *) dest, (size_t) *len);
  *len = strlen((char *) dest);

  return 0;
}


void mnBlobAccept(dvoid *bp, sb4 sts)
{
  mnblob *blob;
  mnp    *cport;
  ub4     sz;

  blob = (mnblob *) bp;

  cport = mnAccept(blob->port);
  DISCARD mnClose(blob->port);
  blob->port = cport;

  sts = mnRead(blob->port, (ub1 *) &sz, sizeof(ub4), TRUE,
	       (ub4) 0, (mnHandler) 0, (dvoid *) 0);

  blob->total = smnNtoh4(sz);

  DISCARD mnRead(blob->port, (ub1 *) 0, 0, FALSE,
		 (ub4) 0, mnBlobRead, (dvoid *) blob);
}


void mnBlobRead(dvoid *bp, sb4 sts)
{
  mnblob *blob;
  ub1    *ptr;
  ub4     len;

  blob = (mnblob *) bp;

  if (!sts)
    {
      len = min(8192, blob->total - blob->offset + 1);
      ptr = (*blob->alloc)(blob->usrp, (size_t) len, (ub4) blob->offset,
			   blob->total);
      if (!ptr)
	sts = MNERR_OUTMEM;
      else
	{
	  sts = mnRead(blob->port, ptr, (size_t) len, FALSE,
		       (ub4) 0, (mnHandler) 0, (dvoid *) 0);
	  if (sts >= 0)
	    blob->offset += sts;
	}
    }

  if (sts >= 0)
    DISCARD mnRead(blob->port, (ub1 *) 0, 0, FALSE, (ub4) 0,
		   mnBlobRead, (dvoid *) blob);
  else
    {
      if (blob->close)
	(*blob->close)(blob->usrp, sts == MNSTS_EOS ? 0 : sts);

      DISCARD mnClose(blob->port);
      mnmUserFree(mnGlbCtx, (dvoid *) blob);
    }
}


dvoid *mnBlobPrepare(ub1 *dest,  ub4 len, ub4 blobsz,
		     mnHandler handler, dvoid *usrp, mna *destaddr)
{
  mnctx  *ctx;
  sb4     sts;
  mnblob *blob;
  mnp    *port;
  ub4     netsz;
  mntse  *se;

  ctx = mnGlbCtx;

  sts = mnAddr(destaddr, (char *) dest);
  if (sts < 0)
    {
      mnSetLastError(ctx, sts);
      return (dvoid *) 0;
    }

  if (!(blob = (mnblob *) mnmUserAlloc(ctx, sizeof(mnblob))))
    return (dvoid *) 0;

  
  port = mnOpen(MNPROTO_STREAM);
  DISCARD mnConnect(port, destaddr);

  port->proto = MNPROTO_BLOB;

  
  netsz = smnHton4(blobsz);
  sts = mntSendFill(ctx, port, (ub1 *) &netsz, sizeof(ub4), (ub4) sizeof(ub4),
		    TRUE, FALSE);

  
  if (sts >= 0)
    sts = mntAppendPkt(ctx, port, (ub4) 0, FALSE);

  if (sts < 0)
    {
      DISCARD mnClose(port);
      mnmUserFree(ctx, (dvoid *) blob);
      mnSetLastError(ctx, sts);
      return (dvoid *) 0;
    }

  
  port->lspkt->len = blobsz + 1;
  port->lspkt->flags &= ~MNNFLG_MTC;

  
  blob->offset = port->naseq;
  port->naseq += (sb4) (blobsz + 1);
  port->sstate = MNSTS_XMIT;
  port->rstate = MNSTS_ESTABLISHED;
  port->rexmt = MNTMINREXMT * 4;

  
  se = (mntse *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mntse));
  se->sem = mneMakeSem(ctx, mnBlobClose, (dvoid *) blob);
  se->seqid = port->naseq;
  se->cnt = blobsz;
  mnqEnq(&port->se, se);

  
  blob->handler = handler;
  blob->usrp = usrp;
  blob->port = port;
  blob->total = blobsz;

  return (dvoid *) blob;
}


sb4 mnBlobSend(dvoid *state, ub1 *hdr, ub4 *hdrlen)
{
  mnctx  *ctx;
  mnblob *blob;
  mnp    *port;
  mnnpkt *pkt;
  mnnhdr *phdr;

  ctx = mnGlbCtx;
  blob = (mnblob *) state;
  port = blob->port;

  
  if (!port->rxsem)
    {
      port->rxsem = mnSemAlloc((dvoid *) port);
      mneSemSetHandler(ctx, port->rxsem, mntRexmit, FALSE);
      mneTimer(ctx, port->rexmt, port->rxsem);
    }

  pkt = port->unpkt;
  phdr = (mnnhdr *) &pkt[1];

  
  phdr->flags = (ub1) (pkt->flags & 0xff);
  if (pkt->flags & MNNFLG_FST)
    {
      phdr->len = smnHton4(pkt->len - sizeof(mnnhdr));
      phdr->seqid = smnHton4(pkt->seqid);
    }
  else
    {
      phdr->len = 0;
      phdr->seqid = smnHton4(blob->offset - sizeof(ub4));
    }

  phdr->cksm = 0;

  
  *hdrlen = (pkt->flags & MNNFLG_FST) ? pkt->len : sizeof(mnnhdr);
  phdr->proto = (MNPROTO_STREAM | MNNVRS);
  phdr->cksm = mnnCheckSum((ub1 *) phdr, *hdrlen);

  phdr->proto = (MNPROTO_BLOB | MNNVRS);
  DISCARD memcpy(hdr, phdr, (size_t) *hdrlen);

  if (pkt->flags & MNNFLG_FST)
    return 0;
  else
    return smnModSub(pkt->seqid, blob->offset);
}


void mnBlobRexmt(mnctx *ctx, mnp *port)
{
  mnblob *blob;
  mntse  *se;
  mnnpkt *pkt;
  sb4     offset;

  se = (mntse *) port->se.tail;
  blob = (mnblob *) mnSemGetUsrp(se->sem);
  pkt = blob->port->unpkt;

  if (pkt->flags & MNNFLG_FST)
    offset = 0;
  else
    offset = smnModSub(pkt->seqid, blob->offset);

  mnePost(ctx, blob->handler, blob->usrp, offset);
}


void mnBlobClose(dvoid *bp, sb4 sts)
{
  mnctx  *ctx;
  mnblob *blob;

  ctx = mnGlbCtx;
  blob = (mnblob *) bp;

  DISCARD mnClose(blob->port);
  mnePost(ctx, blob->handler, blob->usrp, sts);
  mnmUserFree(ctx, (dvoid *) blob);
}
