/* mx/src/mn/mnscmd.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MZN_ORACLE
#include <mzn.h>
#endif
#ifndef MNSC_ORACLE
#include <mnsc.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSR_ORACLE
#include <ysr.h>
#endif
#ifndef MTL_ORACLE
#include <mtl.h>
#endif
#ifndef MNPSL_ORACLE
#include <mnpsl.h>
#endif

static struct ysargmap mnscArgs[] =
{
  { 'g', "mn.sync-gateway", 1 },
  { YSARG_OPTPARAM, "mnscmd.command", 1 },
  { YSARG_OPTPARAM, "mnscmd.command-args", YSARG_MANY },
  { 0 }
};

static mnrb *mnscmdbh;

struct cmddesc
{
  const char *name;                                       
  ub4         sigcnt;                    
  const char *args;                                  
  const char *desc;                             
  boolean     usage;                          
  boolean     alladdr;                  
  boolean     done;                        
  void       (*func)(sword argc, char **argv);         
};
typedef struct cmddesc cmddesc;                       

boolean proccmd(sword argc, char **argv);
dvoid  *scalloc(mnxStream *stream, size_t len);
sb4     scpush(mnxStream *stream, dvoid *ptr);
void    scpause(sword argc, char **argv);
void    screstart(sword argc, char **argv);
void    scstop(sword argc, char **argv);
void    schelp(sword argc, char **argv);
void	scmnps(sword argc, char **argv);
ub4     parsebuf(char *buf, char **targv);

static CONST_W_PTR cmddesc cmds[] =
{
  { "exit", 1, "",
      "exit from mnscmd", FALSE, FALSE, TRUE, 0 },
  { "help", 1, "[ command ]",
      "display help information", FALSE, FALSE, FALSE, schelp },
  { "pause", 2, "[ all | [address...]]",
      "pause a queue or an instance", TRUE, TRUE, FALSE, scpause },
  { "ps", 2, "-ascl",
      "display the process server status", FALSE, FALSE, FALSE, scmnps },
  { "quit", 1, "",
      "exit from mnscmd", FALSE, FALSE, TRUE, 0 },
  { "restart", 1, "[ all | [address...]]",
      "restart a queue or an instance", TRUE, TRUE, FALSE, screstart },
  { "status", 3, "-ascl",
      "display the process server status", FALSE, FALSE, FALSE, scmnps },
  { "stop", 3, "[ all | [address...]]",
      "stop a queue or an instance", TRUE, TRUE, FALSE, scstop },
  { "?", 1, "[ command ]",
      "display help information", FALSE, FALSE, FALSE, schelp }
};

static ub4 cmdcnt = sizeof(cmds) / sizeof(cmddesc);

boolean mnscmd(dvoid *osdCtx, const char *nm, sword argc, char **argv)
{
  ub4     targc;
  char   *targv[127], buf[1024];
  boolean done;
  yslst	 *argList;
  ysle	 *e;
  sword	  nargc = 0;
  char	  **nargv;
  sword	  i, sts;
  char	  *cmd;

  sts = ysArgParse( argc, argv, mnscArgs );
  if (sts == YSARG_VERSION)
    yslError(ysVersion(buf, sizeof(buf)));
  if (sts != YSARG_NORMAL)
    return FALSE;

  if( !smniInit( osdCtx, (mnLogger)0 ) )
    return( FALSE );

  
  nargc = 0;
  if( (cmd = ysResGetLast( "mnscmd.command" ) ) )
  {
    if( (argList = ysResGet("mnscmd.command-args") ) )
      nargc = ysLstCount( argList );
    nargv = (char **)ysmGlbAlloc( ++nargc * sizeof(char**), "mnscmdArgv" );
    nargv[0] = cmd;
    if( argList )
      for( i = 1, e = ysLstHead( argList ); i < nargc; e = ysLstNext( e ))
	nargv[i++] = (char *)e->ptr;
  }

  mnscmdbh = mnrFindServer("mnsc", (mnrid *) 0);
  if (!mnscmdbh)
    {
      yslPrint(mnError(mnLastError()));
      return FALSE;
    }

  if (!nargc)
    {
      done = FALSE;
      while (!done)
	{
	  memset(buf, 0, sizeof(buf));
	  yslPrint("mnscmd> ");
	  if (!yslGets(buf, sizeof(buf)))
	    done = TRUE;
	  else
	    {
	      targc = parsebuf(buf, targv);
	      if (targc)
		done = proccmd(targc, targv);
	    }
	}
    }
  else
    proccmd(nargc, nargv);

  mnTerm();

  return( TRUE );
}

boolean proccmd(sword argc, char **argv)
{
  ub4       i, current;
  mnxStream stream;
  sb4       cnt;

  for (i = 0; i < cmdcnt && strncmp(cmds[i].name, argv[0], strlen(argv[0]));
       i++) ;

  if (i == cmdcnt)
    yslPrint("invalid command; try 'help'\n");
  else if (strlen(argv[0]) < cmds[i].sigcnt)
    yslPrint("ambiguous command\n");
  else if (cmds[i].done)
    return TRUE;
  else if (argc == 1 && cmds[i].usage)
    yslPrint("usage: %s %s\n", cmds[i].name, cmds[i].args);
  else
    {
      if (argc > 1 && cmds[i].alladdr && !strcmp(argv[1], "all"))
	{
	  stream.alloc = scalloc;
	  stream.push = scpush;
	  stream.close = (void (*)(mnxStream *, sb4)) 0;
	  stream.usrp = (dvoid *) cmds[i].func;

	  cnt = mnsQuery(mnscmdbh, &stream, &current);
	  if (cnt < 0)
	    yslPrint("%s\n", mnError(cnt));
	  else if (cnt == 0)
	    yslPrint("no entries\n");
	}
      else
	cmds[i].func(argc - 1, argv + 1);
    }

  return FALSE;
}

dvoid *scalloc(mnxStream *stream, size_t len)
{
  return ysmGlbAlloc(len, "scalloc");
}

sb4 scpush(mnxStream *stream, dvoid *ptr)
{
  mnsqent *scq;
  void   (*func)(ub4, char **);
  char     out[MNAMAXLEN], *outp;

  outp = out;
  scq = (mnsqent *) ptr;
  mnAtos(&scq->caddr, out, MNAMAXLEN);	

  func = (void (*)(ub4, char **)) stream->usrp;
  func(1, &outp);
  return 0;
}

void scpause(sword argc, char **argv)
{
  ub4 i;
  sb4 sts;
  mna addr;

  for (i = 0; i < argc; i++)
    {
      if (mnAddr(&addr, argv[i]))
	yslPrint("%s: bad address\n", argv[i]);
      else
	{
	  sts = mnsPause(mnscmdbh, &addr, TRUE);
	  switch (sts)
	    {
	    case MNSTS_TERMINATE: yslPrint("%s: terminating\n", argv[i]); break;
	    case MNERR_NOTFOUND: yslPrint("%s: not found\n", argv[i]); break;
	    case 0: yslPrint("%s: paused\n", argv[i]); break;
	    default: yslPrint("communication error: %s\n", mnError(sts)); break;
	    }
	}
    }
}

void screstart(sword argc, char **argv)
{
  ub4 i;
  sb4 sts;
  mna addr;

  for (i = 0; i < argc; i++)
    {
      if (mnAddr(&addr, argv[i]))
	yslPrint("%s: bad address\n", argv[i]);
      else
	{
	  sts = mnsPause(mnscmdbh, &addr, FALSE);
	  switch (sts)
	    {
	    case MNSTS_TERMINATE: yslPrint("%s: terminating\n", argv[i]); break;
	    case MNERR_NOTFOUND: yslPrint("%s: not found\n", argv[i]); break;
	    case 0: yslPrint("%s: restarted\n", argv[i]); break;
	    default: yslPrint("communication error: %s\n", mnError(sts)); break;
	    }
	}
    }
}

void scstop(sword argc, char **argv)
{
  ub4 i;
  sb4 sts;
  mna addr;

  for (i = 0; i < argc; i++)
    {
      if (mnAddr(&addr, argv[i]))
	yslPrint("%s: bad address\n", argv[i]);
      else
	{
	  sts = mnsStop(mnscmdbh, &addr);
	  switch (sts)
	    {
	    case MNSTS_TERMINATE: yslPrint("%s: terminating\n", argv[i]); break;
	    case MNERR_NOTFOUND: yslPrint("%s: not found\n", argv[i]); break;
	    case 0: yslPrint("%s: stopped\n", argv[i]); break;
	    default: yslPrint("communication error: %s\n", mnError(sts)); break;
	    }
	}
    }
}

void schelp(sword argc, char **argv)
{
  ub4 i;

  if (!argc)
    {
      yslPrint("Commands are:\n\n");
      for (i = 0; i < cmdcnt; i++)
	{
	  yslPrint("%-10.10s", cmds[i].name);
	  if (!((i + 1) % 7))
	    yslPrint("\n");
	}
      if (i % 7)
	yslPrint("\n");
    }
  else
    {
      for (i = 0;
	   i < cmdcnt && strncmp(cmds[i].name, argv[0], strlen(argv[0]));
	   i++) ;

      if (i == cmdcnt)
	yslPrint("invalid command; try 'help'\n");
      else if (strlen(argv[0]) < cmds[i].sigcnt)
	yslPrint("ambiguous command\n");
      else
	yslPrint("%-12.12s %s\n", cmds[i].name, cmds[i].desc);
    }

}

void scmnps(sword argc, char **argv)
{
#ifndef RISCOS
  DISCARD mnpsl( (dvoid *)0, "mnscmd", argc, argv, TRUE );
#endif
}


ub4 parsebuf(char *buf, char **targv)
{
  char arg[1024];
  int cnt, i;

  cnt = i = 0;
  while (sscanf(buf, "%s%n", arg, &cnt) > 0)
    {
      targv[i++] = buf;
      buf[cnt] = '\0';
      buf += cnt + 1;
    }

  return i;
}
