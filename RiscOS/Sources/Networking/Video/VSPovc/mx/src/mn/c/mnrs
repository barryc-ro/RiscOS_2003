/* mx/src/mn/mnrs.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YSMSC_ORACLE
#include <ysmsc.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNX_ORACLE
#include <mnx.h>
#endif
#ifndef MZN_ORACLE
#include <mzn.h>
#endif
#ifndef MNSC_ORACLE
#include <mnsc.h>
#endif
#ifndef MNRC_ORACLE
#include <mnrc.h>
#endif
#ifndef MNRS_ORACLE
#include <mnrs.h>
#endif
#ifndef MNRI_ORACLE
#include <mnri.h>
#endif

STATICF void mnrCtxDead(dvoid *usrp, sb4 val);


mnrs *mnrCreateServer(const mnrid *progid,
		      ub4 ccnt, const mnrcd **comps, dvoid *usrp)
{
  mnctx *ctx;
  mnrs  *sh;
  sb4    sts, i;

  ctx = mnGlbCtx;
  sh = (mnrs *) mnmAlloc(ctx, MNM_MAYBEPOOL, sizeof(mnrs));
  if (!sh)
    return (mnrs *) 0;

  
  DISCARD memcpy(&sh->progid, progid, sizeof(mnrid));
  sh->cds = (mnrscd *) 0;
  sh->usrp = usrp;

  sh->name = (char *) 0;
  sh->thread = FALSE;
  sh->scbh = (mnrb *) 0;

  sh->port = mnOpen(MNPROTO_MESSAGE);
  sh->registered = FALSE;

  sh->gnc = TRUE;
  sh->newcalls = TRUE;
  sh->final = 0;
  sh->running = TRUE;
  sh->nctxid = 1;
  sh->ctxs = (mnrscx *) 0;

  if (!sh->port)
    {
      mnrDestroyServer(sh);
      return (mnrs *) 0;
    }

  
  for (i = 0, sts = 0; i < (sb4) ccnt && !sts; i++)
    sts = mnrAddComp(sh, comps[i], (dvoid *) 0);

  if (i < (sb4) ccnt)
    {
      mnSetLastError(ctx, sts);
      mnrDestroyServer(sh);
      return (mnrs *) 0;
    }

  return sh;
}


void mnrDestroyServer(mnrs *sh)
{
  mnrsc   call;
  mnrsc  *cd;
  mnrscx *sc;
  mnrscd *scd;
  mnctx  *ctx;

  ctx = mnGlbCtx;

  
  if (sh->ctxs)
    {
      call.sh = sh;
      call.data = (ub1 *) 0;
      call.len = 0;
      mnaClear(&call.from);
      call.callid = 0;
      call.options = MNOPT_NOREPLY;

      while (sh->ctxs)
	{
	  sc = sh->ctxs;
	  call.ctxid = sc->ctxid;
          if(sc->rdfunc)
          {
            cd = (mnrsc *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnrsc));
            CPSTRUCT(*cd,call);
            DISCARD mnDeathIgnore(&sc->addr,(dvoid *)sc);
            (*sc->rdfunc)(cd, (mnbv *) 0, (ub4) 0);
          }
          mnrCtxDestroy(&call);     
	}
    }

  
  if (sh->registered)
    DISCARD mnrUnregister(sh);

  
  if (sh->port)
    DISCARD mnClose(sh->port);

  
  while (scd = sh->cds)
    {
      sh->cds = sh->cds->next;
      mnmFree(ctx, scd);
    }

  
  mnmFree(ctx, (dvoid *) sh);
}


sb4 mnrRegister(mnrs *sh, const char *name, boolean thread)
{
  mznent entry;
  sb4    sts;

  if (sh->registered)
    return MNERR_ALREADY;

  sh->name = name;

  DISCARD memset(&entry, 0, sizeof(mznent));
  mnGetAddr(sh->port, &entry.addr);

  if (thread)
    {
      sh->scbh = mnrFindServer("mnsc", &mnscPid);
      if (!sh->scbh)
	thread = FALSE;
    }

  if (thread)
    {
      sh->thread = TRUE;
      sts = mnsRegister(sh->scbh, name, &sh->progid, &entry.addr);
      if (sts < 0)
	{
	  mnrFreeHandle(sh->scbh);
	  sh->scbh = (mnrb *) 0;
	  sh->thread = FALSE;
	}
    }
  else
    {
      entry.name = name;
      entry.id = &sh->progid;

      sts = mznInsEntry(&entry);
    }

  if (!sts)
    sh->registered = TRUE;

  return sts;
}


sb4 mnrUnregister(mnrs *sh)
{
  mna addr;
  sb4 sts;

  if (!sh->registered)
    return 0;

  if (sh->thread)
    {
      mnGetAddr(sh->port, &addr);
      sts = mnsUnregister(sh->scbh, &addr);
      sh->thread = FALSE;
      mnrFreeHandle(sh->scbh);
    }
  else
    sts = mznDelEntry(sh->name, &sh->progid);

  sh->registered = FALSE;

  return sts;
}


void mnrGetAddr(mnrs *sh, mna *addr)
{
  mnGetAddr(sh->port, addr);
}


dvoid *mnrGetUsrp(mnrs *sh)
{
  return sh->usrp;
}


mnp *mnrGetServerPort(mnrs *sh)
{
  return sh->port;
}


sb4 mnrAddComp(mnrs *sh, const mnrcd *cd, dvoid *usrp)
{
  mnctx  *ctx;
  mnrscd *pcd, *scd;

  
  for (pcd = (mnrscd *) 0, scd = sh->cds;
       scd && mnrIdCmp(cd->cid, scd->cd->cid, TRUE);
       pcd = scd, scd = scd->next) ;

  if (scd)
    return MNERR_DUPLICATE;

  
  ctx = mnGlbCtx;
  scd = (mnrscd *) mnmAlloc(ctx, MNM_MAYBEPOOL, sizeof(mnrscd));
  if (!scd)
    return MNERR_OUTMEM;

  scd->next = (mnrscd *) 0;
  scd->cd = cd;
  scd->usrp = usrp;

  
  if (pcd)
    pcd->next = scd;
  else
    sh->cds = scd;

  return 0;
}


sb4 mnrRemComp(mnrs *sh, const mnrid *cid)
{
  mnctx  *ctx;
  mnrscd *pcd, *scd;

  
  for (pcd = (mnrscd *) 0, scd = sh->cds;
       scd && mnrIdCmp(cid, scd->cd->cid, TRUE);
       pcd = scd, scd = scd->next) ;

  if (!scd)
    return MNERR_NOTFOUND;

  
  if (pcd)
    pcd->next = scd->next;
  else
    sh->cds = scd->next;

  
  ctx = mnGlbCtx;
  mnmFree(ctx, scd);

  return 0;
}


dvoid *mnrGetCompUsrp(mnrs *sh, const mnrid *cid)
{
  mnrscd *scd;

  for (scd = sh->cds;
       scd && mnrIdCmp(cid, scd->cd->cid, TRUE);
       scd = scd->next) ;

  return (scd ? scd->usrp : (dvoid *) 0);
}


sb4 mnrMainLoop(mnrs *sh)
{
  sb4    sts;

  
  while (sh->running ||
	 (!sh->final && (sh->ctxs || mnRecvTest(sh->port, (mna *) 0) > 0)))
    {
      sts = mnrListen(sh, (ub4) 0, (mnHandler) 0, (dvoid *) 0);
      if (sts == MNSTS_ABORTED)
	return sts;
      else if (sts < 0)
	mnPrint(MNLERROR, mnError(sts));
      else
	DISCARD mnrDispatchCall(mnrGetNextCall(sh));
    }

  return sh->final;
}


void mnrTermLoop(mnrs *sh, sb4 result)
{
  DISCARD mnrUnregister(sh);
  sh->running = FALSE;
  sh->final = result;
}


sb4 mnrListen(mnrs *sh, ub4 timeout, mnHandler handler, dvoid *usrp)
{
  mnctx *ctx;
  mna    addr;
  sb4    sts;

  ctx = mnGlbCtx;

  
  if (sh->thread && sh->newcalls && sh->gnc)
    {
      mnGetAddr(sh->port, &addr);
      sts = mnsGetNext(sh->scbh, &addr);
      if (sts == MNSTS_TERMINATE)
	{
	  mnrTermLoop(sh, 0);
	  if (handler)
	    mnePost(ctx, handler, usrp, sts);
	  else if (usrp)
	    mneSet(ctx, (mnsem *) usrp, sts, FALSE);
	  else
	    return sts;
	}

      if (sts < 0)
	return sts;

      sh->gnc = FALSE;
    }

  
  sts = mnRecvWait(sh->port, (mna *) 0, timeout, handler, usrp);
  return (sts > 0 ? 0 : sts);
}


void mnrAllow(mnrs *sh)
{
  sh->newcalls = TRUE;
}


void mnrDisallow(mnrs *sh)
{
  sh->newcalls = FALSE;
}


mnrsc *mnrGetNextCall(mnrs *sh)
{
  mnctx  *ctx;
  mnrsc  *call;
  ub1    *buf;
  mnrhdr *hdr;
  sb4     sts;
  mna     from;
  ub1     tmpbuf[16];

  ctx = mnGlbCtx;
  sts = mnRecvWait(sh->port, &from, (ub4) 0, (mnHandler) 0, (dvoid *) 0);
  if (sts > (sb4) 512024)
    {
      mnPrint(MNLERROR, "bad message read: sts=%d", sts);
      DISCARD mnRecv(sh->port, (mna *) 0, tmpbuf, sizeof(tmpbuf),
		     (ub4) 0, (mnHandler) 0, (dvoid *) 0);
      sts = -1;
    }

  if (sts >= 0 && sh->scbh && mnaNetEq(&from, &sh->scbh->server))
    sh->gnc = TRUE;
  if (sts > 0)
    {
      buf = (ub1 *) mnmUserAlloc(ctx, (size_t) sts);
      if (buf)
	{
	  sts = mnRecv(sh->port, (mna *) 0, buf, (size_t) sts,
		       (ub4) 0, (mnHandler) 0, (dvoid *) 0);
	}
      else
	sts = MNERR_OUTMEM;
    }
  else
    buf = (ub1 *) 0;

  if (sts <= 0)
    {
      mnSetLastError(ctx, sts);
      if (buf)
	mnmUserFree(ctx, (dvoid *) buf);
      mnPrint(MNLWARN, "read error from server handle: %s", mnError(sts));
      return (mnrsc *) 0;
    }

  hdr = (mnrhdr *) buf;

  call = (mnrsc *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnrsc));
  call->sh = sh;
  call->data = buf;
  call->len = (ub4) sts;
  mnaCopy(&call->from, &hdr->from);
  call->callid = hdr->callid;
  call->options = smnNtoh4(hdr->options);
  call->ctxid = smnNtoh4(hdr->ctxid);

  return call;
}


boolean mnrDispatchCall(mnrsc *call)
{
  mnctx       *ctx;
  const mnrcd *cd;
  const mnrod *od;
  mnrs        *sh;
  mnrscd      *scd;
  mnrhdr      *hdr;
  mnbv         inargs;
  char        *cmp, *oper, out[MNAMAXLEN];
  ub4          j, pos, hdrlen, len, incnt;

  if (!call)
    return FALSE;

  ctx = mnGlbCtx;

  sh = call->sh;
  hdr = (mnrhdr *) call->data;

  
  oper = (char *) &hdr[1];
  len = strlen(oper);
  hdrlen = sizeof(mnrhdr) + ysRoundVal(len + 1, 4);

  
  for (pos = 0; pos < len && oper[pos] != '.'; pos++) ;
  if (pos != len)
    {
      oper[pos] = '\0';
      cmp = oper;
      oper = oper + pos + 1;
    }
  else
    cmp = (char *) 0;

  
  for (scd = sh->cds; scd; scd = scd->next)
    {
      cd = scd->cd;
      if (cmp && strcmp(cmp, cd->nm))
	continue;

      for (j = 0; j < cd->noper && strcmp(oper, cd->opers[j].nm); j++) ;
      if (j < cd->noper)
	break;
    }

  if (scd)
    od = cd->opers + j;
  else
    {
      mnAtos(&call->from, out, MNAMAXLEN);
      mnPrint(MNLERROR, "dispatch on unknown operation %s from %s", oper, out);
      mnSetLastError(ctx, MNERR_NOSUCHOPER);
      mnrReturnError(ctx, call, MNERR_NOSUCHOPER);
      return FALSE;
    }

  
  inargs.len = (size_t) (call->len - hdrlen);
  inargs.buf = call->data + hdrlen;
  incnt = 1;
  (*od->oper)(call, &inargs, incnt);
  return TRUE;
}


sb4 mnrReturnCall(mnrsc *call, mnbv *outargs, ub4 outcnt,
		  mnHandler handler, dvoid *usrp)
{
  mnctx *ctx;
  mnrhdr hdr;
  sb4    sts;

  ctx = mnGlbCtx;

  
  if (call->options & MNOPT_NOREPLY)
    {
      if (call->data)
	  mnmUserFree(ctx, (dvoid *) call->data);
      mnmFree(ctx, (dvoid *) call);

      if (handler)
	mnePost(ctx, handler, usrp, (sb4) 0);
      else if (usrp)
	mneSet(ctx, (mnsem *) usrp, (sb4) 0, FALSE);

      return 0;
    }
  else
    {
      mnmUserFree(ctx, (dvoid *) call->data);

      hdr.callid = call->callid;
      hdr.options = smnHton4(0);
      hdr.ctxid = smnHton4(call->ctxid);

      sts = mnSendHeader(call->sh->port, &call->from,
			 (ub1 *) &hdr, offsetof(mnrhdr, from),
			 outargs, outcnt, handler, usrp);

      mnmFree(ctx, (dvoid *) call);
      return sts;
    }
}


void mnrGetPeer(mnrsc *call, mna *client)
{
  mnaCopy(client, &call->from);
}


mnrs *mnrGetHandle(mnrsc *call)
{
  return call->sh;
}


sb4 mnrCtxCreate(mnrsc *call, dvoid *cctx, void (*func)(mnrsc *, mnbv *, ub4))
{
  mnctx  *ctx;
  mnrs   *sh;
  mnrscx *rc;

  ctx = mnGlbCtx;
  sh = call->sh;

  if (!sh->running)
    return MNSTS_TERMINATE;

  rc = (mnrscx *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnrscx));
  rc->sh = sh;
  mnaCopy(&rc->addr,&call->from);
  rc->next = sh->ctxs;
  rc->ctx = cctx;
  rc->ctxid = sh->nctxid++;
  rc->rdfunc = func;

  call->ctxid = rc->ctxid;

  if (!sh->nctxid)
    sh->nctxid = 1;

  sh->ctxs = rc;

  if(func)
    DISCARD mnDeathWatch(&call->from,mnrCtxDead,(dvoid *)rc);

  return 0;
}

STATICF void mnrCtxDead(dvoid *usrp, sb4 val)
{
  mnrscx *sc = (mnrscx *) usrp;
  mnctx  *ctx;
  mnrsc  *call;

  if(val != 0 && val != MNERR_BADADDR) return;

  ctx = mnGlbCtx;

  call = (mnrsc *) mnmAlloc(ctx, MNM_MAINPOOL, sizeof(mnrsc));
  call->sh = sc->sh;
  call->data = (ub1 *) 0;
  call->len = 0;
  mnaClear(&call->from);
  call->callid = 0;
  call->options = MNOPT_NOREPLY;
  call->ctxid = sc->ctxid;

  (*sc->rdfunc)(call, (mnbv *) 0, (ub4) 0);        
}


void mnrCtxDestroy(mnrsc *call)
{
  mnctx  *ctx;
  mnrs   *sh;
  mnrscx *prev, *sc;

  ctx = mnGlbCtx;

  sh = call->sh;

  for (prev = (mnrscx *) 0, sc = sh->ctxs;
       sc && sc->ctxid != call->ctxid;
       prev = sc, sc = sc->next) ;

  if (sc)
    {
      if (prev)
	prev->next = sc->next;
      else
	sh->ctxs = sc->next;
      if(sc->rdfunc)
        DISCARD mnDeathIgnore(&sc->addr,(dvoid *)sc);
      mnmFree(ctx, (dvoid *) sc);
    }

  call->ctxid = 0;
}


dvoid *mnrCtxGet(mnrsc *call)
{
  mnrs   *sh;
  mnrscx *sc;

  sh = call->sh;

  for (sc = sh->ctxs; sc && sc->ctxid != call->ctxid; sc = sc->next) ;
  return (sc ? sc->ctx : (dvoid *) 0);
}


ub4 mnrCtxId(mnrsc *call)
{
  return call->ctxid;
}


dvoid *mnrConvertId(mnrs *sh, ub4 id)
{
  mnrscx *sc;

  for (sc = sh->ctxs; sc && sc->ctxid != id; sc = sc->next) ;
  return (sc ? sc->ctx : (dvoid *) 0);
}


void mnrReturnError(mnctx *ctx, mnrsc *call, sb4 err)
{
  mnrhdr hdr;

  mnmUserFree(ctx, (dvoid *) call->data);

  if (!(call->options & MNOPT_NOREPLY))
    {
      hdr.callid = call->callid;
      hdr.options = smnHton4(((ub4) -err));
      hdr.ctxid = smnHton4(call->ctxid);

      DISCARD mnSend(call->sh->port, &call->from, (ub1 *) &hdr,
		     offsetof(mnrhdr, from), mnDiscard, (dvoid *) 0);
    }

  mnmFree(ctx, (dvoid *) call);
}
