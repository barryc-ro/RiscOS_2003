/* mx/src/mn/mnscc.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNSC_ORACLE
#include <mnsc.h>
#endif

sb4 mnsRegister(mnrb *bh, CONST char *name, CONST mnrid *progid, mna *addr)
{
  mnx  *xstr;
  mnbv *inargs, *outargs;
  ub4   incnt, outcnt;
  sb4   sts;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &inargs, &incnt, (dvoid *) 0);
  if (mnxDynStr(xstr, (char **) &name) &&
      mnrxId(xstr, (dvoid *) progid) &&
      mnxAddr(xstr, addr))
    sts = 0;
  else
    sts = mnLastError();

  
  if (!sts)
    sts = mnrCall(bh, (dvoid **) 0, "mnsRegister", inargs, incnt,
		  &outargs, &outcnt, (mnHandler) 0, (dvoid *) 0);
  mnxDestroy(xstr, TRUE);

  if (sts < 0)
    return sts;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &outargs, &outcnt, (dvoid *) 0);
  if (!mnxSB4(xstr, &sts))
    sts = mnLastError();
  mnxDestroy(xstr, TRUE);

  return sts;
}

sb4 mnsGetNext(mnrb *bh, mna *addr)
{
  sb4   sts;
  mnbv *inargs, *outargs;
  ub4   incnt, outcnt;
  mnx  *xstr;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &inargs, &incnt, (dvoid *) 0);
  if (mnxAddr(xstr, addr))
    sts = 0;
  else
    sts = mnLastError();

  
  if (!sts)
    sts = mnrCall(bh, (dvoid **) 0, "mnsGetNext", inargs, incnt,
		  &outargs, &outcnt, (mnHandler) 0, (dvoid *) 0);
  mnxDestroy(xstr, TRUE);

  if (sts < 0)
    return sts;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &outargs, &outcnt, (dvoid *) 0);
  if (!mnxSB4(xstr, &sts))
    sts = mnLastError();
  mnxDestroy(xstr, TRUE);

  return sts;
}

sb4 mnsUnregister(mnrb *bh, mna *addr)
{
  sb4   sts;
  mnbv *inargs, *outargs;
  ub4   incnt, outcnt;
  mnx  *xstr;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &inargs, &incnt, (dvoid *) 0);
  if (mnxAddr(xstr, addr))
    sts = 0;
  else
    sts = mnLastError();

  
  if (!sts)
    sts = mnrCall(bh, (dvoid **) 0, "mnsUnregister", inargs, incnt,
		  &outargs, &outcnt, (mnHandler) 0, (dvoid *) 0);
  mnxDestroy(xstr, TRUE);

  if (sts < 0)
    return sts;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &outargs, &outcnt, (dvoid *) 0);
  if (!mnxSB4(xstr, &sts))
    sts = mnLastError();
  mnxDestroy(xstr, TRUE);

  return sts;
}

sb4 mnsPause(mnrb *bh, mna *addr, boolean pause)
{
  mnx  *xstr;
  mnbv *inargs, *outargs;
  ub4   incnt, outcnt;
  sb4   sts;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &inargs, &incnt, (dvoid *) 0);
  if (mnxAddr(xstr, addr) && mnxBoolean(xstr, &pause))
    sts = 0;
  else
    sts = mnLastError();

  
  if (!sts)
    sts = mnrCall(bh, (dvoid **) 0, "mnsPause", inargs, incnt,
		  &outargs, &outcnt, (mnHandler) 0, (dvoid *) 0);
  mnxDestroy(xstr, TRUE);

  if (sts < 0)
    return sts;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &outargs, &outcnt, (dvoid *) 0);
  if (!mnxSB4(xstr, &sts))
    sts = mnLastError();
  mnxDestroy(xstr, TRUE);

  return sts;
}

sb4 mnsStop(mnrb *bh, mna *addr)
{
  mnx  *xstr;
  mnbv *inargs, *outargs;
  ub4   incnt, outcnt;
  sb4   sts;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &inargs, &incnt, (dvoid *) 0);
  if (mnxAddr(xstr, addr))
    sts = 0;
  else
    sts = mnLastError();

  
  if (!sts)
    sts = mnrCall(bh, (dvoid **) 0, "mnsStop", inargs, incnt,
		  &outargs, &outcnt, (mnHandler) 0, (dvoid *) 0);
  mnxDestroy(xstr, TRUE);

  if (sts < 0)
    return sts;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &outargs, &outcnt, (dvoid *) 0);
  if (!mnxSB4(xstr, &sts))
    sts = mnLastError();
  mnxDestroy(xstr, TRUE);

  return sts;
}

sb4 mnsQuery(mnrb *bh, mnxStream *stream, ub4 *clock)
{
  mnx  *xstr;
  mnbv *inargs, *outargs;
  ub4   incnt, outcnt;
  sb4   sts;

  
  stream->elmsz = sizeof(mnsqent);
  stream->xfunc = mnsxQent;

  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &inargs, &incnt, (dvoid *) 0);
  if (mnxOutStream(xstr, stream))
    sts = 0;
  else
    sts = mnLastError();

  
  if (!sts)
    sts = mnrCall(bh, (dvoid **) 0, "mnsQuery", inargs, incnt,
		  &outargs, &outcnt, (mnHandler) 0, (dvoid *) 0);
  mnxDestroy(xstr, TRUE);

  if (sts < 0)
    return sts;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &outargs, &outcnt, (dvoid *) 0);
  if (!mnxB4(xstr, clock) || !mnxSB4(xstr, &sts))
    sts = mnLastError();
  mnxDestroy(xstr, TRUE);

  return sts;
}
