/* mx/src/mn/mnscs.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef SMN_ORACLE
#include <smn.h>
#endif
#ifndef MTL_ORACLE
#include <mtl.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNRS_ORACLE
#include <mnrs.h>
#endif
#ifndef MNSCS_ORACLE
#include <mnscs.h>
#endif
#ifndef MZMGU_ORACLE
#include <mzmgu.h>
#endif
#ifndef MZMGS_ORACLE
#include <mzmgs.h>
#endif
#ifndef MZN_ORACLE
#include <mzn.h>
#endif

#ifndef YS_ORACLE
#include <ys.h>
#endif

#ifndef YSR_ORACLE
#include <ysr.h>
#endif

#ifndef MTL_ORACLE
#include <mtl.h>
#endif

#ifndef SMNI_ORACLE
#include <smni.h>
#endif

typedef struct hostitem hostitem;


struct hostitem {
  char		*hostname;
  hostitem	*next;
};


STATICF CONST_W_PTR mnrod mnscOpers[] =
{
  { mnssRegister, "mnsRegister" },
  { mnssGetNext,  "mnsGetNext" },
  { mnssUnregister, "mnsUnregister" },
  { mnssPause, "mnsPause" },
  { mnssStop, "mnsStop" },
  { mnssQuery, "mnsQuery" },
  { mnssShutdown, "mnsShutdown" }
};


static  CONST_DATA mnrid s_mnscCid =
  { { 117, 216, 96, 114, 102, 123, 198, 146  }, MNVERS(1, 0) };

#ifdef RISCOS
STATICF CONST_W_PTR mnrcd mnscComp;
STATICF CONST_DATA mnrcd *mnscCompList[1];
#else 
STATICF CONST_W_PTR mnrcd mnscComp =
  { &s_mnscCid, sizeof(mnscOpers) / sizeof(mnrod), mnscOpers, "mnsc" };

STATICF CONST_DATA mnrcd *mnscCompList[] =
{
  &mnscComp                                      
};
#endif

static struct ysargmap mnscArgs[] =
{
  { 'g', "mn.sync-gateway", 1 },
  { 'e', "mnsc.logtool", 1 },
  { 0 }
};

#ifdef MNSCD_DEFINED
STATICF void	  mnscCollectHosts(CONST mnscctx *CONST scctx);
STATICF hostitem *mnscGetDaemonHosts(void);
STATICF hostitem *mnscGetAllHosts(void);
STATICF dvoid	 *mnscAlloc(mnxStream *stream, size_t len);
STATICF sb4	  mnscPshAllHosts(mnxStream *stream, dvoid *ptr);
STATICF void	  mnscGetServerList(CONST char *CONST host,
				    srvrinfo **silist, ub4 *sicnt);
STATICF void	  mnscInsertHost(mnsqent *CONST queues,
				 CONST srvrinfo *CONST si,
				 char *host);
#endif 

boolean mnscMain(dvoid *osdCtx, const char *nm, sword argc, char **argv)
{
  sb4     sts;
  mnscctx scctx;
  mnsem  *sem;
  ub4     i;
  mzmguTimeTicks now;
  char   *arg;
  sb4     tool = MtlLogTool;
  char    vbuf[80];
  
  (void) memset(&scctx, 0, sizeof(mnscctx));

  sts = ysArgParse( argc, argv, mnscArgs );
  if (sts == YSARG_VERSION)
    {
      yslError("Oracle Media Net Process Server");
      yslError(ysVersion(vbuf, sizeof(vbuf)));
    }
  if (sts != YSARG_NORMAL)
    return FALSE;

  if( arg = ysResGetLast( "mzns.logtool" ) )
  {
    if( !strcmp( arg, "screen" ) )
      tool = MtlScreenTool;
    else if( !strcmp( arg, "log" ) )
      tool = MtlLogTool;
    else if( !strcmp( arg, "console" ) )
      tool = MtlConsoleTool;
    else
    {
      mtlLog("Unrecognized log tool %s", arg );
      return( FALSE );
    }
    mtlInit( tool, nm );
  }

  if( !smniInit( osdCtx, (mnLogger)0 ) )
    return( FALSE );

  if (tool != MtlScreenTool)
    {
      mtlLog("Oracle Media Net Process Server");
      mtlLog(ysVersion(vbuf, sizeof(vbuf)));
      yslDetach();
    }

  if (!mtcctxInit() || mtcctxPut(MNSCCTX, (ub4) 0, (dvoid *) &scctx))
    {
      mtlLog("FATAL: context manager initialization failure");
      return( FALSE );
    }

  scctx.sh = mnrCreateServer(&mnscPid, (ub4) 1, mnscCompList, (dvoid *) 0);
  sts = mnrRegister(scctx.sh, "mnsc", FALSE);
  if (sts < 0)
    {
      switch (sts)
	{
	case MNERR_BROKEN:
	  mtlLog("ERROR: communication with name server failed");
	  break;
	case MNERR_DUPLICATE:
	  mtlLog("ERROR: process server already running");
	  break;
	default:
	  mtlLog("ERROR: during registration: %s", mnError(sts));
	  break;
	}

      mnrDestroyServer(scctx.sh);
      return FALSE;
    }

  
  CLRSTRUCT( scctx.mibstats );
  now = mzmgsTimeStamp();
  scctx.mibstats.OperStatus_mzmguSStats = mzmguStRunning;
  scctx.mibstats.AdminStatus_mzmguSStats = mzmguStRunning;
  scctx.mibstats.ChangedAdminStatus_mzmguSStats = now;
  scctx.mibstats.LastOutbound_mzmguSStats = now;
  scctx.mibstats.LastInbound_mzmguSStats = now;
  DISCARD mzmgsAddCommonMib( scctx.sh, MZMGA_SVC_CTRL_SVCTYPE,
			    (mzmgsStFunc*)0, (dvoid *)&scctx.mibstats);
			    
  
  scctx.semset = (mnsem **) ysmGlbAlloc(sizeof(mnsem *) * 16, "mnsems");
  scctx.semmax = 16;
  scctx.semcnt = 2;

  scctx.semset[0] = mnSemAlloc((dvoid *) 0);        
  scctx.semset[1] = mnSemAlloc((dvoid *) 0);
  mnrListen(scctx.sh, (ub4) 0, (mnHandler) 0, (dvoid *) scctx.semset[1]);

#ifdef MNSCD_DEFINED
  mnscCollectHosts(&scctx);
#endif

  mtlLog("process server awaiting requests");
  do
    {
      
      sts = mnSemOrW((ub4) 0, scctx.semcnt, scctx.semset);
      if (sts == MNSTS_ABORTED)
	break;

      if (mnSemTest(scctx.semset[1]) != MNSTS_UNKNOWN)
	{
	  
	  DISCARD mnrDispatchCall(mnrGetNextCall(scctx.sh));
	  mnSemFree(scctx.semset[1]);
	  scctx.semset[1] = mnSemAlloc((dvoid *) 0);
	  mnrListen(scctx.sh, 0, (mnHandler) 0, (dvoid *) scctx.semset[1]);
	}
      else
	{
	  
	  for (i = 2; i < scctx.semcnt; i++)
	    {
	      sem = scctx.semset[i];
	      if (mnSemTest(sem) != MNSTS_UNKNOWN)
		{
		  mnsRecv((mnsqent *) mnSemGetUsrp(sem),
			  mnSemTest(sem), &scctx.semset[i]);
		  mnSemFree(sem);
		}
	    }
	}
    }
  while (mnSemTest(scctx.semset[0]) == MNSTS_UNKNOWN);

  
  (void)  mnrUnregister(scctx.sh);
  mnscShutdown();
  DISCARD mnrMainLoop(scctx.sh); 

  mnrDestroyServer(scctx.sh);
  mnSemFree(scctx.semset[0]);
  mnSemFree(scctx.semset[1]);
  ysmGlbFree(scctx.semset);
  mtcctxDone();

  return( TRUE );
}

#ifdef MNSCD_DEFINED

STATICF void mnscCollectHosts(CONST mnscctx *CONST scctx)
{
  hostitem	*hitem;
  hostitem	*hitems;
  hostitem	*hi_save;
  srvrinfo	*silist; 
  ub4		 sicnt;
  ub2		 i;
  mnsqent	*scq;

  
  hitems = mnscGetDaemonHosts();

  
  hitem = hitems;
  while (hitem != NULL)
    {
      
      mnscGetServerList(hitem->hostname, &silist, &sicnt);

      
      for (i = 0 ; i < sicnt ; i++)
	{
          mnscInsertHost(scctx->queues, &silist[i], hitem->hostname);
          mnxFree(mnsxSinf, &silist[i]);
	}

      ysmGlbFree(silist);

      hi_save = hitem;
      hitem = hitem->next;
      ysmGlbFree(hi_save->hostname);
      ysmGlbFree(hi_save);
    }

    
    for (scq = scctx->queues ; scq != (mnsqent *) NULL ; scq = scq->next)
      if (scq->hosts != (mnshinf *) NULL)
	scq->flags |= MNSC_DAEMON;
}


STATICF void mnscInsertHost(mnsqent *CONST queues, CONST srvrinfo *CONST si,
			    char *host)
{
  sb4		 sts;
  mnsqent	*scq;
  mznent	 entry;
  mnshinf	*hentry;
  mnshinf	*heprev;
  mnshinf	*henew;
  char		*server_name;

  
  sts = mznFndEntry(si->server, &si->pid, &entry);

  
  if (sts == MNERR_NOTFOUND)
    {
      
      server_name = mnscStrdup(si->server);
      if (sts = mnsNewQueue(server_name, &si->pid, &scq))
	{
	  mtlLog("WARNING: mnsNewQueue() for server \"%s\" returned %d",
		 si->server, sts);
	  return;
	}
    }
  else if (sts == 0)
    {
      
      for (scq = queues; scq && !mnaEq(&entry.addr, &scq->caddr);
	   scq = scq->next) ;

      mnxFree(mznxEntry, (dvoid *) &entry);

      
      if (!scq) {
	mtlLog("WARNING: server \"%s\" already registered by someone else.",
	  si->server);
	return;
      }
    }
  else {
    mtlLog("WARNING: mznFndEntry() for server \"%s\" returned %d",
    	   si->server, sts);
    return;
  }

  henew		  = (mnshinf *) ysmGlbAlloc(sizeof(mnshinf), "mnshinf");
  henew->hostname = mnscStrdup(host);
  henew->started  = 0;

  
  if (scq->hosts == NULL)
    {
      scq->hosts  = henew;
      henew->next = (mnshinf *) NULL;
      return;
    }

  heprev = (mnshinf *) NULL;
  for (hentry = scq->hosts ; hentry != NULL ; hentry = hentry->next)
    {
      
      if (strcmp(hentry->hostname, host) > 0)
        {
	  if (heprev == NULL)
	    {
	      henew->next = scq->hosts;
	      scq->hosts = henew;
	      return;
	    }
	  else
	    {
	      heprev->next = henew;
	      henew->next = hentry;
	      return;
	    }
	}
      heprev = hentry;
    }

  heprev->next = henew;
  henew->next = (mnshinf *) NULL;
}


STATICF void mnscGetServerList(CONST char *CONST host, srvrinfo **silist,
			      ub4 *sicnt)
{
  char	*regname;
  mnrb	*mnscdbh;
  sb4	 sts;

  *silist = (srvrinfo *) NULL;
  *sicnt = 0;

  
  mnscMakeHostRegName(host, MNSC_DAEMON_NAME, &regname);

  
  mnscdbh = mnrFindServer(regname, (mnrid *) 0);

  if (!mnscdbh)
    {
      mtlLog("ERROR: mnrFindServer in mnscGetServerList failed for \"%s\": %s",
	     regname, mnError(mnLastError()));
      ysmGlbFree(regname);
      mnrFreeHandle(mnscdbh);
      return;
    }

  sts = mnscdGetSrvrInfo(mnscdbh, silist, sicnt);

  ysmGlbFree(regname);
  mnrFreeHandle(mnscdbh);

  if (sts < 0) {
    mtlLog("	ERROR from mnscdGetSrvrInfo: %s", mnError(sts));
    return;
  }
}


STATICF hostitem *mnscGetDaemonHosts()
{
  sb4		 cnt;
  mnxStream	 stream;
  char		*regname;
  hostitem	*allhosts;
  hostitem	*hi;
  hostitem	*hi_prev;
  hostitem	*hi_save;

  
  allhosts = mnscGetAllHosts();

  stream.alloc	= mnscAlloc;
  stream.push	= (sb4  (*)(mnxStream *, dvoid *)) 0;
  stream.close	= (void (*)(mnxStream *, sb4)) 0;

  
  hi_prev = (hostitem *) NULL;
  for (hi = allhosts ; hi != NULL ; hi = hi->next)
    {
      mnscMakeHostRegName(hi->hostname, MNSC_DAEMON_NAME, &regname);
      cnt = mznQuery(regname, (ub4) MZN_ALL_PROGRAMS, &stream);
      ysmGlbFree(regname);

      switch (cnt)
        {
	case 0:
	  
	  if (hi_prev == NULL)
	    {
	      hi_save = allhosts;
	      allhosts = allhosts->next;
	    }
	  else
	    {
	      hi_save = hi;
	      hi_prev->next = hi->next;
	    }
	    ysmGlbFree(hi_save->hostname);
	    ysmGlbFree(hi_save);
	  break;
	case 1:
	  
	  break;
	default:
	  mtlLog("WARNING: unexpected return value from mznQuery (%d)", cnt);
	  break;
	}
	hi_prev = hi;
    }

  return allhosts;
}


STATICF hostitem *mnscGetAllHosts()
{
  sb4      	 cnt;
  mnxStream	 stream;
  hostitem	*hitem;
  hostitem	*hi_save;
  hostitem	 allhosts;	

  allhosts.next		= (hostitem *) NULL;
  allhosts.hostname	= (char *) NULL;

  stream.alloc	= mnscAlloc;
  stream.push	= mnscPshAllHosts;
  stream.close	= (void (*)(mnxStream *, sb4)) 0;
  stream.usrp	= (dvoid *) &allhosts;

  cnt = mznQuery((char *) NULL, (ub4) MZN_ALL_NAMES, &stream);

  if (cnt < 0) {
    mtlLog("ERROR: mznQuery returned error: %s", mnError(cnt));

    
    hitem = allhosts.next;
    while (hitem != NULL)
      {
	hi_save = hitem;
	hitem = hitem->next;
        ysmGlbFree(hi_save->hostname);
        ysmGlbFree(hi_save);
      }
    return (hostitem *) NULL;
  }

  return allhosts.next;
}


STATICF dvoid *mnscAlloc(mnxStream *stream, size_t len)
{
  return (dvoid *) ysmGlbAlloc(len, "mnscAlloc");
}


STATICF sb4 mnscPshAllHosts(mnxStream *stream, dvoid *ptr)
{
  mznent	*entry;
  hostitem	*allhosts;
  hostitem	*newhi;
  const char	*eptr;
  ub2		 i;
  size_t	 hdirlen;

  entry = (mznent *) ptr;
  allhosts = (hostitem *) (stream->usrp);

  
  hdirlen = strlen(MNSC_MZN_HOSTS_DIR);
  if (strncmp(MNSC_MZN_HOSTS_DIR, entry->name, hdirlen))
    {
      mnxFree(mznxEntry, (dvoid *) entry);
      ysmGlbFree(ptr);
      return 0;
    }

  
  i = 0;
  for (eptr = &entry->name[hdirlen + 1] ; *eptr != '/' ; eptr++)
    {
      if (*eptr == '\0')
	{
	  mtlLog("WARNING: bad entry in %s name service directory.",
		  MNSC_MZN_HOSTS_DIR);
	  mnxFree(mznxEntry, (dvoid *) entry);
	  ysmGlbFree(ptr);
	  return 0;
	}
      i++;
    }

  newhi = (hostitem *) ysmGlbAlloc(sizeof(hostitem), "hostitem");
  newhi->hostname = (char *) ysmGlbAlloc(i + 1, "hostname" );
  (void) strncpy(newhi->hostname, &entry->name[hdirlen + 1], i);
  newhi->hostname[i] = '\0';
  newhi->next = allhosts->next;

  allhosts->next = newhi;

  mnxFree(mznxEntry, (dvoid *) entry);
  ysmGlbFree(ptr);

  return 0;
}
#endif 

void mnssRegister(mnrsc *call, mnbv *inargs, ub4 incnt)
{
  char *name;
  mnrid id;
  sb4   sts;
  mna   from;
  mnx  *xstr;
  mnbv *outargs;
  ub4   outcnt;

  
  name = (char *) 0;
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &inargs, &incnt, (dvoid *) 0);
  if (mnxDynStr(xstr, &name) && mnrxId(xstr, (dvoid *) &id) &&
      mnxAddr(xstr, &from))
    sts = 0;
  else
    sts = mnLastError();

  mnxDestroy(xstr, FALSE);

  
  if (!sts)
    sts = mnscRegister(&from, name, &id);

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &outargs, &outcnt, (dvoid *) 0);
  if (mnxSB4(xstr, &sts))
    DISCARD mnrReturnCall(call, outargs, outcnt, mnssReturnComp, "register");
  else
    sts = mnLastError();

  mnxDestroy(xstr, TRUE);

  if (sts < 0)
    mtlLog("WARNING: registration failed: reason %s", mnError(sts));
}

void mnssGetNext(mnrsc *call, mnbv *inargs, ub4 incnt)
{
  mna   from;
  sb4   sts;
  mnx  *xstr;
  mnbv *outargs;
  ub4   outcnt;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &inargs, &incnt, (dvoid *) 0);
  if (mnxAddr(xstr, &from))
    sts = 0;
  else
    sts = mnLastError();

  mnxDestroy(xstr, FALSE);

  
  sts = mnscGetNext(&from);

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &outargs, &outcnt, (dvoid *) 0);
  if (mnxSB4(xstr, &sts))
    DISCARD mnrReturnCall(call, outargs, outcnt, mnssReturnComp, "get next");
  else
    sts = mnLastError();

  mnxDestroy(xstr, TRUE);

  if (sts < 0 && sts != MNSTS_TERMINATE)
    mtlLog("WARNING: get next failed: reason %s", mnError(sts));
}

void mnssUnregister(mnrsc *call, mnbv *inargs, ub4 incnt)
{
  mna    from;
  sb4    sts;
  mnx   *xstr;
  mnbv  *outargs;
  ub4    outcnt;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &inargs, &incnt, (dvoid *) 0);
  if (mnxAddr(xstr, &from))
    sts = 0;
  else
    sts = mnLastError();

  mnxDestroy(xstr, FALSE);

  
  sts = mnscUnregister(&from);

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &outargs, &outcnt, (dvoid *) 0);
  if (mnxSB4(xstr, &sts))
    DISCARD mnrReturnCall(call, outargs, outcnt, mnssReturnComp, "unregister");
  else
    sts = mnLastError();

  mnxDestroy(xstr, TRUE);

  if (sts < 0)
    mtlLog("WARNING: unregister failed: reason %s", mnError(sts));
}

void mnssPause(mnrsc *call, mnbv *inargs, ub4 incnt)
{
  mnx    *xstr;
  sb4     sts;
  mna     addr;
  boolean pause;
  mnbv   *outargs;
  ub4     outcnt;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &inargs, &incnt, (dvoid *) 0);
  if (mnxAddr(xstr, &addr) && mnxBoolean(xstr, &pause))
    sts = 0;
  else
    sts = mnLastError();

  mnxDestroy(xstr, FALSE);

  
  if (!sts)
    sts = mnscPause(&addr, pause);

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &outargs, &outcnt, (dvoid *) 0);
  if (mnxSB4(xstr, &sts))
    DISCARD mnrReturnCall(call, outargs, outcnt, mnssReturnComp, "pause");
  else
    sts = mnLastError();

  mnxDestroy(xstr, TRUE);

  if (sts < 0)
    mtlLog("WARNING: pause failed: reason %s", mnError(sts));
}

void mnssStop(mnrsc *call, mnbv *inargs, ub4 incnt)
{
  mnx    *xstr;
  sb4     sts;
  mna     addr;
  mnbv   *outargs;
  ub4     outcnt;

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &inargs, &incnt, (dvoid *) 0);
  if (mnxAddr(xstr, &addr))
    sts = 0;
  else
    sts = mnLastError();

  mnxDestroy(xstr, FALSE);

  
  if (!sts)
    sts = mnscStop(&addr);

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &outargs, &outcnt, (dvoid *) 0);
  if (mnxSB4(xstr, &sts))
    DISCARD mnrReturnCall(call, outargs, outcnt, mnssReturnComp, "stop");
  else
    sts = mnLastError();

  mnxDestroy(xstr, TRUE);

  if (sts < 0)
    mtlLog("WARNING: stop failed: reason %s", mnError(sts));
}

void mnssQuery(mnrsc *call, mnbv *inargs, ub4 incnt)
{
  mnx      *xstr;
  mnxStream stream;
  sb4       sts;
  mnbv     *outargs;
  ub4       outcnt, clock;

  
  memset(&stream, 0, sizeof(mnxStream));
  stream.elmsz = sizeof(mnsqent);
  stream.xfunc = mnsxQent;

  xstr = mnxCreate((mndrp *) 0, MNXDIR_DECODE, &inargs, &incnt, (dvoid *) 0);
  if (mnxOutStream(xstr, &stream))
    sts = 0;
  else
    sts = mnLastError();

  mnxDestroy(xstr, FALSE);

  
  if (!sts)
    sts = mnscQuery(&stream, &clock);

  
  xstr = mnxCreate((mndrp *) 0, MNXDIR_ENCODE, &outargs, &outcnt, (dvoid *) 0);
  if (mnxB4(xstr, &clock) && mnxSB4(xstr, &sts))
    DISCARD mnrReturnCall(call, outargs, outcnt, mnssReturnComp, "query");
  else
    sts = mnLastError();

  mnxDestroy(xstr, TRUE);
  if (sts < 0)
    mtlLog("WARNING: query failed; reason %s", mnError(sts));
}

void mnssShutdown(mnrsc *call, mnbv *inargs, ub4 incnt)
{
  mnscShutdown();
  DISCARD mnrReturnCall(call, (mnbv *) 0, (ub4) 0, mnssReturnComp, "shutdown");
}

void mnssReturnComp(dvoid *usrp, sb4 sts)
{
  if (sts < 0)
    mtlLog("WARNING: Communication error while returning from %s",
	   (char *) usrp);
}

