/* mx/src/mn/mnscs.h */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef MNSCS_ORACLE
#define MNSCS_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef MTCCTX_ORACLE
#include <mtcctx.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNRS_ORACLE
#include <mnrs.h>
#endif
#ifndef MNSC_ORACLE
#include <mnsc.h>
#endif
#ifndef MZMGU_ORACLE
#include <mzmgu.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif


typedef struct mnscctx mnscctx;                    
typedef struct mnsibkt mnsibkt;                           

#define mnscStrdup(s) strcpy(ysmGlbAlloc(strlen(s)+1,"mnscStrdup"),s)

#define MNSCROWS	127                            
#define MNSQLENLIM	3	     
#define MNSEXECWAITTIME	60   

struct mnsibkt
{
  mnsibkt *next;                                     
  mnsient *inst;                                                 
};


struct mnscctx
{
  mnsqent *queues;                                         
  mnsibkt *insts[MNSCROWS];              
  boolean  shutdown;                         
  mnrs    *sh;                                              
  mnsem  **semset;                                          
  ub4      semcnt;                            
  ub4      semmax;                 
  mzmguSStats mibstats;                             
};

#define mnscGlbCtx   ((mnscctx *) mtcctxGet(MNSCCTX, (ub4) 0))


boolean mnscMain(dvoid *osdCtx, const char *nm, sword argc, char **argv);


void mnssRegister(mnrsc *call, mnbv *inargs, ub4 incnt);
void mnssGetNext(mnrsc *call, mnbv *inargs, ub4 incnt);
void mnssUnregister(mnrsc *call, mnbv *inargs, ub4 incnt);
void mnssPause(mnrsc *call, mnbv *inargs, ub4 incnt);
void mnssStop(mnrsc *call, mnbv *inargs, ub4 incnt);
void mnssQuery(mnrsc *call, mnbv *inargs, ub4 incnt);
void mnssShutdown(mnrsc *call, mnbv *inargs, ub4 incnt);
void mnssReturnComp(dvoid *usrp, sb4 sts);


sb4  mnscRegister(mna *from, char *name, CONST mnrid *progid);
sb4  mnscGetNext(mna *from);
sb4  mnscUnregister(mna *from);
sb4  mnscPause(mna *addr, boolean pause);
sb4  mnscStop(mna *addr);
sb4  mnscQuery(mnxStream *stream, ub4 *clock);
void mnscShutdown(void);


void mnsRecv(mnsqent *scq, sb4 sts, mnsem **semp);
sb4  mnsNewQueue(CONST char *name, CONST mnrid *progid, mnsqent **newqueue);

#endif 
