/* mx/src/mn/mzni.h */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef MZNI_ORACLE
#define MZNI_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef MN_ORACLE
#include <mn.h>
#endif
#ifndef MNX_ORACLE
#include <mnx.h>
#endif
#ifndef MZN_ORACLE
#include <mzn.h>
#endif
#ifndef MNRS_ORACLE
#include <mnrs.h>
#endif
#ifndef MZMGU_ORACLE
#include <mzmgu.h>
#endif
#ifndef MZMGS_ORACLE
#include <mzmgs.h>
#endif

#ifndef YS_ORACLE
#include <ys.h>
#endif


typedef struct mznctx mznctx;                         
typedef struct mznbkt mznbkt;                           

#define MZNROWS  1021                       


struct mznbkt
{
  mznbkt *next;                                   
  mznbkt *older;                                   
  mznent *entry;                                         
  char   *alias;                                             
  mznctx *nsctx;                 
};


struct mznctx
{
  mzmguSStats stats;                                     
  mznbkt *names[MZNROWS];                     
};


boolean mznMain(dvoid *osdCtx, const char *nm, sword argc, char **argv);
void mznRequestHandler(dvoid *nsctxp, sb4 sts);
void mznDeathHandler(dvoid *usrp, sb4 val);


void mznssInsert(mnrsc *call, mnbv *inargs, ub4 incnt);
void mznssFind(mnrsc *call, mnbv *inargs, ub4 incnt);
void mznssDelete(mnrsc *call, mnbv *inargs, ub4 incnt);
void mznssQuery(mnrsc *call, mnbv *inargs, ub4 incnt);
void mznssTerm(mnrsc *call, mnbv *inargs, ub4 incnt);
void mznssMakeAlias(mnrsc *call, mnbv *inargs, ub4 incnt);


sb4 mznsInsert(mznctx *nsctx, mznent *entry);
mznent *mznsFind(mznctx *nsctx, const char *name, const mnrid *id);
sb4 mznsDelete(mznctx *nsctx, const char *name, const mnrid *id);
sb4 mznsQuery(mznctx *nsctx, const char *name, ub4 qt, mnxStream *stream);
sb4 mznsMakeAlias(mznctx *nsctx, const char *name, const char *alias);


ub4 mznsKey(ub1 *buf, size_t sz);
sb4 mznsStrcmp(const char *s1, const char *s2);
boolean mznsNameEq(const char *str, const char *regexp);

#endif 
