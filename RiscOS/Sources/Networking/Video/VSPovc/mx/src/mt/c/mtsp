/* mx/src/mt/mtsp.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/







#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

#ifndef MTSP_ORACLE
#include <mtsp.h>
#endif







mtspTree *mtspNewTree( mtspTree *t, mtspCmpFunc *cmp )
{
  t->cmp_mtspTree = cmp;
  t->root_mtspTree = (mtspNode *)NULL;
  return( t );
}

mtspNode *mtspLookup( dvoid *key, mtspTree *t )
{
  mtspNode *n;
  sb4 cmpval = 0;		
  mtspCmpFunc *cmp;

  
  cmp = t->cmp_mtspTree;
  n = t->root_mtspTree;
  while( n && (cmpval = (*cmp)( key, n->key_mtspNode ) ) )
    n = ( cmpval < 0 ) ? n->left_mtspNode : n->right_mtspNode;

  
  if( n )
    mtspSplay( n, t );

  return( n );
}



mtspNode *mtspPELookup( dvoid *key, mtspTree *t )
{
  mtspNode	*p = 0;		
  mtspNode	*n;		
  sb4		cmpval = 0;
  mtspCmpFunc	*cmp;

  
  n = t->root_mtspTree;
  cmp = t->cmp_mtspTree;

  while( n && (cmpval = (*cmp)( key, n->key_mtspNode ) ) )
  {
    p = n;
    n = ( cmpval < 0 ) ? n->left_mtspNode : n->right_mtspNode;
  }

  if( n && !cmpval )
    p = n;
  else if( !n )
    n = cmpval > 0 ? p : p ? mtspFPrev(p) : p;
  
  if( n )
    mtspSplay( n, t );

  return( n );
}


mtspNode *mtspNextLookup( dvoid *key, mtspTree *t )
{
  mtspNode *n;
  
  if( n = mtspPELookup( key, t ) )
    n = mtspFNext( n );
  else				
    n = mtspFHead( t );

  return( n );
}


mtspNode *mtspEnq( mtspNode *n, mtspTree *t )
{
  mtspNode *left;		
  mtspNode *right;		
  mtspNode *next;		
  mtspNode *temp;

  dvoid *key;
  mtspCmpFunc *cmp;

  cmp = t->cmp_mtspTree;
  n->up_mtspNode = (mtspNode *)NULL;
  next = t->root_mtspTree;
  t->root_mtspTree = n;
  if( !next )			
  {
    n->left_mtspNode = (mtspNode *)NULL;
    n->right_mtspNode = (mtspNode *)NULL;
  }
  else				
  {
    key = n->key_mtspNode;
    left = n;
    right = n;

    

    if ( (*cmp)( next->key_mtspNode, key ) > 0 )
      goto two;

  one:				

    do				
    {
      temp = next->right_mtspNode;
      if( !temp )
      {
	left->right_mtspNode = next;
	next->up_mtspNode = left;
	right->left_mtspNode = (mtspNode *)NULL;
	goto done;		
      }

      if( (*cmp)( temp->key_mtspNode, key ) > 0 )
      {
	left->right_mtspNode = next;
	next->up_mtspNode = left;
	left = next;
	next = temp;
	goto two;		
      }

      next->right_mtspNode = temp->left_mtspNode;
      if( temp->left_mtspNode )
	temp->left_mtspNode->up_mtspNode = next;
      left->right_mtspNode = temp;
      temp->up_mtspNode = left;
      temp->left_mtspNode = next;
      next->up_mtspNode = temp;
      left = temp;
      next = temp->right_mtspNode;
      if( !next )
      {
	right->left_mtspNode = (mtspNode *)NULL;
	goto done;		
      }

    } while( (*cmp)( next->key_mtspNode, key ) <= 0 ); 

  two:				

    do				
    {
      temp = next->left_mtspNode;
      if( !temp )
      {
	right->left_mtspNode = next;
	next->up_mtspNode = right;
	left->right_mtspNode = (mtspNode *)NULL;
	goto done;		
      }

      if( (*cmp)( temp->key_mtspNode, key ) <= 0 )
      {
	right->left_mtspNode = next;
	next->up_mtspNode = right;
	right = next;
	next = temp;
	goto one;		
      }
      next->left_mtspNode = temp->right_mtspNode;
      if( temp->right_mtspNode )
	temp->right_mtspNode->up_mtspNode = next;
      right->left_mtspNode = temp;
      temp->up_mtspNode = right;
      temp->right_mtspNode = next;
      next->up_mtspNode = temp;
      right = temp;
      next = temp->left_mtspNode;
      if( !next )
      {
	left->right_mtspNode = (mtspNode *)NULL;
	goto done;		
      }

    } while( (*cmp)( next->key_mtspNode, key ) > 0 ); 

    goto one;

  done:		

    temp = n->left_mtspNode;
    n->left_mtspNode = n->right_mtspNode;
    n->right_mtspNode = temp;
  }
  return( n );
}

void mtspSplay( mtspNode *n, mtspTree *t )
{
  mtspNode *up;		
  mtspNode *prev;		
  mtspNode *upup;		
  mtspNode *upupup;		
  mtspNode *left;		
  mtspNode *right;		

  left = n->left_mtspNode;
  right = n->right_mtspNode;
  prev = n;
  up = prev->up_mtspNode;

  while( up )
  {
    

    upup = up->up_mtspNode;
    if( up->left_mtspNode == prev ) 
    {
      if( upup && upup->left_mtspNode == up )
      {
	upupup = upup->up_mtspNode;
	upup->left_mtspNode = up->right_mtspNode;
	if( upup->left_mtspNode )
	  upup->left_mtspNode->up_mtspNode = upup;
	up->right_mtspNode = upup;
	upup->up_mtspNode = up;
	if( !upupup )
	  t->root_mtspTree = up;
	else if( upupup->left_mtspNode == upup )
	  upupup->left_mtspNode = up;
	else
	  upupup->right_mtspNode = up;
	up->up_mtspNode = upupup;
	upup = upupup;
      }
      up->left_mtspNode = right;
      if( right )
	right->up_mtspNode = up;
      right = up;

    }
    else			
    {
      if( upup && upup->right_mtspNode == up )
      {
	upupup = upup->up_mtspNode;
	upup->right_mtspNode = up->left_mtspNode;
	if( upup->right_mtspNode )
	  upup->right_mtspNode->up_mtspNode = upup;
	up->left_mtspNode = upup;
	upup->up_mtspNode = up;
	if( !upupup )
	  t->root_mtspTree = up;
	else if( upupup->right_mtspNode == upup )
	  upupup->right_mtspNode = up;
	else
	  upupup->left_mtspNode = up;
	up->up_mtspNode = upupup;
	upup = upupup;
      }
      up->right_mtspNode = left;
      if( left )
	left->up_mtspNode = up;
      left = up;
    }
    prev = up;
    up = upup;
  }

  

  n->left_mtspNode = left;
  n->right_mtspNode = right;
  if( left )
    left->up_mtspNode = n;
  if( right )
    right->up_mtspNode = n;
  t->root_mtspTree = n;
  n->up_mtspNode = (mtspNode*)NULL;

}

void mtspRemove( mtspNode *n, mtspTree *t )
{
  mtspNode *x;

  mtspSplay( n, t );
  x = mtspDeq( &t->root_mtspTree->right_mtspNode );
  if( !x )			
  {
    t->root_mtspTree = t->root_mtspTree->left_mtspNode;
    if (t->root_mtspTree)
      t->root_mtspTree->up_mtspNode = (mtspNode*)NULL;
  }
  else				
  {
    x->up_mtspNode = (mtspNode*)NULL;
    x->left_mtspNode = t->root_mtspTree->left_mtspNode;
    x->right_mtspNode = t->root_mtspTree->right_mtspNode;
    if( x->left_mtspNode )
      x->left_mtspNode->up_mtspNode = x;
    if( x->right_mtspNode )
      x->right_mtspNode->up_mtspNode = x;
    t->root_mtspTree = x;
  }
}


mtspNode *mtspDeq( mtspNode **np )
{
  mtspNode *deq;		
  mtspNode *next;       	
  mtspNode *left;      	
  mtspNode *farleft;		
  mtspNode *farfarleft;	

  if( !np || !*np )
  {
    deq = (mtspNode*)NULL;
  }
  else
  {
    next = *np;
    left = next->left_mtspNode;
    if( !left )
    {
      deq = next;
      *np = next->right_mtspNode;

      if( *np )
	(*np)->up_mtspNode = (mtspNode*)NULL;

    }
    else for(;;)		
    {
      
      farleft = left->left_mtspNode;
      if( !farleft )
      {
	deq = left;
	next->left_mtspNode = left->right_mtspNode;
	if( left->right_mtspNode )
	  left->right_mtspNode->up_mtspNode = next;
	break;
      }

      
      farfarleft = farleft->left_mtspNode;
      if( !farfarleft )
      {
	deq = farleft;
	left->left_mtspNode = farleft->right_mtspNode;
	if( farleft->right_mtspNode )
	  farleft->right_mtspNode->up_mtspNode = left;
	break;
      }

      
      next->left_mtspNode = farleft;
      farleft->up_mtspNode = next;
      left->left_mtspNode = farleft->right_mtspNode;
      if( farleft->right_mtspNode )
	farleft->right_mtspNode->up_mtspNode = left;
      farleft->right_mtspNode = left;
      left->up_mtspNode = farleft;
      next = farleft;
      left = farfarleft;
    }
  }
  return( deq );
}

mtspNode *mtspFHead( mtspTree *t )
{
  mtspNode *x;

  if( ( x = t->root_mtspTree ) )
    while( x->left_mtspNode )
      x = x->left_mtspNode;

  return( x );
}

mtspNode *mtspFTail( mtspTree *t )
{
  mtspNode *x;

  if( ( x = t->root_mtspTree ) )
    while( x->right_mtspNode )
      x = x->right_mtspNode;

  return( x );
}



mtspNode *mtspFNext( mtspNode *n )
{
  mtspNode *next;
  mtspNode *x;

  

  if( !n )
    return( n );

  x = n->right_mtspNode;
  if( x )
  {
    while( x->left_mtspNode )
      x = x->left_mtspNode;
    next = x;
  }
  else				
  {
    x = n->up_mtspNode;
    next = (mtspNode*)NULL;
    while( x )
    {
      if( x->left_mtspNode == n )
      {
	next = x;
	x = (mtspNode*)NULL;
      }
      else
      {
	n = x;
	x = n->up_mtspNode;
      }
    }
  }
  return( next );
}


mtspNode *mtspFPrev( mtspNode *n )
{
  mtspNode *prev;
  mtspNode *x;

  if( !n )
    return( n );

  x = n->left_mtspNode;
  if( x )
  {
    while( x->right_mtspNode )
      x = x->right_mtspNode;
    prev = x;
  }
  else
  {
    x = n->up_mtspNode;
    prev = (mtspNode *)NULL;
    while( x )
    {
      if( x->right_mtspNode == n )
      {
	prev = x;
	x = (mtspNode *)NULL;
      }
      else
      {
	n = x;
	x = n->up_mtspNode;
      }
    }
  }
  return( prev );
}
