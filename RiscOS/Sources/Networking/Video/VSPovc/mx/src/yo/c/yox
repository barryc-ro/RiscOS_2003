/* yo/yox.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/








#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
#ifndef YOI_ORACLE
#include <yoi.h>
#endif
#ifndef YOSX_ORACLE
#include <yosx.h>
#endif

static ysidDecl(YOX_EX_STD) = "yo::std";

STATICF void yoxArgAlloc(yotkKind kind, CONST yopar *p, dvoid **arg,
                         size_t *argsz);
STATICF dvoid *yoxAllocCli(size_t size);

void yoxPutPing(yosx *x, ub4 reqid)
{
  yosxCopy(x,(ub1 *)"YOHB",4);
  yosxPutUB1(x, YO_BYTESEX);                                
  yosxPutUB4(x,reqid);
}

ub4 yoxGetPing(yosx *x)
{
  char magic[5];

  yosxCopy(x,(ub1 *)magic,4);
  magic[4] = '\0';

  if(strcmp(magic,"YOHB") != 0)
  {
    
    yseThrow(YS_EX_BADMAGIC);
  }
  yosxDecSet(x,yosxGetUB1(x));                             
  return yosxGetUB4(x);
}

yslst *yoxPutReqParms(yosx *x, ub4 reftag, sword args, CONST yopar *pars,
                      dvoid **values)
{
  sb4     mode;
  CONST yopar *par;
  dvoid  *ptr;
  dvoid  **v;
  yslst  *outs;

  outs = ysLstCreate();
  
  v = values;
  yseTry
  {
    for(par = pars; (mode = par->mode) != YOMODE_INVALID; par++)
    {
      if(mode == YOMODE_IN || mode == YOMODE_OUT || mode == YOMODE_INOUT)
      {
        if(args < 1)                                         
          ysePanic(YO_EX_INTERNAL);

        ptr = *v++;
        args--;
        if(mode != YOMODE_IN) DISCARD ysLstEnq(outs,ptr);
        if(mode == YOMODE_IN || mode == YOMODE_INOUT)
        {
          if(!ptr)
            ysePanic(YO_EX_INTERNAL);
          yotkEncode(par->tk,ptr,x,reftag);
          if(mode == YOMODE_INOUT)   
            yotkFreeVal(par->tk,ptr,yoFree);
        }
      }
    }
  }
  yseCatchAll
  {     
    ysLstDestroy(outs,(ysmff)0);
    yseRethrow;
  }
  yseEnd;
  if(args)                                                   
    ysePanic(YO_EX_INTERNAL);
  return outs;
}

dvoid **yoxGetReqParms(yosx *x, CONST yopar *pars, yslst *orlst)
{
  CONST yopar *p;
  sword    argcnt;
  sb4      mode;
  dvoid  **args;
  dvoid  **a;
  dvoid   *arg;
  size_t   argsz;
  yotk    *tk;
  yotkKind kind;

  for(argcnt = 0, p = pars; (mode=p->mode) != YOMODE_INVALID; p++)
    if(mode == YOMODE_RETURN || mode == YOMODE_IN ||
       mode == YOMODE_OUT || mode == YOMODE_INOUT) argcnt++;

  if(!argcnt)
  {
    args = (dvoid **) 0;
    return args;
  }

  
  args = a = (dvoid **) ysmGlbAlloc(sizeof(dvoid *) * argcnt, "reqparms");

  for(p = pars; (mode = p->mode) != YOMODE_INVALID; p++)
    if(mode == YOMODE_RETURN || mode == YOMODE_IN ||
       mode == YOMODE_OUT || mode == YOMODE_INOUT)
    {

      tk = (yotk *)p->tk;
      
      while((kind = yotkGetKind(tk)) == yotkAlias)
        tk = (yotk *)yotkContentType(tk);

      arg = (dvoid *) 0;
      if(mode != YOMODE_RETURN || kind != yotkArray)
        yoxArgAlloc(kind,p,&arg,&argsz);
      if(mode == YOMODE_IN || mode == YOMODE_INOUT)
        yotkDecodeRL(p->tk,arg,x,yoAlloc,
                     (mode == YOMODE_IN)?orlst:(yslst *)0);
      *a++ = arg;
    }

  return args;
}


void yoxFreeReqParms(CONST yopar *pars, dvoid **args)
{
  CONST yopar *p;
  sb4      mode;
  dvoid  **a;
  yotk    *tk;
  yotkKind kind;


  if(!args) return;                                         

  a = args;
  for(p = pars; (mode = p->mode) != YOMODE_INVALID; p++, a++)
    if(mode == YOMODE_IN || mode == YOMODE_OUT || mode == YOMODE_INOUT)
      ysmGlbFree(*a);
    else if(mode == YOMODE_RETURN)
    {
      tk = (yotk *)p->tk;
      
      while((kind = yotkGetKind(tk)) == yotkAlias)
        tk = (yotk *)yotkContentType(tk);
      if(kind != yotkArray) ysmGlbFree(*a);
    }
  ysmGlbFree((dvoid *)args);
}

void yoxPutRepParms(yosx *x, ub4 reftag, CONST yopar *pars, dvoid **args)
{
  CONST yopar *p;
  sb4   mode;
  dvoid **arg;

  for(arg = args, p = pars; (mode = p->mode) != YOMODE_INVALID; p++)
  {
    if(mode == YOMODE_RETURN || mode == YOMODE_OUT || mode == YOMODE_INOUT)
      yotkEncodeRR(p->tk,*arg++,x,reftag,TRUE);
    else if(mode == YOMODE_IN) arg++;
  }
}

void yoxGetRepParms(yosx *x, CONST yopar *pars, yslst *outs, dvoid **arg,
                    size_t *argsz)
{
  CONST yopar *par;
  sb4 mode;
  dvoid *val;
  yotk  *tk;
  yotkKind kind = yotkNull;

  
  for(par = pars; (mode = par->mode) != YOMODE_INVALID; par++)
  {
    switch(mode)
    {
    case YOMODE_RETURN:
      tk = (yotk *)par->tk;
      
      while((kind = yotkGetKind(tk)) == yotkAlias)
        tk = (yotk *)yotkContentType(tk);
      yoxArgAlloc(kind,par,arg,argsz);
      val = *arg;
      break;
    case YOMODE_OUT:
    case YOMODE_INOUT:
      val = ysLstDeq(outs);
      break;
    default:
      continue;
    }
    yotkDecode(par->tk,val,x,yoxAllocCli);
    if(mode == YOMODE_RETURN && kind == yotkArray)
    {
      *arg = ysmGlbAlloc(sizeof(dvoid *),"arrayptr");
      *(dvoid **)(*arg) = val;
      *argsz = sizeof(dvoid *);
    }
  }
}


void yoxPutUserEx(yosx *x, ub4 reftag, CONST ysid *exid, CONST yotk *extk,
                  dvoid *arg)
{
  size_t len;
  CONST ysid *tmpid;
  CONST yotk *tk;
  size_t argsz = 0;

  if(!extk)                                        
  {
    tmpid = exid;
    if(arg)
      exid = (ysid *)YO_EX_UNEXPECTED;
    else
      exid = (ysid *)YOX_EX_STD;
    tk = (yotk *)0;
    arg = (dvoid *) tmpid;
    argsz = strlen(ysidToStr(tmpid)) + 1;
  }
  else
    tk = extk;

  len = strlen(ysidToStr(exid))+1;
  yosxPutUB4(x,(ub4)len);
  if(len)
    yosxCopy(x,(ub1 *)exid,len);                             
 
  if(tk)
    yotkEncodeRR(tk,arg,x,reftag,TRUE);                      
  else
  {                                     
    yosxPutUB4(x,(ub4)argsz);
    yosxCopy(x,(ub1 *)arg,argsz);
  }
}


void yoxPutSysEx(yosx *x, CONST ysid *exid, yoreqsts exsts, ub4 minor)
{
  size_t len;

  if(!exid || (exid[0] == '\0'))
    ysePanic(YO_EX_INTERNAL);
  len = strlen(ysidToStr(exid))+1;
  yosxPutUB4(x,(ub4)len);                                    
  yosxCopy(x,(ub1 *)exid,len);                               
  yosxPutUB4(x, (ub4)minor);                                        
  yosxPutUB4(x, (ub4)exsts);                            
}



CONST ysid *yoxGetSysEx(yosx *x, dvoid **arg, size_t *argsz)
{
  size_t len;
  char *idstr = (char*)0;
  CONST char *newid = (char *)0;
  yosysex *body;
  ub4 minor;

  len = (size_t) yosxGetUB4(x);                       
  if(len)
  {
    idstr = (char *) ysmGlbAlloc(len,"exid");
    yosxCopy(x,(ub1 *)idstr,len);
  }
  else
    ysePanic(YO_EX_INTERNAL);

  minor = yosxGetUB4(x);
  if(yoExMNSys(idstr, minor, &newid))                     
  {
    body = (yosysex *) ysmGlbAlloc(sizeof(yosysex), "yosysex");
    body->minor = minor;
    body->completed = (yoreqsts) yosxGetUB4(x);
    *arg = (dvoid *) body;
    *argsz = sizeof(yosysex);
  }
  ysmGlbFree((dvoid *)idstr);
  return newid;
}

CONST ysid *yoxGetUserEx(yosx *x, CONST yopar *pars, dvoid **arg, 
                         size_t *argsz)
{
  yoctx *ctx;
  char *idstr = (char*)0;
  CONST char *exid;
  size_t len;
  CONST yopar *par;
  ysid  *tkid;
  yotkKind kind;

  ctx = yoCtx;

  len = (size_t) yosxGetUB4(x);                              
  if(len)
  {
    idstr = (char *) ysmGlbAlloc(len,"exid");
    yosxCopy(x,(ub1 *)idstr,len);
  }
  else
    ysePanic(YO_EX_INTERNAL);

  if(ysidEq(idstr,YO_EX_UNEXPECTED))
  {
    ysmGlbFree((dvoid *)idstr);
    exid = (char *)ysidToStr(YO_EX_UNEXPECTED);
    len = (size_t) yosxGetUB4(x);
    if(len)
    {
      *arg = ysmGlbAlloc(len,"exid");
      yosxCopy(x,(ub1 *)*arg,len);
      *argsz = len;
    }
    else
      ysePanic(YO_EX_INTERNAL);
  }
  else if(ysidEq(idstr,YOX_EX_STD))
  {
    ysmGlbFree((dvoid *)idstr);

    len = (size_t) yosxGetUB4(x);
    if(len)
    {
      idstr = (char *)ysmGlbAlloc(len,"exid");
      yosxCopy(x,(ub1 *)idstr,len);
    }
    else
      ysePanic(YO_EX_INTERNAL);

    exid = yoGetStr(ctx,idstr);
    ysmGlbFree((dvoid *)idstr);
  }       
  else
  {
    for(par = pars; par->mode != YOMODE_INVALID; par++)
      if(par->mode == YOMODE_EXCEPT)
      {
        tkid = (ysid *)yotkGetId(par->tk);
        if(tkid && ysidEq(tkid,idstr))
          break;
      }
    if(par->mode == YOMODE_EXCEPT)
    {
      exid = yoGetStr(ctx,idstr);
      ysmGlbFree((dvoid *)idstr);

      kind = yotkGetBaseKind((yotk *)par->tk);            
      yoxArgAlloc(kind,par,arg,argsz);
      
      yotkDecode(par->tk,*arg,x,yoxAllocCli);
    }
    else
    {
      *arg = (dvoid *)idstr;
      *argsz = strlen(idstr) + 1;
      exid = (char *)ysidToStr(YO_EX_UNEXPECTED);
    }
  }

  return (ysid *)exid;
}

STATICF void yoxArgAlloc(yotkKind kind, CONST yopar *p, dvoid **arg,
                         size_t *argsz)
{
  
  switch(kind)
  {
  case yotkShort:
    *argsz = sizeof(sb2);
    break;
  case yotkLong:
    *argsz = sizeof(sb4);
    break;
  case yotkUshort:
    *argsz = sizeof(ub2);
    break;
  case yotkEnum:
  case yotkUlong:
    *argsz = sizeof(ub4);
    break;
  case yotkFloat:
  case yotkDouble:
    
    break;
  case yotkBoolean:
    *argsz = sizeof(boolean);
    break;
  case yotkChar:
    *argsz = sizeof(char);
    break;
  case yotkOctet:
    *argsz = sizeof(ub1);
    break;
  case yotkAny:
    *argsz = sizeof(yoany);
    break;
  case yotkTypeCode:
    *argsz = sizeof(yotk *);
    break;
  case yotkSequence:
  case yotkPrincipal:
    *argsz = sizeof(YCIDL_sequence_ub1);
    break;
  case yotkObjref:
    *argsz = sizeof(dvoid *);
    break;
  case yotkArray:
  case yotkStruct:
  case yotkUnion:
  case yotkExcept:
    *argsz = (size_t) p->sz;
    break;
  case yotkString:
    *argsz = sizeof(char *);
    break;
  case yotkLongLong:
    *argsz = sizeof(sysb8);
    break;
  case yotkAlias:
  case yotkRecurs:
  default:
    ysePanic(YO_EX_INTERNAL);
    break;
  }

  
  
  *arg = ysmGlbAlloc(*argsz,yoTagYoAlloc);

  DISCARD memset(*arg,0x00,*argsz);                 
}

STATICF dvoid *yoxAllocCli(size_t size)
{
  return ysmGlbAlloc(size,yoTagYoAlloc);
}
