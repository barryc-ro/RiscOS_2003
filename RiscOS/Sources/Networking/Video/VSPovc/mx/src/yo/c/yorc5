/* yo/yorc5.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/










#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YOCY_ORACLE
#include <yocy.h>
#endif
#ifndef YORC5_ORACLE
#include <yorc5.h>
#endif

#ifndef AGLOBAL_ORACLE
#include <aglobal.h>
#endif
#ifndef BSAFE_ORACLE
#include <bsafe.h>
#endif



struct yorc5cx
{
  ub1		    *ukey_yorc5cx;                           
  size_t	    ukeysz_yorc5cx;                              
  sysb8		    iv_yorc5cx;              
  B_KEY_OBJ	    lkey_yorc5cx;

} ;

static B_ALGORITHM_METHOD *yorc5Chooser[] =
{
  &AM_RC5_CBC_ENCRYPT,
  &AM_RC5_CBC_DECRYPT,
  (B_ALGORITHM_METHOD*)T_malloc,         
  (B_ALGORITHM_METHOD*)0
};




STATICF void yorc5Work( yorc5cx *cx, ub4 ib1, ub4 iv2, boolean encrypt,
		       ysbv *ibv, sword nibvs,
		       ysbv *obv, ysmhp *hp );





yorc5cx *yorc5Init( ub1 *key, sword keybytes )
{
  yorc5cx *cx;
  ITEM ikey;
  noreg boolean err;
  int berr;

  NOREG(err);
  err = FALSE;

  yseTry
  {
    cx = (yorc5cx*)ysmGlbAlloc(sizeof(*cx), "yorc5cx" );

#ifdef YORC5_40BIT
  if ( keybytes > 5 )
    keybytes = 5;
#endif

    cx->lkey_yorc5cx = (B_KEY_OBJ)0;
    cx->ukey_yorc5cx = (ub1*)ysmGlbAlloc(keybytes, "yorc5 key");
    cx->ukeysz_yorc5cx = keybytes;
    DISCARD memcpy( cx->ukey_yorc5cx, key, keybytes );

    ysClock( &cx->iv_yorc5cx );

    if( (berr = B_CreateKeyObject( &cx->lkey_yorc5cx ) ) )
      yseThrow( YO_EX_CRYPTO_ERR );

    ikey.len = cx->ukeysz_yorc5cx;
    ikey.data = cx->ukey_yorc5cx;

    if( (berr = B_SetKeyInfo( cx->lkey_yorc5cx, KI_Item, (POINTER)&ikey ) ) )
      yseThrow( YO_EX_CRYPTO_ERR );
  }
  yseCatch( YO_EX_CRYPTO_ERR )
  {
    yorc5Term( cx );
    err = TRUE;
  }
  yseEnd;

  return err ? (yorc5cx*)0 : cx;
}

void yorc5Term( yorc5cx *cx )
{
  if( cx )
  {
    ysmGlbFree((dvoid*)cx->ukey_yorc5cx);
    B_DestroyKeyObject( &cx->lkey_yorc5cx );
    ysmGlbFree( (dvoid*)cx );
  }
}

void yorc5Encrypt(yorc5cx *cx, ub4 *iv1, ub4 *iv2,
		  ysbv *ibv, sword nibvs,
		  ysbv *obv, ysmhp *hp )
{
  ub4 *iv;

  

  DISCARD ysRand( &cx->iv_yorc5cx );
  iv = (ub4*)&cx->iv_yorc5cx;                                    
  *iv1 = iv[0];
  *iv2 = iv[1];
  
  yorc5Work( cx, iv[0], iv[1], TRUE, ibv, nibvs, obv, hp );
}


void yorc5Decrypt( yorc5cx *cx, ub4 iv1, ub4 iv2,
		  ysbv *ibv, sword nibvs,
		  ysbv *obv, ysmhp *hp )
{
  yorc5Work( cx, iv1, iv2, FALSE, ibv, nibvs, obv, hp );
}






STATICF void yorc5Work( yorc5cx *cx, ub4 iv1, ub4 iv2, boolean encrypt,
		       ysbv *ibv, sword nibvs,
		       ysbv *obv, ysmhp *hp )
{
  B_ALGORITHM_OBJ cipher = (B_ALGORITHM_OBJ)0;
  A_RC5_CBC_PARAMS parms;
  sword i;
  size_t oleft;
  unsigned int oactual;
  int berr;                                            
  ub4 iv[2];
  ub4 ilen;
  ub4 padlen;
  ub1 padbuf[8];

  if( !nibvs )
    return;

  for( i = 0 ; i < nibvs ; i++ )
  {
    
   if( i != (nibvs - 1) && (ibv[i].len % 8) )
       yseThrow(YS_EX_BADPARAM);
    obv[i].len = 0;
  }

  yseTry
  {
    if( (berr = B_CreateAlgorithmObject( &cipher ) ) )
      yseThrow( YO_EX_CRYPTO_ERR );

    parms.version = 0x10;
    parms.rounds = 12;
    parms.wordSizeInBits = 32;
    iv[0] = iv1;
    iv[1] = iv2;
    parms.iv = (unsigned char *)&iv;
    if((berr = B_SetAlgorithmInfo( cipher, AI_RC5_CBC, (POINTER)&parms)))
      yseThrow( YO_EX_CRYPTO_ERR );

    if( encrypt )
      berr = B_EncryptInit( cipher, cx->lkey_yorc5cx, yorc5Chooser,
			   (A_SURRENDER_CTX*)0 );
    else
      berr = B_DecryptInit( cipher, cx->lkey_yorc5cx, yorc5Chooser,
				(A_SURRENDER_CTX*)0 );
    if( berr )
      	yseThrow( YO_EX_CRYPTO_ERR );

    
    
    oactual = ilen = 0;
    for( i = 0 ; i < nibvs ; i++ )
    {
      ilen += ibv[i].len;
      oleft = obv[i].len = (ibv[i].len + 8);
      obv[i].buf = (ub1*)ysmAlloc( hp, obv[i].len, "yorc5 buf");

      if( encrypt )
	berr = B_EncryptUpdate( cipher, obv[i].buf, &oactual, oleft,
			       ibv[i].buf, ibv[i].len,
			       (B_ALGORITHM_OBJ)0, (A_SURRENDER_CTX*)0 );
      else
	berr = B_DecryptUpdate( cipher, obv[i].buf, &oactual, oleft,
			       ibv[i].buf, ibv[i].len,
			       (B_ALGORITHM_OBJ)0, (A_SURRENDER_CTX*)0 );
      if( berr )
	yseThrow( YO_EX_CRYPTO_ERR );

      oleft -= oactual;
      obv[i].len = oactual;
    }
    
    i--;			
    
    if( encrypt )
    {
      
      padlen = 8 - (ilen % 8);
      DISCARD memset( padbuf, padlen, padlen );
      if( (berr = B_EncryptUpdate( cipher, obv[i].buf + obv[i].len,
				  &oactual, oleft,
				  padbuf, padlen,
				  (B_ALGORITHM_OBJ)0,
				  (A_SURRENDER_CTX*)0 ) ) )
	yseThrow( YO_EX_CRYPTO_ERR );

      oleft -= oactual;
      obv[i].len += oactual;

      
      if((berr = B_EncryptFinal( cipher, obv[i].buf + obv[i].len,
				&oactual, oleft,
				(B_ALGORITHM_OBJ)0,
				(A_SURRENDER_CTX*)0 )))
	yseThrow( YO_EX_CRYPTO_ERR );

      obv[i].len += oactual;
    }
    else			
    {
      if( (berr = B_DecryptFinal( cipher,
				 obv[i].buf + obv[i].len, &oactual, oleft,
				 (B_ALGORITHM_OBJ)0,
				 (A_SURRENDER_CTX*)0 ) ) )
	yseThrow( YO_EX_CRYPTO_ERR );

      
      obv[i].len += oactual;
      padlen = obv[i].buf[ obv[i].len - 1 ];
      obv[i].len -= padlen;
    }
  }
  yseFinally
  {
    B_DestroyAlgorithmObject( &cipher );
  }
  yseEnd;
}

