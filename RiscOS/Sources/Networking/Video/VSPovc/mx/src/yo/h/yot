/* yo/yot.h */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/










#ifndef YOT_ORACLE
#define YOT_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

EXTC_START

#ifndef YS_ORACLE
#include <ys.h>
#endif

#ifndef YOSX_ORACLE
#include <yosx.h>
#endif

#ifndef MN_ORACLE
#include <mn.h>
#endif

#ifndef MNT_ORACLE
#include <mnt.h>
#endif

#ifndef YTEX_ORACLE
#include <ytex.h>
#endif



typedef struct mnp yotp;
typedef struct mna yota;


void yotInit(void);


void yotTerm(void);


#define YOTPROTO_MESSAGE	    MNPROTO_MESSAGE
#define YOTPROTO_STREAM	    MNPROTO_STREAM
#define YOTPROTO_DGRAM	    MNPROTO_MESSAGE

yotp *yotOpen(sword protocol);


void yotClose(yotp *port);


void yotFlush(yotp *port, ysevt *evt);


#define YOTFLG_NONBLOCK	MNOPT_NONBLOCK	    
#define YOTFLG_MANFLUSH	((ub4)0)	    

void yotSetOptions(yotp *port, ub4 options);
ub4  yotGetOptions(yotp *port);


void yotBind(yotp *port, ub2 name);


yota *yotGetAddr(yotp *port);
yota *yotGetPeer(yotp *port);


void yotListen(yotp *port);


yotp *yotAccept(yotp *port);


void yotConnect(yotp *port, yota *addr);


sb4 yotRead(yotp *port, ub1 *buf, size_t max, boolean fill, ysevt *evt);
sb4 yotReadV(yotp *port, ysbv *bv, sword nbv, boolean fill, ysevt *evt);


sb4 yotWrite(yotp *port, ub1 *buf, size_t len);
sb4 yotWriteV(yotp *port, ysbv *bv, sword nbv);


sb4 yotSend(yotp *port, yota *to, ub1 *buf, size_t len, ysevt *evt);
sb4 yotSendV(yotp *port, yota *to, ysbv *bv, sword nbv, ysevt *evt);


sb4 yotRecv(yotp *port, yota **from, ub1 *buf, size_t max, ysevt *evt);
sb4 yotRecvV(yotp *port, yota **from, ysbv *bv, sword nbv, ysevt *evt);


sb4 yotTest(yotp *port, sysb8 *timeout, ysevt *evt);


sword yotAddrEq(yota *a1, yota *a2);


ub2 yotGetAddrPort(yota *addr);


void yotSetAddrPort(yota *addr, ub2 port);


#define YOTAMAXLEN       MNAMAXLEN
char *yotAddrToStr(yota *addr, char *str, size_t max);


yota *yotStrToAddr(CONST char *str);


yota *yotAddrDup(yota *addr);


void yotAddrFree(yota *addr);


ub4 yotHashAddr(yota *addr);


ysid *yotMnStsToExid(sb4 val);


void yotxPutAddr(yosx *x, yota *addr);


yota *yotxGetAddr(yosx *x);


struct yotx
{
  ub1   *ptr;
  size_t cnt;
  ysbv  *bv;
  sword  nbv;
};

EXTC_END
#endif

