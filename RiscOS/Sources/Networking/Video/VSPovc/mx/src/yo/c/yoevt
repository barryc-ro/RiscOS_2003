/* yo/yoevt.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/








#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
#ifndef YOTK_ORACLE
#include <yotk.h>
#endif
#ifndef YOI_ORACLE
#include <yoi.h>
#endif
#ifndef YOEVT_ORACLE
#include <yoevt.h>
#endif

typedef struct yormte yormte;
struct yormte
{
  ysevt *evt;                          
  yoevt  revt;                                        
  dvoid *cobj;                                     
  ysevt *devt;                                         
};

typedef struct yoschd yoschd;
struct yoschd
{
  yoenv   ev;                                                 
  yormte *rest;                                              
};

STATICF void yoevt_trigger_i(yoevt or, yoenv *ev, char *exid, yoany *arg);
STATICF void yoevt_setCancel_i(yoevt or, yoenv *ev, yoevtc obj);

#ifdef RISCOS
CONST_W_PTR struct yoevt__tyimpl yoevt__impl =
#else
static CONST_W_PTR struct yoevt__tyimpl yoevt__impl =
#endif
{
  yoevt_trigger_i,
  yoevt_setCancel_i,
};

STATICF void yoevtc_cancel_i(yoevtc or, yoenv *ev);

#ifdef RISCOS
CONST_W_PTR struct yoevtc__tyimpl yoevtc__impl =
#else
static CONST_W_PTR struct yoevtc__tyimpl yoevtc__impl =
#endif
{
  yoevtc_cancel_i
};


STATICF void yoRmtEvtCancel(dvoid *usrp, CONST ysid *exid, dvoid *arg,
                            size_t argsz);
STATICF void yoYsToYoH(dvoid *usrp, CONST ysid *exid, dvoid *arg,
                       size_t argsz);
STATICF void yoevtSCH(dvoid *usrp, CONST ysid *exid, dvoid *arg, size_t argsz);
STATICF void yoFreeEnvH(dvoid *usrp, CONST ysid *exid, dvoid *arg,
                        size_t argsz);
STATICF void yoFreeRest(yormte *rest);
STATICF void yoEvtDeath(dvoid *usrp, CONST ysid *exid, dvoid *arg,
                        size_t argsz);

void yoevtInit(yoctx *ctx)
{
  ysque *q = ctx->yortq;                                   
  CONST char *impstr;

  impstr = yoGetImplementation(ctx->yort);                

  yoSetImpl(yoevt__id, impstr, (yostub *)yoevt__stubs,
            (dvoid *)&yoevt__impl, (yoload) 0, FALSE, (dvoid *) 0);
  yoSetImpl(yoevtc__id, impstr, (yostub *)yoevtc__stubs,
            (dvoid *)&yoevtc__impl, (yoload) 0, FALSE, (dvoid *) 0);

  yoImplReady(yoevt__id, impstr, q);
  yoImplReady(yoevtc__id, impstr, q);

  bic(ctx->flags,YOCTXFL_SNDYORT);
}

void yoevtTerm(yoctx *ctx)
{
  CONST char *impstr;

  impstr = yoGetImplementation(ctx->yort);
  yoImplDeactivate(yoevt__id, impstr);
  yoImplDeactivate(yoevtc__id, impstr);
}

yoevt yoToRmtEvt(ysevt *evt)
{
  yormte *rest;
  yoevt revt;
  ysevt *cevt;

  rest = (yormte *) ysmGlbAlloc(sizeof(yormte),"yormte");
  rest->evt = evt;
  rest->cobj = (dvoid *) 0;
  rest->devt = (ysevt *) 0;

  revt = yoCreate(yoevt__id, yoGetImplementation(yoCtx->yort), (yoRefData *)0,
                  (char *)0,(dvoid *)rest);
  rest->revt = yoDuplicate(revt);

  cevt = ysEvtSimple(yoRmtEvtCancel,(dvoid *)revt);
  DISCARD ysEvtAttach(evt,cevt);

  return (yoevt) revt;
}

STATICF void yoevt_trigger_i(yoevt or, yoenv *ev, char *exid, yoany *arg)
{
  yormte *rest;
  yoany a;

  rest = (yormte *)yoGetState((dvoid *)or);
  yoDispose((dvoid *)or);                   

  
  if(exid)
    exid = yoGetStr(yoCtx,exid);
  if(arg->_type == yoTcNull)
    ysTrigger(rest->evt,exid,(dvoid *)0,(size_t)0);
  else
  {
    yotkCopyVal(yoTcAny, &a, arg, (ysmaf)0);
    ysTrigger(rest->evt,exid,&a,sizeof(a));
  }

  if(rest->cobj)
    yoRelease(rest->cobj);
  yoRelease(rest->revt);
  ysmGlbFree((dvoid *)rest);
}

STATICF void yoevt_setCancel_i(yoevt or, yoenv *ev, yoevtc obj)
{
  yormte *rest;

  rest = (yormte *)yoGetState((dvoid *)or);

  if(!rest->cobj)
    rest->cobj = yoDuplicate((dvoid *)obj);
}

STATICF void yoRmtEvtCancel(dvoid *usrp, CONST ysid *exid, dvoid *arg,
                            size_t argsz)
{
  yormte *rest;

  rest = (yormte *)yoGetState(usrp);

  yoDispose(usrp);

  if(rest->cobj)
  {
    yoenv *ev;
    ysevt *evt;

    ev = (yoenv *) ysmGlbAlloc(sizeof(yoenv),"yoenv");
    evt = ysEvtSimple(yoFreeEnvH,ev);
    yoEnvInit(ev);
    yoevtc_cancel_nw(rest->cobj,ev,evt);

    yoRelease(rest->cobj);
  }
  if(rest->revt)
    yoRelease(rest->revt);
  ysmGlbFree((dvoid *)rest);
}

ysevt *yoToLocalEvt(yoevt revt)
{
  yoctx  *ctx;
  ysevt  *evt;
  yormte *rest;
  yoschd *schd;
  ysevt  *sevt;

  ctx = yoCtx;

  rest = (yormte *) ysmGlbAlloc(sizeof(yormte),"yormte");
  evt = ysEvtCreate(yoYsToYoH,(dvoid *)rest,(ysque *)0,TRUE);
  rest->evt = evt;
  rest->revt = yoDuplicate((dvoid *)revt);
  rest->cobj = yoCreate(yoevtc__id, yoGetImplementation(ctx->yort),
                        (yoRefData *)0, (char *)0, (dvoid *)rest);
  rest->devt = ysEvtCreate(yoEvtDeath,(dvoid *)rest,(ysque *)0,TRUE);

  schd = (yoschd *) ysmGlbAlloc(sizeof(yoschd),"yoschd");
  sevt = ysEvtCreate(yoevtSCH,(dvoid *)schd,(ysque *)0,FALSE);
  yoEnvInit(&schd->ev);
  yoevt_setCancel_nw(revt,&schd->ev,rest->cobj,sevt);
  yoWatchOwner(revt,rest->devt);  

  return evt;
}

STATICF void yoYsToYoH(dvoid *usrp, CONST ysid *exid, dvoid *arg, size_t argsz)
{
  yormte *rest = (yormte *) usrp;
  yoenv *ev;
  ysevt *evt;
  yoany  a;

  ev = (yoenv *) ysmGlbAlloc(sizeof(yoenv),"yoenv");
  evt = ysEvtSimple(yoFreeEnvH,ev);
  yoEnvInit(ev);
  if(!arg)
  {
    a._type = (yotk *) yoTcNull;
    a._value = (dvoid *) 0;
    arg = (dvoid *) &a;
  }
  yoevt_trigger_nw(rest->revt,ev,(char *)exid,(yoany *)arg,evt);

  yoFreeRest(rest);
}

STATICF void yoEvtDeath(dvoid *usrp, CONST ysid *exid, dvoid *arg,
                        size_t argsz)
{
  yormte *rest = (yormte *) usrp;

  yoFreeRest(rest);
}

STATICF void yoevtSCH(dvoid *usrp, CONST ysid *exid, dvoid *arg, size_t argsz)
{
  yoschd *schd = (dvoid *) usrp;

  if(exid)
    yoFreeRest(schd->rest);

  yoEnvFree(&schd->ev);
  ysmGlbFree(usrp);
}

STATICF void yoevtc_cancel_i(yoevtc or, yoenv *ev)
{
  yormte *rest;

  rest = (yormte *)yoGetState((dvoid *)or);

  yoFreeRest(rest);
}

STATICF void yoFreeEnvH(dvoid *usrp, CONST ysid *exid, dvoid *arg,
                        size_t argsz)
{
  yoEnvFree((yoenv *)usrp);
  ysmGlbFree((dvoid *)usrp);
}

STATICF void yoFreeRest(yormte *rest)
{
  yoDispose((dvoid *)rest->cobj);
  yoRelease((dvoid *)rest->cobj);
  yoRelease((dvoid *)rest->revt);
  if(rest->devt)
    ysEvtDestroy(rest->devt);
  ysEvtDestroy(rest->evt);
  ysmGlbFree((dvoid *)rest);
}
