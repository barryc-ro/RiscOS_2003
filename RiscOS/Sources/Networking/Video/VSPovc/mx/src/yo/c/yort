/* yo/yort.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/








#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSR_ORACLE
#include <ysr.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
#ifndef YOI_ORACLE
#include <yoi.h>
#endif
#ifndef YOIDL_ORACLE
#include <yoidl.h>
#endif


typedef struct yortri yortri;
struct yortri
{
  char *nm;
  yslst *vals;
};


STATICF void yortAdminCb(CONST ysid *intf, CONST ysid *impl, boolean stateless,
                         ub4 ostate, ub4 nstate, dvoid *usrp);
STATICF boolean yortGetResCb(dvoid *usrp, char *nm, yslst *vals);


STATICF void yort_proc_getResource_i( yort_proc or, yoenv *ev,
                                     char* name, yostd_stringList* vals);
STATICF void yort_proc_setResource_i( yort_proc or, yoenv *ev,
                                     char* name, yostd_stringList* vals);
STATICF void yort_proc_getImplAll_i(yort_proc or, yoenv *ev,
                                    yort_implFlags mask, yort_procInfo *pinfo,
                                    yort_dispInfoList *dinfo,
                                    yort_implAllList *list);
STATICF void yort_proc_setAdminState_i( yort_proc or, yoenv *ev,
                                       yort_procState adminState);
STATICF boolean yort_proc_exists_i(yort_proc or, yoenv* ev,
                                   CORBA_Object ref);
STATICF void yort_proc_getIiopExtAddr_i(yort_proc or, yoenv *ev, char **host,
                                        ub2 *port);
STATICF boolean yort_proc_listClaims_i(yort_proc or, yoenv *ev, sb4 count,
                                       yort_claimList *claims,
                                       yort_claimIterator *ci);
STATICF yort_resourceList yort_proc__get_resources_i( yort_proc or,
                                                     yoenv *ev);
STATICF yort_implList yort_proc__get_impls_i( yort_proc or, yoenv *ev);
STATICF yort_queueList yort_proc__get_queues_i( yort_proc or, yoenv *ev);
STATICF yort_dispatcherList yort_proc__get_dispatchers_i( yort_proc or,
                                                         yoenv *ev);
STATICF yort_procInfo yort_proc__get_procInfo_i(yort_proc or, yoenv *ev);
STATICF void yort_impl_getAll_i( yort_impl or, yoenv *ev,
				yort_implInfo* info,
				yort_methodInfoList* methods,
				yort_queueInfo* qinfo);
STATICF void yort_impl_setAdminState_i( yort_impl or, yoenv *ev,
                                       yort_svcState adminState);
STATICF yort_implInfo yort_impl__get_info_i( yort_impl or, yoenv *ev);
STATICF yort_methodInfoList yort_impl__get_methods_i( yort_impl or,
						     yoenv *ev);
STATICF yort_queueInfo yort_impl__get_qinfo_i( yort_impl or, yoenv *ev);
STATICF void yort_queue_setName_i( yort_queue or, yoenv *ev, char* name);
STATICF yort_queueInfo yort_queue__get_info_i( yort_queue or, yoenv *ev);
STATICF void yort_queue_shutdownDispatchers_i( yort_queue or, yoenv* ev);
STATICF void yort_dispatcher_setAdminState_i( yort_dispatcher or,
                                             yoenv *ev, yort_svcState val);
STATICF yort_dispInfo yort_dispatcher__get_dinfo_i( yort_dispatcher or,
                                                   yoenv *ev);

static CONST_W_PTR struct yort_proc__tyimpl yort_proc_impl =
{
  yort_proc_getImplAll_i,
  yort_proc_getResource_i,
  yort_proc_setResource_i,
  yort_proc_setAdminState_i,
  yort_proc_exists_i,
  yort_proc_getIiopExtAddr_i,
  yort_proc__get_resources_i,
  yort_proc__get_impls_i,
  yort_proc__get_queues_i,
  yort_proc__get_dispatchers_i,
  yort_proc__get_procInfo_i
};

static CONST_W_PTR struct yort_impl__tyimpl yort_impl_impl =
{
  yort_impl_getAll_i,
  yort_impl_setAdminState_i,
  yort_impl__get_info_i,
  yort_impl__get_methods_i,
  yort_impl__get_qinfo_i
};

static CONST_W_PTR struct yort_queue__tyimpl yort_queue_impl =
{
  yort_queue_setName_i,
  yort_queue_shutdownDispatchers_i,
  yort_queue__get_info_i
};

static CONST_W_PTR struct yort_dispatcher__tyimpl yort_dispatcher_impl =
{
  yort_dispatcher_setAdminState_i,
  yort_dispatcher__get_dinfo_i
};

void yortInit(yoctx *ctx)
{
  ysque *q;
  CONST char  *str;
  ysstr *impstr;

  impstr = ysStrCreate(ctx->hostname);
  impstr = ysStrApp(impstr,':');
  if(ctx->pid)
    impstr = ysStrCat(impstr,ctx->pid);
  if((str = ysGetAffinity()))
  {
    impstr = ysStrApp(impstr,':');
    impstr = ysStrCat(impstr,str);
  }

  yoSetImpl(yort_proc__id, ysStrToText(impstr), (yostub *)yort_proc__stubs,
            (dvoid *)&yort_proc_impl, (yoload) 0, FALSE, (dvoid *) 0);
  yoSetImplAdmCb(yort_proc__id, ysStrToText(impstr), yortAdminCb,
                 (dvoid *)ctx);
  yoSetImpl(yort_impl__id, ysStrToText(impstr), (yostub *)yort_impl__stubs,
            (dvoid *)&yort_impl_impl, (yoload) 0, FALSE, (dvoid *) 0);
  yoSetImplAdmCb(yort_impl__id, ysStrToText(impstr), yortAdminCb,
                 (dvoid *)ctx);
  yoSetImpl(yort_queue__id, ysStrToText(impstr), (yostub *)yort_queue__stubs,
            (dvoid *)&yort_queue_impl, (yoload) 0, FALSE, (dvoid *) 0);
  yoSetImplAdmCb(yort_queue__id, ysStrToText(impstr), yortAdminCb,
                 (dvoid *)ctx);
  yoSetImpl(yort_dispatcher__id, ysStrToText(impstr),
            (yostub *)yort_dispatcher__stubs, (dvoid *)&yort_dispatcher_impl,
            (yoload) 0, FALSE, (dvoid *) 0);
  yoSetImplAdmCb(yort_dispatcher__id, ysStrToText(impstr), yortAdminCb,
                 (dvoid *)ctx);
  
  
  ctx->yort = yoCreateOID(yort_proc__id,ysStrToText(impstr),(yoRefData *)0,
                          (dvoid *)yoCtx,YOSTID_YORT);

  
  ctx->yortq = q = yoQueCreate("yort-queue");
  ctx->ypadst = yort_ProcStRunning;

  yoImplReady(yort_proc__id,ysStrToText(impstr),q);
  yoImplReady(yort_impl__id,ysStrToText(impstr),q);
  yoImplReady(yort_queue__id,ysStrToText(impstr),q);
  yoImplReady(yort_dispatcher__id,ysStrToText(impstr),q);

  bic(ctx->flags,YOCTXFL_SNDYORT);
  ctx->yortidle = 0;
  ysSetIdler("yortIdle()",yortIdle,(dvoid *)ctx);

  ysStrDestroy(impstr);
}


void yortIdle(dvoid *usrp, CONST ysid *exid, dvoid *arg, size_t argsz)
{
  yoctx *ctx = (yoctx *)usrp;

  if(!ctx->yort || !ctx->yortq) return;
  if(ctx->yortidle) return;

  ctx->yortidle++;
  yseTry
    ysSvcAll(ctx->yortq);
  yseCatchAll
  {
    
  }
  yseEnd;
  ctx->yortidle--;
}

STATICF void yortAdminCb(CONST ysid *intf, CONST ysid *impl, boolean stateless,
                         ub4 ostate, ub4 nstate, dvoid *usrp)
{
  
}

void yortTerm(yoctx *ctx)
{
  CONST char *impstr;

  impstr = yoGetImplementation(ctx->yort);

  yoImplDeactivate(yort_proc__id,impstr);
  yoImplDeactivate(yort_impl__id,impstr);
  yoImplDeactivate(yort_queue__id,impstr);
  yoImplDeactivate(yort_dispatcher__id,impstr);

  ysSetIdler("yortIdle()",(ysHndlr)0,(dvoid *)0);
  yoQueDestroy(ctx->yortq);
  ctx->yortq = (ysque *) 0;
  yoDispose(ctx->yort);
  ctx->yort = (yoo *) 0;
}

void yortGetProcInfo(yoctx *ctx, yort_procInfo *ypi)
{
  sysb8 cs, t, div;

  CLRSTRUCT(*ypi);
  ypi->self_yort_procInfo = (yort_proc) yoDuplicate((dvoid *)ctx->yort);
  ypi->name_yort_procInfo = (char *) ysStrDupWaf(ysProgName(),yoAlloc);
  ypi->host_yort_procInfo = (char *) ysStrDupWaf(ctx->hostname,yoAlloc);
  ypi->affinity_yort_procInfo = (char *) ysStrDupWaf(ysGetAffinity(),yoAlloc);
  ypi->pid_yort_procInfo = (char *) ysStrDupWaf(ctx->pid,yoAlloc);
  ypi->operState_yort_procInfo = yort_ProcStRunning;
  ypi->adminState_yort_procInfo = ctx->ypadst;
  sysb8ext(&div,10000);
  ysGetCpuTime(&t);
  sysb8div(&cs,&t,&div);
  ypi->cpuCs_yort_procInfo = (ub4) sysb8msk(&cs);
  ypi->memKb_yort_procInfo = ysGetMemUsage();
  ysGetUpTime(&t);
  sysb8div(&cs,&t,&div);
  ypi->upTime_yort_procInfo = sysb8msk(&cs);
}




STATICF void yort_proc_getResource_i( yort_proc or, yoenv *ev,
                                     char* name, yostd_stringList* vals)
{
  yslst *strs;
  char **sl;
  ysle *e;

  strs = ysResGet(name);
  vals->_maximum = ysLstCount(strs);
  vals->_buffer = sl = (char **)
    yoAlloc((size_t)(sizeof(char *) * vals->_maximum));
  for(e = ysLstHead(strs); e; e = ysLstNext(e), sl++)
    *sl = ysStrDupWaf((char *)ysLstVal(e),yoAlloc);
  vals->_length = sl - vals->_buffer;
}


STATICF void yort_proc_setResource_i( yort_proc or, yoenv *ev,
                                     char* name, yostd_stringList* vals)
{
  ub4 i;

  for(i = 0; i < vals->_length; i++)
    ysResSet(name,vals->_buffer[i]);
}

STATICF void yort_proc_getImplAll_i(yort_proc or, yoenv *ev,
                                    yort_implFlags mask, yort_procInfo *pinfo,
                                    yort_dispInfoList *dinfo,
                                    yort_implAllList *list)
{
  yoctx *ctx;
  ub4 cnt, i;
  yort_implAll *yia;
  yort_dispInfo *di;
  ysle *e;
  yort_impl yimp;
  yoimp *imp;

  ctx = (yoctx *) yoGetState((dvoid *)or);

  *pinfo = yort_proc__get_procInfo_i(or, ev);

  cnt = ysLstCount(ctx->svclps);
  dinfo->_length = 0;
  dinfo->_maximum = cnt;
  dinfo->_buffer = di = (yort_dispInfo *)
    yoAlloc((size_t)(sizeof(yort_dispInfo) * cnt));
  for(e=ysLstHead(ctx->svclps), i=0; e && i < cnt; e=ysLstNext(e), i++, di++)
    *di = yort_dispatcher__get_dinfo_i(((yosvcl *)ysLstVal(e))->or,ev);
  dinfo->_length = i;

  cnt = ysLstCount(ctx->iirefl);
  list->_length = 0;
  list->_maximum = cnt;
  list->_buffer = yia = (yort_implAll *)
    yoAlloc((size_t)(sizeof(yort_implAll) * cnt));
  
  for(e = ysLstHead(ctx->iirefl), i = 0; e && i < cnt; e = ysLstNext(e) )
  {
    yimp = (yort_impl )ysLstVal(e);
    imp = (yoimp *)yoGetState((dvoid *)yimp);
    if((mask & imp->iinfo.implFlags_yort_implInfo) == 0)
    {
      yort_impl_getAll_i(yimp, ev, &yia->info_yort_implAll,
			 &yia->methods_yort_implAll,
			 &yia->queue_yort_implAll);
      yia++;
      i++;
    }
  }
  list->_length = i;
}


STATICF void yort_proc_setAdminState_i( yort_proc or, yoenv *ev,
                                       yort_procState adminState)
{
  yoctx *ctx;

  ctx = (yoctx *) yoGetState((dvoid *)or);
  
  ctx->ypadst = adminState;

  if(adminState == yort_ProcStInvalid)
    ysePanic(YS_EX_SHUTDOWN);
}


STATICF boolean yort_proc_exists_i(yort_proc or, yoenv* ev,
                                   CORBA_Object ref)
{
  yoctx *ctx;

  ctx = (yoctx *) yoGetState((dvoid *)or);

  return yoExistsLocal(ctx,(yoo *)ref);
}


STATICF void yort_proc_getIiopExtAddr_i(yort_proc or, yoenv *ev, char **host,
                                        ub2 *port)
{
  yoctx *ctx;

  ctx = (yoctx *) yoGetState((dvoid *)or);

  *host = (char *)ysStrDupWaf(ctx->iiopexta,yoAlloc);
  *port = ctx->iiopextp;
}

STATICF boolean yort_proc_listClaims_i(yort_proc or, yoenv *ev, sb4 count,
                                       yort_claimList *claims,
                                       yort_claimIterator *ci)
{
  yseThrow(YO_EX_UNIMPLEMENTED);
  return FALSE;
}


STATICF yort_resourceList yort_proc__get_resources_i( yort_proc or,
                                                     yoenv *ev)
{
  yort_resourceList yrl;
  yort_resource *yr;
  yortri  *ri;
  yslst *rlst;
  ysle *e;
  char **vals;
  
  rlst = ysLstCreate();

  ysResWalk(yortGetResCb, (dvoid *)rlst);

  yrl._maximum = ysLstCount(rlst);
  yr = (yort_resource *)yoAlloc((size_t)(yrl._maximum*sizeof(yort_resource)));
  yrl._buffer = yr;
  while((ri = (yortri *)ysLstDeq(rlst)))
  {
    yr->name_yort_resource = ysStrDupWaf(ri->nm,yoAlloc);
    yr->vals_yort_resource._maximum = ysLstCount(ri->vals);
    yr->vals_yort_resource._buffer = vals = (char **)
      yoAlloc((size_t)(sizeof(char *)*yr->vals_yort_resource._maximum));

    for(e = ysLstHead(ri->vals); e; e = ysLstNext(e), vals++)
      *vals = ysStrDupWaf((char *)ysLstVal(e),yoAlloc);

    yr->vals_yort_resource._length = vals - yr->vals_yort_resource._buffer;

    ysmGlbFree((dvoid *)ri);
    yr++;
  }
  yrl._length = yr - yrl._buffer;

  ysLstDestroy(rlst,(ysmff)0);

  return yrl;
}

STATICF boolean yortGetResCb(dvoid *usrp, char *nm, yslst *vals)
{
  yortri *ri;

  ri = (yortri *)ysmGlbAlloc(sizeof(yortri),"yortri");
  ri->nm = nm;
  ri->vals = vals;
  DISCARD ysLstEnq((yslst *)usrp,(dvoid *)ri);

  return TRUE;
}


STATICF yort_implList yort_proc__get_impls_i( yort_proc or, yoenv *ev)
{
  yoctx *ctx;
  ub4 cnt;
  yort_implList ilst;
  yort_impl *yi;
  ysle *e;

  ctx = (yoctx *) yoGetState((dvoid *)or);
  cnt = ysLstCount(ctx->iirefl);

  ilst._maximum = ilst._length = cnt;
  ilst._buffer = yi = (yort_impl *) yoAlloc((size_t)(sizeof(yort_impl )*cnt));

  for(e = ysLstHead(ctx->iirefl); e; e = ysLstNext(e))
    *yi++ = (yort_impl ) yoDuplicate(ysLstVal(e));

  return ilst;
}


STATICF yort_queueList yort_proc__get_queues_i( yort_proc or, yoenv *ev)
{
  yoctx *ctx;
  yort_queueList yql;
  yort_queue *qr;
  ub4  cnt, i;
  ysle *e;
  yoqi *qi;

  ctx = (yoctx *) yoGetState((dvoid *)or);

  yql._maximum = cnt = ysLstCount(ctx->yoques);
  yql._length = 0;
  yql._buffer = qr = (yort_queue *) yoAlloc((size_t)(sizeof(yort_queue)*cnt));

  for(e = ysLstHead(ctx->yoques), i = 0; e && i < cnt; e = ysLstNext(e), i++)
  {
    qi = ysQueGetUsrp((ysque *)ysLstVal(e));
    *qr++ = (yort_queue) yoDuplicate(qi->or);
  }
  yql._length = i;
  
  return yql;
}


STATICF yort_dispatcherList yort_proc__get_dispatchers_i( yort_proc or,
                                                         yoenv *ev)
{
  yoctx *ctx;
  yort_dispatcherList ydl;
  ysle *e;
  yort_dispatcher *d;

  ctx = (yoctx *) yoGetState((dvoid *)or);

  ydl._maximum = ydl._length = ysLstCount(ctx->svclps);
  ydl._buffer = d = 
    (yort_dispatcher *) yoAlloc((size_t)(sizeof(yort_dispatcher)*ydl._length));

  for(e = ysLstHead(ctx->svclps); e; e = ysLstNext(e), d++)
    *d = (yort_dispatcher) yoDuplicate(((yosvcl *)ysLstVal(e))->or);

  return ydl;
}


STATICF yort_procInfo yort_proc__get_procInfo_i( yort_proc or, yoenv *ev)
{
  yoctx *ctx;
  yort_procInfo ypi;

  ctx = (yoctx *) yoGetState((dvoid *)or);
  yortGetProcInfo(ctx, &ypi);

  return ypi;
}

STATICF void
yort_impl_getAll_i( yort_impl or, yoenv *ev, yort_implInfo* info,
		   yort_methodInfoList* methods, yort_queueInfo* qinfo)
{
  *info = yort_impl__get_info_i(or, ev);
  *methods = yort_impl__get_methods_i(or, ev);
  *qinfo = yort_impl__get_qinfo_i(or, ev);
}


STATICF void yort_impl_setAdminState_i( yort_impl or, yoenv *ev,
                                       yort_svcState adminState)
{
  yoimp *imp;
  boolean stateless;
  yort_svcState ostate;

  imp = (yoimp *) yoGetState((dvoid *)or);
  if(!imp) yseThrow(YO_EX_BADOBJ);

  ostate = imp->iinfo.adminStatus_yort_implInfo;
  imp->iinfo.adminStatus_yort_implInfo = adminState;
  imp->iinfo.adminStatusChanged_yort_implInfo = yoGetUpTimeCs();
  stateless = ((imp->flags & YOIMPF_STLESS) == YOIMPF_STLESS);

  (*imp->admcb)(imp->intf,imp->impl,stateless,ostate,adminState,imp->admcbup);
}


STATICF yort_implInfo yort_impl__get_info_i( yort_impl or, yoenv *ev)
{
  yoimp *imp;
  yort_implInfo iinfo;

  imp = (yoimp *) yoGetState((dvoid *)or);
  if(!imp) yseThrow(YO_EX_BADOBJ);

  yotkCopyVal(YCTC_yort_implInfo,(dvoid *)&iinfo,(dvoid *)&imp->iinfo,yoAlloc);

  return iinfo;
}


STATICF yort_methodInfoList yort_impl__get_methods_i( yort_impl or,
						     yoenv *ev)
{
  yoimp *imp;
  yort_methodInfoList minfo;

  imp = (yoimp *) yoGetState((dvoid *)or);
  if(!imp) yseThrow(YO_EX_BADOBJ);

  yotkCopyVal(YCTC_yort_methodInfoList,(dvoid *)&minfo,(dvoid *)&imp->minfo,
              yoAlloc);

  return minfo;
}


STATICF yort_queueInfo yort_impl__get_qinfo_i( yort_impl or, yoenv *ev)
{
  yoimp *imp;
  ysque *q;
  yoqi  *qi;

  imp = (yoimp *) yoGetState((dvoid *)or);

  q = imp->q;
  if(!q) q = yoCtx->reqq;

  qi = (yoqi *) ysQueGetUsrp(q);

  return yort_queue__get_info_i(qi->or, ev);
}


STATICF void yort_queue_setName_i( yort_queue or, yoenv *ev, char* name)
{
  yoctx *ctx;
  yoqi *qi;

  ctx = yoCtx;
  qi = (yoqi *) ysQueGetUsrp((ysque *) yoGetState((dvoid *)or));

  if(qi->name)
  {
    yoFreeStr(ctx,qi->name);
    qi->name = (char *) 0;
  }
  if(name)
    qi->name = yoGetStr(ctx,name);
}

STATICF void yort_queue_shutdownDispatchers_i( yort_queue or, yoenv* ev)
{
  yoShutdown((ysque *) yoGetState((dvoid *)or));
}


STATICF yort_queueInfo yort_queue__get_info_i( yort_queue or, yoenv *ev)
{
  yort_queueInfo yqi;
  ysque *q;
  yoqi  *qi;
  yslmtc metrics;
  sysb8 ticks, div;
  ub4 cnt, i;
  yort_dispatcher *d;
  ysle *e;

  q = (ysque *) yoGetState((dvoid *)or);
  qi = (yoqi *) ysQueGetUsrp(q);

  ysQueGetMetrics(q, &metrics);
  ysQueGetCurTime(q, &ticks);
  sysb8ext(&div,10000);

  CLRSTRUCT(yqi);
  yqi.self_yort_queueInfo = yoDuplicate(or);
  yqi.name_yort_queueInfo = ysStrDupWaf(qi->name,yoAlloc);
  yqi.totEnq_yort_queueInfo = metrics.totins;
  yqi.curLen_yort_queueInfo = metrics.curlen;
  yqi.maxLen_yort_queueInfo = metrics.maxlen;
  yqi.avgLen_yort_queueInfo = metrics.avglen;
  sysb8div(&ticks,&ticks,&div);
  yqi.curDelayMs_yort_queueInfo = sysb8msk(&ticks);
  sysb8div(&ticks,&metrics.maxtm,&div);
  yqi.maxDelayMs_yort_queueInfo = sysb8msk(&ticks);
  sysb8div(&ticks,&metrics.avgtm,&div);
  yqi.avgDelayMs_yort_queueInfo = sysb8msk(&ticks);

  cnt = ysLstCount(qi->qdl);
  yqi.dispatchers_yort_queueInfo._maximum = cnt;
  yqi.dispatchers_yort_queueInfo._buffer = d = 
    (yort_dispatcher *) yoAlloc((size_t)(sizeof(yort_dispatcher)*cnt));

  for(e = ysLstHead(qi->qdl), i = 0; e && i < cnt; e = ysLstNext(e), i++)
    *d++ = (yort_dispatcher) yoDuplicate(((yosvcl *)ysLstVal(e))->or);

  yqi.dispatchers_yort_queueInfo._length = i;

  return yqi;
}


STATICF yort_dispInfo yort_dispatcher__get_dinfo_i( yort_dispatcher or,
                                                   yoenv *ev)
{
  yosvcl *svc;
  yort_dispInfo dinfo;

  svc = (yosvcl *) yoGetState((dvoid *)or);

  dinfo.self_yort_dispInfo = yoDuplicate(svc->or);
  dinfo.queue_yort_dispInfo = yoDuplicate(((yoqi *)ysQueGetUsrp(svc->q))->or);
  dinfo.numDispatches_yort_dispInfo = svc->count;
  dinfo.operState_yort_dispInfo = yort_SvcStRun;
  dinfo.adminState_yort_dispInfo = svc->admst;
  
  return dinfo;
}


STATICF void yort_dispatcher_setAdminState_i( yort_dispatcher or,
                                             yoenv *ev, yort_svcState val)
{
  yosvcl *svc;

  svc = (yosvcl *) yoGetState((dvoid *)or);

  if(svc->admst == val)                              
    return;

  svc->admst = val;                       
  if(val == yort_SvcStDown)
    ysTrigger(svc->sem,(ysid *)0,(dvoid *)0,(size_t)0);
}

