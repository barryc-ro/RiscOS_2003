/* yo/yobr.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/








#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef SYSB8_ORACLE
#include <sysb8.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
#ifndef YOT_ORACLE
#include <yot.h>
#endif
#ifndef YOI_ORACLE
#include <yoi.h>
#endif
#ifndef YOBR_ORACLE
#include <yobr.h>
#endif
#ifndef YOCY_ORACLE
#include <yocy.h>
#endif

static ysmtagDecl(yobrTagCtx) = "yobrCtx";

struct yobrctx
{
  yotp *port;
  CONST char *proto;
  CONST char *extaddr;
};

typedef struct yobrrx yobrrx;
struct yobrrx
{
  yobrctx *brcx;
  ysevt *uevt;
  yomd  md;
};

typedef struct yobrsm yobrsm;
struct yobrsm
{
  yoctx   *ctx;
  yobrctx *brcx;
  yoo     *dr;
  ysbv    *bv;
  sword    nbv;
  ysevt   *uevt;
};

STATICF void yobrRecvHdlr(dvoid *usrp, CONST ysid *exid, dvoid *arg,
                          size_t argsz);
STATICF void yobrRecvCancel(dvoid *usrp, CONST ysid *exid, dvoid *arg,
                            size_t argsz );
STATICF void yobrDecodeMsg(dvoid *usrp, CONST ysid *exid, dvoid *arg,
                          size_t argsz);
STATICF void yobrSndLocH(dvoid *usrp, CONST ysid *exid, dvoid *arg,
                         size_t argsz);

yobrctx *yobrInit(CONST char *proto, CONST char *extaddr)
{
  yoctx *ctx;
  yotp *port;
  yobrctx *brcx;
  sb4 sts;
  char *cp;

  ctx = yoCtx;
  port = yotOpen(YOTPROTO_MESSAGE);
  sts = mnEcho((mna *)&ctx->iiopbr, (ub4) 1000, (mnHandler) 0, (dvoid *) 0);
  if (sts >= 0)
  {
    yotClose(port);
    return (yobrctx *)0;
  }
  sts = mnBind((mnp *)port, ctx->iiopbr);
  if(sts < 0)
  {
    yotClose(port);
    return (yobrctx *)0;
  }

  brcx = (yobrctx *) ysmGlbAlloc(sizeof(yobrctx),yobrTagCtx);
  brcx->port = port;
  brcx->proto = proto;
  brcx->extaddr = extaddr;

  cp = strchr(extaddr,':');
  if(cp)
  {
    if(ctx->iiopexta)
       ysmGlbFree((dvoid *) ctx->iiopexta);
    ctx->iiopexta = (char *)ysStrDup(extaddr);
    cp = strchr(ctx->iiopexta,':');
    *cp = '\0';
    ctx->iiopextp = atoi(cp+1);
  }
  return brcx;
}

void yobrTerm(yobrctx *brcx)
{
  ysmCheck((dvoid *)brcx, yobrTagCtx);

  yotClose(brcx->port);
  ysmGlbFree((dvoid *)brcx);
}

void yobrSendException(yobrctx *brcx, dvoid *dstref, ub4 reqid,
                       CONST ysid *exid)
{
  ysmCheck((dvoid *)brcx, yobrTagCtx);
  
}

dvoid  *yobrGetObjRef(ysbv *bv, sword nbv)
{
  yoctx *ctx;
  yosx *x;
  ub1 mtype, resp;
  ub4 id, len;
  yslst *scl;
  dvoid *ref;

  ctx = yoCtx;
  x = yosxDecode(0,bv,nbv);
  mtype = yogiGetMsgHeader(x,&len);
  switch(mtype)
  {
  case YOGIMT_REQ:
    scl = yogiGetSvcCtxLst(x);
    yogiFreeSvcCtxLst(scl);
    id = yosxGetUB4(x);
    resp = yosxGetUB1(x);
    break;
  case YOGIMT_LOCREQ:
    id = yosxGetUB4(x);
    break;
  default:
    yseThrow(YS_EX_BADPARAM);
    break;
  }

  ref = (dvoid *)yogiGetObjKey(ctx,x,yotAddrDup(ctx->rrpaddr),FALSE);
  yosxDecEnd(x);
  return ref;
}

void yobrRecvMsg(yobrctx *brcx, ysevt *evt)
{
  yobrrx *rx;
  ysevt *tevt, *cevt;

  ysmCheck((dvoid *)brcx, yobrTagCtx);

  rx = (yobrrx *) ysmGlbAlloc(sizeof(yobrrx),"yobrrx");
  CLRSTRUCT(*rx);

  rx->brcx = brcx;
  cevt = ysEvtSimple(yobrRecvCancel,(dvoid *)rx);
  rx->uevt = ysEvtAttach(evt,cevt);
  tevt = ysEvtCreate(yobrRecvHdlr,(dvoid *)rx, yoCtx->evtq, FALSE);
  DISCARD yotTest(brcx->port,YSTM_INFINITE,tevt);
}

STATICF void yobrRecvHdlr(dvoid *usrp, CONST ysid *exid, dvoid *arg,
                          size_t argsz )
{
  yobrrx *rx = (yobrrx *) usrp;
  yoctx *ctx;
  sb4 len;
  ysbv *noreg bv;
  noreg sword nbv;
  ysevt *noreg rcvevt;

  NOREG(bv);
  NOREG(nbv);
  NOREG(rcvevt);

  if(!rx->uevt)                                                 
  {
    ysmGlbFree((dvoid *)rx);
    return;
  }

  if(exid)
  {
    ysRecord(YOBR_ERR(1), YSLSEV_CRIT, (char *)0, YSLSTR(exid), YSLEND);
    ysTrigger(rx->uevt,exid,arg,argsz);           
    ysmGlbFree((dvoid *)rx);
    return;
  }

  ctx = yoCtx;

  yseTry
  {
    len = *(sb4 *)arg;
    yoAllocMsgBufs(ctx->rcvhp,len,(ysbv **)&bv,(sword *)&nbv);

    rx->md.len = len;
    rx->md.bv = bv;
    rx->md.nbv = nbv;
    rx->md.x = (yosx *)0;
    rcvevt = ysEvtCreate(yobrDecodeMsg, (dvoid *) rx, ctx->evtq, FALSE);
    
    DISCARD yotRecvV(rx->brcx->port,&rx->md.addr,rx->md.bv,rx->md.nbv,rcvevt);
  }
  yseCatchAll
  {
    if(bv) ysBvFree(ctx->rcvhp,bv,nbv);
    if(rcvevt) ysEvtDestroy(rcvevt);
    ysRecord(YOBR_ERR(2), YSLSEV_CRIT, (char *)0, YSLSTR(yseExid), YSLEND);
    yseTrigger(rx->uevt);
    ysmGlbFree((dvoid *)rx);
  }
  yseEnd;
}

STATICF void yobrRecvCancel(dvoid *usrp, CONST ysid *exid, dvoid *arg,
                            size_t argsz )
{
  yobrrx *rx = (yobrrx *) usrp;

  rx->uevt = (ysevt *)0;
}

STATICF void yobrDecodeMsg(dvoid *usrp, CONST ysid *exid, dvoid *arg,
                          size_t argsz )
{
  yoctx *ctx;
  yobrrx *rx = usrp;
  yosx *noreg x;
  yobrMsg msg;
  ub4 len;
  yosxPos p;
  ysbv *bv;
  sword nbv;

  NOREG(x);
  x = (yosx *) 0;
  ctx = yoCtx;

  if(exid)
  {
    
    ysRecord(YOBR_ERR(3), YSLSEV_CRIT, (char *)0, YSLSTR(exid), YSLEND);
    ysTrigger(rx->uevt, exid, arg, argsz);
  }
  yseTry
  {
    CLRSTRUCT(msg);
    msg.from = (dvoid *)
      yoRefCreate(ctx,yort_proc__id,(char *)0,(yoRefData *)0,YOSTID_YORT,
                  rx->md.addr,(dvoid *)0,FALSE);

    if(yocyIsCipher(rx->md.bv))
      if(ctx->cycx)
      {
	yocyBvDecrypt(ctx,rx->md.bv,rx->md.nbv,&bv,&nbv,ctx->rcvhp);
	ysBvFree(ctx->rcvhp,rx->md.bv,rx->md.nbv);
	rx->md.bv = bv;
	rx->md.nbv = nbv;
      }
      else
	yseThrow(YO_EX_CRYPTO_ERR);
    else if(ctx->cycx)
      yseThrow(YO_EX_CRYPTO_ERR);

    msg.bv = rx->md.bv;
    msg.nbv = rx->md.nbv;

    x = yosxDecode((boolean)0,rx->md.bv,rx->md.nbv);
    yosxDecSet(x,yosxGetUB1(x));                           
    yogiGetIOR(ctx,x,&msg.ior,(yoo **)0);          
    yosxAlign(x,16);                                                
    yosxGetPos(x,&p);                       
    msg.idx = p.idx;
    msg.off = p.off;
    msg.mtype = yogiGetMsgHeader(x,&len);           
    ysTrigger(rx->uevt,(char *)0,&msg,sizeof(yobrMsg));
  }
  yseCatchAll
  {
    ysBvFree(yoCtx->rcvhp,rx->md.bv,rx->md.nbv);
    yseTrigger(rx->uevt);
  }
  yseEnd;
  if(x) yosxDecEnd(x);
  ysmGlbFree((dvoid *)rx);
}

void yobrFreeMsg(yobrMsg *msg)
{
  yoRelease(msg->from);
  yogiFreeIOR(&msg->ior);
  ysBvFree(yoCtx->rcvhp,msg->bv,msg->nbv);
}

void yobrSendMsg(yobrctx *brcx, dvoid *dstref, ysbv *bv, sword nbv, ysevt *evt)
{
  yoctx *ctx;
  yoo *dr = (yoo *)dstref;
  yobrsm *sm;
  ysevt *levt;

  ysmCheck(dstref,yoTagObjRef);
  ysmCheck((dvoid *)brcx, yobrTagCtx);

  ctx = yoCtx;

  sm = (yobrsm *)ysmGlbAlloc(sizeof(yobrsm),"yobrsm");
  sm->ctx = ctx;
  sm->brcx = brcx;
  sm->dr  = (yoo *)yoDuplicate((dvoid *)dr);
  sm->bv = bv;
  sm->nbv = nbv;
  sm->uevt = evt;

  
  if(!dr->addr)
  {
    levt = ysEvtCreate(yobrSndLocH,sm,ctx->evtq,FALSE);
    yoSndLocReq(ctx,(yoo *)dr,levt);
  }
  else
    yobrSndLocH((dvoid *)sm,(ysid *)0, (dvoid *)0, (size_t)0);
}

STATICF void yobrSndLocH(dvoid *usrp, CONST ysid *exid, dvoid *arg,
                         size_t argsz)
{
  yobrsm *sm = (yobrsm *)usrp;
  yoctx *ctx;
  yobrctx *brcx;
  yota *dest;
  yoo *dr = (yoo *)0;
  ysbv *bv;
  sword nbv;

  ctx = sm->ctx;
  brcx = sm->brcx;

  if(exid)
    ysTrigger(sm->uevt,exid,arg,argsz);
  else if(arg)
    dr = *(yoo **)arg;
  else
    dr = (yoo *)yoDuplicate((dvoid *)sm->dr);

  if(dr)
  {
    if(!(dest = dr->addr))
    {
      ysMtxLock(&ctx->ydmtx);
      dest = ctx->ydaddr;                                  
      ysMtxUnlock(&ctx->ydmtx);
      if(!dest)
      {
        
      }
    }
    yseTry
    {
      if(ctx->cycx)
      {
        yocyBvEncrypt(ctx,sm->bv,sm->nbv,&bv,&nbv,ctx->sndhp);
	DISCARD yotSendV(brcx->port, dest, bv, nbv, sm->uevt);
	ysBvFree(ctx->sndhp,bv,nbv);
      }
      else
	DISCARD yotSendV(brcx->port, dest, sm->bv, sm->nbv, sm->uevt);
    }
    yseCatchAll
    {
      yseTrigger(sm->uevt);
    }
    yseEnd;
    yoRelease((dvoid *)dr);
  }
  yoRelease((dvoid *)sm->dr);
  ysmGlbFree((dvoid *)sm);
}

void yobrDecGiopMsg(ysbv *bv, sword nbv, yogiMsg *gm)
{
  yosx *x;

  x = yosxDecode(0,bv,nbv);
  yogiGetMsgHdr(x,&gm->hdr);
  switch(gm->hdr.type)
  {
  case YOGIMT_REP:
    yogiGetRepHdr(x,&gm->b.rep.hdr);
    if(gm->b.rep.hdr.status == YOGIRS_LOCFWD)
      yogiGetIOR(yoCtx,x,&gm->b.rep.ior,(yoo **)0);
    break;
  }
  yosxDecEnd(x);
}

void  yobrFreeGiopMsg(yogiMsg *gm)
{
  switch(gm->hdr.type)
  {
  case YOGIMT_REP:
    if(gm->b.rep.hdr.status == YOGIRS_LOCFWD)
      yogiFreeIOR(&gm->b.rep.ior);
    yogiFreeRepHdr(&gm->b.rep.hdr);
    break;
  }
}

void yobrEncGiopLocRep(yogiLocRep *lr, yogiIOR *ior, ysbv **bv, sword *nbv)
{
  yosx *x;
  yosxPos lenpos;

  x = yosxEncode(0,ysmGlbHeap());
  yogiPutMsgHeader(x, YOGIMT_LOCREP, &lenpos);
  yogiPutLocRep(x, lr, ior);
  yogiFixupMsgHeader(x, &lenpos);
  yosxEncEnd(x,bv,nbv);
}

ub4 yobrGetReqId(ysbv *bv, sword nbv)
{
  yosx *x;
  ub1 mtype;
  ub4 len;
  ub4 id = 0;
  yslst *scl;
  

  x = yosxDecode(0,bv,nbv);
  mtype = yogiGetMsgHeader(x,&len);
  switch(mtype)
  {
  case YOGIMT_REQ:
  case YOGIMT_REP:
    scl = yogiGetSvcCtxLst(x);
    yogiFreeSvcCtxLst(scl);
    id = yosxGetUB4(x);
    break;
  case YOGIMT_CANCEL:
  case YOGIMT_LOCREQ:
  case YOGIMT_LOCREP:
    id = yosxGetUB4(x);
    break;
  default:
    yseThrow(YS_EX_BADPARAM);
    break;
  }
  yosxDecEnd(x);
  return id;
}

void  yobrPutReqId(ysbv *bv, sword nbv, ub4 reqid)
{
  yosx *x;
  ub1 mtype;
  ub4 len;
  yslst *scl;
  yosxPos p;
  ub1 *buf;
  
  x = yosxDecode(0,bv,nbv);
  mtype = yogiGetMsgHeader(x,&len);
  switch(mtype)
  {
  case YOGIMT_REQ:
  case YOGIMT_REP:
    scl = yogiGetSvcCtxLst(x);
    yogiFreeSvcCtxLst(scl);
    yosxAlign(x,4);
    yosxGetPos(x,&p);
    break;
  case YOGIMT_CANCEL:
  case YOGIMT_LOCREQ:
  case YOGIMT_LOCREP:
    yosxAlign(x,4);
    yosxGetPos(x,&p);
    break;
  default:
    yseThrow(YS_EX_BADPARAM);
    break;
  }
  buf = bv[p.idx].buf + p.off;
  if(yosxDecGet(x) != YO_BYTESEX)
    sysxPutSwap4(buf,reqid);
  else
    sysxPut4(buf,reqid);
  yosxDecEnd(x);
}



