/* yo/yorc5x.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/










#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YOCY_ORACLE
#include <yocy.h>
#endif
#ifndef YORC5_ORACLE
#include <yorc5.h>
#endif



struct yorc5cx
{
  ub1		    *ukey_yorc5cx;                           
  size_t	    ukeysz_yorc5cx;                              
} ;



STATICF void yorc5Work( yorc5cx *cx, ub4 iv1, ub4 iv2, boolean encrypt,
		       ysbv *ibv, sword nibvs,
		       ysbv *obv, ysmhp *hp );



yorc5cx *yorc5Init( ub1 *key, sword keybytes )
{
  yorc5cx *cx;

  cx = (yorc5cx*)ysmGlbAlloc(sizeof(*cx), "yorc5cx" );

  cx->ukey_yorc5cx = ysmGlbAlloc( (size_t)keybytes, "yorc5key" );
  cx->ukeysz_yorc5cx = keybytes;
  DISCARD memcpy( cx->ukey_yorc5cx, key, keybytes );

  return cx;
}

void yorc5Term( yorc5cx *cx )
{
  if( cx )
  {
    ysmGlbFree( (dvoid*)cx->ukey_yorc5cx );
    ysmGlbFree( (dvoid*)cx );
  }
}

void yorc5Encrypt(yorc5cx *cx, ub4 *iv1, ub4 *iv2,
		  ysbv *ibv, sword nibvs,
		  ysbv *obv, ysmhp *hp )
{
  
  *iv1 = 0;
  *iv2 = 0;
  yorc5Work( cx, *iv1, *iv2, TRUE, ibv, nibvs, obv, hp );
}


void yorc5Decrypt( yorc5cx *cx, ub4 iv1, ub4 iv2,
		  ysbv *ibv, sword nibvs,
		  ysbv *obv, ysmhp *hp )
{
  yorc5Work( cx, iv1, iv2, FALSE, ibv, nibvs, obv, hp );
}




                                                                             

STATICF void yorc5Work( yorc5cx *cx, ub4 iv1, ub4 iv2, boolean encrypt,
		       ysbv *ibv, sword nibvs,
		       ysbv *obv, ysmhp *hp )
{
  sword i, j, k;
  ub1 *s, *d;
  size_t len;

  if( !nibvs )
    return;

  k = 0;
  for( i = 0 ; i < nibvs ; i++ )
  {
    len = obv[i].len = ibv[i].len;
    d = obv[i].buf = (ub1*)ysmAlloc( hp, ibv[i].len, "yorc5x buf" );
    s = ibv[i].buf;

    for( j = (sword)len; j-- ; )
    {
      *d++ = *s++ ^ cx->ukey_yorc5cx[ k++ ];
      if( (size_t)k >= cx->ukeysz_yorc5cx )
	k = 0;
    }
  }
}

