/* yo/yocy.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/









#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

#ifndef YSR_ORACLE
#include <ysr.h>
#endif

#ifndef YOI_ORACLE
#include <yoi.h>
#endif

#ifndef YOCY_ORACLE
#include <yocy.h>
#endif



externdef ysidDecl(YO_EX_CRYPTO_ERR) = "yo::cryptoErr";
externdef ysidDecl(YO_EX_UNKNOWN_CIPHER) = "yo::unknownCipher";



STATICF void yocyMsgEncrypt( yoctx *ctx, ysbv *bv, sword nbv,
			    ysbv *obv, ysmhp *hp );
STATICF void yocyMsgDecrypt( yoctx *ctx, ysbv *bv, sword nbv, ysbv *obv,
			    ysmhp *hp );



void yocyInit( yoctx *ctx )
{
  char *res;
  ub1	*key;
  sword i, j;
  size_t    keylen;
  sysb8	    seed;
  unsigned int	val;

  ctx->cycx = (dvoid*)0;
  
  ysClock(&seed);
  DISCARD ysRand(&seed);	
  
  if( (res = (char*)ysResGetLast( "yo.security-key" )) )
  {
    if( !strncmp( res, "rc5:", 4 ) || !strncmp( res, "RC5:", 4 ) )
    {
      res += 4;
      keylen = ((size_t)strlen(res) + 1) / 2;
      key = (ub1*)ysmGlbAlloc( keylen, "yocy key" );
      for( j = i = 0; *res; i++ )
      {
	DISCARD sscanf( res, "%2x", &val );
	key[i] = (ub1)(val & 0xff);
	res += res[1] ? 2 : 1;
      }
      ctx->cycx = (dvoid*)yorc5Init( key, keylen );
      ysmGlbFree( (dvoid*)key );
    }
    else
    {
      yseThrow( YO_EX_UNKNOWN_CIPHER );
    }
  }
}

void yocyTerm( yoctx *ctx )
{
  yorc5Term( (yorc5cx*)ctx->cycx );
}

boolean yocyIsCipher( ysbv *bv )
{
  yosx *x;
  ub1	C,P,H,R;
  boolean rv;

  x = yosxDecode( 0, bv, 1 );
  C = yosxGetUB1( x );
  P = yosxGetUB1( x );
  H = yosxGetUB1( x );
  R = yosxGetUB1( x );
  yosxDecEnd(x);

  rv = C == 'C' && P == 'P' && H == 'H' && R == 'R';
  return( rv );
}

void yocyBvEncrypt( yoctx *ctx, ysbv *ibv, sword inbv,
		   ysbv **obv, sword *onbv, ysmhp *hp )
{
  
  *onbv = inbv + 1;
  *obv = (ysbv*)ysmAlloc( hp, (*onbv) * sizeof(ysbv), "yocy encbuf" );

  
  yocyMsgEncrypt( ctx, ibv, inbv, *obv, hp );
}

void yocyBvDecrypt( yoctx *ctx, ysbv *ibv, sword inbv,
		   ysbv **obv, sword *onbv, ysmhp *hp )
{
  
  *onbv = inbv;
  *obv = (ysbv*)ysmAlloc( hp, inbv * sizeof(ysbv), "yocy decbuf" );

  
  yocyMsgDecrypt( ctx, ibv, inbv, *obv, hp );
}





STATICF void yocyMsgEncrypt( yoctx *ctx, ysbv *ibv, sword nbv, ysbv *obv,
			    ysmhp *hp )
{
  yosx	*x;
  ub4	iv1;
  ub4	iv2;
  ysbv	*bv;			

  if( !ctx->cycx )
    yseThrow( YO_EX_CRYPTO_ERR );

  
  yorc5Encrypt( (yorc5cx*)ctx->cycx, &iv1, &iv2, ibv, nbv, &obv[1], hp );

  
  x = yosxEncode( 0, hp );
  yosxPutUB1( x, 'C' );
  yosxPutUB1( x, 'P' );
  yosxPutUB1( x, 'H' );
  yosxPutUB1( x, 'R' );
  yosxPutUB4( x, YOCY_RC5_SAID );
  yosxPutUB4( x, iv1 );
  yosxPutUB4( x, iv2 );
  yosxEncEnd(x, &bv, &nbv );
  if( nbv != 1 )
    yseThrow( YO_EX_CRYPTO_ERR );

  
  obv[0] = bv[0];

  
  ysmFree( hp, bv );
}


STATICF void yocyMsgDecrypt( yoctx *ctx, ysbv *bv, sword nbv, ysbv *obv,
			    ysmhp *hp )
{
  yosx	*x;
  ysbv	xbv;			
  ub1	C,P,H,R;
  ub4	said;
  ub4	iv1, iv2;

  if( !ctx->cycx )
    yseThrow( YO_EX_CRYPTO_ERR );

  
  xbv = bv[0];

  
  x = yosxDecode( 0, &xbv, 1 );
  C = yosxGetUB1( x );
  P = yosxGetUB1( x );
  H = yosxGetUB1( x );
  R = yosxGetUB1( x );
  said = yosxGetUB4( x );
  if( C != 'C' || P != 'P' || H != 'H' || R != 'R' || said != YOCY_RC5_SAID )
  {
    yosxDecEnd(x);
    yseThrow( YO_EX_CRYPTO_ERR );
  }
  iv1 = yosxGetUB4( x );
  iv2 = yosxGetUB4( x );
  yosxDecEnd(x);

  
  bv[0].buf += 16;
  bv[0].len -= 16;

  
  yorc5Decrypt( (yorc5cx*)ctx->cycx, iv1, iv2, bv, nbv, obv, hp );

  
  bv[0] = xbv;
}



