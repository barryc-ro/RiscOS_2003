/* yo/yoboa.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/








#ifndef YOORB_ORACLE
#include <yoorb.h>
#endif
#ifndef YOBOA_ORACLE
#include <yoboa.h>
#endif
#ifndef YOI_ORACLE
#include <yoi.h>
#endif


externdef ysmtagDecl(yoTagBoa) = "yoBoa";


typedef struct yoboacx yoboacx;
struct yoboacx
{
  yslst *setimps;
};

typedef struct yoboasi yoboasi;
struct yoboasi
{
  ysid *intf;
  char *impl;
};

CORBA_Object CORBA_BOA_create(CORBA_BOA boa, CORBA_Environment *ev,
                         CORBA_ReferenceData *id, CORBA_InterfaceDef intf,
                         CORBA_ImplementationDef impl)
{
  CORBA_Object noreg ref;
  ysid *ifid;

  NOREG(ref);
  ref = (CORBA_Object) 0;

  ysmCheck((dvoid *)boa,yoTagBoa);

  yseTry
  {
    ifid = ORA_CORBA_GetIntfId(intf);
    ref = yoCreate(ifid,impl,id,(char *)0,(dvoid *)0);
  }
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;

  return ref;
}

void CORBA_BOA_dispose(CORBA_BOA boa, CORBA_Environment *ev, CORBA_Object obj)
{
  ysmCheck((dvoid *)boa,yoTagBoa);

  yseTry
    yoDispose(obj);
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;
}

CORBA_ReferenceData *CORBA_BOA_get_id(CORBA_BOA boa, CORBA_Environment *ev,
                                      CORBA_Object obj)
{
  CORBA_ReferenceData *noreg ref;

  NOREG(ref);
  ref = (CORBA_ReferenceData *)0;

  ysmCheck((dvoid *)boa,yoTagBoa);

  yseTry
    ref = yoGetId(obj);
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;

  return ref;
}

#ifdef NEVER
void CORBA_BOA_change_implementation(CORBA_BOA boa, CORBA_Environment *ev,
                                     CORBA_Object obj,
                                     CORBA_ImplementationDef *impl)
{
}

Principal CORBA_BOA_get_principal(CORBA_BOA boa, CORBA_Environment *ev,
                                  CORBA_Object obj)
{
}
#endif

void CORBA_BOA_set_exception(CORBA_BOA boa, CORBA_Environment *ev,
                             CORBA_exception_type major, CORBA_char *userid,
                             void *param)
{
  CONST yopar *p;
  CONST char *tkid;
  yoany any;
  
  ysmCheck((dvoid *)boa,yoTagBoa);

  yseTry
  {
    ev->_major = major;
    ev->id = userid;
  
    if(param && ev->pars)
    {
      for(p = ev->pars; p->mode != YOMODE_INVALID; p++)
        if(p->mode == YOMODE_EXCEPT)
        {
          tkid = yotkGetName(p->tk);
          if(tkid && strcmp(tkid,userid) == 0)
            break;
        }
      if(p->mode == YOMODE_EXCEPT)
      {
        any._type = p->tk;
        any._value = param;
        yoEnvSet(ev->yev,"CORBA_EXCEPTION",&any);
      }
    }
    else
      yoEnvSet(ev->yev,"CORBA_EXCEPTION",(yoany *)0);
  }
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;
}

void CORBA_BOA_impl_is_ready(CORBA_BOA boa, CORBA_Environment *ev,
                             CORBA_ImplementationDef impl)
{
  yoboacx *bcx;
  yoboasi *si;
  ysle *e;

  ysmCheck((dvoid *)boa,yoTagBoa);

  yseTry
  {
    bcx = (yoboacx *) boa;
    for(e = ysLstHead(bcx->setimps); e; e = ysLstNext(e))
    {
      si = (yoboasi *)ysLstVal(e);
      if(si->impl == impl ||
         (impl && si->impl && (strcmp(si->impl,impl) == 0)))
        yoImplReady(si->intf,si->impl,(ysque *)0);
    }
  }
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;
}

void CORBA_BOA_deactivate_impl(CORBA_BOA boa, CORBA_Environment *ev,
                               CORBA_ImplementationDef impl)
{
  yoboacx *bcx;
  yoboasi *si;
  ysle *e;

  ysmCheck((dvoid *)boa,yoTagBoa);

  yseTry
  {
    bcx = (yoboacx *) boa;
    for(e = ysLstHead(bcx->setimps); e; e = ysLstNext(e))
    {
      si = (yoboasi *)ysLstVal(e);
      if(si->impl == impl ||
         (impl && si->impl && (strcmp(si->impl,impl) == 0)))
        yoImplDeactivate(si->intf,si->impl);
    }
  }
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;
}

#ifdef NEVER
void CORBA_BOA_obj_is_ready(CORBA_BOA boa, CORBA_Environment *ev,
                            CORBA_Object obj,
                            CORBA_ImplementationDef *impl)
{
  yoObjListen(obj,(ysque *)0);
}

void CORBA_BOA_deactivate_obj(CORBA_BOA *boa, CORBA_Environment *ev,
                              CORBA_Object *obj)
{
  yoObjDeactivate(obj);
}

#endif

CORBA_BOA ORA_CORBA_ORB_BOA_init(void)
{
  yoboacx *noreg bcx;
  NOREG(bcx);


  bcx = (yoboacx *) 0;
  yseTry
  {
    bcx = (yoboacx *) ysmGlbAlloc(sizeof(yoboacx),yoTagBoa);
    bcx->setimps = ysLstCreate();
  }
  yseCatchAll
  {
    if(bcx) ysmGlbFree((dvoid *)bcx);
    bcx = (yoboacx *) 0;
  }
  yseEnd;

  return (CORBA_BOA)bcx;
}

void ORA_CORBA_ORB_BOA_term(CORBA_BOA boa, CORBA_Environment *ev)
{
  yoboacx *bcx;

  ysmCheck((dvoid *)boa,yoTagBoa);

  yseTry
  {
    bcx = (yoboacx *) boa;

    ysLstDestroy((dvoid *)bcx->setimps, ysmFGlbFree);
    ysmGlbFree((dvoid *)bcx);
  }
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;
}

void ORA_CORBA_BOA_set_impl(CORBA_BOA boa, CORBA_Environment *ev,
                            CORBA_InterfaceDef intf,
                            CORBA_ImplementationDef impl, yostub *stubs,
                            void *impldef, yoload loader, boolean stateless,
                            void *state)
{
  yoboacx *bcx;
  yoboasi *si;
  ysid *ifid;

  ysmCheck((dvoid *)boa,yoTagBoa);

  yseTry
  {
    bcx = (yoboacx *) boa;
    ifid = ORA_CORBA_GetIntfId(intf);
    yoSetImpl(ifid,impl,stubs,impldef,loader,stateless,state);

    si = (yoboasi *) ysmGlbAlloc(sizeof(yoboasi),"yoboasi");
    si->intf = ifid;
    si->impl = yoGetStr(yoCtx,impl);
    ysLstEnq(bcx->setimps,(dvoid *)si);
  }
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;

}

void ORA_CORBA_BOA_set_state(CORBA_BOA boa, CORBA_Environment *ev,
                             CORBA_Object obj, void *state)
{
  ysmCheck((dvoid *)boa,yoTagBoa);

  yseTry
    yoSetState(obj,state);
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;

}

void *ORA_CORBA_BOA_get_state(CORBA_BOA boa, CORBA_Environment *ev,
                             CORBA_Object obj)
{
  void *noreg state;

  NOREG(state);
  state = (void *) 0;

  ysmCheck((dvoid *)boa,yoTagBoa);

  yseTry
    state = yoGetState(obj);
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;


  return state;
}

void *ORA_CORBA_BOA_get_impl_state(CORBA_BOA boa, CORBA_Environment *ev,
                                   CORBA_Object obj)
{
  void *noreg state;

  NOREG(state);
  state = (void *) state;

  ysmCheck((dvoid *)boa,yoTagBoa);

  yseTry
    state = yoGetImplState(obj);
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;


  return state;
}

void ORA_CORBA_BOA_service(CORBA_BOA boa, CORBA_Environment *ev)
{
  ysmCheck((dvoid *)boa,yoTagBoa);

  yseTry
    yoService((ysque *)0);
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;
}

void ORA_CORBA_BOA_shutdown(CORBA_BOA boa, CORBA_Environment *ev)
{
  ysmCheck((dvoid *)boa,yoTagBoa);

  yseTry
    yoShutdown((ysque *)0);
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;
}

void ORA_CORBA_BOA_free_id(CORBA_BOA boa, CORBA_Environment *ev,
                           CORBA_ReferenceData *id)
{
  ysmCheck((dvoid *)boa,yoTagBoa);

  yseTry
    yoFreeId(id);
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;
}
