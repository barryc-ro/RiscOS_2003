/* yo/yoorb.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/








#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YOI_ORACLE
#include <yoi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
#ifndef YOORB_ORACLE
#include <yoorb.h>
#endif


static ysidDecl(ORA_CORBA_ORB_intfid) = "IDL:yr/intfdef:1.0";


STATICF void ORA_CORBA_YoExceptionToCorba(CORBA_Environment *cev, ysevt *sem,
                                          CONST yopar *pars);

void CORBA_free(void *storage)
{
  yseTry
    yoFree(storage);
  yseCatchAll
  {
    ;
  }
  yseEnd;
}

CORBA_char *CORBA_exception_id(CORBA_Environment *ev)
{
  return ev->id;
}

void *CORBA_exception_value(CORBA_Environment *ev)
{
  yoany any;

  if(yoEnvGet(ev->yev,"CORBA_EXCEPTION",&any))
    return any._value;

  return (dvoid *) 0;
}

void CORBA_exception_free(CORBA_Environment *ev)
{
  ev->_major = CORBA_NO_EXCEPTION;
  ev->id = (char *)0;
  yoEnvSet(ev->yev,"CORBA_EXCEPTION",(yoany *)0);
}

CORBA_char *CORBA_ORB_object_to_string( CORBA_ORB orb, 
                                       CORBA_Environment *ev, CORBA_Object obj)
{
  char *noreg str;

  NOREG(str);
  str = (char *) 0;

  yseTry
    str = yoRefToStr(obj);
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *) yseExid;
  }
  yseEnd;

  return str;
}

CORBA_Object CORBA_ORB_string_to_object(CORBA_ORB orb, 
                                        CORBA_Environment *ev, char *str)
{
  CORBA_Object noreg obj;

  NOREG(obj);
  obj = (CORBA_Object) 0;

  yseTry
    obj = yoStrToRef(str);
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;

  return obj;
}

CORBA_ImplementationDef CORBA_Object_get_implementation(CORBA_Object obj,
                                                        CORBA_Environment *ev)
{
  CORBA_ImplementationDef noreg impl;

  NOREG(impl);
  impl = (CORBA_ImplementationDef) 0;

  yseTry
    impl = (CORBA_ImplementationDef) yoGetImplementation(obj);
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;

  return impl;
}

CORBA_InterfaceDef CORBA_Object_get_interface(CORBA_Object obj,
                                              CORBA_Environment *ev)
{
  CONST ysid *noreg ifid;
  CORBA_InterfaceDef noreg intf;

  NOREG(ifid);
  NOREG(intf);
  intf = (CORBA_InterfaceDef)0;

  yseTry
  {
    ifid = yoGetInterface(obj);
    intf = ORA_CORBA_IdToIntfDef(ifid, ev);
  }
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;

  return intf;
}

boolean CORBA_Object_is_nil(CORBA_Object obj, 
                           CORBA_Environment *ev)
{
  return (obj == CORBA_OBJECT_NIL);
}

CORBA_Object CORBA_Object_duplicate(CORBA_Object obj, CORBA_Environment *ev)
{
  CORBA_Object noreg dup;

  NOREG(dup);
  dup = (CORBA_Object) 0;

  yseTry
    dup = yoDuplicate(obj);
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;

  return dup;
}

void CORBA_Object_release(CORBA_Object obj, CORBA_Environment *ev)
{
  yseTry
    yoRelease(obj);
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;
}


CORBA_ORB ORA_CORBA_ORB_init(void)
{
  yoInit();
  return (CORBA_ORB) 0;
}

void ORA_CORBA_ORB_term( CORBA_ORB orb)
{
  yoTerm();
}

void *ORA_CORBA_ORB_Alloc( CORBA_ORB orb, 
                          CORBA_Environment *ev, size_t size)
{
  void *noreg ptr = (void *)0;

  NOREG(ptr);

  yseTry
    ptr = yoAlloc(size);
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;

  return ptr;
}

void ORA_CORBA_EnvInit(CORBA_Environment *ev)
{
  ev->_major = CORBA_NO_EXCEPTION;
  ev->id = (char *)0;
  ev->pars = (yopar *)0;

  yseTry
  {
    ev->yev = (yoenv *) ysmGlbAlloc(sizeof(yoenv),"yoenv");
    yoEnvInit(ev->yev);
  }
  yseCatchAll
    ;
  yseEnd;
}

void ORA_CORBA_EnvFree(CORBA_Environment *ev)
{
  yseTry
  {
    yoEnvFree(ev->yev);
    ysmGlbFree(ev->yev);
  }
  yseCatchAll
    ;
  yseEnd;
}

CORBA_Object ORA_CORBA_ORB_bind( CORBA_ORB orb, 
                                CORBA_Environment *ev,
                                CORBA_InterfaceDef intf,
                                CORBA_ImplementationDef impl,
                                CORBA_ReferenceData *id, CORBA_char *ignored)
{
  CORBA_Object noreg ref;
  ysid *ifid;

  NOREG(ref);
  ref = (CORBA_Object) 0;


  yseTry
  {
    ifid = ORA_CORBA_GetIntfId(intf);
    ref = yoBind(ifid,impl,id,ignored);
  }
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;

  return ref;
}



void ORA_CORBA_BuildEnv(CORBA_Environment *cev, yoenv *ev, CONST yopar *pars)
{
  cev->_major = CORBA_NO_EXCEPTION;
  cev->id = (char *)0;
  cev->pars = pars;
  cev->yev = ev;
}

void ORA_CORBA_ExceptionToYo(CORBA_Environment *cev)
{
  yoany any;
  dvoid *obj = (dvoid *) 0;
  size_t objsz = 0;
  size_t dummy;

  if(yoEnvGet(cev->yev,"CORBA_EXCEPTION",&any))
  {
    obj = any._value;
    yotkSizeAlign(any._type, &objsz, &dummy);
    yoEnvSet(cev->yev,"CORBA_EXCEPTION",(yoany *)0);
  }
  yseThrower(cev->id, obj, objsz, __FILE__, __LINE__);
}

void ORA_CORBA_SemSynch(CORBA_Environment *cev, ysevt *sem, CONST yopar *pars,
                        dvoid *arg, size_t argsz)
{
  if(cev->_major == CORBA_NO_EXCEPTION)
  {
    ysSemWait(sem);
    if(ysSemExid(sem))
      ORA_CORBA_YoExceptionToCorba(cev,sem, pars);
    else
      DISCARD memcpy(arg,ysSemArg(sem),argsz);
  }
}

void ORA_CORBA_FilterRun(CORBA_Object obj, CORBA_Environment *cev, sword type,
			 CORBA_char *exid, void *val)
{
  yseTry
  {
    yoFilterRunEx((dvoid *)obj, cev->yev, type, (CONST ysid *)exid, 
		  (dvoid *)val);
  }
  yseCatchAll
  {
    cev->_major = CORBA_SYSTEM_EXCEPTION;
    cev->id = (CORBA_char *)yseExid;
  }
  yseEnd
}

STATICF void ORA_CORBA_YoExceptionToCorba(CORBA_Environment *cev, ysevt *sem,
                                          CONST yopar *pars)
{
  CONST yopar *p;
  CONST char *tkid;
  CONST ysid *exid;
  yoany any;

  exid = ysSemExid(sem);

  for(p = pars; p->mode != YOMODE_INVALID; p++)
    if(p->mode == YOMODE_EXCEPT)
    {
      tkid = yotkGetName(p->tk);
      if(tkid && strcmp(tkid,ysidToStr(exid)) == 0)
        break;
    }
  if(p->mode == YOMODE_EXCEPT)
  {
    any._type = p->tk;
    any._value = ysSemArg(sem);
    cev->_major = CORBA_USER_EXCEPTION;
    cev->id = (CORBA_char *)ysidToStr(exid);
    yoEnvSet(cev->yev,"CORBA_EXCEPTION",&any);
    yotkFreeVal(p->tk,any._value,yoFree);
  }
  else
  {
    cev->_major = CORBA_SYSTEM_EXCEPTION;
    if(ysSemArg(sem))
      cev->id = (CORBA_char *)CORBA_UNKNOWN;
    else
      cev->id = (CORBA_char *)ysidToStr(exid);
  }
}

void ORA_CORBA_SendReq(CONST dvoid *or, CORBA_Environment *cev, CONST char *op,
                       boolean response, ysevt *uevt, sword args,
                       CONST yopar *pars, dvoid **values)
{
  if(cev->_major != CORBA_NO_EXCEPTION)
  {
    yseTry
      ysTrigger(uevt,(ysid *)0,(dvoid *)0,0);
    yseCatchAll
      ;
    yseEnd;
    return;
  }
  yseTry
  {
    yoSendReq(or,cev->yev,op,response,uevt,args,pars,values);
  }
  yseCatchAll
  {
    cev->_major = CORBA_SYSTEM_EXCEPTION;
    cev->id = (CORBA_char *)yseExid;
  }
  yseEnd;
}

ysid *ORA_CORBA_GetIntfId(CORBA_InterfaceDef intf)
{
  yoRefData *refid;
  ysid *id;

  refid = yoGetId(intf);
  id = (ysid *) yoGetStr(yoCtx,(char *)refid->_buffer);
  yoFreeId(refid);

  return id;
}

CORBA_InterfaceDef ORA_CORBA_IdToIntfDef( CONST ysid* intfid, 
                                          CORBA_Environment* ev)
{
  yoRefData refid;
  CORBA_InterfaceDef noreg intf;

  NOREG(intf);
  intf = (CORBA_InterfaceDef) 0;

  yseTry
  {
    refid._length = refid._maximum = strlen(ysidToStr(intfid))+1;
    refid._buffer = (ub1 *) ysidToStr(intfid);
    intf = yoBind(ORA_CORBA_ORB_intfid,(char *)0,&refid,(char *)0);
  }
  yseCatchAll
  {
    ev->_major = CORBA_SYSTEM_EXCEPTION;
    ev->id = (CORBA_char *)yseExid;
  }
  yseEnd;
  return intf;
}
