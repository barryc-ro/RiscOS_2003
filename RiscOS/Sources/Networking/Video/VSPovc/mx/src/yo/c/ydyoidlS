/* yo/ydyoidlS.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif

#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
#include <ydyoidlC.c>

EXTC_START


STATICF void ydyo_imr_addActiveGlobal_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void ydyo_imr_addActiveGlobal_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  (*((struct ydyo_imr__tyimpl*)impldef)->addActiveGlobal)( (ydyo_imr)or, ev,
    (yort_procInfo*)args[0],(ydyo_activeInfoList*)args[1]);
}

STATICF void ydyo_imr_destroyActiveGlobal_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void ydyo_imr_destroyActiveGlobal_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  (*((struct ydyo_imr__tyimpl*)impldef)->destroyActiveGlobal)( (ydyo_imr)or,
     ev,(ydyo_activeInfoList*)args[0]);
}

STATICF void ydyo_imr_destroyYortGlobal_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void ydyo_imr_destroyYortGlobal_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  (*((struct ydyo_imr__tyimpl*)impldef)->destroyYortGlobal)( (ydyo_imr)or, 
    ev,*(yort_proc*)args[0]);
}

STATICF void ydyo_imr_exists_s( dvoid * or, yoenv* ev, dvoid * impldef, 
  dvoid ** args);

STATICF void ydyo_imr_exists_s( dvoid * or, yoenv* ev, dvoid * impldef, 
  dvoid ** args)
{
  *(boolean*)args[0] = (*((struct ydyo_imr__tyimpl*)impldef)->exists)( (
    ydyo_imr)or, ev,*(char**)args[1],*(char**)args[2]);
}

STATICF void ydyo_imr_stake_s( dvoid * or, yoenv* ev, dvoid * impldef, 
  dvoid ** args);

STATICF void ydyo_imr_stake_s( dvoid * or, yoenv* ev, dvoid * impldef, 
  dvoid ** args)
{
  (*((struct ydyo_imr__tyimpl*)impldef)->stake)( (ydyo_imr)or, ev,(
    yort_claim*)args[0],*(yoevt*)args[1]);
}

STATICF void ydyo_imr_abandon_s( dvoid * or, yoenv* ev, dvoid * impldef, 
  dvoid ** args);

STATICF void ydyo_imr_abandon_s( dvoid * or, yoenv* ev, dvoid * impldef, 
  dvoid ** args)
{
  (*((struct ydyo_imr__tyimpl*)impldef)->abandon)( (ydyo_imr)or, ev,(
    yort_claim*)args[0]);
}

STATICF void ydyo_imr_listProperties_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void ydyo_imr_listProperties_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(yostd_stringList*)args[0] = (*((struct ydyo_imr__tyimpl*)impldef)
    ->listProperties)( (ydyo_imr)or, ev,*(char**)args[1]);
}

STATICF void ydyo_imr_propertyResolve_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void ydyo_imr_propertyResolve_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Object*)args[0] = (*((struct ydyo_imr__tyimpl*)impldef)
    ->propertyResolve)( (ydyo_imr)or, ev,*(char**)args[1]);
}

yostub* ydyo_imr__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*8), 
    "yostubs");
  _result->widen = (yowiden)0;
  _result->bases = (const char**)0;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "addActiveGlobal";
  _stubs[0].parms = ydyo_imr_addActiveGlobal_pars;
  _stubs[0].oper = ydyo_imr_addActiveGlobal_s;
  _stubs[1].opernm = "destroyActiveGlobal";
  _stubs[1].parms = ydyo_imr_destroyActiveGlobal_pars;
  _stubs[1].oper = ydyo_imr_destroyActiveGlobal_s;
  _stubs[2].opernm = "destroyYortGlobal";
  _stubs[2].parms = ydyo_imr_destroyYortGlobal_pars;
  _stubs[2].oper = ydyo_imr_destroyYortGlobal_s;
  _stubs[3].opernm = "exists";
  _stubs[3].parms = ydyo_imr_exists_pars;
  _stubs[3].oper = ydyo_imr_exists_s;
  _stubs[4].opernm = "stake";
  _stubs[4].parms = ydyo_imr_stake_pars;
  _stubs[4].oper = ydyo_imr_stake_s;
  _stubs[5].opernm = "abandon";
  _stubs[5].parms = ydyo_imr_abandon_pars;
  _stubs[5].oper = ydyo_imr_abandon_s;
  _stubs[6].opernm = "listProperties";
  _stubs[6].parms = ydyo_imr_listProperties_pars;
  _stubs[6].oper = ydyo_imr_listProperties_s;
  _stubs[7].opernm = "propertyResolve";
  _stubs[7].parms = ydyo_imr_propertyResolve_pars;
  _stubs[7].oper = ydyo_imr_propertyResolve_s;
  _stubs[8].opernm = (CONST char*)0;
  _stubs[8].parms = (yopar*)0;
  _stubs[8].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}


EXTC_END
