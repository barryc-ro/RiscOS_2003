/* mx/src/ys/ystm.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YSI_ORACLE
#include <ysi.h>
#endif
#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif

#define YSTM_INTERVAL   50000000      

STATICF char *ysStrFrac(char *frac, ub4 usec, sword fraction);


void ystmInit(ysctx *ctx)
{
  sysb8 interval;

  
  ctx->last = systmGetTicks();
  sysb8set(&ctx->ticks, sysb8zero);

  
  sysb8set(&ctx->start, sysb8zero);
  DISCARD systmGetClock(&ctx->start);
  sysb8mulb4(&ctx->start, &ctx->start, (sb4) 1000000);

  
  sysb8ext(&interval, YSTM_INTERVAL);
  ysTimer(&interval, ysEvtSimple(ystmIdler, (dvoid *) 0));
}



void ystmIdler(dvoid *usrp, CONST ysid *exid, dvoid *arg, size_t argsz)
{
  sysb8 tmp, interval;

  if (ysidEq(exid, YS_EX_SHUTDOWN))
    return;

  
  ysClock(&tmp);

  
  sysb8ext(&interval, YSTM_INTERVAL);
  ysTimer(&interval, ysEvtSimple(ystmIdler, (dvoid *) 0));
}


void ysClock(sysb8 *clk)
{
  ysctx *ctx;
  ub4    cur, diff;

  ctx = (ysctx *) yscGet(YSC_YSCTX);

  
  cur = systmGetTicks();

  
  diff = cur - ctx->last;

  
  if ((diff & 0x80000000) != 0 || diff > 2 * (YSTM_INTERVAL))
    diff = 1000;

  
  ctx->last = cur;

  
  sysb8addb4(&ctx->ticks, &ctx->ticks, (sb4) diff);

  
  sysb8add(clk, &ctx->ticks, &ctx->start);
}


void ysConvClock(sysb8 *clk, ystm *sttm)
{
  sysb8 secs, tmp, rm;

  sysb8ext(&tmp, 1000000);
  sysb8edv(clk, &tmp, &secs, &rm);
  systmClockToTime(&secs, sttm);
  sttm->usec = ((ub4) sysb8msk(&rm));
  sttm->sign = TRUE;
}


void ysConvDelta(sysb8 *clk, ystm *sttm)
{
  sysb8 val, tmp, rm;

  
  if (sttm->sign = sysb8cmp(clk, >=, sysb8zero))
    sysb8set(&val, clk);
  else
    sysb8neg(&val, clk);

  
  sysb8ext(&tmp, 1000000);
  sysb8edv(&val, &tmp, &val, &rm);
  sttm->usec = ((ub4) sysb8msk(&rm));

  sysb8ext(&tmp, 60);
  sysb8edv(&val, &tmp, &val, &rm);
  sttm->sec = (sword) sysb8msk(&rm);

  sysb8ext(&tmp, 60);
  sysb8edv(&val, &tmp, &val, &rm);
  sttm->min = (sword) sysb8msk(&rm);

  sysb8ext(&tmp, 24);
  sysb8edv(&val, &tmp, &val, &rm);
  sttm->hour = (sword) sysb8msk(&rm);

  sttm->mday = (sword) sysb8msk(&val);

  sttm->mon = 0;
  sttm->year = 0;
}


static CONST_DATA char ystmMon[] = "JanFebMarAprMayJunJulAugSepOctNovDec";

char *ysStrClock(char *buf, ystm *sttm, boolean year, sword fraction)
{
  char yr[16], frac[16];

  
  if (year)
    ysFmtStr(yr, " %d", sttm->year);
  else
    yr[0] = '\0';

  ysFmtStr(buf, "%.3s %2d %02d:%02d:%02d%s%s", ystmMon + (sttm->mon - 1) * 3,
	   sttm->mday, sttm->hour, sttm->min, sttm->sec, 
	   ysStrFrac(frac, sttm->usec, fraction), yr);
  return buf;
}


char *ysStrDelta(char *buf, ystm *sttm, sword fraction)
{
  char frac[16];

  ysFmtStr(buf, "%c%04d %02d:%02d:%02d%s",
	   (sttm->sign ? ' ' : '-'), sttm->mday, sttm->hour, sttm->min,
	   sttm->sec, ysStrFrac(frac, sttm->usec, fraction));
  return buf;
}


STATICF char *ysStrFrac(char *frac, ub4 usec, sword fraction)
{
  if (fraction < 0)
    fraction = 0;
  if (fraction > 6)
    fraction = 6;

  if (fraction)
    {
      ysFmtStr(frac, ".%06d", usec);
      frac[fraction+1] = '\0';
    }
  else
    frac[0] = '\0';

  return frac;
}
