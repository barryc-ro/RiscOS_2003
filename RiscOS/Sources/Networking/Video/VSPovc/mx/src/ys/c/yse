/* mx/src/ys/yse.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSI_ORACLE
#include <ysi.h>
#endif

static ysidDecl(YS_EX_BADFRAME) = "ys::badframe";
static ysmtagDecl(YSEFR_TAG) = "ysefr";


ysepf yseSetPanic(ysepf pfunc, dvoid *ptr)
{
  ysepf  old;
  ysctx *ctx;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  old = ctx->pfunc;
  ctx->pfunc = pfunc;
  ctx->pfptr = ptr;
  return old;
}


void ysePanic(CONST ysid *exid)
{
  ysctx  *ctx;
  dvoid **ptrs;
  CONST char   *host, *pid, *prognm;

  ptrs = (dvoid **) syscGetPG();
  if (ptrs)
    {
      ctx = (ysctx *) yscGet(YSC_YSCTX);
      if (ctx->pfunc)
	(*ctx->pfunc)(exid, ctx->pfptr);
    }

  if (ptrs && ctx && ctx->rdb)
    {
      host = ysGetHostName();
      pid = ysGetPid();
      prognm = ysProgName();

      yslError("YS PANIC: %s host=%s, pid=%s, prognm=%s", ysidToStr(exid),
	       (host ? host : "<no host>"),
	       (pid ? pid : "<no pid>"),
	       (prognm ? prognm : "<no program name>"));
    }
  else
    yslError("YS PANIC: %s (during initialization)", ysidToStr(exid));
#if 0
  sysePanic();
#else
  ovcabort();
#endif
}


void yseInf(ysefr *fr)
{
  ysthrkey *errkey;

  fr->id = (CONST ysid *) 0;
  fr->obj = (dvoid *) 0;
  fr->liv = fr->rth = FALSE;

  
  errkey = ((ysctx *) yscGet(YSC_YSCTX))->errkey;
  fr->prev = (ysefr *) ysThrKeySet(errkey, (dvoid *) fr);
}


void yseTrf(ysefr *fr)
{
  ysefr    *curfr;
  ysthrkey *errkey;

  
  if (fr->rth)
    yseRethrower(fr);

  if (fr->obj)
    ysmGlbFree(fr->obj);

  
  errkey = ((ysctx *) yscGet(YSC_YSCTX))->errkey;
  curfr = (ysefr *) ysThrKeySet(errkey, (dvoid *) fr->prev);

  
  if (curfr != fr)
    ysePanic(YS_EX_BADFRAME);
}


void yseThrower(CONST ysid *exid, dvoid *obj, size_t objsz,
		CONST char *fn, sword lineno)
{
  ysthrkey *errkey;
  ysefr    *fr;

  errkey = ((ysctx *) yscGet(YSC_YSCTX))->errkey;
  fr = (ysefr *) ysThrKeyGet(errkey);
  if (!fr)
    {
      yslError("UNHANDLED EXCEPTION: fn=%s, line=%d\n", fn, lineno);
      ysePanic(exid);
    }

  
  while (fr->liv)
    {
      if (fr->obj)
	ysmGlbFree(fr->obj);
      DISCARD ysThrKeySet(errkey, (dvoid *) fr->prev);
      fr = fr->prev;
      if (!fr)
	{
	  yslError("UNHANDLED EXCEPTION: fn=%s, line=%d\n", fn, lineno);
	  ysePanic(exid);
	}
    }

  
  fr->id = exid;
  if (objsz)
    {
      fr->obj = ysmGlbAlloc(objsz, YSEFR_TAG);
      DISCARD memcpy(fr->obj, obj, objsz);
    }
  fr->rth = fr->liv = TRUE;
  fr->fn = fn;
  fr->lineno = lineno;
  syseJmp(fr->jb, ~0);
}


void yseRethrower(ysefr *fr)
{
  ysthrkey   *errkey;
  ysefr      *prevfr;
  CONST ysid *id;

  
  prevfr = fr->prev;
  while (prevfr && prevfr->liv)
    prevfr = prevfr->prev;

  if (prevfr)
    {
      prevfr->obj = fr->obj;
      fr->obj = (dvoid *) 0;
    }

  id = fr->id;

  errkey = ((ysctx *) yscGet(YSC_YSCTX))->errkey;
  DISCARD ysThrKeySet(errkey, (dvoid *) fr->prev);

  
  yseThrower(id, (dvoid *) 0, (size_t) 0, fr->fn, fr->lineno);
}

void yseSetObj(ysefr *fr, dvoid *obj, size_t objsz)
{
  DISCARD memcpy(obj, fr->obj, min(objsz, ysmGetSize(fr->obj)));
}
