/* Copyright (c) 1995, 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * sysi.c - OMN system-dependent implementation
 *
 * DESCRIPTION
 * When planning the OSD implementation for Media Net, some consideration
 * should be given ahead of time to how to the process is going to detect
 * and wait for external events.  An external event is something like a
 * user-defined interrupt (e.g. SIGINT, SIGTERM), or inbound data (whether
 * network I/O or keyboard I/O).
 *
 * External events may be posted to OMN through one of two asynchronously
 * callable routines:  ysIntr() and ytnPush().  ysIntr() is used to report
 * user-defined interrupts.  ytnPush() is used to deliver inbound network
 * data.  It is not necessary to call either of these two routines.
 * Especially in the case of a network driver, ytnPush() need only be used
 * when a network driver either does not or cannot buffer inbound data.
 * Whether or not you use ytnPush() asynchronously will largely depend on
 * whether it is more efficient for your O/S to deliver asynchronous
 * notification or respond to periodic polling.  If only or the other is
 * possible, this will dictate the decision for you.  In any case, the
 * mechanics of the network driver(s) for the platform should be decided
 * upon first.  Then, the routines in here, sysiDisable(), sysiEnable(),
 * sysiPause(), and syslGetc() can be written in conjunction with that
 * decision to achieve correct behavior.
 *
 * The routine sysiDisable() is used to notify the OSD layer that these
 * asynchronous callbacks should be temporarily delayed.  They may be
 * delivered once sysiEnable() is called.
 *
 * The OSD layer is asked to wait for an event is two ways:  sysiPause()
 * and syslGetc().
 *
 * sysiPause() is asked to block the process until a certain amount of
 * time elapses OR an external event occurs.  Ideally, sysiPause() returns
 * sooner if an external event occurs, possibly immediately.  sysiPause()
 * may be called in between a sysiDisable()/sysiEnable() pair, in which
 * case it should be prepare to deliver any pending asynchronous callbacks
 * immediately and then return.
 *
 * syslGetc() is basically a superset of sysiPause() that needs to be able
 * to detect keyboard I/O as well.  (Keyboard I/O should otherwise be
 * ignored).
 *
 * IMPLEMENTATION NOTES
 * This implementation is written assuming that the operating system will
 * not deliver asynchronous notification for all low-level events.  This
 * was done primarily to demonstrate how an implementation might work where
 * some combination of polling and self-managed critical regions is necessary.
 * It happens that Solaris is one of the few platforms where all low-level
 * events can be made to cause signals to be delivered, but this is a rarity
 * and so we demonstrate the more common, but slightly more complex case
 * where this is not possible.
 *
 * (We also note that extra care would need to be taken if this were running
 * in a threaded environment since external signals like the ones we are
 * concerned with here get delivered to what is essentially an arbitrary
 * process, and it takes a lot of work to control that.)
 *
 * In this implementation, we never mask out O/S signals.  Also, since we
 * don't ytnPush() asynchronously, sysiDisable() only blocks out the
 * delivery of interrupt and termination notification.  sysiPause()
 * implements its blocking using the poll() mechanism, which means that
 * all network drivers must register their open file descriptors to be
 * considered.  This is done through the two routines:  ssysAddFd() and
 * ssysRemFd().
 *
 * The first half of this file contains routines that are affected by
 * these decisions.  The second half of this file contains the miscellaneous
 * routines that are not affected by these decisions.
 */

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

#ifdef RISCOS
#include <time.h>
#include <limits.h>
#include <kernel.h>
#include <swis.h>

/*
 * sysiInit - OSD layer initialization
 */
boolean sysiInit(dvoid *osdp)
{
  return TRUE;
}

/*
 * sysiTerm - OSD layer termination
 */
void sysiTerm(dvoid *osdp)
{
  return;
}

/*
 * syslGetc - get a character from the console
 */
boolean syslGetc(dvoid *osdp, sword *ch, ub4 delay)
{
  *ch = '\0';
  sysiPause(osdp, sysiNoMask, delay);
  return FALSE;
}

sysimsk sysiNoMask;

sysimsk sysiDisable(dvoid *osdp)
{
  return (sysimsk)0;
}

void sysiEnable(dvoid *osdp, sysimsk mask)
{
    return;
}

#ifndef SYSTEM
void ovcabort(void)
{
    return;
}
#endif

/*
 * sysiPause - pause for a number of microseconds, or until nio input
 */
void sysiPause(dvoid *osdp, sysimsk mask, ub4 delay)
{
    extern int pollnio(void);
    _kernel_swi_regs regs;
    unsigned int interval = 0;
    unsigned int start_time, cdelay;

    if (delay == 0)
        return;
    _kernel_swi(OS_ReadMonotonicTime, &regs, &regs);
    start_time = regs.r[0];
    cdelay = delay / 10000;
    while(interval < cdelay) {
#ifdef SYSTEM         
        user_mode_donothing();
        if (pollnio() > 0) {
            break;
        }
#endif
        _kernel_swi(OS_ReadMonotonicTime, &regs, &regs);
        interval = regs.r[0] - start_time;
    }
}

/*
 * syscPG - process-wide global pointer
 */
externdef dvoid *syscPG;
dvoid *syscGetPG(void)
{
  return(syscPG);
}

void   syscSetPG(dvoid *ptr)
{
  syscPG = ptr;
}

/*
 * sysmInit - memory initialization
 */
boolean sysmInit(dvoid *osdp, ysmaf *afp, ysmrf *rfp, ysmff *ffp,
                 ysbv **bv, sword *nbv)
{
  *afp = (ysmaf) malloc;
  *rfp = (ysmrf) realloc;
  *ffp = (ysmff) free;

  *bv = (ysbv *) 0;
  *nbv = 0;
  return TRUE;
}

/*
 * syspGetCpuTime - get CPU usage
 */
boolean syspGetCpuTime(dvoid *osdp, sysb8 *cputm)
{
  sysb8ext(cputm,clock());                      /* clock() returns time in centiseconds since program start */
  sysb8mulb4(cputm, cputm, 1000000/CLK_TCK);    /* convert to microseconds */
  return TRUE;
}

/*
 * syspGetMemUsage - get memory usage
 */
boolean syspGetMemUsage(dvoid *osdp, ub4 *kbytes)
{
  return FALSE;
}

/*
 * syslConsole - print/log a message to the console
 */
void syslConsole(sword level, const char *fmt, va_list ap)
{
  return;
}

/*
 * systmGetClock - return time of day
 */
boolean systmGetClock(sysb8 *clock)
{
  sysb8ext(clock, (time((time_t *) 0)));
  return TRUE;
}

/*
 * systmClockToTime - convert clock value to structured form
 */
void systmClockToTime(sysb8 *clock, ystm *tm)
{
  struct tm *local;
  time_t     tpsec;

  tpsec = (time_t) sysb8msk(clock);
  local = localtime(&tpsec);

  tm->sec = local->tm_sec;
  tm->min = local->tm_min;
  tm->hour = local->tm_hour;
  tm->mday = local->tm_mday;
  tm->mon = local->tm_mon + 1;
  tm->year = local->tm_year + 1900;
}

#endif

