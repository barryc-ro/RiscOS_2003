/* mx/src/ys/yslst.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YSLST_ORACLE
#include <yslst.h>
#endif


static ysmtagDecl(YSLST_TAG) = "yslst";
#define YSLST_AVGDEN  10    


yslst *ysLstCreate(void)
{
  yslst *l;

  l = (yslst *) ysmGlbAlloc(sizeof(yslst), YSLST_TAG);
  l->head = l->tail = (ysle *) 0;
  l->cnt = (ub4) 0;
  l->osz = (size_t) 0;
  ysFOCreate(&l->fop, sizeof(ysle), ysmGlbHeap(), "list elems");
  l->mtcon = FALSE;
  DISCARD memset(&l->metrics, 0, sizeof(l->metrics));
  return l;
}


yslst *ysDLstCreate(size_t osz)
{
  yslst *l;

  l = (yslst *) ysmGlbAlloc(sizeof(yslst), YSLST_TAG);
  l->head = l->tail = (ysle *) 0;
  l->cnt = (ub4) 0;
  l->osz = osz;
  ysFOCreate(&l->fop, offsetof(ysle, ptr) + osz, ysmGlbHeap(), "list elems");
  l->mtcon = FALSE;
  DISCARD memset(&l->metrics, 0, sizeof(l->metrics));
  return l;
}


void ysLstDestroy(yslst *l, ysmff destructor)
{
  ysle  *e;

  ysmCheck((dvoid *) l, YSLST_TAG);

  if (destructor)
    for (e = l->head; e; e = e->next)
      (*destructor)(e->ptr);
  ysFODestroy(&l->fop);

  ysmGlbFree((dvoid *) l);
}


ysle *ysLstIns(yslst *l, ysle *le, dvoid *val)
{
  ysle  *nle;
  sb4    delta;

  ysmCheck((dvoid *) l, YSLST_TAG);
  nle = (ysle *) ysFOAlloc(&l->fop);
  if (l->osz)
    DISCARD memcpy((dvoid *) &nle->ptr, val, l->osz);
  else
    nle->ptr = val;

  if (le)
    {
      
      nle->next = le->next;
      nle->prev = le;

      if (le->next)
	le->next->prev = nle;
      else
	l->tail = nle;

      le->next = nle;
    }
  else
    {
      
      nle->next = l->head;
      nle->prev = (ysle *) 0;

      if (l->head)
	l->head->prev = nle;
      else
	l->tail = nle;

      l->head = nle;
    }

  l->cnt++;

  
  if (l->mtcon)
    {
      
      l->metrics.totins++;
      if (l->cnt > l->metrics.maxlen)
	l->metrics.maxlen = l->cnt;
      
      
      delta = (sb4) (l->cnt) - (sb4) (l->metrics.avglen >> YSLST_AVGDEN);
      l->metrics.avglen = (ub4) ((sb4) l->metrics.avglen + delta);

      
      ysClock(&nle->enqtm);
    }

  return nle;
}


dvoid *ysLstRem(yslst *l, ysle *le)
{
  dvoid *val;
  sb4    delta;
  sysb8  now, enqtm, deltm;

  
  ysmCheck((dvoid *) l, YSLST_TAG);
  if (!le)
    return (dvoid *) 0;

  val = le->ptr;

  
  if (le->prev)
    le->prev->next = le->next;
  else
    l->head = le->next;

  if (le->next)
    le->next->prev = le->prev;
  else
    l->tail = le->prev;

  l->cnt--;

  
  if (l->mtcon)
    {
      
      delta = (sb4) (l->cnt) - (sb4) (l->metrics.avglen >> YSLST_AVGDEN);
      l->metrics.avglen = (ub4) ((sb4) l->metrics.avglen + delta);

      
      ysClock(&now);
      sysb8sub(&enqtm, &now, &le->enqtm);

      if (sysb8cmp(&enqtm, >, &l->metrics.maxtm))
	sysb8set(&l->metrics.maxtm, &enqtm);

      sysb8srl(&deltm, &l->metrics.avgtm, YSLST_AVGDEN);
      sysb8sub(&deltm, &enqtm, &deltm);
      sysb8add(&l->metrics.avgtm, &l->metrics.avgtm, &deltm);
    }

  
  ysFOFree(&l->fop, (dvoid *) le);
  return val;
}


dvoid *ysDLstRem(yslst *l, ysle *le, dvoid *val)
{
  if (le)
    {
      if (val)
	DISCARD memcpy(val, (dvoid *) &le->ptr, l->osz);
      DISCARD ysLstRem(l, le);
      return val;
    }
  else
    return (dvoid *) 0;
}


void ysLstMov(yslst *l, ysle *sle, ysle *dle)
{
  ysmCheck(l, YSLST_TAG);

  
  if (sle->prev)
    sle->prev->next = sle->next;
  else
    l->head = sle->next;

  if (sle->next)
    sle->next->prev = sle->prev;
  else
    l->tail = sle->prev;

  
  if (dle)
    {
      
      sle->next = dle->next;
      sle->prev = dle;

      if (dle->next)
	dle->next->prev = sle;
      else
	l->tail = sle;

      dle->next = sle;
    }
  else
    {
      
      sle->next = l->head;
      sle->prev = (ysle *) 0;

      if (l->head)
	l->head->prev = sle;
      else
	l->tail = sle;

      l->head = sle;
    }
}


void ysLstMetricsOn(yslst *l)
{
  DISCARD memset(&l->metrics, 0, sizeof(yslmtc));
  l->metrics.maxlen = l->cnt;
  l->metrics.avglen = l->cnt << YSLST_AVGDEN;
  l->mtcon = TRUE;
}


void ysLstMetricsOff(yslst *l)
{
  l->mtcon = FALSE;
}


void ysLstGetMetrics(yslst *l, yslmtc *metrics)
{
  if (!l->mtcon)
    yseThrow(YS_EX_BADPARAM);

  l->metrics.curlen = l->cnt;
  DISCARD memcpy(metrics, &l->metrics, sizeof(yslmtc));
  metrics->avglen = metrics->avglen / (1 << YSLST_AVGDEN);
  sysb8srl(&metrics->avgtm, &metrics->avgtm, YSLST_AVGDEN);
}


void ysLstGetCurTime(yslst *l, ysle *le, sysb8 *delta)
{
  sysb8 now;

  if (!l->mtcon)
    yseThrow(YS_EX_BADPARAM);

  ysClock(&now);

  sysb8sub(delta, &now, &le->enqtm);
}
