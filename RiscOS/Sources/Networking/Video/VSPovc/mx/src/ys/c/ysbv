/* mx/src/ys/ysbv.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif


ub4 ysBvScatter(ub1 *buf, size_t len, ysbv *bv, sword nbv)
{
  size_t total, xlen;

  total = len;
  while (nbv && total)
    {
      xlen = min(total, bv->len);
      DISCARD memcpy(bv->buf, buf, xlen);
      nbv--, bv++, buf += xlen, total -= xlen;
    }
  return (len - total);
}


ub4 ysBvGather(ub1 *buf, size_t len, ysbv *bv, sword nbv)
{
  size_t total, xlen;

  total = len;
  while (nbv && total)
    {
      xlen = min(total, bv->len);
      DISCARD memcpy(buf, bv->buf, xlen);
      nbv--, bv++, buf += xlen, total -= xlen;
    }
  return (len - total);
}


ub4 ysBvCopy(ysbv *dst, sword dstnbv, ysbv *src, sword srcnbv)
{
  ub4    total;
  size_t xlen;
  ysbv   dstbv, srcbv;

  total = (ub4) 0;
  if (dstnbv && srcnbv)
    {
      CPSTRUCT(dstbv, *dst);
      CPSTRUCT(srcbv, *src);

      do
	{
	  xlen = min(dstbv.len, srcbv.len);
	  DISCARD memcpy(dstbv.buf, srcbv.buf, xlen);

	  dstbv.len -= xlen, srcbv.len -= xlen, total += xlen;

	  if (dstbv.len == 0)
	    {
	      dst++, dstnbv--;
	      if (dstnbv)
		CPSTRUCT(dstbv, *dst);
	    }
	  else
	    dstbv.buf += xlen;

	  if (srcbv.len == 0)
	    {
	      src++, srcnbv--;
	      if (srcnbv)
		CPSTRUCT(srcbv, *src);
	    }
	  else
	    srcbv.buf += xlen;
	} while (dstnbv && srcnbv);
    }

  return total;
}



void ysBvFree(ysmhp *hp, ysbv *bv, sword nbv)
{
  ysbv *scb;

  for (scb = bv; nbv; nbv--, scb++)
    ysmFree(hp, (dvoid *) scb->buf);
  ysmFree(hp, (dvoid *) bv);
}
