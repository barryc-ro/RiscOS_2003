/* mx/src/ys/yssp.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/







#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

#ifndef YSSP_ORACLE
#include <yssp.h>
#endif



typedef struct
{
  ysspNode  node_ysspn;		
  dvoid	    *val_ysspn;
} ysspn;

externdef ysmtagDecl(ysspTreeTag) = "ysspTreeTag";
externdef ysmtagDecl(ysspnTag) = "ysspnTag";






ysspTree *ysSpCreate( ysspCmpFunc cmpfunc, ysmff delfunc)
{
  ysspTree *t = (ysspTree*)ysmGlbAlloc( sizeof(*t), ysspTreeTag );

  DISCARD ysspNewTree( t, cmpfunc );
  t->delfunc_ysspTree = delfunc;
  return t;
}

void      ysSpDestroy(ysspTree *t)
{
  ysspn *spn;

  ysmCheck( (dvoid *)t, ysspTreeTag );
  for( spn = (ysspn*)ysspDeq( &t->root_ysspTree ); spn ; )
  {
    ysmCheck( (dvoid *)spn, ysspnTag );
    if( t->delfunc_ysspTree )
      (*t->delfunc_ysspTree)(spn->val_ysspn);
    ysmGlbFree( (dvoid*)spn );
  }
  ysmGlbFree( (dvoid*)t ); 
}

void	 ysSpIns(ysspTree *t, dvoid *key, size_t keysz, dvoid *val)
{
  dvoid	    *space;
  char	    *s;
  ysspn	    *spn;

  ysmCheck( (dvoid *)t, ysspTreeTag );
  space = ysmGlbAlloc( sizeof(*spn) + keysz, ysspnTag );
  s = (char *)space;
  spn = (ysspn *)space;
  spn->node_ysspn.key_ysspNode = (dvoid*)(s + sizeof(*spn)); 
  spn->val_ysspn = val;
  DISCARD memcpy( spn->node_ysspn.key_ysspNode, key, keysz );
  DISCARD ysspEnq( &spn->node_ysspn, t );
}


dvoid    *ysSpRem(ysspTree *t, dvoid *key, size_t keysz)
{
  ysspn *spn;
  dvoid	*rv = (dvoid*)0;

  ysmCheck( (dvoid *)t, ysspTreeTag );
  if( ( spn = (ysspn*)ysspLookup( key, t ) ) )
  {
    ysmCheck( (dvoid *)spn, ysspnTag );
    rv = spn->val_ysspn;
    ysspRemove( &spn->node_ysspn, t );
    ysmGlbFree( (dvoid*)spn );
  }
  return( rv );
}


dvoid    *ysSpFind(ysspTree *t, dvoid *key, size_t keysz)
{
  ysspn *spn;

  ysmCheck( (dvoid *)t, ysspTreeTag );
  if( ( spn = (ysspn *)ysspLookup( key, t ) ) )
  {
    ysmCheck( (dvoid *)spn, ysspnTag );
    return( spn->val_ysspn );
  }
  return( (dvoid*)0 ); 
}



ysspTree *ysspNewTree( ysspTree *t, ysspCmpFunc cmp )
{
  t->cmp_ysspTree = cmp;
  t->root_ysspTree = (ysspNode *)NULL;
  return( t );
}

ysspNode *ysspLookup( CONST dvoid *key, ysspTree *t )
{
  ysspNode *n;
  sword cmpval = 0;		
  ysspCmpFunc cmp;

  
  cmp = t->cmp_ysspTree;
  n = t->root_ysspTree;
  while( n && (cmpval = (*cmp)( key, n->key_ysspNode ) ) )
    n = ( cmpval < 0 ) ? n->left_ysspNode : n->right_ysspNode;

  
  if( n )
    ysspSplay( n, t );

  return( n );
}


ysspNode *ysspFirstLookup( CONST dvoid *key, ysspTree *t )
{
  ysspNode *n, *pn;

  
  for( n = ysspLookup( key, t ); (pn = ysspFPrev(n)) ; n = pn )
    if( (*t->cmp_ysspTree)((dvoid*)n, (dvoid*)pn) )
      break;

  if( n )
    ysspSplay( n, t );
  return( n );
}


ysspNode *ysspPELookup( CONST dvoid *key, ysspTree *t )
{
  ysspNode	*p = 0;		
  ysspNode	*n;		
  sword		cmpval = 0;
  ysspCmpFunc	cmp;

  
  n = t->root_ysspTree;
  cmp = t->cmp_ysspTree;

  while( n && (cmpval = (*cmp)( key, n->key_ysspNode ) ) )
  {
    p = n;
    n = ( cmpval < 0 ) ? n->left_ysspNode : n->right_ysspNode;
  }

  if( n && !cmpval )
    p = n;
  else if( !n )
    n = cmpval > 0 ? p : p ? ysspFPrev(p) : p;
  
  if( n )
    ysspSplay( n, t );

  return( n );
}


ysspNode *ysspNextLookup( CONST dvoid *key, ysspTree *t )
{
  ysspNode *n;
  
  if( (n = ysspPELookup( key, t )) )
    n = ysspFNext( n );
  else				
    n = ysspFHead( t );

  return( n );
}


ysspNode *ysspEnq( ysspNode *n, ysspTree *t )
{
  ysspNode *left;		
  ysspNode *right;		
  ysspNode *next;		
  ysspNode *temp;

  dvoid *key;
  ysspCmpFunc cmp;

  cmp = t->cmp_ysspTree;
  n->up_ysspNode = (ysspNode *)NULL;
  next = t->root_ysspTree;
  t->root_ysspTree = n;
  if( !next )			
  {
    n->left_ysspNode = (ysspNode *)NULL;
    n->right_ysspNode = (ysspNode *)NULL;
  }
  else				
  {
    key = n->key_ysspNode;
    left = n;
    right = n;

    

    if ( (*cmp)( next->key_ysspNode, key ) > 0 )
      goto two;

  one:				

    do				
    {
      temp = next->right_ysspNode;
      if( !temp )
      {
	left->right_ysspNode = next;
	next->up_ysspNode = left;
	right->left_ysspNode = (ysspNode *)NULL;
	goto done;		
      }

      if( (*cmp)( temp->key_ysspNode, key ) > 0 )
      {
	left->right_ysspNode = next;
	next->up_ysspNode = left;
	left = next;
	next = temp;
	goto two;		
      }

      next->right_ysspNode = temp->left_ysspNode;
      if( temp->left_ysspNode )
	temp->left_ysspNode->up_ysspNode = next;
      left->right_ysspNode = temp;
      temp->up_ysspNode = left;
      temp->left_ysspNode = next;
      next->up_ysspNode = temp;
      left = temp;
      next = temp->right_ysspNode;
      if( !next )
      {
	right->left_ysspNode = (ysspNode *)NULL;
	goto done;		
      }

    } while( (*cmp)( next->key_ysspNode, key ) <= 0 ); 

  two:				

    do				
    {
      temp = next->left_ysspNode;
      if( !temp )
      {
	right->left_ysspNode = next;
	next->up_ysspNode = right;
	left->right_ysspNode = (ysspNode *)NULL;
	goto done;		
      }

      if( (*cmp)( temp->key_ysspNode, key ) <= 0 )
      {
	right->left_ysspNode = next;
	next->up_ysspNode = right;
	right = next;
	next = temp;
	goto one;		
      }
      next->left_ysspNode = temp->right_ysspNode;
      if( temp->right_ysspNode )
	temp->right_ysspNode->up_ysspNode = next;
      right->left_ysspNode = temp;
      temp->up_ysspNode = right;
      temp->right_ysspNode = next;
      next->up_ysspNode = temp;
      right = temp;
      next = temp->left_ysspNode;
      if( !next )
      {
	left->right_ysspNode = (ysspNode *)NULL;
	goto done;		
      }

    } while( (*cmp)( next->key_ysspNode, key ) > 0 ); 

    goto one;

  done:		

    temp = n->left_ysspNode;
    n->left_ysspNode = n->right_ysspNode;
    n->right_ysspNode = temp;
  }
  return( n );
}

ysspNode *ysspEnqAfter( ysspNode *newnd, ysspNode *old, ysspTree *t )
{
  ysspSplay( old, t );
  newnd->key_ysspNode = old->key_ysspNode;
  newnd->right_ysspNode = old->right_ysspNode;
  if( newnd->right_ysspNode )
    newnd->right_ysspNode->up_ysspNode = newnd;
  newnd->left_ysspNode = (ysspNode*)0;
  newnd->up_ysspNode = old;
  old->right_ysspNode = newnd;

  return( newnd );
}


void ysspSplay( ysspNode *n, ysspTree *t )
{
  ysspNode *up;		
  ysspNode *prev;		
  ysspNode *upup;		
  ysspNode *upupup;		
  ysspNode *left;		
  ysspNode *right;		

  left = n->left_ysspNode;
  right = n->right_ysspNode;
  prev = n;
  up = prev->up_ysspNode;

  while( up )
  {
    

    upup = up->up_ysspNode;
    if( up->left_ysspNode == prev ) 
    {
      if( upup && upup->left_ysspNode == up )
      {
	upupup = upup->up_ysspNode;
	upup->left_ysspNode = up->right_ysspNode;
	if( upup->left_ysspNode )
	  upup->left_ysspNode->up_ysspNode = upup;
	up->right_ysspNode = upup;
	upup->up_ysspNode = up;
	if( !upupup )
	  t->root_ysspTree = up;
	else if( upupup->left_ysspNode == upup )
	  upupup->left_ysspNode = up;
	else
	  upupup->right_ysspNode = up;
	up->up_ysspNode = upupup;
	upup = upupup;
      }
      up->left_ysspNode = right;
      if( right )
	right->up_ysspNode = up;
      right = up;

    }
    else			
    {
      if( upup && upup->right_ysspNode == up )
      {
	upupup = upup->up_ysspNode;
	upup->right_ysspNode = up->left_ysspNode;
	if( upup->right_ysspNode )
	  upup->right_ysspNode->up_ysspNode = upup;
	up->left_ysspNode = upup;
	upup->up_ysspNode = up;
	if( !upupup )
	  t->root_ysspTree = up;
	else if( upupup->right_ysspNode == upup )
	  upupup->right_ysspNode = up;
	else
	  upupup->left_ysspNode = up;
	up->up_ysspNode = upupup;
	upup = upupup;
      }
      up->right_ysspNode = left;
      if( left )
	left->up_ysspNode = up;
      left = up;
    }
    prev = up;
    up = upup;
  }

  

  n->left_ysspNode = left;
  n->right_ysspNode = right;
  if( left )
    left->up_ysspNode = n;
  if( right )
    right->up_ysspNode = n;
  t->root_ysspTree = n;
  n->up_ysspNode = (ysspNode*)NULL;

}

void ysspRemove( ysspNode *n, ysspTree *t )
{
  ysspNode *x;

  ysspSplay( n, t );
  x = ysspDeq( &t->root_ysspTree->right_ysspNode );
  if( !x )			
  {
    t->root_ysspTree = t->root_ysspTree->left_ysspNode;
    if (t->root_ysspTree)
      t->root_ysspTree->up_ysspNode = (ysspNode*)NULL;
  }
  else				
  {
    x->up_ysspNode = (ysspNode*)NULL;
    x->left_ysspNode = t->root_ysspTree->left_ysspNode;
    x->right_ysspNode = t->root_ysspTree->right_ysspNode;
    if( x->left_ysspNode )
      x->left_ysspNode->up_ysspNode = x;
    if( x->right_ysspNode )
      x->right_ysspNode->up_ysspNode = x;
    t->root_ysspTree = x;
  }
}


ysspNode *ysspDeq( ysspNode **np )
{
  ysspNode *deq;		
  ysspNode *next;       	
  ysspNode *left;      	
  ysspNode *farleft;		
  ysspNode *farfarleft;	

  if( !np || !*np )
  {
    deq = (ysspNode*)NULL;
  }
  else
  {
    next = *np;
    left = next->left_ysspNode;
    if( !left )
    {
      deq = next;
      *np = next->right_ysspNode;

      if( *np )
	(*np)->up_ysspNode = (ysspNode*)NULL;

    }
    else for(;;)		
    {
      
      farleft = left->left_ysspNode;
      if( !farleft )
      {
	deq = left;
	next->left_ysspNode = left->right_ysspNode;
	if( left->right_ysspNode )
	  left->right_ysspNode->up_ysspNode = next;
	break;
      }

      
      farfarleft = farleft->left_ysspNode;
      if( !farfarleft )
      {
	deq = farleft;
	left->left_ysspNode = farleft->right_ysspNode;
	if( farleft->right_ysspNode )
	  farleft->right_ysspNode->up_ysspNode = left;
	break;
      }

      
      next->left_ysspNode = farleft;
      farleft->up_ysspNode = next;
      left->left_ysspNode = farleft->right_ysspNode;
      if( farleft->right_ysspNode )
	farleft->right_ysspNode->up_ysspNode = left;
      farleft->right_ysspNode = left;
      left->up_ysspNode = farleft;
      next = farleft;
      left = farfarleft;
    }
  }
  return( deq );
}

ysspNode *ysspFHead( ysspTree *t )
{
  ysspNode *x;

  if( ( x = t->root_ysspTree ) )
    while( x->left_ysspNode )
      x = x->left_ysspNode;

  return( x );
}

ysspNode *ysspFTail( ysspTree *t )
{
  ysspNode *x;

  if( ( x = t->root_ysspTree ) )
    while( x->right_ysspNode )
      x = x->right_ysspNode;

  return( x );
}



ysspNode *ysspFNext( ysspNode *n )
{
  ysspNode *next;
  ysspNode *x;

  

  if( !n )
    return( n );

  x = n->right_ysspNode;
  if( x )
  {
    while( x->left_ysspNode )
      x = x->left_ysspNode;
    next = x;
  }
  else				
  {
    x = n->up_ysspNode;
    next = (ysspNode*)NULL;
    while( x )
    {
      if( x->left_ysspNode == n )
      {
	next = x;
	x = (ysspNode*)NULL;
      }
      else
      {
	n = x;
	x = n->up_ysspNode;
      }
    }
  }
  return( next );
}


ysspNode *ysspFPrev( ysspNode *n )
{
  ysspNode *prev;
  ysspNode *x;

  if( !n )
    return( n );

  x = n->left_ysspNode;
  if( x )
  {
    while( x->right_ysspNode )
      x = x->right_ysspNode;
    prev = x;
  }
  else
  {
    x = n->up_ysspNode;
    prev = (ysspNode *)NULL;
    while( x )
    {
      if( x->right_ysspNode == n )
      {
	prev = x;
	x = (ysspNode *)NULL;
      }
      else
      {
	n = x;
	x = n->up_ysspNode;
      }
    }
  }
  return( prev );
}

