/* mx/src/ys/ysl.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSI_ORACLE
#include <ysi.h>
#endif


externdef ysidDecl(YSL_EX_DETACHED) = "ys::detached";

typedef struct yslGetDesc yslGetDesc;

struct yslGetDesc
{
  ysevt  *sem;                                       
  char   *buf;                                         
  size_t  max;                                     
  size_t  cur;                                 
  boolean eofseen;                                       
  dvoid  *osdp;                                        
};

STATICF void yslGetsWaiter(dvoid *usrp, ub4 delay);


void yslPrint(CONST char *fmt, ...)
{
#ifndef RISCOS
  ysctx  *ctx;
  va_list ap;

  ctx = (ysctx *) yscGet(YSC_YSCTX);

  if (ctx->detach)
    yseThrow(YSL_EX_DETACHED);
  else
    {
      va_start(ap, fmt);
      syslPrint(fmt, ap);
      va_end(ap);
    }
#endif
}


void yslError(CONST char *fmt, ...)
{
#ifndef RISCOS
  ysctx  *ctx;
  dvoid  *osdp;
  boolean detach;
  va_list ap;

  
  if (syscGetPG())
    {
      ctx = (ysctx *) yscGet(YSC_YSCTX);
      detach = ctx->detach;
    }
  else
    detach = FALSE;

  if (detach)
    {
      va_start(ap, fmt);
      syslConsole(YSLSEV_INFO, fmt, ap);
      va_end(ap);
    }
  else
    {
      va_start(ap, fmt);
      syslError(fmt, ap);
      va_end(ap);

      if (fmt[strlen(fmt) - 1] != '\n')
	syslError("\n", ap);
    }
#endif
}


boolean yslGets(char *buf, size_t maximum)
{
  ysctx     *ctx;
  yslGetDesc desc;
  ysWaiterCB oldwtr;
  dvoid     *oldusrp;

  
  ctx = (ysctx *) yscGet(YSC_YSCTX);
  if (ctx->detach)
    yseThrow(YSL_EX_DETACHED);

  
  if (maximum < 2)
    yseThrow(YS_EX_BADPARAM);

  
  desc.sem = ysSemCreate((dvoid *) 0);
  desc.buf = buf;
  desc.max = maximum;
  desc.cur = 0;
  desc.eofseen = FALSE;
  desc.osdp = ctx->osdp;

  ysSetWaiter(yslGetsWaiter, &desc, &oldwtr, &oldusrp);

  
  yseTry
    ysSemWait(desc.sem);
    desc.buf[desc.cur] = '\0';
  yseFinally
    ysSemDestroy(desc.sem);
    ysSetWaiter(oldwtr, oldusrp, (ysWaiterCB *) 0, (dvoid **) 0);
  yseEnd

  return !desc.eofseen;
}


STATICF void yslGetsWaiter(dvoid *usrp, ub4 delay)
{
  sword       ch;
  yslGetDesc *desc;

  desc = (yslGetDesc *) usrp;

  desc->eofseen = syslGetc(desc->osdp, &ch, delay);

  if (desc->eofseen || ch == '\n')
    ysTrigger(desc->sem, (ysid *) 0, (dvoid *) 0, (size_t) 0);
  else if (ch != '\0')
    {
      desc->buf[desc->cur++] = (char) ch;
      if (desc->cur == desc->max - 1)
	ysTrigger(desc->sem, (ysid *) 0, (dvoid *) 0, (size_t) 0);
    }
}


void yslDetach(void)
{
  ysctx *ctx;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  if (!ctx->detach)
    {
      

      
      if (!ysResGetBool("ys.ignore-detach"))
        {
      	  
      	  syslDetach();

      	  
      	  ctx->detach = TRUE;
	}
    }
}


boolean yslIsDetached(void)
{
  ysctx *ctx;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  return ctx->detach;
}
