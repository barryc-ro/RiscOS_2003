/* mx/src/ys/ysstr.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSI_ORACLE
#include <ysi.h>
#endif

#define YSSTR_BLK  128                          

static ysmtagDecl(YSSTR_TAG) = "ysstr";


ysstr *ysStrCreate(CONST char *txt)
{
  char  *sc;
  size_t tlen;

  tlen = (txt ? strlen(txt) : 0) + 1;
  sc = (char *) ysmGlbAlloc(max(tlen, YSSTR_BLK), YSSTR_TAG);
  if (txt)
    DISCARD memcpy(sc, txt, tlen);
  else
    sc[0] = '\0';

  return (ysstr *) sc;
}


void ysStrDestroy(ysstr *str)
{
  ysmCheck((dvoid *) str, YSSTR_TAG);
  ysmGlbFree((dvoid *) str);
}


char *ysStrDupWaf(CONST char *txt, ysmaf af)
{
  size_t sz;
  char  *sc;

  if (!txt)
    return (char *) 0;

  sz = strlen(txt);
  sc = (char *) (af ? (*af)(sz + 1) : ysmGlbAlloc(sz + 1, YSSTR_TAG));
  return strcpy(sc, txt);
}


ysstr *ysStrCat(ysstr *str, CONST char *txt)
{
  return ysStrnCat(str, txt, MINSIZE_TMAXVAL);
}


ysstr *ysStrnCat(ysstr *str, CONST char *txt, size_t n)
{
  char  *sc, *sp;
  CONST char *tp;
  size_t slen, tlen, sz;

  ysmCheck((dvoid *) str, YSSTR_TAG);

  sc = (char *) str;
  slen = strlen(sc);
  sz = ysmGetSize((dvoid *) sc);

  tlen = strlen(txt);
  if (n < tlen)
    tlen = n;

  if (slen + tlen + 1 > sz)
    sc = (char *) ysmGlbRealloc((dvoid *) sc, slen + tlen + YSSTR_BLK);

  for (sp = sc + slen, tp = txt; tlen; tlen--)
    *sp++ = *tp++;

  *sp = '\0';
  return (ysstr *) sc;
}


ysstr *ysStrApp(ysstr *str, char ch)
{
  char  *sc, *sp;
  size_t slen, sz;

  ysmCheck((dvoid *) str, YSSTR_TAG);

  sc = (char *) str;
  slen = strlen(sc);
  sz = ysmGetSize((dvoid *) sc);

  if (slen + 2 > sz)
    sc = (char *) ysmGlbRealloc((dvoid *) sc, slen + YSSTR_BLK);

  sp = sc + slen;
  *sp++ = ch;
  *sp = '\0';
  return (ysstr *) sc;
}


ysstr *ysStrIns(ysstr *str, size_t pos, CONST char *txt)
{
  char  *sc, *tail;
  size_t slen;

  ysmCheck((dvoid *) str, YSSTR_TAG);

  sc = (char *) str;
  slen = strlen(sc);

  if (pos < slen)
    {
      tail = ysStrDup(sc + pos);
      sc[pos] = '\0';
      str = ysStrCat(ysStrCat(str, txt), tail);
      ysmGlbFree((dvoid *) tail);
    }
  else
    str = ysStrCat(str, txt);

  return str;
}


ysstr *ysStrDel(ysstr *str, size_t pos, sword cnt)
{
  char  *sc;
  size_t slen, i, j;

  ysmCheck((dvoid *) str, YSSTR_TAG);

  sc = (char *) str;
  slen = strlen(sc);

  if (pos < slen)
    {
      for (i = pos, j = pos + cnt; j < slen; i++, j++)
	sc[i] = sc[j];

      sc[i] = '\0';
    }

  return str;
}


sword ysStrCaseCmp(CONST char *s1, CONST char *s2)
{
  while (*s1 && *s2 && !(tolower((int)*s1) - tolower((int)*s2)))
    s1++, s2++;
 
  return (sword)((*s1 ? tolower((int)*s1) :0) - (*s2 ? tolower((int)*s2) :0));
}
 

sword ysStrnCaseCmp(CONST char *s1, CONST char *s2, sword n)
{
  sword  i = 1;
 
  if (n <= 0) return (sword)0;
  while (*s1 && *s2 && i<n && !(tolower((int)*s1) - tolower((int)*s2)))
    s1++, s2++, i++;
 
  return (sword)((*s1 ? tolower((int)*s1) :0) - (*s2 ? tolower((int)*s2) :0));
}
