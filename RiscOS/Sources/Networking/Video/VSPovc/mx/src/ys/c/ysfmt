/* mx/src/ys/ysfmt.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSI_ORACLE
#include <ysi.h>
#endif

#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif

#include <ctype.h>

typedef struct ysfmte ysfmte;

struct ysfmtd
{
  ysfmte *head;
  ysfmte *tail;
};

struct ysfmte
{
  ub4 type;
  union
  {
    ub1   vub1;
    sb1   vsb1;
    ub4   vub4;
    sb4   vsb4;
    char *vstr;
    sysb8 vsb8;
  } v;
  ysfmte *next;
};

#define YSFMT_C2D(c) ((c) - '0')
#define YSFMT_D2C(c) ((c) + '0')

#define YSFMTF_LJUST    0x0001
#define YSFMTF_B8       0x0002
#define YSFMTF_ZEROPAD  0x0004
#define YSFMTF_NUM      0x0008
#define YSFMTF_UNSIGNED 0x0010
#define YSFMTF_CHAR     0x0020
#define YSFMTF_STR      0x0040
#define YSFMTF_UNKNOWN  0x0080


static ysmtagDecl(ysFmtDescTag) = "ysfmtd";

STATICF ysfmtd *ysFmt2Desc(CONST char *fmt, va_list args);
STATICF char *ysfmtUnsign2Str(char *end, ub4 num, sword base,
                              CONST char *xdigits);

void ysFmtStr(char *out, CONST char *fmt, ...)
{
  va_list args;
  ysfmtd *d;

  va_start(args,fmt);
  d = ysFmt2Desc(fmt,args);
  va_end(args);

  ysFmtStrDesc(out,(size_t)0,fmt,d);

  ysFmtDescDestroy(d);
}

void ysFmtStrl(char *out, size_t size, CONST char *fmt, ...)
{
  va_list args;
  ysfmtd *d;

  va_start(args,fmt);
  d = ysFmt2Desc(fmt,args);
  va_end(args);

  ysFmtStrDesc(out,size,fmt,d);

  ysFmtDescDestroy(d);
}

void ysFmtVaStrl(char *out, size_t size, CONST char *fmt, va_list args)
{
  ysfmtd *d;

  d = ysFmt2Desc(fmt,args);
  ysFmtStrDesc(out,size,fmt,d);
  ysFmtDescDestroy(d);
}

ysfmtd *ysFmtDescCreate(void)
{
  ysfmtd *d;

  d = (ysfmtd *) ysmGlbAlloc(sizeof(ysfmtd),ysFmtDescTag);
  d->head = d->tail = (ysfmte *) 0;

  return d;
}

void ysFmtDescDestroy(ysfmtd *d)
{
  ysfmte *e, *en;

  ysmCheck((dvoid *)d,ysFmtDescTag);

  for(e = d->head; e; e = en)
  {
    en = e->next;
    ysmGlbFree((dvoid *)e);
  }
  ysmGlbFree((dvoid *)d);
}

ysfmtd *ysFmtAddElem(ysfmtd *d, ub4 type, dvoid *value)
{
  ysfmte *e;

  ysmCheck((dvoid *)d,ysFmtDescTag);

  e = (ysfmte *) ysmGlbAlloc(sizeof(ysfmte),"ysfmte");

  e->type = type;
  switch(type)
  {
  case YSFMT_UB1:
    e->v.vub1 = *(ub1 *)value;
    break;
  case YSFMT_SB1:
    e->v.vsb1 = *(sb1 *)value;
    break;
  case YSFMT_UB4:
    e->v.vub4 = *(ub4 *)value;
    break;
  case YSFMT_SB4:
    e->v.vsb4 = *(sb4 *)value;
    break;
  case YSFMT_STR:
    e->v.vstr = (char *)value;
    break;
  case YSFMT_SB8:
    sysb8set(&e->v.vsb8,(sysb8 *)value);
    break;
  default:
    
    break;
  }
  e->next = (ysfmte *)0;

  if(d->tail)
    d->tail->next = e;
  else
    d->head = e;

  d->tail = e;

  return d;
}

void ysFmtStrDesc(char *out, size_t size, CONST char *fmt, ysfmtd *d)
{
  CONST char *f;
  char ch;
  char *o, *end;
  CONST char *os;
  CONST char *p;
  char buf[80];
  boolean terminal;
  sword n;
  ub4 flags;
  sword width;
  sword precs;
  sword base;
  ysfmte *e;
  sword flen;
  sword len;
  sword i;
  sb4 snum;
  ub4 num;
  char sign;
  CONST char *xdigits = (CONST char *)0;
  
  if(d)
  {
    ysmCheck((dvoid *)d,ysFmtDescTag);
    e = d->head;
  }
  else
    e = (ysfmte *) 0;

  if(size)
    end = out + size - 1;
  else
    end = (char *) 0;
  o = out;
  f = fmt;

  while(!end || o < end)
  {
    for(; (ch = *f) != '\0' && ch != '%' && (!end || o < end); f++)
      *o++ = ch;

    if(ch == '\0' || (end && o >= end)) break;
    
    f++;
    terminal = FALSE;
    base = 10;
    flags = 0;
    width = 0;
    precs = -1;
    sign = '\0';
    len = 0;
    
    do
    {
      ch = *f++;
      switch(ch)
      {
      case '*':
        if(!e)                                          
          break;
        switch(e->type)
        {
        case YSFMT_SB4:
          width = (sword) e->v.vsb4;
          break;
        case YSFMT_UB4:
          width = (sword) e->v.vub4;
          break;
        case YSFMT_UB1:
          width = (sword) e->v.vub1;
          break;
        case YSFMT_SB1:
          width = (sword) e->v.vsb1;
          break;
        default:
          break;
        }
        e = e->next;
        if(width >= 0) break;
        width = -width;
      case '-':
        flags |= YSFMTF_LJUST;
        break;
      case 'l':
        
        break;
      case 'L':
        flags |= YSFMTF_B8;
        break;
      case '.':
        ch = *f++;
        if(ch == '*')
        {
          if(!e)                                        
            break;
          switch(e->type)
          {
          case YSFMT_SB4:
            precs = (sword) e->v.vsb4;
            break;
          case YSFMT_UB4:
            precs = (sword) e->v.vub4;
            break;
          case YSFMT_UB1:
            precs = (sword) e->v.vub1;
            break;
          case YSFMT_SB1:
            precs = (sword) e->v.vsb1;
            break;
          default:
            break;
          }
          if(precs < -1) precs = -1;
          e = e->next;
        }
        else
        {
          n = 0;
          while(isdigit(ch))
          {
            n = n * 10 + YSFMT_C2D((ch));
            ch = *f++;
          }
          f--;
          precs = n;
        }
        break;
      case '0':
        flags |= YSFMTF_ZEROPAD;
        break;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        n = 0;
        while(isdigit(ch))
        {
          n = n * 10 + YSFMT_C2D((ch));
          ch = *f++;
        }
        f--;
        width = n;
        break;

      case 'u':
        flags |= YSFMTF_UNSIGNED;
        
      case 'd':                                     
        flags |= YSFMTF_NUM;
        terminal = TRUE;
        break;
      case 'x':
      case 'X':
        base = 16;
        flags |= YSFMTF_NUM | YSFMTF_UNSIGNED;
        if(ch == 'X')
          xdigits = "0123456789ABCDEF";
        else
          xdigits = "0123456789abcdef";
        terminal = TRUE;
        break;
      case 'c':
        flags |= YSFMTF_CHAR;
        terminal = TRUE;
        break;
      case 's':
        flags |= YSFMTF_STR;
        terminal = TRUE;
        break;
      default:
        flags |= YSFMTF_UNKNOWN;
        terminal = TRUE;
        break;
      }
    }
    while(!terminal && ch != '\0');
    if(flags & YSFMTF_UNKNOWN)
    {
      *o++ = ch;
      continue;
    }

    
    if(e)
    {
      
      if((flags & YSFMTF_STR) && e->type != YSFMT_STR)
      {
        flags &= ~YSFMTF_STR;
        flags |= YSFMTF_NUM;
      }
      else if((flags & YSFMTF_NUM) && e->type == YSFMT_STR)
      {
        flags &= ~YSFMTF_NUM;
        flags |= YSFMTF_STR;
      }

      if((flags & YSFMTF_NUM))      
      {
        if(e->type == YSFMT_SB8)
        {
          flags &= ~YSFMTF_NUM;
          flags |= YSFMTF_B8;
        }
        else
          flags &= ~YSFMTF_B8;
      }
    }
    else
    {
      flags &= ~YSFMTF_NUM;
      flags |= YSFMTF_STR;
    }

    
    if(flags & YSFMTF_STR)
    {
      if(e)
      {
        os = e->v.vstr;
        e = e->next;
      }
      else
        os = "(NO ARG)";

      if(!os) os = "(null)";

      if(precs >= 0)
      {
        p = (CONST char *)memchr(os, 0, precs);
        if(p)
        {
          len = (sword) (p - os);
          if(len > precs)
            len = precs;
        }
        else
          len = precs;
      }
      else
        len = (sword) strlen(os);
    }
    else if(flags & YSFMTF_NUM)
    {
      if(flags & YSFMTF_UNSIGNED)
      {
        
        switch(e->type)
        {
        case YSFMT_UB1:
          num = (ub4) e->v.vub1;
          break;
        case YSFMT_SB1:
          num = (ub4) e->v.vsb1;
          break;
        case YSFMT_UB4:
          num = e->v.vub4;
          break;
        case YSFMT_SB4:
          num = (ub4) e->v.vsb4;
          break;
        }
        e = e->next;
      }
      else
      {
        switch(e->type)
        {
        case YSFMT_UB1:
          snum = (sb4) e->v.vub1;
          break;
        case YSFMT_SB1:
          snum = (sb4) e->v.vsb1;
          break;
        case YSFMT_UB4:
          snum = (sb4) e->v.vub4;
          break;
        case YSFMT_SB4:
          snum = e->v.vsb4;
          break;
        }
        e = e->next;
        
        if(snum < 0)
        {
          sign = '-';
          num = (ub4) -snum;
        }
        else
          num = (ub4) snum;
      }
      os = ysfmtUnsign2Str(buf+sizeof(buf)-1,num,base,xdigits);
      len = (sword) strlen(os);
    }
    else if(flags & YSFMTF_B8)
    {
      os = sysb8fmt(buf,(base != 16) ? "%Ld" : "%Lx",&e->v.vsb8);
      if(*os == '-')
      {
        sign = '-';
        os++;
      }
      len = (sword) strlen(os);
      e = e->next;
    }
    else if(flags & YSFMTF_CHAR)
    {
      
      switch(e->type)
      {
      case YSFMT_UB1:
        buf[0] = (char) e->v.vub1;
        break;
      case YSFMT_SB1:
        buf[0] = (char) e->v.vsb1;
        break;
      case YSFMT_UB4:
        buf[0] = (char) e->v.vub4;
        break;
      case YSFMT_SB4:
        buf[0] = (char) e->v.vsb4;
        break;
      }
      e = e->next;
      buf[1] = '\0';
      os = buf;
      len = 1;
    }

    
    
    flen = len;
    if(sign)
      flen++;
    
    if(!(flags & (YSFMTF_LJUST|YSFMTF_ZEROPAD)))
      for(i = width-flen; i > 0 && (!end || o < end); i--) *o++ = ' ';
    if((flags & (YSFMTF_LJUST|YSFMTF_ZEROPAD)) == YSFMTF_ZEROPAD)
      for(i = width-flen; i > 0 && (!end || o < end); i--) *o++ = '0';

    
    if(sign && (!end || o < end))
      *o++ = sign;

    if(end && (o + len > end)) len = (sword) (end - o);
    
    DISCARD memcpy(o,os,len);
    o += len;

    
    if(flags & YSFMTF_LJUST)
      for(i = width-flen; i > 0 && (!end || o < end); i--) *o++ = ' ';
  }
  *o = '\0';
}


STATICF ysfmtd *ysFmt2Desc(CONST char *fmt, va_list args)
{
  ysfmtd *d;
  CONST char *f;
  char ch;
  ub4 flags;
  boolean terminal;
  ub1 vub1;
  sb4 vsb4;
  ub4 vub4;

  d = ysFmtDescCreate();

  f = fmt;
  while(1)
  {
    for(; (ch = *f) != '\0' && ch != '%'; f++);

    if(ch == '\0') break;
    f++;
    flags = 0;
    terminal = FALSE;
    do
    {
      ch = *f++;
      switch(ch)
      {
      case '*':
        vsb4 = (sb4) va_arg(args,int);
        DISCARD ysFmtAddElem(d,YSFMT_SB4,(dvoid *)&vsb4);
        break;
      case 'l':
        break;
      case 'L':
        flags |= YSFMTF_B8;
        break;
      case 'd':
        terminal = TRUE;
        break;
      case 'u':
        terminal = TRUE;
        break;
      case 'x':
      case 'X':
        terminal = TRUE;
        break;
      case 'c':
        terminal = TRUE;
        break;
      case '%':
        terminal = TRUE;
        break;
      case 's':
        terminal = TRUE;
        break;
      }
    }
    while(!terminal && ch != '\0');

    switch(ch)
    {
    case 'd':
      if(flags & YSFMTF_B8)
        DISCARD ysFmtAddElem(d,YSFMT_SB8,(dvoid *)va_arg(args,sysb8 *));
      else
      {
        vsb4 = (sb4) va_arg(args,int);
        DISCARD ysFmtAddElem(d,YSFMT_SB4,(dvoid *)&vsb4);
      }
      break;
    case 'u':
    case 'x':
    case 'X':
      if(flags & YSFMTF_B8)
        DISCARD ysFmtAddElem(d,YSFMT_SB8,(dvoid *)va_arg(args,sysb8 *));
      else
      {
        vub4 = (ub4) va_arg(args,int);
        DISCARD ysFmtAddElem(d,YSFMT_UB4,(dvoid *)&vub4);
      }
      break;
    case 'c':
      vub1 = (ub1) va_arg(args,int);
      DISCARD ysFmtAddElem(d,YSFMT_UB1,(dvoid *)&vub1);
      break;
    case 's':
      DISCARD ysFmtAddElem(d,YSFMT_STR,(dvoid *)va_arg(args,char *));
      break;
    }
  }
  return d;
}

STATICF char *ysfmtUnsign2Str(char *end, ub4 num, sword base,
                              CONST char *xdigits)
{
  char *p = end;

  *p-- = '\0';
  switch(base)
  {
  case 8:
    do
    {
      *p-- = (char) YSFMT_D2C(num & 0x07);
      num >>= 3;
    }
    while(num != 0);
    break;
  case 10:
    do
    {
      *p-- = (char) YSFMT_D2C(num % 10);
      num /= 10;
    }
    while(num != 0);
    break;
  case 16:
    do
    {
      *p-- = xdigits[num & 0x0f];
      num >>= 4;
    }
    while(num != 0);
    break;
  }

  return p+1;
}
