/* mx/src/ys/ys.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSI_ORACLE
#include <ysi.h>
#endif


externdef ysidDecl(YS_PRODUCT) = "OMN";
externdef ysidDecl(YS_FACILITY) = "YS";


void ysInit(dvoid *osdp, CONST char *nm)
{
  dvoid   *ptrs;
  ysmaf    af;
  ysmrf    rf;
  ysmff    ff;
  ysbv    *bv;
  sword    nbv;
  ysmhp   *glbhp;
  size_t   sz;
  ysctx   *ctx;
  char    *fn, buf[64];

  
  if (ptrs = syscGetPG())
  {
    ctx = (ysctx *) yscGet(YSC_YSCTX);
    ctx->initcnt++;
    return;
  }

  
  if (!sysiInit(osdp))
    yseThrow(YS_EX_FAILURE);

  
  if (!sysmInit(osdp, &af, &rf, &ff, &bv, &nbv))
    yseThrow(YS_EX_FAILURE);

  glbhp = ysmCreate(af, rf, ff, bv, nbv);

  
  sz = YSC_YSCLAST * sizeof(dvoid *);
  ptrs = ysmAlloc(glbhp, sz, "ysc ptrs");
  DISCARD memset(ptrs, 0, sz);
  syscSetPG(ptrs);
  
  
  ctx = (ysctx *) ysmAlloc(glbhp, sizeof(ysctx), "ysctx");
  DISCARD yscSet(YSC_YSCTX, (dvoid *) ctx);
  DISCARD yscSet(YSC_YSGLB, (dvoid *) glbhp);

  ctx->bv = bv;
  ctx->nbv = nbv;
  ctx->tctx = (ysthrctx *) 0;
  ctx->thrkeys = ysLstCreate();
  ctx->pfunc = (ysepf) 0;
  ctx->pfptr = (dvoid *) 0;
  ctx->errkey = ysThrKeyCreate();
  ctx->rdb = ysLstCreate();
  ctx->detach = FALSE;
  ctx->initcnt = 1;
  ctx->osdp = osdp;
  ctx->prognm = nm;

  
  if (syspGetHostName(osdp, buf, sizeof(buf)))
    ysResSet("ys.hostname", buf);
  if (syspGetPid(osdp, buf, sizeof(buf)))
    ysResSet("ys.pid", buf);
  if (syspGetAffinity(osdp, buf, sizeof(buf)))
    ysResSet("ys.affinity", buf);

  
  sysrLoad(osdp);
  if (fn = ysResGetLast("YSRESFILE"))
    DISCARD ysResPfile(fn);

  
  ysEvtInit(ctx);

  
  ystmInit(ctx);

  
  ysMsgInit(ctx);
  ysLogInit(ctx);
}


void ysTerm(dvoid *osdp)
{
  dvoid **ptrs;
  ysmhp  *glbhp;
  ysctx  *ctx;
  ysbv   *bv;
  sword   nbv;
  ysle   *sp, *nsp;

  
  ptrs = (dvoid **) syscGetPG();
  if (!ptrs) 
    return;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  if (--ctx->initcnt)
    return;

  
  if (ctx->tctx)
    ysThrTerm();

  
  ysEvtTerm(ctx);

  
  ysLogTerm(ctx);
  ysMsgTerm(ctx);

  
  ysLstDestroy(ctx->rdb, ysResFree);

  
  ysLstDestroy(ctx->thrkeys, ysmFGlbFree);

  
  glbhp = ysmGlbHeap();
  bv = ctx->bv;
  nbv = ctx->nbv;
  ysmFree(glbhp, (dvoid *) ctx);

  
  ysmFree(glbhp, (dvoid *) ptrs);

  
  syscSetPG((dvoid *) 0);

  
  ysmDestroy(glbhp);

  
  sysmTerm(osdp, bv, nbv);

  
  sysiTerm(osdp);
}


CONST char *ysProgName(void)
{
  ysctx *ctx;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  return ctx->prognm;
}


dvoid *ysGetOsdPtr(void)
{
  ysctx *ctx;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  return ctx->osdp;
}


void ysGetCpuTime(sysb8 *cputm)
{
  ysctx *ctx;
  sysb8  ticks;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  DISCARD syspGetCpuTime(ctx->osdp, cputm);
}


void ysGetUpTime(sysb8 *uptm)
{
  ysctx *ctx;
  sysb8  ticks;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  ysClock(&ticks);
  sysb8set(uptm, &ctx->ticks);
}


ub4 ysGetMemUsage(void)
{
  ysctx *ctx;
  ub4    kbytes;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  return (syspGetMemUsage(ctx->osdp, &kbytes) ? kbytes : 0);
}
