/* mx/src/ys/ysr.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YSI_ORACLE
#include <ysi.h>
#endif


typedef struct ysrent ysrent;


struct ysrent
{
  char  *resnm;                                             
  yslst *vals;                                             
};


STATICF boolean ysResMatch(CONST char *resnm, CONST char *match);

#define ysIsBinding(c)  ((c) == '.' || (c) == '*')


yslst *ysResGet(CONST char *name)
{
  ysctx  *ctx;
  ysle   *le;
  ysrent *entry;

  
  ctx = (ysctx *) yscGet(YSC_YSCTX);
  for (le = ysLstHead(ctx->rdb); le; le = ysLstNext(le))
    {
      entry = (ysrent *) ysLstVal(le);
      if (ysResMatch(entry->resnm, name))
	break;
    }

  return (le ? entry->vals : (yslst *) 0);
}


char *ysResGetLast(CONST char *name)
{
  yslst *lst;

  lst = ysResGet(name);
  return (lst ? (char *) ysLstVal(ysLstTail(lst)) : (char *) 0);
}


boolean ysResGetBool(CONST char *name)
{
  yslst *lst;
  char  *val;

  lst = ysResGet(name);
  if (lst)
    {
      val = (char *) ysLstVal(ysLstTail(lst));
      return (ysStrCaseCmp(val, "false") != 0);
    }
  else
    return FALSE;
}


void ysResSet(CONST char *name, CONST char *val)
{
  ysctx  *ctx;
  char   *copy, *sca, *scc;
  CONST char *scb;
  yslst  *rdb;
  ysle   *prv, *le;
  ysrent *noreg entry;
  sword   cmp;

  NOREG(entry);

  
  while (isspace(*val)) val++;
  if (*val == '\0')
    return;

  copy = ysStrDup(val);
  scc = copy + strlen(copy) - 1;
  while (scc > copy && isspace(*scc)) scc--;
  scc[1] = '\0';

  
  ctx = (ysctx *) yscGet(YSC_YSCTX);
  rdb = ctx->rdb;
  for (prv = (ysle *) 0, le = ysLstHead(rdb); le; prv = le, le = ysLstNext(le))
    {
      entry = (ysrent *) ysLstVal(le);

      
      for (sca = entry->resnm, scb = name;
	   *sca && *scb && *sca == tolower(*scb);
	   sca++, scb++) ;

      
      if (*sca && *scb && (ysIsBinding(*sca) || ysIsBinding(*scb)))
	{
	  if (ysIsBinding(*sca) && !ysIsBinding(*scb))
	    cmp = (scb == name ? 1 : -1);
	  else if (!ysIsBinding(*sca) && ysIsBinding(*scb))
	    cmp = (scb == name ? -1 : 1);
	  else
	    cmp = (*sca == '*' ? 1 : -1);
	}
      else
	cmp = *sca - tolower(*scb);

      if (cmp > 0)
	break;
      else if (!cmp)
	{
	  
	  yseTry
	    DISCARD ysLstEnq(entry->vals, (dvoid *) copy);
	  yseCatch(YS_EX_OUTMEM)
	    ysmGlbFree((dvoid *) copy);
	    yseRethrow;
	  yseEnd

	  return;
	}
    }

  entry = (ysrent *) 0;
  yseTry
    {
      entry = (ysrent *) ysmGlbAlloc(sizeof(ysrent), "resource entry");
      DISCARD memset((dvoid *) entry, 0, sizeof(ysrent));

      entry->resnm = (char *) ysmGlbAlloc(strlen(name) + 1, "resource name");
      for (sca = entry->resnm, scb = name; *scb; scb++)
	*sca++ = tolower(*scb);
      *sca = '\0';

      entry->vals = ysLstCreate();
      DISCARD ysLstEnq(entry->vals, (dvoid *) copy);
      DISCARD ysLstIns(rdb, prv, (dvoid *) entry);
    }
  yseCatch(YS_EX_OUTMEM)
    {
      ysmGlbFree((dvoid *) copy);
      if (entry)
	{
	  if (entry->resnm)
	    ysmGlbFree((dvoid *) entry->resnm);
	  if (entry->vals)
	    ysLstDestroy(entry->vals, ysmFGlbFree);
	  ysmGlbFree((dvoid *) entry);
	}
      yseRethrow;
    }
  yseEnd
}


void ysResFree(dvoid *ptr)
{
  ysrent *entry;

  entry = (ysrent *) ptr;
  ysmGlbFree((dvoid *) entry->resnm);
  ysLstDestroy(entry->vals, ysmFGlbFree);
  ysmGlbFree((dvoid *) entry);
}


void ysResWalk(ysreswcb walkcb, dvoid *usrp)
{
  ysctx  *ctx;
  ysle   *le;
  ysrent *entry;
  boolean ok;

  ctx = (ysctx *) yscGet(YSC_YSCTX);
  ok = TRUE;
  for (le = ysLstHead(ctx->rdb); ok && le; le = ysLstNext(le))
    {
      entry = (ysrent *) ysLstVal(le);
      ok = (*walkcb)(usrp, entry->resnm, entry->vals);
    }
}


STATICF boolean ysResMatch(CONST char *resnm, CONST char *match)
{
  CONST char *scr, *scm, *str;
  boolean     tight;

  scr = resnm;
  scm = match;
  while (*scm && *scr)
    {
      
      tight = (*scr != '*');
      str = scr;

      
      if (ysIsBinding(*scr))
	scr++;
      if (*scm == '.')
	scm++;

      
      while (*scm && *scr && tolower(*scm) == *scr && *scm != '.')
	scr++, scm++;

      
      if ((*scm || *scr) && ((*scr != '*' && *scr != '.') || (*scm != '.')))
      if ((*scm || *scr) && (!ysIsBinding(*scr) || (*scm != '.')))
	{
	  if (tight)
	    return FALSE;
	  else
	    {
	      scr = str;
	      while (*scm && *scm != '.')
		scm++;
	    }
	}
    }

  return (*scm == *scr);
}
