/* mx/src/inc/yoidl.idl */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/





#ifndef YOIDL_ORACLE
#define YOIDL_ORACLE

#ifndef YOSTD_ORACLE
#include "yostd/idl"
#endif






module yort
{
    
  interface proc;
  interface impl;
  interface queue;
  interface dispatcher;
  interface objIterator;
  interface claimIterator;

  typedef sequence <impl> implList;
  typedef sequence <queue> queueList;
  typedef sequence <dispatcher> dispatcherList;

                                                                      
  enum	    svcState { SvcStDown, SvcStRun, SvcStHalted,
		       SvcStCongested, SvcStRestart, SvcStQuiesce };

  
  enum	    procState { ProcStRunning, ProcStRunnable,
			ProcStNotRunnable, ProcStInvalid };

    typedef ub4	    counter;

    typedef ub4	    gauge;

                typedef sb4	    timeTicks;

    typedef sb4	    timeCs;

    typedef sb4	    timeMs;

    
    struct resource {
    string	    name_yort_resource;
    yostd::stringList vals_yort_resource;
  };

  typedef sequence <resource> resourceList;

    typedef ub4 implFlags;
  const implFlags stateless_implFlag = 0x0001;
  const implFlags psf_implFlag       = 0x0002;
  const implFlags suspended_implFlag = 0x0004;

    
  struct implInfo {
    impl	self_yort_implInfo;	        string	intf_yort_implInfo;	        string    	impl_yort_implInfo;	        timeTicks	upTimeCs_yort_implInfo;
    svcState	operStatus_yort_implInfo;
    timeTicks	operStatusChanged_yort_implInfo;
    svcState	adminStatus_yort_implInfo;
    timeTicks	adminStatusChanged_yort_implInfo;

    counter	inboundAssocs_yort_implInfo;
    counter	outboundAssocs_yort_implInfo;
    counter	totalInboundAssocs_yort_implInfo;
    counter	totalOutboundAssocs_yort_implInfo;
    timeTicks	lastInbound_yort_implInfo;
    timeTicks	lastOutbound_yort_implInfo;
    counter	rejectedInbounds_yort_implInfo;
    counter	failedOutbounds_yort_implInfo;

    implFlags	implFlags_yort_implInfo;
  };

  typedef sequence <implInfo> implInfoList;

    struct methodInfo {
    string	name_yort_methodInfo;
    counter	cnt_yort_methodInfo;
    timeMs	lastTimeMs_yort_methodInfo;
    timeMs	maxTimeMs_yort_methodInfo;
    timeMs	avgTimeMs_yort_methodInfo;
  };

  typedef sequence <methodInfo> methodInfoList;

  
  struct queueInfo {

    queue	self_yort_queueInfo;	    string	name_yort_queueInfo;	
    counter	totEnq_yort_queueInfo;
    gauge	curLen_yort_queueInfo;
    gauge	maxLen_yort_queueInfo;
    gauge	avgLen_yort_queueInfo;
    timeMs	curDelayMs_yort_queueInfo;
    timeMs	maxDelayMs_yort_queueInfo;
    timeMs	avgDelayMs_yort_queueInfo;

    dispatcherList	dispatchers_yort_queueInfo;      };

  struct dispInfo {

    dispatcher self_yort_dispInfo;              queue      queue_yort_dispInfo;             counter    numDispatches_yort_dispInfo;     svcState   operState_yort_dispInfo;         svcState   adminState_yort_dispInfo;      };
  typedef sequence <dispInfo> dispInfoList;

    struct implAll {
    implInfo       info_yort_implAll;
    methodInfoList methods_yort_implAll;
    queueInfo      queue_yort_implAll;
  };

  typedef sequence <implAll> implAllList;

  struct procInfo {
    proc	self_yort_procInfo;
    string	name_yort_procInfo;
    string	host_yort_procInfo;
    string	affinity_yort_procInfo;
    string 	pid_yort_procInfo;
    procState	operState_yort_procInfo;
    procState	adminState_yort_procInfo;
    ub4		cpuCs_yort_procInfo;
    ub4		memKb_yort_procInfo;
    timeTicks	upTime_yort_procInfo;
  };

  struct claim
  {
    string property;	    Object obj;		    yort::proc owner;	  };

  typedef sequence <claim> claimList;

    
  interface proc {

    readonly attribute resourceList resources;
    readonly attribute implList impls;
    readonly attribute queueList queues;
    readonly attribute dispatcherList dispatchers;
    readonly attribute procInfo pInfo;

    void getImplAll(in implFlags mask, out procInfo procInfo,
		    out dispInfoList dinfo, out implAllList list);

        void getResource( in string name, out yostd::stringList vals ); 
    void setResource( in string name, in yostd::stringList vals );

                            void setAdminState( in procState adminState );

        boolean exists(in Object ref);

        void getIiopExtAddr(out string host, out ub2 port);
  };

    
  interface impl {

    readonly attribute implInfo info;
    readonly attribute methodInfoList methods;
    readonly attribute queueInfo qinfo;
    
    void getAll( out implInfo info,
		out methodInfoList methods,
		out queueInfo qinfo );

    void setAdminState( in svcState adminState );
  };

    
  interface queue {

    readonly attribute queueInfo info;

    void setName( in string name );

    void shutdownDispatchers();
  };

    
        
  interface dispatcher {

    readonly attribute dispInfo dinfo;

            void setAdminState( in svcState adminState );
  };
};				
#endif
