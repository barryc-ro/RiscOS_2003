/* mx/src/inc/yrintf.idl */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/


#ifndef YRINTF_IDL_ORACLE
#define YRINTF_IDL_ORACLE

#ifndef YRDESC_IDL_ORACLE
#include "yrdesc.idl"
#endif

interface yrRep;
interface yrContainer;
interface yrContained;
interface yrModuleDef;
interface yrConstDef;
interface yrType;
interface yrStructDef;
interface yrUnionDef;
interface yrEnumDef;
interface yrAliasDef;
interface yrIntfDef;
interface yrPrimDef;
interface yrStringDef;
interface yrSeqDef;
interface yrArrayDef;



interface yrObject
{
  readonly attribute yrdk def_kind;
#ifdef WRITE_INTERFACE
  void destroy();
#endif 
};



interface yrContained : yrObject
{
  readonly attribute yrid id;
  readonly attribute string name;
  readonly attribute yrvers version;

  readonly attribute yrContainer defined_in;
  readonly attribute string absolute_name;
  readonly attribute yrRep repository;

  yrBriefDesc brieflyDescribe();       yrDesc describe();               }; typedef sequence <yrContained> yrContainedSeq;



typedef sequence <yrIntfDef> yrIntfDefSeq;
typedef sequence <yrConstDef> yrEnumMbrSeq;
interface yrContainer : yrObject
{
  yrContained lookup( in string search_name);

  yrContainedSeq contents( 
	in yrdk limit_type,
	in boolean exclude_inherited);

  yrContainedSeq lookup_name( 
	in string name,
	in sb4 levels,
	in yrdk limit_type,
	in boolean exclude_inhertied);

  yrDescSeq describe_contents( 
	in yrdk limit_type,
	in boolean exclude_inherited,
	in sb4 max_objs);

#ifdef WRITE_INTERFACE
  yrModuleDef create_module( in yrid id, in string name, in yrvers version);

  yrConstDef create_constant( 
	in yrid id, 
	in string name,
	in yrvers version,
	in yrType type,
	in any value);

  yrStructDef create_struct( 
	in yrid id, 
	in string name,
	in yrvers version,
	in yrStructMbrSeq members);

  yrUnionDef create_union( 
	in yrid id, 
	in string name,
	in yrvers version,
	in yrType discriminator_type,
	in yrUnionMbrSeq members);

  yrEnumDef create_enum( 
	in yrid id, 
	in string name,
	in yrvers version,
	in yrEnumMbrSeq members);

  yrAliasDef create_alias( 
	in yrid id, 
	in string name,
	in yrvers version,
	in yrType original_type);

  yrIntfDef create_interface( 
	in yrid id, 
	in string name,
	in yrvers version,
	in yrIntfDefSeq base_interfaces);
#endif 
}; 


interface yrType : yrContained
{
  readonly attribute TypeCode type;
};



interface yrRep : yrContainer
{
  yrContained lookup_id( in yrid search_id);
  yrPrimDef get_primitive( in yrpk kind);
  yrDesc describeByName( in string absName);
  yrDesc describeById( in yrid id);

#ifdef WRITE_INTERFACE
  yrStringDef create_string( in ub4 bound);
  yrSeqDef create_sequence( in ub4 bound, in yrType element_type);
  yrArrayDef create_array( in ub4 length, in yrType element_type);
#endif
};  


interface yrModuleDef : yrContainer, yrContained
{
  };



interface yrConstDef : yrContained
{
  readonly attribute TypeCode type;      attribute yrType type_def;
  attribute any value;
};



interface yrStructDef : yrType
{
  attribute yrStructMbrSeq members;
};

interface yrUnionDef
{
  readonly attribute TypeCode discriminator_type;
  attribute yrType discriminator_type_def;
  attribute yrUnionMbrSeq members;
};


interface yrEnumDef : yrType
{
  attribute yrEnumMbrSeq members;
};


interface yrAliasDef : yrType
{
  attribute yrType original_type_def;
};


interface yrPrimDef : yrType
{
  readonly attribute yrpk kind;
};



interface yrStringDef : yrType
{
  attribute ub4 bound;
};



interface yrSeqDef : yrType
{
  attribute ub4 bound;
  readonly attribute TypeCode element_type;
  attribute yrType element_type_def;
};



interface yrArrayDef : yrType
{
  attribute ub4 length;
  readonly attribute TypeCode element_type;
  attribute yrType element_type_def;
};



interface yrExceptDef : yrContained
{
  readonly attribute TypeCode type;
  attribute yrStructMbrSeq members;
};
typedef sequence <yrExceptDef> yrExceptSeq;



interface yrAttrDef : yrContained
{
  readonly attribute TypeCode type;      attribute yrType type_def;
  attribute yrAttrMode mode;
};



interface yrOpDef : yrContained
{
  readonly attribute TypeCode result;           readonly attribute yrType result_def;
  readonly attribute yrParmDescSeq params;
  readonly attribute yrOpMode mode;
  readonly attribute yrExceptSeq exceptions;
  readonly attribute yrCtxtIdSeq contexts;
}; 


interface yrIntfDef : yrContainer, yrType
{
  attribute yrIntfDefSeq base_interfaces;
  boolean is_a( in yrid interface_id);

#ifdef WRITE_INTERFACE
  yrAttrDef create_attribute( in yrid id,
	in string name,
	in yrvers version,
	in yrType type,
	in yrAttrMode mode);
  yrOpDef create_operation( in yrid id,
	in string name,
	in yrvers version,
	in yrType result,
	in yrOpMode mode,
	in yrParmDescSeq params,
	in yrExceptSeq exceptions,
	in yrCtxtIdSeq contexts);
#endif
}; 
#endif 
