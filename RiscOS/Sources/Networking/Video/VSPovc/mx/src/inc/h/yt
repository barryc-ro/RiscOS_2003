/* mx/src/inc/yt.h */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/





#ifndef YT_ORACLE
#define YT_ORACLE

#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

EXTC_START

#ifndef YS_ORACLE
#include <ys.h>
#endif

#ifndef YSX_ORACLE
#include <ysx.h>
#endif

#ifndef MN_ORACLE
#include <mn.h>
#endif

#ifndef MNT_ORACLE
#include <mnt.h>
#endif

#ifndef YTEX_ORACLE
#include <ytex.h>
#endif



typedef struct mnp ytp;
typedef struct mna yta;


void ytInit(void);


void ytTerm(void);


#define YTPROTO_MESSAGE	    MNPROTO_MESSAGE
#define YTPROTO_STREAM	    MNPROTO_STREAM
#define YTPROTO_DGRAM	    MNPROTO_MESSAGE

ytp *ytOpen(sword protocol);


void ytClose(ytp *port);


void ytFlush(ytp *port, ysevt *evt);


#define YTFLG_NONBLOCK	MNOPT_NONBLOCK	    
#define YTFLG_MANFLUSH	((ub4)0)	    

void ytSetOptions(ytp *port, ub4 options);
ub4  ytGetOptions(ytp *port);


void ytBind(ytp *port, ub2 name);


yta *ytGetAddr(ytp *port);
yta *ytGetPeer(ytp *port);


void ytListen(ytp *port);


ytp *ytAccept(ytp *port);


void ytConnect(ytp *port, yta *addr);


sb4 ytRead(ytp *port, ub1 *buf, size_t max, boolean fill, ysevt *evt);
sb4 ytReadV(ytp *port, ysbv *bv, sword nbv, boolean fill, ysevt *evt);


sb4 ytWrite(ytp *port, ub1 *buf, size_t len);
sb4 ytWriteV(ytp *port, ysbv *bv, sword nbv);


sb4 ytSend(ytp *port, yta *to, ub1 *buf, size_t len, ysevt *evt);
sb4 ytSendV(ytp *port, yta *to, ysbv *bv, sword nbv, ysevt *evt);


sb4 ytRecv(ytp *port, yta **from, ub1 *buf, size_t max, ysevt *evt);
sb4 ytRecvV(ytp *port, yta **from, ysbv *bv, sword nbv, ysevt *evt);


sb4 ytTest(ytp *port, sysb8 *timeout, ysevt *evt);


sword ytAddrEq(yta *a1, yta *a2);


ub2 ytGetAddrPort(yta *addr);


#define YTAMAXLEN       MNAMAXLEN
char *ytAddrToStr(yta *addr, char *str, size_t max);


yta *ytStrToAddr(CONST char *str);


yta *ytAddrDup(yta *addr);


void ytAddrFree(yta *addr);


ub4 ytHashAddr(yta *addr);


ysid *ytMnStsToExid(sb4 val);


void ytxPutAddr(ysx *x, yta *addr);


yta *ytxGetAddr(ysx *x);


struct ytx
{
  ub1   *ptr;
  size_t cnt;
  ysbv  *bv;
  sword  nbv;
};

EXTC_END
#endif

