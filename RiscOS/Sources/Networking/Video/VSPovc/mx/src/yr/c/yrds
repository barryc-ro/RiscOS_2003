/* mx/src/yr/yrds.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#define YRDS_DEFAULT
#define YRDS_COMPACT

struct yrdsctx
{
  sword depth;
  sword format;
  sword indent_lvl;
  ysstr* buff;
  char scratch[512];
};

#define YRDS_INDENT 2


STATICF void yrDescribeEnum( yrdsctx* ctx, yrobj* or)
{
  sword indent = ctx->indent_lvl * YRDS_INDENT;
  char* p = ctx->scratch;
  ysle* le;

  ysFmtStr( p, "%*senum %s\n%*s{\n", indent, "", or->name, indent, "");
  ysStrCat( ctx->buff, p);

  indent += YRDS_INDENT;
  for ( le = ysLstHead(or->data.eval.mbrs); le; le = yrLstNext(le))
  {
    yrobj* constant = (yrobj*) ysLstVal(le);
    ysFmtStr( p, "%*s%s", indent, "", constant->name);
    ysStrCat( ctx->buff, p);
    if ( yrLstNext(le) )
      ysStrCat( ctx->buff, ",\n");
    else
      ysStrApp( ctx->buff, '\n');
  }

  indent -= YRDS_INDENT;
  ysFmtStr( p, "%*s};\n", indent, "");
  ysStrCat( ctx->buff, p);
}


STATICF void yrDescribeModule( yrdsctx* ctx, yrobj* or)
{
  sword indent = ctx->indent_lvl * YRDS_INDENT;
  char* p = ctx->scratch;
  
  if ( ctx->depth == 0 )
  {
    ysFmtStr( p, "%*smodule %s;\n", indent, "", or->name);
    ysStrCat( ctx->buff, p);
  }
  else
  {
    ysFmtStr( p, "%*smodule %s\n%*s{\n", indent, "", or->name, indent, "");
    ysStrCat( ctx->buff, p);

    if ( or->contents )
    {
      ysle* le;
      ctx->indent_lvl++;
      ctx->depth--;
      for ( le = ysLstHead(or->contents); le; le = ysLstNext(le))
	yrDescribeObj( ctx, (yrobj*)ysLstVal(or));
      ctx->indent_lvl--;
      ctx->depth++;
    }
    else
    {
      ysFmtStr( p, "%*s/* empty */\n", indent + YRDS_INDENT, "");
      ysStrCat( ctx->buff, p);
    }
    ysFmtStr( p, "%*s};\n", indent, "");
    ysStrCat( ctx->buff, p);
  }
}


STATICF void yrDescribeRepository( yrdsctx* ctx, yrobj* or)
{
  sword indent = ctx->indent_lvl * YRDS_INDENT;
  char* p = ctx->scratch;
  
  if ( ctx->depth == 0 )
  {
    ysFmtStr( p, "%*sRepository %s;\n", indent, "", or->name);
    ysStrCat( ctx->buff, p);
  }
  else
  {
    ysFmtStr( p, "%*sRepository %s\n%*s{\n", indent, "", or->name, indent, "");
    ysStrCat( ctx->buff, p);

    if ( or->contents )
    {
      ysle* le;
      ctx->indent_lvl++;
      ctx->depth--;
      for ( le = ysLstHead(or->contents); le; le = ysLstNext(le))
	yrDescribeObj( ctx, (yrobj*) ysLstVal(le));
      ctx->indent_lvl--;
      ctx->depth++;
    }
    else
    {
      ysFmtStr( p, "%*s/* empty */\n", indent + YRDS_INDENT, "");
      ysStrCat( ctx->buff, p);
    }
    ysFmtStr( p, "%*s};\n", indent, "");
    ysStrCat( ctx->buff, p);
  }
}


STATICF void yrDescribeInterface( yrdsctx* ctx, yrobj* or)
{
  sword indent = ctx->indent_lvl * YRDS_INDENT;
  char* p = ctx->scratch;
  
  if ( ctx->depth == 0 )
  {
    ysFmtStr( p, "%*sinterface %s;\n", indent, "", or->name);
    ysStrCat( ctx->buff, p);
  }
  else
  {
    ysle* le;

    ysFmtStr( p, "%*sinterface %s\n%*s{\n", indent, "", or->name, indent, "");
    ysStrCat( ctx->buff, p);

	
    if ( or->bases )
    {
      ysFmtStr( p, "%*sinterface %s : ", indent, "", or->name);
      for ( le = ysLstHead(or->bases); le; le = ysLstNext(le))
      {
        ysStrCat( ctx->buff, ((yrobj*)ysLstVal(le))->name);
        if ( ysLstNext(le) )
           ysStrCat( ctx->buff, ", ");
        else
           ysStrApp( ctx->buff, "\n");
      }
    }
    else
      ysFmtStr( p, "%*sinterface %s\n%*s{\n", indent, "", or->name,indent, "");

	
    if ( or->contents )
    {
      ctx->indent_lvl++;
      ctx->depth--;
      for ( le = ysLstHead(or->contents); le; le = ysLstNext(le))
	yrDescribeObj( ctx, or);
      ctx->indent_lvl--;
      ctx->depth++;
    }
    else
    {
      ysFmtStr( p, "%*s/* empty */\n", indent + YRDS_INDENT, "");
      ysStrCat( ctx->buff, p);
    }
    ysFmtStr( p, "%*s};\n", indent, "");
    ysStrCat( ctx->buff, p);
  }
}


STATICF void yrDescribePrimitive( yrdsctx* ctx, yrobj* or)
{
  char* name = yrGetPrimitiveName( or->data.pval.kind);
  ysStrCat( ctx->buff, name);
  ysmGlbFree( name);
}


STATICF void yrDescribeStruct( yrdsctx* ctx, yrobj* or)
{
  sword indent = ctx->indent_lvl * YRDS_INDENT;
  char* p = ctx->scratch;
  
  if ( ctx->depth == 0 )
  {
    ysFmtStr( p, "%*sstruct %s;\n", indent, "", or->name);
    ysStrCat( ctx->buff, p);
  }
  else
  {
    ysFmtStr( p, "%*sstruct %s\n%*s{\n", indent, "", or->name, indent, "");
    ysStrCat( ctx->buff, p);

    if ( or->data.sval.mbrs && ysLstCount(or->data.sval.mbrs) )
    {
      ysle* le;
      ctx->indent_lvl++;
      ctx->depth--;
      for ( le = ysLstHead(or->data.sval.mbrs); le; le = ysLstNext(le))
      {
	yrstrmbr* mem = (yrstrmbr*) ysLstVal(le);
	yrDescribeDecl( ctx, mem->name, mem->type);
	ysStrCat( ctx->buff, ";\n");
      }
      ctx->indent_lvl--;
      ctx->depth++;
    }
    else
    {
      ysFmtStr( p, "%*s/* empty */\n", indent + YRDS_INDENT, "");
      ysStrCat( ctx->buff, p);
    }
    ysFmtStr( p, "%*s};\n", indent, "");
    ysStrCat( ctx->buff, p);
  }
}


STATICF void yrDescribeException( yrdsctx* ctx, yrobj* or)
{
  sword indent = ctx->indent_lvl * YRDS_INDENT;
  char* p = ctx->scratch;
  
  if ( ctx->depth == 0 )
  {
    ysFmtStr( p, "%*sexception %s;\n", indent, "", or->name);
    ysStrCat( ctx->buff, p);
  }
  else
  {
    ysFmtStr( p, "%*sexception %s\n%*s{\n", indent, "", or->name, indent, "");
    ysStrCat( ctx->buff, p);

    if ( or->data.sval.mbrs && ysLstCount(or->data.sval.mbrs) )
    {
      ysle* le;
      ctx->indent_lvl++;
      ctx->depth--;
      for ( le = ysLstHead(or->data.sval.mbrs); le; le = ysLstNext(le))
      {
	yrstrmbr* mem = (yrstrmbr*) ysLstVal(le);
	yrDescribeDecl( ctx, mem->name, mem->type);
	ysStrCat( ctx->buff, ";\n");
      }
      ctx->indent_lvl--;
      ctx->depth++;
      ysFmtStr( p, "%*s};\n", indent, "");
      ysStrCat( ctx->buff, p);
    }
    else
    {
      ysFmtStr( p, "%*s/* empty */\n", indent + YRDS_INDENT, "");
      ysStrCat( ctx->buff, " };\n");
    }
  }
}


STATICF void yrDescribeUnion( yrdsctx* ctx, yrobj* or)
{
  sword indent = ctx->indent_lvl * YRDS_INDENT;
  char* p = ctx->scratch;
  
  if ( ctx->depth == 0 )
  {
    ysFmtStr( p, "%*sunion %s;\n", indent, "", or->name);
    ysStrCat( ctx->buff, p);
  }
  else
  {
    ysFmtStr( p, "%*sunion %s switch( ", indent, "", or->name);
    ysStrCat( ctx->buff, p);
    yrDescribeType( ctx, or->data.uval.disctype);
    ysFmtStr(p, " )\n%*s{\n", indent, "");
    ysStrCat( ctx->buff, p);

    if ( or->data.sval.mbrs && ysLstCount(or->data.sval.mbrs) )
    {
      ysle* le;
      ctx->indent_lvl++;
      ctx->depth--;
      for ( le = ysLstHead(or->data.sval.mbrs); le; le = ysLstNext(le))
      {
	yrstrmbr* mem = (yrstrmbr*) ysLstVal(le);

	yrDescribeDecl( ctx, mem->name, mem->type);
	ysStrCat( ctx->buff, ";\n");
      }
      ctx->indent_lvl--;
      ctx->depth++;
      ysFmtStr( p, "%*s};\n", indent, "");
      ysStrCat( ctx->buff, p);
    }
    else
    {
      ysFmtStr( p, "%*s/* empty */};\n", indent + YRDS_INDENT, "");
      ysStrCat( ctx->buff, p);
    }
  }
}


STATICF void yrDescribeConst( yrdsctx* ctx, char* name, yrobj* type)
{
  sword indent = ctx->indent_lvl * YRDS_INDENT;
  
  ysFmtStr( ctx->scratch, "%*sconst ", indent, "");
  ysStrCat( ctx->buff, ctx->scratch);
  yrDescribeDecl( ctx, or->name, or->data.cval.type);
  ysStrCat( ctx->buff, " = ...;\n");

}


STATICF void yrDescribeAttribute( yrdsctx* ctx, char* name, yrobj* or)
{
  sword indent = ctx->indent_lvl * YRDS_INDENT;
  
  ysFmtStr( ctx->scratch, "%*s%sattribute ", indent, "", 
	      or->data.attval.mode == YR_ATTR_RO ? "readonly " : "");
  ysStrCat( ctx->buff, ctx->scratch);
  yrDescribeDecl( ctx, or->name, or->data.attval.type);
  yrStrCat( ctx->buff, ";\n");
}


STATICF void yrDescribeOperation( yrdsctx* ctx, char* name, yrobj* or)
{
  sword indent = ctx->indent_lvl * YRDS_INDENT;
  char* p = ctx->scratch;
  ysle* le;
  ysstr* tname;

  tname = yrDescribeType( ctx, or->data.opval.rettype);
  if ( or->opval.mode == YR_OP_ONEWAY )
    ysFmtStr( p, "%*soneway %s %s( ", indent, "", tname, or->name);
  else
    ysFmtStr( p, "%*s%s %s( ", indent, "", tname, or->name);
  ysStrCat( ctx->buff, p);
  ysStrDestroy( tname);

    
  if ( or->data.opval.pars  && (ysLstCount(or->data.opval.pars) > 0) )
    for ( le = ysLstHead( or->data.opval.pars); le; le = ysLstNext(le))
    {
      yrpar* par = (yrpar*) ysLstVal(le);

      switch ( mode )
      {
        case YOMODE_IN: ysStrCat( ctx->buff, "in "); break;
        case YOMODE_INOUT: ysStrCat( ctx->buff, "inout "); break;
        case YOMODE_OUT: ysStrCat( ctx->buff, "out "); break;
        default: break;
      }
      yrDescribeDecl( ctx, par->name, par->type);
      if ( ysLstNext(le) )
	yrStrCat(ctx->buff, ", ");
    }
  ysStrApp( ctx->buff, ')');

  if ( or->data.opval.raises && (ysLstCount( or->data.opval.raises) > 0) )
  {
    ysStrCat( ctx->buff, " raises (");
    for ( le = ysLstHead( or->data.opval.raises); le; le = ysLstNext(le))
    {
      ysStrCat( ctx->buff, ((yrobj*)ysLstVal(le))->name);
      if ( ysLstNext(le) )
        ysStrCat( ctxt->buff, ", ");
    }
    ysStrApp( ctx->buff, ')');
  }

  ysStrCat( ctx->buff, ";\n");
}


STATICF void yrDescribeAlias( yrdsctx* ctx, char* name, yrobj* type)
{
  sword indent = ctx->indent_lvl * YRDS_INDENT;
  char* p = ctx->scratch;
  
  ysFmtStr( p, "%*stypedef ", indent, "");
  ysStrCat( ctx->buff, p);
  yrDescribeDecl( ctx, or->name, or->data.attval.type);
  ysStrCat( ctx->buff, ";\n");
}


STATICF void yrDescribeDecl( yrdsctx* ctx, char* name, yrobj* type)
{
  switch (type->tag)
  {
    case yrdkInterface:
    case yrdkAlias:
    case yrdkStruct:
    case yrdkUnion:
    case yrdkEnum:
    case yrdkString:
    case yrdkSequence:
    {
      ysstr* tname;
      tname = yrDescribeType( ctx, type);
      ysFmtString( ctx->scratch, "%s %s", ysStrToText( tname), name);
      ysStrCat( ctx->buff, ctx->scratch);
      ysStrDestroy( tname);
      break;
    }
    case yrdkPrimitive:
    {
      char* tname = yrGetPrimitiveName( type->data.pval.kind);
      ysFmtString( ctx->scratch, "%s %s", tname, name);
      ysStrCat( ctx->buff, ctx->scratch);
      ysmGlbFree( tname);
      break;
    }
    case yrdkArray:
    {
      ysstr* tname;
      yrobj* eltype = type;

      while ( eltype->tag == yrdkArray )	
        eltype = eltype->data.arrval.elmtype;

	
      tname = yrDescribeType( ctx, eltype);
      ysFmtString( ctx->scratch, "%s %s", tname, name, 
		type->data.arrval.length);
      ysStrCat( ctx->buff, ctx->scratch);
      ysStrDestroy( tname);

	
      for (; type->tag == yrdkArray; type = type->data.arrval.elmtype)
      {
        ysFmtString( ctx->scratch, "[%d]", type->data.arrval.length);
        ysStrCat( ctx->buff, ctx->scratch);
      }
      break;
    }
    default:
      ysStrCat( ctx->buff, "<invalid declaration>");
      break;
  }
}


STATICF ysstr* yrDescribeType( yrdsctx* ctx, yrobj* type)
{
  ysstr* result;
  char* eltype;

  switch (type->tag)
  {
    case yrdkInterface:
    case yrdkAlias:
    case yrdkStruct:
    case yrdkUnion:
    case yrdkEnum:
    case yrdkException:
      result = ysStrCreate( type->name);
      break;
    case yrdkPrimitive:
      result = yrGetPrimitiveName( type->data.pval.kind);
      break;
    case yrdkString:
      if ( type->data.strval.bound > 0 )
      {
        ysFmtStr( ctx->scratch, "string<%d>", type->data.strval.bound);
        result = ysStrCreate( ctx->scratch);
      }
      else
	result = ysStrCreate( "string");
      break;
    case yrdkSequence:
      result = ysStrCreate( "sequence<");
      eltype = yrDescribeType( type->data.seqval.elmtype);
      if ( type->data.seqval.length > 0 )
        ysFmtStr( ctx->scratch, "%s, %d>", eltype, type->data.seqval.length);
      else
        ysFmtStr( ctx->scratch, "%s>", eltype, type->data.seqval.length);
      ysStrCat( result, ctx->scratch);
      ysmGlbFree( eltype);
      break;
    default:
      ysStrCat( ctx->buff, "<invalid declaration>");
      break;
  }
}


char* yrDescribeObj(yrobj* or, sword depth, sword format)
{
  yrdsctx ctx;
}
