/* mx/src/yr/yrcontd.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/


 
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
 
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif

#ifndef YRCORBAI_H
#include <yrcorbaI.h>
#endif
 
#ifndef YR_ORACLE
#include <yr.h>
#endif
 
#ifndef YOORB_ORACLE
#include <yoorb.h>
#endif
 
#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif

externdef ysidDecl(CORBA_Contained_implid) = "ORA_Contained";





 
CORBA_Contained_Description CORBA_Contained_describe_i(
     CORBA_Contained or, yoenv* ev)
{
    
  CORBA_Contained_Description dummy = {CORBA_dk_none, {0,0}};

  yseThrow(YR_EX_UNIMPLEMENTED);
  return dummy;           
}
 

 
CORBA_DefinitionKind CORBA_Contained__get_def_kind_i(
     CORBA_Contained or, yoenv* ev)
{
  return CORBA_IRObject__get_def_kind_i( (CORBA_IRObject) or, ev);
}
 

 
CORBA_RepositoryId CORBA_Contained__get_id_i( CORBA_Contained or, yoenv* ev)
{
  return ysStrDupWaf( yrGetRepId( yrCORBAtoYR( (CORBA_IRObject)or)), yoAlloc);
}
 

 
CORBA_Identifier CORBA_Contained__get_name_i( CORBA_Contained or, yoenv* ev)
{
  return ysStrDupWaf( yrGetName( yrCORBAtoYR( (CORBA_IRObject)or)), yoAlloc);
}
 

 
CORBA_VersionSpec CORBA_Contained__get_version_i(
     CORBA_Contained or, yoenv* ev)
{
  return ysStrDupWaf( yrGetVersion( yrCORBAtoYR((CORBA_IRObject)or)), yoAlloc);
}
 

 
CORBA_Container CORBA_Contained__get_defined_in_i(
     CORBA_Contained or, yoenv* ev)
{
  yrobj* result = yrGetDefinedIn( yrCORBAtoYR( (CORBA_IRObject)or));
 
  return (CORBA_Container) yoDuplicate( yrYRtoCORBA(result));
}
 

 
CORBA_ScopedName CORBA_Contained__get_absolute_name_i(
     CORBA_Contained or, yoenv* ev)
{
  char* interim;
  char* result;
  yrobj* obj;

  obj = yrCORBAtoYR( (CORBA_IRObject) or);
  yseTry
  {
    interim = yrGetAbsoluteName( obj);
    result = ysStrDupWaf( interim, yoAlloc);
    ysmGlbFree( (dvoid*)interim);
  }
  yseCatchAll
  {
    result = ysStrDupWaf( "::", yoAlloc);
  }
  yseEnd
  return result;
}
 

 
CORBA_Repository CORBA_Contained__get_containing_repository_i(
     CORBA_Contained or, yoenv* ev)
{
  yrobj* result = yrGetRepository( yrCORBAtoYR( (CORBA_IRObject)or));
 
  return (CORBA_Repository) yoDuplicate( yrYRtoCORBA(result));
}
 

 
 
externdef struct CORBA_Contained__tyimpl CORBA_Contained__impl =
 {
  CORBA_Contained_describe_i,
  CORBA_Contained__get_id_i,
  CORBA_Contained__get_name_i,
  CORBA_Contained__get_version_i,
  CORBA_Contained__get_defined_in_i,
  CORBA_Contained__get_absolute_name_i,
  CORBA_Contained__get_containing_repository_i,
  CORBA_Contained__get_def_kind_i
 };
 




void Init_CORBA_Contained()
{
  YR_SET_IMPL(CORBA_Contained, FALSE, 0);
  YR_IMPL_READY(CORBA_Contained, 0);
}

void Term_CORBA_Contained()
{
  YR_IMPL_DEACTIVATE(CORBA_Contained);
}
