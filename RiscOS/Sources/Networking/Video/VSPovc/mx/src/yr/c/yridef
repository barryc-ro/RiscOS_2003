/* mx/src/yr/yridef.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif

#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
#ifndef YRIDEFI_H
#include <yridefI.h>
#endif

#ifndef YRCORBAI_H
#include <yrcorbaI.h>
#endif
 
#ifndef YR_ORACLE
#include <yr.h>
#endif
 
#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif

#ifndef YRTYPIDL_IDL
#include <yrtypidl.h>
#endif

#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif

EXTC_START

STATICF CORBA_InterfaceDef yrGetStateful(yr_intfdef or);

boolean yr_intfdef_is_a_i( yr_intfdef or, yoenv* ev, CORBA_RepositoryId 
  interface_id)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);

  return CORBA_InterfaceDef_is_a_i(obj, ev, interface_id);
}

CORBA_InterfaceDef_FullInterfaceDescription yr_intfdef_describe_interface_i(
   yr_intfdef or, yoenv* ev)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);

  return CORBA_InterfaceDef_describe_interface_i(obj, ev);
}

CORBA_InterfaceDefSeq yr_intfdef__get_base_interfaces_i( yr_intfdef or, 
  yoenv* ev)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef__get_base_interfaces_i(obj, ev);
}

CORBA_Contained yr_intfdef_lookup_i( yr_intfdef or, yoenv* ev, 
  CORBA_ScopedName search_name)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef_lookup_i(obj, ev, search_name);
}

CORBA_ContainedSeq yr_intfdef_contents_i( yr_intfdef or, yoenv* ev, 
  CORBA_DefinitionKind limit_type, boolean exclude_inherited)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef_contents_i(obj, ev, limit_type, exclude_inherited);
}

CORBA_ContainedSeq yr_intfdef_lookup_name_i( yr_intfdef or, yoenv* ev, 
  CORBA_Identifier search_name, sb4 levels_to_search, CORBA_DefinitionKind 
  limit_type, boolean exclude_inherited)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef_lookup_name_i(
    obj, ev, search_name, levels_to_search, limit_type, exclude_inherited);
}

CORBA_Container_DescriptionSeq yr_intfdef_describe_contents_i( yr_intfdef 
  or, yoenv* ev, CORBA_DefinitionKind limit_type, boolean exclude_inherited,
   sb4 max_returned_objs)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef_describe_contents_i(
     obj, ev, limit_type, exclude_inherited, max_returned_objs);
}

CORBA_DefinitionKind yr_intfdef__get_def_kind_i( yr_intfdef or, yoenv* ev)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef__get_def_kind_i(obj, ev);
}

CORBA_Contained_Description yr_intfdef_describe_i( yr_intfdef or, yoenv* ev)
  
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef_describe_i(obj, ev);
}

CORBA_RepositoryId yr_intfdef__get_id_i( yr_intfdef or, yoenv* ev)
{
  yoRefData* data;
  CORBA_RepositoryId id;

  if ( data && (data->_length > 0) )
    id = (CORBA_RepositoryId) ysStrDupWaf((char*)data->_buffer, yoAlloc);
  else
    id = (CORBA_RepositoryId) ysStrDupWaf("", yoAlloc);
  yoFreeId(data);
  return id;
}

CORBA_Identifier yr_intfdef__get_name_i( yr_intfdef or, yoenv* ev)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef__get_name_i(obj, ev);
}

CORBA_VersionSpec yr_intfdef__get_version_i( yr_intfdef or, yoenv* ev)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef__get_version_i(obj, ev);
}

CORBA_Container yr_intfdef__get_defined_in_i( yr_intfdef or, yoenv* ev)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef__get_defined_in_i(obj, ev);
}

CORBA_ScopedName yr_intfdef__get_absolute_name_i( yr_intfdef or, yoenv* ev)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef__get_absolute_name_i(obj, ev);
}

CORBA_Repository yr_intfdef__get_containing_repository_i( yr_intfdef or, 
  yoenv* ev)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef__get_containing_repository_i(obj, ev);
}

yotk* yr_intfdef__get_type_i( yr_intfdef or, yoenv* ev)
{
  CORBA_InterfaceDef obj = yrGetStateful(or);
  return CORBA_InterfaceDef__get_type_i(obj, ev);
}


static CONST_W_PTR struct yr_intfdef__tyimpl yr_intfdef__impl =
 {
  yr_intfdef_is_a_i,
  yr_intfdef_describe_interface_i,
  yr_intfdef__get_base_interfaces_i,
  yr_intfdef_lookup_i,
  yr_intfdef_contents_i,
  yr_intfdef_lookup_name_i,
  yr_intfdef_describe_contents_i,
  yr_intfdef__get_def_kind_i,
  yr_intfdef_describe_i,
  yr_intfdef__get_id_i,
  yr_intfdef__get_name_i,
  yr_intfdef__get_version_i,
  yr_intfdef__get_defined_in_i,
  yr_intfdef__get_absolute_name_i,
  yr_intfdef__get_containing_repository_i,
  yr_intfdef__get_type_i
 };



STATICF CORBA_InterfaceDef yrGetStateful(yr_intfdef or)
{
  noreg yoRefData* data;
  CORBA_InterfaceDef idef;

  NOREG(data);
  idef = (CORBA_InterfaceDef)0;
  data = yoGetId( (dvoid*)or);
  yseTry
    if ( data && (data->_length > 0) )
    {
      yrobj* obj;
      yrobj* rep;

      rep = (yrobj*) yoGetImplState(or);
      obj = yrLookupId(rep, (char*) data->_buffer);
      if ( obj && (yrGetKind(obj) == yrdkInterface) )
        idef = (CORBA_InterfaceDef) yrYRtoCORBA(obj);
      else
        yseThrow(YO_EX_BADOBJ);
    }
    else
      yseThrow(YO_EX_BADOBJ);
  yseFinally
    if ( data )
      yoFreeId( (yoRefData*)data);
    yseRethrow;
  yseEnd
  return idef;
}

static ysidDecl(yr_intfdef_implid) = "ORA_yr_intfdef";

void Init_yr_intfdef(yrobj* rep)
{
  YR_SET_IMPL(yr_intfdef, TRUE, rep);
  YR_IMPL_READY(yr_intfdef, 0);
}

void Term_yr_intfdef()
{
  YR_IMPL_DEACTIVATE(yr_intfdef);
}

EXTC_END
