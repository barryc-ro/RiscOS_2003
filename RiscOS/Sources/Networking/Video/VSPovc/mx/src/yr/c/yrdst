/* mx/src/yr/yrdst.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif
#ifndef YR_ORACLE
#include <yr.h>
#endif
#ifndef YR0_ORACLE
#include <yr0.h>
#endif

STATICF void yrDestroyConstant( yrobj* obj, ysmff usrpFree, ysmff objFree)
{
  if ( (yotkGetKind( obj->data.cval.val._type) == yotkString) &&
       *(char**)obj->data.cval.val._value )
    ysmGlbFree( (dvoid*)(*(char**)obj->data.cval.val._value));
  yotkFreeWaf( obj->data.cval.val._type, (ysmff)ysmFGlbFree);
  ysmGlbFree( (dvoid*)obj->data.cval.val._value);
}

STATICF void yrDestroyInterface( yrobj* obj, ysmff usrpFree, ysmff objFree)
{
  if ( obj->data.intfval.bases )
    ysLstDestroy( obj->data.intfval.bases, (ysmff) 0);
  if ( obj->data.intfval.ops )
    ysLstDestroy( obj->data.intfval.ops, (ysmff) 0);
  if ( obj->data.intfval.attrs )
    ysLstDestroy( obj->data.intfval.attrs, (ysmff) 0);
}


STATICF void yrDestroyPar( yrpar* par)
{
  if ( !par )
    return;
  if ( par->name )
  {
    ysmGlbFree( par->name);
    par->name = (char*)0;
  }
  ysmGlbFree( par);
}


STATICF void yrDestroyOperation( yrobj* obj, ysmff usrpFree, ysmff objFree)
{
  if ( obj->data.opval.raises )
    ysLstDestroy( obj->data.opval.raises, (ysmff) 0);
  if ( obj->data.opval.pars )
    ysLstDestroy( obj->data.opval.pars, (ysmff) yrDestroyPar);
  if ( obj->data.opval.ctxts )
    ysLstDestroy( obj->data.opval.ctxts, (ysmff) ysmFGlbFree);
}

STATICF void yrDestroyStruct( yrobj* obj, ysmff usrpFree, ysmff objFree)
{
  ysle* le;

  if ( obj->data.sval.mbrs )
  {
    for ( le = ysLstHead(obj->data.sval.mbrs); le; le = ysLstNext(le))
    {
      yrstrmbr* mem = (yrstrmbr*) ysLstVal(le);

      if ( mem->name )
      {
	ysmGlbFree( (dvoid*)mem->name);
        mem->name = (char*)0;
      }
    }
    ysLstDestroy( obj->data.sval.mbrs, (ysmff)ysmFGlbFree);
    obj->data.sval.mbrs = (yslst*)0;
  }
}

STATICF void yrDestroyUnion( yrobj* obj, ysmff usrpFree, ysmff objFree)
{
  ysle* le;

  if ( obj->data.uval.arms )
  {
    for ( le = ysLstHead(obj->data.uval.arms); le; le = ysLstNext(le))
    {
      yrunmbr* mem = (yrunmbr*) ysLstVal(le);
      if ( mem->name )
      {
	ysmGlbFree( (dvoid*)mem->name);
	mem->name = (char*)0;
      }
      if ( mem->label._type )
        yotkFreeWaf( mem->label._type, (ysmff)ysmFGlbFree);
      if ( mem->label._value )
        ysmGlbFree( (dvoid*)mem->label._value);
    }
    ysLstDestroy( obj->data.uval.arms, (ysmff) ysmFGlbFree);
  }
}

STATICF void yrDestroyEnum( yrobj* obj, ysmff usrpFree, ysmff objFree)
{
  if ( obj->data.eval.mbrs )
    ysLstDestroy( obj->data.eval.mbrs, (ysmff) 0);
}

STATICF void yrDestroyRep( yrobj* obj, ysmff usrpFree, ysmff objFree)
{
  if ( obj && obj->data.repval )
  {
    yrobj* anon;

    while ( (anon = (yrobj*) ysLstDeq( obj->data.repval->anon)) )
      yrDestroyObj( anon, (yslst*)0, usrpFree, objFree);
    ysLstDestroy( obj->data.repval->anon, (ysmff) 0);
    ysmGlbFree( obj->data.repval);
    obj->data.repval = (yrprivate*)0;
  }
}


static yrclean yrCleanupFuncs[] =
  {
    (yrclean)0,				
    (yrclean)0,				
    yrDestroyRep,		        
    (yrclean)0,				
    yrDestroyConstant,			
    yrDestroyStruct,			
    yrDestroyInterface,			
    (yrclean)0,				
    yrDestroyOperation,			
    (yrclean)0,				
    (yrclean)0,				
    yrDestroyStruct,			
    yrDestroyUnion,			
    yrDestroyEnum,			
    (yrclean)0,				
    (yrclean)0,				
    (yrclean)0,				
    (yrclean)0				
  };



void yrDestroyObj( yrobj* obj, yslst* deferred, ysmff usrpFree, ysmff objFree)
{
  if ( obj == (yrobj*)0 )
    return;

  if (yrCleanupFuncs[obj->tag])
    (*yrCleanupFuncs[obj->tag])(obj, usrpFree, objFree);

  if ( obj->contents )           
  {                              
    yrobj* o;

    if ( deferred )              
    {
      while ( (o = (yrobj*) ysLstDeq(obj->contents)) )
      {
#ifdef NEVER
        if ( (obj->tag == yrdkInterface) )
        {
          if ( o->defined_in == obj )
            ysLstEnq( deferred, (dvoid*) o);
        }
        else
          ysLstEnq( deferred, (dvoid*) o);
#endif
        switch (obj->tag)
        {
          case  yrdkInterface:
            if ( o->defined_in != obj )
              continue;
            
          case yrdkStruct:
          case yrdkUnion:
          case yrdkException:
            ysLstEnq( deferred, (dvoid*) o);
            break;
          default:
            yrDestroyObj( o, deferred, usrpFree, objFree);
            break;
        }
      }
    }
    ysLstDestroy( obj->contents, (ysmff)0);
    obj->contents = (yslst*) 0;
  }

  obj->tag = yrdknone;

  if ( obj->srcnm )
  {
    ysmGlbFree((dvoid*) obj->srcnm);
    obj->srcnm = (char*) 0;
  }

  if ( obj->repid )
  {
    ysmGlbFree((dvoid*) obj->repid);
    obj->repid = (char*) 0;
  }
    
  if ( obj->name )
  {
    ysmGlbFree((dvoid*) obj->name);
    obj->name = (char*) 0;
  }

  if ( obj->version )
  {
    ysmGlbFree((dvoid*) obj->version);
    obj->version = (char*) 0;
  }

  if ( obj->usrp && usrpFree )
  {
    (*usrpFree)((dvoid*) obj->usrp);
    obj->usrp = (dvoid*)0;
  }

  if ( obj->typeCode )
  {
    yotkFreeWaf( obj->typeCode, (ysmff)ysmFGlbFree);
    obj->typeCode = (yotk*)0;
  }

  if ( obj->or && objFree )
  {
    (*objFree)( obj->or);
    obj->or = (dvoid*)0;
  }

  ysmGlbFree((dvoid*) obj);
}



