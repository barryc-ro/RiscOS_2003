/* mx/src/yr/yrrepos.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/


 
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
 
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif

#ifndef YRCORBAI_H
#include <yrcorbaI.h>
#endif
 
#ifndef YR_ORACLE
#include <yr.h>
#endif
 
#ifndef YOORB_ORACLE
#include <yoorb.h>
#endif
 
#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif

externdef ysidDecl(CORBA_Repository_implid) = "ORA_Repository";




 
CORBA_Contained CORBA_Repository_lookup_i(
     CORBA_Repository or, yoenv* ev, CORBA_ScopedName search_name)
{
  return CORBA_Container_lookup_i( (CORBA_Container) or, ev, search_name);
}
 


 
CORBA_ContainedSeq CORBA_Repository_contents_i(
     CORBA_Repository or, yoenv* ev, CORBA_DefinitionKind limit_type,
     boolean exclude_inherited)
{
  yslst* volatile cntnts = (yslst*)0;
  CORBA_ContainedSeq seq;
 
  yseTry
  {
    cntnts = yrContents( yrCORBAtoYR( (CORBA_IRObject)or),
                         yrDefKindToYrdk(limit_type), exclude_inherited);
  }
  yseCatchAll
  {
    if ( cntnts )
      ysLstDestroy( (dvoid*) cntnts, (ysmff)0);
    cntnts = (yslst*) 0;
  }
  yseEnd
 
  if ( cntnts )           
  {
    yslst* newlist = ysLstCreate();
    yrobj* obj;

    while ( (obj = (yrobj*) ysLstDeq( cntnts)) )
    {
      if ( yrGetKind(obj) == yrdkPrimitive )
        continue;
      else
        ysLstEnq( newlist, obj);
    }
    ysLstDestroy( cntnts, (ysmff)0);
    cntnts = newlist;
  }
  yrObjListToSeq( cntnts, (yr_objseq*) &seq);
  if ( cntnts )
    ysLstDestroy( (yslst*)cntnts, (ysmff)0);
  return seq;
}
 

 
CORBA_ContainedSeq CORBA_Repository_lookup_name_i(
     CORBA_Repository or, yoenv* ev, CORBA_Identifier search_name,
     sb4 levels_to_search, CORBA_DefinitionKind limit_type,
     boolean exclude_inherited)
{
  return CORBA_Container_lookup_name_i( (CORBA_Container) or, ev,
                                        search_name, levels_to_search,
                                        limit_type, exclude_inherited);
}
 


 
CORBA_Container_DescriptionSeq CORBA_Repository_describe_contents_i(
     CORBA_Repository or, yoenv* ev, CORBA_DefinitionKind limit_type,
     boolean exclude_inherited, sb4 max_returned_objs)
{
  return CORBA_Container_describe_contents_i( (CORBA_Container) or, 
                                              ev, limit_type, 
                                              exclude_inherited,
                                              max_returned_objs);
}
 

 
CORBA_Contained CORBA_Repository_lookup_id_i(
     CORBA_Repository or, yoenv* ev, CORBA_RepositoryId search_id)
{
  yrobj* result;
 
  yseTry
  {
    result = yrLookupId( yrCORBAtoYR( (CORBA_IRObject) or), search_id);
  }
  yseCatchAll
  {
    result = (yrobj*)0;
  }
  yseEnd
  return yoDuplicate( yrYRtoCORBA(result));
}
 

 
CORBA_PrimitiveDef CORBA_Repository_get_primitive_i(
     CORBA_Repository or, yoenv* ev, CORBA_PrimitiveKind kind)
{
  yrobj* result = yrGetPrimitive( yrCORBAtoYR( (CORBA_IRObject) or), kind);
 
  return yoDuplicate( yrYRtoCORBA( result));
}
 

 
CORBA_DefinitionKind CORBA_Repository__get_def_kind_i(
     CORBA_Repository or, yoenv* ev)
{
  return CORBA_IRObject__get_def_kind_i( (CORBA_IRObject) or, ev);
}
 
#ifdef NEVER



CORBA_Repository CORBA_Repository__get_self_i( CORBA_Repository or, yoenv* ev)
{
  yrobj* rep = (yrobj*) yoGetImplState( or);

  return yoDuplicate( (dvoid*) yrYRtoCORBA(rep));
}
#endif


 
externdef struct CORBA_Repository__tyimpl CORBA_Repository__impl =
 {
  CORBA_Repository_lookup_id_i,
  CORBA_Repository_get_primitive_i,
  CORBA_Repository_lookup_i,
  CORBA_Repository_contents_i,
  CORBA_Repository_lookup_name_i,
  CORBA_Repository_describe_contents_i,
  CORBA_Repository__get_def_kind_i
 };




void Init_CORBA_Repository( yrobj* rep)
{
  YR_SET_IMPL(CORBA_Repository, FALSE, rep);
  YR_IMPL_READY(CORBA_Repository, 0);
}

void Term_CORBA_Repository()
{
  YR_IMPL_DEACTIVATE(CORBA_Repository);
}
