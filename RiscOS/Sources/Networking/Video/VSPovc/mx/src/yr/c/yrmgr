/* mx/src/yr/yrmgr.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

#ifndef YO_ORACLE
#include <yo.h>
#endif

#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif

#ifndef YRMGIDLI_H
#include <yrmgidlI.h>
#endif

#ifndef YR_ORACLE
#include <yr.h>
#endif

#ifndef YR0_ORACLE
#include <yr0.h>
#endif

#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif

#ifndef YRTYPIDL_IDL
#include <yrtypidl.h>
#endif



void yr_mgr_load_i( yr_mgr or, yoenv* ev, yr_path fn)
{
  yrmgrctx* ctx = yoGetImplState((dvoid*) or);
  yslst* newldlst;

  newldlst = yrmgrLoad( ctx->repository, fn);
  if ( ctx->loadlst )
  {
    dvoid* f;
    while ( (f = ysLstDeq( newldlst)) )
      ysLstEnq( ctx->loadlst, f);
    ysLstDestroy( newldlst, (ysmff)0);
  } 
  else
    ctx->loadlst = newldlst;
}



void yr_mgr_shutdown_i( yr_mgr or, yoenv* ev)
{
  yoShutdown( (ysque*)0);
}




yr_pathSeq yr_mgr__get_loadlist_i( yr_mgr or, yoenv* ev)
{
  yrmgrctx* ctx = yoGetImplState((dvoid*) or);
  ysle* le;
  sword i;
  volatile yr_pathSeq seq = {0,0,0};
  sword nelems = ysLstCount( ctx->loadlst);

  if ( nelems > 0 )
    seq._buffer = (yr_path*) yoAlloc( sizeof(yr_path) * nelems);
  yseTry
  {
    for ( i = 0, le = ysLstHead(ctx->loadlst); le; i++, le = ysLstNext(le))
    {
      seq._buffer[i] = ysStrDupWaf( (char*) ysLstVal(le), yoAlloc);
      seq._length++;
    } 
  }
  yseCatchAll
  {
    yr_pathSeq__free( (yr_pathSeq*) &seq, yoFree);
    yseRethrow;
  }
  yseEnd
  return seq;
}





CORBA_Repository yr_mgr__get_repository_i( yr_mgr or, yoenv* ev)
{
  yrmgrctx* ctx = (yrmgrctx*) yoGetImplState( or);

  return yoDuplicate( (dvoid*) yrYRtoCORBA(ctx->repository));
}





externdef struct yr_mgr__tyimpl yr_mgr__impl =
 {
  yr_mgr_load_i,
  yr_mgr_shutdown_i,
  yr_mgr__get_loadlist_i,
  yr_mgr__get_repository_i
 };







yslst* yrmgrLoad( yrobj* repository, CONST char* path)
{
  CONST char* fn;
  noreg char fullfn[SYSFP_MAX_PATHLEN];
  noreg ub4 nobjs;
  yrldblk* noreg data;
  yslst* noreg files = (yslst*)0;
  noreg boolean isdir = FALSE;
  yslst* loadlst;
  boolean openErr = FALSE;

  NOREG(files);
  NOREG(fullfn);
  NOREG(isdir);
  NOREG(nobjs);
  NOREG(data);

  if ( sysfpIsDir( path) )                   
  {
    isdir = TRUE;
    files = sysfpGetDir( path);
    if ( !files )
      openErr = TRUE;
  }
  else                                       
  {
    openErr = !sysfpAccess( path, "r");
    if ( !openErr )
    {
      files = ysLstCreate();
      isdir = FALSE;
      ysLstEnq(files, (dvoid*)path);
    }
  }

  if ( openErr )                             
  {
    yr_mgr_fileNotFound ex;

    ysRecord( YR_MSG(401, YRSRV_FAC), YSLSEV_DEBUG(1), (char*)0, 
                YSLSTR(path), YSLEND);
    ex.path = ysStrDupWaf( path, yoAlloc);
    yseThrowObj( YR_MGR_EX_FILENOTFOUND, ex);
  }

  loadlst = ysLstCreate();
  while ( (fn = ysLstDeq( files)) )
  {
    if ( isdir )
      sysfpForm( (char*) fullfn, path, fn, SYSFPKIND_NONE);
    else
      strcpy( (char*)fullfn, fn);

    if ( !sysfpIsDir( (char*) fullfn) )
    {
      ysRecord( YR_MSG(300, YRSRV_FAC), YSLSEV_DEBUG(1), (char*)0, 
                YSLSTR((char*)fullfn), YSLEND);

      yseTry
      {
        yrRead( repository, (char*) fullfn, (ub4*)&nobjs, (yrldblk**)&data);
        ysYield();
        yrMergeFile( data, nobjs, FALSE);
        ysYield();
        yrFreeMergeData( data, nobjs);
        ysmGlbFree( (dvoid*) data);
        ysLstEnq( loadlst, (dvoid*) ysStrDup((char*)fullfn));
      }
      yseCatch( YR_EX_BADHDR )
      {
        ysRecord( YR_MSG(400, YRSRV_FAC), YSLSEV_DEBUG(1), (char*)0, 
                  YSLSTR(fullfn), YSLEND);
      }
      yseCatchObj( YR_MGR_EX_LOADCONFLICT, yr_mgr_LoadConflict, ex)
      {
        yr_mgr_LoadConflict newex;    

        newex.filename = ysStrDupWaf( (char*) fullfn, yoAlloc);
        newex.undefined = ex.undefined;
        newex.redefined = ex.redefined;

        yrmgrReportLoadConflict( &newex, YSLSEV_DEBUG(1));
        if ( isdir )
          ysLstDestroy( files, ysmFGlbFree);
        else
          ysLstDestroy( files, (ysmff)0);
        yrFreeMergeData( data, nobjs);
        ysmGlbFree( (dvoid*) data);
        ysLstDestroy( loadlst, ysmFGlbFree);
        yseThrowObj( YR_MGR_EX_LOADCONFLICT, newex);
      }
      yseCatchObj( YR_EX_REDEFINED, char*, redef)
      {
        yr_mgr_LoadConflict ex;

        ysRecord( YR_MSG(402, YRSRV_FAC), YSLSEV_DEBUG(1), (char*)0, 
                  YSLSTR(redef), YSLSTR(fullfn), YSLEND);
        ex.filename = ysStrDupWaf( (char*) fullfn, yoAlloc);
        ex.undefined._length = 0;
        ex.redefined._length = 1;
        ex.redefined._buffer = yoAlloc( sizeof(yr_repid));
        ex.redefined._buffer[0] = ysStrDupWaf(redef, yoAlloc);
        if ( isdir )
          ysLstDestroy( files, ysmFGlbFree);
        else
          ysLstDestroy( files, (ysmff)0);
        yrFreeMergeData( data, nobjs);
        ysmGlbFree( (dvoid*) data);
        ysLstDestroy( loadlst, ysmFGlbFree);
        yseThrowObj( YR_MGR_EX_LOADCONFLICT, ex);
      }
      yseCatch ( YR_EX_BADTYPE)
      {
        yr_mgr_fileCorrupted ex;

        ex.path = ysStrDupWaf( (char*)fullfn, yoAlloc);
        if ( isdir )
          ysLstDestroy( files, ysmFGlbFree);
        else
          ysLstDestroy( files, (ysmff)0);
        ysLstDestroy( loadlst, ysmFGlbFree);
        yseThrowObj( YR_MGR_EX_FILECORRUPTED, ex);
      }
      yseCatch( YR_EX_READ_FAIL)
      {
        yr_mgr_fileCorrupted ex;
  
        ex.path = ysStrDupWaf( (char*)fullfn, yoAlloc);
        if ( isdir )
          ysLstDestroy( files, ysmFGlbFree);
        else
          ysLstDestroy( files, (ysmff)0);
        ysLstDestroy( loadlst, ysmFGlbFree);
        yseThrowObj( YR_MGR_EX_FILECORRUPTED, ex);
      }
      yseCatch( YR_EX_OPEN_FAIL)
      {    
        yr_mgr_fileNotFound ex;

        ysRecord( YR_MSG(401, YRSRV_FAC), YSLSEV_DEBUG(1), (char*)0, 
                  YSLSTR((char*)fullfn), YSLEND);
        ex.path = ysStrDupWaf( (char*)fullfn, yoAlloc);
        ysLstDestroy( loadlst, ysmFGlbFree);
        yseThrowObj( YR_MGR_EX_FILENOTFOUND, ex);
      }
      yseEnd
    }
    if ( isdir )
      ysmGlbFree( (dvoid*)fn);
  }

  if ( isdir )
    ysLstDestroy( files, ysmFGlbFree);
  else
  {
    ysLstDestroy( files, (ysmff)0);
    if ( ysLstCount( loadlst) == 0 )      
    {
      yr_mgr_fileCorrupted ex;

      ysLstDestroy( loadlst, (ysmff)0);
      ex.path = ysStrDupWaf( (char*)path, yoAlloc);
      yseThrowObj( YR_MGR_EX_FILECORRUPTED, ex);
    }
  }

  return loadlst;
}



void yrmgrReportLoadConflict( dvoid* err, ub4 severity)
{
  yr_mgr_LoadConflict* ex = (yr_mgr_LoadConflict*) err;
  ub4 i;

  ysRecord( YR_MSG(8, YRSRV_FAC), severity, (char*)0, 
            YSLSTR(ex->filename), YSLEND);
  for ( i = 0; i < ex->undefined._length; i++)
    ysRecord( YR_MSG(9, YRSRV_FAC), severity, (char*)0, 
              YSLSTR(ex->undefined._buffer[i]), YSLEND);
  for ( i = 0; i < ex->redefined._length; i++)
    ysRecord( YR_MSG(10, YRSRV_FAC), severity, (char*)0, 
              YSLSTR(ex->redefined._buffer[i]), YSLEND);
}



void yrmgrInit( yrmgrctx* ctx)
{
  yoSetImpl( yr_mgr__id, ctx->tag,
             yr_mgr__stubs, &yr_mgr__impl,
             (yoload)0, TRUE, (dvoid*) ctx);
  yoImplReady( yr_mgr__id, ctx->tag, (ysque*)0);
}




void yrmgrTerm( yrmgrctx* ctx)
{
  yoImplDeactivate( yr_mgr__id, ctx->tag);
  ysLstDestroy( ctx->loadlst, ysmFGlbFree);
}

