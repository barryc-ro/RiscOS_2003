/* mx/src/yr/yrunion.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/


 
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
 
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif

#ifndef YRCORBAI_H
#include <yrcorbaI.h>
#endif
 
#ifndef YR_ORACLE
#include <yr.h>
#endif
 
#ifndef YOORB_ORACLE
#include <yoorb.h>
#endif
 
#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif
 
externdef ysidDecl(CORBA_UnionDef_implid) = "ORA_UnionDef";

STATICF void yrUnionMbrsToSeq( yslst* arms, CORBA_UnionMemberSeq* seq)
{
  CORBA_UnionMember dummy;
  ysle* le;
  sword i;
 
  seq->_maximum = 0;
  if ( arms && (ysLstCount(arms) > 0) )
  {
    seq->_length = ysLstCount(arms);
    seq->_buffer = (CORBA_UnionMember*)
                      yoAlloc( sizeof(CORBA_UnionMember) * seq->_length);
    for ( i = 0, le = ysLstHead(arms); le; i++, le = ysLstNext(le))
    {
      yrunmbr* m = (yrunmbr*) ysLstVal(le);
 
      dummy.name = m->name;
      dummy.label = m->label;
      dummy.type = (yotk*) yrGetTypeCode( m->type);
      dummy.type_def = (CORBA_IDLType) yrYRtoCORBA( m->type);
      CORBA_UnionMember__copy( &(seq->_buffer[i]), &dummy, yoAlloc);
    }
  }
  else
    seq->_length = 0;
}
 





CORBA_Contained_Description CORBA_UnionDef_describe_i( 
    CORBA_UnionDef or, yoenv* ev)
{
  CORBA_Contained_Description result;
  CORBA_TypeDescription* noreg desc = (CORBA_TypeDescription*)0;
  yotk* noreg tc = (yotk*) 0;
 
  NOREG(desc);
  NOREG(tc);
  yseTry
  {
    CONST yotk* temp = YCTC_CORBA_TypeDescription;

    desc = (CORBA_TypeDescription*)
                yoAlloc( sizeof( CORBA_TypeDescription));
    CLRSTRUCT( *desc);
 
    desc->name = CORBA_UnionDef__get_name_i(or, ev);
    desc->id = CORBA_UnionDef__get_id_i( or, ev);
    desc->defined_in = CORBA_UnionDef__get_defined_in_i( or, ev);
    desc->version = CORBA_UnionDef__get_version_i( or, ev);
    desc->type = CORBA_UnionDef__get_type_i( or, ev);
    yotkCopyVal( yoTcTypeCode, (dvoid*) &tc, (dvoid*) &temp, yoAlloc);
  }
  yseCatchAll
  {
    if ( desc )
    {
      if ( desc->name )
        yoFree( (dvoid*) desc->name);
      if ( desc->id )
        yoFree( (dvoid*) desc->id);
      if ( desc->defined_in )
        yoFree( (dvoid*) desc->defined_in);
      if ( desc->version )
        yoFree( (dvoid*) desc->version);
      if ( desc->type )
        yotkFreeVal( yoTcTypeCode, &desc->type, yoFree);
      if ( tc )
        yotkFreeVal( yoTcTypeCode, (dvoid*) &tc, yoFree);
    }
    yseRethrow;
  }
  yseEnd
 
  result.kind = CORBA_dk_Typedef;
  result.value._type = tc;
  result.value._value = desc;
  return result;
}
 


CORBA_Contained CORBA_UnionDef_lookup_i( 
    CORBA_UnionDef or, yoenv* ev, CORBA_ScopedName search_name)
{
  return CORBA_Container_lookup_i( (CORBA_Container) or, ev, search_name);
}
 


CORBA_ContainedSeq CORBA_UnionDef_contents_i( 
    CORBA_UnionDef or, yoenv* ev, CORBA_DefinitionKind limit_type, 
    boolean exclude_inherited)
{
  return CORBA_Container_contents_i( (CORBA_Container) or, ev,
                                     limit_type,
                                     exclude_inherited);
}
 


CORBA_ContainedSeq CORBA_UnionDef_lookup_name_i( 
    CORBA_UnionDef or, yoenv* ev, CORBA_Identifier search_name, 
    sb4 levels_to_search, CORBA_DefinitionKind limit_type, 
    boolean exclude_inherited)
{
  return CORBA_Container_lookup_name_i( (CORBA_Container) or, ev,
                                        search_name, levels_to_search,
                                        limit_type, exclude_inherited);
}
 


CORBA_Container_DescriptionSeq CORBA_UnionDef_describe_contents_i( 
    CORBA_UnionDef or, yoenv* ev, CORBA_DefinitionKind limit_type, 
    boolean exclude_inherited, sb4 max_returned_objs)
{
  return CORBA_Container_describe_contents_i( (CORBA_Container) or,
                                              ev, limit_type,
                                              exclude_inherited,
                                              max_returned_objs);
}



CORBA_DefinitionKind CORBA_UnionDef__get_def_kind_i( 
    CORBA_UnionDef or, yoenv* ev)
{
  return CORBA_IRObject__get_def_kind_i( (CORBA_IRObject) or, ev);
}
 


CORBA_RepositoryId CORBA_UnionDef__get_id_i( CORBA_UnionDef or, yoenv* ev)
{
  return CORBA_Contained__get_id_i( (CORBA_Contained) or, ev);
}
 


CORBA_Identifier CORBA_UnionDef__get_name_i( CORBA_UnionDef or, yoenv* ev)
{
  return CORBA_Contained__get_name_i( (CORBA_Contained)or, ev);
}
 


CORBA_VersionSpec CORBA_UnionDef__get_version_i( CORBA_UnionDef or, yoenv* ev)
{
  return CORBA_Contained__get_version_i( (CORBA_Contained) or, ev);
}
 


CORBA_Container CORBA_UnionDef__get_defined_in_i( CORBA_UnionDef or, yoenv* ev)
{
  return CORBA_Contained__get_defined_in_i( (CORBA_Contained) or, ev);
}
 


CORBA_ScopedName CORBA_UnionDef__get_absolute_name_i( 
    CORBA_UnionDef or, yoenv* ev)
{
  return CORBA_Contained__get_absolute_name_i( (CORBA_Contained) or, ev);
}
 


CORBA_Repository CORBA_UnionDef__get_containing_repository_i( 
    CORBA_UnionDef or, yoenv* ev)
{
  return CORBA_Contained__get_containing_repository_i((CORBA_Contained)or, ev);
}
 


yotk* CORBA_UnionDef__get_type_i( CORBA_UnionDef or, yoenv* ev)
{
  return CORBA_IDLType__get_type_i( (CORBA_IDLType) or, ev);
}


 
yotk* CORBA_UnionDef__get_discriminator_type_i( CORBA_UnionDef or, yoenv* ev)
{
  yrobj* obj = yrCORBAtoYR( (CORBA_IRObject) or);
 
  return yrCopyTypeCode( yrUnionData(obj).disctype);
}
 

 
CORBA_IDLType CORBA_UnionDef__get_discriminator_type_def_i(
     CORBA_UnionDef or, yoenv* ev)
{
  yrobj* obj = yrCORBAtoYR( (CORBA_IRObject) or);
 
  return yoDuplicate( yrYRtoCORBA( yrUnionData(obj).disctype));
}
 

 
CORBA_UnionMemberSeq CORBA_UnionDef__get_members_i(
     CORBA_UnionDef or, yoenv* ev)
{
  CORBA_UnionMemberSeq result;
  yrobj* obj = yrCORBAtoYR( (CORBA_IRObject) or);
 
  yrUnionMbrsToSeq( yrUnionData(obj).arms, &result);
  return result;
}
 

 
 
externdef struct CORBA_UnionDef__tyimpl CORBA_UnionDef__impl =
 {
  CORBA_UnionDef__get_discriminator_type_i,
  CORBA_UnionDef__get_discriminator_type_def_i,
  CORBA_UnionDef__get_members_i,
  CORBA_UnionDef_describe_i,
  CORBA_UnionDef__get_id_i,
  CORBA_UnionDef__get_name_i,
  CORBA_UnionDef__get_version_i,
  CORBA_UnionDef__get_defined_in_i,
  CORBA_UnionDef__get_absolute_name_i,
  CORBA_UnionDef__get_containing_repository_i,
  CORBA_UnionDef__get_def_kind_i,
  CORBA_UnionDef__get_type_i,
  CORBA_UnionDef_lookup_i,
  CORBA_UnionDef_contents_i,
  CORBA_UnionDef_lookup_name_i,
  CORBA_UnionDef_describe_contents_i
 };
 




void Init_CORBA_UnionDef()
{
  YR_SET_IMPL(CORBA_UnionDef, FALSE, 0);
  YR_IMPL_READY(CORBA_UnionDef, 0);
}

void Term_CORBA_UnionDef()
{
  YR_IMPL_DEACTIVATE(CORBA_UnionDef);
}
