/* mx/src/yr/yrconst.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/


 
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
 
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
 
#ifndef YRCORBAI_H
#include <yrcorbaI.h>
#endif

#ifndef YR_ORACLE
#include <yr.h>
#endif
 
#ifndef YOORB_ORACLE
#include <yoorb.h>
#endif
 
#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif

externdef ysidDecl(CORBA_ConstantDef_implid) = "ORA_ConstantDef";




 
CORBA_Contained_Description CORBA_ConstantDef_describe_i(
     CORBA_ConstantDef or, yoenv* ev)
{
  CORBA_Contained_Description result;
  CORBA_ConstantDescription* noreg desc = (CORBA_ConstantDescription*)0;
  yotk* noreg tc = (yotk*) 0;

  NOREG(desc);
  NOREG(tc);
  yseTry
  {
    CONST yotk* temp = YCTC_CORBA_ConstantDescription;

    desc = (CORBA_ConstantDescription*) 
                yoAlloc( sizeof( CORBA_ConstantDescription));
    CLRSTRUCT( *desc);

    desc->name = CORBA_ConstantDef__get_name_i(or, ev);
    desc->id = CORBA_ConstantDef__get_id_i( or, ev);
    desc->defined_in = CORBA_ConstantDef__get_defined_in_i( or, ev);
    desc->version = CORBA_ConstantDef__get_version_i( or, ev);
    desc->type = CORBA_ConstantDef__get_type_i( or, ev);
    desc->value = CORBA_ConstantDef__get_value_i( or, ev);
    yotkCopyVal( yoTcTypeCode, (dvoid*) &tc, (dvoid*) &temp, yoAlloc);
  }
  yseCatchAll
  {
    if ( desc )
    {
      if ( desc->name )
        yoFree( (dvoid*) desc->name);
      if ( desc->id )
        yoFree( (dvoid*) desc->id);
      if ( desc->defined_in )
        yoFree( (dvoid*) desc->defined_in);
      if ( desc->version )
        yoFree( (dvoid*) desc->version);
      if ( desc->type )
        yotkFreeVal( yoTcTypeCode, &desc->type, yoFree);
      if ( desc->value._type )
      {
        if ( desc->value._value )
          yotkFreeVal( yoTcAny, (dvoid*) &desc->value, yoFree);
        else
          yotkFreeVal( yoTcTypeCode, (dvoid*) &desc->value._type, yoFree);
      }
      if ( tc )
        yotkFreeVal( yoTcTypeCode, (dvoid*) &tc, yoFree);
    }
    yseRethrow;
  }
  yseEnd

  result.kind = CORBA_dk_Constant;
  result.value._type = tc;
  result.value._value = desc;
  return result;
}
 

 
CORBA_DefinitionKind CORBA_ConstantDef__get_def_kind_i(
     CORBA_ConstantDef or, yoenv* ev)
{
  return CORBA_IRObject__get_def_kind_i( (CORBA_IRObject) or, ev);
}
 

 
CORBA_RepositoryId CORBA_ConstantDef__get_id_i(
     CORBA_ConstantDef or, yoenv* ev)
{
  return CORBA_Contained__get_id_i( (CORBA_Contained) or, ev);
}
 

 
CORBA_Identifier CORBA_ConstantDef__get_name_i(
     CORBA_ConstantDef or, yoenv* ev)
{
  return CORBA_Contained__get_name_i( (CORBA_Contained)or, ev);
}
 

 
CORBA_VersionSpec CORBA_ConstantDef__get_version_i(
     CORBA_ConstantDef or, yoenv* ev)
{
  return CORBA_Contained__get_version_i( (CORBA_Contained) or, ev);
}
 

 
CORBA_Container CORBA_ConstantDef__get_defined_in_i(
     CORBA_ConstantDef or, yoenv* ev)
{
  return CORBA_Contained__get_defined_in_i( (CORBA_Contained) or, ev);
}
 

 
CORBA_ScopedName CORBA_ConstantDef__get_absolute_name_i(
     CORBA_ConstantDef or, yoenv* ev)
{
  return CORBA_Contained__get_absolute_name_i( (CORBA_Contained) or, ev);
}
 

 
CORBA_Repository CORBA_ConstantDef__get_containing_repository_i(
     CORBA_ConstantDef or, yoenv* ev)
{
  return CORBA_Contained__get_containing_repository_i((CORBA_Contained)or, ev);
}
 

 
yotk* CORBA_ConstantDef__get_type_i( CORBA_ConstantDef or, yoenv* ev)
{
  yrobj* obj = yrCORBAtoYR( (CORBA_IRObject)or);
 
  return yrCopyTypeCode( yrConstData(obj).type);
}
 

 
CORBA_IDLType CORBA_ConstantDef__get_type_def_i(
     CORBA_ConstantDef or, yoenv* ev)
{
  yrobj* obj = yrCORBAtoYR( (CORBA_IRObject)or);
 
  return yoDuplicate( yrYRtoCORBA( yrConstData(obj).type));
}
 

 
yoany CORBA_ConstantDef__get_value_i( CORBA_ConstantDef or, yoenv* ev)
{
  yrobj* obj = yrCORBAtoYR( (CORBA_IRObject)or);
  yoany result;
 
  yotkCopyVal( yoTcAny, &result, &(yrConstData(obj).val), yoAlloc);
  return result;
}
 

 
 
externdef struct CORBA_ConstantDef__tyimpl CORBA_ConstantDef__impl =
 {
  CORBA_ConstantDef__get_type_i,
  CORBA_ConstantDef__get_type_def_i,
  CORBA_ConstantDef__get_value_i,
  CORBA_ConstantDef_describe_i,
  CORBA_ConstantDef__get_id_i,
  CORBA_ConstantDef__get_name_i,
  CORBA_ConstantDef__get_version_i,
  CORBA_ConstantDef__get_defined_in_i,
  CORBA_ConstantDef__get_absolute_name_i,
  CORBA_ConstantDef__get_containing_repository_i,
  CORBA_ConstantDef__get_def_kind_i
 };
 




void Init_CORBA_ConstantDef()
{
  YR_SET_IMPL(CORBA_ConstantDef, FALSE, 0);
  YR_IMPL_READY(CORBA_ConstantDef, 0);
}

void Term_CORBA_ConstantDef()
{
  YR_IMPL_DEACTIVATE(CORBA_ConstantDef);
}
