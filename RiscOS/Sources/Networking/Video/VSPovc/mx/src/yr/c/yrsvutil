/* mx/src/yr/yrsvutil.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/


 
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
 
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
 
#ifndef YR_ORACLE
#include <yr.h>
#endif

#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif

externdef ysidDecl(YR_EX_UNIMPLEMENTED) = "::YR_EX_UNIMPLEMENTED";
 
CORBA_IRObject yrCreateCORBA( yrobj* obj)
{
  CONST char* intf_id;
  CONST char* impl_id;
 
  switch (yrGetKind(obj))
  {
    case yrdkRepository:
      intf_id = CORBA_Repository__id;
      impl_id = CORBA_Repository_implid;
      break;
    case yrdkAttribute:
      intf_id = CORBA_AttributeDef__id;
      impl_id = CORBA_AttributeDef_implid;
      break;
    case yrdkConstant:
      intf_id = CORBA_ConstantDef__id;
      impl_id = CORBA_ConstantDef_implid;
      break;
    case yrdkException:
      intf_id = CORBA_ExceptionDef__id;
      impl_id = CORBA_ExceptionDef_implid;
      break;
    case yrdkInterface:
      intf_id = CORBA_InterfaceDef__id;
      impl_id = CORBA_InterfaceDef_implid;
      break;
    case yrdkModule:
      intf_id = CORBA_ModuleDef__id;
      impl_id = CORBA_ModuleDef_implid;
      break;
    case yrdkOperation:
      intf_id = CORBA_OperationDef__id;
      impl_id = CORBA_OperationDef_implid;
      break;
    case yrdkTypedef:
      intf_id = CORBA_TypedefDef__id;
      impl_id = CORBA_TypedefDef_implid;
      break;
    case yrdkAlias:
      intf_id = CORBA_AliasDef__id;
      impl_id = CORBA_AliasDef_implid;
      break;
    case yrdkStruct:
      intf_id = CORBA_StructDef__id;
      impl_id = CORBA_StructDef_implid;
      break;
    case yrdkUnion:
      intf_id = CORBA_UnionDef__id;
      impl_id = CORBA_UnionDef_implid;
      break;
    case yrdkEnum:
      intf_id = CORBA_EnumDef__id;
      impl_id = CORBA_EnumDef_implid;
      break;
    case yrdkPrimitive:
      intf_id = CORBA_PrimitiveDef__id;
      impl_id = CORBA_PrimitiveDef_implid;
      break;
    case yrdkString:
      intf_id = CORBA_StringDef__id;
      impl_id = CORBA_StringDef_implid;
      break;
    case yrdkSequence:
      intf_id = CORBA_SequenceDef__id;
      impl_id = CORBA_SequenceDef_implid;
      break;
    case yrdkArray:
      intf_id = CORBA_ArrayDef__id;
      impl_id = CORBA_ArrayDef_implid;
      break;
    default:
      return CORBA_OBJECT_NIL;
  }
  obj->or = (CORBA_IRObject) yoCreate(intf_id, impl_id, (yoRefData*)0,
                                    (char*) 0, (dvoid*) obj);
  return obj->or;
}


yrobj* yrCORBAtoYR( CORBA_IRObject or)
{
  yrobj* obj;
 
  obj = (yrobj*) yoGetState((dvoid*)or);
  if ( obj == (yrobj*)0 )
    yseThrow( CORBA_IROBJECT_EX_BADOBJ);
  return obj;
}
 
CORBA_IRObject yrYRtoCORBA( yrobj* obj)
{
  if ( obj )
  {
    return obj->or ? obj->or : yrCreateCORBA(obj);
  }
  else
    return (CORBA_IRObject) CORBA_OBJECT_NIL;
}
 
 
void yrObjListToSeq( yslst* list, yr_objseq* seq)
{
  seq->_maximum = 0;
  seq->_buffer = (dvoid*)0;
  if ( !list || (ysLstCount(list) == 0) )
    seq->_length = 0;
  else
  {
    ysle* le;
    sword i;
 
    seq->_length = ysLstCount(list);
    seq->_buffer =
            (CORBA_IRObject*) yoAlloc(sizeof(CORBA_IRObject) * seq->_length);
    for ( i = 0, le = ysLstHead(list); le; i++, le = ysLstNext(le))
    {
      yrobj* obj = ysLstVal(le);
      seq->_buffer[i] = yoDuplicate( yrYRtoCORBA(obj));
    }
  }
}
 
void yrStructMbrsToSeq( yslst* mbrs, CORBA_StructMemberSeq* seq)
{
  CORBA_StructMember dummy;
  sword i;
  ysle* le;
 
  seq->_maximum = 0;
  seq->_buffer = (dvoid*) 0;
  if ( mbrs && (ysLstCount(mbrs) > 0) )
  {
    seq->_length = ysLstCount(mbrs);
    seq->_buffer = (CORBA_StructMember*)
                      yoAlloc( sizeof(CORBA_StructMember) * seq->_length);
    for ( i = 0, le = ysLstHead(mbrs); le; i++, le = ysLstNext(le))
    {
      yrstrmbr* m = (yrstrmbr*) ysLstVal(le);
 
      dummy.name = m->name;
      dummy.type = (yotk*) yrGetTypeCode( m->type);
      dummy.type_def = (CORBA_IDLType) yrYRtoCORBA( m->type);
      CORBA_StructMember__copy( &(seq->_buffer[i]), &dummy, yoAlloc);
    }
  }
  else
    seq->_length = 0;
}
 
yotk* yrCopyTypeCode( yrobj* obj)
{
  CONST yotk* tc;
  yotk* result;
 

  tc = yrGetTypeCode( obj);
  yotkCopyVal( yoTcTypeCode, (dvoid*) &result, (dvoid*) &tc, yoAlloc);
  return result;
}
 
boolean yrIsA( yrobj* obj, yrobj* target)
{
  ysle* le;
 
  if ( obj == target )
    return TRUE;
 
  for (le = ysLstHead( yrInterfaceData(obj).bases); le; le = ysLstNext(le))
  {
    if ( yrIsA( obj, (yrobj*) ysLstVal(le)) )
      return TRUE;
  }
  return FALSE;
}


yrdk yrDefKindToYrdk ( CORBA_DefinitionKind defkind)
{
  switch ( defkind )
  {
    case CORBA_dk_none:
      return yrdknone;
    case CORBA_dk_all:
      return yrdkall;
    case CORBA_dk_Repository:
      return yrdkRepository;
    case CORBA_dk_Attribute:
      return yrdkAttribute;
    case CORBA_dk_Constant:
      return yrdkConstant;
    case CORBA_dk_Exception:
      return yrdkException;
    case CORBA_dk_Interface:
      return yrdkInterface;
    case CORBA_dk_Module:
      return yrdkModule;
    case CORBA_dk_Operation:
      return yrdkOperation;
    case CORBA_dk_Typedef:
      return yrdkTypedef;
    case CORBA_dk_Alias:
      return yrdkAlias;
    case CORBA_dk_Struct:
      return yrdkStruct;
    case CORBA_dk_Union:
      return yrdkUnion;
    case CORBA_dk_Enum:
      return yrdkEnum;
    case CORBA_dk_Primitive:
      return yrdkPrimitive;
    case CORBA_dk_String:
      return yrdkString;
    case CORBA_dk_Sequence:
      return yrdkSequence;
    case CORBA_dk_Array:
      return yrdkArray;
    default:
      return yrdknone;        
  }
}

CORBA_DefinitionKind yrdkToDefKind( yrdk kind)
{
  switch ( kind )
  {
    case yrdknone:
      return CORBA_dk_none;
    case yrdkall:
      return CORBA_dk_all;
    case yrdkRepository:
      return CORBA_dk_Repository;
    case yrdkAttribute:
      return CORBA_dk_Attribute;
    case yrdkConstant:
      return CORBA_dk_Constant;
    case yrdkException:
      return CORBA_dk_Exception;
    case yrdkInterface:
      return CORBA_dk_Interface;
    case yrdkModule:
      return CORBA_dk_Module;
    case yrdkOperation:
      return CORBA_dk_Operation;
    case yrdkTypedef:
      return CORBA_dk_Typedef;
    case yrdkAlias:
      return CORBA_dk_Alias;
    case yrdkStruct:
      return CORBA_dk_Struct;
    case yrdkUnion:
      return CORBA_dk_Union;
    case yrdkEnum:
      return CORBA_dk_Enum;
    case yrdkPrimitive:
      return CORBA_dk_Primitive;
    case yrdkString:
      return CORBA_dk_String;
    case yrdkSequence:
      return CORBA_dk_Sequence;
    case yrdkArray:
      return CORBA_dk_Array;
    default:
      return CORBA_dk_none;        
  }
}

yrpk yrPrimKindToYrpk( CORBA_PrimitiveKind primkind)
{
  switch ( primkind )
  {
    case CORBA_pk_null:
      return yrpknull;
    case CORBA_pk_void:
      return yrpkvoid;
    case CORBA_pk_short:
      return yrpkshort;
    case CORBA_pk_long:
      return yrpklong;
    case CORBA_pk_ushort:
      return yrpkushort;
    case CORBA_pk_ulong:
      return yrpkulong;
    case CORBA_pk_float:
      return yrpkfloat;
    case CORBA_pk_double:
      return yrpkdouble;
    case CORBA_pk_boolean:
      return yrpkboolean;
    case CORBA_pk_char:
      return yrpkchar;
    case CORBA_pk_octet:
      return yrpkoctet;
    case CORBA_pk_any:
      return yrpkany;
    case CORBA_pk_TypeCode:
      return yrpkTypeCode;
    case CORBA_pk_Principal:
      return yrpkPrincipal;
    case CORBA_pk_string:
      return yrpkstring;
    case CORBA_pk_objref:
      return yrpkobjref;
    case CORBA_pk_longlong:
      return yrpklonglong;
    default:
      return yrpknull;     
  }
}

CORBA_PrimitiveKind yrpkToPrimKind( yrpk kind)
{
  switch ( kind )
  {
    case yrpknull:
      return CORBA_pk_null;
    case yrpkvoid:
      return CORBA_pk_void;
    case yrpkshort:
      return CORBA_pk_short;
    case yrpklong:
      return CORBA_pk_long;
    case yrpkushort:
      return CORBA_pk_ushort;
    case yrpkulong:
      return CORBA_pk_ulong;
    case yrpkfloat:
      return CORBA_pk_float;
    case yrpkdouble:
      return CORBA_pk_double;
    case yrpkboolean:
      return CORBA_pk_boolean;
    case yrpkchar:
      return CORBA_pk_char;
    case yrpkoctet:
      return CORBA_pk_octet;
    case yrpkany:
      return CORBA_pk_any;
    case yrpkTypeCode:
      return CORBA_pk_TypeCode;
    case yrpkPrincipal:
      return CORBA_pk_Principal;
    case yrpkstring:
      return CORBA_pk_string;
    case yrpkobjref:
      return CORBA_pk_objref;
    case yrpklonglong:
      return CORBA_pk_longlong;
    default:
      return CORBA_pk_null;
  }
}


