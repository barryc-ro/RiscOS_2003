/* mx/src/yr/yr0util.h */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef YR0UTIL_ORACLE
#define YR0UTIL_ORACLE

#ifndef YRTYPES_ORACLE
#include <yr.h>
#endif
#ifndef YRCORBA_IDL
#include <yrcorba.h>
#endif
#ifndef YOORB_ORACLE
#include <yoorb.h>
#endif
#ifndef YR0_ORACLE
#include <yr0.h>
#endif
#ifndef YEEV_ORACLE
#include <yeev.h>
#endif


void yrMergeFile(yrldblk* data, ub4 nobjs, boolean externok);
void yrFreeMergeData( yrldblk* data, ub4 nobj);
yslst* yrmgrLoad( yrobj* repository, CONST char* path);
void yrmgrReportLoadConflict( dvoid* err, ub4 severity);





CORBA_IRObject yrCreateCORBA( yrobj* obj);




yrobj* yrCORBAtoYR( CORBA_IRObject or);




CORBA_IRObject yrYRtoCORBA( yrobj* obj);





void yrObjListToSeq( yslst* list, yr_objseq* seq);





void yrStructMbrsToSeq( yslst* mbrs, CORBA_StructMemberSeq* seq);




yotk* yrCopyTypeCode( yrobj* obj);





boolean yrIsA( yrobj* obj, yrobj* target);





CORBA_IRObject yrGetCORBA( yrobj* obj);    



externref ysidDecl(CORBA_Repository_implid);
externref ysidDecl(CORBA_AttributeDef_implid);
externref ysidDecl(CORBA_ConstantDef_implid);
externref ysidDecl(CORBA_ExceptionDef_implid);
externref ysidDecl(CORBA_InterfaceDef_implid);
externref ysidDecl(CORBA_ModuleDef_implid);
externref ysidDecl(CORBA_OperationDef_implid);
externref ysidDecl(CORBA_TypedefDef_implid);
externref ysidDecl(CORBA_AliasDef_implid);
externref ysidDecl(CORBA_StructDef_implid);
externref ysidDecl(CORBA_UnionDef_implid);
externref ysidDecl(CORBA_EnumDef_implid);
externref ysidDecl(CORBA_PrimitiveDef_implid);
externref ysidDecl(CORBA_StringDef_implid);
externref ysidDecl(CORBA_SequenceDef_implid);
externref ysidDecl(CORBA_ArrayDef_implid);
externref ysidDecl(CORBA_IRObject_implid);
externref ysidDecl(CORBA_Container_implid);
externref ysidDecl(CORBA_Contained_implid);
externref ysidDecl(CORBA_IDLType_implid);

externref ysidDecl(YR_EX_UNIMPLEMENTED);



typedef struct yrmgrctx
{
  yrobj* repository;           
  yslst* loadlst;              
  sword trace;                 
  char* tag;                   
  boolean servicing;           
                               
  yeev logger;                 
} yrmgrctx;

#define YR_SET_IMPL(intf, stateless, state) \
  yoSetImpl( intf ## __id, \
             intf ## _implid, \
             intf ## __stubs, \
             (dvoid*)&intf ## __impl, \
             (yoload)0, (stateless), (dvoid*) (state))
 
#define YR_IMPL_READY( intf, queue) \
  yoImplReady( intf ## __id, intf ## _implid, (ysque*)(queue))
 
#define YR_IMPL_DEACTIVATE( intf)  \
  yoImplDeactivate( intf ## __id, intf ## _implid)
 
void yrmgrInit( yrmgrctx* ctx);
void yrmgrTerm( yrmgrctx* ctx);

void yrdiiInit( yrobj* repository, CONST char* tag);
void yrdiiTerm( CONST char* tag);


void Init_CORBA_Repository( yrobj* rep);
void Init_CORBA_AttributeDef(void);
void Init_CORBA_ConstantDef(void);
void Init_CORBA_ExceptionDef(void);
void Init_CORBA_InterfaceDef(void);
void Init_CORBA_ModuleDef(void);
void Init_CORBA_OperationDef(void);
void Init_CORBA_TypedefDef(void);
void Init_CORBA_AliasDef(void);
void Init_CORBA_StructDef(void);
void Init_CORBA_UnionDef(void);
void Init_CORBA_EnumDef(void);
void Init_CORBA_PrimitiveDef(void);
void Init_CORBA_StringDef(void);
void Init_CORBA_SequenceDef(void);
void Init_CORBA_ArrayDef(void);
void Init_CORBA_IRObject(void);
void Init_CORBA_Container(void);
void Init_CORBA_Contained(void);
void Init_CORBA_IDLType(void);
void Init_yr_intfdef(yrobj* rep);

void Term_CORBA_Repository(void);
void Term_CORBA_AttributeDef(void);
void Term_CORBA_ConstantDef(void);
void Term_CORBA_ExceptionDef(void);
void Term_CORBA_InterfaceDef(void);
void Term_CORBA_ModuleDef(void);
void Term_CORBA_OperationDef(void);
void Term_CORBA_TypedefDef(void);
void Term_CORBA_AliasDef(void);
void Term_CORBA_StructDef(void);
void Term_CORBA_UnionDef(void);
void Term_CORBA_EnumDef(void);
void Term_CORBA_PrimitiveDef(void);
void Term_CORBA_StringDef(void);
void Term_CORBA_SequenceDef(void);
void Term_CORBA_ArrayDef(void);
void Term_CORBA_IRObject(void);
void Term_CORBA_Container(void);
void Term_CORBA_Contained(void);
void Term_CORBA_IDLType(void);
void Term_yr_intfdef(void);


yrdk yrDefKindToYrdk ( CORBA_DefinitionKind defkind);
CORBA_DefinitionKind yrdkToDefKind( yrdk kind);


yrpk yrPrimKindToYrpk( CORBA_PrimitiveKind primkind);
CORBA_PrimitiveKind yrpkToPrimKind( yrpk kind);


void yrExDescription(CORBA_ExceptionDescription* noreg desc, 
                CORBA_ExceptionDef ex, yoenv* ev);
#endif 
