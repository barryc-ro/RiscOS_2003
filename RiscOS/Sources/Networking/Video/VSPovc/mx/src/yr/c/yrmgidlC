/* mx/src/yr/yrmgidlC.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif

#ifndef YRMGIDL_IDL
#include <yrmgidl.h>
#endif

EXTC_START


static ysidDecl(yr_mgr___id) = "IDL:yr/mgr:1.0";

CONST ysid* yr_mgr__getId(void)
{
  return (CONST ysid*)yr_mgr___id;
}

static CONST_DATA yotk yr_mgr__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'&',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x0f,'I','D','L',':','y','r','/','m','g','r',
  ':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x0a,':',':','y','r'
  ,':',':','m','g','r',0x00};

yotk* yr_mgr__getTC(void)
{
  return (yotk*)yr_mgr__tc;
}


void yr_mgr__free( yr_mgr* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_yr_mgr, (dvoid *)val, ffunc);
}

void yr_mgr__copy( yr_mgr* dest, yr_mgr* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_yr_mgr, (dvoid *)dest, (dvoid *)src, afunc);
}

static ysidDecl(yr_mgr_LoadConflict___id) = "IDL:yr/mgr/LoadConflict:1.0";

CONST ysid* yr_mgr_LoadConflict__getId(void)
{
  return (CONST ysid*)yr_mgr_LoadConflict___id;
}

static CONST_DATA yotk yr_mgr_LoadConflict__tc[] = 
  {0x00,0x00,0x00,0x16,0x00,0x00,0x00,0xdc,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x1c,'I','D','L',':','y','r','/','m','g','r'
  ,'/','L','o','a','d','C','o','n','f','l','i','c','t',':','1'
  ,'.','0',0x00,0x00,0x00,0x00,0x18,':',':','y','r',':',':','m'
  ,'g','r',':',':','L','o','a','d','C','o','n','f','l','i','c'
  ,'t',0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x09,'f','i','l'
  ,'e','n','a','m','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15
  ,0x00,0x00,0x00,'0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,
  'I','D','L',':','y','r','/','p','a','t','h',':','1','.','0',
  0x00,0x00,0x00,0x00,0x0b,':',':','y','r',':',':','p','a','t'
  ,'h',0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x0a,'u','n','d','e','f','i','n','e','d',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x13,0x00,0x00,0x00,0x10,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0a,'r','e','d','e','f','i','n','e','d'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x00,0x00,0x00,0x10,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00};

yotk* yr_mgr_LoadConflict__getTC(void)
{
  return (yotk*)yr_mgr_LoadConflict__tc;
}

void yr_mgr_LoadConflict__free( yr_mgr_LoadConflict* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_yr_mgr_LoadConflict, (dvoid *)val, ffunc);
}

void yr_mgr_LoadConflict__copy( yr_mgr_LoadConflict* dest, 
  yr_mgr_LoadConflict* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_yr_mgr_LoadConflict, (dvoid *)dest, (dvoid *)src, afunc)
    ;
}

static ysidDecl(yr_mgr_fileNotFound___id) = "IDL:yr/mgr/fileNotFound:1.0";

CONST ysid* yr_mgr_fileNotFound__getId(void)
{
  return (CONST ysid*)yr_mgr_fileNotFound___id;
}

static CONST_DATA yotk yr_mgr_fileNotFound__tc[] = 
  {0x00,0x00,0x00,0x16,0x00,0x00,0x00,0x88,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x1c,'I','D','L',':','y','r','/','m','g','r'
  ,'/','f','i','l','e','N','o','t','F','o','u','n','d',':','1'
  ,'.','0',0x00,0x00,0x00,0x00,0x18,':',':','y','r',':',':','m'
  ,'g','r',':',':','f','i','l','e','N','o','t','F','o','u','n'
  ,'d',0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x05,'p','a','t'
  ,'h',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,
  '0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,'I','D','L',':',
  'y','r','/','p','a','t','h',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x0b,':',':','y','r',':',':','p','a','t','h',0x00,0x00,0x00
  ,0x00,0x00,0x12,0x00,0x00,0x00,0x00};

yotk* yr_mgr_fileNotFound__getTC(void)
{
  return (yotk*)yr_mgr_fileNotFound__tc;
}

void yr_mgr_fileNotFound__free( yr_mgr_fileNotFound* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_yr_mgr_fileNotFound, (dvoid *)val, ffunc);
}

void yr_mgr_fileNotFound__copy( yr_mgr_fileNotFound* dest, 
  yr_mgr_fileNotFound* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_yr_mgr_fileNotFound, (dvoid *)dest, (dvoid *)src, afunc)
    ;
}

static ysidDecl(yr_mgr_fileCorrupted___id) = "IDL:yr/mgr/fileCorrupted:1.0";
  

CONST ysid* yr_mgr_fileCorrupted__getId(void)
{
  return (CONST ysid*)yr_mgr_fileCorrupted___id;
}

static CONST_DATA yotk yr_mgr_fileCorrupted__tc[] = 
  {0x00,0x00,0x00,0x16,0x00,0x00,0x00,0x90,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x1d,'I','D','L',':','y','r','/','m','g','r'
  ,'/','f','i','l','e','C','o','r','r','u','p','t','e','d',':'
  ,'1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,':',':'
  ,'y','r',':',':','m','g','r',':',':','f','i','l','e','C','o'
  ,'r','r','u','p','t','e','d',0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x01,0x00,0x00,0x00,0x05,'p','a','t','h',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'0',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x10,'I','D','L',':','y','r','/','p','a','t',
  'h',':','1','.','0',0x00,0x00,0x00,0x00,0x0b,':',':','y','r'
  ,':',':','p','a','t','h',0x00,0x00,0x00,0x00,0x00,0x12,0x00,
  0x00,0x00,0x00};

yotk* yr_mgr_fileCorrupted__getTC(void)
{
  return (yotk*)yr_mgr_fileCorrupted__tc;
}

void yr_mgr_fileCorrupted__free( yr_mgr_fileCorrupted* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_yr_mgr_fileCorrupted, (dvoid *)val, ffunc);
}

void yr_mgr_fileCorrupted__copy( yr_mgr_fileCorrupted* dest, 
  yr_mgr_fileCorrupted* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_yr_mgr_fileCorrupted, (dvoid *)dest, (dvoid *)src, 
    afunc);
}


yopar* yr_mgr_load__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "yr_mgr_load");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "yr_mgr_load", (ub4)4);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_IN;
    _pars[0].tk = (yotk*)YCTC_yr_path;
    _pars[1].mode = YOMODE_EXCEPT;
    _pars[1].tk = (yotk*)YCTC_yr_mgr_LoadConflict;
    _pars[2].mode = YOMODE_EXCEPT;
    _pars[2].tk = (yotk*)YCTC_yr_mgr_fileNotFound;
    _pars[3].mode = YOMODE_EXCEPT;
    _pars[3].tk = (yotk*)YCTC_yr_mgr_fileCorrupted;
    _pars[4].mode = YOMODE_INVALID;
    _pars[4].tk = (yotk*)yoTcNull;
    _pars[4].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

void yr_mgr_load( yr_mgr or, yoenv* ev, yr_path fn)
{
  ysevt* noreg _sem = (ysevt*)0;
  struct yr_mgr__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct yr_mgr__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)
    &_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (dvoid *)_impl, yr_mgr__id);
      (*(void (*)( yr_mgr, yoenv*, yr_path))_f)(or, ev, fn);
    }
    else
      (*_impl->load)(or, ev, fn);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        dvoid * _parvec[1];

        _parvec[0] = (dvoid *)&fn;
        yoSendReq( (dvoid *)or, ev, "load", TRUE, _sem, (sword)1, 
          yr_mgr_load_pars, _parvec);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)0);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
}

yopar* yr_mgr_shutdown__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "yr_mgr_shutdown");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "yr_mgr_shutdown", (ub4)0);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_INVALID;
    _pars[0].tk = (yotk*)yoTcNull;
    _pars[0].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

void yr_mgr_shutdown( yr_mgr or, yoenv* ev)
{
  ysevt* noreg _sem = (ysevt*)0;
  struct yr_mgr__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct yr_mgr__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)
    &_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)1, (dvoid *)_impl, yr_mgr__id);
      (*(void (*)( yr_mgr, yoenv*))_f)(or, ev);
    }
    else
      (*_impl->shutdown)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "shutdown", TRUE, _sem, (sword)0, 
          yr_mgr_shutdown_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)0);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
}

yopar* yr_mgr__get_loadlist__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "yr_mgr__get_loadlist");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "yr_mgr__get_loadlist", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_yr_pathSeq;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

yr_pathSeq yr_mgr__get_loadlist( yr_mgr or, yoenv* ev)
{
  yr_pathSeq _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct yr_mgr__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct yr_mgr__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)
    &_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)2, (dvoid *)_impl, yr_mgr__id);
      _result = (*(yr_pathSeq (*)( yr_mgr, yoenv*))_f)(or, ev);
    }
    else
      _result = (*_impl->_get_loadlist)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_loadlist", TRUE, _sem, (sword)0, 
          yr_mgr__get_loadlist_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* yr_mgr__get_repository__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "yr_mgr__get_repository");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "yr_mgr__get_repository", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_Repository;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_Repository yr_mgr__get_repository( yr_mgr or, yoenv* ev)
{
  CORBA_Repository _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct yr_mgr__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct yr_mgr__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)
    &_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)3, (dvoid *)_impl, yr_mgr__id);
      _result = (*(CORBA_Repository (*)( yr_mgr, yoenv*))_f)(or, ev);
    }
    else
      _result = (*_impl->_get_repository)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_repository", TRUE, _sem, (sword)0,
           yr_mgr__get_repository_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}



EXTC_END
