/* mx/src/yr/yrcorbaC.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif

#ifndef YRCORBA_IDL
#include <yrcorba.h>
#endif

EXTC_START

static CONST_DATA yotk CORBA_DefinitionKind__tc[] = 
  {0x00,0x00,0x00,0x11,0x00,0x00,0x01,'r',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1d,'I','D','L',':','C','O','R','B','A','/',
  'D','e','f','i','n','i','t','i','o','n','K','i','n','d',':',
  '1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,':',':',
  'C','O','R','B','A',':',':','D','e','f','i','n','i','t','i',
  'o','n','K','i','n','d',0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00
  ,0x08,'d','k','_','n','o','n','e',0x00,0x00,0x00,0x00,0x07,'d'
  ,'k','_','a','l','l',0x00,0x00,0x00,0x00,0x00,0x0d,'d','k','_'
  ,'A','t','t','r','i','b','u','t','e',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x0c,'d','k','_','C','o','n','s','t','a','n','t',
  0x00,0x00,0x00,0x00,0x0d,'d','k','_','E','x','c','e','p','t'
  ,'i','o','n',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0d,'d','k'
  ,'_','I','n','t','e','r','f','a','c','e',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x0a,'d','k','_','M','o','d','u','l','e',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x0d,'d','k','_','O','p','e','r','a'
  ,'t','i','o','n',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,'d'
  ,'k','_','T','y','p','e','d','e','f',0x00,0x00,0x00,0x00,0x00
  ,0x09,'d','k','_','A','l','i','a','s',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x0a,'d','k','_','S','t','r','u','c','t',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x09,'d','k','_','U','n','i','o','n',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x08,'d','k','_','E','n','u',
  'm',0x00,0x00,0x00,0x00,0x0d,'d','k','_','P','r','i','m','i'
  ,'t','i','v','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,'d'
  ,'k','_','S','t','r','i','n','g',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x0c,'d','k','_','S','e','q','u','e','n','c','e',0x00,0x00,
  0x00,0x00,0x09,'d','k','_','A','r','r','a','y',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0e,'d','k','_','R','e','p','o','s','i'
  ,'t','o','r','y',0x00};

yotk* CORBA_DefinitionKind__getTC(void)
{
  return (yotk*)CORBA_DefinitionKind__tc;
}

void CORBA_DefinitionKind__free( CORBA_DefinitionKind* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_DefinitionKind, (dvoid *)val, ffunc);
}

void CORBA_DefinitionKind__copy( CORBA_DefinitionKind* dest, 
  CORBA_DefinitionKind* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_DefinitionKind, (dvoid *)dest, (dvoid *)src, 
    afunc);
}


static ysidDecl(CORBA_IRObject___id) = "IDL:CORBA/IRObject:1.0";

CONST ysid* CORBA_IRObject__getId(void)
{
  return (CONST ysid*)CORBA_IRObject___id;
}

static CONST_DATA yotk CORBA_IRObject__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'6',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x17,'I','D','L',':','C','O','R','B','A','/',
  'I','R','O','b','j','e','c','t',':','1','.','0',0x00,0x00,0x00
  ,0x00,0x00,0x12,':',':','C','O','R','B','A',':',':','I','R',
  'O','b','j','e','c','t',0x00};

yotk* CORBA_IRObject__getTC(void)
{
  return (yotk*)CORBA_IRObject__tc;
}


void CORBA_IRObject__free( CORBA_IRObject* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_IRObject, (dvoid *)val, ffunc);
}

void CORBA_IRObject__copy( CORBA_IRObject* dest, CORBA_IRObject* src, ysmaf 
  afunc)
{
  yotkCopyVal( YCTC_CORBA_IRObject, (dvoid *)dest, (dvoid *)src, afunc);
}

static ysidDecl(CORBA_IRObject_BadObj___id) = 
  "IDL:CORBA/IRObject/BadObj:1.0";

CONST ysid* CORBA_IRObject_BadObj__getId(void)
{
  return (CONST ysid*)CORBA_IRObject_BadObj___id;
}

static CONST_DATA yotk CORBA_IRObject_BadObj__tc[] = 
  {0x00,0x00,0x00,0x16,0x00,0x00,0x00,'L',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1e,'I','D','L',':','C','O','R','B','A','/',
  'I','R','O','b','j','e','c','t','/','B','a','d','O','b','j',
  ':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x1a,':',':','C'
  ,'O','R','B','A',':',':','I','R','O','b','j','e','c','t',':'
  ,':','B','a','d','O','b','j',0x00,0x00,0x00,0x00,0x00,0x00,0x00
  };

yotk* CORBA_IRObject_BadObj__getTC(void)
{
  return (yotk*)CORBA_IRObject_BadObj__tc;
}


yopar* CORBA_IRObject__get_def_kind__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_IRObject__get_def_kind");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_IRObject__get_def_kind", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_DefinitionKind;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_DefinitionKind CORBA_IRObject__get_def_kind( CORBA_IRObject or, 
  yoenv* ev)
{
  CORBA_DefinitionKind _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_IRObject__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_IRObject__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (dvoid *)_impl, CORBA_IRObject__id);
      _result = (*(CORBA_DefinitionKind (*)( CORBA_IRObject, yoenv*))_f)(or,
         ev);
    }
    else
      _result = (*_impl->_get_def_kind)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_def_kind", TRUE, _sem, (sword)0, 
          CORBA_IRObject__get_def_kind_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}



static ysidDecl(CORBA_Contained___id) = "IDL:CORBA/Contained:1.0";

CONST ysid* CORBA_Contained__getId(void)
{
  return (CONST ysid*)CORBA_Contained___id;
}

static CONST_DATA yotk CORBA_Contained__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'7',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x18,'I','D','L',':','C','O','R','B','A','/',
  'C','o','n','t','a','i','n','e','d',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x13,':',':','C','O','R','B','A',':',':','C','o',
  'n','t','a','i','n','e','d',0x00};

yotk* CORBA_Contained__getTC(void)
{
  return (yotk*)CORBA_Contained__tc;
}


void CORBA_Contained__free( CORBA_Contained* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_Contained, (dvoid *)val, ffunc);
}

void CORBA_Contained__copy( CORBA_Contained* dest, CORBA_Contained* src, 
  ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_Contained, (dvoid *)dest, (dvoid *)src, afunc);
}

static CONST_DATA yotk CORBA_Contained_Description__tc[] = 
  {0x00,0x00,0x00,0x0f,0x00,0x00,0x01,0xec,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,'$','I','D','L',':','C','O','R','B','A','/',
  'C','o','n','t','a','i','n','e','d','/','D','e','s','c','r',
  'i','p','t','i','o','n',':','1','.','0',0x00,0x00,0x00,0x00,
  0x20,':',':','C','O','R','B','A',':',':','C','o','n','t','a'
  ,'i','n','e','d',':',':','D','e','s','c','r','i','p','t','i'
  ,'o','n',0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x05,'k','i'
  ,'n','d',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x01
  ,'r',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1d,'I','D','L',':'
  ,'C','O','R','B','A','/','D','e','f','i','n','i','t','i','o'
  ,'n','K','i','n','d',':','1','.','0',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x18,':',':','C','O','R','B','A',':',':','D','e',
  'f','i','n','i','t','i','o','n','K','i','n','d',0x00,0x00,0x00
  ,0x00,0x12,0x00,0x00,0x00,0x08,'d','k','_','n','o','n','e',0x00
  ,0x00,0x00,0x00,0x07,'d','k','_','a','l','l',0x00,0x00,0x00,
  0x00,0x00,0x0d,'d','k','_','A','t','t','r','i','b','u','t','e'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,'d','k','_','C','o'
  ,'n','s','t','a','n','t',0x00,0x00,0x00,0x00,0x0d,'d','k','_'
  ,'E','x','c','e','p','t','i','o','n',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x0d,'d','k','_','I','n','t','e','r','f','a','c',
  'e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,'d','k','_','M',
  'o','d','u','l','e',0x00,0x00,0x00,0x00,0x00,0x00,0x0d,'d','k'
  ,'_','O','p','e','r','a','t','i','o','n',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x0b,'d','k','_','T','y','p','e','d','e','f'
  ,0x00,0x00,0x00,0x00,0x00,0x09,'d','k','_','A','l','i','a','s'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,'d','k','_','S','t'
  ,'r','u','c','t',0x00,0x00,0x00,0x00,0x00,0x00,0x09,'d','k',
  '_','U','n','i','o','n',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08
  ,'d','k','_','E','n','u','m',0x00,0x00,0x00,0x00,0x0d,'d','k'
  ,'_','P','r','i','m','i','t','i','v','e',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x0a,'d','k','_','S','t','r','i','n','g',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x0c,'d','k','_','S','e','q','u','e'
  ,'n','c','e',0x00,0x00,0x00,0x00,0x09,'d','k','_','A','r','r'
  ,'a','y',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,'d','k','_'
  ,'R','e','p','o','s','i','t','o','r','y',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x06,'v','a','l','u','e',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0b};

yotk* CORBA_Contained_Description__getTC(void)
{
  return (yotk*)CORBA_Contained_Description__tc;
}

void CORBA_Contained_Description__free( CORBA_Contained_Description* val, 
  ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_Contained_Description, (dvoid *)val, ffunc);
}

void CORBA_Contained_Description__copy( CORBA_Contained_Description* dest, 
  CORBA_Contained_Description* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_Contained_Description, (dvoid *)dest, (dvoid *)
    src, afunc);
}


yopar* CORBA_Contained_describe__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_Contained_describe");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_Contained_describe", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_Contained_Description;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_Contained_Description CORBA_Contained_describe( CORBA_Contained or, 
  yoenv* ev)
{
  CORBA_Contained_Description _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_Contained__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_Contained__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (dvoid *)_impl, CORBA_Contained__id);
      _result = (*(CORBA_Contained_Description (*)( CORBA_Contained, yoenv*)
        )_f)(or, ev);
    }
    else
      _result = (*_impl->describe)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "describe", TRUE, _sem, (sword)0, 
          CORBA_Contained_describe_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_Contained__get_id__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_Contained__get_id");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_Contained__get_id", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_RepositoryId;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_RepositoryId CORBA_Contained__get_id( CORBA_Contained or, yoenv* ev)
{
  CORBA_RepositoryId _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_Contained__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_Contained__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)1, (dvoid *)_impl, CORBA_Contained__id);
      _result = (*(CORBA_RepositoryId (*)( CORBA_Contained, yoenv*))_f)(or, 
        ev);
    }
    else
      _result = (*_impl->_get_id)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_id", TRUE, _sem, (sword)0, 
          CORBA_Contained__get_id_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_Contained__get_name__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_Contained__get_name");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_Contained__get_name", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_Identifier;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_Identifier CORBA_Contained__get_name( CORBA_Contained or, yoenv* ev)
{
  CORBA_Identifier _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_Contained__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_Contained__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)2, (dvoid *)_impl, CORBA_Contained__id);
      _result = (*(CORBA_Identifier (*)( CORBA_Contained, yoenv*))_f)(or, 
        ev);
    }
    else
      _result = (*_impl->_get_name)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_name", TRUE, _sem, (sword)0, 
          CORBA_Contained__get_name_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_Contained__get_version__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_Contained__get_version");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_Contained__get_version", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_VersionSpec;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_VersionSpec CORBA_Contained__get_version( CORBA_Contained or, yoenv* 
  ev)
{
  CORBA_VersionSpec _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_Contained__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_Contained__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)3, (dvoid *)_impl, CORBA_Contained__id);
      _result = (*(CORBA_VersionSpec (*)( CORBA_Contained, yoenv*))_f)(or, 
        ev);
    }
    else
      _result = (*_impl->_get_version)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_version", TRUE, _sem, (sword)0, 
          CORBA_Contained__get_version_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_Contained__get_defined_in__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_Contained__get_defined_in");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_Contained__get_defined_in", (ub4)1)
      ;
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_Container;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_Container CORBA_Contained__get_defined_in( CORBA_Contained or, yoenv* 
  ev)
{
  CORBA_Container _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_Contained__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_Contained__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)4, (dvoid *)_impl, CORBA_Contained__id);
      _result = (*(CORBA_Container (*)( CORBA_Contained, yoenv*))_f)(or, ev)
        ;
    }
    else
      _result = (*_impl->_get_defined_in)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_defined_in", TRUE, _sem, (sword)0,
           CORBA_Contained__get_defined_in_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_Contained__get_absolute_name__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_Contained__get_absolute_name");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_Contained__get_absolute_name", (
      ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_ScopedName;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_ScopedName CORBA_Contained__get_absolute_name( CORBA_Contained or, 
  yoenv* ev)
{
  CORBA_ScopedName _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_Contained__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_Contained__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)5, (dvoid *)_impl, CORBA_Contained__id);
      _result = (*(CORBA_ScopedName (*)( CORBA_Contained, yoenv*))_f)(or, 
        ev);
    }
    else
      _result = (*_impl->_get_absolute_name)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_absolute_name", TRUE, _sem, (
          sword)0, CORBA_Contained__get_absolute_name_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_Contained__get_containing_repository__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_Contained__get_containing_repository");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( 
      "CORBA_Contained__get_containing_repository", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_Repository;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_Repository CORBA_Contained__get_containing_repository( 
  CORBA_Contained or, yoenv* ev)
{
  CORBA_Repository _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_Contained__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_Contained__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)6, (dvoid *)_impl, CORBA_Contained__id);
      _result = (*(CORBA_Repository (*)( CORBA_Contained, yoenv*))_f)(or, 
        ev);
    }
    else
      _result = (*_impl->_get_containing_repository)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_containing_repository", TRUE, 
          _sem, (sword)0, CORBA_Contained__get_containing_repository_pars, (
          dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}


static CONST_DATA yotk CORBA_ContainedSeq__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x00,0x90,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x1b,'I','D','L',':','C','O','R','B','A','/'
  ,'C','o','n','t','a','i','n','e','d','S','e','q',':','1','.'
  ,'0',0x00,0x00,0x00,0x00,0x00,0x16,':',':','C','O','R','B','A'
  ,':',':','C','o','n','t','a','i','n','e','d','S','e','q',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x13,0x00,0x00,0x00,'H',0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'7',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x18,'I','D','L',':','C','O','R','B','A'
  ,'/','C','o','n','t','a','i','n','e','d',':','1','.','0',0x00
  ,0x00,0x00,0x00,0x13,':',':','C','O','R','B','A',':',':','C'
  ,'o','n','t','a','i','n','e','d',0x00,0x00,0x00,0x00,0x00,0x00
  };

yotk* CORBA_ContainedSeq__getTC(void)
{
  return (yotk*)CORBA_ContainedSeq__tc;
}

void CORBA_ContainedSeq__free( CORBA_ContainedSeq* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_ContainedSeq, (dvoid *)val, ffunc);
}

void CORBA_ContainedSeq__copy( CORBA_ContainedSeq* dest, 
  CORBA_ContainedSeq* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_ContainedSeq, (dvoid *)dest, (dvoid *)src, afunc);
    
}

static CONST_DATA yotk CORBA_InterfaceDefSeq__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x00,0xa0,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x1e,'I','D','L',':','C','O','R','B','A','/'
  ,'I','n','t','e','r','f','a','c','e','D','e','f','S','e','q'
  ,':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x19,':',':',
  'C','O','R','B','A',':',':','I','n','t','e','r','f','a','c',
  'e','D','e','f','S','e','q',0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x13,0x00,0x00,0x00,'P',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x0e,0x00,0x00,0x00,'>',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1b
  ,'I','D','L',':','C','O','R','B','A','/','I','n','t','e','r'
  ,'f','a','c','e','D','e','f',':','1','.','0',0x00,0x00,0x00,
  0x00,0x00,0x16,':',':','C','O','R','B','A',':',':','I','n','t'
  ,'e','r','f','a','c','e','D','e','f',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00};

yotk* CORBA_InterfaceDefSeq__getTC(void)
{
  return (yotk*)CORBA_InterfaceDefSeq__tc;
}

void CORBA_InterfaceDefSeq__free( CORBA_InterfaceDefSeq* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_InterfaceDefSeq, (dvoid *)val, ffunc);
}

void CORBA_InterfaceDefSeq__copy( CORBA_InterfaceDefSeq* dest, 
  CORBA_InterfaceDefSeq* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_InterfaceDefSeq, (dvoid *)dest, (dvoid *)src, 
    afunc);
}

static CONST_DATA yotk CORBA_StructMember__tc[] = 
  {0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0xf9,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x1b,'I','D','L',':','C','O','R','B','A','/'
  ,'S','t','r','u','c','t','M','e','m','b','e','r',':','1','.'
  ,'0',0x00,0x00,0x00,0x00,0x00,0x16,':',':','C','O','R','B','A'
  ,':',':','S','t','r','u','c','t','M','e','m','b','e','r',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x05,'n','a','m'
  ,'e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,
  'D',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,'I','D','L',':',
  'C','O','R','B','A','/','I','d','e','n','t','i','f','i','e',
  'r',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,
  ':',':','C','O','R','B','A',':',':','I','d','e','n','t','i',
  'f','i','e','r',0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x05,'t','y','p','e',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x0c,0x00,0x00,0x00,0x09,'t','y','p','e','_','d',
  'e','f',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00
  ,'5',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x16,'I','D','L',':'
  ,'C','O','R','B','A','/','I','D','L','T','y','p','e',':','1'
  ,'.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x11,':',':','C','O',
  'R','B','A',':',':','I','D','L','T','y','p','e',0x00};

yotk* CORBA_StructMember__getTC(void)
{
  return (yotk*)CORBA_StructMember__tc;
}

void CORBA_StructMember__free( CORBA_StructMember* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_StructMember, (dvoid *)val, ffunc);
}

void CORBA_StructMember__copy( CORBA_StructMember* dest, 
  CORBA_StructMember* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_StructMember, (dvoid *)dest, (dvoid *)src, afunc);
    
}

static CONST_DATA yotk CORBA_StructMemberSeq__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x01,0x5c,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x1e,'I','D','L',':','C','O','R','B','A','/'
  ,'S','t','r','u','c','t','M','e','m','b','e','r','S','e','q'
  ,':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x19,':',':',
  'C','O','R','B','A',':',':','S','t','r','u','c','t','M','e',
  'm','b','e','r','S','e','q',0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x13,0x00,0x00,0x01,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x0f,0x00,0x00,0x00,0xf9,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x1b,'I','D','L',':','C','O','R','B','A','/','S','t','r','u'
  ,'c','t','M','e','m','b','e','r',':','1','.','0',0x00,0x00,0x00
  ,0x00,0x00,0x16,':',':','C','O','R','B','A',':',':','S','t',
  'r','u','c','t','M','e','m','b','e','r',0x00,0x00,0x00,0x00,
  0x00,0x00,0x03,0x00,0x00,0x00,0x05,'n','a','m','e',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'D',0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x19,'I','D','L',':','C','O','R','B'
  ,'A','/','I','d','e','n','t','i','f','i','e','r',':','1','.'
  ,'0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,':',':','C','O'
  ,'R','B','A',':',':','I','d','e','n','t','i','f','i','e','r'
  ,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x05,'t','y','p','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c
  ,0x00,0x00,0x00,0x09,'t','y','p','e','_','d','e','f',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'5',0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x16,'I','D','L',':','C','O','R','B'
  ,'A','/','I','D','L','T','y','p','e',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x11,':',':','C','O','R','B','A',':',':'
  ,'I','D','L','T','y','p','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00};

yotk* CORBA_StructMemberSeq__getTC(void)
{
  return (yotk*)CORBA_StructMemberSeq__tc;
}

void CORBA_StructMemberSeq__free( CORBA_StructMemberSeq* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_StructMemberSeq, (dvoid *)val, ffunc);
}

void CORBA_StructMemberSeq__copy( CORBA_StructMemberSeq* dest, 
  CORBA_StructMemberSeq* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_StructMemberSeq, (dvoid *)dest, (dvoid *)src, 
    afunc);
}

static CONST_DATA yotk CORBA_UnionMember__tc[] = 
  {0x00,0x00,0x00,0x0f,0x00,0x00,0x01,0x09,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x1a,'I','D','L',':','C','O','R','B','A','/'
  ,'U','n','i','o','n','M','e','m','b','e','r',':','1','.','0'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x15,':',':','C','O','R','B',
  'A',':',':','U','n','i','o','n','M','e','m','b','e','r',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,'n',
  'a','m','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00
  ,0x00,'D',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,'I','D','L'
  ,':','C','O','R','B','A','/','I','d','e','n','t','i','f','i'
  ,'e','r',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x14,':',':','C','O','R','B','A',':',':','I','d','e','n','t'
  ,'i','f','i','e','r',0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x06,'l','a','b','e','l',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x05,'t','y','p','e',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x09,'t',
  'y','p','e','_','d','e','f',0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x0e,0x00,0x00,0x00,'5',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x16,'I','D','L',':','C','O','R','B','A','/','I','D','L','T'
  ,'y','p','e',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x11
  ,':',':','C','O','R','B','A',':',':','I','D','L','T','y','p'
  ,'e',0x00};

yotk* CORBA_UnionMember__getTC(void)
{
  return (yotk*)CORBA_UnionMember__tc;
}

void CORBA_UnionMember__free( CORBA_UnionMember* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_UnionMember, (dvoid *)val, ffunc);
}

void CORBA_UnionMember__copy( CORBA_UnionMember* dest, CORBA_UnionMember* 
  src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_UnionMember, (dvoid *)dest, (dvoid *)src, afunc);
}

static CONST_DATA yotk CORBA_UnionMemberSeq__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x01,'h',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1d,'I','D','L',':','C','O','R','B','A','/',
  'U','n','i','o','n','M','e','m','b','e','r','S','e','q',':',
  '1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,':',':',
  'C','O','R','B','A',':',':','U','n','i','o','n','M','e','m',
  'b','e','r','S','e','q',0x00,0x00,0x00,0x00,0x13,0x00,0x00,0x01
  ,0x1c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x01
  ,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1a,'I','D','L',':'
  ,'C','O','R','B','A','/','U','n','i','o','n','M','e','m','b'
  ,'e','r',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x15,
  ':',':','C','O','R','B','A',':',':','U','n','i','o','n','M',
  'e','m','b','e','r',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,
  0x00,0x00,0x00,0x05,'n','a','m','e',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x15,0x00,0x00,0x00,'D',0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x19,'I','D','L',':','C','O','R','B','A','/','I','d'
  ,'e','n','t','i','f','i','e','r',':','1','.','0',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x14,':',':','C','O','R','B','A',':',':'
  ,'I','d','e','n','t','i','f','i','e','r',0x00,0x00,0x00,0x00
  ,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,'l','a','b','e'
  ,'l',0x00,0x00,0x00,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x05,
  't','y','p','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x00
  ,0x00,0x00,0x09,'t','y','p','e','_','d','e','f',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'5',0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x16,'I','D','L',':','C','O','R','B','A'
  ,'/','I','D','L','T','y','p','e',':','1','.','0',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x11,':',':','C','O','R','B','A',':',':','I'
  ,'D','L','T','y','p','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00};

yotk* CORBA_UnionMemberSeq__getTC(void)
{
  return (yotk*)CORBA_UnionMemberSeq__tc;
}

void CORBA_UnionMemberSeq__free( CORBA_UnionMemberSeq* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_UnionMemberSeq, (dvoid *)val, ffunc);
}

void CORBA_UnionMemberSeq__copy( CORBA_UnionMemberSeq* dest, 
  CORBA_UnionMemberSeq* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_UnionMemberSeq, (dvoid *)dest, (dvoid *)src, 
    afunc);
}

static CONST_DATA yotk CORBA_EnumMemberSeq__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x00,'X',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1c,'I','D','L',':','C','O','R','B','A','/',
  'E','n','u','m','M','e','m','b','e','r','S','e','q',':','1',
  '.','0',0x00,0x00,0x00,0x00,0x17,':',':','C','O','R','B','A'
  ,':',':','E','n','u','m','M','e','m','b','e','r','S','e','q'
  ,0x00,0x00,0x00,0x00,0x00,0x13,0x00,0x00,0x00,0x10,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00};

yotk* CORBA_EnumMemberSeq__getTC(void)
{
  return (yotk*)CORBA_EnumMemberSeq__tc;
}

void CORBA_EnumMemberSeq__free( CORBA_EnumMemberSeq* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_EnumMemberSeq, (dvoid *)val, ffunc);
}

void CORBA_EnumMemberSeq__copy( CORBA_EnumMemberSeq* dest, 
  CORBA_EnumMemberSeq* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_EnumMemberSeq, (dvoid *)dest, (dvoid *)src, afunc)
    ;
}


static ysidDecl(CORBA_Container___id) = "IDL:CORBA/Container:1.0";

CONST ysid* CORBA_Container__getId(void)
{
  return (CONST ysid*)CORBA_Container___id;
}

static CONST_DATA yotk CORBA_Container__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'7',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x18,'I','D','L',':','C','O','R','B','A','/',
  'C','o','n','t','a','i','n','e','r',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x13,':',':','C','O','R','B','A',':',':','C','o',
  'n','t','a','i','n','e','r',0x00};

yotk* CORBA_Container__getTC(void)
{
  return (yotk*)CORBA_Container__tc;
}


void CORBA_Container__free( CORBA_Container* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_Container, (dvoid *)val, ffunc);
}

void CORBA_Container__copy( CORBA_Container* dest, CORBA_Container* src, 
  ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_Container, (dvoid *)dest, (dvoid *)src, afunc);
}

static CONST_DATA yotk CORBA_Container_Description__tc[] = 
  {0x00,0x00,0x00,0x0f,0x00,0x00,0x02,'D',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,'$','I','D','L',':','C','O','R','B','A','/','C'
  ,'o','n','t','a','i','n','e','r','/','D','e','s','c','r','i'
  ,'p','t','i','o','n',':','1','.','0',0x00,0x00,0x00,0x00,0x20
  ,':',':','C','O','R','B','A',':',':','C','o','n','t','a','i'
  ,'n','e','r',':',':','D','e','s','c','r','i','p','t','i','o'
  ,'n',0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x11,'c','o','n'
  ,'t','a','i','n','e','d','_','o','b','j','e','c','t',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'7',0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x18,'I','D','L',':','C','O','R','B'
  ,'A','/','C','o','n','t','a','i','n','e','d',':','1','.','0'
  ,0x00,0x00,0x00,0x00,0x13,':',':','C','O','R','B','A',':',':'
  ,'C','o','n','t','a','i','n','e','d',0x00,0x00,0x00,0x00,0x00
  ,0x05,'k','i','n','d',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11
  ,0x00,0x00,0x01,'r',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1d,
  'I','D','L',':','C','O','R','B','A','/','D','e','f','i','n',
  'i','t','i','o','n','K','i','n','d',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x18,':',':','C','O','R','B','A',':'
  ,':','D','e','f','i','n','i','t','i','o','n','K','i','n','d'
  ,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x08,'d','k','_','n'
  ,'o','n','e',0x00,0x00,0x00,0x00,0x07,'d','k','_','a','l','l'
  ,0x00,0x00,0x00,0x00,0x00,0x0d,'d','k','_','A','t','t','r','i'
  ,'b','u','t','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,'d'
  ,'k','_','C','o','n','s','t','a','n','t',0x00,0x00,0x00,0x00
  ,0x0d,'d','k','_','E','x','c','e','p','t','i','o','n',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x0d,'d','k','_','I','n','t','e','r'
  ,'f','a','c','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,'d'
  ,'k','_','M','o','d','u','l','e',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x0d,'d','k','_','O','p','e','r','a','t','i','o','n',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x0b,'d','k','_','T','y','p','e','d'
  ,'e','f',0x00,0x00,0x00,0x00,0x00,0x09,'d','k','_','A','l','i'
  ,'a','s',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,'d','k','_'
  ,'S','t','r','u','c','t',0x00,0x00,0x00,0x00,0x00,0x00,0x09,
  'd','k','_','U','n','i','o','n',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x08,'d','k','_','E','n','u','m',0x00,0x00,0x00,0x00,0x0d
  ,'d','k','_','P','r','i','m','i','t','i','v','e',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0a,'d','k','_','S','t','r','i','n','g'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,'d','k','_','S','e','q',
  'u','e','n','c','e',0x00,0x00,0x00,0x00,0x09,'d','k','_','A'
  ,'r','r','a','y',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,'d'
  ,'k','_','R','e','p','o','s','i','t','o','r','y',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x06,'v','a','l','u','e',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x0b};

yotk* CORBA_Container_Description__getTC(void)
{
  return (yotk*)CORBA_Container_Description__tc;
}

void CORBA_Container_Description__free( CORBA_Container_Description* val, 
  ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_Container_Description, (dvoid *)val, ffunc);
}

void CORBA_Container_Description__copy( CORBA_Container_Description* dest, 
  CORBA_Container_Description* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_Container_Description, (dvoid *)dest, (dvoid *)
    src, afunc);
}

static CONST_DATA yotk CORBA_Container_DescriptionSeq__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x02,0xb4,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x27,'I','D','L',':','C','O','R','B','A','/'
  ,'C','o','n','t','a','i','n','e','r','/','D','e','s','c','r'
  ,'i','p','t','i','o','n','S','e','q',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x00,'#',':',':','C','O','R','B','A',':',':','C',
  'o','n','t','a','i','n','e','r',':',':','D','e','s','c','r',
  'i','p','t','i','o','n','S','e','q',0x00,0x00,0x00,0x00,0x00
  ,0x13,0x00,0x00,0x02,'T',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x0f,0x00,0x00,0x02,'D',0x00,0x00,0x00,0x00,0x00,0x00,0x00,'$'
  ,'I','D','L',':','C','O','R','B','A','/','C','o','n','t','a'
  ,'i','n','e','r','/','D','e','s','c','r','i','p','t','i','o'
  ,'n',':','1','.','0',0x00,0x00,0x00,0x00,0x20,':',':','C','O'
  ,'R','B','A',':',':','C','o','n','t','a','i','n','e','r',':'
  ,':','D','e','s','c','r','i','p','t','i','o','n',0x00,0x00,0x00
  ,0x00,0x03,0x00,0x00,0x00,0x11,'c','o','n','t','a','i','n','e'
  ,'d','_','o','b','j','e','c','t',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0e,0x00,0x00,0x00,'7',0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x18,'I','D','L',':','C','O','R','B','A','/','C','o','n'
  ,'t','a','i','n','e','d',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x13,':',':','C','O','R','B','A',':',':','C','o','n','t','a'
  ,'i','n','e','d',0x00,0x00,0x00,0x00,0x00,0x05,'k','i','n','d'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x01,'r',
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1d,'I','D','L',':','C',
  'O','R','B','A','/','D','e','f','i','n','i','t','i','o','n',
  'K','i','n','d',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x18,':',':','C','O','R','B','A',':',':','D','e','f','i'
  ,'n','i','t','i','o','n','K','i','n','d',0x00,0x00,0x00,0x00
  ,0x12,0x00,0x00,0x00,0x08,'d','k','_','n','o','n','e',0x00,0x00
  ,0x00,0x00,0x07,'d','k','_','a','l','l',0x00,0x00,0x00,0x00,
  0x00,0x0d,'d','k','_','A','t','t','r','i','b','u','t','e',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,'d','k','_','C','o','n',
  's','t','a','n','t',0x00,0x00,0x00,0x00,0x0d,'d','k','_','E'
  ,'x','c','e','p','t','i','o','n',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0d,'d','k','_','I','n','t','e','r','f','a','c','e',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,'d','k','_','M','o','d',
  'u','l','e',0x00,0x00,0x00,0x00,0x00,0x00,0x0d,'d','k','_','O'
  ,'p','e','r','a','t','i','o','n',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0b,'d','k','_','T','y','p','e','d','e','f',0x00,0x00
  ,0x00,0x00,0x00,0x09,'d','k','_','A','l','i','a','s',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x0a,'d','k','_','S','t','r','u','c'
  ,'t',0x00,0x00,0x00,0x00,0x00,0x00,0x09,'d','k','_','U','n',
  'i','o','n',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,'d','k',
  '_','E','n','u','m',0x00,0x00,0x00,0x00,0x0d,'d','k','_','P'
  ,'r','i','m','i','t','i','v','e',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0a,'d','k','_','S','t','r','i','n','g',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x0c,'d','k','_','S','e','q','u','e','n','c'
  ,'e',0x00,0x00,0x00,0x00,0x09,'d','k','_','A','r','r','a','y'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,'d','k','_','R','e'
  ,'p','o','s','i','t','o','r','y',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x06,'v','a','l','u','e',0x00,0x00,0x00,0x00,0x00,0x00,0x0b
  ,0x00,0x00,0x00,0x00};

yotk* CORBA_Container_DescriptionSeq__getTC(void)
{
  return (yotk*)CORBA_Container_DescriptionSeq__tc;
}

void CORBA_Container_DescriptionSeq__free( CORBA_Container_DescriptionSeq* 
  val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_Container_DescriptionSeq, (dvoid *)val, ffunc);
}

void CORBA_Container_DescriptionSeq__copy( CORBA_Container_DescriptionSeq* 
  dest, CORBA_Container_DescriptionSeq* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_Container_DescriptionSeq, (dvoid *)dest, (dvoid *)
    src, afunc);
}


yopar* CORBA_Container_lookup__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_Container_lookup");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_Container_lookup", (ub4)2);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_Contained;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_CORBA_ScopedName;
    _pars[2].mode = YOMODE_INVALID;
    _pars[2].tk = (yotk*)yoTcNull;
    _pars[2].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_Contained CORBA_Container_lookup( CORBA_Container or, yoenv* ev, 
  CORBA_ScopedName search_name)
{
  CORBA_Contained _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_Container__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_Container__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (dvoid *)_impl, CORBA_Container__id);
      _result = (*(CORBA_Contained (*)( CORBA_Container, yoenv*, 
        CORBA_ScopedName))_f)(or, ev, search_name);
    }
    else
      _result = (*_impl->lookup)(or, ev, search_name);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        dvoid * _parvec[1];

        _parvec[0] = (dvoid *)&search_name;
        yoSendReq( (dvoid *)or, ev, "lookup", TRUE, _sem, (sword)1, 
          CORBA_Container_lookup_pars, _parvec);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_Container_contents__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_Container_contents");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_Container_contents", (ub4)3);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_ContainedSeq;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_CORBA_DefinitionKind;
    _pars[2].mode = YOMODE_IN;
    _pars[2].tk = (yotk*)yoTcBoolean;
    _pars[3].mode = YOMODE_INVALID;
    _pars[3].tk = (yotk*)yoTcNull;
    _pars[3].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_ContainedSeq CORBA_Container_contents( CORBA_Container or, yoenv* ev, 
  CORBA_DefinitionKind limit_type, boolean exclude_inherited)
{
  CORBA_ContainedSeq _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_Container__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_Container__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)1, (dvoid *)_impl, CORBA_Container__id);
      _result = (*(CORBA_ContainedSeq (*)( CORBA_Container, yoenv*, 
        CORBA_DefinitionKind, boolean))_f)(or, ev, limit_type, 
        exclude_inherited);
    }
    else
      _result = (*_impl->contents)(or, ev, limit_type, exclude_inherited);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        dvoid * _parvec[2];

        _parvec[0] = (dvoid *)&limit_type;
        _parvec[1] = (dvoid *)&exclude_inherited;
        yoSendReq( (dvoid *)or, ev, "contents", TRUE, _sem, (sword)2, 
          CORBA_Container_contents_pars, _parvec);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_Container_lookup_name__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_Container_lookup_name");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_Container_lookup_name", (ub4)5);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_ContainedSeq;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_CORBA_Identifier;
    _pars[2].mode = YOMODE_IN;
    _pars[2].tk = (yotk*)yoTcLong;
    _pars[3].mode = YOMODE_IN;
    _pars[3].tk = (yotk*)YCTC_CORBA_DefinitionKind;
    _pars[4].mode = YOMODE_IN;
    _pars[4].tk = (yotk*)yoTcBoolean;
    _pars[5].mode = YOMODE_INVALID;
    _pars[5].tk = (yotk*)yoTcNull;
    _pars[5].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_ContainedSeq CORBA_Container_lookup_name( CORBA_Container or, yoenv* 
  ev, CORBA_Identifier search_name, sb4 levels_to_search, 
  CORBA_DefinitionKind limit_type, boolean exclude_inherited)
{
  CORBA_ContainedSeq _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_Container__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_Container__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)2, (dvoid *)_impl, CORBA_Container__id);
      _result = (*(CORBA_ContainedSeq (*)( CORBA_Container, yoenv*, 
        CORBA_Identifier, sb4, CORBA_DefinitionKind, boolean))_f)(or, ev, 
        search_name, levels_to_search, limit_type, exclude_inherited);
    }
    else
      _result = (*_impl->lookup_name)(or, ev, search_name, levels_to_search,
         limit_type, exclude_inherited);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        dvoid * _parvec[4];

        _parvec[0] = (dvoid *)&search_name;
        _parvec[1] = (dvoid *)&levels_to_search;
        _parvec[2] = (dvoid *)&limit_type;
        _parvec[3] = (dvoid *)&exclude_inherited;
        yoSendReq( (dvoid *)or, ev, "lookup_name", TRUE, _sem, (sword)4, 
          CORBA_Container_lookup_name_pars, _parvec);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_Container_describe_contents__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_Container_describe_contents");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_Container_describe_contents", (ub4)
      4);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_Container_DescriptionSeq;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_CORBA_DefinitionKind;
    _pars[2].mode = YOMODE_IN;
    _pars[2].tk = (yotk*)yoTcBoolean;
    _pars[3].mode = YOMODE_IN;
    _pars[3].tk = (yotk*)yoTcLong;
    _pars[4].mode = YOMODE_INVALID;
    _pars[4].tk = (yotk*)yoTcNull;
    _pars[4].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_Container_DescriptionSeq CORBA_Container_describe_contents( 
  CORBA_Container or, yoenv* ev, CORBA_DefinitionKind limit_type, boolean 
  exclude_inherited, sb4 max_returned_objs)
{
  CORBA_Container_DescriptionSeq _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_Container__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_Container__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)3, (dvoid *)_impl, CORBA_Container__id);
      _result = (*(CORBA_Container_DescriptionSeq (*)( CORBA_Container, 
        yoenv*, CORBA_DefinitionKind, boolean, sb4))_f)(or, ev, limit_type, 
        exclude_inherited, max_returned_objs);
    }
    else
      _result = (*_impl->describe_contents)(or, ev, limit_type, 
        exclude_inherited, max_returned_objs);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        dvoid * _parvec[3];

        _parvec[0] = (dvoid *)&limit_type;
        _parvec[1] = (dvoid *)&exclude_inherited;
        _parvec[2] = (dvoid *)&max_returned_objs;
        yoSendReq( (dvoid *)or, ev, "describe_contents", TRUE, _sem, (sword)
          3, CORBA_Container_describe_contents_pars, _parvec);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}



static ysidDecl(CORBA_IDLType___id) = "IDL:CORBA/IDLType:1.0";

CONST ysid* CORBA_IDLType__getId(void)
{
  return (CONST ysid*)CORBA_IDLType___id;
}

static CONST_DATA yotk CORBA_IDLType__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'5',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x16,'I','D','L',':','C','O','R','B','A','/',
  'I','D','L','T','y','p','e',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x11,':',':','C','O','R','B','A',':',':','I','D',
  'L','T','y','p','e',0x00};

yotk* CORBA_IDLType__getTC(void)
{
  return (yotk*)CORBA_IDLType__tc;
}


void CORBA_IDLType__free( CORBA_IDLType* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_IDLType, (dvoid *)val, ffunc);
}

void CORBA_IDLType__copy( CORBA_IDLType* dest, CORBA_IDLType* src, ysmaf 
  afunc)
{
  yotkCopyVal( YCTC_CORBA_IDLType, (dvoid *)dest, (dvoid *)src, afunc);
}


yopar* CORBA_IDLType__get_type__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_IDLType__get_type");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_IDLType__get_type", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)yoTcTypeCode;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

yotk* CORBA_IDLType__get_type( CORBA_IDLType or, yoenv* ev)
{
  yotk* _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_IDLType__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_IDLType__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (dvoid *)_impl, CORBA_IDLType__id);
      _result = (*(yotk* (*)( CORBA_IDLType, yoenv*))_f)(or, ev);
    }
    else
      _result = (*_impl->_get_type)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_type", TRUE, _sem, (sword)0, 
          CORBA_IDLType__get_type_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}


static CONST_DATA yotk CORBA_PrimitiveKind__tc[] = 
  {0x00,0x00,0x00,0x11,0x00,0x00,0x01,'D',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1c,'I','D','L',':','C','O','R','B','A','/',
  'P','r','i','m','i','t','i','v','e','K','i','n','d',':','1',
  '.','0',0x00,0x00,0x00,0x00,0x17,':',':','C','O','R','B','A'
  ,':',':','P','r','i','m','i','t','i','v','e','K','i','n','d'
  ,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x08,'p','k','_'
  ,'n','u','l','l',0x00,0x00,0x00,0x00,0x08,'p','k','_','v','o'
  ,'i','d',0x00,0x00,0x00,0x00,0x09,'p','k','_','s','h','o','r'
  ,'t',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,'p','k','_','l'
  ,'o','n','g',0x00,0x00,0x00,0x00,0x0a,'p','k','_','u','s','h'
  ,'o','r','t',0x00,0x00,0x00,0x00,0x00,0x00,0x09,'p','k','_',
  'u','l','o','n','g',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,
  'p','k','_','f','l','o','a','t',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0a,'p','k','_','d','o','u','b','l','e',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x0b,'p','k','_','b','o','o','l','e','a','n'
  ,0x00,0x00,0x00,0x00,0x00,0x08,'p','k','_','c','h','a','r',0x00
  ,0x00,0x00,0x00,0x09,'p','k','_','o','c','t','e','t',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x07,'p','k','_','a','n','y',0x00,
  0x00,0x00,0x00,0x00,0x0c,'p','k','_','T','y','p','e','C','o'
  ,'d','e',0x00,0x00,0x00,0x00,0x0d,'p','k','_','P','r','i','n'
  ,'c','i','p','a','l',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a
  ,'p','k','_','s','t','r','i','n','g',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0a,'p','k','_','o','b','j','r','e','f',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x0c,'p','k','_','l','o','n','g','l','o','n'
  ,'g',0x00};

yotk* CORBA_PrimitiveKind__getTC(void)
{
  return (yotk*)CORBA_PrimitiveKind__tc;
}

void CORBA_PrimitiveKind__free( CORBA_PrimitiveKind* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_PrimitiveKind, (dvoid *)val, ffunc);
}

void CORBA_PrimitiveKind__copy( CORBA_PrimitiveKind* dest, 
  CORBA_PrimitiveKind* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_PrimitiveKind, (dvoid *)dest, (dvoid *)src, afunc)
    ;
}


static ysidDecl(CORBA_PrimitiveDef___id) = "IDL:CORBA/PrimitiveDef:1.0";

CONST ysid* CORBA_PrimitiveDef__getId(void)
{
  return (CONST ysid*)CORBA_PrimitiveDef___id;
}

static CONST_DATA yotk CORBA_PrimitiveDef__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'>',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1b,'I','D','L',':','C','O','R','B','A','/',
  'P','r','i','m','i','t','i','v','e','D','e','f',':','1','.',
  '0',0x00,0x00,0x00,0x00,0x00,0x16,':',':','C','O','R','B','A'
  ,':',':','P','r','i','m','i','t','i','v','e','D','e','f',0x00
  };

yotk* CORBA_PrimitiveDef__getTC(void)
{
  return (yotk*)CORBA_PrimitiveDef__tc;
}


void CORBA_PrimitiveDef__free( CORBA_PrimitiveDef* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_PrimitiveDef, (dvoid *)val, ffunc);
}

void CORBA_PrimitiveDef__copy( CORBA_PrimitiveDef* dest, 
  CORBA_PrimitiveDef* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_PrimitiveDef, (dvoid *)dest, (dvoid *)src, afunc);
    
}


yopar* CORBA_PrimitiveDef__get_kind__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_PrimitiveDef__get_kind");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_PrimitiveDef__get_kind", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_PrimitiveKind;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_PrimitiveKind CORBA_PrimitiveDef__get_kind( CORBA_PrimitiveDef or, 
  yoenv* ev)
{
  CORBA_PrimitiveKind _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_PrimitiveDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_PrimitiveDef__tyimpl*) yoLocalObj( (CORBA_Object)or,
     (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (dvoid *)_impl, CORBA_PrimitiveDef__id);
        
      _result = (*(CORBA_PrimitiveKind (*)( CORBA_PrimitiveDef, yoenv*))_f)(
        or, ev);
    }
    else
      _result = (*_impl->_get_kind)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_kind", TRUE, _sem, (sword)0, 
          CORBA_PrimitiveDef__get_kind_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}



static ysidDecl(CORBA_Repository___id) = "IDL:CORBA/Repository:1.0";

CONST ysid* CORBA_Repository__getId(void)
{
  return (CONST ysid*)CORBA_Repository___id;
}

static CONST_DATA yotk CORBA_Repository__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'<',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x19,'I','D','L',':','C','O','R','B','A','/',
  'R','e','p','o','s','i','t','o','r','y',':','1','.','0',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x14,':',':','C','O','R','B',
  'A',':',':','R','e','p','o','s','i','t','o','r','y',0x00};

yotk* CORBA_Repository__getTC(void)
{
  return (yotk*)CORBA_Repository__tc;
}


void CORBA_Repository__free( CORBA_Repository* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_Repository, (dvoid *)val, ffunc);
}

void CORBA_Repository__copy( CORBA_Repository* dest, CORBA_Repository* src, 
  ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_Repository, (dvoid *)dest, (dvoid *)src, afunc);
}


yopar* CORBA_Repository_lookup_id__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_Repository_lookup_id");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_Repository_lookup_id", (ub4)2);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_Contained;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_CORBA_RepositoryId;
    _pars[2].mode = YOMODE_INVALID;
    _pars[2].tk = (yotk*)yoTcNull;
    _pars[2].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_Contained CORBA_Repository_lookup_id( CORBA_Repository or, yoenv* ev, 
  CORBA_RepositoryId search_id)
{
  CORBA_Contained _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_Repository__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_Repository__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (dvoid *)_impl, CORBA_Repository__id);
      _result = (*(CORBA_Contained (*)( CORBA_Repository, yoenv*, 
        CORBA_RepositoryId))_f)(or, ev, search_id);
    }
    else
      _result = (*_impl->lookup_id)(or, ev, search_id);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        dvoid * _parvec[1];

        _parvec[0] = (dvoid *)&search_id;
        yoSendReq( (dvoid *)or, ev, "lookup_id", TRUE, _sem, (sword)1, 
          CORBA_Repository_lookup_id_pars, _parvec);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_Repository_get_primitive__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_Repository_get_primitive");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_Repository_get_primitive", (ub4)2);
      
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_PrimitiveDef;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_CORBA_PrimitiveKind;
    _pars[2].mode = YOMODE_INVALID;
    _pars[2].tk = (yotk*)yoTcNull;
    _pars[2].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_PrimitiveDef CORBA_Repository_get_primitive( CORBA_Repository or, 
  yoenv* ev, CORBA_PrimitiveKind kind)
{
  CORBA_PrimitiveDef _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_Repository__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_Repository__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)1, (dvoid *)_impl, CORBA_Repository__id);
      _result = (*(CORBA_PrimitiveDef (*)( CORBA_Repository, yoenv*, 
        CORBA_PrimitiveKind))_f)(or, ev, kind);
    }
    else
      _result = (*_impl->get_primitive)(or, ev, kind);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        dvoid * _parvec[1];

        _parvec[0] = (dvoid *)&kind;
        yoSendReq( (dvoid *)or, ev, "get_primitive", TRUE, _sem, (sword)1, 
          CORBA_Repository_get_primitive_pars, _parvec);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}



static ysidDecl(CORBA_ModuleDef___id) = "IDL:CORBA/ModuleDef:1.0";

CONST ysid* CORBA_ModuleDef__getId(void)
{
  return (CONST ysid*)CORBA_ModuleDef___id;
}

static CONST_DATA yotk CORBA_ModuleDef__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'7',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x18,'I','D','L',':','C','O','R','B','A','/',
  'M','o','d','u','l','e','D','e','f',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x13,':',':','C','O','R','B','A',':',':','M','o',
  'd','u','l','e','D','e','f',0x00};

yotk* CORBA_ModuleDef__getTC(void)
{
  return (yotk*)CORBA_ModuleDef__tc;
}


void CORBA_ModuleDef__free( CORBA_ModuleDef* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_ModuleDef, (dvoid *)val, ffunc);
}

void CORBA_ModuleDef__copy( CORBA_ModuleDef* dest, CORBA_ModuleDef* src, 
  ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_ModuleDef, (dvoid *)dest, (dvoid *)src, afunc);
}



static CONST_DATA yotk CORBA_ModuleDescription__tc[] = 
  {0x00,0x00,0x00,0x0f,0x00,0x00,0x01,0xa8,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x20,'I','D','L',':','C','O','R','B','A','/'
  ,'M','o','d','u','l','e','D','e','s','c','r','i','p','t','i'
  ,'o','n',':','1','.','0',0x00,0x00,0x00,0x00,0x1b,':',':','C'
  ,'O','R','B','A',':',':','M','o','d','u','l','e','D','e','s'
  ,'c','r','i','p','t','i','o','n',0x00,0x00,0x00,0x00,0x00,0x04
  ,0x00,0x00,0x00,0x05,'n','a','m','e',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x15,0x00,0x00,0x00,'D',0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x19,'I','D','L',':','C','O','R','B','A','/','I','d'
  ,'e','n','t','i','f','i','e','r',':','1','.','0',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x14,':',':','C','O','R','B','A',':',':'
  ,'I','d','e','n','t','i','f','i','e','r',0x00,0x00,0x00,0x00
  ,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,'i','d',0x00,0x00
  ,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'H',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1b,'I','D','L',':','C','O','R','B','A','/',
  'R','e','p','o','s','i','t','o','r','y','I','d',':','1','.',
  '0',0x00,0x00,0x00,0x00,0x00,0x16,':',':','C','O','R','B','A'
  ,':',':','R','e','p','o','s','i','t','o','r','y','I','d',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0b,'d','e','f','i','n','e','d','_','i','n',0x00,0x00
  ,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'7',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x18,'I','D','L',':','C','O','R','B','A','/',
  'C','o','n','t','a','i','n','e','r',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x13,':',':','C','O','R','B','A',':',':','C','o',
  'n','t','a','i','n','e','r',0x00,0x00,0x00,0x00,0x00,0x08,'v'
  ,'e','r','s','i','o','n',0x00,0x00,0x00,0x00,0x15,0x00,0x00,
  0x00,'H',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1a,'I','D','L'
  ,':','C','O','R','B','A','/','V','e','r','s','i','o','n','S'
  ,'p','e','c',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x15
  ,':',':','C','O','R','B','A',':',':','V','e','r','s','i','o'
  ,'n','S','p','e','c',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12
  ,0x00,0x00,0x00,0x00};

yotk* CORBA_ModuleDescription__getTC(void)
{
  return (yotk*)CORBA_ModuleDescription__tc;
}

void CORBA_ModuleDescription__free( CORBA_ModuleDescription* val, ysmff 
  ffunc)
{
  yotkFreeVal( YCTC_CORBA_ModuleDescription, (dvoid *)val, ffunc);
}

void CORBA_ModuleDescription__copy( CORBA_ModuleDescription* dest, 
  CORBA_ModuleDescription* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_ModuleDescription, (dvoid *)dest, (dvoid *)src, 
    afunc);
}


static ysidDecl(CORBA_ConstantDef___id) = "IDL:CORBA/ConstantDef:1.0";

CONST ysid* CORBA_ConstantDef__getId(void)
{
  return (CONST ysid*)CORBA_ConstantDef___id;
}

static CONST_DATA yotk CORBA_ConstantDef__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'=',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1a,'I','D','L',':','C','O','R','B','A','/',
  'C','o','n','s','t','a','n','t','D','e','f',':','1','.','0',
  0x00,0x00,0x00,0x00,0x00,0x00,0x15,':',':','C','O','R','B','A'
  ,':',':','C','o','n','s','t','a','n','t','D','e','f',0x00};

yotk* CORBA_ConstantDef__getTC(void)
{
  return (yotk*)CORBA_ConstantDef__tc;
}


void CORBA_ConstantDef__free( CORBA_ConstantDef* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_ConstantDef, (dvoid *)val, ffunc);
}

void CORBA_ConstantDef__copy( CORBA_ConstantDef* dest, CORBA_ConstantDef* 
  src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_ConstantDef, (dvoid *)dest, (dvoid *)src, afunc);
}


yopar* CORBA_ConstantDef__get_type__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_ConstantDef__get_type");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_ConstantDef__get_type", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)yoTcTypeCode;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

yotk* CORBA_ConstantDef__get_type( CORBA_ConstantDef or, yoenv* ev)
{
  yotk* _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_ConstantDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_ConstantDef__tyimpl*) yoLocalObj( (CORBA_Object)or, 
    (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (dvoid *)_impl, CORBA_ConstantDef__id);
      _result = (*(yotk* (*)( CORBA_ConstantDef, yoenv*))_f)(or, ev);
    }
    else
      _result = (*_impl->_get_type)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_type", TRUE, _sem, (sword)0, 
          CORBA_ConstantDef__get_type_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_ConstantDef__get_type_def__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_ConstantDef__get_type_def");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_ConstantDef__get_type_def", (ub4)1)
      ;
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_IDLType;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_IDLType CORBA_ConstantDef__get_type_def( CORBA_ConstantDef or, yoenv* 
  ev)
{
  CORBA_IDLType _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_ConstantDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_ConstantDef__tyimpl*) yoLocalObj( (CORBA_Object)or, 
    (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)1, (dvoid *)_impl, CORBA_ConstantDef__id);
      _result = (*(CORBA_IDLType (*)( CORBA_ConstantDef, yoenv*))_f)(or, ev)
        ;
    }
    else
      _result = (*_impl->_get_type_def)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_type_def", TRUE, _sem, (sword)0, 
          CORBA_ConstantDef__get_type_def_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_ConstantDef__get_value__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_ConstantDef__get_value");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_ConstantDef__get_value", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)yoTcAny;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

yoany CORBA_ConstantDef__get_value( CORBA_ConstantDef or, yoenv* ev)
{
  yoany _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_ConstantDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_ConstantDef__tyimpl*) yoLocalObj( (CORBA_Object)or, 
    (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)2, (dvoid *)_impl, CORBA_ConstantDef__id);
      _result = (*(yoany (*)( CORBA_ConstantDef, yoenv*))_f)(or, ev);
    }
    else
      _result = (*_impl->_get_value)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_value", TRUE, _sem, (sword)0, 
          CORBA_ConstantDef__get_value_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}


static CONST_DATA yotk CORBA_ConstantDescription__tc[] = 
  {0x00,0x00,0x00,0x0f,0x00,0x00,0x01,0xd0,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,'"','I','D','L',':','C','O','R','B','A','/',
  'C','o','n','s','t','a','n','t','D','e','s','c','r','i','p',
  't','i','o','n',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x1d,':',':','C','O','R','B','A',':',':','C','o','n','s','t'
  ,'a','n','t','D','e','s','c','r','i','p','t','i','o','n',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x05,'n',
  'a','m','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00
  ,0x00,'D',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,'I','D','L'
  ,':','C','O','R','B','A','/','I','d','e','n','t','i','f','i'
  ,'e','r',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x14,':',':','C','O','R','B','A',':',':','I','d','e','n','t'
  ,'i','f','i','e','r',0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x03,'i','d',0x00,0x00,0x00,0x00,0x00,0x15
  ,0x00,0x00,0x00,'H',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1b,
  'I','D','L',':','C','O','R','B','A','/','R','e','p','o','s',
  'i','t','o','r','y','I','d',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x00,0x16,':',':','C','O','R','B','A',':',':','R','e','p','o'
  ,'s','i','t','o','r','y','I','d',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,'d','e','f','i'
  ,'n','e','d','_','i','n',0x00,0x00,0x00,0x00,0x00,0x0e,0x00,
  0x00,0x00,'7',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,'I','D'
  ,'L',':','C','O','R','B','A','/','C','o','n','t','a','i','n'
  ,'e','r',':','1','.','0',0x00,0x00,0x00,0x00,0x13,':',':','C'
  ,'O','R','B','A',':',':','C','o','n','t','a','i','n','e','r'
  ,0x00,0x00,0x00,0x00,0x00,0x08,'v','e','r','s','i','o','n',0x00
  ,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'H',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1a,'I','D','L',':','C','O','R','B','A','/',
  'V','e','r','s','i','o','n','S','p','e','c',':','1','.','0',
  0x00,0x00,0x00,0x00,0x00,0x00,0x15,':',':','C','O','R','B','A'
  ,':',':','V','e','r','s','i','o','n','S','p','e','c',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x05,'t','y','p','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x0c,0x00,0x00,0x00,0x06,'v','a','l','u','e',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x0b};

yotk* CORBA_ConstantDescription__getTC(void)
{
  return (yotk*)CORBA_ConstantDescription__tc;
}

void CORBA_ConstantDescription__free( CORBA_ConstantDescription* val, ysmff 
  ffunc)
{
  yotkFreeVal( YCTC_CORBA_ConstantDescription, (dvoid *)val, ffunc);
}

void CORBA_ConstantDescription__copy( CORBA_ConstantDescription* dest, 
  CORBA_ConstantDescription* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_ConstantDescription, (dvoid *)dest, (dvoid *)src, 
    afunc);
}


static ysidDecl(CORBA_TypedefDef___id) = "IDL:CORBA/TypedefDef:1.0";

CONST ysid* CORBA_TypedefDef__getId(void)
{
  return (CONST ysid*)CORBA_TypedefDef___id;
}

static CONST_DATA yotk CORBA_TypedefDef__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'<',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x19,'I','D','L',':','C','O','R','B','A','/',
  'T','y','p','e','d','e','f','D','e','f',':','1','.','0',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x14,':',':','C','O','R','B',
  'A',':',':','T','y','p','e','d','e','f','D','e','f',0x00};

yotk* CORBA_TypedefDef__getTC(void)
{
  return (yotk*)CORBA_TypedefDef__tc;
}


void CORBA_TypedefDef__free( CORBA_TypedefDef* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_TypedefDef, (dvoid *)val, ffunc);
}

void CORBA_TypedefDef__copy( CORBA_TypedefDef* dest, CORBA_TypedefDef* src, 
  ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_TypedefDef, (dvoid *)dest, (dvoid *)src, afunc);
}



static CONST_DATA yotk CORBA_TypeDescription__tc[] = 
  {0x00,0x00,0x00,0x0f,0x00,0x00,0x01,0xb8,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x1e,'I','D','L',':','C','O','R','B','A','/'
  ,'T','y','p','e','D','e','s','c','r','i','p','t','i','o','n'
  ,':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x19,':',':',
  'C','O','R','B','A',':',':','T','y','p','e','D','e','s','c',
  'r','i','p','t','i','o','n',0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x05,0x00,0x00,0x00,0x05,'n','a','m','e',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'D',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x19,'I','D','L',':','C','O','R','B','A','/',
  'I','d','e','n','t','i','f','i','e','r',':','1','.','0',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x14,':',':','C','O','R','B',
  'A',':',':','I','d','e','n','t','i','f','i','e','r',0x00,0x00
  ,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,'i',
  'd',0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'H',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x1b,'I','D','L',':','C','O','R','B'
  ,'A','/','R','e','p','o','s','i','t','o','r','y','I','d',':'
  ,'1','.','0',0x00,0x00,0x00,0x00,0x00,0x16,':',':','C','O','R'
  ,'B','A',':',':','R','e','p','o','s','i','t','o','r','y','I'
  ,'d',0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x0b,'d','e','f','i','n','e','d','_','i','n',
  0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'7',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x18,'I','D','L',':','C','O','R','B','A'
  ,'/','C','o','n','t','a','i','n','e','r',':','1','.','0',0x00
  ,0x00,0x00,0x00,0x13,':',':','C','O','R','B','A',':',':','C'
  ,'o','n','t','a','i','n','e','r',0x00,0x00,0x00,0x00,0x00,0x08
  ,'v','e','r','s','i','o','n',0x00,0x00,0x00,0x00,0x15,0x00,0x00
  ,0x00,'H',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1a,'I','D','L'
  ,':','C','O','R','B','A','/','V','e','r','s','i','o','n','S'
  ,'p','e','c',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x15
  ,':',':','C','O','R','B','A',':',':','V','e','r','s','i','o'
  ,'n','S','p','e','c',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,'t','y','p','e',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x0c};

yotk* CORBA_TypeDescription__getTC(void)
{
  return (yotk*)CORBA_TypeDescription__tc;
}

void CORBA_TypeDescription__free( CORBA_TypeDescription* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_TypeDescription, (dvoid *)val, ffunc);
}

void CORBA_TypeDescription__copy( CORBA_TypeDescription* dest, 
  CORBA_TypeDescription* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_TypeDescription, (dvoid *)dest, (dvoid *)src, 
    afunc);
}


static ysidDecl(CORBA_StructDef___id) = "IDL:CORBA/StructDef:1.0";

CONST ysid* CORBA_StructDef__getId(void)
{
  return (CONST ysid*)CORBA_StructDef___id;
}

static CONST_DATA yotk CORBA_StructDef__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'7',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x18,'I','D','L',':','C','O','R','B','A','/',
  'S','t','r','u','c','t','D','e','f',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x13,':',':','C','O','R','B','A',':',':','S','t',
  'r','u','c','t','D','e','f',0x00};

yotk* CORBA_StructDef__getTC(void)
{
  return (yotk*)CORBA_StructDef__tc;
}


void CORBA_StructDef__free( CORBA_StructDef* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_StructDef, (dvoid *)val, ffunc);
}

void CORBA_StructDef__copy( CORBA_StructDef* dest, CORBA_StructDef* src, 
  ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_StructDef, (dvoid *)dest, (dvoid *)src, afunc);
}


yopar* CORBA_StructDef__get_members__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_StructDef__get_members");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_StructDef__get_members", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_StructMemberSeq;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_StructMemberSeq CORBA_StructDef__get_members( CORBA_StructDef or, 
  yoenv* ev)
{
  CORBA_StructMemberSeq _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_StructDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_StructDef__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (dvoid *)_impl, CORBA_StructDef__id);
      _result = (*(CORBA_StructMemberSeq (*)( CORBA_StructDef, yoenv*))_f)(
        or, ev);
    }
    else
      _result = (*_impl->_get_members)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_members", TRUE, _sem, (sword)0, 
          CORBA_StructDef__get_members_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}



static ysidDecl(CORBA_UnionDef___id) = "IDL:CORBA/UnionDef:1.0";

CONST ysid* CORBA_UnionDef__getId(void)
{
  return (CONST ysid*)CORBA_UnionDef___id;
}

static CONST_DATA yotk CORBA_UnionDef__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'6',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x17,'I','D','L',':','C','O','R','B','A','/',
  'U','n','i','o','n','D','e','f',':','1','.','0',0x00,0x00,0x00
  ,0x00,0x00,0x12,':',':','C','O','R','B','A',':',':','U','n',
  'i','o','n','D','e','f',0x00};

yotk* CORBA_UnionDef__getTC(void)
{
  return (yotk*)CORBA_UnionDef__tc;
}


void CORBA_UnionDef__free( CORBA_UnionDef* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_UnionDef, (dvoid *)val, ffunc);
}

void CORBA_UnionDef__copy( CORBA_UnionDef* dest, CORBA_UnionDef* src, ysmaf 
  afunc)
{
  yotkCopyVal( YCTC_CORBA_UnionDef, (dvoid *)dest, (dvoid *)src, afunc);
}


yopar* CORBA_UnionDef__get_discriminator_type__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_UnionDef__get_discriminator_type");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_UnionDef__get_discriminator_type", 
      (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)yoTcTypeCode;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

yotk* CORBA_UnionDef__get_discriminator_type( CORBA_UnionDef or, yoenv* ev)
{
  yotk* _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_UnionDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_UnionDef__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (dvoid *)_impl, CORBA_UnionDef__id);
      _result = (*(yotk* (*)( CORBA_UnionDef, yoenv*))_f)(or, ev);
    }
    else
      _result = (*_impl->_get_discriminator_type)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_discriminator_type", TRUE, _sem, (
          sword)0, CORBA_UnionDef__get_discriminator_type_pars, (dvoid **)0)
          ;
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_UnionDef__get_discriminator_type_def__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_UnionDef__get_discriminator_type_def");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( 
      "CORBA_UnionDef__get_discriminator_type_def", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_IDLType;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_IDLType CORBA_UnionDef__get_discriminator_type_def( CORBA_UnionDef or,
   yoenv* ev)
{
  CORBA_IDLType _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_UnionDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_UnionDef__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)1, (dvoid *)_impl, CORBA_UnionDef__id);
      _result = (*(CORBA_IDLType (*)( CORBA_UnionDef, yoenv*))_f)(or, ev);
    }
    else
      _result = (*_impl->_get_discriminator_type_def)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_discriminator_type_def", TRUE, 
          _sem, (sword)0, CORBA_UnionDef__get_discriminator_type_def_pars, (
          dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_UnionDef__get_members__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_UnionDef__get_members");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_UnionDef__get_members", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_UnionMemberSeq;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_UnionMemberSeq CORBA_UnionDef__get_members( CORBA_UnionDef or, yoenv* 
  ev)
{
  CORBA_UnionMemberSeq _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_UnionDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_UnionDef__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)2, (dvoid *)_impl, CORBA_UnionDef__id);
      _result = (*(CORBA_UnionMemberSeq (*)( CORBA_UnionDef, yoenv*))_f)(or,
         ev);
    }
    else
      _result = (*_impl->_get_members)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_members", TRUE, _sem, (sword)0, 
          CORBA_UnionDef__get_members_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}



static ysidDecl(CORBA_EnumDef___id) = "IDL:CORBA/EnumDef:1.0";

CONST ysid* CORBA_EnumDef__getId(void)
{
  return (CONST ysid*)CORBA_EnumDef___id;
}

static CONST_DATA yotk CORBA_EnumDef__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'5',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x16,'I','D','L',':','C','O','R','B','A','/',
  'E','n','u','m','D','e','f',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x11,':',':','C','O','R','B','A',':',':','E','n',
  'u','m','D','e','f',0x00};

yotk* CORBA_EnumDef__getTC(void)
{
  return (yotk*)CORBA_EnumDef__tc;
}


void CORBA_EnumDef__free( CORBA_EnumDef* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_EnumDef, (dvoid *)val, ffunc);
}

void CORBA_EnumDef__copy( CORBA_EnumDef* dest, CORBA_EnumDef* src, ysmaf 
  afunc)
{
  yotkCopyVal( YCTC_CORBA_EnumDef, (dvoid *)dest, (dvoid *)src, afunc);
}


yopar* CORBA_EnumDef__get_members__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_EnumDef__get_members");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_EnumDef__get_members", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_EnumMemberSeq;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_EnumMemberSeq CORBA_EnumDef__get_members( CORBA_EnumDef or, yoenv* ev)
  
{
  CORBA_EnumMemberSeq _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_EnumDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_EnumDef__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (dvoid *)_impl, CORBA_EnumDef__id);
      _result = (*(CORBA_EnumMemberSeq (*)( CORBA_EnumDef, yoenv*))_f)(or, 
        ev);
    }
    else
      _result = (*_impl->_get_members)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_members", TRUE, _sem, (sword)0, 
          CORBA_EnumDef__get_members_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}



static ysidDecl(CORBA_AliasDef___id) = "IDL:CORBA/AliasDef:1.0";

CONST ysid* CORBA_AliasDef__getId(void)
{
  return (CONST ysid*)CORBA_AliasDef___id;
}

static CONST_DATA yotk CORBA_AliasDef__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'6',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x17,'I','D','L',':','C','O','R','B','A','/',
  'A','l','i','a','s','D','e','f',':','1','.','0',0x00,0x00,0x00
  ,0x00,0x00,0x12,':',':','C','O','R','B','A',':',':','A','l',
  'i','a','s','D','e','f',0x00};

yotk* CORBA_AliasDef__getTC(void)
{
  return (yotk*)CORBA_AliasDef__tc;
}


void CORBA_AliasDef__free( CORBA_AliasDef* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_AliasDef, (dvoid *)val, ffunc);
}

void CORBA_AliasDef__copy( CORBA_AliasDef* dest, CORBA_AliasDef* src, ysmaf 
  afunc)
{
  yotkCopyVal( YCTC_CORBA_AliasDef, (dvoid *)dest, (dvoid *)src, afunc);
}


yopar* CORBA_AliasDef__get_original_type_def__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_AliasDef__get_original_type_def");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_AliasDef__get_original_type_def", (
      ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_IDLType;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_IDLType CORBA_AliasDef__get_original_type_def( CORBA_AliasDef or, 
  yoenv* ev)
{
  CORBA_IDLType _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_AliasDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_AliasDef__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (dvoid *)_impl, CORBA_AliasDef__id);
      _result = (*(CORBA_IDLType (*)( CORBA_AliasDef, yoenv*))_f)(or, ev);
    }
    else
      _result = (*_impl->_get_original_type_def)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_original_type_def", TRUE, _sem, (
          sword)0, CORBA_AliasDef__get_original_type_def_pars, (dvoid **)0);
          
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}



static ysidDecl(CORBA_StringDef___id) = "IDL:CORBA/StringDef:1.0";

CONST ysid* CORBA_StringDef__getId(void)
{
  return (CONST ysid*)CORBA_StringDef___id;
}

static CONST_DATA yotk CORBA_StringDef__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'7',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x18,'I','D','L',':','C','O','R','B','A','/',
  'S','t','r','i','n','g','D','e','f',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x13,':',':','C','O','R','B','A',':',':','S','t',
  'r','i','n','g','D','e','f',0x00};

yotk* CORBA_StringDef__getTC(void)
{
  return (yotk*)CORBA_StringDef__tc;
}


void CORBA_StringDef__free( CORBA_StringDef* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_StringDef, (dvoid *)val, ffunc);
}

void CORBA_StringDef__copy( CORBA_StringDef* dest, CORBA_StringDef* src, 
  ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_StringDef, (dvoid *)dest, (dvoid *)src, afunc);
}


yopar* CORBA_StringDef__get_bound__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_StringDef__get_bound");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_StringDef__get_bound", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)yoTcUlong;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

ub4 CORBA_StringDef__get_bound( CORBA_StringDef or, yoenv* ev)
{
  ub4 _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_StringDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_StringDef__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (dvoid *)_impl, CORBA_StringDef__id);
      _result = (*(ub4 (*)( CORBA_StringDef, yoenv*))_f)(or, ev);
    }
    else
      _result = (*_impl->_get_bound)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_bound", TRUE, _sem, (sword)0, 
          CORBA_StringDef__get_bound_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}



static ysidDecl(CORBA_SequenceDef___id) = "IDL:CORBA/SequenceDef:1.0";

CONST ysid* CORBA_SequenceDef__getId(void)
{
  return (CONST ysid*)CORBA_SequenceDef___id;
}

static CONST_DATA yotk CORBA_SequenceDef__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'=',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1a,'I','D','L',':','C','O','R','B','A','/',
  'S','e','q','u','e','n','c','e','D','e','f',':','1','.','0',
  0x00,0x00,0x00,0x00,0x00,0x00,0x15,':',':','C','O','R','B','A'
  ,':',':','S','e','q','u','e','n','c','e','D','e','f',0x00};

yotk* CORBA_SequenceDef__getTC(void)
{
  return (yotk*)CORBA_SequenceDef__tc;
}


void CORBA_SequenceDef__free( CORBA_SequenceDef* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_SequenceDef, (dvoid *)val, ffunc);
}

void CORBA_SequenceDef__copy( CORBA_SequenceDef* dest, CORBA_SequenceDef* 
  src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_SequenceDef, (dvoid *)dest, (dvoid *)src, afunc);
}


yopar* CORBA_SequenceDef__get_bound__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_SequenceDef__get_bound");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_SequenceDef__get_bound", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)yoTcUlong;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

ub4 CORBA_SequenceDef__get_bound( CORBA_SequenceDef or, yoenv* ev)
{
  ub4 _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_SequenceDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_SequenceDef__tyimpl*) yoLocalObj( (CORBA_Object)or, 
    (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (dvoid *)_impl, CORBA_SequenceDef__id);
      _result = (*(ub4 (*)( CORBA_SequenceDef, yoenv*))_f)(or, ev);
    }
    else
      _result = (*_impl->_get_bound)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_bound", TRUE, _sem, (sword)0, 
          CORBA_SequenceDef__get_bound_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_SequenceDef__get_element_type__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_SequenceDef__get_element_type");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_SequenceDef__get_element_type", (
      ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)yoTcTypeCode;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

yotk* CORBA_SequenceDef__get_element_type( CORBA_SequenceDef or, yoenv* ev)
{
  yotk* _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_SequenceDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_SequenceDef__tyimpl*) yoLocalObj( (CORBA_Object)or, 
    (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)1, (dvoid *)_impl, CORBA_SequenceDef__id);
      _result = (*(yotk* (*)( CORBA_SequenceDef, yoenv*))_f)(or, ev);
    }
    else
      _result = (*_impl->_get_element_type)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_element_type", TRUE, _sem, (sword)
          0, CORBA_SequenceDef__get_element_type_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_SequenceDef__get_element_type_def__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_SequenceDef__get_element_type_def");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_SequenceDef__get_element_type_def",
       (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_IDLType;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_IDLType CORBA_SequenceDef__get_element_type_def( CORBA_SequenceDef or,
   yoenv* ev)
{
  CORBA_IDLType _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_SequenceDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_SequenceDef__tyimpl*) yoLocalObj( (CORBA_Object)or, 
    (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)2, (dvoid *)_impl, CORBA_SequenceDef__id);
      _result = (*(CORBA_IDLType (*)( CORBA_SequenceDef, yoenv*))_f)(or, ev)
        ;
    }
    else
      _result = (*_impl->_get_element_type_def)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_element_type_def", TRUE, _sem, (
          sword)0, CORBA_SequenceDef__get_element_type_def_pars, (dvoid **)
          0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}



static ysidDecl(CORBA_ArrayDef___id) = "IDL:CORBA/ArrayDef:1.0";

CONST ysid* CORBA_ArrayDef__getId(void)
{
  return (CONST ysid*)CORBA_ArrayDef___id;
}

static CONST_DATA yotk CORBA_ArrayDef__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'6',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x17,'I','D','L',':','C','O','R','B','A','/',
  'A','r','r','a','y','D','e','f',':','1','.','0',0x00,0x00,0x00
  ,0x00,0x00,0x12,':',':','C','O','R','B','A',':',':','A','r',
  'r','a','y','D','e','f',0x00};

yotk* CORBA_ArrayDef__getTC(void)
{
  return (yotk*)CORBA_ArrayDef__tc;
}


void CORBA_ArrayDef__free( CORBA_ArrayDef* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_ArrayDef, (dvoid *)val, ffunc);
}

void CORBA_ArrayDef__copy( CORBA_ArrayDef* dest, CORBA_ArrayDef* src, ysmaf 
  afunc)
{
  yotkCopyVal( YCTC_CORBA_ArrayDef, (dvoid *)dest, (dvoid *)src, afunc);
}


yopar* CORBA_ArrayDef__get_length__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_ArrayDef__get_length");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_ArrayDef__get_length", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)yoTcUlong;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

ub4 CORBA_ArrayDef__get_length( CORBA_ArrayDef or, yoenv* ev)
{
  ub4 _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_ArrayDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_ArrayDef__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (dvoid *)_impl, CORBA_ArrayDef__id);
      _result = (*(ub4 (*)( CORBA_ArrayDef, yoenv*))_f)(or, ev);
    }
    else
      _result = (*_impl->_get_length)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_length", TRUE, _sem, (sword)0, 
          CORBA_ArrayDef__get_length_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_ArrayDef__get_element_type__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_ArrayDef__get_element_type");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_ArrayDef__get_element_type", (ub4)
      1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)yoTcTypeCode;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

yotk* CORBA_ArrayDef__get_element_type( CORBA_ArrayDef or, yoenv* ev)
{
  yotk* _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_ArrayDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_ArrayDef__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)1, (dvoid *)_impl, CORBA_ArrayDef__id);
      _result = (*(yotk* (*)( CORBA_ArrayDef, yoenv*))_f)(or, ev);
    }
    else
      _result = (*_impl->_get_element_type)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_element_type", TRUE, _sem, (sword)
          0, CORBA_ArrayDef__get_element_type_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_ArrayDef__get_element_type_def__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_ArrayDef__get_element_type_def");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_ArrayDef__get_element_type_def", (
      ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_IDLType;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_IDLType CORBA_ArrayDef__get_element_type_def( CORBA_ArrayDef or, 
  yoenv* ev)
{
  CORBA_IDLType _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_ArrayDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_ArrayDef__tyimpl*) yoLocalObj( (CORBA_Object)or, (
    yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)2, (dvoid *)_impl, CORBA_ArrayDef__id);
      _result = (*(CORBA_IDLType (*)( CORBA_ArrayDef, yoenv*))_f)(or, ev);
    }
    else
      _result = (*_impl->_get_element_type_def)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_element_type_def", TRUE, _sem, (
          sword)0, CORBA_ArrayDef__get_element_type_def_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}



static ysidDecl(CORBA_ExceptionDef___id) = "IDL:CORBA/ExceptionDef:1.0";

CONST ysid* CORBA_ExceptionDef__getId(void)
{
  return (CONST ysid*)CORBA_ExceptionDef___id;
}

static CONST_DATA yotk CORBA_ExceptionDef__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'>',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1b,'I','D','L',':','C','O','R','B','A','/',
  'E','x','c','e','p','t','i','o','n','D','e','f',':','1','.',
  '0',0x00,0x00,0x00,0x00,0x00,0x16,':',':','C','O','R','B','A'
  ,':',':','E','x','c','e','p','t','i','o','n','D','e','f',0x00
  };

yotk* CORBA_ExceptionDef__getTC(void)
{
  return (yotk*)CORBA_ExceptionDef__tc;
}


void CORBA_ExceptionDef__free( CORBA_ExceptionDef* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_ExceptionDef, (dvoid *)val, ffunc);
}

void CORBA_ExceptionDef__copy( CORBA_ExceptionDef* dest, 
  CORBA_ExceptionDef* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_ExceptionDef, (dvoid *)dest, (dvoid *)src, afunc);
    
}


yopar* CORBA_ExceptionDef__get_type__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_ExceptionDef__get_type");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_ExceptionDef__get_type", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)yoTcTypeCode;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

yotk* CORBA_ExceptionDef__get_type( CORBA_ExceptionDef or, yoenv* ev)
{
  yotk* _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_ExceptionDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_ExceptionDef__tyimpl*) yoLocalObj( (CORBA_Object)or,
     (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (dvoid *)_impl, CORBA_ExceptionDef__id);
        
      _result = (*(yotk* (*)( CORBA_ExceptionDef, yoenv*))_f)(or, ev);
    }
    else
      _result = (*_impl->_get_type)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_type", TRUE, _sem, (sword)0, 
          CORBA_ExceptionDef__get_type_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_ExceptionDef__get_members__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_ExceptionDef__get_members");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_ExceptionDef__get_members", (ub4)1)
      ;
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_StructMemberSeq;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_StructMemberSeq CORBA_ExceptionDef__get_members( CORBA_ExceptionDef 
  or, yoenv* ev)
{
  CORBA_StructMemberSeq _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_ExceptionDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_ExceptionDef__tyimpl*) yoLocalObj( (CORBA_Object)or,
     (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)1, (dvoid *)_impl, CORBA_ExceptionDef__id);
        
      _result = (*(CORBA_StructMemberSeq (*)( CORBA_ExceptionDef, yoenv*))
        _f)(or, ev);
    }
    else
      _result = (*_impl->_get_members)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_members", TRUE, _sem, (sword)0, 
          CORBA_ExceptionDef__get_members_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}


static CONST_DATA yotk CORBA_ExceptionDescription__tc[] = 
  {0x00,0x00,0x00,0x0f,0x00,0x00,0x01,0xc0,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,'#','I','D','L',':','C','O','R','B','A','/',
  'E','x','c','e','p','t','i','o','n','D','e','s','c','r','i',
  'p','t','i','o','n',':','1','.','0',0x00,0x00,0x00,0x00,0x00
  ,0x1e,':',':','C','O','R','B','A',':',':','E','x','c','e','p'
  ,'t','i','o','n','D','e','s','c','r','i','p','t','i','o','n'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x05,'n',
  'a','m','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00
  ,0x00,'D',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,'I','D','L'
  ,':','C','O','R','B','A','/','I','d','e','n','t','i','f','i'
  ,'e','r',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x14,':',':','C','O','R','B','A',':',':','I','d','e','n','t'
  ,'i','f','i','e','r',0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x03,'i','d',0x00,0x00,0x00,0x00,0x00,0x15
  ,0x00,0x00,0x00,'H',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1b,
  'I','D','L',':','C','O','R','B','A','/','R','e','p','o','s',
  'i','t','o','r','y','I','d',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x00,0x16,':',':','C','O','R','B','A',':',':','R','e','p','o'
  ,'s','i','t','o','r','y','I','d',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,'d','e','f','i'
  ,'n','e','d','_','i','n',0x00,0x00,0x00,0x00,0x00,0x0e,0x00,
  0x00,0x00,'7',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,'I','D'
  ,'L',':','C','O','R','B','A','/','C','o','n','t','a','i','n'
  ,'e','r',':','1','.','0',0x00,0x00,0x00,0x00,0x13,':',':','C'
  ,'O','R','B','A',':',':','C','o','n','t','a','i','n','e','r'
  ,0x00,0x00,0x00,0x00,0x00,0x08,'v','e','r','s','i','o','n',0x00
  ,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'H',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1a,'I','D','L',':','C','O','R','B','A','/',
  'V','e','r','s','i','o','n','S','p','e','c',':','1','.','0',
  0x00,0x00,0x00,0x00,0x00,0x00,0x15,':',':','C','O','R','B','A'
  ,':',':','V','e','r','s','i','o','n','S','p','e','c',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x05,'t','y','p','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x0c};

yotk* CORBA_ExceptionDescription__getTC(void)
{
  return (yotk*)CORBA_ExceptionDescription__tc;
}

void CORBA_ExceptionDescription__free( CORBA_ExceptionDescription* val, 
  ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_ExceptionDescription, (dvoid *)val, ffunc);
}

void CORBA_ExceptionDescription__copy( CORBA_ExceptionDescription* dest, 
  CORBA_ExceptionDescription* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_ExceptionDescription, (dvoid *)dest, (dvoid *)src,
     afunc);
}

static CONST_DATA yotk CORBA_AttributeMode__tc[] = 
  {0x00,0x00,0x00,0x11,0x00,0x00,0x00,'f',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1c,'I','D','L',':','C','O','R','B','A','/',
  'A','t','t','r','i','b','u','t','e','M','o','d','e',':','1',
  '.','0',0x00,0x00,0x00,0x00,0x17,':',':','C','O','R','B','A'
  ,':',':','A','t','t','r','i','b','u','t','e','M','o','d','e'
  ,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x0c,'A','T','T'
  ,'R','_','N','O','R','M','A','L',0x00,0x00,0x00,0x00,0x0e,'A'
  ,'T','T','R','_','R','E','A','D','O','N','L','Y',0x00};

yotk* CORBA_AttributeMode__getTC(void)
{
  return (yotk*)CORBA_AttributeMode__tc;
}

void CORBA_AttributeMode__free( CORBA_AttributeMode* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_AttributeMode, (dvoid *)val, ffunc);
}

void CORBA_AttributeMode__copy( CORBA_AttributeMode* dest, 
  CORBA_AttributeMode* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_AttributeMode, (dvoid *)dest, (dvoid *)src, afunc)
    ;
}


static ysidDecl(CORBA_AttributeDef___id) = "IDL:CORBA/AttributeDef:1.0";

CONST ysid* CORBA_AttributeDef__getId(void)
{
  return (CONST ysid*)CORBA_AttributeDef___id;
}

static CONST_DATA yotk CORBA_AttributeDef__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'>',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1b,'I','D','L',':','C','O','R','B','A','/',
  'A','t','t','r','i','b','u','t','e','D','e','f',':','1','.',
  '0',0x00,0x00,0x00,0x00,0x00,0x16,':',':','C','O','R','B','A'
  ,':',':','A','t','t','r','i','b','u','t','e','D','e','f',0x00
  };

yotk* CORBA_AttributeDef__getTC(void)
{
  return (yotk*)CORBA_AttributeDef__tc;
}


void CORBA_AttributeDef__free( CORBA_AttributeDef* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_AttributeDef, (dvoid *)val, ffunc);
}

void CORBA_AttributeDef__copy( CORBA_AttributeDef* dest, 
  CORBA_AttributeDef* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_AttributeDef, (dvoid *)dest, (dvoid *)src, afunc);
    
}


yopar* CORBA_AttributeDef__get_type__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_AttributeDef__get_type");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_AttributeDef__get_type", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)yoTcTypeCode;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

yotk* CORBA_AttributeDef__get_type( CORBA_AttributeDef or, yoenv* ev)
{
  yotk* _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_AttributeDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_AttributeDef__tyimpl*) yoLocalObj( (CORBA_Object)or,
     (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (dvoid *)_impl, CORBA_AttributeDef__id);
        
      _result = (*(yotk* (*)( CORBA_AttributeDef, yoenv*))_f)(or, ev);
    }
    else
      _result = (*_impl->_get_type)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_type", TRUE, _sem, (sword)0, 
          CORBA_AttributeDef__get_type_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_AttributeDef__get_type_def__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_AttributeDef__get_type_def");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_AttributeDef__get_type_def", (ub4)
      1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_IDLType;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_IDLType CORBA_AttributeDef__get_type_def( CORBA_AttributeDef or, 
  yoenv* ev)
{
  CORBA_IDLType _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_AttributeDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_AttributeDef__tyimpl*) yoLocalObj( (CORBA_Object)or,
     (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)1, (dvoid *)_impl, CORBA_AttributeDef__id);
        
      _result = (*(CORBA_IDLType (*)( CORBA_AttributeDef, yoenv*))_f)(or, 
        ev);
    }
    else
      _result = (*_impl->_get_type_def)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_type_def", TRUE, _sem, (sword)0, 
          CORBA_AttributeDef__get_type_def_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_AttributeDef__get_mode__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_AttributeDef__get_mode");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_AttributeDef__get_mode", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_AttributeMode;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_AttributeMode CORBA_AttributeDef__get_mode( CORBA_AttributeDef or, 
  yoenv* ev)
{
  CORBA_AttributeMode _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_AttributeDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_AttributeDef__tyimpl*) yoLocalObj( (CORBA_Object)or,
     (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)2, (dvoid *)_impl, CORBA_AttributeDef__id);
        
      _result = (*(CORBA_AttributeMode (*)( CORBA_AttributeDef, yoenv*))_f)(
        or, ev);
    }
    else
      _result = (*_impl->_get_mode)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_mode", TRUE, _sem, (sword)0, 
          CORBA_AttributeDef__get_mode_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}


static CONST_DATA yotk CORBA_AttributeDescription__tc[] = 
  {0x00,0x00,0x00,0x0f,0x00,0x00,0x02,':',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,'#','I','D','L',':','C','O','R','B','A','/','A'
  ,'t','t','r','i','b','u','t','e','D','e','s','c','r','i','p'
  ,'t','i','o','n',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x1e
  ,':',':','C','O','R','B','A',':',':','A','t','t','r','i','b'
  ,'u','t','e','D','e','s','c','r','i','p','t','i','o','n',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x05,'n','a','m'
  ,'e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,
  'D',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,'I','D','L',':',
  'C','O','R','B','A','/','I','d','e','n','t','i','f','i','e',
  'r',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,
  ':',':','C','O','R','B','A',':',':','I','d','e','n','t','i',
  'f','i','e','r',0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x03,'i','d',0x00,0x00,0x00,0x00,0x00,0x15,0x00
  ,0x00,0x00,'H',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1b,'I','D'
  ,'L',':','C','O','R','B','A','/','R','e','p','o','s','i','t'
  ,'o','r','y','I','d',':','1','.','0',0x00,0x00,0x00,0x00,0x00
  ,0x16,':',':','C','O','R','B','A',':',':','R','e','p','o','s'
  ,'i','t','o','r','y','I','d',0x00,0x00,0x00,0x00,0x00,0x00,0x12
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,'d','e','f','i','n'
  ,'e','d','_','i','n',0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00
  ,0x00,'7',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,'I','D','L'
  ,':','C','O','R','B','A','/','C','o','n','t','a','i','n','e'
  ,'r',':','1','.','0',0x00,0x00,0x00,0x00,0x13,':',':','C','O'
  ,'R','B','A',':',':','C','o','n','t','a','i','n','e','r',0x00
  ,0x00,0x00,0x00,0x00,0x08,'v','e','r','s','i','o','n',0x00,0x00
  ,0x00,0x00,0x15,0x00,0x00,0x00,'H',0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x1a,'I','D','L',':','C','O','R','B','A','/','V','e'
  ,'r','s','i','o','n','S','p','e','c',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x15,':',':','C','O','R','B','A',':',':'
  ,'V','e','r','s','i','o','n','S','p','e','c',0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x05,'t','y','p','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c
  ,0x00,0x00,0x00,0x05,'m','o','d','e',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x11,0x00,0x00,0x00,'f',0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x1c,'I','D','L',':','C','O','R','B','A','/','A','t'
  ,'t','r','i','b','u','t','e','M','o','d','e',':','1','.','0'
  ,0x00,0x00,0x00,0x00,0x17,':',':','C','O','R','B','A',':',':'
  ,'A','t','t','r','i','b','u','t','e','M','o','d','e',0x00,0x00
  ,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x0c,'A','T','T','R','_'
  ,'N','O','R','M','A','L',0x00,0x00,0x00,0x00,0x0e,'A','T','T'
  ,'R','_','R','E','A','D','O','N','L','Y',0x00};

yotk* CORBA_AttributeDescription__getTC(void)
{
  return (yotk*)CORBA_AttributeDescription__tc;
}

void CORBA_AttributeDescription__free( CORBA_AttributeDescription* val, 
  ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_AttributeDescription, (dvoid *)val, ffunc);
}

void CORBA_AttributeDescription__copy( CORBA_AttributeDescription* dest, 
  CORBA_AttributeDescription* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_AttributeDescription, (dvoid *)dest, (dvoid *)src,
     afunc);
}

static CONST_DATA yotk CORBA_OperationMode__tc[] = 
  {0x00,0x00,0x00,0x11,0x00,0x00,0x00,'b',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1c,'I','D','L',':','C','O','R','B','A','/',
  'O','p','e','r','a','t','i','o','n','M','o','d','e',':','1',
  '.','0',0x00,0x00,0x00,0x00,0x17,':',':','C','O','R','B','A'
  ,':',':','O','p','e','r','a','t','i','o','n','M','o','d','e'
  ,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x0a,'O','P','_'
  ,'N','O','R','M','A','L',0x00,0x00,0x00,0x00,0x00,0x00,0x0a,
  'O','P','_','O','N','E','W','A','Y',0x00};

yotk* CORBA_OperationMode__getTC(void)
{
  return (yotk*)CORBA_OperationMode__tc;
}

void CORBA_OperationMode__free( CORBA_OperationMode* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_OperationMode, (dvoid *)val, ffunc);
}

void CORBA_OperationMode__copy( CORBA_OperationMode* dest, 
  CORBA_OperationMode* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_OperationMode, (dvoid *)dest, (dvoid *)src, afunc)
    ;
}

static CONST_DATA yotk CORBA_ParameterMode__tc[] = 
  {0x00,0x00,0x00,0x11,0x00,0x00,0x00,'t',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1c,'I','D','L',':','C','O','R','B','A','/',
  'P','a','r','a','m','e','t','e','r','M','o','d','e',':','1',
  '.','0',0x00,0x00,0x00,0x00,0x17,':',':','C','O','R','B','A'
  ,':',':','P','a','r','a','m','e','t','e','r','M','o','d','e'
  ,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x09,'P','A','R'
  ,'A','M','_','I','N',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a
  ,'P','A','R','A','M','_','O','U','T',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0c,'P','A','R','A','M','_','I','N','O','U','T',0x00}
  ;

yotk* CORBA_ParameterMode__getTC(void)
{
  return (yotk*)CORBA_ParameterMode__tc;
}

void CORBA_ParameterMode__free( CORBA_ParameterMode* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_ParameterMode, (dvoid *)val, ffunc);
}

void CORBA_ParameterMode__copy( CORBA_ParameterMode* dest, 
  CORBA_ParameterMode* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_ParameterMode, (dvoid *)dest, (dvoid *)src, afunc)
    ;
}

static CONST_DATA yotk CORBA_ParameterDescription__tc[] = 
  {0x00,0x00,0x00,0x0f,0x00,0x00,0x01,0x94,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,'#','I','D','L',':','C','O','R','B','A','/',
  'P','a','r','a','m','e','t','e','r','D','e','s','c','r','i',
  'p','t','i','o','n',':','1','.','0',0x00,0x00,0x00,0x00,0x00
  ,0x1e,':',':','C','O','R','B','A',':',':','P','a','r','a','m'
  ,'e','t','e','r','D','e','s','c','r','i','p','t','i','o','n'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,'n',
  'a','m','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00
  ,0x00,'D',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,'I','D','L'
  ,':','C','O','R','B','A','/','I','d','e','n','t','i','f','i'
  ,'e','r',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x14,':',':','C','O','R','B','A',':',':','I','d','e','n','t'
  ,'i','f','i','e','r',0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x05,'t','y','p','e',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x09,'t','y','p','e','_'
  ,'d','e','f',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00
  ,0x00,'5',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x16,'I','D','L'
  ,':','C','O','R','B','A','/','I','D','L','T','y','p','e',':'
  ,'1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x11,':',':','C',
  'O','R','B','A',':',':','I','D','L','T','y','p','e',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x05,'m','o','d','e',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,'t',0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x1c,'I','D','L',':','C','O','R','B','A'
  ,'/','P','a','r','a','m','e','t','e','r','M','o','d','e',':'
  ,'1','.','0',0x00,0x00,0x00,0x00,0x17,':',':','C','O','R','B'
  ,'A',':',':','P','a','r','a','m','e','t','e','r','M','o','d'
  ,'e',0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x09,'P','A'
  ,'R','A','M','_','I','N',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x0a,'P','A','R','A','M','_','O','U','T',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x0c,'P','A','R','A','M','_','I','N','O','U','T',
  0x00};

yotk* CORBA_ParameterDescription__getTC(void)
{
  return (yotk*)CORBA_ParameterDescription__tc;
}

void CORBA_ParameterDescription__free( CORBA_ParameterDescription* val, 
  ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_ParameterDescription, (dvoid *)val, ffunc);
}

void CORBA_ParameterDescription__copy( CORBA_ParameterDescription* dest, 
  CORBA_ParameterDescription* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_ParameterDescription, (dvoid *)dest, (dvoid *)src,
     afunc);
}

static CONST_DATA yotk CORBA_ParDescriptionSeq__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x01,0xf4,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x20,'I','D','L',':','C','O','R','B','A','/'
  ,'P','a','r','D','e','s','c','r','i','p','t','i','o','n','S'
  ,'e','q',':','1','.','0',0x00,0x00,0x00,0x00,0x1b,':',':','C'
  ,'O','R','B','A',':',':','P','a','r','D','e','s','c','r','i'
  ,'p','t','i','o','n','S','e','q',0x00,0x00,0x00,0x00,0x00,0x13
  ,0x00,0x00,0x01,0xa4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
  ,0x00,0x00,0x01,0x94,0x00,0x00,0x00,0x00,0x00,0x00,0x00,'#',
  'I','D','L',':','C','O','R','B','A','/','P','a','r','a','m',
  'e','t','e','r','D','e','s','c','r','i','p','t','i','o','n',
  ':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x1e,':',':','C','O'
  ,'R','B','A',':',':','P','a','r','a','m','e','t','e','r','D'
  ,'e','s','c','r','i','p','t','i','o','n',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x04,0x00,0x00,0x00,0x05,'n','a','m','e',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'D',0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x19,'I','D','L',':','C','O','R','B'
  ,'A','/','I','d','e','n','t','i','f','i','e','r',':','1','.'
  ,'0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,':',':','C','O'
  ,'R','B','A',':',':','I','d','e','n','t','i','f','i','e','r'
  ,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x05,'t','y','p','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c
  ,0x00,0x00,0x00,0x09,'t','y','p','e','_','d','e','f',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'5',0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x16,'I','D','L',':','C','O','R','B'
  ,'A','/','I','D','L','T','y','p','e',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x11,':',':','C','O','R','B','A',':',':'
  ,'I','D','L','T','y','p','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x05,'m','o','d','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11
  ,0x00,0x00,0x00,'t',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,
  'I','D','L',':','C','O','R','B','A','/','P','a','r','a','m',
  'e','t','e','r','M','o','d','e',':','1','.','0',0x00,0x00,0x00
  ,0x00,0x17,':',':','C','O','R','B','A',':',':','P','a','r','a'
  ,'m','e','t','e','r','M','o','d','e',0x00,0x00,0x00,0x00,0x00
  ,0x03,0x00,0x00,0x00,0x09,'P','A','R','A','M','_','I','N',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,'P','A','R','A','M','_',
  'O','U','T',0x00,0x00,0x00,0x00,0x00,0x00,0x0c,'P','A','R','A'
  ,'M','_','I','N','O','U','T',0x00,0x00,0x00,0x00,0x00};

yotk* CORBA_ParDescriptionSeq__getTC(void)
{
  return (yotk*)CORBA_ParDescriptionSeq__tc;
}

void CORBA_ParDescriptionSeq__free( CORBA_ParDescriptionSeq* val, ysmff 
  ffunc)
{
  yotkFreeVal( YCTC_CORBA_ParDescriptionSeq, (dvoid *)val, ffunc);
}

void CORBA_ParDescriptionSeq__copy( CORBA_ParDescriptionSeq* dest, 
  CORBA_ParDescriptionSeq* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_ParDescriptionSeq, (dvoid *)dest, (dvoid *)src, 
    afunc);
}

static CONST_DATA yotk CORBA_ExceptionDefSeq__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x00,0xa0,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x1e,'I','D','L',':','C','O','R','B','A','/'
  ,'E','x','c','e','p','t','i','o','n','D','e','f','S','e','q'
  ,':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x19,':',':',
  'C','O','R','B','A',':',':','E','x','c','e','p','t','i','o',
  'n','D','e','f','S','e','q',0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x13,0x00,0x00,0x00,'P',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x0e,0x00,0x00,0x00,'>',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1b
  ,'I','D','L',':','C','O','R','B','A','/','E','x','c','e','p'
  ,'t','i','o','n','D','e','f',':','1','.','0',0x00,0x00,0x00,
  0x00,0x00,0x16,':',':','C','O','R','B','A',':',':','E','x','c'
  ,'e','p','t','i','o','n','D','e','f',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00};

yotk* CORBA_ExceptionDefSeq__getTC(void)
{
  return (yotk*)CORBA_ExceptionDefSeq__tc;
}

void CORBA_ExceptionDefSeq__free( CORBA_ExceptionDefSeq* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_ExceptionDefSeq, (dvoid *)val, ffunc);
}

void CORBA_ExceptionDefSeq__copy( CORBA_ExceptionDefSeq* dest, 
  CORBA_ExceptionDefSeq* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_ExceptionDefSeq, (dvoid *)dest, (dvoid *)src, 
    afunc);
}

static CONST_DATA yotk CORBA_ExcDescriptionSeq__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x02,0x20,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x20,'I','D','L',':','C','O','R','B','A','/'
  ,'E','x','c','D','e','s','c','r','i','p','t','i','o','n','S'
  ,'e','q',':','1','.','0',0x00,0x00,0x00,0x00,0x1b,':',':','C'
  ,'O','R','B','A',':',':','E','x','c','D','e','s','c','r','i'
  ,'p','t','i','o','n','S','e','q',0x00,0x00,0x00,0x00,0x00,0x13
  ,0x00,0x00,0x01,0xd0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
  ,0x00,0x00,0x01,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,'#',
  'I','D','L',':','C','O','R','B','A','/','E','x','c','e','p',
  't','i','o','n','D','e','s','c','r','i','p','t','i','o','n',
  ':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x1e,':',':','C','O'
  ,'R','B','A',':',':','E','x','c','e','p','t','i','o','n','D'
  ,'e','s','c','r','i','p','t','i','o','n',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x05,0x00,0x00,0x00,0x05,'n','a','m','e',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'D',0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x19,'I','D','L',':','C','O','R','B'
  ,'A','/','I','d','e','n','t','i','f','i','e','r',':','1','.'
  ,'0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,':',':','C','O'
  ,'R','B','A',':',':','I','d','e','n','t','i','f','i','e','r'
  ,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x03,'i','d',0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'H'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1b,'I','D','L',':','C'
  ,'O','R','B','A','/','R','e','p','o','s','i','t','o','r','y'
  ,'I','d',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x16,':',':'
  ,'C','O','R','B','A',':',':','R','e','p','o','s','i','t','o'
  ,'r','y','I','d',0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x0b,'d','e','f','i','n','e','d','_'
  ,'i','n',0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'7',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x18,'I','D','L',':','C','O',
  'R','B','A','/','C','o','n','t','a','i','n','e','r',':','1',
  '.','0',0x00,0x00,0x00,0x00,0x13,':',':','C','O','R','B','A'
  ,':',':','C','o','n','t','a','i','n','e','r',0x00,0x00,0x00,
  0x00,0x00,0x08,'v','e','r','s','i','o','n',0x00,0x00,0x00,0x00
  ,0x15,0x00,0x00,0x00,'H',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x1a,'I','D','L',':','C','O','R','B','A','/','V','e','r','s'
  ,'i','o','n','S','p','e','c',':','1','.','0',0x00,0x00,0x00,
  0x00,0x00,0x00,0x15,':',':','C','O','R','B','A',':',':','V',
  'e','r','s','i','o','n','S','p','e','c',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,
  't','y','p','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x00
  ,0x00,0x00,0x00};

yotk* CORBA_ExcDescriptionSeq__getTC(void)
{
  return (yotk*)CORBA_ExcDescriptionSeq__tc;
}

void CORBA_ExcDescriptionSeq__free( CORBA_ExcDescriptionSeq* val, ysmff 
  ffunc)
{
  yotkFreeVal( YCTC_CORBA_ExcDescriptionSeq, (dvoid *)val, ffunc);
}

void CORBA_ExcDescriptionSeq__copy( CORBA_ExcDescriptionSeq* dest, 
  CORBA_ExcDescriptionSeq* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_ExcDescriptionSeq, (dvoid *)dest, (dvoid *)src, 
    afunc);
}

static CONST_DATA yotk CORBA_ContextIdentifier__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x00,0x94,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x20,'I','D','L',':','C','O','R','B','A','/'
  ,'C','o','n','t','e','x','t','I','d','e','n','t','i','f','i'
  ,'e','r',':','1','.','0',0x00,0x00,0x00,0x00,0x1b,':',':','C'
  ,'O','R','B','A',':',':','C','o','n','t','e','x','t','I','d'
  ,'e','n','t','i','f','i','e','r',0x00,0x00,0x00,0x00,0x00,0x15
  ,0x00,0x00,0x00,'D',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,
  'I','D','L',':','C','O','R','B','A','/','I','d','e','n','t',
  'i','f','i','e','r',':','1','.','0',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x14,':',':','C','O','R','B','A',':',':','I','d',
  'e','n','t','i','f','i','e','r',0x00,0x00,0x00,0x00,0x12,0x00
  ,0x00,0x00,0x00};

yotk* CORBA_ContextIdentifier__getTC(void)
{
  return (yotk*)CORBA_ContextIdentifier__tc;
}

static CONST_DATA yotk CORBA_ContextIdSeq__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x00,'X',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1b,'I','D','L',':','C','O','R','B','A','/',
  'C','o','n','t','e','x','t','I','d','S','e','q',':','1','.',
  '0',0x00,0x00,0x00,0x00,0x00,0x16,':',':','C','O','R','B','A'
  ,':',':','C','o','n','t','e','x','t','I','d','S','e','q',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x13,0x00,0x00,0x00,0x10,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00};

yotk* CORBA_ContextIdSeq__getTC(void)
{
  return (yotk*)CORBA_ContextIdSeq__tc;
}

void CORBA_ContextIdSeq__free( CORBA_ContextIdSeq* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_ContextIdSeq, (dvoid *)val, ffunc);
}

void CORBA_ContextIdSeq__copy( CORBA_ContextIdSeq* dest, 
  CORBA_ContextIdSeq* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_ContextIdSeq, (dvoid *)dest, (dvoid *)src, afunc);
    
}


static ysidDecl(CORBA_OperationDef___id) = "IDL:CORBA/OperationDef:1.0";

CONST ysid* CORBA_OperationDef__getId(void)
{
  return (CONST ysid*)CORBA_OperationDef___id;
}

static CONST_DATA yotk CORBA_OperationDef__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'>',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1b,'I','D','L',':','C','O','R','B','A','/',
  'O','p','e','r','a','t','i','o','n','D','e','f',':','1','.',
  '0',0x00,0x00,0x00,0x00,0x00,0x16,':',':','C','O','R','B','A'
  ,':',':','O','p','e','r','a','t','i','o','n','D','e','f',0x00
  };

yotk* CORBA_OperationDef__getTC(void)
{
  return (yotk*)CORBA_OperationDef__tc;
}


void CORBA_OperationDef__free( CORBA_OperationDef* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_OperationDef, (dvoid *)val, ffunc);
}

void CORBA_OperationDef__copy( CORBA_OperationDef* dest, 
  CORBA_OperationDef* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_OperationDef, (dvoid *)dest, (dvoid *)src, afunc);
    
}


yopar* CORBA_OperationDef__get_result__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_OperationDef__get_result");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_OperationDef__get_result", (ub4)1);
      
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)yoTcTypeCode;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

yotk* CORBA_OperationDef__get_result( CORBA_OperationDef or, yoenv* ev)
{
  yotk* _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_OperationDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_OperationDef__tyimpl*) yoLocalObj( (CORBA_Object)or,
     (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (dvoid *)_impl, CORBA_OperationDef__id);
        
      _result = (*(yotk* (*)( CORBA_OperationDef, yoenv*))_f)(or, ev);
    }
    else
      _result = (*_impl->_get_result)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_result", TRUE, _sem, (sword)0, 
          CORBA_OperationDef__get_result_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_OperationDef__get_result_def__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_OperationDef__get_result_def");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_OperationDef__get_result_def", (
      ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_IDLType;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_IDLType CORBA_OperationDef__get_result_def( CORBA_OperationDef or, 
  yoenv* ev)
{
  CORBA_IDLType _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_OperationDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_OperationDef__tyimpl*) yoLocalObj( (CORBA_Object)or,
     (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)1, (dvoid *)_impl, CORBA_OperationDef__id);
        
      _result = (*(CORBA_IDLType (*)( CORBA_OperationDef, yoenv*))_f)(or, 
        ev);
    }
    else
      _result = (*_impl->_get_result_def)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_result_def", TRUE, _sem, (sword)0,
           CORBA_OperationDef__get_result_def_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_OperationDef__get_params__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_OperationDef__get_params");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_OperationDef__get_params", (ub4)1);
      
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_ParDescriptionSeq;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_ParDescriptionSeq CORBA_OperationDef__get_params( CORBA_OperationDef 
  or, yoenv* ev)
{
  CORBA_ParDescriptionSeq _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_OperationDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_OperationDef__tyimpl*) yoLocalObj( (CORBA_Object)or,
     (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)2, (dvoid *)_impl, CORBA_OperationDef__id);
        
      _result = (*(CORBA_ParDescriptionSeq (*)( CORBA_OperationDef, yoenv*))
        _f)(or, ev);
    }
    else
      _result = (*_impl->_get_params)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_params", TRUE, _sem, (sword)0, 
          CORBA_OperationDef__get_params_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_OperationDef__get_mode__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_OperationDef__get_mode");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_OperationDef__get_mode", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_OperationMode;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_OperationMode CORBA_OperationDef__get_mode( CORBA_OperationDef or, 
  yoenv* ev)
{
  CORBA_OperationMode _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_OperationDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_OperationDef__tyimpl*) yoLocalObj( (CORBA_Object)or,
     (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)3, (dvoid *)_impl, CORBA_OperationDef__id);
        
      _result = (*(CORBA_OperationMode (*)( CORBA_OperationDef, yoenv*))_f)(
        or, ev);
    }
    else
      _result = (*_impl->_get_mode)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_mode", TRUE, _sem, (sword)0, 
          CORBA_OperationDef__get_mode_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_OperationDef__get_exceptions__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_OperationDef__get_exceptions");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_OperationDef__get_exceptions", (
      ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_ExceptionDefSeq;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_ExceptionDefSeq CORBA_OperationDef__get_exceptions( 
  CORBA_OperationDef or, yoenv* ev)
{
  CORBA_ExceptionDefSeq _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_OperationDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_OperationDef__tyimpl*) yoLocalObj( (CORBA_Object)or,
     (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)4, (dvoid *)_impl, CORBA_OperationDef__id);
        
      _result = (*(CORBA_ExceptionDefSeq (*)( CORBA_OperationDef, yoenv*))
        _f)(or, ev);
    }
    else
      _result = (*_impl->_get_exceptions)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_exceptions", TRUE, _sem, (sword)0,
           CORBA_OperationDef__get_exceptions_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_OperationDef__get_contexts__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_OperationDef__get_contexts");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_OperationDef__get_contexts", (ub4)
      1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_ContextIdSeq;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_ContextIdSeq CORBA_OperationDef__get_contexts( CORBA_OperationDef or, 
  yoenv* ev)
{
  CORBA_ContextIdSeq _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_OperationDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_OperationDef__tyimpl*) yoLocalObj( (CORBA_Object)or,
     (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)5, (dvoid *)_impl, CORBA_OperationDef__id);
        
      _result = (*(CORBA_ContextIdSeq (*)( CORBA_OperationDef, yoenv*))_f)(
        or, ev);
    }
    else
      _result = (*_impl->_get_contexts)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_contexts", TRUE, _sem, (sword)0, 
          CORBA_OperationDef__get_contexts_pars, (dvoid **)0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}


static CONST_DATA yotk CORBA_OperationDescription__tc[] = 
  {0x00,0x00,0x00,0x0f,0x00,0x00,0x06,0xec,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,'#','I','D','L',':','C','O','R','B','A','/',
  'O','p','e','r','a','t','i','o','n','D','e','s','c','r','i',
  'p','t','i','o','n',':','1','.','0',0x00,0x00,0x00,0x00,0x00
  ,0x1e,':',':','C','O','R','B','A',':',':','O','p','e','r','a'
  ,'t','i','o','n','D','e','s','c','r','i','p','t','i','o','n'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x05,'n',
  'a','m','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00
  ,0x00,'D',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,'I','D','L'
  ,':','C','O','R','B','A','/','I','d','e','n','t','i','f','i'
  ,'e','r',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x14,':',':','C','O','R','B','A',':',':','I','d','e','n','t'
  ,'i','f','i','e','r',0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x03,'i','d',0x00,0x00,0x00,0x00,0x00,0x15
  ,0x00,0x00,0x00,'H',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1b,
  'I','D','L',':','C','O','R','B','A','/','R','e','p','o','s',
  'i','t','o','r','y','I','d',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x00,0x16,':',':','C','O','R','B','A',':',':','R','e','p','o'
  ,'s','i','t','o','r','y','I','d',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,'d','e','f','i'
  ,'n','e','d','_','i','n',0x00,0x00,0x00,0x00,0x00,0x0e,0x00,
  0x00,0x00,'7',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,'I','D'
  ,'L',':','C','O','R','B','A','/','C','o','n','t','a','i','n'
  ,'e','r',':','1','.','0',0x00,0x00,0x00,0x00,0x13,':',':','C'
  ,'O','R','B','A',':',':','C','o','n','t','a','i','n','e','r'
  ,0x00,0x00,0x00,0x00,0x00,0x08,'v','e','r','s','i','o','n',0x00
  ,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'H',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1a,'I','D','L',':','C','O','R','B','A','/',
  'V','e','r','s','i','o','n','S','p','e','c',':','1','.','0',
  0x00,0x00,0x00,0x00,0x00,0x00,0x15,':',':','C','O','R','B','A'
  ,':',':','V','e','r','s','i','o','n','S','p','e','c',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x07,'r','e','s','u','l','t',0x00,0x00,0x00,0x00,0x00,
  0x0c,0x00,0x00,0x00,0x05,'m','o','d','e',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x11,0x00,0x00,0x00,'b',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1c,'I','D','L',':','C','O','R','B','A','/',
  'O','p','e','r','a','t','i','o','n','M','o','d','e',':','1',
  '.','0',0x00,0x00,0x00,0x00,0x17,':',':','C','O','R','B','A'
  ,':',':','O','p','e','r','a','t','i','o','n','M','o','d','e'
  ,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x0a,'O','P','_'
  ,'N','O','R','M','A','L',0x00,0x00,0x00,0x00,0x00,0x00,0x0a,
  'O','P','_','O','N','E','W','A','Y',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x09,'c','o','n','t','e','x','t','s',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'X',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1b,'I','D','L',':','C','O','R','B','A','/',
  'C','o','n','t','e','x','t','I','d','S','e','q',':','1','.',
  '0',0x00,0x00,0x00,0x00,0x00,0x16,':',':','C','O','R','B','A'
  ,':',':','C','o','n','t','e','x','t','I','d','S','e','q',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x13,0x00,0x00,0x00,0x10,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x0b,'p','a','r','a','m','e','t','e'
  ,'r','s',0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x01,0xf4,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x20,'I','D','L',':','C','O',
  'R','B','A','/','P','a','r','D','e','s','c','r','i','p','t',
  'i','o','n','S','e','q',':','1','.','0',0x00,0x00,0x00,0x00,
  0x1b,':',':','C','O','R','B','A',':',':','P','a','r','D','e'
  ,'s','c','r','i','p','t','i','o','n','S','e','q',0x00,0x00,0x00
  ,0x00,0x00,0x13,0x00,0x00,0x01,0xa4,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x0f,0x00,0x00,0x01,0x94,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,'#','I','D','L',':','C','O','R','B','A','/','P','a'
  ,'r','a','m','e','t','e','r','D','e','s','c','r','i','p','t'
  ,'i','o','n',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x1e,':'
  ,':','C','O','R','B','A',':',':','P','a','r','a','m','e','t'
  ,'e','r','D','e','s','c','r','i','p','t','i','o','n',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x05,'n','a','m','e'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'D',
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,'I','D','L',':','C',
  'O','R','B','A','/','I','d','e','n','t','i','f','i','e','r',
  ':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,':',
  ':','C','O','R','B','A',':',':','I','d','e','n','t','i','f',
  'i','e','r',0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x05,'t','y','p','e',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0c,0x00,0x00,0x00,0x09,'t','y','p','e','_','d','e','f'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'5',
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x16,'I','D','L',':','C',
  'O','R','B','A','/','I','D','L','T','y','p','e',':','1','.',
  '0',0x00,0x00,0x00,0x00,0x00,0x00,0x11,':',':','C','O','R','B'
  ,'A',':',':','I','D','L','T','y','p','e',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x05,'m','o','d','e',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x11,0x00,0x00,0x00,'t',0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x1c,'I','D','L',':','C','O','R','B','A','/','P','a'
  ,'r','a','m','e','t','e','r','M','o','d','e',':','1','.','0'
  ,0x00,0x00,0x00,0x00,0x17,':',':','C','O','R','B','A',':',':'
  ,'P','a','r','a','m','e','t','e','r','M','o','d','e',0x00,0x00
  ,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x09,'P','A','R','A','M'
  ,'_','I','N',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,'P','A'
  ,'R','A','M','_','O','U','T',0x00,0x00,0x00,0x00,0x00,0x00,0x0c
  ,'P','A','R','A','M','_','I','N','O','U','T',0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x0b,'e','x','c','e','p','t','i','o'
  ,'n','s',0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x02,0x20,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x20,'I','D','L',':','C','O',
  'R','B','A','/','E','x','c','D','e','s','c','r','i','p','t',
  'i','o','n','S','e','q',':','1','.','0',0x00,0x00,0x00,0x00,
  0x1b,':',':','C','O','R','B','A',':',':','E','x','c','D','e'
  ,'s','c','r','i','p','t','i','o','n','S','e','q',0x00,0x00,0x00
  ,0x00,0x00,0x13,0x00,0x00,0x01,0xd0,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x0f,0x00,0x00,0x01,0xc0,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,'#','I','D','L',':','C','O','R','B','A','/','E','x'
  ,'c','e','p','t','i','o','n','D','e','s','c','r','i','p','t'
  ,'i','o','n',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x1e,':'
  ,':','C','O','R','B','A',':',':','E','x','c','e','p','t','i'
  ,'o','n','D','e','s','c','r','i','p','t','i','o','n',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x05,'n','a','m','e'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'D',
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,'I','D','L',':','C',
  'O','R','B','A','/','I','d','e','n','t','i','f','i','e','r',
  ':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,':',
  ':','C','O','R','B','A',':',':','I','d','e','n','t','i','f',
  'i','e','r',0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x03,'i','d',0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00
  ,0x00,'H',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1b,'I','D','L'
  ,':','C','O','R','B','A','/','R','e','p','o','s','i','t','o'
  ,'r','y','I','d',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x16
  ,':',':','C','O','R','B','A',':',':','R','e','p','o','s','i'
  ,'t','o','r','y','I','d',0x00,0x00,0x00,0x00,0x00,0x00,0x12,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,'d','e','f','i','n',
  'e','d','_','i','n',0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,
  0x00,'7',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,'I','D','L'
  ,':','C','O','R','B','A','/','C','o','n','t','a','i','n','e'
  ,'r',':','1','.','0',0x00,0x00,0x00,0x00,0x13,':',':','C','O'
  ,'R','B','A',':',':','C','o','n','t','a','i','n','e','r',0x00
  ,0x00,0x00,0x00,0x00,0x08,'v','e','r','s','i','o','n',0x00,0x00
  ,0x00,0x00,0x15,0x00,0x00,0x00,'H',0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x1a,'I','D','L',':','C','O','R','B','A','/','V','e'
  ,'r','s','i','o','n','S','p','e','c',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x15,':',':','C','O','R','B','A',':',':'
  ,'V','e','r','s','i','o','n','S','p','e','c',0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x05,'t','y','p','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c
  ,0x00,0x00,0x00,0x00};

yotk* CORBA_OperationDescription__getTC(void)
{
  return (yotk*)CORBA_OperationDescription__tc;
}

void CORBA_OperationDescription__free( CORBA_OperationDescription* val, 
  ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_OperationDescription, (dvoid *)val, ffunc);
}

void CORBA_OperationDescription__copy( CORBA_OperationDescription* dest, 
  CORBA_OperationDescription* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_OperationDescription, (dvoid *)dest, (dvoid *)src,
     afunc);
}

static CONST_DATA yotk CORBA_OpDescriptionSeq__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x07,'L',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1f,'I','D','L',':','C','O','R','B','A','/',
  'O','p','D','e','s','c','r','i','p','t','i','o','n','S','e',
  'q',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x1a,':',':','C'
  ,'O','R','B','A',':',':','O','p','D','e','s','c','r','i','p'
  ,'t','i','o','n','S','e','q',0x00,0x00,0x00,0x00,0x00,0x00,0x13
  ,0x00,0x00,0x06,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
  ,0x00,0x00,0x06,0xec,0x00,0x00,0x00,0x00,0x00,0x00,0x00,'#',
  'I','D','L',':','C','O','R','B','A','/','O','p','e','r','a',
  't','i','o','n','D','e','s','c','r','i','p','t','i','o','n',
  ':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x1e,':',':','C','O'
  ,'R','B','A',':',':','O','p','e','r','a','t','i','o','n','D'
  ,'e','s','c','r','i','p','t','i','o','n',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x09,0x00,0x00,0x00,0x05,'n','a','m','e',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'D',0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x19,'I','D','L',':','C','O','R','B'
  ,'A','/','I','d','e','n','t','i','f','i','e','r',':','1','.'
  ,'0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,':',':','C','O'
  ,'R','B','A',':',':','I','d','e','n','t','i','f','i','e','r'
  ,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x03,'i','d',0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'H'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1b,'I','D','L',':','C'
  ,'O','R','B','A','/','R','e','p','o','s','i','t','o','r','y'
  ,'I','d',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x16,':',':'
  ,'C','O','R','B','A',':',':','R','e','p','o','s','i','t','o'
  ,'r','y','I','d',0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x0b,'d','e','f','i','n','e','d','_'
  ,'i','n',0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'7',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x18,'I','D','L',':','C','O',
  'R','B','A','/','C','o','n','t','a','i','n','e','r',':','1',
  '.','0',0x00,0x00,0x00,0x00,0x13,':',':','C','O','R','B','A'
  ,':',':','C','o','n','t','a','i','n','e','r',0x00,0x00,0x00,
  0x00,0x00,0x08,'v','e','r','s','i','o','n',0x00,0x00,0x00,0x00
  ,0x15,0x00,0x00,0x00,'H',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x1a,'I','D','L',':','C','O','R','B','A','/','V','e','r','s'
  ,'i','o','n','S','p','e','c',':','1','.','0',0x00,0x00,0x00,
  0x00,0x00,0x00,0x15,':',':','C','O','R','B','A',':',':','V',
  'e','r','s','i','o','n','S','p','e','c',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
  'r','e','s','u','l','t',0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00
  ,0x00,0x05,'m','o','d','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x11,0x00,0x00,0x00,'b',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x1c,'I','D','L',':','C','O','R','B','A','/','O','p','e','r'
  ,'a','t','i','o','n','M','o','d','e',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x17,':',':','C','O','R','B','A',':',':','O','p',
  'e','r','a','t','i','o','n','M','o','d','e',0x00,0x00,0x00,0x00
  ,0x00,0x02,0x00,0x00,0x00,0x0a,'O','P','_','N','O','R','M','A'
  ,'L',0x00,0x00,0x00,0x00,0x00,0x00,0x0a,'O','P','_','O','N',
  'E','W','A','Y',0x00,0x00,0x00,0x00,0x00,0x00,0x09,'c','o','n'
  ,'t','e','x','t','s',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15
  ,0x00,0x00,0x00,'X',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1b,
  'I','D','L',':','C','O','R','B','A','/','C','o','n','t','e',
  'x','t','I','d','S','e','q',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x00,0x16,':',':','C','O','R','B','A',':',':','C','o','n','t'
  ,'e','x','t','I','d','S','e','q',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x13,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x0b,'p','a','r','a','m','e','t','e','r','s',0x00,0x00,0x00
  ,0x00,0x00,0x15,0x00,0x00,0x01,0xf4,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x20,'I','D','L',':','C','O','R','B','A','/','P',
  'a','r','D','e','s','c','r','i','p','t','i','o','n','S','e',
  'q',':','1','.','0',0x00,0x00,0x00,0x00,0x1b,':',':','C','O'
  ,'R','B','A',':',':','P','a','r','D','e','s','c','r','i','p'
  ,'t','i','o','n','S','e','q',0x00,0x00,0x00,0x00,0x00,0x13,0x00
  ,0x00,0x01,0xa4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00
  ,0x00,0x01,0x94,0x00,0x00,0x00,0x00,0x00,0x00,0x00,'#','I','D'
  ,'L',':','C','O','R','B','A','/','P','a','r','a','m','e','t'
  ,'e','r','D','e','s','c','r','i','p','t','i','o','n',':','1'
  ,'.','0',0x00,0x00,0x00,0x00,0x00,0x1e,':',':','C','O','R','B'
  ,'A',':',':','P','a','r','a','m','e','t','e','r','D','e','s'
  ,'c','r','i','p','t','i','o','n',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x04,0x00,0x00,0x00,0x05,'n','a','m','e',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'D',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x19,'I','D','L',':','C','O','R','B','A','/',
  'I','d','e','n','t','i','f','i','e','r',':','1','.','0',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x14,':',':','C','O','R','B',
  'A',':',':','I','d','e','n','t','i','f','i','e','r',0x00,0x00
  ,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,'t',
  'y','p','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00
  ,0x00,0x09,'t','y','p','e','_','d','e','f',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'5',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x16,'I','D','L',':','C','O','R','B','A','/',
  'I','D','L','T','y','p','e',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x11,':',':','C','O','R','B','A',':',':','I','D',
  'L','T','y','p','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,
  'm','o','d','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x00
  ,0x00,0x00,'t',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,'I','D'
  ,'L',':','C','O','R','B','A','/','P','a','r','a','m','e','t'
  ,'e','r','M','o','d','e',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x17,':',':','C','O','R','B','A',':',':','P','a','r','a','m'
  ,'e','t','e','r','M','o','d','e',0x00,0x00,0x00,0x00,0x00,0x03
  ,0x00,0x00,0x00,0x09,'P','A','R','A','M','_','I','N',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x0a,'P','A','R','A','M','_','O','U'
  ,'T',0x00,0x00,0x00,0x00,0x00,0x00,0x0c,'P','A','R','A','M',
  '_','I','N','O','U','T',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x0b,'e','x','c','e','p','t','i','o','n','s',0x00,0x00,0x00
  ,0x00,0x00,0x15,0x00,0x00,0x02,0x20,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x20,'I','D','L',':','C','O','R','B','A','/','E',
  'x','c','D','e','s','c','r','i','p','t','i','o','n','S','e',
  'q',':','1','.','0',0x00,0x00,0x00,0x00,0x1b,':',':','C','O'
  ,'R','B','A',':',':','E','x','c','D','e','s','c','r','i','p'
  ,'t','i','o','n','S','e','q',0x00,0x00,0x00,0x00,0x00,0x13,0x00
  ,0x00,0x01,0xd0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00
  ,0x00,0x01,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,'#','I','D'
  ,'L',':','C','O','R','B','A','/','E','x','c','e','p','t','i'
  ,'o','n','D','e','s','c','r','i','p','t','i','o','n',':','1'
  ,'.','0',0x00,0x00,0x00,0x00,0x00,0x1e,':',':','C','O','R','B'
  ,'A',':',':','E','x','c','e','p','t','i','o','n','D','e','s'
  ,'c','r','i','p','t','i','o','n',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x05,0x00,0x00,0x00,0x05,'n','a','m','e',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'D',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x19,'I','D','L',':','C','O','R','B','A','/',
  'I','d','e','n','t','i','f','i','e','r',':','1','.','0',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x14,':',':','C','O','R','B',
  'A',':',':','I','d','e','n','t','i','f','i','e','r',0x00,0x00
  ,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,'i',
  'd',0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'H',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x1b,'I','D','L',':','C','O','R','B'
  ,'A','/','R','e','p','o','s','i','t','o','r','y','I','d',':'
  ,'1','.','0',0x00,0x00,0x00,0x00,0x00,0x16,':',':','C','O','R'
  ,'B','A',':',':','R','e','p','o','s','i','t','o','r','y','I'
  ,'d',0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x0b,'d','e','f','i','n','e','d','_','i','n',
  0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'7',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x18,'I','D','L',':','C','O','R','B','A'
  ,'/','C','o','n','t','a','i','n','e','r',':','1','.','0',0x00
  ,0x00,0x00,0x00,0x13,':',':','C','O','R','B','A',':',':','C'
  ,'o','n','t','a','i','n','e','r',0x00,0x00,0x00,0x00,0x00,0x08
  ,'v','e','r','s','i','o','n',0x00,0x00,0x00,0x00,0x15,0x00,0x00
  ,0x00,'H',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1a,'I','D','L'
  ,':','C','O','R','B','A','/','V','e','r','s','i','o','n','S'
  ,'p','e','c',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x15
  ,':',':','C','O','R','B','A',':',':','V','e','r','s','i','o'
  ,'n','S','p','e','c',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,'t','y','p','e',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00};

yotk* CORBA_OpDescriptionSeq__getTC(void)
{
  return (yotk*)CORBA_OpDescriptionSeq__tc;
}

void CORBA_OpDescriptionSeq__free( CORBA_OpDescriptionSeq* val, ysmff ffunc)
  
{
  yotkFreeVal( YCTC_CORBA_OpDescriptionSeq, (dvoid *)val, ffunc);
}

void CORBA_OpDescriptionSeq__copy( CORBA_OpDescriptionSeq* dest, 
  CORBA_OpDescriptionSeq* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_OpDescriptionSeq, (dvoid *)dest, (dvoid *)src, 
    afunc);
}

static CONST_DATA yotk CORBA_AttrDescriptionSeq__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x02,0xa0,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,'!','I','D','L',':','C','O','R','B','A','/',
  'A','t','t','r','D','e','s','c','r','i','p','t','i','o','n',
  'S','e','q',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x1c,':',':','C','O','R','B','A',':',':','A','t','t','r','D'
  ,'e','s','c','r','i','p','t','i','o','n','S','e','q',0x00,0x00
  ,0x00,0x00,0x13,0x00,0x00,0x02,'L',0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x0f,0x00,0x00,0x02,':',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,'#','I','D','L',':','C','O','R','B','A','/','A','t','t'
  ,'r','i','b','u','t','e','D','e','s','c','r','i','p','t','i'
  ,'o','n',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x1e,':',':'
  ,'C','O','R','B','A',':',':','A','t','t','r','i','b','u','t'
  ,'e','D','e','s','c','r','i','p','t','i','o','n',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x05,'n','a','m','e',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'D',0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x19,'I','D','L',':','C','O','R'
  ,'B','A','/','I','d','e','n','t','i','f','i','e','r',':','1'
  ,'.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,':',':','C'
  ,'O','R','B','A',':',':','I','d','e','n','t','i','f','i','e'
  ,'r',0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x03,'i','d',0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00
  ,'H',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1b,'I','D','L',':'
  ,'C','O','R','B','A','/','R','e','p','o','s','i','t','o','r'
  ,'y','I','d',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x16,':'
  ,':','C','O','R','B','A',':',':','R','e','p','o','s','i','t'
  ,'o','r','y','I','d',0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,'d','e','f','i','n','e',
  'd','_','i','n',0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00
  ,'7',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,'I','D','L',':'
  ,'C','O','R','B','A','/','C','o','n','t','a','i','n','e','r'
  ,':','1','.','0',0x00,0x00,0x00,0x00,0x13,':',':','C','O','R'
  ,'B','A',':',':','C','o','n','t','a','i','n','e','r',0x00,0x00
  ,0x00,0x00,0x00,0x08,'v','e','r','s','i','o','n',0x00,0x00,0x00
  ,0x00,0x15,0x00,0x00,0x00,'H',0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x1a,'I','D','L',':','C','O','R','B','A','/','V','e','r'
  ,'s','i','o','n','S','p','e','c',':','1','.','0',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x15,':',':','C','O','R','B','A',':',':','V'
  ,'e','r','s','i','o','n','S','p','e','c',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05
  ,'t','y','p','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x00
  ,0x00,0x00,0x05,'m','o','d','e',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x11,0x00,0x00,0x00,'f',0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x1c,'I','D','L',':','C','O','R','B','A','/','A','t','t'
  ,'r','i','b','u','t','e','M','o','d','e',':','1','.','0',0x00
  ,0x00,0x00,0x00,0x17,':',':','C','O','R','B','A',':',':','A'
  ,'t','t','r','i','b','u','t','e','M','o','d','e',0x00,0x00,0x00
  ,0x00,0x00,0x02,0x00,0x00,0x00,0x0c,'A','T','T','R','_','N',
  'O','R','M','A','L',0x00,0x00,0x00,0x00,0x0e,'A','T','T','R'
  ,'_','R','E','A','D','O','N','L','Y',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00};

yotk* CORBA_AttrDescriptionSeq__getTC(void)
{
  return (yotk*)CORBA_AttrDescriptionSeq__tc;
}

void CORBA_AttrDescriptionSeq__free( CORBA_AttrDescriptionSeq* val, ysmff 
  ffunc)
{
  yotkFreeVal( YCTC_CORBA_AttrDescriptionSeq, (dvoid *)val, ffunc);
}

void CORBA_AttrDescriptionSeq__copy( CORBA_AttrDescriptionSeq* dest, 
  CORBA_AttrDescriptionSeq* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_AttrDescriptionSeq, (dvoid *)dest, (dvoid *)src, 
    afunc);
}


static ysidDecl(CORBA_InterfaceDef___id) = "IDL:CORBA/InterfaceDef:1.0";

CONST ysid* CORBA_InterfaceDef__getId(void)
{
  return (CONST ysid*)CORBA_InterfaceDef___id;
}

static CONST_DATA yotk CORBA_InterfaceDef__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'>',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1b,'I','D','L',':','C','O','R','B','A','/',
  'I','n','t','e','r','f','a','c','e','D','e','f',':','1','.',
  '0',0x00,0x00,0x00,0x00,0x00,0x16,':',':','C','O','R','B','A'
  ,':',':','I','n','t','e','r','f','a','c','e','D','e','f',0x00
  };

yotk* CORBA_InterfaceDef__getTC(void)
{
  return (yotk*)CORBA_InterfaceDef__tc;
}


void CORBA_InterfaceDef__free( CORBA_InterfaceDef* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_InterfaceDef, (dvoid *)val, ffunc);
}

void CORBA_InterfaceDef__copy( CORBA_InterfaceDef* dest, 
  CORBA_InterfaceDef* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_InterfaceDef, (dvoid *)dest, (dvoid *)src, afunc);
    
}

static CONST_DATA yotk CORBA_InterfaceDef_FullInterfaceDescription__tc[] = 
  {0x00,0x00,0x00,0x0f,0x00,0x00,0x0c,'x',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,'4','I','D','L',':','C','O','R','B','A','/','I'
  ,'n','t','e','r','f','a','c','e','D','e','f','/','F','u','l'
  ,'l','I','n','t','e','r','f','a','c','e','D','e','s','c','r'
  ,'i','p','t','i','o','n',':','1','.','0',0x00,0x00,0x00,0x00
  ,'0',':',':','C','O','R','B','A',':',':','I','n','t','e','r'
  ,'f','a','c','e','D','e','f',':',':','F','u','l','l','I','n'
  ,'t','e','r','f','a','c','e','D','e','s','c','r','i','p','t'
  ,'i','o','n',0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x05,'n'
  ,'a','m','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00
  ,0x00,'D',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,'I','D','L'
  ,':','C','O','R','B','A','/','I','d','e','n','t','i','f','i'
  ,'e','r',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x14,':',':','C','O','R','B','A',':',':','I','d','e','n','t'
  ,'i','f','i','e','r',0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x03,'i','d',0x00,0x00,0x00,0x00,0x00,0x15
  ,0x00,0x00,0x00,'H',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1b,
  'I','D','L',':','C','O','R','B','A','/','R','e','p','o','s',
  'i','t','o','r','y','I','d',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x00,0x16,':',':','C','O','R','B','A',':',':','R','e','p','o'
  ,'s','i','t','o','r','y','I','d',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,'d','e','f','i'
  ,'n','e','d','_','i','n',0x00,0x00,0x00,0x00,0x00,0x0e,0x00,
  0x00,0x00,'7',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,'I','D'
  ,'L',':','C','O','R','B','A','/','C','o','n','t','a','i','n'
  ,'e','r',':','1','.','0',0x00,0x00,0x00,0x00,0x13,':',':','C'
  ,'O','R','B','A',':',':','C','o','n','t','a','i','n','e','r'
  ,0x00,0x00,0x00,0x00,0x00,0x08,'v','e','r','s','i','o','n',0x00
  ,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'H',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1a,'I','D','L',':','C','O','R','B','A','/',
  'V','e','r','s','i','o','n','S','p','e','c',':','1','.','0',
  0x00,0x00,0x00,0x00,0x00,0x00,0x15,':',':','C','O','R','B','A'
  ,':',':','V','e','r','s','i','o','n','S','p','e','c',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0b,'o','p','e','r','a','t','i','o','n','s',0x00,0x00
  ,0x00,0x00,0x00,0x15,0x00,0x00,0x07,'L',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1f,'I','D','L',':','C','O','R','B','A','/',
  'O','p','D','e','s','c','r','i','p','t','i','o','n','S','e',
  'q',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x1a,':',':','C'
  ,'O','R','B','A',':',':','O','p','D','e','s','c','r','i','p'
  ,'t','i','o','n','S','e','q',0x00,0x00,0x00,0x00,0x00,0x00,0x13
  ,0x00,0x00,0x06,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
  ,0x00,0x00,0x06,0xec,0x00,0x00,0x00,0x00,0x00,0x00,0x00,'#',
  'I','D','L',':','C','O','R','B','A','/','O','p','e','r','a',
  't','i','o','n','D','e','s','c','r','i','p','t','i','o','n',
  ':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x1e,':',':','C','O'
  ,'R','B','A',':',':','O','p','e','r','a','t','i','o','n','D'
  ,'e','s','c','r','i','p','t','i','o','n',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x09,0x00,0x00,0x00,0x05,'n','a','m','e',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'D',0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x19,'I','D','L',':','C','O','R','B'
  ,'A','/','I','d','e','n','t','i','f','i','e','r',':','1','.'
  ,'0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,':',':','C','O'
  ,'R','B','A',':',':','I','d','e','n','t','i','f','i','e','r'
  ,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x03,'i','d',0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'H'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1b,'I','D','L',':','C'
  ,'O','R','B','A','/','R','e','p','o','s','i','t','o','r','y'
  ,'I','d',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x16,':',':'
  ,'C','O','R','B','A',':',':','R','e','p','o','s','i','t','o'
  ,'r','y','I','d',0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x0b,'d','e','f','i','n','e','d','_'
  ,'i','n',0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'7',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x18,'I','D','L',':','C','O',
  'R','B','A','/','C','o','n','t','a','i','n','e','r',':','1',
  '.','0',0x00,0x00,0x00,0x00,0x13,':',':','C','O','R','B','A'
  ,':',':','C','o','n','t','a','i','n','e','r',0x00,0x00,0x00,
  0x00,0x00,0x08,'v','e','r','s','i','o','n',0x00,0x00,0x00,0x00
  ,0x15,0x00,0x00,0x00,'H',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x1a,'I','D','L',':','C','O','R','B','A','/','V','e','r','s'
  ,'i','o','n','S','p','e','c',':','1','.','0',0x00,0x00,0x00,
  0x00,0x00,0x00,0x15,':',':','C','O','R','B','A',':',':','V',
  'e','r','s','i','o','n','S','p','e','c',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
  'r','e','s','u','l','t',0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00
  ,0x00,0x05,'m','o','d','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x11,0x00,0x00,0x00,'b',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x1c,'I','D','L',':','C','O','R','B','A','/','O','p','e','r'
  ,'a','t','i','o','n','M','o','d','e',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x17,':',':','C','O','R','B','A',':',':','O','p',
  'e','r','a','t','i','o','n','M','o','d','e',0x00,0x00,0x00,0x00
  ,0x00,0x02,0x00,0x00,0x00,0x0a,'O','P','_','N','O','R','M','A'
  ,'L',0x00,0x00,0x00,0x00,0x00,0x00,0x0a,'O','P','_','O','N',
  'E','W','A','Y',0x00,0x00,0x00,0x00,0x00,0x00,0x09,'c','o','n'
  ,'t','e','x','t','s',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15
  ,0x00,0x00,0x00,'X',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1b,
  'I','D','L',':','C','O','R','B','A','/','C','o','n','t','e',
  'x','t','I','d','S','e','q',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x00,0x16,':',':','C','O','R','B','A',':',':','C','o','n','t'
  ,'e','x','t','I','d','S','e','q',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x13,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x0b,'p','a','r','a','m','e','t','e','r','s',0x00,0x00,0x00
  ,0x00,0x00,0x15,0x00,0x00,0x01,0xf4,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x20,'I','D','L',':','C','O','R','B','A','/','P',
  'a','r','D','e','s','c','r','i','p','t','i','o','n','S','e',
  'q',':','1','.','0',0x00,0x00,0x00,0x00,0x1b,':',':','C','O'
  ,'R','B','A',':',':','P','a','r','D','e','s','c','r','i','p'
  ,'t','i','o','n','S','e','q',0x00,0x00,0x00,0x00,0x00,0x13,0x00
  ,0x00,0x01,0xa4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00
  ,0x00,0x01,0x94,0x00,0x00,0x00,0x00,0x00,0x00,0x00,'#','I','D'
  ,'L',':','C','O','R','B','A','/','P','a','r','a','m','e','t'
  ,'e','r','D','e','s','c','r','i','p','t','i','o','n',':','1'
  ,'.','0',0x00,0x00,0x00,0x00,0x00,0x1e,':',':','C','O','R','B'
  ,'A',':',':','P','a','r','a','m','e','t','e','r','D','e','s'
  ,'c','r','i','p','t','i','o','n',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x04,0x00,0x00,0x00,0x05,'n','a','m','e',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'D',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x19,'I','D','L',':','C','O','R','B','A','/',
  'I','d','e','n','t','i','f','i','e','r',':','1','.','0',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x14,':',':','C','O','R','B',
  'A',':',':','I','d','e','n','t','i','f','i','e','r',0x00,0x00
  ,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,'t',
  'y','p','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00
  ,0x00,0x09,'t','y','p','e','_','d','e','f',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'5',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x16,'I','D','L',':','C','O','R','B','A','/',
  'I','D','L','T','y','p','e',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x11,':',':','C','O','R','B','A',':',':','I','D',
  'L','T','y','p','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,
  'm','o','d','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x00
  ,0x00,0x00,'t',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,'I','D'
  ,'L',':','C','O','R','B','A','/','P','a','r','a','m','e','t'
  ,'e','r','M','o','d','e',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x17,':',':','C','O','R','B','A',':',':','P','a','r','a','m'
  ,'e','t','e','r','M','o','d','e',0x00,0x00,0x00,0x00,0x00,0x03
  ,0x00,0x00,0x00,0x09,'P','A','R','A','M','_','I','N',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x0a,'P','A','R','A','M','_','O','U'
  ,'T',0x00,0x00,0x00,0x00,0x00,0x00,0x0c,'P','A','R','A','M',
  '_','I','N','O','U','T',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x0b,'e','x','c','e','p','t','i','o','n','s',0x00,0x00,0x00
  ,0x00,0x00,0x15,0x00,0x00,0x02,0x20,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x20,'I','D','L',':','C','O','R','B','A','/','E',
  'x','c','D','e','s','c','r','i','p','t','i','o','n','S','e',
  'q',':','1','.','0',0x00,0x00,0x00,0x00,0x1b,':',':','C','O'
  ,'R','B','A',':',':','E','x','c','D','e','s','c','r','i','p'
  ,'t','i','o','n','S','e','q',0x00,0x00,0x00,0x00,0x00,0x13,0x00
  ,0x00,0x01,0xd0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00
  ,0x00,0x01,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,'#','I','D'
  ,'L',':','C','O','R','B','A','/','E','x','c','e','p','t','i'
  ,'o','n','D','e','s','c','r','i','p','t','i','o','n',':','1'
  ,'.','0',0x00,0x00,0x00,0x00,0x00,0x1e,':',':','C','O','R','B'
  ,'A',':',':','E','x','c','e','p','t','i','o','n','D','e','s'
  ,'c','r','i','p','t','i','o','n',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x05,0x00,0x00,0x00,0x05,'n','a','m','e',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'D',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x19,'I','D','L',':','C','O','R','B','A','/',
  'I','d','e','n','t','i','f','i','e','r',':','1','.','0',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x14,':',':','C','O','R','B',
  'A',':',':','I','d','e','n','t','i','f','i','e','r',0x00,0x00
  ,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,'i',
  'd',0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'H',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x1b,'I','D','L',':','C','O','R','B'
  ,'A','/','R','e','p','o','s','i','t','o','r','y','I','d',':'
  ,'1','.','0',0x00,0x00,0x00,0x00,0x00,0x16,':',':','C','O','R'
  ,'B','A',':',':','R','e','p','o','s','i','t','o','r','y','I'
  ,'d',0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x0b,'d','e','f','i','n','e','d','_','i','n',
  0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'7',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x18,'I','D','L',':','C','O','R','B','A'
  ,'/','C','o','n','t','a','i','n','e','r',':','1','.','0',0x00
  ,0x00,0x00,0x00,0x13,':',':','C','O','R','B','A',':',':','C'
  ,'o','n','t','a','i','n','e','r',0x00,0x00,0x00,0x00,0x00,0x08
  ,'v','e','r','s','i','o','n',0x00,0x00,0x00,0x00,0x15,0x00,0x00
  ,0x00,'H',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1a,'I','D','L'
  ,':','C','O','R','B','A','/','V','e','r','s','i','o','n','S'
  ,'p','e','c',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x15
  ,':',':','C','O','R','B','A',':',':','V','e','r','s','i','o'
  ,'n','S','p','e','c',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,'t','y','p','e',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,'a','t','t','r','i','b',
  'u','t','e','s',0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x02
  ,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,'!','I','D','L',':'
  ,'C','O','R','B','A','/','A','t','t','r','D','e','s','c','r'
  ,'i','p','t','i','o','n','S','e','q',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x1c,':',':','C','O','R','B','A',':'
  ,':','A','t','t','r','D','e','s','c','r','i','p','t','i','o'
  ,'n','S','e','q',0x00,0x00,0x00,0x00,0x13,0x00,0x00,0x02,'L'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x02,':',
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,'#','I','D','L',':','C','O'
  ,'R','B','A','/','A','t','t','r','i','b','u','t','e','D','e'
  ,'s','c','r','i','p','t','i','o','n',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x00,0x1e,':',':','C','O','R','B','A',':',':','A'
  ,'t','t','r','i','b','u','t','e','D','e','s','c','r','i','p'
  ,'t','i','o','n',0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00
  ,0x00,0x05,'n','a','m','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x15,0x00,0x00,0x00,'D',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x19,'I','D','L',':','C','O','R','B','A','/','I','d','e','n'
  ,'t','i','f','i','e','r',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x14,':',':','C','O','R','B','A',':',':','I'
  ,'d','e','n','t','i','f','i','e','r',0x00,0x00,0x00,0x00,0x12
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,'i','d',0x00,0x00,0x00
  ,0x00,0x00,0x15,0x00,0x00,0x00,'H',0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x1b,'I','D','L',':','C','O','R','B','A','/','R','e'
  ,'p','o','s','i','t','o','r','y','I','d',':','1','.','0',0x00
  ,0x00,0x00,0x00,0x00,0x16,':',':','C','O','R','B','A',':',':'
  ,'R','e','p','o','s','i','t','o','r','y','I','d',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b
  ,'d','e','f','i','n','e','d','_','i','n',0x00,0x00,0x00,0x00
  ,0x00,0x0e,0x00,0x00,0x00,'7',0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x18,'I','D','L',':','C','O','R','B','A','/','C','o','n'
  ,'t','a','i','n','e','r',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x13,':',':','C','O','R','B','A',':',':','C','o','n','t','a'
  ,'i','n','e','r',0x00,0x00,0x00,0x00,0x00,0x08,'v','e','r','s'
  ,'i','o','n',0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'H',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x1a,'I','D','L',':','C','O',
  'R','B','A','/','V','e','r','s','i','o','n','S','p','e','c',
  ':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x15,':',':','C'
  ,'O','R','B','A',':',':','V','e','r','s','i','o','n','S','p'
  ,'e','c',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x05,'t','y','p','e',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x05,'m','o','d','e',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,'f',0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x1c,'I','D','L',':','C','O','R'
  ,'B','A','/','A','t','t','r','i','b','u','t','e','M','o','d'
  ,'e',':','1','.','0',0x00,0x00,0x00,0x00,0x17,':',':','C','O'
  ,'R','B','A',':',':','A','t','t','r','i','b','u','t','e','M'
  ,'o','d','e',0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x0c
  ,'A','T','T','R','_','N','O','R','M','A','L',0x00,0x00,0x00,
  0x00,0x0e,'A','T','T','R','_','R','E','A','D','O','N','L','Y'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,'b',
  'a','s','e','_','i','n','t','e','r','f','a','c','e','s',0x00
  ,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'`',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1e,'I','D','L',':','C','O','R','B','A','/',
  'R','e','p','o','s','i','t','o','r','y','I','d','S','e','q',
  ':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x19,':',':','C'
  ,'O','R','B','A',':',':','R','e','p','o','s','i','t','o','r'
  ,'y','I','d','S','e','q',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x13,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x05,'t','y','p','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c
  };

yotk* CORBA_InterfaceDef_FullInterfaceDescription__getTC(void)
{
  return (yotk*)CORBA_InterfaceDef_FullInterfaceDescription__tc;
}

void CORBA_InterfaceDef_FullInterfaceDescription__free( 
  CORBA_InterfaceDef_FullInterfaceDescription* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_InterfaceDef_FullInterfaceDescription, (dvoid *)
    val, ffunc);
}

void CORBA_InterfaceDef_FullInterfaceDescription__copy( 
  CORBA_InterfaceDef_FullInterfaceDescription* dest, 
  CORBA_InterfaceDef_FullInterfaceDescription* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_InterfaceDef_FullInterfaceDescription, (dvoid *)
    dest, (dvoid *)src, afunc);
}


yopar* CORBA_InterfaceDef_is_a__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_InterfaceDef_is_a");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_InterfaceDef_is_a", (ub4)2);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)yoTcBoolean;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_CORBA_RepositoryId;
    _pars[2].mode = YOMODE_INVALID;
    _pars[2].tk = (yotk*)yoTcNull;
    _pars[2].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

boolean CORBA_InterfaceDef_is_a( CORBA_InterfaceDef or, yoenv* ev, 
  CORBA_RepositoryId interface_id)
{
  boolean _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_InterfaceDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_InterfaceDef__tyimpl*) yoLocalObj( (CORBA_Object)or,
     (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (dvoid *)_impl, CORBA_InterfaceDef__id);
        
      _result = (*(boolean (*)( CORBA_InterfaceDef, yoenv*, 
        CORBA_RepositoryId))_f)(or, ev, interface_id);
    }
    else
      _result = (*_impl->is_a)(or, ev, interface_id);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        dvoid * _parvec[1];

        _parvec[0] = (dvoid *)&interface_id;
        yoSendReq( (dvoid *)or, ev, "is_a", TRUE, _sem, (sword)1, 
          CORBA_InterfaceDef_is_a_pars, _parvec);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_InterfaceDef_describe_interface__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_InterfaceDef_describe_interface");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_InterfaceDef_describe_interface", (
      ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_InterfaceDef_FullInterfaceDescription;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_InterfaceDef_FullInterfaceDescription 
  CORBA_InterfaceDef_describe_interface( CORBA_InterfaceDef or, yoenv* ev)
{
  CORBA_InterfaceDef_FullInterfaceDescription _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_InterfaceDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_InterfaceDef__tyimpl*) yoLocalObj( (CORBA_Object)or,
     (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)1, (dvoid *)_impl, CORBA_InterfaceDef__id);
        
      _result = (*(CORBA_InterfaceDef_FullInterfaceDescription (*)( 
        CORBA_InterfaceDef, yoenv*))_f)(or, ev);
    }
    else
      _result = (*_impl->describe_interface)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "describe_interface", TRUE, _sem, (
          sword)0, CORBA_InterfaceDef_describe_interface_pars, (dvoid **)0);
          
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

yopar* CORBA_InterfaceDef__get_base_interfaces__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "CORBA_InterfaceDef__get_base_interfaces");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "CORBA_InterfaceDef__get_base_interfaces",
       (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_CORBA_InterfaceDefSeq;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

CORBA_InterfaceDefSeq CORBA_InterfaceDef__get_base_interfaces( 
  CORBA_InterfaceDef or, yoenv* ev)
{
  CORBA_InterfaceDefSeq _result;
  ysevt* noreg _sem = (ysevt*)0;
  struct CORBA_InterfaceDef__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  NOREG(_sem);
  _impl = (struct CORBA_InterfaceDef__tyimpl*) yoLocalObj( (CORBA_Object)or,
     (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)2, (dvoid *)_impl, CORBA_InterfaceDef__id);
        
      _result = (*(CORBA_InterfaceDefSeq (*)( CORBA_InterfaceDef, yoenv*))
        _f)(or, ev);
    }
    else
      _result = (*_impl->_get_base_interfaces)(or, ev);
  }
  else
  {
    yoFilterRunEx((dvoid *)or, ev, YOFLTR_CSND, (CONST  char*)0, (dvoid *)0)
      ;
    yseTry
    {
      _sem = ysSemCreate((dvoid *)0);
      {
        yoSendReq( (dvoid *)or, ev, "_get_base_interfaces", TRUE, _sem, (
          sword)0, CORBA_InterfaceDef__get_base_interfaces_pars, (dvoid **)
          0);
      }
    }
    yseCatchAll
    {
      CONST ysid* _exid;
      dvoid * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (dvoid *)&_result);
    }
    yseFinally
      yoFilterRunEx((dvoid *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}


static CONST_DATA yotk CORBA_InterfaceDescription__tc[] = 
  {0x00,0x00,0x00,0x0f,0x00,0x00,0x02,',',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,'#','I','D','L',':','C','O','R','B','A','/','I'
  ,'n','t','e','r','f','a','c','e','D','e','s','c','r','i','p'
  ,'t','i','o','n',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x1e
  ,':',':','C','O','R','B','A',':',':','I','n','t','e','r','f'
  ,'a','c','e','D','e','s','c','r','i','p','t','i','o','n',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x05,'n','a','m'
  ,'e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,
  'D',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,'I','D','L',':',
  'C','O','R','B','A','/','I','d','e','n','t','i','f','i','e',
  'r',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,
  ':',':','C','O','R','B','A',':',':','I','d','e','n','t','i',
  'f','i','e','r',0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x03,'i','d',0x00,0x00,0x00,0x00,0x00,0x15,0x00
  ,0x00,0x00,'H',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1b,'I','D'
  ,'L',':','C','O','R','B','A','/','R','e','p','o','s','i','t'
  ,'o','r','y','I','d',':','1','.','0',0x00,0x00,0x00,0x00,0x00
  ,0x16,':',':','C','O','R','B','A',':',':','R','e','p','o','s'
  ,'i','t','o','r','y','I','d',0x00,0x00,0x00,0x00,0x00,0x00,0x12
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b,'d','e','f','i','n'
  ,'e','d','_','i','n',0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00
  ,0x00,'7',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,'I','D','L'
  ,':','C','O','R','B','A','/','C','o','n','t','a','i','n','e'
  ,'r',':','1','.','0',0x00,0x00,0x00,0x00,0x13,':',':','C','O'
  ,'R','B','A',':',':','C','o','n','t','a','i','n','e','r',0x00
  ,0x00,0x00,0x00,0x00,0x08,'v','e','r','s','i','o','n',0x00,0x00
  ,0x00,0x00,0x15,0x00,0x00,0x00,'H',0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x1a,'I','D','L',':','C','O','R','B','A','/','V','e'
  ,'r','s','i','o','n','S','p','e','c',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x15,':',':','C','O','R','B','A',':',':'
  ,'V','e','r','s','i','o','n','S','p','e','c',0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x10,'b','a','s','e','_','i','n','t','e','r','f','a','c','e'
  ,'s',0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'`',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x1e,'I','D','L',':','C','O','R','B','A'
  ,'/','R','e','p','o','s','i','t','o','r','y','I','d','S','e'
  ,'q',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x19,':',
  ':','C','O','R','B','A',':',':','R','e','p','o','s','i','t',
  'o','r','y','I','d','S','e','q',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x13,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

yotk* CORBA_InterfaceDescription__getTC(void)
{
  return (yotk*)CORBA_InterfaceDescription__tc;
}

void CORBA_InterfaceDescription__free( CORBA_InterfaceDescription* val, 
  ysmff ffunc)
{
  yotkFreeVal( YCTC_CORBA_InterfaceDescription, (dvoid *)val, ffunc);
}

void CORBA_InterfaceDescription__copy( CORBA_InterfaceDescription* dest, 
  CORBA_InterfaceDescription* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_CORBA_InterfaceDescription, (dvoid *)dest, (dvoid *)src,
     afunc);
}


EXTC_END
