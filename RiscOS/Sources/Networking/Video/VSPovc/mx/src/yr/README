This directory contains the sources for the Media Net Interface Repository,
or IFR. The IFR exists as a library that is only available for internal
use (libyr.a), a server (mnirsrv), and a server manager (mnirctl).

BTW, the file prefix for the IFR is "yr", but binary prefix is "mnir".

Libyr.a
-------
The library interface is a non-IDL interface (see yr.h) for use by the
IDL compiler and the IFR server. It is not a publicly available interface
to the IFR. This is the heart of the IFR implementation.

Files: 
	yr.c 		Everything except:
	yrc.c 		Yrobj creation
	yrdst.o 	Yrobj destruction
	yrtk.o 		Typecode generation
	yrdump.c 	Crude yrobj dumper
	yrwrite.c 	Writes IFR data files (reader used only by mnirsrv)

Mnirsrv
-------
Mnirsrv (previously yrsrv) acts as an IDL database. It supports queries
through OMG's Interface Repository IDL (yrcorba.idl), OMN-specific
queries to support DII (yrdiidl.idl), and a handlful of management calls
(yrmgidl.idl). When it grows up, it wants to be a real database, but at
the moment is is a very crude, file based implementation. It will probably
always have some kind of file-based interface to support stand-alone
execution, but there are severe limitations to what you can readily do with
this. 

The data files that can be loaded into mnirsrv must be generated by the
IDL compiler. Yrwrite.c and yrread.c are for manipulating these files.
The IFR proper and the IDL interfaces it supports are independent of how
the data is loaded into the repository, so most of the code cannot tell
whether or not the server is file based.

The CORBA IDL implementation is really just a very thin layer on top of 
libyr.a. There is a separate C source for each of the interfaces defined
in the CORBA IDL (e.g. yrcontr.c implements CORBA::Container, etc.). The
bulk of the files in this directory are to support this interface. ALL of
these interfaces are stateful because every CORBA object accessed through
this interface has an associated yrobj (from libyr.a).

Yrdiidl.idl and yrdii.c are a quick and dirty way to access just the info
you need to make a DII call (through the yoSendReq, not via the CORBA
DII interface). This interface is stateless since the queries are generally
by name and everything you need is retrieved by a single call.

Yrmgidl.idl and yrmgr.c support the server semantics of mnirsrv - loading
data into the repository, state queries, shutdown, etc. This interface is
stateless and is generally the way you get a handle on the stateful parts
of the server.

Files:
  yrcorba.idl: 
	yralias.c	CORBA::AliasDef
	yrarray.c	CORBA::ArrayDef
	yrattr.c	CORBA::AttributeDef
	yrconst.c	CORBA::ConstantDef
	yrcontd.c	CORBA::Contained
	yrcontr.c	CORBA::Container
	yrenum.c	CORBA::EnumerationDef
	yrexcept.c	CORBA::ExceptionDef
	yridltyp.c	CORBA::IDLType
	yrintf.c	CORBA::InterfaceDef
	yrirobj.c	CORBA::IRObject
	yrmodule.c	CORBA::ModuleDef
	yroper.c	CORBA::OperationDef
	yrprim.c	CORBA::PrimitiveDef
	yrrepos.c	CORBA::Repository
	yrseq.c		CORBA::SequenceDef
	yrstring.c	CORBA::StringDef
	yrtypdef.c	CORBA::TypedefDef
	yrunion.c	CORBA::UnionDef
  yrdiidl.idl:
	yrdii.c
  yrmgidl.idl:
	yrmgr.c
  generic:
	yrsvutil.c	Utilities specific to the server, like yslst to
			sequence conversion, yrobj to CORBA object, etc.
	yrread.c	Read in an IFR data file
	yrmerge.c	Merge data file contents into existing IFR contents
	yrsrv.c		Mnirsrv main

Mnirctl
-------
This is a simple controller client for mnirsrv. It babbles at the server
via the yrmgidl.idl interfaces, and can be used to load data into the
repository, find out what is already loaded, and shut a server down. 
This is the only (graceful) way to shut the server down. 

Files:
	yrmcl.c

Testing
-------
Currently, there is no test package per se for the IFR. There are, however,
a number of tools you can use to interactively torment the various interfaces:

/vobs/mx/tst/yr/yrcl - Exercises the CORBA IFR interfaces. This is
                       essentially a crude IFR browser. You use to dump
                       the entire IFR contents, or look things up selectively
                       by either name or repository id.
/vobs/mx/tst/yr/yrdii - Flexes the DII interface, primarily the lookup. It
                        requires /vobs/mx/demo/simple to function.
/vobs/mx/tst/yr/yrio - Tests the yrread.c and yrwrite.c operations. Given
                       an IFR data file generated by the IDL compiler, read
                       it back in. It will do a little dumping, but nothing
                       fancy. It's just an easier way to debug problems with
                       the I/O. 

