/* mx/src/yr/yrcontr.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/


 
#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif
 
#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif

#ifndef YRCORBAI_H
#include <yrcorbaI.h>
#endif
 
#ifndef YR_ORACLE
#include <yr.h>
#endif
 
#ifndef YOORB_ORACLE
#include <yoorb.h>
#endif
 
#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif

externdef ysidDecl(CORBA_Container_implid) = "ORA_Container";




 
CORBA_Contained CORBA_Container_lookup_i(
     CORBA_Container or, yoenv* ev, CORBA_ScopedName search_name)
{
  yrobj* result;
 
  yseTry
  {
    result = yrLookup( yrCORBAtoYR( (CORBA_IRObject)or), search_name);
  }
  yseCatchAll
  {
    result = (yrobj*) 0;
  }
  yseEnd
 
  return yoDuplicate(yrYRtoCORBA( result));
}
 

 
CORBA_ContainedSeq CORBA_Container_contents_i(
     CORBA_Container or, yoenv* ev, CORBA_DefinitionKind limit_type,
     boolean exclude_inherited)
{
  yslst* volatile cntnts = (yslst*)0;
  CORBA_ContainedSeq seq;
 
  yseTry
  {
    cntnts = yrContents( yrCORBAtoYR( (CORBA_IRObject)or), 
                         yrDefKindToYrdk(limit_type), exclude_inherited);
  }
  yseCatchAll
  {
    if ( cntnts )
      ysLstDestroy( (dvoid*) cntnts, (ysmff)0);
    cntnts = (yslst*) 0;
  }
  yseEnd
 
  yrObjListToSeq( cntnts, (yr_objseq*) &seq);
  if ( cntnts )
    ysLstDestroy( (yslst*)cntnts, (ysmff)0);
  return seq;
}
 

 
CORBA_ContainedSeq CORBA_Container_lookup_name_i(
     CORBA_Container or, yoenv* ev, CORBA_Identifier search_name,
     sb4 levels_to_search, CORBA_DefinitionKind limit_type,
     boolean exclude_inherited)
{
  yslst* matches;
  CORBA_ContainedSeq seq;
 
  yseTry
  {
    matches = yrLookupName( yrCORBAtoYR( (CORBA_IRObject)or), 
                           search_name, levels_to_search,
                           yrDefKindToYrdk(limit_type), exclude_inherited);
  }
  yseCatchAll
  {
    matches = (yslst*)0;
  }
  yseEnd
 
  yrObjListToSeq( matches, (yr_objseq*) &seq);
  if ( matches )
    ysLstDestroy( matches, (ysmff)0);
  return seq;
}
 


 
CORBA_Container_DescriptionSeq CORBA_Container_describe_contents_i(
     CORBA_Container or, yoenv* ev, CORBA_DefinitionKind limit_type,
     boolean exclude_inherited, sb4 max_returned_objs)
{
  noreg CORBA_Container_DescriptionSeq seq = {0, 0, 0};
  noreg CORBA_ContainedSeq contents;
  CORBA_Contained_Description desc;
  ub4 nitems;
  ub4 i;

  NOREG(seq);
  NOREG(contents);
  if ( max_returned_objs == 0 )
    return seq;        

    
  switch ( CORBA_Container__get_def_kind_i( or, ev) )
  {
    case CORBA_dk_Interface:
      contents = CORBA_InterfaceDef_contents_i( (CORBA_InterfaceDef) or, 
                                                ev, limit_type, 
                                                exclude_inherited);
      break;
    case CORBA_dk_Module:
      contents = CORBA_ModuleDef_contents_i( (CORBA_ModuleDef) or, 
                                             ev, limit_type, 
                                             exclude_inherited);
      break;
    case CORBA_dk_Struct:
      contents = CORBA_StructDef_contents_i( (CORBA_StructDef) or, 
                                              ev, limit_type, 
                                              exclude_inherited);
      break;
    case CORBA_dk_Union:
      contents = CORBA_UnionDef_contents_i( (CORBA_UnionDef) or, 
                                            ev, limit_type, 
                                            exclude_inherited);
      break;
    case CORBA_dk_Exception:
      contents = CORBA_ExceptionDef_contents_i( (CORBA_ExceptionDef) or, 
                                                ev, limit_type, 
                                                exclude_inherited);
      break;
    case CORBA_dk_Repository:
      contents = CORBA_Repository_contents_i( (CORBA_Repository) or, 
                                              ev, limit_type, 
                                              exclude_inherited);
      break;
    default:
      yseThrow( YR_EX_BADTYPE);
  }

    
  if ( contents._length == 0 )
  {
    CORBA_ContainedSeq__free( (CORBA_ContainedSeq*) &contents, yoFree);
    return seq;
  }
  if ( max_returned_objs < 0 )
    nitems = contents._length;
  else
    nitems = min(max_returned_objs, contents._length);

    
  yseTry
  {
    CORBA_Contained o;

    seq._buffer = (CORBA_Container_Description*) 
                      yoAlloc( sizeof( CORBA_Container_Description) * nitems);
    for ( i = 0; i < nitems; i++ )
    {
      o = contents._buffer[i];
      switch ( CORBA_Contained__get_def_kind_i( o, ev))
      {
        case CORBA_dk_Attribute:
          desc = CORBA_AttributeDef_describe_i( (CORBA_AttributeDef) o, ev);
          break;
        case CORBA_dk_Constant:
          desc = CORBA_ConstantDef_describe_i( (CORBA_ConstantDef) o, ev);
          break;
        case CORBA_dk_Exception:
          desc = CORBA_ExceptionDef_describe_i( (CORBA_ExceptionDef) o, ev);
          break;
        case CORBA_dk_Interface:
          desc = CORBA_InterfaceDef_describe_i( (CORBA_InterfaceDef) o, ev);
          break;
        case CORBA_dk_Module:
          desc = CORBA_ModuleDef_describe_i( (CORBA_ModuleDef) o, ev);
          break;
        case CORBA_dk_Operation:
          desc = CORBA_OperationDef_describe_i( (CORBA_OperationDef) o, ev);
          break;
        case CORBA_dk_Typedef:
          desc = CORBA_TypedefDef_describe_i( (CORBA_TypedefDef) o, ev);
          break;
        case CORBA_dk_Alias:
          desc = CORBA_AliasDef_describe_i( (CORBA_AliasDef) o, ev);
          break;
        case CORBA_dk_Struct:
          desc = CORBA_StructDef_describe_i( (CORBA_StructDef) o, ev);
          break;
        case CORBA_dk_Union:
          desc = CORBA_UnionDef_describe_i( (CORBA_UnionDef) o, ev);
          break;
        case CORBA_dk_Enum:
          desc = CORBA_EnumDef_describe_i( (CORBA_EnumDef) o, ev);
          break;
        default:
          yseThrow( YR_EX_BADTYPE);
      }
      seq._buffer[i].contained_object = yoDuplicate( contents._buffer[i]);
      seq._buffer[i].kind = desc.kind;
      seq._buffer[i].value = desc.value;
      seq._length++;
    }
  }
  yseCatchAll
  {
    if ( seq._buffer )
      CORBA_Container_DescriptionSeq__free( 
                  (CORBA_Container_DescriptionSeq*) &seq, yoFree);
    CORBA_ContainedSeq__free( (CORBA_ContainedSeq*) &contents, yoFree);
    yseRethrow;
  }
  yseEnd

  yseTry
  {
    CORBA_ContainedSeq__free( (CORBA_ContainedSeq*) &contents, yoFree);
  }
  yseCatchAll
  {
    CORBA_Container_DescriptionSeq__free(
                 (CORBA_Container_DescriptionSeq*) &seq, yoFree);
  }
  yseEnd

  return seq;
}
 

 
CORBA_DefinitionKind CORBA_Container__get_def_kind_i(
     CORBA_Container or, yoenv* ev)
{
  return CORBA_IRObject__get_def_kind_i( (CORBA_IRObject) or, ev);
}
 

 
 
externdef struct CORBA_Container__tyimpl CORBA_Container__impl =
 {
  CORBA_Container_lookup_i,
  CORBA_Container_contents_i,
  CORBA_Container_lookup_name_i,
  CORBA_Container_describe_contents_i,
  CORBA_Container__get_def_kind_i
 };
 




void Init_CORBA_Container()
{
  YR_SET_IMPL(CORBA_Container, FALSE, 0);
  YR_IMPL_READY(CORBA_Container, 0);
}

void Term_CORBA_Container()
{
  YR_IMPL_DEACTIVATE(CORBA_Container);
}
