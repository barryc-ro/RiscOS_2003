/* mx/src/yr/yrdii.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif

#ifndef YO_ORACLE
#include <yo.h>
#endif

#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif

#ifndef YRDIIDLI_H
#include <yrdiidlI.h>
#endif

#ifndef YR_ORACLE
#include <yr.h>
#endif

#ifndef YSFMT_ORACLE
#include <ysfmt.h>
#endif

#ifndef YR0UTIL_ORACLE
#include <yr0util.h>
#endif

STATICF void yrOpToReqDesc( yrobj* op, yr_reqDesc* desc);
STATICF void yrAttrToReqDesc( yrobj* attr, yr_reqDesc* desc, sword mode);
STATICF void yrBuildYoPar( yo_parList* pseq, yr_parNameList* nseq,
                           yslst* pars, yslst* raises, yrobj* rettype);
STATICF yr_intfDescList yrBuildIntfDescs( yslst* intfs);
STATICF void yrBuildIntfDesc( yrobj* intf, yr_intfDesc* desc);
STATICF void yrBuildOpDescs( yslst* ops, ub4 nops, yr_reqDescList* descs);

yr_reqDescList yr_dii_reqDescByName_i( 
    yr_dii or, yoenv* ev, yr_scopedNameList* names)
{
  noreg ub4 i;
  yslst* noreg ops;
  noreg yr_reqDescList result = {0,0,0};
  yrobj* obj;
  ub4 nops;
  yrobj* repository = yoGetImplState((dvoid*) or);

  NOREG(i);
  NOREG(ops);
  NOREG(result);

  nops = 0;
  ops = ysLstCreate();

  
  for ( i = 0; i < names->_length; i++)
  {
    yseTry
    {
      obj = yrLookup( repository, names->_buffer[i]);
    }
    yseCatchAll
    {
      yr_dii_NotFound ex;

      ysLstDestroy((yslst*)ops, (ysmff)0);
      ex.name = ysStrDupWaf(names->_buffer[i], yoAlloc);
      yseThrowObj( YR_DII_EX_NOTFOUND, ex);
    }
    yseEnd

    ysLstEnq( (yslst*)ops, (dvoid*)obj);
    switch ( yrGetKind(obj) )
    {
      case yrdkOperation:
        nops++;
        break;
      case yrdkAttribute:
        if ( yrAttrData(obj).mode != YR_ATTR_RO )
          nops += 2;
        else
          nops++;
        break;
      default:                 
      {
        yr_dii_NotFound ex;

        ysLstDestroy((yslst*)ops, (ysmff)0);
        ex.name = ysStrDupWaf(names->_buffer[i], yoAlloc);
        yseThrowObj( YR_DII_EX_NOTFOUND, ex);
      }
    }
  }

  
  yseTry
  {
    yrBuildOpDescs( (yslst*) ops, nops, (yr_reqDescList*) &result);
  }
  yseCatchAll
  {
    ysLstDestroy( (yslst*)ops, (ysmff)0);
    yseRethrow;
  }
  yseEnd

  ysLstDestroy( (yslst*)ops, (ysmff)0);
  return result;
}



yr_intfDescList yr_dii_intfDescByName_i( 
    yr_dii or, yoenv* ev, yr_scopedNameList* names)
{
  yrobj* repository = yoGetImplState((dvoid*) or);
  yslst* noreg intfs;
  noreg ub4 i;
  yr_intfDescList result = {0,0,0};
  yrobj* obj;

  NOREG(intfs);
  NOREG(i);

  intfs = ysLstCreate();
  for ( i = 0; i < names->_length; i++)
  {
    yseTry
    {
      obj = yrLookup( repository, names->_buffer[i]);
    }
    yseCatchAll
    {
      yr_dii_NotFound ex;

      ysLstDestroy( (yslst*)intfs, (ysmff)0);
      ex.name = ysStrDupWaf(names->_buffer[i], yoAlloc);
      yseThrowObj( YR_DII_EX_NOTFOUND, ex);
    }
    yseEnd

    if ( yrGetKind( obj) != yrdkInterface )
    {
      yr_dii_NotFound ex;

      ysLstDestroy( (yslst*)intfs, (ysmff)0);
      ex.name = ysStrDupWaf(names->_buffer[i], yoAlloc);
      yseThrowObj( YR_DII_EX_NOTFOUND, ex);
    }
    ysLstEnq( (yslst*)intfs, obj);
  }

  yseTry
  {
    result = yrBuildIntfDescs( (yslst*)intfs);
  }
  yseCatchAll
  {
    ysLstDestroy( (yslst*)intfs, (ysmff)0);
    yseRethrow;
  }
  yseEnd
  ysLstDestroy( (yslst*)intfs, (ysmff)0);
  return result;
}



yr_intfDescList yr_dii_intfDescById_i( 
    yr_dii or, yoenv* ev, yr_intfIdList* ids)
{
  yrobj* repository = yoGetImplState((dvoid*) or);
  yslst* noreg intfs;
  yrobj* obj;
  yr_intfDescList result = {0,0,0};
  ub4 i;

  NOREG(intfs);
  intfs = ysLstCreate();

  for ( i = 0; i < ids->_length; i++)
  {
    obj = (yrobj*)0;
    yseTry
    {
      obj = yrLookupId( repository, ids->_buffer[i]);
    }
    yseCatchAll
    {
      
    }
    yseEnd

    if ( !obj || (yrGetKind( obj) != yrdkInterface) )
    {
      yr_dii_NotFound ex;

      ex.name = ids->_buffer[i];
      ysLstDestroy( (yslst*)intfs, (ysmff)0);
      yseThrowObj( YR_DII_EX_NOTFOUND, ex);
    }
    ysLstEnq( (yslst*)intfs, obj);
  }

  yseTry
  {
    result = yrBuildIntfDescs( (yslst*)intfs);
  }
  yseCatchAll
  {
    ysLstDestroy( (yslst*)intfs, (ysmff)0);
    yseRethrow;
  }
  yseEnd;
  ysLstDestroy( (yslst*)intfs, (ysmff)0);
  return result;
}



yr_intfDescList yr_dii_intfDescByObj_i( 
    yr_dii or, yoenv* ev, yostd_objList* intfObjs)
{
  yrobj* repository = yoGetImplState((dvoid*) or);
  yslst* noreg intfs;
  yrobj* obj;
  yr_intfDescList result = {0,0,0};
  ub4 i;
  CONST ysid* intfid;

  NOREG(intfs);
  intfs = ysLstCreate();

  for ( i = 0; i < intfObjs->_length; i++)
  {
    obj = (yrobj*)0;
    intfid = yoGetInterface( intfObjs->_buffer[i]);
    yseTry
    {
      obj = yrLookupId( repository, intfid);
    }
    yseCatchAll
    {
      
    }
    yseEnd

    if ( !obj || (yrGetKind( obj) != yrdkInterface) )
    {
      yr_dii_NotFound ex;

      ex.name = (char*) intfid;
      ysLstDestroy(intfs, (ysmff)0);
      yseThrowObj( YR_DII_EX_NOTFOUND, ex);
    }
    ysLstEnq( (yslst*)intfs, obj);
  }

  yseTry
  {
    result = yrBuildIntfDescs( (yslst*)intfs);
  }
  yseCatchAll
  {
    ysLstDestroy( (yslst*)intfs, (ysmff)0);
    yseRethrow;
  }
  yseEnd;
  ysLstDestroy( (yslst*)intfs, (ysmff)0);
  return result;
}



externdef struct yr_dii__tyimpl yr_dii__impl =
 {
  yr_dii_reqDescByName_i,
  yr_dii_intfDescByName_i,
  yr_dii_intfDescById_i,
  yr_dii_intfDescByObj_i
 };








STATICF void yrOpToReqDesc( yrobj* op, yr_reqDesc* desc)
{
  yrobj* rettype = yrOpData(op).rettype;
  yslst* pars = yrOpData(op).pars;
  yslst* raises = yrOpData(op).raises;

  yrBuildYoPar( &desc->pars, &desc->parNames, pars, raises, rettype);
  desc->name = ysStrDupWaf( yrGetName(op), yoAlloc);
  desc->isOneway = (yrOpData(op).mode == YR_OP_ONEWAY ? TRUE : FALSE);
}



STATICF void yrAttrToReqDesc( yrobj* attr, yr_reqDesc* desc, sword mode)
{
  if ( mode == YR_ATTR_RO )          
  {
    yrBuildYoPar( &desc->pars, &desc->parNames, (yslst*)0, (yslst*)0, 
                  yrAttrData(attr).type);
    desc->name = (char*) yoAlloc( strlen( yrGetName(attr)) + 6);
    DISCARD ysFmtStr( desc->name, "_get_%s", yrGetName(attr));
    desc->isOneway = FALSE;
  }
  else                               
  {
    yslst* noreg pars = ysLstCreate();
    yrpar param;
    yrobj* rettype;

    NOREG(pars);
    param.type = yrAttrData(attr).type;
    param.mode = YOMODE_IN;
    param.name = "value";
    ysLstEnq( pars, &param);
    rettype = yrGetPrimitive( yrGetRepository(attr), yrpkvoid);

    yseTry
    {
      yrBuildYoPar( &desc->pars, &desc->parNames, pars, (yslst*)0, rettype);
    }
    yseCatchAll
    {
      ysLstDestroy( pars, (ysmff)0);
    }
    yseEnd

    desc->name = (char*) yoAlloc( strlen( yrGetName(attr)) + 6);
    DISCARD ysFmtStr( desc->name, "_set_%s", yrGetName(attr));
    desc->isOneway = FALSE;
  }
}



STATICF void yrBuildYoPar( yo_parList* pseq, yr_parNameList* nseq,
                           yslst* pars, yslst* raises, yrobj* rettype)
{
  CONST yotk* tc;
  ysle* le;
  ub4 npars;
  yo_parList* noreg pardesc;
  yr_parNameList* noreg names;
  boolean isVoidReturn = !rettype || ((yrGetKind(rettype) == yrdkPrimitive) &&
                                (yrPrimData(rettype).kind == yrpkvoid));

  NOREG(pardesc);
  NOREG(names);
  npars = 1;                                   
  npars += pars ? ysLstCount(pars) : 0;        
  if ( !isVoidReturn )  
    npars++;                                   
  npars += raises ? ysLstCount(raises) : 0;    

  pardesc = pseq;          
  pardesc->_maximum = 0;
  pardesc->_length = 0;
  pardesc->_buffer = 0;

  names = nseq;            
  names->_maximum = 0;
  names->_length = 0;
  names->_buffer = 0;
  
  yseTry
  {
    pardesc->_buffer = (yo_par*) yoAlloc( sizeof(yo_par) * npars);

    if ( !isVoidReturn )
    {
      pardesc->_buffer[0].mode = YOMODE_RETURN;
      pardesc->_buffer[0].sz = 0;
      tc = yrGetTypeCode( rettype);
      yotkCopyVal( yoTcTypeCode, (dvoid*) &pardesc->_buffer[0].tk, 
		   (dvoid*) &tc, yoAlloc);
      pardesc->_length++;
    }

    if ( pars && (ysLstCount(pars) > 0) )
    {
      names->_buffer = (char**) yoAlloc( sizeof(char*) * ysLstCount(pars));

      for ( le = ysLstHead( pars); le; le = ysLstNext(le))
      {
	yrpar* par = (yrpar*) ysLstVal(le);

	pardesc->_buffer[pardesc->_length].mode = par->mode;
	pardesc->_buffer[pardesc->_length].sz = 0;
	tc = yrGetTypeCode( par->type);
	yotkCopyVal( yoTcTypeCode, 
                     (dvoid*) &pardesc->_buffer[pardesc->_length].tk, 
		     (dvoid*)&tc, yoAlloc);
	pardesc->_length++;
        names->_buffer[names->_length] = ysStrDupWaf( par->name, yoAlloc);
        names->_length++;
      }
    }

    if ( raises )
    {
      for ( le = ysLstHead( raises); le; le = ysLstNext(le))
      {
	yrobj* except = (yrobj*) ysLstVal(le);

	pardesc->_buffer[pardesc->_length].mode = YOMODE_EXCEPT;
	pardesc->_buffer[pardesc->_length].sz = 0;
	tc = yrGetTypeCode( except);
	yotkCopyVal( yoTcTypeCode, 
                     (dvoid*) &pardesc->_buffer[pardesc->_length].tk, 
		     (dvoid*)&tc, yoAlloc);
	pardesc->_length++;
      }
    }

    pardesc->_buffer[npars-1].mode = YOMODE_INVALID;
    pardesc->_buffer[npars-1].tk = (yotk*) yoTcNull;
    pardesc->_buffer[npars-1].sz = 0;
    pardesc->_length++;
  }
  yseCatchAll
  {
    yo_parList__free( (yo_parList*) pardesc, yoFree);
    pardesc->_length = 0;
    yr_parNameList__free( (yr_parNameList*) names, yoFree);
    names->_length = 0;
    yseRethrow;
  }
  yseEnd
}



STATICF void yrBuildOpDescs( yslst* ops, ub4 nops, yr_reqDescList* descs)
{
  ub4 i;

  descs->_length = 0;
  if ( nops == 0 )
  {
    descs->_buffer = (yr_reqDesc*)0;
    return;
  }

  yseTry
  {
    descs->_buffer = (yr_reqDesc*) yoAlloc( sizeof(yr_reqDesc) * nops);
    for ( i = 0; i < nops; i++)
    {
      yrobj* obj = (yrobj*) ysLstDeq(ops);
      if ( yrGetKind(obj) == yrdkAttribute )
      {
        yrAttrToReqDesc( obj, &descs->_buffer[i], YR_ATTR_RO);
        if ( yrAttrData(obj).mode != YR_ATTR_RO )
        {
          i++;
          yrAttrToReqDesc( obj, &descs->_buffer[i], YR_ATTR_RW);
          descs->_length++;
        }
      }
      else
      {
        yrOpToReqDesc( obj, &descs->_buffer[i]);
      }
      descs->_length++;
    }
  }
  yseCatchAll
  {
    yr_reqDescList__free( descs, yoFree);
    yseRethrow;
  }
  yseEnd
}



STATICF yr_intfDescList yrBuildIntfDescs( yslst* intfs)
{
  ub4 nintf = ysLstCount(intfs);
  noreg yr_intfDescList result;
  ysle* le;
  ub4 i;

  NOREG(result);
  result._length = 0;
  result._maximum = 0;
  result._buffer = (yr_intfDesc*) yoAlloc( sizeof(yr_intfDesc) * nintf);

  for ( i = 0, le = ysLstHead(intfs); le; i++, le = ysLstNext(le))
  {
    yseTry
    {
      yrBuildIntfDesc( (yrobj*) ysLstVal(le), &result._buffer[i]);
    }
    yseCatchAll
    {
      yr_intfDescList__free( (yr_intfDescList*) &result, yoFree);
      yseRethrow;
    }
    yseEnd
    result._length++;
  }
  return result;
}



STATICF void yrBuildIntfDesc( yrobj* intf, yr_intfDesc* desc)
{
  char* str;
  yslst* noreg ops;
  ysle* le;
  ub4 nops;

  NOREG(ops);

  ops = ysLstCreate();
  nops = 0;
  for ( le = ysLstHead( yrGetContents(intf)); le; le = ysLstNext(le))
  {
    yrobj* obj = (yrobj*) ysLstVal(le);

    switch ( yrGetKind(obj))
    {
      case yrdkAttribute:
        if ( yrAttrData(obj).mode != YR_ATTR_RO )
          nops++;               
        
      case yrdkOperation:
        nops++;
        ysLstEnq( (yslst*)ops, (dvoid*) obj);
        break;
      default:
        break;
    }
  }

  yseTry
  {
    yrBuildOpDescs( ops, nops, &desc->ops);
  }
  yseCatchAll
  {
    ysLstDestroy( (yslst*) ops, (ysmff)0);
    yseRethrow;
  }
  yseEnd

  ysLstDestroy( ops, (ysmff)0);
  str = yrGetAbsoluteName(intf);
  desc->name = ysStrDupWaf( str, yoAlloc);
  ysmGlbFree(str);

  str = (char*) yrCreateIntfId( intf);
  desc->interfaceId = ysStrDupWaf( str, yoAlloc);
  ysmGlbFree(str);
}



void yrdiiInit( yrobj* repository, CONST char* tag)
{
  yoSetImpl( yr_dii__id, tag,
             yr_dii__stubs, &yr_dii__impl,
             (yoload)0, TRUE, (dvoid*) repository);
  yoImplReady( yr_dii__id, tag, (ysque*)0);
}


void yrdiiTerm( CONST char* tag)
{
  yoImplDeactivate( yr_dii__id, tag);
}


