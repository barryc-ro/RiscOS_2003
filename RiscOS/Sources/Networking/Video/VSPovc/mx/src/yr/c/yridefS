/* mx/src/yr/yridefS.c */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef SYSI_ORACLE
#include <sysi.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif

#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
#include <yridefC.c>

EXTC_START


STATICF void yr_intfdef_is_a_s( dvoid * or, yoenv* ev, dvoid * impldef, 
  dvoid ** args);

STATICF void yr_intfdef_is_a_s( dvoid * or, yoenv* ev, dvoid * impldef, 
  dvoid ** args)
{
  *(boolean*)args[0] = (*((struct yr_intfdef__tyimpl*)impldef)->is_a)( (
    yr_intfdef)or, ev,*(CORBA_RepositoryId*)args[1]);
}

STATICF void yr_intfdef_describe_interface_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args);

STATICF void yr_intfdef_describe_interface_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args)
{
  *(CORBA_InterfaceDef_FullInterfaceDescription*)args[0] = (*((struct 
    yr_intfdef__tyimpl*)impldef)->describe_interface)( (yr_intfdef)or, ev);
}

STATICF void yr_intfdef__get_base_interfaces_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args);

STATICF void yr_intfdef__get_base_interfaces_s( dvoid * or, yoenv* ev, 
  dvoid * impldef, dvoid ** args)
{
  *(CORBA_InterfaceDefSeq*)args[0] = (*((struct yr_intfdef__tyimpl*)impldef)
    ->_get_base_interfaces)( (yr_intfdef)or, ev);
}

STATICF void yr_intfdef_lookup_s( dvoid * or, yoenv* ev, dvoid * impldef, 
  dvoid ** args);

STATICF void yr_intfdef_lookup_s( dvoid * or, yoenv* ev, dvoid * impldef, 
  dvoid ** args)
{
  *(CORBA_Contained*)args[0] = (*((struct yr_intfdef__tyimpl*)impldef)
    ->lookup)( (yr_intfdef)or, ev,*(CORBA_ScopedName*)args[1]);
}

STATICF void yr_intfdef_contents_s( dvoid * or, yoenv* ev, dvoid * impldef, 
  dvoid ** args);

STATICF void yr_intfdef_contents_s( dvoid * or, yoenv* ev, dvoid * impldef, 
  dvoid ** args)
{
  *(CORBA_ContainedSeq*)args[0] = (*((struct yr_intfdef__tyimpl*)impldef)
    ->contents)( (yr_intfdef)or, ev,*(CORBA_DefinitionKind*)args[1],*(
    boolean*)args[2]);
}

STATICF void yr_intfdef_lookup_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void yr_intfdef_lookup_name_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_ContainedSeq*)args[0] = (*((struct yr_intfdef__tyimpl*)impldef)
    ->lookup_name)( (yr_intfdef)or, ev,*(CORBA_Identifier*)args[1],*(sb4*)
    args[2],*(CORBA_DefinitionKind*)args[3],*(boolean*)args[4]);
}

STATICF void yr_intfdef_describe_contents_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void yr_intfdef_describe_contents_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Container_DescriptionSeq*)args[0] = (*((struct 
    yr_intfdef__tyimpl*)impldef)->describe_contents)( (yr_intfdef)or, ev,*(
    CORBA_DefinitionKind*)args[1],*(boolean*)args[2],*(sb4*)args[3]);
}

STATICF void yr_intfdef__get_def_kind_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void yr_intfdef__get_def_kind_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_DefinitionKind*)args[0] = (*((struct yr_intfdef__tyimpl*)impldef)
    ->_get_def_kind)( (yr_intfdef)or, ev);
}

STATICF void yr_intfdef_describe_s( dvoid * or, yoenv* ev, dvoid * impldef, 
  dvoid ** args);

STATICF void yr_intfdef_describe_s( dvoid * or, yoenv* ev, dvoid * impldef, 
  dvoid ** args)
{
  *(CORBA_Contained_Description*)args[0] = (*((struct yr_intfdef__tyimpl*)
    impldef)->describe)( (yr_intfdef)or, ev);
}

STATICF void yr_intfdef__get_id_s( dvoid * or, yoenv* ev, dvoid * impldef, 
  dvoid ** args);

STATICF void yr_intfdef__get_id_s( dvoid * or, yoenv* ev, dvoid * impldef, 
  dvoid ** args)
{
  *(CORBA_RepositoryId*)args[0] = (*((struct yr_intfdef__tyimpl*)impldef)
    ->_get_id)( (yr_intfdef)or, ev);
}

STATICF void yr_intfdef__get_name_s( dvoid * or, yoenv* ev, dvoid * impldef,
   dvoid ** args);

STATICF void yr_intfdef__get_name_s( dvoid * or, yoenv* ev, dvoid * impldef,
   dvoid ** args)
{
  *(CORBA_Identifier*)args[0] = (*((struct yr_intfdef__tyimpl*)impldef)
    ->_get_name)( (yr_intfdef)or, ev);
}

STATICF void yr_intfdef__get_version_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void yr_intfdef__get_version_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_VersionSpec*)args[0] = (*((struct yr_intfdef__tyimpl*)impldef)
    ->_get_version)( (yr_intfdef)or, ev);
}

STATICF void yr_intfdef__get_defined_in_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args);

STATICF void yr_intfdef__get_defined_in_s( dvoid * or, yoenv* ev, dvoid * 
  impldef, dvoid ** args)
{
  *(CORBA_Container*)args[0] = (*((struct yr_intfdef__tyimpl*)impldef)
    ->_get_defined_in)( (yr_intfdef)or, ev);
}

STATICF void yr_intfdef__get_absolute_name_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args);

STATICF void yr_intfdef__get_absolute_name_s( dvoid * or, yoenv* ev, dvoid 
  * impldef, dvoid ** args)
{
  *(CORBA_ScopedName*)args[0] = (*((struct yr_intfdef__tyimpl*)impldef)
    ->_get_absolute_name)( (yr_intfdef)or, ev);
}

STATICF void yr_intfdef__get_containing_repository_s( dvoid * or, yoenv* ev,
   dvoid * impldef, dvoid ** args);

STATICF void yr_intfdef__get_containing_repository_s( dvoid * or, yoenv* ev,
   dvoid * impldef, dvoid ** args)
{
  *(CORBA_Repository*)args[0] = (*((struct yr_intfdef__tyimpl*)impldef)
    ->_get_containing_repository)( (yr_intfdef)or, ev);
}

STATICF void yr_intfdef__get_type_s( dvoid * or, yoenv* ev, dvoid * impldef,
   dvoid ** args);

STATICF void yr_intfdef__get_type_s( dvoid * or, yoenv* ev, dvoid * impldef,
   dvoid ** args)
{
  *(yotk**)args[0] = (*((struct yr_intfdef__tyimpl*)impldef)->_get_type)( (
    yr_intfdef)or, ev);
}

STATICF yogfp yr_intfdef__widen( ub4 _idx, dvoid *_data, CONST ysid* _id);

STATICF yogfp yr_intfdef__widen( ub4 _idx, dvoid *_data, CONST ysid* _id)
{
  yogfp* _fps = (yogfp*)_data;

  if ( ysidEq( CORBA_InterfaceDef__id, _id) )
  {
  }
  else if ( ysidEq( CORBA_Container__id, _id) )
    _fps += 3;
  else if ( ysidEq( CORBA_IRObject__id, _id) )
    _fps += 7;
  else if ( ysidEq( CORBA_Contained__id, _id) )
    _fps += 8;
  else if ( ysidEq( CORBA_IDLType__id, _id) )
    _fps += 15;
  else 
    yseThrow(YS_EX_BADPARAM);
  return _fps[_idx];
}

static const char* const yr_intfdef__bases[] =
{
  "IDL:CORBA/InterfaceDef:1.0",
  "IDL:CORBA/Container:1.0",
  "IDL:CORBA/IRObject:1.0",
  "IDL:CORBA/Contained:1.0",
  "IDL:CORBA/IDLType:1.0",
  (char*)0
};

yostub* yr_intfdef__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*16), 
    "yostubs");
  _result->widen = (yowiden)yr_intfdef__widen;
  _result->bases = yr_intfdef__bases;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "is_a";
  _stubs[0].parms = yr_intfdef_is_a_pars;
  _stubs[0].oper = yr_intfdef_is_a_s;
  _stubs[1].opernm = "describe_interface";
  _stubs[1].parms = yr_intfdef_describe_interface_pars;
  _stubs[1].oper = yr_intfdef_describe_interface_s;
  _stubs[2].opernm = "_get_base_interfaces";
  _stubs[2].parms = yr_intfdef__get_base_interfaces_pars;
  _stubs[2].oper = yr_intfdef__get_base_interfaces_s;
  _stubs[3].opernm = "lookup";
  _stubs[3].parms = yr_intfdef_lookup_pars;
  _stubs[3].oper = yr_intfdef_lookup_s;
  _stubs[4].opernm = "contents";
  _stubs[4].parms = yr_intfdef_contents_pars;
  _stubs[4].oper = yr_intfdef_contents_s;
  _stubs[5].opernm = "lookup_name";
  _stubs[5].parms = yr_intfdef_lookup_name_pars;
  _stubs[5].oper = yr_intfdef_lookup_name_s;
  _stubs[6].opernm = "describe_contents";
  _stubs[6].parms = yr_intfdef_describe_contents_pars;
  _stubs[6].oper = yr_intfdef_describe_contents_s;
  _stubs[7].opernm = "_get_def_kind";
  _stubs[7].parms = yr_intfdef__get_def_kind_pars;
  _stubs[7].oper = yr_intfdef__get_def_kind_s;
  _stubs[8].opernm = "describe";
  _stubs[8].parms = yr_intfdef_describe_pars;
  _stubs[8].oper = yr_intfdef_describe_s;
  _stubs[9].opernm = "_get_id";
  _stubs[9].parms = yr_intfdef__get_id_pars;
  _stubs[9].oper = yr_intfdef__get_id_s;
  _stubs[10].opernm = "_get_name";
  _stubs[10].parms = yr_intfdef__get_name_pars;
  _stubs[10].oper = yr_intfdef__get_name_s;
  _stubs[11].opernm = "_get_version";
  _stubs[11].parms = yr_intfdef__get_version_pars;
  _stubs[11].oper = yr_intfdef__get_version_s;
  _stubs[12].opernm = "_get_defined_in";
  _stubs[12].parms = yr_intfdef__get_defined_in_pars;
  _stubs[12].oper = yr_intfdef__get_defined_in_s;
  _stubs[13].opernm = "_get_absolute_name";
  _stubs[13].parms = yr_intfdef__get_absolute_name_pars;
  _stubs[13].oper = yr_intfdef__get_absolute_name_s;
  _stubs[14].opernm = "_get_containing_repository";
  _stubs[14].parms = yr_intfdef__get_containing_repository_pars;
  _stubs[14].oper = yr_intfdef__get_containing_repository_s;
  _stubs[15].opernm = "_get_type";
  _stubs[15].parms = yr_intfdef__get_type_pars;
  _stubs[15].oper = yr_intfdef__get_type_s;
  _stubs[16].opernm = (CONST char*)0;
  _stubs[16].parms = (yopar*)0;
  _stubs[16].oper = (void (*)(dvoid *,yoenv*,dvoid *,dvoid **))0;

  return _result;
}


EXTC_END
