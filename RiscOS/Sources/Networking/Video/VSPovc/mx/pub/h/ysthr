/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * ysthr.h - Media Net Threads
 *
 * DESCRIPTION
 * ysThrInit(), ysThrTerm(), ysThrCreate(), and ysThrExit(), and ysThrSignal()
 * are for use only in programs that are known to be multi-threaded.  The
 * remaining functions are legal for use in any library and will behave
 * meaningfully whether in a single- or multi-threaded process.  In
 * particular, mutexes and thread-specific contexts should be used wherever
 * they would be appropriate in a multi-threaded process.  In a single-
 * threaded process, these will still work correctly.
 *
 * ysYield() may be used as always to yield between threads.  ysSetWaiter()
 * establishes the function to use for process blocking when no threads are
 * runnable.  However, only threads created with ysThrCreate() are considered.
 * If using an alternative threads package directly, the wait function
 * installed must cooperate with the alternate threads package directly.
 */

#ifndef YSTHR_ORACLE
#define YSTHR_ORACLE

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif

EXTC_START

/*
 * Type Declarations
 */
typedef struct ysthr ysthr;                             /* thread identifier */
typedef union  ysthrkey ysthrkey;                   /* thread key identifier */
typedef struct ysmtx ysmtx;                                         /* mutex */
typedef struct yscv  yscv;                             /* condition variable */

/*
 * Constant Declarations
 */
externref ysidDecl(YS_EX_DESTROYED);                      /* mutex destroyed */
externref ysidDecl(YS_EX_DEADLOCK);                        /* mutex deadlock */

/*
 * ysThrInit - thread initialization
 *
 * DESCRIPTION
 * ysThrInit() must be called for Media Net to cooperate with a threaded
 * application.  If this routine is not called, then Media Net (and all
 * Media Net functions) behaves as if they belong to a single thread.
 *
 * It creates an idler thread that will be responsible for the execution
 * of all idlers.  Because this is a full-fledged thread, Media Net will
 * cooperate with the application program regardless of the extent of its
 * use of the rest of the Media Net API (provided the application thread
 * switches normally).
 *
 * The ysThrInit()/ysThrTerm() pair may be called more than once in any
 * given process.  However, they must not called from within more than one
 * concurrently executing thread at the same time (for example, within
 * two existing native threads).  Additional calls to ysThrInit() will 
 * increment a reference count and return silently leaving the previous 
 * initialization intact.
 * 
 * WARNING
 * Media Net is only thread-safe when cooperative threading is used.
 * Pre-emptive threading is not supported.
 */
void ysThrInit(CONST char *name);

/*
 * ysThrTerm - thread termination
 *
 * DESCRIPTION
 * ysThrTerm() must be called when Media Net threads are no longer being
 * used.  This causes the idler thread to exit.  Upon return, the process
 * is restored to a single-threaded state as far as Media Net is concerned.
 * This routine should be called from the same thread that ysThrInit() was
 * called from or unexpected behavior may result.
 */
void ysThrTerm(void);

/*
 * ysThrCreate - thread creation
 *
 * DESCRIPTION
 * ysThrCreate() creates a thread for execution.  The new thread begins
 * execution by calling the start function with the single argument arg
 * passed to it.  If the start function returns, it is equivalent to it
 * having called ysThrExit().
 *
 * The new thread will use a stack of stksz bytes.  If stksz is zero,
 * then a default size will be chosen.  Using a default stack size can
 * result in much better performance on some platforms.
 *
 * If the thread is successfully created, and thrid is non-null, the
 * thread id is written to the space pointed to by thrid.
 *
 * EXCEPTION
 * YS_EX_NOTINIT - if ysThrInit() was never called
 * YS_EX_FAILURE - if the creation of the thread failed
 */
void ysThrCreate(ysthr *thrid, void (*start)(dvoid *), dvoid *arg,
		 size_t stksz);

/*
 * ysThrExit - thread termination
 *
 * DESCRIPTION
 * ysThrExit() causes the current thread to terminate.  Resources associated
 * with the thread are released.
 *
 * EXCEPTION
 * YS_EX_NOTINIT - if ysThrInit() was never called
 */
void ysThrExit(void);

/*
 * ysThrSelf - get thread identifier
 *
 * DESCRIPTION
 * ysThrSelf() gets the thread identifier of the current thread and writes
 * it to thrid.  If ysThrInit() has not been called, this routine writes
 * nothing and returns a null pointer.  Thread identifiers are unique only
 * among active threads.  Once a thread terminates, a thread identifier may
 * be reused by the system.
 */
ysthr *ysThrSelf(ysthr *thrid);

/*
 * ysThrPrint - format a thread identifier
 *
 * DESCRIPTION
 * ysThrPrint() formats the thread identifier thrid in a way suitable for
 * printing.  The text is written to buf (up to len bytes which should be
 * 32 for reasonable thread ids).  If thrid is null, an empty string is
 * written.  The routine returns buf.
 */
char *ysThrPrint(ysthr *thrid, char *buf, size_t len);

/*
 * ysThrKeyCreate, ysThrKeyGet, ysThrKeySet - thread-specific data
 *
 * DESCRIPTION
 * These routines allow the identification of data that is specific to
 * individual threads within a process.  ysThrKeyCreate() creates a new
 * key that may be used to identify a certain type of data.  The key id
 * is global to the process.
 *
 * Once a key is created, each thread may bind a value to the key.  The
 * value is specific to the binding thread.  All threads initially have
 * a null value associated with the key.  ysThrKeySet() binds value to
 * the key for the calling thread, and returns the previously bound value.
 * ysThrKeyGet() returns the bound value for the key for the calling thread.
 *
 * These routines may be used for any data that potentially requires
 * threading.  They still behave correctly in processes that are
 * single-threaded as well as those that transition from being single-
 * threaded to multi-threaded and back.
 *
 * EXCEPTIONS
 * YS_EX_BADPARAM - if the key passed to ysThrKeyGet() or ysThrKeySet() is
 *                  not valid
 */
ysthrkey *ysThrKeyCreate(void);
dvoid    *ysThrKeyGet(ysthrkey *key);
dvoid    *ysThrKeySet(ysthrkey *key, dvoid *val);

/*
 * ysMtxCreate - create a mutex
 *
 * DESCRIPTION
 * ysMtxCreate() creates a mutex in the space pointed to by mtx.  All other
 * calls operating on mutexes require a mutex initialized by this routine.
 * A mutex can potentially have different types of behavior, specified by
 * type. Supported types are
 *
 * YSMTXTYPE_NORMAL - a basic, fast mutex
 * YSMTXTYPE_INTR - a mutex that works the same as the NORMAL mutex, with
 *   the additional behavior that it blocks out process-wide interrupts
 *   before acquiring the mutex (and unblocks them when the mutex is
 *   released).  This is useful for serializing execution with routines
 *   that may be invoked in a pre-emptive manner.
 *
 * Mutexes may successfully be used in single-threaded processes.
 */
#define YSMTXTYPE_NORMAL  ((sword) 1)
#define YSMTXTYPE_INTR    ((sword) 2)

void ysMtxCreate(ysmtx *mtx, sword type);

/*
 * ysMtxDestroy - destroy a mutex
 *
 * DESCRIPTION
 * ysMtxDestroy() destroys a mutex pointed to by mtx.  Any threads blocked
 * on the mutex at the time of its destruction may hang indefinitely.
 */
void ysMtxDestroy(ysmtx *mtx);

/*
 * ysMtxLock - lock a mutex
 *
 * DESCRIPTION
 * ysMtxLock() locks the mutex pointed to by mtx.  If the mutex is already
 * blocked, the calling thread blocks until the mutex becomes available.
 * When the routine returns, the mutex is locked and the calling thread
 * is the owner.  If an exception is raised while blocked, the mutex is
 * not locked.
 *
 * Recursive mutexes are not supported.  An attempt to reacquire a mutex
 * already held by the current thread will result in deadlock.
 *
 * EXCEPTIONS
 * YS_EX_DESTROYED - if the mutex was destroyed while blocked
 */
void ysMtxLock(ysmtx *mtx);

/*
 * ysMtxTryLock - try to lock a mutex
 *
 * DESCRIPTION
 * ysMtxTryLock() tries to lock the mutex pointed to by mtx.  If the mutex
 * is already locked, it returns FALSE.  Otherwise, the mutex is locked with
 * the calling thread as the owner, and the routine returns TRUE.
 *
 * Recursive mutexes are not supported.  An attempt to reacquire a mutex
 * already held by the current thread will always fail.
 */
boolean ysMtxTryLock(ysmtx *mtx);

/*
 * ysMtxUnlock - unlock a mutex
 *
 * DESCRIPTION
 * ysMtxUnlock() unlocks the mutex pointed to by mtx.  The mutex must be
 * currently locked by the calling thread.  If the mutex is not locked,
 * YS_EX_BADPARAM is thrown.  If the mutex is locked but not by the current
 * this is not detected and unpredictable behavior will result.
 *
 * If any other threads are waiting for the mutex, exactly one of them is
 * unblocked.
 */
void ysMtxUnlock(ysmtx *mtx);

/*
 * ysCondCreate - create a condition variable
 *
 * DESCRIPTION
 * ysCondCreate() creates a condition variable in the space pointed to
 * by cv.  All other calls operating on condition variables require a
 * condition variable initialized by this routine.
 *
 * Condition variables permit threads to atomically block until a
 * condition is satisfied.  The condition is tested under the protection
 * of a mutex.  While the condition is false, the thread blocks on the
 * condition variable.  When the condition variable is changed, the
 * thread wakes up and may retest the condition.  For example,
 *
 *    ysMtxLock(mtx);
 *    while (!cond)
 *      ysCondWait(cv, mtx);
 *    ysMtxUnlock(mtx);
 *
 * Condition variables may be successfully used in single-threaded processes.
 */
void ysCondCreate(yscv *cv);

/*
 * ysCondDestroy - destroy a condition variable
 *
 * DESCRIPTION
 * ysCondDestroy() destroys a condition variable pointed to by cv.  Any
 * threads blocked on the condition variable at the time of its destruction
 * may hang indefinitely.
 */
void ysCondDestroy(yscv *cv);

/*
 * ysCondWait - wait on a condition variable
 *
 * DESCRIPTION
 * ysCondWait() atomically releases the given mutex and blocks the calling
 * thread on the condition variable cv.  The blocked thread may be wakened
 * by ysCondSignal() or by ysThrSignal().  The return of ysCondWait() is
 * not, by itself, an indication that the condition has changed.  The
 * condition must be retested to protect against spurious wake ups.
 *
 * Upon return, ysCondWait() will reacquire the mutex.  This is true even
 * if an exception is signalled.
 */
void ysCondWait(yscv *cv, ysmtx *mtx);

/*
 * ysCondSignal, ysCondBroadcast - signal a condition variable
 *
 * DESCRIPTION
 * ysCondSignal() unblocks one thread that is blocked on the condition
 * variable cv.  ysCondBroadcast() unblocks all threads that are blocked
 * on the condition variable cv.
 */
void ysCondSignal(yscv *cv);
void ysCondBroadcast(yscv *cv);

/*
 * ysThrSignal - signal a thread
 *
 * DESCRIPTION
 * ysThrSignal() will cause the exception exid to be synchronously raised
 * the next time the indicated thread reaches a signalling point.  Signalling
 * points are defined as any point that ultimately blocks the thread waiting
 * for a semaphore to be triggered.  Many library routines block on semaphores
 * for synchronization and inherit the property of being a signalling point.
 * Blocking on a mutex is not a signalling point.  If thrid is null, the
 * current thread is the one signalled.
 */
void ysThrSignal(ysthr *thrid, CONST ysid *exid);

/*
 * PRIVATE DECLARATIONS
 */
#define YSTHRID_MAX  32

/* DISABLE check_naming */
struct ysthr
{
  ub1 id[YSTHRID_MAX];
};

struct ysmtx
{
  sword   type;                                             /* type of mutex */
  boolean locked;                                          /* TRUE if locked */
  yslst  *waiters;                    /* list of waiters (if multi-threaded) */
};

struct yscv
{
  ub4    val;                               /* value of conditional variable */
  ysmtx  mtx;                               /* mutex to protect access to cv */
  yslst *waiters;                     /* list of waiters (if multi-threaded) */
};
/* ENABLE check_naming */

EXTC_END
#endif /* YSTHR_ORACLE */
