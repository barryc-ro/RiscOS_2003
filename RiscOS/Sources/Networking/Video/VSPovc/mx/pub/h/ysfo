/* Copyright (c) 1996 by Oracle Corporation.  All Rights Reserved.
 *
 * ysfo.h - Fixed-Object Memory Manager
 *
 * DESCRIPTION
 * This package implements a fast memory manager for pools of fixed-size
 * objects.  These objects are allocated in chunks from a real memory
 * manager, and then can be individually allocated and freed extremely
 * rapidly.
 *
 * THREAD SAFETY
 * The user of this package is responsible for coordinating access to
 * the pool among multiple threads.
 */

#ifndef YSFO_ORACLE
#define YSFO_ORACLE

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif

EXTC_START

/*
 * ysFOCreate - create a fixed-object pool
 *
 * DESCRIPTION
 * ysFOCreate() initializes the fixed-object pool pointed to by fop.  The
 * size of each object is given by osz, where 0 < osz <= 4096.  hp is a
 * heap descriptor used to allocate memory as the pool requires.  The
 * tag argument is passed to ysmAlloc().
 */
void ysFOCreate(ysfop *fop, size_t osz, ysmhp *hp, CONST char *tag);

/*
 * ysFODestroy - destroy a fixed-object pool
 *
 * DESCRIPTION
 * ysFODestroy() destroys the fixed-object pool pointed to by fop.  The
 * memory allocated by the pool is freed using ff, a deallocation function.
 * If af was null, the pool is freed from the global heap and ff is ignored.
 * Destruction of the pool implicitly destroys all elements allocated from
 * the pool.
 */
void ysFODestroy(ysfop *fop);

/*
 * ysFOAlloc - allocate object
 *
 * DESCRIPTION
 * ysFOAlloc() allocates a single fixed-size object from the fixed-object
 * pool denoted by fop.  A pointer to the object is returned.  The pointer
 * return is naturally aligned for the size of the object.  If this is not
 * sufficient alignment, the size of the object specified to ysFOInit()
 * should be increased as necessary.  If the object could not be allocated,
 * either a null is returned or an exception thrown, depending on the
 * behavior of the underlying allocator.
 */
dvoid *ysFOAlloc(ysfop *fop);

/*
 * ysFOFree - free an object
 *
 * SYNOPSIS
 * void ysFOFree(ysfop *fop, dvoid *ptr);
 *
 * DESCRIPTION
 * ysFOFree() frees a single fixed-size object back to the fixed-object
 * pool denoted by fop.  If not freed, all allocated objects belonging
 * to a pool are automatically freed when the pool is destroyed.
 */
#define ysFOFree(fop, ptr) \
  (*((dvoid **) (ptr)) = (fop)->chn, (fop)->chn = (ptr))

/*
 * PRIVATE DECLARATIONS
 */
/* DISABLE check_naming */
struct ysfop
{
  dvoid *chn;                                   /* head of free object chain */
  ub1   *stash;                        /* array of never-before-used objects */
  sword  scnt;                             /* number of objects in the stash */
  sword  ccnt;                             /* number of objects in the chunk */

  size_t osz;                                           /* size of an object */
  ub4    csz;                                /* number of objects in a chunk */
  ub4    mcsz;                                         /* maximum chunk size */
  ysmhp *hp;                                                         /* heap */
  CONST char *tag;                                         /* allocation tag */
};
/* ENABLE check_naming */

EXTC_END
#endif /* YSFO_ORACLE */
