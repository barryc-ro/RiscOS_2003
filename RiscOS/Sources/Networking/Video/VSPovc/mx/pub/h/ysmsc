/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * ysmsc.h - Miscellaneous Utility Functions
 */

#ifndef YSMSC_ORACLE
#define YSMSC_ORACLE

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif

EXTC_START

/*
 * Alignment
 *
 * SYNOPSIS
 * ub4 ysRoundVal(ub4 val, size_t boundary);
 * ub4 ysTruncVal(ub4 val, size_t boundary);
 *
 * DESCRIPTION
 * ysRoundVal() rounds an integer up to the next multiple of boundary.
 * ysTruncVal() rounds an integer down to the next multiple of boundary.
 */
#define ysRoundVal(v, b)  (((v) + ((b)-1)) & ~((b)-1))
#define ysTruncVal(v, b)  ((v) & ~((b)-1))

/*
 * ysChecksum - compute a checksum
 *
 * DESCRIPTION
 * ysChecksum() computes a ones-complement, sixteen-bit checksum over
 * len bytes of data starting at buf.  buf may be unaligned.  The result
 * is the computed checksum.
 *
 * WARNING
 * Although it is possible to store the checksum separately and then
 * recompute and compare, certain problems can result from this technique
 * that are caused by the fact that ones-complement notation has two forms
 * of zero.  To avoid this, the recommended form of usage is to embed the
 * checksum into the buffer itself.  The following steps will accomplish
 * this:
 *
 *    1) When preparing the checksum, store a zero where the checksum will
 *       eventually go.
 *    2) Compute the checksum.  Store the result in the appropriate place
 *       within the buffer.
 *    3) To validate the checksum, simply recompute the checksum over the
 *       entire buffer.  If the result is zero, the buffer is valid.
 *
 * (The checksum must be located at an even offset into the buffer.)
 *
 * NOTES
 * This checksum algorithm is exactly the IP standard checksum.
 */
ub2 ysChecksum(ub1 *buf, size_t len);

/*
 * ysRECompile, ysREFree, ysREMatch - regular expression manipulation
 *
 * DESCRIPTION
 * ysRECompile() compiles a regular expression and returns a compiled
 * form of that expression suitable for usage with ysREMatch().  If
 * glob is FALSE, the regular expressions understood are the same as
 * those understood by the UNIX command, egrep (except braces may be
 * used instead of + and ?).  If glob is TRUE, the regular expression
 * is instead understood according to the lexical conventions of filename
 * subsitution.
 *
 * If there is an error during compilation, a null pointer is returned.
 *
 * ysREFree() frees a compiled regular expression previously returned
 * by ysRECompile().
 *
 * ysREMatch() matches a string against a regular expression.  If embedded
 * is TRUE, the routine returns TRUE if the string contains the pattern.
 * If embedded is FALSE, the routine returns TRUE only if the string matches
 * the pattern; it is effectively as if the RE begins with '^' and trails
 * with '$', and these characters (if they actually appear in the RE in the
 * appropriate places) are ignored.
 *
 * What follows is a brief but not authoritative summary of the rules
 * for normal regular expressions:
 *
 *   Expression    Meaning
 *   c             the character c where c is not \ . * [ | { ( ) ^ $
 *   \c            the character c where c is any character
 *   ^             the beginning of the string
 *   $             the end of the string
 *   .             any character
 *   [s]           any character in the set s, where s is a sequence
 *                 of characters and/or a range of characters, as in [c-c]
 *   [^s]          any character not in the set s, where s is as defined above
 *   r*            zero or more successive occurrences of the regular
 *                 expression r.  The longest leftmost match is chosen.
 *   rx            the occurrence of regular expression r followed by the
 *                 occurrence of regular expression x
 *   r{m,n}        any number of m through n successive occurrences of the
 *                 regular expression r.  The regular expression r{m} matches
 *                 exactly m occurrences; r{m,} matches at least m occurrences
 *   (r)           the regular expression r
 *   R|X           the full regular expression R OR the full regular
 *                 expression X.  A full regular expression is the
 *                 concatenation of several regular expressions.  Thus,
 *                 'ab|cd' matches the strings "ab" and "cd", but not "abd".
 *                 To bound the limits of the OR operator, enclose both
 *                 operands in parentheses, as in 'a(b|c)d'.
 *
 * What follows is a brief summary of the rules for filename-style regular
 * expressions:
 *
 *   Expression    Meaning
 *   c             the character c where c is not * ? [ {
 *   *             equivalent to the RE ".*" above
 *   ?             equivalent to the RE "." above
 *   [s]           equivalent to the RE "[s]" above
 *   {RE1,RE2,...} equivalent to the RE "(RE1|RE2...)"
 */
typedef struct ysre ysre;                   /* regular expression descriptor */

ysre   *ysRECompile(CONST char *regexp, boolean glob);
void    ysREFree(ysre *re);
boolean ysREMatch(ysre *re, CONST char *str, boolean embedded);

/*
 * ysRand - random number generator
 *
 * DESCRIPTION
 * ysRand() generates pseudo-random numbers.  The seed must be initialized
 * before calling this routine.  A fine source for results that will differ
 * from execution to execution is ysClock().
 *
 * When ysRand() is called, a random 32-bit number is generated, and the
 * seed argument is modified to prepare for the next number in the sequence.
 * All the bits generated by ysRand() are usable.
 */
ub4 ysRand(sysb8 *seed);

EXTC_END
#endif /* YSMSC_ORACLE */
