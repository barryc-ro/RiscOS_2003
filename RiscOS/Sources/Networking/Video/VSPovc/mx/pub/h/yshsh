/* Copyright (c) 1995 by Oracle Corporation.  All Rights Reserved.
 *
 * yshsh.h - Hash Table Manipulation
 */

#ifndef YSHSH_ORACLE
#define YSHSH_ORACLE

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YSM_ORACLE
#include <ysm.h>
#endif

EXTC_START

typedef struct yshsh yshsh;                                    /* hash table */

/*
 * ysHshCreate - create a hash table
 *
 * DESCRIPTION
 * ysHshCreate() creates a hash table.  rows is the minimum number of rows
 * that should be in the hash table.  It does not need to be prime.
 *
 * The hashfunc is a function that should be used to compute the hash over
 * the key.  It is passed a key (and the key's size).  The function should
 * return a hash value between 0 and max-1.  ysHshKey() is suggested for
 * the hashfunc as a reasonable generic hash function (and will be picked
 * if null is passed for this value).
 *
 * The eqfunc is a function that tests to see whether a given element
 * matches the given key.  elm is an element that exists in the hash
 * table and key (and keysz) specifies a key.  elm should be tested to
 * see whether the key matches and eqfunc is expected to return zero
 * if there is match, non-zero otherwise.  If eqfunc is null, memcmp()
 * will be chosen.
 *
 * The delfunc is a function that is used to free the elements still
 * in the hash table when ysHshDestroy() is called.  If no delfunc is
 * needed, a null pointer may be passed.
 */
typedef sword (*yshsheq)(dvoid *elm, dvoid *key, size_t keysz);
typedef ub4   (*yshash)(CONST dvoid *key, size_t keysz, ub4 max);

yshsh *ysHshCreate(ub4 rows, yshash hashfunc, yshsheq eqfunc, ysmff delfunc);

/*
 * ysHshDestroy - destroy a hash table
 *
 * DESCRIPTION
 * ysHshDestroy() destroys a hash table previously created by ysHshCreate().
 * For each element still in the hash table, the delfunc passed to
 * ysHshCreate() is invoked (unless it is null).
 */
void   ysHshDestroy(yshsh *tbl);

/*
 * ysHshCount - return number of elements in table
 *
 * DESCRIPTION
 * ysHshCount() returns the current number of elements in the table.
 */
ub4 ysHshCount(yshsh *tbl);

/*
 * ysHshIns - insert element into a hash table
 *
 * DESCRIPTION
 * ysHshIns() inserts an element into a hash table.  key and keysz specify
 * the key that will allow this element to be located later.  val is the value
 * of the element to insert.  Duplicates are not detected by this routine.
 * ysHshFind() may be used first to decide whether there is a duplicate key
 * in the table.
 */
void   ysHshIns(yshsh *tbl, dvoid *key, size_t keysz, dvoid *val);

/*
 * ysHshRem - remove element from a hash table
 *
 * DESCRIPTION
 * ysHshRem() removes an element from a hash table.  key and keysz specify
 * the key that is used to locate the element.  The element is removed from
 * the hash table and its value is returned.  If the element is not found,
 * a null pointer is returned.
 */
dvoid *ysHshRem(yshsh *tbl, dvoid *key, size_t keysz);

/*
 * ysHshFind - find element in hash table
 *
 * DESCRIPTION
 * ysHshFind() finds an element in a hash table.  key and keysz specify
 * the key that is used to locate the element.  If the element is found,
 * its value is returned.  Otherwise, a null pointer is returned.
 */
dvoid *ysHshFind(yshsh *tbl, dvoid *key, size_t keysz);

/*
 * ysHshWalk - walk a hash table
 *
 * DESCRIPTION
 * ysHshWalk() walks a hash table.  The callback function walkcb is invoked
 * once for each element in the hash table, and a pointer to the element is
 * passed to the callback.  ysHshWalk() continues to walk to the hash table
 * until all elements have been processed, or the callback routine returns
 * FALSE.  Thus, it should return TRUE as long as processing should continue.
 * Remember that the order of elements in a hash table is effectively random.
 *
 * WARNING:  Do not modify the hash table in the callback routine during a
 * hash walk.  Removing elements during the walk will almost certainly lead
 * to a memory access violation.  See ysHshFirst() below for an alternative
 * solution.
 */
typedef boolean (*yshshwcb)(dvoid *usrp, dvoid *elm);
void ysHshWalk(yshsh *tbl, yshshwcb walkcb, dvoid *usrp);

/*
 * ysHshFirst, ysHshNext, ysHshRemByPos - traverse a hash table
 *
 * DESCRIPTION
 * ysHshFirst() locates the "first" element in the hash table.  The value
 * of the element is returned, and the hpos argument is initialized to its
 * location.  The hash table may be traversed by repeatedly calling
 * ysHshNext(), passing the same hpos descriptor initialized with
 * ysHshFirst().
 *
 * Unlike ysHshWalk(), the "current" element (that being the one just
 * returned) may be removed from the hash table.  It may be removed
 * with ysHshRemByPos().
 *
 * Once ysHshFirst() or ysHshNext() returns null, the position descriptor
 * is no longer valid.  Also, once the hash table is modified in any way
 * other than using ysHshRemByPos(), the position descriptor is no longer
 * valid.  You must call ysHshFirst() to re-initialize the position
 * descriptor (and start the traverse over).
 *
 * EXAMPLES
 * yshshpos hpos;
 *
 * for (v = ysHshFirst(tbl, &hpos); v; v = ysHshNext(tbl, &hpos))
 *   ysHshRemByPos(tbl, &hpos);
 *
 * while (v = ysHshFirst(tbl, &hpos))
 *     ysHshRem(tbl, v->key, v->keysz);
 */
typedef struct yshshpos yshshpos;

dvoid *ysHshFirst(yshsh *tbl, yshshpos *hpos);
dvoid *ysHshNext(yshsh *tbl, yshshpos *hpos);
void ysHshRemByPos(yshsh *tbl, yshshpos *hpos);

/*
 * ysHshKey - generic hash key computation
 *
 * DESCRIPTION
 * ysHshKey() computes a hash on the given key and returns a hash value
 * between 0 and max - 1.
 */
ub4    ysHshKey(CONST dvoid *key, size_t keysz, ub4 max);

/*
 * PRIVATE DECLARATIONS
 */
struct yshshpos
{
  ub4   idx;
  ysle *le;
};

EXTC_END
#endif /* YSHSH_ORACLE */
