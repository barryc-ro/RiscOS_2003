/* Copyright (c) 1995 by Oracle Corporation. All Rights Reserved.
 *
 * ysx.h - Data Encode & Decode
 */

#ifndef YSX_ORACLE
#define YSX_ORACLE

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YS_ORACLE
#include <ys.h>
#endif

EXTC_START

/*
 * Type Definitions
 */
typedef struct ysx ysx;                          /* encode/decode descriptor */

externref ysidDecl(YS_EX_ENDOFDATA);                /* end-of-data exception */
externref ysidDecl(YS_EX_ENCODEERROR);  /* encode error from stream callback */

/*
 * ysxDecode, ysxDecEnd - decode a buffer vector
 *
 * DESCRIPTION
 * ysxDecode() prepares to decode a buffer vector described by bv and nbv.
 * It returns a descriptor that should be used during the decode process.
 *
 * The routines ysxGetUB1(), ysxGetUB2(), ysxGetUB4(), ysxSkip(), ysxAlign(),
 * ysxCopy() may all be used during decode to retrieve the contents of the
 * buffer.  Attempts to decode more data than remains in the decode buffer
 * will cause the exception YS_EX_ENDOFDATA to be raised.
 *
 * ysxDecEnd() should be called to finish the decoding process.  It frees
 * the decode descriptor.
 *
 * The parameter byteorder is ignored.  The data being decoded must have
 * been previously encoded using ysxEncode().
 *
 * See also ysxDecodeFromStream().
 *
 * WARNING: The length of all elements in the buffer vector except the last
 * one MUST BE A MULTIPLE OF SIXTEEN.
 */
ysx *ysxDecode(sword byteorder, ysbv *bv, sword nbv);
void ysxDecEnd(ysx *x);

/*
 * ysxGetPos - get current position in buffer vector
 *
 * DESCRIPTION
 * ysxGetPos() gets the current position of the fetch pointer, which points
 * to the next unread piece of data in the original buffer vector used to
 * create the descriptor.  *idx is set to the offset in the buffer vector
 * to the current buffer element, and *off is set to the offset in the
 * buffer in that element.  Thus, bv[*idx]->buf + *off is the value of the
 * fetch pointer.
 */
void ysxGetPos(ysx *x, sword *idx, size_t *off);

/*
 * ysxGetUB1, ysxGetUB2, ysxGetUB4, ysxGetSB8 - get integers
 *
 * DESCRIPTION
 * ysxGetUB1() gets a one-byte integer from the decode buffer.  Similarly,
 * ysxGetUB2() and ysxGetUB4() get two- and four-byte integers, respectively.
 * ysxGetSB8() gets an eight-byte integer.  All of these routines advance the
 * fetch pointer past the data that is read.
 */
ub1 ysxGetUB1(ysx *x);
ub2 ysxGetUB2(ysx *x);
ub4 ysxGetUB4(ysx *x);
void ysxGetSB8(ysx *x, sysb8 *val);

/*
 * ysxSkip - skip data
 *
 * DESCRIPTION
 * ysxSkip() skips len bytes in the decode buffer.
 */
void ysxSkip(ysx *x, size_t len);

/*
 * ysxEncode, ysxEncEnd - encode a buffer vector
 *
 * DESCRIPTION
 * ysxEncode() prepares to encode a buffer vector.  len is an initial
 * estimate of the amount of data to be encoded.  len may be zero if
 * no guess can be made.  hp is the heap where memory for the buffers
 * should be obtained.  ysxEncode() returns a descriptor that should be
 * used during the encoding process.
 *
 * The routines ysxPutUB1(), ysxPutUB2(), ysxPutUB4(), ysxAlign(), and
 * ysxCopy() may all be used during encode to write the contents of the
 * buffer.
 *
 * ysxEncEnd() should be called to finish the encoding process.  It
 * returns the newly created buffer vector in *bv and *nbv.  The encode
 * descriptor itself is freed.
 *
 * The buffer vector itself may be freed using ysBvFree() after the buffer
 * vector is no longer needed.  Be sure to pass the same heap to ysBvFree()
 * that was previously passed to ysxEncode() to create the buffer vector.
 *
 * See also ysxEncodeToStream().  For stream encodes, the bv and nbv
 * arguments to ysxEncEnd() are ignored.  Because a final callback may be
 * made to write data, it is possible for this routine to raise
 * YS_EX_ENCODEERROR.  The descriptor will still be freed.
 */
ysx *ysxEncode(size_t len, ysmhp *hp);
void ysxEncEnd(ysx *x, ysbv **bv, sword *nbv);

/*
 * ysxPutUB1, ysxPutUB2, ysxPutUB4, ysxPutSB8 - put integers
 *
 * DESCRIPTION
 * ysxPutUB1() writes a one-byte integer into the encode buffer.  Similarly,
 * ysxPutUB2() and ysxPutUB4() write two- and four-byte integers, repectively.
 * ysxPutSB8() writes an eight-byte integer.  All of these routines advance
 * the write pointer past the data written.
 */
void ysxPutUB1(ysx *x, ub1 val);
void ysxPutUB2(ysx *x, ub2 val);
void ysxPutUB4(ysx *x, ub4 val);
void ysxPutSB8(ysx *x, sysb8 *val);

/*
 * ysxCopy - copy data
 *
 * DESCRIPTION
 * ysxCopy() may be used both during encode and during decode.  During
 * encode, ysxCopy() appends the given buffer of len bytes to the encode
 * buffer.  During decode, ysxCopy() copies the next len bytes of the
 * decode buffer into buf.  The read or write pointer is advanced past
 * the data.
 */
void ysxCopy(ysx *x, ub1 *buf, size_t len);

/*
 * ysxAlign - align to a boundary
 *
 * DESCRIPTION
 * ysxAlign() may be used both during encode and during decode.  ysxAlign()
 * aligns the read or write pointer to the offset boundary specified.  This
 * is relative to the beginning of the buffer vector.  If there is no more
 * data in the decode buffer, an exception is not raised, but one will be
 * on the next get attempt.
 */
void ysxAlign(ysx *x, sword boundary);

/*
 * ysxDecodeFromStream - decode from a stream
 *
 * ysxDecodeFromStream() prepares to decode data that is coming from a stream.
 * This is useful where all the data is not available in memory at the same
 * time (as for large data streams).
 *
 * It returns a descriptor that should be used during the decode process,
 * which should proceed exactly as for ysxDecode().  ysxGetPos() is not a
 * supported operation on streams.
 *
 * The data to be decoded is obtained by invoking the getbufcb callback to
 * get the next buffer.  The bv passed to the callback should be set such
 * that buf points to the location where the next chunk of data is to come
 * from, and len should indicate the size of the buffer.  Note that the bv
 * passed to the callback is the same one passed to ysxDecodeFromStream().
 * The callback is invoked as soon as the first decode attempt is tried,
 * so the bv need not be initialized when calling ysxDecodeFromStream().
 *
 * The callback should indicate that the end of the stream has been reached
 * by returning FALSE, instead of TRUE.  (Do not return data and FALSE at
 * the same time, or the data will be ignored.)  Attempts to read past the
 * end of the stream will, as usual, throw the exception YS_EX_ENDOFDATA.
 *
 * WARNING: The length of the buffer returned by the callback for all
 * segments in the stream other than the last one MUST BE A MULTIPLE OF
 * SIXTEEN.
 */
typedef boolean (*ysxcb)(ysbv *bv, dvoid *usrp);
ysx *ysxDecodeFromStream(ysxcb getbufcb, ysbv *bv, dvoid *usrp);

/*
 * ysxEncodeToStream - encode to a stream
 *
 * ysxEncodeToStream() prepares to encode data to a stream.  This is useful
 * when a large amount of data is to be encoded and cannot be contained in
 * memory all at once.
 *
 * It returns a descriptor that should be used during the encode process,
 * which should proceed exactly as for ysxEncode().
 *
 * The data to be encoded is written to the buffer described the bv passed
 * to ysxEncodeToStream().  Once the buffer is full, the callback function
 * is invoked to give it the opportunity to process the buffer.  The callback
 * function may choose to alter the buffer pointer at this time.  In any
 * case, upon return from the callback, encoding continues.
 *
 * Encode continues until either a) the callback function returns FALSE,
 * at which the time the encode routine which caused the callback will
 * throw YS_EX_ENCODEERROR, or b) ysxEncEnd() is called, in which case one
 * final callback is made to dispose of the remaining data if any (the
 * len value may be altered during this callback to reflect the actual
 * amount of data in the buffer), after which any memory allocated for
 * the bv should be freed.
 *
 * WARNING: The length of the buffer provided for encoding MUST BE A
 * MULTIPLE OF SIXTEEN.
 */
ysx *ysxEncodeToStream(ysxcb putbufcb, ysbv *bv, dvoid *usrp);

EXTC_END
#endif /* YSX_ORACLE */
