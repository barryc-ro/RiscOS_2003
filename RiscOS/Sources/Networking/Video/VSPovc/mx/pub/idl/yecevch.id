/* Copyright (c) Oracle Corporation 1995.  All Rights Reserved. */

/*
  NAME
    yecevent.idl
  DESCRIPTION
    idl for CORBA COSS Compatible Event Channel
  PUBLIC FUNCTIONS
    <x>
  PRIVATE FUNCTIONS
    <x>
  NOTES
    <x>
  MODIFIED   (MM/DD/YY)
    dbrower   11/ 7/95 -  created.
    dbrower   07/12/96 -  remove shutdown.  use mnorbadm instead.
*/

#ifndef YOSTD_ORACLE
#include "yostd/idl"
#endif

// EventComm

module yecec {

  exception Disconnected{};

  // added until we can block the pull in the server.
  // practically, pull is the same as try_pull for us, for now.
  exception NothingToPull{};

  interface PushCons {
    void push( in any data) raises(Disconnected);
    void disconnect();
  };

  interface PushSupp {
    void disconnect_push_supp();
  };

  interface PullSupp {
    any pull () raises(Disconnected, NothingToPull );
    any try_pull (out boolean has_event)
      raises(Disconnected);
    void disconnect();
  };

  interface PullCons {
    void disconnect();
  };

};

// EventChannelAdmin

module yeceCa {

  exception AlreadyConnected{};
  exception TypeError{};

  interface ProxyPushCons : yecec::PushCons {

    void connect_push_supp(in yecec::PushSupp push_supp)
      raises(AlreadyConnected);
  };

  interface ProxyPullSupp: yecec::PullSupp {

    void connect_pull_cons( in yecec::PullCons pull_cons)
      raises(AlreadyConnected);
  };

  interface ProxyPullCons: yecec::PullCons {
    
    void connect_pull_supp( in yecec::PullSupp pull_supp)
      raises(AlreadyConnected,TypeError);
  };

  interface ProxyPushSupp: yecec::PushSupp {

    void connect_push_cons( in yecec::PushCons push_cons )
      raises(AlreadyConnected, TypeError);
  };

  interface ConsAdm {
    ProxyPushSupp obtain_push_supp();
    ProxyPullSupp obtain_pull_supp();
  };

  interface SuppAdm {
    ProxyPushCons obtain_push_cons();
    ProxyPullCons obtain_pull_cons();
  };

  interface EventChannel {
    ConsAdm for_consumers();
    SuppAdm for_suppliers();
    void destroy();
  };

  typedef sequence <EventChannel> eventChannelList;

  interface Factory {

    readonly attribute eventChannelList channels;
    readonly attribute Factory self;

    EventChannel create();
  };
};

// TypedEventComm

module yeceTec {

  interface TypedPushCons : yecec::PushCons {
    Object get_typed_cons();
  };

  interface TypedPullSupp : yecec::PullSupp {
    Object get_typed_supp();
  };
};

// TypedEventChannelAdmin

module yeceTeca {

  exception InterfaceNotSupported {};
  exception NoSuchImplementation {};

  interface TypedProxyPushCons :
    yeceCa::ProxyPushCons,
    yeceTec::TypedPushCons {};

  interface TypedProxyPullSupp :
    yeceCa::ProxyPullSupp,
    yeceTec::TypedPullSupp {};

  interface TypedSuppAdm :
    yeceCa::SuppAdm {

      TypedProxyPushCons obtain_typed_push_cons
	(in ysid supported_interface)
	  raises(InterfaceNotSupported);

      yeceCa::ProxyPullCons obtain_typed_pull_cons
	(in ysid uses_interface)
	  raises(NoSuchImplementation);
  };

  interface TypedConsAdm :
    yeceCa::ConsAdm {

      TypedProxyPullSupp obtain_typed_pull_supp
	(in ysid supported_interface)
	  raises(InterfaceNotSupported);

      yeceCa::ProxyPushSupp obtain_typed_push_supp
	(in ysid uses_interface)
	  raises(NoSuchImplementation);
  };

  interface TypedEventChannel {

    TypedConsAdm for_consumers();
    TypedSuppAdm for_suppliers();

  };

  typedef sequence <TypedEventChannel> typedEventChannelList;

  interface Factory {

    readonly attribute typedEventChannelList channels;
    readonly attribute Factory self;

    TypedEventChannel create();
  };

};



