//////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995 by Oracle Corporation. All Rights Reserved.
//
// NAME
// yridl.idl - CORBA 2.0 IDL interface to the Interface Repository
//
// NOTES
// Currently, this is a readonly interface. 
//
// Some of the simple types used by this interface are defined in 
// yrtypidl.idl so people can pick them up without pulling in this monster.
//
//////////////////////////////////////////////////////////////////////////

#ifndef YRCORBA_ORACLE
#define YRCORBA_ORACLE

#ifndef YRTYPIDL_ORACLE
#include "yrtypidl/i"
#endif

module CORBA
{
  /////
  // CORBA::DefinitionKind - enumerates all the possible kinds of IFR
  //   objects. Any object returned by these interfaces will be of one
  //   of these kinds, except for dk_none and dk_all.
  /////
  enum DefinitionKind
  {
    dk_none,
    dk_all,                // Used for search criteria
    dk_Attribute, 
    dk_Constant, 
    dk_Exception, 
    dk_Interface,
    dk_Module, 
    dk_Operation, 
    dk_Typedef,            // Abstract, signifies a type 
    dk_Alias,              // A typedef in the IDL sense
    dk_Struct, 
    dk_Union,
    dk_Enum, 
    dk_Primitive, 
    dk_String, 
    dk_Sequence, 
    dk_Array, 
    dk_Repository
  };

  /////
  // CORBA::IRObject - abstract base type of all the specialized objects
  //   in the repository. Literally, a repository object.
  // Operations:
  //   none
  // Attributes:
  //   def_kind - CORBA::DefinitionKind of this object.
  /////
  interface IRObject
  {
    exception BadObj { };     /* extension */
    readonly attribute DefinitionKind def_kind;
  };

  interface Repository;
  interface Container;

  /////
  // CORBA::Contained - An IFR object that is contained within another.
  //   e.g. all objects corresponding to named types are at least contained
  //   contained within the repository, and may be contained in an
  //   interface or module.
  // Operation:
  //   describe     Returns a CORBA::Contained::Description of the this
  //                object. The <value> field of the description is a type
  //                specific description, corresponding to the <kind>. e.g.
  //                for a module, the <value> is a CORBA::ModuleDescription.
  // Attributes:
  //   id           Repository id of this object. Assigned by IDL compiler when
  //                the corresponding IDL file was compiled.
  //   name         The simple or leaf name of this object. For example, if 
  //                this object is interface A in module B, <name> is "A".
  //   version      The version of this object. Assigned by the IDL compiler
  //                when the corresponding IDL file was compiled.
  //   defined_in   The CORBA::Container in which this object is defined.
  //                For an object which is contained within a Container as
  //                the result of inheritance, <defined_in> refers back to
  //                the container in which this object was originally defined,
  //                not to the derived container.
  //   absolute_name 
  //                The fully scoped name of this object. For interface
  //                B in module A, this is "::A::B".
  //   containing_repository
  //                Refers back to the repository in which this
  //                object is contained.
  /////
  interface Contained : IRObject
  {
    readonly attribute RepositoryId id;
    readonly attribute Identifier name;
    readonly attribute VersionSpec version;

    readonly attribute Container defined_in;
    readonly attribute ScopedName absolute_name;
    readonly attribute Repository containing_repository;

    struct Description
    {
      DefinitionKind kind;
      any value;
    };

    Description describe();

  }; // Contained

  interface ModuleDef;
  interface ConstantDef;
  interface IDLType;
  interface StructDef;
  interface UnionDef;
  interface EnumDef;
  interface AliasDef;
  interface InterfaceDef;

  typedef sequence <Contained> ContainedSeq;
  typedef sequence <InterfaceDef> InterfaceDefSeq;

  /////
  // CORBA::StructMember - completely defines one field of a struct type.
  //
  // Fields:
  //   name      Simple name of this field.
  //   type      TypeCode of this field, e.g. TypeCode of the type_def.
  //   type_def  Ref to IFR object which describes the field type
  /////
  struct StructMember
  {
    Identifier name;
    TypeCode type;
    IDLType type_def;
  };
  typedef sequence <StructMember> StructMemberSeq;

  /////
  // CORBA::UnionMember - Completely defines one member of a union type
  //
  // Fields:
  //   name      Simple name of this field.
  //   label     Value of the union discriminator which yields this field.
  //             The <_type> field of the any is always the same as the
  //             union's discriminator type.
  //   type      TypeCode of this field, e.g. TypeCode of the type_def.
  //   type_def  Ref to IFR object which describes the field type
  //
  // The default case of a union is signified by a lable of type octet
  // and a value of 0.
  /////
  struct UnionMember
  {
    Identifier name;
    any label;
    TypeCode type;
    IDLType type_def;
  };
  typedef sequence <UnionMember> UnionMemberSeq;

  typedef sequence <Identifier> EnumMemberSeq;

  /////
  // CORBA::Container - An IFR object which defines a scope, such as the
  //   repository, an interface, or a module.
  //
  // Operations
  //   lookup        Locate a definition relative to this container, given
  //                 a scoped name. If the scoped name begins with "::", the
  //                 search starts at the enclosing repository. If no match
  //                 is found, a NIL object reference is returned.
  //                 Example: If there exists a ::A object and a ::B::A
  //                 object, invoking lookup(Bobj, "::A") would find ::A,
  //                 lookup(Bobj, "A") would find ::B::A, and 
  //                 lookup(Bobj, "B::A") would fail unless there exists an
  //                 object ::B::B::A.
  //   contents      Returns the contents of this container, possibly 
  //                 constrained. If <limit_type> is CORBA::dk_all, all 
  //                 contents are returned; otherwise, only content items
  //                 matching <limit_type> are returned (all attributes,
  //                 all interfaces, etc.). If <exclude_inherited> is TRUE,
  //                 items in this container as a result of inheritance are
  //                 not returned.
  //   lookup_name   Locate a definition within this object or within the
  //                 objects contained by this object. <levels_to_search>
  //                 determines whether or not the search goes into objects
  //                 contained by this object; set to -1 to search all,
  //                 set to 1 to limit to just this object. <limit_type>
  //                 and <exclude_inherited> are as for contents.
  //   describe_contents
  //                 A combination of describe and contents: For each item
  //                 returned by the contents operations, it returns a
  //                 Container::Description. The <value> of the Description
  //                 is the same as the <value> that would be returned by
  //                 calling CORBA::Contained::describe on <contained_object>.
  //                 <limit_type> and <exclude_inherited> are as for contents.
  // Attributes
  //   none
  /////
  interface Container : IRObject
  {
    Contained lookup( in ScopedName search_name);
    ContainedSeq contents( in DefinitionKind limit_type,
	  in boolean exclude_inherited);
    ContainedSeq lookup_name( in Identifier search_name,
	  in long levels_to_search,
	  in DefinitionKind limit_type,
	  in boolean exclude_inherited);

    struct Description
    {
      Contained contained_object;
      DefinitionKind kind;
      any value;
    };

    typedef sequence<Description> DescriptionSeq;

    DescriptionSeq describe_contents( in DefinitionKind limit_type,
	  in boolean exclude_inherited,
	  in long max_returned_objs);

  }; // Container


  /////
  // CORBA::IDLType - Abstract interface describing a type, whether named,
  //   anonymous, or primitive.
  //
  // Operations
  //   none
  // Attributes
  //   type  The TypeCode for this type. Specific kinds of types will have
  //         other attributes; this is the only one they all share.
  /////
  interface IDLType : IRObject
  {
    readonly attribute TypeCode type;
  };

  interface PrimitiveDef;
  interface StringDef;
  interface SequenceDef;
  interface ArrayDef;

  /////
  // CORBA::PrimitiveKind - Enumerates the kinds of primitive types in IDL.
  //   CORBA::pk_longlong is an Oracle-specific extension.
  /////
  enum PrimitiveKind
  {
    pk_null, 
    pk_void,
    pk_short,
    pk_long,
    pk_ushort,           // unsigned short
    pk_ulong,            // unsigned long
    pk_float,
    pk_double,
    pk_boolean,
    pk_char, 
    pk_octet, 
    pk_any,
    pk_TypeCode, 
    pk_Principal, 
    pk_string,           // unbound string
    pk_objref,           // object reference, e.g. interface type as a param
    pk_longlong          // long long
  };

  /////
  // CORBA::PrimitiveDef - Primitive type definition.
  /////
  interface PrimitiveDef : IDLType
  {
    readonly attribute PrimitiveKind kind;
  };


  /////
  // CORBA::Repository - Top level of the Interface Repository
  //
  // Operations
  //   lookup_id      Look up an object by repository id. If no match is
  //                  found, a NIL object reference is returned.
  //   get_primitive  Returns a PrimitiveDef of the specified kind.
  // Attributes
  //   none
  /////
  interface Repository : Container
  {
    Contained lookup_id( in RepositoryId search_id);
    PrimitiveDef get_primitive( in PrimitiveKind kind);

  };  // Repository


  /////
  // CORBA::ModuleDef - A module definition. Modules have no special
  //   attributes or operations other than those they inherit from Container
  //   and Contained.
  /////
  interface ModuleDef : Container, Contained
  {
  };

  /////
  // CORBA::ModuleDescription - Type of description object returned by
  //   CORBA::Contained::describe on a CORBA::ModuleDef
  //
  // Fields
  //   name         Simple name of this module. If scoped name is "::A::B",
  //                this field is simply "B".
  //   id           Repository id of this object, assigned by IDL compiler.
  //   defined_in   Container in which this object is defined.
  //   version      Version assigned by the IDL compiler.
  /////
  struct ModuleDescription
  {
    Identifier name;
    RepositoryId id;
    Container defined_in;     // OMG says: RepositoryId defined_in;
    VersionSpec version;
  };


  /////
  // CORBA::ConstantDef - A constant definition
  //
  // Operations
  //   none
  // Attributes
  //   type      TypeCode of the type of this constant, e.g. of <type_def>.
  //   type_def  Object defining the type of this constant.
  //   value     Value of the constant. <_type> field of the any matches 
  //             the <type> attribute of this ConstantDef.
  /////
  interface ConstantDef : Contained
  {
    readonly attribute TypeCode type;
    readonly attribute IDLType type_def;
    readonly attribute any value;
  };

  /////
  // CORBA::ConstantDescription - Description of a ConstantDef. Returned
  //   as part of CORBA::Contained::Describe on a ConstantDef object.
  //
  // Fields
  //   name         Simple name of this module. If scoped name is "::A::B",
  //                this field is simply "B".
  //   id           Repository id of this object, assigned by IDL compiler.
  //   defined_in   Container in which this object is defined.
  //   version      Version assigned by the IDL compiler.
  //   type         TypeCode of the type of this constant, e.g. of <type_def>.
  //   type_def     Object defining the type of this constant.
  /////
  struct ConstantDescription
  {
    Identifier name;
    RepositoryId id;
    Container defined_in;     // OMG says: RepositoryId defined_in;
    VersionSpec version;
    TypeCode type;
    any value;
  };

  /////
  // CORBA::TypedefDef - Defines an IDL named type. That is, a type which is
  //   not a primitive or anonymous string, sequence or array type. There are 
  //   no attributes/ops beyond what is inherited from Contained and IDLType.
  /////
  interface TypedefDef : Contained, IDLType
  {
  };

  /////
  // CORBA::TypeDescription - Description of a named type (struct, union,
  //   enum, typedef, etc.). Returned by CORBA::Contained::describe for types
  //   (as opposed to interfaces, modules, and constants).
  //
  // Fields
  //   name         Simple name of this module. If scoped name is "::A::B",
  //                this field is simply "B".
  //   id           Repository id of this object, assigned by IDL compiler.
  //   defined_in   Container in which this object is defined.
  //   version      Version assigned by the IDL compiler.
  //   type         TypeCode of this type.
  /////
  struct TypeDescription
  {
    Identifier name;
    RepositoryId id;
    Container defined_in;     // OMG says: RepositoryId defined_in;
    VersionSpec version;
    TypeCode type;
  };

  /////
  // CORBA::StructDef - Defines an IDL struct type.
  //
  // Operations
  //   none
  // Attributes
  //   members  Sequence of struct members. See CORBA::StructMember. There
  //            will always be at least one member.
  //
  // This interface has been extended beyond the CORBA 2.0 requirements
  // by making it a sub-class of Container to encapsulate nested types.
  /////
  interface StructDef : TypedefDef, Container
  {
    readonly attribute StructMemberSeq members;
  };

  /////
  // CORBA::UnionDef - Defines an IDL union type.
  //
  // Operations
  //   none
  // Attributes
  //   discriminator_type      TypeCode of the discriminator type. That is,
  //                           of <discriminator_type_def>.
  //   discriminator_type_def  IFR object defining the discriminator type.
  //   members                 Sequence of the union members, or "arms". See
  //                           CORBA::UnionMember.
  //
  // This interface has been extended beyond the CORBA 2.0 requirements
  // by making it a sub-class of Container to encapsulate nested types.
  /////
  interface UnionDef : TypedefDef, Container
  {
    readonly attribute TypeCode discriminator_type;
    readonly attribute IDLType discriminator_type_def;
    readonly attribute UnionMemberSeq members;
  };

  /////
  // CORBA::EnumDef - Defines an IDL enumeration type.
  //
  // This type has been extended from the OMG specification as follows:
  // EnumMembers are defined to be CORBA::ConstantDef objects so that it
  // is possible to use CORBA::Container operations like lookup on an
  // individual enumerator. These constants have the name of the enumerator,
  // the type of the EnumDef, and a value which corresponds to their ordinal
  // position.
  //
  // However, the <members> attribute of CORBA::EnumDef still returns just
  // a sequence of enumerator names as OMG requires.
  //
  // Operations
  //   none
  // Attributes
  //   members  Sequence of the names of the enumerators. The order of the
  //            Identifiers on the list matches the order in which the
  //            enumerators were declared in the IDL.
  /////
  interface EnumDef : TypedefDef
  {
    readonly attribute EnumMemberSeq members;
  };

  /////
  // CORBA::AliasDef - Defines an IDL typedef (alias)
  //
  // Operations
  //   none
  // Attributes
  //   original_type_def  The IFR object describing the base type of
  //                      the typedef. For instance, in a typedef of "long",
  //                      this would be the CORBA::PrimitiveDef for pk_long.
  /////
  interface AliasDef : TypedefDef
  {
    readonly attribute IDLType original_type_def;
  };

  /////
  // CORBA::StringDef - Defines an IDL bound string type. This is an
  //   anonymous type and can only be accessed through another IFR object,
  //   such as the type of a constant or base type of an alias.
  //
  // Operations
  //   none
  // Attributes
  //   bound  The bound of the string. An unbound string is always represented
  //          as a CORBA::PrimitiveDef of type CORBA::pk_string.
  /////
  interface StringDef : IDLType
  {
    readonly attribute unsigned long bound;
  };

  /////
  // CORBA::SequenceDef - Defines an IDL sequence type. This is an anonymous
  //   type and can only be accessed through another IFR object, such as 
  //   the type of a constant or base type of an alias.
  //
  // Operations
  //   none
  // Attributes
  //   bound             For an unbound sequence, 0; otherwise bound from IDL.
  //   element_type      TypeCode of the sequence element type. That is, of
  //                     <element_type_def>.
  //   element_type_def  IFR object defining the sequence element type.
  /////
  interface SequenceDef : IDLType
  {
    readonly attribute unsigned long bound;
    readonly attribute TypeCode element_type;
    readonly attribute IDLType element_type_def;
  };


  /////
  // CORBA::ArrayDef - Defines an IDL array type. This is an anonymous
  //   type and can only be accessed through another IFR object, such as 
  //   the type of a constant or base type of an alias.
  //
  // Operations
  //   none
  // Attributes
  //   length            Total number of elements in the array.
  //   element_type      TypeCode of the array element type. That is, of
  //                     <element_type_def>.
  //   element_type_def  IFR object defining the array element type.
  /////
  interface ArrayDef : IDLType
  {
    readonly attribute unsigned long length;
    readonly attribute TypeCode element_type;
    readonly attribute IDLType element_type_def;
  };

  /////
  // CORBA::ExceptionDef - Defines an IDL exception.
  //
  // Operations
  //   none
  // Attributes
  //   type     TypeCode of this exception
  //   members  Sequence of exception members. Sequence will be empty
  //            for exceptions with no data members.
  //
  // This interface has been extended beyond the CORBA 2.0 requirements
  // by making it a sub-class of Container to encapsulate nested types.
  /////
  interface ExceptionDef : Contained, Container
  {
    readonly attribute TypeCode type;
    readonly attribute StructMemberSeq members;
  };

  /////
  // CORBA::ExceptionDescription - Description of an exception type.
  //   Returned by CORBA::Contained::describe on a dk_exception object,
  //   or as part of an operation description.
  //
  // Fields
  //   name         Simple name of this exception. If scoped name is "::A::B",
  //                this field is simply "B".
  //   id           Repository id of this object, assigned by IDL compiler.
  //   defined_in   Container in which this object is defined.
  //   version      Version assigned by the IDL compiler.
  //   type         TypeCode of this exception. Same as ExceptionDef::type.
  /////
  struct ExceptionDescription
  {
    Identifier name;
    RepositoryId id;
    Container defined_in;     // OMG says: RepositoryId defined_in;
    VersionSpec version;
    TypeCode type;
  };

  /////
  // CORBA::AttributeMode - Whether an attribute is read only or read-write.
  /////
  enum AttributeMode {ATTR_NORMAL, ATTR_READONLY};

  /////
  // CORBA::AttributeDef - Defines an IDL interface attribute.
  //
  // Operations
  //   none
  // Attributes
  //   type      TypeCode of this attribute. Same as TypeCode of <type_def>.
  //   type_def  IFR object representing the type of this attribute.
  //   mode      Whether the attribute is readonly or not.
  /////
  interface AttributeDef : Contained
  {
    readonly attribute TypeCode type;
    readonly attribute IDLType type_def;
    readonly attribute AttributeMode mode;
  };

  /////
  // CORBA::AttributeDescription
  //
  // Fields
  //   name         Simple name of this module. If scoped name is "::A::B",
  //                this field is simply "B".
  //   id           Repository id of this object, assigned by IDL compiler.
  //   defined_in   Container in which this object is defined.
  //   version      Version assigned by the IDL compiler.
  //   type         TypeCode of this attribute.
  //   mode         Whether the attribute is readonly or not.
  /////
  struct AttributeDescription
  {
    Identifier name;
    RepositoryId id;
    Container defined_in;     // OMG says: RepositoryId defined_in;
    VersionSpec version;
    TypeCode type;
    AttributeMode mode;
  };


  /////
  // CORBA::OperationMode - Whether an operation is oneway or not
  /////
  enum OperationMode {OP_NORMAL, OP_ONEWAY};

  /////
  // CORBA::ParameterMode - Parameter passing modes for operations
  /////
  enum ParameterMode {PARAM_IN, PARAM_OUT, PARAM_INOUT};

  /////
  // CORBA::ParameterDescription - Defines an operation parameter
  //
  // Fields
  //   name      About what you'd expect - the parameter name
  //   type      TypeCode of the param type. That is, of <type_def>.
  //   type_def  IFR object defining the parameter type
  //   mode      Parameter passing mode (in, out, inout)
  /////
  struct ParameterDescription
  {
    Identifier name;
    TypeCode type;
    IDLType type_def;
    ParameterMode mode;
  };

  typedef sequence <ParameterDescription> ParDescriptionSeq;

  typedef sequence <ExceptionDef> ExceptionDefSeq;
  typedef sequence <ExceptionDescription> ExcDescriptionSeq;

  typedef Identifier ContextIdentifier;
  typedef sequence<ContextIdentifier> ContextIdSeq;

  /////
  // CORBA::OperationDef - Defines an interface operation
  //
  // Operations
  //   none
  // Attributes
  //   result       TypeCode of return type. That is, of <result_def>.
  //   result_def   IFR object defining the return type.
  //   params       Seq of parameter descriptions. May be empty.
  //   mode         Whether this operation is oneway or not
  //   exceptions   Seq of exceptions raised by this op. May be empty.
  //   contexts     Seq of context ids. May be empty.
  /////
  interface OperationDef : Contained
  {
    readonly attribute TypeCode result;
    readonly attribute IDLType result_def;
    readonly attribute ParDescriptionSeq params;
    readonly attribute OperationMode mode;
    readonly attribute ExceptionDefSeq exceptions;
    readonly attribute ContextIdSeq contexts;
  }; // OperationDef


  /////
  // CORBA::OperationDescription - Describes an interface operation.
  //   Returned by CORBA::Contained::describe on OperationDef objects,
  //   or as part of CORBA::InterfaceDef::describe_interface.
  //
  // Fields
  //   name         Simple name of this module. If scoped name is "::A::B",
  //                this field is simply "B".
  //   id           Repository id of this object, assigned by IDL compiler.
  //   defined_in   Container in which this object is defined.
  //   version      Version assigned by the IDL compiler.
  //   result       TypeCode of the return type
  //   mode         Whether or not this operation is oneway
  //   contexts     Seq of context ids. May be empty.
  //   parameters   Seq of operation parameters. May be empty.
  //   exceptions   Seq of exceptions raised by this op. May be empty.
  /////
  struct OperationDescription
  {
    Identifier name;
    RepositoryId id;
    Container defined_in;     // OMG says: RepositoryId defined_in;
    VersionSpec version;
    TypeCode result;
    OperationMode mode;
    ContextIdSeq contexts;
    ParDescriptionSeq parameters;
    ExcDescriptionSeq exceptions;
  };

  typedef sequence <OperationDescription> OpDescriptionSeq;
  typedef sequence <AttributeDescription> AttrDescriptionSeq;

  /////
  // CORBA::InterfaceDef - Defines an IDL interface
  //
  // Types
  //   FullInterfaceDescription
  //                       Interface description which includes info about
  //                       inheritance, plus all operations and attributes.
  // Operations
  //   is_a                Returns TRUE if this interface inherits directly
  //                       or indirectly from (or is itself) the given 
  //                       interface. 
  //   describe_interface  Produces a full interface description, including
  //                       info about all operations, attributes, and base
  //                       interfaces. Contained::describe returns just a
  //                       CORBA::InterfaceDescription with no op/attr info.
  //                       Container::describe_contents potentially returns
  //                       info about types as well as ops/attrs, and doesn't
  //                       return inheritance info.
  // Attributes
  //   base_interfaces     Seq of the interfaces this interface inherits from.
  /////
  interface InterfaceDef : Container, Contained, IDLType
  {
    readonly attribute InterfaceDefSeq base_interfaces;
    boolean is_a( in RepositoryId interface_id);

    struct FullInterfaceDescription
    {
      Identifier name;
      RepositoryId id;
      Container defined_in;     // OMG says: RepositoryId defined_in;
      VersionSpec version;
      OpDescriptionSeq operations;
      AttrDescriptionSeq attributes;
      RepositoryIdSeq base_interfaces;
      TypeCode type;
    };

    FullInterfaceDescription describe_interface();
  }; // InterfaceDef


  /////
  // CORBA::InterfaceDescription - Brief description of an IDL interface.
  //   Returned by CORBA::Contained::describe on an InterfaceDef.
  //
  // Fields
  //   name         Simple name of this interface. If scoped name is "::A::B",
  //                this field is simply "B".
  //   id           Repository id of this object, assigned by IDL compiler.
  //   defined_in   Container in which this object is defined.
  //   version      Version assigned by the IDL compiler.
  //   base_interfaces
  //                Seq of interfaces this interface inherits from. Same as
  //                what is returned by InterfaceDef::base_interfaces.
  /////
  struct InterfaceDescription
  {
    Identifier name;
    RepositoryId id;
    Container defined_in;     // OMG says: RepositoryId defined_in;
    VersionSpec version;
    RepositoryIdSeq base_interfaces;
  };

};
// type code IDL

#endif // YRCORBA_ORACLE
