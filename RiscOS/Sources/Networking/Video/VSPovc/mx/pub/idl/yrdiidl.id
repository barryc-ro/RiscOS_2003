//////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995 by Oracle Corporation. All Rights Reserved.
//
// NAME
//   yrdiidl.idl - OMX Interface Repository Dynamic Invocation Interface
//                 (DII) support
//
// NOTES
// This interface supports quick access to just enough information about
// an operation to use the OMX Dynamic Invocation Interface. The emphasis
// is on being able to retrieve all the information required by yoSendReq
// with a single repository query.
//
// The repository may be queried about a particular operation/attribute
// by name, or about all operations/attributes of an interface. Queries
// may be batched, requesting information about multiple operations or
// multiple interfaces at once.
//////////////////////////////////////////////////////////////////////////

#ifndef YRDIIDL_ORACLE
#define YRDIIDL_ORACLE

#ifndef YOSTD_ORACLE
#include "yostd/idl"
#endif

#ifndef YRTYPIDL_ORACLE
#include "yrtypidl/i"
#endif

module yo
{
  /////
  // yo::par - IDL expression of the yopar data type.
  //
  // mode - One of YOMODE_IN, YOMODE_OUT, YOMODE_INOUT, YOMODE_RETURN,
  //        YOMODE_EXCEPT, YOMODE_INVALID. Defined in yodefs.h.
  // tk   - Type code for this parameter
  // sz   - Platform specific size of this type. When set to 0, the
  //        Object Runtime Layer will compute the size itself.
  /////
  struct par
  {
    sb4 mode;
    TypeCode tk;
    ub4 sz;
  };
  typedef sequence <yo::par> parList;
};


module yr
{
  /////
  // yr::scopedNameList - list of IDL scoped names (e.g. A::B)
  /////
  typedef sequence <CORBA::ScopedName> scopedNameList;

  /////
  // yr::parNameList - list of parameter names. See yr::reqDesc.
  /////
  typedef sequence <string> parNameList;

  /////
  // yr::reqDesc - Object request descriptor
  //
  // A request descriptor completely describes an call for yoSendReq.
  // name     - Simple name of the operation or attribute as it should 
  //            be supplied as the "op" parameter to yoSendReq.
  // isOneway - TRUE if this operation is a oneway. Corresponds to the
  //            "response" parameter of yoSendReq.
  // parNames - List of the parameter names. This information is not
  //            needed to invoke yoSendReq; it is provided as a convenience
  //            for those clients which may wish to display a little
  //            additional information about the call, like OMO. The
  //            parameter names are listed in the same order as the
  //            description in the <pars> field (see below). They are not
  //            included as part of the yo::parList because yo::parList
  //            contains only the info required by yoSendReq. Note that
  //            there may be more items on <pars> than on <parNames> since
  //            <pars> includes elements for return type and exceptions.
  // pars     - Full description of the parameters, return type, and
  //            exceptions. The sequence buffer may be passed as the
  //            "pars" argument of yoSendReq. 
  //
  //            The sequence is terminated with a "null" entry with mode 
  //            YOMODE_INVALID to signal the end of par list for yoSendReq.
  //            The number of actual parameters is therefore one less than
  //            the sequence length.
  //
  // For an attribute, the name is either "_get_<attrname>" or
  // "_set_<attrname>" to identify the get and set operations of the
  // attribute.
  /////
  struct reqDesc
  {
    string name;
    boolean isOneway;
    parNameList parNames;
    yo::parList pars; 
  };

  typedef sequence <reqDesc> reqDescList;

  /////
  // yr::intfDesc - Interface request descriptor
  //
  // Encapsulates the yr::reqDesc's for all operations and attributes
  // of an interface.
  /////
  struct intfDesc
  {
    CORBA::ScopedName name;
    ysid interfaceId;
    reqDescList ops;
  };

  typedef sequence <intfDesc> intfDescList;

  typedef sequence <string> intfIdList;

  /////
  // yr::dii - Dynamic Invocation Interface support from the IFR
  //
  // Clients may request information about individual operations/attributes
  // or about all operations/attributes for a given interface. Individual
  // operation information may only be requested by name. Full interface
  // information may be requested by interface name, interface id, or
  // object reference.
  //
  // The order of the information in the returned lists matches the order
  // of the input list. If an operation or interface is not known to the
  // repository, yr::dii::NotFound is raised.
  /////
  interface dii
  {
    /////
    // yr::dii::NotFound - The requested operation or interface is not
    //   known to the repository. The scoped name of the offending item
    //   is returned.
    /////
    exception NotFound
    {
      CORBA::ScopedName name;
    };

    reqDescList reqDescByName( in scopedNameList names) raises (NotFound);
    intfDescList intfDescByName( in scopedNameList names) raises (NotFound);
    intfDescList intfDescById( in intfIdList ids) raises (NotFound);
    intfDescList intfDescByObj( in yostd::objList intfObjs) raises (NotFound);
  };
};

#endif /* YRDIIDL_ORACLE */
