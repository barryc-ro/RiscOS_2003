/* mx/inc/yeevlog.idl */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef YEEVLOG_ORACLE
#define YEEVLOG_ORACLE

#ifndef YEEVENT_ORACLE
#include "yeevent.idl"		#endif YEEVENT_ORACLE


module yeevl
{
  interface logProc;
  interface sender;
  interface log;
  interface listIterator;

    struct yeevls
  {
    yeevReceiver    rcvr_yeevls;
    yeev	    sender_yeevls;
    string	    host_yeevls;
    string	    pid_yeevls;
    string	    affinity_yeevls;
    string	    prog_yeevls;
    sb8		    lastsend_yeevls;
  } ;

    struct yeevlr
  {
    sb4		record_id;	    sb8		timestamp;	    boolean	deleted;	    yeevr	record;		  };

    typedef sequence <sender> yeevlSenderList;

    enum logType {
    textfile_logType,	    binfile_logType,	    sysbin_logType,	    tty_logType,	    console_logType,	    syslog_logType	    };

  enum fullType {
    halt_fullType,	    rollover_fullType				  };

  enum adminState {
    locked_adminState,	    unlocked_adminState	  };

  enum operState {
    enabled_operState,	    disabled_operState	  };

    struct yeevla
  {
    ub4 maxLogSizeKb_yeevla;	        ub4 capAlarmThresholdKb_yeevla;     ub4 keepCount_yeevla;	    
    fullType	fullAction_yeevla;     adminState	admin_yeevla;	     };

    struct yeevld			
  {
    logType	type_yeevld;	    string	file_yeevld;	    operState	oper_yeevld;	  };

    typedef sequence <yeevlr> yeevlrList;

    typedef sequence <log> yeevlList;
  
  exception AlreadyConnected {} ;
  exception NotSupportedForThisLogType {};
  exception OperationFailed { string reason; };
  exception NotFound {};

  exception LogCapacityAlarm { log theLog; yeevld fattrs; yeevla vattrs; };
  exception LogCapacityLimit { log theLog; yeevld fattrs; yeevla vattrs; };

  
                          interface logProc : yeev
  {
                        attribute yeevDiscList defQuals;

            readonly attribute yeevlSenderList senders;

        readonly attribute yeevlList logs;

                    sender connectSender( in yeev evsender,
			 in string host, in string pid, in string affinity,
			 in string prog,
			 out yeevdSeq quals )
      raises( AlreadyConnected, OperationFailed );
    
            log createLog( in yeevld fixedattrs, in yeevla varattrs )
      raises( OperationFailed );

            log openLog( in yeevld fixedattrs, in yeevla varattrs )
      raises( OperationFailed );

    void shutdown();
  };

  interface sender
  {
    readonly attribute yeevls info;
    void destroy();
  };

            
  interface log : yeevReceiver
  {
                    
    readonly attribute yeevld fixedattr;

    attribute yeevla varattr;
    
    void deleteRecord( in sb4 id )
      raises( NotSupportedForThisLogType );

    void getRecord( in sb4 id, out yeevlr record )
      raises( NotSupportedForThisLogType );

                void getRecordRange( in sb4 id, in sb4 count,
			in yeevdSeq dlist, in boolean keep,
			out yeevlrList records, out listIterator li )
      raises( NotSupportedForThisLogType );

                    void getRecordTime( in sb8 early, in sb8 late, in sb4 count,
		       in yeevdSeq dlist, in boolean keep,
		       out yeevlrList records, out listIterator li )
      raises( NotSupportedForThisLogType );
  };

    interface listIterator
  {
            boolean getNextOne( out yeevlr record );
    boolean getNextN( in sb4 count, out yeevlrList records );

    void destroy();
  };
};

#endif				

