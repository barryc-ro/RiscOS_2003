/* mx/inc/mtq.h */


/*
ORACLE, Copyright (c) 1982, 1983, 1986, 1990 ORACLE Corporation
ORACLE Utilities, Copyright (c) 1981, 1982, 1983, 1986, 1990, 1991 ORACLE Corp

Restricted Rights
This program is an unpublished work under the Copyright Act of the
United States and is subject to the terms and conditions stated in
your  license  agreement  with  ORACORP  including  retrictions on
use, duplication, and disclosure.

Certain uncopyrighted ideas and concepts are also contained herein.
These are trade secrets of ORACORP and cannot be  used  except  in
accordance with the written permission of ORACLE Corporation.
*/



#ifndef MTQ_ORACLE
#define MTQ_ORACLE




struct mtql
{
  struct mtql  *next;
  struct mtql  *prev;
};
typedef struct mtql   mtql;


struct mtq
{
  mtql  base;
  sb4   len;
};
typedef struct mtq   mtq;




#define MtqInit(q) ((q)->base.next = (q)->base.prev = &(q)->base, (q)->len = 0)


#define MtqInsBfr(q, qpos, ql)  ((q)->len += 1,        		\
                                 (ql)->next = (qpos),  		\
			         (ql)->prev = (qpos)->prev,  	\
			         (qpos)->prev->next = (ql),  	\
			         (qpos)->prev = (ql))
#define MtqInsAft(q, qpos, ql)  ((q)->len += 1,			\
                                 (ql)->next = (qpos)->next, 	\
                                 (ql)->prev = (qpos),         	\
			         (qpos)->next->prev = (ql), 	\
			         (qpos)->next = (ql))
#define MtqDel(q, ql)  ((q)->len = ((q)->len ? (q)->len-1 : 0),  \
                         (ql)->next->prev = (ql)->prev,		 \
                         (ql)->prev->next = (ql)->next)


#define MtqHead(q)     ((q)->base.next)
#define MtqTail(q)     ((q)->base.prev)
#define MtqNext(ql)    ((ql)->next)
#define MtqPrev(ql)    ((ql)->prev)
#define MtqBase(q)     (&(q)->base)


#define MtqLen(q)   ((q)->len)
#define MtqEmpty(q) ((q)->len == 0)
#define MtqVal(ql, structName, fieldName)  ((structName *)(dvoid *) \
	      ((sb1 *)(dvoid *)(ql) - offsetof(structName, fieldName)))


#define MtqPush(q, ql)  MtqInsAft((q), &(q)->base, (ql))
#define MtqPop(q, ql)   ((ql) = MtqHead(q), MtqDel(q, MtqHead(q)))
#define MtqEnq(q, ql)   MtqInsBfr((q), &(q)->base, (ql))
#define MtqDeq(q, ql) 	MtqPop(q, ql)



#endif 
