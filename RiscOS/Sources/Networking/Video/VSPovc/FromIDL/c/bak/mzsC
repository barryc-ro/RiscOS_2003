/* GENERATED FILE
 * mzs - client stubs
 * from <Obey$Dir>.mzs/idl
 */

#ifndef YO_ORACLE
#include <yo.h>
#endif

#ifndef MZS_IDL
#include <mzs.h>
#endif

EXTC_START

static const yotk mzs_networkException__tc[] = 
  {0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x83,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x1d,'I','D','L',':','m','z','s','/','n','e'
  ,'t','w','o','r','k','E','x','c','e','p','t','i','o','n',':'
  ,'1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,':',':'
  ,'m','z','s',':',':','n','e','t','w','o','r','k','E','x','c'
  ,'e','p','t','i','o','n',0x00,0x00,0x00,0x00,0x03,0x00,0x00,
  0x00,0x0c,'n','e','t','w','o','r','k','D','o','w','n',0x00,0x00
  ,0x00,0x00,0x13,'n','e','t','w','o','r','k','S','e','n','d',
  'F','a','i','l','u','r','e',0x00,0x00,0x00,0x00,0x00,0x0f,'n'
  ,'e','t','w','o','r','k','M','a','r','s','h','a','l',0x00};

yotk* mzs_networkException__getTC(void)
{
  return (yotk*)mzs_networkException__tc;
}

void mzs_networkException__free( mzs_networkException* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_mzs_networkException, (void *)val, ffunc);
}

void mzs_networkException__copy( mzs_networkException* dest, mzs_networkException* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_mzs_networkException, (void *)dest, (void *)src, afunc);
}

static ysidDecl(mzs_network___id) = "IDL:mzs/network:1.0";

CONST ysid* mzs_network__getId(void)
{
  return (CONST ysid*)mzs_network___id;
}

static const yotk mzs_network__tc[] = 
  {0x00,0x00,0x00,0x16,0x00,0x00,0x00,0xd3,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x14,'I','D','L',':','m','z','s','/','n','e'
  ,'t','w','o','r','k',':','1','.','0',0x00,0x00,0x00,0x00,0x0f
  ,':',':','m','z','s',':',':','n','e','t','w','o','r','k',0x00
  ,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x10,'n','e','t','w'
  ,'o','r','k','F','a','i','l','T','y','p','e',0x00,0x00,0x00,
  0x00,0x11,0x00,0x00,0x00,0x83,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x1d,'I','D','L',':','m','z','s','/','n','e','t','w','o'
  ,'r','k','E','x','c','e','p','t','i','o','n',':','1','.','0'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,':',':','m','z','s'
  ,':',':','n','e','t','w','o','r','k','E','x','c','e','p','t'
  ,'i','o','n',0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x0c,'n'
  ,'e','t','w','o','r','k','D','o','w','n',0x00,0x00,0x00,0x00
  ,0x13,'n','e','t','w','o','r','k','S','e','n','d','F','a','i'
  ,'l','u','r','e',0x00,0x00,0x00,0x00,0x00,0x0f,'n','e','t','w'
  ,'o','r','k','M','a','r','s','h','a','l',0x00};

yotk* mzs_network__getTC(void)
{
  return (yotk*)mzs_network__tc;
}

void mzs_network__free( mzs_network* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_mzs_network, (void *)val, ffunc);
}

void mzs_network__copy( mzs_network* dest, mzs_network* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_mzs_network, (void *)dest, (void *)src, afunc);
}

static const yotk mzs_serverException__tc[] = 
  {0x00,0x00,0x00,0x11,0x00,0x00,0x00,0xca,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x1c,'I','D','L',':','m','z','s','/','s','e'
  ,'r','v','e','r','E','x','c','e','p','t','i','o','n',':','1'
  ,'.','0',0x00,0x00,0x00,0x00,0x17,':',':','m','z','s',':',':'
  ,'s','e','r','v','e','r','E','x','c','e','p','t','i','o','n'
  ,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x0f,'s','e','r'
  ,'v','e','r','B','a','d','I','n','d','e','x',0x00,0x00,0x00,
  0x00,0x00,0x19,'s','e','r','v','e','r','S','t','r','e','a','m'
  ,'I','n','c','o','m','p','a','t','i','b','l','e',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0f,'s','e','r','v','e','r','I','n','t'
  ,'e','r','n','a','l',0x00,0x00,0x00,0x00,0x00,0x0d,'s','e','r'
  ,'v','e','r','O','u','t','M','e','m',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x10,'s','e','r','v','e','r','P','u','m','p','E',
  'r','r','o','r',0x00,0x00,0x00,0x00,0x12,'s','e','r','v','e'
  ,'r','O','u','t','O','f','M','e','m','o','r','y',0x00};

yotk* mzs_serverException__getTC(void)
{
  return (yotk*)mzs_serverException__tc;
}

void mzs_serverException__free( mzs_serverException* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_mzs_serverException, (void *)val, ffunc);
}

void mzs_serverException__copy( mzs_serverException* dest, mzs_serverException* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_mzs_serverException, (void *)dest, (void *)src, afunc);
}

static ysidDecl(mzs_server___id) = "IDL:mzs/server:1.0";

CONST ysid* mzs_server__getId(void)
{
  return (CONST ysid*)mzs_server___id;
}

static const yotk mzs_server__tc[] = 
  {0x00,0x00,0x00,0x16,0x00,0x00,0x01,0x1a,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x13,'I','D','L',':','m','z','s','/','s','e'
  ,'r','v','e','r',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x0e
  ,':',':','m','z','s',':',':','s','e','r','v','e','r',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0f,'s','e','r','v'
  ,'e','r','F','a','i','l','T','y','p','e',0x00,0x00,0x00,0x00
  ,0x00,0x11,0x00,0x00,0x00,0xca,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x1c,'I','D','L',':','m','z','s','/','s','e','r','v','e'
  ,'r','E','x','c','e','p','t','i','o','n',':','1','.','0',0x00
  ,0x00,0x00,0x00,0x17,':',':','m','z','s',':',':','s','e','r'
  ,'v','e','r','E','x','c','e','p','t','i','o','n',0x00,0x00,0x00
  ,0x00,0x00,0x06,0x00,0x00,0x00,0x0f,'s','e','r','v','e','r',
  'B','a','d','I','n','d','e','x',0x00,0x00,0x00,0x00,0x00,0x19
  ,'s','e','r','v','e','r','S','t','r','e','a','m','I','n','c'
  ,'o','m','p','a','t','i','b','l','e',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x0f,'s','e','r','v','e','r','I','n','t','e','r',
  'n','a','l',0x00,0x00,0x00,0x00,0x00,0x0d,'s','e','r','v','e'
  ,'r','O','u','t','M','e','m',0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x10,'s','e','r','v','e','r','P','u','m','p','E','r','r','o'
  ,'r',0x00,0x00,0x00,0x00,0x12,'s','e','r','v','e','r','O','u'
  ,'t','O','f','M','e','m','o','r','y',0x00};

yotk* mzs_server__getTC(void)
{
  return (yotk*)mzs_server__tc;
}

void mzs_server__free( mzs_server* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_mzs_server, (void *)val, ffunc);
}

void mzs_server__copy( mzs_server* dest, mzs_server* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_mzs_server, (void *)dest, (void *)src, afunc);
}

static const yotk mzs_clientException__tc[] = 
  {0x00,0x00,0x00,0x11,0x00,0x00,0x01,0xf1,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x1c,'I','D','L',':','m','z','s','/','c','l'
  ,'i','e','n','t','E','x','c','e','p','t','i','o','n',':','1'
  ,'.','0',0x00,0x00,0x00,0x00,0x17,':',':','m','z','s',':',':'
  ,'c','l','i','e','n','t','E','x','c','e','p','t','i','o','n'
  ,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x12,'c','l','i'
  ,'e','n','t','B','a','d','S','t','r','e','a','m','I','D',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x11,'c','l','i','e','n','t','I','n'
  ,'v','C','o','n','t','e','x','t',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0e,'c','l','i','e','n','t','I','n','v','A','r','g','s'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x14,'c','l','i','e','n','t',
  'F','i','n','i','s','h','B','a','d','I','n','s','t',0x00,0x00
  ,0x00,0x00,0x12,'c','l','i','e','n','t','B','a','d','P','o',
  's','i','t','i','o','n',0x00,0x00,0x00,0x00,0x00,0x00,0x14,'c'
  ,'l','i','e','n','t','P','a','s','t','S','t','r','e','a','m'
  ,'E','n','d',0x00,0x00,0x00,0x00,0x13,'c','l','i','e','n','t'
  ,'N','o','S','u','c','h','M','e','m','b','e','r',0x00,0x00,0x00
  ,0x00,0x00,0x10,'c','l','i','e','n','t','N','o','P','r','e',
  'p','a','r','e',0x00,0x00,0x00,0x00,0x13,'c','l','i','e','n'
  ,'t','F','i','l','e','N','o','t','F','o','u','n','d',0x00,0x00
  ,0x00,0x00,0x00,0x17,'c','l','i','e','n','t','N','o','n','I'
  ,'n','d','e','x','e','d','S','t','r','e','a','m',0x00,0x00,0x00
  ,0x00,0x00,0x13,'c','l','i','e','n','t','S','t','b','I','n',
  'c','a','p','a','b','l','e',0x00,0x00,0x00,0x00,0x00,0x16,'c'
  ,'l','i','e','n','t','S','t','r','e','a','m','I','n','c','a'
  ,'p','a','b','l','e',0x00,0x00,0x00,0x00,0x00,0x00,0x12,'c',
  'l','i','e','n','t','P','l','a','y','F','a','i','l','u','r',
  'e',0x00,0x00,0x00,0x00,0x00,0x00,0x0f,'c','l','i','e','n','t'
  ,'B','a','d','P','r','a','t','e',0x00,0x00,0x00,0x00,0x00,0x14
  ,'c','l','i','e','n','t','N','o','C','a','l','l','b','a','c'
  ,'k','S','e','t',0x00,0x00,0x00,0x00,0x16,'c','l','i','e','n'
  ,'t','A','u','t','o','D','e','a','l','l','o','c','D','o','n'
  ,'e',0x00,0x00,0x00,0x00,0x00,0x00,0x11,'c','l','i','e','n',
  't','N','o','t','P','l','a','y','i','n','g',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x11,'c','l','i','e','n','t','N','o','t','L'
  ,'o','o','p','i','n','g',0x00};

yotk* mzs_clientException__getTC(void)
{
  return (yotk*)mzs_clientException__tc;
}

void mzs_clientException__free( mzs_clientException* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_mzs_clientException, (void *)val, ffunc);
}

void mzs_clientException__copy( mzs_clientException* dest, mzs_clientException* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_mzs_clientException, (void *)dest, (void *)src, afunc);
}

static ysidDecl(mzs_client___id) = "IDL:mzs/client:1.0";

CONST ysid* mzs_client__getId(void)
{
  return (CONST ysid*)mzs_client___id;
}

static const yotk mzs_client__tc[] = 
  {0x00,0x00,0x00,0x16,0x00,0x00,0x02,'A',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x13,'I','D','L',':','m','z','s','/','c','l',
  'i','e','n','t',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x0e
  ,':',':','m','z','s',':',':','c','l','i','e','n','t',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0f,'c','l','i','e'
  ,'n','t','F','a','i','l','T','y','p','e',0x00,0x00,0x00,0x00
  ,0x00,0x11,0x00,0x00,0x01,0xf1,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x1c,'I','D','L',':','m','z','s','/','c','l','i','e','n'
  ,'t','E','x','c','e','p','t','i','o','n',':','1','.','0',0x00
  ,0x00,0x00,0x00,0x17,':',':','m','z','s',':',':','c','l','i'
  ,'e','n','t','E','x','c','e','p','t','i','o','n',0x00,0x00,0x00
  ,0x00,0x00,0x12,0x00,0x00,0x00,0x12,'c','l','i','e','n','t',
  'B','a','d','S','t','r','e','a','m','I','D',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x11,'c','l','i','e','n','t','I','n','v','C','o',
  'n','t','e','x','t',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,
  'c','l','i','e','n','t','I','n','v','A','r','g','s',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x14,'c','l','i','e','n','t','F','i','n'
  ,'i','s','h','B','a','d','I','n','s','t',0x00,0x00,0x00,0x00
  ,0x12,'c','l','i','e','n','t','B','a','d','P','o','s','i','t'
  ,'i','o','n',0x00,0x00,0x00,0x00,0x00,0x00,0x14,'c','l','i',
  'e','n','t','P','a','s','t','S','t','r','e','a','m','E','n',
  'd',0x00,0x00,0x00,0x00,0x13,'c','l','i','e','n','t','N','o'
  ,'S','u','c','h','M','e','m','b','e','r',0x00,0x00,0x00,0x00
  ,0x00,0x10,'c','l','i','e','n','t','N','o','P','r','e','p','a'
  ,'r','e',0x00,0x00,0x00,0x00,0x13,'c','l','i','e','n','t','F'
  ,'i','l','e','N','o','t','F','o','u','n','d',0x00,0x00,0x00,
  0x00,0x00,0x17,'c','l','i','e','n','t','N','o','n','I','n','d'
  ,'e','x','e','d','S','t','r','e','a','m',0x00,0x00,0x00,0x00
  ,0x00,0x13,'c','l','i','e','n','t','S','t','b','I','n','c','a'
  ,'p','a','b','l','e',0x00,0x00,0x00,0x00,0x00,0x16,'c','l','i'
  ,'e','n','t','S','t','r','e','a','m','I','n','c','a','p','a'
  ,'b','l','e',0x00,0x00,0x00,0x00,0x00,0x00,0x12,'c','l','i',
  'e','n','t','P','l','a','y','F','a','i','l','u','r','e',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x0f,'c','l','i','e','n','t','B','a'
  ,'d','P','r','a','t','e',0x00,0x00,0x00,0x00,0x00,0x14,'c','l'
  ,'i','e','n','t','N','o','C','a','l','l','b','a','c','k','S'
  ,'e','t',0x00,0x00,0x00,0x00,0x16,'c','l','i','e','n','t','A'
  ,'u','t','o','D','e','a','l','l','o','c','D','o','n','e',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x11,'c','l','i','e','n','t','N','o'
  ,'t','P','l','a','y','i','n','g',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x11,'c','l','i','e','n','t','N','o','t','L','o','o','p'
  ,'i','n','g',0x00};

yotk* mzs_client__getTC(void)
{
  return (yotk*)mzs_client__tc;
}

void mzs_client__free( mzs_client* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_mzs_client, (void *)val, ffunc);
}

void mzs_client__copy( mzs_client* dest, mzs_client* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_mzs_client, (void *)dest, (void *)src, afunc);
}

static const yotk mzs_denialException__tc[] = 
  {0x00,0x00,0x00,0x11,0x00,0x00,0x00,'{',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1c,'I','D','L',':','m','z','s','/','d','e',
  'n','i','a','l','E','x','c','e','p','t','i','o','n',':','1',
  '.','0',0x00,0x00,0x00,0x00,0x17,':',':','m','z','s',':',':'
  ,'d','e','n','i','a','l','E','x','c','e','p','t','i','o','n'
  ,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x15,'d','e','n'
  ,'i','a','l','P','r','e','p','a','r','e','R','e','f','u','s'
  ,'e','d',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x17,'d','e','n'
  ,'i','a','l','D','s','m','c','c','B','o','o','t','R','e','f'
  ,'u','s','e','d',0x00};

yotk* mzs_denialException__getTC(void)
{
  return (yotk*)mzs_denialException__tc;
}

void mzs_denialException__free( mzs_denialException* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_mzs_denialException, (void *)val, ffunc);
}

void mzs_denialException__copy( mzs_denialException* dest, mzs_denialException* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_mzs_denialException, (void *)dest, (void *)src, afunc);
}

static ysidDecl(mzs_denial___id) = "IDL:mzs/denial:1.0";

CONST ysid* mzs_denial__getId(void)
{
  return (CONST ysid*)mzs_denial___id;
}

static const yotk mzs_denial__tc[] = 
  {0x00,0x00,0x00,0x16,0x00,0x00,0x00,0xcb,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x13,'I','D','L',':','m','z','s','/','d','e'
  ,'n','i','a','l',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x0e
  ,':',':','m','z','s',':',':','d','e','n','i','a','l',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0f,'d','e','n','i'
  ,'a','l','F','a','i','l','T','y','p','e',0x00,0x00,0x00,0x00
  ,0x00,0x11,0x00,0x00,0x00,'{',0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x1c,'I','D','L',':','m','z','s','/','d','e','n','i','a'
  ,'l','E','x','c','e','p','t','i','o','n',':','1','.','0',0x00
  ,0x00,0x00,0x00,0x17,':',':','m','z','s',':',':','d','e','n'
  ,'i','a','l','E','x','c','e','p','t','i','o','n',0x00,0x00,0x00
  ,0x00,0x00,0x02,0x00,0x00,0x00,0x15,'d','e','n','i','a','l',
  'P','r','e','p','a','r','e','R','e','f','u','s','e','d',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x17,'d','e','n','i','a','l',
  'D','s','m','c','c','B','o','o','t','R','e','f','u','s','e',
  'd',0x00};

yotk* mzs_denial__getTC(void)
{
  return (yotk*)mzs_denial__tc;
}

void mzs_denial__free( mzs_denial* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_mzs_denial, (void *)val, ffunc);
}

void mzs_denial__copy( mzs_denial* dest, mzs_denial* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_mzs_denial, (void *)dest, (void *)src, afunc);
}

static const yotk mzs_capMask__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x00,'4',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x14,'I','D','L',':','m','z','s','/','c','a',
  'p','M','a','s','k',':','1','.','0',0x00,0x00,0x00,0x00,0x0f
  ,':',':','m','z','s',':',':','c','a','p','M','a','s','k',0x00
  ,0x00,0x00,0x00,0x00,0x05};

yotk* mzs_capMask__getTC(void)
{
  return (yotk*)mzs_capMask__tc;
}

static const yotk mzs_mnAddr__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x00,'D',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x13,'I','D','L',':','m','z','s','/','m','n',
  'A','d','d','r',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x0e
  ,':',':','m','z','s',':',':','m','n','A','d','d','r',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x13,0x00,0x00,0x00,0x0c,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x00};

yotk* mzs_mnAddr__getTC(void)
{
  return (yotk*)mzs_mnAddr__tc;
}

void mzs_mnAddr__free( mzs_mnAddr* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_mzs_mnAddr, (void *)val, ffunc);
}

void mzs_mnAddr__copy( mzs_mnAddr* dest, mzs_mnAddr* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_mzs_mnAddr, (void *)dest, (void *)src, afunc);
}

static const yotk mzs_state__tc[] = 
  {0x00,0x00,0x00,0x11,0x00,0x00,0x00,0xce,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x12,'I','D','L',':','m','z','s','/','s','t'
  ,'a','t','e',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x0d
  ,':',':','m','z','s',':',':','s','t','a','t','e',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x0a,'s','t','a','t'
  ,'e','D','e','a','d',0x00,0x00,0x00,0x00,0x00,0x00,0x0a,'s',
  't','a','t','e','B','o','o','t',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x0c,'s','t','a','t','e','S','t','r','e','a','m',0x00,0x00,
  0x00,0x00,0x0a,'s','t','a','t','e','C','l','i','p',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0f,'s','t','a','t','e','M','o','r','e'
  ,'C','l','i','p','s',0x00,0x00,0x00,0x00,0x00,0x0a,'s','t','a'
  ,'t','e','I','d','l','e',0x00,0x00,0x00,0x00,0x00,0x00,0x0b,
  's','t','a','t','e','P','a','u','s','e',0x00,0x00,0x00,0x00,
  0x00,0x0e,'s','t','a','t','e','F','i','n','i','s','h','e','d'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,'s','t','a','t','e','P',
  'r','e','p','a','r','e','d',0x00};

yotk* mzs_state__getTC(void)
{
  return (yotk*)mzs_state__tc;
}

void mzs_state__free( mzs_state* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_mzs_state, (void *)val, ffunc);
}

void mzs_state__copy( mzs_state* dest, mzs_state* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_mzs_state, (void *)dest, (void *)src, afunc);
}

static const yotk mzs_stats__tc[] = 
  {0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0xb4,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x12,'I','D','L',':','m','z','s','/','s','t'
  ,'a','t','s',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x0d
  ,':',':','m','z','s',':',':','s','t','a','t','s',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x10,'m','z','s','_'
  ,'s','t','a','t','s','A','l','l','o','c','s',0x00,0x00,0x00,
  0x00,0x05,0x00,0x00,0x00,0x0f,'m','z','s','_','s','t','a','t'
  ,'s','P','l','a','y','s',0x00,0x00,0x00,0x00,0x00,0x05,0x00,
  0x00,0x00,0x0f,'m','z','s','_','s','t','a','t','s','R','e','p'
  ,'o','s',0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x13,'m'
  ,'z','s','_','s','t','a','t','s','C','o','m','p','l','e','t'
  ,'e','s',0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x11,'m'
  ,'z','s','_','s','t','a','t','s','Q','u','e','r','i','e','s'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05};

yotk* mzs_stats__getTC(void)
{
  return (yotk*)mzs_stats__tc;
}

void mzs_stats__free( mzs_stats* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_mzs_stats, (void *)val, ffunc);
}

void mzs_stats__copy( mzs_stats* dest, mzs_stats* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_mzs_stats, (void *)dest, (void *)src, afunc);
}

static const yotk mzs_internals__tc[] = 
  {0x00,0x00,0x00,0x0f,0x00,0x00,0x13,'h',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x16,'I','D','L',':','m','z','s','/','i','n',
  't','e','r','n','a','l','s',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x11,':',':','m','z','s',':',':','i','n','t','e',
  'r','n','a','l','s',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
  0x00,0x00,0x00,0x10,'m','z','s','_','i','n','t','A','c','t',
  'i','v','i','t','y',0x00,0x00,0x00,0x00,0x11,0x00,0x00,0x00,
  0xce,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12,'I','D','L',':'
  ,'m','z','s','/','s','t','a','t','e',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0d,':',':','m','z','s',':',':','s','t'
  ,'a','t','e',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x00
  ,0x00,0x0a,'s','t','a','t','e','D','e','a','d',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x0a,'s','t','a','t','e','B','o','o','t',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x0c,'s','t','a','t','e','S','t','r'
  ,'e','a','m',0x00,0x00,0x00,0x00,0x0a,'s','t','a','t','e','C'
  ,'l','i','p',0x00,0x00,0x00,0x00,0x00,0x00,0x0f,'s','t','a',
  't','e','M','o','r','e','C','l','i','p','s',0x00,0x00,0x00,0x00
  ,0x00,0x0a,'s','t','a','t','e','I','d','l','e',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x0b,'s','t','a','t','e','P','a','u','s','e'
  ,0x00,0x00,0x00,0x00,0x00,0x0e,'s','t','a','t','e','F','i','n'
  ,'i','s','h','e','d',0x00,0x00,0x00,0x00,0x00,0x00,0x0e,'s',
  't','a','t','e','P','r','e','p','a','r','e','d',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x0c,'m','z','s','_','i','n','t','C','a','p'
  ,'s',0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'4',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x14,'I','D','L',':','m','z','s','/','c'
  ,'a','p','M','a','s','k',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x0f,':',':','m','z','s',':',':','c','a','p','M','a','s','k'
  ,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x12,'m','z','s'
  ,'_','i','n','t','M','a','x','B','i','t','r','a','t','e',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x13,'m','z','s'
  ,'_','i','n','t','L','a','s','t','B','i','t','r','a','t','e'
  ,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x16,'m','z','s'
  ,'_','i','n','t','C','u','r','r','e','n','t','B','i','t','r'
  ,'a','t','e',0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00
  ,0x10,'m','z','s','_','i','n','t','P','l','a','y','R','a','t'
  ,'e',0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x0f,'m','z','s'
  ,'_','i','n','t','C','u','r','S','e','g','s',0x00,0x00,0x00,
  0x00,0x00,0x15,0x00,0x00,0x11,'h',0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x18,'I','D','L',':','m','k','d','/','s','e','g','m','e'
  ,'n','t','L','i','s','t',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x13,':',':','m','k','d',':',':','s','e','g','m','e','n','t'
  ,'L','i','s','t',0x00,0x00,0x00,0x00,0x00,0x13,0x00,0x00,0x11
  ,'(',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x11,
  0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,'I','D','L',':'
  ,'m','k','d','/','s','e','g','m','e','n','t',':','1','.','0'
  ,0x00,0x00,0x00,0x00,0x0f,':',':','m','k','d',':',':','s','e'
  ,'g','m','e','n','t',0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00
  ,0x00,0x0c,'m','k','d','_','s','e','g','F','i','l','e',0x00,
  0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0d,
  'm','k','d','_','s','e','g','S','t','a','r','t',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x07,0xfc,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x10,'I','D','L',':','m','k','d','/','p'
  ,'o','s',':','1','.','0',0x00,0x00,0x00,0x00,0x0b,':',':','m'
  ,'k','d',':',':','p','o','s',0x00,0x00,0x00,0x00,0x00,0x11,0x00
  ,0x00,0x01,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,'I',
  'D','L',':','m','k','d','/','p','o','s','T','y','p','e',':',
  '1','.','0',0x00,0x00,0x00,0x00,0x0f,':',':','m','k','d',':'
  ,':','p','o','s','T','y','p','e',0x00,0x00,0x00,0x00,0x00,0x0c
  ,0x00,0x00,0x00,0x11,'p','o','s','T','y','p','e','B','e','g'
  ,'i','n','n','i','n','g',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x0f,'p','o','s','T','y','p','e','C','u','r','r','e','n','t'
  ,0x00,0x00,0x00,0x00,0x00,0x0b,'p','o','s','T','y','p','e','E'
  ,'n','d',0x00,0x00,0x00,0x00,0x00,0x0c,'p','o','s','T','y','p'
  ,'e','B','y','t','e',0x00,0x00,0x00,0x00,0x0c,'p','o','s','T'
  ,'y','p','e','T','i','m','e',0x00,0x00,0x00,0x00,0x11,'p','o'
  ,'s','T','y','p','e','M','i','l','l','i','s','e','c','s',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,'p','o','s','T','y','p',
  'e','M','p','e','g','S','C','R',0x00,0x00,0x00,0x00,0x00,0x0f
  ,'p','o','s','T','y','p','e','M','p','e','g','P','C','R',0x00
  ,0x00,0x00,0x00,0x00,0x0d,'p','o','s','T','y','p','e','B','l'
  ,'o','c','k',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0d,'p','o'
  ,'s','T','y','p','e','D','s','m','c','c',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x10,'p','o','s','T','y','p','e','C','o','n'
  ,'t','F','e','e','d',0x00,0x00,0x00,0x00,0x10,'p','o','s','T'
  ,'y','p','e','U','n','f','o','r','m','e','d',0x00,0xff,0xff,
  0xff,0xff,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x0d,'m','k','d','_','p','o','s','B','e','g','i','n',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0xa4,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x14,'I','D','L',':','m','k',
  'd','/','p','o','s','T','i','m','e',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x0f,':',':','m','k','d',':',':','p','o','s','T',
  'i','m','e',0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x10
  ,'m','k','d','_','p','o','s','T','i','m','e','H','o','u','r'
  ,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x12,'m','k','d','_'
  ,'p','o','s','T','i','m','e','M','i','n','u','t','e',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x12,'m','k','d','_'
  ,'p','o','s','T','i','m','e','S','e','c','o','n','d',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x15,'m','k','d','_'
  ,'p','o','s','T','i','m','e','H','u','n','d','r','e','d','t'
  ,'h',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,
  0x01,0x00,0x00,0x00,0x0b,'m','k','d','_','p','o','s','C','u'
  ,'r',0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0xa4,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x14,'I','D','L',':','m','k','d'
  ,'/','p','o','s','T','i','m','e',':','1','.','0',0x00,0x00,0x00
  ,0x00,0x0f,':',':','m','k','d',':',':','p','o','s','T','i','m'
  ,'e',0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x10,'m','k'
  ,'d','_','p','o','s','T','i','m','e','H','o','u','r',0x00,0x00
  ,0x00,0x00,0x05,0x00,0x00,0x00,0x12,'m','k','d','_','p','o',
  's','T','i','m','e','M','i','n','u','t','e',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x0a,0x00,0x00,0x00,0x12,'m','k','d','_','p','o',
  's','T','i','m','e','S','e','c','o','n','d',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x0a,0x00,0x00,0x00,0x15,'m','k','d','_','p','o',
  's','T','i','m','e','H','u','n','d','r','e','d','t','h',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x02,0x00
  ,0x00,0x00,0x0b,'m','k','d','_','p','o','s','E','n','d',0x00
  ,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0xa4,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x14,'I','D','L',':','m','k','d','/','p'
  ,'o','s','T','i','m','e',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x0f,':',':','m','k','d',':',':','p','o','s','T','i','m','e'
  ,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x10,'m','k','d'
  ,'_','p','o','s','T','i','m','e','H','o','u','r',0x00,0x00,0x00
  ,0x00,0x05,0x00,0x00,0x00,0x12,'m','k','d','_','p','o','s','T'
  ,'i','m','e','M','i','n','u','t','e',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0a,0x00,0x00,0x00,0x12,'m','k','d','_','p','o','s','T'
  ,'i','m','e','S','e','c','o','n','d',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0a,0x00,0x00,0x00,0x15,'m','k','d','_','p','o','s','T'
  ,'i','m','e','H','u','n','d','r','e','d','t','h',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x03,0x00,0x00,0x00
  ,0x0f,'m','k','d','_','p','o','s','B','y','t','e','P','o','s'
  ,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,'L',0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x14,'I','D','L',':','m','k','d','/'
  ,'p','o','s','B','y','t','e',':','1','.','0',0x00,0x00,0x00,
  0x00,0x0f,':',':','m','k','d',':',':','p','o','s','B','y','t'
  ,'e',0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0f,'m','k'
  ,'d','_','p','o','s','B','y','t','e','O','f','f',0x00,0x00,0x00
  ,0x00,0x00,0x17,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0f,'m',
  'k','d','_','p','o','s','T','i','m','e','P','o','s',0x00,0x00
  ,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0xa4,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x14,'I','D','L',':','m','k','d','/','p','o'
  ,'s','T','i','m','e',':','1','.','0',0x00,0x00,0x00,0x00,0x0f
  ,':',':','m','k','d',':',':','p','o','s','T','i','m','e',0x00
  ,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x10,'m','k','d','_'
  ,'p','o','s','T','i','m','e','H','o','u','r',0x00,0x00,0x00,
  0x00,0x05,0x00,0x00,0x00,0x12,'m','k','d','_','p','o','s','T'
  ,'i','m','e','M','i','n','u','t','e',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0a,0x00,0x00,0x00,0x12,'m','k','d','_','p','o','s','T'
  ,'i','m','e','S','e','c','o','n','d',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0a,0x00,0x00,0x00,0x15,'m','k','d','_','p','o','s','T'
  ,'i','m','e','H','u','n','d','r','e','d','t','h',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x05,0x00,0x00,0x00
  ,0x0d,'m','k','d','_','p','o','s','M','s','P','o','s',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'4',0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x12,'I','D','L',':','m','k','d','/'
  ,'p','o','s','M','s',':','1','.','0',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0d,':',':','m','k','d',':',':','p','o','s','M','s',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x06,0x00
  ,0x00,0x00,0x0e,'m','k','d','_','p','o','s','S','C','R','P',
  'o','s',0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'4'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,'I','D','L',':','m'
  ,'k','d','/','p','o','s','S','C','R',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x00,0x0e,':',':','m','k','d',':',':','p','o','s'
  ,'S','C','R',0x00,0x00,0x00,0x00,0x00,0x00,0x17,0x00,0x00,0x00
  ,0x07,0x00,0x00,0x00,0x0e,'m','k','d','_','p','o','s','P','C'
  ,'R','P','o','s',0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00
  ,0x00,'4',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,'I','D','L'
  ,':','m','k','d','/','p','o','s','P','C','R',':','1','.','0'
  ,0x00,0x00,0x00,0x00,0x00,0x0e,':',':','m','k','d',':',':','p'
  ,'o','s','P','C','R',0x00,0x00,0x00,0x00,0x00,0x00,0x17,0x00
  ,0x00,0x00,0x08,0x00,0x00,0x00,0x10,'m','k','d','_','p','o',
  's','B','l','o','c','k','P','o','s',0x00,0x00,0x00,0x00,0x15
  ,0x00,0x00,0x00,'8',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,
  'I','D','L',':','m','k','d','/','p','o','s','B','l','o','c',
  'k',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,
  ':',':','m','k','d',':',':','p','o','s','B','l','o','c','k',
  0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
  0x0d,'m','k','d','_','p','o','s','D','s','m','c','c',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'8',0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x15,'I','D','L',':','m','k','d','/'
  ,'p','o','s','B','l','o','c','k',':','1','.','0',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x10,':',':','m','k','d',':',':','p','o'
  ,'s','B','l','o','c','k',0x00,0x00,0x00,0x00,0x05,0x00,0x00,
  0x00,0x0a,0x00,0x00,0x00,0x0c,'m','k','d','_','p','o','s','F'
  ,'e','e','d',0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0xa4,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x14,'I','D','L',':','m','k',
  'd','/','p','o','s','T','i','m','e',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x0f,':',':','m','k','d',':',':','p','o','s','T',
  'i','m','e',0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x10
  ,'m','k','d','_','p','o','s','T','i','m','e','H','o','u','r'
  ,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x12,'m','k','d','_'
  ,'p','o','s','T','i','m','e','M','i','n','u','t','e',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x12,'m','k','d','_'
  ,'p','o','s','T','i','m','e','S','e','c','o','n','d',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x15,'m','k','d','_'
  ,'p','o','s','T','i','m','e','H','u','n','d','r','e','d','t'
  ,'h',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,
  0x0b,0x00,0x00,0x00,0x0d,'m','k','d','_','p','o','s','N','o'
  ,'W','a','y',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00
  ,0x00,0xa4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,'I','D','L'
  ,':','m','k','d','/','p','o','s','T','i','m','e',':','1','.'
  ,'0',0x00,0x00,0x00,0x00,0x0f,':',':','m','k','d',':',':','p'
  ,'o','s','T','i','m','e',0x00,0x00,0x00,0x00,0x00,0x04,0x00,
  0x00,0x00,0x10,'m','k','d','_','p','o','s','T','i','m','e','H'
  ,'o','u','r',0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x12,'m'
  ,'k','d','_','p','o','s','T','i','m','e','M','i','n','u','t'
  ,'e',0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x12,
  'm','k','d','_','p','o','s','T','i','m','e','S','e','c','o',
  'n','d',0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x15
  ,'m','k','d','_','p','o','s','T','i','m','e','H','u','n','d'
  ,'r','e','d','t','h',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a
  ,0x00,0x00,0x00,0x0b,'m','k','d','_','s','e','g','E','n','d'
  ,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x07,0xfc,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x10,'I','D','L',':','m','k','d','/'
  ,'p','o','s',':','1','.','0',0x00,0x00,0x00,0x00,0x0b,':',':'
  ,'m','k','d',':',':','p','o','s',0x00,0x00,0x00,0x00,0x00,0x11
  ,0x00,0x00,0x01,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14
  ,'I','D','L',':','m','k','d','/','p','o','s','T','y','p','e'
  ,':','1','.','0',0x00,0x00,0x00,0x00,0x0f,':',':','m','k','d'
  ,':',':','p','o','s','T','y','p','e',0x00,0x00,0x00,0x00,0x00
  ,0x0c,0x00,0x00,0x00,0x11,'p','o','s','T','y','p','e','B','e'
  ,'g','i','n','n','i','n','g',0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x0f,'p','o','s','T','y','p','e','C','u','r','r','e','n','t'
  ,0x00,0x00,0x00,0x00,0x00,0x0b,'p','o','s','T','y','p','e','E'
  ,'n','d',0x00,0x00,0x00,0x00,0x00,0x0c,'p','o','s','T','y','p'
  ,'e','B','y','t','e',0x00,0x00,0x00,0x00,0x0c,'p','o','s','T'
  ,'y','p','e','T','i','m','e',0x00,0x00,0x00,0x00,0x11,'p','o'
  ,'s','T','y','p','e','M','i','l','l','i','s','e','c','s',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,'p','o','s','T','y','p',
  'e','M','p','e','g','S','C','R',0x00,0x00,0x00,0x00,0x00,0x0f
  ,'p','o','s','T','y','p','e','M','p','e','g','P','C','R',0x00
  ,0x00,0x00,0x00,0x00,0x0d,'p','o','s','T','y','p','e','B','l'
  ,'o','c','k',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0d,'p','o'
  ,'s','T','y','p','e','D','s','m','c','c',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x10,'p','o','s','T','y','p','e','C','o','n'
  ,'t','F','e','e','d',0x00,0x00,0x00,0x00,0x10,'p','o','s','T'
  ,'y','p','e','U','n','f','o','r','m','e','d',0x00,0xff,0xff,
  0xff,0xff,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x0d,'m','k','d','_','p','o','s','B','e','g','i','n',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0xa4,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x14,'I','D','L',':','m','k',
  'd','/','p','o','s','T','i','m','e',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x0f,':',':','m','k','d',':',':','p','o','s','T',
  'i','m','e',0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x10
  ,'m','k','d','_','p','o','s','T','i','m','e','H','o','u','r'
  ,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x12,'m','k','d','_'
  ,'p','o','s','T','i','m','e','M','i','n','u','t','e',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x12,'m','k','d','_'
  ,'p','o','s','T','i','m','e','S','e','c','o','n','d',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x15,'m','k','d','_'
  ,'p','o','s','T','i','m','e','H','u','n','d','r','e','d','t'
  ,'h',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,
  0x01,0x00,0x00,0x00,0x0b,'m','k','d','_','p','o','s','C','u'
  ,'r',0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0xa4,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x14,'I','D','L',':','m','k','d'
  ,'/','p','o','s','T','i','m','e',':','1','.','0',0x00,0x00,0x00
  ,0x00,0x0f,':',':','m','k','d',':',':','p','o','s','T','i','m'
  ,'e',0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x10,'m','k'
  ,'d','_','p','o','s','T','i','m','e','H','o','u','r',0x00,0x00
  ,0x00,0x00,0x05,0x00,0x00,0x00,0x12,'m','k','d','_','p','o',
  's','T','i','m','e','M','i','n','u','t','e',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x0a,0x00,0x00,0x00,0x12,'m','k','d','_','p','o',
  's','T','i','m','e','S','e','c','o','n','d',0x00,0x00,0x00,0x00
  ,0x00,0x00,0x0a,0x00,0x00,0x00,0x15,'m','k','d','_','p','o',
  's','T','i','m','e','H','u','n','d','r','e','d','t','h',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x02,0x00
  ,0x00,0x00,0x0b,'m','k','d','_','p','o','s','E','n','d',0x00
  ,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0xa4,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x14,'I','D','L',':','m','k','d','/','p'
  ,'o','s','T','i','m','e',':','1','.','0',0x00,0x00,0x00,0x00
  ,0x0f,':',':','m','k','d',':',':','p','o','s','T','i','m','e'
  ,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x10,'m','k','d'
  ,'_','p','o','s','T','i','m','e','H','o','u','r',0x00,0x00,0x00
  ,0x00,0x05,0x00,0x00,0x00,0x12,'m','k','d','_','p','o','s','T'
  ,'i','m','e','M','i','n','u','t','e',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0a,0x00,0x00,0x00,0x12,'m','k','d','_','p','o','s','T'
  ,'i','m','e','S','e','c','o','n','d',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0a,0x00,0x00,0x00,0x15,'m','k','d','_','p','o','s','T'
  ,'i','m','e','H','u','n','d','r','e','d','t','h',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x03,0x00,0x00,0x00
  ,0x0f,'m','k','d','_','p','o','s','B','y','t','e','P','o','s'
  ,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,'L',0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x14,'I','D','L',':','m','k','d','/'
  ,'p','o','s','B','y','t','e',':','1','.','0',0x00,0x00,0x00,
  0x00,0x0f,':',':','m','k','d',':',':','p','o','s','B','y','t'
  ,'e',0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0f,'m','k'
  ,'d','_','p','o','s','B','y','t','e','O','f','f',0x00,0x00,0x00
  ,0x00,0x00,0x17,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0f,'m',
  'k','d','_','p','o','s','T','i','m','e','P','o','s',0x00,0x00
  ,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0xa4,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x14,'I','D','L',':','m','k','d','/','p','o'
  ,'s','T','i','m','e',':','1','.','0',0x00,0x00,0x00,0x00,0x0f
  ,':',':','m','k','d',':',':','p','o','s','T','i','m','e',0x00
  ,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x10,'m','k','d','_'
  ,'p','o','s','T','i','m','e','H','o','u','r',0x00,0x00,0x00,
  0x00,0x05,0x00,0x00,0x00,0x12,'m','k','d','_','p','o','s','T'
  ,'i','m','e','M','i','n','u','t','e',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0a,0x00,0x00,0x00,0x12,'m','k','d','_','p','o','s','T'
  ,'i','m','e','S','e','c','o','n','d',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0a,0x00,0x00,0x00,0x15,'m','k','d','_','p','o','s','T'
  ,'i','m','e','H','u','n','d','r','e','d','t','h',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x05,0x00,0x00,0x00
  ,0x0d,'m','k','d','_','p','o','s','M','s','P','o','s',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'4',0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x12,'I','D','L',':','m','k','d','/'
  ,'p','o','s','M','s',':','1','.','0',0x00,0x00,0x00,0x00,0x00
  ,0x00,0x0d,':',':','m','k','d',':',':','p','o','s','M','s',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x06,0x00
  ,0x00,0x00,0x0e,'m','k','d','_','p','o','s','S','C','R','P',
  'o','s',0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'4'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,'I','D','L',':','m'
  ,'k','d','/','p','o','s','S','C','R',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x00,0x0e,':',':','m','k','d',':',':','p','o','s'
  ,'S','C','R',0x00,0x00,0x00,0x00,0x00,0x00,0x17,0x00,0x00,0x00
  ,0x07,0x00,0x00,0x00,0x0e,'m','k','d','_','p','o','s','P','C'
  ,'R','P','o','s',0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00
  ,0x00,'4',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,'I','D','L'
  ,':','m','k','d','/','p','o','s','P','C','R',':','1','.','0'
  ,0x00,0x00,0x00,0x00,0x00,0x0e,':',':','m','k','d',':',':','p'
  ,'o','s','P','C','R',0x00,0x00,0x00,0x00,0x00,0x00,0x17,0x00
  ,0x00,0x00,0x08,0x00,0x00,0x00,0x10,'m','k','d','_','p','o',
  's','B','l','o','c','k','P','o','s',0x00,0x00,0x00,0x00,0x15
  ,0x00,0x00,0x00,'8',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,
  'I','D','L',':','m','k','d','/','p','o','s','B','l','o','c',
  'k',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,
  ':',':','m','k','d',':',':','p','o','s','B','l','o','c','k',
  0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x09,0x00,0x00,0x00,
  0x0d,'m','k','d','_','p','o','s','D','s','m','c','c',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'8',0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x15,'I','D','L',':','m','k','d','/'
  ,'p','o','s','B','l','o','c','k',':','1','.','0',0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x10,':',':','m','k','d',':',':','p','o'
  ,'s','B','l','o','c','k',0x00,0x00,0x00,0x00,0x05,0x00,0x00,
  0x00,0x0a,0x00,0x00,0x00,0x0c,'m','k','d','_','p','o','s','F'
  ,'e','e','d',0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0xa4,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x14,'I','D','L',':','m','k',
  'd','/','p','o','s','T','i','m','e',':','1','.','0',0x00,0x00
  ,0x00,0x00,0x0f,':',':','m','k','d',':',':','p','o','s','T',
  'i','m','e',0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x10
  ,'m','k','d','_','p','o','s','T','i','m','e','H','o','u','r'
  ,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x12,'m','k','d','_'
  ,'p','o','s','T','i','m','e','M','i','n','u','t','e',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x12,'m','k','d','_'
  ,'p','o','s','T','i','m','e','S','e','c','o','n','d',0x00,0x00
  ,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x15,'m','k','d','_'
  ,'p','o','s','T','i','m','e','H','u','n','d','r','e','d','t'
  ,'h',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,
  0x0b,0x00,0x00,0x00,0x0d,'m','k','d','_','p','o','s','N','o'
  ,'W','a','y',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00
  ,0x00,0xa4,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,'I','D','L'
  ,':','m','k','d','/','p','o','s','T','i','m','e',':','1','.'
  ,'0',0x00,0x00,0x00,0x00,0x0f,':',':','m','k','d',':',':','p'
  ,'o','s','T','i','m','e',0x00,0x00,0x00,0x00,0x00,0x04,0x00,
  0x00,0x00,0x10,'m','k','d','_','p','o','s','T','i','m','e','H'
  ,'o','u','r',0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x12,'m'
  ,'k','d','_','p','o','s','T','i','m','e','M','i','n','u','t'
  ,'e',0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x12,
  'm','k','d','_','p','o','s','T','i','m','e','S','e','c','o',
  'n','d',0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x15
  ,'m','k','d','_','p','o','s','T','i','m','e','H','u','n','d'
  ,'r','e','d','t','h',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a
  ,0x00,0x00,0x00,0x0d,'m','k','d','_','s','e','g','F','l','a'
  ,'g','s',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00
  ,'4',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x14,'I','D','L',':'
  ,'m','k','d','/','s','e','g','M','a','s','k',':','1','.','0'
  ,0x00,0x00,0x00,0x00,0x0f,':',':','m','k','d',':',':','s','e'
  ,'g','M','a','s','k',0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00
  ,0x00,0x0e,'m','k','d','_','s','e','g','P','r','o','h','i','b'
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x00,0x00,0x00,'4',0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x13,'I','D','L',':','m','k','d'
  ,'/','p','r','o','h','i','b',':','1','.','0',0x00,0x00,0x00,
  0x00,0x00,0x0e,':',':','m','k','d',':',':','p','r','o','h','i'
  ,'b',0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00}
  ;

yotk* mzs_internals__getTC(void)
{
  return (yotk*)mzs_internals__tc;
}

void mzs_internals__free( mzs_internals* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_mzs_internals, (void *)val, ffunc);
}

void mzs_internals__copy( mzs_internals* dest, mzs_internals* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_mzs_internals, (void *)dest, (void *)src, afunc);
}

static const yotk mzs_bootMask__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x00,'8',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x15,'I','D','L',':','m','z','s','/','b','o',
  'o','t','M','a','s','k',':','1','.','0',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x10,':',':','m','z','s',':',':','b','o','o',
  't','M','a','s','k',0x00,0x00,0x00,0x00,0x05};

yotk* mzs_bootMask__getTC(void)
{
  return (yotk*)mzs_bootMask__tc;
}

/* Client stubs for interface ::mzs::stream */
static ysidDecl(mzs_stream___id) = "IDL:mzs/stream:1.0";

CONST ysid* mzs_stream__getId(void)
{
  return (CONST ysid*)mzs_stream___id;
}

static const yotk mzs_stream__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'.',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x13,'I','D','L',':','m','z','s','/','s','t',
  'r','e','a','m',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x0e
  ,':',':','m','z','s',':',':','s','t','r','e','a','m',0x00};

yotk* mzs_stream__getTC(void)
{
  return (yotk*)mzs_stream__tc;
}


void mzs_stream__free( mzs_stream* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_mzs_stream, (void *)val, ffunc);
}

void mzs_stream__copy( mzs_stream* dest, mzs_stream* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_mzs_stream, (void *)dest, (void *)src, afunc);
}

static const yotk mzs_stream_instance__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x00,'D',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1c,'I','D','L',':','m','z','s','/','s','t',
  'r','e','a','m','/','i','n','s','t','a','n','c','e',':','1',
  '.','0',0x00,0x00,0x00,0x00,0x18,':',':','m','z','s',':',':'
  ,'s','t','r','e','a','m',':',':','i','n','s','t','a','n','c'
  ,'e',0x00,0x00,0x00,0x00,0x05};

yotk* mzs_stream_instance__getTC(void)
{
  return (yotk*)mzs_stream_instance__tc;
}

static const yotk mzs_stream_playFlags__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x00,'L',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1d,'I','D','L',':','m','z','s','/','s','t',
  'r','e','a','m','/','p','l','a','y','F','l','a','g','s',':',
  '1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,':',':',
  'm','z','s',':',':','s','t','r','e','a','m',':',':','p','l',
  'a','y','F','l','a','g','s',0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x05};

yotk* mzs_stream_playFlags__getTC(void)
{
  return (yotk*)mzs_stream_playFlags__tc;
}

static const yotk mzs_stream_finishFlags__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x00,'L',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x1f,'I','D','L',':','m','z','s','/','s','t',
  'r','e','a','m','/','f','i','n','i','s','h','F','l','a','g',
  's',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x1b,':',':','m'
  ,'z','s',':',':','s','t','r','e','a','m',':',':','f','i','n'
  ,'i','s','h','F','l','a','g','s',0x00,0x00,0x00,0x00,0x00,0x05
  };

yotk* mzs_stream_finishFlags__getTC(void)
{
  return (yotk*)mzs_stream_finishFlags__tc;
}


yopar* mzs_stream_prepare__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "mzs_stream_prepare");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "mzs_stream_prepare", (ub4)11);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_mzs_stream_instance;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_mkd_assetCookie;
    _pars[2].mode = YOMODE_IN;
    _pars[2].tk = (yotk*)YCTC_mkd_pos;
    _pars[3].mode = YOMODE_IN;
    _pars[3].tk = (yotk*)YCTC_mkd_pos;
    _pars[4].mode = YOMODE_IN;
    _pars[4].tk = (yotk*)yoTcUlong;
    _pars[5].mode = YOMODE_IN;
    _pars[5].tk = (yotk*)YCTC_mzs_stream_playFlags;
    _pars[6].mode = YOMODE_OUT;
    _pars[6].tk = (yotk*)YCTC_mkd_segInfoList;
    _pars[7].mode = YOMODE_IN;
    _pars[7].tk = (yotk*)yoTcObject;
    _pars[8].mode = YOMODE_EXCEPT;
    _pars[8].tk = (yotk*)YCTC_mzs_client;
    _pars[9].mode = YOMODE_EXCEPT;
    _pars[9].tk = (yotk*)YCTC_mzs_server;
    _pars[10].mode = YOMODE_EXCEPT;
    _pars[10].tk = (yotk*)YCTC_mzs_denial;
    _pars[11].mode = YOMODE_INVALID;
    _pars[11].tk = (yotk*)yoTcNull;
    _pars[11].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

mzs_stream_instance mzs_stream_prepare( mzs_stream or, yoenv* ev, mkd_assetCookie cookie, mkd_pos* start, mkd_pos* end, ub4 bitrate, mzs_stream_playFlags flags, mkd_segInfoList* status, CORBA_Object authRef)
{
  mzs_stream_instance _result;
  ysevt* volatile _sem = (ysevt*)0;
  struct mzs_stream__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  _impl = (struct mzs_stream__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (void *)_impl, mzs_stream__id);
      _result = (*(mzs_stream_instance (*)( mzs_stream, yoenv*, mkd_assetCookie, mkd_pos*, mkd_pos*, ub4, mzs_stream_playFlags, mkd_segInfoList*, CORBA_Object))_f)(or, ev, cookie, start, end, bitrate, flags, status, authRef);
    }
    else
      _result = (*_impl->prepare)(or, ev, cookie, start, end, bitrate, flags, status, authRef);
  }
  else
  {
    yoFilterRunEx((void *)or, ev, YOFLTR_CSND, (const  char*)0, (void *)0);
    yseTry
    {
      _sem = ysSemCreate((void *)0);
      mzs_stream_prepare_nw( or, ev, cookie, start, end, bitrate, flags, status, authRef, (ysevt*)_sem);
    }
    yseCatchAll
    {
      const ysid* _exid;
      void * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (void *)&_result);
    }
    yseFinally
      yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

void mzs_stream_prepare_nw( mzs_stream or, yoenv* ev, mkd_assetCookie cookie, mkd_pos* start, mkd_pos* end, ub4 bitrate, mzs_stream_playFlags flags, mkd_segInfoList* status, CORBA_Object authRef, ysevt* _sem)
{
  void * _parvec[7];

  _parvec[0] = (void *)&cookie;
  _parvec[1] = (void *) start;
  _parvec[2] = (void *) end;
  _parvec[3] = (void *)&bitrate;
  _parvec[4] = (void *)&flags;
  _parvec[5] = (void *) status;
  _parvec[6] = (void *)&authRef;
  yoSendReq( (void *)or, ev, "prepare", TRUE, _sem, (sword)7, mzs_stream_prepare_pars, _parvec);
}

yopar* mzs_stream_prepareSequence__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "mzs_stream_prepareSequence");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "mzs_stream_prepareSequence", (ub4)13);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_mzs_stream_instance;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_mkd_assetCookieList;
    _pars[2].mode = YOMODE_OUT;
    _pars[2].tk = (yotk*)YCTC_mkd_segInfoList;
    _pars[3].mode = YOMODE_IN;
    _pars[3].tk = (yotk*)YCTC_mkd_pos;
    _pars[4].mode = YOMODE_IN;
    _pars[4].tk = (yotk*)YCTC_mkd_pos;
    _pars[5].mode = YOMODE_IN;
    _pars[5].tk = (yotk*)yoTcUlong;
    _pars[6].mode = YOMODE_IN;
    _pars[6].tk = (yotk*)yoTcLong;
    _pars[7].mode = YOMODE_IN;
    _pars[7].tk = (yotk*)YCTC_mzs_stream_playFlags;
    _pars[8].mode = YOMODE_IN;
    _pars[8].tk = (yotk*)YCTC_mkd_prohib;
    _pars[9].mode = YOMODE_IN;
    _pars[9].tk = (yotk*)yoTcObject;
    _pars[10].mode = YOMODE_EXCEPT;
    _pars[10].tk = (yotk*)YCTC_mzs_client;
    _pars[11].mode = YOMODE_EXCEPT;
    _pars[11].tk = (yotk*)YCTC_mzs_server;
    _pars[12].mode = YOMODE_EXCEPT;
    _pars[12].tk = (yotk*)YCTC_mzs_denial;
    _pars[13].mode = YOMODE_INVALID;
    _pars[13].tk = (yotk*)yoTcNull;
    _pars[13].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

mzs_stream_instance mzs_stream_prepareSequence( mzs_stream or, yoenv* ev, mkd_assetCookieList* cookies, mkd_segInfoList* clipStatus, mkd_pos* startPos, mkd_pos* endPos, ub4 bitrate, sb4 playRate, mzs_stream_playFlags flags, mkd_prohib prohibitions, 
  CORBA_Object authRef)
{
  mzs_stream_instance _result;
  ysevt* volatile _sem = (ysevt*)0;
  struct mzs_stream__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  _impl = (struct mzs_stream__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)1, (void *)_impl, mzs_stream__id);
      _result = (*(mzs_stream_instance (*)( mzs_stream, yoenv*, mkd_assetCookieList*, mkd_segInfoList*, mkd_pos*, mkd_pos*, ub4, sb4, mzs_stream_playFlags, mkd_prohib, CORBA_Object))_f)(or, ev, cookies, clipStatus, startPos, endPos, bitrate, playRate, 
        flags, prohibitions, authRef);
    }
    else
      _result = (*_impl->prepareSequence)(or, ev, cookies, clipStatus, startPos, endPos, bitrate, playRate, flags, prohibitions, authRef);
  }
  else
  {
    yoFilterRunEx((void *)or, ev, YOFLTR_CSND, (const  char*)0, (void *)0);
    yseTry
    {
      _sem = ysSemCreate((void *)0);
      mzs_stream_prepareSequence_nw( or, ev, cookies, clipStatus, startPos, endPos, bitrate, playRate, flags, prohibitions, authRef, (ysevt*)_sem);
    }
    yseCatchAll
    {
      const ysid* _exid;
      void * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (void *)&_result);
    }
    yseFinally
      yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

void mzs_stream_prepareSequence_nw( mzs_stream or, yoenv* ev, mkd_assetCookieList* cookies, mkd_segInfoList* clipStatus, mkd_pos* startPos, mkd_pos* endPos, ub4 bitrate, sb4 playRate, mzs_stream_playFlags flags, mkd_prohib prohibitions, CORBA_Object 
  authRef, ysevt* _sem)
{
  void * _parvec[9];

  _parvec[0] = (void *) cookies;
  _parvec[1] = (void *) clipStatus;
  _parvec[2] = (void *) startPos;
  _parvec[3] = (void *) endPos;
  _parvec[4] = (void *)&bitrate;
  _parvec[5] = (void *)&playRate;
  _parvec[6] = (void *)&flags;
  _parvec[7] = (void *)&prohibitions;
  _parvec[8] = (void *)&authRef;
  yoSendReq( (void *)or, ev, "prepareSequence", TRUE, _sem, (sword)9, mzs_stream_prepareSequence_pars, _parvec);
}

yopar* mzs_stream_play__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "mzs_stream_play");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "mzs_stream_play", (ub4)8);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_IN;
    _pars[0].tk = (yotk*)YCTC_mzs_stream_instance;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_mkd_pos;
    _pars[2].mode = YOMODE_IN;
    _pars[2].tk = (yotk*)YCTC_mkd_pos;
    _pars[3].mode = YOMODE_IN;
    _pars[3].tk = (yotk*)YCTC_mkd_pos;
    _pars[4].mode = YOMODE_IN;
    _pars[4].tk = (yotk*)yoTcLong;
    _pars[5].mode = YOMODE_IN;
    _pars[5].tk = (yotk*)yoTcUlong;
    _pars[6].mode = YOMODE_EXCEPT;
    _pars[6].tk = (yotk*)YCTC_mzs_client;
    _pars[7].mode = YOMODE_EXCEPT;
    _pars[7].tk = (yotk*)YCTC_mzs_server;
    _pars[8].mode = YOMODE_INVALID;
    _pars[8].tk = (yotk*)yoTcNull;
    _pars[8].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

void mzs_stream_play( mzs_stream or, yoenv* ev, mzs_stream_instance inst, mkd_pos* curPos, mkd_pos* startPos, mkd_pos* endPos, sb4 playRate, ub4 bitrate)
{
  ysevt* volatile _sem = (ysevt*)0;
  struct mzs_stream__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  _impl = (struct mzs_stream__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)2, (void *)_impl, mzs_stream__id);
      (*(void (*)( mzs_stream, yoenv*, mzs_stream_instance, mkd_pos*, mkd_pos*, mkd_pos*, sb4, ub4))_f)(or, ev, inst, curPos, startPos, endPos, playRate, bitrate);
    }
    else
      (*_impl->play)(or, ev, inst, curPos, startPos, endPos, playRate, bitrate);
  }
  else
  {
    yoFilterRunEx((void *)or, ev, YOFLTR_CSND, (const  char*)0, (void *)0);
    yseTry
    {
      _sem = ysSemCreate((void *)0);
      mzs_stream_play_nw( or, ev, inst, curPos, startPos, endPos, playRate, bitrate, (ysevt*)_sem);
    }
    yseCatchAll
    {
      const ysid* _exid;
      void * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (void *)0);
    }
    yseFinally
      yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
}

void mzs_stream_play_nw( mzs_stream or, yoenv* ev, mzs_stream_instance inst, mkd_pos* curPos, mkd_pos* startPos, mkd_pos* endPos, sb4 playRate, ub4 bitrate, ysevt* _sem)
{
  void * _parvec[6];

  _parvec[0] = (void *)&inst;
  _parvec[1] = (void *) curPos;
  _parvec[2] = (void *) startPos;
  _parvec[3] = (void *) endPos;
  _parvec[4] = (void *)&playRate;
  _parvec[5] = (void *)&bitrate;
  yoSendReq( (void *)or, ev, "play", TRUE, _sem, (sword)6, mzs_stream_play_pars, _parvec);
}

yopar* mzs_stream_pause__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "mzs_stream_pause");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "mzs_stream_pause", (ub4)4);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_IN;
    _pars[0].tk = (yotk*)YCTC_mzs_stream_instance;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_mkd_pos;
    _pars[2].mode = YOMODE_EXCEPT;
    _pars[2].tk = (yotk*)YCTC_mzs_client;
    _pars[3].mode = YOMODE_EXCEPT;
    _pars[3].tk = (yotk*)YCTC_mzs_server;
    _pars[4].mode = YOMODE_INVALID;
    _pars[4].tk = (yotk*)yoTcNull;
    _pars[4].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

void mzs_stream_pause( mzs_stream or, yoenv* ev, mzs_stream_instance inst, mkd_pos* curPos)
{
  ysevt* volatile _sem = (ysevt*)0;
  struct mzs_stream__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  _impl = (struct mzs_stream__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)3, (void *)_impl, mzs_stream__id);
      (*(void (*)( mzs_stream, yoenv*, mzs_stream_instance, mkd_pos*))_f)(or, ev, inst, curPos);
    }
    else
      (*_impl->pause)(or, ev, inst, curPos);
  }
  else
  {
    yoFilterRunEx((void *)or, ev, YOFLTR_CSND, (const  char*)0, (void *)0);
    yseTry
    {
      _sem = ysSemCreate((void *)0);
      mzs_stream_pause_nw( or, ev, inst, curPos, (ysevt*)_sem);
    }
    yseCatchAll
    {
      const ysid* _exid;
      void * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (void *)0);
    }
    yseFinally
      yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
}

void mzs_stream_pause_nw( mzs_stream or, yoenv* ev, mzs_stream_instance inst, mkd_pos* curPos, ysevt* _sem)
{
  void * _parvec[2];

  _parvec[0] = (void *)&inst;
  _parvec[1] = (void *) curPos;
  yoSendReq( (void *)or, ev, "pause", TRUE, _sem, (sword)2, mzs_stream_pause_pars, _parvec);
}

yopar* mzs_stream_playFwd__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "mzs_stream_playFwd");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "mzs_stream_playFwd", (ub4)5);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_IN;
    _pars[0].tk = (yotk*)YCTC_mzs_stream_instance;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_mkd_pos;
    _pars[2].mode = YOMODE_IN;
    _pars[2].tk = (yotk*)YCTC_mkd_pos;
    _pars[3].mode = YOMODE_EXCEPT;
    _pars[3].tk = (yotk*)YCTC_mzs_client;
    _pars[4].mode = YOMODE_EXCEPT;
    _pars[4].tk = (yotk*)YCTC_mzs_server;
    _pars[5].mode = YOMODE_INVALID;
    _pars[5].tk = (yotk*)yoTcNull;
    _pars[5].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

void mzs_stream_playFwd( mzs_stream or, yoenv* ev, mzs_stream_instance inst, mkd_pos* startPos, mkd_pos* endPos)
{
  ysevt* volatile _sem = (ysevt*)0;
  struct mzs_stream__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  _impl = (struct mzs_stream__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)4, (void *)_impl, mzs_stream__id);
      (*(void (*)( mzs_stream, yoenv*, mzs_stream_instance, mkd_pos*, mkd_pos*))_f)(or, ev, inst, startPos, endPos);
    }
    else
      (*_impl->playFwd)(or, ev, inst, startPos, endPos);
  }
  else
  {
    yoFilterRunEx((void *)or, ev, YOFLTR_CSND, (const  char*)0, (void *)0);
    yseTry
    {
      _sem = ysSemCreate((void *)0);
      mzs_stream_playFwd_nw( or, ev, inst, startPos, endPos, (ysevt*)_sem);
    }
    yseCatchAll
    {
      const ysid* _exid;
      void * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (void *)0);
    }
    yseFinally
      yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
}

void mzs_stream_playFwd_nw( mzs_stream or, yoenv* ev, mzs_stream_instance inst, mkd_pos* startPos, mkd_pos* endPos, ysevt* _sem)
{
  void * _parvec[3];

  _parvec[0] = (void *)&inst;
  _parvec[1] = (void *) startPos;
  _parvec[2] = (void *) endPos;
  yoSendReq( (void *)or, ev, "playFwd", TRUE, _sem, (sword)3, mzs_stream_playFwd_pars, _parvec);
}

yopar* mzs_stream_playRev__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "mzs_stream_playRev");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "mzs_stream_playRev", (ub4)5);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_IN;
    _pars[0].tk = (yotk*)YCTC_mzs_stream_instance;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_mkd_pos;
    _pars[2].mode = YOMODE_IN;
    _pars[2].tk = (yotk*)YCTC_mkd_pos;
    _pars[3].mode = YOMODE_EXCEPT;
    _pars[3].tk = (yotk*)YCTC_mzs_client;
    _pars[4].mode = YOMODE_EXCEPT;
    _pars[4].tk = (yotk*)YCTC_mzs_server;
    _pars[5].mode = YOMODE_INVALID;
    _pars[5].tk = (yotk*)yoTcNull;
    _pars[5].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

void mzs_stream_playRev( mzs_stream or, yoenv* ev, mzs_stream_instance inst, mkd_pos* startPos, mkd_pos* endPos)
{
  ysevt* volatile _sem = (ysevt*)0;
  struct mzs_stream__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  _impl = (struct mzs_stream__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)5, (void *)_impl, mzs_stream__id);
      (*(void (*)( mzs_stream, yoenv*, mzs_stream_instance, mkd_pos*, mkd_pos*))_f)(or, ev, inst, startPos, endPos);
    }
    else
      (*_impl->playRev)(or, ev, inst, startPos, endPos);
  }
  else
  {
    yoFilterRunEx((void *)or, ev, YOFLTR_CSND, (const  char*)0, (void *)0);
    yseTry
    {
      _sem = ysSemCreate((void *)0);
      mzs_stream_playRev_nw( or, ev, inst, startPos, endPos, (ysevt*)_sem);
    }
    yseCatchAll
    {
      const ysid* _exid;
      void * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (void *)0);
    }
    yseFinally
      yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
}

void mzs_stream_playRev_nw( mzs_stream or, yoenv* ev, mzs_stream_instance inst, mkd_pos* startPos, mkd_pos* endPos, ysevt* _sem)
{
  void * _parvec[3];

  _parvec[0] = (void *)&inst;
  _parvec[1] = (void *) startPos;
  _parvec[2] = (void *) endPos;
  yoSendReq( (void *)or, ev, "playRev", TRUE, _sem, (sword)3, mzs_stream_playRev_pars, _parvec);
}

yopar* mzs_stream_frameFwd__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "mzs_stream_frameFwd");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "mzs_stream_frameFwd", (ub4)4);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_IN;
    _pars[0].tk = (yotk*)YCTC_mzs_stream_instance;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_mkd_pos;
    _pars[2].mode = YOMODE_EXCEPT;
    _pars[2].tk = (yotk*)YCTC_mzs_client;
    _pars[3].mode = YOMODE_EXCEPT;
    _pars[3].tk = (yotk*)YCTC_mzs_server;
    _pars[4].mode = YOMODE_INVALID;
    _pars[4].tk = (yotk*)yoTcNull;
    _pars[4].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

void mzs_stream_frameFwd( mzs_stream or, yoenv* ev, mzs_stream_instance inst, mkd_pos* curPos)
{
  ysevt* volatile _sem = (ysevt*)0;
  struct mzs_stream__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  _impl = (struct mzs_stream__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)6, (void *)_impl, mzs_stream__id);
      (*(void (*)( mzs_stream, yoenv*, mzs_stream_instance, mkd_pos*))_f)(or, ev, inst, curPos);
    }
    else
      (*_impl->frameFwd)(or, ev, inst, curPos);
  }
  else
  {
    yoFilterRunEx((void *)or, ev, YOFLTR_CSND, (const  char*)0, (void *)0);
    yseTry
    {
      _sem = ysSemCreate((void *)0);
      mzs_stream_frameFwd_nw( or, ev, inst, curPos, (ysevt*)_sem);
    }
    yseCatchAll
    {
      const ysid* _exid;
      void * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (void *)0);
    }
    yseFinally
      yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
}

void mzs_stream_frameFwd_nw( mzs_stream or, yoenv* ev, mzs_stream_instance inst, mkd_pos* curPos, ysevt* _sem)
{
  void * _parvec[2];

  _parvec[0] = (void *)&inst;
  _parvec[1] = (void *) curPos;
  yoSendReq( (void *)or, ev, "frameFwd", TRUE, _sem, (sword)2, mzs_stream_frameFwd_pars, _parvec);
}

yopar* mzs_stream_frameRev__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "mzs_stream_frameRev");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "mzs_stream_frameRev", (ub4)4);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_IN;
    _pars[0].tk = (yotk*)YCTC_mzs_stream_instance;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_mkd_pos;
    _pars[2].mode = YOMODE_EXCEPT;
    _pars[2].tk = (yotk*)YCTC_mzs_client;
    _pars[3].mode = YOMODE_EXCEPT;
    _pars[3].tk = (yotk*)YCTC_mzs_server;
    _pars[4].mode = YOMODE_INVALID;
    _pars[4].tk = (yotk*)yoTcNull;
    _pars[4].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

void mzs_stream_frameRev( mzs_stream or, yoenv* ev, mzs_stream_instance inst, mkd_pos* curPos)
{
  ysevt* volatile _sem = (ysevt*)0;
  struct mzs_stream__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  _impl = (struct mzs_stream__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)7, (void *)_impl, mzs_stream__id);
      (*(void (*)( mzs_stream, yoenv*, mzs_stream_instance, mkd_pos*))_f)(or, ev, inst, curPos);
    }
    else
      (*_impl->frameRev)(or, ev, inst, curPos);
  }
  else
  {
    yoFilterRunEx((void *)or, ev, YOFLTR_CSND, (const  char*)0, (void *)0);
    yseTry
    {
      _sem = ysSemCreate((void *)0);
      mzs_stream_frameRev_nw( or, ev, inst, curPos, (ysevt*)_sem);
    }
    yseCatchAll
    {
      const ysid* _exid;
      void * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (void *)0);
    }
    yseFinally
      yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
}

void mzs_stream_frameRev_nw( mzs_stream or, yoenv* ev, mzs_stream_instance inst, mkd_pos* curPos, ysevt* _sem)
{
  void * _parvec[2];

  _parvec[0] = (void *)&inst;
  _parvec[1] = (void *) curPos;
  yoSendReq( (void *)or, ev, "frameRev", TRUE, _sem, (sword)2, mzs_stream_frameRev_pars, _parvec);
}

yopar* mzs_stream_finish__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "mzs_stream_finish");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "mzs_stream_finish", (ub4)4);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_IN;
    _pars[0].tk = (yotk*)YCTC_mzs_stream_instance;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_mzs_stream_finishFlags;
    _pars[2].mode = YOMODE_EXCEPT;
    _pars[2].tk = (yotk*)YCTC_mzs_client;
    _pars[3].mode = YOMODE_EXCEPT;
    _pars[3].tk = (yotk*)YCTC_mzs_server;
    _pars[4].mode = YOMODE_INVALID;
    _pars[4].tk = (yotk*)yoTcNull;
    _pars[4].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

void mzs_stream_finish( mzs_stream or, yoenv* ev, mzs_stream_instance inst, mzs_stream_finishFlags flags)
{
  ysevt* volatile _sem = (ysevt*)0;
  struct mzs_stream__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  _impl = (struct mzs_stream__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)8, (void *)_impl, mzs_stream__id);
      (*(void (*)( mzs_stream, yoenv*, mzs_stream_instance, mzs_stream_finishFlags))_f)(or, ev, inst, flags);
    }
    else
      (*_impl->finish)(or, ev, inst, flags);
  }
  else
  {
    yoFilterRunEx((void *)or, ev, YOFLTR_CSND, (const  char*)0, (void *)0);
    yseTry
    {
      _sem = ysSemCreate((void *)0);
      mzs_stream_finish_nw( or, ev, inst, flags, (ysevt*)_sem);
    }
    yseCatchAll
    {
      const ysid* _exid;
      void * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (void *)0);
    }
    yseFinally
      yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
}

void mzs_stream_finish_nw( mzs_stream or, yoenv* ev, mzs_stream_instance inst, mzs_stream_finishFlags flags, ysevt* _sem)
{
  void * _parvec[2];

  _parvec[0] = (void *)&inst;
  _parvec[1] = (void *)&flags;
  yoSendReq( (void *)or, ev, "finish", TRUE, _sem, (sword)2, mzs_stream_finish_pars, _parvec);
}

yopar* mzs_stream_bootMore__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "mzs_stream_bootMore");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "mzs_stream_bootMore", (ub4)6);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_IN;
    _pars[0].tk = (yotk*)YCTC_mkd_pos;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_mkd_pos;
    _pars[2].mode = YOMODE_IN;
    _pars[2].tk = (yotk*)YCTC_mzs_bootMask;
    _pars[3].mode = YOMODE_EXCEPT;
    _pars[3].tk = (yotk*)YCTC_mzs_client;
    _pars[4].mode = YOMODE_EXCEPT;
    _pars[4].tk = (yotk*)YCTC_mzs_server;
    _pars[5].mode = YOMODE_EXCEPT;
    _pars[5].tk = (yotk*)YCTC_mzs_denial;
    _pars[6].mode = YOMODE_INVALID;
    _pars[6].tk = (yotk*)yoTcNull;
    _pars[6].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

void mzs_stream_bootMore( mzs_stream or, yoenv* ev, mkd_pos* startPos, mkd_pos* endPos, mzs_bootMask flags)
{
  ysevt* volatile _sem = (ysevt*)0;
  struct mzs_stream__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  _impl = (struct mzs_stream__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)9, (void *)_impl, mzs_stream__id);
      (*(void (*)( mzs_stream, yoenv*, mkd_pos*, mkd_pos*, mzs_bootMask))_f)(or, ev, startPos, endPos, flags);
    }
    else
      (*_impl->bootMore)(or, ev, startPos, endPos, flags);
  }
  else
  {
    yoFilterRunEx((void *)or, ev, YOFLTR_CSND, (const  char*)0, (void *)0);
    yseTry
    {
      _sem = ysSemCreate((void *)0);
      mzs_stream_bootMore_nw( or, ev, startPos, endPos, flags, (ysevt*)_sem);
    }
    yseCatchAll
    {
      const ysid* _exid;
      void * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (void *)0);
    }
    yseFinally
      yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
}

void mzs_stream_bootMore_nw( mzs_stream or, yoenv* ev, mkd_pos* startPos, mkd_pos* endPos, mzs_bootMask flags, ysevt* _sem)
{
  void * _parvec[3];

  _parvec[0] = (void *) startPos;
  _parvec[1] = (void *) endPos;
  _parvec[2] = (void *)&flags;
  yoSendReq( (void *)or, ev, "bootMore", TRUE, _sem, (sword)3, mzs_stream_bootMore_pars, _parvec);
}

yopar* mzs_stream_bootCancel__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "mzs_stream_bootCancel");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "mzs_stream_bootCancel", (ub4)6);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_IN;
    _pars[0].tk = (yotk*)YCTC_mkd_pos;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_mkd_pos;
    _pars[2].mode = YOMODE_IN;
    _pars[2].tk = (yotk*)yoTcUshort;
    _pars[3].mode = YOMODE_EXCEPT;
    _pars[3].tk = (yotk*)YCTC_mzs_client;
    _pars[4].mode = YOMODE_EXCEPT;
    _pars[4].tk = (yotk*)YCTC_mzs_server;
    _pars[5].mode = YOMODE_EXCEPT;
    _pars[5].tk = (yotk*)YCTC_mzs_denial;
    _pars[6].mode = YOMODE_INVALID;
    _pars[6].tk = (yotk*)yoTcNull;
    _pars[6].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

void mzs_stream_bootCancel( mzs_stream or, yoenv* ev, mkd_pos* startPos, mkd_pos* endPos, ub2 cancel_err)
{
  ysevt* volatile _sem = (ysevt*)0;
  struct mzs_stream__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  _impl = (struct mzs_stream__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)10, (void *)_impl, mzs_stream__id);
      (*(void (*)( mzs_stream, yoenv*, mkd_pos*, mkd_pos*, ub2))_f)(or, ev, startPos, endPos, cancel_err);
    }
    else
      (*_impl->bootCancel)(or, ev, startPos, endPos, cancel_err);
  }
  else
  {
    yoFilterRunEx((void *)or, ev, YOFLTR_CSND, (const  char*)0, (void *)0);
    yseTry
    {
      _sem = ysSemCreate((void *)0);
      mzs_stream_bootCancel_nw( or, ev, startPos, endPos, cancel_err, (ysevt*)_sem);
    }
    yseCatchAll
    {
      const ysid* _exid;
      void * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (void *)0);
    }
    yseFinally
      yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
}

void mzs_stream_bootCancel_nw( mzs_stream or, yoenv* ev, mkd_pos* startPos, mkd_pos* endPos, ub2 cancel_err, ysevt* _sem)
{
  void * _parvec[3];

  _parvec[0] = (void *) startPos;
  _parvec[1] = (void *) endPos;
  _parvec[2] = (void *)&cancel_err;
  yoSendReq( (void *)or, ev, "bootCancel", TRUE, _sem, (sword)3, mzs_stream_bootCancel_pars, _parvec);
}

yopar* mzs_stream_setCallback__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "mzs_stream_setCallback");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "mzs_stream_setCallback", (ub4)2);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_mzs_clientCB;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_mzs_clientCB;
    _pars[2].mode = YOMODE_INVALID;
    _pars[2].tk = (yotk*)yoTcNull;
    _pars[2].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

mzs_clientCB mzs_stream_setCallback( mzs_stream or, yoenv* ev, mzs_clientCB orCli)
{
  mzs_clientCB _result;
  ysevt* volatile _sem = (ysevt*)0;
  struct mzs_stream__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  _impl = (struct mzs_stream__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)11, (void *)_impl, mzs_stream__id);
      _result = (*(mzs_clientCB (*)( mzs_stream, yoenv*, mzs_clientCB))_f)(or, ev, orCli);
    }
    else
      _result = (*_impl->setCallback)(or, ev, orCli);
  }
  else
  {
    yoFilterRunEx((void *)or, ev, YOFLTR_CSND, (const  char*)0, (void *)0);
    yseTry
    {
      _sem = ysSemCreate((void *)0);
      mzs_stream_setCallback_nw( or, ev, orCli, (ysevt*)_sem);
    }
    yseCatchAll
    {
      const ysid* _exid;
      void * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (void *)&_result);
    }
    yseFinally
      yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

void mzs_stream_setCallback_nw( mzs_stream or, yoenv* ev, mzs_clientCB orCli, ysevt* _sem)
{
  void * _parvec[1];

  _parvec[0] = (void *)&orCli;
  yoSendReq( (void *)or, ev, "setCallback", TRUE, _sem, (sword)1, mzs_stream_setCallback_pars, _parvec);
}

yopar* mzs_stream_removeCallback__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "mzs_stream_removeCallback");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "mzs_stream_removeCallback", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_mzs_clientCB;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

mzs_clientCB mzs_stream_removeCallback( mzs_stream or, yoenv* ev)
{
  mzs_clientCB _result;
  ysevt* volatile _sem = (ysevt*)0;
  struct mzs_stream__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  _impl = (struct mzs_stream__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)12, (void *)_impl, mzs_stream__id);
      _result = (*(mzs_clientCB (*)( mzs_stream, yoenv*))_f)(or, ev);
    }
    else
      _result = (*_impl->removeCallback)(or, ev);
  }
  else
  {
    yoFilterRunEx((void *)or, ev, YOFLTR_CSND, (const  char*)0, (void *)0);
    yseTry
    {
      _sem = ysSemCreate((void *)0);
      mzs_stream_removeCallback_nw( or, ev, (ysevt*)_sem);
    }
    yseCatchAll
    {
      const ysid* _exid;
      void * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (void *)&_result);
    }
    yseFinally
      yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

void mzs_stream_removeCallback_nw( mzs_stream or, yoenv* ev, ysevt* _sem)
{
  yoSendReq( (void *)or, ev, "removeCallback", TRUE, _sem, (sword)0, mzs_stream_removeCallback_pars, (void **)0);
}

yopar* mzs_stream_query__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "mzs_stream_query");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "mzs_stream_query", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_OUT;
    _pars[0].tk = (yotk*)YCTC_mzs_internals;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

void mzs_stream_query( mzs_stream or, yoenv* ev, mzs_internals* sessionState)
{
  ysevt* volatile _sem = (ysevt*)0;
  struct mzs_stream__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  _impl = (struct mzs_stream__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)13, (void *)_impl, mzs_stream__id);
      (*(void (*)( mzs_stream, yoenv*, mzs_internals*))_f)(or, ev, sessionState);
    }
    else
      (*_impl->query)(or, ev, sessionState);
  }
  else
  {
    yoFilterRunEx((void *)or, ev, YOFLTR_CSND, (const  char*)0, (void *)0);
    yseTry
    {
      _sem = ysSemCreate((void *)0);
      mzs_stream_query_nw( or, ev, sessionState, (ysevt*)_sem);
    }
    yseCatchAll
    {
      const ysid* _exid;
      void * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (void *)0);
    }
    yseFinally
      yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
}

void mzs_stream_query_nw( mzs_stream or, yoenv* ev, mzs_internals* sessionState, ysevt* _sem)
{
  void * _parvec[1];

  _parvec[0] = (void *) sessionState;
  yoSendReq( (void *)or, ev, "query", TRUE, _sem, (sword)1, mzs_stream_query_pars, _parvec);
}

yopar* mzs_stream_getPos__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "mzs_stream_getPos");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "mzs_stream_getPos", (ub4)6);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_mkd_pos;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_mzs_stream_instance;
    _pars[2].mode = YOMODE_OUT;
    _pars[2].tk = (yotk*)YCTC_mzs_state;
    _pars[3].mode = YOMODE_OUT;
    _pars[3].tk = (yotk*)yoTcLong;
    _pars[4].mode = YOMODE_EXCEPT;
    _pars[4].tk = (yotk*)YCTC_mzs_client;
    _pars[5].mode = YOMODE_EXCEPT;
    _pars[5].tk = (yotk*)YCTC_mzs_server;
    _pars[6].mode = YOMODE_INVALID;
    _pars[6].tk = (yotk*)yoTcNull;
    _pars[6].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

mkd_pos mzs_stream_getPos( mzs_stream or, yoenv* ev, mzs_stream_instance inst, mzs_state* status, sb4* playRate)
{
  mkd_pos _result;
  ysevt* volatile _sem = (ysevt*)0;
  struct mzs_stream__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  _impl = (struct mzs_stream__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)14, (void *)_impl, mzs_stream__id);
      _result = (*(mkd_pos (*)( mzs_stream, yoenv*, mzs_stream_instance, mzs_state*, sb4*))_f)(or, ev, inst, status, playRate);
    }
    else
      _result = (*_impl->getPos)(or, ev, inst, status, playRate);
  }
  else
  {
    yoFilterRunEx((void *)or, ev, YOFLTR_CSND, (const  char*)0, (void *)0);
    yseTry
    {
      _sem = ysSemCreate((void *)0);
      mzs_stream_getPos_nw( or, ev, inst, status, playRate, (ysevt*)_sem);
    }
    yseCatchAll
    {
      const ysid* _exid;
      void * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (void *)&_result);
    }
    yseFinally
      yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

void mzs_stream_getPos_nw( mzs_stream or, yoenv* ev, mzs_stream_instance inst, mzs_state* status, sb4* playRate, ysevt* _sem)
{
  void * _parvec[3];

  _parvec[0] = (void *)&inst;
  _parvec[1] = (void *) status;
  _parvec[2] = (void *) playRate;
  yoSendReq( (void *)or, ev, "getPos", TRUE, _sem, (sword)3, mzs_stream_getPos_pars, _parvec);
}

yopar* mzs_stream_dealloc__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "mzs_stream_dealloc");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "mzs_stream_dealloc", (ub4)0);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_INVALID;
    _pars[0].tk = (yotk*)yoTcNull;
    _pars[0].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

void mzs_stream_dealloc( mzs_stream or, yoenv* ev)
{
  ysevt* volatile _sem = (ysevt*)0;
  struct mzs_stream__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  _impl = (struct mzs_stream__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)15, (void *)_impl, mzs_stream__id);
      (*(void (*)( mzs_stream, yoenv*))_f)(or, ev);
    }
    else
      (*_impl->dealloc)(or, ev);
  }
  else
  {
    yoFilterRunEx((void *)or, ev, YOFLTR_CSND, (const  char*)0, (void *)0);
    yseTry
    {
      _sem = ysSemCreate((void *)0);
      mzs_stream_dealloc_nw( or, ev, (ysevt*)_sem);
    }
    yseCatchAll
    {
      const ysid* _exid;
      void * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (void *)0);
    }
    yseFinally
      yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
}

void mzs_stream_dealloc_nw( mzs_stream or, yoenv* ev, ysevt* _sem)
{
  yoSendReq( (void *)or, ev, "dealloc", TRUE, _sem, (sword)0, mzs_stream_dealloc_pars, (void **)0);
}


static const yotk mzs_physAddr__tc[] = 
  {0x00,0x00,0x00,0x15,0x00,0x00,0x00,'H',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x15,'I','D','L',':','m','z','s','/','p','h',
  'y','s','A','d','d','r',':','1','.','0',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x10,':',':','m','z','s',':',':','p','h','y',
  's','A','d','d','r',0x00,0x00,0x00,0x00,0x13,0x00,0x00,0x00,
  0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,
  0x00};

yotk* mzs_physAddr__getTC(void)
{
  return (yotk*)mzs_physAddr__tc;
}

void mzs_physAddr__free( mzs_physAddr* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_mzs_physAddr, (void *)val, ffunc);
}

void mzs_physAddr__copy( mzs_physAddr* dest, mzs_physAddr* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_mzs_physAddr, (void *)dest, (void *)src, afunc);
}

/* Client stubs for interface ::mzs::factory */
static ysidDecl(mzs_factory___id) = "IDL:mzs/factory:1.0";

CONST ysid* mzs_factory__getId(void)
{
  return (CONST ysid*)mzs_factory___id;
}

static const yotk mzs_factory__tc[] = 
  {0x00,0x00,0x00,0x0e,0x00,0x00,0x00,'/',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x14,'I','D','L',':','m','z','s','/','f','a',
  'c','t','o','r','y',':','1','.','0',0x00,0x00,0x00,0x00,0x0f
  ,':',':','m','z','s',':',':','f','a','c','t','o','r','y',0x00
  };

yotk* mzs_factory__getTC(void)
{
  return (yotk*)mzs_factory__tc;
}


void mzs_factory__free( mzs_factory* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_mzs_factory, (void *)val, ffunc);
}

void mzs_factory__copy( mzs_factory* dest, mzs_factory* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_mzs_factory, (void *)dest, (void *)src, afunc);
}

static const yotk mzs_factory_bootRespInfo__tc[] = 
  {0x00,0x00,0x00,0x0f,0x00,0x00,0x00,'l',0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,'!','I','D','L',':','m','z','s','/','f','a','c'
  ,'t','o','r','y','/','b','o','o','t','R','e','s','p','I','n'
  ,'f','o',':','1','.','0',0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x1d,':',':','m','z','s',':',':','f','a','c','t','o','r','y'
  ,':',':','b','o','o','t','R','e','s','p','I','n','f','o',0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x10,'m',
  'z','s','b','o','o','t','B','l','o','c','k','_','s','z',0x00
  ,0x00,0x00,0x00,0x04};

yotk* mzs_factory_bootRespInfo__getTC(void)
{
  return (yotk*)mzs_factory_bootRespInfo__tc;
}

void mzs_factory_bootRespInfo__free( mzs_factory_bootRespInfo* val, ysmff ffunc)
{
  yotkFreeVal( YCTC_mzs_factory_bootRespInfo, (void *)val, ffunc);
}

void mzs_factory_bootRespInfo__copy( mzs_factory_bootRespInfo* dest, mzs_factory_bootRespInfo* src, ysmaf afunc)
{
  yotkCopyVal( YCTC_mzs_factory_bootRespInfo, (void *)dest, (void *)src, afunc);
}


yopar* mzs_factory_alloc__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "mzs_factory_alloc");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "mzs_factory_alloc", (ub4)6);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_mzs_stream;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_mzc_circuit;
    _pars[2].mode = YOMODE_IN;
    _pars[2].tk = (yotk*)YCTC_mzs_capMask;
    _pars[3].mode = YOMODE_IN;
    _pars[3].tk = (yotk*)yoTcUlong;
    _pars[4].mode = YOMODE_EXCEPT;
    _pars[4].tk = (yotk*)YCTC_mzs_client;
    _pars[5].mode = YOMODE_EXCEPT;
    _pars[5].tk = (yotk*)YCTC_mzs_server;
    _pars[6].mode = YOMODE_INVALID;
    _pars[6].tk = (yotk*)yoTcNull;
    _pars[6].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

mzs_stream mzs_factory_alloc( mzs_factory or, yoenv* ev, mzc_circuit* clientCircuit, mzs_capMask capabilities, ub4 maxBitrate)
{
  mzs_stream _result;
  ysevt* volatile _sem = (ysevt*)0;
  struct mzs_factory__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  _impl = (struct mzs_factory__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)0, (void *)_impl, mzs_factory__id);
      _result = (*(mzs_stream (*)( mzs_factory, yoenv*, mzc_circuit*, mzs_capMask, ub4))_f)(or, ev, clientCircuit, capabilities, maxBitrate);
    }
    else
      _result = (*_impl->alloc)(or, ev, clientCircuit, capabilities, maxBitrate);
  }
  else
  {
    yoFilterRunEx((void *)or, ev, YOFLTR_CSND, (const  char*)0, (void *)0);
    yseTry
    {
      _sem = ysSemCreate((void *)0);
      mzs_factory_alloc_nw( or, ev, clientCircuit, capabilities, maxBitrate, (ysevt*)_sem);
    }
    yseCatchAll
    {
      const ysid* _exid;
      void * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (void *)&_result);
    }
    yseFinally
      yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

void mzs_factory_alloc_nw( mzs_factory or, yoenv* ev, mzc_circuit* clientCircuit, mzs_capMask capabilities, ub4 maxBitrate, ysevt* _sem)
{
  void * _parvec[3];

  _parvec[0] = (void *) clientCircuit;
  _parvec[1] = (void *)&capabilities;
  _parvec[2] = (void *)&maxBitrate;
  yoSendReq( (void *)or, ev, "alloc", TRUE, _sem, (sword)3, mzs_factory_alloc_pars, _parvec);
}

yopar* mzs_factory_boot__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "mzs_factory_boot");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "mzs_factory_boot", (ub4)10);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_RETURN;
    _pars[0].tk = (yotk*)YCTC_mzs_stream;
    _pars[1].mode = YOMODE_IN;
    _pars[1].tk = (yotk*)YCTC_mzc_circuit;
    _pars[2].mode = YOMODE_IN;
    _pars[2].tk = (yotk*)YCTC_mkd_pos;
    _pars[3].mode = YOMODE_IN;
    _pars[3].tk = (yotk*)YCTC_mkd_pos;
    _pars[4].mode = YOMODE_IN;
    _pars[4].tk = (yotk*)YCTC_mzs_bootMask;
    _pars[5].mode = YOMODE_IN;
    _pars[5].tk = (yotk*)yoTcUshort;
    _pars[6].mode = YOMODE_OUT;
    _pars[6].tk = (yotk*)YCTC_mzs_factory_bootRespInfo;
    _pars[7].mode = YOMODE_EXCEPT;
    _pars[7].tk = (yotk*)YCTC_mzs_client;
    _pars[8].mode = YOMODE_EXCEPT;
    _pars[8].tk = (yotk*)YCTC_mzs_server;
    _pars[9].mode = YOMODE_EXCEPT;
    _pars[9].tk = (yotk*)YCTC_mzs_denial;
    _pars[10].mode = YOMODE_INVALID;
    _pars[10].tk = (yotk*)yoTcNull;
    _pars[10].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

mzs_stream mzs_factory_boot( mzs_factory or, yoenv* ev, mzc_circuit* clientCircuit, mkd_pos* startPos, mkd_pos* endPos, mzs_bootMask flags, ub2 req_blocksz, mzs_factory_bootRespInfo* RespInfoP)
{
  mzs_stream _result;
  ysevt* volatile _sem = (ysevt*)0;
  struct mzs_factory__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  _impl = (struct mzs_factory__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)1, (void *)_impl, mzs_factory__id);
      _result = (*(mzs_stream (*)( mzs_factory, yoenv*, mzc_circuit*, mkd_pos*, mkd_pos*, mzs_bootMask, ub2, mzs_factory_bootRespInfo*))_f)(or, ev, clientCircuit, startPos, endPos, flags, req_blocksz, RespInfoP);
    }
    else
      _result = (*_impl->boot)(or, ev, clientCircuit, startPos, endPos, flags, req_blocksz, RespInfoP);
  }
  else
  {
    yoFilterRunEx((void *)or, ev, YOFLTR_CSND, (const  char*)0, (void *)0);
    yseTry
    {
      _sem = ysSemCreate((void *)0);
      mzs_factory_boot_nw( or, ev, clientCircuit, startPos, endPos, flags, req_blocksz, RespInfoP, (ysevt*)_sem);
    }
    yseCatchAll
    {
      const ysid* _exid;
      void * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (void *)&_result);
    }
    yseFinally
      yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
  return _result;
}

void mzs_factory_boot_nw( mzs_factory or, yoenv* ev, mzc_circuit* clientCircuit, mkd_pos* startPos, mkd_pos* endPos, mzs_bootMask flags, ub2 req_blocksz, mzs_factory_bootRespInfo* RespInfoP, ysevt* _sem)
{
  void * _parvec[6];

  _parvec[0] = (void *) clientCircuit;
  _parvec[1] = (void *) startPos;
  _parvec[2] = (void *) endPos;
  _parvec[3] = (void *)&flags;
  _parvec[4] = (void *)&req_blocksz;
  _parvec[5] = (void *) RespInfoP;
  yoSendReq( (void *)or, ev, "boot", TRUE, _sem, (sword)6, mzs_factory_boot_pars, _parvec);
}

yopar* mzs_factory_getStats__getPars(void)
{
  yopar* _pars = (yopar*)0;

  _pars = yoParsGet( "mzs_factory_getStats");
  if ( _pars == (yopar*)0 )
  {
    yopard* _desc = yoPardCreate( "mzs_factory_getStats", (ub4)1);
    _pars = _desc->pars;
    _pars[0].mode = YOMODE_OUT;
    _pars[0].tk = (yotk*)YCTC_mzs_stats;
    _pars[1].mode = YOMODE_INVALID;
    _pars[1].tk = (yotk*)yoTcNull;
    _pars[1].sz = (ub4)0;
    yoParsSize( _pars);
    yoParsSet( _desc);
  }
  return _pars;
}

void mzs_factory_getStats( mzs_factory or, yoenv* ev, mzs_stats* statistics)
{
  ysevt* volatile _sem = (ysevt*)0;
  struct mzs_factory__tyimpl* _impl;
  yowiden _widen = (yowiden)0;

  _impl = (struct mzs_factory__tyimpl*) yoLocalObj( (CORBA_Object)or, (yowiden*)&_widen);
  if ( _impl )
  {
    if ( _widen )
    {
      yogfp _f = (*_widen)( (ub4)2, (void *)_impl, mzs_factory__id);
      (*(void (*)( mzs_factory, yoenv*, mzs_stats*))_f)(or, ev, statistics);
    }
    else
      (*_impl->getStats)(or, ev, statistics);
  }
  else
  {
    yoFilterRunEx((void *)or, ev, YOFLTR_CSND, (const  char*)0, (void *)0);
    yseTry
    {
      _sem = ysSemCreate((void *)0);
      mzs_factory_getStats_nw( or, ev, statistics, (ysevt*)_sem);
    }
    yseCatchAll
    {
      const ysid* _exid;
      void * _exbody;

      _exid = yseExid;
      _exbody = yseExobj;
      yseTry
      {
        yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, _exid, _exbody);
      }
      yseFinally
      {
        if ( _sem )
          ysSemDestroy( (ysevt*)_sem);
      }
      yseEnd
      yseRethrow;
    }
    yseEnd
    yseTry
    {
      ysSemSynch( (ysevt*)_sem, (void *)0);
    }
    yseFinally
      yoFilterRunEx((void *)or, ev, YOFLTR_CRCV, yseExid, yseExobj);
    yseEnd
  }
}

void mzs_factory_getStats_nw( mzs_factory or, yoenv* ev, mzs_stats* statistics, ysevt* _sem)
{
  void * _parvec[1];

  _parvec[0] = (void *) statistics;
  yoSendReq( (void *)or, ev, "getStats", TRUE, _sem, (sword)1, mzs_factory_getStats_pars, _parvec);
}



EXTC_END
