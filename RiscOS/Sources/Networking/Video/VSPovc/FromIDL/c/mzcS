/* GENERATED FILE
 * mzc - server stubs
 * from <Obey$Dir>.mzc/idl
 */

#ifndef YO_ORACLE
#include <yo.h>
#endif

#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
#include <mzcC/c>

EXTC_START

/* Server stubs for interface ::mzc::ckt */
static void mzc_ckt_GetInfo_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzc_ckt_GetInfo_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mzc_cktInfo*)args[0] = (*((struct mzc_ckt__tyimpl*)impldef)->GetInfo)( (mzc_ckt)or, ev);
}

static void mzc_ckt_TearDown_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzc_ckt_TearDown_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mzc_ckt__tyimpl*)impldef)->TearDown)( (mzc_ckt)or, ev);
}

static void mzc_ckt_Rebuild_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzc_ckt_Rebuild_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mzc_cktInfo*)args[0] = (*((struct mzc_ckt__tyimpl*)impldef)->Rebuild)( (mzc_ckt)or, ev,(mzc_cktspec*)args[1]);
}

static void mzc_ckt_BindDSM_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzc_ckt_BindDSM_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mzc_channel*)args[0] = (*((struct mzc_ckt__tyimpl*)impldef)->BindDSM)( (mzc_ckt)or, ev,(mzc_chnlspec*)args[1]);
}

static void mzc_ckt_UnBindDSM_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzc_ckt_UnBindDSM_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mzc_ckt__tyimpl*)impldef)->UnBindDSM)( (mzc_ckt)or, ev);
}

static void mzc_ckt_DisableDSM_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzc_ckt_DisableDSM_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mzc_ckt__tyimpl*)impldef)->DisableDSM)( (mzc_ckt)or, ev);
}

static void mzc_ckt_EnableDSM_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzc_ckt_EnableDSM_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mzc_ckt__tyimpl*)impldef)->EnableDSM)( (mzc_ckt)or, ev);
}

static void mzc_ckt_BindUSM_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzc_ckt_BindUSM_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mzc_channel*)args[0] = (*((struct mzc_ckt__tyimpl*)impldef)->BindUSM)( (mzc_ckt)or, ev,(mzc_chnlspec*)args[1]);
}

static void mzc_ckt_UnBindUSM_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzc_ckt_UnBindUSM_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mzc_ckt__tyimpl*)impldef)->UnBindUSM)( (mzc_ckt)or, ev);
}

static void mzc_ckt_DisableUSM_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzc_ckt_DisableUSM_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mzc_ckt__tyimpl*)impldef)->DisableUSM)( (mzc_ckt)or, ev);
}

static void mzc_ckt_EnableUSM_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzc_ckt_EnableUSM_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mzc_ckt__tyimpl*)impldef)->EnableUSM)( (mzc_ckt)or, ev);
}

static void mzc_ckt_BindStream_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzc_ckt_BindStream_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mzc_ckt__tyimpl*)impldef)->BindStream)( (mzc_ckt)or, ev,*(CORBA_Object*)args[0]);
}

static void mzc_ckt_UnBindStream_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzc_ckt_UnBindStream_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(CORBA_Object*)args[0] = (*((struct mzc_ckt__tyimpl*)impldef)->UnBindStream)( (mzc_ckt)or, ev);
}

yostub* mzc_ckt__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*13), "yostubs");
  _result->widen = (yowiden)0;
  _result->bases = (const char**)0;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "GetInfo";
  _stubs[0].parms = mzc_ckt_GetInfo_pars;
  _stubs[0].oper = mzc_ckt_GetInfo_s;
  _stubs[1].opernm = "TearDown";
  _stubs[1].parms = mzc_ckt_TearDown_pars;
  _stubs[1].oper = mzc_ckt_TearDown_s;
  _stubs[2].opernm = "Rebuild";
  _stubs[2].parms = mzc_ckt_Rebuild_pars;
  _stubs[2].oper = mzc_ckt_Rebuild_s;
  _stubs[3].opernm = "BindDSM";
  _stubs[3].parms = mzc_ckt_BindDSM_pars;
  _stubs[3].oper = mzc_ckt_BindDSM_s;
  _stubs[4].opernm = "UnBindDSM";
  _stubs[4].parms = mzc_ckt_UnBindDSM_pars;
  _stubs[4].oper = mzc_ckt_UnBindDSM_s;
  _stubs[5].opernm = "DisableDSM";
  _stubs[5].parms = mzc_ckt_DisableDSM_pars;
  _stubs[5].oper = mzc_ckt_DisableDSM_s;
  _stubs[6].opernm = "EnableDSM";
  _stubs[6].parms = mzc_ckt_EnableDSM_pars;
  _stubs[6].oper = mzc_ckt_EnableDSM_s;
  _stubs[7].opernm = "BindUSM";
  _stubs[7].parms = mzc_ckt_BindUSM_pars;
  _stubs[7].oper = mzc_ckt_BindUSM_s;
  _stubs[8].opernm = "UnBindUSM";
  _stubs[8].parms = mzc_ckt_UnBindUSM_pars;
  _stubs[8].oper = mzc_ckt_UnBindUSM_s;
  _stubs[9].opernm = "DisableUSM";
  _stubs[9].parms = mzc_ckt_DisableUSM_pars;
  _stubs[9].oper = mzc_ckt_DisableUSM_s;
  _stubs[10].opernm = "EnableUSM";
  _stubs[10].parms = mzc_ckt_EnableUSM_pars;
  _stubs[10].oper = mzc_ckt_EnableUSM_s;
  _stubs[11].opernm = "BindStream";
  _stubs[11].parms = mzc_ckt_BindStream_pars;
  _stubs[11].oper = mzc_ckt_BindStream_s;
  _stubs[12].opernm = "UnBindStream";
  _stubs[12].parms = mzc_ckt_UnBindStream_pars;
  _stubs[12].oper = mzc_ckt_UnBindStream_s;
  _stubs[13].opernm = (const char*)0;
  _stubs[13].parms = (yopar*)0;
  _stubs[13].oper = (void (*)(void *,yoenv*,void *,void **))0;

  return _result;
}

/* Server stubs for interface ::mzc::factory */
static void mzc_factory_BuildCircuit_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzc_factory_BuildCircuit_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mzc_circuit*)args[0] = (*((struct mzc_factory__tyimpl*)impldef)->BuildCircuit)( (mzc_factory)or, ev,(mzc_clientDeviceId*)args[1],(mzc_cktspec*)args[2]);
}

yostub* mzc_factory__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*1), "yostubs");
  _result->widen = (yowiden)0;
  _result->bases = (const char**)0;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "BuildCircuit";
  _stubs[0].parms = mzc_factory_BuildCircuit_pars;
  _stubs[0].oper = mzc_factory_BuildCircuit_s;
  _stubs[1].opernm = (const char*)0;
  _stubs[1].parms = (yopar*)0;
  _stubs[1].oper = (void (*)(void *,yoenv*,void *,void **))0;

  return _result;
}


EXTC_END
