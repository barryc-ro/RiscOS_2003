/* GENERATED FILE
 * mzz - server stubs
 * from <Obey$Dir>.mzz/idl
 */

#ifndef YO_ORACLE
#include <yo.h>
#endif

#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
#include <mzzC/c>

EXTC_START

/* Server stubs for interface ::mzz::ses */
static void mzz_ses_Release_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzz_ses_Release_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mzz_ses__tyimpl*)impldef)->Release)( (mzz_ses)or, ev);
}

static void mzz_ses_GetInfo_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzz_ses_GetInfo_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mzz_sesInfo*)args[0] = (*((struct mzz_ses__tyimpl*)impldef)->GetInfo)( (mzz_ses)or, ev);
}

static void mzz_ses_GetClientDevice_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzz_ses_GetClientDevice_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mzz_clientDevice*)args[0] = (*((struct mzz_ses__tyimpl*)impldef)->GetClientDevice)( (mzz_ses)or, ev);
}

static void mzz_ses_GetCircuits_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzz_ses_GetCircuits_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mzc_circuits*)args[0] = (*((struct mzz_ses__tyimpl*)impldef)->GetCircuits)( (mzz_ses)or, ev);
}

static void mzz_ses_AddCircuit_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzz_ses_AddCircuit_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mzc_circuit*)args[0] = (*((struct mzz_ses__tyimpl*)impldef)->AddCircuit)( (mzz_ses)or, ev,(mzc_cktspec*)args[1]);
}

static void mzz_ses_AddCircuits_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzz_ses_AddCircuits_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mzc_circuits*)args[0] = (*((struct mzz_ses__tyimpl*)impldef)->AddCircuits)( (mzz_ses)or, ev,(mzc_cktspecs*)args[1]);
}

static void mzz_ses_DelCircuit_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzz_ses_DelCircuit_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mzz_ses__tyimpl*)impldef)->DelCircuit)( (mzz_ses)or, ev,*(mzc_ckt*)args[0]);
}

static void mzz_ses_GetResources_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzz_ses_GetResources_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mzz_resources*)args[0] = (*((struct mzz_ses__tyimpl*)impldef)->GetResources)( (mzz_ses)or, ev);
}

static void mzz_ses_GetResource_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzz_ses_GetResource_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mzz_resource*)args[0] = (*((struct mzz_ses__tyimpl*)impldef)->GetResource)( (mzz_ses)or, ev,*(char**)args[1]);
}

static void mzz_ses_AddResource_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzz_ses_AddResource_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mzz_resource*)args[0] = (*((struct mzz_ses__tyimpl*)impldef)->AddResource)( (mzz_ses)or, ev,(mzz_resource*)args[1]);
}

static void mzz_ses_DelResource_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzz_ses_DelResource_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mzz_ses__tyimpl*)impldef)->DelResource)( (mzz_ses)or, ev,*(char**)args[0]);
}

yostub* mzz_ses__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*11), "yostubs");
  _result->widen = (yowiden)0;
  _result->bases = (const char**)0;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "Release";
  _stubs[0].parms = mzz_ses_Release_pars;
  _stubs[0].oper = mzz_ses_Release_s;
  _stubs[1].opernm = "GetInfo";
  _stubs[1].parms = mzz_ses_GetInfo_pars;
  _stubs[1].oper = mzz_ses_GetInfo_s;
  _stubs[2].opernm = "GetClientDevice";
  _stubs[2].parms = mzz_ses_GetClientDevice_pars;
  _stubs[2].oper = mzz_ses_GetClientDevice_s;
  _stubs[3].opernm = "GetCircuits";
  _stubs[3].parms = mzz_ses_GetCircuits_pars;
  _stubs[3].oper = mzz_ses_GetCircuits_s;
  _stubs[4].opernm = "AddCircuit";
  _stubs[4].parms = mzz_ses_AddCircuit_pars;
  _stubs[4].oper = mzz_ses_AddCircuit_s;
  _stubs[5].opernm = "AddCircuits";
  _stubs[5].parms = mzz_ses_AddCircuits_pars;
  _stubs[5].oper = mzz_ses_AddCircuits_s;
  _stubs[6].opernm = "DelCircuit";
  _stubs[6].parms = mzz_ses_DelCircuit_pars;
  _stubs[6].oper = mzz_ses_DelCircuit_s;
  _stubs[7].opernm = "GetResources";
  _stubs[7].parms = mzz_ses_GetResources_pars;
  _stubs[7].oper = mzz_ses_GetResources_s;
  _stubs[8].opernm = "GetResource";
  _stubs[8].parms = mzz_ses_GetResource_pars;
  _stubs[8].oper = mzz_ses_GetResource_s;
  _stubs[9].opernm = "AddResource";
  _stubs[9].parms = mzz_ses_AddResource_pars;
  _stubs[9].oper = mzz_ses_AddResource_s;
  _stubs[10].opernm = "DelResource";
  _stubs[10].parms = mzz_ses_DelResource_pars;
  _stubs[10].oper = mzz_ses_DelResource_s;
  _stubs[11].opernm = (const char*)0;
  _stubs[11].parms = (yopar*)0;
  _stubs[11].oper = (void (*)(void *,yoenv*,void *,void **))0;

  return _result;
}

/* Server stubs for interface ::mzz::factory */
static void mzz_factory_AllocateSession_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzz_factory_AllocateSession_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mzz_session*)args[0] = (*((struct mzz_factory__tyimpl*)impldef)->AllocateSession)( (mzz_factory)or, ev,*(mzz_sessProperty*)args[1],(mzc_clientDeviceId*)args[2],(mzc_cktspec*)args[3]);
}

static void mzz_factory_AllocateSessionEx_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mzz_factory_AllocateSessionEx_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mzz_session*)args[0] = (*((struct mzz_factory__tyimpl*)impldef)->AllocateSessionEx)( (mzz_factory)or, ev,*(mzz_sessProperty*)args[1],(mzc_clientDeviceId*)args[2],(mzc_cktspecs*)args[3]);
}

yostub* mzz_factory__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*2), "yostubs");
  _result->widen = (yowiden)0;
  _result->bases = (const char**)0;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "AllocateSession";
  _stubs[0].parms = mzz_factory_AllocateSession_pars;
  _stubs[0].oper = mzz_factory_AllocateSession_s;
  _stubs[1].opernm = "AllocateSessionEx";
  _stubs[1].parms = mzz_factory_AllocateSessionEx_pars;
  _stubs[1].oper = mzz_factory_AllocateSessionEx_s;
  _stubs[2].opernm = (const char*)0;
  _stubs[2].parms = (yopar*)0;
  _stubs[2].oper = (void (*)(void *,yoenv*,void *,void **))0;

  return _result;
}


EXTC_END
