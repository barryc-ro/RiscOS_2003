/* GENERATED FILE
 * mzalgctn - server stubs
 * from <Obey$Dir>.mzalgctn/i
 */

#ifndef YO_ORACLE
#include <yo.h>
#endif

#ifndef YOCOA_ORACLE
#include <yocoa.h>
#endif
#include <mzalgctnC/c>

EXTC_START

/* Server stubs for interface ::mza::LgCtnt */
static void mza_LgCtnt_getAtr_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_LgCtnt_getAtr_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_LgCtnt__tyimpl*)impldef)->getAtr)( (mza_LgCtnt)or, ev,*(boolean*)args[0],(mza_LgCtntAtr*)args[1]);
}

static void mza_LgCtnt_destroy_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_LgCtnt_destroy_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_LgCtnt__tyimpl*)impldef)->destroy)( (mza_LgCtnt)or, ev);
}

static void mza_LgCtnt_getAtrClipByPos_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_LgCtnt_getAtrClipByPos_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_LgCtnt__tyimpl*)impldef)->getAtrClipByPos)( (mza_LgCtnt)or, ev,*(sb4*)args[0],(mza_ClipAtr*)args[1]);
}

static void mza_LgCtnt_lstAtrClips_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_LgCtnt_lstAtrClips_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mza_ClipAtrLst*)args[0] = (*((struct mza_LgCtnt__tyimpl*)impldef)->lstAtrClips)( (mza_LgCtnt)or, ev,(mza_Itr*)args[1]);
}

static void mza_LgCtnt_addClip_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_LgCtnt_addClip_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(sb4*)args[0] = (*((struct mza_LgCtnt__tyimpl*)impldef)->addClip)( (mza_LgCtnt)or, ev,*(mza_Clip*)args[1]);
}

static void mza_LgCtnt_addClipByPos_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_LgCtnt_addClipByPos_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_LgCtnt__tyimpl*)impldef)->addClipByPos)( (mza_LgCtnt)or, ev,*(mza_Clip*)args[0],*(sb4*)args[1]);
}

static void mza_LgCtnt_delClip_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_LgCtnt_delClip_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_LgCtnt__tyimpl*)impldef)->delClip)( (mza_LgCtnt)or, ev,*(mza_Clip*)args[0]);
}

static void mza_LgCtnt_delClipByPos_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_LgCtnt_delClipByPos_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_LgCtnt__tyimpl*)impldef)->delClipByPos)( (mza_LgCtnt)or, ev,*(sb4*)args[0]);
}

static void mza_LgCtnt__get_name_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_LgCtnt__get_name_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(char**)args[0] = (*((struct mza_LgCtnt__tyimpl*)impldef)->_get_name)( (mza_LgCtnt)or, ev);
}

static void mza_LgCtnt__set_name_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_LgCtnt__set_name_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_LgCtnt__tyimpl*)impldef)->_set_name)( (mza_LgCtnt)or, ev,*(char**)args[0]);
}

static void mza_LgCtnt__get_desc_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_LgCtnt__get_desc_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(char**)args[0] = (*((struct mza_LgCtnt__tyimpl*)impldef)->_get_desc)( (mza_LgCtnt)or, ev);
}

static void mza_LgCtnt__set_desc_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_LgCtnt__set_desc_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_LgCtnt__tyimpl*)impldef)->_set_desc)( (mza_LgCtnt)or, ev,*(char**)args[0]);
}

static void mza_LgCtnt__get_msecs_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_LgCtnt__get_msecs_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(sb4*)args[0] = (*((struct mza_LgCtnt__tyimpl*)impldef)->_get_msecs)( (mza_LgCtnt)or, ev);
}

static void mza_LgCtnt__get_numClips_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_LgCtnt__get_numClips_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(sb4*)args[0] = (*((struct mza_LgCtnt__tyimpl*)impldef)->_get_numClips)( (mza_LgCtnt)or, ev);
}

yostub* mza_LgCtnt__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*14), "yostubs");
  _result->widen = (yowiden)0;
  _result->bases = (const char**)0;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "getAtr";
  _stubs[0].parms = mza_LgCtnt_getAtr_pars;
  _stubs[0].oper = mza_LgCtnt_getAtr_s;
  _stubs[1].opernm = "destroy";
  _stubs[1].parms = mza_LgCtnt_destroy_pars;
  _stubs[1].oper = mza_LgCtnt_destroy_s;
  _stubs[2].opernm = "getAtrClipByPos";
  _stubs[2].parms = mza_LgCtnt_getAtrClipByPos_pars;
  _stubs[2].oper = mza_LgCtnt_getAtrClipByPos_s;
  _stubs[3].opernm = "lstAtrClips";
  _stubs[3].parms = mza_LgCtnt_lstAtrClips_pars;
  _stubs[3].oper = mza_LgCtnt_lstAtrClips_s;
  _stubs[4].opernm = "addClip";
  _stubs[4].parms = mza_LgCtnt_addClip_pars;
  _stubs[4].oper = mza_LgCtnt_addClip_s;
  _stubs[5].opernm = "addClipByPos";
  _stubs[5].parms = mza_LgCtnt_addClipByPos_pars;
  _stubs[5].oper = mza_LgCtnt_addClipByPos_s;
  _stubs[6].opernm = "delClip";
  _stubs[6].parms = mza_LgCtnt_delClip_pars;
  _stubs[6].oper = mza_LgCtnt_delClip_s;
  _stubs[7].opernm = "delClipByPos";
  _stubs[7].parms = mza_LgCtnt_delClipByPos_pars;
  _stubs[7].oper = mza_LgCtnt_delClipByPos_s;
  _stubs[8].opernm = "_get_name";
  _stubs[8].parms = mza_LgCtnt__get_name_pars;
  _stubs[8].oper = mza_LgCtnt__get_name_s;
  _stubs[9].opernm = "_set_name";
  _stubs[9].parms = mza_LgCtnt__set_name_pars;
  _stubs[9].oper = mza_LgCtnt__set_name_s;
  _stubs[10].opernm = "_get_desc";
  _stubs[10].parms = mza_LgCtnt__get_desc_pars;
  _stubs[10].oper = mza_LgCtnt__get_desc_s;
  _stubs[11].opernm = "_set_desc";
  _stubs[11].parms = mza_LgCtnt__set_desc_pars;
  _stubs[11].oper = mza_LgCtnt__set_desc_s;
  _stubs[12].opernm = "_get_msecs";
  _stubs[12].parms = mza_LgCtnt__get_msecs_pars;
  _stubs[12].oper = mza_LgCtnt__get_msecs_s;
  _stubs[13].opernm = "_get_numClips";
  _stubs[13].parms = mza_LgCtnt__get_numClips_pars;
  _stubs[13].oper = mza_LgCtnt__get_numClips_s;
  _stubs[14].opernm = (const char*)0;
  _stubs[14].parms = (yopar*)0;
  _stubs[14].oper = (void (*)(void *,yoenv*,void *,void **))0;

  return _result;
}

/* Server stubs for interface ::mza::LgCtntFac */
static void mza_LgCtntFac_create_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_LgCtntFac_create_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mza_LgCtnt*)args[0] = (*((struct mza_LgCtntFac__tyimpl*)impldef)->create)( (mza_LgCtntFac)or, ev,*(char**)args[1],*(char**)args[2]);
}

static void mza_LgCtntFac_createCtnt_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_LgCtntFac_createCtnt_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mza_LgCtnt*)args[0] = (*((struct mza_LgCtntFac__tyimpl*)impldef)->createCtnt)( (mza_LgCtntFac)or, ev,(mza_CtntAtr*)args[1],(mza_Clip*)args[2],(mza_Ctnt*)args[3]);
}

yostub* mza_LgCtntFac__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*2), "yostubs");
  _result->widen = (yowiden)0;
  _result->bases = (const char**)0;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "create";
  _stubs[0].parms = mza_LgCtntFac_create_pars;
  _stubs[0].oper = mza_LgCtntFac_create_s;
  _stubs[1].opernm = "createCtnt";
  _stubs[1].parms = mza_LgCtntFac_createCtnt_pars;
  _stubs[1].oper = mza_LgCtntFac_createCtnt_s;
  _stubs[2].opernm = (const char*)0;
  _stubs[2].parms = (yopar*)0;
  _stubs[2].oper = (void (*)(void *,yoenv*,void *,void **))0;

  return _result;
}

/* Server stubs for interface ::mza::LgCtntMgmt */
static void mza_LgCtntMgmt_lstAtr_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_LgCtntMgmt_lstAtr_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mza_LgCtntAtrLst*)args[0] = (*((struct mza_LgCtntMgmt__tyimpl*)impldef)->lstAtr)( (mza_LgCtntMgmt)or, ev,*(boolean*)args[1],(mza_Itr*)args[2]);
}

static void mza_LgCtntMgmt_lstAtrByNm_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_LgCtntMgmt_lstAtrByNm_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mza_LgCtntAtrLst*)args[0] = (*((struct mza_LgCtntMgmt__tyimpl*)impldef)->lstAtrByNm)( (mza_LgCtntMgmt)or, ev,*(char**)args[1],*(boolean*)args[2],(mza_Itr*)args[3]);
}

static void mza_LgCtntMgmt_usingDB_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_LgCtntMgmt_usingDB_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(boolean*)args[0] = (*((struct mza_LgCtntMgmt__tyimpl*)impldef)->usingDB)( (mza_LgCtntMgmt)or, ev);
}

yostub* mza_LgCtntMgmt__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*3), "yostubs");
  _result->widen = (yowiden)0;
  _result->bases = (const char**)0;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "lstAtr";
  _stubs[0].parms = mza_LgCtntMgmt_lstAtr_pars;
  _stubs[0].oper = mza_LgCtntMgmt_lstAtr_s;
  _stubs[1].opernm = "lstAtrByNm";
  _stubs[1].parms = mza_LgCtntMgmt_lstAtrByNm_pars;
  _stubs[1].oper = mza_LgCtntMgmt_lstAtrByNm_s;
  _stubs[2].opernm = "usingDB";
  _stubs[2].parms = mza_LgCtntMgmt_usingDB_pars;
  _stubs[2].oper = mza_LgCtntMgmt_usingDB_s;
  _stubs[3].opernm = (const char*)0;
  _stubs[3].parms = (yopar*)0;
  _stubs[3].oper = (void (*)(void *,yoenv*,void *,void **))0;

  return _result;
}

/* Server stubs for interface ::mza::Clip */
static void mza_Clip_getAtr_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_Clip_getAtr_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_Clip__tyimpl*)impldef)->getAtr)( (mza_Clip)or, ev,(mza_ClipAtr*)args[0]);
}

static void mza_Clip_destroy_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_Clip_destroy_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_Clip__tyimpl*)impldef)->destroy)( (mza_Clip)or, ev);
}

static void mza_Clip__get_ctntOR_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_Clip__get_ctntOR_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mza_Ctnt*)args[0] = (*((struct mza_Clip__tyimpl*)impldef)->_get_ctntOR)( (mza_Clip)or, ev);
}

static void mza_Clip__set_ctntOR_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_Clip__set_ctntOR_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_Clip__tyimpl*)impldef)->_set_ctntOR)( (mza_Clip)or, ev,*(mza_Ctnt*)args[0]);
}

static void mza_Clip__get_name_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_Clip__get_name_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(char**)args[0] = (*((struct mza_Clip__tyimpl*)impldef)->_get_name)( (mza_Clip)or, ev);
}

static void mza_Clip__set_name_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_Clip__set_name_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_Clip__tyimpl*)impldef)->_set_name)( (mza_Clip)or, ev,*(char**)args[0]);
}

static void mza_Clip__get_desc_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_Clip__get_desc_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(char**)args[0] = (*((struct mza_Clip__tyimpl*)impldef)->_get_desc)( (mza_Clip)or, ev);
}

static void mza_Clip__set_desc_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_Clip__set_desc_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_Clip__tyimpl*)impldef)->_set_desc)( (mza_Clip)or, ev,*(char**)args[0]);
}

static void mza_Clip__get_startPos_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_Clip__get_startPos_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mkd_pos*)args[0] = (*((struct mza_Clip__tyimpl*)impldef)->_get_startPos)( (mza_Clip)or, ev);
}

static void mza_Clip__set_startPos_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_Clip__set_startPos_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_Clip__tyimpl*)impldef)->_set_startPos)( (mza_Clip)or, ev,(mkd_pos*)args[0]);
}

static void mza_Clip__get_stopPos_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_Clip__get_stopPos_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mkd_pos*)args[0] = (*((struct mza_Clip__tyimpl*)impldef)->_get_stopPos)( (mza_Clip)or, ev);
}

static void mza_Clip__set_stopPos_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_Clip__set_stopPos_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_Clip__tyimpl*)impldef)->_set_stopPos)( (mza_Clip)or, ev,(mkd_pos*)args[0]);
}

yostub* mza_Clip__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*12), "yostubs");
  _result->widen = (yowiden)0;
  _result->bases = (const char**)0;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "getAtr";
  _stubs[0].parms = mza_Clip_getAtr_pars;
  _stubs[0].oper = mza_Clip_getAtr_s;
  _stubs[1].opernm = "destroy";
  _stubs[1].parms = mza_Clip_destroy_pars;
  _stubs[1].oper = mza_Clip_destroy_s;
  _stubs[2].opernm = "_get_ctntOR";
  _stubs[2].parms = mza_Clip__get_ctntOR_pars;
  _stubs[2].oper = mza_Clip__get_ctntOR_s;
  _stubs[3].opernm = "_set_ctntOR";
  _stubs[3].parms = mza_Clip__set_ctntOR_pars;
  _stubs[3].oper = mza_Clip__set_ctntOR_s;
  _stubs[4].opernm = "_get_name";
  _stubs[4].parms = mza_Clip__get_name_pars;
  _stubs[4].oper = mza_Clip__get_name_s;
  _stubs[5].opernm = "_set_name";
  _stubs[5].parms = mza_Clip__set_name_pars;
  _stubs[5].oper = mza_Clip__set_name_s;
  _stubs[6].opernm = "_get_desc";
  _stubs[6].parms = mza_Clip__get_desc_pars;
  _stubs[6].oper = mza_Clip__get_desc_s;
  _stubs[7].opernm = "_set_desc";
  _stubs[7].parms = mza_Clip__set_desc_pars;
  _stubs[7].oper = mza_Clip__set_desc_s;
  _stubs[8].opernm = "_get_startPos";
  _stubs[8].parms = mza_Clip__get_startPos_pars;
  _stubs[8].oper = mza_Clip__get_startPos_s;
  _stubs[9].opernm = "_set_startPos";
  _stubs[9].parms = mza_Clip__set_startPos_pars;
  _stubs[9].oper = mza_Clip__set_startPos_s;
  _stubs[10].opernm = "_get_stopPos";
  _stubs[10].parms = mza_Clip__get_stopPos_pars;
  _stubs[10].oper = mza_Clip__get_stopPos_s;
  _stubs[11].opernm = "_set_stopPos";
  _stubs[11].parms = mza_Clip__set_stopPos_pars;
  _stubs[11].oper = mza_Clip__set_stopPos_s;
  _stubs[12].opernm = (const char*)0;
  _stubs[12].parms = (yopar*)0;
  _stubs[12].oper = (void (*)(void *,yoenv*,void *,void **))0;

  return _result;
}

/* Server stubs for interface ::mza::ClipFac */
static void mza_ClipFac_create_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_ClipFac_create_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mza_Clip*)args[0] = (*((struct mza_ClipFac__tyimpl*)impldef)->create)( (mza_ClipFac)or, ev,*(mza_Ctnt*)args[1],*(char**)args[2],*(char**)args[3],(mkd_pos*)args[4],(mkd_pos*)args[5]);
}

yostub* mza_ClipFac__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*1), "yostubs");
  _result->widen = (yowiden)0;
  _result->bases = (const char**)0;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "create";
  _stubs[0].parms = mza_ClipFac_create_pars;
  _stubs[0].oper = mza_ClipFac_create_s;
  _stubs[1].opernm = (const char*)0;
  _stubs[1].parms = (yopar*)0;
  _stubs[1].oper = (void (*)(void *,yoenv*,void *,void **))0;

  return _result;
}

/* Server stubs for interface ::mza::ClipMgmt */
static void mza_ClipMgmt_lstAtr_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_ClipMgmt_lstAtr_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mza_ClipAtrLst*)args[0] = (*((struct mza_ClipMgmt__tyimpl*)impldef)->lstAtr)( (mza_ClipMgmt)or, ev,(mza_Itr*)args[1]);
}

static void mza_ClipMgmt_lstAtrByCtnt_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_ClipMgmt_lstAtrByCtnt_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mza_ClipAtrLst*)args[0] = (*((struct mza_ClipMgmt__tyimpl*)impldef)->lstAtrByCtnt)( (mza_ClipMgmt)or, ev,*(mza_Ctnt*)args[1],(mza_Itr*)args[2]);
}

static void mza_ClipMgmt_lstAtrByNm_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_ClipMgmt_lstAtrByNm_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mza_ClipAtrLst*)args[0] = (*((struct mza_ClipMgmt__tyimpl*)impldef)->lstAtrByNm)( (mza_ClipMgmt)or, ev,*(char**)args[1],(mza_Itr*)args[2]);
}

yostub* mza_ClipMgmt__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*3), "yostubs");
  _result->widen = (yowiden)0;
  _result->bases = (const char**)0;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "lstAtr";
  _stubs[0].parms = mza_ClipMgmt_lstAtr_pars;
  _stubs[0].oper = mza_ClipMgmt_lstAtr_s;
  _stubs[1].opernm = "lstAtrByCtnt";
  _stubs[1].parms = mza_ClipMgmt_lstAtrByCtnt_pars;
  _stubs[1].oper = mza_ClipMgmt_lstAtrByCtnt_s;
  _stubs[2].opernm = "lstAtrByNm";
  _stubs[2].parms = mza_ClipMgmt_lstAtrByNm_pars;
  _stubs[2].oper = mza_ClipMgmt_lstAtrByNm_s;
  _stubs[3].opernm = (const char*)0;
  _stubs[3].parms = (yopar*)0;
  _stubs[3].oper = (void (*)(void *,yoenv*,void *,void **))0;

  return _result;
}

/* Server stubs for interface ::mza::Ctnt */
static void mza_Ctnt_updateStats_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_Ctnt_updateStats_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_Ctnt__tyimpl*)impldef)->updateStats)( (mza_Ctnt)or, ev,*(sysb8*)args[0],*(sb4*)args[1],*(sb4*)args[2],*(char**)args[3]);
}

static void mza_Ctnt_updateSugBufSz_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_Ctnt_updateSugBufSz_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_Ctnt__tyimpl*)impldef)->updateSugBufSz)( (mza_Ctnt)or, ev,*(sb4*)args[0]);
}

static void mza_Ctnt_updateTimes_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_Ctnt_updateTimes_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_Ctnt__tyimpl*)impldef)->updateTimes)( (mza_Ctnt)or, ev,*(sysb8*)args[0],*(sysb8*)args[1]);
}

static void mza_Ctnt_setAtr_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_Ctnt_setAtr_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_Ctnt__tyimpl*)impldef)->setAtr)( (mza_Ctnt)or, ev,(mza_CtntAtr*)args[0]);
}

static void mza_Ctnt_getAtr_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_Ctnt_getAtr_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_Ctnt__tyimpl*)impldef)->getAtr)( (mza_Ctnt)or, ev,(mza_CtntAtr*)args[0]);
}

static void mza_Ctnt_destroy_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_Ctnt_destroy_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_Ctnt__tyimpl*)impldef)->destroy)( (mza_Ctnt)or, ev,*(boolean*)args[0]);
}

yostub* mza_Ctnt__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*6), "yostubs");
  _result->widen = (yowiden)0;
  _result->bases = (const char**)0;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "updateStats";
  _stubs[0].parms = mza_Ctnt_updateStats_pars;
  _stubs[0].oper = mza_Ctnt_updateStats_s;
  _stubs[1].opernm = "updateSugBufSz";
  _stubs[1].parms = mza_Ctnt_updateSugBufSz_pars;
  _stubs[1].oper = mza_Ctnt_updateSugBufSz_s;
  _stubs[2].opernm = "updateTimes";
  _stubs[2].parms = mza_Ctnt_updateTimes_pars;
  _stubs[2].oper = mza_Ctnt_updateTimes_s;
  _stubs[3].opernm = "setAtr";
  _stubs[3].parms = mza_Ctnt_setAtr_pars;
  _stubs[3].oper = mza_Ctnt_setAtr_s;
  _stubs[4].opernm = "getAtr";
  _stubs[4].parms = mza_Ctnt_getAtr_pars;
  _stubs[4].oper = mza_Ctnt_getAtr_s;
  _stubs[5].opernm = "destroy";
  _stubs[5].parms = mza_Ctnt_destroy_pars;
  _stubs[5].oper = mza_Ctnt_destroy_s;
  _stubs[6].opernm = (const char*)0;
  _stubs[6].parms = (yopar*)0;
  _stubs[6].oper = (void (*)(void *,yoenv*,void *,void **))0;

  return _result;
}

/* Server stubs for interface ::mza::CtntFac */
static void mza_CtntFac_create_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_CtntFac_create_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mza_Ctnt*)args[0] = (*((struct mza_CtntFac__tyimpl*)impldef)->create)( (mza_CtntFac)or, ev,(mza_CtntAtr*)args[1]);
}

yostub* mza_CtntFac__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*1), "yostubs");
  _result->widen = (yowiden)0;
  _result->bases = (const char**)0;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "create";
  _stubs[0].parms = mza_CtntFac_create_pars;
  _stubs[0].oper = mza_CtntFac_create_s;
  _stubs[1].opernm = (const char*)0;
  _stubs[1].parms = (yopar*)0;
  _stubs[1].oper = (void (*)(void *,yoenv*,void *,void **))0;

  return _result;
}

/* Server stubs for interface ::mza::CtntMgmt */
static void mza_CtntMgmt_lstAtr_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_CtntMgmt_lstAtr_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mza_CtntAtrLst*)args[0] = (*((struct mza_CtntMgmt__tyimpl*)impldef)->lstAtr)( (mza_CtntMgmt)or, ev,(mza_Itr*)args[1]);
}

static void mza_CtntMgmt_lstAtrByNm_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_CtntMgmt_lstAtrByNm_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mza_CtntAtrLst*)args[0] = (*((struct mza_CtntMgmt__tyimpl*)impldef)->lstAtrByNm)( (mza_CtntMgmt)or, ev,*(char**)args[1],(mza_Itr*)args[2]);
}

static void mza_CtntMgmt_lstAtrByFileNm_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_CtntMgmt_lstAtrByFileNm_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mza_CtntAtrLst*)args[0] = (*((struct mza_CtntMgmt__tyimpl*)impldef)->lstAtrByFileNm)( (mza_CtntMgmt)or, ev,*(char**)args[1],(mza_Itr*)args[2]);
}

yostub* mza_CtntMgmt__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*3), "yostubs");
  _result->widen = (yowiden)0;
  _result->bases = (const char**)0;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "lstAtr";
  _stubs[0].parms = mza_CtntMgmt_lstAtr_pars;
  _stubs[0].oper = mza_CtntMgmt_lstAtr_s;
  _stubs[1].opernm = "lstAtrByNm";
  _stubs[1].parms = mza_CtntMgmt_lstAtrByNm_pars;
  _stubs[1].oper = mza_CtntMgmt_lstAtrByNm_s;
  _stubs[2].opernm = "lstAtrByFileNm";
  _stubs[2].parms = mza_CtntMgmt_lstAtrByFileNm_pars;
  _stubs[2].oper = mza_CtntMgmt_lstAtrByFileNm_s;
  _stubs[3].opernm = (const char*)0;
  _stubs[3].parms = (yopar*)0;
  _stubs[3].oper = (void (*)(void *,yoenv*,void *,void **))0;

  return _result;
}

/* Server stubs for interface ::mza::CtntPvdr */
static void mza_CtntPvdr_getAtr_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_CtntPvdr_getAtr_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_CtntPvdr__tyimpl*)impldef)->getAtr)( (mza_CtntPvdr)or, ev,(mza_CtntPvdrAtr*)args[0]);
}

static void mza_CtntPvdr_destroy_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_CtntPvdr_destroy_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_CtntPvdr__tyimpl*)impldef)->destroy)( (mza_CtntPvdr)or, ev);
}

static void mza_CtntPvdr__get_name_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_CtntPvdr__get_name_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(char**)args[0] = (*((struct mza_CtntPvdr__tyimpl*)impldef)->_get_name)( (mza_CtntPvdr)or, ev);
}

static void mza_CtntPvdr__set_name_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_CtntPvdr__set_name_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_CtntPvdr__tyimpl*)impldef)->_set_name)( (mza_CtntPvdr)or, ev,*(char**)args[0]);
}

static void mza_CtntPvdr__get_desc_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_CtntPvdr__get_desc_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(char**)args[0] = (*((struct mza_CtntPvdr__tyimpl*)impldef)->_get_desc)( (mza_CtntPvdr)or, ev);
}

static void mza_CtntPvdr__set_desc_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_CtntPvdr__set_desc_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_CtntPvdr__tyimpl*)impldef)->_set_desc)( (mza_CtntPvdr)or, ev,*(char**)args[0]);
}

yostub* mza_CtntPvdr__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*6), "yostubs");
  _result->widen = (yowiden)0;
  _result->bases = (const char**)0;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "getAtr";
  _stubs[0].parms = mza_CtntPvdr_getAtr_pars;
  _stubs[0].oper = mza_CtntPvdr_getAtr_s;
  _stubs[1].opernm = "destroy";
  _stubs[1].parms = mza_CtntPvdr_destroy_pars;
  _stubs[1].oper = mza_CtntPvdr_destroy_s;
  _stubs[2].opernm = "_get_name";
  _stubs[2].parms = mza_CtntPvdr__get_name_pars;
  _stubs[2].oper = mza_CtntPvdr__get_name_s;
  _stubs[3].opernm = "_set_name";
  _stubs[3].parms = mza_CtntPvdr__set_name_pars;
  _stubs[3].oper = mza_CtntPvdr__set_name_s;
  _stubs[4].opernm = "_get_desc";
  _stubs[4].parms = mza_CtntPvdr__get_desc_pars;
  _stubs[4].oper = mza_CtntPvdr__get_desc_s;
  _stubs[5].opernm = "_set_desc";
  _stubs[5].parms = mza_CtntPvdr__set_desc_pars;
  _stubs[5].oper = mza_CtntPvdr__set_desc_s;
  _stubs[6].opernm = (const char*)0;
  _stubs[6].parms = (yopar*)0;
  _stubs[6].oper = (void (*)(void *,yoenv*,void *,void **))0;

  return _result;
}

/* Server stubs for interface ::mza::CtntPvdrFac */
static void mza_CtntPvdrFac_create_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_CtntPvdrFac_create_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mza_CtntPvdr*)args[0] = (*((struct mza_CtntPvdrFac__tyimpl*)impldef)->create)( (mza_CtntPvdrFac)or, ev,*(char**)args[1],*(char**)args[2]);
}

yostub* mza_CtntPvdrFac__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*1), "yostubs");
  _result->widen = (yowiden)0;
  _result->bases = (const char**)0;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "create";
  _stubs[0].parms = mza_CtntPvdrFac_create_pars;
  _stubs[0].oper = mza_CtntPvdrFac_create_s;
  _stubs[1].opernm = (const char*)0;
  _stubs[1].parms = (yopar*)0;
  _stubs[1].oper = (void (*)(void *,yoenv*,void *,void **))0;

  return _result;
}

/* Server stubs for interface ::mza::CtntPvdrMgmt */
static void mza_CtntPvdrMgmt_lstAtr_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_CtntPvdrMgmt_lstAtr_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mza_CtntPvdrAtrLst*)args[0] = (*((struct mza_CtntPvdrMgmt__tyimpl*)impldef)->lstAtr)( (mza_CtntPvdrMgmt)or, ev,(mza_Itr*)args[1]);
}

static void mza_CtntPvdrMgmt_getAtrByNm_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_CtntPvdrMgmt_getAtrByNm_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  (*((struct mza_CtntPvdrMgmt__tyimpl*)impldef)->getAtrByNm)( (mza_CtntPvdrMgmt)or, ev,*(char**)args[0],(mza_CtntPvdrAtr*)args[1]);
}

yostub* mza_CtntPvdrMgmt__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*2), "yostubs");
  _result->widen = (yowiden)0;
  _result->bases = (const char**)0;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "lstAtr";
  _stubs[0].parms = mza_CtntPvdrMgmt_lstAtr_pars;
  _stubs[0].oper = mza_CtntPvdrMgmt_lstAtr_s;
  _stubs[1].opernm = "getAtrByNm";
  _stubs[1].parms = mza_CtntPvdrMgmt_getAtrByNm_pars;
  _stubs[1].oper = mza_CtntPvdrMgmt_getAtrByNm_s;
  _stubs[2].opernm = (const char*)0;
  _stubs[2].parms = (yopar*)0;
  _stubs[2].oper = (void (*)(void *,yoenv*,void *,void **))0;

  return _result;
}

/* Server stubs for interface ::mza::BlobMgmt */
static void mza_BlobMgmt_lstAtrByNm_s( void * or, yoenv* ev, void * impldef, void ** args);

static void mza_BlobMgmt_lstAtrByNm_s( void * or, yoenv* ev, void * impldef, void ** args)
{
  *(mza_LgCtntAtrLst*)args[0] = (*((struct mza_BlobMgmt__tyimpl*)impldef)->lstAtrByNm)( (mza_BlobMgmt)or, ev,*(char**)args[1],(mza_Itr*)args[2]);
}

yostub* mza_BlobMgmt__getStubs(void)
{
  yostub* _result;
  yostbb* _stubs;

  _result = (yostub*) ysmGlbAlloc( sizeof(yostub)+(sizeof(yostbb)*1), "yostubs");
  _result->widen = (yowiden)0;
  _result->bases = (const char**)0;
  _stubs = &(_result->stuba[0]);

  _stubs[0].opernm = "lstAtrByNm";
  _stubs[0].parms = mza_BlobMgmt_lstAtrByNm_pars;
  _stubs[0].oper = mza_BlobMgmt_lstAtrByNm_s;
  _stubs[1].opernm = (const char*)0;
  _stubs[1].parms = (yopar*)0;
  _stubs[1].oper = (void (*)(void *,yoenv*,void *,void **))0;

  return _result;
}


EXTC_END
