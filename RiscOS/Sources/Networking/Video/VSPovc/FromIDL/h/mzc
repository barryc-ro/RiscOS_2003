/* GENERATED FILE
 * mzc - public declarations
 * from mzc.idl
 */

#ifndef MZC_IDL
#define MZC_IDL

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif

EXTC_START

/**********  SEQUENCE DECLARATIONS *********/
#ifndef mzc_netproto_DECLARED
#define mzc_netproto_DECLARED
typedef struct mzc_netproto mzc_netproto;
#endif /* mzc_netproto_DECLARED */

#ifndef YCIDL_sequence_mzc_netproto_DEFINED
#define YCIDL_sequence_mzc_netproto_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_netproto* _buffer;
} YCIDL_sequence_mzc_netproto;
#ifndef YCIDL_sequence_mzc_netproto_SUPP_FUNCS
#define YCIDL_sequence_mzc_netproto_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_netproto_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_netproto_DEFINED */

#ifndef mzc_netapi_DECLARED
#define mzc_netapi_DECLARED
typedef struct mzc_netapi mzc_netapi;
#endif /* mzc_netapi_DECLARED */

#ifndef YCIDL_sequence_mzc_netapi_DEFINED
#define YCIDL_sequence_mzc_netapi_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_netapi* _buffer;
} YCIDL_sequence_mzc_netapi;
#ifndef YCIDL_sequence_mzc_netapi_SUPP_FUNCS
#define YCIDL_sequence_mzc_netapi_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_netapi_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_netapi_DEFINED */

#ifndef mzc_netif_DECLARED
#define mzc_netif_DECLARED
typedef struct mzc_netif mzc_netif;
#endif /* mzc_netif_DECLARED */

#ifndef YCIDL_sequence_mzc_netif_DEFINED
#define YCIDL_sequence_mzc_netif_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_netif* _buffer;
} YCIDL_sequence_mzc_netif;
#ifndef YCIDL_sequence_mzc_netif_SUPP_FUNCS
#define YCIDL_sequence_mzc_netif_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_netif_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_netif_DEFINED */

#ifndef mzc_pktinfo_DECLARED
#define mzc_pktinfo_DECLARED
typedef struct mzc_pktinfo mzc_pktinfo;
#endif /* mzc_pktinfo_DECLARED */

#ifndef YCIDL_sequence_mzc_pktinfo_DEFINED
#define YCIDL_sequence_mzc_pktinfo_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_pktinfo* _buffer;
} YCIDL_sequence_mzc_pktinfo;
#ifndef YCIDL_sequence_mzc_pktinfo_SUPP_FUNCS
#define YCIDL_sequence_mzc_pktinfo_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_pktinfo_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_pktinfo_DEFINED */

#ifndef mzc_link_DECLARED
#define mzc_link_DECLARED
typedef struct mzc_link mzc_link;
#endif /* mzc_link_DECLARED */

#ifndef YCIDL_sequence_mzc_link_DEFINED
#define YCIDL_sequence_mzc_link_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_link* _buffer;
} YCIDL_sequence_mzc_link;
#ifndef YCIDL_sequence_mzc_link_SUPP_FUNCS
#define YCIDL_sequence_mzc_link_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_link_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_link_DEFINED */

#ifndef mzc_chnlInfo_DECLARED
#define mzc_chnlInfo_DECLARED
typedef struct mzc_chnlInfo mzc_chnlInfo;
#endif /* mzc_chnlInfo_DECLARED */

#ifndef YCIDL_sequence_mzc_chnlInfo_DEFINED
#define YCIDL_sequence_mzc_chnlInfo_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_chnlInfo* _buffer;
} YCIDL_sequence_mzc_chnlInfo;
#ifndef YCIDL_sequence_mzc_chnlInfo_SUPP_FUNCS
#define YCIDL_sequence_mzc_chnlInfo_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_chnlInfo_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_chnlInfo_DEFINED */

#ifndef mzc_channel_DECLARED
#define mzc_channel_DECLARED
typedef struct mzc_channel mzc_channel;
#endif /* mzc_channel_DECLARED */

#ifndef YCIDL_sequence_mzc_channel_DEFINED
#define YCIDL_sequence_mzc_channel_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_channel* _buffer;
} YCIDL_sequence_mzc_channel;
#ifndef YCIDL_sequence_mzc_channel_SUPP_FUNCS
#define YCIDL_sequence_mzc_channel_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_channel_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_channel_DEFINED */

#ifndef mzc_chnlspec_DECLARED
#define mzc_chnlspec_DECLARED
typedef struct mzc_chnlspec mzc_chnlspec;
#endif /* mzc_chnlspec_DECLARED */

#ifndef YCIDL_sequence_mzc_chnlspec_DEFINED
#define YCIDL_sequence_mzc_chnlspec_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_chnlspec* _buffer;
} YCIDL_sequence_mzc_chnlspec;
#ifndef YCIDL_sequence_mzc_chnlspec_SUPP_FUNCS
#define YCIDL_sequence_mzc_chnlspec_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_chnlspec_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_chnlspec_DEFINED */


/* interface mzc_chnl declarations */
#ifndef mzc_chnl_DECLARED
#define mzc_chnl_DECLARED
typedef struct YCmzc_chnl* mzc_chnl;
CONST yotk* mzc_chnl__getTC(void);
#ifndef YCTC_mzc_chnl
#define YCTC_mzc_chnl   (mzc_chnl__getTC())
#endif
#endif /* mzc_chnl_DECLARED */

#ifndef mzc_chnl_SUPP_FUNCS
#define mzc_chnl_SUPP_FUNCS
void mzc_chnl__free( mzc_chnl* val, ysmff ffunc);
void mzc_chnl__copy( mzc_chnl* dest, mzc_chnl* src, ysmaf afunc);
#endif /* mzc_chnl_SUPP_FUNCS */

#ifndef YCIDL_sequence_mzc_chnl_DEFINED
#define YCIDL_sequence_mzc_chnl_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_chnl* _buffer;
} YCIDL_sequence_mzc_chnl;
#ifndef YCIDL_sequence_mzc_chnl_SUPP_FUNCS
#define YCIDL_sequence_mzc_chnl_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_chnl_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_chnl_DEFINED */

#ifndef mzc_cktInfo_DECLARED
#define mzc_cktInfo_DECLARED
typedef struct mzc_cktInfo mzc_cktInfo;
#endif /* mzc_cktInfo_DECLARED */

#ifndef YCIDL_sequence_mzc_cktInfo_DEFINED
#define YCIDL_sequence_mzc_cktInfo_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_cktInfo* _buffer;
} YCIDL_sequence_mzc_cktInfo;
#ifndef YCIDL_sequence_mzc_cktInfo_SUPP_FUNCS
#define YCIDL_sequence_mzc_cktInfo_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_cktInfo_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_cktInfo_DEFINED */

#ifndef mzc_circuit_DECLARED
#define mzc_circuit_DECLARED
typedef struct mzc_circuit mzc_circuit;
#endif /* mzc_circuit_DECLARED */

#ifndef YCIDL_sequence_mzc_circuit_DEFINED
#define YCIDL_sequence_mzc_circuit_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_circuit* _buffer;
} YCIDL_sequence_mzc_circuit;
#ifndef YCIDL_sequence_mzc_circuit_SUPP_FUNCS
#define YCIDL_sequence_mzc_circuit_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_circuit_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_circuit_DEFINED */

#ifndef mzc_cktspec_DECLARED
#define mzc_cktspec_DECLARED
typedef struct mzc_cktspec mzc_cktspec;
#endif /* mzc_cktspec_DECLARED */

#ifndef YCIDL_sequence_mzc_cktspec_DEFINED
#define YCIDL_sequence_mzc_cktspec_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_cktspec* _buffer;
} YCIDL_sequence_mzc_cktspec;
#ifndef YCIDL_sequence_mzc_cktspec_SUPP_FUNCS
#define YCIDL_sequence_mzc_cktspec_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_cktspec_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_cktspec_DEFINED */


/* interface mzc_ckt declarations */
#ifndef mzc_ckt_DECLARED
#define mzc_ckt_DECLARED
typedef struct YCmzc_ckt* mzc_ckt;
CONST yotk* mzc_ckt__getTC(void);
#ifndef YCTC_mzc_ckt
#define YCTC_mzc_ckt   (mzc_ckt__getTC())
#endif
#endif /* mzc_ckt_DECLARED */

#ifndef mzc_ckt_SUPP_FUNCS
#define mzc_ckt_SUPP_FUNCS
void mzc_ckt__free( mzc_ckt* val, ysmff ffunc);
void mzc_ckt__copy( mzc_ckt* dest, mzc_ckt* src, ysmaf afunc);
#endif /* mzc_ckt_SUPP_FUNCS */

#ifndef YCIDL_sequence_mzc_ckt_DEFINED
#define YCIDL_sequence_mzc_ckt_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_ckt* _buffer;
} YCIDL_sequence_mzc_ckt;
#ifndef YCIDL_sequence_mzc_ckt_SUPP_FUNCS
#define YCIDL_sequence_mzc_ckt_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_ckt_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_ckt_DEFINED */

/******* NON-SEQUENCE DECLARATIONS *******/
#ifndef mzc_transportType_DECLARED
#define mzc_transportType_DECLARED
typedef ub4 mzc_transportType;
CONST yotk* mzc_transportType__getTC(void);
#ifndef YCTC_mzc_transportType
#define YCTC_mzc_transportType   (mzc_transportType__getTC())
#endif
#endif /* mzc_transportType_DECLARED */

#ifndef mzc_transportType_DEFINED
#define mzc_transportType_DEFINED
#define mzc_transportTypeNone ((mzc_transportType) 0)
#define mzc_transportTypeOGF ((mzc_transportType) 1)
#define mzc_transportTypeMPEG2 ((mzc_transportType) 2)
#define mzc_transportTypeDSMCC_UN ((mzc_transportType) 3)
#endif /* mzc_transportType_DEFINED */

#ifndef mzc_transportType_SUPP_FUNCS
#define mzc_transportType_SUPP_FUNCS
void mzc_transportType__free( mzc_transportType* val, ysmff ffunc);
void mzc_transportType__copy( mzc_transportType* dest, mzc_transportType* src, ysmaf afunc);
#endif /* mzc_transportType_SUPP_FUNCS */

#ifndef mzc_channelException_DECLARED
#define mzc_channelException_DECLARED
typedef ub4 mzc_channelException;
CONST yotk* mzc_channelException__getTC(void);
#ifndef YCTC_mzc_channelException
#define YCTC_mzc_channelException   (mzc_channelException__getTC())
#endif
#endif /* mzc_channelException_DECLARED */

#ifndef mzc_channelException_DEFINED
#define mzc_channelException_DEFINED
#define mzc_chnlExNotImplemented ((mzc_channelException) 0)
#define mzc_chnlExOutOfMemory ((mzc_channelException) 1)
#define mzc_chnlExOutOfChannels ((mzc_channelException) 2)
#define mzc_chnlExOutOfBandwidth ((mzc_channelException) 3)
#define mzc_chnlExBadProtocol ((mzc_channelException) 4)
#define mzc_chnlExBadAddress ((mzc_channelException) 5)
#endif /* mzc_channelException_DEFINED */

#ifndef mzc_channelException_SUPP_FUNCS
#define mzc_channelException_SUPP_FUNCS
void mzc_channelException__free( mzc_channelException* val, ysmff ffunc);
void mzc_channelException__copy( mzc_channelException* dest, mzc_channelException* src, ysmaf afunc);
#endif /* mzc_channelException_SUPP_FUNCS */

#ifndef MZC_EX_CHNLEX_DECLARED
#define MZC_EX_CHNLEX_DECLARED
CONST ysid* mzc_chnlEx__getId(void);
#ifndef MZC_EX_CHNLEX
#define MZC_EX_CHNLEX   (mzc_chnlEx__getId())
#endif
#endif /* MZC_EX_CHNLEX_DECLARED */

#ifndef mzc_chnlEx_DECLARED
#define mzc_chnlEx_DECLARED
typedef struct mzc_chnlEx mzc_chnlEx;
#endif /* mzc_chnlEx_DECLARED */

#ifndef mzc_chnlEx_DEFINED
#define mzc_chnlEx_DEFINED
struct mzc_chnlEx
{
  mzc_channelException channelFailType;
};
CONST yotk* mzc_chnlEx__getTC(void);
#ifndef YCTC_mzc_chnlEx
#define YCTC_mzc_chnlEx   (mzc_chnlEx__getTC())
#endif
#endif /* mzc_chnlEx_DEFINED */

#ifndef mzc_chnlEx_SUPP_FUNCS
#define mzc_chnlEx_SUPP_FUNCS
void mzc_chnlEx__free( mzc_chnlEx* val, ysmff ffunc);
void mzc_chnlEx__copy( mzc_chnlEx* dest, mzc_chnlEx* src, ysmaf afunc);
#endif /* mzc_chnlEx_SUPP_FUNCS */

#ifndef mzc_commProperty_DECLARED
#define mzc_commProperty_DECLARED
typedef ub4 mzc_commProperty;
CONST yotk* mzc_commProperty__getTC(void);
#ifndef YCTC_mzc_commProperty
#define YCTC_mzc_commProperty   (mzc_commProperty__getTC())
#endif
#endif /* mzc_commProperty_DECLARED */

#ifndef mzc_commProperty_SUPP_FUNCS
#define mzc_commProperty_SUPP_FUNCS
#endif /* mzc_commProperty_SUPP_FUNCS */

#ifndef mzc_propNull_DECLARED
#define mzc_propNull_DECLARED
#define mzc_propNull ((mzc_commProperty) 0)
#endif /* mzc_propNull_DECLARED */

#ifndef mzc_propDown_DECLARED
#define mzc_propDown_DECLARED
#define mzc_propDown ((mzc_commProperty) 1)
#endif /* mzc_propDown_DECLARED */

#ifndef mzc_propUp_DECLARED
#define mzc_propUp_DECLARED
#define mzc_propUp ((mzc_commProperty) 2)
#endif /* mzc_propUp_DECLARED */

#ifndef mzc_propPointcast_DECLARED
#define mzc_propPointcast_DECLARED
#define mzc_propPointcast ((mzc_commProperty) 16)
#endif /* mzc_propPointcast_DECLARED */

#ifndef mzc_propMulticast_DECLARED
#define mzc_propMulticast_DECLARED
#define mzc_propMulticast ((mzc_commProperty) 32)
#endif /* mzc_propMulticast_DECLARED */

#ifndef mzc_propBroadcast_DECLARED
#define mzc_propBroadcast_DECLARED
#define mzc_propBroadcast ((mzc_commProperty) 64)
#endif /* mzc_propBroadcast_DECLARED */

#ifndef mzc_propControl_DECLARED
#define mzc_propControl_DECLARED
#define mzc_propControl ((mzc_commProperty) 256)
#endif /* mzc_propControl_DECLARED */

#ifndef mzc_propData_DECLARED
#define mzc_propData_DECLARED
#define mzc_propData ((mzc_commProperty) 512)
#endif /* mzc_propData_DECLARED */

#ifndef mzc_propIsochronousData_DECLARED
#define mzc_propIsochronousData_DECLARED
#define mzc_propIsochronousData ((mzc_commProperty) 1024)
#endif /* mzc_propIsochronousData_DECLARED */

#ifndef mzc_propTransientConnect_DECLARED
#define mzc_propTransientConnect_DECLARED
#define mzc_propTransientConnect ((mzc_commProperty) 4096)
#endif /* mzc_propTransientConnect_DECLARED */

#ifndef mzc_propPersistantConnect_DECLARED
#define mzc_propPersistantConnect_DECLARED
#define mzc_propPersistantConnect ((mzc_commProperty) 8192)
#endif /* mzc_propPersistantConnect_DECLARED */

#ifndef mzc_propDisabled_DECLARED
#define mzc_propDisabled_DECLARED
#define mzc_propDisabled ((mzc_commProperty) 65536)
#endif /* mzc_propDisabled_DECLARED */

#ifndef mzc_propGroupDisabled_DECLARED
#define mzc_propGroupDisabled_DECLARED
#define mzc_propGroupDisabled ((mzc_commProperty) 131072)
#endif /* mzc_propGroupDisabled_DECLARED */

#ifndef mzc_logicalAddress_DECLARED
#define mzc_logicalAddress_DECLARED
typedef YCIDL_sequence_ub1 mzc_logicalAddress;
CONST yotk* mzc_logicalAddress__getTC(void);
#ifndef YCTC_mzc_logicalAddress
#define YCTC_mzc_logicalAddress   (mzc_logicalAddress__getTC())
#endif
#endif /* mzc_logicalAddress_DECLARED */

#ifndef mzc_logicalAddress_SUPP_FUNCS
#define mzc_logicalAddress_SUPP_FUNCS
void mzc_logicalAddress__free( mzc_logicalAddress* val, ysmff ffunc);
void mzc_logicalAddress__copy( mzc_logicalAddress* dest, mzc_logicalAddress* src, ysmaf afunc);
#endif /* mzc_logicalAddress_SUPP_FUNCS */


/* interface mzc_chnl declarations */
#ifndef mzc_chnl_DECLARED
#define mzc_chnl_DECLARED
typedef struct YCmzc_chnl* mzc_chnl;
CONST yotk* mzc_chnl__getTC(void);
#ifndef YCTC_mzc_chnl
#define YCTC_mzc_chnl   (mzc_chnl__getTC())
#endif
#endif /* mzc_chnl_DECLARED */

#ifndef mzc_chnl_SUPP_FUNCS
#define mzc_chnl_SUPP_FUNCS
void mzc_chnl__free( mzc_chnl* val, ysmff ffunc);
void mzc_chnl__copy( mzc_chnl* dest, mzc_chnl* src, ysmaf afunc);
#endif /* mzc_chnl_SUPP_FUNCS */

#ifndef mzc_netproto_DECLARED
#define mzc_netproto_DECLARED
typedef struct mzc_netproto mzc_netproto;
#endif /* mzc_netproto_DECLARED */

#ifndef mzc_netproto_DEFINED
#define mzc_netproto_DEFINED
struct mzc_netproto
{
  char* name;
  char* info;
};
CONST yotk* mzc_netproto__getTC(void);
#ifndef YCTC_mzc_netproto
#define YCTC_mzc_netproto   (mzc_netproto__getTC())
#endif
#endif /* mzc_netproto_DEFINED */

#ifndef mzc_netproto_SUPP_FUNCS
#define mzc_netproto_SUPP_FUNCS
void mzc_netproto__free( mzc_netproto* val, ysmff ffunc);
void mzc_netproto__copy( mzc_netproto* dest, mzc_netproto* src, ysmaf afunc);
#endif /* mzc_netproto_SUPP_FUNCS */

#ifndef mzc_netprotos_DECLARED
#define mzc_netprotos_DECLARED
typedef YCIDL_sequence_mzc_netproto mzc_netprotos;
CONST yotk* mzc_netprotos__getTC(void);
#ifndef YCTC_mzc_netprotos
#define YCTC_mzc_netprotos   (mzc_netprotos__getTC())
#endif
#endif /* mzc_netprotos_DECLARED */

#ifndef mzc_netprotos_SUPP_FUNCS
#define mzc_netprotos_SUPP_FUNCS
void mzc_netprotos__free( mzc_netprotos* val, ysmff ffunc);
void mzc_netprotos__copy( mzc_netprotos* dest, mzc_netprotos* src, ysmaf afunc);
#endif /* mzc_netprotos_SUPP_FUNCS */

#ifndef mzc_netapi_DECLARED
#define mzc_netapi_DECLARED
typedef struct mzc_netapi mzc_netapi;
#endif /* mzc_netapi_DECLARED */

#ifndef mzc_netapi_DEFINED
#define mzc_netapi_DEFINED
struct mzc_netapi
{
  char* name;
  YCIDL_sequence_ub1 info;
};
CONST yotk* mzc_netapi__getTC(void);
#ifndef YCTC_mzc_netapi
#define YCTC_mzc_netapi   (mzc_netapi__getTC())
#endif
#endif /* mzc_netapi_DEFINED */

#ifndef mzc_netapi_SUPP_FUNCS
#define mzc_netapi_SUPP_FUNCS
void mzc_netapi__free( mzc_netapi* val, ysmff ffunc);
void mzc_netapi__copy( mzc_netapi* dest, mzc_netapi* src, ysmaf afunc);
#endif /* mzc_netapi_SUPP_FUNCS */

#ifndef mzc_netapis_DECLARED
#define mzc_netapis_DECLARED
typedef YCIDL_sequence_mzc_netapi mzc_netapis;
CONST yotk* mzc_netapis__getTC(void);
#ifndef YCTC_mzc_netapis
#define YCTC_mzc_netapis   (mzc_netapis__getTC())
#endif
#endif /* mzc_netapis_DECLARED */

#ifndef mzc_netapis_SUPP_FUNCS
#define mzc_netapis_SUPP_FUNCS
void mzc_netapis__free( mzc_netapis* val, ysmff ffunc);
void mzc_netapis__copy( mzc_netapis* dest, mzc_netapis* src, ysmaf afunc);
#endif /* mzc_netapis_SUPP_FUNCS */

#ifndef mzc_netif_DECLARED
#define mzc_netif_DECLARED
typedef struct mzc_netif mzc_netif;
#endif /* mzc_netif_DECLARED */

#ifndef mzc_netif_DEFINED
#define mzc_netif_DEFINED
struct mzc_netif
{
  char* name;
  char* hostname;
  char* devicename;
  YCIDL_sequence_ub1 info;
  ub4 curbr;
  ub4 maxbr;
};
CONST yotk* mzc_netif__getTC(void);
#ifndef YCTC_mzc_netif
#define YCTC_mzc_netif   (mzc_netif__getTC())
#endif
#endif /* mzc_netif_DEFINED */

#ifndef mzc_netif_SUPP_FUNCS
#define mzc_netif_SUPP_FUNCS
void mzc_netif__free( mzc_netif* val, ysmff ffunc);
void mzc_netif__copy( mzc_netif* dest, mzc_netif* src, ysmaf afunc);
#endif /* mzc_netif_SUPP_FUNCS */

#ifndef mzc_netifs_DECLARED
#define mzc_netifs_DECLARED
typedef YCIDL_sequence_mzc_netif mzc_netifs;
CONST yotk* mzc_netifs__getTC(void);
#ifndef YCTC_mzc_netifs
#define YCTC_mzc_netifs   (mzc_netifs__getTC())
#endif
#endif /* mzc_netifs_DECLARED */

#ifndef mzc_netifs_SUPP_FUNCS
#define mzc_netifs_SUPP_FUNCS
void mzc_netifs__free( mzc_netifs* val, ysmff ffunc);
void mzc_netifs__copy( mzc_netifs* dest, mzc_netifs* src, ysmaf afunc);
#endif /* mzc_netifs_SUPP_FUNCS */

#ifndef mzc_pktinfo_DECLARED
#define mzc_pktinfo_DECLARED
typedef struct mzc_pktinfo mzc_pktinfo;
#endif /* mzc_pktinfo_DECLARED */

#ifndef mzc_pktinfo_DEFINED
#define mzc_pktinfo_DEFINED
struct mzc_pktinfo
{
  ub4 pref_size;
  ub4 max_size;
  ub4 modulos;
};
CONST yotk* mzc_pktinfo__getTC(void);
#ifndef YCTC_mzc_pktinfo
#define YCTC_mzc_pktinfo   (mzc_pktinfo__getTC())
#endif
#endif /* mzc_pktinfo_DEFINED */

#ifndef mzc_pktinfo_SUPP_FUNCS
#define mzc_pktinfo_SUPP_FUNCS
void mzc_pktinfo__free( mzc_pktinfo* val, ysmff ffunc);
void mzc_pktinfo__copy( mzc_pktinfo* dest, mzc_pktinfo* src, ysmaf afunc);
#endif /* mzc_pktinfo_SUPP_FUNCS */

#ifndef mzc_pktinfos_DECLARED
#define mzc_pktinfos_DECLARED
typedef YCIDL_sequence_mzc_pktinfo mzc_pktinfos;
CONST yotk* mzc_pktinfos__getTC(void);
#ifndef YCTC_mzc_pktinfos
#define YCTC_mzc_pktinfos   (mzc_pktinfos__getTC())
#endif
#endif /* mzc_pktinfos_DECLARED */

#ifndef mzc_pktinfos_SUPP_FUNCS
#define mzc_pktinfos_SUPP_FUNCS
void mzc_pktinfos__free( mzc_pktinfos* val, ysmff ffunc);
void mzc_pktinfos__copy( mzc_pktinfos* dest, mzc_pktinfos* src, ysmaf afunc);
#endif /* mzc_pktinfos_SUPP_FUNCS */

#ifndef mzc_link_DECLARED
#define mzc_link_DECLARED
typedef struct mzc_link mzc_link;
#endif /* mzc_link_DECLARED */

#ifndef mzc_link_DEFINED
#define mzc_link_DEFINED
struct mzc_link
{
  char* name;
  mzc_netproto protocol;
  mzc_netapi software;
  mzc_netif hardware;
  mzc_pktinfo packet;
};
CONST yotk* mzc_link__getTC(void);
#ifndef YCTC_mzc_link
#define YCTC_mzc_link   (mzc_link__getTC())
#endif
#endif /* mzc_link_DEFINED */

#ifndef mzc_link_SUPP_FUNCS
#define mzc_link_SUPP_FUNCS
void mzc_link__free( mzc_link* val, ysmff ffunc);
void mzc_link__copy( mzc_link* dest, mzc_link* src, ysmaf afunc);
#endif /* mzc_link_SUPP_FUNCS */

#ifndef mzc_links_DECLARED
#define mzc_links_DECLARED
typedef YCIDL_sequence_mzc_link mzc_links;
CONST yotk* mzc_links__getTC(void);
#ifndef YCTC_mzc_links
#define YCTC_mzc_links   (mzc_links__getTC())
#endif
#endif /* mzc_links_DECLARED */

#ifndef mzc_links_SUPP_FUNCS
#define mzc_links_SUPP_FUNCS
void mzc_links__free( mzc_links* val, ysmff ffunc);
void mzc_links__copy( mzc_links* dest, mzc_links* src, ysmaf afunc);
#endif /* mzc_links_SUPP_FUNCS */

#ifndef mzc_chnlInfo_DECLARED
#define mzc_chnlInfo_DECLARED
typedef struct mzc_chnlInfo mzc_chnlInfo;
#endif /* mzc_chnlInfo_DECLARED */

#ifndef mzc_chnlInfo_DEFINED
#define mzc_chnlInfo_DEFINED
struct mzc_chnlInfo
{
  mzc_commProperty props;
  mzc_transportType transport;
  mzc_link comm;
  ub4 bitrate;
  mzc_logicalAddress mna;
};
CONST yotk* mzc_chnlInfo__getTC(void);
#ifndef YCTC_mzc_chnlInfo
#define YCTC_mzc_chnlInfo   (mzc_chnlInfo__getTC())
#endif
#endif /* mzc_chnlInfo_DEFINED */

#ifndef mzc_chnlInfo_SUPP_FUNCS
#define mzc_chnlInfo_SUPP_FUNCS
void mzc_chnlInfo__free( mzc_chnlInfo* val, ysmff ffunc);
void mzc_chnlInfo__copy( mzc_chnlInfo* dest, mzc_chnlInfo* src, ysmaf afunc);
#endif /* mzc_chnlInfo_SUPP_FUNCS */

#ifndef mzc_chnlInfos_DECLARED
#define mzc_chnlInfos_DECLARED
typedef YCIDL_sequence_mzc_chnlInfo mzc_chnlInfos;
CONST yotk* mzc_chnlInfos__getTC(void);
#ifndef YCTC_mzc_chnlInfos
#define YCTC_mzc_chnlInfos   (mzc_chnlInfos__getTC())
#endif
#endif /* mzc_chnlInfos_DECLARED */

#ifndef mzc_chnlInfos_SUPP_FUNCS
#define mzc_chnlInfos_SUPP_FUNCS
void mzc_chnlInfos__free( mzc_chnlInfos* val, ysmff ffunc);
void mzc_chnlInfos__copy( mzc_chnlInfos* dest, mzc_chnlInfos* src, ysmaf afunc);
#endif /* mzc_chnlInfos_SUPP_FUNCS */

#ifndef mzc_channel_DECLARED
#define mzc_channel_DECLARED
typedef struct mzc_channel mzc_channel;
#endif /* mzc_channel_DECLARED */

#ifndef mzc_channel_DEFINED
#define mzc_channel_DEFINED
struct mzc_channel
{
  mzc_chnl or;
  mzc_chnlInfo info;
};
CONST yotk* mzc_channel__getTC(void);
#ifndef YCTC_mzc_channel
#define YCTC_mzc_channel   (mzc_channel__getTC())
#endif
#endif /* mzc_channel_DEFINED */

#ifndef mzc_channel_SUPP_FUNCS
#define mzc_channel_SUPP_FUNCS
void mzc_channel__free( mzc_channel* val, ysmff ffunc);
void mzc_channel__copy( mzc_channel* dest, mzc_channel* src, ysmaf afunc);
#endif /* mzc_channel_SUPP_FUNCS */

#ifndef mzc_channels_DECLARED
#define mzc_channels_DECLARED
typedef YCIDL_sequence_mzc_channel mzc_channels;
CONST yotk* mzc_channels__getTC(void);
#ifndef YCTC_mzc_channels
#define YCTC_mzc_channels   (mzc_channels__getTC())
#endif
#endif /* mzc_channels_DECLARED */

#ifndef mzc_channels_SUPP_FUNCS
#define mzc_channels_SUPP_FUNCS
void mzc_channels__free( mzc_channels* val, ysmff ffunc);
void mzc_channels__copy( mzc_channels* dest, mzc_channels* src, ysmaf afunc);
#endif /* mzc_channels_SUPP_FUNCS */

#ifndef mzc_chnlreq_DECLARED
#define mzc_chnlreq_DECLARED
typedef struct mzc_chnlreq mzc_chnlreq;
#endif /* mzc_chnlreq_DECLARED */

#ifndef mzc_chnlreq_DEFINED
#define mzc_chnlreq_DEFINED
struct mzc_chnlreq
{
  mzc_commProperty props;
  mzc_transportType transport;
  mzc_netproto protocol;
  ub4 bitrate;
};
CONST yotk* mzc_chnlreq__getTC(void);
#ifndef YCTC_mzc_chnlreq
#define YCTC_mzc_chnlreq   (mzc_chnlreq__getTC())
#endif
#endif /* mzc_chnlreq_DEFINED */

#ifndef mzc_chnlreq_SUPP_FUNCS
#define mzc_chnlreq_SUPP_FUNCS
void mzc_chnlreq__free( mzc_chnlreq* val, ysmff ffunc);
void mzc_chnlreq__copy( mzc_chnlreq* dest, mzc_chnlreq* src, ysmaf afunc);
#endif /* mzc_chnlreq_SUPP_FUNCS */

#ifndef mzc_chnlspecType_DECLARED
#define mzc_chnlspecType_DECLARED
typedef ub4 mzc_chnlspecType;
CONST yotk* mzc_chnlspecType__getTC(void);
#ifndef YCTC_mzc_chnlspecType
#define YCTC_mzc_chnlspecType   (mzc_chnlspecType__getTC())
#endif
#endif /* mzc_chnlspecType_DECLARED */

#ifndef mzc_chnlspecType_DEFINED
#define mzc_chnlspecType_DEFINED
#define mzc_chnlspecTypeNone ((mzc_chnlspecType) 0)
#define mzc_chnlspecTypeRequest ((mzc_chnlspecType) 1)
#define mzc_chnlspecTypeChannel ((mzc_chnlspecType) 2)
#endif /* mzc_chnlspecType_DEFINED */

#ifndef mzc_chnlspecType_SUPP_FUNCS
#define mzc_chnlspecType_SUPP_FUNCS
void mzc_chnlspecType__free( mzc_chnlspecType* val, ysmff ffunc);
void mzc_chnlspecType__copy( mzc_chnlspecType* dest, mzc_chnlspecType* src, ysmaf afunc);
#endif /* mzc_chnlspecType_SUPP_FUNCS */

#ifndef mzc_chnlspec_DECLARED
#define mzc_chnlspec_DECLARED
typedef struct mzc_chnlspec mzc_chnlspec;
#endif /* mzc_chnlspec_DECLARED */

#ifndef mzc_chnlspec_DEFINED
#define mzc_chnlspec_DEFINED
struct mzc_chnlspec
{
  mzc_chnlspecType _d;
  union
  {
    sb4 none;
    mzc_chnlreq req;
    mzc_channel chnl;
  } _u;
};
CONST yotk* mzc_chnlspec__getTC(void);
#ifndef YCTC_mzc_chnlspec
#define YCTC_mzc_chnlspec   (mzc_chnlspec__getTC())
#endif
#endif /* mzc_chnlspec_DEFINED */

#ifndef mzc_chnlspec_SUPP_FUNCS
#define mzc_chnlspec_SUPP_FUNCS
void mzc_chnlspec__free( mzc_chnlspec* val, ysmff ffunc);
void mzc_chnlspec__copy( mzc_chnlspec* dest, mzc_chnlspec* src, ysmaf afunc);
#endif /* mzc_chnlspec_SUPP_FUNCS */

#ifndef mzc_chnlspecs_DECLARED
#define mzc_chnlspecs_DECLARED
typedef YCIDL_sequence_mzc_chnlspec mzc_chnlspecs;
CONST yotk* mzc_chnlspecs__getTC(void);
#ifndef YCTC_mzc_chnlspecs
#define YCTC_mzc_chnlspecs   (mzc_chnlspecs__getTC())
#endif
#endif /* mzc_chnlspecs_DECLARED */

#ifndef mzc_chnlspecs_SUPP_FUNCS
#define mzc_chnlspecs_SUPP_FUNCS
void mzc_chnlspecs__free( mzc_chnlspecs* val, ysmff ffunc);
void mzc_chnlspecs__copy( mzc_chnlspecs* dest, mzc_chnlspecs* src, ysmaf afunc);
#endif /* mzc_chnlspecs_SUPP_FUNCS */

#ifndef mzc_chnlreqx_DECLARED
#define mzc_chnlreqx_DECLARED
typedef struct mzc_chnlreqx mzc_chnlreqx;
#endif /* mzc_chnlreqx_DECLARED */

#ifndef mzc_chnlreqx_DEFINED
#define mzc_chnlreqx_DEFINED
struct mzc_chnlreqx
{
  mzc_commProperty props;
  mzc_transportType transport;
  mzc_netproto protocol;
  mzc_netapi software;
  mzc_netif hardware;
  mzc_pktinfo packet;
  ub4 bitrate;
};
CONST yotk* mzc_chnlreqx__getTC(void);
#ifndef YCTC_mzc_chnlreqx
#define YCTC_mzc_chnlreqx   (mzc_chnlreqx__getTC())
#endif
#endif /* mzc_chnlreqx_DEFINED */

#ifndef mzc_chnlreqx_SUPP_FUNCS
#define mzc_chnlreqx_SUPP_FUNCS
void mzc_chnlreqx__free( mzc_chnlreqx* val, ysmff ffunc);
void mzc_chnlreqx__copy( mzc_chnlreqx* dest, mzc_chnlreqx* src, ysmaf afunc);
#endif /* mzc_chnlreqx_SUPP_FUNCS */


/* interface mzc_chnl declarations */
#ifndef mzc_chnl_DECLARED
#define mzc_chnl_DECLARED
typedef struct YCmzc_chnl* mzc_chnl;
CONST yotk* mzc_chnl__getTC(void);
#ifndef YCTC_mzc_chnl
#define YCTC_mzc_chnl   (mzc_chnl__getTC())
#endif
#endif /* mzc_chnl_DECLARED */

#ifndef mzc_chnl_SUPP_FUNCS
#define mzc_chnl_SUPP_FUNCS
void mzc_chnl__free( mzc_chnl* val, ysmff ffunc);
void mzc_chnl__copy( mzc_chnl* dest, mzc_chnl* src, ysmaf afunc);
#endif /* mzc_chnl_SUPP_FUNCS */

CONST ysid* mzc_chnl__getId(void);
#ifndef mzc_chnl__id
#define mzc_chnl__id   (mzc_chnl__getId())
#endif
#ifndef mzc_chnls_DECLARED
#define mzc_chnls_DECLARED
typedef YCIDL_sequence_mzc_chnl mzc_chnls;
CONST yotk* mzc_chnls__getTC(void);
#ifndef YCTC_mzc_chnls
#define YCTC_mzc_chnls   (mzc_chnls__getTC())
#endif
#endif /* mzc_chnls_DECLARED */

#ifndef mzc_chnls_SUPP_FUNCS
#define mzc_chnls_SUPP_FUNCS
void mzc_chnls__free( mzc_chnls* val, ysmff ffunc);
void mzc_chnls__copy( mzc_chnls* dest, mzc_chnls* src, ysmaf afunc);
#endif /* mzc_chnls_SUPP_FUNCS */


/* interface mzs_stream declarations */
#ifndef mzs_stream_DECLARED
#define mzs_stream_DECLARED
typedef struct YCmzs_stream* mzs_stream;
CONST yotk* mzs_stream__getTC(void);
#ifndef YCTC_mzs_stream
#define YCTC_mzs_stream   (mzs_stream__getTC())
#endif
#endif /* mzs_stream_DECLARED */

#ifndef mzs_stream_SUPP_FUNCS
#define mzs_stream_SUPP_FUNCS
void mzs_stream__free( mzs_stream* val, ysmff ffunc);
void mzs_stream__copy( mzs_stream* dest, mzs_stream* src, ysmaf afunc);
#endif /* mzs_stream_SUPP_FUNCS */

#ifndef mzc_circuitException_DECLARED
#define mzc_circuitException_DECLARED
typedef ub4 mzc_circuitException;
CONST yotk* mzc_circuitException__getTC(void);
#ifndef YCTC_mzc_circuitException
#define YCTC_mzc_circuitException   (mzc_circuitException__getTC())
#endif
#endif /* mzc_circuitException_DECLARED */

#ifndef mzc_circuitException_DEFINED
#define mzc_circuitException_DEFINED
#define mzc_cktExNotImplemented ((mzc_circuitException) 0)
#define mzc_cktExNoChannelAvailable ((mzc_circuitException) 1)
#define mzc_cktExNoChannelBandwidth ((mzc_circuitException) 2)
#define mzc_cktExBadChannelProtocol ((mzc_circuitException) 3)
#define mzc_cktExBadChannelAddress ((mzc_circuitException) 4)
#define mzc_cktExNoUpstreamAvailable ((mzc_circuitException) 5)
#define mzc_cktExNoUpstreamBandwidth ((mzc_circuitException) 6)
#define mzc_cktExBadUpstreamProtocol ((mzc_circuitException) 7)
#define mzc_cktExBadUpstreamAddress ((mzc_circuitException) 8)
#define mzc_cktExNoDownstreamAvailable ((mzc_circuitException) 9)
#define mzc_cktExNoDownstreamBandwidth ((mzc_circuitException) 10)
#define mzc_cktExBadDownstreamProtocol ((mzc_circuitException) 11)
#define mzc_cktExBadDownstreamAddress ((mzc_circuitException) 12)
#define mzc_cktExNoCircuitAvailable ((mzc_circuitException) 13)
#define mzc_cktExInvalidClient ((mzc_circuitException) 14)
#define mzc_cktExInvalidRequest ((mzc_circuitException) 15)
#define mzc_cktExNotControl ((mzc_circuitException) 16)
#define mzc_cktExNotData ((mzc_circuitException) 17)
#define mzc_cktExNotIsochronous ((mzc_circuitException) 18)
#define mzc_cktExInvalidStream ((mzc_circuitException) 19)
#define mzc_cktExStreamAlreadyBound ((mzc_circuitException) 20)
#define mzc_cktExStreamNotBound ((mzc_circuitException) 21)
#endif /* mzc_circuitException_DEFINED */

#ifndef mzc_circuitException_SUPP_FUNCS
#define mzc_circuitException_SUPP_FUNCS
void mzc_circuitException__free( mzc_circuitException* val, ysmff ffunc);
void mzc_circuitException__copy( mzc_circuitException* dest, mzc_circuitException* src, ysmaf afunc);
#endif /* mzc_circuitException_SUPP_FUNCS */

#ifndef MZC_EX_CKTEX_DECLARED
#define MZC_EX_CKTEX_DECLARED
CONST ysid* mzc_cktEx__getId(void);
#ifndef MZC_EX_CKTEX
#define MZC_EX_CKTEX   (mzc_cktEx__getId())
#endif
#endif /* MZC_EX_CKTEX_DECLARED */

#ifndef mzc_cktEx_DECLARED
#define mzc_cktEx_DECLARED
typedef struct mzc_cktEx mzc_cktEx;
#endif /* mzc_cktEx_DECLARED */

#ifndef mzc_cktEx_DEFINED
#define mzc_cktEx_DEFINED
struct mzc_cktEx
{
  mzc_circuitException circuitFailType;
};
CONST yotk* mzc_cktEx__getTC(void);
#ifndef YCTC_mzc_cktEx
#define YCTC_mzc_cktEx   (mzc_cktEx__getTC())
#endif
#endif /* mzc_cktEx_DEFINED */

#ifndef mzc_cktEx_SUPP_FUNCS
#define mzc_cktEx_SUPP_FUNCS
void mzc_cktEx__free( mzc_cktEx* val, ysmff ffunc);
void mzc_cktEx__copy( mzc_cktEx* dest, mzc_cktEx* src, ysmaf afunc);
#endif /* mzc_cktEx_SUPP_FUNCS */

#ifndef mzc_clientDeviceId_DECLARED
#define mzc_clientDeviceId_DECLARED
typedef YCIDL_sequence_ub1 mzc_clientDeviceId;
CONST yotk* mzc_clientDeviceId__getTC(void);
#ifndef YCTC_mzc_clientDeviceId
#define YCTC_mzc_clientDeviceId   (mzc_clientDeviceId__getTC())
#endif
#endif /* mzc_clientDeviceId_DECLARED */

#ifndef mzc_clientDeviceId_SUPP_FUNCS
#define mzc_clientDeviceId_SUPP_FUNCS
void mzc_clientDeviceId__free( mzc_clientDeviceId* val, ysmff ffunc);
void mzc_clientDeviceId__copy( mzc_clientDeviceId* dest, mzc_clientDeviceId* src, ysmaf afunc);
#endif /* mzc_clientDeviceId_SUPP_FUNCS */


/* interface mzc_ckt declarations */
#ifndef mzc_ckt_DECLARED
#define mzc_ckt_DECLARED
typedef struct YCmzc_ckt* mzc_ckt;
CONST yotk* mzc_ckt__getTC(void);
#ifndef YCTC_mzc_ckt
#define YCTC_mzc_ckt   (mzc_ckt__getTC())
#endif
#endif /* mzc_ckt_DECLARED */

#ifndef mzc_ckt_SUPP_FUNCS
#define mzc_ckt_SUPP_FUNCS
void mzc_ckt__free( mzc_ckt* val, ysmff ffunc);
void mzc_ckt__copy( mzc_ckt* dest, mzc_ckt* src, ysmaf afunc);
#endif /* mzc_ckt_SUPP_FUNCS */

#ifndef mzc_cktInfo_DECLARED
#define mzc_cktInfo_DECLARED
typedef struct mzc_cktInfo mzc_cktInfo;
#endif /* mzc_cktInfo_DECLARED */

#ifndef mzc_cktInfo_DEFINED
#define mzc_cktInfo_DEFINED
struct mzc_cktInfo
{
  mzc_commProperty props;
  mzc_logicalAddress mna;
  mzs_stream streamRef;
  mzc_channel upstream;
  mzc_channel downstream;
};
CONST yotk* mzc_cktInfo__getTC(void);
#ifndef YCTC_mzc_cktInfo
#define YCTC_mzc_cktInfo   (mzc_cktInfo__getTC())
#endif
#endif /* mzc_cktInfo_DEFINED */

#ifndef mzc_cktInfo_SUPP_FUNCS
#define mzc_cktInfo_SUPP_FUNCS
void mzc_cktInfo__free( mzc_cktInfo* val, ysmff ffunc);
void mzc_cktInfo__copy( mzc_cktInfo* dest, mzc_cktInfo* src, ysmaf afunc);
#endif /* mzc_cktInfo_SUPP_FUNCS */

#ifndef mzc_cktInfos_DECLARED
#define mzc_cktInfos_DECLARED
typedef YCIDL_sequence_mzc_cktInfo mzc_cktInfos;
CONST yotk* mzc_cktInfos__getTC(void);
#ifndef YCTC_mzc_cktInfos
#define YCTC_mzc_cktInfos   (mzc_cktInfos__getTC())
#endif
#endif /* mzc_cktInfos_DECLARED */

#ifndef mzc_cktInfos_SUPP_FUNCS
#define mzc_cktInfos_SUPP_FUNCS
void mzc_cktInfos__free( mzc_cktInfos* val, ysmff ffunc);
void mzc_cktInfos__copy( mzc_cktInfos* dest, mzc_cktInfos* src, ysmaf afunc);
#endif /* mzc_cktInfos_SUPP_FUNCS */

#ifndef mzc_circuit_DECLARED
#define mzc_circuit_DECLARED
typedef struct mzc_circuit mzc_circuit;
#endif /* mzc_circuit_DECLARED */

#ifndef mzc_circuit_DEFINED
#define mzc_circuit_DEFINED
struct mzc_circuit
{
  mzc_ckt or;
  mzc_cktInfo info;
};
CONST yotk* mzc_circuit__getTC(void);
#ifndef YCTC_mzc_circuit
#define YCTC_mzc_circuit   (mzc_circuit__getTC())
#endif
#endif /* mzc_circuit_DEFINED */

#ifndef mzc_circuit_SUPP_FUNCS
#define mzc_circuit_SUPP_FUNCS
void mzc_circuit__free( mzc_circuit* val, ysmff ffunc);
void mzc_circuit__copy( mzc_circuit* dest, mzc_circuit* src, ysmaf afunc);
#endif /* mzc_circuit_SUPP_FUNCS */

#ifndef mzc_circuits_DECLARED
#define mzc_circuits_DECLARED
typedef YCIDL_sequence_mzc_circuit mzc_circuits;
CONST yotk* mzc_circuits__getTC(void);
#ifndef YCTC_mzc_circuits
#define YCTC_mzc_circuits   (mzc_circuits__getTC())
#endif
#endif /* mzc_circuits_DECLARED */

#ifndef mzc_circuits_SUPP_FUNCS
#define mzc_circuits_SUPP_FUNCS
void mzc_circuits__free( mzc_circuits* val, ysmff ffunc);
void mzc_circuits__copy( mzc_circuits* dest, mzc_circuits* src, ysmaf afunc);
#endif /* mzc_circuits_SUPP_FUNCS */

#ifndef mzc_cktreqType_DECLARED
#define mzc_cktreqType_DECLARED
typedef ub4 mzc_cktreqType;
CONST yotk* mzc_cktreqType__getTC(void);
#ifndef YCTC_mzc_cktreqType
#define YCTC_mzc_cktreqType   (mzc_cktreqType__getTC())
#endif
#endif /* mzc_cktreqType_DECLARED */

#ifndef mzc_cktreqType_DEFINED
#define mzc_cktreqType_DEFINED
#define mzc_cktreqTypeSymmetric ((mzc_cktreqType) 0)
#define mzc_cktreqTypeAsymmetric ((mzc_cktreqType) 1)
#endif /* mzc_cktreqType_DEFINED */

#ifndef mzc_cktreqType_SUPP_FUNCS
#define mzc_cktreqType_SUPP_FUNCS
void mzc_cktreqType__free( mzc_cktreqType* val, ysmff ffunc);
void mzc_cktreqType__copy( mzc_cktreqType* dest, mzc_cktreqType* src, ysmaf afunc);
#endif /* mzc_cktreqType_SUPP_FUNCS */

#ifndef mzc_cktreqSym_DECLARED
#define mzc_cktreqSym_DECLARED
typedef struct mzc_cktreqSym mzc_cktreqSym;
#endif /* mzc_cktreqSym_DECLARED */

#ifndef mzc_cktreqSym_DEFINED
#define mzc_cktreqSym_DEFINED
struct mzc_cktreqSym
{
  mzc_commProperty props;
  mzc_chnlspec chnl;
};
CONST yotk* mzc_cktreqSym__getTC(void);
#ifndef YCTC_mzc_cktreqSym
#define YCTC_mzc_cktreqSym   (mzc_cktreqSym__getTC())
#endif
#endif /* mzc_cktreqSym_DEFINED */

#ifndef mzc_cktreqSym_SUPP_FUNCS
#define mzc_cktreqSym_SUPP_FUNCS
void mzc_cktreqSym__free( mzc_cktreqSym* val, ysmff ffunc);
void mzc_cktreqSym__copy( mzc_cktreqSym* dest, mzc_cktreqSym* src, ysmaf afunc);
#endif /* mzc_cktreqSym_SUPP_FUNCS */

#ifndef mzc_cktreqAsym_DECLARED
#define mzc_cktreqAsym_DECLARED
typedef struct mzc_cktreqAsym mzc_cktreqAsym;
#endif /* mzc_cktreqAsym_DECLARED */

#ifndef mzc_cktreqAsym_DEFINED
#define mzc_cktreqAsym_DEFINED
struct mzc_cktreqAsym
{
  mzc_commProperty props;
  mzc_chnlspec upchnl;
  mzc_chnlspec downchnl;
};
CONST yotk* mzc_cktreqAsym__getTC(void);
#ifndef YCTC_mzc_cktreqAsym
#define YCTC_mzc_cktreqAsym   (mzc_cktreqAsym__getTC())
#endif
#endif /* mzc_cktreqAsym_DEFINED */

#ifndef mzc_cktreqAsym_SUPP_FUNCS
#define mzc_cktreqAsym_SUPP_FUNCS
void mzc_cktreqAsym__free( mzc_cktreqAsym* val, ysmff ffunc);
void mzc_cktreqAsym__copy( mzc_cktreqAsym* dest, mzc_cktreqAsym* src, ysmaf afunc);
#endif /* mzc_cktreqAsym_SUPP_FUNCS */

#ifndef mzc_cktreq_DECLARED
#define mzc_cktreq_DECLARED
typedef struct mzc_cktreq mzc_cktreq;
#endif /* mzc_cktreq_DECLARED */

#ifndef mzc_cktreq_DEFINED
#define mzc_cktreq_DEFINED
struct mzc_cktreq
{
  mzc_cktreqType _d;
  union
  {
    mzc_cktreqSym sym;
    mzc_cktreqAsym asym;
  } _u;
};
CONST yotk* mzc_cktreq__getTC(void);
#ifndef YCTC_mzc_cktreq
#define YCTC_mzc_cktreq   (mzc_cktreq__getTC())
#endif
#endif /* mzc_cktreq_DEFINED */

#ifndef mzc_cktreq_SUPP_FUNCS
#define mzc_cktreq_SUPP_FUNCS
void mzc_cktreq__free( mzc_cktreq* val, ysmff ffunc);
void mzc_cktreq__copy( mzc_cktreq* dest, mzc_cktreq* src, ysmaf afunc);
#endif /* mzc_cktreq_SUPP_FUNCS */

#ifndef mzc_cktspecType_DECLARED
#define mzc_cktspecType_DECLARED
typedef ub4 mzc_cktspecType;
CONST yotk* mzc_cktspecType__getTC(void);
#ifndef YCTC_mzc_cktspecType
#define YCTC_mzc_cktspecType   (mzc_cktspecType__getTC())
#endif
#endif /* mzc_cktspecType_DECLARED */

#ifndef mzc_cktspecType_DEFINED
#define mzc_cktspecType_DEFINED
#define mzc_cktspecTypeNone ((mzc_cktspecType) 0)
#define mzc_cktspecTypeRequest ((mzc_cktspecType) 1)
#define mzc_cktspecTypeCircuit ((mzc_cktspecType) 2)
#endif /* mzc_cktspecType_DEFINED */

#ifndef mzc_cktspecType_SUPP_FUNCS
#define mzc_cktspecType_SUPP_FUNCS
void mzc_cktspecType__free( mzc_cktspecType* val, ysmff ffunc);
void mzc_cktspecType__copy( mzc_cktspecType* dest, mzc_cktspecType* src, ysmaf afunc);
#endif /* mzc_cktspecType_SUPP_FUNCS */

#ifndef mzc_cktspec_DECLARED
#define mzc_cktspec_DECLARED
typedef struct mzc_cktspec mzc_cktspec;
#endif /* mzc_cktspec_DECLARED */

#ifndef mzc_cktspec_DEFINED
#define mzc_cktspec_DEFINED
struct mzc_cktspec
{
  mzc_cktspecType _d;
  union
  {
    sb4 none;
    mzc_cktreq req;
    mzc_circuit ckt;
  } _u;
};
CONST yotk* mzc_cktspec__getTC(void);
#ifndef YCTC_mzc_cktspec
#define YCTC_mzc_cktspec   (mzc_cktspec__getTC())
#endif
#endif /* mzc_cktspec_DEFINED */

#ifndef mzc_cktspec_SUPP_FUNCS
#define mzc_cktspec_SUPP_FUNCS
void mzc_cktspec__free( mzc_cktspec* val, ysmff ffunc);
void mzc_cktspec__copy( mzc_cktspec* dest, mzc_cktspec* src, ysmaf afunc);
#endif /* mzc_cktspec_SUPP_FUNCS */

#ifndef mzc_cktspecs_DECLARED
#define mzc_cktspecs_DECLARED
typedef YCIDL_sequence_mzc_cktspec mzc_cktspecs;
CONST yotk* mzc_cktspecs__getTC(void);
#ifndef YCTC_mzc_cktspecs
#define YCTC_mzc_cktspecs   (mzc_cktspecs__getTC())
#endif
#endif /* mzc_cktspecs_DECLARED */

#ifndef mzc_cktspecs_SUPP_FUNCS
#define mzc_cktspecs_SUPP_FUNCS
void mzc_cktspecs__free( mzc_cktspecs* val, ysmff ffunc);
void mzc_cktspecs__copy( mzc_cktspecs* dest, mzc_cktspecs* src, ysmaf afunc);
#endif /* mzc_cktspecs_SUPP_FUNCS */


/* interface mzc_ckt declarations */
#ifndef mzc_ckt_DECLARED
#define mzc_ckt_DECLARED
typedef struct YCmzc_ckt* mzc_ckt;
CONST yotk* mzc_ckt__getTC(void);
#ifndef YCTC_mzc_ckt
#define YCTC_mzc_ckt   (mzc_ckt__getTC())
#endif
#endif /* mzc_ckt_DECLARED */

#ifndef mzc_ckt_SUPP_FUNCS
#define mzc_ckt_SUPP_FUNCS
void mzc_ckt__free( mzc_ckt* val, ysmff ffunc);
void mzc_ckt__copy( mzc_ckt* dest, mzc_ckt* src, ysmaf afunc);
#endif /* mzc_ckt_SUPP_FUNCS */

#ifndef mzc_ckt_DEFINED
#define mzc_ckt_DEFINED
struct yostub* mzc_ckt__getStubs(void);
#define mzc_ckt__stubs (mzc_ckt__getStubs())
#endif /* mzc_ckt_DEFINED */

CONST ysid* mzc_ckt__getId(void);
#ifndef mzc_ckt__id
#define mzc_ckt__id   (mzc_ckt__getId())
#endif
mzc_cktInfo mzc_ckt_GetInfo( mzc_ckt or, yoenv* ev);
void mzc_ckt_GetInfo_nw( mzc_ckt or, yoenv* ev, ysevt* _sem);
yopar* mzc_ckt_GetInfo__getPars(void);
#ifndef mzc_ckt_GetInfo_pars
#define mzc_ckt_GetInfo_pars (mzc_ckt_GetInfo__getPars())
#endif

void mzc_ckt_TearDown( mzc_ckt or, yoenv* ev);
void mzc_ckt_TearDown_nw( mzc_ckt or, yoenv* ev, ysevt* _sem);
yopar* mzc_ckt_TearDown__getPars(void);
#ifndef mzc_ckt_TearDown_pars
#define mzc_ckt_TearDown_pars (mzc_ckt_TearDown__getPars())
#endif

mzc_cktInfo mzc_ckt_Rebuild( mzc_ckt or, yoenv* ev, mzc_cktspec* req);
void mzc_ckt_Rebuild_nw( mzc_ckt or, yoenv* ev, mzc_cktspec* req, ysevt* _sem);
yopar* mzc_ckt_Rebuild__getPars(void);
#ifndef mzc_ckt_Rebuild_pars
#define mzc_ckt_Rebuild_pars (mzc_ckt_Rebuild__getPars())
#endif

mzc_channel mzc_ckt_BindDSM( mzc_ckt or, yoenv* ev, mzc_chnlspec* dsm);
void mzc_ckt_BindDSM_nw( mzc_ckt or, yoenv* ev, mzc_chnlspec* dsm, ysevt* _sem);
yopar* mzc_ckt_BindDSM__getPars(void);
#ifndef mzc_ckt_BindDSM_pars
#define mzc_ckt_BindDSM_pars (mzc_ckt_BindDSM__getPars())
#endif

void mzc_ckt_UnBindDSM( mzc_ckt or, yoenv* ev);
void mzc_ckt_UnBindDSM_nw( mzc_ckt or, yoenv* ev, ysevt* _sem);
yopar* mzc_ckt_UnBindDSM__getPars(void);
#ifndef mzc_ckt_UnBindDSM_pars
#define mzc_ckt_UnBindDSM_pars (mzc_ckt_UnBindDSM__getPars())
#endif

void mzc_ckt_DisableDSM( mzc_ckt or, yoenv* ev);
void mzc_ckt_DisableDSM_nw( mzc_ckt or, yoenv* ev, ysevt* _sem);
yopar* mzc_ckt_DisableDSM__getPars(void);
#ifndef mzc_ckt_DisableDSM_pars
#define mzc_ckt_DisableDSM_pars (mzc_ckt_DisableDSM__getPars())
#endif

void mzc_ckt_EnableDSM( mzc_ckt or, yoenv* ev);
void mzc_ckt_EnableDSM_nw( mzc_ckt or, yoenv* ev, ysevt* _sem);
yopar* mzc_ckt_EnableDSM__getPars(void);
#ifndef mzc_ckt_EnableDSM_pars
#define mzc_ckt_EnableDSM_pars (mzc_ckt_EnableDSM__getPars())
#endif

mzc_channel mzc_ckt_BindUSM( mzc_ckt or, yoenv* ev, mzc_chnlspec* usm);
void mzc_ckt_BindUSM_nw( mzc_ckt or, yoenv* ev, mzc_chnlspec* usm, ysevt* _sem);
yopar* mzc_ckt_BindUSM__getPars(void);
#ifndef mzc_ckt_BindUSM_pars
#define mzc_ckt_BindUSM_pars (mzc_ckt_BindUSM__getPars())
#endif

void mzc_ckt_UnBindUSM( mzc_ckt or, yoenv* ev);
void mzc_ckt_UnBindUSM_nw( mzc_ckt or, yoenv* ev, ysevt* _sem);
yopar* mzc_ckt_UnBindUSM__getPars(void);
#ifndef mzc_ckt_UnBindUSM_pars
#define mzc_ckt_UnBindUSM_pars (mzc_ckt_UnBindUSM__getPars())
#endif

void mzc_ckt_DisableUSM( mzc_ckt or, yoenv* ev);
void mzc_ckt_DisableUSM_nw( mzc_ckt or, yoenv* ev, ysevt* _sem);
yopar* mzc_ckt_DisableUSM__getPars(void);
#ifndef mzc_ckt_DisableUSM_pars
#define mzc_ckt_DisableUSM_pars (mzc_ckt_DisableUSM__getPars())
#endif

void mzc_ckt_EnableUSM( mzc_ckt or, yoenv* ev);
void mzc_ckt_EnableUSM_nw( mzc_ckt or, yoenv* ev, ysevt* _sem);
yopar* mzc_ckt_EnableUSM__getPars(void);
#ifndef mzc_ckt_EnableUSM_pars
#define mzc_ckt_EnableUSM_pars (mzc_ckt_EnableUSM__getPars())
#endif

void mzc_ckt_BindStream( mzc_ckt or, yoenv* ev, CORBA_Object stm);
void mzc_ckt_BindStream_nw( mzc_ckt or, yoenv* ev, CORBA_Object stm, ysevt* _sem);
yopar* mzc_ckt_BindStream__getPars(void);
#ifndef mzc_ckt_BindStream_pars
#define mzc_ckt_BindStream_pars (mzc_ckt_BindStream__getPars())
#endif

CORBA_Object mzc_ckt_UnBindStream( mzc_ckt or, yoenv* ev);
void mzc_ckt_UnBindStream_nw( mzc_ckt or, yoenv* ev, ysevt* _sem);
yopar* mzc_ckt_UnBindStream__getPars(void);
#ifndef mzc_ckt_UnBindStream_pars
#define mzc_ckt_UnBindStream_pars (mzc_ckt_UnBindStream__getPars())
#endif

#ifndef mzc_ckt__tyimpl_DEFINED
#define mzc_ckt__tyimpl_DEFINED
struct mzc_ckt__tyimpl
{
  mzc_cktInfo (*GetInfo)( mzc_ckt, yoenv*);
  void (*TearDown)( mzc_ckt, yoenv*);
  mzc_cktInfo (*Rebuild)( mzc_ckt, yoenv*, mzc_cktspec*);
  mzc_channel (*BindDSM)( mzc_ckt, yoenv*, mzc_chnlspec*);
  void (*UnBindDSM)( mzc_ckt, yoenv*);
  void (*DisableDSM)( mzc_ckt, yoenv*);
  void (*EnableDSM)( mzc_ckt, yoenv*);
  mzc_channel (*BindUSM)( mzc_ckt, yoenv*, mzc_chnlspec*);
  void (*UnBindUSM)( mzc_ckt, yoenv*);
  void (*DisableUSM)( mzc_ckt, yoenv*);
  void (*EnableUSM)( mzc_ckt, yoenv*);
  void (*BindStream)( mzc_ckt, yoenv*, CORBA_Object);
  CORBA_Object (*UnBindStream)( mzc_ckt, yoenv*);
};
#endif /* mzc_ckt__tyimpl_DEFINED */

#ifndef mzc_ckts_DECLARED
#define mzc_ckts_DECLARED
typedef YCIDL_sequence_mzc_ckt mzc_ckts;
CONST yotk* mzc_ckts__getTC(void);
#ifndef YCTC_mzc_ckts
#define YCTC_mzc_ckts   (mzc_ckts__getTC())
#endif
#endif /* mzc_ckts_DECLARED */

#ifndef mzc_ckts_SUPP_FUNCS
#define mzc_ckts_SUPP_FUNCS
void mzc_ckts__free( mzc_ckts* val, ysmff ffunc);
void mzc_ckts__copy( mzc_ckts* dest, mzc_ckts* src, ysmaf afunc);
#endif /* mzc_ckts_SUPP_FUNCS */


/* interface mzc_factory declarations */
#ifndef mzc_factory_DECLARED
#define mzc_factory_DECLARED
typedef struct YCmzc_factory* mzc_factory;
CONST yotk* mzc_factory__getTC(void);
#ifndef YCTC_mzc_factory
#define YCTC_mzc_factory   (mzc_factory__getTC())
#endif
#endif /* mzc_factory_DECLARED */

#ifndef mzc_factory_SUPP_FUNCS
#define mzc_factory_SUPP_FUNCS
void mzc_factory__free( mzc_factory* val, ysmff ffunc);
void mzc_factory__copy( mzc_factory* dest, mzc_factory* src, ysmaf afunc);
#endif /* mzc_factory_SUPP_FUNCS */

#ifndef mzc_factory_DEFINED
#define mzc_factory_DEFINED
struct yostub* mzc_factory__getStubs(void);
#define mzc_factory__stubs (mzc_factory__getStubs())
#endif /* mzc_factory_DEFINED */

CONST ysid* mzc_factory__getId(void);
#ifndef mzc_factory__id
#define mzc_factory__id   (mzc_factory__getId())
#endif
mzc_circuit mzc_factory_BuildCircuit( mzc_factory or, yoenv* ev, mzc_clientDeviceId* clientId, mzc_cktspec* req);
void mzc_factory_BuildCircuit_nw( mzc_factory or, yoenv* ev, mzc_clientDeviceId* clientId, mzc_cktspec* req, ysevt* _sem);
yopar* mzc_factory_BuildCircuit__getPars(void);
#ifndef mzc_factory_BuildCircuit_pars
#define mzc_factory_BuildCircuit_pars (mzc_factory_BuildCircuit__getPars())
#endif

#ifndef mzc_factory__tyimpl_DEFINED
#define mzc_factory__tyimpl_DEFINED
struct mzc_factory__tyimpl
{
  mzc_circuit (*BuildCircuit)( mzc_factory, yoenv*, mzc_clientDeviceId*, mzc_cktspec*);
};
#endif /* mzc_factory__tyimpl_DEFINED */

EXTC_END
#endif /* MZC_IDL */
