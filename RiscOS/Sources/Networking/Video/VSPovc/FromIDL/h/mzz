/* GENERATED FILE
 * mzz - public declarations
 * from mzz.idl
 */

#ifndef MZZ_IDL
#define MZZ_IDL

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif

EXTC_START

/**********  SEQUENCE DECLARATIONS *********/
#ifndef mzc_netproto_DECLARED
#define mzc_netproto_DECLARED
typedef struct mzc_netproto mzc_netproto;
#endif /* mzc_netproto_DECLARED */

#ifndef YCIDL_sequence_mzc_netproto_DEFINED
#define YCIDL_sequence_mzc_netproto_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_netproto* _buffer;
} YCIDL_sequence_mzc_netproto;
#ifndef YCIDL_sequence_mzc_netproto_SUPP_FUNCS
#define YCIDL_sequence_mzc_netproto_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_netproto_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_netproto_DEFINED */

#ifndef mzc_netapi_DECLARED
#define mzc_netapi_DECLARED
typedef struct mzc_netapi mzc_netapi;
#endif /* mzc_netapi_DECLARED */

#ifndef YCIDL_sequence_mzc_netapi_DEFINED
#define YCIDL_sequence_mzc_netapi_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_netapi* _buffer;
} YCIDL_sequence_mzc_netapi;
#ifndef YCIDL_sequence_mzc_netapi_SUPP_FUNCS
#define YCIDL_sequence_mzc_netapi_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_netapi_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_netapi_DEFINED */

#ifndef mzc_netif_DECLARED
#define mzc_netif_DECLARED
typedef struct mzc_netif mzc_netif;
#endif /* mzc_netif_DECLARED */

#ifndef YCIDL_sequence_mzc_netif_DEFINED
#define YCIDL_sequence_mzc_netif_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_netif* _buffer;
} YCIDL_sequence_mzc_netif;
#ifndef YCIDL_sequence_mzc_netif_SUPP_FUNCS
#define YCIDL_sequence_mzc_netif_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_netif_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_netif_DEFINED */

#ifndef mzc_pktinfo_DECLARED
#define mzc_pktinfo_DECLARED
typedef struct mzc_pktinfo mzc_pktinfo;
#endif /* mzc_pktinfo_DECLARED */

#ifndef YCIDL_sequence_mzc_pktinfo_DEFINED
#define YCIDL_sequence_mzc_pktinfo_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_pktinfo* _buffer;
} YCIDL_sequence_mzc_pktinfo;
#ifndef YCIDL_sequence_mzc_pktinfo_SUPP_FUNCS
#define YCIDL_sequence_mzc_pktinfo_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_pktinfo_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_pktinfo_DEFINED */

#ifndef mzc_link_DECLARED
#define mzc_link_DECLARED
typedef struct mzc_link mzc_link;
#endif /* mzc_link_DECLARED */

#ifndef YCIDL_sequence_mzc_link_DEFINED
#define YCIDL_sequence_mzc_link_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_link* _buffer;
} YCIDL_sequence_mzc_link;
#ifndef YCIDL_sequence_mzc_link_SUPP_FUNCS
#define YCIDL_sequence_mzc_link_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_link_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_link_DEFINED */

#ifndef mzc_chnlInfo_DECLARED
#define mzc_chnlInfo_DECLARED
typedef struct mzc_chnlInfo mzc_chnlInfo;
#endif /* mzc_chnlInfo_DECLARED */

#ifndef YCIDL_sequence_mzc_chnlInfo_DEFINED
#define YCIDL_sequence_mzc_chnlInfo_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_chnlInfo* _buffer;
} YCIDL_sequence_mzc_chnlInfo;
#ifndef YCIDL_sequence_mzc_chnlInfo_SUPP_FUNCS
#define YCIDL_sequence_mzc_chnlInfo_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_chnlInfo_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_chnlInfo_DEFINED */

#ifndef mzc_channel_DECLARED
#define mzc_channel_DECLARED
typedef struct mzc_channel mzc_channel;
#endif /* mzc_channel_DECLARED */

#ifndef YCIDL_sequence_mzc_channel_DEFINED
#define YCIDL_sequence_mzc_channel_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_channel* _buffer;
} YCIDL_sequence_mzc_channel;
#ifndef YCIDL_sequence_mzc_channel_SUPP_FUNCS
#define YCIDL_sequence_mzc_channel_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_channel_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_channel_DEFINED */

#ifndef mzc_chnlspec_DECLARED
#define mzc_chnlspec_DECLARED
typedef struct mzc_chnlspec mzc_chnlspec;
#endif /* mzc_chnlspec_DECLARED */

#ifndef YCIDL_sequence_mzc_chnlspec_DEFINED
#define YCIDL_sequence_mzc_chnlspec_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_chnlspec* _buffer;
} YCIDL_sequence_mzc_chnlspec;
#ifndef YCIDL_sequence_mzc_chnlspec_SUPP_FUNCS
#define YCIDL_sequence_mzc_chnlspec_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_chnlspec_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_chnlspec_DEFINED */


/* interface mzc_chnl declarations */
#ifndef mzc_chnl_DECLARED
#define mzc_chnl_DECLARED
typedef struct YCmzc_chnl* mzc_chnl;
CONST yotk* mzc_chnl__getTC(void);
#ifndef YCTC_mzc_chnl
#define YCTC_mzc_chnl   (mzc_chnl__getTC())
#endif
#endif /* mzc_chnl_DECLARED */

#ifndef mzc_chnl_SUPP_FUNCS
#define mzc_chnl_SUPP_FUNCS
void mzc_chnl__free( mzc_chnl* val, ysmff ffunc);
void mzc_chnl__copy( mzc_chnl* dest, mzc_chnl* src, ysmaf afunc);
#endif /* mzc_chnl_SUPP_FUNCS */

#ifndef YCIDL_sequence_mzc_chnl_DEFINED
#define YCIDL_sequence_mzc_chnl_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_chnl* _buffer;
} YCIDL_sequence_mzc_chnl;
#ifndef YCIDL_sequence_mzc_chnl_SUPP_FUNCS
#define YCIDL_sequence_mzc_chnl_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_chnl_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_chnl_DEFINED */

#ifndef mzc_cktInfo_DECLARED
#define mzc_cktInfo_DECLARED
typedef struct mzc_cktInfo mzc_cktInfo;
#endif /* mzc_cktInfo_DECLARED */

#ifndef YCIDL_sequence_mzc_cktInfo_DEFINED
#define YCIDL_sequence_mzc_cktInfo_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_cktInfo* _buffer;
} YCIDL_sequence_mzc_cktInfo;
#ifndef YCIDL_sequence_mzc_cktInfo_SUPP_FUNCS
#define YCIDL_sequence_mzc_cktInfo_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_cktInfo_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_cktInfo_DEFINED */

#ifndef mzc_circuit_DECLARED
#define mzc_circuit_DECLARED
typedef struct mzc_circuit mzc_circuit;
#endif /* mzc_circuit_DECLARED */

#ifndef YCIDL_sequence_mzc_circuit_DEFINED
#define YCIDL_sequence_mzc_circuit_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_circuit* _buffer;
} YCIDL_sequence_mzc_circuit;
#ifndef YCIDL_sequence_mzc_circuit_SUPP_FUNCS
#define YCIDL_sequence_mzc_circuit_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_circuit_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_circuit_DEFINED */

#ifndef mzc_cktspec_DECLARED
#define mzc_cktspec_DECLARED
typedef struct mzc_cktspec mzc_cktspec;
#endif /* mzc_cktspec_DECLARED */

#ifndef YCIDL_sequence_mzc_cktspec_DEFINED
#define YCIDL_sequence_mzc_cktspec_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_cktspec* _buffer;
} YCIDL_sequence_mzc_cktspec;
#ifndef YCIDL_sequence_mzc_cktspec_SUPP_FUNCS
#define YCIDL_sequence_mzc_cktspec_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_cktspec_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_cktspec_DEFINED */


/* interface mzc_ckt declarations */
#ifndef mzc_ckt_DECLARED
#define mzc_ckt_DECLARED
typedef struct YCmzc_ckt* mzc_ckt;
CONST yotk* mzc_ckt__getTC(void);
#ifndef YCTC_mzc_ckt
#define YCTC_mzc_ckt   (mzc_ckt__getTC())
#endif
#endif /* mzc_ckt_DECLARED */

#ifndef mzc_ckt_SUPP_FUNCS
#define mzc_ckt_SUPP_FUNCS
void mzc_ckt__free( mzc_ckt* val, ysmff ffunc);
void mzc_ckt__copy( mzc_ckt* dest, mzc_ckt* src, ysmaf afunc);
#endif /* mzc_ckt_SUPP_FUNCS */

#ifndef YCIDL_sequence_mzc_ckt_DEFINED
#define YCIDL_sequence_mzc_ckt_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzc_ckt* _buffer;
} YCIDL_sequence_mzc_ckt;
#ifndef YCIDL_sequence_mzc_ckt_SUPP_FUNCS
#define YCIDL_sequence_mzc_ckt_SUPP_FUNCS
#endif /* YCIDL_sequence_mzc_ckt_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzc_ckt_DEFINED */

#ifndef mkd_segment_DECLARED
#define mkd_segment_DECLARED
typedef struct mkd_segment mkd_segment;
#endif /* mkd_segment_DECLARED */

#ifndef YCIDL_sequence_mkd_segment_DEFINED
#define YCIDL_sequence_mkd_segment_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mkd_segment* _buffer;
} YCIDL_sequence_mkd_segment;
#ifndef YCIDL_sequence_mkd_segment_SUPP_FUNCS
#define YCIDL_sequence_mkd_segment_SUPP_FUNCS
#endif /* YCIDL_sequence_mkd_segment_SUPP_FUNCS */

#endif /* YCIDL_sequence_mkd_segment_DEFINED */

#ifndef mkd_segInfo_DECLARED
#define mkd_segInfo_DECLARED
typedef struct mkd_segInfo mkd_segInfo;
#endif /* mkd_segInfo_DECLARED */

#ifndef YCIDL_sequence_mkd_segInfo_DEFINED
#define YCIDL_sequence_mkd_segInfo_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mkd_segInfo* _buffer;
} YCIDL_sequence_mkd_segInfo;
#ifndef YCIDL_sequence_mkd_segInfo_SUPP_FUNCS
#define YCIDL_sequence_mkd_segInfo_SUPP_FUNCS
#endif /* YCIDL_sequence_mkd_segInfo_SUPP_FUNCS */

#endif /* YCIDL_sequence_mkd_segInfo_DEFINED */

#ifndef mzz_resource_DECLARED
#define mzz_resource_DECLARED
typedef struct mzz_resource mzz_resource;
#endif /* mzz_resource_DECLARED */

#ifndef YCIDL_sequence_mzz_resource_DEFINED
#define YCIDL_sequence_mzz_resource_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzz_resource* _buffer;
} YCIDL_sequence_mzz_resource;
#ifndef YCIDL_sequence_mzz_resource_SUPP_FUNCS
#define YCIDL_sequence_mzz_resource_SUPP_FUNCS
#endif /* YCIDL_sequence_mzz_resource_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzz_resource_DEFINED */

#ifndef mzz_sesInfo_DECLARED
#define mzz_sesInfo_DECLARED
typedef struct mzz_sesInfo mzz_sesInfo;
#endif /* mzz_sesInfo_DECLARED */

#ifndef YCIDL_sequence_mzz_sesInfo_DEFINED
#define YCIDL_sequence_mzz_sesInfo_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzz_sesInfo* _buffer;
} YCIDL_sequence_mzz_sesInfo;
#ifndef YCIDL_sequence_mzz_sesInfo_SUPP_FUNCS
#define YCIDL_sequence_mzz_sesInfo_SUPP_FUNCS
#endif /* YCIDL_sequence_mzz_sesInfo_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzz_sesInfo_DEFINED */

#ifndef mzz_session_DECLARED
#define mzz_session_DECLARED
typedef struct mzz_session mzz_session;
#endif /* mzz_session_DECLARED */

#ifndef YCIDL_sequence_mzz_session_DEFINED
#define YCIDL_sequence_mzz_session_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzz_session* _buffer;
} YCIDL_sequence_mzz_session;
#ifndef YCIDL_sequence_mzz_session_SUPP_FUNCS
#define YCIDL_sequence_mzz_session_SUPP_FUNCS
#endif /* YCIDL_sequence_mzz_session_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzz_session_DEFINED */


/* interface mzz_ses declarations */
#ifndef mzz_ses_DECLARED
#define mzz_ses_DECLARED
typedef struct YCmzz_ses* mzz_ses;
CONST yotk* mzz_ses__getTC(void);
#ifndef YCTC_mzz_ses
#define YCTC_mzz_ses   (mzz_ses__getTC())
#endif
#endif /* mzz_ses_DECLARED */

#ifndef mzz_ses_SUPP_FUNCS
#define mzz_ses_SUPP_FUNCS
void mzz_ses__free( mzz_ses* val, ysmff ffunc);
void mzz_ses__copy( mzz_ses* dest, mzz_ses* src, ysmaf afunc);
#endif /* mzz_ses_SUPP_FUNCS */

#ifndef YCIDL_sequence_mzz_ses_DEFINED
#define YCIDL_sequence_mzz_ses_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  mzz_ses* _buffer;
} YCIDL_sequence_mzz_ses;
#ifndef YCIDL_sequence_mzz_ses_SUPP_FUNCS
#define YCIDL_sequence_mzz_ses_SUPP_FUNCS
#endif /* YCIDL_sequence_mzz_ses_SUPP_FUNCS */

#endif /* YCIDL_sequence_mzz_ses_DEFINED */

/******* NON-SEQUENCE DECLARATIONS *******/
#ifndef mzc_transportType_DECLARED
#define mzc_transportType_DECLARED
typedef ub4 mzc_transportType;
CONST yotk* mzc_transportType__getTC(void);
#ifndef YCTC_mzc_transportType
#define YCTC_mzc_transportType   (mzc_transportType__getTC())
#endif
#endif /* mzc_transportType_DECLARED */

#ifndef mzc_transportType_DEFINED
#define mzc_transportType_DEFINED
#define mzc_transportTypeNone ((mzc_transportType) 0)
#define mzc_transportTypeOGF ((mzc_transportType) 1)
#define mzc_transportTypeMPEG2 ((mzc_transportType) 2)
#define mzc_transportTypeDSMCC_UN ((mzc_transportType) 3)
#endif /* mzc_transportType_DEFINED */

#ifndef mzc_transportType_SUPP_FUNCS
#define mzc_transportType_SUPP_FUNCS
void mzc_transportType__free( mzc_transportType* val, ysmff ffunc);
void mzc_transportType__copy( mzc_transportType* dest, mzc_transportType* src, ysmaf afunc);
#endif /* mzc_transportType_SUPP_FUNCS */

#ifndef mzc_channelException_DECLARED
#define mzc_channelException_DECLARED
typedef ub4 mzc_channelException;
CONST yotk* mzc_channelException__getTC(void);
#ifndef YCTC_mzc_channelException
#define YCTC_mzc_channelException   (mzc_channelException__getTC())
#endif
#endif /* mzc_channelException_DECLARED */

#ifndef mzc_channelException_DEFINED
#define mzc_channelException_DEFINED
#define mzc_chnlExNotImplemented ((mzc_channelException) 0)
#define mzc_chnlExOutOfMemory ((mzc_channelException) 1)
#define mzc_chnlExOutOfChannels ((mzc_channelException) 2)
#define mzc_chnlExOutOfBandwidth ((mzc_channelException) 3)
#define mzc_chnlExBadProtocol ((mzc_channelException) 4)
#define mzc_chnlExBadAddress ((mzc_channelException) 5)
#endif /* mzc_channelException_DEFINED */

#ifndef mzc_channelException_SUPP_FUNCS
#define mzc_channelException_SUPP_FUNCS
void mzc_channelException__free( mzc_channelException* val, ysmff ffunc);
void mzc_channelException__copy( mzc_channelException* dest, mzc_channelException* src, ysmaf afunc);
#endif /* mzc_channelException_SUPP_FUNCS */

#ifndef MZC_EX_CHNLEX_DECLARED
#define MZC_EX_CHNLEX_DECLARED
CONST ysid* mzc_chnlEx__getId(void);
#ifndef MZC_EX_CHNLEX
#define MZC_EX_CHNLEX   (mzc_chnlEx__getId())
#endif
#endif /* MZC_EX_CHNLEX_DECLARED */

#ifndef mzc_chnlEx_DECLARED
#define mzc_chnlEx_DECLARED
typedef struct mzc_chnlEx mzc_chnlEx;
#endif /* mzc_chnlEx_DECLARED */

#ifndef mzc_chnlEx_DEFINED
#define mzc_chnlEx_DEFINED
struct mzc_chnlEx
{
  mzc_channelException channelFailType;
};
CONST yotk* mzc_chnlEx__getTC(void);
#ifndef YCTC_mzc_chnlEx
#define YCTC_mzc_chnlEx   (mzc_chnlEx__getTC())
#endif
#endif /* mzc_chnlEx_DEFINED */

#ifndef mzc_chnlEx_SUPP_FUNCS
#define mzc_chnlEx_SUPP_FUNCS
void mzc_chnlEx__free( mzc_chnlEx* val, ysmff ffunc);
void mzc_chnlEx__copy( mzc_chnlEx* dest, mzc_chnlEx* src, ysmaf afunc);
#endif /* mzc_chnlEx_SUPP_FUNCS */

#ifndef mzc_commProperty_DECLARED
#define mzc_commProperty_DECLARED
typedef ub4 mzc_commProperty;
CONST yotk* mzc_commProperty__getTC(void);
#ifndef YCTC_mzc_commProperty
#define YCTC_mzc_commProperty   (mzc_commProperty__getTC())
#endif
#endif /* mzc_commProperty_DECLARED */

#ifndef mzc_commProperty_SUPP_FUNCS
#define mzc_commProperty_SUPP_FUNCS
#endif /* mzc_commProperty_SUPP_FUNCS */

#ifndef mzc_propNull_DECLARED
#define mzc_propNull_DECLARED
#define mzc_propNull ((mzc_commProperty) 0)
#endif /* mzc_propNull_DECLARED */

#ifndef mzc_propDown_DECLARED
#define mzc_propDown_DECLARED
#define mzc_propDown ((mzc_commProperty) 1)
#endif /* mzc_propDown_DECLARED */

#ifndef mzc_propUp_DECLARED
#define mzc_propUp_DECLARED
#define mzc_propUp ((mzc_commProperty) 2)
#endif /* mzc_propUp_DECLARED */

#ifndef mzc_propPointcast_DECLARED
#define mzc_propPointcast_DECLARED
#define mzc_propPointcast ((mzc_commProperty) 16)
#endif /* mzc_propPointcast_DECLARED */

#ifndef mzc_propMulticast_DECLARED
#define mzc_propMulticast_DECLARED
#define mzc_propMulticast ((mzc_commProperty) 32)
#endif /* mzc_propMulticast_DECLARED */

#ifndef mzc_propBroadcast_DECLARED
#define mzc_propBroadcast_DECLARED
#define mzc_propBroadcast ((mzc_commProperty) 64)
#endif /* mzc_propBroadcast_DECLARED */

#ifndef mzc_propControl_DECLARED
#define mzc_propControl_DECLARED
#define mzc_propControl ((mzc_commProperty) 256)
#endif /* mzc_propControl_DECLARED */

#ifndef mzc_propData_DECLARED
#define mzc_propData_DECLARED
#define mzc_propData ((mzc_commProperty) 512)
#endif /* mzc_propData_DECLARED */

#ifndef mzc_propIsochronousData_DECLARED
#define mzc_propIsochronousData_DECLARED
#define mzc_propIsochronousData ((mzc_commProperty) 1024)
#endif /* mzc_propIsochronousData_DECLARED */

#ifndef mzc_propTransientConnect_DECLARED
#define mzc_propTransientConnect_DECLARED
#define mzc_propTransientConnect ((mzc_commProperty) 4096)
#endif /* mzc_propTransientConnect_DECLARED */

#ifndef mzc_propPersistantConnect_DECLARED
#define mzc_propPersistantConnect_DECLARED
#define mzc_propPersistantConnect ((mzc_commProperty) 8192)
#endif /* mzc_propPersistantConnect_DECLARED */

#ifndef mzc_propDisabled_DECLARED
#define mzc_propDisabled_DECLARED
#define mzc_propDisabled ((mzc_commProperty) 65536)
#endif /* mzc_propDisabled_DECLARED */

#ifndef mzc_propGroupDisabled_DECLARED
#define mzc_propGroupDisabled_DECLARED
#define mzc_propGroupDisabled ((mzc_commProperty) 131072)
#endif /* mzc_propGroupDisabled_DECLARED */

#ifndef mzc_logicalAddress_DECLARED
#define mzc_logicalAddress_DECLARED
typedef YCIDL_sequence_ub1 mzc_logicalAddress;
CONST yotk* mzc_logicalAddress__getTC(void);
#ifndef YCTC_mzc_logicalAddress
#define YCTC_mzc_logicalAddress   (mzc_logicalAddress__getTC())
#endif
#endif /* mzc_logicalAddress_DECLARED */

#ifndef mzc_logicalAddress_SUPP_FUNCS
#define mzc_logicalAddress_SUPP_FUNCS
void mzc_logicalAddress__free( mzc_logicalAddress* val, ysmff ffunc);
void mzc_logicalAddress__copy( mzc_logicalAddress* dest, mzc_logicalAddress* src, ysmaf afunc);
#endif /* mzc_logicalAddress_SUPP_FUNCS */


/* interface mzc_chnl declarations */
#ifndef mzc_chnl_DECLARED
#define mzc_chnl_DECLARED
typedef struct YCmzc_chnl* mzc_chnl;
CONST yotk* mzc_chnl__getTC(void);
#ifndef YCTC_mzc_chnl
#define YCTC_mzc_chnl   (mzc_chnl__getTC())
#endif
#endif /* mzc_chnl_DECLARED */

#ifndef mzc_chnl_SUPP_FUNCS
#define mzc_chnl_SUPP_FUNCS
void mzc_chnl__free( mzc_chnl* val, ysmff ffunc);
void mzc_chnl__copy( mzc_chnl* dest, mzc_chnl* src, ysmaf afunc);
#endif /* mzc_chnl_SUPP_FUNCS */

#ifndef mzc_netproto_DECLARED
#define mzc_netproto_DECLARED
typedef struct mzc_netproto mzc_netproto;
#endif /* mzc_netproto_DECLARED */

#ifndef mzc_netproto_DEFINED
#define mzc_netproto_DEFINED
struct mzc_netproto
{
  char* name;
  char* info;
};
CONST yotk* mzc_netproto__getTC(void);
#ifndef YCTC_mzc_netproto
#define YCTC_mzc_netproto   (mzc_netproto__getTC())
#endif
#endif /* mzc_netproto_DEFINED */

#ifndef mzc_netproto_SUPP_FUNCS
#define mzc_netproto_SUPP_FUNCS
void mzc_netproto__free( mzc_netproto* val, ysmff ffunc);
void mzc_netproto__copy( mzc_netproto* dest, mzc_netproto* src, ysmaf afunc);
#endif /* mzc_netproto_SUPP_FUNCS */

#ifndef mzc_netprotos_DECLARED
#define mzc_netprotos_DECLARED
typedef YCIDL_sequence_mzc_netproto mzc_netprotos;
CONST yotk* mzc_netprotos__getTC(void);
#ifndef YCTC_mzc_netprotos
#define YCTC_mzc_netprotos   (mzc_netprotos__getTC())
#endif
#endif /* mzc_netprotos_DECLARED */

#ifndef mzc_netprotos_SUPP_FUNCS
#define mzc_netprotos_SUPP_FUNCS
void mzc_netprotos__free( mzc_netprotos* val, ysmff ffunc);
void mzc_netprotos__copy( mzc_netprotos* dest, mzc_netprotos* src, ysmaf afunc);
#endif /* mzc_netprotos_SUPP_FUNCS */

#ifndef mzc_netapi_DECLARED
#define mzc_netapi_DECLARED
typedef struct mzc_netapi mzc_netapi;
#endif /* mzc_netapi_DECLARED */

#ifndef mzc_netapi_DEFINED
#define mzc_netapi_DEFINED
struct mzc_netapi
{
  char* name;
  YCIDL_sequence_ub1 info;
};
CONST yotk* mzc_netapi__getTC(void);
#ifndef YCTC_mzc_netapi
#define YCTC_mzc_netapi   (mzc_netapi__getTC())
#endif
#endif /* mzc_netapi_DEFINED */

#ifndef mzc_netapi_SUPP_FUNCS
#define mzc_netapi_SUPP_FUNCS
void mzc_netapi__free( mzc_netapi* val, ysmff ffunc);
void mzc_netapi__copy( mzc_netapi* dest, mzc_netapi* src, ysmaf afunc);
#endif /* mzc_netapi_SUPP_FUNCS */

#ifndef mzc_netapis_DECLARED
#define mzc_netapis_DECLARED
typedef YCIDL_sequence_mzc_netapi mzc_netapis;
CONST yotk* mzc_netapis__getTC(void);
#ifndef YCTC_mzc_netapis
#define YCTC_mzc_netapis   (mzc_netapis__getTC())
#endif
#endif /* mzc_netapis_DECLARED */

#ifndef mzc_netapis_SUPP_FUNCS
#define mzc_netapis_SUPP_FUNCS
void mzc_netapis__free( mzc_netapis* val, ysmff ffunc);
void mzc_netapis__copy( mzc_netapis* dest, mzc_netapis* src, ysmaf afunc);
#endif /* mzc_netapis_SUPP_FUNCS */

#ifndef mzc_netif_DECLARED
#define mzc_netif_DECLARED
typedef struct mzc_netif mzc_netif;
#endif /* mzc_netif_DECLARED */

#ifndef mzc_netif_DEFINED
#define mzc_netif_DEFINED
struct mzc_netif
{
  char* name;
  char* hostname;
  char* devicename;
  YCIDL_sequence_ub1 info;
  ub4 curbr;
  ub4 maxbr;
};
CONST yotk* mzc_netif__getTC(void);
#ifndef YCTC_mzc_netif
#define YCTC_mzc_netif   (mzc_netif__getTC())
#endif
#endif /* mzc_netif_DEFINED */

#ifndef mzc_netif_SUPP_FUNCS
#define mzc_netif_SUPP_FUNCS
void mzc_netif__free( mzc_netif* val, ysmff ffunc);
void mzc_netif__copy( mzc_netif* dest, mzc_netif* src, ysmaf afunc);
#endif /* mzc_netif_SUPP_FUNCS */

#ifndef mzc_netifs_DECLARED
#define mzc_netifs_DECLARED
typedef YCIDL_sequence_mzc_netif mzc_netifs;
CONST yotk* mzc_netifs__getTC(void);
#ifndef YCTC_mzc_netifs
#define YCTC_mzc_netifs   (mzc_netifs__getTC())
#endif
#endif /* mzc_netifs_DECLARED */

#ifndef mzc_netifs_SUPP_FUNCS
#define mzc_netifs_SUPP_FUNCS
void mzc_netifs__free( mzc_netifs* val, ysmff ffunc);
void mzc_netifs__copy( mzc_netifs* dest, mzc_netifs* src, ysmaf afunc);
#endif /* mzc_netifs_SUPP_FUNCS */

#ifndef mzc_pktinfo_DECLARED
#define mzc_pktinfo_DECLARED
typedef struct mzc_pktinfo mzc_pktinfo;
#endif /* mzc_pktinfo_DECLARED */

#ifndef mzc_pktinfo_DEFINED
#define mzc_pktinfo_DEFINED
struct mzc_pktinfo
{
  ub4 pref_size;
  ub4 max_size;
  ub4 modulos;
};
CONST yotk* mzc_pktinfo__getTC(void);
#ifndef YCTC_mzc_pktinfo
#define YCTC_mzc_pktinfo   (mzc_pktinfo__getTC())
#endif
#endif /* mzc_pktinfo_DEFINED */

#ifndef mzc_pktinfo_SUPP_FUNCS
#define mzc_pktinfo_SUPP_FUNCS
void mzc_pktinfo__free( mzc_pktinfo* val, ysmff ffunc);
void mzc_pktinfo__copy( mzc_pktinfo* dest, mzc_pktinfo* src, ysmaf afunc);
#endif /* mzc_pktinfo_SUPP_FUNCS */

#ifndef mzc_pktinfos_DECLARED
#define mzc_pktinfos_DECLARED
typedef YCIDL_sequence_mzc_pktinfo mzc_pktinfos;
CONST yotk* mzc_pktinfos__getTC(void);
#ifndef YCTC_mzc_pktinfos
#define YCTC_mzc_pktinfos   (mzc_pktinfos__getTC())
#endif
#endif /* mzc_pktinfos_DECLARED */

#ifndef mzc_pktinfos_SUPP_FUNCS
#define mzc_pktinfos_SUPP_FUNCS
void mzc_pktinfos__free( mzc_pktinfos* val, ysmff ffunc);
void mzc_pktinfos__copy( mzc_pktinfos* dest, mzc_pktinfos* src, ysmaf afunc);
#endif /* mzc_pktinfos_SUPP_FUNCS */

#ifndef mzc_link_DECLARED
#define mzc_link_DECLARED
typedef struct mzc_link mzc_link;
#endif /* mzc_link_DECLARED */

#ifndef mzc_link_DEFINED
#define mzc_link_DEFINED
struct mzc_link
{
  char* name;
  mzc_netproto protocol;
  mzc_netapi software;
  mzc_netif hardware;
  mzc_pktinfo packet;
};
CONST yotk* mzc_link__getTC(void);
#ifndef YCTC_mzc_link
#define YCTC_mzc_link   (mzc_link__getTC())
#endif
#endif /* mzc_link_DEFINED */

#ifndef mzc_link_SUPP_FUNCS
#define mzc_link_SUPP_FUNCS
void mzc_link__free( mzc_link* val, ysmff ffunc);
void mzc_link__copy( mzc_link* dest, mzc_link* src, ysmaf afunc);
#endif /* mzc_link_SUPP_FUNCS */

#ifndef mzc_links_DECLARED
#define mzc_links_DECLARED
typedef YCIDL_sequence_mzc_link mzc_links;
CONST yotk* mzc_links__getTC(void);
#ifndef YCTC_mzc_links
#define YCTC_mzc_links   (mzc_links__getTC())
#endif
#endif /* mzc_links_DECLARED */

#ifndef mzc_links_SUPP_FUNCS
#define mzc_links_SUPP_FUNCS
void mzc_links__free( mzc_links* val, ysmff ffunc);
void mzc_links__copy( mzc_links* dest, mzc_links* src, ysmaf afunc);
#endif /* mzc_links_SUPP_FUNCS */

#ifndef mzc_chnlInfo_DECLARED
#define mzc_chnlInfo_DECLARED
typedef struct mzc_chnlInfo mzc_chnlInfo;
#endif /* mzc_chnlInfo_DECLARED */

#ifndef mzc_chnlInfo_DEFINED
#define mzc_chnlInfo_DEFINED
struct mzc_chnlInfo
{
  mzc_commProperty props;
  mzc_transportType transport;
  mzc_link comm;
  ub4 bitrate;
  mzc_logicalAddress mna;
};
CONST yotk* mzc_chnlInfo__getTC(void);
#ifndef YCTC_mzc_chnlInfo
#define YCTC_mzc_chnlInfo   (mzc_chnlInfo__getTC())
#endif
#endif /* mzc_chnlInfo_DEFINED */

#ifndef mzc_chnlInfo_SUPP_FUNCS
#define mzc_chnlInfo_SUPP_FUNCS
void mzc_chnlInfo__free( mzc_chnlInfo* val, ysmff ffunc);
void mzc_chnlInfo__copy( mzc_chnlInfo* dest, mzc_chnlInfo* src, ysmaf afunc);
#endif /* mzc_chnlInfo_SUPP_FUNCS */

#ifndef mzc_chnlInfos_DECLARED
#define mzc_chnlInfos_DECLARED
typedef YCIDL_sequence_mzc_chnlInfo mzc_chnlInfos;
CONST yotk* mzc_chnlInfos__getTC(void);
#ifndef YCTC_mzc_chnlInfos
#define YCTC_mzc_chnlInfos   (mzc_chnlInfos__getTC())
#endif
#endif /* mzc_chnlInfos_DECLARED */

#ifndef mzc_chnlInfos_SUPP_FUNCS
#define mzc_chnlInfos_SUPP_FUNCS
void mzc_chnlInfos__free( mzc_chnlInfos* val, ysmff ffunc);
void mzc_chnlInfos__copy( mzc_chnlInfos* dest, mzc_chnlInfos* src, ysmaf afunc);
#endif /* mzc_chnlInfos_SUPP_FUNCS */

#ifndef mzc_channel_DECLARED
#define mzc_channel_DECLARED
typedef struct mzc_channel mzc_channel;
#endif /* mzc_channel_DECLARED */

#ifndef mzc_channel_DEFINED
#define mzc_channel_DEFINED
struct mzc_channel
{
  mzc_chnl or;
  mzc_chnlInfo info;
};
CONST yotk* mzc_channel__getTC(void);
#ifndef YCTC_mzc_channel
#define YCTC_mzc_channel   (mzc_channel__getTC())
#endif
#endif /* mzc_channel_DEFINED */

#ifndef mzc_channel_SUPP_FUNCS
#define mzc_channel_SUPP_FUNCS
void mzc_channel__free( mzc_channel* val, ysmff ffunc);
void mzc_channel__copy( mzc_channel* dest, mzc_channel* src, ysmaf afunc);
#endif /* mzc_channel_SUPP_FUNCS */

#ifndef mzc_channels_DECLARED
#define mzc_channels_DECLARED
typedef YCIDL_sequence_mzc_channel mzc_channels;
CONST yotk* mzc_channels__getTC(void);
#ifndef YCTC_mzc_channels
#define YCTC_mzc_channels   (mzc_channels__getTC())
#endif
#endif /* mzc_channels_DECLARED */

#ifndef mzc_channels_SUPP_FUNCS
#define mzc_channels_SUPP_FUNCS
void mzc_channels__free( mzc_channels* val, ysmff ffunc);
void mzc_channels__copy( mzc_channels* dest, mzc_channels* src, ysmaf afunc);
#endif /* mzc_channels_SUPP_FUNCS */

#ifndef mzc_chnlreq_DECLARED
#define mzc_chnlreq_DECLARED
typedef struct mzc_chnlreq mzc_chnlreq;
#endif /* mzc_chnlreq_DECLARED */

#ifndef mzc_chnlreq_DEFINED
#define mzc_chnlreq_DEFINED
struct mzc_chnlreq
{
  mzc_commProperty props;
  mzc_transportType transport;
  mzc_netproto protocol;
  ub4 bitrate;
};
CONST yotk* mzc_chnlreq__getTC(void);
#ifndef YCTC_mzc_chnlreq
#define YCTC_mzc_chnlreq   (mzc_chnlreq__getTC())
#endif
#endif /* mzc_chnlreq_DEFINED */

#ifndef mzc_chnlreq_SUPP_FUNCS
#define mzc_chnlreq_SUPP_FUNCS
void mzc_chnlreq__free( mzc_chnlreq* val, ysmff ffunc);
void mzc_chnlreq__copy( mzc_chnlreq* dest, mzc_chnlreq* src, ysmaf afunc);
#endif /* mzc_chnlreq_SUPP_FUNCS */

#ifndef mzc_chnlspecType_DECLARED
#define mzc_chnlspecType_DECLARED
typedef ub4 mzc_chnlspecType;
CONST yotk* mzc_chnlspecType__getTC(void);
#ifndef YCTC_mzc_chnlspecType
#define YCTC_mzc_chnlspecType   (mzc_chnlspecType__getTC())
#endif
#endif /* mzc_chnlspecType_DECLARED */

#ifndef mzc_chnlspecType_DEFINED
#define mzc_chnlspecType_DEFINED
#define mzc_chnlspecTypeNone ((mzc_chnlspecType) 0)
#define mzc_chnlspecTypeRequest ((mzc_chnlspecType) 1)
#define mzc_chnlspecTypeChannel ((mzc_chnlspecType) 2)
#endif /* mzc_chnlspecType_DEFINED */

#ifndef mzc_chnlspecType_SUPP_FUNCS
#define mzc_chnlspecType_SUPP_FUNCS
void mzc_chnlspecType__free( mzc_chnlspecType* val, ysmff ffunc);
void mzc_chnlspecType__copy( mzc_chnlspecType* dest, mzc_chnlspecType* src, ysmaf afunc);
#endif /* mzc_chnlspecType_SUPP_FUNCS */

#ifndef mzc_chnlspec_DECLARED
#define mzc_chnlspec_DECLARED
typedef struct mzc_chnlspec mzc_chnlspec;
#endif /* mzc_chnlspec_DECLARED */

#ifndef mzc_chnlspec_DEFINED
#define mzc_chnlspec_DEFINED
struct mzc_chnlspec
{
  mzc_chnlspecType _d;
  union
  {
    sb4 none;
    mzc_chnlreq req;
    mzc_channel chnl;
  } _u;
};
CONST yotk* mzc_chnlspec__getTC(void);
#ifndef YCTC_mzc_chnlspec
#define YCTC_mzc_chnlspec   (mzc_chnlspec__getTC())
#endif
#endif /* mzc_chnlspec_DEFINED */

#ifndef mzc_chnlspec_SUPP_FUNCS
#define mzc_chnlspec_SUPP_FUNCS
void mzc_chnlspec__free( mzc_chnlspec* val, ysmff ffunc);
void mzc_chnlspec__copy( mzc_chnlspec* dest, mzc_chnlspec* src, ysmaf afunc);
#endif /* mzc_chnlspec_SUPP_FUNCS */

#ifndef mzc_chnlspecs_DECLARED
#define mzc_chnlspecs_DECLARED
typedef YCIDL_sequence_mzc_chnlspec mzc_chnlspecs;
CONST yotk* mzc_chnlspecs__getTC(void);
#ifndef YCTC_mzc_chnlspecs
#define YCTC_mzc_chnlspecs   (mzc_chnlspecs__getTC())
#endif
#endif /* mzc_chnlspecs_DECLARED */

#ifndef mzc_chnlspecs_SUPP_FUNCS
#define mzc_chnlspecs_SUPP_FUNCS
void mzc_chnlspecs__free( mzc_chnlspecs* val, ysmff ffunc);
void mzc_chnlspecs__copy( mzc_chnlspecs* dest, mzc_chnlspecs* src, ysmaf afunc);
#endif /* mzc_chnlspecs_SUPP_FUNCS */

#ifndef mzc_chnlreqx_DECLARED
#define mzc_chnlreqx_DECLARED
typedef struct mzc_chnlreqx mzc_chnlreqx;
#endif /* mzc_chnlreqx_DECLARED */

#ifndef mzc_chnlreqx_DEFINED
#define mzc_chnlreqx_DEFINED
struct mzc_chnlreqx
{
  mzc_commProperty props;
  mzc_transportType transport;
  mzc_netproto protocol;
  mzc_netapi software;
  mzc_netif hardware;
  mzc_pktinfo packet;
  ub4 bitrate;
};
CONST yotk* mzc_chnlreqx__getTC(void);
#ifndef YCTC_mzc_chnlreqx
#define YCTC_mzc_chnlreqx   (mzc_chnlreqx__getTC())
#endif
#endif /* mzc_chnlreqx_DEFINED */

#ifndef mzc_chnlreqx_SUPP_FUNCS
#define mzc_chnlreqx_SUPP_FUNCS
void mzc_chnlreqx__free( mzc_chnlreqx* val, ysmff ffunc);
void mzc_chnlreqx__copy( mzc_chnlreqx* dest, mzc_chnlreqx* src, ysmaf afunc);
#endif /* mzc_chnlreqx_SUPP_FUNCS */


/* interface mzc_chnl declarations */
#ifndef mzc_chnl_DECLARED
#define mzc_chnl_DECLARED
typedef struct YCmzc_chnl* mzc_chnl;
CONST yotk* mzc_chnl__getTC(void);
#ifndef YCTC_mzc_chnl
#define YCTC_mzc_chnl   (mzc_chnl__getTC())
#endif
#endif /* mzc_chnl_DECLARED */

#ifndef mzc_chnl_SUPP_FUNCS
#define mzc_chnl_SUPP_FUNCS
void mzc_chnl__free( mzc_chnl* val, ysmff ffunc);
void mzc_chnl__copy( mzc_chnl* dest, mzc_chnl* src, ysmaf afunc);
#endif /* mzc_chnl_SUPP_FUNCS */

CONST ysid* mzc_chnl__getId(void);
#ifndef mzc_chnl__id
#define mzc_chnl__id   (mzc_chnl__getId())
#endif
#ifndef mzc_chnls_DECLARED
#define mzc_chnls_DECLARED
typedef YCIDL_sequence_mzc_chnl mzc_chnls;
CONST yotk* mzc_chnls__getTC(void);
#ifndef YCTC_mzc_chnls
#define YCTC_mzc_chnls   (mzc_chnls__getTC())
#endif
#endif /* mzc_chnls_DECLARED */

#ifndef mzc_chnls_SUPP_FUNCS
#define mzc_chnls_SUPP_FUNCS
void mzc_chnls__free( mzc_chnls* val, ysmff ffunc);
void mzc_chnls__copy( mzc_chnls* dest, mzc_chnls* src, ysmaf afunc);
#endif /* mzc_chnls_SUPP_FUNCS */


/* interface mzs_stream declarations */
#ifndef mzs_stream_DECLARED
#define mzs_stream_DECLARED
typedef struct YCmzs_stream* mzs_stream;
CONST yotk* mzs_stream__getTC(void);
#ifndef YCTC_mzs_stream
#define YCTC_mzs_stream   (mzs_stream__getTC())
#endif
#endif /* mzs_stream_DECLARED */

#ifndef mzs_stream_SUPP_FUNCS
#define mzs_stream_SUPP_FUNCS
void mzs_stream__free( mzs_stream* val, ysmff ffunc);
void mzs_stream__copy( mzs_stream* dest, mzs_stream* src, ysmaf afunc);
#endif /* mzs_stream_SUPP_FUNCS */

#ifndef mzc_circuitException_DECLARED
#define mzc_circuitException_DECLARED
typedef ub4 mzc_circuitException;
CONST yotk* mzc_circuitException__getTC(void);
#ifndef YCTC_mzc_circuitException
#define YCTC_mzc_circuitException   (mzc_circuitException__getTC())
#endif
#endif /* mzc_circuitException_DECLARED */

#ifndef mzc_circuitException_DEFINED
#define mzc_circuitException_DEFINED
#define mzc_cktExNotImplemented ((mzc_circuitException) 0)
#define mzc_cktExNoChannelAvailable ((mzc_circuitException) 1)
#define mzc_cktExNoChannelBandwidth ((mzc_circuitException) 2)
#define mzc_cktExBadChannelProtocol ((mzc_circuitException) 3)
#define mzc_cktExBadChannelAddress ((mzc_circuitException) 4)
#define mzc_cktExNoUpstreamAvailable ((mzc_circuitException) 5)
#define mzc_cktExNoUpstreamBandwidth ((mzc_circuitException) 6)
#define mzc_cktExBadUpstreamProtocol ((mzc_circuitException) 7)
#define mzc_cktExBadUpstreamAddress ((mzc_circuitException) 8)
#define mzc_cktExNoDownstreamAvailable ((mzc_circuitException) 9)
#define mzc_cktExNoDownstreamBandwidth ((mzc_circuitException) 10)
#define mzc_cktExBadDownstreamProtocol ((mzc_circuitException) 11)
#define mzc_cktExBadDownstreamAddress ((mzc_circuitException) 12)
#define mzc_cktExNoCircuitAvailable ((mzc_circuitException) 13)
#define mzc_cktExInvalidClient ((mzc_circuitException) 14)
#define mzc_cktExInvalidRequest ((mzc_circuitException) 15)
#define mzc_cktExNotControl ((mzc_circuitException) 16)
#define mzc_cktExNotData ((mzc_circuitException) 17)
#define mzc_cktExNotIsochronous ((mzc_circuitException) 18)
#define mzc_cktExInvalidStream ((mzc_circuitException) 19)
#define mzc_cktExStreamAlreadyBound ((mzc_circuitException) 20)
#define mzc_cktExStreamNotBound ((mzc_circuitException) 21)
#endif /* mzc_circuitException_DEFINED */

#ifndef mzc_circuitException_SUPP_FUNCS
#define mzc_circuitException_SUPP_FUNCS
void mzc_circuitException__free( mzc_circuitException* val, ysmff ffunc);
void mzc_circuitException__copy( mzc_circuitException* dest, mzc_circuitException* src, ysmaf afunc);
#endif /* mzc_circuitException_SUPP_FUNCS */

#ifndef MZC_EX_CKTEX_DECLARED
#define MZC_EX_CKTEX_DECLARED
CONST ysid* mzc_cktEx__getId(void);
#ifndef MZC_EX_CKTEX
#define MZC_EX_CKTEX   (mzc_cktEx__getId())
#endif
#endif /* MZC_EX_CKTEX_DECLARED */

#ifndef mzc_cktEx_DECLARED
#define mzc_cktEx_DECLARED
typedef struct mzc_cktEx mzc_cktEx;
#endif /* mzc_cktEx_DECLARED */

#ifndef mzc_cktEx_DEFINED
#define mzc_cktEx_DEFINED
struct mzc_cktEx
{
  mzc_circuitException circuitFailType;
};
CONST yotk* mzc_cktEx__getTC(void);
#ifndef YCTC_mzc_cktEx
#define YCTC_mzc_cktEx   (mzc_cktEx__getTC())
#endif
#endif /* mzc_cktEx_DEFINED */

#ifndef mzc_cktEx_SUPP_FUNCS
#define mzc_cktEx_SUPP_FUNCS
void mzc_cktEx__free( mzc_cktEx* val, ysmff ffunc);
void mzc_cktEx__copy( mzc_cktEx* dest, mzc_cktEx* src, ysmaf afunc);
#endif /* mzc_cktEx_SUPP_FUNCS */

#ifndef mzc_clientDeviceId_DECLARED
#define mzc_clientDeviceId_DECLARED
typedef YCIDL_sequence_ub1 mzc_clientDeviceId;
CONST yotk* mzc_clientDeviceId__getTC(void);
#ifndef YCTC_mzc_clientDeviceId
#define YCTC_mzc_clientDeviceId   (mzc_clientDeviceId__getTC())
#endif
#endif /* mzc_clientDeviceId_DECLARED */

#ifndef mzc_clientDeviceId_SUPP_FUNCS
#define mzc_clientDeviceId_SUPP_FUNCS
void mzc_clientDeviceId__free( mzc_clientDeviceId* val, ysmff ffunc);
void mzc_clientDeviceId__copy( mzc_clientDeviceId* dest, mzc_clientDeviceId* src, ysmaf afunc);
#endif /* mzc_clientDeviceId_SUPP_FUNCS */


/* interface mzc_ckt declarations */
#ifndef mzc_ckt_DECLARED
#define mzc_ckt_DECLARED
typedef struct YCmzc_ckt* mzc_ckt;
CONST yotk* mzc_ckt__getTC(void);
#ifndef YCTC_mzc_ckt
#define YCTC_mzc_ckt   (mzc_ckt__getTC())
#endif
#endif /* mzc_ckt_DECLARED */

#ifndef mzc_ckt_SUPP_FUNCS
#define mzc_ckt_SUPP_FUNCS
void mzc_ckt__free( mzc_ckt* val, ysmff ffunc);
void mzc_ckt__copy( mzc_ckt* dest, mzc_ckt* src, ysmaf afunc);
#endif /* mzc_ckt_SUPP_FUNCS */

#ifndef mzc_cktInfo_DECLARED
#define mzc_cktInfo_DECLARED
typedef struct mzc_cktInfo mzc_cktInfo;
#endif /* mzc_cktInfo_DECLARED */

#ifndef mzc_cktInfo_DEFINED
#define mzc_cktInfo_DEFINED
struct mzc_cktInfo
{
  mzc_commProperty props;
  mzc_logicalAddress mna;
  mzs_stream streamRef;
  mzc_channel upstream;
  mzc_channel downstream;
};
CONST yotk* mzc_cktInfo__getTC(void);
#ifndef YCTC_mzc_cktInfo
#define YCTC_mzc_cktInfo   (mzc_cktInfo__getTC())
#endif
#endif /* mzc_cktInfo_DEFINED */

#ifndef mzc_cktInfo_SUPP_FUNCS
#define mzc_cktInfo_SUPP_FUNCS
void mzc_cktInfo__free( mzc_cktInfo* val, ysmff ffunc);
void mzc_cktInfo__copy( mzc_cktInfo* dest, mzc_cktInfo* src, ysmaf afunc);
#endif /* mzc_cktInfo_SUPP_FUNCS */

#ifndef mzc_cktInfos_DECLARED
#define mzc_cktInfos_DECLARED
typedef YCIDL_sequence_mzc_cktInfo mzc_cktInfos;
CONST yotk* mzc_cktInfos__getTC(void);
#ifndef YCTC_mzc_cktInfos
#define YCTC_mzc_cktInfos   (mzc_cktInfos__getTC())
#endif
#endif /* mzc_cktInfos_DECLARED */

#ifndef mzc_cktInfos_SUPP_FUNCS
#define mzc_cktInfos_SUPP_FUNCS
void mzc_cktInfos__free( mzc_cktInfos* val, ysmff ffunc);
void mzc_cktInfos__copy( mzc_cktInfos* dest, mzc_cktInfos* src, ysmaf afunc);
#endif /* mzc_cktInfos_SUPP_FUNCS */

#ifndef mzc_circuit_DECLARED
#define mzc_circuit_DECLARED
typedef struct mzc_circuit mzc_circuit;
#endif /* mzc_circuit_DECLARED */

#ifndef mzc_circuit_DEFINED
#define mzc_circuit_DEFINED
struct mzc_circuit
{
  mzc_ckt or;
  mzc_cktInfo info;
};
CONST yotk* mzc_circuit__getTC(void);
#ifndef YCTC_mzc_circuit
#define YCTC_mzc_circuit   (mzc_circuit__getTC())
#endif
#endif /* mzc_circuit_DEFINED */

#ifndef mzc_circuit_SUPP_FUNCS
#define mzc_circuit_SUPP_FUNCS
void mzc_circuit__free( mzc_circuit* val, ysmff ffunc);
void mzc_circuit__copy( mzc_circuit* dest, mzc_circuit* src, ysmaf afunc);
#endif /* mzc_circuit_SUPP_FUNCS */

#ifndef mzc_circuits_DECLARED
#define mzc_circuits_DECLARED
typedef YCIDL_sequence_mzc_circuit mzc_circuits;
CONST yotk* mzc_circuits__getTC(void);
#ifndef YCTC_mzc_circuits
#define YCTC_mzc_circuits   (mzc_circuits__getTC())
#endif
#endif /* mzc_circuits_DECLARED */

#ifndef mzc_circuits_SUPP_FUNCS
#define mzc_circuits_SUPP_FUNCS
void mzc_circuits__free( mzc_circuits* val, ysmff ffunc);
void mzc_circuits__copy( mzc_circuits* dest, mzc_circuits* src, ysmaf afunc);
#endif /* mzc_circuits_SUPP_FUNCS */

#ifndef mzc_cktreqType_DECLARED
#define mzc_cktreqType_DECLARED
typedef ub4 mzc_cktreqType;
CONST yotk* mzc_cktreqType__getTC(void);
#ifndef YCTC_mzc_cktreqType
#define YCTC_mzc_cktreqType   (mzc_cktreqType__getTC())
#endif
#endif /* mzc_cktreqType_DECLARED */

#ifndef mzc_cktreqType_DEFINED
#define mzc_cktreqType_DEFINED
#define mzc_cktreqTypeSymmetric ((mzc_cktreqType) 0)
#define mzc_cktreqTypeAsymmetric ((mzc_cktreqType) 1)
#endif /* mzc_cktreqType_DEFINED */

#ifndef mzc_cktreqType_SUPP_FUNCS
#define mzc_cktreqType_SUPP_FUNCS
void mzc_cktreqType__free( mzc_cktreqType* val, ysmff ffunc);
void mzc_cktreqType__copy( mzc_cktreqType* dest, mzc_cktreqType* src, ysmaf afunc);
#endif /* mzc_cktreqType_SUPP_FUNCS */

#ifndef mzc_cktreqSym_DECLARED
#define mzc_cktreqSym_DECLARED
typedef struct mzc_cktreqSym mzc_cktreqSym;
#endif /* mzc_cktreqSym_DECLARED */

#ifndef mzc_cktreqSym_DEFINED
#define mzc_cktreqSym_DEFINED
struct mzc_cktreqSym
{
  mzc_commProperty props;
  mzc_chnlspec chnl;
};
CONST yotk* mzc_cktreqSym__getTC(void);
#ifndef YCTC_mzc_cktreqSym
#define YCTC_mzc_cktreqSym   (mzc_cktreqSym__getTC())
#endif
#endif /* mzc_cktreqSym_DEFINED */

#ifndef mzc_cktreqSym_SUPP_FUNCS
#define mzc_cktreqSym_SUPP_FUNCS
void mzc_cktreqSym__free( mzc_cktreqSym* val, ysmff ffunc);
void mzc_cktreqSym__copy( mzc_cktreqSym* dest, mzc_cktreqSym* src, ysmaf afunc);
#endif /* mzc_cktreqSym_SUPP_FUNCS */

#ifndef mzc_cktreqAsym_DECLARED
#define mzc_cktreqAsym_DECLARED
typedef struct mzc_cktreqAsym mzc_cktreqAsym;
#endif /* mzc_cktreqAsym_DECLARED */

#ifndef mzc_cktreqAsym_DEFINED
#define mzc_cktreqAsym_DEFINED
struct mzc_cktreqAsym
{
  mzc_commProperty props;
  mzc_chnlspec upchnl;
  mzc_chnlspec downchnl;
};
CONST yotk* mzc_cktreqAsym__getTC(void);
#ifndef YCTC_mzc_cktreqAsym
#define YCTC_mzc_cktreqAsym   (mzc_cktreqAsym__getTC())
#endif
#endif /* mzc_cktreqAsym_DEFINED */

#ifndef mzc_cktreqAsym_SUPP_FUNCS
#define mzc_cktreqAsym_SUPP_FUNCS
void mzc_cktreqAsym__free( mzc_cktreqAsym* val, ysmff ffunc);
void mzc_cktreqAsym__copy( mzc_cktreqAsym* dest, mzc_cktreqAsym* src, ysmaf afunc);
#endif /* mzc_cktreqAsym_SUPP_FUNCS */

#ifndef mzc_cktreq_DECLARED
#define mzc_cktreq_DECLARED
typedef struct mzc_cktreq mzc_cktreq;
#endif /* mzc_cktreq_DECLARED */

#ifndef mzc_cktreq_DEFINED
#define mzc_cktreq_DEFINED
struct mzc_cktreq
{
  mzc_cktreqType _d;
  union
  {
    mzc_cktreqSym sym;
    mzc_cktreqAsym asym;
  } _u;
};
CONST yotk* mzc_cktreq__getTC(void);
#ifndef YCTC_mzc_cktreq
#define YCTC_mzc_cktreq   (mzc_cktreq__getTC())
#endif
#endif /* mzc_cktreq_DEFINED */

#ifndef mzc_cktreq_SUPP_FUNCS
#define mzc_cktreq_SUPP_FUNCS
void mzc_cktreq__free( mzc_cktreq* val, ysmff ffunc);
void mzc_cktreq__copy( mzc_cktreq* dest, mzc_cktreq* src, ysmaf afunc);
#endif /* mzc_cktreq_SUPP_FUNCS */

#ifndef mzc_cktspecType_DECLARED
#define mzc_cktspecType_DECLARED
typedef ub4 mzc_cktspecType;
CONST yotk* mzc_cktspecType__getTC(void);
#ifndef YCTC_mzc_cktspecType
#define YCTC_mzc_cktspecType   (mzc_cktspecType__getTC())
#endif
#endif /* mzc_cktspecType_DECLARED */

#ifndef mzc_cktspecType_DEFINED
#define mzc_cktspecType_DEFINED
#define mzc_cktspecTypeNone ((mzc_cktspecType) 0)
#define mzc_cktspecTypeRequest ((mzc_cktspecType) 1)
#define mzc_cktspecTypeCircuit ((mzc_cktspecType) 2)
#endif /* mzc_cktspecType_DEFINED */

#ifndef mzc_cktspecType_SUPP_FUNCS
#define mzc_cktspecType_SUPP_FUNCS
void mzc_cktspecType__free( mzc_cktspecType* val, ysmff ffunc);
void mzc_cktspecType__copy( mzc_cktspecType* dest, mzc_cktspecType* src, ysmaf afunc);
#endif /* mzc_cktspecType_SUPP_FUNCS */

#ifndef mzc_cktspec_DECLARED
#define mzc_cktspec_DECLARED
typedef struct mzc_cktspec mzc_cktspec;
#endif /* mzc_cktspec_DECLARED */

#ifndef mzc_cktspec_DEFINED
#define mzc_cktspec_DEFINED
struct mzc_cktspec
{
  mzc_cktspecType _d;
  union
  {
    sb4 none;
    mzc_cktreq req;
    mzc_circuit ckt;
  } _u;
};
CONST yotk* mzc_cktspec__getTC(void);
#ifndef YCTC_mzc_cktspec
#define YCTC_mzc_cktspec   (mzc_cktspec__getTC())
#endif
#endif /* mzc_cktspec_DEFINED */

#ifndef mzc_cktspec_SUPP_FUNCS
#define mzc_cktspec_SUPP_FUNCS
void mzc_cktspec__free( mzc_cktspec* val, ysmff ffunc);
void mzc_cktspec__copy( mzc_cktspec* dest, mzc_cktspec* src, ysmaf afunc);
#endif /* mzc_cktspec_SUPP_FUNCS */

#ifndef mzc_cktspecs_DECLARED
#define mzc_cktspecs_DECLARED
typedef YCIDL_sequence_mzc_cktspec mzc_cktspecs;
CONST yotk* mzc_cktspecs__getTC(void);
#ifndef YCTC_mzc_cktspecs
#define YCTC_mzc_cktspecs   (mzc_cktspecs__getTC())
#endif
#endif /* mzc_cktspecs_DECLARED */

#ifndef mzc_cktspecs_SUPP_FUNCS
#define mzc_cktspecs_SUPP_FUNCS
void mzc_cktspecs__free( mzc_cktspecs* val, ysmff ffunc);
void mzc_cktspecs__copy( mzc_cktspecs* dest, mzc_cktspecs* src, ysmaf afunc);
#endif /* mzc_cktspecs_SUPP_FUNCS */


/* interface mzc_ckt declarations */
#ifndef mzc_ckt_DECLARED
#define mzc_ckt_DECLARED
typedef struct YCmzc_ckt* mzc_ckt;
CONST yotk* mzc_ckt__getTC(void);
#ifndef YCTC_mzc_ckt
#define YCTC_mzc_ckt   (mzc_ckt__getTC())
#endif
#endif /* mzc_ckt_DECLARED */

#ifndef mzc_ckt_SUPP_FUNCS
#define mzc_ckt_SUPP_FUNCS
void mzc_ckt__free( mzc_ckt* val, ysmff ffunc);
void mzc_ckt__copy( mzc_ckt* dest, mzc_ckt* src, ysmaf afunc);
#endif /* mzc_ckt_SUPP_FUNCS */

CONST ysid* mzc_ckt__getId(void);
#ifndef mzc_ckt__id
#define mzc_ckt__id   (mzc_ckt__getId())
#endif
#ifndef mzc_ckts_DECLARED
#define mzc_ckts_DECLARED
typedef YCIDL_sequence_mzc_ckt mzc_ckts;
CONST yotk* mzc_ckts__getTC(void);
#ifndef YCTC_mzc_ckts
#define YCTC_mzc_ckts   (mzc_ckts__getTC())
#endif
#endif /* mzc_ckts_DECLARED */

#ifndef mzc_ckts_SUPP_FUNCS
#define mzc_ckts_SUPP_FUNCS
void mzc_ckts__free( mzc_ckts* val, ysmff ffunc);
void mzc_ckts__copy( mzc_ckts* dest, mzc_ckts* src, ysmaf afunc);
#endif /* mzc_ckts_SUPP_FUNCS */


/* interface mzc_factory declarations */
#ifndef mzc_factory_DECLARED
#define mzc_factory_DECLARED
typedef struct YCmzc_factory* mzc_factory;
CONST yotk* mzc_factory__getTC(void);
#ifndef YCTC_mzc_factory
#define YCTC_mzc_factory   (mzc_factory__getTC())
#endif
#endif /* mzc_factory_DECLARED */

#ifndef mzc_factory_SUPP_FUNCS
#define mzc_factory_SUPP_FUNCS
void mzc_factory__free( mzc_factory* val, ysmff ffunc);
void mzc_factory__copy( mzc_factory* dest, mzc_factory* src, ysmaf afunc);
#endif /* mzc_factory_SUPP_FUNCS */

CONST ysid* mzc_factory__getId(void);
#ifndef mzc_factory__id
#define mzc_factory__id   (mzc_factory__getId())
#endif
#ifndef mkd_assetCookieMaxlen_DECLARED
#define mkd_assetCookieMaxlen_DECLARED
#define mkd_assetCookieMaxlen ((sb2) 128)
#endif /* mkd_assetCookieMaxlen_DECLARED */

#ifndef mkd_assetCookie_DECLARED
#define mkd_assetCookie_DECLARED
typedef char* mkd_assetCookie;
CONST yotk* mkd_assetCookie__getTC(void);
#ifndef YCTC_mkd_assetCookie
#define YCTC_mkd_assetCookie   (mkd_assetCookie__getTC())
#endif
#endif /* mkd_assetCookie_DECLARED */

#ifndef mkd_assetCookie_SUPP_FUNCS
#define mkd_assetCookie_SUPP_FUNCS
#endif /* mkd_assetCookie_SUPP_FUNCS */

#ifndef mkd_assetCookieList_DECLARED
#define mkd_assetCookieList_DECLARED
typedef YCIDL_sequence_string mkd_assetCookieList;
CONST yotk* mkd_assetCookieList__getTC(void);
#ifndef YCTC_mkd_assetCookieList
#define YCTC_mkd_assetCookieList   (mkd_assetCookieList__getTC())
#endif
#endif /* mkd_assetCookieList_DECLARED */

#ifndef mkd_assetCookieList_SUPP_FUNCS
#define mkd_assetCookieList_SUPP_FUNCS
void mkd_assetCookieList__free( mkd_assetCookieList* val, ysmff ffunc);
void mkd_assetCookieList__copy( mkd_assetCookieList* dest, mkd_assetCookieList* src, ysmaf afunc);
#endif /* mkd_assetCookieList_SUPP_FUNCS */

#ifndef mkd_segCapMask_DECLARED
#define mkd_segCapMask_DECLARED
typedef ub4 mkd_segCapMask;
CONST yotk* mkd_segCapMask__getTC(void);
#ifndef YCTC_mkd_segCapMask
#define YCTC_mkd_segCapMask   (mkd_segCapMask__getTC())
#endif
#endif /* mkd_segCapMask_DECLARED */

#ifndef mkd_segCapMask_SUPP_FUNCS
#define mkd_segCapMask_SUPP_FUNCS
#endif /* mkd_segCapMask_SUPP_FUNCS */

#ifndef mkd_segCapVideo_DECLARED
#define mkd_segCapVideo_DECLARED
#define mkd_segCapVideo ((mkd_segCapMask) 1)
#endif /* mkd_segCapVideo_DECLARED */

#ifndef mkd_segCapVCBR_DECLARED
#define mkd_segCapVCBR_DECLARED
#define mkd_segCapVCBR ((mkd_segCapMask) 2)
#endif /* mkd_segCapVCBR_DECLARED */

#ifndef mkd_segCapVSeek_DECLARED
#define mkd_segCapVSeek_DECLARED
#define mkd_segCapVSeek ((mkd_segCapMask) 4)
#endif /* mkd_segCapVSeek_DECLARED */

#ifndef mkd_segCapVScan_DECLARED
#define mkd_segCapVScan_DECLARED
#define mkd_segCapVScan ((mkd_segCapMask) 8)
#endif /* mkd_segCapVScan_DECLARED */

#ifndef mkd_segCapAudio_DECLARED
#define mkd_segCapAudio_DECLARED
#define mkd_segCapAudio ((mkd_segCapMask) 65536)
#endif /* mkd_segCapAudio_DECLARED */

#ifndef mkd_segCapACBR_DECLARED
#define mkd_segCapACBR_DECLARED
#define mkd_segCapACBR ((mkd_segCapMask) 131072)
#endif /* mkd_segCapACBR_DECLARED */

#ifndef mkd_segCapASeek_DECLARED
#define mkd_segCapASeek_DECLARED
#define mkd_segCapASeek ((mkd_segCapMask) 262144)
#endif /* mkd_segCapASeek_DECLARED */

#ifndef mkd_segCapAScan_DECLARED
#define mkd_segCapAScan_DECLARED
#define mkd_segCapAScan ((mkd_segCapMask) 524288)
#endif /* mkd_segCapAScan_DECLARED */

#ifndef mkd_contStatus_DECLARED
#define mkd_contStatus_DECLARED
typedef ub4 mkd_contStatus;
CONST yotk* mkd_contStatus__getTC(void);
#ifndef YCTC_mkd_contStatus
#define YCTC_mkd_contStatus   (mkd_contStatus__getTC())
#endif
#endif /* mkd_contStatus_DECLARED */

#ifndef mkd_contStatus_DEFINED
#define mkd_contStatus_DEFINED
#define mkd_contStatusDisk ((mkd_contStatus) 0)
#define mkd_contStatusTape ((mkd_contStatus) 1)
#define mkd_contStatusFeed ((mkd_contStatus) 2)
#define mkd_contStatusRolling ((mkd_contStatus) 3)
#define mkd_contStatusTerminated ((mkd_contStatus) 4)
#define mkd_contStatusUnavailable ((mkd_contStatus) 5)
#endif /* mkd_contStatus_DEFINED */

#ifndef mkd_contStatus_SUPP_FUNCS
#define mkd_contStatus_SUPP_FUNCS
void mkd_contStatus__free( mkd_contStatus* val, ysmff ffunc);
void mkd_contStatus__copy( mkd_contStatus* dest, mkd_contStatus* src, ysmaf afunc);
#endif /* mkd_contStatus_SUPP_FUNCS */

#ifndef mkd_compFormat_DECLARED
#define mkd_compFormat_DECLARED
typedef ub4 mkd_compFormat;
CONST yotk* mkd_compFormat__getTC(void);
#ifndef YCTC_mkd_compFormat
#define YCTC_mkd_compFormat   (mkd_compFormat__getTC())
#endif
#endif /* mkd_compFormat_DECLARED */

#ifndef mkd_compFormat_SUPP_FUNCS
#define mkd_compFormat_SUPP_FUNCS
#endif /* mkd_compFormat_SUPP_FUNCS */

#ifndef mkd_compFormatError_DECLARED
#define mkd_compFormatError_DECLARED
#define mkd_compFormatError ((mkd_compFormat) 0)
#endif /* mkd_compFormatError_DECLARED */

#ifndef mkd_compFormatMpeg1_DECLARED
#define mkd_compFormatMpeg1_DECLARED
#define mkd_compFormatMpeg1 ((mkd_compFormat) 1)
#endif /* mkd_compFormatMpeg1_DECLARED */

#ifndef mkd_compFormatMpeg2_DECLARED
#define mkd_compFormatMpeg2_DECLARED
#define mkd_compFormatMpeg2 ((mkd_compFormat) 4)
#endif /* mkd_compFormatMpeg2_DECLARED */

#ifndef mkd_compFormatOrca_DECLARED
#define mkd_compFormatOrca_DECLARED
#define mkd_compFormatOrca ((mkd_compFormat) 8)
#endif /* mkd_compFormatOrca_DECLARED */

#ifndef mkd_compFormatRawKey_DECLARED
#define mkd_compFormatRawKey_DECLARED
#define mkd_compFormatRawKey ((mkd_compFormat) 1024)
#endif /* mkd_compFormatRawKey_DECLARED */

#ifndef mkd_compFormatSegWHdr_DECLARED
#define mkd_compFormatSegWHdr_DECLARED
#define mkd_compFormatSegWHdr ((mkd_compFormat) 8192)
#endif /* mkd_compFormatSegWHdr_DECLARED */

#ifndef mkd_compFormatSegWoHdr_DECLARED
#define mkd_compFormatSegWoHdr_DECLARED
#define mkd_compFormatSegWoHdr ((mkd_compFormat) 16384)
#endif /* mkd_compFormatSegWoHdr_DECLARED */

#ifndef mkd_compFormatDsmcc_DECLARED
#define mkd_compFormatDsmcc_DECLARED
#define mkd_compFormatDsmcc ((mkd_compFormat) 32768)
#endif /* mkd_compFormatDsmcc_DECLARED */

#ifndef mkd_prohib_DECLARED
#define mkd_prohib_DECLARED
typedef ub4 mkd_prohib;
CONST yotk* mkd_prohib__getTC(void);
#ifndef YCTC_mkd_prohib
#define YCTC_mkd_prohib   (mkd_prohib__getTC())
#endif
#endif /* mkd_prohib_DECLARED */

#ifndef mkd_prohib_SUPP_FUNCS
#define mkd_prohib_SUPP_FUNCS
#endif /* mkd_prohib_SUPP_FUNCS */

#ifndef mkd_prohibError_DECLARED
#define mkd_prohibError_DECLARED
#define mkd_prohibError ((mkd_prohib) 2147483648)
#endif /* mkd_prohibError_DECLARED */

#ifndef mkd_prohibPause_DECLARED
#define mkd_prohibPause_DECLARED
#define mkd_prohibPause ((mkd_prohib) 1)
#endif /* mkd_prohibPause_DECLARED */

#ifndef mkd_prohibStop_DECLARED
#define mkd_prohibStop_DECLARED
#define mkd_prohibStop ((mkd_prohib) 2)
#endif /* mkd_prohibStop_DECLARED */

#ifndef mkd_prohibBlindFF_DECLARED
#define mkd_prohibBlindFF_DECLARED
#define mkd_prohibBlindFF ((mkd_prohib) 4)
#endif /* mkd_prohibBlindFF_DECLARED */

#ifndef mkd_prohibBlindRW_DECLARED
#define mkd_prohibBlindRW_DECLARED
#define mkd_prohibBlindRW ((mkd_prohib) 8)
#endif /* mkd_prohibBlindRW_DECLARED */

#ifndef mkd_prohibVisualFF_DECLARED
#define mkd_prohibVisualFF_DECLARED
#define mkd_prohibVisualFF ((mkd_prohib) 16)
#endif /* mkd_prohibVisualFF_DECLARED */

#ifndef mkd_prohibVisualRW_DECLARED
#define mkd_prohibVisualRW_DECLARED
#define mkd_prohibVisualRW ((mkd_prohib) 32)
#endif /* mkd_prohibVisualRW_DECLARED */

#ifndef mkd_prohibFrameAdv_DECLARED
#define mkd_prohibFrameAdv_DECLARED
#define mkd_prohibFrameAdv ((mkd_prohib) 64)
#endif /* mkd_prohibFrameAdv_DECLARED */

#ifndef mkd_prohibFrameRew_DECLARED
#define mkd_prohibFrameRew_DECLARED
#define mkd_prohibFrameRew ((mkd_prohib) 128)
#endif /* mkd_prohibFrameRew_DECLARED */

#ifndef mkd_posType_DECLARED
#define mkd_posType_DECLARED
typedef ub4 mkd_posType;
CONST yotk* mkd_posType__getTC(void);
#ifndef YCTC_mkd_posType
#define YCTC_mkd_posType   (mkd_posType__getTC())
#endif
#endif /* mkd_posType_DECLARED */

#ifndef mkd_posType_DEFINED
#define mkd_posType_DEFINED
#define mkd_posTypeBeginning ((mkd_posType) 0)
#define mkd_posTypeCurrent ((mkd_posType) 1)
#define mkd_posTypeEnd ((mkd_posType) 2)
#define mkd_posTypeByte ((mkd_posType) 3)
#define mkd_posTypeTime ((mkd_posType) 4)
#define mkd_posTypeMillisecs ((mkd_posType) 5)
#define mkd_posTypeMpegSCR ((mkd_posType) 6)
#define mkd_posTypeMpegPCR ((mkd_posType) 7)
#define mkd_posTypeBlock ((mkd_posType) 8)
#define mkd_posTypeDsmcc ((mkd_posType) 9)
#define mkd_posTypeContFeed ((mkd_posType) 10)
#define mkd_posTypeUnformed ((mkd_posType) 11)
#define mkd_posTypeDefaultStart ((mkd_posType) 12)
#endif /* mkd_posType_DEFINED */

#ifndef mkd_posType_SUPP_FUNCS
#define mkd_posType_SUPP_FUNCS
void mkd_posType__free( mkd_posType* val, ysmff ffunc);
void mkd_posType__copy( mkd_posType* dest, mkd_posType* src, ysmaf afunc);
#endif /* mkd_posType_SUPP_FUNCS */

#ifndef mkd_posByte_DECLARED
#define mkd_posByte_DECLARED
typedef struct mkd_posByte mkd_posByte;
#endif /* mkd_posByte_DECLARED */

#ifndef mkd_posByte_DEFINED
#define mkd_posByte_DEFINED
struct mkd_posByte
{
  sysb8 mkd_posByteOff;
};
CONST yotk* mkd_posByte__getTC(void);
#ifndef YCTC_mkd_posByte
#define YCTC_mkd_posByte   (mkd_posByte__getTC())
#endif
#endif /* mkd_posByte_DEFINED */

#ifndef mkd_posByte_SUPP_FUNCS
#define mkd_posByte_SUPP_FUNCS
void mkd_posByte__free( mkd_posByte* val, ysmff ffunc);
void mkd_posByte__copy( mkd_posByte* dest, mkd_posByte* src, ysmaf afunc);
#endif /* mkd_posByte_SUPP_FUNCS */

#ifndef mkd_posTime_DECLARED
#define mkd_posTime_DECLARED
typedef struct mkd_posTime mkd_posTime;
#endif /* mkd_posTime_DECLARED */

#ifndef mkd_posTime_DEFINED
#define mkd_posTime_DEFINED
struct mkd_posTime
{
  ub4 mkd_posTimeHour;
  ub1 mkd_posTimeMinute;
  ub1 mkd_posTimeSecond;
  ub1 mkd_posTimeHundredth;
};
CONST yotk* mkd_posTime__getTC(void);
#ifndef YCTC_mkd_posTime
#define YCTC_mkd_posTime   (mkd_posTime__getTC())
#endif
#endif /* mkd_posTime_DEFINED */

#ifndef mkd_posTime_SUPP_FUNCS
#define mkd_posTime_SUPP_FUNCS
void mkd_posTime__free( mkd_posTime* val, ysmff ffunc);
void mkd_posTime__copy( mkd_posTime* dest, mkd_posTime* src, ysmaf afunc);
#endif /* mkd_posTime_SUPP_FUNCS */

#ifndef mkd_posBlock_DECLARED
#define mkd_posBlock_DECLARED
typedef ub4 mkd_posBlock;
CONST yotk* mkd_posBlock__getTC(void);
#ifndef YCTC_mkd_posBlock
#define YCTC_mkd_posBlock   (mkd_posBlock__getTC())
#endif
#endif /* mkd_posBlock_DECLARED */

#ifndef mkd_posBlock_SUPP_FUNCS
#define mkd_posBlock_SUPP_FUNCS
#endif /* mkd_posBlock_SUPP_FUNCS */

#ifndef mkd_posMs_DECLARED
#define mkd_posMs_DECLARED
typedef ub4 mkd_posMs;
CONST yotk* mkd_posMs__getTC(void);
#ifndef YCTC_mkd_posMs
#define YCTC_mkd_posMs   (mkd_posMs__getTC())
#endif
#endif /* mkd_posMs_DECLARED */

#ifndef mkd_posMs_SUPP_FUNCS
#define mkd_posMs_SUPP_FUNCS
#endif /* mkd_posMs_SUPP_FUNCS */

#ifndef mkd_posSCR_DECLARED
#define mkd_posSCR_DECLARED
typedef sysb8 mkd_posSCR;
CONST yotk* mkd_posSCR__getTC(void);
#ifndef YCTC_mkd_posSCR
#define YCTC_mkd_posSCR   (mkd_posSCR__getTC())
#endif
#endif /* mkd_posSCR_DECLARED */

#ifndef mkd_posSCR_SUPP_FUNCS
#define mkd_posSCR_SUPP_FUNCS
#endif /* mkd_posSCR_SUPP_FUNCS */

#ifndef mkd_posPCR_DECLARED
#define mkd_posPCR_DECLARED
typedef sysb8 mkd_posPCR;
CONST yotk* mkd_posPCR__getTC(void);
#ifndef YCTC_mkd_posPCR
#define YCTC_mkd_posPCR   (mkd_posPCR__getTC())
#endif
#endif /* mkd_posPCR_DECLARED */

#ifndef mkd_posPCR_SUPP_FUNCS
#define mkd_posPCR_SUPP_FUNCS
#endif /* mkd_posPCR_SUPP_FUNCS */

#ifndef mkd_pos_DECLARED
#define mkd_pos_DECLARED
typedef struct mkd_pos mkd_pos;
#endif /* mkd_pos_DECLARED */

#ifndef mkd_pos_DEFINED
#define mkd_pos_DEFINED
struct mkd_pos
{
  mkd_posType _d;
  union
  {
    mkd_posTime mkd_posBegin;
    mkd_posTime mkd_posCur;
    mkd_posTime mkd_posEnd;
    mkd_posByte mkd_posBytePos;
    mkd_posTime mkd_posTimePos;
    mkd_posMs mkd_posMsPos;
    mkd_posSCR mkd_posSCRPos;
    mkd_posPCR mkd_posPCRPos;
    mkd_posBlock mkd_posBlockPos;
    mkd_posBlock mkd_posDsmcc;
    mkd_posTime mkd_posFeed;
    mkd_posTime mkd_posNoWay;
    mkd_posTime mkd_posDefaultStart;
  } _u;
};
CONST yotk* mkd_pos__getTC(void);
#ifndef YCTC_mkd_pos
#define YCTC_mkd_pos   (mkd_pos__getTC())
#endif
#endif /* mkd_pos_DEFINED */

#ifndef mkd_pos_SUPP_FUNCS
#define mkd_pos_SUPP_FUNCS
void mkd_pos__free( mkd_pos* val, ysmff ffunc);
void mkd_pos__copy( mkd_pos* dest, mkd_pos* src, ysmaf afunc);
#endif /* mkd_pos_SUPP_FUNCS */

#ifndef mkd_wall_DECLARED
#define mkd_wall_DECLARED
typedef struct mkd_wall mkd_wall;
#endif /* mkd_wall_DECLARED */

#ifndef mkd_wall_DEFINED
#define mkd_wall_DEFINED
struct mkd_wall
{
  ub4 mkd_wallNano;
  ub2 mkd_wallSec;
  ub2 mkd_wallMin;
  ub2 mkd_wallHour;
  ub2 mkd_wallDay;
  ub2 mkd_wallMonth;
  sb2 mkd_wallYear;
};
CONST yotk* mkd_wall__getTC(void);
#ifndef YCTC_mkd_wall
#define YCTC_mkd_wall   (mkd_wall__getTC())
#endif
#endif /* mkd_wall_DEFINED */

#ifndef mkd_wall_SUPP_FUNCS
#define mkd_wall_SUPP_FUNCS
void mkd_wall__free( mkd_wall* val, ysmff ffunc);
void mkd_wall__copy( mkd_wall* dest, mkd_wall* src, ysmaf afunc);
#endif /* mkd_wall_SUPP_FUNCS */

#ifndef mkd_gmtWall_DECLARED
#define mkd_gmtWall_DECLARED
typedef mkd_wall mkd_gmtWall;
CONST yotk* mkd_gmtWall__getTC(void);
#ifndef YCTC_mkd_gmtWall
#define YCTC_mkd_gmtWall   (mkd_gmtWall__getTC())
#endif
#endif /* mkd_gmtWall_DECLARED */

#ifndef mkd_gmtWall_SUPP_FUNCS
#define mkd_gmtWall_SUPP_FUNCS
#define mkd_gmtWall__free(val, ffunc) mkd_wall__free((val),(ffunc))
#define mkd_gmtWall__copy(dest, src, afunc) mkd_wall__copy((dest),(src),(afunc))
#endif /* mkd_gmtWall_SUPP_FUNCS */

#ifndef mkd_localWall_DECLARED
#define mkd_localWall_DECLARED
typedef mkd_wall mkd_localWall;
CONST yotk* mkd_localWall__getTC(void);
#ifndef YCTC_mkd_localWall
#define YCTC_mkd_localWall   (mkd_localWall__getTC())
#endif
#endif /* mkd_localWall_DECLARED */

#ifndef mkd_localWall_SUPP_FUNCS
#define mkd_localWall_SUPP_FUNCS
#define mkd_localWall__free(val, ffunc) mkd_wall__free((val),(ffunc))
#define mkd_localWall__copy(dest, src, afunc) mkd_wall__copy((dest),(src),(afunc))
#endif /* mkd_localWall_SUPP_FUNCS */

#ifndef mkd_zone_DECLARED
#define mkd_zone_DECLARED
typedef struct mkd_zone mkd_zone;
#endif /* mkd_zone_DECLARED */

#ifndef mkd_zone_DEFINED
#define mkd_zone_DEFINED
struct mkd_zone
{
  sb4 mkd_zoneOffset;
  boolean mkd_zoneDaylight;
  char* mkd_zoneAbbrev;
};
CONST yotk* mkd_zone__getTC(void);
#ifndef YCTC_mkd_zone
#define YCTC_mkd_zone   (mkd_zone__getTC())
#endif
#endif /* mkd_zone_DEFINED */

#ifndef mkd_zone_SUPP_FUNCS
#define mkd_zone_SUPP_FUNCS
void mkd_zone__free( mkd_zone* val, ysmff ffunc);
void mkd_zone__copy( mkd_zone* dest, mkd_zone* src, ysmaf afunc);
#endif /* mkd_zone_SUPP_FUNCS */

#ifndef mkd_segMask_DECLARED
#define mkd_segMask_DECLARED
typedef ub4 mkd_segMask;
CONST yotk* mkd_segMask__getTC(void);
#ifndef YCTC_mkd_segMask
#define YCTC_mkd_segMask   (mkd_segMask__getTC())
#endif
#endif /* mkd_segMask_DECLARED */

#ifndef mkd_segMask_SUPP_FUNCS
#define mkd_segMask_SUPP_FUNCS
#endif /* mkd_segMask_SUPP_FUNCS */

#ifndef mkd_segMaskStatic_DECLARED
#define mkd_segMaskStatic_DECLARED
#define mkd_segMaskStatic ((mkd_segMask) 1)
#endif /* mkd_segMaskStatic_DECLARED */

#ifndef mkd_segMaskDynApp_DECLARED
#define mkd_segMaskDynApp_DECLARED
#define mkd_segMaskDynApp ((mkd_segMask) 2)
#endif /* mkd_segMaskDynApp_DECLARED */

#ifndef mkd_segMaskRolling_DECLARED
#define mkd_segMaskRolling_DECLARED
#define mkd_segMaskRolling ((mkd_segMask) 4)
#endif /* mkd_segMaskRolling_DECLARED */

#ifndef mkd_segMaskTerminated_DECLARED
#define mkd_segMaskTerminated_DECLARED
#define mkd_segMaskTerminated ((mkd_segMask) 8)
#endif /* mkd_segMaskTerminated_DECLARED */

#ifndef mkd_segMaskTape_DECLARED
#define mkd_segMaskTape_DECLARED
#define mkd_segMaskTape ((mkd_segMask) 16)
#endif /* mkd_segMaskTape_DECLARED */

#ifndef mkd_segment_DECLARED
#define mkd_segment_DECLARED
typedef struct mkd_segment mkd_segment;
#endif /* mkd_segment_DECLARED */

#ifndef mkd_segment_DEFINED
#define mkd_segment_DEFINED
struct mkd_segment
{
  char* mkd_segFile;
  mkd_pos mkd_segStart;
  mkd_pos mkd_segEnd;
  mkd_segMask mkd_segFlags;
  mkd_prohib mkd_segProhib;
};
CONST yotk* mkd_segment__getTC(void);
#ifndef YCTC_mkd_segment
#define YCTC_mkd_segment   (mkd_segment__getTC())
#endif
#endif /* mkd_segment_DEFINED */

#ifndef mkd_segment_SUPP_FUNCS
#define mkd_segment_SUPP_FUNCS
void mkd_segment__free( mkd_segment* val, ysmff ffunc);
void mkd_segment__copy( mkd_segment* dest, mkd_segment* src, ysmaf afunc);
#endif /* mkd_segment_SUPP_FUNCS */

#ifndef mkd_segmentList_DECLARED
#define mkd_segmentList_DECLARED
typedef YCIDL_sequence_mkd_segment mkd_segmentList;
CONST yotk* mkd_segmentList__getTC(void);
#ifndef YCTC_mkd_segmentList
#define YCTC_mkd_segmentList   (mkd_segmentList__getTC())
#endif
#endif /* mkd_segmentList_DECLARED */

#ifndef mkd_segmentList_SUPP_FUNCS
#define mkd_segmentList_SUPP_FUNCS
void mkd_segmentList__free( mkd_segmentList* val, ysmff ffunc);
void mkd_segmentList__copy( mkd_segmentList* dest, mkd_segmentList* src, ysmaf afunc);
#endif /* mkd_segmentList_SUPP_FUNCS */

#ifndef mkd_segInfo_DECLARED
#define mkd_segInfo_DECLARED
typedef struct mkd_segInfo mkd_segInfo;
#endif /* mkd_segInfo_DECLARED */

#ifndef mkd_segInfo_DEFINED
#define mkd_segInfo_DEFINED
struct mkd_segInfo
{
  mkd_segment mkd_segInfoSeg;
  char* mkd_segInfoType;
  char* mkd_segTitle;
  mkd_gmtWall mkd_segCreateTime;
  ub4 mkd_segBitrate;
  sb4 mkd_segPresRate;
  mkd_compFormat mkd_segCmpFmt;
  mkd_segCapMask mkd_segCapabilities;
  ub4 mkd_segMilliseconds;
  sysb8 mkd_segByteLength;
  ub2 mkd_segFrameHeight;
  ub2 mkd_segFrameWidth;
  sb4 mkd_segAspectRatio;
  ub4 mkd_segFrameRate;
  sysb8 mkd_segInfoStartT;
  sysb8 mkd_segInfoEndT;
  mkd_contStatus mkd_segInfoCStat;
  mkd_prohib mkd_segProhibitions;
};
CONST yotk* mkd_segInfo__getTC(void);
#ifndef YCTC_mkd_segInfo
#define YCTC_mkd_segInfo   (mkd_segInfo__getTC())
#endif
#endif /* mkd_segInfo_DEFINED */

#ifndef mkd_segInfo_SUPP_FUNCS
#define mkd_segInfo_SUPP_FUNCS
void mkd_segInfo__free( mkd_segInfo* val, ysmff ffunc);
void mkd_segInfo__copy( mkd_segInfo* dest, mkd_segInfo* src, ysmaf afunc);
#endif /* mkd_segInfo_SUPP_FUNCS */

#ifndef mkd_segInfoList_DECLARED
#define mkd_segInfoList_DECLARED
typedef YCIDL_sequence_mkd_segInfo mkd_segInfoList;
CONST yotk* mkd_segInfoList__getTC(void);
#ifndef YCTC_mkd_segInfoList
#define YCTC_mkd_segInfoList   (mkd_segInfoList__getTC())
#endif
#endif /* mkd_segInfoList_DECLARED */

#ifndef mkd_segInfoList_SUPP_FUNCS
#define mkd_segInfoList_SUPP_FUNCS
void mkd_segInfoList__free( mkd_segInfoList* val, ysmff ffunc);
void mkd_segInfoList__copy( mkd_segInfoList* dest, mkd_segInfoList* src, ysmaf afunc);
#endif /* mkd_segInfoList_SUPP_FUNCS */

#ifndef mkd_mediaType_DECLARED
#define mkd_mediaType_DECLARED
typedef YCIDL_sequence_ub1 mkd_mediaType;
CONST yotk* mkd_mediaType__getTC(void);
#ifndef YCTC_mkd_mediaType
#define YCTC_mkd_mediaType   (mkd_mediaType__getTC())
#endif
#endif /* mkd_mediaType_DECLARED */

#ifndef mkd_mediaType_SUPP_FUNCS
#define mkd_mediaType_SUPP_FUNCS
void mkd_mediaType__free( mkd_mediaType* val, ysmff ffunc);
void mkd_mediaType__copy( mkd_mediaType* dest, mkd_mediaType* src, ysmaf afunc);
#endif /* mkd_mediaType_SUPP_FUNCS */

#ifndef mkd_contFormat_DECLARED
#define mkd_contFormat_DECLARED
typedef struct mkd_contFormat mkd_contFormat;
#endif /* mkd_contFormat_DECLARED */

#ifndef mkd_contFormat_DEFINED
#define mkd_contFormat_DEFINED
struct mkd_contFormat
{
  char* mkd_contFormatVendor;
  mkd_compFormat mkd_contFormatFmt;
  mkd_mediaType mkd_contFormatAud;
  mkd_mediaType mkd_contFormatVid;
  ub2 mkd_contFormatHeightInPixels;
  ub2 mkd_contFormatWidthInPixels;
  sb4 mkd_contFormatPelAspectRatio;
  ub4 mkd_contFormatFrameRate;
};
CONST yotk* mkd_contFormat__getTC(void);
#ifndef YCTC_mkd_contFormat
#define YCTC_mkd_contFormat   (mkd_contFormat__getTC())
#endif
#endif /* mkd_contFormat_DEFINED */

#ifndef mkd_contFormat_SUPP_FUNCS
#define mkd_contFormat_SUPP_FUNCS
void mkd_contFormat__free( mkd_contFormat* val, ysmff ffunc);
void mkd_contFormat__copy( mkd_contFormat* dest, mkd_contFormat* src, ysmaf afunc);
#endif /* mkd_contFormat_SUPP_FUNCS */

#ifndef mzz_sessionException_DECLARED
#define mzz_sessionException_DECLARED
typedef ub4 mzz_sessionException;
CONST yotk* mzz_sessionException__getTC(void);
#ifndef YCTC_mzz_sessionException
#define YCTC_mzz_sessionException   (mzz_sessionException__getTC())
#endif
#endif /* mzz_sessionException_DECLARED */

#ifndef mzz_sessionException_DEFINED
#define mzz_sessionException_DEFINED
#define mzz_sesExNotImplemented ((mzz_sessionException) 0)
#define mzz_sesExNoSessionAvailable ((mzz_sessionException) 1)
#define mzz_sesExInvalidClient ((mzz_sessionException) 2)
#define mzz_sesExNoSuchResource ((mzz_sessionException) 3)
#define mzz_sesExNoSuchCircuit ((mzz_sessionException) 4)
#endif /* mzz_sessionException_DEFINED */

#ifndef mzz_sessionException_SUPP_FUNCS
#define mzz_sessionException_SUPP_FUNCS
void mzz_sessionException__free( mzz_sessionException* val, ysmff ffunc);
void mzz_sessionException__copy( mzz_sessionException* dest, mzz_sessionException* src, ysmaf afunc);
#endif /* mzz_sessionException_SUPP_FUNCS */

#ifndef MZZ_EX_SESEX_DECLARED
#define MZZ_EX_SESEX_DECLARED
CONST ysid* mzz_sesEx__getId(void);
#ifndef MZZ_EX_SESEX
#define MZZ_EX_SESEX   (mzz_sesEx__getId())
#endif
#endif /* MZZ_EX_SESEX_DECLARED */

#ifndef mzz_sesEx_DECLARED
#define mzz_sesEx_DECLARED
typedef struct mzz_sesEx mzz_sesEx;
#endif /* mzz_sesEx_DECLARED */

#ifndef mzz_sesEx_DEFINED
#define mzz_sesEx_DEFINED
struct mzz_sesEx
{
  mzz_sessionException sessionFailType;
};
CONST yotk* mzz_sesEx__getTC(void);
#ifndef YCTC_mzz_sesEx
#define YCTC_mzz_sesEx   (mzz_sesEx__getTC())
#endif
#endif /* mzz_sesEx_DEFINED */

#ifndef mzz_sesEx_SUPP_FUNCS
#define mzz_sesEx_SUPP_FUNCS
void mzz_sesEx__free( mzz_sesEx* val, ysmff ffunc);
void mzz_sesEx__copy( mzz_sesEx* dest, mzz_sesEx* src, ysmaf afunc);
#endif /* mzz_sesEx_SUPP_FUNCS */

#ifndef mzz_clientDevice_DECLARED
#define mzz_clientDevice_DECLARED
typedef struct mzz_clientDevice mzz_clientDevice;
#endif /* mzz_clientDevice_DECLARED */

#ifndef mzz_clientDevice_DEFINED
#define mzz_clientDevice_DEFINED
struct mzz_clientDevice
{
  mzc_clientDeviceId id;
};
CONST yotk* mzz_clientDevice__getTC(void);
#ifndef YCTC_mzz_clientDevice
#define YCTC_mzz_clientDevice   (mzz_clientDevice__getTC())
#endif
#endif /* mzz_clientDevice_DEFINED */

#ifndef mzz_clientDevice_SUPP_FUNCS
#define mzz_clientDevice_SUPP_FUNCS
void mzz_clientDevice__free( mzz_clientDevice* val, ysmff ffunc);
void mzz_clientDevice__copy( mzz_clientDevice* dest, mzz_clientDevice* src, ysmaf afunc);
#endif /* mzz_clientDevice_SUPP_FUNCS */

#ifndef mzz_resource_DECLARED
#define mzz_resource_DECLARED
typedef struct mzz_resource mzz_resource;
#endif /* mzz_resource_DECLARED */

#ifndef mzz_resource_DEFINED
#define mzz_resource_DEFINED
struct mzz_resource
{
  char* key;
  yoany value;
};
CONST yotk* mzz_resource__getTC(void);
#ifndef YCTC_mzz_resource
#define YCTC_mzz_resource   (mzz_resource__getTC())
#endif
#endif /* mzz_resource_DEFINED */

#ifndef mzz_resource_SUPP_FUNCS
#define mzz_resource_SUPP_FUNCS
void mzz_resource__free( mzz_resource* val, ysmff ffunc);
void mzz_resource__copy( mzz_resource* dest, mzz_resource* src, ysmaf afunc);
#endif /* mzz_resource_SUPP_FUNCS */

#ifndef mzz_resources_DECLARED
#define mzz_resources_DECLARED
typedef YCIDL_sequence_mzz_resource mzz_resources;
CONST yotk* mzz_resources__getTC(void);
#ifndef YCTC_mzz_resources
#define YCTC_mzz_resources   (mzz_resources__getTC())
#endif
#endif /* mzz_resources_DECLARED */

#ifndef mzz_resources_SUPP_FUNCS
#define mzz_resources_SUPP_FUNCS
void mzz_resources__free( mzz_resources* val, ysmff ffunc);
void mzz_resources__copy( mzz_resources* dest, mzz_resources* src, ysmaf afunc);
#endif /* mzz_resources_SUPP_FUNCS */

#ifndef mzz_sessProperty_DECLARED
#define mzz_sessProperty_DECLARED
typedef ub4 mzz_sessProperty;
CONST yotk* mzz_sessProperty__getTC(void);
#ifndef YCTC_mzz_sessProperty
#define YCTC_mzz_sessProperty   (mzz_sessProperty__getTC())
#endif
#endif /* mzz_sessProperty_DECLARED */

#ifndef mzz_sessProperty_SUPP_FUNCS
#define mzz_sessProperty_SUPP_FUNCS
#endif /* mzz_sessProperty_SUPP_FUNCS */

#ifndef mzz_sessNull_DECLARED
#define mzz_sessNull_DECLARED
#define mzz_sessNull ((mzz_sessProperty) 0)
#endif /* mzz_sessNull_DECLARED */

#ifndef mzz_sessProxyId_DECLARED
#define mzz_sessProxyId_DECLARED
#define mzz_sessProxyId ((mzz_sessProperty) 1)
#endif /* mzz_sessProxyId_DECLARED */

#ifndef mzz_sessNeedsBoot_DECLARED
#define mzz_sessNeedsBoot_DECLARED
#define mzz_sessNeedsBoot ((mzz_sessProperty) 2)
#endif /* mzz_sessNeedsBoot_DECLARED */

#ifndef mzz_sessNeedsMnA_DECLARED
#define mzz_sessNeedsMnA_DECLARED
#define mzz_sessNeedsMnA ((mzz_sessProperty) 4)
#endif /* mzz_sessNeedsMnA_DECLARED */

#ifndef mzz_sessProxySes_DECLARED
#define mzz_sessProxySes_DECLARED
#define mzz_sessProxySes ((mzz_sessProperty) 8)
#endif /* mzz_sessProxySes_DECLARED */


/* interface mzz_ses declarations */
#ifndef mzz_ses_DECLARED
#define mzz_ses_DECLARED
typedef struct YCmzz_ses* mzz_ses;
CONST yotk* mzz_ses__getTC(void);
#ifndef YCTC_mzz_ses
#define YCTC_mzz_ses   (mzz_ses__getTC())
#endif
#endif /* mzz_ses_DECLARED */

#ifndef mzz_ses_SUPP_FUNCS
#define mzz_ses_SUPP_FUNCS
void mzz_ses__free( mzz_ses* val, ysmff ffunc);
void mzz_ses__copy( mzz_ses* dest, mzz_ses* src, ysmaf afunc);
#endif /* mzz_ses_SUPP_FUNCS */

#ifndef mzz_sesInfo_DECLARED
#define mzz_sesInfo_DECLARED
typedef struct mzz_sesInfo mzz_sesInfo;
#endif /* mzz_sesInfo_DECLARED */

#ifndef mzz_sesInfo_DEFINED
#define mzz_sesInfo_DEFINED
struct mzz_sesInfo
{
  mzz_clientDevice client;
  mzc_circuits circuits;
  mzz_resources resources;
  mkd_gmtWall startTime;
};
CONST yotk* mzz_sesInfo__getTC(void);
#ifndef YCTC_mzz_sesInfo
#define YCTC_mzz_sesInfo   (mzz_sesInfo__getTC())
#endif
#endif /* mzz_sesInfo_DEFINED */

#ifndef mzz_sesInfo_SUPP_FUNCS
#define mzz_sesInfo_SUPP_FUNCS
void mzz_sesInfo__free( mzz_sesInfo* val, ysmff ffunc);
void mzz_sesInfo__copy( mzz_sesInfo* dest, mzz_sesInfo* src, ysmaf afunc);
#endif /* mzz_sesInfo_SUPP_FUNCS */

#ifndef mzz_sesInfos_DECLARED
#define mzz_sesInfos_DECLARED
typedef YCIDL_sequence_mzz_sesInfo mzz_sesInfos;
CONST yotk* mzz_sesInfos__getTC(void);
#ifndef YCTC_mzz_sesInfos
#define YCTC_mzz_sesInfos   (mzz_sesInfos__getTC())
#endif
#endif /* mzz_sesInfos_DECLARED */

#ifndef mzz_sesInfos_SUPP_FUNCS
#define mzz_sesInfos_SUPP_FUNCS
void mzz_sesInfos__free( mzz_sesInfos* val, ysmff ffunc);
void mzz_sesInfos__copy( mzz_sesInfos* dest, mzz_sesInfos* src, ysmaf afunc);
#endif /* mzz_sesInfos_SUPP_FUNCS */

#ifndef mzz_session_DECLARED
#define mzz_session_DECLARED
typedef struct mzz_session mzz_session;
#endif /* mzz_session_DECLARED */

#ifndef mzz_session_DEFINED
#define mzz_session_DEFINED
struct mzz_session
{
  mzz_ses or;
  mzz_sesInfo info;
};
CONST yotk* mzz_session__getTC(void);
#ifndef YCTC_mzz_session
#define YCTC_mzz_session   (mzz_session__getTC())
#endif
#endif /* mzz_session_DEFINED */

#ifndef mzz_session_SUPP_FUNCS
#define mzz_session_SUPP_FUNCS
void mzz_session__free( mzz_session* val, ysmff ffunc);
void mzz_session__copy( mzz_session* dest, mzz_session* src, ysmaf afunc);
#endif /* mzz_session_SUPP_FUNCS */

#ifndef mzz_sessions_DECLARED
#define mzz_sessions_DECLARED
typedef YCIDL_sequence_mzz_session mzz_sessions;
CONST yotk* mzz_sessions__getTC(void);
#ifndef YCTC_mzz_sessions
#define YCTC_mzz_sessions   (mzz_sessions__getTC())
#endif
#endif /* mzz_sessions_DECLARED */

#ifndef mzz_sessions_SUPP_FUNCS
#define mzz_sessions_SUPP_FUNCS
void mzz_sessions__free( mzz_sessions* val, ysmff ffunc);
void mzz_sessions__copy( mzz_sessions* dest, mzz_sessions* src, ysmaf afunc);
#endif /* mzz_sessions_SUPP_FUNCS */


/* interface mzz_ses declarations */
#ifndef mzz_ses_DECLARED
#define mzz_ses_DECLARED
typedef struct YCmzz_ses* mzz_ses;
CONST yotk* mzz_ses__getTC(void);
#ifndef YCTC_mzz_ses
#define YCTC_mzz_ses   (mzz_ses__getTC())
#endif
#endif /* mzz_ses_DECLARED */

#ifndef mzz_ses_SUPP_FUNCS
#define mzz_ses_SUPP_FUNCS
void mzz_ses__free( mzz_ses* val, ysmff ffunc);
void mzz_ses__copy( mzz_ses* dest, mzz_ses* src, ysmaf afunc);
#endif /* mzz_ses_SUPP_FUNCS */

#ifndef mzz_ses_DEFINED
#define mzz_ses_DEFINED
struct yostub* mzz_ses__getStubs(void);
#define mzz_ses__stubs (mzz_ses__getStubs())
#endif /* mzz_ses_DEFINED */

CONST ysid* mzz_ses__getId(void);
#ifndef mzz_ses__id
#define mzz_ses__id   (mzz_ses__getId())
#endif
void mzz_ses_Release( mzz_ses or, yoenv* ev);
void mzz_ses_Release_nw( mzz_ses or, yoenv* ev, ysevt* _sem);
yopar* mzz_ses_Release__getPars(void);
#ifndef mzz_ses_Release_pars
#define mzz_ses_Release_pars (mzz_ses_Release__getPars())
#endif

mzz_sesInfo mzz_ses_GetInfo( mzz_ses or, yoenv* ev);
void mzz_ses_GetInfo_nw( mzz_ses or, yoenv* ev, ysevt* _sem);
yopar* mzz_ses_GetInfo__getPars(void);
#ifndef mzz_ses_GetInfo_pars
#define mzz_ses_GetInfo_pars (mzz_ses_GetInfo__getPars())
#endif

mzz_clientDevice mzz_ses_GetClientDevice( mzz_ses or, yoenv* ev);
void mzz_ses_GetClientDevice_nw( mzz_ses or, yoenv* ev, ysevt* _sem);
yopar* mzz_ses_GetClientDevice__getPars(void);
#ifndef mzz_ses_GetClientDevice_pars
#define mzz_ses_GetClientDevice_pars (mzz_ses_GetClientDevice__getPars())
#endif

mzc_circuits mzz_ses_GetCircuits( mzz_ses or, yoenv* ev);
void mzz_ses_GetCircuits_nw( mzz_ses or, yoenv* ev, ysevt* _sem);
yopar* mzz_ses_GetCircuits__getPars(void);
#ifndef mzz_ses_GetCircuits_pars
#define mzz_ses_GetCircuits_pars (mzz_ses_GetCircuits__getPars())
#endif

mzc_circuit mzz_ses_AddCircuit( mzz_ses or, yoenv* ev, mzc_cktspec* ckt);
void mzz_ses_AddCircuit_nw( mzz_ses or, yoenv* ev, mzc_cktspec* ckt, ysevt* _sem);
yopar* mzz_ses_AddCircuit__getPars(void);
#ifndef mzz_ses_AddCircuit_pars
#define mzz_ses_AddCircuit_pars (mzz_ses_AddCircuit__getPars())
#endif

mzc_circuits mzz_ses_AddCircuits( mzz_ses or, yoenv* ev, mzc_cktspecs* ckts);
void mzz_ses_AddCircuits_nw( mzz_ses or, yoenv* ev, mzc_cktspecs* ckts, ysevt* _sem);
yopar* mzz_ses_AddCircuits__getPars(void);
#ifndef mzz_ses_AddCircuits_pars
#define mzz_ses_AddCircuits_pars (mzz_ses_AddCircuits__getPars())
#endif

void mzz_ses_DelCircuit( mzz_ses or, yoenv* ev, mzc_ckt ckt);
void mzz_ses_DelCircuit_nw( mzz_ses or, yoenv* ev, mzc_ckt ckt, ysevt* _sem);
yopar* mzz_ses_DelCircuit__getPars(void);
#ifndef mzz_ses_DelCircuit_pars
#define mzz_ses_DelCircuit_pars (mzz_ses_DelCircuit__getPars())
#endif

mzz_resources mzz_ses_GetResources( mzz_ses or, yoenv* ev);
void mzz_ses_GetResources_nw( mzz_ses or, yoenv* ev, ysevt* _sem);
yopar* mzz_ses_GetResources__getPars(void);
#ifndef mzz_ses_GetResources_pars
#define mzz_ses_GetResources_pars (mzz_ses_GetResources__getPars())
#endif

mzz_resource mzz_ses_GetResource( mzz_ses or, yoenv* ev, char* key);
void mzz_ses_GetResource_nw( mzz_ses or, yoenv* ev, char* key, ysevt* _sem);
yopar* mzz_ses_GetResource__getPars(void);
#ifndef mzz_ses_GetResource_pars
#define mzz_ses_GetResource_pars (mzz_ses_GetResource__getPars())
#endif

mzz_resource mzz_ses_AddResource( mzz_ses or, yoenv* ev, mzz_resource* value);
void mzz_ses_AddResource_nw( mzz_ses or, yoenv* ev, mzz_resource* value, ysevt* _sem);
yopar* mzz_ses_AddResource__getPars(void);
#ifndef mzz_ses_AddResource_pars
#define mzz_ses_AddResource_pars (mzz_ses_AddResource__getPars())
#endif

void mzz_ses_DelResource( mzz_ses or, yoenv* ev, char* key);
void mzz_ses_DelResource_nw( mzz_ses or, yoenv* ev, char* key, ysevt* _sem);
yopar* mzz_ses_DelResource__getPars(void);
#ifndef mzz_ses_DelResource_pars
#define mzz_ses_DelResource_pars (mzz_ses_DelResource__getPars())
#endif

#ifndef mzz_ses__tyimpl_DEFINED
#define mzz_ses__tyimpl_DEFINED
struct mzz_ses__tyimpl
{
  void (*Release)( mzz_ses, yoenv*);
  mzz_sesInfo (*GetInfo)( mzz_ses, yoenv*);
  mzz_clientDevice (*GetClientDevice)( mzz_ses, yoenv*);
  mzc_circuits (*GetCircuits)( mzz_ses, yoenv*);
  mzc_circuit (*AddCircuit)( mzz_ses, yoenv*, mzc_cktspec*);
  mzc_circuits (*AddCircuits)( mzz_ses, yoenv*, mzc_cktspecs*);
  void (*DelCircuit)( mzz_ses, yoenv*, mzc_ckt);
  mzz_resources (*GetResources)( mzz_ses, yoenv*);
  mzz_resource (*GetResource)( mzz_ses, yoenv*, char*);
  mzz_resource (*AddResource)( mzz_ses, yoenv*, mzz_resource*);
  void (*DelResource)( mzz_ses, yoenv*, char*);
};
#endif /* mzz_ses__tyimpl_DEFINED */

#ifndef mzz_sess_DECLARED
#define mzz_sess_DECLARED
typedef YCIDL_sequence_mzz_ses mzz_sess;
CONST yotk* mzz_sess__getTC(void);
#ifndef YCTC_mzz_sess
#define YCTC_mzz_sess   (mzz_sess__getTC())
#endif
#endif /* mzz_sess_DECLARED */

#ifndef mzz_sess_SUPP_FUNCS
#define mzz_sess_SUPP_FUNCS
void mzz_sess__free( mzz_sess* val, ysmff ffunc);
void mzz_sess__copy( mzz_sess* dest, mzz_sess* src, ysmaf afunc);
#endif /* mzz_sess_SUPP_FUNCS */


/* interface mzz_factory declarations */
#ifndef mzz_factory_DECLARED
#define mzz_factory_DECLARED
typedef struct YCmzz_factory* mzz_factory;
CONST yotk* mzz_factory__getTC(void);
#ifndef YCTC_mzz_factory
#define YCTC_mzz_factory   (mzz_factory__getTC())
#endif
#endif /* mzz_factory_DECLARED */

#ifndef mzz_factory_SUPP_FUNCS
#define mzz_factory_SUPP_FUNCS
void mzz_factory__free( mzz_factory* val, ysmff ffunc);
void mzz_factory__copy( mzz_factory* dest, mzz_factory* src, ysmaf afunc);
#endif /* mzz_factory_SUPP_FUNCS */

#ifndef mzz_factory_DEFINED
#define mzz_factory_DEFINED
struct yostub* mzz_factory__getStubs(void);
#define mzz_factory__stubs (mzz_factory__getStubs())
#endif /* mzz_factory_DEFINED */

CONST ysid* mzz_factory__getId(void);
#ifndef mzz_factory__id
#define mzz_factory__id   (mzz_factory__getId())
#endif
mzz_session mzz_factory_AllocateSession( mzz_factory or, yoenv* ev, mzz_sessProperty props, mzc_clientDeviceId* clientId, mzc_cktspec* req);
void mzz_factory_AllocateSession_nw( mzz_factory or, yoenv* ev, mzz_sessProperty props, mzc_clientDeviceId* clientId, mzc_cktspec* req, ysevt* _sem);
yopar* mzz_factory_AllocateSession__getPars(void);
#ifndef mzz_factory_AllocateSession_pars
#define mzz_factory_AllocateSession_pars (mzz_factory_AllocateSession__getPars())
#endif

mzz_session mzz_factory_AllocateSessionEx( mzz_factory or, yoenv* ev, mzz_sessProperty props, mzc_clientDeviceId* clientId, mzc_cktspecs* req);
void mzz_factory_AllocateSessionEx_nw( mzz_factory or, yoenv* ev, mzz_sessProperty props, mzc_clientDeviceId* clientId, mzc_cktspecs* req, ysevt* _sem);
yopar* mzz_factory_AllocateSessionEx__getPars(void);
#ifndef mzz_factory_AllocateSessionEx_pars
#define mzz_factory_AllocateSessionEx_pars (mzz_factory_AllocateSessionEx__getPars())
#endif

#ifndef mzz_factory__tyimpl_DEFINED
#define mzz_factory__tyimpl_DEFINED
struct mzz_factory__tyimpl
{
  mzz_session (*AllocateSession)( mzz_factory, yoenv*, mzz_sessProperty, mzc_clientDeviceId*, mzc_cktspec*);
  mzz_session (*AllocateSessionEx)( mzz_factory, yoenv*, mzz_sessProperty, mzc_clientDeviceId*, mzc_cktspecs*);
};
#endif /* mzz_factory__tyimpl_DEFINED */

EXTC_END
#endif /* MZZ_IDL */
