/* GENERATED FILE
 * mzacom - public declarations
 * from mzacom.idl
 */

#ifndef MZACOM_IDL
#define MZACOM_IDL

#ifndef SYSX_ORACLE
#include <sysx.h>
#endif
#ifndef YO_ORACLE
#include <yo.h>
#endif

EXTC_START

/**********  SEQUENCE DECLARATIONS *********/
#ifndef YCIDL_sequence_CORBA_Object_DEFINED
#define YCIDL_sequence_CORBA_Object_DEFINED
typedef struct
{
  ub4 _maximum;
  ub4 _length;
  CORBA_Object* _buffer;
} YCIDL_sequence_CORBA_Object;
#ifndef YCIDL_sequence_CORBA_Object_SUPP_FUNCS
#define YCIDL_sequence_CORBA_Object_SUPP_FUNCS
#endif /* YCIDL_sequence_CORBA_Object_SUPP_FUNCS */

#endif /* YCIDL_sequence_CORBA_Object_DEFINED */

/******* NON-SEQUENCE DECLARATIONS *******/

/* interface yoevt declarations */
#ifndef yoevt_DECLARED
#define yoevt_DECLARED
typedef struct YCyoevt* yoevt;
CONST yotk* yoevt__getTC(void);
#ifndef YCTC_yoevt
#define YCTC_yoevt   (yoevt__getTC())
#endif
#endif /* yoevt_DECLARED */

#ifndef yoevt_SUPP_FUNCS
#define yoevt_SUPP_FUNCS
void yoevt__free( yoevt* val, ysmff ffunc);
void yoevt__copy( yoevt* dest, yoevt* src, ysmaf afunc);
#endif /* yoevt_SUPP_FUNCS */

#ifndef yostd_stringList_DECLARED
#define yostd_stringList_DECLARED
typedef YCIDL_sequence_string yostd_stringList;
CONST yotk* yostd_stringList__getTC(void);
#ifndef YCTC_yostd_stringList
#define YCTC_yostd_stringList   (yostd_stringList__getTC())
#endif
#endif /* yostd_stringList_DECLARED */

#ifndef yostd_stringList_SUPP_FUNCS
#define yostd_stringList_SUPP_FUNCS
void yostd_stringList__free( yostd_stringList* val, ysmff ffunc);
void yostd_stringList__copy( yostd_stringList* dest, yostd_stringList* src, ysmaf afunc);
#endif /* yostd_stringList_SUPP_FUNCS */

#ifndef yostd_objList_DECLARED
#define yostd_objList_DECLARED
typedef YCIDL_sequence_CORBA_Object yostd_objList;
CONST yotk* yostd_objList__getTC(void);
#ifndef YCTC_yostd_objList
#define YCTC_yostd_objList   (yostd_objList__getTC())
#endif
#endif /* yostd_objList_DECLARED */

#ifndef yostd_objList_SUPP_FUNCS
#define yostd_objList_SUPP_FUNCS
void yostd_objList__free( yostd_objList* val, ysmff ffunc);
void yostd_objList__copy( yostd_objList* dest, yostd_objList* src, ysmaf afunc);
#endif /* yostd_objList_SUPP_FUNCS */

#ifndef yostd_octetSeq_DECLARED
#define yostd_octetSeq_DECLARED
typedef YCIDL_sequence_ub1 yostd_octetSeq;
CONST yotk* yostd_octetSeq__getTC(void);
#ifndef YCTC_yostd_octetSeq
#define YCTC_yostd_octetSeq   (yostd_octetSeq__getTC())
#endif
#endif /* yostd_octetSeq_DECLARED */

#ifndef yostd_octetSeq_SUPP_FUNCS
#define yostd_octetSeq_SUPP_FUNCS
void yostd_octetSeq__free( yostd_octetSeq* val, ysmff ffunc);
void yostd_octetSeq__copy( yostd_octetSeq* dest, yostd_octetSeq* src, ysmaf afunc);
#endif /* yostd_octetSeq_SUPP_FUNCS */

#ifndef ObjLst_DECLARED
#define ObjLst_DECLARED
typedef YCIDL_sequence_CORBA_Object ObjLst;
CONST yotk* ObjLst__getTC(void);
#ifndef YCTC_ObjLst
#define YCTC_ObjLst   (ObjLst__getTC())
#endif
#endif /* ObjLst_DECLARED */

#ifndef ObjLst_SUPP_FUNCS
#define ObjLst_SUPP_FUNCS
void ObjLst__free( ObjLst* val, ysmff ffunc);
void ObjLst__copy( ObjLst* dest, ObjLst* src, ysmaf afunc);
#endif /* ObjLst_SUPP_FUNCS */

#ifndef Itr_DECLARED
#define Itr_DECLARED
typedef struct Itr Itr;
#endif /* Itr_DECLARED */

#ifndef Itr_DEFINED
#define Itr_DEFINED
struct Itr
{
  sb4 Position;
  sb4 NumItems;
};
CONST yotk* Itr__getTC(void);
#ifndef YCTC_Itr
#define YCTC_Itr   (Itr__getTC())
#endif
#endif /* Itr_DEFINED */

#ifndef Itr_SUPP_FUNCS
#define Itr_SUPP_FUNCS
void Itr__free( Itr* val, ysmff ffunc);
void Itr__copy( Itr* dest, Itr* src, ysmaf afunc);
#endif /* Itr_SUPP_FUNCS */

#ifndef mza_Itr_DECLARED
#define mza_Itr_DECLARED
typedef Itr mza_Itr;
CONST yotk* mza_Itr__getTC(void);
#ifndef YCTC_mza_Itr
#define YCTC_mza_Itr   (mza_Itr__getTC())
#endif
#endif /* mza_Itr_DECLARED */

#ifndef mza_Itr_SUPP_FUNCS
#define mza_Itr_SUPP_FUNCS
#define mza_Itr__free(val, ffunc) Itr__free((val),(ffunc))
#define mza_Itr__copy(dest, src, afunc) Itr__copy((dest),(src),(afunc))
#endif /* mza_Itr_SUPP_FUNCS */

#ifndef mza_opstatus_DECLARED
#define mza_opstatus_DECLARED
typedef ub4 mza_opstatus;
CONST yotk* mza_opstatus__getTC(void);
#ifndef YCTC_mza_opstatus
#define YCTC_mza_opstatus   (mza_opstatus__getTC())
#endif
#endif /* mza_opstatus_DECLARED */

#ifndef mza_opstatus_DEFINED
#define mza_opstatus_DEFINED
#define mza_completed ((mza_opstatus) 0)
#define mza_notComplete ((mza_opstatus) 1)
#endif /* mza_opstatus_DEFINED */

#ifndef mza_opstatus_SUPP_FUNCS
#define mza_opstatus_SUPP_FUNCS
void mza_opstatus__free( mza_opstatus* val, ysmff ffunc);
void mza_opstatus__copy( mza_opstatus* dest, mza_opstatus* src, ysmaf afunc);
#endif /* mza_opstatus_SUPP_FUNCS */

#ifndef MZA_EX_PERSISTENCEERROR_DECLARED
#define MZA_EX_PERSISTENCEERROR_DECLARED
CONST ysid* mza_PersistenceError__getId(void);
#ifndef MZA_EX_PERSISTENCEERROR
#define MZA_EX_PERSISTENCEERROR   (mza_PersistenceError__getId())
#endif
#endif /* MZA_EX_PERSISTENCEERROR_DECLARED */

#ifndef mza_PersistenceError_DECLARED
#define mza_PersistenceError_DECLARED
typedef struct mza_PersistenceError mza_PersistenceError;
#endif /* mza_PersistenceError_DECLARED */

#ifndef mza_PersistenceError_DEFINED
#define mza_PersistenceError_DEFINED
struct mza_PersistenceError
{
  mza_opstatus status;
  char* description;
  sb4 sqlcode;
  char* sqlerrmc;
  sb4 errorCode;
};
CONST yotk* mza_PersistenceError__getTC(void);
#ifndef YCTC_mza_PersistenceError
#define YCTC_mza_PersistenceError   (mza_PersistenceError__getTC())
#endif
#endif /* mza_PersistenceError_DEFINED */

#ifndef mza_PersistenceError_SUPP_FUNCS
#define mza_PersistenceError_SUPP_FUNCS
void mza_PersistenceError__free( mza_PersistenceError* val, ysmff ffunc);
void mza_PersistenceError__copy( mza_PersistenceError* dest, mza_PersistenceError* src, ysmaf afunc);
#endif /* mza_PersistenceError_SUPP_FUNCS */

#ifndef MZA_EX_INTERNAL_DECLARED
#define MZA_EX_INTERNAL_DECLARED
CONST ysid* mza_Internal__getId(void);
#ifndef MZA_EX_INTERNAL
#define MZA_EX_INTERNAL   (mza_Internal__getId())
#endif
#endif /* MZA_EX_INTERNAL_DECLARED */

#ifndef mza_Internal_DECLARED
#define mza_Internal_DECLARED
typedef struct mza_Internal mza_Internal;
#endif /* mza_Internal_DECLARED */

#ifndef mza_Internal_DEFINED
#define mza_Internal_DEFINED
struct mza_Internal
{
  mza_opstatus status;
  char* description;
  sb4 errorCode;
};
CONST yotk* mza_Internal__getTC(void);
#ifndef YCTC_mza_Internal
#define YCTC_mza_Internal   (mza_Internal__getTC())
#endif
#endif /* mza_Internal_DEFINED */

#ifndef mza_Internal_SUPP_FUNCS
#define mza_Internal_SUPP_FUNCS
void mza_Internal__free( mza_Internal* val, ysmff ffunc);
void mza_Internal__copy( mza_Internal* dest, mza_Internal* src, ysmaf afunc);
#endif /* mza_Internal_SUPP_FUNCS */

#ifndef MZA_EX_DATACONVERSION_DECLARED
#define MZA_EX_DATACONVERSION_DECLARED
CONST ysid* mza_DataConversion__getId(void);
#ifndef MZA_EX_DATACONVERSION
#define MZA_EX_DATACONVERSION   (mza_DataConversion__getId())
#endif
#endif /* MZA_EX_DATACONVERSION_DECLARED */

#ifndef mza_DataConversion_DECLARED
#define mza_DataConversion_DECLARED
typedef struct mza_DataConversion mza_DataConversion;
#endif /* mza_DataConversion_DECLARED */

#ifndef mza_DataConversion_DEFINED
#define mza_DataConversion_DEFINED
struct mza_DataConversion
{
  mza_opstatus status;
  char* description;
  sb2 paramPosition;
  sb4 errorCode;
};
CONST yotk* mza_DataConversion__getTC(void);
#ifndef YCTC_mza_DataConversion
#define YCTC_mza_DataConversion   (mza_DataConversion__getTC())
#endif
#endif /* mza_DataConversion_DEFINED */

#ifndef mza_DataConversion_SUPP_FUNCS
#define mza_DataConversion_SUPP_FUNCS
void mza_DataConversion__free( mza_DataConversion* val, ysmff ffunc);
void mza_DataConversion__copy( mza_DataConversion* dest, mza_DataConversion* src, ysmaf afunc);
#endif /* mza_DataConversion_SUPP_FUNCS */

#ifndef MZA_EX_NOTIMPLEMENTED_DECLARED
#define MZA_EX_NOTIMPLEMENTED_DECLARED
CONST ysid* mza_NotImplemented__getId(void);
#ifndef MZA_EX_NOTIMPLEMENTED
#define MZA_EX_NOTIMPLEMENTED   (mza_NotImplemented__getId())
#endif
#endif /* MZA_EX_NOTIMPLEMENTED_DECLARED */

#ifndef mza_NotImplemented_DECLARED
#define mza_NotImplemented_DECLARED
typedef struct mza_NotImplemented mza_NotImplemented;
#endif /* mza_NotImplemented_DECLARED */

#ifndef mza_NotImplemented_DEFINED
#define mza_NotImplemented_DEFINED
struct mza_NotImplemented
{
  mza_opstatus status;
  char* description;
  sb4 errorCode;
};
CONST yotk* mza_NotImplemented__getTC(void);
#ifndef YCTC_mza_NotImplemented
#define YCTC_mza_NotImplemented   (mza_NotImplemented__getTC())
#endif
#endif /* mza_NotImplemented_DEFINED */

#ifndef mza_NotImplemented_SUPP_FUNCS
#define mza_NotImplemented_SUPP_FUNCS
void mza_NotImplemented__free( mza_NotImplemented* val, ysmff ffunc);
void mza_NotImplemented__copy( mza_NotImplemented* dest, mza_NotImplemented* src, ysmaf afunc);
#endif /* mza_NotImplemented_SUPP_FUNCS */

#ifndef MZA_EX_XAEXCEPTION_DECLARED
#define MZA_EX_XAEXCEPTION_DECLARED
CONST ysid* mza_XaException__getId(void);
#ifndef MZA_EX_XAEXCEPTION
#define MZA_EX_XAEXCEPTION   (mza_XaException__getId())
#endif
#endif /* MZA_EX_XAEXCEPTION_DECLARED */

#ifndef mza_XaException_DECLARED
#define mza_XaException_DECLARED
typedef struct mza_XaException mza_XaException;
#endif /* mza_XaException_DECLARED */

#ifndef mza_XaException_DEFINED
#define mza_XaException_DEFINED
struct mza_XaException
{
  mza_opstatus status;
  char* description;
  sb4 errorCode;
};
CONST yotk* mza_XaException__getTC(void);
#ifndef YCTC_mza_XaException
#define YCTC_mza_XaException   (mza_XaException__getTC())
#endif
#endif /* mza_XaException_DEFINED */

#ifndef mza_XaException_SUPP_FUNCS
#define mza_XaException_SUPP_FUNCS
void mza_XaException__free( mza_XaException* val, ysmff ffunc);
void mza_XaException__copy( mza_XaException* dest, mza_XaException* src, ysmaf afunc);
#endif /* mza_XaException_SUPP_FUNCS */

#ifndef mza_svrId_DECLARED
#define mza_svrId_DECLARED
typedef struct mza_svrId mza_svrId;
#endif /* mza_svrId_DECLARED */

#ifndef mza_svrId_DEFINED
#define mza_svrId_DEFINED
struct mza_svrId
{
  sysb8 addr;
  sysb8 call_time;
};
CONST yotk* mza_svrId__getTC(void);
#ifndef YCTC_mza_svrId
#define YCTC_mza_svrId   (mza_svrId__getTC())
#endif
#endif /* mza_svrId_DEFINED */

#ifndef mza_svrId_SUPP_FUNCS
#define mza_svrId_SUPP_FUNCS
void mza_svrId__free( mza_svrId* val, ysmff ffunc);
void mza_svrId__copy( mza_svrId* dest, mza_svrId* src, ysmaf afunc);
#endif /* mza_svrId_SUPP_FUNCS */

#ifndef mza_otid_t_DECLARED
#define mza_otid_t_DECLARED
typedef struct mza_otid_t mza_otid_t;
#endif /* mza_otid_t_DECLARED */

#ifndef mza_otid_t_DEFINED
#define mza_otid_t_DEFINED
struct mza_otid_t
{
  sb4 formatID;
  ub4 gtrid_length;
  ub4 bqual_length;
  YCIDL_sequence_ub1 tid;
};
CONST yotk* mza_otid_t__getTC(void);
#ifndef YCTC_mza_otid_t
#define YCTC_mza_otid_t   (mza_otid_t__getTC())
#endif
#endif /* mza_otid_t_DEFINED */

#ifndef mza_otid_t_SUPP_FUNCS
#define mza_otid_t_SUPP_FUNCS
void mza_otid_t__free( mza_otid_t* val, ysmff ffunc);
void mza_otid_t__copy( mza_otid_t* dest, mza_otid_t* src, ysmaf afunc);
#endif /* mza_otid_t_SUPP_FUNCS */

#ifndef mza_transx_DECLARED
#define mza_transx_DECLARED
typedef struct mza_transx mza_transx;
#endif /* mza_transx_DECLARED */

#ifndef mza_transx_DEFINED
#define mza_transx_DEFINED
struct mza_transx
{
  mza_otid_t XID;
  YCIDL_sequence_ub2 mzaXactStatus;
};
CONST yotk* mza_transx__getTC(void);
#ifndef YCTC_mza_transx
#define YCTC_mza_transx   (mza_transx__getTC())
#endif
#endif /* mza_transx_DEFINED */

#ifndef mza_transx_SUPP_FUNCS
#define mza_transx_SUPP_FUNCS
void mza_transx__free( mza_transx* val, ysmff ffunc);
void mza_transx__copy( mza_transx* dest, mza_transx* src, ysmaf afunc);
#endif /* mza_transx_SUPP_FUNCS */

EXTC_END
#endif /* MZACOM_IDL */
