/**************************************************************/
/* File:    Session.h                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Manage our local sessions with Video Control.     */
/*                                                            */
/* Author:  Originally S.N.Brodie in the Generic fetcher.     */
/*          Adapted by A.D.Hodgkinson.                        */
/*                                                            */
/* History: 14-Feb-2000 (ADH): Created.                       */
/**************************************************************/

#ifndef SVBGeneric_Session__

  #define SVBGeneric_Session__
  #include <time.h>
  #include "URLutils.h"

  /* Rate at which state machine is driven, cs */

  #define Session_Timeout_Default (30)

  #define Session_State_Timer     (5)
  #define Session_State_Retry     (200)

  /* Structures and enumerations */

  typedef enum
  {
    protostate_ERROR,
    protostate_ERROR_DEAD,
    protostate_ERROR_MEM,
    protostate_ERROR_WRITE,
    protostate_ERROR_READ,
    protostate_ERROR_CONNECTION,
    protostate_ERROR_NO_TOKEN,
    protostate_ERROR_NOT_IMPLEMENTED,
    protostate_ERROR_TIMEOUT,
    protostate_ERROR_DNS,
    protostate_ERROR_VCPN,

    /* If you add to the above, don't forget to add to the list */
    /* of error conditions in the state machine.                */

    protostate_INITIAL,
    protostate_DNS,
    protostate_CONNECTED,
    protostate_SENDING,
    protostate_RECEIVING,
    protostate_PUMPING,
    protostate_COMPLETED

  } network_protocol_fsm_states;

  /* General data */

  typedef struct arbitrary_data
  {
    int      next_state;              /* State to enter when all data "done" */
    char   * data;                    /* Data itself */
    size_t   length;                  /* Total length of data */
    size_t   done;                    /* Amount written so far, or read so far */

  } arbitrary_data;

  /* Structure for remembering headers */

  typedef struct rtsp_header
  {
    struct rtsp_header * next;        /* Link to next member */
    char               * header;      /* Pointer into text member - is the RTSP header tag */
    char               * value;       /* Pointer into text member - is the tag value setting */
    char                 text[1];     /* Entire header but ':' and "\r\n" represented by '\0' terminators */

  } rtsp_header;

  /* Session information */

  struct session;
  typedef _kernel_oserror *(*callback_fn_ptr)(struct session * s);

  #define CIP_Idle     0
  #define CIP_Setup    1
  #define CIP_Play     2
  #define CIP_TearDown 3

  typedef struct session
  {
    struct session  * next;           /* Pointer to next session */
    struct session  * child;          /* Child session used for server 'pinging' with GET_PARAMETER */
    struct session  * parent;         /* Parent session (so a dying child can set it's parent's child to NULL) */
    int               state;          /* The state of this session */
    int               cip;            /* Command In Progress (see definitions above) */
    int               error_state;    /* Used to record the state before an error occurred */
    int               reported_state; /* R0 status returned on last SWI call (used by status SWI) */
    unsigned int      id;             /* Client handle */
    unsigned int      vcid;           /* Video Control client handle */
    unsigned int      svbid;          /* SVBmip stream handle */
    unsigned int      channel;        /* Multicast channel number from SETUP command URL query string */
    int               sd;             /* Socket descriptor */
    int               server_code;    /* Server response code */
    unsigned int      sent;           /* Amount of data sent to the client in total by this module */
    char            * uri;            /* Specific part of the URI */
    url_description * url;            /* Full URI of the document being fetched */
    char            * host;           /* Host name of the host being contacted */
    int               port;           /* Port number of the host being contacted */
    char            * data;           /* Additional client data to be sent to server */
    int               data_len;       /* Size of data pointed to by 'data'.  strlen(data) if not known */
    char            * server_session; /* Pointer to the server session header value */
    unsigned int      server_timeout; /* Timeout value that the server gave us, or Session_Timeout_Default */
    char            * agent;          /* User-Agent string to be sent - NULL to use this module's own ID */
    rtsp_header     * headers;        /* List of headers */
    char            * play_record;    /* Records string in R3 from SVBGeneric_Play */
    char            * full_request;   /* Holds the current full request (headers plus any body data) for sending */
    int               reqptr;         /* Pointer into the full request buffer for sending data */
    int               reqlen;         /* Length of the full request buffer */
    unsigned int      last;           /* Last activity timeout */
    arbitrary_data    command;        /* Queued "command" data being sent to remote server */
    arbitrary_data    response;       /* Reception buffers for receiving data from remote server */
    arbitrary_data    client_pump;    /* Data being pumped to our client */
    unsigned int      response_code;  /* Holds the response code for the latest response read */
    callback_fn_ptr   connected_cb;   /* Function to call back when a socket reaches connected state */

    unsigned          callout_set :1; /* Non-zero if a callout function is set for general state machine stuff */
    unsigned          destruct    :1; /* Non-zero if the session should self-destruct after the current command */
    unsigned          donehead    :1; /* Set to non-zero if we have sent our client an RTSP response header */
    unsigned          have_svbid  :1; /* We have an SVBmip stream handle */

  } session;

  /* Function prototypes */

  session         * session_return_head   (void);
  session         * session_find_by_id    (unsigned int vc_client_id);
  _kernel_oserror * session_new_session   (session ** rs);
  _kernel_oserror * session_link_new_item (session * ses);
  void              session_reset_session (session * ses);

  void              session_free_item     (session * ses);
  void              session_free_list     (void);

  void              session_check         (void);

#endif /* SVBGeneric_Session__ */
