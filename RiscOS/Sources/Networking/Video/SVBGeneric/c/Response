/**************************************************************/
/* File:    Response.c                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Emulate RTSP server responses.                    */
/*                                                            */
/* Author:  A.D.Hodgkinson                                    */
/*                                                            */
/* History: 16-Feb-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Generic.h"
#include "Headers.h"
#include "Module.h"
#include "SVBGErrors.h"
#include "Status.h"
#include "URLutils.h"
#include "Utils.h"

#include "Response.h"

/**************************************************************/
/* response_setup()                                           */
/*                                                            */
/* Respond to a SETUP command.                                */
/*                                                            */
/* Parameters: Pointer to the rtsp_header list for the sent   */
/*             out command.                                   */
/*                                                            */
/* Returns:    Pointer to the head of a header list for the   */
/*             response or NULL for an allocation failure.    */
/**************************************************************/

rtsp_header * response_setup(rtsp_header * command)
{
  unsigned int      curs;
  url_description * d     = NULL;
  rtsp_header     * r     = NULL;
  rtsp_header     * cseq  = NULL;
  rtsp_header     * tran  = NULL;
  bool              fail  = false;
  bool              check = false;
  char              ses [30];

  dprintf(("", "response_setup: Called with %p\n", command));

  cseq = headers_find_header(command, Headers_HeaderName_Sequence);
  tran = headers_find_header(command, Headers_HeaderName_Transport);

  curs = headers_get_sequence();
  sprintf(ses, "%08x%08x%08x", ((int) command) ^ curs, ((int) &r) ^ curs, (utils_read_time() ^ curs));

  dprintf(("", "response_setup: Session '%s', cseq at %p, tran at %p\n", ses, cseq, tran));

  /* Is the URL query string OK? */

  if (command->value != NULL) urlutils_return_description(command->value, &d);

  if (d != NULL)
  {
    check = response_check_query(d, NULL);
    urlutils_free_description(d);
  }
  else fail = true;

  dprintf(("", "response_setup: Query check says %d, fail %d\n", check, fail));

  /* If fail is set already, we're out of RAM or something - attempt to raise */
  /* 503 Service Unavailable.                                                 */

  if (fail == true)
  {
    if (
         headers_add_header(&r,
                            Headers_Supported_Prefix,
                            Headers_Supported_Prefix_SU)

         == NULL
       )
       fail = true;
  }

  /* If fail is false but check is also false, we couldn't understand the */
  /* request - raise 400 Bad Request.                                     */

  else if (check == false)
  {
    if (
         headers_add_header(&r,
                            Headers_Supported_Prefix,
                            Headers_Supported_Prefix_BR)

         == NULL
       )
       fail = true;
  }

  /* Otherwise, we're OK to go */

  else
  {
    if (
         headers_add_header(&r,
                            Headers_Supported_Prefix,
                            Headers_Supported_Prefix_OK)

         == NULL
       )
       fail = true;

    /* A duplicate Transport header */

    else if (
              tran != NULL &&
              headers_add_header(&r,
                                 Headers_HeaderName_Transport,
                                 tran->value)

              == NULL
            )
            fail = true;

    /* Session ID based on the given header address, a stack address */
    /* and the current time                                          */

    else if (
              headers_add_header(&r,
                                 Headers_HeaderName_Session,
                                 ses)
              == NULL
            )
            fail = true;
  }

  /* A duplicate CSeq header */

  if (
       fail == false &&
       cseq != NULL  &&
       headers_add_header(&r,
                          Headers_HeaderName_Sequence,
                          cseq->value)

       == NULL
     )
     fail = true;

  /* Connection: close */

  else if (
            headers_add_header(&r,
                               Headers_HeaderName_Connection,
                               Headers_HeaderValue_Connection)
            == NULL
          )
          fail = true;

  /* No body data */

  else if (
            headers_add_header(&r,
                               Headers_HeaderName_ContentLength,
                               "0")
            == NULL
          )
          fail = true;

  /* Sanity check */

  if (fail)
  {
    if (r != NULL) headers_free_headers(&r);

    dprintf(("", "response_setup: Out of memory\n"));

    return NULL;
  }

  dprintf(("", "response_setup: Successful\n"));

  return r;
}

/**************************************************************/
/* response_play()                                            */
/*                                                            */
/* Respond to a PLAY command.                                 */
/*                                                            */
/* Parameters: Pointer to the rtsp_header list for the sent   */
/*             out command.                                   */
/*                                                            */
/* Returns:    Pointer to the head of a header list for the   */
/*             response or NULL for an allocation failure.    */
/**************************************************************/

rtsp_header * response_play(rtsp_header * command)
{
  rtsp_header * r     = NULL;
  rtsp_header * cseq  = NULL;
  rtsp_header * sess  = NULL;
  rtsp_header * rang  = NULL;
  rtsp_header * spee  = NULL;
  rtsp_header * scal  = NULL;
  bool          fail  = false;

  dprintf(("", "response_play: Called with %p\n", command));

  cseq = headers_find_header(command, Headers_HeaderName_Sequence);
  sess = headers_find_header(command, Headers_HeaderName_Session);

  dprintf(("", "response_play: CSeq, Session at %08x, %08x\n", (int) cseq, (int) sess));

  rang = headers_find_header(command, Headers_HeaderName_Range);
  scal = headers_find_header(command, Headers_HeaderName_Scale);
  spee = headers_find_header(command, Headers_HeaderName_Speed);

  if (rang != 0 || scal != 0 || spee != 0 || Strcmp_ci(command->header, Headers_CommandName_Pause) == 0)
  {
    /* 501 Not Implemented */

    if (
         headers_add_header(&r,
                            Headers_Supported_Prefix,
                            Headers_Supported_Prefix_NI)

         == NULL
       )
       fail = true;
  }
  else
  {
    /* The OK response */

    if (
         headers_add_header(&r,
                            Headers_Supported_Prefix,
                            Headers_Supported_Prefix_OK)

         == NULL
       )
       fail = true;

    /* Range unset, scale and speed 1 */

    else if (
              headers_add_header(&r,
                                 Headers_HeaderName_Range,
                                 Headers_HeaderValue_Range)
              == NULL
            )
            fail = true;

    else if (
              headers_add_header(&r,
                                 Headers_HeaderName_Scale,
                                 Headers_HeaderValue_Scale)
              == NULL
            )
            fail = true;

    else if (
              headers_add_header(&r,
                                 Headers_HeaderName_Speed,
                                 Headers_HeaderValue_Speed)
              == NULL
            )
            fail = true;

  }

  /* A duplicate CSeq header */

  if (
       fail == false &&
       cseq != NULL  &&
       headers_add_header(&r,
                          Headers_HeaderName_Sequence,
                          cseq->value)

       == NULL
     )
     fail = true;

  /* A duplicate Session header */

  else if (
            sess != NULL &&
            headers_add_header(&r,
                               Headers_HeaderName_Session,
                               sess->value)

            == NULL
          )
          fail = true;

  /* Connection: close */

  else if (
            headers_add_header(&r,
                               Headers_HeaderName_Connection,
                               Headers_HeaderValue_Connection)
            == NULL
          )
          fail = true;

  /* No body data */

  else if (
            headers_add_header(&r,
                               Headers_HeaderName_ContentLength,
                               "0")
            == NULL
          )
          fail = true;

  /* Sanity check */

  if (fail)
  {
    if (r != NULL) headers_free_headers(&r);

    dprintf(("", "response_play: Out of memory\n"));

    return NULL;
  }

  dprintf(("", "response_play: Successful\n"));

  return r;
}

/**************************************************************/
/* response_teardown()                                        */
/*                                                            */
/* Respond to a TEARDOWN command.                             */
/*                                                            */
/* Parameters: Pointer to the rtsp_header list for the sent   */
/*             out command.                                   */
/*                                                            */
/* Returns:    Pointer to the head of a header list for the   */
/*             response or NULL for an allocation failure.    */
/**************************************************************/

rtsp_header * response_teardown(rtsp_header * command)
{
  rtsp_header * r     = NULL;
  rtsp_header * cseq  = NULL;
  rtsp_header * sess  = NULL;
  bool          fail  = false;

  dprintf(("", "response_teardown: Called with %p\n", command));

  cseq = headers_find_header(command, Headers_HeaderName_Sequence);
  sess = headers_find_header(command, Headers_HeaderName_Session);

  dprintf(("", "response_teardown: CSeq, Session at %08x, %08x\n", (int) cseq, (int) sess));

  /* The OK response */

  if (
       headers_add_header(&r,
                          Headers_Supported_Prefix,
                          Headers_Supported_Prefix_OK)

       == NULL
     )
     fail = true;


  /* A duplicate CSeq header */

  if (
       fail == false &&
       cseq != NULL  &&
       headers_add_header(&r,
                          Headers_HeaderName_Sequence,
                          cseq->value)

       == NULL
     )
     fail = true;

  /* A duplicate Session header */

  else if (
            sess != NULL &&
            headers_add_header(&r,
                               Headers_HeaderName_Session,
                               sess->value)

            == NULL
          )
          fail = true;

  /* Connection: close */

  else if (
            headers_add_header(&r,
                               Headers_HeaderName_Connection,
                               Headers_HeaderValue_Connection)
            == NULL
          )
          fail = true;

  /* No body data */

  else if (
            headers_add_header(&r,
                               Headers_HeaderName_ContentLength,
                               "0")
            == NULL
          )
          fail = true;

  /* Sanity check */

  if (fail)
  {
    if (r != NULL) headers_free_headers(&r);

    dprintf(("", "response_teardown: Out of memory\n"));

    return NULL;
  }

  dprintf(("", "response_teardown: Successful\n"));

  return r;
}

/**************************************************************/
/* response_check_query()                                     */
/*                                                            */
/* Check we understand the query string of a URL contained in */
/* the given command header, optionally also returning the    */
/* required channel number if the query string is OK, else 0. */
/*                                                            */
/* Parameters: Pointer to the rtsp_header list for the sent   */
/*             out command;                                   */
/*                                                            */
/*             Optional pointer to an integer into which the  */
/*             channel number specified in the command URL is */
/*             written.                                       */
/*                                                            */
/* Returns:    true if the query string is understood, else   */
/*             false.                                         */
/**************************************************************/

bool response_check_query(url_description * url, unsigned int * channel)
{
  bool r;

  dprintf(("", "response_check_query: Called\n"));

  if (channel != NULL) *channel = 0;
  if (url == NULL || url->full == NULL || url->query == NULL) return false;

  r = true;

  if (
       Strncmp_ci(url->query,
                  Headers_Supported_Query_Channel,
                  sizeof(Headers_Supported_Query_Channel) - 1)
       != 0
     )
     r = false;

  else
  {
    char * n = url->query + sizeof(Headers_Supported_Query_Channel);

    while (*n > '\0' && isspace(*n)) n++;
    if (*n == '=') n++;
    while (*n > '\0' && isspace(*n)) n++;

    if (isdigit(*n) == 0) r = false;
    else if (channel != NULL)
    {
      *channel = atoi(n);
      dprintf(("", "response_check_query: Channel %d\n",*channel));
    }
  }

  dprintf(("", "response_check_query: Exitting with %d\n", r));

  return r;
}
