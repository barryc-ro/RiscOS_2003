/**************************************************************/
/* File:    Status.c                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Implement SVBGeneric_Status and handle the state  */
/*          machine.                                          */
/*                                                            */
/* Author:  A.D.Hodgkinson. Partially based on URL_Fetcher    */
/*          source by S.N.Brodie and P.Wain.                  */
/*                                                            */
/* History: 14-Feb-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>

#include <swis.h>

#include <inetlib.h>
#include <socklib.h>
#include <sys/errno.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <VideoCtrl.h>

#include "CallOut.h"
#include "Generic.h"
#include "Headers.h"
#include "Module.h"
#include "Response.h"
#include "SVBctrl.h"
#include "SVBGErrors.h"
#include "SVBGHdr.h"
#include "Session.h"
#include "Utils.h"

#include "Status.h"

/* Local variables */

static char recbuf[2048];

/* Local functions */

static bool status_proceed_completed (session * s, bool * repeat);
static bool status_proceed_connected (session * s, bool * repeat);
static bool status_proceed_default   (session * s, bool * repeat);
static bool status_proceed_error     (session * s, bool * repeat);
static bool status_proceed_initial   (session * s, bool * repeat);
static bool status_proceed_pumping   (session * s, bool * repeat);
static bool status_proceed_receiving (session * s, bool * repeat);
static bool status_proceed_sending   (session * s, bool * repeat);

/**************************************************************/
/* status_status()                                            */
/*                                                            */
/* Implement SVBGeneric_Status. See the Video Control         */
/* specification, 2501,817/FS, for more.                      */
/**************************************************************/

_kernel_oserror * status_status(_kernel_swi_regs * r)
{
  _kernel_oserror * e = NULL;
  session         * s = session_find_by_id(r->r[1]);

  dprintf(("", "status_status: Called\n"));

  if (!s)
  {
    dprintf(("", "status_status: ID not found\n"));
    return make_error(svbgeneric_ERROR_CLIENT_ID_NOT_FOUND, 0);
  }

  r->r[0] = s->reported_state;
  r->r[2] = s->response_code;

  /* Error, or normal state? */

  e = status_check_error(s);

  dprintf(("", "status_status: Returning status %08x, error %p\n", r->r[0], e));

  return e;
}

/**************************************************************/
/* status_proceed_on_callout()                                */
/*                                                            */
/* A CallOut handler (see CallOut.h) which drives the state   */
/* machine. Used for anything that can't be event driven,     */
/* such as waiting for a DNS lookup to complete.              */
/*                                                            */
/* THIS FUNCTION MUST BE RE-ENTRANT.                          */
/*                                                            */
/* Parameters: The handle should point to the session struct  */
/*             we're interested in.                           */
/**************************************************************/

void status_proceed_on_callout(void * handle)
{
  session * s = (session *) handle;

  dprintf(("", "status_proceed_on_callout: Called for %p, forwarding to status_proceed\n", s));

  s->callout_set = 0;

  status_proceed(s);
}

/**************************************************************/
/* status_proceed()                                           */
/*                                                            */
/* Main module state machine.                                 */
/*                                                            */
/* THIS FUNCTION MUST BE RE-ENTRANT.                          */
/*                                                            */
/* Parameters: Pointer to the session struct to work for.     */
/**************************************************************/

void status_proceed(session * s)
{
  bool repeat;

  dprintf(("", "status_proceed: Called for %p\n", s));

  do
  {
    repeat = false;

    switch (s->state)
    {
      default:
      {
        if (status_proceed_default(s, &repeat)) return;
      }
      break;

      /* Error states: Various things went wrong... */

      case protostate_ERROR_MEM:
      case protostate_ERROR_VCPN:
      {
        if (status_proceed_error(s, &repeat)) return;
      }
      break;

      /* Idle */

      case protostate_INITIAL:
      {
        if (status_proceed_initial(s, &repeat)) return;
      }
      break;

      /* Various imaginary connection, send and receive processes */

      case protostate_CONNECTED:
      {
        if (status_proceed_connected(s, &repeat)) return;
      }
      break;

      case protostate_SENDING:
      {
        if (status_proceed_sending(s, &repeat)) return;
      }
      break;

      case protostate_RECEIVING:
      {
        if (status_proceed_receiving(s, &repeat)) return;
      }
      break;

      case protostate_PUMPING:
      {
        if (status_proceed_pumping(s, &repeat)) return;
      }
      break;

      case protostate_COMPLETED:
      {
        if (status_proceed_completed(s, &repeat)) return;
      }
      break;
    }
  }
  while (repeat);

  dprintf(("", "status_proceed: Successful\n"));
}

/**************************************************************/
/* status_proceed_default()                                   */
/*                                                            */
/* State machine handler for an unknown state.                */
/*                                                            */
/* Parameters: Pointer to a session structure for this state; */
/*                                                            */
/*             Pointer to a boolean, in which true is         */
/*             written to go around the state table again,    */
/*             else the contents are unaltered.               */
/*                                                            */
/* Returns:    True if the state table should be exitted      */
/*             immediately, false to proceed normally.        */
/**************************************************************/

static bool status_proceed_default(session * s, bool * repeat)
{
  dprintf(("", "status_proceed_default: UNKNOWN STATE %d ENTERED\n", s->state));

  s->state = protostate_COMPLETED;
  *repeat  = true;

  return false;
}

/**************************************************************/
/* status_proceed_error()                                     */
/*                                                            */
/* State machine handler for any error state.                 */
/*                                                            */
/* Parameters: Pointer to a session structure for this state; */
/*                                                            */
/*             Pointer to a boolean, in which true is         */
/*             written to go around the state table again,    */
/*             else the contents are unaltered.               */
/*                                                            */
/* Returns:    True if the state table should be exitted      */
/*             immediately, false to proceed normally.        */
/**************************************************************/

static bool status_proceed_error(session * s, bool * repeat)
{
  dprintf(("", "status_proceed_error: General error\n"));

  if (s->destruct)
  {
    dprintf(("", "status_proceed_error: Session self-destructing (on error), state machine exitting\n"));
    session_free_item(s);
    return true;
  }

  return false;
}

/**************************************************************/
/* status_proceed_initial()                                   */
/*                                                            */
/* State machine handler for an initial (idling) state.       */
/*                                                            */
/* Parameters: Pointer to a session structure for this state; */
/*                                                            */
/*             Pointer to a boolean, in which true is         */
/*             written to go around the state table again,    */
/*             else the contents are unaltered.               */
/*                                                            */
/* Returns:    True if the state table should be exitted      */
/*             immediately, false to proceed normally.        */
/**************************************************************/

static bool status_proceed_initial(session * s, bool * repeat)
{
  dprintf(("", "status_proceed_initial: Initial state\n"));

  return false;
}

/**************************************************************/
/* status_proceed_connected()                                 */
/*                                                            */
/* State machine handler for a connected (post-DNS, but could */
/* be waiting for actual connection) state: "DNS is complete, */
/* and we're connected. Well, almost, could still try to send */
/* down the socket and get ENOTCONN for a while...! At this   */
/* point, call any connection callback function immediately,  */
/* add in a sequence header, and move to a SENDING state to   */
/* send the command off".                                     */
/*                                                            */
/* Parameters: Pointer to a session structure for this state; */
/*                                                            */
/*             Pointer to a boolean, in which true is         */
/*             written to go around the state table again,    */
/*             else the contents are unaltered.               */
/*                                                            */
/* Returns:    True if the state table should be exitted      */
/*             immediately, false to proceed normally.        */
/**************************************************************/

static bool status_proceed_connected(session * s, bool * repeat)
{
  /* Socket is connected. Compile our command data into a continuous block */
  /* and move to a "sending" state.                                        */

  dprintf(("", "status_proceed_connected: Called for %p, connected\n", s));

  s->last = utils_read_time();

  if (s->connected_cb != NULL)
  {
    dprintf(("", "status_proceed_connected: Calling callback function.\n"));

    // And we do what exactly with errors...?

    s->connected_cb(s);
    s->connected_cb = NULL;
  }

  s->state = protostate_SENDING;
  *repeat  = true;

  return false;
}

/**************************************************************/
/* status_proceed_sending()                                   */
/*                                                            */
/* State machine handler for a sending state: "Whilst we      */
/* could still be in an ENOTCONN state, the state machine is  */
/* way ahead and will be issuing socket_write calls".         */
/*                                                            */
/* Parameters: Pointer to a session structure for this state; */
/*                                                            */
/*             Pointer to a boolean, in which true is         */
/*             written to go around the state table again,    */
/*             else the contents are unaltered.               */
/*                                                            */
/* Returns:    True if the state table should be exitted      */
/*             immediately, false to proceed normally.        */
/**************************************************************/

static bool status_proceed_sending(session * s, bool * repeat)
{
  time_t now;

  dprintf(("", "status_proceed_sending: Called for %p\n", s));

  /* We're pretending to send a command out, but in fact since to generate */
  /* the fake response we just need the headers there's no compilation to  */
  /* a command buffer and we move straight into a receiving state.         */

  now = utils_read_time();

  s->reported_state |= VC_Status_ConnectionEstablished;
  s->last = now;

  /* We'll read into s->data, so don't forget to clear anything lying */
  /* around in there from the request we sent.                        */

  free(s->data), s->data = NULL;
  s->data_len = 0;

  s->state = protostate_RECEIVING;
  *repeat  = true;

  return false;
}

/**************************************************************/
/* status_proceed_receiving()                                 */
/*                                                            */
/* State machine handler for a receiving state: "As soon as a */
/* full command is sent, we start listening for a response".  */
/*                                                            */
/* Parameters: Pointer to a session structure for this state; */
/*                                                            */
/*             Pointer to a boolean, in which true is         */
/*             written to go around the state table again,    */
/*             else the contents are unaltered.               */
/*                                                            */
/* Returns:    True if the state table should be exitted      */
/*             immediately, false to proceed normally.        */
/**************************************************************/

static bool status_proceed_receiving(session * s, bool * repeat)
{
  unsigned int   now = utils_read_time();
  rtsp_header  * response;

  dprintf(("", "status_proceed_receving: Receiving\n"));

  s->last = now;

  /* Generate a response */

  switch (s->cip)
  {
    case CIP_Setup:    response = response_setup(s->headers);
    break;

    case CIP_Play:     response = response_play(s->headers);
    break;

    case CIP_TearDown: response = response_teardown(s->headers);
    break;

    default:           response = NULL;
    break;
  }

  /* We've 'received' the response now */

  s->reported_state |= VC_Status_ResponseReceived;

  /* Out of memory? */

  if (response == NULL)
  {
    s->state = protostate_ERROR_MEM;
  }
  else
  {
    char         * recon;
    unsigned int   recon_len;

    /* Move the new headers into the session */

    headers_free_headers(&s->headers);
    s->headers = response;

    /* Reconstruct to a response buffer */

    recon_len = headers_construct_specific_header_buffer(s->headers,
                                                         &recon,
                                                         0,   /* No oversize allocation */
                                                         1);  /* This is for a response */

    if (recon_len != 0 && recon != NULL)
    {
      s->data_len        = recon_len;
      s->data            = recon;
      s->reported_state |= VC_Status_MoreInformationAvailable;
    }

    s->response_code = (unsigned int) strtoul(s->headers->value, NULL, 10);

    /* If we've not got a server session, try to find one from this response. */
    /* Don't bother with this if we're a child though because if we need a    */
    /* session we'll be using the parent's.                                   */

    if (s->server_session == NULL && s->parent == NULL)
    {
      rtsp_header * h;

      h = headers_find_header(s->headers,
                              Headers_HeaderName_Session);

      if (h != NULL)
      {
        char * store = strchr(h->value, ';');

        if (store != NULL) *store = '\0';
        s->server_session = Strdup(h->value);
        if (store != NULL) *store = ';';

        dprintf(("", "status_proceed_receving: New session '%s'\n", s->server_session ? s->server_session : "<out of memory>"));
      }
    }

    s->state = protostate_COMPLETED;
  }

  *repeat = true;
  return false;
}

/**************************************************************/
/* status_proceed_pumping()                                   */
/*                                                            */
/* State machine handler for a pumping (data movement) state. */
/*                                                            */
/* Parameters: Pointer to a session structure for this state; */
/*                                                            */
/*             Pointer to a boolean, in which true is         */
/*             written to go around the state table again,    */
/*             else the contents are unaltered.               */
/*                                                            */
/* Returns:    True if the state table should be exitted      */
/*             immediately, false to proceed normally.        */
/**************************************************************/

static bool status_proceed_pumping(session * s, bool * repeat)
{
  dprintf(("", "status_proceed_pumping: Pumping\n"));

  return false;
}

/**************************************************************/
/* status_proceed_completed()                                 */
/*                                                            */
/* State machine handler for a completed state (tidy up).     */
/*                                                            */
/* Parameters: Pointer to a session structure for this state; */
/*                                                            */
/*             Pointer to a boolean, in which true is         */
/*             written to go around the state table again,    */
/*             else the contents are unaltered.               */
/*                                                            */
/* Returns:    True if the state table should be exitted      */
/*             immediately, false to proceed normally.        */
/**************************************************************/

static bool status_proceed_completed(session * s, bool * repeat)
{
  dprintf(("", "status_proceed_completed: Completed.\n"));

  if (s->destruct)
  {
    /* We're on the way out - no status change to Video Control... */

    dprintf(("", "status_proceed_completed: Session self-destructing (completed), state machine exitting\n"));
    session_free_item(s);
    return true;
  }
  else
  {
    _kernel_oserror * e;
    unsigned int      flags = 0;
    unsigned int      port  = 0;

    /* We're more or less finished, just need to let Video Control */
    /* know about the status change.                               */

    if (s->play_record != NULL)
    {
      flags |= VC_ProtocolNotify_ResponseReceived_Prepare |
               VC_ProtocolNotify_ResponseReceived_PortInR5;

      port = svbctrl_retrieve_port(s);
    }

    e = _swix(VideoControl_ProtocolNotify,
              _INR(0,5),

              0,
              s->id,
              VideoControlProtocolNotifyResponseReceived,
              flags,
              s->play_record,
              port);

    /* Yikes, Video Control had a problem */

    if (e != NULL)
    {
      utils_store_error(e);

      s->state = protostate_ERROR_VCPN;
      *repeat  = true;

      return false;
    }

    /* Tell SVBmip to start */

    if (s->play_record != NULL)
    {
      e = svbctrl_open_stream(s);

      if (e != NULL)
      {
        utils_store_error(e);

        s->state = protostate_ERROR_VCPN;
        *repeat  = true;

        return false;
      }
    }
  }

  return false;
}

/**************************************************************/
/* status_check_error()                                       */
/*                                                            */
/* Examine a session structure to see if there's an error     */
/* state and if so return an appropriate _kernel_oserror.     */
/*                                                            */
/* Parameters: Pointer to the session structure to examine.   */
/*                                                            */
/* Returns:    NULL or pointer to a filled in _kernel_oserror */
/*             if the session was in an error state.          */
/**************************************************************/

_kernel_oserror * status_check_error(session * s)
{
  _kernel_oserror * e = NULL;

  switch (s->state)
  {
    /* Error states: Various things went wrong... */

    case protostate_ERROR_MEM:
    {
      e = make_error(svbgeneric_ERROR_MEMORY_EXHAUSTED, 0);
    }
    break;

    case protostate_ERROR_VCPN:
    {
      e = utils_recall_error();
    }
    break;
  }

  if (e != NULL && strlen(e->errmess) < (sizeof(e->errmess) - 12))
  {
    sprintf(strchr(e->errmess, '\0'), " (%08X)", (unsigned int) s);
  }

  return e;
}
