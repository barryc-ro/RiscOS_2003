/**************************************************************/
/* File:    SVBctrl.c                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Control the SVBmip module.                        */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 21-Feb-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <socklib.h>
#include <inetlib.h>
#include <netinet/in.h>

#include <SVBmip.h>    /* Exported by SVBmip's !MkExport */
#include <VideoCtrl.h> /* Exported by VideoCtrl's !MkExport */

#include "Module.h"
#include "Parameters.h"
#include "SVBGErrors.h"
#include "Utils.h"

#include "SVBctrl.h"

/* Local structure for SVB_EnumerateChannels */

typedef struct svbctrl_channel_info
{
  unsigned int     entry_size;
  unsigned int     control_handle;
  unsigned int     number;
  const char     * name;
  const char     * parameters;
  unsigned int     flags;
  unsigned int     join_requests;
  unsigned int     leave_requests;
  unsigned int     port;
  struct in_addr   address;
  const char       data[64 + 256]; /* Up to 64 chars name, 256 parameters */

} svbctrl_channel_info;

/**************************************************************/
/* svbctrl_retrieve_port()                                    */
/*                                                            */
/* Ask SVBmip what port to stream video data to - this is     */
/* then communicated to Video Control from Status.c in the    */
/* call to VideoControl_ProtocolNotify.                       */
/*                                                            */
/* Parameters: Pointer to a session struct relevant to the    */
/*             stream-to-be;                                  */
/*                                                            */
/*             Pointer to an int to take the port number (may */
/*             be NULL if you just want to check a channel    */
/*             enumeration works).                            */
/**************************************************************/

_kernel_oserror * svbctrl_retrieve_port(session * s, unsigned int * p)
{
  svbctrl_channel_info * i;
  _kernel_oserror      * e;
  unsigned int           port;
  int                    cont;

  if (p == NULL) p = &port;
  *p = 0;

  /* If channel number is 0, use the URL directly */

  if (s->channel < 1)
  {
    if (s->url->port == NULL) return NULL;
    else
    {
      *p = atoi(s->url->port);
      return NULL;
    }
  }

  /* Otherwise, it's harder - ask SVBmip */

  i = malloc(sizeof(svbctrl_channel_info));
  if (i == NULL) return make_error(svbgeneric_ERROR_MEMORY_EXHAUSTED, 0);

  e = _swix(SVB_EnumerateChannels,
            _INR(0,4) | _OUT(1),

            SVB_EnumerateChannels_StartAtR1, /* Want a specific channel's information            */
            s->channel,                      /* Channel to read                                  */
            i,                               /* Block to read into                               */
            sizeof(svbctrl_channel_info),    /* Size of block                                    */
            1,                               /* Number of entries to read                        */

            &cont);                          /* 0 = buffer to small, else a continuity indicator */


  if (e != NULL)
  {
    free(i);
    return e;
  }

  if (cont != 0) *p = i->port;
  else           *p = 0;

  free(i);

  return NULL;
}

/**************************************************************/
/* svbctrl_open_stream()                                      */
/*                                                            */
/* Open a multicast stream with SVB_OpenStream, if one is not */
/* already open.                                              */
/*                                                            */
/* Parameters: Pointer to a session struct relevant to the    */
/*             new stream.                                    */
/**************************************************************/

_kernel_oserror * svbctrl_open_stream(session * s)
{
  if (s->have_svbid == 0)
  {
    _kernel_oserror * e;
    int               opts[4];

    opts[0] = vc_tags_control_handle;
    opts[1] = 1;
    opts[2] = 0;
    opts[3] = vc_tags__end;

    e = _swix(VideoControl_ProtocolOptions,
              _INR(0,2),

              0,
              s->vcid,
              opts);

    if (e == NULL)
    {
      unsigned int chan_no;

      s->mpegid = opts[2];

      /* We can open by host/port or by number */

      if (s->channel < 1 && s->url->port != NULL && s->url->host != NULL)
      {
        /* Open by host and port */

        char   host [16];
        char   port [6];
        char * found;

        /* Ensure our host and port specifiers are of expected length */

        strncpy(host, s->url->host, sizeof(host));
        host[sizeof(host) - 1] = '\0';
        strncpy(port, s->url->port, sizeof(port));
        port[sizeof(port) - 1] = '\0';

        /* There are two possibilities; we know the channel number or we don't */

        found = parameters_find_item(s->url->query,
                                     Parameters_ChannelName);

        if (found != NULL)
        {
          /* We've been given a channel name, so assemble a full specifier string */

          char * channel = malloc(strlen(found) + 25); /* 25 for "0  aaa.bbb.ccc.ddd:ppppp" (sic.) and terminating NUL */

          if (channel == NULL) e = make_error(svbgeneric_ERROR_MEMORY_EXHAUSTED, 0);
          else
          {
            sprintf(channel, "0 %s %s:%s", found, host, port);
            free(found);

            e = _swix(SVB_AddChannel,
                      _INR(0,1) | _OUT(2),

                      SVB_AddChannel_AllocateNumber,
                      channel,

                      &s->temp_channel);

            free(channel);
          }
        }
        else
        {
          /* This is ugly. We don't know what channel name to use. So, add a channel */
          /* using a name of "0", just to get the number, remove that channel, then  */
          /* use the number as a name and add again.                                 */

          char channel [37]; /* "0 <n> aaa.bbb.ccc.ddd:ppppp" */

          sprintf(channel, "0 0 %s:%s", host, port);

          /* Add it with name '0' */

          e = _swix(SVB_AddChannel,
                    _INR(0,1) | _OUT(2),

                    SVB_AddChannel_AllocateNumber,
                    channel,

                    &s->temp_channel);

          /* If that worked we have the number, so remove it */

          if (e == NULL) e = _swix(SVB_RemoveChannel,
                                   _INR(0,1),

                                   0,
                                   s->temp_channel);

          /* Write a new channel specifier with a name derived from the number we */
          /* expect - yes, we're assuming the same number twice - and add again   */

          if (e == NULL)
          {
            sprintf(channel, "0 %d %s:%s", s->temp_channel, host, port);

            e = _swix(SVB_AddChannel,
                      _INR(0,1) | _OUT(2),

                      SVB_AddChannel_AllocateNumber,
                      channel,

                      &s->temp_channel);
          }
        }

        /* Take a local record of channel number for SVB_OpenStream below */

        chan_no = s->temp_channel;
      }
      else
      {
        /* Simple case - we're given a channel number */

        chan_no = s->channel;
      }

      if (e == NULL)
      {
        e = _swix(SVB_OpenStream,
                  _INR(0,2) | _OUT(0),

                  SVB_OpenStream_NumberInR1,
                  chan_no,
                  s->mpegid,
                  &s->svbid);
      }
    }

    if (e == NULL) s->have_svbid = 1;

    return e;
  }

  return NULL;
}

/**************************************************************/
/* svbctrl_close_stream()                                     */
/*                                                            */
/* Close a multicast stream with SVB_CloseStream.             */
/*                                                            */
/* Parameters: Pointer to a session struct relevant to the    */
/*             existing stream.                               */
/**************************************************************/

_kernel_oserror * svbctrl_close_stream(session * s)
{
  if (s->have_svbid == 1)
  {
    /* Close the stream */

    _kernel_oserror * e = _swix(SVB_CloseStream,
                                _INR(0,1),

                                0,
                                s->svbid);

    s->have_svbid = 0;

    /* Remove the temporary channel, if allocated */

    if (s->temp_channel > 0)
    {
      _swix(SVB_RemoveChannel,
            _INR(0,1),

            0,
            s->temp_channel);

      s->temp_channel = 0;
    }

    return e;
  }

  return NULL;
}
