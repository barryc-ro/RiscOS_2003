/**************************************************************/
/* File:    Session.c                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Manage our local sessions with Video Control.     */
/*                                                            */
/* Author:  Originally S.N.Brodie in the Generic fetcher.     */
/*          Adapted by A.D.Hodgkinson.                        */
/*                                                            */
/* History: 14-Feb-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#include <swis.h>
#include <sys/errno.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <VideoCtrl.h> /* Exported by VideoCtrl's !MkExport */

#include "Callout.h"
#include "Generic.h"
#include "Headers.h"
#include "Module.h"
#include "SVBGErrors.h"
#include "Status.h"
#include "Utils.h"

#include "Session.h"

/* Local data */

static session * session_list = NULL;

/* Local functions */

static void session_free_item_data (session * s);

/**************************************************************/
/* session_return_head()                                      */
/*                                                            */
/* Find out the head of the list of session structures.       */
/*                                                            */
/* Returns:    Pointer to the first item in the list. Follow  */
/*             'next' pointers to traverse that list. Will    */
/*             give NULL if there are no sessions.            */
/**************************************************************/

session * session_return_head(void)
{
  return session_list;
}

/**************************************************************/
/* session_find_by_id()                                       */
/*                                                            */
/* Find a session structure based on a session ID.            */
/*                                                            */
/* Parameters: ID to find.                                    */
/*                                                            */
/* Returns:    Pointer to the session struct relevant to that */
/*             ID, or NULL if the ID is not found.            */
/**************************************************************/

session * session_find_by_id(unsigned int id)
{
  session * ses;

  for (ses = session_list; ses; ses = ses->next)
  {
    if (ses->id == id) return ses;
  }

  return NULL;
}

/**************************************************************/
/* session_new_session()                                      */
/*                                                            */
/* Create a new session, taking into account starting the     */
/* session list.                                              */
/*                                                            */
/* Parameters: Pointer to a session struct pointer which is   */
/*             updated to point to the new structure.         */
/*                                                            */
/* Returns:    If the function generates an error it returns  */
/*             it directly. If it runs out of memory, it'll   */
/*             merely return update the parameter pointer     */
/*             with NULL and also return NULL. ALWAYS check   */
/*             for the directly reported error FIRST.         */
/**************************************************************/

_kernel_oserror * session_new_session(session ** rs)
{
  session *ses = calloc(1, sizeof(session));

  if (ses == NULL)
  {
    *rs = NULL;
    return NULL;
  }

  if (session_list == NULL)
  {
    /* No list so create a new one */

    session_list = ses;
  }
  else
  {
    /* Else find end of list and add an element */

    session * s;

    for (s = session_list; s->next; s = s->next) ;;
    s->next = ses;
  }

  *rs = ses;
  return NULL;
}

/**************************************************************/
/* session_link_new_item()                                    */
/*                                                            */
/* Given a new session struct, link it into the tail of the   */
/* session list.                                              */
/*                                                            */
/* Parameters: Pointer to the new item.                       */
/*                                                            */
/* Assumes:    The parameter pointer is non-NULL and valid.   */
/**************************************************************/

_kernel_oserror * session_link_new_item(session * ses)
{
  if (session_list == NULL)
  {
    /* No list so create a new one */

    session_list = ses;
  }
  else
  {
    /* Else find end of list and add an element */

    session * s;

    for (s = session_list; s->next; s = s->next) ;;
    s->next = ses;
  }

  return NULL;
}

/**************************************************************/
/* session_reset_session()                                    */
/*                                                            */
/* "Reset" a session structure, so that, assuming it has      */
/* already been used for an RTSP command, it may be used for  */
/* another (e.g. between SETUP and PLAY).                     */
/*                                                            */
/* This does things like freeing response headers and data,   */
/* resetting status back to initial / unconnected, etc. etc.  */
/*                                                            */
/* Parameters: Pointer to the session structure to reset.     */
/**************************************************************/

void session_reset_session(session * ses)
{
  if (ses->callout_set != 0)
  {
    untimeout(status_proceed_on_callout, ses);
    ses->callout_set = 0;
  }

  if (ses->child) session_free_item(ses->child);

  free(ses->full_request), ses->full_request = NULL;

  ses->state          = protostate_INITIAL;
  ses->reported_state = 0;
  ses->data_len       = 0, free(ses->data), ses->data = NULL;
  ses->connected_cb   = NULL;

  if (ses->play_record != NULL)
  {
    free(ses->play_record);
    ses->play_record = NULL;
  }

  headers_free_headers(&ses->headers), ses->headers = NULL;

  return;
}

/**************************************************************/
/* session_free_item_data()                                   */
/*                                                            */
/* Release any memory associated with a session structure,    */
/* including that structure itself.                           */
/*                                                            */
/* The function is designed to be paranoid and will zero the  */
/* area of memory occupied by the structure before freeing.   */
/*                                                            */
/* Re-entrancy must be maintained since a session may delete  */
/* its own child from here.                                   */
/*                                                            */
/* Parameters: Pointer to the item to free (discard).         */
/*                                                            */
/* Assumes:    The parameter pointer is non-NULL and valid.   */
/**************************************************************/

static void session_free_item_data(session * s)
{
  if (s->callout_set != 0)
  {
    untimeout(status_proceed_on_callout, s);
    s->callout_set = 0;
  }

  if (s->child)  session_free_item(s->child);
  if (s->parent) s->parent->child = NULL;

  headers_free_headers(&s->headers);
  urlutils_free_description(s->url);
  free(s->full_request);
  free(s->play_record);
  free(s->data);
  free(s->server_session);

  memset(s, '\0', sizeof(*s)); /* Let's be careful */
  free(s);
}

/**************************************************************/
/* session_free_item()                                        */
/*                                                            */
/* Discard a session in the session list cleanly.             */
/*                                                            */
/* Must be re-entrant (see session_free_item_data too).       */
/*                                                            */
/* Parameters: Pointer to the item to discard.                */
/*                                                            */
/* Assumes:    The parameter pointer is non-NULL and valid.   */
/**************************************************************/

void session_free_item(session * ses)
{
  session * s      = session_list;
  session * prev_s = NULL;
  bool      found  = false;

  for (s = session_list; s; prev_s = s, s = s->next)
  {
    if (s == ses)
    {
      int irqs_off = _kernel_irqs_disabled();

      _kernel_irqs_off();

      found = true;

      if (prev_s == NULL)
      {
        session_list = s->next;
      }
      else
      {
        prev_s->next = s->next;
      }

      if (!irqs_off) _kernel_irqs_on();

      session_free_item_data(ses);

      break;
    }
  }

  #ifdef TRACE2
    dprintf(("", "\nsession_free_item: %p freed. Dump of session chain:\n", ses));
    for (s = session_list; s; s = s->next)
    {
      dprintf(("", "session_free_item: %p URL %s\n", s, s->url && s->url->full ? s->url->full : "<none>"));
    }
    dprintf(("", "session_free_item: End of session chain\n\n"));
  #endif
}

/**************************************************************/
/* session_free_list()                                        */
/*                                                            */
/* Discard all sessions in the session list (e.g. for module  */
/* shutdown).                                                 */
/**************************************************************/

void session_free_list(void)
{
  while (session_list)
  {
    session_free_item(session_list);
  }
}

/**************************************************************/
/* session_check()                                            */
/*                                                            */
/* Call to check for any sessions that need timing out.       */
/*                                                            */
/* NOT IMPLEMENTED                                            */
/**************************************************************/

void session_check(void)
{
  /* Nothing */
}
