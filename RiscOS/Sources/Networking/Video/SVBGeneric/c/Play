/**************************************************************/
/* File:    Play.c                                            */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Implement SVBGeneric_Play.                        */
/*                                                            */
/* Author : A.D.Hodgkinson. Based on URL_Fetcher source by    */
/*          S.N.Brodie and P. Wain.                           */
/*                                                            */
/* History: 14-Feb-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <VideoCtrl.h>

#include "CallOut.h"
#include "Connect.h"
#include "Generic.h"
#include "Headers.h"
#include "Module.h"
#include "SVBGErrors.h"
#include "Session.h"
#include "Status.h"
#include "Utils.h"

#include "Play.h"

/**************************************************************/
/* play_play()                                                */
/*                                                            */
/* Implement SVBGeneric_Play. See the Video Control           */
/* specification, 2501,817/FS, for more.                      */
/**************************************************************/

_kernel_oserror * play_play(_kernel_swi_regs * r)
{
  session * s         = session_find_by_id(r->r[1]);
  bool      fail      = false;
  bool      slowmofwd = false; /* This is true for slowmo forward play     */
  bool      play      = true;  /* This is true for any non-pause play mode */
  bool      mpd_present;
  char    * port;
  char    * scale;

  dprintf(("", "play_play: Called\n"));

  if (s == NULL)
  {
    dprintf(("", "play_play: ID not found\n"));

    return make_error(svbgeneric_ERROR_CLIENT_ID_NOT_FOUND, 0);
  }

  if (
       s->state == protostate_DNS       ||
       s->state == protostate_CONNECTED ||
       s->state == protostate_SENDING   ||
       s->state == protostate_RECEIVING ||
       s->state == protostate_PUMPING
     )
  {
    dprintf(("", "play_play: In progress\n"));

    return make_error(svbgeneric_ERROR_IN_PROGRESS, 0);
  }

  if (s->server_session == NULL)
  {
    dprintf(("", "play_play: No server session\n"));

    return make_error(svbgeneric_ERROR_NO_SERVER_SESSION, 0);
  }

  /* Can we do reduced data rate forwards slowmo? */

  if (
       _swix(OS_Module,
             _INR(0,1),

             18,
             ReducedRateSlowmoSupportModule) /* Play.h */

       != NULL
     )
     mpd_present = false;

  else mpd_present = true;

  /* For forwards slow-mo, we don't use Scale, we use Speed. You can */
  /* just deliver the data more slowly. OVS' slowmo with Scale is    */
  /* awful; using Speed gives a much better result.                  */

  scale = (char *) r->r[3];

  if (scale)
  {
    if (strchr(scale, '.') != NULL && *scale != '-') slowmofwd = true;
    else if (!strcmp(scale, "0"))                    play      = false;
  }

  /* If MPEGDriver isn't present, unset slowmofwd */

  if (mpd_present == false) slowmofwd = false;

  /* Ensure everything is reset for a new command */

  session_reset_session(s);

  /* Copy R3 away */

  s->play_record = Strdup(scale == NULL ? "" : scale);

  /* Start adding headers */

  if (s->play_record == NULL) fail = true;

  else if (
            headers_add_header(&s->headers,
                               play ? Headers_CommandName_Play : Headers_CommandName_Pause,
                               s->url->full)
            == NULL
          )
          fail = true;

  /* A sequence header */

  else if (headers_add_sequence_header(&s->headers) == NULL) fail = true;

  /* Range */

  else if (
            r->r[2] != 0 &&

            headers_add_header(&s->headers,
                               Headers_HeaderName_Range,
                               (char *) r->r[2])
            == NULL
          )
          fail = true;

  /* If we're not pausing, the playback rate - first, Scale playback (trick play) */

  else if (
            play          &&
            !slowmofwd    &&
            scale != NULL &&

            headers_add_header(&s->headers,
                               Headers_HeaderName_Scale,
                               scale)
            == NULL
          )
          fail = true;

  /* Second, Speed playback (alter data delivery rate, for slowmo forwards play) */

  else if (
            play          &&
            slowmofwd     &&
            scale != NULL && /* It should never be if slowmofwd is true, but just in case... */

            headers_add_header(&s->headers,
                               Headers_HeaderName_Speed,
                               scale)
            == NULL
          )
          fail = true;

  /* No AEN, so Connection: close */

  else if (
            headers_add_header(&s->headers,
                               Headers_HeaderName_Connection,
                               Headers_HeaderValue_Connection)
            == NULL
          )
          fail = true;

  /* Lastly, the session header */

  else if (
            headers_add_header(&s->headers,
                               Headers_HeaderName_Session,
                               s->server_session)
            == NULL
          )
          fail = true;

  /* Did anything fail? */

  if (fail)
  {
    dprintf(("", "play_play: Out of memory\n"));
    return make_error(svbgeneric_ERROR_MEMORY_EXHAUSTED, 0);
  }

  /* Open a connection to send the command down */

  if (s->url->port && *s->url->port) port = s->url->port;
  else                               port = NULL;

  s->cip   = CIP_Play;
  s->sd    = 0;
  s->last  = utils_read_time();
  s->state = protostate_CONNECTED;

  dprintf(("", "play_play: Socket descriptor %d, state %d\n", s->sd, s->state));

  /* Set the state machine going to see errors and DNS stuff. The call */
  /* to session_reset_session should've cleared the callout but it     */
  /* never hurts to be sure (in future maybe stuff could go on in the  */
  /* background that could have set a callout between the reset and    */
  /* this part of the code).                                           */

  if (s->callout_set == 0)
  {
    s->callout_set = 1;
    timeout(status_proceed_on_callout, s, Session_State_Timer);
  }

  dprintf(("", "play_play: Successful\n"));

  return NULL;
}
