/**************************************************************/
/* File   : Module.c                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: SVB Generic is a Video Control protocol module    */
/*          which allows Video Control clients access to      */
/*          multicast video streams. The module emulates      */
/*          appropriate RTSP server responses to client       */
/*          requests.                                         */
/*                                                            */
/* Author:  A.D.Hodgkinson. Based on URL_Fetcher source by    */
/*          S.N.Brodie.                                       */
/*                                                            */
/* History: 14-Feb-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include <Global/RISCOS.h>
#include <Global/Services.h>
#include <swis.h>
#include <sys/errno.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <Global/SWIs.h>
#include <MPEG/MPEGCtrl.h>
#include <VideoCtrl.h> /* Exported by VideoCtrl's !MkExport */

#include "Utils.h"
#include "SVBGHdr.h"
#include "Module.h"

#include "CallOut.h"
#include "MoreInfo.h"
#include "Options.h"
#include "Play.h"
#include "Session.h"
#include "Setup.h"
#include "Status.h"
#include "TearDown.h"

/* Various patch-ups and other compile time bits */

#if CMHG_VERSION < 516
  #define CMHG_CONST
#else
  #define CMHG_CONST const
#endif

#ifndef ROM
  extern int messages_file(void);
#endif

#ifndef ROM
  #ifdef DEFINE_ERRNO
    int __errno;
  #endif
#endif

/* TinySupport SWIs. This does not work if any library static data   */
/* is used within the module. This means errno (__errno) and __ctype */
/* (as used by any macro call to is.... functions). If you re-enable */
/* this SWI call, this module will fail to work at all.              */

#define NO_TINYSTUBS

#ifdef ROM
  #ifndef NO_TINYSTUBS
    static _kernel_oserror *__ROM;
    #define TinySupport_Share   (0x82c43)
    #define TinySupport_Die     (0x82c41)
  #endif
#endif

/* Local variables */

static void * module_wsp                        = NULL;
static int    registered                        = 0;
static int    clibrary_realloc_routine_is_buggy = 1;

/* Local functions */

static _kernel_oserror * module_try_to_register        (void);
static _kernel_oserror * module_try_to_deregister      (void);
static _kernel_oserror * module_register               (void);

static void              module_check_os_version       (void);
static void              module_atexit                 (void);

/**************************************************************/
/* module_try_to_register()                                   */
/*                                                            */
/* Attempts to register with Video Control. Exits if already  */
/* registered. "registered" is set to 1 if registration is    */
/* successful, else left at its previous value.               */
/**************************************************************/

static _kernel_oserror * module_try_to_register(void)
{
  _kernel_oserror * e;
  unsigned int      flags, openflags;

  dprintf(("", "module_try_to_register: Called\n"));

  if (registered)
  {
    dprintf(("", "module_try_to_register: Already registered, exitting\n"));
    return NULL;
  }

  /* Protocol registration flags. */

  flags = VC_ProtocolRegister_DoNotResetOrSetSpeed |
          VC_ProtocolRegister_OpenStreamFlagsInR5  |
          VC_ProtocolRegister_DoNotCallUDPV;

  /* Flags for MPEGControl_OpenStream. Remember that bits 0 and 1 */
  /* will still be set appropriately by Video Control.            */

  openflags = StreamFlags_AudioSkipToSync | /* This is in fact "reserved - set to 1" */
              StreamFlags_SyncToStream;

  e = _swix(VideoControl_ProtocolRegister,
            _INR(0,5),

            flags,
            SVBGeneric_00,
            SVBGeneric_FetchScheme,
            Module_VersionNumber,
            Module_Help " © Pace 2000 (" Module_Date ")",
            openflags);

  if (e == NULL) registered = 1;

  dprintf(("", "module_try_to_register: Finished, registered = %d\n", registered));

  return e;
}

/**************************************************************/
/* module_try_to_deregister()                                 */
/*                                                            */
/* Attempts to deregister with Video Control. Exits if not    */
/* registered. "registered" is set to 0 whether or not the    */
/* call to VideoControl to deregister raises an error.        */
/**************************************************************/

static _kernel_oserror * module_try_to_deregister(void)
{
  _kernel_oserror * e;

  dprintf(("", "module_try_to_deregister: Called\n"));

  if (registered == 0)
  {
    dprintf(("", "module_try_to_deregister: Not registered, exitting\n"));
    return NULL;
  }

  e = _swix(VideoControl_ProtocolDeregister,
            _INR(0,1),

            0,
            SVBGeneric_00);

  registered = 0;

  dprintf(("", "module_try_to_deregister: Finished, e = %p\n", e));
  if (e) dprintf(("", "module_try_to_register: '%s'\n", e->errmess));

  return e;
}

/**************************************************************/
/* module_register()                                          */
/*                                                            */
/* Attempts to register with Video Control. If we get "SWI    */
/* not known" and this isn't a ROM build, try loading Video   */
/* Control. That should send the "started" service call       */
/* around which leads to another attempt to register later.   */
/**************************************************************/

static _kernel_oserror * module_register(void)
{
  _kernel_oserror * e = module_try_to_register();

  if (e == NULL) return NULL;
  if (e->errnum != SVBGeneric_NoSuchSWI) return e;

  #ifndef ROM

    /* Try to load Video Control - if it starts it should send round a */
    /* service call that'll prompt us to attempt registration again.   */

    _swix(OS_Module,
          _INR(0,1),

          1, /* Load */
          "System:Modules.Network.Video.VideoCtrl");

  #endif

  return NULL;
}

/**************************************************************/
/* module_check_os_version()                                  */
/*                                                            */
/* Sets clibrary_realloc_routine_is_buggy to a non-zero value */
/* if the OS version is sufficiently old that the SVC mode C  */
/* library realloc() is buggy in module code; else sets       */
/* it to zero.                                                */
/*                                                            */
/* See also module_realloc.                                   */
/**************************************************************/

static void module_check_os_version(void)
{
  int os;

  (void) _swix(OS_Byte,
               _INR(0,2) | _OUT(1),

               129,
               0,
               255,

               &os);

  clibrary_realloc_routine_is_buggy = (os <= 0xA4);
}

/**************************************************************/
/* module_init()                                              */
/*                                                            */
/* Startup code, usual initialisation entry point stuff.      */
/*                                                            */
/* Parameters: As normal for a CMHG initialisation function.  */
/**************************************************************/

_kernel_oserror * module_init(CMHG_CONST char * cmd_fail, int podule_base, void * pw)
{
  _kernel_oserror * e;

  (void) cmd_fail;
  (void) podule_base;

  module_wsp = pw;

  #ifdef ROM
    #ifndef NO_TINYSTUBS

      __ROM = _swix(TinySupport_Share,
                    _IN(0),

                    pw);

    #endif
  #endif

  #ifdef TRACE
    {
      debug_device dev = TML_OUTPUT;

      debug_initialise("SVBGeneric", "ADFS::4.$.SVBGdebug", NULL);
      debug_atexit();
      debug_set_screen_cornering(FALSE);
      debug_set_unbuffered_files(TRUE);
      debug_set_device(dev);
    }
  #endif

  /* Keep this after debuglib initialisation or you won't */
  /* see any debug output from within the atexit handler. */

  atexit(module_atexit);
  module_check_os_version();

  #ifndef ROM

    e = _swix(ResourceFS_RegisterFiles,
              _IN(0),

              messages_file());

    if (e != NULL) return e;

  #endif

  if (getenv(Module_Title "$Path"))
  {
    e = messages_file_open(Module_Title ":Messages");
  }
  else
  {
    e = messages_file_open("Resources:$.Resources.VideoCtrl." "SVBGeneric" ".Messages");
  }

  #if CMHG_VERSION < 530

    /*
     * Earlier CMHGs won't call the atexit() handler if we return an
     * error here 'cos its bust. Could work around it but since there
     * is a fixed version available, insist on it.
     */

    #error You need CMHG 5.30 or later to build SVBGeneric.

  #else

    if (e != NULL) return e;

    /* Register with Video Control - No Such SWI is hidden, other */
    /* errors are reported.                                       */

    e = module_register();
    if (e != NULL && e->errnum != SVBGeneric_NoSuchSWI) return e;

  #endif

  return callout_init(pw);
}

/**************************************************************/
/* module_atexit()                                            */
/*                                                            */
/* At exit handler for the module. Note that this is only     */
/* correclty called if the module is built with CMHG 5.30 or  */
/* later.                                                     */
/**************************************************************/

static void module_atexit(void)
{
  dprintf(("", "module_atexit: Called\n"));

  callout_final(module_wsp);

  /* Other critical "must go now" things */

  #ifndef ROM

    (void) _swix(ResourceFS_DeregisterFiles,
                 _IN(0),

                 messages_file());

  #endif

  /* Now we can start shutting the rest down. Stuff here may start */
  /* looking through data structures so might crash, which would   */
  /* stop anything following being run. Hence, do the essential    */
  /* (but hopefully reliable!) stuff first, above.                 */

  messages_file_close();
  module_try_to_deregister();
  session_free_list();

  #ifdef ROM
    #ifndef NO_TINYSTUBS
      if(!__ROM) _swix(TinySupport_Die, 0);
    #endif
  #endif
}

/**************************************************************/
/* service_handler()                                          */
/*                                                            */
/* General service call handler.                              */
/*                                                            */
/* Parameters: As normal for a CMHG service call handler.     */
/**************************************************************/

void service_handler(int service_number, _kernel_swi_regs * r, void * pw)
{
  dprintf(("", "service_handler: Called for %08x (%d, %d)\n", service_number, r->r[0], r->r[2]));

  if (service_number == Service_VideoControl)
  {
    /* 0 means "I started", 1 means "I went away - don't talk to me now" */

    switch (r->r[0])
    {
      case 0: module_try_to_register(); break;
      case 1: registered = 0; /* Can't actively deregister as Video Control has gone away */
      default: break;
    }
  }
}

/**************************************************************/
/* swi_handler()                                              */
/*                                                            */
/* SWI dispatch table.                                        */
/*                                                            */
/* Parameters: As normal for a CMHG SWI handler.              */
/**************************************************************/

_kernel_oserror * swi_handler(int swi_no, _kernel_swi_regs * r, void * pw)
{
  switch(swi_no)
  {
    case SVBGeneric_Setup                   - SVBGeneric_00: /* SVBGeneric_Setup           */
      return(setup_setup(r));                                /* Setup.c                 */

    case SVBGeneric_Options                 - SVBGeneric_00: /* SVBGeneric_Options         */
      return(options_options(r));                            /* Options.c               */

    case SVBGeneric_Status                  - SVBGeneric_00: /* SVBGeneric_Status          */
      return(status_status(r));                              /* Status.c                */

    case SVBGeneric_MoreInformation         - SVBGeneric_00: /* SVBGeneric_MoreInformation */
      return(moreinfo_more_information(r));                  /* MoreInfo.c              */

    case SVBGeneric_Play                    - SVBGeneric_00: /* SVBGeneric_Play            */
      return(play_play(r));                                  /* Play.c                  */

    case SVBGeneric_TearDown                - SVBGeneric_00: /* SVBGeneric_TearDown        */
      return(teardown_tear_down(r));                         /* TearDown.c              */

    default:
      return error_BAD_SWI;
  }
}

/**************************************************************/
/* module_realloc()                                           */
/*                                                            */
/* RISC OS 3.1's SVC mode realloc is broken, so here's our    */
/* own version. Use it if clibrary_realloc_routine_is_buggy   */
/* is set after calling module_check_os_version.              */
/*                                                            */
/* Parameters: As realloc.                                    */
/*                                                            */
/* Returns:    As realloc.                                    */
/**************************************************************/

void * module_realloc(void * ptr, size_t size)
{
  dprintf(("", "module_realloc(%p, %d)\n", ptr, size));

  if (!clibrary_realloc_routine_is_buggy) return realloc(ptr, size);

  if (ptr == NULL)
  {
    return malloc(size);
  }

  if (size == 0)
  {
    free(ptr);
    return NULL;
  }
  else
  {
    const int    * rma_block = ptr;
    const size_t   newsize   = size - (rma_block[-1] - 4);
    char         * newptr;

    if (
         _swix(OS_Module,
               _IN(0) | _INR(2,3) | _OUT(2),

               0xD,
               ptr,
               newsize,

               &newptr)

         != NULL
       )
       return NULL;

     return newptr;
  }
}
