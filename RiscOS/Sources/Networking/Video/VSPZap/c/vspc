/*	VSPC.C

© Acorn Computers Ltd

Module:  Zap module

Purpose:


History:

Date      Who     Description of change
===========================================
27/5/98    CP     Tidied up some things, added prototype to remove a compiler
                  warning

***************************************************************************/

#include <stdio.h>
#include "sys/types.h"
#include <kernel.h>
#include <swis.h>
#include "vsp.h"
#include "misc.h"
#include "zap.h"

extern _kernel_oserror *zap_startstream(), *zap_closestream(), *zap_error();

char *zap_channel_name(int); /* prototype to stop compiler from getting confused! */

extern char *malloc();
extern int alive_timeout, mpeg_handle, endofstream_timeout, do_keepalive, session_in_progress;
extern int endofstream, endofstream_timer, zap_keepalive_timer, current_channel;
int last_rxcount = 0;
int playpaused = 0;

int caseless_strcmp(char *a, char *b)
{
    int d;

    while ( *a || *b ) {
        d = toupper( *(a++) ) - toupper( *(b++) );
        if ( d )
            return d;
    }
    return 0;
}

int caseless_strncmp(char *a, char *b, int n)
{
    int d;

    while ( *a || *b ) {
        d = toupper( *(a++) ) - toupper( *(b++) );
        if ( d )
            return d;
        if (--n == 0)
           break;
    }
    return 0;
}

_kernel_oserror *OpenStream(_kernel_swi_regs *r)
{
    _kernel_oserror *err;
    int margc;
    char *margv[10];
    char *cp;
    char **argp = margv;

    margc = 0;
    cp = (char *)r->r[1];
    mpeg_handle = r->r[2];
    last_rxcount = 0;
    endofstream = 0;
    endofstream_timer = 0;
    zap_keepalive_timer = 0;
    do_keepalive = 0;
    playpaused = 0;
    while (*cp) {
        while (isspace(*cp))
            cp++;
        if (*cp == '\0' || iscntrl(*cp))
            break;
        *argp++ = cp;
        margc++;
        while (*cp != '\0' && !iscntrl(*cp) && !isspace(*cp))
            cp++;
        if (*cp == '\0' || iscntrl(*cp))
            break;
        *cp++ = '\0';
    }
    *argp++ = 0;
    err = zap_startstream(margc, margv, mpeg_handle);
    r->r[0] = err ? 0 : 1;
    return (err);
}

_kernel_oserror *CloseStream(_kernel_swi_regs *r)
{
    _kernel_oserror *err;

    err = zap_closestream();
    return (err);
}

_kernel_oserror *CheckEndofStream(_kernel_swi_regs *r)
{
    _kernel_oserror *err = 0;
    int rxcount = 0, ret;

    if (do_keepalive) {
        ret = ZAPkeepalive();
        do_keepalive = 0;
        if (ret != 0) {
            endofstream = 1;
            r->r[0] = endofstream;
            r->r[2] = 0;
            r->r[3] = 0;
            return (zap_error(ret, 1));
        }
        zap_keepalive_timer = alive_timeout;
    }
    if (playpaused)
        goto out;
    if (endofstream_timeout == 0) {
        endofstream = 0;
        goto out;
    }
    rxcount = mpeg_streamcount(mpeg_handle);
    if (rxcount == -1)
        endofstream = 1;
    else {
        if (rxcount > last_rxcount) {
            endofstream_timer = 0;
            endofstream = 0;
        }
        else if (endofstream_timer == 0)
            endofstream_timer = rxcount > 0 ? endofstream_timeout : ENDOFSTREAM_TIMEOUT;
    }
out:
    r->r[0] = endofstream;
    r->r[2] = 0;
    r->r[3] = 0;
    last_rxcount = rxcount;
    return (endofstream ? zap_error(rspNoVideo, 1) : err);
}

_kernel_oserror *SetSpeed(_kernel_swi_regs *r)
{
    (void) zap_playcontrol(r->r[0], r->r[2]);
    return (0);
}

_kernel_oserror *SetPosition(_kernel_swi_regs *r)
{
    return (0);
}

_kernel_oserror *ReadNPT(_kernel_swi_regs *r)
{
    r->r[0] = -1;
    return ((_kernel_oserror *)0);
}

_kernel_oserror *SetServer(_kernel_swi_regs *r)
{
    return ((_kernel_oserror *)0);
}

_kernel_oserror *ReadChannel(_kernel_swi_regs *r)
{
    char *ch;

    r->r[0] = current_channel;

    ch = zap_channel_name(current_channel);

    if (ch != NULL)
        set_sysvar("SVB$ChannelName", ch, strlen(ch));

    return ((_kernel_oserror *)0);
}

_kernel_oserror *ReadChannelNames(_kernel_swi_regs *r)
{
    read_channel_names(); /* call the internal routine */
    return ((_kernel_oserror *)0);
}
