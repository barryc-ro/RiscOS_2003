; > Module
; Source for VSPFile Module

; ***********************************
; ***    C h a n g e   L i s t    ***
; ***********************************

; Date       Who  Version       Description
; ----       ---  -------       -----------
; 02-Aug-95  TMD  0.01		Started work
;

        LEADR   Module_LoadAddr

TAB     *       9
LF      *       10
FF      *       12
CR      *       13

DefaultBufferSize	*	64*1024
DefaultNBuffers		*	3

			^	0
StreamState_Dormant	#	1	; no stream open, no buffers on loan
StreamState_Active	#	1	; stream active
StreamState_Finished	#	1	; hit end of stream
StreamState_Closing	#	1	; stream closed, but buffers still on loan
StreamState_Error	#	1	; had error in callback

                        ^       0, wp

; The following are always valid
StreamState		#	4	; state of stream, as above

NBuffersOnLoan		#	4	; number of buffers 'on loan' to MPEGControl
CallBackRequested	#	4	; 0 => no callback pending, 1 => callback pending
FreeBufferListHeadPtr   #       4       ; pointer to head of list of free buffer descriptors

; The following are only valid when a stream is open
FileHandle		#	4	; handle for file (zero when no stream open)
NBuffersTotal		#	4	; total number of buffers allocated
BufferSize		#	4	; size of each buffer
MPEGControlStreamHandle #	4	; control stream handle
CurrentPTR		#	4	; where we're up to in file
EndPTR			#	4	; where to stop

BackgroundErrorBlock	#	256	; block to copy background error block to, so we can return it from CheckEndOfStream

 [ international
MessageFile_Block #     16
MessageFile_Open  #     4
 ]

Module_WorkspaceSize * :INDEX: @

; ** Debugging macros **

        GBLL    debug
debug   SETL    {FALSE}

        MACRO
        DLine   $string, $cc, $inverse
 [ debug
        DLINE   $string, $cc, $inverse
 ]
        MEND

        MACRO
        DReg    $reg, $string, $cc, $routine
 [ debug
        DREG    $reg, $string, $cc, $routine
 ]
        MEND

; **************** Module code starts here **********************

Module_BaseAddr

        &       0                               ; no app start entry
        &       Mod_Init    -Module_BaseAddr
        &       Mod_Die     -Module_BaseAddr
        &       Mod_Service -Module_BaseAddr
        &       Mod_Title   -Module_BaseAddr
        &       Mod_HelpStr -Module_BaseAddr
        &       Mod_HC_Table-Module_BaseAddr
        &       Ether2DCISWI_Base		; SWI chunk for VSP
        &       Mod_SWIHandler-Module_BaseAddr
        &       Mod_SWITable-Module_BaseAddr
        &       0                               ; no swi name decode entry

Mod_Title
        =       "VSPFile", 0

Mod_HelpStr
        =       "VSP File", TAB, "0.01 (02 Aug 1995)"
	=	0
        ALIGN

Mod_SWITable
        =       "VSP", 0
        =       "OpenStream", 0
        =       "CloseStream", 0
	=	"CheckEndOfStream", 0
        =       "SetSpeed", 0
	=	"SetPosition", 0
	=	"FreeBuffer", 0
	=	"ReadPosition", 0
        =       0

Mod_HC_Table
	Command VSPInfo, 0, 0
        =       0
	ALIGN

VSPInfo_Help
	=	"*VSPInfo outputs debugging info.", CR
VSPInfo_Syntax
	=	"Syntax: *VSPInfo", 0
	ALIGN

; **************************************************************************
;
;       Mod_Init - Initialisation entry
;

Mod_Init Entry
        LDR     r2, [R12]               ; have we got workspace yet ?
        TEQ     r2, #0
        BNE     %FT05

        MOV     r0, #ModHandReason_Claim
        LDR     r3, =Module_WorkspaceSize
        SWI     XOS_Module
        EXIT    VS

; r2 -> workspace

        STR     r2, [r12]               ; save address in my workspace pointer,
                                        ; so Tutu can free it for me when I die
05
        MOV     r12, r2

        MOV     r0, #StreamState_Dormant
	STR	r0, StreamState

	MOV	r0, #0
	STR	r0, CallBackRequested
	STR	r0, FreeBufferListHeadPtr

        CLRV
        EXIT

; **************************************************************************
;
;       Mod_Die - Die entry
;

Mod_Die Entry
        LDR     wp, [r12]

	LDR	r0, StreamState
	CMP	r0, #StreamState_Dormant
	EXIT	EQ			; V=0 from compare

	TEQ	r0, #StreamState_Closing
	ADREQL	r0, ErrorBlock_BuffersOnLoan
	ADRNEL	r0, ErrorBlock_FileOpen	; active, finished, or error
	SETV
	EXIT

; **************************************************************************
;
;       Mod_Service - Main entry point for services
;
; in:   R1 = service reason code
;
; out:  R1 = 0 if we claimed it
;

Mod_Service * Module_BaseAddr   ; nothing to do yet!

; **************************************************************************
;
;       Mod_SWIHandler - Main entry point for SWIs
;
; in:   r11 = SWI number
;

Mod_SWIHandler ROUT
        LDR     r12, [wp]
        CMP     r11, #MPEGControlSWICheckValue - MPEGControlSWI_Base
        ADDCC   pc, pc, r11, LSL #2
        B       NoSuchSWI
SWIBTable
        B       OpenStream      ; open stream
        B       CloseStream     ; close stream
	B	CheckEndOfStream ; check for end of stream
        B       SetSpeed        ; may encompass pause/slow/fast/rewind
	B	SetPosition	; set new file position
	B	FreeBuffer	; free buffer
	B	ReadPosition	; read current file position

NoSuchSWI
        Push    "lr"
 [ {FALSE}
        SWI     XOS_WriteI+22
        SWI     XOS_WriteI+12
        DREG    r11, "Unknown VSP SWI - offset from base = "
        DLINE   "Press any key"
        SWI     XOS_ReadC
 ]
        ADR     r0, NoSuchSWIError
        SETV
        Pull    "pc"

NoSuchSWIError
        &       0
        =       "No such VSP SWI", 0
        ALIGN

; **************************************************************************
;
;	VSPInfo_Code - Entry point for *VSPInfo
;

VSPInfo_Code Entry
	LDR	wp, [r12]

	SWI	XOS_WriteS
	=	"Stream state: ", 0
	ALIGN
	LDR	r0, StreamState
	CMP	r0, #5
	MOVCS	r0, #5
	ADR	r1, StreamStateStrings
	LDR	r0, [r1, r0, LSL #2]
	ADD	r0, r0, r1
	SWI	XOS_Write0
	SWI	XOS_NewLine

	LDR	r0, NBuffersOnLoan
	DREG	r0, "Buffers on loan = "

	LDR	r0, CallBackRequested
	DREG	r0, "Callback requested = "

	LDR	r0, FileHandle
	DREG	r0, "File handle = "

	LDR	r0, NBuffersTotal
	DREG	r0, "Total buffers = "

	LDR	r0, BufferSize
	DREG	r0, "Buffer size = "

	LDR	r0, MPEGControlStreamHandle
	DREG	r0, "Control stream handle = "

	LDR	r0, CurrentPTR
	DREG	r0, "Current PTR = "

	LDR	r0, EndPTR
	DREG	r0, "End PTR = "

	LDR	r0, FreeBufferListHeadPtr
	DREG	r0, "Free buffer list = "

	EXIT

StreamStateStrings
	&	StringDormant-StreamStateStrings
	&	StringActive-StreamStateStrings
	&	StringFinished-StreamStateStrings
	&	StringClosing-StreamStateStrings
	&	StringError-StreamStateStrings
	&	StringUnknown-StreamStateStrings

StringDormant	=	"Dormant", 0
StringActive	=	"Active", 0
StringFinished	=	"Finished", 0
StringClosing	=	"Closing", 0
StringError	=	"Error", 0
StringUnknown	=	"Unknown", 0
	ALIGN

; **************************************************************************
;
;       OpenStream - Open VSP stream
;
; in:   r0 = flags
;       r1 -> stream identification string, of the form "<pathname> <parameters>"
;       r2 = MPEG control stream handle
;
; out:  r0 = VSP stream handle
;

OpenStream Entry "r1-r2"
	LDR	lr, StreamState
	TEQ	lr, #StreamState_Dormant
	BNE	%FT90				; stream already open

	MOV	r0, #OSFind_ReadFile		; try to open (must be existing file)
	SWI	XOS_Find
	EXIT	VS				; return error if open failed

	STR	r0, FileHandle
	STR	r2, MPEGControlStreamHandle
	MOV	lr, #0
	STR	lr, NBuffersTotal		; no buffers allocated yet
	STR	lr, NBuffersOnLoan		; no buffers free either
	STR	lr, CurrentPTR			; starting ptr

	MOV	r1, r0
	MOV	r0, #OSArgs_ReadEXT
	SWI	XOS_Args
	BVS	%FT80
	STR	r2, EndPTR

; eventually read -buffersize and -nbuffers from stream id string

	MOV	lr, #StreamState_Active		; indicate active before allocating buffers
	STR	lr, StreamState			; so CloseStream will work
	LDR	r0, =DefaultNBuffers
	LDR	r3, =DefaultBufferSize
	STR	r3, BufferSize

	BL	AllocateBuffers
	BVS	%FT80				; exit closing stream

	BL	GenerateCallBack

	MOV	r0, wp				; handle of our wp for now
	CLRV
	EXIT

; error allocating buffers or reading extent, so free up resources

80
	Push	"r0"
	MOV	r0, #0
	MOV	r1, wp
	BL	CloseStream
	Pull	"r0"
	SETV
	EXIT

90
	ADRL	r0, ErrorBlock_StreamActive
	SETV
	EXIT

; **************************************************************************
;
;       CloseStream - Close the stream
;
; in:   r0 = flags
;       r1 = VSP stream handle
;

CloseStream Entry "r0,r1"
	BL	CheckStreamHandle		; check handle valid
	STRVS	r0, [sp]
	EXIT	VS				; return error if not

	MOV	lr, #StreamState_Closing	; indicate closing, so any further callbacks will free buffers
	STR	lr, StreamState			; rather than filling them

	BL	FreeBuffers			; free all

	MOV	r0, #0
	LDR	r1, FileHandle
	STR	r0, FileHandle			; zero file handle
	TEQ	r1, #0
	SWINE	XOS_Find			; close file if there is one (there should be)

        CLRV
        EXIT

; **************************************************************************
;
;	CheckEndOfStream - Check for end of stream
;
; in:	r0 = flags (zero for now)
;	r1 = VSP stream handle
;
; out:	r0 = 0 => not end-of-stream
;	     1 => end-of-stream

CheckEndOfStream Entry
	BL	CheckStreamHandle
	EXIT	VS				; return error if handle invalid

	LDR	lr, StreamState
	TEQ	lr, #StreamState_Error		; if we've had a background error
	ADREQ	r0, BackgroundErrorBlock	; then return it from the CheckEndOfStream call
	BEQ	%FT90

	TEQ	lr, #StreamState_Finished
	MOVEQ	r0, #1				; if finished, return 1
	MOVNE	r0, #0				; else return 0
	CLRV
	EXIT

90
	SETV
	EXIT

; **************************************************************************
;
;       SetSpeed - Set speed of play on MPEG stream
;
; in:   r0 = flags
;       r1 = VSP stream handle
;       r2 = speed indicator
;              0    = paused
;              1    = normal speed
;              2-8  = 1/2 to 1/8 slow motion
;
; out:  -
;

SetSpeed Entry

; ignore it for now (maybe forever on a flow-controlled system like this)

        CLRV
        EXIT

; **************************************************************************
;
;	SetPosition - Set position in file
;
; in:	r0 = flags
;	r1 = VSP stream handle
;	r2 = position indicator:
;		r2+0 = position indicator type
;			0 => r2+4 = byte offset in file (bits 0..31)
;			     r2+8 = -------""---------- (bits 32..63)
;			others yet to be defined
;
; out:	All registers preserved?
;	NB it clears any background error condition (if a valid stream and position type)
;

SetPosition Entry "r1"
	BL	CheckStreamHandle
	EXIT	VS				; return error if stream handle invalid

	LDR	lr, [r2, #0]			; get position type
	TEQ	lr, #0				; only recognise byte offset position type
	BNE	%FT90

	LDR	lr, [r2, #4]
	STR	lr, CurrentPTR			; store new current PTR

	LDR	r1, EndPTR
	CMP	lr, r1				; if new pointer >= end
	MOVCS	lr, #StreamState_Finished	; then mark as finished
	MOVCC	lr, #StreamState_Active		; else mark as active
	STR	lr, StreamState
	CLRV
	EXIT

90
	ADRL	r0, ErrorBlock_UnknownPositionType
	SETV
	EXIT

; **************************************************************************
;
;	FreeBuffer - Called by MPEG Control to free a buffer
;
; in:	r0 = flags (normally zero)
;	r1 = reserved (currently zero)
;	r2 -> buffer descriptor
;
; out:	All registers preserved
;

FreeBuffer Entry "r0"
	MOV	lr, pc
	ORR	lr, lr, #I_bit
	TEQP	lr, #0				; disable IRQs round update to list

	LDR	lr, FreeBufferListHeadPtr
	STR	lr, [r2, #BufferDescriptor_Link] ; this->link = head
	STR	r2, FreeBufferListHeadPtr	; head = this
	LDR	lr, NBuffersOnLoan
	SUB	lr, lr, #1			; decrement count of buffers on loan
	STR	lr, NBuffersOnLoan

	BL	GenerateCallBack		; ask for callback, with IRQs off
	EXITS

; **************************************************************************
;
;	ReadPosition - Read position in file
;
; in:	r0 = flags
;	r1 = VSP stream handle
;	r2 = position indicator:
;		r2+0 = type of position indicator to store in block
;			0 => store at r2+4 the byte offset in file (bits 0..31)
;			     store at r2+8 -----------""---------- (bits 32..63)
;			others yet to be defined
;
; out:	All registers preserved
;

ReadPosition Entry "r1"
	BL	CheckStreamHandle
	EXIT	VS				; return error if stream handle invalid

	LDR	lr, [r2, #0]			; get position type
	TEQ	lr, #0				; only recognise byte offset position type
	BNE	%FT90

	LDR	lr, CurrentPTR
	STR	lr, [r2, #4]
	MOV	lr, #0				; RISC OS PTRs are only 32 bit
	STR	lr, [r2, #8]
	CLRV
	EXIT

90
	ADRL	r0, ErrorBlock_UnknownPositionType
	SETV
	EXIT

; **************************************************************************
;
;	CheckStreamHandle - Check stream handle is valid and stream is open
;
; in:	r1 = VSP stream handle
;
; out:  If OK, all registers preserved, else r0->error and VS
;

CheckStreamHandle Entry
	TEQ	r1, wp
	BNE	%FT90

	LDR	lr, StreamState
	TEQ	lr, #StreamState_Dormant	; if dormant
	TEQNE	lr, #StreamState_Closing	; or already closing
	BEQ	%FT90				; then no file open, so bad handle
	EXIT

90
	ADRL	r0, ErrorBlock_BadHandle
	SETV
	EXIT

; **************************************************************************
;
;	GenerateCallBack - Ask for a callback if one not already requested
;
; in:	Either IRQs are disabled, or there aren't any buffers on loan that might cause reentry (ie from OpenStream)
; out:	-

GenerateCallBack Entry "r0,r1"
	LDR	lr, CallBackRequested		; is callback already requested?
	TEQ	lr, #0				; if so, then exit
	EXIT	NE				; (because we're in SVC mode, it can't go off before we return)

	MOV	lr, #1
	STR	lr, CallBackRequested		; indicate one requested

	ADR	r0, CallBackRoutine
	MOV	r1, wp
	SWI	XOS_AddCallBack
	EXIT

; **************************************************************************
;
;	CallBackRoutine - CallBack routine to fill (or free buffers)
;	NB Can't be reentered
;
; in:	-
; out:	-
;

debug	SETL	{FALSE}

CallBackRoutine Entry
	LDR	lr, StreamState
	TEQ	lr, #StreamState_Closing
	BNE	%FT10

; closing, so free buffers

	DLine	"Freeing buffers in callback"

	BL	FreeBuffers
	B	%FT70

10
	TEQ	lr, #StreamState_Active			; if not active, ie dormant (shouldn't happen) or finished or error,
	BNE	%FT70					; then just exit

	Push	"r0-r4"
20
	LDR	r4, CurrentPTR				; if reached end of data
	LDR	lr, EndPTR
	SUBS	r3, lr, r4				; number of bytes left to do
	MOVLS	lr, #StreamState_Finished		; then mark as finished
	STRLS	lr, StreamState
	BLS	%FT60					; and exit

	MOV	r0, pc
	ORR	lr, r0, #I_bit				; disable IRQs while we extract head of list
	TEQP	lr, #0

	LDR	r1, FreeBufferListHeadPtr
	TEQ	r1, #0
	LDRNE	lr, [r1, #BufferDescriptor_Link]
	STRNE	lr, FreeBufferListHeadPtr
	LDRNE	lr, NBuffersOnLoan
	ADDNE	lr, lr, #1
	STRNE	lr, NBuffersOnLoan

	TEQP	r0, #0					; restore IRQ state

	TEQ	r1, #0					; if no more free buffers, then exit
	BEQ	%FT60

	DReg	lr, "Buffers on loan now = "

	MOV	lr, #0
	STR	lr, [r1, #BufferDescriptor_Link]

	LDR	lr, BufferSize
	CMP	r3, lr					; if more than buffer size
	MOVHI	r3, lr					; then limit it to buffer size
	STR	r3, [r1, #BufferDescriptor_Length]

	LDR	r2, [r1, #BufferDescriptor_Start]
	DReg	r2, "About to do OS_GBPB to address ",cc
	DReg	r4, " from PTR "

	Push	"r1"
	LDR	r1, FileHandle
	MOV	r0, #OSGBPB_ReadFromGiven
	SWI	XOS_GBPB
	Pull	"r1"
	MOVVS	r2, r1					; if error then point r2 at buffer descriptor
	BVS	%FT90					; then copy error away and return buffer descriptor
	STRVC	r4, CurrentPTR				; update current ptr

	DLine	"Issuing MPEGControl_FullBuffers"

	MOV	r0, #0
	MOV	r2, r1					; r2 -> buffer descriptor
	LDR	r1, MPEGControlStreamHandle
	SWI	XMPEGControl_FullBuffers		; ignore errors?
	BVC	%BT20
	B	%FT90

60
	Pull	"r0-r4"
70
	MOV	lr, #0
	STR	lr, CallBackRequested
	EXIT

90
	ADR	r1, BackgroundErrorBlock
	ADD	r3, r1, #?BackgroundErrorBlock
	LDR	lr, [r0], #4				; get error number
	STR	lr, [r1], #4
92
	LDRB	lr, [r0], #1				; copy zero-terminated error string
	STRB	lr, [r1], #1
	TEQ	lr, #0
	BEQ	%FT94
	EORS	lr, r1, r3				; have we overrun block?
	BNE	%BT92					; no, so loop

	STRB	lr, [r3, #-1]				; terminate block properly with zero
94
	BL	FreeBuffer				; return buffer descriptor to our free list

	MOV	lr, #StreamState_Error			; indicate background error
	STR	lr, StreamState
	B	%BT60					; exit callback


debug	SETL	{FALSE}

; **************************************************************************
;
;       AllocateBuffers - Allocate buffers and buffer descriptors
;
; in:   r0 = number of buffers to allocate
;	r3 = size of buffers to allocate
;
; out:	-

debug	SETL	{FALSE}

AllocateBuffers Entry "r0,r2,r4,r5"
	DLine	"Entered AllocateBuffers"
	DReg	r0, "Number of buffers to allocate = "
	DReg	r3, "...of size "
	MOV	r5, r0
10
	DReg	r5, "Number still to do = "
	SUBS	r5, r5, #1				; decrement number of buffers to allocate (V:=0)
	EXIT	CC					; if no more, then exit (VC)


	Push	"r3"
	DLine	"Claiming buffer descriptor"
	MOV	r0, #ModHandReason_Claim
	MOV	r3, #BufferDescriptorSize		; claim buffer descriptor
	SWI	XOS_Module
	Pull	"r3"
	BVS	%FT90

	MOV	r4, r2
	LDR	lr, NBuffersTotal			; one more buffer descriptor allocated (may not have any data)
	ADD	lr, lr, #1
	STR	lr, NBuffersTotal

	LDR	lr, FreeBufferListHeadPtr
	STR	lr, [r4, #BufferDescriptor_Link]
	STR	r4, FreeBufferListHeadPtr
	STR	r3, [r4, #BufferDescriptor_Length]
	MOV	lr, #0
	STR	lr, [r4, #BufferDescriptor_FreeRoutine]
	LDR	lr, =XVSP_FreeBuffer			; SWI number to call to free buffer
	STR	lr, [r4, #BufferDescriptor_FreeWorkspace]

	DReg	r3, "Claiming actual buffer of size "

	MOV	r0, #ModHandReason_Claim
	SWI	XOS_Module				; claim actual buffer
	MOVVS	r2, #0
	STR	r2, [r4, #BufferDescriptor_Start]	; save pointer to block (or zero) in buffer descriptor before exiting
	BVC	%BT10

	DLine	"Exiting AllocateBuffers with error"

90
	STRVS	r0, [sp]
	EXIT

	LTORG

debug	SETL	{FALSE}

; **************************************************************************
;
;	FreeBuffers - Called by CloseStream or background callback to free all buffers on list
;

FreeBuffers Entry "r0-r2"
10
	MOV	r2, pc
	ORR	lr, r2, #I_bit
	TEQP	lr, #0					; disable IRQs

	LDR	lr, NBuffersTotal			; load total buffers for later
	LDR	r1, FreeBufferListHeadPtr		; check head of list
	TEQ	r1, #0					; if non-zero

	LDRNE	r0, [r1, #BufferDescriptor_Link]	; then find next node
	STRNE	r0, FreeBufferListHeadPtr		; and make that head
	SUBNE	lr, lr, #1				; and decrement total number of buffers allocated
	STRNE	lr, NBuffersTotal

	TEQ	lr, #0					; check if total number of buffers is zero

	MOVEQ	lr, #StreamState_Dormant		; if no buffers left
	STREQ	lr, StreamState				; mark us as dormant

	TEQP	r2, #0					; restore IRQ state

	TEQ	r1, #0					; if we have no buffer to free
	EXIT	EQ					; then exit

	LDR	r2, [r1, #BufferDescriptor_Start]	; find start of actual buffer (if any)
	TEQ	r2, #0					; if we actually allocated the buffer
	MOVNE	r0, #ModHandReason_Free			; then free the buffer
	SWINE	XOS_Module				; (ignore any error from this)

	MOV	r2, r1					; now free buffer descriptor
	MOV	r0, #ModHandReason_Free
	SWI	XOS_Module
	B	%BT10					; go back for some more

; **************************************************************************
;
;	Error messages

ErrorBlock_FileOpen
	&	0
	=	"VSPFile cannot die: a stream is open", 0
	ALIGN

ErrorBlock_BuffersOnLoan
	&	0
	=	"VSPFile cannot die: not all buffers have been returned", 0
	ALIGN

ErrorBlock_StreamActive
	&	0
	=	"VSP stream already active", 0
	ALIGN

ErrorBlock_BadHandle
	&	0
	=	"Invalid VSP stream handle", 0
	ALIGN

ErrorBlock_UnknownPositionType
	&	0
	=	"Unknown stream position specifier type", 0
	ALIGN

; **************************************************************************
;
;       Message stuff


 [ international
CopyError ENTRY "r1-r7"
        BL      open_messagefile
        EXIT    VS
        ADR     r1, MessageFile_Block
        MOV     r2, #0
        LDR     r4, [sp]        ; R1 (parameter) -> R4
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup
        EXIT

message_filename
        DCB     "Resources:$.Resources.ARM600.Messages", 0
        ALIGN

open_messagefile ENTRY "r0-r2"
        LDR     r0, MessageFile_Open
        CMP     r0, #0
        EXIT    NE
        ADR     r0, MessageFile_Block
        ADR     r1, message_filename
        MOV     r2, #0
        SWI     XMessageTrans_OpenFile
        STRVS   r0, [sp]
        EXIT    VS
        MOV     r0, #1
        STR     r0, MessageFile_Open
        EXIT

write_r0_message ENTRY "r0-r7"
        BL      open_messagefile
        STRVS   r0, [sp]
        EXIT    VS
        MOV     r1, r0
        ADR     r0, MessageFile_Block
        MOV     r2, #0
        MOV     r4, #0
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_Lookup
        STRVS   r0, [sp]
        EXIT    VS
10      LDRB    r0, [r2], #1
        CMP     r0, #" "
        SWICS   XOS_WriteC
        STRVS   r0, [sp]
        EXIT    VS
        BCS     %B10
        SWI     XOS_NewLine
        EXIT
 |
write_r0_message ENTRY "r0"
        SWI     XOS_Write0
        STRVS   r0, [sp]
        EXIT
 ]

        InsertDebugRoutines

        END
