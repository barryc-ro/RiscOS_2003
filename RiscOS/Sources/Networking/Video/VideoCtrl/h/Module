/**************************************************************/
/* File   : Module.h                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: The Video Control module performs a number of     */
/*          tasks related to providing a video server neutral */
/*          VOD API to client applications. See 2501,817/FS   */
/*          for details.                                      */
/*                                                            */
/* Author : A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 09-Sep-1999: Created.                             */
/**************************************************************/

#ifndef VideoControl_Module__

  #define VideoControl_Module__

  #include "VideoCtrl.h"

  /* Hold details of protocol modules */

  typedef struct control
  {
    unsigned int id;              /* ID returned by protocol module   */
    unsigned int protocol;        /* Protocol SWI base currently used */
    unsigned int flags;           /* Flags for that protocol module   */

  } control;

  /* Packed amalgamation of all vc_options (VCAPI.h) items, used to */
  /* store the actual per-session settings.                         */

  typedef struct session_options
  {
    unsigned int      mute           :1;
    unsigned int      video_only     :1;
    unsigned int      audio_only     :1;
    unsigned int      ntsc           :1;
    unsigned int      macrovision    :1;
    unsigned int      no_interlace   :1;
    unsigned int      no_mode_change :1;
    unsigned int      no_cls         :1;
    unsigned int      no_palette     :1;
    unsigned int      no_redraw      :1;
    unsigned int      loop           :1;
    unsigned int      demux          :1;

    int               volume;
    vc_audio_channels audio_channel;
    int               log2bpp;
    int               program;
    int               video_stream;
    int               audio_stream;
    int               npt;
    unsigned int      mode_width;
    unsigned int      mode_height;

    struct rectangle
    {
      int x, y;
      int w, h;

    } rectangle;

    struct offsets
    {
      int h, v;

    } offset;

  } session_options;

  /* Hold details of Video Control's clients */

  typedef struct client
  {
    struct client   * next;

    control           ctrl;       /* Protocol module we're using  */
    session_options   opts;       /* Options we're using          */

    int             * modecopy;   /* From OS_ScreenMode 1         */
    char            * palcopy;    /* From ColourTrans_ReadPalette */
    unsigned int      palsize;    /* Size of palcopy block        */
    unsigned int      modenumb;   /* From OS_ScreenMode 1         */
    unsigned int      wimpmode;   /* From Wimp_ReadSysInfo 1      */

    unsigned int      ctrlhand;   /* MPEGControl stream handle    */
    unsigned int      port;       /* UDPv port (0 = default)      */

    int               lastplay;   /* Previous play mode           */

    unsigned          havectrl:1; /* If set, have stream handle   */
    unsigned          havemode:1; /* If set, have mode no./block  */
    unsigned          rstbydsk:1; /* If set, Desktop restore      */

  } client;

  extern client * client_list;    /* List of all clients          */

  /* Offset of protocol module SWIs from the SWI base */

  #define VC_Protocol_Setup           (0u)
  #define VC_Protocol_Options         (1u)
  #define VC_Protocol_Status          (2u)
  #define VC_Protocol_MoreInformation (3u)
  #define VC_Protocol_Play            (4u)
  #define VC_Protocol_TearDown        (5u)

  /* Useful functions */

  client * find_client                (unsigned int id);
  client * find_client_by_protocol_id (unsigned int id);

  void   * module_realloc             (void *, size_t);

#endif /* VideoControl_Module__ */
