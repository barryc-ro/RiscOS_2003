/**************************************************************/
/* File:    VideoCtrl.h                                       */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Video Control exportable API.                     */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 20-Oct-1999: Created.                             */
/**************************************************************/

#ifndef VideoControl_VideoCtrl__
  #define VideoControl_VideoCtrl__

  /* Error messages. We have two chunks allocated currently. */

  #define VIDEOCONTROL_ERROR1_BASE    (0x817600)
  #define VIDEOCONTROL_ERROR2_BASE    (0x817700)

  #define VIDEOCONTROL_PRIVATE_OFFSET (0)
  #define VIDEOCONTROL_PUBLIC_OFFSET  (0x20)

  enum
  {
    vc_ERROR_CLIENT_ID_NOT_FOUND = VIDEOCONTROL_ERROR1_BASE + VIDEOCONTROL_PRIVATE_OFFSET,
    vc_ERROR_NO_PROTOCOL_FOUND,
    vc_ERROR_SWI_NOT_FOUND,
    vc_ERROR_ALREADY_SETUP,
    vc_ERROR_NOT_SETUP_YET,
    vc_ERROR_INDISTINGUISHABLE,
    vc_ERROR_CANNOT_OPEN_CONFIG,
    vc_ERROR_INVALID_CONFIG,
    vc_ERROR_METHOD_MISMATCH,
    vc_ERROR_MESSAGE_NOT_FOUND,

    vc_ERROR_MEMORY_EXHAUSTED    = VIDEOCONTROL_ERROR1_BASE + VIDEOCONTROL_PUBLIC_OFFSET,
    vc_ERROR_IN_PROGRESS,
    vc_ERROR_INVALID_OPTIONS
  };

  /* The following error messages have been reserved for other */
  /* protocol modules.                                         */

  #define RTSP_GENERIC_OFFSET  0x000040 /* 0x817640 to */
  #define RTSP_GENERIC_SIZE    0x00001f /* 0x81765f    */
  #define RTSP_OVS_OFFSET      0x000060 /* 0x817660 to */
  #define RTSP_OVS_SIZE        0x00001f /* 0x81767f    */
  #define MEDIANET_OVS_OFFSET  0x000080 /* 0x817680 to */
  #define MEDIANET_OVS_SIZE    0x00001f /* 0x81769f    */
  #define SVB_GENERIC_OFFSET   0x0000a0 /* 0x8176a0 to */
  #define SVB_GENERIC_SIZE     0x00001f /* 0x8176bf    */
  #define LVF_GENERIC_OFFSET   0x0000c0 /* 0x8176c0 to */
  #define LVF_GENERIC_SIZE     0x00001f /* 0x8176df    */

  /* First off, definitions for protocol modules *only*; to start with, flags */
  /* for R0 in VideoControl_ProtocolRegister                                  */

  #define VC_ProtocolRegister_IHandleMPEG                    (1u<<0)
  #define VC_ProtocolRegister_IDoReducedRateSlowmoForward    (1u<<1)
  #define VC_ProtocolRegister_DoNotResetOrSetSpeed           (1u<<2)
  #define VC_ProtocolRegister_DoNotCallUDPV                  (1u<<3)
  #define VC_ProtocolRegister_OpenStreamFlagsInR5            (1u<<4)

  /* Reason codes and flags for VideoControl_ProtocolNotify */

  #define VideoControlProtocolNotifyResponseReceived         (0)
  #define VideoControlProtocolNotifyMessageReceived          (1)

  #define VC_ProtocolNotify_ResponseReceived_Prepare         (1u<<0)
  #define VC_ProtocolNotify_ResponseReceived_PortInR5        (1u<<1)

  /* Flags for R2 in Protocol_TearDown                       */

  #define VC_TearDown_IgnoreErrors                           (1u<<0)

  /* Now client-end definitions. Flags for R0 in VideoControl_Register */

  #define VC_Register_InheritModeDetailsIfPossible           (1u<<0)

  /* Flags for R0 in VideoControl_Options */

  #define VC_Options_ReadValues                              (1u<<0)

  /* Flags for R0 on exit of VideoControl_Status */

  #define VC_Status_ConnectionEstablished                    (1u<<0)
  #define VC_Status_ResponseReceived                         (1u<<1)
  #define VC_Status_MoreInformationAvailable                 (1u<<2)

  /* Reason codes for VideoControl_MoreInformation */

  #define VC_MoreInformation_Reason_ReadSize                 (0)
  #define VC_MoreInformation_Reason_ReadData                 (1)

  /* Service call reason codes. Service call numbers themselves should */
  /* be in your Global/Services.h.                                     */

  #define VideoControlModuleStarted                          (0)
  #define VideoControlModuleDying                            (1)
  #define VideoControlResponseReceived                       (2)
  #define VideoControlMessageReceived                        (3)
  #define VideoControlSessionTornDown                        (4)

  #define VideoControlProtocolModuleStarted                  (0)
  #define VideoControlProtocolModuleDying                    (1)

  /* A list of known options tags */

  typedef enum vc_tags
  {
    vc_tags_volume = 0,
    vc_tags_audio_channel,
    vc_tags_mute,
    vc_tags_video_only,
    vc_tags_audio_only,
    vc_tags_rectangle,
    vc_tags_reserved,
    vc_tags_ntsc,
    vc_tags_macrovision,
    vc_tags_depth,
    vc_tags_no_interlace,
    vc_tags_no_mode_change,
    vc_tags_no_cls,
    vc_tags_no_palette,
    vc_tags_no_redraw,
    vc_tags_mp2program,
    vc_tags_mp2videostream,
    vc_tags_mp2audiostream,
    vc_tags_npt,
    vc_tags_looping,
    vc_tags_demux,
    vc_tags_control_handle,
    vc_tags_mode_width,
    vc_tags_mode_height,
    vc_tags_play_status,

    vc_tags__highest,
    vc_tags__end = -1

  } vc_tags;

  /* Audio channels */

  typedef enum vc_audio_channels
  {
    vc_audio_stereo = 0,
    vc_audio_dual_left,
    vc_audio_dual_right

  } vc_audio_channels;

  /* Stream demux module selection */

  typedef enum vc_demux
  {
    vc_demux_auto = 0,
    vc_demux_mpeg1,
    vc_demux_mpeg2
  }
  vc_demux;

  /* Playback state (e.g. end-of-stream) */

  typedef enum vc_play_status
  {
    vc_play_status_unknown = 0,
    vc_play_status_streaming,
    vc_play_status_eos
  }
  vc_play_status;

  /* Callers of VideoControl_Options will only know the format of the */
  /* specific items they are setting, so it's safe enough to use      */
  /* something like an int array. For structure, though, you might    */
  /* wish to cast pointers into that array to the vc_options struct   */
  /* below and set values through that.                               */

  typedef struct vc_options
  {
    struct
    {
      vc_tags tag;
      int     parameters;
    }
    header;

    union
    {
      /* Generic entry so the data section can be passed by reference */

      int generic [4];

      /* Volume, from 0 to 256 (off to full), steps of about 0.5dB */

      struct
      {
        int volume;
      }
      volume;

      /* Selection of stereo or dual mono left/right */

      struct
      {
        vc_audio_channels audio_channel;
      }
      audio_channel;

      /* Temporarily muting audio */

      struct
      {
        int mute;
      }
      mute;

      /* Permanently disabling audio (video only) */

      struct
      {
        int video_only;
      }
      video_only;

      /* Permanently disabling video (audio only) */

      struct
      {
        int audio_only;
      }
      audio_only;

      /* Playback rectangle (if hardware supports it), values in pixels */

      struct
      {
        int blx, bly;
        int w,   h;
      }
      rectangle;

      /* Reserved. Do not use. */

      struct
      {
        int reserved1;
        int reserved2;
      }
      reserved;

      /* NTSC mode rather than PAL if non-zero */

      struct
      {
        int ntsc;
      }
      ntsc;

      /* Macrovision anti-taping on if non-zero, else Macrovision bypassed completely */

      struct
      {
        int macrovision;
      }
      macrovision;

      /* Log2bpp of colour depth of mode for playback */

      struct
      {
        int log2bpp;
      }
      depth;

      /* Non-zero to disable interlace */

      struct
      {
        int no_interlace;
      }
      no_interlace;

      /* Non-zero to disable mode changing prior to video playback */

      struct
      {
        int no_mode_change;
      }
      no_mode_change;

      /* Non-zero to disable screen clearing prior to video playback */

      struct
      {
        int no_cls;
      }
      no_cls;

      /* Non-zero to disable palette setting prior to video playback */

      struct
      {
        int no_palette;
      }
      no_palette;

      /* Non-zero to disable redrawing the screen after playback */

      struct
      {
        int no_redraw;
      }
      no_redraw;

      /* Program number in an MPEG 2 transport stream */

      struct
      {
        int program;
      }
      mp2program;

      /* Video stream number within an MPEG 2 program */

      struct
      {
        int stream;
      }
      mp2videostream;

      /* Audio stream number within an MPEG 2 program */

      struct
      {
        int stream;
      }
      mp2audiostream;

      /* Normal play time (read-only) */

      struct
      {
        int npt;
      }
      npt;

      /* Non-zero to try and loop playback */

      struct
      {
        int loop;
      }
      loop;

      /* Stream demux - 0 = auto, 1 = MPEG 1, 2 = MPEG 2 */

      struct
      {
        vc_demux demux;
      }
      demux;

      /* Control handle (read-only) */

      struct
      {
        int control_handle;
      }
      control_handle;

      /* Playback screen mode width */

      struct
      {
        int mode_width;
      }
      mode_width;

      /* Playback screen mode height */

      struct
      {
        int mode_height;
      }
      mode_height;

      /* Playback status (read-only) */

      struct
      {
        vc_play_status play_status;
      }
      play_status;

    } data;

  } vc_options;

#endif /* VideoControl_VideoCtrl__ */

/* In the exported copy of this file, SWI numbers will follow. */

