/**************************************************************/
/* File   : Module.c                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: The Video Control module performs a number of     */
/*          tasks related to providing a video server neutral */
/*          VOD API to client applications. See 2501,817/FS   */
/*          for details.                                      */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 09-Sep-1999: Created.                             */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#include <Global/RISCOS.h>
#include <Global/Services.h>
#include <Global/Upcall.h>
#include <swis.h>
#include <sys/errno.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Enumerate.h"
#include "MoreInfo.h"
#include "MPEGCtrl.h"
#include "Options.h"
#include "Play.h"
#include "Protocol.h"
#include "Register.h"
#include "Setup.h"
#include "Status.h"
#include "TearDown.h"
#include "Utils.h"
#include "VCHdr.h"

#include "Module.h"

/*
 * This macro, when defined, includes the code for the two debugging *-commands
 * You need to enable the commands in the CMHG header file too.
 */

#if CMHG_VERSION < 516

  #define CMHG_CONST

#else

  #define CMHG_CONST const

#endif

/*
 * Turn on to include extra debugging via. *-commands; you will
 * need to modify VCHdr.cmhg too.
 */

#undef TRACE2

/*
 * TinySupport SWIs. This does not work if any library static data
 * is used within the module. This means errno (__errno) and __ctype
 * (as used by any macro call to is.... functions). If you re-enable
 * this SWI call, this module will fail to work at all.
 */

#define NO_TINYSTUBS

#ifdef ROM
  #ifndef NO_TINYSTUBS
    static _kernel_oserror *__ROM;
    #define TinySupport_Share   (0x82c43)
    #define TinySupport_Die     (0x82c41)
  #endif
#endif

/*
 * These are the global variables (see videoctrl.h)
 */

client * client_list = NULL;

#ifndef ROM
  extern int messages_file(void);
#endif

#ifndef ROM
  #ifdef DEFINE_ERRNO
    int __errno;
  #endif
#endif

/* Local statics */

static void * module_wsp                        = NULL;

static bool   callback_pending_flag             = false;
static bool   clibrary_realloc_routine_is_buggy = false;
static bool   upcallv_claimed                   = false;

/* Local functions */

static void              module_check_os_version      (void);
static void              module_tear_down             (void);

static _kernel_oserror * module_claim_upcall_vector   (void);
static _kernel_oserror * module_release_upcall_vector (void);

/**************************************************************/
/* module_check_os_version()                                  */
/*                                                            */
/* Set clibrary_realloc_routine_is_buggy non zero if the OS   */
/* version is sufficiently old, else set it to zero.          */
/*                                                            */
/* See also module_realloc.                                   */
/**************************************************************/

static void module_check_os_version(void)
{
  int os;

  (void) _swix(OS_Byte,
               _INR(0,2) | _OUT(1),

               129,
               0,
               255,

               &os);

  clibrary_realloc_routine_is_buggy = os <= 0xA4 ? true : false;
}

/**************************************************************/
/* module_init()                                              */
/*                                                            */
/* Startup code, usual initialisation entry point stuff.      */
/*                                                            */
/* Parameters: As normal for a CMHG initialisation function.  */
/**************************************************************/

_kernel_oserror * module_init(CMHG_CONST char * cmd_fail, int podule_base, void * pw)
{
  _kernel_oserror * e;

  module_wsp = pw;

  (void) cmd_fail;
  (void) podule_base;

  #ifdef ROM
    #ifndef NO_TINYSTUBS

      __ROM = _swix(TinySupport_Share,
                    _IN(0),

                    pw);

    #endif
  #endif

  #ifdef TRACE
    {
      debug_device dev = TML_OUTPUT;

      debug_initialise("VideoCtrl", "ADFS::4.$.VCdebug", NULL);
      debug_atexit();
      debug_set_screen_cornering(FALSE);
      debug_set_unbuffered_files(TRUE);
      debug_set_device(dev);
    }
  #endif

  module_check_os_version();

  #ifndef ROM

    e = _swix(ResourceFS_RegisterFiles,
              _IN(0),

              messages_file());

    if (e != NULL) return e;

  #endif

  if (getenv(Module_Title "$Path"))
  {
    e = messages_file_open(Module_Title ":Messages");
  }
  else
  {
    e = messages_file_open("Resources:$.Resources.VideoCtrl." "VideoCtrl" ".Messages");
  }

  if (e != NULL)
  {
    #ifndef ROM

      (void) _swix(ResourceFS_DeregisterFiles,
                   _IN(0),

                   messages_file());

    #endif

    return e;
  }

  if (
       _swix(OS_AddCallBack,
             _INR(0,1),

             callback_entry,
             pw)

       == NULL
     )
     callback_pending_flag = true;

  /* Claim UpCallV to see MPEG UpCalls */

  e = module_claim_upcall_vector();
  return e;
}

/**************************************************************/
/* module_kill()                                              */
/*                                                            */
/* Closedown code, usual finalisation entry point stuff.      */
/*                                                            */
/* Parameters: As normal for a CMHG finalisation function.    */
/**************************************************************/

_kernel_oserror * module_kill(int fatal, int podule, void * pw)
{
  (void) fatal;
  (void) podule;

  /* Ensure pending callbacks are cancelled */

  if (callback_pending_flag == true)
  {
    (void) _swix(OS_RemoveCallBack,
                 _INR(0,1),
                 callback_entry,
                 pw);

    callback_pending_flag = false;
  }

  /* Get rid of the UpCallV handler */

  module_release_upcall_vector();

  /* Shut down everything else */

  module_tear_down();
  protocol_free_protocols();
  register_free_clients();
  messages_file_close();

  #ifndef ROM

    (void) _swix(ResourceFS_DeregisterFiles,
                 _IN(0),

                 messages_file());

  #endif

  (void) _swix(OS_ServiceCall,
               _INR(0,2),

               VideoControlModuleDying,
               Service_VideoControl,
               Module_VersionNumber);

  #ifdef ROM
    #ifndef NO_TINYSTUBS
      if(!__ROM) _swix(TinySupport_Die, 0);
    #endif
  #endif

  return NULL;
}

/**************************************************************/
/* module_claim_upcall_vector()                               */
/*                                                            */
/* Claims the UpCall vector for the purpose of receiving the  */
/* MPEG UpCall. A locking flag ensures multiple calls are     */
/* dealt with correctly.                                      */
/**************************************************************/

_kernel_oserror * module_claim_upcall_vector(void)
{
  if (!upcallv_claimed)
  {
    _kernel_oserror * e;

    e = _swix(OS_Claim,
              _INR(0,2),

              UpCallV,
              upcall_entry,
              module_wsp);

    if (e == NULL) upcallv_claimed = true;
    return e;
  }

  return NULL;
}

/**************************************************************/
/* module_release_upcall_vector()                             */
/*                                                            */
/* Releases the UpCall vector. A locking flag ensures         */
/* multiple calls are dealt with correctly.                   */
/**************************************************************/

_kernel_oserror * module_release_upcall_vector(void)
{
  if (upcallv_claimed)
  {
    _kernel_oserror * e;

    e = _swix(OS_Release,
              _INR(0,2),

              UpCallV,
              upcall_entry,
              module_wsp);

    if (e == NULL) upcallv_claimed = false;
    return e;
  }

  return NULL;
}

/**************************************************************/
/* callback_handler()                                         */
/*                                                            */
/* Standard callback handler.                                 */
/*                                                            */
/* Parameters: As normal for a CMHG callback handler.         */
/**************************************************************/

int callback_handler(_kernel_swi_regs * r, void * pw)
{
  (void) pw;
  (void) r;

  if (callback_pending_flag == false)
  {
    return 1;
  }

  callback_pending_flag = false;

  _swix(OS_ServiceCall,
        _INR(0,2),

        VideoControlModuleStarted,
        Service_VideoControl,
        Module_VersionNumber);

  return 1;
}

/**************************************************************/
/* upcall_handler()                                           */
/*                                                            */
/* General UpCall handler.                                    */
/*                                                            */
/* Parameters: As normal for a CMHG generic veneer.           */
/**************************************************************/

_kernel_oserror * upcall_handler(_kernel_swi_regs * r, void * pw)
{
  (void) pw;
  (void) r;

  if (r->r[0] == UpCall_MPEG)
  {
    client * c = client_list;
//    _kernel_oserror * e;
//    session         * s;

    dprintf(("", "upcall_handler: Got UpCall_MPEG, flags %08x, for handle %08x - reason code = %d\n",r->r[1],r->r[2],r->r[3]));

    if (
         r->r[3] == UpCall_MPEG_SubReason_EOS   ||
         r->r[3] == UpCall_MPEG_SubReason_Reset ||
         r->r[3] == UpCall_MPEG_SubReason_Speed
       )
    {
      while (c)
      {
        if (c->havectrl && c->ctrlhand == r->r[2])
        {
          c->opts.play_status = (r->r[3] == UpCall_MPEG_SubReason_EOS) ? vc_play_status_eos : vc_play_status_streaming;
          break;
        }

        c = c->next;
      }
    }
  }

  return NULL;
}

/**************************************************************/
/* swi_handler()                                              */
/*                                                            */
/* Simple SWI dispatch table.                                 */
/*                                                            */
/* Parameters: As normal for a CMHG SWI handler.              */
/**************************************************************/

_kernel_oserror * swi_handler(int swi_no, _kernel_swi_regs * r, void * pw)
{
  (void) pw;

  switch(swi_no)
  {
    case VideoControl_Register           - VideoControl_00: /* VideoControl_Register           */
      return(register_register(r));                         /* Register.c                      */

    case VideoControl_Setup              - VideoControl_00: /* VideoControl_Setup              */
      return(setup_setup(r));                               /* Setup.c                         */

    case VideoControl_Options            - VideoControl_00: /* VideoControl_Options            */
      return(options_options(r));                           /* Options.c                       */

    case VideoControl_Status             - VideoControl_00: /* VideoControl_Status             */
      return(status_status(r));                             /* Status.c                        */

    case VideoControl_MoreInformation    - VideoControl_00: /* VideoControl_MoreInformation    */
      return(moreinfo_more_information(r));                 /* MoreInfo.c                      */

    case VideoControl_Play               - VideoControl_00: /* VideoControl_Play               */
      return(play_play(r));                                 /* Play.c                          */

    case VideoControl_TearDown           - VideoControl_00: /* VideoControl_TearDown           */
      return(teardown_tear_down(r, 0));                     /* TearDown.c                      */

    case VideoControl_Deregister         - VideoControl_00: /* VideoControl_Deregister         */
      return(register_deregister(r));                       /* in Register.c                   */

    case VideoControl_EnumerateProtocols - VideoControl_00: /* VideoControl_EnumerateProtocols */
      return(enumerate_enumerate(r));                       /* in Enumerate.c                  */

    case VideoControl_ProtocolRegister   - VideoControl_00: /* VideoControl_ProtocolRegister   */
      return (protocol_register(r));                        /* in Protocol.c                   */

    case VideoControl_ProtocolDeregister - VideoControl_00: /* VideoControl_ProtocolDeregister */
      return (protocol_deregister(r));                      /* in Protocol.c                   */

    case VideoControl_ProtocolNotify     - VideoControl_00: /* VideoControl_ProtocolNotify     */
      return (protocol_notify(r));                          /* in Protocol.c                   */

    case VideoControl_ProtocolOptions    - VideoControl_00: /* VideoControl_ProtocolOptions    */
      return (protocol_options(r));                         /* in Protocol.c                   */

    default:
      return error_BAD_SWI;
  }
}

/**************************************************************/
/* find_client()                                              */
/*                                                            */
/* Given a client ID locate the session control block for     */
/* that client in the main list.                              */
/*                                                            */
/* Parameters: Client ID.                                     */
/*                                                            */
/* Returns:    Pointer to the associated session control      */
/*             block, or NULL if none is found.               */
/**************************************************************/

client * find_client(unsigned int id)
{
  client * c;

  /* Try and find the client we are after */

  for (c = client_list; c; c = c->next)
  {
    if (id == (unsigned int) c) return c;
  }

  return NULL;
}

/**************************************************************/
/* find_client_by_protocol_id()                               */
/*                                                            */
/* Given a protocol module session ID locate the associated   */
/* session control block in the main list.                    */
/*                                                            */
/* Parameters: Protocol session ID (a protocol module returns */
/*             this in R1 when Protocol_Setup is called by    */
/*             Video Control).                                */
/*                                                            */
/* Returns:    Pointer to the associated session control      */
/*             block, or NULL if none is found.               */
/**************************************************************/

client * find_client_by_protocol_id(unsigned int id)
{
  client * c;

  /* Try and find the client we are after */

  for (c = client_list; c; c = c->next)
  {
    if (id == c->ctrl.id) return c;
  }

  return NULL;
}

#ifdef TRACE2

  /**************************************************************/
  /* clients_list()                                             */
  /*                                                            */
  /* Small debugging function; also see VCHdr.cmhg to activate  */
  /* this. Lists registered clients.                            */
  /**************************************************************/

  static _kernel_oserror * clients_list(void)
  {
    client * list;

    if (client_list == NULL)
    {
      printf("No clients are registered\n");
    }
    else
    {
      size_t       len;
      const char * info;

      printf("Client   PM SID   SWI base   Active\n");

      for (len = 0; len < 9; ++len)
      {
        printf("========");
      }

      printf("=======\n");

      for (list = client_list; list; list = list->next)
      {
        control * c = &list->ctrl;

        info = c->protocol != 0 ? protocol_get_info_from_swi_base(c->protocol) : NULL;
        if (info == NULL) info = "-";

        printf("%08X %08X %08X   %s\n",
               (int) list,
               c->id,
               c->protocol,
               info);
      }
    }

    return NULL;
  }

#endif

/**************************************************************/
/* command_line_handler()                                     */
/*                                                            */
/* Straightforward command handler.                           */
/*                                                            */
/* Parameters: As normal for a CMHG command line handler.     */
/**************************************************************/

_kernel_oserror * command_line_handler(CMHG_CONST char * a, int ac, int cmd_no, void * pw)
{
  (void) a;
  (void) ac;
  (void) pw;

  switch (cmd_no)
  {
    case CMD_VideoControlProtoShow:
      return protocol_list();

    #ifdef TRACE2
      case CMD_VideoControlClients:
        return clients_list();
    #endif

    default:
      break;
  }

  return NULL;
}

/**************************************************************/
/* service_handler()                                          */
/*                                                            */
/* General service call handler.                              */
/*                                                            */
/* Parameters: As normal for a CMHG service call handler.     */
/**************************************************************/

void service_handler(int service_number, _kernel_swi_regs * r, void * pw)
{
  (void) pw;

  dprintf(("", "service_handler: Called for %08x (%d, %d)\n", service_number, r->r[0], r->r[2]));

  if (service_number == Service_Standby)
  {
    if (r->r[0] & (1u<<0)) module_tear_down();
  }
}

/**************************************************************/
/* module_tear_down()                                         */
/*                                                            */
/* Tear down all sessions, e.g. because of module death or    */
/* entering standby on an STB.                                */
/*                                                            */
/* Any errors from SWI calls are ignored.                     */
/**************************************************************/

static void module_tear_down(void)
{
  client * c = client_list;

  while (c)
  {
    /* If this client has a protocol module associated, */
    /* tear the session down issue an appropriate       */
    /* service call so client's can tell what happened. */

    if (c->ctrl.protocol != 0)
    {
      _kernel_swi_regs regs;

      regs.r[0] = 0;
      regs.r[1] = (int) c;

      (void) teardown_tear_down(&regs, VC_TearDown_IgnoreErrors);

      _swix(OS_ServiceCall,
            _INR(0,2),

            VideoControlSessionTornDown,
            Service_VideoControl,
            (int) c);
    }

    c = c->next;
  }
}

/**************************************************************/
/* module_realloc()                                           */
/*                                                            */
/* RISC OS 3.1's SVC mode realloc is broken, so here's our    */
/* own version. Use it if clibrary_realloc_routine_is_buggy   */
/* is set after calling module_check_os_version.              */
/*                                                            */
/* Parameters: As realloc.                                    */
/*                                                            */
/* Returns:    As realloc.                                    */
/**************************************************************/

void * module_realloc(void * ptr, size_t size)
{
  dprintf(("", "module_realloc(%p, %d)\n", ptr, size));

  if (clibrary_realloc_routine_is_buggy == false) return realloc(ptr, size);

  if (ptr == NULL)
  {
    return malloc(size);
  }

  if (size == 0)
  {
    free(ptr);
    return NULL;
  }
  else
  {
    const int    * rma_block = ptr;
    const size_t   newsize   = size - (rma_block[-1] - 4);
    char         * newptr;

    if (
         _swix(OS_Module,
               _IN(0) | _INR(2,3) | _OUT(2),

               0xD,
               ptr,
               newsize,

               &newptr)

         != NULL
       )
       return NULL;

     return newptr;
  }
}
