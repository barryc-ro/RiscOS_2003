/**************************************************************/
/* File:    TearDown.c                                        */
/*          (C) 1999 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Implement VideoControl_TearDown.                  */
/*                                                            */
/* Author : A.D.Hodgkinson. Based on URL_Fetcher source by    */
/*          S.N.Brodie and P. Wain.                           */
/*                                                            */
/* History: 04-Nov-1999: Created.                             */
/**************************************************************/

#include <stdio.h>
#include <string.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Module.h"
#include "MPEGCtrl.h"
#include "Utils.h"

#include "TearDown.h"

/**************************************************************/
/* teardown_tear_down()                                       */
/*                                                            */
/* Implement VideoControl_TearDown. See the Video Control     */
/* specification, 2501,817/FS, for more.                      */
/*                                                            */
/* Parameters: Register block for VideoControl_TearDown call; */
/*                                                            */
/*             R2 value for Protocol_TearDown.                */
/**************************************************************/

_kernel_oserror * teardown_tear_down(_kernel_swi_regs * r, unsigned int r2)
{
  _kernel_oserror * e    = NULL;
  client          * list = find_client(r->r[1]);
  int               or1;
  int               or2;

  dprintf(("", "teardown_tear_down: Called for %08X\n", r->r[1]));

  /* Return an error if not registered */

  if (list == NULL)
  {
    return make_error(vc_ERROR_CLIENT_ID_NOT_FOUND, 0);
  }

  if (list->ctrl.protocol == 0)
  {
    _kernel_oserror * e = make_error(vc_ERROR_NOT_SETUP_YET, 0);
    sprintf(strchr(e->errmess, '\0'), " (%08x)", r->r[1]);

    return e;
  }

  /* Shut down the MPEG software and restore the screen display */

  if (list->ctrlhand != 0 && (list->ctrl.flags & VC_ProtocolRegister_IHandleMPEG) == 0)
  {
    mpegctrl_restore_mpeg(list);
    mpegctrl_restore_display(list);
  }

  /* Call the protocol module */

  or1     = r->r[1];
  or2     = r->r[2];
  r->r[1] = list->ctrl.id;
  r->r[2] = r2;
  e       = _kernel_swi(list->ctrl.protocol + VC_Protocol_TearDown, r, r);
  r->r[1] = or1;
  r->r[2] = or2;

  /* Clear the protocol SWI base */

  list->ctrl.protocol = 0;

  dprintf(("", "teardown_tear_down: Exitting with %p\n", e));

  return e;
}
