/**************************************************************/
/* File:    MPEGCtrl.c                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Handle the MPEG system and display setup.         */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 15-Dec-1999 (ADH): Created.                       */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

#include <Global/RISCOS.h>
#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <UDPv.h> /* Exported by UDPv's !MkExport */

#include "Module.h"
#include "Options.h"
#include "Utils.h"

#include "MPEGCtrl.h"

/* Local structures */

typedef struct mpegctrl_videoblock
{
  unsigned int format; /* Zero */
  unsigned int flags;
  int          screen_mode;
  int          reserved[4];
  unsigned int blanked_sequences;
  unsigned int blanked_fields;
  unsigned int scaling_type;

  union
  {
    struct
    {
      unsigned int data[4];
    }
    misc;

    struct
    {
      unsigned int flags;
      unsigned int aspect;
      unsigned int signalling_flags;
      unsigned int viewing_mode;
    }
    free;

    struct
    {
      unsigned int aspect_ratio;
      unsigned int width;
      int          centre_x;
      int          centre_y;
    }
    fixedw;

    struct
    {
      unsigned int aspect_ratio;
      unsigned int height;
      int          centre_x;
      int          centre_y;
    }
    fixedh;

    struct
    {
      unsigned int width;
      unsigned int height;
      int          centre_x;
      int          centre_y;
    }
    fixedwh;
  }
  scaling;

} mpegctrl_videoblock;

typedef enum mpegctrl_dcms
{
  dcms_both = 0,
  dcms_left,
  dcms_right

} mpegctrl_dcms;

typedef struct mpegctrl_audioblock
{
  unsigned int  format; /* Zero */
  unsigned int  flags;
  mpegctrl_dcms dcms;

} mpegctrl_audioblock;

/* Local variables */

static unsigned int palette1[2]  = {
                                     0xFFFFFF00, 0x000000FF
                                   };

static unsigned int palette2[4] =  {
                                     0x00000000, 0x88888800, 0xFFFFFF00, 0x000000FF
                                   };

static unsigned int palette4[16] = {
                                     0x00000000, 0x55555500, 0xAAAAAA00, 0xFFFFFF00,
                                     0x0000FF00, 0x00FF0000, 0x00FFFF00, 0xFF000000,
                                     0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF,
                                     0x000000FF, 0x000000FF, 0x000000FF, 0x000000FF
                                   };

static unsigned int palette8[8]  = {
                                     0x11111100, 0x22222200,
                                     0x00004400, 0x44000000,
                                     0x00008800, 0x00440000,
                                     0x00880000, 0x88000000
                                   };

static unsigned int palette16[8] = {
                                     0x00000800, 0x00081000,
                                     0x08102100, 0x10214210,
                                     0x21428400, 0x42840000,
                                     0x84000000, 0x00000000
                                   };

static unsigned int palette32[8] = {
                                     0x010101FF, 0x02020200,
                                     0x04040400, 0x08080800,
                                     0x10101000, 0x20202000,
                                     0x40404000, 0x80808000
                                   };

/* Local functions */

static _kernel_oserror * mpegctrl_setup_mode                (client * c);
static _kernel_oserror * mpegctrl_setup_palette             (client * c);
static void              mpegctrl_assemble_audio_parameters (client * c, mpegctrl_audioblock * a);
static void              mpegctrl_assemble_video_parameters (client * c, mpegctrl_videoblock * v);

/**************************************************************/
/* mpegctrl_setup_display()                                   */
/*                                                            */
/* Set the palette, screen mode etc. ready for playback,      */
/* making sure the options settings in the given client       */
/* structure are obeyed.                                      */
/*                                                            */
/* Parameters: Pointer to a client structure containing       */
/*             options governing what action is taken here.   */
/**************************************************************/

_kernel_oserror * mpegctrl_setup_display(client * c)
{
  _kernel_oserror * e;

  dprintf(("", "mpegctrl_setup_display: Called\n"));

  utils_store_error(e = mpegctrl_setup_mode(c));

  if (e != NULL)
  {
    return utils_recall_error();
  }

  utils_store_error(mpegctrl_setup_palette(c));

  if (e != NULL)
  {
    mpegctrl_restore_display(c);
    return utils_recall_error();
  }

  /* Finished */

  return NULL;
}

/**************************************************************/
/* mpegctrl_restore_display()                                 */
/*                                                            */
/* Restore screen mode from the given client structure, if    */
/* the options settings allow screen mode changing.           */
/*                                                            */
/* Parameters: Pointer to a client structure containing       */
/*             options governing what action is taken here.   */
/**************************************************************/

_kernel_oserror * mpegctrl_restore_display(client * c)
{
  _kernel_oserror * e = NULL;

  if (!c->opts.no_redraw && c->havemode)
  {
    c->havemode = 0;

    if (c->rstbydsk)
    {
      /* Reset for the Desktop: Set the Wimp mode */

      _swix(Wimp_SetMode,
            _IN(0),

            c->wimpmode);

      /* Cancel the pending command window */

      _swix(Wimp_CommandWindow,
            _IN(0),

            -1);

      if (e != NULL) return e;
    }
    else
    {
      /* Reset for single tasking modes; set the normal screen mode */

      if (c->modecopy != NULL)
      {
        e = _swix(OS_ScreenMode,
                  _INR(0,1),

                  0,
                  c->modecopy);

        free(c->modecopy), c->modecopy = NULL;
      }
      else
      {
        e = _swix(OS_ScreenMode,
                  _INR(0,1),

                  0,
                  c->modenumb);
      }

      if (e != NULL) return e;
    }
  }

  /* Restore the palette if possible */

  if (!c->opts.no_redraw && c->palcopy != NULL && c->palsize != 0)
  {
    unsigned int cols[3] = { 1, 2, 3 }; /* <crusty>Ooough</crusty> */

    /* ColourTrans_WritePalette has trouble in > 256 colour modes */
    /* and there are big problems on STB 3, so we're forced to    */
    /* call PaletteV directly.                                    */

//    e = _swix(ColourTrans_WritePalette,
//              _INR(0,4),
//
//              -1,
//              -1,
//              c->palcopy,
//              0,
//              1u<<1);

    e = _swix(OS_CallAVector,
              _INR(0,4) | _IN(9),

              0,
              1u | (24u<<24),        /* Write 1 entry of type 24 (border)       */
              c->palcopy,            /* Read from the start of the block        */
              0,
              8,                     /* Reason code 8: Block write              */
              PaletteV);

    if (e == NULL)
    {
      e = _swix(OS_CallAVector,
                _INR(0,4) | _IN(9),

                cols,
                3u | (25u<<24),      /* Write 3 entries of type 25 (mouse)      */
                c->palcopy + 4,      /* Write from after the border             */
                0,
                8,                   /* Reason code 8: Block write              */
                PaletteV);

    }

    if (e == NULL)
    {
      e = _swix(OS_CallAVector,
                _INR(0,4) | _IN(9),

                0,
                256u | (16u<<24),    /* Write 256 entries of type 16 (flashing) */
                c->palcopy + 4 + 12, /* Write from after the border and mouse   */
                0,
                8,                   /* Reason code 8: Block write              */
                PaletteV);
    }

    free(c->palcopy), c->palcopy = NULL, c->palsize = 0;
  }

  return e;
}

/**************************************************************/
/* mpegctrl_setup_mode()                                      */
/*                                                            */
/* Change to a screen mode appropriate for the options        */
/* settings in the given client structure, if those options   */
/* allow mode changing. The old mode palette is also recorded */
/* provided no_palette isn't flagged.                         */
/*                                                            */
/* Parameters: Pointer to a client structure containing       */
/*             options governing what action is taken here.   */
/**************************************************************/

static _kernel_oserror * mpegctrl_setup_mode(client * c)
{
  _kernel_oserror * e;
  int               modeblock[10];
  unsigned int      mode, rsir;
  bool              in_desktop;

  /* Record palette, if we've not already got inherited details */

  if (!c->opts.no_palette && c->palcopy == NULL && c->palsize == 0)
  {
    /* ColourTrans_ReadPalette has trouble in > 256 colour modes */
    /* and there are big problems on STB 3, so we're forced to   */
    /* call PaletteV directly.                                   */

    unsigned int size;
    unsigned int cols [3] = { 1, 2, 3 }; /* Oh, good grief, PaletteV's hideous */

    size = 2048 + 4 + 12; /* Up to 256 flashing colours plus border plus mouse */

//    e = _swix(ColourTrans_ReadPalette,
//              _INR(0,4) | _OUT(3),
//
//              -1,     /* Current mode          */
//              -1,     /* Current palette       */
//              0,      /* Return size in R3     */
//              0,      /* Should be ignored     */
//              1u<<1,  /* Read flashing colours */
//
//              &size);
//
//    if (e != NULL) return e;

    c->palcopy = malloc(size);

    if (c->palcopy == NULL)
    {
      return make_error(vc_ERROR_MEMORY_EXHAUSTED, 0);
    }
    else
    {
      c->palsize = size;
    }

//    e = _swix(ColourTrans_ReadPalette,
//              _INR(0,4),
//
//              -1,
//              -1,
//              c->palcopy,
//              c->palsize,
//              1u<<1);
//
//    if (e != NULL) return e;

    e = _swix(OS_CallAVector,
              _INR(0,4) | _IN(9),

              0,
              1u | (24u<<24),      /* Read 1 entry of type 24 (border)       */
              c->palcopy,          /* Put it at the start of the block       */
              c->palcopy,
              7,                   /* Reason code 7: Block read              */
              PaletteV);

    if (e != NULL) return e;

    e = _swix(OS_CallAVector,
              _INR(0,4) | _IN(9),

              cols,
              3u | (25u<<24),      /* Read 3 entries of type 25 (mouse)      */
              c->palcopy + 4,      /* Put them after the border              */
              c->palcopy + 4,
              7,                   /* Reason code 7: Block read              */
              PaletteV);

    if (e != NULL) return e;

    e = _swix(OS_CallAVector,
              _INR(0,4) | _IN(9),

              0,
              256u | (16u<<24),    /* Read 256 entries of type 16 (flashing) */
              c->palcopy + 4 + 12, /* Put them after the border and mouse    */
              0,
              7,                   /* Reason code 7: Block read              */
              PaletteV);

    if (e != NULL) return e;
  }

  if (!c->opts.no_mode_change)
  {
    /* Set up the screen mode */

    modeblock[0] = 1;
    modeblock[1] = c->opts.mode_width;
    modeblock[2] = c->opts.mode_height;
    modeblock[3] = c->opts.log2bpp;
    modeblock[4] = MPEGCtrl_DefaultFrameRate;

    if (c->opts.no_interlace) modeblock[2] = modeblock[2] >> 1;

    /* If in an 8bpp mode, must make sure the 256 colours are fully defineable */

    if (modeblock[3] == 3)
    {
      modeblock[5] = 0;   /* Mode flags            */
      modeblock[6] = 128; /* 128 (PRM 5a-135)      */
      modeblock[7] = 3;   /* Number of colours     */
      modeblock[8] = 255; /* 256, fully defineable */
      modeblock[9] = -1;  /* End of block          */
    }
    else modeblock[5] = -1; /* End of block */

    /* Our action now depends on the current mode - in the */
    /* Desktop or not?                                     */

    e = _swix(Wimp_ReadSysInfo,
              _IN(0) | _OUT(0),

              3, /* Get Wimp state */

              &rsir);

    if (e != NULL) return e;

    if (rsir == 0) in_desktop = false, c->rstbydsk = 0;
    else           in_desktop = true,  c->rstbydsk = 1;

    /* Don't read mode information if we already have it (inherited */
    /* in VideoControl_Register, we presume)                        */

    if (!c->havemode)
    {
      if (in_desktop)
      {
        e = _swix(Wimp_ReadSysInfo,
                  _IN(0) | _OUT(0),

                  1, /* Read Wimp mode */

                  &mode);

        if (e != NULL) return e;

        c->havemode = 1;
        c->wimpmode = mode;

        /* We do command window magic before changing mode too */

        _swix(Wimp_CommandWindow,
              _IN(0),

              1);
      }
      else
      {
      /* First read the current mode, checking to make sure that */
      /* we haven't already got a stored mode. If we have, the   */
      /* details were inherited in VideoControl_Register and we  */
      /* must preserve them.                                     */

        e = _swix(OS_ScreenMode,
                  _IN(0) | _OUT(1),

                  1, /* Read mode */

                  &mode);

        if (e != NULL) return e;

        /* Assume a mode number if <= 256, else selector block. This */
        /* is foul, but the PRM (5a-132) gives no recommended way of */
        /* telling the difference.                                   */

        c->havemode = 1;

        if (mode <= 256)
        {
          c->modenumb = mode, c->modecopy = NULL;
        }
        else
        {
          int   count = 0;
          int * mblk  = (int *) mode;
          int   size;

          while (mblk[count++] != -1);

          size = (count + 1) * sizeof(int);

          c->modecopy = malloc(size);
          if (c->modecopy == NULL) return make_error(vc_ERROR_MEMORY_EXHAUSTED, 0);

          memcpy(c->modecopy, mblk, size);
        }
      }
    }

    /* Now do the mode change, accounting for Macrovision */

    _swix(Macrovision_SetState,
          _INR(0,2),

          0,
          c->opts.macrovision,
          MPEGCtrl_MacrovisionTVFormat);

    e = _swix(OS_ScreenMode,
              _INR(0,1),

              0,
              modeblock);

    if (e != NULL) return e;

    if (c->opts.macrovision) _swix(Macrovision_SetState,
                                   _INR(0,2),

                                   0,
                                   0,
                                   MPEGCtrl_MacrovisionTVFormat);

    /* Turn the text cursor off */

    _swix(OS_WriteC, _IN(0), 23);
    _swix(OS_WriteC, _IN(0), 1);

    {
      int i;

      for (i = 0; i < 8; i ++)
      {
        _swix(OS_WriteC, _IN(0), 0);
      }
    }
  }

  return NULL;
}

/**************************************************************/
/* mpegctrl_setup_palette()                                   */
/*                                                            */
/* Change to a palette appropriate for the options settings   */
/* settings in the given client structure, if those options   */
/* allow palette changing.                                    */
/*                                                            */
/* If screen mode changing is allowed, the routine will also  */
/* ensure the whole screen foreground is set transparent.     */
/*                                                            */
/* Parameters: Pointer to a client structure containing       */
/*             options governing what action is taken here.   */
/**************************************************************/

static _kernel_oserror * mpegctrl_setup_palette(client * c)
{
  if (!c->opts.no_palette)
  {
    unsigned int * palette;
    unsigned int   entries;
    unsigned int   fg, bg;
    unsigned int   log2bpp;
    unsigned int   trans = 0xffffffff;

    if (
         _swix(OS_ReadModeVariable,
               _INR(0,1) | _OUT(2),

               -1, /* Current mode */
               9,  /* Log2bpp      */

               &log2bpp)
       )
       log2bpp = c->opts.log2bpp;

    switch(log2bpp)
    {
      default:
      case 0: palette = palette1,  entries = 2;  break;
      case 1: palette = palette2,  entries = 4;  break;
      case 2: palette = palette4,  entries = 16; break;
      case 3: palette = palette8,  entries = 8;  break;
      case 4: palette = palette16, entries = 8;  break;
      case 5: palette = palette32, entries = 8;  break;
    }

    /* For >= 8 bpp, we construct the palette using a weighting table. */
    /* 8bpp is a slightly special case which works by a similar        */
    /* mechanism, though; we end up with colour 1 explicitly set to    */
    /* transparent. For 16bpp modes, bit 15 set means transparent;     */
    /* for 32bpp modes, bit 24 set means transparent.                  */

    if (log2bpp >= 3)
    {
      int i, a;

      for (i = 0; i < 256; i++)
      {
        a = 0;

        if (i & 1)   a += palette[0];
        if (i & 2)   a += palette[1];
        if (i & 4)   a += palette[2];
        if (i & 8)   a += palette[3];
        if (i & 16)  a += palette[4];
        if (i & 32)  a += palette[5];
        if (i & 64)  a += palette[6];
        if (i & 128) a += palette[7];

        _swix(OS_CallAVector,
              _INR(0,2) | _IN(4) | _IN(9),

              i,         /* Logical colour                            */
              16,        /* Type of colour (16: Logical colour = RGB) */
              a & trans, /* BBGGRRxx colour setting                   */
              2,         /* Reason code 2: Set palette                */
              PaletteV);
      }

      if (log2bpp == 3)
      {
        /* For 8bpp, set colour 1 to transparent */

        _swix(OS_CallAVector,
              _INR(0,2) | _IN(4) | _IN(9),

              1,
              16,
              0xff & trans,
              2,
              PaletteV);
      }
    }

    /* For < 8bpp, we use a fixed programmed palette where the top  */
    /* physical colour is always transparent. See the tables at the */
    /* top of this source file for the palette entry values.        */

    else
    {
      /* For any other colour depth, set a 16 colour palette with the */
      /* top 8 transparent.                                           */

      int i;

      for (i = 0; i < entries; i++)
      {
        _swix(OS_CallAVector,
              _INR(0,2) | _IN(4) | _IN(9),

              i,
              16,
              palette[i] & trans,
              2,
              PaletteV);
      }
    }

    /* Set the border to transparent too */

    _swix(OS_CallAVector,
          _INR(0,2) | _IN(4) | _IN(9),

          0,
          24,           /* Type of colour (24: Border colour = RGB) */
          0xff & trans,
          2,
          PaletteV);

    /* Set an opaque foreground and transparent background */

    switch (log2bpp)
    {
      default:
      case 0: fg = 0,        bg = 1;           break;
      case 1: fg = 2,        bg = 3;           break;
      case 2: fg = 3,        bg = 15;          break;
      case 3: fg = 255,      bg = 1;           break;
      case 4: fg = 0x7fff,   bg = 1<<15;       break;
      case 5: fg = 0xffffff, bg = (0xffu)<<24; break;
    }

    _swix(OS_SetColour,
          _INR(0,1),

          0x40,    /* Set text foreground colour */
          fg);

    _swix(OS_SetColour,
          _INR(0,1),

          0x50,    /* Set text background colour */
          bg);

  } /* if (!c->opts.no_palette) */

  if (!c->opts.no_cls) _swix(OS_WriteI + 12, 0); /* CLS */

  /* Finished. */

  return NULL;
}

/**************************************************************/
/* mpegctrl_assemble_audio_parameters()                       */
/*                                                            */
/* Fill in a given MPEGControl audio parameters structure on  */
/* the basis of a given client structure.                     */
/*                                                            */
/* Parameters: Pointer to the client structure to use;        */
/*                                                            */
/*             Pointer to the audio block to fill in.         */
/**************************************************************/

static void mpegctrl_assemble_audio_parameters(client * c, mpegctrl_audioblock * a)
{
  unsigned int audioflags;

  if (c == NULL || a == NULL) return;

  memset(a, sizeof(mpegctrl_audioblock), 0);

  audioflags = MPEGCtrl_MCOS_Audio_MuteOnError |
               MPEGCtrl_MCOS_Audio_DCMSIsValid;

  a->format = 0;
  a->flags  = audioflags;

  if      (c->opts.audio_channel == vc_audio_dual_left)  a->dcms = dcms_left;
  else if (c->opts.audio_channel == vc_audio_dual_right) a->dcms = dcms_right;
  else                                                   a->dcms = dcms_both;

  return;
}

/**************************************************************/
/* mpegctrl_assemble_video_parameters()                       */
/*                                                            */
/* Fill in a given MPEGControl video parameters structure on  */
/* the basis of a given client structure.                     */
/*                                                            */
/* Parameters: Pointer to the client structure to use;        */
/*                                                            */
/*             Pointer to the video block to fill in.         */
/**************************************************************/

static void mpegctrl_assemble_video_parameters(client * c, mpegctrl_videoblock * v)
{
  unsigned int videoflags;

  if (c == NULL || v == NULL) return;

  memset(v, sizeof(mpegctrl_videoblock), 0);

  videoflags = MPEGCtrl_MCOS_Video_NoCLS        |
               MPEGCtrl_MCOS_Video_NoPalette    |
               MPEGCtrl_MCOS_Video_UnderrunFix  |
               MPEGCtrl_MCOS_Video_PESLengthFix |
               MPEGCtrl_MCOS_Video_ScalingThere;

  if (c->opts.ntsc != 0) videoflags |= MPEGCtrl_MCOS_Video_NTSC;

  v->format            = 0;
  v->flags             = videoflags;
  v->screen_mode       = MPEGCtrl_MCOS_Video_DefaultMode;
  v->blanked_sequences = 1;  /* At time of writing videoflags says these fields are not */
  v->blanked_fields    = 16; /* present, but fill with defaults from spec just in case  */

  /* Scaling is a little involved... */

  if (c->opts.rectangle.w == 0 && c->opts.rectangle.h == 0)
  {
    v->scaling_type = MPEGCtrl_MCOS_Video_Scale_Free;

    /* By clearing all flags, all other fields are now irrelevant and will go to */
    /* default values                                                            */

    v->scaling.free.flags = 0;
  }
  else if (c->opts.rectangle.w == 0)
  {
    v->scaling_type = MPEGCtrl_MCOS_Video_Scale_FixedH;

    v->scaling.fixedh.aspect_ratio = MPEGCtrl_MCOS_Video_Scale_Normal;
    v->scaling.fixedh.height       = c->opts.rectangle.h;
    v->scaling.fixedh.centre_x     = c->opts.rectangle.x;
    v->scaling.fixedh.centre_y     = c->opts.rectangle.y;
  }
  else if (c->opts.rectangle.h == 0)
  {
    v->scaling_type = MPEGCtrl_MCOS_Video_Scale_FixedW;

    v->scaling.fixedh.aspect_ratio = MPEGCtrl_MCOS_Video_Scale_Normal;
    v->scaling.fixedw.width        = c->opts.rectangle.w;
    v->scaling.fixedw.centre_x     = c->opts.rectangle.x;
    v->scaling.fixedw.centre_y     = c->opts.rectangle.y;
  }
  else
  {
    v->scaling_type = MPEGCtrl_MCOS_Video_Scale_FixedWH;

    v->scaling.fixedwh.width    = c->opts.rectangle.w;
    v->scaling.fixedwh.height   = c->opts.rectangle.h;
    v->scaling.fixedwh.centre_x = c->opts.rectangle.x;
    v->scaling.fixedwh.centre_y = c->opts.rectangle.y;
  }

  return;
}

/**************************************************************/
/* mpegctrl_setup_mpeg()                                      */
/*                                                            */
/* Call to the MPEG software to get it ready for video        */
/* intial video decode.                                       */
/*                                                            */
/* Parameters: Pointer to a client structure containing       */
/*             options governing what action is taken here.   */
/**************************************************************/

_kernel_oserror * mpegctrl_setup_mpeg(client * c)
{
  _kernel_oserror     * e;
  unsigned int          ctrlflags;
  mpegctrl_audioblock   audioblock;
  mpegctrl_videoblock   videoblock;

  _swix(OS_CLI,
        _IN(0),

        MPEGCtrl_SyncOffsetCommand);

  /* Assemble the control flags */

  ctrlflags = MPEGCtrl_MCOS_AudioToStreamSyncOn |
              MPEGCtrl_MCOS_ReservedSetToOne    |
              MPEGCtrl_MCOS_EnableOVSTrickPlay  |
              MPEGCtrl_MCOS_AutoReset;

  if (c->opts.audio_only == 0) ctrlflags |= MPEGCtrl_MCOS_VideoPresent;
  if (c->opts.video_only == 0) ctrlflags |= MPEGCtrl_MCOS_AudioPresent;

  /* Assemble the audio and video parameter blocks */

  mpegctrl_assemble_audio_parameters(c, &audioblock);
  mpegctrl_assemble_video_parameters(c, &videoblock);

  /* Select a stream demux module */

  if (c->opts.demux == 1)
  {
    /* Force MPEG1SS */

    e = _swix(MPEGControl_ControlOp,
              _INR(0,1),

              MPEGControl_MCCO_SetDemuxModule,
              MPEGControl_MCCO_MPEGSystem);
  }
  else
  {
    /* We've no auto yet, so anything else is MPEG2TS */

    e = _swix(MPEGControl_ControlOp,
              _INR(0,1),

              MPEGControl_MCCO_SetDemuxModule,
              MPEGControl_MCCO_MPEGTransport);
  }

  if (e != NULL) return e;

  /* Get our control handle */

  e = _swix(MPEGControl_OpenStream,
            _INR(0,3) | _OUT(0),

            ctrlflags,
            0,           /* (R1 = reserved (0)) */
            &videoblock,
            &audioblock,

            &c->ctrlhand);

  if (e == NULL) c->havectrl = 1;

  /* Finally, tell UDPV we're starting */

  if ((c->ctrl.flags & VC_ProtocolRegister_DoNotCallUDPV) == 0)
  {
    _swix(UDPV_StartOfPlay,
          _INR(0,4),

          0,
          0,
          c->port,
          c->ctrlhand,
          0);
  }

  return e;
}

/**************************************************************/
/* mpegctrl_change_video_parameters()                         */
/*                                                            */
/* Change the scaling specifier of a current stream. Other    */
/* video parameters are unchanged.                            */
/*                                                            */
/* Parameters: Pointer to a client structure containing       */
/*             options governing what action is taken here.   */
/**************************************************************/

_kernel_oserror * mpegctrl_change_video_parameters(client * c)
{
  if (c == NULL) return NULL;

  if (c->havectrl != 0 && (c->ctrl.flags & VC_ProtocolRegister_IHandleMPEG) == 0)
  {
    mpegctrl_videoblock videoblock;

    mpegctrl_assemble_video_parameters(c, &videoblock);

    return _swix(MPEGControl_SetVideoParameters,
                 _INR(0,6),

                 0, /* Read/write video scaling type */
                 c->ctrlhand,
                 videoblock.scaling_type, /* (or -1 to read) */
                 videoblock.scaling.misc.data[0],
                 videoblock.scaling.misc.data[1],
                 videoblock.scaling.misc.data[2],
                 videoblock.scaling.misc.data[3]);
  }

  return NULL;
}

/**************************************************************/
/* mpegctrl_change_audio_parameters()                         */
/*                                                            */
/* Change the DCMS specifier of a current stream. Other audio */
/* parameters are unchanged.                                  */
/*                                                            */
/* Parameters: Pointer to a client structure containing       */
/*             options governing what action is taken here.   */
/**************************************************************/

_kernel_oserror * mpegctrl_change_audio_parameters(client * c)
{
  if (c == NULL) return NULL;

  if (c->havectrl != 0 && (c->ctrl.flags & VC_ProtocolRegister_IHandleMPEG) == 0)
  {
    int ch;

    switch (c->opts.audio_channel)
    {
      default:
      case vc_audio_stereo: ch = 0;
      break;

      case vc_audio_dual_left: ch = 1;
      break;

      case vc_audio_dual_right: ch = 2;
      break;
    }

    return _swix(MPEGControl_SetAudioParameters,
                 _INR(0,2),

                 1, /* Read/write DCMS */
                 c->ctrlhand,
                 ch);
  }

  return NULL;
}

/**************************************************************/
/* mpegctrl_restore_mpeg()                                    */
/*                                                            */
/* Call to the MPEG software to tell it video decoding has    */
/* finished.                                                  */
/*                                                            */
/* Parameters: Pointer to a client structure containing       */
/*             details of the current video decode session.   */
/**************************************************************/

_kernel_oserror * mpegctrl_restore_mpeg(client * c)
{
  _kernel_oserror * e;

  if ((c->ctrl.flags & VC_ProtocolRegister_DoNotCallUDPV) == 0)
  {
    _swix(UDPV_EndOfPlay, 0);
  }

  e = _swix(MPEGControl_CloseStream,
            _INR(0,1),

            MPEGCtrl_MCCS_BlankOnClose,
            c->ctrlhand);

  c->ctrlhand = 0;

  return e;
}
