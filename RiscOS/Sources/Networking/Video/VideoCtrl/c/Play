/**************************************************************/
/* File:    Play.c                                            */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Implement VideoControl_Play.                      */
/*                                                            */
/* Author : A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 04-Nov-1999: Created.                             */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <math.h>

#include <swis.h>
#include <AsmUtils/modulefp.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Module.h"
#include "MPEGCtrl.h"
#include "Protocol.h"
#include "Utils.h"
#include "VideoCtrl.h"

#include "Play.h"

/* Local functions */

static int play_find_speed (const char * rate);

/**************************************************************/
/* play_play()                                                */
/*                                                            */
/* Implement VideoControl_Play. See the Video Control         */
/* specification, 2501,817/FS, for more.                      */
/**************************************************************/

_kernel_oserror * play_play(_kernel_swi_regs * r)
{
  _kernel_oserror * e    = NULL;
  client          * list = find_client(r->r[1]);
  char            * rate;
  int               or1;
  int               type, old_type;
  bool              mpd_present, mpd_matters;

  dprintf(("", "play_play: Called for %08X\n", r->r[1]));

  /* Return an error if not registered */

  if (list == NULL)
  {
    return make_error(vc_ERROR_CLIENT_ID_NOT_FOUND, 0);
  }

  if (list->ctrl.protocol == 0)
  {
    _kernel_oserror * e = make_error(vc_ERROR_NOT_SETUP_YET, 0);
    sprintf(strchr(e->errmess, '\0'), " (%08x)", r->r[1]);

    return e;
  }

  /* Remember the last and record the new play mode */

  rate = (char *) r->r[3];
  if (rate == NULL) rate = "1";

  if      (!strcmp(rate, "1")) type = MPEGCtrl_MCRS_Trick_Play;
  else if (!strcmp(rate, "0")) type = MPEGCtrl_MCRS_Trick_Freeze;

  else if (strchr(rate,'.') != NULL)
  {
    if (*rate == '-')          type = MPEGCtrl_MCRS_Trick_SRWD;
    else                       type = MPEGCtrl_MCRS_Trick_SFWD;
  }
  else if (*rate == '-')       type = MPEGCtrl_MCRS_Trick_FRWD;
  else                         type = MPEGCtrl_MCRS_Trick_FFWD;

  /* Note we don't record entering a paused state, so that on exit */
  /* from the state we can see if the play mode prior to pausing   */
  /* matches the mode afterwards.                                  */

  old_type = list->lastplay;
  if (type != MPEGCtrl_MCRS_Trick_Freeze) list->lastplay = type;

  /* Are we doing MPEG stuff at all? */

  if (list->havectrl != 0 && (list->ctrl.flags & VC_ProtocolRegister_IHandleMPEG) == 0)
  {
    /* Does the protocol module support reduced data rate slowmo */
    /* forward play?                                             */

    if ((list->ctrl.flags & VC_ProtocolRegister_IDoReducedRateSlowmoForward) != 0)
    {
      mpd_matters = true;

      /* Our reset behaviour depends on MPEGDriver being here */

      if (
           _swix(OS_Module,
                 _INR(0,1),

                 18,
                 ReducedRateSlowmoSupportModule) /* Play.h */

           != NULL
         )
         mpd_present = false;

      else mpd_present = true;
    }
    else
    {
      /* Always do simple resetting */

      mpd_present = mpd_matters = false;
    }

    /* If we're entering a paused state, set the speed immediately */

    if (type == MPEGCtrl_MCRS_Trick_Freeze)
    {
      _kernel_oserror * e = _swix(MPEGControl_SetSpeed,
                                  _INR(0,2),

                                  0,
                                  list->ctrlhand,
                                  0);

printf("ENTERED PAUSED STATE: Speed set to zero, no reset\n");


      if (e != NULL ) return e;
    }

    /* Otherwise, life is more complicated... */

    else
    {
      /* For entering any slow motion forwards play, and if we can do reduced */
      /* data rate slowmo forwards, then provided we're in a forwards play    */
      /* mode at or less than 1x normal speed (including pause) just set the  */
      /* speed (deferred). Under any other circumstances, set speed and reset */

      if (
           mpd_present == true &&
           mpd_matters == true &&
           (
             type == MPEGCtrl_MCRS_Trick_SFWD  ||
             type == MPEGCtrl_MCRS_Trick_Play
           )
           &&
           (
             old_type == MPEGCtrl_MCRS_Trick_SFWD   ||
             old_type == MPEGCtrl_MCRS_Trick_Play
           )
           &&
           (
             type != MPEGCtrl_MCRS_Trick_Play ||
             type != old_type
           )
         )
      {
        modulefp_buf buf;
        int          speed;

        modulefp_enable(&buf);
        speed = play_find_speed(rate);
        modulefp_disable(&buf);

printf("ENTERED RDRSMFP: Deferred speed set to %d, no reset\n",speed);

        e = _swix(MPEGControl_SetSpeed,
                  _INR(0,2),

                  MPEGCtrl_MCSS_DeferIfSlower,
                  list->ctrlhand,
                  speed);
      }

      /* If we were (before possibly pausing) and are [going to] normal */
      /* forwards play, just do an immediate set speed.                 */

      else if (type == old_type && type == MPEGCtrl_MCRS_Trick_Play)
      {
      printf("SAME SPEED: Temporary hack of no reset, speed to 1\n");
        e = _swix(MPEGControl_SetSpeed,
                  _INR(0,2),

                  0,
                  list->ctrlhand,
                  1);

        if (e != NULL) return e;
      }

      /* For any other transition, reset and set speed. The reset is deferred */
      /* and it's up to the decoder to defer the speed change if it wants.    */
      /* Hopefully it will...                                                 */

      else
      {
        unsigned int mpf;

        mpf = MPEGCtrl_MCRS_VideoPresent |
              MPEGCtrl_MCRS_DeferReset;

        /* If we're doing trick play, flag that that the new stream should */
        /* be marked as such. Otherwise, flag that we expect audio data.   */

        if (type != MPEGCtrl_MCRS_Trick_Play)
        {
          mpf |= MPEGCtrl_MCRS_NewIsTrickPlay;
        }
        else
        {
          mpf |= MPEGCtrl_MCRS_AudioPresent;
        }

        /* OK, reset the stream (deferred) */

printf("ENTERED OTHER MODE: Deferred reset to type %d\n", type);

        e = _swix(MPEGControl_ResetStream,
                  _INR(0,2),

                  mpf,
                  list->ctrlhand,
                  type);

        if (e != NULL) return e;

        /* Set speed to 1 - just want simply trick play, nothing special */

printf("ENTERED OTHER MODE: Speed set to %d post reset\n", 1);

        e = _swix(MPEGControl_SetSpeed,
                  _INR(0,2),

                  0,
                  list->ctrlhand,
                  1);

        if (e != NULL) return e;
      }
    }
  }

  /* Call the protocol module SWI */

  or1     = r->r[1];
  r->r[1] = list->ctrl.id;
  e       = _kernel_swi(list->ctrl.protocol + VC_Protocol_Play, r, r);
  r->r[1] = or1;

  return e;
}

/**************************************************************/
/* play_find_speed()                                          */
/*                                                            */
/* Given a string holding a decimal fraction, find the lowest */
/* integer for 1/<that_fraction>.                             */
/*                                                            */
/* Must only be used after modulefp_enable has been called.   */
/*                                                            */
/* Parameters: Pointer to the NUL terminated rate string.     */
/*                                                            */
/* Returns:    Lowest int for 1/fraction.                     */
/**************************************************************/

static int play_find_speed(const char * rate)
{
  double d = atof(rate);
  int    speed;

  if (d == 0) d = 1;

  speed = (int) floor(1 / d);
  if (speed > MPEGCtrl_MCSS_SlowestRate) speed = MPEGCtrl_MCSS_SlowestRate;

  return speed;
}
