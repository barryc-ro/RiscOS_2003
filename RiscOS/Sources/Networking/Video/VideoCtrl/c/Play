/**************************************************************/
/* File:    Play.c                                            */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Implement VideoControl_Play.                      */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 04-Nov-1999: Created.                             */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <math.h>

#include <swis.h>
#include <AsmUtils/modulefp.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Module.h"
#include "MPEGCtrl.h"
#include "Protocol.h"
#include "Utils.h"
#include "VideoCtrl.h"

#include "Play.h"

/* Local functions */

static int               play_find_speed (const char * rate);
static _kernel_oserror * play_set_speed  (client * list, const char * rate, unsigned int flags);

/**************************************************************/
/* play_play()                                                */
/*                                                            */
/* Implement VideoControl_Play. See the Video Control         */
/* specification, 2501,817/FS, for more.                      */
/**************************************************************/

_kernel_oserror * play_play(_kernel_swi_regs * r)
{
  _kernel_oserror * e    = NULL;
  client          * list = find_client(r->r[1]);
  int               or1;

  dprintf(("", "play_play: Called for %08X\n", r->r[1]));

  /* Return an error if not registered */

  if (list == NULL)
  {
    return make_error(vc_ERROR_CLIENT_ID_NOT_FOUND, 0);
  }

  if (list->ctrl.protocol == 0)
  {
    e = make_error(vc_ERROR_NOT_SETUP_YET, 0);
    sprintf(strchr(e->errmess, '\0'), " (%08x)", r->r[1]);

    return e;
  }

  /* Change playback characteristics */

  if (list->started == 1)
  {
    e = play_alter_playback_characteristics(list, (const char *) r->r[3]);
    if (e != NULL) return e;
  }
  else list->started = 1;

  /* Call the protocol module SWI */

  or1     = r->r[1];
  r->r[1] = list->ctrl.id;
  e       = _kernel_swi(list->ctrl.protocol + VC_Protocol_Play, r, r);
  r->r[1] = or1;

  return e;
}

/**************************************************************/
/* play_alter_playback_characteristics()                      */
/*                                                            */
/* Prime the MPEG software for a change in the existing       */
/* stream.                                                    */
/*                                                            */
/* Parameters: Pointer to the client struct for the stream in */
/*             question;                                      */
/*                                                            */
/*             Pointer to a string holding the new Scale /    */
/*             Speed value that the stream will change to.    */
/*                                                            */
/* Assumes:    Pointers are non-NULL and valid, and the       */
/*             client struct does represent a stream (so      */
/*             Setup has occurred etc., lastplay is filled in */
/*             even if we've not started playing yet).        */
/**************************************************************/

_kernel_oserror * play_alter_playback_characteristics(client * list, const char * r3)
{
  const char * rate;
  int          type, old_type;
  bool         mpd_present, mpd_matters;

printf("PAPC called\n");

  dprintf(("", "play_alter_playback_characteristics: Called for %08X / '%s'\n", list, r3));

  /* Remember the last and record the new play mode */

  rate = r3;
  if (rate == NULL || *rate == '\0') rate = "1";

printf("rate: '%s'\n",rate);

  if      (!strcmp(rate, "1")) type = MPEGCtrl_MCRS_Trick_Play;
  else if (!strcmp(rate, "0")) type = MPEGCtrl_MCRS_Trick_Freeze;

  else if (strstr(rate, "0.") != NULL)
  {
    if (*rate == '-')          type = MPEGCtrl_MCRS_Trick_SRWD;
    else                       type = MPEGCtrl_MCRS_Trick_SFWD;
  }
  else if (*rate == '-')       type = MPEGCtrl_MCRS_Trick_FRWD;
  else                         type = MPEGCtrl_MCRS_Trick_FFWD;

printf("ID type is %d, old is %d\n",type,list->lastplay);

  /* Note we don't record entering a paused state, so that on exit */
  /* from the state we can see if the play mode prior to pausing   */
  /* matches the mode afterwards.                                  */

  old_type = list->lastplay;
  if (type != MPEGCtrl_MCRS_Trick_Freeze) list->lastplay = type;

  /* Are we doing MPEG stuff at all? */

  if (
       list->havectrl != 0                                                &&
       (list->ctrl.flags & VC_ProtocolRegister_IHandleMPEG)          == 0 &&
       (list->ctrl.flags & VC_ProtocolRegister_DoNotResetOrSetSpeed) == 0
     )
  {
    /* Does the protocol module support reduced data rate slowmo */
    /* forward play?                                             */

    if ((list->ctrl.flags & VC_ProtocolRegister_IDoReducedRateSlowmoForward) != 0)
    {
      mpd_matters = true;

      /* Our reset behaviour depends on MPEGDriver being here */

      if (
           _swix(OS_Module,
                 _INR(0,1),

                 18,
                 ReducedRateSlowmoSupportModule) /* Play.h */

           != NULL
         )
         mpd_present = false;

      else mpd_present = true;
    }
    else
    {
      /* Always do simple resetting */

      mpd_present = mpd_matters = false;
    }

    /* If we're entering a paused state, set the speed immediately */

    if (type == MPEGCtrl_MCRS_Trick_Freeze)
    {
printf("SetSpeed to 0 for pausing\n");

      RetError(_swix(MPEGControl_SetSpeed,
                     _INR(0,2),

                     0,
                     list->ctrlhand,
                     0));
    }

    /* Otherwise, life is more complicated... */

    else
    {
      /* For entering any slow motion forwards play, and if we can do reduced */
      /* data rate slowmo forwards, then provided we're in a forwards play    */
      /* mode at or less than 1x normal speed (including pause) just set the  */
      /* speed (deferred). Under any other circumstances, set speed & reset.  */

      if (
           mpd_present == true &&
           mpd_matters == true &&
           (
             type == MPEGCtrl_MCRS_Trick_SFWD  ||
             type == MPEGCtrl_MCRS_Trick_Play
           )
           &&
           (
             old_type == MPEGCtrl_MCRS_Trick_SFWD   ||
             old_type == MPEGCtrl_MCRS_Trick_Play
           )
           &&
           (
             type != MPEGCtrl_MCRS_Trick_Play ||
             type != old_type
           )
         )
      {
        RetError(play_set_speed(list, rate, MPEGCtrl_MCSS_DeferIfSlower));
      }

      /* If we were (before possibly pausing) and are [going to] normal */
      /* forwards play, just do an immediate set speed.                 */

      else if (type == old_type && type == MPEGCtrl_MCRS_Trick_Play)
      {
printf("Set speed to 1 for normal play -> normal play\n");

        RetError(_swix(MPEGControl_SetSpeed,
                       _INR(0,2),

                       0,
                       list->ctrlhand,
                       1));
      }

      /* For any other transition, reset and set speed. The reset is deferred */
      /* and it's up to the decoder to defer the speed change if it wants.    */
      /* Hopefully it will...                                                 */

      else
      {
        unsigned int mpf;

        mpf = MPEGCtrl_MCRS_VideoPresent |
              MPEGCtrl_MCRS_DeferReset;

        /* If we're doing trick play, flag that that the new stream should */
        /* be marked as such. Otherwise, flag that we expect audio data.   */

        if (type != MPEGCtrl_MCRS_Trick_Play)
        {
          if (
               !mpd_present ||
               !mpd_matters ||
               type != MPEGCtrl_MCRS_Trick_SFWD
             )
             mpf |= MPEGCtrl_MCRS_NewIsTrickPlay;
        }
        else
        {
          mpf |= MPEGCtrl_MCRS_AudioPresent;
        }

        /* OK, reset the stream (deferred) */

printf("ResetStream (deferred %08X) for type %X\n",mpf,type);
        RetError(_swix(MPEGControl_ResetStream,
                       _INR(0,2),

                       mpf,
                       list->ctrlhand,
                       type));

        /* If we reach here in slow motion forwards play, we should do a  */
        /* set speed after the reset (this time, not deferred). Similarly */
        /* for reverse play.                                              */

        if (
             mpd_present == true &&
             (
               type == MPEGCtrl_MCRS_Trick_SRWD ||
               type == MPEGCtrl_MCRS_Trick_SFWD
             )
           )
        {
          RetError(play_set_speed(list, rate, 0));
        }

        /* Otherwise, set speed to 1 - just want simply trick play, nothing special */

        else
        {
printf("SetSpeed to 1 (normal play or true trick play expected)\n");
          RetError(_swix(MPEGControl_SetSpeed,
                         _INR(0,2),

                         0,
                         list->ctrlhand,
                         1));
        }
      }
    }
  }

  return NULL;
}

/**************************************************************/
/* play_find_speed()                                          */
/*                                                            */
/* Given a string holding a decimal fraction, find the lowest */
/* integer for 1/<that_fraction>. If the string indicates a   */
/* negative number the sign is ignored.                       */
/*                                                            */
/* Must only be used after modulefp_enable has been called.   */
/*                                                            */
/* Parameters: Pointer to the NUL terminated rate string.     */
/*                                                            */
/* Returns:    Lowest int for 1/fraction.                     */
/**************************************************************/

static int play_find_speed(const char * rate)
{
  double d = atof(rate);
  int    speed;

  if      (d < 0)  d = -d;
  else if (d == 0) d = 1;

  speed = (int) floor(1 / d);
  if (speed > MPEGCtrl_MCSS_SlowestRate) speed = MPEGCtrl_MCSS_SlowestRate;

  return speed;
}

/**************************************************************/
/* play_set_speed()                                           */
/*                                                            */
/* For specific (and convoluted) play mode changes, set the   */
/* speed within MPEGDriver. Service function for play_play,   */
/* see comments at the call points for more.                  */
/*                                                            */
/* Parameters: Pointer to client structure for this stream;   */
/*                                                            */
/*             Pointer to string describing play rate;        */
/*                                                            */
/*             Flags for R0 in MPEGControl_SetSpeed.          */
/**************************************************************/

static _kernel_oserror * play_set_speed(client * list, const char * rate, unsigned int flags)
{
  modulefp_buf buf;
  int          speed;

  modulefp_enable(&buf);
  speed = play_find_speed(rate);
  modulefp_disable(&buf);

printf("ModuleFP trickery to set speed to %d (flags %08X)\n",speed,flags);
  return _swix(MPEGControl_SetSpeed,
               _INR(0,2),

               flags,
               list->ctrlhand,
               speed);
}
