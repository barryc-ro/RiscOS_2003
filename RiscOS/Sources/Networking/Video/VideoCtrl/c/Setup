/**************************************************************/
/* File:    Setup.c                                           */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Implement VideoControl_Setup.                     */
/*                                                            */
/* Author:  A.D.Hodgkinson. Based on URL_Fetcher source by    */
/*          S.N.Brodie and P. Wain.                           */
/*                                                            */
/* History: 04-Nov-1999 (ADH): Created.                       */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Generic.h"
#include "Module.h"
#include "Protocol.h"
#include "Utils.h"
#include "URLutils.h"
#include "URLveneer.h"

#include "Setup.h"

/**************************************************************/
/* setup_setup()                                              */
/*                                                            */
/* Implement VideoControl_Setup. See the Video Control        */
/* specification, 2501,817/FS, for more.                      */
/**************************************************************/

_kernel_oserror * setup_setup(_kernel_swi_regs * r)
{
  _kernel_oserror * error;
  client          * c                   = find_client(r->r[1]);
  char            * request             = NULL;
  url_description * d                   = NULL;
  int               original_request_r1 = r->r[1];
  int               original_request_r2 = r->r[2];

  dprintf(("", "setup_setup: Called for %08X\n", r->r[1]));

  /* Return an error if we aren't registered */

  if (c == NULL)
  {
    return make_error(vc_ERROR_CLIENT_ID_NOT_FOUND, 0);
  }

  dprintf(("", "setup_setup: Client %08X\n", (int) c));

  /* Return an error if there's already a protocol module in use */

  if (c->ctrl.protocol != 0)
  {
    return make_error(vc_ERROR_ALREADY_SETUP, 0);
  }

  /* Canonicalise the URL. */

  error = urlutils_return_description((const char *) r->r[2], &d);
  if (error != NULL) return error;

  request = Strdup(d->full);
  urlutils_free_description(d);

  if (request == NULL)
  {
    return make_error(vc_ERROR_MEMORY_EXHAUSTED, 0);
  }

  dprintf(("", "setup_setup: Canonical URL is '%s'\n", request));

  /* Look for a protocol module with that URL */

  error = protocol_get_swi_base(request, &(c->ctrl.protocol));
  if (error) return error;

  if (c->ctrl.protocol == 0)
  {
    if (request) free(request);
    return make_error(vc_ERROR_NO_PROTOCOL_FOUND, 0);
  }

  dprintf(("", "setup_setup: Protocol module = %08X\n", c->ctrl.protocol));

  /* Fill an accessible copy of the flags, ensure play */
  /* state is reset.                                   */

  c->ctrl.flags       = protocol_get_flags_from_swi_base(c->ctrl.protocol, &c->ctrl.openflags);
  c->opts.play_status = vc_play_status_unknown;

  /* We now have a request that we can send on - the protocol module */
  /* will see our canonical URL.                                     */

  r->r[2] = (int) request;

  error = _kernel_swi(c->ctrl.protocol + VC_Protocol_Setup, r, r);

  /* If there's no error, record the ID the protocol module gave us, */
  /* else invalidate use of this protocol module again.              */

  if (!error) c->ctrl.id       = r->r[1];
  else        c->ctrl.protocol = 0;

  /* Restore registers as required */

  r->r[1] = original_request_r1;
  r->r[2] = original_request_r2;

  /* Either way, free the canonical URL and restore R2 */

  if (request) free(request);

  dprintf(("", "setup_setup: Exitting with %p\n", error));

  return error;
}
