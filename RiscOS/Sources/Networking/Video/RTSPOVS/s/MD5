;
;  $Id$
;
;  This code is derived from the RSA Data Security, Inc. MD5
;  Message-Digest Algorithm as defined in RFC1321.
;
		IMPORT	memcpy
		IMPORT	memset

;
; Define the MD5 context structure
;
			^	0
|md5_context.state|	#	0
|md5_context.state0|	#	4
|md5_context.state1|	#	4
|md5_context.state2|	#	4
|md5_context.state3|	#	4
|md5_context.count|	#	0
|md5_context.count0|	#	4
|md5_context.count1|	#	4
|md5_context.buffer|	#	64
|sizeof(md5_context)|	#	0

;
; Shift constants for the body of the transform
;
S11			*	7
S12			*	12
S13			*	17
S14			*	22
S21			*	5
S22			*	9
S23			*	14
S24			*	20
S31			*	4
S32			*	11
S33			*	16
S34			*	23
S41			*	6
S42			*	10
S43			*	15
S44			*	21

		AREA	|MD5$$code|, CODE, READONLY

;
; Macro to do the phase 1 transforms
;
		MACRO
		FF	$a,$b,$c,$d,$x,$s,$ac
		AND	r6,$b,$c
		MVN	r7,$b
		AND	r7,r7,$d
		ORR	r6,r6,r7
		LDR	r7,[r5,#$x :SHL: 2]
		ADD	r6,r6,r7
		LDR	r7,=$ac
		ADD	r6,r6,r7
		ADD	$a,$a,r6
		ADD	$a,$b,$a,ROR #32-$s
		MEND

;
; Macro to do the phase 2 transforms
;
		MACRO
		GG	$a,$b,$c,$d,$x,$s,$ac
		AND	r6,$b,$d
		MVN	r7,$d
		AND	r7,$c,r7
		ORR	r6,r6,r7
		LDR	r7,[r5,#$x :SHL: 2]
		ADD	r6,r6,r7
		LDR	r7,=$ac
		ADD	r6,r6,r7
		ADD	$a,$a,r6
		ADD	$a,$b,$a,ROR #32-$s
		MEND

;
; Macro to do the phase 3 transforms
;
		MACRO
		HH	$a,$b,$c,$d,$x,$s,$ac
		EOR	r6,$b,$c
		EOR	r6,r6,$d
		LDR	r7,[r5,#$x :SHL: 2]
		ADD	r6,r6,r7
		LDR	r7,=$ac
		ADD	r6,r6,r7
		ADD	$a,$a,r6
		ADD	$a,$b,$a,ROR #32-$s
		MEND

;
; Macro to do the phase 4 transforms
;
		MACRO
		II	$a,$b,$c,$d,$x,$s,$ac
		MVN	r6,$d
		ORR	r6,$b,r6
		EOR	r6,$c,r6
		LDR	r7,[r5,#$x :SHL: 2]
		ADD	r6,r6,r7
		LDR	r7,=$ac
		ADD	r6,r6,r7
		ADD	$a,$a,r6
		ADD	$a,$b,$a,ROR #32-$s
		MEND

;
; Begin calculation of an MD5 digest
;
; void md5_init(md5_context *ctx)
;
		EXPORT	md5_init
md5_init
		STMFD	sp!,{r4,lr}
		LDR	r1,=&67452301
		LDR	r2,=&EFCDAB89
		LDR	r3,=&98BADCFE
		LDR	r4,=&10325476

		ASSERT	|md5_context.state| = 0

		STMIA	r0!,{r1-r4}

		MOV	r1,#0
		MOV	r2,#0

		ASSERT	|md5_context.count| = |md5_context.state| + 16

		STMIA	r0,{r1-r2}
		LDMFD	sp!,{r4,pc}^

;
; Called to process each block of data (note length is in bits)
;
; void md5_update(md5_context *ctx, unsigned char *data, unsigned int length)
;
		EXPORT	md5_update
md5_update
		STMFD	sp!,{r4-r9,lr}
		MOV	r4,r0
		MOV	r5,r1
		MOV	r6,r2
		LDR	r7,[r4,#|md5_context.count0|]
		MOV	r8,r7,LSR #3
		AND	r8,r8,#&3F
		ADD	r7,r7,r6,LSL #3
		STR	r7,[r4,#|md5_context.count0|]
		CMP	r7,r6,LSL #3
		LDR	r7,[r4,#|md5_context.count1|]
		ADDLT	r7,r7,#1
		ADD	r7,r7,r6,LSR #29
		STR	r7,[r4,#|md5_context.count1|]
		RSB	r9,r8,#64
		CMP	r6,r9
		MOVLT	r1,r5
		BLT	md5_update_final
		ADD	r0,r4,#|md5_context.buffer|
		ADD	r0,r0,r8
		MOV	r1,r5
		MOV	r2,r9
		BL	memcpy
		ADD	r0,r4,#|md5_context.state|
		ADD	r1,r4,#|md5_context.buffer|
		BL	md5_transform
		ADD	r7,r9,#63
		ADD	r1,r5,r9
		MOV	r8,#0
md5_update_loop
		CMP	r7,r6
		BGE	md5_update_final
		BL	md5_transform
		ADD	r1,r1,#64
		ADD	r7,r7,#64
		B	md5_update_loop
md5_update_final
		ADD	r0,r4,#|md5_context.buffer|
		ADD	r0,r0,r8
		SUB	r2,r1,r5
		SUB	r2,r6,r2
		LDMFD	sp!,{r4-r9,lr}
		B	memcpy

;
; Finishes calculation of the MD5 digest and fills in the
; supplied buffer with the digest value
;
; void md5_final(unsigned char digest[16], md5_context *ctx)
;
		EXPORT	md5_final
md5_final
		STMFD	sp!,{r4-r5,lr}
		SUB	sp,sp,#8
		MOV	r4,r0
		MOV	r5,r1
		ADD	r0,r5,#|md5_context.count|
		LDMIA	r0,{r1,r2}
		STMIA	sp,{r1,r2}
		MOV	r2,r1,LSR #3
		AND	r2,r2,#&3F
		CMP	r2,#56
		RSBLT	r2,r2,#56
		RSBGE	r2,r2,#120
		LDR	r1,=md5_padding
		MOV	r0,r5
		BL	md5_update
		MOV	r0,r5
		MOV	r1,sp
		MOV	r2,#8
		BL	md5_update

		ASSERT	|md5_context.state| = 0

		LDMIA	r5,{r0-r3}
		STMIA	r4,{r0-r3}
		ADD	sp,sp,#8
		MOV	r0,r5
		MOV	r1,#0
		MOV	r2,#|sizeof(md5_context)|
		LDMFD	sp!,{r4-r5,lr}
		B	memset

;
; Do the hard work of digesting a 64 byte block
;
md5_transform
		STMFD	sp!,{r0-r7,lr}
		MOV	r4,r0
		MOV	r5,r1
		LDMIA	r4,{r0-r3}

		FF	r0,r1,r2,r3, 0,S11,&d76aa478
		FF	r3,r0,r1,r2, 1,S12,&e8c7b756
		FF	r2,r3,r0,r1, 2,S13,&242070db
		FF	r1,r2,r3,r0, 3,S14,&c1bdceee
		FF	r0,r1,r2,r3, 4,S11,&f57c0faf
		FF	r3,r0,r1,r2, 5,S12,&4787c62a
		FF	r2,r3,r0,r1, 6,S13,&a8304613
		FF	r1,r2,r3,r0, 7,S14,&fd469501
		FF	r0,r1,r2,r3, 8,S11,&698098d8
		FF	r3,r0,r1,r2, 9,S12,&8b44f7af
		FF	r2,r3,r0,r1,10,S13,&ffff5bb1
		FF	r1,r2,r3,r0,11,S14,&895cd7be
		FF	r0,r1,r2,r3,12,S11,&6b901122
		FF	r3,r0,r1,r2,13,S12,&fd987193
		FF	r2,r3,r0,r1,14,S13,&a679438e
		FF	r1,r2,r3,r0,15,S14,&49b40821

		GG	r0,r1,r2,r3, 1,S21,&f61e2562
		GG	r3,r0,r1,r2, 6,S22,&c040b340
		GG	r2,r3,r0,r1,11,S23,&265e5a51
		GG	r1,r2,r3,r0, 0,S24,&e9b6c7aa
		GG	r0,r1,r2,r3, 5,S21,&d62f105d
		GG	r3,r0,r1,r2,10,S22,&02441453
		GG	r2,r3,r0,r1,15,S23,&d8a1e681
		GG	r1,r2,r3,r0, 4,S24,&e7d3fbc8
		GG	r0,r1,r2,r3, 9,S21,&21e1cde6
		GG	r3,r0,r1,r2,14,S22,&c33707d6
		GG	r2,r3,r0,r1, 3,S23,&f4d50d87
		GG	r1,r2,r3,r0, 8,S24,&455a14ed
		GG	r0,r1,r2,r3,13,S21,&a9e3e905
		GG	r3,r0,r1,r2, 2,S22,&fcefa3f8
		GG	r2,r3,r0,r1, 7,S23,&676f02d9
		GG	r1,r2,r3,r0,12,S24,&8d2a4c8a

		HH	r0,r1,r2,r3, 5,S31,&fffa3942
		HH	r3,r0,r1,r2, 8,S32,&8771f681
		HH	r2,r3,r0,r1,11,S33,&6d9d6122
		HH	r1,r2,r3,r0,14,S34,&fde5380c
		HH	r0,r1,r2,r3, 1,S31,&a4beea44
		HH	r3,r0,r1,r2, 4,S32,&4bdecfa9
		HH	r2,r3,r0,r1, 7,S33,&f6bb4b60
		HH	r1,r2,r3,r0,10,S34,&bebfbc70
		HH	r0,r1,r2,r3,13,S31,&289b7ec6
		HH	r3,r0,r1,r2, 0,S32,&eaa127fa
		HH	r2,r3,r0,r1, 3,S33,&d4ef3085
		HH	r1,r2,r3,r0, 6,S34,&04881d05
		HH	r0,r1,r2,r3, 9,S31,&d9d4d039
		HH	r3,r0,r1,r2,12,S32,&e6db99e5
		HH	r2,r3,r0,r1,15,S33,&1fa27cf8
		HH	r1,r2,r3,r0, 2,S34,&c4ac5665

		II	r0,r1,r2,r3, 0,S41,&f4292244
		II	r3,r0,r1,r2, 7,S42,&432aff97
		II	r2,r3,r0,r1,14,S43,&ab9423a7
		II	r1,r2,r3,r0, 5,S44,&fc93a039
		II	r0,r1,r2,r3,12,S41,&655b59c3
		II	r3,r0,r1,r2, 3,S42,&8f0ccc92
		II	r2,r3,r0,r1,10,S43,&ffeff47d
		II	r1,r2,r3,r0, 1,S44,&85845dd1
		II	r0,r1,r2,r3, 8,S41,&6fa87e4f
		II	r3,r0,r1,r2,15,S42,&fe2ce6e0
		II	r2,r3,r0,r1, 6,S43,&a3014314
		II	r1,r2,r3,r0,13,S44,&4e0811a1
		II	r0,r1,r2,r3, 4,S41,&f7537e82
		II	r3,r0,r1,r2,11,S42,&bd3af235
		II	r2,r3,r0,r1, 2,S43,&2ad7d2bb
		II	r1,r2,r3,r0, 9,S44,&eb86d391

		LDR	r5,[r4,#0]
		ADD	r5,r5,r0
		STR	r5,[r4,#0]
		LDR	r5,[r4,#4]
		ADD	r5,r5,r1
		STR	r5,[r4,#4]
		LDR	r5,[r4,#8]
		ADD	r5,r5,r2
		STR	r5,[r4,#8]
		LDR	r5,[r4,#12]
		ADD	r5,r5,r3
		STR	r5,[r4,#12]
		LDMFD	sp!,{r0-r7,pc}^

		AREA	|MD5$$data|, DATA,READONLY

;
; Padding data, some or all of which is added to the last block
;
md5_padding
		DCB	&80, 0, 0, 0, 0, 0, 0, 0
		DCB	0, 0, 0, 0, 0, 0, 0, 0
		DCB	0, 0, 0, 0, 0, 0, 0, 0
		DCB	0, 0, 0, 0, 0, 0, 0, 0
		DCB	0, 0, 0, 0, 0, 0, 0, 0
		DCB	0, 0, 0, 0, 0, 0, 0, 0
		DCB	0, 0, 0, 0, 0, 0, 0, 0
		DCB	0, 0, 0, 0, 0, 0, 0, 0

		END
