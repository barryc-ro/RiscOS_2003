/**************************************************************/
/* File:    TearDown.c                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Implement RTSPOVS_TearDown.                       */
/*                                                            */
/* Author : A.D.Hodgkinson. Based on URL_Fetcher source by    */
/*          S.N.Brodie and P. Wain.                           */
/*                                                            */
/* History: 09-Nov-1999: Created.                             */
/**************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdbool.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <VideoCtrl.h>

#include "CallOut.h"
#include "Connect.h"
#include "Headers.h"
#include "Module.h"
#include "RTSPOErrors.h"
#include "Session.h"
#include "Status.h"
#include "Utils.h"

#include "TearDown.h"

/**************************************************************/
/* teardown_tear_down()                                       */
/*                                                            */
/* Implement RTSPOVS_TearDown. See the Video Control          */
/* specification, 2501,817/FS, for more.                      */
/**************************************************************/

_kernel_oserror * teardown_tear_down(_kernel_swi_regs * r)
{
  session * s    = session_find_by_id(r->r[1]);
  bool      fail = false;
  char    * port;

  dprintf(("", "teardown_tear_down: Called\n"));

  if (s == NULL)
  {
    dprintf(("", "teardown_tear_down: ID not found\n"));

    return make_error(rtspovs_ERROR_CLIENT_ID_NOT_FOUND, 0);
  }

  if (
       (r->r[2] & VC_TearDown_IgnoreErrors) == 0 &&
       (
         s->state == protostate_DNS              ||
         s->state == protostate_CONNECTED        ||
         s->state == protostate_SENDING          ||
         s->state == protostate_RECEIVING        ||
         s->state == protostate_PUMPING
       )
     )
  {
    dprintf(("", "teardown_tear_down: In progress\n"));

    return make_error(rtspovs_ERROR_IN_PROGRESS, 0);
  }

  if (s->server_session == NULL)
  {
    dprintf(("", "teardown_tear_down: No server session so freeing now\n"));

    session_free_item(s);
    return NULL;
  }

  /* Ensure everything is reset for a new command */

  session_reset_session(s);

  /* Build the headers. First, the TEARDOWN command */

  if (
       headers_add_header(&s->headers,
                          Headers_CommandName_TearDown,
                          s->url->full)
       == NULL
     )
     fail = true;

  /* A sequence header */

  else if (headers_add_sequence_header(&s->headers) == NULL) fail = true;

  /* The connection should be closed by the other end in passing, */
  /* but we make sure by sending Connection: close ourselves.     */

  else if (
            headers_add_header(&s->headers,
                               Headers_HeaderName_Connection,
                               Headers_HeaderValue_Connection)
            == NULL
          )
          fail = true;

  /* Lastly, the session header */

  else if (
            headers_add_header(&s->headers,
                               Headers_HeaderName_Session,
                               s->server_session)
            == NULL
          )
          fail = true;

  /* Set the session to self-destruct on completion */

  s->destruct = 1;

  /* Open a connection to send the command down */

  if (s->url->port && *s->url->port) port = s->url->port;
  else                               port = NULL;

  s->sd = opensock(s->url->host,
                   RTSPOVS_DefaultPort,
                   port,
                   &s->state,
                   -1);

  s->last = utils_read_time();

  dprintf(("", "teardown_tear_down: Socket descriptor %d, state %d\n", s->sd, s->state));

  /* Set the state machine going to see errors and DNS stuff. The call */
  /* to session_reset_session should've cleared the callout but it     */
  /* never hurts to be sure (in future maybe stuff could go on in the  */
  /* background that could have set a callout between the reset and    */
  /* this part of the code).                                           */

  if (s->callout_set == 0)
  {
    s->callout_set = 1;
    timeout(status_proceed_on_callout, s, 50);
  }

  dprintf(("", "teardown_tear_down: Successful\n"));

  return NULL;
}
