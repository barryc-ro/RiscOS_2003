/**************************************************************/
/* File:    GetParam.c                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Send off a self-destructing empty GET_PARAMETER   */
/*          in order to "ping" the server.                    */
/*                                                            */
/* Author : A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 12-Jan-2000 (ADH): Created.                       */
/**************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdbool.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "CallOut.h"
#include "Connect.h"
#include "Generic.h"
#include "Headers.h"
#include "Module.h"
#include "RTSPOErrors.h"
#include "Session.h"
#include "Status.h"
#include "Utils.h"

#include "GetParam.h"

/**************************************************************/
/* getparam_proceed_on_callout()                              */
/*                                                            */
/* A CallOut handler (see CallOut.h) which drives the server  */
/* "pinging". See getparam_send for more.                     */
/*                                                            */
/* THIS FUNCTION MUST BE RE-ENTRANT.                          */
/*                                                            */
/* Parameters: The handle should point to the session struct  */
/*             we're interested in.                           */
/**************************************************************/

void getparam_proceed_on_callout(void * handle)
{
  session * s = (session *) handle;

  dprintf(("", "getparam_proceed_on_callout: Called for %p, forwarding to getparam_send\n", s));

  s->gp_set = 0;

  getparam_send(s);
}

/**************************************************************/
/* getparam_send()                                            */
/*                                                            */
/* Construct a new session as a child of a given one and use  */
/* it to send the empty GET_PARAMETER command.                */
/*                                                            */
/* Parameters: Pointer to the parent session.                 */
/**************************************************************/

_kernel_oserror * getparam_send(session * s)
{
  _kernel_oserror * e;
  bool              fail = false;
  char            * port;
  session         * new_s;

  dprintf(("", "getparam_send: Called\n"));

  if (s->server_session == NULL)
  {
    dprintf(("", "getparam_send: No server session\n"));

    return make_error(rtspovs_ERROR_NO_SERVER_SESSION, 0);
  }

  /* Create a new session */

  e = session_new_session(&new_s);
  if (e)
  {
    dprintf(("", "getparam_send: session_new_session error '%s'\n", e->errmess));
    return e;
  }

  if (new_s == NULL)
  {
    dprintf(("", "getparam_send: Out of memory for new_s\n"));
    return make_error(rtspovs_ERROR_MEMORY_EXHAUSTED, 0);
  }

  new_s->id     = (int) new_s;

  new_s->parent = s;
  s->child      = new_s;

  /* Ensure everything is initialised for a new command in this clean session */

  session_reset_session(new_s);

  if (
       headers_add_header(&new_s->headers,
                          Headers_CommandName_GetParameter,
                          s->url->full)
       == NULL
     )
     fail = true;

  /* A sequence header */

  else if (headers_add_sequence_header(&new_s->headers) == NULL) fail = true;

  /* No AEN, so Connection: close */

  else if (
            headers_add_header(&new_s->headers,
                               Headers_HeaderName_Connection,
                               Headers_HeaderValue_Connection)
            == NULL
          )
          fail = true;

  /* Content length */

  else if (
            headers_add_header(&new_s->headers,
                               Headers_HeaderName_ContentLength,
                               "0")
            == NULL
          )
          fail = true;

  /* Lastly, the session header */

  else if (
            headers_add_header(&new_s->headers,
                               Headers_HeaderName_Session,
                               s->server_session)
            == NULL
          )
          fail = true;

  /* Did anything fail? */

  if (fail)
  {
    dprintf(("", "getparam_send: Out of memory\n"));
    session_free_item(new_s);
    return make_error(rtspovs_ERROR_MEMORY_EXHAUSTED, 0);
  }

  /* This session should self destruct */

  new_s->destruct = 1;

  /* Open a connection to send the command down */

  if (s->url->port && *s->url->port) port = s->url->port;
  else                               port = NULL;

  new_s->sd = opensock(s->url->host,
                       RTSPOVS_DefaultPort,
                       port,
                       &new_s->state,
                       -1);

  new_s->last = utils_read_time();

  dprintf(("", "getparam_send: Socket descriptor %d, state %d\n", s->sd, s->state));

  /* Set the state machine going to see errors and DNS stuff; */
  /* in addition, rerun it for the parent session to get      */
  /* another GET_PARAMETER scheduled.                         */

  new_s->callout_set = 1;
  timeout(status_proceed_on_callout, new_s, Session_State_Timer);

  if (s->callout_set == 0)
  {
    s->callout_set = 1;
    timeout(status_proceed_on_callout, s, Session_State_Timer);
  }

  dprintf(("", "getparam_send: Successful\n"));

  return NULL;
}
