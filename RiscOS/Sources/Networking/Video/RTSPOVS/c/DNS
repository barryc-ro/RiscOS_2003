/***************************************************/
/* File   : DNS.c                                  */
/*          (C) 1999 Pace Micro Technology PLC     */
/*          All rights reserved                    */
/*                                                 */
/* Purpose: Generic DNS functions.                 */
/*                                                 */
/* Author : S.N.Brodie.                            */
/*                                                 */
/* History: 26-Nov-1999 (ADH): Imported.           */
/***************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include "kernel.h"
#include "swis.h"
#include "sys/types.h"
#include "netinet/in.h"
#include "netdb.h"
#include "sys/errno.h"
#include "arpa/inet.h"
#include "dns.h"

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include "debuglib/debuglib.h"

#define Resolver_GetHostByName  (0x46000)
#define Resolver_GetHost        (0x46001)

/* This source file can be used totally independently of any specific protocol module.
 * All it exports is a function for polling a DNS lookup which should be called during
 * a state machine dispatch function from the main ReadData protocol SWI.
 */

 /* It relies on the Resolver 0.48 or later module being loaded and present.  The Acorn
  * browser will ensure that this is the case, but for safety's sake, we'll check
  * that resolver is present.
  */

static int resolver_present = -1;

static int dns_resolver_46001_present(void)
{
        char buffer[40];
        _kernel_oserror *e;

        e = _swix(OS_SWINumberToString, _IN(0)|_IN(1)|_IN(2),
                Resolver_GetHost, buffer, sizeof(buffer));

        return (!e && strncmp(buffer, "Resolver_GetHost", sizeof("Resolver_GetHost")) == 0);
}

/* Convert name or ip number string to an in_addr */
static int get_host_address(const char *name, struct in_addr *addr)
{
        struct hostent *h;

        if ((h = gethostbyname(name)) != NULL) {
                *addr = **((struct in_addr **)h->h_addr_list);
                dprintf(("", "Resolve succeeded (gethostbyname) `%s' --> %s\n", name, inet_ntoa(*addr)));
                return 0;
        }

        return ENOENT;
}


/* Lookup the IP address of a remote host.  The return parameter is errno.
 * The "sin" parameter will be updated with IP address of the remote host
 * This is only valid if the return value was zero
 */
int dns_find_ip_address(const char *hostname, struct in_addr *ip)
{
        _kernel_oserror *e;
        int errno;  /* <-- we are preserving the global errno */
        struct hostent *h;

        dprintf(("", "Looking up host `%s'\n", hostname));

        if (inet_aton(hostname, ip)) {
                /* We were supplied with a dotted-quad address */
                dprintf(("", "Dotted-quad address supplied: %s\n", hostname));
                return 0;
        }

        if (resolver_present == -1) {
                resolver_present = dns_resolver_46001_present();
                dprintf(("", "Acorn DNS Resolver presence check: %s\n", resolver_present ? "Yes" : "No!!!"));
        }

        if (!resolver_present) {
                return get_host_address(hostname, ip);
        }
        else {
                e = _swix(Resolver_GetHost, _IN(0) | _OUT(0) | _OUT(1), hostname, &errno, &h);
                dprintf(("", "e=%p; R0 was %d (dec); R1 was %p\n", e, errno, h));
        }

        if (e || errno<0) return ENOENT;
        if (errno == EINPROGRESS || h == NULL) return errno;

        /* To get here, we got a valid hostent */
        *ip = **((struct in_addr **)h->h_addr_list);
        dprintf(("", "Resolve succeeded: `%s' --> `%s'\n", hostname, inet_ntoa(*ip)));
        return 0;
}
