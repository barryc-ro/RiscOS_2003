/**************************************************************/
/* File:    Setup.c                                           */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Implement RTSPOVS_Setup.                          */
/*                                                            */
/* Author:  A.D.Hodgkinson. Based on URL_Fetcher source by    */
/*          S.N.Brodie and P. Wain.                           */
/*                                                            */
/* History: 08-Nov-1999 (ADH): Created.                       */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#include <swis.h>
#include <socklib.h>
#include <inetlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <VideoCtrl.h> /* Exported by VideoCtrl's !MkExport */

#include "CallOut.h"
#include "Connect.h"
#include "Generic.h"
#include "Global.h"
#include "Headers.h"
#include "Module.h"
#include "RTSPOErrors.h"
#include "Session.h"
#include "Status.h"
#include "URLutils.h"
#include "URLveneer.h"
#include "Utils.h"

#include "Setup.h"

/* Local functions */

static _kernel_oserror * setup_add_transport_header (session * s);
static _kernel_oserror * setup_add_destination      (session * s);
static _kernel_oserror * setup_read_loop_option     (session * s, unsigned int vcid);
static _kernel_oserror * setup_read_extension_block (session * s, vc_setup * setup);
static _kernel_oserror * setup_convert_url          (session * s);

static size_t            setup_hex_escape_len       (size_t running_total, const char * path);
static size_t            setup_hex_escape_path_cpy  (char * dest, const char * src);

/**************************************************************/
/* setup_setup()                                              */
/*                                                            */
/* Implement RTSPOVS_Setup. See the Video Control             */
/* specification, 2501,817/FS, for more.                      */
/**************************************************************/

_kernel_oserror * setup_setup(_kernel_swi_regs * r)
{
  _kernel_oserror * e;
  session         * s;
  char            * url;
  int               port;
  bool              fail = false;

  dprintf(("", "setup_setup: Called\n"));

  /* Just in case, make sure we're not already set up */

  if (session_find_by_id(r->r[1]) != NULL)
  {
    dprintf(("", "setup_setup: Already set up\n"));
    return make_error(rtspovs_ERROR_ALREADY_SETUP, 0);
  }

  /* Gain ourselves a session */

  e = session_new_session(&s);

  if (e != NULL)
  {
    dprintf(("", "setup_setup: session_new_session error '%s'\n", e->errmess));
    return e;
  }

  if (s == NULL)
  {
    dprintf(("", "setup_setup: Out of memory\n"));
    return make_error(rtspovs_ERROR_MEMORY_EXHAUSTED, 0);
  }

  s->id   = ++id_counter; /* See Global.h */
  s->vcid = (unsigned int) r->r[1];

  /* Need to ask Video Control what the current loop setting is */

  e = setup_read_loop_option(s, s->vcid);

  if (e != NULL)
  {
    dprintf(("", "setup_setup: Error '%s' from setup_read_loop_option\n", e->errmess));
    session_free_item(s);
    return e;
  }

  /* Fill in the new item */

  if (r->r[2] != 0) url = (char *) r->r[2];
  else              url = "";

  e = urlutils_return_description(url, &s->url);

  if (e != NULL)
  {
    dprintf(("", "setup_setup: Error '%s' from urlutils_return_description\n", e->errmess));
    session_free_item(s);
    return e;
  }

  if (s->url == NULL) fail = true;

  /* Is there a ticket to copy? */

  else if ((r->r[0] & VC_Setup_ExtensionBlockInR7) && r->r[7] != 0)
  {
    e = setup_read_extension_block(s, (vc_setup *) r->r[7]);

    if (e != NULL)
    {
      dprintf(("", "setup_setup: Error '%s' from setup_read_extension_block\n", e->errmess));
      session_free_item(s);
      return e;
    }
  }

  /* We may have an authorization URL; the ticket in a parameter block will */
  /* override it, but either way the authorization URL needs turning into   */
  /* an RTSP URL.                                                           */

  e = setup_convert_url(s);

  if (e != NULL)
  {
    dprintf(("", "setup_setup: Error '%s' from setup_convert_url\n", e->errmess));
    session_free_item(s);
    return e;
  }

  /* Add the SETUP command */

  if (
       fail == false &&

       headers_add_header(&s->headers,
                          Headers_CommandName_Setup,
                          s->url->full)
       == NULL
     )
     fail = true;

  /* Add sequence number and OVS "prepare assets" command to avoid DESCRIBE */

  else if (headers_add_sequence_header(&s->headers) == NULL) fail = true;

  else if (
            headers_add_header(&s->headers,
                               Headers_HeaderName_Prepare,
                               Headers_HeaderValue_Prepare)
            == NULL
          )
          fail = true;

  /* We don't use anything nice like AEN, deadlinetastic */

  else if (
            headers_add_header(&s->headers,
                               Headers_HeaderName_Connection,
                               Headers_HeaderValue_Connection)
            == NULL
          )
          fail = true;

  else
  {
    /* Get extra data from the client and store it. First, */
    /* the optional Transport entry.                       */

    if (r->r[3] != 0)
    {
      const char * r3 = (const char*) r->r[3];

      /* If the custom header doesn't have a destination specifier, then */
      /* we still need to add one ourselves.                             */

      if (strstr(r3, Headers_HeaderValue_TransportDst) == NULL)
      {
        char * value = malloc(strlen(r3) + sizeof(Headers_HeaderValue_TransportDst)); /* sizeof() includes NUL */

        if (value == NULL)
        {
          fail = true;
        }
        else
        {
          sprintf(value, "%s%s", r3, Headers_HeaderValue_TransportDst);

          if (
               headers_add_header(&s->headers,
                                  Headers_HeaderName_Transport,
                                  value)
               == NULL
             )
          {
            fail = true;
          }
          else
          {
            s->connected_cb = setup_add_destination;
          }

          free(value);
        }
      }
      else
      {
        if (
             headers_add_header(&s->headers,
                                Headers_HeaderName_Transport,
                                (const char *) r->r[3])
             == NULL
           )
           fail = true;
      }
    }
    else
    {
      /* We find the local IP address to give in the Transport header */
      /* using getsockname on the socket - once it's connected. So,   */
      /* set the connection callback function to do just that.        */

      s->connected_cb = setup_add_transport_header;
    }

    /* Any extra stuff? */

    if (fail == false && r->r[4] != 0)
    {
      headers_parse_user_header((char *) r->r[4], strlen((char *) r->r[4]), s);
    }

    /* Support R5 and R6 body data extensions. OVS will object to anything */
    /* in the SETUP body right now, but in future it might not.            */

    if (r->r[5] != 0 && r->r[6] > 0)
    {
      s->data = malloc(r->r[6]);

      if (s->data == NULL)
      {
        fail = true;
      }
      else
      {
        rtsp_header * cl = headers_find_header(s->headers, Headers_HeaderName_ContentLength);

        s->data_len = r->r[6];
        memcpy(s->data, (void *) r->r[5], r->r[6]);

        /* If we have a Content-length header which is wrong, delete it.   */
        /* If we never have, or now have no Content-length header, add it. */

        if (cl != NULL && atoi(cl->value) != r->r[6])
        {
          headers_delete_header(&s->headers, cl);
          cl = NULL;
        }

        if (cl == NULL)
        {
          char number[16];

          sprintf(number, "%u", r->r[6]);

          if (
               headers_add_header(&s->headers,
                                  Headers_HeaderName_ContentLength,
                                  number)
               == NULL
             )
             fail = true;
        }
      }
    }
  }

  /* Did anything fail (out of memory)? */

  if (fail)
  {
    dprintf(("", "setup_setup: Out of memory (1)\n"));
    session_free_item(s);
    return make_error(rtspovs_ERROR_MEMORY_EXHAUSTED, 0);
  }

  /* Otherwise, if we have a ticket, we'll probably need to resend this */
  /* SETUP command again - so store a copy of the headers for future    */
  /* use.                                                               */

  else if (s->ticket != NULL && s->setup_copy == NULL)
  {
    rtsp_header * h = s->headers;
    rtsp_header * n;

    while (h != NULL)
    {
      /* Don't copy CSeq as we'll need to add a new one if the SETUP has to */
      /* be resent.                                                         */

      if (Strcmp_ci(h->header, Headers_HeaderName_Sequence))
      {
        n = headers_add_header(&s->setup_copy,
                               h->header,
                               h->value);

        if (n == NULL)
        {
          dprintf(("", "setup_setup: Out of memory (2)\n"));
          session_free_item(s);
          return make_error(rtspovs_ERROR_MEMORY_EXHAUSTED, 0);
        }
      }

      h = h->next;
    }
  }

  /* Need to get a socket open to the server. The call to opensock */
  /* will also initialise the state indicators within the session  */
  /* structure to allow the state machine to work.                 */

  if (s->url->port && *s->url->port) port = atoi(s->url->port);
  else                               port = RTSPOVS_DefaultPort;

  s->sd = opensock(s->url->host,
                   port,
                   NULL,
                   &s->state,
                   -1);

  if (s->state == protostate_ERROR) s->err_no = -s->sd;

  s->last = utils_read_time();

  dprintf(("", "setup_setup: Socket descriptor %d, state %d\n", s->sd, s->state));

  /* Set the state machine going to see errors and DNS stuff */

  if (s->callout_set == 0) /* It definitely should be, this is a brand new session! */
  {
    s->callout_set = 1;
    timeout(status_proceed_on_callout, s, Session_State_Timer);
  }

  /* Don't forget to tell Video Control about our session handle */
  /* before returning                                            */

  r->r[1] = (int) s->id;

  return NULL;
}

/**************************************************************/
/* setup_resend_setup()                                       */
/*                                                            */
/* Resend a SETUP command for OVS ticketing, for a given      */
/* session. Designed to be called from within the state       */
/* machine with the state machine to be told to rerun after   */
/* calling.                                                   */
/*                                                            */
/* Parameters: Pointer to the session structure relevant to   */
/*             the SETUP command to send.                     */
/**************************************************************/

_kernel_oserror * setup_resend_setup(session * s)
{
  int port;

  dprintf(("", "setup_resend_setup: Called\n"));

  session_reset_session(s);

  /* Make the copied command the live command */

  free(s->data);
  s->data_len = 0;

  headers_free_headers(&s->headers);
  s->headers    = s->setup_copy;
  s->setup_copy = NULL;

  /* Make sure there's a sequence header added */

  if (headers_add_sequence_header(&s->headers) == NULL)
  {
    return make_error(rtspovs_ERROR_MEMORY_EXHAUSTED, 0);
  }

  /* Add ticketing header if able - ignore NULL returns here */

  headers_add_challenge_response(&s->headers,
                                 s,
                                 Headers_CommandName_Setup);

  /* Need to get a socket open to the server. The call to opensock */
  /* will also initialise the state indicators within the session  */
  /* structure to allow the state machine to work.                 */

  if (s->url->port && *s->url->port) port = atoi(s->url->port);
  else                               port = RTSPOVS_DefaultPort;

  s->sd = opensock(s->url->host,
                   port,
                   NULL,
                   &s->state,
                   -1);

  if (s->state == protostate_ERROR) s->err_no = -s->sd;

  s->last = utils_read_time();

  dprintf(("", "setup_resend_setup: Socket descriptor %d, state %d\n", s->sd, s->state));

  return NULL;
}

/**************************************************************/
/* setup_add_transport_header()                               */
/*                                                            */
/* Add a Transport header to the headers in the given session */
/* just after the head item (assumes at least one header will */
/* be set up - the SETUP command itself, for example).        */
/*                                                            */
/* This is done on the basis of getsockname for the socket    */
/* held by the session (so you must have connected to a       */
/* server). The function is intended as a state machine       */
/* socket connection callback handler.                        */
/*                                                            */
/* Parameters: Pointer to the session struct.                 */
/**************************************************************/

static _kernel_oserror * setup_add_transport_header(session * s)
{
  struct sockaddr_in name;
  int                namelen = sizeof(name);

  dprintf(("", "setup_add_transport_header: Called for %p\n", s));

  /* Use getsockname to get our IP address for the destination part */
  /* of the Transport header, and add it in.                        */

  if (getsockname(s->sd, (struct sockaddr *) (&name), &namelen) >= 0)
  {
    bool          fail = false;
    char        * value;
    char        * ip;

    ip = inet_ntoa(name.sin_addr);

    dprintf(("", "setup_add_transport_header: Our IP address is %s\n", ip));

    /* Construct the value. 6 is for adding ":<port>". */

    value = malloc(strlen(ip) + 6 + sizeof(Headers_HeaderValue_Transport));

    if (value == NULL) fail = true;
    else
    {
      /* Compile the full header value, including port */

      char * port = getenv(Headers_UDP_Port);

      if (!port || !*port || strlen(port) > 5) sprintf(value, "%s%s",    Headers_HeaderValue_Transport, ip);
      else                                     sprintf(value, "%s%s:%s", Headers_HeaderValue_Transport, ip, port);

      /* Add the new header */

      if (
           headers_add_below_head(&s->headers,
                                  Headers_HeaderName_Transport,
                                  value)
           == NULL
         )
      {
        fail = true;
      }

      /* Are we maintaining a copy of the SETUP command? */

      if (s->setup_copy != NULL && fail == false)
      {
        if (
             headers_add_below_head(&s->setup_copy,
                                    Headers_HeaderName_Transport,
                                    value)
             == NULL
           )
        {
          fail = true;
        }
      }
    }

    free(value);

    /* Handle failure, else the headers are all assembled correctly now. */

    if (fail)
    {
      dprintf(("", "setup_add_transport_header: Failed (out of memory)\n"));

      return make_error(rtspovs_ERROR_MEMORY_EXHAUSTED, 0);
    }
  }

  dprintf(("", "setup_add_transport_header: Finished\n"));

  return NULL;
}

/**************************************************************/
/* setup_add_destination()                                    */
/*                                                            */
/* As setup_add_transport_header, but only adds in a missing  */
/* destination to an existing Transport item.                 */
/*                                                            */
/* Parameters: Pointer to the session struct.                 */
/**************************************************************/

static _kernel_oserror * setup_add_destination(session * s)
{
  struct        sockaddr_in name;
  int           namelen = sizeof(name);
  rtsp_header * current;

  dprintf(("", "setup_add_destination: Called for %p\n", s));

  /* Find the existing header */

  current = headers_find_header(s->headers, Headers_HeaderName_Transport);

  if (current == NULL)
  {
    dprintf(("", "setup_add_destination: Cannot find an existing Transport header\n"));
    return NULL;
  }

  /* Use getsockname to get our IP address for the destination part */
  /* of the Transport header, and add it in.                        */

  if (getsockname(s->sd, (struct sockaddr *) (&name), &namelen) >= 0)
  {
    bool          fail = false;
    char        * value;
    char        * ip;

    ip = inet_ntoa(name.sin_addr);

    dprintf(("", "setup_add_destination: Our IP address is %s\n", ip));

    /* Construct the value. 7 is for adding ":<port>" and NUL. */

    value = malloc(strlen(ip) + strlen(current->header) + 7);

    if (value == NULL) fail = true;
    else
    {
      /* Compile the full header value, including port */

      char * port = getenv(Headers_UDP_Port);

      if (!port || !*port || strlen(port) > 5) sprintf(value, "%s%s",    current->value, ip);
      else                                     sprintf(value, "%s%s:%s", current->value, ip, port);

      /* Delete the old and add the new header */

      headers_delete_header(&s->headers, current);

      if (
           s->headers == NULL ||
           headers_add_below_head(&s->headers,
                                  Headers_HeaderName_Transport,
                                  value)
           == NULL
         )
      {
        fail = true;
      }

      /* Are we maintaining a copy of the SETUP command? */

      if (s->setup_copy != NULL && fail == false)
      {
        if (
             headers_add_below_head(&s->setup_copy,
                                    Headers_HeaderName_Transport,
                                    value)
             == NULL
           )
        {
          fail = true;
        }
      }
    }

    free(value);

    /* Handle failure, else the headers are all assembled correctly now. */

    if (fail)
    {
      dprintf(("", "setup_add_destination: Failed (out of memory)\n"));

      return make_error(rtspovs_ERROR_MEMORY_EXHAUSTED, 0);
    }
  }

  dprintf(("", "setup_add_destination: Finished\n"));

  return NULL;
}

/**************************************************************/
/* setup_read_loop_option()                                   */
/*                                                            */
/* Find out whether looping is switched on using              */
/* VideoControl_Options and write the result into the given   */
/* session's 'loop' field.                                    */
/*                                                            */
/* Parameters: Pointer to a session struct to update;         */
/*                                                            */
/*             Video Control client ID to use.                */
/**************************************************************/

static _kernel_oserror * setup_read_loop_option(session * s, unsigned int vcid)
{
  _kernel_oserror * e;
  int               opts[4];

  opts[0] = vc_tags_looping;
  opts[1] = 1;
  opts[2] = 0;
  opts[3] = vc_tags__end;

  e = _swix(VideoControl_ProtocolOptions,
            _INR(0,2),

            0,
            vcid,
            opts);

  if (e == NULL) s->loop = !!opts[2];

  return e;
}

/**************************************************************/
/* setup_read_extension_block()                               */
/*                                                            */
/* Read a Setup extension block, trying to find an            */
/* authorisation block that we can use as an OVS ticket.      */
/*                                                            */
/* Parameters: Pointer to a relevant session structure;       */
/*                                                            */
/*             Pointer to the Setup extension block.          */
/**************************************************************/

static _kernel_oserror * setup_read_extension_block(session * s, vc_setup * setup)
{
  vc_setup     * current;
  unsigned int   next;

  dprintf(("", "setup_read_extension_block: Called\n"));

  if (s == NULL || setup == NULL) return NULL;

  current = setup;

  while (current->header.tag != vc_setup_tags__end)
  {
    switch (current->header.tag)
    {
      /* If we find the authorisation block, copy it, ensuring NUL termination */

      case vc_setup_tags_authorisation_block:
      {
        const char * ticket = &current->data.authorisation_block;
        size_t       size   = current->header.data_size;

        if (s->ticket == NULL)
        {
          if (ticket[size - 1] != '\0') size++;

          dprintf(("", "setup_read_extension_block: Ticket size including terminator %d\n",size));

          s->ticket = malloc(size);
          if (s->ticket == NULL) return make_error(rtspovs_ERROR_MEMORY_EXHAUSTED, 0);

          memcpy(s->ticket, ticket, current->header.data_size);
          s->ticket[size - 1] = '\0';

          dprintf(("", "setup_read_extension_block: Ticket is '%s'\n", s->ticket));
        }
      }
      break;
    }

    next = (
             ((unsigned int) current)    +
             sizeof(current->header)     +
             (current->header.data_size)
           );

    dprintf(("", "setup_read_extension_block: Add %d (word aligned: %d)\n", (int) next, (int) WordAlign(next)));

    current = (vc_setup *) WordAlign(next);
  }

  dprintf(("", "setup_read_extension_block: Finished\n"));

  return NULL;
}

/**************************************************************/
/* setup_convert_url()                                        */
/*                                                            */
/* If the URL in the given session structure is an            */
/* authorization item, convert it to a normal fetch item for  */
/* the video server. If there is a query string, use this as  */
/* a ticket, provided that the session does not already hold  */
/* its own ticket string already.                             */
/*                                                            */
/* Parameters: Pointer to the session structure.              */
/**************************************************************/

static _kernel_oserror * setup_convert_url(session * s)
{
  _kernel_oserror * e;

  dprintf(("", "setup_convert_url: Called\n"));

  if (!Strcmp_ci(s->url->protocol, RTSPOVS_AuthFetchSchemeS))
  {
    url_description ru;

    if (s->ticket == NULL)
    {
      /* The query string forms the ticket */

      if (s->url->query == NULL || *s->url->query == '\0')
      {
        return make_error(rtspovs_ERROR_INVALID_AUTH_URL, 0);
      }
      else
      {
        s->ticket = Strdup(s->url->query);
        if (s->ticket == NULL) return make_error(rtspovs_ERROR_MEMORY_EXHAUSTED, 0);
      }
    }

    /* Turn the authentication URL into an RTSP URL */

    ru.full     = malloc((strlen(s->url->full) * 3) + sizeof(RTSPOVS_AuthFetchScheme));
    ru.protocol = Strdup(RTSPOVS_FetchSchemeS);
    ru.query    = NULL;

    ru.host     = s->url->host     == NULL ? NULL                   : Strdup(s->url->host);
    ru.port     = s->url->port     == NULL ? RTSPOVS_DefaultPortStr : Strdup(s->url->port);
    ru.user     = s->url->user     == NULL ? NULL                   : Strdup(s->url->user);
    ru.password = s->url->password == NULL ? NULL                   : Strdup(s->url->password);
    ru.account  = s->url->account  == NULL ? NULL                   : Strdup(s->url->account);
    ru.fragment = s->url->fragment == NULL ? NULL                   : Strdup(s->url->fragment);

    /* Path may have to be prefixed (see Setup.h) */

    if (s->url->path != NULL && *s->url->path != '\0')
    {
      ru.path = malloc(strlen(s->url->path) + sizeof(Setup_Conversion_Path_Prefix));
      if (ru.path != NULL) sprintf(ru.path, "%s%s", Setup_Conversion_Path_Prefix, s->url->path);
    }
    else ru.path = Strdup(Setup_Conversion_Path_Prefix);

    /* Turn any colons in the path into ":" in possibly the least efficient manner */
    /* in the history of all mankind.                                              */

    if (ru.path != NULL)
    {
      size_t elen = setup_hex_escape_len(0, ru.path);
      size_t slen = strlen(ru.path);

      if (elen > 0)
      {
        char * newstr = malloc(slen + elen + 1);

        if (newstr == NULL)
        {
          free(ru.path);
          ru.path = NULL;
        }
        else
        {
          setup_hex_escape_path_cpy(newstr, ru.path);
          free(ru.path);
          ru.path = newstr;
        }
      }
    }

    /* Did that work? */

    if (
         ru.full                                  == NULL  ||
         ru.protocol                              == NULL  ||
         (s->url->host     != NULL && ru.host     == NULL) ||
         (s->url->port     != NULL && ru.port     == NULL) ||
         (s->url->user     != NULL && ru.user     == NULL) ||
         (s->url->password != NULL && ru.password == NULL) ||
         (s->url->account  != NULL && ru.account  == NULL) ||
         (s->url->path     != NULL && ru.path     == NULL) ||
         (s->url->fragment != NULL && ru.fragment == NULL)
       )
    {
      free(ru.protocol); free(ru.host);     free(ru.port);
      free(ru.user);     free(ru.password); free(ru.account);
      free(ru.path);     free(ru.fragment);

      return make_error(rtspovs_ERROR_MEMORY_EXHAUSTED, 0);
    }
    else
    {
      *ru.full = '\0';

      e = _swix(URL_ParseURL,
                _INR(0,5),

                URL_ParseURL_LengthInR5 | URL_ParseURL_HexEscape,
                URL_ParseURL_Reason_ComposeFromComponents,
                NULL,
                NULL,
                &ru,
                10); /* Regardless of the actual structure's size, we've only filed in this many items */

      free(ru.protocol); free(ru.host);     free(ru.port);
      free(ru.user);     free(ru.password); free(ru.account);
      free(ru.path);     free(ru.fragment);

      if (e != NULL)
      {
        dprintf(("", "setup_convert_url: Error '%s' from URL_ParseURL\n", e->errmess));
        free(ru.full);
        return e;
      }

      dprintf(("", "setup_convert_url: OK, full URL = '%s'\n", ru.full));

      if (*ru.full == '\0')
      {
        free(ru.full);
        return make_error(rtspovs_ERROR_INVALID_AUTH_URL, 0);
      }
      else
      {
        urlutils_free_description(s->url);

        s->url = NULL;
        e      = urlutils_return_description(ru.full, &s->url);

        free(ru.full);

        if (e != NULL)
        {
          dprintf(("", "setup_convert_url: Error '%s' from urlutils_return_description\n", e->errmess));
          return e;
        }
      }
    }
  }

  dprintf(("", "setup_convert_url: Finished\n"));

  return NULL;
}

/**************************************************************/
/* setup_hex_escape_len()                                     */
/*                                                            */
/* Count the number of hex escape chars (presently only a     */
/* colon) that we want to escape, which URL Fetcher will not  */
/* escape itself.                                             */
/*                                                            */
/* Code adapted from URL Fetcher.                             */
/*                                                            */
/* Parameters: 0 on first call;                               */
/*                                                            */
/*             Path to examine.                               */
/*                                                            */
/* Returns:    Number of escapable characters (presently this */
/*             is just colons).                               */
/**************************************************************/

static size_t setup_hex_escape_len(size_t running_total, const char * path)
{
  const char p = *path++;

  if (p == 0)   return running_total;
  if (p == ':') return setup_hex_escape_len(running_total + 2, path);

  return setup_hex_escape_len(running_total, path);
}

/**************************************************************/
/* setup_hex_escape_path_cpy()                                */
/*                                                            */
/* Copy a path into a buffer, hex escaping any character that */
/* setup_hex_escape_len would escape in passing.              */
/*                                                            */
/* Hex escaping is done in lower case (since this was first   */
/* introduced to support OVS ticketing, and the only thing to */
/* work off aside from the Oracle document was a packet dump  */
/* that showed a lower case hex escaped URL; to make the      */
/* authorization response match, this function had to do the  */
/* same thing).                                               */
/*                                                            */
/* Code adapted from URL Fetcher.                             */
/*                                                            */
/* Parameters: Pointer to destination buffer which must be    */
/*             large enough (see setup_hex_escape_len);       */
/*                                                            */
/*             Pointer to source string.                      */
/*                                                            */
/* Returns:    Length of finished string.                     */
/**************************************************************/
/*                                                            */
static size_t setup_hex_escape_path_cpy(char * dest, const char * src)
{
  size_t count = 0;

  for (;;)
  {
    const char p = *src++;

    if (!p)
    {
      *dest = p;
      return count;
    }

    if (p == ':')
    {
      register const unsigned int ch            = (unsigned int) p;
      static const char           hex_chars[16] = {
                                                    '0', '1', '2', '3',
                                                    '4', '5', '6', '7',
                                                    '8', '9', 'a', 'b',
                                                    'c', 'd', 'e', 'f'
                                                  };
      *dest++ = '%';
      *dest++ = hex_chars[ch / 16];
      *dest++ = hex_chars[ch % 16];

      count += 3;
    }
    else
    {
      *dest++ = p;
      ++count;
    }
  }
}
