/***************************************************/
/* File   : Generic.c                              */
/*          (C) 1999 Pace Micro Technology PLC     */
/*          All rights reserved                    */
/*                                                 */
/* Purpose: Functions not specific to this module. */
/*                                                 */
/* Author : A.D.Hodgkinson. Based on URL_Fetcher   */
/*          source by S.N.Brodie and P. Wain.      */
/*                                                 */
/* History: 08-Nov-1999 (ADH): Created.            */
/***************************************************/

#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <kernel.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/errno.h>
#include <socklib.h>

#include "Generic.h"

/* Create an exact copy of s1 in fresh(clean) memory */

char * Strdup(const char *s1)
{
        if (s1 == NULL) {
                return NULL;
        }
        else {
                const size_t length = strlen(s1) + 1;
                char *const s2 = malloc(length);

                if (s2 == NULL) return NULL;
                return memcpy(s2, s1, length);
        }
}


/*
 * Compare two strings case insensitively up to a maximum char count
 *
 * Originally: sbrodie
 *
 * Parameters: matches those of strncmp.
 * Result: matches the exit conditions of strncmp.
 *
 *
 * The conversions to unsigned int stop the compiler messing around with
 * shifts all over the place whilst trying to promote the chars to int
 * whilst retaining the sign.
 *
 * Problems: Choice of return value when strings do not match is based
 *           upon character number rather than any alphabetic sorting.
 *
 */

int Strncmp_ci(const char *first, const char *second, size_t limit)
{
        for (;limit;--limit) {
                unsigned int a = *first++;
                unsigned int b = *second++;

                if (a == 0) return -b;
                if (a != b) {
                        unsigned int c = (unsigned int) tolower(a);
                        unsigned int d = (unsigned int) tolower(b);
                        signed int result = c - d;
                        if (result != 0) return result;
                }
        }

        return 0;
}

/*
 * Compare two strings case insensitively
 *
 * Originally: sbrodie
 *
 * Parameters: matches those of strcmp.
 * Result: matches the exit conditions of strcmp.
 *
 *
 * The conversions to unsigned int stop the compiler messing around with
 * shifts all over the place whilst trying to promote the chars to int
 * whilst retaining the sign.
 *
 * Problems: Choice of return value when strings do not match is based
 *           upon character number rather than any alphabetic sorting.
 *
 */

int Strcmp_ci(const char *first, const char *second)
{
        for (;;) {
                unsigned int a = *first++;
                unsigned int b = *second++;

                if (a == 0) return -b;
                if (a != b) {
                        unsigned int c = (unsigned int) tolower(a);
                        unsigned int d = (unsigned int) tolower(b);
                        signed int result = c - d;
                        if (result != 0) return result;
                }
        }
}

/*
 * Close a socket
 *
 * Originally: sbrodie, I think
 *
 * Parameters: Pointer to the socket descriptor of the socket to close
 * Result: -1 (failure) or result of socketclose() call
 *
 */

int close_socket(int *psd)
{
        const int sd = *psd;
        if (sd == -1) {
                errno = ENOTSOCK;
                return -1;
        }
        *psd = -1;
        (void) shutdown(sd, 2);
        return socketclose(sd);
}
