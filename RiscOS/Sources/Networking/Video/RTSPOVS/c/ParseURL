/***************************************************/
/* File   : ParseURL.c                             */
/*                                                 */
/* Purpose: Minimal URL parsing stuff.             */
/*                                                 */
/* Author : A.D.Hodgkinson. Based on URL_Fetcher   */
/*          source by S.N.Brodie.                  */
/*                                                 */
/* History: 08-Nov-1999 (ADH): Created.            */
/***************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Generic.h"

#include "ParseURL.h"

/*************************************************/
/* parseurl_canonicalise()                       */
/*                                               */
/* Ensure an absolute URL is fully canonicalised */
/* and return that URL as a new malloc'd string. */
/*                                               */
/* Parameters: Flags for URL_ParseURL reason     */
/*             code 3;                           */
/*                                               */
/*             Pointer to the URL.               */
/*                                               */
/* Returns:    Canonical form of the URL, in a   */
/*             malloced block.                   */
/*                                               */
/* Assumes:    If there is an error from the SWI */
/*             the function attempts to return a */
/*             copy of the URL given to it.      */
/*************************************************/

char * parseurl_canonicalise(int flags, const char * url)
{
  _kernel_oserror * e;
  char            * ptr;
  int               blen;

  if (!url) url = "";

  /* Spec says buffer should be length (base) + length (rel) + 4. */
  /* Here we have no relative URL, just the base, and account for */
  /* a terminator (hence "+ 5").                                  */

  blen = strlen(url) + 5;
  ptr  = malloc(blen);

  if (!ptr) return NULL;

  e =  _swix(URL_ParseURL,

             _INR(0,5),
             flags,
             url_parseurl_quick_resolve,
             url,
             NULL,
             ptr,
             blen - 1);

  ptr[blen - 1] = '\0';

  if (e)
  {
    dprintf(("", "parseurl_canonicalise: Error '%s'\n", e->errmess));

    free(ptr);
    return Strdup(url);
  }
  else
  {
    dprintf(("", "parseurl_canonicalise: Canonical URL is '%s'\n", ptr));

    return ptr;
  }
}
