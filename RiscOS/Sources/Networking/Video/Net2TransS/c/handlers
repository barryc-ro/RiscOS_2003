/*	Project Jedi (003)
	Element 14 Ltd.
	Copyright © 1999. All Rights Reserved.

	FILE:		handlers.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.01 for RISC OS

	OVERVIEW
	========
	Source file for implementation of handlers support code for
	the Net2TransportStreamer module.

	HISTORY
	=======
	1999-01-19	0.01	RDW	Initial version
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <string.h>
#include "kernel.h"
#include "sys/types.h"
#include "unixlib.h"
#include "socklib.h"
#ifdef MemCheck_MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif
#include "Email/EmailLib/ELib_priv.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "common.h"
#include "header.h"
#include "socket.h"


/* ************************************************************************** */
/*                                                                            */
/* Externals                                                                  */
/*                                                                            */
/* ************************************************************************** */
extern void *module_wsp;							// Module workspace
extern process_details process1;


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Global variables to this file                                              */
/*                                                                            */
/* ************************************************************************** */
static fd_set fd_sockets;
static fd_set fd_read_test;
static struct timeval select_poll_time = 0;


/* ************************************************************************** */
/*                                                                            */
/* Function prototypes for functions private to this file                     */
/*                                                                            */
/* ************************************************************************** */
static int handle_Socket_Async_Event(_kernel_swi_regs *r, void *pw);


/* ************************************************************************** */
/*                                                                            */
/* Functions                                                                  */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   FUNCTION:       event_handler
   DESCRIPTION:    NOT DONE YET!
   DEPENDENCIES:   void*	module_wsp
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
extern int event_handler(_kernel_swi_regs *r, void *pw)
{
  int result = 1;

#ifdef MemCheck_MEMCHECK
  MemCheck_RegisterMiscBlock(r, sizeof(_kernel_swi_regs));
#endif

  if (pw != module_wsp)
    result = 1;
  else if (r->r[0] == Internet_Event)
  {
    _kernel_irqs_on();								// Put Interrupts back on as Internet_Event is actually generated on a callback

    switch(r->r[1])
    {
      case Socket_Async_Event:
      {
        result = handle_Socket_Async_Event(r, pw);
        break;
      }
      default:									// Catch all
      {
        result = 1;
        break;
      }
    } // endswitch
  } // endif Internet_Event
  else
    result = 1;

#ifdef MemCheck_MEMCHECK
  MemCheck_UnRegisterMiscBlock(r);
#endif

  return result;
}


/* ************************************************************************** */
/*
   FUNCTION:       handle_Socket_Async_Event
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
static int handle_Socket_Async_Event(_kernel_swi_regs *r, void *pw)
{
  static int result;
  static int nfound;
  result = 1;
  nfound = 0;

  UNUSED(pw);
  if (r->r[2] == process1.sock_num)						/* make sure it's our socket */
  {
    result = 0;
    FD_ZERO(&fd_sockets);
    FD_SET(process1.sock_num, &fd_sockets);
    FD_COPY(&fd_sockets, &fd_read_test);
    memset(&select_poll_time, 0, sizeof(select_poll_time));
    nfound = select(process1.sock_num+1, &fd_read_test, 0, 0, &select_poll_time);
    if ((nfound) && (FD_ISSET(process1.sock_num, &(fd_read_test))))		// if socket descriptor is ready for reading, then
    {
      get_data_from_socket(&process1);
    }
  }

  return result;
}
