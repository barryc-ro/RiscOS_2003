/*	Project Jedi (003)
	Element 14 Ltd.
	Copyright © 1999. All Rights Reserved.

	FILE:		tstreamer.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.03 for RISC OS

	OVERVIEW
	========
	Source file defining tstreamer structure
	Keep in sync. with tstreamer.h

	HISTORY
	=======
	1999-01-19	0.01	RDW	Initial version
	1999-02-26	0.02	RDW	tstreamer.auto_sync_card added to
					setting of CR0
					TSTREAMER_CR0_AUTO_SYNC define added
					tstreamer_output_status() modified to
					output if AUTO SYNC bit set
					tstreamer_setup() modified to take
					bool auto_sync_card, true means set
					for auto sync.
	1999-03-08	0.03	RDW	tstreamer_flush() added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include "sys/param.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "Email/Common/bool.h"
#include "DebugLib/DebugLib.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "tstreamer.h"


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */
#define TSTREAMER_BASE 0x88000000						// IO mapped address card is at
#define TSTREAMER_CR0  0x00800000
#define TSTREAMER_CR1  0x00800100
#define TSTREAMER_CR2  0x00800200
#define TSTREAMER_CR3  0x00800300
#define TSTREAMER_DATA 0x00800700

#define TSTREAMER_CLKRATE 0x32e6
//#define TSTREAMER_RATIO   128*1024/TSTREAMER_CLKRATE
#define TSTREAMER_RATIO   64/15625+0.5

#define TSTREAMER_CR0_AUTO_SYNC 0x00000400					// Bit in CR0 to set for autosync if streamer card supports it
#define TSTREAMER_FIFO_SIZE 128*1024						// size in bytes


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef struct
{
  volatile char *addr;
  volatile unsigned int  value;
} TStreamer_reg;


typedef struct
{
  bool           setup;
  bool           auto_sync_card;
  TStreamer_reg  cr[4];
  volatile char *data;

  unsigned int   bitrate;
} TStreamer;


/* ************************************************************************** */
/*                                                                            */
/* Macros                                                                     */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Globals to file                                                            */
/*                                                                            */
/* ************************************************************************** */
static TStreamer tstreamer;
static unsigned int tstreamer_padding_frame[] = { 0x471fff10, 0xffffffff,
0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
0xffffffff, 0xffffffff, 0xffffffff};


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */
static void write_to_cr(unsigned int reg_number, unsigned int value);


/* ************************************************************************** */
/*                                                                            */
/* Functions                                                                  */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
extern void tstreamer_initialise(void)
{
  memset(&tstreamer, 0, sizeof(tstreamer));					// clear TStreamer object
  tstreamer.setup = false;
  tstreamer.auto_sync_card = false;						// default to original tstreamer type
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
extern void tstreamer_setup(int podule_num, int bitrate, bool auto_sync_card)
{
  char* base = 0;

  dprintf(("", "tstreamer_setup: podule_num: %d\tbitrate: %d\n", podule_num, bitrate));
  tstreamer_initialise();
  base = (char*)(TSTREAMER_BASE + (podule_num << 24));

  tstreamer.cr[0].addr     = base + TSTREAMER_CR0;
  tstreamer.cr[1].addr     = base + TSTREAMER_CR1;
  tstreamer.cr[2].addr     = base + TSTREAMER_CR2;
  tstreamer.cr[3].addr     = base + TSTREAMER_CR3;
  tstreamer.data           = (char*)(base + TSTREAMER_DATA);
  tstreamer.bitrate        = bitrate;
  tstreamer.auto_sync_card = auto_sync_card;
  tstreamer.setup          = true;

//  tstreamer_reset();

  write_to_cr(1, (tstreamer.bitrate*TSTREAMER_RATIO));
  tstreamer_reset();
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
extern void tstreamer_reset(void)
{
  if (tstreamer.setup == true)
  {
    write_to_cr(0, 1<<6);							// reset all but DSS
    if (tstreamer.auto_sync_card)
    {
      write_to_cr(0, 0x0261 | TSTREAMER_CR0_AUTO_SYNC);				// setup EASI, 1/2 full start, run ,etc.
    }
    else
    {
      write_to_cr(0, 0x0261);							// setup EASI, 1/2 full start, run ,etc.
    }
    write_to_cr(2, 0x01);							// enable fifo empty irq, but leave global irq disabled
  }
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
extern void tstreamer_write(unsigned int words[], unsigned int number_of_words)
{
  unsigned int counter = 0;
#ifdef SPOOL
  FILE* fd = 0;
  char* sysvar = getenv("Net2TransStreamerOutput$Dir");
  if (sysvar)
    fd = fopen("<Net2TransStreamerOutput$Dir>.JediSpool", "ab+");
  else
    fd = fopen("JediSpool", "ab+");
#endif

  for (counter = 0;counter<number_of_words; counter++)
  {
#ifdef SPOOL
    if (fd)
    {
      fwrite(&(words[counter]), sizeof(unsigned int), 1, fd);
    }
#else
    *((unsigned int*)tstreamer.data) = words[counter];
#endif
  }

#ifdef SPOOL
  if (fd)
    fclose(fd);
#endif
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
static void write_to_cr(unsigned int reg_number, unsigned int value)
{
  *((unsigned int*)tstreamer.cr[reg_number].addr) = value;
  tstreamer.cr[reg_number].value = value;
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
static void write_to_cr_using_mask(unsigned int reg_number, unsigned int value, unsigned int mask)
{
  tstreamer.cr[reg_number].value = (tstreamer.cr[reg_number].value & ~mask) | value;
  *((unsigned int*)tstreamer.cr[reg_number].addr) = tstreamer.cr[reg_number].value;
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
static unsigned int read_from_cr(unsigned int reg_number)
{
  return *((unsigned int*)tstreamer.cr[reg_number].addr);
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
static void tstreamer_display_reg(int r)
{
  printf("tstreamer.cr[%d].addr:  %08x\n", r, (unsigned int)tstreamer.cr[r].addr);
  printf("*tstreamer.cr[%d].addr: %08x\n", r, *(unsigned int*)tstreamer.cr[r].addr);
  printf("tstreamer.cr[%d].value: %08x\n", r, (unsigned int)tstreamer.cr[r].value);
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
extern bool tstreamer_over_half_full(void)
{
  bool over_half_full = false;

  if (read_from_cr(3) & 0x40)
    over_half_full = true;

  return over_half_full;
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
extern bool tstreamer_empty(void)
{
  bool empty = false;

#ifndef SPOOL
  if (read_from_cr(3) & 0x01)
    empty = true;
#endif

  return empty;
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
extern void tstreamer_output_status_bits(void)
{
  static already_output_over_half_full = false;
  bool over_half_full = tstreamer_over_half_full();
  bool empty = tstreamer_empty();

  if (empty)
  {
    printf("Empty\n");
    already_output_over_half_full = false;
  }
  else if ((over_half_full) && (already_output_over_half_full == false))
  {
    printf("O\n");
    already_output_over_half_full = true;
  }
  else
  {
    printf(".");
    already_output_over_half_full = false;
  }
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to write padding data to the Transport Streamer
   		   FIFO to fill it up to half way to flush out any old data
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
extern void tstreamer_flush(bool softflush)
{
  unsigned int i = 0;
  unsigned int number_of_frames = 0;

  if (softflush)
  {
    number_of_frames = (TSTREAMER_FIFO_SIZE/2) / sizeof(tstreamer_padding_frame);

    for (i=0;i<number_of_frames;i++)
    {
      tstreamer_write(tstreamer_padding_frame, sizeof(tstreamer_padding_frame));
    }
  }
  else
  {
    write_to_cr_using_mask(0, 0x0800, 0x0800);					/* toggle bit 11 of cr0 to clear FIFO */
    write_to_cr_using_mask(0, 0, 0x0800);
  }
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
extern void tstreamer_output_status(void)
{
  bool over_half_full = tstreamer_over_half_full();
  bool empty = tstreamer_empty();
  int i = 0;

  if (empty)
    printf("Empty\n");
  else if (over_half_full)
    printf("Over half full\n");
  else
    printf("Less than half full\n");

  if (tstreamer.setup)
    printf("Setup\n");
  else
    printf("NotSetup\n");

  if (tstreamer.auto_sync_card)
    printf("Set to use AUTO SYNC card\n");

  for (i=0;i<4;i++)
    tstreamer_display_reg(i);

  printf("data   : %08x\n", (unsigned int)tstreamer.data);
  printf("*data  : %08x\n", *(unsigned int*)tstreamer.data);
  printf("bitrate: %d\n", tstreamer.bitrate);
}
