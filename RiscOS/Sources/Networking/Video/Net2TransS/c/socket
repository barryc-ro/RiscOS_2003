/*	Project Jedi (003)
	Element 14 Ltd.
	Copyright © 1999. All Rights Reserved.

	FILE:		socket.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.01 for RISC OS

	OVERVIEW
	========
	Source file for implementation of

	HISTORY
	=======
	1999-01-19	0.01	RDW	Initial version
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include "swis.h"
#include "sys/errno.h"
#include "sys/types.h"
#include "sys/socket.h"
#include "netdb.h"
#include "netinet/in.h"
#include "socklib.h"
#include "inetlib.h"
#include "unixlib.h"
#include "sys/filio.h"
#ifdef MemCheck_MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif


/* ************************************************************************** */
/*                                                                            */
/* Include header files - External Libraries                                  */
/*                                                                            */
/* ************************************************************************** */
#include "DebugLib/debuglib.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "common.h"
#include "socket.h"
#include "errortable.h"
#include "tstreamer.h"
#include "timeout.h"


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */
#define MPEG2_MARKER         0x47
#define MPEG2_MARKER_SPACING 188


/* ************************************************************************** */
/*                                                                            */
/* External globals                                                           */
/*                                                                            */
/* ************************************************************************** */
extern process_details process1;						/* This client's process detail                        */
extern errno;									/* From Internet                                       */


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */
static _kernel_oserror* create_socket(process_details* p);
static _kernel_oserror* socket_non_blocking(process_details* p);
static _kernel_oserror* socket_async_events(process_details* p);
static _kernel_oserror* socket_bind2address(process_details* p);
static _kernel_oserror* socket_join_multicast(process_details* p);
static int sync_data(process_details *p, int length_of_data);
static _kernel_oserror* socket_select_multicast_interface(process_details *p);


/* ************************************************************************** */
/*                                                                            */
/* Functions                                                                  */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
extern _kernel_oserror* setup_socket(process_details* p)
{
  _kernel_oserror* error = 0;

  if (p == 0)
    error = ERROR(NULLADDR);
  else
  {
    p->synced = false;
    p->data_count = 0;
    error = create_socket(p);
    if (!error) error = socket_join_multicast(p);
    if (!error)	error = socket_non_blocking(p);
    if (!error) error = socket_async_events(p);
    if (!error) error = socket_bind2address(p);
  }

  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
static _kernel_oserror* create_socket(process_details* p)
{
  _kernel_oserror*    error = 0;

  p->sock_num = socket(AF_INET, SOCK_DGRAM, 0);					/* create socket                                                          */
  dprintf(("", "create_socket: p->socknum: %d\n", p->sock_num));
  if (p->sock_num < 0)								/* if socket creation failed, switch to error state                       */
  {
    memcpy(&(p->error), &_inet_error, sizeof(_kernel_oserror));
    error = &(p->error);
  }

  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
static _kernel_oserror* socket_non_blocking(process_details* p)
{
  _kernel_oserror* error = 0;
  int on = 1;

  if (socketioctl(p->sock_num, FIONBIO, &on) < 0)				/* make socket NON blocking                                               */
  {
    memcpy(&(p->error), &_inet_error, sizeof(_kernel_oserror));
    error = &(p->error);
  }

  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
static _kernel_oserror* socket_async_events(process_details* p)
{
  _kernel_oserror* error = 0;
  int on = 1;

  if (socketioctl(p->sock_num, FIOASYNC, &on) < 0)
  {
    memcpy(&(p->error), &_inet_error, sizeof(_kernel_oserror));
    error = &(p->error);
  }

  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
static _kernel_oserror* socket_bind2address(process_details* p)
{
  _kernel_oserror* error = 0;
  struct sockaddr_in  server_addr;						/* connection address structure                                           */

  memset(&server_addr, 0, sizeof(server_addr));
  server_addr.sin_port        = htons(p->port_num);
  server_addr.sin_family      = AF_INET;
  server_addr.sin_addr.s_addr = htonl(INADDR_ANY);

  if (bind(p->sock_num, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0)
  {
    memcpy(&(p->error), &_inet_error, sizeof(_kernel_oserror));
    error = &(p->error);
  }

  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
extern void close_connection(process_details* p)
{
  if (p)
  {
    if (p->sock_num >= 0)							/* if socket created, then shut it down, close and deallocate it          */
    {
      if (p->mgroup.s_addr != INADDR_NONE)
      {
        struct ip_mreq req;

        memcpy(&(req.imr_multiaddr), &(p->mgroup), sizeof(struct in_addr));
        req.imr_interface.s_addr = htonl(INADDR_ANY);

        setsockopt(p->sock_num, 0, IP_DROP_MEMBERSHIP, &req, sizeof(req));
      }
      shutdown(p->sock_num, 2);
      socketclose(p->sock_num);
    }
    p->sock_num = -1;								/* clear the socket descriptor                                            */
    p->synced = false;
  }
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
static _kernel_oserror* socket_join_multicast(process_details *p)
{
  _kernel_oserror* error = socket_select_multicast_interface(p);
  char* sysvar = getenv("Net2TransStreamerMulticastGroup");

  if ((sysvar) && (error == 0))
  {
    p->mgroup.s_addr = inet_addr(sysvar);
    if (p->mgroup.s_addr == INADDR_NONE)
      error = ERROR(INVALIDGROUP);
    else
    {
      struct ip_mreq req;

      memcpy(&(req.imr_multiaddr), &(p->mgroup), sizeof(struct in_addr));
      req.imr_interface.s_addr = htonl(INADDR_ANY);

      if (setsockopt(p->sock_num, 0, IP_ADD_MEMBERSHIP, &req, sizeof(req)) < 0)
      {
        memcpy(&(p->error), &_inet_error, sizeof(_kernel_oserror));
        error = &(p->error);
      }
    }
  }

  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
static _kernel_oserror* socket_select_multicast_interface(process_details *p)
{
  _kernel_oserror* error = 0;
  char* sysvar = getenv("Net2TransStreamerMulticastInterface");

  if (sysvar)
  {
    struct in_addr multicastif;

    multicastif.s_addr = inet_addr(sysvar);
    if (multicastif.s_addr == INADDR_NONE)
      error = ERROR(INVALIDINTERFACE);
    else
    {
      if (setsockopt(p->sock_num, 0, IP_MULTICAST_IF, &multicastif, sizeof(multicastif)) < 0)
      {
        memcpy(&(p->error), &_inet_error, sizeof(_kernel_oserror));
        error = &(p->error);
      }
    }
  }

  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
extern _kernel_oserror* get_data_from_socket(process_details* p)
{
  _kernel_oserror* error = 0;
  int length_of_data = 0;
  bool exit = false;
  bool entered_and_wrote = false;

  timeout_stop(p);

  while ((exit == false) && (error == 0))
  {
    if (tstreamer_empty())
    {
      p->synced = false;
      p->read_buf_pos = p->read_buf;
      tstreamer_reset();
    }
    length_of_data = recvfrom(p->sock_num, p->read_buf_pos, (p->read_buf_size - (p->read_buf_pos - p->read_buf)), 0, 0, 0);
    if (length_of_data < 0)
    {
      if (errno == EWOULDBLOCK)
        exit = true;
      else
      {
        memcpy(&(p->error), &_inet_error, sizeof(_kernel_oserror));
        error = &(p->error);
      }
    }
    else if (length_of_data == 0)
    {
      exit = true;
    }
    else
    {
      unsigned int num_words = 0;

      length_of_data += (p->read_buf_pos - p->read_buf);	/* add any left over bytes in the buffer the the length_of_data to process */

      if (p->synced == false)
      {
        length_of_data = sync_data(p, length_of_data);
      }

      num_words = length_of_data / sizeof(unsigned int);			/* calc. numwords after sync. call as we want to ignore everything before the sync position */
      if (length_of_data > 0)
      {
        unsigned int remainder = 0;
        unsigned int seconds = 0;
        int bitrate = 0;

        if (p->data_count == 0)
          p->time_start = clock();
        p->data_count += length_of_data;
        p->time_end = clock();

        seconds = process1.time_end - process1.time_start;
        if (seconds)
          bitrate = (p->data_count*8) / seconds;
        else
          bitrate = 0;
/*#ifndef SPOOL
while (tstreamer_over_half_full());
#endif*/
        tstreamer_write((unsigned int*)(p->read_buf), num_words);
        entered_and_wrote = true;
        remainder = length_of_data - (num_words * sizeof(unsigned int));		/* any bytes left over?  can only be 1, 2 or 3 */
        if (remainder != 0)
        {
          printf("DOING MEMMOVE\n\nremainder: %u\nlength_of_data: %d\nnum_words:%u\n", remainder, length_of_data, num_words);
          memmove(p->read_buf, (p->read_buf + p->read_buf_size) - remainder, remainder);/* move remaining bytes to start of buffer */
          p->read_buf_pos = remainder + p->read_buf;
        }
      }
    }
  }
  if (entered_and_wrote == false)
  {
    dprintf(("", "ERROR: entered, but didn't write to streamer\n"));
    dprintf(("", "       length_of_data: %d\n", length_of_data));
    if (error)
    {
      dprintf(("", "_kernel_oserror: %d, %s\n", error->errnum, error->errmess));
    }
  }

  if (error == 0)
    error = timeout_setup(p);

  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
static int sync_data(process_details *p, int length_of_data)
{
  char *pos = p->read_buf_pos;							// goto start
  char *a   = 0;								// tmp ptr to 1st MPEG2_MARKER found
  char *b   = 0;								// tmp ptr to 2nd MPEG2_MARKER found
  int   length = length_of_data;

#ifdef DEBUG
  printf("read_buf_pos: %x\n", p->read_buf_pos);
  printf("pos         : %x\n", pos);
  printf("a           : %x\n", a);
  printf("b           : %x\n", b);
  printf("b-a         : %d\n", b-a);
  printf("length      : %x\n\n", length);
#endif

  while ((length > 0) && (*pos != MPEG2_MARKER))				// a = look for 1st MPEG2_MARKER
  {
    pos++;
    length--;
  }
  a = pos;
#ifdef DEBUG
  printf("read_buf_pos: %x\n", p->read_buf_pos);
  printf("pos         : %x\n", pos);
  printf("a           : %x\n", a);
  printf("b           : %x\n", b);
  printf("b-a         : %d\n", b-a);
  printf("length      : %x\n\n", length);
#endif


  while ((p->synced == false) && (length > 0))					// loop until sync'd or run out of data
  {
#ifdef DEBUG
    printf("in loop....\n");
    printf("read_buf_pos: %x\n", p->read_buf_pos);
    printf("pos         : %x\n", pos);
    printf("a           : %x\n", a);
    printf("b           : %x\n", b);
    printf("b-a         : %d\n", b-a);
    printf("length      : %x\n\n", length);
#endif
    pos++;									// move to next byte after 1st MPEG2_MARKER
    length--;
    while ((length > 0) && (*pos != MPEG2_MARKER))				// look for 2nd MPEG2_MARKER
    {
      pos++;
      length--;
    }
    b = pos;

    if (*b == MPEG2_MARKER)							// if found then
    {
      if (b - a == MPEG2_MARKER_SPACING)					// if distance between a & b == MPEG2_MARKER_SPACING then we've sync'd
      {
        p->synced = true;
        length = length_of_data - (a - p->read_buf_pos);
        p->read_buf_pos = a;							// return with read_buf_pos moved to start of mpeg2 transport seqence
      }
      else
      {
        p->synced = false;
        a = b;
        length = length_of_data - (a - p->read_buf_pos);
        pos++;									// move to next byte after 1st MPEG2_MARKER
        length--;
      }
    } // endif 2nd MPEG2_MARKER found
  } // endwhile looking for 2nd MPEG2_MARKER

#ifdef DEBUG
  printf("\nreturning....\n");
  printf("read_buf_pos: %x\n", p->read_buf_pos);
  printf("pos         : %x\n", pos);
  printf("a           : %x\n", a);
  printf("b           : %x\n", b);
  printf("b-a         : %d\n", b-a);
  printf("length      : %x\n\n", length);
#endif

  return length;
}
