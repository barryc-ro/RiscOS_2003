/*	Project Jedi (003)
	Element 14 Ltd.
	Copyright © 1999. All Rights Reserved.

	FILE:		swihndlers.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.02 for RISC OS

	OVERVIEW
	========
	Source file for implementation of functions to handle and process
	the SWI calls this module implements

	HISTORY
	=======
	1999-01-19	0.01	RDW	Initial version
	1999-02-26	0.02	RDW	auto. sync flag added to Start SWI
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#ifdef MemCheck_MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif
#include "DebugLib/debuglib.h"
#include "socklib.h"
#include "Email/EmailLib/ELib_priv.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "common.h"
#include "swihndlers.h"
#include "errortable.h"
#include "socket.h"
#include "module.h"
#include "tstreamer.h"
#include "timeout.h"


/* ************************************************************************** */
/*                                                                            */
/* External globals                                                           */
/*                                                                            */
/* ************************************************************************** */
extern process_details process1;						// This client's process detail


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Functions                                                                  */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   FUNCTION:       handle_swi_Start
   DESCRIPTION:    Function to handle
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:   _kernel_swi_regs*	r		registers
   							r->r[0] = flags
   							   bit0 unset - org. type of card
   							        set   - auto sync type of card
   							r->r[1] = podule slot
   							r->r[2] = port number to listen on
   							r->r[3] = bitrate
   							r->r[4] = buffer size, 0 = default
   OUTPUT PARAMS:  _kernel_swi_regs*	r		registers
   							r->r[0] = flags, all 0 if all accepted,
   							else rejected ones stay set
   RETURN VALUE:   			NULL		if SWI handled successfully,
   							else ptr to error block
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
_kernel_oserror* handle_swi_Start(_kernel_swi_regs *r, void *pw)
{
  _kernel_oserror       *result        = 0;					// result to return
  unsigned int           flags         = 0;					// flags
  int                    p_num         = 0;					// port number
  unsigned int           buf_size      = 0;					// new buffer size
  bool                   auto_sync     = false;					// default to ORG. type of Transport Streamer card

  process1.bitrate       = 4007521;						// default value from Tim Dobsons' StreamDT3 BASIC prog.

  UNUSED(pw);

  flags         = (unsigned int)r->r[0];
  process1.podule_number = (int)r->r[1];
  p_num         = (unsigned int)r->r[2];
  if (r->r[3] != 0)
  {
    process1.bitrate = r->r[3];
  }
  buf_size      = (unsigned int)r->r[4];

  dprintf(("", "Start(): flags        : %x\n", flags));
  dprintf(("", "Start(): podule_number: %d\n", process1.podule_number));
  dprintf(("", "Start(): p_num        : %d\n", p_num));
  dprintf(("", "Start(): buf_size     : %d\n", buf_size));
  dprintf(("", "Start(): bitrate      : %d\n", process1.bitrate));

  /* check flags */
  if (flags != 0)
  {
    if (flags & START_AUTO_SYNC)
    {
      auto_sync = true;
    }
    if (flags & START_UNUSED_MASK)						/* check no other bits are set which we don't support */
    {
      flags = flags & START_UNUSED_MASK;
      result = ERROR(BAD_FLAG_OPTION);
    }
    else
      flags = 0;								/* all accepted */
  }

  if (result == 0)
  {
    close_connection(&process1);
    if (p_num == 0)
    {
      process1.port_num = DEFAULT_PORT_NUMBER;
    }
    else
    {
      process1.port_num = p_num;
    }
    result = allocate_buffer(&process1, buf_size);
  }

  if (result == 0)
  {
#ifndef SPOOL
    tstreamer_setup(process1.podule_number, process1.bitrate, auto_sync);
#endif
  }

  if (result == 0)
  {
    result = setup_socket(&process1);
  }

  if (result == 0)
  {
    result = timeout_setup(&process1);
  }

  // setup registers for return from SWI
  r->r[0] = flags;

  return result;
}


/* ************************************************************************** */
/*
   FUNCTION:       handle_swi_Stop
   DESCRIPTION:    Function to handle
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:   _kernel_swi_regs*	r		registers
   							r->r[0] = flags
   OUTPUT PARAMS:  _kernel_swi_regs*	r		registers
   							r->r[0] = flags, all 0 if all accepted,
   							else rejected ones stay set
   RETURN VALUE:   			NULL		if SWI handled successfully,
   							else ptr to error block
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
_kernel_oserror* handle_swi_Stop(_kernel_swi_regs *r, void *pw)
{
  _kernel_oserror       *result        = 0;					// result to return
  unsigned int           flags         = 0;					// flags

  UNUSED(pw);

  flags = (unsigned int)r->r[0];

  dprintf(("", "Stop(): flags: %x\n", flags));

  /* check flags */
  if (flags != 0)
  {
    if (flags & STOP_UNUSED_MASK)						/* check no other bits are set which we don't support */
    {
      flags = flags & STOP_UNUSED_MASK;
      result = ERROR(BAD_FLAG_OPTION);
    }
    else
      flags = 0;								/* all accepted */
  }

  if (result == 0)
  {
    close_connection(&process1);
    result = timeout_stop(&process1);
  }

#ifndef SPOOL
  tstreamer_reset();
#endif

  // setup registers for return from SWI
  r->r[0] = flags;

  return result;
}


/* ************************************************************************** */
/*
   FUNCTION:       handle_swi_Timeout
   DESCRIPTION:    Function to handle
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:   _kernel_swi_regs*	r		registers
   							r->r[0] = flags
   							   bit0 unset - get timeout value
   							        set   - set timeout value
   							r->r[1] = new timeoutvalue
   OUTPUT PARAMS:  _kernel_swi_regs*	r		registers
   							r->r[0] = flags, all 0 if all accepted,
   							else rejected ones stay set
   							r->r[1] = timeoutvalue
   RETURN VALUE:   			NULL		if SWI handled successfully,
   							else ptr to error block
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
_kernel_oserror* handle_swi_Timeout(_kernel_swi_regs *r, void *pw)
{
  _kernel_oserror       *result        = 0;					// result to return
  unsigned int           flags         = 0;					// flags

  UNUSED(pw);

  flags = (unsigned int)r->r[0];

  dprintf(("", "Timeout(): flags: %x\n", flags));

  /* check flags */
  if (flags != 0)
  {
    if (flags & TIMEOUT_SETVALUE)
    {
      process1.timeout_value = r->r[1];
    }

    if (flags & TIMEOUT_UNUSED_MASK)						/* check no other bits are set which we don't support */
    {
      flags = flags & TIMEOUT_UNUSED_MASK;
      result = ERROR(BAD_FLAG_OPTION);
    }
    else
      flags = 0;								/* all accepted */
  }

  if (result == 0)
  {
    r->r[1] = process1.timeout_value;
  }

  // setup registers for return from SWI
  r->r[0] = flags;

  return result;
}

