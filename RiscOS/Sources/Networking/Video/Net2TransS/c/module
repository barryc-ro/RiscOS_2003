/*	Project Jedi (003)
	Element 14 Ltd.
	Copyright © 1999. All Rights Reserved.

	FILE:		module.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.03 for RISC OS

	OVERVIEW
	========
	Source file for implementation of relocatable module support code for
	the Net2TransportStreamer module.

	HISTORY
	=======
	1999-01-19	0.01	RDW	Initial version
	1999-02-26	0.02	RDW	Net2TransStream_CardType *cmd added
	1999-02-26	0.03	RDW	Net2TransStream_Flush *cmd added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "socklib.h"
#ifdef MemCheck_MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif
#ifdef DEBUGLIB
  #include "DebugLib/debuglib.h"
#endif
#include "Email/EmailLib/ELib_priv.h"
#include "Email/Common/bool.h"
#include "callx/callx.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "allocation.h"
#include "module.h"
#include "swihndlers.h"
#include "socket.h"
#include "tstreamer.h"
#include "timeout.h"


/* ************************************************************************** */
/*                                                                            */
/* Preprocessor Stuff                                                         */
/*                                                                            */
/* ************************************************************************** */
#if CMHG_VERSION < 500
  #error "Deliberate Error: Need CMHG version 5.xx"
#endif
#if CMHG_VERSION < 516								/* Work around CMHG changes between 5.15 and 5.16 */
  #define CMHG_CONST
#else
  #define CMHG_CONST const
#endif


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Global variables                                                           */
/*                                                                            */
/* ************************************************************************** */
void *module_wsp;								// module workspace pointer
static bool  EventV_claimed = false;						// Event claimed?
static bool  Internet_Event_enabled = false;					// Registered for Internet event?
process_details process1;							// only one process in this version


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Functions internal to source file                    */
/*                                                                            */
/* ************************************************************************** */
static _kernel_oserror *enable_eventhandler(void);				// Enable events and handler
static _kernel_oserror *disable_eventhandler(void);				// Disablve events and handler
static void handle_cli(const char *cmd_tail, process_details* process);
static _kernel_oserror *spool(void);


/* ************************************************************************** */
/*
   FUNCTION:       swi_handler
   DESCRIPTION:    Function to handle SWIs of this module.  Calls appropriate
                   function for the given SWI number or returns error_BAD_SWI.
                   Returns error_BAD_SWI if SWI number not recognised or returns
                   value returned by SWI implementation function.
   DEPENDENCIES:   function             handle_swi_Net2TransportStreamer_		swihndlers.h
                   constant             error_BAD_SWI                   	header.h
                   enum                 SWI_Nums                        	module.h
   DEPENDED ON BY:
   INPUT PARAMS:   int                  swi_no          The SWI number
                   _kernel_swi_regs*    r               registers
                   void*                pw              pointer to workspace for this module
   OUTPUT PARAMS:  none
   RETURN VALUE:   			NULL		if SWI handled successfully,
   							else ptr to error block
   CONSTANTS:
   VARIABLES:      _kernel_oserror*     result          result to return
                   SWI_Nums             swi_number      SWI number to use in case statement
 */
/* ************************************************************************** */
_kernel_oserror* swi_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
  _kernel_oserror *result     = error_BAD_SWI;
  SWI_Nums         swi_number = (SWI_Nums)swi_no;

#ifdef MemCheck_MEMCHECK
  MemCheck_RegisterMiscBlock(r, sizeof(_kernel_swi_regs));
#endif

  switch (swi_number)
  {
    case Start:
      result = handle_swi_Start(r, pw);
      break;
    case Stop:
      result = handle_swi_Stop(r, pw);
      break;
    case Timeout:
      result = handle_swi_Timeout(r, pw);
      break;
    default:									// Catch unknown SWI
      result = error_BAD_SWI;
      break;
  }

#ifdef MemCheck_MEMCHECK
  MemCheck_UnRegisterMiscBlock(r);
#endif

  return result;
}


/* ************************************************************************** */
/*
   FUNCTION:       init_module
   DESCRIPTION:    Function to initialise module global vars, etc. on startup
		   Return NULL if your initialisation succeeds; otherwise return a pointer
		   to an error block. cmd_tail points to the string of arguments with which
		   the module is invoked (may be "").
		   podule_base is 0 unless the code has been invoked from a podule.
		   pw is the 'R12' value established by module initialisation. You may
		   assume nothing about its value (in fact it points to some RMA space
		   claimed and used by the module veneers). All you may do is pass it back
		   for your module veneers via an intermediary such as SWI OS_CallEvery
		   (use _swix() to issue the SWI call).
   DEPENDENCIES:   void*		module_wsp		Module workspace pointer
   		   bool			in_use			process1 in use flag
   		   process_details	process1		client process state
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:      NONE
   VARIABLES:      _kernel_oserror*	error			result to return
   		   _kernel_oserror*	error2			rcode from disable_eventhandler
 */
/* ************************************************************************** */
_kernel_oserror *init_module(CMHG_CONST char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *error  = 0;
  _kernel_oserror *error2 = 0;

  module_wsp = pw;

#ifdef MemCheck_MEMCHECK
  MemCheck_InitNoDebug();
  MemCheck_RedirectToFilename(tmpnam(0));
  MemCheck_SetStoreMallocFunctions(1);
  MemCheck_InterceptSCLStringFunctions();
#endif

  UNUSED(podule_base);

#ifdef DEBUGLIB
  debug_initialise("Net2TransStream", "Net2Trans", 0);
  debug_output_device(PRINTF_OUTPUT);
#ifdef TRACE
  debug_initialise_trace(PRINTF_OUTPUT, "dprintf oswrch Printf prf expired");
#endif
  debug_atexit();
#endif


  callx_init(module_wsp);

  // INIT globals
  process1.sock_num       = -1;
  process1.read_buf_pos  = 0;
  process1.read_buf      = 0;
  process1.port_num      = 0;
  process1.mgroup.s_addr = INADDR_NONE;
  process1.synced        = false;
  process1.data_count    = 0;
  process1.time_start    = 0;
  process1.time_end      = 0;
  process1.filename      = 0;
  process1.bitrate       = 0;
  process1.podule_number = 0;
  process1.timeout_value = TIMEOUT_DEFAULTVALUE;
  process1.auto_sync     = false;
  process1.soft_flush    = false;

  memset(&process1.error, 0, sizeof(_kernel_oserror));
  EventV_claimed         = false;
  Internet_Event_enabled = false;
  handle_cli((const char*)cmd_tail, &process1);

  error = allocate_buffer(&process1, 0);
  if (!error)
  {
    error = enable_eventhandler();						// Enable Event handler for Internet Event
    if (error)									// If failed then
      error2 = disable_eventhandler();						// Disable the event

    if (error2)									// If disable_eventhandler returned an error then report that error
      error = error2;								// else report the error from enabling the event handler
  }

  return error;
}


extern _kernel_oserror* allocate_buffer(process_details* p, unsigned int size)
{
  _kernel_oserror* error = 0;

  destroy_buffer(p);

  if (size == 0)
    p->read_buf_size = READBUFLEN;
  else
    p->read_buf_size = size;

  p->read_buf = (char*)malloc(p->read_buf_size);
  memset(p->read_buf, 0, p->read_buf_size);
  p->read_buf_pos = p->read_buf;

  return error;
}


extern void destroy_buffer(process_details* p)
{
  if (p->read_buf)
  {
    free(p->read_buf);
    p->read_buf = 0;
  }
}


/* ************************************************************************** */
/*
   FUNCTION:       handle_cli
   DESCRIPTION:    Function to process the command line arguments given to
                   *RMLoad (module initialisation)
   DEPENDENCIES:   process_details	process
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:      NONE
   VARIABLES:      _kernel_oserror*	error			result to return
   		   _kernel_oserror*	error2			rcode from disable_eventhandler
 */
/* ************************************************************************** */
static void handle_cli(const char *cmd_tail, process_details* process)
{
  if (cmd_tail)
  {
    if (strlen(cmd_tail) > 0)
    {
      if (sscanf(cmd_tail, "%d", &process->port_num) < 0)
        process->port_num = 0;
    }
  }
}


/* ************************************************************************** */
/*
   FUNCTION:       kill_module
   DESCRIPTION:    Function to close down module
		   Return NULL if your finalisation succeeds. Otherwise return a pointer to
		   an error block if your finalisation handler does not wish to die (e.g.
		   toolbox modules return a 'Task(s) active' error).
		   fatal, podule and pw are the values of R10, R11 and R12 (respectively)
		   on entry to the finalisation code.
   DEPENDENCIES:   void*		module_wsp		Module workspace pointer
		   process_details	process1		client process state
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:      _kernel_oserror*	error			result to return
 */
/* ************************************************************************** */
_kernel_oserror *kill_module(int fatal, int podule, void *pw)
{
  _kernel_oserror *error = 0;
  module_wsp = pw;

  UNUSED(podule);
  UNUSED(fatal);

  close_connection(&process1);
  destroy_buffer(&process1);
#ifndef SPOOL
  tstreamer_reset();
#endif
  error = disable_eventhandler();						// disable event handlers

  error = timeout_stop(&process1);
  error = callx_remove_all_callafters();
  error = callx_remove_all_callbacks();

#ifdef MemCheck_MEMCHECK
  MemCheck_OutputBlocksInfo();
#endif

  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:       enable_eventhandler
   DESCRIPTION:    Function to claim events and enable Internet Event
   DEPENDENCIES:   void*		module_wsp		Module workspace pointer
   		   type			_kernel_oserror		kernel.h
   		   type			_kernel_swi_regs	kernel.h
   		   global		EventV_claimed		module.c
   		   global		Internet_Event_enabled	module.c
   		   constant		EventV			common.h
   		   constant		Internet_Event		common.h
   		   constant		Event_Enable		common.h
   DEPENDED ON BY: function		init_module		module.c
   INPUT PARAMS:   NONE
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   _kernel_oserror*	NULL			if all okay, else error block
   CONSTANTS:      NONE
   VARIABLES:      _kernel_oserror*	error			result to return
   		   _kernel_swi_regs	r			SWI registers
 */
/* ************************************************************************** */
static _kernel_oserror *enable_eventhandler(void)
{
  _kernel_oserror *error = 0;							// Error to return
  _kernel_swi_regs r;								// Processor registers

  r.r[0] = EventV;
  r.r[1] = (int)event_entry;
  r.r[2] = (int)module_wsp;
  error = _kernel_swi(OS_Claim, &r, &r);					// Claim EventV

  if (!error)
  {
    EventV_claimed = true;							// set claimed global to true
    r.r[0] = Event_Enable;
    r.r[1] = Internet_Event;
    error = _kernel_swi(OS_Byte, &r, &r);					// Enable Internet Event
  }

  if (!error)
    Internet_Event_enabled = true;						// enabled global to true

  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:       disable_eventhandler
   DESCRIPTION:    Function to release claimed events and disable event handler
   DEPENDENCIES:   void*		module_wsp		Module workspace pointer
   		   type			_kernel_oserror		kernel.h
   		   type			_kernel_swi_regs	kernel.h
   		   global		EventV_claimed		module.c
   		   global		Internet_Event_enabled	module.c
   		   constant		EventV			common.h
   		   constant		Internet_Event		common.h
   		   constant		Event_Disable		common.h
   DEPENDED ON BY: function		kill_module		module.c
   INPUT PARAMS:   NONE
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   _kernel_oserror*	NULL			if all okay, else error block
   CONSTANTS:      NONE
   VARIABLES:      _kernel_oserror*	error			result to return
   		   _kernel_swi_regs	r			SWI registers
 */
/* ************************************************************************** */
static _kernel_oserror *disable_eventhandler(void)
{
  _kernel_oserror *error = 0;							// Error to return
  _kernel_swi_regs r;								// Processor registers

  if (Internet_Event_enabled)
  {
    r.r[0] = Event_Disable;							// Disable Internet Event
    r.r[1] = Internet_Event;
    error = _kernel_swi(OS_Byte, &r, &r);					// Call SWI
    if (!error)									// If no error then
      Internet_Event_enabled = false;						// set enabled global to false
  }

  if ((!error) && (EventV_claimed))
  {
    r.r[0] = EventV;
    r.r[1] = (int)event_entry;							// Entry point defined by cmhg
    r.r[2] = (int)module_wsp;							// Our workspace ptr
    error = _kernel_swi(OS_Release, &r, &r);					// Release EventV
    if (!error)									// If no error then
      EventV_claimed = false;							// set claimed global to false
  }

  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:       cmd_handler
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
_kernel_oserror *cmd_handler(CMHG_CONST char *arg_string, int argc, int cmd_no, void *pw)
{
  _kernel_oserror* error = 0;
  _kernel_swi_regs r;

  switch(cmd_no)
  {
    case CMD_Net2TransStream_Start:
    {
      if (process1.auto_sync)
        r.r[0] = START_AUTO_SYNC;
      else
        r.r[0] = 0;
      r.r[2] = DEFAULT_PORT_NUMBER;
      r.r[4] = 0;
      if (arg_string)
      {
        if (argc == 1)
        {
#ifdef SPOOL
          sscanf(arg_string, "%d", &(r.r[2]));
#else
          sscanf(arg_string, "%d", &(r.r[1]));
#endif
        }
        else if (argc == 2)
        {
#ifdef SPOOL
          sscanf(arg_string, "%d %d", &(r.r[2]), &(r.r[4]));
#else
          sscanf(arg_string, "%d %d", &(r.r[1]), &(r.r[2]));
#endif
        }
        else if (argc == 3)
          sscanf(arg_string, "%d %d %d", &(r.r[1]), &(r.r[2]), &(r.r[3]));
        else if (argc == 4)
          sscanf(arg_string, "%d %d %d %d", &(r.r[1]), &(r.r[2]), &(r.r[3]), &(r.r[4]));
      }
      error = _kernel_swi(Net2TransStream_Start, &r, &r);
      break;
    }
    case CMD_Net2TransStream_Stop:
    {
      r.r[0] = 0;
      error = handle_swi_Stop(&r, pw);
      break;
    }
    case CMD_Net2TransStream_Status:
    {
      unsigned int seconds = (process1.time_end - process1.time_start);
      seconds = seconds/CLOCKS_PER_SEC;

      printf("\n\nrunning time (cs): %d\n", process1.time_end - process1.time_start);
      printf("data (bytes)     : %d\n", process1.data_count);
      if (seconds)
      {
        printf("rate (bits/sec)  : %d\n",  (process1.data_count*8) / seconds);
        printf("rate (Mbits/sec) : %d\n", ((process1.data_count*8) / (1024*1024)) / seconds);
      }
#ifndef SPOOL
      tstreamer_output_status();
#endif
      break;
    }
    case CMD_Net2TransStream_Test:
    {
      if (arg_string)
      {
        if (argc == 2)
        {
          process1.filename = (char*)malloc(strlen(arg_string+1));
          if (process1.filename)
            sscanf(arg_string, "%d %s", &process1.bitrate, process1.filename);
          else
            printf("malloc failure!\n");
        }
      }
      if (process1.filename)
      {
        spool();
      }
      break;
    }
    case CMD_Net2TransStream_Timeout:
    {
      if (argc == 0)
        r.r[0] = 0;
      else
      {
        r.r[0] = TIMEOUT_SETVALUE;
        sscanf(arg_string, "%d", &r.r[1]);
      }

      error = _kernel_swi(Net2TransStream_Timeout, &r, &r);
      if ((error == 0) && (argc == 0))
      {
        printf("Timeout: %d\n", r.r[1]);
      }
      break;
    }
    case CMD_Net2TransStream_CardType:
    {
      if (argc == 0)
      {
        printf("CardType set to ");
        if (process1.auto_sync)
          printf("auto\n");
        else
          printf("org\n");
      }
      else
      {
        char tmp[10];
        sscanf(arg_string, "%9s", tmp);
        if ((tmp[0] == 'a') || (tmp[0] == 'A'))
          process1.auto_sync = true;
        else
          process1.auto_sync = false;
      }
      break;
    }
    case CMD_Net2TransStream_Flush:
    {
      if (argc == 0)
      {
        printf("CardType set to ");
        if (process1.soft_flush)
          printf("Software flush\n");
        else
          printf("hardware flush, if supported by card\n");
      }
      else
      {
        char tmp[10];
        sscanf(arg_string, "%9s", tmp);
        if ((tmp[0] == 's') || (tmp[0] == 'S'))
          process1.soft_flush = true;
        else
          process1.soft_flush = false;
      }
      break;
    }
    default:
    {
      break;
    }
  }

  return error;
}


static _kernel_oserror *spool(void)
{
//#define BUFSIZE 128*1024/4
#define BUFSIZE 4096/4
  FILE* fd = fopen(process1.filename, "rb");
  static unsigned int buffer[BUFSIZE];

  if (process1.filename)
    free(process1.filename);
  process1.filename = 0;

  printf("in spool\n");

  if (fd == 0)
  {
    perror("file not found");
    return 0;
  }

  tstreamer_setup(3, process1.bitrate, false);
//  tstreamer_output_status();

  while(!feof(fd))
  {
    int num = fread(buffer, 4, BUFSIZE, fd);

    tstreamer_write(buffer, num);
    do
    {
//      tstreamer_output_status_bits();
    } while(tstreamer_over_half_full());
  }
  tstreamer_output_status();

  tstreamer_output_status();

  return 0;
}

