/*	Project Jedi (003)
	Element 14 Ltd.
	Copyright © 1999. All Rights Reserved.

	FILE:		timeout.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.03 for RISC OS

	OVERVIEW
	========
	Source file for implementation of functions to handle and process
	timeout on data receipition

	HISTORY
	=======
	1999-02-15	0.01	RDW	Initial version
	1999-02-26	0.02	RDW	updated to pass auto_sync setting to
					Start SWI
	1999-03-08	0.03	RDW	timeout_CBhandler() modified to check
					soft_flush option
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#ifdef MemCheck_MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif
#include "DebugLib/debuglib.h"
#include "socklib.h"
#include "Email/EmailLib/ELib_priv.h"
#include "callx/callx.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "common.h"
#include "swihndlers.h"
#include "errortable.h"
#include "socket.h"
#include "module.h"
#include "timeout.h"
#include "tstreamer.h"


/* ************************************************************************** */
/*                                                                            */
/* External globals                                                           */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Function prototypes for functions private to this file                     */
/*                                                                            */
/* ************************************************************************** */
static _kernel_oserror* timeout_CAhandler(_kernel_swi_regs *r, void *pw, void *data);
static _kernel_oserror *timeout_CBhandler(_kernel_swi_regs *r, void *pw, void *data);


/* ************************************************************************** */
/*                                                                            */
/* Functions                                                                  */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   FUNCTION:       timeout_setup
   DESCRIPTION:    Function to handle
   DEPENDENCIES:   typedef		process_details common.h
   DEPENDED ON BY: function		handle_swi_Start
   INPUT PARAMS:   process_details	process1
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   			NULL		if handled successfully,
   							else ptr to error block
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
extern _kernel_oserror* timeout_setup(process_details* p)
{
  _kernel_oserror       *result        = 0;					// result to return

  if (p == 0)
    result = ERROR(NULLADDR);
  else
    result = timeout_stop(p);							// clear any previous timeout

  if (result == 0)
  {
    if ((p->timeout_value != 0) && (p->synced == true))				/* only set timeout if we think we're already syncronised to the data stream */
    {
      dprintf(("", "Setting up timeout: %d\n", p->timeout_value));
      result = callx_add_callafter(p->timeout_value, &timeout_CAhandler, p);
    }
  }

  return result;
}


/* ************************************************************************** */
/*
   FUNCTION:       timeout
   DESCRIPTION:    Function to handle
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:   process_details	process1
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   			NULL		if handled successfully,
   							else ptr to error block
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
extern _kernel_oserror* timeout_stop(process_details* p)
{
  _kernel_oserror       *result        = 0;

  if (p == 0)
    result = ERROR(NULLADDR);
  else
  {
    dprintf(("", "Clearing timeout\n"));
    callx_remove_callafter(&timeout_CAhandler, p);			/* Ensure any pending callafter is removed    */
    callx_remove_callback(&timeout_CBhandler, p);				/* Ensure any pending callback is removed     */
  }

  return result;
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to handle
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   			NULL		if handled successfully,
   							else ptr to error block
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
static _kernel_oserror* timeout_CAhandler(_kernel_swi_regs *r, void *pw, void *data)
{
  UNUSED(r);
  UNUSED(pw);

  return callx_add_callback(&timeout_CBhandler, data);
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:    Function to handle
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   			NULL		if handled successfully,
   							else ptr to error block
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
static _kernel_oserror *timeout_CBhandler(_kernel_swi_regs *r, void *pw, void *data)
{
  _kernel_oserror *error = 0;
  process_details* p     = (process_details*)data;

  UNUSED(r);
  UNUSED(pw);

  dprintf(("", "ENTERED: timeout_CBhandler\n"));
  if (p)
  {

    tstreamer_flush(p->soft_flush);
/*
    _kernel_swi_regs r;
    if (p->auto_sync)
      r.r[0] = START_AUTO_SYNC;
    else
      r.r[0] = 0;
    r.r[1] = p->podule_number;
    r.r[2] = p->port_num;
    r.r[3] = p->bitrate;
    r.r[4] = p->read_buf_size;

    dprintf(("", "Re-Starting\n"));
    error = _kernel_swi(Net2TransStream_Start, &r, &r);				/* Re-Start network packet grabbing and timeout */

  }
  else
    error = ERROR(NULLADDR);

  return error;
}
