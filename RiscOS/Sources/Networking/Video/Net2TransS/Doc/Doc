Net2TransStream
===============

Date:   1999-02-22
Author: Richard D. Warren
Project:Jedi (003)

Overview
--------

Net2TransStream is a RISC OS RModule written for the Jedi(003) ESPRIT
project.  It is designed to take MPEG2 transport stream data (MPEG2TS) from
a source and write it to a Transport Streamer podule card.  The data source
for the project was in UDP packets from the Jedi video server by MultiStream.
However, for test and development purposes the module can also read MPEGTS
data from a file.


Registrations
-------------
ModuleName:	Net2TransStream
SWI Chunk:	0x52b80
Errorblock:	0x00816700
*commands:	Net2TransStream*
Sys. Vars:	NONE registered, however for test and development it uses:
		  Net2TransStreamerOutput$Dir
		  Net2TransStreamerMulticastGroup
		  Net2TransStreamerMulticastInterface

Building
--------

The Net2TransStream RModules requires the following libraries:

Email/Common - header files only
InetLib
SockLib
UnixLib
CallX

If SPOOL is defined, ie. by setting DEBUG=-DSPOOL, then a development file
version is built that won't write to the Transport Streamer card, but
instead writes to a file "JediSpool" in the directory pointed at by the
system variable <Net2TransStreamerOutput$Dir>.  Net2TransStreamer_Start
*command takes different parameters in this build.  It only takes a port
number and a packet size, both optional and default to the usual default
values as documented in the SWI descriptions below.

!MkClean	clean phase
!MkClnAll	clean_all phase
!MkDLib		DebugLib build of module
!MkDLibSP	DebugLib build of module with SPOOL defined
!MkMemC		MemCheck build of module - not implmented
!MkMemCD	DDT and MemCheck build of module - not implemented
!MkRam		Normal RAM build of module
!MkRamSP	Normal RAM build of module with SPOOL defined
!MkTrace	Trace build of module - not implemented



Future Enhancements
-------------------
1. Make spooling to file version runtime switch in the Start SWI flags
   instead of a buildtime option
2. Allow to specify and different IP address as destination for the data
   so module can act as a crude MPEG2TS router.
3. Remove the need for Net2TransStreamerMulticastGroup and use the MACROS
   to determine in the source IP address is a multicast address
4. Always ensure only complete MPEG2TS 188packets are written to the
   Transport Streamer.  ie. recover from lost UDP packets. 

SWIs
====

Net2TransStream_Start
---------------------
Description:
On entry:
On exit:
Interrupts:
Processor Mode:
Re-entrancy:
Use:
Related SWIs:
Related vectors:


Description:
  SWI to setup and start reading of MPEG2TS data from UDP packets and writing
  to the Transport Streamer card.

On entry:
  r0 = flags
  r1 = Podule Slot of Transport Streamer card
  r2 = UDP port number to listen on for data
  r3 = bitrate to set Transport Streamer card to handle in bits/sec
  r4 = buffer size to read into

On exit:
  r0 = rejected flag options, 0 if all accepted

Interrupts:
  Unchanged.
  
Processor Mode:
  Processor is in SVC mode
  
Re-entrancy:
  SWI is not re-entrant
  
Use:
  Currently there are no option flags, so r0 should be 0.  If
  <Net2TransStreamerMulticastGroup> is set, then the module will join the
  group address given by the system variable.  Also, if the system variable
  <Net2TransStreamerMulticastInterface> is set, then the module will use
  the interface that has that given IP address, otherwise it uses the
  default interface.

Related SWIs:
  Net2TransStream_Stop
  Net2TransStream_Timeout
  
Related vectors:
  None.
  

Net2TransStream_Stop
--------------------

Description:
  SWI to stop reading of MPEG2TS data from UDP packets.

On entry:
  r0 = flags

On exit:
  r0 = rejected flag options, 0 if all accepted

Interrupts:
  Unchanged.
  
Processor Mode:
  Processor is in SVC mode
  
Re-entrancy:
  SWI is not re-entrant
  
Use:
  Currently there are no option flags, so r0 should be 0.  This will stop
  writing any data to the Transport Streamer card and close the socket that
  data is being read from.

Related SWIs:
  Net2TransStream_Stop
  
Related vectors:
  None.
  

Net2TransStream_Timeout
-----------------------

Description:
  SWI to set the timeout on received data.  This SWI sets a timeout counter
  in centi-seconds.  If the module is running, ie. Net2TransStream_Start has
  been called successfully and Net2TransStream_Stop hasn't been called yet,
  then if data is not received within the given timeout time the module
  will effectively call Net2TransStream_Start again itself.  This resets
  the Transport Streamer card, clears the modules buffer and forces it to
  resyncronise on the MPEG2TS data.
  
  This timeout is so that when the Jedi video server stops sending data,
  the module resets the card so that any new data from a subsequently sent
  MPEG2TS is correctly sycronised on the Transport Streamer card with the
  MPEG2TS 0x47 packet start marker.

On entry:
  r0 = flags

On exit:
  r0 = rejected flag options, 0 if all accepted

Interrupts:
  Unchanged.
  
Processor Mode:
  Processor is in SVC mode
  
Re-entrancy:
  SWI is not re-entrant
  
Use:
  Currently there are no option flags, so r0 should be 0.

Related SWIs:
  Net2TransStream_Stop
  
Related vectors:
  None.
  

*commands
=========

Net2TransStream_Start
---------------------

Description:
  CLI front to the Net2TransStream_Start SWI.

Syntax:
  Net2TransStream_Start <podule slot (0-7)>
                        [<port> [<bitrate> [<packetsize>]]]

Parameters:
  podule slot - the Podule slot number that the Transport Streamer card is
                in 0 to 7 inclusive.
  port        - the UDP port number to listen for data on.  Defaults to 9999
                if not given
  bitrate     - the bitrate to set the Transport Streamer card to in bits/sec
                Defaults to 4007521 if not given.
  packetsize  - the buffer size to read into in bytes, defaults to 10240bytes
  
Use:
  As the SWI.

Example:
  *Net2TransStream_Start 3 32794 4007521

Related commands:
  Net2TransStream_Stop
  Net2TransStream_Timeout
  
Related SWIs:
  Net2TransStream_Start
  Net2TransStream_Stop
  Net2TransStream_Timeout
  
Related Vectors:
  None


Net2TransStream_Stop
--------------------

Description:
  CLI front to the Net2TransStream_Stop SWI.

Syntax:
  Net2TransStream_Stop

Parameters:
  None
  
Use:
  As the SWI.

Example:
  *Net2TransStream_Stop

Related commands:
  Net2TransStream_Start
  
Related SWIs:
  Net2TransStream_Start
  Net2TransStream_Stop
  
Related Vectors:
  None


Net2TransStream_Status
----------------------

Description:
  Display status information from the Net2TransStream RModule.

Syntax:
  Net2TransStream_Status

Parameters:
  None
    
Use:
  Displays the last value written to the various Transport Streamer registers
  and the address the registers are at.  Also shows the current bitrate of
  the incoming data and the bitrate the Transport Streamer was set to.

Example:
  *Net2TransStream_Status

Related commands:
  Net2TransStream_Start
  Net2TransStream_Stop
  
Related SWIs:
  Net2TransStream_Start
  Net2TransStream_Stop
  
Related Vectors:
  None


Net2TransStream_Timeout
-----------------------

Description:
  CLI front to the Net2TransStream_Timeout SWI.

Syntax:
  Net2TransStream_Timeout [ <timeout(csecs)> ]

Parameters:
  timeout - timeout value in centi-seconds
  
Use:
  As the SWI.  In addition, if you don't provide a value, the current
  timeout value is displayed.

Example:
  *Net2TransStream_Timeout

Related commands:
  Net2TransStream_Start
  
Related SWIs:
  Net2TransStream_Start
  Net2TransStream_Timeout
  
Related Vectors:
  None


Net2TransStream_Test
--------------------

Description:

Syntax:
  Net2TransStream_Test <bitrate> <filename>

Parameters:
  bitrate  - bitrate to set Transport Streamer to in bits/sec
  filename - filename of an MPEG2TS file to read from
  
Use:
  A development/test *command which assumes the Transport Streamer card is
  in slot 3.  Takes a MPEG2TS file and bitrate and writes it to the
  Transport Streamer card.

Example:
  *Net2TransStream_Test 4007521 DUMBO1/MPG

Related commands:
  None
  
Related SWIs:
  None
  
Related Vectors:
  None


Events
======

Internet Event
--------------

The RModule uses the Internet event to determine when new data arrives on
the port.  When it does it will read data from the socket until it gets
EWOULDBLOCK.  The socket is marker as non-blocking and to generate Internet
async. events.

The first block of data that is received after the Net2TransStream_Start
SWI is successfully called will be processed so that syncronisation with
the data stream is acheived.  Data written to the Transport Streamer must
start on an MPEG2TS packet bondary indicated by a 0x47 byte at the start and
of length 188 bytes.  The Module will scan the data until it finds a 188byte
stream of data packets which starts with a 0x47 byte.  Once this is found
the module writes this packet and all subsequent data to the Transport
Streamer.  If the module misses any UDP packet, then it will get out of 
sync and write inconsistant data to the Transport Streamer.  If this happens,
the Start SWI needs to be called again to force the module to re-syncronise.
The timeout mechanism helps a bit in this, but is was designed for the Jedi
demo environment where a playing stream would be manually stopped, then
another one would be played.  As this is down by user intervention a
timeout of a short period, ie. 1 second, was sufficent in which to re-start
the module as data UDP packets arrive a lot quicker than every second.

