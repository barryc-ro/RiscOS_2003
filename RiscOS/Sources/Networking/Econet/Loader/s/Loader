        TTL Econet Podule loader code definition => Loader

        ; Modifications:
        ;
        ; 11-Jan-88 SKS Created
        ; 07-Dec-88 SKS Put into MidiPodule structure before I go
        ; 05-May-89 TMD Updated to new source release scheme
        ;
        ; All code must be relocatable and position independent.  It can be
        ; assumed that the code will be run in RAM in SVC mode.  The base
        ; address will be as if an ALIGN 16, 4 had be 'executed' before the
        ; code was assembled.
        ;
        ; Registers
        ; ---------
        ;
        ;         Input       Output     Comments
        ;         -----       ------     --------
        ; R0      Write data  Read data  Treated as a byte
        ; R1      Address                Must be preserved
        ; R2 - R4                        May be used
        ; R5 - R9                        Must be preserved
        ; R10                            May be used
        ; R11     Hardware               Base address of hardware, must be preserved 
        ; R12                            Private, must be preserved
        ; R13     sp                     Stack pointer (FD)
        ; R14                            Return address use BICS pc, lr, #V_bit
        ; R15                            PC
        ;
        ; Entry points
        ; ------------
        ; Origin + &00     Read a byte
        ; Origin + &04     Write a byte
        ; Origin + &08     Reset to initial state, if possible
        ; Origin + &0C     SWI XROMPodule_CallLoader
        ;
        ; Initialisation
        ; --------------
        ; The first call will be to Read address 0.
        ;
        ; Errors
        ; ------
        ; Read and Write may be able to return errors like 'Bad address' if the
        ; device is not as big as the address given, or 'Bad write' if using
        ; read after write checks on the Write call.  If the SWI entry is not
        ; supported then don't return an error.  If reset fails or can't be done
        ; then report an error.  Since device drivers may well be short of space
        ; it will be possible to return an error with R0=0 and an error string will
        ; be used from the Podule manager, note that this is not encouraged but is
        ; offered as a last resort.  Errors ar returned to the caller by using
        ; ORRS pc, lr, #V_bit rather than the usual BICS exit.
        ;
        ; Example
        ; -------

        SUBT Podule loader for Econet podule

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:Podule

        GET     Version

        LEADR   &FFFFFD00                               ; Data

PageRegister    * &3100

PageSize        * 10                                    ; Bits

DeviceSize      * 128 * 1024                            ; A 1 megabit EPROM (128K)

Origin
        B       ReadByte
        B       WriteByte
        B       Reset
        BICS    pc, lr, #V_bit

Reset
        LDR     r10, =Podule_BaseAddressANDMask
        AND     r10, r11, r10                           ; Hardware address only
        ADD     r10, r10, #PageRegister                 ; Now the actual address
        MOV     r2, #0                                  ; Default page is zero
        STR     r2, [ r10 ]
        BICS    pc, lr, #V_bit

ReadByte
        LDR     r10, =Podule_BaseAddressANDMask
        AND     r10, r11, r10                           ; Hardware address only
        CMP     r1, #DeviceSize - (1 :SHL: PageSize)    ; There are N-1 pages
        BHS     ErrorTooBig
        ; Compute and set the page number
        MOV     r0, r1, LSR #PageSize
        ADD     r0, r0, #1                              ; Account for the first physical page
        ; Duplicate the bottom 16 bits in the top 16 bits
        ORR     r0, r0, r0, LSL #16
        ADD     r2, r10, #PageRegister                  ; Now the actual address
        STR     r0, [ r2 ]                              ; Select the page we want
        ; Now clear all but the bottom <PageSize> Bits
        MOV     r0, r1, LSL #32 - PageSize              ; Leaves only <PageSize> bits
        MOV     r0, r0, LSR #32 - PageSize - 2          ; Puts them back where they belong
        LDRB    r0, [ r10, r0 ]                         ; accounting for word addressing
        BICS    pc, lr, #V_bit

ErrorTooBig
        ADR     r0, ErrorBlock_AddressTooBig
        ORRS    pc, lr, #V_bit

        MakeErrorBlock AddressTooBig
        ALIGN

WriteByte
        ADR     r0, ErrorBlock_NotWriteable
        ORRS    pc, lr, #V_bit

        MakeErrorBlock NotWriteable
        ALIGN

        LTORG

VersionString
        DCB     "EconetLoader", 9, "$Version ($CurrentDate)", 0

        END
