/*
 * Generic (c.generic)
 *
 * © Acorn Computers Ltd. 1997
 *
 */
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include "kernel.h"
#include "sys/types.h"
#include "sys/socket.h"
#include "sys/errno.h"
#include "socklib.h"
#include "generic.h"


/* Function to compare two strings case insensitively
 *
 * Originally: sbrodie
 *
 * Parameters: matches those of strcmp.
 * Result: matches the exit conditions of strcmp.
 *
 *
 * The conversions to unsigned int stop the compiler messing around with
 * shifts all over the place whilst trying to promote the chars to int
 * whilst retaining the sign.
 *
 * Problems: Choice of return value when strings do not match is based
 *           upon character number rather than any alphabetic sorting.
 * 
 */
int Strcmp_ci(const char *first, const char *second)
{
	for (;;) {
		unsigned int a = *first++;
		unsigned int b = *second++;

		if (a == 0) return -b;
		if (a != b) {
			unsigned int c = (unsigned int) tolower(a);
			unsigned int d = (unsigned int) tolower(b);
			signed int result = c - d;
			if (result != 0) return result;
		}
	}
}


/* Function to duplicate a string (allocate memory and copy bytewise)
 *
 * Originally: sbrodie
 *
 * Parameters: const char *s1 - source string
 * Result: char * - duplicate string (or NULL on failure or s1 NULL)
 *
 * 
 * Problems: None known
 * 
 */

char *Strdup(const char *s1)
{
  	if (s1 == NULL) {
  	        return NULL;
  	}
  	else {
		const size_t length = strlen(s1) + 1;
		char *const s2 = malloc(length);
		
		if (s2 == NULL) return NULL;
	        return memcpy(s2, s1, length);
  	}
}


/* Function to duplicate a string with some extra storage allocated too.
 *
 * Originally: sbrodie
 *
 * Parameters: const char *s1 - source string
 *             const size_t extra - amount of spare bytes
 *
 * Result: char * - duplicate string (or NULL on failure or s1 NULL)
 *                  in a malloc block with extra bytes available.
 *
 *
 * This routine is useful if you need to duplicate a string and then append
 * data to it, since it can arrange for the extra memory to be already 
 * present in the copied string.
 *
 * 
 * Problems: None known
 * 
 */
char *Strdup_ext(const char *s1, const size_t extra)
{
  	if (s1 == NULL) {
  	        return NULL;
  	}
  	else {
		const size_t length = strlen(s1) + 1;
		char *const s2 = malloc(length + extra);
		
		if (s2 == NULL) return NULL;
	        return memcpy(s2, s1, length);
  	}
}

/* Function to compare two strings case insensitively up to a maximum char count
 *
 * Originally: sbrodie
 *
 * Parameters: matches those of strncmp.
 * Result: matches the exit conditions of strncmp.
 *
 *
 * The conversions to unsigned int stop the compiler messing around with
 * shifts all over the place whilst trying to promote the chars to int
 * whilst retaining the sign.
 *
 * Problems: Choice of return value when strings do not match is based
 *           upon character number rather than any alphabetic sorting.
 * 
 */
int Strncmp_ci(const char *first, const char *second, size_t limit)
{
	for (;limit;--limit) {
		unsigned int a = *first++;
		unsigned int b = *second++;

		if (a == 0) return -b;
		if (a != b) {
			unsigned int c = (unsigned int) tolower(a);
			unsigned int d = (unsigned int) tolower(b);
			signed int result = c - d;
			if (result != 0) return result;
		}
	}

	return 0;
}


/* Function to duplicate a string with length limit
 *
 * Originally: sbrodie
 *
 * Parameters: const char *s1 - source string
 *             size_t size    - maximum length of string
 * Result: char * - duplicate string (or NULL on failure or s1 NULL)
 *
 *
 * The size allocated is "size+1" so that a zero-terminator can be added.
 * 
 * Problems: None known
 * 
 */


char *Strndup(const char *s1, size_t size)
{
	char *s2;

  	if (s1==NULL) return NULL;

  	s2 = malloc(size+1); /* +1 so we can force a zero terminator */
  	if (s2 == NULL) return NULL;

  	s2[size] = '\0';
  	return memcpy(s2,s1,size);
}


int close_socket(int *psd)
{
	const int sd = *psd;
        if (sd == -1) {
                errno = ENOTSOCK;
                return -1;
        }
	*psd = -1;
	(void) shutdown(sd, 2);
	return socketclose(sd);
}
