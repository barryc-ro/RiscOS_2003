/*
 * SSL (h.module)
 *
 */

#define TRUE		1
#define FALSE		0

#include <time.h>

#include "x509.h"
#include "ssl.h"

#define TMPBUFSIZ	4096

typedef struct session {
	struct		session *next;	/* Pointer to next session */
	unsigned int 	id;

	int		s;
	int		verify_depth;
	int		verify_error;
	SSL_CTX		*ctx;
	SSL		*con;
	SSL		*con2;

	int		state;
	int		bufptr;
	char		buffer[TMPBUFSIZ];
} Session;


/*************************************************************/
/* Found in ^.c.ses_ctrl				     */
/*************************************************************/
/* These functions are used to manipulate session control    */
/* structures; find, create and kill sessions		     */
/*************************************************************/
extern Session *find_session(unsigned int id);
extern Session *new_session(const char *, const char *, int);
extern void kill_session(Session */*s*/);
extern void ses_kill_all(void);
extern void session_check(void);
extern void session_init(void);

/*************************************************************/
/* Found in ^.c.connect					     */
/*************************************************************/
/* These functions are used to create a socket, connect it   */
/* to a remote host, and make it non_blocking		     */
/*************************************************************/
extern int opensock(char *name, int port, char *sername, int *state, int fd, Session *ses);

/*************************************************************/
/* Found in ^.c.module					     */
/*************************************************************/
/* The basic module entry points			     */
/*************************************************************
extern _kernel_oserror *module_init(char *cmd_fail,int podule_base,void *pw);
extern _kernel_oserror *module_kill(int fatal, int podule, void *pw);
extern _kernel_oserror *swi_handler(int swi_no,_kernel_swi_regs *r,void *pw);

*/
extern _kernel_oserror *return_error(int status_code);

/*************************************************************/
/* This is the description of the URL module error base and  */
/* where we are within it. We have 32 error messages that    */
/* have been allocated to us.				     */
/*************************************************************/
#define ERROR_BASE   (0x81ef00) /* URL module base */
#define ACORNSSL_OFFSET (0x000020) /* SSL module base */

typedef enum {
	ACORNSSL_ERROR_BAD_SESSION	= (ERROR_BASE + ACORNSSL_OFFSET),
	ACORNSSL_ERROR_BAD_CTX,
	ACORNSSL_ERROR_SSL_NO_INIT,
	ACORNSSL_ERROR_NO_DEFAULT_VERIFY_LOCATIONS
} https_error_numbers;

/* This is the size of the internal header buffer.  Blocks of RMA will
 * be claimed in chunks of this size, and blocks will be extended by
 * this amount if found to be insufficiently long
 */
#define INTERNAL_BUFFER_SIZE	(4096)


extern void *module_realloc(void */*ptr*/, size_t /*size*/);
