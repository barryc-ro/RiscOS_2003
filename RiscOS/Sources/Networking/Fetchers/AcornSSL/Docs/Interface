



                AcornSSL API Specification




        Drawing Number:         1215,229/FS
        Issue:                  1
        Date:                   17/11/1998
        Previous Issue:
        Status:                 Released
        Change:
        Author:                 Stewart Brodie
        Classification:         General Release
        Master Format:          Plain text


Contents
========

  Copyright
  Overview
  Scope and Purpose of Document
  Outstanding Issues
  SWI Interface
  Acceptance Tests
  Bibliography
  Glossary
  Issue History



Copyright
=========

This document is copyright (C) Acorn Computers Ltd. 1998




Introduction
============


Scope and Purpose of Document
=============================


The AcornSSL module provides a simple interface to clients who wish to use
the encryption facilities provided by the SSLeay library[1] under RISC OS.
This is primarily, but not exclusively, for use by the AcornHTTP module[2].
This specification documents the API provided by version 0.06 and later of
the AcornSSL module[3].


Overview
========

The AcornSSL module provides a set of SWIs for interfacing to the
network.  Each API call is analogous to a call to the Internet module and the
relationship between the two module APIs is indicated by the SWI name.  There
is a single exception to this: SWI HTTPS_Socket attaches a different meaning
to its parameters.

The session descriptors created and returned by SWI HTTP_Socket are used in
an analogous manner to the manner in which socket handles are used with the
Internet module.  However, you cannot mix and match the session descriptors
used by this module with normal socket handles - this will not work.  If you
attempt to pass descriptors returned by SWI HTTPS_Socket to the Internet module
you will get EBADF errors, and if you use it with FD_SET et al. you'll
probably just get data aborts.  Conversely, you cannot pass socket handles
issued by the Internet module to the AcornSSL SWIs.

Some of the API calls will 'lie' about the underlying status in order to
maintain the illusion that the AcornSSL module is emulating the Internet
module API.  For example, during certificate exchange phases of the
transaction, for read and write operations, AcornSSL will return ENOTCONN
errors, despite the fact that a connection has been established.  This
prevents clients from making invalid assumptions about the state of the
connection, but could be confusing to the application programmer who gets
ENOTCONN errors whilst noticing that the 'inetstat' utility, for example,
says that the connection is established and OK.

The descriptors issued by the AcornSSL module may be considered as
abstractions of reliable connection-oriented sockets, thus the type of
operations which may be carried out on an AcornSSL descriptor are
equivalent to those available with SOCK_STREAM sockets issued by
the Internet module.

The interface specified in this document is first implemented in version 0.83
of the AcornHTTP module.  Version 0.82 and earlier will fail to work with
this interface.



Outstanding Issues
==================

There are no outstanding issues relating to this document.



SWI Interface
=============

None of the following SWIs are re-entrant.  In all cases, the interrupt
status is undefined.



HTTPS_Socket                                                   SWI &50F80


On entry:
   R0: flags:
     bits 0-7 : reserved.  Must be zero if bit 31 is set.
     bits 8-30: reserved.  Must be zero.
     bit 31   : if set, R1 and R2 are valid.  new format
   R1: Certificate file (const char *) - if R0:31 is set
   R2: Key file (const char *) - if R0:31 is set

On exit:
   R0: session handle to be passed to other AcornSSL SWIs


This SWI call initialises a new session.  It is used to obtain a handle which
can be used to uniquely identify a particular session.  No assumption can or
should be made about the handle returned from this SWI. In particular, it
cannot be assumed that it is an Internet module socket handle (it isn't) and
consequently it cannot be used with the FD_ macros and select().

If bit 31 is set on entry, then R1 and R2 give the location of the
certificate file and the key file respectively.  If bit 31 is clear on
entry (as it will be for simply converted clients who just call HTTPS_Socket
instead of Socket_Creat) then all input registers are ignored.  The
certificate and key files contain the SSLeay configuration - details
of which can be found in the SSLeay documentation[1].

Either or both of the certificate and key file may be set to NULL (which is
the default if R0:31 is clear).



HTTPS_Ioctl                                                    SWI &50F81

On entry:
   as Socket_Ioctl.

On exit:
   as Socket_Ioctl.


Provides indirect access to Socket_Ioctl for a given descriptor.



HTTPS_Connect                                                  SWI &50F82

On entry:
   as Socket_Connect.

On exit:
   as Socket_Connect.


Provides indirect access to Socket_Connect for a given descriptor.



HTTPS_Shutdown                                                 SWI &50F83

On entry:
   as Socket_Shutdown.

On exit:
   as Socket_Shutdown.


Provides indirect access to Socket_Shutdown for a given descriptor.


HTTPS_Close                                                    SWI &50F84

On entry:
   as Socket_Close.

On exit:
   as Socket_Close.


Provides indirect access to Socket_Close for a given descriptor.  The
descriptor becomes invalid after this call has been made and returned
without error.



HTTPS_Getsockopt                                               SWI &50F85

On entry:
   as Socket_Getsockopt.

On exit:
   as Socket_Getsockopt.


Provides indirect access to Socket_Getsockopt for a given descriptor.



HTTPS_Write                                                    SWI &50F86

On entry:
   as Socket_Write.

On exit:
   as Socket_Write.


Provides indirect access to Socket_Write for a given descriptor.




HTTPS_Recv                                                     SWI &50F87

On entry:
   as Socket_Recv.

On exit:
   as Socket_Recv.


Provides indirect access to Socket_Recv for a given descriptor.  Socket_Read
is emulated by calling Socket_Recv with a fourth parameter (ie. R3) set to
zero.



Acceptance Tests
================

The following tests should be performed to verify that the module is
functioning correctly:

* Run !Browse (1216,220/DR), and try to connect to
  https://web.mail.demon.net/ and verify that it reports that a secure
  connection is in use.


Bibliography
============

[1] SSLeay.  http://www.psy.uq.oz.au/~ftp/Crypto

[2] AcornHTTP fetcher module, document number 1115,227.

[3] The module defined by this specification has number 1115,229.


Glossary
========

API
Application Programmer Interface.

SSL
Secure Sockets Layer



Issue history
=============

1   17/11/98  First issue.


