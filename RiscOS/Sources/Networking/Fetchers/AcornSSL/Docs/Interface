
General notes:


The AcornSSL module provides a simple interface to clients who wish to use
the encryption facilities provided by the SSLeay library under RISC OS.

Each API call is analogous to a call to the Internet module and the
relationship between the two module APIs is indicated by the SWI name.
There is a single exception to this: SWI HTTPS_Socket attaches a different
meaning to its parameters.

Some of the API calls will 'lie' about the underlying status in order to
maintain the illusion that the AcornSSL module is emulating the Internet
module API.  For example, during certificate exchange phases of the
transaction, for read and write ops, AcornSSL will return ENOTCONN errors,
despite the fact that a connection has been established.  This prevents
clients from making invalid assumptions about the state of the connection,
but could be confusing to the application programmer who gets ENOTCONN errors
whilst noticing that 'inetstat', for example, says that the connection is
established and OK.


IMPORTANT: You cannot mix and match the session descriptors used by this
module with normal socket handles - this will not work.  If uou attempt to
pass handles returned by HTTPS_Socket to the Internet module you will get
EBADF errors, and if you use it with FD_SET et al. you'll probably just get
data aborts.


This specification is first provided by AcornHTTP 0.83.  Version 0.82 and
earlier will fail to work with this interface.




SWIs

HTTPS_Socket                                                   SWI &50F80


On entry:
   R0: flags:
     bits 0-7 : reserved.  Must be zero unless bit 31 clear.
     bits 8-30: reserved.  Must be zero.
     bit 31   : if set, R1 and R2 are valid.  new format
   R1: Certificate file (const char *) - if R0:31 is set
   R2: Key file (const char *) - if R0:31 is set

On exit:
   R0: session handle to be passed to other HTTPS SWIs


This SWI call initialises a new session.  It is used to obtain a handle
which can be used to uniquely identify a particular transaction.  No
assumption can or should be made about the handle returned from this SWI.
In particular, it cannot be assumed that it is a socket handle (it isn't) and
consequently it cannot be used with the FD_ macros and select().

If bit 31 is set on entry, then R1 and R2 give the location of the
certificate file and the key file respectively.  If bit 31 is clear on
entry (as it will be for simply converted clients who just call HTTPS_Socket
instead of Socket_Creat) then all input registers are ignored.

Either or both of the certificate and key file may be set to NULL (which is
the default if R0:31 is clear).



HTTPS_Ioctl                                                    SWI &50F81

On entry:
   as Socket_Ioctl.
   
On exit:
   as Socket_Ioctl.
   

Provides indirect access to Socket_Ioctl for a given descriptor.



HTTPS_Connect                                                  SWI &50F82

On entry:
   as Socket_Connect.
   
On exit:
   as Socket_Connect.
   

Provides indirect access to Socket_Connect for a given descriptor.  



HTTPS_Shutdown                                                 SWI &50F83

On entry:
   as Socket_Shutdown.
   
On exit:
   as Socket_Shutdown.
   

Provides indirect access to Socket_Shutdown for a given descriptor.  


HTTPS_Close                                                    SWI &50F84

On entry:
   as Socket_Close.
   
On exit:
   as Socket_Close.
   

Provides indirect access to Socket_Close for a given descriptor.  The
descriptor becomes invalid after this call has been made and returned
without error.



HTTPS_Getsockopt                                               SWI &50F85

On entry:
   as Socket_Getsockopt.
   
On exit:
   as Socket_Getsockopt.
   

Provides indirect access to Socket_Getsockopt for a given descriptor.



HTTPS_Write                                                    SWI &50F86

On entry:
   as Socket_Write.
   
On exit:
   as Socket_Write.
   

Provides indirect access to Socket_Write for a given descriptor.




HTTPS_Recv                                                     SWI &50F87

On entry:
   as Socket_Recv.
   
On exit:
   as Socket_Recv.
   

Provides indirect access to Socket_Recv for a given descriptor.  Socket_Read
is emulated by calling Socket_Recv with a fourth parameter (ie. R3) set to
zero.

