/*
 * SSL (c.module)
 *
 * © Acorn Computers Ltd. 1998
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "sys/types.h"
#include "sys/errno.h"
#include "SSLHdr.h"
#define USE_SOCKETS
#include "x509.h"
#include "ssl.h"
#include "utils.h"
#include "module.h"
#include "protocol.h"
#include "sys/types.h"
#include "socklib.h"
#include "acornssl.h"
#include "memory.h"

#include "netinet/in.h"
#include "arpa/inet.h"

#if CMHG_VERSION < 516
#define CMHG_CONST
#else
#define CMHG_CONST const
#endif

#ifdef ROM
static _kernel_oserror *__ROM;
#endif

#define NO_SUCH_SWI		(0x1E6)

#define URL_PROTOCOL_REGISTER	(0x83e20)
#define URL_PROTOCOL_DEREGISTER (0x83e21)

#define URL_00			(0x83e00)
#define URL_PROTO_ARRIVED	(0x83e01)
#define URL_SSL_AVAILABLE	(0x83e02)

#define HTTP_00			(0x83F80)

#ifndef ROM
extern int messages_file(void);
#endif

#ifndef ROM
#ifdef DEFINE_ERRNO
int __errno;
#endif
#endif


volatile static int callback_pending_flag;


/*************************************************************/
/* So the real error number that we have to return is:	     */
/*************************************************************/
#define HTTPS_ERROR_NUM  (ERROR_BASE+HTTPS_OFFSET)

/*************************************************************/
/* The error message definitions			     */
/*************************************************************/
typedef enum {
	HTTPS_HOST_CONNECT_ERROR = HTTPS_ERROR_NUM + 0,	/* connect() failed */
	HTTPS_BAD_SESSION_ERROR	 = HTTPS_ERROR_NUM + 1,
	HTTPS_GENERAL_ERROR	 = HTTPS_ERROR_NUM + 2
} http_internal_error_codes;



/* Sets clibrary_realloc_routine_is_buggy non-zero if RISC OS 3.1 or earlier (ie. ROM realloc is broken) */
static int clibrary_realloc_routine_is_buggy;
static void module_check_os_version(void)
{
        int os;
        (void) _swix(OS_Byte, _INR(0,2)|_OUT(1), 129, 0, 255, &os);
        clibrary_realloc_routine_is_buggy = (os <= 0xA4);
}

static _kernel_oserror *try_to_register(void)
{
        return _swix(OS_ServiceCall, _INR(0,2), 0, URL_SSL_AVAILABLE, Module_VersionNumber);
}

static _kernel_oserror *try_to_deregister(void)
{
        return _swix(OS_ServiceCall, _INR(0,2), 1, URL_SSL_AVAILABLE, Module_VersionNumber);
}

int callback_handler(_kernel_swi_regs *r, void *pw)
{
	(void) pw;
	(void) r;

	if (callback_pending_flag != 0) {
		(void) try_to_register();
		callback_pending_flag = 0;
	}

	return 1;
}

/*************************************************************/
/* _kernel_oserror *module_init(char *cmd_fail, int podu...  */
/*************************************************************/
/* Start up and register ourselves with the URL module	     */
/*************************************************************/
_kernel_oserror *module_init(CMHG_CONST char *cmd_tail, int podule_base, void *pw)
{
	_kernel_oserror *e = NULL;

	(void) podule_base;
	(void) cmd_tail;
	(void) pw;

        #ifdef ROM
	__ROM = _swix(0xa2c43, _IN(0), pw);
	#endif
	callback_pending_flag = 0;

	module_check_os_version();
	session_init();

        #ifndef ROM
	e = _swix(ResourceFS_RegisterFiles, _IN(0), messages_file());
        #endif
	if (e == NULL) {
		if (getenv(Module_Title "$Path")) {
			e = messages_file_open(Module_Title ":Messages");
		}
		else {
			e = messages_file_open("Resources:$.Resources.URL." "AcornSSL" ".Messages");
		}

		if (e == NULL) e = memory_initialise();
		if (e == NULL) e = acornssl_initialise();

		/* Must resend service call on a callback because HTTP module cannot talk to us
		 * whilst out init code is still executing, so the checks it is carrying out for
		 * our presence may fail.
		 */
		if (e == NULL && _swix(OS_AddCallBack, _INR(0,1), callback_entry, pw) == NULL) {
			callback_pending_flag = 1;
		}
		#ifndef ROM
		if (e != NULL) (void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
		#endif
	}


	return e;
}

void service_handler(int service_number, _kernel_swi_regs *r, void *pw)
{
        #ifdef TRACE
        protocol_debug("Service &%X: R0 = %d for SWI chunk %8x\n", service_number, r->r[0], r->r[3]);
        #endif


	if (service_number == URL_PROTO_ARRIVED && r->r[3] == HTTP_00 && r->r[0] == 0) {
                (void) try_to_register();
		if (!callback_pending_flag && _swix(OS_AddCallBack, _INR(0,1), callback_entry, pw) == NULL) {
			callback_pending_flag = 1;
		}
	}
}

/*************************************************************/
/* _kernel_oserror *module_kill(int fatal, int podule, ...   */
/*************************************************************/
/* When we are killed off, deregister ourselves from the URL */
/* module						     */
/*************************************************************/
_kernel_oserror *module_kill(int fatal, int podule, void *pw)
{
        (void) pw;
        (void) podule;
        (void) fatal;

	if (callback_pending_flag) {
		(void) _swix(OS_RemoveCallBack, _INR(0,1), callback_entry, pw);
	        callback_pending_flag = 0;
	}

	ses_kill_all();
	acornssl_finalise();

	messages_file_close();
	#ifndef ROM
	(void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
	#endif

	(void) try_to_deregister();

	#ifdef ROM
	if(!__ROM) _swix(0xa2c41, 0);
	#endif

	return NULL;
}


#ifdef TRACE
static const char *swinames[] = {
        	"CS", "DS",
                "Ioctl", "Socket", "Connect", "Shutdown", "Close", "Getsockopt", "Write", "Recv"
};
#endif

/*************************************************************/
/* _kernel_oserror *swi_handler(int swi_no, _kernel_swi_...  */
/*************************************************************/
/* Upon a SWI call into this module decide what to do and    */
/* how to do it and all that. Just an excuse for a case	     */
/* statement						     */
/*************************************************************/
_kernel_oserror *swi_handler(int swi_offset, _kernel_swi_regs *r, void *pw)
{
	/* Instead of adding the SWI chunk to the offset and comparing with the
	 * various cmhg defined macros, mask off the SWI chunk identifier at
	 * compile time.  This may well enable the C compiler to do better when
	 * it builds the switch table
	 */
        Session *s = NULL;

	(void) pw;

	DEBUG(("SWI HTTPS_%s called.\n", swi_offset>=((sizeof(swinames)/sizeof(char*)))?"UNKNOWN":swinames[swi_offset]));

	if (swi_offset == (HTTPS_Socket - HTTPS_00)) {
	        DEBUG(("HTTPS_Socket called.  Creating new session ..\n"));
	        s = new_session();
		if (s == NULL) {
		        return make_error(HTTPS_ERROR_BAD_SESSION, 0);
		}
	        s->id = (unsigned) s;
	        r->r[0] = s->id >> 2;
	        DEBUG(("New session ID is %p, session handle is %08x\n", s, r->r[0]));
	        return NULL;
	}
	else {
	        DEBUG(("Looking for session %08x\n", r->r[0]));
        	s = find_session(((unsigned)r->r[0]) << 2);
		if (s == NULL) {
		        return make_error(HTTPS_ERROR_BAD_SESSION, 0);
		}
		if (s->con == NULL) {
		        return make_error(HTTPS_ERROR_BAD_CTX, 0);
		}
	        DEBUG(("Session ID is %p, session handle is %08x\n", s, r->r[0]));
	}

	switch (swi_offset) {

		case HTTPS_Ioctl - HTTPS_00:
	        	DEBUG(("HTTPS_Ioctl(...,%08x,...)\n", r->r[1]));
		        r->r[0] = acornssl_ioctl(s,
		        	(unsigned long) r->r[1],
                                (void *) r->r[2]);
		        break;

		case HTTPS_Connect - HTTPS_00:
	        	DEBUG(("HTTPS_Connect(...,%s,...)\n", inet_ntoa(((struct sockaddr_in *)r->r[1])->sin_addr)));
		        r->r[0] = acornssl_connect(s,
                                (const struct sockaddr *) r->r[1],
                                (int) r->r[2]);
		        break;

		case HTTPS_Shutdown - HTTPS_00:
	        	DEBUG(("HTTPS_Shutdown(...,%d)\n", r->r[1]));
		        r->r[0] = acornssl_shutdown(s,
                                (int) r->r[1]);
		        break;

		case HTTPS_Close - HTTPS_00:
	        	DEBUG(("HTTPS_Close(...)\n"));
		        r->r[0] = acornssl_close(s);
		        s=NULL;
		        break;

		case HTTPS_Getsockopt - HTTPS_00:
	        	DEBUG(("HTTPS_Getsockopt(...,%08x,%08x,...)\n", r->r[1],r->r[2]));
		        r->r[0] = acornssl_getsockopt(s,
                                (int) r->r[1],
                                (int) r->r[2],
                                (void *) r->r[3],
                                (int *) r->r[4]);
		        break;

		case HTTPS_Write - HTTPS_00:
	        	DEBUG(("HTTPS_Write(...,%p,%08x)\n", (void *)r->r[1], r->r[2]));
		        r->r[0] = acornssl_write(s,
                                (const void *) r->r[1],
                                (size_t) r->r[2]);
		        break;

		case HTTPS_Recv - HTTPS_00:
	        	DEBUG(("HTTPS_Recv(...,%p,%08x,%s)\n", (void *)r->r[1], r->r[2],
	                        r->r[3] & MSG_PEEK ? "Peek" : "Read"));
		        r->r[0] = acornssl_recv(s,
                                (void *) r->r[1],
                                (size_t) r->r[2],
                                (int) r->r[3]);
		        break;

		default:
			return(error_BAD_SWI);
	}


	DEBUG(("HTTPS SWI Exits - r->r[0] == %d, errno == %d (%s), state == %d\n", r->r[0], errno,
		errno?errstring(errno):"", s?s->state:-1));

	if (r->r[0]<0) {
	        _kernel_oserror *e = find_error();
		e->errnum = errno;
        	(void) strcpy(e->errmess, "SSL Internet error");
                return e;
	}

	return NULL;
}

/*************************************************************/
/* _kernel_oserror *return_error(int status_code)	     */
/*************************************************************/
/* Given a HTTP internal status code generate the correct    */
/* error block.						     */
/*************************************************************/
_kernel_oserror *return_error(int status_code)
{
	#ifdef TRACE
	protocol_debug("return_error called (code %d)\n",status_code);
	#endif

	switch (status_code) {
		case HTTPS_ERROR_BAD_SESSION:
			return make_error(HTTPS_BAD_SESSION_ERROR,0);
		default:
			return make_error(HTTPS_GENERAL_ERROR,0);
	}
}

/* RISC OS 3.1 SVC mode realloc is broken, so we must provide our own */
void *module_realloc(void *ptr, size_t size)
{
        #ifdef TRACE
        protocol_debug("module_realloc(%p, %d)\n", ptr, size);
        #endif
	if (!clibrary_realloc_routine_is_buggy) return realloc(ptr, size);

        if (ptr == NULL) {
                return malloc(size);
        }
        if (size == 0) {
                free(ptr);
		return NULL;
        }
	else {
	        const int *rma_block = ptr;
	        const size_t newsize = size - (rma_block[-1] - 4);
	        char *newptr;

		if (_swix(OS_Module, _IN(0)|_INR(2,3)|_OUT(2), 0xD, ptr, newsize, &newptr) != NULL) {
		        return NULL;
		}

		return newptr;
	}
}
