/*
 * Generic (c.utils)
 *
 * © Acorn Computers Ltd. 1997
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include "kernel.h"
#include "swis.h"
#include "utils.h"

#define ERR_BLOCKS 3

static int messages_fd[4];

_kernel_oserror *read_message (const char *token, const char **buffer, size_t *inoutlength)
{
	return _swix(MessageTrans_Lookup, _INR(0,7)|_OUTR(2,3), messages_fd, token, *buffer,
		*inoutlength, 0, 0, 0, 0, buffer, inoutlength);
}


_kernel_oserror *find_error (void)
{
	static _kernel_oserror global_error_block[ERR_BLOCKS];
	static int errblock = 0;

	errblock = (errblock+1) % ERR_BLOCKS;
	return &global_error_block[errblock];
}

_kernel_oserror *make_error (int err_num, int num_args, ...)
{
	_kernel_oserror *e, *ptr = find_error();
	va_list		ap;
	char		*s, token[4];
	int		i=4;
	char		*sub[4]={0,0,0,0};

	ptr->errnum = err_num;

	num_args = (num_args>4)?4:num_args;

	for (va_start(ap, num_args); num_args--; i++) {
		s	     = va_arg (ap, char *);
		sub[i] =	 (s && *s) ? s : NULL; /* copy (pointer to args)s into registers */
	}
	va_end (ap);

	sprintf (token, "E%02x", err_num&0x1f);

	e = _swix(MessageTrans_Lookup, _INR(0,7), messages_fd, token, ptr->errmess,
		sizeof(*ptr) - sizeof(ptr->errnum) /* 252! */,
		sub[0],sub[1],sub[2],sub[3]);
	return ptr;
}

_kernel_oserror *messages_file_open (char *messages_filename)
{
	return _swix(MessageTrans_OpenFile, _INR(0,2), messages_fd, messages_filename, 0);
}


_kernel_oserror *messages_file_close (void)
{
	return _swix(MessageTrans_CloseFile, _IN(0), messages_fd);
}
