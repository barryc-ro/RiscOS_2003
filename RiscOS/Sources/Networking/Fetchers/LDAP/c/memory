/* File:    memory.c
 * Purpose: Memory allocation for Toolbox module
 * Author:  Kevin Bracey
 * History: 22-Nov-96: KJB:   created
 *          21-Apr-99: SNB:   adapted for NFS module
 *          16-Jul-00: SNB:   adapted for LDAP module
 *
 */


#include <string.h>
#include <stddef.h>
#include <stdlib.h>
#include "swis.h"
#include "kernel.h"

#include "memory.h"
#include "heapswis.h"
#include "protocol.h"

#include <ldap.h>

/* Declare the maximum dynamic area size.
 */
#define MAX_DA_SIZE     (8*1024*1024)

static int da_number;
static void *da_addr;
static int da_size;
static int page_size;

static _kernel_oserror *extend_heap(int req);
static void shrink_heap(void);

static _kernel_oserror *_ldap_memory_alloc(size_t size, void **pp, int zero);
static _kernel_oserror *_ldap_memory_realloc(void *, void **, size_t size);
static _kernel_oserror *_ldap_memory_free(void *p);

/****************************************************************************
 * memory_initialise
 *
 * Prepare the memory library for use - if DAs are available, create a
 * DA for our use.
 *
 * Parameters:
 *    none
 *
 * Result:
 *    none
 *
 * Assumptions:
 *    Page size >= 16 bytes
 *
 */
_kernel_oserror *memory_initialise(void)
{
    _kernel_oserror *e;
    struct ldap_memalloc_fns fn;

    fn.ldapmem_malloc = _ldaplibs_malloc;
    fn.ldapmem_calloc = _ldaplibs_calloc;
    fn.ldapmem_realloc = _ldaplibs_realloc;
    fn.ldapmem_free = _ldaplibs_free;
    ldap_set_option(NULL, LDAP_OPT_MEMALLOC_FN_PTRS, &fn);

    da_number=-1;
    da_addr=0;
    da_size=0;

    /* Check whether we have DAs by trying an enumerate */

    if (_swix(OS_DynamicArea, _INR(0,1), 3, -1))
        return NULL;

    if ((e = _swix(OS_ReadMemMapInfo, _OUT(0), &page_size)) != NULL)
        return e;

    e = _swix(OS_DynamicArea, _INR(0,8)|_OUT(1)|_OUT(3),
                                   0,    /* Create DA */
                                   -1,   /* Any number */
                                   page_size, /* One page initially */
                                   -1,   /* Any address */
                                   128,  /* Not draggable */
                                   MAX_DA_SIZE,
                                   0, 0, /* No handler routine */
                                   "LDAP workspace",
                                   &da_number,
                                   &da_addr);

        if (e == NULL) {
                da_size = page_size;
                if ((e = xosheap_initialise(da_addr, da_size)) != NULL)
                {
                    memory_finalise();
                }
                else
                {
                    atexit((void(*)(void))memory_finalise);
                }
        }

    return e;
}

/****************************************************************************
 * memory_finalise
 *
 * This function shuts down the memory library, and frees our dynamic
 * area.
 *
 * Parameters:
 *    none
 *
 * Result:
 *    none
 *
 * Assumptions:
 *    Heap structure still as described in PRM
 *
 */
_kernel_oserror *memory_finalise(void)
{
    if (da_addr)
    {
            da_addr = NULL;
            return _swix(OS_DynamicArea, _INR(0,1), 1, da_number);
    }

    return NULL;
}

/****************************************************************************
 * _ldaplibs_malloc
 * _ldaplibs_calloc
 * _ldaplibs_realloc
 * _ldaplibs_free
 *
 * Parameters:
 *    As malloc, calloc, realloc and free
 *
 * Result:
 *    none
 *
 * Assumptions:
 *    none
 *
 */
void *_ldaplibs_malloc(size_t size)
{
    void *p;

    return _ldap_memory_alloc(size, &p, 0) ? NULL : p;
}

void *_ldaplibs_calloc(size_t count, size_t size)
{
    void *p;

    return _ldap_memory_alloc(size * count, &p, 1) ? NULL : p;
}

void *_ldaplibs_realloc(void *argp, size_t size)
{
    void *p;

    return _ldap_memory_realloc(argp, &p, size) ? NULL : p;
}

void _ldaplibs_free(void *p)
{
    (void) _ldap_memory_free(p);
}

/****************************************************************************
 * _ldap_memory_alloc
 *
 * This function allocates a block of memory from the RMA or our DA,
 * and zero-initialises it if the third parameter is non-zero
 *
 * Parameters:
 *    size - the amount of memory required
 *    pp   - the result pointer to be filled in
 *    zero - set to non-zero if new memory is to be zeroed (ie. calloc)
 *
 * Result:
 *    If allocation successful, pp filled in.
 *    If unsuccessful, either pp set to zero, or an error returned
 *
 * Assumptions:
 *    none
 *
 */
static _kernel_oserror *_ldap_memory_alloc(size_t size, void **pp, int zero)
{
    void *p;
    _kernel_oserror *e;

    if (!da_addr)
    {
        *pp = zero ? calloc(size, 1) : malloc(size);
        return NULL;
    }

    e = xosheap_alloc(da_addr, size, &p);
    if (e && e->errnum != 0x184)
        return e;

    if (e)
    {
        e = extend_heap(size);
        if (e)
            return e;

        e = xosheap_alloc(da_addr, size, &p);

        shrink_heap();

        if (e)
            return e;
    }
    if (p && zero)
        memset(p, 0, size);

    *pp = p;
    {
      int offset = (char *)p - (char *)da_addr;
      if (offset == 0x7b4 || offset == 0x7bc || offset == 0x3254 ||
        offset == 0x3728) {
          dprintf(("", "BLOCK ALLOCATION at offset &%x\n", offset));
        }
    }

    return NULL;
}


/****************************************************************************
 * _ldap_memory_realloc
 *
 * This function reallocates a block of memory from the RMA or our DA
 *
 * Parameters:
 *    p    - the existing pointer
 *    size - the amount of memory required
 *    pp   - the result pointer to be filled in
 *    zero - set to non-zero if new memory is to be zeroed (ie. calloc)
 *
 * Result:
 *    If allocation successful, pp filled in.
 *    If unsuccessful, either pp set to zero, or an error returned
 *
 * Assumptions:
 *    none
 *
 */
static _kernel_oserror *_ldap_memory_realloc(void *p, void **pp, size_t size)
{
    void *q;
    _kernel_oserror *e;
    size_t oldsize;
    int change;

    if (!p)
    {
        /* (p==NULL) => malloc */
        return _ldap_memory_alloc(size, pp, 0);
    }

    if (!da_addr)
    {
        *pp = realloc(p, size);
        return NULL;
    }

    e = xosheap_read_size(da_addr, p, &oldsize);
    if (e)
        return e;

    change = size - oldsize;
    /* No change?!? */
    if (change == 0)
        return NULL;

    e = xosheap_realloc(da_addr, p, change, &q);
    if (e && e->errnum != 0x184)
        return e;

    if (e)
    {
        e = extend_heap(size);
        if (e)
            return e;

        e = xosheap_realloc(da_addr, p, change, &q);

        shrink_heap();

        if (e)
            return e;
    }

    *pp = q;

    return NULL;
}

/****************************************************************************
 * _ldap_memory_free
 *
 * This function frees a block of memory
 *
 * Parameters:
 *    p   - the block to free
 *
 * Result:
 *    If the block isn't ours, an error may be returned
 *
 * Assumptions:
 *    none
 *
 */
static _kernel_oserror *_ldap_memory_free(void *p)
{
    _kernel_oserror *e;

    if (!da_addr)
    {
        dprintf(("", "_ldap_memory_free to RMA of block %p\n", p));
        free(p);
        return NULL;
    }

    {
      int offset = (char *)p - (char *)da_addr;
      if (offset == 0x7b4 || offset == 0x7bc || offset == 0x3254 ||
        offset == 0x3728) {
          dprintf(("", "BLOCK FREE at offset &%x\n", offset));
        }
    }


    e = xosheap_free(da_addr, p);
    if (e)
        return e;

    shrink_heap();

    return NULL;
}

/****************************************************************************
 * extend_heap
 *
 * This function extends the dynamic area/heap enough to allocate at least
 * req bytes
 *
 * Parameters:
 *    req - the space we want to allocate
 *
 * Result:
 *    Returns an error if unable to allocate enough space, else
 *    the heap/dynamic area is stretched enough to fit at least for bytes
 *
 * Assumptions:
 *    The heap and da are the same size
 *
 */
static _kernel_oserror *extend_heap(int req)
{
    int heapbase = ((int *)da_addr)[2];
    _kernel_oserror *e;
    int by;
    int size = req - (da_size-heapbase) + 4;

    e = _swix(OS_ChangeDynamicArea, _INR(0,1)|_OUT(1), da_number, size, &by);
    if (e) {
        return e;
    }

    if (size < 0) {
            by = -by;
    }

    e = xosheap_resize(da_addr, by);
    if (e)
    {
        shrink_heap();
        return e;
    }

    da_size += by;

    return NULL;
}

/****************************************************************************
 * shrink_heap
 *
 * This function shrinks the dynamic area/heap as much as possible
 *
 * Parameters:
 *    none
 *
 * Result:
 *    DA shrunk
 *
 * Assumptions:
 *    The heap and da are the same size, page_size is a power of 2
 *
 */
static void shrink_heap(void)
{
    int by;
    int heapbase = ((int *)da_addr)[2];

    by = (da_size - heapbase) & ~(page_size-1);

    if (!by)
        return;

    xosheap_resize(da_addr, -by);
    _swix(OS_ChangeDynamicArea, _INR(0,1), da_number, -by);

    da_size -= by;
}

/****************************************************************************
 * mem_base_addr
 *
 * This function returns the base address of the memory allocation pool.
 * All allocated pointers will be no more than 64M beyond this address.
 *
 * Parameters:
 *    none
 *
 * Result:
 *    memory base address
 *
 * Assumptions:
 *    none
 *
 */
void *mem_base_address(void)
{
    return da_addr;
}

/****************************************************************************
 * memory_renumber_da
 *
 *  This function is called whenever Service_DynamicAreaRenumber is received
 *  since we need to know if it was our DA that was renumbered
 *
 * Parameters:
 *    DA being renumbered
 *    New number for the DA
 *
 * Result:
 *    da_number updated.
 *
 * Assumptions:
 *    none
 */
void memory_renumber_da(int old_da, int new_da)
{
        if (old_da != da_number) return;
        da_number = new_da;
}
