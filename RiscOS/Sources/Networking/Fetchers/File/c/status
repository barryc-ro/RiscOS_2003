/*
 * Example of a fetcher module for use with Acorn URL system
 *
 * © Acorn Computers Ltd. 1995-1997
 *
 */

/*
 * Handle a request to get status!
 */
#include "stdio.h"	/* file handling */
#include "stdlib.h"	/* for malloc/calloc */
#include "kernel.h"	/* registers */
#include "swis.h"	/* swis */
#include "string.h"	/* string handling */
#include "errno.h"	/* Include errno variable */
#include "module.h"	/* Module name etc */
#include "utils.h"

/*************************************************************/
/* _kernel_oserror file_stop(_kernel_swi_regs *r)            */
/*************************************************************/
/* The call to stop getting data from a site. The values in  */
/* ther registers are:	     	       	       	   	     */
/* 		       r0 = Flags word			     */
/*		       r1 = pollword of client		     */
/* On exit they are:   	    	     			     */
/*    	   	       r0 = status word			     */
/*		       r2 = server response code (0 if none) */
/*		       r3 = bytes read so far if known 	     */
/*************************************************************/
_kernel_oserror *file_status(_kernel_swi_regs *r)
{
  int flags=r->r[0];
  int *pollword=(int *)r->r[1];
  Session *ses;

  flags=flags;

  ses = find_session((unsigned int)pollword);
  if (ses==NULL)
    return NULL;

  if (ses->size==0)
  {
    r->r[0]   = 64;
    *pollword = 64;
    r->r[2]   = 500;
    r->r[3]   = 0;
    r->r[4]   = 0;
    return make_error(FILE_NOT_FOUND, 0);
  }
  else if (ses->done==1)
  {
    r->r[0]   = 32;
    *pollword = 32;
    r->r[2]   = 200;
    r->r[3]   = 0;
    r->r[4]   = 0;
  }
  else if (ses->done==2)
  {
    r->r[0]   = 64+31;
    *pollword = 64+31;
    r->r[2]   = 500;
    r->r[3]   = 0;
    r->r[4]   = 0;
    return make_error(FILE_READ_ERROR, 0);
  }
  else
  {
    r->r[0]   = 31;
    *pollword = 31;
    r->r[2]   = 200;
    r->r[3]   = ses->sent;
    r->r[4]   = ses->size;
  }
  return NULL;
}
