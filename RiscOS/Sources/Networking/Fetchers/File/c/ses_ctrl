/*
 * Example of a fetcher module for use with Acorn URL system
 *
 * © Acorn Computers Ltd. 1995-1998
 *
 */
#include "stdio.h"	/* file handling */
#include "stdlib.h"	/* for malloc/calloc */
#include "kernel.h"	/* registers */
#include "swis.h"	/* swis */
#include "string.h"	/* string handling */
#include "errno.h"	/* Include errno variable */
#include "module.h"	/* Module name etc */
/*
 * This file contains the routines needed to manipulate sessions
 * within the contect of multiple clients of the module.
 */

static Session *sessions=NULL;

/*************************************************************/
/* Session *find_session(unsigned int id)                    */
/*************************************************************/
/* Given a session ID, return the session control block      */
/* associated with it. 	      	  	  	  	     */
/*************************************************************/
Session *find_session(unsigned int id)
{
  Session *session = sessions;

  if (session != NULL)
  {
    while(session != NULL)
    {
      if(session->id == id)
        return session;
     session = session->next;
    }
  }
  return NULL;
}

/*************************************************************/
/* Session *new_session(void)                                */
/*************************************************************/
/* Create a new session, taking into account starting the    */
/* sessions list 	 	     	     	      	     */
/*************************************************************/
Session *new_session(void)
{
  Session *session = sessions;

  if (sessions == NULL)
  {
    /* no list so create a new one */
    sessions = (SessionReg) malloc(sizeof(Session));
    if (sessions == NULL)
      return NULL;
    session = sessions;
  }
  else
  {
    /* else find end of list and add an element */
    while (session->next != NULL)
      session = session->next;

    session->next = (SessionReg) malloc(sizeof(Session));
    if (session->next == NULL)
      return NULL;
    session = session->next;
  }
  return session;
}

/*************************************************************/
/* void kill_session(Session *s)                             */
/*************************************************************/
/* Given the location of the session block, delete the       */
/* session cleanly, taking into account the session next     */
/* pointers and any memory associated with it 	    	     */
/*************************************************************/
void kill_session(Session *s)
{
  Session *ses = sessions;

  if (sessions == NULL)
    return;

  if (ses == s)
  {
    sessions = s->next;
    if (s->filename)
      free(s->filename);
    if (s->buffer)
      free(s->buffer);
    free(s);
    return;
  }

  while (ses->next != NULL)
  {
    if (ses->next == s)
      break;
    ses = ses->next;
  }

  if (ses->next != s)
    return;

  ses->next = s->next; /* Remove the session from chain */
  if (s->filename)
    free(s->filename);
  if (s->buffer)
    free(s->buffer);
  free(s);
  return;
}

