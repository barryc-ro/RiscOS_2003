/*
 * Example of a fetcher module for use with Acorn URL system
 *
 * © Acorn Computers Ltd. 1995-1998
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include <string.h>
#include <errno.h>
#include "module.h"
#include "FileHdr.h"
#include "utils.h"

#ifdef ROM
static _kernel_oserror *__ROM;
#endif

#define NO_SUCH_SWI	(0x1E6)

#define URL_PROTOCOL_REGISTER 0x83e20
#define URL_PROTOCOL_DEREGISTER 0x83e21

#ifndef ROM
extern int messages_file(void);
#endif

static int registered;

static _kernel_oserror *try_to_register(void)
{
        _kernel_oserror *e;

	if (registered) return NULL;
	e = _swix(URL_PROTOCOL_REGISTER, _INR(0,4), 0, FileURL_00, "file:",
		Module_VersionNumber, Module_Help " © Acorn 1997-8 (Built: " Module_Date ")");
	if (e == NULL) {
	        registered = 1;
	}
        return e;
}

static _kernel_oserror *try_to_deregister(void)
{
        if (!registered) {
                return NULL;
        }
        else {
                registered = 0;
		return _swix(URL_PROTOCOL_DEREGISTER, _INR(0,1), 0, FileURL_00);
        }
}

static _kernel_oserror *register_with_url(void)
{
        _kernel_oserror *e;

	e = try_to_register();
	if (e == NULL) return e;
	if (e->errnum != NO_SUCH_SWI) return e;
	e = _swix(OS_Module, _INR(0,1), 1 /* Load */, "System:Modules.Network.URL.URL");
	return try_to_register();
}


/*************************************************************/
/* _kernel_oserror *module_init(char *cmd_fail, int podu...  */
/*************************************************************/
/* Start up and register ourselves with the URL module       */
/*************************************************************/
_kernel_oserror *module_init(const char *cmd_tail, int podule_base, void *pw)
{
  	_kernel_oserror *e;

  	(void) cmd_tail;
  	(void) podule_base;
  	(void) pw;

	#ifdef ROM
    	__ROM = _swix(0xa2c43, _IN(0), pw);
	#endif

	registered = 0;

       	#ifndef ROM
        e = _swix(ResourceFS_RegisterFiles, _IN(0), messages_file());
  	if (e) {
    		return e;
    	}
	#endif

        if (getenv(Module_Title "$Path")) {
                e = messages_file_open(Module_Title ":Messages");
        }
        else {
        	e = messages_file_open("Resources:$.Resources.URL." "File" ".Messages");
        }

        if (e) {
                #ifndef ROM
                (void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
                #endif
    		return e;
        }

  	e = register_with_url();
  	if (e) {
    		(void) messages_file_close();
                #ifndef ROM
    		(void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
                #endif
    		return e;
        }

  	return NULL;
}
/*************************************************************/
/* _kernel_oserror *module_kill(int fatal, int podule, ...   */
/*************************************************************/
/* When we are killed off, deregister ourselves from the URL */
/* module                                                    */
/*************************************************************/
_kernel_oserror *module_kill(int fatal, int podule, void *pw)
{
  	(void) fatal;
  	(void) podule;
	(void) pw;

  	(void) messages_file_close();
        #ifndef ROM
        (void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
        #endif
  	(void) try_to_deregister();

        #ifdef ROM
    	if(!__ROM) _swix(0xa2c41, 0);
	#endif

  	return NULL;
}



void service_handler(int service_number, _kernel_swi_regs *r, void *pw)
{
        (void) pw;
        (void) service_number;

	switch (r->r[0]) {
	        case 0:
	        	(void) try_to_register();
	        	break;
	        case 1:
	        	(void) try_to_deregister();
	        	break;
	        default:
	        	break;
	}
}


/*************************************************************/
/* _kernel_oserror *swi_handler(int swi_no, _kernel_swi_...  */
/*************************************************************/
/* Upon a SWI call into this module decide what to do and    */
/* how to do it and all that. Just an excuse for a case      */
/* statement                                                 */
/*************************************************************/
_kernel_oserror *swi_handler(int swi_offset, _kernel_swi_regs *r, void *pw)
{
  	(void) pw;

  	switch (swi_offset) {
    		case FileURL_GetData - FileURL_00:
      			return(file_start(r));

    		case FileURL_Status - FileURL_00:
      			return(file_status(r));

    		case FileURL_ReadData - FileURL_00:
      			return(file_readdata(r));

    		case FileURL_Stop - FileURL_00:
      			return(file_stop(r));

    		default:
      			return(error_BAD_SWI);
        }
}
