/*
 * Example of a fetcher module for use with Acorn URL system
 *
 * © Acorn Computers Ltd. 1995-1997
 *
 */

#include "stdio.h"        /* file handling */
#include "stdlib.h"       /* for malloc/calloc */
#include "kernel.h"       /* registers */
#include "swis.h"         /* swis */
#include "string.h"       /* string handling */
#include "errno.h"        /* Include errno variable */
#include "module.h"       /* Module name etc */
#include "FileHdr.h"
#include "utils.h"

#define NO_SUCH_SWI	(0x1E6)


#define URL_PROTOCOL_REGISTER 0x83e20
#define URL_PROTOCOL_DEREGISTER 0x83e21


extern int messages_file(void);


static int registered;

static _kernel_oserror *try_to_register(void)
{
        _kernel_oserror *e;
        
	if (registered) return NULL;
	e = _swix(URL_PROTOCOL_REGISTER, _INR(0,4), 0, FileURL_00, "file:",
		Module_VersionNumber, Module_Help " © Acorn 1997 (Built: " Module_Date ")");
	if (e == NULL) {
	        registered = 1;
	}
        return e;
}

static _kernel_oserror *try_to_deregister(void)
{
        if (!registered) {
                return NULL;
        }
        else {
                registered = 0;
		return _swix(URL_PROTOCOL_DEREGISTER, _INR(0,1), 0, FileURL_00);
        }
}

static _kernel_oserror *register_with_url(void)
{
        _kernel_oserror *e;
        
	e = try_to_register(); 
	if (e == NULL) return e;
	if (e->errnum != NO_SUCH_SWI) return e;
	e = _swix(OS_Module, _INR(0,1), 1 /* Load */, "System:Modules.Network.URL.URL");
	return try_to_register();
}


/*************************************************************/
/* _kernel_oserror *module_init(char *cmd_fail, int podu...  */
/*************************************************************/
/* Start up and register ourselves with the URL module       */
/*************************************************************/
_kernel_oserror *module_init(const char *cmd_tail, int podule_base, void *pw)
{
  	_kernel_oserror *e;

  	(void) cmd_tail;
  	(void) podule_base;
  	(void) pw;

  	registered = 0;

  	e = _swix(ResourceFS_RegisterFiles, _IN(0), messages_file());
  	if (e) {
    		return e;
    	}

  	e = messages_file_open("Resources:$.Resources.FileFetcher.Messages");
  	if (e) {
    		_swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
    		return e;
        }

  	e = register_with_url();
  	if (e) {
    		messages_file_close();
    		_swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
    		return e;
        }

  	return NULL;
}
/*************************************************************/
/* _kernel_oserror *module_kill(int fatal, int podule, ...   */
/*************************************************************/
/* When we are killed off, deregister ourselves from the URL */
/* module                                                    */
/*************************************************************/
_kernel_oserror *module_kill(int fatal, int podule, void *pw)
{
  	(void) fatal;
  	(void) podule;
	(void) pw;

  	messages_file_close();
  	(void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
  	(void) try_to_deregister();

  	return NULL;
}



void service_handler(int service_number, _kernel_swi_regs *r, void *pw)
{
        (void) pw;
        (void) service_number;

	switch (r->r[0]) {
	        case 0:
	        	(void) try_to_register();
	        	break;
	        case 1:
	        	(void) try_to_deregister();
	        	break;
	        default:
	        	break;
	}
}


/*************************************************************/
/* _kernel_oserror *swi_handler(int swi_no, _kernel_swi_...  */
/*************************************************************/
/* Upon a SWI call into this module decide what to do and    */
/* how to do it and all that. Just an excuse for a case      */
/* statement                                                 */
/*************************************************************/
_kernel_oserror *swi_handler(int swi_offset, _kernel_swi_regs *r, void *pw)
{
  (void) pw;

  switch (swi_offset)
  {
    case FileURL_GetData - FileURL_00:
      return(file_start(r));

    case FileURL_Status - FileURL_00:
      return(file_status(r));

    case FileURL_ReadData - FileURL_00:
      return(file_readdata(r));

    case FileURL_Stop - FileURL_00:
      return(file_stop(r));

    default:
      return(error_BAD_SWI);
  }
}
