# Makefile for our internal fetchers for the URL Module
#
# $Id$
#
# ***********************************
# ***    C h a n g e   L i s t    ***
# ***********************************
# Date       Name   Description
# ----       ----   -----------
# 04-May-00  SNB    Created
#

#
# Export Paths for Messages module
#
RESDIR     = <resource$dir>.Resources2.URL.${COMPONENT}
RESFSDIR   = Resources.URL.${COMPONENT}

#
# Build options
#
CFLAGS += -Wp -zm -zps1 -ffah -D${SYSTEM} -DCOMPAT_INET4 -DMachine=<Machine>
CINCLUDES += -IC:Fetchers -ITCPIPLibs: -IC:

#
# Libraries
#
include Makefiles:ModuleLibs
RAM_LIBS = C:Fetchers.o.FetchLibZM ${NET4LIBS} ${ASMUTILS}
ROM_LIBS = C:Fetchers.o.FetchLibZM ${NET4LIBS} ${ASMUTILS}

#
# Find the rest of the Makefile fragments for C modules
#
include Makefiles:StdTools
include Makefiles:ModStdRule
include Makefiles:ROMCModule
include Makefiles:RAMCModule

#
# Provide defaults so that the rules below are valid
#
RAMMESSAGES .= unused.ram.messages

#
# A useful rule for modules whose resources are only a Messages file
#
resources-messages: LocalRes:Messages
        ${MKDIR} ${RESDIR}
        TokenCheck LocalRes:Messages
        ${CP} LocalRes:Messages ${RESDIR}.Messages ${CPFLAGS}

#
# RAM builds require the resources to be packaged up into a ResourceFS
# registerable area.
#

${RAMMESSAGES}: LocalRes:Messages
        resgen messages_file $@ LocalRes:Messages Resources.URL.${COMPONENT}.Messages

#
# The clean rules are relatively similar too:
#
fetcher-clean:
        ${WIPE} o.* ${WFLAGS}
        ${WIPE} od ${WFLAGS}
        ${WIPE} aof ${WFLAGS}
        ${WIPE} rm ${WFLAGS}
        ${WIPE} linked ${WFLAGS}
        ${WIPE} h.${COMPONENT}Hdr ${WFLAGS}
        ${WIPE} aof ${WFLAGS}
        ${WIPE} map ${WFLAGS}

#
# Typically, the ROM and RAM modules will be identical except for main.c
# which will switch on the ROM symbol to not register resources.  We provide
# this rule generically here.
#
o.moduleROM: module.c
        $(CC) ${CFLAGS} -DROM -o $@ module.c

#
# Debug builds of modules
#
DBG_MODULE .= rm.D${COMPONENT}
DBG_OBJS   .= ${RAM_OBJS}
DBG_LIBS   .= ${DEBUGLIB} ${RAM_LIBS}
DBG_DIRS   .= od._dirs

${DBG_MODULE}: ${DBG_OBJS} ${DBG_LIBS} ${CLIB} ${DIRS} ${RAM_DEPEND} ${DBG_DIRS}
        ${MKDIR} rm
        ${LD} ${LDFLAGS} ${LDRAMFLAGS} -o $@ -rmf ${DBG_OBJS} ${DBG_LIBS} ${CLIB}

trace: ${DBG_MODULE} ${DBG_DIRS}
        @echo ${COMPONENT}: debug module built

${DBG_DIRS}:
        ${MKDIR} od
        ${TOUCH} $@

.SUFFIXES: .c .od .h .cmhg

.c.od:; ${CC} ${CFLAGS} -DTRACE -o $@ $<

o.${COMPONENT}Hdr: cmhg.${COMPONENT}Hdr
        ${CMHG} ${CMHGFLAGS} cmhg.${COMPONENT}Hdr -o $@ -d h.${COMPONENT}hdr

EOFMakefile=$Id$
# EOF
