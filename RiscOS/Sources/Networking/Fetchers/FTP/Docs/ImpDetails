			Implementation Details
			======================

			Author: Stewart Brodie
			Date: 6th November '97





1.  Introduction
2.  Overview
3.  Details
  3.1  State transitions
  3.2  Cached control connections
4.  Errors



1.  Introduction


The FTP module is one of the more complex fetcher modules, as it has to
maintain multiple connections to each server in order to transfer data, one
of which is persistent and should be re-used where possible in order to
avoid large delays in continually re-establishing connections and sending
login details.    It performs many different operations available in
the FTP protocol, even though no clients are known to use any of them
currently except for directory and file retrieval.

This document gives an overview of the module implementation and details the
*some* of the implementation decisions which anybody maintaining this module
may need to be aware of.

FTP fetches are started with a call to SWI FTP_GetData (via URL_GetURL). Then
the client application repeatedly calls ReadData and Status (again via the
URL module) until all the data is returned, and then FTP_Stop (via
URL_DeregisterURL or URL_Stop) to clean up.

This is the standard fetcher interface, however, many things are done 
internally to optimise use of resources, which are described below.



2.  Overview


The FTP module is implemented as a state machine.  Although it appears to be
the case that there are lots of states, in general there is an obvious
progression.  The state-table is driven as a while loop which continues
whilst there is no error and more work can be done.  The special
"_kernel_oserror *" value of state_BLOCKING is used by the code to indicate
no error and no work can be done (thus forcing the SWI handler to exit). 
During the exit phase of the ReadData SWI handler, this state_BLOCKING is
trapped and rewritten so that NULL is returned to the caller.

Control connections are cached wherever possible.  When sessions are
terminated or the request that they were processing is completed, the socket
is registered into a cache of free control connections.  These are expired
after a configurable (compile-time in module.h) delay.  The information
stored with the socket handle is the user name, home directory, hostname and
port associated with that connection, and flags such as "server doesn't like
PASV connections)


3.  Details


3.1  State transitions

There are two main starting states into the state table - the first is
FTP_CONNECTED which is entered as soon as a DNS lookup is started
in order to create a new control connection to a remote host.  The second is
used when an existing control connection is going to be re-used, and it
enters FTP_SEND_CWD_HOME in order to return to the initial login directory. 
Excepting errors, both branches of the table meet at FTP_INITIATE_COMMAND. 

The non-transfer methods are implemented at that point (delete file, create
dir, delete dir, rename) and upon reception of the responses to the
command, return their control connections to the pool of available
connections and return by generating a web page noting that the operation
succeeded.  RISC OS errors are generated if they failed.

The methods which involve a data transfer (file upload/download, directory
listing download) start by requesting the server for an address to which the
module can make a data connection.  Usage of passive data connections (ie.
those whose addresses were established using PASV rather than PORT) means
that this module can function through a masqueraded system or a firewall.
At that point, we create the data socket, mark it non-blocking, and issue the
connect() call.  However, we do not bother waiting for this to complete as we
do not need the connection yet as we have not issued the RETR/LIST/STOR/STOU
command.

Should the server reject the PASV command with response code 425 (permission
denied), then the module sets a flag to remember not to waste time trying
passive connections on this server (on this control connection) in future.
It then falls back to using PORT.

When it comes to retrieving data or directories, the module has no option but
to guess whether a URL references a directory or a file.  It will make its
initial assumption by looking to see if the URL ended in a / or not, choosing
to believe it is a directory or file respectively.  The situation is not
helped by the way that wu-ftpd sends 550 responses to any failed RETR/LIST
command.

If it believes it to be a file, it will attempt a "SIZE" operation on it. 
This may fail for any number of reasons - not least because it's not in
RFC959 or RFC1123! - but if it succeeds (as it will on wu-ftpd), it assumes
file and goes on to RETR it and give up if that fails.  Failing that, it
attempts to "STAT" the object and treats an error on that command as
indicating a non-existent object.  Should STAT succeed, RETR is attempted.
Should RETR fail, it attempts to change directory into the object.  If this
fails, it assumes not found, otherwise it changes its mind and decides that
it is a directory.  For simplicity, it does NOT continue, but issues an HTTP
redirect response so that the client becomes aware of the object being a
directory too.

If it believes it to be a directory, then it will attempt to CWD into it and
LIST it.  If that fails, then this is reported as an error.

Once the transfer has been initiated, data is read/written.  Directory
listings are pumped through a directory listing entry recognition routine
which uses the system type (discovered through an earlier SYST command) to
determine the likely format of the listing.  These are then tokenised and
written to the client in the form of HTML representations of the entry with
links and icon information as appropriate.

Should the transfer be aborted (URL_Stop called) whilst data transfer is in
progress, the FTP module will send an ABOR command to the remote server, and
dissociate the Session from the client's session ID handle (in R1 on entry to
the SWI).  The Session ownership change is marked by setting the aborting
field to non-zero, and malloc'ing some RMA and storing the pointer in the
Session.id field.  The callback routine then enters the ReadData SWI
handler directly in order to poll these "dead" Session objects until the
ABOR response has been read completely and discarded.  Only then does the
Session object really die.  All of this is transparent to the caller, since
they have been absolved of responsibility for the session by making the
URL_Stop call.





3.2  Cached control connections

Although the REIN command is supposed to allow you to alter login details, it
is not implemented in wu-ftpd (a very commonly used FTP server).  Further,
once logged in as "anonymous", you cannot log in as anything else (obvious if
you think about it because on UNIX system, commonly the server process will
have used chroot() to ensure that you cannot see anything outside of ~ftp.

This means that control connections cannot be shared by different FTP users
(in the sense of remote usernames, not local usernames).



4.  Errors

Are all stored in the Messages file and read into rotating static
_kernel_oserror buffers at run-time.  The number of buffers is a #define
in utils.c.  I have set this number to three - an arbitrary choice.
