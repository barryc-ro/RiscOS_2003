/*
 * FTP (c.processdir)
 *
 * © Acorn Computers Ltd. 1996-1998
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "kernel.h"
#include "module.h"
#include "protocol.h"
#include "processdir.h"
#include "ftptext.h"
#include "servertype.h"
#include "generic.h"

/* If this option is set, then unreadable links will still be hyperised, but the icon will
 * remain as the "grey" version to indicate a likelihood that the link will fail if it is
 * activated.
 */
#define LINK_UNREADABLES


#define FTP_ILLEGAL_CHARS	":%\\;"

/* hex-encodes all characters in FTP_ILLEGAL_CHARS */
static char *processdir_encode(char *name, const char *chars)
{
	int ctr = 0;
	char *original = name;
	char *sel;

	for (;*name;) {
		char *ptr = strpbrk(name, chars);
		if (!ptr) break;
		++ctr;
		name = ptr+1;
	}

	if (!ctr) return 0;

	sel = malloc(strlen(original) + ctr * 2 + 1);
	if (!sel) return sel;
	name = sel;
	while (*original) {
	        *sel = *original;
	        if (strchr(chars, *sel)) {
			sprintf(sel, "%%%02x", *original);
			sel += 2;
	        }
	        ++sel;
	        ++original;
	}

	*sel = 0;
	return name;
}

/* Tokenise a (potential) directory listing entry.
 * This function accepts a string and an array of pointers to character (with max_fields entries)
 * It splits up the input string (in situ) and writes pointers for the various fields into the
 * fields array.  It returns the number of valid fields that it wrote into the structure.
 * If comma is non-zero, then commas will be treated as whitespace characters otherwise they won't
 */
static size_t ftp_processdir_tokenise(char *buffer, char *fields[], size_t max_fields, int comma)
{
	size_t i;

	/* For safety's sake */
	for (i = 0; i<max_fields; ++i) {
		fields[i] = NULL;
	}

	/* Tokenise string - return number of valid tokens found */
	for (i=0; i<max_fields; ++i) {
	        while (*buffer == ' ' || *buffer == '\t' || (comma && *buffer == '.')) ++buffer;
	        if (*buffer == '\0') return i;
		fields[i] = buffer;
		while (*buffer != '\t' && *buffer != '\0' && *buffer != ' ' && (!comma || *buffer != ',')) ++buffer;
		if (*buffer == '\0') return i+1;
		*buffer++ = '\0';
		if (comma && i == 4) comma = 0; /* Hack for VMS listings */
	}

	return i;
}

typedef enum {
        ftpdir_unix_PERMISSIONS,
        ftpdir_unix_SIZE_IN_BLOCKS,
        ftpdir_unix_USER_ID,
        ftpdir_unix_GROUP_ID,
        ftpdir_unix_OBJECT_SIZE,
        ftpdir_unix_MONTH,
        ftpdir_unix_DAYNUM,
        ftpdir_unix_TIME_OR_YEAR,
        ftpdir_unix_FILENAME,
        ftpdir_unix_LINK_STRING,
        ftpdir_unix_LINK_TARGET,

        ftpdir_unix_MAX_FIELDS
} ftp_directory_listing_UNIX_fields;


static _kernel_oserror *ftp_process_unix_directory_data(Session *s)
{
        char *fields[ftpdir_unix_MAX_FIELDS], height_buffer[8];
	size_t count;
	int readable, is_dir, is_link;
	int len;

	#ifdef TRACE
	protocol_debug("Entry: `%s'\n", s->directory.data);
	#endif

	#ifdef NO_DIR_TABLES
	if (strncmp(s->directory.data, "total", 5) == 0) {
	        return ftp_start_client_pump_va(s, s->state, "\n", s->directory.data, NULL);
	}
	#endif

        len = strlen(s->directory.data);

	count = ftp_processdir_tokenise(s->directory.data, fields, sizeof(fields)/sizeof(char *), 0);
	#ifdef TRACE
	protocol_debug("Number of tokens: %d\n", count);
	#endif
	if (count < ftpdir_unix_FILENAME) {
	        #ifdef TRACE
	        protocol_debug("This does not look like a directory entry - bailing out\n");
	        #endif
	        return NULL;
	}

	if (strcmp(fields[ftpdir_unix_FILENAME], ".") == 0) {
	        #ifdef TRACE
	        protocol_debug("Filtering out link to current directory\n");
	        #endif
	        return NULL;
	}

	is_link = ((fields[ftpdir_unix_PERMISSIONS])[0] == 'l') && (count >= ftpdir_unix_LINK_TARGET);
	is_dir = ((fields[ftpdir_unix_PERMISSIONS])[0] == 'd');
	readable = ((fields[ftpdir_unix_PERMISSIONS])[7] == 'r');
	if (readable == 0 && (fields[ftpdir_unix_PERMISSIONS])[1] == 'r' && s->user != NULL) {
	        if (strcmp(s->user, fields[ftpdir_unix_USER_ID]) == 0) {
	                readable = 1;
	        }
	        else {
	                readable = 0;
	        }
	}

	/* Reconstitute names with spaces, which will have been split up into separate words (plugh) */
	if (!is_link && count > ftpdir_unix_FILENAME) {
	        char *p;
	        for (p=fields[ftpdir_unix_FILENAME]; p < s->directory.data + len; p++) {
	                if (*p=='\0') *p=' ';
	        }
	}

	sprintf(height_buffer, "%d", is_dir ? 18 : 21);

	#ifdef NO_DIR_TABLES
	{
	        char sizebuf[10];
	        char datebuf[16];

	        size_t size_len = strlen(fields[ftpdir_unix_OBJECT_SIZE]);
	        size_t date_len = strlen(fields[ftpdir_unix_MONTH]) +
					strlen(fields[ftpdir_unix_DAYNUM]) +
					strlen(fields[ftpdir_unix_TIME_OR_YEAR]) + 2;

	        if (size_len >= (sizeof(sizebuf)-1)) {
                        memcpy(sizebuf, fields[ftpdir_unix_OBJECT_SIZE], sizeof(sizebuf));
	        }
	        else {
	                size_len = sprintf(sizebuf, "%*s ", sizeof(sizebuf)-2, fields[ftpdir_unix_OBJECT_SIZE]);
                        sizebuf[size_len] = ' ';
	        }
                while (++size_len < sizeof(sizebuf)) sizebuf[size_len] = ' ';
                sizebuf[sizeof(sizebuf)-1] = '\0';
	        if (date_len >= sizeof(datebuf)) {
			date_len = 0;
	        }
	        else {
			date_len = sprintf(datebuf, " %-3.3s %2d %-5.5s", fields[ftpdir_unix_MONTH],
				atoi(fields[ftpdir_unix_DAYNUM]),
				fields[ftpdir_unix_TIME_OR_YEAR]);
			datebuf[date_len] = ' ';
	        }
                while (++date_len < sizeof(datebuf)) datebuf[date_len] = ' ';
                datebuf[sizeof(datebuf)-1] = '\0';

		return ftp_start_client_pump_va(s, s->state,
			"\n",
			fields[ftpdir_unix_PERMISSIONS],
			"  ", sizebuf, datebuf, "  "

			"<IMG SRC=\"" IMAGE_BASE_DIR, is_dir ? DIRECTORY_ICON : FILE_ICON,
			readable ? NORMAL_ICON : GREY_ICON, "\" WIDTH=21 HEIGHT=", height_buffer, " BORDER=0> ",

		#ifdef LINK_UNREADABLES
			"<A HREF=\"", fields[ftpdir_unix_FILENAME], is_dir ? "/" : "", "\">",
			fields[ftpdir_unix_FILENAME], "</A>",
		#else
			readable ? "<A HREF=\"" : "", readable ? fields[ftpdir_unix_FILENAME] : "",
			(readable && is_dir) ? "/" : "",
			readable ? "\">" : "", fields[ftpdir_unix_FILENAME], readable ? "</A>":"",
		#endif
			is_link ? " -> " : "", is_link ? fields[ftpdir_unix_LINK_TARGET] : "",
			NULL);
	}
	#else

	return ftp_start_client_pump_va(s, s->state,
		"\n<TR><TD><TT>", fields[ftpdir_unix_PERMISSIONS], "</TT></TD>"
		/*"<TD>", fields[ftpdir_unix_USER_ID], "</TD><TD>", fields[ftpdir_unix_GROUP_ID], "</TD>"*/
		"<TD ALIGN=RIGHT>", fields[ftpdir_unix_OBJECT_SIZE], "</TD><TD>",
		fields[ftpdir_unix_MONTH], " ", fields[ftpdir_unix_DAYNUM], " ", fields[ftpdir_unix_TIME_OR_YEAR],"</TD>"
		"<TD VALIGN=MIDDLE ALIGN=CENTER><IMG SRC=\"" IMAGE_BASE_DIR, is_dir ? DIRECTORY_ICON : FILE_ICON,
		readable ? NORMAL_ICON : GREY_ICON, "\" WIDTH=21 HEIGHT=", height_buffer, " BORDER=0></TD>"
		"<TD WIDTH=\"100%\">", readable ? "<A HREF=\"" : "", readable ? fields[ftpdir_unix_FILENAME] : "",
		(readable && is_dir) ? "/" : "",
		readable ? "\">" : "", fields[ftpdir_unix_FILENAME], readable ? "</A>":"",
		is_link ? " -> " : "", is_link ? fields[ftpdir_unix_LINK_TARGET] : "",
		"</TD></TR>", NULL);

	#endif
}


typedef enum {
        ftpdir_vms_NAME,
        ftpdir_vms_SIZE,
        ftpdir_vms_DATE,
        ftpdir_vms_TIME,
        ftpdir_vms_OWNER,
        ftpdir_vms_PERMISSIONS,

        ftpdir_vms_MAX_FIELDS
} ftp_directory_list_VMS_fields;

enum {
        vms_permissions_SYSTEM,
        vms_permissions_OWNER,
        vms_permissions_GROUP,
        vms_permissions_WORLD
};

static void ftp_process_vms_permissions(char *permissions, int readable[])
{
        int i = vms_permissions_SYSTEM;

        readable[vms_permissions_SYSTEM] = 0;
        readable[vms_permissions_OWNER] = 0;
        readable[vms_permissions_GROUP] = 0;
        readable[vms_permissions_WORLD] = 0;

	if (*permissions++ != '(') return;
	for (;;) {
	        switch (*permissions++) {
                        case ',':
                        	++i;
                        	if (i > vms_permissions_WORLD) return;
                        	break;
                        case 'R':
                        case 'r':
                        	readable[i] = 1;
                        	break;
                        case '\0':
			case ')':
                        	return;
                        default:
                        	break;
	        }
	}
}

static _kernel_oserror *ftp_process_vms_directory_data(Session *s)
{
        char *fields[ftpdir_vms_MAX_FIELDS], height_buffer[8], *semicolon, *ptr;
	size_t count;
	_kernel_oserror *e;
	int readable = 1, is_dir;
        char sizebuf[12];
        char datebuf[24];
        char *link_name;
        int readable_ar[vms_permissions_WORLD+1];

	#ifdef TRACE
	protocol_debug("Entry: `%s'\n", s->directory.data);
	#endif

	#ifdef NO_DIR_TABLES
	if (strncmp(s->directory.data, "total", 5) == 0) {
	        return ftp_start_client_pump_va(s, s->state, "\n", s->directory.data, NULL);
	}
	#endif

	count = ftp_processdir_tokenise(s->directory.data, fields, sizeof(fields)/sizeof(char *), 1);
	#ifdef TRACE
	protocol_debug("Number of tokens: %d\n", count);
	{ size_t counter; for (counter=0;counter<count;++counter) {
	        protocol_debug("Field %d is `%s'\n", counter, fields[counter]);
	}}
	#endif

	semicolon = strchr(fields[ftpdir_vms_NAME], ';');
	if (semicolon == NULL) {
	        /* Not a directory listing entry */
	        #ifdef TRACE
	        protocol_debug("This does not look like a directory entry - bailing out\n");
	        #endif
	        return NULL;
	}
	*semicolon++ = '\0'; /* Strip the version number off the end */

	for (ptr = fields[ftpdir_vms_NAME]; *ptr; ++ptr) {
	        if (ptr[1] == 'Z' && (ptr[0] == '.' || ptr[0] == '_')) break;
	        *ptr = tolower(*ptr);
	}

	ptr = strstr(fields[ftpdir_vms_NAME], ".dir");
	if (ptr) {
	        *ptr = '\0';
	        is_dir = 1;
	}
	else {
	        is_dir = 0;
	}

	link_name = processdir_encode(fields[ftpdir_vms_NAME], FTP_ILLEGAL_CHARS);
	if (link_name == NULL) {
	        link_name = Strdup(fields[ftpdir_vms_NAME]);
	}
	if (link_name == NULL) {
	        #ifdef TRACE
	        protocol_debug("link_name is `%s'\n", link_name);
	        #endif
	        return NULL;
	}
	else {
        	const int size = atoi(fields[ftpdir_vms_SIZE]) * 512;
        	size_t size_len = sprintf(sizebuf, "%d ", size);
                sizebuf[size_len] = ' ';
                while (++size_len < sizeof(sizebuf)) sizebuf[size_len] = ' ';
                sizebuf[sizeof(sizebuf)-1] = '\0';
        }

	{
	        size_t date_len = strlen(fields[ftpdir_vms_DATE]) + strlen(fields[ftpdir_vms_TIME]) + 2;

	        if (date_len >= sizeof(datebuf)) {
			date_len = 0;
	        }
	        else {
			date_len = sprintf(datebuf, " %-11.11s %-8.8s", fields[ftpdir_vms_DATE],
				fields[ftpdir_vms_TIME]);
			datebuf[date_len] = ' ';
	        }
                while (++date_len < sizeof(datebuf)) datebuf[date_len] = ' ';
                datebuf[sizeof(datebuf)-1] = '\0';
	}

	sprintf(height_buffer, "%d", is_dir ? 18 : 21);

	ftp_process_vms_permissions(fields[ftpdir_vms_PERMISSIONS], readable_ar);
        readable = readable_ar[vms_permissions_WORLD];
	if (s->user != NULL) {
	        char *startofname = fields[ftpdir_vms_OWNER];
	        char *endofname = strrchr(startofname, ']');

		if (startofname[0] == '[' && endofname != NULL && endofname[0] == ']') {
		        ++startofname;
		        if (Strncmp_ci(s->user, startofname, endofname - startofname) == 0) {
		                readable = readable_ar[vms_permissions_OWNER];
		        }
		}
	}

	#ifdef NO_DIR_TABLES
	e = ftp_start_client_pump_va(s, s->state,
			"\n<BR><TT>",
			fields[ftpdir_vms_PERMISSIONS],
			"  ", sizebuf, datebuf, "  "

			"<IMG SRC=\"" IMAGE_BASE_DIR, is_dir ? DIRECTORY_ICON : FILE_ICON,
			readable ? NORMAL_ICON : GREY_ICON, "\" WIDTH=21 HEIGHT=", height_buffer, " BORDER=0> </TT>",

			readable ? "<A HREF=\"" : "", readable ? link_name : "",
			(readable && is_dir) ? "/" : "",
			readable ? "\">" : "", fields[ftpdir_vms_NAME], readable ? "</A>":"",
			NULL);
	#else
	e = ftp_start_client_pump_va(s, s->state,
		"\n<TR><TD><TT>", fields[ftpdir_vms_PERMISSIONS], "</TT></TD>"
		/*"<TD>", fields[ftpdir_unix_USER_ID], "</TD><TD>", fields[ftpdir_unix_GROUP_ID], "</TD>"*/
		"<TD ALIGN=RIGHT>", sizebuf, "</TD><TD>", datebuf, "</TD>"
		"<TD VALIGN=MIDDLE ALIGN=CENTER><IMG SRC=\"" IMAGE_BASE_DIR, is_dir ? DIRECTORY_ICON : FILE_ICON,
		readable ? NORMAL_ICON : GREY_ICON, "\" WIDTH=21 HEIGHT=", height_buffer, " BORDER=0></TD>"
		"<TD WIDTH=\"100%\">", readable ? "<A HREF=\"" : "", readable ? link_name : "",
		(readable && is_dir) ? "/" : "",
		readable ? "\">" : "", fields[ftpdir_vms_NAME], readable ? "</A>":"",
		"</TD></TR>", NULL);
	#endif
	free(link_name);
	return e;
}


_kernel_oserror *ftp_process_directory_data(Session *s)
{
        switch (s->server_type) {
                default:
        		return ftp_process_unix_directory_data(s);
        	case ftp_server_VMS:
        		return ftp_process_vms_directory_data(s);
        }
}
