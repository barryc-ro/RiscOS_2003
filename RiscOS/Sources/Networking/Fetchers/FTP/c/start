/*
 * FTP (c.start)
 *
 * © Acorn Computers Ltd. 1996-1997
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include <string.h>
#include "sys/errno.h"
#include "socklib.h"
#include "module.h"
#include "protocol.h"
#include "generic.h"
#include "utils.h"
#include "header.h"
#include "servertype.h"
#include "ftperrors.h"
#include "URLstruct.h"
#include "URLclient.h"

#ifdef TML
  #include "svcprint.h"
#endif

#ifdef MemCheck_MEMCHECK
#  include "MemCheck:MemCheck.h"
#endif

static void ftp_get_request(char *url, char **host, int *port, char **, char **, char **,char **uri, char **urlcopy);

/*************************************************************/
/* _kernel_oserror ftp_start(_kernel_swi_regs *r)	     */
/*************************************************************/
/* The call to start getting data from a site. The values in */
/* ther registers are:					     */
/*		       r0 = Flags word			     */
/*		       r1 = pollword of client		     */
/*		       r2 = method to use		     */
/*		       r3 = url to get			     */
/*		       r4 = additional data for put etc	     */
/*		       r5 = data wanted back		     */
/*************************************************************/
_kernel_oserror *ftp_start(_kernel_swi_regs *r)
{
	int flags	= r->r[0];
	int *pollword	= (int *)r->r[1];
	int method	= r->r[2];
	char *url	= (char *)r->r[3];
	char *data	= (char *)r->r[4];
	char *uri;
	char *urlcopy;
	char *host;
	char *user;
	char *pass;
	char *acct;
	int  port;
	Session *ses;

	#ifdef TRACE
	protocol_debug("Starting request for `%s'\n", url);
	#endif

	#ifdef MemCheck_MEMCHECK
	MemCheck_RegisterMiscBlock((void *) url,strlen(url)+1);
	MemCheck_SetBlockAccess((void *) url,1,0);
	#endif

	/* Check to see if this session already exists before doing anything */
	if (find_session(r->r[1]) != NULL) {
		return make_error(FTP_ERROR_SESSION_EXISTS, 0);
	}

	/* Create a session control block */
	ses = new_session();
	if (ses == NULL) {
		return make_error(FTP_ERROR_SESSION_CREATE_FAIL, 0);
	}

	/* Initialise the new session structure safely */
	ses->control_sd		= -1;
	ses->data_sd		= -1;
	ses->listen_sd		= -1;
	ses->had_final_response = -1;
	ses->aborting		= 0;
	ses->cacheable		= 0;
	ses->server_code	= 0;
	ses->connectionflags    = 0;
	ses->id			= r->r[1];
	ses->size		= -1;
	ses->uri		= NULL;
	ses->url		= NULL;
	ses->host		= NULL;
	ses->user 		= NULL;
	ses->pass		= NULL;
	ses->acct		= NULL;
	ses->home		= NULL;
	ses->command.data 	= NULL;
	ses->response.data	= NULL;
	ses->client_pump.data	= NULL;
	ses->directory.data	= NULL;
	ses->put_data.data	= NULL;
	ses->put_data.done	= 0;
	ses->target_name	= NULL;
	ses->rename_uri		= NULL;
	ses->rename_name	= NULL;
	ses->server_type	= ftp_server_UNIX;
	ses->error_state	= 0;
	ses->flags		= flags;

	ses->total_bytes_transferred = 0;

 	if (flags & flags_DATA_LENGTH_IN_R5) {
	        /* Pull the bits out of R2 instead and mask them out */
		ses->headers_sent = ((method >> 8) & 0xFF) == 0;
	        method = method & 0xFF;
	        ses->put_data.length = r->r[5];
	}
	else {
		if (data != NULL) {
		        ses->put_data.length = strlen(data);
		}
		else {
                        ses->put_data.length = 0;
		}
	  	ses->headers_sent = (r->r[5] == 0);
    	}

	/* Now work out the host and port and URI bit we are after */
	ftp_get_request(url, &host, &port, &user, &pass, &acct, &uri, &urlcopy);
	if (host == NULL) {
		kill_session(ses);
		return make_error(FTP_ERROR_BAD_URL, 0);
	}


	ses->uri		= uri;
	ses->url		= urlcopy;
	ses->method		= method;
	ses->server_code	= 200;

	ses->outstanding_response = 1;
	ses->host		= host;
	ses->port		= port;
	ses->user		= user;
	ses->pass		= pass;
	ses->acct		= acct;
	ses->is_dir		= uri ? (*uri ? (strchr(uri, '\0')[-1] == '/') : 1) : 1;

	if (ses->put_data.length > 0) {
		ses->put_data.data = malloc(ses->put_data.length+1);
		if (ses->put_data.data != NULL) {
		        memcpy(ses->put_data.data, data, ses->put_data.length);
		}
		else {
		        kill_session(ses);
		        return make_error(FTP_ERROR_SESSION_CREATE_FAIL, 0);
		}
	}

	if (ses->put_data.data != NULL) {
	        size_t consumed;
	        #ifdef TRACE
	        protocol_debug("Extra data has been sent!\n");
	        protocol_dump(ses->put_data.data, ses->put_data.length);
	        #endif
	        ses->put_data.data[ses->put_data.length] = '\0';
	        consumed = parse_user_header(ses->put_data.data, ses->put_data.length, ses);
	        if (consumed > 0) {
	                memmove(ses->put_data.data, ses->put_data.data + consumed, ses->put_data.length - consumed);
	                ses->put_data.length -= consumed;
	        }
	        if (ses->put_data.length == 0) {
	                free(ses->put_data.data);
	                ses->put_data.data = NULL;
	        }
	}

	if (!find_connection(ses, host, port, user)) {
		/* Then establish the connection */
		ses->control_sd = opensock(host, port, NULL, &ses->state, -1);

		/* We failed to connect! */
		if (ses->control_sd == -1) {
			kill_session(ses);
			r->r[0] = *pollword = status_ABORTED;
			return make_error(FTP_ERROR_CONNECT_FAIL, 0);
		}
	}
	else {
		ses->state = FTP_SEND_CWD_HOME;
	}

	#ifdef MemCheck_MEMCHECK
	MemCheck_UnRegisterMiscBlock((void *) url);
	#endif
	*pollword = r->r[0] = ses->reported_state =
		(ses->state == FTP_STATUS_DNS) ? status_NOT_YET_CONNECTED :
		status_CONNECTED_TO_SERVER;

	return NULL;
}


/*************************************************************/
/* static void ftp_get_request(char *url, char **host, ...   */
/*************************************************************/
/* Given a null terminated string containing a URL, extract  */
/* the host name, port and URI to get. The URI portion needs */
/* to be intelligent enough to know if it is actually a URL  */
/* That is, it needs to spot if it is being used as in proxy */
/* request mode	and thus strip any initial '/' from the URI. */
/*************************************************************/
static void ftp_get_request(char *url, char **host, int *port, char **user, char **pass, char **acct, char **uri, char **urlcopy)
{
	URL		u;
	_kernel_oserror	*e;
	int		i;
	size_t		path_len, query_len;

	*host = NULL;
	*port = 21;
	*uri = NULL;
	*user = NULL;
	*pass = NULL;
	*acct = NULL;
	*urlcopy = NULL;

	e = URL_find_lengths(0, url, NULL, &u);
	if (e) {
		#ifdef TRACE
		protocol_debug("ftp_get_request> URL_find_lengths> %s\n", e->errmess);
		#endif
		return;
	}

	if (u.lengths.host == 0) {
	        /* No host specified?? */
	        return;
	}

	path_len = u.lengths.path;
	query_len = u.lengths.query;

	for (i=0; i<URL_fields; ++i) switch (i) {
		case urlfield_HOST:
		case urlfield_PORT:
		case urlfield_SCHEME:
		case urlfield_USER:
		case urlfield_PASSWORD:
		case urlfield_ACCOUNT:
		case urlfield_FULL:
			if (u.len[i]) {
				u.field[i] = malloc(u.len[i]);
			}
			break;

		case urlfield_PATH:
			u.data.path = malloc(path_len + query_len + 2);
			if (u.data.path != NULL) {
				if (query_len == 0) {
					u.data.query = NULL;
				}
				else {
					u.data.query = u.data.path + path_len;
				}
				if (path_len == 0) {
					u.data.path[0] = '\0';
					++path_len;
					if (query_len > 0) {
						u.data.query++;
					}
				}
			}
			else {
				u.data.query = NULL;
			}
			break;

		case urlfield_QUERY:
			break;

		default:
			u.field[i] = NULL;
			break;
	}

	e = URL_find_data(0, url, NULL, &u);
	if (e) {
		#ifdef TRACE
		protocol_debug("ftp_get_request> URL_find_data> %s\n", e->errmess);
		#endif
		for (i=0; i<URL_fields; ++i) {
			if (i != urlfield_QUERY) free(u.field[i]);
		}
		return;
	}

	if (path_len > 0 && query_len > 0) {
		u.data.path[path_len - 1] = '?';
	}

	*uri = u.data.path;
	*host = u.data.host;
	*user = u.data.user;
	*pass = u.data.password;
	*acct = u.data.account;
	*urlcopy = u.data.full;

	if (u.data.port) {
		int i = atoi(u.data.port);
		if (i != 0) *port = i;
		free(u.data.port);
	}

	/* Check the scheme here if we handle multiple schemes */
	free(u.data.scheme);

	#ifdef TRACE
	protocol_debug("Host: %s:%d  User:%s Pass:%s Acct:%s Path:`%s' Full:`%s'\n",
		*host, *port, *user ? *user : "<ANON>", *pass ? *pass : "<EMAIL>",
		*acct ? *acct : "<NONE>", *uri ? *uri : "<NONE>", *urlcopy ? *urlcopy : "<NONE>");
	#endif
}
