/*
 * FTP (c.header)
 *
 * © Acorn Computers Ltd. 1996-1997
 *
 * although largely pinched from the HTTP module - hence the names
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include "kernel.h"
#include "module.h"
#include "protocol.h"
#include "generic.h"
#include "header.h"
#include "base64.h"

/* This function takes a buffer containing an HTTP header and splits it into the
 * header itself and its value.  It returns zero for an unparsable block of data
 * and pointers.  It DOES modify the input string.  I wouldn't rely on eobuffer
 * if I were you.
 */
static int http_delimit_header(char *buffer, char **eobuffer, char **header, char **value)
{
	char *ptr;

	ptr = buffer + strcspn(buffer, "\n\r");	/* Locate line terminator (if present) else string term.*/
	if (*ptr) {
		*ptr = '\0';			/* terminate buffer */
		if (eobuffer) {
			*eobuffer = ptr + 1;	/* Return that there was more than one line in buffer */
		}
	}
	else {
		if (eobuffer) *eobuffer = 0;	/* Return that there was no more data in buffer */
	}
	while (ptr > buffer) {
		if (isspace(ptr[-1])) {		/* Strip trailing spaces */
			*--ptr = '\0';
		}
		else break;
	}
	buffer += strspn(buffer, " \t");	/* Skip leading spaces */
	if (!*buffer) {				/* String was empty? Bail out */
		*header = 0;
		*value = 0;
		return 0;
	}
	*header = buffer;
	buffer += strcspn(buffer, " :\t");	/* Skip over header name */
	if (!*buffer) {
		*value = 0;			/* No data for this header - corrupt? */
		return 0;
	}
	*buffer++ = 0;				/* Terminate header name and move along */
	*value = buffer + strspn(buffer, " :\t");	/* Locate start of header value and store it */
	return 1;
}

/* This function returns non-zero if it managed to locate a complete header line */
static int http_check_found_header(char *buffer, char **next, int continuations)
{
	char *ptr, *nl;

	#ifdef TRACE
	protocol_debug("http_check_found_header(%.*s)\n", 96, buffer);
	#endif

	/* Find the first \r and \n characters in the buffer, if any */
	ptr = strchr(buffer, '\r');
	nl = strchr(buffer, '\n');
	
	if (!ptr || (nl && ptr && (nl < ptr))) {
		/* If there was a \n and \r AND \n occurred before \r, make ptr
		 * point at the \n instead (because we're using EOL of \n and
		 * it looks as if we might have picked up a \r somewhere in the
		 * object body which we DON'T want to see yet
		 */
		ptr = nl;
	}
	/* At this point, ptr can only be NULL if nl is also NULL */

	if (ptr && !nl) {
		/* found a \r but didn't find a \n */
		if (ptr[1] == ' ' || ptr[1] == '\t') {
		        /* Was this a continuation line? */
		        ptr[0] = ' '; /* blank the spurious \r character out */
		        return http_check_found_header(buffer, next, continuations);
		}
		
		if (!ptr[1]) {
			/* BUT the \r happened to be at the end of the buffer
			 * so we'll go around again in order to forcibly pick
			 * up the \n on the next read.
			 */
			*next = NULL;
			return 0;
		}

		/* To get here, ptr points to a lonely \r character at a real header end */
	}
	else if (!ptr) {
		/* neither \r nor \n found */
		*next = NULL;
		return 0;
	}
	else {
		if (ptr != nl) {
			/* To get here, we have found both a \r and a \n */
			if (ptr[1] == '\n') {
				nl = ptr+1;
				*ptr++ = ' '; /* Blank out the \r */
			}
		}
		else {
		        /* Found just a \n - check at end of buffer */
		        if (nl[1] == '\0' && continuations && nl != buffer) {
		                /* At end of buffer */
		                *next = NULL;
		                return 0;
		        }
		}
	}
	
	/* To get here, ptr is non NULL and points at the end of line character 
	 * which WILL be either \r or \n, BUT the next character ptr[1] will not
	 * be another newline indicator unless this is the end of the headers */

	if (ptr == buffer || (ptr == (buffer+1) && buffer[0] == ' ')) {
	        /* Was the last header - send blank string back */
	        *buffer = '\0';
	        *next = ptr+1;
	        return 1;
	}

	if (ptr[1] == ' ' || ptr[1] == '\t') {
	        /* This was a continuation line */
	        *ptr = ' ';  /* exterminate the previous end of line */
	        return http_check_found_header(buffer, next, continuations);
	}
	
	*ptr++ = '\0';
	*next = ptr;
        return 1;
}

static void ftp_check_authorization(Session *ses, char *value)
{
        int length;

	#ifdef TRACE
	protocol_debug("Data is `%s'\n", value);
	#endif
				        
        if (Strncmp_ci(value, "basic", 5) == 0) {
                value += 5;
                while (*value && isspace(*value)) ++ value;
	        if (base64_decode(value, &length) == value) {
                /* It worked */
	                char *colon = strchr(value, ':');
	                if (colon != NULL) {
	                        free(ses->pass);
	                        ses->pass = Strdup(colon+1);
	                        #ifdef TRACE
				protocol_debug("Encoded password was `%s'\n", ses->pass);
	                        #endif
	                }
	        }
        }
}

/* This function parses the user supplied headers.  We use this to "fix up" any problems in the
 * headers - such as removing things we don't like the look of - like Host headers.  We supply
 * our own Host headers - and our ones are correct!  We also object to Connection headers (our
 * client has no business interfering with our connections to servers) and user-agent headers
 * (we provide a perfectly good API for altering the user-agent already).
 */
int parse_user_header(char *buffer, int buflen, Session *ses)
{
        char *next, *eob, *header, *value;
        int consumed = 0, ended = 0;

	#ifdef TRACE
	protocol_debug("Parsing user supplied header block\n");
	protocol_dump(buffer, buflen);
	#endif
        
        while (!ended && http_check_found_header(buffer, &next, 1)) {
		if (http_delimit_header(buffer, &eob, &header, &value)) {
		        if (header != NULL) {
				if (Strcmp_ci(header, "Authorization") == 0) {
				        /* User is supplying password via the backdoor to avoid it
				         * appearing in hotlists
				         */
				        ftp_check_authorization(ses, value);
				}
				else if (Strcmp_ci(header, "X-New-Name") == 0) {
				        /* User is suppplying relocation target of rename command */
					free(ses->rename_uri);
				        ses->rename_uri = Strdup(value);
				}
		        }
		}
		consumed += (next - buffer);
		buffer = next;
                if (consumed >= buflen) ended = 1;
		if (header == NULL && value == NULL) {
		        ended = 1;
		}
        }

	#ifdef TRACE
	protocol_debug("End parse user supplied header block.  Data remaining: %d bytes\n", buflen - consumed);
	protocol_dump(buffer, buflen - consumed);
	#endif
        
        return consumed;
}
