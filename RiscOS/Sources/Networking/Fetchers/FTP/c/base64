/*
 * FTP (c.base64)
 *
 * © Acorn Computers Ltd. 1996-1997
 *
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "base64.h"

static const char base64_encoder[] =
  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

#ifdef TEST
/* Compile this file with -DTEST to build a test application */
static void base64_fill_array(char **base, int c[4], int *sz)
{
        /* Only used during the encoding process */
        /* On entry, *base[0] is guaranteed to not be null */
        unsigned char *array = (unsigned char *)(*base);
        unsigned char cp[4] = { '\0', '\0', '\0', '\0' };

        c[1] = c[2] = c[3] = 64;
        cp[0] = array[0];
        if (--(*sz)) {
                cp[1] = array[1];
                if (--(*sz)) {
                        cp[2] = array[2];
                        --(*sz);
                }
        }

        c[0] = cp[0] >> 2; 	/* First encoded byte - will be 0-63 inc.*/
        
        c[1] = ((cp[0] & 3) << 4) | (cp[1] >> 4);
        if (**base) (*base)++;
        if (!cp[1]) return; /* 1.78 */
        c[2] = ((cp[1] << 2) & 0x3c) | (cp[2] >> 6);
        if (**base) (*base)++;
        if (!cp[2]) return; /* 1.78 */
        c[3] = (cp[2] & 0x3f);
        if (**base) (*base)++;
}


char *base64_encode(char *str, int sz)
{
        int encsz = sz;
        char *result, *rp;
        int     c[4];

        while (encsz % 3) ++encsz;
        encsz /= 3;
        encsz *= 4;

        result = rp = malloc(encsz + 1);
        if (!result) return 0;
        while (sz) {
                base64_fill_array(&str,c,&sz);
       	        if (c[0] > 64 || c[1] > 64 || c[2] > 64 || c[3] > 64) {
               	        printf("error in encoder\n");
                }
       	        sprintf(rp, "%c%c%c%c",
               	        base64_encoder[c[0]],
                       	base64_encoder[c[1]],
                        base64_encoder[c[2]],
       	                base64_encoder[c[3]]);
               	rp += 4;
        }
        *rp = 0;
        return result;
}
#endif

static int base64_locate_char(char c)
{
        int x;
        
        for (x=0; x<=63; ++x) if (c == base64_encoder[x]) return x;
        return 0;
}

char *base64_decode(char *str, int *outsz)
{
        char *p = str, *const res = str;
        int sz = strlen(str);
        
        if (sz % 4) {
                if (outsz) *outsz = sizeof"error in decoder";
                return "error in decoder";
        }

        for (;*p; p+=4) {
                int i[4] = {0,0,0,0}, j;
                
                for (j=0; j<4; ++j) {
                        if (!p[j]) break;
                        i[j] = base64_locate_char(p[j]);
                }

                str[0] = (i[0] << 2) | ((i[1] >> 4) & 3);
                str[1] = ((i[1] & 0xf) << 4) | ((i[2] >> 2) & 0xf);
                str[2] = ((i[2] & 3) << 6) | i[3];
                str += 3;
        }
        *str = '\0';
        while (str > res && str[-1] == '\0') --str;
        if (outsz) *outsz = str - res;
        return res;
}

#ifdef TEST

static char encstring[] = "QWxhZGRpbjpvcGVuIHNlc2FtZQ==";

int main(int argc, char **argv)
{
        char *result;
        
        if (argc > 1) {
                int p,len;
                char *dup = strcpy(malloc(strlen(argv[1])+1), argv[1]);
                char *result = base64_decode(dup, &len);
		for (p=0; p<len; ++p) {
		        printf("%02x ", result[p]);
		}
                printf("\n%s\n", result);
        }
        else {
                if (strcmp(base64_encode("Aladdin:open sesame", strlen("Aladdin:open sesame")),
                        "QWxhZGRpbjpvcGVuIHNlc2FtZQ==")==0)
                      printf("Aladdin:open sesame encoded correctly\n");
                else printf("Aladdin:open sesame encoded wrongly\n");
                
                printf("Decoding back: %s\n", base64_decode(encstring, 0));
                
                result = base64_encode("Hello\0There", 11);
                printf("%s\n", result);
                printf("%s\n", base64_decode(result, 0));
        }
        return 0;
}

#endif
