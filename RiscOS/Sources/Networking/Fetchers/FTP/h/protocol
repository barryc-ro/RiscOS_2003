/* FTP (h.protocol)
 *
 * © Acorn Computers Ltd. 1996, 1997, 1998
 *
 */

/* This is actually a bit-field used as the return flags value in R0 for
 * various protocol module SWIs.  Some common combinations have been
 * included in the list here too
 */

typedef enum {
	status_NOT_YET_CONNECTED = 0,
	status_CONNECTED_TO_SERVER = 1,
	status_SENT_REQUEST = 2,
	status_SENT_DATA = 4,
	status_WAIT_INITIAL_RESPONSE = 7,
	status_HAVE_INITIAL_RESPONSE = 8,
	status_WAIT_FOR_BODY = 15,
	status_TRANSFER_IN_PROGRESS = 16,
	status_READING_REPLY = 31,
	status_ALL_DATA_RECEIVED = 32,
	status_ABORTED = 64
} network_protocol_status_flags;


typedef enum {
        ftp_INFORMATIONAL	= 1,
        ftp_OK,
        ftp_PENDING,
        ftp_CLIENT_ERROR,
        ftp_SERVER_ERROR
} ftp_protocol_response_code_classes;

#define ftp_class(rc) ((rc)/100)

typedef enum {
	FTP_DISCONNECTED,
	FTP_STATUS_DNS,
	FTP_CONNECTED,

	FTP_GREETING_RECEIVED,
	FTP_SYST_RECEIVED,
	FTP_USER_RESP_RECEIVED,
	FTP_PASS_RESP_RECEIVED,
	FTP_ACCT_RESP_RECEIVED,

	FTP_LOGGED_IN,
	FTP_GOT_PWD_RESP,
	FTP_SEND_CWD_HOME,
	FTP_GOT_CWD_HOME_RESP,
	FTP_INITIATE_COMMAND,

	FTP_DELE_RESP_RECEIVED,
	FTP_MKDIR_RESP_RECEIVED,
	FTP_RMDIR_RESP_RECEIVED,
	FTP_RNFR_RESP_RECEIVED,
	FTP_RNTO_RESP_RECEIVED,

	FTP_CWD_DIR_RESP_RECEIVED,
	FTP_LIST_RESP_RECEIVED,
	FTP_PASV_RESP_RECEIVED,
	FTP_PORT_RESP_RECEIVED,
	FTP_WAIT_DATA_CONNECTION,

	FTP_INITIATE_DIR_TRANSFER,
	FTP_INITIATE_FILE_TRANSFER,

	FTP_STOR_RESP_RECEIVED,
	FTP_RETR_RESP_RECEIVED,
	FTP_DIR_RESP_RECEIVED,
	FTP_SIZE_RESP_RECEIVED,
	FTP_STAT_RESP_RECEIVED,

	FTP_RETR_DIR_RESP_RECEIVED,

	FTP_READ_DATA,
	FTP_READ_DIR_DATA,
	FTP_WRITE_DATA,

	FTP_XFER_RESP_RECEIVED,
	FTP_XFER_DONE_RECEIVED,
	FTP_DIR_XFER_COMPLETE,

	FTP_SENDING_COMMAND,
	FTP_RECEIVING_RESPONSE,
	FTP_RECEIVING_DIR_RESPONSE,

	FTP_PUMPING_CLIENT_RESPONSE,
	FTP_ABOR_RESP_RECEIVED,

	FTP_STATUS_ENDED,
	FTP_STATUS_DEAD,
	FTP_STATUS_ERROR_CREATE,
	FTP_STATUS_ERROR_CONN,
	FTP_STATUS_ERROR_MEM,
	FTP_STATUS_ERROR_WRITE,
	FTP_STATUS_ERROR_CLOSE,
	FTP_STATUS_ERROR_READ,
	FTP_STATUS_ERROR_BADRD,
	FTP_STATUS_TOKEN_NOT_FOUND,
	FTP_STATUS_ERROR_UNEXPECTED

} ftp_fsm_states;


/* Method is NOT a bitfield */
typedef enum {
	method_FTP_RETR		= 1, /* = LIST for directories */
	method_FTP_STOR		= 8,
	method_FTP_MKDIR	= 9,
	method_FTP_RMDIR	= 10,
	method_FTP_RENAME	= 11,
	method_FTP_DELETE	= 12,
	method_FTP_STOU		= 13
} ftp_method_in_r2_codes;

/*************************************************************/
/* A debugging thing. Goes to file if the file can be opened */
/* rather than the TML card, since Minerva dont seem to have */
/* TML cards.						     */
/*************************************************************/
#pragma -v1
extern void protocol_debug(const char */*format*/, ...);
#pragma -v0
extern void protocol_dump(const char *ptr, int size);

extern const char *ftp_state_name(int);
extern char *protocol_network_states(int status);

#define state_BLOCKING ((_kernel_oserror *)-3)
