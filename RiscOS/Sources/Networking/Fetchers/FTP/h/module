/*
 * FTP (module.h)
 *
 * © Acorn Computers Ltd. 1996-1997
 *
 */

typedef enum {
        flags_USER_AGENT_IN_R6  	= 1,
	flags_DATA_LENGTH_IN_R5 	= 2,
	flags_QUOTE_RESPONSE_VERBATIM 	= 4
} ftp_start_swi_r0_flags;

enum {
        ftpflags_DONT_INCREMENT_TOTALS  = (signed)(1U<<31)
};

typedef struct {
        int	next_state;		/* State to enter when all data "done" */
        char	*data;			/* Data itself */
        size_t	length;			/* Total length of data */
        size_t	done;			/* Amount written so far, or read so far */
} ftp_arbitrary_data;

enum {
        connectionflags_NO_PASV = 1
};


/* Pre-declaration required for ftp_callback declaration */
typedef struct session Session;

typedef _kernel_oserror *(*ftp_callback)(Session *, _kernel_swi_regs *);

/*************************************************************/
/* The session control block. Refered to as "Session *"	     */
/*************************************************************/
struct session {
	struct session *next;		/* next pointer */
	int control_sd;			/* Control socket */
	int data_sd;			/* Data socket */
	int listen_sd;                  /* Listening socket - if used (for PORT data xfers) */
	int server_code;		/* Faked server response code */
	int state;			/* What state of connection are we in? */
	ftp_callback next_state;	/* Temporary holder whilst waiting for connection */
	int connectionflags;		/* Flags about the connection */
	int method;			/* FTP command to issue */
	unsigned int id;		/* Unknown */
	unsigned int size;		/* Unknown */
	int outstanding_response;	/* There is a response outstanding */
	int cacheable;			/* Control connection is cacheable */

	char *uri;			/* URI in URL format */
	char *url;			/* Complete copy of URL */
	char *host;			/* Host to which we are connecting */
	int port;			/* Port number to which we connect */
	char *user;			/* User name (NULL = anonymous) */
	char *pass;			/* Password (NULL = faked e-mail) */
	char *acct;			/* Account (NULL for none) */

	char *target_name;		/* Fetch target (in remote server's format) */
	char *rename_uri;		/* Rename target (in our "UNIX" format) */
	char *rename_name;		/* Rename target (in remote server's format) */

	int server_type;		/* Make of FTP server/remote OS (for path munger) */
	ftp_arbitrary_data command;	/* Command currently being sent */
	ftp_arbitrary_data client_pump;	/* Data being pumped to client */
	ftp_arbitrary_data response;	/* Response being received */
	ftp_arbitrary_data directory;	/* Directory listing buffer */
	ftp_arbitrary_data put_data;	/* Data to be put in a STOR/STOU */

	int response_code;		/* Code of response received */
	int is_dir;			/* non-zero if we want a dir listing */
	char *home;			/* Home directory if known */
	int had_final_response;		/* Had the final response? */
	int reported_state;		/* protocol_status_flags */
	int error_state;		/* Remember where we were when error occurred */

	size_t total_bytes_transferred;	/* Used for status reports */
	int headers_sent;		/* "HTTP headers" sent to client yet? */
	int aborting;			/* Session is currently awaiting an abort */
	int flags;			/* Copy of flags supplied to start SWI */
	_kernel_swi_regs *r;		/* SWI register set pointer */
};

/* The spare connection block. Connections are held onto after use,
 * for "CONNECTION_TIMEOUT" centiseconds.
 */
typedef struct connection {
	struct connection *next;
	int control_sd;
	unsigned int last_use;
	char *host;
	int port;
	char *user;
	char *home;
	int server_type;
	int flags;
} Connection;

#define CONNECTION_TIMEOUT (2*60*100)

/*************************************************************/
/* Found in ^.c.sess_ctrl				     */
/*************************************************************/
/* These functions are used to manipulate session control    */
/* structures; find, create and kill sessions		     */
/*************************************************************/
extern Session *find_session(unsigned int id);
extern Session *new_session(void);
extern void kill_session(Session *s);
extern void kill_connection(Connection *c);
extern void ses_kill_all(void);
extern void conn_kill_all(void);
extern void init_sessions(void);
extern void kill_sessions(void);
extern Connection *new_connection(Session *s);
extern int find_connection(Session *ses, const char *host, int port, const char *user);
extern Connection *find_first_connection(void);
extern Session *find_first_session(void);

/*************************************************************/
/* Found in ^.c.connect					     */
/*************************************************************/
/* These functions are used to create a socket, connect it   */
/* to a remote host, and make it non_blocking		     */
/*************************************************************/
extern int make_sock_nonblocking(int fd);
extern int opensock(char *name, int port, char *sername, int *state, int fd);
extern int ftp_bindsock(int proto_s, struct sockaddr_in *sin);

/*
 * These are the entry points for the 4 protocol SWIs
 */
extern _kernel_oserror *ftp_start(_kernel_swi_regs *r);
extern _kernel_oserror *ftp_stop(_kernel_swi_regs *r);
extern _kernel_oserror *ftp_readdata(_kernel_swi_regs *r);
extern _kernel_oserror *ftp_status(_kernel_swi_regs *r);

/*
 *  Switches into an aborting status.  When abort is completed,
 *  session will give up its control socket into the free pool
 *  of connections and wait to be ftp_stop'ped.
 */
extern _kernel_oserror *ftp_abort(Session *ses, _kernel_swi_regs *r);

/* Initiate a client data buffer write with entry into new state when done */
extern _kernel_oserror *ftp_start_client_pump_va(Session *s, int next_state, const char *h1, ...);


/* This is the size of the internal header buffer.  Blocks of RMA will
 * be claimed in chunks of this size, and blocks will be extended by
 * this amount if found to be insufficiently long
 */
#define INTERNAL_BUFFER_SIZE	(1024)


extern char *module_realloc(void */*ptr*/, size_t /*size*/);

/* This function is called by the ReadData processor to install a handler to process
 * the response to an ABORt command.  It guesses a likely time period for which to
 * delay the attempt, but it wants to ensure that it is guaranteed to be reasonably
 * prompt and cannot afford to wait for the idle connection timeout period to expire.
 */
extern _kernel_oserror *module_call_after(void);
