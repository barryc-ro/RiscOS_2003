/*
 * Gopher (h.module)
 *
 * © Acorn Computers Ltd. 1997
 *
 */

#define SESSION_BUFFER_LENGTH	(1040)
#define SESSION_HTML_BUFFER	(1080)
#define SESSION_DIR_BUFFER	(512)

/*************************************************************/
/* The session control block. Refered to as "Session *"      */
/*************************************************************/
typedef struct session {
  	int control_sd;            	/* Control socket */
  	int server_code;		/* Always faked in gopher */
  	int state;                 	/* What state of connection are we in? */
  	int reported_state;		/* State reported to client */
  	unsigned int type;		/* Gopher object type */
  	unsigned int id;		/* Client session handle */
  	char *selector;		/* Data block to send to gopher server (inc. \r\n) */
  	char *url;
  	char *uri;
  	char *host;
  	int port;
  	struct session *next;
  	char line_buffer[SESSION_BUFFER_LENGTH];	/* Used by the socket reader */
  	char dir_buffer[SESSION_DIR_BUFFER];	/* Destination buffer for socket reader */
  	char html_buffer[SESSION_HTML_BUFFER];	/* Used by process_dir_line */
  	int html_ptr;	/* Amount of data in html_buffer that has been sent to the client */
  	int line_ptr;
  	char *data;
  	int headers_sent;
  	int is_dir;
  	int panic_discard;	/* Set to non-zero when discarding until end of line */
  	int err_sent;
  	char *err_ptr;
  	unsigned int size;
  	unsigned int sent;
  	unsigned int header;
  	unsigned int sending;
} Session;

typedef enum {
	status_NOT_YET_CONNECTED = 0,
        status_CONNECTED_TO_SERVER = 1,
        status_SENT_REQUEST = 2,
        status_SENT_DATA = 4,
        status_HAVE_INITIAL_RESPONSE = 8,
        status_TRANSFER_IN_PROGRESS = 16,
        status_READING_REPLY = 31,
        status_ALL_DATA_RECEIVED = 32,
        status_ABORTED = 64
} status_flags;

#define DISCONNECTED	0
#define CONNECTED	1      	/* Got a connection */
#define FETCHING	2	/* Object fetch in progress */
#define DIR_FETCHING	3	/* Directory listing fetch in progress */
#define FINISHED	4	/* Connection has been closed and transfer is over */
#define PUMPING_ERROR	5	/* Streaming out an error message */
#define FINDING_DNS	6	/* Performing a DNS lookup */

#define CONNECTION_TIMEOUT (2*60*100)

/*************************************************************/
/* Found in ^.c.sess_ctrl                                    */
/*************************************************************/
/* These functions are used to manipulate session control    */
/* structures; find, create and kill sessions	  	     */
/*************************************************************/
extern Session *find_session(unsigned int id);
extern Session *new_session(void);
extern void kill_session(Session */*s*/);
extern void ses_kill_all(void);
extern void session_check(void);
extern void session_init(void);

/*************************************************************/
/* Found in ^.c.connect                                      */
/*************************************************************/
/* These functions are used to create a socket, connect it   */
/* to a remote host, and make it non_blocking		     */
/*************************************************************/
extern int make_sock_nonblocking(int fd);
extern int opensock(char *name, int port, char *sername, int *state, int fd);

/*************************************************************/
/* Found in ^.c.module                                       */
/*************************************************************/
/* The basic module entry points                             */
/*************************************************************/

/*************************************************************/
/* Found in ^.c.start                                        */
/*************************************************************/
/* Start a Gopher transaction. Connect to the remote host    */
/* and send the requisite data    	     	    	     */
/**************************************************************/
_kernel_oserror *gopher_start(_kernel_swi_regs *r);
int gopher_retry_request(Session *ses);

/*************************************************************/
/* Found in ^.c.stop                                         */
/*************************************************************/
/* Stop a Gopher transaction. Connect to the remote host and */
/* send the requisite data    	     	    	   	     */
/*************************************************************/
_kernel_oserror *gopher_stop(_kernel_swi_regs *r);

/*************************************************************/
/* Found in ^.c.readdata                                     */
/*************************************************************/
/* Routine to read the result back from a Gopher request     */
/*************************************************************/
_kernel_oserror *gopher_readdata(_kernel_swi_regs *r);
_kernel_oserror *gopher_abort(Session *ses, _kernel_swi_regs *r);
char *strnchr(char *string, char index, int size);
char *strnstr(char *string, char *index, int size);
_kernel_oserror *gopher_doing_dns(Session *s, _kernel_swi_regs *r);

/*************************************************************/
/* Found in ^.c.status                                       */
/*************************************************************/
/* Routine to fake a status request back to the URL module   */
/*************************************************************/
_kernel_oserror *gopher_status(_kernel_swi_regs *r);
