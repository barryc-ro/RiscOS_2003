/*
 * Gopher (c.module)
 *
 * © Acorn Computers Ltd. 1997
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include <string.h>
#include "sys/errno.h"
#include "module.h"
#include "Gopherhdr.h"
#include "processdir.h"
#include "utils.h"
#include "protocol.h"

#include "MemCheck:MemCheck.h"

#if CMHG_VERSION < 516
#define CMHG_CONST
#else
#define CMHG_CONST const
#endif

/* TinySupport SWIs.  This does not work if any library static data
 * is used within the module.  This means errno (__errno) and __ctype
 * (as used by any macro call to is.... functions)  If you re-enable
 * this SWI call, this module will fail to work at all.
 */
#define NO_TINYSTUBS

#ifdef ROM
#ifndef NO_TINYSTUBS
static _kernel_oserror *__ROM;
#define TinySupport_Share	(0x82c43)
#define TinySupport_Die		(0x82c41)
#endif
#endif

#define NO_SUCH_SWI	(0x1E6)


#define URL_PROTOCOL_REGISTER 0x83e20
#define URL_PROTOCOL_DEREGISTER 0x83e21

#ifndef ROM
extern int messages_file(void);
#endif

#ifndef ROM
#ifdef DEFINE_ERRNO
int __errno;
#endif
#endif


static int registered;

static _kernel_oserror *try_to_register(void)
{
	_kernel_oserror *e;

	if (registered) return NULL;
	e = _swix(URL_PROTOCOL_REGISTER, _INR(0,4), 0, GopherFetcher_00, "gopher:",
		Module_VersionNumber, Module_Help " © Acorn 1997-8 (Built: " Module_Date ")");
	if (e == NULL) {
		registered = 1;
	}
	return e;
}

static _kernel_oserror *try_to_deregister(void)
{
	if (!registered) {
		return NULL;
	}
	else {
		registered = 0;
		return _swix(URL_PROTOCOL_DEREGISTER, _INR(0,1), 0, GopherFetcher_00);
	}
}

static _kernel_oserror *register_with_url(void)
{
	_kernel_oserror *e;

	e = try_to_register();
	if (e == NULL) return e;
	if (e->errnum != NO_SUCH_SWI) return e;
	#ifndef ROM
	e = _swix(OS_Module, _INR(0,1), 1 /* Load */, "System:Modules.Network.URL.URL");
	return try_to_register();
	#else
	return NULL;
	#endif
}


void service_handler(int service_number, _kernel_swi_regs *r, void *pw)
{
	#ifdef TRACE
	protocol_debug("Service &%X: R0 = %d for URL version  %03d\n", service_number, r->r[0], r->r[2]);
	#endif
	(void) pw;
	(void) service_number;

	switch (r->r[0]) {
		case 0:
			(void) try_to_register();
			break;
		case 1:
			(void) try_to_deregister();
			break;
		default:
			break;
	}
}

/*************************************************************/
/* _kernel_oserror *module_init(char *cmd_fail, int podu...  */
/*************************************************************/
/* Start up and register ourselves with the URL module	     */
/*************************************************************/
_kernel_oserror *module_init(CMHG_CONST char *cmd_tail, int podule_base, void *pw)
{
	_kernel_oserror *e;

	(void) podule_base;
	(void) cmd_tail;
	(void) pw;

      	#ifdef ROM
      	#ifndef NO_TINYSTUBS
    	__ROM = _swix(TinySupport_Share, _IN(0), pw);
    	#endif
	#endif

	session_init();

	MemCheck_InitNoDebug();
	MemCheck_SetQuitting(0,0);
	MemCheck_RedirectToFilename("adfs::4.tmp.Gopher_mem");
	MemCheck_InterceptSCLStringFunctions();
	MemCheck_RegisterMiscBlock((void *)0x01c0001c,8164);  /* StB: wonderful - the SVC stack I presume? */
	MemCheck_SetStoreMallocFunctions(1);
	MemCheck_SetReportFrees(1);
	MemCheck_SetChecking(0,0);

	registered = 0;
	e = register_with_url();
	if (e) {
		#ifndef ROM
		if (e->errnum == NO_SUCH_SWI) {
			_kernel_oserror *newe = find_error();
			const size_t length = strlen(strcpy(newe->errmess, e->errmess));

			newe->errnum = NO_SUCH_SWI;
			strncat(newe->errmess, " (Load the URL module)", sizeof(newe->errmess) - length);
			return newe;
		}
		#endif
		return e;
	}

	#ifndef ROM
	e = _swix(ResourceFS_RegisterFiles, _IN(0), messages_file());
	if (e) {
		(void) try_to_deregister();
		return e;
	}
	#endif

	if (getenv(Module_Title "$Path")) {
		e = messages_file_open(Module_Title ":Messages");
	}
	else {
		e = messages_file_open("Resources:$.Resources.URL." "Gopher" ".Messages");
	}

	if (e) {
		#ifndef ROM
		(void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
		#endif
		(void) try_to_deregister();
		return e;
	}

	gopherdir_init();
	return NULL;
}
/*************************************************************/
/* _kernel_oserror *module_kill(int fatal, int podule, ...   */
/*************************************************************/
/* When we are killed off, deregister ourselves from the URL */
/* module						     */
/*************************************************************/
_kernel_oserror *module_kill(int fatal, int podule, void *pw)
{
	(void) podule;
	(void) fatal;
	(void) pw;

	(void) messages_file_close();
	#ifndef ROM
	(void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
	#endif

	ses_kill_all();
	(void) try_to_deregister();

        #ifdef ROM
        #ifndef NO_TINYSTUBS
    	if(!__ROM) _swix(TinySupport_Die, 0);
    	#endif
	#endif

	return NULL;
}


/*************************************************************/
/* _kernel_oserror *swi_handler(int swi_no, _kernel_swi_...  */
/*************************************************************/
/* Upon a SWI call into this module decide what to do and    */
/* how to do it and all that. Just an excuse for a case	     */
/* statement						     */
/*************************************************************/
_kernel_oserror *swi_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
	#ifdef TRACE
	{const char *swinames[64] = { "GetData", "Status", "ReadData", "Stop" };
	protocol_debug("\nIn Gopher Swi handler, SWI no %d (%s)\n", swi_no, swinames[swi_no % 64]
	?swinames[swi_no % 64]:"<UNKNOWN!>");
	}
	#endif

	(void) pw;

	switch (swi_no) {
		case GopherFetcher_GetData - GopherFetcher_00: /* Gopher_GetData */
			return(gopher_start(r));

		case GopherFetcher_Status - GopherFetcher_00: /* Gopher_Status */
			return(gopher_status(r));

		case GopherFetcher_ReadData - GopherFetcher_00: /* Gopher_ReadData */
			return(gopher_readdata(r));

		case GopherFetcher_Stop - GopherFetcher_00: /* Gopher_Stop */
			return (gopher_stop(r));

		default:
			return error_BAD_SWI;

	}
}

