/*
 * Gopher (c.commands)
 *
 * © Acorn Computers Ltd. 1997
 *
 *
 */

#include "kernel.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include "sys/errno.h"
#include "socklib.h"
#include "protocol.h"

#ifdef TML
  #include "svcprint.h"
#endif

#include "module.h"
#include "commands.h"

int send_command(Session *session, char *command)
{
	if (session->state == DISCONNECTED) {
		return ENOTCONN;
	}
	else {
		#ifdef TRACE
		protocol_debug("Sending (%x): `%s'\n", session->id, command);
		#endif

		if (socketwrite(session->control_sd, command, strlen(command))<0) {
			return errno;
		}
	}
	return 0;
}

/*
 * This function lacks sensible memory access checks on the buffer passed in
 * failing to check the length, for example.
 * I don't expect that it's the source of the current (970909) problems,
 * however, but I flag it for the future.
 */

/* StB has added the max_len parameter - but currently the function does
 * nothing with the value.
 */

/* Return code in FTP is the standard Internet protocol-style response code
 * divided by 100 (ie. the major response type code)
 * Special values:
 *   0 = not got a complete line yet
 *  -1 = error on socket read (real error in errno)
 * 256 = text to pass through to client
 *
 * For gopher, since this routine is used only for retrieving menus, then
 * we can assume that this return code indicates the object type instead
 *
 *
 * Don't add more local variables willy-nilly - the function relies on the
 * compiler's tail-call optimisations.  Imminent death (SVC stack overflow)
 * is the penalty for causing obstructions that prevent this optimisation!
 */
int read_line(Session *ses, char *buffer, int max_len)
{
	char *end_of_line;

	end_of_line = memchr(ses->line_buffer, '\n', ses->line_ptr);
	if (end_of_line) {
		char *const next_entry = end_of_line + 1;
		const int amount_to_shift = ses->line_ptr - (next_entry - ses->line_buffer);

		*end_of_line = '\0';


		if (end_of_line != ses->line_buffer) {
			/* It wasn't a blank line - check for and blank out a leading \r */
			if (end_of_line[-1] == '\r') end_of_line[-1] = '\0';
		}

		#ifdef TRACE
		protocol_debug("Read a menu line `%s'\n", ses->line_buffer);
		#endif

		if (!ses->panic_discard) {
			(void) strcpy(buffer, ses->line_buffer);
		}
		if (amount_to_shift > 0) {
			#ifdef TRACE
			protocol_debug("amount_to_shift = %d\n", amount_to_shift);
			#endif
			memmove(ses->line_buffer, end_of_line + 1, amount_to_shift);
		}
		ses->line_ptr = amount_to_shift;
		if (ses->panic_discard) {
			#ifdef TRACE
			protocol_debug("End of panic mode - reading data normally again - hope that's OK\n");
			#endif
			ses->panic_discard = 0;
			return read_line(ses, buffer, max_len);
		}
		return *buffer;
	}
	else {
		const int space_left = SESSION_BUFFER_LENGTH - ses->line_ptr;
		int result;

		if (space_left == 0) {
			/* We are stuck - our buffer wasn't long enough to cope */
			/* Our head in the sand attitude is: ignore this line */
			#ifdef TRACE
			protocol_debug("Panic!  Server sent a line that exceeded our buffer length\n");
			#endif
			ses->panic_discard = 1;
			ses->line_ptr = 0;
			return read_line(ses, buffer, max_len);
		}

		result = socketread(ses->control_sd, ses->line_buffer + ses->line_ptr, space_left);

		if (result < 0) {
			if (errno == EWOULDBLOCK || errno == ENOTCONN)  {
				/* Hmm.  Only protocol modules which need to read an initial greeting should
				 * be checking for ENOTCONN
				 */
				return 0;
			}
			else {
				/* Real socket error has occurred - propagate it to our caller */
				return -1;
			}
		}

		#ifdef TRACE
		protocol_debug("Received %d bytes of data from socket\n", result);
		#endif
		ses->line_ptr += result;
	}

	return read_line(ses, buffer, max_len);
}
