/*
 * Gopher (c.processdir)
 *
 * © Acorn Computers Ltd. 1996-1997
 *
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "processdir.h"
#include "gopherhdr.h"
#include "gophertype.h"
#include "swis.h"
#include "module.h"

#ifdef TML
  #include "svcprint.h"
#endif

#define IMAGE_ALIGN	"align=left"

#define GOPHER_GOOD_CHARS "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789./-_$"
#define TOASCII(c) (c)

static char acceptable[256];

void gopherdir_init(void)
{
  	int inited;
	char *good;

	for (inited=0; inited<256; inited++) acceptable[inited] = 0;
	for (good=GOPHER_GOOD_CHARS; *good; ++good) {
		acceptable[(unsigned int)*good] = 1;
	}
}

static void gopherdir_add_element(char *output, char *name, char *selector, int type)
{
  /* Stuffs the HTML for this directory entry onto the output buffer */
  sprintf(strchr(output, '\0'),
  	"<a href=\"%s\"><img src=\"file://Resources:$/Resources/URL/Gopher/%s\" " IMAGE_ALIGN " border=0> %s</a>",
  	selector ? selector : name,
  	type == 0xb62 ? "Dir" : "File",
  	name);
  #ifdef TRACE
  protocol_debug("Object `%s' has RISC OS type %03x\n", name, type);
  #endif
}

static int gopher_output_type(int type)
{
	switch (type) {
		case GOPHER_INDEX:
		case GOPHER_CSO:
		case GOPHER_MACBINHEX:
		case GOPHER_TEXT: return 0xfff;

		case GOPHER_MENU: return 0xb62;
		case GOPHER_BINARY:

		case GOPHER_ERROR: return 0xffd;

		case GOPHER_WWW:
		case GOPHER_CHTML:
		case GOPHER_HTML: return 0xfaf;

		case GOPHER_SOUND:
		case GOPHER_PLUS_SOUND: return 0xd3c;

		case GOPHER_GIF:
		case GOPHER_IMAGE:
		case GOPHER_PLUS_IMAGE: return 0x695;

		case GOPHER_PLUS_MOVIE: return 0xae7;
		default:
			return -1;
	}
}


static char hex[] = "0123456789abcdef";

static void gopherdir_parse_line(char *buffer, char *output, char *address)
{
	/* Largely pinched from Lynx */
	#define TAB	'\t'
	#define HEX_ESCAPE '%'
	int os_type;
	int gtype;
	char *selector = "", *host = "", *port = "70", *name = NULL;
	char *p = buffer;

	*address = '\0';

	gtype = *p++;
	if (gtype == '.' && ((*p=='\r') || (*p==0))) return;

	if (gtype && *p) {
		name = p;
		selector = strchr(name, TAB);
		if (selector) {
			*selector++ = '\0'; /* Terminate name */
		    /*
		     * Gopher+ Type=0+ objects can be binary, and will
		     * have 9 or 5 beginning their selector.  Make sure
		     * we don't trash the terminal by treating them as
		     * text. - FM
		     */
		    if (gtype == GOPHER_TEXT && (*selector == GOPHER_BINARY ||
						 *selector == GOPHER_PCBINARY))
			gtype = *selector;

		    host = strchr(selector, TAB);
		    if (host) {
			*host++ = 0;	/* Terminate selector */
			port = strchr(host, TAB);
			if (port) {
			    char *junk;
			    port[0] = ':';	/* delimit host a la W3 */
			    junk = strchr(port, TAB);
			    if (junk) *junk++ = 0;	/* Chop port */
			    if ((port[1]=='0') && (!port[2]))
				port[0] = 0;	/* 0 means none */
			} /* no port */
		    } /* host ok */
		} /* selector ok */
	} /* gtype and name ok */

	/* Nameless files are a separator line */
	if (gtype == GOPHER_TEXT) {
		int i = strlen(name)-1;
		while (name[i] == ' ' && i >= 0)
		    name[i--] = '\0';
		if (i < 0)
		    gtype = GOPHER_INFO;
	}

	if (gtype) {
		os_type = gopher_output_type(gtype);
	}
	else {
	        os_type = gopher_output_type(GOPHER_INFO);
	}

	*output = '\0';
	strcat(output, "\n<br>");

	if (gtype == GOPHER_WWW) {	/* Gopher pointer to W3 */
		gopherdir_add_element(output, name, selector, os_type);
		return;
	}

	if (gtype == GOPHER_INFO) {
	    /* Information or separator line */
	    	strcat(output, name);
	    	return;
	}

	if (port) {		/* Other types need port */
		if (gtype == GOPHER_TELNET) {
		    if (*selector) sprintf(address, "telnet://%s@%s/",  selector, host);
		    else sprintf(address, "telnet://%s/", host);
		}
		else if (gtype == GOPHER_TN3270)
		{
		    if (*selector)
			sprintf(address, "tn3270://%s@%s/", selector, host);
		    else
			sprintf(address, "tn3270://%s/", host);
		}
		else {			/* If parsed ok */
		    char *q;
		    char *p;

		    sprintf(address, "gopher://%s/%c", host, gtype);

		    q = strchr(address, '\0');
		    for(p=selector; *p; p++) {	/* Encode selector string */
			if (acceptable[*p]) *q++ = *p;
			else {
			    *q++ = HEX_ESCAPE;	/* Means hex coming */
			    *q++ = hex[(TOASCII(*p)) >> 4];
			    *q++ = hex[(TOASCII(*p)) & 15];
			}
		    }

		    *q++ = 0;			/* terminate address */
		}
		/* Error response from Gopher doesn't deserve to
		   be a hyperlink. */
		if (strcmp (address, "gopher://:/0")) {
			gopherdir_add_element(output, name, address, os_type);
		}
		else {
		        strcat(output, name);
		}
	} else { /* parse error */
		strcat(output, buffer);
	}
}

int process_dir_line(char *buffer, char *output)
{
	char *const address = malloc(strlen(buffer) + sizeof("gopher:// /") + 4 /* Magic! */);

	if (!address) return -1; /* out of memory */
	gopherdir_parse_line(buffer, output, address);
	free(address);
	return 0;
}

char *gopher_get_type(unsigned int c)
{
        switch (c) {
		case GOPHER_INDEX:
		case GOPHER_CSO:
		case GOPHER_MACBINHEX:
		case GOPHER_TEXT: return "text/plain";

		case GOPHER_MENU: return "application/x-gopher";

		case GOPHER_BINARY:
		case GOPHER_ERROR: return "text/plain";

		case GOPHER_WWW:
		case GOPHER_CHTML:
		case GOPHER_HTML: return "text/html";

		case GOPHER_SOUND:
		case GOPHER_PLUS_SOUND: return "audio/aiff";

		case GOPHER_GIF:
		case GOPHER_IMAGE:
		case GOPHER_PLUS_IMAGE: return "image/gif";

		case GOPHER_PLUS_MOVIE: return "video/x-armovie";
		default:
			return "text/plain";
        }
}
