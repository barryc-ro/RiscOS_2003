/*
 * Generic (c.protocol)
 *
 * © Acorn Computers Ltd. 1997
 *
 */
#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <ctype.h>
#include" protocol.h"
#include "utils.h"

#ifdef DEBUGLIB
char *protocol_states(int state)
{
        switch (state) {
                case protostate_ERROR: return "protostate_ERROR";
                case protostate_ERROR_DEAD: return "protostate_ERROR_DEAD";
                case protostate_ERROR_MEM: return "protostate_ERROR_MEM";
                case protostate_ERROR_WRITE: return "protostate_ERROR_WRITE";
                case protostate_ERROR_READ: return "protostate_ERROR_READ";
                case protostate_ERROR_CONNECTION: return "protostate_ERROR_CONNECTION";
                case protostate_ERROR_NO_TOKEN: return "protostate_ERROR_NO_TOKEN";
                case protostate_ERROR_NOT_IMPLEMENTED: return "protostate_ERROR_NOT_IMPLEMENTED";
                case protostate_INITIAL: return "protostate_INITIAL";
                case protostate_DNS: return "protostate_DNS";
                case protostate_CONNECTED: return "protostate_CONNECTED";
                case protostate_SENDING: return "protostate_SENDING";
                case protostate_RECEIVING: return "protostate_RECEIVING";
                case protostate_PUMPING: return "protostate_PUMPING";
                case protostate_COMPLETED: return "protostate_COMPLETED";
                default: return "*UNKNOWN*";
        }
}
#endif

#ifdef DEBUGLIB
char *protocol_network_states(int status)
{
        switch (status) {
                case status_NOT_YET_CONNECTED: return "status_NOT_YET_CONNECTED";
                case status_CONNECTED_TO_SERVER: return "status_CONNECTED_TO_SERVER";
                case status_SENT_REQUEST: return "status_SENT_REQUEST";
                case status_SENT_DATA: return "status_SENT_DATA";
                case status_WAIT_INITIAL_RESPONSE: return "status_WAIT_INITIAL_RESPONSE";
                case status_HAVE_INITIAL_RESPONSE: return "status_HAVE_INITIAL_RESPONSE";
                case status_WAIT_FOR_BODY: return "status_WAIT_FOR_BODY";
                case status_TRANSFER_IN_PROGRESS: return "status_TRANSFER_IN_PROGRESS";
                case status_READING_REPLY: return "status_READING_REPLY";
                case status_ALL_DATA_RECEIVED: return "status_ALL_DATA_RECEIVED";
                case status_ABORTED: return "status_ABORTED";

                default:
                {
                        static char charbuf[16];
                        sprintf(charbuf, "&%08X", status);
                        return charbuf;
                }
        }
}
#endif
