/*
 * Generic (c.protocol)
 *
 * © Acorn Computers Ltd. 1997
 *
 */
#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <ctype.h>
#include" protocol.h"

#define	TRACE_NAME	"Generic"

#ifdef USE_SYSLOG
#include "<syslog$dir>.C-veneer.h.syslog"
#endif

#define DEBUG_FILENAME  "RAM:$.TR-" TRACE_NAME

/*************************************************************/
/* static void protocol_debug(const char *format, ...	     */
/*************************************************************/
/* Output trace information to the DEBUG_FILENAME    	     */
/*************************************************************/
#ifdef TRACE
#ifdef USE_SYSLOG
static int dont_use_syslog = 0;
#endif

void protocol_debug(const char *format, ...)
{
	#ifdef TRACE
	if (getenv("NoTrace$" TRACE_NAME)) return; else {
		va_list ap;
		#ifdef USE_SYSLOG
		if (!dont_use_syslog) {
			static char buffer[1024];
			va_start(ap, format);
			vsprintf(buffer, format, ap);
			va_end(ap);
			if (xsyslog_logmessage(TRACE_NAME, buffer, 100)) {
                                dont_use_syslog = 1;
			}
		}
		if (dont_use_syslog) {
		#endif
			FILE *fp = fopen(DEBUG_FILENAME, "a");

			if (fp != 0) {
				va_start(ap, format);
				(void) vfprintf(fp, format, ap);
				va_end(ap);
				fclose(fp);
			}
		#ifdef USE_SYSLOG
		}
		#endif
	}
	#else
	(void) format;
	#endif
}
#endif


#ifdef TRACE

static char *filter(char *buf, const char *ptr, int max)
{
	int i;
	for (i=0; i<=max; ++i) {
		int p = ptr[i];
		if (p<32 || p == 127) buf[i] = '.'; else buf[i] = p;
	}
	buf[i] = '\0';
	return buf;
}

void protocol_dump(const char *ptr, int size)
{
	#ifdef TRACE
	if (getenv("NoTrace$" TRACE_NAME) || getenv("NoTrace$" TRACE_NAME "Raw")) {
	        return;
	}
	else {
		#ifdef USE_SYSLOG
		if (!dont_use_syslog) {
			if (xsyslog_logdata(TRACE_NAME, 100, ptr, size, 0)) {
                                dont_use_syslog = 1;
			}
		}
		if (dont_use_syslog) {
		#endif
			FILE *fp = fopen(DEBUG_FILENAME, "a");
			if (fp != NULL) {
				int ctr;
				char buf[48];
				fprintf(fp, "%08x: ", 0);
				for (ctr=0; ctr<size; ++ctr) {
					fprintf(fp, "%02x ", ptr[ctr]);
					if ((ctr & 31) == 31) {
						fprintf(fp, "  %s",
							filter(buf, ptr+(ctr & ~31), ctr & 31));
						fprintf(fp, "\n%08x: ", ctr+1);
					}
				}
				if (ctr & 31) {
					const char *start = ptr + (ctr & ~31);
					while (ctr & 31) {
						fprintf(fp, "   ");
						++ctr;
					}
					fprintf(fp, "  %s", filter(buf, start, (size & 31)-1));
				}
				fputc('\n', fp);
				fclose(fp);
			}
		#ifdef USE_SYSLOG
		}
		#endif
	}
	#else
	(void) ptr;
	(void) size;
	#endif
}
#endif

#ifdef TRACE
char *protocol_states(int state)
{
	switch (state) {
		case protostate_ERROR: return "protostate_ERROR";
		case protostate_ERROR_DEAD: return "protostate_ERROR_DEAD";
		case protostate_ERROR_MEM: return "protostate_ERROR_MEM";
		case protostate_ERROR_WRITE: return "protostate_ERROR_WRITE";
		case protostate_ERROR_READ: return "protostate_ERROR_READ";
		case protostate_ERROR_CONNECTION: return "protostate_ERROR_CONNECTION";
		case protostate_ERROR_NO_TOKEN: return "protostate_ERROR_NO_TOKEN";
		case protostate_ERROR_NOT_IMPLEMENTED: return "protostate_ERROR_NOT_IMPLEMENTED";
		case protostate_INITIAL: return "protostate_INITIAL";
		case protostate_DNS: return "protostate_DNS";
		case protostate_CONNECTED: return "protostate_CONNECTED";
		case protostate_SENDING: return "protostate_SENDING";
		case protostate_RECEIVING: return "protostate_RECEIVING";
		case protostate_PUMPING: return "protostate_PUMPING";
		case protostate_COMPLETED: return "protostate_COMPLETED";
		default: return "*UNKNOWN*";
	}
}
#endif

#ifdef TRACE
char *protocol_network_states(int status)
{
	switch (status) {
		case status_NOT_YET_CONNECTED: return "status_NOT_YET_CONNECTED";
		case status_CONNECTED_TO_SERVER: return "status_CONNECTED_TO_SERVER";
		case status_SENT_REQUEST: return "status_SENT_REQUEST";
		case status_SENT_DATA: return "status_SENT_DATA";
		case status_WAIT_INITIAL_RESPONSE: return "status_WAIT_INITIAL_RESPONSE";
		case status_HAVE_INITIAL_RESPONSE: return "status_HAVE_INITIAL_RESPONSE";
		case status_WAIT_FOR_BODY: return "status_WAIT_FOR_BODY";
		case status_TRANSFER_IN_PROGRESS: return "status_TRANSFER_IN_PROGRESS";
		case status_READING_REPLY: return "status_READING_REPLY";
		case status_ALL_DATA_RECEIVED: return "status_ALL_DATA_RECEIVED";
		case status_ABORTED: return "status_ABORTED";

		default:
		{
		        static char charbuf[16];
		        sprintf(charbuf, "&%08X", status);
		        return charbuf;
		}
	}
}
#endif
