/*
 * Generic (h.protoerror)
 *
 * THIS FILE REQUIRED CUSTOMISATION
 *
 * © Acorn Computers Ltd. 1997
 *
 */

/* These are the values that represent the error numbers.
 *
 * It is strongly recommended that you keep to the naming scheme and
 * just add extra states to the end of the list of states.
 *
 */

#define URL_ERROR_BASE  (0x80de00) /* URL module base */
#define URL_ERROR2_BASE	(0x813f00) /* Second URL error block base */

/* Acorn fetcher modules use a sub-block of the URL module block
 * Non-Acorn fetcher modules should use a block of 32 errors from
 * a vendor's own allocated error block.  In both cases, blocks have
 * the bottom 5 bits of the first error number clear.  The Messages
 * file should contain tokens for the errors which would match
 * the tag string generated by the expression:
 *   sprintf(tag, "E%02x", error_num & 0x1f)
 * so that the make_error function (utils.c) can automatically
 * generate and return to you a _kernel_oserror block suitable for
 * returning to the client of the module.
 */
#define PROTO_ERROR_BLOCK	(URL_ERROR_BASE)
#define PROTO_MODULE_OFFSET	0

#define ERROR_BASE		(PROTO_ERROR_BLOCK + PROTO_MODULE_OFFSET)

typedef enum {
        errortoken_ERROR_BAD_SESSION = (ERROR_BASE),
	errortoken_ERROR_NO_SESSION,
        errortoken_ERROR_NO_CONNECTION,
        errortoken_ERROR_NO_URL_DECODE,
        errortoken_ERROR_NO_MEMORY,
        errortoken_ERROR_WRITE,
        errortoken_ERROR_READ,
        errortoken_ERROR_INTERNAL,
        errortoken_ERROR_NO_TOKEN,
        errortoken_ERROR_NOT_IMPLEMENTED
} network_protocol_riscos_error_code_numbers;
