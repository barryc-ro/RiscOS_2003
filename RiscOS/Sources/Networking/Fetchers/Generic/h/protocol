/*
 * Generic (h.protocol)
 *
 * © Acorn Computers Ltd. 1997
 *
 */

/* This is actually a bit-field used as the return flags value in R0 for
 * various protocol module SWIs.  Some common combinations have been
 * included in the list here too
 */

typedef enum {
        status_NOT_YET_CONNECTED = 0,
        status_CONNECTED_TO_SERVER = 1,
        status_SENT_REQUEST = 2,
        status_SENT_DATA = 4,
        status_WAIT_INITIAL_RESPONSE = 7,
        status_HAVE_INITIAL_RESPONSE = 8,
        status_WAIT_FOR_BODY = 15,
        status_TRANSFER_IN_PROGRESS = 16,
        status_READING_REPLY = 31,
        status_ALL_DATA_RECEIVED = 32,
        status_ABORTED = 64
} network_protocol_status_flags;


/* This is the method that is passed in the low-byte of R2 to the
 * protocol module's GetData SWI.  Protocol modules need only support
 * those methods which are relevant, but must fault all other method
 * codes (both known and unknown codes, although it may be possible to
 * generate more meaningful error messages if the method is a known one)
 */
typedef enum {
        method_GET      = 1,
        method_HEAD     = 2,
        method_OPTIONS  = 3,
        method_POST     = 4,
        method_TRACE    = 5,
        method__resv_1  = 6,
        method__resv_2  = 7,
        method_PUT      = 8,
        method_MKDIR    = 9,
        method_RMDIR    = 10,
        method_RENAME   = 11,
        method_DELETE   = 12,
        method_FTP_STOU = 13
} protocol_method_in_r2_codes;

#include "protostate.h"
#include "protoerror.h"
#include "DebugLib.h"
#ifndef BOOL_DEFINED
#define BOOL_DEFINED
#ifndef BOOL
#define BOOL int
#define TRUE 1
#define FALSE 0
#endif
#endif

#pragma -v1
extern void protocol_debug(const char */*format*/, ...);
#pragma -v0
extern void protocol_dump(const char *ptr, int size);

extern char *protocol_states(int state);
extern char *protocol_network_states(int status);
