Customise
=========

The "Generic" module is used as a skeleton for new network protocol modules. 
To create a new protocol module, copy the entire Generic directory using a
suitable new name.  Then delete THIS file from the copy.  Then delete any CVS
directories FROM THE COPY because you are going to have to import your new
module back into CVS when you have finished customising it.  It is highly
recommended that you use no more than SEVEN letters for the module name
(since this will aid customisation as you will discover).  For the purpose of
example, I shall assume that you are creating a module which implements the
ECHO network protocol, thus I shall use names appropriate to that.  Note that
the subsitutions are often case-sensitive.

In order to get the shell of the module up and running, you need to customise
a few files.  The changes you need to make are listed here:

Makefile
========

Delete any dynamic dependencies.  Global search and replace "Generic" for
"Echo" noting that this MUST be done case-sensitively!



cmhg.GenericHdr
===============

Rename as cmhg.EchoHdr.   Global search and replace "Generic" for "Echo".
Change SWI chunk to one allocated in the usual manner.


h.connect
=========

Alter #define's at the end of the file: CONNECT_DEFAULT_*.


h.GenericMod
============

Delete this file if present (cmhg will regenerate it as h.EchoMod later)


h.module
========

Read comment about module_realloc.  You do not need to alter this header file
immediately, but this is where you will add your state information to the
Session structure (the comments show you where).  It is highly recommended
that you retain the already present data and just add to it, as you will need
most, if not all, of the stuff that's already there anyway.


h.protoerror
============

Alter the definition of PROTO_ERROR_BLOCK to indicate your registered error
block (unless using part of the block allocated to Acorn).  Set the
PROTO_MODULE_OFFSET to the offset into the error block that is going to be
the base error number.  This must be a multiple of 32 (ie. 0, 32, 64, ...)
as the error message generation code relies on this.

Note that when you introduce new errors, they get added as extra enums here.
Also note that these should have associated states in protostate.h and that
they will require entries in the Messages file for the actual error texts.


h.protostate
============

This is where you will add the states through which your module can pass.
Notice that several useful states are already provided.  These can provide
you with a mechanism for sending arbitrary amounts of data down the socket
(Session.sd), receiving textual line-based response data, sending arbitrary
data back to the client.  These hide any buffering away and when such a
data transfer op is initiated, you merely state the data to be transferred
and a state into which to go when tranmission/reception is complete.

States to perform DNS lookups, making the initial connection to the server
are all already coded and work in a multi-tasking manner.


c.commands
==========

This is where you would add any other data reception functions.  The existing
code is sufficient to send commands and receive line-based responses.


c.headers
=========

General HTTP-like header modification functions can be added here.  The code
already contains a sophisticated HTTP header parser which can cope with
virtually any rubbish being thrown at it, including stuff like continuation
lines.


c.module
========

Alter #include to include EchoMod.h instead of GenericMod.h
Global search and replace "GenericFetcher" for "EchoFetcher".


c.protocol
==========

Stuff in this file is for trace builds.  Alter the TRACE_NAME macro to
"Echo".  You can suppress tracing dynamically by setting the OS variables
NoTrace$Echo (for tracing) and NoTrace$EchoRaw (for buffer dumps).

You will have to replace the cases in the protocol_states function.  You 
could type them all in ... but the easy way is to copy protostate.h into 
RAM disc and delete everything but the typedef from the header file.  (ie.
you are left only with the complete typedef declaration.  Remove all the ,
characters and then save it.  Then (assuming you are in the Echo directory)
do:  gawk -f awk-script.gawk-enums RAM:$.protostate >RAM:$.switch
and that will generate the case statements for you.


c.readdata
==========

This is where the extra states need to be added into the state table
dispatcher.  The dispatched functions should be at the bottom of this file
undeneath the appropriate comment.


c.ses_ctrl
==========

If you added anything to the Session structure in module.h that was a pointer
to dynamically allocated memory, you need to add a 'free' for it in
kill_session_data.  Remember: free(NULL) is legal and does nothing.


c.start
=======

If you need to process fields in the URL, alter start_get_request to get and
store them.


c.status
========

As long as you keep Session.reported_state up-to-date, you need make no
changes to this file.


Resources.UK.Messages
=====================

Edit / add any messages you need.


That's it!  Now you can add the protocol specific stuff.

