/*
 * URL module client code (URLclient.c)
 *
 * © Acorn Computers Ltd. 1997
 *
 *
 *  This is the test program for SWI URL_ParseURL.
 *
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "../URLstruct.h"
#include "URLclient.h"

#define URL_ParseURL	(0x83E07)

/* The following three calls are purely veneers to SWI URL_ParseURL */
_kernel_oserror *URL_find_lengths(int flags, const char *url, const char *rel, URL *u)
{
        return _swix(URL_ParseURL, _INR(0,5), flags, url_parseurl_buffer_lengths, url, rel, u,
        	sizeof(*u)/sizeof(size_t));
}

_kernel_oserror *URL_find_data(int flags, const char *url, const char *rel, URL *u)
{
        return _swix(URL_ParseURL, _INR(0,5), flags, url_parseurl_return_data, url, rel, u,
        	sizeof(*u)/sizeof(size_t));
}

_kernel_oserror *URL_compose_from_components(int flags, const char *url, const char *rel, URL *u)
{
        return _swix(URL_ParseURL, _INR(0,5), flags, url_parseurl_compose_from_components,
        	url, rel, u, sizeof(*u)/sizeof(size_t));
}

/* The following call resolves a relative URL to the given base URL and returns
 * the canonical resolved form of the URL.
 */
char *URL_resolve(int flags, const char *url, const char *rel)
{
        _kernel_oserror *e;
        char *ptr;
        URL u;

        e = URL_find_lengths(flags, url, rel, &u);
        if (e != NULL) return NULL;

	if (u.len[urlfield_FULL] == 0) {
	        return NULL;
	}
	else {
		int i;

		for (i=urlfield_SCHEME; i<=urlfield_MINIMAL; ++i) {
		        u.field[i] = NULL;
		}
	}

	u.field[urlfield_FULL] = ptr = malloc(u.len[urlfield_FULL]);
	if (ptr == NULL) {
	        return NULL;
	}

	e = URL_find_data(flags, url, rel, &u);
	if (e != NULL) {
	        free(ptr);
	        return NULL;
	}

	return ptr;
}

char *URL_canonicalise(int flags, const char *url)
{
        return URL_resolve(flags, url, NULL);
}

/* The following call resolves a relative URL to the given base URL and returns
 * the minimal difference between the two URLs (for the purpose of generating
 * minimalist links.
 */
static char *URL_do_minimise(int flags, const char *url, const char *rel)
{
        _kernel_oserror *e;
        char *ptr;
        URL u;

        e = URL_find_lengths(flags, url, rel, &u);
        if (e != NULL) {
                return NULL;
        }

	if (u.len[urlfield_MINIMAL] == 0) {
	        return NULL;
	}
	else {
		int i;

		for (i=urlfield_FULL; i<urlfield_MINIMAL; ++i) {
		        u.field[i] = NULL;
		}
	}

	u.field[urlfield_MINIMAL] = ptr = malloc(u.len[urlfield_MINIMAL]);
	if (ptr == NULL) {
	        return NULL;
	}

	e = URL_find_data(flags, url, rel, &u);
	if (e != NULL) {
	        free(ptr);
	        return NULL;
	}

	return ptr;
}

char *URL_minimise(int flags, const char *url, const char *rel)
{
        char *full_url = URL_canonicalise(flags, url);
        char *rel_url = full_url ? URL_resolve(flags, full_url, rel) : NULL;
	char *answer;

	if (rel_url == NULL) {
                free(full_url);
                return NULL;
	}
	if (full_url == NULL) return NULL;

	answer = URL_do_minimise(flags, full_url, rel_url);
	free(full_url);
	free(rel_url);
	return answer;
}



static const char *url_component_string(const char *ptr)
{
	return ptr ? ptr : "<none>";
}


static const char *names[] = {
	"full", "scheme", "host", "port", "user", "password",
	"account", "path", "query", "fragment", "relative" };

static void print_url(URL *u_pointer)
{
        struct URL_ptrs *u = &u_pointer->data;
	printf("Scheme `%s'\nHost `%s'\nPort `%s'\nPath `%s'\nUser `%s'\n"
		"Password `%s'\nAccount `%s'\nQuery `%s'\nFragment `%s'\nFull `%s'\nRel `%s'\n",
		url_component_string(u->scheme),
		url_component_string(u->host),
		url_component_string(u->port),
		url_component_string(u->path),
		url_component_string(u->user),
		url_component_string(u->password),
		url_component_string(u->account),
		url_component_string(u->query),
		url_component_string(u->fragment),
		url_component_string(u->full),
		url_component_string(u->minimal)
	);
}

void report(_kernel_oserror *e)
{
        if (!e) return;
	fprintf(stderr, "Error: %s\n", e->errmess);
        exit(1);
}

static void do_url(URL *u, char *url, char *rel, char **data_pointer)
{
        size_t total, len;
        char *data;

	if (data_pointer) *data_pointer = 0;

	report(URL_find_lengths(1, url, rel, u));
	for (len=0, total=0; len<(sizeof(*u)/sizeof(size_t)); ++len) {
	        /*printf("%-16s %d\n", names[len], u.len[len]);*/
	        total += u->len[len];
	}

	if (total == 0) {
                printf("No data??\n");
                return;
	}
	data = malloc(total);
	if (data == NULL) {
	        printf("no memory\n");
	        return;
	}

	if (data_pointer) *data_pointer = data;

	for (len=0, total=0; len<(sizeof(*u)/sizeof(size_t)); ++len) {
	        const int this_len = u->len[len];
	        if (this_len > 0) {
                        u->field[len] = data + total;
                        total += this_len;
	        }
	}

	report(URL_find_data(1, url, rel, u));
}

static void report_urls(int ctr, const char *url, const char *rel)
{
        fprintf(stderr, "\nA problem was detected with test case #%d\n", ctr);
        fprintf(stderr, "URL: -->%s<--\n", url);
        fprintf(stderr, "Rel: -->%s<--\n", rel);
}

static int verbose = 0;

#define buffer_size 	1024
static int test_program(FILE *f, URL *u, int *count)
{
        URL v, w;
        char buffer[buffer_size], rel[buffer_size], *data, *eol;
        int any_errors = 0, ctr = 0;

        while (fgets(buffer, sizeof(buffer), f)) {
                size_t i;
                int done_err = 0;
                if ((eol = strchr(buffer, '\n')) != NULL) *eol = '\0';

		if (buffer[0] == '|') continue;
		if (!fgets(rel, sizeof(rel), f)) break;
                if ((eol = strchr(rel, '\n')) != NULL) *eol = '\0';
		++ctr;
		*count = ctr;

		v = *u;
                for (i=0; i<(sizeof(v)/sizeof(size_t)); ++i) {
                        if (!fgets(v.field[i], buffer_size, f)) return any_errors;
			if ((eol = strchr(v.field[i], '\n')) != NULL) *eol = '\0';
                        if (!strcmp(v.field[i], "<none>")) {
                                v.field[i] = NULL;
                        }
                        else {
                                /* It was a proper field */
                        }
                }

		if (verbose) {
		        printf("Test %d\n%s\n%s\n", ctr, buffer, rel);
		}

                do_url(&w, buffer, strcmp(rel, "<none>") ? rel : NULL, &data);
                for (i=0; i<(sizeof(*u)/sizeof(size_t)); ++i) {
                        if (w.field[i] == NULL) {
                                /* Parsed URL did not include this field */
                                if (v.field[i] != NULL) {
                                        /* We were expecting one */
					if (!done_err) report_urls(ctr, buffer, rel);
                                        done_err = 1;
                                        fprintf(stderr, ">>FAIL<<  Field `%s' was unexpectedly NULL\n",
                                        	names[i]);
                                }
                                else {
                                        /* We were expecting this */
                                }
                        }
                        else {
                                if (v.field[i] == NULL) {
                                        /* Not expecting this */
					if (!done_err) report_urls(ctr, buffer, rel);
                                        done_err = 1;
                                        fprintf(stderr, ">>FAIL<<  Field '%s' was unexpectedly non-NULL\n",
                                        	names[i]);
                                }
                                else {
                                        if (strcmp(v.field[i], w.field[i])) {
                                                /* Fields were unexpectedly different */
						if (!done_err) report_urls(ctr, buffer, rel);
        	                                done_err = 1;
                                                fprintf(stderr, ">>FAIL<<  Field '%s' differed\n",
                                                	names[i]);
                                        }
                                        else {
                                                /* It matched - this means OK! */
                                        }
                                }
                        }
                }
                if (done_err) {
                        any_errors++;
                        printf("Expected:\n");
                        print_url(&v);
                        printf("Got:\n");
                        print_url(&w);
                }
                free(data);
        }
        return any_errors;
}

int main(int argc, char *argv[])
{
        char *url, *answer, *data;
        URL u;
        size_t len, total;

        if (argc > 2 && strcmp(argv[1], "-verbose") == 0) {
                --argc;
                ++argv;
                verbose = 1;
        }
	if (argc > 2) {
                if (strcmp(argv[1], "-test") == 0) {
                        FILE *f = fopen(argv[2], "r");

                        if (f) {
	                        URL u;
        	                size_t i;
        	                int errors, num;

        	                for (i=0; i<((sizeof(u)/sizeof(size_t))); ++i) {
        	                        u.field[i] = malloc(buffer_size+1);
        	                        if (u.field[i] == NULL) {
        	                                fprintf(stderr, "no memory\n");
        	                                return 1;
        	                        }
        	                }
                                errors = test_program(f, &u, &num);
                        	fclose(f);
                        	fprintf(stderr, "Tests completed: %d   Failed cases: %d\n", num, errors);
                        	if (!errors) fprintf(stderr, "!! All tests completed successfully !!\n");
                        }
                        else {
                                fprintf(stderr, "Unable to open %s\n", argv[2]);
                        }
                        return 0;
                }
	}

        url = argc > 1 ? argv[1] : "http://www.acorn.com/browser/download.cgi";
        answer = URL_canonicalise(0, url);

        if (answer == NULL) {
                printf("Unable to canonicalise the URL\n");
        }
        else {
                printf("-->%s<--\n", answer);
        }

	report(URL_find_lengths(0, url, 0, &u));
	for (len=0, total=0; len<(sizeof(u)/sizeof(size_t)); ++len) {
	        printf("%-16s %d\n", names[len], u.len[len]);
	        total += u.len[len];
	}

	if (total == 0) {
                printf("No data??\n");
                return 0;
	}
	data = malloc(total);
	if (data == NULL) {
	        printf("no memory\n");
	        return 0;
	}

	for (len=0, total=0; len<(sizeof(u)/sizeof(size_t)); ++len) {
	        if (u.len[len] > 0) {
                        u.field[len] = data + total;
                        total += u.len[len];
	        }
	}

	report(URL_find_data(0, url, 0, &u));
	print_url(&u);
	free(data);

        return 0;
}
