/*
 * URL module client code (speedtest.c)
 *
 * © Acorn Computers Ltd. 1997
 *
 *
 *  This is the speed test program for SWI URL_ParseURL.
 *
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include "kernel.h"
#include "swis.h"
#include "../URLstruct.h"
#include "URLclient.h"

#define URL_ParseURL	(0x83E07)

/* The following three calls are purely veneers to SWI URL_ParseURL */
_kernel_oserror *URL_find_lengths(int flags, const char *url, const char *rel, URL *u)
{
        return _swix(URL_ParseURL, _INR(0,5), flags, url_parseurl_buffer_lengths, url, rel, u,
        	sizeof(*u)/sizeof(size_t));
}

_kernel_oserror *URL_find_data(int flags, const char *url, const char *rel, URL *u)
{
        return _swix(URL_ParseURL, _INR(0,5), flags, url_parseurl_return_data, url, rel, u,
        	sizeof(*u)/sizeof(size_t));
}

_kernel_oserror *URL_compose_from_components(int flags, const char *url, const char *rel, URL *u)
{
        return _swix(URL_ParseURL, _INR(0,5), flags, url_parseurl_compose_from_components,
        	url, rel, u, sizeof(*u)/sizeof(size_t));
}

_kernel_oserror *URL_quick_resolve(int flags, const char *url, const char *rel, char *buffer, size_t len)
{
        return _swix(URL_ParseURL, _INR(0,5), flags, url_parseurl_quick_resolve, url, rel, buffer,
        	len);
}

/* The following call resolves a relative URL to the given base URL and returns
 * the canonical resolved form of the URL.
 */
char *URL_resolve(int flags, const char *url, const char *rel)
{
        _kernel_oserror *e;
        char *ptr;
        URL u;
        
        e = URL_find_lengths(flags, url, rel, &u);
        if (e != NULL) return NULL;

	if (u.len[urlfield_FULL] == 0) {
	        return NULL;
	}
	else {
		int i;
		
		for (i=urlfield_SCHEME; i<=urlfield_MINIMAL; ++i) {
		        u.field[i] = NULL;
		}
	}

	u.field[urlfield_FULL] = ptr = malloc(u.len[urlfield_FULL]);
	if (ptr == NULL) {
	        return NULL;
	}

	e = URL_find_data(flags, url, rel, &u);
	if (e != NULL) {
	        free(ptr);
	        return NULL;
	}

	return ptr;
}

char *URL_canonicalise(int flags, const char *url)
{
        return URL_resolve(flags, url, NULL);
}



void report(_kernel_oserror *e)
{
        if (!e) return;
	fprintf(stderr, "Error: %s\n", e->errmess);
        exit(1);
}

void test(const char *base, const char *rel)
{
        char *result = URL_resolve(0, base, rel);
        
        if (result == NULL) {
                fprintf(stderr, "Failed to resolve!  Check URLs\n");
                exit(2);
        }
        
        free(result);
}

void test2(const char *base, const char *rel)
{
        const size_t needed_len = strlen(base) + strlen(rel) + 4;
        char *buffer = malloc(needed_len);
        
        if (buffer == NULL) {
                fprintf(stderr, "Failed to allocate RAM\n");
                exit(3);
        }
        
        if (URL_quick_resolve(0, base, rel, buffer, needed_len) != NULL) {
                fprintf(stderr, "Failed to resolve! Check URLs\n");
                exit(4);
        }
        
        free(buffer);
}

double go(long cases, const char *base, const char *rel, int number)
{
	time_t start, end;
	double d;

	_swix(OS_ReadMonotonicTime, _OUT(0), &start);

	for (;cases>=0;--cases) {
                if (number) test(base, rel); else test2(base, rel);
	}

	_swix(OS_ReadMonotonicTime, _OUT(0), &end);

	d = difftime(end, start) / 100;
	printf("Elapsed: %-9.4lf\n", d);
	return d;
}

int main(int argc, char *argv[])
{
        double total = 0.0;
	long cases;
	int loops;
	const int max_loop = 2;
	const char *base = "http://www.acorn.co.uk/browser/?query";
	const char *rel  = "../acorn/internal/#frag";

	if (argc > 1) {
                cases = strtol(argv[1], NULL, 0);
                if (argc > 2) {
                        base = argv[2];
                        if (argc > 3) {
                                rel = argv[3];
                        }
                }
	}
	else {
                cases = 2000;
	}


	for (loops=0; loops<max_loop; ++loops) total += go(cases, base, rel, 1);
	printf("S Average time: %-9.4lf\n", total / loops);

	total = 0;

	for (loops=0; loops<max_loop; ++loops) total += go(cases, base, rel, 0);
	printf("Q Average time: %-9.4lf\n", total / loops);


        return 0;
}
