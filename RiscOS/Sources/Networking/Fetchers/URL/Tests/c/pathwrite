#include <stdio.h>
#include <string.h>
#include <stdlib.h>

/* URL resolution.
 *
 *  The code to perform URL resolution appears in this section and is limited to this
 *  section only.
 *
 * We will *try* to implement RFC1808 compliant resolution, but we have to remember
 * that we'll find all sorts of rubbish on the web and we must cope with this.
 *
 */

/* These functions deal with UNIX-like self-referential and parent directory references
 * in URLs (by removing them).
 */
static void rfc1808_step6a(char *const path)
{
	char *slash = path;

	while (strncmp(slash, "./", 2) == 0) {
	        memmove(slash, slash+2, strlen(slash+2) + 1);
	}

	for (;;) {
		slash = strchr(slash, '/');
		if (slash == NULL) return;
		if (slash[1] == '.' && slash[2] == '/') {
			const size_t len_to_move = strlen(slash+2) + 1;
			memmove(slash, slash+2, len_to_move);
		}
		else {
			++slash;
		}
	}
}

static void rfc1808_step6b(char *const path)
{
	char *const slash = strrchr(path, '/');
	if (slash != NULL) {
		if (slash[1] == '.' && slash[2] == '\0') {
			slash[1] = '\0';
		}
	}
}

static char *parseurl_find_previous_segment(char *const start, char *slash)
{
	char *prev = slash;

	if (slash == start) {
		/* Must leave this alone.   This is the initial component */
		/* eg.  http://some.host/../   */
		return NULL;
	}

	while (prev > start) {
		--prev;
		if (*prev != '/') continue;
		++prev;
		if (prev != slash) {
			if (strncmp(prev, "..", slash - prev) == 0) {
			        return NULL;
			}
		}
		break;
	}

	return prev;
}

static void rfc1808_step6c(char *const path)
{
        char *slash = path;
        
	for (;;) {
	        slash = strstr(slash, "/../");
	        if (slash == NULL) {
	                return;
	        }
	        else {
	                char *prev = parseurl_find_previous_segment(path, slash);
	                
	                if (prev == NULL) {
	                        ++slash;
	                        continue;
	                }
	                else {
	                        memmove(prev, slash + 4, strlen(slash+4) + 1);
	                        slash = prev;
	                }
	        }
	}
}

static void rfc1808_step6d(char *const path)
{
	char *const slash = strrchr(path, '/');

	if (slash == NULL || slash == path) return;

	if (slash[1] == '.' && slash[2] == '.' && slash[3] == '\0') {
		char *prev = parseurl_find_previous_segment(path, slash);
		if (prev) {
			*prev = '\0';
		}
	}
}

static void rfc1808_step6(char *const path)
{
	/* Step 6a - remove any ./ in the path */
	rfc1808_step6a(path);
	/* Step 6b - remove trailing /. */
	rfc1808_step6b(path);

	/* Step 6c - remove any <segment>/.. in the path */
	rfc1808_step6c(path);
	/* Step 6d - remove trailing <segment>/.. */
	rfc1808_step6d(path);
}


int main(int argc, char *argv[])
{
        char *simple = (argc > 1) ? argv[1] : "/some/path/to/simply/../not/./simplify";
	char *s = malloc(strlen(simple+1));
	
	if (s) {
                strcpy(s, simple);
                rfc1808_step6(s);
                printf("-->%s<--\n", s);
	}
	else {
                fprintf(stderr, "Memory fail\n");
	}
	return 0;
}
