/* -*-C-*-
 *
 * $Id$
 *
 * The URL module performs a number of tasks. These are related to providing
 * a protocol independant view of the WWW/FTP/Gopher etc. This routine
 * is used as a general data fetching system....
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include "sys/errno.h"
#include "swis.h"
#include "url.h"
#include "urlhdr.h"
#include "externs.h"
#include "protocol.h"
#include "utils.h"
#include "parseurl.h"
#include "enumerate.h"

/*
 * This macro, when defined, includes the code for the two debugging *-commands
 * You need to enable the commands in the CMHG header file too.
 * #define TRACE2
 */

#if CMHG_VERSION < 516
#define CMHG_CONST
#else
#define CMHG_CONST const
#endif

/*
 * These are the global variables  (see url.h)
 */
Proxy *global_proxy_list;
Proxy *no_proxy_list;
Client *client_list;

#ifndef ROM
extern int messages_file(void);
#endif

#ifndef ROM
#ifdef DEFINE_ERRNO
int __errno;
#endif
#endif


static int callback_pending_flag;

/* Sets clibrary_realloc_routine_is_buggy non-zero if RISC OS 3.1 or earlier (ie. ROM realloc is broken) */
static int clibrary_realloc_routine_is_buggy;
static void module_check_os_version(void)
{
        int os;
        (void) _swix(OS_Byte, _INR(0,2)|_OUT(1), 129, 0, 255, &os);
        clibrary_realloc_routine_is_buggy = (os <= 0xA4);
}


/*
 * Startup code. We just need to set up the initial proxy. Should probably
 * send out a service call saying that we are starting.
 */
_kernel_oserror *module_init(CMHG_CONST char *cmd_fail, int podule_base, void *pw)
{
	_kernel_oserror *e;

    	(void) cmd_fail;
    	(void) podule_base;
    	(void) pw;

        debug_initialise("URL", NULL, NULL);
        debug_set_device(DEBUGIT_OUTPUT);

    	callback_pending_flag = 0;

    	/* since we dont have any proxy services requested at this point */
    	global_proxy_list=NULL;
    	no_proxy_list=NULL;
    	client_list=NULL;

	module_check_os_version();

        #ifndef ROM
        e = _swix(ResourceFS_RegisterFiles, _IN(0), messages_file());
	if (e != NULL) return e;
	#endif

        if (getenv(Module_Title "$Path")) {
                e = messages_file_open(Module_Title ":Messages");
        }
        else {
        	e = messages_file_open("Resources:$.Resources.URL." "URL" ".Messages");
        }

        if (e != NULL) {
                #ifndef ROM
		(void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
                #endif
		return e;
	}

	if (_swix(OS_AddCallBack, _INR(0,1), callback_entry, pw) == NULL) {
		callback_pending_flag = 1;
	}

    	return NULL;
}

int callback_handler(_kernel_swi_regs *r, void *pw)
{
	(void) pw;
	(void) r;

	if (callback_pending_flag == 0) {
		return 1;
	}
	callback_pending_flag = 0;

	_swix(OS_ServiceCall, _INR(0,2), 0, URL_00, Module_VersionNumber);
	return 1;
}

/*
 * The finalisation code should probably send out a service call or
 * something saying that its going away!
 */
_kernel_oserror *module_kill(int fatal, int podule, void *pw)
{
    	(void) fatal;
    	(void) podule;

	if (callback_pending_flag) {
		(void) _swix(OS_RemoveCallBack, _INR(0,1), callback_entry, pw);
	        callback_pending_flag = 0;
	}

	messages_file_close();
        #ifndef ROM
	(void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
	#endif
	(void) _swix(OS_ServiceCall, _INR(0,2), 1, URL_00, Module_VersionNumber);

	return NULL;
}

/*
 * SWI handler.  Just the usual dispatch table.
 *
 */
_kernel_oserror *swi_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
    	(void) pw;

    	switch(swi_no) {
        	case URL_Register - URL_00: /* URL_Register */
			return(url_reg(r));  /* register.c */

        	case URL_GetURL - URL_00: /* URL_GetURL */
			return(geturl(r));  /* geturl.c */

		case URL_Status - URL_00: /* URL_Status */
			return(status(r));  /* status.c */

		case URL_ReadData- URL_00: /* URL_ReadData */
			return(readdata(r));  /* readdata.c */

		case URL_SetProxy - URL_00: /* URL_SetProxy */
			return(setproxy(r));  /* proxy.c */

		case URL_Stop - URL_00: /* URL_Stop */
			return(stop(r));  /* stop.c */

		case URL_Deregister - URL_00: /* URL_Deregister */
			return(deregister(r)); /* in register.c */

		case URL_ParseURL - URL_00: /* URL_ParseURL */
			return(parse_url(r)); /* parseurl.c */

		case URL_EnumerateSchemes - URL_00: /* URL_EnumerateSchemes */
			return(proto_enumerate(r)); /* in enumerate.c */

		case URL_EnumerateProxies - URL_00: /* URL_EnumerateProxies */
			return(proxy_enumerate(r)); /* proxy.c */

		case URL_ProtocolRegister - URL_00: /* Protocol Register */
			return (protocol_register(r)); /* protocol.c */

		case URL_ProtocolDeregister - URL_00: /* Protocol Deregister */
			return (protocol_deregister(r)); /* protocol.c */

		default:
			return error_BAD_SWI;
	}
}


/******************************************************************/
/* Client *find_client(unsigned int id)                           */
/******************************************************************/
/* Given a client's poll word identifier locate the session       */
/* control block for the client in the main control block list    */
/******************************************************************/
Client *find_client(unsigned int id)
{
	Client *list;

	/* try and find the client we are after */
	for (list = client_list; list; list=list->next) {
    		if (id == (unsigned int) &((list->client).poll_word)) {
      			return list;
                }
        }

  	return NULL;
}

#ifdef TRACE2
static _kernel_oserror *clients_list(void)
{
        Client *list;

        for (list = client_list; list; list=list->next) {
                Control *c = &list->client;
                printf("%p %08x %d %p %p %08x\n",
                	list, c->poll_word, c->had_connection,
                	c->proxy, c->no_proxy, c->protocol);
        }

        return NULL;
}

static void show_proxies(void *id, Proxy *p, int ch)
{
        if (p == NULL) {
                return;
        }
        else {
		printf("%p %c %-.50s   %s\n", id, ch, p->url_base ? p->url_base : "*",
			p->proxy ? p->proxy : "<NONE>");
        }
	show_proxies(id, p->next, ch);
}

static _kernel_oserror *show_proxy_list(void)
{
        Client *c;

        for (c = client_list; c; c=c->next) {
                show_proxies(c, c->client.no_proxy,  '-');
                show_proxies(c, c->client.proxy, '+');
        }

        show_proxies(c, no_proxy_list, '-');
        show_proxies(c, global_proxy_list, '+');

        return NULL;
}
#endif

_kernel_oserror *command_line_handler(CMHG_CONST char *a, int ac, int cmd_no, void *pw)
{

	(void) a;
	(void) ac;
	(void) pw;

	switch (cmd_no) {
	        case CMD_URLProtoShow:
  			return protocol_list();
		#ifdef TRACE2
  		case CMD_URLClients:
  			return clients_list();
  		case CMD_URLProxyShow:
                        return show_proxy_list();
  		#endif
  		default:
  			break;
  	}

  	return NULL;
}


/* RISC OS 3.1 SVC mode realloc is broken, so we must provide our own */
void *module_realloc(void *ptr, size_t size)
{
        dprintf(("realloc", "module_realloc(%p, %d)\n", ptr, size));
	if (!clibrary_realloc_routine_is_buggy) return realloc(ptr, size);

        if (ptr == NULL) {
                return malloc(size);
        }
        if (size == 0) {
                free(ptr);
		return NULL;
        }
	else {
	        const int *rma_block = ptr;
	        const size_t newsize = size - (rma_block[-1] - 4);
	        char *newptr;

		if (_swix(OS_Module, _IN(0)|_INR(2,3)|_OUT(2), 0xD, ptr, newsize, &newptr) != NULL) {
		        return NULL;
		}

		return newptr;
	}
}
