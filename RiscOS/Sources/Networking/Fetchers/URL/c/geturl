/* -*-C-*-
 *
 * $Version: networking $
 *
 * $Source$
 *
 * $Log$
 * Revision 1.1.1.1  1998/01/29 18:32:35  sbrodie
 * Import from SrcFiler of Browser fetchers
 *
 * Revision 1.1  95/09/08  09:34:51  pwain
 * Initial revision
 *
 *
 * Get a URL handler
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "url.h"
#include "externs.h"
#include "protocol.h"
#include "utils.h"
#include "parseurl.h"
#include "parseflags.h"
#include "generic.h"

static _kernel_oserror *get_process(Control *client, _kernel_swi_regs *r);
static int make_proxyed(const char *request, Proxy *proxy, char **address);

_kernel_oserror *geturl(_kernel_swi_regs *r)
{
    	Client *list = find_client(r->r[1]);
    	/* Return an error if we arent registered */
    	if (list == NULL) {
        	return make_error(url_ERROR_CLIENT_ID_NOT_FOUND, 0);
        }

    	if (list->client.protocol != 0) {
    	        return make_error(url_ERROR_ALREADY_CONNECTED, 0);
        }

    	/* try and do something */
    	return get_process(&(list->client),r);
}

static _kernel_oserror *get_process(Control *client, _kernel_swi_regs *r)
{
	Control c=*client;
	char *buffer=NULL;
	char *request=NULL;
	int no_proxy=-1;
	int done_proxy = 0;
	_kernel_oserror *error;
	int original_request_r3 = r->r[3];

	request = URL_canonicalise(parseurlflags_APPLY_HEX_ENCODE, (char *)r->r[3]);
	if (request == NULL) {
	        return make_error(url_ERROR_NO_PARSE_URL, 0);
	}
	buffer = NULL;

	#ifdef TRACE
	protocol_debug("GetURL: Canonical URL is `%s'\n", request);
	#endif

	/* first check to see if this is an explicit no-proxy request */
  	if (c.no_proxy != NULL) {
    		done_proxy = make_proxyed(request,c.no_proxy,&buffer);
    		no_proxy=1;
        }

	/* Now find out if there is a client proxy requirement. */
  	if(done_proxy == 0 && (c.proxy != NULL))  {
    		done_proxy = make_proxyed(request,c.proxy,&buffer);
    		no_proxy=0;
        }

	/* Now look at the global no_proxy bits */
  	if((done_proxy == 0) && (no_proxy_list != NULL)) {
    		done_proxy = make_proxyed(request,global_proxy_list,&buffer);
    		no_proxy=1;
        }

	/*
	 * Do the same for the global proxy list only if the session one
	 * didn't override it
	 */
	if((done_proxy == 0) && (global_proxy_list != NULL)) {
    		done_proxy=make_proxyed(request,global_proxy_list,&buffer);
    		no_proxy=0;
        }

	/*
	 * Ensure that the final check doesn't break things for URLs
	 * that are not proxied.
	 */

	/* Based upon what went on above, decide what URL to use */

	if (buffer && !*buffer) buffer = NULL;

	#ifdef TRACE
	protocol_debug("Request is `%s'\n", request);
	protocol_debug("Proxy   is `%s'\n", buffer?buffer:"<UNSET>");
	#endif

	/* Look for a protocol module */
  	client->protocol = protocol_get_swibase(buffer?buffer:request);

  	if (!client->protocol) {
    		if (request) free(request);
    		r->r[3] = original_request_r3;
    		return make_error(url_ERROR_NO_FETCHER_SERVICE, 0);
        }

	/* We now have a request that we can send on */
  	r->r[3] = (int)request;
  	if (buffer != NULL) {
	  	r->r[7] = (int)buffer;
  	        r->r[0] |= (1U<<31);
  	}
  	error = _kernel_swi(client->protocol + 0,r,r);
	if (buffer != NULL) {
	        if (error == NULL) {
		        r->r[0] &= ~(1U<<31);
		}
	}

	if (request) free(request);
	r->r[3] = original_request_r3;
  	return error;
}

int make_proxyed(const char *request, Proxy *proxy, char **host)
{
  	while (proxy != NULL) {
    		if (proxy->url_base==NULL) {
      			proxy=proxy->next;
      			continue;
                }

    		if (!strncmp(request, proxy->url_base, strlen(proxy->url_base))) {
			/* yes there is */
			#ifdef TRACE
			protocol_debug("Matched an entry (%s) => %s\n", proxy->url_base,
				proxy->proxy ? proxy->proxy : "<NONE>");
			#endif
		        *host = proxy->proxy;
		        return 1;
                }
    		proxy=proxy->next;
        }

  	return 0;
}
