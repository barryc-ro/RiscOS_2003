/* -*-C-*-
 *
 * $Version: networking $
 *
 * $Source$
 *
 * © Acorn Computers Ltd. 1995-1997
 *
 * Protocol handler. Deals with all the protocol modules;
 * registering, deregistering and assiging requests to the correct
 * SWI base.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"
#include "url.h"
#include "protocol.h"
#include "utils.h"
#include "externs.h"
#include "generic.h"
#include "protoflags.h"
#include "URLHdr.h"

typedef struct proto {
	char *url_base;		/* base that protocol deals with */
	unsigned int swi_base; 	/* SWI Base for module */
	unsigned int version;	/* Module version number */
	unsigned int port_no;	/* Default TCP port number for this protocol */
	int flags;		/* Protocol flags */
#ifdef DIRECTSWI
	unsigned int swientry;  /* Hack hack hack! */
	void *private_word;
#endif
	char info[50];		/* Small info string */
	struct proto *next;	/* wibble! */
} Protocol;

static Protocol *protocols=NULL;

static int proto_default_flags(const char *);
static unsigned int protocol_default_port_number(const char *url);

static void lower_string(char *ptr)
{
        while (*ptr) {
                if (isupper(*ptr)) {
                        *ptr = tolower(*ptr);
                }
                ++ptr;
        }
}

_kernel_oserror *protocol_register(_kernel_swi_regs *r)
{
        Protocol *proto;
	unsigned int swibase;
	char *protostr = Strdup((char *) r->r[2]);

	if (protostr == NULL) {
                return make_error(url_ERROR_MEMORY_EXHAUSTED, 0);
	}

	lower_string(protostr);

	/* check to see if a protocol already has the same URL_Base */
	swibase = protocol_get_swibase(protostr);
	if (swibase != 0) {
		return make_error(url_ERROR_PROTOCOL_EXISTS, 0);
	}

    	proto = malloc(sizeof(Protocol));
    	if (proto == NULL) {
    	        return make_error(url_ERROR_MEMORY_EXHAUSTED, 0);
    	}
    	else {
    	        proto->next=protocols;
    		protocols=proto;
    	}

    	/* save the swi base, protocol base & version number */
    	proto->swi_base = r->r[1];
    	proto->version = r->r[3];
    	proto->url_base = protostr;
#ifdef DIRECTSWI
	proto->swientry = 0;
#endif

	proto->info[0] = '\0';
    	if (r->r[4] != 0) {
      		strncat(proto->info, (char *) r->r[4], sizeof(proto->info));
    	}

	if (r->r[0] & 1) {
                proto->flags = r->r[5];
	}
	else {
	        proto->flags = proto_default_flags(proto->url_base);
	}

	if (r->r[0] & 2) {
	        proto->port_no = r->r[6];
	}
	else {
	        proto->port_no = protocol_default_port_number(proto->url_base);
	}

	_swix(OS_ServiceCall, _INR(0,4), 0, URL_00+1, proto->url_base, proto->swi_base,
		proto->info);

    	return NULL;
}

_kernel_oserror *protocol_deregister(_kernel_swi_regs *r)
{
	const unsigned int swibase = r->r[1];
	char *protostr = (r->r[0] & 1) ? (char *) r->r[2] : NULL;
	Protocol *proto;
	Protocol *owner=NULL;

	for (proto=protocols; proto; owner=proto, proto=proto->next) {
		if (proto->swi_base != swibase) continue;
		if (protostr != NULL) {
		        if (Strcmp_ci(proto->url_base, protostr) != 0) {
                                continue;
		        }
		}
		if (owner == NULL) {
			protocols = proto->next;
		}
		else {
			owner->next = proto->next;
		}
		_swix(OS_ServiceCall, _INR(0,4), 1, URL_00+1, proto->url_base, proto->swi_base,
			proto->info);
		free(proto->url_base);
		free(proto);
	}

	return NULL;
}

int protocol_get_details(int ctr, char **name, char **help, int *swibase, int *version)
{
	Protocol *proto;
        int count = 0;

        for (proto = protocols; proto && count < ctr; proto = proto->next) {
                ++count;
        }

	if (proto == NULL) {
	        return -1;
	}
	else {
	        *name = proto->url_base;
	        *help = proto->info;
	        *swibase = proto->swi_base;
	        *version = proto->version;
	        return count + 1;
	}
}

static const Protocol *protocol_locate(const char *url)
{
        const Protocol *proto;
	const size_t lenurl = strlen(url);

	for (proto=protocols; proto; proto=proto->next) {
	        size_t protolen = strlen(proto->url_base);
	        if (protolen == (lenurl + 1)) --protolen;
		if (!Strncmp_ci(proto->url_base, url, protolen)) {
			return proto;
		}
	}

	return NULL;
}

int protocol_get_flags(const char *url)
{
	const Protocol *proto = protocol_locate(url);
	return proto ? proto->flags : proto_default_flags(url);
}

#ifdef DIRECTSWI
static unsigned int protocol_find_swi_entry(const unsigned int result, const Protocol *proto_r)
{
        Protocol *proto = (Protocol *) proto_r;
        int mod = 0, inst = 0;

	if (proto->swientry == 0) for (;;) {
	        int *base;
	        void *pw;
	        _kernel_oserror *e = _swix(OS_Module, _INR(0,2)|_OUTR(1,4), 12, mod, inst,
	        	&mod, &inst, &base, &pw);
	       if (e) break;
	       if (base[7] == (proto->swi_base & ~63) && base[8] != 0) {
	               proto->private_word = pw;
	               proto->swientry = (int)(((char *)base) + base[8]);
	       }
	}

        return result;
}
#endif

#ifdef DIRECTSWI
_kernel_oserror *directswi_call(unsigned int swi, _kernel_swi_regs *in, _kernel_swi_regs *out)
{
	Protocol *proto;
	unsigned int swichunk = swi & ~15;

        for (proto = protocols; proto; proto = proto->next) {
                if (proto->swi_base == swichunk) {
                        extern _kernel_oserror *directswi(void **pw, unsigned int addr,
                        	unsigned int swi, _kernel_swi_regs *, _kernel_swi_regs *);
                        return directswi(&proto->private_word, proto->swientry, swi, in, out);
                }
        }

        return _kernel_swi(swi, in, out);
}
#endif

/*
 * Given a URL, scan through the list of avaliable protocols and
 * establish which SWI base to use.
 */
unsigned int protocol_get_swibase(const char *url)
{
	const Protocol *proto = protocol_locate(url);
	const unsigned int result = proto ? proto->swi_base : 0;
#ifdef DIRECTSWI
	return protocol_find_swi_entry(result, proto);
#else
	return result;
#endif
}

_kernel_oserror *protocol_list(void)
{
        const char *buffer = NULL;
        size_t len;
        _kernel_oserror *e;

	if (protocols==NULL) {
	        e = read_message("PS00", &buffer, &len);
	        if (e != NULL) return e;
                printf("%.*s\n", len, buffer);
	}
	else {
	        e = read_message("PS01", &buffer, &len);
	        if (e != NULL) {
	                return e;
	        }
	        else {
			const Protocol *proto;

			printf("%.*s\n", len, buffer);
			for (len=0; len<8; ++len) {
			        printf("==========");
			}
			printf("\n");

			printf("%-10s  0x%5x    %03d    %s\n",
				" --- ", URL_00, Module_VersionNumber, Module_Help
				" © Acorn 1997-8 (Built: " Module_Date ")");

			for (proto=protocols; proto; proto=proto->next) {
			printf("%-10s  0x%5x    %03d    %s\n",
				proto->url_base,proto->swi_base,
				proto->version, proto->info);
		        }
	        }
	}

	return NULL;
}

static struct proto_default_details {
        const char *scheme;
        int flags;
        unsigned int port_no;
} proto_default_setups[] = {
        { "mailto:", 	proto_HAS_NO_NETLOC,  				25 },
        { "telnet:", 	proto_DOES_NOT_PARSE, 				23 },
        { "finger:", 	proto_DOES_NOT_PARSE, 				79 },
        { "file:"  , 	proto_HOST_ALLOW_HASH | proto_HAS_NO_NETLOC, 	0 },
        { "filer_"  , 	proto_HOST_ALLOW_HASH | proto_HAS_NO_NETLOC, 	0 },
        { "local:"  , 	proto_HOST_ALLOW_HASH | proto_HAS_NO_NETLOC, 	0 },
        { "gopher:", 	proto_PATH_NOT_UNIX,  				70 },
        { "ftp:", 	proto_HAS_USER,  				21 },
        { "http:", 	proto_STRIP_DOT_DOT,  				80 },
        { "https:", 	proto_STRIP_DOT_DOT,  				443 },
        { "whois:",	proto_DOES_NOT_PARSE,				43 },
        { "ldap:",      proto_PATH_NOT_UNIX,                            389 },
        { "data:",      proto_DOES_NOT_PARSE,                           0 },
        { NULL,		0,						0  }
};


static struct proto_default_details *proto_find_default_settings(const char *url)
{
        struct proto_default_details *proto;
        char *colon = strchr(url, ':');
        size_t length;

        if (!colon) colon = strchr(url, '\0') - 1;
        length = colon + 1 - url;
        if (length < 2) return 0;

        for (proto=proto_default_setups; proto->scheme; proto++) {
                if (strncmp(proto->scheme, url, length) == 0) return proto;
        }

        return proto;
}

static int proto_default_flags(const char *url)
{
        struct proto_default_details *proto = proto_find_default_settings(url);
        return proto ? proto->flags : 0;
}

static unsigned int protocol_default_port_number(const char *url)
{
        struct proto_default_details *proto = proto_find_default_settings(url);
        return proto ? proto->port_no : 0U;
}

unsigned int protocol_get_default_port(const char *url)
{
        const Protocol *p = protocol_locate(url);

	if (p) {
	        if (p->port_no != 0) return p->port_no;
	}

	return protocol_default_port_number(url);
}
