/*
 * URL (c.parseurl)
 *
 * © Acorn Computers Ltd. 1997-1998
 */
#include <stdio.h>
#include <stddef.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"
#include "parseurl.h"
#include "generic.h"
#include "URLstruct.h"
#include "URLHdr.h"
#include "protocol.h"
#include "socklib.h"
#include "netdb.h"
#include "url.h"
#include "utils.h"
#include "protoflags.h"
#include "parseflags.h"
#include "externs.h"


/*#define TESTLOOP*/
/*#define FASTHACK*/

/*#define STDDEB(args) ((void)printf args)*/
#define STDDEB(args) ((void)0)


#ifdef FASTHACK
static char osmodule_buffer[32*1024];
#endif

/* See RFC1738 and RFC1808 for details on URL parsing and resolution */

extern _kernel_oserror *URL_find_lengths(int flags, const char *url, const char *rel, URL *u);
extern _kernel_oserror *URL_find_data(int flags, const char *url, const char *rel, URL *u);
extern _kernel_oserror *URL_compose_from_components(int flags, URL *u);

static URL *resolve(URL *u, URL *v, URL *result);
static void rewrite_minimal(const URL *rel_pointer, URL *base_pointer, char **minimal);
static _kernel_oserror *parse_url_quick(_kernel_swi_regs *r);

#define field_count (sizeof(URL)/sizeof(size_t))


/**************************************************************************************/
/**************************************************************************************/
/**************************************************************************************/

/* URL resolution memory management
 *
 *  The code to manage URL resolution memory appears in this section and is limited to this
 *  section only.
 *
 *  Usage of this code in this source module produces a 3500% speed increase in resolving
 *  compared with calling the C library's malloc/realloc/free routines (which call OS_Module)
 *  so it is definitely worth the code.  The code is extremely quick.
 *
 *  On entry to SWI URL_ParseURL, a buffer is allocated from the RMA.  The size is estimated as:
 *	const size_t workspace_size = ((url?strlen(url):0) + (rel?strlen(rel):0) + 4) * 3 + 4*sizeof(URL)
 *		+ field_count * 3 * 4 ;
 *
 *  This should be enough for any resolutions, although to be safe, these memory routines detect the
 *  out of memory case and really do call the C library for blocks which cannot be satisfied from the
 *  single block of memory.
 *
 *  The allocation strategy is trivially simple (and the freeing strategy even more trivial).
 *
 *  When initialised, the Low Water Mark (LWM) is initialised to point to the first byte of the
 *  workspace and the High Water Mark (HWM) to the byte after the last byte of workspace available.
 *  A request for block of memory of N bytes is treated as follows:
 *
 *     N = (N + 3) & ~3                         // Round up to multiple of 4 - necessary to imitate malloc
 *     if ((HWM - LWM) < N)
 *         Return via C library malloc routine  // Wasn't enough space left
 *     else {
 *         Return value is LWM                  // LWM is always already setup for the return from here
 *         LWM += N                             // Increment low water mark
 *     }
 *
 *  A request to free a block P is treated as follows:
 *
 *     if (P >= LWM && P < HWM)
 *         Return immediately   // Was in our workspace block, do nothing.
 *     else
 *         Return via C library free routine
 *
 *  Thus data is never reclaimed from the workspace block.  The workspace block is freed upon the
 *  exit from the SWI URL_ParseURL handler function.
 *
 *  Calls to allocate 0 bytes are guaranteed to succeed and to return a valid pointer which is not NULL.
 *
 */

/* This structure is used to optimise the memory allocation strategy to avoid requiring a huge
 * amount of OS_Module SWI calls to allocate, reallocate and free memory
 */
static struct {
	char	*workspace;
	char    *lwm;
	char    *hwm;
	int      hex_escape;
} workspace_details;

static void *parseurl_alloc(const size_t amount_real)
{
	const size_t amount = (amount_real + 3) & ~3;

	if (!workspace_details.workspace || ((workspace_details.hwm - workspace_details.lwm) < amount)) {
		void *result;
		STDDEB(("Calling malloc(%d) (%d of %d remain in pool) --> ", amount,
			(workspace_details.hwm - workspace_details.lwm),
			(workspace_details.hwm - workspace_details.workspace)));
		result = malloc(amount);
		STDDEB(("%p\n", result));
		return result;
	}
	else {
	        void *const result = workspace_details.lwm;
	        workspace_details.lwm += amount;
	        return result;
	}
}

static void parseurl_free(void *_ptr)
{
        char *const ptr = _ptr;

	/* free(NULL) does nothing */
	if (ptr == NULL) return;

	if (workspace_details.workspace && ptr >= workspace_details.workspace && ptr < workspace_details.hwm) {
		/* This block was in our shared space */
		return;
	}
	/* We must have really allocated this one! */
	STDDEB(("Calling free(%p)\n", ptr));
	free(ptr);
}

static void *parseurl_init_mem(const size_t amount)
{
	if (workspace_details.workspace == NULL) {
		#ifdef FASTHACK
		workspace_details.workspace = osmodule_buffer;
		workspace_details.lwm = workspace_details.workspace;
		workspace_details.hwm = workspace_details.lwm + sizeof(osmodule_buffer);
		#else
		workspace_details.workspace = malloc(amount);
		workspace_details.lwm = workspace_details.workspace;
		workspace_details.hwm = workspace_details.lwm + amount;
		#endif

		STDDEB(("Allocating %d bytes workspace (%p - %p)\n", amount,
			workspace_details.workspace, workspace_details.hwm));
	}
	else {
		STDDEB(("!! Attempt to allocate %d bytes when existing memory is still in use\n", amount));
	}

	return workspace_details.workspace;
}

static void parseurl_end_mem(void)
{
	if (workspace_details.workspace != NULL) {
		STDDEB(("Deallocating workspace %p-%p\n", workspace_details.workspace, workspace_details.hwm));
		#ifndef FASTHACK
		free(workspace_details.workspace);
		#endif
	}
	workspace_details.workspace = NULL;
}

static char *parseurl_Strdup(const char *ptr)
{
	if (ptr == NULL) {
		return NULL;
	}
	else {
		const size_t len = strlen(ptr) + 1;
		char *result = parseurl_alloc(len);
		if (result) return memcpy(result, ptr, len);
		return result;
	}
}

#define free(ptr) ERROR Do not call free
#define malloc(size) ERROR Do not call malloc
#define calloc(c,size) ERROR Do not call malloc
#define realloc(p,size) ERROR Do not call realloc
#undef module_realloc
#define module_realloc(p,size) ERROR Do not call module_realloc


/**************************************************************************************/
/**************************************************************************************/
/**************************************************************************************/

/* SWI handler for URL_ParseURL.  It takes the user structure and maps it onto a local "u" so that
 * the routines can read/write all the fields safely.  On exit, it remaps the local "u" back onto
 * the user buffer.  Both copies look at the R5 entry value to determine how many fields were provided
 * in the client's buffer
 */
static _kernel_oserror *parse_url_main(_kernel_swi_regs *r)
{
	int flags = r->r[0];
	int reason_code = r->r[1];
	char *url = (char *) r->r[2];
	char *rel = (char *) r->r[3];
	URL *user_u = (URL *) r->r[4];
	const size_t count = (flags & parseurlflags_FIELDCOUNT_IN_R5) ? r->r[5] : 10;
	URL u;
	_kernel_oserror *e;

	r->r[0] = 0;

	if (count <= field_count) {
		memcpy(&u, user_u, count * sizeof(size_t));
		if (count < field_count) {
			memset(&u.len[count], '\0', sizeof(size_t) * (field_count - count));
		}
	}
	else {
		memcpy(&u, user_u, field_count);
	}

	switch (reason_code) {
		case url_parseurl_buffer_lengths:
			e = URL_find_lengths(flags, url, rel, &u);
			if (e == NULL) {
				if (count > field_count) {
					memset(user_u + 1, '\0', sizeof(size_t) * (count - field_count));
				}
			}
			break;
		case url_parseurl_return_data:
			e = URL_find_data(flags, url, rel, &u);
			break;
		case url_parseurl_compose_from_components:
			e = URL_compose_from_components(flags, &u);
			break;
		default:
			return error_BAD_SWI;
	}

	if (e == NULL) {
		if (count <= field_count) {
			memcpy(user_u, &u, sizeof(size_t) * count);
		}
		else {
			memcpy(user_u, &u, sizeof(u));
		}
	}

	parseurl_end_mem();
	return e;
}


_kernel_oserror *parse_url(_kernel_swi_regs *r)
{
	workspace_details.workspace = NULL;
	workspace_details.hex_escape = (r->r[0] & parseurlflags_APPLY_HEX_ENCODE) != 0;

	if (r->r[1] == url_parseurl_quick_resolve) {
		return parse_url_quick(r);
	}
	else {
	        #ifdef TESTLOOP
	        int i;
		_swix(OS_ReadMonotonicTime, _OUT(0), &r->r[7]);
	        for (i=0; i<1000; ++i) {
	                _kernel_swi_regs r2 = *r;
	                parse_url_main(&r2);
	        }
		_swix(OS_ReadMonotonicTime, _OUT(0), &r->r[8]);

	        #endif
		return parse_url_main(r);
	}
}

/* This function effects "strlen(strcpy(dest, src))" but without the need
 * to read the destination string again after the copy.  The benefits of
 * the C library's optimised strcpy are unlikely to be of much value given
 * that the strings we are copying are unlikely to be similarly aligned
 * and are most probably short anyway.  Use of this routine instead of
 * the original 'dest += sprintf(dest, "%s", src)' code, improves rewrite_full
 * performance by around 7%.
 */
static size_t len_strcpy(char *dest, const char *src)
{
	size_t count = 0;

	for (;;) {
		const char p = (*dest++ = *src++);

		if (!p) return count;
		++count;
	}
}

/* Force string to lower-case */
static void Strlwr(char *ptr)
{
	while (*ptr) {
		if (isupper(*ptr)) *ptr = tolower(*ptr);
		++ptr;
	}
}

/* This function releases all the memory allocated for a URL.  It does not free the URL object
 * itself.  This is in order to allow local variables to use this to free up the data members.
 * Dynamically allocated URL objects can be free'd with:  parseurl_free(destroy_url(u))
 */
static URL *destroy_url(URL *const u_pointer)
{
	if (u_pointer) {
		struct URL_ptrs *const u = &u_pointer->data;
		parseurl_free(u->scheme);
		parseurl_free(u->host);
		parseurl_free(u->port);
		parseurl_free(u->path);
		parseurl_free(u->query);
		parseurl_free(u->fragment);
		parseurl_free(u->user);
		parseurl_free(u->password);
		parseurl_free(u->account);
		parseurl_free(u->full);
		parseurl_free(u->minimal);
	}

	return u_pointer;
}

/* This function looks at the <net_loc> portion of a URL (pointed to by "sep") and fills in
 * the appropriate fields in the u_pointer structure (user, password, account, host, port)
 * based on the parse of "sep".
 */
static void parse_url_host(URL *u_pointer, char *sep)
{
	struct URL_ptrs *u = &u_pointer->data;
	char *at = strchr(sep, '@');
	char *hostpart;
	char *colon;

	if (at != NULL) {
		*at++ = '\0';
		hostpart = at;
	}
	else {
		hostpart = sep;
	}

	colon = strchr(hostpart, ':');
	if (colon != NULL) {
		*colon++ = '\0';
		if (*colon != '\0') {
			u->port = parseurl_Strdup(colon);
		}
		else {
			u->port = NULL;
		}
	}
	u->host = parseurl_Strdup(hostpart);
	if (at == NULL) return;

	colon = strchr(sep, ':');
	if (colon == NULL) {
		u->user = parseurl_Strdup(sep);
		return;
	}
	*colon++ = '\0';
	u->user = parseurl_Strdup(sep);
	sep = colon;
	colon = strchr(sep, ':');
	if (colon == NULL) {
		u->password = parseurl_Strdup(sep);
		return;
	}
	*colon++ = '\0';
	u->password = parseurl_Strdup(sep);
	sep = colon;
	u->account = parseurl_Strdup(colon);
}

/* This function returns non-zero if the given string is a legal scheme identifier.  It is
 * slightly extended over RFC1738/RFC1808 to allow underscore (_) in the scheme (in order to
 * catch and allow filer_opendir and filer_run)
 */
static int valid_protocol(char *tmp)
{
	if (!*tmp) return 1;
	if (!(isalnum(*tmp) || *tmp == '+' || *tmp == '-' || *tmp == '.' || *tmp == '_' || *tmp == '!')) return 0;
	return valid_protocol(tmp+1);
}

/* This function is used to detect whether # characters are allowed in the "host" field.  This is
 * necessary in the case of file: URLs to support Acorn filing systems such as NetFS, or any other
 * FS which uses special fields.
 */
#ifndef TEST
static int local_protocol(const char *tmp)
{
	return protocol_get_flags(tmp) & proto_HOST_ALLOW_HASH;
}
#endif


#define REQUIRES_HEX_ESCAPING(p) (workspace_details.hex_escape && (((p) == 0x7f) || ((p) <= ' ')))

/* This function is used to count the extra characters required for hex-escaping a path string */
static size_t hex_escape_len(size_t running_total, const char *path)
{
        const char p = *path++;

        if (p == 0) return running_total;
        if (REQUIRES_HEX_ESCAPING(p)) return hex_escape_len(running_total+2, path);
	return hex_escape_len(running_total, path);
}

/* Copies a path applying the hex encoding as necessary.  This routine compiles into an efficient
 * copier despite the size of this source */
static size_t hex_escape_path_cpy(char *dest, const char *src)
{
	size_t count = 0;

	for (;;) {
		const char p = *src++;

		if (!p) {
		        *dest = p;
		        return count;
		}

		if (REQUIRES_HEX_ESCAPING(p)) {
		        const register unsigned int ch = (unsigned int) p;
		        static const char hex_chars[16] = {
		                '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
		        };
		        *dest++ = '%';
		        *dest++ = hex_chars[ch / 16];
		        *dest++ = hex_chars[ch % 16];
		        count += 3;
		}
		else {
		        *dest++ = p;
			++count;
		}
	}
}

static char *hex_strdup_path(const char *src)
{
        char *dest;

	if (src == NULL) {
	        return NULL;
	}
	else {
        	dest = parseurl_alloc(hex_escape_len(0, src) + strlen(src) + 1);
                if (dest == NULL) return NULL;
                (void) hex_escape_path_cpy(dest, src);
		return dest;
	}
}


/* This function is capable of reconsituting the "full" field of a URL object.  It examines
 * all the constituent parts and generates the fully-qualified URL.
 */
static void rewrite_full(URL *u_pointer)
{
	struct URL_ptrs *u = &u_pointer->data;
	char *ptr;
	size_t length = 0;
	int is_local;

	if (u->scheme != NULL) {
		length += strlen(u->scheme) + sizeof("://") - 1;
		is_local = local_protocol(u->scheme);
	}
	else {
		is_local = 0;
		length += 2;
	}

	if (u->port != NULL) {
		const int port = atoi(u->port);
		/* Elide the port number if it is already the default. */
		if (port > 0) {
		        const int known_port = (int) protocol_get_default_port(u->scheme);
		        if (known_port == port) {
		                parseurl_free(u->port);
		                u->port = NULL;
		        }
		        else if (known_port == 0) {
				struct servent *se = getservbyname(u->scheme, "tcp");
				if (se != NULL) {
					if (port == htons(se->s_port)) {
						parseurl_free(u->port);
						u->port = NULL;
					}
				}
		        }
		}
	}

	if (u->user != NULL) {
		length += strlen(u->user) + sizeof(":@") - 1;
		if (u->password != NULL) {
			length += strlen(u->password) + sizeof(":") -1;
			if (u->account != NULL) {
				length += strlen(u->account);
			}
		}
	}

	if (u->host != NULL) {
		length += strlen(u->host) + sizeof("/") - 1;
	}
	length += u->port ? strlen(u->port)+1 : 0;
	if (u->path != NULL) {
		length += strlen(u->path) + hex_escape_len(0, u->path);
	}
	if (u->query != NULL) {
		length += strlen(u->query) + sizeof("?") - 1;
	}
	if (u->fragment != NULL) {
		length += strlen(u->fragment) + sizeof("#") - 1;
	}
	++length;

	parseurl_free(u->full);
	u->full = parseurl_alloc(length);
	if (u->full == NULL) {
		return;
	}

	ptr = u->full;
	if (u->scheme != NULL) {
		ptr += len_strcpy(ptr, u->scheme);
		*ptr++ = ':';
		if (is_local) {
			*ptr++ = '/';
		}
		else if (u->host || u->user) {
			*ptr++ = '/';
			*ptr++ = '/';
		}
	}
	if (u->user != NULL) {
		if (u->scheme == NULL) {
			*ptr++ = '/';
			*ptr++ = '/';
		}
		ptr += len_strcpy(ptr, u->user);
		if (u->password != NULL) {
			*ptr++ = ':';
			ptr += len_strcpy(ptr, u->password);
			if (u->account != NULL) {
				*ptr++ = ':';
				ptr += len_strcpy(ptr, u->account);
			}
		}
		*ptr++ = '@';
	}

	if (u->host != NULL) {
		if (ptr == u->full) {
			*ptr++ = '/';
			*ptr++ = '/';
		}
		ptr += len_strcpy(ptr, u->host);
		if (u->port != NULL) {
			*ptr++ = ':';
			ptr += len_strcpy(ptr, u->port);
		}
		*ptr++ = '/';
	}
	if (u->path != NULL && u->path[0] != '\0') {
		ptr += hex_escape_path_cpy(ptr, u->path);
	}
	if (u->query != NULL) {
		*ptr++ = '?';
		ptr += len_strcpy(ptr, u->query);
	}
	if (u->fragment != NULL) {
		*ptr++ = '#';
		ptr += len_strcpy(ptr, u->fragment);
	}

	*ptr = '\0';
}

static char *parseurl_check_hash_in_fs_specifier(const char *uri, char *fragment, struct URL_ptrs *base)
{
	const ptrdiff_t frag_offset = (fragment - uri);
	const size_t initial = strcspn(uri, ":/");
	size_t slash_count = strspn(uri + initial, "/");
	const int relative_to_local_base = (base && base->scheme && local_protocol(base->scheme));


	/* uri[initial] can be three different things:
	 *   '\0'  : there were no colons and no slashes in the path.
	 *   ':'   : the initial segment MAY be a scheme specifier (or a RISC OS FS name)
	 *   '/'   : the initial segment appears to be a relative path
	 */

	if (uri[initial] == '\0') {
		return fragment;
	}
	else {
		void *fs_block;
		const char *proposed;

		if (uri[initial] == '/' && initial == 0) {
			size_t next_seg;
			proposed = uri + slash_count;
			next_seg = strcspn(proposed, ":/");
			if (proposed[next_seg] != ':') {
				return fragment;
			}
			if (relative_to_local_base) {
				/* Have to take this into account too */
			}
		}
		else if (uri[initial] == ':' && frag_offset < initial) {
			proposed = uri;
		}
		else if (uri[initial] == ':') {
			/* fragment came after the scheme specifier */
			if (!local_protocol(uri)) {
				return fragment;
			}
			else {
				proposed = uri + initial + 1 + strspn(uri + initial + 1, "/");
			}
		}
		else {
			proposed = NULL;
		}

		if (proposed) {
			if (_swix(OS_FSControl, _INR(0,2)|_OUT(2), 13, proposed, 0, &fs_block) || !fs_block) {
				/* OS_FSControl SWI failed.  :-(   Obviously not an FS ...
				 * or possibly the pointer returned in R2 was NULL, so definitely not.
				 */
				return fragment;
			}
			/* It was a filing system */
			if (uri[initial] == ':') {
				char *next_colon = strchr(proposed, ':');
				if (next_colon) {
					return strchr(next_colon, '#');
				}
			}
			else {
				const char *colon = strchr(uri + initial, ':');

				if (!colon) {
					/* There isn't a further colon */
					return fragment;
				}
				else {
					return strchr(colon + 1, '#');
				}
			}
			/*NOTREACHED*/
		}
	}

	return fragment;
}

/* This routine parses the URL specified in ptr and stores the fields in the object
 * pointed to by u_pointer.  The contents of the object pointed to by u_pointer are
 * ignored on entry (and are immediately destroyed).
 */
static URL *urlresolve_parse(URL *u_pointer, const char *ptr, URL *base_pointer)
{
	struct URL_ptrs *base = base_pointer ? &base_pointer->data : NULL;
	struct URL_ptrs *u = &u_pointer->data;
	char *sep;
	char *query;
	char *fragment;
	char *slash;
	int is_local = 0;

	memset(u, '\0', sizeof(*u));
	u->full = parseurl_Strdup(ptr);

	fragment = strchr(u->full, '#');
	if (fragment != NULL) {
		/* Need to check local protocols to determine location of # character */
		fragment = parseurl_check_hash_in_fs_specifier(u->full, fragment, base);
		if (fragment) {
			u->fragment = parseurl_Strdup(fragment+1);
			*fragment = '\0';
		}
	}

	query = strchr(u->full, '?');
	if (query != NULL) {
		u->query = parseurl_Strdup(query+1);
		*query = '\0';
	}

	slash = strchr(u->full, '/');
	sep = strchr(u->full, ':');
	if (slash && sep && slash < sep) sep = NULL;

	if (!(sep == NULL || u->full[0] == ':')) {
		/* OK, we did find a non-empty scheme part */
		*sep++ = '\0';
		Strlwr(u->full);
		if (valid_protocol(u->full) == 0) {
			return NULL;
		}
		u->scheme = parseurl_Strdup(u->full);
		if (u->scheme != NULL) {
			Strlwr(u->scheme);
			is_local = local_protocol(u->scheme);
		}
	}
	else {
		sep = u->full;
	}

	if (*sep == '/' && sep[1] == '/' && is_local) {
		/* Skip extraneous / leading into local UNIX-ified pathname */
		while (sep[1] == '/') ++sep;
	}

	if (*sep == '/' && sep[1] == '/' && u->scheme != NULL) {
		if (protocol_get_flags(u->scheme) & proto_HAS_NO_NETLOC) {
		        /* No NetLoc in this protocol - skip the double-slash */
		        sep += 2;
		}
	}

	if (*sep == '/' && sep[1] == '/') {
		/* Found a host name specifier */
		sep+=2; /* Skip leading /'s */
		if (*sep != '\0' && *sep != '/') {
			/* We did find a hostname */
			char *eohost = strchr(sep, '/');
			if (eohost) {
				*eohost = '\0';
			}
			parse_url_host(u_pointer, sep);
			if (eohost) {
				sep = eohost;
				*sep = '/';
			}
			else {
				sep = eohost = strchr(sep, '\0');
			}
			if (u->host != NULL) Strlwr(u->host);
		}
		if (*sep != '\0') {
			/* There was a path too */
			if (sep[0] == '/') {
				u->path = hex_strdup_path(sep+1);
			}
			else {
				u->path = hex_strdup_path(sep);
			}
		}
		else {
			u->path = parseurl_Strdup("");
		}
	}
	else {
		if (*sep == '/' && (u->scheme || u->host)) {
			/* scheme://host part was empty, therefore this was rooted relative */
			u->path = hex_strdup_path(sep+1);
		}
		else {
			u->path = hex_strdup_path(sep);
		}
	}

	if (u->path && *u->path == '\0') {
		parseurl_free(u->path);
		u->path = NULL;
	}

	rewrite_full(u_pointer);

	return u_pointer;
}

/* Allocates a new URL object */
static URL *url_alloc(void)
{
	URL *u = parseurl_alloc(sizeof(URL));
	if (u) memset(u, '\0', sizeof(URL));
	return u;
}

/* The urldup function duplicates a URL.  It performs a deep copy */
static URL *urldup_data(const URL *u_pointer, URL *v_pointer)
{
	struct URL_ptrs *v;
	const struct URL_ptrs *u = &u_pointer->data;

	if (u_pointer == NULL) return NULL;
	if (v_pointer == NULL) return NULL;
	v = &v_pointer->data;
	v->scheme = parseurl_Strdup(u->scheme);
	v->host = parseurl_Strdup(u->host);
	v->port = parseurl_Strdup(u->port);
	v->path = parseurl_Strdup(u->path);
	v->query = parseurl_Strdup(u->query);
	v->fragment = parseurl_Strdup(u->fragment);
	v->user = parseurl_Strdup(u->user);
	v->password = parseurl_Strdup(u->password);
	v->account = parseurl_Strdup(u->account);
	v->full = NULL;
	v->minimal = NULL;
	rewrite_full(v_pointer);
	return v_pointer;
}

/* This function must ensure that any allocated memory is pointed to by a field
 * of the result parameter or is parseurl_freed before returning
 */
static URL *resolve_params(const char *url, const char *rel)
{
	const size_t workspace_size = ((url?strlen(url):0) + (rel?strlen(rel):0) + 4) * 3 + 4*sizeof(URL)
		+ field_count * 3 * 4 ;
	void *ptr;
	URL *u, *v, *result;

	ptr = parseurl_init_mem(workspace_size);
	if (ptr == NULL) {
		/* If this failed, then we are more than likely to fail further during operation,
		 * so we give up *now* rather than wait to a more inconvenient moment.
		 */
		return NULL;
	}

	u = parseurl_alloc(sizeof(URL));
	v = parseurl_alloc(sizeof(URL));

	if (u == NULL || v == NULL) {
		parseurl_free(u);
		parseurl_free(v);
		return NULL;
	}

	if (urlresolve_parse(u, url, NULL) == NULL) {
		parseurl_free(destroy_url(u));
		parseurl_free(v);
		return NULL;
	}

	if (rel != NULL) {
		(void) urlresolve_parse(v, rel, u);
		result = url_alloc();
		if (result != NULL && resolve(u, v, result)) {
			rewrite_minimal(result, u, &result->data.minimal);
			parseurl_free(destroy_url(u));
		}
		else {
			result = u;
		}
		parseurl_free(destroy_url(v));
	}
	else {
		result = u;
		parseurl_free(v);
	}

	rewrite_full(result);
	return result;
}

_kernel_oserror *URL_find_lengths(int flags, const char *url, const char *rel, URL *u)
{
	URL *ur = resolve_params(url, rel);
	_kernel_oserror *result = NULL;

	workspace_details.hex_escape = (flags & parseurlflags_APPLY_HEX_ENCODE) != 0;

	if (ur == NULL) {
		#ifdef TEST
		return 0;
		#else
		return make_error(url_ERROR_NO_PARSE_URL, 0);
		#endif
	}
	else {
		size_t loop;

		for (loop=0; loop<(sizeof(*u)/sizeof(size_t)); ++loop) {
			u->len[loop] = ur->field[loop] ? strlen(ur->field[loop])+1 : 0;
		}
	}

	parseurl_free(destroy_url(ur));
	return result;
}

_kernel_oserror *URL_find_data(int flags, const char *url, const char *rel, URL *u)
{
	URL *ur = resolve_params(url, rel);
	_kernel_oserror *result = NULL;

	workspace_details.hex_escape = (flags & parseurlflags_APPLY_HEX_ENCODE) != 0;

	if (ur == NULL) {
		#ifdef TEST
		return 0;
		#else
		return make_error(url_ERROR_NO_PARSE_URL, 0);
		#endif
	}
	else {
		size_t loop;

		for (loop=0; loop<(sizeof(*u)/sizeof(size_t)); ++loop) {
			if (ur->field[loop] != NULL && u->field[loop] != NULL) {
				/* Safe to strcpy - if user hasn't allocated as much RAM as we
				 * demanded, then that's just tough.  We told the caller how much
				 * we wanted during the previous find lengths call ....
				 */
				strcpy(u->field[loop], ur->field[loop]);
			}
		}
	}

	parseurl_free(destroy_url(ur));
	return result;
}

_kernel_oserror *URL_compose_from_components(int flags, URL *u)
{
	char *ptr = u->data.full;

	workspace_details.hex_escape = (flags & parseurlflags_APPLY_HEX_ENCODE) != 0;

	parseurl_init_mem(256);
	rewrite_full(u);
	if (u->data.full == 0) {
		#ifdef TEST
		return 0;
		#else
		return make_error(url_ERROR_NO_PARSE_URL, 0);
		#endif
	}
	if (ptr == 0) {
		char *full = u->data.full;
		u->lengths.full = 1 + strlen(full);
		parseurl_free(full);
	}
	return NULL;
}

/* Handles URL_ParseURL with R1 = URL_ParseURL_QuickResolve (3) */
static _kernel_oserror *parse_url_quick(_kernel_swi_regs *r)
{
        int flags = r->r[0];
	char *url = (char *) r->r[2];
	char *rel = (char *) r->r[3];
	char *buffer = (char *) r->r[4];
	const size_t bufsize = r->r[5];
	URL *u;

	workspace_details.hex_escape = (flags & parseurlflags_APPLY_HEX_ENCODE) != 0;

	u = resolve_params(url, rel);
	if (u == NULL || u->data.full == NULL) {
		if (u != NULL) {
			parseurl_free(destroy_url(u));
		}
		parseurl_end_mem();
		return make_error(url_ERROR_NO_PARSE_URL, 0);
	}
	else {
		strncpy(buffer, u->data.full, bufsize);
		r->r[5] -= (1 + strlen(u->data.full));
		parseurl_free(destroy_url(u));
		parseurl_end_mem();
		return NULL;
	}
}

/* This function is going to be responsible for generating the minimal difference
 * between two fully-qualified URLs.  The answer is to be stored in the rel_pointer
 * structure.
 */
static void rewrite_minimal(const URL *rel_pointer, URL *base_pointer, char **minimal)
{
	const struct URL_ptrs *rel = &rel_pointer->data;
	struct URL_ptrs *base = &base_pointer->data;

	if (rel->scheme == NULL || base->scheme == NULL || strcmp(rel->scheme, base->scheme) != 0) {
		*minimal = NULL; /*parseurl_Strdup(rel->full);*/
		return;
	}
	else {
		*minimal = NULL;
	}

	/* To get here, the two schemes were non-NULL and they matched */
}

/**************************************************************************************/
/**************************************************************************************/
/**************************************************************************************/

/* URL resolution.
 *
 *  The code to perform URL resolution appears in this section and is limited to this
 *  section only.
 *
 * We will *try* to implement RFC1808 compliant resolution, but we have to remember
 * that we'll find all sorts of rubbish on the web and we must cope with this.
 *
 */

/* These functions deal with UNIX-like self-referential and parent directory references
 * in URLs (by removing them).
 */
static void rfc1808_step6a(char *const path)
{
	char *slash = path;

	while (strncmp(slash, "./", 2) == 0) {
		memmove(slash, slash+2, strlen(slash+2) + 1);
	}

	for (;;) {
		slash = strchr(slash, '/');
		if (slash == NULL) return;
		if (slash[1] == '.' && slash[2] == '/') {
			const size_t len_to_move = strlen(slash+2) + 1;
			memmove(slash, slash+2, len_to_move);
		}
		else {
			++slash;
		}
	}
}

static void rfc1808_step6b(char *const path)
{
	char *const slash = strrchr(path, '/');
	if (slash != NULL) {
		if (slash[1] == '.' && slash[2] == '\0') {
			slash[1] = '\0';
		}
	}
}

static char *parseurl_find_previous_segment(char *const start, char *slash)
{
	char *prev = slash;

	if (slash == start) {
		/* Must leave this alone.   This is the initial component */
		/* eg.  http://some.host/../   */
		return NULL;
	}

	while (prev > start) {
		--prev;
		if (*prev != '/') continue;
		++prev;
		if (prev != slash) {
			if (strncmp(prev, "..", slash - prev) == 0) {
			        /* .. components do not cancel preceding .. components */
				return NULL;
			}
		}
		return prev;
	}

	if ((slash - prev) == 2 && prev[0] == '.' && prev[1] == '.') {
	        /* Do not remove leading .. sequences yet.  Some protocols need them
	         * and some do not.  The elision of these sequences is performed in
	         * rfc1808_step6e (for the protocols which need it) later on.
	         */
		return NULL;
	}

	return prev;
}

static void rfc1808_step6c(char *const path)
{
	char *slash = path;

	for (;;) {
		slash = strstr(slash, "/../");
		if (slash == NULL) {
			return;
		}
		else {
			char *prev = parseurl_find_previous_segment(path, slash);

			if (prev == NULL) {
				++slash;
				continue;
			}
			else {
				memmove(prev, slash + 4, strlen(slash+4) + 1);
				slash = prev;
				if (slash > path) {
				        /* Bug fix in version 0.29.  We need to ensure that we recapture
				         * the leading / in order that the strstr on the next loop works
				         * properly
				         */
				        --slash;
				}
			}
		}
	}
}

static void rfc1808_step6d(char *const path)
{
	char *const slash = strrchr(path, '/');

	if (slash == NULL || slash == path) return;

	if (slash[1] == '.' && slash[2] == '.' && slash[3] == '\0') {
		char *prev = parseurl_find_previous_segment(path, slash);
		if (prev) {
			*prev = '\0';
		}
	}
}

static void not_rfc1808_step6e(char *const path)
{
	/* Step 6e - remove leading ../ in path for certain protocol */
	while (strncmp(path, "../", 3) == 0) {
		memmove(path, path+3, strlen(path+3)+1);
	}
	if (path[0] == '.' && path[1] == '.' && path[2] == '\0') path[0] = '\0';
}

static void rfc1808_step6(char *const path)
{
	/* Step 6a - remove any ./ in the path */
	rfc1808_step6a(path);
	STDDEB(("After 6a: %s\n", path));
	/* Step 6b - remove trailing /. */
	rfc1808_step6b(path);
	STDDEB(("After 6b: %s\n", path));

	/* Step 6c - remove any <segment>/.. in the path */
	rfc1808_step6c(path);
	STDDEB(("After 6c: %s\n", path));
	/* Step 6d - remove trailing <segment>/.. */
	rfc1808_step6d(path);
	STDDEB(("After 6d: %s\n", path));
}



/* This function assumes that steps 1 and 2a (section 4 RFC1808) have been performed
 * in preparation for this function.
 */
static URL *resolve(URL *base, URL *rel, URL *result)
{
	int proto_flags;

	/* RFC1808:4 (2b) */

	STDDEB(("Base scheme `%s'\n", base->data.scheme?base->data.scheme:"<<NULL>>"));
	STDDEB(("Rel. scheme `%s'\n", rel->data.scheme?rel->data.scheme:"<<NULL>>"));

	if (rel->data.scheme != NULL) {
		if (base->data.scheme == NULL) return urldup_data(rel, result); /* Bad base */
		if (strcmp(rel->data.scheme, base->data.scheme) != 0) {
			return urldup_data(rel, result);
		}
		else {
			/* Deviation from RFC to trap illegal, but used, http:/some/absolute/path and
			 * http:some/relative/path
			 * For total compliance (don't want that because we will be accused of
			 * having non-working software if we do), we should
			 * execute "return urldup_data(rel, result)" at this point
			 */
			proto_flags = protocol_get_flags(rel->data.scheme);
			if (proto_flags & proto_HAS_NO_NETLOC) {
				/* However, some protocols don't have network locations */
				return urldup_data(rel, result);
			}
		}
	}
	else {
		proto_flags = protocol_get_flags(base->data.scheme);
		rel->data.scheme = parseurl_Strdup(base->data.scheme);
	}


	/* RFC1808:4 (2c) */
	result->data.scheme = parseurl_Strdup(base->data.scheme);

	/* RFC1808:4 (3) */
	if (rel->data.host != NULL) {
		/* Embedded URL's <net_loc> is non-empty, so we skip to Step 7 */
		parseurl_free(result->data.scheme);
		urldup_data(rel, result);
	}
	else {
		/* Otherwise, the embedded URL inherits the <net_loc> (if any) of the base URL */
		result->data.user = parseurl_Strdup(base->data.user);
		result->data.password = parseurl_Strdup(base->data.password);
		result->data.account = parseurl_Strdup(base->data.account);
		result->data.host = parseurl_Strdup(base->data.host);
		result->data.port = parseurl_Strdup(base->data.port);

		/* RFC1808:4 (5) */
		if (rel->data.path == NULL || rel->data.path[0] == '\0') {
			result->data.path = hex_strdup_path(base->data.path);
			if (rel->data.query == NULL) {
				result->data.query = parseurl_Strdup(base->data.query);
			}
			else {
				result->data.query = parseurl_Strdup(rel->data.query);
			}
			if (rel->data.fragment != NULL) {
				result->data.fragment = parseurl_Strdup(rel->data.fragment);
			}
		}
		else {
			/* RFC1808:4 (4) */
			if (rel->data.path[0] == '/') {
				result->data.path = hex_strdup_path(rel->data.path+1);
				result->data.query = parseurl_Strdup(rel->data.query);
				result->data.fragment = parseurl_Strdup(rel->data.fragment);
			}
			else {
				const size_t base_len = base->data.path ? strlen(base->data.path) : 0;
				const size_t rel_len = strlen(rel->data.path);

				result->data.path = parseurl_alloc(base_len + rel_len + 2);
				if (result->data.path != NULL) {
					char *rightslash;
					strcpy(result->data.path, base->data.path ? base->data.path : "");
					rightslash = strrchr(result->data.path, '/');
					if (rightslash != NULL) {
						rightslash[1] = '\0';
					}
					else {
						result->data.path[0] = '\0';
					}
					strcat(result->data.path, rel->data.path);
					rfc1808_step6(result->data.path);
				}

				result->data.query = parseurl_Strdup(rel->data.query);
				result->data.fragment = parseurl_Strdup(rel->data.fragment);
			}
		}
	}

	/* RFC1808:4 (6a-6d) - but we do it anyway, because it's useful */
	if (result->data.path) {
		rfc1808_step6(result->data.path);
		if (proto_flags & proto_STRIP_DOT_DOT) {
			not_rfc1808_step6e(result->data.path);
		}
	}

	/* RFC1808:4 (7) */
	rewrite_full(result);

	return result;
}


/* The following call resolves a relative URL to the given base URL and returns
 * the canonical resolved form of the URL.
 */

char *URL_resolve(int flags, const char *url, const char *rel)
{
	const size_t guessed_len = (url?strlen(url):0)+(rel?strlen(rel):0)+4;
	char *ptr;
	URL *u;

	workspace_details.hex_escape = (flags & parseurlflags_APPLY_HEX_ENCODE) != 0;

	ptr = (malloc)(guessed_len);
	if (ptr == NULL) return NULL;

	u = resolve_params(url, rel);
	if (u == NULL || u->data.full == NULL) {
		if (u != NULL) {
			parseurl_free(destroy_url(u));
		}
		parseurl_end_mem();
		(free)(ptr);
		return NULL;
	}
	else {
		strncpy(ptr, u->data.full, guessed_len);
		if (guessed_len < (1+strlen(u->data.full))) {
			(free)(ptr);
			ptr = (Strdup)(u->data.full);
		}
		parseurl_free(destroy_url(u));
		parseurl_end_mem();
		return ptr;
	}
}

char *URL_canonicalise(int flags, const char *url)
{
	return URL_resolve(flags, url, NULL);
}

#ifdef TEST
int main(int argc, char *argv[])
{
	if (argc != 3) {
		fprintf(stderr, "Syntax: parseurl <base> <rel>\n");
		return 1;
	}
	else {
		URL u, v, *w = url_alloc();

		urlresolve_parse(&u, argv[1], NULL);
		urlresolve_parse(&v, argv[2], &u);
		if (resolve(&u, &v, w)) {
			printf("Worked\n");
			printf("-->%s<--\n", w->data.full);
		}
		else {
			printf("Failed\n");
		}
	}
	return 0;
}
#endif
