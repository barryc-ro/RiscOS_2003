/* -*-C-*-
 *
 * $Version: networking $
 *
 * $Source$
 *
 * $Log$
 * Revision 1.1.1.1  1998/01/29 18:32:35  sbrodie
 * Import from SrcFiler of Browser fetchers
 *
 * Revision 1.1  95/09/08  09:35:13  pwain
 * Initial revision
 *
 *
 * read data handler
 */

#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "url.h"
#include "protocol.h"
#include "externs.h"
#include "utils.h"

/*************************************************************/
/* _kernel_oserror *readdata(_kernel_swi_regs *r)            */
/*************************************************************/
/* The call to get the actual data from a site. The values   */
/* in the registers are:	     	       	       	     */
/*                       r0 = flags word		     */
/*			 r1 = poll word			     */
/* 			 r2 = buffer			     */
/*			 r3 = sizeof(buffer)		     */
/* 			      				     */
/* On exit:						     */
/*                       r0 = protocol status 		     */
/*			 r1 = pollword of client	     */
/*			 r2 = modified buffer		     */
/*			 r3 = unchanged			     */
/*			 r4 = bytes read		     */
/*			 r5 = bytes left (-1 if unknown)     */
/*			      	    	     		     */
/* Lookup the correct client module and pass on the above    */
/* two way exchange.  	     	    	     	    	     */
/*************************************************************/
_kernel_oserror *readdata (_kernel_swi_regs *r)
{
	Client *list = find_client((unsigned int)r->r[1]);

	/* Return an error if we aren't registered */
  	if (list == NULL) {
  	        return make_error(url_ERROR_CLIENT_ID_NOT_FOUND, 0);
        }

  	if ((list->client).protocol == 0) {
		_kernel_oserror *e = make_error(url_ERROR_NOT_IN_PROGRESS, 0);
	  	sprintf(strchr(e->errmess, '\0'), " (%08x)", r->r[1]);
	  	return e;
  	}

  	/* get data from host */
	return directswi_call(list->client.protocol+2, r, r);
}
