/* -*-C-*-
 *
 * $Version: networking $
 *
 * $Source$
 *
 * $Log$
 * Revision 1.1  95/09/08  09:35:16  pwain
 * Initial revision
 *
 *
 * Handle requests to register!
 */

#include <stdio.h>
#include <stdlib.h>
#include "swis.h"
#include "url.h"
#include "protocol.h"
#include "utils.h"
#include "externs.h"

/* Must preserve all registers except r->r[1] */
static Client *make_new_client(_kernel_swi_regs *r)
{
        Client *c = malloc(sizeof(Client));
        
        if (c == NULL) return c;
        c->next = NULL;
        c->client.proxy = NULL;
        c->client.no_proxy = NULL;
        c->client.protocol = 0;
        c->client.had_connection = 0;
        r->r[1] = (int) &(c->client.poll_word);
        
        return c;
}

/* Must preserve all registers except r->r[1] */
_kernel_oserror *url_reg(_kernel_swi_regs *r)
{
	Client *newc = make_new_client(r);

	if (newc == NULL) {
	        return make_error(url_ERROR_MEMORY_EXHAUSTED, 0);
	}

    	if (client_list == NULL) {
		client_list = newc;
	}
	else {
	        Client *list;
	        for (list = client_list; list->next; list = list->next) ;;
	        list->next = newc;
	}
	
	return NULL;
}

/* handle deregistering of a client */
_kernel_oserror *deregister(_kernel_swi_regs *r)
{
	Client *list = find_client(r->r[1]);
	
    	if (list == NULL) {
		return make_error(url_ERROR_CLIENT_ID_NOT_FOUND, 0);
	}

    	/* if we are in the middle of a down load, dont disconnect */
    	if (list->client.protocol != 0) {
       		(void) stop(r);
    	}

    	if (client_list==list) {
        	/* special case - client at head of the list */
		client_list = client_list->next;
	}
    	else {
        	Client *mainlist=client_list;
        	/* Locate this element as a "next" entry for removal */
		for (mainlist=client_list; mainlist; mainlist=mainlist->next) {
                        if (mainlist->next == list) {
                                break;
                        }
		}
		if (mainlist == NULL)  {
		        return make_error(url_ERROR_CLIENT_ID_NOT_FOUND, 0);
		}
		mainlist->next = list->next;
	}

    	/* we have now found the client we need to free up */
    	if (list->client.proxy != NULL) {
    	        Proxy *p=list->client.proxy;
		while (p != NULL) {
		        Proxy *const next_p = p->next;
	    		free(p->proxy);
	    		free(p->url_base);
	    		free(p);
	    		p = next_p;
	        }
        }

    	if (list->client.no_proxy != NULL) {
    		Proxy *p=list->client.no_proxy;
		while (p != NULL) {
		        Proxy *const next_p = p->next;
	    		free(p->proxy);
	    		free(p->url_base);
	    		free(p);
	    		p = next_p;
	        }
        }

    	free(list);
    	return NULL;
}
