
** This file is only MOSTLY correct.  It is still being modified
** and will be updated when the document review is completed


URL Module - Version 0.16
==========================

			Author: Paul Wain
			Date  : 10th October 1995


1. Introduction
---------------

The URL (Universal Resource Location) module is a general purpose module
for fetching data from various Internet services.

The purpose of the module is to provide a uniform entry point into a set of
"fetcher" protocols (e.g. FTP (File Transfer Protocol), HTTP (HyperText
Transfer Protocol), News, WAIS (Wide Area Information Search)), without the
need for a client application to understand how that protocol works. This is
done using a number of general URL SWIs.


NOTE.  These fetcher protocols modules (hereafter just "protocol modules")
with which the URL module communicates, are called only by the URL module
itself.  The entry points into the protocol modules have similar names to the
entry points into the URL module, but they are NOT the same, despite a lot of
similarities.  Furthermore, the session identifiers that are passed around in
R1 in many of the SWI interfaces are also seperate - the URL module maintains
its own private handles into the protocol modules which are not made known to
URL module clients.


1.1 Revision History
====================

1.1.1 Version 0.01 (2nd August 1995)
Initial revision

1.1.2 Version 0.02 (2nd October 1995)
A number of changes that arose from producing the URL module. These
include:
   * Respecification of registers returned in URL_Status
   * Respecification of the return value in R5 in URL_ReadData

1.1.3 Version 0.03 (10th October 1995)
Not really a change in documentation but URL_Deregister is now fixed.

1.1.4 Version 0.11 (15th September 1997) : C.Elkins
Minor change to return vaules from URL_Status, so as to return meaningful
size data where available, and clarification to certain other field
descriptions.

1.1.5 Version 0.12 (26th September 1997) : C.Elkins
Merged in changes from 'lost' version 0.10 which has some additions over
0.03, but omits some of the content of 0.03

Also added 'set user agent' facility to URL_GetURL

1.1.6 Version 0.16 (16th October 1997) : S.Brodie
Version number brought into step with URL module version number to avoid
confusion, plus many errors fixed and clarifications.



2. URL Module SWI Interface 
===========================


2.1 Introduction
================

Section 2.2 documents the SWI interface provided by the URL module for the
use of clients (eg. web browsers).

Section 2.3 documents the SWI interface provided by the URL module for the
use of protocol modules (eg. the HTTP module).



2.2  Client called SWI descriptions
===================================

URL_Register (&83E00)
---------------------

Entry:		R0 = 0	            Flags word - All bits set to 0 (Reserved)

Exit:		R0 = 0		    Reserved.
		R1 = Address of     A unique identifier into the module
		     poll word

		All other registers undefined.

This SWI initialises a client with the main URL module and provides the
client with a poll word that can be used to monitor the status of the URL
module within that client's context. The poll word is unique for each client
that registers with the URL module and is also used as a session identifier
in subsequent interactions with the URL module.

Multiple registration by the same client is permitted. This will provide
the client with multiple identifiers into the URL module.

Calling this SWI does not result in the calling of any protocol module SWIs.


URL_GetURL (&83E01)
-------------------

Entry:		R0 = 0		    Flags word
                                    bit 0 set => R6 is valid
				    All other bits set to 0 (Reserved)

		R1 = Address of     Session identifier
		     poll word
		R2 = Method	    Indicates the method to use on the given
				    URL. This is protocol dependent. For HTTP
				    these are:

				    bit 0 set		GET <url> HTTP/1.0
				    bit 1 set		HEAD <url> HTTP/1.0
				    bit 2 set		POST <url> HTTP/1.0
				    bit 3 set		PUT <url> HTTP/1.0

		R3 = URL	    The "document" we are after including
				    the protocol. e.g. "http://www.acorn.co.uk"

	        R4 = Pointer to     If the method requires it this is the
		     datablock	    data to send in addition to the URL.
		     		    For HTTP this is valid if bit 2 or 3 is
				    set in the Method field.

		R5 = Data 	    This is pretty much HTTP specific and
		     wanted	    is as follows:
		     		    0 = Body data only
		     		    1 = Head data only
		     		    2 = Head/Body data wanted.
		     		    Setting R2 to 2 overrides this setting.

		R6 -> User Agent    Pointer to string to specify as the
		      string        "User Agent" in the HTTP request header.
		                    NULL pointer or NULL string implies default.
		                    Note R0:0 *must* also be set.


Exit:		R0 = Protocol 	    Protocol dependent
  		     status
		R1 = Address of     Preserved.
		     poll word
	        All other registers undefined.


This SWI is used to instigate a transfer of data to or from (mainly from) a
resource server.  When this SWI has been called, the URL module looks for a
protocol module which is capable of handling the URL specified by R3.  If a
suitable module cannot be located, the URL module generates an error.

If a protocol module capable of handling the URL was found, then the
information is passed onto the protocol module via the Protocol_GetData
SWI call.  On exit, R0 will be the status returned by the protocol module to
provide more status information.


URL_Status (&83E02)
-------------------

Entry:		R0 = 0		    Flags word. All bits 0. (Reserved)
		R1 = Address of     Request/Session identifier.
		     poll word

Exit:		R0 = Status	    A status word. The following bits can
				    be set:
				    bit 0	connected to server.
				    bit 1	sent request.
				    bit 2	sent data.
				    bit 3	Initial response recieved.
				    bit 4	Transfer in progress.
				    bit 5	All data received.
				    bit 6	Transfer aborted.

		R2 = Server 	    e.g. HTTP Response code (200, 302 etc)
		     response code
	        R3 = Bytes read	    (total so far) if data is in transit.
	        R4 = Total bytes to be transfered (if known).


This SWI is used to monitor the transfer of data from the remote service.
Again it is protocol independent. However the exit status bits of R0 are
common to all services. In addition R2 and R3 are not mutually exclusive
since even in the case of say a HTTP 400 (Forbidden) request some explanatory
data may be received.

If the amount of data to be received is unknown, R4 will contain -1, however
R3 will contain the number of bytes received so far.

When this SWI is called, the URL module invokes the Protocol_Status SWI for
the protocol module concerned with the request.



URL_ReadData (&83E03)
---------------------

Entry:		R0 = 0		    Reserved flags word.
		R1 = Address of     Session Identifier
		     poll word
		R2 = Buffer	    (Pointer to buffer)
		R3 = Buffer size

Exit:		R0 = Protocol status (see above)
		R1 = Address of     Preserved
		     poll word
		R2 = Buffer	    (contents modified)
		R3 = Buffer size    Unchanged.
		R4 = Bytes read	    How many bytes were read (this chunk).
		R5 = Bytes pending  How many bytes are left.


This SWI is used to both read the data pending from a request, find out how
much data has been read on this call, find out how much data has been read in
total for this request, and how much more there is remaining to be read for
the request.

If R2 is zero on entry (R3 is undefined), R4 is zero on exit, and R5 gives
the amount of data pending. If the amount of data pending is unknown,
but there is still data remaining to be transferred, R5 will contain -1.

If R2 is a pointer to a buffer on entry (and R3 is the size of the buffer),
then on exit the buffer contains the new data, R4 contains the amount of data
added to the buffer and R5 contains the amount of data left. If the
amount of data left is unknown R5 will contain -1.

R1 always returns the protocol status code.

In the event of all the data being read (R5=0 on exit), a call to URL_Stop is
not required as this is performed automatically when URL_Deregister is called
for the client session.  Once all data has been read a call to URL_Status can
return no meaningful information.

When this SWI is called, the URL module invokes the Protocol_ReadData SWI for
the protocol module concerned with the request.


URL_SetProxy (&83E04)
---------------------

Entry:		R0 = 0		    Reserved flags word.
		R1 = Address of     Session identifier
		     poll word
		R2 = Pointer to     A buffer containing a partial URL
		     base URL
	        R3 = Protocol 	    URL style protocol identifier.
		R4 = No Proxy	    Flag (0=proxy, 1=no_proxy)

Exit:		R0 = 0		    Reserved.
		All other registers undefined


This call is used to set the proxy server to use for a session with the URL
module and protocol libraries. If R1 is zero then the proxy is used for all
sessions. If R1 is a valid poll word then the proxy server for that session
is set. R2 is a pointer to a string containing the base URL to pass the
request on to when a proxy request is to be made. This is of the form, e.g.
"http://wwwcache.hensa.ac.uk/" (Note the trailing /). R3 is a pointer to
a buffer containing the initial part of the URL to proxy (e.g. "http:",
"ftp:"). This has the advantage that requests to certain hosts can be
proxied and not to others (e.g. "http://www.acorn.co.uk as the protocol").

However if R4 is non-zero, this indicates that no matter how the proxy
settings have been defined before hand, requests to the base URL should
not be proxied in this case. (R3 is undefined in this case).

NOTE: When a URL_GetURL request is received, the proxy settings are evaluated
in the following order:

	* Client No-proxy
	* Client proxy
	* Global No-proxy
	* Global proxy

This is to ensure all client settings override global settings and thus remain
secure for that given client. (That is a client sets up a proxy server and
then defaults all other URLs to no-proxy, then no matter how the global
settings are changed, the client can be sure of where requests will end up).

If R2=0 on entry, then all proxy settings for the relevant session
are erased.

Calling this SWI does not result in any calls being made to protocol modules.


URL_Stop (&83E05)
-----------------

Entry:		R0 = 0		    Reserved flags word. Must be 0.
		R1 = Address of     Session ID
		     poll word

Exit:		R0 = 0		    Reserved

This call aborts a current request if there is one associated with the session
identifier. In the event of no request being associated with the data, an
error is generated.

The purpose of this SWI call is to provide the client with a way of enforcing
the termination of a request.  It is not called by the client just
because all the data associated with the request has finished being
transferred, although it may do that if it chooses to do so.  The Stop call
will be made automatically by the URL module when the session is deregistered
with URL_Deregister,.


When this SWI is called, the URL module invokes the Protocol_Stop SWI for the
protocol module concerned with the request.


URL_Deregister (&83E06)
-----------------------

Entry:		R0 = 0		    Reserved flags word. Must be 0.
		R1 = Address of     Session ID
		     poll word

Exit:		R0 = 0		    Reserved.

This call deregisters the client from the URL module cleanly, freeing up
any information the URL module may have kept about the client (e.g. proxy
information).

Calling this SWI results in the appropriate Protocol_Stop SWI call being
issued by the URL module if such a call was not made due to a prior call to
URL_Stop.  

When this SWI is called, the URL module invokes the Protocol_Stop SWI for the
protocol module concerned with the request, if it has not already done so
(eg. during the processing of URL_Stop).



2.3. Protocol module called SWI descriptions
============================================


URL_ProtocolRegister (&83E20)
-----------------------------

Entry:		R0 = 0		    Reserved flags word. Must be 0.
		R1 = SWI Base
		R2 = URL Base	    e.g. "http:", "file:" etc.
		R3 = Version No.    times by 100. Eg: 101 = 1.01
		R4 = More info.	    Up to 50 chars more info
				    (e.g. "Acorn HTTP fetcher".)

Exit:		R0 = 0		    Reserved flags word.


This call is used by a protocol application to register its SWI base and the
type of URLs that it accepts. The SWIs that are accessable from this SWI base
are defined in section 3.  If the module cannot be registered (e.g. another
module is already claiming that URL base), an error will be returned.

R3 is an integer and R4 is a pointer to the string containing more
information which will be displayed by the *URLProtoShow command  (or 0 if
none).

Typically, it will be called during a protocol module's initialisation code.


URL_ProtocolDeregister (&83E21)
-------------------------------

Entry:		R0 = 0		    Reserved flags word. Must be 0.
		R1 = SWI Base	    (Effectively a unique identifier).

Exit:		R0 = 0		    Reserved flags word.
		R1 = sessions 	    Number of session that are affected.
		     affected.

This call should be used by the protocol module to tell the URL module that
it is going away. The URL module will raise the appropriate disconnect
messages with the clients, and tell the protocol module the number of clients
it has affected.

Typically, it will be called during a protocol module's finalisation code.



3. Protocol module SWI interface
================================

3.1. Introduction
=================

The protocol module SWI interface is only called by the URL module.  URL
module clients can never call the readdata/status/getdata/stop SWIs directly.

The protocol modules are required to supply a SWI interface, based upon their
SWI_Base. There are 4 SWIs that need to be supported which run from SWI_Base
to SWI_Base+3.  New SWIs common to all protocol modules will only be added at
the low-end of the SWI range.  Protocol modules must generate standard SWI
not known errors if they receive a call which they do not understand, so that
the URL module can determine that they do not support the SWI.

Protocol specific SWIs should be added at the top-end of the SWI range (ie.
start at SWI_Base+63 and work down).  The HTTP module uses that range to
provide clients with access to its HTTP cookie management code, for example.


Protocol_GetData (SWI_Base+0)
-----------------------------

Entry:		R0 = 0		    Reserved Flags word.
		R1 = Pointer to	    Session Identifier.
		     client poll
		     word
		R2 = Method	    Protocol dependent.
		R3 = Pointer to     The URL to get INCLUDING the method.
		     URL
		R4 = Pointer to
	             data block.
		R5 = Data 	    This is pretty much HTTP specific and
		     wanted	    is as follows:
		     		    0 = Body data only
		     		    1 = Head data only
		     		    2 = Head/Body data wanted.

Exit:		R0 = Protocol	    Protocol dependent.
		     status

This call is used to start retrieving data. The protocol module should raise
any events via the poll word provided in R1. 

The URL module calls this SWI in response to one of its clients calling SWI
URL_GetURL.


Protocol_Status (SWI_Base+1)
----------------------------

Entry:		R0 = 0		    Reserved flags word.
		R1 = Pointer to	    Session Identifier.
		     client poll
		     word

Exit:		R0 = Status 	    (See URL_Status in section 2.1)
		R1 = Server status  Protocol dependent
		R2 = Number of
		     bytes pending


This SWI is used to monitor the transfer of data from the remote service.
Again it is protocol independent. However the exit status bits of R0 are
common to all services. In addition R1 and R2 are not mutually exclusive
since even in the case of say a HTTP 400 (Forbidden) request some explanatory
data may be received.

If the client is unknown to the protocol module, R0, R2 and R3, R4 should all
contain 0 on return to reduce the chance of confusion. If however the client
**was** known to the protocol module, and the last request has finished, the
URL module will return the status code as of the time that the request
finished (i.e. bit 6 or 5 will be set along with another combination if
relevant), provided that the client has not been deregistered.

The URL module calls this SWI in response to one of its clients calling SWI
URL_Status.


Protocol_ReadData (SWI_Base+2)
------------------------------

Entry:		R0 = 0		    Reserved flags word.
		R1 = Address of     Session Identifier
		     poll word
		R2 = Buffer	    (Pointer to buffer)
		R3 = Buffer size

Exit:		R0 = Protocol status (see above)
		R1 = Address of     Preserved
		     poll word
		R2 = Buffer	    (contents modified)
		R3 = Buffer size    Unchanged.
		R4 = Bytes read	    How many bytes were read.
		R5 = Bytes pending  How many bytes are left.


This SWI is used to both read the data pending from a request, find out how
much data has been read on this call, find out how much data has been read in
total for this request, and how much more there is remaining to be read for
the request.

The register usage and description is the same as for SWI URL_ReadData. The
URL module calls this SWI in response to one of its clients calling SWI
URL_ReadData.


Protocol_Stop (SWI_Base+3)
--------------------------

Entry:		R0 = 0		    Reserved flags word. Must be 0.
		R1 = Address of     Session ID
		     poll word

Exit:		R0 = 0		    Reserved

This call aborts a current request if there is one associated with the session
identifier.

The URL module calls this SWI in response to one of its clients calling
SWI URL_Deregister or SWI URL_Stop.


