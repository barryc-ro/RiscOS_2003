/*
 * HTTP (c.dates)
 *
 * © Acorn Computers Ltd. 1998
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>
#include "dates.h"

typedef enum {
        day_sun = 0, day_mon, day_tue, day_wed, day_thu, day_fri, day_sat, no_day = -1
} weekdays;

typedef enum {
        month_jan = 0, month_feb, month_mar, month_apr, month_may, month_jun,
        month_jul, month_aug, month_sep, month_oct, month_nov, month_dec, no_month=-1
} months;

static int dates_isdatespace(const char c)
{
        return c == '-' || c == ':' || c == ',' || isspace(c);
}

static const char *dates_skipspaces(const char *ptr)
{
        while (*ptr && dates_isdatespace(*ptr)) {
                ++ptr;
        }
        return ptr;
}

static const char *dates_skipletters(const char *ptr)
{
        while ((*ptr) >= 'A' && (*ptr) < '\x7f') {
                ++ptr;
        }
        return ptr;
}

static const char *dates_skipnumbers(const char *ptr)
{
        while (*ptr && isdigit(*ptr)) ++ptr;
        return ptr;
}

static months dates_match_month(const char *ptr)
{
        char const *mon = ptr;
        months result = no_month;

        switch (mon[0]) {
                case 'J':
                	if (mon[1] == 'a' && mon[2] == 'n') result = month_jan;
                	else if (mon[1] != 'u') result = no_month;
                	else if (mon[2] == 'n') result = month_jun;
                	else if (mon[2] == 'l') result = month_jul;
			break;

                case 'F':
                	if (mon[1] == 'e' && mon[2] == 'b') result = month_feb;
			break;

                case 'M':
                	if (mon[1] != 'a') result = no_month;
			else if (mon[2] == 'y') result = month_may;
			else if (mon[2] == 'r') result = month_mar;
			break;

                case 'A':
                	if (mon[1] == 'p' && mon[2] == 'r') result = month_apr;
                	else if (mon[1] == 'u' && mon[2] == 'g') result = month_aug;
			break;

                case 'S':
                	if (mon[1] == 'e' && mon[2] == 'p') result = month_sep;
                	break;

                case 'O':
                	if (mon[1] == 'c' && mon[2] == 't') result = month_oct;
			break;

                case 'N':
                	if (mon[1] == 'o' && mon[2] == 'v') result = month_nov;
			break;

                case 'D':
                	if (mon[1] == 'e' && mon[2] == 'c') result = month_dec;
			break;

                default:
                	break;
        }

        return result;
}

static weekdays dates_match_weekday(const char *ptr)
{
        char const *day = ptr;

        switch (day[0]) {
                default:
                	return no_day;

                case 'S':
                	if (day[1] == 'u' && day[2] == 'n') return day_sun;
                	if (day[1] == 'a' && day[2] == 't') return day_sat;
                	return no_day;

                case 'T':
                	if (day[1] == 'u' && day[2] == 'e') return day_tue;
                	if (day[1] == 'h' && day[2] == 'u') return day_thu;
                	return no_day;

                case 'M':
                	if (day[1] == 'o' && day[2] == 'n') return day_mon;
                	return no_day;

                case 'W':
                	if (day[1] == 'e' && day[2] == 'd') return day_wed;
                	return no_day;

                case 'F':
                	if (day[1] == 'r' && day[2] == 'i') return day_fri;
                	return no_day;
        }
}

time_t dates_string_to_date(const char *ptr)
{
        weekdays day = no_day;
        enum { time_asctime, time_normal, time_mondayyear } time_format = time_normal;
        struct tm ordinals;
        time_t result = time(NULL);

        ptr = dates_skipspaces(ptr);
        day = dates_match_weekday(ptr);
        if (day == no_day) {
                if (!isdigit(*ptr)) {
                        ordinals.tm_mon = dates_match_month(ptr);
                        if (ordinals.tm_mon == no_month) {
	                        return result;
	                }
	        	ptr = dates_skipspaces(dates_skipletters(ptr));
	        	time_format = time_mondayyear;
                }
        }
        else {
		ptr = dates_skipspaces(dates_skipletters(ptr));
	}
	if (isdigit(*ptr)) {
	        ordinals.tm_mday = atoi(ptr);
	        if (ordinals.tm_mday < 1 || ordinals.tm_mday > 31) return result;
	        ptr = dates_skipspaces(dates_skipnumbers(ptr));
		if (time_format != time_mondayyear) {
		        ordinals.tm_mon = dates_match_month(ptr);
		        if (ordinals.tm_mon == no_month) return result;
		        ptr = dates_skipspaces(dates_skipletters(ptr));
		}
	        ordinals.tm_year = atoi(ptr);
	        ptr = dates_skipspaces(dates_skipnumbers(ptr));
	        time_format = time_normal;
	}
	else {
	        time_format = time_asctime;
	        ordinals.tm_mon = dates_match_month(ptr);
	        if (ordinals.tm_mon == no_month) return result;
	        ptr = dates_skipspaces(dates_skipletters(ptr));
	        ordinals.tm_mday = atoi(ptr);
	        if (ordinals.tm_mday < 1 || ordinals.tm_mday > 31) return result;
		ptr = dates_skipspaces(dates_skipnumbers(ptr));
	}

	ordinals.tm_hour = atoi(ptr);
	ptr = dates_skipspaces(dates_skipnumbers(ptr));
	ordinals.tm_min = atoi(ptr);
	ptr = dates_skipspaces(dates_skipnumbers(ptr));
	ordinals.tm_sec = atoi(ptr);

	if (time_format == time_asctime) {
		ordinals.tm_year = atoi(dates_skipspaces(dates_skipnumbers(ptr)));
	}

	if (ordinals.tm_year < 66) {
	        /* Using 66 for compatiblity with the OS */
	        ordinals.tm_year += 2000;
	}
	else {
	        if (ordinals.tm_year < 100) ordinals.tm_year += 1900;
	}

	ordinals.tm_year -= 1900;
	result = mktime(&ordinals);
	if (result == -1) result = -2;
	return result;
}

int dates_looks_like_weekday(const char *ptr)
{
        return dates_match_weekday(ptr) != no_day;
}

#ifdef TEST
int main(void)
{
        static char *tests[] = {
		"Sun, 06 Nov 1994 08:49:37 GMT",
		"Sun, 06-Nov-94 08:49:37 GMT",
		"Sunday, 06-Nov-94 08:49:37 GMT",
		"Sun Nov  6 08:49:37 1994",
		"6 Nov 1994 08:49:37",
		"6 November 1994 08:49:37",
		"06 Nov 1994 08:49:37",
		"6 November 1994 08:49:37",
		"Sunday, 06-Nov-06 08:49:37 GMT",
		"Sunday, 06-Nov-2006 08:49:37 GMT",
		"6-Feb-2106 06:28:14 GMT",
		"6-Feb-2106 06:28:15 GMT",
		"20 November 2017",
		"November 6 2017",
	};
	size_t loop;

	for (loop=0; loop<((sizeof(tests)/sizeof(char *))); ++loop) {
	        time_t t = dates_string_to_date(tests[loop]);
	        printf("%40s ---> %-.24s (%08x)\n", tests[loop], ctime(&t), t);
	}

        return 0;
}
#endif
