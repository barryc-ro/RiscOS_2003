/*
 * HTTP (c.status)
 *
 * © Acorn Computers Ltd. 1997
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "sys/errno.h"
#include "module.h"
#include "protocol.h"

/*************************************************************/
/* _kernel_oserror http_status(_kernel_swi_regs *r)	     */
/*************************************************************/
/* The call to stop getting data from a site. The values in  */
/* ther registers are:					     */
/*		       r0 = Flags word			     */
/*		       r1 = pollword of client		     */
/* On exit they are:					     */
/*		       r0 = status word			     */
/*		       r2 = server response code (0 if none) */
/*		       r3 = bytes read so far if known	     */
/*		       r4 = Total bytes to be transferred    */
/*************************************************************/
_kernel_oserror *http_status(_kernel_swi_regs *r)
{
	int *pollword=(int *)r->r[1];
	Session *ses;

	ses = find_session((unsigned int)pollword);
	if (ses == NULL) {
                r->r[0] = r->r[2] = r->r[3] = r->r[4] = 0;
	        return NULL;
	}


	switch (ses->done) {
		case HTTP_DNS:
		case HTTP_NEWSESSION:
		case HTTP_NOHOST:
		case HTTP_CONNECTING:
			r->r[0] = *((int *)ses->id) = status_NOT_YET_CONNECTED;
			r->r[2]		  = ses->server_code;
			break;

		case HTTP_SENDING_REQUEST:
			*((int *)ses->id) = r->r[0] = status_CONNECTED_TO_SERVER;
			r->r[2]		  = ses->server_code;
			break;

		case HTTP_SENT_REQUEST:
			r->r[0]		  =
			*((int *)ses->id) = status_WAIT_INITIAL_RESPONSE;
			r->r[2]		  = ses->server_code;
			break;

		case HTTP_RECEIVING:
			r->r[0]		  =
			*((int *)ses->id) = status_WAIT_FOR_BODY;
			r->r[2]		  = ses->server_code;
			break;

		case HTTP_RECEIVING_BODY:
			r->r[0]		  =
			*((int *)ses->id) = status_READING_REPLY;
			r->r[2]		  = ses->server_code;
			break;

		case HTTP_ERROR_NOLINK:
			r->r[0]		  =
			*((int *)ses->id) = status_ABORTED;
			r->r[2]		  = ses->server_code;
			break;

		case HTTP_CONNECT_TIMED_OUT:
		case HTTP_ERROR_READ:
		case HTTP_ERROR_HOSTNAME:
		case HTTP_ERROR_NO_PROXY:
		case HTTP_ERROR:
		case HTTP_ERROR_NOCONNECTION:
			#ifdef TML
			Printf("http:status> session:%x returning status %d (sd=%d)\n",ses,ses->done,ses->sd);
			#endif
			return return_error(ses->done);

		default:
			r->r[0] = *((int *)ses->id) = status_ALL_DATA_RECEIVED;
			r->r[2] = ses->server_code;
			break;
	}

	r->r[3] = ses->sent;

	/* Note.  The following condition is CORRECT.  We don't want to confuse the caller
	 * into thinking that there is no more data left just because we've seen a
	 * Content-Length: 0   header.  We need it to continue to read the header information.
	 * Only once we are into body transfers can be legally set this to zero
	 */
	r->r[4] = ses->size > 0 ? ses->size : -1;

	return NULL;
}
