/*
 * HTTP (connpool.c)
 *
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include "kernel.h"
#include "socklib.h"
#include "module.h"
#include "connpool.h"
#include "protocol.h"
#include "header.h"
#include "sys/types.h"
#include "sys/socket.h"
#include "sys/ioctl.h"
#include "netinet/in.h"
#include "generic.h"

/* Maximum number of connections to hold open at once */
#define CONNPOOL_SIZE		8

/* Time for which an entry is held in the pool == 30 seconds */
#define CONNPOOL_HOLD_DELAY	(30)

#ifdef TRACE
#define DEBUG_ENTRY(x) protocol_debug(0,"%s,%d\n",((x)->host), ((x)->port))
#else
#define DEBUG_ENTRY(x) ((void)(x))
#endif


typedef struct connpool {
	int	inuse;
	int	sock;
	int	port;
	time_t	expires;
	char	*host;
	union {
		struct {
			int	protocol; /* *100 - remember 1.1 servers */
		} http;
	} data;
} connpool;

static connpool pool[CONNPOOL_SIZE];


static void connpool_delete(connpool *p)
{
	if (p->inuse) {
		#ifdef TRACE
		protocol_debug("connpool: Deleting entry (socket %d):\n", p->sock);
		DEBUG_ENTRY(p);
		#endif
		if (p->sock > -1) {
		        close_socket(&p->sock);
		}
		if (p->host) {
			free(p->host);
			p->host = NULL;
		}
		p->inuse = 0;
	}
}

void connpool_exit(void)
{
	int i;
	for (i=0; i<CONNPOOL_SIZE; ++i) if (pool[i].inuse) {
		connpool_delete(&pool[i]);
	}
}

void connpool_poll(void)
{
	int i;
	time_t now = time(NULL);

	for (i=0; i<CONNPOOL_SIZE; ++i) if (pool[i].inuse) {
	        /* Should poll the to_discard data at this point */
		if (pool[i].expires <= now) {
			#ifdef TRACE
			protocol_debug("Expiring entry %d (socket %d):\n", i, pool[i].sock);
			DEBUG_ENTRY(&pool[i]);
			#endif
			connpool_delete(&pool[i]);
		}
	}
}

void connpool_init(void)
{
	int i;

	for (i=0; i<CONNPOOL_SIZE; ++i) {
		pool[i].inuse = 0;
	}
}

static connpool *connpool_find_free(int s, char *host, int port, int protocol)
{
	int i;

	for (i=0; i<CONNPOOL_SIZE; ++i) {
		if (!pool[i].inuse) {
			pool[i].inuse = 1;
			pool[i].sock = s;
			pool[i].expires = time(NULL) + CONNPOOL_HOLD_DELAY;
			pool[i].host = Strdup(host);
			pool[i].port = port;
			pool[i].data.http.protocol = protocol;
			return &pool[i];
		}
	}

	connpool_delete(&pool[rand() % CONNPOOL_SIZE]);
	return connpool_find_free(s, host, port, protocol);
}

static int connpool_idle_socket(connpool *p)
{
	fd_set set;
	struct timeval tv;
	int result, readable;

	FD_ZERO(&set);
	FD_SET(p->sock, &set);
	timerclear(&tv);

	result = select(p->sock + 1, &set, NULL, NULL, &tv);
	if (result == -1) {
		connpool_delete(p);
		return 0;
	}
	if (result == 0) {
		return 1; /* whee! nothing to read */
	}

	/* Problem.  Something was ready to read - either way we've probably got to kill it */
	result = socketioctl(p->sock, FIONREAD, &readable);
	if (result < 0 || readable == 0 || readable > 0) {
		/* I know the condition is forcibly true whatever */
		connpool_delete(p);
		return 0;
	}
	connpool_delete(p);
	return 0;
}

int connpool_store_http(int s, char *host, int port, int protocol)
{
	connpool *p = connpool_find_free(s, host, port, 0);

	if (!p) return 0; /* not interested */
	p->data.http.protocol = protocol;
	#ifdef TRACE
	protocol_debug("Storing entry socket (%d):\n", p->sock);
	DEBUG_ENTRY(p);
	#endif
	return 1;
}

static connpool *connpool_find_candidate(int *ptr, char *host, int port)
{
	while (*ptr < (CONNPOOL_SIZE-1)) {
		connpool *p = &pool[++(*ptr)];
		if (p->inuse && htons(p->port) == port && Strcmp_ci(host, p->host) == 0) {
			/* This is a possibility! */
			return p;
		}
	}

	return 0;
}

int connpool_find_http(int *s, char *host, int port, int *protocol)
{
	int ptr = -1;

	for (;;) {
		connpool *p = connpool_find_candidate(&ptr, host, port);
		if (!p) break;
		#ifdef TRACE
		protocol_debug("Found candidate entry: socket %d\n", p->sock);
		DEBUG_ENTRY(p);
		#endif
		/* We found one! Now test its viability - must have zero bytes pending */
		if (connpool_idle_socket(p)) {
			if (*protocol) *protocol = p->data.http.protocol;
			if (*s) *s = p->sock;
			#ifdef TRACE
			protocol_debug("Using this candidate: socket %d\n", p->sock);
			DEBUG_ENTRY(p);
			#endif
			p->sock = -1;
			connpool_delete(p);
			return 1;
		}
	}

	#ifdef TRACE
	protocol_debug("No candidates found\n");
	#endif
	return 0;
}
