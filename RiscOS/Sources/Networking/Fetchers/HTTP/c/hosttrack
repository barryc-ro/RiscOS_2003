/*
 * HTTP (c.hosttrack)
 *
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "socklib.h"
#include "netinet/in.h"
#include "hosttrack.h"
#include "module.h"
#include "protocol.h"
#include "header.h"
#include "generic.h"

/* This source file is responsible for maintaining a small database
 * of recently contacted web servers and noting what version of HTTP
 * they are capable of.  This is a requirement of HTTP/1.1 since we
 * may need to know what version of HTTP the server is using.
 */

#define MAX_HOSTS_TO_REMEMBER	(12)

struct hosttrack_info {
	hosttrack_info	*next;
	char		*name;
	int		http_version;
	int		port;
};

static hosttrack_info *hti = 0;

static void hosttrack_sanitise(void)
{
	int max_servers = MAX_HOSTS_TO_REMEMBER;
	hosttrack_info *h;

	if (hti) {
		for (h=hti; h->next; h=h->next) {
			if (!--max_servers) {
				hosttrack_info *next;

				next = h->next;
				h->next = 0;
				while (next) {
					h = next->next;
					free(next->name);
					free(next);
					next = h;
				}
				break;
			}
		}
	}
}

void hosttrack_exit(void)
{
	hosttrack_info *h, *next;

	for (h=hti; h; h=next) {
		next = h->next;
		free(h->name);
		free(h);
	}

	hti = 0;
}

void hosttrack_init(void)
{
	hti = 0;
}

hosttrack_info *hosttrack_known(const char *name, int port)
{
	hosttrack_info *h;

	for (h=hti; h; h=h->next) {
		if (Strcmp_ci(h->name, name) == 0 && port == h->port) {
			#ifdef TRACE
			protocol_debug("Found %s:%d with version %d.%d\n",
				name, port, h->http_version / 100,
				h->http_version % 100);
			#endif
			return h;
		}
	}

	return h;
}

int hosttrack_http_version(hosttrack_info *h)
{
	return h->http_version;
}

void hosttrack_store_http_version(const char *name, int port, int ver)
{
	hosttrack_info *h = hosttrack_known(name, port);

	if (h) {
		h->http_version = ver;
	}
	else {
		h = malloc(sizeof(hosttrack_info));

		if (h) {
			h->name = Strdup(name);
			if (h->name == NULL) {
                                free(h);
                                return;
			}
			h->port = port;
			h->http_version = ver;
			h->next = hti;
			hti = h;
			hosttrack_sanitise();
			#ifdef TRACE
			protocol_debug("Storing %s:%d with version %d.%d\n",
				name, port, h->http_version / 100,
				h->http_version % 100);
			#endif
		}
	}
}
