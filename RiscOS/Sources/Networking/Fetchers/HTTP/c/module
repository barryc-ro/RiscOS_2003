/*
 * HTTP (c.module)
 *
 * © Acorn Computers Ltd. 1997, 1998
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "sys/errno.h"
#include "HTTPHdr.h"
#include "module.h"
#include "protocol.h"
#include "cookie.h"
#include "hosttrack.h"
#include "connpool.h"
#include "utils.h"
#include "dns.h"
#include "config.h"
#include "security.h"

volatile static int callback_pending_flag = 0;

#if CMHG_VERSION < 516
#define CMHG_CONST
#else
#define CMHG_CONST const
#endif

#ifdef ROM
static _kernel_oserror *__ROM;
#endif

#define NO_SUCH_SWI	(0x1E6)

#define URL_PROTOCOL_REGISTER	(0x83e20)
#define URL_PROTOCOL_DEREGISTER (0x83e21)

#define URL_00			(0x83e00)
#define URL_SSL_AVAILABLE	(0x83e02)


#ifndef ROM
extern int messages_file(void);
#endif

#ifndef ROM
#ifdef DEFINE_ERRNO
int __errno;
#endif
#endif


/*************************************************************/
/* So the real error number that we have to return is:	     */
/*************************************************************/
#define HTTP_ERROR_NUM  (ERROR_BASE+HTTP_OFFSET)

/*************************************************************/
/* The error message definitions			     */
/*************************************************************/
typedef enum {
	HTTP_HOST_NOT_FOUND	= HTTP_ERROR_NUM + 0,	/* DNS lookup failed */
	HTTP_HOST_CONNECT_ERROR = HTTP_ERROR_NUM + 1,	/* connect() failed */
	HTTP_DATA_READ_ERROR	= HTTP_ERROR_NUM + 2,	/* unexpected read error on socket */
	HTTP_GENERAL_ERROR	= HTTP_ERROR_NUM + 3,	/* Misc. - not helpful */
	HTTP_BAD_SESSION_ERROR	= HTTP_ERROR_NUM + 4,	/* Failed to locate session in session table */
	HTTP_CONNECTION_FAILED	= HTTP_ERROR_NUM + 5,	/* Failed to establish connection */
	HTTP_METHOD_UNSUPPORTED	= HTTP_ERROR_NUM + 6,	/* Unknown method in R2 */
	HTTP_METHOD_INIT_ERR	= HTTP_ERROR_NUM + 7,	/* Failed to start a fetch completely */
	HTTP_BAD_URL_PARSE	= HTTP_ERROR_NUM + 8,	/* Unable to parse URL (URL module too old?) */
	HTTP_PROXY_NOT_FOUND	= HTTP_ERROR_NUM + 9,	/* Unable to contact the proxy */
	HTTP_NO_SECURITY	= HTTP_ERROR_NUM + 10	/* No SSL support present */
} http_internal_error_codes;



/* Sets clibrary_realloc_routine_is_buggy non-zero if RISC OS 3.1 or earlier (ie. ROM realloc is broken) */
static int clibrary_realloc_routine_is_buggy;
static void module_check_os_version(void)
{
        int os;
        (void) _swix(OS_Byte, _INR(0,2)|_OUT(1), 129, 0, 255, &os);
        clibrary_realloc_routine_is_buggy = (os <= 0xA4);
}

static int registered_http;
static int registered_https;

static _kernel_oserror *try_to_register_for_https(void)
{
        if (!registered_https) {
                int ver = security_ssl_available();
                if (ver > 0) {
                        _kernel_oserror *e;
			e = _swix(URL_PROTOCOL_REGISTER, _INR(0,4), 0, HTTP_SecureGetData, "https:",
				ver, Module_Help " (SSL) © Acorn 1998 (Built: "
				Module_Date ")");
			if (e == NULL) {
		        	registered_https = 1;
			}
                }
        }

        return NULL;
}

static _kernel_oserror *try_to_register(void)
{
        _kernel_oserror *e = NULL;

	if (!registered_http) {
		e = _swix(URL_PROTOCOL_REGISTER, _INR(0,4), 0, HTTP_00, "http:",
			Module_VersionNumber, Module_Help " © Acorn 1997-8 (Built: " Module_Date ")");
		if (e != NULL) return e;
        	registered_http = 1;
	}

	if (registered_http) {
	        (void) try_to_register_for_https();
	}

        return e;
}

static _kernel_oserror *try_to_deregister_for_https(void)
{
        if (!registered_https) {
                return NULL;
        }
        else {
                registered_https = 0;
	        return _swix(URL_PROTOCOL_DEREGISTER, _INR(0,1), 0, HTTP_SecureGetData);
        }
}

static _kernel_oserror *try_to_deregister(void)
{
	(void) try_to_deregister_for_https();
        if (!registered_http) {
                return NULL;
        }
        else {
                registered_http = 0;
		return _swix(URL_PROTOCOL_DEREGISTER, _INR(0,1), 0, HTTP_00);
        }
}

static _kernel_oserror *register_with_url(void)
{
        _kernel_oserror *e;

	e = try_to_register();
	if (e == NULL) return e;
	if (e->errnum != NO_SUCH_SWI) return e;
	#ifndef ROM
	e = _swix(OS_Module, _INR(0,1), 1 /* Load */, "System:Modules.Network.URL.URL");
	return try_to_register();
	#else
	return NULL;
	#endif
}

/*************************************************************/
/* _kernel_oserror *module_init(char *cmd_fail, int podu...  */
/*************************************************************/
/* Start up and register ourselves with the URL module	     */
/*************************************************************/
_kernel_oserror *module_init(CMHG_CONST char *cmd_tail, int podule_base, void *pw)
{
	_kernel_oserror *e;

	(void) podule_base;
	(void) cmd_tail;

        #ifdef ROM
	__ROM = _swix(0xa2c43, _IN(0), pw);
	#endif

	registered_http = 0;
	registered_https = 0;
	module_check_os_version();
	security_init();
	config_init();
	session_init();
	hosttrack_init();
	connpool_init();
	dns_init();

	e = register_with_url();
	if (e == NULL) {
	        #ifndef ROM
		e = _swix(ResourceFS_RegisterFiles, _IN(0), messages_file());
	        #endif
		if (e == NULL) {
			if (getenv(Module_Title "$Path")) {
				e = messages_file_open(Module_Title ":Messages");
			}
			else {
				e = messages_file_open("Resources:$.Resources.URL." "HTTP" ".Messages");
			}
			if (e == NULL) {
				callback_pending_flag = 0;
				e = _swix(OS_CallEvery, _INR(0,2), 5*100, callevery_entry, pw); /* 5 secs */
				if (e != NULL) messages_file_close();
			}
			#ifndef ROM
			if (e != NULL) (void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
			#endif
		}
		if (e != NULL) (void) try_to_deregister();
	}
	else {
		#ifndef ROM
  	        if (e->errnum == NO_SUCH_SWI) {
  	                _kernel_oserror *newe = find_error();
  	                const size_t length = strlen(strcpy(newe->errmess, e->errmess));

  	                newe->errnum = NO_SUCH_SWI;
			strncat(newe->errmess, " (Load the URL module)", sizeof(newe->errmess) - length);
			e = newe;
  	        }
		#endif
	}

	if (e == NULL) {
		read_cookie_file();
	}

	return e;
}

void service_handler(int service_number, _kernel_swi_regs *r, void *pw)
{
        #ifdef TRACE
        protocol_debug("Service &%X: R0 = %d for URL version  %03d\n", service_number, r->r[0], r->r[2]);
        #endif
        (void) pw;

	if (service_number == URL_SSL_AVAILABLE) {
	        switch (r->r[0]) {
	                case 0:
	                        if (security_ssl_arrived(r->r[2])) {
	                                (void) try_to_register();
	                        }
		                break;
	                case 1:
	                        (void) security_ssl_gone();
	                	if (registered_https) {
                                        try_to_deregister_for_https();
                                }
	                	break;
                        default:
                                break;
	        }
	}
	else {
		switch (r->r[0]) {
		        case 0:
	        		(void) try_to_register();
	        		break;
		        case 1:
		        	(void) try_to_deregister();
	        		break;
		        default:
		        	break;
		}
	}
}

/*************************************************************/
/* _kernel_oserror *module_kill(int fatal, int podule, ...   */
/*************************************************************/
/* When we are killed off, deregister ourselves from the URL */
/* module						     */
/*************************************************************/
_kernel_oserror *module_kill(int fatal, int podule, void *pw)
{
	(void) podule;
	(void) fatal;

	_swix(OS_RemoveTickerEvent, _INR(0,1), callevery_entry, pw);
	if (callback_pending_flag) {
		_swix(OS_RemoveCallBack, _INR(0,1), callback_entry, pw);
	}

	ses_kill_all();
	session_init();
	hosttrack_exit();
	connpool_exit();
	http_free_agent();

	messages_file_close();
	#ifndef ROM
	(void) _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
	#endif

	(void) try_to_deregister();

	#ifdef ROM
	if(!__ROM) _swix(0xa2c41, 0);
	#endif

	return NULL;
}


/*************************************************************/
/* _kernel_oserror *swi_handler(int swi_no, _kernel_swi_...  */
/*************************************************************/
/* Upon a SWI call into this module decide what to do and    */
/* how to do it and all that. Just an excuse for a case	     */
/* statement						     */
/*************************************************************/
static _kernel_oserror *swi_handler_2(int swi_offset, _kernel_swi_regs *r, void *pw)
{
	/* Instead of adding the SWI chunk to the offset and comparing with the
	 * various cmhg defined macros, mask off the SWI chunk identifier at
	 * compile time.  This may well enable the C compiler to do better when
	 * it builds the switch table
	 */
	(void) pw;

	switch (swi_offset) {
		/* Generic protocol module SWIs */
		case HTTP_GetData - HTTP_00:
			return(http_start(r));

		case HTTP_Status - HTTP_00:
			return(http_status(r));

		case HTTP_ReadData - HTTP_00:
			return(http_readdata(r));

		case HTTP_Stop - HTTP_00:
			return(http_stop(r));

		/* Generic security protocol module SWIs */
		case HTTP_SecureGetData - HTTP_00:
		        if (security_ssl_available()) {
				return(https_start(r));
		        }
		        else {
		                return(make_error(HTTP_NO_SECURITY, 0));
		        }

		case HTTP_SecureStatus - HTTP_00:
		        if (security_ssl_available()) {
				return(https_status(r));
		        }
		        else {
		                return(make_error(HTTP_NO_SECURITY, 0));
		        }

		case HTTP_SecureReadData - HTTP_00:
		        if (security_ssl_available()) {
				return(https_readdata(r));
		        }
		        else {
		                return(make_error(HTTP_NO_SECURITY, 0));
		        }

		case HTTP_SecureStop - HTTP_00:
		        if (security_ssl_available()) {
				return(https_stop(r));
		        }
		        else {
		                return(make_error(HTTP_NO_SECURITY, 0));
		        }

		/* HTTP specific SWIs (at the upper end of the SWI range */
		#ifdef COOKIE
		case HTTP_EnumerateCookies - HTTP_00:
			return(enumerate_cookies(r));

		case HTTP_ConsumeCookie - HTTP_00:
			return(consume_cookie(r));

		case HTTP_AddCookie - HTTP_00:
			return(add_cookie(r));
		#endif

		default:
			return(error_BAD_SWI);
	}
}

_kernel_oserror *swi_handler(int swi_offset, _kernel_swi_regs *r, void *pw)
{
	_kernel_oserror *e;
	#ifdef TRACE
	static const char *swi[] = {"GetData", "Status", "ReadData", "Stop"};
	protocol_debug(">>Handling SWI &%02X (HTTP_%s%s) for R1=%08x\n", swi_offset,
		(swi_offset >= 16 && (swi_offset-16) < (sizeof(swi)/sizeof(char*))) ? "Secure" : "",
		swi_offset < (sizeof(swi)/sizeof(char*)) ? swi[swi_offset] :
		(swi_offset >= 16 && (swi_offset-16) < (sizeof(swi)/sizeof(char*))) ? swi[swi_offset-16] :
		swi_offset == HTTP_EnumerateCookies ? "EnumerateCookies" :
		swi_offset == HTTP_ConsumeCookie ? "ConsumeCookie" :
		swi_offset == HTTP_AddCookie ? "AddCookie" : "UNKNOWN!",
		r->r[1]);
	#endif
	e = swi_handler_2(swi_offset, r, pw);
	#ifdef TRACE
	protocol_debug("<<Exiting  SWI &%02X (HTTP_%s%s) for R1=%08x  %s "
		"R0=%s; R2=%d (=&%p); R3=%d; R4=%d; R5=%d\n\n", swi_offset,
		(swi_offset >= 16 && (swi_offset-16) < (sizeof(swi)/sizeof(char*))) ? "Secure" : "",
		swi_offset < (sizeof(swi)/sizeof(char*)) ? swi[swi_offset] :
		(swi_offset >= 16 && (swi_offset-16) < (sizeof(swi)/sizeof(char*))) ? swi[swi_offset-16] :
		swi_offset == HTTP_EnumerateCookies ? "EnumerateCookies" :
		swi_offset == HTTP_ConsumeCookie ? "ConsumeCookie" :
		swi_offset == HTTP_AddCookie ? "AddCookie" : "UNKNOWN!",
		r->r[1],
		e ? e->errmess : "<V flag clear>",
		e ? "<errorblock>" : protocol_network_states(r->r[0]),
		r->r[2], (void *) r->r[2], r->r[3], r->r[4], r->r[5]);
	#endif

	return e;
}

/*************************************************************/
/* _kernel_oserror *return_error(int status_code)	     */
/*************************************************************/
/* Given a HTTP internal status code generate the correct    */
/* error block.						     */
/*************************************************************/
_kernel_oserror *return_error(int status_code)
{
	#ifdef TRACE
	protocol_debug("http:return_error called (code %d)\n",status_code);
	#endif

	if (status_code < HTTP_CONNECT_TIMED_OUT) {
	        #ifdef TRACE
	        protocol_debug("!!>> BAD STATUS CODE IN RETURN_ERROR\n");
	        #endif
	        return NULL;
	}
	switch (status_code) {
		case HTTP_ERROR_NOLINK:
			/* This is not *really* an error (fatal)... */
			/* StB: so what's it doing here then?? */
			return NULL;

		case HTTP_CONNECT_TIMED_OUT:
			return make_error(HTTP_HOST_CONNECT_ERROR,0);

		case HTTP_ERROR_READ:
			return make_error(HTTP_DATA_READ_ERROR,0);

		case HTTP_ERROR_HOSTNAME:
			return make_error(HTTP_HOST_NOT_FOUND,0);

		case HTTP_ERROR_BADSESSION:
			return make_error(HTTP_BAD_SESSION_ERROR,0);

		case HTTP_ERROR_NOCONNECTION:
			return make_error(HTTP_CONNECTION_FAILED,0);

		case HTTP_ERROR_BAD_METHOD:
			return make_error(HTTP_METHOD_UNSUPPORTED,0);

		case HTTP_ERROR_INIT_ERR:
			return make_error(HTTP_METHOD_INIT_ERR,0);

		case HTTP_ERROR_NO_PARSE:
			return make_error(HTTP_BAD_URL_PARSE,0);

		case HTTP_ERROR_NO_PROXY:
			return make_error(HTTP_PROXY_NOT_FOUND,0);

		case HTTP_ERROR_NO_SECURITY:
		        return make_error(HTTP_NO_SECURITY,0);

		default:
			return make_error(HTTP_GENERAL_ERROR,0);
	}
}


/* Poll the active connection pool */
int callback_handler(_kernel_swi_regs *r, void *pw)
{
	(void) pw;
	(void) r;

	if (callback_pending_flag == 0) {
		return 1;
	}

	connpool_poll();
	session_check();

	callback_pending_flag = 0;
	return 1;
}

int callevery_handler(_kernel_swi_regs *r, void *pw)
{
	(void) r;

	if (callback_pending_flag==1) {
		return 1;
	}

	callback_pending_flag = 1;
	_swix(OS_AddCallBack, _INR(0,1), callback_entry, pw);
	return 1;
}


/* RISC OS 3.1 SVC mode realloc is broken, so we must provide our own */
char *module_realloc(void *ptr, size_t size)
{
        #ifdef TRACE
        protocol_debug("module_realloc(%p, %d)\n", ptr, size);
        #endif
	if (!clibrary_realloc_routine_is_buggy) return realloc(ptr, size);

        if (ptr == NULL) {
                return malloc(size);
        }
        if (size == 0) {
                free(ptr);
		return NULL;
        }
	else {
	        const int *rma_block = ptr;
	        const size_t newsize = size - (rma_block[-1] - 4);
	        char *newptr;

		if (_swix(OS_Module, _IN(0)|_INR(2,3)|_OUT(2), 0xD, ptr, newsize, &newptr) != NULL) {
		        return NULL;
		}

		return newptr;
	}
}
