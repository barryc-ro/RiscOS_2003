/*
 * HTTP (c.connect) (minor customisation for persistent sockets from Generic version)
 *
 * © Acorn Computers Ltd. 1997
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "inetlib.h"
#include "socklib.h"

#include "module.h"
#include "sys/types.h"
#include "sys/socket.h"
#include "ctype.h"
#include "netinet/in.h"
#include "netdb.h"
#include "sys/ioctl.h"
#include "sys/types.h"
#include "sys/time.h"
#include "sys/ioctl.h"
#include "arpa/inet.h"
#include "sys/errno.h"
#include "dns.h"
#include "protocol.h"
#include "generic.h"
#include "connect.h"

int make_sock_nonblocking(int fd)
{
	int one = 1;

	if (socketioctl(fd, FIONBIO,  &one) < 0) return 0;
	if (socketioctl(fd, FIOASYNC, &one) < 0) return 0; /* Causes Internet events */
	return 1;
}

/************************************************************************/
/* opensock(host, port, portname, pointer to state, current descriptor) */
/************************************************************************/
/* This function is responsible for initiating connections to remote	*/
/* hosts.  It tries to connect to "host" on the port specified by the	*/
/* "sername" parameter unless this is NULL - in which case the "port"	*/
/* parameter is used.  "port" is ignored if "sername" is non-NULL	*/
/* This function must fill in the state with the appropriate state so	*/
/* that when the ReadData SWI handler comes to dispatch through the	*/
/* state table, it goes to the right place.  "fd" is the current socket */
/* descriptor or -1 if there is no socket yet.  It will be -1 on the	*/
/* first call (typically from the GetData SWI handler) and then be a	*/
/* real socket handle in subsequent calls from a ReadData FSM handler.  */
/* This function returns the handle of the created socket - the caller  */
/* *must* prefer this to any handle it passed in the "fd" parameter.	*/
/* This function will close the passed "fd" if it so desires.		*/
/* If the return value is <0, this indicates an error (the value is	*/
/* actually "-errno" so you can use the value if you really want to)	*/
/* Note that the socket to be used is always created on the first time  */
/* through this routine and it is left unbound until the DNS lookup	*/
/* has succeeded.  This means that if you happen to use *inetstat to	*/
/* see all the sockets, you'll see a strange entry for a socket with    */
/* an unknown port and unknown protocol.  This is normal and correct.	*/
/************************************************************************/

int opensock(char *name, int port, char *sername, int *state, int fd)
{
	static int can_nonblock = 1;

	int status=-1;
	struct sockaddr_in addr;

	addr.sin_family = AF_INET;
	memset(addr.sin_zero, '\0', sizeof(addr.sin_zero));

	if (sername == NULL) {
		addr.sin_port = htons(port);
	}
	else {
		struct servent *service = NULL;
	        if (strcmp(sername, CONNECT_DEFAULT_PROTOCOL_NAME) != 0) {
		        service = getservbyname(sername, "tcp");
		}
		addr.sin_port = service ? service->s_port : htons(CONNECT_DEFAULT_PORT_NUMBER);
	}

	/* Jump back here if we start a nonblocking connect and then discover
	 * that the platform has a broken read() or select().
	 */
	retry:

	errno = 0;

	if (fd < 0) {
	        /* Persistent connections implemented at this point */
	        /*
	        if (!connpool_find_http(host, htons(addr.sin_port), &addr.sin_addr
	        */
	}
	
	if (fd < 0) {
		#ifdef TRACE
		protocol_debug("Creating socket ...\n");
		#endif
		if ((fd = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
			#ifdef TRACE
			protocol_debug(".. error = %d\n", errno);
			#endif
			*state = CONNECT_ERROR_STATE;
			return -errno;
		}
		#ifdef TRACE
		protocol_debug(".. result = %d\n", fd);
		#endif

		if (can_nonblock) {
			if (!make_sock_nonblocking(fd)) can_nonblock=0;
			#ifdef TML
			Printf("opensock> nonblock=%x (errno=%d)\n",can_nonblock,errno);
			#endif
		}
	}

	status = dns_find_ip_address(name, &addr.sin_addr);
	if (status == EINPROGRESS) {
		#ifdef TRACE
		protocol_debug("dns_find_ip_address(%s) incomplete ... waiting\n", name);
		#endif
		*state = CONNECT_DNS_STATE;
		return fd;
	}
	else if (status != 0) {
		#ifdef TRACE
		protocol_debug("dns_find_ip_address(%s) failed (%d)\n", name, status);
		#endif
		close_socket(&fd);
		*state = CONNECT_CONNECTED_STATE;
		return -status;
	}

	#ifdef TRACE
	protocol_debug("dns_find_ip_address(%s) worked --> %s\n",
		name, inet_ntoa(addr.sin_addr));
	#endif

	/* Set the state */
	*state = CONNECT_CONNECTED_STATE;

	status = connect(fd, (struct sockaddr*)&addr, sizeof(addr));

	if (status == 0) {
		/* The connection completed successfully. */
		#ifdef TRACE
		protocol_debug("connect() returned 0!  Returning %d\n", fd);
		#endif
		return fd;
	}
	else {
		if ((errno == EINPROGRESS) || (errno==0)) {
			#ifdef TML
			Printf("opensock> OK2: returning sd=%d (errno=%d)\n",fd,errno);
			#endif
			#ifdef TRACE
			protocol_debug("errno==0 or EINPROGRESS - returning %d\n", fd);
			#endif
			return fd;
		}
		else {
			if ((errno == EAGAIN) || (errno == EWOULDBLOCK)) {
				#ifdef TML
				Printf("closing %d (errno=%d), trying again\n",fd,errno);
				#endif
				#ifdef TRACE
				protocol_debug("EAGAIN/WOULDBLOCK closing %d\n", fd);
				#endif
				close_socket(&fd);
				can_nonblock = 0;
				goto retry; /* try again */
			}
		}
	}

	#ifdef TRACE
	protocol_debug("connect() return value was %d (errno now %d)\n",
		status, errno);
	#endif
	status = errno;
	close_socket(&fd);
	return -status;
}
