/* Generic (h.protocol)
 *
 * StB - 08/10/97 - These definitions help code legibility tons
 *
 */

/* This is actually a bit-field used as the return flags value in R0 for
 * various protocol module SWIs.  Some common combinations have been
 * included in the list here too
 */
 
typedef enum {
	status_NOT_YET_CONNECTED = 0,
        status_CONNECTED_TO_SERVER = 1,
        status_SENT_REQUEST = 2,
        status_SENT_DATA = 4,
        status_WAIT_INITIAL_RESPONSE = 7,
        status_HAVE_INITIAL_RESPONSE = 8,
	status_WAIT_FOR_BODY = 15,
        status_TRANSFER_IN_PROGRESS = 16,
        status_READING_REPLY = 31,
        status_ALL_DATA_RECEIVED = 32,
        status_ABORTED = 64
} network_protocol_status_flags;

/*************************************************************/
/* These are the values that are found in the done field.    */
/*************************************************************/
typedef enum {
	HTTP_NEWSESSION         =  0,
	HTTP_NOHOST             =  1,
	HTTP_DNS		=  2,
	HTTP_CONNECTING		=  3,
	HTTP_SENDING_REQUEST	=  4,
	HTTP_SENT_REQUEST	=  5,
	HTTP_RECEIVING		=  6,
	HTTP_RECEIVING_BODY	=  7,
	HTTP_RECEIVED		=  8,
	HTTP_DONE		=  9,
	
	/* Timed out.  However, this value is critical, because various parts
	 * of the code rely on "OK" status codes being less than this value
	 * and "Not OK" status codes being >= this value
	 */
	HTTP_CONNECT_TIMED_OUT	= 10,
	
	HTTP_ERROR_READ		= 11, 	/* Error reading data */
	HTTP_ERROR_HOSTNAME	= 12,	/* Unable to lookup hostname */
	HTTP_ERROR		= 13, 	/* General purpose error */
	HTTP_ERROR_NOLINK	= 14, 	/* PPP link is not yet up */
	HTTP_ERROR_BADSESSION	= 15, 	/* Generic 'session not known' */
	HTTP_ERROR_NOCONNECTION	= 16, 	/* Used here for 'connection refused' */
	HTTP_ERROR_BAD_METHOD	= 17,	/* Bad method specified in R2 */
	HTTP_ERROR_NO_PARSE	= 18,	/* Unable to parse URL */
	HTTP_ERROR_NO_PROXY	= 19,	/* Unable to contact the proxy */

	/* The following errors cannot be stored in ses->done because by
	 * their very nature, they indicate a failure to create a session
	 */

	HTTP_ERROR_INIT_ERR	= 20	/* Failed to initiate fetch */
} http_fsm_states;


typedef enum {
        chunkstate_reading_headers,
        chunkstate_wait_chunk_size,
        chunkstate_reading_chunk_data,
        chunkstate_wait_chunk_ending_crlf,
        chunkstate_reading_footers
} http_chunking_fsm_states;


/* Method is NOT a bitfield */
typedef enum {
        method_HTTP_GET 	= 1,
        method_HTTP_HEAD 	= 2,
        method_HTTP_POST	= 4,
        method_HTTP_PUT		= 8
} http_method_in_r2_codes;

/*************************************************************/
/* A debugging thing. Goes to file if the file can be opened */
/* rather than the TML card, since Minerva dont seem to have */
/* TML cards.  	       	     	   	   	     	     */
/*************************************************************/
#pragma -v1
extern void protocol_debug(const char */*format*/, ...);
#pragma -v0
extern void protocol_dump(const char *ptr, int size);

extern char *protocol_states(int state);
extern char *protocol_network_states(int status);

