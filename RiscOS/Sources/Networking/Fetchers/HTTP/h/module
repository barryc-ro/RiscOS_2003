/*
 * HTTP (h.module)
 *
 */

#define TRUE		1
#define FALSE		0

#include "zlib.h"

typedef enum {
	flags_USER_AGENT_IN_R6 = 1,
	flags_DATA_LENGTH_IN_R5 = 2,
	flags_VERBATIM_RESPONSE = 4,  /*Not implemented in anything but FTP*/
	flags_EXTRA_DATA_IN_FILE = 8,
	flags_DELETE_DATA_FILE = 16,
	flags_NO_HEADERS_IN_EXTRA_DATA = 32,
	flags_USING_HTTPS = (1<<29), /* Internal flag - added by HTTP module only */
	flags_NO_COOKIES = (1<<30),
	flags_PROXY = (signed) (1U<<31) /* Added by URL module only */
} http_start_swi_r0_flags;

/* Structure for remembering headers */
typedef struct http_header http_header;
struct http_header {
	http_header	*next;		/* Link to next member */
        char		*header;	/* Pointer into text member - is the HTTP header tag */
        char		*value;		/* Pointer into text member - is the tag value setting */
        char		text[1];	/* Entire header but ':' and "\r\n" represented by '\0' terminators */
};

typedef enum {
	compression_NONE,
	compression_DEFLATE,
	compression_GZIP
} compress_type;

typedef enum {
        compress_INFLATE,
        compress_READ_GZIP_HEADER,
        compress_READ_GZIP_EXTRA,
        compress_READ_GZIP_NAME,
        compress_READ_GZIP_COMMENT,
        compress_READ_GZIP_HCRC,
        compress_FINISHED
} compress_state;


typedef struct {
        int (*s_ioctl)(int /*s*/, unsigned long /*command*/, ...);
        int (*s_creat)(int /*PF*/, int /*SOCK_*/, int /*proto*/);
        int (*s_connect)(int /*s*/, const struct sockaddr */*sin*/, int /*sz_sin*/);
	int (*s_shutdown)(int /*s*/, int /*how*/);
	int (*s_close)(int /*s*/);
	int (*s_getsockopt)(int /*s*/, int /*sol*/, int /*var*/, void */*dataout*/, int */*outsize*/);
	int (*s_write)(int /*s*/, const void */*data*/, size_t /*len*/);
	int (*s_recv)(int /*s*/, void */*data*/, size_t /*size*/, int /*flags*/);
} sock_vtbl;

#include <time.h>

typedef struct session {
	struct		session *next;	/* Pointer to next session */
	int		done;		/* The state of this session */
	unsigned int	id;		/* Client handle */
	int		sd;		/* Socket descriptor */
	int		server_code;	/* Server response code */
	int		size;		/* expected size of retrieved object - 0 if unknown */
	unsigned int	sent;		/* Amount of data sent to the client in total by this module */
	unsigned int	to_send;	/* Amount of data left to send to server */
	unsigned int	total_send;	/* Total size of data to send to server */
	unsigned int	data_wanted;	/* No idea */
	int		method;		/* HTTP method being used - no idea on representation */
	char		*data;		/* Client data to be sent to server?? (not sure) */
	int		data_len;	/* Size of data pointed to by 'data'.  strlen(data) if not known */
	char		*uri;		/* Specific part of the URI */
	char		*url;		/* Full URI of the document being fetched */
	char		*host;		/* Host name of the host being contacted */
	int		port;		/* Port number of the host being contacted */
	char		*endhost;	/* Host name of final target host - needed for HTTP/1.1 */
	int		endport;	/* Port number of final target host */
	char		*agent;		/* User-Agent string to be sent - NULL to use this module's own ID */
	char		*fullreq;	/* The complete request part of the HTTP conversation - NULL if not built yet */
	char		*current_header;/* Used by the header parser when building headers for the client */
	int		final_pump;	/* When non-zero indicates that this is the final header being pumped out */
	int		hdrptr;		/* Offset into header */
	char		*buffer;	/* Internal buffer used by header parser */
	int		bufptr;		/* Current pointer into header buffer */
	int		read_status;	/* Set to non-zero once we have processed the first line of the response */
	int		bufsize;	/* Size of the buffer */
	int		donehead;	/* Great name! */
	int		chunking;	/* Flag indicating we are decoding a chunked transfer */
	int		chunk_bytes;	/* Bytes left in current chunk */
	int		chunk_state;	/* Used to keep track of our buffer state in the de-chunker */
        compress_type   compression;    /* What type of Content-Encoding compression is in use */
        compress_state  compstate;      /* Where is the decompression up to? */
        unsigned int    compflags;      /* Various flags... */
        z_stream        zstream;        /* zlib stream structure */
        Bytef           *compbuf;       /* Temporary buffer to read data into */
        int             compbufsize;    /* How big is that buffer? */
	int		wait_interim;	/* Set to non-zero when waiting for a multi-stage response (eg. HTTP/1.1 POST) */
	int		reused_socket;	/* Set to non-zero when a socket is being re-used on a persistent connection */
	http_header	*headers;	/* List of headers */
	time_t		last;		/* Last activity timeout - used to determine HTTP/1.1 wait delays as of v0.51 */
	int		flags;		/* Caller flags - needed during construction of headers (for cookie flag) */
	const sock_vtbl	*op;		/* Virtual function call table for socket operations */
} Session;


/*************************************************************/
/* Found in ^.c.ses_ctrl				     */
/*************************************************************/
/* These functions are used to manipulate session control    */
/* structures; find, create and kill sessions		     */
/*************************************************************/
extern Session *find_session(unsigned int id);
extern Session *new_session(void);
extern void kill_session(Session */*s*/);
extern void ses_kill_all(void);
extern void session_check(void);
extern void session_init(void);

/*************************************************************/
/* Found in ^.c.connect					     */
/*************************************************************/
/* These functions are used to create a socket, connect it   */
/* to a remote host, and make it non_blocking		     */
/*************************************************************/
extern int opensock(char *name, int port, char *sername, int *state, int fd, Session *ses);

/*************************************************************/
/* Found in ^.c.module					     */
/*************************************************************/
/* The basic module entry points			     */
/*************************************************************
extern _kernel_oserror *module_init(char *cmd_fail,int podule_base,void *pw);
extern _kernel_oserror *module_kill(int fatal, int podule, void *pw);
extern _kernel_oserror *swi_handler(int swi_no,_kernel_swi_regs *r,void *pw);

*/
extern _kernel_oserror *return_error(int status_code);

/*************************************************************/
/* Found in ^.c.start					     */
/*************************************************************/
/* Start a HTTP transaction. Connect to the remote host and  */
/* send the requisit data				     */
/*************************************************************/
_kernel_oserror *http_start(_kernel_swi_regs *r);
_kernel_oserror *https_start(_kernel_swi_regs *r);
int http_retry_request(Session *ses);

/*************************************************************/
/* Found in ^.c.stop					     */
/*************************************************************/
/* Stop a HTTP transaction. Connect to the remote host and   */
/* send the requisit data				     */
/*************************************************************/
_kernel_oserror *http_stop(_kernel_swi_regs *r);
_kernel_oserror *https_stop(_kernel_swi_regs *r);

/*************************************************************/
/* Found in ^.c.readdata				     */
/*************************************************************/
/* Routine to read the result back from a HTTP request	     */
/*************************************************************/
_kernel_oserror *http_readdata(_kernel_swi_regs *r);
_kernel_oserror *https_readdata(_kernel_swi_regs *r);

/*************************************************************/
/* Found in ^.c.status					     */
/*************************************************************/
/* Routine to fake a status request back to the URL module   */
/*************************************************************/
_kernel_oserror *http_status(_kernel_swi_regs *r);
_kernel_oserror *https_status(_kernel_swi_regs *r);

/*************************************************************/
/* Found in ^.c.cookie					     */
/*************************************************************/
/* Routines to handle the cookie SWI interfaces		     */
/*************************************************************/
_kernel_oserror *enumerate_cookies(_kernel_swi_regs *r);
_kernel_oserror *consume_cookie(_kernel_swi_regs *r);
_kernel_oserror *add_cookie(_kernel_swi_regs *r);

/*************************************************************/
/* Found in ^.c.decompress				     */
/*************************************************************/
/* Routines to handle Content-Encoding  		     */
/*************************************************************/
int decompress(Session *ses, char *buffer, int bufsize, int toread, int *rawread);

/*************************************************************/
/* This is the description of the URL module error base and  */
/* where we are within it. We have 32 error messages that    */
/* have been allocated to us.				     */
/*************************************************************/
#define ERROR_BASE  (0x80de00) /* URL module base */
#define HTTP_OFFSET (0x000020) /* HTTP module base */

/* This is the size of the internal header buffer.  Blocks of RMA will
 * be claimed in chunks of this size, and blocks will be extended by
 * this amount if found to be insufficiently long
 */
#define INTERNAL_BUFFER_SIZE	(4096)


extern char *module_realloc(void */*ptr*/, size_t /*size*/);

extern void http_free_agent(void);
