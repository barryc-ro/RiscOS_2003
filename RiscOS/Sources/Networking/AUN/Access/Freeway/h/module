/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright (c) 1995 Acorn Computers Ltd., Cambridge, England
 *
 * $Log$
 * Revision 1.12  95/03/19  18:07:49  kwelton
 * Removed a couple of redundant definitions, and added function prototype
 * for ensure_irqs_off().
 * 
 * Revision 1.11  95/03/19  17:18:21  kwelton
 * fw_service() is a void function, not _kernel_oserror *.
 * 
 * Revision 1.10  95/03/10  17:13:41  kwelton
 * Removed unwanted guff which should be obtained from "sys/dcistructs.h";
 * added another error
 * 
 * Revision 1.9  95/03/07  20:55:42  kwelton
 * Added new internationalised error Err_FWNoInet.
 * 
 * Revision 1.8  95/03/05  16:05:35  kwelton
 * Tidied up scope and declarations of both functions and
 * variables; the module now compiles cleanly with -ffah.
 * 
 * Revision 1.7  95/03/01  09:09:21  pwain
 * Added Domain Printers definition
 * 
 * Revision 1.6  95/02/16  15:39:26  pwain
 * Added SWI "Freeway_Status". With the reson code 0 in R0 this will
 * return 1 if Freeway is running and accepting SWIs or 0 if it is
 * dormant in R1.
 * 
 * Revision 1.5  95/02/02  08:59:51  pwain
 * Changed pickup point for DCI structures from module.h
 * to "sys/dcistructs.h".
 * 
 * Revision 1.4  95/02/01  15:24:23  pwain
 * Added in more debug Printf()s.
 * Changed the way the internet module is 1st checked for to use a searc
 * on its name. (OS Module 18 call)
 * 
 * Revision 1.3  95/01/26  09:42:30  pwain
 * Added in support for loading from system ROM (unordered startup)
 * Debugging of startup using TML cards (CFLAGS = -DDEBUG)
 * General code tidy up to change DCI2-isms to DCI4
 * Tidy of module header (correct declaration of exit routines)
 * 
 * Revision 1.2  95/01/18  14:07:43  pwain
 * *** empty log message ***
 * 
 * Revision 1.1  95/01/03  18:57:33  kwelton
 * Initial revision
 * 
 */

#define REFRESH_INTERVAL  3000
#define REMOVE_TOUT	  200
#define ADD_TOUT	  200
#define DOMAIN_DISK	    1
#define DOMAIN_PRINTER	    2
#define DOMAIN_HOST	    5

struct fwtype
{
    struct fwtype    *fw_next;
    int		      fw_number;
    int		      fw_refcount;
    int		      fw_validate;
    int		      fw_dovalidate;
    int		      fw_authreqtout;
    int		      fw_doauthreq;
    int		      fw_removetout;
    int		      fw_doremove;
    int		      fw_addtout;
    int		      fw_doadd;
    struct object_q  *fw_remobj;      /* remote unauthenticated objects */
#if 0
    struct object_q  *fw_locobj;      /* local unauthenticated objects */
#endif
    struct authreq_q *fw_authreq;     /* list of locally registered auth values */
};

struct fw
{
    int		     fw_rssock;
    int		     fw_rssock1;
    int		     fw_ifcnt;
    u_long	     fw_ifaddrs[5];
    u_long	     fw_ifbcast[5];
    struct address_q *fw_netadrs;
    struct fwtype   *fw_types;
};

struct rs_msg
{
    char	       rs_msgid;
#define REQUEST	       1
#define ADD	       2
#define REMOVE	       3
#define REFRESH	       4
    short	       rs_type;
    short	       rs_format;
    short	       rs_nblocks;
    /* variable length body follows */
};

#define RETRY_INTERVAL	  500
#define MAX_RETRIES	    3

struct object_q
{
    struct object_q   *r_next;
    short	       r_inuse;
    struct in_addr     r_ip;		     /* owner's IP address */
    short	       r_validate;	     /* type refresh interval countdown */
    int		       r_dovalidate;
    int		       r_retries;
    int		       r_format;	     /* 0=unauthenticated, 1=authenticated */
    char	      *r_title;		     /* object name */
    char	      *r_desc;		     /* descriptor field */
    int		       r_desclen;	     /* length of descriptor field */
    int		       r_authval;	     /* authenticator value */
    int		       r_local;		     /* object is local */
};

struct authreq_q
{
    struct authreq_q  *a_next;
    short	      a_refcount;
    int		      a_authval;
};

struct address_q
{
    struct address_q *q_next;
    struct in_addr    q_bcast;
};

#define EventV		     16
#define TickerV		     28
#define Event_Econet_OSProc  16
#define Internet_Event	     19
#define SocketIO	      1
#define Event_Enable	     14
#define Event_Disable	     13

#define FWPORT		   0x8002
#define FWPORT1		   0x8003

#define Service_FreewayStarting	   0x95
#define Service_FreewayTerminating 0x96

#define UpCall_Freeway 12

#define FW_ADDED    0
#define FW_REMOVED  1
#define FW_CHANGED  2
#define FW_DELETED  3

#define Service_FindNetworkDriver   0x84

#define MSG_FILE "Resources:$.Resources.Freeway.Messages"

#ifndef Econet_EnumerateMap
#define Econet_EnumerateMap	 0x4001e
#endif

struct eblk
{
    int	  err_nbr;
    char *err_token;
};

#define Err_FWType     1
#define Err_FWOExt     2
#define Err_FWONex     3
#define Err_FWDBuf     4
#define Err_FWNBuf     5
#define Err_FWNMem     6
#define Err_FWOUnk     7
#define Err_FWNNet     8
#define Err_FWLStr     9
#define Err_FWNLoc     10
#define Err_FWNAut     11
#define Err_FWNoInet   12
#define Err_FWStatus   13
#define Err_FWInvalSWI 14

/*
 * Used to pick up on new device drivers starting.
 */
#ifdef OldCode
#define DCIDeviceStatus 0x9d
#define DCIProtocol 0x9f
#define DCIEnumDrivers 0x9b
#endif

#include "kernel.h"
#include "netinet/in.h"

/*
 * function declarations
 */
extern _kernel_oserror *fw_init(char *cmd_tail, int pbase, void *pw);
extern _kernel_oserror *fw_cli_handler(char *arg_string, int arg_count,
				       int cmd_no, void *pw);
extern _kernel_oserror *fw_swi_handler(int swinum, _kernel_swi_regs *r,
				       void *pw);
extern _kernel_oserror *fw_error(int error);
extern _kernel_oserror *RegisterType(_kernel_swi_regs *r);
extern _kernel_oserror *WriteObject(_kernel_swi_regs *r);
extern _kernel_oserror *ReadObject(_kernel_swi_regs *r);
extern _kernel_oserror *EnumerateObjects(_kernel_swi_regs *r);

extern struct fwtype *gettype(int type);

extern struct in_addr inet_makeaddr(int net, int host);

extern int type_id(char *str);
extern int callb_handler(void);
extern int tick_handler(void);
extern int readdevice_handler(void);
extern int fw_event_handler(int *r);

extern char *inet_ntoa(struct in_addr in);

extern u_long ntohl(u_long x);
extern u_long htonl(u_long x);
extern u_short ntohs(u_short x);
extern u_short htons(u_short x);

extern void setcallback(void);
extern void fw_service(int service_number, _kernel_swi_regs *r, void *pw);
extern void fw_upcall(int upc, int type, struct object_q *rq);
extern void do_protocol(struct fwtype *f, u_long dest, struct object_q *rq,
			int msgid, int format, int rauthval, int skipauth);
extern void process_message(u_long src, struct rs_msg *rsm, int len,
			    int format);
extern void check_objects(struct fwtype *f);
extern void do_objects_on_callback(void);

extern u_long local_adr;
extern int doobjects;
extern struct fw fw;

#ifdef DEBUG
extern void Printf(char *format, ...);
#endif

			     /* .oOo. */
extern int fw_event_entry(char *pw);
extern int tick_entry(char *pw);

extern int ensure_irqs_off(void);
extern int ensure_irqs_on(void);
extern void restore_irqs(int s);

extern void do_objects_on_callback(void);
extern void check_objects(struct fwtype *f);
extern void do_protocol(struct fwtype *f, u_long dest, struct object_q *rq,
			int msgid, int format, int rauthval, int skipauth);
extern void process_message(u_long src, struct rs_msg *rsm,
			    int len, int format);

extern _kernel_oserror *RegisterType(_kernel_swi_regs *r);
extern _kernel_oserror *ReadObject(_kernel_swi_regs *r);
extern _kernel_oserror *WriteObject(_kernel_swi_regs *r);
extern _kernel_oserror *EnumerateObjects(_kernel_swi_regs *r);

/* EOF module.h */
