/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright (c) 1995 Acorn Computers Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 * Revision 1.2  95/03/05  16:05:25  kwelton
 * Tidied up scope and declarations of both functions and
 * variables; the module now compiles cleanly with -ffah.
 * 
 * Revision 1.1  95/01/03  18:59:35  kwelton
 * Initial revision
 * 
 */
#include <stdio.h>

#include "sys/types.h"
#include "netinet/in.h"

#include "module.h"

/**********************************************************************/

/*
 * Convert network-format internet address
 * to base 256 d.d.d.d representation.
 */
char *inet_ntoa(struct in_addr in)
{
	static char b[18];
	register char *p;

	p = (char *)&in;
#define UC(b)	(((int)b)&0xff)
	sprintf(b, "%d.%d.%d.%d", UC(p[0]), UC(p[1]), UC(p[2]), UC(p[3]));
	return (b);
}

/**********************************************************************/

u_long ntohl(u_long x)
{
    return(((x & 0xff) << 24) | ((x & 0xff00) << 8) | \
	   ((x & 0xff0000) >> 8) | ((x & 0xff000000) >> 24));
}

/**********************************************************************/

u_short ntohs(u_short x)
{
    return(((x & 0xff) << 8) | ((x & 0xff00) >> 8));
}

/**********************************************************************/

u_long htonl(u_long x)
{
    return(ntohl(x));
}

/**********************************************************************/

u_short htons(u_short x)
{
    return(ntohs(x));
}

/**********************************************************************/

struct in_addr inet_makeaddr(int net, int host)
{
    u_long addr;

    if (net < 128)
	addr = ((u_long)net << IN_CLASSA_NSHIFT) |
	    ((u_long)host & IN_CLASSA_HOST);
    else if (net < 65536)
	addr = ((u_long)net << IN_CLASSB_NSHIFT) |
	    ((u_long)host & IN_CLASSB_HOST);
    else
	addr = ((u_long)net << IN_CLASSC_NSHIFT) |
	    ((u_long)host & IN_CLASSC_HOST);

    addr = htonl(addr);
    return(*(struct in_addr *)&addr);
}

/**********************************************************************/

/* EOF inetfn.c */
