/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright (c) 1995 ANT Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 * Revision 1.4  95/03/20  14:59:52  kwelton
 * Improved the formatting of the error message printed by module_command()
 * when startup is false.
 *
 * Revision 1.3  95/03/15  11:46:06  pwain
 * Fixed the share::.boot.!shareboot not working for AccessPlus.
 * Upped WINDOWSIZE to 4 for all versions. Added *sharefswindow
 * command to view WINDOWSIZE and set WINDOWSIZE (in internet.c)
 * Version number changed to x.33
 *
 * Revision 1.2  95/02/02  17:09:20  pwain
 * ROM loadable version. Removed some compilation warnings.
 *
 *
 * Revision 1.1  95/01/09  13:53:11  kwelton
 * Initial revision
 *
 */
#include <stdio.h>
#include <stdlib.h>

#include "ker.h"
#include "ModuleWrap.h"
#include "lookup.h"
#include "ralloc.h"
#include "util.h"
#include "remswis.h"
#include "debug.h"
#include "swis.h"
#include "how.h"
#include "msgproc.h"
#include "ticker.h"
#include "modface.h"
#include "freeway.h"

/* #define FIXINETBUG */

char ModuleName[] = "ShareFS";

static int freeway_running=0;
static int no_templates=1;
static int startup=0;
static void check_templates(void);

void module_finalise(void)
{
    filer_clear();		/* P:0 */
    fs_finalise();
    remoted_clear();
    turnoff();
    lookup_clear();
#ifdef DEBUG2
    ticker_clear();
    rfreeall();
#endif
}

void module_service(int service_number, regs * r, void *private_word)
{
    service_number = service_number;	/* P:9942 */
    private_word = private_word;

    if (freeway_running && no_templates) {
#ifdef DEBUG
	Printf("SC>> Looking for templates.\n");
#endif
	check_templates();
	}
    else if ((!freeway_running)&&(service_number==Service_FreewayStarting)) {
#ifdef DEBUG
	Printf("SC>> Freeway now running - Looking for templates.\n");
#endif
	freeway_running=1;
	check_templates();
	}

    if (startup) {
#ifdef DEBUG
	Printf("SC>> Evaluating Service call 0x%x\n", r->r[1]);
#endif
	inet_service(r);
	fs_service(r);
	filer_service(r);
	remoted_service(r);
    }
#ifdef DEBUG
	else Printf("SC>> Ignoring Service call 0x%x\n", r->r[1]);
#endif
}

error *module_command(char *s, int argc, int cmd_no, void *privw)
{
    char buf[256];		/* P:27 */
    char *t;
    char *argv[20];
    int c, f, b;
    argc = argc;
    privw = privw;


    if (freeway_running && no_templates) {
	check_templates();
	}

    if (!startup)
    {
	printf("ShareFS is not fully initialised\n"
	       "Probable reasons:\n"
	       "    a)  cannot find templates file\n"
	       "    b)  Freeway is not running\n");
        return(NULL);
    }

    for (c = 1, f = 0, t = buf; t < buf + sizeof(buf) && (b = *s++) >= ' ';)	/* P:531 */
    {
	if (f)			/* P:225 */
	    *t++ = (b == ' ') ? f = 0 : b;	/* P:188 */
	else
	if (b != ' ')		/* P:225 */
	    argv[c++] = t, *t++ = b, f = 1;	/* P:37 */
    }

    *t = 0;
#ifdef DEBUG2
    {
	extern _kernel_oserror *lasterror;
	if (lasterror)
	    printf("lasterror=%x %s\n", lasterror->errnum, lasterror->errmess);	/* P:2 */
    }

    if (argc >= 2 && !stricmp(argv[1], "debug"))	/* P:15 */
    {
	debug = atoi(argv[2]);
	return 0;
    }				/* P:14 */

    if (argc >= 2 && !strnicmp(argv[1], "rallocDEBUG ", 10))	/* P:8 */
    {
	rallocdebug = atoi(argv[2]);	/* P:0 */
	return NULL;		/* P:0 */
    }
    else if (argc >= 1 && !strnicmp(argv[1], "rcheckall", 9))	/* P:29 */
    {
	rcheckall();		/* P:0 */
	return NULL;		/* P:0 */
    }
#endif

#ifdef PROFILING
    else if (argc >= 2 && !stricmp(argv[1], "mapstore"))	/* P:22 */
    {
	_fmapstore(argv[2]);
	return 0;
    }				/* P:9 */
#endif

#ifdef ACCESSPLUS
    if (cmd_no==10) /* Set window size added 150395 */
#else
    if (cmd_no==8) /* Set window size added 150395 */
#endif
	return setwindowsize(cmd_no,argc,argv);
    else
    if (cmd_no < 3)
	return remoted_command(cmd_no, argc, argv);	/* P:22 */
#ifdef ACCESSPLUS
    else if (cmd_no < 8)
#else
    else if (cmd_no < 6)
#endif
	return DoCommand(cmd_no - 3, argc, argv);	/* P:0 */
    else
#ifdef ACCESSPLUS
	return filer_command(cmd_no - 8, argc, argv);	/* P:3 */
#else
	return filer_command(cmd_no - 6, argc, argv);	/* P:3 */
#endif
}

error *module_swi(int swinum, regs * r, void *privw)	/**/
{
    _kernel_oserror *remoted_addexport(char *mountname, char *exportpath,
				       struct how how, int pin); /* P:0 */
    _kernel_oserror *remoted_removeexport(char *mountname);

    privw = privw;

    if (freeway_running && no_templates) {
#ifdef DEBUG
	Printf("SWI> Looking for templates.\n");
#endif
	check_templates();
	}

    if (startup) {
#ifdef DEBUG
	Printf("SWI> Evaluating SWI: %d.\n",swinum);
#endif
        switch (swinum)		/* P:0 */
        {
          case ShareFS_CreateShare & 63:	/* P:0 */
	    {
	        struct how how = defaulthow;
	        how.owner = !(r->r[0] & 1);
	        how.readonly = !!(r->r[0] & 2);
	        how.hidden = !!(r->r[0] & 4);
	        how.cdrom = !!(r->r[0] & 020);
	        return remoted_addexport((char *) r->r[1], (char *) r->r[2],
		                                 how, 0);	/* P:0 */
	}

          case ShareFS_StopShare & 63:	/* P:0 */
	    return remoted_removeexport((char *) r->r[1]);	/* P:0 */

          case ShareFS_EnumerateShared & 63:	/* P:0 */
	    return remoted_enumerateexports(r);	/* P:0 */

          default:			/* P:0 */
	    return lookuperr(ERRBadSWI, "BadSWI", ModuleName);	/* P:0 */
	    }
	}

#ifdef DEBUG
    Printf("SWI> Unable to deal SWI %d yet.\n",swinum);
#endif
    return (error *)0;
}

struct moreproc *makemp(moreproc *mp)
{
    moreprocstr m;		/* P:3248 */
    m.fn = mp;			/* Arh! all this to avoid a compiler
				 * warning */
    return *(struct moreproc **) & m;	/* P:3248 */
}

_kernel_oserror *domoreproc(struct moreproc * mp, int client, char *next,
			    int nextsize, char *buf, int bufsize,
			    char **outbuf, int *outbufsize)
{
    return (*((moreprocstr *)&mp)->fn) (client, next, nextsize, buf,
					  bufsize, outbuf, outbufsize);
}

/*
 * Look to see if Freeway is running
 */
static error *module_find_freeway(int *found_freeway)
{
    int pos=0;
    int addr;
    char descriptor;
    char name[30];
    _kernel_oserror *err;

    /*
     * This is a simple (?) call to Freeway to see if it exists.
     * If freeway is running, the SWI is claimed, or if it is
     * dormant it is lost. Basically just check for an error to be
     * returned.
     */
#ifdef DEBUG
    Printf("SFS> Trying to find Freeway\n");
#endif
    err=_swix(Freeway_Enumerate, _INR(0, 7) | _OUTR(6, 7), 0,
	    DOMAIN_DISCS, sizeof(name), &name, sizeof(descriptor),
	    &descriptor, 0, pos, &addr, &pos);

    /*
     * If there is an error it doesnt really mean Freeway isnt running
     */
    if (err) {
	/*
	 * Since we are doing a probe for known Domain Disks if there is
	 * an error and it is "Type not registered" we can assume
	 * that Freeway is running.
	 */
        if (err->errnum != 0x809f00) {
#ifdef DEBUG
            Printf("SFS> SWI call failed. Waiting for Freeway to start.\n");
            Printf("SFS> SWI error: %x\n", err->errnum);
            Printf("SFS> SWI error: %s\n", err->errmess);
#endif
            return (error *)0;
            }
	}
    /*
     * Freeway is up and running!
     */
#ifdef DEBUG
    Printf("SFS> SWI call okay. Freeway is running.\n");
#endif
    *found_freeway=1;
    return (error *)0;
}

/*
 * This is the real finalisation code.
 */
static error *module_finish_init(void)
{
    error *err;

    err = remoted_init();       /* P:3 */

    if (err)
        lookup_clear();         /* P:0 */
    else {
        CallAfter((void (*) ()) turnon, 0);     /* P:3 */
        /*
         * If we get this far we must be running!
         */
        startup=1;
        }

    return err;                 /* P:3 */
}

/*
 * This routine looks to see if templates can be found and if so reads them
 * in. It also completes the rest of the initialisation, and if freeway is
 * running tries to tell it we exist.
 */
static void check_templates(void) {
    _kernel_oserror *err;
    _kernel_swi_regs r;

    r.r[1]=Service_FreewayStarting;

#ifdef DEBUG
    Printf("CTP> checking for templates.\n");
#endif

    /*
     * Try and open the messages file.
     */
    lookup_init("Resources:$.Resources.ShareFS.messages");

    /*
     * Now try and open the templates file for the Access filer
     */
    err = filer_init(&no_templates);
#ifdef DEBUG
    Printf("CTP> Done checking for templates. Result: %d\n",no_templates);
#endif

    /*
     * If we dont have templates, wait. (i.e. return no error)
     */
    if (no_templates) {
#ifdef DEBUG
       Printf("CTP> Templates not found - waiting.\n");
#endif
       return;
       }

    /*
     * This is treated separatly for the debug case.
     */
    else if (err) {

#ifdef DEBUG
       Printf("CTP> General error: %x (%d)\n",err->errnum,err->errnum);
       Printf("CTP> General error: %s\n",err->errmess);
#endif
       return;
       }

    /*
     * Finish off the initialisation process now that we have the
     * messages and templates files loaded.
     */
#ifdef DEBUG
    Printf("CTP> Templates found - initialising.\n");
#endif
    module_finish_init();

    }

/*
 * The main initialisation code.
 */

error *module_initialise(char *cmd_tail, int podule_base, void *privw)
{
    error *err;			/* P:3 */

    cmd_tail = cmd_tail;
    podule_base = podule_base;

    private_word = privw;

    /*
     * Setup some globals in the file handler code.
     */
#ifdef DEBUG
    Printf("MI>> FS initialise.\n");
#endif
    err = fs_initialise();
    if (err)
	return err;		/* P:0 */

#ifdef FIXINETBUG
    {
	/*
	 * Fix up bug in gethostent routine, using zapped version
	 * with global labels
	 */
	extern char hostaddr[];
	extern char *host_addrs[2];
	host_addrs[0] = hostaddr;
    }
#endif

    /*
     * Grr.. because a module is not in the service chain during its
     * initialisation, be have to wait till a callback to enable the
     * transport
     */

    /*
     * Basically it goes like this. There isnt any point starting if
     * we dont have freeway up and running...
     */
#ifdef DEBUG
    Printf("MI>> Looking for Freeway.\n");
#endif
    err = module_find_freeway(&freeway_running);
    if (!freeway_running) {
#ifdef DEBUG
       Printf("MI>> Freeway not found.\n");
#endif
       return (error *)0;
       }
    else if (err) {
#ifdef DEBUG
       Printf("MI>> Freeway error - aborting.\n");
#endif
       return err;
       }

    /*
     * .... _OR_ if we dont have the required templates....
     */
#ifdef DEBUG
    Printf("MI>> Looking for templates.\n");
#endif
    check_templates();

    /* Check templates now finishes initialisation so we dont need to
     * do that here. This allows for initialisation to be finished as
     * soon as we can. -- 310195
     */
    return (error *)0;
}

/* EOF share.c */
