/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright (c) 1995 ANT Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 * Revision 1.3  95/09/15  10:34:02  pwain
 * Opps! Forgot to add the "dummy" integer parameter to filer_init. 
 * We can ignore the return value this produces since we are not ROM\
 * based in any way shape or form!
 * 
 * Revision 1.2  95/09/15  10:26:43  pwain
 * Added -protected option. Removed code which made -protected cause a
 * warning.
 * 
 * Revision 1.1  95/01/09  13:53:30  kwelton
 * Initial revision
 * 
 */
#include <stdio.h>
#include <stdlib.h>

#include "ker.h"
#include "ModuleWrap.h"
#include "lookup.h"
#include "ralloc.h"
#include "util.h"
#include "remswis.h"
#include "debug.h"
#include "swis.h"
#include "how.h"
#include "msgproc.h"
#include "ticker.h"
#include "modface.h"

/* #define FIXINETBUG */

char ModuleName[] = "ShareFS";

void module_finalise(void)
{
    filer_clear();		/* P:0 */
    fs_finalise();
    remoted_clear();
    turnoff();
    lookup_clear();
#ifdef DEBUG
    ticker_clear();
    rfreeall();
#endif
}

error *module_initialise(char *cmd_tail, int podule_base, void *privw)
{
    error *err;			/* P:3 */
    int no_templates;

    private_word = privw;
    cmd_tail = cmd_tail;
    podule_base = podule_base;
    atexit(module_finalise);
    lookup_init("ShareFS:Messages");
    err = fs_initialise();
    if (err)
	return err;		/* P:0 */
#ifdef FIXINETBUG
    {				/* Fix up bug in gethostent routine,
				 * using zapped version with global
				 * labels */
	extern char hostaddr[];
	extern char *host_addrs[2];
	host_addrs[0] = hostaddr;
    }
#endif

    /*
     * Grr.. because a module is not in the service chain during its
     * initialisation, be have to wait till a callback to enable the
     * transport
     *
     * We can ignore the no_templates bit cos we are not in ROM
     */
    err = filer_init(&no_templates);
    if (!err)
	err = remoted_init();	/* P:3 */
    if (err)
	lookup_clear();		/* P:0 */
    else
	CallAfter((void (*) ()) turnon, 0);	/* P:3 */
    return err;			/* P:3 */
}

void module_service(int service_number, regs *r, void *private_word)
{
    service_number = service_number;	/* P:9942 */
    private_word = private_word;
    inet_service(r);
    fs_service(r);
    filer_service(r);
    remoted_service(r);
}

error *module_command(char *s, int argc, int cmd_no, void *privw)
{
    char buf[256];		/* P:27 */
    char *t;
    char *argv[20];
    int c, f, b;
    argc = argc;
    privw = privw;
    for (c = 1, f = 0, t = buf; t < buf + sizeof(buf) && (b = *s++) >= ' ';)	/* P:531 */
    {
	if (f)			/* P:225 */
	    *t++ = (b == ' ') ? f = 0 : b;	/* P:188 */
	else
	if (b != ' ')		/* P:225 */
	    argv[c++] = t, *t++ = b, f = 1;	/* P:37 */
    }
    *t = 0;
#ifdef DEBUG
    {
	extern _kernel_oserror *lasterror;
	if (lasterror)
	    printf("lasterror=%x %s\n", lasterror->errnum, lasterror->errmess);	/* P:2 */
    }
    if (argc >= 2 && !stricmp(argv[1], "debug"))	/* P:15 */
    {
	debug = atoi(argv[2]);
	return 0;
    }				/* P:14 */
    if (argc >= 2 && !strnicmp(argv[1], "rallocDEBUG ", 10))	/* P:8 */
    {
	rallocdebug = atoi(argv[2]);	/* P:0 */
	return NULL;		/* P:0 */
    }
    else
    if (argc >= 1 && !strnicmp(argv[1], "rcheckall", 9))	/* P:29 */
    {
	rcheckall();		/* P:0 */
	return NULL;		/* P:0 */
    }
#endif
#ifdef PROFILING
    else
    if (argc >= 2 && !stricmp(argv[1], "mapstore"))	/* P:22 */
    {
	_fmapstore(argv[2]);
	return 0;
    }				/* P:9 */
#endif
    if (cmd_no < 3)
	return remoted_command(cmd_no, argc, argv);	/* P:22 */
    else
    if (cmd_no < 6)
	return DoCommand(cmd_no - 3, argc, argv);	/* P:0 */
    else
	return filer_command(cmd_no - 6, argc, argv);	/* P:3 */
}

error *module_swi(int swinum, regs *r, void *privw)	/**/
{
    _kernel_oserror *remoted_addexport(char *mountname, char *exportpath, struct how how, int pin);	/* P:0 */
    _kernel_oserror *remoted_removeexport(char *mountname);
    privw = privw;

    switch (swinum)		/* P:0 */
    {
      case ShareFS_CreateShare & 63:	/* P:0 */
	{
	    struct how how = defaulthow;

#ifdef OldCode
	    /* 
	     * If we are only allowing -readonly and NOT -protected 
	     * issue a warning.
	     */
	    if (r->r[0] & 1 || !(r->r[0] & 2))
		return lookuperr(ERRExport, "Export", ModuleName);
#endif /* OldCode */

	    how.owner = !(r->r[0] & 1);
	    how.readonly = !!(r->r[0] & 2);
	    how.hidden = !!(r->r[0] & 4);
	    return remoted_addexport((char *) r->r[1], (char *) r->r[2], how, 0);	/* P:0 */
	}
      case ShareFS_StopShare & 63:	/* P:0 */
	return remoted_removeexport((char *) r->r[1]);	/* P:0 */
      case ShareFS_EnumerateShared & 63:	/* P:0 */
	return remoted_enumerateexports(r);	/* P:0 */
      default:			/* P:0 */
	return lookuperr(ERRBadSWI, "BadSWI", ModuleName);	/* P:0 */
	}
}

struct moreproc *makemp(moreproc *mp)
{
    moreprocstr m;		/* P:3248 */
    m.fn = mp;			/* Arh! all this to avoid a compiler
				 * warning */
    return *(struct moreproc **) & m;	/* P:3248 */
}

_kernel_oserror *domoreproc(struct moreproc * mp, int client, char *next,
			    int nextsize, char *buf, int bufsize,
			    char **outbuf, int *outbufsize)
{
    return (*((moreprocstr *) & mp)->fn) (client, next, nextsize, buf,
					  bufsize, outbuf, outbufsize);
}

/* EOF shares.c */
