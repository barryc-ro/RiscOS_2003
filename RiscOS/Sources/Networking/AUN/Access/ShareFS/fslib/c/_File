/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright(c) 1995 ANT Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 * Revision 1.1  95/01/04  17:56:56  kwelton
 * Initial revision
 * 
 */

/* $Id$ */
#if 0
# define DEBUG
#endif

#include "FS.h"

_kernel_oserror *fsentry_file(FSEntry_File_Parameter *parm)
{
    _kernel_oserror *err = NULL;
    FileEntry *fse = NULL;
    FileDesc d;
#ifdef DEBUG
    printf("File( %d )%s\n", parm->reason, parm->name);
#endif

    switch (parm->reason)
    {
      case FSEntry_File_Reason_LoadFile:
	err = FileEntry_Open(NULL, fixsf(parm->special_field),
			     parm->name, OPENIN, &fse);
	if (!err)
	{
	    int pos = 0, len;
	    d = FileEntry_Desc(fse);
	    while (pos < d.length)
	    {
		err = FileEntry_GetBytes(fse,
					 parm->info.load_exec.load_address,
					 pos, d.length, &pos, &len);
		if (err)
		    return err;
		if (!len)
		    return ERR(EOF);
	    }
	    parm->info = d.info;
	    parm->extras.info.length = d.length;
	    parm->extras.info.attributes = d.attr;
	    parm->special_field = FileEntry_Name(fse);
	    FileEntry_Close(fse);
	}
	break;

      case FSEntry_File_Reason_CreateFile:
        {
	    int n = parm->extras.location.end - parm->extras.location.start;
	    err = FileEntry_Open(NULL, fixsf(parm->special_field),
				 parm->name, CREATE, &fse);
	    if (!err)
	    {
		err = FileEntry_SetLength(fse, n);
		if (!err)
		{
		    FileEntry_SetInfo(fse, parm->info);
		    parm->special_field = FileEntry_Name(fse);
		    FileEntry_Close(fse);
		}
		else
		{
		    FileEntry_Close(fse);
		    FileEntry_Delete(NULL, fixsf(parm->special_field),
				     parm->name, &d);
		}
	    }
	}
	break;

      case FSEntry_File_Reason_SaveFile:
	{
	    int n = parm->extras.location.end - parm->extras.location.start;
	    err = FileEntry_Open(NULL, fixsf(parm->special_field),
				 parm->name, CREATE, &fse);
	    if (!err)
	    {
		err = FileEntry_PutBytes(fse, parm->extras.location.start,
					 0, n, &n);
		if (!err)
		{
		    FileEntry_SetInfo(fse, parm->info);
		    parm->special_field = FileEntry_Name(fse);
		    FileEntry_Close(fse);
		}
		else
		{
		    FileEntry_Close(fse);
		    FileEntry_Delete(NULL, fixsf(parm->special_field),
				     parm->name, &d);
		}
	    }
	}
	break;

      case FSEntry_File_Reason_WriteCatalogueInformation:
#ifdef DEBUG
	printf("WriteCatInfo:%p as %x/%x %x\n",
	       fse, parm->info, parm->extras.info.attributes);
#endif
	err = FileEntry_Open(NULL, fixsf(parm->special_field),
			     parm->name, OPENIN, &fse);
	if (err)
	{
	    if (err->errnum == ERRNotFound)
		err = NULL;
	    return err;
	}

	if (!err)
	{
	    FileEntry_SetInfo(fse, parm->info);
	    FileEntry_Close(fse);
	}

	if (!err)
	    err = FileEntry_Access(NULL, fixsf(parm->special_field),
				   parm->name, parm->extras.info.attributes);
	break;

      case FSEntry_File_Reason_WriteLoadAddress:
	err = FileEntry_Open(NULL, fixsf(parm->special_field),
			     parm->name, OPENIN, &fse);
	if (err)
	{
	    if (err->errnum == ERRNotFound)
		err = NULL;
	    return err;
	}
	if (!err)
	{
	    FileDesc d = FileEntry_Desc(fse);
	    Information_Fields info = d.info;
	    info.load_exec.load_address = parm->info.load_exec.load_address;
	    err = FileEntry_SetInfo(fse, info);
	    FileEntry_Close(fse);
	}
	break;

      case FSEntry_File_Reason_WriteExecutionAddress:
	err = FileEntry_Open(NULL, fixsf(parm->special_field),
			     parm->name, OPENIN, &fse);
	if (err)
	{
	    if (err->errnum == ERRNotFound)
		err = NULL;
	    break;
	}
	if (!err)
	{
	    FileDesc d = FileEntry_Desc(fse);
	    Information_Fields info = d.info;
	    info.load_exec.execute_address =
		parm->info.load_exec.execute_address;
	    err = FileEntry_SetInfo(fse, info);
	    FileEntry_Close(fse);
	}
	break;

      case FSEntry_File_Reason_WriteAttributes:
	err = FileEntry_Access(NULL, fixsf(parm->special_field),
			       parm->name, parm->extras.info.attributes);
	if (err && err->errnum == ERRNotFound)
	    err = NULL;
	break;

      case FSEntry_File_Reason_ReadCatalogueInformationNoLength:
      case FSEntry_File_Reason_ReadCatalogueInformation:
	err = FileEntry_Find(NULL, fixsf(parm->special_field),
			     parm->name, &d);
	if (err)
	{
	    parm->reason = (FSEntry_File_Reason)0;
#ifdef DEBUG
	    printf("Find error %d %s\n", err->errnum, err->errmess);
#endif
	    if (err->errnum == ERRNotFound)
		err = NULL;
	}
	else
	{
	    parm->reason = (FSEntry_File_Reason)d.type;
	    parm->info = d.info;
	    parm->extras.info.length = d.length;
	    parm->extras.info.attributes = d.attr;
	}
	break;

      case FSEntry_File_Reason_DeleteObject:
	{
	    err = FileEntry_Delete(NULL, fixsf(parm->special_field),
				   parm->name, &d);
	    if (err)
	    {
		parm->reason = (FSEntry_File_Reason)0;
		if (err->errnum == ERRNotFound)
		    err = NULL;
	    }
	    else
	    {
		parm->reason = (FSEntry_File_Reason)d.type;
		parm->info = d.info;
		parm->extras.info.length = d.length;
		parm->extras.info.attributes = d.attr;
	    }
	}
	break;

      case FSEntry_File_Reason_CreateDirectory:
	err = FileEntry_Open(NULL, fixsf(parm->special_field),
			     parm->name, CREATEDIR, &fse);
	if (!err)
	    FileEntry_Close(fse);
	break;

      default:
	err = ERR(BadParm);
	break;
    }
    return err;
}

/* EOF _File.c */
