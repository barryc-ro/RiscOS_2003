/* -*-C-*-
 *
 * Copyright (c) 1995 ANT Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 * Revision 1.2  95/01/09  13:37:09  kwelton
 * The header file _swis.h no longer exists, it has been adsorbed into the
 * (new) system version of swis.h.
 *
 * Revision 1.1  95/01/04  17:57:44  kwelton
 * Initial revision
 *
 */


#include "kernel.h"
#include "swis.h"
#include "ModuleWrap.h"

#include "ticker.h"
#include "AsmUtils/callbacks.h"

#if 0
# define DEBUG
#endif

int numtickers = 0;

struct tickerdetails tickers[MAXTICKERS];

/*
 * This is used to avoid the accumulation of large numbers of callbacks
 * It is tested as zero and set to 1 before adding the callback,
 * and reset to 0 at the /beginning/ of the callback routine.
 */
int havecallback = 0;

void CallEvery(tickerfunc * func, int erval)
{
#ifdef DEBUG
     printf("CallEvery %p %d..", func, erval);
#endif
    if (!numtickers)
	_swix(OS_CallEvery, _INR(0, 2), 1, &tickerafter, private_word);
    if (numtickers < MAXTICKERS)
    {
	tickers[numtickers].func = func;
	tickers[numtickers].interval = erval;
	tickers[numtickers].count = erval;
	numtickers++;
    }
#ifdef DEBUG
    printf("numtickers=%d\n", numtickers);
#endif
}

void CallAfter(tickerfunc * func, int erval)
{
#ifdef DEBUG
     printf("CallAfter %p %d..", func, erval);
#endif
    if (!numtickers)
	_swix(OS_CallEvery, _INR(0, 2), 1, &tickerafter, private_word);
    if (numtickers < MAXTICKERS)
    {
	tickers[numtickers].func = func;
	tickers[numtickers].interval = -1;
	tickers[numtickers].count = erval;
	numtickers++;
    }
    if (!erval && !havecallback)
    {
	havecallback = 1;
	_swix(OS_AddCallBack, _INR(0, 1), &tickerback, private_word);
    }
#ifdef DEBUG
    printf("numtickers=%d\n", numtickers);
#endif
}

void RemoveCallEvery(tickerfunc * func)
{
    int i;
#ifdef DEBUG
    printf("RemoveCallEvery %p..", func);
#endif
    for (i = 0; i < numtickers; i++)
	if (func == tickers[i].func)
	{
	    _swix(OS_IntOff, 0);
	    for (numtickers--; i < numtickers; i++)
		tickers[i] = tickers[i + 1];
	    _swix(OS_IntOn, 0);
	    if (!numtickers)
	    {
		_swix(OS_RemoveTickerEvent, _IN(0) | _IN(1),
		      &tickerafter, private_word);
		usermode_donothing();
	    }
	}
#ifdef DEBUG
    printf("numtickers=%d\n", numtickers);
#endif
}

RETURNMETHOD tickerafter_handler(_kernel_swi_regs * r, void *private_word)
{
    int i, j = 0;
    r = r;
    for (i = 0; i < numtickers; i++)
	if (--tickers[i].count <= 0)
	    j = 1;
    if (j && !havecallback)
    {
	havecallback = 1;
	_swix(OS_AddCallBack, _INR(0, 1), &tickerback, private_word);
    }
    return VIAR14;
}

RETURNMETHOD tickerback_handler(_kernel_swi_regs * r, void *private_word)
{
    int i;
    r = r;
    private_word = private_word;
    havecallback = 0;
    for (i = 0; i < numtickers; i++)
	if (tickers[i].count <= 0)
	{
	    int k = tickers[i].interval;
	    tickerfunc *f = tickers[i].func;
	    if (k <= 0)
		RemoveCallEvery(tickers[i].func);
	    f();
	    if (k > 0)
		tickers[i].count = tickers[i].interval;
	}
    return VIAR14;
}

/* EOF ticker.c */
