/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright(c) 1995 ANT Ltd., Cambridge, England
 *
 * $Log$
 * Revision 1.1  95/01/04  17:56:53  kwelton
 * Initial revision
 * 
 */

/* $Id$ */
#include "FS.h"
#include "RO3ONLY.h"

#if 0
# define DEBUG
#endif

_kernel_oserror *fsentry_args(FSEntry_Args_Parameter *parm)
{
    FileEntry *fe = (FileEntry *)parm->_.handle;
    FileDesc d = FileEntry_Desc(fe);
    _kernel_oserror *err = NULL;

#ifdef DEBUG
    printf("Args(%p,%d,%x)", fe, parm->reason, parm->arg.sequential_pointer);
#endif

    switch (parm->reason)
    {
#if !BUFFEREDONLY
      case FSEntry_Args_Reason_ReadSequentialFilePointer:
	if (d.buffered)
	    return ERR(BadParm);
	parm->arg.sequential_pointer = FileEntry_SeqPtr(fe);
	break;

      case FSEntry_Args_Reason_WriteSequentialFilePointer:
	if (d.buffered)
	    return ERR(BadParm);
	err = FileEntry_SetSeqPtr(fe, parm->arg.sequential_pointer);
	break;
      case FSEntry_Args_Reason_ReadFileExtent:
	if (d.buffered)
	    return ERR(BadParm);
	parm->arg.extent = d.length;
	break;
#endif

      case FSEntry_Args_Reason_WriteFileExtent:
	err = FileEntry_SetLength(fe, parm->arg.extent);
	break;

#if !BUFFEREDONLY
      case FSEntry_Args_Reason_ReadSizeAllocatedToFile:
	parm->arg.allocation_size = FileEntry_Allocated(fe);
	break;

      case FSEntry_Args_Reason_EOFCheck:
	if (d.buffered)
	    return ERR(BadParm);
	parm->_.Not_Yet_EOF = FileEntry_SeqPtr(fe) != d.length;
	break;
#endif
      case FSEntry_Args_Reason_FlushFileBuffer:
	parm->arg.info = d.info;
	err = FileEntry_Flush(fe);
	break;

      case FSEntry_Args_Reason_EnsureFileSize:
        {
#ifdef OldCode
	    _kernel_oserror *err;
	    err = FileEntry_EnsureSize(fe, parm->arg.allocation_size);
#else
	    (void)FileEntry_EnsureSize(fe, parm->arg.allocation_size);
#endif
	    parm->arg.allocation_size = FileEntry_Allocated(fe);
	    break;
	}

      case FSEntry_Args_Reason_WriteZerosToFile:
	err = FileEntry_PutZeros(fe, parm->arg.write_zeros.start,
				 parm->arg.write_zeros.number);
	break;

      case FSEntry_Args_Reason_ReadFileDateStamp:
	parm->arg.info = d.info;
	break;

      case 10:
	break;

      default:
	return ERR(BadParm);
    }
#ifdef DEBUG
    if (!err)
	printf("Args returns R2=%x\n", parm->arg.info);
#endif
    return err;
}

/* EOF _Args.c */
