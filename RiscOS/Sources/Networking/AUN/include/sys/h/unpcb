/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright (c) 1995 Acorn Computers Ltd., Cambridge, England
 *
 * $Log$
 * Revision 1.1  95/01/11  10:20:10  kwelton
 * Initial revision
 * 
 */

/*
 * Copyright (c) 1982, 1986 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 *      @(#)unpcb.h     7.3 (Berkeley) 6/27/88
 */

/*
 * Protocol control block for an active
 * instance of a RISC OS internal protocol.
 *
 * A socket may be connected to another socket, in which
 * case the control block of the socket to which it is connected
 * is given by unp_conn.
 *
 * Stream sockets keep copies of receive sockbuf sb_cc and sb_mbcnt
 * so that changes in the sockbuf may be computed to modify
 * back pressure on the sender accordingly.
 */
struct  unpcb {
        struct  unpcb *unp_next, *unp_prev; /* queue pointers */
        struct  socket *unp_socket;     /* pointer back to socket */
        struct  unpcb *unp_conn;        /* control block of connected socket */
        struct  mbuf *unp_addr;         /* bound address of socket */
        int     unp_cc;                 /* copy of rcv.sb_cc */
        int     unp_mbcnt;              /* copy of rcv.sb_mbcnt */
};

#define sotounpcb(so)   ((struct unpcb *)((so)->so_pcb))

/* EOF unpcb.h */
