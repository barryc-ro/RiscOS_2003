/*
 * $Header$
 * $Source$
 *
 * Copyright (c) 1988 Acorn Computers Ltd., Cambridge, England
 *
 * $Desc$
 * $Log$
 * Revision 1.1  95/01/11  10:19:55  kwelton
 * Initial revision
 * 
 * Revision 1.4  88/09/21  11:17:07  keith
 * Change of name from "version" to "version_string"
 * 
 * Revision 1.3  88/06/17  20:21:35  beta
 * Acorn Unix initial beta version
 * 
 */
/* @(#)systm.h	1.3 87/05/29 3.2/4.3NFSSRC */
/*
 * Copyright (c) 1982, 1986 Regents of the University of California.
 * All rights reserved.  The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
 *
 *	@(#)systm.h	7.1 (Berkeley) 6/4/86
 */

/*
 * Random set of variables
 * used by more than one
 * routine.
 */
extern	char version_string[];		/* system version */

/*
 * Current cpu priority
 */
extern	int cpu_priority;

/*
 * Nblkdev is the number of entries
 * (rows) in the block switch. It is
 * set in binit/bio.c by making
 * a pass over the switch.
 * Used in bounds checking on major
 * device numbers.
 */
int	nblkdev;

/*
 * Number of character switch entries.
 * Set by cinit/prim.c
 */
int	nchrdev;

int	nswdev;			/* number of swap devices */
int	mpid;			/* generic for unique process id's */
char	runin;			/* scheduling flag */
char	runout;			/* scheduling flag */
int	runrun;			/* scheduling flag */
char	kmapwnt;		/* kernel map want flag */
char	curpri;			/* more scheduling */

int	maxmem;			/* actual max memory per process */
int	physmem;		/* physical memory on this CPU */

int	nswap;			/* size of swap space */
int	updlock;		/* lock for sync */
daddr_t	rablock;		/* block to be read ahead */
int	rasize;			/* size of block in rablock */
extern	int intstack[];		/* stack for interrupts */
dev_t	rootdev;		/* device of the root */
struct vnode *rootvp;           /* vnode of root filesystem */
dev_t	dumpdev;		/* device to take dumps on */
long	dumplo;			/* offset into dumpdev */
dev_t	vm_sw_dev;		/* swapping fake device see vm_sw.c */
struct vnode	*swapdev_vp;	/* vnode equivalent to above */
#ifdef	original_exec
dev_t	argdev;			/* device for argument lists */
struct vnode	*argdev_vp;	/* vnode equivalent to above */
#endif	original_exec

#ifdef	arm
extern	int icode[];		/* user init code */
extern	int szicode;		/* its size */
#endif	arm

#ifdef	vax
extern	int icode[];		/* user init code */
extern	int szicode;		/* its size */
#endif	vax

daddr_t	bmap();
caddr_t	calloc();
unsigned max();
unsigned min();
int	memall();
int	uchar(), schar();
int	vmemall();
caddr_t	wmemall();
caddr_t kmem_alloc();	/*  Added for nfs routines  */
swblk_t	vtod();
struct vnode *bdevvp(); /*  Added for specfs routines  */
struct vnode *specvp(); /*  Added for nfs routine nfs_vnodeops.c  */

/*
 * Structure of the system-entry table
 */
extern struct sysent
{
	int	sy_narg;		/* total number of arguments */
	int	(*sy_call)();		/* handler */
} sysent[];

int	noproc;			/* no one is running just now */
char	*panicstr;
int	wantin;
int	boothowto;		/* reboot flags, from console subsystem */
int	selwait;

extern	char vmmap[];		/* poor name! */

/* casts to keep lint happy */
#define	insque(q,p)	_insque((caddr_t)q,(caddr_t)p)
#define	remque(q)	_remque((caddr_t)q)
#define	queue(q,p)	_queue((caddr_t)q,(caddr_t)p)
#define	dequeue(q)	_dequeue((caddr_t)q)
