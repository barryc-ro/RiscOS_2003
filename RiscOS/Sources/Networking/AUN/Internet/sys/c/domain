/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright(c) 1994 Acorn Computers Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 * Revision 1.1  94/12/02  11:47:26  kwelton
 * Initial revision
 * 
 */
/*
 * Copyright (c) 1983, 1986 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */
#include "kernel.h"

#include "sys/param.h"
#include "sys/socket.h"
#include "sys/protosw.h"
#include "sys/domain.h"
#include "sys/time.h"

#define ADDDOMAIN(x)	{ \
	extern struct domain x/**/domain; \
	x/**/domain.dom_next = domains; \
	domains = &x/**/domain; \
}

domaininit()
{
    register struct domain *dp;
    register struct protosw *pr;

#ifdef RISCOSDOMAIN
    ADDDOMAIN(riscos);
#endif

    ADDDOMAIN(inet);
    for (dp = domains; dp; dp = dp->dom_next)
    {
	if (dp->dom_init)
	    (*dp->dom_init)();

	for (pr = dp->dom_protosw; pr < dp->dom_protoswNPROTOSW; pr++)
	    if (pr->pr_init)
		(*pr->pr_init)();
    }

    null_init();
    pffasttimo();
    pfslowtimo();
}

struct protosw *pffindtype(int family, int type)
{
    register struct domain *dp;
    register struct protosw *pr;

    for (dp = domains; dp; dp = dp->dom_next)
	if (dp->dom_family == family)
	    goto found;

    return (0);

  found:
    for (pr = dp->dom_protosw; pr < dp->dom_protoswNPROTOSW; pr++)
	if (pr->pr_type && pr->pr_type == type)
	    return (pr);

    return (0);
}

struct protosw *pffindproto(int family, int protocol, int type)
{
    register struct domain *dp;
    register struct protosw *pr;
    struct protosw *maybe = 0;

    if (family == 0)
	return (0);

    for (dp = domains; dp; dp = dp->dom_next)
	if (dp->dom_family == family)
	    goto found;

    return (0);

  found:
    for (pr = dp->dom_protosw; pr < dp->dom_protoswNPROTOSW; pr++)
    {
	if ((pr->pr_protocol == protocol) && (pr->pr_type == type))
	    return (pr);

	if (type == SOCK_RAW && pr->pr_type == SOCK_RAW &&
	    pr->pr_protocol == 0 && maybe == (struct protosw *)0)
	    maybe = pr;
    }

    return (maybe);
}

pfctlinput(int cmd, struct sockaddr *sa)
{
    register struct domain *dp;
    register struct protosw *pr;

    for (dp = domains; dp; dp = dp->dom_next)
	for (pr = dp->dom_protosw; pr < dp->dom_protoswNPROTOSW; pr++)
	    if (pr->pr_ctlinput)
		(*pr->pr_ctlinput)(cmd, sa);
}

pfslowtimo()
{
    register struct domain *dp;
    register struct protosw *pr;

    for (dp = domains; dp; dp = dp->dom_next)
	for (pr = dp->dom_protosw; pr < dp->dom_protoswNPROTOSW; pr++)
	    if (pr->pr_slowtimo)
		(*pr->pr_slowtimo)();

    /*
     * XXX TRACE XXX
     *
     * use HZ (100) rather than hz (50).  This *really*
     * needs sorting out to determine which is the
     * correct value
     */
    timeout(pfslowtimo, (caddr_t)0, HZ/2);
}

pffasttimo()
{
    register struct domain *dp;
    register struct protosw *pr;

    for (dp = domains; dp; dp = dp->dom_next)
	for (pr = dp->dom_protosw; pr < dp->dom_protoswNPROTOSW; pr++)
	    if (pr->pr_fasttimo)
		(*pr->pr_fasttimo)();

    timeout(pffasttimo, (caddr_t)0, HZ/5);
}

/* EOF domain.c */
