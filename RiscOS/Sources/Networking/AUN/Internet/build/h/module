/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright(c) 1994 Acorn Computers Ltd., Cambridge, England
 *
 * Module specific information
 *
 * :RCS Log discontinued:
 * Revision 1.5  95/03/31  14:07:08  kwelton
 * Changed PANICBUFLEN to 81.
 * 
 * Revision 1.4  95/03/31  11:15:35  kwelton
 * Added some function prototypes and structures for keeping track of
 * outstanding callbacks - this allows pending callbacks to be removed
 * during module finalisation.
 * 
 * Revision 1.3  95/02/28  18:51:15  kwelton
 * Added a nasty scheme which "tunnels" RISC OS error blocks through
 * integer error numbers/
 * 
 * Revision 1.2  95/01/03  14:14:31  kwelton
 * Added define for length of panic buffer
 * 
 * Revision 1.1  94/12/02  09:55:51  kwelton
 * Initial revision
 * 
 */

/*
 * length of panic buffer
 */
#define PANICBUFLEN	81

/*
 * function prototypes
 */
int if_module_output(struct ifnet *ifp, struct mbuf *m0, struct sockaddr *dst);
int if_module_ioctl(struct ifnet *ifp, int cmd, char *data);
int if_module_null(void);
int if_module_none(void);
_kernel_oserror *claim_frames(struct ifnet *ifp, int claim);

int looutput(struct ifnet *ifp, struct mbuf *m0, struct sockaddr *dst);
int loioctl(struct ifnet *ifp, int cmd, caddr_t data);
int callback(int callbackno);

void callback_entered(int callbackno);

/*
 * structures for handling callbacks, which
 * allow us to keep a record of outstanding
 * transient callbacks
 */
#define CALLB_CALLB	0
#define CALLB_STARTUP	1
#define NCALLBACKS	2

struct callback_record
{
    void (*cb_entry)();
    int    cb_outstanding;
} callbacks[NCALLBACKS];

/*
 * some nasty error handling - we sometimes need to "tunnel"
 * RISC OS error blocks through integer function returns;
 * the following error number and error block is used to
 * achieve this.
 */
_kernel_oserror errtunnel;
#define ETUNNEL		128

/* EOF module.h */
