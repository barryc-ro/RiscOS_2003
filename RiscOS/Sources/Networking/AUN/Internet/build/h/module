/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright(c) 1994 Acorn Computers Ltd., Cambridge, England
 *
 * Module specific information
 *
 * :RCS Log discontinued:
 * Revision 1.5  95/03/31  14:07:08  kwelton
 * Changed PANICBUFLEN to 81.
 *
 * Revision 1.4  95/03/31  11:15:35  kwelton
 * Added some function prototypes and structures for keeping track of
 * outstanding callbacks - this allows pending callbacks to be removed
 * during module finalisation.
 *
 * Revision 1.3  95/02/28  18:51:15  kwelton
 * Added a nasty scheme which "tunnels" RISC OS error blocks through
 * integer error numbers/
 *
 * Revision 1.2  95/01/03  14:14:31  kwelton
 * Added define for length of panic buffer
 *
 * Revision 1.1  94/12/02  09:55:51  kwelton
 * Initial revision
 *
 */

#ifndef __kernel_h
#include "kernel.h"
#endif

/*
 * length of panic buffer
 */
#define PANICBUFLEN	81

#define SOCKTABSIZE	96

/*
 * function prototypes
 */
int if_module_output(struct ifnet *ifp, struct mbuf *m0, struct sockaddr *dst, struct rtentry *);
int if_module_ioctl(struct ifnet *ifp, int cmd, caddr_t data);
int if_module_null();
int if_module_none();
_kernel_oserror *claim_frames(struct ifnet *ifp, int claim);

int callback(int callbackno);

void callback_entered(int callbackno);

void sendsignals(int sockid);
void sendallsignals(void);

/*
 * #defines for the usual BSD string functions etc
 */
#define bcopy(src, dst, length) memcpy(dst, src, length)
#define bcmp(b1, b2, length) memcmp(b1, b2, length)
#define bzero(b, length) memset(b, 0, length)
#define htonl(x) ntohl(x)
#define htons(x) ntohs(x)
#define copyin(from, to, count) (memcpy(to, from, count), 0)
#define copyout(from, to, count) (memcpy(to, from, count), 0)
#define ovbcopy(from, to, count) memmove(to, from, count)
#define imin(a, b) ((a) < (b) ? (a) : (b))
#define imax(a, b) ((a) > (b) ? (a) : (b))
#define lmin(a, b) ((u_long)(a) < (u_long)(b) ? (u_long)(a) : (u_long)(b))
#define lmax(a, b) ((u_long)(a) > (u_long)(b) ? (u_long)(a) : (u_long)(b))
#define min(a, b) ((unsigned)(a) < (unsigned)(b) ? (unsigned)(a) : (unsigned)(b))
#define max(a, b) ((unsigned)(a) > (unsigned)(b) ? (unsigned)(a) : (unsigned)(b))
#define gsignal(p, sig) psignal(p, sig)
#define pfind(p) ((struct proc *)p)

/* Stuff that should be in sys/mbuf.h */
extern int	max_linkhdr;			/* largest link-level header */
extern int	max_protohdr;			/* largest protocol header */
extern int	max_hdr;			/* largest link+protocol header */
extern int	max_datalen;			/* MHLEN - max_hdr */

/*
 * An optimisation for interrupts - the APCS means that interrupt state is
 * restored for us on exit from procedures
 */
#ifdef __riscos
#define func_splhi() splhi2()
#define func_splimp() splimp2()
#define func_splx() {}
#define func_splrestore() {}
#else
#define func_splhi() int splstate=splhi()
#define func_splimp() int splstate=splimp()
#define func_splx() splx(splstate)
#define func_splrestore() splrestore(splstate)
#endif

/*
 * structures for handling callbacks, which
 * allow us to keep a record of outstanding
 * transient callbacks
 *
 * Note that tick_entry.s relies on these definitions
 */
#define CALLB_CALLB	0
#define CALLB_STARTUP	1
#define NCALLBACKS	2

struct callback_record
{
    void (*cb_entry)();
    int    cb_outstanding;
} callbacks[NCALLBACKS];

/*
 * Another declaration
 */
extern long siglist[SOCKTABSIZE];

/*
 * some nasty error handling - we sometimes need to "tunnel"
 * RISC OS error blocks through integer function returns;
 * the following error number and error block is used to
 * achieve this.
 */
_kernel_oserror errtunnel;
#define ETUNNEL		128

/* EOF module.h */
