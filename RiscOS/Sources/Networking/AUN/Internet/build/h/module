/*
 * Copyright(c) 1994 Acorn Computers Ltd., Cambridge, England
 *
 * Module specific information
 *
 */

#ifndef __kernel_h
#include "kernel.h"
#endif
#include <string.h>

/*
 * length of panic buffer
 */
#define PANICBUFLEN	81

#define SOCKTABSIZE	96

/*
 * function prototypes
 */
int if_module_output(struct ifnet *ifp, struct mbuf *m0, struct sockaddr *dst, struct rtentry *);
int if_module_ioctl(struct ifnet *ifp, int cmd, caddr_t data);
int if_module_null(struct ifnet *, int, caddr_t);
int if_module_none(struct ifnet *, struct mbuf *, struct sockaddr *, struct rtentry *);
_kernel_oserror *if_module_reclaimmulti(struct ifnet *);
_kernel_oserror *claim_frames(struct ifnet *ifp, int claim);

int callback(int callbackno);
void callback_entered(int callbackno);
void callback_finalise(void);

void revarpintr(void);
void callo_handler(void);

void user_mode_donothing(void);

_kernel_oserror *calleverytick(void (*fun)(void));
void removetickerevent(void (*fun)(void));

void rsignal(struct proc *p, struct mbuf *m, struct sockaddr *sa,
             char *esrc, int unit, int swinum, struct mbuf *n);

void sendsignals(int sockid);
void sendallsignals(void);

int mb_present(void);
void m_copydata(struct mbuf *m, int off, int len, caddr_t cp);
void m_copyback(struct mbuf *m, int off, int len, caddr_t cp);

void insque(void *elem, void *pred);
void remque(void *elem);

int ffs(long);

u_long realtime(long *);
void domaininit(void);
void init_callout(void);
void in_proto_init(void);
void callback_init(void);
void sleeptabinit(void);
void kvm_init(void);
int ensure_irqs_on(void);
void restore_irqs(int);

void setsoftnet(void);

void sc_addrchanged(void);

_kernel_oserror *dci4_mc_request(struct dib *,int/*flags*/,int/*frame type*/,
	u_char */*mac*/, void */*logical addr*/);

extern int rand(void);
extern void srand(unsigned int);



/*
 * #defines for the usual BSD string functions etc
 */
#define bcopy(src, dst, length) memcpy(dst, src, length)
#define bcmp(b1, b2, length) memcmp(b1, b2, length)
#define bzero(b, length) memset(b, 0, length)
#define htonl(x) ntohl(x)
#define htons(x) ntohs(x)
#define copyin(from, to, count) (memcpy(to, from, count), 0)
#define copyout(from, to, count) (memcpy(to, from, count), 0)
#define ovbcopy(from, to, count) memmove(to, from, count)
#define imin(a, b) ((int)(a) < (int)(b) ? (int)(a) : (int)(b))
#define imax(a, b) ((int)(a) > (int)(b) ? (int)(a) : (int)(b))
#define lmin(a, b) ((long)(a) < (long)(b) ? (long)(a) : (long)(b))
#define lmax(a, b) ((long)(a) > (long)(b) ? (long)(a) : (long)(b))
#define min(a, b) ((u_int)(a) < (u_int)(b) ? (u_int)(a) : (u_int)(b))
#define max(a, b) ((u_int)(a) > (u_int)(b) ? (u_int)(a) : (u_int)(b))
#define ulmin(a, b) ((u_long)(a) < (u_long)(b) ? (u_long)(a) : (u_long)(b))
#define ulmax(a, b) ((u_long)(a) > (u_long)(b) ? (u_long)(a) : (u_long)(b))
#define gsignal(p, sig) psignal((struct proc *)(p), (sig))
#define pfind(p) ((struct proc *)(p))

/* Stuff that should be in sys/mbuf.h */
extern int	max_linkhdr;			/* largest link-level header */
extern int	max_protohdr;			/* largest protocol header */
extern int	max_hdr;			/* largest link+protocol header */
extern int	max_datalen;			/* MHLEN - max_hdr */

extern _kernel_oserror *mb_close_session(void);


int splhi(void), splimp(void), splet(void), splnet(void);
void splhi2(void), splimp2(void);
void splx(int), splrestore(int);

/*
 * An optimisation for interrupts - the APCS means that interrupt state is
 * restored for us on exit from procedures
 */
#ifdef __riscos
#define func_splhi() splhi2()
#define func_splimp() splimp2()
#define func_splx() {}
#define func_splrestore() {}
#else
#define func_splhi() int splstate=splhi()
#define func_splimp() int splstate=splimp()
#define func_splx() splx(splstate)
#define func_splrestore() splrestore(splstate)
#endif

/*
 * structures for handling callbacks, which
 * allow us to keep a record of outstanding
 * transient callbacks
 *
 * Note that tick_entry.s relies on these definitions
 */
#define CALLB_CALLB	0
#define CALLB_STARTUP	1
#define NCALLBACKS	2

extern struct callback_record
{
    void (*cb_entry)();
    int    cb_outstanding;
} callbacks[NCALLBACKS];

/*
 * Another declaration
 */
extern long siglist[SOCKTABSIZE];

/*
 * some nasty error handling - we sometimes need to "tunnel"
 * RISC OS error blocks through integer function returns;
 * the following error number and error block is used to
 * achieve this.
 */
extern _kernel_oserror errtunnel;
#define ETUNNEL		128

/* EOF module.h */
