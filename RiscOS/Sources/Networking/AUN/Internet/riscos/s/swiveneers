XOS_Byte                        *       &20006
XOS_Word			*	&20007
XOS_Module			*	&2001E
ModHandReason_Claim		*	6
ModHandReason_Free		*	7
XOS_Claim			*	&2001F
XOS_Release			*	&20020
XOS_GenerateEvent		*	&20022
XOS_ReadEscapeState             *       &2002C
XOS_ServiceCall			*	&20030
XOS_UpCall			*	&20033
XOS_ReadMonotonicTime		*	&20042
XOS_AddCallBack			*	&20054
XOS_ReadSysInfo			*	&20058
XOS_RemoveCallBack		*	&2005F
XEconet_InetRxDirect		*	&6001D
XMessageTrans_FileInfo		*	&61500
XMessageTrans_OpenFile		*	&61501
XMessageTrans_Lookup		*	&61502
XMessageTrans_CloseFile		*	&61504
XPortable_Speed			*	&62FC0
XPortable_ReadFeatures		*	&62FC5
XPortable_Idle			*	&62FC6
XTaskWindow_TaskInfo		*	&63380
XMbuf_OpenSession		*	&6A580
XMbuf_CloseSession		*	&6A581
XMbuf_Control			*	&6A584

Service_EnumerateNetworkDrivers	*	&9B
Service_DCIProtocolStatus	*	&9F
Service_InternetStatus		*	&B0
InternetStatus_AddressChanged	*	0
InternetStatus_InterfaceUpDown	*	2
InternetStatus_DynamicBootStart *       3
InternetStatus_DynamicBootReply *       4
InternetStatus_DynamicBootInform *      7
InternetStatus_DuplicateIPAddress *     8

	EXPORT	mbuf_open_session
	EXPORT	mbufcontrol_version
	EXPORT	mbuf_close_session
	EXPORT	messagetrans_file_info
	EXPORT	messagetrans_open_file
	EXPORT	messagetrans_lookup
	EXPORT	messagetrans_close_file
	EXPORT	service_dci_protocol_status
	EXPORT	service_internetstatus_address_changed
	EXPORT	service_internetstatus_interface_updown
        EXPORT  service_internetstatus_dynamicboot_start
        EXPORT  service_internetstatus_dynamicboot_reply
        EXPORT  service_internetstatus_dynamicboot_inform
        EXPORT  service_internetstatus_duplicate_ip_address
	EXPORT	service_enumerate_network_drivers
	EXPORT	osmodule_free
	EXPORT	osmodule_claim
	EXPORT	os_read_monotonic_time
	EXPORT	os_generate_event
	EXPORT	os_claim
	EXPORT	os_release
	EXPORT	os_add_call_back
	EXPORT	os_remove_call_back
	EXPORT	taskwindow_task_info
	EXPORT	os_upcall
	EXPORT	econet_inet_rx_direct
	EXPORT	osreadsysinfo_hardware0
	EXPORT	osreadsysinfo_machineid
	EXPORT	osword_read_realtime
	EXPORT	portable_read_features
	EXPORT	portable_idle
        EXPORT  os_read_escape_state

        MACRO
        MOVRet  $lr,$cond
        [ {CONFIG}=26
        MOV$cond.S    pc,$lr
        |
        MOV$cond      pc,$lr
        ]
        MEND

        MACRO
        LDMRet  $regs,$cond
        [ {CONFIG}=26
        LDM$cond.FD   sp!,{$regs,pc}^
        |
        LDM$cond.FD   sp!,{$regs,pc}
        ]
        MEND

	AREA	swiveneers,CODE,READONLY,PIC

; _kernel_oserror *mbuf_open_session(struct mbctl *);
	ROUT
mbuf_open_session
	MOV	ip,lr
	SWI	XMbuf_OpenSession
	MOVVC	a1,#0
        MOVRet  ip

; _kernel_oserror *mbufcontrol_version(int *version_out);
	ROUT
mbufcontrol_version
	MOV	ip,lr
        STR     a1,[sp,#-4]!
	MOV	a1,#0
	SWI	XMbuf_Control
	BVS	%F01
	LDR	lr,[sp]
	TEQS	lr,#0
	STRNE	a1,[lr]
	MOV	a1,#0
01	ADD	sp,sp,#4
        MOVRet  ip

; _kernel_oserror *mbuf_close_session(struct mbctl *);
	ROUT
mbuf_close_session
	MOV	ip,lr
	SWI	XMbuf_CloseSession
	MOVVC	a1,#0
        MOVRet  ip

; _kernel_oserror *messagetrans_file_info(const char *filename);
	ROUT
messagetrans_file_info
	MOV	ip,lr
	MOV	a2,a1
	SWI	XMessageTrans_FileInfo
	MOVVC	a1,#0
        MOVRet  ip

; _kernel_oserror *messagetrans_open_file(u_long *fd, const char *filename, char *buffer);
	ROUT
messagetrans_open_file
	MOVS	ip,lr
	SWI	XMessageTrans_OpenFile
	MOVVC	a1,#0
        MOVRet  ip

; _kernel_oserror *messagetrans_lookup(u_long *fd, const char *token, char *buffer, int size, char **result);
	ROUT
messagetrans_lookup
	MOV	ip,sp
	STMFD	sp!,{v1-v4,lr}
	MOV	v1,#0
	MOV	v2,#0
	MOV	v3,#0
	MOV	v4,#0
	SWI	XMessageTrans_Lookup
        LDMRet  "v1-v4",VS
	LDR	lr,[ip]
	TEQS	lr,#0
	STRNE	a3,[lr]
	MOV	a1,#0
        LDMRet  "v1-v4"

; void messagetrans_close_file(u_long *fd);
	ROUT
messagetrans_close_file
	MOVS	ip,lr
	SWI	XMessageTrans_CloseFile
        MOVRet  ip

; void service_dci_protocol_status(void *wsp, int status, int ver, const char *title)
	ROUT
service_dci_protocol_status
	STMFD	sp!,{v1,lr}
	MOV	v1,a4
	MOV	a4,a3
	MOV	a3,a2
	MOV	a2,#Service_DCIProtocolStatus
	SWI	XOS_ServiceCall
        LDMRet  "v1"

; void service_internetstatus_address_changed(void)
	ROUT
service_internetstatus_address_changed
	MOV	ip,lr
	MOV	a1,#InternetStatus_AddressChanged
	MOV	a2,#Service_InternetStatus
	SWI	XOS_ServiceCall
        MOVRet  ip

; void service_internetstatus_interface_updown(int state, const char *name, const void *dib)
	ROUT
service_internetstatus_interface_updown
	STMFD	sp!,{v1,lr}
	MOV	v1,a3
	MOV	a4,a2
	MOV	a3,a1
	MOV	a2,#Service_InternetStatus
	MOV	a1,#InternetStatus_InterfaceUpDown
	SWI	XOS_ServiceCall
        LDMRet  "v1"

; int service_internetstatus_dynamicboot_start(const char *name, const void *dib, char *pkt, int len,
; int eoo, int *error_code)
	ROUT
service_internetstatus_dynamicboot_start
	MOV	ip, sp
	STMFD	sp!,{a1-a4,v1-v6,lr}
	LDMFD	sp!,{a3-a4,v1,v2}
	STMFD	sp!, {ip}
        LDR	v3, [ip]
	MOV	a2,#Service_InternetStatus
	MOV	a1,#InternetStatus_DynamicBootStart
	SWI	XOS_ServiceCall
	LDMFD	sp!, {ip}
	LDR	a4, [ip, #4]
	STRVC	a3, [a4]
	MOVVS	a1, #0
	STRVS	a1, [a4]
	MOVVC	a1, a2
        LDMRet  "v1-v6"

; int service_internetstatus_dynamicboot_reply(const char *name, const void *dib, char *pkt, int len)
	ROUT
service_internetstatus_dynamicboot_reply
	STMFD	sp!,{a1-a4,v1-v6,lr}
	LDMFD	sp!,{a3-a4,v1,v2}
	MOV	a2,#Service_InternetStatus
	MOV	a1,#InternetStatus_DynamicBootReply
	SWI	XOS_ServiceCall
	MOVVS	a1, #Service_InternetStatus
	MOVVC	a1, a2
        LDMRet  "v1-v6"

; int service_internetstatus_dynamicboot_inform(char *pkt, int len)
	ROUT
service_internetstatus_dynamicboot_inform
	STMFD	sp!,{v1-v6,lr}
	MOV	a4, a2
	MOV	a3, a1
	MOV	a2,#Service_InternetStatus
	MOV	a1,#InternetStatus_DynamicBootReply
	SWI	XOS_ServiceCall
	MOVVS	a1, #Service_InternetStatus
	MOVVC	a1, a2
        LDMRet  "v1-v6"

; int service_internetstatus_duplicate_ip_address(const char *name, const void *dib, struct in_addr addr, u_char *hwaddr)
	ROUT
service_internetstatus_duplicate_ip_address
	STMFD	sp!,{v1-v2,lr}
        MOV     v2,a4
        MOV     v1,a3
        MOV     a4,a2
        MOV     a3,a1
	MOV	a2,#Service_InternetStatus
	MOV	a1,#InternetStatus_DuplicateIPAddress
	SWI	XOS_ServiceCall
	MOVVC	a1, a2
        LDMRet  "v1-v2"

; void service_enumerate_network_drivers(ChDibRef *)
	ROUT
service_enumerate_network_drivers
	MOV	ip,lr
	MOV	a4,a1
	MOV	a1,#0
	MOV	a2,#Service_EnumerateNetworkDrivers
	SWI	XOS_ServiceCall
	STRVC	a1,[a4]
	MOVVC	a1,#0
        MOVRet  ip

; void *osmodule_claim(size_t size)
	ROUT
osmodule_claim
	MOV	ip,lr
	MOV	a4,a1
	MOV	a1,#ModHandReason_Claim
	SWI	XOS_Module
	MOVVC	a1,a3
	MOVVS	a1,#0
        MOVRet  ip

; void osmodule_free(void *)
	ROUT
osmodule_free
	MOV	ip,lr
	MOV	a3,a1
	MOV	a1,#ModHandReason_Free
	SWI	XOS_Module
        MOVRet  ip

; u_long os_read_monotonic_time(void)
	ROUT
os_read_monotonic_time
	MOV	ip,lr
	SWI	XOS_ReadMonotonicTime
        MOVRet  ip

; _kernel_oserror *os_generate_event(int, int, int, int)
	ROUT
os_generate_event
	MOV	ip,lr
	SWI	XOS_GenerateEvent
	MOVVC	a1,#0
        MOVRet  ip

; _kernel_oserror *os_claim(int, int (*fun)(), void *)
	ROUT
os_claim
	MOV	ip,lr
	SWI	XOS_Claim
	MOVVC	a1,#0
        MOVRet  ip

; void os_release(int, int (*fun)(), void *)
	ROUT
os_release
	MOV	ip,lr
	SWI	XOS_Release
        MOVRet  ip

; _kernel_oserror *os_add_call_back(int (*fun)(), void *)
	ROUT
os_add_call_back
	MOV	ip,lr
	SWI	XOS_AddCallBack
	MOVVC	a1,#0
        MOVRet  ip

; void os_remove_call_back(int (*fun)(), void *)
	ROUT
os_remove_call_back
	MOV	ip,lr
	SWI	XOS_RemoveCallBack
        MOVRet  ip

; int econet_inet_rx_direct(int, int, int, int, int, int, int)
	ROUT
econet_inet_rx_direct
	MOV	ip,sp
	STMFD	sp!,{v1-v3,lr}
	LDMIA	ip,{v1-v3}
	SWI	XEconet_InetRxDirect
	MOV	a1,a2
        LDMRet  "v1-v3"

; _kernel_oserror *taskwindow_task_info(int, int *)
	ROUT
taskwindow_task_info
	MOV	ip,lr
	MOV	a4,a2
	SWI	XTaskWindow_TaskInfo
	STRVC	a1,[a4]
	MOVVC	a1,#0
        MOVRet  ip

; int os_upcall(int, volatile void *)
	ROUT
os_upcall
	MOV	ip,lr
	SWI	XOS_UpCall
        MOVRet  ip

; unsigned osreadsysinfo_hardware0(void)
	ROUT
osreadsysinfo_hardware0
	STMFD	sp!,{v1,lr}
	MOV	a1,#2
	SWI	XOS_ReadSysInfo
	MOVVS	a1,#0
        LDMRet  "v1"

; void osreadsysinfo_machineid(unsigned int *mac)
	ROUT
osreadsysinfo_machineid
	STMFD	sp!,{v1,lr}
	MOV	ip,a1
	MOV	a1,#2
	SWI	XOS_ReadSysInfo
	STMVCIA	ip,{a4,v1}
        LDMRet  "v1"

; void osword_read_realtime(machinetime *mt)
	ROUT
osword_read_realtime
	MOV	ip,lr
	MOV	a2,a1
	MOV	a1,#14
	MOV	lr,#3
	STRB	lr,[a2]
	SWI	XOS_Word
        MOVRet  ip

PortableFeature_Speed           *       1 :SHL: 0
PortableFeature_Idle            *       1 :SHL: 4
PortableFeature_Stop            *       1 :SHL: 5

; unsigned portable_read_features(void)
	ROUT
portable_read_features
	MOV	ip,lr
	SWI	XPortable_ReadFeatures		; Returns features mask in R1
	BVC	%FT01
	MOV	a1,#0				; Not available - may be an A4.
	MVN	a2,#0				; See if we have Portable_Speed.
	SWI	XPortable_Speed
	MOVVC	a2,#PortableFeature_Speed
	MOVVS	a2,#0
01	MOV	a1,a2
        MOVRet  ip

; void portable_idle(void)
	ROUT
portable_idle
	MOV	ip,lr
	SWI	XPortable_Idle
        MOVRet  ip

; int os_read_escape_state(void)
        ROUT
os_read_escape_state
        MOV     ip,lr
        SWI     XOS_ReadEscapeState
        MOVCC   a1,#0
        MOVCS   a1,#1
        MOVRet  ip

	END
