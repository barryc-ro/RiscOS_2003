;
; Mbuf Manager header file - mmhdr.s
;
; (C) ANT Ltd 1994. All rights reserved.
; ANT Ltd. PO BOX 300. Cambridge, UK, CB1 2EG.
; Author: Borris
;
;-----------------------------------------------------------------------------


        TTL     Mbuf manager (C) ANT Ltd 1994, 1995

        GBLL    Debug
        GBLS    IncVar
        GBLL    Host_Debug
	GBLL	ROMCHECK

;Debug   SETL   {TRUE}
Debug  SETL    	{FALSE}
;ROMCHECK SETL	{TRUE}
ROMCHECK SETL	{FALSE}


        GBLL    DEBUG
DEBUG   SETL    Debug           ; alias - resolve some day

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand
        GET     Hdr:APCS.<APCS>

        ;; Choose an appropriate variant, so don't need to remove
        ;; all debugging macros just to make production code.

 [ Debug
IncVar  SETS    "Hdr:Debug"
 |
IncVar  SETS    "s.NoDebug"
 ]

        GET     $IncVar

        GET     s.stathdr
        GET     s.splus         ; auto generated file


;-----------------------------------------------------------------------------


        GBLA    NewOpt

NewOpt  SETA    OptList + OptNoSets + OptExpand + OptNoMacros + OptNoP1List + OptNoControl + OptNoMends

        OPT     NewOpt


                        GBLL    debugging   ; are we debugging/stats gathering?

                        GBLS    dy          ; condition code for dtom ok
                        GBLS    dn          ; condition code for dtom not ok
                        GBLS    sregs       ; simple proc entry/exit reg stack

                        GBLA    ctr         ; transient use


debugging               SETL    {TRUE}

dn                      SETS    "HI"        ; dtom failure condition
dy                      SETS    "LS"        ; dtom success condition

MBUF_MANAGER_VERSION    *       (1 * 100 + 0)

;-----------------------------------------------------------------------------
;
; Conventions
;
; lower case is basic
; upper case is macro or some expanding layer
;
;-----------------------------------------------------------------------------
;
; Registers
;
; Use something like APCS. a1-a4 are assumed trashed by any of my
; calls and v1-v6 are preserved. r10 and r11 are not accessed r12
; is workspace pointer (ws) and initialised on the entry points it
; needs to be.
;

a1                      RN      0
a2                      RN      1
a3                      RN      2
a4                      RN      3
v1                      RN      4
v2                      RN      5
v3                      RN      6
v4                      RN      7
v5                      RN      8
v6                      RN      9

ws                      RN      12

;-----------------------------------------------------------------------------
;
; rx_hdr structure
;

                    ^   0

rx_ptr              #   4
rx_tag              #   4
rx_src_addr         #   6
rx_spad             #   2
rx_dst_addr         #   6
rx_dpad             #   2
rx_frame_type       #   4
rx_error_level      #   4

sizeof_rx_hdr       #   0


;-----------------------------------------------------------------------------
;
; mbuf structure - mm view
;

                        ^       0

m_next                  #       4
m_list                  #       4
m_off                   #       4
m_len                   #       4
m_inioff                #       4
m_inilen                #       4
m_type                  #       1             ; ignored by mm
m_safe                  #       1             ; 0 = safe, 1 = unsafe
m_big                   #       1             ; 0 = small, 1 = big
m_flags                 #       1             ; ignored by mm
m_pkthdr		#	8	      ; ignored by mm
m_actoff                #       4             ; real underlying base address
m_actlen                #       4             ; real underlying bytes count

sizeof_mbuf             #       0

m_ctrl                  *       m_type          ; word view onto the four byte fields

;-----------------------------------------------------------------------------
;
; mbctl structure - mm view
;

                        ^       0

context                 #       4             ; we set to our r12/ws value

mbcsize                 #       4             ; client initialises this block
mbcvers                 #       4
mb_flags                #       4
advminubs               #       4
advmaxubs               #       4
mincontig               #       4
mbctl_spare1            #       4

minubs                  #       4             ; we initialise all remaining values
maxubs                  #       4
maxcontig               #       4
mbctl_spare2            #       4

fn_alloc                #       4
fn_alloc_g              #       4
fn_alloc_u              #       4
fn_alloc_s              #       4
fn_alloc_c              #       4

fn_ensure_safe          #       4
fn_ensure_contig        #       4

fn_free                 #       4
fn_freem                #       4
fn_dtom_free            #       4
fn_dtom_freem           #       4

fn_dtom                 #       4
fn_any_unsafe           #       4
fn_this_unsafe          #       4
fn_count_bytes          #       4
fn_cat                  #       4
fn_trim                 #       4
fn_copy                 #       4
fn_copy_p               #       4
fn_copy_u               #       4
fn_import               #       4
fn_export               #       4

sizeof_mbctl            #       0

;-----------------------------------------------------------------------------
;
; Main workspace structure
;
; mem_base, mem_size and dtom_table must
; be the first three entries to permit the ldm to keep dtom simple.
;

                        ^       0

mem_base                #       4       ; Base address of underlying storage
mem_size                #       4       ; Byte count for mbuf underlying storage area
dtom_table              #       4       ; Pointer to dtom translation table
mbuf_table              #       4       ; The mbufs themselves

small_chain             #       4       ; 128 byte
big_chain               #       4       ; 1536 byte
open_sessions           #       4

    [ ROMCHECK
page_map		#	4	; table used for MEMC mappings
    ]

;
; alloc table and spctl_template used to live in code space, but this is
; sub-optimal when the module is running from ROM - move them into RMA
;
alloc_table_base	#	4
spctl_template_base	#	4

; These are initialised according to the memory size of the host

num_small_mbufs         #       4       ; number of small mbufs
num_large_mbufs         #       4       ; number of large mbufs
underlying_mbuf_size    #       4       ; bytes in the row of mbufs
underlying_dtom_size    #       4       ; bytes in the row of ptrs used for dtom()

 [ DEBUG

small_hwm		#	4	; small high water mark
large_hwm		#	4	; large high water mark
small_in_use		#	4	; small mbufs currently in use
large_in_use		#	4	; large mbufs currently in use

 ]

; These 6 in this order for asmstat.s

accum_32bit             #       4       ; ptr to accumulated 32 bit stats
accum_64bit             #       4       ; ditto 64 bit stats
active_32bit            #       4       ; set being incremented live
active_64bit            #       4
pending_32bit           #       4       ; zeroes or being added at present
pending_64bit           #       4


sizeof_ws               #       0


;-----------------------------------------------------------------------------
;
; Constants controlling memory allocation characteristics
;

MEG			*	1024 * 1024

min_log2_msize          *       7
min_msize               *       1 :SHL: min_log2_msize
large_factor            *       12
max_msize               *       large_factor * min_msize

                        ASSERT  min_msize = 128

; These values are in the spec.

M_COPYALL               *       &7f000000

; Flags for allocation

MBC_DEFAULT             *       0 :SHL: 0
MBC_UNSAFE              *       1 :SHL: 0
MBC_SINGLE              *       1 :SHL: 1
MBC_CLEAR               *       1 :SHL: 2

; Flags in m_flags

M_PKTHDR		*	&02
M_EOR			*	&04
M_BCAST			*	&10
M_MCAST			*	&20
M_COPYFLAGS		*	M_PKTHDR:OR:M_EOR:OR:M_BCAST:OR:M_MCAST

; Special flag for OpenSession

MBC_USERMODE            *       1 :SHL: 31      ; for session open only

; Flags for allocation - defined but not implemented.

MBC_DTOMABLE            *       1 :SHL: 3       ; bit reserved at present
MBC_DONTWAIT            *       1 :SHL: 4       ; bit reserved at present


; These are interface constants

mbuf_error_base         *       &4a580          ; NEEDS CHECKING

Mbuf_SWI                *       &4a580          ; OFFICIAL


Service_MbufManagerStatus       *       &a2

MbufManagerStatus_Start *       0
MbufManagerStatus_Stop  *       1


Mbuf_OpenSession        *       Mbuf_SWI + 0
Mbuf_CloseSession       *       Mbuf_SWI + 1
Mbuf_Memory             *       Mbuf_SWI + 2
Mbuf_Statistic          *       Mbuf_SWI + 3
Mbuf_Control            *       Mbuf_SWI + 4

;
;-----------------------------------------------------------------------------
;

;
; Macros
;

                MACRO
$label          ERROR       $bias, $msg
$label
                ALIGN
                DCD         $bias + mbuf_error_base
                DCB         "$msg", 0
                ALIGN
                LTORG
                MEND
;
; Mechanism to delay performing a string equate into memory
; Takes a label and a string value. The string gets a terminating
; zero byte added automatically.
;

                GBLA        str_ctr
str_ctr         SETA        0

                MACRO
                DLYSTR      $str

                GBLS        dlystr$str_ctr

dlystr$str_ctr  SETS        "$str"

str_ctr         SETA        1 + str_ctr

                MEND

;
; Define all the delayed strings;
;

                GBLS    dollar
                GBLS    quote
dollar          SETS    "$$"
quote           SETS    """"

                MACRO
                DLYDSTRS

                LCLA        ctr
                LCLS        str
                LCLS        lab
                LCLS        whole

ctr             SETA        0

                WHILE       ctr < str_ctr

string$ctr      DCB         dlystr$ctr, 0

ctr             SETA        1 + ctr

                WEND

                MEND

;
; Generate an stdesc statistic description structure entry
;

                GBLA        ctr_stdesc
ctr_stdesc      SETA    0

                MACRO
                MKSTDESC    $t1, $t2, $t3, $title, $desc

                DCB     $t1, $t2, $t3, 0

                DCD     string$str_ctr
                DLYSTR  $title

                DCD     string$str_ctr
                DLYSTR  $desc

                MEND




;
; Convenient wrapper for simpler entry/exit management.
;


                MACRO
$lab            ENTER   $regs
 [ "$regs" = ""
$lab            STMFD   sp!, {       lr}
 |
$lab            STMFD   sp!, {$regs, lr}
 ]
sregs           SETS    "$regs"
                MEND

                MACRO
$lab            EXIT    $c
 [ {CONFIG}=26
 [ "$sregs" = ""
$lab            LDM$c.FD sp!, {        pc}^
 |
$lab            LDM$c.FD sp!, {$sregs, pc}^
 ]
 |
 [ "$sregs" = ""
$lab            LDM$c.FD sp!, {        pc}
 |
$lab            LDM$c.FD sp!, {$sregs, pc}
 ]
 ]
                MEND

                MACRO
$lab            POP     $c
 [ "$sregs" = ""
$lab            LDM$c.FD sp!, {        lr}
 |
$lab            LDM$c.FD sp!, {$sregs, lr}
 ]
                MEND



; Load context ([a1] might ref intermediate control block later?)

        MACRO
$lab    LDCTX
$lab    LDR     ws, [a1]
        MEND


;
; Macros for maintaining the statistics
;

        MACRO
$lab    SADD    $x, $y, $stat, $inc
        ASSERT  $x /= $y
        ASSERT  $x /= ws
        ASSERT  $y /= ws
        ASSERT  "$stat" /= ""
$lab    LDR     $x, [ws, # active_32bit]
        LDR     $y, [$x, # $stat * 4]
 [ "$inc" = ""
        ADD     $y, $y, # 1
 |
        ADD     $y, $y, # $inc
 ]
        STR     $y, [$x, # $stat * 4]
        MEND

; NB CORRUPTS FLAGS

	[ NUM_INTEGER64_STATISTICS > 0

        MACRO
$lab    SADD64  $x, $y, $stat, $inc
        ASSERT  $x /= $y
        ASSERT  $x /= ws
        ASSERT  $y /= ws
        ASSERT  "$stat" /= ""
$lab    LDR     $x, [ws, # active_64bit]
        LDR     $y, [$x, # $stat * 8]!
 [ "$inc" = ""
        ADDS    $y, $y, # 1
 |
        ADDS    $y, $y, $inc
 ]
        STR     $y, [$x]
        LDRCS   $y, [$x, #4]
        ADCCS   $y, $y, #0
        STRCS   $y, [$x, #4]
        MEND

	]

;
; DTOM
;
; Macro for the core of the dtom operation.
;
; $ptr is the initial data pointer. $res is the final result if
; the dtom succeeds. It may well be the same as $ptr. The other
; three registers are work registers, and must be supplied in an
; order suitable for ldm. If the dtom fails, then no zero will
; be supplied (wow - a single cycle is saved!). The success/failure
; is indicated by the flags. The dtomt string defines the success
; condition and dtomf the failure condition. They are precise reverses
; of each other. $ws is the workspace pointer.
;

        MACRO
$lab    DTOM    $ptr, $res, $w1, $w2, $w3

$lab

; DREG $ptr, "DTOM on ", cc

        LDMIA   ws, {$w1, $w2, $w3}       ; mem_base, mem_size, dtom_table

; DREG $w1, " with mem_base ", cc
; DREG $w2, " and mem_size ", cc
; DREG $w3, " and dtom_table ", cc

        SUB     $w1, $ptr, $w1
        CMP     $w1, $w2
        MOVLS   $w1, $w1, LSR #min_log2_msize
        LDRLS   $res, [$w3, $w1, LSL #2]

; DREG $res, " gives "
; MDUMP $res

        MEND

        ; Check that the dtom condition values tie up with the code

        ASSERT  "$dn" = "HI"
        ASSERT  "$dy" = "LS"


;
; FREE
;
; Given a pointer to an mbuf, perform the freeing actions
; associated with it.
;
; irqs must be disabled during processing. ptr corrupted.
;

        MACRO
$lab    FREE    $ptr, $w1, $w2

$lab

; DREG $ptr, "FREE on "
; MDUMP $ptr

        ASSERT  $ptr /= $w1
        ASSERT  $w1 /= $w2
        ASSERT  $w1 < $w2

 [ False
        LDRB    $w2, [$ptr, #m_big]
        TEQ     $w2, #0
        ADDEQ   $w2, ws, #small_chain   ; choose appr chain for this size
        ADDNE   $w2, ws, #big_chain
        LDR     $w1, [$w2]              ; next ptr for appr chain
        STR     $ptr, [$w2]             ; tack at head of current chain
        MOV     $w2, #0                 ; always set m_list to NULL
        STMIA   $ptr, {$w1, $w2}        ; write m_next, m_list values
        STRB    $w2, [$ptr, #m_safe]    ; force back to being safe
	STRB	$w2, [$ptr, #m_flags]   ; clear flags
        ADD     $ptr, $ptr, #m_actlen   ; point at last word of mbuf
        LDMDA   $ptr!, {$w1, $w2}       ; read actoff and actlen values
        STMDB   $ptr!, {$w1, $w2}       ; write them to inioff and inilen
        STMDB   $ptr!, {$w1, $w2}       ; write them to off and len

 |
        LDRB    $w2, [$ptr, #m_big]
        TEQ     $w2, #0
        ADDEQ   $w2, ws, #small_chain   ; choose appr chain for this size
        ADDNE   $w2, ws, #big_chain

 [ DEBUG
	STMFD	sp!, {lr}
	BLEQ	note_small_free
	BLNE	note_large_free
	LDMFD	sp!, {lr}
 ]

        LDR     $w1, [$w2]              ; next ptr for appr chain
        STR     $ptr, [$w2]             ; tack at head of current chain
        MOV     $w2, #0                 ; always set m_list to NULL
        STMIA   $ptr, {$w1, $w2}        ; write m_next, m_list values
        STRB    $w2, [$ptr, #m_safe]    ; force back to being safe
	STRB	$w2, [$ptr, #m_flags]   ; clear flags

        LDR     $w1, [$ptr, #m_actoff]
        LDR     $w2, [$ptr, #m_actlen]
        STR     $w1, [$ptr, #m_off]
        STR     $w2, [$ptr, #m_len]
        STR     $w1, [$ptr, #m_inioff]
        STR     $w2, [$ptr, #m_inilen]
 ]

; MDUMP $ptr, "Mbuf after FREE"
; DLINE

        MEND

;
; ALLOC
;
; Remove a single mbuf from either the small or big chain, dictated by
; the value given to $prefer.
; exit with $mp either the mbuf pointer and flags NE or $mp zero and flags EQ
; $cp points at last chain examined. $mp has been snipped out if non-zero.
; EQ means no mbufs whatsoever are available!
;

        MACRO
$lab    ALLOC   $mp, $cp, $w, $prefer="small_chain"

        LCLS    other

 [ "$prefer" = "small_chain"
other   SETS    "big_chain"
 |
other   SETS    "small_chain"
 ]

$lab    ADD     $cp, ws, #$prefer       ; examine preferred chain
        LDR     $mp, [$cp]
        TEQ     $mp, #0
        ADDEQ   $cp, ws, #$other        ; examine other chain
        LDREQ   $mp, [$cp]
        TEQEQ   $mp, #0
        LDRNE   $w, [$mp, #m_next]      ; rest of chain ptr
        STRNE   $w, [$cp]               ; into head ptr
        MOVNE   $w, #0
        STRNE   $w, [$mp, #m_next]      ; and this last of a chain

 [ DEBUG
	STMFD	sp!, {a1, lr}
	MOV	a1, $mp
	BL	note_alloc
	LDMFD	sp!, {a1, lr}
 ]

; DREG $mp, "ALLOC gives "
; MDUMP $mp
        MEND


;
; MSKIP
; Skip over any mbufs with no data in them. assume's there is a chain end


        MACRO
$lab    MSKIP   $ptr, $work
$lab
99      LDR     $work, [$ptr, #m_len]
        TEQ     $work, # 0
        LDREQ   $ptr, [$ptr, #m_next]
        BEQ     %bt99

        MEND


;-----------------------------------------------------------------------------
;
; IRQ control facilities (conditional and then unconditional versions)
;

; Disable IRQs if enabled, remembering old state.
; Z = 1, EQ => I_bit clear - must disable and enable
; Z = 0, NE => I_bit set - no disable or enable

                MACRO
$label          CDIRQS  $r
        [ No32bitCode
$label          MOV     $r, pc
                TST     $r, # I_bit             ; Z := NOT I
                TEQEQP  $r, # I_bit             ; toggle I_bit only (hence keeps Z)
        |
$label          MRS     $r, CPSR
                TST     $r, #I32_bit            ; Z := NOT I
                ORREQ   $r, $r, #I32_bit
                MSREQ   CPSR_c, $r              ; preserve Z
        ]
                MEND

; Conditionally restore IRQs based on Z bit from CDIRQS macro above

                MACRO
$label          CRIRQS  $r
        [ No32bitCode
$label          MVNEQ   $r, #I_bit
                TSTEQP  $r, pc                  ; same mode, no reg bank problems
        |
$label          MRSEQ   $r, CPSR
                BICEQ   $r, $r, #I32_bit
                MSREQ   CPSR_c, $r
        ]
                MEND


; Unconditionally disable IRQs. Preserves flags though

                MACRO
$label          IRQSOFF $r
        [ No32bitCode
$label          MOV     $r, pc
                ORR     $r, $r, #I_bit
                TEQP    $r, #0                  ; same mode, no reg bank problems
        |
$label          MRS     $r, CPSR
                ORR     $r, $r, #I32_bit
                MSR     CPSR_c, $r
        ]
                MEND

; Unconditionally enable IRQs. Preserves flags though

                MACRO
$label          IRQSON  $r
        [ No32bitCode
$label          MVN     $r, #I_bit
                TSTP    $r, pc                  ; same mode, no reg bank problems
        |
$label          MRS     $r, CPSR
                BIC     $r, $r, #I32_bit
                MSR     CPSR_c, $r
        ]
                MEND


;-----------------------------------------------------------------------------
;
; Restore interrupts to an earlier recorded state
;
; Note: using the return lr/r14 value to restore against is not quite
; correct, as the caller may have entered with interrupts disabled but
; have the link register setup so that interrupts get enabled on return
; This would mean we enable interrupts earlier than the user expected.
; This sounds pretty petty. Plus, the first draft is intended to be
; called from C and it's pretty damn difficult to arrange for those
; circumstances!
;

;        MACRO
;$label  OLDIRQS $r
;$label  TEQP    $r, #0
;        MEND


        MACRO
        MDUMP   $r, $msg

 [ Debug

 [ "$msg" /= ""
        DLINE   "$msg "
 ]

 [ $r = r0
        STMFD   sp!, {lr}
        MOV     r0, $r
        BL      mprint
        LDMFD   sp!, {lr}
 |
        STMFD   sp!, {r0, lr}
        MOV     r0, $r
        BL      mprint
        LDMFD   sp!, {r0, lr}
 ]

 ]
        MEND

;-----------------------------------------------------------------------------

        MACRO
        MCDUMP  $r, $msg

 [ Debug

 [ "$msg" /= ""
        DLINE   "$msg "
 ]

 [ $r = r0
        STMFD   sp!, {lr}
        MOV     r0, $r
        BL      mcprint
        LDMFD   sp!, {lr}
 |
        STMFD   sp!, {r0, lr}
        MOV     r0, $r
        BL      mcprint
        LDMFD   sp!, {r0, lr}
 ]

 ]

        MEND

;-----------------------------------------------------------------------------

        MACRO
        DBG2    $rtn
        DLINE   "$rtn: ", cc
        DREG    a1, "a1 = ", cc
        DREG    a2, ", a2 = "
        MEND

;-----------------------------------------------------------------------------
        MACRO
        DBG3    $rtn
        DLINE   "$rtn: ", cc
        DREG    a1, "a1 = ", cc
        DREG    a2, ", a2 = ", cc
        DREG    a3, ", a3 = "
        MEND

;-----------------------------------------------------------------------------

        MACRO
        DBG4    $rtn
        DLINE   "$rtn: ", cc
        DREG    a1, "a1 = ", cc
        DREG    a2, ", a2 = ", cc
        DREG    a3, ", a3 = ", cc
        DREG    a4, ", a4 = "
        MEND




        END
