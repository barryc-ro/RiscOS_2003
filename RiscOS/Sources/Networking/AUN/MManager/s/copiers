;
; copiers.s - copying routines and other support routines.
;
; (C) ANT Limited 1994. All rights reserved.
;

        GET     s.mmhdr

        AREA    copy_routines, CODE

        IMPORT  bcopy
        EXPORT  memset
        EXPORT  min
        EXPORT  mout

;-----------------------------------------------------------------------------
;
; Copy data between an area of raw memory and an mbuf chain. These
; routines continue until either the byte count is exhausted or
; the mbuf chain end has been reached. They update a1-a4 on exit
; for subsequent calling. Use a macro as they are identical apart
; from the data copying (a1 swap a2 for bcopy).
;
; a1    bias into mbuf
; a2    mbuf ptr
; a3    byte count
; a4    raw memory ptr
;
; preserves v1-v6



        MACRO
$lab    MKINOUT
$lab    ROUT


; MCDUMP a2, "Chain for $lab to work on"

        TEQ     a2, #0                      ; awooga?
        TEQNE   a3, #0                      ; acceptable
        TEQNE   a4, #0                      ; awooga!
        MOVEQS  pc, lr
        STMFD   sp!, {v1-v6, lr}

00      LDR     v1, [a2, #m_len]
        SUB     v1, v1, a1                  ; bytes available this mbuf
        CMP     v1, a3                      ; meet entire request?

; bytes this mbuf versus bytes want in total
; <     do all this mbuf and more to come
; =     do all this mbuf and finished precisely
; >     only do some of this mbuf and finished
; v1 is how many bytes actually copied (same as a3 on ENTER to bcopy)

        MOVGE   v1, a3
        STMFD   sp!, {a1-a4, v1}
        MOVLT   a3, v1                      ; lt=rest this and more to go
        LDR     lr, [a2, #m_off]
 [  "$lab" = "mout"
        ADD     a1, a1, lr
        ADD     a1, a1, a2                  ; src ptr
        MOV     a2, a4                      ; dest ptr
 |
        ASSERT  "$lab" = "min"
        ADD     lr, a1, lr
        ADD     a2, lr, a2                  ; dest ptr
        MOV     a1, a4                      ; src ptr
 ]; "$lab" = "mout"
        BL      bcopy                       ; preserves flags
        LDMFD   sp!, {a1-a4, v1}
        ADD     a4, a4, v1                  ; always copied this much
        SUB     a3, a3, v1                  ; likewise
        LDRLE   a2, [a2, #m_next]           ; next in chain
        ADDGT   a1, a1, v1                  ; update bias
        MOVLE   a1, #0                      ; bias = empty
        LDMGEFD sp!, {v1-v6, pc}^
        TEQ     a2, #0                      ; sure can merge this, but
        BNE     %b00                        ; I'll lose track of what's
        LDMFD   sp!, {v1-v6, pc}^           ; happening!

        MEND

; Build the routines

mout    MKINOUT
min     MKINOUT




;
; a1    ptr
; a2    byte count
; a3    byte to fill memory with
;
; STOMPS v1-v6
;

memset  ROUT

;       DBG3    "memset"

        TEQ     a1, #0
        TEQNE   a2, #0
        MOVEQS  pc, lr


01      TST     a1, #3
        BEQ     %f00
        STRB    a3, [a1], #1
        SUBS    a2, a2, #1
        MOVEQS  pc, lr
        B       %b01

00      MOV     a4, a3
        MOV     v1, a3
        MOV     v2, a3
        MOV     v3, a3
        MOV     v4, a3
        MOV     v5, a3
        MOV     v6, a3

02      CMP     a2, #8*4
        BLT     %f03
        STMIA   a1!, {a3-a4, v1-v6}
        SUBS    a2, a2, #8*4
        BGT     %b02

        MOVS    pc, lr

03      CMP     a2, #4
        STRGE   a3, [a1], #4
        SUBGES  a2, a2, #4
        BGT     %b03

04      CMP     a2, #0
        MOVEQS  pc, lr
06      STRB    a3, [a1], #1
        SUBS    a2, a2, #1
        BGT     %b06
        MOVS    pc, lr

        InsertDebugRoutines

;-----------------------------------------------------------------------------

    [ ROMCHECK
;
; waste a page's worth of space at the end of the module so that
; the important stuff is on pages that we know it is safe to lock
;
	EXPORT	end_waste

end_waste	%	4096
    ]

        END



; eof
