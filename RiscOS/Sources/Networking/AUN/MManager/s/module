
;
; Mbuf Manager module file - module.s
;
; (C) ANT Limited 1994. All rights reserved.
; ANT Ltd. PO BOX 300. Cambridge, UK, CB1 2EG.
;
; COMPANY CONFIDENTIAL
;
; Author: Borris
;
; History
;
; 0.04	Wrote one word too far on OpenSession
; 0.14  Special version for Online Media - not a distribution version!
; 0.15  Another Online Media special
; 0.16  Added extra m_flags, m_pkthdr fields
; 0.17  Made number of mbufs configurable on startup
; 0.18  Modified table of numbers of mbufs for larger RAM systems.
; 0.19  Functionally identical to 0.18, but version number now CVS controlled.
; 0.20  Will now attempt to use configured MBuf pool parameters, falling
;        back to RAM size if nothing is configured in NVRAM.
;
;-----------------------------------------------------------------------------

	GBLL	OMCode
OMCode	SETL	{FALSE}

	;; No code or data before this point
	;; Wish this area to be loaded first to conform to RISC OS
	;; module header layout, so choose ! as early in ASCII set.

	GET VersionASM
	GET mmhdr.s
	GET hdr:Machine.<Machine>
	GET hdr:CMOS
	GET hdr:NVRAM

	AREA	|!!!module!!!|, CODE, READONLY


;-----------------------------------------------------------------------------


	;; Imports

	IMPORT	memset
	IMPORT	bcopy
	IMPORT	statistic_op

    [ ROMCHECK
	IMPORT	end_waste
    ]

;-----------------------------------------------------------------------------


	;; Exports (more occur in mm.s)

	EXPORT	baseaddr


;-----------------------------------------------------------------------------

baseaddr	DCD	0
		DCD	init - baseaddr
		DCD	final - baseaddr
		DCD	service - baseaddr
		DCD	title_string - baseaddr
		DCD	help_string - baseaddr
		DCD	0 ; help_cmd_table - baseaddr
		DCD	Mbuf_SWI
		DCD	swi - baseaddr
		DCD	swi_strings - baseaddr
		DCD	0
 [ :LNOT: No32bitCode
                DCD     0
                DCD     modflags - baseaddr
 ]

;-----------------------------------------------------------------------------

title_string	DCB	"MbufManager", 0

 [ OMCode
help_string	DCB	"Mbuf Manager", 9, "0.15 (02 Jan 1996) © ANT Ltd 1994-1996", 0
 |
help_string	DCB	"Mbuf Manager", 9, "$Module_HelpVersion © ANT Ltd 1994-1996, Pace 1997-2000", 0
 ]

short_purpose	DCB	"Mbuf Manager", 0

long_purpose	DCB	"System wide memory buffer (mbuf) memory management", 0

swi_strings	DCB	"Mbuf", 0
		DCB	"OpenSession", 0
		DCB	"CloseSession", 0
		DCB	"Memory", 0
		DCB	"Statistic", 0
		DCB	"Control", 0
		DCB	0

		ALIGN

 [ :LNOT: No32bitCode
modflags        DCD     ModuleFlag_32bit
 ]

    [ ROMCHECK

;
; waste a page worth of space at the beginning of the module so that the
; important stuff is on pages that we know it is safe to lock
;

start_waste	%	4096
start_module
    ]

;-----------------------------------------------------------------------------

spctl_start
		DCD	0				; next
		DCD	DCI4_STATISTIC_VERSION		; i_version
		DCD	0				; features
		DCD	Mbuf_Statistic			; swinumber
		DCD	NUM_STATISTICS - 1		; max_stat (INCLUSIVE)
		DCD	SPT_MBUF_MANAGER		; type
		DCD	MBUF_MANAGER_VERSION		; s_version
		DCD	0				; module
		DCD	0				; title
		DCD	0				; description
		DCD	0				; reset[0]
		DCD	0				; reset[1]
spctl_end

		ASSERT	(spctl_end - spctl_start) = sizeof_spctl

;-----------------------------------------------------------------------------

;
; initialise statistics structure
init_stat	ROUT

;
; bcopy trashes most registers, so save them here
;
		ENTER	"r1-r9"

;
; the real template now lives in RMA, so copy the prototype there
;
		ADR	r0, spctl_start
		LDR	r1, [ws, #spctl_template_base]
		MOV	r2, #spctl_end - spctl_start
		BL	bcopy
;
; r1 was killed by bcopy, reload
;
		LDR	r1, [ws, #spctl_template_base]

		LDR	r0, [ws, #spctl_template_base]
		ADRL	r0, title_string
		STR	r0, [r1, #spctl_module]
		ADRL	r0, short_purpose
		STR	r0, [r1, #spctl_title]
		ADRL	r0, long_purpose
		STR	r0, [r1, #spctl_description]
		SWI	XOS_ReadMonotonicTime
		STR	r0, [r1, #spctl_reset + 0]
		STR	r0, [r1, #spctl_reset + 4]

		EXIT

;-----------------------------------------------------------------------------

;-----------------------------------------------------------------------------

; Despatch SWIs

swi		ROUT

		LDR	ws, [r12]
		CMP	r11, # (%f15 - %f10) / 4
		ADDCC	pc, pc, r11, LSL #2
		B	%f20
10
		B	open_session
		B	close_session
		B	memory_op
		B	statistic_op
		B	control_op
15

20		ADR	r0, %f21
                RETURNVS
21
		DCD	&1e6		; system error number
		DCB	"Unknown Mbuf Manager operation", 0
		ALIGN
		LTORG

;-----------------------------------------------------------------------------
;
; Allocate r0 bytes from the RMA and zero it. Return ptr or NULL in r0.
; Preserve everything else. Set flags as EQ for failed and NE for allocated.
;

rmalloc
		FunctionEntry "r1-r12"

		MOV	r3, r0
		MOV	r0, # ModHandReason_Claim
		SWI	XOS_Module

		MOVVSS	r0, # 0                 ; want Z flag set
		MOVVCS	r0, r2                  ; want Z flag clear

; DREG r3, "Allocating ", cc
; DREG r2, " bytes gives "

		LDMEQFD sp!, {r1-r12, pc}	; if exit here

		STMFD	sp!, {r0}

		MOV	r1, r3
		MOV	r2, # 0
		BL	memset

		TEQ	lr, # 0			; want NE flag

		LDMFD	sp!, {r0-r12, pc}

;-----------------------------------------------------------------------------
;
; allocate the necessary memory for the mbuf manager and zero it
; if any allocation fails, it will clean up after itself

; Pairs of (allocate size, workspace offset) for secondary allocations.

alloc_table_start

		DCD	0,				mem_base
		DCD	0,				dtom_table
		DCD	0,				mbuf_table
		DCD	spctl_end - spctl_start,	spctl_template_base
		DCD	NUM_INTEGER32_STATISTICS * 4,	accum_32bit
		DCD	NUM_INTEGER32_STATISTICS * 4,	active_32bit
		DCD	NUM_INTEGER32_STATISTICS * 4,	pending_32bit
	[ NUM_INTEGER64_STATISTICS > 0
		DCD	NUM_INTEGER64_STATISTICS * 8,	accum_64bit
		DCD	NUM_INTEGER64_STATISTICS * 8,	active_64bit
		DCD	NUM_INTEGER64_STATISTICS * 8,	pending_64bit
	]
		DCD	0
alloc_table_end

;
; XXX
;
; this structure must match the layout of alloc_table above
;
		^	0
at_basic	#	8				; mem_base
at_dtom		#	8				; dtom_table
at_mbuf		#	8				; mbuf_table

;-----------------------------------------------------------------------------
;
; Free secondary workspace
;

free_memory	ROUT

		ENTER	"r0-r3"

		MOV	r0, # ModHandReason_Free

;
; the real alloc table is now in RMA
;
		LDR	r1, [ws, #alloc_table_base]
		CMP	r1, #0
		EXIT	EQ

00		LDMIA	r1!, {r2, r3}
		TEQ	r2, #0			; end of table?
		BEQ	%f10
		LDR	r2, [ws, r3]
		TEQ	r2, # 0
		SWINE	XOS_Module
		B	%b00

;
; all entries have been freed, now do the alloc table itself
;
10		LDR	r2, [ws, #alloc_table_base]
		SWI	XOS_Module

		EXIT

;-----------------------------------------------------------------------------
;
; Allocate secondary workspace. Exit r0 = 0 for fail and r0 = 1 for success
;

alloc_memory	ROUT

;
; bcopy trashes most registers, so save them here
;
		ENTER	"r1-r9"

;
; the real alloc table cannot live in code space,
; so allocate some RMA for it.
;
		MOV	r0, #alloc_table_end - alloc_table_start
		BL	rmalloc
		MOVEQ	r0, #0
		EXIT	EQ

;
; copy alloc table into RMA
;
		STR	r0, [ws, #alloc_table_base]
		MOV	r1, r0
		ADR	r0, alloc_table_start
		MOV	r2, #alloc_table_end - alloc_table_start
		BL	bcopy

;
; r10 on entry was pointer to initialisation parameters
; Check to see if any were supplied
;
		ADR	r0, keyword_defn
		MOV	r1, r10
		SUB	r13, r13, #32
		MOV	r2, r13
		MOV	r3, #32
		SWI	XOS_ReadArgs
		ADD	r13, r13, #32
		BVS	%F05
		LDR	r0, [r2,#0]
		LDRB	r1, [r0,#1]
		LDRB	r3, [r0,#2]
		ADD	r1, r1, r3, LSL #8
		LDRB	r3, [r0,#3]
		ADD	r1, r1, r3, LSL #16
		LDRB	r3, [r0,#4]
		ADD	r1, r1, r3, LSL #24
		LDR	r0, [r2,#4]
		LDRB	r2, [r0,#1]
		LDRB	r3, [r0,#2]
		ADD	r2, r2, r3, LSL #8
		LDRB	r3, [r0,#3]
		ADD	r2, r2, r3, LSL #16
		LDRB	r3, [r0,#4]
		ADD	r2, r2, r3, LSL #24
		B	%F08

keyword_defn	DCB "/a/e,/a/e", 0


;
; 99/02/13 - RCE - Code added to check for 'stored' configuration for number of MBufs to allocate
;		    needed to address issues raised by several STB projects, and timed now to
;		    try to make ROM freeze for STB3.
; 99/03/30 - SNB/KJB - Uses NVRAM module's header file for constans, and also knows that the NVRAM
;                      module was Buckleyised and hence never returns errors, but sets R0 negative.
;                      Enforce minimum of small mbufs and large mbufs.
;
TagSmall	DCB	"MManagerSmall",0	; Tag for number of small MBufs
TagLarge	DCB	"MManagerLarge",0	; Tag for number of large MBufs
		ALIGN

05		ADR	r0, TagSmall
		ADD	r1, ws, #num_small_mbufs; use relevant bit of module's workspace
		MOV	r2, #0
		SWI	XNVRAM_Read
		BVS	%F06			; No reponse (or error) from NVRAM, so carry on as before...
		CMP	r0, #4			; Size of returned data - must be 4 for successful read of int
		BNE	%F06			; Fall back to OS_Byte CMOS read

		ADR	r0, TagLarge
		ADD	r1, ws, #num_large_mbufs; use relevant bit of module's workspace
		MOV	r2, #0
		SWI	XNVRAM_Read
		BVS	%F06			; No reponse (or error) from NVRAM, so carry on as before...
		CMP	r0, #4			; Size of returned data - must be 4 for successful read of int
		BNE	%F06			; Fall back to OS_Byte CMOS read

		LDR	r1, [ws, #num_small_mbufs]
		LDR	r2, [ws, #num_large_mbufs]
						; Load the returned values - the code expects this
		CMP	r1, #64			; enforce minimum number of small mbufs
		MOVLO	r1, #64
		CMP	r2, #4			; enforce minimum number of large mbufs
		MOVLO	r2, #4
		B	%F08			; NVRAM yielded values, so believe them...

50
		GET	table.s			; Read in table of values
51
		ASSERT	((%b51 - %b50) / 4) >= 5	; Check table is at least big enough for sanity

06		MOV	r0, #ReadCMOS
		MOV	r1, #MBufManagerCMOS
		SWI	XOS_Byte		; May wish to mask to fewer bits at this point
		MOVVS	r2, #0			; default to zero - default behaviour
		AND	r2, r2, #0x1f		; Allow for 31 entries in table
		CMP	r2, #0			; 0 => old behaviour ie MBuf pool based on mem size
		BEQ	%F07			; Skip to 'old behaviour code'
		SUB	r2, r2, #1		; Correct for 0..n not 1..n+1 offset
		CMP	r2, #(%b51 - %b50) / 4	; Within table ?
		BLE	%F71			; yes, otherwise old behaviour

07		SWI	XOS_ReadMemMapInfo

; DREG r0, "Page size ", cc
; DREG r1, ", Number of pages "

		MOVVS	r0, # MEG
		MULVC	r0, r1, r0		; r0 now holds memory size

 [ OMCode
		MOV	r1, # 128		; OM build values
		MOV	r2, # 64
		BAL	%F08
 |
		MOV	r2, # 0			; index for 1MB

		CMP	r0, # 2 * MEG
		MOVGE	r2, # 1			; index for 2MB

		CMP	r0, # 4 * MEG
		MOVGE	r2, # 2			; index for 4MB

		CMP	r0, # 8 * MEG
		MOVGE	r2, # 3			; index for 8MB

		CMP	r0, # 16 * MEG		; added 981030:RCE for bigger
		MOVGE	r2, # 4			; systems including 16MB STB
 ] ; OMCode

71		ADR	r1, %b50		; get start of table
		MOV	r2, r2, LSL #2		; convert word offset to byte offset
		LDR	r3, [r1, r2]		; get table entry
		MOV	r1, r3, LSL #16		; r2 := number of small mbufs << 16
		MOV	r1, r1, LSR #16		; r2 := number of small mbufs
		MOV	r2, r3, LSR #16		; r1 := number of large mbufs
;
; use r3 as pointer into alloc table
;
08		LDR	r3, [ws, #alloc_table_base]

		STR	r1, [ws, # num_small_mbufs]
		STR	r2, [ws, # num_large_mbufs]
;	 DREG r0, "Total memory present in machine: "
;	 DREG r1, "Number of small mbufs to use: "
;	 DREG r2, "Number of large mbufs to use: "
		ADD	r0, r1, r2
		MOV	lr, # sizeof_mbuf
		MUL	r0, lr, r0
;	 DREG r0, "Byte count for row of mbufs themselves: "
		STR	r0, [ws, # underlying_mbuf_size]
		STR	r0, [r3, #at_mbuf]


		MOV	r0, # large_factor
		MLA	r0, r2, r0, r1
		MOV	r0, r0, LSL # 2		; words to bytes
;	 DREG r0, "Byte count for row of ptrs for dtom: "
		STR	r0, [ws, # underlying_dtom_size]
		STR	r0, [r3, #at_dtom]

		LDR	r0, = max_msize
		MUL	r0, r2, r0
		ADD	r0, r0, r1, LSL # min_log2_msize
		STR	r0, [ws, # mem_size]
		STR	r0, [r3, #at_basic]

;	 DREG r0, "Giving underling size of: "
;	 DLINE "Now running through allocation table"

00		LDMIA	r3!, {r1, r2}
		MOVS	r0, r1
		BEQ	%f10			; end of table marker
		BL	rmalloc
		BEQ	%f50
		STR	r0, [ws, r2]
		B	%b00
10

		MOV	r0, # 1
		EXIT

; Any allocation failure frees all secondary that did get allocated

50		BL	free_memory

		MOV	r0, # 0

		EXIT


;-----------------------------------------------------------------------------
;
; Module initialisation point
;
; We do not support the notion of "tidying" the RMA. If RISC OS actually
; offered sufficiently capable relocation mechanisms, we might, but with
; the current naive scheme, the safest thing is to prevent the user from
; generating problems.
;

init		ROUT

		MOV	r4, lr
		MOV	r0, # ModHandReason_Claim
		LDR	r3, = sizeof_ws
		SWI	XOS_Module
                MOVVS   pc, r4                  ; exit with V still set

		STR	r2, [r12]
		MOV	ws, r2
		MOV	lr, r4			; stick this back!

		ENTER	"v1-v6, r10, r11"

		MOV	r0, ws
		LDR	r1, = sizeof_ws
		MOV	r2, # 0
		BL	memset

    [ ROMCHECK
;
; XXX
;
; calculate the pages which contain the important routines within
; this module, and then write protect them - this module is going
; into ROM, and *MUST NOT* write to any code areas.
;
; this code only works on machines with a 4K page size
;
		SWI	XOS_ReadMemMapInfo
		BVS	%f45
		CMP	r0, #4096
		BNE	%f45

		SUB	r2, r0, #1		; for BIC below

;
; find the end of the 4K wasted space at the beginning of the module
;
		ADRL	r0, start_module

;
; can't ADR{,L} external symbols, so we have to dick around
; to produce position independent code (I make no claim that
; this is the simplest, or even the easiest method)
;
		LDR	r1, end_waste_link
		LDR	r3, =ldmarker
		SUB	r1, r1, r3
		ADD	r1, pc, r1		; don't want PSR bits

;
; find the start of the relevant pages
;
		BIC	r0, r0, r2
ldmarker	BIC	r1, r1, r2

;
; calculate the number of pages involved, and allocate
; 12 bytes of RMA for each page (12 bytes for each entry
; in MemMap table)
;
		SUB	r3, r1, r0
		MOV	r3, r3, LSR #10		; r3 = (((r1 - r0) / 4k) * 4)
		ADD	r3, r3, r3, LSL #1	; (r3 * 4) += (r3 * 8)
		ADD	r3, r3, #24		; 1 page for fencepost, and
						; 1 for end-of-table entry

		MOV	r1, r0			; r1 = start logical page
		MOV	r0, #ModHandReason_Claim
		SWI	XOS_Module
		BVS	%f45

		STR	r2, [ws, #page_map]

;
; set logical addresses (second word in each entry) for map
;
		MOV	lr, r2
		ADD	r2, r2, #4

40		SUBS	r3, r3, #12
		BEQ	%f41

		STR	r1, [r2], #12

		ADD	r1, r1, #4096
		B	%b40

end_waste_link	DCD	end_waste

;
; terminate the list with -1 in first field
;
41		MVN	r1, #0
		STR	r1, [r2, #-4]!

;
; read entries
;
		MOV	r0, lr
		SWI	XOS_FindMemMapEntries

;
; if call failed, then truncate the list to save
; embarrassment when module is finalised
;
		STRVS	r1, [r0]
		BVS	%f45

;
; run down the list one more time, filling in protection level
;
		MOV	r1, #3
		ADD	lr, r0, #8

42		CMP	lr, r2
		BHS	%f43

		STR	r1, [lr], #12
		B	%b42

;
; OK, set the new protection level - need to use Neil
; Kelleher's custom version of XOS_SetMemMapEntries
;
43		SWI	&69dc0

;
; finished
;
45
    ]

		BL	alloc_memory
		TEQ	r0, # 0
		BEQ	%f32

		BL	init_workspace
		BL	init_stat

done_init

; DLINE "Initialise completed"

		;; Schedule callback to issue service call announcing
		;; our arrivial. Need to have SWIs active when this happens.

		ADR	r0, announce_cb
		MOV	r1, ws
		SWI	XOS_AddCallBack

		POP
                RETURNVC

32		ADR	r0, %f31
		POP
                RETURNVS
31
		DCD	0	; @@@@
		DCB	"Insufficient memory to initialise", 0
		ALIGN
		LTORG

;-----------------------------------------------------------------------------

init_workspace	ROUT

		ENTER	"r0-r12"

		LDR	r0, [ws, #mbuf_table]		; ptr to mbufs
		LDR	r1, [ws, #dtom_table]		; ptr to mbuf ptrs for dtom xform
		LDR	r2, [ws, #mem_base]		; ptr to underlying storage
		LDR	r3, [ws, #num_large_mbufs]	; how many large mbufs
		MOV	r4, #max_msize			; each this size
		MOV	r5, #1				; says big mbuf in m_big field

		; Initialise large mbufs

10		; N entries for large for dtom table

ctr		SETA	large_factor

		WHILE	ctr > 0
		STR	r0, [r1], #4
ctr		SETA	ctr - 1
		WEND

		SUB	lr, r2, r0
		STR	lr, [r0, #m_actoff]
		STR	r4, [r0, #m_actlen]
		STRB	r5, [r0, #m_big]

		ADD	r2, r2, r4			; advance to next underlying storage
		ADD	r0, r0, #sizeof_mbuf		; advance to next mbuf
		SUBS	r3, r3, #1			; more to go?
		BGT	%b10

		; Initialise small mbufs

		LDR	r3, [ws, #num_small_mbufs]	; new count
		MOV	r4, #min_msize			; new size

11		STR	r0, [r1], #4
		SUB	lr, r2, r0
		STR	lr, [r0, #m_actoff]
		STR	r4, [r0, #m_actlen]

		ADD	r2, r2, r4			; advance to next underlying storage
		ADD	r0, r0, #sizeof_mbuf		; advance to next mbuf
		SUBS	r3, r3, #1			; more to go?
		BGT	%b11

		; Now free each mbuf to build the free chain and initialise
		; the remaining fields (which must be re-initialised for every
		; free operation anyway).

		; switch register names whilst in the mm "domain"

		LDR	v1, [ws, #mbuf_table]
		LDR	v2, [ws, # num_small_mbufs]
		LDR	lr, [ws, # num_large_mbufs]
		ADD	v2, v2, lr

12		MOV	a2, v1

		BL	core_free			; free only a2/r1 whatever m_next is

		ADD	v1, v1, #sizeof_mbuf
		SUBS	v2, v2, #1
		BGT	%b12

		; That should give us an initialised mbuf heap!

		; Going and alter the free statistics we've just altered
		; first clear the active 32 bit stats

		LDR	a1, [ws, # active_32bit]
		LDR	a2, = NUM_INTEGER32_STATISTICS * 4
		LDR	a3, = 0
		BL	memset

	[ DEBUG
		; and then clear the extra debugging stats

		MOV	a1, # 0
		STR	a1, [ws, # small_hwm]
		STR	a1, [ws, # large_hwm]
		STR	a1, [ws, # small_in_use]
		STR	a1, [ws, # large_in_use]
	]
		EXIT


;-----------------------------------------------------------------------------
;
; SWIs will be patched in when this happens.
;

announce_cb	STMFD	sp!, {r0, r1, lr}

		MOV	r0, # MbufManagerStatus_Start
		MOV	r1, # Service_MbufManagerStatus
		SWI	XOS_ServiceCall

		LDMFD	sp!, {r0, r1, pc}		; no ^ hat


;-----------------------------------------------------------------------------
;
; We refuse to die if there are any open sessions. We always do a complete
; death - ignore soft death.
;

final		ROUT

		LDR	ws, [r12]

		LDR	r0, [ws, # open_sessions]
		TEQ	r0, # 0
		BNE	%f11

		ENTER

; DLINE "Finalisation point called - crudely freeing memory!"

		BL	free_memory

    [ ROMCHECK
;
; restore default mappings for RMA
;
		STMFD	sp!, {r0-r2}

		LDR	r0, [ws, #page_map]
		MOVS	lr, r0
		BEQ	%f45

;
; run down the table, restoring default RMA protection mode
;
		MOV	r1, #0

40		LDR	r2, [lr], #12
		CMN	r2, #1
		BEQ	%f41

		STR	r1, [lr, #-4]
		B	%b40

;
; table is ready, make the call to Neil Kelleher's SWI
;
41		SWI	&69dc0

45		LDMFD	sp!, {r0-r2}
    ]

; DLINE "Finalisation done"
                [ {CONFIG}<>26
                CLRV
                ]
		EXIT

11		ADR	r0, %f10
                RETURNVS
10
		ERROR	2, "There are open Mbuf Manager sessions"

;-----------------------------------------------------------------------------
;
; a2	service call number
; a3	magic value
;

service_table
		DCD	0	; flags
		DCD	service_body - baseaddr
		DCD	Service_StatisticEnumerate
		DCD	0
		DCD	service_table - baseaddr

service		ROUT
		MOV	r0, r0
		TEQ	r1, #Service_StatisticEnumerate
		MOVNE	pc, lr

service_body
		LDR	ws, [r12]

		STMFD	sp!, {r1-r11, lr}

		MOV	r1, r0
		LDR	r0, = sizeof_spctl
		BL	rmalloc

		MOVEQ	r0, r1
		LDMEQFD sp!, {r1-r11, pc}

		STR	r1, [r0, # spctl_next]

		STMFD	sp!, {r0}

		ADD	r1, r0, # 4		; dest (r1)
    [ {FALSE}
		ADRL	r0, spctl_template +4	; src (r0)
    |
;
; spctl_template now lives in RMA
;
		LDR	r0, [ws, #spctl_template_base]
		ADD	r0, r0, #4
    ]
		LDR	r2, = sizeof_spctl -4	; size: don't copy next field
		BL	bcopy

		LDMFD	sp!, {r0-r11, pc}

;-------------------------------------------------------------------------
;
; SWI entry point for open session swi
;
; Entry r0 - ptr to mbctl structure
;

open_session ROUT

	ENTER	"r0-r11"

	; First, check if we think we can work with this client.

	LDR	r1, [r0, #mbcvers]
	CMP	r1, # MBUF_MANAGER_VERSION
	BGT	%f00

	LDR	r1, [r0, #mbcsize]
	TEQ	r1, #sizeof_mbctl
	BNE	%f00				; @@@@

	LDR	r1, [r0, #mincontig]
	CMP	r1, #min_msize
	BHI	%f00

	LDR	r1, [r0, #mbctl_spare1]
	TEQ	r1, #0
	BNE	%f00				; not quite correct error...

	; Looks like it. Initialise all the mbctl structure fields accordingly

	; This ties up with the LDCTX macro (which reverses this store)

	STR	ws, [r0, #context]		; so can find it later!

	MOV	r1, #min_msize
	STR	r1, [r0, #minubs]
	STR	r1, [r0, #maxcontig]

	MOV	r1, #max_msize
	STR	r1, [r0, #maxubs]

	MOV	r1, #0
	STR	r1, [r0, #mbctl_spare2]

	LDR	r1, [r0, #mb_flags]
	TST	r1, #MBC_USERMODE

	ADD	r1, r0, # fn_alloc
	ADREQ	r0, %f90
	ADRNE	r0, %f91
	LDR	r2, = (%f91 - %f90) / 4		; byte count for both
	ADRL	r3, baseaddr

50	LDR	r4, [r0], #4
	ADD	r4, r4, r3
	STR	r4, [r1], #4
	SUBS	r2, r2, #1
	BGT	%b50

	IRQSOFF r2

	LDR	r1, [ws, #open_sessions]
	ADD	r1, r1, #1
	STR	r1, [ws, #open_sessions]

	SADD	r0, r1, SESSIONS_OPENED

        [ {CONFIG}<>26
        IRQSON  r2
        ]

	EXIT
00
	POP
	ADR	r0, %f01
        RETURNVS
01
	ERROR	5, "Mbuf Manager cannot meet client requirements"

; Tables giving the function pointer values, first for normal
; use and then the user mode wrapped variants.

90
        DCD     svc_alloc           - baseaddr
        DCD     svc_alloc_g         - baseaddr
        DCD     svc_alloc_u         - baseaddr
        DCD     svc_alloc_s         - baseaddr
        DCD     svc_alloc_c         - baseaddr
        DCD     svc_ensure_safe     - baseaddr
        DCD     svc_ensure_contig   - baseaddr
        DCD     svc_free            - baseaddr
        DCD     svc_freem           - baseaddr
        DCD     svc_dtom_free       - baseaddr
        DCD     svc_dtom_freem      - baseaddr
        DCD     svc_dtom            - baseaddr
        DCD     svc_any_unsafe      - baseaddr
        DCD     svc_this_unsafe     - baseaddr
        DCD     svc_count_bytes     - baseaddr
        DCD     svc_cat             - baseaddr
        DCD     svc_trim            - baseaddr
        DCD     svc_copy            - baseaddr
        DCD     svc_copy_p          - baseaddr
        DCD     svc_copy_u          - baseaddr
        DCD     svc_import          - baseaddr
        DCD     svc_export          - baseaddr
91
	DCD	user_alloc	    - baseaddr
	DCD	user_alloc_g	    - baseaddr
	DCD	user_alloc_u	    - baseaddr
	DCD	user_alloc_s	    - baseaddr
	DCD	user_alloc_c	    - baseaddr
	DCD	user_ensure_safe    - baseaddr
	DCD	user_ensure_contig  - baseaddr
	DCD	user_free	    - baseaddr
	DCD	user_freem	    - baseaddr
	DCD	user_dtom_free	    - baseaddr
	DCD	user_dtom_freem	    - baseaddr
	DCD	user_dtom	    - baseaddr
	DCD	user_any_unsafe	    - baseaddr
	DCD	user_this_unsafe    - baseaddr
	DCD	user_count_bytes    - baseaddr
	DCD	user_cat	    - baseaddr
	DCD	user_trim	    - baseaddr
	DCD	user_copy	    - baseaddr
	DCD	user_copy_p	    - baseaddr
	DCD	user_copy_u	    - baseaddr
	DCD	user_import	    - baseaddr
	DCD	user_export	    - baseaddr

;-----------------------------------------------------------------------------
;
; SWI entry point for close session swi
;
; This must be altered to ensure that we can only remove a client
; if it is marked as being in an open session. Otherwise, the open
; sessions count could become wrong.
;

close_session ROUT

	ENTER	"r1, r2, r3"

        MRS     r3, CPSR
	IRQSOFF r1

	LDR	r1, [r0, # context]
	TEQ	r1, # 0
	BEQ	%f01

	MOV	r1, # 0
	STR	r1, [r0, # context]

	LDR	r1, [ws, #open_sessions]
	SUBS	r1, r1, #1
	STRGE	r1, [ws, #open_sessions]	; be defensive

	SADD	r1, r2, SESSIONS_CLOSED

; DREG r1, "New number of active mbuf manager sessions: "
        MSR     CPSR_cf, r3                     ; restore IRQ state and V clear
	EXIT

01	ADR	r0, %f02
	POP
        RETURNVS
02
	ERROR	9, "Mbuf manager session already closed"

;-----------------------------------------------------------------------------
;
; SWI entry point for memory swi

memory_op
	LDR	r0, [ws, #mem_size]
	MOV	pc, lr


;-----------------------------------------------------------------------------


; SWI entry point for control swi

control_op ROUT
	TEQ	r0, #0
	BNE	%f10
	MOV	r0, #MBUF_MANAGER_VERSION
	MOV	pc, lr
10	ADR	r0, %f11
        RETURNVS
11
	ERROR	4, "No such mbuf manager control operation"


;-------------------------------------------------------------------------

 [ DEBUG

dump_workspace ROUT
	ENTER	"r0"

	LDR	r0, [ws, #mem_base]
	DREG	r0, "mem_base: "

	LDR	r0, [ws, #mem_size]
	DREG	r0, "mem_size: "

	LDR	r0, [ws, #dtom_table]
	DREG	r0, "dtom_table: "

	LDR	r0, [ws, #mbuf_table]
	DREG	r0, "mbuf_table: "

	LDR	r0, [ws, #small_chain]
	DREG	r0, "small_chain: "

	LDR	r0, [ws, #big_chain]
	DREG	r0, "large_chain: "

	LDR	r0, [ws, #open_sessions]
	DREG	r0, "open_sessions: "

	EXIT

dump_all_mbufs ROUT

	ENTER	"r0, r1"

	DLINE	"Dump of all mbufs"

	LDR	r0, [ws, #mbuf_table]
	LDR	r1, [ws, #num_large_mbufs]
	LDR	lr, [ws, #num_small_mbufs]
	ADD	r1, r1, lr

00	BL	mprint
	ADD	r0, r0, #sizeof_mbuf
	SUBS	r1, r1, #1
	BGT	%b00

	EXIT
 ]

;-----------------------------------------------------------------------------
;
; User mode wrappers onto the direct entry points. These will behave
; incorrectly if not called in user mode. You can't mix 'n' match user
; and non-user mode entry points.
;
        MACRO
        user_veneer $entrypoint
user_$entrypoint
        SWI     XOS_EnterOS
        BL      $entrypoint
        [ No32bitCode
        TEQP    pc, #0          ; re-enable IRQs, FIQs, USR26 mode (32-bit OK)
        NOP
        |
        MRS     lr, CPSR        ; CPSR -> R14_svc
        TST     lr, #2_11100    ; in a 32-bit mode?  Z clear if not, set if so
        MSRNE   CPSR_c, #USR32_mode ; switch to USR32, enable IRQs, enable FIQs
        TEQEQP  pc, #Z_bit      ; switch to USR26, preserve Z! (32-bit OK)
        MOVNE   pc, lr          ; USR32 return
        ]
        MOVS    pc, lr          ; USR26 return restoring flags (32-bit OK)
        MEND

        MACRO
        svc_veneer $entrypoint
svc_$entrypoint
        STR     lr, [sp, #-4]!  ; stack return register
        BL      $entrypoint
        [ :LNOT: No32bitCode
        MRS     lr, CPSR        ; CPSR -> R14_svc
        TST     lr, #2_11100    ; in a 32-bit mode?  Z clear if not, set if so
        LDRNE   pc, [sp], #4    ; SVC32 return
        ]
        LDMFD   sp!, {pc}^      ; SVC26 return restoring flags, 32-bit OK
        MEND

        MACRO
        mbuf_veneer $entrypoint
        svc_veneer $entrypoint
        user_veneer $entrypoint
        MEND

        mbuf_veneer alloc
        mbuf_veneer alloc_g
        mbuf_veneer alloc_u
        mbuf_veneer alloc_s
        mbuf_veneer alloc_c
        mbuf_veneer ensure_safe
        mbuf_veneer ensure_contig
        mbuf_veneer free
        mbuf_veneer freem
        mbuf_veneer dtom_free
        mbuf_veneer dtom_freem
        mbuf_veneer dtom
        mbuf_veneer any_unsafe
        mbuf_veneer this_unsafe
        mbuf_veneer count_bytes
        mbuf_veneer cat
        mbuf_veneer trim
        mbuf_veneer copy
        mbuf_veneer copy_p
        mbuf_veneer copy_u
        mbuf_veneer import
        mbuf_veneer export


;-----------------------------------------------------------------------------

	; Insert debug routines now

	LTORG

	InsertDebugRoutines

	LTORG

	; Insert any delayed strings now

	;; this mechanism will need attending to!

;-----------------------------------------------------------------------------

	LNK	mm.s

	END

; eof module.s
