/* showrt.c
 *
 * Author: Keith Ruttle (Acorn)
 *
 * Description
 * ===========
 * Code to support *Networks command
 *
 * Environment
 * ===========
 * Acorn RISC OS 3.11 or later.
 *
 * Compiler
 * ========
 * Acorn Archimedes C release 5.02 or later.
 *
 * Change record
 * =============
 *
 * JPD  Jem Davies (Cambridge Systems Design)
 *
 *
 * 12-Dec-94  09:36  JPD  Version 1.00
 * First version with change record. Modified: #includes to be ANSI-compliant.
 *
 * 13-Jan-95  12:17  JPD  Version 1.01
 * Modified to add static declarations and begin changes to enable
 * compilation with -fah option.
 *
 * 19-Jan-95  11:04  JPD  Version 1.02
 * Correct problem in mns_showroutes() with mbuf handling
 *
 *
 **End of change record*
 */

#ifdef OldCode
#include <sys/types.h>
#include <sys/param.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <sys/mbuf.h>
#include <net/route.h>
#include <net/routed.h>
#include <netinet/in.h>
#include <stdio.h>
#include <ctype.h>
#include "module.h"
#else

#include <stdio.h>
#include <string.h>

#include "kernel.h"

#include "sys/types.h"
#include "sys/socket.h"
#include "sys/ioctl.h"
#include "sys/mbuf.h"
#include "net/route.h"
#include "netinet/in.h"

#include "module.h"
#include "mns.h"
#include "showrt.h"
#include "stubs.h"
#endif

#ifdef OldCode
extern struct mns mns;
#endif

#ifdef OldCode
char *sprintnet(), *sprintroute(), *mns_str();
#else
static char *sprintnet(struct sockaddr *sa), *sprintroute(struct sockaddr *sa);
#endif

/******************************************************************************/

#ifdef OldCode
/*ARGSUSED*/
mns_showroutes(argc, argv)
int argc;
char **argv;
{
        struct mbuf mb;
        struct rtentry *rt;
        struct mbuf *m;
        struct mbuf **routehash;
        int rthashsize, i;
        struct rttinfo rttab;

        if ((mns.mns_flags & MNS_SEEKADDR) != 0 ||
            socketioctl(mns.mns_rxdsock, SIOCGETRT, (caddr_t)&rttab) < 0)
            return;

        rthashsize = rttab.r_rthashsize;
        routehash = (struct mbuf **)malloc(rthashsize*sizeof (struct mbuf *));
        if (routehash == 0)
            return;
        memcpy(routehash, rttab.r_rtnet, rthashsize*sizeof (struct mbuf *));
        for (i = 0; i < rthashsize; i++) {
            if (routehash[i] == 0)
                continue;
            m = routehash[i];
            while (m) {
                mb = *m;
                rt = mtod(&mb, struct rtentry *);
                printf("%-16s", sprintnet(&rt->rt_dst));
                if (rt->rt_flags & RTF_GATEWAY)
                    printf("%s=%s\n", mns_str(Str_Gteway), sprintroute(&rt->rt_gateway));
                else
                    printf("%s\n", mns_str(Str_Local));
                m = mb.m_next;
            }
        }
        free(routehash);
}
#else
void mns_showroutes(void)
{
   struct rtentry *rt;
   struct mbuf *m;
   struct mbuf **routehash;
   int rthashsize, i;
   struct rttinfo rttab;

   /* If we've received map info from a !Gateway, get it */
   if ((mns.mns_flags & MNS_SEEKADDR) != 0 ||
        socketioctl(mns.mns_rxdsock, SIOCGETRT, (caddr_t)&rttab) < 0)
      return;

   /* Get a buffer to hold pointers to mbufs holding routes to nets */
   rthashsize = rttab.r_rthashsize;
   routehash = (struct mbuf **)malloc(rthashsize * sizeof(struct mbuf *));

   if (routehash == 0)
      return;

   /* take copy of table of pointers */
   memcpy(routehash, rttab.r_rtnet, rthashsize * sizeof(struct mbuf *));

   for (i = 0; i < rthashsize; i++)
   {
      /* ignore null pointers in table */
      if (routehash[i] == 0)
         continue;

      m = routehash[i];

      /* follow down chain of route entries */
      while (m)
      {
         /* mbuf holds an rtentry */
         rt = mtod(m, struct rtentry *);

         /* print the name of the network */
         printf("%-16s", sprintnet(&rt->rt_dst));

         /* if a gateway print "gateway = " and address of gateway */
         if (rt->rt_flags & RTF_GATEWAY)
            printf("%s=%s\n", mns_str(Str_Gteway),sprintroute(&rt->rt_gateway));
         else
            /* print "local" to show this name is name of local network */
            printf("%s\n", mns_str(Str_Local));

         /* move on down chain */
         m = m->m_next;
      }
   }
   free(routehash);

   return;

} /* mns_showroutes() */

#endif

/******************************************************************************/

#ifdef OldCode
char *
sprintroute(sa)
struct sockaddr *sa;
{
    static char line[32];
    struct in_addr in;

    in = ((struct sockaddr_in *)sa)->sin_addr;
    in.s_addr = ntohl(in.s_addr);
#define C(x)    ((x) & 0xff)
#ifdef FULL
    (void) sprintf(line, "%u.%u.%u.%u", C(in.s_addr >> 24),
                        C(in.s_addr >> 16), C(in.s_addr >> 8), C(in.s_addr));
#else
    (void) sprintf(line, "%lu.%lu", C(in.s_addr >> 8), C(in.s_addr));
#endif
    return (line);
}
#else
static char *sprintroute(struct sockaddr *sa)
{
/*
 * return network address (as a string) of a gateway to a netwoRk
 */

   static char line[32];
   struct in_addr in;

   in = ((struct sockaddr_in *)sa)->sin_addr;
   in.s_addr = ntohl(in.s_addr);
#define C(x) ((x) & 0xff)
#ifdef FULL
   (void) sprintf(line, "%u.%u.%u.%u", C(in.s_addr >> 24),
                           C(in.s_addr >> 16), C(in.s_addr >> 8), C(in.s_addr));
#else
   (void) sprintf(line, "%lu.%lu", C(in.s_addr >> 8), C(in.s_addr));
#endif
   return line;

} /* sprintroute() */

#endif

/******************************************************************************/

#ifdef OldCode
char *
sprintnet(sa)
struct sockaddr *sa;
{
    static char line[32];
    struct in_addr in;

    in = ((struct sockaddr_in *)sa)->sin_addr;
    in.s_addr = ntohl(in.s_addr);
#define C(x)    ((x) & 0xff)
    if (!mns_addrtoname(line, in.s_addr))
        (void) sprintf(line, "%lu.%lu", C(in.s_addr >> 24), C(in.s_addr >> 16));
    return (line);
}
#else
static char *sprintnet(struct sockaddr *sa)
{
/*
 * return network name (as a string) of a network address
 */

   static char line[32];
   struct in_addr in;

   in = ((struct sockaddr_in *)sa)->sin_addr;
   in.s_addr = ntohl(in.s_addr);
   if (!mns_addrtoname(line, in.s_addr))
      (void) sprintf(line, "%lu.%lu", C(in.s_addr >> 24), C(in.s_addr >> 16));

   return line;

} /* sprintnet() */

#endif

/******************************************************************************/

/* EOF showrt.c */
