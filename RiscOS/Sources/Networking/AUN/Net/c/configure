/* configure.c
 *
 * Author: Keith Ruttle (Acorn)
 *
 * Description
 * ===========
 * Routines to discover environment in which running
 *
 * Environment
 * ===========
 * Acorn RISC OS 3.11 or later.
 *
 * Compiler
 * ========
 * Acorn Archimedes C release 5.06 or later.
 *
 * Change record
 * =============
 *
 * JPD  Jem Davies (Cambridge Systems Design)
 *
 * 09-Dec-94  17:35  JPD  Version 1.00
 * First version with change record. Modified: #includes to be ANSI-compliant,
 * other constructs to remove compiler warnings, code to cope with DCI-4 and
 * new mbuf structure. Added some comments (hopefully accurate).
 *
 * 04-Jan-95  11:51  JPD  Version 1.01
 * Tidied further. Tightened DCI driver finding. Begin changes to allow
 * order of module initialisation to be less restrictive.
 *
 * 13-Jan-95  15:44  JPD  Version 1.02
 * Complete initialisation chages. Allow compilation with -fah option. Moved
 * debug code to here.
 *
 * 06-Feb-95  12:38  JPD  Version 1.03
 * Moved debug code to debug.c.
 *
 * 27-Feb-95  15:42  JPD  Version 1.04
 * Removed OldCode. Added checking of machine type for peek machine type.
 * Moved check_present() here.
 *
 * 14-Mar-95  11:05  JPD  Version 1.05
 * Added code to ignore point-to-point drivers in search for a suitable DCI4
 * device driver.
 *
 * 22-Mar-95  12:08  JPD  Version 1.06
 * Updated some comments. Added ignore_driver().
 *
 *
 **End of change record*
 */


#include <string.h>

#include "kernel.h"
#include "swis.h"

#include "sys/types.h"
#include "sys/socket.h"
#include "sys/ioctl.h"
#include "sys/dcistructs.h"
#include "net/if.h"

#include "configure.h"
#include "swicode.h"
#include "module.h"
#include "debug.h"

/******************************************************************************/

int ignore_driver(struct dib *d, int dci_version)
{
/* Decide whether to ignore a DCI driver. Will do this is if a
 * point-to-point driver, or if too old.
 *
 * Parameters:
 *    d           : pointer to a driver information block structure
 *    dci_version : the DCI version supported by the device driver
 *
 * Returns:
 *    !0 => Ignore the driver
 *     0 => do NOT ignore
 */

   DEBUGP2("#ignore_driver() DCI version = %d\n\r", dci_version);

   if (dci_version < MINIMUM_DCI_VERSION)
   {
      DEBUGP1("#ignore_driver() DCI version too old, ignoring\n\r");
      return 1;
   }

   /* Check to see if flags will be returned in dib struct */
   if (dci_version >= 403)
      if ((d->dib_inquire & INQ_POINTOPOINT) != 0)
      {
         DEBUGP1("#ignore_driver() point-to-point, ignoring\n\r");
         return 1;
      }

   DEBUGP1("#ignore_driver() NOT ignoring\n\r");

   return 0;

} /* ignore_driver() */

/******************************************************************************/

int read_device_info(char *buf, char *module, int *net, int *noclock,
                                                                   int *segsize)
{
/* This returns information on a DCI driver found. Returns information on
 * first suitable device driver starting from head of chain of device
 * information blocks created in response to the service call to Enumerate
 * drivers. Drivers add to the head of this list, so in practice, the first
 * will probably be the last in the module list. "Suitable" means high
 * enough DCI version and not point-to-point.
 *
 * Parameters:
 *    buf     : pointer to where to return the device name and number e.g. "en0"
 *    module  : pointer to where to return the module name, e.g. "Ether2"
 *    net     : pointer to where to return the local net number, -1 if not found
 *    noclock : pointer to where to return the clock status
 *    segsize : pointer to where to return the seg size
 *
 * Returns:
 *    the local station number
 */

   _kernel_swi_regs r;
   _kernel_oserror *e;
   struct dib *d;
   int stationid = 0;
   struct chaindib *chdp, *n;

   *buf = 0;
   *segsize = MAX_SEGSIZE;

   r.r[0] = 0;         /* initialise to zero so that we can detect a response */
   r.r[1] = Service_EnumerateNetworkDrivers;
   /* Issue service call to find all DCI4 drivers */
   e = _kernel_swi(OS_ServiceCall, &r, &r);

   /* if no error issuing service call and received a response */
   if ((e == 0) && (chdp = (struct chaindib *)(r.r[0]), chdp != 0))
   {
      n = chdp->chd_next;
      d = chdp->chd_dib;

      /* while still something to look at and not yet found a suitable driver */
      while ((d != 0) && (*buf == 0))
      {                                     /* get module title, e.g. "Ether3"*/
         strncpy(module, (char *)d->dib_module, 24);
         strcpy(buf, (char *)d->dib_name);  /* get device name, e.g. "en" */
         strcat(buf, "0");                  /* add zero to create, e.g. "en0" */
         DEBUGP2("#read_device_info() %s found\n\r", buf);

         r.r[0] = 0; /* flags */
                                            /* Get DCI version from driver */
         e = _kernel_swi((d->dib_swibase + DCI4Version), &r, &r);
         if (e)
         {
            DEBUGP1("#read_device_info() error in DCIVersion SWI\n\r");
            *buf = 0;                       /* ... say no driver found */
         }
         else
         {
            if (ignore_driver(d, r.r[1]))
               *buf = 0;                    /* ... say no driver found */
         }

         if (n == 0)                        /* if no more */
            break;

         /* step on */
         d = n->chd_dib;
         n = n->chd_next;

      } /* endwhile */

      /* Now, free all the chaindibs returned to us */
      while (chdp != 0)
      {
         r.r[0] = 7;      /* reason code Free */
         r.r[2] = (int) chdp;
         chdp = chdp->chd_next;
         if (e = _kernel_swi(OS_Module, &r, &r), e != 0);
            /* if any error, probably should not continue freeing blocks */
            break;
      }
   }
   else
      DEBUGP1("#read_device_info() no sensible response to EnumerateNetworkDrivers\n\r");

   /* If Econet present, get local address and clock status from it */
   if ((stationid = read_eco_info(net, noclock)) > 0)
      return (stationid);

   /* Else read configured station id */
   r.r[0] = READCMOS;
   r.r[1] = CMOS_Stn;         /* location for station */
   return (_kernel_swi(OS_Byte, &r, &r) ? 0 : r.r[2]);
                   /* return zero if error else station number read from CMOS */

} /* read_device_info() */

/******************************************************************************/

int read_eco_info(int *net, int *noclock)
{
/* This returns information on the state of Econet
 *
 * Parameters:
 *    net     : pointer to where to return the net number
 *    noclock : pointer to where to return the module name
 *
 * Returns:
 *    the local station number
 */

   _kernel_swi_regs r;
   int stationid = 0;

   /* call the real Econet module */
   *net = call_econet(Econet_ReadLocalStationAndNet, &r) ? -1 : r.r[1];
   if (*net != -1)
   {
      stationid = r.r[0];
      r.r[0] = 2;
      r.r[1] = 0;
      *noclock = call_econet(Econet_NetworkState, &r) ? 0 : r.r[2];
   }

   return stationid;

} /* read_eco_info() */

/******************************************************************************/

int check_present(void)
{
/* Check that the necessary modules (DCI driver and Internet) are present
 * and OK.
 *
 * Parameters:
 *    None
 *
 * Returns:
 *    !0 => present
 *     0 => not present
 */

   struct ifreq ifr;
   char device[6], module[24];
   int s, rubbish;
   int res = 0;

   device[0] = '\0';

   /* Find first DCI driver present */
   (void) read_device_info(device, module, &rubbish, &rubbish, &rubbish);

   /* if no device responding, return no good */
   if (device[0] == 0)
   {
      DEBUGP1("#check_present() no device driver present\n\r");
   }
   else
   {
     /* Check that Internet module is present and alive and is connected
      * to a device driver
      */

      if (s = socket(AF_INET, SOCK_DGRAM, 0), s < 0)
      {
         DEBUGP1("#check_present() Internet not present\n\r");
      }
      else
      {
         /* get the interface flags */
         DEBUGP1("#check_present() about to get i/f flags\n\r");

         strncpy(ifr.ifr_name, device, sizeof(ifr.ifr_name));
         if (socketioctl(s, SIOCGIFFLAGS, (caddr_t)&ifr) < 0)
         {
            DEBUGP1("#check_present() SIOCGIFFLAGS socketioctl failed\n\r");
         }
         else
         {
            DEBUGP1("#check_present() got i/f flags - all OK\n\r");
            res = 1;
         }
         socketclose(s);
      }
   }

   return res;

} /* check_present() */

/******************************************************************************/

void check_machine_type(void)
{
/* Find the machine type upon which we are running so that we can return a
 * suitable value for a later machine type peek.
 *
 * Parameters:
 *    None
 *
 * Returns:
 *    None
 */

   _kernel_swi_regs r;

   r.r[0] = 2;

   /* check type of IO chip */

   if (_kernel_swi(OS_ReadSysInfo, &r, &r) == 0)
      if ((r.r[0] & 0xFF00) == 0x100)                        /* Is it IOMD? */
         /* If so, make it a Risc-PC */
         machine_type = MACHINE_TYPE_RISC_PC;

   return;

} /* check_machine_type() */

/******************************************************************************/

/* EOF configure.c */
