/* inetfn.c
 *
 * Author: Keith Ruttle (Acorn)
 *
 * Description
 * ===========
 * Internet and network address manipulation routines
 *
 * Environment
 * ===========
 * Acorn RISC OS 3.11 or later.
 *
 * Compiler
 * ========
 * Acorn Archimedes C release 5.06 or later.
 *
 * Change record
 * =============
 *
 * JPD  Jem Davies (Cambridge Systems Design)
 *
 *
 * 04-Jan-95  11:56  JPD  Version 1.00
 * First version with change record. Modified: #includes to be ANSI-compliant,
 * added header file for extern delarations.
 *
 * 22-Feb-95  11:53  JPD  Vesrion 1.01
 * Removed OldCode
 *
 *
 **End of change record*
 */

#include "sys/types.h"
#include "netinet/in.h"

#include "inetfn.h"

/******************************************************************************/

char *inet_ntoa(u_long in)
{
/*
 * Convert network-format internet address to string d.d.d.d representation
 *
 * Parameters:
 *    in : address
 *
 * Returns:
 *    pointer to static string
 */

   static char b[18];
   register char *p;

   p = (char *)&in;
#define UC(b)   (((int)b)&0xff)
   sprintf(b, "%d.%d.%d.%d", UC(p[0]), UC(p[1]), UC(p[2]), UC(p[3]));

   return (b);

} /* inet_ntoa() */

/******************************************************************************/

u_long htonl(u_long x)
{
/*
 * Convert host to network long
 *
 * Parameters:
 *    x : value
 *
 * Returns:
 *    value in network form
 *
 */

   return ntohl(x);

} /* htonl() */

/******************************************************************************/

int htons(int x)
{
/*
 * Convert host to network short
 *
 * Parameters:
 *    x : value
 *
 * Returns:
 *    value in network form
 *
 */

   return ntohs(x);

} /* ntohs() */

/******************************************************************************/

int ntohl(u_long x)
{
/*
 * Convert network to host long
 *
 * Parameters:
 *    x : value
 *
 * Returns:
 *    value in host form
 *
 */

   return( ((x & 0xff) << 24) | ((x & 0xff00) << 8) | ((x & 0xff0000) >> 8) | ((x & 0xff000000) >> 24) );

} /* ntohl() */

/******************************************************************************/

int ntohs(int x)
{
/*
 * Convert network to host short
 *
 * Parameters:
 *    x : value
 *
 * Returns:
 *    value in host form
 *
 */

   return ( (x & 0xff) << 8 | (x & 0xff00) >> 8 );

} /* ntohs() */


/******************************************************************************/

u_long inet_makeaddr(int net, int host)
{
/*
 * Make an Internet address from a host and net address
 *
 * Parameters:
 *    net  : network number
 *    host : host part of the address
 *
 * Returns:
 *    the internet address
 *
 */

   u_long addr;

   if (net < 128)
      addr = (net << IN_CLASSA_NSHIFT) | (host & IN_CLASSA_HOST);
   else if (net < 65536)
      addr = (net << IN_CLASSB_NSHIFT) | (host & IN_CLASSB_HOST);
   else
      addr = (net << IN_CLASSC_NSHIFT) | (host & IN_CLASSC_HOST);
   addr = htonl(addr);

   return addr;

} /* inet_makeaddr() */

/******************************************************************************/

void bzero(void *b, int length)
{
/*
 * Clear buffer to zero
 *
 *
 * Parameters:
 *    b      : pointer to buffer
 *    length : length to clear
 *
 * Returns:
 *    None
 *
 */

   memset(b, 0, length);

} /* bzero() */

/*
 * Return the netmask pertaining to an internet address.
 */
u_long inet_maskof(u_long inaddr)
{
	register u_long i = ntohl(inaddr);
	register u_long mask;

        /* All hard-wired in AUN! */
	if (i == 0)
		mask = 0;
	else
		mask = IN_CLASSB_NET;

	return (htonl(mask));
}


/******************************************************************************/

/* EOF inetfn.c */
