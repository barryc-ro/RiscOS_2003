/* tables.c
 *
 * Author: Keith Ruttle (Acorn)
 *
 * Description
 * ===========
 * Routing table routines
 *
 * Environment
 * ===========
 * Acorn RISC OS 3.11 or later.
 *
 * Compiler
 * ========
 * Acorn Archimedes C release 5.06 or later.
 *
 * Change record
 * =============
 *
 * JPD  Jem Davies (Cambridge Systems Design)
 *
 * 13-Oct-95  15:44  JPD  Version 1.00
 * First version with change record.
 *
 **End of change record*
 */

#ifdef OldCode
#include "defs.h"
#include <sys/ioctl.h>
#include <sys/syslog.h>
#else

#include "sys/types.h"
#include "sys/socket.h"
#include "net/route.h"
#include "netinet/in.h"
#include "sys/ioctl.h"
#include "protocols/routed.h"

#include "mnsg.h"
#include "debug.h"
#include "af.h"
#include "trace.h"
#include "table.h"
#include "data.h"
#include "startup.h"
#include "defs.h"
#include "interface.h"
#endif

/******************************************************************************/

#ifdef OldCode
struct rt_entry *
rtlookup(dst)
        struct sockaddr *dst;
{
        struct rt_entry *rt;
        struct rthash *rh;
        u_int hash;
        struct afhash h;
        int doinghost = 1;

        inet_hash(dst, &h);
        hash = h.afh_hosthash;
        rh = &hosthash[hash & ROUTEHASHMASK];
again:
        for (rt = rh->rt_forw; rt != (struct rt_entry *)rh; rt = rt->rt_forw) {
                if (rt->rt_hash != hash)
                        continue;
                if (equal(&rt->rt_dst, dst))
                        return (rt);
        }
        if (doinghost) {
                doinghost = 0;
                hash = h.afh_nethash;
                rh = &nethash[hash & ROUTEHASHMASK];
                goto again;
        }
        return (0);
}
#else
struct rt_entry *rtlookup(struct sockaddr *dst)
{
   struct rt_entry *rt;
   struct rthash *rh;
   u_int hash;
   struct afhash h;
   int doinghost = 1;

   inet_hash((struct sockaddr_in *)dst, &h);
   hash = h.afh_hosthash;
   rh = &hosthash[hash & ROUTEHASHMASK];
again:
   for (rt = rh->rt_forw; rt != (struct rt_entry *)rh; rt = rt->rt_forw)
   {
      if (rt->rt_hash != hash)
         continue;
      if (equal(&rt->rt_dst, dst))
         return rt;
   }
   if (doinghost)
   {
      doinghost = 0;
      hash = h.afh_nethash;
      rh = &nethash[hash & ROUTEHASHMASK];
      goto again;
   }
   return 0;

} /* rtlookup() */

#endif

/******************************************************************************/

#ifdef OldCode
struct sockaddr wildcard = { 0 };
#else
#ifdef notyet
static struct sockaddr wildcard = { 0 };
#endif
#endif

#ifdef OldCode
struct rt_entry *
rtfind(dst)
        struct sockaddr *dst;
{
        struct rt_entry *rt;
        struct rthash *rh;
        u_int hash;
        struct afhash h;
        int doinghost = 1;

        inet_hash(dst, &h);
        hash = h.afh_hosthash;
        rh = &hosthash[hash & ROUTEHASHMASK];

again:
        for (rt = rh->rt_forw; rt != (struct rt_entry *)rh; rt = rt->rt_forw) {
                if (rt->rt_hash != hash)
                        continue;
                if (doinghost) {
                        if (equal(&rt->rt_dst, dst))
                                return (rt);
                } else {
                        if (inet_netmatch(&rt->rt_dst, dst))
                                return (rt);
                }
        }
        if (doinghost) {
                doinghost = 0;
                hash = h.afh_nethash;
                rh = &nethash[hash & ROUTEHASHMASK];
                goto again;
        }
#ifdef notyet
        if (dst != &wildcard) {
                dst = &wildcard, hash = 0;
                goto again;
        }
#endif
        return (0);
}
#else

struct rt_entry *rtfind(struct sockaddr *dst)
{
   struct rt_entry *rt;
   struct rthash *rh;
   u_int hash;
   struct afhash h;
   int doinghost = 1;

   inet_hash((struct sockaddr_in *)dst, &h);
   hash = h.afh_hosthash;
   rh = &hosthash[hash & ROUTEHASHMASK];

again:
   for (rt = rh->rt_forw; rt != (struct rt_entry *)rh; rt = rt->rt_forw)
   {
      if (rt->rt_hash != hash)
         continue;
      if (doinghost)
      {
         if (equal(&rt->rt_dst, dst))
            return rt;
      }
      else
      {
         if (inet_netmatch((struct sockaddr_in *)&rt->rt_dst,
                                                     (struct sockaddr_in *)dst))
            return rt;
      }
   }
   if (doinghost)
   {
      doinghost = 0;
      hash = h.afh_nethash;
      rh = &nethash[hash & ROUTEHASHMASK];
      goto again;
   }
#ifdef notyet
   if (dst != &wildcard)
   {
      dst = &wildcard, hash = 0;
      goto again;
   }
#endif

   return 0;

} /* rtfind() */

#endif

/******************************************************************************/

#ifdef OldCode
rtadd(dst, gate, metric, state)
        struct sockaddr *dst, *gate;
        int metric, state;
{
        struct afhash h;
        struct rt_entry *rt;
        struct rthash *rh;
        int flags;
        u_int hash;

        inet_hash(dst, &h);
        flags = inet_rtflags(dst);

        if (flags & RTF_SUBNET) {
                state |= RTS_SUBNET;
                flags &= ~RTF_SUBNET;
        }
        if (flags & RTF_HOST) {
                hash = h.afh_hosthash;
                rh = &hosthash[hash & ROUTEHASHMASK];
        } else {
                hash = h.afh_nethash;
                rh = &nethash[hash & ROUTEHASHMASK];
        }
        rt = (struct rt_entry *)malloc(sizeof (*rt));
        if (rt == 0)
                return;
        rt->rt_hash = hash;
        rt->rt_dst = *dst;
        rt->rt_router = *gate;
        rt->rt_timer = 0;
        rt->rt_flags = RTF_UP | flags;
        rt->rt_state = state | RTS_CHANGED;
        rt->rt_ifp = if_ifwithdstaddr(&rt->rt_router);
        if (rt->rt_ifp == 0)
                rt->rt_ifp = if_ifwithnet(&rt->rt_router);
        if ((state & RTS_INTERFACE) == 0)
                rt->rt_flags |= RTF_GATEWAY;
        rt->rt_metric = metric;
        insque(rt, rh);
        TRACE_ACTION("Add route", rt);
        if ((rt->rt_state & (RTS_INTERNAL | RTS_EXTERNAL)) == 0)
            (void) socketioctl(*routedsock, SIOCADDRT, (char *)&rt->rt_rt);
}
#else
void rtadd(struct sockaddr *dst, struct sockaddr *gate, int metric, int state)
{
   struct afhash h;
   struct rt_entry *rt;
   struct rthash *rh;
   int flags;
   u_int hash;

   DEBUGP3("#rtadd() %08X, %08X\n\r",
                                 ((struct sockaddr_in *)dst)->sin_addr.s_addr,
                                 ((struct sockaddr_in *)gate)->sin_addr.s_addr);

   inet_hash((struct sockaddr_in *)dst, &h);
   flags = inet_rtflags(dst);

   if (flags & RTF_SUBNET)
   {
      state |= RTS_SUBNET;
      flags &= ~RTF_SUBNET;
   }

   if (flags & RTF_HOST)
   {
      hash = h.afh_hosthash;
      rh = &hosthash[hash & ROUTEHASHMASK];
   }
   else
   {
      hash = h.afh_nethash;
      rh = &nethash[hash & ROUTEHASHMASK];
   }

   rt = (struct rt_entry *)malloc(sizeof (*rt));
   if (rt == 0)
      return;

   rt->rt_hash = hash;
   rt->rt_dst = *dst;
   rt->rt_router = *gate;
   rt->rt_timer = 0;
   rt->rt_flags = RTF_UP | flags;
   rt->rt_state = state | RTS_CHANGED;
   rt->rt_ifp = if_ifwithdstaddr(&rt->rt_router);
   if (rt->rt_ifp == 0)
      rt->rt_ifp = if_ifwithnet(&rt->rt_router);
   if ((state & RTS_INTERFACE) == 0)
      rt->rt_flags |= RTF_GATEWAY;
   rt->rt_metric = metric;
   insque((struct qelem *)rt, (struct qelem *)rh);

   TRACE_ACTION("Add route", rt);

#ifndef DEBUG
   if ((rt->rt_state & (RTS_INTERNAL | RTS_EXTERNAL)) == 0)
      (void) rtioctl(ADD, &rt->rt_rt);
#else
   if ((rt->rt_state & (RTS_INTERNAL | RTS_EXTERNAL)) == 0)
      if (rtioctl(ADD, &rt->rt_rt) < 0)
         DEBUGP1("#rtadd() socketioctl to add route failed\n\r");
#endif

   DEBUGP1("#rtadd() exit\n\r");

   return;

} /* rtadd() */

#endif

/******************************************************************************/

#ifdef OldCode
rtchange(rt, gate, metric)
        struct rt_entry *rt;
        struct sockaddr *gate;
        short metric;
{
        int add = 0, delete = 0, newgateway = 0;
        struct rtentry oldroute;

        if (!equal(&rt->rt_router, gate)) {
                newgateway++;
                TRACE_ACTION("Change route from ", rt);
        } else if (metric != rt->rt_metric)
                TRACE_NEWMETRIC(rt, metric);
        if ((rt->rt_state & RTS_INTERNAL) == 0) {

                if (newgateway) {
                        add++;
                        if (rt->rt_metric != HOPCNT_INFINITY)
                                delete++;
                } else if (metric == HOPCNT_INFINITY)
                        delete++;
                else if (rt->rt_metric == HOPCNT_INFINITY)
                        add++;
        }
        if (delete)
                oldroute = rt->rt_rt;
        if ((rt->rt_state & RTS_INTERFACE) && delete) {
                rt->rt_state &= ~RTS_INTERFACE;
                rt->rt_flags |= RTF_GATEWAY;
        }
        if (add) {
                rt->rt_router = *gate;
                rt->rt_ifp = if_ifwithdstaddr(&rt->rt_router);
                if (rt->rt_ifp == 0)
                        rt->rt_ifp = if_ifwithnet(&rt->rt_router);
        }
        rt->rt_metric = metric;
        rt->rt_state |= RTS_CHANGED;
        if (newgateway)
                TRACE_ACTION("Change route to ", rt);
        if (add)
                (void) socketioctl(*routedsock, SIOCADDRT, (char *)&rt->rt_rt);
        if (delete)
                (void) socketioctl(*routedsock, SIOCDELRT, (char *)&oldroute);
}
#else
void rtchange(struct rt_entry *rt, struct sockaddr *gate, short metric)
{
   int add = 0, delete = 0, newgateway = 0;
   struct rtentry oldroute;

   DEBUGP2("#rtchange() %08X\n\r",
                                 ((struct sockaddr_in *)gate)->sin_addr.s_addr);

   if (!equal(&rt->rt_router, gate))
   {
      newgateway++;
      TRACE_ACTION("Change route from ", rt);
   }
   else
      if (metric != rt->rt_metric)
         TRACE_NEWMETRIC(rt, metric);

   if ((rt->rt_state & RTS_INTERNAL) == 0)
   {
      if (newgateway)
      {
         add++;
         if (rt->rt_metric != HOPCNT_INFINITY)
            delete++;
      }
      else
         if (metric == HOPCNT_INFINITY)
            delete++;
         else
            if (rt->rt_metric == HOPCNT_INFINITY)
               add++;
   }

   if (delete)
      oldroute = rt->rt_rt;

   if ((rt->rt_state & RTS_INTERFACE) && delete)
   {
      rt->rt_state &= ~RTS_INTERFACE;
      rt->rt_flags |= RTF_GATEWAY;
   }

   if (add)
   {
      rt->rt_router = *gate;
      rt->rt_ifp = if_ifwithdstaddr(&rt->rt_router);
      if (rt->rt_ifp == 0)
         rt->rt_ifp = if_ifwithnet(&rt->rt_router);
   }

   rt->rt_metric = metric;
   rt->rt_state |= RTS_CHANGED;

   if (newgateway)
      TRACE_ACTION("Change route to ", rt);

   if (add)
      (void) rtioctl(ADD, &rt->rt_rt);

   if (delete)
      (void) rtioctl(DELETE, &oldroute);

   return;

} /* rtchange() */

#endif

/******************************************************************************/

#ifdef OldCode
rtdelete(rt)
        struct rt_entry *rt;
{

        TRACE_ACTION("Delete route", rt);
        if (rt->rt_metric < HOPCNT_INFINITY) {
            if ((rt->rt_state & (RTS_INTERNAL | RTS_EXTERNAL)) == 0)
                (void) socketioctl(*routedsock, SIOCDELRT, (char *)&rt->rt_rt);
        }
        remque(rt);
        free((char *)rt);
}
#else
void rtdelete(struct rt_entry *rt)
{
   TRACE_ACTION("Delete route", rt);

   if (rt->rt_metric < HOPCNT_INFINITY)
   {
      if ((rt->rt_state & (RTS_INTERNAL | RTS_EXTERNAL)) == 0)
         (void) rtioctl(DELETE, &rt->rt_rt);
   }

   remque((struct qelem *)rt);
   free((char *)rt);

   return;

} /* rtdelete() */

#endif

/******************************************************************************/

#ifdef OldCode
rtdeleteall(sig)
        int sig;
{
        struct rthash *rh;
        struct rt_entry *rt;
        struct rthash *base = hosthash;
        int doinghost = 1;

again:
        for (rh = base; rh < &base[ROUTEHASHSIZ]; rh++) {
                rt = rh->rt_forw;
                for (; rt != (struct rt_entry *)rh; rt = rt->rt_forw) {
                        if (rt->rt_state & RTS_INTERFACE ||
                            rt->rt_metric >= HOPCNT_INFINITY)
                                continue;
                        TRACE_ACTION("Delete route", rt);
                        if ((rt->rt_state & (RTS_INTERNAL|RTS_EXTERNAL)) == 0)
                            (void) socketioctl(*routedsock, SIOCDELRT, (char *)&rt->rt_rt);
                }
        }
        if (doinghost) {
                doinghost = 0;
                base = nethash;
                goto again;
        }
}
#else
#if 0
static void rtdeleteall(int sig)
{
   struct rthash *rh;
   struct rt_entry *rt;
   struct rthash *base = hosthash;
   int doinghost = 1;

again:
   for (rh = base; rh < &base[ROUTEHASHSIZ]; rh++)
   {
      rt = rh->rt_forw;
      for (; rt != (struct rt_entry *)rh; rt = rt->rt_forw)
      {
         if (rt->rt_state & RTS_INTERFACE || rt->rt_metric >= HOPCNT_INFINITY)
            continue;

         TRACE_ACTION("Delete route", rt);

         if ((rt->rt_state & (RTS_INTERNAL|RTS_EXTERNAL)) == 0)
            (void) socketioctl(*routedsock, SIOCDELRT, (char *)&rt->rt_rt);
      }
   }

   if (doinghost)
   {
      doinghost = 0;
      base = nethash;
      goto again;
   }

   return;

} /* rtdeleteall() */
#endif
#endif

/******************************************************************************/

#ifdef OldCode
rtinit()
{
        struct rthash *rh;

        for (rh = nethash; rh < &nethash[ROUTEHASHSIZ]; rh++)
                rh->rt_forw = rh->rt_back = (struct rt_entry *)rh;
        for (rh = hosthash; rh < &hosthash[ROUTEHASHSIZ]; rh++)
                rh->rt_forw = rh->rt_back = (struct rt_entry *)rh;
}
#else
void rtinit(void)
{
   struct rthash *rh;

   for (rh = nethash; rh < &nethash[ROUTEHASHSIZ]; rh++)
      rh->rt_forw = rh->rt_back = (struct rt_entry *)rh;
   for (rh = hosthash; rh < &hosthash[ROUTEHASHSIZ]; rh++)
      rh->rt_forw = rh->rt_back = (struct rt_entry *)rh;

   return;

} /* rtinit() */

#endif

static int seqno;

static int rtioctl(int action, struct rtuentry *ort)
{
        int r, retval;
	struct {
		struct rt_msghdr w_rtm;
		struct sockaddr_in w_dst;
		struct sockaddr w_gate;
		struct sockaddr_in w_netmask;
	} w;
#define rtm w.w_rtm

        r = socket(PF_ROUTE, SOCK_RAW, 0);
        if (r < 0)
            return (-1);

	bzero(&w, sizeof(w));
	rtm.rtm_msglen = sizeof(w);
	rtm.rtm_version = RTM_VERSION;
	rtm.rtm_type = (action == ADD ? RTM_ADD :
				(action == DELETE ? RTM_DELETE : RTM_CHANGE));
#undef rt_dst
	rtm.rtm_flags = ort->rtu_flags;
	rtm.rtm_seq = ++seqno;
	rtm.rtm_addrs = RTA_DST|RTA_GATEWAY;
	memcpy(&w.w_dst, &ort->rtu_dst, sizeof(w.w_dst));
	memcpy(&w.w_gate, &ort->rtu_router, sizeof(w.w_gate));
	w.w_dst.sin_family = AF_INET;
	w.w_dst.sin_len = sizeof(w.w_dst);
	w.w_gate.sa_family = AF_INET;
	w.w_gate.sa_len = sizeof(w.w_gate);
	if (rtm.rtm_flags & RTF_HOST) {
		rtm.rtm_msglen -= sizeof(w.w_netmask);
	} else {
		register char *cp;
		int len;

		rtm.rtm_addrs |= RTA_NETMASK;
		w.w_netmask.sin_addr.s_addr =
			inet_maskof(w.w_dst.sin_addr.s_addr);
		for (cp = (char *)(1 + &w.w_netmask.sin_addr);
				    --cp > (char *) &w.w_netmask; )
			if (*cp)
				break;
		len = cp - (char *)&w.w_netmask;
		if (len) {
			len++;
			w.w_netmask.sin_len = len;
			len = 1 + ((len - 1) | (sizeof(long) - 1));
		} else
			len = sizeof(long);
		rtm.rtm_msglen -= (sizeof(w.w_netmask) - len);
	}
	retval = socketwrite(r, &w, rtm.rtm_msglen);
	socketclose(r);
	return (retval);
}

/******************************************************************************/

/* EOF tables.c */
