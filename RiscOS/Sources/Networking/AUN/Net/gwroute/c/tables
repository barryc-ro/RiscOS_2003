#include "defs.h"
#include <sys/ioctl.h>
#include <sys/syslog.h>

struct rt_entry *
rtlookup(dst)
        struct sockaddr *dst;
{
        struct rt_entry *rt;
        struct rthash *rh;
        u_int hash;
        struct afhash h;
        int doinghost = 1;

        inet_hash(dst, &h);
        hash = h.afh_hosthash;
        rh = &hosthash[hash & ROUTEHASHMASK];
again:
        for (rt = rh->rt_forw; rt != (struct rt_entry *)rh; rt = rt->rt_forw) {
                if (rt->rt_hash != hash)
                        continue;
                if (equal(&rt->rt_dst, dst))
                        return (rt);
        }
        if (doinghost) {
                doinghost = 0;
                hash = h.afh_nethash;
                rh = &nethash[hash & ROUTEHASHMASK];
                goto again;
        }
        return (0);
}

struct sockaddr wildcard = { 0 };

struct rt_entry *
rtfind(dst)
        struct sockaddr *dst;
{
        struct rt_entry *rt;
        struct rthash *rh;
        u_int hash;
        struct afhash h;
        int doinghost = 1;

        inet_hash(dst, &h);
        hash = h.afh_hosthash;
        rh = &hosthash[hash & ROUTEHASHMASK];

again:
        for (rt = rh->rt_forw; rt != (struct rt_entry *)rh; rt = rt->rt_forw) {
                if (rt->rt_hash != hash)
                        continue;
                if (doinghost) {
                        if (equal(&rt->rt_dst, dst))
                                return (rt);
                } else {
                        if (inet_netmatch(&rt->rt_dst, dst))
                                return (rt);
                }
        }
        if (doinghost) {
                doinghost = 0;
                hash = h.afh_nethash;
                rh = &nethash[hash & ROUTEHASHMASK];
                goto again;
        }
#ifdef notyet
        if (dst != &wildcard) {
                dst = &wildcard, hash = 0;
                goto again;
        }
#endif
        return (0);
}

rtadd(dst, gate, metric, state)
        struct sockaddr *dst, *gate;
        int metric, state;
{
        struct afhash h;
        struct rt_entry *rt;
        struct rthash *rh;
        int flags;
        u_int hash;

        inet_hash(dst, &h);
        flags = inet_rtflags(dst);

        if (flags & RTF_SUBNET) {
                state |= RTS_SUBNET;
                flags &= ~RTF_SUBNET;
        }
        if (flags & RTF_HOST) {
                hash = h.afh_hosthash;
                rh = &hosthash[hash & ROUTEHASHMASK];
        } else {
                hash = h.afh_nethash;
                rh = &nethash[hash & ROUTEHASHMASK];
        }
        rt = (struct rt_entry *)malloc(sizeof (*rt));
        if (rt == 0)
                return;
        rt->rt_hash = hash;
        rt->rt_dst = *dst;
        rt->rt_router = *gate;
        rt->rt_timer = 0;
        rt->rt_flags = RTF_UP | flags;
        rt->rt_state = state | RTS_CHANGED;
        rt->rt_ifp = if_ifwithdstaddr(&rt->rt_router);
        if (rt->rt_ifp == 0)
                rt->rt_ifp = if_ifwithnet(&rt->rt_router);
        if ((state & RTS_INTERFACE) == 0)
                rt->rt_flags |= RTF_GATEWAY;
        rt->rt_metric = metric;
        insque(rt, rh);
        TRACE_ACTION("Add route", rt);
        if ((rt->rt_state & (RTS_INTERNAL | RTS_EXTERNAL)) == 0)
            (void) socketioctl(*routedsock, SIOCADDRT, (char *)&rt->rt_rt);
}

rtchange(rt, gate, metric)
        struct rt_entry *rt;
        struct sockaddr *gate;
        short metric;
{
        int add = 0, delete = 0, newgateway = 0;
        struct rtentry oldroute;

        if (!equal(&rt->rt_router, gate)) {
                newgateway++;
                TRACE_ACTION("Change route from ", rt);
        } else if (metric != rt->rt_metric)
                TRACE_NEWMETRIC(rt, metric);
        if ((rt->rt_state & RTS_INTERNAL) == 0) {

                if (newgateway) {
                        add++;
                        if (rt->rt_metric != HOPCNT_INFINITY)
                                delete++;
                } else if (metric == HOPCNT_INFINITY)
                        delete++;
                else if (rt->rt_metric == HOPCNT_INFINITY)
                        add++;
        }
        if (delete)
                oldroute = rt->rt_rt;
        if ((rt->rt_state & RTS_INTERFACE) && delete) {
                rt->rt_state &= ~RTS_INTERFACE;
                rt->rt_flags |= RTF_GATEWAY;
        }
        if (add) {
                rt->rt_router = *gate;
                rt->rt_ifp = if_ifwithdstaddr(&rt->rt_router);
                if (rt->rt_ifp == 0)
                        rt->rt_ifp = if_ifwithnet(&rt->rt_router);
        }
        rt->rt_metric = metric;
        rt->rt_state |= RTS_CHANGED;
        if (newgateway)
                TRACE_ACTION("Change route to ", rt);
        if (add)
                (void) socketioctl(*routedsock, SIOCADDRT, (char *)&rt->rt_rt);
        if (delete)
                (void) socketioctl(*routedsock, SIOCDELRT, (char *)&oldroute);
}

rtdelete(rt)
        struct rt_entry *rt;
{

        TRACE_ACTION("Delete route", rt);
        if (rt->rt_metric < HOPCNT_INFINITY) {
            if ((rt->rt_state & (RTS_INTERNAL | RTS_EXTERNAL)) == 0)
                (void) socketioctl(*routedsock, SIOCDELRT, (char *)&rt->rt_rt);
        }
        remque(rt);
        free((char *)rt);
}

rtdeleteall(sig)
        int sig;
{
        struct rthash *rh;
        struct rt_entry *rt;
        struct rthash *base = hosthash;
        int doinghost = 1;

again:
        for (rh = base; rh < &base[ROUTEHASHSIZ]; rh++) {
                rt = rh->rt_forw;
                for (; rt != (struct rt_entry *)rh; rt = rt->rt_forw) {
                        if (rt->rt_state & RTS_INTERFACE ||
                            rt->rt_metric >= HOPCNT_INFINITY)
                                continue;
                        TRACE_ACTION("Delete route", rt);
                        if ((rt->rt_state & (RTS_INTERNAL|RTS_EXTERNAL)) == 0)
                            (void) socketioctl(*routedsock, SIOCDELRT, (char *)&rt->rt_rt);
                }
        }
        if (doinghost) {
                doinghost = 0;
                base = nethash;
                goto again;
        }
}

rtinit()
{
        struct rthash *rh;

        for (rh = nethash; rh < &nethash[ROUTEHASHSIZ]; rh++)
                rh->rt_forw = rh->rt_back = (struct rt_entry *)rh;
        for (rh = hosthash; rh < &hosthash[ROUTEHASHSIZ]; rh++)
                rh->rt_forw = rh->rt_back = (struct rt_entry *)rh;
}
