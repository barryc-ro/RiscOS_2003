
#include "defs.h"

#include "net/if.h"

/*
 * Apply the function "f" to all non-passive
 * interfaces.
 */
toall(f)
        int (*f)();
{
        struct interface *ifp;
        extern struct interface *ifnet;

        for (ifp = ifnet; ifp; ifp = ifp->int_next) 
                (*f)(&ifp->int_broadaddr, 0, ifp);
}


/*ARGSUSED*/
rsendmsg(dst, flags, ifp)
        struct sockaddr *dst;
        int flags;
        struct interface *ifp;
{
        inet_output(*routedsock, flags, dst, sizeof (struct rip));
        TRACE_OUTPUT(ifp, dst, sizeof (struct rip));
}


supply(dst, flags, ifp)
        struct sockaddr *dst;
        int flags;
        struct interface *ifp;
{
        struct rt_entry *rt;
        struct netinfo *n = msg->rip_nets;
        struct rthash *rh;
        struct rthash *base = hosthash;
        int doinghost = 1, size;
        int npackets = 0;

        msg->rip_cmd = RIPCMD_RESPONSE;
        msg->rip_vers = RIPVERSION;
        memset(msg->rip_res1, 0, sizeof(msg->rip_res1));
again:
        for (rh = base; rh < &base[ROUTEHASHSIZ]; rh++)
        for (rt = rh->rt_forw; rt != (struct rt_entry *)rh; rt = rt->rt_forw) {

                if (ifp && rt->rt_ifp == ifp &&
                    (rt->rt_state & RTS_INTERFACE) == 0) 
                        continue;
                if (rt->rt_state & RTS_EXTERNAL) 
                        continue;

                if (doinghost == 0 && rt->rt_state & RTS_SUBNET) {
                        if (rt->rt_dst.sa_family != dst->sa_family) 
                                continue;
                        if (inet_sendroute(rt, dst) == 0) 
                                continue;
                }
                size = (char *)n - packet;
                if (size > MAXPACKETSIZE - sizeof (struct netinfo)) {
                        TRACE_OUTPUT(ifp, dst, size);
                        inet_output(*routedsock, flags, dst, size);

                        if (ifp && (ifp->int_flags &
                           (IFF_BROADCAST | IFF_POINTOPOINT | IFF_REMOTE)) == 0)
                                return;
                        n = msg->rip_nets;
                        npackets++;
                }
                n->rip_dst = rt->rt_dst;
                n->rip_metric = htonl(rt->rt_metric);
                n++;
        }
        if (doinghost) {
                doinghost = 0;
                base = nethash;
                goto again;
        }
        if (n != msg->rip_nets || npackets == 0) {
                size = (char *)n - packet;
                TRACE_OUTPUT(ifp, dst, size);
                inet_output(*routedsock, flags, dst, size);
        }
}
