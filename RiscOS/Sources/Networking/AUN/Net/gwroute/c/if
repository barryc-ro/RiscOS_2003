
#include "defs.h"

extern  struct interface *ifnet;

/*
 * Find the interface with address addr.
 */
struct interface *
if_ifwithaddr(addr)
        struct sockaddr *addr;
{
        struct interface *ifp;

#define same(a1, a2) \
        (memcmp((caddr_t)((a1)->sa_data), (caddr_t)((a2)->sa_data), 14) == 0)
        for (ifp = ifnet; ifp; ifp = ifp->int_next) {
                if (ifp->int_flags & IFF_REMOTE)
                        continue;
                if (ifp->int_addr.sa_family != addr->sa_family)
                        continue;
                if (same(&ifp->int_addr, addr))
                        break;
                if ((ifp->int_flags & IFF_BROADCAST) &&
                    same(&ifp->int_broadaddr, addr))
                        break;
        }
        return (ifp);
}

/*
 * Find the point-to-point interface with destination address addr.
 */
struct interface *
if_ifwithdstaddr(addr)
        struct sockaddr *addr;
{
        struct interface *ifp;

        for (ifp = ifnet; ifp; ifp = ifp->int_next) {
                if ((ifp->int_flags & IFF_POINTOPOINT) == 0)
                        continue;
                if (same(&ifp->int_dstaddr, addr))
                        break;
        }
        return (ifp);
}

/*
 * Find the interface on the network 
 * of the specified address.
 */
struct interface *
if_ifwithnet(addr)
        struct sockaddr *addr;
{
        struct interface *ifp;

        for (ifp = ifnet; ifp; ifp = ifp->int_next) {
                if (ifp->int_flags & IFF_REMOTE)
                        continue;
                if (inet_netmatch(addr, &ifp->int_addr))
                        break;
        }
        return (ifp);
}

/*
 * Find an interface from which the specified address
 * should have come from.  
 */
struct interface *
if_iflookup(addr)
        struct sockaddr *addr;
{
        struct interface *ifp, *maybe;

        maybe = 0;
        for (ifp = ifnet; ifp; ifp = ifp->int_next) {
                if (same(&ifp->int_addr, addr))
                        break;
                if ((ifp->int_flags & IFF_BROADCAST) &&
                    same(&ifp->int_broadaddr, addr))
                        break;
                if ((ifp->int_flags & IFF_POINTOPOINT) &&
                    same(&ifp->int_dstaddr, addr))
                        break;
                if (maybe == 0 && inet_netmatch(addr, &ifp->int_addr))
                        maybe = ifp;
        }
        if (ifp == 0)
                ifp = maybe;
        return (ifp);
}
