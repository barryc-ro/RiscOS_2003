/*
 * Routing table structure
 */
struct rthash {
        struct  rt_entry *rt_forw;
        struct  rt_entry *rt_back;
};

struct rt_entry {
        struct  rt_entry *rt_forw;
        struct  rt_entry *rt_back;
        union {
                struct  rtentry rtu_rt;
                struct {
                        u_long  rtu_hash;
                        struct  sockaddr rtu_dst;
                        struct  sockaddr rtu_router;
                        short   rtu_flags;
                        short   rtu_state;
                        int     rtu_timer;
                        int     rtu_metric;
                        int     rtu_ifmetric;
                        struct  interface *rtu_ifp;
                } rtu_entry;
        } rt_rtu;
};

#define rt_rt           rt_rtu.rtu_rt 
#define rt_hash         rt_rtu.rtu_entry.rtu_hash 
#define rt_dst          rt_rtu.rtu_entry.rtu_dst 
#define rt_router       rt_rtu.rtu_entry.rtu_router 
#define rt_flags        rt_rtu.rtu_entry.rtu_flags 
#define rt_timer        rt_rtu.rtu_entry.rtu_timer 
#define rt_state        rt_rtu.rtu_entry.rtu_state 
#define rt_metric       rt_rtu.rtu_entry.rtu_metric 
#define rt_ifmetric     rt_rtu.rtu_entry.rtu_ifmetric
#define rt_ifp          rt_rtu.rtu_entry.rtu_ifp 

#define ROUTEHASHSIZ    32 
#define ROUTEHASHMASK   (ROUTEHASHSIZ - 1)

/*
 * "State" of routing table entry.
 */
#define RTS_CHANGED     0x1 
#define RTS_EXTERNAL    0x2 
#define RTS_INTERNAL    0x4  
#define RTS_PASSIVE     IFF_PASSIVE 
#define RTS_INTERFACE   IFF_INTERFACE 
#define RTS_REMOTE      IFF_REMOTE 
#define RTS_SUBNET      IFF_SUBNET  


#define RTF_SUBNET      0x8000 

extern struct  rthash nethash[ROUTEHASHSIZ];
extern struct  rthash hosthash[ROUTEHASHSIZ];
struct  rt_entry *rtlookup();
struct  rt_entry *rtfind();
