        TTL     Econet filing system for Arthur. ==> &.Bauble.BootNet.Module

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
	GET	Hdr:Machine.<Machine>
        GET     Hdr:CMOS
        GET     Hdr:ModHand
        GET     Hdr:Debug
        GET     Hdr:Tokens
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:MsgTrans

;        GET     Hdr:EcoSymbols
;        GET     Hdr:EcoMacros

        GET     Time+Date

        SUBT    Module header ==> &.Bauble.BootNet.Module

        GBLL    Debug
        GBLA    DelayTime
        GBLA    OSMinimum
        GBLL    KernelInternationalisation

Debug           SETL    (:LNOT: ReleaseVersion) :LAND: False
DelayTime       SETA    0                               ; Zero to disable
OSMinimum       SETA    310
KernelInternationalisation      SETL    OSMinimum >= 350

Origin
        DCD     0                                       ; Start
        DCD     InitModule - Origin                     ; Initialisation
        DCD     0                                       ; Finalisation
        DCD     0                                       ; Service
        DCD     ModuleTitle - Origin
        DCD     HelpString - Origin
        DCD     UtilsCommands - Origin                  ; Command Table
        DCD     0
        DCD     0
        DCD     0
        DCD     0
        [ International_Help <> 0
        DCD     MessageFileName - Origin
        ]

        SUBT    Module entry stuff
        OPT     OptPage

HelpString
        DCB     "BootNet", 9, 9, "0.", CurrentVersion
        [       ReleaseVersion
        !       0, "Assembling BootNet 0.$CurrentVersion"
        |
        DCB     "/", CurrentIteration
        !       0, "Assembling BootNet 0.$CurrentVersion/$CurrentIteration"
        ]
        DCB     " (", CurrentDate, ")"
        [       :LNOT: ReleaseVersion
        DCB     " assembled  at ", CurrentTime, "."
        ]
        DCB     0
        ALIGN

        SUBT    Initialisation code
        OPT     OptPage

InitModule      ROUT

        [ Debug
        InsertTMLInitialisation 0
        ]

        ; *** Drop through ***

DoBootNet
        Push    "r0, lr"
        [       DelayTime <> 0
        MOV     r1, psr                                 ; Keep the mode and interrupt state
        TEQP    psr, #0                                 ; Enable all interrupts and go to user mode
        SWI     XOS_ReadMonotonicTime
        BVS     ExitDoBootNet
        ADD     r2, r0, #DelayTime
DelayWaitLoop
        SWI     XOS_ReadMonotonicTime
        BVS     ExitDoBootNet
        CMP     r0, r2
        BLT     DelayWaitLoop
        SWI     XOS_EnterOS                             ; Get back to SVC mode, ignore error
        TEQP    psr, r1                                 ; Restore interrupts and mode (might be IRQ)
        ]
        BL      ReadOSVersion
        BVS     ExitDoBootNet
        LDR     r14, =OSMinimum
        CMP     r0, r14
        BLT     DontBootAndDontInitialise
        BL      ReadConfiguration
        BVS     ExitDoBootNet
        BEQ     DontBoot
        BL      Action_DoBoot
        B       ExitDoBootNet

DontBoot
        BL      Action_NoBoot
        B       ExitDoBootNet

DontBootAndDontInitialise
        BL      Action_NoBoot
        ADR     r0, ErrorBadOSVersion
        SETV
ExitDoBootNet
        BL      Action_BootShareFS
        STRVS   r0, [ sp, #0 ]
        Pull    "r0, pc"

ReadOSVersion
        Push    "r1-r5, lr"
        MOV     r0, #ModHandReason_LookupName
        ADR     r1, Module_Kernel
        SWI     XOS_Module
        LDRVC   r2, [ r3, #20 ]                         ; Offset of help string
        ADDVC   r3, r3, r2                              ; Address of help string
        LDRVCB  r1, [ r3, #17 ]                         ; Character of LSB
        SUBVC   r0, r1, #"0"
        LDRVCB  r1, [ r3, #16 ]                         ; Character of CSB
        SUBVC   r1, r1, #"0"
        MOVVC   r2, #10
        MLAVC   r0, r2, r1, r0
        LDRVCB  r1, [ r3, #14 ]                         ; Character of MSB
        SUBVC   r1, r1, #"0"
        MOVVC   r2, #100
        MLAVC   r0, r2, r1, r0
        Pull    "r1-r5, pc"

Action_DoBoot
        Push    "r0-r2, lr"
        ADR     r1, Module_NetPrint
        BL      ReInitModule
        ADRVC   r1, Module_NetFS
        BLVC    ReInitModule
        ADRVC   r1, Module_NetUtils
        BLVC    ReInitModule_NoError
        [       False
        MOVVC   r0, #ReadCMOS                           ; Read the BroadcastLoader bit
        MOVVC   r1, #Mode2CMOS
        SWIVC   XOS_Byte
        BVS     ExitAction_DoBoot
        TST     r2, #BitSix                             ; Skip ReInit if not enabled
        ADREQ   r1, Module_BroadcastLoader
        BLEQ    ReInitModule
        ]
        ADRVC   r1, Module_NetFiler
        BLVC    ReInitModule
ExitAction_DoBoot
        STRVS   r0, [ sp, #0 ]
        Pull    "r0-r2, pc"

Action_NoBoot
        Push    "r0-r1, lr"
        [       False
        MOV     r0, #ModHandReason_Delete
        ADR     r1, Module_Internet
        SWI     XOS_Module
        MOV     r0, #ModHandReason_Delete
        ADR     r1, Module_Net
        SWI     XOS_Module
        ]
;
; 950318 KWelton
;
; The NetMsgs module no longer exists - it has been merged into the
; AUNMsgs module which contains all networking resources.
;
        [       False
        MOV     r0, #ModHandReason_Delete
        ADR     r1, Module_NetMsgs
        SWI     XOS_Module
        ]
        CLRV
        Pull    "r0-r1, pc"

Action_BootShareFS
        Push    "r0, lr"
        ADR     r0, File_BootShareFS
        SWI     XOS_CLI
        Pull    "r0, pc",,^

        LTORG

ErrorBadOSVersion
        DCD     0
        DCB     "Module BootNet unable to initialise; needs RISC OS 3.10 or later", 0
Module_Kernel
        DCB     "UtilityModule", 0
Module_NetPrint
        DCB     "NetPrint", 0
Module_NetFS
        DCB     "NetFS", 0
Module_NetUtils
        DCB     "NetUtils", 0
        [       False
Module_BroadcastLoader
        DCB     "BroadcastLoader", 0
        ]
Module_NetFiler
        DCB     "NetFiler", 0
        [       False
Module_Internet
        DCB     "Internet", 0
Module_Net
        DCB     "Net", 0
        ]
        [       False
Module_NetMsgs
        DCB     "NetMsgs", 0
        ]
Status_Common
        DCB     "BootNet    O", 0
Status_BootNetOff
        DCB     "ff", 0
Status_BootNetOn
        DCB     "n", 0
File_BootShareFS
        DCB     "Run Resources:$.Resources.ShareFS.!Boot", 0
        ALIGN

ReInitModule_NoError
        STMDB   sp!, {lr}
        BL      ReInitModule
        LDMIA   sp!, {pc}^

ReInitModule    ROUT
        ;       R1 ==> Pointer to case-sensitive name (preserved)
        ;       R0 Trashed
        Push    "r2-r7, lr"
        MOV     r6, r1                                  ; Save the name
        MOV     r0, #ModHandReason_EnumerateROM_Modules
        MOV     r1, #0                                  ; Module number
        MOV     r2, #-1                                 ; Area (System ROM)
GetModuleLoop
        SWI     XOS_Module
        BVS     ExitReInitModule
        MOV     r5, r6                                  ; A copy of the name pointer
CompareNameLoop
        LDRB    r14, [ r5 ], #1
        LDRB    r7, [ r3 ], #1
        TEQ     r7, r14
        BNE     GetModuleLoop                           ; This compare fails, get next name
        TEQ     r7, #0                                  ; Is this the terminator
        BNE     CompareNameLoop                         ; No, get next characters
        CMP     r4, #0                                  ; Test returned status
        MOVEQ   r0, #ModHandReason_ReInit               ; Only bother if dormant
        MOVEQ   r1, r6                                  ; Entry value of R1
        SWIEQ   XOS_Module
ExitReInitModule
        Pull    "r2-r7, pc"


        GET     Commands
        GET     HelpTokens

        [       Debug
        InsertDebugRoutines
        ]

        [       False
MakeError       ROUT
        Push    "r4, r5, lr"
        MOV     r4, #0
DoMakeError1
        MOV     r5, #0
        BL      MessageTransErrorLookup2
        Pull    "r4, r5, pc"

MakeErrorWithModuleName
        Push    "r4, r5, lr"
        ADR     r4, ModuleTitle
        B       DoMakeError1

MessageTransErrorLookup2
        Push    "r1-r3, r6, r7, lr"
        LD      r1, MessageBlockAddress
        CMP     r1, #0                                  ; Clears V
        BNE     DoErrorLookup
        MOV     r7, r0
        ADR     r0, MessageBlock
        ADR     r1, MessageFileName
        MOV     r2, #0                                  ; Use the file where she lies
        SWI     XMessageTrans_OpenFile
        ADRVC   r1, MessageBlock
        STRVC   r1, MessageBlockAddress
        MOV     r0, r7                                  ; Preserve R0 even in the error case
DoErrorLookup
        MOV     r2, #0
        MOV     r3, #0
        MOV     r6, #0
        MOV     r7, #0
        SWIVC   XMessageTrans_ErrorLookup
        Pull    "r1-r3, r6, r7, pc"

MessageFileName
        DCB     "Resources:$.Resources.BootNet.Messages", 0
        ALIGN

MessageTransGSLookup0
        Push    "r4, r5, lr"
        MOV     r4, #0
        MOV     r5, #0
        BL      MessageTransGSLookup2
        Pull    "r4, r5, pc"

MessageTransGSLookup1
        Push    "r5, lr"
        MOV     r5, #0
        BL      MessageTransGSLookup2
        Pull    "r5, pc"

MessageTransGSLookup2
        Push    "r6, r7, lr"
        LD      r0, MessageBlockAddress
        CMP     r0, #0                                  ; Clears V
        BNE     DoGSLookup
        Push    "r1, r2"
        ADR     r0, MessageBlock
        ADR     r1, MessageFileName
        MOV     r2, #0                                  ; Use the file where she lies
        SWI     XMessageTrans_OpenFile
        ADRVC   r0, MessageBlock
        STRVC   r0, MessageBlockAddress
        Pull    "r1, r2"
DoGSLookup
        MOV     r6, #0
        MOV     r7, #0
        SWIVC   XMessageTrans_GSLookup
        Pull    "r6, r7, pc"
        ]

        [ International_Help <> 0

MessageFileName
        DCB     "Resources:$.Resources.BootNet.Messages", 0
        ALIGN

MessageTransOpenFile
; Out:  r0 ->message file block allocated on stack (or error)
;
        SUB     sp, sp, #16
        MOV     r0, sp
        Push    "r1,r2,lr"
        ADR     r1, MessageFileName
        MOV     r2, #0
        SWI     XMessageTrans_OpenFile
        Pull    "r1,r2,lr"
        ADDVS   sp, sp, #16
        [ Debug
        BVS     %FT00
        DREG    r0, "Message block at "
        B       %FT01
00
        ADD     r0, r0, #4
        DSTRING r0, "OpenFile returned error : "
        SUB     r0, r0, #4
01
        ]
        MOV     pc, lr

MessageTransCloseFile
; Out:  preserves all registers and flags
;
        Push    "r0,lr"
        ADD     r0, sp, #4*2
        [ Debug
        DREG    r0, "Message block at "
        ]
        SWI     XMessageTrans_CloseFile
        Pull    "r0,lr"
        ADD     sp, sp, #16
        MOVS    pc, lr

MessageTransLookupOnce
; In:   r1 ->token
; Out:  r2 ->text looked up (not buffered)
;       r3 = length of text
;
        Push    "r0,r1,r4-r7,lr"
        [ Debug
        DLINE   "MessageTransLookupOnce"
        ]
        BL      MessageTransOpenFile
        STRVS   r0, [sp]
        Pull    "r0,r1,r4-r7,pc",VS
        MOV     r2, #0
        MOV     r3, #0
        MOV     r4, #0
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_Lookup
        BL      MessageTransCloseFile
        STRVS   r0, [sp]
        [ Debug
        BVC     %FT00
        ADD     r0, r0, #4
        DSTRING r0, "Lookup returned error : "
        SUB     r0, r0, #4
00
        ]
        Pull    "r0,r1,r4-r7,pc"

MessageTransErrorLookupOnce
; In:   r0 ->error to be looked up
; Out:  r0 ->error looked up
;
        Push    "r1-r7,lr"
        [ Debug
        DLINE   "MessageTransErrorLookupOnce"
        ]
        MOV     r7, r0
        BL      MessageTransOpenFile
        Pull    "r1-r7,pc",VS
        MOV     r1, r0
        MOV     r0, r7
        MOV     r2, #0
        MOV     r3, #0
        MOV     r4, #0
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup
        BL      MessageTransCloseFile
        Pull    "r1-r7,pc"

        ]

        END
