/*	Project Post (769) - AcornSMTP
	Acorn Risc Technologies
	Copyright © 1996. All Rights Reserved.

	FILE:		smtp_utils.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.05 for RISC OS

	OVERVIEW
	========
	Source file for implementation pop related utility functions

	HISTORY
	=======
	20/02/97	0.01	RDW	Initial version
	11/07/97	0.02	RDW	Tidy up when moving to correct build environment
	15/07/97	0.03	RDW	Tidy up
	08/10/97	0.04	RDW	commented out get_line_from_server
	14/10/97	0.05	RDW	destroy_response function added
	04/11/97	0.06	RDW	notify_client function added and WimpMessage and AcornSMTP_WimpMessage added
	06/04/98	0.07	RDW	DebugLib taken from exported lib now
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include <ctype.h>
#include "inetlib.h"
#include "socklib.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - External Libraries                                  */
/*                                                                            */
/* ************************************************************************** */
#include "DebugLib/DebugLib.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "common.h"
#include "smtp_utils.h"
#include "errortable.h"


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */
#define Message_AcornSMTP_PollWordSet AcornSMTP_SWIChunkBase			// WimpMessage number


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef struct
{
  AcornSMTP_returned_data *data;
} AcornSMTP_WimpMessage;

typedef struct
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } hdr;
  union
  {
    int  words[59];
    char bytes[236];
    AcornSMTP_WimpMessage pop3_data;
  } data;
} WimpMessage;


/* ************************************************************************** */
/*                                                                            */
/* External globals                                                           */
/*                                                                            */
/* ************************************************************************** */
extern errno;									// From Internet
extern process_details process1;						// This client's process detail					


/* ************************************************************************** */
/*
   FUNCTION:       positive_response
   DESCRIPTION:    Function to take a server response string and return TRUE
   		   if it is a positive response from the server, else return
   		   FALSE.
   DEPENDENCIES:   function		strncmp			string.h
   DEPENDED ON BY: function		delete_message		deletemsg.c
   		   function		get_list_of_messages	getlistmsg.c
   		   function		get_list_of_uids	getlistuid.c
   		   function		get_message_to_file	getmsgfile.c
   		   function		get_message_to_memory	getmsgmem.c
   		   function		get_number_of_messages	getnummsgs.c
   		   function		logon_USER_PASS		logon.c
   		   function		logout			logout.c
   INPUT PARAMS:   char[]		string			server string response to check
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   BOOL			TRUE			if +ve server response, else
   					FALSE			-ve server response
   CONSTANTS:      NONE
   VARIABLES:      BOOL			result			result to return
 */
/* ************************************************************************** */
extern BOOL positive_response(char string[])
{
  BOOL result = FALSE;
  
  if (string != 0)
  {
    if (strncmp("+OK", string, 3) == 0)
      result = TRUE;
  }

  return result;
}


extern void destroy_response(char **response)
{
  if (response)
  {
    if (*response)
      free(*response);
    *response = 0;
  }
}


_kernel_oserror* notify_client(void *data)
{
  _kernel_oserror *error = 0;
  
  if (process1.flags & REGISTER_WIMPMSG)
  {
    WimpMessage msg;
    _kernel_swi_regs r;
    
    memset(&msg, 0, sizeof(msg));
    msg.hdr.size             = sizeof(WimpMessage)-(sizeof(msg.data.words)-sizeof(msg.data.pop3_data));
    msg.hdr.action_code      = Message_AcornSMTP_PollWordSet;
    msg.data.pop3_data.data  = data;
    
    r.r[0] = 0;
    r.r[1] = (int)&msg;
    r.r[2] = (int)process1.taskhandle;
    r.r[3] = 0;
    r.r[4] = 0;
    
    error = _kernel_swi(TaskModule_SendMessage, &r, &r);
  }
  
  process1.pollword = data;
  
  return error;
}


extern void destroy(char **data)
{
  if (data)
  {
    if (*data)
      free(*data);
    *data = 0;
  }
}


extern BOOL response(const char string[], char *response)
{
  BOOL          result = FALSE;
  unsigned int i       = 0;
  unsigned int length  = 0;
  
  if ((string != 0) && (response != 0))
  {
    result = TRUE;
    length = strlen(string);

    i = 0;
    while (i<length)
    {
      switch (string[i])
      {
        case 'X':
        case 'Y':
        case 'Z':
        case 'x':
        case 'y':
        case 'z':
          break;
        default:
          if (string[i] != response[i])
            result = FALSE;
          break;
      }
      i++;
    }
  }
  return result;
}


/* ************************************************************************** */
/*
   FUNCTION:       convert_list2array
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   char*		list			list of email addresses
                   char***		array			address of char* array
                   unsigned int*	num			address of number of elements
   OUTPUT PARAMS:  char***		array			pointer to an array of strings (NULL if failed)
   		   unsigned int*	num			pointer to number of elements in array (0 if failed)
   RETURN VALUE:   _kernel_oserror	result			result to return	
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
_kernel_oserror* convert_list2array(char *list, char ***array, unsigned int* num)
{
  _kernel_oserror  *result    = 0;						/* result to return */
  char            **tmp_array = 0;						/* temporary array of char*s */
  unsigned int      number    = 0;						/* temporary counter of number of elements in the tmp_array */
  
  if ((list) && (array) && (num))						/* check all parameters are not null */
  {
    char *ptr = list;								/* pointer to navigate through the list */

    dprintf(("", "convert_list2array: list:  %s\n", list));
    dprintf(("", "convert_list2array: array: %x\n", array));
    dprintf(("", "convert_list2array: num:   %x\n", num));
    
    if (strlen(list) == 0)							/* if the list is 0 in length, then number = 0 */
      number = 0;
    else									/* otherwise, list must have at least 1 item in it */
      number = 1;
      
    if (number)									/* if there is something in the list, then */
    {
      while (*ptr != 0)								/* while not at end of list, do */
      {
        if (*ptr++ == ',')							/* if a ','comma found, increment element counter (NOTE this 'parsing' is crap.  We aught to call in the Elib address parser here */
          number++;
      }
      dprintf(("", "convert_list2array: number: %d\n", number));
      tmp_array = (char**)malloc(number*sizeof(char*));				/* create an array of char* s of size number*/
      if (tmp_array)								/* if malloc successful, then */
      {
        unsigned int  count = 0;						/* counter for current position in array of char*s, tmp_array */
        char         *ptr2  = list;						/* 2nd pointer to navigate through the list to find the end of the current item */
        BOOL          end = FALSE;						/* BOOL to indicate if the end of the list has been reached */
        
        memset(tmp_array, 0, number*sizeof(char*));				/* clear all char*s in array to 0 */
        dprintf(("", "convert_list2array: before while loop to get each element in the list\n"));
        while ((count < number) && (!end) && (!result))				/* while still items in list to process and not end and not an error, do */
        {
          ptr = ptr2;								/* set ptr (begining of an item) to ptr2 (next char after an item) */
          while ((*ptr2 != 0) && (*ptr2 != ','))				/* while ptr2 not at end of list and not at the end of an item, do */
            ptr2++;								/* move to next char */
          if (ptr == ptr2)							/* if ptr == ptr2, then we've reached the end */
            end = TRUE;
          else									/* else, process this item */
          {
            unsigned int  extra = 0;						/* extra space that maybe needed in copy of this item if the item was missing the <> surround */
            char         *ptr3  = ptr2;						/* 3rd pointer used to move back from ptr2 position, removing any whitespace characters */
            
            if (*ptr2 != 0) ptr2++;						/* increment ptr2 passed the ',' it's pointing at */
            while ((ptr != ptr2) && (isspace(*ptr)))				/* while ptr is a white space char and hasn't moved up to the end of this item, do (remove prefixed spaces) */
              ptr++;
            while ((ptr3 != ptr) && (isspace(*ptr3)))				/* while ptr3 is a white space char and hasn't moved back to the start of this item, do (remove appended spaces) */
              ptr3--;								/* move ptr3 back by one char */
              
            if (ptr3 != ptr)							/* if ptr3 not met start of this item, then this item is not empty, so process it */
            {
              if (*ptr != '<')	extra = 2;					/* if start of item doesn't begin with a '<' then we need to add the <> encapsulation */
              tmp_array[count] = (char*)malloc((ptr3-ptr)+1+extra);		/* create array of chars to hold string */
              if (tmp_array[count])						/* if malloc successful, then process this item */
              {
                if (extra)							/* if extra space was need to add <> then */
                {
                  tmp_array[count][0] = '<';					/* prepend the < onto the string */
                  extra--;							/* decrement extra as we've done one */
                }
                strncpy(tmp_array[count]+extra, ptr, (ptr3-ptr));		/* copy the string into the array of chars */
                if (extra)							/* if extra space was allocated, then we need to append the > */
                {
                  tmp_array[count][(ptr3-ptr)+extra] = '>';			/* put > on the end */
                  tmp_array[count][(ptr3-ptr)+extra+1] = 0;			/* null terminate the string */
                }
                else								/* else, just null terminate the string */
                  tmp_array[count][(ptr3-ptr)] = 0;				/* null terminate the string */
                count++;
              }
              else								/* else, malloc failed so set error */
                result = ERROR(MALLOCFAILED);
            }									/* endif of item length check */
          }									/* endif of end of list check */
        }									/* endwhile */
        number = count;								/* set number of elements in array to element counter */
        if (result)								/* if error set, then destroy the array */
          destroy_array(&tmp_array, number);
      }
      else									/* else malloc of tmp_array failed, so set error */
        result = ERROR(MALLOCFAILED);
    }										/* endif number check for presence of data in the list */
    *array = tmp_array;								/* set array to point at tmp_array */
    *num   = number;								/* set num to be the number of elements in tmp_array */
  }
  else										/* else, one of the parameters was NULL, so set error */
    result = ERROR(NULLADDR);
  
  if (result)									/* if error set, set number to 0 */
    number = 0;
  
  return result;
}


void destroy_array(char ***array, unsigned int num)
{
  if ((array) && (num))
  {
    if (*array)
    {
      unsigned int i;
    
      for (i=0;i<num;i++)
      {
        if ((*array)[i])
          free((*array)[i]);		/* free each char array */
      }
      free(*array);			/* free the array of char*s */
      *array = 0;
    }
  }
}
