/*	Project Post (769) - AcornSMTP
	Acorn Risc Technologies
	Copyright © 1996. All Rights Reserved.

	FILE:		cmdresp.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.05 for RISC OS

	OVERVIEW
	========
	Source file for implementation of command_response to/from server
	functionality.  Taken from AcornPOP3.  Need to move this common
	fuctionality into a library to share between all the protocol modules.

	HISTORY
	=======
	08/10/97	0.01	RDW	Initial version
	23/03/98	0.02	RDW	command_response_CAhandler() and
					command_response_CBhandler() unused
					params. tidied up
	06/04/98	0.03	RDW	Elib_priv.h taken from EmailLib now
					DebugLib taken from exported lib now
	08/04/98	0.04	RDW	CHECK_RESPONSE state added to
					cope with multi-line responses.
					However, will only return the last line.
					Need to in future change so that we can
					return whole response (perhaps as
					double-null terminated string using
					single null as separators?)
	02/06/98	0.05	RDW	in_FSM, pending_CB and need_CB added to
					context.  command_response() now sets
					process1.state to PROCESSING to ensure
					event handler doesn't do anything.
					CB_comamnd_response now checks there is
					not already a pending call back set.  It
					also checks to see if there is an active
					thread in the FSM.  If yes, it sets a
					flag for that thread to be responsible
					for setting the callback, otherwise it
					sets it and sets the pending flag.
					command_response_CAhandler now just
					calls CB_command_response.
					command_response_CBhandler now sets
					in_FSM and unsets pending_CB before
					calling the FSM.
					command_response_FSM on exit now either:
					FSM end case: resets process1.state and
					  destroys the context
					t_slice expiry: sets a callafter (though
					  callback used for performance just now.
					  Once I pass timeslices between FSMs, I'll
					  change this)
					need_CB set: sets a callback
*/


/* ************************************************************************** */
/*                                                                            */
/* Include entity files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <stdlib.h>
#include <string.h>
#include <time.h>


/* ************************************************************************** */
/*                                                                            */
/* Include header files - External Libraries                                  */
/*                                                                            */
/* ************************************************************************** */
#include "DebugLib/DebugLib.h"
#include "Email/EmailLib/Elib_priv.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "common.h"
#include "errortable.h"
#include "callbacks.h"
#include "sendline.h"
#include "get.h"
#include "cmdresp.h"
#include "smtp_utils.h"


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef enum
{
  INIT,
  SEND_LINE,
  GET_RESPONSE,
  CHECK_RESPONSE,
  COMPLETED,
  ERROR
} command_response_STATES;							/* command response FSM states */

typedef struct
{
  BOOL                      in_FSM;						/* Thread currently executing in FSM                   */
  BOOL                      pending_CB;						/* There is a CallBack/re-entrancy into the FSM pending*/
  BOOL                      need_CB;						/* There needs to be a CallBack set to re-enter the FSM*/
  time_t                    t_slice;						/* timeslice, time to exit FSM by for re-entracy later */
  _kernel_oserror          *error;						/* our error pointer                                   */
  BOOL                      end;						/* end of command response FSM?                        */
  BOOL                      exit;						/* exit FSM without setting callback                   */
  int                      *internet_err;					/* ptr to internet errno var. to set, given by caller  */
  function                  func;						/* Caller's function to call back when we have finished*/
  void                     *data;						/* data to call back caller's function, func, with     */
  _kernel_oserror         **error2;						/* address of caller's error pointer to set if error   */
  int                       s;							/* socket to use                                       */
  char                     *send_data;						/* data to send, we don't own this caller owns it      */
  int                       send_length;					/* length of send_data                                 */
  char                    **response;						/* address of char* to set to point at server response */
  int                       timeout;						/* timeout for command response operation              */
  command_response_STATES   state;						/* current command response state                      */
} command_response_context;


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */
static const int SLEEP_TIME    = 1;
static const int TIME_SLICE    = 50;						/* Time slice to use                                   */


/* ************************************************************************** */
/*                                                                            */
/* External globals                                                           */
/*                                                                            */
/* ************************************************************************** */
extern process_details process1;						/* This client's process detail                        */


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */
static command_response_context* new_command_response_context(void);
static _kernel_oserror* command_response_FSM(command_response_context *context);
static _kernel_oserror* command_response_CBhandler(_kernel_swi_regs *r, void *pw, void *data);
static _kernel_oserror* command_response_CAhandler(_kernel_swi_regs *r, void *pw, void *data);
static _kernel_oserror* CA_command_response(void *data);


/* ************************************************************************** */
/*                                                                            */
/* Functions                                                                  */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void destroy_command_response_context(command_response_context **context)
{
  if (context)
  {
    if (*context)
      free(*context);
    *context = 0;
  }
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   	
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
extern _kernel_oserror *command_response(int               s,
                                         char             *send_data,
                                         int               length,
                                         char            **response,
                                         int               timeout,
                                         int              *internet_err,
                                         _kernel_oserror **error2,
                                         function          func,
                                         void             *data)
{
  _kernel_oserror *error = 0;							/* result to return                                              */
  
  if ((response == 0) || (func == 0) || (internet_err == 0) || (error2 == 0))	/* check parameters that can't be NULL aren't                    */
    error = ERROR(INTERNALERR);
  else
  {
    command_response_context *context = new_command_response_context();		/* create a new logon context for this operation                 */
    if (context)
    {
      context->s            = s;
      context->send_data    = send_data;					/* copy in parameters into context                               */
      context->send_length  = length;
      context->response     = response;
      context->timeout      = timeout;
      context->func         = func;
      context->internet_err = internet_err;
      context->data         = data;
      context->error2       = error2;
      process1.state        = PROCESSING;					/* make sure main state is IDLE so event handler doesn't do anything */
      error = CB_command_response(context);					/* enter the logon FSM                                           */
    }
    else
      error = ERROR(MALLOCFAILED);
  }
  
  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static command_response_context *new_command_response_context(void)
{
  command_response_context *c = malloc(sizeof(command_response_context));	/* create new context        */
  
  if (c)									/* if created, initialise it */
  {
    memset(c, 0, sizeof(command_response_context));				/* init. context to NULL     */
    c->state    = INIT;								/* init. FSM state           */
  }
  
  return c;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
extern _kernel_oserror *command_response_FSM(command_response_context *context)
{
  _kernel_oserror *error = 0;
  
  dprintf(("", "command_response_FSM: context: %x\n", context));
  if (context == 0)								/* make sure we've been given a context                          */
    error = ERROR(INTERNALERR);
  
  if (!error)
  {
    context->t_slice = clock() + TIME_SLICE;
    context->exit = FALSE;
    do										/* FSM do-while loop                                             */
    {
      if (context->error)
        context->state = ERROR;
      switch (context->state)
      {
        case INIT:
        {
          dprintf(("", "command_and_response: INIT\n"));
          if (context->send_data == 0)						/* if no data to send, then switch to GET_RESPONSE state         */
            context->state = GET_RESPONSE;
          else if (context->send_data[0] == 0)
            context->state = GET_RESPONSE;
          else									/* else, switch to SEND_LINE state                               */
            context->state = SEND_LINE;
          break;
        }
        case SEND_LINE:
        {
          dprintf(("", "command_and_response: SEND_LINE\n"));
          context->error = send_line_to_server(context->s,
                                               context->send_length,
                                               context->timeout,
                                               context->internet_err,
                                               &(context->error),
                                               (function)&command_response_FSM,
                                               context,
                                               context->send_data);		/* send the data to the server                                   */
          if (context->error)
            context->state = ERROR;
          else									/* else, if no error then exit FSM as we will be reentered by    */
          {									/* send_line_to_server calling us back and switch state to       */
            context->exit = TRUE;							/* GET_RESPONSE                                                  */
            context->state = GET_RESPONSE;
          }
          break;
        }
        case GET_RESPONSE:
        {
          dprintf(("", "command_and_response: GET_RESPONSE\n"));
          context->error = get_line_from_server(context->s,
                                                context->response,
                                                context->timeout,
                                                context->internet_err,
                                                &(context->error),
                                                (function)&command_response_FSM,
                                                context);				/* get the response from the server                              */
          if (context->error)
            context->state = ERROR;
          else									/* else, if no error then exit FSM as we will be reentered by    */
          {									/* get_line_from_server calling us back and switch state to      */
            context->exit = TRUE;							/* CHECK_RESPONSE to check for multi-line response               */
            context->state = CHECK_RESPONSE;
          }
          break;
        }
        case CHECK_RESPONSE:							/* check for multi-line response                                 */
        {
          dprintf(("", "command_and_response: CHECK_RESPONSE\n"));
          if (context->response)							/* check we have a string to look at                             */
          {
            if (*(context->response))
            {
              if (!response("xxx ", *(context->response)))			/* if response is not the last line of the response, then        */
              {
                context->state = GET_RESPONSE;					/* get next response line, otherwise response is complete        */
                destroy_response(context->response);				/* destroy the previous response of this multi-line response     */
              }									/* in future, we really ought to have a mechanism to return      */
              else
                context->state = COMPLETED;					/* switch to COMPLETED state                                     */
            }
            else
              context->error = ERROR(FAILED);
          }
          if (context->error)
            context->state = ERROR;
          break;
        }
        case COMPLETED:
        {
          dprintf(("", "command_and_response: COMPLETED\n"));
          context->func(context->data);						/* callback caller with the context they gave us                 */
          context->end = TRUE;							/* set end of FSM                                                */
          break;
        }
        case ERROR:
        {
          dprintf(("", "command_and_response: ERROR\n"));
          *(context->error2) = context->error;					/* set caller's error to point at the error that occured here    */
          context->func(context->data);						/* callback caller with the context they gave us                 */
          context->end = TRUE;							/* set end of FSM                                                */
          break;
        }
        default:
        {
          dprintf(("", "command_and_response: INTERNAL ERROR\n"));
          error = ERROR(INTERNALERR);
          break;
        }
      } /* endswitch */
    } while ((!expired(context->t_slice)) && (!context->end) && (!context->exit));
  } // endif error check

  if (!error)
  {
    int state = smtp_irqs_off();						/* CRITICAL SECTION start, turn off interrupts */
    context->in_FSM = FALSE;							/* Clear the in_FSM flag as we are about to return */
    if (context->end)								/* If this is the end of the FSM execution, then */
    {
      process1.state = PROCESSING;						/* Ensure main state is IDLE                  */
      callx_remove_callafter(&command_response_CAhandler, context);		/* Ensure any pending callafter is removed    */
      callx_remove_callback(&command_response_CBhandler, context);		/* Ensure any pending callback is removed     */
      destroy_command_response_context(&context);				/* destroy the context                        */
    }
    else if (!context->exit)							/* else, if exit not set then t_slice must have expired, so */
    {
      context->pending_CB = FALSE;						/* ensure pending flag is FALSE, it should be */
      context->need_CB = FALSE;							/* set need_CB to FALSE as we are going to set a callback */
      error = CA_command_response(context);					/* set a callafter to re-enter the FSM later  */
    }
    else if (context->need_CB)							/* else, if need callback flag is set, then   */
    {
      context->need_CB = FALSE;							/* clear the flag and                         */
      error = CB_command_response(context);					/* set a callback to re-enter the FSM         */
    }
    smtp_restore_irqs(state);							/* End of CRITICAL SECTION, restore irqs      */
  }

  return error;
}


extern _kernel_oserror* CA_command_response(void *data)
{
  if (data)
    return callx_add_callafter(SLEEP_TIME, &command_response_CAhandler, data);
  else
    return ERROR(NULLADDR);
}


extern _kernel_oserror* CB_command_response(void *data)
{
  _kernel_oserror *error = 0;
  int              state;
  command_response_context *context = (command_response_context*)data;
  
  if (context)
  {
    state = smtp_irqs_off();							/* CRITICAL SECTION - Turn off interrupts */
    if (!context->pending_CB)							/* If there is not a callback already set to go off, then */
    {
      if (context->in_FSM)							/* If there is currently a thread of execution in the FSM, then */
        context->need_CB = TRUE;						/* a callback needs to be set by that thread when it terminats  */
      else									/* otherwise */
      {
        context->pending_CB = TRUE;						/* We can set a callback, so set the flag and set the callback */
        error = callx_add_callback(&command_response_CBhandler, data);
      }										/* endif current thread executing check */
    }										/* endif pending callback check */
    smtp_restore_irqs(state);							/* End of CRITICAL SECTION - Restore interrupts */
  }
  else
    error = ERROR(NULLADDR);
    
  return error;
}

  
static _kernel_oserror* command_response_CAhandler(_kernel_swi_regs *r, void *pw, void *data)
{
  UNUSED(r);
  UNUSED(pw);
  
  dprintf(("", "ENTERED: get_line_CAhandler\n"));
  return CB_command_response(data);
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static _kernel_oserror *command_response_CBhandler(_kernel_swi_regs *r, void *pw, void *data)
{
  command_response_context *context = (command_response_context*)data;
  int state;
  _kernel_oserror *error = 0;
  
  UNUSED(r);
  UNUSED(pw);
  
  if (context)
  {
    state = smtp_irqs_off();
    context->in_FSM     = TRUE;
    context->pending_CB = FALSE;
    smtp_restore_irqs(state);
    error = command_response_FSM(data);
  }
  else
    error = ERROR(NULLADDR);
  
  return error;
}


