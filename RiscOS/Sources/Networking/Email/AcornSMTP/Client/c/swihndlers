/*	Project Post (769) - AcornSMTP
	Acorn Risc Technologies
	Copyright © 1996. All Rights Reserved.

	FILE:		swihndlers.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.11 for RISC OS

	OVERVIEW
	========
	Source file for implementation of functions to handle and process
	the SWI calls this module implements

	HISTORY
	=======
	19/02/97	0.01	RDW	Initial version
	03/04/97	0.02	RDW	GetMessage SWI handler.  Always returns 0.  Any error is returned in data strucuture.
	03/07/97	0.03	RDW	Changing SWI interface and data structs inline with Project Post API standard
					IDnum is now the address in memory that the returned data structure will be at.
					IDnum in returned structure is now a flags word.
	04/07/97	0.04	RDW	GetXLinesOfMessage and GetMessage changed to call get_message_to_memory or get_message_to_file
					ie. merged GetXLinesOfMessage and GetMessage code together.  One day, may merge memory and
					file versions a bit as there is common code there too.
	11/07/97	0.05	RDW	Tidy up when moving to correct build environment
	11/07/97	0.06	RDW	AcornSMTP_LogOn renamed to AcornSMTP_Logon and GetUniqueID added
	10/10/97	0.07	RDW	process1.state initialised to PROCESSING in Register
	14/10/97	0.08	RDW	in handle_swi_AcornSMTP_Logon commented out the setup of the pollword as data is not returned
					straight away now.
	04/11/97	0.09	RDW	Changed AcornSMTP_Register to accept and check flags for supporting request for Wimp_Message
					to be sent out as well as pollword set.
	14/01/98	0.10	RDW	NOSENDER and NORECIPIENT errors now
					returned from handle_swi_AcornSMTP_SendMail.
					handle_swi_AcornSMTP_ReleaseData changed to destroy the sendmail.smtp_response
	06/04/98	0.11	RDW	#ifdef MEMCHECK changed to MemCheck_MEMCHECK
					DebugLib taken from exported lib now
					#include "TML_Podule.h" removed
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#ifdef MemCheck_MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif


/* ************************************************************************** */
/*                                                                            */
/* Include header files - External Libraries                                  */
/*                                                                            */
/* ************************************************************************** */
#include "DebugLib/DebugLib.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "common.h"
#include "allocation.h"
#include "swihndlers.h"
#include "sendmail.h"
#include "errortable.h"
#include "smtp_utils.h"


/* ************************************************************************** */
/*                                                                            */
/* External globals                                                           */
/*                                                                            */
/* ************************************************************************** */
extern int inuse;								// process1 in use?
extern process_details process1;						// This client's process detail
extern int timeouts[];								// default timeouts


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Functions                                                                  */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   FUNCTION:       handle_swi_AcornSMTP_Register
   DESCRIPTION:    Function to handle AcornSMTP_Register SWI
   		   Allows a client/caller to register with the AcornSMTP module
   		   Takes as input a connection_timeout value to use to set the
   		   idle time after which to cleanly disconnect from the server.
   		   Also, takes a flag on input whether the caller wishes to be
   		   notified when the disconnection is due.  Caller is then
   		   responible for making appropriate calls to AcornSMTP to
   		   perform the disconnect (Or it can ignore it and leave the
   		   connection up).  On return from this SWI either a unique id
   		   number will be returned or an error if no more clients can
   		   register with the AcornSMTP module.  The Unique ID is an
   		   address of a pollword.  If a task is using the non-blocking
   		   calls to AcornSMTP, then it should use the pollword with
   		   WimpPoll/PollIdle.  Once the pollword is set to non-zero by
   		   AcornSMTP it will point to the address of a structure
   		   holding returned data.  For modules AcornSMTP will send
   		   out a service call at which point the pollword will point
   		   to the structure holding the returned information.
   DEPENDENCIES:   BOOL			inuse		module.c
   		   			errortable	errortable.h
   DEPENDED ON BY: 
   INPUT PARAMS:   _kernel_swi_regs*	r		registers
   							r->r[0] = flags
   OUTPUT PARAMS:  _kernel_swi_regs*	r		registers
   							r->r[0] = flags
   							r->r[1] = Address of pollword
    RETURN VALUE:   			NULL		if SWI handled successfully,
   							else ptr to error block
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
_kernel_oserror* handle_swi_AcornSMTP_Register(_kernel_swi_regs *r, void *pw)
{
  _kernel_oserror       *result        = 0;					// result to return
  unsigned int           flags         = 0;					// flags
  void			*pollword_addr = 0;					// address of pollword

  UNUSED(pw);
  
  flags = (unsigned int)r->r[0];


  /* check flags */
  if (flags != 0)
  {
    if (flags & REGISTER_WIMPMSG)
    {
      process1.flags = process1.flags | REGISTER_WIMPMSG;			// set this processes flags to indicate we should send a wimpmessage
      process1.taskhandle = r->r[1];
    }
    else if (flags & REGISTER_UNUSED_MASK)					/* check no other bits are set which we don't support */
    {
      flags = flags & REGISTER_UNUSED_MASK;
      result = ERROR(FAILED);
    }
    else
      flags = 0;								/* all accepted */
  }
  
  if (!result)
  {
    if (inuse)									// We only support one caller at a time in this version
      result = ERROR(NOMOREPROCESSES);					// so return an error
    else
    {
      process1.pollword = 0;							// set pollword to 0
      process1.state    = PROCESSING;
      pollword_addr     = &(process1.pollword);					// set pollword address as address of pollword ptr in process1 struct
      result = 0;								// set no error
      inuse  = TRUE;								// set inuse to TRUE, we have a client
    }
  }
  
  // setup registers for return from SWI
  r->r[0] = flags;								// r0 unchanged
  r->r[1] = (int)pollword_addr;							// r1 is address of pollword
  
  return result;
}


/* ************************************************************************** */
/*
   FUNCTION:       handle_swi_AcornSMTP_DeRegister
   DESCRIPTION:    Function to handle AcornSMTP_DeRegister SWI
   		   Function to allow a client of the AcornSMTP to deregister
   		   with it.
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   _kernel_swi_regs*	r		registers
   							r->r[0] = flags
   							r->r[1] = Address of pollword
   OUTPUT PARAMS:  _kernel_swi_regs*	r		registers
   							r->r[0] = flags unchanged
   							r->r[1] = 0 if success, else unchanged
    RETURN VALUE:   			NULL		if SWI handled successfully,
   							else ptr to error block
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
#pragma -z0									/* horrible hack to get round compiler optimiser bug */
_kernel_oserror* handle_swi_AcornSMTP_DeRegister(_kernel_swi_regs *r, void *pw)
{
  _kernel_oserror       *result        = 0;					// result to return
  unsigned int           flags         = 0;					// flags
  void                  *pollword_addr = 0;					// address of pollword

  UNUSED(pw);
  flags = (unsigned int)r->r[0];
  pollword_addr = (void*)r->r[1];						// set pollword_addr;

  if (inuse)
  {
    if (pollword_addr == &(process1.pollword))
      inuse = FALSE;
    else
      result = ERROR(INVALIDID);
  }
  else
    result = ERROR(FAILED);
 
  // setup registers for return from SWI
  r->r[0] = r->r[0];								// r0 unchanged
  if (result)
    r->r[1] = r->r[1];								// r1 unchanged if an error
  else
    r->r[1] = (int)0;								// r1 set to 0 if deregistered okay
  
  return result;
}
#pragma -z1									/* horrible hack to get round compiler optimiser bug */


/* ************************************************************************** */
/*
   FUNCTION:       handle_swi_AcornSMTP_ReleaseData
   DESCRIPTION:    Function to handle AcornSMTP_ReleaseData SWI
   		   Function to free the block of memory now that the client has
   		   indicated they are finisehd with it.  NOTE: does nothing just now
   		   in this version as only 1 client supported and data is static
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   _kernel_swi_regs*	r		registers
   							r->r[0] = flags
   							r->r[1] = Address of pollword
   							r->r[2] = SWI number of SWI that returned the data
   							r->r[3] = Unique ID number of returned data (address of data)
   OUTPUT PARAMS:  _kernel_swi_regs*	r		registers
   							r->r[0] = flags unchanged
   							r->r[1] = 0 if success, else unchanged
   							r->r[2] = 0 if success, else unchanged
   							r->r[3] = 0 if success, else unchanged
   RETURN VALUE:   			NULL		if SWI handled successfully,
   							else ptr to error block
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
_kernel_oserror* handle_swi_AcornSMTP_ReleaseData(_kernel_swi_regs *r, void *pw)
{
  _kernel_oserror       *result        = 0;					// result to return
  unsigned int           flags         = 0;					// flags
  void			*pollword_addr = 0;					// address of pollword
  int			 swinum        = 0;					// swi number
  void			*IDnum         = 0;					// ID number

  UNUSED(pw);
  flags         = (unsigned int)r->r[0];					// get flags
  pollword_addr = (void*)r->r[1];						// get pollword_addr;
  swinum        = (int)r->r[2];							// get message id
  IDnum         = (void*)r->r[3];						// get returned data unique id
  
  if ((!inuse) && (pollword_addr != (&(process1.pollword))))			// If not registered or pollword address is wrong
    result = ERROR(INVALIDID);							// Return Invalid ID error
    
  // setup registers for return from SWI
  if (!result)									// If no error, then
  {
    r->r[0] = r->r[0];								// r0 unchanged
    r->r[1] = 0;								// set to 0
    r->r[2] = 0;								// set to 0
    r->r[3] = 0;								// set to 0
    destroy_response(&process1.sendmail.smtp_response);
    process1.pollword = 0;							// set pollword to 0
  }
  else
  {
    r->r[0] = r->r[0];								// r0 unchanged
    r->r[1] = r->r[1];								// r0 unchanged
    r->r[2] = r->r[2];								// r0 unchanged
    r->r[3] = r->r[3];								// r0 unchanged
  }

  return result;
}


/* ************************************************************************** */
/*
   FUNCTION:       handle_swi_AcornSMTP_SendMail
   DESCRIPTION:    Function to handle AcornSMTP_SendMail SWI
   		   To send a complete rfc822 message
   		   If Inet$SMTP_SendDefault_Servername is to be used and is
   		   not set, then error number 13 will be returned.
   DEPENDENCIES:   function		strncpy		<string.h>
   DEPENDED ON BY: 
   INPUT PARAMS:   _kernel_swi_regs*	r		registers
   							r->r[0] = flags
   							  bit0 -   set(1) = file based
   							  bit0 - unset(0) = memory based
   							  bit1 -   set(1) = queue message if 1st attempt fails
   							  bit1 - unset(0) = don't queue message if 1st attempt fails
   							r->r[1] = Address of pollword
   							r->r[2] = Address of memory where message is or filename of message file
   							r->r[3] = String of recipients
   							r->r[4] = String of sender
   							r->r[5] = Hostname or IP address of SMTP server to use
   							          if r[5] = 0 then
   							            AcornSMTP will parse message and use DNS MX resolving to decide
   							            which SMTP host to send to
   							          else if = "" then sys. var. Inet$SMTP_SendDefault_Servername used
   							          else use given hostname
   							          else return error 13
   							r->r[6] = Port number
   OUTPUT PARAMS:  _kernel_swi_regs*	r		registers
   							r->r[0] = flags
   							r->r[1] = Unique ID
   RETURN VALUE:   			NULL		if SWI handled successfully,
   							else ptr to error block
   CONSTANTS:      NONE
   VARIABLES:      _kernel_oserror*	result		result to return
   		   unsigned int		flags		flags
   		   void*		pollword_addr	address of pollword (Unique ID of client)
   		   char*		message		address of message in memory or filename of message
   		   char*		recipient	comma separated list of recipients
   		   char*		sender		email address of sender
   		   char*		hostname	SMTP host to use, if given
   		   int			port_num	TCP port number to use. -ve, services file then default of 25
   		   					+ve use the given value
 */
/* ************************************************************************** */
_kernel_oserror* handle_swi_AcornSMTP_SendMail(_kernel_swi_regs *r, void *pw)
{
  _kernel_oserror       *result        = 0;					// result to return
  unsigned int           flags         = 0;					// flags
  void			*pollword_addr = 0;					// address of pollword
  char			*message   = 0;						// address of message in memory or filename
  char                  *recipient = 0;						// ptr to recipient
  char                  *sender    = 0;						// ptr to sender
  char			*hostname  = 0;						// hostname to send mail to
  int			 port_num  = -1;					// port number to use

  UNUSED(pw);
  flags         = (unsigned int)r->r[0];					// get flags
  pollword_addr = (void*)r->r[1];						// get pollword_addr;
  message       = (char*)r->r[2];						// get address of message/filename
  recipient     = (char*)r->r[3];						// get string of recipient email addresses
  sender        = (char*)r->r[4];						// get string holding sender email address
  hostname      = (char*)r->r[5];						// get hostname
  port_num      = (int)r->r[6];							// get port_num
  
  
  if ((!inuse) && (pollword_addr != &(process1.pollword)))			// If not registered or pollword address is wrong
    result = ERROR(INVALIDID);							// Return Invalid ID error
  
  if ((!result) && ((message == 0) || (recipient == 0) || (sender == 0)))	// if message address = 0, return error
    result = ERROR(NULLADDR);							// Return NULL address error
        
  if (!result)									// If no errors, do SWI operation
  {
    unsigned int   num_recipients = 0;
    unsigned int   num_senders    = 0;
    char         **recipients     = 0;
    char         **senders        = 0;
    
    #ifdef MemCheck_MEMCHECK
      MemCheck_RegisterMiscBlock_String(message);
      MemCheck_RegisterMiscBlock_String(recipient);
      MemCheck_RegisterMiscBlock_String(sender);
      if (hostname)
        MemCheck_RegisterMiscBlock_String(hostname);
    #endif
    
    result = convert_list2array(recipient, &recipients, &num_recipients);
    if (result)
      destroy_array(&recipients, num_recipients);
    else if (num_recipients > 0)
    {
      #ifdef DEBUG
        unsigned int i;
        dprintf(("", "num_recipients: %d\n", num_recipients));
        for (i=0;i<num_recipients;i++)
          dprintf(("", "recipients[%d]: '%s'\n", i, recipients[i]));
      #endif
      result = convert_list2array(sender, &senders, &num_senders);
      if (result)
        destroy_array(&senders, num_senders);
      else if (num_senders > 0)
      {
        #ifdef DEBUG
          unsigned int i;
          dprintf(("", "num_senders: %d\n", num_senders));
          for (i=0;i<num_recipients;i++)
            dprintf(("", "senders[%d]: '%s'\n", i, senders[i]));
        #endif
        result = sendmail((BOOL)(flags & 0x00000001), hostname, port_num, message, recipients, num_recipients, senders, num_senders);
      }
      else
        result = ERROR(NOSENDER);
      
      if (result)
      {
        destroy_array(&recipients, num_recipients);
        destroy_array(&senders, num_senders);
      }
    }
    else
      result = ERROR(NORECIPIENT);
      
    #ifdef MemCheck_MEMCHECK
      MemCheck_UnRegisterMiscBlock(message);
      MemCheck_UnRegisterMiscBlock(recipient);
      MemCheck_UnRegisterMiscBlock(sender);
      if (hostname)
        MemCheck_UnRegisterMiscBlock(hostname);
    #endif    
  }
  
  // setup registers for return from SWI
  if (!result)									// If no error, then
  {
    r->r[0] = r->r[0];								// r0 unchanged
    r->r[1] = (int)&(process1.sendmail);					// Unique ID to identify returned structure
  }
  else
  {
    r->r[0] = r->r[0];								// r0 unchanged
    r->r[1] = 0;								// Cleared
  }

  return result;
}


