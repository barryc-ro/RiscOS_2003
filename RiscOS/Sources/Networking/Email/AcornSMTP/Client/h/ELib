#if !defined(__elib_h)              /* Sentry, use file only if it's not already included. */
#define __elib_h
/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		elib.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.04 for RISC OS

	OVERVIEW
	========
	Header file for the Post Email library

	HISTORY
	=======
	21/07/97	0.01	RDW	initial version
	24/07/97	0.02	RDW	corrected overview and dates.  Added INVALIDCONTEXT, NOTENOUGHTIME to NFE_rcode
	xx/08/97	0.03	RDW	commented out the signed int typedefs as cfront can't do signed.  Replaced with
					implicit signed types
	10/10/97	0.04	RDW	#define and #ifndef check put round BOOL type definition
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <stdio.h>


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
//typedef signed char             int8;			// Definition of 8bit signed integer
typedef char          	  	int8;			// Definition of 8bit signed integer
typedef unsigned char           uint8;			// Definition of 8bit unsigned integer
//typedef signed short int	int16;			// Definition of 16bit signed integer
typedef short int		int16;			// Definition of 16bit signed integer
typedef unsigned short int	uint16;			// Definition of 16bit unsigned integer
//typedef signed int		int32;			// Definition of 32bit signed integer
typedef int			int32;			// Definition of 32bit signed integer
typedef unsigned int		uint32;			// Definition of 32bit unsigned integer

#ifndef BOOL_DEFINED
#define BOOL_DEFINED
typedef enum
{
  FALSE,
  TRUE
} BOOL;							// Definition of BOOL (Boolean) type
#endif

typedef void* NFE_CONTEXT;				// context ADT

typedef enum
{
  NFE_NOTSUPPORTED     =-19,				// request not supported by the library
  NFE_CANTDOUNKNOWN    =-18,				// body class, can't decode(or encode in) unknown encoding
  NFE_MUSTBE7BIT       =-17,
  NFE_ALREADYDECODED   =-16,				// body class, must be in 7BIT data before encoding can be applied
  NFE_ALREADYENCODED   =-15,				// body class, already encoded in the requested method
  NFE_DATAMUSTBEPARSED =-14,				// header class, data hasn't been parsed, cal the parse method and try again
  NFE_INVALIDDATA      =-13,				// header class, parsing data gave an error
  NFE_NODATAPRESENT    =-12,				// header class, no data in object
  NFE_INVALIDCONTEXT   =-11,				// caller has passed in a NFE_CONTEXT structure which does not belong to this function
  NFE_NOTENOUGHTIME    =-10,				// t_slice is not big enough
  NFE_NOMOREPROCESSES  =-9,				// The library is too busy to hande this request
  NFE_MALLOCFAILED     =-8,				// Memory allocation failed
  NFE_INTERNALERR      =-7,				// Internal error within the library - must be reported to the author
  NFE_FAILED           =-6,				// The operation failed for some reason
  NFE_INVALIDFILENAME  =-5,				// The given filename was invalid or the file could not be opened or found
  NFE_WRITEFAIL        =-4,				// Failed to write data out to file/memory
  NFE_INVALTYPE        =-3,				// 
  NFE_NULLADDR         =-2,				// One of the parameters is NULL and is not allowed to be
  NFE_NOSPACE          =-1,				// There is no free space in file or memory to complete the operation
  NFE_RUNNING          =0,				// The operation is still running and should be called again until an error or COMPLETED
  NFE_COMPLETED        =1				// The operation has completed successfully
} NFE_rcode;

typedef enum
{
  NFE_TE_NONE = 0,					// Equals "7bit" and has had no encoding performed on it
  NFE_TE_7BIT = 0,					// "7bit" and has had no encoding performed on it (DEFAULT)
  NFE_TE_8BIT = 1,					// body is 8bit data which has had no encoding performed on it
  NFE_TE_BINARY = 3,					// body is binary data which has had no encoding performed on it
  NFE_TE_QUOTED_PRINTABLE = 4,				// quoted printable encoding has been applied
  NFE_TE_BASE64 = 5,					// Base64 encoding has been applied
  NFE_TE_UNKNOWN = 6					// unknown encoding
} NFE_TE;						// Body transfer encodings

typedef enum
{
  NFE_CT_APPLICATION,
  NFE_CT_TEXT,
  NFE_CT_MULTIPART,
  NFE_CT_MESSAGE,
  NFE_CT_IMAGE,
  NFE_CT_AUDIO,
  NFE_CT_VIDEO,
  NFE_CT_MODEL,
  NFE_CT_UNKNOWN
} NFE_CT;						// MIME default must be first(0) - this is application for application/octet-stream

typedef enum
{
  NFE_CT_TEXT_PLAIN,
  NFE_CT_TEXT_RICHTEXT,
  NFE_CT_TEXT_ENRICHED,
  NFE_CT_TEXT_HTML,
  NFE_CT_TEXT_SGML,
  NFE_CT_TEXT_UNKNOWN
} NFE_CT_TEXT_TYPE;					// MIME default must be 0, this is text for text/plain

typedef enum
{
  NFE_CT_MULTIPART_MIXED,
  NFE_CT_MULTIPART_ALTERNATIVE,
  NFE_CT_MULTIPART_DIGEST,
  NFE_CT_MULTIPART_PARALLEL,
  NFE_CT_MULTIPART_ENCRYPTED,
  NFE_CT_MULTIPART_UNKNOWN
} NFE_CT_MULTIPART_TYPE;				// MIME default must be 0, this is mixed for multipart/mixed

typedef enum
{
  NFE_CT_APPLICATION_OCTET_STREAM,
  NFE_CT_APPLICATION_PGP_ENCRYPTED,
  NFE_CT_APPLICATION_PGP_KEYS,
  NFE_CT_APPLICATION_UNKNOWN
} NFE_CT_APPLICATION_TYPE;				// MIME default must be 0, this is application for application/octet-stream

typedef enum
{
  NFE_CT_IMAGE_TIFF,
  NFE_CT_IMAGE_UNKNOWN
} NFE_CT_IMAGE_TYPE;


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes                                                        */
/*                                                                            */
/* ************************************************************************** */
extern NFE_rcode new_context(NFE_CONTEXT *context);
extern NFE_rcode destroy_context(NFE_CONTEXT *context);


#endif  /* end of sentry #ifdef */
