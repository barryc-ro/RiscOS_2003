#if !defined(__acornsmtp_h)              /* Sentry, use file only if it's not already included. */
#define __acornsmtp_h
/*	Project Post (769) - AcornSMTP
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		AcornSMTP.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.06 for RISC OS

	OVERVIEW
	========
	Header file defining various RISC OS system allocated values for module AcornSMTP
	For use by clients of AcornSMTP relocatable module

	HISTORY
	=======
	24/02/97	0.01	RDW	initial version
	25/02/97	0.02	RDW	C function prototypes for SWI wrappers added
	14/03/97	0.03	RDW	IDnum in AcornSMTP_return_data structs. changed to flags
	29/01/98	0.04	RDW	BOOL_DEFINED semaphore round BOOL def.
	19/05/98	0.05	RDW	Check for BOOL already defined added
	24/08/98	0.06	RDW	Added Error constants AcornSMTP_Error_...
					Changed SWI defs. into an enum
					Added AcornSMTP_WimpMessage type
					Added flags defs. AcornSMTP_USE_FILE and AcornSMTP_REGISTER_WIMPMSG
					BOOL replaced with bool from bool.h
					Added _AcornSMTP_WimpRegister
					Added extern "C" for C++ compilers
*/


#ifdef __cplusplus
extern "C" {
#endif


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include "kernel.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - External Libraries                                  */
/*                                                                            */
/* ************************************************************************** */
#include "Email/bool.h"


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef struct
{
  unsigned int flags;	/* flags word */
  void *pollword_addr;	/* pollword address - session id */
  void *user_id;	/* user id */
} AcornSMTP_WimpMessage;


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */

/* ERRORS */
#define ErrorBase_AcornSMTP		0x00810e00
enum
{
  AcornSMTP_Error_FAILED = ErrorBase_AcornSMTP,
  AcornSMTP_Error_INVALIDID,
  AcornSMTP_Error_NOMOREPROCESSES,
  AcornSMTP_Error_ALREADYDOINGOP,
  AcornSMTP_Error_INTERNETERR,
  AcornSMTP_Error_NOTSUPPORTED,
  AcornSMTP_Error_FAILEDTOSEND,
  AcornSMTP_Error_QUEUED,
  AcornSMTP_Error_FAILEDTOQUEUE,
  AcornSMTP_Error_CONTIMEDOUT,
  AcornSMTP_Error_CONRESPTIMEDOUT,
  AcornSMTP_Error_CONFAILED,
  AcornSMTP_Error_CONREFUSED,
  AcornSMTP_Error_NULLADDR,
  AcornSMTP_Error_NOTUSED1,									/* 14 NOT USED */
  AcornSMTP_Error_NOSENDER,
  AcornSMTP_Error_NORECIPIENT,
  AcornSMTP_Error_NOSPACE,
  AcornSMTP_Error_NOSPACEFORHDRS,
  AcornSMTP_Error_NOSPACEFORBODY,
  AcornSMTP_Error_WRITEFAIL,
  AcornSMTP_Error_MALLOCFAILED,
  AcornSMTP_Error_INTERNALERR,
  AcornSMTP_Error_CONBROKEN,
  AcornSMTP_Error_RESOLVERFAILED
};

/* SWIs */
#define AcornSMTP_SWIChunkBase		0x4e500
enum
{
  AcornSMTP_Register = AcornSMTP_SWIChunkBase,
  AcornSMTP_DeRegister,
  AcornSMTP_ReleaseData,
  AcornSMTP_SendMail
};

/* Flags */
#define AcornSMTP_USE_FILE		0x01
#define AcornSMTP_REGISTER_WIMPMSG	0x02

/* Wimp Messages numbers */
#define Message_AcornSMTP_PollWordSet AcornSMTP_SWIChunkBase



/* ************************************************************************** */
/*                                                                            */
/* Typedefs                                                                   */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Typedefs - returned data structures                                        */
/*                                                                            */
/* ************************************************************************** */
typedef struct
{
  unsigned int		 flags;
  _kernel_oserror	*error;
  int			 errno;
} AcornSMTP_returned_data;

typedef struct
{
  unsigned int	         flags;
  _kernel_oserror	*error;
  int			 errno;
  char			*smtp_response;
} AcornSMTP_SendMail_data;


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes                                                        */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   FUNCTION:       _AcornSMTP_Register
   DESCRIPTION:    Allows a client/caller to register with the AcornSMTP module
   		   This is a C function wrapper to call the AcornSMTP_Register
   		   SWI.  On return from this function either a unique id
   		   number will be returned or an error if no more clients can
   		   register with the AcornSMTP module.  The Unique ID is an
   		   address of a pollword.  Once the pollword is set to non-zero by
   		   AcornSMTP it will point to the address of a structure
   		   holding returned data.
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regskernel.h
   		   function		_kernel_swi	kernel.h
   DEPENDED ON BY: NONE
   INPUT PARAMS:   unsigned int*	flags		flags word
   OUTPUT PARAMS:  unsigned int*	flags		flags word
   		   void**		pollword_addr	address of pollword
   RETURN VALUE:   _kernel_oserror*	NULL		if SWI handled successfully,
   							else ptr to error block
   VARIABLES:	   _kernel_oserror*	e		result to return
   		   _kernel_swi_regs	r		SWI Registers
 */
/* ************************************************************************** */
_kernel_oserror *_AcornSMTP_Register(unsigned int  *flags,
                                     void         **pollword_addr);

/* ************************************************************************** */
/*
   FUNCTION:       _AcornSMTP_WimpRegister
   DESCRIPTION:    Same as _AcornSMTP_Register, accept this version is for
   		   registering to have WimpMessages sent when pollword is set.
   		   Wimp task id is taken as input.  Flag bit 1 must be set
   		   otherwise an error is returned.
   		   (Use AcornSMTP_REGISTER_WIMPMSG)
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regskernel.h
   		   function		_kernel_swi	kernel.h
   DEPENDED ON BY: NONE
   INPUT PARAMS:   unsigned int*	flags		flags word
   OUTPUT PARAMS:  unsigned int*	flags		flags word
   		   void**		pollword_addr	address of pollword
   RETURN VALUE:   _kernel_oserror*	NULL		if SWI handled successfully,
   							else ptr to error block
   VARIABLES:	   _kernel_oserror*	e		result to return
   		   _kernel_swi_regs	r		SWI Registers
 */
/* ************************************************************************** */
_kernel_oserror *_AcornSMTP_WimpRegister(unsigned int  *flags,
                                         int            task_id,
                                         void         **pollword_addr);

/* ************************************************************************** */
/*
   FUNCTION:       _AcornSMTP_DeRegister
   DESCRIPTION:    Allows a client/caller to deregister from the AcornSMTP module
   		   This is a C function wrapper to call the AcornSMTP_DeRegister
   		   SWI.  If successful, no error is returned and the pollword
   		   address is set to 0, otherwise an error is returned.
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regskernel.h
   		   function		_kernel_swi	kernel.h
   DEPENDED ON BY: NONE
   INPUT PARAMS:   unsigned int*	flags		flags word
   OUTPUT PARAMS:  unsigned int*	flags		flags word
   		   void**		pollword_addr	address of pollword
   RETURN VALUE:   _kernel_oserror*	NULL		if SWI handled successfully,
   							else ptr to error block
   VARIABLES:	   _kernel_oserror*	e		result to return
   		   _kernel_swi_regs	r		SWI Registers
*/
/* ************************************************************************** */
_kernel_oserror *_AcornSMTP_DeRegister(unsigned int  *flags,
				       void          **pollword_addr);

/* ************************************************************************** */
/*
   FUNCTION:       _AcornSMTP_ReleaseData
   DESCRIPTION:    Function to be called once the client is finished with a
   		   block of data that AcornSMTP has returned to it.  The data
   		   will have been returned by an operation started by one of
   		   the SMTP SWIs.
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regskernel.h
   		   function		_kernel_swi	kernel.h
   DEPENDED ON BY: NONE
   INPUT PARAMS:   unsigned int*	flags		flags word
   		   void*		pollword_addr	pollword address
   		   int			swi_num		The SWI that the data was
   		   					returned by
   		   void*		data		address of the data that
   		   					is finished with
   OUTPUT PARAMS:  unsigned int*	flags		flags word
   RETURN VALUE:   _kernel_oserror*	NULL		if SWI handled successfully,
   							else ptr to error block
   VARIABLES:	   _kernel_oserror*	e		result to return
   		   _kernel_swi_regs	r		SWI Registers
*/
/* ************************************************************************** */
_kernel_oserror *_AcornSMTP_ReleaseData(unsigned int *flags,
					void         *pollword_addr,
					int           swi_num,
					void         *data);

/* ************************************************************************** */
/*
   FUNCTION:       _AcornSMTP_SendMail
   DESCRIPTION:
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regskernel.h
   		   function		_kernel_swi	kernel.h
   DEPENDED ON BY: NONE
   INPUT PARAMS:   unsigned int*	flags		flags word
   							  bit0 -   set(1) = file based
   							  bit0 - unset(0) = memory based
   							  bit1 -   set(1) = queue message if 1st attempt fails
   							  bit1 - unset(0) = don't queue message if 1st attempt fails
   		   void*		pollword_addr	address of pollword
   		   char*		message		Address of memory where message is or filename of message file
   		   char*		recipient	String of recipients
   		   char*		sender		String of sender
   		   char*		hostname	Hostname or IP address of SMTP server to use
   							if hostname then
   							  AcornSMTP will parse message and use DNS MX resolving to decide
   							  which SMTP host to send to
   							else if = "" then sys. var. Inet$SMTP_SendDefault_Servername used
   							else use given hostname
   							else return error 13
   		   int			port_num	Port number
   OUTPUT PARAMS:  unsigned int*	flags		flags word
   		   void**		unique_id	unique ID for this operation
   RETURN VALUE:   _kernel_oserror*	NULL		if SWI handled successfully,
   							else ptr to error block
   VARIABLES:	   _kernel_oserror*	e		result to return
   		   _kernel_swi_regs	r		SWI Registers
*/
/* ************************************************************************** */
_kernel_oserror *_AcornSMTP_SendMail(unsigned int *flags,
                                     void         *pollword_addr,
                                     char         *message,
                                     char         *recipient,
                                     char         *sender,
                                     char         *hostname,
                                     int           port_num,
                                     void         **unique_id);

/* ************************************************************************** */
/*
   FUNCTION:       _AcornSMTP_GetReturnedData
   DESCRIPTION:    Function to get typecast the pollword contents to the
   		   Acorn_returned_data type.  SHOULD NOT BE CALLED DIRECTLY!
   		   Instead, call one of the Macros below for the correct type
   		   of data.
   DEPENDENCIES:   NONE
   DEPENDED ON BY: NONE
   INPUT PARAMS:   void*		pollword_addr	address of pollword
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   AcornSMTP_returned_data*		0 or address of data
   VARIABLES:	   int*			address		address to typecast with
*/
/* ************************************************************************** */
AcornSMTP_returned_data *_AcornSMTP_GetReturnedData(void *pollword_addr);


/* ************************************************************************** */
/*                                                                            */
/* Macros - done for functions which are too small an operation to            */
/*          justify the overhead of a function call.                          */
/*                                                                            */
/* ************************************************************************** */
#define _AcornSMTP_SendMailData(p)		(AcornSMTP_SendMail_data*)_AcornSMTP_GetReturnedData(p)

#ifdef __cplusplus
}
#endif  /* end of C++ extern "C" block */

#endif  /* end of sentry #ifdef */
