/*	Project Post (769) - AcornPOP3
	Acorn Computers Ltd.
	Copyright © 1998. All Rights Reserved.

	FILE:		queue.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.01 for RISC OS

	OVERVIEW
	========
	Source file for implementation of queue.  Veneer over ELib_list.

	HISTORY
	=======
	18/11/98	0.01	RDW	Initial version
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <stdlib.h>
  #include "DebugLib/DebugLib.h"
}
#include "Email/Common/list.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include "queue.h"
  #include "errortable.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef struct
{
  void*  data;
  void*  location;
  size_t size;
} node;


/* ************************************************************************** */
/*                                                                            */
/* External globals                                                           */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Functions internal to source file                    */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
extern "C" _kernel_oserror* InitQueue(Queue* q_ptr)
{
  _kernel_oserror* error = 0;

  if (q_ptr == 0)
    error = ERROR(INTERNALERR);
  else
  {
    *q_ptr = (void*)new ELib_list;
  }

  return error;
}


extern "C" _kernel_oserror* DestroyQueue(Queue* q_ptr)
{
  _kernel_oserror* error = 0;

  if (q_ptr == 0)
    error = ERROR(INTERNALERR);
  else
  {
    ELib_list* list = (ELib_list*)(*q_ptr);

    if (list)
    {
      TRAVERSE(*list)
      {
        Node node = list->Current();
        DestroyNode(&node);
      }
      delete list;
      *q_ptr = 0;
    }
    else
      error = ERROR(NULLADDR);
  }

  return error;
}


extern "C" _kernel_oserror* DestroyNode(Node* n_ptr)
{
  _kernel_oserror* error = 0;

  if (n_ptr == 0)
    error = ERROR(NULLADDR);
  else
  {
    node* n = (node*)(*n_ptr);
    if ((n->data) && (n->location))					/* if location was provided, then data is not statically allocated */
      free(n->data);							/* so free the data */
    delete n;								/* free the node */
    *n_ptr = 0;
  }

  return error;
}


extern "C" Node CreateNode(void* data, void* location, size_t size)
{
  node* n = new node;

  if (n)
  {
    n->data     = data;
    n->location = location;
    n->size     = size;
  }

  return (Node)n;
}


extern "C" _kernel_oserror* Add(Queue q, Node n)
{
  _kernel_oserror* error = 0;
  ELib_list*       list  = (ELib_list*)q;

  if (list)
  {
    list->End();
    if (list->Insert(n) == 0)
      error = ERROR(MALLOCFAILED);
  }
  else
    error = ERROR(NULLADDR);

  return error;
}


extern "C" void* Head(Queue q)
{
  void*      data = 0;
  ELib_list* list = (ELib_list*)q;

  if (list)
  {
    list->Start();
    data = list->Current();
    list->Delete();
  }

  return data;
}


extern "C" void* GetNode_data(Node n)
{
  if (n)
    return ((node*)n)->data;
  else
    return 0;
}


extern "C" void* GetNode_location(Node n)
{
  if (n)
    return ((node*)n)->location;
  else
    return 0;
}


extern "C" size_t GetNode_size(Node n)
{
  if (n)
    return ((node*)n)->size;
  else
    return 0;
}

