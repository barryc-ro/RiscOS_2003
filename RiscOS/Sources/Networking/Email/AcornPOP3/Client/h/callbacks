#if !defined(__callbacks_h)              /* Sentry, use file only if it's not already included. */
#define __callbacks_h
/*	Project Post (769) - AcornPOP3
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		callbacks.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.02 for RISC OS

	OVERVIEW
	========
	Header file for callbacks.c

	HISTORY
	=======
	08/10/97	0.01	RDW	initial version
	17/12/97	0.02	RDW	#include for callx changed to get it from library
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - External Libraries                                  */
/*                                                                            */
/* ************************************************************************** */
#include "callx/callx.h"


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef enum
{
  CB_DATA_GETLINE,
  CB_DATA_SENDLINE,
  CB_DATA_EVENT,
  CB_DATA_COMMAND_RESPONSE,
  CB_DATA_LOGON
} CB_DATA_TYPE;


typedef enum
{
  CB_CALLER_FSM,
  CB_CALLER_EVENT
} CB_CALLER;

typedef enum
{
  EVENT_NONE,
  EVENT_TIMEOUT,		/* callafter timeout that was set has occured */
  EVENT_READ,			/* data to read on socket */
  EVENT_WRITE,			/* ready for more data to write */
  EVENT_EXECEPTION,		/* exeception occured */
  EVENT_CONNECTION_BROKEN
} CONNECTION_EVENT;	/* Events on the socket from the internet event handler                */

typedef struct
{
  CB_CALLER         caller;
//  CB_DATA_TYPE      type;
  CONNECTION_EVENT  event;
  void             *data;
  callx_handler_fn  func;
} CB_DATA;

typedef _kernel_oserror* (*function)(void *);	/* not for CallBacks, but for calling back a FSM entry point directly */


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes                                                        */
/*                                                                            */
/* ************************************************************************** */
_kernel_oserror* set_callback(//CB_DATA_TYPE      type,
                              //CB_CALLER         caller,
                              //CONNECTION_EVENT  event,
                              callx_handler_fn  func,
                              void             *data);

_kernel_oserror* register_timeout(int              timeout,
                                  callx_handler_fn func);

_kernel_oserror* remove_all_callbacks(callx_handler_fn, void *data);

_kernel_oserror* clear_timeout(callx_handler_fn func);

#endif  /* end of sentry #ifdef */
