/*	Project Post (769) - AcornPOP3
	Acorn Risc Technologies
	Copyright © 1996. All Rights Reserved.

	FILE:		pop_utils.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.12 for RISC OS

	OVERVIEW
	========
	Source file for implementation pop related utility functions

	HISTORY
	=======
	20/02/97	0.01	RDW	Initial version
	11/07/97	0.02	RDW	Tidy up when moving to correct build environment
	15/07/97	0.03	RDW	Tidy up
	08/10/97	0.04	RDW	commented out get_line_from_server
	14/10/97	0.05	RDW	destroy_response function added
	04/11/97	0.06	RDW	notify_client function added and WimpMessage and AcornPOP3_WimpMessage added
	18/11/97	0.07	RDW	WimpMessage Message_AcornPOP3_PollWordSet now set to the constant AcornPOP3_SWIChunkBase+0
					This is much better and cleaner
	07/04/98	0.08	RDW	#include "TML_Podule.h" removed
	03/06/98	0.09	RDW	pop3_irqs_off and pop3_restore_irqs added
	26/06/98	0.10	RDW	debug added for notify_client
					WimpMessage now returns pollword address, not data address (ie. pollword contents)
	11/11/98	0.11	RDW	clean_up_dead_client() added
	18/11/98	0.12	RDW	notify_client() renamed as send_notification()
					EnQueue(), ProcessQueue() and new notify_client() added.
					notify_client now takes the data and EnQueues, it then
					calls ProcessQueue().
					ProcessQueue() checks to see if pollword is null (ie.
					client is free to receive new data) and takes the head
					of the queued data and notifies the client (calls
					send_notification() - the old notify_client().
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include "inetlib.h"
#include "socklib.h"
#include "DebugLib/debuglib.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "common.h"
#include "pop_utils.h"
#include "errortable.h"
#include "swihndlers.h"
#include "queue.h"


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */
#define Message_AcornPOP3_PollWordSet AcornPOP3_SWIChunkBase			// WimpMessage number


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef struct
{
  unsigned int flags;	// flags word
  void *pollword_addr;	// pollword address - session id
  void *user_id;	// user id
} AcornPOP3_WimpMessage;

typedef struct
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } hdr;
  union
  {
    int  words[59];
    char bytes[236];
    AcornPOP3_WimpMessage pop3_data;
  } data;
} WimpMessage;


/* ************************************************************************** */
/*                                                                            */
/* External globals                                                           */
/*                                                                            */
/* ************************************************************************** */
extern errno;									// From Internet
extern process_details process1;						// This client's process detail


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Functions internal to source file                    */
/*                                                                            */
/* ************************************************************************** */
/* static _kernel_oserror* send_notification(void *data); */			/* set the pollword/send WimpMessage to the client so it gets the data */
/* static _kernel_oserror* EnQueue(process_details* p, void* data); */		/* add the given data to the given process's returned data queue */


/* ************************************************************************** */
/*
   FUNCTION:       positive_response
   DESCRIPTION:    Function to take a server response string and return TRUE
   		   if it is a positive response from the server, else return
   		   FALSE.
   DEPENDENCIES:   function		strncmp			string.h
   DEPENDED ON BY: function		delete_message		deletemsg.c
   		   function		get_list_of_messages	getlistmsg.c
   		   function		get_list_of_uids	getlistuid.c
   		   function		get_message_to_file	getmsgfile.c
   		   function		get_message_to_memory	getmsgmem.c
   		   function		get_number_of_messages	getnummsgs.c
   		   function		logon_USER_PASS		logon.c
   		   function		logout			logout.c
   INPUT PARAMS:   char[]		string			server string response to check
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   BOOL			TRUE			if +ve server response, else
   					FALSE			-ve server response
   CONSTANTS:      NONE
   VARIABLES:      BOOL			result			result to return
 */
/* ************************************************************************** */
extern BOOL positive_response(char string[])
{
  BOOL result = FALSE;

  if (string != 0)
  {
    if (strncmp("+OK", string, 3) == 0)
      result = TRUE;
  }

  return result;
}


extern void destroy_response(char **response)
{
  if (response)
  {
    if (*response)
      free(*response);
    *response = 0;
  }
}


static _kernel_oserror* send_notification(void *data)
{
  _kernel_oserror *error = 0;

  if (process1.flags & REGISTER_WIMPMSG)
  {
    WimpMessage msg;
    _kernel_swi_regs r;
    int absolute_size;

    dprintf(("", "Going to send a WIMP message\n"));
    memset(&msg, 0, sizeof(msg));
    absolute_size = sizeof(WimpMessage)-(sizeof(msg.data.words)-sizeof(msg.data.pop3_data));	// needs to be rounded up to a whole no. of words
    msg.hdr.size = (absolute_size / sizeof(int)) * sizeof(int);					// Set size to number of whole words * size of word
    if (absolute_size % sizeof(int))								// if fraction of word left over
      msg.hdr.size = + sizeof(int);								// Add on size of another whole word
    msg.hdr.action_code              = Message_AcornPOP3_PollWordSet;
    msg.data.pop3_data.pollword_addr = &process1.pollword;

    r.r[0] = 0;
    r.r[1] = (int)&msg;
    r.r[2] = (int)process1.taskhandle;
    r.r[3] = 0;
    r.r[4] = 0;

    dprintf(("", "r0: %d\n", r.r[0]));
    dprintf(("", "r1: %d\n", r.r[1]));
    dprintf(("", "r2: %d\n", r.r[2]));
    dprintf(("", "r3: %d\n", r.r[3]));
    dprintf(("", "r4: %d\n", r.r[4]));
    error = _kernel_swi(TaskModule_SendMessage, &r, &r);
    dprintf(("", "error: %x\n", error));
  }

  process1.pollword = data;
  dprintf(("", "data:%x\n", data));
  dprintf(("", "data.flags:%x\n", ((AcornPOP3_returned_data*)data)->flags));

  return error;
}


/* add the given data to the given process's returned data queue */
static _kernel_oserror* EnQueue(process_details* p, Node n)
{
  return Add(p->queue, n);							/* Add data to end of queue */
}


/* process the given processes' returned data queue */
extern _kernel_oserror* ProcessQueue(process_details* p)
{
  _kernel_oserror* error = 0;

  if (p->pollword == 0)								/* if pollword is null, then put next data item in there */
  {
    Node node = Head(p->queue);							/* Take head node item off queue */

    if (node)
    {
      void*  data     = GetNode_data(node);
      void*  location = GetNode_location(node);
      size_t size     = GetNode_size(node);

      if (data)									/* check node has valid data */
      {
        if (location)								/* if there is a location, put the data there, else the data location */
        {									/* is static already */
          memcpy(location, data, size);						/* copy data to location the client expectts data at */
          send_notification(location);						/* send the notification to the client */
        }
        else
          send_notification(data);
      }
      DestroyNode(&node);
    }
  }

  return error;
}


/* notify the client of the given returned data when it's ready to recieve it */
/* if location == 0, then it means the data given is already at the correct */
/* location and is static, so don't free it! */
_kernel_oserror* notify_client(void *data, void* location, size_t size)
{
  _kernel_oserror *error = 0;
  Node             node  = 0;

  node = CreateNode(data, location, size);
  if (node)
  {
    error = EnQueue(&process1, node);
    error = ProcessQueue(&process1);
  }
  else
    error = ERROR(MALLOCFAILED);

  return error;
}


/* function to make sure irqs are turned off and stores away previous state first */
int pop_irqs_off(void)
{
  int disabled = _kernel_irqs_disabled();
  _kernel_irqs_off();
  return disabled;
}


/* function to restore irqs */
void pop_restore_irqs(int disabled)
{
  if (disabled)
    _kernel_irqs_off();
  else
    _kernel_irqs_on();
}


/* ************************************************************************** */
/*
   FUNCTION:       clean_up_dead_client
   DESCRIPTION:	   Function recovers from the given registered client (p)
                   dying without having called DeRegister SWI.
   DEPENDENCIES:   type		process_details
   DEPENDED ON BY: function	service_handler
   INPUT PARAMS:   process_details	p	The process to clean up
   		   void*		pw	private word workspace pointer
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      _kernel_swi_regs	r	for calling internal version of
                                                DeRegister
 */
/* ************************************************************************** */
extern void clean_up_dead_client(process_details* p, void* pw)
{
  /* deregister the client as it would have had it worked properly */
  _kernel_swi_regs r;

  dprintf(("", "clean_up_dead_client() called\n"));
  r.r[0] = 0;
  r.r[1] = (int)&(p->pollword);

  handle_swi_AcornPOP3_DeRegister(&r, pw);
}
