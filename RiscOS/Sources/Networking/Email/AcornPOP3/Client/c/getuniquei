/*	Project Post (769) - AcornPOP3
	Acorn Risc Technologies
	Copyright © 1996. All Rights Reserved.

	FILE:		getuniquei.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.08 for RISC OS

	OVERVIEW
	========
	Source file for implementation of function to perform POP3 UIDL to get
	the unique ID of a given message

	HISTORY
	=======
	11/07/97	0.01	RDW	Initial version
	15/07/97	0.02	RDW	Tidy Up
	21/10/97	0.03	RDW	Changed to new non-blocking
	27/01/98	0.04	RDW	removed setting of process1.socknum
					left by a cut and paste!
	12/03/98	0.05	RDW	Elib_priv.h taken from EmailLib now
	18/03/98	0.06	RDW	Tidy up get_message_uniqueID_CBhandler
					unused parameters
	25/03/98	0.07	RDW	#include debuglib.h corrected
	03/06/98	0.08	RDW	Re-entracy changes as per cmdresp.c 0.05
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <string.h>
#include <stdlib.h>
#include <stdio.h>


/* ************************************************************************** */
/*                                                                            */
/* Include header files - External Libraries                                  */
/*                                                                            */
/* ************************************************************************** */
#include "DebugLib/debuglib.h"
#include "Email/EmailLib/Elib_priv.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "common.h"
#include "getuniquei.h"
#include "cmdresp.h"
#include "pop_utils.h"
#include "errortable.h"


/* ************************************************************************** */
/*                                                                            */
/* External globals                                                           */
/*                                                                            */
/* ************************************************************************** */
extern process_details process1;						// This client's process detail
extern errno;									// From Internet


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */
static const int SLEEP_TIME    = 1;
static const int TIME_SLICE    = 50;						/* Time slice to use                                                   */


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef enum
{
  UIDL,
  UIDL_RESPONSE
} UIDLES;

typedef struct
{
  BOOL                in_FSM;							/* Thread currently executing in FSM                   */
  BOOL                pending_CB;						/* There is a CallBack/re-entrancy into the FSM pending*/
  BOOL                need_CB;							/* There needs to be a CallBack set to re-enter the FSM*/
  time_t              t_slice;
  _kernel_oserror    *error;
  int                 errno;
  int                 uidl_timeout;
  int                 sock;							// socket descriptor
  char               *response;							// response line from server
  UIDLES              state;
  unsigned int        message_id;
  char               *unique_id;
  BOOL                end;
  BOOL                exit;
} getmsguid_context;


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */
static void get_message_uniqueID_FSM_UIDL(getmsguid_context *c);
static void get_message_uniqueID_FSM_UIDL_RESPONSE(getmsguid_context *c);
extern _kernel_oserror *get_message_uniqueID_FSM(getmsguid_context *context);
static getmsguid_context *new_getmsguid_context(void);
static _kernel_oserror* get_message_uniqueID_CBhandler(_kernel_swi_regs *r, void *pw, void *data);
static _kernel_oserror* get_message_uniqueID_CAhandler(_kernel_swi_regs *r, void *pw, void *data);
static _kernel_oserror* CA_get_message_uniqueID(void *data);


/* ************************************************************************** */
/*                                                                            */
/* Functions                                                                  */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*
   FUNCTION:       getuniquei
   DESCRIPTION:    Function to get the unique ID of a given messages's current
   		   connection ID from the server connection.  Only works if
   		   server supports the UIDL command.
   DEPENDENCIES:      			errortable	errortable.h
   DEPENDED ON BY: function		handle_swi_AcornPOP3_GetUniqueID	swihndlers.c
   INPUT PARAMS:   int			timeout_UIDL	timeout for UIDL command (UNUSED)
   		   unsigned int*	id		Message ID to get Unique ID for
   OUTPUT PARAMS:  unsigned int*	id		Message ID from UIDL response
   		   char*		unique_id	Unique Message ID from UIDL response
   		   int*			internet_err	Internet errno
   RETURN VALUE:   			NULL		if handled successfully,
   							else ptr to error block
   CONSTANTS:      NONE
   VARIABLES:      _kernel_oserror*	error		result to return
    		   int			sock		socket descriptor to use
   		   char*		response	response line from server
   		   int			rc		return code from sscanf
   		   char[20]		tmp		tmp string to get length of message ID
 */
/* ************************************************************************** */
extern _kernel_oserror* get_message_uniqueID(int           timeout_UIDL,
                                             unsigned int  id,
                                             char         *unique_id)
{
  _kernel_oserror    *error   = 0;						/* result to return */
  getmsguid_context *context = new_getmsguid_context();
  
  if (context == 0)
    error = ERROR(MALLOCFAILED);
  else
  {
    context->sock = process1.socknum;
    context->uidl_timeout = timeout_UIDL;
    context->message_id   = id;
    context->unique_id    = unique_id;
    process1.state        = PROCESSING;						/* make sure main state is IDLE so event handler doesn't do anything */
    error = CB_get_message_uniqueID(context); 
  }
  
  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static getmsguid_context *new_getmsguid_context(void)
{
  getmsguid_context *c = malloc(sizeof(getmsguid_context));
  dprintf(("", "new_getnummgs_context\n"));
  
  if (c)
  {
    memset(c, 0, sizeof(getmsguid_context));
    c->sock = -1;
    c->state = UIDL;
  }
  
  return c;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
extern _kernel_oserror *get_message_uniqueID_FSM(getmsguid_context *context)
{
  _kernel_oserror *error = 0;
  
  dprintf(("", "get_message_uniqueID_FSM_FSM: context: %x\n", context));
  if (context == 0)
    error = ERROR(INTERNALERR);
    
  if (!error)
  {
    context->t_slice = clock() + TIME_SLICE;
    context->exit = FALSE;
    do
    {
      switch (context->state)
      {
        case UIDL:
        {
          dprintf(("", "get_message_uniqueID_FSM: UIDL\n"));
          get_message_uniqueID_FSM_UIDL(context);
          break;
        }
        case UIDL_RESPONSE:
        {
          dprintf(("", "get_message_uniqueID_FSM: UIDL_RESPONSE\n"));
          get_message_uniqueID_FSM_UIDL_RESPONSE(context);
          break;
        }
        default:
        {
          dprintf(("", "get_number_of_message_FSM: INTERNAL ERROR\n"));
          error = ERROR(INTERNALERR);
          context->end = TRUE;
          break;
        }
      } /* end switch */
    } while ((!expired(context->t_slice)) && (!context->end) && (!context->exit));
  } /* endif */
        
  if (!error)
  {
    int state = pop_irqs_off();							/* CRITICAL SECTION start, turn off interrupts */
    context->in_FSM = FALSE;							/* Clear the in_FSM flag as we are about to return */
    if (context->end)								/* If this is the end of the FSM execution, then */
    {
      process1.state = PROCESSING;						/* Ensure main state is IDLE                  */
      callx_remove_callafter(&get_message_uniqueID_CAhandler, context);		/* Ensure any pending callafter is removed    */
      callx_remove_callback(&get_message_uniqueID_CBhandler, context);		/* Ensure any pending callback is removed     */
      process1.getuniqueid.flags = 0;
      process1.getuniqueid.error = context->error;
      process1.getuniqueid.errno = context->errno;
      process1.getuniqueid.id    = context->message_id;
      notify_client(&(process1.getuniqueid));
      free(context);      							/* destroy the context                        */
      context = 0;
    }
    else if (!context->exit)							/* else, if exit not set then t_slice must have expired, so */
    {
      context->pending_CB = FALSE;						/* ensure pending flag is FALSE, it should be */
      context->need_CB = FALSE;							/* set need_CB to FALSE as we are going to set a callback */
      error = CA_get_message_uniqueID(context);					/* set a callafter to re-enter the FSM later  */
    }
    else if (context->need_CB)							/* else, if need callback flag is set, then   */
    {
      context->need_CB = FALSE;							/* clear the flag and                         */
      error = CB_get_message_uniqueID(context);					/* set a callback to re-enter the FSM         */
    }
    pop_restore_irqs(state);							/* End of CRITICAL SECTION, restore irqs      */
  }
  
  return error;
}


extern _kernel_oserror* CA_get_message_uniqueID(void *data)
{
  if (data)
    return callx_add_callafter(SLEEP_TIME, &get_message_uniqueID_CAhandler, data);
  else
    return ERROR(NULLADDR);
}


extern _kernel_oserror* CB_get_message_uniqueID(void *data)
{
  _kernel_oserror *error = 0;
  int              state;
  getmsguid_context *context = (getmsguid_context*)data;
  
  if (context)
  {
    state = pop_irqs_off();							/* CRITICAL SECTION - Turn off interrupts */
    if (!context->pending_CB)							/* If there is not a callback already set to go off, then */
    {
      if (context->in_FSM)							/* If there is currently a thread of execution in the FSM, then */
        context->need_CB = TRUE;						/* a callback needs to be set by that thread when it terminats  */
      else									/* otherwise */
      {
        context->pending_CB = TRUE;						/* We can set a callback, so set the flag and set the callback */
        error = callx_add_callback(&get_message_uniqueID_CBhandler, data);
      }										/* endif current thread executing check */
    }										/* endif pending callback check */
    pop_restore_irqs(state);							/* End of CRITICAL SECTION - Restore interrupts */
  }
  else
    error = ERROR(NULLADDR);
    
  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
extern _kernel_oserror *get_message_uniqueID_CBhandler(_kernel_swi_regs *r, void *pw, void *data)
{
  getmsguid_context *context = (getmsguid_context*)data;
  int state;
  _kernel_oserror *error = 0;
  
  UNUSED(r);
  UNUSED(pw);
  
  if (context)
  {
    state = pop_irqs_off();
    context->in_FSM     = TRUE;
    context->pending_CB = FALSE;
    pop_restore_irqs(state);
    error = get_message_uniqueID_FSM(data);
  }
  else
    error = ERROR(NULLADDR);
  
  return error;
  UNUSED(r);
  UNUSED(pw);

  return get_message_uniqueID_FSM(data);
}

  
static _kernel_oserror* get_message_uniqueID_CAhandler(_kernel_swi_regs *r, void *pw, void *data)
{
  UNUSED(r);
  UNUSED(pw);
  
  return CB_get_message_uniqueID(data);
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void get_message_uniqueID_FSM_UIDL(getmsguid_context *c)
{
  static char tmp[45];
  
  if (!c->error)
  {
    sprintf(tmp, "UIDL %u", c->message_id);
      
    c->error = command_response(c->sock,
                                tmp,
                                strlen(tmp),
                                &(c->response),
                                c->uidl_timeout,
                                &(c->errno),
                                &(c->error),
                                (function)&get_message_uniqueID_FSM,
                                c);
  }
  
  if (!c->error)
  {
    c->state = UIDL_RESPONSE;
    c->exit = TRUE;
  }
  else
    c->end = TRUE;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void get_message_uniqueID_FSM_UIDL_RESPONSE(getmsguid_context *c)
{
  if (!c->error)
  {
    if (!positive_response(c->response))
      c->error = ERROR(FAILED);
  }
  
  if ((c->response) && (!c->error))
  {
    int rc = 0;
    
    rc = sscanf((c->response)+4, "%lu %s", &(c->message_id), c->unique_id);
    if (rc != 2)
      c->error = ERROR(FAILED);

    dprintf(("", "response: %s\nmessage_id: %d\nunique_id: %s\n", c->response, c->message_id, c->unique_id));
  }
  destroy_response(&(c->response));
  c->end = TRUE;
}
