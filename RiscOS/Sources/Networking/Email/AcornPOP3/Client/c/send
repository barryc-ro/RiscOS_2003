/*	Project Post (769) - AcornPOP3
	Acorn Risc Technologies
	Copyright © 1996. All Rights Reserved.

	FILE:		send.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.05 for RISC OS

	OVERVIEW
	========
	Source file for implementation of sendline to server functionality.

	HISTORY
	=======
	10/10/97	0.01	RDW	Initial version
	12/03/98	0.02	RDW	Elib_priv.h taken from EmailLib now
	18/03/98	0.03	RDW	send_line_CAhandler() and
					send_line_CBhandler() unused params.
					tidied up.
	25/03/98	0.04	RDW	#include debuglib corrected
	19/05/98	0.05	RDW	Only switches process1.state into SEND
					on a EWOULDBLOCK.  Also, on exit now
					ensures there is no callafter or
					callback pending
*/


/* ************************************************************************** */
/*                                                                            */
/* Include entity files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include "inetlib.h"
#include "socklib.h"
#include "sys/errno.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - External Libraries                                  */
/*                                                                            */
/* ************************************************************************** */
#include "DebugLib/debuglib.h"
#include "Email/EmailLib/Elib_priv.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "common.h"
#include "errortable.h"
#include "callbacks.h"
#include "send.h"


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef enum
{
  INIT,
  SEND_PART,
  ERROR,
  COMPLETED
} send_line_STATES;								/* States for send_line_from_server FSM                                */

typedef struct
{
  int               sem;
  int               s;								/* socket to read from                                                 */
  int               timeout;							/* timeout for this send line                                          */
  CONNECTION_EVENT  event;							/* event from Internet Event handler if it is driving the FSM          */
  function          func;							/* function to callback once FSM has terminated                        */
  char             *buffer;							/* buffer to print command into                                        */
  int               length;							/* length of buffer contents in chars                                  */
  char             *pos;							/* position in buffer                                                  */
  int              *errno;							/* ptr to location to return internet errno to if there one occurs     */
  BOOL              end;							/* flag set once the FSM is terminated                                 */
  time_t            t_slice;							/* time in centiseconds to stay in FSM before releasing control        */
  _kernel_oserror  *error;							/* error to return to function                                         */
  _kernel_oserror **error2;							/* error to return to function                                         */
  void             *data;
  send_line_STATES  state;							/* current FSM state                                                   */
  BOOL              exit;
} send_line_context;


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */
static const int SLEEP_TIME    = 1;
static const int TIME_SLICE    = 50;						/* Time slice to use                                                   */
static const char EOL[] = {0x0d, 0x0a};						/* End of line character sequence                                      */


/* ************************************************************************** */
/*                                                                            */
/* External globals                                                           */
/*                                                                            */
/* ************************************************************************** */
extern errno;									// From Internet
extern process_details process1;


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */
static send_line_context* new_send_line_context(void);
static void              send_line_FSM_INIT(send_line_context *context);
static void              send_line_FSM_SEND(send_line_context *context);
static void              send_line_FSM_ERROR(send_line_context *context);
static void              send_line_FSM_COMPLETED(send_line_context *context);
/*static _kernel_oserror*  send_line_FSM(send_line_context *context);*/		/* commented out to stop compiler warning about unused earlier
										   declaration of 'send_.....'  Why should it complain?  Surely it's
										   good practice to declare func. prototypes always, whether they
										   are really needed or not...*/
static _kernel_oserror*  send_line_CBhandler(_kernel_swi_regs *r, void *pw, void *data);
static _kernel_oserror*  send_line_CAhandler(_kernel_swi_regs *r, void *pw, void *data);


/* ************************************************************************** */
/*                                                                            */
/* Functions                                                                  */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   FUNCTION:       send_line_to_server
   DESCRIPTION:    Function to read in a line from the POP3 server.  A line is
   		   a string of characters terminated by CRLF.  This string is
   		   then returned to the caller.
   DEPENDENCIES:      			errortable		errortable.h
   		   function		recv			socklib.h
   DEPENDED ON BY: function		delete_message		deletemsg.c
   		   function		send_list_of_messages	sendlistmsg.c
   		   function		send_list_of_uids	sendlistuid.c
   		   function		send_message_to_file	sendmsgfile.c
   		   function		send_message_to_memory	sendmsgmem.c
   		   function		send_number_of_messages	sendnummsgs.c
   		   function		logon_USER_PASS		logon.c
   		   function		logout			logout.c
   INPUT PARAMS:   int			s			socket descriptor to use
   		   int			timeout			time to wait for line before returning timeout
   		   void*		func(int rc, int error)	function to call when operation is completed
   		   char**		string			address of char* to set to point to data from server
   OUTPUT PARAMS:  char**		string			address of string from server
   		   int*			internet_err		Internet errno
   RETURN VALUE:   			NULL			if handled successfully,
   								else ptr to error block
   CONSTANTS:      NONE
   VARIABLES:      _kernel_oserror*	error			result to return
 */
/* ************************************************************************** */
extern _kernel_oserror *send_line_to_server(int               s,
                                            int               length,
                                            int               timeout,
                                            int              *internet_err,
                                            _kernel_oserror **error2,
                                            function          func,
                                            void             *data,
                                            char              string[],
                                            ...)
{
  _kernel_oserror *error = 0;
  va_list          arg;								/* variable arguments to pass onto vsprintf      */
  int              reallen = length+sizeof(EOL);				/* real length is length + length of EOL string  */
  char            *buffer = 0;							/* buffer to print command into                  */
  
  if ((s < 0) || (func == 0) || (internet_err == 0))				/* If invalid socket or function */
    error = ERROR(NULLADDR);						/* error is NULL address         */
  
  va_start(arg,string);
  buffer = (char*)malloc(reallen+1);						// length + length of EOL termination string
  
  if (buffer == 0)								// if malloc failed, then
    error = ERROR(MALLOCFAILED);					// return "Failed"
  else										// else
  {
    vsprintf(buffer, string, arg);						// build command in buffer
    strncat(buffer, EOL, sizeof(EOL));						// append EOL sequence
  }
  
  va_end(arg);									/* clean up use of variable arguments */

  if (!error)
  {
    send_line_context *context = new_send_line_context();			/* create a new context for the FSM */
    process1.send_context = context;
/*    process1.state = SEND;*/
    
    if (context)
    {
      context->s        = s;
      context->timeout  = timeout;
      context->event    = EVENT_NONE;
      context->func     = func;
      context->buffer   = buffer;
      context->length   = reallen;
      context->pos      = context->buffer;
      context->errno    = internet_err;
      context->t_slice  = TIME_SLICE;
      context->end      = FALSE;
      context->data     = data;
      context->error2   = error2;
//      error = send_line_FSM(context);
//      error = callx_add_callafter(SLEEP_TIME, &send_line_CAhandler, context);
      error = CB_send_line_to_server(context);
    }
    else									/* else, malloc failed           */
    {
      error = ERROR(MALLOCFAILED);					/* return error                  */
      if (buffer)
        free(buffer);
    }
  }

  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:       new_send_line_context
   DESCRIPTION:    Function to create a new context for the send_line_FSM
   DEPENDENCIES:      			errortable		errortable.h
   		   function		malloc			stdlib.h
   		   function		memset			string.h
   		   type			send_line_context	
   DEPENDED ON BY: function		send_line_from_server
   INPUT PARAMS:   NONE
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   			NULL		if failed
   CONSTANTS:      NONE
   VARIABLES:      _kernel_oserror*	error		result to return
   		   va_list		arg		variable arguments of this function
   		   char*		buffer		string buffer to create command string in
   		   int			reallen		real length of command including line termination sequence (EOL)
   		   int			rc		send() return code
 */
/* ************************************************************************** */
static send_line_context *new_send_line_context(void)
{
  send_line_context *c = malloc(sizeof(send_line_context));			/* create new context        */
  
  if (c)									/* if created, initialise it */
  {
    memset(c, 0, sizeof(send_line_context));					/* init. context to NULL     */
    c->s        = -1;								/* init. socket to INVALID   */
    c->state    = INIT;								/* init. FSM state           */
    c->sem      = 0;
  }
  
  return c;
}


static _kernel_oserror *send_line_FSM(send_line_context *context)
{
  _kernel_oserror *error = 0;
  
  dprintf(("", "send_line_FSM: context: %x\n", context));
  if (context == 0)
    error = ERROR(INTERNALERR);
  
  if (!error)
  {
    context->t_slice = clock() + TIME_SLICE;
    context->sem--;
    if (context->sem < 0) context->sem = 0;
    do
    {
      if (context->error)
        context->state = ERROR;
      switch (context->state)
      {
        case INIT:
        {
          dprintf(("", "send_line_FSM: INIT\n"));
          send_line_FSM_INIT(context);
          break;
        }
        case SEND_PART:
        {
          dprintf(("", "send_line_FSM: SEND_PART\n"));
          if ((context->event == EVENT_TIMEOUT) || (context->event == EVENT_CONNECTION_BROKEN))
            context->state = ERROR;
          else
            send_line_FSM_SEND(context);
          break;
        }
        case ERROR:
        {
          dprintf(("", "send_line_FSM: ERROR\n"));
          process1.state = PROCESSING;
          send_line_FSM_ERROR(context);
          break;
        }
        case COMPLETED:
        {
          dprintf(("", "send_line_FSM: COMPLETED\n"));
          process1.state = PROCESSING;
          send_line_FSM_COMPLETED(context);
          break;
        }
        default:
        {
          dprintf(("", "send_line_FSM: INTERNAL ERROR\n"));
          process1.state = PROCESSING;
          error = ERROR(INTERNALERR);
          break;
        }
      } // end FSM switch
    } while ((!expired(context->t_slice)) && (!context->end) && (!context->exit));	// end while on FSM
  }
  
//      callx_remove_callafter(&send_line_CAhandler, context);
//      callx_remove_callback(&send_line_CBhandler, context);
  if (!error)
  {
    if (context->end)
    {
      process1.state = PROCESSING;
      callx_remove_callafter(&send_line_CAhandler, context);
      callx_remove_callback(&send_line_CBhandler, context);
      free(context);
      context = 0;
    }
    else if (!context->exit)
    {
      error = CB_send_line_to_server(context);
//      error = callx_add_callafter(SLEEP_TIME, &send_line_CAhandler, context);
//      error = set_callback(/*CB_DATA_SENDLINE, */CB_CALLER_FSM, EVENT_NONE, send_line_CBhandler, context);
    }
    else
      context->exit = FALSE;
  }

  return error;
}


extern _kernel_oserror* CB_send_line_to_server(void *data)
{
  send_line_context *c = (send_line_context*)data;
  
  if (c->sem == 0)
  {
    dprintf(("", "SETTING CALLBACK to send_line\n"));
    c->sem++;
    return callx_add_callback(&send_line_CBhandler, data);
  }
  else
    return 0;
}


extern _kernel_oserror* CA_send_line_to_server(void *data)
{
  send_line_context *c = (send_line_context*)data;
  
  if (c->sem == 0)
  {
    dprintf(("", "SETTING CALLAFTER to send_line\n"));
    c->sem++;
    return callx_add_callafter(SLEEP_TIME, &send_line_CAhandler, c);
  }
  else
    return 0;
}


extern _kernel_oserror* send_line_CAhandler(_kernel_swi_regs *r, void *pw, void *data)
{
  UNUSED(r);
  UNUSED(pw);
  
  return callx_add_callback(&send_line_CBhandler, data);
}


extern _kernel_oserror* send_line_CBhandler(_kernel_swi_regs *r, void *pw, void *data)
{
  UNUSED(r);
  UNUSED(pw);
  
  return send_line_FSM(data);
}


static void send_line_FSM_INIT(send_line_context *context)
{
  context->error = register_timeout(context->timeout, &send_line_CBhandler);
  if (!context->error)
    context->state = SEND_PART;
  else
    context->state = ERROR;
}


static void send_line_FSM_SEND(send_line_context *context)
{
  static int rc = 0;
  static int i = 0;
  dprintf(("", "send_line_FSM_SEND: context->pos: %s\ncontext->length: %d\ncontext->s %d\n", context->pos, context->length, context->s));
  for (i=0;i<context->length;i++)
    dprintf(("", "%c\t%d\n", context->pos[i], context->pos[i]));
    
  rc = send(context->s, context->pos, context->length, 0);	
  dprintf(("", "send: rc: %d\n", rc));
  if (rc < 0)
  {
    if (errno != EWOULDBLOCK)
    {
      dprintf(("", "send_line_FSM_SEND: send ERROR\n"));
      context->error = ERROR(INTERNETERR);
      *context->errno = errno;
      context->state = ERROR;
    }
    else
    {
      dprintf(("", "send_line_FSM_SEND: EWOULDBLOCK\n"));
      context->state = SEND_PART;
      context->exit  = TRUE;
      process1.state = SEND;
    }
  }
  else if (rc >= context->length)
  {
    dprintf(("", "send_line_FSM_SEND: COMPLETED\n"));
    context->state = COMPLETED;
    process1.state = PROCESSING;
  }
  else						/* still data to send                           */
  {
    dprintf(("", "send_line_FSM_SEND: send sent %d characters of %d", rc, context->length));
    context->length -= rc;			/* decrement length by number of chars sent     */
    context->pos    += rc;			/* move position in buffer by num of chars sent */
    context->state   = SEND_PART;
  }
}


static void send_line_FSM_ERROR(send_line_context *context)
{
  clear_timeout(&send_line_CBhandler);
  free(context->buffer);
  
  switch (context->event)
  {
    case EVENT_TIMEOUT:
      context->error = ERROR(CONTIMEDOUT);
      break;
    case EVENT_CONNECTION_BROKEN:
      context->error = ERROR(CONBROKEN);
      break;
    case EVENT_NONE:
    default:
      break;
  } // endswitch
  
  *(context->error2) = context->error;
  context->func(context->data);
  context->end = TRUE;
}


static void send_line_FSM_COMPLETED(send_line_context *context)
{
  context->error = clear_timeout(&send_line_CBhandler);
  *(context->error2) = 0;
  free(context->buffer);
  context->func(context->data);
  context->end = TRUE;
}


