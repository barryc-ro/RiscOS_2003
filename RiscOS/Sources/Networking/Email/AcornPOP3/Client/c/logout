/*	Project Post (769) - AcornPOP3
	Acorn Risc Technologies
	Copyright © 1996. All Rights Reserved.

	FILE:		logout.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.11 for RISC OS

	OVERVIEW
	========
	Source file for implementation of function to perform POP3 QUIT and
	logout from a server

	HISTORY
	=======
	21/02/97	0.01	RDW	Initial version
	11/07/97	0.02	RDW	Tidy up when moving to correct build environment
	15/07/97	0.03	RDW	Tidy up
	15/10/97	0.04	RDW	Changed to new non-blocking
	18/11/97	0.05	RDW	check put round socketclose in QUIT_RESPONSE
					so we only close if socket is >=0
	27/01/98	0.06	RDW	removed setting of process1.socknum left by a cut and
					paste!
	02/02/98	0.07	RDW	Fixed bug: context socket descriptor not copied back
					into process1 structure on termination of FSM
	12/03/98	0.08	RDW	Elib_priv.h taken from EmailLib now
	18/03/98	0.09	RDW	logout_CBhandler() unused params. tidied up
	25/03/98	0.10	RDW	#include debuglib corrected
	03/06/98	0.11	RDW	Re-entracy changes as per cmdresp.c 0.05
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "netdb.h"
#include "socklib.h"
#include "inetlib.h"
#include "unixlib.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - External Libraries                                  */
/*                                                                            */
/* ************************************************************************** */
#include "DebugLib/debuglib.h"
#include "Email/EmailLib/Elib_priv.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "common.h"
#include "logout.h"
#include "cmdresp.h"
#include "pop_utils.h"
#include "errortable.h"


/* ************************************************************************** */
/*                                                                            */
/* External globals                                                           */
/*                                                                            */
/* ************************************************************************** */
extern process_details process1;						/* This client's process detail */
extern errno;									/* From Internet                */


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */
static const int SLEEP_TIME    = 1;
static const int TIME_SLICE    = 50;						/* Time slice to use                                                   */
static char QUITCMD[] = "QUIT";


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef enum
{
  QUIT,
  QUIT_RESPONSE
} STATES;

typedef struct
{
  BOOL                in_FSM;							/* Thread currently executing in FSM                   */
  BOOL                pending_CB;						/* There is a CallBack/re-entrancy into the FSM pending*/
  BOOL                need_CB;							/* There needs to be a CallBack set to re-enter the FSM*/
  time_t              t_slice;
  _kernel_oserror    *error;
  int                 errno;
  int                 quit_timeout;
  int                 sock;							// socket descriptor
  char               *response;							// response line from server
  STATES              state;
  BOOL                end;
  BOOL                exit;
} logout_context;


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */
static void logout_FSM_QUIT(logout_context *c);
static void logout_FSM_QUIT_RESPONSE(logout_context *c);
extern _kernel_oserror *logout_FSM(logout_context *context);
static logout_context *new_logout_context(void);
static _kernel_oserror* logout_CAhandler(_kernel_swi_regs *r, void *pw, void *data);
static _kernel_oserror* CA_logout(void *data);
static _kernel_oserror *logout_CBhandler(_kernel_swi_regs *r, void *pw, void *data);


/* ************************************************************************** */
/*                                                                            */
/* Functions                                                                  */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*
   FUNCTION:       logout
   DESCRIPTION:    Function to logout from server connection and close the
   		   connection.  Uses the QUIT command
   DEPENDENCIES:      			errortable	errortable.h
   DEPENDED ON BY: function		handle_swi_AcornPOP3_Disconnect	swihndlers.c
   INPUT PARAMS:   int			timeout_QUIT	timeout for QUIT command (UNUSED)
   OUTPUT PARAMS:  int*			internet_err	Internet errno
   RETURN VALUE:   			NULL		if handled successfully,
   							else ptr to error block
   CONSTANTS:      NONE
   VARIABLES:      _kernel_oserror*	error		result to return
    		   int			sock		socket descriptor to use
   		   char*		response	response line from server
   		   int			rc		return code from sscanf
 */
/* ************************************************************************** */
extern _kernel_oserror* logout(int  timeout_QUIT)
{
  _kernel_oserror *error   = 0;							/* result to return */
  logout_context  *context = new_logout_context();

  if (context == 0)
    error = ERROR(MALLOCFAILED);
  else
  {
    context->sock = process1.socknum;
    context->quit_timeout = timeout_QUIT;
    process1.state        = PROCESSING;						/* make sure main state is IDLE so event handler doesn't do anything */
    error = CB_logout(context);
  }

  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
static logout_context *new_logout_context(void)
{
  logout_context *c = malloc(sizeof(logout_context));
  dprintf(("", "new_logout_context\n"));

  if (c)
  {
    memset(c, 0, sizeof(logout_context));
    c->sock = -1;
    c->state = QUIT;
  }

  return c;
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
extern _kernel_oserror *logout_FSM(logout_context *context)
{
  _kernel_oserror *error = 0;

  dprintf(("", "logout_FSM: context: %x\n", context));
  if (context == 0)
    error = ERROR(INTERNALERR);

  if (!error)
  {
    context->t_slice = clock() + TIME_SLICE;
    context->exit = FALSE;
    do
    {
      switch (context->state)
      {
        case QUIT:
        {
          dprintf(("", "logout_FSM: QUIT\n"));
          logout_FSM_QUIT(context);
          break;
        }
        case QUIT_RESPONSE:
        {
          dprintf(("", "logout_FSM: QUIT_RESPONSE\n"));
          logout_FSM_QUIT_RESPONSE(context);
          break;
        }
        default:
        {
          dprintf(("", "logout_FSM: INTERNAL ERROR\n"));
          error = ERROR(INTERNALERR);
          context->end = TRUE;
          break;
        }
      } /* end switch */
    } while ((!expired(context->t_slice)) && (!context->end) && (!context->exit));
  } /* endif */

  if (!error)
  {
    int state = pop_irqs_off();							/* CRITICAL SECTION start, turn off interrupts */
    context->in_FSM = FALSE;							/* Clear the in_FSM flag as we are about to return */
    if (context->end)								/* If this is the end of the FSM execution, then */
    {
      process1.state = PROCESSING;						/* Ensure main state is IDLE                  */
      callx_remove_callafter(&logout_CAhandler, context);		/* Ensure any pending callafter is removed    */
      callx_remove_callback(&logout_CBhandler, context);		/* Ensure any pending callback is removed     */
      process1.disconnect.flags = 0;
      process1.disconnect.error = context->error;
      process1.disconnect.errno = context->errno;
      notify_client(&(process1.disconnect), 0, 0);
      free(context);      							/* destroy the context                        */
      context = 0;
    }
    else if (!context->exit)							/* else, if exit not set then t_slice must have expired, so */
    {
      context->pending_CB = FALSE;						/* ensure pending flag is FALSE, it should be */
      context->need_CB = FALSE;							/* set need_CB to FALSE as we are going to set a callback */
      error = CA_logout(context);					/* set a callafter to re-enter the FSM later  */
    }
    else if (context->need_CB)							/* else, if need callback flag is set, then   */
    {
      context->need_CB = FALSE;							/* clear the flag and                         */
      error = CB_logout(context);					/* set a callback to re-enter the FSM         */
    }
    pop_restore_irqs(state);							/* End of CRITICAL SECTION, restore irqs      */
  }

  return error;
}


static _kernel_oserror* CA_logout(void *data)
{
  if (data)
    return callx_add_callafter(SLEEP_TIME, &logout_CAhandler, data);
  else
    return ERROR(NULLADDR);
}


extern _kernel_oserror* CB_logout(void *data)
{
  _kernel_oserror *error = 0;
  int              state;
  logout_context *context = (logout_context*)data;

  if (context)
  {
    state = pop_irqs_off();							/* CRITICAL SECTION - Turn off interrupts */
    if (!context->pending_CB)							/* If there is not a callback already set to go off, then */
    {
      if (context->in_FSM)							/* If there is currently a thread of execution in the FSM, then */
        context->need_CB = TRUE;						/* a callback needs to be set by that thread when it terminats  */
      else									/* otherwise */
      {
        context->pending_CB = TRUE;						/* We can set a callback, so set the flag and set the callback */
        error = callx_add_callback(&logout_CBhandler, data);
      }										/* endif current thread executing check */
    }										/* endif pending callback check */
    pop_restore_irqs(state);							/* End of CRITICAL SECTION - Restore interrupts */
  }
  else
    error = ERROR(NULLADDR);

  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
extern _kernel_oserror *logout_CBhandler(_kernel_swi_regs *r, void *pw, void *data)
{
  logout_context *context = (logout_context*)data;
  int state;
  _kernel_oserror *error = 0;

  UNUSED(r);
  UNUSED(pw);

  if (context)
  {
    state = pop_irqs_off();
    context->in_FSM     = TRUE;
    context->pending_CB = FALSE;
    pop_restore_irqs(state);
    error = logout_FSM(data);
  }
  else
    error = ERROR(NULLADDR);

  return error;
}


static _kernel_oserror* logout_CAhandler(_kernel_swi_regs *r, void *pw, void *data)
{
  UNUSED(r);
  UNUSED(pw);

  return CB_logout(data);
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
static void logout_FSM_QUIT(logout_context *c)
{
  c->error = command_response(c->sock,
                              QUITCMD,
                              4,
                              &(c->response),
                              c->quit_timeout,
                              &(c->errno),
                              &(c->error),
                              (function)&logout_FSM,
                              c);
  if (!c->error)
  {
    c->state = QUIT_RESPONSE;
    c->exit = TRUE;
  }
  else
    c->end = TRUE;
}


/* ************************************************************************** */
/*
   FUNCTION:
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:
   RETURN VALUE:
   CONSTANTS:
   VARIABLES:
 */
/* ************************************************************************** */
static void logout_FSM_QUIT_RESPONSE(logout_context *c)
{
  destroy_response(&(c->response));
  if (c->sock >=0)
  {
    shutdown(c->sock,2);
    socketclose(c->sock);
  }
  c->sock = -1;
  process1.socknum = c->sock;
  c->end = TRUE;
}


