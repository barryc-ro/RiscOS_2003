/*	Project Post (769) - AcornPOP3
	Acorn Risc Technologies
	Copyright © 1996. All Rights Reserved.

	FILE:		logout.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.06 for RISC OS

	OVERVIEW
	========
	Source file for implementation of function to perform POP3 QUIT and
	logout from a server

	HISTORY
	=======
	21/02/97	0.01	RDW	Initial version
	11/07/97	0.02	RDW	Tidy up when moving to correct build environment
	15/07/97	0.03	RDW	Tidy up
	15/10/97	0.04	RDW	Changed to new non-blocking
	18/11/97	0.05	RDW	check put round socketclose in QUIT_RESPONSE
					so we only close if socket is >=0
	27/01/98	0.06	RDW	removed setting of process1.socknum left by a cut and
					paste!
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "netdb.h"
#include "socklib.h"
#include "inetlib.h"
#include "unixlib.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - External Libraries                                  */
/*                                                                            */
/* ************************************************************************** */
#include "DebugLib.h"
#include "Elib_priv.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "common.h"
#include "logout.h"
#include "cmdresp.h"
#include "pop_utils.h"
#include "errortable.h"


/* ************************************************************************** */
/*                                                                            */
/* External globals                                                           */
/*                                                                            */
/* ************************************************************************** */
extern process_details process1;						/* This client's process detail */
extern errno;									/* From Internet                */


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */
static const int TIME_SLICE    = 50;						/* Time slice to use                                                   */
static char QUITCMD[] = "QUIT";


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef enum
{
  QUIT,
  QUIT_RESPONSE
} STATES;

typedef struct
{
  time_t              t_slice;
  _kernel_oserror    *error;
  int                 errno;
  int                 quit_timeout;
  int                 sock;							// socket descriptor
  char               *response;							// response line from server
  STATES              state;
  BOOL                end;
  BOOL                exit;
} logout_context;


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */
static void logout_FSM_QUIT(logout_context *c);
static void logout_FSM_QUIT_RESPONSE(logout_context *c);
extern _kernel_oserror *logout_FSM(logout_context *context);
static logout_context *new_logout_context(void);


/* ************************************************************************** */
/*                                                                            */
/* Functions                                                                  */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static logout_context *new_logout_context(void)
{
  logout_context *c = malloc(sizeof(logout_context));
  dprintf(("", "new_logout_context\n"));
  
  if (c)
  {
    memset(c, 0, sizeof(logout_context));
    c->sock = -1;
    c->state = QUIT;
  }
  
  return c;
}


/* ************************************************************************** */
/*
   FUNCTION:       logout
   DESCRIPTION:    Function to logout from server connection and close the
   		   connection.  Uses the QUIT command
   DEPENDENCIES:      			errortable	errortable.h
   DEPENDED ON BY: function		handle_swi_AcornPOP3_Disconnect	swihndlers.c
   INPUT PARAMS:   int			timeout_QUIT	timeout for QUIT command (UNUSED)
   OUTPUT PARAMS:  int*			internet_err	Internet errno
   RETURN VALUE:   			NULL		if handled successfully,
   							else ptr to error block
   CONSTANTS:      NONE
   VARIABLES:      _kernel_oserror*	error		result to return
    		   int			sock		socket descriptor to use
   		   char*		response	response line from server
   		   int			rc		return code from sscanf
 */
/* ************************************************************************** */
extern _kernel_oserror* logout(int  timeout_QUIT)
{
  _kernel_oserror *error   = 0;							/* result to return */
  logout_context  *context = new_logout_context();
  
  if (context == 0)
    error = ERROR(MALLOCFAILED);
  else
  {
    context->sock = process1.socknum;
    context->quit_timeout = timeout_QUIT;
    
//    error = logout_FSM(context);
    error = set_callback(/*CB_CALLER_FSM, EVENT_NONE, */logout_CBhandler, context);
  }
  
  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
extern _kernel_oserror *logout_FSM(logout_context *context)
{
  _kernel_oserror *error = 0;
  
  dprintf(("", "logout_FSM: context: %x\n", context));
  if (context == 0)
    error = ERROR(INTERNALERR);
    
  if (!error)
  {
    context->t_slice = clock() + TIME_SLICE;
    do
    {
      switch (context->state)
      {
        case QUIT:
        {
          dprintf(("", "logout_FSM: QUIT\n"));
          logout_FSM_QUIT(context);
          break;
        }
        case QUIT_RESPONSE:
        {
          dprintf(("", "logout_FSM: QUIT_RESPONSE\n"));
          logout_FSM_QUIT_RESPONSE(context);
          break;
        }
        default:
        {
          dprintf(("", "logout_FSM: INTERNAL ERROR\n"));
          error = ERROR(INTERNALERR);
          context->end = TRUE;
          break;
        }
      } /* end switch */
    } while ((!expired(context->t_slice)) && (!context->end) && (!context->exit));
  } /* endif */
        
  if (!error)
  {
    if (context->end)
    {
      process1.disconnect.flags = 0;
      process1.disconnect.error = context->error;
      process1.disconnect.errno = context->errno;
      notify_client(&(process1.disconnect));
      
      free(context);
      context = 0;
    }
    else if (!context->exit)
      error = set_callback(/*CB_CALLER_FSM, EVENT_NONE, */logout_CBhandler, context);
    else
      context->exit = FALSE;
  }
  
  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
extern _kernel_oserror *logout_CBhandler(_kernel_swi_regs *r, void *pw, void *data)
{
/*  _kernel_oserror *error = 0;
  
  if (data)
  {
    CB_DATA *cb_data = (CB_DATA*)data;
    logout_context *c = (logout_context*)cb_data->data;
    
    free(cb_data);
    error = logout_FSM(c);
  }
  else
    error = ERROR(INTERNALERR);
  
  return error;*/
  return logout_FSM(data);
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void logout_FSM_QUIT(logout_context *c)
{
  c->error = command_response(c->sock,
                              QUITCMD,
                              4,
                              &(c->response),
                              c->quit_timeout,
                              &(c->errno),
                              &(c->error),
                              (function)&logout_FSM,
                              c);
  if (!c->error)
  {
    c->state = QUIT_RESPONSE;
    c->exit = TRUE;
  }
  else
    c->end = TRUE;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void logout_FSM_QUIT_RESPONSE(logout_context *c)
{
  destroy_response(&(c->response));
  if (c->sock >=0)
  {
    shutdown(c->sock,2);
    socketclose(c->sock);
  }
  c->sock = -1;
  c->end = TRUE;
}


