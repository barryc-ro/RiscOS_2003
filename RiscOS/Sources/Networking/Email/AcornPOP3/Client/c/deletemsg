/*	Project Post (769) - AcornPOP3
	Acorn Risc Technologies
	Copyright © 1996. All Rights Reserved.

	FILE:		deletesmg.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.08 for RISC OS

	OVERVIEW
	========
	Source file for implementation of function to perform POP3 DELE to 
	delete a message from a server

	HISTORY
	=======
	22/02/97	0.01	RDW	Initial version
	11/07/97	0.02	RDW	Tidy up when moving to correct build environment
	14/07/97	0.03	RDW	Tidy up
	21/10/97	0.04	RDW	Changed to new non-blocking
	07/12/97	0.05	RDW	Fixed notify_client call at end of FSM function,
					wrong data address given as parameter (typo from
					cut and paste!)
	12/03/98	0.06	RDW	Elib_priv.h taken from EmailLib now
	18/03/98	0.07	RDW	Tidy up delete_message_CBhandler() unused
					parameters
	25/03/98	0.08	RDW	#include debuglib corrected
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>


/* ************************************************************************** */
/*                                                                            */
/* Include header files - External Libraries                                  */
/*                                                                            */
/* ************************************************************************** */
#include "DebugLib/debuglib.h"
#include "Email/EmailLib/Elib_priv.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "common.h"
#include "deletemsg.h"
#include "pop_utils.h"
#include "cmdresp.h"
#include "errortable.h"


/* ************************************************************************** */
/*                                                                            */
/* External globals                                                           */
/*                                                                            */
/* ************************************************************************** */
extern process_details process1;						// This client's process details
extern errno;									// From Internet


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef enum
{
  DELE,
  DELE_RESPONSE
} STATES;

typedef struct
{
  time_t              t_slice;
  _kernel_oserror    *error;
  int                 errno;
  int                 dele_timeout;
  int                 sock;							// socket descriptor
  char               *response;							// response line from server
  unsigned int        message_id;
  STATES              state;
  BOOL                end;
  BOOL                exit;
} delmsg_context;


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */
static const int TIME_SLICE    = 50;						/* Time slice to use                                                   */

/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */
static void delete_message_FSM_DELE(delmsg_context *c);
static void delete_message_FSM_DELE_RESPONSE(delmsg_context *c);
extern _kernel_oserror *delete_message_FSM(delmsg_context *context);
static delmsg_context *new_delmsg_context(void);


/* ************************************************************************** */
/*                                                                            */
/* Functions                                                                  */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*
   FUNCTION:       delete_message
   DESCRIPTION:    Function to delete a message from server connection
   DEPENDENCIES:   external global	errortable	errortable.h
   DEPENDED ON BY: function		handle_swi_AcornPOP3_DeleteMessage	swihndlers.c
   		   function		handle_swi_AcornPOP3_GetMessage		swihndlers.c
   INPUT PARAMS:   int			message_id	message id to delete
   		   int			timeout_DELE	timeout UNUSED
   OUTPUT PARAMS:  int*			internet_err	Internet errno
   RETURN VALUE:   			NULL		if handled successfully,
   							else ptr to error block
   CONSTANTS:      NONE
   VARIABLES:      _kernel_oserror*	error		result to return
   		   int			sock		socket descriptor to use
   		   char[10]		tmp		tmp string to get length of command
   		   char*		response	response string from server
 */
/* ************************************************************************** */
extern _kernel_oserror* delete_message(int  message_id,
                                       int  timeout_DELE)
{
  _kernel_oserror    *error   = 0;						/* result to return */
  delmsg_context *context = new_delmsg_context();
  
  if (context == 0)
    error = ERROR(MALLOCFAILED);
  else
  {
    context->sock = process1.socknum;
    context->dele_timeout = timeout_DELE;
    context->message_id   = message_id;
    
//    error = delete_message_FSM(context);
    error = set_callback(/*CB_CALLER_FSM, EVENT_NONE, */delete_message_CBhandler, context);
  }
  
  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static delmsg_context *new_delmsg_context(void)
{
  delmsg_context *c = malloc(sizeof(delmsg_context));
  dprintf(("", "new_getnummgs_context\n"));
  
  if (c)
  {
    memset(c, 0, sizeof(delmsg_context));
    c->sock = -1;
    c->state = DELE;
  }
  
  return c;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
extern _kernel_oserror *delete_message_FSM(delmsg_context *context)
{
  _kernel_oserror *error = 0;
  
  dprintf(("", "delete_message_FSM_FSM: context: %x\n", context));
  if (context == 0)
    error = ERROR(INTERNALERR);
    
  if (!error)
  {
    context->t_slice = clock() + TIME_SLICE;
    do
    {
      switch (context->state)
      {
        case DELE:
        {
          dprintf(("", "delete_message_FSM: DELE\n"));
          delete_message_FSM_DELE(context);
          break;
        }
        case DELE_RESPONSE:
        {
          dprintf(("", "delete_message_FSM: DELE_RESPONSE\n"));
          delete_message_FSM_DELE_RESPONSE(context);
          break;
        }
        default:
        {
          dprintf(("", "get_number_of_message_FSM: INTERNAL ERROR\n"));
          error = ERROR(INTERNALERR);
          context->end = TRUE;
          break;
        }
      } /* end switch */
    } while ((!expired(context->t_slice)) && (!context->end) && (!context->exit));
  } /* endif */
        
  if (!error)
  {
    if (context->end)
    {
      process1.deletemessage.flags = 0;
      process1.deletemessage.error = context->error;
      process1.deletemessage.errno = context->errno;
      process1.socknum = context->sock;
//      process1.pollword = &(process1.getnumofmessages);
      notify_client(&(process1.deletemessage));
      
      free(context);
      context = 0;
    }
    else if (!context->exit)
      error = set_callback(/*CB_CALLER_FSM, EVENT_NONE, */delete_message_CBhandler, context);
    else
      context->exit = FALSE;
  }
  
  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
extern _kernel_oserror *delete_message_CBhandler(_kernel_swi_regs *r, void *pw, void *data)
{
  UNUSED(r);
  UNUSED(pw);
  
  return delete_message_FSM(data);
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void delete_message_FSM_DELE(delmsg_context *c)
{
  static char tmp[45];
  
  sprintf(tmp, "DELE %u", c->message_id);
  c->error = command_response(c->sock,
                              tmp,
                              strlen(tmp),
                              &(c->response),
                              c->dele_timeout,
                              &(c->errno),
                              &(c->error),
                              (function)&delete_message_FSM,
                              c);
  if (!c->error)
  {
    c->state = DELE_RESPONSE;
    c->exit = TRUE;
  }
  else
    c->end = TRUE;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void delete_message_FSM_DELE_RESPONSE(delmsg_context *c)
{
  if (!c->error)
  {
    if (!positive_response(c->response))
      c->error = ERROR(NOSUCHMSG);
  }
  
  destroy_response(&(c->response));

  c->end = TRUE;
}
