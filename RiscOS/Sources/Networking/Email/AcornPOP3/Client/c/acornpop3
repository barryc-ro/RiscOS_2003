/*	Project Post (769) - AcornPOP3
	Acorn Risc Technologies
	Copyright © 1996. All Rights Reserved.

	FILE:		acornpop3.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.04 for RISC OS

	OVERVIEW
	========
	Source file for implementation of AcornPOP3 C function veneers to AcornPOP3
	SWIs.

	HISTORY
	=======
	22/02/97	0.01	RDW	Initial version
	11/07/97	0.02	RDW	Tidy up
	21/08/98	0.03	RDW	changed BOOL to bool and delete to
					delete_message in _AcornPOP3_GetMessage
					_AcornPOP3_RegisterWimpMsg added
					_AcornPOP3_Register changed to call this
					with 0 task_id and WimpMsg flag not set
	23/02/99	0.04	RDW	_AcornPOP3_Reset() added.
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include "kernel.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "acornpop3.h"


/* ************************************************************************** */
/*
   FUNCTION:       _AcornPOP3_Register
   DESCRIPTION:    Allows a client/caller to register with the AcornPOP3 module
   		   This is a C function wrapper to call the AcornPOP3_Register
   		   SWI.  On return from this function either a unique id
   		   number will be returned or an error if no more clients can
   		   register with the AcornPOP3 module.  The Unique ID is an
   		   address of a pollword.  Once the pollword is set to non-zero by
   		   AcornPOP3 it will point to the address of a structure
   		   holding returned data.
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regskernel.h
   		   function		_kernel_swi	kernel.h
   DEPENDED ON BY: NONE
   INPUT PARAMS:   unsigned int*	flags		flags word
   OUTPUT PARAMS:  unsigned int*	flags		flags word
   		   void**		pollword_addr	address of pollword
   RETURN VALUE:   _kernel_oserror*	NULL		if SWI handled successfully,
   							else ptr to error block
   VARIABLES:	   _kernel_oserror*	e		result to return
   		   _kernel_swi_regs	r		SWI Registers
 */
/* ************************************************************************** */
_kernel_oserror *_AcornPOP3_Register(unsigned int  *flags,
                                     void         **pollword_addr)
{
  if (flags)
  {
    *flags = *flags & (~AcornPOP3_REGISTER_WIMPMSG); /* ensure wimpmsg not set */
  }

  return _AcornPOP3_WimpRegister(flags, 0, pollword_addr);
}


/* ************************************************************************** */
/*
   FUNCTION:       _AcornPOP3_WimpRegister
   DESCRIPTION:    Same as _AcornPOP3_Register, accept this version is for
   		   registering to have WimpMessages sent when pollword is set.
   		   Wimp task id is taken as input.  Flag bit 1 must be set
   		   otherwise an error is returned.
   		   (Use AcornPOP3_REGISTER_WIMPMSG)
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regskernel.h
   		   function		_kernel_swi	kernel.h
   DEPENDED ON BY: NONE
   INPUT PARAMS:   unsigned int*	flags		flags word
   OUTPUT PARAMS:  unsigned int*	flags		flags word
   		   void**		pollword_addr	address of pollword
   RETURN VALUE:   _kernel_oserror*	NULL		if SWI handled successfully,
   							else ptr to error block
   VARIABLES:	   _kernel_oserror*	e		result to return
   		   _kernel_swi_regs	r		SWI Registers
 */
/* ************************************************************************** */
_kernel_oserror *_AcornPOP3_WimpRegister(unsigned int  *flags,
                                         int            task_id,
                                         void         **pollword_addr)
{
  _kernel_oserror *e = 0;
  _kernel_swi_regs r;

  r.r[0] = (int)*flags;
  r.r[1] = (int)task_id;

  e = _kernel_swi(AcornPOP3_Register, &r, &r);

  if (e == 0)
  {
    *flags = r.r[0];
    *pollword_addr = (void*)r.r[1];
  }

  return e;
}


/* ************************************************************************** */
/*
   FUNCTION:       _AcornPOP3_DeRegister
   DESCRIPTION:    Allows a client/caller to deregister from the AcornPOP3 module
   		   This is a C function wrapper to call the AcornPOP3_DeRegister
   		   SWI.  If successful, no error is returned and the pollword
   		   address is set to 0, otherwise an error is returned.
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regskernel.h
   		   function		_kernel_swi	kernel.h
   DEPENDED ON BY: NONE
   INPUT PARAMS:   unsigned int*	flags		flags word
   OUTPUT PARAMS:  unsigned int*	flags		flags word
   		   void**		pollword_addr	address of pollword
   RETURN VALUE:   _kernel_oserror*	NULL		if SWI handled successfully,
   							else ptr to error block
   VARIABLES:	   _kernel_oserror*	e		result to return
   		   _kernel_swi_regs	r		SWI Registers
*/
/* ************************************************************************** */
_kernel_oserror *_AcornPOP3_DeRegister(unsigned int  *flags,
                                       void         **pollword_addr)
{
  _kernel_oserror *e = 0;
  _kernel_swi_regs r;

  r.r[0] = (int)*flags;
  r.r[1] = (int)*pollword_addr;

  e = _kernel_swi(AcornPOP3_DeRegister, &r, &r);

  if (e == 0)
  {
    *flags = r.r[0];
    *pollword_addr = (void*)r.r[1];
  }

  return e;
}


/* ************************************************************************** */
/*
   FUNCTION:       _AcornPOP3_ReleaseData
   DESCRIPTION:    Function to be called once the client is finished with a
   		   block of data that AcornPOP3 has returned to it.  The data
   		   will have been returned by an operation started by one of
   		   the POP3 SWIs.
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regskernel.h
   		   function		_kernel_swi	kernel.h
   DEPENDED ON BY: NONE
   INPUT PARAMS:   unsigned int*	flags		flags word
   		   void*		pollword_addr	pollword address
   		   int			swi_num		The SWI that the data was
   		   					returned by
   		   void*		data		address of the data that
   		   					is finished with
   OUTPUT PARAMS:  unsigned int*	flags		flags word
   RETURN VALUE:   _kernel_oserror*	NULL		if SWI handled successfully,
   							else ptr to error block
   VARIABLES:	   _kernel_oserror*	e		result to return
   		   _kernel_swi_regs	r		SWI Registers
*/
/* ************************************************************************** */
_kernel_oserror *_AcornPOP3_ReleaseData(unsigned int *flags,
                                        void         *pollword_addr,
                                        int           swi_num,
                                        void         *data)
{
  _kernel_oserror *e = 0;
  _kernel_swi_regs r;

  *((int*)pollword_addr) = 0;	// set address pointed at by pollword to 0

  r.r[0] = (int)*flags;
  r.r[1] = (int)pollword_addr;
  r.r[2] = (int)swi_num;
  r.r[3] = (int)data;

  e = _kernel_swi(AcornPOP3_ReleaseData, &r, &r);

  if (e == 0)
  {
    *flags = r.r[0];
  }

  return e;
}


/* ************************************************************************** */
/*
   FUNCTION:       handle_swi_AcornPOP3_Logon
   DESCRIPTION:    Function to attempt to connect to a POP3 server and login.  The
                   name of the host to connect to is given in the hostname
                   parameter, or if its NULL the system variable
                   Inet$POP3_Default_Servername is checked for
                   a default hostname.  The port parameter gives the port number on
                   the server to connect to, if < 0 then the system variable
                   Inet$POP3_Default_Port is checked
                   for a default port number.  If port number is requested from the
                   system var. and is not found (for whatever reason) default of
                   PORT is used.  username gives the username to use and can't be
                   NULL or a NULLstring.  password gives the password string to
                   use.  If NULL, then no PASS command is sent.  If NULLstring then
                   PASS command is send with a nullstring as the password.  The
                   timeouts are used if >= 0.  If they are -ve, then the system.var
                   settings are used.  For those vars. that are not set the built
                   in values are used.
                   If call is successful, then it returns NULL and a unique ID to
                   identify the returned data with.  Otherwise, a pointer to an
                   error block is returned
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regskernel.h
   		   function		_kernel_swi	kernel.h
   DEPENDED ON BY: NONE
   INPUT PARAMS:   unsigned int*	flags		flags word
   		   void*		pollword_addr	address of pollword
   		   char[]		username	username to use
   		   char[]		password	password to use
   		   char[]		hostname	hostname to use
   		   int			port		TCP port number to use
   		   int			timeout_USER	timeout for USER command
   		   int			timeout_PASS	timeout for PASS command
   OUTPUT PARAMS:  unsigned int*	flags		flags word
   		   void**		unique_id	unique ID for this operation
   RETURN VALUE:   _kernel_oserror*	NULL		if SWI handled successfully,
   							else ptr to error block
   VARIABLES:	   _kernel_oserror*	e		result to return
   		   _kernel_swi_regs	r		SWI Registers
*/
/* ************************************************************************** */
_kernel_oserror *_AcornPOP3_Logon(unsigned int  *flags,
                                  void          *pollword_addr,
                                  char           username[],
                                  char           password[],
                                  char           hostname[],
                                  int            port,
                                  int            timeout_USER,
                                  int            timeout_PASS,
                                  void         **unique_id)
{
  _kernel_oserror *e = 0;
  _kernel_swi_regs r;

  r.r[0] = (int)*flags;
  r.r[1] = (int)pollword_addr;
  r.r[2] = (int)username;
  r.r[3] = (int)password;
  r.r[4] = (int)hostname;
  r.r[5] = (int)port;
  r.r[6] = timeout_USER;
  r.r[7] = timeout_PASS;

  e = _kernel_swi(AcornPOP3_Logon, &r, &r);

  if (e == 0)
  {
    *flags = r.r[0];
    *unique_id = (void*)r.r[1];
  }

  return e;
}


/* ************************************************************************** */
/*
   FUNCTION:       _AcornPOP3_Disconnect
   DESCRIPTION:    Function to disconnect from the POP server.  Uses POP QUIT
		   command and closes the socket.  If the call is successful,
		   then it returns NULL and a unique ID to identify the
		   returned data with.  Otherwise, a pointer to an error block
		   is returned.
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regskernel.h
   		   function		_kernel_swi	kernel.h
   DEPENDED ON BY: NONE
   INPUT PARAMS:   unsigned int*	flags		flags word
   		   void*		pollword_addr	address of pollword
   		   int			timeout_QUIT	timeout for QUIT command
   OUTPUT PARAMS:  unsigned int*	flags		flags word
   		   void**		unique_id	unique ID for this operation
   RETURN VALUE:   _kernel_oserror*	NULL		if SWI handled successfully,
   							else ptr to error block
   VARIABLES:	   _kernel_oserror*	e		result to return
   		   _kernel_swi_regs	r		SWI Registers
*/
/* ************************************************************************** */
_kernel_oserror *_AcornPOP3_Disconnect(unsigned int  *flags,
                                       void          *pollword_addr,
                                       int            timeout_QUIT,
                                       void         **unique_id)
{
  _kernel_oserror *e = 0;
  _kernel_swi_regs r;

  r.r[0] = (int)*flags;
  r.r[1] = (int)pollword_addr;
  r.r[2] = timeout_QUIT;

  e = _kernel_swi(AcornPOP3_Disconnect, &r, &r);

  if (e == 0)
  {
    *flags = r.r[0];
    *unique_id = (void*)r.r[1];
  }

  return e;
}


/* ************************************************************************** */
/*
   FUNCTION:       _AcornPOP3_Reset
   DESCRIPTION:    Function to reset the connection session to the POP server.
                   Uses POP RSET command.  If the call is successful,
		   then it returns NULL and a unique ID to identify the
		   returned data with.  Otherwise, a pointer to an error block
		   is returned.
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regskernel.h
   		   function		_kernel_swi	kernel.h
   DEPENDED ON BY: NONE
   INPUT PARAMS:   unsigned int*	flags		flags word
   		   void*		pollword_addr	address of pollword
   		   int			timeout_RSET	timeout for RSET command
   OUTPUT PARAMS:  unsigned int*	flags		flags word
   		   void**		unique_id	unique ID for this operation
   RETURN VALUE:   _kernel_oserror*	NULL		if SWI handled successfully,
   							else ptr to error block
   VARIABLES:	   _kernel_oserror*	e		result to return
   		   _kernel_swi_regs	r		SWI Registers
*/
/* ************************************************************************** */
_kernel_oserror *_AcornPOP3_Reset(unsigned int  *flags,
                                  void          *pollword_addr,
                                  int            timeout_RSET,
                                  void         **unique_id)
{
  _kernel_oserror *e = 0;
  _kernel_swi_regs r;

  r.r[0] = (int)*flags;
  r.r[1] = (int)pollword_addr;
  r.r[2] = timeout_RSET;

  e = _kernel_swi(AcornPOP3_Reset, &r, &r);

  if (e == 0)
  {
    *flags = r.r[0];
    *unique_id = (void*)r.r[1];
  }

  return e;
}


/* ************************************************************************** */
/*
   FUNCTION:       _AcornPOP3_GetNumOfMessages
   DESCRIPTION:    Function to get the number of messages for the current
		   connection.  Uses POP3 STAT command.
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regskernel.h
   		   function		_kernel_swi	kernel.h
   DEPENDED ON BY: NONE
   INPUT PARAMS:   unsigned int*	flags		flags word
   		   void*		pollword_addr	address of pollword
   		   int			timeout_STAT	timeout for STAT command
   OUTPUT PARAMS:  unsigned int*	flags		flags word
   		   void**		unique_id	unique ID for this operation
   RETURN VALUE:   _kernel_oserror*	NULL		if SWI handled successfully,
   							else ptr to error block
   VARIABLES:	   _kernel_oserror*	e		result to return
   		   _kernel_swi_regs	r		SWI Registers
*/
/* ************************************************************************** */
_kernel_oserror *_AcornPOP3_GetNumOfMessages(unsigned int  *flags,
					     void          *pollword_addr,
					     int            timeout_STAT,
					     void         **unique_id)
{
  _kernel_oserror *e = 0;
  _kernel_swi_regs r;

  r.r[0] = (int)*flags;
  r.r[1] = (int)pollword_addr;
  r.r[2] = timeout_STAT;

  e = _kernel_swi(AcornPOP3_GetNumOfMessages, &r, &r);

  if (e == 0)
  {
    *flags = r.r[0];
    *unique_id = (void*)r.r[1];
  }

  return e;
}


/* ************************************************************************** */
/*
   FUNCTION:       _AcornPOP3_GetListOfMessages
   DESCRIPTION:    Function to get a list of the messages in a users mailbox on the
		   POP server.  The list is a list of message ids with sizes for
		   each message in bytes.  The size is only a guide as the size on
		   the server may be different due differences in the EOL
		   characters, etc.   GetNumOfMessages should be used first to
		   create MSG_LIST array of correct size which should be passed in,
		   as should the number of elements in the array.  If, during the
		   time of calling GetNumOfMessages and doing this operation
		   more messages have arrived in the mailbox (or even if some have
		   strangely vanished from the mailbox) number will be set on exit
		   to the actual number of messages.
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regskernel.h
   		   function		_kernel_swi	kernel.h
   DEPENDED ON BY: NONE
   INPUT PARAMS:   unsigned int*	flags		flags word
   		   void*		pollword_addr	address of pollword
   		   MSG_LIST*		list		array of MSG_LIST structs to fill in
   		   unsigned int		num_entries	number of elements in the list array
   		   int			timeout_LIST	timeout for LIST command
   OUTPUT PARAMS:  unsigned int*	flags		flags word
   		   void**		unique_id	unique ID for this operation
   RETURN VALUE:   _kernel_oserror*	NULL		if SWI handled successfully,
   							else ptr to error block
   VARIABLES:	   _kernel_oserror*	e		result to return
   		   _kernel_swi_regs	r		SWI Registers
*/
/* ************************************************************************** */
_kernel_oserror *_AcornPOP3_GetListOfMessages(unsigned int  *flags,
                                              void          *pollword_addr,
                                              MSG_LIST      *list,
                                              unsigned int   num_entries,
                                              int            timeout_LIST,
                                              void         **unique_id)
{
  _kernel_oserror *e = 0;
  _kernel_swi_regs r;

  r.r[0] = (int)*flags;
  r.r[1] = (int)pollword_addr;
  r.r[2] = (int)list;
  r.r[3] = (int)num_entries;
  r.r[4] = (int)timeout_LIST;

  e = _kernel_swi(AcornPOP3_GetListOfMessages, &r, &r);

  if (e == 0)
  {
    *flags = r.r[0];
    *unique_id = (void*)r.r[1];
  }

  return e;
}


/* ************************************************************************** */
/*
   FUNCTION:       _AcornPOP3_GetMessage
   DESCRIPTION:    Function to get a given message from the server into file or
   		   into memory.  If size of message memory block or file free
   		   space on input is too small, then the message block will be
   		   filled up with as much of the message as possible and
   		   size set in the returned data structure through the pollword
   		   mechnanism to the actual size required.  Uses POP RETR command.
		   Set bit0 of flags for FILE, else unset for MEMORY
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regskernel.h
   		   function		_kernel_swi	kernel.h
   DEPENDED ON BY: NONE
   INPUT PARAMS:   unsigned int*	flags		flags word
   		   void*		pollword_addr	address of pollword
   		   char*		msg_data	filename or memory address
   		   					to store message data in.
   		   unsigned int		msg_size	size of memory space or
   		   					filespace
   		   unsigned int		msg_id		ID of message to get
   		   bool			delete		Delete message flag TRUE = yes
   		   int			timeout_RETR	timeout for RETR command
   OUTPUT PARAMS:  unsigned int*	flags		flags word
   		   void**		unique_id	unique ID for this operation
   RETURN VALUE:   _kernel_oserror*	NULL		if SWI handled successfully,
   							else ptr to error block
   VARIABLES:	   _kernel_oserror*	e		result to return
   		   _kernel_swi_regs	r		SWI Registers
*/
/* ************************************************************************** */
_kernel_oserror *_AcornPOP3_GetMessage(unsigned int  *flags,
                                       void          *pollword_addr,
                                       char          *msg_data,
                                       unsigned int   msg_size,
                                       unsigned int   msg_id,
                                       bool           delete_message,
                                       int            timeout_RETR,
                                       void         **unique_id)
{
  _kernel_oserror *e = 0;
  _kernel_swi_regs r;

  r.r[0] = (int)*flags;
  r.r[1] = (int)pollword_addr;
  r.r[2] = (int)msg_data;
  r.r[3] = (int)msg_size;
  r.r[4] = (int)msg_id;
  r.r[5] = (int)delete_message;
  r.r[6] = (int)timeout_RETR;

  e = _kernel_swi(AcornPOP3_GetMessage, &r, &r);

  if (e == 0)
  {
    *flags = r.r[0];
    *unique_id = (void*)r.r[1];
  }

  return e;
}


/* ************************************************************************** */
/*
   FUNCTION:       _AcornPOP3_GetXLinesOfMessage
   DESCRIPTION:    Function to get the headers and X lines of a given message's
   		   body from the server into file or into memory.  If size of
   		   message memory block or file free space on input is too small,
   		   then the message block will be filled up with as much of the
   		   message as possible and size set in the returned data structure
   		   through the pollword mechnanism to the actual size required.
   		   Uses POP TOP command. Set bit0 of flags for FILE, else unset
   		   for MEMORY.
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regskernel.h
   		   function		_kernel_swi	kernel.h
   DEPENDED ON BY: NONE
   INPUT PARAMS:   unsigned int*	flags		flags word
   		   void*		pollword_addr	address of pollword
   		   char*		msg_data	filename or memory address
   		   					to store message data in.
   		   unsigned int		msg_size	size of memory space or
   		   					filespace
   		   unsigned int		msg_id		ID of message to get
   		   unsigned int		lines		No. of lines of msg body to get
   		   int			timeout_TOP	timeout for TOP command
   OUTPUT PARAMS:  unsigned int*	flags		flags word
   		   void**		unique_id	unique ID for this operation
   RETURN VALUE:   _kernel_oserror*	NULL		if SWI handled successfully,
   							else ptr to error block
   VARIABLES:	   _kernel_oserror*	e		result to return
   		   _kernel_swi_regs	r		SWI Registers
*/
/* ************************************************************************** */
_kernel_oserror *_AcornPOP3_GetXLinesOfMessage(unsigned int  *flags,
                                               void          *pollword_addr,
                                               char          *msg_data,
                                               unsigned int   msg_size,
                                               unsigned int   msg_id,
                                               unsigned int   lines,
                                               int            timeout_TOP,
                                               void         **unique_id)
{
  _kernel_oserror *e = 0;
  _kernel_swi_regs r;

  r.r[0] = (int)*flags;
  r.r[1] = (int)pollword_addr;
  r.r[2] = (int)msg_data;
  r.r[3] = (int)msg_size;
  r.r[4] = (int)msg_id;
  r.r[5] = (int)lines;
  r.r[6] = (int)timeout_TOP;

  e = _kernel_swi(AcornPOP3_GetXLinesOfMessage, &r, &r);

  if (e == 0)
  {
    *flags = r.r[0];
    *unique_id = (void*)r.r[1];
  }

  return e;
}


/* ************************************************************************** */
/*
   FUNCTION:       _AcornPOP3_DeleteMessage
   DESCRIPTION:    Function mark the given message in the mailbox for deletion
   		   from the mailbox on the server.  Uses POP DELE command.
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regskernel.h
   		   function		_kernel_swi	kernel.h
   DEPENDED ON BY: NONE
   INPUT PARAMS:   unsigned int*	flags		flags word
   		   void*		pollword_addr	address of pollword
   		   unsigned int		msg_id		ID of message to delete
   		   int			timeout_DELE	timeout for DELE command
   OUTPUT PARAMS:  unsigned int*	flags		flags word
   		   void**		unique_id	unique ID for this operation
   RETURN VALUE:   _kernel_oserror*	NULL		if SWI handled successfully,
   							else ptr to error block
   VARIABLES:	   _kernel_oserror*	e		result to return
   		   _kernel_swi_regs	r		SWI Registers
*/
/* ************************************************************************** */
_kernel_oserror *_AcornPOP3_DeleteMessage(unsigned int  *flags,
                                          void          *pollword_addr,
                                          unsigned int   msg_id,
                                          int            timeout_DELE,
                                          void         **unique_id)
{
  _kernel_oserror *e = 0;
  _kernel_swi_regs r;

  r.r[0] = (int)*flags;
  r.r[1] = (int)pollword_addr;
  r.r[2] = (int)msg_id;
  r.r[3] = (int)timeout_DELE;

  e = _kernel_swi(AcornPOP3_DeleteMessage, &r, &r);

  if (e == 0)
  {
    *flags = r.r[0];
    *unique_id = (void*)r.r[1];
  }

  return e;
}


/* ************************************************************************** */
/*
   FUNCTION:       _AcornPOP3_GetUniqueID
   DESCRIPTION:    Function to get the unique ID string for a given message.
   		   Uses POP3 UIDL command.
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regskernel.h
   		   function		_kernel_swi	kernel.h
   DEPENDED ON BY: NONE
   INPUT PARAMS:   unsigned int*	flags		flags word
   		   void*		pollword_addr	address of pollword
   		   unsigned int		msg_id		ID of message to get UID for
   		   int			timeout_UIDL	timeout for UIDL command
   OUTPUT PARAMS:  unsigned int*	flags		flags word
   		   void**		unique_id	unique ID for this operation
   RETURN VALUE:   _kernel_oserror*	NULL		if SWI handled successfully,
   							else ptr to error block
   VARIABLES:	   _kernel_oserror*	e		result to return
   		   _kernel_swi_regs	r		SWI Registers
*/
/* ************************************************************************** */
_kernel_oserror *_AcornPOP3_GetUniqueID(unsigned int  *flags,
                                        void          *pollword_addr,
                                        unsigned int   msg_id,
                                        int            timeout_UIDL,
                                        void         **unique_id)
{
  _kernel_oserror *e = 0;
  _kernel_swi_regs r;

  r.r[0] = (int)*flags;
  r.r[1] = (int)pollword_addr;
  r.r[2] = (int)msg_id;
  r.r[3] = timeout_UIDL;

  e = _kernel_swi(AcornPOP3_GetUniqueID, &r, &r);

  if (e == 0)
  {
    *flags = r.r[0];
    *unique_id = (void*)r.r[1];
  }

  return e;
}


/* ************************************************************************** */
/*
   FUNCTION:       _AcornPOP3_GetListOfUniqueIDs
   DESCRIPTION:    Function to get a list of the unique IDs for the messages in
   		   a users mailbox on the POP server.  The list is a list of
   		   message ids with unique IDs for each message.  GetNumOfMessages
   		   should be used first to create a UID_MSG_LIST array of correct
   		   size which should be passed in, as should the number of
   		   elements in the array.  If, during the time of calling
   		   GetNumOfMessages and doing this operation more messages have
   		   arrived in the mailbox (or even if some have strangely
   		   vanished from the mailbox) number will be set on exit
		   to the actual number of messages.
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regskernel.h
   		   function		_kernel_swi	kernel.h
   DEPENDED ON BY: NONE
   INPUT PARAMS:   unsigned int*	flags		flags word
   		   void*		pollword_addr	address of pollword
   		   MSG_LIST*		list		array of MSG_LIST structs to fill in
   		   unsigned int		num_entries	number of elements in the list array
   		   int			timeout_LIST	timeout for LIST command
   OUTPUT PARAMS:  unsigned int*	flags		flags word
   		   void**		unique_id	unique ID for this operation
   RETURN VALUE:   _kernel_oserror*	NULL		if SWI handled successfully,
   							else ptr to error block
   VARIABLES:	   _kernel_oserror*	e		result to return
   		   _kernel_swi_regs	r		SWI Registers
*/
/* ************************************************************************** */
_kernel_oserror *_AcornPOP3_GetListOfUniqueIDs(unsigned int  *flags,
                                               void          *pollword_addr,
                                               UID_MSG_LIST  *list,
                                               unsigned int   num_entries,
                                               int            timeout_UIDL,
                                               void         **unique_id)
{
  _kernel_oserror *e = 0;
  _kernel_swi_regs r;

  r.r[0] = (int)*flags;
  r.r[1] = (int)pollword_addr;
  r.r[2] = (int)list;
  r.r[3] = (int)num_entries;
  r.r[4] = (int)timeout_UIDL;

  e = _kernel_swi(AcornPOP3_GetListOfUniqueIDs, &r, &r);

  if (e == 0)
  {
    *flags = r.r[0];
    *unique_id = (void*)r.r[1];
  }

  return e;
}


/* ************************************************************************** */
/*
   FUNCTION:       _AcornPOP3_GetReturnedData
   DESCRIPTION:    Function to get typecast the pollword contents to the
   		   Acorn_returned_data type.  SHOULD NOT BE CALLED DIRECTLY!
   		   Instead, call one of the Macros below for the correct type
   		   of data.
   DEPENDENCIES:   NONE
   DEPENDED ON BY: NONE
   INPUT PARAMS:   void*		pollword_addr	address of pollword
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   AcornPOP3_returned_data*		0 or address of data
   VARIABLES:	   int*			address		address to typecast with
*/
/* ************************************************************************** */
AcornPOP3_returned_data *_AcornPOP3_GetReturnedData(void *pollword_addr)
{
  int *address = (int*)pollword_addr;

  if (address == 0)
    return 0;
  if (*address == 0)
    return 0;
  else
    return (AcornPOP3_returned_data*)*address;
}


