/*	Project Post (769) - AcornPOP3
	Acorn Risc Technologies
	Copyright © 1996. All Rights Reserved.

	FILE:		getmsgfile.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.09 for RISC OS

	OVERVIEW
	========
	Source file for implementation of function to perform POP3 RETR to get
	a message from a server into a file
	
	HISTORY
	=======
	22/02/97	0.01	RDW	Initial version
	03/04/97	0.02	RDW	Space/size check removed from while loop so it isn't terminated because of free space
					exhaustition.  Instead, if{} block added around fwrite statement to prevent output when
					over free space. no_space added to allow error code 18 to be returned in this case.
	04/07/97	0.04	RDW	BOOL TOP and num_lines parameters added to get_message_to_file to merge RETR and TOP code
	08/07/97	0.05	RDW	if (!error) check added round get_line_from_server so that it doesn't clear a previous error
					Error 21 now returned if fopen on filename fails
	11/07/97	0.06	RDW	Tidy up when moving to correct build environment
	14/07/97	0.07	RDW	Tidy up
	21/10/97	0.08	RDW	Changed to new non-blocking
	13/11/97	0.09	RDW	STORE_DATA state now detects and removes '..' RFC822 transparency
					as old method of having it get.c ment that a line "..CRLF" was seen
					here as ".CRLF" ie. end of data!  Which it wasn't
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - External Libraries                                  */
/*                                                                            */
/* ************************************************************************** */
#include "DebugLib.h"
#include "Elib_priv.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "common.h"
#include "getmsgfile.h"
#include "get.h"
#include "send.h"
#include "cmdresp.h"
#include "pop_utils.h"
#include "errortable.h"


/* ************************************************************************** */
/*                                                                            */
/* External globals                                                           */
/*                                                                            */
/* ************************************************************************** */
extern process_details process1;						// This client's process details
extern errno;									// From Internet


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */
static const int SLEEP_TIME    = 1;
static const int TIME_SLICE    = 50;						/* Time slice to use                                                   */


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef enum
{
  RETR,
  RETR_RESPONSE,
  GET_DATA,
  STORE_DATA,
  DELETE,
  DELETE_RESPONSE,
  COMPLETED,
  ERROR
} STATES;									/* GetListofMessages FSM states                        */

typedef struct
{
  time_t              t_slice;							/* timeslice, time to exit FSM by for re-entracy later */
  _kernel_oserror    *error;							/* OS error                                            */
  int                 errno;							/* Internet errno copy                                 */
  BOOL                end;							/* has the FSM ended?                                  */
  BOOL                exit;							/* exit FSM without setting callback                   */
  int                 sock;							/* socket descriptor                                   */
  char               *response;							/* response line from server                           */
  BOOL                del;
  BOOL                TOP;
  BOOL                file;
  FILE               *fd;
  char               *filename;
  unsigned int        space;
  unsigned int        msg_id;
  unsigned int        num_lines;
  BOOL                no_space;
  STATES              state;							/* GetListOfMessages FSM state                         */
  int                 retr_timeout;						/* timeout for waiting for server response to LIST cmd */
  unsigned int        pos;							/* position in list                                    */
} getmsgfile_context;


/* ************************************************************************** */
/*                                                                            */
/* Function prototypes - private to this file                                 */
/*                                                                            */
/* ************************************************************************** */
static _kernel_oserror *set_filetype(const char *fullname, int filetype);
static getmsgfile_context *new_getmsgfile_context(void);
static void get_message_to_file_FSM_RETR(getmsgfile_context *c);
static void get_message_to_file_FSM_RETR_RESPONSE(getmsgfile_context *c);
static void get_message_to_file_FSM_GET_DATA(getmsgfile_context *c);
static void get_message_to_file_FSM_STORE_DATA(getmsgfile_context *c);
static void get_message_to_file_FSM_DELETE(getmsgfile_context *c);
static void get_message_to_file_FSM_DELETE_RESPONSE(getmsgfile_context *c);
static void get_message_to_file_FSM_COMPLETED(getmsgfile_context *c);
static void get_message_to_file_FSM_ERROR(getmsgfile_context *c);
static _kernel_oserror *get_message_to_file_FSM(getmsgfile_context *context);
static _kernel_oserror* get_message_CAhandler(_kernel_swi_regs *r, void *pw, void *data);
static _kernel_oserror *get_message_CBhandler(_kernel_swi_regs *r, void *pw, void *data);


/* ************************************************************************** */
/*                                                                            */
/* Functions                                                                  */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static getmsgfile_context *new_getmsgfile_context(void)
{
  getmsgfile_context *c = malloc(sizeof(getmsgfile_context));
  dprintf(("", "new_getmsgfile_context\n"));
  
  if (c)
  {
    memset(c, 0, sizeof(getmsgfile_context));
    c->sock = -1;
    c->state = RETR;
  }
  
  return c;
}


/* ************************************************************************** */
/*
   FUNCTION:       get_message_to_file
   DESCRIPTION:    Function to a message from server connection and store it in
   		   the given file.
   DEPENDENCIES:      			errortable	errortable.h
   DEPENDED ON BY: function		handle_swi_AcornPOP3_GetMessage		swihndlers.c
   		   function		handle_swi_AcornPOP3_GetXLinesOfMessage	swihndlers.c
   INPUT PARAMS:   BOOL			top		Use TOP command instead of RETR?
   		   char*		filename	Filename of file to store message in
   		   unsigned int*	space		free space available for the file
   		   unsigned int		msg_id		ID of message to get
   		   unsigned int		num_lines	Number of lines of message body to get(Only if top=FALSE)
   		   int			timeout		timeout for command (RETR or TOP) (UNUSED)
   		   unsigned int*	space		free space available for the message data
   OUTPUT PARAMS:  unsigned int*	space		actual size of message data
   		   int*			internet_error	Internet errno
   RETURN VALUE:   			NULL		if handled successfully,
   							else ptr to error block
   CONSTANTS:      NONE
   VARIABLES:      _kernel_oserror*	error		result to return
   		   int			sock		socket descriptor to use
   		   char*		response	response line from server
   		   FILE*		fd		File handle
   		   char[40]		tmp		tmp string to get command length calculated
   		   BOOL			no_space	no free space left?
   		   BOOL			end		end of message reached?
   		   int			pos		position in message
   		   int			actual_size	actual length of server response
   		   int			size		size(amount) of server response data that was actually copied into destination file
 */
/* ************************************************************************** */
extern _kernel_oserror* get_message_to_file(BOOL          del,
                                            BOOL          TOP,
                                            BOOL          file,
                                            char         *filename,
                                            unsigned int  space,
                                            unsigned int  msg_id,
                                            unsigned int  num_lines,
                                            int           timeout)
{
  _kernel_oserror    *error           = 0;					/* result to return                                              */
  getmsgfile_context *context = new_getmsgfile_context();			/* create a new context for this operation                       */
  
  if (context == 0)								/* if failed to create new context, return error                 */
    error = ERROR(MALLOCFAILED);
  else										/* else make copies of the given parameters                      */
  {
    if (file)
      context->filename = (char*)malloc(strlen(filename)+1);
    
    if ((file) && (context->filename == 0))
      error = ERROR(MALLOCFAILED);
    else
    {
      context->TOP          = TOP;
      if (file)
        strcpy(context->filename, filename);
      else
        context->filename   = filename;
      context->del          = del;
      context->file         = file;
      context->space        = space;
      context->msg_id       = msg_id;
      context->num_lines    = num_lines;
      context->retr_timeout = timeout;
      context->sock         = process1.socknum;
      error = CB_get_message_to_file(context);
    }
  }
  
  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static _kernel_oserror *get_message_to_file_FSM(getmsgfile_context *context)
{
  _kernel_oserror *error = 0;
  
  dprintf(("", "get_message_to_file_FSM: context: %x\n", context));
  if (context == 0)								/* make sure we've been given a context */
    error = ERROR(INTERNALERR);
  
  if (!error)
  {
    context->t_slice = clock() + TIME_SLICE;
    do										/* FSM do-while loop                    */
    {
      if (context->error)
        context->state = ERROR;
      switch (context->state)
      {
        case RETR:
          dprintf(("", "get_message: RETR\n"));
          get_message_to_file_FSM_RETR(context);
          break;
        case RETR_RESPONSE:
          dprintf(("", "get_message: RETR_RESPONSE\n"));
          get_message_to_file_FSM_RETR_RESPONSE(context);
          break;
        case GET_DATA:
          dprintf(("", "get_message: GET_DATA\n"));
          get_message_to_file_FSM_GET_DATA(context);
          break;
        case STORE_DATA:
          dprintf(("", "get_message: STORE_DATA\n"));
          get_message_to_file_FSM_STORE_DATA(context);
          break;
        case ERROR:
          dprintf(("", "get_message: ERROR\n"));
          get_message_to_file_FSM_ERROR(context);
          break;
        case DELETE:
          dprintf(("", "get_message: COMPLETED\n"));
          get_message_to_file_FSM_DELETE(context);
          break;
        case DELETE_RESPONSE:
          dprintf(("", "get_message: COMPLETED\n"));
          get_message_to_file_FSM_DELETE_RESPONSE(context);
          break;
        case COMPLETED:
          dprintf(("", "get_message: COMPLETED\n"));
          get_message_to_file_FSM_COMPLETED(context);
          break;
        default:
          dprintf(("", "get_message: INTERNAL ERROR\n"));
          error = ERROR(INTERNALERR);
          context->end = TRUE;
          break;
      } /* end switch */
    } while ((!expired(context->t_slice)) && (!context->end) && (!context->exit));
  } /* endif */
  
  if (!error)
  {
    if (context->end)								/* if end of the FSM                          */
    {
      if (context->TOP)
      {
//        process1.pollword = &(process1.getxlinesofmessage);			/* tell caller that data is ready for reading */
        notify_client(&(process1.getxlinesofmessage));
      }
      else
      {
//        process1.pollword = &(process1.getmessage);
        notify_client(&(process1.getmessage));
      }
      if ((context->file) && (context->filename))
        free(context->filename);
      free(context);								/* destroy the context                        */
    }
    else if (!context->exit)							/* else, if not told to exit FSM, then        */
    {
      error = CB_get_message_to_file(context);					/* set a callback to re-enter the FSM later   */
    }
    else									/* else we were told to exit the FSM as it    */
      context->exit = FALSE;							/* will be called back by anothe event        */
  }
  
  return error;
}


extern _kernel_oserror* CA_get_message_to_file(void *data)
{
  return callx_add_callafter(SLEEP_TIME, &get_message_CAhandler, data);
}


extern _kernel_oserror* CB_get_message_to_file(void *data)
{
  return callx_add_callback(&get_message_CBhandler, data);
}

  
static _kernel_oserror* get_message_CAhandler(_kernel_swi_regs *r, void *pw, void *data)
{
  dprintf(("", "ENTERED: get_line_CAhandler\n"));
  return callx_add_callback(&get_message_CBhandler, data);
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static _kernel_oserror *get_message_CBhandler(_kernel_swi_regs *r, void *pw, void *data)
{
  return get_message_to_file_FSM(data);
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void get_message_to_file_FSM_RETR(getmsgfile_context *c)
{
  static char tmp[45];
  
  if (c->file)
  {
    c->fd = fopen(c->filename, "wb");						// Open the file in binary mode for writing
    
    if (c->fd == 0)									// if file didn't open, then
    {
      c->error = ERROR(WRITEFAIL);							// error "Failed to open file"
      c->state = ERROR;
    }
  }

  if (!c->error)
  {
    if (c->TOP)									// If TOP command to be used then
      sprintf(tmp, "TOP %u %u", c->msg_id, c->num_lines);			// put message ID and number of lines into a string
    else									// else
      sprintf(tmp, "RETR %u", c->msg_id);					// just do message id
      
    c->error = command_response(c->sock,
                                tmp,
                                strlen(tmp),
                                &(c->response),
                                c->retr_timeout,
                                &(c->errno),
                                &(c->error),
                                (function)&get_message_to_file_FSM,
                                c);
  }
  
  if (!c->error)
  {
    c->state = RETR_RESPONSE;
    c->exit = TRUE;
  }
  else
    c->state = ERROR;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void get_message_to_file_FSM_RETR_RESPONSE(getmsgfile_context *c)
{
  if (!positive_response(c->response))
    c->error = ERROR(FAILED);
  
  destroy_response(&(c->response));
  if (c->error)
    c->state = ERROR;
  else
    c->state = GET_DATA;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void get_message_to_file_FSM_GET_DATA(getmsgfile_context *c)
{
  c->error = get_line_from_server(c->sock,
                                  &(c->response),
                                  c->retr_timeout,
                                  &(c->errno),
                                  &(c->error),
                                  (function)&get_message_to_file_FSM,
                                  c);
  if (c->error)
    c->state = ERROR;
  else
  {
    c->exit = TRUE;
    c->state = STORE_DATA;
  }
}

  
/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void get_message_to_file_FSM_STORE_DATA(getmsgfile_context *c)
{
  if (c->response)
  {
    int actual_size = strlen(c->response);					// get actual length of the response string
    int size = actual_size;							// set size to actual size
    int rc = 0;									// clear return code

    int offset = 0;

    dprintf(("", "c->response: '%s'\nactual_size: %d\nsize: %d\n", c->response, actual_size, size));

    if (strncmp(c->response, "..", 2) == 0)
    {
      offset++;
      actual_size--;
      size--;
    }

    dprintf(("", "c->response: '%s'\nactual_size: %d\nsize: %d\n", c->response, actual_size, size));
    
    if (strncmp(c->response, ".\r\n", 3) == 0)					/* is this the end of the list? */
    {
      if (c->del)
        c->state = DELETE;
      else
        c->state = COMPLETED;
    }
    else if (c->pos < c->space)
    {
      if (c->pos+size > c->space)						// If size of this chunk is greater than space
        size = c->space - c->pos;						// set size to only write up to space avail. (no NULL termination though!)
      if (!c->no_space)
      {
        if (c->file)
          rc = fwrite(c->response+offset, 1, size, c->fd);			// If YES, then output it
        else
        {
          strncpy(c->filename, c->response+offset, size);
          rc = size;
          c->filename += size;
        }
      }
      if (rc < 0)								// If rc < 0 then write failed, so
      {
        c->no_space = TRUE;							// set no_space flag as true so we don't try to write out any more to the file
        c->error = ERROR(WRITEFAIL);						// set the error "Failed"
      }
      else									// else, write succeeded so
        c->pos += actual_size;							// increment position by the actual size of the data received
      c->state = GET_DATA;
    }
    else									// Else, we didn't have space so
    {
      c->pos += actual_size;							// Keep count of actual size needed to return to caller
      c->no_space = TRUE;							// set no_space flag to True
      c->state = GET_DATA;
    }
  }
  destroy_response(&(c->response));						/* deallocate response */
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void get_message_to_file_FSM_DELETE(getmsgfile_context *c)
{
  static char tmp[45];

  destroy_response(&(c->response));
  
  sprintf(tmp, "DELE %u", c->msg_id);
  c->error = command_response(c->sock,
                              tmp,
                              strlen(tmp),
                              &(c->response),
                              c->retr_timeout,
                              &(c->errno),
                              &(c->error),
                              (function)&get_message_to_file_FSM,
                              c);
  if (!c->error)
  {
    c->state = DELETE_RESPONSE;
    c->exit = TRUE;
  }
  else
    c->state = ERROR;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void get_message_to_file_FSM_DELETE_RESPONSE(getmsgfile_context *c)
{
  if (!positive_response(c->response))
  {
    c->error = ERROR(NOSUCHMSG);
    c->state = ERROR;
  }
  else
    c->state = COMPLETED;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void get_message_to_file_FSM_COMPLETED(getmsgfile_context *c)
{
  if (c->no_space)
    c->error = ERROR(NOSPACE);
  c->space = c->pos;
  if (c->fd)
  {
    fclose(c->fd);
    set_filetype(c->filename, 0xfff);						// set file to type text
  }
  destroy_response(&(c->response));
  if (c->TOP)
  {
    process1.getxlinesofmessage.flags = 0;
    process1.getxlinesofmessage.error = 0;
    process1.getxlinesofmessage.errno = 0;
    process1.getxlinesofmessage.num_lines = c->num_lines;
    process1.getxlinesofmessage.message_size = c->space;
  }
  else
  {
    process1.getmessage.flags = 0;
    process1.getmessage.error = 0;
    process1.getmessage.errno = 0;
    process1.getmessage.message_size = c->space;
  }
  
  c->end = TRUE;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void get_message_to_file_FSM_ERROR(getmsgfile_context *c)
{
  if (c->no_space)
    c->error = ERROR(NOSPACE);
  c->space = c->pos;
  if (c->fd)
  {
    fclose(c->fd);
    set_filetype(c->filename, 0xfff);						// set file to type text
  }
  destroy_response(&(c->response));
    
  if (c->TOP)
  {
    process1.getxlinesofmessage.flags = 0;
    process1.getxlinesofmessage.error = c->error;
    process1.getxlinesofmessage.errno = c->errno;
    process1.getxlinesofmessage.num_lines = c->num_lines;
  }
  else
  {
    process1.getmessage.flags = 0;
    process1.getmessage.error = c->error;
    process1.getmessage.errno = c->errno;
  }
  
  c->end = TRUE;
}


/* ************************************************************************** */
/*
   FUNCTION:       set_filetype
   DESCRIPTION:    Function to set a given file with the given RISC OS type
   DEPENDENCIES:   type			_kernel_oserror	kernel.h
   		   type			_kernel_swi_regs	kernel.h
   		   function		_kernel_swi		kernel.h
   		   constant		OS_File			swis.h
   DEPENDED ON BY: function		get_message_to_file	getmsgfile.c
   INPUT PARAMS:   const char*		fullname		Full filename of file(includes path)
   		   int			filetype		filetype value to set file to
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   			NULL		if handled successfully,
   							else ptr to error block
   CONSTANTS:      NONE
   VARIABLES:      _kernel_oserror*	error		result to return
   		   _kernel_swi_regs	r		SWI registers
 */
/* ************************************************************************** */
static _kernel_oserror *set_filetype(const char *fullname, int filetype)
{
  _kernel_oserror *error;
  _kernel_swi_regs r;

  r.r[0] = 18;									// set filetype (and date/time stamp if not set already)
  r.r[1] = (int)fullname;
  r.r[2] = filetype;

  error = _kernel_swi(OS_File, &r, &r);

  return(error);
}


