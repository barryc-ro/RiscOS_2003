/*	Project Post (769) - AcornPOP3
	Acorn Risc Technologies
	Copyright © 1996. All Rights Reserved.

	FILE:		getlistmsg.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.09 for RISC OS

	OVERVIEW
	========
	Source file for implementation of function to perform POP3 STAT to get
	the number of messages and total size from a server

	HISTORY
	=======
	21/02/97	0.01	RDW	Initial version
	11/07/97	0.02	RDW	Tidy up when moving to correct build environment
	14/07/97	0.03	RDW	Tidy up
	01/10/97	0.04	RDW	Fix so that if list on server is greater than
					the space available we continue to d/load
					and through away these 'extra' list nodes.
					Return the actual number of nodes in the list
					we got from the server.
	20/10/97	0.05	RDW	Changed to new non-blocking
	12/03/98	0.06	RDW	Elib_priv.h taken from EmailLib now
	18/03/98	0.07	RDW	get_list_of_messages_CBhandler unused
					parameters tidied up
	25/03/98	0.08	RDW	#include debuglib corrected
	03/06/98	0.09	RDW	Re-entracy changes as per cmdresp.c 0.05
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>


/* ************************************************************************** */
/*                                                                            */
/* Include header files - External Libraries                                  */
/*                                                                            */
/* ************************************************************************** */
#include "DebugLib/debuglib.h"
#include "Email/EmailLib/Elib_priv.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "common.h"
#include "getlistmsg.h"
#include "get.h"
#include "send.h"
#include "cmdresp.h"
#include "pop_utils.h"
#include "errortable.h"


/* ************************************************************************** */
/*                                                                            */
/* External globals                                                           */
/*                                                                            */
/* ************************************************************************** */
extern process_details process1;						// This client's process details
extern errno;									// From Internet


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */
static const int SLEEP_TIME    = 1;
static const int TIME_SLICE    = 50;						/* Time slice to use                                                   */
static char LISTCMD[] = "LIST";


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef enum
{
  LIST,
  LIST_RESPONSE,
  GET_LINE,
  STORE_LINE,
  COMPLETED,
  ERROR
} STATES;									/* GetListofMessages FSM states                        */

typedef struct
{
  BOOL                in_FSM;							/* Thread currently executing in FSM                   */
  BOOL                pending_CB;						/* There is a CallBack/re-entrancy into the FSM pending*/
  BOOL                need_CB;							/* There needs to be a CallBack set to re-enter the FSM*/
  time_t              t_slice;							/* timeslice, time to exit FSM by for re-entracy later */
  _kernel_oserror    *error;							/* OS error                                            */
  int                 errno;							/* Internet errno copy                                 */
  BOOL                end;							/* has the FSM ended?                                  */
  BOOL                exit;							/* exit FSM without setting callback                   */
  MSG_LIST           *list;							/* address to store list at                            */
  unsigned int        num_entries;						/* address to store num of list elements at            */
  int                 sock;							/* socket descriptor                                   */
  char               *response;							/* response line from server                           */
  STATES              state;							/* GetListOfMessages FSM state                         */
  int                 list_timeout;						/* timeout for waiting for server response to LIST cmd */
  unsigned int        pos;							/* position in list                                    */
} getlistofmsgs_context;


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */
static getlistofmsgs_context *new_getlistofmsgs_context(void);
static void get_list_of_messages_FSM_LIST(getlistofmsgs_context *c);
static void get_list_of_messages_FSM_LIST_RESPONSE(getlistofmsgs_context *c);
static void get_list_of_messages_FSM_GET_LINE(getlistofmsgs_context *c);
static void get_list_of_messages_FSM_STORE_LINE(getlistofmsgs_context *c);
static void get_list_of_messages_FSM_COMPLETED(getlistofmsgs_context *c);
static void get_list_of_messages_FSM_ERROR(getlistofmsgs_context *c);
extern _kernel_oserror *get_list_of_messages_FSM(getlistofmsgs_context *context);
static _kernel_oserror* get_list_of_messages_CBhandler(_kernel_swi_regs *r, void *pw, void *data);
static _kernel_oserror* get_list_of_messages_CAhandler(_kernel_swi_regs *r, void *pw, void *data);
static _kernel_oserror* CA_get_list_of_messages(void *data);


/* ************************************************************************** */
/*                                                                            */
/* Functions                                                                  */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   FUNCTION:       getlistmsg
   DESCRIPTION:    Function to get list of messages with their IDs and SIZE
   		   from server connection
   DEPENDENCIES:      			errortable	errortable.h
   DEPENDED ON BY: function		handle_swi_AcornPOP3_GetListOfMessages	swihndlers.c
   INPUT PARAMS:   void*		data		memory area to write into with list data
   		   unsigned int*	num_entries	number of MSG_LIST structs there is space for in data area
   		   int			timeout_LIST	timeout for LIST (UNUSED)
   OUTPUT PARAMS:  unsigned int*	num_entries	number of actual entries read into data area
   		   int*			internet_error	Internet errno
   RETURN VALUE:   			NULL		if handled successfully,
   							else ptr to error block
   CONSTANTS:      NONE
   VARIABLES:      _kernel_oserror*	error		result to return
   		   int			sock		socket descriptor to use
   		   char*		response	response string from server
   		   BOOL			end		end of list reached?
   		   MSG_LIST*		list		typecast to data address in memory
   		   unsigned int		pos		position in array of MSG_LISTs
   		   int			rc		return code from sscanf
 */
/* ************************************************************************** */
extern _kernel_oserror* get_list_of_messages(void         *data,
                                             unsigned int  num_entries,
                                             int           timeout_LIST)
{
  _kernel_oserror    *error           = 0;					/* result to return                                              */
  getlistofmsgs_context *context = new_getlistofmsgs_context();			/* create a new logon context for this operation                 */
  
  if (context == 0)								/* if failed to create new context, return error                 */
    error = ERROR(MALLOCFAILED);
  else										/* else make copies of the given parameters                      */
  {
    context->list         = (MSG_LIST*)data;
    context->num_entries  = num_entries;
    context->list_timeout = timeout_LIST;
    context->sock         = process1.socknum;
    process1.state        = PROCESSING;						/* make sure main state is IDLE so event handler doesn't do anything */
    error = CB_get_list_of_messages(context); 
  }
  
  return error;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static getlistofmsgs_context *new_getlistofmsgs_context(void)
{
  getlistofmsgs_context *c = malloc(sizeof(getlistofmsgs_context));
  dprintf(("", "new_getlistofmsgs_context\n"));
  
  if (c)
  {
    memset(c, 0, sizeof(getlistofmsgs_context));
    c->sock = -1;
    c->state = LIST;
  }
  
  return c;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
extern _kernel_oserror *get_list_of_messages_FSM(getlistofmsgs_context *context)
{
  _kernel_oserror *error = 0;
  
  dprintf(("", "get_list_of_messages_FSM: context: %x\n", context));
  if (context == 0)								/* make sure we've been given a context */
    error = ERROR(INTERNALERR);
  
  if (!error)
  {
    context->t_slice = clock() + TIME_SLICE;
    context->exit = FALSE;
    do										/* FSM do-while loop                    */
    {
      if (context->error)
        context->state = ERROR;
      switch (context->state)
      {
        case LIST:
          dprintf(("", "get_list_of_messages: LIST\n"));
          get_list_of_messages_FSM_LIST(context);
          break;
        case LIST_RESPONSE:
          dprintf(("", "get_list_of_messages: LIST_RESPONSE\n"));
          get_list_of_messages_FSM_LIST_RESPONSE(context);
          break;
        case GET_LINE:
          dprintf(("", "get_list_of_messages: GET_LINE\n"));
          get_list_of_messages_FSM_GET_LINE(context);
          break;
        case STORE_LINE:
          dprintf(("", "get_list_of_messages: STORE_LINE\n"));
          get_list_of_messages_FSM_STORE_LINE(context);
          break;
        case ERROR:
          dprintf(("", "get_list_of_messages: ERROR\n"));
          get_list_of_messages_FSM_ERROR(context);
          break;
        case COMPLETED:
          dprintf(("", "get_list_of_messages: COMPLETED\n"));
          get_list_of_messages_FSM_COMPLETED(context);
          break;
        default:
          dprintf(("", "get_list_of_messages: INTERNAL ERROR\n"));
          error = ERROR(INTERNALERR);
          context->end = TRUE;
          break;
      } /* end switch */
    } while ((!expired(context->t_slice)) && (!context->end) && (!context->exit));
  } /* endif */
  
  if (!error)
  {
    int state = pop_irqs_off();						/* CRITICAL SECTION start, turn off interrupts */
    context->in_FSM = FALSE;							/* Clear the in_FSM flag as we are about to return */
    if (context->end)								/* If this is the end of the FSM execution, then */
    {
      process1.state = PROCESSING;						/* Ensure main state is IDLE                  */
      callx_remove_callafter(&get_list_of_messages_CAhandler, context);		/* Ensure any pending callafter is removed    */
      callx_remove_callback(&get_list_of_messages_CBhandler, context);		/* Ensure any pending callback is removed     */
      notify_client(&(process1.getlistofmessages));
      free(context);      							/* destroy the context                        */
      context = 0;
    }
    else if (!context->exit)							/* else, if exit not set then t_slice must have expired, so */
    {
      context->pending_CB = FALSE;						/* ensure pending flag is FALSE, it should be */
      context->need_CB = FALSE;							/* set need_CB to FALSE as we are going to set a callback */
      error = CA_get_list_of_messages(context);					/* set a callafter to re-enter the FSM later  */
    }
    else if (context->need_CB)							/* else, if need callback flag is set, then   */
    {
      context->need_CB = FALSE;							/* clear the flag and                         */
      error = CB_get_list_of_messages(context);					/* set a callback to re-enter the FSM         */
    }
    pop_restore_irqs(state);							/* End of CRITICAL SECTION, restore irqs      */
  }
  
  return error;
}


extern _kernel_oserror* CA_get_list_of_messages(void *data)
{
  if (data)
    return callx_add_callafter(SLEEP_TIME, &get_list_of_messages_CAhandler, data);
  else
    return ERROR(NULLADDR);
}


extern _kernel_oserror* CB_get_list_of_messages(void *data)
{
  _kernel_oserror *error = 0;
  int              state;
  getlistofmsgs_context *context = (getlistofmsgs_context*)data;
  
  if (context)
  {
    state = pop_irqs_off();							/* CRITICAL SECTION - Turn off interrupts */
    if (!context->pending_CB)							/* If there is not a callback already set to go off, then */
    {
      if (context->in_FSM)							/* If there is currently a thread of execution in the FSM, then */
        context->need_CB = TRUE;						/* a callback needs to be set by that thread when it terminats  */
      else									/* otherwise */
      {
        context->pending_CB = TRUE;						/* We can set a callback, so set the flag and set the callback */
        error = callx_add_callback(&get_list_of_messages_CBhandler, data);
      }										/* endif current thread executing check */
    }										/* endif pending callback check */
    pop_restore_irqs(state);							/* End of CRITICAL SECTION - Restore interrupts */
  }
  else
    error = ERROR(NULLADDR);
    
  return error;
}

  
/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
extern _kernel_oserror *get_list_of_messages_CBhandler(_kernel_swi_regs *r, void *pw, void *data)
{
  getlistofmsgs_context *context = (getlistofmsgs_context*)data;
  int state;
  _kernel_oserror *error = 0;
  
  UNUSED(r);
  UNUSED(pw);
  
  if (context)
  {
    state = pop_irqs_off();
    context->in_FSM     = TRUE;
    context->pending_CB = FALSE;
    pop_restore_irqs(state);
    error = get_list_of_messages_FSM(data);
  }
  else
    error = ERROR(NULLADDR);
  
  return error;
}

  
static _kernel_oserror* get_list_of_messages_CAhandler(_kernel_swi_regs *r, void *pw, void *data)
{
  UNUSED(r);
  UNUSED(pw);
  
  return CB_get_list_of_messages(data);
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void get_list_of_messages_FSM_LIST(getlistofmsgs_context *c)
{
  c->error = command_response(c->sock,
                              LISTCMD,
                              4,
                              &(c->response),
                              c->list_timeout,
                              &(c->errno),
                              &(c->error),
                              (function)&get_list_of_messages_FSM,
                              c);
  if (!c->error)
  {
    c->state = LIST_RESPONSE;
    c->exit = TRUE;
  }
  else
    c->state = ERROR;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void get_list_of_messages_FSM_LIST_RESPONSE(getlistofmsgs_context *c)
{
  if (!positive_response(c->response))
    c->error = ERROR(FAILED);
  
  destroy_response(&(c->response));
  if (c->error)
    c->state = ERROR;
  else
    c->state = GET_LINE;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void get_list_of_messages_FSM_GET_LINE(getlistofmsgs_context *c)
{
  c->state = STORE_LINE;
  c->error = get_line_from_server(c->sock,
                                  &(c->response),
                                  c->list_timeout,
                                  &(c->errno),
                                  &(c->error),
                                  (function)&get_list_of_messages_FSM,
                                  c);
  if (c->error)
    c->state = ERROR;
  else
    c->exit = TRUE;
}

  
/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void get_list_of_messages_FSM_STORE_LINE(getlistofmsgs_context *c)
{
  if (c->response)
  {
    if (strncmp(c->response, ".\r\n", 3) == 0)					/* is this the end of the list? */
      c->state = COMPLETED;
    else if (c->pos < c->num_entries)
    {
      int rc = sscanf(c->response, "%lu %lu", &(c->list[c->pos].msg_id), &(c->list[c->pos].msg_size));	/* read in ID and SIZE into array */
      dprintf(("", "get_list_of_messages_FSM_STORE_LINE: msg_id: %u\nmsg_size: %u\n", c->list[c->pos].msg_id, c->list[c->pos].msg_size));
      c->pos++;									/* increment position in array */
      if (rc != 2)								/* if sscanf failed, then return failed. */
        c->error = ERROR(FAILED);
      c->state = GET_LINE;
    }
    else
    {
      c->pos++;
      c->state = GET_LINE;
    }
  }
  destroy_response(&(c->response));						/* deallocate response */
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void get_list_of_messages_FSM_COMPLETED(getlistofmsgs_context *c)
{
  if (c->pos > c->num_entries)
    c->error = ERROR(NOSPACE);
  c->num_entries = c->pos;
  process1.getlistofmessages.flags = 0;
  process1.getlistofmessages.error = c->error;
  process1.getlistofmessages.errno = 0;
  process1.getlistofmessages.num_entries = c->num_entries;
  
  c->end = TRUE;
}


/* ************************************************************************** */
/*
   FUNCTION:       
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  
   RETURN VALUE:   
   CONSTANTS:      
   VARIABLES:      
 */
/* ************************************************************************** */
static void get_list_of_messages_FSM_ERROR(getlistofmsgs_context *c)
{
  c->num_entries = c->pos;
  process1.getlistofmessages.flags = 0;
  process1.getlistofmessages.error = c->error;
  process1.getlistofmessages.errno = c->errno;
  process1.getlistofmessages.num_entries = c->num_entries;
  
  c->end = TRUE;
}
