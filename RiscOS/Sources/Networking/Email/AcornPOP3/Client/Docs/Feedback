Progress Notification
=====================

The operations that the module provides:  Logon, Disconnect, GetMessage, etc.
can be setup to pass back progress of the operation to the client.

Currently, as of version 0.32, only Logon supports this notification.


Turning Notification On or Off
------------------------------
Notification is turned on/off using bit 4 of the flags word(R0) in all the
SWIs.  Notification can either be turned on or off for all operations on
the initial Register SWI call or on a per operation basis.


Global Progress Notification
----------------------------
To turn on for all operations, bit 4 of the flags word (R0) for the
Register SWI should be set(1) on calling.  All operations that support
progress notification will now return info., unless explictly turned off
(see below).  If bit 4 is clear (0), then no progress information is returned
unless explictly turned on (see below).


Local Progress Notification
---------------------------
The status of global notification set on Registration can be toggled on a
per SWI basis, using bit 4 of the flags word (R0) of any of the SWI calls.

If bit4 is clear(0) on a SWI call, say Logon, then whether the operation
returns progress information is determined by the state of bit4 of the
flags word in the Register SWI call.  If it was set, then progress will be
returned, otherwise it will not.

However, if bit 4 is set(1) on a SWI call, say Logon, then the status of
global progress information (as set by the Register SWI) is toggled.  If
progress information was requested on Register, then for this one SWI
call it will not be done.  If no progress was requested on Register, then
on this one SWI call it will be done.

Currently there is no way to indicate for a SWI call to absolutely turn
progress information ON or OFF irrespective of the global setting.  The
bit in the flags word of operation SWIs is only a toggle (inversion) of
the global setting, so the client must remember what global setting it
used on Registration.


Progress Notification, Returned information
-------------------------------------------
If there is progress notification data for the client, then the module
notifies the client in the same way as it does for operation termination.
ie. the pollword is set and a WimpMessage may also be sent if the client
requested WimpMessage notification on Register.

Notification data is differentiated from normal operation termination
data by bit4 in the returned data structure being set.  If bit 4 is set,
then the data is progress notification data, *not* operation termination
returned data structure.  However, the data format of both is idential for
each SWI operation.  (ie. progress information data structure for Logon is
the same format as returned data for Logon operation termination.  However,
both are different from Disconnect operation returned data).

If bit 4 is set, then the state data member contents is valid.  The data
member may vary for different operations.  See each individual SWI operation
for details. (Currently, only Logon progress in implemented though).

On receiving notification of such a data structure, the client should call
SWI ReleaseData on it as usual once it is finished with the data block.
The pollword will be cleared as usual.


Internal changes
----------------

logon.c
-------
As this is the only operation, currently, to support progress notification.

context.logon_return_data:

This data structure is allocated and used in place of the process1.logon
as was done before, and still is by all other operations (disconnect, getmsg,
etc.).  Now that logon reports  back status information, we need to queue up
the returned data strucutres.

However, the client is expecting the data at a certain address, as indicated
by the UniqueID is gets back from the initial SWI call.  Therefore, with
this queue of data structures, we need to copy them into the static data
structure, process.logon, and then pass that tto the client.

At the put of copying we destroy the data structure in the queue as we've now
copied the data into the static one.  This is all done in pop_utils.c,
notify_client(), send_notification, etc.  However, the logon_FSM_Complete or
Error states now need to co-operate with the other queued data structures,
so this new logon_return_data data member has been added to the context for
them to use.  It is shared as the FSM is either exited through ERROR or 
COMPLETED, never both.

It is allocated at the start, in new_logon_context() so that we know for
certain the block of memory is there to return errors, etc.  At this point
we a re still threaded from the SWI call and can return an error back to
the client through it.

