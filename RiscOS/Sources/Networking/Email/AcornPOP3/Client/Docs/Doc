AcornPOP3 - SWI calls
=====================

Project: Post
Date:    08/07/97
State:   Subject to change(but hopefully it won't ;)
Author:  Richard D. Warren
Version  0.03


SWIs
====

All are non-reentrant (certainly at present, and likely to stay that way)

AcornPOP3_Register		- Implemented, but only supports 1 client
AcornPOP3_DeRegister		- Implemented, but only supports 1 client
AcornPOP3_Logon			- Implemented, but only supports USER+PASS at present
AcornPOP3_Disconnect		- Implemented
AcornPOP3_AbortConnection	- NOT implemented
AcornPOP3_Reset			- NOT implemented
AcornPOP3_Echo			- NOT implemented
AcornPOP3_GetNumOfMessages	- Implemented
AcornPOP3_GetListOfMessages	- Implemented, but may change slightly
AcornPOP3_GetMessage		- Implemented
AcornPOP3_GetXLinesOfMessage	- Implemented
AcornPOP3_DeleteMessage		- Implemented
AcornPOP3_ReleaseData		- Implemented
AcornPOP3_GetUniqueID		- Implemented
AcornPOP3_GetListOfUniqueIDs	- Implemented


At present only one client app. can use the POP3 module at a time.  All
calls block at present until they complete, this will change in the future but
shouldn't affect client apps. so long as they don't relay on these calls
blocking.

The SWIs follow a standard, for all SWIs in all of the Post projects modules:

First SWI in module will be Register SWI
Second SWI in module will be DeRegister SWI
The rest depend on the module.

On calling the SWI:
  r[0]	is a flags variable
        Bit 0:  unset(0) = memory operation
                  set(1) = file operation
        Other bits depend on SWI
  r[1]  ID number - on SWI call r[1] should be address of pollword
                    
On return from SWI:
  r[0]  is the flags var.  (value of flags may be changed by module)
  r[1]  Unique ID - on return it will be a unique ID number (pointer to the
  		    data structure holding the returned data)
                    to identify returned data with this SWI call OR may be
                    set to 0 if SWI call failed

On calling a SWI if no error is returned (ie. _kernel_swi returns NULL) then the
module has accepted the call and the input parameters (as far as can be checked
initially) are all okay.  Once the operation requested by calling the SWI is
complete (eg. logging on), the module will set the pollword to the address of
a data structure holding returned information from that operation.  The client
should extract what it needs, set the pollword back to 0 and call the
ReleaseData SWI to tell the module it's finished with the data.

Returned data structure will follow the below format:

struct
{
  unsigned int     flags;
  _kernel_oserror *error;
  int              errno;
  .......SWI call dependant...
  ....
};

ie. First 4bytes at address holds an unsigned 32bit integer value which is a flags variable
    Next  4bytes is an address of an error block, 0 if no error, else it's a ptr to an error block
    Next  4bytes is a 32bit signed integer value which will be set to an Internet error number if an internet error occured.
    Remained depends on the SWI call that created this returned data.

If an error is returned (ie. _kernel_swi returns a ptr to a RiscOS error block) then
there will be no data returned for this call so don't go into the WimpPoll
expecting the pollword to be set at some point, 'cos it won't be!

Timeout parameters are unused in this version.  When implemented they will work as follows:

-ve = module will use timeout value set in System variables or builtin default if var. not
     set
 0  = no timeout, ever.  Not a good idea and should not be used.
+ve = given positive value used as the timeout overriding the system var. value and builtin
      default value.

(For future compatiblity you should give -1 or any -ve value in as the timeout value, so
once timeouts are implemented your code will work unchanged)

SWIs are documented in the following format:

Description:		Description of SWI call
On calling:		Registers on calling the SWI (inputs)
On return:		Registers on exiting the SWI (outputs)
Errors:			Possible error numbers on return from SWI call (error value in riscos error block returned by _kernel_swi)
                        Numbers should have ErrorBase_AcornPOP3	(0x00810f00) constant added to them to give the true value
Returned Data structure:structure of data the returned data that the pollword will point to.  Pollword will be set to the
                        address of the structure.  Register SWI gives the ADDRESS of the pollword.  All other SWIs require the
                        ADDRESS of the pollword.  NOTE:  if entry in SWI documentation says NONE, then don't go into Poll
                        loop expecting pollword to go non-zero as it never will for this call.
Returned errors:        Possible error numbers returned in the returned data structure.


Using AcornPOP3 module
----------------------

Before an app. can use the POP3 module it must register with it using
AcornPOP3_Register call.  This will give the client an address of a pollword
to use in all future SWI calls.  Once the client is finished with the module
it must call AcornPOP3_DeRegister. (Client must have tidyed up POP3 usage
before calling this, eg. disconnect from the server).

In the final version of the module all of these SWI calls(except Register)
will return straight away.  If the SWI call returns 0 (ie. no error) then
the client must use the given pollword with WimpPoll or WimpPollIdle.  The
AcornPOP3 module will set the pollword to non-zero when there is data for the
client app.

The pollword will then be the address of the data for the client.  As in future
these calls will be non-blocking the return data structure will have a unique
ID field.  On return from a SWI call, if it was successful(no error) the
pollword given on entry will be changed to a unique ID to use to identify
returned data with the SWI call that caused it.


Example
-------

1) a) call AcornPOP3_Register
   b) gives you address of a pollword
   c) pollword will = 0 at present
   
2) a) call Acorn_LogOn - pass in COPY of the ADDRESS of the pollword
   b) returns NULL(SWI call succeeded) and returns a unique ID for this SWI call
      in r[1] overwriting the copy of the pollword address
   c) call WimpPoll using pollword
   d) AcornPOP3 module completes Logon SWI task and set's your pollword to the
      address of a data structure holding returned data from the Logon.
   e) pollword is now non-zero and your app. returns from the WimpPoll call
   
3) a) match up this address held in the pollword with the list of valid
      unique IDs your app. has (just one in this example from 2b) above)
      You now know which SWI call this returned data is related with
   b) data structure's ID matches ID from Logon SWI, therefore access data
      structure appropriately for data returned from a Logon task.
   c) once finished with data, set pollword to 0, call AcornPOP3_ReleaseData
      passing in the unique ID and the SWI number(eg. idnum and
      AcornPOP3_logon as IDs are unique to the SWI call).  AcornPOP3 module will
      then deallocate that block of memory.
   .........
   

AcornPOP3_Register
------------------

Description:
  Must be the first call made by the client application to the POP3 module.  Returns the address of a pollword which must
  be passed to all subsequent calls to POP3 module.  A copy should be used as other SWI calls change the value on return.
  If successful, no error is returned and r[1] holds address of pollword to use.
  
On calling:
  r[0]	Flags(unused at present)

On return:
  r[0]  Flags(unused at present)
  r[1]  Address of pollword

Errors:
  2

Returned Data structure:
  NONE
Returned Errors:
  NONE


AcornPOP3_DeRegister
--------------------

Description:
  Must be the last SWI call made by the client application to the POP3 module, else another Register call has to be made to
  use POP3 again.  If no error returned, then Deregister was successful and r[1] will be set to 0.  No pollword data will be
  set for this call so don't go into WimpPoll expecting pollword to go non-zero.
  
On calling:
  r[0]	Flags(unused at present)
  r[1]  Address of pollword

On return:
  r[0]  Flags (unchanged and unused at present)
  r[1]  0 if successful, else unchanged

Errors:
  1

Returned Data structure:
  NONE
Returned Errors:
  NONE


AcornPOP3_LogOn
---------------

Description:
  To logon into a POP3 server.  Pass a copy of the pollword address into r[1] as on return it is changed.
  
On calling:
  r[0]	Flags(unused at present, but will be: bit0 set(1) = APOP, unset(0) = USER/PASS)
  r[1]  Address of pollword
  r[2]  username string (NULL terminated)
  r[3]  password string (NULL terminated)
  r[4]  hostname string (NULL terminated) - must be hostname NOT IP address at present
  r[5]  Port number (-1 use default value)
  r[6]  Timeout for USER command (unused at present, use -1 though for future compatibility)
  r[7]  Timeout for PASS command (unused at present, use -1 though for future compatibility)

On return:
  r[0]  Flags (unchanged and unused at present)
  r[1]  Unique ID for this instance of the AcornPOP3_Logon call for this client

Errors:
  1, 17

Returned Data structure:
  typedef struct
  {
    unsigned int	 flags;
    _kernel_oserror	*error;
    int			 errno;
  } AcornPOP3_LogOn_data;

Returned Errors:
  0, 4, 7, 9, 12, 17
  

AcornPOP3_Disconnect
--------------------

Description:
  To logoff from POP3 server
  
On calling:
  r[0]	Flags(unused at present)
  r[1]  Address of pollword
  r[2]  Timeout for QUIT command (unused at present, use -1 though for future compatibility)

On return:
  r[0]  Flags (unchanged and unused at present)
  r[1]  Unique ID for this instance of the AcornPOP3_Disconnect call for this client

Errors:
  1

Returned Data structure:
  typedef struct
  {
    unsigned int	 flags;
    _kernel_oserror	*error;
    int			 errno;
  } AcornPOP3_Disconnect_data;

Returned Errors:
  0, 4, 7, 17
  

AcornPOP3_GetNumOfMessages
--------------------------

Description:
  To get the number of messages on POP3 mailbox on server.

On calling:
  r[0]	Flags(unused at present)
  r[1]  Address of pollword
  r[2]  Timeout for STAT command (unused at present, use -1 though for future compatibility)

On return:
  r[0]  Flags (unchanged and unused at present)
  r[1]  Unique ID for this instance of the AcornPOP3_GetNumOfMessages call for this client
  
Errors:
  1

Returned Data structure:
  typedef struct
  {
    unsigned int	 flags;
    _kernel_oserror	*error;
    int			 errno;
    unsigned int	 mailbox_size;
    unsigned int	 num_messages;
  } AcornPOP3_GetNumOfMessages_data;

Returned Errors:
  0, 4, 17
  
  
AcornPOP3_GetListOfMessages
---------------------------

Description:
  To get a list of message IDs and message sizes from POP3 mailbox on server.
  
On calling:
  r[0]	Flags(unused at present)
  r[1]  Address of pollword
  r[2]  Address of block of memory to put list into(must be in area of memory that won't be
        mapped out.  ie. in a dynamic area RMA or own dynamic area)
  r[3]  number of MSG_LIST structs that will fit in block of memory
  r[4]  Timeout for LIST command (unused at present, use -1 though for future compatibility)

On return:
  r[0]  Flags (unchanged and unused at present)
  r[1]  Unique ID for this instance of the AcornPOP3_GetNumOfMessages call for this client
  
Errors:
  1, 17

Returned Data structure:
  typedef struct
  {
    unsigned int	 flags;
    _kernel_oserror	*error;
    int			 errno;
    unsigned int	 num_entries;
  } AcornPOP3_GetListOfMessages_data;

Returned Errors:
  0, 4, 16, 17


AcornPOP3_GetMessage
--------------------

Description:
  To get a message from POP3 server.

On calling:
  r[0]	Flags
          Bit0 - unset(0) : memory based
                   set(1) : file   based (not implemented yet)
  r[1]  Address of pollword
  r[2]  If      r[0]bit0 = 0, Address of block of memory to put message into(must be in dynamic area that won't be mapped out)
        else if r[0]bit0 = 1, filename of file to put message into
        else it will break!
  r[3]  If      r[0]bit0 = 0, size of memory block in bytes
        else if r[0]bit0 = 1, free space of FS that filename is on in bytes
  r[4]  Message ID
  r[5]  Delete message flag: 0 = don't delete, 1 = Delete on successful receive
  r[6]  Timeout for RETR command (unused at present, use -1 though for future compatibility)

On return:
  r[0]  Flags (unchanged present)
  r[1]  Unique ID for this instance of the AcornPOP3_GetMessage call for this client

Errors:
  1, 17

Returned Data structure:
  typedef struct
  {
    unsigned int	 flags;
    _kernel_oserror	*error;
    int			 errno;
    unsigned int	 message_size;
  } AcornPOP3_GetMessage_data;

Returned Errors:
  0, 4, 16, 17
  

AcornPOP3_GetXLinesOfMessage
----------------------------

Description:
  To get the header lines of a message + X lines of the message body.  If X >= total number of lines in message then all of
  message is received.
  
On calling:
  r[0]	Flags
          Bit0 - unset(0) : memory based
                   set(1) : file   based (not implemented yet)
  r[1]  Address of pollword
  r[2]  If      r[0]bit0 = 0, Address of block of memory to put message into(must be in dynamic area that won't be mapped out)
        else if r[0]bit0 = 1, filename of file to put message into
        else it will break!
  r[3]  If      r[0]bit0 = 0, size of memory block in bytes
        else if r[0]bit0 = 1, free space of FS that filename is on in bytes
  r[4]  Message ID
  r[5]  Number of lines of message body to request
  r[6]  Timeout for TOP command (unused at present, use -1 though for future compatibility)

On return:
  r[0]  Flags (unchanged at present)
  r[1]  Unique ID for this instance of the AcornPOP3_GetXLinesOfMessage call for this client
  
Errors:
  1, 17

Returned Data structure:
  typedef struct
  {
    unsigned int	 flags;
    _kernel_oserror	*error;
    int			 errno;
    unsigned int	 message_size;
    unsigned int	 num_lines;
  } AcornPOP3_GetXLinesOfMessage_data;

Returned Errors:
  0, 4, 16, 17
  
  
AcornPOP3_DeleteMessage
-----------------------

Description:
  To delete a message in the POOP3 mailbox on the server.
  
On calling:
  r[0]	Flags (unused at present)
  r[1]  Address of pollword
  r[2]  Message ID
  r[3]  Timeout for DELE command (unused at present, use -1 though for future compatibility)

On return:
  r[0]  Flags (unchanged and unused at present)
  r[1]  Unique ID for this instance of the AcornPOP3_GetXLinesOfMessage call for this client

Errors:
  1

Returned Data structure:
  typedef struct
  {
    unsigned int	 flags;
    _kernel_oserror	*error;
    int			 errno;
  } AcornPOP3_DeleteMessage_data;

Returned Errors:
  0, 4, 16, 17
  
  
AcornPOP3_ReleaseData
---------------------

Description:
  To tell module when you have finished with the returned data from a SWI call so it can release it.

On calling:
  r[0]	Flags(unused at present)
  r[1]  Address of pollword
  r[2]  SWI number of SWI that returned data is from
  r[3]  Unique ID number of returned data

On return:
  r[0]  Flags(unused at present)
  r[1]  0 if successful, else unchanged
  r[2]  0 if successful, else unchanged
  r[3]  0 if successful, else unchanged
  
Errors:

Returned Data structure:
  NONE
Returned Errors:
  NONE
  

AcornPOP3_GetUniqueID
---------------------

Description:
  To get the Unique ID of a message on POP3 mailbox on server.

On calling:
  r[0]	Flags(unused at present)
  r[1]  Address of pollword
  r[2]  Timeout for UIDL command (unused at present, use -1 though for future compatibility)

On return:
  r[0]  Flags (unchanged and unused at present)
  r[1]  Unique ID for this instance of the AcornPOP3_GetUniqueID call for this client
  
Errors:
  1

Returned Data structure:
  typedef struct
  {
    unsigned int	 flags;
    _kernel_oserror	*error;
    int			 errno;
    unsigned int	 id;
    unsigned int	 unique_id;
  } AcornPOP3_GetUniqueID_data;

Returned Errors:
  0, 4, 17
  
  
AcornPOP3_GetListOfMessages
---------------------------

Description:
  To get a list of message IDs and message unique IDs from POP3 mailbox on server.
  
On calling:
  r[0]	Flags(unused at present)
  r[1]  Address of pollword
  r[2]  Address of block of memory to put list into(must be in area of memory that won't be
        mapped out.  ie. in a dynamic area RMA or own dynamic area)
  r[3]  number of UID_MSG_LIST structs that will fit in block of memory
  r[4]  Timeout for UIDL command (unused at present, use -1 though for future compatibility)

On return:
  r[0]  Flags (unchanged and unused at present)
  r[1]  Unique ID for this instance of the AcornPOP3_GetNumOfUniqueIDs call for this client
  
Errors:
  1, 17

Returned Data structure:
  typedef struct
  {
    unsigned int	 flags;
    _kernel_oserror	*error;
    int			 errno;
    unsigned int	 num_entries;
  } AcornPOP3_GetListOfUniqueIDs_data;

Returned Errors:
  0, 4, 5, 17


Errors
------

SWI calls can return the following errors:

  ErrorBase_AcornPOP3+0, "Failed"
  ErrorBase_AcornPOP3+1, "Invalid ID"
  ErrorBase_AcornPOP3+2, "No more processes available"
  ErrorBase_AcornPOP3+3, "Already doing operation"
  ErrorBase_AcornPOP3+4, "Internet Error"
  ErrorBase_AcornPOP3+5, "Command not supported by server"
  ErrorBase_AcornPOP3+6, "Already connected and logged in"
  ErrorBase_AcornPOP3+7, "Wrong username"
  ErrorBase_AcornPOP3+8, "Wrong password"
  ErrorBase_AcornPOP3+9, "Connection timedout"
  ErrorBase_AcornPOP3+10, "Connection timedout waiting for response"
  ErrorBase_AcornPOP3+11, "Connection failed"
  ErrorBase_AcornPOP3+12, "Connection refused"
  ErrorBase_AcornPOP3+13, "Hostname is a null string or invalid"
  ErrorBase_AcornPOP3+14, "Not connected"
  ErrorBase_AcornPOP3+15, "Not logged in"
  ErrorBase_AcornPOP3+16, "No such message"
  ErrorBase_AcornPOP3+17, "NULL address"
  ErrorBase_AcornPOP3+18, "No Space"
  ErrorBase_AcornPOP3+19, "No space for headers"
  ErrorBase_AcornPOP3+20, "No space for Xlines of body"
  ErrorBase_AcornPOP3+21, "Failed to open file"
  