FSM re-entracy mechanism
========================

This is an overview of the way in which the transport module's FSMs
are started, temporarily exited to release control to USR mode,
driven by events and terminated


All FSMs have:

1) a start entry point function, generally the name of the operation.
   eg. logon(....).  This function takes all the input data and where to
   call back with results, etc.  This function is exported for external
   FSMs, functions to use.

2) a context data structure.  Each instance of the FSM that is started
   by calling the entry point (1) creates one of these context structures
   and it is passed around the callback/after handlers so the FSM is
   entered with the correct context.

3) the FSM function, eg. logon_FSM(...).  This is the FSM itself taking
   as input a context structure.

4) A set callback function, eg. CB_logon.  This is the only other function
   that is exported for other things, ie. the event handler, to call

5) A set callafter function, eg. CA_logon.  This sets up a callafter.

6) A callafter handler, eg. logon_CAhandler.  This calls the set callback, eg.
   CB_logon.

7) A callback handler, eg. logon_CBhandler.  This calls the FSM, eg. logon_FSM.


1 FSM start
-----------

process1.state = PROCESSING	(The idle state)
create FSM context
context.in_FSM = FALSE
context.pending_CB = FALSE
context.need_CB = FALSE
call FSM()

2 Context data structure
------------------------
BOOL    in_FSM		- Is there a thread of execution in the FSM
BOOL    pending_CB	- Is there a callback set, waiting to go off
BOOL    need_CB		- Does there need to be a callback set on exit from
			  the FSM
BOOL    exit		- Should the thread exit the FSM without setting any
			  callback, so the event handler drives re-entry
BOOL    end		- Is this execution instance of the FSM terminating
clock_t t_slice		- time slice for this iteration of the FSM
......FSM specific data.....

3 FSM
-----

INPUTS:		context
ALGORITHM:
  context.exit = FALSE;				// RESET exit flag
  if context.t_slice = 0 then			// If the timeslice expired last
    context.t_slice = current time + slice size	// time, allocate another

    while (t_slice NOT expired AND NOT context.end AND NOT context.exit) do
      // FSM code

   irqs_off					// Critical section START
   context.in_FSM = FALSE			// Clear thread flag as we are about to exit
   if context->end then				// If this is the end of the FSM, then
     process1.state = PROCESSING;		// Make sure that the main session state is IDLE
     remove any pending callafters to CA_handler()
     remove any pending callbacks to CB_handler()
     destroy context
   else if context.exit = FALSE			// else, if not exit, then t_slice expired
     context.t_slice = 0			// reset the time slice
     context.pending_CB = FALSE			// clear pending flag as we are about to set a callback
     context.need_CB = FALSE                    // clear need callback flag
     call CA_()					// set a callafter
   else if context.need_CB			// if need a callback flag is set then
     context.need_CB = FALSE			// clear it
     call CB_()					// set a callback
   endif
   restore_irqs					// Critical section END


4 - CB_()
---------

INPUTS: reference to the context data
ALGORITHM:
  irqs_off					// Critical section START
  if context.pending = FALSE then		// If there is not one already pending then
    if context.in_FSM				// If a thread is already running in the FSM
      context.need_cb = TRUE			// Then set the flag so that thread on exiting sets up the callback
    else					// else there isn't a thread running, so
      context.pending = TRUE			// set the pending flag
      add callback with the context data	// and add the callback to the OS
    endif
  endif
  restore_irqs					// Critical section END


5 - CA_()
---------

INPUTS: reference to the context data
ALGORITHM:
  add a callafter with the context data attached to it


6 - CA_handler()
----------------

INPUTS: reference to the context data
ALGORITHM:
  call CB_() passing in the context data reference


7 - CB_handler()
----------------

INPUTS: reference to the context data to use
ALGORITHM:
  irqs_off					// Critical section START
  context.in_FSM = TRUE				// Set thread executing in FSM now as we are about to enter it
  context.pending_CB = FALSE			// Clear the pending callback flag as we are in the handler now
  restore_irqs					// Critical section END
  call FSM() passing in context data reference


8 - Event Handler
-----------------

ALGORITHM:
  if Internet_Event then
    if event is on our socket, process1.sock then
      switch process1.state on
        CONNECTING:
          CB_logon(process1.logon_context)
        endcase
        READING:
          CB_get(process1.get_context)
        endcase
        WRITING:
          CB_send(process1.send_context)
        endcase
      endswitch
    endif
  endif
  