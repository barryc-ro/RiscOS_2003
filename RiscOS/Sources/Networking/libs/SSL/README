		SSLeay 0.6.0 21-Jun-1996
		Copyright (c) 1996, Eric Young
		All rights reserved.

This directory contains Eric Young's (eay@mincom.oz.au) implementation
of SSL and supporting libraries.

The current version of this library is available from
    ftp://ftp.psy.uq.oz.au/pub/Crypto/SSL/SSLeay-x.x.x.tar.gz

There are patches to a number of internet applications which can be found in
    ftp://ftp.psy.uq.oz.au/pub/Crypto/SSLapps/

A Web page containing the SSLeay FAQ written by Tim Hudson <tjh@mincom.oz.au> 
can be found at 
    http://www.psy.uq.oz.au/~ftp/Crypto

This Library and programs are FREE for commercial and non-commercial
usage.  The only restriction is that I must be attributed with the
development of this code.  See the COPYRIGHT file for more details.
Donations would still be accepted :-).

The package includes

libssl.a:
	My implementation of Netscapes SSL v 2 protocol.  This library
	implements the SSL protocol.

libcrypto.a:
	General encryption and X509 stuff needed by SSL but not
	actually logically part of it.  It includes routines for the following:
	libdes - My libdes DES encryption package which has been floating
		around the net for a few years.  It includes 15
		'modes/variations' of DES (1, 2 and 3 key versions of ecb,
		cbc, cfb and ofb; pcbc and a more general form of cfb and ofb)
		a fast crypt(3), and routines to read passwords from the
		keyboard.
	RC4 encryption,
	RC2 encryption,
	IDEA encryption - 4 different modes, ecb, cbc, cfb and ofb.
	MD5 and MD2 message digest algorithms, fast implementations,
	SHA (SHA-0) and SHA-1 message digest algorithms,
	RSA encryption/decryption/key generation.  There is no limit
		on the number of bits.
	DSA encryption/decryption.  This library is not completed yet
		but it can be used to sign and verify the DSS.
	Diffie-Hellman key-exchange/key generation.  There is no limit
		on the number of bits.
	X509 encoding/decoding into/from binary ASN1 and a
		PEM based ascii-binary encoding which supports encryption with
		a private key.
	There is also general digital envelope routines and base64.
	Data structures implemented include a stack, a hash table,
		a simple text database and a configuration file that uses the
		same format as Windows .ini files.
	Currently under development is a 'pushable' IO system, which can
		be used to hid the underlying IO mechanisms from the
		general appicaion code (or in my case, from the SSL/crypto
		libraries.

Programs in this package include
	enc	- a general encryption program that can encrypt/decrypt using
		one of 17 different cipher/mode combinations.  The
		input/output can also be converted to/from base64
		ascii encoding.
	dgst	- a generate message digesting program that will generate
		message digests for any of md2, md5, sha (sha-0 or sha-1).
	asn1parse - parse and display the structure of an asn1 encoded
		binary file.
	rsa	- Manipulate RSA private keys.
	dh	- Manipulate Diffie-Hellman parameter files.
	crl	- Manipulate certificate revocation lists.
	crt2pkcs7- Generate a pkcs7 object containing a crl and a certificate.
	x509	- Manipulate x509 certificates, self-sign certificates.
	req	- Manipulate PKCS#10 certificate requests and also
		  generate certificate requests.
	genrsa  - Generates an arbitrary sized RSA private key.
	gendh	- Generates a set of Diffie-Hellman parameters, the prime
		  will be a strong prime.
	ca	- Create certificates from PKCS#10 certificate requests.
		  This program also maintains a database of certificates
		  issued.
	verify	- Check x509 certificate signatures.
	speed	- Benchmark SSLeay's ciphers.
	s_server- A test SSL server.
	s_client- A test SSL client.
	s_time	- Benchmark SSL performance of SSL server programs.
	s_mult	- A test/demo non-blocking IO event loop type server.
	errstr	- Convert from SSLeay hex error codes to a readable form.
	
Documents avaliable are
	A Postscript and html reference manual
	(written by Tim Hudson tjh@mincom.oz.au).
	A list of text protocol references I used.
	A initial version of the library manual.

To install this package, read the INSTALL file.
For the Microsoft word, read INSTALL.MS
This library has been compiled and tested on Solaris 2.[34] (sparc and x86),
SunOS 4.1.3, DGUX, OSF1 Alpha, HPUX 9, AIX 3.5(?), IRIX 5.[23],
LINUX, NeXT (intel), linux, Windows NT, Windows 3.1, MSDOS 6.22.

Due to time constraints, the current release has only be rigorously tested
on Solaris 2.[45], Linux and Windows NT, Windows 3.1 (under NT) and MSDOS.

For people in the USA, it is possible to compile SSLeay to use RSA
Inc.'s public key library, RSAref.  From my understanding, it is
claimed by RSA Inc. to be illegal to use my public key routines inside the USA.
Read doc/rsaref.doc on how to build with RSAref.

Read the documentation in the doc directory.  It is quite rough,
but it lists the functions, you will probably have to look at
the code to work out how to used them.  I will be working on
documentation.  Look at the example programs.

There should be a SSL reference manual which is being put together by
Tim Hudson (tjh@mincom.oz.au) in the same location as this
distribution.  This contains a lot more information that is very
useful.  For a description of X509 Certificates, their use, and
certification, read rfc1421, rfc1422, rfc1423 and rfc1424.  ssl/README
also goes over the mechanism.

We have setup some mailing lists for use by people that are interested
in helping develop this code and/or ask questions.
    ssl-bugs@mincom.oz.au
    ssl-users@mincom.oz.au
    ssl-bugs-request@mincom.oz.au
    ssl-users-request@mincom.oz.au

I have recently read about a new form of software, that which is in
a permanent state of beta release.  Linux and Netscape are 2 good 
examples of this, and I would also add SSLeay to this category.
The Current stable release is 0.5.2 (with patches) which I may just roll
over into 0.5.3.  This release, 0.6 is probably better than 0.5.3
(I know I have fixed alot of bugs that are still in 0.5) but since the API
has been modified, don't used 0.6 for a few weeks until the teething
problems are ironed out.  If you want windows DLL's, you have no
choice, use 0.6 :-).  Tim should have his SSLtelnet for Windows 3.1
available real soon now, and that will also give the library
a good thrashing.

Look at TODO for a list of thinks I know I still need to do.  There are
quite a few things 'in development' in 0.6.0, but I need to 'get this
one out the door' so these features will only be half finished.

eric (Jun 1996)

Eric Young (eay@mincom.oz.au)
86 Taunton St.
Annerley 4103.
Australia.

