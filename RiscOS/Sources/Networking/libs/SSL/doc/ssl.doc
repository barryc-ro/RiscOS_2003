The SSL library.
This library implements version 2 of the SSL protocol.  It implements both
server and client authentication.  Since authentication requires the use of
X509 certificates, normal use of this library requires the use of the X509
library as well.  This document will initially describe the SSL functicions
and then describe the X509 functions that are directly used or are usefull
when using this library.

Data Structures
For each SSL connection, a seperate SSL structure is required.  An SSL
structure contains all the state information and buffers requred for an SSL
conection.  Multiple different SSL conections also can share some global
state.  This state includes cached session-id's and the location of where
to lookup X509 certificates for authentication.  This shared state is kept
in a structure call a SSL_CTX and the actual SSL state is kept in a SSL
structure.

SSL_CTX *SSL_CTX_new(void );
	This function creates a new SSL_CTX structure.  This is used when
creating SSL structures.  Only one of these needs to be created for a
program and can be shared between all SSL structures.  It contains the
Session-ID cache and the state asociated with looking up certificates.

void	SSL_CTX_free(SSL_CTX *);
	This function 'free()s' an SSL_CTX.  The SSL_CTX structure contains
a reference count and so the structure is not actually free()ed until the
last copy of the structure is freed.

SSL_CTX *SSL_get_SSL_CTX(SSL *);
	This function returns a copy of the SSL_CTX structre being used by
a particular SSL structure.  This can be used to pass to a call to
SSL_new().  You do not have to free() the SSL_CTX returned.  Typical usage
would be as follows.
	ctx=SSL_CTX_new();
	sp=SSL_new(ctx);
	SSL_CTX_free(ctx);
	.....
	sp2=SSL_new(SSL_get_SSL_CTX(sp));
Note that since the structure uses reference counts, the SSL_CTX_free() call
does not actually free the structre yet, since 'sp' is still using it.
When SSL_free(sp) and SSL_free(sp2) are called, the variable ctx will
finally be free()ed.
	
SSL *	SSL_new(SSL_CTX *);
	This call creates a new SSL structre, ready for use.
	
void	SSL_clear(SSL *s);
	This call 'clears' an SSL structure of information about a current
SSL connection and prepares it for re-use.  It keeps the old Session-ID
information and so if this SSL structure is used to make an SSL_connect, it
will attempt to re-use the previous session-ID.

void	SSL_free(SSL *s);
	This free()s the SSL structure and all auxilary structures
associated with it.

int	SSL_accept(SSL *s);
int	SSL_connect(SSL *s);
int	SSL_is_init_finished(SSL *s);
char * 	ssl_state_string(SSL *s);
char * 	ssl_rstate_string(SSL *s);
int	SSL_pending(SSL *s);
int	SSL_read(SSL *s, char *buf, unsigned int len);
int	SSL_write(SSL *s, char *buf, unsigned int len);

int	SSL_use_RSAPrivateKey(SSL *ssl, RSA *rsa);
int	SSL_use_RSAPrivateKey_ASN1(SSL *ssl, unsigned char *d, long len);
int	SSL_use_RSAPrivateKey_file(SSL *ssl, char *file, int type);
int	SSL_use_certificate(SSL *ssl, X509 *x);
int	SSL_use_certificate_ASN1(SSL *ssl, int len, unsigned char *d);
int	SSL_use_certificate_file(SSL *ssl, char *file, int type);

char *	SSL_get_cipher(SSL *s);
int	SSL_get_fd(SSL *s);
char *	SSL_get_pref_cipher(SSL *s, int n);
char *	SSL_get_shared_ciphers(SSL *s, char *buf, int len);
int	SSL_get_read_ahead(SSL * s);
long	SSL_get_time(SSL * s);
long	SSL_get_timeout(SSL * s);
char *	SSL_get_peer_certificate(SSL *s);

void	SSL_set_fd(SSL *s, int fd);
int	SSL_set_pref_cipher(SSL *s, char *str);
void	SSL_set_read_ahead(SSL * s, int yes);
int	SSL_set_timeout(SSL * s, int t);
void	SSL_set_verify(SSL *s, int mode, int (*callback) ());

int	SSL_copy_session_id(SSL *to, SSL *from);
void	SSL_debug(char *file);
void	SSL_flush_connections(void);

void	ERR_load_SSL_strings(void );
void	SSL_load_error_strings(void );

