
[Borris's] Notes regarding RISC OS port of SSLeay-0.5.1a
now featuring Peter's notes regarding SSLeay 0.6.0

<borris>

1) Added entry in Configure for xriscos for RISC OS cross compilation
from RiscIx.

2) Change "ar r" to "armlib -i -o" in makefiles. the ranlib.sh program
winges but is otherwise okay. Virtually all makefiles.

3) Change the $(CC)s that are used to link to $(LD)s. Virtually all
makefiles.

4) Cahnge blah.a to blah.lib and add *.lib to clean: entry. Virtually
all makefiles.

5) Created a RISC OS unistd.h, with a few things in it. On zebedee at
/riscos/include/unistd.h. USing hdrs from ~borris/src/include on ant.

6) Hack OSTTY into read_pwd.c.

7) Add a few (char*)s for read(), write(), Read() and Write() calls.

8) Add a few #include <sys/time.h> when sys/stat.h wanted time_t
defined.

9) Big numbers (bn stuff) is messy, as the source assumes something
like gcc that can do long long as twice sizeof(long). Norcroft won't
do this. Hacked it to use 16/32, rather that the preferable 32/64
combinations. Should work, but will be slow.

10) pem.h. Doing cross compilation makes running ctx_size very
difficult. For now, checked has same values as sunos/sparc, and will
run ctx_size native on RISC OS when possible.

11) Testing. Messy.

12) Check on "AOF Librarian: (Warning) No exported symbols in
pk7_dgst.o." message.

13) Added armlib -c to create 3 .lib files in top level make clean
place. Not ideal, but works.

14) Change a few places to include #ifndef errno.

15) All the hardwired paths are unacceptable. Introduce an environment
variable to specify the route of the SSL working directories and
files. The following EVs are known to be referenced:

SSL_CIPHER
RANDFILE
HOME
SSL_CERT_AREA
SSL_CERT_DIR
SSL_CERT_FILE
SSL_PRIVATE_DIR
SSL_CONFIG_FILE

The char *getconf(char *str) routine should be used instead of
getenv() with locations.h updated to contain suitable keys.

16) Need to look carefully at how various "random" numbers get
initialised. There is a high probability/danger that we won't actually
get many bits of variation, which makes our comms much easier to
crack whatever key length we choose to use. Talk to Nicko on this one,
as it might otherwise be an unobvious Achilles heel.

17) Wrapping things up in a module:

SWI chunk is 0x4bf00 "SSL",

Error chunk is 0x80ef00.


The SWI interface is intended to be used with the supplied C wrapper
functions, but can be used directly if desired. A jump table directs
calls into the module. A call to SSL_Library_Initialise() is required
to initialise the jump table.

</borris>

<peter>

18) The module has to export errno (or rather a function
SSL_errno which returns errno) so client code can tell --
otherwise the module would be writing to the errno in the stubs
it's linked with, but the client would be reading errno from the
stubs *it's* linked with.

19) SSL now ships with .def files for making Windows DLLs --
that's to say, ready-made complete lists of exported functions.
There's a script for turning these files into the ssl-all listing
used by the romodule makefile. It's called def.py -- yes, it's in
Python.

Update: The plan with sslmodule is only to link in the object
files needed by s_client and x509 (suspicion: the "and x509" adds
no more object files). This means we need to find the set of
symbols needed by s_client (by attempting to link it without the
library), get that list of symbols as ssl-req and use those as
the ssl-fns to build a sslmodule. The cunning bit, though, is
that we get armlink to output the list of symbols defined in
sslmodule, and then pass that through a script that does a
join(1) between that and the ssl-all file, to produce a list
called ssl-min of exactly the exported symbols we need.

The "final" sslmodule is made with ssl-min as its symbol list.

20) Grebulous hacks added to avoid compiler errors: armcc doesn't
cope with initalisers containing pointers to other bits of data,
when compiling with the -zM flag.

21) realloc reimplemented (in robits/robits.c) due to its
alarming misbehaviour when called from -zM code.

22) For making the HTTP-SSL module: the makefiles all need to be
run on a Unix system, just as the Fresco ones do:
        cd crypto
        make top
        cd ssl
        make top
        cd robits
        make top

This gives you a file called cryptolib and one called ssllib,
both in this directory. Everything compiles with -zM.

The following files then need copying into the Fresco build tree:
    directory "include" as <fresco>/ssleay      [*]
    file "cryptolib" as <fresco>/ssleay/o/cryptozm
    file "ssllib" as <fresco>/ssleay/o/sslzm

[*] only changes between releases of SSLeay

Sorry this is all such a dog's breakfast but "The Mother of All
Source Cleanups" is waiting for the release of an SSLeay that
does SSL3.

</peter>
