/*****************************************************************************
* $Id$
* $Name$
*
* Author(s):  Daniel R Ellis
* Project(s): IA Next Generation (A148)
*
* ----------------------------------------------------------------------------
* Copyright [2000] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: This program provides a simple telnet server running under RISC OS
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/

/*****************************************************************************
* Include header files
*****************************************************************************/

#include "TServer.h"
#include "modhead.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "sys/types.h"
#include "sys/socket.h"
#include "sys/ioctl.h"
#include "sys/errno.h"
#include "netinet/in.h"
#include "netdb.h"
#include "unixlib.h"
#include "socklib.h"
#include "arpa/telnet.h"

#include "swis.h"
#include "Global/RISCOS.h"
#include "Global/Services.h"
#include "wimp.h"
#include "wimplib.h"

#include "DebugLib/DebugLib.h"

/*****************************************************************************
* MACROS
*****************************************************************************/

#define NOTUSED(A) ((A)=(A))
#define RECVBUFSIZE 240


/*****************************************************************************
* New enumerated types
*****************************************************************************/

/* states for receive character state machine */
#define    TS_DATA        0    /* base state */
#define    TS_IAC         1    /* look for double IAC's */
#define    TS_CR          2    /* CR-LF ->'s CR */
#define    TS_SB          3    /* throw away begin's... */
#define    TS_SE          4    /* ...end's (suboption negotiation) */
#define    TS_WILL        5    /* will option negotiation */
#define    TS_WONT        6    /* wont " */
#define    TS_DO          7    /* do " */
#define    TS_DONT        8    /* dont " */
#define    TS_ESC         9    /* escaped chracters */


/*****************************************************************************
* File scope Global variables
*****************************************************************************/

static int sock = -1;
static int task_id = 0;
static int pollword = 0;
static int i = 1;

static task_block *root_task = 0;

/* need this to find out if we are the CAO */
extern void __module_header (void);

/* turn off stack limit checking for the SVC part of the code */
#pragma -s1

void* _kernel_RMAalloc (size_t sz) {
    int mem = 0;
    if (_swix (OS_Module, _IN(0) | _IN(3) | _OUT (2), 6, sz, &mem)) return 0;

    return (void*) mem;
}

void _kernel_RMAfree (void* mem) {
    _swix (OS_Module, _IN(0) | _IN(2), 7, mem);
}


/*****************************************************************************
* FunctionName
*  module_init
*
* Description of the function
*  perform any activities necessary for the module to function correctly
*
* Assumptions
*  Sets up debug lib.
*
* Inputs
*  char* cmd_tail:  the string following the command starting the module
*  int podule_base: the address of the base of the podule areas
*  void* pw:        the private word for this module
*
* Outputs
*  none
*
* Returns
*  _kernel_oserror*: any error produced trying to initialise
*****************************************************************************/

_kernel_oserror *module_init(const char *cmd_tail, int podule_base, void *pw)
{
    _kernel_oserror* e = 0;
    struct sockaddr_in server;
    NOTUSED(cmd_tail);
    NOTUSED(podule_base);

    /* set up debugging */
    debug_initialise (Module_Title, "", "");
    debug_set_device(FILE_OUTPUT);
    debug_set_unbuffered_files (TRUE);

    dprintf (("Module", "Starting Module\n"));

    /* create socket */
    sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock < 0) return &_inet_error;

    /* make the socket generate events */
    if (socketioctl(sock, FIOASYNC, &i) < 0) e = &_inet_error;

    /* mark the socket as non-blocking */
    if (!e && socketioctl(sock, FIONBIO, &i) < 0) e = &_inet_error;

    /* resuse the address so that if we start again we don't fail */
    if (!e && setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &i, sizeof i))
        e = &_inet_error;

    /* name socket using wildcards */
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons(23);
    if (!e && bind(sock, (struct sockaddr*) &server, sizeof server))
        e = &_inet_error;

    /* start accepting connections */
    if (!e && listen (sock, 5)) e = &_inet_error;

    /* claim the internet event */
    if (!e) _swix (OS_Claim, _INR(0, 2), EventV, internetv_entry, pw);
    if (!e) _kernel_osbyte (Event_Enable, Event_Internet, 0);

    /* if there was an error, close the socket */
    if (e) socketclose (sock);

    return e;
}


/*****************************************************************************
* FunctionName
*  module_final
*
* Description of the function
*  do any tidying up necessary to leave the system intact
*
* Assumptions
*  Kills any outstanding wimptasks and closes sockets.
*
* Inputs
*  int fatal:  1 if fatal, 0 if just a tidy
*  int podule: the instantiation number of the module being killed
*  void* pw:   the private word
*
* Outputs
*  none
*
* Returns
*  _kernel_oserror*:  any error produced during finalisation
*****************************************************************************/

_kernel_oserror *module_final(int fatal, int podule, void *pw)
{
    NOTUSED(fatal);
    NOTUSED(podule);

    /* disable and deregister for the internet event */
    _kernel_osbyte (Event_Disable, Event_Internet, 0);
    _swix (OS_Release, _INR(0, 2), EventV, internetv_entry, pw);

    /* close our sockets if they're not already closed */
    if (sock != -1) socketclose (sock);

    /* if we started as a wimp task, stop ourselves */
    if (task_id) {
        wimp_close_down (task_id);
        task_id = 0;
    }

    /* remove task structures close sockets and kill tasks */
    if (root_task != 0) {
        task_block* tsk = root_task, *ntsk;
        while (tsk) {
            dprintf(("", "closing task %p\n", tsk));
            socketclose (tsk->sock);
//          WimpPollBlock b;
//          memset (&b, 0, sizeof b);
//          b.user_message.hdr.size = sizeof b.user_message.hdr;
//          b.user_message.hdr.action_code = Wimp_MQuit;
//          wimp_send_message (Wimp_EUserMessage, &b, child, 0, 0);
            wimp_close_down (tsk->task_id);
            ntsk = tsk->next;
            _kernel_RMAfree (tsk);
            tsk = ntsk;
        }
    }

    return 0;
}

/*****************************************************************************
* FunctionName
*  eventv
*
* Description of the function
*  handles internet events
*
* Assumptions
*  We assume that we never get data for both sockets within a wimp poll, as
*  thee pollword would only reflect the last connection attempt made.
*
* Inputs
*  _kernel_swi_regs* r: the state of the registers when the call was made
*  void* pw:            the private word for this module
*
* Outputs
*  _kernel_swi_regs* r: the state of the registers to return
*
* Returns
*  0 to claim, 1 to pass on.
*****************************************************************************/

int internetv(_kernel_swi_regs *r, void *pw)
{
    NOTUSED(pw);

    /* we're not interested in out of band or other events */
    if (r->r[1] != 1) return 1;

    /* set the pollword to our socket if it's for us. */
    if (r->r[2] == sock) pollword |= TServer_PollWord_RecvSock;
    else if (root_task) {
        task_block *tsk = root_task;
        while (tsk) {
            if (r->r[2] == tsk->sock) {
                pollword |= TServer_PollWord_MsgSock;
                tsk->flags |= Task_InternetEvent;
                break;
                dprintf(("",
                    "Internet event received on socket %d, pollword set to %x\n",
                    r->r[2], pollword));
            }
            tsk = tsk->next;
        }
    };


    return 1;
}


/*****************************************************************************
* FunctionName
*  module_services
*
* Description of the function
*  handle service calls for the module
*
* Assumptions
*  if r->r[0] = 0 then the call was claimed, otherwise passed on.
*
* Inputs
*  int service_number:  the number of the service call
*  _kernel_swi_regs* r: the state of the registers when the call was made
*  void* pw:            the private word for this module
*
* Outputs
*  _kernel_swi_regs* r: the state of the registers to return
*
* Returns
*  void
*****************************************************************************/

void module_services(int service_number, _kernel_swi_regs *r, void *pw)
{
    NOTUSED(pw);

    switch (service_number) {

    /* if we haven't started yet then return the star command to start us and
    claim the service */
    case Service_StartWimp:
        if (task_id == 0) {
            task_id = -1;
            r->r[0] = (int) "Desktop_TServer";
            r->r[1] = 0;
        }
        break;

    /* if the wimp starts without issuing our start command clear the -1
    condition */
    case Service_StartedWimp:
        if (task_id == -1) task_id = 0;
        break;

    /* upon reset, zero task_id so that we can get started again */
    case Service_Reset:
        task_id = 0;
        break;

    default:
        break;
    }
}

/*****************************************************************************
* FunctionName
*  module_services
*
* Description of the function
*  handle service calls for the module
*
* Assumptions
*  if r->r[0] = 0 then the call was claimed, otherwise passed on.
*
* Inputs
*  int service_number:  the number of the service call
*  _kernel_swi_regs* r: the state of the registers when the call was made
*  void* pw:            the private word for this module
*
* Outputs
*  _kernel_swi_regs* r: the state of the registers to return
*
* Returns
*  void
*****************************************************************************/

_kernel_oserror *commands(const char *arg_string, int argc, int cmd_no, void *pw)
{
    switch (cmd_no) {

    case CMD_Desktop_TServer:
        /* Don't start the task if it's already started */
        if (task_id == -1 || task_id == 0) {
            wimp_slot_size (TServer_SlotSize, -1, 0, 0, 0);
            _swix (OS_Module, _INR(0, 2), Module_Enter, Module_Title, arg_string);
        }
        break;

    case CMD_TServer_DebugItStart:
        if (task_id != -1 && task_id != 0)
            return _swix (DebugIt_Register, _INR(0,3),

                1,                          /* we'll specify the pollword */
                task_id,                    /* task handle */
                &pollword,
                TServer_PollWord_DebugIt);  /* bit within pollword */
        break;

    case CMD_TServer_DebugItStop:
        return _swix (DebugIt_DeRegister, _IN(1), task_id);
        break;

    case CMD_TServer_VTCommand:
        vtcommand (arg_string);
        return 0;
    }

    return 0;

    NOTUSED(pw);
    NOTUSED(argc);
    NOTUSED(arg_string);
}

/* Turn stack limit checking back on again */
#pragma -s0

/*****************************************************************************
* FunctionName
*  recv_char_escape
*
* Description of the function
*  state machine for handling escape sequences
*
* Assumptions
*
* Inputs
*  char c, the character to be processed
*
* Outputs
*
* Returns
*  character to output, or -1 if character has been eaten
*****************************************************************************/

static int recv_char_escape (task_block* tsk, char c) {

    dprintf (("", "recv_char_escape: '%c', state = %d\n", c, tsk->esc_state));

    switch (tsk->esc_state) {
    case -1:
        tsk->esc_state = c;
        return -1;
        break;
    case '[':
        /* map to keys suitable for line editor */
        switch (c) {
        case 'A': c = 16;  break;
        case 'B': c = 14;  break;
        case 'C': c = 6;   break;
        case 'D': c = 2;   break;
        case 'c': c = 5;   break;
        case 'd': c = 1;   break;
        }
        tsk->esc_state = -1;
        break;
    default:
        tsk->esc_state = -1;
        break;
    }

    return c;
}

/*****************************************************************************
* FunctionName
*  recv_char
*
* Description of the function
*  state machine for receiving characters
*
* Assumptions
*
* Inputs
*  char c, the character to be processed
*
* Outputs
*
* Returns
*  character to output, or -1 if character has been eaten
*****************************************************************************/

static int recv_char (task_block* tsk, char c) {

    dprintf (("", "State is %d\n", tsk->state));
    switch (tsk->state) {

    case TS_CR:
        tsk->state = TS_DATA;
        /* Strip off \n or \0 after a \r */
        if ((c == 0) || (c == '\n')) {
            break;
        }
        /* FALL THROUGH */

    case TS_DATA:
        if (c == IAC) {
            tsk->state = TS_IAC;
            break;
        }

        /* handle escapes here */
        if (c == '\x1b') {
            tsk->state = TS_ESC;
            break;
        }
        /*
         * We now map \r\n ==> \r for pragmatic reasons.
         * Many client implementations send \r\n when
         * the user hits the CarriageReturn key.
         *
         * We USED to map \r\n ==> \n, since \r\n says
         * that we want to be in column 1 of the next
         * printable line, and \n is the standard
         * unix way of saying that (\r is only good
         * if CRMOD is set, which it normally is).
         */
        if (c == '\r')
            tsk->state = TS_CR;
        return c;
        break;

    case TS_ESC:
        {
            int ret = recv_char_escape (tsk, c);
            if (ret == -1) return -1;
            tsk->state = TS_DATA;
            return ret;
        }
        break;

    case TS_IAC:
gotiac:
        switch (c) {

        /*
         * Send the process on the pty side an
         * interrupt.  Do this with a NULL or
         * interrupt char; depending on the tty mode.
         */
        case IP:
            return -1;

        case BREAK:
            return -1;

        /*
         * Are You There?
         */
        case AYT:
            socketwrite(tsk->sock, "\r\n[Yes]\r\n", 9);
            return -1;

        /*
         * Abort Output
         */
        case AO:
            return -1;

        /*
         * Erase Character and
         * Erase Line
         */
        case EC:
        case EL:
            return -1;

        /*
         * Check for urgent data...
         */
        case DM:
            return -1;

        /*
         * Begin option subnegotiation...
         */
        case SB:
            tsk->state = TS_SB;
                return -1;

        case WILL:
            tsk->state = TS_WILL;
                return -1;

        case WONT:
            tsk->state = TS_WONT;
                return -1;

        case DO:
            tsk->state = TS_DO;
                return -1;

        case DONT:
            tsk->state = TS_DONT;
                return -1;
        case EOR:
            return -1;

        /*
         * Handle RFC 10xx Telnet linemode option additions
         * to command stream (EOF, SUSP, ABORT).
         */
        case xEOF:
            return -1;

        case SUSP:
            return -1;

        case ABORT:
            return -1;

        case IAC:
            return c;
            return -1;
        }
        tsk->state = TS_DATA;
        break;

    case TS_SB:
        if (c == IAC) {
            tsk->state = TS_SE;
        } else {
//            SB_ACCUM(c);
        }
        break;

    case TS_SE:
        if (c != SE) {
            if (c != IAC) {
                tsk->state = TS_IAC;
                goto gotiac;
            }
//            SB_ACCUM(c);
            tsk->state = TS_SB;
        } else {
            tsk->state = TS_DATA;
        }
        break;

    case TS_WILL:
        tsk->state = TS_DATA;
            break;

    case TS_WONT:
        tsk->state = TS_DATA;
            break;

    case TS_DO:
        tsk->state = TS_DATA;
            break;

    case TS_DONT:
        tsk->state = TS_DATA;
            break;

    default:
        printf("telnetd: panic state=%d\n", tsk->state);
        exit(1);
    }
    return -1;
}


/*****************************************************************************
* FunctionName
*  new_connection
*
* Description of the function
*  Handles the creating of a new taskwindow when a connection attempt is made
*
* Assumptions
*
* Inputs
*
* Outputs
*
* Returns
*****************************************************************************/

static void new_connection (void) {
    char buf[256];
    task_block* new_task = 0;
    static const char iwillecho[3] = { IAC, WILL, TELOPT_ECHO };

    new_task = _kernel_RMAalloc (sizeof *new_task);

    if (new_task == 0) {
        dprintf (("", "couldn't claim memory for new task"));
        return;
    }

    new_task->state = TS_DATA;
    new_task->esc_state = -1;
    new_task->flags = 0;

    /* accept the connection */
    if ((new_task->sock = accept (sock, 0, 0)) == 0) return;

    /* enable internet events on the socket */
    if (socketioctl(new_task->sock, FIOASYNC, &i) < 0) return;

    /* mark it non-blocking */
    if (socketioctl(new_task->sock, FIONBIO, &i) < 0) return;

    /* tell the telnet terminal that we echo characters */
    socketwrite(new_task->sock, iwillecho, 3);

    /* start the taskwindow */
    sprintf (buf, "TaskWindow -name TServerTW -ctrl -txt %d -task %d",
        (int) new_task,
        task_id);
    wimp_start_task (buf, 0);

    new_task->next = root_task;
    root_task = new_task;

    dprintf(("", "new task created, %p\n", new_task));
}

/*****************************************************************************
* FunctionName
*  data_received
*
* Description of the function
*  Data has been received on one or more of our task sockets
*
* Assumptions
*
* Inputs
*   our poll block
*
* Outputs
*
* Returns
*****************************************************************************/

static void data_received (WimpPollBlock* block) {
    int rval;
    task_block* tsk = root_task;
    static char recvbuf[RECVBUFSIZE];

    while (tsk) {

        /* Don't do anything if we've not received anything */
        if ((tsk->flags & Task_InternetEvent) == 0) {
            tsk = tsk->next;
            continue;
        }

        dprintf (("", "data received for tsk %p\n", tsk));

        /* Read the data */
        while ((rval = socketread(tsk->sock, recvbuf, RECVBUFSIZE)) >= 0) {

            /* if rval == 0 then the client has ended the connection */
            if (rval == 0) {
                dprintf (("", "client has ended connection\n"));
                block->user_message.hdr.size = sizeof block->user_message.hdr;
                block->user_message.hdr.action_code = TaskWindow_Morite;
                wimp_send_message (Wimp_EUserMessage, block, tsk->task_id, 0,0);
                break;

            /* if rval is positive, it's the number of characters received */
            } else if (rval > 0) {
                int i;

                /* we're going to write data directly into the message block */
                char* iptr = block->user_message.data.bytes + 4;

                /* loop through the received data passing the characters through
                the state machine */
                for (i = 0; i < rval; ++i) {
                    int c = recv_char (tsk, recvbuf[i]);
                    dprintf (("", "%d -> %d\n", recvbuf[i], c));
                    if (c != -1) *iptr++ = c;
                }

                /* set up the wimp message and send it */
                block->user_message.hdr.action_code = TaskWindow_Input;
                block->user_message.hdr.size = 256;
                block->user_message.data.words[0] = iptr -
                    block->user_message.data.bytes - 4;
                wimp_send_message (Wimp_EUserMessage, block, tsk->task_id, 0,0);
            }
        }

        /* Clear the flag */
        tsk->flags ^= Task_InternetEvent;
        tsk = tsk->next;
    }
}

/*****************************************************************************
* FunctionName
*  pollword_nonzero
*
* Description of the function
*  handle pollword going nonzero i.e. internet event
*
* Assumptions
*  We can only handle the last internet event that occurred since the last
*  wimp poll.
*
* Inputs
*  WimpPollBlock* block: the wimp poll block.
*
* Outputs
*
* Returns
*****************************************************************************/

static void pollword_nonzero (WimpPollBlock* block)
{
    int temp = pollword;

    dprintf (("","pollword is: %x\n", pollword));

    /* zero the pollword as soon as possible */
    pollword = 0;

    /* If we receive a message on our listening socket: */
    if (temp & TServer_PollWord_RecvSock) new_connection ();

    /* If we receive a message on our comms socket: */
    if (temp & TServer_PollWord_MsgSock) data_received (block);

    /* If we receive a debugit message, send the data on */
    if (temp & TServer_PollWord_DebugIt && root_task != 0) {
        int size;
        static char block[258];

        do {
            /* if we get an error, set size to zero so that we stop */
            if (_swix (DebugIt_GetString, _IN(1) | _OUT(0), block, &size))
                size = 0;

            /* only send data if there is some! */
            if (size > 0) {

                /* terminate with a CR */
                block[size] = '\r';
                block[size+1] = '\n';
                socketwrite(root_task->sock, block, size + 2);
            }

        } while (size > 0);
    }
}

/*****************************************************************************
* FunctionName
*  taskwindow_output
*
* Description of the function
*  Handle output from the taskwindow (back to the client)
*
* Assumptions
*
* Inputs
*  WimpPollBlock* block: the wimp poll block.
*
* Outputs
*
* Returns
*****************************************************************************/

static void taskwindow_output (WimpPollBlock* block)
{
    task_block* tsk = root_task;
    while (tsk) {
        if (tsk->task_id == block->user_message.hdr.sender) break;
        tsk = tsk->next;
    }

    /* Don't do anything if we don't have a message socket */
    if (tsk) {
        int i, j;
        char* ptr = block->user_message.data.bytes + 4;
        int size = block->user_message.data.words[0];
        for (i = 0; i < size; ++i) {

            /* count up to the first control character */
            for (j = i; j < size; ++j) {
                dprintf(("", "TW:%d\n", ptr[j]));
                switch (ptr[j]) {
                case 8:
                case 10:
                case 13:
                    continue;
                case 9:
                case 127:
                    break;
                default:
                    if (ptr[j] >= 127) {

                        /* zero out these characters as they can cause
                        strange effects in the client */
                        ptr[j] = '.';
                        continue;
                    }
                    if (ptr[j] >=32) continue;
                }
                break;
            }

            /* if we've got anywhere, send out the characters */
            if (j > i) socketwrite(tsk->sock, ptr + i, j - i);

            /* if we hit a control character, send an escape
               sequence */
            if (j < size && (ptr[j] < 32 || ptr[j] == 127))
                switch (ptr[j]) {
                    case 9:
                        socketwrite (tsk->sock, "\x1b[C", 3);
                        break;
                    case 12:
                        socketwrite (tsk->sock, "\x1b[2J\x1b[H", 7);
                        break;
                    case 21:
                        socketwrite (tsk->sock, "\x1b[2K", 4);
                        break;
                    case 127:
                        dprintf(("","erase\n"));
                        /* send all deletes together */
                        {
                            int k, l;
                            char buf[10];
                            for (k = 1; j + k < size && ptr[j+k] == 127; ++k);
                            l = sprintf (buf, "\x1b[%dD\x1b[%dX", k, k);
                            dprintf(("", "Writing: '%s'\n", buf));
                            socketwrite(tsk->sock, buf, l);
                            j += k - 1;
                        }
                        break;
                }

            /* bring i up to date */
            i = j;
        }
    }
}

/*****************************************************************************
* FunctionName
*  vtcommand
*
* Description of the function
*  Send a VT type command from the current task window
*  Does nothing if not sent from a registered task window.
*
* Assumptions
*
* Inputs
*  none
*
* Outputs
*
* Returns
*  void
*****************************************************************************/

void vtcommand (const char* com) {
    int task, len;
    task_block* tsk;
    char* our_com;

    /* find current task handle */
    if (_swix (Wimp_ReadSysInfo, _IN(0) | _OUT(0), 5, &task)) return;
    tsk = root_task;

    /* is this one of our tasks? return if not */
    while (tsk) {
        if (tsk->task_id == task) break;
        tsk = tsk->next;
    }

    if (tsk->task_id != task) return;

    /* count the length to a control character */
    dprintf (("", "String:\n"));
    for (len = 0; com[len] > 31; len++) dprintf (("", "%d\n", com[len]));
    dprintf (("", "Length = %d, str = '%.*s'\n", len, len, com));

    our_com = malloc (1 + len + 1);
    if (our_com == 0) return;
    sprintf (our_com, "\x1b%.*s", len, com);

    dprintf(("", "Writing: '%s'\n", our_com));
    socketwrite(tsk->sock, our_com, 1 + len);
    free (our_com);
}


/*****************************************************************************
* FunctionName
*  main
*
* Description of the function
*  The main entry point for the wimp part of the module
*
* Assumptions
*
* Inputs
*  none
*
* Outputs
*
* Returns
*  void
*****************************************************************************/

void tserver (void) {
    WimpPollBlock block;
    int event_code;
    int messages[3] = {TaskWindow_Output, TaskWindow_Ego, 0};

    /* don't attempt to start the task again */
    if (task_id > 0) {
        dprintf (("", "Not starting tserver: task_id = %d\n", task_id));
        return;
    }

    wimp_initialise (310, "TServer", messages, 0, &task_id);

    dprintf (("", "TServer starting polling\n"));
    for (;;) {
        wimp_poll (
            Wimp_Poll_NullMask | Wimp_Poll_PollWord,
            &block,
            &pollword,
            &event_code);

        dprintf(("", "Wimp event %d\n", event_code));

        switch (event_code) {
        case Wimp_EPollWordNonZero: pollword_nonzero (&block); break;
        case Wimp_EUserMessage:
        case Wimp_EUserMessageRecorded:
            switch (block.user_message.hdr.action_code) {
            case Wimp_MQuit:
                return;
            case TaskWindow_Output:
                taskwindow_output (&block);
                break;
            case TaskWindow_Ego:
                dprintf (("", "Taskwindow started, txt = %x, task = %x\n",
                    block.user_message.data.words[0],
                    block.user_message.hdr.sender));
                ((task_block*)(block.user_message.data.words[0]))->task_id =
                    block.user_message.hdr.sender;
                break;
            case TaskWindow_Morio:
                {
                    task_block* tsk = root_task, *last_tsk = 0;
                    dprintf (("", "task %x is dying\n",
                        block.user_message.hdr.sender));
                    while (tsk) {
                        dprintf (("", "scanning tsk %p\n", tsk));
                        if (tsk->task_id == block.user_message.hdr.sender) {
                            socketclose (tsk->sock);
                            if (last_tsk) last_tsk = tsk->next;
                            else root_task = 0;
                            _kernel_RMAfree (tsk);
                            break;
                        }
                        last_tsk = tsk;
                        tsk = tsk->next;
                    }
                }
                break;
            }
        }
    }
}
