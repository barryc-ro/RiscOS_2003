
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:APCS.<APCS>
        GET     Hdr:ModHand

STACK_SIZE * 8192


	IMPORT	|Image$$RO$$Base|
	IMPORT	|_Lib$Reloc$Off$DP|
	IMPORT	tserver
        IMPORT  appstack

	EXPORT	|_entermodule|

	AREA	|_entermodulearea|,REL,CODE,READONLY

        ; Entered in USR26 or USR32 mode
|_entermodule|
	LDR	r10,[r12]	; Workspace ptr from private word (we need r12 later)
	LDMIB	r10,{v2,v3}	; Module relocations
	MOV	r0,#ModHandReason_Claim
	MOV	r3,#STACK_SIZE
	SWI	OS_Module

	LDR	v4, =appstack ; A Ptr to stack variable
	ADD	v4, v4, v3    ; gets relocated for user variable
        STR     r2, [v4]      ; module needs to know the stack
	MOV	sl,r2
	ADD	sp,sl,r3
	STMIA	sl,{v2,v3}

	; This is equivalent of 'ADD r10, r10, #0' + |_Lib$Reloc$Off$DP|
	DCD	|_Lib$Reloc$Off$DP| + &E28AA000

	MOV	fp,#0
        MOV     r0, r12
	BL	tserver

	; This is equivalent of 'SUB r10, r10, #0' + |_Lib$Reloc$Off$DP|
	DCD	|_Lib$Reloc$Off$DP| + &E24AA000

	SWI	OS_Exit

; call the SWP instruction
; E: r0 = value to set
;    r1 = address of word
; X: r0 = value of word
        EXPORT  atomic_swap
atomic_swap
        MOV     r2, r1
        MOV     r1, r0
        SWP     r0, r1, [r2]
        MOV     pc, lr

tw_prepare
	DCB 4				; VDU 4
	DCB 23,1,0,0,0,0,0,0,0,0	; turn cursor off
tw_endprepare
 ALIGN

; set the width of the screen
	EXPORT	taskwindow_postfilter
taskwindow_postfilter
	STMFD	sp!, {r0-r1,lr}
	SWI	XOS_WriteI + 28	; set the current text window
	MOV	r0, r12		; word containing text window
	MOV	r1, #4
	SWI	XOS_WriteN

	ADR	r0, tw_prepare		; text mode, no cursor
	MOV	r1, #tw_endprepare - tw_prepare
	SWI	XOS_WriteN

	LDMFD	sp!, {r0-r1,pc}

	END

; EOF cstart.s
