/* -*-c-*- */

/* gopher.h */

/* Headders for the gopher transport module */

/* Standard port, but this varies a lot across the Internet */
#define GOPHER_PORT	70

/* How many cs between checks to see if a connection has been made */
#define TICKER_RATE	10

/* How to return from a handler */
#define VIA_R14		1
#define VIA_STACK     	0

/* Event number for the internet event */
#define Event_Internet	0x10

/* The UNUSED macro stops the compiler complaining */
#define UNUSED(x) (x=x)

#define MONOTIME		(*(unsigned int *)0x10C) /* RISC OS runery! */

/* The longest single line we can cope with */
/* We can loose the end off a header line if the line exceeds this length */
#define MAX_INPUT	2048

/**********************************************************************/
/*
 * Now we get the data structures specific to this module
 */

typedef enum {
    gopher_close_DELETE_FILE = 0x01, /* Delete the file when the connection is closed */
    gopher_close_SET_TYPE = 0x02, /* Set the file type according to Content-type: header line */
    gopher_close_DELETE_BODY = 0x04 /* Delete the body when the conneciton is closed */
    } gopher_close_flags;

#if 0
typedef enum {
    status_NEW = 0,
    status_CONNECTING,
    status_REQUESTING,
    status_REQUEST_HEADERS,	/* not used */
    status_REQUEST_BODY,	/* not used */
    status_WAITING,
    status_GETTING_HEADERS,	/* not used */
    status_GETTING_BODY,
    status_CONNECT_FAILED,
    status_REQUEST_FAILED,
    status_COMPLEATED
    } gopher_status_code;
#else
#define gopher_status_code transfer_status
#endif

typedef struct gopher_header_item {
    struct gopher_header_item *next;
    char *key;
    char *value;
} gopher_header_item;

typedef struct gopherconn {
    int magic;			/* Magic number to check bogus handles */
    struct gopherconn *next;	/* Pointer to the next one */
    struct gopherconn *prev;	/* POinter to the previous one */
    int poll_word;		/* Goes non-zero on completion or error */
    gopher_status_code status;	/* Connection status */
    char *object;		/* Object to be fetched */
    gopher_header_item *sendhead; /* Headers to be sent with the request */
    int socket;			/* Socket number, or -1 after the socket is closed */
    struct sockaddr_in sa;	/* Address we want to connect to */
    char *fname;		/* Name of file for the data */
    int fh;			/* RISC OS handle to the above file when open */
    char *bname;		/* Name of file for the body */
    int bh;			/* RISC OS handle to the above file when open */
    int data_size;		/* Given the value -1 if we do not know */
    int data_so_far;		/* Amount of data so far EXCLUDING headers */
    gopher_header_item *headers; /* Linked list of header items */
    int rc;			/* Return code, -1 until we know */
    char *message;		/* Message with return code, NULL until we know */
    int buf_off;		/* New data goes here */
    int buf_used;		/* Data already taken up to here */
    char *buffer;		/* Data buffer for incoming data */
} gopher_connection;

#define GOPHER_MAGIC	0x4582FB29

/* Utility functions */
char *strdup(char *);
int strcasecmp(char *s1, char *s2);

/* GOPHER functions */
_kernel_oserror *gopher_check_handle(gopher_connection *c);
_kernel_oserror *gopher_close_handle(gopher_connection *c, int flags);
_kernel_oserror *gopher_free_headers(gopher_header_item *h);

static _kernel_oserror *gopher_open(gopher_open_args *args);
static _kernel_oserror *gopher_status(gopher_status_args *args);
static _kernel_oserror *gopher_close(gopher_close_args *args);

int gopher_file_size(char *fname);
void gopher_send_request(gopher_connection *c);
int gopher_send_request_headers(gopher_connection *c);
int gopher_send_request_body(gopher_connection *c);
char *gopher_getline(gopher_connection *c, int read);
void gopher_process_header_line(gopher_connection *c, char *l);
void gopher_process_response_line(gopher_connection *c, char *l);
void gopher_flush_data_to_file(gopher_connection *c);
void gopher_socket_close(gopher_connection *c);
void gopher_check_special_headers(gopher_connection *c, gopher_header_item *hi);
