/* q.h - Basic arbitary length data queue */

/* Remove if defined elsewhere */

#if 1
#define BOOL            int
#define FALSE           0
#define TRUE            1
#define QSLURP_SIZE     1024
#endif

typedef struct qelem
{
    char                *base;      /* Start of allocated memory */
    int                 first;      /* Offset to first used byte */
    int                 used;       /* Number of used bytes */
    int                 total;      /* Size of allocated region */
    struct qelem        *early;     /* Bytes queued earlier */
    struct qelem        *later;     /* Bytes queued later */
} QELEM, * PQELEM;

typedef struct
{
    struct qelem        *head;
    struct qelem        *tail;
    int                 used_bytes;
    int                 advsize;
    BOOL                closed;
} QUEUE, * PQUEUE;

extern BOOL queue_init(PQUEUE qp, int advsize);
extern BOOL queue_remove(PQUEUE qp, char *base, int bytes);
extern BOOL queue_append(PQUEUE qp, char *base, int bytes);
extern BOOL queue_stradd(PQUEUE qp, char *str);
extern int queue_count(PQUEUE qp);
extern int queue_haveline(PQUEUE qp);
extern int queue_search(PQUEUE pq, int c);
extern void queue_drain(PQUEUE pq);
extern void queue_free(PQUEUE pq);


/* eof q.h */

