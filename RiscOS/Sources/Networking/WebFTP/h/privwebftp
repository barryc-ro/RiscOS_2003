/* privwebftp.h - Part of the ANT Web Browser  */
/* Background FTP transfer module private defs */
/* (C) ANT Limited 1995. All rights reserved.  */



#ifndef included_privwebftp_h
#define included_privwebftp_h

#ifndef DEBUG
# define DEBUG 0
# undef REMOTE_DEBUG
#endif

#ifdef REMOTE_DEBUG
#include "debug/remote.h"
#endif

#ifdef REMOTE_DEBUG
extern debug_session *db;
#else
extern void *db;
#endif

/*****************************************************************************/


#define MAXSTACK            10
#define Internet_Event      19
#define Socket_Async_Event  1
#define Socket_Urgent_Event 2
#define Socket_Broken_Event 3
#define LF                  '\n'
#define CR                  '\r'
#define ENTER_MUTEX         { const int oldirqs = _kernel_irqs_disabled(); _kernel_irqs_off();
#define EXIT_MUTEX          if (! oldirqs) _kernel_irqs_on(); }
#define TICKER_RATE         7
#define MAGIC               0xce67b308      /* Unlikely 32 bit check value */
#define GUARDED(expr)       if ((ep=expr) != NULL) goto bad
#define UNUSED(x)           x = x
#define DIRSEP              '/'
#define COMMA               ','
#define DOT                 '.'
#define MAXLOGIN            (1 * 60 * 100)
#define MONONOW             (*(int*)0x10c)
#if 0
#define MKHOSTNAME(sin_addr) inet_ntoa(sin_addr)	/* IP number */
#else
#define MKHOSTNAME(sin_addr) mkhostname(sin_addr)	/* IP name if available */
#endif

typedef unsigned long monotime;

typedef enum { VIA_STACK, VIA_R14 } RETURN_METHOD;

typedef enum { TYPE_UNKNOWN, TYPE_FILE, TYPE_DIR, TYPE_LINK, TYPE_OTHER } FILE_TYPE;

#ifdef REMOTE_DEBUG

void _debug_printf(char *format, ...);

#if     DEBUG && VERBOSEDEBUG
#define dbg(x)          _debug_printf x
#define dbg2(x)         _debug_printf x
#elif   DEBUG
#define dbg(x)          _debug_printf x
#define dbg2(x)         /* beware the semicolon though! */
#else
#define dbg(x)          /* beware the semicolon though! */
#define dbg2(x)         /* beware the semicolon though! */
#endif

#else

#if     DEBUG && VERBOSEDEBUG
#define dbg(x)          printf x
#define dbg2(x)         printf x
#elif   DEBUG
#define dbg(x)          printf x
#define dbg2(x)         /* beware the semicolon though! */
#else
#define dbg(x)          /* beware the semicolon though! */
#define dbg2(x)         /* beware the semicolon though! */
#endif

#endif

typedef enum
{
    NO_ERROR,
    ERROR_1,
    ERROR_2,
    ERROR_3,
    ERROR_4,
    ERROR_5,
    ERROR_6,
    ERROR_7,
    ERROR_8,
    ERROR_NO_SUCH_SWI,
    ERROR_UNKNOWN_COMMAND,
    ERROR_NO_SESSION,
    ERROR_SESSION_ALREADY_CLOSED,
    ERROR_SESSION_INVALID
#ifdef CSFS
    ,ERROR_CSFS
#endif
} ERROR_CODE;

#if DEBUG

static char *error_code_names [] =
{
    "NO_ERROR",
    "ERROR_1",
    "ERROR_2",
    "ERROR_3",
    "ERROR_4",
    "ERROR_5",
    "ERROR_MEMORY",
    "ERROR_SOCKET",
    "ERROR_FILE",
    "ERROR_NO_SUCH_SWI",
    "ERROR_UNKNOWN_COMMAND",
    "ERROR_NO_SESSION",
    "ERROR_SESSION_ALREADY_CLOSED",
    "ERROR_SESSION_INVALID"
};

#endif


#if 0
static void my_free(void *vp)
{
    dbg(("FREE: %p\n", vp));
    free(vp);
}

static void *my_malloc(size_t bytes)
{
    void *vp = malloc(bytes);
    dbg(("MALLOC: %d => %p\n", bytes, vp));
    return vp;
}

static void *my_calloc(size_t bytes1, size_t bytes2)
{
    void *vp = calloc(bytes1, bytes2);
    dbg(("CALLOC: %d %d => %p\n", bytes1, bytes2, vp));
    return vp;
}

#define free(x)         my_free(x)
#define malloc(x)       my_malloc(x)
#define calloc(x,y)     my_calloc(x,y)

#endif


#define CODE_0YZ        0       /* No data yet - return from poll */
#define CODE_1YZ        1       /* Positive Preliminary reply - error */
#define CODE_2YZ        2       /* Positive Completion reply - okay */
#define CODE_3YZ        3       /* Positive Intermediate reply - error */
#define CODE_4YZ        4       /* Transient Negative Completion reply - error */
#define CODE_5YZ        5       /* Permanent Negative Completion reply - error */
#define CODE_6YZ        6       /* Local memory error - error */
#define CODE_7YZ        7       /* Local socket error - error */
#define CODE_8YZ        8       /* Local file error - error */

#define GROUP_BLOCK                     CODE_0YZ
#define GROUP_POSITIVE_PRELIMINARY      CODE_1YZ
#define GROUP_POSITIVE_COMPLETION       CODE_2YZ
#define GROUP_POSITIVE_INTERMEDIATE     CODE_3YZ
#define GROUP_NEGATIVE_TRANSIENT        CODE_4YZ
#define GROUP_NEGATIVE_COMPLETION       CODE_5YZ
#define GROUP_MEMORY                    CODE_6YZ
#define GROUP_SOCKET                    CODE_7YZ
#define GROUP_FILE                      CODE_8YZ

#define GROUP_OKAY                      CODE_2YZ


typedef enum
{
    state_initialise = 0,

    state_accepted,
    state_auth_sent_pass,
    state_auth_sent_user,
    state_check_existing_server,
    state_check_sent_cwd,
    state_close_existing_server,
    state_closed_existing_server,
    state_data_transfer,
    state_data_transfer1,
 #ifdef FTP_PUT
    state_data_transferPUT,
 #endif
    state_directory_change,
    state_done_transfer,
    state_done_transfer1,
    state_done_transfer2,
    state_find_server,
    state_finished,
    state_initialise_new_server,
    state_is_it_a_directory,
    state_is_it_a_directory_pre,
    state_no_existing_server,
    state_no_pasv1,
    state_no_pasv2,
    state_no_pasv2a,
    state_no_pasv3,
    state_opened_control_socket,
    state_pasv_connect1,
    state_pasv_connect2,
    state_pasv_connect3,
    state_pasv_not_supported,
    state_pasv_supported,
    state_pop_okay,
    state_pop_prelim,
    state_ready_to_go,
    state_send_directory,
    state_sent_cwd,
    state_sent_cwd_post,
    state_sent_cwd_slash,
    state_sent_pasv,
    state_sent_pwd,
    state_sent_quit,
    state_sent_type,
    state_start_negotiating,
    state_subr_connect,
    state_subr_do_accept,
    state_subr_ready_for_accept,
    state_subr_send_quit,
    state_subr_send_retr,
    state_subr_sent_quit,
    state_subr_wait_other_close,
    state_wait_other_close,
    state_sent_generic_command,
    state_sent_rename_from,
    state_sent_rename_to,
    state_diagnostics,
    state_error,
    state_last_state
} STATE_CODE;

#if DEBUG

static char *state_code_names [state_last_state + 1] =
{
    "state_initialise              ",

    "state_accepted                ",
    "state_auth_sent_pass          ",
    "state_auth_sent_user          ",
    "state_check_existing_server   ",
    "state_check_sent_cwd          ",
    "state_close_existing_server   ",
    "state_closed_existing_server  ",
    "state_data_transfer           ",
    "state_data_transfer1          ",
 #ifdef FTP_PUT
    "state_data_transferPUT        ",
 #endif
    "state_directory_change        ",
    "state_done_transfer           ",
    "state_done_transfer1          ",
    "state_done_transfer2          ",
    "state_find_server             ",
    "state_finished                ",
    "state_initialise_new_server   ",
    "state_is_it_a_directory       ",
    "state_is_it_a_directory_pre   ",
    "state_no_existing_server      ",
    "state_no_pasv1                ",
    "state_no_pasv2                ",
    "state_no_pasv2a               ",
    "state_no_pasv3                ",
    "state_opened_control_socket   ",
    "state_pasv_connect1           ",
    "state_pasv_connect2           ",
    "state_pasv_connect3           ",
    "state_pasv_not_supported      ",
    "state_pasv_supported          ",
    "state_pop_okay                ",
    "state_pop_prelim              ",
    "state_ready_to_go             ",
    "state_send_directory          ",
    "state_sent_cwd                ",
    "state_sent_cwd_post           ",
    "state_sent_cwd_slash          ",
    "state_sent_pasv               ",
    "state_sent_pwd                ",
    "state_sent_quit               ",
    "state_sent_type               ",
    "state_start_negotiating       ",
    "state_subr_connect            ",
    "state_subr_do_accept          ",
    "state_subr_ready_for_accept   ",
    "state_subr_send_quit          ",
    "state_subr_send_retr          ",
    "state_subr_sent_quit          ",
    "state_subr_wait_other_close   ",
    "state_wait_other_close        ",
    "state_sent_generic_command    ",
    "state_sent_rename_from        ",
    "state_sent_rename_to          ",
    "state_diagnostics             ",
    "state_error                   ",
    "state_last_state              "

};

#endif /* DEBUG */

/* Structure describing an open server connection */

typedef struct ftp_server
{
    struct ftp_server   *prev;
    struct ftp_server   *next;

    int                 contsock;       /* The command socket */
    struct sockaddr_in  contaddr;       /* For the command channel */
    char                *user_name;     /* for USER */
    char                *passwd;        /* for PASS */
    char                *acct;          /* for ACCT */
    char                *login_pwd;     /* Result of PWD on login */

    monotime            last_used;      /* For timeout closing */
    monotime            maxidle;        /* Maximum idle time */
    BOOL                absorb_error;   /* Error is recoverable for server */
    BOOL                dont_reuse;     /* Eg due to server connection error */
    BOOL                sent_quit;
    unsigned char       uses;           /* How useful */

    struct sess         *sess;          /* Session attached to or NULL */
} SERVER, * PSERVER;


/* A session structure - requires an ftp_server to operate through */

typedef struct sess
{
    unsigned int        magic;          /* Check for valid SESS */
    struct sess         *prev;          /* Current linked list */
    struct sess         *next;          /* ditto */

    PSERVER             server;         /* Server attached to or NULL */

    char                *send_buffer;   /* Temp send() buffer */
    int                 send_offs;      /* How many bytes left to send */
    int                 send_left;      /* Starting how far into the buffer */

    int                 *sock;          /* Current socket */
    struct sockaddr_in  *addr;          /* Current address */

    int                 datasock;       /* Socket for data communications */
    struct sockaddr_in  dataaddr;       /* Address for data communications */

    struct sockaddr_in  servaddr;       /* Address for server matching */

    char                *user_name;     /* for USER */
    char                *passwd;        /* for PASS */
    char                *acct;          /* for ACCT */

    FILE_TYPE           pathtype;
    char                *origpath;      /* for presentation use only */
    char                *origdir;       /* Original full dir name */
    char                *dir;           /* Pointer into dir */
    char                *leaf;          /* The leaf name */
    char                *local_name;    /* RISC OS output file name */
    int                 ro_handle;      /* RISC OS file handle */
    int                 bytes_so_far;   /* How many bytes usefully transferred */
    int                 total_bytes;    /* Total size or -1 if not known */

    int                 rc;             /* Basic single digit group number */
    FTP_STATUS          ftp_status;     /* Value for user */
    BOOL                closed;         /* Close SWI has been used on session */
    int                 state;          /* during processing */
    int                 stack[MAXSTACK];/* stack of states to permit */
    int                 stackptr;       /* subroutines in state machine */

#define INPUTQ          0
#define MULTIQ          1
#define DATAQ           2
#define HTMLQ           3
#define NUMQS           4

    QUEUE               Q[NUMQS];
    char                resp1,          /* The 4 characters of the FTP */
                        resp2,          /* response code. resp4 is the */
                        resp3,          /* '-' IN multi-line response */
                        resp4;

    BOOL                file_failed;    /* Not a file - maybe a dir? */
    BOOL                created_server;
    void (* retrieve_action) (struct sess *);
    void (* diverted_lines)  (struct sess *);
    int                 maxidle;

    int                 ftp_cmd;        /* What function is to be done */
    char 		*extra;		/* Extra parameter for rename */
#ifdef CSFS
    char                *error_msg;     /* error message to return to CSFS */
#endif
#ifdef FTP_PUT
    int         	flags;          /* As provided on entry to swi */
#endif

} SESS, * PSESS;


/*****************************************************************************/

#include "autofns.h"

extern volatile BOOL    callback_scheduled,
                        callback_threaded,
                        consider_pending,
                        worth_tidying_up,
                        worth_scheduling,
                        divert_lines,
                        want_cmd_followup;

extern int              last_status,
                        select_errors,
                        timer_calls,
                        event_calls,
                        callback_calls,
                        servers_to_quit;

extern PSESS            pending_list,
                        active_list,
                        done_list;

extern PSERVER          server_list;

extern _kernel_oserror  errblk;

extern char             databuf[4096];

extern void *           private_word;

extern int              inetevent_entry(int);
extern int              timer_entry(int);
extern int              callback_entry(int);



#endif /* included_privwebftp_h */

/* eof webftp.h */

