/* -*-c-*- */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>


#ifdef RISCOS
#include "tcplibs.h"
#endif

#include "kernel.h"
#include "swis.h"
#include "files.h"          /* Nicko's quick RO file library from the http module */
#include "q.h"
#include "status.h"
#include "webftp.h"
#include "privwebftp.h"

extern int ro_fopen(char *fname, int mode)
{
    int magic;
    int fh;

    switch (mode)
    {
        case RO_OPEN_READ:
            magic = 0x43;
            break;
        case RO_OPEN_WRITE:
            magic = 0x83;
            break;
        case RO_OPEN_RW:
            magic = 0xc3;
            break;
        default:
            return -1;
    }
    fh = _kernel_osfind( magic , fname);

    if ( fh == 0 )
        fh = -1;

    return fh;
}

extern int ro_fclose(int fh)
{
    if (fh == 0)
	return 0;

    return _kernel_osfind(0, (char*) fh);
}

extern int ro_fwrite(void *ptr, int size, int items, int fh)
{
    _kernel_osgbpb_block gpb;

    dbg(("\n\n*** SHOULD YOU REALLY BE USING ro_fwrite() ?***\n\n"));

    gpb.dataptr = ptr;
    gpb.nbytes = size * items;

    _kernel_osgbpb(2, fh, &gpb);

    return (size * items) - gpb.nbytes;
}

extern int ro_fread(void *ptr, int size, int items, int fh)
{
    _kernel_osgbpb_block gpb;

    gpb.dataptr = ptr;
    gpb.nbytes = size * items;

    _kernel_osgbpb(4, fh, &gpb);

    return (size * items) - gpb.nbytes;
}


extern int ro_setpos(int handle, int pos)
{
    _kernel_swi_regs r;

    r.r[0] = 1;
    r.r[1] = handle;
    r.r[2] = pos;

    return _kernel_swi(OS_Args, &r, &r) == NULL ? 0 : -1;
}


/* Set the extent of an opened file. */

extern int ro_set_extent(int ro_handle, int size)
{
    _kernel_swi_regs r;

    r.r[0] = 3;
    r.r[1] = ro_handle;
    r.r[2] = size;

    if ( _kernel_swi(OS_Args, &r, &r) != NULL )
        return GROUP_FILE;

    return GROUP_OKAY;
}

/* Read the extent of an opened file. */
#ifdef FTP_PUT
extern int ro_get_extent(int ro_handle, int *size)
{
    _kernel_swi_regs r;

    r.r[0] = 2;
    r.r[1] = ro_handle;

    if ( _kernel_swi(OS_Args, &r, &r) != NULL )
        return GROUP_FILE;

    *size = r.r[2];
    return GROUP_OKAY;
}
#endif

extern int ro_fwritepos(void *ptr, int size, int items, int fh, int pos)
{
  _kernel_osgbpb_block gpb;
  gpb.dataptr = ptr;
  gpb.nbytes = size * items;
  gpb.fileptr = pos;
  _kernel_osgbpb(1, fh, &gpb);
  return (size * items) - gpb.nbytes;
}

#ifdef FTP_PUT
extern int ro_freadpos(void *ptr, int size, int items, int fh, int pos)
{
    _kernel_osgbpb_block gpb;

    gpb.dataptr = ptr;             /* pointer to area to place data */
    gpb.nbytes = size * items;	   /* number of bytes to read */
    gpb.fileptr = pos;		   /* sequential file pointer */

    _kernel_osgbpb(3, fh, &gpb);

    return (size * items) - gpb.nbytes;
}
#endif

extern void ro_unlink(char *fname)
{
    remove(fname);
}

