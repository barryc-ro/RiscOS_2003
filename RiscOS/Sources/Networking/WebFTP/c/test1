#undef DEBUG
#define DEBUG 1
#undef VERBOSEDEBUG
#define VERBOSEDEBUG 1

/* test1 - program to test webftp module */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>


#include "inetlib.h"
#include "socklib.h"
#include "sys/ioctl.h"
#include "netdb.h"

#include "kernel.h"
#include "swis.h"
#include "files.h"
#include "q.h"
#include "status.h"
#include "webftp.h"
#include "privwebftp.h"

char *machine_name;
char *remote_name;
char *local_file;

PSESS session;



#define ERR_RETURN(err,stmt)   {err = (stmt); if (err) return err;}
#define ERR_GOTO(err,stmt)     {err = (stmt); if (err) goto exit_gracefully;}


void dump_status_out(ftp_status_args *ptr)
{
    printf("Status %d, bytes so far %d, local name %s, file handle %d\n",
        ptr->out.status,
        ptr->out.data_so_far, ptr->out.local_name, ptr->out.ro_handle);
    fflush(stdout);
    printf("Status  (%d), bytes so far %d, local name %s, file handle %d\n",
        /*ftp_status_names[ptr->out.status],*/ ptr->out.status,
        ptr->out.data_so_far, ptr->out.local_name, ptr->out.ro_handle);
}


_kernel_oserror *
do_an_open(void)
{
    ftp_open_args args;
    struct sockaddr_in sockaddr_in;
    _kernel_oserror *ep;
    struct hostent *hostent;

    memset(&sockaddr_in, 0, sizeof(sockaddr_in));

    hostent = gethostbyname(machine_name);

    if (hostent == NULL)
    {
        fprintf(stderr, "failed to resolve %s\n", machine_name);
        exit(1);
    }

    sockaddr_in.sin_family = AF_INET;
    sockaddr_in.sin_port = htons(21);      /* ftp server */
    sockaddr_in.sin_addr.s_addr = *(u_long*)hostent->h_addr;

    args.in.addr = &sockaddr_in;
    args.in.user_name = "xxxxxx";
    args.in.passwd = "xxxxxx";
    args.in.acct = NULL;
    args.in.path = remote_name;
    args.in.local_name = local_file;
    args.in.generic_cmd = "MKD";
    args.in.flags = 4;

    printf("Issuing WebFTP_Open\n\n\n");

    ERR_RETURN(ep,_kernel_swi(WebFTP_Open,
                    (_kernel_swi_regs *) & args,
                    (_kernel_swi_regs *) & args));
    session = args.out.session;

    return (NULL);
}


_kernel_oserror *
do_status_until_closed(void)
{
    ftp_status_args args;
    FTP_STATUS last_status = -1;

    while (1)
    {
        _kernel_oserror *ep;

        args.in.session = session;

        ERR_RETURN(ep,_kernel_swi(WebFTP_Status,
                        (_kernel_swi_regs *) & args,
                        (_kernel_swi_regs *) & args));


        if (last_status != args.out.status )
        {
            printf("New status: %d, \n", args.out.status);
            last_status = args.out.status;

            if (last_status >= 500)
                break;

        }

    }

    dump_status_out(&args);
    return (NULL);
}



_kernel_oserror *
do_close(void)
{
    ftp_close_args args;
    _kernel_oserror *ep;

    args.in.session = session;
    args.in.flags = 0;

    printf("Issuing WebFTP_Close\n\n\n");

    ERR_RETURN(ep,_kernel_swi(WebFTP_Close,
                    (_kernel_swi_regs *) & args,
                    (_kernel_swi_regs *) & args));
    return (NULL);
}



int main(int argc, char **argv)
{
    _kernel_oserror *err=NULL;

    if (argc != 4)
    {
        fprintf(stderr, "Usage: %s <machine-name> <remote-name> <local-file>\n", argv[0]);
        exit(1);
    }

    machine_name = argv[1];
    remote_name = argv[2];
    local_file = argv[3];
    ERR_GOTO(err,do_an_open());
    ERR_GOTO(err,do_status_until_closed());
    ERR_GOTO(err,do_close());

exit_gracefully:
    if (err)
      printf("Error number 0x%x, error message %s\n", err->errnum,err->errmess);

    return 0;
}





