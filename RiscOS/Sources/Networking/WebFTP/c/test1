#undef DEBUG
#define DEBUG 1

/* test1 - program to test webftp module */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>



#ifdef OS2
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/select.h>
#endif

#ifdef RISCOS
#include <errno.h>
#include "inetlib.h"
#include "socklib.h"
#include "sys/ioctl.h"
#include "netdb.h"
#endif

#include "kernel.h"
#include "swis.h"
#include "files.h"          /* Nicko's quick RO file library from the http module */
#include "q.h"
#include "status.h"
#include "webftp.h"
#include "privwebftp.h"

char *machine_name;
char *remote_name;
extern time_t time(void*);

PSESS session;





void dump_status_out(ftp_status_args *ptr)
{
    printf("Status %d, bytes so far %d, local name %s, file handle %d\n",
        ptr->out.status, 
        ptr->out.data_so_far, ptr->out.local_name, ptr->out.ro_handle); 
    fflush(stdout);
    printf("Status  (%d), bytes so far %d, local name %s, file handle %d\n",
        /*ftp_status_names[ptr->out.status],*/ ptr->out.status, 
        ptr->out.data_so_far, ptr->out.local_name, ptr->out.ro_handle); 
}


void do_an_open(void)
{
    ftp_open_args args;
    struct sockaddr_in sockaddr_in;
    _kernel_oserror *ep;
    struct hostent *hostent;

    memset(&sockaddr_in, 0, sizeof(sockaddr_in));

    hostent = gethostbyname(machine_name);

    if (hostent == NULL)
    {
        fprintf(stderr, "failed to resolve %s\n", machine_name);
        exit(1);
    }

    sockaddr_in.sin_family = AF_INET; 
    sockaddr_in.sin_port = htons(21);      /* ftp server */
    sockaddr_in.sin_addr.s_addr = /*inet_addr("193.35.146.94")*/  * (u_long*) hostent->h_addr;
    
    args.in.addr = &sockaddr_in;
    args.in.user_name = "anonymous";
    args.in.passwd = "borris@ant.co.uk";
    args.in.acct = NULL;
    args.in.path = remote_name /* "/home/ant/docs/Eth_Readme" */ ;
    args.in.local_name = "adfs::4.$.Allocates";

    printf("Issuing WebFTP_Open\n\n\n");

    ep = _kernel_swi(WebFTP_Open, 
                    (_kernel_swi_regs *) & args,
                    (_kernel_swi_regs *) & args);


    printf("\n\n\nReturned with ep %p\n", ep);

    session = NULL;

    if (ep)
    {
        printf("Error number 0x%x, error message %s\n", ep->errnum, ep->errmess);
        exit(1);
    }
    else
        session = args.out.session;
}


void do_status_until_closed(void)
{
    ftp_status_args args;
    FTP_STATUS last_status = -1;

    while (1)
    {
        _kernel_oserror *ep;

        args.in.session = session;
    
        ep = _kernel_swi(WebFTP_Status, 
                        (_kernel_swi_regs *) & args,
                        (_kernel_swi_regs *) & args);
    
        if (ep)
        {
            printf("Error number 0x%x, error message %s\n", ep->errnum, ep->errmess);
            exit(1);
        }

        if (last_status != args.out.status )
        {
            printf("New status: %d, \n", args.out.status/*, ftp_status_names[args.out.status]*/ );
            last_status = args.out.status;

            if (last_status >= 500)
                break;

        }

    }

    dump_status_out(&args);
}



void do_close(void)
{
    ftp_close_args args;
    _kernel_oserror *ep;

    args.in.session = session;
    args.in.flags = 0;

    printf("Issuing WebFTP_Close\n\n\n");

    ep = _kernel_swi(WebFTP_Close, 
                    (_kernel_swi_regs *) & args,
                    (_kernel_swi_regs *) & args);

    printf("\n\n\nReturned with ep %p\n", ep);

    if (ep)
    {
        printf("Error number 0x%x, error message %s\n", ep->errnum, ep->errmess);
        exit(1);
    }


}



int main(int argc, char **argv)
{
    time_t tt;

    if (argc != 3)
    {
        fprintf(stderr, "Usage: %s <machine-name> <remote-name>\n", argv[0]);
        exit(1);
    }

    machine_name = argv[1];
    remote_name = argv[2];

    do_an_open();
    do_status_until_closed();
    do_close();

    return 0;
}





