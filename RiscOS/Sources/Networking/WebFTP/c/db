/************************************************************************/
/*                  Copyright 1997 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#include "all.h"

#ifdef DEBUG_MALLOC

#undef malloc
#undef free
#undef calloc

#include <stdlib.h>
/* 
 * Set of routines used to track down WebFTP memory leaks. #define DEBUG_MALLOC
 * in the makefile and malloc, calloc, free calls will be intersepted and info
 * sent to the current debug channel. Calling *webftpinfo will check the list
 * of currently active malloc blocks checking for corruption at the same time.
 * 
 * Malloced blocks are held in a double linked list as shown below.
 */
/*
        ------------
        | Header   | +0
        ------------
        | Size     | +4
        ------------
        | Previous | +8
        ------------
        | Next     | +12
        ------------
        | ID no    | +16
        ------------
        |          | +20 +...
        | Data     |
        |          |
        ------------
        | Tail     | +<data size>+20
        ------------
 */


static char *id = "RICH";	/* guard word for corruption checking */
static char *anchor=NULL;	/* base of linked list */
static int malloc_count=0;	/* currently active blocks */
static int total_count=0;	/* total number allocated so far */
static int id_number=0;		/* next block id number */

/* ----------------------------------------------------------------- */

static int get_size(char *ptr)
{
  return *(int*)(ptr+4);
}
/* ----------------------------------------------------------------- */
static void set_next(char *ptr,char *next)
{
  *(int*)(ptr+12) = (int)next;
}
/* ----------------------------------------------------------------- */
static char *get_next(char *ptr)
{
  return (char*)*(int*)(ptr+12);
}
/* ----------------------------------------------------------------- */
static void set_previous(char *ptr,char *next)
{
  *(int*)(ptr+8) = (int)next;
}
/* ----------------------------------------------------------------- */
static char *get_previous(char *ptr)
{
  return (char*)*(int*)(ptr+8);
}
/* ----------------------------------------------------------------- */
static void write_guard(char *ptr)
{
  memcpy(ptr,id,sizeof(id));
}
/* ----------------------------------------------------------------- */

void *db_malloc(const char *file,const int line, size_t size)
{
  char *ptr=NULL;

  if ((ptr=(char *)malloc(size+24))==NULL) {
    return NULL;
  }
  memset(ptr,0,size+24);

  write_guard(ptr+0);
  *(int*)(ptr+4)  = size;
  *(int*)(ptr+16) = id_number;
  write_guard(ptr+size+20);
  set_next(ptr,NULL);
  
  if (anchor == NULL) {
    anchor = ptr;
    set_previous(ptr,NULL);
    set_next(ptr,NULL);
  } else {
    set_previous(ptr,NULL);
    set_previous(anchor,ptr);
    set_next(ptr,anchor);
    anchor = ptr;
  }
  dbg(("malloc: block %d, (%d,%x) %s, line %d",id_number,size,ptr+20,file,line));
  malloc_count++;
  total_count++;
  id_number++;
  return (ptr+20);
}

/* ----------------------------------------------------------------- */

void db_free(void *pvoid)
{
  char *previous=NULL, *next=NULL;
  int  bad=0;
  char *ptr;
  int i_id=0;
  int size;
  
  if (!pvoid) {
    return;
  }
  ptr = (char*)pvoid;
  ptr -= 20;
  i_id     = *(int*)(ptr+16);
  size = get_size(ptr);

  previous = get_previous(ptr);
  next     = get_next(ptr);
  if (memcmp(ptr,id,sizeof(id)) != 0) {
    dbg(("free: block %d, %x : header corrupt\n",i_id,(int)ptr));
    bad = 1;
  }
  if (memcmp(ptr+get_size(ptr)+20,id,sizeof(id)) != 0) {
    dbg(("free: block %d, %x : tail corrupt\n",i_id,(int)ptr));
    bad = 1;
  }

  if (bad) {
    dbg(("free: bad block, free failed\n"));
  } else { 
    if (next != NULL && previous != NULL) {
      set_next(previous,next);
      set_previous(next,previous);
    }
    if (next == NULL && previous != NULL) {
      set_next(previous, NULL);
    }
      
    if (next != NULL && previous == NULL) {
      set_previous(next, NULL);
      anchor = next;
    }
    if (next == NULL && previous == NULL)  {
      anchor = NULL;
    }
    free(ptr);
    dbg(("free: block %d, (%d,%x)",i_id, size, ptr+20));
    malloc_count--;
  } 
}

/* ----------------------------------------------------------------- */

void *db_calloc(const char *file, const int line, size_t n, size_t bytes)
{
  char *ptr;
  
  dbg(("calloc: n %d, bytes %d",n,bytes));
  if ((ptr=(char *)db_malloc(file,line, n*bytes))==NULL) {
    return NULL;
  }
  memset(ptr,0,n*bytes);
  dbg(("calloc complete"));
  return (ptr);
}

/* ----------------------------------------------------------------- */

void db_check()
{
  char *ptr=NULL;
  int ok;
  int i_id;
  int size;
  
  ptr = anchor;
  dbg(("checking malloc allocations ..."));
  dbg(("%d blocks have been allocated, %d blocks currently active...",
  	total_count, malloc_count));

  while (ptr != NULL) {
    i_id = *(int*)(ptr+16);
    size = get_size(ptr);
    ok = 1;
    dbg(("blk %d, size %d",i_id,size));
    if (memcmp(ptr,id,sizeof(id)) != 0) {
      ok = 0;
      dbg(("Header corrupt, "));
    }
    if (memcmp(ptr+size+20,id,sizeof(id)) != 0) {
      ok = 0;
      dbg(("tail corrupt, "));
    }
    ptr = get_next(ptr);
  }
}


#endif
