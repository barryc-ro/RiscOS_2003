/* dirparse.c - Parse FTP directory into HTML page */
/* Part of Fresco and the WebFTP module.           */
/* (C) ANT Limited 1995. All rights reserved.      */
/* Written by Borris.                              */


#include "all.h"

/*****************************************************************************/

#define FILENAMEWIDTH   24
#define MAXSUBSTRS      20

static char *substrs[MAXSUBSTRS];
static int sublens[MAXSUBSTRS];
static char theline[1024];
static char *months[13] = {"BAD", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};


/*****************************************************************************/


static void push_theline(PSESS sess)
{
    int x = strlen(theline);

    dbg2(("PUSH: %s", theline));

    if ( to_file(sess, theline, x) != GROUP_OKAY )
    {
        dbg(("(5) Error writing theline to file\n%s", theline));
    }
}

/********************************************************/
/*                                                      */
/* This pushes the contents of the MULTIQ to the named  */
/* session's file. If the queue is empty, no changes    */
/* are made to the file.                                */
/*                                                      */
/********************************************************/

extern int multi_to_file(PSESS sess)
{
    if (sess->Q[MULTIQ].used_bytes > 0)
    {
        dbg(("(7) Writing multiline responses to file, %d bytes avail\n", sess->Q[MULTIQ].used_bytes));

        if ( get_a_line(sess, &sess->Q[MULTIQ]) == GROUP_OKAY )
        {
            char c1 = ' ' , c2 = ' ', c3 = ' ', c4 = ' ';

            if ( strlen(databuf) >= 4)
            {
                c1 = databuf[0];
                c2 = databuf[1];
                c3 = databuf[2];
                c4 = databuf[3];
            }

            do
            {
                int len = strlen(databuf);

                if (len < sizeof(theline) - 10)
                {
                    char *cp = databuf;

                    if (len > 4 && databuf[0] == c1 && databuf[1] == c2 && databuf[2] == c3 )
                    {
                        cp += 3;
                        if (*cp == '-')
                            cp += 1;
                    }
                    else
                        cp = "";

                    sprintf(theline, "%s\r\n", cp);
                    push_theline(sess);
                }
            } while ( get_a_line(sess, &sess->Q[MULTIQ]) == GROUP_OKAY );
        }
        queue_drain(&sess->Q[MULTIQ]);
    }

    /*reopen_file(sess);*/

    return GROUP_OKAY;
}



extern void do_ftpdir_header(PSESS sess)
{
    sprintf(theline, "<head><title>Index of %s</title></head><body>\r\n"
                     "<h1>Index of %s</h1><p><pre>",
                     sess->origpath, sess->origpath);

    push_theline(sess);

    if (sess->Q[MULTIQ].used_bytes > 0)
    {
        multi_to_file(sess);
        sprintf(theline, "<hr>");
        push_theline(sess);
    }

    sprintf(theline, "<img src=\"icontype:blank\"> %-*s Last modified     Size<hr>\n", FILENAMEWIDTH, "Name");
    push_theline(sess);
    sprintf(theline, "<img src=\"icontype:back\"> <a href=\"../\">../</a>%-*sParent directory\n", FILENAMEWIDTH-3, "");
    push_theline(sess);

    /*reopen_file(sess);*/
}


extern void do_ftpdir_trailer(PSESS sess)
{
    time_t tt;
    tt = time(NULL);
    sprintf(theline, "<hr>Listing generated %s", ctime(&tt));
    theline[ strlen(theline) - 1] = 0;
    strcat(theline, " by " PROG_IDENT ".\r\n</pre></body>\r\n");
    push_theline(sess);
    /*reopen_file(sess);*/
}



static char *skip_white(char *cp)
{
    if (cp != NULL && *cp != 0)
    {
        while ( *cp != 0 && isspace(*cp) )
        {
            cp++;
        }
    }

    return cp;
}

static char *skip_nonwhite(char *cp)
{
    if (cp != NULL && *cp != 0)
    {
        while ( *cp != 0 && ! isspace(*cp) )
        {
            cp++;
        }
    }

    return cp;
}

static BOOL has_nondigit(char *cp, char other)
{
    while (*cp != 0)
    {
        if ( ! isdigit(*cp) && * cp != other)
        {
            return TRUE;
        }
        cp++;
    }

    return FALSE;
}


/*****************************************************************************/


/* return number of words found. This 0..N-1 are the words */

static int breakdown_string(void)
{
    int count = 0;
    char *ep, *cp = theline;

    memset(sublens, 0, sizeof(sublens));
    memset(substrs, 0, sizeof(substrs));

    while (count < MAXSUBSTRS)
    {
        cp = skip_white(cp);
        ep = skip_nonwhite(cp);

        if (cp == ep)
            break;

        count += 1;

        substrs[count - 1] = cp;

        if (*ep == 0)
        {
            sublens[count - 1] = strlen(cp);
            break;
        }

        *ep = 0;
        sublens[count - 1] = strlen(cp);
        cp = ep + 1;
    }

#if 0
{ int i;
dbg(("The words are as follows\n"));
for (i = 0; i < count; i++)
dbg(("Word %d, length %d, contents '%s'\n", i, sublens[i], substrs[i]));
}
#endif

    return count;
}

/**********************************************************************/
/*                                                                    */
/* Try to deduce a filetype to associate with this name. The type of  */
/* the object overrides other decisions. We use the special icontype: */
/* scheme. The following are searched for:                            */
/*                                                                    */
/* 'blank'             special word                                   */
/* 'directory'         special word                                   */
/* ,xxx                from RISC OS file type                         */
/* .extension          Icon from MIME type of extension               */
/* .                   empty extension - some default                 */
/*                                                                    */
/**********************************************************************/

static void emit_icontype(FILE_TYPE type, char *name)
{
    char *cp = strrchr(name, DIRSEP);
    int len;

    strcat(theline, "<img src=\"icontype:");

    switch (type)
    {
        default:
            strcat(theline, "blank");
            break;

        case TYPE_DIR:
            strcat(theline, "directory");
            break;

        case TYPE_FILE:
            if (cp != NULL)
                name = cp + 1;

            len = strlen(name);
            cp = strrchr(name, COMMA);

            if (cp != NULL && cp-name+4 != len)
            {
                cp = NULL;
            }

            if (cp == NULL)
                cp = strrchr(name, DOT);

            if (cp == NULL || name[0] == DOT)
                cp = ".";

            strcat(theline, cp);
            break;

        case TYPE_LINK:
            strcat(theline, "link");
            break;
    }

    strcat(theline, "\">");
}

/*****************************************************************************/

/* Note does not cope with foreign months */
static int whichmonth( char *month )
{
    static const char m[] = "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec";
    char *ptr = strstr( m, month );
    if ( !ptr )
        return 0;

    return ( ptr - m )/4;
}


/*************************************************************/
/*                                                           */
/* Analyse a broken down line of text, looking for directory */
/* listings in fashions we recognise and emitting suitable   */
/* HTML for them.                                            */
/*                                                           */
/*************************************************************/

/*************


SCAN: drwxr-x--x  2 root     wheel         512 May 14 10:42 .private

Word 0, length 10, contents 'drwxr-x--x'
Word 1, length 1, contents '2'
Word 2, length 4, contents 'root'
Word 3, length 5, contents 'wheel'
Word 4, length 3, contents '512'
Word 5, length 3, contents 'May'
Word 6, length 2, contents '14'
Word 7, length 5, contents '10:42'
Word 8, length 8, contents '.private'

               835      A          08-09-95   03:31  times
                94      A          10-06-95   03:33  urls
               707      A          09-27-95   01:43  activities

0 -  size    mand    number
1 5  flags   opt     string
2 4  type    opt     string (DIR says directory)
3 3  date    mand    number and hyphen
4 2  time    mand    number and colon
5 1  name    mand

***********/

static void analyse_further(PSESS sess, int word_count)
{
    static char month[8], name[80], name2[80], buf[80];

    int type, size, year, day, hour, minute, x;
#ifdef CSFS
    int month_num, file_attrib=0;
#endif
    BOOL bogus;
    char *cp, postsize;

    /* MATCH OS/2 STYLE DIRECTORY LISTING */

    if ( word_count == 4 || word_count == 5 || word_count == 6)
    {
        bogus = FALSE;

        bogus |= has_nondigit( substrs[0], 0 );
        bogus |= has_nondigit( substrs[word_count - 2], ':');
        bogus |= has_nondigit( substrs[word_count - 3], '-');
        bogus |= sublens[word_count-2] != 5;
        bogus |= sublens[word_count-3] != 8;

        if (! bogus)
        {
            type = TYPE_FILE;

            if (word_count == 5 || word_count == 6)
            {
                if ( strcmp(substrs[word_count-4], "DIR") == 0)
                    type = TYPE_DIR;
                else
                    type = TYPE_OTHER;
            }

            cp = substrs[word_count-3];
            x = (cp[0]-'0')*10 + cp[1]-'0';
            if (x > 12)
                x = 0;
#ifdef CSFS
            month_num = x+1;
#endif
            strcpy(month, months[x+1]);
            day = (cp[3]-'0')*10 + cp[4]-'0';
            year = (cp[6]-'0')*10 + cp[7]-'0';
            year += 1900;

            cp = substrs[word_count-2];
            hour = (cp[0]-'0')*10 + cp[1]-'0';
            minute = (cp[3]-'0')*10 + cp[4]-'0';
	    size = atoi(substrs[0]);

            goto found_it;
        }
    }

    /* MATCH NT AND LS STYLE DIRECTORY LISTING */

    if ( word_count == 9 || word_count == 11 )
    {
        bogus = FALSE;

        bogus |= has_nondigit( substrs[1], 0 );
        bogus |= has_nondigit( substrs[4], 0 );
        bogus |= sublens[5] != 3;
        bogus |= sublens[6] != 1 && sublens[6] != 2;
        bogus |= has_nondigit( substrs[6], 0 );
        bogus |= sublens[7] == 4 && has_nondigit( substrs[7], 0 );
        bogus |= sublens[7] == 5 && has_nondigit( substrs[7], ':' );
        bogus |= sublens[7] != 4 && sublens[7] != 5;
        bogus |= sublens[8] >= sizeof(name);
        bogus |= word_count == 11 && strcmp("->", substrs[9] ) != 0;
        bogus |= word_count == 11 && sublens[10] >= sizeof(name2);
        bogus |= strcmp(".",  substrs[8]) == 0;
        bogus |= strcmp("..", substrs[8]) == 0;

        if ( ! bogus )
        {
            switch (substrs[0][0])
            {
                case '-':
                    type = TYPE_FILE;
                    break;
                case 'd':
                    type = TYPE_DIR;
                    break;
                case 'l':
                    type = TYPE_LINK;
                    strcpy(name2, substrs[10]);
                    break;
                default:
                    type = TYPE_OTHER;
                    break;
            }
            size = atoi( substrs[4] );
#ifdef CSFS
            if (sess->flags & webftp_open_NotHTML)
	    {
              /* get the file attributes */
              if (substrs[0][1]=='r') file_attrib|=1<<0;
              if (substrs[0][2]=='w') file_attrib|=1<<1;
              if (substrs[0][7]=='r') file_attrib|=1<<4;
              if (substrs[0][8]=='w') file_attrib|=1<<5;

              /* find the month number from a textual form */
              month_num = 1;
              while (month_num<13)
              {
                if (strcmp(substrs[5],months[month_num])==0)
                  break;
                month_num++;
              }
            }
#endif
            strcpy(month, substrs[5] );
            day = atoi(substrs[6]);
            if (sublens[7] == 4)
            {
                hour = 0;
                minute = 0;
                year = atoi(substrs[7]);
            }
            else
            {
                /* If there's no year part, it must be a "Dec 23 11:55" type
                 * thing. Note that, in this case (and when it's January)
                 * setting year = current_year is *not* the right thing to do.
                 * We need to work out whether the {day,month} is earlier than
                 * now or later, and, if later, set year = current_year-1
                 */
                int mnumber = whichmonth( month );

                time_t time_now;
                struct tm *time_exp;

                time_now = time(NULL);
                time_exp = gmtime(&time_now);

                year = time_exp->tm_year + 1900;

                if ( mnumber > time_exp->tm_mon )
                    year--;

                cp = substrs[7];
                hour = *cp++ - '0';
                if (*cp != ':')
                {
                    hour *= 10;
                    hour += *cp++ - '0';
                }
                minute = *++cp - '0';
                minute *= 10;
                minute += *++cp - '0';
            }

            strcpy(name, substrs[8]);
            goto found_it;
        }
    }

    /*
     * a response that is not "total" or starting with a status code,
     * is assumed to be an error
     */
    if ((strcmp(".",substrs[8])!=0) && (strcmp("..",substrs[8])!=0))
      if ((strcmp(substrs[0],"total")!=0) && has_nondigit(substrs[0],0))
        sess->state = state_diagnostics;

    return;

found_it:

    theline[0] = 0;
#ifdef CSFS
    if (sess->flags & webftp_open_NotHTML)
    {
      int file_type=0;
      unsigned int load_addr=0;
      unsigned int exec_addr=0;
      unsigned char utc_blk[5];
      int time_blk[7];
      int i,j,k;
      _kernel_swi_regs reg;

      time_blk[0] = 0;
      time_blk[1] = 0;
      time_blk[2] = minute;
      time_blk[3] = hour;
      time_blk[4] = day;
      time_blk[5] = month_num;
      time_blk[6] = year;

      reg.r[0] = -1;                   /* Use current territory */
      reg.r[1] = (int)utc_blk;
      reg.r[2] = (int)time_blk;
      _kernel_swi(Territory_ConvertOrdinalsToTime,&reg,&reg);

      /* set file type to fff for now */
      load_addr = (unsigned int)0xfff<<20 | 0xfff<<8 | utc_blk[4];
      exec_addr = *(int*)utc_blk;
      i=0;
      while (name[i]!=0)  /* change '.' to '/' */
      {
        if (name[i]=='.')
          name[i] = '/';
        i++;
      }

      i=strlen(name)-1;             /* point to end of filename */
      while (i>=0 && name[i]!=',')  /*  find the comma */
        i--;

      /* valid extension ? */
      if (i>0 && name[i+1]!=0 && name[i+2]!=0 && name[i+3]!=0)
      {
        load_addr &= (unsigned int)0xfff000ff; /* clear bits */
        for (k=0; k<3; k++)
        {
          name[i+k+1] = toupper(name[i+k+1]);
          if (name[i+k+1]>='0'&&name[i+k+1]<='9') j=name[i+k+1]-'0';
          else if (name[i+k+1]>='A'&&name[i+k+1]<='F') j=name[i+k+1]-'A'+10;

          load_addr |= (j&0xf)<<(((2-k)*4)+8);
        }
        name[i] = '\0'; /* terminate string */
      }
      strcat(theline, name);	/* dump the filename */
      strcat(theline,"\t");
      switch(type)
      {
        case TYPE_FILE : case TYPE_DIR : case TYPE_LINK :
          file_type = type;
          break;
        default :
          file_type = 0;
          break;
      }
      if (type == TYPE_FILE)    /* now the file size */
      {
        sprintf(buf, "0x%x", size);
        strcat(theline, buf);
      }

      sprintf(buf,"\t0x%02x\t0x%x\t0x%08x\t0x%08x\n",
                    file_attrib,file_type,load_addr,exec_addr);
      strcat(theline,buf);
    }
    else
    {
#endif
      emit_icontype((FILE_TYPE)type, name);
      strcat(theline, " <a href=\"");
      strcat(theline, sess->origpath);
      x = strlen(theline);
      if ( theline[x-1] != '/' )
          strcat(theline, "/");
      strcat(theline, name);
      if (type == TYPE_DIR)
          strcat(theline, "/");
      strcat(theline, "\">");
      strcat(theline, name);
      if (type == TYPE_DIR)
      {
          x = 1;
          strcat(theline, "/");
      }
      else
          x = 0;
      strcat(theline, "</a>");

      x += strlen(name);
      x = FILENAMEWIDTH - x;
      while (x > 0)
      {
          strcat(theline, " ");
          x--;
      }

      sprintf(buf, "%02d-%s-%04d %02d:%02d  ", day, month, year, hour, minute);
      strcat(theline, buf);

      switch (type)
      {
          case TYPE_FILE:
              postsize = ' ';
              if (size > 2048)
              {
                  postsize = 'K';
                  size = size >> 10;
              }
              if (size > 2048)
              {
                  postsize = 'M';
                  size = size >> 10;
              }
              sprintf(buf, "%4d%c", size, postsize);
              strcat(theline, buf);
              break;

          case TYPE_OTHER:
              break;

          case TYPE_DIR:
              strcat(theline, "&lt;DIR&gt;");
              break;

          case TYPE_LINK:
              strcat(theline, "-&gt; ");
              strcat(theline, name2);
              break;
      }

      strcat(theline, "\r\n");
#ifdef CSFS
    }
#endif
    push_theline(sess);

    return;

}

/*****************************************************************************/

/* 150 ASCII data connection for weekly (193.35.147.196,1629) (298 bytes). */
/* 150 Opening ASCII mode data connection for welcome.msg (161 bytes). */
/* Cater: some NT FTP servers have no space before the opening bracket */
/*        of the size field. */

static void hunt_for_size(PSESS sess, int word_count)
{
    int sizeix, bytesix;
    char *ptr;

    if (word_count < 3)
        return;

    sizeix = word_count - 2;
    bytesix = word_count - 1;

    if ( memcmp("bytes", substrs[bytesix], 5) != 0 )
        return;

    ptr = strrchr(substrs[sizeix], '(');

    if (ptr == NULL)
        return;

    sizeix = atoi( ptr + 1 );

    if (sizeix == 0)
        return;

    /* Have a size. Record it and set the file size */

    dbg(("(6) Reckon this is a transfer for %d bytes\n", sizeix));

    sess->total_bytes = sizeix;

#if 0
    sess->bytes_so_far = sizeix;
    reopen_file(sess);
    sess->bytes_so_far = 0;
#endif
}

/************************************************************/
/*                                                          */
/* databuf holds a single line, extracted from the returned */
/* data for a LIST command. If we can find what looks like  */
/* a filename, emit a suitably munged and href'd version of */
/* this line, else emit nothing.                            */
/*                                                          */
/************************************************************/

extern void ftp_dir_spotter(PSESS sess)
{
    int word_count;

    dbg2(("SCAN: %s\n", databuf));

    if (strlen(databuf) < sizeof(theline))
    {
        strcpy(theline, databuf);

        word_count = breakdown_string();

        if (word_count != 0)
            analyse_further(sess, word_count);
    }

    return;
}

/*****************************************************************************/

extern void extract_pwd(PSESS sess)
{
    PSERVER server = sess->server;
    int words;
    char *ptr;
    int len;

    if (strlen(databuf) >= sizeof(theline))
       goto simple_server;

    strcpy(theline, databuf);
    words = breakdown_string();

    if (words < 2)
        goto simple_server;

    ptr = substrs[1];
    len = sublens[1];

    if (*ptr != '\"' || ptr[len-1] != '\"')
        goto simple_server;

    if ( (server->login_pwd = strndup(ptr + 1, len - 2)) == NULL)
        goto simple_server;

    return;

simple_server:
    dbg(("(6) Server appears not to support PWD suitably - forcing dont reuse\n"));
    server->dont_reuse = TRUE;
    return;
}

/**********************************************************************/
/*                                                                    */
/* A 150 preliminary response has been received. See if we can find   */
/* a file size contained in the remainder of the line. If we can,     */
/* then this indicates that we should pass this size back to the      */
/* caller and set the extent to the final desired value straight      */
/* off. This should also prevent us from transferring a file when     */
/* we don't have enough storage.                                      */
/*                                                                    */
/**********************************************************************/


extern void try_to_extract_size(PSESS sess)
{
    int word_count;

    dbg2(("150 size extract: %s\n", databuf));

    if (strlen(databuf) < sizeof(theline))
    {
        strcpy(theline, databuf);

        word_count = breakdown_string();

        if (word_count != 0)
            hunt_for_size(sess, word_count);
    }

    return;
}

/*
 */
#ifdef CSFS
void
csfs_directory_header(PSESS sess)
{
  sprintf(theline,"# version %d\n#\n# WebFTP %s\n",
  		     CSFS_File_Version,sess->origpath);

  push_theline(sess);

}
#endif
/* eof dirparse.c */

