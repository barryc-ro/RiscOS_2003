/* webftp/misc.c (C) ANT Ltd 1995. */

#include "all.h"

extern _kernel_oserror *make_error(int ecode)
{
    char *errtable[] =
    {
        "No error",
        "Positive Preliminary reply",
        "Positive Completion reply",
        "Positive Intermediate reply",
        "Transient Negative Completion reply",
        "Permanent Negative Completion reply",
        "Local memory error",
        "Local socket error",
        "Local file error",
        "No such SWI",
        "Unknown command",
        "No session",
        "Session already closed",
        "Session invalid or corrupted"
#ifdef CSFS
        ,"CSFS transport error"
#endif
    };

    if (ecode == 0)
    {
        return NULL;
    }

    errblk.errnum = ecode == ERROR_NO_SUCH_SWI ? 0x1e6 : ecode;
    strcpy(errblk.errmess, errtable[ecode]);

    return &errblk;
}


/*****************************************************************************/

extern _kernel_oserror *claim_events(void)
{
    _kernel_oserror *ep;
    _kernel_swi_regs r;

    r.r[0] = TICKER_RATE;
    r.r[1] = (int) timer_entry;
    r.r[2] = (int) private_word;

    ep = _kernel_swi(OS_CallEvery, &r, &r);

    if (ep)
        return ep;

    r.r[0] = 0x10;
    r.r[1] = (int) inetevent_entry;
    r.r[2] = (int) private_word;

    ep = _kernel_swi(XOS_Bit + OS_Claim, &r, &r);

    if (ep)
    {
        r.r[0] = (int) timer_entry;
        r.r[1] = (int) private_word;

        _kernel_swi(OS_RemoveTickerEvent, &r, &r);

        return ep;
    }

    _kernel_osbyte(14, Internet_Event, 0);

    return NULL;
}

/*****************************************************************************/

extern void release_events(void)
{
    _kernel_swi_regs r;

    _kernel_osbyte(13, Internet_Event, 0);

    r.r[0] = 0x10;
    r.r[1] = (int) inetevent_entry;
    r.r[2] = (int) private_word;

    _kernel_swi(OS_Release, &r, &r);

    r.r[0] = (int) timer_entry;
    r.r[1] = (int) private_word;

    _kernel_swi(OS_RemoveTickerEvent, &r, &r);
}

/*****************************************************************************/

extern char *strdup(char *str)
{
    char *new = malloc(str == NULL ? 1 : (strlen(str) + 1) );

    if (new != NULL)
    {
        if (str == NULL)
        {
            *new = 0;
        }
        else
        {
            strcpy(new, str);
        }
    }

    return new;
}

/*****************************************************************************/

extern char *strndup(char *str, int n)
{
    char *new = malloc(n + 1);

    if (new != NULL)
    {
        if (str == NULL)
        {
            *new = 0;
        }
        else
        {
            memcpy(new, str, n);
            new[n] = 0;
        }
    }

    return new;
}

/*****************************************************************************/

#define idsess2(x)

extern void add_to_list(PSESS *listp, PSESS sess)
{
#if 0
    dbg2(("Add "));
    idsess2(sess);
    dbg2((" to list %s\n", list_name(listp) ));
#endif

    sess->prev = NULL;
    sess->next = *listp;
    if (sess->next != NULL)
    {
        sess->next->prev = sess;
    }
    *listp = sess;
}

/*****************************************************************************/

extern PSESS rem_from_list(PSESS *listp, PSESS sess)
{
#if 0
    dbg2(("Remove "));
    idsess2(sess);
    dbg2((" from list %s\n", list_name(listp) ));
#endif

    if (sess == *listp)
        *listp = sess->next;
    else
        sess->prev->next = sess->next;

    if (sess->next != NULL)
        sess->next->prev = NULL;

    return sess;
}

/*****************************************************************************/

extern BOOL in_list(PSESS sess, PSESS *listp)
{
    PSESS list = *listp;

    while (list != NULL)
    {
        if (list == sess)
        {
            return TRUE;
        }
        list = list->next;
    }

    return FALSE;
}

/*************************************************************************/
/*                                                                       */
/* If a server is flagged for dont_reuse, then someone else has already  */
/* accounted for it and we should not touch it. We might end up with a   */
/* number of servers disconnecting from a single site.                   */
/*                                                                       */
/*************************************************************************/

extern PSERVER find_existing_server(PSESS sess)
{
    PSERVER serv;
    struct sockaddr_in *addr = &sess->servaddr;

    for ( serv = server_list; serv != NULL; serv = serv->next )
    {
        if ( serv->dont_reuse == FALSE && memcmp(&serv->contaddr, addr, sizeof(*addr)) == 0 )
        {
            return serv;
        }
    }

    return NULL;
}

/*****************************************************************************/

extern void disconnect_server(PSESS sess, const BOOL try_to_reuse)
{
    PSERVER server = sess->server;

    dbg(("DISCONNECT SERVER\n"));

    if (server == NULL)
    {
        dbg(("\n\nNULL server to disconnect_server()\n\n"));
        return;
    }

    server->last_used = MONONOW;

    if (server->dont_reuse)                     /* flagged for killing - can't change */
    {
        ;
    }
    else if (server->absorb_error)              /* cancel flag but no other changes */
    {
        server->absorb_error = FALSE;
    }
    else                                        /* take note of parameter */
    {
        server->dont_reuse = ! try_to_reuse;
    }

    server->sess = NULL;
    sess->server = NULL;
}

/*****************************************************************/
/*                                                               */
/* Join together a server and a session. The server inherits the */
/* timeout value for the last session to connect to it. This     */
/* could lead to some strange results when multiple clients hit  */
/* the same server, but otherwise should behave usefully.        */
/*                                                               */
/*****************************************************************/

extern void join_server_session(PSERVER server, PSESS sess)
{
    dbg(("JOIN SERVER\n"));

    MKHOSTNAME(sess->servaddr.sin_addr);
    server->sess = sess;
    sess->server = server;
    if (server->uses != 255)
        server->uses += 1;
    server->maxidle = sess->maxidle;
}

/*****************************************************************************/

extern void free_server(PSERVER server)
{
    dbg(("FREE SERVER\n"));

    if (server == NULL)
        return;

    if (server->user_name != NULL)
        free(server->user_name);

    if (server->passwd != NULL)
        free(server->passwd);

    if (server->acct != NULL)
        free(server->acct);

    if (server->contsock != -1)
        my_socketclose(&server->contsock);

    free(server);
}


/*****************************************************************************/

extern void stack_push(PSESS sess, int value)
{
    /*dbg(("Push %s (%d)\n", state_code_names[value], value));*/

    if (sess->stackptr == MAXSTACK)
    {
        sess->state = state_error;
        sess->rc = GROUP_MEMORY;
        dbg(("WebFTP return stack overflow\n"));
        return;
    }

    sess->stack[ sess->stackptr++ ] = value;
}

/*****************************************************************************/

extern int stack_pop(PSESS sess)
{
    int rc;

    if (sess->stackptr == 0)
    {
        sess->state = state_error;
        sess->rc = GROUP_MEMORY;
        dbg(("WebFTP return stack underflow\n"));
        return state_error;     /* mainly used for a state stack! */
    }

    rc = sess->stack[ --sess->stackptr ];

    /*dbg(("Pop  %s (%d)\n", state_code_names[rc], rc));*/

    return rc;
}

/*****************************************************************************/

extern _kernel_oserror *check_session_valid(PSESS sess)
{
    if (sess == NULL)
    {
        return make_error(ERROR_NO_SESSION);
    }
    else if (sess->magic == MAGIC)
    {
        return NULL;
    }
    else if (sess->magic == ~ MAGIC)
    {
        return make_error(ERROR_SESSION_ALREADY_CLOSED);
    }
    else
    {
        return make_error(ERROR_SESSION_INVALID);
    }
}



/*****************************************************************************/

extern void schedule_callback(void)
{
    ENTER_MUTEX

        if ( ! callback_scheduled )
        {
            _kernel_swi_regs r;

            r.r[0] = (int) &bounce_cb;
            r.r[1] = (int) private_word;

            if ( _kernel_swi(OS_AddCallBack, &r, &r) == NULL )
                callback_scheduled = TRUE;
        }

    EXIT_MUTEX
}


/*****************************************************************************/

extern void callback_remove(void)
{
    ENTER_MUTEX

        if ( callback_scheduled )
        {
            _kernel_swi_regs r;

            r.r[0] = (int) &bounce_cb;
            r.r[1] = (int) private_word;

            _kernel_swi(OS_RemoveCallBack, &r, &r);
            callback_scheduled = FALSE;
        }

    EXIT_MUTEX
}

/*****************************************************************************/

extern RETURN_METHOD inetevent_handler(_kernel_swi_regs *regs, void *pw)
{
    if (regs->r[0] == Internet_Event && worth_scheduling)
    {
        event_calls++;
        schedule_callback();
    }

    return VIA_R14;

    UNUSED(pw);
}

/*****************************************************************************/

extern RETURN_METHOD timer_handler( _kernel_swi_regs *r, void *pw )
{
    if (worth_scheduling)
    {
        timer_calls++;
        schedule_callback();
    }

    return VIA_R14;

    UNUSED(pw);
}

/*****************************************************************************/

extern int reopen_file(PSESS sess)
{
    if ( ro_set_extent(sess->ro_handle, sess->bytes_so_far) < 0 )
        goto close_fail;

    if ( ro_fclose(sess->ro_handle) < 0 )
        goto fail;

    sess->ro_handle = ro_fopen(sess->local_name, sess->bytes_so_far == 0 ? RO_OPEN_WRITE : RO_OPEN_RW);

    if (sess->ro_handle < 0)
        goto fail;

    if ( ro_setpos(sess->ro_handle, sess->bytes_so_far) < 0 )
        goto close_fail;

    return GROUP_OKAY;

close_fail:
    (void) ro_fclose(sess->ro_handle);
    sess->ro_handle = -1;
fail:
    sess->state = state_error;
    sess->rc = GROUP_FILE;
    dbg(("Failed reopen\n"));
    return GROUP_FILE;
}

/*****************************************************************************/

extern int to_file(PSESS sess, char *buf, int bytes)
{
    if ( ro_fwritepos(buf, 1, bytes, sess->ro_handle, sess->bytes_so_far) < 0 )
    {
        sess->state = state_error;
        return sess->rc = GROUP_FILE;
    }

    sess->bytes_so_far += bytes;
#if 0
    if ( reopen_file(sess) != GROUP_OKAY )
    {
        return sess->rc;
    }
#endif
    return GROUP_OKAY;
}


/*****************************************************************************/
#ifdef FTP_PUT

extern int from_file(PSESS sess, char *buf, int bytes, int *num)
{
    *num=ro_freadpos(buf, 1, bytes, sess->ro_handle, sess->bytes_so_far);
    if (*num < 0 )
    {
        sess->state = state_error;
        return sess->rc = GROUP_FILE;
    }

    return GROUP_OKAY;
}
#endif

/*****************************************************************************/

#define Resolver_GetHost  0x46001

extern char *mkhostname(struct in_addr addr)
{
    char *cp = inet_ntoa(addr);
    _kernel_swi_regs r;
    _kernel_oserror *ep;

    r.r[0] = (int) cp;
    ep = _kernel_swi(Resolver_GetHost, &r, &r);

    if (ep != NULL || r.r[0] != 0)
       return cp;

    return ((struct hostent *)r.r[1])->h_name;
}

/*****************************************************************************/

/* eof webftp misc.c */

