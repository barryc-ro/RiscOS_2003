
#include "all.h"


/*                                                                           */

static PQELEM new_qelem(int bytes)
{
    PQELEM pq = calloc(1, sizeof(QELEM));

    if (pq == NULL || (pq->base = malloc(bytes)) == NULL)
    {
        if (pq)
        {
            free(pq);
        }
        return NULL;
    }

    pq->total = bytes;

    return pq;
}

/*                                                                           */

extern BOOL queue_init(PQUEUE qp, int advsize)
{
    qp->advsize = advsize;
    qp->head = qp->tail = (advsize == 0) ? NULL : new_qelem(advsize);
    qp->used_bytes = 0;
    qp->closed = FALSE;

    return (advsize == 0) ? TRUE : (qp->head != NULL);
}

/*                                                                           */

extern BOOL queue_remove(PQUEUE qp, char *base, int bytes)
{
    if (bytes < 0)
        return FALSE;

    if (bytes == 0)
        return TRUE;

    if (bytes > qp->used_bytes)
        return FALSE;

    while (bytes > 0)
    {
        PQELEM elem = qp->head;
        int this = bytes > elem->used ? elem->used : bytes;

        assert(qp->head != NULL);

        memcpy(base, elem->base + elem->first, this);

        base += this;
        bytes -= this;
        elem->first += this;
        elem->used -= this;
        qp->used_bytes -= this;

        if (elem->used == 0)
        {
            /* Avoid freeing final block - reset instead */

            if (qp->head == qp->tail)
            {
                elem->first = 0;
            }
            else
            {
                elem->later->early = NULL;
                qp->head = elem->later;
                free(elem->base);
                free(elem);
            }
        }
    }

    return TRUE;
}




/***********************************************************/
/*                                                         */
/* We only take advantge of space in the last block - any  */
/* earlier space is ignored.                               */
/*                                                         */
/***********************************************************/

extern BOOL queue_append(PQUEUE qp, char *base, int bytes)
{
    PQELEM pq;
    int this;

    /* Kick start the queue if necessary */

    if (qp->head == NULL) 
    {
        qp->head = qp->tail = new_qelem(QSLURP_SIZE);

        if (qp->head == NULL)
        {
            return FALSE;
        }
    }

    /* Try to fit into any space already mem_callocd */

    pq = qp->tail;

    this = pq->total - pq->first - pq->used;

    if (this > bytes)
    {
        this = bytes;
    }

    memcpy(qp->tail->base + qp->tail->first + qp->tail->used, base, this);

    base += this;
    bytes -= this;
    qp->tail->used += this;
    qp->used_bytes += this;

    /* But mem_calloc single block if this isn't good enough */

    if (bytes > 0)
    {
        pq = new_qelem( bytes > QSLURP_SIZE ? bytes : QSLURP_SIZE );

        if (pq == NULL)
        {
            return FALSE;
        }

        memcpy(pq->base, base, bytes);

        pq->used = bytes;
        qp->used_bytes += bytes;
        qp->tail->later = pq;
        pq->early = qp->tail;
        qp->tail = pq;
    }

    return TRUE;
}


/*                                                                           */

extern BOOL queue_stradd(PQUEUE qp, char *str)
{
    return queue_append(qp, str, strlen(str));
}

/*                                                                           */


extern int queue_count(PQUEUE qp)
{
#if DEBUG

    PQELEM pq = qp->head;
    int bytes = 0;

    while (pq != NULL)
    {
        bytes += pq->used;
        pq = pq->later;
    }

    assert(bytes == qp->used_bytes);

    return bytes;

#else

    return qp->used_bytes;

#endif
}


/****************************************************************/
/*                                                              */
/* Attempt to locate the specified character within the queued  */
/* data. If the character is located, return the number of      */
/* characters to read such that the last character read         */
/* matches the byte searched for. Only the first match is       */
/* considered. This is suitable for extracting data a line at   */
/* a time from a queue, for example. If the character cannot    */
/* be found, -1 is returned.                                    */
/*                                                              */
/****************************************************************/

extern int queue_search(PQUEUE pq, int c)
{
    int offset;
    char *cp;
    PQELEM item;

    if (pq->used_bytes == 0)
    {
        return -1;
    }

    assert(pq->head != NULL);

    offset = 0;
    item = pq->head;

    while (item != NULL)
    {
        cp = memchr(item->base + item->first, c, item->used);
        if (cp != NULL)
        {
            offset += cp - (item->base + item->first);
            return offset + 1;
        }
        offset += item->used;
        item = item->later;
    }

    return -1;
}


/*                                                                           */

/* Remove all the data from a queue (so pq->used_bytes == 0). */
/* Retain one qelem though.                                   */

extern void queue_drain(PQUEUE pq)
{
    if ( pq->used_bytes == NULL || pq->head == NULL )
        return;

    while (pq->head != pq->tail)
    {
        PQELEM tp = pq->head;
        if (tp->base != NULL)
            free(tp->base);
        tp->later->early = NULL;
        pq->head = tp->later;
        free(tp);
    }

    if (pq->head != NULL)
    {
        pq->head->first = 0;
        pq->head->used = 0; 
    }
}

/*                                                                           */

/* Does not free the QUEUE structure itself - caller must do this if the */
/* queue is not on the stack. */

extern void queue_free(PQUEUE pq)
{
    PQELEM ep;

    while ( (ep = pq->head) != NULL)
    {
        if (ep->base != NULL)
            free(ep->base);
        pq->head = pq->head->later;
        free(ep);
    }

    pq->tail = NULL;
    pq->used_bytes = 0;
    pq->advsize = 0;
    pq->closed = TRUE;
}



/*                                                                           */

/* eof queues.c */

