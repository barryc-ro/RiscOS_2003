/* -*-c-*- */

/* httppub.h */

#include "pads.h"

#define HTTP_SWI_Base		0x4AF80

#define HTTP_Open		(HTTP_SWI_Base + 0)
#define HTTP_Status		(HTTP_SWI_Base + 1)
#define HTTP_Close		(HTTP_SWI_Base + 2)
#define HTTP_MapToRISCOS	(HTTP_SWI_Base + 3)
#define HTTP_MapFromRISCOS	(HTTP_SWI_Base + 4)
#define HTTP_SetFileType	(HTTP_SWI_Base + 5)
#define HTTP_CompletedPart	(HTTP_SWI_Base + 6)
#define HTTP_VerifyMessageDigest (HTTP_SWI_Base + 7)
#define HTTP_Service		 (HTTP_SWI_Base + 8)

typedef struct http_header_item {
    struct http_header_item *next;
    char *key;
    char *value;
} http_header_item;

/* HTTP_Open */

#define http_open_flags_SECURE	0x01 /* Use an SSL connection */
#define http_open_flags_VERIFY  0x02 /* Fail the connect if peer not verified */
#define http_open_flags_HEAD    0x04 /* send a HEAD request, not a GET */
#define http_open_flags_PRIORITY 0x08 /* Give this fetch priority over others */
#define http_open_flags_IMAGE   0x10 /* Give the first few bytes priority, but
                                        not the rest */
#define http_open_flags_TOMEM   0x20 /* Download data to memory, not disc
                                        (NOT IMPLEMENTED) */
#define http_open_flags_TUNNEL  0x40 /* SSL request through tunnelling proxy */

#define http_open_flags_ALLUSER 0x7F

/* *Internal* flags, do not set these in a request */
#define http_flags_HTTP11    0x10000 /* Server is known to cope with HTTP/1.1 */
#define http_flags_KEPTALIVE 0x20000 /* Server is keeping this connection alive
                                        (also implied by HTTP11) */
#define http_flags_NOTALIVE  0x40000 /* Server is known not to be keeping this
                                        connection alive */
#define http_flags_DOESRANGE 0x80000 /* Server is known to cope with Range: */
#define http_flags_GOTFIRST 0x100000 /* it was an image, and we've got the
                                        first few bytes */
#define http_flags_CHUNKED  0x200000 /* 1.1 Transfer-Encoding: Chunked (arse) */
#define http_flags_DOESKEEPALIVE  0x400000 /* Server copes with keep-alive */

#define http_flags_INTERNAL 0x7F0000

/* Flags shared by all connections to the same server */
#define http_flags_SERVER (http_flags_HTTP11|http_flags_DOESRANGE|http_flags_DOESKEEPALIVE)


typedef struct {
    struct sockaddr_in      *addr;
    char *object;
    struct http_header_item *headers;
    char *fname;
    char *bname;
    int flags;			/* Options for the connection */
    args_PAD6;
} http_open_in;

typedef struct {
    struct httpconn *handle;
    args_PAD1;
} http_open_out;

typedef union {
    http_open_in in;
    http_open_out out;
} http_open_args;


/* HTTP_Status */

/* pseudo headers passed back to application in status call */

#define SSL_HEADER_CERT_SUBJECT	"X-SSL-Certificate-Subject"
#define SSL_HEADER_CERT_ISSUER	"X-SSL-Certificate-Issuer"
#define SSL_HEADER_CIPHER	"X-SSL-Cipher"
#define SSL_HEADER_VERIFIED	"X-SSL-Verified"
#define SSL_HEADER_YES		"Yes"
#define SSL_HEADER_NO		"No"

typedef struct {
    struct httpconn *handle;
    args_PAD1;
} http_status_in;

typedef struct {
    int status;
    int ro_fh;
    char *fname;
    int data_size;
    int data_so_far;
    struct http_header_item *headers;
    int rc;
    char *message;
    args_PAD8;
} http_status_out;

typedef union {
    http_status_in in;
    http_status_out out;
} http_status_args;


/* HTTP_Close */

typedef int http_close_flags;
#define http_close_DELETE_FILE	0x01	/* Delete the file when the conneciton is closed */
#define http_close_SET_TYPE	0x02	/* Set the file type according to Content-type: header line */
#define http_close_DELETE_BODY	0x04	/* Delete the body when the conneciton is closed */
#define http_close_FATAL        0x08    /* Fail any connections queued behind this one */

typedef struct {
    struct httpconn *handle;
    int flags;
    args_PAD2;
} http_close_in;

typedef struct {
    int status;
    args_PAD1;
} http_close_out;

typedef union {
    http_close_in in;
    http_close_out out;
} http_close_args;


/* HTTP_MapToRISCOS */

typedef struct {
    char *extn;
    args_PAD1;
} http_maptoriscos_in;

typedef struct {
    int ft;
    args_PAD1;
} http_maptoriscos_out;

typedef union {
    http_maptoriscos_in in;
    http_maptoriscos_out out;
} http_maptoriscos_args;


/* HTTP_MapFromRISCOS */

typedef struct {
    int ft;
    args_PAD1;
} http_mapfromriscos_in;

typedef struct {
    char *extn;
    args_PAD1;
} http_mapfromriscos_out;

typedef union {
    http_mapfromriscos_in in;
    http_mapfromriscos_out out;
} http_mapfromriscos_args;


/* HTTP_SetFileType */

typedef struct {
    struct httpconn *handle;
    args_PAD1;
} http_setfiletype_in;

typedef struct {
    int ftype;
    args_PAD1;
} http_setfiletype_out;

typedef union {
    http_setfiletype_in in;
    http_setfiletype_out out;
} http_setfiletype_args;


/* HTTP_CompletedPart */

typedef struct {
    struct httpconn *handle;
    int flags;                      /* http_close_DELETE_FILE/SET_TYPE */
    char *newfname;
    args_PAD3;
} http_completedpart_in;

typedef struct {
    args_PAD0;
} http_completedpart_out;

typedef union {
    http_completedpart_in in;
    http_completedpart_out out;
} http_completedpart_args;


/* HTTP_VerifyMessageDigest */

#define http_vmd_flag_CERT_DER	0x01 /* 1 = DER encoded, 0 = PEM encoded */
#define http_vmd_flag_KEY_DER	0x02 /* 1 = file DER encoded, 0 = PEM encoded */
#define http_vmd_flag_CERT_INCORE 0x04 /* 1 = DER certificate is in RAM, 0 = DER certificate is on disc */

typedef struct
{
    int flags;
    char *message_data;
    int message_data_len;
    char *digest_data;
    int digest_data_len;
    char *public_key;		/* filename */
    char *certificate;		/* filename or ptr to DER certificate in RAM */
    int certificate_len;	/* length of RAM based certificate, or ignored */
    args_PAD8;
} http_verifymessagedigest_in;

/* return codes */
#define http_vmd_rc_NOT_SUPPORTED (-1)
#define http_vmd_rc_VERIFIED	0
#define http_vmd_rc_BAD_INPUT	1
#define http_vmd_rc_BAD_CERT	2
#define http_vmd_rc_FAILED	3

typedef struct
{
    int rc;
    args_PAD1;
} http_verifymessagedigest_out;

typedef union
{
    http_verifymessagedigest_in in;
    http_verifymessagedigest_out out;
} http_verifymessagedigest_args;

/* eof httppub.h */
