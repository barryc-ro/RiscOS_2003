/* -*-c-*- */

/* httppub.h */

/* Foreground interfaces to http transport
 * (C) ANT Limited 1997 -- All Rights Reserved -- Confidential
 */

#ifndef included_httppub_h
#define included_httppub_h

#ifndef __pads_h
#include "pads.h"
#endif

#define HTTP_SWI_Base		0x4AF80

#define HTTP_Open		(HTTP_SWI_Base + 0)
#define HTTP_Status		(HTTP_SWI_Base + 1)
#define HTTP_Close		(HTTP_SWI_Base + 2)
#define HTTP_MapToRISCOS	(HTTP_SWI_Base + 3)
#define HTTP_MapFromRISCOS	(HTTP_SWI_Base + 4)
#define HTTP_SetFileType	(HTTP_SWI_Base + 5)
#define HTTP_CompletedPart	(HTTP_SWI_Base + 6)
#define HTTP_VerifyMessageDigest (HTTP_SWI_Base + 7)
#define HTTP_CSFSService	 (HTTP_SWI_Base + 8)
#define HTTP_ConvertToPEM	 (HTTP_SWI_Base + 9)
#define HTTP_CSFSServiceSecure   (HTTP_SWI_Base + 10)
#define HTTP_Config		(HTTP_SWI_Base + 11)
#define HTTP_CertOp		(HTTP_SWI_Base + 12)

#if 0
#define HTTP_SSLConnect		(HTTP_SWI_Base + 10)
/*#define HTTP_SSLCloseContext	(HTTP_SWI_Base + 11)*/
#define HTTP_SSLOpen		(HTTP_SWI_Base + 12)
#define HTTP_SSLSetSocket	(HTTP_SWI_Base + 13)
#define HTTP_SSLRead		(HTTP_SWI_Base + 14)
#define HTTP_SSLWrite		(HTTP_SWI_Base + 15)
#define HTTP_SSLClose		(HTTP_SWI_Base + 16)
#define HTTP_SSLAvailable	(HTTP_SWI_Base + 17)
#define HTTP_SSLInfo		(HTTP_SWI_Base + 18)
#endif

typedef struct http_header_item {
    struct http_header_item *next;
    const char *key;
    char *value;
} http_header_item;

/* HTTP_Open */

#define http_open_flags_SECURE	0x01 /* Use an SSL connection */
#define http_open_flags_VERIFY  0x02 /* Fail the connect if peer not verified */
#define http_open_flags_HEAD    0x04 /* send a HEAD request, not a GET */
#define http_open_flags_PRIORITY 0x08 /* Give this fetch priority over others */
#define http_open_flags_IMAGE   0x10 /* Give the first few bytes priority, but
                                        not the rest */
#define http_open_flags_TOMEM   0x20 /* Download data to memory, not disc
                                        (NOT IMPLEMENTED) */
#define http_open_flags_TUNNEL  0x40 /* SSL request through tunnelling proxy */
#define http_open_flags_ACTION	0x80 /* action parameter being passed in */
#define http_open_flags_ALLUSER 0xFF

/* *Internal* flags, do not set these in a request */
#define http_flags_HTTP11    0x10000 /* Server is known to cope with HTTP/1.1 */
#define http_flags_KEPTALIVE 0x20000 /* Server is keeping this connection alive
                                        (also implied by HTTP11) */
#define http_flags_NOTALIVE  0x40000 /* Server is known not to be keeping this
                                        connection alive */
#define http_flags_DOESRANGE 0x80000 /* Server is known to cope with Range: */
#define http_flags_GOTFIRST 0x100000 /* it was an image, and we've got the
                                        first few bytes */
#define http_flags_CHUNKED  0x200000 /* 1.1 Transfer-Encoding: Chunked (arse) */
#define http_flags_DOESKEEPALIVE  0x400000 /* Server copes with keep-alive */
#define http_flags_RANGEBROKEN    0x800000 /* Server's range stuff is broken */
#define http_flags_TUNNELLING    0x1000000 /* Is tunnelling code currently in action */
#define http_flags_NETWORKFILE   0x2000000 /* Fetching to a file on a network filing system */
#define http_flags_NOSETTYPEOPEN    0x4000000 /* Can't settype on an open file */

#define http_flags_INTERNAL 0x7FF0000

/* Flags shared by all connections to the same server */
#define http_flags_SERVER (http_flags_HTTP11|http_flags_DOESRANGE|http_flags_DOESKEEPALIVE|http_flags_RANGEBROKEN)

/* Blocking sockets with callback? */
#ifdef RISCOS
#define HTTP_CALLBACK 0
#else
#define HTTP_CALLBACK 1
#endif

typedef struct http_status http_status_out;
typedef struct httpconn httpconn;

typedef struct httpconn *http_handle;	/* Abstract type */

#if HTTP_CALLBACK
typedef void (*http_callback)( void *handle, httpconn *c,
                               http_status_out *st );
#endif

typedef struct {
    struct sockaddr_in      *addr;
    char *object;
    struct http_header_item *headers;
    char *fname;
    char *bname;
    int flags;			/* Options for the connection */
    int action;			/* Only in Acorn CSFS versions */
#if HTTP_CALLBACK
    http_callback   cb;         /* Callback function */
    void            *cbhandle;  /* Callback handle */
    args_PAD9;
#else
    args_PAD7;
#endif
} http_open_in;

typedef struct {
    struct httpconn *handle;
    args_PAD1;
} http_open_out;

typedef union {
    http_open_in in;
    http_open_out out;
} http_open_args;

/* Environment variables */

#define HTTP_CLIENT_CERT_VAR	"HTTP$ClientCertFile"	/* File name for client certificate */
#define HTTP_CLIENT_KEY_VAR	"HTTP$ClientKeyFile"	/* File name for client key, if null then in CertFile */

#define SSL_VERSION_VAR		"HTTP$SSLVersion"	/* unset,0,2,3 */

/* HTTP_Status */

/* pseudo headers passed back to application in status call */

#define SSL_HEADER_CERT_SUBJECT	"X-SSL-Certificate-Subject"
#define SSL_HEADER_CERT_ISSUER	"X-SSL-Certificate-Issuer"
#define SSL_HEADER_CIPHER	"X-SSL-Cipher"
#define SSL_HEADER_VERIFIED	"X-SSL-Verified"
#define SSL_HEADER_YES		"Yes"
#define SSL_HEADER_NO		"No"

typedef struct {
    struct httpconn *handle;
    args_PAD1;
} http_status_in;

/*typedef*/ struct http_status {
    int status;
    int ro_fh;
    char *fname;
    int data_size;
    int data_so_far;
    struct http_header_item *headers;
    int rc;
    char *message;
    args_PAD8;
} /*http_status_out*/;

typedef union {
    http_status_in in;
    http_status_out out;
} http_status_args;


/* HTTP_Close */

typedef int http_close_flags;
#define http_close_DELETE_FILE	0x01	/* Delete the file when the conneciton is closed */
#define http_close_SET_TYPE	0x02	/* Set the file type according to Content-type: header line */
#define http_close_DELETE_BODY	0x04	/* Delete the body when the conneciton is closed */
#define http_close_FATAL        0x08    /* Fail any connections queued behind this one */

typedef struct {
    struct httpconn *handle;
    int flags;
    args_PAD2;
} http_close_in;

typedef struct {
    int status;
    args_PAD1;
} http_close_out;

typedef union {
    http_close_in in;
    http_close_out out;
} http_close_args;


/* HTTP_MapToRISCOS */

typedef struct {
    char *extn;
    args_PAD1;
} http_maptoriscos_in;

typedef struct {
    int ft;
    args_PAD1;
} http_maptoriscos_out;

typedef union {
    http_maptoriscos_in in;
    http_maptoriscos_out out;
} http_maptoriscos_args;


/* HTTP_MapFromRISCOS */

typedef struct {
    int ft;
    args_PAD1;
} http_mapfromriscos_in;

typedef struct {
    char *extn;
    args_PAD1;
} http_mapfromriscos_out;

typedef union {
    http_mapfromriscos_in in;
    http_mapfromriscos_out out;
} http_mapfromriscos_args;


/* HTTP_SetFileType */

typedef struct {
    struct httpconn *handle;
    args_PAD1;
} http_setfiletype_in;

typedef struct {
    int ftype;
    args_PAD1;
} http_setfiletype_out;

typedef union {
    http_setfiletype_in in;
    http_setfiletype_out out;
} http_setfiletype_args;


/* HTTP_CompletedPart */

typedef struct {
    struct httpconn *handle;
    int flags;                      /* http_close_DELETE_FILE/SET_TYPE */
    char *newfname;
    args_PAD3;
} http_completedpart_in;

typedef struct {
    args_PAD0;
} http_completedpart_out;

typedef union {
    http_completedpart_in in;
    http_completedpart_out out;
} http_completedpart_args;


/* HTTP_VerifyMessageDigest */

#define http_vmd_flag_CERT_DER	0x01 /* 1 = DER encoded, 0 = PEM encoded */
#define http_vmd_flag_KEY_DER	0x02 /* 1 = file DER encoded, 0 = PEM encoded */
#define http_vmd_flag_CERT_INCORE 0x04 /* 1 = DER certificate is in RAM, 0 = DER certificate is on disc */
#define http_vmd_flag_RAW_PKEY 0x08    /* 1 = root public key is RAW DER public key, 0 = public key resides in x.509 cert */
#define http_vmd_flag_EXPIRE_BEFORE 0x10 /* check certificate 'notBefore' field against current time/date */
#define http_vmd_flag_EXPIRE_AFTER 0x20 /* check certificate 'notAfter' field against current time/date */

typedef struct
{
    int flags;
    char *message_data;
    int message_data_len;
    char *digest_data;
    int digest_data_len;
    char *public_key;		/* filename */
    char *certificate;		/* filename or ptr to DER certificate in RAM */
    int certificate_len;	/* length of RAM based certificate, or ignored */
    args_PAD8;
} http_verifymessagedigest_in;

/* return codes */
#define http_vmd_rc_NOT_SUPPORTED (-1)
#define http_vmd_rc_VERIFIED	 0
#define http_vmd_rc_BAD_INPUT	 1
#define http_vmd_rc_BAD_CERT	 2
#define http_vmd_rc_FAILED	 3
#define http_vmd_rc_NO_FREE_RSA  4
#define http_vmd_rc_NO_FREE_EVP  5
#define http_vmd_rc_BAD_RSA      6
#define http_vmd_rc_NO_FREE_X509 7
#define http_vmd_rc_CERT_NBERROR 8
#define http_vmd_rc_CERT_NOTYET  9
#define http_vmd_rc_CERT_NAERROR 0xa
#define http_vmd_rc_CERT_EXPIRED 0xb

typedef struct
{
    int rc;
    args_PAD1;
} http_verifymessagedigest_out;

typedef union
{
    http_verifymessagedigest_in in;
    http_verifymessagedigest_out out;
} http_verifymessagedigest_args;

/* HTTP_Config */

typedef struct
{
    int flags;
    int r1;
    int r2;
    args_PAD3;
} http_config_args;

#define http_config_SET_FLAGS		0
#define http_config_GET_MAX_SOCKETS	1
#define http_config_SET_MAX_SOCKETS	2
#define http_config_IS_SSL_AVAILABLE	3
#define http_config_REASON_MASK		0xff

#define http_config_ALLOW_KEEPALIVE	(1<<0)
#define http_config_ALLOW_RANGES	(1<<1)
#define http_config_ALLOW_SERVERPUSH	(1<<2)
#define http_config_USE_MIMEMAPMOD	(1<<3)
#define http_config_ONE_CERT_PROMPT	(1<<4)

#define http_ssl_NONE		0
#define http_ssl_EXPORT		1
#define http_ssl_FULL		2

/* HTTP_CertOp */

/* Reason codes for http_certop_in.reason */
#define http_certop_reason_GET_STATUS		0
#define http_certop_reason_TOKEN_GIVEN		1
#define http_certop_reason_CERT_CHOSEN		2
#define http_certop_reason_PIN_ENTERED		3
#define http_certop_reason_CANCEL		4


/* state codes for http_certop_status_out.state */
#define http_certop_state_NOT_STARTED		(-1)	/* on data */
#define http_certop_state_ERROR			0	/* CryptoKi error code */
#define http_certop_state_PROCESSING		1	/* no data */
#define http_certop_state_TOKEN_REQUIRED	2	/* no data */
#define http_certop_state_CERT_CHOICE_REQUIRED	3	/* buffer contains list of certificates */
#define http_certop_state_PIN_REQUIRED		4	/* no data */
#define http_certop_state_CANCELLED		5	/* cancelled by user - no data */

typedef struct
{
    char *buf;
    int buf_len;
} http_certop_data_get_status;

typedef struct
{
    int index;
} http_certop_data_cert_chosen;

typedef struct
{
    char *pin;
    int pin_len;
} http_certop_data_pin_entered;

typedef struct
{
    int reason;
    struct httpconn *handle;
    union
    {
	http_certop_data_get_status get_status;
	/* http_certop_data_token_given token_given; - no data */
	http_certop_data_cert_chosen cert_chosen;
	http_certop_data_pin_entered pin_entered;
    } data;
    args_PAD4;
} http_certop_in;

typedef struct
{
    int state;			/* as defined above */
    int rv;			/* last CryptoKi return value */
    char *buf;
    int buf_len;
    int num_certs;
    args_PAD5;
} http_certop_status_out;

typedef union
{
    http_certop_in in;
    http_certop_status_out status_out;
} http_certop_args;

#if 0
/* HTTP_SSLOpen */

typedef struct http_ssl *http_ssl;

#define http_sslopen_VERIFY	1   /* Fail connection if not verified */

typedef struct
{
    int flags;
    args_PAD1;
} http_sslopen_in;

typedef struct
{
    http_ssl s;
    args_PAD1;
} http_sslopen_out;

typedef union
{
    http_sslopen_in in;
    http_sslopen_out out;
} http_sslopen_args;
#endif

#if FLAVOUR_TRANSPORT_MODULES
#define http_completedpart(x)   os_swix(HTTP_CompletedPart,(os_regset*)x)
#define http_close(x)           os_swix(HTTP_Close,(os_regset*)x)
#define http_open(x)            os_swix(HTTP_Open,(os_regset*)x)
#define http_setfiletype(x)     os_swix(HTTP_SetFileType,(os_regset*)x)
#define http_status(x)          os_swix(HTTP_Status,(os_regset*)x)
#define http_config(x)          os_swix(HTTP_Config,(os_regset*)x)
#define http_certop(x)          os_swix(HTTP_CertOp,(os_regset*)x)
#else
os_error *http_completedpart(http_completedpart_args *args);
os_error *http_converttopem(_kernel_swi_regs *r);
os_error *http_close(http_close_args *args);
os_error *http_open(http_open_args *args);
os_error *http_setfiletype(http_setfiletype_args *args);
os_error *http_status(http_status_args *args);
os_error *http_verifymessagedigest(http_verifymessagedigest_args *r);
os_error *http_mapfromriscos(http_mapfromriscos_args *args);
os_error *http_maptoriscos(http_maptoriscos_args *args);
os_error *http_config( http_config_args *r);
extern os_error *http_certop( http_certop_args *args );

/*os_error *http_sslopen( http_sslopen_args* );*/
#endif

#endif
/* eof httppub.h */
