/* file.h */

#ifndef layers_file_h
#define layers_file_h

    /* OS_FSControl 37: canonicalise filename */
#ifdef RISCOS
#define file_canonicalise_name(n,b,s) _swix(0x20029,_INR(0,5),37,n,b,0,0,s)
#else
void file_canonicalise_name( const char *name, char *buffer, int bufsize );
#endif

    /* Gives the right answer if the file exists but is open */
BOOL file_exists( const char *name );

    /* FALSE if not found */
BOOL file_is_directory( const char *name );

    /* Returns FALSE if doesn't exist or is currently open */
BOOL file_get_size_and_type_and_date( const char *fname, int *pSize, int *pType, time_t *pDate );
BOOL file_get_size_and_type( const char *fname, int *pSize, int *pType );

    /* OS_FSControl 38: derive filetype from object info. Returns -1 for
     * untyped, 0x1000 dir, 0x2000 application */
int file_info_to_type( const char *name, unsigned int load, unsigned int exec,
                       int objtype );

os_error *file_set_type( const char *fname, int type );

    /* OS_FSControl 31: convert file type string to number
     * Returns -1 if not known */
int file_typename_to_number( const char *name );

    /* OS_FSControl 27: wipe objects (wildcarded name) */
#ifdef RISCOS
#define file_wipe_objects(n) _swix( OS_FSControl, _IN(0)|_IN(1)|_IN(3),27,n,3 )
#else
os_error *file_wipe_objects( const char *name );
#endif

time_t file_riscostounixtime( unsigned int loword, char hibyte );

#ifdef RISCOS
#define file_copy(f,t) _swix( OS_FSControl, _INR(0,3),26,f,t,2)
#else
os_error *file_copy( const char *from, const char *to );
#endif

#ifdef RISCOS
#define file_save(f,s,e,t) _swix(OS_File, _INR(0,2)|_INR(4,5), 10, f,s,e,t )
#else
os_error *file_save( const char *fname, void *start, void *end, int ftype );
#endif

    /* OS_File 4: make new directory */
#ifdef RISCOS
#define file_new_directory(s) _swix(OS_File, _INR(0,1)|_IN(4), 8, s, 0 )
#else
os_error *file_new_directory( const char *name );
#endif

    /* Enumerate all filenames from a directory into a linked
       list. Note that two successive calls for the same directory may
       give different answers due to async changes to that directory,
       so write your code carefully! The more field is for tagging
       each file with more information as operations
       progress. file_enumdir() sets each more field to NULL. A
       pointer to the head of the list generated is written to the
       location supplied by the caller. If the directory is empty, or
       an error occurs, NULL will be written. The collections of
       additional information about each file is very environment
       specific. */

typedef struct file_filelist
{
    struct file_filelist	*next;
    const char			*name; /* leaf; no parent */
    int				size;
    time_t			date;
    int				type; /* From filetypes.h */
    void			*more;
} file_filelist;

os_error *file_enumdir(const char *dirname, file_filelist **headp);

/* Where this is varies across builds! */
const char *mime_map_from_riscos( int ft );

#endif
