/* http.h */

/* Private header for HTTP fetcher module
 * (C) ANT Limited 1997 -- All Rights Reserved -- Confidential
 */

/*---------------------*
 * Compilation options *
 *---------------------*/

#ifndef DEBUG
# define DEBUG 0
# undef REMOTE_DEBUG
#endif

/* This was an experimental fix to try and duplicate Netscapes
   behaviour of including CRLF at the end of a block of headers
   without actually including it in the content-length. It didn't fix
   the problem so I don't recommend enabling it. */
#ifndef ADD_CRLF
# define ADD_CRLF 0
#endif

/* This option keeps the input buffer for a connection as a block
 separate from the main connection structure and reallocates is when
 the input header line gets too long. This has been used successfully. */
#ifndef EXTEND_BUFFER
# define EXTEND_BUFFER 1
#endif


/* This option is for use with NCFresco as shipped in Model 1. That
   didn't have separate proxies for http and https. Enabling this
   allows an alternate SSL proxy to be configured in an environment
   variable. The option works fine but is not needed for newer
   Fresco's. */

#ifndef PROXY_REDIRECT
# define PROXY_REDIRECT 0
#endif

/* This option enables extra SWIs giving access to the crypto
 * functions. These are necessary for the RCA build and anything using
 * full managed access. */

#if !defined(NO_SECURE) && defined(VERIFY_MD)
# undef VERIFY_MD
# define VERIFY_MD 1
#else
# undef VERIFY_MD
# define VERIFY_MD 0
#endif

/* This option enables use of a PKCS11 library to give client
 * authentication (assuming a suitable SSLeay is in use) */

#ifndef FLAVOUR_PKCS11
# define FLAVOUR_PKCS11 0
#endif

#if FLAVOUR_PKCS11 && defined(NO_SECURE)
# undef FLAVOUR_PKCS11
# define FLAVOUR_PKCS11 0
#endif

/* Some behavioural defines I was playing with */
/*#define REOPEN_ON_SETTYPE	1*/
#define SEPARATE_ALLOW_WRITE	1
#define ALLOW_DIRECT_CALL_FROM_INETEVENT 0
/* pdh 08-Jul-98: reopen_on_settype needs to be 1 if the output file may be on
 * ShareFS; unlike every other FS I've seen, ShareFS doesn't let you set the
 * type of an open file.
 */

/* Is this always needed? */
#ifndef BOOL
#define BOOL int
#define TRUE 1
#define FALSE 0
#endif

/*----------*
 * Includes *
 *----------*/

#include <stdlib.h>
#include <stdio.h>

#ifdef RISCOS
# ifdef ACORN_BUILD
#  include "swis.h"
#  include "types.h"
# else
extern int errno;
#  include "riscos_lib/os.h"
#  include "riscos_lib/swis.h"
# endif
#endif /* RISCOS */

#ifndef NO_SECURE

# define HEADER_DES_LOCL_H		/* prevents crypt() warning */
# ifdef ACORN_BUILD
# include "objects.h"		/* for NID */
# include "pem.h"		/* for PEM_ */
# include "rsa.h"

# include "ssl.h"
# include "x509.h"

# include "crypto.h"

# include "err.h"
# else
# include "ssleay/objects.h"		/* for NID */
# include "ssleay/pem.h"		/* for PEM_ */
# include "ssleay/rsa.h"

# include "ssleay/ssl.h"
# include "ssleay/x509.h"

# include "ssleay/crypto.h"

# include "ssleay/err.h"
# endif

# define CERT_VERIFY_DEPTH 10

# if FLAVOUR_PKCS11
#  ifdef RISCOS
#   define _ACORN
#  endif
#  include "pkcs11.h"
# endif

#endif /* NO_SECURE */

/* "Unused" macro */
#define UNUSED(a) a=a

#ifdef HTTPMOD
# ifdef ACORN_BUILD
#  include "TCPIPLibs/sys/types.h"
#  include "TCPIPLibs/sys/socket.h"
#  include "TCPIPLibs/sys/errno.h"

#  include "TCPIPLibs/net/if.h"
#  include "TCPIPLibs/netinet/in.h"
#  include "TCPIPLibs/sys/ioctl.h"
#  include "TCPIPLibs/netdb.h"
#  include "TCPIPLibs/netns/ns.h"
#  include "TCPIPLibs/sys/time.h"
#  include "TCPIPLibs/socklib.h"
#  include "TCPIPLibs/inetlib.h"
# else
#  include "riscos_tcpip/in.h"
#  include "riscos_tcpip/netdb.h"
#  include "riscos_tcpip/socket.h"
#  include "riscos_tcpip/socklib.h"
#  include "riscos_tcpip/sock_errno.h"
# endif

# include "files.h"
# include "file.h"
# include "notlayer.h"
# include "mimemap.h"
#endif /* HTTPMOD */

#ifndef included_status_h
# include "status.h"
#endif

#ifndef included_httppub_h
# include "httppub.h"
#endif


/*--------------------*
 * Global definitions *
 *--------------------*/


#ifndef TESTMODE
#define TESTMODE 0
#endif

/* Last byte of an image to fetch as a priority */
#define IMAGE_HEADER     255
#define IMAGE_HEADER_T  "255"
#define IMAGE_HEADER1    256
#define IMAGE_HEADER1_T "256"

#define MAXSOCKETS 12        /* Can be overridden */

#ifndef FILETYPE_HTML
#define FILETYPE_HTML	0xfaf
#endif

/* The version string sent in requests and expected in replies */
#define HTTP_VERSION "HTTP/1.0"
#define HTTP_VERSION_CHECK "HTTP"

/* default port numbers */
#define HTTP_PORT	80
#define HTTPS_PORT	443

/* How many cs between checks to see if a connection has been made */
#define TICKER_RATE	10

/* The longest single line we can cope with */
#define HEADER_MAX_INPUT	2048	/* We can loose the end off a header line if the line exceeds this length */

/* For shutting up the compiler */
#ifndef NOT_USED
#define NOT_USED(a) (a=a)
#endif

/*-------------*
 * SSL stuff   *
 *-------------*/

#ifndef NO_SECURE
# if defined(SSLEAY_VERSION_NUMBER)
#  define SSLEAY SSLEAY_VERSION_NUMBER
# else
#  define SSLEAY 0x0600
# endif

# if SSLEAY >= 0x0800
#  define SSLEAY8
#  define SSL_VERSION	 3			/* current version of SSL supported */
#  ifdef ACORN_BUILD
#   define SSL_errno()     errno
#   define SSL_verified(s) (0)	    	    	/* for now */
#  else
extern int SSL_errno(void);
extern int SSL_verified(SSL *session);
extern void riscos_ZM_Initialise( void );
#   define SSL_export_only() 1
#  endif
# else
#  undef SSLEAY8
#  define SSL_VERSION	 2			/* current version of SSL supported */

/* port routines */
extern os_error *SSL_LibraryPresent( void );
extern int SSL_verified(SSL *session);

extern void riscos_ZM_Initialise( void );
extern void *riscos_ZM_realloc( void *ptr, size_t newsize );
extern void riscos_SSLLib_Init( void );

# endif

#if SSLEAY >= 0x0900
# define HTTP_SSLEAY_OPTIONS (SSL_OP_ALL | SSL_OP_NO_TLSv1)
#else
# define HTTP_SSLEAY_OPTIONS SSL_OP_ALL
#endif

#endif

/*-------------*
 * Debug stuff *
 *-------------*/

#ifndef HTTP_DEBUG
# define HTTP_DEBUG DEBUG
#endif

#if HTTP_DEBUG
# if defined(WIN32)
#  define fdebugf fdbg
# else
#  define fdebugf fprintf_and_flush
# endif
#else
# define fdebugf 1?0:fprintf
#endif

extern void fprintf_and_flush(FILE*,const char*,...);
extern void dump_ssl_error(void);

/*---------------------------------------------------*
 * Internal data structure representing a connection *
 *---------------------------------------------------*/


/* Keep-Alive and transaction queues
 *
 * The handle returned by HTTP_Open is a pointer to a http_connection
 * structure. All http_connections are linked together in a 2LL by the next
 * and prev fields.
 *     A connection optionally has a pointer to an http_queue where there's
 * a queue of transactions *not yet started*. This queue is linked in a 2LL
 * by the queuenext/queueprev fields.
 *     Once a transaction is started (allow_read) it's removed from q->queue
 * and placed in the queuenext field of the transaction it's queued behind.
 * This commits it as to what socket it's using. Its own queuenext field is
 * set to NULL.
 *     The current transaction on each socket is also kept in the http_conn
 * array, indexed by socket number.
 *     On a successful completion a transaction goes allow_write on its
 * queuenext member if there is one, otherwise it gets one from the q->queue.
 *     On a connection close (orphan_queue) open_socket is called on the
 * queuenext member if there is one, otherwise the next one from q->queue.
 *     open_socket and close_socket adjust q->sockets, freeing the q if it
 * becomes zero.
 *     If only one connection has ever been opened to a given server, it won't
 * have a http_queue pointer. Only the second connection causes a queue to be
 * set up (into which any third connection will be placed).
 *
 * Thus we have, for example
 *
 *      +---+          +---+        +----+
 *      | A |---\  /---| A |        | A2 |       ...
 *      +---+   |  |   +---+        +----+
 *       |     ######
 *      +---+  # Q  #
 *      | S |  ######
 *      +---+      |
 *                +---+
 *                | W |
 *                +---+
 *                 |
 *                +---+
 *                | W |
 *                +---+
 *                 ...
 *
 * where the A's are active transactions to the same server (with a socket
 * each), S is a transaction to the same server that's been started (request
 * sent but reply not started), Q is the http_queue for that server, and the
 * W's are transactions to that server waiting to start. A2 is an active
 * transaction to a different server.
 *     The other links not shown on that diagram are the http_conn array, which
 * points to the A's and to A2, and the doubly-linked list which connects all
 * the transactions (A, A2, S, W).
 *
 */

#if 0
#define hostflags_SECURE        0x1
#define hostflags_RANGES        0x2     /* Server supports byte ranges */
#define hostflags_KEEPALIVE     0x4     /* Server supports keep-alive */
#endif

typedef struct http_queue {
    int                nsockets;
    struct httpconn    *queue;
    struct http_queue  *prev;
    struct http_queue  *next;
    struct sockaddr_in sa;
    int                flags;
} http_queue;

typedef struct httpconn {
    int magic;			/* Magic number to check bogus handles */
#define HTTP_MAGIC	0x4582FB29
    struct httpconn *next;	/* Pointer to the next one */
    struct httpconn *prev;	/* POinter to the previous one */
    int poll_word;		/* Goes non-zero on completion or error */
    transfer_status status;	/* Connection status */
    char *object;		/* Object to be fetched */
    int socket;			/* Socket number, or -1 */
    struct sockaddr_in sa;	/* Address we want to connect to */
    char *fname;		/* Name of file for the data */
    int fh;			/* RISC OS handle to the above file when open */
    char *bname;		/* Name of file for the body */
    int bh;			/* RISC OS handle to the above file when open */
    int data_size;		/* Given the value -1 if we do not know */
    int data_so_far;		/* Amount of data so far EXCLUDING headers */
    http_header_item *headers;	/* Linked list of header items */
    int rc;			/* Return code, -1 until we know */
    char *message;		/* Message with return code, NULL until we know */
    int buf_off;		/* New data goes here */
    int buf_used;		/* Data already taken up to here */
#if EXTEND_BUFFER
    int buf_size;		/* current size of data buffer */
#else
    int _buf_size;
#endif
    char *buffer;		/* Data buffer for incoming data */
#ifdef NO_SECURE
    void *_SSL;
#else
    SSL *SSL;                   /* Secure Socket Layer connection data */
#endif
    int flags;
    int data_pending;

    char *send_headers;		/* and request too actually */
    int send_headers_length;	/* total amount of request */
    int send_sent;		/* amount of send_headers actually sent */

    struct httpconn *queuenext, *queueprev;
                                /* Linked list starting from an http_queue */

    struct http_queue *queue;   /* Queue of further requests to this host */

    int total_size;             /* For partial requests */

    char *boundary;             /* Server-push boundary (NULL for none) */
    int nearlyboundary;         /* #chars of boundary found at end of packet */

    int onthissocket;
#ifdef CSFS
    int action;			/* action assiciated with this connection */
#else
    void *_action;
#endif
} http_connection;


#ifndef NO_SECURE
extern BOOL ssl_present;
extern SSL_CTX *ssl_context;
extern BOOL verify_error;
extern void bio_debug_open(SSL *s);
#endif

/*---------------------------------------*
 * Interface between http.c and module.c *
 *---------------------------------------*/


os_error *http_check_handle(http_connection *c);
os_error *http_close_handle(http_connection *c, int flags);


http_connection *http_connection_for_socket( int socket );
os_error *http_prosecute( http_connection *c );
os_error *make_httperror(int err);

extern FILE *log_file;
extern http_connection *http_cons_list;
extern http_queue      *http_queues_list;

extern volatile int callback_pending;
extern volatile int threaded;
extern void *private_word;
extern int keptalive;
extern int maxsockets;
extern int totalsockets;
extern int sockets_connecting;
extern int keepalivelies;
extern int connresets;
extern int inet_version;
extern int allow;

/* From client.c */

#ifndef NO_SECURE
extern void client_cert_initialise( SSL_CTX *ssl_context );
extern void client_cert_finalise( void );
extern void client_cert_cleanup( SSL *ssl );
extern void client_status_called( SSL *ssl );
extern void client_cli_read_certificates( void );
#endif

#if FLAVOUR_PKCS11
extern void client_smartcard_insertion( http_connection *c, BOOL inserted );
#endif

/* eof http.h */
