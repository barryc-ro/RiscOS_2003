/* > certs.c
 *
 * Routines to interface to the crypto library for NC Managed Access
 *
 */
#include <errno.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <ctype.h>
#include <stdarg.h>

#include "http.h"

/*
 * New function to use the crypto routines to verify a message digest against
 * a public key and maybe a certificate.

API:

VerifyMessageDigest

 IN
   int    : flags
          : type of key.certificate
          : fetch DER encoded public certificate from memory or disc
   char * : message data
   int    : message data length
   int    : digest type
   char * : digest received
   int    : digest received length
   char * : ptr to DER encoded public key / ptr to DER encoded public key certificate (depends on flags)
   char * : filename of X509 certificate in PEM, or DER, or ptr to X509 DER certificate in RAM (depends on flags)
   int    : RAM X509 DER certificate length or 0 (depends on flags)

 OUT
   Does it match or not? or error

Here is what was sent to the NSA

   API extension for HTTP-SSL module.
   ==================================

A new interface is created called HTTP_VerifyMessageDigest.

The parameters to this are

      flags word
      pointer to and length of message
      pointer to and length of encrypted message digest
      message digest type
      pointer to DER encoded public key
      optional pointer to filename of X509 certificate in PEM or DER encoding

If the X509 certificate is given then the public key is used to
verify the certificate and extract a new public key. This public
key is then used to verify the message digest.

If no certificate is given then the public key given is used to verify
the message digest.

A given X509 certificate may be PEM or DER encoded - in the latter case
it may reside in RAM or on disc

The root public key may be PEM or DER encoded - in the latter case it may be just a plain RSA public key or an x.509 certificate
containing an RSA public key.

The routine will return success or an error code giving at what point
the failure to verify occurred. This will be one of
   Input values bad in some way
   Certificate failed to verify
   Digest failed to verify

   */

_kernel_oserror *http_verifymessagedigest(http_verifymessagedigest_args *r)
{
#if defined(NO_SECURE)
    return make_error(err_SSL_NOT_AVAILABLE);
    r = r;
#elif !VERIFY_MD
    r->out.rc = http_vmd_rc_NOT_SUPPORTED;
    return NULL;
    r = r;
#else
    _kernel_oserror *e = NULL;
    EVP_PKEY *pkey = NULL, *pkey2 = NULL;
    RSA *rsa = NULL;
    X509 *xcert = NULL;
    FILE *f;
    EVP_MD_CTX md_ctx;
    int i;

    int rc = http_vmd_rc_BAD_INPUT;
    unsigned char *certificate_ptr, *pubkey_ptr;
    unsigned char **certificate_ptr_ptr, **pubkey_ptr_ptr;
    unsigned char *rsa_buff = NULL;
    unsigned int rsa_bytes;

    fdebugf(log_file, "HTTP_VerifyMessageDigest:\n  flags %08x\n  key '%s'\n  cert '%s'\n  message @ 0x%p/%d\n  digest @ 0x%p/%d\n",
	    r->in.flags,
	    r->in.public_key ? r->in.public_key : "<none>",
	    r->in.certificate ? r->in.certificate : "<none>",
	    r->in.message_data, r->in.message_data_len,
	    r->in.digest_data, r->in.digest_data_len);

    /* check some initial values */
    if (r->in.message_data == NULL || r->in.message_data_len == 0 ||
	r->in.digest_data == NULL || r->in.digest_data_len == 0)
    {
	r->out.rc = rc;
	return NULL;
    }

    /* get the initial public key from the file */
    if (r->in.public_key)
    {
	if ((f = fopen(r->in.public_key, "rb")) != NULL)
	{
	    if(r->in.flags & http_vmd_flag_RAW_PKEY) { /* root file is raw (ie DER) RSA public key */
	      fdebugf(log_file, "reading raw DER public key from file\n");
	      if((rsa_buff = (unsigned char *)mm_malloc(512))==NULL) {
	          fdebugf(log_file, "couldn't get new RSA buffer\n");
	          fclose(f);
	          r->out.rc = http_vmd_rc_NO_FREE_RSA;
	          return NULL;
	      }

	      rsa_bytes = fread(rsa_buff, 1, 512, f);

	      fclose(f);

	      pubkey_ptr = rsa_buff;
	      pubkey_ptr_ptr = &pubkey_ptr;

	      if((rsa = d2i_RSAPublicKey(NULL, pubkey_ptr_ptr, rsa_bytes))==NULL) {
	          fdebugf(log_file, "couldn't unpack RSA public key\n");
	          r->out.rc = http_vmd_rc_BAD_RSA;
	          return NULL;
	      }

	      if((pkey = EVP_PKEY_new())==NULL) {
	          fdebugf(log_file, "couldn't get new EVP_PKEY buffer\n");
	          r->out.rc = http_vmd_rc_NO_FREE_EVP;
	          return NULL;
	      }

	      pkey->type = EVP_PKEY_RSA;
	      pkey->pkey.rsa = rsa;

	    } else { /* root file is a certificate (PEM or DER) */

	      /* extract X509 certificate from file */
	      if (r->in.flags & http_vmd_flag_KEY_DER)
	      {
		  if((xcert = d2i_X509_fp(f, NULL))==NULL) {
		      fdebugf(log_file, "couldn't claim x509 cert\n");
		      r->out.rc = http_vmd_rc_NO_FREE_X509;
		      return NULL;
		  }
	      }
	      else
	      {
		  if((xcert = PEM_read_X509(f, NULL, 0))==NULL) { /* specify default callback function - could be awkward if it was called */
		      fdebugf(log_file, "couldn't claim x509 cert\n");
		      r->out.rc = http_vmd_rc_NO_FREE_X509;
		      return NULL;
		  }
	      }

	      fclose(f);

	      fdebugf(log_file, "key cert @ 0x%p\n", xcert);

	      if (xcert)
	      {
		  pkey = X509_extract_key(xcert);

		  fdebugf(log_file, "key @ 0x%p\n", pkey);

		  X509_free(xcert);
	      }
	  }
	}
    }

    /* if there's a certificate given then extract the public key from it to use instead */
    if (pkey && r->in.certificate)
    {

        if((r->in.flags & http_vmd_flag_CERT_INCORE) && (r->in.flags & http_vmd_flag_CERT_DER)) { /* it's DER, and it's in RAM */
          certificate_ptr = (unsigned char *)r->in.certificate;
          certificate_ptr_ptr = &certificate_ptr; /* yuk. d2i_X509() made me do it */

          if((xcert = d2i_X509(NULL, certificate_ptr_ptr, (long)r->in.certificate_len))==NULL) {
              fdebugf(log_file, "DER parsing of in-core cert. failed\n");
              rc = http_vmd_rc_BAD_INPUT;
              return NULL;
          }
        } else { /* it's not DER, or it's not in RAM */
	  FILE *f;
	  if ((f = fopen(r->in.certificate, "rb")) != NULL)
	  {


	     /* extract X509 certificate from file */
	     if (r->in.flags & http_vmd_flag_CERT_DER)
	     {
		if((xcert = d2i_X509_fp(f, NULL))==NULL) {
		  fdebugf(log_file, "couldn't claim x509 cert\n");
		  r->out.rc = http_vmd_rc_NO_FREE_X509;
		  return NULL;
		}
	     }
	     else
	     {
		if((xcert = PEM_read_X509(f, NULL, 0))==NULL) { /* specify default callback function - could be awkward if it was called */
		  fdebugf(log_file, "couldn't claim x509 cert\n");
		  r->out.rc = http_vmd_rc_NO_FREE_X509;
		  return NULL;
		}
	     }

	     fclose(f);


	  } else {
	      fdebugf(log_file, "couldn't open certificate file %s\n", r->in.certificate);
	      rc = http_vmd_rc_BAD_INPUT;
	      return NULL;
	  }
	}

	     if (xcert)
	     {
		fdebugf(log_file, "new cert @ 0x%p\n", xcert);

		if(r->in.flags & http_vmd_flag_EXPIRE_BEFORE) { /* expire-before checking */
        		i = X509_cmp_current_time(xcert->cert_info->validity->notBefore);
        		if(i==0) {
        		    fdebugf(log_file, "error in notBefore field of cert\n");
        		    rc = http_vmd_rc_CERT_NBERROR;
        		    X509_free(xcert);
        		    return NULL;
        		}

        		if(i>0) {
        		    fdebugf(log_file, "certificate not yet valid\n");
        		    rc = http_vmd_rc_CERT_NOTYET;
        		    X509_free(xcert);
        		    return NULL;
        		}
        	} /* endif expire-before checking */

        	if(r->in.flags & http_vmd_flag_EXPIRE_AFTER) { /* expire-after checking */
        		i = X509_cmp_current_time(xcert->cert_info->validity->notAfter);
        		if(i==0) {
        		    fdebugf(log_file, "error in notAfter field of cert\n");
        		    rc = http_vmd_rc_CERT_NAERROR;
        		    X509_free(xcert);
        		    return NULL;
        		}

        		if(i<0) {
        		    fdebugf(log_file, "certificate has expired\n");
        		    rc = http_vmd_rc_CERT_EXPIRED;
        		    X509_free(xcert);
        		    return NULL;
        		}
        	} /* endif expire-after checking */

		if (X509_verify(xcert, pkey))
		{
		    /* claim a  new key */
		    pkey2 = X509_extract_key(xcert);

		    fdebugf(log_file, "new key @ 0x%p\n", pkey);

		    if (!pkey2) {
		        fdebugf(log_file, "new cert has no key! Reverting to old one.\n");
			rc = http_vmd_rc_BAD_CERT; /* pkey still intact, so fall through */
		    } else { /* new key is ok, free old one, use new one */
		      if(pkey) EVP_PKEY_free(pkey);
		      rsa = NULL;
		      pkey = pkey2;
		    }
		}
		else
		{
		    fdebugf(log_file, "new cert failed to verify, reverting to old key\n");
		    rc = http_vmd_rc_BAD_CERT; /* pkey still intact, so fall through */
		    X509_free(xcert);
		    return NULL; /* optionally, we could omit this, and continue with the original pubkey,
		    	   	    which is still intact up to this point */

		}

		X509_free(xcert);
	     }

    }

    /* if we have a public key by this point */
    if (pkey)
    {

	/* set up and verify the message digest
	 * assume MD5 only for now unless we need others
	 */
	fdebugf(log_file, "VerifyInit\n");
	EVP_VerifyInit(&md_ctx, EVP_md5());

	fdebugf(log_file, "VerifyUpdate\n");
	EVP_VerifyUpdate(&md_ctx, (unsigned char *)r->in.message_data, r->in.message_data_len);

	fdebugf(log_file, "VerifyFinal\n");
	if (EVP_VerifyFinal(&md_ctx, (unsigned char *)r->in.digest_data, r->in.digest_data_len, pkey))
	    rc = http_vmd_rc_VERIFIED;
	else
	    rc = http_vmd_rc_FAILED;

	fdebugf(log_file, "rc=%d\n", rc);

	/* free any key we have open */
	EVP_PKEY_free(pkey);
	rsa = NULL; /* if this existed, evp_pkey_free will have freed it for us */
    }

    if(rsa) RSA_free(rsa);

    r->out.rc = rc;

#if DEBUG
    if (rc)
    {
	fdebugf(log_file, "** crypto error log\n");
	ERR_print_errors_fp(log_file);
	fdebugf(log_file, "** end\n");
    }
#endif

    return e;
#endif
}

/* given a DER certificate and a path, covert it to PEM and save it to the path.
   the filename used is a hash of the certificate's subject name

   on entry:

   r0 = ptr to DER certificate
   r1 = cert. bytes
   r2 = ptr to path, null terminated

   on exit:

   r0 = 0 or -n for error
      	     -1 = DER parsing failed
      	     -2 = couldn't open o/p file
      	     -3 = (WARNING) current time < cert. notBefore field
      	     -4 = (WARNING) current time > cert. notAfter field
      	     -5 = error in cert. notBefore field
      	     -6 = error in cert. notAfter field

*/
 _kernel_oserror *http_converttopem(_kernel_swi_regs *r)
{
#if defined(NO_SECURE) || !VERIFY_MD
    return make_error(err_SSL_NOT_AVAILABLE);
    r = r;
#else
  char hashname[12];
  char outfile[256];
  unsigned char *certificate_ptr;
  unsigned char **certificate_ptr_ptr;
  X509 *xcert = NULL;
  FILE *fout;
  int i;

  certificate_ptr = (unsigned char *)r->r[0];
  certificate_ptr_ptr = &certificate_ptr;

  strncpy(outfile, (char *)r->r[2], 240);

  if((xcert = d2i_X509(NULL, certificate_ptr_ptr, (long)r->r[1]))==NULL) {
      fdebugf(log_file, "http_converttopem: DER parsing failed\n");
      r->r[0] = -1;
      return(NULL);
  }

  sprintf(hashname, "%08lx", X509_subject_name_hash(xcert));
  strcat(outfile, hashname);

  if((fout=fopen(outfile, "w"))==NULL) {
      fdebugf(log_file, "http_converttopem: couldn't open file\n");
      r->r[0] = -2;
      return(NULL);
  }

  PEM_write_X509(fout, xcert);

  r->r[0] = 0;

  i = X509_cmp_current_time(xcert->cert_info->validity->notBefore);
  if(i==0) {
      fdebugf(log_file, "error in notBefore field of cert\n");
      r->r[0] = -5;
  }

  if(i>0) {
      fdebugf(log_file, "certificate not yet valid\n");
      r->r[0] = -3;
  }

  i = X509_cmp_current_time(xcert->cert_info->validity->notAfter);
  if(i==0) {
      fdebugf(log_file, "error in notAfter field of cert\n");
      r->r[0] = -6;
  }

  if(i<0) {
      fdebugf(log_file, "certificate has expired\n");
      r->r[0] = -4;
  }

  if(xcert) X509_free(xcert);
  fclose(fout);
  return(NULL);
#endif
}
