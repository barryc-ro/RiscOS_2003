/* > predirect.c
 *
 * Routines to handle automatically redirecting SSL requests to a different proxy
 * than the one contwined in the request. Designed for use with old NCFresco/Fresco
 * that only supported configuration of one browser.
 *
 */

#include <errno.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <ctype.h>
#include <stdarg.h>

#if 0
#ifndef NO_SECURE

#define HEADER_DES_LOCL_H	/* prevents crypt() warning */
#include "objects.h"		/* for NID */
#include "pem.h"		/* for PEM_ */
#include "rsa.h"
#include "ssl.h"
#include "x509.h"
#endif

#include "kernel.h"
#include "swis.h"
#include "tcplibs.h"

#include "status.h"

#include "httppub.h"
#include "http.h"
#include "files.h"
#include "mimemap.h"
#endif

#include "http.h"

#if PROXY_REDIRECT && !defined(NO_SECURE)

/*
 * Note modifies location!
 */

static void get_address(char *location, struct sockaddr_in *sa)
{
    char *p;
    struct hostent *hp;

    sa->sin_family = AF_INET;
    
    if ( (p=strchr(location, ':')) != 0)
    {
	char *portstr;
	int i;

	portstr = p+1;

	if ( (i=atoi(portstr)) != 0)
	    sa->sin_port = htons((short)i);
	    
	*p = 0;
    }

    hp = gethostbyname(location);
    if (hp)
	memcpy(&sa->sin_addr, hp->h_addr, hp->h_length);
    
    fdebugf( log_file, "get address: '%s' host=0x%08lx, port=0x%04x (%d)\n",
	     location,
	     sa->sin_addr.s_addr,
	     sa->sin_port, htons(sa->sin_port));
}

static _kernel_oserror *get_address_var(const char *var, struct sockaddr_in *sa)
{
    char *location = getenv(var);

    memset(sa, 0, sizeof(*sa));

    if (location == NULL || location[0] == 0)
    {
	fdebugf (log_file, "get_address: '%s' not set\n", var);
	return NULL;
    }

    if ((location = strdup(location)) == NULL)
        return make_error(err_NO_MEMORY);

    get_address(location, sa);
    
    mm_free(location);
  
    return NULL;
}

static _kernel_oserror *check_proxy_redirect(struct sockaddr_in *sa, int *pflags, char **object)
{
    struct sockaddr_in proxy, proxy_s;
    _kernel_oserror *e;

    if ((*pflags & http_open_flags_SECURE) == 0)
	return NULL;

    if ((e = get_address_var("HTTP$Proxy", &proxy)) != NULL)
	return e;

    /* If proxy not equal to the host then ignore
     * This covers the situations where
       1) the proxy var is not set
       2) a different proxy is being used
       3) no proxy is being used
     */
    if (proxy.sin_addr.s_addr != sa->sin_addr.s_addr || proxy.sin_port != sa->sin_port)
    {
	fdebugf( log_file, "check_proxy_redirect: proxy doesn't match\n" );
	return NULL;
    }

    if ((e = get_address_var("HTTPS$Proxy", &proxy_s)) != NULL)
	return e;

    /* If SSL proxy not set then try and parse request string to bypass proxy altogether */
    if (proxy_s.sin_addr.s_addr == 0 || proxy_s.sin_port == 0)
    {
	char *s, *path, *host;

	fdebugf( log_file, "check_proxy_redirect: SSL proxy not specified - go direct\n" );

	/* URL is https://host[:port]/path
	 * We have already weeded out http: so it is safe to assume the above format
	 * resolves the host and port and put in proxy_s, and put the new path back in object
	 */

	/* set host pointer. If not found then use original request */
	s = strstr(*object, "//");
	if (s == NULL)
	    return NULL;
	host = s + 2;

	/* find start of path and allocate new path string, cope with
           unterminated case for safety */
	s = strchr(host, '/');
	if (s)
	{
	    path = strdup(s);
	    *s = 0;
	}
	else
	{
	    path = strdup("/");
	}

	/* init the proxy to HTTPS port */
	memset(&proxy_s, 0, sizeof(proxy_s));
	proxy_s.sin_port = htons((short)HTTPS_PORT);

	/* resolve the host name (still in *object) */
	get_address(host, &proxy_s);
	if (proxy_s.sin_addr.s_addr == 0)
	{
	    fdebugf( log_file, "check_proxy_redirect: can't resolve host '%s'\n", host );
	    return make_error(err_NO_SUCH_HOST);
	}

	/* replace the object ptr */
	mm_free(*object);
	*object = path;
	
	/* not proxying to ensure tunnel flag disabled */
	*pflags &= ~http_open_flags_TUNNEL;

	fdebugf( log_file, "check_proxy_redirect: going direct to host '%s' path '%s'\n", host, path );
    }
    else
    {
	*pflags |= http_open_flags_TUNNEL;
    }

    /* Otherwise override the proxy information and set tunnelling */
    *sa = proxy_s;

    fdebugf( log_file, "check_proxy_redirect: to host=0x%08lx, port=0x%04x (%d)\n",
	     sa->sin_addr.s_addr,
	     sa->sin_port, htons(sa->sin_port));

    return NULL;
}
#endif

/* eof predirect.c */
