/* -*-c-*- */

#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "kernel.h"

#include "mimemap.h"

#if !USE_MIMEMAPMOD

#ifndef OS_FSControl
#define OS_FSControl 0x29
#endif

extern int strcasecmp(char *s1, char *s2);

#define MAPPING_FILE "<Inet$MimeMappings>"

#define MAX_LINE	256
#define MAX_RESULT	128

typedef struct {
    char *major;
    char *minor;
    int type;
} mmstr;

static FILE *fh;
static mmstr mapping;
static char _mm_buffer[MAX_LINE];
static char _mm_result[MAX_RESULT];

/* Return 0 for failure */
static int _mm_start(void)
{
    if (fh == NULL)
	fh = fopen(MAPPING_FILE, "r");
    else
	rewind(fh);

    return fh ? 1 : 0;
}

static void _mm_end(void)
{
    if (fh)
	fclose(fh);
    fh = NULL;
}

static mmstr *_mm_get(void)
{
    char *p, *roft, *rofthex;
    _kernel_swi_regs r;
    _kernel_oserror *ep;

 again:
    do {
	if (fgets(_mm_buffer, MAX_LINE, fh) == NULL)
	    return NULL;
	p = _mm_buffer;
	while (isspace(*p))
	    p++;
    } while (*p == '#');

    mapping.major = strtok(p, "/");
    mapping.minor = strtok(NULL, " \t");
    roft = strtok(NULL, " \t\n");
    rofthex = strtok(NULL, " \t\n");

    if (mapping.major == NULL || mapping.minor == NULL || roft == NULL)
	goto again;

    if (roft[0] == '*')
    {
	mapping.type = -1;
    }
    else
    {
	r.r[0] = 31;		/* Map file type name */
	r.r[1] = (int) roft;
	
	ep = _kernel_swi(OS_FSControl, &r, &r);
	
	if (ep && rofthex)
	{
	    r.r[0] = 31;		/* Map file type name */
	    r.r[1] = (int) rofthex;
	    
	    ep = _kernel_swi(OS_FSControl, &r, &r);	
	}
	
	if (ep)
	    goto again;
	
	mapping.type = r.r[2];
    }

    return &mapping;
}

int mime_map_to_riscos(char *ct)
{
    char *p, *param;
    mmstr *mm;
    
    p = strchr(ct, '/');
    if (p == NULL)
	return -1;

    *p++ = 0;
    
    param = strchr(p, ';');	/* SJM: strip off params before comparing so that language codes don't confuse */
    if (param)
	*param = 0;
    
    if (_mm_start() == 0)
	return -1;

    while ((mm = _mm_get()) != NULL)
    {
	if (mm->type == -1)
	    continue;

	if ((mm->major[0] == '*' || strcasecmp(ct, mm->major) == 0) &&
	    (mm->minor[0] == '*' || strcasecmp(p,  mm->minor) == 0) )
	    break;
    }

    _mm_end();

    p[-1] = '/';
    if (param)
	*param = ';';

    return mm ? mm->type : -1;
}

char *mime_map_from_riscos(int ft)
{
    mmstr *mm;

    if (_mm_start() == 0)
	return NULL;

    while ((mm = _mm_get()) != NULL)
    {
	if (mm->major[0] == '*' || mm->minor[0] == '*')
	    continue;

	if (ft == mm->type || mm->type == -1)
	    break;
    }

    _mm_end();

    if (mm == NULL)
	return NULL;

    sprintf(_mm_result, "%s/%s", mm->major, mm->minor);

    return _mm_result;
}

#endif

/* eof mimemap.c */
