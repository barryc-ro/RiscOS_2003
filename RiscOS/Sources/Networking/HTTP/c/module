/* -*-c-*- */

/* module.c */

/* RiscOS interface to the HTTP module
 * (C) ANT Limited 1996-7 -- All Rights Reserved -- Confidential
 *
 * History:
 *      pdh 08-Aug-97 Separate out riscos-specific stuff from http.c
 *	pdh 02-Dec-97 Four months later, actually try and compile it!
 *	pdh 17-Feb-98 Two months later still, succeed...
 */

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <time.h>

#include "http.h"


/* How to return from a handler */
#define VIA_R14		1
#define VIA_STACK     	0

/* Event number for the internet event */
#define Event_Internet	19  /* NINETEEN, do you hear?? not SIXTEEN!! */


static os_error *setup_ticker_and_event(void);
static void clear_ticker_and_event(void);
static void setup_callback(void);
static void clear_callback(void);

#if FLAVOUR_PKCS11

/*
 * riscos event numbers used for async notification
 */
#define Event_Expansion		    (21)      /* r0 on receipt of an event */
#define Event_Expansion_SCInterface (0)	      /* r1 on receipt of an event */
#define Event_Expansion_SCTransport (1)	      /* r1 on receipt of an event */

/*
 * event reason codes passed in r2 on receipt of a SCInterface event.
 */
#define Event_CardOK      (0) /* card inserted and understood */
#define Event_CardBad     (1) /* card inserted and not understood */
#define Event_CardRemoved (2) /* card has been removed */
#define Event_Complete    (3) /* previous command completed */

/*
 * event reason codes passed in r3 on receipt of a SCTransport event.
 */
#define SCI_REMOVED	1	/* card removed */
#define SCI_INSERTED	2	/* card inserted */
#define SCI_TRANS_END	3	/* card no longer locked */
#define SCI_CMD_DONE	4	/* response, and any data waiting to be read */
#define SCI_ERROR	5	/* unrecoverable error condition detected */

static void scinterface_event( int reason );
#if DEBUG
static void sctransport_event( int reason );
#endif
#endif

/* From http.c */
extern int stricmp(const char *s1, const char *s2);

#ifdef REMOTE_DEBUG
# include "debug/remote.h"
static debug_session *db=NULL;
#endif

        /*=================================*
         *   Interface to modules system   *
         *=================================*/

/*
 * pick up on the CSFS starting service call and register ourselves
 */
#if defined(CSFS )
void module_service(int service_number, _kernel_swi_regs *r, void *pw)
{
    switch (service_number)
    {
#ifdef CSFS
    case 0xBE:
	csfs_service();
	break;
#endif
    }
}
#endif


/**********************************************************************/
/*
 * Module finalisation function
 */
#ifndef ACORN_BUILD
static
#endif
void module_final(void)
{
    http_connection *c, *next_one;

    fdebugf(log_file, "Module finalisation called\n");

    clear_ticker_and_event();

    clear_callback();

    for (c = http_cons_list; c != NULL; c = next_one)
    {
        next_one = c->next;
        fdebugf(log_file, "%p: being closed by finalisation\n", c );
        http_close_handle(c, http_close_DELETE_FILE | http_close_FATAL );
    }

#ifdef CSFS
    csfs_finalise();
#endif

#ifndef NO_SECURE
    client_cert_finalise();

    if ( ssl_context )
        SSL_CTX_free( ssl_context );
#endif

#ifdef REMOTE_DEBUG
    debug_printf(db,"(5) finalisation");
    remote_debug_close(db);
#endif
}

#if DEBUG
void fprintf_and_flush(FILE *file, const char *format, ...)
{
    va_list list;
    va_start (list, format);

#ifdef REMOTE_DEBUG
    if (db != NULL)
    {
	debug_vprintf(db, format, list);
    }
    else
#endif
    if (file != NULL)
    {
	vfprintf(file,format, list);
	fflush(file);
    }
    va_end(list);
}

static void dump(FILE *out, char *data, int size)
{
    char buf[3*16 + 1], *bp;
    int i;

    bp = buf;
    *bp = 0;
    for (i = 0; i < size; i++)
    {
	bp += sprintf(bp, "%02x ", data[i]);
	if ((i & 15) == 15)
	{
	    fdebugf(out, "%s\n", buf);
	    bp = buf;
	    *bp = 0;
	}
    }

    if ((i & 15) != 0)
	fdebugf(out, "%s\n", buf);
}
#endif

#if DEBUG && !defined(NO_SECURE)
static long bio_dump_cb(BIO *bio, int cmd, char *argp, int argi, long argl, long ret)
{
    FILE *out = log_file;
    if (cmd == (BIO_CB_READ|BIO_CB_RETURN))
    {
	fdebugf(out,"read from %08X [%08lX] (%d bytes => %ld (0x%lX))\n",
		bio,argp,argi,ret,ret);
	if (ret > 0)
	    dump(out,argp,(int)ret);
	return(ret);
    }
    else if (cmd == (BIO_CB_WRITE|BIO_CB_RETURN))
    {
	fdebugf(out,"write to %08X [%08lX] (%d bytes => %ld (0x%lX))\n",
		bio,argp,argi,ret,ret);
	if (ret > 0)
	    dump(out,argp,(int)ret);
	return(ret);
    }
    else if (cmd == (BIO_CB_CTRL|BIO_CB_RETURN))
	return ret;
    return ret == 0 ? 1 : ret;
}

void bio_debug_open(SSL *s)
{
    fdebugf(log_file, "wbio %p rbio %p\n", SSL_get_wbio(s), SSL_get_rbio(s));
    BIO_set_callback((BIO *)SSL_get_wbio(s), bio_dump_cb);
    BIO_set_callback((BIO *)SSL_get_rbio(s), bio_dump_cb);
}
#endif

#if DEBUG && !defined(NO_SECURE)
static void dump_ciphers(void)
{
    SSL *ssl = SSL_new(ssl_context);
    if ( !ssl )
	fdebugf( log_file, "can't sslnew\n" );
    else
    {
	STACK *sk = SSL_get_ciphers(ssl);
	int i;
	char buf[256];

	fdebugf( log_file, "Cipher list ...\n" );
	for ( i=0; i<sk_num(sk); i++ )
	    fdebugf(log_file, "%s",
		    SSL_CIPHER_description( (SSL_CIPHER*)sk_value(sk,i),
					    buf, 256 ) );
	fdebugf( log_file, "... cipher list ENDS\n" );
	SSL_free(ssl);
    }
}

void dump_ssl_error(void)
{
    unsigned long l;
    char buf[200];
    char *file;
    int line;
    
    fdebugf(log_file, "** crypto error log\n");

    while ((l=ERR_get_error_line(&file,&line)) != 0)
	fdebugf(log_file, "%s:%s:%d\n", ERR_error_string(l, buf),
		file, line);

    fdebugf(log_file, "** end\n");
}
#endif

extern int __module_header;

/**********************************************************************/
/*
 * Module initialisation function
 */
extern os_error *module_initialise(char *cmd_tail, int pbase, void *pw)
{
    os_error *ep;

    private_word = pw;

    if (cmd_tail)
    {
        log_file = fopen(cmd_tail, "w");
        if (log_file == NULL)
            log_file = stderr;
    }
    else
    {
        log_file = stderr;
    }
#ifdef REMOTE_DEBUG
    remote_debug_open("HTTP",&db);
#endif
    fdebugf(log_file, "Module initialisation called (%p)\n", &__module_header);

#if DEBUG && !defined(NO_SECURE)
    ERR_load_crypto_strings();
    fdebugf(log_file, "ERR_load_crypto_strings OK\n");
#endif

    /*http_bzero(http_cons, sizeof(http_cons));*/
    http_cons_list = NULL;

    callback_pending = 0;
    sockets_connecting = 0;
    keptalive = 0;
    totalsockets = 0;
    maxsockets = MAXSOCKETS;
    connresets = 0;
    keepalivelies = 0;

#ifdef ACORN_BUILD
    inet_version = socketversion();
    if (inet_version < 0)
	inet_version = 407;
#endif
    
#ifndef NO_SECURE
    ssl_present = TRUE;

#if !defined(SSLEAY8) || !defined(ACORN_BUILD)
    /* ANT ssl3 build requires this, Acorn doesn't */
    riscos_ZM_Initialise();
#endif
#ifndef SSLEAY8
    /* this appears to be unnecessary in ssl3 */
    riscos_SSLLib_Init();
#endif

    {
#ifdef SSLEAY8
    	SSLeay_add_ssl_algorithms();

        ssl_context = SSL_CTX_new( SSLv23_client_method() );
#else
        ssl_context = SSL_CTX_new();
#endif
	fdebugf(log_file, "SSL_CTX_new OK (result %p)\n", ssl_context);

        SSL_load_error_strings();

	fdebugf(log_file, "SSL_load_error_strings OK\n");

	if ( ssl_context )
        {
/*          X509_add_cert_dir( ssl_context->cert, "SSL:certs",
                               X509_FILETYPE_PEM );
            SSL_load_verify_locations( ssl_context, NULL, "SSL:certs" );*/

            char *list;

#ifdef SSLEAY8
            /* Enable all bug workarounds, disable TLS */
            SSL_CTX_set_options( ssl_context, HTTP_SSLEAY_OPTIONS );
            SSL_CTX_set_default_verify_paths( ssl_context );
#else
            SSL_set_default_verify_paths( ssl_context );
#endif
	    list = getenv( "SSL$CipherList" );
            if ( list )
                SSL_CTX_set_cipher_list( ssl_context, list );
	    fdebugf(log_file, "SSL_CTX_set_cipher_list OK\n");
#if DEBUG
	    dump_ciphers();

	    fdebugf( log_file, "SSL_CTX_get_session_cache_mode: 0x%x\n", SSL_CTX_get_session_cache_mode( ssl_context ) );
	    fdebugf( log_file, "SSL_CTX_sess_get_cache_size:      %d\n", SSL_CTX_sess_get_cache_size( ssl_context ) );
	    fdebugf( log_file, "SSL_CTX_get_timeout:              %d\n", SSL_CTX_get_timeout( ssl_context ) );
#endif

	    SSL_CTX_set_session_cache_mode( ssl_context, SSL_SESS_CACHE_CLIENT );
	}
        else
        {
#if DEBUG
    	    fdebugf(log_file, "** ssl_context returned null\n");
	    dump_ssl_error();
#endif
            ssl_present = FALSE;
        }
    }

    client_cert_initialise( ssl_context );

# if SSL_VERSION == 2
    _kernel_setenv(SSL_VERSION_VAR, ssl_present ? "2" : "0");
# else  
    _kernel_setenv(SSL_VERSION_VAR, ssl_present ? "3" : "0");
# endif
#else
    _kernel_setenv(SSL_VERSION_VAR, "0");
#endif

    ep = setup_ticker_and_event();
    if (ep)
        goto err;

#ifdef CSFS
    csfs_initialise();
#endif

#ifdef ACORN_BUILD
    /* if mimemap mod is not around then disable its use */
    if (_swix(OS_SWINumberFromString, _IN(1), "MimeMap_Translate") == NULL)
#endif
	allow |= http_config_USE_MIMEMAPMOD;
    
#ifndef ACORN_BUILD
    /* Using CMHG 5.16 we don't need this */
    atexit(&module_final);
#endif

    return 0;

 err:
    return ep;

    NOT_USED(cmd_tail);
    NOT_USED(pbase);
}

/**********************************************************************/
/*
 * Module CLI handler function
 */
extern os_error *module_cli_handler(char *arg_string, int arg_count, unsigned int cmd_no, void *pw)
{
    http_connection *c;
    http_queue *q;

    fdebugf(log_file, "CLI handler called, command number %d args %d\n", cmd_no, arg_count);

    switch(cmd_no)
    {
    case 0:
        printf("HTTP support module status information\n");

        if (http_cons_list)
        {
            for (c = http_cons_list; c != NULL; c = c->next)
#if !DEBUG
            if ( c->socket != -1 )
#endif
            {
                unsigned long ip = c->sa.sin_addr.s_addr;
                unsigned int port = c->sa.sin_port;

                printf( "Connection at %p for http://%ld.%ld.%ld.%ld:%d%s\n",
                        c,
                        ip&0xFF, (ip>>8)&0xFF, (ip>>16)&0xFF, (ip>>24),
                        htons(port),
                        c->object );
                printf( "    socket=%d status=%d rc=%d\n", c->socket, c->status,
                        c->rc );
                printf( "    data=%d/%d, message=%s\n", c->data_so_far,
                        c->data_size, c->message ? c->message : "<none>" );
                printf( "    queue=%p, queueprev=%p, queuenext=%p\n", c->queue,
                        c->queueprev, c->queuenext );
            }

            if ( http_queues_list )
            {
                q = http_queues_list;
                while ( q )
                {
                    unsigned long ip = q->sa.sin_addr.s_addr;
                    unsigned int port = q->sa.sin_port;

                    printf( "Queue at %p for http://%ld.%ld.%ld.%ld:%d\n", q,
                            ip&0xFF, (ip>>8)&0xFF, (ip>>16)&0xFF, (ip>>24),
                            htons(port) );
                    c = q->queue;

                    if ( c )
                    {
                        while ( c )
                        {
                            printf( "    Waiting: %p %s\n", c, c->object );
                            c = c->queuenext;
                        }
                    }
                    else
                        printf( "    Empty\n" );

                    q = q->next;
                }
            }
        }
        else
        {
            printf("No current connections\n");
        }

        if ( keptalive )
                printf( "Uses of keep-alive: %d\n", keptalive );
	if ( connresets )
                printf( "Connections reset : %d\n", connresets );
	if ( keepalivelies )
                printf( "Keep alives killed: %d\n", keepalivelies );
        break;

    case 1:
	if (arg_count == 0)
	{
	    printf("HTTP support module config information\n");
	    printf("  %skeepalive %sranges %sserverpush %smimemapmod %sonecertprompt\n",
		   allow & http_config_ALLOW_KEEPALIVE ? "" : "no",
		   allow & http_config_ALLOW_RANGES ? "" : "no",
		   allow & http_config_ALLOW_SERVERPUSH ? "" : "no",
		   allow & http_config_USE_MIMEMAPMOD ? "" : "no",
		   allow & http_config_ONE_CERT_PROMPT ? "" : "no");
	    printf("  maxsockets %d\n", maxsockets);
#if FLAVOUR_PKCS11
	    printf("  PKCS#11 support\n");
#endif
	}
	else
	{
	    char *s;
	    int len = strcspn(arg_string, "\r\n");
	    char *ss = mm_malloc(len+1);
	    memcpy(ss, arg_string, len);
	    ss[len] = 0;

	    if ((s = strtok(ss, " ")) != NULL)
	    {
		BOOL next_is_maxsockets = FALSE;
		do
		{
		    if (next_is_maxsockets && isdigit(s[0]))
		    {
			maxsockets = atoi(s);
			next_is_maxsockets = FALSE;
		    }
		    else if (stricmp(s, "maxsockets") == 0)
		    {
			next_is_maxsockets = TRUE;
		    }
		    else
		    {
			BOOL disable = FALSE;
			int flag = 0;
			
			if (strlen(s) >= 2 && toupper(s[0]) == 'N' && toupper(s[1]) == 'O')
			{
			    disable = TRUE;
			    s += 2;
			}

			if (stricmp(s, "keepalive") == 0)
			    flag = http_config_ALLOW_KEEPALIVE;
			else if (stricmp(s, "ranges") == 0)
			    flag = http_config_ALLOW_RANGES;
			else if (stricmp(s, "serverpush") == 0)
			    flag = http_config_ALLOW_SERVERPUSH;
			else if (stricmp(s, "mimemapmod") == 0)
			    flag = http_config_USE_MIMEMAPMOD;
			else if (stricmp(s, "onecertprompt") == 0)
			    flag = http_config_ONE_CERT_PROMPT;

			if (flag)
			    allow = disable ? (allow &~ flag) : (allow | flag);

			fdebugf(log_file, "SetFlags: disable %d flag %x allow %x s '%s'\n", disable, flag, allow, s);
		    }
		}
		while ((s = strtok(NULL, " ")) != NULL);
	    }
	    mm_free(ss);
	}
	break;

#if FLAVOUR_PKCS11
    case 2:
	client_cli_read_certificates();
	break;
#endif
    }

    return 0;

    NOT_USED(arg_string);
    NOT_USED(arg_count);
    NOT_USED(pw);
}

/**********************************************************************/
/*
 * Module SWI handler function
 */
extern os_error *module_swi_handler(int swinum, _kernel_swi_regs *regs, void *pw)
{
#if 0
    fdebugf(log_file, "SWI handler called, SWI number 0x%02x\n", swinum);
#endif

    switch(swinum)
    {
    case 0:
        /* Open */
        return http_open((http_open_args *) regs);
        break;
    case 1:
        /* Status */
        return http_status((http_status_args *) regs);
        break;
    case 2:
        /* Close */
        return http_close((http_close_args *) regs);
        break;
    case 3:
        /* Map to RISC OS */
        return http_maptoriscos((http_maptoriscos_args *) regs);
        break;
    case 4:
        /* Map from RISC OS */
        return http_mapfromriscos((http_mapfromriscos_args *) regs);
        break;
    case 5:
        /* SetFileType */
        return http_setfiletype((http_setfiletype_args *) regs);
        break;
    case 6:
        /* CompletedPart */
        return http_completedpart((http_completedpart_args *) regs);
        break;
#if VERIFY_MD
    case HTTP_VerifyMessageDigest - HTTP_SWI_Base:
        return http_verifymessagedigest((http_verifymessagedigest_args *) regs);
        break;
#endif
#ifdef CSFS
    case HTTP_CSFSService - HTTP_SWI_Base:
        /* CSFS Service */
        return http_csfs_service(regs,FALSE);
#ifndef NO_SECURE
    case HTTP_CSFSServiceSecure - HTTP_SWI_Base:
        /* CSFS Service */
        return http_csfs_service(regs,TRUE);
#endif
#endif
#if VERIFY_MD
    case HTTP_ConvertToPEM - HTTP_SWI_Base:
    	return http_converttopem(regs);
#endif
    case HTTP_Config - HTTP_SWI_Base:
	return http_config((http_config_args *)regs);
#if FLAVOUR_PKCS11
    case HTTP_CertOp - HTTP_SWI_Base:
	return http_certop((http_certop_args *)regs);
#endif
    }

    return NULL;

    NOT_USED(pw);
}


        /*================================*
         *   Interface to events system   *
         *================================*/


/**********************************************************************/
/*
 * A function to handle the internet events.
 */
extern int inetevent_handler(_kernel_swi_regs *regs, void *pw)
{
#if FLAVOUR_PKCS11
    if (regs->r[0] == Event_Expansion)
    {
	if (regs->r[1] == Event_Expansion_SCInterface)
	{
	    scinterface_event(regs->r[2]);
	}
#if DEBUG
	else if (regs->r[1] == Event_Expansion_SCTransport)
	{
	    sctransport_event(regs->r[3]);
	}
#endif	
	return VIA_R14;
    }
#endif

    if ((regs->r[0] == Event_Internet) && (regs->r[1] == 1 || regs->r[1] == 2))	/* data waiting or urgent event, note PRM5a-341 is correct, PRM1 was wrong */
    {
	/* enable irqs to keep latency down - shoule be safe? */
	_kernel_irqs_on();
	
	if ( regs->r[2] >= 0 && regs->r[2] < FD_SETSIZE )
        {
            /* take some action */
            http_connection *c = http_connection_for_socket( regs->r[2] );
            if ( c )
            {
#if ALLOW_DIRECT_CALL_FROM_INETEVENT
		if (inet_version >= 500 && threaded == 0 && callback_pending == 0)
		{
		    http_prosecute( c );
		    threaded = 0;
		}
		else
#endif
		{
		    c->data_pending = 1;
		    setup_callback();
		}
            }
        }
    }

    return VIA_R14;

    NOT_USED(pw);
}

int timer_handler( _kernel_swi_regs *r, void *pw )
{
    if ( http_cons_list != NULL )
        setup_callback();

    return VIA_R14;
}

/**********************************************************************/
/*
 * A function to handle the callbacks caused by internet events.
 */

extern int stack_pointer(void);

static BOOL net_ok(const char *fname)
{
    _kernel_swi_regs ksr;

    /* Try and read boot option of disc... if this fails the network
     * filing system may be complaining about already being threaded
     */

    ksr.r[0] = 47;
    ksr.r[1] = (int)fname;
    return _kernel_swi( 0x20029, &ksr, &ksr ) == NULL;
}

extern int callback_handler(_kernel_swi_regs *regs, void *pw)
{
    http_connection *c;
    BOOL net, checked_net = FALSE;

#if 0
    fdebugf(log_file, "Callback handler entered\n");
#endif

    if ( threaded )
    {
        fdebugf( log_file, "**** Considerable disaster\n" );
        return VIA_R14;
    }

    /* pdh 24-Mar-98:
     *
     * CONSIDERABLE FILTH here...
     *
     * ShareFS enables callbacks inside its filing system
     * entries, in order to pump network data. If we get called
     * at that point, then when we come to write the data to our
     * cache file, ShareFS will complain about being threaded
     * twice. The only thing we can do is check whether ShareFS
     * is already threaded, and the only way of doing that is
     * detecting how full the supervisor stack is. The supervisor
     * stack is an 8K (rumoured to be 32K in RPC2/Ursula) block
     * whose *bottom* edge (duh) is on a Mb boundary. We check to
     * see if we've used less than 512 bytes of it already.

    if ( ( stack_pointer() & 0x1E00 ) != 0x1E00 )
        return VIA_R14;

    if ( http_cons_list
         && http_cons_list->fname
         && !can_read_boot_option(http_cons_list->fname) )
    {
        callback_pending = 0;
        return VIA_R14;
    }
     */

    threaded = 1;

    c = http_cons_list;

    while ( c )
    {
        if ( c->queueprev == NULL
             && ( c->status <= status_WAITING || c->data_pending ) ) /* SJM: 30Sep98: changed from just < WAITING for client autho support */
        {
            if ( (c->flags & http_flags_NETWORKFILE) == 0
                 || (checked_net && net)
                 || (checked_net = TRUE, net = net_ok(c->fname) ) != 0 )
            {
                c->data_pending = 0;    /* do this FIRST */
                http_prosecute( c );
            }
        }
        c = c->next;
    }

    threaded = 0;

    callback_pending = 0;

    return VIA_R14;

    NOT_USED(pw);
}


/* Entry points laid down by CMHG */
int inetevent_entry(int);
int timer_entry(int);
int callback_entry(int);

static os_error *setup_ticker_and_event(void)
{
    _kernel_swi_regs r;
    os_error *ep;

    r.r[0] = 0x10;
    r.r[1] = (int) &inetevent_entry;
    r.r[2] = (int) private_word;

    ep = _kernel_swi(XOS_Bit + OS_Claim, &r, &r);

    if (ep)
        return ep;

    _kernel_osbyte(14, Event_Internet, 0);
#if FLAVOUR_PKCS11
    _kernel_osbyte(14, Event_Expansion, 0);
#endif
    
    r.r[0] = TICKER_RATE;
    r.r[1] = (int) timer_entry;
    r.r[2] = (int) private_word;

    ep = _kernel_swi(OS_CallEvery, &r, &r);

    if (ep)
    {
        clear_ticker_and_event();
        return ep;
    }

    return NULL;
}

static void clear_ticker_and_event(void)
{
    _kernel_swi_regs r;

    _kernel_osbyte(13, Event_Internet, 0);
#if FLAVOUR_PKCS11
    _kernel_osbyte(13, Event_Expansion, 0);
#endif

    r.r[0] = 0x10;
    r.r[1] = (int) inetevent_entry;
    r.r[2] = (int) private_word;

    _kernel_swi(OS_Release, &r, &r);

    r.r[0] = (int) timer_entry;
    r.r[1] = (int) private_word;

    _kernel_swi(OS_RemoveTickerEvent, &r, &r);
}

static void setup_callback(void)
{
    if (callback_pending == 0 && threaded == 0)
    {
        _kernel_swi_regs r;

        r.r[0] = (int) &callback_entry;
        r.r[1] = (int) private_word;
        callback_pending = 1;

        _kernel_swi(OS_AddCallBack, &r, &r);
    }
}

static void clear_callback(void)
{
    if (callback_pending)
    {
        _kernel_swi_regs r;

        r.r[0] = (int) &callback_entry;
        r.r[1] = (int) private_word;
        callback_pending = 0;

        _kernel_swi(OS_RemoveCallBack, &r, &r);
    }
}

#if FLAVOUR_PKCS11
static void smartcard_insertion( BOOL inserted )
{
    http_connection *c;
    
    /* call once for each connection */
    for (c = http_cons_list; c != NULL; c = c->next)
    {
	client_smartcard_insertion( c, inserted );
    }

    /* call once globally */
    client_smartcard_insertion( NULL, inserted );

    /* flush all ssl sessions when the smartcard is removed */
    SSL_CTX_flush_sessions( ssl_context, 0 );
}

static void scinterface_event( int reason )
{
    fdebugf( log_file, "scinterface_event: %d\n", reason );

    switch (reason)
    {
    case Event_CardOK:		/* card inserted and understood */
    case Event_CardBad:		/* card inserted and not understood */
	smartcard_insertion( TRUE );
	break;

    case Event_CardRemoved:	/* card has been removed */
	smartcard_insertion( FALSE );
	break;
    }
}

#if DEBUG
/* Currently no INSERTED events are generated and so this is of no
   use. Keep for future testing. */
static void sctransport_event( int reason )
{
    fdebugf( log_file, "sctransport_event: %d\n", reason );

    switch (reason)
    {
    case SCI_REMOVED:		/* card inserted and understood */
	break;

    case SCI_INSERTED:		/* card inserted and not understood */
	break;
    }
}
#endif

#endif

/* ------------------------------------------------------------------------- */

/* eof module.c */
