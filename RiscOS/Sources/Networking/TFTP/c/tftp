#include <sys/types.h>
#include <sys/param.h>
#include <sys/errno.h>
#include <sys/socket.h>
#include <sys/ioctl.h>

#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/ip_icmp.h>
#include <netinet/udp.h>

#include <arpa/inet.h>
#include <arpa/tftp.h>

#include <bitstring.h>
#include <netdb.h>

#include <socklib.h>
#include <inetlib.h>
#include <unixlib.h>

#include <stdlib.h>
#include <stddef.h>
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <signal.h>
#include <time.h>

#include <swis.h>

#include "tftp.h"


#ifdef TRACE
static void log_datagram(const char *prefix, const struct tftphdr *t, int len)
{
    static const char *const packnames[] = { NULL, "RRQ", "WRQ", "DATA", "ACK", "ERROR", "OACK" };
    int opcode = ntohs(t->th_opcode);
    const char *packname = opcode <= OACK ? packnames[opcode] : NULL;
    char buf[32];
    const char *p;

    if (packname == NULL)
    {
        sprintf(buf, "%d", opcode);
        packname = buf;
    }

    printf("%s [%s] ", prefix, packname);

    switch (opcode)
    {
        case RRQ:
        case WRQ:
        case OACK:
        default:
            p = t->th_stuff;
            len -= offsetof(struct tftphdr, th_stuff);
            while (len--)
            {
                if (*p >= 32)
                    putchar(*p);
                else
                    printf("\\%o", *p);
                p++;
            }
            putchar('\n');
            break;

        case DATA:
            printf("block %d, %d byte%s\n", ntohs(t->th_block), len - offsetof(struct tftphdr, th_data),
                                            len - offsetof(struct tftphdr, th_data) == 1 ? "" : "s");
            break;

        case ACK:
            printf("block %d\n", ntohs(t->th_block));
            break;

        case ERROR:
            printf("code %d: %s\n", ntohs(t->th_code), t->th_msg);
            break;
    }
}
#endif

/* A version of bit_ffc that starts looking at a particular bit.
 * This is purely an optimisation, but we don't want the thing
 * to slow down for bigger block numbers :)
 */
#define	bit_ffc_from(name, nbits, start, value) { \
	register bitstr_t *_name = name; \
	register int _byte, _nbits = nbits; \
	register int _stopbyte = _bit_byte(_nbits), _value = -1; \
	for (_byte = _bit_byte(start); _byte <= _stopbyte; ++_byte) \
		if (_name[_byte] != 0xff) { \
			_value = _byte << 3; \
			for (_stopbyte = _name[_byte]; (_stopbyte&0x1); \
			    ++_value, _stopbyte >>= 1); \
			break; \
		} \
	*(value) = _value; \
}

static unsigned systime()
{
    unsigned s;
    _swix(OS_ReadMonotonicTime, _OUT(0), &s);
    return s;
}

static void send_error(int s, int errnum, const char *errmess,
                       const struct sockaddr_in *to)
{
    char buf[SEGSIZE]; /* I really hope we have 512 bytes of stack... */
    struct tftphdr *t = (struct tftphdr *) buf;
    int n;

    t->th_opcode = htons(ERROR);
    t->th_code = htons(errnum);
    n = sprintf(t->th_msg, "%s", errmess);
    sendto(s, t,
           offsetof(struct tftphdr, th_msg) + n + 1,
           0, (const struct sockaddr *) to, sizeof *to);
    #ifdef TRACE
    log_datagram("->", t, offsetof(struct tftphdr, th_msg) + n + 1);
    #endif

    if (errmess != _inet_error.errmess)
    {
        if (errnum != EUNDEF)
            _inet_error.errnum = errnum + ERRORBASE;
        strcpy(_inet_error.errmess, errmess);
    }
}

static int send_ack(int s, struct tftphdr *buf, int block)
{
    buf->th_opcode = htons(ACK);
    buf->th_block = htons(block);

    sendto(s, buf, sizeof buf->th_opcode + sizeof buf->th_block, 0, NULL, 0);

    #ifdef TRACE
    log_datagram("->", buf, sizeof buf->th_opcode + sizeof buf->th_block);
    #endif

    return sizeof buf->th_opcode + sizeof buf->th_block;
}

static _kernel_oserror *lookup_error(_kernel_oserror *e)
{
    return _swix(MessageTrans_ErrorLookup, _INR(0,3),
                                           e, 0, &_inet_error, sizeof _inet_error);
}

static _kernel_oserror *no_mem_error()
{
    static const struct { int no; char mess[6]; } e = { ERRORBASE + ENOSPACE, "NoMem" };
    return lookup_error((_kernel_oserror *) &e);
}

static _kernel_oserror *escape_error()
{
    static const struct { int no; char mess[7]; } e = { 17, "Escape" };
    return lookup_error((_kernel_oserror *) &e);
}

static bool check_escape()
{
    int flags;
    _swix(OS_ReadEscapeState, _OUT(_FLAGS), &flags);
    if (flags & _C)
    {
        _swix(OS_Byte, _IN(0), 126);
        return true;
    }
    else
        return false;
}

/*
 * Select the socket from a fd_set with the earliest-received datagram waiting.
 * Works by peeking each datagram, and examining the SCM_TIMESTAMP control
 * information - this must have been enabled on each socket with setsockopt.
 * n = the number of sockets in the fd_set, as returned from select().
 * Returns -1 if any errors occur, including any of the timestamps being
 * unavailable.
 */
static int first_socket(int n, fd_set *fds)
{
    int s;
    struct timeval firsttime;
    int firstsocket = -1;

    for (s = 0; n; s++)
    {
        if (FD_ISSET(s, fds))
        {
            struct msghdr msg;
            char control[256];
            struct cmsghdr *cmsg;
            struct timeval *tv;

            /* Found a socket. Decrement n. If no more sockets, and we haven't
             * got a time yet (ie this is the only socket in the set, which
             * will be the common case), bail out before doing the read.
             */
            if (--n == 0 && firstsocket == -1)
                return s;

            msg.msg_name = NULL;
            msg.msg_namelen = 0;
            msg.msg_iov = NULL;
            msg.msg_iovlen = 0;
            msg.msg_control = control;
            msg.msg_controllen = sizeof control;

            if (recvmsg(s, &msg, MSG_PEEK) < 0 || msg.msg_controllen == 0)
                return -1;

            for (cmsg = CMSG_FIRSTHDR(&msg); cmsg; cmsg = CMSG_NXTHDR(&msg, cmsg))
                if (cmsg->cmsg_level == SOL_SOCKET &&
                    cmsg->cmsg_type == SCM_TIMESTAMP)
                    break;

            if (cmsg == NULL)
                return -1;

            tv = (struct timeval *) CMSG_DATA(cmsg);
            #ifdef TRACE_TIMESTAMPS
            trace(("tv=(%ld.%06ld)\n", tv->tv_sec, tv->tv_usec));
            #endif
            if (firstsocket == -1 || timercmp(tv, &firsttime, <))
            {
                firstsocket = s;
                firsttime = *tv;
            }
        }
    }

    return firstsocket;
}

static int new_socket(int proto)
{
    int s;
    int one = 1;
    int tos = IPTOS_LOWDELAY; /* RFC 1700 says low delay for TFTP */

    if ((s = socket(PF_INET, proto == IPPROTO_UDP ? SOCK_DGRAM : SOCK_RAW, proto)) < 0)
        return s;

    /* Yes, we set the TOS of the ICMP socket. Doesn't matter, as we're not
     * sending anything, and checking for it would increase the code size.
     */
    if (socketioctl(s, FIOSLEEPTW, &one) < 0 ||
        setsockopt(s, IPPROTO_IP, IP_TOS, &tos, sizeof tos) < 0)
        goto error;

    setsockopt(s, SOL_SOCKET, SO_TIMESTAMP, &one, sizeof one);

    return s;

  error:
    socketclose(s);
    return -1;
}

/*
 * Contact server, and request "filename". For each new block of data that
 * arrives, recvfunc will be called. If an error occurs, the transfer
 * is aborted, and an error is returned.
 */
_kernel_oserror *tftpreadfile(const char *filename, struct in_addr server,
                              _kernel_oserror *(*recvfunc)(const void *data, u_long offset,
                                                           size_t len, void *handle),
                              void *client_handle)
{
    int unicast_socket = -1;
    int multicast_socket = -1;
    int icmp_socket = -1;
    struct sockaddr_in sin, from;
    int fromlen = sizeof from;
    int n, len;
    int num_blocks = -1;
    int highest_block = -1;
    int blocksize = 512;
    int one = 1;
    int last_acked = 0;
    bool connected = false;
    bool finished = false;
    bool master_client = true;
    bool already_transmitted = false;
    fd_set fds;
    int nfds, s;
    _kernel_oserror *e = &_inet_error, *e2;
    bitstr_t *map = NULL;
    struct tftphdr *in = NULL, *out = NULL;
    struct timeval tv;
    long rexmtval = REQ_RETRANSMIT;
    int lasttime;

#ifdef TRACE_MAP
    _kernel_oswrch(22);
    _kernel_oswrch(27);
#endif

    out = malloc(SEGSIZE);
    in = malloc(offsetof(struct tftphdr, th_data) + SEGSIZE);
    map = bit_alloc(65536);
    if (!out || !in || !map)
    {
        e = no_mem_error();
        goto error;
    }

    if ((unicast_socket = new_socket(IPPROTO_UDP)) < 0)
        goto error;

    if ((icmp_socket = new_socket(IPPROTO_ICMP)) < 0)
        goto error;

    nfds = MAX(unicast_socket, icmp_socket) + 1;

    sin.sin_family = AF_INET;
    sin.sin_len = sizeof sin;
    sin.sin_port = htons(PORT_TFTP);
    sin.sin_addr = server;
    memset(sin.sin_zero, 0, sizeof sin.sin_zero);

    /* Yes, we can connect the ICMP socket. This means we will only
     * get woken up by ICMP messages from the server, not any old
     * bastard pinging us. sin.sin_port is ignored.
     */
    if (connect(icmp_socket, (struct sockaddr *) &sin, sizeof sin) < 0)
        goto error;

    out->th_opcode = htons(RRQ);
    n = sprintf(out->th_stuff, "%s%c"
                               "octet%c"
                               "multicast%c%c"
                               "blksize%c%d%c"
                               "tsize%c0",
                               filename, 0,
                               0,
                               0, 0,
                               0, MAXBLKSIZE, 0,
                               0);

    len = offsetof(struct tftphdr, th_stuff) + n + 1;
    lasttime = systime();

    while (!finished)
    {
        if (master_client && !already_transmitted &&
            sendto(unicast_socket, out, len, 0,
                   connected ? NULL : (const struct sockaddr *) &sin, sizeof sin) < 0)
        {
            goto error;
        }
        #ifdef TRACE
        if (master_client && !already_transmitted)
            log_datagram("->", out, len);
        #endif

        already_transmitted = false;

     reselect:
        FD_ZERO(&fds);
        FD_SET(unicast_socket, &fds);
        FD_SET(icmp_socket, &fds);
        if (multicast_socket >= 0)
        {
            FD_SET(multicast_socket, &fds);
        }

        tv.tv_sec = rexmtval;
        tv.tv_usec = 0;
        if ((n=select(nfds, &fds, NULL, NULL, &tv)) < 0 && errno != EINTR)
        {
            if (connected)
                send_error(unicast_socket, EUNDEF, _inet_err(), NULL);
            goto error;
        }

        if (check_escape())
        {
            e = escape_error();
            if (connected)
                send_error(unicast_socket, EUNDEF, e->errmess, NULL);
            _inet_error.errnum = 17;
            goto error;
        }

        /*
         * Which socket to read from first is a tricky question. In
         * the absence of timestamp information, we prefer ICMP to UDP,
         * because an incoming ICMP message may trigger an error on
         * the UDP socket as well, and we prefer to handle that by
         * reading the ICMP socket manually. We prefer the unicast
         * socket to the multicast, because the multicast socket may
         * be being flooded, and messages addressed to us are liable
         * to contain critical information like ERROR datagrams.
         *
         * If we do have timestamp information, we take the datagrams
         * first come, first served. If an ICMP datagram has triggered
         * a UDP error, first_socket() will return -1 because its
         * attempt to read from the UDP socket will return an error;
         * in that case we will fall back to preferring the ICMP
         * socket.
         *
         * Why isn't the static socket ordering good enough? Well, say
         * we are not the master client, and we've not been keeping up,
         * so we've a full queue on the multicast socket. We then get
         * an OACK making us the master client. If we read the OACK
         * first, then we will end up ACKing each block already in the
         * multicast queue, even though they arrived before we were
         * the master client. This results in a burst of redundant
         * ACKs, and we may end up requesting a block that's already
         * in the queue, resulting in a duplicate server transmission.
         * All essentially harmless, but it increases the network
         * traffic. Best to make the effort to avoid this. Processing
         * datagrams first come, first served is the least error-prone
         * general-purpose solution to problems of this type.
         */
        s = first_socket(n, &fds);
        if (s == -1)
        {
            if (FD_ISSET(icmp_socket, &fds))
                s = icmp_socket;
            else if (FD_ISSET(unicast_socket, &fds))
                s = unicast_socket;
            else if (multicast_socket >= 0 && FD_ISSET(multicast_socket, &fds))
                s = multicast_socket;
        }

        if (s != -1)
        {
            if ((n = recvfrom(s, in, offsetof(struct tftphdr, th_data) + blocksize, 0,
                              (struct sockaddr *) &from, &fromlen)) < 0)
            {
                if (connected)
                    send_error(unicast_socket, EUNDEF, _inet_err(), NULL);
                goto error;
            }
        }
        else
            n = -1;

#if 0
        if (!(rand() % 10))
            n = -1;
#endif

        if (n <= 0)
        {
            /* No data received. Check overall timeout. If still want to
             * continue, double the wait interval and retransmit datagram.
             */
            if (systime() - lasttime > TOTAL_TIMEOUT * 100)
            {
                _inet_error.errnum = ERROR_TIMEDOUT;
                strcpy(_inet_error.errmess, "Timed out");
                if (connected)
                    send_error(unicast_socket, EUNDEF, _inet_error.errmess, NULL);
                goto error;
            }

            rexmtval *= 2;
            if (rexmtval > MAX_RETRANSMIT)
                rexmtval = MAX_RETRANSMIT;
            continue;
        }
        else if (s == icmp_socket)
        {
            /* Pick our way through IP/ICMP/IP/UDP header chain
             * to find out if it is an ICMP Destination Unreachable
             * message generated in response to a UDP datagram sent
             * to our server's port.
             * Internet module will have done basic checking,
             * including ICMP checksum.
             * This is needed to catch ICMP bounces to initial
             * RRQ - Internet module will only deal with them
             * automatically once we're connected.
             */
            struct ip *ip = (struct ip *) in;
            struct icmp *icmp;

            #ifdef ICMP_DEBUG
            {
                int i;
                for (i=0; i < n; i++)
                {
                    printf("%02X%c", ((char*)in)[i], (i & 15)==15?'\n':' ');
                }
            }
            #endif

            icmp = (struct icmp *)((char *) ip + (ip->ip_hl << 2));
            if (icmp->icmp_type == ICMP_UNREACH)
            {
                ip = (struct ip *) icmp->icmp_data;
                if (ip->ip_p == IPPROTO_UDP &&
                    ip->ip_dst.s_addr == sin.sin_addr.s_addr)
                {
                    struct udphdr *udp;
                    udp = (struct udphdr *)((char *) ip + (ip->ip_hl << 2));

                    /* Check length at least once :) Okay to do it late as
                     * we can't actually run off of a buffer - we may just
                     * have read duff values. Check we've got the whole UDP
                     * header bounced back.
                     */
                    if ((char *) udp + sizeof(struct udphdr) - (char *) in <= n)
                    {
                        if (udp->uh_dport == sin.sin_port)
                        {
                            if (icmp->icmp_code == ICMP_UNREACH_PORT)
                            {
                                _inet_error.errnum = 0x20E00 + ECONNREFUSED;
                                strcpy(_inet_error.errmess, "Connection refused");
                            }
                            else
                            {
                                _inet_error.errnum = 0x20E00 + EHOSTUNREACH;
                                sprintf(_inet_error.errmess, "Server unreachable (%d)",
                                                             icmp->icmp_code);
                            }
                            goto error;
                        }
                    }
                }
            }
            /* It wasn't an ICMP message to do with us. Just loop around.
             * This will delay retransmission, but not really
             * something worth worrying about as ICMP messages are very rare,
             * and we've connected the socket so we don't get guff from other
             * hosts.
             */
            goto reselect;
        }

        /* Start of UDP input processing */

        #ifdef TRACE
        log_datagram(s == multicast_socket ? "<=" : "<-", in, n);
        #endif

        if (from.sin_addr.s_addr != sin.sin_addr.s_addr ||
            (connected && from.sin_port != sin.sin_port))
        {
            /* Don't want to send errors if we're just picking up interference
             * from other multicast channels.
             */
            if (s != multicast_socket)
                send_error(unicast_socket, EBADID, "Unknown transfer ID", &from);
            /* Loop around again (see comments above about ICMP) */
            goto reselect;
        }

        /* Note where the server's coming from */
        if (!connected)
        {
            sin.sin_port = from.sin_port;
            if (connect(unicast_socket, (struct sockaddr *) &sin, sizeof sin) < 0)
            {
                send_error(unicast_socket, EUNDEF, _inet_err(), &from);
                goto error;
            }
            connected = true;
        }

        /* We have a response! Reset the retransmit timer. */
        rexmtval = ACK_RETRANSMIT;
        lasttime = systime();

        switch (ntohs(in->th_opcode))
        {
            case OACK:
            {
                /* Parse the returned options. Check they're OK. */
                char *p = in->th_stuff;
                char *eop = in->th_stuff + n - offsetof(struct tftphdr, th_stuff);
                unsigned int tsize = 0;

                while (p < eop)
                {
                    char *val = p + strlen(p) + 1;
                    if (strcasecmp(p, "multicast") == 0)
                    {
                        if (*val != ',' && multicast_socket == -1)
                        {
                            char *comma = val;
                            struct sockaddr_in la, ma;
                            struct ip_mreq mreq;
                            int lalen = sizeof la;

                            /* Extract multicast group */
                            while (*comma != ',') comma++;
                            *comma = '\0';
                            ma.sin_addr.s_addr = inet_addr(val);

                            /* Extract multicast destination port */
                            val = comma + 1;
                            ma.sin_port = htons(atoi(val));

                            /* Create socket */
                            if ((multicast_socket = new_socket(IPPROTO_UDP)) < 0)
                            {
                                send_error(unicast_socket, EUNDEF, _inet_err(), NULL);
                                goto error;
                            }

                            /* Bind to the required destination port, and mark non-blocking */
                            ma.sin_family = AF_INET;
                            ma.sin_len = sizeof la;
                            memset(ma.sin_zero, 0, sizeof ma.sin_zero);

                            if (setsockopt(multicast_socket, SOL_SOCKET, SO_REUSEADDR, &one, sizeof one) < 0 ||
                                bind(multicast_socket, (struct sockaddr *) &ma, sizeof ma) < 0 ||
                                getsockname(unicast_socket, (struct sockaddr *) &la, &lalen) < 0)
                            {
                                send_error(unicast_socket, EBADOPTS, _inet_err(), NULL);
                                goto error;
                            }

                            /* Attempt to connect. Doesn't matter if it doesn't work, but
                             * if it does, then we get extra Internet module filtering.
                             * Because we can't rely on it, must still check source address
                             * and port.
                             *
                             * It may not work because we can't have two totally duplicate
                             * local/foreign address/port bindings. We are free to have
                             * sockets like this though:
                             *          224.10.10.10.mcast-tftp    tftpserver.51323
                             *          224.10.10.10.mcast-tftp    *.*
                             *          224.10.10.10.mcast-tftp    *.*
                             *
                             * By not requiring connection, we allow multiple transfers
                             * of the same file on one machine. Rather weird, but vital
                             * for debugging :)
                             */
                            connect(multicast_socket, (struct sockaddr *) &sin, sizeof sin);

                            mreq.imr_multiaddr = ma.sin_addr;
                            mreq.imr_interface = la.sin_addr;

                            if (setsockopt(multicast_socket, IPPROTO_IP, IP_ADD_MEMBERSHIP, &mreq, sizeof mreq) < 0)
                            {
                                send_error(unicast_socket, EBADOPTS, _inet_err(), NULL);
                                goto error;
                            }

                            if (multicast_socket + 1 > nfds)
                                nfds = multicast_socket + 1;
                        }
                        else
                        {
                            while (*val++ != ',') continue;
                        }
                        /* Advance to third field */
                        while (*val++ != ',') continue;
                        master_client = atoi(val);

                    }
                    else if (strcasecmp(p, "blksize") == 0)
                    {
                        blocksize = atoi(val);
                        /* realloc() doesn't work on RISC OS 3.1 */
                        free(in);
                        in = malloc(offsetof(struct tftphdr, th_data) + blocksize);
                        if (!in)
                        {
                            e = no_mem_error();
                            send_error(unicast_socket, EBADOPTS, e->errmess, NULL);
                            goto error;
                        }
                    }
                    else if (strcasecmp(p, "tsize") == 0)
                    {
                        tsize = atoi(val);
                        /* Dummy zero length reception to mark endpoint */
                        if ((e2 = recvfunc(in->th_data, tsize, 0, client_handle)) != NULL)
                            goto client_error;
                    }
                    else
                    {
                        send_error(unicast_socket, EBADOPTS, "Unknown option", NULL);
                        goto error;
                    }

                    p = val + strlen(val) + 1;
                }

                /* We can only handle blocks 1-65535, so check now if we're going to
                 * have problems. Check whether the highest numbered block would have
                 * to be bigger than 0xFFFF.
                 */
                if (tsize && tsize / blocksize + 1 > 0xFFFF)
                {
                    send_error(unicast_socket, ENOSPACE, "Too many blocks", NULL);
                    goto error;
                }

                #ifdef TRACE_MAP
                if (tsize)
                {
                    _kernel_oswrch(31);
                    _kernel_oswrch((tsize / blocksize + 1) % 80);
                    _kernel_oswrch((tsize / blocksize + 1) / 80);
                    _kernel_oswrch('|');
                }
                #endif

                /* Must ACK this. If not master client, ACK block zero always,
                 * indicating just option acknowledgement, or the server may get
                 * narked.
                 */
                len = send_ack(unicast_socket, out, master_client ? last_acked : 0);
                already_transmitted = true;
                break;
            }

            case DATA:
            {
                int blocknum = ntohs(in->th_block) - 1;
                int size = n - offsetof(struct tftphdr, th_data);
                bool new_block = !bit_test(map, blocknum);

                /* Quick check of block number */
                if (num_blocks != -1 && blocknum >= num_blocks)
                {
                    send_error(unicast_socket, EBADOP, "Block number too high", NULL);
                    goto error;
                }

                bit_set(map, blocknum);

                /* ACK as soon as possible */
                bit_ffc_from(map, 65536, last_acked, &last_acked);

                if (master_client)
                {
                    len = send_ack(unicast_socket, out, last_acked);
                    already_transmitted = true;
                }

                #ifdef TRACE_MAP
                _kernel_oswrch(17);
                _kernel_oswrch(!new_block ? 1 :
                               master_client ? 7 :
                               2);
                _kernel_oswrch(31);
                _kernel_oswrch(blocknum % 80);
                _kernel_oswrch(blocknum / 80);
                _kernel_oswrch(!new_block ? '+' :
                               master_client ? '*' :
                               '#');
                #endif

                /* Tell our client */
                if (new_block)
                {
                    e2 = recvfunc(in->th_data, (u_long) blocknum * blocksize, size, client_handle);
                    if (e2)
                    {
                        int errnum;

                      client_error:
                        if (e2->errnum >= ERRORBASE && e2->errnum < ERRORBASE + 0x80)
                            errnum = e2->errnum - ERRORBASE;
                        else
                            errnum = EUNDEF;

                        send_error(unicast_socket, errnum, e->errmess, NULL);
                        e = e2;
                        goto error;
                    }
                }

                if (blocknum > highest_block)
                    highest_block = blocknum;

                /* Spot end of file */
                if (size < blocksize)
                {
                    /* Check we haven't received any higher-numbered blocks */
                    if (blocknum < highest_block)
                    {
                        send_error(unicast_socket, EBADOP, "Block too small", NULL);
                        goto error;
                    }
                    num_blocks = blocknum + 1;
                }
                else
                {
                    /* If we've received block 0xFFFF, and we're not finished yet,
                     * we have to bail out.
                     */
                    if (blocknum == 65535 - 1)
                    {
                        send_error(unicast_socket, ENOSPACE, "Too many blocks", NULL);
                        goto error;
                    }
                }


                if (last_acked == num_blocks)
                {
                    /* We've got everything. Hooray! */
                    finished = true;
                    /* Don't forget to tell the server we're done */
                    if (!master_client)
                        send_ack(unicast_socket, out, last_acked);
                }

                break;
            }

            case ERROR:
                _inet_error.errnum = ntohs(in->th_code) + ERRORBASE;
                sprintf(_inet_error.errmess, "TFTP error %d: %s", ntohs(in->th_code), in->th_msg);
                goto error;

            default:
                send_error(unicast_socket, EBADOP, "Unknown TFTP operation", NULL);
                goto error;
        }
    }

    /* Successful exit */
    e = NULL;

  error:
    if (multicast_socket >= 0)
        socketclose(multicast_socket);
    if (icmp_socket >= 0)
        socketclose(icmp_socket);
    if (unicast_socket >= 0)
        socketclose(unicast_socket);
    free(map);
    free(out);
    free(in);

    return e;
}

