#include <sys/types.h>
#include <sys/errno.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <arpa/tftp.h>
#include <netdb.h>

#include <socklib.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <ctype.h>
#include <swis.h>

#include "Global/RISCOS.h"
#include "Global/Upcall.h"

#include "TFTPhdr.h"
#include "tftp.h"

static void convert_netascii_in_memory(char *p);

/*
 * Because we could get threaded out in a task window, we count how many
 * sessions are going. Could be nasty if someone killed us...
 */
static int sessions;

/* Generic Dynamic Area pumper */
typedef struct area
{
    int num;
    void *base;
    int size;
    int used;
} area;

static _kernel_oserror *pumptoda(const void *data, u_long offset, size_t len, void *handle)
{
    area *da = (area *) handle;
    int moved;
    _kernel_oserror *e;

    if (offset + len > da->size)
    {
        e = _swix(OS_ChangeDynamicArea, _INR(0,1)|_OUT(1), da->num, offset + len - da->size, &moved);
        if (e)
        {
            _inet_error = *e;
            _inet_error.errnum = ERRORBASE + ENOSPACE;
            return &_inet_error;
        }
        da->size += moved;
    }

    memcpy((char *)da->base + offset, data, len);

    if (offset + len > da->used)
        da->used = (int) offset + len;

    return NULL;
}

static _kernel_oserror *createda(struct area *da)
{
    _kernel_oserror *e;

    e = _swix(OS_DynamicArea, _INR(0,8)|_OUT(1)|_OUT(3),
                              0, -1, 4, -1, 0x80,
                              32*1024*1024, NULL, NULL,
                              "TFTP buffer",
                              &da->num, &da->base);
    if (e) return e;

    e = _swix(OS_ReadDynamicArea, _IN(0)|_OUT(1), da->num, &da->size);
    if (e)
        goto error;

    da->used = 0;

    return NULL;

  error:
    _swix(OS_DynamicArea, _INR(0,1), 1, da->num);

    return e;
}

/* Module loader */

static _kernel_oserror *fetchmodule(const char *filename, struct in_addr server)
{
    struct area da;
    _kernel_oserror *e;
    u_long *module;

    e = createda(&da);
    if (e) return e;

    /* Hackery to fool pumping routing to keep first word clear */
    da.base = (char *) da.base + 4;
    da.size -= 4;

#ifdef NETASCII
    e = tftpreadfile(filename, server, false, pumptoda, &da);
#else
    e = tftpreadfile(filename, server, pumptoda, &da);
#endif
    if (e)
        goto error;

    module = (u_long *) da.base;

    if (module[1] & 0x80000000)
    {
        /* It's squeezed. Link directly in place, and the kernel will unsqueeze
         * into RMA. Hacky, but better than the kernel copying into the RMA,
         * then unsqueezing into another block of RMA.
         */
        module[-1] = da.used;
        e = _swix(OS_Module, _INR(0,1), 10, module);
    }
    else
    {
        /* It's not squeezed. Copy into RMA in the normal fashion. */
        e = _swix(OS_Module, _INR(0,2), 11, module, da.used);
    }

  error:
    _swix(OS_DynamicArea, _INR(0,1), 1, da.num);

    return e;
}

/* Obey file loader */

static int current_da_num = -1;
static bool tidied;

int upcall_handler(_kernel_swi_regs *r, void *pw)
{
    pw = pw;

    if (r->r[0] == UpCall_NewApplication)
    {
        /* Note - a later claimant may object, so we might be exiting
         * normally after all! Set the tidied flag to indicate that
         * we've been run
         */
        tidied = true;

        /* Won't be returning through fetchobey, so do its clean-up */

        if (current_da_num != -1)
        {
            _swix(OS_DynamicArea, _INR(0,1), 1, current_da_num);
            current_da_num = -1;
        }

        /* Yes, it's fine for a vector handler to release itself */
        _swix(OS_Release, _INR(0,2), UpCallV, upcall_entry, pw);

        /* Won't be returning through tftp_command, so do its clean-up */
        if (sessions > 0)
            sessions--;

        _swix(Hourglass_Off, 0);
    }

    return 1; /* Don't claim */
}

static _kernel_oserror *fetchobey(const char *filename, const char *opts,
                                  struct in_addr server, void *pw)
{
    struct area da;
    _kernel_oserror *e;
    char buffer[64];

    e = createda(&da);
    if (e) return e;

    /* Read in netascii mode, if available */
#ifdef NETASCII
    e = tftpreadfile(filename, server, true, pumptoda, &da);
#else
    e = tftpreadfile(filename, server, pumptoda, &da);
#endif
    if (e)
        goto error;

    /* Add a terminating 0 to the end of the file */
    e = pumptoda("", da.used, 1, &da);
    if (e)
        goto error;

#ifdef NETASCII
    convert_netascii_in_memory((char *) da.base);
#endif

    current_da_num = da.num;

    /* The Obey file may not return. Have to deal gracefully with this condition. */
    e = _swix(OS_Claim, _INR(0,2), UpCallV, upcall_entry, pw);
    if (e) goto error;

    tidied = false;

    sprintf(buffer, "%%Obey %s-m &%08X", opts, (unsigned int) da.base);
    e = _swix(OS_CLI, _IN(0), buffer);

    if (!tidied)
    {
        current_da_num = -1;
        _swix(OS_Release, _INR(0,2), UpCallV, upcall_entry, pw);

      error:
        _swix(OS_DynamicArea, _INR(0,1), 1, da.num);
    }

    return e;
}

/* File loader */
typedef struct fileinfo
{
    int file;
    u_long pos;
} fileinfo;

static _kernel_oserror *pumptofile(const void *data, u_long offset, size_t len, void *handle)
{
    fileinfo *fi = (fileinfo *) handle;
    _kernel_oserror *e;

    if (len == 0)
    {
        /* OS_Args 1 would work, but this is faster as it doesn't fill with zeroes */
        if ((e = _swix(OS_Args, _INR(0,2), 6, fi->file, offset)) != NULL)
            goto error;
    }
    else
    {
        if (offset != fi->pos)
           if ((e=_swix(OS_Args, _INR(0,2)|_OUT(2), 1, fi->file, offset, &fi->pos)) != NULL)
           {
               _inet_error.errnum = ERRORBASE + ENOSPACE;
               strcpy(_inet_error.errmess, e->errmess);
               return &_inet_error;
           }

        if ((e=_swix(OS_GBPB, _INR(0,3)|_OUT(4), 2, fi->file, data, len, &fi->pos)) != NULL)
            goto error;
    }

    return NULL;

  error:
    _inet_error.errnum = ERRORBASE + ENOSPACE;
    strcpy(_inet_error.errmess, e->errmess);
    return &_inet_error;
}

#ifdef NETASCII
static _kernel_oserror *convert_netascii(int f)
{
    _kernel_oserror *e;
    char buffer[1024];
    int pi, po;
    int n;

    pi = po = 0;

    /* Read 1024 bytes at a time, with one byte overlap.
     * Reduce all '\r\n' pairs to '\n'
     */
    do
    {
        char *p1, *p2;
        char *end;

        e = _swix(OS_GBPB, _INR(0,4)|_OUT(3), 3, f, buffer, sizeof buffer, pi, &n);
        if (e) return e;

        end = buffer + (sizeof buffer - n - 1);

        for (p1 = p2 = buffer; p1 < end; p1++, p2++)
        {
            if (*p1 == '\r' && *(p1+1) == '\n')
                p1++;
            if (p1 != p2)
                *p2 = *p1;
        }

        if ((pi != po || p1 != p2) && p2 > buffer)
        {
            e = _swix(OS_GBPB, _INR(0,4), 1, f, buffer, p2 - buffer, po);
            if (e) return e;
        }
        pi += p1 - buffer;
        po += p2 - buffer;
    } while (!n);

    /* Truncate the file */
    if (pi != po)
        e = _swix(OS_Args, _INR(0,2), 3, f, po);

    return e;
}

/* Converts the null-terminated string p from netascii to RISC OS format. Returns pointer
 * to new terminator.
 */
static void convert_netascii_in_memory(char *p)
{
    char *d = p;

    for (;;)
    {
        if (*p == '\r' && *(p+1) == '\n')
            p++; /* Skip over the \r */

        if (p != d)
            *d = *p;

        if (*d == '\0')
            break;

        p++;
        d++;
    }
}
#endif

static _kernel_oserror *fetchfile(const char *filename, struct in_addr server, const char *local
#ifdef NETASCII
                                  , bool netascii
#endif
                                 )
{
    fileinfo fi;
    _kernel_oserror *e;
    int size;
    char *canonical = NULL;

    /* Open file for output */
    e = _swix(OS_Find, _INR(0,1)|_OUT(0), 0x80, local, &fi.file);
    if (e) return e;

    /* Find canonical name of file, in case some bugger changes directory while
     * multitasking in a task window.
     */
    e = _swix(OS_Args, _INR(0,2)|_IN(5)|_OUT(5), 7, fi.file, NULL, NULL, &size);
    if (!e)
    {
        size = -size + 1;
        canonical = malloc(size);

        if (canonical)
            e = _swix(OS_Args, _INR(0,2)|_IN(5), 7, fi.file, canonical, size);
    }

    /* Pump the file */
    fi.pos = 0;
    if (!e)
#ifdef NETASCII
        e = tftpreadfile(filename, server, netascii, pumptofile, &fi);
#else
        e = tftpreadfile(filename, server, pumptofile, &fi);
#endif

#ifdef NETASCII
    if (!e && netascii)
        e = convert_netascii(fi.file);
#endif

    /* Close the file */
    _swix(OS_Find, _INR(0,1), 0, fi.file);

    if (!e)
    {
        size_t nlen = strlen(filename);
        unsigned int type;

        if (nlen >= 4 &&
            filename[nlen-4] == ',' &&
            isxdigit(filename[nlen-3]) &&
            isxdigit(filename[nlen-2]) &&
            isxdigit(filename[nlen-1]))
        {
            type = (unsigned int) strtoul(filename + nlen - 3, NULL, 16);
        }
#ifdef NETASCII
        else if (netascii)
            type = 0xFFF;
#endif
        else
            type = 0xFFD;

        _swix(OS_File, _INR(0,2), 18, canonical ? canonical : local, type);
    }

    /* If an error occured, other than Escape, delete the file */
    if (e && !(e->errnum == 17 && fi.pos != 0))
        _swix(OS_File, _INR(0,1), 6, canonical ? canonical : local);

    free(canonical);

    return e;
}

static _kernel_oserror *name_to_addr(const char *server, struct in_addr *addr)
{
    addr->s_addr = inet_addr(server);
    if (addr->s_addr == INADDR_NONE)
    {
        struct hostent *hp = gethostbyname(server);
        if (!hp)
        {
            _inet_error.errnum = ERROR_UNKNOWNHOST;
            strcpy(_inet_error.errmess, "Unknown host");
            return &_inet_error;
        }
        memcpy(addr, hp->h_addr, sizeof *addr);
    }

    return NULL;
}

_kernel_oserror *tftp_command(const char *arg, int argc, int cmd_no, void *pw)
{
    char *buffer[64];
    char **argv = buffer;
    bool eflag = false;
    struct in_addr addr;
    _kernel_oserror *e;
    const char *fmt;

    argc = argc;
    pw = pw;

    switch (cmd_no)
    {
        default:
#ifdef NETASCII
        case CMD_TFTPRead:       fmt = "e/s,/a,/a,/a,netascii=a/s,octet=b/s"; break;
#else
        case CMD_TFTPRead:       fmt = "e/s,/a,/a,/a"; break;
#endif
        case CMD_TFTPLoadModule: fmt = "e/s,/a,/a"; break;
        case CMD_TFTPObey:       fmt = "e/s,/a,/a,v/s"; break;
    }

    e=_swix(OS_ReadArgs, _INR(0,3), fmt, arg, buffer, sizeof buffer);
    if (e) return e;

    _swix(Hourglass_On, 0);

    if (*argv++)
        eflag = true;

    e = name_to_addr(argv[0], &addr);

    if (!e)
    {
        sessions++;

        switch (cmd_no)
        {
            case CMD_TFTPRead:
#ifdef NETASCII
                e = fetchfile(argv[1], addr, argv[2], (bool) argv[3]);
#else
                e = fetchfile(argv[1], addr, argv[2]);
#endif
                break;
            case CMD_TFTPLoadModule:
                e = fetchmodule(argv[1], addr);
                break;
            case CMD_TFTPObey:
                e = fetchobey(argv[1], argv[2] ? "-v" : "", addr, pw);
                break;
        }

        if (!tidied)
            sessions--;
    }

    if (e && eflag)
    {
        _kernel_setenv("Inet$Error", e->errmess);
        e = NULL;
    }

    if (!tidied)
        _swix(Hourglass_Off, 0);

    tidied = false;

    return e;
}

_kernel_oserror *tftp_finalise(int fatal, int podule, void *pw)
{
    fatal = fatal;
    podule = podule;
    pw = pw;

    if (sessions > 0)
    {
        static const struct { int no; char mess[8]; } e = { 0x111, "ModInUs" };
        return _swix(MessageTrans_ErrorLookup, _INR(0,4),
                                                &e, 0, &_inet_error, sizeof _inet_error,
                                                Module_Title);
    }

    return NULL;
}
