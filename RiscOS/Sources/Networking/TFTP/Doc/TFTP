                TFTP Client Software Functional Specification
                =============================================

                    Drawing Number:         2209,503/FS
                    Issue:                  1
                    Date:                   05 October 1999
                    Previous Issue:         
                    Status:                 Draft
                    Change:
                    Author:                 Kevin Bracey
                    Classification:         Pace Secret
                    Master Format:          Plain text



Contents
========

 1  Copyright
 2  Scope and Purpose of Document
 3  Overview
 4  Client Features
 5  Limitations
 6  User Interface
 7  Errors
 8  Acceptance Criteria
 9  Development Testing
 A  References
 B  Change History



1.  Copyright
=============

This document is copyright (C) Pace Micro Technology 1999.


2.  Scope and Purpose of Document
=================================

This document details a RISC OS Trivial File Transfer Protocol (TFTP) client
with multicasting extensions, implemented as a relocatable module. This
specification assumes familiarity with the TFTP documentation in the
references.


3.  Overview
============

The RISC OS TFTP module provides a simple yet powerful client implementation of
the Internet Trivial File Transfer Protocol (TFTP). It supports file reading
only, but implements many of the recent TFTP extensions, including multicast.

The TFTP client will function on any RISC OS system equipped with version 5.02
or later of the Internet module.


4.  Client Features
===================

* Can stream to a file, load a relocatable module, or execute an Obey file.
* Supports TFTP option negotiation, as per RFC 2347.
* Can support up to 16K blocksize, negotiated as per RFC 2348.
* Requests transfer size option as per RFC 2349 to allow early abort.
* Supports TFTP Multicast as per RFC 2090.
* *Command interface, with GSTransed parameters.
* Can set Inet$Error rather than returning an error.
* Cooperates with task windows.
* Re-entrant, so that multiple concurrent operations possible via task windows.
* Exponential backoff.
* Detects ICMP Destination Unreachable messages.
* Handles escape conditions gracefully.
* Uses "minimize delay" IP Type Of Service.
* Fast acknowledgement - ACK is sent before data written to file.
* Module is only 8K when squeezed.
* Static RAM usage under 4.5K (minimum for a C module is 3.5K).


5.  Limitations
===============

* Only reading is supported.
* Doesn't "dally" after sending final ACK ("encouraged" by RFC 1350).
* Doesn't retry RRQ if RRQ with options causes an ERROR (an "implementation
  option" in RFC 2347, but experience and RFC 1785 suggests it is 
  unnecessary).
* *TFTPLoadModule and *TFTPObey don't allow parameters to be passed to the
  module/Obey file. This is not believed to be required by this application -
  it could be added to future versions.


6.  User Interface
==================

The TFTP module provides the following three *Commands.


                                                              *TFTPRead
                                                              =========

   Read a file from a TFTP server.

Syntax
------
   *TFTPRead [-e] [-netascii|-octet] <server> <server_filename> <local_filename>

Parameters
----------
   -e               If an error occurs, set Inet$Error instead of
                    returning an error.

   -netascii        Fetch in netascii (text) mode. Also -a.

   -octet           Fetch in octet (binary) mode (the default).
                    Also -b.

   server           The name or address of the TFTP server.

   server_filename  The file to download from the server.

   local_filename   The filename to save the file as locally.

Use
---
   *TFTPRead reads the file <server_filename> from the
   server <server>, saving it as <local_filename>. The
   file can be transferred either in netascii or octet mode.

   If transferred in netascii mode, line endings are converted
   to RISC OS format.

   If the server filename ends in ",xxx" where xxx are hex
   digits, the file's type is set accordingly; this mimics the default
   behaviour of NFS. Otherwise the type is set to Text or Data
   for netascii and octet modes respectively.

   If the transfer fails for any reason, the partial file is deleted.

Example
-------
   *TFTPRead -netascii server-1 index.txt Index

Related commands
----------------
   *TFTPLoadModule



                                                        *TFTPLoadModule
                                                        ===============

   Load a relocatable module from a TFTP server.

Syntax
------
   *TFTPLoadModule [-e] <server> <server_filename>

Parameters
----------
   -e               If an error occurs, set Inet$Error instead of
                    returning an error.

   server           The name or address of the TFTP server.

   server_filename  The file to download from the server.

Use
---
   *TFTPLoadModule reads the file <server_filename> in octet mode from
   the server <server>, and installs it as a relocatable module.

Example
-------
   *TFTPLoadModule server-1 mymodule

Related commands
----------------
   *TFTPRead, *RMLoad (PRM 1-274)



                                                              *TFTPObey
                                                              =========

   Run an Obey file stored on a TFTP server.

Syntax
------
   *TFTPObey [-e] [-v] <server> <server_filename>

Parameters
----------
   -e               If an error occurs, set Inet$Error instead of
                    returning an error.

   -v               Echo each line before it is executed (*Obey's
                    -v flag).

   server           The name or address of the TFTP server.

   server_filename  The file to download from the server.

Use
---
   *TFTPObey reads the file <server_filename> in netascii mode from
   the server <server>, and executes it as an Obey file. The file
   is cached in memory before execution starts.

   The Obey file may start a new application - appropriate safeguards
   are taken by the TFTP module.

   This command relies on the -m option added to the Obey command
   by an earlier STB OS, so it will not work on a standard desktop
   RISC OS system.

Example
-------
   *TFTPObey server-1 !BootTFTP

Related commands
----------------
   *TFTPRead, *Obey (PRM 4-350)


7. Errors
=========

The TFTP commands may generate the following TFTP-specific errors:

Number   Text
------   ----
&817180  Unknown host
&817181  Timed out

If an ERROR datagram is received from the server, an error is generated
with error number &817100 + the TFTP error code, with the error text
"TFTP error <n>: <text from ERROR datagram>"


8. Acceptance Criteria
======================

The system as a whole will function as described in [1].


9. Development Testing
======================

Up to a dozen simultaneous clients were tested over a two week period against
our server, and standard TFTP servers. Both client and server algorithms were
gradually tuned over this time, and the system appeared to work well.

Debug versions are available that log packets, and display graphical
representations of their progress.


A.  References
==============

RFC 1123 Requirements for Internet Hosts -- Application and Support
RFC 1350 THE TFTP PROTOCOL (REVISION 2)
RFC 1785 TFTP Option Negotiation Analysis
RFC 2090 TFTP Multicast Option
RFC 2347 TFTP Option Extension
RFC 2348 TFTP Blocksize Option
RFC 2349 TFTP Timeout Interval and Transfer Size Options

[1] STB Baseline Booting via TFTP (2209,505/T)
[2] RISC OS Programmer's Reference Manual (0470,291-0470,294)


B.  Change History
==================

29 Jul 1999  Issue A
05 Oct 1999  Issue 1        Updated following review
