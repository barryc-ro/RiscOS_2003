;
; IPConfig (iicpoke.s)
;
; Copyright (C) Acorn Computers Ltd. 1998
;
;
; This code provides the ability to write byte 0 of the CMOS RAM
; which is protected against writes through the usual OSByte interface.
; We need to poke around in the IIC workspace in order to do the write
; of the station number and to re-write the checksum.
;
; All of the CMOS values are byte-wide and the top 24 bits are kept
; masked out by shifting values into the top 8 bits and back again
; when necessary.
;

	GET	"Hdr:ListOpts"
	GET	"Hdr:Macros"
	GET	"Hdr:System"
	GET	"Hdr:Machine.<Machine>"
	GET	"Hdr:CMOS"
	GET	"Hdr:APCS.<APCS>"

	AREA	|iicpoke$$code|, PIC, CODE, REL, READONLY


IICAddressByteZero	*	&40	; Note this is a physical address

; Note that the following constant comes from Kernel/hdr/KernelWS
; without permission from the kernel.  <wibble>
IOCControlSoftCopy	*       &106    ; &106


	EXPORT	iicpoke			; Our single public API
; void iicpoke(unsigned int value)
iicpoke
        FunctionEntry "v1-v6", makeframe
        SavePSR v1
        Push    v1

	MOV	v1, a1, LSL #24		; Preserve new byte setting

	MOV	a1, #ReadCMOS		; Read CMOS byte
	MOV	a2, #NetStnCMOS		; station number (byte 0)
	SWI	XOS_Byte
	BVS	exit_iicpoke		; just give up on failure
	TEQ	v1, a3, LSL #24		; was it already set to what we want?
	BEQ	exit_iicpoke		; if so, shortcut

	MOV 	v2, a3, LSL #24		; Remember old setting
	MOV	a1, #ReadCMOS		; Read another byte
	MOV	a2, #CheckSumCMOS	; we want the CMOS checksum
	SWI	XOS_Byte
	BVS	exit_iicpoke		; give up on failure
	SUB	v2, a3, v2, LSR #24	; subtract old setting from sum
	ADD	v2, v1, v2, LSL #24	; add new setting into sum

	; Write routine is not APCS-R compliant, so provide the wrapper for it.
	STMFD	sp!, {v1-v6, sl, fp, ip}
	MOV	r6, v1, LSR #24		; New value to bottom byte of R6
	MOV	r5, #IICAddressByteZero	; Need physical address
	BL	Write
	LDMFD	sp!, {v1-v6, sl, fp, ip}
	; End of wrapper to Write.

	; Must only write the checksum if the CMOS byte write worked
	MOV	a1, #ReadCMOS		; Read CMOS byte
	MOV	a2, #NetStnCMOS		; station number (byte 0)
	SWI	XOS_Byte
	BVS	exit_iicpoke		; just give up on failure
	TEQ	v1, a3, LSL #24		; did the write work?
	MOVEQ	a1, #WriteCMOS		; Yes, so write a byte ...
	MOVEQ	a2, #CheckSumCMOS	; ... the CMOS checksum
	MOVEQ	a3, v2, LSR #24		; the new checksum value byte
	SWIEQ	XOS_Byte
exit_iicpoke
        Pull    v1
        RestPSR v1,,cf
        Return  "v1-v6", fpbased

;----------------------------------------------------------------------------
; The following code was imported from the SetStation utility code which is
; used for writing to byte zero of the CMOS.
; It no longer changes processor mode as it is always called from SVC mode.
;----------------------------------------------------------------------------

Write
	; Write a byte of CMOS RAM
      	; address in R5, data in R6

        MOV     r8, lr
;        SWI     XOS_EnterOS

        BL      Start

        MOV     R0, #&A0
        BL      TXByte

        BL      Acknowledge

        MOV     R0, R5                          ; address
        BL      TXByte

        BL      Acknowledge

        MOV     R0, R6                          ; data
        BL      TXByte

        BL      Acknowledge

        BL      Stop

;        TEQP    pc, #0 ; Return to user mode
;        NOP
        MOV     pc, r8

SetC1C0  ; wiggle C1 & C0 of IOC ie SCL & SDA of I2C bus
         ; C1,C0 are parameters

        Push    "R0-R2, lr"

        MOV     r0, #19                         ; Bruce puts a huge delay in here to make sure
        SWI     XOS_Byte
        LDMIA   sp, { r0, r1 }

        ADD     R0, R0, R1, LSL #1              ; R0 := C0 + C1*2
        MOV     R2, #0                          ; prepare to index soft copy
        LDRB    R1, [R2, #IOCControlSoftCopy]   ; read soft copy
        BIC     R1, R1, #&03                    ; clear clock and data
        ORR     R0, R1, R0                      ; put in new clock and data
        ORR     R0, R0, #&C0                    ; make sure two test bits are
                                                ; always set to 1 !
        STRB    R0, [R2, #IOCControlSoftCopy]   ; store back to soft copy

        MOV     R2, #IOC
        STRB    R0, [R2, #IOCControl]

        Pull    "R0-R2, pc"

ClockData ; Clock a bit down the I2C bus
          ; The bit is in R0

        Push    "R1, R14"

        MOV     R1, #0
        BL      SetC1C0
        MOV     R1, #1
        BL      SetC1C0

; Delay here must be >= 4.0 microsecs

        MOV     R1, #0
        BL      SetC1C0

        Pull    "R1, PC"

Start  ; Send the START signal

        Push    "R0,R1,R14"

        MOV     R0, #1
        MOV     R1, #1
        BL      SetC1C0

; Delay here must be >= 4.0 microsecs

        MOV     R0, #0
        MOV     R1, #1
        BL      SetC1C0

; Delay here must be >= 4.7 microsecs

        MOV     R0, #0
        MOV     R1, #0
        BL      SetC1C0

        Pull    "R0,R1,PC"

Acknowledge ; send the Acknowledge signal

        Push    "R0,R1,R14"
        MOV     R0, #1
        MOV     R1, #1
        BL      SetC1C0

; Delay here must be >= 4.0 microsecs

        MOV     R0, #1
        MOV     R1, #0
        BL      SetC1C0
        Pull    "R0,R1,PC"

Stop ; Send the stop signal

        Push    "R0,R1,R14"
        MOV     R0, #0
        MOV     R1, #1
        BL      SetC1C0

; Delay here must be >= 4.0 microsecs

        MOV     R0, #1
        MOV     R1, #1
        BL      SetC1C0
        Pull    "R0,R1,PC"

TXByte ; Transmit a byte (in R0) down the line

        Push    "R0,R1,R2,R14"

        MOV     R2, R0                          ; byte goes into R2
        MOV     R1, #&80                        ; 2^7   the bit mask

TXByteloop
        TST     R2, R1
        MOVEQ   R0, #0
        MOVNE   R0, #1

        BL      ClockData                       ; send the bit

        MOVS    R1, R1, LSR #1
        BNE     TXByteloop

        Pull    "R0,R1,R2,PC"

	END
