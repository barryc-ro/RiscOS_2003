/*
 * IPConfig (atmconfig.c)
 *
 * Copyright (C) Pace Micro Technology plc. 2000
 *
 */
#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "sys/types.h"
#include "netinet/in.h"
#include "net/if_arp.h"
#include "net/if.h"
#include "netinet/if_ether.h"
#include "arpa/inet.h"
#include "netdb.h"

#include "NVRAMconf.h"
#include "atmconfig.h"

#define ATM_BootConfigure	(0x47B3F)

static _kernel_oserror *atm_boot_config(
	int flags,
	int reason,
	int item,
	void *data)
{
        return _swix(ATM_BootConfigure, _INR(0,3),
        	flags,
        	reason,
        	item,
        	data);
}

static _kernel_oserror *atm_read_config(
        int item,
        void *data)
{
        return atm_boot_config(0, atm_config_READ, item, data);
}


static _kernel_oserror *atm_write_config(
        int item,
        void *data)
{
        return atm_boot_config(0, atm_config_WRITE, item, data);
}

_kernel_oserror *atm_validate_config(
        int item,
        void *data)
{
        return atm_boot_config(0, atm_config_VALIDATE, item, data);
}

/* Reads ATM configuration data from the ATM driver.
   Pass buffer addresses to receive information, or NULL if not interested in data.
   Flags are returned with bits set:
     0  PVC was read
     1  ATM address 1 was read
     2  ATM address 2 was read
 */
int ReadATMCMOS(unsigned short *pvc, struct atm_addr *svr1, struct atm_addr *svr2)
{
        int flags = 0;

        if (pvc != 0) {
                int pvc_int;
                if (atm_read_config(atm_config_item_BOOT_PVC, &pvc_int) == NULL) {
                        *pvc = (unsigned short) pvc_int;
                        flags |= (1<<atm_config_item_BOOT_PVC);
                }
        }
        if (svr1 != 0) {
                if (atm_read_config(atm_config_item_ADDR_1, svr1) == NULL) {
                        flags |= (1<<atm_config_item_ADDR_1);
                }
        }
        if (svr2 != 0) {
                if (atm_read_config(atm_config_item_ADDR_2, svr2) == NULL) {
                        flags |= (1<<atm_config_item_ADDR_2);
                }
        }

        return flags;
}

/* Write ATM configuration data to the ATM driver.
   Pass buffer addresses to send information, or NULL if not interested in data.
   Flags with bits set:
     0  Write PVC
     1  Write ATM address 1
     2  Write ATM address 2
   Flag big is ignored if passed pointer is NULL
 */
void WriteATMCMOS(int flags, unsigned short pvc, struct atm_addr *svr1, struct atm_addr *svr2)
{
        unsigned short old_pvc;
        struct atm_addr atm_address;
        int sanitised = 0;

        if (flags & ReadATMCMOS(&old_pvc, NULL, NULL) & (1<<atm_config_item_BOOT_PVC)) {
                if (old_pvc != pvc) {
                        unsigned int new_pvc = pvc;
                        sanitised = 1;
                        atm_boot_config(0, atm_config_SANITISE, atm_config_item_ALL, 0);
                        atm_write_config(atm_config_item_BOOT_PVC, &new_pvc);
                }
        }
        if (svr1 != NULL && flags & ReadATMCMOS(NULL, &atm_address, NULL) & (1<<atm_config_item_ADDR_1)) {
                if (memcmp(&atm_address, svr1, sizeof(atm_address)) != 0) {
                        if (sanitised == 0) {
                                sanitised = 1;
                                atm_boot_config(0, atm_config_SANITISE, atm_config_item_ALL, 0);
                        }
                        atm_write_config(atm_config_item_ADDR_1, svr1);
                }
        }
        if (svr2 != NULL && flags & ReadATMCMOS(NULL, &atm_address, NULL) & (1<<atm_config_item_ADDR_2)) {
                if (memcmp(&atm_address, svr2, sizeof(atm_address)) != 0) {
                        if (sanitised == 0) {
                                sanitised = 1;
                                atm_boot_config(0, atm_config_SANITISE, atm_config_item_ALL, 0);
                        }
                        atm_write_config(atm_config_item_ADDR_2, svr2);
                }
        }
}

