/*
 * IPConfig (editconfig.c)
 *
 * Copyright (C) Acorn Computers Ltd. 1998
 *
 * Based upon StaticIP/module.c
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <signal.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"

#include "sys/types.h"
#include "netinet/in.h"
#include "net/if_arp.h"
#include "net/if.h"
#include "netinet/if_ether.h"
#include "arpa/inet.h"
#include "netdb.h"

#ifdef TRACE
#  include "IPConfHdrD.h"
#else
#  include "IPConfHdr.h"
#endif
#include "editconfig.h"
#include "module.h"
#include "utils.h"
#include "lineedit.h"
#include "atmconfig.h"

/* This header exported by RiscOS/Sources/Programmer/HdrSrc (HdrSrc-0_10 and later) */
#include "Global.Upcall.h"

/* Number of spaces to pre-pend to display lines to ensure output is visible
 * Messages file tag:  LMargin
 */
static int left_indent = 8;

/* Number of blank lines from top of logical display to ensure text is visible
 * Messages file tag:  VSkip
 */
static int vertical_gap = 10;

/* Width of titles in printed out configuration
 * Messages file tag:  HdrWidth
 */
static int field_width = 24;

/* Number of IP extra addresses to prompt for
 * Messages file tag:  IPCount
 */
static int extra_ip = 1;

/* Non-zero if we find an ATM interface
 * Set non-zero if an interface name starting with 'a' is found during searches
 */
static int got_atm_card = 0;

/* Time to wait for the keypresses to activate
 * Messages file tag:  KeyDelay
 */
static int keywait_delay = 20;

/* Timeout for dynamic boot retries - in seconds
 * Messages file tag:  DynRetries
 */
static int dynamic_retry_timeout = 600;

/* Maximum length of buffer into which to read allowable Yes keypressed
 * plus the actual characters allowed.
 * Messages file tags:  YesChars, NoChars
 */
#define MAX_YES_CHARS	7
static char yeschars[MAX_YES_CHARS+1] = { '\0' };
static char nochars[MAX_YES_CHARS+1] = { '\0' };


#define MAX_UNSET_BUFFER	23
static char unset[MAX_UNSET_BUFFER+1] = { '\0' };

/* OS_Byte reason codes */
enum {
	osbyte_KEY_SCAN = 121,
	osbyte_READ_CMOS = 161,
	osbyte_WRITE_CMOS = 162
};


static void SetMask(struct in_addr *ip, int bits);


/* This routine fills in the four bytes of CMOS RAM used to hold the value
 * identified by the first location specified - see NVRAMConf.h for these
 * values
 */
static void get_cmos_vector(const int location, int vector[])
{
	vector[0] = location;
        if (location == cmos_NBNS_IP) {
                vector[1] = cmos_NBNS_IP_OCTETS_123 + 0;
                vector[2] = cmos_NBNS_IP_OCTETS_123 + 1;
                vector[3] = cmos_NBNS_IP_OCTETS_123 + 2;
                return;
        }
	vector[1] = location+1;
	vector[2] = location+2;
	/* Handle the non-contiguous allocations */
	if (location == cmos_HOST_IP) {
		vector[3] = cmos_HOST_IP_OCTET_4;
	}
	else {
		vector[3] = location+3;
	}
}


static unsigned int read_cmos_byte(int location)
{
	int val = _kernel_osbyte(osbyte_READ_CMOS, location, 0);
	return val < 0 ? 0 : (val >> 8) & 0xFF;
}

static void write_cmos_byte(int location, unsigned int value)
{
	(void) _kernel_osbyte(osbyte_WRITE_CMOS, location, value);
	if (location == 0 && read_cmos_byte(location) != value) {
		iicpoke(value);
	}
}

/* Read an IP address (or 4 byte value) from CMOS.
 */
static void ReadIPCMOS( int location, struct in_addr *ip )
{
	int i;
	int vector[4];
	unsigned char *p = (unsigned char *) ip;

	get_cmos_vector(location, vector);

	for ( i = 0; i < 4; i++ ) {
		*p++ = (unsigned char) read_cmos_byte(vector[i]);
	}
}


/* Write an IP address (or 4 byte value) to CMOS.
 */
static void WriteIPCMOS( int location, const struct in_addr *ip )
{
	int i;
	int vector[4];
	const unsigned char *p = (const unsigned char *) ip;

	get_cmos_vector(location, vector);

	for ( i = 0; i < 4; i++ ) {
		write_cmos_byte(vector[i], *p++);
	}
}

/* Reads ATM configuration data from the ATM driver.
   Pass buffer addresses to receive information, or NULL if not interested in data.
   Flags are returned with bits set:
     0  PVC was read
     1  ATM address 1 was read
     2  ATM address 2 was read
 */
static int ReadATMCMOS(unsigned short *pvc, struct atm_addr *svr1, struct atm_addr *svr2)
{
	int flags = 0;

	if (pvc != 0) {
		int pvc_int;
		if (atm_read_config(atm_config_item_BOOT_PVC, &pvc_int) == NULL) {
			*pvc = (unsigned short) pvc_int;
			flags |= (1<<atm_config_item_BOOT_PVC);
		}
	}
	if (svr1 != 0) {
		if (atm_read_config(atm_config_item_ADDR_1, svr1) == NULL) {
			flags |= (1<<atm_config_item_ADDR_1);
		}
	}
	if (svr2 != 0) {
		if (atm_read_config(atm_config_item_ADDR_2, svr2) == NULL) {
			flags |= (1<<atm_config_item_ADDR_2);
		}
	}

	return flags;
}

/* Write ATM configuration data to the ATM driver.
   Pass buffer addresses to send information, or NULL if not interested in data.
   Flags with bits set:
     0  Write PVC
     1  Write ATM address 1
     2  Write ATM address 2
   Flag big is ignored if passed pointer is NULL
 */
static void WriteATMCMOS(int flags, unsigned short pvc, struct atm_addr *svr1, struct atm_addr *svr2)
{
	unsigned short old_pvc;
	struct atm_addr atm_address;
	int sanitised = 0;

	if (flags & ReadATMCMOS(&old_pvc, NULL, NULL) & (1<<atm_config_item_BOOT_PVC)) {
		if (old_pvc != pvc) {
		        unsigned int new_pvc = pvc;
			sanitised = 1;
			atm_boot_config(0, atm_config_SANITISE, atm_config_item_ALL, 0);
			atm_write_config(atm_config_item_BOOT_PVC, &new_pvc);
		}
	}
	if (svr1 != NULL && flags & ReadATMCMOS(NULL, &atm_address, NULL) & (1<<atm_config_item_ADDR_1)) {
		if (memcmp(&atm_address, svr1, sizeof(atm_address)) != 0) {
			if (sanitised == 0) {
				sanitised = 1;
				atm_boot_config(0, atm_config_SANITISE, atm_config_item_ALL, 0);
			}
			atm_write_config(atm_config_item_ADDR_1, svr1);
		}
	}
	if (svr2 != NULL && flags & ReadATMCMOS(NULL, &atm_address, NULL) & (1<<atm_config_item_ADDR_2)) {
		if (memcmp(&atm_address, svr2, sizeof(atm_address)) != 0) {
			if (sanitised == 0) {
				sanitised = 1;
				atm_boot_config(0, atm_config_SANITISE, atm_config_item_ALL, 0);
			}
			atm_write_config(atm_config_item_ADDR_2, svr2);
		}
	}
}

static void ReadNBBSCMOS(char *buf)
{
	int i;
	/* Reads the name of the primary boot server */
	buf[0] = read_cmos_byte(cmos_NB_BOOT_SERVER_BYTE_0);
	for (i = 1; i<cmos_NB_BOOT_SERVER_SZ; ++i) {
		buf[i] = read_cmos_byte(cmos_NB_BOOT_SERVER + i - 1);
	}
}

static void WriteNBBSCMOS(char *buf)
{
	int i;
	/* Writes the name of the primary boot server */
        write_cmos_byte(cmos_NB_BOOT_SERVER_ZERO_MARKER, 0);
	write_cmos_byte(cmos_NB_BOOT_SERVER_BYTE_0, *buf);
	for (i = 1; i<cmos_NB_BOOT_SERVER_SZ; ++i) {
		write_cmos_byte(cmos_NB_BOOT_SERVER + i - 1, buf[i]);
	}
}

/* Read a \0 terminated string from CMOS.
 */
static void ReadStringCMOS( int location, char *p, int bufsz )
{
	while ( --bufsz ) {
		if ((*p++ = read_cmos_byte(location++)) == '\0') return;
	}
	*p = '\0';
}


/* Write a \0 terminated string to CMOS.
 */
static void WriteStringCMOS( int location, char *p )
{
	do {
		write_cmos_byte(location++, *p);
	} while ( *p++ != '\0' );
}


/* Read all static IP data from CMOS.
 */
void ReadIPData( ip_data *ip )
{
	unsigned int flags;

	ReadIPCMOS( cmos_HOST_IP, &ip->client_ip );
	ReadIPCMOS( cmos_SERVER_IP, &ip->server_ip );
	ReadIPCMOS( cmos_GATEWAY_IP, &ip->gateway_ip );
	ReadIPCMOS( cmos_DNS_IP, &ip->dns_ip );
	ReadIPCMOS( cmos_IP_ADDR_1, &ip->addr1_ip );
	ReadIPCMOS( cmos_IP_ADDR_2, &ip->addr2_ip );
	ReadIPCMOS( cmos_IP_ADDR_3, &ip->addr3_ip );
	ReadIPCMOS( cmos_IP_ADDR_4, &ip->addr4_ip );
	ReadIPCMOS( cmos_NBNS_IP, &ip->nbns_ip );
	ReadNBBSCMOS( ip->nbns_bootserver );
	ReadStringCMOS( cmos_BOOT_MOUNT, ip->boot_mount, cmos_BOOT_MOUNT_SZ );
	ip->nbbs_zero_marker = read_cmos_byte(cmos_NB_BOOT_SERVER_ZERO_MARKER);

	ip->atm_flags = ReadATMCMOS( &ip->atm_pvc, &ip->atm_boot1, &ip->atm_boot2 );

	ip->configured_fs = editconfig_read_configured_fs();

	flags = read_cmos_byte(cmos_NETMASK);
	ip->netmask = (flags & cmos_NETMASK_MASK) >> cmos_NETMASK_SHIFT;

	if (cmos_NETMASK != cmos_STATIC_FLAG) flags = read_cmos_byte(cmos_STATIC_FLAG);
	ip->static_flag = (flags & cmos_STATIC_FLAG_BIT_MASK) != 0;

	ip->terminator = '\0';
	ip->nterminator = '\0';
	SetMask(&ip->netmask_ip, ip->netmask);
}


/*
 * Write all static IP data to CMOS.
 */
void WriteIPData( ip_data *ip )
{
	unsigned int flags;

	WriteIPCMOS( cmos_HOST_IP, &ip->client_ip );
	WriteIPCMOS( cmos_SERVER_IP, &ip->server_ip );
	WriteIPCMOS( cmos_GATEWAY_IP, &ip->gateway_ip );
	WriteIPCMOS( cmos_DNS_IP, &ip->dns_ip );
	WriteIPCMOS( cmos_IP_ADDR_1, &ip->addr1_ip );
	WriteIPCMOS( cmos_IP_ADDR_2, &ip->addr2_ip );
	WriteIPCMOS( cmos_IP_ADDR_3, &ip->addr3_ip );
	WriteIPCMOS( cmos_IP_ADDR_4, &ip->addr4_ip );
	WriteIPCMOS( cmos_NBNS_IP, &ip->nbns_ip );
	if (ip->nbbs_zero_marker == 0) {
	        WriteNBBSCMOS ( ip->nbns_bootserver );
	}
	WriteStringCMOS( cmos_BOOT_MOUNT, ip->boot_mount );
	WriteATMCMOS ( ip->atm_flags, ip->atm_pvc, &ip->atm_boot1, &ip->atm_boot2 );

	flags = read_cmos_byte(cmos_NETMASK);
	flags = (flags & ~cmos_NETMASK_MASK) | (ip->netmask << cmos_NETMASK_SHIFT);
	if (cmos_NETMASK != cmos_STATIC_FLAG) {
		write_cmos_byte(cmos_NETMASK, flags);
		flags = read_cmos_byte(cmos_STATIC_FLAG);
	}
	flags = (flags & ~cmos_STATIC_FLAG_BIT_MASK) |
		(ip->static_flag ? cmos_STATIC_FLAG_BIT_MASK:0);
	write_cmos_byte(cmos_STATIC_FLAG, flags);
}

/* Returns the number of extra addresses we are going to prompt
 * for.
 */
int read_address_count(void)
{
	return extra_ip;
}

/* Returns the delay we are willing to sit and wait for a delayed keypress
 */
int read_keywait_delay(void)
{
	return keywait_delay;
}

/* Returns the retry delay on dynamic boot attempts - in seconds
 */
int read_dynamic_retry_timeout(void)
{
        return dynamic_retry_timeout;
}

/* Returns whether we have an ATM interface card present
 */
int using_atm_card(void)
{
	return got_atm_card;
}

/* Called if read_device_name discovers an ATM card
 */
void found_atm_card(void)
{
	got_atm_card = 1;
}

static void wait_getchar(void)
{
	(void) fgetc(stdin);
}

/* called to re-open messages file when the editor is first entered
 * (in case any new overriding files have appeared during ROM init)
 * and if the filesystem number is changed.
 */
static void reopen_messages(void)
{
	(void)messages_file_close();
	if (module_open_messages()) {
		reboot(0,0);
		#ifdef TRACE
		wait_getchar();
		#endif
	}
}

#pragma -v1
/* Pragma enables the printf style format checking */
static int lm_printf(const char *format, ...)
{
	va_list ap;
	int i;

	for (i = 0; i < left_indent; ++i) {
		fputc(' ', stdout);
	}

	va_start(ap, format);
	i += vprintf(format, ap);
	va_end(ap);

	return i;
}
#pragma -v0

/*  Determines if the IP address is not set
 */
static int editconfig_is_inaddr_any(const struct in_addr *p)
{
	return p->s_addr == INADDR_ANY;
}


/* Write a newline character
 */
static void newline(void)
{
	fputc('\n', stdout);
}

/* Clear the screen.
 */
static void Cls(void)
{
	int newlines = vertical_gap;
	(void) _swix(OS_WriteN, _INR(0,1), "\x06\x1A\x0C", 3);

	while (newlines--) {
		newline();
	}
}

/* Format a 6-byte MAC address into the given buffer.  Buffer must be 18
 * characters long (13 if sep is '\0') .  If sep is '\0' then no separator
 * is placed between bytes of the MAC address.
 */
void format_mac_address(const struct ether_addr *mac, char *buffer, char sep)
{
	int i;

	for (i=0; i<6; ++i) {
		if (i > 0 && sep != '\0') {
			*buffer++ = sep;
		}
		buffer += sprintf(buffer, "%02x", mac->octet[i]);
	}
	*buffer = '\0';
}

/* Write a string (reads tag from Messages file)
 */
size_t write_tag_msg(const char *tag)
{
	const char *ptr = NULL;
	size_t inoutlength = 0;

	if (read_message(tag, &ptr, &inoutlength)) {
		inoutlength = 0;
	}
	if (inoutlength > 0) {
		lm_printf("");
		(void) fwrite(ptr, 1, inoutlength, stdout);
	}
	return inoutlength;
}

void write_tag_msg_nl(const char *tag)
{
	write_tag_msg(tag);
	newline();
}

void write_tag_nl_msg_nl(const char *tag)
{
	newline();
	write_tag_msg_nl(tag);
	newline();
}

/* Returns 1 if anything was output, otherwise 0 indicating do not display this field */
static int lm_print_hdr(const char *message)
{
	int i;

	i = field_width - write_tag_msg(message);
	if (i != field_width) {
		fputc(':', stdout);
		for (; i > 0; --i) {
			fputc(' ', stdout);
		}
		return 1;
	}
	else {
		return 0;
	}
}


/* Read a message
 */
_kernel_oserror *read_msg(const char *tag, char *buffer, size_t msg)
{
	const char *ptr = buffer;
	size_t inoutlength = msg;

	return read_message(tag, &ptr, &inoutlength);
}

/* Print an IP address.
 */
static char *FormatIP( const struct in_addr *ip, char *buf )
{
	return strcpy(buf, inet_ntoa(*ip));
}

static void SetMask(struct in_addr *ip, int bits)
{
	unsigned char *p = (unsigned char *) ip;
	int i, j;

	p[0] = p[1] = p[2] = p[3] = '\0';
	bits = bits & 0x1F;
	if (bits == 0) bits = 32;

	for (i=0; i<4; ++i) {
		for (j=7; j>=0; --j) {
			if (--bits < 0) return;
			p[i] |= (1<<j);
		}
	}

}

void GetMask(const struct in_addr *ip, int *bits)
{
	int i, j, bit = 0;
	const unsigned char *p = (const unsigned char *) ip;

	for (i=0; i<4; ++i) {
		for (j=7; j>=0; --j) {
			if (p[i] & (1<<j)) {
				++bit;
			}
			else {
				*bits = bit;
				return;
			}
		}
	}
	*bits = bit;
}

static void PrintIP( const struct in_addr *p )
{
	/* If you want to change this to fputs, then show some Clue (read some C library docs
	 * to find out what extra stuff you need to do too)
	 */
	if (editconfig_is_inaddr_any(p)) {
		puts(unset);
	}
	else {
		char buf[sizeof("123.123.123.123")];
		puts(FormatIP(p, buf));
	}
}

/* Reads message and pads it, prints data out
 */
static void ShowIPConfigLine(const char *tag, const struct in_addr *p)
{
	if (lm_print_hdr(tag)) {
		PrintIP(p);
	}
}

static int editconfig_is_null_atm_address(const struct atm_addr *atm)
{
        int i;

	for (i=0; i<sizeof(*atm); ++i) {
	        if (atm->bytes[i] != 0) return 0;
	}

	return 1;
}

static char *FormatATMAddress(const struct atm_addr *atm, char *buffer)
{
        int b;

        for (b=0; b<sizeof(*atm); ++b) {
                sprintf(buffer + b*2, "%02x", atm->bytes[b]);
        }

        return buffer;
}

static void ShowATMAddressLine(const struct atm_addr *atm)
{
        if (editconfig_is_null_atm_address(atm)) {
                puts(unset);
        }
        else {
                char buffer[sizeof(*atm) * 2 + 1];
		puts(FormatATMAddress(atm, buffer));
        }
}

static void PrintATMData( const ip_data *ip )
{
	if (ip->atm_flags & (1<<atm_config_item_BOOT_PVC) && lm_print_hdr("ATMPVCAddr")) {
		if (ip->atm_pvc != 0) {
			printf("%hu\n", ip->atm_pvc);
		}
		else {
			puts(unset);
		}
	}
	if (ip->atm_flags & (1<<atm_config_item_ADDR_1) && lm_print_hdr("ATMAddr1")) {
	        ShowATMAddressLine(&ip->atm_boot1);
	}
	if (ip->atm_flags & (1<<atm_config_item_ADDR_2) && lm_print_hdr("ATMAddr2")) {
	        ShowATMAddressLine(&ip->atm_boot2);
	}
}

/* Print all static IP data.
 */
static void PrintIPData( const ip_data *ip )
{
	char msg[64];

	Cls();

	if (!using_atm_card() && lm_print_hdr("MACAddr")) {
	        format_mac_address(&ip->ether_a, msg, ':');
	        puts(msg);
	}

	ShowIPConfigLine("IPAddr", &ip->client_ip);
	ShowIPConfigLine("SNMask", &ip->netmask_ip);
	ShowIPConfigLine("GwIPAddr", &ip->gateway_ip);
	ShowIPConfigLine("BTSvAddr", &ip->server_ip);
	if (extra_ip > 0) ShowIPConfigLine("IPAddr1", &ip->addr1_ip);
	if (extra_ip > 1) ShowIPConfigLine("IPAddr2", &ip->addr2_ip);
	if (extra_ip > 2) ShowIPConfigLine("IPAddr3", &ip->addr3_ip);
	if (extra_ip > 3) ShowIPConfigLine("IPAddr4", &ip->addr4_ip);
	ShowIPConfigLine("DNSIPAddr", &ip->dns_ip);
	ShowIPConfigLine("NBNSIP", &ip->nbns_ip);

	if (lm_print_hdr("NBBSMain")) {
		puts(ip->nbns_bootserver);
	}

	if (lm_print_hdr("NBBS2ary") || lm_print_hdr("BootMount")) {
		puts(ip->boot_mount);
	}

	if (using_atm_card()) {
	        PrintATMData(ip);
	}

	if (lm_print_hdr("StatBFlag")) {
		read_msg(ip->static_flag ? "Enabled" : "Disabled", msg, sizeof(msg));
		puts(msg);
	}


	newline();
}


/* Get a string from stdin. If return is pressed straight away then the
 * buffer is left with a zero byte in the first position.
 *
 * If the query message wasn't found in the messages files, 0 is returned and
 * no message is output, no response is received and the buffer remains
 * unchanged.
 */
static int GetString( const char *message, char *buf, int bufsz, char *def_value )
{
	int c;

	if (!write_tag_msg(message)) {
		return 0;
	}
	fputc(' ', stdout);
	fflush(stdout);
	/* Copy the default as the new value - terminator NOT required */
	if (buf != def_value) {
		strncpy(buf, def_value, bufsz);
	}
	/* Get a line of text (using code pinched from C library) */
	c = lineedit_getline((unsigned char *) buf, bufsz);
	if (c < 0) {
		/* EOF or error */
		buf[0] = '\0';
	}
	else {
		buf[bufsz-c-1] = '\0';
	}

	return 1;
}

/* Get an ATM PVC address from stdin.
 */
static void GetPVC( const char *message, unsigned short *pvc)
{
	for (;;) {
		char buf[16];

		if (*pvc != 0) {
			(void) sprintf(buf, "%hu", *pvc);
		}
		else {
			*buf = '\0';
		}

		if (!GetString(message, buf, sizeof(buf), buf)) {
			/* No PVC query message was present, abort this function */
			return;
		}

		if (buf[0] != '\0') {
			int base = 0;
			int offs = 0;
			unsigned long new_val;
			if (buf[0] == '$' || buf[0] == '&') {
				base = 16;
				offs = 1;
			}
			new_val = strtoul(buf + offs, NULL, base);
			if (atm_validate_config(atm_config_item_BOOT_PVC, &new_val) != NULL) {
				if (new_val == 65535 || (new_val >> 16) != 0) {
					write_tag_msg_nl("NeedOKPVC");
					newline();
					continue;
				}
			}
			*pvc = (unsigned short) new_val;
		}
		else {
			write_tag_msg_nl("FldUnXed");
		}
		newline();
		break;
	}
}


/* Get an ATM address from stdin.
 */
static void GetATMAddr( const char *message, struct atm_addr *addr, int item)
{
	for (;;) {
	        struct atm_addr new_addr;
		char buf[2 * sizeof(*addr)+1];
		int i;

		if (editconfig_is_null_atm_address(addr)) {
		        buf[0] = '\0';
		}
		else {
			FormatATMAddress(addr, buf);
		}

		if (!GetString(message, buf, sizeof(buf), buf)) {
			/* No query message was present, abort this function */
			return;
		}

		if (buf[0] != '\0') {
		        for (i=0; i<sizeof(*addr); ++i) {
		                char bytebuf[4], *next;
		                bytebuf[0] = buf[i*2+0];
		                bytebuf[1] = buf[i*2+1];
		                bytebuf[2] = '\0';
		                new_addr.bytes[i] = (unsigned char) strtoul(bytebuf, &next, 16);
		                if (next != (bytebuf + 2)) {
		                        break;
		                }
		        }
		        if (i != sizeof(*addr)) {
	                        write_tag_msg_nl("NeedOKATM");
	                        newline();
	                        continue;
	                }
	                else {
	                	_kernel_oserror *e;
	                	e = atm_validate_config(item, &new_addr);
	                	if (e != NULL) {
                                        lm_printf("%s", e->errmess);
					newline();
					continue;
                                }
			}
			*addr = new_addr;
		}
		else {
			write_tag_msg_nl("FldUnXed");
		}
		newline();
		break;
	}
}


/* Get an IP address from stdin.  The following formats are allowed:
 *
 *    136.170.131.2
 *    0xfffff800
 *    0Xfffff800
 *    &77aa1123
 *    $11bb4afe
 *    d1ad0987
 *
 *  Hex digits are not case-sensitive.  The $ prefix is supported for the benefit
 *  of people not used to the Acorn usage of & as a base 16 prefix indicator.
 *
 *  Return value of zero indicates that the query message was missing from the
 *  messages files and that the user was not prompted for this field.
 */
static int GetIP( char *message, struct in_addr *p, int *bits )
{
	int i, j, mask, d[4];
	if (bits != NULL) *bits = -1;

	do {
		char buf[24];
		int was_inaddr_any = editconfig_is_inaddr_any(p);

		if (was_inaddr_any) {
			buf[0] = '\0'; /* Don't prime with 0.0.0.0 */
		}
		else {
			FormatIP(p, buf);
		}
		if (!GetString( message, buf, sizeof(buf), buf)) {
			/* Message tag was missing */
			return 0;
		}
		if ( buf[0] == '\0' ) {
			if (!was_inaddr_any) {
				write_tag_msg_nl("FldUnXed");
			}
			newline();
			return 1;
		}
		i = sscanf( buf, "%d.%d.%d.%d/%d", d, d+1, d+2, d+3, &mask);
		if (i < 4 && strlen(buf) >= 8) {
			/* Perhaps this is a hexadecimal string */
			char *b = buf;
			if (*b == '$' || *b == '&') ++b;
			else if (b[0] == '0' && (b[1] == 'x' || b[1] == 'X')) b+=2;
			if (strlen(b) >= 8) {
				char numbuf[4];
				int j;
				for (j=0; j<4; ++j) {
					if ((isxdigit)(b[j*2]) && (isxdigit)(b[j*2+1])) {
						numbuf[0] = b[j*2];
						numbuf[1] = b[j*2+1];
						numbuf[2] = 0;
						d[j] = (int) strtoul(numbuf, NULL, 16);
					}
					else {
						break;
					}
				}
				i=j;
				b += 8;
				if (*b == '/') {
					mask = (int) strtoul(b+1, NULL, 0);
					++i;
				}
			}
		}
		newline();
		if (i >= 4) {
			/* Are all the numbers in the inclusive range 0 to 255 */
			for (j = 0; j<4; ++j) {
				if (d[j] < 0 || d[j] >= 256) {
					i = 0;
				}
			}
		}
		if (i == 5 && (mask < 1 || mask > 32)) {
			/* Was the netmask invalid?  If so, pretend it wasn't there */
			i = 4;
			mask = -1;
		}
		if ( i < 4 ) {
			write_tag_msg_nl("IPReqd");
			newline();
		}
	} while ( i < 4 );

	for ( i = 0; i < 4; i++ ) {
		unsigned char *pp = (unsigned char *) p;
		pp[i] = (unsigned char)d[i];
	}
	if (bits != NULL) *bits = mask;

	return 1;
}

/* Get a yes/no response from the user. Returns true if yes.
 * Returns a default of defstate if no answer was given.
 */
static int Yes(const char *message, int defstate)
{
	char yesbuf[8];

	/* It is irritating to have to delete the prompted answer
	 * so don't provide one for yes/no questions */
	yesbuf[0] = '\0';
	if (!GetString(message, yesbuf, sizeof(yesbuf)-1, yesbuf)) {
		/* Query message wasn't in messages file.  Preserve default
		 * answer.  Note that this means you can seriously bugger
		 * things up if you miss out some of the vital messages
		 * like QChange, QCommitNV because of their failsafe
		 * defaults (both false).
		 */
		return defstate;
	}
	if (yesbuf[0] == '\0') return defstate;
	return (strpbrk(yesbuf, yeschars) == yesbuf);
}


/* Reboot the machine - unless we are a trace build
 */
_kernel_oserror *reboot(_kernel_swi_regs *r, void *pw)
{
	(void) r;
	(void) pw;
	#ifdef TRACE
	printf("\n>> " Module_Title " trace build: Normal ROM/RAM build would call OS_Reset now\n\n");
	return 0;
	#else
	return _swix(OS_Reset, 0);
	#endif
}

/* Read a numeric value of a given message tag, and constrain the value to
 * the supplied range, returning the value read.
 */
static int ReadNumMsg(const char *tag, int min, int max)
{
	char msg[64];
	int val;

	val = (read_msg(tag, msg, sizeof(msg)) != NULL) ? 0 : atoi(msg);
	if (val < min) val = min;
	if (val > max) val = max;
	return val;
}

/* Read basic screen layout configuration information (ifrconfig uses these values too)
 */
static void ReadMainVars(void)
{
	vertical_gap = ReadNumMsg("VSkip", 0, 100);
	left_indent = ReadNumMsg("LMargin", 0, 100);
	field_width = ReadNumMsg("HdrWidth", 0, 100);
	keywait_delay = ReadNumMsg("KeyDelay", 0, 1024);
	dynamic_retry_timeout = ReadNumMsg("DynRetries", 2, 1<<20); /* Max limit 291 hours! */
	read_msg("YesChars", yeschars, sizeof(yeschars));
	read_msg("NoChars", nochars, sizeof(nochars));
	read_msg("IPCount", unset, sizeof(unset));
	extra_ip = atoi(unset);
	if (extra_ip < 0) extra_ip = 0; else if (extra_ip > 4) extra_ip = 4;
	read_msg("NoIP", unset, sizeof(unset));
}

/* Validates the source, net mask and destination address to ensure that they
 * are consistent (ie. the destination must be reachable on the addressable sub-net!)
 */
static int editconfig_address_reachable(const struct in_addr *client,
		const struct in_addr *mask, const struct in_addr *dest)
{
	return (client->s_addr & mask->s_addr) == (dest->s_addr & mask->s_addr);
}

/* Pokes the ATM driver during startup if necessary */
void editconfig_exec_atm_start(ip_data *ip)
{
	struct in_addr *vc_dest;
	struct in_addr *remote_ip;
	char IParg[sizeof("123.123.123.123")];
	char pvc_address[sizeof("12345")];
	char svc_address[sizeof(struct atm_addr) * 2 + 1];
	static char cmdbuf[sizeof(svc_address) + sizeof(IParg) + 32];
	const char *pcmdbuf;
	const char *tag;
	char *address;
	size_t inoutlength;

	/* In the case of LanManFS over ATM, we need to be able to reach the NetBIOS
	 * nameserver (because we don't know the boot server's IP address - NetBIOS
	 * always deals in NetBIOS names!)  Therefore, test reachability of the NBNS
	 * and not the (non-configured) boot server IP address.
	 */
	if (ip->configured_fs == filesystem_LANMANFS) {
	        remote_ip = &ip->nbns_ip;
	}
	else {
	        remote_ip = &ip->server_ip;
	}

	/* Can we see the boot server?  If so, establish the VC to the boot server.
	 * If not, then we establish the VC to the gateway instead
	 */
	if (editconfig_address_reachable(&ip->client_ip, &ip->netmask_ip, remote_ip)) {
		vc_dest = remote_ip;
	}
	else {
		vc_dest = &ip->gateway_ip;
	}

	/* Was the configured PVC zero?  If so, try an SVC instead */
	if (ip->atm_pvc == 0) {
	        const struct atm_addr *atm = &ip->atm_boot1;
	        if (editconfig_is_null_atm_address(atm)) {
	                atm = &ip->atm_boot2;
	                if (editconfig_is_null_atm_address(atm)) {
		                return;
	                }
	        }
	        (void) FormatATMAddress(atm, svc_address);
	        address = svc_address;
	        tag = "ATMSVC";
	}
	else {
		(void) sprintf(pvc_address, "%hu", ip->atm_pvc);
		address = pvc_address;
		tag = "ATMStart";
	}

	(void) FormatIP(vc_dest, IParg);
	pcmdbuf = &cmdbuf[0];
	inoutlength = sizeof(cmdbuf);
	if (read_message_2(tag, &pcmdbuf, &inoutlength, IParg, address) == NULL) {
		(void) _kernel_oscli(pcmdbuf);
	}
}

/* This function validates the IP address of the host in the context of the
 * netmask and will return non-zero if the host address is the network or
 * broadcast address corresponding to the specified netmask.  It will NOT
 * fault 0.0.0.0 though, as this is the special value indicating that the
 * host address remains unset.
 */
static int editconfig_host_address_invalid(const ip_data *ip)
{
	if (ip->client_ip.s_addr == INADDR_ANY) return 0;

	if ((ip->netmask_ip.s_addr | ip->client_ip.s_addr) == INADDR_BROADCAST) {
		write_tag_msg_nl("IPNotBC");
		return 1;
	}

	if ((~ip->netmask_ip.s_addr & ip->client_ip.s_addr) == INADDR_ANY) {
		write_tag_msg_nl("IPNotNAddr");
		return 1;
	}

	return 0;
}

enum fscontrol_reason_codes {
	fscontrol_CHECK_FOR_FS = 13,
	fscontrol_FS_NUMBER_TO_NAME = 33
};

static char *editconfig_find_fs_name(int number, char *fs_buffer, int len)
{
	if (_swix(OS_FSControl, _INR(0,3), fscontrol_FS_NUMBER_TO_NAME, number, fs_buffer, len)) {
		*fs_buffer = '\0';
	}
	return fs_buffer;
}

static int editconfig_find_fs_number(const char *name)
{
	int fs_num;
	int zero_if_absent;
	if (_swix(OS_FSControl, _INR(0,2)|_OUTR(1,2),
		fscontrol_CHECK_FOR_FS, name, 0, &fs_num, &zero_if_absent) == NULL
		&& zero_if_absent != 0) return fs_num;
	return 0;
}

static void CheckFSData(void)
{
	for (;;) {
		char fs_name[64];
		int fs_num;
		char *fs_end;

		Cls();

		if (!lm_print_hdr("Filesys")) {
			/* Filesys tag not present - don't allow FS reconfiguration */
			return;
		}

		fs_num = editconfig_read_configured_fs();
		editconfig_find_fs_name(fs_num, fs_name, sizeof(fs_name));
		if (fs_name[0] == '\0') {
			switch (fs_num) {
				case filesystem_NFS:
					printf("NFS   ");
					break;
				case filesystem_LANMANFS:
					printf("LanMan   ");
					break;
				default:
					printf("%d   ", fs_num);
					break;
			}
			if (read_msg("CFSNotHere", fs_name, sizeof(fs_name))) {
				newline();
			}
			else {
				puts(fs_name);
			}
			sprintf(fs_name, "%d", fs_num);
		}
		else {
			puts(fs_name);
		}
		newline();

		if ( !Yes("QCFilesys", 0)) {
			return;
		}
		newline();

		if (!GetString("QFilesys", fs_name, sizeof(fs_name), fs_name)) {
			/* In trouble - this prompt was missing - default to no change */
			return;
		}

		if (fs_name[0] == '\0') {
			return;
		}

		fs_num = (int) strtoul(fs_name, &fs_end, 0);
		if (fs_end == fs_name) {
			/* Wasn't a number - try a name? */
			fs_num = editconfig_find_fs_number(fs_name);
		}
		/* Check that the filing system is present.  Warn if not, but allow user to
		 * stuff things up if they really want to - at least they should be able to
		 * get back to here to reset it to a working FS again.
		 */
		if (fs_num == 0 || !*(editconfig_find_fs_name(fs_num, fs_name, sizeof(fs_name)))) {
			write_tag_nl_msg_nl("FSNotHere");
			if (fs_num == 0) {
				write_tag_msg_nl("FSRestore");
				wait_getchar();
				continue;
			}
		}
		newline();

		if (fs_num == editconfig_read_configured_fs()) {
			return;
		}

		if ( Yes("QConfirmFS", 1) ) {
			editconfig_write_configured_fs(fs_num);
			newline();
			write_tag_msg_nl("NVFSDone");
			wait_getchar();
			reopen_messages();
			break;
		}
	}
}

/*
 * The main routine controlling the reconfiguration of the CMOS.  Does not
 * exit (in non-trace builds).
 */
void editconfig_service(void *pw, const struct ether_addr *eaddr)
{
	#ifndef TRACE
	/* Set the default escape handler to reboot the machine. Don't need
	 * to remember old handler as we always reboot after getting this far.
	 */
	enum oschangeenvironment_handler_numbers {
		envhandler_ESCAPE = 9
	};
	enum vector_numbers {
	        vectornumber_UPCALLV = 0x1D
	};

	(void) _swix(OS_ChangeEnvironment, _INR(0,3), envhandler_ESCAPE, veneer_reboot, pw, 0);

	/* Intercept Upcall_Standby - otherwise box gets stuffed requiring power cycle */
	(void) _swix(OS_Claim, _INR(0,2), vectornumber_UPCALLV, upcallv, pw);
	#else
	(void) pw;
	#endif

	reopen_messages();

	ReadMainVars();

	CheckFSData();

	for (;;) {
		ip_data ip;
		int bits, cpbuf;
		char buf[cmos_BOOT_MOUNT_SZ];

		ip.ether_a = *eaddr;
		ReadIPData( &ip );
		PrintIPData( &ip );

		if ( !Yes("QChange", 0)) {
			reboot(0,0);
			#ifdef TRACE
			break;
			#endif
		}

		PrintIPData( &ip );

		newline();
		write_tag_msg_nl("BlkPresv");
		newline();

		/* This loop demands that the IP address, sub-net mask & gateway are
		 * self-consistent.  It will not let the user put an unreachable
		 * gateway into the configuration
		 */
		for (;;) {
			int attempt_validation = 1;

			SetMask(&ip.netmask_ip, ip.netmask);
			if (!GetIP( "QIPAddr", &ip.client_ip, &bits )) {
				attempt_validation = 0;
			}
			else {
				if (IN_MULTICAST(htonl(ip.client_ip.s_addr))) {
					newline();
					write_tag_msg_nl("IPNotMulti");
					newline();
					continue;
				}
				if (bits > -1 && bits < 32) {
					SetMask(&ip.netmask_ip, bits);
				}
			}
			for (;;) {
				if (!GetIP( "QSNMask", &ip.netmask_ip, NULL )) {
					/* No tag present */
					attempt_validation = 0;
					break;
				}
				else {
					GetMask(&ip.netmask_ip, &bits);
					if (editconfig_host_address_invalid(&ip)) {
						bits = -1;
						break;
					}
					if (bits > 0 && bits <= 32) break;
					write_tag_msg_nl("NeedOKMask");
				}
			}
			if (attempt_validation) {
				if (bits == -1) continue;
				ip.netmask = bits;
				SetMask(&ip.netmask_ip, ip.netmask);
			}

			if (!GetIP( "QGwIPAddr", &ip.gateway_ip, NULL )) {
				break;
			}
			else {
				if (editconfig_is_inaddr_any(&ip.gateway_ip)) {
					write_tag_msg_nl("NoGWNoRte1");
					write_tag_msg_nl("NoGWNoRte2");
					newline();
					if (!Yes("QSureNoGW", 1)) {
						newline();
						continue;
					}
					newline();
					break;
				}

				if (!attempt_validation) {
					break;
				}
				if (editconfig_address_reachable(&ip.client_ip,
						&ip.netmask_ip, &ip.gateway_ip)) {
					break;
				}
				newline();
				write_tag_msg_nl("NeedLocGW1");
				write_tag_msg_nl("NeedLocGW2");
				newline();
			}
		}

		GetIP( "QDNSIPAddr", &ip.dns_ip, NULL );
		GetIP( "QNBNSIP", &ip.nbns_ip, NULL );
		GetIP( "QBTSvAddr", &ip.server_ip, NULL );
		if (extra_ip > 0) GetIP( "QAddr1", &ip.addr1_ip, NULL );
		if (extra_ip > 1) GetIP( "QAddr2", &ip.addr2_ip, NULL );
		if (extra_ip > 2) GetIP( "QAddr3", &ip.addr3_ip, NULL );
		if (extra_ip > 3) GetIP( "QAddr4", &ip.addr4_ip, NULL );

		if (GetString( "QNBBSMain", buf, cmos_NB_BOOT_SERVER_SZ, ip.nbns_bootserver)) {
			ip.nbns_bootserver[0] = '\0';
			ip.nbbs_zero_marker = 0;
			(void) strncat(ip.nbns_bootserver, buf, cmos_NB_BOOT_SERVER_SZ);
			newline();
		}

		cpbuf = 0;

		if (GetString( "QNBBS2ary", buf, cmos_NB_BOOT_SERVER_SZ, ip.boot_mount)) {
			cpbuf = 1;
		}
		else if (GetString( "QBootMount", buf, cmos_BOOT_MOUNT_SZ, ip.boot_mount)) {
			cpbuf = 1;
		}

		if (cpbuf) {
			ip.boot_mount[0] = '\0';
			(void) strncat(ip.boot_mount, buf, cmos_BOOT_MOUNT_SZ);
			newline();
		}

		if (using_atm_card()) {
		        if (ip.atm_flags & (1<<atm_config_item_BOOT_PVC)) {
				GetPVC( "QATMPVC", &ip.atm_pvc);
		        }
		        if (ip.atm_flags & (1<<atm_config_item_ADDR_1)) {
				GetATMAddr( "QATMAddr1", &ip.atm_boot1, atm_config_item_ADDR_1 );
		        }
		        if (ip.atm_flags & (1<<atm_config_item_ADDR_2)) {
				GetATMAddr( "QATMAddr2", &ip.atm_boot2, atm_config_item_ADDR_2 );
		        }
		}

		ip.static_flag = (Yes("QStaticB", ip.static_flag)) != 0;

		PrintIPData( &ip );

		if ( Yes("QCommitNV", 1) ) {
			WriteIPData( &ip );
			newline();
			write_tag_msg_nl("NVWrtDone");
			wait_getchar();
			reboot(0,0);
			#ifdef TRACE
			break;
			#endif
		}

		/* Changes not committed so go round and ask again. */
	}
}

/* Called to establish what the current filesystem configuration is */
int editconfig_read_configured_fs(void)
{
	return read_cmos_byte(cmos_FILESYSTEM);
}

void editconfig_write_configured_fs(int fs)
{
	write_cmos_byte(cmos_FILESYSTEM, fs);
}

int editconfig_write_configured_fs_by_name(const char *fs_name)
{
	int fs_num;
	char *fs_end;
	int old_fs = editconfig_read_configured_fs();

	fs_num = (int) strtoul(fs_name, &fs_end, 0);
	if (fs_end == fs_name || fs_num == 0) {
		fs_num = editconfig_find_fs_number(fs_name);
	}
	if (fs_num && fs_num != old_fs) {
		editconfig_write_configured_fs(fs_num);
		return fs_num;
	}
	return 0;
}


static int is_key_down(int key)
{
	(void) _swix(OS_Byte, _INR(0,1)|_OUT(1), osbyte_KEY_SCAN, key, &key);
	return key;
}

/* Internal key numbers are XOR'ed with &80 to effect a single key scan */
enum {
	key_LEFT_ALT = 5 | 0x80,
	key_RIGHT_ALT = 8 | 0x80,

	key_LEFT_SHIFT = 3 | 0x80,
	key_RIGHT_SHIFT = 6 | 0x80,

	key_LEFT_CTRL = 4 | 0x80,
	key_RIGHT_CTRL = 7 | 0x80
};

/* Return true if the all of the keyboard combination keys are down
 */
int editconfig_check_keys(keycheck_set which)
{
	int k;

	k = module_read_command_options();
	if (which == keycheck_BOTH_ALTS_AND_SHIFTS && (k & flag_NO_DO_BOOT)) return 1;
	if (which == keycheck_BOTH_ALTS && (k & flag_RUN_EDITOR)) return 1;

	k = is_key_down(key_LEFT_ALT) && is_key_down(key_RIGHT_ALT);
	if (k && which == keycheck_BOTH_ALTS_AND_SHIFTS) {
		k = is_key_down(key_LEFT_SHIFT) && is_key_down(key_RIGHT_SHIFT);
	}

	return k != 0;
}

/*------------------------------------------------------------------------------
 * called from module initialisation to check initialisation state
 */
_kernel_oserror *editconfig_initialise(void)
{
	ReadMainVars();
	return editconfig_check_keys(keycheck_BOTH_ALTS) ?
		NULL : make_error(error_REFUSE_INIT_KEYS_NOT_PRESSED, 0);
}

/* This routine is on UpcallV in non-TRACE builds */
int upcallv_handler(_kernel_swi_regs *r, void *pw)
{
        (void) pw;
        if (r->r[0] != UpCall_Standby) {
                /* Pass on this upcall */
                return 1;
        }
        r->r[0] = UpCall_Claimed;
        return 0;
}
