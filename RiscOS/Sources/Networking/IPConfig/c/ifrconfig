/*
 * IFConfig (ifrconfig.c)
 *
 * Copyright (C) Acorn Computers Ltd. 1998
 *
 *
 * Originally based upon DoBootp/ifrconfig.c
 *
 */

#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>

#include "kernel.h"
#include "swis.h"

#include "sys/types.h"
#include "sys/socket.h"
#include "sys/ioctl.h"
#include "net/route.h"
#include "netinet/in.h"
#include "net/if.h"
#include "netinet/if_ether.h"
#include "sys/errno.h"
#include "arpa/inet.h"

#include "socklib.h"

#include "editconfig.h"
#include "ifrconfig.h"
#include "module.h"
#include "sysvars.h"
#include "Strncmp_ci.h"
#ifdef TRACE
#  include "IPConfHdrD.h"
#else
#  include "IPConfHdr.h"
#endif

/* This header is exported by the DHCP module */
#include "DHCP.h"



/*
 *  Don't bother defining this.  BOOTP/DHCP can do it all on its own
 */
#undef GET_NETMASK_VIA_ICMP


static struct sockaddr_in ipaddr = { 0 };

#ifdef GET_NETMASK_VIA_ICMP
static struct sockaddr_in broadcast = { 0 };
struct sockaddr_in netmask = { 0 };
#endif

/*
 * If this value is set to one, then you will NOT be able to use
 * BOOTP through BOOTP gateways, because relay agents typically
 * defer copying the request to subnets until the first retry is
 * received (to avoid flooding the whole network unnecessarily).
 *
 * I assume that, by induction, this means that if the request needs
 * to be relayed N times, then this value needs to be at least (N+1)
 */
#ifdef TRACE
#define MAX_TRIES 5
#else
#define MAX_TRIES 10
#endif

/*
 * ifrconfig_set_default_route
 *
 * - takes as parameter an open socket id
 * - reads the system variable Inet$Gateway (string a.b.c.d)
 * - converts the var string to u_long inet address
 * - establishes that address as the default route
 *
*/

static int ifrconfig_set_default_route(int sockid)
{
    char *gwvar;
    unsigned long gateway_adr;
    struct sockaddr_in *sin;
    struct in_addr gw_in;

    /* If variable is not set then return success. */
    gwvar = getenv(SYSVAR_INET_GATEWAY);
    if (gwvar == NULL || gwvar[0] == '\0') return (1);

    if (inet_aton(gwvar, &gw_in) == 0 || gw_in.s_addr == INADDR_ANY)
        return (0);
    gateway_adr = gw_in.s_addr;

    if (socketversion() < 500)
    {
        struct ortentry route;

        sin = (struct sockaddr_in *)&route.rt_dst;
        sin->sin_family = AF_INET;
        sin->sin_addr = inet_makeaddr(0, INADDR_ANY);
        sin = (struct sockaddr_in *)&route.rt_gateway;
        sin->sin_family = AF_INET;
        sin->sin_addr.s_addr = gateway_adr;
        route.rt_flags = RTF_UP;
        route.rt_flags |= RTF_GATEWAY;

        if (socketioctl(sockid, SIOCADDRT, (caddr_t)&route) < 0)
            return (0);
        return (1);
    }
    else
    {
        static int rtm_seq;
        int routes;
        struct {
    	    struct rt_msghdr	hdr;
    	    struct nsockaddr_in	dst;
    	    struct nsockaddr_in	gway;
    	    struct nsockaddr_in	mask;
        } rtmsg;

        if ((routes = socket(PF_ROUTE, SOCK_RAW, AF_INET)) < 0) {
            return 0;
        }

        memset(&rtmsg, 0, sizeof(rtmsg));
        rtmsg.hdr.rtm_type = RTM_ADD;
        rtmsg.hdr.rtm_flags = RTF_UP | RTF_GATEWAY;
        rtmsg.hdr.rtm_version = RTM_VERSION;
        rtmsg.hdr.rtm_seq = ++rtm_seq;
        rtmsg.hdr.rtm_addrs = RTA_DST | RTA_GATEWAY | RTA_NETMASK;
        rtmsg.dst.sin_len = sizeof(rtmsg.dst);
        rtmsg.dst.sin_family = AF_INET;
        rtmsg.gway.sin_len = sizeof(rtmsg.gway);
        rtmsg.gway.sin_family = AF_INET;
        rtmsg.gway.sin_addr.s_addr = gateway_adr;
        rtmsg.mask.sin_len = sizeof(rtmsg.dst);
        rtmsg.mask.sin_family = AF_INET;

        rtmsg.hdr.rtm_msglen = sizeof(rtmsg);
        if (socketwrite(routes, &rtmsg, sizeof(rtmsg)) < 0) {
            #ifdef TRACE
            module_printf(stderr, "Set default route FAILED: %d %s\n", errno, _inet_err());
            #endif
            socketclose(routes);
            return (0);
        }

        socketclose(routes);
        return 1;
    }
}

/*
 * set_netmask
 *
 * - takes as parameter an open socket id
 * - establishes the mask parameter as the netmask
 *
*/

static int set_netmask(int sockid, char *ifname, struct in_addr mask)
{
    struct sockaddr_in *sin;
    struct  ifreq ifr;

    if (mask.s_addr == INADDR_ANY)
        return (0);

    strncpy(ifr.ifr_name, ifname, sizeof (ifr.ifr_name));
    sin = (struct sockaddr_in *)&ifr.ifr_addr;
    sin->sin_addr = mask;
    sin->sin_family = AF_INET;
    if (socketioctl(sockid, SIOCSIFNETMASK, (caddr_t)&ifr) < 0)
        return (0);
    return (1);
}


#ifdef USECMOS

static void SetVarVal( const char *var, const char *val )
{
        (void) _kernel_setenv(var, val);
}

static int set_ipaddr( int s, char *ifname, struct in_addr *v )
{
    	struct ifreq ifr;
    	struct sockaddr_in *sin;

    	if (v->s_addr == INADDR_ANY) {
        	return 1;
        }
    	(void) memset(&ifr, 0, sizeof(ifr));
    	(void) strncpy(ifr.ifr_name, ifname, sizeof (ifr.ifr_name));
    	sin = (struct sockaddr_in *)&ifr.ifr_addr;
    	sin->sin_addr.s_addr = v->s_addr;
    	sin->sin_family = AF_INET;
    	if (socketioctl(s, SIOCSIFADDR, (caddr_t)&ifr) < 0) {
        	return (0);
        }
    	return 1;
}

static void ifrconfig_set_var(const char *var, const struct in_addr ip)
{
        SetVarVal(var, inet_ntoa(ip));
}

static char *ifrconfig_get_extra_varname(int varno)
{
	static char varname[64];
        char tagname[sizeof(SYSVAR_INET_ADDR_PREFIX)+2];

        (void) strcpy(tagname, SYSVAR_INET_ADDR_PREFIX);
        (void) sprintf(tagname + sizeof(SYSVAR_INET_ADDR_PREFIX) - 1, "%d", varno);
        if (read_msg(tagname, varname, sizeof(varname)) == NULL) {
	        return varname;
        }
        return NULL;
}

static void ifrconfig_set_extra_var(const struct in_addr ip, int varno)
{
        /* Only set the requested addresses and force range to 1-4 */
	if (varno > 4 || varno < 1 || varno > read_address_count()) {
	        return;
	}
	else {
	        char *var = ifrconfig_get_extra_varname(varno);
	        if (var) {
	                ifrconfig_set_var(var, ip);
	        }
	}
}

static int use_configured_info( int s, char *ifname, ip_data *ip )
{
    	if (ip->static_flag) {
        	#ifdef TRACE
	        module_printf(stderr, "use_configured_info() - USING STATIC CONFIGURATION\n");
	        #endif
                /* Try to set the sub-net mask if necessary. */
                if (set_netmask(s, ifname, ip->netmask_ip) == 0) {
                            	write_tag_msg_nl("IFRNDNM");
                }
     		if ( set_ipaddr(s, ifname, &ip->client_ip) != 0 ) {
                        #ifdef TRACE
	    		write_tag_msg_nl("IFRUsingSt");
	    		#endif

            		SetVarVal( SYSVAR_INET_BOOTFILE, ip->boot_mount);
            		SetVarVal( SYSVAR_INET_MOUNTPATH, ip->boot_mount );
            		if (ip->configured_fs == filesystem_LANMANFS) {
                                SetVarVal( SYSVAR_INET_SERVERNAME, ip->nbns_bootserver );
                        }
            		SetVarVal( SYSVAR_INET_SERVERNAME2, ip->boot_mount );

	    		ifrconfig_set_var(SYSVAR_INET_BOOTSERVER, ip->server_ip);
	    		ifrconfig_set_var(SYSVAR_INET_GATEWAY, ip->gateway_ip);
	    		ifrconfig_set_var(SYSVAR_INET_RESOLVERS, ip->dns_ip);
	    		ifrconfig_set_extra_var(ip->addr1_ip, 1);
	    		ifrconfig_set_extra_var(ip->addr2_ip, 2);
	    		ifrconfig_set_extra_var(ip->addr3_ip, 3);
	    		ifrconfig_set_extra_var(ip->addr4_ip, 4);
	    		ifrconfig_set_var(SYSVAR_INET_ETHERIPMASK, ip->netmask_ip);
	    		ifrconfig_set_var(SYSVAR_NBNS_IP_ADDR, ip->nbns_ip);
            		return 1;
                }
                else {
                        /* Static configuration has failed - reset CMOS flag bits so that
                         * a dynamic boot occurs next time
                         */
                        ip->static_flag = 0;
                        WriteIPData(ip);
                }
        }

    	return 0;
}


static int GetIPVar(struct in_addr *in, const char *env)
{
        struct in_addr i;
        const char *val = getenv(env);

        if (val != NULL && inet_aton(val, &i)) {
                *in = i;
                return 1;
        }
        return 0;
}

static void ifrconfig_get_extra_var_ip(struct in_addr *ip, int varno)
{
        /* Only set the requested addresses and force range to 1-4 */
	if (varno > 4 || varno < 1 || varno > read_address_count()) {
	        return;
	}
	else {
	        char *var = ifrconfig_get_extra_varname(varno);
	        if (var) {
	                (void) GetIPVar(ip, var);
	        }
	}
}

/* Searches the comma-separated string for the given keyword, case insensitively.
 * Returns NULL if it did not find the keyword, else a pointer to the value after the
 * = terminator, else a pointer to the keyword within env.
 * Neither env nor keyword may be NULL on entry.
 */
static const char *ifrconfig_find_keyword(const char *env, const char *keyword)
{
        const size_t len = strlen(keyword);

        while (*env != '\0') {
        	if (Strncmp_ci(env, keyword, len) == 0) {
                	if (env[len] == '\0' || env[len] == ','){
                                return env;
                        }
                        else if (env[len] == '=') {
                                return env + len + 1;
                        }
                }
                /* Skip to next keyword */
                while (*env != '\0' && *env != ',') {
                        ++env;
                }
        }

        return 0;
}

static const char *ifrconfig_locate_keyword(const char *keyword)
{
        const char *env = getenv(SYSVAR_INET_PRIVATEDATA);

        if (env == NULL) {
                return env;
        }
        else {
        	return ifrconfig_find_keyword(env, keyword);
        }
}

/*
 *  This function examines the private data returned by the boot server (if any)
 *  to determine whether we are required to write the dynamically discovered
 *  data into the NVRAM and switch to static booting for future boot attempts.
 *  It also looks for a filesystem reset command in the response too.
 */
static void check_switch_to_static_boot(ip_data *ip)
{
        const char *env;
        if (!ifrconfig_locate_keyword("static")) return;

	#ifdef TRACE
	module_printf(stderr, "Server sent static switch keyword in private data\n");
	write_tag_msg_nl("IFRStore");
	#endif

        /* Write new data to CMOS and set next boot to use static data */
        ReadIPData(ip);
        ip->client_ip = ipaddr.sin_addr;
	(void) GetIPVar(&ip->server_ip, SYSVAR_INET_BOOTSERVER);
	(void) GetIPVar(&ip->gateway_ip, SYSVAR_INET_GATEWAY);
	(void) GetIPVar(&ip->dns_ip, SYSVAR_INET_RESOLVERS);
	(void) GetIPVar(&ip->nbns_ip, SYSVAR_NBNS_IP_ADDR);
	ifrconfig_get_extra_var_ip(&ip->addr1_ip, 1);
	ifrconfig_get_extra_var_ip(&ip->addr1_ip, 2);
	ifrconfig_get_extra_var_ip(&ip->addr1_ip, 3);
	ifrconfig_get_extra_var_ip(&ip->addr1_ip, 4);
	if (GetIPVar(&ip->netmask_ip, SYSVAR_INET_ETHERIPMASK)) {
	        GetMask(&ip->netmask_ip, (int *) &ip->netmask);
	}
	if (ip->configured_fs == filesystem_LANMANFS) {
		env = getenv(SYSVAR_INET_SERVERNAME);
		if (env != NULL) {
		        (void) strncpy(ip->nbns_bootserver, env, cmos_NB_BOOT_SERVER_SZ);
		}
	        env = getenv(SYSVAR_INET_SERVERNAME2);
	}
	else {
	        env = NULL;
	}
	if (env == NULL) {
		env = getenv(SYSVAR_INET_BOOTFILE);
	}
	if (env != NULL) {
	        (void) strncpy(ip->boot_mount, env, cmos_BOOT_MOUNT_SZ);
	}
        ip->static_flag = 1;
        WriteIPData(ip);
}
#endif


static int ifrconfig_check_keyboard(void)
{

        if (editconfig_check_keys(keycheck_BOTH_ALTS_AND_SHIFTS)) {
		#ifdef TRACE
		module_printf(stderr, "editconfig_check_keys(Alts and Shifts) -> TRUE\n");
		#endif
       	      	return 0;
        }
        if (editconfig_check_keys(keycheck_BOTH_ALTS)) {
		#ifdef TRACE
		module_printf(stderr, "editconfig_check_keys(Alts) -> TRUE\n");
		#endif
       	     	return -1;
        }

	return 1;
}

static int ifrconfig_init_pause(void)
{
        int result = 1;
        int time_expire;
        #ifdef TRACE
        module_printf(stderr, "ifrconfig_init_pause() ....key check pause\n");
        #endif
        _swix(OS_ReadMonotonicTime, _OUT(0), &time_expire);
        time_expire += read_keywait_delay();
	for (;;) {
	        int t;
	        result = ifrconfig_check_keyboard();
	        if (result <= 0) break;
	        _swix(OS_ReadMonotonicTime, _OUT(0), &t);
	        if (t > time_expire) break;

	}
        #ifdef TRACE
        module_printf(stderr, "ifrconfig_init_pause() .... returns %d\n", result);
        #endif
	return result;
}

/* ifrconfig
 *
 * This function controls the dynamic booting process.
 */
int ifrconfig(int s, char *ifname)
{
        ip_data ip;
        struct  ifreq ifr;
        int	retries;

	#ifdef TRACE
	write_tag_msg_nl("IFRInit");
	#endif
	{ int i = ifrconfig_init_pause(); if (i <= 0) return i; }
        #ifdef TRACE
        module_printf(stderr, "ifrconfig() - reading CMOS configuration data\n");
        #endif
	ReadIPData(&ip);

#ifdef USECMOS
        /* Try static IP information first.
         */
        if ( use_configured_info(s, ifname, &ip) == 0 ) {
#endif
	        #ifdef TRACE
        	module_printf(stderr, "ifrconfig() - doing the BOOTP/DHCP request loop ...\n");
	        #endif
		for (retries = 0; retries < MAX_TRIES; ++retries) {
		        int i;
		        #ifdef TRACE
		        module_printf(stderr, "ifrconfig_check_keyboard()\n");
		        #endif
		        i = ifrconfig_check_keyboard();
		        if (i<=0) return i;
			#ifdef TRACE
		        module_read_if_flags(s, ifname);
		        module_printf(stderr, "ifrconfig() calls SIOCGWHOAMIB - retry %d\n", retries);
		        #endif
	            	(void) strncpy(ifr.ifr_name, ifname, sizeof (ifr.ifr_name));
	            	if (socketioctl(s, SIOCGWHOIAMB, (caddr_t)&ifr) < 0) {
                                int status;
				#ifdef TRACE
				module_printf(stderr, "ioctl(..SIOCGWHOAMIB..) -> errno %d %s\n",
					errno, _inet_err());
			        module_read_if_flags(s, ifname);
	            		write_tag_nl_msg_nl("IFRSrchBS");
	            		#endif
	            		if (!_swix(DHCP_GetState, _INR(0,1)|_INR(3,4)|_OUT(2), 0, ifname, 0, 0, &status)) {
                                        if (status == dhcpstate_BOUND) break;
                                }
                		continue;
                        }
                        else break;
		}
		if (retries == MAX_TRIES) {
		        /* OK - had enough - give up and reboot */
		        #ifdef TRACE
            		write_tag_msg_nl("IFRNoBS");
            		#endif
               		reboot(0,0);
                	#ifndef ROM
       	        	return 0;
               		#endif
            	}
		#ifdef TRACE
		module_printf(stderr, "ioctl(..SIOCWHOIAMB..) has worked\n");
	        module_read_if_flags(s, ifname);
		#endif

#ifdef USECMOS
        }
#endif

        (void) strncpy(ifr.ifr_name, ifname, sizeof (ifr.ifr_name));
        if (socketioctl(s, SIOCGIFADDR, (caddr_t)&ifr) < 0) {
            	write_tag_nl_msg_nl("IFRNoRNA");
            	return (0);
        }

        ipaddr.sin_addr = ((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr;

#ifdef TRACE
	write_tag_msg("IFRMNAIs");
        printf(": %s\n", inet_ntoa(ipaddr.sin_addr));
#endif

#ifdef GET_NETMASK_VIA_ICMP
        /* Gets netmask via ICMP (no longer required).
         */
#  ifdef TRACE
	write_tag_msg_nl("IFRSrchNM");
#  endif
        (void) socketioctl(s, SIOCGWHOIAMM, (caddr_t)&ifr);
        strncpy(ifr.ifr_name, ifname, sizeof (ifr.ifr_name));
        if (socketioctl(s, SIOCGIFNETMASK, (caddr_t)&ifr) < 0) {
        	write_tag_msg_nl("IFRNoNM");
            	return (0);
        }
        netmask.sin_addr = ((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr;
#  ifdef TRACE
	write_tag_msg("IFRNMIs");
        printf(": %s\n", inet_ntoa(netmask.sin_addr));
#  endif
#endif

#ifdef USECMOS
	if (ip.static_flag && using_atm_card()) {
		/* Inform the ATM driver what is going on (if necessary) */
	        #ifdef TRACE
        	module_printf(stderr, "ifrconfig() -> starting ATM driver\n");
	        #endif
	        editconfig_exec_atm_start(&ip);
	}
#endif

        /* Try to set the default route if necessary. */
        if (ifrconfig_set_default_route(s) == 0) {
#ifdef TRACE
            	write_tag_msg_nl("IFRNDRt");
#endif
        }


#ifdef USECMOS
	if (ip.static_flag == 0) {
		check_switch_to_static_boot(&ip);
	}
#endif

	/* Test private data to see if we were asked to switch configured filesystems */
	{
	        const char *fs_cmos = ifrconfig_locate_keyword("FS");
	        if (fs_cmos) {
	                #ifdef TRACE
	                module_printf(stderr, "Server requested filesystem switch to %s\n",
	                	fs_cmos);
	                #endif
	                editconfig_write_configured_fs_by_name(fs_cmos);
	        }
	}

        #ifdef TRACE
        module_printf(stderr, "ifrconfig() exits at end of routine (returns 1)\n");
        #endif

        return 1;
}
