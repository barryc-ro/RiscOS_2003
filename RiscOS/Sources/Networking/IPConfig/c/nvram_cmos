/*
 * IPConfig (c.nvram_cmos)
 *
 *
 * Copyright © Pace Micro Technology plc. 2000
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"
#include "NVRAM.h"

#include "sys/types.h"
#include "netinet/in.h"
#include "net/if_arp.h"
#include "net/if.h"
#include "netinet/if_ether.h"
#include "arpa/inet.h"
#include "netdb.h"

#include "NVRAMconf.h"
#include "nvramapi.h"
#include "atmconfig.h"
#include "editconfig.h"
#include "utils.h"

enum {
        osbyte_READ_CMOS = 161,
        osbyte_WRITE_CMOS = 162
};

/* This routine fills in the four bytes of CMOS RAM used to hold the value
 * identified by the first location specified - see NVRAMConf.h for these
 * values
 */
#ifndef USENVRAM
static void get_cmos_vector(const int location, int vector[])
{
        vector[0] = location;
        if (location == cmos_NBNS_IP) {
                vector[1] = cmos_NBNS_IP_OCTETS_123 + 0;
                vector[2] = cmos_NBNS_IP_OCTETS_123 + 1;
                vector[3] = cmos_NBNS_IP_OCTETS_123 + 2;
                return;
        }
        vector[1] = location+1;
        vector[2] = location+2;
        /* Handle the non-contiguous allocations */
        if (location == cmos_HOST_IP) {
                vector[3] = cmos_HOST_IP_OCTET_4;
        }
        else {
                vector[3] = location+3;
        }
}


static unsigned int read_cmos_byte(int location)
{
        int val = _kernel_osbyte(osbyte_READ_CMOS, location, 0);
        return val < 0 ? 0 : (val >> 8) & 0xFF;
}

static void write_cmos_byte(int location, unsigned int value)
{
        (void) _kernel_osbyte(osbyte_WRITE_CMOS, location, value);
        if (location == 0 && read_cmos_byte(location) != value) {
                iicpoke(value);
        }
}

/* Read an IP address (or 4 byte value) from CMOS.
 */
static void ReadIPCMOS( int location, struct in_addr *ip )
{
        int i;
        int vector[4];
        unsigned char *p = (unsigned char *) ip;

        get_cmos_vector(location, vector);

        for ( i = 0; i < 4; i++ ) {
                *p++ = (unsigned char) read_cmos_byte(vector[i]);
        }
}

/* Write an IP address (or 4 byte value) to CMOS.
 */
static void WriteIPCMOS( int location, const struct in_addr *ip )
{
        int i;
        int vector[4];
        const unsigned char *p = (const unsigned char *) ip;

        get_cmos_vector(location, vector);

        for ( i = 0; i < 4; i++ ) {
                write_cmos_byte(vector[i], *p++);
        }
}


static void ReadNBBSCMOS(char *buf)
{
        int i;
        /* Reads the name of the primary boot server */
        buf[0] = read_cmos_byte(cmos_NB_BOOT_SERVER_BYTE_0);
        for (i = 1; i<cmos_NB_BOOT_SERVER_SZ; ++i) {
                buf[i] = read_cmos_byte(cmos_NB_BOOT_SERVER + i - 1);
        }
}

static void WriteNBBSCMOS(char *buf)
{
        int i;
        /* Writes the name of the primary boot server */
        write_cmos_byte(cmos_NB_BOOT_SERVER_ZERO_MARKER, 0);
        write_cmos_byte(cmos_NB_BOOT_SERVER_BYTE_0, *buf);
        for (i = 1; i<cmos_NB_BOOT_SERVER_SZ; ++i) {
                write_cmos_byte(cmos_NB_BOOT_SERVER + i - 1, buf[i]);
        }
}

/* Read a \0 terminated string from CMOS.
 */
static void ReadStringCMOS( int location, char *p, int bufsz )
{
        while ( --bufsz ) {
                if ((*p++ = read_cmos_byte(location++)) == '\0') return;
        }
        *p = '\0';
}


/* Write a \0 terminated string to CMOS.
 */
static void WriteStringCMOS( int location, char *p )
{
        do {
                write_cmos_byte(location++, *p);
        } while ( *p++ != '\0' );
}

/* Read all static IP data from CMOS.
 */
void ReadIPData( ip_data *ip )
{
        unsigned int flags;

        ReadIPCMOS( cmos_HOST_IP, &ip->client_ip );
        ReadIPCMOS( cmos_SERVER_IP, &ip->server_ip );
        ReadIPCMOS( cmos_GATEWAY_IP, &ip->gateway_ip );
        ReadIPCMOS( cmos_DNS_IP, &ip->dns_ip );
        ReadIPCMOS( cmos_IP_ADDR_1, &ip->addr1_ip );
        ReadIPCMOS( cmos_IP_ADDR_2, &ip->addr2_ip );
        ReadIPCMOS( cmos_IP_ADDR_3, &ip->addr3_ip );
        ReadIPCMOS( cmos_IP_ADDR_4, &ip->addr4_ip );
        ReadIPCMOS( cmos_NBNS_IP, &ip->nbns_ip );
        ReadNBBSCMOS( ip->nbns_bootserver );
        ReadStringCMOS( cmos_BOOT_MOUNT, ip->boot_mount, cmos_BOOT_MOUNT_SZ );
        ip->nbbs_zero_marker = read_cmos_byte(cmos_NB_BOOT_SERVER_ZERO_MARKER);

        ip->atm_flags = ReadATMCMOS( &ip->atm_pvc, &ip->atm_boot1, &ip->atm_boot2 );

        ip->configured_fs = nvram_read_configured_fs();

        flags = read_cmos_byte(cmos_NETMASK);
        ip->netmask = (flags & cmos_NETMASK_MASK) >> cmos_NETMASK_SHIFT;

        if (cmos_NETMASK != cmos_STATIC_FLAG) flags = read_cmos_byte(cmos_STATIC_FLAG);
        ip->static_flag = (flags & cmos_STATIC_FLAG_BIT_MASK) != 0;

        ip->terminator = '\0';
        ip->nterminator = '\0';
        SetMask(&ip->netmask_ip, ip->netmask);
}


/*
 * Write all static IP data to CMOS.
 */
void WriteIPData( ip_data *ip )
{
        unsigned int flags;

        WriteIPCMOS( cmos_HOST_IP, &ip->client_ip );
        WriteIPCMOS( cmos_SERVER_IP, &ip->server_ip );
        WriteIPCMOS( cmos_GATEWAY_IP, &ip->gateway_ip );
        WriteIPCMOS( cmos_DNS_IP, &ip->dns_ip );
        WriteIPCMOS( cmos_IP_ADDR_1, &ip->addr1_ip );
        WriteIPCMOS( cmos_IP_ADDR_2, &ip->addr2_ip );
        WriteIPCMOS( cmos_IP_ADDR_3, &ip->addr3_ip );
        WriteIPCMOS( cmos_IP_ADDR_4, &ip->addr4_ip );
        WriteIPCMOS( cmos_NBNS_IP, &ip->nbns_ip );
        if (ip->nbbs_zero_marker == 0) {
                WriteNBBSCMOS ( ip->nbns_bootserver );
        }
        WriteStringCMOS( cmos_BOOT_MOUNT, ip->boot_mount );
        WriteATMCMOS ( ip->atm_flags, ip->atm_pvc, &ip->atm_boot1, &ip->atm_boot2 );

        flags = read_cmos_byte(cmos_NETMASK);
        flags = (flags & ~cmos_NETMASK_MASK) | (ip->netmask << cmos_NETMASK_SHIFT);
        if (cmos_NETMASK != cmos_STATIC_FLAG) {
                write_cmos_byte(cmos_NETMASK, flags);
                flags = read_cmos_byte(cmos_STATIC_FLAG);
        }
        flags = (flags & ~cmos_STATIC_FLAG_BIT_MASK) |
                (ip->static_flag ? cmos_STATIC_FLAG_BIT_MASK:0);
        write_cmos_byte(cmos_STATIC_FLAG, flags);
}

/* Called to establish what the current filesystem configuration is */
int nvram_read_configured_fs(void)
{
        return read_cmos_byte(cmos_FILESYSTEM);
}

void nvram_write_configured_fs(int fs)
{
        write_cmos_byte(cmos_FILESYSTEM, fs);
}
#endif
