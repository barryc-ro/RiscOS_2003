/*
 * IPConfig (module.c)
 *
 *
 * Copyright (C) Acorn Computers Ltd. 1998
 *
 *
 * Originally based upon DoBootP/module.c
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"

#include "sys/dcistructs.h"
#include "sys/types.h"
#include "sys/uio.h"
#include "sys/socket.h"
#include "sys/errno.h"
#include "sys/time.h"
#include "sys/ioctl.h"
#include "netinet/in.h"
#include "net/if_arp.h"
#include "net/if.h"
#include "netinet/if_ether.h"
#include "arpa/inet.h"
#include "socklib.h"

#include "module.h"
#include "editconfig.h"
#include "ifrconfig.h"
#include "utils.h"
#include "sysvars.h"

/* This function is used to discover the primary interface name
 * and Ethernet MAC address of that interface.  buf[0] is set to
 * '\0' if no interfaces are found.
 */
static void read_device_name(char *buf, struct ether_addr *macadr);

/* This function is the entry point to the interface configuration
 * and discovery code
 */
static void establish_addresses(void);


/* These services do not appear to be declared in any C header files */
#define Service_Reset 0x27
#define Service_PostInit 0x73
#define Service_FSRedeclare 0x40

/* TRACE builds have several differences.  They claim FSCV and they contain a
 * handful of useful *-commands for debugging - notably *IPConfig_Log to show
 * the log messages!
 */
#ifdef TRACE
#  include "IPConfHdrD.h"
#else
#  include "IPConfHdr.h"
#endif


#ifdef TRACE
/* This variable is set to non-zero if the dynamic boot is to be executed
 * on the primary interface EVEN IF it already satisfies this module's
 * conditions that the dynamic boot is unnecessary.  This allows trace
 * builds to force requests to be issued under direct control from CLI.
 */
static int trace_DO_BOOTP = 0;
#endif


/* This is used to remember the module private word.  This means that the
 * value is available at all times when required for things like setting
 * up callbacks
 */
static void *module_wsp = 0;

/* This is the number of up, broadcast-capable, configured, non-loopback interfaces
 * used to determine whether or not to initiate a BOOTP/DHCP request
 */
static int ifcnt = 0;


#ifdef TRACE
/* TRACE builds claim FSCV in order to notice the boot filing system OS_FSControl
 * call being sent around by the kernel.  By noting this, debug versions can ensure
 * that all the initialisation behaviour is completed before the arrival of this
 * call
 */
static volatile int fscontrolv_claimed = 0;
enum {
	FSControlV  = 15
};

static void claim_fscv(void)
{
	if (!fscontrolv_claimed) {
		#ifdef TRACE
		module_printf(stderr, "Claiming FSCV\n");
		#endif
		fscontrolv_claimed = !_swix(OS_Claim, _INR(0,2), FSControlV, fsboot, module_wsp);
	}
}

static void release_fscv(void)
{
	if (fscontrolv_claimed) {
		#ifdef TRACE
		module_printf(stderr, "Releasing FSCV\n");
		#endif
		fscontrolv_claimed = !!_swix(OS_Release, _INR(0,2), FSControlV, fsboot, module_wsp);
	}
}
#endif


/* ========== Initialisation command line option management ========== */


static int cli_state = 0;
int module_read_command_options(void)
{
	return cli_state;
}

static void module_set_flags(int set)
{
	cli_state |= set;
}

static void module_clear_flags(int clear)
{
	cli_state &= ~clear;
}

/* module_set_command_options
 *
 *  This function parses the supplied command-line and sets the state
 *  flag according to the options which were specified in the command-line.
 *  It stores the result so that it can be returned via module_read_command_options()
 *
 *  If the return value is non-NULL, an error occurred which should be returned to
 *  prevent module initialisation.
 *
 */
static _kernel_oserror *module_set_command_options(const char *cmd_tail)
{
	int switches[4];
	_kernel_oserror *e;
	const char *msg = 0;
	char *args = 0;
	size_t msg_len = 0;

	if (cmd_tail == NULL) {
		cli_state = 0;
		#ifdef TRACE
		module_printf(stderr, "**** NULL passed to module_initialisation\n");
		#endif
		return 0;
	}

	/* Discover the command-line parameter match string - must be four switches */
	e = read_message("Args", &msg, &msg_len);
	if (e != NULL) {
		return e;
	}
	args = malloc(msg_len+1);
	if (args != NULL) {
		memcpy(args, msg, msg_len);
		args[msg_len] = '\0';
	}
	else {
		return 0;
	}

	/* Parse command-tail */
	e = _swix(OS_ReadArgs, _INR(0,3), args, cmd_tail, switches, sizeof(switches));
	free(args);
	/* Error or -help was specified */
	if (e != NULL || switches[3]) {
		return make_error(error_REFUSE_INIT_SYNTAX_ERROR, 0);
	}
	cli_state = 0;
	if (switches[0]) {
		cli_state |= flag_RUN_EDITOR;
	}
	if (switches[1]) {
		cli_state |= flag_NO_DO_BOOT;
	}
	else {
		if (switches[2]) {
			cli_state |= flag_FORCE_BOOT;
		}
	}

	return 0;
}

/* ========== Configuration editor veneer code ========== */

/* module_start_editor guards the only entry point into editconfig.c.  It clears the
 * run editor flag to avoid re-entering the editor on any pending callback.  On non-TRACE
 * builds, this function will never return.
 */
static void module_start_editor(void *pw)
{

#ifdef TRACE
	module_printf(stderr, Module_Title ": module_start_editor() invoked\n");
#endif

	{
		/* Rather than duplicate code, we might as well "discover" the interface
		 * list through the read_device_name function and just throw away the
		 * results.  This is in a sub-block so that the call to editconfig_service
		 * is performed tail-recursively and without this baggage on the stack.
		 * This call is performed solely to allow us to detect ATM drivers.
		 */
		char buf[16];
		struct ether_addr macadr;

		read_device_name(buf, &macadr);
	}

	module_clear_flags(flag_RUN_EDITOR);
	editconfig_service(pw);
	/*NOTREACHED*/
}


/* ========== Callback code ========== */

/* Callback management.  The dynamic boot cannot be performed during module initialisation
 * so these routines manage the callback settings and the top-level call into the
 * establish_addresses() function when the callback fires.
 */
static volatile int callbackflag = 0;

_kernel_oserror *callb_handler(_kernel_swi_regs *r, void *pw)
{
	(void) r;
	(void) pw;
	if (callbackflag != 0) {
#ifdef TRACE
		static int callcount = 0;
		++callcount;
	module_printf(stderr, Module_Title ": callback has been called back (call number %d)\n", callcount);
	module_printf(stderr, Module_Title ": options are: %d\n", module_read_command_options());
#endif
		if (module_read_command_options() & flag_RUN_EDITOR) {
			module_start_editor(pw);
		}
		else if (ifcnt == 0) {
			establish_addresses();
		}
		else {
			#ifdef TRACE
			module_printf(stderr, "*** Spurious callback - nothing to do actually\n");
			#endif
		}
		callbackflag = 0;
	}
	return 0;
}

static void setcallback(void)
{
	if (callbackflag == 0) {
		int opts = module_read_command_options();
		if ((ifcnt == 0 && !(opts & flag_NO_DO_BOOT)) || (opts & flag_FORCE_BOOT)) {
			if (_swix(OS_AddCallBack, _INR(0,1), callb_entry, module_wsp) == NULL) {
				#ifdef TRACE
				module_printf(stderr, Module_Title ": (setcallback) just set a callback\n");
				#endif
				callbackflag = 1;
			}
		}
		else {
			#ifdef TRACE
			module_printf(stderr, Module_Title ": (setcallback) not setting callback\n");
			#endif
		}
	}
}

static void clearcallback(void)
{
	if (callbackflag != 0) {
		(void) _swix(OS_RemoveCallBack, _INR(0,1), callb_entry, module_wsp);
		callbackflag = 0;
	}
}

/* ========== Initialisation/Finalisation related code ========== */


/* release_module_resources closes and removes the messages file from the RMA
 * if necessary, and removes any pending callback if there was one.  It is
 * used to back-out all resource claims and must be called during finalisation
 * or just before initialisation returns to the kernel with an error.
 */
static void release_module_resources(void)
{
	#ifdef TRACE
	release_fscv();
	#endif
	clearcallback();
	(void) messages_file_close();
	#ifndef ROM
	(void) utils_deregister_msgs();
	#endif
}

/* This routine opens the Messages and Custom file (if present) and prepares the
 * MessageTrans system for looking up all the messages that will be required
 * during execution.  It returns an error if it was not able to open Messages.
 * It does not return an error if it only failed to open the Custom file.
 */
_kernel_oserror *module_open_messages(void)
{
	static const char base_dir[] = Module_Title ":";
	static const char nm_messages[] = "Messages";
	static const char nm_custom[] = "Custom";
	char path_setting[sizeof(base_dir) + sizeof("FS123.") + sizeof(nm_messages)];

	_kernel_oserror *e;
	char *suffix;

	if (getenv(Module_Title "$Path") == NULL) {
	        e = _kernel_setenv(Module_Title "$Path", "Resources:$.Resources." Module_Title ".");
	        if (e != NULL) {
	                return e;
	        }
	}

	(void) strcpy(path_setting, base_dir);
        suffix = path_setting + sizeof(base_dir) - 1;
        (void) strcpy(suffix, nm_messages);

	e = messages_file_open(path_setting);
	if (e != NULL) {
	        return e;
	}

	(void) strcpy(suffix, nm_custom);
	(void) messages_file_open(path_setting);

        suffix += sprintf(suffix, "FS%d.", editconfig_read_configured_fs());

        (void) strcpy(suffix, nm_messages);
        (void) messages_file_open(path_setting);
        (void) strcpy(suffix, nm_custom);
        (void) messages_file_open(path_setting);

	return NULL;
}


/* Module initialisation code
 *
 * Performs the usual module initialisation tasks.
 * Reads the command-line options (if any).
 * Calls the editor's initialisation routine to see if we need to edit the configuration.
 * If we do, we get NULL back and allow module initialisation to complete.
 * If we do not, we get an error (which we ignore) and check the address tables.  If
 * the dynamic boot is already done, we return an error in order to die immediately,
 * otherwise we allow module initialisation to succeed, and wait for service calls to arrive.
 *
 */
static _kernel_oserror *module_init_sub(const char *cmd_tail)
{
	_kernel_oserror *e;
	int opts;

	e = module_open_messages();
	if (e == NULL) e = module_set_command_options(cmd_tail);
	if (e != NULL) {
		return e;
	}

	opts = module_read_command_options();
	if (opts<0) {
		return make_error(error_REFUSE_INIT_BOOTP_ALREADY_DONE, 0);
	}

#ifdef TRACE
	module_printf(stderr, Module_Title ": press interrupt keys NOW\a\n");
#endif

	if (editconfig_initialise() == NULL) {
		module_set_flags(flag_RUN_EDITOR);
	}
	else if ((opts & flag_NO_DO_BOOT) && !(opts & flag_FORCE_BOOT)) {
		/* Do we need to perform our boot operations? */
		return make_error(error_REFUSE_INIT_BOOTP_ALREADY_DONE, 0);
	}

	return NULL;
}

_kernel_oserror *module_init(const char *cmd_tail, int podule_base, void *pw)
{
	_kernel_oserror *e;

#ifdef TRACE
	module_printf(stderr, Module_Title ": initialisation\n");
#endif

	(void) podule_base;
	module_wsp = pw;

	#ifndef ROM
	e = utils_register_msgs();
	if (e != NULL) {
		return e;
	}
	#endif

	module_clear_flags(-1);
	e = module_init_sub(cmd_tail);
	if (e != NULL) {
		release_module_resources();
	}
	else {
		#ifdef TRACE
		claim_fscv();
		#endif
	}

#ifdef TRACE
	module_printf(stderr, Module_Title ": initialisation routine exits (%s)\n", e?e->errmess:"OK");
#endif

	return e;
}


_kernel_oserror *module_final(int fatal, int podule, void *pw)
{
	(void) fatal;
	(void) podule;
	(void) pw;

	release_module_resources();

#ifdef TRACE
	module_printf(stderr, Module_Title ": finalisation\n");
#endif

	return 0;
}



/* ========== Basic system variable management code ========== */

/* Set a system variable.  If the variable setting would be empty,
 * then the variable is not set at all.
 */
static void setvar(const char *var, const char *str)
{
	if (*str != '\0') {
		(void) _kernel_setenv(var, str);
	}
}

/* Gets the value of a system variable.  If the variable is unset or the value
 * is the empty string, then the buffer is filled with an empty string (if the
 * buffer was at least 1 byte long!) otherwise at most len-1 bytes are copied
 * into the user buffer and a terminating NUL appended.
 *
 * If an empty string is/would have been returned, the return value is 0.
 * Otherwise the return value is non-zero.
 */
static int getvar(char *var, char *str, int len)
{
	char *v = getenv(var);
	if (len > 0) {
		*str = '\0';
	}
	if (v != NULL && v[0] != '\0') {
		if (len > 0) {
			(void) strncat(str, v, len);
		}
		return 1;
	}
	else {
		return 0;
	}
}

/* Set the Inet$LocalAddr<n> variable to the given address string */
static void setadrvar(int ifcnt, struct in_addr in)
{
	char hex_address[12];
	const char *v = SYSVAR_INET_LOCALADDR;
	char varname[sizeof(SYSVAR_INET_LOCALADDR) + 4];
	const char *val;

	(void) sprintf(hex_address, "%lx", in.s_addr);

	if (ifcnt == 0)
		val = v;
	else {
		(void) sprintf(varname, "%s%d", v, ifcnt);
		val = varname;
	}
	(void) setvar(val, hex_address);
}


/* ========== BOOTP/DHCP management code ========== */

/* read_device_name
 *
 * This function fills in the interface name and MAC address of the first interface
 * in the chain returned by the network driver enumeration service call.  The supplied
 * buffer must be long enough to accept any interface name.  The Ethernet MAC address
 * will be 6 bytes long.  The service call is sent around and all the drivers attach
 * a struct chaindib to the head of the list which must be in the RMA so that we can
 * free it when we're done.
 *
 */
static void read_device_name(char *buf, struct ether_addr *macadr)
{
	_kernel_oserror *e;
	struct chaindib *d;

	/* Enumerate the network drivers */
	e = _swix(OS_ServiceCall, _INR(0,1)|_OUT(0), 0, Service_EnumerateNetworkDrivers, &d);
	if( e != 0 || d == NULL) {
		buf[0] = 0;
		return;
	}

	/* Construct the complete interface name from the unit name and the unit number */
	buf[14] = '\0';
	(void) strcat(strncpy(buf, (char *) d->chd_dib->dib_name, 14), "0");

	/* Copy the 6-byte Ethernet MAC address */
	(void) memcpy(macadr, d->chd_dib->dib_address, sizeof(struct ether_addr));

	while (d) {
		struct chaindib *d_next = d->chd_next;
		/* specification requires chain blocks be in the RMA. C library detects blocks
		 * in RMA and frees them correctly with OS_Module.
		 * ATM drivers have device names starting with an 'a'
		 */
		if (d->chd_dib->dib_name[0] == 'a') {
			found_atm_card();
		}
		free(d);
		d = d_next;
	}
}


/* Calls the Internet module to discover the given interfaces current flag settings and
 * returns them
 */
short module_read_if_flags(int s, const char *name)
{
	struct ifreq ifr;

	(void) strncpy(ifr.ifr_name, name, sizeof(ifr.ifr_name));
	if (socketioctl(s, SIOCGIFFLAGS, &ifr)<0) {
		#ifdef TRACE
		module_printf(stderr, "SIOCGIFFLAGS failed! %d %s\n", errno, _inet_err());
		#endif
		return 0;
	}
	else {
		#ifdef TRACE
		module_printf(stderr, "Interface %s flags now %hx\n", name, ifr.ifr_flags);
		#endif
		return ifr.ifr_flags;
	}
}


/* This function performs all the work of discovering the current status of all interfaces,
 * finding which, if any, are already configured, kicking off interface configuration to
 * ifrconfig.c (which may use static configuration as well as dynamic) if necessary, and
 * tidying things up so that multiple interfaces are not initialised.
 */
static int establish_addresses_sub(int s)
{
	char buf[512], name[16], var_buf[64];
	struct ether_addr macadr;
	struct ifconf ifc;
	struct ifreq ifreq, *ifr;
	int n, retried = 0;
	int found_bootpable_if = 0;

	read_device_name(name, &macadr);
	#ifdef TRACE
	module_printf(stderr, Module_Title ": (establish_addresses_sub) read_device_name -> `%s'\n", name);
	#endif
	if (name[0] == '\0') {
		/* No interfaces were present at all! */
		return 0;
	}
again:
	ifc.ifc_len = sizeof (buf);
	ifc.ifc_buf = buf;
	if (socketioctl(s, SIOCGIFCONF, (char *)&ifc) < 0) {
		#ifdef TRACE
		module_printf(stderr, "SIOCGIFCONF -> error %s\n", _inet_err());
		#endif
		return 1;
	}
	#ifdef TRACE
	module_printf(stderr, "SIOCGIFCONF -> %d interface%s present\n", ifc.ifc_len / sizeof (ifreq),
		(ifc.ifc_len == sizeof(ifreq)) ? " is":"s are");
	#endif

	ifcnt = 0;
	ifr = ifc.ifc_req;
	for (n = ifc.ifc_len / sizeof (struct ifreq); n > 0; n--, ifr++) {
		int ifamily = (((struct sockaddr *)&ifr->ifr_addr)->sa_family);
		short iflags;

		ifreq = *ifr;

		iflags = module_read_if_flags(s, ifreq.ifr_name);

		#ifdef TRACE
		if (ifamily != AF_INET) {
			module_printf(stderr, "%s interface %d; name `%s'; flags (%hx)\n",
				(ifamily == AF_LINK) ? "AF_LINK" : "unknown",
				ifr - ifc.ifc_req, ifr->ifr_name, iflags);
		}
		#endif

		if (!found_bootpable_if && !strcmp(ifr->ifr_name, name)) {
			found_bootpable_if = 1;
			#ifdef TRACE
			module_printf(stderr, "** This is a suitable interface for booting\n");
			#endif
		}

		if (ifamily != AF_INET) {
			continue;
		}

		#ifdef TRACE
		module_printf(stderr, "AF_INET interface %d; name `%s'; flags (%hx)\n",
			ifr - ifc.ifc_req, ifreq.ifr_name, iflags);
		#endif

		/*
		 * Check to see if its the loop back device. We dont want this
		 */
		if (iflags & IFF_LOOPBACK)
			continue;
		/*
		 * The card also needs to be able to broadcast
		 */
		if ((iflags & (IFF_BROADCAST|IFF_UP)) != (IFF_BROADCAST|IFF_UP))
			continue;

		/*
		 * Get the address of the interface
		 */
		if (socketioctl(s, SIOCGIFADDR, (char *)&ifreq) < 0)
			continue;
		#ifdef TRACE
		module_printf(stderr, Module_Title ": already active interface `%s' found (%s)\n",
			ifreq.ifr_name, inet_ntoa(((struct sockaddr_in *)&ifreq.ifr_addr)->sin_addr));
		#endif

		setadrvar(ifcnt, ((struct sockaddr_in *)&ifreq.ifr_addr)->sin_addr);
		if (getvar(SYSVAR_INET_BOOTFILE, var_buf, sizeof(var_buf))) {
			setvar(SYSVAR_INET_MOUNTPATH, var_buf);
		}

		if (getvar(SYSVAR_INET_HOSTNAME, var_buf, sizeof(var_buf)) == 0) {
			(void) strcpy(var_buf, "ARM");
			format_mac_address(&macadr, strchr(var_buf, '\0'), '\0');
			setvar(SYSVAR_INET_HOSTNAME, var_buf);
		}
		ifcnt++;
	}

	#ifdef TRACE
	if (trace_DO_BOOTP) {
		module_printf(stderr, "****** ZEROING IFCNT DUE TO FORCED BOOT ******\n");
		ifcnt = 0;
		trace_DO_BOOTP = 0;
	}
	#endif

	if (!found_bootpable_if) {
		#ifdef TRACE
		module_printf(stderr, "Wanted  to boot `%s', but AF_* structures not there yet ...\n",
			name);
		#endif
		retried = -1;
	}

	if (ifcnt == 0 && !retried) {
		int ifrconfig_result;
		#ifdef TRACE
		read_device_name(name, &macadr);
		{ char macbuf[20]; format_mac_address(&macadr, macbuf, ':');
		module_printf(stderr, "read_device_name: `%s' at `%s' executing ifrconfig\n", name, macbuf); }
		#endif
		if (module_read_if_flags(s, name) == 0) {
			#ifdef TRACE
			module_printf(stderr, "SIOCGIFFLAGS failed on that interface - no ifrconfig\n");
			#endif
			return 1;
		}
		(void) _swix(Hourglass_On, 0);
		ifrconfig_result = ifrconfig(s, name);
		(void) _swix(Hourglass_Off, 0);
		#ifdef TRACE
		module_printf(stderr, "ifrconfig() returned %d\n", ifrconfig_result);
		module_read_if_flags(s, name);
		#endif
		switch (ifrconfig_result) {
			case -1:
				module_start_editor(module_wsp);
				return (0);
			case 0:
				return (0);
			default:
				#ifdef TRACE
				module_printf(stderr, "ifrconfig() appears to have succeeded\n");
				module_printf(stderr, "Looping back to set up system variables\n");
				#endif
				break;
		}
		retried = 1;
		goto again;
	}
	else {
		#ifdef TRACE
		module_printf(stderr, "Not executing ifrconfig -> ifcnt=%d; retried=%d\n", ifcnt, retried);
		#endif
	}
	return (1);
}

/* establish_addresses
 *
 * This routine is the entry point to the interface table discovery code in
 * establish_addresses_sub.  To simplify socket handle management, this function
 * creates the socket, calls the subroutine and then closes the socket.
 */
static void establish_addresses(void)
{
	static volatile int semaphore = 0;
	int s;

	if (ifcnt != 0) return;
	if (semaphore) {
		#ifdef TRACE
		module_printf(stderr, Module_Title ": establish_addresses() prevents RE-ENTRANCY\n");
		#endif
		return;
	}
	++semaphore;
	#ifdef TRACE
	module_printf(stderr, Module_Title ": establish_addresses() is entered cleanly\n");
	#endif

	s = socket(PF_INET, SOCK_DGRAM, 0);
	if (s >= 0) {
		#ifdef TRACE
		module_printf(stderr, Module_Title ": establish_addresses() running ...\n");
		#endif
		(void) establish_addresses_sub(s);
		(void) socketclose(s);
		module_clear_flags(flag_FORCE_BOOT);
	}
	else {
		#ifdef TRACE
		module_printf(stderr, Module_Title ": socket error %d\n", errno);
		#endif
	}
	#ifdef TRACE
	module_printf(stderr, Module_Title ": establish_addresses() is exiting\n");
	#endif
	--semaphore;
}


/* ========== Remaining external module interfaces related code ========== */

/* Module service call handler
 *
 * Requires different services depending on whether it is a TRACE build or not.
 * CMHG input file will list required services.  Some of the TRACE build service
 * calls are included only in order to allow us to log their arrival times.
 */
void module_service(int sn, _kernel_swi_regs *r, void *pw)
{

	#ifdef TRACE
	module_printf(NULL, Module_Title ": service &%x (R0=%d; R2=%d)\n"
		 Module_Title ": options are: %d\n", sn, r->r[0], r->r[2], module_read_command_options());
	#endif

	switch (sn) {
		case Service_DCIDriverStatus:
			/* An interface has just gone UP, so set the callback to investigate
			 * new status of modules.
			 */
			if (r->r[2] == 0 && ifcnt == 0) {
				setcallback();
			}
			break;
		case Service_PostInit:
			#ifdef TRACE
			release_fscv();
			claim_fscv();
			#endif
			if (module_read_command_options() & flag_RUN_EDITOR) {
				module_start_editor(pw);
				/* will not return in non-TRACE builds */
			}
			else {
				/* Try and initialise, and if it did not succeed, set a
				 * callback to have a go a moment later too
				 */
				establish_addresses();
				if (ifcnt == 0) setcallback();
			}
			break;
	#ifdef TRACE
		case Service_Reset:
		case Service_FSRedeclare:
			release_fscv();
			claim_fscv();
			break;
		case Service_PreReset:
		case Service_InternetStatus:
			break;
	#endif
		default:
			break;
	}
}

#ifdef TRACE
/* All *-commands are present only in non-TRACE builds. */
_kernel_oserror *module_commands(const char *arg_string, int argc, int cmd_no, void *pw)
{
	(void) arg_string;
	(void) argc;

	switch (cmd_no) {
		case CMD_IPConfig_Configure:
			module_start_editor(pw);
			break;
		case CMD_IPConfig_ExecBootP:
			trace_DO_BOOTP = 1;
			setcallback();
			break;
		case CMD_IPConfig_Service:
		{
			/* Fakes a service call arrival.  Only delivered to this module */
			_kernel_swi_regs r;
			r.r[0] = 0;
			r.r[1] = (int) strtoul(arg_string, NULL, 0);
			r.r[2] = 1;
			module_service(r.r[1], &r, pw);
		}
			break;
		case CMD_IPConfig_Log:
			module_printf(stderr, NULL);
			break;
		default:
			break;
	}

	return 0;
}
#endif

#ifdef TRACE
/* This is the routine called when the kernel boots the current filing system
 * by issuing OS_FSControl 15.
 */
int fsboot_handler(_kernel_swi_regs *r, void *pw)
{
	(void) pw;
	if (r->r[0] == 15) {
		#ifdef TRACE
		module_printf(NULL, "FSCV: OS_FSControl 15 issued\n");
		#endif
	}
	return 1;
}
#endif

#ifdef TRACE
/* Debugging routine.  If str is NULL, then the log is printed to 'f' (or stderr
 * if f was NULL).  If f is NULL, the message is added to the log but not displayed
 * on the screen.  If neither f nor str was NULL, the screen characteristcs are set
 * to useful things (text window is reset, default colours restored and text origin
 * restored to 0,0, and the message is printed to the screen and copied to tne log.
 * A monotonic coumnter is incremented for each debug message logged.  Timestamps
 * are stored in the log buffer too.
 */
void module_printf(FILE *f, const char *str, ...)
{
	static int callcount = 0;
	static char pbuffer[65536];
	static int pbufferptr = 0;
	va_list ap;
	int inblock[2];

	f=NULL;  /* <<<< remove me to allow debug output to go to the screen */

	if (f != NULL || str == NULL)  {
		inblock[1] = -1;
		inblock[0] = 132;
		_swix(OS_ReadVduVariables, _INR(0,1), inblock, inblock);
		_swix(OS_WriteC, _IN(0), 6);
		if (inblock[0] > 20) {
			int i;
			for (i=0; i<0; ++i) (void) _kernel_osbyte(19,0,0);
			_swix(OS_WriteN, _INR(0,1), "\x1a\x0c", 2);
		}
		_swix(OS_WriteC, _IN(0), 20);
	}

	if (!str) {
		if (pbufferptr > 0) fprintf(f?f:stderr, "%s\n", pbuffer);
		return;
	}

	++callcount;
	if (f != NULL) {
		fprintf(f, "(%4d) ", callcount);
		va_start(ap, str);
		vfprintf(f, str, ap);
		va_end(ap);
	}
	va_start(ap, str);
	_swix(OS_ReadMonotonicTime, _OUT(0), inblock);
	pbufferptr += sprintf(pbuffer + pbufferptr, "(%8d) (%4d) ", inblock[0], callcount);
	pbufferptr += vsprintf(pbuffer + pbufferptr, str, ap);
	if (pbufferptr > 60000) pbufferptr = 0;
	va_end(ap);
}
#endif
