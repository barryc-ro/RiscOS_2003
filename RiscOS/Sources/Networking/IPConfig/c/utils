/*
 * IPConfig (utils.c)
 *
 * Copyright (C) Acorn Computers Ltd. 1995-1997
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include "kernel.h"
#include "swis.h"
#include "utils.h"
#include "module.h"
#ifdef TRACE
#  include "IPConfHdrD.h"
#else
#  include "IPConfHdr.h"
#endif

/* This value limits the number of concurrently open message files being held by
 * the IPConfig module.  To allow for maximum flexibility, there may be several
 * files being held open at any one time which are searched in reverse order of
 * opening, so open the most generic file first and the most specific last.
 */

#define MAX_MESSAGE_FILES	(4)

/* We must remember the filename permanently so that MessageTrans can re-open the file.
 */
typedef struct {
        int fd[4];
        char filename[sizeof(Module_Title) + sizeof("Messages") + sizeof(":FSxxx.")];
} mt_descr;

static mt_descr messages[MAX_MESSAGE_FILES];

/* This is set to the number of Messages files that we have opened.
 */
static int opened = 0;


_kernel_oserror *read_message_2 (const char *token, const char **buffer, size_t *inoutlength,
		const char *arg1, const char *arg2)
{
        _kernel_oserror *e = 0;
	int i;

	#ifdef TRACE
	/*module_printf(stderr, "Seek token `%s' (opened=%d)\n", token, opened);*/
	#endif

        if (opened == 0) {
                if (buffer != NULL) {
                        char *cpbuf = (char *) *buffer;
	                if (cpbuf != NULL) {
		                (void) strncpy(cpbuf, "NoMessages", *inoutlength);
                	}
                }
                return NULL;
        }
	for (i=opened-1; i>=0; --i) {
	        e = _swix(MessageTrans_Lookup, _INR(0,7)|_OUTR(2,3), messages[i].fd,
        		token, *buffer,	*inoutlength, arg1, arg2, 0, 0, buffer, inoutlength);
	        if (e == NULL) {
	                #ifdef TRACE
	                /*module_printf(stderr, "Token found (fd %d)\n", i);*/
	                #endif
	                break;
	        }
	}

	#ifdef TRACE
	if (e) module_printf(stderr, "Token not found - %s\n", e->errmess);
	#endif
	return e;
}

_kernel_oserror *read_message (const char *token, const char **buffer, size_t *inoutlength)
{
        return read_message_2(token, buffer, inoutlength, 0, 0);
}

#ifndef ROM
extern void *messages_file(void);

_kernel_oserror *utils_register_msgs(void)
{
	return _swix(ResourceFS_RegisterFiles, _IN(0), messages_file());
}

_kernel_oserror *utils_deregister_msgs(void)
{
	return _swix(ResourceFS_DeregisterFiles, _IN(0), messages_file());
}
#endif

/* ------------------------------------ raising errors ---------------------------------------- */

static _kernel_oserror *find_error (void)
{
	static _kernel_oserror global_error_block;
	return &global_error_block;
}

_kernel_oserror *make_error (int err_num, int num_args, ...)
{
   	/*
    	 * Generate a RISC OS error block.
    	 */

   	va_list	     	ap;
   	char		*s;
   	int		i=4;
   	_kernel_oserror *ptr = find_error(), *e = 0;
   	char		*sub[4]={0,0,0,0};

   	ptr->errnum = err_num + ERROR_BASE;
   	sprintf (ptr->errmess, "E%02x:Error %x", err_num&0xff, err_num);

   	num_args = (num_args>4)?4:num_args;

   	for (va_start (ap, num_args); num_args--; i++) {
      		s = va_arg (ap, char *);
      		sub[i] = (s && *s) ? s : NULL; /* copy (pointer to args)s into registers */
   	}
   	va_end(ap);

	for (e=ptr, i=opened-1; i>=0; --i) {
	        e = _swix(MessageTrans_ErrorLookup, _INR(0,7), ptr, messages[i].fd, 0, 0,
   			sub[0], sub[1], sub[2], sub[3]);
        	if (e->errnum == ptr->errnum) {
                        /* SWI will always return an error.  If the error number matches
                         * the specified error number, then the message was found and
                         * translated OK.  If it did not match, then it is a MessageTrans
                         * error (probably token not found) and we continue searching
                         * for the message in the other message files.
                         */
                        break;
                }
	}

	return e;
}


/* --------------------------------------- message file handling ------------------------------ */

_kernel_oserror *messages_file_open (const char *filename)
{
        if (opened == MAX_MESSAGE_FILES) {
                return NULL;
        }
        else {
	        _kernel_oserror *e;

	        (void) strncpy(messages[opened].filename, filename, sizeof(messages[opened].filename));

    		e = _swix(MessageTrans_OpenFile, _INR(0,2), messages[opened].fd,
    			messages[opened].filename, 0);
	    	if (e == NULL) {
                        #ifdef TRACE
                        module_printf(stderr, "Opened %s OK\n", filename);
                        #endif
                	++opened;
	        }
	        return e;
        }
}

_kernel_oserror *messages_file_close (void)
{
        #ifdef TRACE
        module_printf(stderr, "Closing all messages files\n");
        #endif
        while (opened > 0) {
                --opened;
                (void) _swix(MessageTrans_CloseFile, _IN(0), messages[opened].fd);
        }

        return NULL;
}
