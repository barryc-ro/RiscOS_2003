/*
 * IPConfig (lineeditor.c)
 *
 * Copyright (C) Acorn Computers Ltd. 1995-1998
 *
 *
 * This code borrowed from C library. (armsys.c, function _ttyread)
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <time.h>
#include "kernel.h"
#include "swis.h"

#include "lineedit.h"

#define LF '\n'

/* SNB: The clock calls have been commented out; the buffer priming loop
 *      has been inserted.
 */

int lineedit_getline(unsigned char *buff, int size)
{
/* behaviour similar to Kgbpb but reads from keyboard, performing local  */
/* edits as necessary.  Control chars echo as ^<upper case>.             */
/* AM: ignore clock ticks while waiting for keyboard                     */
/* If _IOBIN is set return 1st char read with no echo.
 * If _IONBF is set return 1st char read with echo.
 * Else read till CR LF ^D or EOF and return line.  Refuse echo if buffer full.
 */
    const int flag=0;
    int count=0;
    /*time_t t = clock();*/
    /* Insert contents of buffer into buffer */
    for (count=0; count < size && buff[count]; ++count) {
            const unsigned char ch = buff[count];
            if (ch < ' ' && ch != 0x07)
               _kernel_oswrch('|'), _kernel_oswrch(ch | '@');
            else
               _kernel_oswrch(ch);
    }
    /* End insertion */
    do
    {   int ch;
        do {
            ch = _kernel_osrdch();
            if (ch == -27) _kernel_osbyte(126, 0, 0);
        } while (ch == -27) /* ESCAPE */;
        if (flag & _IOBIN && ch != EOF && ch != _kernel_ERROR)
            buff[count++] = ch;             /* binary - no echo */
        else switch (ch)
        {
case _kernel_ERROR:
case EOF:                                   /* see _osrdch for EOF */
case 0x04:  /*_clock_ignore(t);*/               /* ^D */
            return(0x80000000+size-count);
case '\n':                                  /* treat CR as LF */
case '\r':  if(count>=size) continue;
            _kernel_oswrch('\r'); _kernel_oswrch(LF);
            buff[count++] = '\n';
            /*_clock_ignore(t);*/
            return(size-count);
case 0x08:                                  /* BS     */
case 0x7f:  if(count!=0)                    /* rubout */
            {   _kernel_oswrch(0x7f);
                if (buff[--count] < ' ') _kernel_oswrch(0x7f);
            }
            break;
case 0x15:  while(count>0)                  /* ctrl-U kills line */
            {   _kernel_oswrch(0x7f);
                if (buff[--count] < ' ') _kernel_oswrch(0x7f);
            }
            break;
default:    if(count>=size) continue;
            if (ch < ' ' && ch != 0x07)
               _kernel_oswrch('|'), _kernel_oswrch(ch | '@');
            else
               _kernel_oswrch(ch);
            buff[count++] = ch;
            break;
        }
    } while (!(flag & _IOBIN+_IONBF));
    /*_clock_ignore(t);*/
    return(size-count);
}
