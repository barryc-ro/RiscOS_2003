/*
 * IPConfig (c.nvram)
 *
 *
 * Copyright © Pace Micro Technology plc. 2000
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"
#include "NVRAM.h"

#include "sys/types.h"
#include "netinet/in.h"
#include "net/if_arp.h"
#include "net/if.h"
#include "netinet/if_ether.h"
#include "arpa/inet.h"
#include "netdb.h"

#include "NVRAMconf.h"
#include "nvramapi.h"
#include "atmconfig.h"
#include "editconfig.h"
#include "utils.h"

#ifdef USENVRAM

static _kernel_oserror *nvram_read(const char *tag, const void *buffer, size_t *inout_buflen)
{
        _kernel_oserror *e;

        e = _swix(NVRAM_Read, _INR(0,2)|_OUT(0), tag, buffer, *inout_buflen, inout_buflen);
        if (e == NULL) switch (*inout_buflen) {
                case NVRAM_READ_TAGERR: e = make_error(error_NVRAM_READ_TAG, 1, tag); break;
                case NVRAM_READ_BUFERR: e = make_error(error_NVRAM_READ_BUFFER, 1, tag); break;
                default: break;
        }

#ifdef TRACE
        module_printf(stderr, "NVRAM error: %s\n", e->errmess);
#endif
        return e;
}

static _kernel_oserror *nvram_write(const char *tag, const void *buffer, size_t buffer_length)
{
        _kernel_oserror *e;
        int result;

        e = _swix(NVRAM_Write, _INR(0,2)|_OUT(0), tag, buffer, buffer_length, &result);
        if (e == NULL) switch (result) {
                case NVRAM_WRITE_TAGERR: e = make_error(error_NVRAM_WRITE_TAG, 1, tag); break;
                case NVRAM_WRITE_LOCKERR: e = make_error(error_NVRAM_WRITE_LOCKED, 1, tag); break;
                default: break;
        }

#ifdef TRACE
        module_printf(stderr, "NVRAM error: %s\n", e->errmess);
#endif
        return e;
}

static const char *nvram_map(int baseloc)
{
        static const struct {
                enum cmos_locations_and_associated_constants cmos;
                const char *nvram_tag;
        } tags[] = {
                { cmos_SERVER_IP,               "BootServerIP"} ,
                { cmos_DNS_IP,                  "DNSIPAddr" },
                { cmos_GATEWAY_IP,              "DefaultIPRoute" },
                { cmos_IP_ADDR_1,               "IPConfigIPAddr1" },
                { cmos_IP_ADDR_2,               "IPConfigIPAddr2" },
                { cmos_IP_ADDR_3,               "IPConfigIPAddr3" },
                { cmos_IP_ADDR_4,               "IPConfigIPAddr4" },
                { cmos_HOST_IP,                 "IPConfigHostIP012" },
                { cmos_HOST_IP_OCTET_4,         "IPConfigHostIP3" },
                { cmos_NBNS_IP,                 "LanManNBNS0" },
                { cmos_NBNS_IP_OCTETS_123,      "LanManNBNS123" },
                { cmos_BOOT_MOUNT,              "NetBootMount" },
                { cmos_NB_BOOT_SERVER,          "LanManFSBootServer" },
                { cmos_NB_BOOT_SERVER_BYTE_0,   "NetFSId2" },
                { cmos_NETMASK,                 "IPConfigCIDRLength" },
                { cmos_STATIC_FLAG,             "IPConfigStaticBoot" },
                { cmos_CHECKSUM,                "NVRAMChecksum" },
                { cmos_PRIMARY_FILESYSTEM,      "FileSystem" },
                { cmos_SECONDARY_FILESYSTEM,    "SecondaryFileSystem" },

                { cmos_NB_BOOT_SERVER_ZERO_MARKER, "NetFSId1" },

        };
        int i;

        for (i=0; i<(sizeof(tags)/sizeof(*tags)); ++i) {
                if (baseloc == tags[i].cmos) return tags[i].nvram_tag;
        }

        return NULL;
}

static unsigned int read_cmos_byte(int location)
{
        unsigned char value;
        size_t x = 1;

        nvram_read(nvram_map(location), &value, &x);
        return x == 1 ? value : 0;
}

static void write_cmos_byte(int location, unsigned int value)
{
        nvram_write(nvram_map(location), &value, 1);
}

/* Read an IP address (or 4 byte value) from CMOS.
 */
static void ReadIPCMOS( int location, struct in_addr *ip )
{
        const char *ipc = (const char *) ip;
        size_t size;

        switch (location) {
                case cmos_NBNS_IP:
                        size = 1;
                        nvram_read(nvram_map(location), ip, &size);
                        size = 3;
                        nvram_read(nvram_map(cmos_NBNS_IP_OCTETS_123), ipc + 1, &size);
                        break;
                case cmos_HOST_IP:
                        size = 3;
                        nvram_read(nvram_map(location), ip, &size);
                        size = 1;
                        nvram_read(nvram_map(cmos_HOST_IP_OCTET_4), ipc + 3, &size);
                        break;
                default:
                        size = sizeof(*ip);
                        nvram_read(nvram_map(location), ip, &size);
                        break;
        }
}


/* Write an IP address (or 4 byte value) to CMOS.
 */
static void WriteIPCMOS( int location, const struct in_addr *ip )
{
        const char *ipc = (const char *) ip;

        switch (location) {
                case cmos_NBNS_IP:
                        nvram_write(nvram_map(location), ip, 1);
                        nvram_write(nvram_map(cmos_NBNS_IP_OCTETS_123), ipc + 1, 3);
                        break;
                case cmos_HOST_IP:
                        nvram_write(nvram_map(location), ip, 3);
                        nvram_write(nvram_map(cmos_HOST_IP_OCTET_4), ipc + 3, 1);
                        break;
                default:
                        nvram_write(nvram_map(location), ip, sizeof(*ip));
                        break;
        }
}

/* Write a \0 terminated string to CMOS.
 */
static void WriteStringCMOS( int location, char *p, size_t length )
{
        nvram_write(nvram_map(location), p, length);
}

static void ReadNBBSCMOS(char *buf)
{
        size_t length = cmos_NB_BOOT_SERVER_SZ - 1;
        /* Reads the name of the primary boot server */
        buf[0] = read_cmos_byte(cmos_NB_BOOT_SERVER_BYTE_0);
        nvram_read(nvram_map(cmos_NB_BOOT_SERVER), buf + 1, &length);
}

static void WriteNBBSCMOS(char *buf)
{
        size_t length = strlen(buf);
        /* Writes the name of the primary boot server */
        write_cmos_byte(cmos_NB_BOOT_SERVER_ZERO_MARKER, 0);
        write_cmos_byte(cmos_NB_BOOT_SERVER_BYTE_0, *buf);
        if (length < cmos_NB_BOOT_SERVER_SZ) ++length;
        WriteStringCMOS(cmos_NB_BOOT_SERVER, buf+1, length);
}



/* Read all static IP data from CMOS.
 */
void ReadIPData( ip_data *ip )
{
        size_t length;
        ReadIPCMOS( cmos_HOST_IP, &ip->client_ip );
        ReadIPCMOS( cmos_SERVER_IP, &ip->server_ip );
        ReadIPCMOS( cmos_GATEWAY_IP, &ip->gateway_ip );
        ReadIPCMOS( cmos_DNS_IP, &ip->dns_ip );
        ReadIPCMOS( cmos_IP_ADDR_1, &ip->addr1_ip );
        ReadIPCMOS( cmos_IP_ADDR_2, &ip->addr2_ip );
        ReadIPCMOS( cmos_IP_ADDR_3, &ip->addr3_ip );
        ReadIPCMOS( cmos_IP_ADDR_4, &ip->addr4_ip );
        ReadIPCMOS( cmos_NBNS_IP, &ip->nbns_ip );
        ReadNBBSCMOS( ip->nbns_bootserver );
        length = cmos_BOOT_MOUNT_SZ;
        nvram_read(nvram_map(cmos_BOOT_MOUNT), ip->boot_mount, &length );
        ip->nbbs_zero_marker = read_cmos_byte(cmos_NB_BOOT_SERVER_ZERO_MARKER);

        ip->atm_flags = ReadATMCMOS( &ip->atm_pvc, &ip->atm_boot1, &ip->atm_boot2 );

        ip->configured_fs = nvram_read_configured_fs();
        ip->netmask = read_cmos_byte(cmos_NETMASK);
        ip->static_flag = read_cmos_byte(cmos_STATIC_FLAG) != 0;
        ip->terminator = '\0';
        ip->nterminator = '\0';
        SetMask(&ip->netmask_ip, ip->netmask);
}


/*
 * Write all static IP data to CMOS.
 */
void WriteIPData( ip_data *ip )
{
        size_t length;

        WriteIPCMOS( cmos_HOST_IP, &ip->client_ip );
        WriteIPCMOS( cmos_SERVER_IP, &ip->server_ip );
        WriteIPCMOS( cmos_GATEWAY_IP, &ip->gateway_ip );
        WriteIPCMOS( cmos_DNS_IP, &ip->dns_ip );
        WriteIPCMOS( cmos_IP_ADDR_1, &ip->addr1_ip );
        WriteIPCMOS( cmos_IP_ADDR_2, &ip->addr2_ip );
        WriteIPCMOS( cmos_IP_ADDR_3, &ip->addr3_ip );
        WriteIPCMOS( cmos_IP_ADDR_4, &ip->addr4_ip );
        WriteIPCMOS( cmos_NBNS_IP, &ip->nbns_ip );
        if (ip->nbbs_zero_marker == 0) {
                WriteNBBSCMOS ( ip->nbns_bootserver );
        }
        length = strlen(ip->boot_mount);
        if (length < cmos_BOOT_MOUNT_SZ) ++length;
        WriteStringCMOS( cmos_BOOT_MOUNT, ip->boot_mount, length );
        WriteATMCMOS ( ip->atm_flags, ip->atm_pvc, &ip->atm_boot1, &ip->atm_boot2 );

        write_cmos_byte(cmos_NETMASK, ip->netmask);
        write_cmos_byte(cmos_STATIC_FLAG, ip->static_flag);
}

/* Called to establish what the current filesystem configuration is */
int nvram_read_configured_fs(void)
{
        return read_cmos_byte(cmos_SECONDARY_FILESYSTEM);
}

void nvram_write_configured_fs(int fs)
{
        write_cmos_byte(cmos_SECONDARY_FILESYSTEM, fs);
}

#endif
