/*
 * IPConfig (NVRAMConf.h)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */

/* This file should not be customised unless absolutely necessary.
 * You must be aware of the consequences of needing this to be
 * different in different projects.
 *
 * You can always supply a Custom messages file in ResourceFS (or
 * point IPConfig$Path at an appropriate alternative location
 * before the module is initialised)
 *
 */
#ifndef nvramconf_h_included
#define nvramconf_h_included

#ifdef __cplusplus
extern "C" {
#endif

enum cmos_locations_and_associated_constants {
        /* These values are 4-byte IP addresses, stored in consecutive
         * bytes in network byte order
         */
        cmos_SERVER_IP = 0x38,
        cmos_DNS_IP = 0x95,
        cmos_GATEWAY_IP = 0xe0,

        /* Note that these values overlay the User area */
        cmos_IP_ADDR_4 = 0x1e,
        cmos_IP_ADDR_3 = 0x22,
        cmos_IP_ADDR_2 = 0x26,
        cmos_IP_ADDR_1 = 0x2a,

        /* These values are 4-byte IP addresses, stored in three
         * consecutive bytes in network order with the lowest order
         * octet stored elsewhere.  The mappings need to be encoded
         * into editconfig.c/get_cmos_vector()
         */
        cmos_HOST_IP = 0x6c,
                cmos_HOST_IP_OCTET_4 = 0x00,
        cmos_NBNS_IP = 0x50,
                cmos_NBNS_IP_OCTET_0 = 0x50,
                cmos_NBNS_IP_OCTETS_123 = 0xe4,

        /* This is a string - beware, buffer is reused for secondary
         * boot server name for LanManFS booting
         */
        cmos_BOOT_MOUNT = 0x51,
                cmos_BOOT_MOUNT_SZ = 26,
        cmos_NB_BOOT_SERVER_2 = cmos_BOOT_MOUNT,

        /* The primary name server for LanManFS booting is stored
         * with 15 bytes at the core location, and a final byte
         * in NetFSId + 1
         */
        cmos_NB_BOOT_SERVER = 0x9e,
                cmos_NB_BOOT_SERVER_BYTE_16 = 0x02,
                cmos_NB_BOOT_SERVER_SZ = 16,

        /* The following values are not byte-wide and are contained
         * within contiguous bits within a single byte (or are
         * single-bit).  The code which reads and writes the CMOS RAM
         * optimises away multiple reads/writes statically, so there
         * is no performance hit from reading/writing these values
         * in multiple logical operations.
         */
        cmos_NETMASK = 0x6f,
                cmos_NETMASK_SHIFT = 3,
                cmos_NETMASK_MASK  = 0x1f << cmos_NETMASK_SHIFT,
        cmos_STATIC_FLAG = 0x6f,
                cmos_STATIC_FLAG_BIT_MASK = 0x02,

        /* ATM information */
                cmos_ATM_ADDRESS_SZ = 20,

        /* Miscellaneous value required for NVRAM validation */
        cmos_CHECKSUM = 0xef,

        /* Currently configured filesystem */
        cmos_FILESYSTEM = 0x05
};

enum filesystem_numbers {
        filesystem_LANMANFS = 102,
        filesystem_NFS = 33
};

struct atm_addr {
        unsigned char   bytes[cmos_ATM_ADDRESS_SZ];
};

typedef struct _ip_data
{
        struct in_addr  client_ip;
        struct in_addr  server_ip;
        struct in_addr  gateway_ip;
        struct in_addr  addr1_ip;
        struct in_addr  addr2_ip;
        struct in_addr  addr3_ip;
        struct in_addr  addr4_ip;
        struct in_addr  dns_ip;
        struct in_addr  netmask_ip;
        struct in_addr  nbns_ip;

        int             atm_flags;
        struct atm_addr atm_boot1;
        struct atm_addr atm_boot2;

        unsigned int    static_flag;
        unsigned int    netmask;
        unsigned short  atm_pvc;
        unsigned char   configured_fs;
        char            nbns_bootserver[cmos_NB_BOOT_SERVER_SZ];
        char            nterminator;
        char            boot_mount[cmos_BOOT_MOUNT_SZ];
        char            terminator;
} ip_data;


/* The following function is implemented by iicpoke.s and is only
 * used if the kernel is protecting byte 0 of the NVRAM.  STB22
 * and desktop machines will; STB3 and later should not.  It will
 * drive the STB22/desktop hardware directly in order to change
 * the contents of the byte.  It must only be called when suitable
 * hardware is present.
 */
extern void iicpoke(unsigned int value);

/* The following definitions provide the interface to the ATM driver
 */
extern _kernel_oserror *atm_boot_config(
        int flags,
        int reason,
        int item,
        void *data);

extern _kernel_oserror *atm_read_config(
        int item,
        void *data);

extern _kernel_oserror *atm_write_config(
        int item,
        void *data);

extern _kernel_oserror *atm_validate_config(
        int item,
        void *data);

enum atm_boot_config_reason_codes {
        atm_config_SANITISE,
        atm_config_READ,
        atm_config_VALIDATE,
        atm_config_WRITE
};

enum atm_boot_config_items {
        atm_config_item_ALL,
        atm_config_item_BOOT_PVC,
        atm_config_item_ADDR_1,
        atm_config_item_ADDR_2
};

#ifdef __cplusplus
}
#endif

#endif
