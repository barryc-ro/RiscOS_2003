/*
 * IPConfig (editconfig.h)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */

#ifndef editconfig_h_included
#define editconfig_h_included

#ifndef nvramconf_h_included
#include "NVRAMConf.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

/*
 *  Writes the given tag to the output, ensuring that it is indented by
 *  LMargin characters.  The second function also puts a newline after
 *  printing the message; the third puts an additional newline before
 *  outputting it.
 */
extern size_t write_tag_msg(const char *tag);
extern void write_tag_msg_nl(const char *tag);
extern void write_tag_nl_msg_nl(const char *tag);

/* Reads the given tag into the buffer (up to msg bytes)
 */
extern _kernel_oserror *read_msg(const char *tag, char *buffer, size_t msg);

/* Format a 6-byte MAC address into the given buffer.  Buffer must be 18
 * characters long (13 if sep is '\0') .  If sep is '\0' then no separator
 * is placed between bytes of the MAC address to allow automatic hostname
 * generation to use the same function.
 */
extern void format_mac_address(const struct ether_addr *mac, char *buffer, char sep);

/* GetMask takes a sub-net mask and stores the number of contiguous bits in the
 * mask, with a value of 0 representing 255.255.255.255.
 */
extern void GetMask(const struct in_addr *ip, int *bits);

/* Returns the IPCount tag value */
extern int read_address_count(void);

/* Returns the KeyDelay tag value */
extern int read_keywait_delay(void);

/* Returns non-zero if an ATM device driver was found when enumerating drivers */
extern int using_atm_card(void);
/* Called to set the flag during driver enumeration if an a... interface is found */
extern void found_atm_card(void);

/* Reads and writes all the CMOS data in which this module is interested, storing
 * it in the cache structure
 */
extern void ReadIPData( ip_data *ip );
extern void WriteIPData( ip_data *ip );

/* Called by the dynamic boot code just before setting the default route if an
 * ATM driver was found to allow the ATM driver to be prodded with the ATMStart
 * tag command
 */
extern void editconfig_exec_atm_start(ip_data *);

/* Called to establish what the current filesystem configuration is */
extern int editconfig_read_configured_fs(void);
extern void editconfig_write_configured_fs(int);
/* Returns non-zero if the filing system has *changed* */
extern int editconfig_write_configured_fs_by_name(const char *name);


#ifdef __cplusplus
}
#endif

#endif
