#include <sys/types.h>
#include <sys/uio.h>
#include <sys/errno.h>
#include <sys/socket.h>
#include <sys/socketvar.h>
#include <kernel.h>

#define XBIT            0x20000
#define BASESOCKETSWI   0x41200+XBIT

#define Socket          BASESOCKETSWI+0
#define Socketclose     BASESOCKETSWI+16
#define Socketioctl     BASESOCKETSWI+18

/*
 * socket interface stubs
 */
int errno;
extern _kernel_oserror *_kernel_swi();

socket(domain, type, protocol)
int domain, type, protocol;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = domain;
        rin.r[1] = type;
        rin.r[2] = protocol;
        e = _kernel_swi(Socket, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : rout.r[0]);
}

socketclose(d)
int d;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = d;
        e = _kernel_swi(Socketclose, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : 0);
}

socketioctl(s, cmd, data)
int s, cmd;
char *data;
{
        _kernel_oserror *e;
        _kernel_swi_regs rin, rout;

        rin.r[0] = s;
        rin.r[1] = cmd;
        rin.r[2] = (int)data;
        e = _kernel_swi(Socketioctl, &rin, &rout);
        errno = e ? e->errnum : 0;
        if (errno > EREMOTE) errno = ESRCH;
        return (errno ? -1 : 0);
}

