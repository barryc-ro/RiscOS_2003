/*
 * BootP
 * 
 * Initiate BootP for Set-top box.
 */

#include <sys/types.h>
#include <sys/uio.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <sys/ioctl.h>
#include <netinet/in.h>
#include <net/if.h>
#include <stdio.h>
#include <sys/errno.h>
#include <ctype.h>
#include <kernel.h>
#include <swis.h>
#include "dci4.h"

void *module_wsp = 0;

int ifcnt = 0;

struct {
    int  e_nbr;
    char e_string[36];
} ebuf = { 0 };

/*ARGS_USED*/
_kernel_oserror *
bp_init(cmd_tail, pbase, pw)
char *cmd_tail;
int pbase;
void *pw;
{
    module_wsp = pw;
    (void) establish_addresses();
    if (ifcnt == 0)              
        return ((_kernel_oserror *)0);
    strcpy(ebuf.e_string, "DoBootP completed");
    ebuf.e_nbr = 1;
    return ((_kernel_oserror *)&ebuf);
}

int establish_addresses()
{
    char buf[512], name[16], macadr[6];
    struct ifconf ifc;
    struct ifreq ifreq, *ifr;
    struct sockaddr_in *sin;
    int s, n, retried = 0;
    char var_buf[64];
    
    read_device_name(name, macadr);
    if ((s = socket(AF_INET, SOCK_DGRAM, 0)) < 0) 
        return (1);
again:
    ifc.ifc_len = sizeof (buf);
    ifc.ifc_buf = buf;
    if (socketioctl(s, SIOCGIFCONF, (char *)&ifc) < 0) 
        goto out;
    ifcnt = 0;
    ifr = ifc.ifc_req;
    for (n = ifc.ifc_len / sizeof (struct ifreq); n > 0; n--, ifr++) {
        ifreq = *ifr;
        if (socketioctl(s, SIOCGIFFLAGS, (char *)&ifreq) < 0 || ifreq.ifr_flags & IFF_LOOPBACK)
            continue;
        if ((ifreq.ifr_flags & (IFF_BROADCAST|IFF_UP)) != (IFF_BROADCAST|IFF_UP)) 
            continue;
        if (socketioctl(s, SIOCGIFADDR, (char *)&ifreq) < 0) 
            continue;
        sin = (struct sockaddr_in *)&ifreq.ifr_addr;
        sprintf(name, "%x", sin->sin_addr.s_addr);
        setadrvar(ifcnt, name);
        getvar("Inet$BootFile", var_buf, sizeof(var_buf));
        if (var_buf[0])
            setvar("Inet$MountPath", var_buf);
        sprintf(var_buf, "%s%x%x", "OmSTB", macadr[4]&0xff, macadr[5]&0xff);
        setvar("Inet$HostName", var_buf);
        ifcnt++;
    }
    if (ifcnt == 0 && !retried) {
        strncpy(ifreq.ifr_name, name, sizeof(ifreq.ifr_name));
        if (socketioctl(s, SIOCGIFFLAGS, (caddr_t)&ifreq) < 0) 
            goto out;
        if (!ifrconfig(s, name)) {
            socketclose(s);
            return (0);
        }
        retried = 1;
        goto again;
    }
out:
    socketclose(s);
    return (1);
}

read_device_name(buf, macadr)
char *buf, *macadr;
{
    _kernel_swi_regs r;
    _kernel_oserror *e;
    struct chaindib *d;
    int i;

    d = 0;
    r.r[0] = (int)d;
    r.r[1] = Service_EnumerateNetworkDrivers;
    e = _kernel_swi(XOS_Bit | OS_ServiceCall,&r, &r);
    if( e != 0 ) {
       buf[0] = 0;
       return;
    }
    d = (struct chaindib *)(r.r[0]);
    if (d == NULL) {
       buf[0] = 0;
       return;
    }
    strcpy(buf, (char *)d->chd_dib->dib_name);
    strcat(buf, "0");
    for( i = 0; i < 6; i++ ) 
        macadr[i] = d->chd_dib->dib_address[i];
    return;
}

setadrvar(ifcnt, adr)
int ifcnt;
char *adr;
{
    _kernel_swi_regs r;
    char varname[32];

    if (ifcnt == 0)
        sprintf(varname, "%s", "Inet$LocalAddr");
    else
        sprintf(varname, "%s%d", "Inet$LocalAddr", ifcnt);
    r.r[0] = (int)varname;
    r.r[1] = (int)adr;
    r.r[2] = strlen(adr)+1;
    r.r[3] = 0;
    r.r[4] = 0; 
    (void) _kernel_swi(XOS_Bit | OS_SetVarVal, &r, &r);
}

setvar(var, str)
char *var, *str;
{
    _kernel_swi_regs r;

    r.r[0] = (int)var;
    r.r[1] = (int)str;
    r.r[2] = strlen(str)+1;
    if (r.r[2] <= 1)
        return;
    r.r[3] = 0;
    r.r[4] = 0; 
    (void) _kernel_swi(XOS_Bit | OS_SetVarVal, &r, &r);
}

int getvar(var, str, len)
char *var, *str;
int len;
{
    _kernel_swi_regs r;
    _kernel_oserror *e;

    r.r[0] = (int)var;
    r.r[1] = (int)str;
    r.r[2] = len;
    r.r[3] = 0;
    r.r[4] = 0; 
    e = _kernel_swi(XOS_Bit | OS_ReadVarVal, &r, &r);
    if (e || r.r[2] == 0) {
        *str = 0; 
        return (0);
    }
    str[r.r[2]] = 0;
    return (1);
}

#define KEYSCAN 121
#define LEFTALT 5
#define RIGHTALT 8

int left_alt_is_pressed()
{
    _kernel_swi_regs r;

    r.r[0] = KEYSCAN;
    r.r[1] = LEFTALT | 0x80;
    (void) _kernel_swi(XOS_Bit | OS_Byte, &r, &r);
    return (r.r[1]);
}

int right_alt_is_pressed()
{
    _kernel_swi_regs r;

    r.r[0] = KEYSCAN;
    r.r[1] = RIGHTALT | 0x80;
    (void) _kernel_swi(XOS_Bit | OS_Byte, &r, &r);
    return (r.r[1]);
}

extern int callb_entry();
volatile int callbackflag = 0;
volatile int rscallbackflag = 0;

int callb_handler(rr)
int *rr;
{
    if (callbackflag == 0) 
        return (1);
    callbackflag = 0;
    if (ifcnt == 0)
        (void) establish_addresses();
    return (1);
}

setcallback()
{
    if (callbackflag == 0) {
        callbackflag = 1;
        if (callback(callb_entry) != 0) 
            callbackflag = 0;
    }
}

int callback(func)
void (* func)();
{
    _kernel_swi_regs r;

    r.r[0] = (int)func;
    r.r[1] = (int)module_wsp;
    return (_kernel_swi(XOS_Bit | OS_AddCallBack, &r, &r) != 0 ? -1 : 0);
}

void bp_service(sn, r, pw)
int sn;
_kernel_swi_regs *r; 
void *pw;
{
    if (sn == Service_DCIDriverStatus && r->r[2] == 0 && ifcnt == 0)
        setcallback();
}
